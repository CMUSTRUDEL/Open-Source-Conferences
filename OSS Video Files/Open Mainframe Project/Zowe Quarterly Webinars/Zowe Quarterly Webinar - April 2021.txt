Title: Zowe Quarterly Webinar - April 2021
Publication date: 2021-04-21
Playlist: Zowe Quarterly Webinars
Description: 
	This webinar will give you an introduction to security tokens and recommend best practice when implementing token-based security in Open Mainframe Projectâ€™s Zowe.

Attendees will learn:

-What is a token
-How tokens help to enhance API security and fuel cross-platform integration
-What security tokens exist and what is their purpose
- Token types used by Zowe API ML and how to choose between them:
- Working directly with SAF JWT tokens
- Utilizing z/OSMF LTPA or JWT token
- Seamlessly exchange .509 client certificate for a JWT
- JWS signature
- What tokens are not yet employed in the Zowe API ML ecosystem and the rationale for introducing them
- Identity token
- Refresh token

Speakers include Michal Supak, Product Manager, and Pavlin Zahariev, Architect, from Broadcom Inc and the Zowe Onboarding Squad.
Captions: 
	00:00:43,280 --> 00:00:47,920
hey folks welcome we'll get started in

00:00:45,039 --> 00:00:47,920
just a moment

00:00:56,320 --> 00:01:00,000
actually i see it's one after so i'm

00:00:58,320 --> 00:01:02,480
going to go ahead and get started mate

00:01:00,000 --> 00:01:05,840
can you hear me

00:01:02,480 --> 00:01:08,000
yep perfectly okay well good day

00:01:05,840 --> 00:01:09,119
everyone and welcome to our third zoe

00:01:08,000 --> 00:01:11,840
quarterly webinar

00:01:09,119 --> 00:01:13,119
we hosted our first webinar last october

00:01:11,840 --> 00:01:15,759
and our second

00:01:13,119 --> 00:01:18,400
on january 20th and we plan to host

00:01:15,759 --> 00:01:22,000
these webinars once per calendar quarter

00:01:18,400 --> 00:01:25,360
so this will serve as our q2 2021

00:01:22,000 --> 00:01:28,479
webinar just a few housekeeping items

00:01:25,360 --> 00:01:30,320
all of the attendees will be on mute the

00:01:28,479 --> 00:01:34,479
webinar will be recorded

00:01:30,320 --> 00:01:35,680
for replay and your means for asking

00:01:34,479 --> 00:01:39,200
questions will be

00:01:35,680 --> 00:01:43,280
to either use the chat or the

00:01:39,200 --> 00:01:45,759
action the q a button

00:01:43,280 --> 00:01:47,920
so i'm rose say catch zoe on boarding

00:01:45,759 --> 00:01:51,439
squad lead and i'll be kicking this off

00:01:47,920 --> 00:01:53,600
and wrapping us up so once again we've

00:01:51,439 --> 00:01:56,399
got quite a bit of content to cover

00:01:53,600 --> 00:01:58,079
here's our general plan we'll quickly

00:01:56,399 --> 00:02:00,880
review the overall intent

00:01:58,079 --> 00:02:02,240
of these quarterly webinars we'll cover

00:02:00,880 --> 00:02:05,680
a focused topic

00:02:02,240 --> 00:02:07,040
this top this quarter's topic is the api

00:02:05,680 --> 00:02:10,879
mediation layer

00:02:07,040 --> 00:02:13,280
tokens and their role in api security

00:02:10,879 --> 00:02:14,800
we'll follow that by a deeper dive on a

00:02:13,280 --> 00:02:16,959
specific zoe squad

00:02:14,800 --> 00:02:20,000
and this month we're featuring the zoe

00:02:16,959 --> 00:02:22,720
onboarding squad and zoe metrics

00:02:20,000 --> 00:02:24,560
before we end we'll run a quick poll

00:02:22,720 --> 00:02:26,800
we'll list out some important events

00:02:24,560 --> 00:02:27,760
with dates we'll share some important

00:02:26,800 --> 00:02:29,599
event links

00:02:27,760 --> 00:02:31,280
the zoe calendar links and of course

00:02:29,599 --> 00:02:32,800
links to our slack channels where you

00:02:31,280 --> 00:02:35,040
can continue to stay in touch with the

00:02:32,800 --> 00:02:37,680
zoe community

00:02:35,040 --> 00:02:38,080
time permitting will try and open up for

00:02:37,680 --> 00:02:40,640
for

00:02:38,080 --> 00:02:42,319
just general q a but we typically do not

00:02:40,640 --> 00:02:44,720
have time to do that so

00:02:42,319 --> 00:02:46,480
please we encourage you to certainly

00:02:44,720 --> 00:02:50,879
post your questions

00:02:46,480 --> 00:02:54,239
as we go

00:02:50,879 --> 00:02:56,800
okay so our intent for this webinar

00:02:54,239 --> 00:02:58,319
series is to offer a forum for open

00:02:56,800 --> 00:03:01,680
exchange of information

00:02:58,319 --> 00:03:03,440
and ideas the goal is to give both

00:03:01,680 --> 00:03:04,720
members of the community and those

00:03:03,440 --> 00:03:06,400
beyond the community

00:03:04,720 --> 00:03:09,519
insights into what's happening with the

00:03:06,400 --> 00:03:11,360
zoe project and how to stay connected

00:03:09,519 --> 00:03:12,560
our plan is to host these webinars and a

00:03:11,360 --> 00:03:15,599
regular cadence

00:03:12,560 --> 00:03:17,440
so far we've stayed on track with once

00:03:15,599 --> 00:03:18,480
per quarter and we plan to continue to

00:03:17,440 --> 00:03:20,560
do that

00:03:18,480 --> 00:03:22,080
the format will remain the same as we

00:03:20,560 --> 00:03:23,360
just described we'll have a focused

00:03:22,080 --> 00:03:26,159
topic

00:03:23,360 --> 00:03:27,840
an update from at least one zoe squad

00:03:26,159 --> 00:03:30,799
project planning information

00:03:27,840 --> 00:03:32,000
awareness around upcoming events and in

00:03:30,799 --> 00:03:34,720
some cases prior

00:03:32,000 --> 00:03:35,760
events such as conferences that have

00:03:34,720 --> 00:03:38,720
just hosted

00:03:35,760 --> 00:03:40,239
some zoe sessions and will give you some

00:03:38,720 --> 00:03:42,239
new to you

00:03:40,239 --> 00:03:44,239
information which could be technical or

00:03:42,239 --> 00:03:45,599
it could be more general

00:03:44,239 --> 00:03:47,920
and finally we're leveraging these

00:03:45,599 --> 00:03:49,120
webinars to collect some feedback from a

00:03:47,920 --> 00:03:51,840
wider audience

00:03:49,120 --> 00:03:53,519
uh all parties interested in all things

00:03:51,840 --> 00:03:55,439
zoe so at times we'll

00:03:53,519 --> 00:03:57,280
we'll be running polls and we do have a

00:03:55,439 --> 00:04:00,799
poll today

00:03:57,280 --> 00:04:03,840
okay so let me introduce you to mikhail

00:04:00,799 --> 00:04:08,720
and pavlin as we transition into

00:04:03,840 --> 00:04:08,720
our focus topic over to you guys

00:04:09,599 --> 00:04:15,840
thank you rose you can proceed to the

00:04:12,000 --> 00:04:15,840
next slide please

00:04:16,320 --> 00:04:22,240
um so let's let's

00:04:19,600 --> 00:04:23,440
jump right into it so we are living in a

00:04:22,240 --> 00:04:25,759
world of

00:04:23,440 --> 00:04:27,840
where the tokens have many applications

00:04:25,759 --> 00:04:28,960
like providing a physical access to the

00:04:27,840 --> 00:04:31,600
bars

00:04:28,960 --> 00:04:33,440
restaurants or rather making sure you

00:04:31,600 --> 00:04:35,520
can return back to them

00:04:33,440 --> 00:04:37,600
let's call this application a physical

00:04:35,520 --> 00:04:39,360
access another example

00:04:37,600 --> 00:04:41,040
would be the usage of tokens that you

00:04:39,360 --> 00:04:43,680
can exchange for a

00:04:41,040 --> 00:04:44,240
set of services like a supermarket cart

00:04:43,680 --> 00:04:46,000
or

00:04:44,240 --> 00:04:47,759
when you purchase a token at the gas

00:04:46,000 --> 00:04:50,000
station to get

00:04:47,759 --> 00:04:52,400
a coffee or you are given a temporary

00:04:50,000 --> 00:04:56,120
key to access some facilities

00:04:52,400 --> 00:04:58,960
an example from digital world would be

00:04:56,120 --> 00:05:00,160
cryptocurrency a secured browser called

00:04:58,960 --> 00:05:02,160
brave

00:05:00,160 --> 00:05:04,560
is using something called basic

00:05:02,160 --> 00:05:06,800
attention tokens the way this works is

00:05:04,560 --> 00:05:08,240
that you are rewarded with a token for

00:05:06,800 --> 00:05:10,400
browsing websites

00:05:08,240 --> 00:05:12,000
and you can then use this token to pay

00:05:10,400 --> 00:05:14,560
content creators

00:05:12,000 --> 00:05:16,400
for services which is kind of an elegant

00:05:14,560 --> 00:05:18,000
way to go around the fact that most of

00:05:16,400 --> 00:05:21,199
the people expect

00:05:18,000 --> 00:05:23,759
things on the internet to be for free

00:05:21,199 --> 00:05:26,080
essentially a token is representation of

00:05:23,759 --> 00:05:29,280
something in a particular

00:05:26,080 --> 00:05:31,520
ecosystem domain or context and

00:05:29,280 --> 00:05:33,039
and this something can be virtually

00:05:31,520 --> 00:05:35,919
anything it can be value

00:05:33,039 --> 00:05:37,280
access or currency as mentioned in this

00:05:35,919 --> 00:05:41,039
sense the applications

00:05:37,280 --> 00:05:43,280
of the tokens are limitless

00:05:41,039 --> 00:05:45,840
so and now the reason we are here today

00:05:43,280 --> 00:05:49,120
is to talk about the usage of tokens

00:05:45,840 --> 00:05:50,479
in a security or cyber security context

00:05:49,120 --> 00:05:54,080
more specifically

00:05:50,479 --> 00:05:57,039
about access to zoe apis using

00:05:54,080 --> 00:05:57,759
software security tokens that are

00:05:57,039 --> 00:06:01,120
offered

00:05:57,759 --> 00:06:04,560
to clients to the client side via

00:06:01,120 --> 00:06:06,400
zoe api ml also

00:06:04,560 --> 00:06:08,319
we are here today to talk about how we

00:06:06,400 --> 00:06:11,680
could integrate mainframe with other

00:06:08,319 --> 00:06:14,160
domains and platforms more easily by

00:06:11,680 --> 00:06:15,759
introducing tokens that are not yet

00:06:14,160 --> 00:06:18,800
employed in zoe

00:06:15,759 --> 00:06:20,639
and in general just to maybe

00:06:18,800 --> 00:06:23,680
inspire a conversation about it we

00:06:20,639 --> 00:06:26,639
believe that a single type of token

00:06:23,680 --> 00:06:27,039
that we use in zoe today might not cover

00:06:26,639 --> 00:06:30,639
all the

00:06:27,039 --> 00:06:34,160
zoe use cases in the future

00:06:30,639 --> 00:06:36,880
let's proceed to the an agenda

00:06:34,160 --> 00:06:37,199
in the next 25 minutes pablin and i will

00:06:36,880 --> 00:06:39,919
be

00:06:37,199 --> 00:06:41,440
showing you the implementation of uh

00:06:39,919 --> 00:06:44,080
jars in zoe

00:06:41,440 --> 00:06:45,360
how client side can use them today what

00:06:44,080 --> 00:06:48,160
are the configuration

00:06:45,360 --> 00:06:48,960
options we'll take a look at the jad

00:06:48,160 --> 00:06:52,080
artifact

00:06:48,960 --> 00:06:54,639
in details and then we'll go broader

00:06:52,080 --> 00:06:56,319
with the tokens outside of the mainframe

00:06:54,639 --> 00:06:58,880
spectrum traditionally

00:06:56,319 --> 00:06:59,919
we'll talk about refresh tokens access

00:06:58,880 --> 00:07:03,199
tokens

00:06:59,919 --> 00:07:05,280
identity tokens first we'll

00:07:03,199 --> 00:07:06,639
talk about their formats functions and

00:07:05,280 --> 00:07:09,680
then we'll summarize

00:07:06,639 --> 00:07:11,280
possible enhancements to zoe in the end

00:07:09,680 --> 00:07:12,960
and we'll highlight three major

00:07:11,280 --> 00:07:15,360
takeaways

00:07:12,960 --> 00:07:16,160
provide some best practices and glossary

00:07:15,360 --> 00:07:18,560
of terms

00:07:16,160 --> 00:07:18,560
to go

00:07:20,639 --> 00:07:24,240
before we jump on the zoe implementation

00:07:23,759 --> 00:07:26,800
itself

00:07:24,240 --> 00:07:28,800
let's begin with listing some of the

00:07:26,800 --> 00:07:30,160
challenges when it comes to the user

00:07:28,800 --> 00:07:33,199
access in general

00:07:30,160 --> 00:07:35,199
so first one is that your credentials

00:07:33,199 --> 00:07:37,599
needs to be proven meaning there is

00:07:35,199 --> 00:07:38,639
going to be some sort of provider of

00:07:37,599 --> 00:07:40,960
identity

00:07:38,639 --> 00:07:42,319
and the system has to be able to tell

00:07:40,960 --> 00:07:44,720
whether or not you are

00:07:42,319 --> 00:07:47,360
who do you say you are this is called

00:07:44,720 --> 00:07:51,039
authentication of the user and typically

00:07:47,360 --> 00:07:54,720
serves as an initial entry point

00:07:51,039 --> 00:07:56,960
the gate rather to the system

00:07:54,720 --> 00:07:58,240
uh now this authentication has has

00:07:56,960 --> 00:08:02,080
multiple

00:07:58,240 --> 00:08:04,000
types um most commonly it's a login of

00:08:02,080 --> 00:08:05,360
when it comes to the human user when it

00:08:04,000 --> 00:08:07,680
comes to the application

00:08:05,360 --> 00:08:08,720
authentication or authenticating to the

00:08:07,680 --> 00:08:11,599
system it's

00:08:08,720 --> 00:08:12,080
usually certificates now second

00:08:11,599 --> 00:08:15,120
challenge

00:08:12,080 --> 00:08:16,400
is that once you successfully go through

00:08:15,120 --> 00:08:19,840
the authentication

00:08:16,400 --> 00:08:20,960
that step one then the system has to be

00:08:19,840 --> 00:08:23,199
able to tell

00:08:20,960 --> 00:08:24,160
what do you have access to meaning what

00:08:23,199 --> 00:08:25,759
resources

00:08:24,160 --> 00:08:27,520
in our case or the resources on

00:08:25,759 --> 00:08:29,280
mainframe

00:08:27,520 --> 00:08:30,639
can be used in the context of the

00:08:29,280 --> 00:08:32,640
application

00:08:30,639 --> 00:08:33,760
and this is called authorization rights

00:08:32,640 --> 00:08:37,120
or

00:08:33,760 --> 00:08:38,240
authorization of the user by the way i'm

00:08:37,120 --> 00:08:40,399
listing

00:08:38,240 --> 00:08:41,279
kind of these broader terms under every

00:08:40,399 --> 00:08:43,440
challenge

00:08:41,279 --> 00:08:44,320
to just highlight the fact that these

00:08:43,440 --> 00:08:47,440
things are

00:08:44,320 --> 00:08:50,480
larger topics and there are vendors

00:08:47,440 --> 00:08:54,080
who specialize in these areas and offer

00:08:50,480 --> 00:08:54,640
commercial solutions the third one will

00:08:54,080 --> 00:08:56,720
be that

00:08:54,640 --> 00:08:57,680
the administrator of the system has to

00:08:56,720 --> 00:09:00,320
be able to manage

00:08:57,680 --> 00:09:01,440
your access to the application even

00:09:00,320 --> 00:09:05,440
after you've gone through

00:09:01,440 --> 00:09:07,920
step one and step two it could be that

00:09:05,440 --> 00:09:08,800
your access has to be revoked or vice

00:09:07,920 --> 00:09:11,200
versa

00:09:08,800 --> 00:09:12,240
extended for some reason and the final

00:09:11,200 --> 00:09:15,440
challenge

00:09:12,240 --> 00:09:18,040
is about matching the identities across

00:09:15,440 --> 00:09:19,519
different platforms to allow for better

00:09:18,040 --> 00:09:22,480
interoperability

00:09:19,519 --> 00:09:24,240
and user experience now all of these

00:09:22,480 --> 00:09:25,279
challenges and and this is the point of

00:09:24,240 --> 00:09:28,480
the slide

00:09:25,279 --> 00:09:31,519
is that they can be addressed using

00:09:28,480 --> 00:09:34,080
uh tokens and we

00:09:31,519 --> 00:09:34,959
already addressed most most of them in

00:09:34,080 --> 00:09:37,839
some way

00:09:34,959 --> 00:09:37,839
in zoe

00:09:41,120 --> 00:09:44,640
so let's take a look how the zoe

00:09:42,640 --> 00:09:46,880
implementation works

00:09:44,640 --> 00:09:48,880
so we have the authentication in place

00:09:46,880 --> 00:09:51,600
and and the way it works is

00:09:48,880 --> 00:09:52,080
from the usability point of view is once

00:09:51,600 --> 00:09:54,320
your

00:09:52,080 --> 00:09:55,120
systems programmer deploys mediation

00:09:54,320 --> 00:09:57,600
layer

00:09:55,120 --> 00:09:58,720
you have an access to authentication

00:09:57,600 --> 00:10:01,040
endpoint

00:09:58,720 --> 00:10:02,079
that lets you post your credentials to

00:10:01,040 --> 00:10:05,760
the mainframe

00:10:02,079 --> 00:10:08,000
security provider the provider is saf or

00:10:05,760 --> 00:10:11,120
it could be

00:10:08,000 --> 00:10:13,760
via a mediation layer that is the

00:10:11,120 --> 00:10:15,600
smf and after you send these credentials

00:10:13,760 --> 00:10:18,720
provider then validates them

00:10:15,600 --> 00:10:21,279
and upon a positive positive outcome of

00:10:18,720 --> 00:10:25,040
that validation the token is provider

00:10:21,279 --> 00:10:28,160
provided and the token is called

00:10:25,040 --> 00:10:28,720
json web token and and the way this

00:10:28,160 --> 00:10:31,200
works

00:10:28,720 --> 00:10:31,760
is is that as long as the client side

00:10:31,200 --> 00:10:34,959
possess

00:10:31,760 --> 00:10:37,120
this token your access is fine

00:10:34,959 --> 00:10:38,399
some of the components of zoe ecosystem

00:10:37,120 --> 00:10:42,399
already used this feature

00:10:38,399 --> 00:10:42,399
for some time just as an example

00:10:42,480 --> 00:10:49,760
api catalog and zoe cli both

00:10:46,880 --> 00:10:50,320
enablements are actually documented and

00:10:49,760 --> 00:10:54,079
you can

00:10:50,320 --> 00:10:55,760
just test them out for yourself

00:10:54,079 --> 00:10:58,079
in case you wonder when it comes to the

00:10:55,760 --> 00:11:01,360
catalog the token will be stored

00:10:58,079 --> 00:11:03,920
in the browser and for

00:11:01,360 --> 00:11:04,399
zoe cli users out there the token will

00:11:03,920 --> 00:11:07,120
be

00:11:04,399 --> 00:11:07,920
in the configuration profile important

00:11:07,120 --> 00:11:11,120
is that

00:11:07,920 --> 00:11:13,040
no user id or passwords are stored

00:11:11,120 --> 00:11:15,600
they are merely used once in the login

00:11:13,040 --> 00:11:17,839
prompt of both interfaces

00:11:15,600 --> 00:11:19,040
now you can see that this endpoint does

00:11:17,839 --> 00:11:22,480
not say anything about

00:11:19,040 --> 00:11:24,880
authorization that is because we have

00:11:22,480 --> 00:11:26,079
security profiles taking care of that

00:11:24,880 --> 00:11:28,640
which is

00:11:26,079 --> 00:11:29,600
on mainframe today the most secure thing

00:11:28,640 --> 00:11:31,680
to do

00:11:29,600 --> 00:11:33,519
when it comes to revocation the life

00:11:31,680 --> 00:11:34,880
cycle of the token is managed by the

00:11:33,519 --> 00:11:36,720
provider

00:11:34,880 --> 00:11:38,560
there are options in the gateway to log

00:11:36,720 --> 00:11:42,480
out

00:11:38,560 --> 00:11:44,720
the user using i think it could be an

00:11:42,480 --> 00:11:46,240
api or some sort of configuration in the

00:11:44,720 --> 00:11:49,360
runtime

00:11:46,240 --> 00:11:52,880
in terms of identity federation

00:11:49,360 --> 00:11:55,680
that's a future as far as i know um

00:11:52,880 --> 00:11:56,160
zoe does not address that just yet but

00:11:55,680 --> 00:11:59,680
there

00:11:56,160 --> 00:12:02,320
are there is potential to um

00:11:59,680 --> 00:12:03,200
to to somehow make sure we have

00:12:02,320 --> 00:12:05,920
federation

00:12:03,200 --> 00:12:06,399
uh across the security domains uh

00:12:05,920 --> 00:12:10,000
meaning

00:12:06,399 --> 00:12:13,440
rack f dss acf2 which is a

00:12:10,000 --> 00:12:13,440
good start i think

00:12:16,959 --> 00:12:23,680
so now these are a couple of ways how to

00:12:21,040 --> 00:12:24,639
set the tokens up in zoe in all these

00:12:23,680 --> 00:12:26,959
use cases

00:12:24,639 --> 00:12:28,000
the client side does not really have to

00:12:26,959 --> 00:12:30,079
care

00:12:28,000 --> 00:12:31,120
from from where the tokens are coming

00:12:30,079 --> 00:12:34,240
from

00:12:31,120 --> 00:12:35,440
and so this is more for the sysprox out

00:12:34,240 --> 00:12:36,880
there

00:12:35,440 --> 00:12:38,560
i would like to just highlight the fact

00:12:36,880 --> 00:12:40,720
that there is an option

00:12:38,560 --> 00:12:41,839
that does not require c2 smf to be

00:12:40,720 --> 00:12:45,200
deployed

00:12:41,839 --> 00:12:49,279
in which case api ml gateway provides

00:12:45,200 --> 00:12:50,720
a token on the soft core zoe api ml

00:12:49,279 --> 00:12:52,560
squad is looking

00:12:50,720 --> 00:12:54,079
also at adding the support for

00:12:52,560 --> 00:12:56,560
self-identity tokens

00:12:54,079 --> 00:12:57,600
that i mentioned before in terms of the

00:12:56,560 --> 00:12:59,920
federated

00:12:57,600 --> 00:13:00,880
federation of the domains the biggest

00:12:59,920 --> 00:13:03,360
value

00:13:00,880 --> 00:13:03,920
here beyond what i mentioned is the fact

00:13:03,360 --> 00:13:07,279
that they are

00:13:03,920 --> 00:13:11,920
issued validated and managed directly

00:13:07,279 --> 00:13:11,920
by z2s usm saf

00:13:15,760 --> 00:13:22,720
let's um yeah thank you and

00:13:19,440 --> 00:13:26,000
before i hand over to pablin

00:13:22,720 --> 00:13:26,639
this is a little detail on the json web

00:13:26,000 --> 00:13:30,079
token

00:13:26,639 --> 00:13:32,399
itself so as you can see

00:13:30,079 --> 00:13:33,519
jot is a json document that can be

00:13:32,399 --> 00:13:36,560
signed

00:13:33,519 --> 00:13:37,440
and optionally encrypted it contains

00:13:36,560 --> 00:13:40,880
couple strings

00:13:37,440 --> 00:13:43,760
first one the header typically contains

00:13:40,880 --> 00:13:45,199
of two parts the the type of the token

00:13:43,760 --> 00:13:48,560
which is jot

00:13:45,199 --> 00:13:49,839
and the signature signing algorithm that

00:13:48,560 --> 00:13:53,199
was used in this

00:13:49,839 --> 00:13:54,880
example it's rs256

00:13:53,199 --> 00:13:57,680
and then we have the payload which

00:13:54,880 --> 00:14:00,320
contains a set of claims

00:13:57,680 --> 00:14:00,880
uh claims are pretty much statements

00:14:00,320 --> 00:14:05,440
about

00:14:00,880 --> 00:14:05,440
an identity typically it's the user

00:14:06,000 --> 00:14:10,240
and it also contains some additional

00:14:08,240 --> 00:14:13,839
data like

00:14:10,240 --> 00:14:16,880
the time of when the token was issued

00:14:13,839 --> 00:14:18,959
its expiration date and the issuer

00:14:16,880 --> 00:14:20,800
which is the security provider and set

00:14:18,959 --> 00:14:22,720
to smf in this case

00:14:20,800 --> 00:14:25,519
there could be more types of claims for

00:14:22,720 --> 00:14:28,639
different use cases

00:14:25,519 --> 00:14:32,480
but maybe pauline will address them

00:14:28,639 --> 00:14:35,360
later in the presentation lastly

00:14:32,480 --> 00:14:36,560
when just explain the signature

00:14:35,360 --> 00:14:39,360
signature is used

00:14:36,560 --> 00:14:41,440
to validate whether or not the token is

00:14:39,360 --> 00:14:45,519
trustworthy and hasn't been

00:14:41,440 --> 00:14:48,560
tampered with and

00:14:45,519 --> 00:14:51,920
and i would like to move the

00:14:48,560 --> 00:14:51,920
presentation to pauline

00:14:54,160 --> 00:15:01,040
hello everyone just first i want to ask

00:14:58,079 --> 00:15:03,839
if you hear me i often have sound

00:15:01,040 --> 00:15:06,959
related problems

00:15:03,839 --> 00:15:09,279
i can i can hear you great great

00:15:06,959 --> 00:15:09,279
thank you

00:15:10,720 --> 00:15:13,760
then uh thank you mikhail for

00:15:12,800 --> 00:15:15,680
introducing

00:15:13,760 --> 00:15:17,199
stuff and even providing a lot of

00:15:15,680 --> 00:15:20,800
details i will be

00:15:17,199 --> 00:15:24,079
uh joining that and go further

00:15:20,800 --> 00:15:26,000
uh on the first simple slide uh uh this

00:15:24,079 --> 00:15:29,120
is the first

00:15:26,000 --> 00:15:30,000
category or group of questions i want to

00:15:29,120 --> 00:15:32,720
touch

00:15:30,000 --> 00:15:33,360
and initially or first thing to talk

00:15:32,720 --> 00:15:37,519
about

00:15:33,360 --> 00:15:40,079
is a tokens taxonomy

00:15:37,519 --> 00:15:41,839
which intends to tell you what kind of

00:15:40,079 --> 00:15:43,360
tokens exist according to different

00:15:41,839 --> 00:15:46,639
criteria

00:15:43,360 --> 00:15:47,440
and what they intended for how we can

00:15:46,639 --> 00:15:50,720
use them

00:15:47,440 --> 00:15:54,000
what is the benefit of having them so

00:15:50,720 --> 00:15:55,360
in the second part

00:15:54,000 --> 00:15:58,320
i will provide you with some best

00:15:55,360 --> 00:16:01,759
practices about using the tokens

00:15:58,320 --> 00:16:06,160
it's just the general best practices

00:16:01,759 --> 00:16:06,160
which in the form of checklist

00:16:06,320 --> 00:16:11,920
and in the second part we'll

00:16:09,519 --> 00:16:12,720
move closer to zoe and the security

00:16:11,920 --> 00:16:16,720
practices in

00:16:12,720 --> 00:16:19,600
zoe uh contemporary and future uh

00:16:16,720 --> 00:16:20,639
showing how we imagine improvements in

00:16:19,600 --> 00:16:23,440
zoe

00:16:20,639 --> 00:16:27,199
while keeping the security top notch as

00:16:23,440 --> 00:16:27,199
it is used to be on the mainframe

00:16:27,600 --> 00:16:35,120
now thank you

00:16:30,800 --> 00:16:39,199
on this slide there is the basic setup

00:16:35,120 --> 00:16:42,560
and rolls how the modern security

00:16:39,199 --> 00:16:43,120
is intended to work so we always have a

00:16:42,560 --> 00:16:44,880
user

00:16:43,120 --> 00:16:46,560
it might be an application but it's

00:16:44,880 --> 00:16:48,959
still a user and then

00:16:46,560 --> 00:16:51,199
there would be a client which basically

00:16:48,959 --> 00:16:51,519
is the client application which the user

00:16:51,199 --> 00:16:54,240
is

00:16:51,519 --> 00:16:56,160
uses to access resources but before the

00:16:54,240 --> 00:16:57,600
user can access resources they need to

00:16:56,160 --> 00:17:00,320
be authenticated

00:16:57,600 --> 00:17:01,519
and that's why they are sending their

00:17:00,320 --> 00:17:04,959
credentials

00:17:01,519 --> 00:17:07,280
to the authorization server which

00:17:04,959 --> 00:17:08,640
surprisingly is providing authentication

00:17:07,280 --> 00:17:11,760
in the first step

00:17:08,640 --> 00:17:12,480
but as a result from this authentication

00:17:11,760 --> 00:17:15,600
process

00:17:12,480 --> 00:17:19,039
the authorization server will grant

00:17:15,600 --> 00:17:20,160
access to the client application to act

00:17:19,039 --> 00:17:22,559
on behalf of the

00:17:20,160 --> 00:17:24,400
authenticated user it seems kind of

00:17:22,559 --> 00:17:25,679
complicated switching the roles of the

00:17:24,400 --> 00:17:28,640
user and client

00:17:25,679 --> 00:17:30,000
but in the end it's just about the user

00:17:28,640 --> 00:17:32,720
doing their job

00:17:30,000 --> 00:17:34,000
through an application accessing a

00:17:32,720 --> 00:17:36,480
resource server

00:17:34,000 --> 00:17:37,360
and the resource server needs to know

00:17:36,480 --> 00:17:40,559
who

00:17:37,360 --> 00:17:40,880
is the user and who is the client uh and

00:17:40,559 --> 00:17:43,919
and

00:17:40,880 --> 00:17:46,559
this is easy to verify validate

00:17:43,919 --> 00:17:48,480
uh having the access token provided by

00:17:46,559 --> 00:17:51,919
the authorization server

00:17:48,480 --> 00:17:51,919
we can move further

00:17:52,160 --> 00:17:55,919
okay so we now go to the taxonomy uh

00:17:55,120 --> 00:17:59,520
it's a

00:17:55,919 --> 00:18:02,799
simplified one not exhaustive

00:17:59,520 --> 00:18:05,679
nor complete but important for

00:18:02,799 --> 00:18:06,480
the purpose to explain uh what we have

00:18:05,679 --> 00:18:09,520
now in

00:18:06,480 --> 00:18:12,799
zoe security and what we

00:18:09,520 --> 00:18:15,520
envision to use in the future the first

00:18:12,799 --> 00:18:16,320
category is the format of the tokens

00:18:15,520 --> 00:18:18,880
where we

00:18:16,320 --> 00:18:19,760
distinguish a reference token the

00:18:18,880 --> 00:18:23,360
simplest one

00:18:19,760 --> 00:18:26,000
then opaque token a bit more complicated

00:18:23,360 --> 00:18:26,640
and jwg token the most modern kind of

00:18:26,000 --> 00:18:29,600
token

00:18:26,640 --> 00:18:30,640
actually a family of tokens with

00:18:29,600 --> 00:18:33,600
different features

00:18:30,640 --> 00:18:34,720
which we'll be discussing a bit later a

00:18:33,600 --> 00:18:37,520
second category

00:18:34,720 --> 00:18:38,720
to introduce it it's a division by a

00:18:37,520 --> 00:18:42,000
function

00:18:38,720 --> 00:18:44,799
or usage of the tokens so

00:18:42,000 --> 00:18:45,600
already mentioned access token helps to

00:18:44,799 --> 00:18:48,720
access

00:18:45,600 --> 00:18:52,640
some resources identity token

00:18:48,720 --> 00:18:53,679
tells us who is the user eventually plus

00:18:52,640 --> 00:18:56,080
some extended

00:18:53,679 --> 00:18:56,720
information about it and the refresh

00:18:56,080 --> 00:19:00,480
token

00:18:56,720 --> 00:19:04,400
is the later edition of

00:19:00,480 --> 00:19:07,760
the oauth 2 protocol which says

00:19:04,400 --> 00:19:09,919
that we can prolong user access by

00:19:07,760 --> 00:19:11,679
reissuing access tokens based on the

00:19:09,919 --> 00:19:12,240
refresh token i'll talk about this a bit

00:19:11,679 --> 00:19:15,280
later

00:19:12,240 --> 00:19:16,240
the third category uh is kind of

00:19:15,280 --> 00:19:18,720
optional and

00:19:16,240 --> 00:19:20,640
i probably will not talk about it

00:19:18,720 --> 00:19:22,480
extensively in this presentation because

00:19:20,640 --> 00:19:25,600
it's a bit more technical

00:19:22,480 --> 00:19:27,760
but basically it is that uh since

00:19:25,600 --> 00:19:29,360
the tokens are delivered from the client

00:19:27,760 --> 00:19:32,880
to the resource server

00:19:29,360 --> 00:19:36,000
uh through protocols uh which

00:19:32,880 --> 00:19:39,679
can be trusted while uh in place like

00:19:36,000 --> 00:19:42,960
tos that's fine but we just don't know

00:19:39,679 --> 00:19:45,760
who is behind the keyboard and we

00:19:42,960 --> 00:19:46,880
don't know how to prove the ownership of

00:19:45,760 --> 00:19:50,640
a token

00:19:46,880 --> 00:19:55,600
if we don't employ advanced techniques

00:19:50,640 --> 00:19:58,320
as it mentioned here p-o-p or h-o-k

00:19:55,600 --> 00:19:58,320
next slide please

00:20:00,559 --> 00:20:06,480
so the first token to talk about the

00:20:03,679 --> 00:20:10,320
reference token it is

00:20:06,480 --> 00:20:13,280
a actually very simple thing

00:20:10,320 --> 00:20:14,400
it has to be a randomly generated string

00:20:13,280 --> 00:20:16,880
as a definition

00:20:14,400 --> 00:20:18,400
but also it has to be unique in the

00:20:16,880 --> 00:20:21,520
given context

00:20:18,400 --> 00:20:24,480
it has to be unique in time as well

00:20:21,520 --> 00:20:25,120
uh and then it should be hard to guess

00:20:24,480 --> 00:20:27,520
and forge

00:20:25,120 --> 00:20:28,960
so randomly generated number between 1

00:20:27,520 --> 00:20:31,360
and 10 is not

00:20:28,960 --> 00:20:32,480
very difficult to guess so this is not a

00:20:31,360 --> 00:20:35,840
suitable

00:20:32,480 --> 00:20:38,080
reference token um the usage of

00:20:35,840 --> 00:20:40,159
reference token is based on the fact

00:20:38,080 --> 00:20:42,159
that it is actually serves as an id

00:20:40,159 --> 00:20:44,159
to more extended information which is

00:20:42,159 --> 00:20:46,840
kept securely on the server

00:20:44,159 --> 00:20:48,799
so the token is referencing this

00:20:46,840 --> 00:20:51,760
information

00:20:48,799 --> 00:20:53,679
normally the security server or

00:20:51,760 --> 00:20:54,320
authorization server will expose an end

00:20:53,679 --> 00:20:57,120
point

00:20:54,320 --> 00:20:57,679
where the owner of the token can redeem

00:20:57,120 --> 00:21:03,360
it for

00:20:57,679 --> 00:21:06,320
the extended user or client information

00:21:03,360 --> 00:21:08,159
uh there is need to immediately say that

00:21:06,320 --> 00:21:10,400
there is a warning here that reference

00:21:08,159 --> 00:21:11,679
tokens are often wrongly used to contain

00:21:10,400 --> 00:21:14,000
meaningful information

00:21:11,679 --> 00:21:15,120
people think that if they code it

00:21:14,000 --> 00:21:18,480
somehow

00:21:15,120 --> 00:21:19,679
this is safe but as you see we have a

00:21:18,480 --> 00:21:22,000
token here it looks

00:21:19,679 --> 00:21:23,120
unreadable i just don't know what's

00:21:22,000 --> 00:21:27,280
written there

00:21:23,120 --> 00:21:30,240
but if we click once again on the slide

00:21:27,280 --> 00:21:32,159
we'll see that actually this is the text

00:21:30,240 --> 00:21:35,200
which is in the box here

00:21:32,159 --> 00:21:38,240
uh and it's a simple encoding uh

00:21:35,200 --> 00:21:40,400
encoded with base64 so it's not

00:21:38,240 --> 00:21:41,360
very difficult to record it using

00:21:40,400 --> 00:21:45,200
internet tools

00:21:41,360 --> 00:21:48,240
widely available and free so we may not

00:21:45,200 --> 00:21:50,240
not recognize that the token is easy to

00:21:48,240 --> 00:21:53,120
guess but hackers will try and

00:21:50,240 --> 00:21:54,320
eventually will forget so then

00:21:53,120 --> 00:21:57,280
simplification is

00:21:54,320 --> 00:21:59,200
not sufficient and having some logic in

00:21:57,280 --> 00:21:59,760
generating the token is also not good

00:21:59,200 --> 00:22:02,640
because what

00:21:59,760 --> 00:22:03,360
can be broken around randomness if in

00:22:02,640 --> 00:22:06,960
good size

00:22:03,360 --> 00:22:11,039
and scale cannot be or not that easily

00:22:06,960 --> 00:22:13,840
please second type of token

00:22:11,039 --> 00:22:15,919
opaque token it actually can be a

00:22:13,840 --> 00:22:18,720
reference token as well

00:22:15,919 --> 00:22:19,440
the main feature of opec token is that

00:22:18,720 --> 00:22:22,480
it's not

00:22:19,440 --> 00:22:24,000
readable so whoever can see it on the

00:22:22,480 --> 00:22:25,600
client side

00:22:24,000 --> 00:22:27,600
just cannot read it cannot understand

00:22:25,600 --> 00:22:29,200
what's in it so if it is a reference

00:22:27,600 --> 00:22:29,840
token it's not readable it serves the

00:22:29,200 --> 00:22:31,679
purpose

00:22:29,840 --> 00:22:34,240
but then it has to be redeemed on the

00:22:31,679 --> 00:22:35,760
server in cases when we want to encode

00:22:34,240 --> 00:22:39,039
some information

00:22:35,760 --> 00:22:42,799
uh we need to do a bit more than just

00:22:39,039 --> 00:22:46,320
encoding with base64 encoding

00:22:42,799 --> 00:22:49,440
we can have a structure in the token

00:22:46,320 --> 00:22:50,240
and we need to sign it to be able to

00:22:49,440 --> 00:22:53,280
verify that

00:22:50,240 --> 00:22:56,080
it's not forged well transmitted

00:22:53,280 --> 00:22:57,919
from the client to the server uh this is

00:22:56,080 --> 00:23:00,960
a powerful kind of token

00:22:57,919 --> 00:23:04,480
it is uh the choice of

00:23:00,960 --> 00:23:08,480
uh the famous protocol about two

00:23:04,480 --> 00:23:09,360
or framework also so it's recommended

00:23:08,480 --> 00:23:12,880
there

00:23:09,360 --> 00:23:14,559
and mostly it is used

00:23:12,880 --> 00:23:17,280
in the form of a reference token but

00:23:14,559 --> 00:23:22,799
nothing prevents us to

00:23:17,280 --> 00:23:25,200
charge it with additional information

00:23:22,799 --> 00:23:26,799
and now we reach the most powerful kind

00:23:25,200 --> 00:23:30,240
of tokens

00:23:26,799 --> 00:23:33,760
in the format classification

00:23:30,240 --> 00:23:36,320
this is the jwt family pronounced jot

00:23:33,760 --> 00:23:37,600
i prefer the jwt because of my bad

00:23:36,320 --> 00:23:41,520
pronunciation of

00:23:37,600 --> 00:23:44,480
words so what used to jwt

00:23:41,520 --> 00:23:45,919
basically jwt is a kind of template for

00:23:44,480 --> 00:23:49,440
all the others of

00:23:45,919 --> 00:23:50,240
talk token types from the family whereas

00:23:49,440 --> 00:23:53,919
the most

00:23:50,240 --> 00:23:56,960
important and most widely used are the

00:23:53,919 --> 00:24:00,480
web signature token jwts

00:23:56,960 --> 00:24:04,000
and jwte the first one the signature

00:24:00,480 --> 00:24:06,559
says that the content of the header

00:24:04,000 --> 00:24:07,360
is oh i'm sorry excuse me the content of

00:24:06,559 --> 00:24:10,799
the token

00:24:07,360 --> 00:24:14,320
is signed so it can be verified

00:24:10,799 --> 00:24:16,720
by the audience of the token

00:24:14,320 --> 00:24:18,559
the one who receives it that the token

00:24:16,720 --> 00:24:21,760
was not forced

00:24:18,559 --> 00:24:24,960
during the transmission or by some

00:24:21,760 --> 00:24:27,520
fraudulent party on the client side uh

00:24:24,960 --> 00:24:28,159
if we also want to hide the content of

00:24:27,520 --> 00:24:30,240
the token

00:24:28,159 --> 00:24:32,159
to make it unreadable then then we have

00:24:30,240 --> 00:24:35,760
the option to encrypt it

00:24:32,159 --> 00:24:39,360
we even can encrypt it only partially

00:24:35,760 --> 00:24:41,600
under some concrete agreement

00:24:39,360 --> 00:24:42,720
and in that case it is important to

00:24:41,600 --> 00:24:46,240
remember that

00:24:42,720 --> 00:24:49,679
if the content the payload is encrypted

00:24:46,240 --> 00:24:51,520
we need to uh at least duplicate some of

00:24:49,679 --> 00:24:53,840
the identification fields

00:24:51,520 --> 00:24:54,960
of the token in the header because

00:24:53,840 --> 00:25:00,720
otherwise we just

00:24:54,960 --> 00:25:02,640
wouldn't know who actually this token

00:25:00,720 --> 00:25:03,840
just cannot make the checks alone

00:25:02,640 --> 00:25:06,720
without some

00:25:03,840 --> 00:25:07,279
meta information and the rest of the

00:25:06,720 --> 00:25:09,919
tokens

00:25:07,279 --> 00:25:11,039
are more advanced they can transfer

00:25:09,919 --> 00:25:14,000
encryption keys

00:25:11,039 --> 00:25:14,400
or set of keys and the last one is used

00:25:14,000 --> 00:25:16,559
for

00:25:14,400 --> 00:25:17,600
registration of cryptographic algorithms

00:25:16,559 --> 00:25:20,640
so

00:25:17,600 --> 00:25:24,080
parties can automatically decide on

00:25:20,640 --> 00:25:27,039
uh suitable available algorithms

00:25:24,080 --> 00:25:28,640
and use them when exchanging exchanging

00:25:27,039 --> 00:25:32,559
tokens

00:25:28,640 --> 00:25:34,960
next slide please now we have

00:25:32,559 --> 00:25:35,919
another category this is the function

00:25:34,960 --> 00:25:39,279
this is

00:25:35,919 --> 00:25:43,600
more interesting for our discussion

00:25:39,279 --> 00:25:46,799
probably the first one is the id token

00:25:43,600 --> 00:25:49,279
which obviously is enclosing some

00:25:46,799 --> 00:25:51,440
identification and related information

00:25:49,279 --> 00:25:54,960
access token we already mentioned

00:25:51,440 --> 00:25:58,080
is used for the purpose to

00:25:54,960 --> 00:26:01,279
allow access or maybe prevent access to

00:25:58,080 --> 00:26:03,760
client applications to some resources uh

00:26:01,279 --> 00:26:05,360
in the previous slide i said that all

00:26:03,760 --> 00:26:08,480
too is

00:26:05,360 --> 00:26:11,279
recommending opec token for

00:26:08,480 --> 00:26:13,919
access token and that's the case of many

00:26:11,279 --> 00:26:13,919
applications

00:26:14,400 --> 00:26:20,799
it does not need to be jwt in or out

00:26:17,679 --> 00:26:24,159
but on the zettos on zoe

00:26:20,799 --> 00:26:27,039
and apml in particular we use jwt token

00:26:24,159 --> 00:26:30,799
a success token

00:26:27,039 --> 00:26:33,840
the last token is very powerful

00:26:30,799 --> 00:26:34,400
no worries i'll just say a few words it

00:26:33,840 --> 00:26:39,200
allows

00:26:34,400 --> 00:26:41,039
us to keep user session longer

00:26:39,200 --> 00:26:42,240
so because all the tokens have their

00:26:41,039 --> 00:26:45,039
expiration time

00:26:42,240 --> 00:26:45,679
when it happens users get frustrated

00:26:45,039 --> 00:26:47,760
that

00:26:45,679 --> 00:26:49,520
if they didn't save their work or were

00:26:47,760 --> 00:26:50,400
just in the middle of submitting some

00:26:49,520 --> 00:26:53,360
very important

00:26:50,400 --> 00:26:54,799
information then they may not finish

00:26:53,360 --> 00:26:57,120
their work

00:26:54,799 --> 00:26:58,159
so refresh token allows two things first

00:26:57,120 --> 00:27:01,200
is to prolong

00:26:58,159 --> 00:27:01,440
existing session in some cases it allows

00:27:01,200 --> 00:27:04,559
us

00:27:01,440 --> 00:27:05,600
also to create a new session but connect

00:27:04,559 --> 00:27:08,720
it to the

00:27:05,600 --> 00:27:12,080
stored state of the previous one so have

00:27:08,720 --> 00:27:14,799
some kind of detached in time behavior

00:27:12,080 --> 00:27:14,799
next one please

00:27:15,600 --> 00:27:22,399
now the first one the identity token

00:27:19,279 --> 00:27:25,520
it's meant to identify

00:27:22,399 --> 00:27:27,200
the user and to provide this information

00:27:25,520 --> 00:27:29,200
to the client application

00:27:27,200 --> 00:27:31,120
this is specific for the protocols that

00:27:29,200 --> 00:27:35,279
i mentioned before

00:27:31,120 --> 00:27:38,799
walls2 and oidc ydc man means

00:27:35,279 --> 00:27:41,919
open id connect the most modern protocol

00:27:38,799 --> 00:27:45,440
in the security world nowadays

00:27:41,919 --> 00:27:45,840
and in this two protocols the user is

00:27:45,440 --> 00:27:48,080
not

00:27:45,840 --> 00:27:49,679
authenticated directly in the client

00:27:48,080 --> 00:27:51,679
application so

00:27:49,679 --> 00:27:53,200
the client application actually does not

00:27:51,679 --> 00:27:56,559
know who the user is

00:27:53,200 --> 00:28:00,000
in order to have the user credentials

00:27:56,559 --> 00:28:02,640
like id and eventually some other data

00:28:00,000 --> 00:28:04,880
it needs to receive it from the party

00:28:02,640 --> 00:28:08,159
which provided the authentication

00:28:04,880 --> 00:28:12,960
the so-called authorization server

00:28:08,159 --> 00:28:16,320
the identity token is a jwt token

00:28:12,960 --> 00:28:17,120
it contains claims as all the reality

00:28:16,320 --> 00:28:20,240
tokens

00:28:17,120 --> 00:28:23,919
well these claims can be

00:28:20,240 --> 00:28:27,120
some standard as a sub or the subject

00:28:23,919 --> 00:28:29,120
or expiration or time official etc but

00:28:27,120 --> 00:28:32,159
it also can contain claims like

00:28:29,120 --> 00:28:34,320
name address email any other that is

00:28:32,159 --> 00:28:37,600
suitable for the purpose and available

00:28:34,320 --> 00:28:37,919
at the authorization server claims can

00:28:37,600 --> 00:28:40,480
be

00:28:37,919 --> 00:28:42,320
registered so they're really generic and

00:28:40,480 --> 00:28:44,480
can be used

00:28:42,320 --> 00:28:46,240
with confidence then there are claims

00:28:44,480 --> 00:28:48,159
that we can define

00:28:46,240 --> 00:28:49,360
and they can be public so they can be

00:28:48,159 --> 00:28:52,000
visible everywhere

00:28:49,360 --> 00:28:52,640
or they can be even private claims that

00:28:52,000 --> 00:28:56,480
can be

00:28:52,640 --> 00:29:00,080
hidden a very interesting claim

00:28:56,480 --> 00:29:03,679
no to mention here is the at hash claim

00:29:00,080 --> 00:29:06,880
which actually is a claim uh given to

00:29:03,679 --> 00:29:07,279
the client application to understand uh

00:29:06,880 --> 00:29:10,080
to be

00:29:07,279 --> 00:29:10,960
to be sure that the access token which

00:29:10,080 --> 00:29:14,559
it's

00:29:10,960 --> 00:29:18,480
used which that this token

00:29:14,559 --> 00:29:21,679
is not forged by the time

00:29:18,480 --> 00:29:24,480
uh the pictures which i have here are

00:29:21,679 --> 00:29:26,559
just show the way how this token is used

00:29:24,480 --> 00:29:29,679
so the client application owning

00:29:26,559 --> 00:29:33,279
a identity token can redeem it

00:29:29,679 --> 00:29:35,200
uh for uh getting back some

00:29:33,279 --> 00:29:38,000
sorry this is the second picture which

00:29:35,200 --> 00:29:40,080
is redeeming the token at the user info

00:29:38,000 --> 00:29:41,120
endpoint to receive information about

00:29:40,080 --> 00:29:44,320
the user

00:29:41,120 --> 00:29:46,640
or it can send a

00:29:44,320 --> 00:29:47,440
code secret code to the authorization

00:29:46,640 --> 00:29:50,720
server to

00:29:47,440 --> 00:29:54,159
obtain the user identity token

00:29:50,720 --> 00:29:58,000
next why please

00:29:54,159 --> 00:30:00,960
access token the most widely used token

00:29:58,000 --> 00:30:02,080
sometimes it is called access token even

00:30:00,960 --> 00:30:05,200
if it is not

00:30:02,080 --> 00:30:05,760
actually exactly access token uh very

00:30:05,200 --> 00:30:09,440
often

00:30:05,760 --> 00:30:10,720
people mix id token identity token with

00:30:09,440 --> 00:30:13,840
access token using

00:30:10,720 --> 00:30:16,159
one for the other this is

00:30:13,840 --> 00:30:17,520
sometimes unfortunate because the

00:30:16,159 --> 00:30:21,120
information contained

00:30:17,520 --> 00:30:23,520
contained in the one is not

00:30:21,120 --> 00:30:24,159
intended to be used by the other one so

00:30:23,520 --> 00:30:26,799
it's

00:30:24,159 --> 00:30:28,640
kind of disclosing information to not to

00:30:26,799 --> 00:30:31,760
the right hands

00:30:28,640 --> 00:30:34,880
but anyways it's a token

00:30:31,760 --> 00:30:38,240
um it should to the client

00:30:34,880 --> 00:30:40,559
to be sent to the audience

00:30:38,240 --> 00:30:41,600
which is the resource server so on the

00:30:40,559 --> 00:30:43,200
picture

00:30:41,600 --> 00:30:44,799
on the right side you can see that the

00:30:43,200 --> 00:30:48,320
client which owns the token

00:30:44,799 --> 00:30:51,919
the z coin or token

00:30:48,320 --> 00:30:55,120
wants to access some resource at the api

00:30:51,919 --> 00:30:56,640
v1 srb and is

00:30:55,120 --> 00:30:58,720
sending this request along with the

00:30:56,640 --> 00:31:01,120
token then the resource server

00:30:58,720 --> 00:31:01,760
definitely needs to validate if the

00:31:01,120 --> 00:31:05,039
token

00:31:01,760 --> 00:31:06,960
is still valid and not forged

00:31:05,039 --> 00:31:08,640
it can do it actually itself in the case

00:31:06,960 --> 00:31:12,159
of jwt but

00:31:08,640 --> 00:31:15,039
i have here the more general way

00:31:12,159 --> 00:31:17,120
always available to validate the token

00:31:15,039 --> 00:31:20,000
at the authorization server which issued

00:31:17,120 --> 00:31:22,240
that and finally if the token is valid

00:31:20,000 --> 00:31:23,760
then nothing prevents the resource

00:31:22,240 --> 00:31:28,480
server to allow access to

00:31:23,760 --> 00:31:28,480
the resources which are guarded there

00:31:30,799 --> 00:31:35,039
yep that's fine that's okay um and the

00:31:34,000 --> 00:31:38,559
refresh token

00:31:35,039 --> 00:31:42,640
as i shortly explained it serves uh for

00:31:38,559 --> 00:31:45,120
the purpose to be able to prolong or

00:31:42,640 --> 00:31:46,080
yeah to restart the user session it is

00:31:45,120 --> 00:31:49,440
specific

00:31:46,080 --> 00:31:52,960
for both all out and odc protocols

00:31:49,440 --> 00:31:55,120
um it represents the client credentials

00:31:52,960 --> 00:31:58,080
in this case not the user credentials

00:31:55,120 --> 00:31:58,640
so if the client receives such token

00:31:58,080 --> 00:32:02,000
after

00:31:58,640 --> 00:32:04,399
the authentication or authorization flow

00:32:02,000 --> 00:32:05,360
then the client can be represented by

00:32:04,399 --> 00:32:08,399
this token

00:32:05,360 --> 00:32:10,720
together with some secret

00:32:08,399 --> 00:32:11,519
uh in order to ask the authorization

00:32:10,720 --> 00:32:14,799
server

00:32:11,519 --> 00:32:18,159
for additional access tokens so

00:32:14,799 --> 00:32:18,159
effectively to prolong the session

00:32:19,679 --> 00:32:23,600
there are a couple of notes about it

00:32:22,080 --> 00:32:24,399
this token eliminates the need to

00:32:23,600 --> 00:32:27,279
perform

00:32:24,399 --> 00:32:29,200
user authentication every time so when

00:32:27,279 --> 00:32:32,399
the session is ended or

00:32:29,200 --> 00:32:36,159
based on the success token uh

00:32:32,399 --> 00:32:38,960
then we can have some lighter version

00:32:36,159 --> 00:32:39,760
of the user authentication or even none

00:32:38,960 --> 00:32:42,799
at all

00:32:39,760 --> 00:32:43,760
if we decide that the client site is

00:32:42,799 --> 00:32:47,120
confident

00:32:43,760 --> 00:32:50,320
having the access token again valid

00:32:47,120 --> 00:32:51,919
by asking for renewal the authorization

00:32:50,320 --> 00:32:53,840
server

00:32:51,919 --> 00:32:55,600
also it can be redeemed at the

00:32:53,840 --> 00:32:57,919
authorization server

00:32:55,600 --> 00:32:59,760
but should be never sent to the resource

00:32:57,919 --> 00:33:02,159
server

00:32:59,760 --> 00:33:03,039
so this token is different by the access

00:33:02,159 --> 00:33:07,039
token never use

00:33:03,039 --> 00:33:08,960
refresh token to access resources and

00:33:07,039 --> 00:33:11,679
it should be stored in the shouldn't be

00:33:08,960 --> 00:33:14,399
stored on a client

00:33:11,679 --> 00:33:14,799
which doesn't have secure storage there

00:33:14,399 --> 00:33:17,519
is

00:33:14,799 --> 00:33:19,200
a wide variety of applications nowadays

00:33:17,519 --> 00:33:22,880
some running on a desktop

00:33:19,200 --> 00:33:25,679
some running as command line interfaces

00:33:22,880 --> 00:33:26,080
and some running in a browser on mobile

00:33:25,679 --> 00:33:28,640
not

00:33:26,080 --> 00:33:30,320
all kinds of applications are capable of

00:33:28,640 --> 00:33:33,360
storing securely

00:33:30,320 --> 00:33:36,480
this tokens so

00:33:33,360 --> 00:33:38,399
the most recommended technique is to

00:33:36,480 --> 00:33:39,360
store them only when you have a server

00:33:38,399 --> 00:33:42,559
site

00:33:39,360 --> 00:33:44,880
actually some uh implementations

00:33:42,559 --> 00:33:45,760
uh the implementations of the security

00:33:44,880 --> 00:33:48,159
flows

00:33:45,760 --> 00:33:49,760
does not allow to issue such a token to

00:33:48,159 --> 00:33:52,240
parties to clients which are

00:33:49,760 --> 00:33:54,640
not secure like for example desktop

00:33:52,240 --> 00:33:56,799
applications

00:33:54,640 --> 00:33:58,399
problem quick time check yeah just uh

00:33:56,799 --> 00:34:00,559
yep few minutes later

00:33:58,399 --> 00:34:02,880
yeah all right so these are the uh

00:34:00,559 --> 00:34:05,840
tokens uh sorry the best practices

00:34:02,880 --> 00:34:06,480
uh they really general read them talk

00:34:05,840 --> 00:34:08,159
about them

00:34:06,480 --> 00:34:09,599
write us a question we'll be happy to

00:34:08,159 --> 00:34:11,919
answer and extend it

00:34:09,599 --> 00:34:14,560
but for the sake of time we'll move

00:34:11,919 --> 00:34:14,560
further please

00:34:15,520 --> 00:34:18,800
here i want to talk about the

00:34:16,960 --> 00:34:21,280
self-identity token

00:34:18,800 --> 00:34:23,200
about mfa client access and session life

00:34:21,280 --> 00:34:24,159
cycle this is the last part of my

00:34:23,200 --> 00:34:26,720
presentation

00:34:24,159 --> 00:34:27,520
i hope i will be covering them very

00:34:26,720 --> 00:34:30,879
shortly

00:34:27,520 --> 00:34:32,399
and briefly please ask questions then

00:34:30,879 --> 00:34:34,079
we'll be happy to discuss because this

00:34:32,399 --> 00:34:36,399
is very interesting material

00:34:34,079 --> 00:34:37,919
uh sometimes it gets more technical than

00:34:36,399 --> 00:34:38,879
it's easy to explain in short

00:34:37,919 --> 00:34:40,240
presentation

00:34:38,879 --> 00:34:42,560
nevertheless i'll start with the

00:34:40,240 --> 00:34:43,119
sentence that you statement that you see

00:34:42,560 --> 00:34:45,119
here

00:34:43,119 --> 00:34:46,839
i want to say that although here we talk

00:34:45,119 --> 00:34:50,000
about future

00:34:46,839 --> 00:34:52,639
improvements we don't mean

00:34:50,000 --> 00:34:54,320
less secure zoe is as secure as the

00:34:52,639 --> 00:34:56,000
mainframe is

00:34:54,320 --> 00:34:59,200
using all the capabilities of the

00:34:56,000 --> 00:35:02,320
mainframe available

00:34:59,200 --> 00:35:02,800
in that sense but there is a way there

00:35:02,320 --> 00:35:06,240
are ways

00:35:02,800 --> 00:35:09,119
how to enhance further the security

00:35:06,240 --> 00:35:09,839
standard and user experience uh without

00:35:09,119 --> 00:35:13,359
trading

00:35:09,839 --> 00:35:16,480
the current security compare level

00:35:13,359 --> 00:35:19,280
next please

00:35:16,480 --> 00:35:20,560
so the self-identity token what it is is

00:35:19,280 --> 00:35:24,000
the jwt

00:35:20,560 --> 00:35:26,480
it contains claims about the user uh

00:35:24,000 --> 00:35:28,240
it's an identity token actually it can

00:35:26,480 --> 00:35:30,960
be signed or even unsigned

00:35:28,240 --> 00:35:31,359
but this has some limitations of usage

00:35:30,960 --> 00:35:33,359
uh

00:35:31,359 --> 00:35:35,119
and interestingly it expires when the

00:35:33,359 --> 00:35:37,680
user password expires so

00:35:35,119 --> 00:35:40,240
uh this is kind of more secure and the

00:35:37,680 --> 00:35:42,079
kind of complication in the user comfort

00:35:40,240 --> 00:35:43,599
uh what it can be used actually for it

00:35:42,079 --> 00:35:47,040
can be used to

00:35:43,599 --> 00:35:49,440
link multiple authentication api calls

00:35:47,040 --> 00:35:50,320
that means that if several services have

00:35:49,440 --> 00:35:54,560
to call

00:35:50,320 --> 00:35:56,560
one the next one then then they need to

00:35:54,560 --> 00:35:58,400
be on the same page with the security so

00:35:56,560 --> 00:36:00,240
this token can be used to link the

00:35:58,400 --> 00:36:00,720
multiple calls to multiple services and

00:36:00,240 --> 00:36:02,480
still

00:36:00,720 --> 00:36:04,240
knowing that who was the originator of

00:36:02,480 --> 00:36:06,400
the initial call

00:36:04,240 --> 00:36:08,640
then it can be used to replay proof of

00:36:06,400 --> 00:36:10,000
authentication this is the basic token

00:36:08,640 --> 00:36:12,320
usage you exchange

00:36:10,000 --> 00:36:13,520
username and password maybe other

00:36:12,320 --> 00:36:16,000
credentials

00:36:13,520 --> 00:36:18,560
for a token and then use it regularly

00:36:16,000 --> 00:36:20,560
instead of the username and password

00:36:18,560 --> 00:36:21,839
it can implement security complex

00:36:20,560 --> 00:36:24,480
security flows

00:36:21,839 --> 00:36:26,320
uh it has the notion of a transaction

00:36:24,480 --> 00:36:29,599
which means that the

00:36:26,320 --> 00:36:30,720
detached calls from client to the server

00:36:29,599 --> 00:36:33,440
to the resource server

00:36:30,720 --> 00:36:34,160
can be interconnected thanks to this

00:36:33,440 --> 00:36:37,440
transaction

00:36:34,160 --> 00:36:40,800
identification uh for example user

00:36:37,440 --> 00:36:42,160
password renewal is such a complex flow

00:36:40,800 --> 00:36:44,720
when you need to do

00:36:42,160 --> 00:36:46,640
several calls the first one is rejected

00:36:44,720 --> 00:36:47,680
when the password is expired then you

00:36:46,640 --> 00:36:50,240
initiate the

00:36:47,680 --> 00:36:52,079
password change and you then get access

00:36:50,240 --> 00:36:55,359
back

00:36:52,079 --> 00:36:58,000
it also can be used to bind user access

00:36:55,359 --> 00:36:59,440
to specific application because uh these

00:36:58,000 --> 00:37:03,599
tokens are issued

00:36:59,440 --> 00:37:05,760
uh as uh a or identified by the

00:37:03,599 --> 00:37:09,599
application the user and the issuer

00:37:05,760 --> 00:37:11,599
of the token uh the benefits

00:37:09,599 --> 00:37:13,040
we have already mentioned that the

00:37:11,599 --> 00:37:15,520
biggest benefit is that you have a

00:37:13,040 --> 00:37:19,359
single token for all your needs

00:37:15,520 --> 00:37:22,480
uh what it means is that you can have

00:37:19,359 --> 00:37:23,200
for example full size zettos sso not

00:37:22,480 --> 00:37:26,320
only ap

00:37:23,200 --> 00:37:26,880
mlsso because even services which are

00:37:26,320 --> 00:37:30,800
not

00:37:26,880 --> 00:37:32,880
deployed visible or discoverable on apml

00:37:30,800 --> 00:37:34,640
can redeem the token itself and get

00:37:32,880 --> 00:37:36,880
access to the resources needed

00:37:34,640 --> 00:37:38,320
so they don't need to be on board on

00:37:36,880 --> 00:37:42,480
apml

00:37:38,320 --> 00:37:44,640
uh it also uh says that the past tickets

00:37:42,480 --> 00:37:45,760
are not necessary i don't say the past

00:37:44,640 --> 00:37:48,240
tickets should be

00:37:45,760 --> 00:37:49,599
discharged at all but imagine that you

00:37:48,240 --> 00:37:51,680
need to

00:37:49,599 --> 00:37:53,520
make some composition of data and you

00:37:51,680 --> 00:37:55,440
need to call 10 services then

00:37:53,520 --> 00:37:57,359
you probably will need to generate 10

00:37:55,440 --> 00:38:00,960
past tickets it's

00:37:57,359 --> 00:38:04,800
consuming resources and

00:38:00,960 --> 00:38:07,359
time and it's not handy

00:38:04,800 --> 00:38:08,800
so there is also no need to switch the

00:38:07,359 --> 00:38:10,960
user context when

00:38:08,800 --> 00:38:12,960
a service is does not work with past

00:38:10,960 --> 00:38:13,839
tickets you can use directly the self

00:38:12,960 --> 00:38:16,640
token

00:38:13,839 --> 00:38:16,640
next please

00:38:17,200 --> 00:38:20,400
now we come to the mfa very interesting

00:38:19,119 --> 00:38:22,720
topic but

00:38:20,400 --> 00:38:24,880
it's quite a large thing i tried to

00:38:22,720 --> 00:38:27,599
compile the most important part of it

00:38:24,880 --> 00:38:28,320
it is that uh the client application can

00:38:27,599 --> 00:38:30,400
delegate

00:38:28,320 --> 00:38:32,960
the collection and evaluation of

00:38:30,400 --> 00:38:37,040
authentication factors more than one

00:38:32,960 --> 00:38:40,079
presumably to an external system

00:38:37,040 --> 00:38:42,720
so we can work with ibm mfa which is

00:38:40,079 --> 00:38:44,400
a system that provides user interface

00:38:42,720 --> 00:38:44,800
where the factors are collected in the

00:38:44,400 --> 00:38:47,200
end

00:38:44,800 --> 00:38:47,839
it generates a special token which is

00:38:47,200 --> 00:38:50,720
called

00:38:47,839 --> 00:38:51,839
a cache token and this token is

00:38:50,720 --> 00:38:54,000
understood by saf

00:38:51,839 --> 00:38:56,240
so when this token is concatenated to a

00:38:54,000 --> 00:38:56,960
password client application is actually

00:38:56,240 --> 00:39:00,000
sending

00:38:56,960 --> 00:39:03,200
two factors not only one to

00:39:00,000 --> 00:39:07,200
suff and this is raising the security

00:39:03,200 --> 00:39:09,520
level up while this is

00:39:07,200 --> 00:39:10,880
completely true that multifactor is the

00:39:09,520 --> 00:39:12,880
best way how to

00:39:10,880 --> 00:39:15,440
uh raise the confidence that the user is

00:39:12,880 --> 00:39:19,040
the one who they claim to be

00:39:15,440 --> 00:39:22,960
it is not very handy

00:39:19,040 --> 00:39:25,200
in implementing for the clients and

00:39:22,960 --> 00:39:27,520
i'll be glad to point out in the next

00:39:25,200 --> 00:39:31,200
flight at least a couple of

00:39:27,520 --> 00:39:31,200
limitations please next slide

00:39:32,560 --> 00:39:35,680
so the one of the problems or not

00:39:34,640 --> 00:39:38,720
problem with

00:39:35,680 --> 00:39:39,359
challenges is that mfa is configured by

00:39:38,720 --> 00:39:42,400
user

00:39:39,359 --> 00:39:44,880
and so when the user is

00:39:42,400 --> 00:39:46,240
configured to use mfa this is for all

00:39:44,880 --> 00:39:48,960
the applications

00:39:46,240 --> 00:39:50,480
as far as i know that means that then

00:39:48,960 --> 00:39:51,680
all the applications that the user wants

00:39:50,480 --> 00:39:54,079
to use will ask

00:39:51,680 --> 00:39:56,640
or have to ask for mfa otherwise stuff

00:39:54,079 --> 00:39:59,760
will reject access

00:39:56,640 --> 00:40:00,640
there is also the external authorization

00:39:59,760 --> 00:40:03,359
server but

00:40:00,640 --> 00:40:05,280
it actually actually acts as a

00:40:03,359 --> 00:40:06,640
authentication server only it doesn't

00:40:05,280 --> 00:40:08,480
check

00:40:06,640 --> 00:40:10,480
any authorization rights it will just

00:40:08,480 --> 00:40:12,800
verify who the user is and we will show

00:40:10,480 --> 00:40:14,960
a token

00:40:12,800 --> 00:40:16,800
and there is no direct control on the

00:40:14,960 --> 00:40:19,599
number of choice of factors

00:40:16,800 --> 00:40:21,920
applied it's left to the configuration

00:40:19,599 --> 00:40:24,319
of the external server so self doesn't

00:40:21,920 --> 00:40:26,079
manage how many factors would be asked

00:40:24,319 --> 00:40:27,520
for this application or for another

00:40:26,079 --> 00:40:29,280
application some applications

00:40:27,520 --> 00:40:32,000
may require even higher level of

00:40:29,280 --> 00:40:34,079
security so more than two factors

00:40:32,000 --> 00:40:35,280
and finally from some point of view the

00:40:34,079 --> 00:40:37,599
multi-factors here

00:40:35,280 --> 00:40:39,119
only two because when self doesn't know

00:40:37,599 --> 00:40:41,359
how many factors were used

00:40:39,119 --> 00:40:44,720
and is receiving a single token then

00:40:41,359 --> 00:40:44,720
these are three two factors

00:40:45,200 --> 00:40:49,359
ah then maybe last or one before the

00:40:48,319 --> 00:40:51,280
last is

00:40:49,359 --> 00:40:52,960
the client success limitations very

00:40:51,280 --> 00:40:55,040
important thing that we always are

00:40:52,960 --> 00:40:58,400
talking about the user access rights

00:40:55,040 --> 00:41:00,640
but actually if we imagine that in the

00:40:58,400 --> 00:41:02,720
world of enterprise systems there could

00:41:00,640 --> 00:41:03,920
be many applications which are touching

00:41:02,720 --> 00:41:06,400
the same resources

00:41:03,920 --> 00:41:07,200
it is important to be able to limit some

00:41:06,400 --> 00:41:08,880
applications

00:41:07,200 --> 00:41:11,040
the applications to use only the

00:41:08,880 --> 00:41:14,640
resources that they are allowed to

00:41:11,040 --> 00:41:17,680
and this is done by a system of

00:41:14,640 --> 00:41:19,280
claims in the tokens which are called

00:41:17,680 --> 00:41:23,200
scopes

00:41:19,280 --> 00:41:25,440
so we don't have it at the moment so

00:41:23,200 --> 00:41:29,760
this is the proposed

00:41:25,440 --> 00:41:32,880
extension to the zoe or apml

00:41:29,760 --> 00:41:34,160
capabilities in that sense a token which

00:41:32,880 --> 00:41:37,920
is issued to a single

00:41:34,160 --> 00:41:39,599
to one application can not be misused by

00:41:37,920 --> 00:41:43,359
another application if it does not

00:41:39,599 --> 00:41:48,240
has the appropriate access rights

00:41:43,359 --> 00:41:51,680
and if we move to the next slide

00:41:48,240 --> 00:41:53,920
here is a very short uh

00:41:51,680 --> 00:41:55,599
vision on enhancement of the

00:41:53,920 --> 00:41:59,040
session-like cycle

00:41:55,599 --> 00:42:02,319
we already touched the point that if

00:41:59,040 --> 00:42:03,680
you start working with some data and in

00:42:02,319 --> 00:42:06,640
the middle of the work your

00:42:03,680 --> 00:42:07,359
session expires and it is not renewed to

00:42:06,640 --> 00:42:09,680
the state

00:42:07,359 --> 00:42:10,720
where you were before it expired so it

00:42:09,680 --> 00:42:14,400
may was

00:42:10,720 --> 00:42:17,200
lose your work and data so

00:42:14,400 --> 00:42:18,160
managing the lifecycle lifecycle is

00:42:17,200 --> 00:42:21,440
important

00:42:18,160 --> 00:42:22,720
for the user comfort and tokens allow

00:42:21,440 --> 00:42:26,800
this

00:42:22,720 --> 00:42:29,280
by implementing refresh capability

00:42:26,800 --> 00:42:32,319
which is part of the specifications of

00:42:29,280 --> 00:42:34,880
the modern protocols

00:42:32,319 --> 00:42:36,079
oh yeah basically i wanted to say what

00:42:34,880 --> 00:42:37,599
are the benefits but they're very

00:42:36,079 --> 00:42:39,599
straightforward so you can read it

00:42:37,599 --> 00:42:41,920
so i give back the word to we have for

00:42:39,599 --> 00:42:43,920
final takeaways

00:42:41,920 --> 00:42:45,040
thank you this will be very quick so i

00:42:43,920 --> 00:42:47,040
i'd like to thank

00:42:45,040 --> 00:42:48,640
you know the audience for listening to

00:42:47,040 --> 00:42:51,119
our content uh

00:42:48,640 --> 00:42:53,200
we hopefully audience got an

00:42:51,119 --> 00:42:55,760
understanding of jazz in zoe

00:42:53,200 --> 00:42:57,200
you you heard about the standard tokens

00:42:55,760 --> 00:42:59,280
and their mechanics that are

00:42:57,200 --> 00:43:01,680
used perhaps outside of the mainframe

00:42:59,280 --> 00:43:04,640
world not employed in zoe yet

00:43:01,680 --> 00:43:06,480
and you heard about possible

00:43:04,640 --> 00:43:08,960
enhancements to security

00:43:06,480 --> 00:43:10,319
we will we will be happy to discuss

00:43:08,960 --> 00:43:12,560
these a little bit more in

00:43:10,319 --> 00:43:14,880
the community channels thank you going

00:43:12,560 --> 00:43:17,200
back to rails

00:43:14,880 --> 00:43:18,800
thanks mikhail thanks pavlin sorry to

00:43:17,200 --> 00:43:21,599
rush you guys

00:43:18,800 --> 00:43:23,839
we've got some glossary slides there as

00:43:21,599 --> 00:43:23,839
well

00:43:24,160 --> 00:43:30,400
and we will head on over

00:43:28,000 --> 00:43:32,000
so in addition to guiding new to zoe

00:43:30,400 --> 00:43:34,400
people to the appropriate community

00:43:32,000 --> 00:43:36,640
forum the onboarding squad assist with

00:43:34,400 --> 00:43:38,000
welcoming new vendors though extenders

00:43:36,640 --> 00:43:40,640
and zoe incubator

00:43:38,000 --> 00:43:42,640
project teams we manage the zoe

00:43:40,640 --> 00:43:44,720
conformance program we help to provide

00:43:42,640 --> 00:43:47,040
speakers for events large and small we

00:43:44,720 --> 00:43:47,599
manage so we blog content we manage zoe

00:43:47,040 --> 00:43:50,400
surveys

00:43:47,599 --> 00:43:51,359
and manage collecting and posting zoe

00:43:50,400 --> 00:43:53,760
metrics

00:43:51,359 --> 00:43:54,880
this used to be a tedious process until

00:43:53,760 --> 00:43:57,920
one of our members

00:43:54,880 --> 00:43:58,720
changed all of that ah the power of

00:43:57,920 --> 00:44:01,839
automation

00:43:58,720 --> 00:44:05,599
over to you andrew let's talk about

00:44:01,839 --> 00:44:08,000
zoe onboarding and zoe metrics

00:44:05,599 --> 00:44:09,200
thank you rose yes hi everyone um so i'm

00:44:08,000 --> 00:44:12,000
here to talk about the new

00:44:09,200 --> 00:44:14,000
method of collecting and presenting

00:44:12,000 --> 00:44:15,359
metrics that we've got within zoe um

00:44:14,000 --> 00:44:16,640
as rose said at the start if there are

00:44:15,359 --> 00:44:18,160
any questions throughout pop them in the

00:44:16,640 --> 00:44:20,720
chat and i will come back to them

00:44:18,160 --> 00:44:22,160
at the end unconscious of time so i will

00:44:20,720 --> 00:44:24,079
get started so

00:44:22,160 --> 00:44:25,680
before the project started uh the

00:44:24,079 --> 00:44:28,400
metrics reporting process

00:44:25,680 --> 00:44:29,920
was uh it was a selection of slides put

00:44:28,400 --> 00:44:31,920
together at the start of every month

00:44:29,920 --> 00:44:33,599
with download values community members

00:44:31,920 --> 00:44:34,880
and lots of things to show the previous

00:44:33,599 --> 00:44:37,520
month's progress

00:44:34,880 --> 00:44:39,359
and as you can see on the screen now and

00:44:37,520 --> 00:44:41,920
while these values are useful to see

00:44:39,359 --> 00:44:43,680
and show elements of progression um it

00:44:41,920 --> 00:44:44,319
was very time consuming for a member of

00:44:43,680 --> 00:44:46,160
the team

00:44:44,319 --> 00:44:47,920
and it doesn't show the data as

00:44:46,160 --> 00:44:50,880
comprehensively as possible

00:44:47,920 --> 00:44:52,640
so we were tasked with automating this

00:44:50,880 --> 00:44:55,280
as much as possible whether that be

00:44:52,640 --> 00:44:56,079
just the collection or the presentation

00:44:55,280 --> 00:44:59,440
or both

00:44:56,079 --> 00:45:02,720
and so that was our task next slide

00:44:59,440 --> 00:45:05,040
please so

00:45:02,720 --> 00:45:06,560
initially we investigated automating the

00:45:05,040 --> 00:45:09,920
collection of the metrics

00:45:06,560 --> 00:45:11,680
the main issue we ran into was the data

00:45:09,920 --> 00:45:13,760
comes from a variety of sources

00:45:11,680 --> 00:45:15,359
um a few examples are on screen now

00:45:13,760 --> 00:45:16,560
there's the vs code marketplace for the

00:45:15,359 --> 00:45:18,640
zoe explorer

00:45:16,560 --> 00:45:20,880
and the npm registry which is one of the

00:45:18,640 --> 00:45:23,280
places that zoe cli comes from

00:45:20,880 --> 00:45:24,880
google analytics slack github but the

00:45:23,280 --> 00:45:27,920
list goes on

00:45:24,880 --> 00:45:28,960
um when collecting them manually you can

00:45:27,920 --> 00:45:31,040
just visit the site

00:45:28,960 --> 00:45:32,880
and copy the numbers however

00:45:31,040 --> 00:45:34,000
autonomously with code it's not quite

00:45:32,880 --> 00:45:35,760
that simple

00:45:34,000 --> 00:45:37,599
so some of the sites have apis behind

00:45:35,760 --> 00:45:39,440
them like google analytics for example

00:45:37,599 --> 00:45:42,240
you just hit a url and it gives you the

00:45:39,440 --> 00:45:45,599
data back with authentication obviously

00:45:42,240 --> 00:45:46,000
and on the other side of that some sites

00:45:45,599 --> 00:45:48,160
don't have

00:45:46,000 --> 00:45:49,359
apis or any clear way at all about

00:45:48,160 --> 00:45:50,960
getting numbers so

00:45:49,359 --> 00:45:53,119
as you can see the vs code marketplace

00:45:50,960 --> 00:45:55,839
is one of these

00:45:53,119 --> 00:45:56,319
the display at the top is the download

00:45:55,839 --> 00:45:59,520
value

00:45:56,319 --> 00:46:00,960
um of that item that component

00:45:59,520 --> 00:46:02,640
but there's no obvious explanation as to

00:46:00,960 --> 00:46:04,319
where it comes from so this is where

00:46:02,640 --> 00:46:06,880
some more complicated techniques came in

00:46:04,319 --> 00:46:09,200
like web scraping as an example

00:46:06,880 --> 00:46:11,359
and web scraping is it's a method of

00:46:09,200 --> 00:46:12,560
extracting data from the html page by

00:46:11,359 --> 00:46:14,319
getting the source code

00:46:12,560 --> 00:46:16,079
and extracting the required information

00:46:14,319 --> 00:46:18,160
which is exactly how we got this and a

00:46:16,079 --> 00:46:20,720
lot of the other values for the metrics

00:46:18,160 --> 00:46:21,839
so the code at the bottom is the html

00:46:20,720 --> 00:46:25,280
code making up

00:46:21,839 --> 00:46:27,440
the zoe explorer marketplace page

00:46:25,280 --> 00:46:28,880
so at this point we had the methods for

00:46:27,440 --> 00:46:30,319
retrieving the data from the various

00:46:28,880 --> 00:46:30,960
sources we just needed to bring it all

00:46:30,319 --> 00:46:33,359
together

00:46:30,960 --> 00:46:34,560
and offer it in a simple way which is

00:46:33,359 --> 00:46:37,599
where

00:46:34,560 --> 00:46:39,440
creating our own api came in so this is

00:46:37,599 --> 00:46:41,119
a good choice because of its simplicity

00:46:39,440 --> 00:46:43,359
and it gives the opportunity to expand

00:46:41,119 --> 00:46:45,680
upon it which i'll touch on again later

00:46:43,359 --> 00:46:47,760
and so we wrote an express api with

00:46:45,680 --> 00:46:49,760
node.js that offers endpoints

00:46:47,760 --> 00:46:50,960
to retrieve this data for anyone

00:46:49,760 --> 00:46:52,640
interested in the tech

00:46:50,960 --> 00:46:54,800
behind this process we're hoping the

00:46:52,640 --> 00:46:57,040
code will become open source for people

00:46:54,800 --> 00:46:58,240
to take inspiration from if not use

00:46:57,040 --> 00:47:00,000
and we'll get some documentation

00:46:58,240 --> 00:47:00,400
published as well to go alongside it and

00:47:00,000 --> 00:47:02,400
so

00:47:00,400 --> 00:47:03,680
watch this space we have been approached

00:47:02,400 --> 00:47:04,800
by other teams already that want to

00:47:03,680 --> 00:47:07,839
implement something similar

00:47:04,800 --> 00:47:10,960
so it'd be good to get this out there um

00:47:07,839 --> 00:47:14,240
yeah so the next obstacle

00:47:10,960 --> 00:47:15,440
uh we wanted to show uh past metrics as

00:47:14,240 --> 00:47:18,000
well as live data

00:47:15,440 --> 00:47:19,200
so for this we decided to use a mongodb

00:47:18,000 --> 00:47:22,000
database

00:47:19,200 --> 00:47:23,119
uh it's simple to use quick setup and it

00:47:22,000 --> 00:47:25,760
talks nicely to

00:47:23,119 --> 00:47:28,079
node.js apis so what that does it stores

00:47:25,760 --> 00:47:30,079
all the data we've collected in the past

00:47:28,079 --> 00:47:32,000
with the date so we can track the past

00:47:30,079 --> 00:47:34,240
data as well as live data so that's

00:47:32,000 --> 00:47:38,319
coming really useful

00:47:34,240 --> 00:47:40,319
and finally we wanted an updated

00:47:38,319 --> 00:47:42,000
method to view the metrics so in theory

00:47:40,319 --> 00:47:43,680
the api could be used

00:47:42,000 --> 00:47:45,520
to create the report manually it would

00:47:43,680 --> 00:47:47,119
act as a middleman and cut out the

00:47:45,520 --> 00:47:48,160
actual data collection

00:47:47,119 --> 00:47:50,480
so now we're talking about the

00:47:48,160 --> 00:47:51,599
presentation of the metrics rather than

00:47:50,480 --> 00:47:54,079
the collection

00:47:51,599 --> 00:47:55,839
we decided a website um would be the

00:47:54,079 --> 00:47:57,440
best solution to present this data in a

00:47:55,839 --> 00:47:59,040
simple manner to users

00:47:57,440 --> 00:48:01,280
whether that's you know squad members

00:47:59,040 --> 00:48:03,680
management current consumers or

00:48:01,280 --> 00:48:05,119
future consumers and it allows the

00:48:03,680 --> 00:48:07,200
flexibility as well about how the data

00:48:05,119 --> 00:48:10,559
is presented

00:48:07,200 --> 00:48:13,920
um so like the api it was written in

00:48:10,559 --> 00:48:15,599
node.js and it renders html and it also

00:48:13,920 --> 00:48:16,480
gives the flexibility of using npm

00:48:15,599 --> 00:48:18,079
packages

00:48:16,480 --> 00:48:20,720
so we don't have to reinvent the wheel

00:48:18,079 --> 00:48:23,760
for certain tasks

00:48:20,720 --> 00:48:25,680
um so

00:48:23,760 --> 00:48:27,839
yep it's made up of three main elements

00:48:25,680 --> 00:48:30,240
the web page the api and the database

00:48:27,839 --> 00:48:32,480
each of them runs in a docker container

00:48:30,240 --> 00:48:33,119
and i can hopefully start sharing my

00:48:32,480 --> 00:48:35,839
screen

00:48:33,119 --> 00:48:35,839
and show it now

00:48:36,400 --> 00:48:38,720


00:48:41,200 --> 00:48:48,240
there we go

00:48:44,720 --> 00:48:51,440
can you see my screen i can excellent

00:48:48,240 --> 00:48:53,760
so this is what the page looks like

00:48:51,440 --> 00:48:54,960
so first we get to the dashboard it's

00:48:53,760 --> 00:48:56,960
the home screen

00:48:54,960 --> 00:48:58,800
it shows the download values for some of

00:48:56,960 --> 00:49:00,480
the different zoe components so we have

00:48:58,800 --> 00:49:03,040
the cli the explorer

00:49:00,480 --> 00:49:04,400
and the server side downloads for those

00:49:03,040 --> 00:49:06,640
that are confused the server side

00:49:04,400 --> 00:49:08,720
downloads are the smpe

00:49:06,640 --> 00:49:09,839
builds and the ptfs and the convenience

00:49:08,720 --> 00:49:12,240
build

00:49:09,839 --> 00:49:13,119
um so it also shows the community

00:49:12,240 --> 00:49:14,400
members

00:49:13,119 --> 00:49:15,920
contributors and the number of

00:49:14,400 --> 00:49:17,680
conformant products these are just some

00:49:15,920 --> 00:49:19,680
key statistics we picked on

00:49:17,680 --> 00:49:20,960
to have on the home screen they

00:49:19,680 --> 00:49:22,960
publicize very well

00:49:20,960 --> 00:49:24,400
um and at the end of this page we have a

00:49:22,960 --> 00:49:26,160
monthly community report

00:49:24,400 --> 00:49:28,000
section which i will come back to in

00:49:26,160 --> 00:49:30,000
just a second

00:49:28,000 --> 00:49:33,520
um but first going through the pages at

00:49:30,000 --> 00:49:33,520
the top first we have a downloads page

00:49:34,000 --> 00:49:38,480
um so this itself is split up into three

00:49:36,720 --> 00:49:41,440
sections we have the explorer the cli

00:49:38,480 --> 00:49:42,079
and the server builds each tab is set up

00:49:41,440 --> 00:49:43,839
the same way

00:49:42,079 --> 00:49:45,760
it shows a trendline of the total

00:49:43,839 --> 00:49:47,200
downloads over the past few months it's

00:49:45,760 --> 00:49:51,040
a cumulative graph

00:49:47,200 --> 00:49:53,440
so it shows downloads over time

00:49:51,040 --> 00:49:55,040
and scrolling down we also have a chart

00:49:53,440 --> 00:49:57,440
of the downloads per month

00:49:55,040 --> 00:49:59,119
one statistic we always show is the zoe

00:49:57,440 --> 00:49:59,920
explorer downloads in september last

00:49:59,119 --> 00:50:01,680
year

00:49:59,920 --> 00:50:03,680
this coincides with the master the

00:50:01,680 --> 00:50:05,359
mainframe course and it just shows

00:50:03,680 --> 00:50:06,960
how much that single event boosted the

00:50:05,359 --> 00:50:08,400
popularity

00:50:06,960 --> 00:50:10,400
in that month especially and the months

00:50:08,400 --> 00:50:13,119
following and which is really nice to

00:50:10,400 --> 00:50:15,599
see visually on a graph

00:50:13,119 --> 00:50:17,359
and just quickly the other tabs are set

00:50:15,599 --> 00:50:19,440
up in exactly the same way

00:50:17,359 --> 00:50:21,200
apart from the cli and the server tabs

00:50:19,440 --> 00:50:22,720
we're able to see downloads by version

00:50:21,200 --> 00:50:23,920
number because of the way they're stored

00:50:22,720 --> 00:50:26,319
so these are downloaded from

00:50:23,920 --> 00:50:27,359
zoe.org and because of that we can see

00:50:26,319 --> 00:50:28,640
which version

00:50:27,359 --> 00:50:30,960
of the component they've downloaded

00:50:28,640 --> 00:50:35,359
which is always nice to see as well as

00:50:30,960 --> 00:50:35,359
the downloads over time and per month

00:50:36,079 --> 00:50:44,480
so moving on to the community tab

00:50:40,319 --> 00:50:46,880
so here we can see slack and github data

00:50:44,480 --> 00:50:49,119
and channels participants messages

00:50:46,880 --> 00:50:52,480
replies from slack

00:50:49,119 --> 00:50:54,000
also on graphs to see and it's the same

00:50:52,480 --> 00:50:56,640
with github

00:50:54,000 --> 00:50:58,400
pr's issues repos and submitters it's

00:50:56,640 --> 00:51:00,640
good to see that change over time as

00:50:58,400 --> 00:51:00,640
well

00:51:00,720 --> 00:51:05,680
and finally the analytics section

00:51:03,760 --> 00:51:07,359
so this page shows information about

00:51:05,680 --> 00:51:09,599
zoe.org site itself

00:51:07,359 --> 00:51:10,559
so we can see just page views total

00:51:09,599 --> 00:51:12,400
users and

00:51:10,559 --> 00:51:14,000
out of those users how many of them were

00:51:12,400 --> 00:51:16,079
considered new so visiting the site for

00:51:14,000 --> 00:51:17,839
the first time

00:51:16,079 --> 00:51:19,040
and it also shows users by geography

00:51:17,839 --> 00:51:20,079
which is really cool so you can see

00:51:19,040 --> 00:51:20,960
whereabouts in the world they're

00:51:20,079 --> 00:51:24,720
visiting from

00:51:20,960 --> 00:51:24,720
on a table and on a chart

00:51:25,119 --> 00:51:29,040
cool so i did mention earlier i was

00:51:28,319 --> 00:51:32,800
going to come back

00:51:29,040 --> 00:51:35,680
to the dashboard

00:51:32,800 --> 00:51:37,680
i hope i'm not going too long um so we

00:51:35,680 --> 00:51:39,119
decided to continue producing

00:51:37,680 --> 00:51:41,280
the monthly reports as well as having

00:51:39,119 --> 00:51:42,800
this web page but autonomously

00:51:41,280 --> 00:51:44,720
so a program is run on the first of

00:51:42,800 --> 00:51:47,440
every month using cron jobs

00:51:44,720 --> 00:51:48,480
to produce a pdf report um which appears

00:51:47,440 --> 00:51:49,839
in this list here

00:51:48,480 --> 00:51:51,520
it's been running since january so there

00:51:49,839 --> 00:51:53,119
are currently three reports to show but

00:51:51,520 --> 00:51:54,720
on the first of may there will be the

00:51:53,119 --> 00:51:56,400
fourth

00:51:54,720 --> 00:51:58,880
so if we pick february for example and

00:51:56,400 --> 00:52:00,400
show report they show the exact same

00:51:58,880 --> 00:52:03,760
information as the web page but it

00:52:00,400 --> 00:52:06,160
captures a specific moment in time

00:52:03,760 --> 00:52:08,240
as you can see so it will just pick the

00:52:06,160 --> 00:52:09,839
first page for example zoe explorer

00:52:08,240 --> 00:52:11,280
it shows the cumulative downloads to

00:52:09,839 --> 00:52:12,240
date so this would have been at the end

00:52:11,280 --> 00:52:14,400
of february

00:52:12,240 --> 00:52:16,480
it shows the cumulative downloads over

00:52:14,400 --> 00:52:18,000
time in a table and a graph and the

00:52:16,480 --> 00:52:21,040
downloads per month

00:52:18,000 --> 00:52:23,440
and exactly the same with the cli

00:52:21,040 --> 00:52:25,040
it does replicate the web page shows the

00:52:23,440 --> 00:52:27,280
same data but it's nice to have it in a

00:52:25,040 --> 00:52:29,599
different format

00:52:27,280 --> 00:52:32,079
to use and if we scroll right to the

00:52:29,599 --> 00:52:35,040
bottom you can also see the

00:52:32,079 --> 00:52:37,280
github metrics and select metrics there

00:52:35,040 --> 00:52:37,280
as well

00:52:37,520 --> 00:52:41,760
now the final piece of the puzzle is

00:52:39,839 --> 00:52:44,319
another use for the metrics api

00:52:41,760 --> 00:52:45,520
it's not just this web page so as you

00:52:44,319 --> 00:52:48,480
will hear more about

00:52:45,520 --> 00:52:49,200
after me i hope zoey.org has had a big

00:52:48,480 --> 00:52:52,400
revamp

00:52:49,200 --> 00:52:53,520
recently and this is the new site one of

00:52:52,400 --> 00:52:56,640
the changes

00:52:53,520 --> 00:52:58,559
uh we've made was an edition of a zoe by

00:52:56,640 --> 00:53:00,400
the numbers section

00:52:58,559 --> 00:53:01,680
oh also nice to point out that this

00:53:00,400 --> 00:53:03,920
webinar we're on right now

00:53:01,680 --> 00:53:04,720
appears in the events section on zoe.org

00:53:03,920 --> 00:53:06,319
which is nice

00:53:04,720 --> 00:53:08,559
but if we scroll down we have a zoe by

00:53:06,319 --> 00:53:10,400
the numbers section this hits our new

00:53:08,559 --> 00:53:12,319
metrics api and retrieves

00:53:10,400 --> 00:53:14,079
certain numbers uh the same numbers on

00:53:12,319 --> 00:53:16,160
the dashboard of the website

00:53:14,079 --> 00:53:17,359
and displays them here it just shows the

00:53:16,160 --> 00:53:19,760
flexibility

00:53:17,359 --> 00:53:21,760
that the metrics api offers i hope we

00:53:19,760 --> 00:53:22,880
can keep adding to it and using it in

00:53:21,760 --> 00:53:26,319
cool ways like this

00:53:22,880 --> 00:53:27,599
into the future but yeah i think that is

00:53:26,319 --> 00:53:28,000
everything i have to show thank you

00:53:27,599 --> 00:53:29,760
everyone

00:53:28,000 --> 00:53:31,280
if there are any questions as i said put

00:53:29,760 --> 00:53:33,440
them in the chat and i will come back to

00:53:31,280 --> 00:53:35,359
them in a second

00:53:33,440 --> 00:53:37,200
i think that's everything right thank

00:53:35,359 --> 00:53:43,839
you

00:53:37,200 --> 00:53:48,480
i'm going to go back

00:53:43,839 --> 00:53:50,559
and advance beyond our backup slides

00:53:48,480 --> 00:53:52,000
that way they're just in case the demo

00:53:50,559 --> 00:53:55,119
gods

00:53:52,000 --> 00:53:59,359
hit which they didn't seem to

00:53:55,119 --> 00:54:01,839
we are blessed okay final few slides

00:53:59,359 --> 00:54:03,680
um so this by no means is a

00:54:01,839 --> 00:54:05,680
comprehensive list of what's been

00:54:03,680 --> 00:54:07,359
introduced over the past three months

00:54:05,680 --> 00:54:09,599
but we wanted to make you aware of a few

00:54:07,359 --> 00:54:13,520
of the highlights here as

00:54:09,599 --> 00:54:15,760
andrew mentioned the zoe.org

00:54:13,520 --> 00:54:19,040
website has been restructured based on a

00:54:15,760 --> 00:54:21,440
tremendous amount of feedback

00:54:19,040 --> 00:54:23,280
next thanks to many of you for taking

00:54:21,440 --> 00:54:25,440
our semi-annual survey if you're

00:54:23,280 --> 00:54:27,599
interested in reviewing the results

00:54:25,440 --> 00:54:29,440
you'll find a link at zoe.org in the

00:54:27,599 --> 00:54:32,319
announcement section that andrew showed

00:54:29,440 --> 00:54:34,640
right at the top there's a link there

00:54:32,319 --> 00:54:36,559
the zoe technical steering committee was

00:54:34,640 --> 00:54:38,640
formed and meets every week you'll learn

00:54:36,559 --> 00:54:40,000
more about the squad its purpose and

00:54:38,640 --> 00:54:43,359
intent at our pi

00:54:40,000 --> 00:54:46,880
planning opening coming up soon

00:54:43,359 --> 00:54:50,000
and there is a notice particularly

00:54:46,880 --> 00:54:52,480
to all zoe extenders

00:54:50,000 --> 00:54:54,880
those of you who are conforming have

00:54:52,480 --> 00:54:57,839
conformant cli plugins app framework

00:54:54,880 --> 00:54:59,040
extensions or apis and soon zoe explorer

00:54:57,839 --> 00:55:02,319
extensions

00:54:59,040 --> 00:55:04,559
please be on the lookout for the new v2

00:55:02,319 --> 00:55:06,319
lps conformance criteria for each of

00:55:04,559 --> 00:55:08,720
these components we'll be posting

00:55:06,319 --> 00:55:11,040
details over the next quarter

00:55:08,720 --> 00:55:13,040
and then finally the cli squad has

00:55:11,040 --> 00:55:15,599
introduced several new features that are

00:55:13,040 --> 00:55:17,119
available for validation only meaning

00:55:15,599 --> 00:55:20,319
not planned for this

00:55:17,119 --> 00:55:24,160
v1 lts release at this point and we

00:55:20,319 --> 00:55:28,240
are looking for feedback

00:55:24,160 --> 00:55:30,319
if you're interested the

00:55:28,240 --> 00:55:31,920
link to the website where you can get

00:55:30,319 --> 00:55:35,599
the information the features

00:55:31,920 --> 00:55:36,319
is listed here github.com backslash zoe

00:55:35,599 --> 00:55:41,920
backslash

00:55:36,319 --> 00:55:44,799
zoe dash cli pond sign early dash access

00:55:41,920 --> 00:55:45,680
features rolls right off the tongue

00:55:44,799 --> 00:55:49,440
we're going to run

00:55:45,680 --> 00:55:53,280
a three question poll on this

00:55:49,440 --> 00:55:57,040
in just one moment one minute andrew

00:55:53,280 --> 00:55:57,040
i'll give you the okay to run that poll

00:55:57,359 --> 00:56:01,200
as we mentioned the redesigned zoe

00:55:59,359 --> 00:56:02,000
website thank you thank you to the

00:56:01,200 --> 00:56:04,240
collaboration

00:56:02,000 --> 00:56:06,160
of both zoe onboarding and zoe dock

00:56:04,240 --> 00:56:09,359
squads we introduced

00:56:06,160 --> 00:56:11,920
uh this site on april 13th it has

00:56:09,359 --> 00:56:14,079
content rich pages

00:56:11,920 --> 00:56:15,839
if you're visiting don't be shy about

00:56:14,079 --> 00:56:17,520
paging down as andrew showed there's

00:56:15,839 --> 00:56:18,400
lots of information right on that

00:56:17,520 --> 00:56:21,440
landing page

00:56:18,400 --> 00:56:22,240
we have updated content videos new

00:56:21,440 --> 00:56:24,160
navigation

00:56:22,240 --> 00:56:25,680
options based on your intent whether

00:56:24,160 --> 00:56:27,920
you're learning using extending

00:56:25,680 --> 00:56:30,400
contributing etc

00:56:27,920 --> 00:56:32,640
and andrew just demoed in real time the

00:56:30,400 --> 00:56:33,119
access to those metrics so please go

00:56:32,640 --> 00:56:36,319
ahead

00:56:33,119 --> 00:56:36,319
and check that out

00:56:36,799 --> 00:56:42,319
and for our poll andrew if you could go

00:56:40,640 --> 00:56:44,880
ahead and launch that i will read

00:56:42,319 --> 00:56:47,599
through their three simple questions

00:56:44,880 --> 00:56:49,760
the first one what best describes your

00:56:47,599 --> 00:56:52,799
use of zoe

00:56:49,760 --> 00:56:55,520
do you contribute and use do you extend

00:56:52,799 --> 00:56:56,240
and use meaning you write cli plugins or

00:56:55,520 --> 00:56:58,400
other

00:56:56,240 --> 00:57:01,920
extensions such as that framework or

00:56:58,400 --> 00:57:05,440
apis for the mediation layer

00:57:01,920 --> 00:57:07,359
do you use zoe meaning you're actually

00:57:05,440 --> 00:57:09,680
implementing it at your company and

00:57:07,359 --> 00:57:13,040
you're experimenting with it

00:57:09,680 --> 00:57:14,720
perhaps you plan to use it

00:57:13,040 --> 00:57:17,040
or you don't use it all so that's

00:57:14,720 --> 00:57:20,079
question one

00:57:17,040 --> 00:57:22,000
question two with respect to the early

00:57:20,079 --> 00:57:24,319
access features that i just mentioned

00:57:22,000 --> 00:57:27,920
the cli squad has introduced

00:57:24,319 --> 00:57:31,760
these are available for validation only

00:57:27,920 --> 00:57:33,760
the first one is using global profile

00:57:31,760 --> 00:57:37,760
configuration this is a simple

00:57:33,760 --> 00:57:41,040
simplified profile management feature

00:57:37,760 --> 00:57:44,160
the second is using demon mode

00:57:41,040 --> 00:57:45,119
with zoe x this is a performance

00:57:44,160 --> 00:57:49,359
improvement

00:57:45,119 --> 00:57:52,559
for the zoe cli and then third

00:57:49,359 --> 00:57:53,040
we have built in the secure credential

00:57:52,559 --> 00:57:56,480
store

00:57:53,040 --> 00:57:56,480
which is currently a plug-in

00:57:57,280 --> 00:58:01,440
what we want to know on this question is

00:58:00,319 --> 00:58:04,319
what is your plan

00:58:01,440 --> 00:58:04,880
for these client-based features will you

00:58:04,319 --> 00:58:08,240
a

00:58:04,880 --> 00:58:10,960
wait for ga meaning wait until they go

00:58:08,240 --> 00:58:11,839
live with the v2 lts release before you

00:58:10,960 --> 00:58:14,799
even look at them

00:58:11,839 --> 00:58:16,240
or investigate them will you be start

00:58:14,799 --> 00:58:20,400
investigating them

00:58:16,240 --> 00:58:22,720
now will you see

00:58:20,400 --> 00:58:24,000
learn about them and consider installing

00:58:22,720 --> 00:58:29,599
them or install them

00:58:24,000 --> 00:58:29,599
right away or d not sure

00:58:30,160 --> 00:58:35,920
and then third question what um for if

00:58:33,280 --> 00:58:39,040
you are a zoe user please

00:58:35,920 --> 00:58:43,839
indicate what best describes your use of

00:58:39,040 --> 00:58:43,839
zoe cli and the zoe explorer

00:58:48,000 --> 00:58:52,000
so if you could complete that i will

00:58:51,359 --> 00:58:56,720
wrap us

00:58:52,000 --> 00:58:58,880
up really quickly here

00:58:56,720 --> 00:58:58,880
see

00:59:02,400 --> 00:59:05,920
okay just want to make you aware of our

00:59:04,400 --> 00:59:07,680
upcoming quarterly pi

00:59:05,920 --> 00:59:09,520
planning meetings if you're interested

00:59:07,680 --> 00:59:10,799
in learning what was delivered over the

00:59:09,520 --> 00:59:12,559
past quarter

00:59:10,799 --> 00:59:14,559
you're interested in learning about the

00:59:12,559 --> 00:59:16,720
new tsc

00:59:14,559 --> 00:59:19,040
uh want to listen and understand what's

00:59:16,720 --> 00:59:20,720
planned for the upcoming quarter

00:59:19,040 --> 00:59:22,319
we recommend you attend these two

00:59:20,720 --> 00:59:24,400
sessions there are many more meetings

00:59:22,319 --> 00:59:26,079
going on throughout the pi planning

00:59:24,400 --> 00:59:27,920
event which is scheduled to start next

00:59:26,079 --> 00:59:30,160
wednesday but we recommend that you

00:59:27,920 --> 00:59:35,839
absolutely consider

00:59:30,160 --> 00:59:35,839
these two sessions i will see if i can

00:59:36,480 --> 00:59:43,440
copy a link into the chat

00:59:40,319 --> 00:59:47,839
before we close um

00:59:43,440 --> 00:59:47,839
and then

00:59:48,480 --> 00:59:51,520
if you're interested in attending any of

00:59:50,480 --> 00:59:54,319
the upcoming

00:59:51,520 --> 00:59:54,880
release demos so we put out releases and

00:59:54,319 --> 00:59:57,359
then we

00:59:54,880 --> 01:00:00,160
offer a demo of what's in that release

00:59:57,359 --> 01:00:03,520
we have dates planned for those as well

01:00:00,160 --> 01:00:06,079
for 1.21 22 and 23.

01:00:03,520 --> 01:00:07,760
again look in the zoe calendar link for

01:00:06,079 --> 01:00:10,640
these sessions

01:00:07,760 --> 01:00:11,920
interested in that for upcoming

01:00:10,640 --> 01:00:13,920
educational sessions

01:00:11,920 --> 01:00:15,839
look for zoe squad lead mike bauer and

01:00:13,920 --> 01:00:18,720
zoe contributor and architect dan

01:00:15,839 --> 01:00:20,400
kolowski at cdcon on june 23rd you'll

01:00:18,720 --> 01:00:22,480
learn about zoe in the context of

01:00:20,400 --> 01:00:24,319
mainframe development

01:00:22,480 --> 01:00:26,160
and if you missed share last month

01:00:24,319 --> 01:00:26,720
please go back and check out the zoe

01:00:26,160 --> 01:00:28,960
sessions

01:00:26,720 --> 01:00:32,319
available for replay it should be very

01:00:28,960 --> 01:00:34,720
easy to find the zoe sessions there

01:00:32,319 --> 01:00:39,200
there's always re fresh and relevant

01:00:34,720 --> 01:00:39,200
content zoeblogs at medium.com

01:00:39,520 --> 01:00:43,040
at the zoe area or the modern mainframe

01:00:42,559 --> 01:00:46,799
area

01:00:43,040 --> 01:00:48,720
at medium.com ashley's blog on the new

01:00:46,799 --> 01:00:51,920
revamp website is there please

01:00:48,720 --> 01:00:53,760
go ahead and check that out and finally

01:00:51,920 --> 01:00:55,040
you're always welcome to join any and

01:00:53,760 --> 01:00:58,319
all of our meetings

01:00:55,040 --> 01:01:01,839
most weekly meetings um

01:00:58,319 --> 01:01:02,559
are open available and just about anyone

01:01:01,839 --> 01:01:06,480
can join

01:01:02,559 --> 01:01:06,480
our slack channels at the

01:01:07,319 --> 01:01:12,720
openmainframeproject.slack.com

01:01:09,040 --> 01:01:13,359
and with that thank you for attending

01:01:12,720 --> 01:01:15,760
today

01:01:13,359 --> 01:01:17,040
we will be back here in july on july

01:01:15,760 --> 01:01:19,599
21st

01:01:17,040 --> 01:01:20,720
same time please go ahead and mark your

01:01:19,599 --> 01:01:24,160
calendars

01:01:20,720 --> 01:01:26,480
and we'll get that link set up and sent

01:01:24,160 --> 01:01:29,680
out and posted on the zoe calendar

01:01:26,480 --> 01:01:31,760
as soon as possible so we hope

01:01:29,680 --> 01:01:34,000
that you found this information

01:01:31,760 --> 01:01:34,799
informative thanks so much for joining

01:01:34,000 --> 01:01:39,839
us

01:01:34,799 --> 01:01:39,839

YouTube URL: https://www.youtube.com/watch?v=9rQCcZGVDzQ


