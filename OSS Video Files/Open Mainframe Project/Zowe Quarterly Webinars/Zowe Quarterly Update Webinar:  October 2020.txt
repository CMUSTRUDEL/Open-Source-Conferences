Title: Zowe Quarterly Update Webinar:  October 2020
Publication date: 2021-04-21
Playlist: Zowe Quarterly Webinars
Description: 
	Whether you are a Zowe User, Contributor, Extender, or simply interested in what's happening with Zowe - please join us for the launch of the Zowe Quarterly Update Webinar.  This is the first in the series of webinars we plan to host each quarter.  The webinar will include:

- A focus topic/speaker
- A brief Zowe update
  - Upcoming Community Events Overview
   - Interactive Polls


Join us on this webinar to learn how we are extending the Zowe ZSS (z/OS back-end) to facilitate building in-depth (cross-memory, privileged, system-level) mainframe products with little-to-no assembler code required.
Captions: 
	00:00:02,560 --> 00:00:06,879
hello everybody and welcome to

00:00:04,560 --> 00:00:07,919
the open mainframe projects uh monthly

00:00:06,879 --> 00:00:10,960
webinar this

00:00:07,919 --> 00:00:12,400
um today we have the october 2020 joey

00:00:10,960 --> 00:00:14,320
quarterly update

00:00:12,400 --> 00:00:16,400
uh we will be recording this so if you

00:00:14,320 --> 00:00:19,359
miss any part of it you can

00:00:16,400 --> 00:00:21,039
see it on the recording if you have any

00:00:19,359 --> 00:00:23,119
questions during the um

00:00:21,039 --> 00:00:24,880
session please feel free to use the q a

00:00:23,119 --> 00:00:25,840
box we'll try and answer them as we go

00:00:24,880 --> 00:00:27,840
along

00:00:25,840 --> 00:00:29,519
and finally we'll be asking a bunch of

00:00:27,840 --> 00:00:32,239
polling questions so

00:00:29,519 --> 00:00:33,600
um we will have limited times we

00:00:32,239 --> 00:00:35,120
probably won't get to the answers and

00:00:33,600 --> 00:00:36,719
we'll be following up tomorrow with

00:00:35,120 --> 00:00:38,160
answers from our polling questions and

00:00:36,719 --> 00:00:39,920
with that i'm going to hand it over to

00:00:38,160 --> 00:00:42,399
rose welcome rose

00:00:39,920 --> 00:00:43,680
hey thanks chris can you hear me okay i

00:00:42,399 --> 00:00:45,680
can hear you perfect

00:00:43,680 --> 00:00:48,160
okay super thank you so good day

00:00:45,680 --> 00:00:50,960
everyone and welcome to the inaugural

00:00:48,160 --> 00:00:51,920
zoe quarterly webinar uh we plan to host

00:00:50,960 --> 00:00:54,640
these webinars

00:00:51,920 --> 00:00:56,640
once per calendar quarter and this one

00:00:54,640 --> 00:00:59,840
will obviously serve as our q4

00:00:56,640 --> 00:01:02,160
2020 webinar i'm rosa catch zoe

00:00:59,840 --> 00:01:05,600
onboarding squad lead and i will be

00:01:02,160 --> 00:01:08,159
kicking us off and wrapping it up

00:01:05,600 --> 00:01:08,720
so we've got a full agenda we've got

00:01:08,159 --> 00:01:11,680
just

00:01:08,720 --> 00:01:12,960
under 60 minutes and here's our plan

00:01:11,680 --> 00:01:14,880
we'll review the intent

00:01:12,960 --> 00:01:16,560
of these quarterly meetings we'll

00:01:14,880 --> 00:01:18,960
provide a brief update

00:01:16,560 --> 00:01:20,479
on what's happening with zoe then we'll

00:01:18,960 --> 00:01:23,840
dig into this quarter's

00:01:20,479 --> 00:01:25,920
focus topic which happens to be css

00:01:23,840 --> 00:01:27,680
we'll follow that up with a deeper dive

00:01:25,920 --> 00:01:29,280
on a specific zoe squad

00:01:27,680 --> 00:01:31,280
and this month we'll be featuring the

00:01:29,280 --> 00:01:33,280
zoe cli squad

00:01:31,280 --> 00:01:35,200
before we end we'll list out some

00:01:33,280 --> 00:01:36,640
important events with dates and share

00:01:35,200 --> 00:01:38,320
links with you

00:01:36,640 --> 00:01:40,079
where you can continue to stay in touch

00:01:38,320 --> 00:01:42,320
with the zoe community

00:01:40,079 --> 00:01:43,119
time permitting will will open it up for

00:01:42,320 --> 00:01:46,000
q a but

00:01:43,119 --> 00:01:46,880
please as we go do type in any questions

00:01:46,000 --> 00:01:49,600
you may have

00:01:46,880 --> 00:01:50,399
in the q a area and we will work to

00:01:49,600 --> 00:01:53,040
address them

00:01:50,399 --> 00:01:54,799
and respond to them as we go and finally

00:01:53,040 --> 00:01:56,320
as chris said we have a few poll

00:01:54,799 --> 00:01:58,479
questions and we'll present them

00:01:56,320 --> 00:02:00,479
after the focus topics and the focus

00:01:58,479 --> 00:02:02,159
squad portion of the webinar

00:02:00,479 --> 00:02:03,920
and we'll as she mentioned we'll be

00:02:02,159 --> 00:02:04,719
sending out those results with the

00:02:03,920 --> 00:02:08,239
webinar

00:02:04,719 --> 00:02:10,800
recording so on to the series

00:02:08,239 --> 00:02:12,800
overview so our intent for this webinar

00:02:10,800 --> 00:02:15,040
series is to ensure that the zoe

00:02:12,800 --> 00:02:17,200
community offers a forum for open

00:02:15,040 --> 00:02:19,840
exchange of information

00:02:17,200 --> 00:02:21,520
ideas and affords both the members of

00:02:19,840 --> 00:02:22,400
the community and those beyond the

00:02:21,520 --> 00:02:24,560
community

00:02:22,400 --> 00:02:25,440
insights into what's happening with this

00:02:24,560 --> 00:02:27,840
project

00:02:25,440 --> 00:02:29,840
our plan is to host these webinars four

00:02:27,840 --> 00:02:30,800
times per year once per quarter as i

00:02:29,840 --> 00:02:32,160
mentioned

00:02:30,800 --> 00:02:34,640
what we'll do is we'll feature a

00:02:32,160 --> 00:02:35,440
technical topic and at least one zoe

00:02:34,640 --> 00:02:37,440
squad

00:02:35,440 --> 00:02:38,720
we'll also use the forum to help bring

00:02:37,440 --> 00:02:41,840
awareness around

00:02:38,720 --> 00:02:42,480
upcoming and in some cases some prior

00:02:41,840 --> 00:02:44,239
events

00:02:42,480 --> 00:02:46,000
that have happened in this case bruce is

00:02:44,239 --> 00:02:47,840
going to talk about the pi planning that

00:02:46,000 --> 00:02:49,280
we just completed

00:02:47,840 --> 00:02:51,120
and then finally we're hoping to

00:02:49,280 --> 00:02:54,800
leverage it as a means to collect

00:02:51,120 --> 00:02:57,680
feedback from our wider audience

00:02:54,800 --> 00:02:59,280
and all and anyone who's interested in

00:02:57,680 --> 00:03:01,120
all things zoe

00:02:59,280 --> 00:03:04,000
so with that i'm going to turn it over

00:03:01,120 --> 00:03:06,640
to bruce to give the zoe update

00:03:04,000 --> 00:03:09,599
thanks rose first of all a shout out to

00:03:06,640 --> 00:03:11,519
rose for pulling this together

00:03:09,599 --> 00:03:12,640
we do think communication to the

00:03:11,519 --> 00:03:15,120
community

00:03:12,640 --> 00:03:16,720
two-way communication is critical for

00:03:15,120 --> 00:03:18,959
the success of this project

00:03:16,720 --> 00:03:20,319
and rose has been a great help with this

00:03:18,959 --> 00:03:22,800
so

00:03:20,319 --> 00:03:24,480
this is bruce armstrong i'm a member of

00:03:22,800 --> 00:03:25,360
what we call the zoe leadership

00:03:24,480 --> 00:03:27,680
committee

00:03:25,360 --> 00:03:29,840
it's a group of six of us that try to

00:03:27,680 --> 00:03:33,200
keep up with what the various

00:03:29,840 --> 00:03:36,000
squads are doing when we refer to squads

00:03:33,200 --> 00:03:37,760
these are the development teams that

00:03:36,000 --> 00:03:40,560
vary in number but let's say

00:03:37,760 --> 00:03:44,480
you know they're between 10 and 12 folks

00:03:40,560 --> 00:03:48,159
specializing in a given component of zoe

00:03:44,480 --> 00:03:51,200
as rose said um we do what we call

00:03:48,159 --> 00:03:54,080
uh program imper program

00:03:51,200 --> 00:03:56,400
increment planning once a quarter and

00:03:54,080 --> 00:03:59,439
this is when all the developers

00:03:56,400 --> 00:04:00,480
on the project get together um the

00:03:59,439 --> 00:04:03,519
different teams

00:04:00,480 --> 00:04:06,560
lay out what their agendas are

00:04:03,519 --> 00:04:09,599
for the upcoming quarter we work on

00:04:06,560 --> 00:04:13,040
uh cross-team communication and

00:04:09,599 --> 00:04:14,319
we get i'll say consensus on the things

00:04:13,040 --> 00:04:17,120
that we're working on

00:04:14,319 --> 00:04:18,320
uh is what makes sense for the community

00:04:17,120 --> 00:04:20,720
this

00:04:18,320 --> 00:04:21,840
process is open to anybody we want to

00:04:20,720 --> 00:04:25,520
stress that

00:04:21,840 --> 00:04:27,840
you know whether it's a a meeting a at a

00:04:25,520 --> 00:04:30,000
at the zoe leadership level an

00:04:27,840 --> 00:04:32,320
individual squad or these

00:04:30,000 --> 00:04:33,440
planning sessions that we do they're

00:04:32,320 --> 00:04:36,000
open for

00:04:33,440 --> 00:04:37,520
anyone and everyone to to comment and

00:04:36,000 --> 00:04:40,880
get involved

00:04:37,520 --> 00:04:44,320
rose if you go to the next slide

00:04:40,880 --> 00:04:46,080
um so real quick when we talk about

00:04:44,320 --> 00:04:48,320
these squads

00:04:46,080 --> 00:04:49,680
we're as i say we break it up on

00:04:48,320 --> 00:04:52,639
technology

00:04:49,680 --> 00:04:53,520
and in some cases i'll say by discipline

00:04:52,639 --> 00:04:56,000
right

00:04:53,520 --> 00:04:58,080
um the the first four there should be

00:04:56,000 --> 00:04:58,560
obvious if you're familiar with zoe and

00:04:58,080 --> 00:05:01,360
the

00:04:58,560 --> 00:05:03,440
technology that we build and ship the

00:05:01,360 --> 00:05:06,560
systems team is the team that

00:05:03,440 --> 00:05:07,520
uh we've give we've given that name it's

00:05:06,560 --> 00:05:10,720
terminology

00:05:07,520 --> 00:05:12,400
used in agile processing agile

00:05:10,720 --> 00:05:14,639
development processes

00:05:12,400 --> 00:05:17,120
for the team that does the build the

00:05:14,639 --> 00:05:20,160
test aspect

00:05:17,120 --> 00:05:23,440
we've also expanded that team to to be

00:05:20,160 --> 00:05:24,240
involved in packaging as well onboarding

00:05:23,440 --> 00:05:27,280
is just that

00:05:24,240 --> 00:05:29,280
rose is a part of that uh onboarding

00:05:27,280 --> 00:05:31,600
is just jargon that we use to help

00:05:29,280 --> 00:05:34,720
people learn about this technology

00:05:31,600 --> 00:05:36,960
whether you want to contribute to the

00:05:34,720 --> 00:05:38,320
to the community or consume this

00:05:36,960 --> 00:05:40,240
technology

00:05:38,320 --> 00:05:42,479
in your enterprise in your product

00:05:40,240 --> 00:05:44,639
whatever they're a bridge

00:05:42,479 --> 00:05:47,280
between the open community and those of

00:05:44,639 --> 00:05:49,600
you wanting to use the technology

00:05:47,280 --> 00:05:52,000
and then the documentation squad and

00:05:49,600 --> 00:05:54,160
it's not just limited to documentation

00:05:52,000 --> 00:05:55,680
this team also helps a lot on the

00:05:54,160 --> 00:05:58,800
website

00:05:55,680 --> 00:06:00,400
and and different aspects of describing

00:05:58,800 --> 00:06:02,319
the zoe content

00:06:00,400 --> 00:06:03,840
as i say the community gathers on a

00:06:02,319 --> 00:06:06,880
quarterly basis

00:06:03,840 --> 00:06:08,080
what i did is provide a link to a

00:06:06,880 --> 00:06:11,759
recording

00:06:08,080 --> 00:06:14,880
of i'll say one of the cross squad

00:06:11,759 --> 00:06:18,160
meetings so this is where you'll hear

00:06:14,880 --> 00:06:20,400
from uh the squads what their priorities

00:06:18,160 --> 00:06:22,479
are for the upcoming

00:06:20,400 --> 00:06:24,240
development rose if you go to the next

00:06:22,479 --> 00:06:27,360
slide

00:06:24,240 --> 00:06:29,520
for the sake of time i am not going

00:06:27,360 --> 00:06:31,440
to go through every one of these bullets

00:06:29,520 --> 00:06:34,160
we want to turn it over to joe devlin

00:06:31,440 --> 00:06:35,360
and mike bauer as soon as possible but

00:06:34,160 --> 00:06:38,479
i'll i'll just

00:06:35,360 --> 00:06:39,199
hit a couple highlights just for folks

00:06:38,479 --> 00:06:42,800
awareness

00:06:39,199 --> 00:06:44,560
things that i i think if you're

00:06:42,800 --> 00:06:46,000
interested in the community might be of

00:06:44,560 --> 00:06:48,639
interest to you

00:06:46,000 --> 00:06:49,919
the zoe explorer is is one of the more

00:06:48,639 --> 00:06:52,400
successful

00:06:49,919 --> 00:06:53,759
components as measured by downloads of

00:06:52,400 --> 00:06:55,520
this technology

00:06:53,759 --> 00:06:57,599
those of you that may not be familiar

00:06:55,520 --> 00:07:00,960
with this this is an extension

00:06:57,599 --> 00:07:04,319
to vs code that opens up vs code

00:07:00,960 --> 00:07:08,000
to to accessing and working with z os

00:07:04,319 --> 00:07:11,440
you know i'll just say resources

00:07:08,000 --> 00:07:13,599
in general so building a conformance

00:07:11,440 --> 00:07:15,199
criteria around that is something

00:07:13,599 --> 00:07:17,360
so that other people can write

00:07:15,199 --> 00:07:18,639
extensions on top of the zoe

00:07:17,360 --> 00:07:21,759
infrastructure

00:07:18,639 --> 00:07:26,880
so that's one that's important the

00:07:21,759 --> 00:07:26,880
the zoe uh cli we'll let

00:07:26,960 --> 00:07:31,440
mike talk about that the one he'll

00:07:28,800 --> 00:07:33,039
highlight is the profile management that

00:07:31,440 --> 00:07:36,560
they're working on

00:07:33,039 --> 00:07:36,560
rose if you go to the next slide

00:07:36,639 --> 00:07:39,919
the mediation layer right this is kind

00:07:39,280 --> 00:07:43,840
of the

00:07:39,919 --> 00:07:45,759
the traffic cop for rest api management

00:07:43,840 --> 00:07:50,080
as well as access to

00:07:45,759 --> 00:07:53,360
to zos resources

00:07:50,080 --> 00:07:55,280
through zoe so you can see there

00:07:53,360 --> 00:07:57,680
i want to point out that there is work

00:07:55,280 --> 00:07:59,199
going on on a high availability

00:07:57,680 --> 00:08:02,960
configuration

00:07:59,199 --> 00:08:06,160
uh for not just the uh

00:08:02,960 --> 00:08:08,400
mediation layer but also the

00:08:06,160 --> 00:08:10,800
uh zoe components that make use of the

00:08:08,400 --> 00:08:14,080
mediation layer

00:08:10,800 --> 00:08:16,240
also uh the zoe application framework or

00:08:14,080 --> 00:08:18,840
what we sometimes refer to as the

00:08:16,240 --> 00:08:20,720
the zoe desktop we're working on

00:08:18,840 --> 00:08:23,599
containerizing that

00:08:20,720 --> 00:08:25,759
to have docker images in the future that

00:08:23,599 --> 00:08:26,080
allow you more portability and where you

00:08:25,759 --> 00:08:29,280
may

00:08:26,080 --> 00:08:32,640
run this infrastructure and

00:08:29,280 --> 00:08:35,200
rose if you go to the next slide

00:08:32,640 --> 00:08:37,279
i mis mentioned the system team they're

00:08:35,200 --> 00:08:40,399
heavily involved in designing

00:08:37,279 --> 00:08:42,959
the high availability aspects of zoe

00:08:40,399 --> 00:08:43,919
and then the onboarding squad having to

00:08:42,959 --> 00:08:46,200
do with

00:08:43,919 --> 00:08:48,959
improving our conformance

00:08:46,200 --> 00:08:53,279
cross-conformance program process

00:08:48,959 --> 00:08:55,360
and just you know how do we recognize

00:08:53,279 --> 00:08:57,600
those vendors and products that make use

00:08:55,360 --> 00:09:01,360
of the new capabilities

00:08:57,600 --> 00:09:06,080
that we deliver in zoe and rose

00:09:01,360 --> 00:09:07,920
next slide documentation as i said

00:09:06,080 --> 00:09:11,040
we recognize that there are a lot of

00:09:07,920 --> 00:09:13,519
different consumers of zoe

00:09:11,040 --> 00:09:15,040
so figuring out a way to give you an

00:09:13,519 --> 00:09:16,320
entry point whether it's in the

00:09:15,040 --> 00:09:18,399
documentation

00:09:16,320 --> 00:09:19,680
or on the website so that you can find

00:09:18,399 --> 00:09:21,680
the information

00:09:19,680 --> 00:09:22,720
that you're interested in based upon

00:09:21,680 --> 00:09:25,839
whether you're

00:09:22,720 --> 00:09:29,360
a consumer a developer you know or

00:09:25,839 --> 00:09:33,200
or a a user of this technology

00:09:29,360 --> 00:09:36,600
is is key and then rose

00:09:33,200 --> 00:09:39,040
next slide just some quick

00:09:36,600 --> 00:09:40,720
advertisements here uh you might have

00:09:39,040 --> 00:09:43,760
skipped a slide

00:09:40,720 --> 00:09:47,760
um the open mainframe project

00:09:43,760 --> 00:09:50,880
recently ran a summit zoe

00:09:47,760 --> 00:09:54,000
had content in that summit and

00:09:50,880 --> 00:09:55,040
those uh sessions are available on

00:09:54,000 --> 00:09:57,839
youtube

00:09:55,040 --> 00:09:58,560
if you want uh drill down information on

00:09:57,839 --> 00:10:01,120
on

00:09:58,560 --> 00:10:02,839
some of the zoe components if you go to

00:10:01,120 --> 00:10:05,680
the next slide

00:10:02,839 --> 00:10:10,160
rows and then we also

00:10:05,680 --> 00:10:11,920
did a three-hour session for share

00:10:10,160 --> 00:10:14,480
also with a deeper dive in the

00:10:11,920 --> 00:10:17,360
technology and what we're working on

00:10:14,480 --> 00:10:18,560
we had great attendance we hope to to

00:10:17,360 --> 00:10:21,519
use share

00:10:18,560 --> 00:10:22,320
in the future along with these quarterly

00:10:21,519 --> 00:10:26,000
updates

00:10:22,320 --> 00:10:29,680
uh and work with the omp on topics

00:10:26,000 --> 00:10:31,760
so rose i think that's it for my section

00:10:29,680 --> 00:10:33,360
so what i'm going to turn it over to now

00:10:31,760 --> 00:10:37,040
is joe devlin

00:10:33,360 --> 00:10:38,320
he's an expert in what we refer to as

00:10:37,040 --> 00:10:40,880
zss

00:10:38,320 --> 00:10:42,000
one of the components of zoe and he's

00:10:40,880 --> 00:10:46,000
got some

00:10:42,000 --> 00:10:48,880
great ideas on how to to expand

00:10:46,000 --> 00:10:49,920
the capabilities today and for those of

00:10:48,880 --> 00:10:52,560
you that have a

00:10:49,920 --> 00:10:54,720
c development background and want to

00:10:52,560 --> 00:10:57,760
make use of zss

00:10:54,720 --> 00:11:00,800
uh joe's got some great ideas so

00:10:57,760 --> 00:11:04,000
uh take it away joe and um

00:11:00,800 --> 00:11:07,519
i'll keep an eye out on the q and a uh

00:11:04,000 --> 00:11:07,519
channel for questions as you go

00:11:08,160 --> 00:11:11,680
okay just bruce to confirm you can see

00:11:10,000 --> 00:11:14,880
my screen and hear my voice

00:11:11,680 --> 00:11:18,640
correct okay that's that's t

00:11:14,880 --> 00:11:19,200
um so um bruce said i had some great

00:11:18,640 --> 00:11:21,279
ideas

00:11:19,200 --> 00:11:24,079
um i think that in the spirit of open

00:11:21,279 --> 00:11:26,560
source which is where

00:11:24,079 --> 00:11:28,800
the omp is part of the lynx foundation

00:11:26,560 --> 00:11:29,760
we'll find out whether any of my ideas

00:11:28,800 --> 00:11:32,000
are great

00:11:29,760 --> 00:11:33,920
through adoption or not which has always

00:11:32,000 --> 00:11:35,360
sort of been that that gold standard in

00:11:33,920 --> 00:11:38,000
the open source so that

00:11:35,360 --> 00:11:39,279
if at the end of my short time here this

00:11:38,000 --> 00:11:43,120
has no influence

00:11:39,279 --> 00:11:45,120
or everyone thinks i'm dead wrong

00:11:43,120 --> 00:11:46,720
it wasn't a great idea but i hope that

00:11:45,120 --> 00:11:47,600
it is and i know that some of these

00:11:46,720 --> 00:11:51,360
ideas um

00:11:47,600 --> 00:11:54,800
have been used um in uh in zoe

00:11:51,360 --> 00:11:58,880
um at least for uh supporting the

00:11:54,800 --> 00:12:00,959
the back end of how the zoe ui works

00:11:58,880 --> 00:12:03,200
so i'm a little bit about me i've been

00:12:00,959 --> 00:12:05,920
programming um

00:12:03,200 --> 00:12:06,800
you know um like i say most of my life

00:12:05,920 --> 00:12:10,000
for

00:12:06,800 --> 00:12:12,480
40 years and and about half of it on

00:12:10,000 --> 00:12:15,519
mainframe at about half of it not

00:12:12,480 --> 00:12:18,639
and so i so would sort of have

00:12:15,519 --> 00:12:19,519
a a perspective of what does the

00:12:18,639 --> 00:12:21,680
mainframe

00:12:19,519 --> 00:12:22,720
feel like to a person who is not

00:12:21,680 --> 00:12:25,120
fundamentally

00:12:22,720 --> 00:12:28,160
a mainframer and in particular i

00:12:25,120 --> 00:12:31,279
sometimes say mainframe when i mean

00:12:28,160 --> 00:12:33,360
z-os the historical mvs the proprietary

00:12:31,279 --> 00:12:36,720
operating system of the mainframe

00:12:33,360 --> 00:12:38,720
um so just to get to my uh

00:12:36,720 --> 00:12:41,120
disclaimers here let me get on the

00:12:38,720 --> 00:12:41,120
screen

00:12:45,440 --> 00:12:50,079
i'm having trouble advancing my slides

00:12:47,760 --> 00:12:50,079
um

00:12:50,160 --> 00:12:55,839
oh that's better um yeah that uh

00:12:53,279 --> 00:12:56,800
we're um always talking about linux so

00:12:55,839 --> 00:12:59,360
when i

00:12:56,800 --> 00:13:00,800
never talking about linux on z only

00:12:59,360 --> 00:13:03,040
talking about zos

00:13:00,800 --> 00:13:05,200
sometimes i say mainframe as shorthand i

00:13:03,040 --> 00:13:08,240
don't want anyone to be confused

00:13:05,200 --> 00:13:09,920
again ibm linux on z

00:13:08,240 --> 00:13:11,920
is a wonderful linux and does all the

00:13:09,920 --> 00:13:14,639
great things that linuxes do

00:13:11,920 --> 00:13:15,680
and apologize if there's ever been any

00:13:14,639 --> 00:13:19,600
confusion

00:13:15,680 --> 00:13:22,079
in that area so um

00:13:19,600 --> 00:13:23,120
so z os will be a major enterprise

00:13:22,079 --> 00:13:25,440
platform

00:13:23,120 --> 00:13:26,320
for at least the next one or two decades

00:13:25,440 --> 00:13:28,959
i mean no one

00:13:26,320 --> 00:13:29,360
people can prognosticate but i know that

00:13:28,959 --> 00:13:31,760
the

00:13:29,360 --> 00:13:32,800
value of the applications and the size

00:13:31,760 --> 00:13:35,200
of the data

00:13:32,800 --> 00:13:36,000
is going up every year and it seems to

00:13:35,200 --> 00:13:39,040
me that

00:13:36,000 --> 00:13:41,040
the number of people um i was a cto of

00:13:39,040 --> 00:13:41,519
rocket software for a few years and i've

00:13:41,040 --> 00:13:44,240
been an

00:13:41,519 --> 00:13:45,120
executive you know in this area i know

00:13:44,240 --> 00:13:47,440
well that people

00:13:45,120 --> 00:13:48,639
are not leaving this platform maybe not

00:13:47,440 --> 00:13:50,880
that many people are

00:13:48,639 --> 00:13:52,560
getting new onto zos but you know the

00:13:50,880 --> 00:13:55,120
attrition rate is extremely

00:13:52,560 --> 00:13:56,480
low and the value of the business is

00:13:55,120 --> 00:14:00,240
extremely valuable

00:13:56,480 --> 00:14:02,480
so um you know yet

00:14:00,240 --> 00:14:04,240
very the business problem is that we're

00:14:02,480 --> 00:14:07,360
running out of programmers

00:14:04,240 --> 00:14:10,160
who can do the deeper stuff

00:14:07,360 --> 00:14:10,480
and and it's yes to some extent there

00:14:10,160 --> 00:14:12,880
are

00:14:10,480 --> 00:14:14,079
a lot of programs that already exist and

00:14:12,880 --> 00:14:17,519
we're building

00:14:14,079 --> 00:14:19,920
um apis to them but you know suppose

00:14:17,519 --> 00:14:21,279
you want to build a better mouse trap or

00:14:19,920 --> 00:14:23,680
you want to

00:14:21,279 --> 00:14:26,160
take advantage of new z hardware like

00:14:23,680 --> 00:14:28,959
they do a lot more with um

00:14:26,160 --> 00:14:31,199
security there's a new um you know

00:14:28,959 --> 00:14:34,880
opportunities for more parallelism

00:14:31,199 --> 00:14:35,600
and uh processing there's a you know cmd

00:14:34,880 --> 00:14:38,079
instructions

00:14:35,600 --> 00:14:39,839
there's probably you know in the future

00:14:38,079 --> 00:14:42,399
there's always rumors of

00:14:39,839 --> 00:14:42,880
better ai engines and other things and

00:14:42,399 --> 00:14:45,199
even

00:14:42,880 --> 00:14:47,120
taking advantage of 64-bit code there

00:14:45,199 --> 00:14:48,639
are a lot of mainframe applications that

00:14:47,120 --> 00:14:51,920
have stabilized data

00:14:48,639 --> 00:14:55,440
as 31-bit applications and it takes code

00:14:51,920 --> 00:14:57,120
you just don't recompile and get 64-bit

00:14:55,440 --> 00:14:58,079
on the mainframe you have to change the

00:14:57,120 --> 00:15:01,040
apis you

00:14:58,079 --> 00:15:02,320
use for getting memory and the like in

00:15:01,040 --> 00:15:05,600
many situations

00:15:02,320 --> 00:15:07,279
so um you know i have found

00:15:05,600 --> 00:15:09,279
in the process of bringing people onto

00:15:07,279 --> 00:15:12,320
the mainframe onto the os

00:15:09,279 --> 00:15:15,600
that you know it takes a long time

00:15:12,320 --> 00:15:17,600
to be good at this and to be

00:15:15,600 --> 00:15:18,800
you know five years to be good to be

00:15:17,600 --> 00:15:20,399
valuable to yourself

00:15:18,800 --> 00:15:21,920
before writing back in code i'm not

00:15:20,399 --> 00:15:24,320
saying for consuming a

00:15:21,920 --> 00:15:26,000
web service or a cli that's stuff you

00:15:24,320 --> 00:15:29,040
can do relatively quickly

00:15:26,000 --> 00:15:31,600
sometimes in weeks but you know to be

00:15:29,040 --> 00:15:33,519
a back-end developer and then to be a

00:15:31,600 --> 00:15:35,120
resource to be a leader for other

00:15:33,519 --> 00:15:38,240
backend developers

00:15:35,120 --> 00:15:41,600
it takes a real long time and

00:15:38,240 --> 00:15:44,800
you know just uh many people are

00:15:41,600 --> 00:15:46,320
leaving the the field as things go

00:15:44,800 --> 00:15:48,079
and then also sometimes you might want

00:15:46,320 --> 00:15:50,880
to rewrite things because

00:15:48,079 --> 00:15:52,800
um or improve things because there are

00:15:50,880 --> 00:15:55,360
you know there is a known problem

00:15:52,800 --> 00:15:56,959
that the interface of many things on the

00:15:55,360 --> 00:16:01,440
os is

00:15:56,959 --> 00:16:05,360
somewhat behind the times of other areas

00:16:01,440 --> 00:16:09,360
so um the particular focus that i have

00:16:05,360 --> 00:16:12,959
in the talk today is to build

00:16:09,360 --> 00:16:13,519
privileged applications not applications

00:16:12,959 --> 00:16:16,079
that

00:16:13,519 --> 00:16:18,240
deal with user data we're not talking

00:16:16,079 --> 00:16:19,680
about bank account or stock portfolio

00:16:18,240 --> 00:16:21,600
management or

00:16:19,680 --> 00:16:23,519
any of the other things that people

00:16:21,600 --> 00:16:24,240
typically do and that's the work that

00:16:23,519 --> 00:16:27,440
people do

00:16:24,240 --> 00:16:31,120
in cobol and you know primarily

00:16:27,440 --> 00:16:32,079
or nowadays in java in a web sphere or

00:16:31,120 --> 00:16:34,480
something that

00:16:32,079 --> 00:16:36,079
that's all very nice and very valuable

00:16:34,480 --> 00:16:39,040
but really talking about

00:16:36,079 --> 00:16:40,399
the side of your programming that either

00:16:39,040 --> 00:16:42,480
customizes the system

00:16:40,399 --> 00:16:44,160
or builds fundamental monitoring

00:16:42,480 --> 00:16:46,000
monitoring products you know the the

00:16:44,160 --> 00:16:48,000
main views you know mega mon

00:16:46,000 --> 00:16:50,560
cis views and all the other stuff that

00:16:48,000 --> 00:16:52,560
you know we're familiar with security

00:16:50,560 --> 00:16:56,079
tools profilers

00:16:52,560 --> 00:16:57,680
um you know uh when you want to go and

00:16:56,079 --> 00:16:59,519
extend the mainframe i worked on the

00:16:57,680 --> 00:17:00,560
cloud storage product back when i was at

00:16:59,519 --> 00:17:02,720
rocket you know there's

00:17:00,560 --> 00:17:04,480
a lot of stuff that requires you to face

00:17:02,720 --> 00:17:08,000
the os and

00:17:04,480 --> 00:17:10,880
um it is a you know

00:17:08,000 --> 00:17:11,919
a sub practice within um mainframe

00:17:10,880 --> 00:17:14,959
programming

00:17:11,919 --> 00:17:16,000
that is very very different from the

00:17:14,959 --> 00:17:18,640
experience it's like

00:17:16,000 --> 00:17:19,839
cobol programmers and back-end

00:17:18,640 --> 00:17:21,919
programmers you know have

00:17:19,839 --> 00:17:24,240
very very little overlap in what they

00:17:21,919 --> 00:17:27,600
know and what their experience of

00:17:24,240 --> 00:17:29,039
z os is so

00:17:27,600 --> 00:17:30,960
one of the things that happens when

00:17:29,039 --> 00:17:33,600
people come on i like to

00:17:30,960 --> 00:17:35,600
hire people who are you know good c

00:17:33,600 --> 00:17:37,520
programmers and an interest in languages

00:17:35,600 --> 00:17:40,600
and operating systems

00:17:37,520 --> 00:17:43,840
come on but um zos is still

00:17:40,600 --> 00:17:46,320
astonishingly different than um linux

00:17:43,840 --> 00:17:48,240
um i don't know if everyone knows the

00:17:46,320 --> 00:17:49,760
animal there but that is a platypus

00:17:48,240 --> 00:17:53,200
which seems to have

00:17:49,760 --> 00:17:56,240
um a variety of features of the entire

00:17:53,200 --> 00:17:58,080
evolutionary history of uh mammals and

00:17:56,240 --> 00:18:01,120
reptiles in it

00:17:58,080 --> 00:18:04,320
and you know it's

00:18:01,120 --> 00:18:06,640
the zos and the z hardware is full of

00:18:04,320 --> 00:18:07,520
the best ideas you know the virtual

00:18:06,640 --> 00:18:09,919
tasking

00:18:07,520 --> 00:18:11,520
virtual memory multitasking hypervising

00:18:09,919 --> 00:18:14,799
all this stuff

00:18:11,520 --> 00:18:16,400
um came from innovations that were on

00:18:14,799 --> 00:18:19,919
the mainframe

00:18:16,400 --> 00:18:22,799
and you know um even the notion of

00:18:19,919 --> 00:18:26,000
software architecture or apis came from

00:18:22,799 --> 00:18:29,280
os 360 the original os

00:18:26,000 --> 00:18:32,160
it's full of good ideas but because of

00:18:29,280 --> 00:18:34,880
the commitment to backward compatibility

00:18:32,160 --> 00:18:35,360
every good and bad idea that is on the

00:18:34,880 --> 00:18:38,160
os

00:18:35,360 --> 00:18:39,440
save a few that were expunged um is

00:18:38,160 --> 00:18:42,400
still there

00:18:39,440 --> 00:18:44,559
so as they move to from a 24 to 31 to

00:18:42,400 --> 00:18:48,400
64-bit os

00:18:44,559 --> 00:18:49,760
there's full apis at all stages of this

00:18:48,400 --> 00:18:52,799
evolution

00:18:49,760 --> 00:18:54,559
and you know you

00:18:52,799 --> 00:18:56,240
have to contend with it it's not

00:18:54,559 --> 00:18:57,360
transparent when um i think it was

00:18:56,240 --> 00:19:01,039
kernel 26

00:18:57,360 --> 00:19:03,600
in linux they moved to 64 bit recompiled

00:19:01,039 --> 00:19:04,480
everything so the transition from 32-bit

00:19:03,600 --> 00:19:07,760
to 64

00:19:04,480 --> 00:19:11,679
linux happened

00:19:07,760 --> 00:19:14,880
relatively overnight um that

00:19:11,679 --> 00:19:17,120
overnight for z os is still going on

00:19:14,880 --> 00:19:19,039
between the year 2000 and now where it's

00:19:17,120 --> 00:19:19,840
still somewhere in the middle of that

00:19:19,039 --> 00:19:22,000
journey

00:19:19,840 --> 00:19:24,240
until every pointer in every data

00:19:22,000 --> 00:19:27,280
structure allows eight bytes

00:19:24,240 --> 00:19:28,960
we're not done and there's if people who

00:19:27,280 --> 00:19:29,760
know the operating system on the call

00:19:28,960 --> 00:19:31,679
know that

00:19:29,760 --> 00:19:33,440
probably more of the pointers are four

00:19:31,679 --> 00:19:34,160
byte pointers than eight byte pointers

00:19:33,440 --> 00:19:37,520
at this point

00:19:34,160 --> 00:19:40,559
and it's um it's quite a journey so and

00:19:37,520 --> 00:19:44,000
you know the mainframe the os

00:19:40,559 --> 00:19:45,039
has a you know made various attempts to

00:19:44,000 --> 00:19:48,960
be

00:19:45,039 --> 00:19:51,600
unix-like but the uss system

00:19:48,960 --> 00:19:52,080
is confounding to people who come on to

00:19:51,600 --> 00:19:54,080
um

00:19:52,080 --> 00:19:55,440
cos you know they don't find the things

00:19:54,080 --> 00:19:56,799
that they expect

00:19:55,440 --> 00:19:58,880
again i hope there are some people out

00:19:56,799 --> 00:19:59,520
there who are more linux c programmers

00:19:58,880 --> 00:20:01,200
and

00:19:59,520 --> 00:20:02,960
you know can see from some of this

00:20:01,200 --> 00:20:04,400
perspective or have seen some of this

00:20:02,960 --> 00:20:06,240
perspective

00:20:04,400 --> 00:20:07,440
um so when you're writing privileged

00:20:06,240 --> 00:20:09,120
code

00:20:07,440 --> 00:20:11,039
you know that if you've written a drive

00:20:09,120 --> 00:20:13,039
or a kernel extension or even just

00:20:11,039 --> 00:20:14,080
looked around inside the linux kernel

00:20:13,039 --> 00:20:15,520
sources

00:20:14,080 --> 00:20:18,080
you know you're really building

00:20:15,520 --> 00:20:21,280
something that's an os extension

00:20:18,080 --> 00:20:22,559
and it has to be perfect you know you

00:20:21,280 --> 00:20:24,960
just can't leak info

00:20:22,559 --> 00:20:26,960
you can't allow privilege out you know

00:20:24,960 --> 00:20:28,320
escalation and all these things you have

00:20:26,960 --> 00:20:28,960
to clean up because you're just not

00:20:28,320 --> 00:20:31,200
going to

00:20:28,960 --> 00:20:34,400
shut down that process and get the

00:20:31,200 --> 00:20:35,440
process tear down to fix up everything

00:20:34,400 --> 00:20:37,120
you do

00:20:35,440 --> 00:20:39,200
you have to deal with multiple versions

00:20:37,120 --> 00:20:42,400
you know writing privileged code

00:20:39,200 --> 00:20:45,200
is um you know much more strenuous

00:20:42,400 --> 00:20:46,880
than writing a one-off you know user

00:20:45,200 --> 00:20:48,799
application or a single

00:20:46,880 --> 00:20:51,760
end-to-end batch job that just runs and

00:20:48,799 --> 00:20:51,760
shuts itself down

00:20:52,159 --> 00:20:57,760
so you know it is just really here i'll

00:20:55,919 --> 00:20:59,520
not go through all these points

00:20:57,760 --> 00:21:01,280
individually but

00:20:59,520 --> 00:21:04,000
this is part of the learning journey

00:21:01,280 --> 00:21:07,520
that people have to go through and

00:21:04,000 --> 00:21:10,559
the experience in z os is never really

00:21:07,520 --> 00:21:12,080
exactly the same you have to slowly

00:21:10,559 --> 00:21:14,240
acquire

00:21:12,080 --> 00:21:16,080
coming from your you know usually your

00:21:14,240 --> 00:21:18,480
university education nowadays

00:21:16,080 --> 00:21:19,440
and being familiar with all the terms in

00:21:18,480 --> 00:21:22,880
the left column

00:21:19,440 --> 00:21:26,080
and then you get to zos and you

00:21:22,880 --> 00:21:29,679
slowly learn um

00:21:26,080 --> 00:21:32,400
you know what these things are and

00:21:29,679 --> 00:21:34,240
one of the interesting um things i'll

00:21:32,400 --> 00:21:35,679
point out here is there are many things

00:21:34,240 --> 00:21:39,280
that don't even

00:21:35,679 --> 00:21:41,200
have an equivalent like the mainframe

00:21:39,280 --> 00:21:43,200
the mainframe hardware itself has a

00:21:41,200 --> 00:21:44,000
different storage protection system than

00:21:43,200 --> 00:21:46,080
x86

00:21:44,000 --> 00:21:47,120
they have something called keys rather

00:21:46,080 --> 00:21:50,080
than rings

00:21:47,120 --> 00:21:50,799
and you know modern x86 operating

00:21:50,080 --> 00:21:54,000
systems

00:21:50,799 --> 00:21:57,200
only use protected and user

00:21:54,000 --> 00:22:00,480
um you know rings uh

00:21:57,200 --> 00:22:04,159
z os programs and um do use

00:22:00,480 --> 00:22:06,640
all eight or even all 16 keys

00:22:04,159 --> 00:22:08,559
come and talk about the other keys and

00:22:06,640 --> 00:22:10,960
then there are other things like

00:22:08,559 --> 00:22:12,679
the fact that you can talk to multiple

00:22:10,960 --> 00:22:15,120
address spaces

00:22:12,679 --> 00:22:15,760
simultaneously that's the lowest one

00:22:15,120 --> 00:22:18,720
here

00:22:15,760 --> 00:22:19,520
in a single program that is just a

00:22:18,720 --> 00:22:22,799
really really

00:22:19,520 --> 00:22:24,159
foreign concept to people who come in

00:22:22,799 --> 00:22:27,200
from the world of

00:22:24,159 --> 00:22:30,080
unix or linux you are in a

00:22:27,200 --> 00:22:32,159
single address space your you know your

00:22:30,080 --> 00:22:35,200
addresses only get translated to

00:22:32,159 --> 00:22:37,679
physical addresses in one way at a time

00:22:35,200 --> 00:22:39,039
you know learning things like ar mode

00:22:37,679 --> 00:22:42,159
and alex and

00:22:39,039 --> 00:22:44,000
address based control modes um

00:22:42,159 --> 00:22:46,400
you know learning that your point you're

00:22:44,000 --> 00:22:49,840
the mode of your processor can be using

00:22:46,400 --> 00:22:53,200
24 31 or 64-bit mode

00:22:49,840 --> 00:22:55,280
uh you know that is a lot to get over

00:22:53,200 --> 00:22:58,480
that's what slows people down

00:22:55,280 --> 00:22:59,679
in that they get onto

00:22:58,480 --> 00:23:01,280
you know one of the things that close

00:22:59,679 --> 00:23:02,880
people down they get onto this platform

00:23:01,280 --> 00:23:03,760
and there's some really deep learning to

00:23:02,880 --> 00:23:06,880
do

00:23:03,760 --> 00:23:09,120
about those differences hey very briefly

00:23:06,880 --> 00:23:11,200
you're about halfway through your time

00:23:09,120 --> 00:23:14,000
oh i gotta go speed it up

00:23:11,200 --> 00:23:14,640
okay yeah so um yeah so when you get

00:23:14,000 --> 00:23:18,159
into

00:23:14,640 --> 00:23:21,039
um um linux

00:23:18,159 --> 00:23:22,320
kernel programming or privilege program

00:23:21,039 --> 00:23:25,760
there's a path to follow

00:23:22,320 --> 00:23:28,799
there's a lot of um

00:23:25,760 --> 00:23:31,840
examples to to base

00:23:28,799 --> 00:23:35,280
your um learning on

00:23:31,840 --> 00:23:38,080
and i'll skip through that but um

00:23:35,280 --> 00:23:39,520
the privileged programming on the

00:23:38,080 --> 00:23:43,440
mainframe or zos

00:23:39,520 --> 00:23:45,279
excuse me is um you know is

00:23:43,440 --> 00:23:46,720
a bit more challenging there's not a lot

00:23:45,279 --> 00:23:49,279
of um

00:23:46,720 --> 00:23:50,159
canon out there there's an omp project

00:23:49,279 --> 00:23:52,080
right now

00:23:50,159 --> 00:23:53,520
to bring in something called the cbt

00:23:52,080 --> 00:23:56,240
tape which has

00:23:53,520 --> 00:23:58,000
many examples of system level

00:23:56,240 --> 00:23:59,039
programming but usually an assembly

00:23:58,000 --> 00:24:02,080
language

00:23:59,039 --> 00:24:05,039
onto um you know into the to the fold of

00:24:02,080 --> 00:24:09,360
the omp i hope that goes well

00:24:05,039 --> 00:24:12,880
but in general there's

00:24:09,360 --> 00:24:15,840
you know not a one true path

00:24:12,880 --> 00:24:15,840
for building

00:24:16,000 --> 00:24:20,640
privileged programs and most of the

00:24:18,960 --> 00:24:23,279
traditional projects

00:24:20,640 --> 00:24:24,320
the product aside from batch code you

00:24:23,279 --> 00:24:26,080
know um

00:24:24,320 --> 00:24:29,039
anything that's a server that provides

00:24:26,080 --> 00:24:32,320
services to other programs

00:24:29,039 --> 00:24:35,520
is usually some very very

00:24:32,320 --> 00:24:39,200
non-standard thing that

00:24:35,520 --> 00:24:42,559
um you know is believed to be secure

00:24:39,200 --> 00:24:45,039
but there's a lot of patterns

00:24:42,559 --> 00:24:45,840
in mainframe code of writing code that

00:24:45,039 --> 00:24:51,039
uses key

00:24:45,840 --> 00:24:53,360
zero building the interface from user to

00:24:51,039 --> 00:24:56,080
kernel mode for what is called um

00:24:53,360 --> 00:25:00,000
supervisor calls and pc calls

00:24:56,080 --> 00:25:03,120
on zos there's a lot of

00:25:00,000 --> 00:25:05,360
gotchas to that and companies like uh

00:25:03,120 --> 00:25:06,640
rsm partners i think they're part of the

00:25:05,360 --> 00:25:09,840
bfc now um

00:25:06,640 --> 00:25:11,200
you know they uh yeah and there are

00:25:09,840 --> 00:25:12,559
other products too i just mentioned them

00:25:11,200 --> 00:25:15,840
because i know them but um

00:25:12,559 --> 00:25:17,760
that you know there are vulnerabilities

00:25:15,840 --> 00:25:19,679
in these assumptions and a lot of these

00:25:17,760 --> 00:25:23,200
products were developed when networks

00:25:19,679 --> 00:25:25,520
uh you know and and cracking were not as

00:25:23,200 --> 00:25:28,720
mature as there are now and so

00:25:25,520 --> 00:25:30,720
building a new mainframe product that is

00:25:28,720 --> 00:25:33,840
privileged

00:25:30,720 --> 00:25:36,400
from scratch is a really daunting

00:25:33,840 --> 00:25:37,120
task because you have to get everything

00:25:36,400 --> 00:25:40,400
right

00:25:37,120 --> 00:25:42,480
and again the os programs tend to be

00:25:40,400 --> 00:25:44,240
the programs that hold the most valuable

00:25:42,480 --> 00:25:47,279
data and are the most

00:25:44,240 --> 00:25:51,279
interesting for you know corporate or

00:25:47,279 --> 00:25:55,440
foreign espionage to want to get at

00:25:51,279 --> 00:25:56,320
um but you know there are so many things

00:25:55,440 --> 00:26:00,240
to learn

00:25:56,320 --> 00:26:02,960
about um the program where

00:26:00,240 --> 00:26:04,799
you know that's the typical look of the

00:26:02,960 --> 00:26:08,960
programmers that i've hired

00:26:04,799 --> 00:26:10,000
over the years to um become masters of

00:26:08,960 --> 00:26:12,559
this just like you know

00:26:10,000 --> 00:26:13,840
just to go and handle errors there are

00:26:12,559 --> 00:26:17,279
so many ways

00:26:13,840 --> 00:26:19,440
of um in the resource management there's

00:26:17,279 --> 00:26:22,159
so many things you have to master

00:26:19,440 --> 00:26:24,159
to build a robust program there are so

00:26:22,159 --> 00:26:27,279
many different kinds of

00:26:24,159 --> 00:26:29,760
apis for doing

00:26:27,279 --> 00:26:32,720
certain kinds of tasks you don't just

00:26:29,760 --> 00:26:34,240
have normal code in a normal process or

00:26:32,720 --> 00:26:36,840
address space sometimes you have to do

00:26:34,240 --> 00:26:40,240
something through interrupt requests

00:26:36,840 --> 00:26:43,840
srbs you know other things that you just

00:26:40,240 --> 00:26:45,600
it is it is a the total number of

00:26:43,840 --> 00:26:48,799
situations that you have to learn

00:26:45,600 --> 00:26:52,559
to be a master and z os are much higher

00:26:48,799 --> 00:26:54,400
so um the the framework that i developed

00:26:52,559 --> 00:26:56,159
and continue to work on after leaving

00:26:54,400 --> 00:27:00,880
rocket is um

00:26:56,159 --> 00:27:00,880
this and the uh zis and

00:27:01,279 --> 00:27:05,279
you know the thesis is that you need a

00:27:04,480 --> 00:27:06,720
framework

00:27:05,279 --> 00:27:10,240
especially if you're developing from

00:27:06,720 --> 00:27:14,799
scratch and the zis

00:27:10,240 --> 00:27:18,840
um let me go forward to a slide that

00:27:14,799 --> 00:27:20,399
talks about what this framework is more

00:27:18,840 --> 00:27:23,840
visually

00:27:20,399 --> 00:27:25,840
when people write a server on

00:27:23,840 --> 00:27:28,240
on the mainframe a new one they might

00:27:25,840 --> 00:27:30,399
write a c program or a java program

00:27:28,240 --> 00:27:32,840
and you know when we were developing the

00:27:30,399 --> 00:27:36,080
zoe ui

00:27:32,840 --> 00:27:37,679
we um built an http server and made

00:27:36,080 --> 00:27:38,399
various native calls but it wasn't

00:27:37,679 --> 00:27:41,760
really

00:27:38,399 --> 00:27:45,200
robust because we had to have privilege

00:27:41,760 --> 00:27:47,360
in that zss process so

00:27:45,200 --> 00:27:49,279
it got a second level of design i think

00:27:47,360 --> 00:27:52,559
before the first release i hope so

00:27:49,279 --> 00:27:56,240
um where

00:27:52,559 --> 00:27:58,960
there is a vis

00:27:56,240 --> 00:27:59,919
in the middle the the red box this is

00:27:58,960 --> 00:28:02,320
where

00:27:59,919 --> 00:28:03,520
it is effectively a i don't want to say

00:28:02,320 --> 00:28:06,480
container

00:28:03,520 --> 00:28:07,919
um but a framework a an application that

00:28:06,480 --> 00:28:11,600
can hold plug-ins

00:28:07,919 --> 00:28:16,159
um in it that can do

00:28:11,600 --> 00:28:18,399
various privileged services

00:28:16,159 --> 00:28:20,480
in a way that you know how to build that

00:28:18,399 --> 00:28:22,559
small snippet of code

00:28:20,480 --> 00:28:23,919
that does something that requires

00:28:22,559 --> 00:28:28,559
privilege

00:28:23,919 --> 00:28:32,720
and can properly secure it

00:28:28,559 --> 00:28:36,240
and it's amazing how short this can be

00:28:32,720 --> 00:28:40,080
one of the i'll go very very quickly

00:28:36,240 --> 00:28:43,200
into an example of this um

00:28:40,080 --> 00:28:44,480
if you can see all of this out on github

00:28:43,200 --> 00:28:49,440
there this is not

00:28:44,480 --> 00:28:49,440
um you know uh

00:28:50,159 --> 00:28:53,840
99.9 percent of this is all pushed up to

00:28:53,440 --> 00:28:56,799
a

00:28:53,840 --> 00:28:56,799
github um

00:28:56,960 --> 00:29:00,799
and this slide deck went out to everyone

00:28:59,120 --> 00:29:02,080
i assume rose so they can pick this

00:29:00,799 --> 00:29:06,320
stuff up i don't need to

00:29:02,080 --> 00:29:12,240
hop in here oh we'll make sure it does

00:29:06,320 --> 00:29:15,840
yeah okay and let me go over to

00:29:12,240 --> 00:29:20,880
in the code so

00:29:15,840 --> 00:29:20,880
you got about 10 minutes yeah okay so in

00:29:22,240 --> 00:29:27,760
in z os you have this wonderful

00:29:25,279 --> 00:29:30,240
feature that came out after 64-bit mode

00:29:27,760 --> 00:29:33,200
came out called 64-bit

00:29:30,240 --> 00:29:34,960
memory object of course you need new

00:29:33,200 --> 00:29:38,159
programming to exploit them

00:29:34,960 --> 00:29:38,559
um exploit this feature that is tends to

00:29:38,159 --> 00:29:40,399
be

00:29:38,559 --> 00:29:41,840
because of the backward compatibility

00:29:40,399 --> 00:29:44,960
role in the os that you

00:29:41,840 --> 00:29:45,840
use something you have to opt in you

00:29:44,960 --> 00:29:48,320
don't ever

00:29:45,840 --> 00:29:49,520
automatically opt into something or

00:29:48,320 --> 00:29:53,760
rarely do

00:29:49,520 --> 00:29:56,480
and so that you had to go and um

00:29:53,760 --> 00:29:58,960
explicitly take advantage of these

00:29:56,480 --> 00:30:00,960
services to be able to

00:29:58,960 --> 00:30:02,240
build you know an application that wants

00:30:00,960 --> 00:30:05,279
to use 64-bit

00:30:02,240 --> 00:30:08,880
addressing and

00:30:05,279 --> 00:30:12,799
yet these interfaces

00:30:08,880 --> 00:30:16,720
are um often

00:30:12,799 --> 00:30:20,000
um privileged in some way so

00:30:16,720 --> 00:30:22,000
it's sort of like not only do you

00:30:20,000 --> 00:30:23,039
want to use this but then you would need

00:30:22,000 --> 00:30:26,240
to

00:30:23,039 --> 00:30:28,399
get permission to secure your program

00:30:26,240 --> 00:30:30,080
and that while you're a developer you

00:30:28,399 --> 00:30:32,640
know you can go and

00:30:30,080 --> 00:30:34,159
apf authorize apf authorize is sort of

00:30:32,640 --> 00:30:36,640
the equivalent of

00:30:34,159 --> 00:30:38,080
declaring that you have you know root

00:30:36,640 --> 00:30:40,080
permission that you can

00:30:38,080 --> 00:30:41,679
effectively once your root in linux you

00:30:40,080 --> 00:30:44,080
can self-escalate to

00:30:41,679 --> 00:30:45,919
anything else but you don't get this in

00:30:44,080 --> 00:30:48,960
the real world in deployment

00:30:45,919 --> 00:30:51,200
you know responsible mainframe system

00:30:48,960 --> 00:30:53,600
managers

00:30:51,200 --> 00:30:55,840
they very very careful scrutiny of every

00:30:53,600 --> 00:30:58,960
program that they bring in that requires

00:30:55,840 --> 00:31:02,320
privilege and so how do you go

00:30:58,960 --> 00:31:05,840
and you know take advantage of a service

00:31:02,320 --> 00:31:09,679
like that so um inside the zss

00:31:05,840 --> 00:31:10,880
libraries there's the um

00:31:09,679 --> 00:31:14,320
one of the things that's already been

00:31:10,880 --> 00:31:14,320
there for a long time is

00:31:14,799 --> 00:31:20,240
shared memory services and it's

00:31:18,080 --> 00:31:23,120
a nice set of facilities to be able to

00:31:20,240 --> 00:31:25,840
make not only 64-bit memory objects

00:31:23,120 --> 00:31:26,480
but to be able to share them either

00:31:25,840 --> 00:31:29,120
share them

00:31:26,480 --> 00:31:29,760
with all other address spaces on the

00:31:29,120 --> 00:31:32,640
system

00:31:29,760 --> 00:31:35,120
or share them in a one-to-one or friend

00:31:32,640 --> 00:31:39,679
relationship that you share

00:31:35,120 --> 00:31:39,679
these memory objects with other

00:31:39,760 --> 00:31:42,960
programs explicitly yet you need

00:31:42,399 --> 00:31:46,159
privilege

00:31:42,960 --> 00:31:49,279
to to do that you need to be i think

00:31:46,159 --> 00:31:51,200
running in key zero or zero through

00:31:49,279 --> 00:31:51,679
seven meaning you need to run a system

00:31:51,200 --> 00:31:55,600
privilege

00:31:51,679 --> 00:31:59,200
key to do it so um

00:31:55,600 --> 00:32:01,840
to build a zis plugin that

00:31:59,200 --> 00:32:04,159
does that i just made a very small one

00:32:01,840 --> 00:32:07,519
last night because it really isn't

00:32:04,159 --> 00:32:10,720
very hard to do this um

00:32:07,519 --> 00:32:14,000
when you want to build a zs the is

00:32:10,720 --> 00:32:17,600
plugin you just need to make a simple

00:32:14,000 --> 00:32:21,039
descriptor object that goes and says

00:32:17,600 --> 00:32:25,519
uh what's the name of my zis plugin

00:32:21,039 --> 00:32:28,960
um and what apis the apis get 16

00:32:25,519 --> 00:32:32,320
letter names um i will have in

00:32:28,960 --> 00:32:33,840
them and what function in my c program

00:32:32,320 --> 00:32:36,080
will handle them

00:32:33,840 --> 00:32:37,200
there are templates and examples out

00:32:36,080 --> 00:32:40,080
there

00:32:37,200 --> 00:32:40,080
for doing this

00:32:40,480 --> 00:32:45,840
this is just derived from the

00:32:43,519 --> 00:32:48,000
build script of another test plug-in

00:32:45,840 --> 00:32:50,720
that was in the distribution

00:32:48,000 --> 00:32:51,120
but all i'm really doing here is adding

00:32:50,720 --> 00:32:55,200
my

00:32:51,120 --> 00:32:59,200
one little file gis main to this

00:32:55,200 --> 00:33:01,279
and the

00:32:59,200 --> 00:33:03,360
feature that i'm building is create

00:33:01,279 --> 00:33:04,320
shared memory which is just passing the

00:33:03,360 --> 00:33:07,840
call

00:33:04,320 --> 00:33:11,360
over to the existing library

00:33:07,840 --> 00:33:13,840
and um

00:33:11,360 --> 00:33:13,840
in uh

00:33:16,080 --> 00:33:20,399
inside the dss and so one of the things

00:33:18,720 --> 00:33:20,720
that's interesting about this is that

00:33:20,399 --> 00:33:24,399
the

00:33:20,720 --> 00:33:26,559
um is the

00:33:24,399 --> 00:33:28,559
thing that you have in linux or a lot of

00:33:26,559 --> 00:33:29,440
other operating system called a syscall

00:33:28,559 --> 00:33:32,640
which is

00:33:29,440 --> 00:33:36,480
ciscenter and the x86

00:33:32,640 --> 00:33:38,000
um implementation is the ability to have

00:33:36,480 --> 00:33:40,559
a privilege escalating

00:33:38,000 --> 00:33:41,679
call that a user program calls a certain

00:33:40,559 --> 00:33:45,039
program maybe to

00:33:41,679 --> 00:33:47,039
do io or allocate memory or whatever and

00:33:45,039 --> 00:33:48,640
the standard interface between your user

00:33:47,039 --> 00:33:51,200
mode program and the kernel

00:33:48,640 --> 00:33:52,640
is something that's a call gate boundary

00:33:51,200 --> 00:33:55,519
crossing something that

00:33:52,640 --> 00:33:56,559
escalates privilege from user to kernel

00:33:55,519 --> 00:33:59,679
mode

00:33:56,559 --> 00:34:02,640
and this framework here the simple way

00:33:59,679 --> 00:34:03,600
that zis works is that you declare a

00:34:02,640 --> 00:34:06,159
function

00:34:03,600 --> 00:34:06,799
and you're making it be a really secure

00:34:06,159 --> 00:34:08,800
service

00:34:06,799 --> 00:34:11,040
you have the way of making the memory

00:34:08,800 --> 00:34:12,079
transition of copying the data from user

00:34:11,040 --> 00:34:14,480
space

00:34:12,079 --> 00:34:15,599
into your privilege space you do your

00:34:14,480 --> 00:34:17,119
work

00:34:15,599 --> 00:34:18,879
all the real work is doing here is

00:34:17,119 --> 00:34:20,079
either allocating a shared or common

00:34:18,879 --> 00:34:22,399
block

00:34:20,079 --> 00:34:23,520
and it's the shared block additionally

00:34:22,399 --> 00:34:26,560
permitting access

00:34:23,520 --> 00:34:27,200
to the target program copying your

00:34:26,560 --> 00:34:30,480
reasons

00:34:27,200 --> 00:34:30,480
copying your results back

00:34:32,399 --> 00:34:37,200
and off you go you you this is it and so

00:34:35,280 --> 00:34:38,399
all this hard stuff that you would spend

00:34:37,200 --> 00:34:41,359
years learning

00:34:38,399 --> 00:34:42,000
to do this properly and securely um and

00:34:41,359 --> 00:34:44,000
it's

00:34:42,000 --> 00:34:45,359
pretty much being done for you you can

00:34:44,000 --> 00:34:48,240
now

00:34:45,359 --> 00:34:49,599
by policy rather than mechanism choose

00:34:48,240 --> 00:34:52,639
any secure

00:34:49,599 --> 00:34:54,720
service that z os can do and bring it

00:34:52,639 --> 00:34:57,760
into a convenient

00:34:54,720 --> 00:35:00,160
manageable interface

00:34:57,760 --> 00:35:00,800
and manageable i mean that you can bring

00:35:00,160 --> 00:35:03,040
it in

00:35:00,800 --> 00:35:04,720
and this is the improper way of doing it

00:35:03,040 --> 00:35:07,119
don't give it any security

00:35:04,720 --> 00:35:08,880
that's not a good idea because this is a

00:35:07,119 --> 00:35:11,359
privileged service from the

00:35:08,880 --> 00:35:13,200
operating system's point of view so

00:35:11,359 --> 00:35:14,640
something i brought in and i hope will

00:35:13,200 --> 00:35:17,359
commit to css

00:35:14,640 --> 00:35:19,440
very soon althea the team of pulled

00:35:17,359 --> 00:35:22,720
request reviewers will accept it

00:35:19,440 --> 00:35:25,839
is the ability to assign a specific

00:35:22,720 --> 00:35:27,760
privilege class a facility class profile

00:35:25,839 --> 00:35:28,880
that's sort of the main frame equivalent

00:35:27,760 --> 00:35:32,079
of ldap

00:35:28,880 --> 00:35:35,119
is the ability to say that this resource

00:35:32,079 --> 00:35:37,680
name can have um this

00:35:35,119 --> 00:35:39,119
privilege for this user or this group of

00:35:37,680 --> 00:35:42,160
users so

00:35:39,119 --> 00:35:46,240
i can go in

00:35:42,160 --> 00:35:48,240
in my demo here and call the

00:35:46,240 --> 00:35:50,720
properly authorized version of the

00:35:48,240 --> 00:35:50,720
service

00:35:54,960 --> 00:35:58,480
and now i'm going to have to call oh you

00:35:57,839 --> 00:36:00,880
got him

00:35:58,480 --> 00:36:02,720
right here okay all right yeah and we

00:36:00,880 --> 00:36:03,520
wanted to get to the poll questions too

00:36:02,720 --> 00:36:05,040
so

00:36:03,520 --> 00:36:07,040
yeah okay we'll get getting there so

00:36:05,040 --> 00:36:09,440
okay i just called the service and i got

00:36:07,040 --> 00:36:11,280
slapped down by the operating system

00:36:09,440 --> 00:36:12,880
because i did not have privilege i knew

00:36:11,280 --> 00:36:15,200
that the um

00:36:12,880 --> 00:36:17,920
or i got slapped down by this server

00:36:15,200 --> 00:36:23,280
because i didn't have privilege to do it

00:36:17,920 --> 00:36:23,280
um then i can go back into um

00:36:24,160 --> 00:36:29,560
into i'm this is a super this is a

00:36:27,680 --> 00:36:30,960
system manager's account logged into

00:36:29,560 --> 00:36:34,079
00:36:30,960 --> 00:36:34,079
i can go and

00:36:37,280 --> 00:36:41,200
do two commands that tell rack racks is

00:36:39,440 --> 00:36:45,839
the security manager being used

00:36:41,200 --> 00:36:45,839
on this particular mainframe and

00:36:46,640 --> 00:36:52,320
we run that command and now it works so

00:36:50,560 --> 00:36:54,720
now i've gone and taken

00:36:52,320 --> 00:36:55,680
a really important valuable service in

00:36:54,720 --> 00:36:57,760
the mainframe

00:36:55,680 --> 00:36:58,880
put a little interface on it and now

00:36:57,760 --> 00:37:02,160
properly

00:36:58,880 --> 00:37:04,640
secured it and so what i'm going to do

00:37:02,160 --> 00:37:07,040
further from this is to go to the what's

00:37:04,640 --> 00:37:09,839
next slide

00:37:07,040 --> 00:37:09,839
um

00:37:25,839 --> 00:37:30,400
so you know i'm working on some

00:37:29,359 --> 00:37:33,200
additional serv

00:37:30,400 --> 00:37:36,560
features in css i'm making the

00:37:33,200 --> 00:37:38,560
non-privileged part 64-bit ready

00:37:36,560 --> 00:37:39,839
privileged container gis was already

00:37:38,560 --> 00:37:43,280
64-bit

00:37:39,839 --> 00:37:46,079
i'm building in extensions to support

00:37:43,280 --> 00:37:48,720
generating your own srbs and irbs time

00:37:46,079 --> 00:37:50,480
to explain what those are today

00:37:48,720 --> 00:37:52,400
and i'm working on a project that makes

00:37:50,480 --> 00:37:54,800
use of this which is an open source

00:37:52,400 --> 00:37:56,640
debugger system inspector and dump

00:37:54,800 --> 00:37:58,320
analyzer that maybe i'll

00:37:56,640 --> 00:38:01,200
give another talk on something called

00:37:58,320 --> 00:38:04,640
project inspect which is

00:38:01,200 --> 00:38:08,240
you know my hobby horse and uh um

00:38:04,640 --> 00:38:10,800
you know hopefully by building an open

00:38:08,240 --> 00:38:13,920
source project that makes use of these

00:38:10,800 --> 00:38:16,079
vss and zis capabilities

00:38:13,920 --> 00:38:17,599
um you know we'll provide more examples

00:38:16,079 --> 00:38:20,000
of the community of how to do things

00:38:17,599 --> 00:38:24,320
that are considered really wizardly

00:38:20,000 --> 00:38:27,040
relative to zos programming um

00:38:24,320 --> 00:38:27,680
you know but um accessible to people

00:38:27,040 --> 00:38:29,760
maybe

00:38:27,680 --> 00:38:31,760
within their first year of programming

00:38:29,760 --> 00:38:33,200
rather than you know after 5 or 10 years

00:38:31,760 --> 00:38:35,119
of suffering

00:38:33,200 --> 00:38:36,720
i want to make a particular shout out to

00:38:35,119 --> 00:38:38,640
something that you should look at and it

00:38:36,720 --> 00:38:41,200
is mentioned in the deck

00:38:38,640 --> 00:38:43,119
that something i clicked on in passing

00:38:41,200 --> 00:38:47,040
here there is a

00:38:43,119 --> 00:38:48,640
secure engineering mini course that rob

00:38:47,040 --> 00:38:50,320
scott has presented a number of

00:38:48,640 --> 00:38:52,880
different share and gsa

00:38:50,320 --> 00:38:53,680
sessions and there's a link to it in the

00:38:52,880 --> 00:38:55,760
slide deck

00:38:53,680 --> 00:38:57,680
and everyone should go through this and

00:38:55,760 --> 00:39:00,160
and to get the

00:38:57,680 --> 00:39:01,680
um the full awesomeness of the

00:39:00,160 --> 00:39:04,640
responsibility

00:39:01,680 --> 00:39:06,000
and the intricacy of writing code that

00:39:04,640 --> 00:39:08,880
will

00:39:06,000 --> 00:39:10,720
um not compromise the os security and

00:39:08,880 --> 00:39:13,599
allow you to present the proper

00:39:10,720 --> 00:39:14,560
controls to the system managers that use

00:39:13,599 --> 00:39:18,160
your code

00:39:14,560 --> 00:39:20,640
and how to pass security reviews and

00:39:18,160 --> 00:39:22,560
audits that you will get more and more

00:39:20,640 --> 00:39:24,720
and build products that will pass with

00:39:22,560 --> 00:39:26,720
flying colors when rsm and other

00:39:24,720 --> 00:39:29,040
pieces of software are run against your

00:39:26,720 --> 00:39:31,520
product that you want to have something

00:39:29,040 --> 00:39:33,119
that um you know is future oriented and

00:39:31,520 --> 00:39:34,160
that's a lot of what we're doing here

00:39:33,119 --> 00:39:37,200
with the s

00:39:34,160 --> 00:39:40,240
s and v is being security ready

00:39:37,200 --> 00:39:42,000
and again i could go and get rob come as

00:39:40,240 --> 00:39:44,480
a guest or present this some other time

00:39:42,000 --> 00:39:45,599
if people are interested in secure

00:39:44,480 --> 00:39:48,079
engineering hey

00:39:45,599 --> 00:39:48,720
hey joe anyway you're yep yeah you're

00:39:48,079 --> 00:39:51,040
done

00:39:48,720 --> 00:39:52,720
time's up uh rose did you want to do a

00:39:51,040 --> 00:39:53,920
couple quick survey questions and we'll

00:39:52,720 --> 00:39:56,320
turn it over to mike

00:39:53,920 --> 00:39:57,359
i do i'm mike while you're getting ready

00:39:56,320 --> 00:40:00,640
i'm going to

00:39:57,359 --> 00:40:03,040
launch a couple questions first one

00:40:00,640 --> 00:40:03,040
um

00:40:05,040 --> 00:40:07,599
see what

00:40:08,160 --> 00:40:11,839
this one should be launched now

00:40:12,400 --> 00:40:18,880
we do see him okay cool just take

00:40:15,920 --> 00:40:18,880
two seconds to

00:40:22,160 --> 00:40:28,480
that one and joe we didn't have

00:40:25,359 --> 00:40:29,440
uh any q a at least in the in the chat

00:40:28,480 --> 00:40:31,040
window

00:40:29,440 --> 00:40:33,200
but those of you that may have a

00:40:31,040 --> 00:40:35,280
follow-up question for joe

00:40:33,200 --> 00:40:37,119
you'll notice on the slides he does have

00:40:35,280 --> 00:40:40,000
his email address

00:40:37,119 --> 00:40:42,480
and definitely reach out to joe and if

00:40:40,000 --> 00:40:45,280
need be we can figure out a deeper dive

00:40:42,480 --> 00:40:46,480
so that um joe could cover this in more

00:40:45,280 --> 00:40:49,599
detail for

00:40:46,480 --> 00:40:52,640
for those of you that are uh interested

00:40:49,599 --> 00:40:55,680
in what he's proposing

00:40:52,640 --> 00:40:57,440
okay next questions up

00:40:55,680 --> 00:40:59,599
take a look at that one do you plan on

00:40:57,440 --> 00:41:07,839
developing new back end code for

00:40:59,599 --> 00:41:07,839
z os

00:41:23,680 --> 00:41:28,000
okay next question real quick

00:41:30,000 --> 00:41:35,680
do you have problems getting back end

00:41:31,680 --> 00:41:35,680
developers see an assembler hired and

00:41:46,839 --> 00:41:49,839
trained

00:42:00,000 --> 00:42:03,520
yes or no are you continuing to train

00:42:02,079 --> 00:42:07,200
back in developers

00:42:03,520 --> 00:42:07,200
in assembler primarily

00:42:10,880 --> 00:42:16,800
and just one more so mike bauer get

00:42:13,440 --> 00:42:19,119
ready to share

00:42:16,800 --> 00:42:22,160
yep i'm i'm already gross and whenever

00:42:19,119 --> 00:42:22,160
we finish up the pools

00:42:28,839 --> 00:42:34,720
okay

00:42:30,960 --> 00:42:45,839
finally do you use xlc

00:42:34,720 --> 00:42:45,839
metal c yes or no

00:42:52,880 --> 00:42:56,240
so while that's wrapping up thanks so

00:42:54,480 --> 00:42:59,599
much joe for

00:42:56,240 --> 00:43:01,520
covering this um and we'll see

00:42:59,599 --> 00:43:02,800
what your response is like it definitely

00:43:01,520 --> 00:43:04,240
based upon poll

00:43:02,800 --> 00:43:06,319
there's some interested parties out

00:43:04,240 --> 00:43:09,440
there for what you're building

00:43:06,319 --> 00:43:13,440
yeah i hope so thank you okay

00:43:09,440 --> 00:43:15,599
take it away okay thanks rose

00:43:13,440 --> 00:43:17,599
thanks bruce and thanks joe for the

00:43:15,599 --> 00:43:20,079
excellent presentation

00:43:17,599 --> 00:43:22,880
um i want to talk a little bit about our

00:43:20,079 --> 00:43:23,359
squad focus for the zoe cli squad coming

00:43:22,880 --> 00:43:25,599
up in

00:43:23,359 --> 00:43:26,640
in the current pi a couple of our

00:43:25,599 --> 00:43:29,200
initiatives we've

00:43:26,640 --> 00:43:30,720
we've led in the past we led the

00:43:29,200 --> 00:43:33,599
incubation of the

00:43:30,720 --> 00:43:35,520
uh zoe explorer which is now grown into

00:43:33,599 --> 00:43:39,440
its own squad

00:43:35,520 --> 00:43:42,720
and we also recently incubated the

00:43:39,440 --> 00:43:45,200
zoe sdk so we client sdk

00:43:42,720 --> 00:43:47,839
so if you're not aware of that

00:43:45,200 --> 00:43:50,000
initiative and interested in

00:43:47,839 --> 00:43:51,839
programmatically interacting with zos

00:43:50,000 --> 00:43:55,599
using python swift

00:43:51,839 --> 00:43:58,880
or node you know feel free to contact me

00:43:55,599 --> 00:44:00,319
but in this upcoming pi the cli squad

00:43:58,880 --> 00:44:05,119
has shifted its focus

00:44:00,319 --> 00:44:07,839
back to the cli and one improvement

00:44:05,119 --> 00:44:08,800
we're looking to help with is team

00:44:07,839 --> 00:44:10,560
enablement

00:44:08,800 --> 00:44:12,400
so we've seen a lot of folks out in the

00:44:10,560 --> 00:44:13,200
community getting started with the zoe

00:44:12,400 --> 00:44:15,680
cli

00:44:13,200 --> 00:44:16,640
but we want to help them get their team

00:44:15,680 --> 00:44:20,400
involved

00:44:16,640 --> 00:44:21,760
and see the use of the cli on different

00:44:20,400 --> 00:44:24,240
projects

00:44:21,760 --> 00:44:26,880
so the zoe cli squad in this pi is

00:44:24,240 --> 00:44:28,240
working on features to enable team usage

00:44:26,880 --> 00:44:31,200
and i'd like you all to take the

00:44:28,240 --> 00:44:33,839
opportunity on this call to provide

00:44:31,200 --> 00:44:34,480
any feedback on on our proposed

00:44:33,839 --> 00:44:37,119
direction

00:44:34,480 --> 00:44:37,760
or any challenges you're experiencing in

00:44:37,119 --> 00:44:40,960
your use

00:44:37,760 --> 00:44:40,960
of the zoe cli

00:44:41,119 --> 00:44:45,119
so before i start talking about the

00:44:44,000 --> 00:44:48,000
improvements

00:44:45,119 --> 00:44:48,640
for the current pi i want to take a

00:44:48,000 --> 00:44:51,280
moment

00:44:48,640 --> 00:44:52,319
to talk about profile basics you know

00:44:51,280 --> 00:44:53,599
where we started

00:44:52,319 --> 00:44:55,520
what we've done to improve the

00:44:53,599 --> 00:44:56,800
experience and then i'll discuss where

00:44:55,520 --> 00:44:59,359
we're headed

00:44:56,800 --> 00:45:01,440
so what are profiles in the terms of the

00:44:59,359 --> 00:45:03,839
zoe command line interface

00:45:01,440 --> 00:45:04,880
profiles allow you to store default

00:45:03,839 --> 00:45:07,520
command options

00:45:04,880 --> 00:45:08,640
so that you do not need to specify them

00:45:07,520 --> 00:45:11,680
on each command

00:45:08,640 --> 00:45:14,160
and a lot of different client

00:45:11,680 --> 00:45:16,240
software in zoe make use of these

00:45:14,160 --> 00:45:19,680
profiles so profiles for example

00:45:16,240 --> 00:45:22,560
they're shared between the cli sdks

00:45:19,680 --> 00:45:24,480
and the zoe explorer so you create a

00:45:22,560 --> 00:45:25,119
profile and you can use it in any one of

00:45:24,480 --> 00:45:28,000
the client

00:45:25,119 --> 00:45:29,839
technologies here is a sample command

00:45:28,000 --> 00:45:31,119
without profile so you see i want to

00:45:29,839 --> 00:45:33,520
list data sets

00:45:31,119 --> 00:45:34,720
i provide a custom pattern and then i

00:45:33,520 --> 00:45:38,240
have to specify

00:45:34,720 --> 00:45:41,440
information to connect to in this case

00:45:38,240 --> 00:45:43,760
cosmf so i have to specify a host

00:45:41,440 --> 00:45:45,680
a port whether or not i want to accept

00:45:43,760 --> 00:45:47,599
self-signed certificates on the server

00:45:45,680 --> 00:45:48,240
that's what the reject unauthorized flag

00:45:47,599 --> 00:45:50,640
is

00:45:48,240 --> 00:45:52,400
as well as provide a username and a

00:45:50,640 --> 00:45:54,640
password

00:45:52,400 --> 00:45:56,800
so this thing can become arduous if

00:45:54,640 --> 00:45:59,119
you're running the cli interactively

00:45:56,800 --> 00:46:00,319
if you store that information rather in

00:45:59,119 --> 00:46:02,960
a profile

00:46:00,319 --> 00:46:03,440
your same command becomes much much more

00:46:02,960 --> 00:46:05,280
simple

00:46:03,440 --> 00:46:07,200
just zoe files list data sets and you

00:46:05,280 --> 00:46:10,560
provide the pattern

00:46:07,200 --> 00:46:11,839
another aspect of profiles is that you

00:46:10,560 --> 00:46:14,480
can easily switch

00:46:11,839 --> 00:46:15,520
your default profiles to easily target

00:46:14,480 --> 00:46:17,040
different systems

00:46:15,520 --> 00:46:19,200
and you won't have to change your

00:46:17,040 --> 00:46:21,119
scripts so if you provided all this

00:46:19,200 --> 00:46:22,160
custom information in a script and then

00:46:21,119 --> 00:46:23,599
all of a sudden you

00:46:22,160 --> 00:46:25,599
you know move your development or your

00:46:23,599 --> 00:46:28,400
project to another

00:46:25,599 --> 00:46:29,359
help our you access different services

00:46:28,400 --> 00:46:31,599
you would have to change

00:46:29,359 --> 00:46:33,680
your scripting logic to some degree if

00:46:31,599 --> 00:46:35,760
you make use of these profiles

00:46:33,680 --> 00:46:37,119
you can just easily switch between you

00:46:35,760 --> 00:46:39,920
know really where you're running

00:46:37,119 --> 00:46:39,920
your automation

00:46:40,319 --> 00:46:45,760
now profile management i feel that

00:46:43,440 --> 00:46:47,920
profiles are fairly easy to manage today

00:46:45,760 --> 00:46:50,240
as long as the number of services you

00:46:47,920 --> 00:46:52,240
are interacting with is small

00:46:50,240 --> 00:46:53,440
and you are not frequently targeting

00:46:52,240 --> 00:46:55,520
different services

00:46:53,440 --> 00:46:56,960
of the same type so for example today if

00:46:55,520 --> 00:46:59,520
you have you're using

00:46:56,960 --> 00:47:01,599
you know you're developing on for one

00:46:59,520 --> 00:47:03,359
project on one lpar and another on a

00:47:01,599 --> 00:47:05,440
different one and then so on and

00:47:03,359 --> 00:47:06,720
you're using different services it's

00:47:05,440 --> 00:47:09,280
very difficult

00:47:06,720 --> 00:47:10,319
to direct your client to the appropriate

00:47:09,280 --> 00:47:12,000
set of services

00:47:10,319 --> 00:47:14,079
but if you're only interacting with one

00:47:12,000 --> 00:47:15,359
zeo smf and for example maybe one

00:47:14,079 --> 00:47:17,920
endeavor instance

00:47:15,359 --> 00:47:19,680
um then it's a fairly small set of

00:47:17,920 --> 00:47:21,359
services to manage and

00:47:19,680 --> 00:47:23,839
i would suspect you you're probably not

00:47:21,359 --> 00:47:26,240
facing much of a problem today

00:47:23,839 --> 00:47:28,559
however we've seen that the zoe

00:47:26,240 --> 00:47:31,280
ecosystem has continued to grow

00:47:28,559 --> 00:47:32,000
regarding cli conformance we're up to i

00:47:31,280 --> 00:47:35,040
believe

00:47:32,000 --> 00:47:38,400
25 conformant cli extensions

00:47:35,040 --> 00:47:40,079
and they all or most of them

00:47:38,400 --> 00:47:43,040
add another profile because they're

00:47:40,079 --> 00:47:45,440
connecting to another service

00:47:43,040 --> 00:47:47,119
so this influenced us to introduce the

00:47:45,440 --> 00:47:49,200
concept of base profiles

00:47:47,119 --> 00:47:50,559
and there are a lot of benefits of base

00:47:49,200 --> 00:47:52,559
profiles one

00:47:50,559 --> 00:47:54,720
key aspect of them is they enable a

00:47:52,559 --> 00:47:56,160
single sign-on experience when using the

00:47:54,720 --> 00:47:58,000
api mediation layer

00:47:56,160 --> 00:47:59,520
i don't want to go into the details of

00:47:58,000 --> 00:48:00,880
single sign-on here

00:47:59,520 --> 00:48:02,800
if you're interested in those feel free

00:48:00,880 --> 00:48:05,359
to contact me offline i want to talk

00:48:02,800 --> 00:48:07,359
about the benefits of base profile

00:48:05,359 --> 00:48:08,400
even when just accessing services

00:48:07,359 --> 00:48:11,920
directly

00:48:08,400 --> 00:48:14,640
okay so base profiles contain

00:48:11,920 --> 00:48:16,079
information that is applicable to all

00:48:14,640 --> 00:48:18,400
profile types

00:48:16,079 --> 00:48:19,200
so these properties include things like

00:48:18,400 --> 00:48:22,240
hostname

00:48:19,200 --> 00:48:23,599
port username password and reject

00:48:22,240 --> 00:48:25,440
unauthorized

00:48:23,599 --> 00:48:26,720
you can now think of the profile types

00:48:25,440 --> 00:48:29,680
we had previously

00:48:26,720 --> 00:48:30,400
z osmf endeavor file master plus kicks

00:48:29,680 --> 00:48:32,079
db2

00:48:30,400 --> 00:48:34,960
the list goes on consider those as

00:48:32,079 --> 00:48:37,119
service profiles those service profiles

00:48:34,960 --> 00:48:39,760
will continue to take precedence

00:48:37,119 --> 00:48:41,760
over what's in your base profile but

00:48:39,760 --> 00:48:42,960
this created a problem right because if

00:48:41,760 --> 00:48:46,640
i'm accessing

00:48:42,960 --> 00:48:48,160
you know 15 services and

00:48:46,640 --> 00:48:49,520
then i need to provide my username and

00:48:48,160 --> 00:48:50,480
password my profile so even though it's

00:48:49,520 --> 00:48:51,599
stored securely

00:48:50,480 --> 00:48:53,599
something like that i still have to

00:48:51,599 --> 00:48:55,760
manage that in 15 places

00:48:53,599 --> 00:48:57,440
the addition of a base profile allows me

00:48:55,760 --> 00:48:58,480
to manage that username and password

00:48:57,440 --> 00:49:00,800
combination

00:48:58,480 --> 00:49:02,400
in one place also if you ran all these

00:49:00,800 --> 00:49:03,040
services on one host and then had to

00:49:02,400 --> 00:49:05,200
switch

00:49:03,040 --> 00:49:06,800
you could also keep that information

00:49:05,200 --> 00:49:08,800
your base profile as well

00:49:06,800 --> 00:49:10,480
just makes the effort to update

00:49:08,800 --> 00:49:11,040
especially username and password as they

00:49:10,480 --> 00:49:13,680
may change

00:49:11,040 --> 00:49:15,040
frequently makes the effort to update

00:49:13,680 --> 00:49:16,720
those very small

00:49:15,040 --> 00:49:19,359
and the number of places they're stored

00:49:16,720 --> 00:49:19,359
very small

00:49:21,440 --> 00:49:25,119
so here's an example leveraging base

00:49:24,240 --> 00:49:28,240
profiles

00:49:25,119 --> 00:49:30,160
so this is sample creation commands for

00:49:28,240 --> 00:49:33,040
profiles the first is creating

00:49:30,160 --> 00:49:34,800
a zeo smf profile and the second is

00:49:33,040 --> 00:49:36,880
creating an endeavor profile

00:49:34,800 --> 00:49:38,079
so again i have to specify all that

00:49:36,880 --> 00:49:41,599
information on

00:49:38,079 --> 00:49:43,440
on both in both profiles but below

00:49:41,599 --> 00:49:45,280
i show that i could specify most of that

00:49:43,440 --> 00:49:49,040
information just as part of

00:49:45,280 --> 00:49:51,920
the base profile and then specify only

00:49:49,040 --> 00:49:53,119
the different information in each one of

00:49:51,920 --> 00:49:55,440
my service profiles

00:49:53,119 --> 00:49:56,480
it makes managing this information a lot

00:49:55,440 --> 00:49:59,440
more easy

00:49:56,480 --> 00:50:01,200
because you when you have to update

00:49:59,440 --> 00:50:02,160
things like username and password as a

00:50:01,200 --> 00:50:04,880
key candidate

00:50:02,160 --> 00:50:05,839
i then only have to update one profile

00:50:04,880 --> 00:50:08,160
rather than

00:50:05,839 --> 00:50:09,599
you know 10 20 30 profiles depending on

00:50:08,160 --> 00:50:13,839
how many services

00:50:09,599 --> 00:50:13,839
uh you may be interacting with

00:50:14,000 --> 00:50:17,839
so what are the profile challenges that

00:50:16,000 --> 00:50:21,119
still face us today

00:50:17,839 --> 00:50:23,119
well today profiles are user based

00:50:21,119 --> 00:50:25,520
so each user needs to set up their own

00:50:23,119 --> 00:50:26,720
profiles on their client

00:50:25,520 --> 00:50:28,640
if they have multiple clients they're

00:50:26,720 --> 00:50:30,319
going to have to set it up on each one

00:50:28,640 --> 00:50:31,760
and if you are targeting different

00:50:30,319 --> 00:50:32,559
systems when working on different

00:50:31,760 --> 00:50:35,760
projects

00:50:32,559 --> 00:50:37,599
you need to remember which which

00:50:35,760 --> 00:50:40,480
profiles to set as your default

00:50:37,599 --> 00:50:42,640
i remember their day i was working on a

00:50:40,480 --> 00:50:45,119
cobalt cics application

00:50:42,640 --> 00:50:46,480
and i leveraged for example the file

00:50:45,119 --> 00:50:50,000
master plus

00:50:46,480 --> 00:50:53,760
plug-in to perform a copy to

00:50:50,000 --> 00:50:56,079
basically i was trying to deploy my

00:50:53,760 --> 00:50:57,359
application to a test environment and i

00:50:56,079 --> 00:50:59,280
found out i was copying on the wrong

00:50:57,359 --> 00:51:00,400
lpar because i hadn't repositioned my

00:50:59,280 --> 00:51:03,760
client to talk to the

00:51:00,400 --> 00:51:06,000
lpar for that project so that's

00:51:03,760 --> 00:51:07,920
that's one difficulty and then profiles

00:51:06,000 --> 00:51:09,359
are stored in multiple folders which

00:51:07,920 --> 00:51:10,800
kind of makes them difficult to share

00:51:09,359 --> 00:51:12,720
especially when you're storing username

00:51:10,800 --> 00:51:15,520
and password and mobile

00:51:12,720 --> 00:51:16,720
files if you're not taking advantage of

00:51:15,520 --> 00:51:18,720
if you're not taking advantage of base

00:51:16,720 --> 00:51:20,800
profiles that can become difficult

00:51:18,720 --> 00:51:22,800
and there's been workarounds we've seen

00:51:20,800 --> 00:51:23,839
in the field i proposed one as well as

00:51:22,800 --> 00:51:26,480
part of this blog

00:51:23,839 --> 00:51:27,760
i listed in that you could automate

00:51:26,480 --> 00:51:29,680
profile creation

00:51:27,760 --> 00:51:31,200
and that's what i'm i'm currently doing

00:51:29,680 --> 00:51:34,480
for for my projects

00:51:31,200 --> 00:51:35,440
so that when i pull a project down from

00:51:34,480 --> 00:51:37,839
github

00:51:35,440 --> 00:51:40,160
i just have to run a script that'll

00:51:37,839 --> 00:51:41,920
orient my client to the services i need

00:51:40,160 --> 00:51:43,119
to interact with when working on that

00:51:41,920 --> 00:51:45,280
project

00:51:43,119 --> 00:51:46,319
the problem with this is somebody has to

00:51:45,280 --> 00:51:48,319
set up that

00:51:46,319 --> 00:51:49,920
custom automation and then every time a

00:51:48,319 --> 00:51:51,119
team member wants to use it after they

00:51:49,920 --> 00:51:52,559
pull it from github

00:51:51,119 --> 00:51:55,200
they have to run the automation to

00:51:52,559 --> 00:51:58,319
reorient their client to the

00:51:55,200 --> 00:51:58,319
appropriate services

00:51:58,559 --> 00:52:05,040
so the direction we're going in this pi

00:52:01,920 --> 00:52:06,880
is towards what i call project profile

00:52:05,040 --> 00:52:08,559
so we want to represent

00:52:06,880 --> 00:52:10,800
first we want to represent all profile

00:52:08,559 --> 00:52:12,240
information in a single document

00:52:10,800 --> 00:52:14,800
and that single document would be more

00:52:12,240 --> 00:52:17,040
easy to share and it could be maintained

00:52:14,800 --> 00:52:18,000
it could be checked into source control

00:52:17,040 --> 00:52:19,760
and maintained

00:52:18,000 --> 00:52:22,000
just as part of the project and then

00:52:19,760 --> 00:52:24,240
when a team member checks out a project

00:52:22,000 --> 00:52:25,720
that has a specially named file i'm

00:52:24,240 --> 00:52:27,760
proposing

00:52:25,720 --> 00:52:29,520
zoe.config.json their client will

00:52:27,760 --> 00:52:30,800
respect those settings when working on

00:52:29,520 --> 00:52:33,920
that project

00:52:30,800 --> 00:52:34,960
however different users may have user

00:52:33,920 --> 00:52:36,640
preferences

00:52:34,960 --> 00:52:38,559
or things they don't want to store in

00:52:36,640 --> 00:52:40,800
source control like credentials

00:52:38,559 --> 00:52:43,680
and there will be another file i propose

00:52:40,800 --> 00:52:45,520
the name to be zoe.user.json

00:52:43,680 --> 00:52:48,720
it may change it could be added

00:52:45,520 --> 00:52:50,559
alongside that zoe.config.json for user

00:52:48,720 --> 00:52:53,040
specific options

00:52:50,559 --> 00:52:54,079
again you might not want to share some

00:52:53,040 --> 00:52:55,200
things with the team

00:52:54,079 --> 00:52:59,119
and you may not want to check some

00:52:55,200 --> 00:52:59,119
things into source control

00:52:59,359 --> 00:53:03,200
and just to state i don't know if

00:53:01,599 --> 00:53:04,720
everyone's familiar with the command

00:53:03,200 --> 00:53:05,760
line order of precedence but when you

00:53:04,720 --> 00:53:08,079
run a command

00:53:05,760 --> 00:53:10,079
the first place we look for an option is

00:53:08,079 --> 00:53:11,119
did the user specify it on the command

00:53:10,079 --> 00:53:13,359
line

00:53:11,119 --> 00:53:14,559
and if the answer is no we look for

00:53:13,359 --> 00:53:16,000
environment variables

00:53:14,559 --> 00:53:17,920
environment variables have a special

00:53:16,000 --> 00:53:18,720
naming scheme so we underscore opt

00:53:17,920 --> 00:53:22,960
underscore

00:53:18,720 --> 00:53:26,000
and whatever the name of the

00:53:22,960 --> 00:53:28,119
option is if it's there we take it

00:53:26,000 --> 00:53:30,480
if it's not there we will look in that

00:53:28,119 --> 00:53:31,440
zoe.user.json for user specific settings

00:53:30,480 --> 00:53:34,480
for a project

00:53:31,440 --> 00:53:35,920
not there we'll look in uzoe.config.json

00:53:34,480 --> 00:53:37,359
settings which are shared amongst the

00:53:35,920 --> 00:53:39,040
team for our project

00:53:37,359 --> 00:53:42,079
and if it's not there we'll look in user

00:53:39,040 --> 00:53:44,400
profiles which is what's available today

00:53:42,079 --> 00:53:46,480
and also i talked about service profiles

00:53:44,400 --> 00:53:47,920
and base profiles i know in each level

00:53:46,480 --> 00:53:49,920
three four and five

00:53:47,920 --> 00:53:50,960
service profile information would

00:53:49,920 --> 00:53:54,079
override base

00:53:50,960 --> 00:53:55,599
profile information i don't have too

00:53:54,079 --> 00:53:57,839
much time for a full

00:53:55,599 --> 00:53:59,040
demonstration but i do want to show a

00:53:57,839 --> 00:54:01,359
couple key aspects

00:53:59,040 --> 00:54:03,359
because me personally i'm a visual

00:54:01,359 --> 00:54:04,720
learner so being able to see

00:54:03,359 --> 00:54:06,240
the current structure a little bit

00:54:04,720 --> 00:54:07,440
easier than you know listening to

00:54:06,240 --> 00:54:11,440
somebody talk about it

00:54:07,440 --> 00:54:13,680
so here i'm in my home directory

00:54:11,440 --> 00:54:14,800
under my dot zoe folder in my file

00:54:13,680 --> 00:54:16,800
system

00:54:14,800 --> 00:54:19,280
and how profiles are managed today is

00:54:16,800 --> 00:54:21,599
there's just a profiles directory

00:54:19,280 --> 00:54:22,480
and in each each profile directory you

00:54:21,599 --> 00:54:26,640
have all your

00:54:22,480 --> 00:54:28,880
profile types base for wca view kicks

00:54:26,640 --> 00:54:31,599
db2 i have a lot of plugins installed

00:54:28,880 --> 00:54:33,280
and then within each profile type you

00:54:31,599 --> 00:54:34,960
have your profile

00:54:33,280 --> 00:54:37,040
the name of your profiles and a yaml

00:54:34,960 --> 00:54:39,440
file and they contain information like

00:54:37,040 --> 00:54:41,520
host or username password etc things you

00:54:39,440 --> 00:54:44,640
don't want to specify every every time

00:54:41,520 --> 00:54:46,880
it becomes a little bit difficult to

00:54:44,640 --> 00:54:49,760
maintain

00:54:46,880 --> 00:54:50,559
again one way of solving the maintenance

00:54:49,760 --> 00:54:54,559
problem

00:54:50,559 --> 00:54:56,240
is to run things like npm run init

00:54:54,559 --> 00:54:58,720
where i might have some custom

00:54:56,240 --> 00:55:00,640
automation that will go off

00:54:58,720 --> 00:55:02,400
and set up all my profiles for me when

00:55:00,640 --> 00:55:05,440
i'm working on this project

00:55:02,400 --> 00:55:06,480
and then i can switch projects that's

00:55:05,440 --> 00:55:08,319
where we are today

00:55:06,480 --> 00:55:10,480
and that's what's possible today but

00:55:08,319 --> 00:55:12,640
where we want to go again

00:55:10,480 --> 00:55:14,400
because instead of having all of that

00:55:12,640 --> 00:55:16,319
that file structure

00:55:14,400 --> 00:55:17,520
just have a single document so we'd have

00:55:16,319 --> 00:55:20,960
to pick.json

00:55:17,520 --> 00:55:22,559
with the user profile settings

00:55:20,960 --> 00:55:24,079
open this really quick visual studio

00:55:22,559 --> 00:55:26,799
code so you can see

00:55:24,079 --> 00:55:27,280
this is just the cli doesn't yet respect

00:55:26,799 --> 00:55:28,799
this

00:55:27,280 --> 00:55:31,119
this is just i wanted to put this

00:55:28,799 --> 00:55:33,040
together to show you visually what

00:55:31,119 --> 00:55:34,799
what you might have these are user

00:55:33,040 --> 00:55:36,480
profiles and they're just represented in

00:55:34,799 --> 00:55:37,520
a single file so you still have types of

00:55:36,480 --> 00:55:39,680
profiles

00:55:37,520 --> 00:55:40,799
and names of profiles but it's all in a

00:55:39,680 --> 00:55:43,119
single document

00:55:40,799 --> 00:55:45,119
which is a little bit easier to share

00:55:43,119 --> 00:55:47,599
and check into source control

00:55:45,119 --> 00:55:49,200
now that's user perspective now also

00:55:47,599 --> 00:55:51,040
within a given project

00:55:49,200 --> 00:55:52,640
so over here on the left we see them in

00:55:51,040 --> 00:55:55,599
project one

00:55:52,640 --> 00:55:57,359
you would have a zoe.config.json live

00:55:55,599 --> 00:55:59,200
there as well

00:55:57,359 --> 00:56:00,640
and you could store information for this

00:55:59,200 --> 00:56:03,680
project so when i

00:56:00,640 --> 00:56:05,119
switch to this project for example i'd

00:56:03,680 --> 00:56:08,799
be working on this

00:56:05,119 --> 00:56:09,599
marbles application but maybe in project

00:56:08,799 --> 00:56:13,359
two

00:56:09,599 --> 00:56:14,079
if i went to that project i'd be working

00:56:13,359 --> 00:56:17,359
on

00:56:14,079 --> 00:56:19,280
this slick oil application right

00:56:17,359 --> 00:56:21,119
and you'll notice that there's some

00:56:19,280 --> 00:56:23,839
information not specified in here

00:56:21,119 --> 00:56:25,599
like uh username and password and

00:56:23,839 --> 00:56:28,079
perhaps that could be stored

00:56:25,599 --> 00:56:29,680
in a user override setting again this

00:56:28,079 --> 00:56:31,280
information would be managed by the

00:56:29,680 --> 00:56:34,160
secure credential store

00:56:31,280 --> 00:56:35,440
so where we're at today profiles managed

00:56:34,160 --> 00:56:39,359
in a file system

00:56:35,440 --> 00:56:42,880
where we're heading single profile

00:56:39,359 --> 00:56:45,920
for user and then also

00:56:42,880 --> 00:56:47,760
project project-based profiles that

00:56:45,920 --> 00:56:49,280
would have precedence over user profiles

00:56:47,760 --> 00:56:52,000
so you can easily check out

00:56:49,280 --> 00:56:53,200
a project and immediately start working

00:56:52,000 --> 00:56:55,599
nothing nothing to do

00:56:53,200 --> 00:56:56,799
so and it's also nice for sharing this

00:56:55,599 --> 00:56:58,640
among team members

00:56:56,799 --> 00:57:00,640
because only one person needs to really

00:56:58,640 --> 00:57:03,760
set it up initially and everyone else

00:57:00,640 --> 00:57:05,280
will get it for free that's all i have

00:57:03,760 --> 00:57:07,200
as far as

00:57:05,280 --> 00:57:08,799
our direction we would now like to open

00:57:07,200 --> 00:57:11,920
it up to polls

00:57:08,799 --> 00:57:12,830
rose feel free you got it okay i'm going

00:57:11,920 --> 00:57:15,960
to relaunch

00:57:12,830 --> 00:57:15,960
[Music]

00:57:17,440 --> 00:57:20,640
go into the first poll

00:57:21,680 --> 00:57:25,119
how would you describe your use of zoe

00:57:23,359 --> 00:57:41,839
cli check all that apply

00:57:25,119 --> 00:57:41,839
it's multiple choice

00:57:44,079 --> 00:57:54,799
still coming through on that one we'll

00:57:46,079 --> 00:57:57,119
have one more question and we'll wrap up

00:57:54,799 --> 00:57:57,119
okay

00:57:58,799 --> 00:58:01,280
and then

00:58:02,319 --> 00:58:13,200
how many zoe cli profiles

00:58:09,200 --> 00:58:15,200
do you manage today in general

00:58:13,200 --> 00:58:16,400
the number of profiles is equal to the

00:58:15,200 --> 00:58:20,559
number of services

00:58:16,400 --> 00:58:20,559
so your best estimate

00:58:21,359 --> 00:58:27,119
whoops that didn't launch here we go you

00:58:24,319 --> 00:58:27,119
should be seeing it now

00:58:29,680 --> 00:58:32,720
yeah so another way of asking this

00:58:31,520 --> 00:58:35,200
question is just

00:58:32,720 --> 00:58:37,680
how many how many different services do

00:58:35,200 --> 00:58:40,960
you plan to access with the zoe cli

00:58:37,680 --> 00:58:40,960
within your organization

00:58:41,280 --> 00:58:45,680
and if you were accessing for example

00:58:43,280 --> 00:58:46,559
two different instances of z osmf that

00:58:45,680 --> 00:58:51,839
would count as

00:58:46,559 --> 00:58:51,839
as two in this case

00:58:54,079 --> 00:58:58,319
okay all right while i'm taking the

00:58:57,680 --> 00:59:05,839
screen

00:58:58,319 --> 00:59:05,839
back mike there is a question in the q a

00:59:07,359 --> 00:59:10,799
so the question uh from sean thanks for

00:59:10,000 --> 00:59:13,520
the question sean

00:59:10,799 --> 00:59:15,359
is with upcoming high availability

00:59:13,520 --> 00:59:18,319
initiatives for zoe servers

00:59:15,359 --> 00:59:19,280
what can users expect for how this

00:59:18,319 --> 00:59:22,640
impacts

00:59:19,280 --> 00:59:26,240
the cli will it just work

00:59:22,640 --> 00:59:27,040
or will there be changes to profiles or

00:59:26,240 --> 00:59:30,000
prereqs

00:59:27,040 --> 00:59:32,640
of server configuration things to be

00:59:30,000 --> 00:59:34,000
aware of for differences between lpars

00:59:32,640 --> 00:59:36,160
that's a good question and certainly

00:59:34,000 --> 00:59:39,760
something we probably need

00:59:36,160 --> 00:59:40,160
research on to confirm but i'm hoping

00:59:39,760 --> 00:59:43,280
that

00:59:40,160 --> 00:59:45,359
with the high availability configuration

00:59:43,280 --> 00:59:48,720
of the api mediation layer

00:59:45,359 --> 00:59:51,280
that that would be handled within

00:59:48,720 --> 00:59:53,680
that that level of technology but i'm

00:59:51,280 --> 00:59:55,040
looking for the api ml squad to advise

00:59:53,680 --> 00:59:58,160
if we would need any

00:59:55,040 --> 01:00:01,040
any changes specifically with the with

00:59:58,160 --> 01:00:02,559
the cli um

01:00:01,040 --> 01:00:04,640
i hope that hope that answers that

01:00:02,559 --> 01:00:07,200
question it's um

01:00:04,640 --> 01:00:07,680
i know the api ml squad that is one of

01:00:07,200 --> 01:00:10,319
their

01:00:07,680 --> 01:00:11,440
focus focus areas in the uh in the

01:00:10,319 --> 01:00:13,599
current pi

01:00:11,440 --> 01:00:15,200
so that's typically how a lot of these

01:00:13,599 --> 01:00:16,079
things emerge is that you look for the

01:00:15,200 --> 01:00:17,839
cli to

01:00:16,079 --> 01:00:19,359
somewhat follow the capabilities and

01:00:17,839 --> 01:00:20,559
enhancements offered by the api

01:00:19,359 --> 01:00:23,280
mediation layer

01:00:20,559 --> 01:00:25,440
certainly how single sign-on was ruled

01:00:23,280 --> 01:00:25,440
out

01:00:26,000 --> 01:00:30,480
all right thanks mike all clear on the q

01:00:28,319 --> 01:00:30,480
a

01:00:32,480 --> 01:00:36,240
yep i i see no more questions okay and

01:00:35,119 --> 01:00:39,440
you're seeing the

01:00:36,240 --> 01:00:39,440
uh presentation again

01:00:39,520 --> 01:00:42,000
confirm

01:00:42,960 --> 01:00:48,160
okay super okay just a couple quick

01:00:45,680 --> 01:00:50,640
slides folks before we wrap this up

01:00:48,160 --> 01:00:51,200
uh we want you to be aware of a couple

01:00:50,640 --> 01:00:54,000
dates

01:00:51,200 --> 01:00:56,000
uh we've held one zoe system demo in

01:00:54,000 --> 01:00:58,319
this current pi that we're in we have

01:00:56,000 --> 01:01:00,319
three more scheduled for this pi at

01:00:58,319 --> 01:01:02,720
approximately these dates

01:01:00,319 --> 01:01:04,160
uh the next zoe pi planning is

01:01:02,720 --> 01:01:07,200
tentatively scheduled

01:01:04,160 --> 01:01:09,359
for january 7th through 8th of uh

01:01:07,200 --> 01:01:11,920
through eighth of course these dates are

01:01:09,359 --> 01:01:14,880
subject to change those dates have not

01:01:11,920 --> 01:01:18,480
been finalized yet

01:01:14,880 --> 01:01:20,559
we have the share replay that

01:01:18,480 --> 01:01:22,640
bruce mentioned earlier we'll send that

01:01:20,559 --> 01:01:24,640
link out with the recording

01:01:22,640 --> 01:01:26,400
and typically there are zoe topics

01:01:24,640 --> 01:01:30,079
presented at the various

01:01:26,400 --> 01:01:33,200
um from the various uh contributors at

01:01:30,079 --> 01:01:36,640
devops.com so certainly um

01:01:33,200 --> 01:01:39,520
check that out um

01:01:36,640 --> 01:01:40,079
let's see we also the best way to stay

01:01:39,520 --> 01:01:42,960
in step

01:01:40,079 --> 01:01:44,559
with the zoe squad meetings uh the zoe

01:01:42,960 --> 01:01:47,119
system demos and pi

01:01:44,559 --> 01:01:49,040
planning is to please either bookmark or

01:01:47,119 --> 01:01:50,960
add the zoe calendar to your own

01:01:49,040 --> 01:01:53,520
personal calendar view

01:01:50,960 --> 01:01:55,119
those links are provided in here and

01:01:53,520 --> 01:01:56,559
again we'll send them out with the

01:01:55,119 --> 01:01:58,720
recording

01:01:56,559 --> 01:02:00,640
finally if you're looking to engage with

01:01:58,720 --> 01:02:04,799
us we are all hanging out

01:02:00,640 --> 01:02:06,880
on slack openmainframeproject.slack.com

01:02:04,799 --> 01:02:08,799
popular channels are listed here for

01:02:06,880 --> 01:02:11,920
example you'll find mike bauer

01:02:08,799 --> 01:02:12,799
on zoe cli zoe user probably zoe

01:02:11,920 --> 01:02:16,480
explorer

01:02:12,799 --> 01:02:19,680
and the general channel and you'll find

01:02:16,480 --> 01:02:22,160
me on the zoe onboarding channel

01:02:19,680 --> 01:02:23,440
and then finally make sure you mark your

01:02:22,160 --> 01:02:25,680
calendars for our next

01:02:23,440 --> 01:02:29,599
webinar scheduled for wednesday january

01:02:25,680 --> 01:02:32,400
20th same time 11 30 eastern

01:02:29,599 --> 01:02:33,599
when in doubt go to the open mainframe

01:02:32,400 --> 01:02:36,319
project events

01:02:33,599 --> 01:02:36,960
area and we have it circled here you

01:02:36,319 --> 01:02:40,400
should have

01:02:36,960 --> 01:02:43,359
the the upcoming webinar located

01:02:40,400 --> 01:02:44,880
there registration is open for that

01:02:43,359 --> 01:02:46,160
webinar in january so

01:02:44,880 --> 01:02:47,920
please feel free to go ahead and

01:02:46,160 --> 01:02:49,280
register for that we look forward to

01:02:47,920 --> 01:02:52,799
seeing you

01:02:49,280 --> 01:02:54,880
and i think that does it so thank you so

01:02:52,799 --> 01:02:55,680
much for joining us we hope you found it

01:02:54,880 --> 01:02:58,319
informative

01:02:55,680 --> 01:02:59,440
special thanks to joe devlin and mike

01:02:58,319 --> 01:03:02,720
bauer

01:02:59,440 --> 01:03:03,680
for our focus presentations we wish you

01:03:02,720 --> 01:03:07,760
all a great

01:03:03,680 --> 01:03:07,760
quarter and be well

01:03:08,160 --> 01:03:11,280
thank you so much everybody thank you to

01:03:10,000 --> 01:03:13,440
all our presenters

01:03:11,280 --> 01:03:14,960
and um this will be up on youtube

01:03:13,440 --> 01:03:16,799
tomorrow i will send an email out with

01:03:14,960 --> 01:03:20,319
pulling questions to everybody so look

01:03:16,799 --> 01:03:20,319
forward to that have a great day

01:03:21,720 --> 01:03:24,720

YouTube URL: https://www.youtube.com/watch?v=GbAFO5vzBhw


