Title: COBOL Training Course
Publication date: 2020-12-16
Playlist: OMP Webinars
Description: 
	Most financial organizations, banks, insurance companies, retailers, and governments need systems that must flawlessly handle huge volumes of transactions every day. Mainframes have been quietly managing this process for decades as their reliability, availability, security, scalability, and performance are unparalleled. While these core systems run Java, Python, and other languages, part of these core systems is COBOL, a reliable, proven programming language that has helped run some of the most mission-critical services applications at the worldâ€™s largest companies. The OMP COBOL Programming Course aims to educate and train the next generation of COBOLers.

Join us to learn more about this exciting project!
Captions: 
	00:00:06,160 --> 00:00:09,760
hello everybody and welcome to the

00:00:07,759 --> 00:00:11,920
monthly open mainframe project webinar

00:00:09,760 --> 00:00:13,040
today we will be talking about with the

00:00:11,920 --> 00:00:14,880
cobol programming

00:00:13,040 --> 00:00:16,720
about the school ball programming course

00:00:14,880 --> 00:00:18,800
and i've got the team here

00:00:16,720 --> 00:00:20,160
um so if you have any questions

00:00:18,800 --> 00:00:22,080
throughout the presentation

00:00:20,160 --> 00:00:24,160
feel free to put them in the chat or the

00:00:22,080 --> 00:00:25,519
q a and we will answer them

00:00:24,160 --> 00:00:27,279
and with that i'm going to go ahead and

00:00:25,519 --> 00:00:29,439
hand it over to the team guys go ahead

00:00:27,279 --> 00:00:31,599
and introduce yourself

00:00:29,439 --> 00:00:33,520
thank you so much chris for putting this

00:00:31,599 --> 00:00:35,200
together and giving us this opportunity

00:00:33,520 --> 00:00:37,920
to share about the cobalt programming

00:00:35,200 --> 00:00:40,960
course my name is sadashina srinivasan

00:00:37,920 --> 00:00:43,520
i work for ibm as a program manager for

00:00:40,960 --> 00:00:44,320
our ibm z influencer team so what that

00:00:43,520 --> 00:00:46,640
means

00:00:44,320 --> 00:00:48,160
is working on all fun activities and

00:00:46,640 --> 00:00:50,399
engagements around

00:00:48,160 --> 00:00:52,879
uh developer ecosystem and also our

00:00:50,399 --> 00:00:55,760
client skills engagement

00:00:52,879 --> 00:00:56,800
mike do you want to go next uh thanks

00:00:55,760 --> 00:00:58,879
sadarshna

00:00:56,800 --> 00:01:00,719
hello everyone i'm michael bauer i'm a

00:00:58,879 --> 00:01:03,920
product owner here at broadcom i work

00:01:00,719 --> 00:01:06,159
primarily on our bright side solution

00:01:03,920 --> 00:01:07,520
in the open source community i

00:01:06,159 --> 00:01:09,920
contribute to both the

00:01:07,520 --> 00:01:11,680
zoe and cobalt programming course

00:01:09,920 --> 00:01:14,799
projects underneath the

00:01:11,680 --> 00:01:17,600
open mainframe project organization

00:01:14,799 --> 00:01:18,799
i'm over to you paul and i'm paul newton

00:01:17,600 --> 00:01:21,119
i'm a consulting i.t

00:01:18,799 --> 00:01:22,080
specialist with ibm been with ibm for

00:01:21,119 --> 00:01:24,320
about 20 years

00:01:22,080 --> 00:01:25,600
and was in industry for 20 years before

00:01:24,320 --> 00:01:29,840
i joined ibm

00:01:25,600 --> 00:01:32,560
i helped get the the cobalt programming

00:01:29,840 --> 00:01:33,840
course started and then others have

00:01:32,560 --> 00:01:36,479
taken over

00:01:33,840 --> 00:01:36,479
so that's me

00:01:38,720 --> 00:01:43,119
all right so um mike do you want to go

00:01:40,799 --> 00:01:45,439
on to the next slide and we'll

00:01:43,119 --> 00:01:47,759
talk about sort of the journey and the

00:01:45,439 --> 00:01:49,680
the genesis of this cobol programming

00:01:47,759 --> 00:01:52,640
course that we're going to talk about

00:01:49,680 --> 00:01:54,720
um this is a great question why develop

00:01:52,640 --> 00:01:58,719
a cobol programming course

00:01:54,720 --> 00:02:02,000
um when this all got started

00:01:58,719 --> 00:02:04,719
uh it was all about you know let's let's

00:02:02,000 --> 00:02:05,920
bring together a new cobol course and

00:02:04,719 --> 00:02:08,399
this is well before

00:02:05,920 --> 00:02:10,319
2020 happened let's work on a cobalt

00:02:08,399 --> 00:02:11,360
course that also brings in some of the

00:02:10,319 --> 00:02:14,640
modern tooling

00:02:11,360 --> 00:02:16,319
and weaves in you know things like vs

00:02:14,640 --> 00:02:17,840
code and we'll talk about all that more

00:02:16,319 --> 00:02:21,040
in detail later

00:02:17,840 --> 00:02:22,800
but let me just talk about take a moment

00:02:21,040 --> 00:02:24,480
here step back and talk about skill

00:02:22,800 --> 00:02:25,440
shortage and we talk about skill

00:02:24,480 --> 00:02:28,160
shortage and co

00:02:25,440 --> 00:02:30,720
in cobol and in you know the ibm z space

00:02:28,160 --> 00:02:32,560
in general and

00:02:30,720 --> 00:02:34,400
look at look at here look at what this

00:02:32,560 --> 00:02:37,200
chart says there has always

00:02:34,400 --> 00:02:39,040
been skill shortage in manufacturing

00:02:37,200 --> 00:02:42,720
cyber security is seeing

00:02:39,040 --> 00:02:45,040
um you know really high skill shortage

00:02:42,720 --> 00:02:45,920
at the current moment there's lots of

00:02:45,040 --> 00:02:48,959
opportunities

00:02:45,920 --> 00:02:50,480
that are going unfilled right so it is

00:02:48,959 --> 00:02:52,800
not something unique

00:02:50,480 --> 00:02:54,720
to um the mainframe space or to

00:02:52,800 --> 00:02:55,440
enterprise computing as we would call it

00:02:54,720 --> 00:02:57,920
or

00:02:55,440 --> 00:02:59,200
um anything specific to cobol that you

00:02:57,920 --> 00:03:01,200
know we need to

00:02:59,200 --> 00:03:02,800
make make such a big deal of it but

00:03:01,200 --> 00:03:06,640
nonetheless 2020

00:03:02,800 --> 00:03:09,440
has been that year for cobol right um

00:03:06,640 --> 00:03:11,200
so back to my story about how we got

00:03:09,440 --> 00:03:14,319
started to on all this

00:03:11,200 --> 00:03:16,480
on this journey the fall of 2019 we

00:03:14,319 --> 00:03:18,720
wanted to be able to bring together

00:03:16,480 --> 00:03:19,840
a cobol course that resonates with that

00:03:18,720 --> 00:03:22,000
next generation

00:03:19,840 --> 00:03:23,760
of cobolers so that we could bring that

00:03:22,000 --> 00:03:28,080
next generation of talent

00:03:23,760 --> 00:03:29,760
into this space um mike the next chart

00:03:28,080 --> 00:03:31,360
and as we were working on it and you

00:03:29,760 --> 00:03:32,080
heard paul say that he's part of the

00:03:31,360 --> 00:03:34,640
team

00:03:32,080 --> 00:03:35,920
that uh worked on building that cobalt

00:03:34,640 --> 00:03:38,159
course and we were

00:03:35,920 --> 00:03:41,280
well on our way working on getting the

00:03:38,159 --> 00:03:43,920
content it was a collaborative project

00:03:41,280 --> 00:03:45,440
and boom come march i think i think it

00:03:43,920 --> 00:03:49,360
was march sometime

00:03:45,440 --> 00:03:52,000
um that the new jersey governor said

00:03:49,360 --> 00:03:52,879
there was you know lack of cobalt

00:03:52,000 --> 00:03:56,000
experience

00:03:52,879 --> 00:03:58,400
um in in the workforce so

00:03:56,000 --> 00:03:59,439
and that was that was it that was the

00:03:58,400 --> 00:04:01,439
biggest ever

00:03:59,439 --> 00:04:02,799
thing that happened and then so many

00:04:01,439 --> 00:04:05,760
different um

00:04:02,799 --> 00:04:06,560
articles and uh you know news around

00:04:05,760 --> 00:04:09,360
cobalt

00:04:06,560 --> 00:04:09,840
the lack of skills in cobalt space um

00:04:09,360 --> 00:04:12,000
and

00:04:09,840 --> 00:04:13,760
you know why is cobalt even around so

00:04:12,000 --> 00:04:15,760
many questions around cobalt keep coming

00:04:13,760 --> 00:04:18,000
up

00:04:15,760 --> 00:04:19,840
when when the question of why is cobalt

00:04:18,000 --> 00:04:21,919
still around or what is cobalt still

00:04:19,840 --> 00:04:25,360
doing

00:04:21,919 --> 00:04:27,680
one comment that professor tuck from arc

00:04:25,360 --> 00:04:30,880
made comes to mind and it is a powerful

00:04:27,680 --> 00:04:32,479
statement a programming language is not

00:04:30,880 --> 00:04:35,840
a fashion statement

00:04:32,479 --> 00:04:36,240
right it you do you use it because it

00:04:35,840 --> 00:04:38,960
does

00:04:36,240 --> 00:04:40,080
the job and it does it really well and

00:04:38,960 --> 00:04:42,080
that is cobalt

00:04:40,080 --> 00:04:44,080
cobalt does what it does which is

00:04:42,080 --> 00:04:47,440
business processing

00:04:44,080 --> 00:04:50,639
business logic processing simply

00:04:47,440 --> 00:04:50,960
beautifully and powerfully so that is

00:04:50,639 --> 00:04:53,600
why

00:04:50,960 --> 00:04:54,000
it is here it has been here and i want

00:04:53,600 --> 00:04:56,720
to say

00:04:54,000 --> 00:04:58,080
it will be here driving the world's

00:04:56,720 --> 00:05:00,320
economy and i know

00:04:58,080 --> 00:05:02,800
paul is nodding his head even though

00:05:00,320 --> 00:05:06,880
he's off camera

00:05:02,800 --> 00:05:09,840
next slide mike so we got to working

00:05:06,880 --> 00:05:11,360
on this cobalt course as a collaborative

00:05:09,840 --> 00:05:14,320
effort as i mentioned

00:05:11,360 --> 00:05:15,039
with the with the american college a few

00:05:14,320 --> 00:05:18,080
clients

00:05:15,039 --> 00:05:21,120
and ibm all coming together bringing our

00:05:18,080 --> 00:05:24,400
bringing their smes and having a

00:05:21,120 --> 00:05:27,520
dedicated month-long workshop

00:05:24,400 --> 00:05:29,520
workshop that you know focused on what

00:05:27,520 --> 00:05:31,199
what would this next generation cobalt

00:05:29,520 --> 00:05:35,360
course look like

00:05:31,199 --> 00:05:37,840
um and when we were busy working on it

00:05:35,360 --> 00:05:39,919
the the news about cobol and everybody

00:05:37,840 --> 00:05:40,639
wanting to learn cobol was the next best

00:05:39,919 --> 00:05:43,919
thing

00:05:40,639 --> 00:05:47,360
so we had to quickly land this course

00:05:43,919 --> 00:05:50,240
for the large community of learners and

00:05:47,360 --> 00:05:52,240
a big big big shout out and thanks to

00:05:50,240 --> 00:05:53,199
john murdick and the open mainframe

00:05:52,240 --> 00:05:56,560
project

00:05:53,199 --> 00:05:59,360
that we were able to land this course

00:05:56,560 --> 00:06:00,880
on april 14th as an open mainframe

00:05:59,360 --> 00:06:03,680
project

00:06:00,880 --> 00:06:05,759
ready and available for the whole large

00:06:03,680 --> 00:06:08,479
open source community

00:06:05,759 --> 00:06:10,400
to not just learn cobalt but also

00:06:08,479 --> 00:06:12,639
contribute to the content and i know

00:06:10,400 --> 00:06:15,840
mike is going to talk a lot about that

00:06:12,639 --> 00:06:18,080
um so i think i will pause here

00:06:15,840 --> 00:06:19,440
with um with this amazing picture there

00:06:18,080 --> 00:06:21,759
you see paul newton

00:06:19,440 --> 00:06:22,560
and the rest of our team that was part

00:06:21,759 --> 00:06:25,280
of the

00:06:22,560 --> 00:06:25,600
creation of this cobalt course that you

00:06:25,280 --> 00:06:27,759
see

00:06:25,600 --> 00:06:30,319
and have available on open mainframe

00:06:27,759 --> 00:06:30,319
project

00:06:31,120 --> 00:06:38,319
any questions or uh not yet i don't see

00:06:35,199 --> 00:06:38,319
but mike do you want to

00:06:38,479 --> 00:06:41,600
sure sue darshan i can pick it up from

00:06:40,479 --> 00:06:44,400
there thank you

00:06:41,600 --> 00:06:45,039
thank you so the next topic i want to

00:06:44,400 --> 00:06:48,479
discuss

00:06:45,039 --> 00:06:50,639
is what would you learn by going through

00:06:48,479 --> 00:06:52,880
the course content and again i

00:06:50,639 --> 00:06:53,680
feel encouraged to engage in the chat

00:06:52,880 --> 00:06:55,680
i'm sure

00:06:53,680 --> 00:06:57,840
paul and sudarshan will stop me if there

00:06:55,680 --> 00:07:02,720
are questions along the way

00:06:57,840 --> 00:07:04,639
so let's get started um the course

00:07:02,720 --> 00:07:05,759
is currently broken down into two

00:07:04,639 --> 00:07:07,840
different books

00:07:05,759 --> 00:07:08,880
the first one is focused on getting

00:07:07,840 --> 00:07:11,919
started

00:07:08,880 --> 00:07:12,720
in part one of that course we introduced

00:07:11,919 --> 00:07:14,720
cobol

00:07:12,720 --> 00:07:17,039
specifically with reference to its use

00:07:14,720 --> 00:07:19,840
in these enterprise systems

00:07:17,039 --> 00:07:21,199
we cover what cobalt is how cobalt is

00:07:19,840 --> 00:07:24,080
being used today

00:07:21,199 --> 00:07:25,919
and why you should care about it we also

00:07:24,080 --> 00:07:27,360
introduced the tooling that is leveraged

00:07:25,919 --> 00:07:30,720
throughout the course

00:07:27,360 --> 00:07:32,560
we need various tools to interact with

00:07:30,720 --> 00:07:33,039
the mainframe interact with cobalt so we

00:07:32,560 --> 00:07:36,560
can

00:07:33,039 --> 00:07:39,120
offer hands-on learning opportunity

00:07:36,560 --> 00:07:41,440
hands-on learning opportunities we cover

00:07:39,120 --> 00:07:44,639
the installation configuration

00:07:41,440 --> 00:07:45,520
and usage of visual studio code zoe

00:07:44,639 --> 00:07:48,879
explore

00:07:45,520 --> 00:07:52,000
ibm z open editor broadcom code for z

00:07:48,879 --> 00:07:54,080
zoe cli and cli plugins and i'll

00:07:52,000 --> 00:07:55,440
briefly touch on what each of those

00:07:54,080 --> 00:07:58,479
components are

00:07:55,440 --> 00:08:00,000
and why they are important to this

00:07:58,479 --> 00:08:02,800
course

00:08:00,000 --> 00:08:03,360
so visual studio code is a lightweight

00:08:02,800 --> 00:08:05,680
fast

00:08:03,360 --> 00:08:06,720
and free text editor developed by

00:08:05,680 --> 00:08:08,800
microsoft

00:08:06,720 --> 00:08:10,960
i'll also note that it is built from

00:08:08,800 --> 00:08:11,440
their open source repository so that the

00:08:10,960 --> 00:08:14,960
broader

00:08:11,440 --> 00:08:16,639
community can help develop that product

00:08:14,960 --> 00:08:18,000
visual studio code has been well

00:08:16,639 --> 00:08:20,800
received by the

00:08:18,000 --> 00:08:21,919
broader community for example based on a

00:08:20,800 --> 00:08:25,039
stack overflow

00:08:21,919 --> 00:08:27,840
developer survey i read in 2016

00:08:25,039 --> 00:08:30,000
bs code only ranked 13th among popular

00:08:27,840 --> 00:08:31,840
text editors and ides with about seven

00:08:30,000 --> 00:08:34,159
percent of respondents using it

00:08:31,840 --> 00:08:35,680
but it had just hit the market um not

00:08:34,159 --> 00:08:38,719
too far before that

00:08:35,680 --> 00:08:40,479
in 2018 it moved to the top spot it's

00:08:38,719 --> 00:08:43,039
the most used text editor

00:08:40,479 --> 00:08:44,480
or ide with about 35 percent of the

00:08:43,039 --> 00:08:47,680
response using it

00:08:44,480 --> 00:08:48,320
and in 2019 the survey showed over 50

00:08:47,680 --> 00:08:51,920
percent

00:08:48,320 --> 00:08:52,720
of the respondents using it it felt like

00:08:51,920 --> 00:08:56,399
a good choice

00:08:52,720 --> 00:08:58,320
to use in this project because it is

00:08:56,399 --> 00:08:59,680
widely adopted by the development

00:08:58,320 --> 00:09:02,720
community and it is

00:08:59,680 --> 00:09:03,600
also freely accessible for folks to use

00:09:02,720 --> 00:09:05,519
which was

00:09:03,600 --> 00:09:07,200
important in the development of this

00:09:05,519 --> 00:09:10,640
course

00:09:07,200 --> 00:09:12,880
um the zoe explorer is an open source

00:09:10,640 --> 00:09:15,440
visual studio code extension

00:09:12,880 --> 00:09:19,040
so at its core vs code it's a

00:09:15,440 --> 00:09:22,640
lightweight text editor but it can be

00:09:19,040 --> 00:09:24,480
expanded to meet the needs

00:09:22,640 --> 00:09:26,240
of various developers through these

00:09:24,480 --> 00:09:28,160
extensions

00:09:26,240 --> 00:09:29,680
so we explore streamlines interaction

00:09:28,160 --> 00:09:32,800
with mainframe data sets

00:09:29,680 --> 00:09:34,959
uss files and jobs it is also one of the

00:09:32,800 --> 00:09:38,959
most popular components of zoe

00:09:34,959 --> 00:09:41,760
exceeding 24 000 unique installations

00:09:38,959 --> 00:09:43,680
but a lot of those installations are

00:09:41,760 --> 00:09:45,600
probably for

00:09:43,680 --> 00:09:47,600
going through this course as well so

00:09:45,600 --> 00:09:51,120
it's um it's synergistic

00:09:47,600 --> 00:09:52,240
zoe as well as this cobalt programming

00:09:51,120 --> 00:09:55,360
course

00:09:52,240 --> 00:09:56,720
now in addition to zoe explore a number

00:09:55,360 --> 00:09:58,880
of other extensions

00:09:56,720 --> 00:10:01,040
for mainframe interaction have emerged

00:09:58,880 --> 00:10:03,279
on the vs code marketplace

00:10:01,040 --> 00:10:04,800
one such extension included in this

00:10:03,279 --> 00:10:07,839
course is ibm

00:10:04,800 --> 00:10:08,399
z open editor this extension offers a

00:10:07,839 --> 00:10:11,600
free

00:10:08,399 --> 00:10:14,640
modern editing experience for ibm z

00:10:11,600 --> 00:10:15,279
enterprise languages primarily in this

00:10:14,640 --> 00:10:16,959
course

00:10:15,279 --> 00:10:20,480
it is an extension that provides

00:10:16,959 --> 00:10:23,440
language support for cobalt

00:10:20,480 --> 00:10:24,800
broadcom's code for z is a mainframe

00:10:23,440 --> 00:10:28,240
extension package

00:10:24,800 --> 00:10:30,240
for visual studio code the code for z

00:10:28,240 --> 00:10:32,320
package contains extensions which

00:10:30,240 --> 00:10:33,760
provide language support for cobol and

00:10:32,320 --> 00:10:36,399
high level assembler

00:10:33,760 --> 00:10:38,480
a debugger for cobalt programs as well

00:10:36,399 --> 00:10:40,240
as tools which enable developers to

00:10:38,480 --> 00:10:43,279
access mainframe data sets

00:10:40,240 --> 00:10:45,200
and ca endeavor code repositories using

00:10:43,279 --> 00:10:47,360
the vs code interface

00:10:45,200 --> 00:10:49,200
the primary extension leverage from this

00:10:47,360 --> 00:10:51,279
package in this course

00:10:49,200 --> 00:10:53,120
is the free and open source cobalt

00:10:51,279 --> 00:10:55,440
language support extension

00:10:53,120 --> 00:10:56,399
it offers similar language support for

00:10:55,440 --> 00:10:59,040
cobol

00:10:56,399 --> 00:11:00,079
and this gives learners a choice in the

00:10:59,040 --> 00:11:02,320
tooling

00:11:00,079 --> 00:11:03,600
for this course and all of this is is

00:11:02,320 --> 00:11:05,839
freely available

00:11:03,600 --> 00:11:08,640
whether you choose to use the the open

00:11:05,839 --> 00:11:11,600
editor or the code for z package

00:11:08,640 --> 00:11:13,120
you will be able to learn cobalt through

00:11:11,600 --> 00:11:17,600
this course

00:11:13,120 --> 00:11:20,240
next is the zoe cli and zoe cli plugins

00:11:17,600 --> 00:11:20,959
cli stands for command line interface

00:11:20,240 --> 00:11:22,640
command line

00:11:20,959 --> 00:11:24,399
interfaces are very useful for

00:11:22,640 --> 00:11:25,760
developing automation

00:11:24,399 --> 00:11:27,600
you can quickly explore the

00:11:25,760 --> 00:11:30,079
functionality of a cli

00:11:27,600 --> 00:11:30,880
interactively and then easily abstract

00:11:30,079 --> 00:11:33,360
commands

00:11:30,880 --> 00:11:35,360
into more complex and useful scripts

00:11:33,360 --> 00:11:37,839
really i view each command

00:11:35,360 --> 00:11:38,800
as a building block upon which you can

00:11:37,839 --> 00:11:42,000
develop more

00:11:38,800 --> 00:11:43,440
complex and specific automation to meet

00:11:42,000 --> 00:11:46,480
your needs

00:11:43,440 --> 00:11:49,519
the key with the cli is that the zoe cli

00:11:46,480 --> 00:11:50,480
is a bridge tool between the distributed

00:11:49,519 --> 00:11:53,440
systems

00:11:50,480 --> 00:11:54,160
and the mainframe i'll also note that

00:11:53,440 --> 00:11:56,480
the

00:11:54,160 --> 00:11:57,760
zoe cli is extensible through plugins

00:11:56,480 --> 00:11:59,680
just like vs code

00:11:57,760 --> 00:12:01,600
is extensible through extensions and

00:11:59,680 --> 00:12:02,720
that has been well adopted there are

00:12:01,600 --> 00:12:05,760
currently 25

00:12:02,720 --> 00:12:07,760
conformant wcli plugins and this enables

00:12:05,760 --> 00:12:11,200
access to a wide variety of mainframe

00:12:07,760 --> 00:12:13,519
subsystems and products as a bridge tool

00:12:11,200 --> 00:12:15,279
it enables the use of a plethora of open

00:12:13,519 --> 00:12:17,040
source tools for the mainframe

00:12:15,279 --> 00:12:18,800
for example pick your favorite language

00:12:17,040 --> 00:12:20,800
or open source tool and you can now

00:12:18,800 --> 00:12:23,040
leverage it for mainframe development

00:12:20,800 --> 00:12:24,880
just in this case we're picking maybe

00:12:23,040 --> 00:12:26,240
perhaps visual studio code is one of our

00:12:24,880 --> 00:12:28,320
favorite distributed

00:12:26,240 --> 00:12:29,839
uh text editors and now we're leveraging

00:12:28,320 --> 00:12:31,920
it for

00:12:29,839 --> 00:12:34,079
uh mainframe development but it goes

00:12:31,920 --> 00:12:35,360
beyond that for example want to develop

00:12:34,079 --> 00:12:37,519
automation in python

00:12:35,360 --> 00:12:39,360
do you want to write test the node you

00:12:37,519 --> 00:12:42,000
want to run jenkins pipelines for

00:12:39,360 --> 00:12:43,920
continuous integration maybe use open

00:12:42,000 --> 00:12:45,200
source testing frameworks like mocha or

00:12:43,920 --> 00:12:47,360
facebook's chest

00:12:45,200 --> 00:12:49,200
or you want to leverage code quality

00:12:47,360 --> 00:12:50,800
tools like sonar cube

00:12:49,200 --> 00:12:52,880
all of that is made possible with the

00:12:50,800 --> 00:12:54,880
cli acting as a bridge tool

00:12:52,880 --> 00:12:56,000
and you get some experience hands-on

00:12:54,880 --> 00:12:59,200
experience with the

00:12:56,000 --> 00:13:01,680
zoe cli as part of this course

00:12:59,200 --> 00:13:03,519
in this course and for mainframe cobalt

00:13:01,680 --> 00:13:05,680
apps the zoe cli

00:13:03,519 --> 00:13:07,760
can be leveraged to automate the build

00:13:05,680 --> 00:13:10,639
deployment and testing processes

00:13:07,760 --> 00:13:12,720
and that is exactly how it's leveraged

00:13:10,639 --> 00:13:16,160
within this course

00:13:12,720 --> 00:13:18,720
so once we have our tooling set up

00:13:16,160 --> 00:13:20,000
from part one we dive into learning

00:13:18,720 --> 00:13:23,120
about cobol

00:13:20,000 --> 00:13:23,839
in part two throughout the course we

00:13:23,120 --> 00:13:26,959
leverage

00:13:23,839 --> 00:13:30,240
our tooling to complete hands-on lab

00:13:26,959 --> 00:13:32,240
exercises in the first chapter of part

00:13:30,240 --> 00:13:33,680
two we introduced the basics of cobol

00:13:32,240 --> 00:13:38,000
syntax

00:13:33,680 --> 00:13:38,800
for example we discuss and answer these

00:13:38,000 --> 00:13:40,480
questions

00:13:38,800 --> 00:13:41,920
what are the coding rules in reference

00:13:40,480 --> 00:13:44,240
format

00:13:41,920 --> 00:13:46,079
what is the structure of cobol what are

00:13:44,240 --> 00:13:48,800
cobol reserved words

00:13:46,079 --> 00:13:50,880
what is a cobol statement what is the

00:13:48,800 --> 00:13:53,600
meaning of a scope terminator

00:13:50,880 --> 00:13:55,040
what is a cobalt sentence paragraph and

00:13:53,600 --> 00:13:58,480
section

00:13:55,040 --> 00:14:00,399
in the chapters labs you will learn how

00:13:58,480 --> 00:14:02,720
to run a simple cobalt hello world

00:14:00,399 --> 00:14:04,240
program in vs code a very simple getting

00:14:02,720 --> 00:14:06,399
started exercise

00:14:04,240 --> 00:14:08,160
and then automate the job submission to

00:14:06,399 --> 00:14:11,680
compile link and run the program

00:14:08,160 --> 00:14:12,639
using the zoe cli in the data division

00:14:11,680 --> 00:14:15,279
chapter

00:14:12,639 --> 00:14:16,240
cobo variables and program processing is

00:14:15,279 --> 00:14:19,040
covered

00:14:16,240 --> 00:14:20,720
it focuses on variables moving literals

00:14:19,040 --> 00:14:22,079
into variables and then writing the

00:14:20,720 --> 00:14:25,199
variable content

00:14:22,079 --> 00:14:26,959
using the cobalt display statement in

00:14:25,199 --> 00:14:29,519
the file handling chapter

00:14:26,959 --> 00:14:31,360
we introduce learners to reading records

00:14:29,519 --> 00:14:34,560
from files

00:14:31,360 --> 00:14:37,760
placing that content into variables

00:14:34,560 --> 00:14:41,519
moving variables to output variables and

00:14:37,760 --> 00:14:43,839
writing those to a different file

00:14:41,519 --> 00:14:46,240
in the program structure chapter we

00:14:43,839 --> 00:14:46,959
highlight key techniques within the kobo

00:14:46,240 --> 00:14:48,720
language

00:14:46,959 --> 00:14:50,240
that allow you to write well-structured

00:14:48,720 --> 00:14:52,880
programs

00:14:50,240 --> 00:14:53,519
the file output chapter focuses on

00:14:52,880 --> 00:14:56,000
designing

00:14:53,519 --> 00:14:57,760
a structured layout that is easily easy

00:14:56,000 --> 00:14:59,680
to read and understand

00:14:57,760 --> 00:15:01,600
this involves things like column

00:14:59,680 --> 00:15:04,320
headings and variable alignment

00:15:01,600 --> 00:15:06,000
numeric format currency format things of

00:15:04,320 --> 00:15:07,680
that nature

00:15:06,000 --> 00:15:09,839
the chapters on conditional and

00:15:07,680 --> 00:15:11,839
arithmetic expressions

00:15:09,839 --> 00:15:13,360
it's fairly self-explanatory but within

00:15:11,839 --> 00:15:15,279
those sections they cover

00:15:13,360 --> 00:15:16,560
several topics through explanations

00:15:15,279 --> 00:15:19,040
examples and

00:15:16,560 --> 00:15:20,000
i want to highlight hands-on exercises

00:15:19,040 --> 00:15:23,199
each one

00:15:20,000 --> 00:15:27,199
of these chapters in part two

00:15:23,199 --> 00:15:30,160
they all end with a lab where you will

00:15:27,199 --> 00:15:31,360
have a hands-on opportunity to test your

00:15:30,160 --> 00:15:34,320
learning

00:15:31,360 --> 00:15:36,399
and then the course continues with a

00:15:34,320 --> 00:15:38,000
chapter covering data types and data

00:15:36,399 --> 00:15:40,399
representation in cobol

00:15:38,000 --> 00:15:42,560
and concludes with discussing uh

00:15:40,399 --> 00:15:45,600
intrinsic and built-in functions

00:15:42,560 --> 00:15:47,680
and over time um as the cobalt

00:15:45,600 --> 00:15:50,079
language has evolved and new versions

00:15:47,680 --> 00:15:52,240
have been released we have seen

00:15:50,079 --> 00:15:54,480
more new and interesting intrinsic

00:15:52,240 --> 00:15:57,360
functions this is actually one of my

00:15:54,480 --> 00:15:58,320
personal favorite chapters of the lab so

00:15:57,360 --> 00:16:02,399
it's a little treat

00:15:58,320 --> 00:16:04,959
at the end to look forward to um

00:16:02,399 --> 00:16:06,560
and again just to highlight every every

00:16:04,959 --> 00:16:09,279
chapter in part two

00:16:06,560 --> 00:16:10,079
ends with a hands-on lab to test your

00:16:09,279 --> 00:16:13,519
knowledge and

00:16:10,079 --> 00:16:16,959
really build your skill set

00:16:13,519 --> 00:16:18,160
that covers the first book in our second

00:16:16,959 --> 00:16:20,320
book

00:16:18,160 --> 00:16:22,399
which was recently released we cover

00:16:20,320 --> 00:16:24,240
some advanced topics

00:16:22,399 --> 00:16:25,600
and offer some additional hands-on

00:16:24,240 --> 00:16:27,360
challenges

00:16:25,600 --> 00:16:29,600
and while i did mention that data sets

00:16:27,360 --> 00:16:32,079
and data representation in cobol

00:16:29,600 --> 00:16:33,920
was discussed in the introductory course

00:16:32,079 --> 00:16:36,880
the opening chapter of course too seeks

00:16:33,920 --> 00:16:39,839
to expand upon that it discusses

00:16:36,880 --> 00:16:41,759
binary and hexadecimal numbering systems

00:16:39,839 --> 00:16:45,279
as well as the specific

00:16:41,759 --> 00:16:48,000
numeric representations in cobol

00:16:45,279 --> 00:16:50,639
the second chapter covers cobol

00:16:48,000 --> 00:16:54,160
application programming interfaces

00:16:50,639 --> 00:16:56,639
the chapter mostly focuses on

00:16:54,160 --> 00:16:58,079
cobalt apis to communicate with z os

00:16:56,639 --> 00:17:02,000
middleware

00:16:58,079 --> 00:17:03,920
db2 cics mq and ims

00:17:02,000 --> 00:17:06,240
and then the course concludes with a

00:17:03,920 --> 00:17:08,000
series of cobol challenges

00:17:06,240 --> 00:17:10,160
and i've provided some screenshots of

00:17:08,000 --> 00:17:13,280
these challenges

00:17:10,160 --> 00:17:15,199
on the right in the debugging challenge

00:17:13,280 --> 00:17:16,400
you must correct an issue introduced in

00:17:15,199 --> 00:17:19,439
the code

00:17:16,400 --> 00:17:21,600
in the covid19 reports challenge you are

00:17:19,439 --> 00:17:23,520
tasked to create a covid19 summary

00:17:21,600 --> 00:17:23,919
report of all the countries around the

00:17:23,520 --> 00:17:27,360
world

00:17:23,919 --> 00:17:30,000
using information from the kovid19

00:17:27,360 --> 00:17:32,400
api website essentially this involves

00:17:30,000 --> 00:17:35,120
extracting content from the website

00:17:32,400 --> 00:17:37,120
uploading a csv file to the mainframe

00:17:35,120 --> 00:17:39,280
and developing a cobol program that

00:17:37,120 --> 00:17:42,320
reads this file and reformats it to

00:17:39,280 --> 00:17:44,320
display in a desired format

00:17:42,320 --> 00:17:46,480
then we have the unemployment claims

00:17:44,320 --> 00:17:48,400
challenge in which you are given a set

00:17:46,480 --> 00:17:51,039
of data for unemployment claims

00:17:48,400 --> 00:17:51,440
and you must create a new database for

00:17:51,039 --> 00:17:53,840
this

00:17:51,440 --> 00:17:56,000
set of data and combine that data based

00:17:53,840 --> 00:17:58,320
on a record id field

00:17:56,000 --> 00:18:00,400
provide a way for other cobol programs

00:17:58,320 --> 00:18:02,240
and other applications to access this

00:18:00,400 --> 00:18:05,600
newly created database

00:18:02,240 --> 00:18:08,400
and develop a report specifying all the

00:18:05,600 --> 00:18:11,120
information available in that database

00:18:08,400 --> 00:18:12,799
and then finally we have one of my one

00:18:11,120 --> 00:18:14,080
of my favorite challenges which is the

00:18:12,799 --> 00:18:17,840
hacker news ranking

00:18:14,080 --> 00:18:23,280
challenge so the hacker news ranking

00:18:17,840 --> 00:18:26,400
website it hosts a list of posts

00:18:23,280 --> 00:18:29,200
that can be uploaded or downloaded

00:18:26,400 --> 00:18:30,960
and ranking is influenced by these votes

00:18:29,200 --> 00:18:33,760
as well as time

00:18:30,960 --> 00:18:35,360
so older stories are ranked lower so

00:18:33,760 --> 00:18:36,080
it's like you want to be on the front

00:18:35,360 --> 00:18:38,160
page

00:18:36,080 --> 00:18:39,760
of the website is the goal you need a

00:18:38,160 --> 00:18:40,799
lot of upvotes and you need to be

00:18:39,760 --> 00:18:43,520
relatively new

00:18:40,799 --> 00:18:46,080
to make front page news so in this

00:18:43,520 --> 00:18:49,360
exercise you develop a cobol program

00:18:46,080 --> 00:18:51,280
that reads again a csv file in this case

00:18:49,360 --> 00:18:53,840
it only retrieves the posts that are

00:18:51,280 --> 00:18:56,160
related to mainframe or cobol

00:18:53,840 --> 00:18:57,520
then it calculates the ranking score for

00:18:56,160 --> 00:19:00,480
particular stories

00:18:57,520 --> 00:19:01,120
and writes them to an output data set

00:19:00,480 --> 00:19:04,400
then

00:19:01,120 --> 00:19:06,559
df-sort is leveraged to sort the output

00:19:04,400 --> 00:19:08,640
based on the ranking score

00:19:06,559 --> 00:19:10,799
and i wanted to note that this

00:19:08,640 --> 00:19:13,039
particular challenge was contributed by

00:19:10,799 --> 00:19:15,280
github user raven300

00:19:13,039 --> 00:19:17,280
and raven has also contributed

00:19:15,280 --> 00:19:18,640
additional content to various sections

00:19:17,280 --> 00:19:20,400
of the course

00:19:18,640 --> 00:19:22,240
we thank her very much for her

00:19:20,400 --> 00:19:24,080
contributions as well

00:19:22,240 --> 00:19:26,320
i'll cover how each of you could get

00:19:24,080 --> 00:19:30,160
involved if you would like

00:19:26,320 --> 00:19:32,799
in a few slides um so next

00:19:30,160 --> 00:19:33,840
i just want to show this is the this is

00:19:32,799 --> 00:19:37,919
our project

00:19:33,840 --> 00:19:38,400
on omp's website and again our primary

00:19:37,919 --> 00:19:41,360
goal

00:19:38,400 --> 00:19:43,440
our primary objective with this course

00:19:41,360 --> 00:19:46,720
is to offer introductory

00:19:43,440 --> 00:19:49,760
uh educational cobol material with

00:19:46,720 --> 00:19:52,160
modern tooling that is accessible uh to

00:19:49,760 --> 00:19:55,200
the community

00:19:52,160 --> 00:19:57,840
okay so now that i've covered the

00:19:55,200 --> 00:19:59,360
uh course content at a high level and

00:19:57,840 --> 00:20:01,360
the intent of the course

00:19:59,360 --> 00:20:03,520
i'd like to discuss our journey and

00:20:01,360 --> 00:20:07,200
sudarshan i covered some of this but

00:20:03,520 --> 00:20:10,000
i want to give a little bit more detail

00:20:07,200 --> 00:20:11,919
so the the course launched in mid april

00:20:10,000 --> 00:20:12,880
this was the official launch as she dars

00:20:11,919 --> 00:20:15,760
to mention

00:20:12,880 --> 00:20:18,080
uh the initial team who made the initial

00:20:15,760 --> 00:20:19,919
contribution was working on this

00:20:18,080 --> 00:20:21,600
in march preparing for the initial

00:20:19,919 --> 00:20:24,720
release but

00:20:21,600 --> 00:20:27,840
the launch happened in mid-april and

00:20:24,720 --> 00:20:31,039
immediately after this we received

00:20:27,840 --> 00:20:32,159
many positive reactions here's just one

00:20:31,039 --> 00:20:35,760
reaction

00:20:32,159 --> 00:20:39,280
we saw on our uh github page from

00:20:35,760 --> 00:20:41,440
uh negevon13 he mentioned it's not an

00:20:39,280 --> 00:20:44,000
issue he was reporting but

00:20:41,440 --> 00:20:45,919
he was able to run his first ever cobalt

00:20:44,000 --> 00:20:48,960
program and was very excited

00:20:45,919 --> 00:20:52,159
um moving forward in the in the course

00:20:48,960 --> 00:20:54,880
we received very similar reactions on

00:20:52,159 --> 00:20:55,360
github and our slack communication

00:20:54,880 --> 00:20:58,960
channel

00:20:55,360 --> 00:20:58,960
which i'll highlight shortly

00:20:59,120 --> 00:21:03,600
after the initial contribution given the

00:21:02,400 --> 00:21:07,760
state of the world

00:21:03,600 --> 00:21:10,640
and the need for

00:21:07,760 --> 00:21:11,919
cobalt developers and support as well as

00:21:10,640 --> 00:21:14,960
the publicity

00:21:11,919 --> 00:21:16,960
around the governor of new jersey's

00:21:14,960 --> 00:21:20,000
comments regarding cobalt

00:21:16,960 --> 00:21:21,760
the course sort of went uh viral and it

00:21:20,000 --> 00:21:22,640
quickly became the open mainframe

00:21:21,760 --> 00:21:25,600
project's

00:21:22,640 --> 00:21:26,640
most watch starred and forked repository

00:21:25,600 --> 00:21:30,720
you can see

00:21:26,640 --> 00:21:31,520
today it has 205 watchers over 1800

00:21:30,720 --> 00:21:33,280
stars

00:21:31,520 --> 00:21:35,039
and many folks have forked the

00:21:33,280 --> 00:21:37,440
repository

00:21:35,039 --> 00:21:39,200
folks may fork the repository just so

00:21:37,440 --> 00:21:39,679
that basically means they have a copy of

00:21:39,200 --> 00:21:42,559
it

00:21:39,679 --> 00:21:44,000
and they can improve upon it and

00:21:42,559 --> 00:21:47,360
optionally contribute back

00:21:44,000 --> 00:21:48,880
their their um their edits and we would

00:21:47,360 --> 00:21:52,240
encourage you to do so

00:21:48,880 --> 00:21:53,280
later um i i'll show how to get involved

00:21:52,240 --> 00:21:56,559
more

00:21:53,280 --> 00:21:59,600
later in the presentation

00:21:56,559 --> 00:22:00,480
um so i already covered the content in

00:21:59,600 --> 00:22:02,880
our released

00:22:00,480 --> 00:22:04,080
courses uh which are shown here course

00:22:02,880 --> 00:22:06,080
one and two

00:22:04,080 --> 00:22:09,039
i also wanted to note that there is some

00:22:06,080 --> 00:22:11,360
content focused specifically on testing

00:22:09,039 --> 00:22:12,320
in course three but that has not yet

00:22:11,360 --> 00:22:14,159
been released

00:22:12,320 --> 00:22:15,760
although uh contributions would would be

00:22:14,159 --> 00:22:19,280
welcome to that uh

00:22:15,760 --> 00:22:22,080
to that book to bring it to uh release

00:22:19,280 --> 00:22:23,840
um release quality and then on the right

00:22:22,080 --> 00:22:25,120
we have our current technical steering

00:22:23,840 --> 00:22:28,640
committee members

00:22:25,120 --> 00:22:32,240
we have paul jelly martin zebura

00:22:28,640 --> 00:22:35,200
uh sadarshna john and myself

00:22:32,240 --> 00:22:36,159
and if you would like to begin

00:22:35,200 --> 00:22:38,720
contributing

00:22:36,159 --> 00:22:40,480
you could possibly also become a member

00:22:38,720 --> 00:22:43,039
of the tsc

00:22:40,480 --> 00:22:43,039
later on

00:22:43,760 --> 00:22:48,000
okay so next i want to cover how you can

00:22:46,080 --> 00:22:50,640
get involved

00:22:48,000 --> 00:22:52,960
so the first part of getting involved is

00:22:50,640 --> 00:22:54,960
just consuming the content

00:22:52,960 --> 00:22:57,360
and so in order to consume the content

00:22:54,960 --> 00:22:59,840
from the github repository itself

00:22:57,360 --> 00:23:01,520
you would just click on the releases tab

00:22:59,840 --> 00:23:04,880
that would give you access to the

00:23:01,520 --> 00:23:06,960
most recent release of the course

00:23:04,880 --> 00:23:08,080
and then you can see the two books here

00:23:06,960 --> 00:23:10,559
on the right one getting

00:23:08,080 --> 00:23:12,720
started on advanced topics and then you

00:23:10,559 --> 00:23:14,960
can just open those pdfs

00:23:12,720 --> 00:23:16,640
and sort of begin your journey i also

00:23:14,960 --> 00:23:20,320
want to note while i have

00:23:16,640 --> 00:23:23,120
the picture of the repository up here

00:23:20,320 --> 00:23:23,840
is if you run into any issues uh you can

00:23:23,120 --> 00:23:26,480
just click this

00:23:23,840 --> 00:23:28,080
issues button and report that we'll try

00:23:26,480 --> 00:23:29,760
to help you the best we can

00:23:28,080 --> 00:23:31,919
and if you would like to contribute to

00:23:29,760 --> 00:23:34,400
the course you can just click this

00:23:31,919 --> 00:23:37,200
fork button in the upper right where we

00:23:34,400 --> 00:23:39,760
see we have 360 of those

00:23:37,200 --> 00:23:40,720
make any changes um and then what you

00:23:39,760 --> 00:23:43,200
would do is

00:23:40,720 --> 00:23:44,559
uh github would it also helps you with

00:23:43,200 --> 00:23:47,120
this is open a pr

00:23:44,559 --> 00:23:48,559
back into our course to contribute your

00:23:47,120 --> 00:23:52,240
your work

00:23:48,559 --> 00:23:54,000
if you have any trouble using github or

00:23:52,240 --> 00:23:55,520
but you want to still contribute content

00:23:54,000 --> 00:23:57,919
just feel free to reach out to me

00:23:55,520 --> 00:24:00,640
either on slack or on github and i can

00:23:57,919 --> 00:24:00,640
help you with that

00:24:01,360 --> 00:24:07,520
okay so also how to consume the content

00:24:04,559 --> 00:24:10,799
it's important to know where to get help

00:24:07,520 --> 00:24:12,799
so you can report issues on github but

00:24:10,799 --> 00:24:13,520
you can also reach out to our slack

00:24:12,799 --> 00:24:15,600
channel

00:24:13,520 --> 00:24:17,600
i recommend our slack channel because

00:24:15,600 --> 00:24:19,520
many folks are involved there

00:24:17,600 --> 00:24:21,200
i think there's less folks really

00:24:19,520 --> 00:24:22,960
watching the repository than

00:24:21,200 --> 00:24:25,760
communicating on slack

00:24:22,960 --> 00:24:27,679
on our cobol programming course channel

00:24:25,760 --> 00:24:31,600
you can see at the bottom of the screen

00:24:27,679 --> 00:24:34,000
has over 2000 members and i'll note that

00:24:31,600 --> 00:24:35,360
the community does a great job helping

00:24:34,000 --> 00:24:38,960
others in the community

00:24:35,360 --> 00:24:39,679
so it's not necessarily us tsc members

00:24:38,960 --> 00:24:41,520
driving

00:24:39,679 --> 00:24:43,760
all the discussions or answering all the

00:24:41,520 --> 00:24:45,840
questions on there but the community

00:24:43,760 --> 00:24:49,039
has been sort of helping others get

00:24:45,840 --> 00:24:51,360
started once they become

00:24:49,039 --> 00:24:53,039
more knowledgeable of the of the course

00:24:51,360 --> 00:24:55,600
content

00:24:53,039 --> 00:24:56,960
also you might be wondering well how do

00:24:55,600 --> 00:25:00,480
i access

00:24:56,960 --> 00:25:03,279
how do i do the hands-on labs

00:25:00,480 --> 00:25:04,880
you may not have a mainframe um ibm has

00:25:03,279 --> 00:25:06,240
provided a free environment for

00:25:04,880 --> 00:25:08,480
completing this lab

00:25:06,240 --> 00:25:09,919
if you did have a mainframe though you

00:25:08,480 --> 00:25:14,559
could up all the

00:25:09,919 --> 00:25:16,799
code that's used for the um

00:25:14,559 --> 00:25:19,360
for the labs is available in the github

00:25:16,799 --> 00:25:22,159
repository so you could upload those to

00:25:19,360 --> 00:25:23,440
a mainframe you have access to um you

00:25:22,159 --> 00:25:24,960
might need to do a little bit of work on

00:25:23,440 --> 00:25:26,240
the environment but then you could go

00:25:24,960 --> 00:25:29,600
through the course

00:25:26,240 --> 00:25:31,279
um but uh again ibm's provide this free

00:25:29,600 --> 00:25:33,360
environment so you can just click this

00:25:31,279 --> 00:25:36,080
fill out the details on the form and

00:25:33,360 --> 00:25:39,039
then it'll give you the details on

00:25:36,080 --> 00:25:40,480
on how to access uh that mainframe

00:25:39,039 --> 00:25:42,640
environment through

00:25:40,480 --> 00:25:45,039
uh vs code and the tools i outlined

00:25:42,640 --> 00:25:45,919
earlier and paul on the line he's really

00:25:45,039 --> 00:25:49,360
the lead

00:25:45,919 --> 00:25:51,840
in maintaining this environment so

00:25:49,360 --> 00:25:52,480
big shout out to to paul for providing

00:25:51,840 --> 00:25:57,840
that and

00:25:52,480 --> 00:25:57,840
really helping learners uh get started

00:25:59,919 --> 00:26:04,159
okay then i just wanted to mention some

00:26:02,320 --> 00:26:06,640
downstream projects

00:26:04,159 --> 00:26:08,080
and all of these downstream projects i'm

00:26:06,640 --> 00:26:11,360
going to show

00:26:08,080 --> 00:26:14,159
they were created by jeff bisti and

00:26:11,360 --> 00:26:15,840
jeff i recently attended one of our tsc

00:26:14,159 --> 00:26:18,000
meetings and did an excellent job

00:26:15,840 --> 00:26:20,159
presenting an overview of the content in

00:26:18,000 --> 00:26:22,000
some of these courses

00:26:20,159 --> 00:26:23,360
so i would encourage you to check that

00:26:22,000 --> 00:26:24,880
out

00:26:23,360 --> 00:26:27,600
to see where to check that out let me

00:26:24,880 --> 00:26:31,200
just go to the previous slide

00:26:27,600 --> 00:26:34,480
really quick there's tsc meeting

00:26:31,200 --> 00:26:35,600
um folder on the repository you see the

00:26:34,480 --> 00:26:38,400
force folder down

00:26:35,600 --> 00:26:40,880
if you click into there you'll see a

00:26:38,400 --> 00:26:42,559
recent meeting a recent reporting

00:26:40,880 --> 00:26:44,559
link where jeff presented this

00:26:42,559 --> 00:26:47,600
information so definitely

00:26:44,559 --> 00:26:49,919
check that out if you have some time and

00:26:47,600 --> 00:26:50,400
then the downstream contents available

00:26:49,919 --> 00:26:53,039
on

00:26:50,400 --> 00:26:53,919
ibm's digital learning platform as well

00:26:53,039 --> 00:26:56,960
as

00:26:53,919 --> 00:26:59,760
coursera pluralsight and

00:26:56,960 --> 00:27:01,840
of course youtube so you just go to the

00:26:59,760 --> 00:27:04,720
youtube link and start watching

00:27:01,840 --> 00:27:04,720
watching the course

00:27:05,200 --> 00:27:08,799
and then that should help you get

00:27:06,559 --> 00:27:11,279
started um with that

00:27:08,799 --> 00:27:13,279
i think i'll turn it over to uh

00:27:11,279 --> 00:27:15,279
siddhartha to wrap up with

00:27:13,279 --> 00:27:18,159
some additional resources if there

00:27:15,279 --> 00:27:18,159
aren't any questions

00:27:18,320 --> 00:27:22,640
yeah before before i continue on there's

00:27:21,039 --> 00:27:26,480
a question and i think um

00:27:22,640 --> 00:27:28,640
paul if you could maybe talk to it um

00:27:26,480 --> 00:27:29,600
while talking about the actual content

00:27:28,640 --> 00:27:31,200
and um

00:27:29,600 --> 00:27:33,200
i think that's the slide where you talk

00:27:31,200 --> 00:27:34,159
part one and part two mike if you're

00:27:33,200 --> 00:27:37,360
able to go back

00:27:34,159 --> 00:27:38,799
to that slide um as an sme who is part

00:27:37,360 --> 00:27:40,159
of building that course

00:27:38,799 --> 00:27:42,720
i think this would be a good question

00:27:40,159 --> 00:27:44,480
for you to take paul

00:27:42,720 --> 00:27:46,399
any programming language there's a lot

00:27:44,480 --> 00:27:48,640
right so the question is you know

00:27:46,399 --> 00:27:50,159
how did how does how did the smes and

00:27:48,640 --> 00:27:52,559
the team come up

00:27:50,159 --> 00:27:53,360
with what what you would cover and you

00:27:52,559 --> 00:27:55,520
know

00:27:53,360 --> 00:27:56,480
distill it down to the list that we have

00:27:55,520 --> 00:27:59,360
here

00:27:56,480 --> 00:28:02,000
for cobalt yeah i can go ahead and begin

00:27:59,360 --> 00:28:03,840
to talk about that

00:28:02,000 --> 00:28:05,679
it turns out that it wasn't too

00:28:03,840 --> 00:28:06,640
difficult to come up with it because

00:28:05,679 --> 00:28:09,600
there's a lot of

00:28:06,640 --> 00:28:10,799
technical documentation and i will let

00:28:09,600 --> 00:28:14,159
you know what i did

00:28:10,799 --> 00:28:16,240
is i just went to the ibm manual the

00:28:14,159 --> 00:28:18,000
cobol programmer's guide and saw how

00:28:16,240 --> 00:28:20,480
that was organized

00:28:18,000 --> 00:28:21,039
and then what i did is i said well i

00:28:20,480 --> 00:28:23,840
would like

00:28:21,039 --> 00:28:24,399
to do a couple little twists to that but

00:28:23,840 --> 00:28:26,559
i went

00:28:24,399 --> 00:28:29,200
directly to the professional manuals and

00:28:26,559 --> 00:28:31,440
used the technical writers

00:28:29,200 --> 00:28:33,760
organization and tried to follow that

00:28:31,440 --> 00:28:35,919
with a couple minor tweaks

00:28:33,760 --> 00:28:36,960
the other thing i felt was extremely

00:28:35,919 --> 00:28:39,200
important

00:28:36,960 --> 00:28:40,960
because i've i've been able to program

00:28:39,200 --> 00:28:42,840
in cobol for decades it's

00:28:40,960 --> 00:28:44,080
i find it to be an extremely easy

00:28:42,840 --> 00:28:46,720
language

00:28:44,080 --> 00:28:49,919
and one thing that that intrigued me

00:28:46,720 --> 00:28:51,760
once i started looking at cobalt again

00:28:49,919 --> 00:28:53,520
after many years of not looking at it

00:28:51,760 --> 00:28:56,240
was the intrinsic functions and i

00:28:53,520 --> 00:28:58,799
believe it was mike that said that's the

00:28:56,240 --> 00:29:00,399
the chapter he liked and the intrinsic

00:28:58,799 --> 00:29:01,919
functions are something that has been

00:29:00,399 --> 00:29:05,440
built up over time

00:29:01,919 --> 00:29:06,080
making um programming much much easier

00:29:05,440 --> 00:29:07,679
in cobol

00:29:06,080 --> 00:29:10,640
because what i used to have to write in

00:29:07,679 --> 00:29:13,440
logic there's now functions for

00:29:10,640 --> 00:29:15,200
and it makes it much easier so i knew

00:29:13,440 --> 00:29:18,240
that would be very important

00:29:15,200 --> 00:29:21,440
and also the other thing

00:29:18,240 --> 00:29:23,840
i probably built into it is simplicity

00:29:21,440 --> 00:29:26,159
i want people to understand that this

00:29:23,840 --> 00:29:29,360
really is simple so i would really

00:29:26,159 --> 00:29:30,799
focus on simplicity and so that's how i

00:29:29,360 --> 00:29:32,480
kind of came up with it

00:29:30,799 --> 00:29:34,159
the other question that was out there

00:29:32,480 --> 00:29:36,080
was an excellent one

00:29:34,159 --> 00:29:39,039
they said are you following the cobalt

00:29:36,080 --> 00:29:41,520
85 standard or the cobalt 20

00:29:39,039 --> 00:29:42,559
2000 standard and i will let you know

00:29:41,520 --> 00:29:45,360
where um

00:29:42,559 --> 00:29:46,880
the cobalt compiled team headed up by

00:29:45,360 --> 00:29:50,640
tom ross

00:29:46,880 --> 00:29:53,440
definitely follows the latest standard

00:29:50,640 --> 00:29:55,440
and there were there were very very few

00:29:53,440 --> 00:29:56,080
things that the standard has in it

00:29:55,440 --> 00:29:59,919
that's not

00:29:56,080 --> 00:30:02,080
in the ibm z enterprise cobalt and

00:29:59,919 --> 00:30:03,039
tom actually discussed that a little bit

00:30:02,080 --> 00:30:05,600
and a professor

00:30:03,039 --> 00:30:06,960
that was a very good professor that

00:30:05,600 --> 00:30:09,520
teaches cobol

00:30:06,960 --> 00:30:11,520
mentioned during one of his lectures

00:30:09,520 --> 00:30:15,919
that let me show you how you can

00:30:11,520 --> 00:30:18,799
you can have that standard function

00:30:15,919 --> 00:30:20,559
applied and he showed how easy it was to

00:30:18,799 --> 00:30:23,919
do that standard without

00:30:20,559 --> 00:30:25,919
it being built into the compiler and

00:30:23,919 --> 00:30:26,960
so when it comes to the standard i would

00:30:25,919 --> 00:30:30,399
recommend

00:30:26,960 --> 00:30:33,279
looking at the cobalt fridays and

00:30:30,399 --> 00:30:35,200
especially review the two from tom ross

00:30:33,279 --> 00:30:36,640
and tom's known as captain cobalt

00:30:35,200 --> 00:30:40,080
so hopefully it answers the two

00:30:36,640 --> 00:30:43,120
questions and i'll stop right there

00:30:40,080 --> 00:30:45,279
thank you paul thank you for that um

00:30:43,120 --> 00:30:46,799
so yeah in terms of additional resources

00:30:45,279 --> 00:30:49,279
thank you mike that was

00:30:46,799 --> 00:30:50,000
that was an amazing overview of

00:30:49,279 --> 00:30:52,080
everything

00:30:50,000 --> 00:30:53,440
that um you know we've worked on in

00:30:52,080 --> 00:30:56,480
putting together

00:30:53,440 --> 00:30:59,519
uh on the github repository here

00:30:56,480 --> 00:31:02,159
uh a big shout out actually to mike here

00:30:59,519 --> 00:31:02,880
on the call because he is our he's our

00:31:02,159 --> 00:31:06,159
github

00:31:02,880 --> 00:31:07,039
hero and managing and doing everything

00:31:06,159 --> 00:31:09,600
we can

00:31:07,039 --> 00:31:10,399
to make sure our learners have a really

00:31:09,600 --> 00:31:12,559
smooth and

00:31:10,399 --> 00:31:13,760
um you know wonderful experience coming

00:31:12,559 --> 00:31:16,080
and learning cobol

00:31:13,760 --> 00:31:17,039
on open mainframe projects so yay thank

00:31:16,080 --> 00:31:19,360
you mike

00:31:17,039 --> 00:31:21,120
and i i wanted to second that siddharth

00:31:19,360 --> 00:31:23,120
because after we started putting the

00:31:21,120 --> 00:31:24,960
original content together

00:31:23,120 --> 00:31:26,640
we were kind of in over our head when it

00:31:24,960 --> 00:31:27,360
came to github and mike came to the

00:31:26,640 --> 00:31:30,320
rescue

00:31:27,360 --> 00:31:31,039
so it was really important so thank you

00:31:30,320 --> 00:31:34,240
mike

00:31:31,039 --> 00:31:37,519
oh thank you absolutely yup he's

00:31:34,240 --> 00:31:42,080
he's the superhero um

00:31:37,519 --> 00:31:42,080
yeah um so the next next slide mike

00:31:44,240 --> 00:31:48,720
so um all you know with all the buzz

00:31:46,960 --> 00:31:50,240
that was happening around cobalt we

00:31:48,720 --> 00:31:54,000
really wanted to make sure

00:31:50,240 --> 00:31:57,200
we had a a one-stop shop if you will

00:31:54,000 --> 00:31:59,760
a landing page for all things cobalt so

00:31:57,200 --> 00:32:00,320
just as we landed the cobalt programming

00:31:59,760 --> 00:32:02,799
course

00:32:00,320 --> 00:32:03,919
on open mainstream project at the same

00:32:02,799 --> 00:32:06,480
time

00:32:03,919 --> 00:32:07,760
within ibm we worked with the ibm

00:32:06,480 --> 00:32:11,519
developer team

00:32:07,760 --> 00:32:13,919
and created this cobol landing page

00:32:11,519 --> 00:32:14,880
so this is another huge resource and

00:32:13,919 --> 00:32:17,760
again this is

00:32:14,880 --> 00:32:18,720
pointed to from the resources section of

00:32:17,760 --> 00:32:21,279
the

00:32:18,720 --> 00:32:22,799
github resource github repository as

00:32:21,279 --> 00:32:24,720
well

00:32:22,799 --> 00:32:26,960
the get started with cobol here on this

00:32:24,720 --> 00:32:29,039
page actually will take you right back

00:32:26,960 --> 00:32:30,559
to the open mainframe project course

00:32:29,039 --> 00:32:31,600
that's what we would like to drive

00:32:30,559 --> 00:32:34,000
people to

00:32:31,600 --> 00:32:35,919
to be able to learn cobalt and gives you

00:32:34,000 --> 00:32:36,640
the opportunity to actually get access

00:32:35,919 --> 00:32:39,679
to

00:32:36,640 --> 00:32:40,559
a mainframe and do all of the labs so it

00:32:39,679 --> 00:32:43,360
is a great

00:32:40,559 --> 00:32:44,080
learning opportunity and then on the

00:32:43,360 --> 00:32:45,840
right we've

00:32:44,080 --> 00:32:47,440
got this video pinned which is the

00:32:45,840 --> 00:32:49,600
introduction to cobol programming

00:32:47,440 --> 00:32:51,440
language by jeff

00:32:49,600 --> 00:32:53,120
when all of this buzz started what

00:32:51,440 --> 00:32:56,159
basically jeff wanted to do

00:32:53,120 --> 00:32:58,000
is write his first cobol program and

00:32:56,159 --> 00:32:59,360
talk about what that journey was like

00:32:58,000 --> 00:33:02,799
for him it's a

00:32:59,360 --> 00:33:03,679
really really interesting video um it is

00:33:02,799 --> 00:33:06,240
got it's got

00:33:03,679 --> 00:33:08,000
way over 50 000 views or something like

00:33:06,240 --> 00:33:10,159
that and this is in the first

00:33:08,000 --> 00:33:11,519
four weeks or so of his um launching

00:33:10,159 --> 00:33:14,559
that video so it's a

00:33:11,519 --> 00:33:17,120
it's a viral video for sure

00:33:14,559 --> 00:33:18,720
um paul touched upon cobalt friday so

00:33:17,120 --> 00:33:22,080
that was another

00:33:18,720 --> 00:33:22,880
um again um a project that paul and i

00:33:22,080 --> 00:33:25,600
worked on

00:33:22,880 --> 00:33:26,559
bringing you know smes not just from

00:33:25,600 --> 00:33:29,760
within ibm

00:33:26,559 --> 00:33:31,840
but from industry from academia and

00:33:29,760 --> 00:33:33,679
you know come talk about the various

00:33:31,840 --> 00:33:35,919
aspects of cobol

00:33:33,679 --> 00:33:37,760
mike talked about all the various topics

00:33:35,919 --> 00:33:39,440
that are covered in part two in that

00:33:37,760 --> 00:33:42,000
initial getting started book

00:33:39,440 --> 00:33:44,080
so that was sort of our thought process

00:33:42,000 --> 00:33:44,880
when we put the cobalt friday's series

00:33:44,080 --> 00:33:47,519
together

00:33:44,880 --> 00:33:48,880
we wanted to start with additional

00:33:47,519 --> 00:33:50,640
content if you will

00:33:48,880 --> 00:33:52,640
to bring as a means to talk about the

00:33:50,640 --> 00:33:55,600
various topics that are covered

00:33:52,640 --> 00:33:56,399
in the course as a starting point and

00:33:55,600 --> 00:33:59,200
then we

00:33:56,399 --> 00:34:00,559
you know dug a little deeper into um all

00:33:59,200 --> 00:34:01,519
the middleware and you know the

00:34:00,559 --> 00:34:03,519
interactions that we

00:34:01,519 --> 00:34:06,480
get we often talk about when it's cobalt

00:34:03,519 --> 00:34:08,399
it has to talk to kicks and db2 and ims

00:34:06,480 --> 00:34:10,480
so we brought in experts from all of

00:34:08,399 --> 00:34:12,480
these areas to talk about

00:34:10,480 --> 00:34:13,520
what that interaction looks like and how

00:34:12,480 --> 00:34:15,599
easy it is

00:34:13,520 --> 00:34:17,760
from a cobalt point of view right from a

00:34:15,599 --> 00:34:20,800
programming point of view

00:34:17,760 --> 00:34:23,359
and then um we then dug deeper into

00:34:20,800 --> 00:34:24,000
application modernization what that

00:34:23,359 --> 00:34:27,200
means

00:34:24,000 --> 00:34:29,200
in the cobalt space we had a client that

00:34:27,200 --> 00:34:31,200
tev come and talk about how

00:34:29,200 --> 00:34:33,280
they have really taken application

00:34:31,200 --> 00:34:36,000
modernization to heart and it is

00:34:33,280 --> 00:34:37,679
it is front and center for them and um

00:34:36,000 --> 00:34:40,000
armin did an amazing job

00:34:37,679 --> 00:34:41,520
making it sound really easy and simple

00:34:40,000 --> 00:34:43,760
so it's it's a

00:34:41,520 --> 00:34:46,639
a model for sure for other clients to

00:34:43,760 --> 00:34:48,960
you know to look at look at as well

00:34:46,639 --> 00:34:51,119
we recently wrapped up the cobalt friday

00:34:48,960 --> 00:34:54,079
session earlier in december

00:34:51,119 --> 00:34:54,879
with um students and academia coming

00:34:54,079 --> 00:34:56,800
together

00:34:54,879 --> 00:34:58,800
and really talking about what that next

00:34:56,800 --> 00:35:00,720
generation of co-ballers is going to

00:34:58,800 --> 00:35:01,680
look like where are those learning

00:35:00,720 --> 00:35:04,400
resources

00:35:01,680 --> 00:35:05,520
how is academia helping out with cobol

00:35:04,400 --> 00:35:07,119
as well

00:35:05,520 --> 00:35:08,800
and it was interesting to hear from a

00:35:07,119 --> 00:35:11,119
few students and

00:35:08,800 --> 00:35:12,000
you know see what their thought process

00:35:11,119 --> 00:35:13,520
is and how

00:35:12,000 --> 00:35:15,359
they are looking forward to actually

00:35:13,520 --> 00:35:16,400
learning cobol and being in this space

00:35:15,359 --> 00:35:18,640
so

00:35:16,400 --> 00:35:19,760
like paul said do check out the cobalt

00:35:18,640 --> 00:35:22,079
friday series

00:35:19,760 --> 00:35:23,680
i will drop a link to it again in our

00:35:22,079 --> 00:35:27,520
chat in just a moment

00:35:23,680 --> 00:35:29,920
um so this is a this is another huge

00:35:27,520 --> 00:35:31,200
resource is basically what i'm driving

00:35:29,920 --> 00:35:34,480
through so hope you

00:35:31,200 --> 00:35:37,680
catch this url developer.ibm.com

00:35:34,480 --> 00:35:40,640
slash technology slash cobol um

00:35:37,680 --> 00:35:40,640
next slide mike

00:35:42,240 --> 00:35:46,400
okay yeah so here's here is um the open

00:35:45,280 --> 00:35:50,400
maintenance project

00:35:46,400 --> 00:35:53,200
the the website that um mike shared um

00:35:50,400 --> 00:35:54,640
the the github repository uh where our

00:35:53,200 --> 00:35:56,720
releases are and

00:35:54,640 --> 00:35:58,480
um the slack channels i think these are

00:35:56,720 --> 00:36:02,720
all resources that mike

00:35:58,480 --> 00:36:05,200
definitely talked about in great detail

00:36:02,720 --> 00:36:07,119
yeah just a note to add just uh if

00:36:05,200 --> 00:36:07,920
you're interested in capturing just one

00:36:07,119 --> 00:36:09,920
link

00:36:07,920 --> 00:36:12,400
i'd recommend capturing that slack

00:36:09,920 --> 00:36:14,000
channel link and then if you have any

00:36:12,400 --> 00:36:16,720
additional questions we can

00:36:14,000 --> 00:36:17,920
we can follow up from there as well

00:36:16,720 --> 00:36:21,280
absolutely

00:36:17,920 --> 00:36:23,680
great point mike so

00:36:21,280 --> 00:36:25,839
yeah i think that's that's really what

00:36:23,680 --> 00:36:26,800
we wanted to share with everyone here

00:36:25,839 --> 00:36:29,280
today

00:36:26,800 --> 00:36:30,160
thank you for being here um i'm just

00:36:29,280 --> 00:36:31,920
going to wait

00:36:30,160 --> 00:36:33,599
see if there's any other questions and

00:36:31,920 --> 00:36:35,599
in the meantime

00:36:33,599 --> 00:36:37,280
drop that link here and chat for the

00:36:35,599 --> 00:36:39,359
kobold fridays

00:36:37,280 --> 00:36:40,640
and while we're waiting for questions

00:36:39,359 --> 00:36:43,599
there's something that

00:36:40,640 --> 00:36:45,200
occurred to me about a year ago when

00:36:43,599 --> 00:36:47,280
people would talk about the

00:36:45,200 --> 00:36:48,880
age of cobalt well the age of other

00:36:47,280 --> 00:36:52,160
languages is

00:36:48,880 --> 00:36:54,960
is a testimony to its

00:36:52,160 --> 00:36:55,520
its strength and its flexibility and i

00:36:54,960 --> 00:36:57,680
always

00:36:55,520 --> 00:36:59,040
i came up with a phrase that i really

00:36:57,680 --> 00:37:02,560
believe is true

00:36:59,040 --> 00:37:04,800
if cobalt didn't exist and

00:37:02,560 --> 00:37:05,680
business got together to create a

00:37:04,800 --> 00:37:07,760
language for

00:37:05,680 --> 00:37:09,839
business they would probably invent

00:37:07,760 --> 00:37:13,119
cobalt all over again

00:37:09,839 --> 00:37:14,640
and uh because it does a fantastic job

00:37:13,119 --> 00:37:17,680
for what it's meant to do

00:37:14,640 --> 00:37:19,680
especially in the financial world and so

00:37:17,680 --> 00:37:23,839
i'll just leave people with that comment

00:37:19,680 --> 00:37:23,839
or that opinion of mine

00:37:24,720 --> 00:37:30,480
so paul um if you could share you know

00:37:27,839 --> 00:37:32,079
as an sme what would you say is

00:37:30,480 --> 00:37:34,560
something really unique

00:37:32,079 --> 00:37:36,320
about cobol and mike please do chime in

00:37:34,560 --> 00:37:39,280
as well when paul is done

00:37:36,320 --> 00:37:39,680
um about cobalt and why would why would

00:37:39,280 --> 00:37:42,000
you

00:37:39,680 --> 00:37:44,079
um how would you encourage you know

00:37:42,000 --> 00:37:47,760
students to look at cobalt

00:37:44,079 --> 00:37:50,480
well there's several reasons is that um

00:37:47,760 --> 00:37:52,880
many large large enterprises and they're

00:37:50,480 --> 00:37:55,359
very critical to the world economy

00:37:52,880 --> 00:37:56,000
have decades and decades of business

00:37:55,359 --> 00:37:59,119
logic

00:37:56,000 --> 00:38:01,119
in cobol and it does a fantastic job and

00:37:59,119 --> 00:38:02,880
just knowing how to read it

00:38:01,119 --> 00:38:05,440
you can go into an organization and you

00:38:02,880 --> 00:38:07,200
can read decades of logic

00:38:05,440 --> 00:38:09,920
of people that have come and gone from

00:38:07,200 --> 00:38:12,560
the business that built the business up

00:38:09,920 --> 00:38:13,599
and uh so it is the language of big

00:38:12,560 --> 00:38:14,960
business

00:38:13,599 --> 00:38:17,520
and the other thing that it does

00:38:14,960 --> 00:38:18,560
extremely well it's it's got an internal

00:38:17,520 --> 00:38:20,640
optimizer it's

00:38:18,560 --> 00:38:22,320
very very fast there have been

00:38:20,640 --> 00:38:23,359
situations i've been involved in where

00:38:22,320 --> 00:38:25,839
people tried to

00:38:23,359 --> 00:38:27,680
rewrite extremely important functions

00:38:25,839 --> 00:38:29,280
that are used in a worldwide economy

00:38:27,680 --> 00:38:30,720
and they wanted to do it in java and

00:38:29,280 --> 00:38:32,880
they said their goal was to make it as

00:38:30,720 --> 00:38:36,160
fast as cobalt and i would just say

00:38:32,880 --> 00:38:37,839
good luck and because it's it's why do

00:38:36,160 --> 00:38:39,040
it in java when cobalt is doing such a

00:38:37,839 --> 00:38:40,640
wonderful job

00:38:39,040 --> 00:38:42,079
the other thing that i would say about

00:38:40,640 --> 00:38:44,839
it is the

00:38:42,079 --> 00:38:46,160
mathematic the financial mathematics are

00:38:44,839 --> 00:38:48,640
different than

00:38:46,160 --> 00:38:50,880
other types of mathematics and nothing

00:38:48,640 --> 00:38:54,880
does the financial mathematics

00:38:50,880 --> 00:38:57,920
better than the ibm z enterprise cobalt

00:38:54,880 --> 00:39:00,800
and tom ross actually brings that up

00:38:57,920 --> 00:39:01,200
and goes into detail about it along with

00:39:00,800 --> 00:39:04,000
a

00:39:01,200 --> 00:39:05,119
um a very good professor dr david

00:39:04,000 --> 00:39:07,359
wolbright

00:39:05,119 --> 00:39:08,960
who discusses that also and they discuss

00:39:07,359 --> 00:39:10,800
it in detail

00:39:08,960 --> 00:39:15,839
and so that's the that's the comments i

00:39:10,800 --> 00:39:15,839
would make about it

00:39:16,079 --> 00:39:19,119
yeah i think from from my perspective

00:39:18,320 --> 00:39:21,680
that's uh

00:39:19,119 --> 00:39:22,240
probably similar to similar to paul's

00:39:21,680 --> 00:39:24,560
but

00:39:22,240 --> 00:39:26,560
you know i come from a distributed

00:39:24,560 --> 00:39:30,000
background so i'm very familiar with

00:39:26,560 --> 00:39:32,800
uh with languages like python and

00:39:30,000 --> 00:39:35,040
javascript and typescript and using

00:39:32,800 --> 00:39:36,560
using tools like visual studio code and

00:39:35,040 --> 00:39:39,839
clies and

00:39:36,560 --> 00:39:41,920
and ci cd tools like jenkins

00:39:39,839 --> 00:39:43,440
and i'd like to be able to leverage

00:39:41,920 --> 00:39:44,560
those tools when i when i work on

00:39:43,440 --> 00:39:47,760
mainframe and that's

00:39:44,560 --> 00:39:48,800
that's important uh for me as i'm

00:39:47,760 --> 00:39:51,839
involved with

00:39:48,800 --> 00:39:52,240
zoe and i like that aspect of it but if

00:39:51,839 --> 00:39:53,760
you're

00:39:52,240 --> 00:39:55,520
talking about what you're actually

00:39:53,760 --> 00:39:56,560
working on not necessarily the tools

00:39:55,520 --> 00:39:59,680
you're working

00:39:56,560 --> 00:40:02,640
with cobalt the reason

00:39:59,680 --> 00:40:04,079
i enjoy this cobalt programming course

00:40:02,640 --> 00:40:07,119
as much as i do

00:40:04,079 --> 00:40:09,200
is it's mission critical right the most

00:40:07,119 --> 00:40:11,119
important applications running today and

00:40:09,200 --> 00:40:12,960
the things we're relying on for things

00:40:11,119 --> 00:40:15,119
we do every single day

00:40:12,960 --> 00:40:16,319
it's probably being driven by cobalt and

00:40:15,119 --> 00:40:18,000
it's definitely being driven on a

00:40:16,319 --> 00:40:20,319
mainframe

00:40:18,000 --> 00:40:21,839
so just to echo really paul's point on

00:40:20,319 --> 00:40:25,040
the criticality of the

00:40:21,839 --> 00:40:25,440
the cobalt language it's necessary and

00:40:25,040 --> 00:40:28,880
if

00:40:25,440 --> 00:40:30,560
if we can do something to help encourage

00:40:28,880 --> 00:40:33,520
folks to learn cobol

00:40:30,560 --> 00:40:34,800
and bring more folks to the mainframe

00:40:33,520 --> 00:40:36,880
platform as well

00:40:34,800 --> 00:40:39,040
i think that's all going to benefit us

00:40:36,880 --> 00:40:42,079
and the larger community

00:40:39,040 --> 00:40:43,839
in in the long term and coming full

00:40:42,079 --> 00:40:44,960
circle sadarshan brought something up

00:40:43,839 --> 00:40:47,359
there was a

00:40:44,960 --> 00:40:48,400
a professor his first name was tac that

00:40:47,359 --> 00:40:49,839
helped us and i

00:40:48,400 --> 00:40:51,440
really enjoyed working with tac

00:40:49,839 --> 00:40:52,880
brilliant teacher

00:40:51,440 --> 00:40:54,480
i would have loved to have had him as a

00:40:52,880 --> 00:40:57,200
teacher but tack

00:40:54,480 --> 00:40:59,839
as sadarshna said tak made the comment

00:40:57,200 --> 00:41:02,400
once he started studying cobalt

00:40:59,839 --> 00:41:03,359
he's a computer science guy he actually

00:41:02,400 --> 00:41:08,079
made the statement

00:41:03,359 --> 00:41:11,359
that cobalt is not a fashion statement

00:41:08,079 --> 00:41:13,280
and that was a great phrase these

00:41:11,359 --> 00:41:16,319
languages aren't fashion statements

00:41:13,280 --> 00:41:17,119
they're fit for purpose and to do things

00:41:16,319 --> 00:41:18,720
right

00:41:17,119 --> 00:41:20,160
you know you pick the you pick the

00:41:18,720 --> 00:41:21,680
correct language for the correct

00:41:20,160 --> 00:41:23,839
situation

00:41:21,680 --> 00:41:25,520
and so i thought that was an excellent

00:41:23,839 --> 00:41:34,079
comment that sadarsha made earlier about

00:41:25,520 --> 00:41:36,560
what tac had said

00:41:34,079 --> 00:41:38,960
so we do have a question do we learn new

00:41:36,560 --> 00:41:40,560
features of cobol like handling json

00:41:38,960 --> 00:41:41,920
input

00:41:40,560 --> 00:41:44,000
in the course i guess that's the

00:41:41,920 --> 00:41:47,040
question yeah i can start with that

00:41:44,000 --> 00:41:50,000
so um we didn't

00:41:47,040 --> 00:41:51,440
do a special section on it however that

00:41:50,000 --> 00:41:55,040
did come up

00:41:51,440 --> 00:41:58,720
and it turns out that um ibm z

00:41:55,040 --> 00:42:00,839
enterprise cobalt has a generate json

00:41:58,720 --> 00:42:02,800
it's got these other functions that are

00:42:00,839 --> 00:42:06,160
specifically for handling

00:42:02,800 --> 00:42:09,359
json not only json input but

00:42:06,160 --> 00:42:10,400
um writing json so it can generate json

00:42:09,359 --> 00:42:13,520
and write it

00:42:10,400 --> 00:42:16,319
so if you if you look into the

00:42:13,520 --> 00:42:18,079
the latest and greatest features of the

00:42:16,319 --> 00:42:21,599
ibm z enterprise cobol

00:42:18,079 --> 00:42:24,560
you'll actually see uh functions

00:42:21,599 --> 00:42:25,200
uh specifically for json to make json

00:42:24,560 --> 00:42:27,599
handling

00:42:25,200 --> 00:42:29,119
easy within cobol so hopefully it

00:42:27,599 --> 00:42:30,960
answers that

00:42:29,119 --> 00:42:32,640
so when you when you say do we learn new

00:42:30,960 --> 00:42:34,720
features um

00:42:32,640 --> 00:42:37,040
i don't think we have a chapter on that

00:42:34,720 --> 00:42:39,599
yet where we go into detail about it

00:42:37,040 --> 00:42:40,560
because we want to start with the basics

00:42:39,599 --> 00:42:42,240
first

00:42:40,560 --> 00:42:43,839
so to answer your direct question do we

00:42:42,240 --> 00:42:45,359
learn new features of cobalt like

00:42:43,839 --> 00:42:46,960
handling json

00:42:45,359 --> 00:42:48,640
you learn some new features and the

00:42:46,960 --> 00:42:50,319
intrinsic functions but i don't believe

00:42:48,640 --> 00:42:52,319
at this time we had anything that

00:42:50,319 --> 00:42:54,079
really does json but i believe some

00:42:52,319 --> 00:42:57,920
people went out there

00:42:54,079 --> 00:42:59,280
and wrote some stuff that works in json

00:42:57,920 --> 00:43:01,040
i don't know if they made it public or

00:42:59,280 --> 00:43:03,440
not

00:43:01,040 --> 00:43:04,880
so we don't teach we do well we do teach

00:43:03,440 --> 00:43:06,480
new features

00:43:04,880 --> 00:43:08,480
uh i don't think we have anything

00:43:06,480 --> 00:43:09,280
specifically for handling json but in

00:43:08,480 --> 00:43:12,000
the book i'm

00:43:09,280 --> 00:43:13,040
pretty sure i make reference to it i'll

00:43:12,000 --> 00:43:14,720
just look up the

00:43:13,040 --> 00:43:16,160
the and mike would know better than me

00:43:14,720 --> 00:43:16,960
he probably looked at the book more than

00:43:16,160 --> 00:43:19,040
me

00:43:16,960 --> 00:43:21,200
yeah there's a reference to those exact

00:43:19,040 --> 00:43:23,040
functions with reading json and cobalt

00:43:21,200 --> 00:43:26,319
in the intrinsic functions chapter

00:43:23,040 --> 00:43:28,079
yep yeah thank you mike but i don't know

00:43:26,319 --> 00:43:29,839
if we went into details of showing

00:43:28,079 --> 00:43:31,680
examples but it's pretty easy to find

00:43:29,839 --> 00:43:32,960
examples just doing a just doing an

00:43:31,680 --> 00:43:35,920
internet search

00:43:32,960 --> 00:43:38,079
yeah and i i just that got me thinking

00:43:35,920 --> 00:43:38,560
we could also put some sort of challenge

00:43:38,079 --> 00:43:41,200
in um

00:43:38,560 --> 00:43:41,920
there's one of the challenges you get

00:43:41,200 --> 00:43:44,160
some

00:43:41,920 --> 00:43:45,119
json format but i think you convert it

00:43:44,160 --> 00:43:46,640
to a csv

00:43:45,119 --> 00:43:48,160
file before you upload it to the

00:43:46,640 --> 00:43:49,119
mainframe and then you read it from the

00:43:48,160 --> 00:43:52,480
csv file

00:43:49,119 --> 00:43:53,280
we could change that to read directly

00:43:52,480 --> 00:43:56,160
from

00:43:53,280 --> 00:43:57,359
the jason output or or if i don't know

00:43:56,160 --> 00:43:59,119
who asked that question but

00:43:57,359 --> 00:44:00,960
if you were interested you could check

00:43:59,119 --> 00:44:01,599
out one of those challenges which starts

00:44:00,960 --> 00:44:04,720
from

00:44:01,599 --> 00:44:06,960
uh json data and perhaps

00:44:04,720 --> 00:44:09,040
you know offer offer a contribution as

00:44:06,960 --> 00:44:12,079
well and we would gladly accept it

00:44:09,040 --> 00:44:15,119
but yeah i don't think we have anything

00:44:12,079 --> 00:44:17,200
specific as far as a chapter

00:44:15,119 --> 00:44:18,480
on that particular use case and that

00:44:17,200 --> 00:44:22,240
particular

00:44:18,480 --> 00:44:24,480
intrinsic function yeah i was just gonna

00:44:22,240 --> 00:44:26,319
add that mike saying you know this is a

00:44:24,480 --> 00:44:30,240
great opportunity for

00:44:26,319 --> 00:44:33,040
folks to come and um contribute to this

00:44:30,240 --> 00:44:34,960
course and to the community um looks

00:44:33,040 --> 00:44:35,359
like this might be a good addition to

00:44:34,960 --> 00:44:39,119
our

00:44:35,359 --> 00:44:42,160
advanced topic um sounds like that to me

00:44:39,119 --> 00:44:42,960
so yeah please feel free to come and be

00:44:42,160 --> 00:44:46,560
part of the

00:44:42,960 --> 00:44:49,440
community and the repository and

00:44:46,560 --> 00:44:50,640
contribute we'd love that and i will

00:44:49,440 --> 00:44:53,760
make one statement

00:44:50,640 --> 00:44:56,319
about um the the lab system

00:44:53,760 --> 00:44:56,800
and uh just let you know this is all

00:44:56,319 --> 00:45:00,000
about

00:44:56,800 --> 00:45:00,640
learning and so some people in handling

00:45:00,000 --> 00:45:02,319
json

00:45:00,640 --> 00:45:03,760
it's not a product it's not meant to be

00:45:02,319 --> 00:45:05,440
a production system so

00:45:03,760 --> 00:45:07,040
i wanted to caution people about saying

00:45:05,440 --> 00:45:10,720
oh i'm going to upload

00:45:07,040 --> 00:45:12,240
uh 80 gigabyte of data you know

00:45:10,720 --> 00:45:13,760
no it's a test environment development

00:45:12,240 --> 00:45:15,119
environment please keep your data

00:45:13,760 --> 00:45:18,079
sources small

00:45:15,119 --> 00:45:18,079
i would appreciate it

00:45:25,680 --> 00:45:32,880
um any other questions

00:45:29,839 --> 00:45:36,720
about the course about how to access it

00:45:32,880 --> 00:45:46,640
about cobol we haven't we have smes here

00:45:36,720 --> 00:45:50,000
so you know feel don't be shy

00:45:46,640 --> 00:45:53,760
okay i don't see any other questions um

00:45:50,000 --> 00:45:54,480
on that or the q a um paul or mike any

00:45:53,760 --> 00:45:57,680
other

00:45:54,480 --> 00:45:59,760
um additional points around cobol or the

00:45:57,680 --> 00:46:00,720
open mainframe project and how to access

00:45:59,760 --> 00:46:03,920
or

00:46:00,720 --> 00:46:05,760
we can wrap this up if not

00:46:03,920 --> 00:46:08,240
nothing nothing for me thank you all

00:46:05,760 --> 00:46:10,640
again for joining

00:46:08,240 --> 00:46:11,920
yeah thank you paul thank you mike for

00:46:10,640 --> 00:46:13,839
being here with us and

00:46:11,920 --> 00:46:15,359
thank you so much chris and open

00:46:13,839 --> 00:46:17,599
mainframe project for

00:46:15,359 --> 00:46:20,000
you know hosting this project it is it

00:46:17,599 --> 00:46:22,079
has been an amazing year for cobol

00:46:20,000 --> 00:46:23,119
thanks to open frame project and this

00:46:22,079 --> 00:46:25,280
course

00:46:23,119 --> 00:46:27,040
that has landed there the community has

00:46:25,280 --> 00:46:29,280
greatly benefited it's been

00:46:27,040 --> 00:46:30,400
um it's been really heartwarming to see

00:46:29,280 --> 00:46:32,880
all the engagement

00:46:30,400 --> 00:46:34,640
when we meet for our tsc calls we're

00:46:32,880 --> 00:46:37,119
often looking at issues and

00:46:34,640 --> 00:46:39,920
prs and you know which ones we can

00:46:37,119 --> 00:46:42,400
quickly merge and put out a new pdf so

00:46:39,920 --> 00:46:44,400
thank you for keeping us um you know

00:46:42,400 --> 00:46:46,079
giving us that excitement when we meet

00:46:44,400 --> 00:46:49,200
every once in a week so

00:46:46,079 --> 00:46:51,839
keep that continued engagement um going

00:46:49,200 --> 00:46:53,200
we really look forward to that um happy

00:46:51,839 --> 00:46:55,359
holidays everybody

00:46:53,200 --> 00:46:56,560
yeah and we'll see you all in the new

00:46:55,359 --> 00:46:58,640
year

00:46:56,560 --> 00:46:59,920
great thank you so much this is so

00:46:58,640 --> 00:47:01,520
informative and

00:46:59,920 --> 00:47:03,359
i think there was some great content in

00:47:01,520 --> 00:47:04,000
here so thank you to the cobalt training

00:47:03,359 --> 00:47:05,680
team

00:47:04,000 --> 00:47:07,440
for all the hard work you're doing all

00:47:05,680 --> 00:47:08,800
the amazing job you're doing

00:47:07,440 --> 00:47:10,319
and i just want to thank everybody for

00:47:08,800 --> 00:47:12,400
attending from the open mainframe

00:47:10,319 --> 00:47:14,960
project and don't forget to join us next

00:47:12,400 --> 00:47:16,560
month when we talk about zobi

00:47:14,960 --> 00:47:24,079
all right everybody have a great day

00:47:16,560 --> 00:47:24,079

YouTube URL: https://www.youtube.com/watch?v=jbNSmt8bPkQ


