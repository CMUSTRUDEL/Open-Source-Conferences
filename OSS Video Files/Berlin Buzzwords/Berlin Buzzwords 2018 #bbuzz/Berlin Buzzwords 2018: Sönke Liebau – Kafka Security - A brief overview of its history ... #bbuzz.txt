Title: Berlin Buzzwords 2018: Sönke Liebau – Kafka Security - A brief overview of its history ... #bbuzz
Publication date: 2018-06-13
Playlist: Berlin Buzzwords 2018 #bbuzz
Description: 
	Sönke Liebau talking about "Kafka Security - A brief overview of its history, current state and how it can be customized".

Kafka Security has come a long way since its early days when none was available whatsoever. In this talk I will give a brief overview of how security evolved in Kafka and explain what currently works, as well as giving a brief outlook into what is currently being developed by the community.

We will discuss authentication via SSL, Kerberos und Delegation tokens and touch the Kafka versions that introduced these features and related major changes. Following that I will explain how to use ACLs in Kafka and how they are implemented internally, which will then serve as the basis for diving down into development of custom authorizers and principal builders to extend the basic Kafka Security - for this we will use the example of authorizing based on the groups a user is assigned in an Active Directory structure.

The talk will be fairly technical, we will look at class structures of Kafka and look at how they interact with each other as well as look at code for an example of extending Kafka security features. However non-technical listeners will also gain i solid understanding of what is possible out of the box and what isn't.

Read more:
https://2018.berlinbuzzwords.de/18/session/kafka-security-brief-overview-its-history-current-state-and-how-it-can-be-customized

About Sönke Liebau:
https://2018.berlinbuzzwords.de/users/sonke-liebau

Website: https://berlinbuzzwords.de/
Twitter: https://twitter.com/berlinbuzzwords
LinkedIn: https://www.linkedin.com/showcase/berlin-buzzwords/ 
Reddit: https://www.reddit.com/r/berlinbuzzwords/
Captions: 
	00:00:04,700 --> 00:00:10,250
hello everybody thank you for being here

00:00:07,599 --> 00:00:12,469
yeah as he just danced I'll be talking

00:00:10,250 --> 00:00:14,990
about Kafka security a little bit of its

00:00:12,469 --> 00:00:19,369
history and how you can customize it as

00:00:14,990 --> 00:00:21,529
well as what it can do today first a

00:00:19,369 --> 00:00:24,259
little bit about me I'm a partner and

00:00:21,529 --> 00:00:26,660
co-founder at open core which is a well

00:00:24,259 --> 00:00:28,849
tiny consulting company in Germany we

00:00:26,660 --> 00:00:30,949
are three people and we focus

00:00:28,849 --> 00:00:34,310
exclusively on big data and open source

00:00:30,949 --> 00:00:36,110
projects and my personal focus is Kafka

00:00:34,310 --> 00:00:38,000
and holistic search those are my two

00:00:36,110 --> 00:00:42,039
things which is also why I'm standing

00:00:38,000 --> 00:00:43,910
here today I promise to keep this brief

00:00:42,039 --> 00:00:45,829
since you're here you probably all know

00:00:43,910 --> 00:00:47,359
what Kafka does and I've even seen a

00:00:45,829 --> 00:00:52,429
Kafka shirt and the audience somewhere

00:00:47,359 --> 00:00:55,100
so it is a distributed topic oriented

00:00:52,429 --> 00:00:57,260
partitioned replicated commit log so

00:00:55,100 --> 00:00:59,149
basically what that means is you stick

00:00:57,260 --> 00:01:03,320
data in on one end and you get it out it

00:00:59,149 --> 00:01:04,810
on the other end the important

00:01:03,320 --> 00:01:07,100
distinction here being that it's also a

00:01:04,810 --> 00:01:09,140
publish/subscribe system so it doesn't

00:01:07,100 --> 00:01:11,360
actually send you the data but you need

00:01:09,140 --> 00:01:15,079
to connect to it and retrieve the data

00:01:11,360 --> 00:01:17,150
in a active fashion so Kafka itself is

00:01:15,079 --> 00:01:19,130
never the active part in any data

00:01:17,150 --> 00:01:22,310
equation you always need to connect to

00:01:19,130 --> 00:01:24,110
it and retrieve your data and everything

00:01:22,310 --> 00:01:26,149
else internally replication and things

00:01:24,110 --> 00:01:30,369
like that it takes care of for you and

00:01:26,149 --> 00:01:30,369
does that without you noticing it much

00:01:30,430 --> 00:01:36,009
so where does it fit in today's data

00:01:33,530 --> 00:01:39,409
platforms I've stolen this slide from

00:01:36,009 --> 00:01:40,579
confluent blog post so of course Kafka

00:01:39,409 --> 00:01:42,619
is drawn in the middle of the picture

00:01:40,579 --> 00:01:47,990
this is that's just the way that they

00:01:42,619 --> 00:01:50,630
see the world so at the top you have all

00:01:47,990 --> 00:01:53,680
your source systems whatever those might

00:01:50,630 --> 00:01:56,390
be for a bank or automobile vendor or

00:01:53,680 --> 00:01:58,759
insurance company that'll be different

00:01:56,390 --> 00:02:01,240
for each and every one but then all of

00:01:58,759 --> 00:02:04,520
them sent their data towards Kafka and

00:02:01,240 --> 00:02:06,380
what happens then is different depending

00:02:04,520 --> 00:02:08,330
on what you want to do with the data you

00:02:06,380 --> 00:02:10,100
can of course take it out do some

00:02:08,330 --> 00:02:12,500
processing on it join some streams

00:02:10,100 --> 00:02:15,230
create some materialized views or

00:02:12,500 --> 00:02:18,500
whatever you need for your specific use

00:02:15,230 --> 00:02:21,110
case and then stick the data begins

00:02:18,500 --> 00:02:23,810
kafka you can also do real-time

00:02:21,110 --> 00:02:27,670
analytics and feed dashboards out of

00:02:23,810 --> 00:02:30,770
Kafka in real time as the data comes in

00:02:27,670 --> 00:02:32,780
but of course for larger analytics use

00:02:30,770 --> 00:02:35,420
cases you'd probably want to stick all

00:02:32,780 --> 00:02:39,110
your data into HDFS or a more

00:02:35,420 --> 00:02:40,910
traditional data warehouse in order to

00:02:39,110 --> 00:02:44,420
get back to it later and do larger

00:02:40,910 --> 00:02:47,150
processing jobs but what this means is

00:02:44,420 --> 00:02:49,220
pretty much all of your data at some

00:02:47,150 --> 00:02:51,380
point in time is in calf comm which of

00:02:49,220 --> 00:02:53,900
course allows the question what about

00:02:51,380 --> 00:02:57,350
security can we keep it secure in there

00:02:53,900 --> 00:03:01,310
or is that like an open hole in our

00:02:57,350 --> 00:03:05,780
entire security architecture back in the

00:03:01,310 --> 00:03:08,480
day 3:09 Kafka this was sort of the view

00:03:05,780 --> 00:03:11,690
that was taken towards security this

00:03:08,480 --> 00:03:13,700
picture is from a TV show called Burn

00:03:11,690 --> 00:03:16,100
Notice about a spy who keeps getting

00:03:13,700 --> 00:03:17,750
into trouble and I think here he has a

00:03:16,100 --> 00:03:19,940
meeting with a crooked cop or something

00:03:17,750 --> 00:03:24,049
and he calls this the ring of trust

00:03:19,940 --> 00:03:26,420
you're either in or you're not and for

00:03:24,049 --> 00:03:29,930
us IT guys of course the wall of fire is

00:03:26,420 --> 00:03:31,640
a quite a good analogy because back in

00:03:29,930 --> 00:03:33,709
the day if you could get through the

00:03:31,640 --> 00:03:38,450
firewall to a kafka you could get data

00:03:33,709 --> 00:03:40,940
out and in and even delete stuff so it

00:03:38,450 --> 00:03:46,239
was a fairly black-and-white picture of

00:03:40,940 --> 00:03:49,820
what you could or could not do but since

00:03:46,239 --> 00:03:51,769
Kafka was developed a bit further and I

00:03:49,820 --> 00:03:54,110
think the the big turning point here was

00:03:51,769 --> 00:03:56,780
when confluent was founded and they

00:03:54,110 --> 00:03:58,730
started developing in earnest on the

00:03:56,780 --> 00:04:00,350
product and putting it out into the

00:03:58,730 --> 00:04:03,110
market so a lot of people are using

00:04:00,350 --> 00:04:05,570
Kafka today and security became more and

00:04:03,110 --> 00:04:07,910
more important so there has been a few

00:04:05,570 --> 00:04:12,049
improvements made over the day over the

00:04:07,910 --> 00:04:14,900
years the first and biggest step was the

00:04:12,049 --> 00:04:18,979
implementation of SSL for authentication

00:04:14,900 --> 00:04:22,580
as well as encryption and Kerberos as an

00:04:18,979 --> 00:04:25,550
authentication mechanism and then later

00:04:22,580 --> 00:04:28,539
on they also added sessile plain

00:04:25,550 --> 00:04:31,449
mechanism sessle's graham and recently

00:04:28,539 --> 00:04:33,460
delegation tokens was the

00:04:31,449 --> 00:04:38,770
youngest addition to the kafka security

00:04:33,460 --> 00:04:41,650
family there's a little bit of a history

00:04:38,770 --> 00:04:45,069
of when this was implemented you can see

00:04:41,650 --> 00:04:47,550
version oh nine that was the biggie that

00:04:45,069 --> 00:04:50,289
brought us SSL and Kerberos and

00:04:47,550 --> 00:04:53,650
authentication as well as authorization

00:04:50,289 --> 00:04:55,270
in general so this was the huge code Rob

00:04:53,650 --> 00:04:58,719
that actually made security possible at

00:04:55,270 --> 00:05:01,659
all and you can also see that those two

00:04:58,719 --> 00:05:04,449
were develop sort of together back here

00:05:01,659 --> 00:05:06,849
the zero numbers zero is the the

00:05:04,449 --> 00:05:10,360
official Apache bug tracker where things

00:05:06,849 --> 00:05:12,099
like this are kept track off fairly

00:05:10,360 --> 00:05:14,229
close to each other and they've actually

00:05:12,099 --> 00:05:17,050
been documented in the same Kip which is

00:05:14,229 --> 00:05:20,710
a kafka improvement proposal so any

00:05:17,050 --> 00:05:22,710
larger or large exchange or pretty much

00:05:20,710 --> 00:05:26,649
anything that changes public-facing

00:05:22,710 --> 00:05:28,749
behavior of Kafka needs to be designed

00:05:26,649 --> 00:05:31,240
as a Kip so sort of documented and

00:05:28,749 --> 00:05:33,729
discussed before it's actually approved

00:05:31,240 --> 00:05:36,430
for implementation and you can see that

00:05:33,729 --> 00:05:38,919
SSL and Kerberos were put into the same

00:05:36,430 --> 00:05:43,629
Kip for development and that both of

00:05:38,919 --> 00:05:46,270
those landed a no.9 since the Cecil

00:05:43,629 --> 00:05:48,939
stuff and I'll explain the abbreviations

00:05:46,270 --> 00:05:50,979
on the next slide and was already there

00:05:48,939 --> 00:05:54,069
it was fairly obvious to put to have

00:05:50,979 --> 00:05:56,139
additional implementations in place so

00:05:54,069 --> 00:05:57,879
the first one that was added was plain

00:05:56,139 --> 00:06:02,139
which is just username and password and

00:05:57,879 --> 00:06:06,099
then scram came later on and as I said

00:06:02,139 --> 00:06:08,050
delegation tokens just hit us in 1.1 and

00:06:06,099 --> 00:06:10,689
you can see delegation tokens the zero

00:06:08,050 --> 00:06:12,459
number is actually fairly small as well

00:06:10,689 --> 00:06:15,009
as the Kip number comes before for

00:06:12,459 --> 00:06:16,930
example sessle's gram as well so that

00:06:15,009 --> 00:06:18,729
features a bit larger than the others

00:06:16,930 --> 00:06:20,129
and has been in development for quite

00:06:18,729 --> 00:06:23,620
some time

00:06:20,129 --> 00:06:25,659
and it actually piggy backs on the on

00:06:23,620 --> 00:06:26,919
the sessile and scram implementation so

00:06:25,659 --> 00:06:28,810
that was probably also one of the

00:06:26,919 --> 00:06:30,520
reasons why it took a bit longer because

00:06:28,810 --> 00:06:39,249
they waited on those to be finished

00:06:30,520 --> 00:06:40,870
right so abbreviations Cecil is just a

00:06:39,249 --> 00:06:42,669
simple authentication and security layer

00:06:40,870 --> 00:06:44,840
which is basically an abstraction of

00:06:42,669 --> 00:06:47,630
different security

00:06:44,840 --> 00:06:49,660
and authentication mechanisms so

00:06:47,630 --> 00:06:52,160
basically - it's just a wrapper around

00:06:49,660 --> 00:06:57,950
some authentication method and we saw

00:06:52,160 --> 00:07:02,060
plain plain text and scram male Jas is a

00:06:57,950 --> 00:07:04,700
way of telling Java how to how to do

00:07:02,060 --> 00:07:06,320
security so basically in your Jas file

00:07:04,700 --> 00:07:10,820
you will tell Java that you want to use

00:07:06,320 --> 00:07:13,100
settle and then GSS API is sort of the

00:07:10,820 --> 00:07:14,389
same thing as sessile and someone who

00:07:13,100 --> 00:07:16,340
knows better than me would probably

00:07:14,389 --> 00:07:18,320
start yelling at me right about now but

00:07:16,340 --> 00:07:21,410
for me it's also just a wrapper around

00:07:18,320 --> 00:07:25,729
security mechanisms so if we use

00:07:21,410 --> 00:07:27,919
Kerberos with Kafka we write a Jas file

00:07:25,729 --> 00:07:30,410
tell it to use tehsil which then wraps

00:07:27,919 --> 00:07:32,360
gssapi which then again reps Kerberos

00:07:30,410 --> 00:07:34,090
which probably has some other mechanism

00:07:32,360 --> 00:07:38,300
under the hood for authentication again

00:07:34,090 --> 00:07:41,810
so all of this is fairly convoluted you

00:07:38,300 --> 00:07:44,090
might say and scram is the Salter

00:07:41,810 --> 00:07:46,639
challenge and response authentication

00:07:44,090 --> 00:07:49,340
methods which does away with sending

00:07:46,639 --> 00:07:51,110
passwords and plaintext over the network

00:07:49,340 --> 00:07:53,150
layer and we'll have a look at that in

00:07:51,110 --> 00:07:59,030
more detail on one of the next slides I

00:07:53,150 --> 00:08:01,160
think all right so what's the

00:07:59,030 --> 00:08:04,010
authentication options that we have SSL

00:08:01,160 --> 00:08:08,120
is a fairly obvious choice everybody

00:08:04,010 --> 00:08:10,789
sort of knows it you have a central

00:08:08,120 --> 00:08:14,539
point which is your root certificate

00:08:10,789 --> 00:08:16,490
authority and that signs certificates

00:08:14,539 --> 00:08:19,729
that you have an issue to your users and

00:08:16,490 --> 00:08:21,080
servers up here is a server certificate

00:08:19,729 --> 00:08:24,229
so you can see that you actually have

00:08:21,080 --> 00:08:26,600
the server name in here and down here a

00:08:24,229 --> 00:08:29,139
user certificate would not have a server

00:08:26,600 --> 00:08:33,260
name but rather just my personal name

00:08:29,139 --> 00:08:35,740
that this was issued to and the way that

00:08:33,260 --> 00:08:38,750
this thing works is whenever the user

00:08:35,740 --> 00:08:40,539
connects to a Kafka server and this

00:08:38,750 --> 00:08:42,919
instance could be anything else as well

00:08:40,539 --> 00:08:45,050
first the server sends the user his

00:08:42,919 --> 00:08:47,690
certificate and the user then checks

00:08:45,050 --> 00:08:50,150
whether this certificate was issued or

00:08:47,690 --> 00:08:50,959
signed by a certificate authority that

00:08:50,150 --> 00:08:55,580
he trusts

00:08:50,959 --> 00:08:57,589
if not then everything fails the second

00:08:55,580 --> 00:08:58,640
step is that the the users process then

00:08:57,589 --> 00:09:01,100
checks whether the server

00:08:58,640 --> 00:09:03,560
name actually matches the server that

00:09:01,100 --> 00:09:05,780
sent him the certificate which by

00:09:03,560 --> 00:09:07,630
default is turned off in Kafka if you

00:09:05,780 --> 00:09:10,900
want this feature then you need to

00:09:07,630 --> 00:09:15,050
switch to the default to turn this on

00:09:10,900 --> 00:09:17,240
and at this point the process can stop

00:09:15,050 --> 00:09:18,860
but the only thing that we achieved then

00:09:17,240 --> 00:09:20,060
is that we authenticated that the server

00:09:18,860 --> 00:09:23,150
is who we think he is

00:09:20,060 --> 00:09:26,360
and we encrypted our communication for

00:09:23,150 --> 00:09:28,430
authentication of the client or the user

00:09:26,360 --> 00:09:31,010
down here also needs to send his

00:09:28,430 --> 00:09:35,240
certificate up to the server so that the

00:09:31,010 --> 00:09:38,120
server can have a look at it and see if

00:09:35,240 --> 00:09:41,860
this user is someone or assigned by a

00:09:38,120 --> 00:09:44,090
certificate authority that he trusts as

00:09:41,860 --> 00:09:47,690
I said this is fairly well known

00:09:44,090 --> 00:09:51,260
throughout the the industry most larger

00:09:47,690 --> 00:09:53,600
companies run cas of their own so this

00:09:51,260 --> 00:09:56,090
in theory should be easy to implement

00:09:53,600 --> 00:09:58,310
but walk into a customer's office and

00:09:56,090 --> 00:10:00,920
tell him that you need five certificates

00:09:58,310 --> 00:10:03,710
signed by their root CA to set up the

00:10:00,920 --> 00:10:07,460
server and see what they how they look

00:10:03,710 --> 00:10:12,620
at you most people actually have trouble

00:10:07,460 --> 00:10:15,440
with this another issue with this is if

00:10:12,620 --> 00:10:17,450
a certificate gets stolen or lost then

00:10:15,440 --> 00:10:20,030
there's no easy way of revoking it

00:10:17,450 --> 00:10:20,900
certificates usually are valid for one

00:10:20,030 --> 00:10:23,410
to three years

00:10:20,900 --> 00:10:25,460
are they the normal terms that you see

00:10:23,410 --> 00:10:27,010
so if someone gets a hold of one of

00:10:25,460 --> 00:10:30,280
these certificates and of course you can

00:10:27,010 --> 00:10:32,900
use it to connect to your cluster and

00:10:30,280 --> 00:10:34,700
the normal way of taking care of this

00:10:32,900 --> 00:10:37,190
would be via certificate revocation

00:10:34,700 --> 00:10:39,590
lists which the server process checks

00:10:37,190 --> 00:10:42,290
and if the certificate is in there then

00:10:39,590 --> 00:10:43,850
it wouldn't be accepted as valid however

00:10:42,290 --> 00:10:46,880
Kafka doesn't do this

00:10:43,850 --> 00:10:48,410
there's a an open zero for it it's been

00:10:46,880 --> 00:10:49,760
around for a couple of years now I think

00:10:48,410 --> 00:10:52,430
and there hasn't been much activity on

00:10:49,760 --> 00:10:56,020
it so I wouldn't hold my breath whether

00:10:52,430 --> 00:10:58,790
they'll be intermittent anytime soon and

00:10:56,020 --> 00:11:00,470
if you sign your certificates with the

00:10:58,790 --> 00:11:01,940
shorter validity so there's been some

00:11:00,470 --> 00:11:05,330
discussion around that on the mailing

00:11:01,940 --> 00:11:07,580
list recently as well you could say sign

00:11:05,330 --> 00:11:10,610
is certificate just for one day but you

00:11:07,580 --> 00:11:12,470
need to restart every process that that

00:11:10,610 --> 00:11:13,790
uses this certificate so that'll that

00:11:12,470 --> 00:11:16,400
would make you restart at least your

00:11:13,790 --> 00:11:19,160
clients fairly often if you wanted to do

00:11:16,400 --> 00:11:23,420
this and there's better options as we'll

00:11:19,160 --> 00:11:24,650
see on the next couple of slides and one

00:11:23,420 --> 00:11:26,470
last thing about certificates they

00:11:24,650 --> 00:11:28,400
always run out at the wrong time you

00:11:26,470 --> 00:11:30,080
should think that you can actually

00:11:28,400 --> 00:11:31,820
predict fairly well when a certificate

00:11:30,080 --> 00:11:34,610
runs out because it's like a fixed date

00:11:31,820 --> 00:11:36,410
but for some reason everybody is always

00:11:34,610 --> 00:11:39,350
surprised when it's the certificate

00:11:36,410 --> 00:11:40,730
expired and then it's Friday before a

00:11:39,350 --> 00:11:42,530
long weekend it's the Christmas party

00:11:40,730 --> 00:11:49,460
and your security guys on parental leave

00:11:42,530 --> 00:11:52,220
and it just doesn't work so so still

00:11:49,460 --> 00:11:55,100
plane is pretty much just username and

00:11:52,220 --> 00:11:57,680
password you can figure out via a jas

00:11:55,100 --> 00:12:00,590
file we've put a Kafka's server

00:11:57,680 --> 00:12:02,180
configuration snippet of VM and I took

00:12:00,590 --> 00:12:04,220
this from the official Kafka

00:12:02,180 --> 00:12:05,960
documentation so if you want to read a

00:12:04,220 --> 00:12:09,260
bit more about this that's where you can

00:12:05,960 --> 00:12:11,360
find that as well and as you can see the

00:12:09,260 --> 00:12:13,430
username and password up here that's how

00:12:11,360 --> 00:12:15,110
the Kafka brokers talk to each other so

00:12:13,430 --> 00:12:17,720
this would be used for inter broker

00:12:15,110 --> 00:12:22,130
communication and then you just stick

00:12:17,720 --> 00:12:24,230
additional users down here and when your

00:12:22,130 --> 00:12:26,480
client connects he can send those

00:12:24,230 --> 00:12:29,680
usernames and passwords along and those

00:12:26,480 --> 00:12:31,820
would be used for authentication of

00:12:29,680 --> 00:12:33,650
course it's not really nice to put

00:12:31,820 --> 00:12:36,320
usernames and passwords in a plain text

00:12:33,650 --> 00:12:38,780
file like this so up here you have the

00:12:36,320 --> 00:12:41,600
plain login module you can extend that

00:12:38,780 --> 00:12:43,280
and customize that to retrieve your

00:12:41,600 --> 00:12:44,570
passwords from I don't know Active

00:12:43,280 --> 00:12:47,480
Directory or some sort of database

00:12:44,570 --> 00:12:49,880
somewhere or use a Hadoop key management

00:12:47,480 --> 00:12:52,900
server whatever is used in your

00:12:49,880 --> 00:12:57,080
environment you can connect to that and

00:12:52,900 --> 00:12:59,060
do this however your password will be

00:12:57,080 --> 00:13:00,770
sent over the wire in an unencrypted

00:12:59,060 --> 00:13:04,250
form unless you combine this with

00:13:00,770 --> 00:13:06,470
transport layer security so this is a I

00:13:04,250 --> 00:13:12,700
wouldn't recommend this for a production

00:13:06,470 --> 00:13:16,970
environment necessarily sessile scram is

00:13:12,700 --> 00:13:19,550
has been invented to pick up on that

00:13:16,970 --> 00:13:22,580
exact limitation so this the main reason

00:13:19,550 --> 00:13:25,430
here was to avoid sending clear text

00:13:22,580 --> 00:13:26,330
passwords over the net so what this does

00:13:25,430 --> 00:13:28,250
is

00:13:26,330 --> 00:13:31,700
and I can't really explain this I'm

00:13:28,250 --> 00:13:33,140
sorry but it sort of sends a random

00:13:31,700 --> 00:13:34,910
value to the server the server and

00:13:33,140 --> 00:13:36,440
responds with the challenge which only

00:13:34,910 --> 00:13:39,230
the client who knows the password can

00:13:36,440 --> 00:13:42,170
generate a valid value for and that way

00:13:39,230 --> 00:13:43,730
they sort of figure out that both

00:13:42,170 --> 00:13:45,560
parties know the password and that it

00:13:43,730 --> 00:13:49,760
matches without actually transmitting

00:13:45,560 --> 00:13:52,130
the password over the network passwords

00:13:49,760 --> 00:13:53,600
for this actually not stored in the Jas

00:13:52,130 --> 00:13:55,940
file anymore you can see we only have

00:13:53,600 --> 00:13:59,450
the the admin for inter broker

00:13:55,940 --> 00:14:01,790
communication up here any more passwords

00:13:59,450 --> 00:14:03,380
for this a store and zookeeper so in

00:14:01,790 --> 00:14:05,390
order to administrate this you'd need to

00:14:03,380 --> 00:14:10,100
be able to access the paper and put

00:14:05,390 --> 00:14:12,050
stuff in there and what's this also an

00:14:10,100 --> 00:14:13,790
additional feature that this has is you

00:14:12,050 --> 00:14:16,160
can bind it to your transport layer

00:14:13,790 --> 00:14:17,960
security which means that the

00:14:16,160 --> 00:14:19,820
information from your certificate is

00:14:17,960 --> 00:14:22,370
somehow part of the exchange for the

00:14:19,820 --> 00:14:26,590
server for added security to ensure that

00:14:22,370 --> 00:14:26,590
you actually are who you say you are

00:14:27,910 --> 00:14:35,480
right sessile gssapi this is the where

00:14:32,930 --> 00:14:37,190
the money is literally because if you're

00:14:35,480 --> 00:14:38,920
good at solving Kerberos issues then you

00:14:37,190 --> 00:14:41,030
can make a lot of money consulting

00:14:38,920 --> 00:14:43,540
everybody has them and nobody knows how

00:14:41,030 --> 00:14:43,540
to figure them out

00:14:45,190 --> 00:14:51,200
Kerberos can be used but actually as I

00:14:48,350 --> 00:14:53,480
said gssapi is also a reference security

00:14:51,200 --> 00:14:56,420
mechanisms but it when I say gssapi

00:14:53,480 --> 00:14:58,400
today I mean Kerberos because this is

00:14:56,420 --> 00:15:01,820
the only implementation that Kafka

00:14:58,400 --> 00:15:04,250
supports in this way and it can be used

00:15:01,820 --> 00:15:07,940
to integrate with Active Directory or

00:15:04,250 --> 00:15:09,680
different directory services so what

00:15:07,940 --> 00:15:11,390
that means is your user can on the

00:15:09,680 --> 00:15:12,890
command line type K in it with his

00:15:11,390 --> 00:15:16,190
username you'll be asked for his

00:15:12,890 --> 00:15:17,810
password and that password will then

00:15:16,190 --> 00:15:20,840
actually be checked in your corporate

00:15:17,810 --> 00:15:22,400
Active Directory and if that user has

00:15:20,840 --> 00:15:24,920
the correct password then you'll get a

00:15:22,400 --> 00:15:28,400
ticket back and can use that extra

00:15:24,920 --> 00:15:32,240
services there's two different types of

00:15:28,400 --> 00:15:34,910
principles in Kerberos there's one

00:15:32,240 --> 00:15:36,050
that's the user principal name which is

00:15:34,910 --> 00:15:38,180
Who I am

00:15:36,050 --> 00:15:39,800
so that can be used from pretty much any

00:15:38,180 --> 00:15:42,230
any machine

00:15:39,800 --> 00:15:45,019
and service principle names are usually

00:15:42,230 --> 00:15:46,670
bound to a specific server that's the

00:15:45,019 --> 00:15:48,380
same deal as with a certificate where

00:15:46,670 --> 00:15:50,390
the user checks whether the server who

00:15:48,380 --> 00:15:56,420
sent it is also the one that was issued

00:15:50,390 --> 00:15:57,800
this certificate yes and as I just said

00:15:56,420 --> 00:15:59,870
the initial authentication is via

00:15:57,800 --> 00:16:01,940
password which of course does not work

00:15:59,870 --> 00:16:03,709
if I want this to run as a automated

00:16:01,940 --> 00:16:05,990
process that can be restarted or come up

00:16:03,709 --> 00:16:08,660
when the machine comes up so that's

00:16:05,990 --> 00:16:10,850
there's also the concept of a key tap

00:16:08,660 --> 00:16:14,240
which can be used to retrieve a ticket

00:16:10,850 --> 00:16:16,370
and that key tap is pretty much your

00:16:14,240 --> 00:16:18,649
password in the file it's a little more

00:16:16,370 --> 00:16:20,720
complicated than that but what it boils

00:16:18,649 --> 00:16:23,029
down to is if someone gets a hold of

00:16:20,720 --> 00:16:28,300
that file he is you for all intents and

00:16:23,029 --> 00:16:31,370
purposes so protect those files well and

00:16:28,300 --> 00:16:35,120
on the next slide we can see our

00:16:31,370 --> 00:16:37,100
Kerberos authentication sort of works so

00:16:35,120 --> 00:16:39,890
if I'm a client and I want to access the

00:16:37,100 --> 00:16:41,810
Kafka server back here what I do is I

00:16:39,890 --> 00:16:45,170
contact the key distribution center

00:16:41,810 --> 00:16:47,870
which would be Active Directory in the

00:16:45,170 --> 00:16:51,160
example we just have and try to get a

00:16:47,870 --> 00:16:55,339
ticket granting ticket the TGT for

00:16:51,160 --> 00:16:56,990
further speaking the KDC then checks

00:16:55,339 --> 00:16:58,790
whether I have a valid key table or a

00:16:56,990 --> 00:17:00,440
password and a little bit more there's a

00:16:58,790 --> 00:17:04,880
reverse DNS lookup and stuff like that

00:17:00,440 --> 00:17:07,429
and then I get a ticket back which is a

00:17:04,880 --> 00:17:09,079
ticket granting ticket sorry in the next

00:17:07,429 --> 00:17:11,630
step when I want to access cop car I

00:17:09,079 --> 00:17:13,280
again go to the KDC but this happens

00:17:11,630 --> 00:17:16,160
transparently in the background I don't

00:17:13,280 --> 00:17:17,809
have to actually do this myself and with

00:17:16,160 --> 00:17:20,990
this ticket granting ticket

00:17:17,809 --> 00:17:24,579
I asked the KDC for a ticket that allows

00:17:20,990 --> 00:17:27,530
me to incur at open court calm Texas

00:17:24,579 --> 00:17:30,710
Kafka server one at open court chrome

00:17:27,530 --> 00:17:33,230
which is that guy back here and with

00:17:30,710 --> 00:17:35,720
this ticket that I got I'll actually go

00:17:33,230 --> 00:17:37,700
to this server who can check the ticket

00:17:35,720 --> 00:17:41,840
without actually talking to Active

00:17:37,700 --> 00:17:45,290
Directory and if all is well I'm allowed

00:17:41,840 --> 00:17:47,240
to exit the server so if we now have a

00:17:45,290 --> 00:17:51,070
larger Kafka cluster say and a hundred

00:17:47,240 --> 00:17:53,419
machines and I read from a topic that's

00:17:51,070 --> 00:17:53,730
fairly well distributed across the

00:17:53,419 --> 00:17:55,650
entire

00:17:53,730 --> 00:17:58,080
cluster then of course I need to go out

00:17:55,650 --> 00:18:02,010
and get a ticket for each and every one

00:17:58,080 --> 00:18:04,169
of those servers and if it's not just me

00:18:02,010 --> 00:18:06,980
doing this but it might be a smart job

00:18:04,169 --> 00:18:09,780
that runs distributed over 100 nodes

00:18:06,980 --> 00:18:13,590
then there'll be quite a few tickets to

00:18:09,780 --> 00:18:15,419
be issued and maybe I that job retrieves

00:18:13,590 --> 00:18:18,540
the data and wants to store it into HDFS

00:18:15,419 --> 00:18:21,360
so again go to the KDC and grab quite a

00:18:18,540 --> 00:18:25,110
few tickets for storing the data into

00:18:21,360 --> 00:18:26,340
HDFS so if you have larger jobs there

00:18:25,110 --> 00:18:32,669
can be quite a bit of pressure on your

00:18:26,340 --> 00:18:35,510
KDC when you run these so that was one

00:18:32,669 --> 00:18:38,309
of the main reasons the other one being

00:18:35,510 --> 00:18:42,270
for distributed jobs if you wanted those

00:18:38,309 --> 00:18:44,940
to run for a long long time you had to

00:18:42,270 --> 00:18:46,440
give your key top to the job and

00:18:44,940 --> 00:18:48,809
distribute that throughout your cluster

00:18:46,440 --> 00:18:50,730
which as I mentioned you want to keep

00:18:48,809 --> 00:18:55,669
your feet up fairly close to your heart

00:18:50,730 --> 00:18:57,990
so people were not too happy with that

00:18:55,669 --> 00:19:01,140
so then Kafka adopted something that was

00:18:57,990 --> 00:19:02,490
I was probably not invented in the

00:19:01,140 --> 00:19:04,679
Hadoop world I'm fairly sure other

00:19:02,490 --> 00:19:06,870
systems have it as well I first came

00:19:04,679 --> 00:19:09,240
across it in the Hadoop world so for me

00:19:06,870 --> 00:19:12,210
it's always been in Hadoop invention so

00:19:09,240 --> 00:19:16,049
called delegation tokens so those hit in

00:19:12,210 --> 00:19:19,169
Kafka 101 and what those allow us to do

00:19:16,049 --> 00:19:21,900
is after we authenticate with a primary

00:19:19,169 --> 00:19:26,160
authentication method against Kafka so

00:19:21,900 --> 00:19:29,220
SSL or Kerberos plain Ostrom pretty much

00:19:26,160 --> 00:19:31,140
anything works we can tell Kafka that

00:19:29,220 --> 00:19:32,400
we'd like to have a delegation token for

00:19:31,140 --> 00:19:35,580
the user that we currently authenticated

00:19:32,400 --> 00:19:37,650
s and then Kafka will pretty much just

00:19:35,580 --> 00:19:40,040
generate a random value stall that

00:19:37,650 --> 00:19:42,870
internally and give that back to me and

00:19:40,040 --> 00:19:46,410
what I can then do is I can use this

00:19:42,870 --> 00:19:48,330
token to authenticate as myself so if I

00:19:46,410 --> 00:19:50,790
have for example a distributed spark job

00:19:48,330 --> 00:19:53,280
I'll just take that token and head it

00:19:50,790 --> 00:19:54,720
out to all the executors and they'll use

00:19:53,280 --> 00:19:56,970
that token in their communication with

00:19:54,720 --> 00:19:59,940
CAF calm and Kafka will say write

00:19:56,970 --> 00:20:01,679
eurozone Co but the job's never had my

00:19:59,940 --> 00:20:04,130
key job or needed a certificate or

00:20:01,679 --> 00:20:04,130
anything else

00:20:04,529 --> 00:20:08,649
these tokens of course are only valid

00:20:06,970 --> 00:20:10,320
for Kafka so if someone steals one of

00:20:08,649 --> 00:20:15,220
those he couldn't use those to access

00:20:10,320 --> 00:20:17,019
HDFS any database nothing else also

00:20:15,220 --> 00:20:19,659
these tokens are only valid for a

00:20:17,019 --> 00:20:21,940
limited amount of time by default they

00:20:19,659 --> 00:20:25,059
are valid for a day and you can renew

00:20:21,940 --> 00:20:27,609
them for up to seven days after that

00:20:25,059 --> 00:20:28,989
there's no way of renewing these unless

00:20:27,609 --> 00:20:30,909
of course you change the configuration

00:20:28,989 --> 00:20:35,019
as always nothing that can't be

00:20:30,909 --> 00:20:36,820
configured after those seven days you

00:20:35,019 --> 00:20:39,340
need to real CENTAC eight with a primary

00:20:36,820 --> 00:20:42,940
method of of authentication and get a

00:20:39,340 --> 00:20:44,470
new ticket so if one of those tokens get

00:20:42,940 --> 00:20:47,200
stolen and someone actually manages to

00:20:44,470 --> 00:20:49,600
use it to retrieve data seven days is

00:20:47,200 --> 00:20:52,299
the maximum that he can can do that for

00:20:49,600 --> 00:20:54,399
and of course unless certificates or

00:20:52,299 --> 00:20:56,470
unlike certificates it's fairly easy to

00:20:54,399 --> 00:20:58,239
revoke these you pretty much just talk I

00:20:56,470 --> 00:21:00,669
forgot to delete that token and because

00:20:58,239 --> 00:21:02,049
it's thought internally there once it's

00:21:00,669 --> 00:21:05,350
gone it can't be used for authentication

00:21:02,049 --> 00:21:08,379
anymore so the main focus of these

00:21:05,350 --> 00:21:12,190
things is to be used in long-running

00:21:08,379 --> 00:21:14,590
distributed jobs so spark streaming and

00:21:12,190 --> 00:21:17,139
spark streaming actually has internal

00:21:14,590 --> 00:21:19,690
methods of obtaining these delegation

00:21:17,139 --> 00:21:23,139
tokens and renewing them for you it just

00:21:19,690 --> 00:21:24,759
doesn't have these for Kafka yet so if

00:21:23,139 --> 00:21:26,679
someone feels like building that

00:21:24,759 --> 00:21:30,749
implementation the entire community

00:21:26,679 --> 00:21:30,749
would very much appreciate that

00:21:32,789 --> 00:21:40,929
yeah so this is just the picture there

00:21:35,919 --> 00:21:42,159
was supposed to click - all right so we

00:21:40,929 --> 00:21:44,919
have quite a few different

00:21:42,159 --> 00:21:47,139
authentication methods and we couldn't

00:21:44,919 --> 00:21:50,230
happily mix and match those in our cop

00:21:47,139 --> 00:21:52,629
car broker configuration so as you as

00:21:50,230 --> 00:21:54,039
you see up here you can search the plane

00:21:52,629 --> 00:21:56,950
and then you can also combine that with

00:21:54,039 --> 00:21:58,659
SSL sessile plane so your broker

00:21:56,950 --> 00:22:00,850
configuration you can pretty much have

00:21:58,659 --> 00:22:03,730
as many ports as you like open with

00:22:00,850 --> 00:22:05,559
different authentication mechanisms and

00:22:03,730 --> 00:22:07,059
you just need to keep track of those in

00:22:05,559 --> 00:22:09,070
your client configuration to be sure

00:22:07,059 --> 00:22:13,480
that you always connect to a matching

00:22:09,070 --> 00:22:15,730
port in recent versions I think it was

00:22:13,480 --> 00:22:17,940
in oh 10 - yep

00:22:15,730 --> 00:22:20,759
I put it down here Oh 10 -

00:22:17,940 --> 00:22:22,980
there was a change in the way that this

00:22:20,759 --> 00:22:25,580
is configured it used to be a bit

00:22:22,980 --> 00:22:28,289
problematic in some Network scenarios

00:22:25,580 --> 00:22:30,389
especially if netting was involved or

00:22:28,289 --> 00:22:33,870
you had to go by a proxy to access Kafka

00:22:30,389 --> 00:22:36,570
then sometimes there was a bit of an

00:22:33,870 --> 00:22:39,149
issue because your client always

00:22:36,570 --> 00:22:41,549
connects to the the internal IP address

00:22:39,149 --> 00:22:43,649
of your Kafka brokers and if that

00:22:41,549 --> 00:22:46,200
differs from for example a nut server

00:22:43,649 --> 00:22:47,940
along the way then sometimes there could

00:22:46,200 --> 00:22:50,629
be issue so sometimes it actually was

00:22:47,940 --> 00:22:55,289
not even possible to have that scenario

00:22:50,629 --> 00:22:56,940
so in later versions past 10 - you can

00:22:55,289 --> 00:22:59,070
actually distinguish distinguish between

00:22:56,940 --> 00:23:02,070
external and internal network traffic

00:22:59,070 --> 00:23:09,509
which makes those scenarios much easier

00:23:02,070 --> 00:23:11,370
to accommodate ok so far we've talked

00:23:09,509 --> 00:23:14,070
about authentication only so now the

00:23:11,370 --> 00:23:18,360
cluster knows who I am when I talk to

00:23:14,070 --> 00:23:21,000
him but so far that's only so much we

00:23:18,360 --> 00:23:22,500
had already before with the firewall so

00:23:21,000 --> 00:23:24,480
we could have a black and white scenario

00:23:22,500 --> 00:23:27,840
you can read or can't read or can write

00:23:24,480 --> 00:23:29,759
or can't write so in the initial commit

00:23:27,840 --> 00:23:33,870
that I pointed out earlier version o dot

00:23:29,759 --> 00:23:36,659
9 the Kafka also gained the ability of

00:23:33,870 --> 00:23:41,549
having a of having access control list

00:23:36,659 --> 00:23:44,549
ACLs and the reference architecture for

00:23:41,549 --> 00:23:50,370
this is the simple ACL authorizer which

00:23:44,549 --> 00:23:53,129
stores its ACLs and zookeeper and it's

00:23:50,370 --> 00:23:55,440
AC else you can try and read right it's

00:23:53,129 --> 00:23:58,980
it's fairly standard I won't go into too

00:23:55,440 --> 00:24:00,539
much detail on this only thing that's

00:23:58,980 --> 00:24:03,539
noticeable is you can also have super

00:24:00,539 --> 00:24:05,309
users for those ACLs are not even

00:24:03,539 --> 00:24:07,350
checked those are just granted any

00:24:05,309 --> 00:24:09,149
requests that they make those would

00:24:07,350 --> 00:24:11,279
usually be your Kafka broker so that

00:24:09,149 --> 00:24:15,179
within the cluster those guys can talk

00:24:11,279 --> 00:24:17,340
to each other freely what is worth

00:24:15,179 --> 00:24:19,740
noticing is that all of this is entirely

00:24:17,340 --> 00:24:23,730
pluggable so the simple ACL authorizer

00:24:19,740 --> 00:24:25,580
is just a an example so to say of how

00:24:23,730 --> 00:24:29,210
this can be handled

00:24:25,580 --> 00:24:31,330
however my personal opinion is that it's

00:24:29,210 --> 00:24:32,890
it's quite suited

00:24:31,330 --> 00:24:36,220
for roughly eighteen ninety eight

00:24:32,890 --> 00:24:37,720
percent of all use cases maybe we can

00:24:36,220 --> 00:24:40,780
have a quick show of hands who uses

00:24:37,720 --> 00:24:45,940
Kafka and please keep your hands up

00:24:40,780 --> 00:24:49,770
and who has security enabled and who is

00:24:45,940 --> 00:24:53,070
not using these simple ACL authorizer

00:24:49,770 --> 00:24:55,690
not so who has a customer authorizer

00:24:53,070 --> 00:25:00,460
okay that's roughly what I expect it to

00:24:55,690 --> 00:25:03,730
be honest so yeah it works you can

00:25:00,460 --> 00:25:09,100
define ACLs and it it gives you what's

00:25:03,730 --> 00:25:11,230
in the what's on the box ACL so there

00:25:09,100 --> 00:25:12,610
are always granted for resource so you

00:25:11,230 --> 00:25:14,920
can grant HCL's

00:25:12,610 --> 00:25:18,430
or writes on topics on consumer groups

00:25:14,920 --> 00:25:20,290
or the entire cluster there is limited

00:25:18,430 --> 00:25:23,410
wildcard support as well so you can have

00:25:20,290 --> 00:25:26,820
star which means everything and there's

00:25:23,410 --> 00:25:29,770
a few jurors that look into having

00:25:26,820 --> 00:25:33,570
additional wildcard support support so

00:25:29,770 --> 00:25:37,330
to say so for resources I think it's

00:25:33,570 --> 00:25:39,070
close to being able to commit it so in

00:25:37,330 --> 00:25:44,080
one of the next versions will probably

00:25:39,070 --> 00:25:46,870
see wildcards in resource names and for

00:25:44,080 --> 00:25:50,470
IP addresses there's a JIRA that wants

00:25:46,870 --> 00:25:52,810
to introduce IP ranges and cider

00:25:50,470 --> 00:25:55,030
notation which is actually being driven

00:25:52,810 --> 00:25:56,440
by me but those guys up here we're a bit

00:25:55,030 --> 00:25:58,840
quicker and they changed the way that

00:25:56,440 --> 00:26:01,450
ACLs are stored so they made my life a

00:25:58,840 --> 00:26:04,060
bit harder I can't tell you when that'll

00:26:01,450 --> 00:26:08,440
come but at some point it'll be ready as

00:26:04,060 --> 00:26:11,500
well and then you can allow or deny

00:26:08,440 --> 00:26:13,480
actions and you have a default if

00:26:11,500 --> 00:26:17,380
there's no ACL for a resource where the

00:26:13,480 --> 00:26:19,810
request should be granted or denied you

00:26:17,380 --> 00:26:22,000
know I hope yes everybody should be able

00:26:19,810 --> 00:26:25,960
to read that I think so this is an

00:26:22,000 --> 00:26:28,780
example of creating ACLs for Bob and

00:26:25,960 --> 00:26:31,180
Ellis but when elders want to read and

00:26:28,780 --> 00:26:32,440
write to the test topic and boppin Ellis

00:26:31,180 --> 00:26:35,530
are allowed to connect from these two

00:26:32,440 --> 00:26:37,420
machines again I've taken this from the

00:26:35,530 --> 00:26:39,040
official Kafka documentation so if you

00:26:37,420 --> 00:26:40,900
want to read a bit more detail about

00:26:39,040 --> 00:26:43,080
that feel free to go there and check it

00:26:40,900 --> 00:26:43,080
out

00:26:43,140 --> 00:26:49,679
and as you can see this has the list of

00:26:47,190 --> 00:26:52,260
all ACLs that are added so it actually

00:26:49,679 --> 00:26:54,750
multiplies out every everything that we

00:26:52,260 --> 00:26:57,390
have up here an ACL is always just for

00:26:54,750 --> 00:27:01,190
one resource from one host and one

00:26:57,390 --> 00:27:05,250
principal so we have Bob from machine

00:27:01,190 --> 00:27:07,110
zero read and this topic so we should be

00:27:05,250 --> 00:27:10,559
able to find that somewhere down here a

00:27:07,110 --> 00:27:15,240
lot of emissions for read from zero back

00:27:10,559 --> 00:27:19,380
there so this one command actually

00:27:15,240 --> 00:27:22,639
created three six eight ACLs in our zoo

00:27:19,380 --> 00:27:25,169
keeper and again if we think back to our

00:27:22,639 --> 00:27:28,350
couple of hundred notes cluster if we

00:27:25,169 --> 00:27:31,260
want to add those IP addresses to this

00:27:28,350 --> 00:27:34,019
and then have a couple of more users it

00:27:31,260 --> 00:27:38,970
can get to be quite a long list of ACLs

00:27:34,019 --> 00:27:44,070
that are stuck into zookeeper here so

00:27:38,970 --> 00:27:46,220
now let's say we actually added LS by by

00:27:44,070 --> 00:27:50,779
mistake so we want to take her out again

00:27:46,220 --> 00:27:54,750
so instead of add on the slide before

00:27:50,779 --> 00:27:57,240
will now put remove again have the user

00:27:54,750 --> 00:28:00,179
ellos operation read/write on this topic

00:27:57,240 --> 00:28:01,860
and we removed the the hosts because we

00:28:00,179 --> 00:28:05,490
just want to remove Alice we don't care

00:28:01,860 --> 00:28:07,230
what host and what now happens is

00:28:05,490 --> 00:28:09,090
something that user Ellis has allowed

00:28:07,230 --> 00:28:11,370
pollutions for right from host star

00:28:09,090 --> 00:28:14,370
those are the ACLs that will be removed

00:28:11,370 --> 00:28:18,260
and if you check out the current state

00:28:14,370 --> 00:28:20,730
after removing Alice still has X's

00:28:18,260 --> 00:28:24,539
because ACLs are always matched exactly

00:28:20,730 --> 00:28:27,419
and what we try to remove is host star

00:28:24,539 --> 00:28:31,080
which didn't match that host so that ACL

00:28:27,419 --> 00:28:35,909
still sticks so what we need to do is

00:28:31,080 --> 00:28:39,389
actually remove exactly the ACL that we

00:28:35,909 --> 00:28:41,340
created initially and if you do that and

00:28:39,389 --> 00:28:44,279
check down here then actually for ACLs

00:28:41,340 --> 00:28:47,519
will be removed and now only Bob has

00:28:44,279 --> 00:28:49,830
access anymore so what this example is

00:28:47,519 --> 00:28:52,740
supposed to demonstrate is this is not a

00:28:49,830 --> 00:28:55,200
very intuitive tool it's you need to

00:28:52,740 --> 00:28:57,180
spend some time with it and curse a

00:28:55,200 --> 00:29:05,460
little before you can actually

00:28:57,180 --> 00:29:07,020
use it well I think all right so the

00:29:05,460 --> 00:29:08,490
first line up here is actually something

00:29:07,020 --> 00:29:11,160
that's quite important to us because we

00:29:08,490 --> 00:29:13,110
saw we didn't connect to Kafka

00:29:11,160 --> 00:29:15,660
to administer these ACLs but we actually

00:29:13,110 --> 00:29:17,370
connected to a zookeeper in Samba so we

00:29:15,660 --> 00:29:19,620
can only do this from somewhere where we

00:29:17,370 --> 00:29:22,800
where the firewall allows us to access

00:29:19,620 --> 00:29:25,190
zookeeper and also we need to be able to

00:29:22,800 --> 00:29:28,680
write to zookeeper

00:29:25,190 --> 00:29:30,990
so consumers and producers they don't

00:29:28,680 --> 00:29:32,910
need zookeeper at all old versions did

00:29:30,990 --> 00:29:34,850
but the new versions they only talk to

00:29:32,910 --> 00:29:37,230
Kafka

00:29:34,850 --> 00:29:39,710
but most of the command-line tools if

00:29:37,230 --> 00:29:44,730
you create topics if you create ACLs

00:29:39,710 --> 00:29:47,460
those tools will actually talk to Kazuki

00:29:44,730 --> 00:29:49,170
by directly which of course makes the

00:29:47,460 --> 00:29:51,929
question interesting does zookeeper have

00:29:49,170 --> 00:29:53,400
security because if someone who doesn't

00:29:51,929 --> 00:29:55,400
have access to Kafka can just go to

00:29:53,400 --> 00:29:57,390
zookeeper create ACLs for him to our

00:29:55,400 --> 00:30:01,280
access to Kafka and then get the data

00:29:57,390 --> 00:30:01,280
that sort of defeats the entire purpose

00:30:02,150 --> 00:30:08,220
so yes zookeeper does have security you

00:30:05,910 --> 00:30:10,230
can authenticate there with Kerberos as

00:30:08,220 --> 00:30:12,690
well which thankfully it's a little

00:30:10,230 --> 00:30:15,150
issue though because when Kafka creates

00:30:12,690 --> 00:30:18,420
nodes in do keeper it'll make those

00:30:15,150 --> 00:30:21,000
world readable which is sort of fine but

00:30:18,420 --> 00:30:23,130
only writable by itself so what you need

00:30:21,000 --> 00:30:26,070
to do is impersonate a Kafka broker if

00:30:23,130 --> 00:30:28,470
you want to add ACLs which means SSH

00:30:26,070 --> 00:30:30,840
into your machine sudo grab the key type

00:30:28,470 --> 00:30:32,610
that Kafka runs with issue the command

00:30:30,840 --> 00:30:33,929
probably talk to someone from IT

00:30:32,610 --> 00:30:36,870
security why you did that on the

00:30:33,929 --> 00:30:40,230
production machine and it's all not

00:30:36,870 --> 00:30:42,360
really nice so that's a new thing which

00:30:40,230 --> 00:30:44,730
is called the Java admin client which

00:30:42,360 --> 00:30:46,530
does all the same operations without

00:30:44,730 --> 00:30:49,620
talking to zookeeper that actually talks

00:30:46,530 --> 00:30:51,300
to Kafka itself and requests that come

00:30:49,620 --> 00:30:52,950
from this client go through ACLs

00:30:51,300 --> 00:30:57,380
themselves so you can actually properly

00:30:52,950 --> 00:31:00,540
event authorized people to do things

00:30:57,380 --> 00:31:02,370
however to use that currently you

00:31:00,540 --> 00:31:04,590
actually need to write Java code because

00:31:02,370 --> 00:31:07,560
the command-line tools have not yet been

00:31:04,590 --> 00:31:09,410
migrated over to use that thing there's

00:31:07,560 --> 00:31:11,180
a couple of Giro's for them and it's

00:31:09,410 --> 00:31:17,870
I'm sure it's going to happen at some

00:31:11,180 --> 00:31:19,550
point in time but not yet it's all just

00:31:17,870 --> 00:31:21,310
to go through this really quickly

00:31:19,550 --> 00:31:23,810
because I think I'm running out of time

00:31:21,310 --> 00:31:26,120
this is just the entire authorization

00:31:23,810 --> 00:31:28,370
sequence if a request comes in if the

00:31:26,120 --> 00:31:30,260
user comes in the user is checked if

00:31:28,370 --> 00:31:33,080
it's a super user we allow immediately

00:31:30,260 --> 00:31:35,210
without doing anything else if not we

00:31:33,080 --> 00:31:38,210
retrieve LCLs for the resource and the

00:31:35,210 --> 00:31:39,680
request if we have none we look at this

00:31:38,210 --> 00:31:42,230
parameter that we can set in the broker

00:31:39,680 --> 00:31:44,450
configuration and if that is true then

00:31:42,230 --> 00:31:47,210
we allow the request if not we deny if

00:31:44,450 --> 00:31:49,790
we have AC else then first we check

00:31:47,210 --> 00:31:52,250
whether anything should be denied if

00:31:49,790 --> 00:31:54,440
that's a yes we deny the request if

00:31:52,250 --> 00:31:56,840
that's a no then we check with that

00:31:54,440 --> 00:32:01,880
there's an ACL that allows this request

00:31:56,840 --> 00:32:04,250
and again deny or allow based on that so

00:32:01,880 --> 00:32:08,380
that's what happens internally when a

00:32:04,250 --> 00:32:08,380
request is checked against ACLs I

00:32:09,640 --> 00:32:13,880
apologize for this five minutes before

00:32:11,900 --> 00:32:15,230
the talk power point decided to up

00:32:13,880 --> 00:32:19,100
my slides so you'll have to have a

00:32:15,230 --> 00:32:22,190
little fantasy that the the arrows

00:32:19,100 --> 00:32:25,610
actually come from down here and go up

00:32:22,190 --> 00:32:27,230
here we looked at authorization methods

00:32:25,610 --> 00:32:31,550
earlier and we had quite a few weird

00:32:27,230 --> 00:32:34,040
plaintext SSL Stram gssapi but in our

00:32:31,550 --> 00:32:37,580
ECL definition we can only put something

00:32:34,040 --> 00:32:39,920
a minute ago it was user Bob but where

00:32:37,580 --> 00:32:42,050
did that Bob come from for example scrum

00:32:39,920 --> 00:32:45,850
is easy it's just the username but SSL

00:32:42,050 --> 00:32:48,290
or gssapi a bit more involved

00:32:45,850 --> 00:32:50,720
so what Kafka does for all these

00:32:48,290 --> 00:32:53,270
requests if they come in it passes those

00:32:50,720 --> 00:32:54,440
to a principal builder and that

00:32:53,270 --> 00:32:57,650
principal builder looks at the

00:32:54,440 --> 00:33:02,240
authorization context authentication

00:32:57,650 --> 00:33:04,370
context sorry and based on what method

00:33:02,240 --> 00:33:08,060
is in there it'll do a variety of things

00:33:04,370 --> 00:33:11,150
and what it will do I've put into this

00:33:08,060 --> 00:33:12,350
table so for plain text it can't do

00:33:11,150 --> 00:33:13,670
anything we don't know anything about

00:33:12,350 --> 00:33:17,180
the user so that will always be

00:33:13,670 --> 00:33:20,000
anonymous same thing for SSL if the

00:33:17,180 --> 00:33:22,310
client didn't send a certificate with

00:33:20,000 --> 00:33:23,250
this request that's pretty much the same

00:33:22,310 --> 00:33:25,890
as plain text

00:33:23,250 --> 00:33:28,080
for sessile plain and senseless Graham

00:33:25,890 --> 00:33:32,820
where she defined usernames so it's fine

00:33:28,080 --> 00:33:34,409
to use those for Kerberos it'll be Alexi

00:33:32,820 --> 00:33:38,010
by default I think it'll be the short

00:33:34,409 --> 00:33:40,289
thing up front here but you can define

00:33:38,010 --> 00:33:42,030
off two local rules which is sort of

00:33:40,289 --> 00:33:43,950
like a regular expression that tells

00:33:42,030 --> 00:33:46,110
Kafka what it should do with your user

00:33:43,950 --> 00:33:50,130
principal name and how it should extract

00:33:46,110 --> 00:33:53,309
the user name from that and for SSL it

00:33:50,130 --> 00:33:57,809
lets you take the entire certificate all

00:33:53,309 --> 00:34:01,230
right my pointer died anyway and extract

00:33:57,809 --> 00:34:04,440
all information that's in there and use

00:34:01,230 --> 00:34:06,000
that entire string as the username but

00:34:04,440 --> 00:34:07,230
again all of this is pluggable so if

00:34:06,000 --> 00:34:09,570
you're not happy with this write your

00:34:07,230 --> 00:34:13,159
own class extend the Kafka principle

00:34:09,570 --> 00:34:16,649
builder and you're good to go

00:34:13,159 --> 00:34:20,520
because what Kafka actually does is well

00:34:16,649 --> 00:34:22,379
anyway the authenticate request comes to

00:34:20,520 --> 00:34:24,240
the broker then it gives that to the

00:34:22,379 --> 00:34:26,010
default Kafka principle builder which

00:34:24,240 --> 00:34:29,250
the behavior of that we saw on the table

00:34:26,010 --> 00:34:31,200
earlier that returns a Kafka principle

00:34:29,250 --> 00:34:31,889
which is then passed to the ACL

00:34:31,200 --> 00:34:34,770
authorizer

00:34:31,889 --> 00:34:38,429
which we saw earlier user Bob or user

00:34:34,770 --> 00:34:38,609
ellos and that then says you're good to

00:34:38,429 --> 00:34:41,310
go

00:34:38,609 --> 00:34:47,339
oh no and the response is passed back to

00:34:41,310 --> 00:34:50,300
the client so both of those classes are

00:34:47,339 --> 00:34:53,060
configurable and extendable there's

00:34:50,300 --> 00:34:55,139
that's actually quite a nice example of

00:34:53,060 --> 00:34:59,780
consistent parameter naming and open

00:34:55,139 --> 00:35:01,170
source projects and there's two main

00:34:59,780 --> 00:35:03,839
implementations that are out there

00:35:01,170 --> 00:35:05,609
Ranger and sentry if you use a Hadoop

00:35:03,839 --> 00:35:09,540
distribution and your car is part of

00:35:05,609 --> 00:35:11,730
that then based on whether that Clara or

00:35:09,540 --> 00:35:13,280
Hortonworks that's what you'll get and

00:35:11,730 --> 00:35:15,810
what you can use

00:35:13,280 --> 00:35:18,150
but of course using pre-built stuff is

00:35:15,810 --> 00:35:20,720
not really fun so in the last five

00:35:18,150 --> 00:35:23,300
minutes we look at implementing our own

00:35:20,720 --> 00:35:25,500
Kafka authorizer

00:35:23,300 --> 00:35:26,849
this is fairly brief I'll just show you

00:35:25,500 --> 00:35:28,500
a couple of slides with a bit of code

00:35:26,849 --> 00:35:30,240
and explain what I've done but I've

00:35:28,500 --> 00:35:32,099
written a blog post on this as well so

00:35:30,240 --> 00:35:34,650
if you want to code along or look at

00:35:32,099 --> 00:35:36,050
that please feel free to build and check

00:35:34,650 --> 00:35:39,650
that out

00:35:36,050 --> 00:35:42,570
so what we're missing earlier from our

00:35:39,650 --> 00:35:44,460
from the ability to define ACLs was we

00:35:42,570 --> 00:35:47,940
had no concept of user groups we always

00:35:44,460 --> 00:35:50,760
had to authenticate a single user but

00:35:47,940 --> 00:35:52,830
large corporations usually use Active

00:35:50,760 --> 00:35:55,680
Directory and group membership in Active

00:35:52,830 --> 00:35:57,030
Directory for their rights management so

00:35:55,680 --> 00:35:58,920
what we'll try and do is build an

00:35:57,030 --> 00:36:00,270
authorizer that looks up the user that

00:35:58,920 --> 00:36:02,550
authenticated himself an Active

00:36:00,270 --> 00:36:02,940
Directory retrieves the groups for that

00:36:02,550 --> 00:36:05,700
user

00:36:02,940 --> 00:36:09,270
and then allows us to authenticate

00:36:05,700 --> 00:36:10,550
authorized based on those groups that's

00:36:09,270 --> 00:36:13,230
four things that we need to do for that

00:36:10,550 --> 00:36:14,880
we need to create a principle builder

00:36:13,230 --> 00:36:17,550
that retrieves groups from Active

00:36:14,880 --> 00:36:18,900
Directory which sounds complex but

00:36:17,550 --> 00:36:21,900
actually will cheat a bit on that and

00:36:18,900 --> 00:36:23,910
it's really easy then we did you extend

00:36:21,900 --> 00:36:25,980
the principle a little bit because the

00:36:23,910 --> 00:36:28,230
default Kafka principle only has a type

00:36:25,980 --> 00:36:29,760
and a name which is fine we could have

00:36:28,230 --> 00:36:31,470
used that for group but users will

00:36:29,760 --> 00:36:33,630
probably belong to more than one group

00:36:31,470 --> 00:36:36,480
so there it's not sufficient anymore so

00:36:33,630 --> 00:36:37,770
we just make a list out of that and then

00:36:36,480 --> 00:36:40,410
we need to create an authorizer that

00:36:37,770 --> 00:36:42,570
understands that and enable the user to

00:36:40,410 --> 00:36:44,670
create and manage ACLs just like we've

00:36:42,570 --> 00:36:49,620
done on the command line earlier which

00:36:44,670 --> 00:36:51,630
again is easier than it sounds so this

00:36:49,620 --> 00:36:53,160
is the complex Kafka principle and now

00:36:51,630 --> 00:36:59,160
it's actually a bit of a pity that my

00:36:53,160 --> 00:37:02,100
thing doesn't work anymore and what this

00:36:59,160 --> 00:37:04,830
is is it's just a little wrapper around

00:37:02,100 --> 00:37:06,360
the normal Kafka principle so that we

00:37:04,830 --> 00:37:08,610
can store a list of principles in a

00:37:06,360 --> 00:37:11,130
single single object which would then be

00:37:08,610 --> 00:37:16,350
a list of all the group memberships that

00:37:11,130 --> 00:37:18,000
this user has and looking up the groups

00:37:16,350 --> 00:37:19,620
I actually stole that part from Hadoop

00:37:18,000 --> 00:37:21,660
because they have something called a

00:37:19,620 --> 00:37:23,820
group mapping service provider which is

00:37:21,660 --> 00:37:26,130
an interface that allows you that you

00:37:23,820 --> 00:37:29,580
can code against and retrieve groups for

00:37:26,130 --> 00:37:32,070
users and this specific implementation

00:37:29,580 --> 00:37:34,280
just checks the local OS user and

00:37:32,070 --> 00:37:36,810
retrieves groups that that's a member of

00:37:34,280 --> 00:37:38,730
which you've used something like s SSD

00:37:36,810 --> 00:37:40,340
or Centrify to manifest users from

00:37:38,730 --> 00:37:46,050
active directory on your local machine

00:37:40,340 --> 00:37:48,480
works quite nicely and then to match the

00:37:46,050 --> 00:37:49,509
ACLs I've taken the simple ACL

00:37:48,480 --> 00:37:52,899
authorizer and just

00:37:49,509 --> 00:37:55,749
changed a little bit of code where where

00:37:52,899 --> 00:37:58,599
necessary so this is pretty much just

00:37:55,749 --> 00:38:02,049
unpacks our lists of principles and then

00:37:58,599 --> 00:38:03,789
the only really important part is

00:38:02,049 --> 00:38:07,719
actually these three lines down here

00:38:03,789 --> 00:38:10,419
where it checks all the principles that

00:38:07,719 --> 00:38:15,459
we unpacked from the list against all

00:38:10,419 --> 00:38:17,319
our as yells and uses or to get those

00:38:15,459 --> 00:38:22,179
together and if any single one of those

00:38:17,319 --> 00:38:25,959
matches the thing is allowed and if you

00:38:22,179 --> 00:38:28,779
put that to the test you can see in the

00:38:25,959 --> 00:38:30,339
first example that the user is libo at

00:38:28,779 --> 00:38:34,269
open code calm has allowed permissions

00:38:30,339 --> 00:38:36,279
for a topic but down here you can see

00:38:34,269 --> 00:38:40,199
that the group super group which my user

00:38:36,279 --> 00:38:44,139
is part of also is allowed to access a

00:38:40,199 --> 00:38:47,049
different topic so we in this example we

00:38:44,139 --> 00:38:49,959
have authorization based on groups from

00:38:47,049 --> 00:38:51,459
active directory and what I forgot to

00:38:49,959 --> 00:38:53,979
mention here is that we can still use

00:38:51,459 --> 00:38:57,179
the default command line tools just I

00:38:53,979 --> 00:38:59,889
put it before because what Kafka does

00:38:57,179 --> 00:39:02,739
for these principles in ACLs here it

00:38:59,889 --> 00:39:04,359
just splits at the colon and you can

00:39:02,739 --> 00:39:08,409
stick anything you like before that in

00:39:04,359 --> 00:39:13,059
your command and so we just could reuse

00:39:08,409 --> 00:39:17,799
the entire command line tools and with

00:39:13,059 --> 00:39:23,589
that I think I'm exactly on time thank

00:39:17,799 --> 00:39:27,939
you very much are there any questions

00:39:23,589 --> 00:39:32,049
always yes he was has one thank you for

00:39:27,939 --> 00:39:34,779
a detailed presentation so I used Kafka

00:39:32,049 --> 00:39:36,219
from back in like oh six oh seven days

00:39:34,779 --> 00:39:39,009
where there was no such thing as

00:39:36,219 --> 00:39:41,469
security okay and back in that time that

00:39:39,009 --> 00:39:43,419
was typical for most big data tools that

00:39:41,469 --> 00:39:47,380
security was an afterthought normal life

00:39:43,419 --> 00:39:50,499
cycle so when my clients asked you know

00:39:47,380 --> 00:39:54,099
how do we solve this security thing my

00:39:50,499 --> 00:39:57,159
main answer has been well go to the

00:39:54,099 --> 00:40:00,279
cloud and wrap all your things in

00:39:57,159 --> 00:40:01,880
containers vm something and use the

00:40:00,279 --> 00:40:05,240
cloud security

00:40:01,880 --> 00:40:08,480
names like whatever access control they

00:40:05,240 --> 00:40:11,440
provide so your strategy is something

00:40:08,480 --> 00:40:14,990
different right so could you compare

00:40:11,440 --> 00:40:19,490
pros and cons of these two strategies

00:40:14,990 --> 00:40:21,760
and help me I would say aside that this

00:40:19,490 --> 00:40:24,500
is probably a bit more fine grained

00:40:21,760 --> 00:40:26,840
access control because if you wrap

00:40:24,500 --> 00:40:28,670
something in a container that's sort of

00:40:26,840 --> 00:40:30,410
still access control based on who can

00:40:28,670 --> 00:40:33,140
actually get to the thing if I didn't

00:40:30,410 --> 00:40:34,760
misunderstand you so what that doesn't

00:40:33,140 --> 00:40:36,710
allow you to do is give someone access

00:40:34,760 --> 00:40:38,270
to a specific topic or give someone just

00:40:36,710 --> 00:40:41,450
read access to a topic but not write

00:40:38,270 --> 00:40:42,980
access to a topic and you probably need

00:40:41,450 --> 00:40:44,990
to think about network infrastructure

00:40:42,980 --> 00:40:47,510
and sort of the overall architecture

00:40:44,990 --> 00:40:51,880
picture a lot more if you wanted to use

00:40:47,510 --> 00:40:55,660
that for access control so this is a bit

00:40:51,880 --> 00:40:57,650
easier I would say but more powerful

00:40:55,660 --> 00:41:00,550
okay fair enough

00:40:57,650 --> 00:41:00,550

YouTube URL: https://www.youtube.com/watch?v=s5mO4_gFLVk


