Title: Berlin Buzzwords 2017: Ken LaPorte - Building a Vibrant Search Ecosystem at Bloomberg #bbuzz
Publication date: 2017-06-15
Playlist: Berlin Buzzwords 2017
Description: 
	Search is a core technology that allows Bloomberg to deliver financial news and information quickly and reliably to our clients. The Search Infrastructure team has created a high performance, stable and scalable search ecosystem to support a large, complex and diverse set of search applications.

Providing search as a service to the thousands of developers in this demanding environment requires us to take a holistic approach. In this talk I'll discuss both the organizational and technical challenges we've encountered and the approach we've taken to solve them. I'll dive into the details of our platform from the way we engage with our tenants, interact with the Solr community, to the infrastructure and tools we use to manage, monitor and scale our platform.

This talk is presented by Bloomberg.

Read more:
https://2017.berlinbuzzwords.de/17/session/building-vibrant-search-ecosystem-bloomberg

About Ken LaPorte:
https://2017.berlinbuzzwords.de/users/ken-laporte

Website: https://berlinbuzzwords.de/
Twitter: https://twitter.com/berlinbuzzwords
LinkedIn: https://www.linkedin.com/showcase/berlin-buzzwords/ 
Reddit: https://www.reddit.com/r/berlinbuzzwords/
Captions: 
	00:00:05,530 --> 00:00:08,770
good afternoon everyone I know I'm the

00:00:07,690 --> 00:00:10,690
last Speaker of the day you guys are

00:00:08,770 --> 00:00:13,070
pretty tired and I'm in between you and

00:00:10,690 --> 00:00:16,369
beer so I will try and get

00:00:13,070 --> 00:00:17,270
as possible so like you said my name is

00:00:16,369 --> 00:00:19,090
Ken Laporte I run the search

00:00:17,270 --> 00:00:21,200
infrastructure team at Bloomberg

00:00:19,090 --> 00:00:22,730
specifically what we do is we provide

00:00:21,200 --> 00:00:24,710
search as a service to the rest of the

00:00:22,730 --> 00:00:27,380
company I've been in the search domain

00:00:24,710 --> 00:00:29,300
space for about eight years and our team

00:00:27,380 --> 00:00:30,769
has been in existence for about three or

00:00:29,300 --> 00:00:31,880
four I'm gonna talk a little bit about

00:00:30,769 --> 00:00:39,199
how we got started

00:00:31,880 --> 00:00:40,580
and what we're doing and what's next so

00:00:39,199 --> 00:00:42,110
a little bit about Bloomberg Bloomberg

00:00:40,580 --> 00:00:43,660
is the world's largest provider of

00:00:42,110 --> 00:00:46,210
financial news and information our

00:00:43,660 --> 00:00:49,460
clients really rely on us to get

00:00:46,210 --> 00:00:51,110
information to them as quickly and what

00:00:49,460 --> 00:00:54,460
the greatest consistency in quality as

00:00:51,110 --> 00:00:57,230
possible so high speed data entry

00:00:54,460 --> 00:01:00,170
retrieval systems like search are really

00:00:57,230 --> 00:01:01,699
critical to that as our databases but

00:01:00,170 --> 00:01:03,859
search is nothing new a Bloomberg

00:01:01,699 --> 00:01:05,600
search has been around for since the

00:01:03,859 --> 00:01:08,360
beginning of the company 30 plus years

00:01:05,600 --> 00:01:10,789
ago so what happened well there were

00:01:08,360 --> 00:01:13,280
originally a lot of different search

00:01:10,789 --> 00:01:15,140
architectures and technologies being

00:01:13,280 --> 00:01:17,720
used some of them commercial some of

00:01:15,140 --> 00:01:19,009
them open source they were very

00:01:17,720 --> 00:01:21,860
difficult to maintain how do you

00:01:19,009 --> 00:01:25,700
maintain 20 different different

00:01:21,860 --> 00:01:27,619
applications across all the teams there

00:01:25,700 --> 00:01:29,509
was no consistency there was best

00:01:27,619 --> 00:01:32,060
practices weren't being followed there's

00:01:29,509 --> 00:01:34,340
a lot of custom code and there wasn't a

00:01:32,060 --> 00:01:36,409
whole lot of sharing this was finally

00:01:34,340 --> 00:01:39,409
costly to maintain and almost impossible

00:01:36,409 --> 00:01:40,150
to evolve over time so that's where we

00:01:39,409 --> 00:01:42,290
came in

00:01:40,150 --> 00:01:45,020
we looked at some of the use cases that

00:01:42,290 --> 00:01:46,700
existed we want to make sure that we

00:01:45,020 --> 00:01:49,399
were going to offer search as a service

00:01:46,700 --> 00:01:51,130
but really try and show what we could do

00:01:49,399 --> 00:01:53,930
so we picked a few different use cases

00:01:51,130 --> 00:01:56,329
you can see the top left one is about

00:01:53,930 --> 00:01:59,899
emergence and acquisitions and the end

00:01:56,329 --> 00:02:03,350
of sorry top right and the bottom right

00:01:59,899 --> 00:02:05,810
is a geospatial search showing good I

00:02:03,350 --> 00:02:10,519
believe this is different boats in

00:02:05,810 --> 00:02:11,930
various waters and each of these had

00:02:10,519 --> 00:02:14,120
very distinct requirements the mergers

00:02:11,930 --> 00:02:17,600
and acquisitions was heavily analytical

00:02:14,120 --> 00:02:20,570
data that we actually developed a custom

00:02:17,600 --> 00:02:23,959
component for solar so it was really an

00:02:20,570 --> 00:02:25,250
interesting thing but why solar well we

00:02:23,959 --> 00:02:27,470
reviewed a bunch of different search

00:02:25,250 --> 00:02:29,959
engines and technologies

00:02:27,470 --> 00:02:32,810
search Sola was already heavily used in

00:02:29,959 --> 00:02:34,459
Bloomberg so that was a big plus there

00:02:32,810 --> 00:02:36,590
was a large community some people in

00:02:34,459 --> 00:02:38,840
this room actually are poly committers

00:02:36,590 --> 00:02:41,000
or have worked on different areas of

00:02:38,840 --> 00:02:44,299
solar it was established and growing

00:02:41,000 --> 00:02:45,860
very very quickly at the time finally we

00:02:44,299 --> 00:02:47,480
knit we did some testing we knit was

00:02:45,860 --> 00:02:50,209
scalable we knew it was stable and

00:02:47,480 --> 00:02:52,640
really working well for us and Bloomberg

00:02:50,209 --> 00:02:55,129
has a hole about the same time really

00:02:52,640 --> 00:02:56,840
wanted to commit to open source and this

00:02:55,129 --> 00:02:59,720
was very attractive to us we want to not

00:02:56,840 --> 00:03:01,340
only go into the solar and fix bugs and

00:02:59,720 --> 00:03:04,160
make minor tweaks but actually build out

00:03:01,340 --> 00:03:07,280
new and new software really contribute

00:03:04,160 --> 00:03:10,670
to the core add major features and since

00:03:07,280 --> 00:03:13,370
four or five we've had new new features

00:03:10,670 --> 00:03:14,980
added in almost every release and as a

00:03:13,370 --> 00:03:17,810
right now we have three different

00:03:14,980 --> 00:03:20,870
committers of Bloomberg one of the PMC

00:03:17,810 --> 00:03:24,319
member so a little bit more about

00:03:20,870 --> 00:03:25,970
searches of service we designed it with

00:03:24,319 --> 00:03:27,920
our application teams the people who are

00:03:25,970 --> 00:03:29,299
actually going to be using it we talked

00:03:27,920 --> 00:03:32,090
to them we found out what they needed

00:03:29,299 --> 00:03:34,519
what they wanted and with that we built

00:03:32,090 --> 00:03:37,970
a very flexible middleware layer between

00:03:34,519 --> 00:03:39,440
solar and our users this allows allowed

00:03:37,970 --> 00:03:41,900
us to do a lot of really cool things

00:03:39,440 --> 00:03:44,269
first we simplified the interface to

00:03:41,900 --> 00:03:47,959
solar we made it dead simple for them to

00:03:44,269 --> 00:03:50,239
get started get using it but it also

00:03:47,959 --> 00:03:52,190
allowed a pastor capability some people

00:03:50,239 --> 00:03:54,950
want to do anything they wanted what

00:03:52,190 --> 00:03:55,430
good or bad and just go ahead and go to

00:03:54,950 --> 00:03:59,900
town

00:03:55,430 --> 00:04:02,930
so we had to support that and finally we

00:03:59,900 --> 00:04:07,069
added some basic monitoring and metrics

00:04:02,930 --> 00:04:09,799
to go with it more on that later so open

00:04:07,069 --> 00:04:11,750
for business this is great day one we

00:04:09,799 --> 00:04:14,989
started off with three tenants and over

00:04:11,750 --> 00:04:19,310
time increase dramatically we did not

00:04:14,989 --> 00:04:20,599
anticipate this kind of growth so very

00:04:19,310 --> 00:04:24,110
quickly we were adding hundreds of

00:04:20,599 --> 00:04:26,900
searchers search servers handling

00:04:24,110 --> 00:04:29,030
thousands of queries per second

00:04:26,900 --> 00:04:30,979
indexing billions of documents a day a

00:04:29,030 --> 00:04:33,560
lot of these mission-critical to

00:04:30,979 --> 00:04:35,479
Bloomberg and now a Bloomberg but the

00:04:33,560 --> 00:04:38,809
financial industry overall

00:04:35,479 --> 00:04:41,240
and then we realized it we've made a

00:04:38,809 --> 00:04:43,039
huge mistake we didn't really think

00:04:41,240 --> 00:04:44,930
about a few things we didn't think how

00:04:43,039 --> 00:04:47,659
are we actually going to scale how are

00:04:44,930 --> 00:04:50,240
we going to scale the personal support

00:04:47,659 --> 00:04:52,099
that we've been offering tendance how

00:04:50,240 --> 00:04:53,960
are we going to really monitor and

00:04:52,099 --> 00:04:55,699
manage these collections how we're going

00:04:53,960 --> 00:05:00,249
to handle the alarms we're getting

00:04:55,699 --> 00:05:02,659
alarms daily when we're detecting things

00:05:00,249 --> 00:05:04,729
we're getting problems reported to us by

00:05:02,659 --> 00:05:06,830
our clients which is not what we want we

00:05:04,729 --> 00:05:09,409
want to detect them before they they

00:05:06,830 --> 00:05:11,930
know that there's a problem our

00:05:09,409 --> 00:05:14,360
configuration management was a mess

00:05:11,930 --> 00:05:16,550
I'll talk more about that and finally

00:05:14,360 --> 00:05:18,560
there are lots of known unknowns we knew

00:05:16,550 --> 00:05:19,909
there were things wrong we we knew that

00:05:18,560 --> 00:05:23,689
there were problems we just were having

00:05:19,909 --> 00:05:26,210
trouble identifying them so the first

00:05:23,689 --> 00:05:28,819
thing that we talked about is our

00:05:26,210 --> 00:05:30,589
ecosystem how do we fix this from the

00:05:28,819 --> 00:05:33,139
ground up what's the what's the most

00:05:30,589 --> 00:05:36,229
basic problem that we're having and the

00:05:33,139 --> 00:05:37,490
first thing is ownership people who are

00:05:36,229 --> 00:05:39,860
running their own search engines for a

00:05:37,490 --> 00:05:42,439
long time thought that they should own

00:05:39,860 --> 00:05:44,539
the search engine they others thought

00:05:42,439 --> 00:05:46,279
hey I'm just going to throw my data over

00:05:44,539 --> 00:05:47,810
the oldest or the fence these guys

00:05:46,279 --> 00:05:49,490
they're going to own everything they're

00:05:47,810 --> 00:05:51,740
going to manage everything some thought

00:05:49,490 --> 00:05:55,580
we'd even write their code for them that

00:05:51,740 --> 00:05:57,560
didn't happen so where's the line so

00:05:55,580 --> 00:06:00,229
what it came down to is that we became

00:05:57,560 --> 00:06:01,969
custodians of that of that data we made

00:06:00,229 --> 00:06:04,249
sure that the api's and services were

00:06:01,969 --> 00:06:08,319
all stable and everyone was kind of

00:06:04,249 --> 00:06:10,129
happy with that how do we plan for scale

00:06:08,319 --> 00:06:12,169
different groups were growing at

00:06:10,129 --> 00:06:15,830
different different paces we had people

00:06:12,169 --> 00:06:16,969
who were you know they'd say oh I think

00:06:15,830 --> 00:06:19,189
I'm just going to start off with a

00:06:16,969 --> 00:06:21,110
million documents before we knew it they

00:06:19,189 --> 00:06:25,099
were at several billion and we had to

00:06:21,110 --> 00:06:28,430
deal with issues like that and finally

00:06:25,099 --> 00:06:30,919
educating our users these a lot of these

00:06:28,430 --> 00:06:32,629
guys came from databases they had no

00:06:30,919 --> 00:06:34,639
experience with search they didn't know

00:06:32,629 --> 00:06:37,249
anything about the specific data types

00:06:34,639 --> 00:06:39,680
tokenization relevant or some of the

00:06:37,249 --> 00:06:41,120
features with solar or and search

00:06:39,680 --> 00:06:43,039
engines in general like faceting

00:06:41,120 --> 00:06:44,310
fascinating was a new concept to a lot

00:06:43,039 --> 00:06:46,350
of people

00:06:44,310 --> 00:06:49,170
there are several talks about relevance

00:06:46,350 --> 00:06:53,490
today I see Mike over there who gave the

00:06:49,170 --> 00:06:57,810
LTR plug and talk this morning and Diego

00:06:53,490 --> 00:07:00,300
- sorry we've spent a lot of time

00:06:57,810 --> 00:07:04,020
working on relevance but a lot of that

00:07:00,300 --> 00:07:05,400
is also educating our users so the first

00:07:04,020 --> 00:07:06,720
thing that we did to figure this out is

00:07:05,400 --> 00:07:09,210
we came up with kind of a four-step

00:07:06,720 --> 00:07:11,070
approach the first is the first step is

00:07:09,210 --> 00:07:12,360
a survey we actually sit down and talk

00:07:11,070 --> 00:07:14,640
with everyone who wants to have a

00:07:12,360 --> 00:07:16,440
collection we find out exactly what they

00:07:14,640 --> 00:07:18,600
want we talk to them about their use

00:07:16,440 --> 00:07:21,240
cases whether even the search engine is

00:07:18,600 --> 00:07:23,430
an appropriate use case for them how

00:07:21,240 --> 00:07:25,170
quickly they plan on indexing data what

00:07:23,430 --> 00:07:27,360
their queries look like and we work with

00:07:25,170 --> 00:07:34,890
them to figure out how best to structure

00:07:27,360 --> 00:07:37,260
all that next development test how are

00:07:34,890 --> 00:07:38,790
they actually going to get this out how

00:07:37,260 --> 00:07:42,060
can we make sure that it's stable

00:07:38,790 --> 00:07:45,750
reliable that's my job to make sure that

00:07:42,060 --> 00:07:47,190
nobody ever finds an outage that we find

00:07:45,750 --> 00:07:49,980
out about it we fix it before our

00:07:47,190 --> 00:07:51,900
clients know anything about it to do

00:07:49,980 --> 00:07:54,330
that we help them follow some of the

00:07:51,900 --> 00:07:57,900
best practices we develop code samples

00:07:54,330 --> 00:08:00,240
and that they can use and copy we were

00:07:57,900 --> 00:08:01,800
really good documentation and we did

00:08:00,240 --> 00:08:03,630
other things like we hope we hold

00:08:01,800 --> 00:08:05,340
regular office hours and have a support

00:08:03,630 --> 00:08:07,470
chat where people can come ask us

00:08:05,340 --> 00:08:09,630
questions whenever they want we really

00:08:07,470 --> 00:08:12,690
involved other applications developers

00:08:09,630 --> 00:08:14,880
in our Bloomberg to come in help help

00:08:12,690 --> 00:08:17,010
each other out and finally we developed

00:08:14,880 --> 00:08:19,950
a search guild of people interested in

00:08:17,010 --> 00:08:21,180
search applications at Bloomberg not

00:08:19,950 --> 00:08:22,950
only for my team the search

00:08:21,180 --> 00:08:27,930
infrastructure team but throughout the

00:08:22,950 --> 00:08:31,169
company the next step is validating

00:08:27,930 --> 00:08:32,789
deploy how do we know that what they

00:08:31,169 --> 00:08:34,800
created that is actually going to go to

00:08:32,789 --> 00:08:38,310
prod it's actually going to work and

00:08:34,800 --> 00:08:39,510
it's going to stand the test of time the

00:08:38,310 --> 00:08:41,190
first step of this is hardware

00:08:39,510 --> 00:08:42,599
provisioning I'm going to talk a bit

00:08:41,190 --> 00:08:45,060
more about that later so I don't want to

00:08:42,599 --> 00:08:47,610
go too much into it as I'm as our

00:08:45,060 --> 00:08:49,050
automated deployments but one of the

00:08:47,610 --> 00:08:50,910
features that we started offering is hot

00:08:49,050 --> 00:08:53,070
and cold collections for some people who

00:08:50,910 --> 00:08:55,680
are interested the ability is to index

00:08:53,070 --> 00:08:56,820
to one collection and or to collections

00:08:55,680 --> 00:08:59,400
and flip after

00:08:56,820 --> 00:09:00,960
quality control checks this is a very

00:08:59,400 --> 00:09:02,660
new concept to some people and they

00:09:00,960 --> 00:09:05,340
really found it very useful

00:09:02,660 --> 00:09:09,090
next load testing load testing is an

00:09:05,340 --> 00:09:11,850
incredibly important part to my team as

00:09:09,090 --> 00:09:14,580
well as to the company what we want to

00:09:11,850 --> 00:09:17,430
make sure is whatever load I anticipate

00:09:14,580 --> 00:09:18,930
we can not only handle that load but we

00:09:17,430 --> 00:09:21,750
can handle that load in a disaster

00:09:18,930 --> 00:09:24,270
recovery situation so if a data center

00:09:21,750 --> 00:09:28,280
is down we can actually continue to

00:09:24,270 --> 00:09:28,280
service their client load even at peak

00:09:29,030 --> 00:09:34,070
finally how do we grow some of these

00:09:32,220 --> 00:09:36,770
collections were created years ago

00:09:34,070 --> 00:09:40,260
features change requirements change and

00:09:36,770 --> 00:09:42,630
they want to add data changes so how do

00:09:40,260 --> 00:09:44,760
you go from hey I want to you know I

00:09:42,630 --> 00:09:47,070
have this proof-of-concept I'm going to

00:09:44,760 --> 00:09:50,130
index a million documents and you know

00:09:47,070 --> 00:09:51,990
maybe one one QPS how do I grow that up

00:09:50,130 --> 00:09:53,670
how do i scale that to a thousand QPS

00:09:51,990 --> 00:09:59,220
how do i scale that to ten billion

00:09:53,670 --> 00:10:01,710
documents how do we and then how do we

00:09:59,220 --> 00:10:05,400
monitor that and who controls that

00:10:01,710 --> 00:10:07,980
monitoring so very often we'll find that

00:10:05,400 --> 00:10:10,140
hey this user really knows what they're

00:10:07,980 --> 00:10:12,540
doing I want to put him in control of

00:10:10,140 --> 00:10:15,030
everything that's going to let him start

00:10:12,540 --> 00:10:17,520
stop deploy do everything but with that

00:10:15,030 --> 00:10:19,350
also comes the ability to turn on alarms

00:10:17,520 --> 00:10:23,400
turn them off and handle those alarms

00:10:19,350 --> 00:10:26,060
when they come in which brings me to

00:10:23,400 --> 00:10:28,770
monitoring so or how do we monitor solar

00:10:26,060 --> 00:10:31,770
first we have a very large monitoring

00:10:28,770 --> 00:10:34,410
footprint it's huge we have thousands

00:10:31,770 --> 00:10:36,120
and thousands of solar instances the

00:10:34,410 --> 00:10:39,530
other thing is that what do you monitor

00:10:36,120 --> 00:10:42,660
so there's a number of things first

00:10:39,530 --> 00:10:44,820
looking at cluster state is easy you

00:10:42,660 --> 00:10:46,520
look at live nodes you see what's up but

00:10:44,820 --> 00:10:48,630
we're also going deeper we're actually

00:10:46,520 --> 00:10:50,250
constantly pinging solar from different

00:10:48,630 --> 00:10:51,870
nodes making sure there's no network

00:10:50,250 --> 00:10:54,000
issues we're monitoring the process

00:10:51,870 --> 00:10:57,780
health or making sure that that's going

00:10:54,000 --> 00:10:59,280
that's running well and one level down

00:10:57,780 --> 00:11:00,900
we're actually monitor we run our own

00:10:59,280 --> 00:11:03,480
hardware and we're monitoring that

00:11:00,900 --> 00:11:07,020
ourselves as well taking all that

00:11:03,480 --> 00:11:10,250
together to really create a good picture

00:11:07,020 --> 00:11:10,250
of the state of our system

00:11:10,470 --> 00:11:14,920
this caused a problem all of a sudden

00:11:13,420 --> 00:11:17,620
we're monitoring all these things and

00:11:14,920 --> 00:11:19,180
we're seeing false alarms we're seeing

00:11:17,620 --> 00:11:22,990
hey this node went into recovery for

00:11:19,180 --> 00:11:24,130
five seconds a hundred times why they

00:11:22,990 --> 00:11:26,050
weren't feeding anything they weren't

00:11:24,130 --> 00:11:27,430
doing anything too special and we're

00:11:26,050 --> 00:11:32,380
going to talk about that a little bit in

00:11:27,430 --> 00:11:33,760
a minute so I really I had a cool demo

00:11:32,380 --> 00:11:36,040
that I want to show you guys but the

00:11:33,760 --> 00:11:40,060
demo gods did not allow me to do that so

00:11:36,040 --> 00:11:41,890
we're going to move on so we decided

00:11:40,060 --> 00:11:42,940
that we had to take all that those

00:11:41,890 --> 00:11:45,670
different ways that we were monitoring

00:11:42,940 --> 00:11:48,580
my solar and put them together to create

00:11:45,670 --> 00:11:50,290
an aggregate view these aggregated

00:11:48,580 --> 00:11:53,680
events really define whether or not

00:11:50,290 --> 00:11:54,910
there's a problem with our clusters it

00:11:53,680 --> 00:11:57,580
also allowed us to do something very

00:11:54,910 --> 00:12:01,210
interesting it allowed us to delay

00:11:57,580 --> 00:12:04,660
alarms as well as to use that time that

00:12:01,210 --> 00:12:07,060
the alarming was happening to identify

00:12:04,660 --> 00:12:09,010
how serious an alarm something is you

00:12:07,060 --> 00:12:11,620
know if a collecting is down for two

00:12:09,010 --> 00:12:13,150
seconds is that a problem or is it or is

00:12:11,620 --> 00:12:15,190
it a problem in a minute or ten minutes

00:12:13,150 --> 00:12:18,670
or half an hour where that line is we

00:12:15,190 --> 00:12:20,050
can define it and we created two or I

00:12:18,670 --> 00:12:22,570
should say Keith the guy back there

00:12:20,050 --> 00:12:24,700
created two really cool tools to help us

00:12:22,570 --> 00:12:27,760
monitor this night out which is the back

00:12:24,700 --> 00:12:29,920
end process monitors all those things in

00:12:27,760 --> 00:12:32,290
solar as well as other applications that

00:12:29,920 --> 00:12:35,860
we that we manage like zookeeper some of

00:12:32,290 --> 00:12:38,740
our own generic services and watch our

00:12:35,860 --> 00:12:41,470
which with night owl allows us to

00:12:38,740 --> 00:12:43,870
visualize all these things as you can

00:12:41,470 --> 00:12:45,880
imagine with hundreds of servers how do

00:12:43,870 --> 00:12:47,670
you visualize these things it gets very

00:12:45,880 --> 00:12:50,620
very tight there's a lot of information

00:12:47,670 --> 00:12:52,870
and we thought of some very cool ways to

00:12:50,620 --> 00:12:55,270
kind of collapse fuse into different

00:12:52,870 --> 00:12:57,970
racks so that from one screen we can say

00:12:55,270 --> 00:13:01,360
okay everything that I have is good or

00:12:57,970 --> 00:13:03,430
hey here's the problem that I have this

00:13:01,360 --> 00:13:07,810
is in addition to automated alarms that

00:13:03,430 --> 00:13:10,210
go in that let me sleep at night so some

00:13:07,810 --> 00:13:12,690
of the things that we found first memory

00:13:10,210 --> 00:13:15,370
issues was a huge huge problem for us

00:13:12,690 --> 00:13:18,730
we're experiencing low garbage

00:13:15,370 --> 00:13:20,620
collection pauses a few things that we

00:13:18,730 --> 00:13:22,600
found we were making our heaps too big

00:13:20,620 --> 00:13:24,339
so we started keeping our he

00:13:22,600 --> 00:13:28,750
really really small Ian for large

00:13:24,339 --> 00:13:31,060
collections for high-end guest

00:13:28,750 --> 00:13:32,620
collections make them even smaller it

00:13:31,060 --> 00:13:35,019
really helped us out a lot

00:13:32,620 --> 00:13:37,199
use g1g see as your garbage collector

00:13:35,019 --> 00:13:39,550
this improved performance and stability

00:13:37,199 --> 00:13:44,319
significantly when we when we switched

00:13:39,550 --> 00:13:45,639
over next out of memory exceptions out

00:13:44,319 --> 00:13:48,220
of memory exceptions are almost

00:13:45,639 --> 00:13:50,290
unavoidable you know no matter how good

00:13:48,220 --> 00:13:51,970
you develop eventually you're going to

00:13:50,290 --> 00:13:54,220
run this to something like this so one

00:13:51,970 --> 00:13:57,310
of the things that we use is the OLM

00:13:54,220 --> 00:13:59,500
killer lets you lets us bring down a

00:13:57,310 --> 00:14:02,139
process bring it right back up and

00:13:59,500 --> 00:14:04,149
resyncing and continue on but we have

00:14:02,139 --> 00:14:06,040
monitoring and alerting on that should

00:14:04,149 --> 00:14:08,319
that have should we get too many OMS or

00:14:06,040 --> 00:14:12,190
should in an interference cluster state

00:14:08,319 --> 00:14:14,350
we know about it we can action on it but

00:14:12,190 --> 00:14:16,420
most of the OMS that we found have to

00:14:14,350 --> 00:14:20,350
deal with users doing sorting filtering

00:14:16,420 --> 00:14:22,389
on non dock value fields so at the cost

00:14:20,350 --> 00:14:23,920
of some disk space we started enabling

00:14:22,389 --> 00:14:25,959
dock values on a lot of these things and

00:14:23,920 --> 00:14:29,139
all of a sudden we were going from

00:14:25,959 --> 00:14:32,639
having these issues daily to being a

00:14:29,139 --> 00:14:32,639
once in a once in a while on current

00:14:32,699 --> 00:14:38,079
with the garbage collection process we

00:14:36,130 --> 00:14:40,480
also found that we were having long

00:14:38,079 --> 00:14:43,120
recovery times every time a collection

00:14:40,480 --> 00:14:45,220
would go and into a 15 or 20 second

00:14:43,120 --> 00:14:47,800
garbage collection pause it would come

00:14:45,220 --> 00:14:50,170
back up and then start recovering for an

00:14:47,800 --> 00:14:52,449
hour why that that didn't make a lot of

00:14:50,170 --> 00:14:54,519
sense to us after doing a lot of

00:14:52,449 --> 00:14:56,430
investigation we found the transaction

00:14:54,519 --> 00:14:58,990
logs just don't hold enough information

00:14:56,430 --> 00:15:01,829
and you can see we created a few

00:14:58,990 --> 00:15:04,779
different gear issues for those and

00:15:01,829 --> 00:15:07,240
under high load it would do a full

00:15:04,779 --> 00:15:10,630
recovery which a full full replication

00:15:07,240 --> 00:15:11,949
which really wasn't working for us there

00:15:10,630 --> 00:15:14,380
were a few other solar bugs that we

00:15:11,949 --> 00:15:16,089
addressed and with those things we had

00:15:14,380 --> 00:15:20,889
some massive stability improvements that

00:15:16,089 --> 00:15:23,050
we found configuration management was

00:15:20,889 --> 00:15:25,029
the next thing that we decided to tackle

00:15:23,050 --> 00:15:27,370
in fact this is one of those challenges

00:15:25,029 --> 00:15:28,899
that we're still working on today

00:15:27,370 --> 00:15:31,770
back at the office there's two guys

00:15:28,899 --> 00:15:34,740
right now toiling away with this

00:15:31,770 --> 00:15:36,600
the current process is we take what we

00:15:34,740 --> 00:15:37,680
wanted to find as our configuration and

00:15:36,600 --> 00:15:40,230
what the user defines as their

00:15:37,680 --> 00:15:42,120
configuration put them together and that

00:15:40,230 --> 00:15:45,240
kind of creates a composite it allows

00:15:42,120 --> 00:15:47,550
them to figure to define some things on

00:15:45,240 --> 00:15:50,670
their own while still allowing us to

00:15:47,550 --> 00:15:52,620
have control the problem with that

00:15:50,670 --> 00:15:55,230
though is versioning becomes very very

00:15:52,620 --> 00:15:57,690
difficult there are some changes that

00:15:55,230 --> 00:15:59,850
you just can't rollback we experienced

00:15:57,690 --> 00:16:03,480
this a lot when we moved from solar 4 so

00:15:59,850 --> 00:16:05,340
solar fun where hey we just enabled dock

00:16:03,480 --> 00:16:06,810
values and all of a sudden things don't

00:16:05,340 --> 00:16:08,850
work because some segments have dock

00:16:06,810 --> 00:16:12,810
values for a particular field and some

00:16:08,850 --> 00:16:14,430
don't some do and some don't so it was

00:16:12,810 --> 00:16:16,620
really good for some simple collections

00:16:14,430 --> 00:16:19,680
but once we started doing some more

00:16:16,620 --> 00:16:21,930
complicated things the Train kind of

00:16:19,680 --> 00:16:25,350
came off the rails and we need some help

00:16:21,930 --> 00:16:26,820
and finally when you're merging these

00:16:25,350 --> 00:16:29,160
different configurations at different

00:16:26,820 --> 00:16:31,140
times it's hard to say that you know

00:16:29,160 --> 00:16:34,050
this version is exactly what I'm running

00:16:31,140 --> 00:16:37,380
in production that lack of provenance is

00:16:34,050 --> 00:16:38,730
is really problematic for us and for our

00:16:37,380 --> 00:16:41,220
tenants because when they say hey there

00:16:38,730 --> 00:16:43,080
was a problem I deployed some of my some

00:16:41,220 --> 00:16:44,910
of my nodes had this configuration some

00:16:43,080 --> 00:16:48,840
had that it was very difficult for us to

00:16:44,910 --> 00:16:52,140
understand so we looked at and we

00:16:48,840 --> 00:16:54,900
converted to an SD LC process we

00:16:52,140 --> 00:16:55,800
basically said ok your configuration is

00:16:54,900 --> 00:16:59,670
going to start living at a git

00:16:55,800 --> 00:17:01,490
repository we're going to have we're

00:16:59,670 --> 00:17:04,350
going to build that repository with with

00:17:01,490 --> 00:17:06,750
maven and Jenkins we're going to create

00:17:04,350 --> 00:17:08,550
artifacts that live in artifactory and

00:17:06,750 --> 00:17:13,020
then we're going to push those artifacts

00:17:08,550 --> 00:17:15,150
into zookeeper for Soler's use this is a

00:17:13,020 --> 00:17:17,160
process that we're in that we're

00:17:15,150 --> 00:17:19,260
currently automating but it also allows

00:17:17,160 --> 00:17:20,640
us to do some very cool things so it

00:17:19,260 --> 00:17:23,339
allows us to validate the configuration

00:17:20,640 --> 00:17:24,870
to your static analysis it allows us to

00:17:23,339 --> 00:17:26,970
say I see the Kings that you're making

00:17:24,870 --> 00:17:29,940
this is a good change that this is a

00:17:26,970 --> 00:17:31,980
known bad change it also allows us to

00:17:29,940 --> 00:17:34,830
create unit tests with user-defined data

00:17:31,980 --> 00:17:37,770
they can say here's a sample of my index

00:17:34,830 --> 00:17:40,020
here's a thousand documents here's the

00:17:37,770 --> 00:17:41,580
change before here's the change after is

00:17:40,020 --> 00:17:43,790
this going to work or is this going to

00:17:41,580 --> 00:17:46,550
break

00:17:43,790 --> 00:17:48,920
and the last thing is that we're working

00:17:46,550 --> 00:17:50,420
on completely automating this one of our

00:17:48,920 --> 00:17:53,530
goals for this year is to really take

00:17:50,420 --> 00:17:55,820
all take us out of the whole process

00:17:53,530 --> 00:18:00,260
empower our users make a completely

00:17:55,820 --> 00:18:05,450
self-service for them little little

00:18:00,260 --> 00:18:06,530
puppies one of the issues that one of

00:18:05,450 --> 00:18:08,120
the other issues that we had is the

00:18:06,530 --> 00:18:12,290
substantial demand that we weren't ready

00:18:08,120 --> 00:18:14,890
for traditionally Bloomberg getting new

00:18:12,290 --> 00:18:18,080
hardware spun up is a very expensive

00:18:14,890 --> 00:18:20,630
process with long lead times that wasn't

00:18:18,080 --> 00:18:22,040
going to be acceptable to us we want to

00:18:20,630 --> 00:18:24,530
really be able to drive those

00:18:22,040 --> 00:18:27,110
requirements so we created a group of

00:18:24,530 --> 00:18:28,700
DevOps or sres on our team and they

00:18:27,110 --> 00:18:30,770
actually work side by side with us to

00:18:28,700 --> 00:18:33,670
figure out exactly what we needed and

00:18:30,770 --> 00:18:33,670
how to make it work

00:18:34,310 --> 00:18:39,260
it was completely from the ground up we

00:18:37,490 --> 00:18:40,030
really streamlined it as much as

00:18:39,260 --> 00:18:42,430
possible

00:18:40,030 --> 00:18:47,330
we used different tools like vagrant

00:18:42,430 --> 00:18:50,450
Jenkins and then monitor all this with

00:18:47,330 --> 00:18:55,370
zabbix as well as pulling from

00:18:50,450 --> 00:18:56,630
artifactory and stuff the last thing

00:18:55,370 --> 00:18:58,550
that I want to mention on this and I

00:18:56,630 --> 00:19:01,310
know it's obvious but it's but it bears

00:18:58,550 --> 00:19:04,780
worth it bears repeating that our

00:19:01,310 --> 00:19:06,710
hardware is a better experience we did

00:19:04,780 --> 00:19:09,890
substantial tests with different hard

00:19:06,710 --> 00:19:12,140
drives SSDs actually do make it better

00:19:09,890 --> 00:19:15,110
big surprise but it makes it

00:19:12,140 --> 00:19:17,090
substantially better Solar is very

00:19:15,110 --> 00:19:20,660
efficient in how it uses both disk and

00:19:17,090 --> 00:19:23,660
network we have 20 gig links between our

00:19:20,660 --> 00:19:25,340
between nodes and during a recovery so

00:19:23,660 --> 00:19:27,710
and we'll use all of that and pull it

00:19:25,340 --> 00:19:31,030
over it will saturate the disks it's

00:19:27,710 --> 00:19:31,030
really quite impressive when you see it

00:19:33,130 --> 00:19:41,360
so with that we have all these servers

00:19:37,760 --> 00:19:43,280
we have all these processes and now how

00:19:41,360 --> 00:19:44,570
do we manage these that brings us to our

00:19:43,280 --> 00:19:47,480
the next thing that we're going to

00:19:44,570 --> 00:19:49,520
tackling it's how do we containerized

00:19:47,480 --> 00:19:52,280
solar how do we run all of our

00:19:49,520 --> 00:19:56,000
applications within containers how do we

00:19:52,280 --> 00:19:58,220
make them work easier faster and better

00:19:56,000 --> 00:20:00,110
we want to make sure that things like

00:19:58,220 --> 00:20:03,470
zookeeper also run on the container they

00:20:00,110 --> 00:20:05,630
run stable and they really perform as

00:20:03,470 --> 00:20:09,500
well as they do as as they do now on

00:20:05,630 --> 00:20:10,850
bare metal I would mention before we

00:20:09,500 --> 00:20:12,740
want to make sure that our tenants are

00:20:10,850 --> 00:20:14,720
completely self service that they have

00:20:12,740 --> 00:20:16,670
everything that they need to do any sort

00:20:14,720 --> 00:20:18,620
of configuration that they want to do

00:20:16,670 --> 00:20:21,680
monitoring and manage their collections

00:20:18,620 --> 00:20:25,370
almost like on Prem cloud if you will

00:20:21,680 --> 00:20:27,320
and finally we're making a number of

00:20:25,370 --> 00:20:29,410
improvements to solar I'd mentioned that

00:20:27,320 --> 00:20:32,090
we created an analytics component well

00:20:29,410 --> 00:20:33,710
for the last nine months we've been

00:20:32,090 --> 00:20:37,460
working on a distributed version of that

00:20:33,710 --> 00:20:39,620
that should be coming out soon the deer

00:20:37,460 --> 00:20:42,500
ticket is there we've also done a ton of

00:20:39,620 --> 00:20:43,910
work on streaming one of the committers

00:20:42,500 --> 00:20:46,310
on my team Dennis Cove has been working

00:20:43,910 --> 00:20:48,650
heavily on that and he continues to do

00:20:46,310 --> 00:20:49,850
that right now and more we're still

00:20:48,650 --> 00:20:51,440
looking at bugs we're still looking at

00:20:49,850 --> 00:20:52,760
features and we're still trying to

00:20:51,440 --> 00:20:57,590
figure out what the next thing is for us

00:20:52,760 --> 00:21:03,380
all right and with that do you guys have

00:20:57,590 --> 00:21:04,850
any questions first let's get Ken around

00:21:03,380 --> 00:21:07,940
- applause

00:21:04,850 --> 00:21:07,940
[Music]

00:21:10,120 --> 00:21:26,710
any questions how much time does it take

00:21:20,660 --> 00:21:26,710
the whole process from like the chaos -

00:21:27,070 --> 00:21:32,600
well we're not a perfect yet

00:21:29,210 --> 00:21:34,940
so we basically shut down creating new

00:21:32,600 --> 00:21:37,010
collections for about three months where

00:21:34,940 --> 00:21:38,900
we said okay we really can't do any more

00:21:37,010 --> 00:21:40,730
deployments we just have to fix on the

00:21:38,900 --> 00:21:42,590
process problems that we have so we

00:21:40,730 --> 00:21:43,850
stopped everything we said okay we're

00:21:42,590 --> 00:21:46,910
going to automate this step we're going

00:21:43,850 --> 00:21:49,820
to let you do these things so about

00:21:46,910 --> 00:21:51,830
three months to stable and probably

00:21:49,820 --> 00:21:55,820
about two years after that we've got

00:21:51,830 --> 00:21:57,680
we've got in a really good state that

00:21:55,820 --> 00:22:00,050
said I'm really hoping that by the end

00:21:57,680 --> 00:22:00,920
of this year we can be completely our

00:22:00,050 --> 00:22:03,620
attendance can be completely

00:22:00,920 --> 00:22:06,380
self-sufficient you know they can go to

00:22:03,620 --> 00:22:08,840
some display and say I purchased these

00:22:06,380 --> 00:22:10,820
servers I'm going to spin up you know

00:22:08,840 --> 00:22:13,310
eight clouds with twelve collections

00:22:10,820 --> 00:22:13,760
here are the configurations okay it's

00:22:13,310 --> 00:22:15,440
great

00:22:13,760 --> 00:22:17,750
I want a load test this now I want to

00:22:15,440 --> 00:22:19,640
move it out to production and it'll be

00:22:17,750 --> 00:22:22,460
and I want to set these kind of alarms

00:22:19,640 --> 00:22:23,120
and these kind of metrics does that

00:22:22,460 --> 00:22:26,690
answer your question

00:22:23,120 --> 00:22:28,580
yeah and the Dean sighs it started

00:22:26,690 --> 00:22:30,200
that's a great question sorry it started

00:22:28,580 --> 00:22:32,360
off with three people then was five

00:22:30,200 --> 00:22:35,360
start off with three people for a couple

00:22:32,360 --> 00:22:38,440
years then five for a year and I think

00:22:35,360 --> 00:22:41,500
it's now up to eight okay thank you

00:22:38,440 --> 00:22:41,500
thank you

00:22:55,200 --> 00:22:59,740
hello thanks for your talk

00:22:58,150 --> 00:23:01,750
just one question regarding the

00:22:59,740 --> 00:23:04,809
containerization you're planning I mean

00:23:01,750 --> 00:23:07,330
I know the general theme why one wants

00:23:04,809 --> 00:23:10,630
to do container containerization but

00:23:07,330 --> 00:23:12,309
what is your why are you doing that are

00:23:10,630 --> 00:23:14,559
there particular reasons why you're

00:23:12,309 --> 00:23:17,049
planning for that sure there's actually

00:23:14,559 --> 00:23:20,080
a lot of different reasons the first one

00:23:17,049 --> 00:23:22,240
is that we want to be able to allow

00:23:20,080 --> 00:23:24,280
someone to say on my desktop on my

00:23:22,240 --> 00:23:27,309
laptop I'm going to spin up an entire

00:23:24,280 --> 00:23:28,600
searching for structure I'm going to

00:23:27,309 --> 00:23:31,750
create my own zookeepers I'm going to

00:23:28,600 --> 00:23:33,700
create a 12 node solar cluster and it's

00:23:31,750 --> 00:23:36,789
all going to live locally that's a lot

00:23:33,700 --> 00:23:39,250
harder to do without containers also we

00:23:36,789 --> 00:23:42,159
have collections that run on shared

00:23:39,250 --> 00:23:43,990
hardware this typically is not

00:23:42,159 --> 00:23:46,710
problematic but we'd love to be able to

00:23:43,990 --> 00:23:49,090
do quality of service on collections

00:23:46,710 --> 00:23:51,549
we'd also like to be able to scale them

00:23:49,090 --> 00:23:53,020
a little bit faster so sure we can bring

00:23:51,549 --> 00:23:54,909
up new Java process but it would be

00:23:53,020 --> 00:23:57,400
awesome if we had a scheduler where we

00:23:54,909 --> 00:23:59,799
can just say hey in this data center we

00:23:57,400 --> 00:24:01,480
expect you know 15 of these instances

00:23:59,799 --> 00:24:03,220
running in this data center we're going

00:24:01,480 --> 00:24:04,960
to do a load test so we want to have 30

00:24:03,220 --> 00:24:09,220
of them running and just spin them up

00:24:04,960 --> 00:24:13,270
let solar do its replication and just

00:24:09,220 --> 00:24:15,400
run with it it's actually one thing that

00:24:13,270 --> 00:24:17,289
we're still investigating though with

00:24:15,400 --> 00:24:20,020
that is the performance of solar in a

00:24:17,289 --> 00:24:21,190
container I've seen some numbers where

00:24:20,020 --> 00:24:23,830
solar can take a five percent

00:24:21,190 --> 00:24:25,419
performance it something like that might

00:24:23,830 --> 00:24:27,250
not be acceptable to all of our tenants

00:24:25,419 --> 00:24:29,470
they have hard requirements for how fast

00:24:27,250 --> 00:24:32,260
they have to deliver data so that's an

00:24:29,470 --> 00:24:34,960
it we've got to look at it might be hey

00:24:32,260 --> 00:24:36,820
you check a box you'll run solar in a

00:24:34,960 --> 00:24:39,159
container hey you want to have your own

00:24:36,820 --> 00:24:41,470
collection not in a container you'll

00:24:39,159 --> 00:24:43,740
have a nun barrel that's you that's for

00:24:41,470 --> 00:24:43,740
you to

00:24:45,580 --> 00:24:51,730
I have a question about the sres working

00:24:49,330 --> 00:24:53,650
with your team sir and I'm wondering how

00:24:51,730 --> 00:24:56,230
much time it took for them to get

00:24:53,650 --> 00:24:59,080
familiar with the solar or did you look

00:24:56,230 --> 00:25:01,030
for people already familiar or would you

00:24:59,080 --> 00:25:04,150
even say it doesn't matter they don't

00:25:01,030 --> 00:25:09,940
care about solar they care deeply about

00:25:04,150 --> 00:25:12,340
solar they one of them has been on the

00:25:09,940 --> 00:25:14,890
team for a year and a half and I think

00:25:12,340 --> 00:25:17,530
he's the he's the first one that we

00:25:14,890 --> 00:25:21,670
hired and although he does care about

00:25:17,530 --> 00:25:23,350
solar deeply he's no expert in it you

00:25:21,670 --> 00:25:26,500
know I will sit with him on a daily

00:25:23,350 --> 00:25:29,020
course on a daily basis and you know

00:25:26,500 --> 00:25:31,000
we'll parse out query logs and say okay

00:25:29,020 --> 00:25:33,070
this is why this square was running slow

00:25:31,000 --> 00:25:35,100
you know here's what we do what we tell

00:25:33,070 --> 00:25:37,990
the tenants to fix it

00:25:35,100 --> 00:25:40,570
so we'd actually didn't search for our

00:25:37,990 --> 00:25:42,430
unicorn because you know some DevOps and

00:25:40,570 --> 00:25:44,890
Sree who would you know really

00:25:42,430 --> 00:25:48,430
understood things like vagrant and as

00:25:44,890 --> 00:25:49,960
well as search that sort of thing I'd

00:25:48,430 --> 00:25:53,260
rather just teach someone search I can

00:25:49,960 --> 00:25:56,320
do that I I'd rather not teach them the

00:25:53,260 --> 00:26:02,920
more DevOps II work does that answer

00:25:56,320 --> 00:26:06,330
your question yes I'd rather have his

00:26:02,920 --> 00:26:10,180
response was and that worked well for us

00:26:06,330 --> 00:26:12,400
yes I think it helps that we have three

00:26:10,180 --> 00:26:14,110
really really bright guys where I have a

00:26:12,400 --> 00:26:16,660
lot of faith in and they have different

00:26:14,110 --> 00:26:18,580
experiences one guy really really I gets

00:26:16,660 --> 00:26:20,830
into the hardware he's done all we've

00:26:18,580 --> 00:26:22,870
evaluated at least twenty or thirty

00:26:20,830 --> 00:26:24,430
different types of hard drives and he's

00:26:22,870 --> 00:26:27,760
found the perfect hard drive for our use

00:26:24,430 --> 00:26:29,950
cases others are higher up the stack and

00:26:27,760 --> 00:26:32,770
one of them is more involved with hey

00:26:29,950 --> 00:26:34,420
let me create an API and a database to

00:26:32,770 --> 00:26:37,030
track all these servers and what's on

00:26:34,420 --> 00:26:40,990
what so from from that perspective

00:26:37,030 --> 00:26:43,270
that's really worked out it also lends

00:26:40,990 --> 00:26:45,250
themselves to be moved on to other

00:26:43,270 --> 00:26:47,290
things so once we have a lot of the

00:26:45,250 --> 00:26:49,090
stuff automated they can go work on

00:26:47,290 --> 00:26:51,040
other tasks like worse we're starting to

00:26:49,090 --> 00:26:54,010
toy around with them and data science

00:26:51,040 --> 00:26:56,550
and machine learning so from that

00:26:54,010 --> 00:27:06,390
perspective it's really worked out

00:26:56,550 --> 00:27:07,790
I just wondering if you have any kind of

00:27:06,390 --> 00:27:10,320
preliminary thoughts on how the

00:27:07,790 --> 00:27:13,740
containerization would work in terms of

00:27:10,320 --> 00:27:15,290
orchestration and things like that we're

00:27:13,740 --> 00:27:17,700
evaluating a few different options

00:27:15,290 --> 00:27:20,450
kubernetes is likely is the most likely

00:27:17,700 --> 00:27:23,960
one right now in terms of orchestration

00:27:20,450 --> 00:27:28,200
but once it's in a container and you

00:27:23,960 --> 00:27:30,810
know there's some there's the whole idea

00:27:28,200 --> 00:27:33,810
of stateful sets which may or not be a

00:27:30,810 --> 00:27:35,640
good idea for us or maybe we just for

00:27:33,810 --> 00:27:37,830
all of our cat for all of our stateless

00:27:35,640 --> 00:27:39,900
services we use kubernetes but for solar

00:27:37,830 --> 00:27:44,070
we write our own scheduler that that

00:27:39,900 --> 00:27:46,380
knows a little bit more about solar and

00:27:44,070 --> 00:27:48,120
about how we want to run them and we use

00:27:46,380 --> 00:27:49,080
that to schedule our containers we're

00:27:48,120 --> 00:27:49,830
not exactly sure yet we're still

00:27:49,080 --> 00:27:57,510
figuring that out

00:27:49,830 --> 00:27:59,820
I have a question queue

00:27:57,510 --> 00:28:02,760
yeah so you are talking about streaming

00:27:59,820 --> 00:28:05,040
in the solar yeah what are you using to

00:28:02,760 --> 00:28:07,170
do that and what are the performance

00:28:05,040 --> 00:28:10,680
considerations for like generating an

00:28:07,170 --> 00:28:13,680
index that way so I am NOT an expert on

00:28:10,680 --> 00:28:17,300
streaming yet we have one on our team

00:28:13,680 --> 00:28:19,670
dennis cove so as far as the performance

00:28:17,300 --> 00:28:22,980
he has told me that he has done some

00:28:19,670 --> 00:28:25,080
really impressive performance tests and

00:28:22,980 --> 00:28:28,830
i've seen the numbers and they look

00:28:25,080 --> 00:28:30,900
really really good I don't have any of

00:28:28,830 --> 00:28:32,970
them available to show you right now but

00:28:30,900 --> 00:28:35,820
if you want we can talk after and I can

00:28:32,970 --> 00:28:37,290
see if I can dig some up for you the

00:28:35,820 --> 00:28:41,130
answer the answer I think you're

00:28:37,290 --> 00:28:46,140
requesting is it's impressive the exact

00:28:41,130 --> 00:28:47,430
answer I guess is also it depends I mean

00:28:46,140 --> 00:28:48,990
there's a lot of factors when you're

00:28:47,430 --> 00:28:50,700
talking about indexing there's what kind

00:28:48,990 --> 00:28:52,560
of hardware am i running on how many

00:28:50,700 --> 00:28:55,680
nodes do I have in my cluster how many

00:28:52,560 --> 00:28:56,790
shards how am i sharding my cluster you

00:28:55,680 --> 00:28:58,950
know the same sort of config

00:28:56,790 --> 00:29:02,759
considerations that were doing when you

00:28:58,950 --> 00:29:04,799
do a single you know update request

00:29:02,759 --> 00:29:08,699
cool thanks Ben definitely I'd like to

00:29:04,799 --> 00:29:13,610
talk about it afterwards sure any other

00:29:08,699 --> 00:29:20,760
questions all right thank Ken again

00:29:13,610 --> 00:29:20,760

YouTube URL: https://www.youtube.com/watch?v=zag4IrC4z1k


