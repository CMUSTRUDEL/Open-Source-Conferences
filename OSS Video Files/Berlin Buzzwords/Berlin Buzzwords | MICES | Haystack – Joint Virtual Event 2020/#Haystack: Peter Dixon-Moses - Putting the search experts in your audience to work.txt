Title: #Haystack: Peter Dixon-Moses - Putting the search experts in your audience to work
Publication date: 2020-07-02
Playlist: Berlin Buzzwords | MICES | Haystack â€“ Joint Virtual Event 2020
Description: 
	Full Title: Click logs and insights: Putting the search experts in your audience to work

More: https://berlinbuzzwords.de/session/click-logs-and-insights-putting-search-experts-your-audience-work

(User, Query, Document) - This simple tuple helps give shape and depth to the often flat information retrieval landscape. With a few quick transformations, this dataset can help you suggest query completions, display related queries, propose synonym candidates, generate taste profiles, and forecast demand. This talk will help search engineers and product owners to get a feel for the data relationships created by this useful feedback loop. (Note that while many of these product features can be further optimized using ML, this talk requires no previous knowledge of machine learning applications in search.)
Captions: 
	00:00:08,750 --> 00:00:12,320
hi from New York everyone thank you for

00:00:11,639 --> 00:00:15,000
tuning in

00:00:12,320 --> 00:00:18,270
I'm Peter Bergson Moses and this talk is

00:00:15,000 --> 00:00:27,089
titled query logs click logs and

00:00:18,270 --> 00:00:28,740
insights Here I am in a tree I clambered

00:00:27,089 --> 00:00:31,050
into the search business a little over

00:00:28,740 --> 00:00:33,930
10 years ago I've been exploring the

00:00:31,050 --> 00:00:36,120
different branches ever since my work

00:00:33,930 --> 00:00:37,739
today could loosely be described as

00:00:36,120 --> 00:00:40,530
search relevance in the service of

00:00:37,739 --> 00:00:43,050
funnel optimization optimization but

00:00:40,530 --> 00:00:45,690
this isn't a search relevance talk it's

00:00:43,050 --> 00:00:49,020
also not a machine-learning talk it's a

00:00:45,690 --> 00:00:50,430
data and product talk much of what I'm

00:00:49,020 --> 00:00:52,440
going to cover can be improved with

00:00:50,430 --> 00:00:55,260
machine learning and I'll be in

00:00:52,440 --> 00:00:57,180
particular but the purpose of what I'm

00:00:55,260 --> 00:00:59,430
about to share with you is simply to get

00:00:57,180 --> 00:01:01,560
acquainted with a really useful data

00:00:59,430 --> 00:01:10,410
collection which grows as your business

00:01:01,560 --> 00:01:12,820
grows so

00:01:10,410 --> 00:01:20,470
where do most search teams spend their

00:01:12,820 --> 00:01:21,750
time well on findability I'm ranking for

00:01:20,470 --> 00:01:25,210
a searchable business data of course

00:01:21,750 --> 00:01:27,100
it's the product the showcase the reason

00:01:25,210 --> 00:01:31,060
your customers are there reason why you

00:01:27,100 --> 00:01:32,950
have a job it's the most important data

00:01:31,060 --> 00:01:34,270
set it needs domain experts it's the

00:01:32,950 --> 00:01:36,760
best metadata

00:01:34,270 --> 00:01:39,660
it's the Soraa sophisticated ranking

00:01:36,760 --> 00:01:46,020
techniques real-time updates and badges

00:01:39,660 --> 00:01:50,650
lots and lots of badges but what about

00:01:46,020 --> 00:01:52,540
retail 101 alright what can I help you

00:01:50,650 --> 00:01:54,880
find today let me show you what we have

00:01:52,540 --> 00:01:57,670
available did you find what you're

00:01:54,880 --> 00:01:59,410
looking for today it's a long easy

00:01:57,670 --> 00:02:02,080
experience to replicate in a digital

00:01:59,410 --> 00:02:04,630
environment chat box can be super

00:02:02,080 --> 00:02:06,970
annoying and post check out surveys I

00:02:04,630 --> 00:02:10,330
mean it's the last time you filled out a

00:02:06,970 --> 00:02:12,930
post checkout survey but step this way

00:02:10,330 --> 00:02:15,250
into the world of search where customers

00:02:12,930 --> 00:02:19,570
just can't stop sharing what they're

00:02:15,250 --> 00:02:22,630
after and where they found it it's your

00:02:19,570 --> 00:02:27,220
query log everyone has one but not

00:02:22,630 --> 00:02:28,510
everyone uses there's this sample has it

00:02:27,220 --> 00:02:32,800
how fountain clicks connected with

00:02:28,510 --> 00:02:34,330
search terms which is great because once

00:02:32,800 --> 00:02:35,769
queries are connected with conversions

00:02:34,330 --> 00:02:43,110
customers can help answer questions

00:02:35,769 --> 00:02:45,330
about search intent it's also the graph

00:02:43,110 --> 00:02:48,220
the graph of searchers

00:02:45,330 --> 00:02:51,760
queries and their clicks or other

00:02:48,220 --> 00:02:54,070
conversions the queries provide a hint

00:02:51,760 --> 00:02:56,620
of search intent the motivation for why

00:02:54,070 --> 00:03:00,550
this person is searching flexing

00:02:56,620 --> 00:03:03,700
aversions linkage between search intent

00:03:00,550 --> 00:03:06,790
and a physical resource that on your

00:03:03,700 --> 00:03:08,560
site in your collection possibly with a

00:03:06,790 --> 00:03:12,190
level of interest if you collect other

00:03:08,560 --> 00:03:14,620
signals like dwell timer or cards

00:03:12,190 --> 00:03:16,840
checkouts or anything further down the

00:03:14,620 --> 00:03:18,400
funnel once you have that linkage it

00:03:16,840 --> 00:03:20,350
makes it possible to crowdsource

00:03:18,400 --> 00:03:22,829
some answers it's a common search

00:03:20,350 --> 00:03:22,829
questions

00:03:23,069 --> 00:03:28,480
so most of this talk is going to be

00:03:26,170 --> 00:03:32,260
covering some recipes for things you can

00:03:28,480 --> 00:03:34,859
do with search logs and I'm gonna be

00:03:32,260 --> 00:03:38,069
switching back and forth with some

00:03:34,859 --> 00:03:42,219
Jupiter notebooks don't link this there

00:03:38,069 --> 00:03:47,739
for anybody that wants to clone those

00:03:42,219 --> 00:03:49,719
and and try this out so be aware that

00:03:47,739 --> 00:03:52,329
with any sort of crowdsourcing project

00:03:49,719 --> 00:03:53,700
you don't want to serve raw information

00:03:52,329 --> 00:03:57,129
from your blog's without a filter

00:03:53,700 --> 00:04:00,010
because query logs are rife with

00:03:57,129 --> 00:04:03,010
misspellings inadvertently disclosed

00:04:00,010 --> 00:04:04,060
personal information and all sorts of

00:04:03,010 --> 00:04:07,060
other things you probably don't want

00:04:04,060 --> 00:04:14,049
people to see okay now that we've had a

00:04:07,060 --> 00:04:15,819
disclaimer here we go so this demo

00:04:14,049 --> 00:04:21,000
dataset is a bunch of real estate

00:04:15,819 --> 00:04:25,889
searches about 50,000 the fields are

00:04:21,000 --> 00:04:28,630
used ready query timestamp position

00:04:25,889 --> 00:04:29,560
document position is useful for search

00:04:28,630 --> 00:04:31,630
relevance but we're not going to be

00:04:29,560 --> 00:04:35,919
using any of these demos in particular

00:04:31,630 --> 00:04:44,409
we're going to be working on features my

00:04:35,919 --> 00:04:47,680
first recipe is autosuggest so what I

00:04:44,409 --> 00:04:50,110
like to do when I think about working

00:04:47,680 --> 00:04:52,300
with query logs as I think about what

00:04:50,110 --> 00:04:53,710
push when I ask the crowd what question

00:04:52,300 --> 00:04:56,229
would I ask all these searchers to

00:04:53,710 --> 00:05:00,789
answer so I'll fill out this feature so

00:04:56,229 --> 00:05:03,699
with autosuggest you've got a query that

00:05:00,789 --> 00:05:06,940
somebody's typed in and you want to find

00:05:03,699 --> 00:05:08,590
out you want it you want to serve up its

00:05:06,940 --> 00:05:16,360
all the other common ways to frame this

00:05:08,590 --> 00:05:19,409
question the way we're gonna do that is

00:05:16,360 --> 00:05:21,990
we're gonna take our log and we're gonna

00:05:19,409 --> 00:05:24,460
extract the queries right we're just

00:05:21,990 --> 00:05:28,360
searching queries that's what all this

00:05:24,460 --> 00:05:31,090
adjust is we're going to reshape it down

00:05:28,360 --> 00:05:33,700
- we're gonna group it by distinct

00:05:31,090 --> 00:05:35,200
queries we're going to count the number

00:05:33,700 --> 00:05:38,020
of unique user

00:05:35,200 --> 00:05:42,910
who executed that query and click on

00:05:38,020 --> 00:05:46,420
something and sometimes it's useful to

00:05:42,910 --> 00:05:48,160
know how old a query is when's the last

00:05:46,420 --> 00:05:49,240
time it was in circulation right so the

00:05:48,160 --> 00:05:54,070
last time stamp

00:05:49,240 --> 00:05:56,260
um can be useful sometimes and then

00:05:54,070 --> 00:05:58,180
that's gonna go in an index and we're

00:05:56,260 --> 00:06:00,090
just gonna we're just gonna run a search

00:05:58,180 --> 00:06:03,760
against what some of these types so far

00:06:00,090 --> 00:06:05,740
and we're gonna try to incorporate the

00:06:03,760 --> 00:06:08,680
popularity of that search right that's

00:06:05,740 --> 00:06:10,060
the count and the reason see maybe along

00:06:08,680 --> 00:06:12,910
with how close of a match

00:06:10,060 --> 00:06:15,190
what Slade's typed is with whatever it

00:06:12,910 --> 00:06:22,270
else's site and that's gonna be our

00:06:15,190 --> 00:06:25,780
hoorah to suggest so here we go all

00:06:22,270 --> 00:06:31,210
right so first thing is to reshape the

00:06:25,780 --> 00:06:32,950
data right so here's the source data

00:06:31,210 --> 00:06:36,210
this is like what I was Jeff what I was

00:06:32,950 --> 00:06:43,410
showing before and we're going to you

00:06:36,210 --> 00:06:48,160
get distinct queries out of this and

00:06:43,410 --> 00:06:50,380
counts and that timestamp is the last

00:06:48,160 --> 00:06:55,260
time Sam right so for example here this

00:06:50,380 --> 00:06:58,660
this transformation says that 189 people

00:06:55,260 --> 00:07:03,810
searched for Prudential real estate they

00:06:58,660 --> 00:07:08,230
ran that query 189 distinct people

00:07:03,810 --> 00:07:10,090
because this log has a new record for

00:07:08,230 --> 00:07:12,160
every single row for every single

00:07:10,090 --> 00:07:13,870
document simply clicked um

00:07:12,160 --> 00:07:15,130
even after executing one search to run

00:07:13,870 --> 00:07:17,650
one searching click on five things you

00:07:15,130 --> 00:07:24,930
get five records right so it's important

00:07:17,650 --> 00:07:24,930
to be unique by user in this case so

00:07:25,170 --> 00:07:29,410
let's make sure that it's um using

00:07:27,790 --> 00:07:31,720
elastic search so this is how elastic

00:07:29,410 --> 00:07:37,450
search consumes records changing it to

00:07:31,720 --> 00:07:40,150
this i'm jason lions format and we won't

00:07:37,450 --> 00:07:43,660
load the index this is the mapping we're

00:07:40,150 --> 00:07:45,600
using it's got the count it's got the

00:07:43,660 --> 00:07:48,520
last query date and it's got the query

00:07:45,600 --> 00:07:49,120
the Fielden for the query that people

00:07:48,520 --> 00:07:51,789
are

00:07:49,120 --> 00:07:52,990
and it's got this search as you type

00:07:51,789 --> 00:07:55,199
type which is relatively new and

00:07:52,990 --> 00:07:58,629
elasticsearch it's a convenience feature

00:07:55,199 --> 00:08:02,529
that creates a bunch of Engram door

00:07:58,629 --> 00:08:06,219
shingled fields for you which makes and

00:08:02,529 --> 00:08:08,889
some prefix some fields optimized for

00:08:06,219 --> 00:08:11,439
prefix searches so it's a convenience

00:08:08,889 --> 00:08:13,749
thing you can do it you can do it simple

00:08:11,439 --> 00:08:16,029
as few releases a lossy search um you

00:08:13,749 --> 00:08:20,770
can do it manually but this is

00:08:16,029 --> 00:08:22,779
convenient let's load the index alright

00:08:20,770 --> 00:08:24,580
that's done only fifty thousand records

00:08:22,779 --> 00:08:29,830
it's great actually the last because we

00:08:24,580 --> 00:08:33,159
just compressed it and now so we're

00:08:29,830 --> 00:08:36,639
gonna query for suggestions take a quick

00:08:33,159 --> 00:08:39,750
look at the query we're gonna use this

00:08:36,639 --> 00:08:43,380
is a query template so it's in mustache

00:08:39,750 --> 00:08:47,350
and it's trying to match the text of

00:08:43,380 --> 00:08:48,490
whatever has been typed with these

00:08:47,350 --> 00:08:50,620
different fields that were created by

00:08:48,490 --> 00:08:53,889
that search as you type feel it

00:08:50,620 --> 00:08:56,889
subfields and then we're going to

00:08:53,889 --> 00:09:01,779
influence the score by multiplying it by

00:08:56,889 --> 00:09:03,519
that count field which we can take the

00:09:01,779 --> 00:09:08,500
natural log of so it doesn't sit doesn't

00:09:03,519 --> 00:09:10,300
blow of the score too high up know but

00:09:08,500 --> 00:09:17,529
this way things that are query more

00:09:10,300 --> 00:09:19,420
frequently will rise to the top so let

00:09:17,529 --> 00:09:27,490
me pretend I'm type in here Lorenzo

00:09:19,420 --> 00:09:32,769
queries all right P let's see all right

00:09:27,490 --> 00:09:35,290
there's some peas ah financials still

00:09:32,769 --> 00:09:37,959
thought but now I'm me so I'm gonna lose

00:09:35,290 --> 00:09:43,949
Prudential knows Prescott and some stuff

00:09:37,959 --> 00:09:47,260
for Prescott Arizona prestige let's see

00:09:43,949 --> 00:09:49,540
should get Prescott I think it's got

00:09:47,260 --> 00:09:52,000
Prescott right so so five letters and

00:09:49,540 --> 00:09:55,510
I'm already down to a bunch of stuff

00:09:52,000 --> 00:09:57,990
about one city no it's great

00:09:55,510 --> 00:10:00,370
that's what we want out of autosuggest I

00:09:57,990 --> 00:10:02,319
notice it's also finding things that are

00:10:00,370 --> 00:10:04,589
indexed right so it's not just

00:10:02,319 --> 00:10:08,169
it's not just queries let's start with

00:10:04,589 --> 00:10:12,569
Prescott right it's it's they can be at

00:10:08,169 --> 00:10:12,569
the end it can be in the middle oh yeah

00:10:13,350 --> 00:10:23,229
all right so I was also suggest the

00:10:19,239 --> 00:10:26,289
second recipe we're gonna look at its

00:10:23,229 --> 00:10:28,179
related queries related queries you

00:10:26,289 --> 00:10:31,589
often see at the bottom of a certain

00:10:28,179 --> 00:10:34,299
results page it was about time get there

00:10:31,589 --> 00:10:36,759
and you scroll down and say all right

00:10:34,299 --> 00:10:38,439
well these ten don't help me or however

00:10:36,759 --> 00:10:45,249
many results you have on that first page

00:10:38,439 --> 00:10:47,139
what are some related circuits and these

00:10:45,249 --> 00:10:50,289
all help people specialize their search

00:10:47,139 --> 00:10:54,579
they may help them broaden it out to an

00:10:50,289 --> 00:10:58,029
adjacent area and the way that we can

00:10:54,579 --> 00:11:00,039
use query logs to or one way we can use

00:10:58,029 --> 00:11:04,779
query logs to help generate related

00:11:00,039 --> 00:11:06,569
searches um is to look at other thinking

00:11:04,779 --> 00:11:09,399
back like a graph is to look at other

00:11:06,569 --> 00:11:13,629
queries that found the documents you

00:11:09,399 --> 00:11:14,589
found right so I made a pretend scenario

00:11:13,629 --> 00:11:17,499
here cuz they don't actually have the

00:11:14,589 --> 00:11:20,019
search engine I just have the logs so

00:11:17,499 --> 00:11:23,949
this is a search for licensing and it

00:11:20,019 --> 00:11:28,929
returned among nights for looking stuff

00:11:23,949 --> 00:11:30,879
these twenty links so these are twenty

00:11:28,929 --> 00:11:33,699
links about licensing and really in the

00:11:30,879 --> 00:11:38,470
real estate domain and the twenty links

00:11:33,699 --> 00:11:42,339
from the log I'm working with so we want

00:11:38,470 --> 00:11:45,579
to ask the crowd what are some of the

00:11:42,339 --> 00:11:47,559
other commonly will answer questions why

00:11:45,579 --> 00:11:50,769
the documents you found what are the

00:11:47,559 --> 00:11:52,179
other queries people ran to find and

00:11:50,769 --> 00:11:53,579
click on the documents that have just

00:11:52,179 --> 00:11:59,079
come up on your first favorite results

00:11:53,579 --> 00:12:01,119
all right that makes sense so we're

00:11:59,079 --> 00:12:02,169
finding the other ways in so we've found

00:12:01,119 --> 00:12:03,669
some things that are relevant for

00:12:02,169 --> 00:12:07,209
licensing but we want to know what other

00:12:03,669 --> 00:12:12,779
topics they're relevant to as those will

00:12:07,209 --> 00:12:12,779
be your related searches so

00:12:13,510 --> 00:12:19,310
this time we need the query and the

00:12:16,070 --> 00:12:21,140
documents and we're going to group it

00:12:19,310 --> 00:12:22,520
this time about document so there's a

00:12:21,140 --> 00:12:25,430
different index different shape

00:12:22,520 --> 00:12:30,020
different transformation so we're going

00:12:25,430 --> 00:12:34,250
to group by distinct documents and then

00:12:30,020 --> 00:12:38,300
we're going to aggregate list of all of

00:12:34,250 --> 00:12:42,680
the queries that found each document in

00:12:38,300 --> 00:12:44,000
an array in a list um every query that

00:12:42,680 --> 00:12:45,170
was also gonna click on that document

00:12:44,000 --> 00:12:48,980
right so we're using that it's some

00:12:45,170 --> 00:12:50,270
proof it as a form of of crowd proof

00:12:48,980 --> 00:12:55,490
that the documents relevant to that

00:12:50,270 --> 00:12:57,800
query that's like right and then when we

00:12:55,490 --> 00:12:59,440
serve it up display the little widget at

00:12:57,800 --> 00:13:03,110
the bottom of the search results page

00:12:59,440 --> 00:13:04,400
you just want to match all of the

00:13:03,110 --> 00:13:07,520
documents that came up on that first

00:13:04,400 --> 00:13:09,200
page sometimes you can fetch more if

00:13:07,520 --> 00:13:11,210
it's if it's helpful but since you have

00:13:09,200 --> 00:13:13,940
those already they match those ones on

00:13:11,210 --> 00:13:16,370
the first page and they just aggregate

00:13:13,940 --> 00:13:25,210
across queries and see which ones bubble

00:13:16,370 --> 00:13:25,210
up right so here we go lady queries

00:13:25,990 --> 00:13:30,680
alright so here's a search that source

00:13:28,250 --> 00:13:33,470
data looks exactly the same right but

00:13:30,680 --> 00:13:37,400
this time we want to transform it so

00:13:33,470 --> 00:13:39,170
that that document column is the key

00:13:37,400 --> 00:13:42,920
right the prime of the the the distinct

00:13:39,170 --> 00:13:44,780
key and work those queries whenever

00:13:42,920 --> 00:13:49,570
mobile queries find the same document we

00:13:44,780 --> 00:13:52,130
want a list of those so here goes

00:13:49,570 --> 00:13:56,120
alright so now we've got these document

00:13:52,130 --> 00:13:57,800
links and most cases it's just one query

00:13:56,120 --> 00:14:00,770
for some these obscure ones but here

00:13:57,800 --> 00:14:03,500
your Grand Junction a couple Grand

00:14:00,770 --> 00:14:05,630
Junction queries maybe more than two we

00:14:03,500 --> 00:14:09,130
found this one two six real met systems

00:14:05,630 --> 00:14:09,130
bomb like

00:14:12,420 --> 00:14:17,500
all right so this is the shape we want

00:14:14,730 --> 00:14:19,269
we gotta we gotta convert that to a

00:14:17,500 --> 00:14:22,329
formality search will like which looks

00:14:19,269 --> 00:14:25,149
like this all right you got you're

00:14:22,329 --> 00:14:32,490
talking about links then you've got your

00:14:25,149 --> 00:14:37,800
query array we're gonna create an index

00:14:32,490 --> 00:14:40,630
with this mapping real simple mapping

00:14:37,800 --> 00:14:42,910
nothing even it is inverted right this

00:14:40,630 --> 00:14:45,100
is just a keyword field for the document

00:14:42,910 --> 00:14:49,170
in keyword field for the query mom so

00:14:45,100 --> 00:14:51,490
these are only used for exact matching

00:14:49,170 --> 00:14:55,149
this is really basically just graph

00:14:51,490 --> 00:14:57,310
traversal you know search engine so

00:14:55,149 --> 00:15:04,600
let's load it did you do to be done

00:14:57,310 --> 00:15:09,339
all right great so here's the query

00:15:04,600 --> 00:15:11,529
we're going to use what we're doing is

00:15:09,339 --> 00:15:15,850
this is a mustache template this is one

00:15:11,529 --> 00:15:17,470
of the ways that halassi search allows

00:15:15,850 --> 00:15:18,940
you to run queries right so by

00:15:17,470 --> 00:15:20,320
substituting variables so this is going

00:15:18,940 --> 00:15:23,290
to take the list of documents that I

00:15:20,320 --> 00:15:26,110
pass in this case those links and

00:15:23,290 --> 00:15:27,850
substitute them in for this block it's

00:15:26,110 --> 00:15:29,949
gonna do a terms query with all of those

00:15:27,850 --> 00:15:35,350
documents so it's gonna find those

00:15:29,949 --> 00:15:37,180
documents in the index and then it's

00:15:35,350 --> 00:15:40,269
going to aggregate that queries the

00:15:37,180 --> 00:15:42,399
fattest documents right super simple so

00:15:40,269 --> 00:15:44,140
it's gonna reach into those arrays those

00:15:42,399 --> 00:15:48,459
lists of queries for each document and

00:15:44,140 --> 00:15:50,800
make a single aggregate um with a count

00:15:48,459 --> 00:15:56,140
for those just to see what both look

00:15:50,800 --> 00:15:57,819
right so here goes this is the this is

00:15:56,140 --> 00:16:00,430
the fake query I created right the fake

00:15:57,819 --> 00:16:02,170
results these are the document links and

00:16:00,430 --> 00:16:04,779
the results they're real results from

00:16:02,170 --> 00:16:07,810
the log but this is in response to my

00:16:04,779 --> 00:16:10,120
query for licensing over this real

00:16:07,810 --> 00:16:12,819
estate data set right so these are the

00:16:10,120 --> 00:16:14,829
things that came back for licensing

00:16:12,819 --> 00:16:17,610
we're gonna see what other queries

00:16:14,829 --> 00:16:20,769
caused people to click on these links

00:16:17,610 --> 00:16:22,949
that's what this queries gonna run you

00:16:20,769 --> 00:16:22,949
guys

00:16:22,970 --> 00:16:29,550
cool so for a real estate licensing

00:16:27,750 --> 00:16:31,800
Maryland California real estate license

00:16:29,550 --> 00:16:34,430
connector real estate license this this

00:16:31,800 --> 00:16:36,360
is basically things you know these

00:16:34,430 --> 00:16:39,390
different search intents in this log

00:16:36,360 --> 00:16:42,000
break across state it's us obviously if

00:16:39,390 --> 00:16:43,080
it breaks across states and cities um so

00:16:42,000 --> 00:16:47,340
there's a lot of cool stuff you could do

00:16:43,080 --> 00:16:49,910
with um geolocation but right now this

00:16:47,340 --> 00:16:52,350
has been just a scattershot

00:16:49,910 --> 00:16:53,580
there's licensing classes real estate

00:16:52,350 --> 00:16:57,060
classes doesn't even have the word

00:16:53,580 --> 00:16:59,460
license in it so that's cool right we

00:16:57,060 --> 00:17:01,440
get that back New Jersey real estate

00:16:59,460 --> 00:17:03,780
courses so we can get that back as

00:17:01,440 --> 00:17:05,550
related to licensing because the other

00:17:03,780 --> 00:17:09,480
thing of course to get license but the

00:17:05,550 --> 00:17:19,610
word license isn't in there so that's

00:17:09,480 --> 00:17:19,610
related queries it's fun stuff right

00:17:20,120 --> 00:17:26,040
so the third recipe has synonym

00:17:22,560 --> 00:17:28,860
candidates this is part of the job of a

00:17:26,040 --> 00:17:30,720
search for all of its engineer his top

00:17:28,860 --> 00:17:35,460
is keeping track of synonyms within a

00:17:30,720 --> 00:17:39,570
business domain this is super important

00:17:35,460 --> 00:17:42,840
for precision the reason is especially

00:17:39,570 --> 00:17:45,480
with with concepts in your domain that

00:17:42,840 --> 00:17:48,170
have more than one word in them so for

00:17:45,480 --> 00:17:48,170
example I live in New York

00:17:48,200 --> 00:17:51,840
when you stand up a search engine for

00:17:50,310 --> 00:17:54,330
the first time and you need X a lot of

00:17:51,840 --> 00:17:55,140
content that has let's say US states in

00:17:54,330 --> 00:17:57,930
it

00:17:55,140 --> 00:18:01,070
anytime somebody types New Mexico New

00:17:57,930 --> 00:18:03,870
Jersey New York they're gonna get

00:18:01,070 --> 00:18:05,760
they're gonna get all those coming back

00:18:03,870 --> 00:18:08,520
because they all match new right until

00:18:05,760 --> 00:18:11,070
they start working with precision and

00:18:08,520 --> 00:18:14,040
there's some times where you want that

00:18:11,070 --> 00:18:15,630
Tom but if you've already said New York

00:18:14,040 --> 00:18:17,910
search engine tripping smart enough to

00:18:15,630 --> 00:18:19,680
say hey New York is a thing it's a thing

00:18:17,910 --> 00:18:21,390
that has these two terms let's make it

00:18:19,680 --> 00:18:26,580
one thing instead of two things and not

00:18:21,390 --> 00:18:29,870
search for the independent parts realist

00:18:26,580 --> 00:18:32,160
it's another one of those two right so

00:18:29,870 --> 00:18:34,230
grooming your synonyms is a big part of

00:18:32,160 --> 00:18:36,630
search engine upkeep and it's useful to

00:18:34,230 --> 00:18:38,490
have tooling that helps you

00:18:36,630 --> 00:18:42,300
see how suggest news sitting on

00:18:38,490 --> 00:18:44,520
candidates so this is something that a

00:18:42,300 --> 00:18:48,750
back-end relevance engineer or

00:18:44,520 --> 00:18:52,050
taxonomist would use tich to to find

00:18:48,750 --> 00:18:54,150
news in ten candidates so take an

00:18:52,050 --> 00:18:57,510
example again that that work with this

00:18:54,150 --> 00:19:01,160
concept license we're gonna try to find

00:18:57,510 --> 00:19:06,030
in the query logs where all the other

00:19:01,160 --> 00:19:07,730
where all the other like phrases then

00:19:06,030 --> 00:19:10,320
they're short phrases or terms that

00:19:07,730 --> 00:19:11,610
appear around license this is something

00:19:10,320 --> 00:19:14,010
that's that you can do a lot better with

00:19:11,610 --> 00:19:18,900
using NLP tools but just want to

00:19:14,010 --> 00:19:22,680
illustrate the data um for this purpose

00:19:18,900 --> 00:19:25,950
um so we can just do a proof of concept

00:19:22,680 --> 00:19:27,180
here so what we need is we need the

00:19:25,950 --> 00:19:29,730
queries and documents again so this is

00:19:27,180 --> 00:19:32,910
the same shape as the last one it's

00:19:29,730 --> 00:19:35,340
distinct documents and a list of queries

00:19:32,910 --> 00:19:39,590
that that fell into that document that

00:19:35,340 --> 00:19:44,480
clicked on that document right and then

00:19:39,590 --> 00:19:47,820
we're gonna we're gonna match on the

00:19:44,480 --> 00:19:48,960
license right like licensing on but the

00:19:47,820 --> 00:19:50,610
concept that we want to find synonyms

00:19:48,960 --> 00:19:51,660
for and then we're gonna and then we're

00:19:50,610 --> 00:19:53,580
going to query the different pentagrams

00:19:51,660 --> 00:19:58,530
all the different combinations of

00:19:53,580 --> 00:20:05,720
adjacent terms um in the index so here

00:19:58,530 --> 00:20:05,720
we go alright

00:20:06,460 --> 00:20:13,330
so synonym candidates same shape

00:20:10,590 --> 00:20:16,629
document and that list of queries here's

00:20:13,330 --> 00:20:20,580
our same source data and transform it

00:20:16,629 --> 00:20:20,580
the same way we did last time

00:20:21,539 --> 00:20:30,639
load it this this index um

00:20:29,169 --> 00:20:32,019
this we're gonna use the search as you

00:20:30,639 --> 00:20:36,369
type again because it's convenient for

00:20:32,019 --> 00:20:40,720
the engrams for those adjacent terms so

00:20:36,369 --> 00:20:47,710
that's slightly different and I'm gonna

00:20:40,720 --> 00:20:50,889
load it cool that's done alright here's

00:20:47,710 --> 00:20:52,720
the query we're going to use this is a

00:20:50,889 --> 00:20:54,340
multi match again across all these

00:20:52,720 --> 00:20:56,220
different in Graham fields that were

00:20:54,340 --> 00:21:01,289
created by the search as you type type

00:20:56,220 --> 00:21:03,999
I'm gonna say 100% need to match because

00:21:01,289 --> 00:21:06,129
if you are looking for a concept that

00:21:03,999 --> 00:21:07,539
has multiple terms if you're looking for

00:21:06,129 --> 00:21:08,649
New York you want to find thing you want

00:21:07,539 --> 00:21:14,590
to find New York City you don't want to

00:21:08,649 --> 00:21:16,330
find New Mexico um as a synonym or New

00:21:14,590 --> 00:21:18,990
York bagels or something it may not get

00:21:16,330 --> 00:21:21,940
sent in them but it's them related terms

00:21:18,990 --> 00:21:23,499
so we run the query match everything

00:21:21,940 --> 00:21:26,200
that matches it 100% where you've typed

00:21:23,499 --> 00:21:31,659
in the queries and then we're going to

00:21:26,200 --> 00:21:33,399
aggregate up the significant one term

00:21:31,659 --> 00:21:35,230
Aquarius the significant two term query

00:21:33,399 --> 00:21:40,330
is in the significant three term queries

00:21:35,230 --> 00:21:43,960
that we found um in the query log and

00:21:40,330 --> 00:21:46,779
we're going to filter out the filter out

00:21:43,960 --> 00:21:48,039
though the one you're looking for so

00:21:46,779 --> 00:21:50,639
let's run this and see what happens so

00:21:48,039 --> 00:21:53,950
again we're we're looking for license

00:21:50,639 --> 00:21:55,509
this one this one is less affected so

00:21:53,950 --> 00:21:58,840
we're looking for license we're going to

00:21:55,509 --> 00:22:02,850
parse out these syndrome candidates and

00:21:58,840 --> 00:22:02,850
it blows up a lot skip something

00:22:23,170 --> 00:22:33,970
trying to get fancy there we go alright

00:22:27,820 --> 00:22:35,980
so so sorry get fancy cuz we get license

00:22:33,970 --> 00:22:39,190
back and that's the one that's the input

00:22:35,980 --> 00:22:41,679
and you know you'd strip that out before

00:22:39,190 --> 00:22:43,270
you showed candidates sitting on

00:22:41,679 --> 00:22:46,799
candidates to somebody but here are some

00:22:43,270 --> 00:22:49,510
other terms that are related to license

00:22:46,799 --> 00:22:52,270
there were related license right so

00:22:49,510 --> 00:22:54,010
conditional requirements real estate

00:22:52,270 --> 00:22:57,040
license that's a good one especially in

00:22:54,010 --> 00:22:58,270
this domain right as a thing that you

00:22:57,040 --> 00:23:00,070
might want to make synonymous with

00:22:58,270 --> 00:23:02,290
license because in this domain if this

00:23:00,070 --> 00:23:07,299
was your business that would be

00:23:02,290 --> 00:23:08,679
synonymous licenses I we're new old

00:23:07,299 --> 00:23:10,299
apartment lie sitting basically this

00:23:08,679 --> 00:23:11,830
just gives somebody who's building a

00:23:10,299 --> 00:23:14,320
controlled vocabulary a lot of fodder

00:23:11,830 --> 00:23:16,210
for for constructing that controlled

00:23:14,320 --> 00:23:19,799
vocabulary so they can so they can make

00:23:16,210 --> 00:23:23,679
sure that when people search for an exam

00:23:19,799 --> 00:23:25,240
that they that they find the same things

00:23:23,679 --> 00:23:31,299
that somebody would find for a licensing

00:23:25,240 --> 00:23:33,790
exam for example Serio so that's a bunch

00:23:31,299 --> 00:23:37,059
of different synonym suggestions you

00:23:33,790 --> 00:23:40,570
take those and build up sitting on

00:23:37,059 --> 00:23:44,220
tables taxonomy z' suggestions all sorts

00:23:40,570 --> 00:23:47,679
of fun stuff all right

00:23:44,220 --> 00:23:52,470
rested before this is the last one um

00:23:47,679 --> 00:23:54,880
this is taste profiles taste profile is

00:23:52,470 --> 00:23:57,250
is what your searcher is interested in

00:23:54,880 --> 00:24:00,190
this is the the signals that your

00:23:57,250 --> 00:24:03,070
searcher has provided to let you know

00:24:00,190 --> 00:24:06,520
about what about they're about what

00:24:03,070 --> 00:24:07,840
they're after on their interests and one

00:24:06,520 --> 00:24:11,260
of the things you use taste profiles for

00:24:07,840 --> 00:24:16,530
is recommendations so search logs is a

00:24:11,260 --> 00:24:16,530
great source of finding taste profiles

00:24:18,059 --> 00:24:23,440
so what we're gonna do is time we need

00:24:20,290 --> 00:24:25,480
the out of the first polity the user ID

00:24:23,440 --> 00:24:30,190
because we're looking for user and the

00:24:25,480 --> 00:24:31,840
query and the document we're at this

00:24:30,190 --> 00:24:34,360
time we're gonna group it by user so a

00:24:31,840 --> 00:24:35,830
distinct user and then list of queries

00:24:34,360 --> 00:24:36,580
that they've run and a list of documents

00:24:35,830 --> 00:24:39,279
that they brought

00:24:36,580 --> 00:24:41,049
super simple taste profile if you have

00:24:39,279 --> 00:24:43,750
metadata or other things like that on

00:24:41,049 --> 00:24:44,980
your documents that's often really

00:24:43,750 --> 00:24:48,130
useful to you because it gives you sort

00:24:44,980 --> 00:24:51,370
of more coarse-grained interests this

00:24:48,130 --> 00:24:53,230
case just queries and documents and then

00:24:51,370 --> 00:24:57,970
once you have a list of these users with

00:24:53,230 --> 00:25:00,309
their bags of queries and documents then

00:24:57,970 --> 00:25:03,360
you can look for similar users it's sort

00:25:00,309 --> 00:25:05,620
of like a collaborative filtering light

00:25:03,360 --> 00:25:09,159
look for similar users and you try to

00:25:05,620 --> 00:25:11,320
find things you can recommend um that

00:25:09,159 --> 00:25:14,139
other users have found that your user

00:25:11,320 --> 00:25:24,100
has not yet found or not yet queried

00:25:14,139 --> 00:25:26,169
right so taste profiles okay the same

00:25:24,100 --> 00:25:28,990
source data this time we're gonna

00:25:26,169 --> 00:25:35,169
transform it to keep the user and group

00:25:28,990 --> 00:25:38,350
by user we get a list of queries not a

00:25:35,169 --> 00:25:40,750
list of documents for each user um so in

00:25:38,350 --> 00:25:42,899
this case user 7:56 search for

00:25:40,750 --> 00:25:45,760
Chesapeake real estate Assessor and

00:25:42,899 --> 00:25:49,210
Virginia Beach and at some point they

00:25:45,760 --> 00:25:50,409
clicked on this Chesapeake City link and

00:25:49,210 --> 00:25:52,779
at some point some other like right so

00:25:50,409 --> 00:25:56,559
that's what that's what this law tells

00:25:52,779 --> 00:25:59,049
us this shape tells us so we got make

00:25:56,559 --> 00:26:04,470
sure it gets converted into an elastic

00:25:59,049 --> 00:26:09,399
search happy format um we're gonna

00:26:04,470 --> 00:26:11,110
create an index this is the mapping send

00:26:09,399 --> 00:26:13,480
new index for this notice I like to make

00:26:11,110 --> 00:26:14,799
lots of new indexes index per feature

00:26:13,480 --> 00:26:16,630
often you want to scale things

00:26:14,799 --> 00:26:20,830
differently so it's good to sort of keep

00:26:16,630 --> 00:26:23,380
things compartmentalized this is using

00:26:20,830 --> 00:26:27,639
search as you type again not sure if it

00:26:23,380 --> 00:26:29,559
needs to but we've got the got the query

00:26:27,639 --> 00:26:33,370
and the document and the user right it's

00:26:29,559 --> 00:26:36,010
just the same triple this is the core

00:26:33,370 --> 00:26:39,250
triples of a query log and we're gonna

00:26:36,010 --> 00:26:40,600
load it here we go

00:26:39,250 --> 00:26:44,110
it's done all right so we're gonna take

00:26:40,600 --> 00:26:47,260
one demo user that I just grabbed off

00:26:44,110 --> 00:26:49,090
the close to the top of the list and see

00:26:47,260 --> 00:26:50,530
if that one record looks like for them

00:26:49,090 --> 00:26:56,140
right so this is the take

00:26:50,530 --> 00:26:58,570
profile for user 10,008 um they did a

00:26:56,140 --> 00:27:04,030
bunch of searches for Cape Cod New

00:26:58,570 --> 00:27:06,580
Hampshire Maine followeth so as New

00:27:04,030 --> 00:27:08,920
England real estate searches right New

00:27:06,580 --> 00:27:10,420
Hampshire different parts of

00:27:08,920 --> 00:27:16,110
Massachusetts or so somebody's

00:27:10,420 --> 00:27:19,660
particular Realty Marcy Brittany RA um

00:27:16,110 --> 00:27:24,220
and they click on a bunch of these sites

00:27:19,660 --> 00:27:27,550
all right so let's ask the crowd here's

00:27:24,220 --> 00:27:29,050
our query that's the crowd who else

00:27:27,550 --> 00:27:32,380
shows these interests so this is the

00:27:29,050 --> 00:27:34,690
more like this query and we're looking

00:27:32,380 --> 00:27:37,720
at similarity across the the field

00:27:34,690 --> 00:27:39,190
across the the query and document fields

00:27:37,720 --> 00:27:40,930
for all these users right who's got the

00:27:39,190 --> 00:27:42,850
most similar queries and documents for

00:27:40,930 --> 00:27:44,770
this particular user because we want to

00:27:42,850 --> 00:27:49,090
look at what they have that this user

00:27:44,770 --> 00:27:52,060
does not have um here's our user going

00:27:49,090 --> 00:27:54,070
in for this index as we're looking for

00:27:52,060 --> 00:27:56,920
for users that would like this user a

00:27:54,070 --> 00:27:58,300
long query and document some chain and

00:27:56,920 --> 00:28:00,460
parameters and we're gonna get out a

00:27:58,300 --> 00:28:04,240
bunch of users that are similar and

00:28:00,460 --> 00:28:09,460
we're going to we're going to aggregate

00:28:04,240 --> 00:28:11,170
um their queries and see what bubbles up

00:28:09,460 --> 00:28:12,400
we're gonna a great the documents and

00:28:11,170 --> 00:28:13,990
see what bubbles up but in this case I'm

00:28:12,400 --> 00:28:16,720
just gonna pull the queries for us to

00:28:13,990 --> 00:28:22,950
look at just because that's what we've

00:28:16,720 --> 00:28:30,250
been looking for everything else so

00:28:22,950 --> 00:28:33,850
here's our user 10,008 and here's some

00:28:30,250 --> 00:28:35,260
suggested queries so a lot of them are

00:28:33,850 --> 00:28:36,730
redundant because there already has been

00:28:35,260 --> 00:28:37,840
some New Hampshire interest but it's

00:28:36,730 --> 00:28:40,660
been specific things in New Hampshire

00:28:37,840 --> 00:28:42,880
it's not the exact same thing oh I went

00:28:40,660 --> 00:28:46,330
in here and I specifically stripped out

00:28:42,880 --> 00:28:47,650
all of the queries that this user had

00:28:46,330 --> 00:28:48,820
already run everything that was already

00:28:47,650 --> 00:28:51,610
in that taste profiles they didn't see

00:28:48,820 --> 00:28:53,620
anything new or so they didn't see

00:28:51,610 --> 00:28:55,000
anything that they that's redundant

00:28:53,620 --> 00:28:56,680
anything they've done before so there's

00:28:55,000 --> 00:28:58,120
all new queries for them main real

00:28:56,680 --> 00:29:00,280
estate these are the most common ones

00:28:58,120 --> 00:29:01,920
right so that's why it's broader first

00:29:00,280 --> 00:29:04,660
right and then we're narrow bath

00:29:01,920 --> 00:29:07,090
Brunswick somebody's looking at North

00:29:04,660 --> 00:29:08,590
Carolina Oregon some different outfits

00:29:07,090 --> 00:29:11,320
right some of these so it's a little bit

00:29:08,590 --> 00:29:12,820
across the board and down here it's

00:29:11,320 --> 00:29:18,010
starting to be like more one offs but

00:29:12,820 --> 00:29:19,690
like the the big the common ones that

00:29:18,010 --> 00:29:21,910
bubbled up are these like Maine and New

00:29:19,690 --> 00:29:23,950
Hampshire and and some of these spots

00:29:21,910 --> 00:29:28,300
some of these are popular places I'm in

00:29:23,950 --> 00:29:29,770
New Hampshire oh you can do the talking

00:29:28,300 --> 00:29:31,420
this you can see all right so here's

00:29:29,770 --> 00:29:33,160
suggested documents although this is a

00:29:31,420 --> 00:29:34,990
little bit unfocused right because we're

00:29:33,160 --> 00:29:36,910
taking somebody's whole historians look

00:29:34,990 --> 00:29:39,040
at these documents if you're gonna do a

00:29:36,910 --> 00:29:41,220
document recommendation feature you

00:29:39,040 --> 00:29:44,890
would probably do it with more of a

00:29:41,220 --> 00:29:47,140
condensed time framing and sort of decay

00:29:44,890 --> 00:29:54,100
things out over time is somebody losing

00:29:47,140 --> 00:29:56,770
lost interest um so that's our recipes

00:29:54,100 --> 00:30:00,340
and that's the presentation thank you

00:29:56,770 --> 00:30:01,690
very much um the link is there for the

00:30:00,340 --> 00:30:04,960
notebooks that I just showed you know

00:30:01,690 --> 00:30:07,830
and if you have any questions you can

00:30:04,960 --> 00:30:11,260
find me here at searching tribution comm

00:30:07,830 --> 00:30:13,930
Lincoln I thank you very much and I hope

00:30:11,260 --> 00:30:16,630
you enjoy the rest of the sessions and

00:30:13,930 --> 00:30:20,080
thank you Peter and Peter joins us now

00:30:16,630 --> 00:30:22,860
live to answer any questions you have on

00:30:20,080 --> 00:30:27,270
his presentation so I'm just going to

00:30:22,860 --> 00:30:34,210
have a quick look at the speaker that oh

00:30:27,270 --> 00:30:35,830
can we hear you there Peter I can now

00:30:34,210 --> 00:30:39,010
thank you hear me thank you okay we'll

00:30:35,830 --> 00:30:42,580
just check the the slack David says my

00:30:39,010 --> 00:30:46,240
spikes but we're going to move on to

00:30:42,580 --> 00:30:48,040
some questions first xeni tasks would it

00:30:46,240 --> 00:30:49,930
make sense to add terms that were in the

00:30:48,040 --> 00:30:51,580
queries but not in the documents and

00:30:49,930 --> 00:30:55,260
then add them to the document

00:30:51,580 --> 00:30:58,060
this is towards recipe - sure it's a

00:30:55,260 --> 00:31:01,560
similar question on the solando a talk

00:30:58,060 --> 00:31:05,140
from you about broadening queries out

00:31:01,560 --> 00:31:06,990
even misspelled queries and figure out

00:31:05,140 --> 00:31:11,920
how to make that direct connection right

00:31:06,990 --> 00:31:13,480
they were using a you know a neural IR

00:31:11,920 --> 00:31:15,620
approach which which takes into account

00:31:13,480 --> 00:31:17,450
like how likely it is that

00:31:15,620 --> 00:31:20,270
but those misspelled queries actually

00:31:17,450 --> 00:31:22,970
have to do with the with the items that

00:31:20,270 --> 00:31:24,140
were found you know and you could

00:31:22,970 --> 00:31:31,340
certainly do what you're describing but

00:31:24,140 --> 00:31:34,120
it becomes of a binary solution right it

00:31:31,340 --> 00:31:36,020
finds it or it doesn't there's no nuance

00:31:34,120 --> 00:31:37,490
mostly for this talk I just wanted to

00:31:36,020 --> 00:31:38,990
focus on what kind of information get

00:31:37,490 --> 00:31:40,340
out of the logs and and there's

00:31:38,990 --> 00:31:41,990
certainly a ton of different things you

00:31:40,340 --> 00:31:44,750
could subsequently do with it whether

00:31:41,990 --> 00:31:47,059
it's feeding a manual process or or an

00:31:44,750 --> 00:31:49,520
automated process or like a semi

00:31:47,059 --> 00:31:51,110
automated process it's a good question

00:31:49,520 --> 00:31:52,700
and it that's the kind of insight that

00:31:51,110 --> 00:31:54,950
you that you really do want to get from

00:31:52,700 --> 00:31:57,230
your users is what is their lexicon that

00:31:54,950 --> 00:32:02,289
what is the lexicon mismatch between

00:31:57,230 --> 00:32:05,149
your users and your and your collection

00:32:02,289 --> 00:32:07,820
that's I say thank you and I know you've

00:32:05,149 --> 00:32:10,630
partially answered this in the slide so

00:32:07,820 --> 00:32:12,860
Tito asked apart from user query

00:32:10,630 --> 00:32:14,750
timestamp position and document are

00:32:12,860 --> 00:32:16,580
there any other search transactional log

00:32:14,750 --> 00:32:20,029
metadata you have found useful to store

00:32:16,580 --> 00:32:21,799
available well this is one where I'm

00:32:20,029 --> 00:32:23,539
sure there's a ton that just could be

00:32:21,799 --> 00:32:25,399
done here right because it's just

00:32:23,539 --> 00:32:27,919
flipping around and looking at the

00:32:25,399 --> 00:32:36,320
experience completely from the user

00:32:27,919 --> 00:32:38,179
shoot to look at the collection right so

00:32:36,320 --> 00:32:40,340
it's pretty green field but the thing

00:32:38,179 --> 00:32:43,669
that I'm particularly interested in is

00:32:40,340 --> 00:32:46,460
doing sort of entity recognition over

00:32:43,669 --> 00:32:48,830
query logs to really start to understand

00:32:46,460 --> 00:32:52,970
what are the domain aligned concepts

00:32:48,830 --> 00:32:54,679
that exist in there um and and how can

00:32:52,970 --> 00:32:56,630
you use that to help search relevance

00:32:54,679 --> 00:32:58,669
right in terms of query rewriting and

00:32:56,630 --> 00:33:00,980
everything else you know or a query

00:32:58,669 --> 00:33:02,690
segmentation alright how do you train a

00:33:00,980 --> 00:33:06,620
classifier to figure out what kind of

00:33:02,690 --> 00:33:08,600
query this is but also uh you know in my

00:33:06,620 --> 00:33:10,220
answer here is just with respect to

00:33:08,600 --> 00:33:12,080
taste profiling if you if you're able to

00:33:10,220 --> 00:33:15,110
pull out entities and and especially

00:33:12,080 --> 00:33:18,380
control domain entities then you've got

00:33:15,110 --> 00:33:20,059
a much better signal that is domain

00:33:18,380 --> 00:33:21,860
aligned for what this user is interested

00:33:20,059 --> 00:33:24,020
in right if you want to recommend them

00:33:21,860 --> 00:33:28,680
content in the future then if you're

00:33:24,020 --> 00:33:31,320
just working with terms fantastic

00:33:28,680 --> 00:33:33,720
so that's it for the questions in the

00:33:31,320 --> 00:33:36,030
channel like why perhaps got one for you

00:33:33,720 --> 00:33:37,559
so you've done recipes 1 2 for what

00:33:36,030 --> 00:33:43,710
what's a net give us an idea for the

00:33:37,559 --> 00:33:46,110
next recipe you could do sure I think I

00:33:43,710 --> 00:33:48,330
went I think I went as far as I could

00:33:46,110 --> 00:33:49,710
without without machine learning and

00:33:48,330 --> 00:33:50,880
that was sort of the point of the time

00:33:49,710 --> 00:33:52,500
there's probably some other cool stuff

00:33:50,880 --> 00:33:55,020
you could do here just sort of exploring

00:33:52,500 --> 00:33:58,500
that graph also the the data set itself

00:33:55,020 --> 00:33:59,550
is it is really limited you know just

00:33:58,500 --> 00:34:02,520
trying to find a dataset that I could

00:33:59,550 --> 00:34:04,050
use but you know obviously you've got

00:34:02,520 --> 00:34:06,179
the full collection and if you've got

00:34:04,050 --> 00:34:09,240
full user profile information you could

00:34:06,179 --> 00:34:11,399
you could analyze this much more deeply

00:34:09,240 --> 00:34:13,350
into different in you know in terms of

00:34:11,399 --> 00:34:14,790
sort of like identifying what is this

00:34:13,350 --> 00:34:16,190
users persona based on what you know

00:34:14,790 --> 00:34:18,210
about them and how would you use that

00:34:16,190 --> 00:34:20,940
how would you interpret that from their

00:34:18,210 --> 00:34:22,440
queries right or you know or what you

00:34:20,940 --> 00:34:24,929
know what's all the metadata on those

00:34:22,440 --> 00:34:26,460
documents that it's useful in sort of

00:34:24,929 --> 00:34:29,610
like really understanding query intent

00:34:26,460 --> 00:34:34,020
or like especially in terms of expanding

00:34:29,610 --> 00:34:36,270
the context short this is something

00:34:34,020 --> 00:34:38,399
that's come up when the neural IR tracks

00:34:36,270 --> 00:34:41,220
a lot right is that when you're working

00:34:38,399 --> 00:34:42,629
with you know embeddings but it

00:34:41,220 --> 00:34:44,399
typically does better with longer

00:34:42,629 --> 00:34:46,409
queries and one of the ways that people

00:34:44,399 --> 00:34:48,290
overcome this because most queries are

00:34:46,409 --> 00:34:51,090
short queries right or the common ones

00:34:48,290 --> 00:34:52,889
is that they will expand user queries

00:34:51,090 --> 00:34:55,320
with additional context from the user's

00:34:52,889 --> 00:34:57,060
profile right whether it's information

00:34:55,320 --> 00:34:59,040
about the user or past searches they've

00:34:57,060 --> 00:35:01,950
run or things like that right so this is

00:34:59,040 --> 00:35:06,260
another sort of like wide open area to

00:35:01,950 --> 00:35:09,480
to explore Irene I also really like the

00:35:06,260 --> 00:35:11,040
zalando idea of just taking the session

00:35:09,480 --> 00:35:13,190
ization and just taking everything that

00:35:11,040 --> 00:35:16,530
a user in this case is searched in a day

00:35:13,190 --> 00:35:18,420
and everything that they clicked on in a

00:35:16,530 --> 00:35:19,950
day and just dumping it into a bag and

00:35:18,420 --> 00:35:22,200
saying ok that's how this is the

00:35:19,950 --> 00:35:25,140
relative this is the intent and this is

00:35:22,200 --> 00:35:26,550
the actual effect of of this user for

00:35:25,140 --> 00:35:30,270
today and if we look at enough users

00:35:26,550 --> 00:35:35,940
like that you start to see patterns and

00:35:30,270 --> 00:35:39,000
it starts to create inquiries and items

00:35:35,940 --> 00:35:42,480
right so there's definitely like much

00:35:39,000 --> 00:35:44,100
much more that could happen here in the

00:35:42,480 --> 00:35:45,420
you know it's have been that in the NLP

00:35:44,100 --> 00:35:47,640
and the machine learning Becker

00:35:45,420 --> 00:35:49,410
embedding space right thank you so

00:35:47,640 --> 00:35:51,900
that's one more question from Tito here

00:35:49,410 --> 00:35:54,300
when generating related queries and send

00:35:51,900 --> 00:35:56,040
them candidates run time do you limit

00:35:54,300 --> 00:35:59,640
the depth of the documents and analyze

00:35:56,040 --> 00:36:02,550
for performance reasons so this was a

00:35:59,640 --> 00:36:03,810
toy dataset so there was no need to

00:36:02,550 --> 00:36:05,430
really do that but then but there's

00:36:03,810 --> 00:36:06,900
there is a problem of course which is

00:36:05,430 --> 00:36:09,090
that when you start to get really down

00:36:06,900 --> 00:36:11,160
the tail of frequency of occurrence of

00:36:09,090 --> 00:36:15,000
something like it gets very noisy right

00:36:11,160 --> 00:36:18,990
so there are practical reasons at scale

00:36:15,000 --> 00:36:21,270
to to want to look for a certain level

00:36:18,990 --> 00:36:24,150
of agreement between users on some of

00:36:21,270 --> 00:36:25,980
these areas right so so like something

00:36:24,150 --> 00:36:28,350
might not truly be a synonym candidate

00:36:25,980 --> 00:36:33,260
unless unless it shows up frequently

00:36:28,350 --> 00:36:37,460
right so when so when I think about

00:36:33,260 --> 00:36:40,710
think about I think about like how how

00:36:37,460 --> 00:36:43,320
far down the the tail of people's

00:36:40,710 --> 00:36:46,160
queries do you go before you before you

00:36:43,320 --> 00:36:48,240
chop it off right and especially with

00:36:46,160 --> 00:36:49,350
autosuggest that's a that's a big deal

00:36:48,240 --> 00:36:51,600
right it's a big part I mentioned

00:36:49,350 --> 00:36:53,700
filtering right if you're using queries

00:36:51,600 --> 00:36:54,810
you get profanity you get you know

00:36:53,700 --> 00:36:56,580
depending on what your search engine is

00:36:54,810 --> 00:36:57,900
like you got all sorts of content you

00:36:56,580 --> 00:37:01,080
don't want to just immediately surface

00:36:57,900 --> 00:37:02,580
and a big part of that filtering gets

00:37:01,080 --> 00:37:05,880
done for you if you just look for

00:37:02,580 --> 00:37:07,380
consensus so for like suggestions like

00:37:05,880 --> 00:37:10,109
is what are the most commonly other type

00:37:07,380 --> 00:37:12,119
terms with this term and you'll get the

00:37:10,109 --> 00:37:13,950
best often the best suggestions like

00:37:12,119 --> 00:37:15,930
that said you still have to filter for

00:37:13,950 --> 00:37:18,210
the things you don't want in there but a

00:37:15,930 --> 00:37:20,190
lot of the noise comes out by just by

00:37:18,210 --> 00:37:23,060
just deciding this is the end of this is

00:37:20,190 --> 00:37:23,060
where I want to cut the tail

00:37:29,619 --> 00:37:31,680

YouTube URL: https://www.youtube.com/watch?v=Mk0ZC7Pujd4


