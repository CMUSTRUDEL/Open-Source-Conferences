Title: #bbuzz: Austin Bennett & Maximilian Michels -  First Steps with Apache Beam
Publication date: 2020-08-04
Playlist: Berlin Buzzwords | MICES | Haystack â€“ Joint Virtual Event 2020
Description: 
	More: https://berlinbuzzwords.de/session/first-steps-apache-beam-writing-portable-pipelines-using-java-python-go


Full title: First Steps with Apache Beam: Writing Portable Pipelines using Java, Python, Go 

Apache Beam is an open source unified model for defining data processing pipelines (Batch and strEAM), which allows you to write your pipeline in your language of choice and run it with minimal effort on the execution engine (ex: Apache Spark, Apache Flink, Google Cloud Dataflow) of choice.  In this practical session we will get hands-on writing Beam pipelines, and as well as discuss the fundamentals of Beam programming model, and SDKs (Python, Go, Java).

Prerequisites

You will need to install IntelliJ IDEA and/or PyCharm with the EduTools plugin, and with the kata(s) installed in the language of their choice to work through exercises in the online platform.

Instructions can be found on the blogpost here: https://beam.apache.org/blog/beam-kata-release/
Captions: 
	00:00:10,190 --> 00:00:16,560
next up is a workshop about Apache beam

00:00:14,180 --> 00:00:18,300
specifically how to get started with

00:00:16,560 --> 00:00:20,850
Apache beam so this is going to be a

00:00:18,300 --> 00:00:24,570
very interesting session if you want to

00:00:20,850 --> 00:00:27,960
write data pipelines in Java in Python

00:00:24,570 --> 00:00:30,329
and go in sequel and the workshops not

00:00:27,960 --> 00:00:34,020
given given by me it's presented by

00:00:30,329 --> 00:00:38,880
Austin Bennett he is a cloud architect

00:00:34,020 --> 00:00:41,370
at dish and he is also a cognitive

00:00:38,880 --> 00:00:44,370
linguist and researcher with interest in

00:00:41,370 --> 00:00:46,949
multimodal communication now I don't

00:00:44,370 --> 00:00:49,710
know what that is but I

00:00:46,949 --> 00:00:52,920
he is pretty into the asked about beam

00:00:49,710 --> 00:00:54,660
and yeah looking forward to the workshop

00:00:52,920 --> 00:00:58,910
now thank you

00:00:54,660 --> 00:01:03,359
oh hello everyone all right let's

00:00:58,910 --> 00:01:08,659
alright cool so this is first steps with

00:01:03,359 --> 00:01:12,150
Apache beam we're going to walk through

00:01:08,659 --> 00:01:15,390
writing supportable pipelines with Java

00:01:12,150 --> 00:01:17,460
Python and a little bit ago more

00:01:15,390 --> 00:01:22,280
enthusiastic about go then where it's at

00:01:17,460 --> 00:01:26,040
at the moment but we will see that so

00:01:22,280 --> 00:01:30,080
what we will cover today I will walk you

00:01:26,040 --> 00:01:34,400
through on introduction here's what the

00:01:30,080 --> 00:01:37,790
beam is all about let's get an overview

00:01:34,400 --> 00:01:40,950
let's certainly get hands-on that's

00:01:37,790 --> 00:01:44,510
prime takeaway I hope at the end of this

00:01:40,950 --> 00:01:48,840
block you guys feel comfortable using

00:01:44,510 --> 00:01:52,110
beam we will take breaks throughout the

00:01:48,840 --> 00:01:53,720
lecture here for exercises or what we

00:01:52,110 --> 00:01:57,180
call Cotto's

00:01:53,720 --> 00:02:01,250
and then we'll dig into some of the

00:01:57,180 --> 00:02:05,340
windowing and time semantics some about

00:02:01,250 --> 00:02:08,310
triggering and streams and also side

00:02:05,340 --> 00:02:10,739
inputs I mention all of these things but

00:02:08,310 --> 00:02:13,709
ultimately we're gonna go through them

00:02:10,739 --> 00:02:16,560
very briefly these things get quite

00:02:13,709 --> 00:02:19,440
advanced and I'm hoping to expose you to

00:02:16,560 --> 00:02:22,560
the fundamental building blocks that you

00:02:19,440 --> 00:02:23,880
need to start being proficient naturally

00:02:22,560 --> 00:02:26,760
we can't do it all

00:02:23,880 --> 00:02:29,210
in this short block and then finally

00:02:26,760 --> 00:02:32,070
we'll wrap this up just sharing some

00:02:29,210 --> 00:02:36,510
opportunities ways to get involved with

00:02:32,070 --> 00:02:39,800
the beam community as well as you know

00:02:36,510 --> 00:02:45,360
some great things if you know beam and

00:02:39,800 --> 00:02:47,910
otherwise cool so shameless plug at

00:02:45,360 --> 00:02:51,360
least at the moment both max and I

00:02:47,910 --> 00:02:54,930
helped with organizing beam summit a

00:02:51,360 --> 00:02:58,320
couple day conference in August wanted

00:02:54,930 --> 00:02:59,940
to alert you if you guys like what

00:02:58,320 --> 00:03:06,210
you're hearing around beam and makes

00:02:59,940 --> 00:03:10,620
sense check it out it's free and and

00:03:06,210 --> 00:03:14,040
whatnot so cool anyways these exercises

00:03:10,620 --> 00:03:19,500
are going to be hands-on they hopefully

00:03:14,040 --> 00:03:22,730
you guys have received a pre email but

00:03:19,500 --> 00:03:24,680
ultimately please download IntelliJ or

00:03:22,730 --> 00:03:30,900
PyCharm

00:03:24,680 --> 00:03:32,970
so in the event well hopefully you can

00:03:30,900 --> 00:03:35,850
install either the community editions

00:03:32,970 --> 00:03:40,590
are free you can use PyCharm ad you

00:03:35,850 --> 00:03:43,890
edition edu or you can use any paid

00:03:40,590 --> 00:03:45,960
version that you have this is a link

00:03:43,890 --> 00:03:51,780
here and maybe we should put that in the

00:03:45,960 --> 00:03:54,540
QA room and pin that otherwise beam dot

00:03:51,780 --> 00:03:56,760
Apache org slash blog slash beam cotta

00:03:54,540 --> 00:04:01,230
releases these are a community resource

00:03:56,760 --> 00:04:04,410
in general for getting hands on wood

00:04:01,230 --> 00:04:07,110
beam so we'll walk through setup but

00:04:04,410 --> 00:04:09,990
encouraging while this is going on since

00:04:07,110 --> 00:04:13,140
downloads may take a few moments try to

00:04:09,990 --> 00:04:17,040
download some version of IntelliJ if you

00:04:13,140 --> 00:04:20,220
want to use a go or Java specifically or

00:04:17,040 --> 00:04:22,290
pipe you can also use Python in that or

00:04:20,220 --> 00:04:28,890
get PyCharm if you only want to use

00:04:22,290 --> 00:04:31,070
Python cool alright so before we can get

00:04:28,890 --> 00:04:34,080
hands-on you guys should probably know

00:04:31,070 --> 00:04:35,820
what beam is about so I'm going to walk

00:04:34,080 --> 00:04:37,270
you through the programming model and

00:04:35,820 --> 00:04:46,000
the vision

00:04:37,270 --> 00:04:50,140
for the project okay so the Apache beam

00:04:46,000 --> 00:04:53,320
vision it's to be an open-source unified

00:04:50,140 --> 00:04:55,060
model for defining data processing

00:04:53,320 --> 00:04:56,410
pipelines which allows you to write the

00:04:55,060 --> 00:05:00,010
pipeline in the language of your choice

00:04:56,410 --> 00:05:03,400
and run it with minimal effort on the

00:05:00,010 --> 00:05:06,310
execution engine of choice so there's a

00:05:03,400 --> 00:05:08,800
lot of things there so I'm gonna slowly

00:05:06,310 --> 00:05:14,410
walk through and unpack that for you

00:05:08,800 --> 00:05:16,240
guys so I mean specifically hopefully we

00:05:14,410 --> 00:05:19,120
have a sense of what data processing

00:05:16,240 --> 00:05:21,340
pipelines are but even starting there

00:05:19,120 --> 00:05:23,770
what's a pipeline I think we don't mean

00:05:21,340 --> 00:05:26,740
these sorts of pipelines but ultimately

00:05:23,770 --> 00:05:29,260
for data where we have some sort of say

00:05:26,740 --> 00:05:34,650
input we may do some sort of

00:05:29,260 --> 00:05:39,880
transformations and then we get to an

00:05:34,650 --> 00:05:44,440
output so a simple beam data processing

00:05:39,880 --> 00:05:48,160
pipeline starts with a source oh I can't

00:05:44,440 --> 00:05:51,190
click there that gets read into what is

00:05:48,160 --> 00:05:53,680
referred to a as ap collection so

00:05:51,190 --> 00:05:56,920
parallel collection of elements we

00:05:53,680 --> 00:06:00,670
perform key transforms parallel

00:05:56,920 --> 00:06:03,460
transformations in to say another P

00:06:00,670 --> 00:06:08,170
collection maybe do another transform

00:06:03,460 --> 00:06:11,130
which gets stored as ap collection and

00:06:08,170 --> 00:06:15,370
then written out to some sort of sync

00:06:11,130 --> 00:06:18,460
somewhere so we can get into the more

00:06:15,370 --> 00:06:21,220
specifics but again in beam what is a

00:06:18,460 --> 00:06:23,710
pipeline it is a directed acyclic graph

00:06:21,220 --> 00:06:25,810
of data transformations that are applied

00:06:23,710 --> 00:06:29,050
to one or more collections of data so

00:06:25,810 --> 00:06:30,940
again as we said in beam P

00:06:29,050 --> 00:06:33,190
transformations parallel transformations

00:06:30,940 --> 00:06:38,010
P collections the collections of data

00:06:33,190 --> 00:06:41,950
these can be either unbounded so

00:06:38,010 --> 00:06:44,350
streaming or bounded the super cool

00:06:41,950 --> 00:06:46,930
thing about beam is the sort of

00:06:44,350 --> 00:06:50,900
transformation logic often that you're

00:06:46,930 --> 00:06:52,699
doing has no basis I mean you don't

00:06:50,900 --> 00:06:57,400
need to worry about whether or not it's

00:06:52,699 --> 00:07:01,639
that bounded or batch data or unbounded

00:06:57,400 --> 00:07:04,370
streaming data pipelines themselves can

00:07:01,639 --> 00:07:07,789
have you know multiple sources as we see

00:07:04,370 --> 00:07:17,389
here and or multiple sinks and can do

00:07:07,789 --> 00:07:20,169
any sort of dress there so the graph

00:07:17,389 --> 00:07:23,990
gets optimized based on the code and

00:07:20,169 --> 00:07:26,840
gets submitted to the route runner of

00:07:23,990 --> 00:07:29,090
your choice so again I'm already I guess

00:07:26,840 --> 00:07:32,389
talking ahead to the peak collection at

00:07:29,090 --> 00:07:38,120
P transforms this is probably beaten in

00:07:32,389 --> 00:07:43,669
already by now so ideas around here's

00:07:38,120 --> 00:07:47,680
our again sources and maybe combined we

00:07:43,669 --> 00:07:52,370
can't and you know various forms of

00:07:47,680 --> 00:08:00,199
distillation ways we can partition data

00:07:52,370 --> 00:08:02,840
here or combine so that's roughly what

00:08:00,199 --> 00:08:05,570
data processing pipelines are so what do

00:08:02,840 --> 00:08:07,669
we mean by this unified model so this is

00:08:05,570 --> 00:08:11,139
the cool thing where again we can have

00:08:07,669 --> 00:08:14,330
better processing or stream processing

00:08:11,139 --> 00:08:18,889
through Apache beam model as well as

00:08:14,330 --> 00:08:21,440
it's SDKs and we can run that on many of

00:08:18,889 --> 00:08:24,770
the runners any of the supported

00:08:21,440 --> 00:08:28,180
backends so that we probably already had

00:08:24,770 --> 00:08:30,830
a few sessions around Apache flink here

00:08:28,180 --> 00:08:33,529
Apache spark is another well-known one

00:08:30,830 --> 00:08:36,830
there is a direct pipeline which really

00:08:33,529 --> 00:08:39,169
just use it for testing don't try to

00:08:36,830 --> 00:08:45,620
write production jobs with it it is not

00:08:39,169 --> 00:08:49,550
meant to isn't certified for scalability

00:08:45,620 --> 00:08:52,490
and then naturally beam is often

00:08:49,550 --> 00:08:55,430
conflated with Google Cloud dataflow to

00:08:52,490 --> 00:08:58,390
use that managed cloud service you would

00:08:55,430 --> 00:09:02,449
write beam jobs and submit them to the

00:08:58,390 --> 00:09:07,159
Google Cloud dataflow back-end

00:09:02,449 --> 00:09:10,999
so beam is the you know SDK they are

00:09:07,159 --> 00:09:15,439
their beam allows you to use the

00:09:10,999 --> 00:09:18,069
language of choice so we can we're gonna

00:09:15,439 --> 00:09:20,419
talk about especially Python and Java

00:09:18,069 --> 00:09:25,009
there are some go examples to work

00:09:20,419 --> 00:09:27,889
through recently Kotlin has a bunch of

00:09:25,009 --> 00:09:34,609
cortes available so I'll also show you

00:09:27,889 --> 00:09:38,720
those I'm not competent Kotlin developer

00:09:34,609 --> 00:09:40,099
so I can't speak to writing that too

00:09:38,720 --> 00:09:43,459
well although I look forward to playing

00:09:40,099 --> 00:09:46,609
with it something that maybe you might

00:09:43,459 --> 00:09:49,519
prefer over Java there's also beam

00:09:46,609 --> 00:09:50,539
sequel and you may recognize this as

00:09:49,519 --> 00:09:54,259
Scala

00:09:50,539 --> 00:09:57,199
so there is a Scala lair I'm open

00:09:54,259 --> 00:10:02,599
sourced by Spotify called Co written on

00:09:57,199 --> 00:10:05,269
top of the Java SDK so a different way

00:10:02,599 --> 00:10:07,369
of looking at this thing beam is a

00:10:05,269 --> 00:10:10,309
single model that supports multiple

00:10:07,369 --> 00:10:13,789
modes of processing that there are

00:10:10,309 --> 00:10:17,329
multiple SDKs in various language that

00:10:13,789 --> 00:10:20,449
you would write and submit to various

00:10:17,329 --> 00:10:22,879
runners so again these are the more

00:10:20,449 --> 00:10:27,739
well-known ones but there are several

00:10:22,879 --> 00:10:35,829
others the pipeline runners we can see

00:10:27,739 --> 00:10:39,909
here so again the direct runner flink

00:10:35,829 --> 00:10:45,079
linkedin especially runs beam on samsa

00:10:39,909 --> 00:10:49,309
spark as we said AWS had given a talk at

00:10:45,079 --> 00:10:52,389
last year's beam summit showing how you

00:10:49,309 --> 00:10:56,569
can submit beam jobs either to their own

00:10:52,389 --> 00:10:58,220
AWS EMR clusters or to the Kinesis data

00:10:56,569 --> 00:11:00,879
analytics

00:10:58,220 --> 00:11:04,249
hazal cast has a runner called jet

00:11:00,879 --> 00:11:08,569
Google Cloud dataflow was mentioned IBM

00:11:04,249 --> 00:11:11,059
streams supports submitting beam jobs

00:11:08,569 --> 00:11:13,219
too and there's a

00:11:11,059 --> 00:11:17,269
I think it's just incubating still

00:11:13,219 --> 00:11:20,239
Apache project called memo I think

00:11:17,269 --> 00:11:24,919
that's the range of runners at the

00:11:20,239 --> 00:11:27,679
moment at least you know that are well

00:11:24,919 --> 00:11:30,529
known and still in active development so

00:11:27,679 --> 00:11:33,649
another way that this is talked about

00:11:30,529 --> 00:11:36,759
here the Apache beam ecosystem again a

00:11:33,649 --> 00:11:40,009
unified programming model it is portable

00:11:36,759 --> 00:11:44,899
given you can write the same beam code

00:11:40,009 --> 00:11:47,359
and run it on flink or spark or data

00:11:44,899 --> 00:11:51,169
flow for instance I know that was my

00:11:47,359 --> 00:11:56,469
biggest reason for seeing the promise is

00:11:51,169 --> 00:11:59,659
not being tied to the sort of cluster or

00:11:56,469 --> 00:12:03,799
infrastructure that my ops team wanted

00:11:59,659 --> 00:12:07,039
to maintain for me it's also portable

00:12:03,799 --> 00:12:11,659
from the language perspective I using

00:12:07,039 --> 00:12:17,269
the Apache beam model I can write with a

00:12:11,659 --> 00:12:19,999
bunch of languages as well as cross

00:12:17,269 --> 00:12:22,399
language of potentially multiple

00:12:19,999 --> 00:12:24,799
languages in the same pipeline which is

00:12:22,399 --> 00:12:28,249
work well underway

00:12:24,799 --> 00:12:30,939
it's very extensible as I mentioned

00:12:28,249 --> 00:12:35,779
supports DSL is like sequel or Scala and

00:12:30,939 --> 00:12:40,819
has a ton of iOS with a ton of the major

00:12:35,779 --> 00:12:45,429
open source data stores and api's as

00:12:40,819 --> 00:12:50,839
well as integrates with major clouds

00:12:45,429 --> 00:12:53,239
okay so that was a lot on you know

00:12:50,839 --> 00:13:00,069
seeing the same thing like four times so

00:12:53,239 --> 00:13:03,999
hopefully that makes a good enough sense

00:13:00,069 --> 00:13:07,039
yeah so long to talk about now the

00:13:03,999 --> 00:13:10,839
intricacies of pipelines themselves a

00:13:07,039 --> 00:13:14,599
pipeline can be used or I mean is

00:13:10,839 --> 00:13:16,579
written to describe four things we're

00:13:14,599 --> 00:13:19,279
going to use this color code convention

00:13:16,579 --> 00:13:24,370
throughout so what are we computing

00:13:19,279 --> 00:13:26,440
that's gonna be the primary focus here

00:13:24,370 --> 00:13:28,990
and then we're in event time when in

00:13:26,440 --> 00:13:31,720
processing time and how do refinements

00:13:28,990 --> 00:13:35,290
relate so what is the sort of

00:13:31,720 --> 00:13:39,089
transformations then there is also when

00:13:35,290 --> 00:13:42,400
doing which is about where that occurs

00:13:39,089 --> 00:13:47,290
there is watermarks and triggers so when

00:13:42,400 --> 00:13:51,520
does that occur and there is the

00:13:47,290 --> 00:13:55,839
accumulation on how are we accumulating

00:13:51,520 --> 00:13:58,870
results this is a very useful link to

00:13:55,839 --> 00:14:01,800
pay attention to I can't pull up that

00:13:58,870 --> 00:14:04,750
from these slides beamed out Apache org

00:14:01,800 --> 00:14:08,470
documentation runners compatibility

00:14:04,750 --> 00:14:10,330
matrix so that's also pretty findable

00:14:08,470 --> 00:14:12,580
just from the beam dot Apache org

00:14:10,330 --> 00:14:15,960
website are searching beam compatibility

00:14:12,580 --> 00:14:20,980
matrix this just tells you the sort of

00:14:15,960 --> 00:14:23,830
functions and what aspects of the beam

00:14:20,980 --> 00:14:29,830
SDK are implemented and working well in

00:14:23,830 --> 00:14:34,270
each of the various runners so as you

00:14:29,830 --> 00:14:39,000
can see most runners do a rather good

00:14:34,270 --> 00:14:39,000
job of implementing the full suite of

00:14:39,360 --> 00:14:46,510
semantics from the beam SDK or beam

00:14:42,790 --> 00:14:51,459
model I mean but naturally check here if

00:14:46,510 --> 00:14:58,180
there's questions all right cool that

00:14:51,459 --> 00:15:02,320
was a bunch of stuff so I'll give us one

00:14:58,180 --> 00:15:06,640
second to let that sink in and I'm also

00:15:02,320 --> 00:15:12,760
gonna check the QA room although I

00:15:06,640 --> 00:15:18,010
believe that max is in there doing cool

00:15:12,760 --> 00:15:22,330
answering questions and pointing us to

00:15:18,010 --> 00:15:24,820
where we want to be so cool all right

00:15:22,330 --> 00:15:29,560
let's start talking about writing a

00:15:24,820 --> 00:15:33,980
pipeline where are we

00:15:29,560 --> 00:15:40,220
and then pretty soon we will wind up

00:15:33,980 --> 00:15:42,910
getting hands-on so again writing a

00:15:40,220 --> 00:15:46,130
pipeline we want to focus on this

00:15:42,910 --> 00:15:48,320
transformation logic and what are we

00:15:46,130 --> 00:15:49,100
computing first so we can talk about

00:15:48,320 --> 00:15:51,490
elementwise

00:15:49,100 --> 00:15:55,790
transformations which are equivalent to

00:15:51,490 --> 00:15:58,220
math and MapReduce style we can talk

00:15:55,790 --> 00:16:03,160
about the aggregating functions which

00:15:58,220 --> 00:16:05,510
then essentially re reduce and there are

00:16:03,160 --> 00:16:10,370
composite transformations we can do

00:16:05,510 --> 00:16:13,250
which is using combinations of various

00:16:10,370 --> 00:16:16,370
bits so we'll walk through all of those

00:16:13,250 --> 00:16:18,560
at a first pass we're going to talk

00:16:16,370 --> 00:16:21,730
about element-wise transformations and

00:16:18,560 --> 00:16:25,490
then get moving with hands on

00:16:21,730 --> 00:16:30,980
element-wise transformations that you

00:16:25,490 --> 00:16:35,450
can write yourself using do so the

00:16:30,980 --> 00:16:39,560
primitive two of most things in beam is

00:16:35,450 --> 00:16:46,280
a pardhu so parallel do function it

00:16:39,560 --> 00:16:55,520
performs a o much better here I changed

00:16:46,280 --> 00:16:58,130
my screen nice so it performs a I mean

00:16:55,520 --> 00:17:01,670
that's how you do things parallely right

00:16:58,130 --> 00:17:04,910
things with the B model and you can see

00:17:01,670 --> 00:17:08,360
so for instance here is an example of an

00:17:04,910 --> 00:17:12,880
element-wise transformation in Java so

00:17:08,360 --> 00:17:15,860
we are taking the pipeline let's go here

00:17:12,880 --> 00:17:20,360
we have a pipeline that we are creating

00:17:15,860 --> 00:17:25,070
we have an input based on our elements

00:17:20,360 --> 00:17:28,720
and we have a pardhu of a do function in

00:17:25,070 --> 00:17:33,050
this case we are creating a key value

00:17:28,720 --> 00:17:37,190
pair of the what will be the first

00:17:33,050 --> 00:17:42,730
letter and the word based on the input

00:17:37,190 --> 00:17:42,730
collection of the various supported that

00:17:42,800 --> 00:17:48,290
we'll have some examples of things like

00:17:46,310 --> 00:17:54,490
this hands on in a second so I want

00:17:48,290 --> 00:17:54,490
unpack it too much we also have

00:17:55,300 --> 00:18:02,780
limitless transformations so in Python

00:17:59,840 --> 00:18:04,670
this is just the first letter take the

00:18:02,780 --> 00:18:08,120
input collection and return the first

00:18:04,670 --> 00:18:10,010
letter so it's as simple as creating a

00:18:08,120 --> 00:18:14,270
class with a process method and

00:18:10,010 --> 00:18:18,250
returning what you want in Python you

00:18:14,270 --> 00:18:21,800
will see we use this pipe operator to

00:18:18,250 --> 00:18:26,630
essentially pipe or chain our functions

00:18:21,800 --> 00:18:30,740
together and the UNIX style and here is

00:18:26,630 --> 00:18:34,700
an example of the go code again first

00:18:30,740 --> 00:18:39,500
letter function write the function have

00:18:34,700 --> 00:18:43,160
a beamed up pardhu with the context the

00:18:39,500 --> 00:18:46,070
function and what you're working with so

00:18:43,160 --> 00:18:48,760
again we'll dig into that in a moment a

00:18:46,070 --> 00:18:53,480
little bit more on element wise

00:18:48,760 --> 00:18:58,400
transformations not only is our news one

00:18:53,480 --> 00:19:00,710
to one but pardhu's can output 0 1 as we

00:18:58,400 --> 00:19:04,160
said or many so for instance we could

00:19:00,710 --> 00:19:08,030
explode prefixes and say for the word

00:19:04,160 --> 00:19:11,270
Samsa as the runner we could go SS asam

00:19:08,030 --> 00:19:16,630
sa MGA for instance where we have a ton

00:19:11,270 --> 00:19:23,930
of outputs for each input element

00:19:16,630 --> 00:19:29,390
alternately we can filter where we have

00:19:23,930 --> 00:19:31,580
less elements so cool that is the bare

00:19:29,390 --> 00:19:35,300
fundamentals that I think important to

00:19:31,580 --> 00:19:38,330
know this moment too before I let you

00:19:35,300 --> 00:19:40,880
guys get hands-on here so I'm hoping

00:19:38,330 --> 00:19:47,290
maybe you guys have had the chance to

00:19:40,880 --> 00:19:50,950
install IntelliJ right and we can even

00:19:47,290 --> 00:19:50,950
Community Edition

00:19:53,140 --> 00:19:59,540
right so for instance searching Google

00:19:57,410 --> 00:20:03,830
or whatnot there is this Community

00:19:59,540 --> 00:20:10,640
Edition that you can download I'm

00:20:03,830 --> 00:20:14,540
clearly on a Mac here as shows and that

00:20:10,640 --> 00:20:18,200
will run download and then install so

00:20:14,540 --> 00:20:23,210
hoping you guys have done that the next

00:20:18,200 --> 00:20:29,170
step to Luca I will pull up my version

00:20:23,210 --> 00:20:29,170
of IntelliJ

00:20:44,600 --> 00:20:53,149
okay so once you have intelligent

00:20:48,200 --> 00:20:56,269
downloaded as the instructions show in

00:20:53,149 --> 00:21:02,059
the now let's go view

00:20:56,269 --> 00:21:05,659
Cotto's vlog being caught that's release

00:21:02,059 --> 00:21:08,269
so in the chatroom I believe we have a

00:21:05,659 --> 00:21:13,330
link to this this page should show you

00:21:08,269 --> 00:21:17,320
how to get set up but additionally I

00:21:13,330 --> 00:21:28,899
will walk you through that which is

00:21:17,320 --> 00:21:34,750
there see okay so once you have say

00:21:28,899 --> 00:21:40,100
IntelliJ installed here you can go to

00:21:34,750 --> 00:21:42,860
configure plugins and look for the edge'

00:21:40,100 --> 00:21:44,720
tools plug-in and in this case it's

00:21:42,860 --> 00:21:49,450
already installed but you would click

00:21:44,720 --> 00:21:52,129
the install button to get what you need

00:21:49,450 --> 00:21:55,429
you can see I've already installed and

00:21:52,129 --> 00:21:59,720
played with these last night for

00:21:55,429 --> 00:22:02,539
instance once the edge of tools plugins

00:21:59,720 --> 00:22:07,490
are installed it brings up this learn

00:22:02,539 --> 00:22:18,769
and teach dialog so we can go to browse

00:22:07,490 --> 00:22:23,259
courses and if you type beam you will

00:22:18,769 --> 00:22:27,799
see we have beam Coty's for Python Java

00:22:23,259 --> 00:22:31,100
these two are very thorough recently

00:22:27,799 --> 00:22:33,710
some golang Coty's have been added I

00:22:31,100 --> 00:22:38,090
even wrote one for flattened I believe

00:22:33,710 --> 00:22:41,000
last week and I just saw these Kotlin

00:22:38,090 --> 00:22:44,629
ones so feel free to give those a shot

00:22:41,000 --> 00:22:47,990
I'm unsure how familiar maxes with

00:22:44,629 --> 00:22:50,389
Kotlin this is not something I

00:22:47,990 --> 00:22:52,070
anticipate us covering but know that

00:22:50,389 --> 00:22:56,480
it's there and if that's a language you

00:22:52,070 --> 00:22:57,560
prefer naturally something you can do in

00:22:56,480 --> 00:23:02,450
being

00:22:57,560 --> 00:23:04,520
so uh you know for instance I think this

00:23:02,450 --> 00:23:06,910
is going to create a copy but that's

00:23:04,520 --> 00:23:06,910
okay

00:23:42,250 --> 00:23:52,940
so that is bringing these things up for

00:23:47,270 --> 00:23:54,910
those wanting to get oh good it didn't

00:23:52,940 --> 00:23:57,800
actually have it

00:23:54,910 --> 00:24:07,580
maybe it'll figure it out okay

00:23:57,800 --> 00:24:10,340
one thing I it is possible that for in

00:24:07,580 --> 00:24:13,520
IntelliJ specifically and maybe in

00:24:10,340 --> 00:24:16,340
PyCharm if you haven't been using beam

00:24:13,520 --> 00:24:20,870
before to use these you naturally need

00:24:16,340 --> 00:24:25,880
to install the Apache beam package so

00:24:20,870 --> 00:24:29,810
that can be done by pip install Apache -

00:24:25,880 --> 00:24:35,510
beam or you know as you can see here I'm

00:24:29,810 --> 00:24:40,870
I'm noticing an error and I'm and I can

00:24:35,510 --> 00:24:40,870
use let's let that come up

00:24:45,120 --> 00:24:51,330
No oh it did eventually find it so I did

00:24:48,150 --> 00:24:54,810
have it on my system but that is that's

00:24:51,330 --> 00:25:00,900
a common problem otherwise when you're

00:24:54,810 --> 00:25:05,280
trying to do this so I am hoping that in

00:25:00,900 --> 00:25:11,100
these various exercises that we can walk

00:25:05,280 --> 00:25:18,930
through that you guys essentially get

00:25:11,100 --> 00:25:21,480
set up let me delete these are the

00:25:18,930 --> 00:25:24,240
existing ones but I'm hoping that you

00:25:21,480 --> 00:25:29,040
guys have the environment set up let us

00:25:24,240 --> 00:25:31,670
know if you have troubles and we're here

00:25:29,040 --> 00:25:36,270
and should be able to help debug and

00:25:31,670 --> 00:25:40,230
otherwise please try the intro which is

00:25:36,270 --> 00:25:43,890
just a beam dot create to get things up

00:25:40,230 --> 00:25:51,290
and running and from there also please

00:25:43,890 --> 00:25:54,090
do the initial parallel do so let's

00:25:51,290 --> 00:25:57,530
clean up my environment but in the

00:25:54,090 --> 00:26:02,220
Python bit please try to get through

00:25:57,530 --> 00:26:10,290
intro here and hello beam

00:26:02,220 --> 00:26:12,900
and also there's many sections in the

00:26:10,290 --> 00:26:16,860
map section try to get through just the

00:26:12,900 --> 00:26:21,990
first part do tasks so I'm gonna give

00:26:16,860 --> 00:26:34,370
you guys a few minutes I'll set a timer

00:26:21,990 --> 00:26:37,080
here let's check back in let's call it

00:26:34,370 --> 00:26:42,720
ten minutes to ensure you can download

00:26:37,080 --> 00:26:45,540
and get set up if there's some common

00:26:42,720 --> 00:26:49,350
questions I may come back on over the

00:26:45,540 --> 00:26:51,540
speaker but in general I think these are

00:26:49,350 --> 00:26:53,370
the setup instructions and you see the

00:26:51,540 --> 00:26:55,170
timer countdown please work on these

00:26:53,370 --> 00:26:58,550
exercises and let us know if you have

00:26:55,170 --> 00:26:58,550
any any questions

00:27:12,850 --> 00:27:14,910
you

00:28:28,760 --> 00:28:38,700
all right well it's microphone back on

00:28:35,450 --> 00:28:44,070
so it seems like yo.hannes at least

00:28:38,700 --> 00:28:45,090
wanted to verify the you know what we're

00:28:44,070 --> 00:28:48,899
supposed to do here

00:28:45,090 --> 00:28:49,409
since the solution is kind of already in

00:28:48,899 --> 00:28:52,500
here

00:28:49,409 --> 00:28:59,360
oh cool if it's already passing then

00:28:52,500 --> 00:29:02,250
you're good to go let's I was just read

00:28:59,360 --> 00:29:08,399
downloading these actually I'm gonna ask

00:29:02,250 --> 00:29:11,639
what what language are you all using no

00:29:08,399 --> 00:29:19,110
reason to dig into solutions too much

00:29:11,639 --> 00:29:21,000
here Oh interesting well so real quick

00:29:19,110 --> 00:29:23,340
what language is everybody using because

00:29:21,000 --> 00:29:26,279
I don't want to necessarily walk you too

00:29:23,340 --> 00:29:34,380
often through all of these languages if

00:29:26,279 --> 00:29:37,039
you if nobody is using cool let's do bow

00:29:34,380 --> 00:29:42,409
I figured at least both Java and Python

00:29:37,039 --> 00:29:45,600
initially I see both of you here and

00:29:42,409 --> 00:29:47,880
awesome it's also fantastic to see some

00:29:45,600 --> 00:29:50,789
life in response this is kind of eerie

00:29:47,880 --> 00:29:54,779
just broadcasting to people so I really

00:29:50,789 --> 00:29:59,519
appreciate even just seeing some some

00:29:54,779 --> 00:30:06,440
messages here cool yeah let's let's work

00:29:59,519 --> 00:30:06,440
through both then let me pull this out

00:30:06,769 --> 00:30:14,029
cool tell a Jay coming up I am

00:30:16,200 --> 00:30:22,340
you continents Java I hopefully and

00:30:20,940 --> 00:30:29,299
redownload

00:30:22,340 --> 00:30:45,480
that and indexing it is over here it is

00:30:29,299 --> 00:30:55,799
loading awesome so here is up it's

00:30:45,480 --> 00:30:58,970
hiding up here on my other monitor so we

00:30:55,799 --> 00:31:04,289
have this loading since in general

00:30:58,970 --> 00:31:08,190
Python is a little more simple I want to

00:31:04,289 --> 00:31:11,639
run that first although I need to let

00:31:08,190 --> 00:31:14,100
this process continue running it's glue

00:31:11,639 --> 00:31:17,870
on building and configuring the

00:31:14,100 --> 00:31:26,669
environment as you guys probably

00:31:17,870 --> 00:31:29,120
experienced so that will be right up

00:31:26,669 --> 00:31:29,120
here

00:31:32,940 --> 00:31:42,750
cool looks like we are good with Java

00:31:36,940 --> 00:31:48,970
and we have Python gone Python loaded

00:31:42,750 --> 00:31:53,350
man I wanted this to delete but it did

00:31:48,970 --> 00:31:56,890
not so I will I guess show you the

00:31:53,350 --> 00:31:59,950
solution here for Python and I will

00:31:56,890 --> 00:32:01,960
delete it next after the next exercise

00:31:59,950 --> 00:32:05,800
so we can work through it together but

00:32:01,960 --> 00:32:08,860
it's already saved here so oh well so

00:32:05,800 --> 00:32:12,010
for the introductory tasks and again how

00:32:08,860 --> 00:32:15,940
to or I mean I guess to start how to use

00:32:12,010 --> 00:32:22,330
this for any pipeline we absolutely have

00:32:15,940 --> 00:32:25,540
to install Apache beam in this Oh the

00:32:22,330 --> 00:32:28,600
descriptions have fantastic details so

00:32:25,540 --> 00:32:31,210
you know follow them they'll give you

00:32:28,600 --> 00:32:35,590
some bit on alright here's the overview

00:32:31,210 --> 00:32:40,150
that one was less useful let's make this

00:32:35,590 --> 00:32:42,430
a little smaller okay you know write a

00:32:40,150 --> 00:32:47,700
simplified pipeline that takes hello

00:32:42,430 --> 00:32:51,280
beam so we can get taken to here's

00:32:47,700 --> 00:32:57,190
create the create function and how it

00:32:51,280 --> 00:32:59,350
works and here is for example in memory

00:32:57,190 --> 00:33:02,020
so we can see we have say beam dot

00:32:59,350 --> 00:33:08,680
create and the important bit here is in

00:33:02,020 --> 00:33:11,590
an array or list right so the create

00:33:08,680 --> 00:33:15,340
function so this is already passed I

00:33:11,590 --> 00:33:20,430
didn't get it work through it but we can

00:33:15,340 --> 00:33:20,430
see that this is what's needed for the

00:33:21,060 --> 00:33:25,510
hello beam I probably should have just

00:33:23,680 --> 00:33:28,450
walked through that for the use of this

00:33:25,510 --> 00:33:34,660
interface since this is probably new to

00:33:28,450 --> 00:33:37,690
a ton of you and again will I'll delete

00:33:34,660 --> 00:33:43,510
and clear out these I wanted to have

00:33:37,690 --> 00:33:51,350
made sure that worked before so for

00:33:43,510 --> 00:33:54,400
Python here the initial parallel do we

00:33:51,350 --> 00:33:58,760
need to overwrite this came with nothing

00:33:54,400 --> 00:34:02,450
here so we needed to create a process

00:33:58,760 --> 00:34:07,039
method in our class which is a new

00:34:02,450 --> 00:34:11,210
function we needed to it suggested to

00:34:07,039 --> 00:34:14,060
use a par do with our du fun which we

00:34:11,210 --> 00:34:16,419
then down here had a to-do item here

00:34:14,060 --> 00:34:21,560
which was then called p-nut pardhu and

00:34:16,419 --> 00:34:27,260
at our multiplier have the parallel do

00:34:21,560 --> 00:34:29,359
do our multiply by 10 do fun and the

00:34:27,260 --> 00:34:31,250
bean programming guide is a fantastic

00:34:29,359 --> 00:34:34,129
resource so i'll probably pull that up

00:34:31,250 --> 00:34:37,750
often and just while you guys are

00:34:34,129 --> 00:34:40,280
getting going with this on just you know

00:34:37,750 --> 00:34:43,399
got you've been programming god this is

00:34:40,280 --> 00:34:48,350
your friend when I got started working

00:34:43,399 --> 00:34:50,780
with this I made a point of at least

00:34:48,350 --> 00:34:53,990
skimming this programming guide every

00:34:50,780 --> 00:34:56,480
few days just to sink it in because this

00:34:53,990 --> 00:34:59,660
really was a weird way of thinking about

00:34:56,480 --> 00:35:05,210
things for some reason for me although

00:34:59,660 --> 00:35:08,800
ultimately you know it comes together so

00:35:05,210 --> 00:35:12,440
the solution is that simple that it's

00:35:08,800 --> 00:35:16,100
you know it doesn't require a lot of

00:35:12,440 --> 00:35:17,660
weird programming in the sense of things

00:35:16,100 --> 00:35:19,880
you wouldn't be familiar with take an

00:35:17,660 --> 00:35:22,700
element and multiply it by 10 but the

00:35:19,880 --> 00:35:26,060
point of this exercise is knowing to

00:35:22,700 --> 00:35:30,109
call a parallel do and with your do fund

00:35:26,060 --> 00:35:35,000
which is a again a class of being God to

00:35:30,109 --> 00:35:39,280
fund so again with the check it will

00:35:35,000 --> 00:35:46,030
pass since this was already written

00:35:39,280 --> 00:35:46,030
let's see you know harness though

00:35:51,910 --> 00:36:00,860
okay and Paul has a nice comment here as

00:35:56,480 --> 00:36:06,440
well so you're creating the collection

00:36:00,860 --> 00:36:13,670
in apply yeah that's a fair point here

00:36:06,440 --> 00:36:16,280
on the way so Paul I take your comment

00:36:13,670 --> 00:36:20,120
here on maybe we could improve the

00:36:16,280 --> 00:36:23,950
wording of the cantos I'm gonna even

00:36:20,120 --> 00:36:30,770
just take a screenshot of that and

00:36:23,950 --> 00:36:35,500
provide that I dare even digress a

00:36:30,770 --> 00:36:39,910
little bit for those super curious

00:36:35,500 --> 00:36:39,910
Apache being github

00:36:40,750 --> 00:36:49,520
they have our theme repo we have the

00:36:46,160 --> 00:36:52,730
kata are in learning slash Coty's and

00:36:49,520 --> 00:36:57,100
for instance in java this was a

00:36:52,730 --> 00:37:04,160
courtrand no this was a common trim

00:36:57,100 --> 00:37:14,060
score transform this was map and a part

00:37:04,160 --> 00:37:16,070
do and maybe the task info test MD so

00:37:14,060 --> 00:37:20,600
Paul I think you were critiquing the

00:37:16,070 --> 00:37:27,490
wording here I think it is oh no this

00:37:20,600 --> 00:37:27,490
was the intro so

00:37:34,430 --> 00:37:41,579
find that summer thought it would be

00:37:37,380 --> 00:37:51,690
right in here interesting I'm curious

00:37:41,579 --> 00:37:53,599
why it's not there but haha cool Paul

00:37:51,690 --> 00:37:56,670
looks like you got it figured out I

00:37:53,599 --> 00:37:59,609
guess the point I was trying to make is

00:37:56,670 --> 00:38:01,560
beam is a completely open source project

00:37:59,609 --> 00:38:03,300
and even these exercises are so if

00:38:01,560 --> 00:38:07,140
there's something that looks like it

00:38:03,300 --> 00:38:09,420
needs improved Henry is the original

00:38:07,140 --> 00:38:12,750
author of these Coty's the one that made

00:38:09,420 --> 00:38:15,180
that blog post but many other people

00:38:12,750 --> 00:38:17,790
have contributed either exercises

00:38:15,180 --> 00:38:20,640
wording etc so pull requests are even

00:38:17,790 --> 00:38:23,400
welcomed if you find things that could

00:38:20,640 --> 00:38:27,060
be improved naturally I can't say too

00:38:23,400 --> 00:38:29,540
whether or not you know there's a

00:38:27,060 --> 00:38:33,810
madness in the specific wording but

00:38:29,540 --> 00:38:36,060
making suggestions would you know it's

00:38:33,810 --> 00:38:38,339
totally reasonable there all right so

00:38:36,060 --> 00:38:41,430
sorry for that digression people but

00:38:38,339 --> 00:38:45,960
also I guess cool to know that this even

00:38:41,430 --> 00:38:49,260
this learning platform is wholly open so

00:38:45,960 --> 00:38:53,190
I think this walked us through the x 10

00:38:49,260 --> 00:38:58,130
do fun and again the beam dot create

00:38:53,190 --> 00:39:01,050
inside of the array again I will delete

00:38:58,130 --> 00:39:05,700
my history so that I can walk through

00:39:01,050 --> 00:39:10,520
this live in the next round

00:39:05,700 --> 00:39:22,140
Java should be hopefully deleted here

00:39:10,520 --> 00:39:25,859
let's see shoot okay anyways and maybe

00:39:22,140 --> 00:39:29,660
that's because I am logged in to where

00:39:25,859 --> 00:39:36,839
my history is still here all right so

00:39:29,660 --> 00:39:41,160
the for Java oh and why don't we just

00:39:36,839 --> 00:39:43,410
look at this if you guys are working

00:39:41,160 --> 00:39:45,150
through and find yourself kind of stuck

00:39:43,410 --> 00:39:48,270
maybe I shouldn't be

00:39:45,150 --> 00:39:51,660
giving you this little answer so you can

00:39:48,270 --> 00:39:53,460
see if I go through maybe I actually

00:39:51,660 --> 00:39:56,039
tried writing some code but it didn't

00:39:53,460 --> 00:39:58,490
work I could get the incorrect answer

00:39:56,039 --> 00:40:05,130
but there is a little peak solution

00:39:58,490 --> 00:40:09,779
which then pulls up on a bit here which

00:40:05,130 --> 00:40:12,869
would walk through what the answer at

00:40:09,779 --> 00:40:16,740
least a form of the answer right there

00:40:12,869 --> 00:40:19,890
are potentially several ways of writing

00:40:16,740 --> 00:40:22,260
things like a split function or getting

00:40:19,890 --> 00:40:25,680
a first character from a string or

00:40:22,260 --> 00:40:27,690
whatever and the Cotto's are just

00:40:25,680 --> 00:40:30,480
checking the result of the pipeline

00:40:27,690 --> 00:40:32,819
which realistically in practice would be

00:40:30,480 --> 00:40:34,190
all that you care about or primarily

00:40:32,819 --> 00:40:37,980
what you care about

00:40:34,190 --> 00:40:43,859
so it's smart enough to be able to check

00:40:37,980 --> 00:40:48,150
that so a goal also for sharing this is

00:40:43,859 --> 00:40:50,309
being aware of this as a platform so

00:40:48,150 --> 00:40:55,260
that you can work through exercises on

00:40:50,309 --> 00:41:04,400
your own I will cool so let's talk

00:40:55,260 --> 00:41:04,400
through the the hello beam here so we

00:41:04,460 --> 00:41:10,650
there's plenty of text the overview as

00:41:07,529 --> 00:41:14,220
usual we can use create which is the

00:41:10,650 --> 00:41:19,410
Java Docs naturally get used to those

00:41:14,220 --> 00:41:24,480
and the example again as before from

00:41:19,410 --> 00:41:29,420
Java here's how to create from in-memory

00:41:24,480 --> 00:41:33,480
data later on we will start working with

00:41:29,420 --> 00:41:39,510
text IO a more realistic pipeline where

00:41:33,480 --> 00:41:41,279
we would take file for instance which I

00:41:39,510 --> 00:41:48,089
guess is good I don't think I have

00:41:41,279 --> 00:41:51,089
slides so beamed Apache org I was built

00:41:48,089 --> 00:41:54,359
in IO transformations so so that you

00:41:51,089 --> 00:41:56,660
guys are aware beam doesn't just work

00:41:54,359 --> 00:41:56,660
with

00:41:58,700 --> 00:42:06,380
I mean does not only work with local

00:42:01,730 --> 00:42:10,069
input you know in pipeline things

00:42:06,380 --> 00:42:17,799
there's file iOS Avro textio TF records

00:42:10,069 --> 00:42:22,220
for tensorflow XML tikka Park a thrift

00:42:17,799 --> 00:42:24,470
HDFS GCS s3 the local file system

00:42:22,220 --> 00:42:30,020
and then for messaging things like

00:42:24,470 --> 00:42:33,010
Kinesis Kafka JMS etc there's a whole

00:42:30,020 --> 00:42:36,740
built-in ecosystem and then a ton of

00:42:33,010 --> 00:42:40,339
databases as well

00:42:36,740 --> 00:42:42,799
there's formalized io transformations in

00:42:40,339 --> 00:42:44,480
progress if you're curious you want to

00:42:42,799 --> 00:42:50,480
use something you can follow the JIRA

00:42:44,480 --> 00:42:54,140
issues and also it's quite extensible so

00:42:50,480 --> 00:42:57,980
if you need to write to something and it

00:42:54,140 --> 00:43:00,349
doesn't exist if you're used to dealing

00:42:57,980 --> 00:43:03,260
with the say api's of your given

00:43:00,349 --> 00:43:05,450
database but there's not an IO already

00:43:03,260 --> 00:43:08,029
written it's something that you can do

00:43:05,450 --> 00:43:12,710
yourself so for instance there's not a

00:43:08,029 --> 00:43:15,200
great fire store IO at the moment but

00:43:12,710 --> 00:43:20,450
it's straightforward enough to work with

00:43:15,200 --> 00:43:24,200
that API in in beam which is something I

00:43:20,450 --> 00:43:27,789
wrote recently at work cool okay right

00:43:24,200 --> 00:43:33,819
so another digression there back to the

00:43:27,789 --> 00:43:38,029
Java pipeline if I recall we it was

00:43:33,819 --> 00:43:41,029
returned to do was the example so based

00:43:38,029 --> 00:43:47,029
on the docs we are saying pipeline dot

00:43:41,029 --> 00:43:51,740
apply pipeline which we wind up having

00:43:47,029 --> 00:43:54,470
from here we're applying a the create

00:43:51,740 --> 00:43:57,829
function that we have which is creating

00:43:54,470 --> 00:44:03,140
of the element in this case a single

00:43:57,829 --> 00:44:06,190
string of Hello beam so the check there

00:44:03,140 --> 00:44:06,190
will pass

00:44:06,490 --> 00:44:19,569
hopefully Oh Congrats

00:44:09,349 --> 00:44:19,569
me and then oh shoot

00:44:20,210 --> 00:44:37,059
pardhu so we have our test Java so in

00:44:29,089 --> 00:44:41,809
this same vein we want to use the

00:44:37,059 --> 00:44:44,420
annotation process element so we I think

00:44:41,809 --> 00:44:47,260
it was to do right around here and write

00:44:44,420 --> 00:44:54,200
this whole thing so we have our input

00:44:47,260 --> 00:44:56,720
which is what we call it the apply

00:44:54,200 --> 00:44:59,450
transform so our input is based on these

00:44:56,720 --> 00:45:04,010
numbers which are created from here but

00:44:59,450 --> 00:45:09,859
we want to apply a parallel do function

00:45:04,010 --> 00:45:13,279
of a do function which you know is

00:45:09,859 --> 00:45:17,380
integers here where we're processing the

00:45:13,279 --> 00:45:20,299
element and we're outputting number

00:45:17,380 --> 00:45:24,470
times 10 so multiplying it by itself

00:45:20,299 --> 00:45:30,680
again there's you know get to know these

00:45:24,470 --> 00:45:36,220
docs parallel do do fun what you need to

00:45:30,680 --> 00:45:39,440
be doing here I guess just to highlight

00:45:36,220 --> 00:45:47,779
look let's see what that is because this

00:45:39,440 --> 00:45:50,240
should be nice ok so that should walk us

00:45:47,779 --> 00:45:52,730
through at least the very basics of our

00:45:50,240 --> 00:45:55,819
first parallel deal there are a ton of

00:45:52,730 --> 00:45:58,520
other exercises we're gonna walk through

00:45:55,819 --> 00:46:00,740
eventually spattered in with a whole

00:45:58,520 --> 00:46:04,609
bunch more information about what beam

00:46:00,740 --> 00:46:12,799
can do and then eventually getting into

00:46:04,609 --> 00:46:15,289
streams so I guess oh yeah that's a good

00:46:12,799 --> 00:46:17,450
question for everybody that's my that's

00:46:15,289 --> 00:46:19,680
my thought is to move on but I would be

00:46:17,450 --> 00:46:24,630
let's use this for a second

00:46:19,680 --> 00:46:26,869
a QA is everyone good in general I will

00:46:24,630 --> 00:46:30,930
assume without a message in the next

00:46:26,869 --> 00:46:40,020
moment that will dive in this Tamar

00:46:30,930 --> 00:46:42,720
lecture cool and Johannes I did just see

00:46:40,020 --> 00:46:47,460
your thumbs up but did you did you get

00:46:42,720 --> 00:46:49,890
your question answered earlier was it

00:46:47,460 --> 00:46:52,650
you said it was passing already so does

00:46:49,890 --> 00:46:58,920
that mean it was you didn't actually

00:46:52,650 --> 00:47:01,829
have to type the code anyways alright so

00:46:58,920 --> 00:47:09,599
we looks like we have some thumbs up a

00:47:01,829 --> 00:47:12,000
call here responding so that will okay

00:47:09,599 --> 00:47:14,430
all the tasks are already done for you

00:47:12,000 --> 00:47:21,150
I guess Congrats on completing the

00:47:14,430 --> 00:47:24,000
course good job I think in that case

00:47:21,150 --> 00:47:27,839
there I've I've worked through these on

00:47:24,000 --> 00:47:30,740
several occasions somewhere there is I

00:47:27,839 --> 00:47:43,430
think it might even be no not there

00:47:30,740 --> 00:47:47,700
there is a log in to a nice I I think

00:47:43,430 --> 00:47:50,069
there's a log into septic which is the

00:47:47,700 --> 00:47:54,540
online course platform where these are

00:47:50,069 --> 00:47:56,760
stored so I would imagine somehow using

00:47:54,540 --> 00:47:59,819
a different user or becoming yourself

00:47:56,760 --> 00:48:07,799
maybe maybe the like generic user has

00:47:59,819 --> 00:48:11,760
already already passed everything or the

00:48:07,799 --> 00:48:16,140
anonymous one so if you maybe log in it

00:48:11,760 --> 00:48:17,910
will kind of remove the history I'm

00:48:16,140 --> 00:48:20,369
unsure I know I've loaded these on

00:48:17,910 --> 00:48:23,180
various occasions and it's disappeared

00:48:20,369 --> 00:48:26,390
although I'm no annoyed that it's not so

00:48:23,180 --> 00:48:32,300
alright anyways time to move on

00:48:26,390 --> 00:48:38,660
we're actually halfway through so yay us

00:48:32,300 --> 00:48:41,150
oh cool

00:48:38,660 --> 00:48:45,590
my ex is helping Paul there alright so

00:48:41,150 --> 00:48:50,900
let's get back to these slides the hope

00:48:45,590 --> 00:48:54,770
here is to keep peppering in some things

00:48:50,900 --> 00:48:56,990
about beam and give you guys time one

00:48:54,770 --> 00:48:59,420
thing I guess I again I really really

00:48:56,990 --> 00:49:02,110
want to reinforce is although something

00:48:59,420 --> 00:49:05,570
like parallel do and some of these

00:49:02,110 --> 00:49:09,620
transformations may seem super basic but

00:49:05,570 --> 00:49:13,370
they're actually so fundamental and a

00:49:09,620 --> 00:49:15,500
whole lot of these things when added

00:49:13,370 --> 00:49:19,340
together although each of these parts

00:49:15,500 --> 00:49:26,080
again are very very simple they add up

00:49:19,340 --> 00:49:29,870
to being very very powerful so okay so

00:49:26,080 --> 00:49:33,320
we just walked oh also you know feel

00:49:29,870 --> 00:49:34,820
free to play with exercises especially

00:49:33,320 --> 00:49:39,230
if you have multiple screens

00:49:34,820 --> 00:49:44,290
I really like the seeing the map

00:49:39,230 --> 00:49:48,040
beam map exercises because they're

00:49:44,290 --> 00:49:50,900
fundamentally the same output although

00:49:48,040 --> 00:49:53,530
and accomplishes the same thing as the

00:49:50,900 --> 00:49:56,330
parallel do I haven't tried to run

00:49:53,530 --> 00:49:58,930
testing on whether or not it makes a

00:49:56,330 --> 00:50:07,280
difference from a performance

00:49:58,930 --> 00:50:12,530
perspective cool alright so I'm gonna

00:50:07,280 --> 00:50:20,210
grab a splash water friends of parallel

00:50:12,530 --> 00:50:21,890
do max will answer that Andrew and if

00:50:20,210 --> 00:50:30,050
not I'll point you to some more

00:50:21,890 --> 00:50:32,750
resources in a second yeah I think you

00:50:30,050 --> 00:50:34,910
could even go as far as take Andrew

00:50:32,750 --> 00:50:37,090
Augusta has earned an answer who asks

00:50:34,910 --> 00:50:41,570
how to write this outside of the EB IDE

00:50:37,090 --> 00:50:44,900
I think you could even take the Python

00:50:41,570 --> 00:50:46,260
for instance code or the Java code for

00:50:44,900 --> 00:50:51,480
instance and

00:50:46,260 --> 00:50:54,950
you know compile it or run you know

00:50:51,480 --> 00:50:58,310
Python script on the script itself so I

00:50:54,950 --> 00:51:01,380
we can pull up some examples for that

00:50:58,310 --> 00:51:03,660
cool yeah Mel Max is answering that all

00:51:01,380 --> 00:51:09,960
right let's uh the Friends of parallel

00:51:03,660 --> 00:51:12,590
do the SDK has a toggle fullscreen I

00:51:09,960 --> 00:51:12,590
guess this is

00:51:19,750 --> 00:51:25,599
good enough okay so the SDK has a ton of

00:51:23,380 --> 00:51:28,540
other elementwise transformations which

00:51:25,599 --> 00:51:33,000
actually can get us very far we did talk

00:51:28,540 --> 00:51:33,000
about parallel dues we talked about

00:51:33,330 --> 00:51:42,760
filters briefly we know that we can map

00:51:37,780 --> 00:51:45,099
and flatmap elements oh yeah here here's

00:51:42,760 --> 00:51:49,750
some code examples actually right all

00:51:45,099 --> 00:51:53,950
right so we saw pardhu's we can filter

00:51:49,750 --> 00:51:58,470
so for instance filtering by you know I

00:51:53,950 --> 00:52:01,750
want to filter things that start with S

00:51:58,470 --> 00:52:07,950
that was a Java example here's a Python

00:52:01,750 --> 00:52:10,510
example there is and here's the go

00:52:07,950 --> 00:52:12,250
example so we didn't get into going I

00:52:10,510 --> 00:52:15,849
didn't hear anybody saying they were

00:52:12,250 --> 00:52:20,680
worried about go another worthwhile

00:52:15,849 --> 00:52:23,230
point is that go is not to ready yet so

00:52:20,680 --> 00:52:26,950
don't think you're gonna write

00:52:23,230 --> 00:52:30,640
production streaming go pipelines right

00:52:26,950 --> 00:52:33,700
now it's I was just talking with one of

00:52:30,640 --> 00:52:37,560
the primary go authors who wanted to

00:52:33,700 --> 00:52:41,589
make sure to highlight that fact it is

00:52:37,560 --> 00:52:45,250
pretty okay for batch pipelines but is

00:52:41,589 --> 00:52:54,700
still considered experimental so I was

00:52:45,250 --> 00:52:57,940
optimistic in and including go it is but

00:52:54,700 --> 00:53:00,490
it is part of the ecosystem and where

00:52:57,940 --> 00:53:04,630
we'll be gone all right back to friends

00:53:00,490 --> 00:53:07,089
pardhu filter example we can map

00:53:04,630 --> 00:53:09,880
elements so you'll see that in the same

00:53:07,089 --> 00:53:15,490
sort of examples in the acontece here

00:53:09,880 --> 00:53:18,640
map elements with Java and or with

00:53:15,490 --> 00:53:20,479
Python so this is create that key value

00:53:18,640 --> 00:53:25,680
pair from

00:53:20,479 --> 00:53:31,289
the bet here is flat map example for

00:53:25,680 --> 00:53:36,410
instance also a flat map in Python we

00:53:31,289 --> 00:53:41,609
can get the keys for instance with keys

00:53:36,410 --> 00:53:45,359
or we can also use get the keys or

00:53:41,609 --> 00:53:48,390
values out of things so those are many

00:53:45,359 --> 00:53:55,170
of the element wise transformations

00:53:48,390 --> 00:53:57,809
available in next just doing element

00:53:55,170 --> 00:54:01,680
wise transformation is great and there's

00:53:57,809 --> 00:54:05,489
even a you know a good justification for

00:54:01,680 --> 00:54:14,219
just moving and transforming things one

00:54:05,489 --> 00:54:16,499
by one using beam I question at times

00:54:14,219 --> 00:54:18,359
whether or not running a you know in

00:54:16,499 --> 00:54:22,170
this age of cloud compute whether

00:54:18,359 --> 00:54:24,869
running a full pipeline is a good idea

00:54:22,170 --> 00:54:27,359
with persistent compute in the age of

00:54:24,869 --> 00:54:29,519
server less technologies if I'm only

00:54:27,359 --> 00:54:31,859
doing elemental s transformations if

00:54:29,519 --> 00:54:35,339
using the built-in iOS there's a good

00:54:31,859 --> 00:54:40,469
case for how it can handle checkpointing

00:54:35,339 --> 00:54:43,950
for instance on streaming runners but if

00:54:40,469 --> 00:54:46,979
not a ton of the power gets in with

00:54:43,950 --> 00:54:50,940
things like aggregation and you know

00:54:46,979 --> 00:54:53,999
forms of stateful streaming so one of

00:54:50,940 --> 00:54:56,940
the most common grouping transformation

00:54:53,999 --> 00:54:59,119
I believe that occurs is group by keys

00:54:56,940 --> 00:55:02,219
so I'll have you guys work through an

00:54:59,119 --> 00:55:06,539
example of group by key here pretty

00:55:02,219 --> 00:55:12,410
shortly so grouping transformations

00:55:06,539 --> 00:55:17,190
again here would be go through and take

00:55:12,410 --> 00:55:19,739
of key value pairs where we have maybe

00:55:17,190 --> 00:55:22,319
already split as we did in the past of a

00:55:19,739 --> 00:55:24,539
single input say of Sam's are there

00:55:22,319 --> 00:55:28,190
where we then have a key value pair of

00:55:24,539 --> 00:55:31,469
the first letter s and the full word

00:55:28,190 --> 00:55:34,480
samsa for instance and then if we wanted

00:55:31,469 --> 00:55:38,200
to run the beam operation

00:55:34,480 --> 00:55:41,380
Group by key we could then have grouped

00:55:38,200 --> 00:55:47,220
with the key s and we'd have both Sam's

00:55:41,380 --> 00:55:52,570
and spark so here is examples of the

00:55:47,220 --> 00:55:55,960
Java for instance input B via a P

00:55:52,570 --> 00:56:01,050
collection and applying to that P

00:55:55,960 --> 00:56:03,670
collection in group by key and in Python

00:56:01,050 --> 00:56:09,040
taking the input which is a P collection

00:56:03,670 --> 00:56:11,830
and using being backward by key in

00:56:09,040 --> 00:56:15,550
addition when we are running group by

00:56:11,830 --> 00:56:18,100
Keys we also may want to do something

00:56:15,550 --> 00:56:21,580
intelligent with that so for instance we

00:56:18,100 --> 00:56:22,990
may want to write a pardhu function or a

00:56:21,580 --> 00:56:26,380
do fund ourselves

00:56:22,990 --> 00:56:30,550
for instance top in interval so in this

00:56:26,380 --> 00:56:32,740
case we would take the key values we had

00:56:30,550 --> 00:56:35,170
before we have our group by key where we

00:56:32,740 --> 00:56:37,720
do that but then based on that we might

00:56:35,170 --> 00:56:41,320
want to find the most frequently

00:56:37,720 --> 00:56:44,890
occurring are you know top result so in

00:56:41,320 --> 00:56:47,650
that case we you know could write again

00:56:44,890 --> 00:56:50,460
a parallel do that looks through each of

00:56:47,650 --> 00:56:55,390
the values and figures that out for us

00:56:50,460 --> 00:56:57,609
but in the case that group by key is

00:56:55,390 --> 00:57:00,250
followed by pardhu can often be

00:56:57,609 --> 00:57:03,460
simplified and optimized by leveraging

00:57:00,250 --> 00:57:05,740
something like combined so in this case

00:57:03,460 --> 00:57:08,260
here's an example of doing the same

00:57:05,740 --> 00:57:14,340
thing from the same sort of input but

00:57:08,260 --> 00:57:24,070
instead running a combined perky I hit

00:57:14,340 --> 00:57:29,140
that that's all right cool so we have

00:57:24,070 --> 00:57:30,820
that again grouping transformations then

00:57:29,140 --> 00:57:35,440
if we are running something like

00:57:30,820 --> 00:57:39,450
counting compare could be a combined

00:57:35,440 --> 00:57:43,590
function that counts words and then is

00:57:39,450 --> 00:57:47,020
extracting you know the top however many

00:57:43,590 --> 00:57:49,200
we're really able to write any of our

00:57:47,020 --> 00:57:49,200
own

00:57:50,309 --> 00:57:57,239
sort of operations that we want but to

00:57:53,880 --> 00:57:58,769
an extent make sure to know the SDK no

00:57:57,239 --> 00:58:00,749
reason to write your own if the

00:57:58,769 --> 00:58:02,609
community's written something that's

00:58:00,749 --> 00:58:04,680
going to work for you that has also

00:58:02,609 --> 00:58:08,509
probably been thoroughly tested and

00:58:04,680 --> 00:58:13,319
optimized so of a bunch of the combiners

00:58:08,509 --> 00:58:16,939
there are things like top perky the

00:58:13,319 --> 00:58:21,739
counter key some of lungs perky

00:58:16,939 --> 00:58:28,400
quantiles you know approximation

00:58:21,739 --> 00:58:31,799
algorithms mean max mins for instance so

00:58:28,400 --> 00:58:35,640
look into the SDK documentation and

00:58:31,799 --> 00:58:40,829
understand you know the pieces at your

00:58:35,640 --> 00:58:43,019
disposal okay so also in addition to the

00:58:40,829 --> 00:58:45,089
map and essentially reduce operations

00:58:43,019 --> 00:58:49,430
just think about how you can combine

00:58:45,089 --> 00:58:53,219
things together you know so for instance

00:58:49,430 --> 00:58:55,079
we have multiple outputs that are

00:58:53,219 --> 00:59:05,749
possible we talked about that at the

00:58:55,079 --> 00:59:08,309
very first stage cool so I very common

00:59:05,749 --> 00:59:12,269
reason for using multiple outputs in a

00:59:08,309 --> 00:59:15,059
pipeline is a form of dead-letter queues

00:59:12,269 --> 00:59:17,130
for instance is say the input is not

00:59:15,059 --> 00:59:21,109
good or otherwise I can't parse it

00:59:17,130 --> 00:59:23,640
properly kind of validate things and

00:59:21,109 --> 00:59:26,459
continue through the pipeline if things

00:59:23,640 --> 00:59:29,249
are fine and if not write it and log it

00:59:26,459 --> 00:59:34,859
somewhere so some example code for that

00:59:29,249 --> 00:59:38,160
for Java is found here I'm in this case

00:59:34,859 --> 00:59:40,799
we're using things like I can't

00:59:38,160 --> 00:59:44,279
highlight the code okay so the tuple

00:59:40,799 --> 00:59:49,019
tags where we're trying to process it

00:59:44,279 --> 00:59:51,989
and if the ability at element is good

00:59:49,019 --> 00:59:55,979
apply the success tag and if not give it

00:59:51,989 --> 01:00:01,590
the dead-letter tag which then we can

00:59:55,979 --> 01:00:04,770
based on the output tuples

01:00:01,590 --> 01:00:06,300
the various peak collections for success

01:00:04,770 --> 01:00:10,650
or dead letters that we want to do

01:00:06,300 --> 01:00:13,860
things with so that pattern is also

01:00:10,650 --> 01:00:18,690
doable in Python in this way again where

01:00:13,860 --> 01:00:22,230
we're trying and accepting here yielding

01:00:18,690 --> 01:00:26,250
what we're looking for and the example

01:00:22,230 --> 01:00:29,100
here for go is this very interesting I

01:00:26,250 --> 01:00:32,430
find with go is you don't just write

01:00:29,100 --> 01:00:35,820
pardhu's and for instance there's party

01:00:32,430 --> 01:00:40,740
to when you have a parallel do function

01:00:35,820 --> 01:00:46,520
with two outputs and the SDK supports up

01:00:40,740 --> 01:00:50,790
to par do seven for the various forms

01:00:46,520 --> 01:00:54,170
you can get into so I think that's a

01:00:50,790 --> 01:00:58,470
good amount of bit on aggregating and

01:00:54,170 --> 01:01:01,290
reusable patterns here so I wanted to

01:00:58,470 --> 01:01:05,610
give you guys a little bit of time to

01:01:01,290 --> 01:01:08,520
start working through group by key for

01:01:05,610 --> 01:01:11,430
instance and if you also have already

01:01:08,520 --> 01:01:14,640
worked through that you know there's a

01:01:11,430 --> 01:01:18,090
ton of other stuff there and again Max

01:01:14,640 --> 01:01:20,460
and I are going to be here for a while

01:01:18,090 --> 01:01:25,560
so I'm going to set another timer for 10

01:01:20,460 --> 01:01:29,670
minutes and give you guys some time to

01:01:25,560 --> 01:01:37,440
digest what was just shared and of what

01:01:29,670 --> 01:01:50,570
you need to and do some exercises well

01:01:37,440 --> 01:01:50,570
so again we will let's hold that is my

01:02:04,700 --> 01:02:06,760
you

01:03:22,930 --> 01:03:44,770
all right I am I'm just not see this

01:03:35,320 --> 01:03:49,730
Johannes we can dig into that

01:03:44,770 --> 01:03:55,640
yeah let's either save that or max do

01:03:49,730 --> 01:03:57,980
you have a good way to chat war Johannes

01:03:55,640 --> 01:04:01,670
this question on Beaman knife I I

01:03:57,980 --> 01:04:06,770
actually don't have much experience so I

01:04:01,670 --> 01:04:07,940
don't feel like I am well-positioned to

01:04:06,770 --> 01:04:11,570
talk about it

01:04:07,940 --> 01:04:14,000
so what's hope max has something he can

01:04:11,570 --> 01:04:16,600
chat or I also welcome him coming on

01:04:14,000 --> 01:04:24,410
stage either now or at the end to

01:04:16,600 --> 01:04:30,560
discuss your question there cool so we

01:04:24,410 --> 01:04:36,850
just allocated some time for group by

01:04:30,560 --> 01:04:49,210
keys I am in the I tried downloading now

01:04:36,850 --> 01:04:52,910
IntelliJ well here literally gods that's

01:04:49,210 --> 01:04:59,630
awesome well Nina let me Shh figure that

01:04:52,910 --> 01:05:04,960
out in a bit okay so since we were

01:04:59,630 --> 01:05:08,120
having some concerns with freshness of

01:05:04,960 --> 01:05:09,230
our kostas or if they were already

01:05:08,120 --> 01:05:12,740
installed

01:05:09,230 --> 01:05:15,470
I tried downloading the community

01:05:12,740 --> 01:05:18,020
edition of IntelliJ to see if a totally

01:05:15,470 --> 01:05:21,710
different IntelliJ doesn't have my

01:05:18,020 --> 01:05:23,680
safety history so I'm hoping that is the

01:05:21,710 --> 01:05:26,710
case but we'll find out here

01:05:23,680 --> 01:05:29,440
a second so for the next few moments I'm

01:05:26,710 --> 01:05:33,520
gonna hope to walk through group by key

01:05:29,440 --> 01:05:39,760
as another really fundamental bit and

01:05:33,520 --> 01:05:43,630
then where I'll get into streaming

01:05:39,760 --> 01:05:46,119
semantics overview like the real reason

01:05:43,630 --> 01:05:48,040
I think a whole lot of you probably are

01:05:46,119 --> 01:05:50,829
interested in and care about being

01:05:48,040 --> 01:05:53,500
that's less although we all need to do

01:05:50,829 --> 01:05:55,660
lots of batch data processing this year

01:05:53,500 --> 01:05:58,750
fact that we can learn this single

01:05:55,660 --> 01:06:01,839
programming model in a way to accomplish

01:05:58,750 --> 01:06:06,490
both of these tests is to me super

01:06:01,839 --> 01:06:07,900
powerful okay so let's see it is loading

01:06:06,490 --> 01:06:15,550
fingers crossed

01:06:07,900 --> 01:06:21,040
oh yes okay so for who was that again

01:06:15,550 --> 01:06:24,900
Oh Johannes okay so I have downloaded

01:06:21,040 --> 01:06:27,220
the intelligent Community Edition and

01:06:24,900 --> 01:06:31,859
reinstalled following the instructions

01:06:27,220 --> 01:06:31,859
and it looks like it has cleared out my

01:06:34,890 --> 01:06:43,990
you know my history I guess

01:06:37,809 --> 01:06:45,880
so let's mean dig in to group by key so

01:06:43,990 --> 01:06:47,440
that was what I was hoping you guys had

01:06:45,880 --> 01:06:50,309
worked through in addition to whatever

01:06:47,440 --> 01:06:54,089
else again this is super self-contained

01:06:50,309 --> 01:06:56,650
so hopefully something that you find

01:06:54,089 --> 01:07:01,930
value with working through some of these

01:06:56,650 --> 01:07:03,640
others later so the task here again I'm

01:07:01,930 --> 01:07:07,599
gonna go through Python first and then

01:07:03,640 --> 01:07:11,319
we'll go into Java group by key it's a

01:07:07,599 --> 01:07:13,319
beam transformation we want to I mean I

01:07:11,319 --> 01:07:18,280
think you guys actually have a good a

01:07:13,319 --> 01:07:21,760
decent sense of what group I key is that

01:07:18,280 --> 01:07:28,240
will pull up things like this group by

01:07:21,760 --> 01:07:31,010
key documentation in the Python Doc's so

01:07:28,240 --> 01:07:34,460
I'll pull up the same interesting

01:07:31,010 --> 01:07:38,300
that's kind of funny implement and the

01:07:34,460 --> 01:07:41,450
hint is pulls up the hint number one

01:07:38,300 --> 01:07:44,660
pulls up the same link that was already

01:07:41,450 --> 01:07:47,359
there so I guess a cue to say hey hint

01:07:44,660 --> 01:07:51,320
read what we share

01:07:47,359 --> 01:07:54,380
but again as I've shared the programming

01:07:51,320 --> 01:07:56,450
guide super handy think about the

01:07:54,380 --> 01:08:02,080
primitives that you want to use and this

01:07:56,450 --> 01:08:06,200
should pull up a group I key here so

01:08:02,080 --> 01:08:09,830
here is the bit here's what we're trying

01:08:06,200 --> 01:08:15,619
to do is they're code examples here

01:08:09,830 --> 01:08:23,569
though do fun lifecycle group by keys so

01:08:15,619 --> 01:08:25,880
know this is I guess talking about ok

01:08:23,569 --> 01:08:29,930
and then it gets into code group IQ so

01:08:25,880 --> 01:08:31,910
that's a good know for maybe we could

01:08:29,930 --> 01:08:40,270
use a code example in the programming

01:08:31,910 --> 01:08:40,270
guide for group I key anyways okay so

01:08:40,960 --> 01:08:48,049
what we want to do we did look at

01:08:45,140 --> 01:08:53,509
pardhu's but since we didn't talk about

01:08:48,049 --> 01:08:56,109
beam dot map so I found this confusing

01:08:53,509 --> 01:08:59,750
because I tend to look for shortcuts

01:08:56,109 --> 01:09:01,640
when I first did this so I see a single

01:08:59,750 --> 01:09:04,520
line here so I'm under the impression

01:09:01,640 --> 01:09:09,170
that I would only write a single

01:09:04,520 --> 01:09:13,009
function well actually to do group by

01:09:09,170 --> 01:09:16,940
key we need a key value pair so first I

01:09:13,009 --> 01:09:21,200
need to write a beam dot map where let's

01:09:16,940 --> 01:09:25,250
say I do a lambda word where I'm gonna

01:09:21,200 --> 01:09:28,839
return a tuple of word at the first

01:09:25,250 --> 01:09:34,190
character along with the word itself

01:09:28,839 --> 01:09:41,719
right and then I will want to pipe that

01:09:34,190 --> 01:09:44,190
to being the group by key so again then

01:09:41,719 --> 01:09:48,900
the thought is this will create a key

01:09:44,190 --> 01:09:54,330
a okay so ultimately we'll wind up with

01:09:48,900 --> 01:09:57,510
a with then list of Apple and an to be

01:09:54,330 --> 01:10:03,030
with a list of bear and ball and C with

01:09:57,510 --> 01:10:06,989
a list of car and cheetah the way these

01:10:03,030 --> 01:10:08,640
are done I also had you know rehearsed

01:10:06,989 --> 01:10:11,190
engineered this if you will or whatnot

01:10:08,640 --> 01:10:15,210
log elements is how the Coty's are set

01:10:11,190 --> 01:10:17,280
up to do this we can get into how to

01:10:15,210 --> 01:10:20,640
just write these out to text files which

01:10:17,280 --> 01:10:24,840
makes it easier to explore exactly what

01:10:20,640 --> 01:10:30,090
is gone on so let's test this here and

01:10:24,840 --> 01:10:32,550
see how we did fantastic alright so

01:10:30,090 --> 01:10:34,800
again that was you know I get I got hung

01:10:32,550 --> 01:10:37,590
up by that and again if you guys that

01:10:34,800 --> 01:10:41,010
are working with Python you can kind of

01:10:37,590 --> 01:10:47,760
chain these all together with operations

01:10:41,010 --> 01:10:50,820
but it's super I like the UNIX pipe de

01:10:47,760 --> 01:11:00,750
limiters here so that addressed group by

01:10:50,820 --> 01:11:11,060
key here for for Python and I will now

01:11:00,750 --> 01:11:14,660
pull up the group by key for or job

01:11:11,060 --> 01:11:14,660
let's go beam

01:11:19,480 --> 01:11:24,820
now let's see how we doing with

01:11:21,820 --> 01:11:24,820
questions

01:11:30,780 --> 01:11:38,080
okay and it does look like as that is

01:11:35,230 --> 01:11:41,290
coming up Johannes your question on beam

01:11:38,080 --> 01:11:44,469
and knife I max answered in a thread a

01:11:41,290 --> 01:11:48,750
little below it but it doesn't look like

01:11:44,469 --> 01:11:48,750
I guess either of us are that

01:11:48,989 --> 01:11:55,210
well-prepared to speak to that naturally

01:11:53,739 --> 01:11:59,739
yeah I don't want to

01:11:55,210 --> 01:12:02,679
I like beam and I don't want to talk

01:11:59,739 --> 01:12:05,320
about comparisons to things that I'm not

01:12:02,679 --> 01:12:09,250
well versed enough because I'm obviously

01:12:05,320 --> 01:12:13,480
I guess already somewhat biased by my

01:12:09,250 --> 01:12:19,949
position here cool all right so here is

01:12:13,480 --> 01:12:19,949
the beam kato's for Java which are

01:12:22,500 --> 01:12:38,980
loading so that will come up here can I

01:12:31,330 --> 01:12:43,150
close this okay so this is the hello

01:12:38,980 --> 01:12:48,989
which we don't want to do let's close

01:12:43,150 --> 01:12:54,940
and reopen all right there we go core

01:12:48,989 --> 01:12:57,820
transforms group by key fantastic all

01:12:54,940 --> 01:13:00,300
the way deep in there and we don't have

01:12:57,820 --> 01:13:00,300
any

01:13:01,380 --> 01:13:08,940
this isn't already done so we can work

01:13:06,550 --> 01:13:08,940
through this

01:13:21,829 --> 01:13:46,400
let's try yeah okay so I need to write

01:13:37,949 --> 01:13:51,179
my I apply transformation which is a

01:13:46,400 --> 01:13:54,510
group I key pulls up that Docs there it

01:13:51,179 --> 01:13:59,190
is a let's you know the important thing

01:13:54,510 --> 01:14:02,369
is the key value class of possible

01:13:59,190 --> 01:14:06,389
values in the beam SDK we have a link to

01:14:02,369 --> 01:14:10,499
that the group by key which pulls up the

01:14:06,389 --> 01:14:12,809
same sort of documentation and again it

01:14:10,499 --> 01:14:15,119
takes us to the programming guide which

01:14:12,809 --> 01:14:17,760
does not have actual code examples in

01:14:15,119 --> 01:14:23,489
this case which is also good I mean

01:14:17,760 --> 01:14:27,389
naturally we can you know search Stack

01:14:23,489 --> 01:14:32,749
Overflow and the whatnot so we by

01:14:27,389 --> 01:14:39,150
convention we use input and in this case

01:14:32,749 --> 01:14:46,769
we want to take input and apply we're

01:14:39,150 --> 01:14:49,559
gonna map elements oh I'm gonna restart

01:14:46,769 --> 01:14:52,190
this IDE just so that it cleans itself

01:14:49,559 --> 01:14:52,190
up a little

01:15:03,530 --> 01:15:23,650
okay all right so let's map elements

01:15:11,869 --> 01:15:31,280
into so we need Q values of strings and

01:15:23,650 --> 01:15:44,239
strings okay and then we want to do that

01:15:31,280 --> 01:15:57,770
by word Q value of word we can do carat

01:15:44,239 --> 01:16:05,590
or subs ring substring 0 1 words or

01:15:57,770 --> 01:16:05,590
creating that tuple do I have all these

01:16:07,090 --> 01:16:29,869
things right I think I have that looks

01:16:15,770 --> 01:16:36,340
right and then I want to apply so this

01:16:29,869 --> 01:16:40,460
is like we did in the Python so we are

01:16:36,340 --> 01:16:42,110
mapping the elements into a key value of

01:16:40,460 --> 01:16:44,650
string and string type where we're

01:16:42,110 --> 01:16:46,880
taking the key value of the first

01:16:44,650 --> 01:16:48,829
character with the word so we're

01:16:46,880 --> 01:16:54,010
creating the key value pairs and then

01:16:48,829 --> 01:16:59,389
we're applying the group by key and

01:16:54,010 --> 01:17:00,020
creating it so if this gets out of my

01:16:59,389 --> 01:17:03,260
way

01:17:00,020 --> 01:17:14,769
I believe that does what we need so

01:17:03,260 --> 01:17:14,769
let's grade all didn't do what I need

01:17:15,760 --> 01:17:22,940
okay well let's see how the solution

01:17:19,909 --> 01:17:27,590
looks input dot apply map elements key

01:17:22,940 --> 01:17:33,080
value of string strings via word key

01:17:27,590 --> 01:17:38,150
value of and group I create so I'm gonna

01:17:33,080 --> 01:17:40,960
just count this as okay this is because

01:17:38,150 --> 01:17:45,679
I haven't configured Gradle on this new

01:17:40,960 --> 01:17:47,810
Community Edition bit for now since you

01:17:45,679 --> 01:17:53,300
know I just installed it to try to get

01:17:47,810 --> 01:17:57,340
the exercises clear cool Johannes just

01:17:53,300 --> 01:18:00,560
type in something so as Paul may be

01:17:57,340 --> 01:18:02,870
anybody some questions that we can

01:18:00,560 --> 01:18:07,730
answer right at the moment and otherwise

01:18:02,870 --> 01:18:10,070
I will try to run through some of the

01:18:07,730 --> 01:18:12,980
basics on streaming semantics and how to

01:18:10,070 --> 01:18:15,320
think of stateful streaming the reason

01:18:12,980 --> 01:18:19,010
about it in beam but let's answer some

01:18:15,320 --> 01:18:21,909
concrete questions around this specific

01:18:19,010 --> 01:18:21,909
exercise if any

01:18:26,020 --> 01:18:34,159
yeah okay Johannes let's let's save that

01:18:30,500 --> 01:18:37,370
for some of the QA either right at the

01:18:34,159 --> 01:18:40,040
end or in a I think Nina mentioned that

01:18:37,370 --> 01:18:42,830
there's a public room for some of these

01:18:40,040 --> 01:18:47,570
concrete additional questions that

01:18:42,830 --> 01:18:51,170
either that we can dig into so let me

01:18:47,570 --> 01:18:54,650
try to get through the some of the

01:18:51,170 --> 01:18:57,590
high-level stuff to give you the broad

01:18:54,650 --> 01:19:02,350
strokes of the model for now and then

01:18:57,590 --> 01:19:02,350
let's take it from there looks like

01:19:06,940 --> 01:19:14,780
nice yeah Paul sorry for being unfair

01:19:13,030 --> 01:19:18,770
you're right

01:19:14,780 --> 01:19:23,330
did not did not cover map elements at

01:19:18,770 --> 01:19:25,610
least in you know more than me

01:19:23,330 --> 01:19:28,190
mentioning it for a second

01:19:25,610 --> 01:19:30,440
also I'm you know I am kind of jumping

01:19:28,190 --> 01:19:32,510
ahead and around because I want to give

01:19:30,440 --> 01:19:39,380
you guys enough of what I think are the

01:19:32,510 --> 01:19:42,950
some fundamental pieces so awesome and

01:19:39,380 --> 01:19:45,890
good call as Mac says do funds are

01:19:42,950 --> 01:19:48,890
everything are you know most of what we

01:19:45,890 --> 01:19:51,980
need although then you know for anything

01:19:48,890 --> 01:19:55,580
custom and if not we can you know check

01:19:51,980 --> 01:20:00,280
into some of the built-in functionality

01:19:55,580 --> 01:20:03,950
cool let me get back to these slides

01:20:00,280 --> 01:20:06,380
slides over here okay cool

01:20:03,950 --> 01:20:11,000
so I'm gonna take you through a

01:20:06,380 --> 01:20:14,030
whirlwind of windowing time triggers and

01:20:11,000 --> 01:20:16,580
that sort of thing um you know here's

01:20:14,030 --> 01:20:18,950
just ways to think about it we're not

01:20:16,580 --> 01:20:21,850
going to get hands on in the next what

01:20:18,950 --> 01:20:27,170
do we got like 25 minutes or something

01:20:21,850 --> 01:20:29,540
so and then we can dig into some of I

01:20:27,170 --> 01:20:32,230
think I anticipate it sounds like an

01:20:29,540 --> 01:20:35,750
audience especially interested in

01:20:32,230 --> 01:20:38,810
getting these things up and running in a

01:20:35,750 --> 01:20:41,750
real sense so we'll make sure to find

01:20:38,810 --> 01:20:43,070
time to discover that so given also what

01:20:41,750 --> 01:20:44,960
it sounds like the audience I'll try to

01:20:43,070 --> 01:20:47,510
breeze through these things since this

01:20:44,960 --> 01:20:50,270
may be familiar and they should do some

01:20:47,510 --> 01:20:54,560
sort of polling in the future to engage

01:20:50,270 --> 01:20:56,960
the audience all right so we have you

01:20:54,560 --> 01:20:58,700
know we're in event time is what we're

01:20:56,960 --> 01:21:01,820
going to concern ourselves when we're

01:20:58,700 --> 01:21:02,810
talking about when doing time and you

01:21:01,820 --> 01:21:06,590
know why does that matter

01:21:02,810 --> 01:21:09,980
so we may have data we may have data

01:21:06,590 --> 01:21:12,800
that's big it may be super big over you

01:21:09,980 --> 01:21:16,850
know lots of days it might be infinitely

01:21:12,800 --> 01:21:18,290
big it's just you know always coming so

01:21:16,850 --> 01:21:23,390
the unbounded

01:21:18,290 --> 01:21:26,750
but so especially when it is unbounded

01:21:23,390 --> 01:21:29,870
or streaming there may be unknown delays

01:21:26,750 --> 01:21:32,690
son of M from 8 may come right at a them

01:21:29,870 --> 01:21:36,530
they come at 8:15 there or you know it

01:21:32,690 --> 01:21:39,760
may not arrive as far as event time to

01:21:36,530 --> 01:21:47,380
our system until you know after 2 p.m.

01:21:39,760 --> 01:21:50,600
so we walk through the map and pardhu

01:21:47,380 --> 01:21:53,120
functions in the sense of how we can do

01:21:50,600 --> 01:21:57,970
element wise transformations that lets

01:21:53,120 --> 01:22:01,370
us doesn't do things to the elements but

01:21:57,970 --> 01:22:06,200
time is not particularly relevant when

01:22:01,370 --> 01:22:08,390
doing elements transformation we then

01:22:06,200 --> 01:22:11,870
and the most common way of dealing with

01:22:08,390 --> 01:22:14,360
time is just dealing with processing

01:22:11,870 --> 01:22:17,120
time chunks so you know historically

01:22:14,360 --> 01:22:21,890
that was nightly you know or daily batch

01:22:17,120 --> 01:22:25,610
jobs you know more often now it is

01:22:21,890 --> 01:22:28,580
saying in hourly chunks and its really

01:22:25,610 --> 01:22:33,400
only concerned with processing time

01:22:28,580 --> 01:22:37,760
windows so when the events are in our

01:22:33,400 --> 01:22:40,310
message queue in our system not you know

01:22:37,760 --> 01:22:42,740
when it occurred so in the 9 to 10

01:22:40,310 --> 01:22:46,850
o'clock block as well as in the 1 to 2

01:22:42,740 --> 01:22:55,190
p.m. block we may have events from 8

01:22:46,850 --> 01:22:57,860
a.m. so we a different way of thinking

01:22:55,190 --> 01:23:01,340
about this and this you know hopefully

01:22:57,860 --> 01:23:04,300
is quite intuitive to you although you

01:23:01,340 --> 01:23:06,410
know sometimes takes a while to reverse

01:23:04,300 --> 01:23:09,710
thinking from you know just taking

01:23:06,410 --> 01:23:13,790
events as they come versus I want to

01:23:09,710 --> 01:23:16,340
take the events as they I want to

01:23:13,790 --> 01:23:22,130
recreate the event time or at least make

01:23:16,340 --> 01:23:25,130
sense of like knowing what happened as

01:23:22,130 --> 01:23:28,970
it occurred in event I'm rather than

01:23:25,130 --> 01:23:31,460
just letting things like network delays

01:23:28,970 --> 01:23:31,800
or a device shutting off and not sending

01:23:31,460 --> 01:23:35,430
me

01:23:31,800 --> 01:23:37,380
event until it was turned back on for to

01:23:35,430 --> 01:23:41,660
arrive at my system to have a sense of

01:23:37,380 --> 01:23:44,760
what was going on so we can also window

01:23:41,660 --> 01:23:48,420
events so when doing is a way to divide

01:23:44,760 --> 01:23:55,560
data into event time-based chunks so we

01:23:48,420 --> 01:24:01,280
can do fixed windows we can do sliding

01:23:55,560 --> 01:24:07,380
windows as different ways to capture

01:24:01,280 --> 01:24:12,140
things around event time we you know in

01:24:07,380 --> 01:24:12,140
the world that I deal with which is

01:24:12,590 --> 01:24:16,280
television

01:24:13,890 --> 01:24:18,660
so naturally streaming or real-time

01:24:16,280 --> 01:24:21,900
applications but trying to recreate

01:24:18,660 --> 01:24:24,750
things like user sessions for instance

01:24:21,900 --> 01:24:28,080
to know bit so we can't know when

01:24:24,750 --> 01:24:30,570
session is going to end but you know

01:24:28,080 --> 01:24:33,420
have to deal with all sorts of various

01:24:30,570 --> 01:24:36,210
bits and again like I said clients dying

01:24:33,420 --> 01:24:40,050
and recreating how to then figure that's

01:24:36,210 --> 01:24:42,390
out so be aware that we can have various

01:24:40,050 --> 01:24:45,600
windowing strategies will show some code

01:24:42,390 --> 01:24:51,960
on how beam handles those semantics

01:24:45,600 --> 01:24:54,600
there is also triggers and as it relates

01:24:51,960 --> 01:24:57,170
to stream so I can't help but give a

01:24:54,600 --> 01:24:59,580
shout out to the streaming systems book

01:24:57,170 --> 01:25:00,960
that's over here too although I don't

01:24:59,580 --> 01:25:04,290
need to grab it

01:25:00,960 --> 01:25:07,560
I really wish they had gone with this

01:25:04,290 --> 01:25:12,270
amazing dinosaur cover which is in the

01:25:07,560 --> 01:25:18,480
book but anyways you know the fish is

01:25:12,270 --> 01:25:20,310
also quite you know a profile so a lot

01:25:18,480 --> 01:25:23,580
of this stuff is covered in a lot more

01:25:20,310 --> 01:25:26,250
depth if you want to dig into the way to

01:25:23,580 --> 01:25:28,920
reason about this again just aiming for

01:25:26,250 --> 01:25:32,940
high level here so if we have our

01:25:28,920 --> 01:25:35,370
unbounded peak collections not only do

01:25:32,940 --> 01:25:40,440
we want to talk about where things are

01:25:35,370 --> 01:25:43,890
occurring so we're in event times but

01:25:40,440 --> 01:25:47,370
then we want to talk about triggers

01:25:43,890 --> 01:25:53,400
and for when that happens relative to

01:25:47,370 --> 01:25:57,810
processing time so for instance we may

01:25:53,400 --> 01:26:01,380
want to trigger out a watermark where we

01:25:57,810 --> 01:26:03,090
don't specify then anything too specific

01:26:01,380 --> 01:26:05,520
there's just the heuristic sort of

01:26:03,090 --> 01:26:10,260
watermark that manages where we want to

01:26:05,520 --> 01:26:12,270
know use a fixed fixed windowing as we

01:26:10,260 --> 01:26:14,430
talked about with Windows and where we

01:26:12,270 --> 01:26:18,660
want to just some integer so here's a

01:26:14,430 --> 01:26:24,510
way to how that starts to happen

01:26:18,660 --> 01:26:29,940
triggers can control when we start to

01:26:24,510 --> 01:26:33,180
output the aggregation on the right

01:26:29,940 --> 01:26:38,160
would be the heuristic watermark because

01:26:33,180 --> 01:26:41,400
we which is the default so essentially

01:26:38,160 --> 01:26:43,230
when the system estimates that the

01:26:41,400 --> 01:26:46,740
window is complete it's hard to know

01:26:43,230 --> 01:26:49,260
exactly when or what to do with the sort

01:26:46,740 --> 01:26:53,010
of late arriving data so we do have ways

01:26:49,260 --> 01:26:56,460
to control that also and again on the

01:26:53,010 --> 01:26:59,310
left here is the notion of the perfect

01:26:56,460 --> 01:27:00,750
watermark meaning if it captured all

01:26:59,310 --> 01:27:03,480
data

01:27:00,750 --> 01:27:08,280
I guess essentially soon as it became

01:27:03,480 --> 01:27:12,210
available so in addition to the sort of

01:27:08,280 --> 01:27:14,620
heuristic watermark and again you can

01:27:12,210 --> 01:27:17,300
see the color coding right we're using

01:27:14,620 --> 01:27:21,330
[Music]

01:27:17,300 --> 01:27:23,970
glue for windowing and green for the

01:27:21,330 --> 01:27:25,710
sort of trigger code as well as I think

01:27:23,970 --> 01:27:33,090
that was supposed to be red but it's

01:27:25,710 --> 01:27:36,180
yellow for the summation anyways oh no

01:27:33,090 --> 01:27:39,240
that's right all right so we can define

01:27:36,180 --> 01:27:43,050
our when things are happening if we want

01:27:39,240 --> 01:27:47,970
to say use early and late firings which

01:27:43,050 --> 01:27:49,350
then will help us have additional

01:27:47,970 --> 01:27:53,030
complete results where we don't

01:27:49,350 --> 01:27:56,040
necessarily discard for instance

01:27:53,030 --> 01:27:57,270
allowing late firings at count if we

01:27:56,040 --> 01:28:00,300
want to of

01:27:57,270 --> 01:28:04,650
they are sums based on that as well as

01:28:00,300 --> 01:28:07,350
for instance with early firings start to

01:28:04,650 --> 01:28:09,450
accumulate those results as soon as we

01:28:07,350 --> 01:28:13,820
have them without waiting these are all

01:28:09,450 --> 01:28:18,380
sort of trade offs that you'll

01:28:13,820 --> 01:28:18,380
potentially need to make depending on

01:28:19,790 --> 01:28:24,870
materializing results say too soon that

01:28:22,290 --> 01:28:30,300
are incorrect or what to do at one point

01:28:24,870 --> 01:28:32,670
with haole of data so this is then the

01:28:30,300 --> 01:28:36,780
perfect watermark again is on the left

01:28:32,670 --> 01:28:40,050
with the heuristic watermark and with

01:28:36,780 --> 01:28:46,230
that sort of early and late firing code

01:28:40,050 --> 01:28:48,470
configured the are the boxes there once

01:28:46,230 --> 01:28:51,500
they turn blue are when the trigger

01:28:48,470 --> 01:28:54,990
winds up firing as well as then the

01:28:51,500 --> 01:29:00,500
resultant score our summation occurring

01:28:54,990 --> 01:29:02,910
in each window so cool that's not a

01:29:00,500 --> 01:29:05,940
let's make sure we leave plenty of time

01:29:02,910 --> 01:29:09,090
other kinds of triggers there's a ton of

01:29:05,940 --> 01:29:11,310
we can trigger on element count in a

01:29:09,090 --> 01:29:15,570
window we can configure on processing

01:29:11,310 --> 01:29:21,630
time we can trigger on various

01:29:15,570 --> 01:29:25,320
combinations I can get super nuanced

01:29:21,630 --> 01:29:29,190
with triggers yeah

01:29:25,320 --> 01:29:32,430
figure out the how quick and important

01:29:29,190 --> 01:29:35,640
you're sort of aggregations our

01:29:32,430 --> 01:29:39,290
combinations are and the you know is and

01:29:35,640 --> 01:29:43,710
how you're dealing with wherever you're

01:29:39,290 --> 01:29:47,730
viewing those results okay so also to be

01:29:43,710 --> 01:29:52,230
aware of side inputs is supported so for

01:29:47,730 --> 01:29:56,790
instance is a way to I mean I view that

01:29:52,230 --> 01:30:00,200
as a form of join you can do take extra

01:29:56,790 --> 01:30:00,200
inputs on the side too

01:30:01,160 --> 01:30:07,200
yeah I mean essentially drawing so

01:30:03,750 --> 01:30:09,630
either here in a second we'll look at

01:30:07,200 --> 01:30:11,760
some example code for even looking

01:30:09,630 --> 01:30:15,630
through all elements as part of a

01:30:11,760 --> 01:30:18,930
collection are here we can just have the

01:30:15,630 --> 01:30:21,900
code on screen where we're looking at

01:30:18,930 --> 01:30:25,560
all of the max work grabbing the max

01:30:21,900 --> 01:30:28,350
word length based on all elements in the

01:30:25,560 --> 01:30:34,550
collection and then using that to pad

01:30:28,350 --> 01:30:39,390
all of the words for output for instance

01:30:34,550 --> 01:30:41,790
but also site inputs are common for I

01:30:39,390 --> 01:30:48,030
need to do some sort of kind of

01:30:41,790 --> 01:30:49,860
streaming look so yeah be aware of that

01:30:48,030 --> 01:30:53,700
as a very common pattern in something

01:30:49,860 --> 01:30:58,070
supported I guess worth mentioning the

01:30:53,700 --> 01:31:00,240
scala api shio here's you know no

01:30:58,070 --> 01:31:06,750
presentation would be complete without a

01:31:00,240 --> 01:31:08,970
form of word count wanting to say thanks

01:31:06,750 --> 01:31:10,650
to this is an open source community

01:31:08,970 --> 01:31:14,130
thanks to the people building beam man

01:31:10,650 --> 01:31:17,670
that I you know took slides from that we

01:31:14,130 --> 01:31:21,660
share we're pretty short on time so I'm

01:31:17,670 --> 01:31:23,690
gonna avoid just sitting here in the

01:31:21,660 --> 01:31:27,420
last 10 minutes letting you work

01:31:23,690 --> 01:31:29,130
independently I'll walk through the next

01:31:27,420 --> 01:31:31,860
little bits and save some time for

01:31:29,130 --> 01:31:36,380
questions you guys all have IntelliJ

01:31:31,860 --> 01:31:39,960
downloaded now so work through those

01:31:36,380 --> 01:31:42,990
let's see other important bits no kata

01:31:39,960 --> 01:31:45,990
Kota time I mentioned opportunities hey

01:31:42,990 --> 01:31:50,220
I work for dish they're hiring check it

01:31:45,990 --> 01:31:52,940
out Shopify is some guys I met at the

01:31:50,220 --> 01:31:55,740
last beam summit they're hiring

01:31:52,940 --> 01:31:59,580
specifically a group at this link here

01:31:55,740 --> 01:32:02,180
for so seen your analytics developer

01:31:59,580 --> 01:32:05,760
merchant data otherwise search

01:32:02,180 --> 01:32:09,000
specifically for those that think about

01:32:05,760 --> 01:32:11,430
flink end or beam and specifically that

01:32:09,000 --> 01:32:12,630
are going to write beam pipelines so I

01:32:11,430 --> 01:32:15,810
don't

01:32:12,630 --> 01:32:19,679
I see more and more things happening in

01:32:15,810 --> 01:32:23,130
that direction of companies recognizing

01:32:19,679 --> 01:32:25,650
and actively seeking those with that can

01:32:23,130 --> 01:32:28,500
right being pipelines so you know my

01:32:25,650 --> 01:32:33,270
natural sales pitch on hey it makes

01:32:28,500 --> 01:32:34,920
sense to learn guys want to suggest get

01:32:33,270 --> 01:32:37,860
involved I should make a better slide

01:32:34,920 --> 01:32:41,940
here but check out the beamed Apache dot

01:32:37,860 --> 01:32:49,050
org website that has a ton of good stuff

01:32:41,940 --> 01:32:52,260
being we went there a ton of time you

01:32:49,050 --> 01:32:58,590
know here it is check out lots of oh

01:32:52,260 --> 01:33:05,489
good we have quick starts for all cool

01:32:58,590 --> 01:33:10,620
be aware I think community check out the

01:33:05,489 --> 01:33:13,620
contact us so there is user and list

01:33:10,620 --> 01:33:19,320
especially are relevant if you're trying

01:33:13,620 --> 01:33:21,630
to use beam and run into trouble hit up

01:33:19,320 --> 01:33:23,699
the user mailing list there's a bunch of

01:33:21,630 --> 01:33:26,670
users there as well as developers that

01:33:23,699 --> 01:33:29,250
may help you out be aware there's a

01:33:26,670 --> 01:33:31,639
slack channel you can get into the ASF

01:33:29,250 --> 01:33:35,239
slack and people may help but ultimately

01:33:31,639 --> 01:33:38,000
one of your best bets is stack overflow

01:33:35,239 --> 01:33:41,210
not only because it's great but there's

01:33:38,000 --> 01:33:45,929
some of the people actually building it

01:33:41,210 --> 01:33:48,659
use that as some metrics for keeping

01:33:45,929 --> 01:33:51,540
track of you know open issues answered

01:33:48,659 --> 01:33:54,750
questions and whatnot there so that's

01:33:51,540 --> 01:33:58,469
probably one of your better places to

01:33:54,750 --> 01:34:01,260
also get questions answered so yeah

01:33:58,469 --> 01:34:04,500
check out slack during the community

01:34:01,260 --> 01:34:08,070
check out the dev list also so if you

01:34:04,500 --> 01:34:10,650
want to learn directions that things are

01:34:08,070 --> 01:34:16,650
going or get involved with contributing

01:34:10,650 --> 01:34:19,230
code check that out also would love to

01:34:16,650 --> 01:34:21,420
hear what I can do better I've offered

01:34:19,230 --> 01:34:22,920
this sort of workshop a couple times but

01:34:21,420 --> 01:34:25,920
if there's some sort of buzz words

01:34:22,920 --> 01:34:26,909
feedback what what sort of content would

01:34:25,920 --> 01:34:29,100
be better to focus

01:34:26,909 --> 01:34:33,719
probably work out some of the kinks with

01:34:29,100 --> 01:34:38,850
install and whatnot but let me know how

01:34:33,719 --> 01:34:41,730
I can do better and closing on beam

01:34:38,850 --> 01:34:47,179
summit again come check it out that's

01:34:41,730 --> 01:34:51,480
dot org although it doesn't oh yeah

01:34:47,179 --> 01:34:55,800
check beam summit or gout and come join

01:34:51,480 --> 01:35:08,489
I'm gonna check out the chatroom and

01:34:55,800 --> 01:35:17,280
start thinking about what do I get back

01:35:08,489 --> 01:35:20,360
to slack slack cool yeah that's a

01:35:17,280 --> 01:35:23,130
reasonable that we have a couple minutes

01:35:20,360 --> 01:35:26,280
max you're asking if we should start to

01:35:23,130 --> 01:35:29,699
break out now yeah we should have some

01:35:26,280 --> 01:35:33,440
conversations and answer some questions

01:35:29,699 --> 01:35:36,110
this is that mean going into our own

01:35:33,440 --> 01:35:39,929
[Music]

01:35:36,110 --> 01:35:46,260
room somewhere and max if not come on

01:35:39,929 --> 01:35:47,940
into the conversation here also hi Here

01:35:46,260 --> 01:35:51,300
I am

01:35:47,940 --> 01:35:52,170
great presentation okay yeah I think I'm

01:35:51,300 --> 01:35:55,199
there were a lot of interesting

01:35:52,170 --> 01:35:58,770
questions and the in the slack channel

01:35:55,199 --> 01:36:02,190
and it's probably easier if we could

01:35:58,770 --> 01:36:04,469
just go to the breakout room now but I'm

01:36:02,190 --> 01:36:07,699
also happy to answer questions here if

01:36:04,469 --> 01:36:10,130
there are more questions in written form

01:36:07,699 --> 01:36:13,620
other way it's probably easier to just

01:36:10,130 --> 01:36:15,860
like video conference and ask questions

01:36:13,620 --> 01:36:15,860
directly

01:36:16,610 --> 01:36:24,330
that seems sensible so yeah I guess

01:36:20,040 --> 01:36:26,250
can we just say anybody anybody type out

01:36:24,330 --> 01:36:28,409
a question if you really want one just

01:36:26,250 --> 01:36:30,150
brought unanswered broadcast to you and

01:36:28,409 --> 01:36:33,989
if not we'll share the breakout room

01:36:30,150 --> 01:36:35,550
link or do we already have that we do

01:36:33,989 --> 01:36:39,050
have the link yes

01:36:35,550 --> 01:36:39,050
I'll post it again

01:36:46,290 --> 01:36:58,290
okay yeah Nina also posted it in the

01:36:50,130 --> 01:37:00,240
Select channel cool I guess we all ended

01:36:58,290 --> 01:37:03,990
here then and join the breakout session

01:37:00,240 --> 01:37:05,730
yeah and so for those of you with some

01:37:03,990 --> 01:37:08,850
questions come join us there so we can

01:37:05,730 --> 01:37:12,240
just talk through things also since I

01:37:08,850 --> 01:37:14,400
don't know if whether this was getting

01:37:12,240 --> 01:37:18,000
recorded or not I suspect the breakout

01:37:14,400 --> 01:37:22,850
room isn't so I can be you know share

01:37:18,000 --> 01:37:24,240
more naive thoughts and whatnot there so

01:37:22,850 --> 01:37:27,150
cool

01:37:24,240 --> 01:37:28,740
see you guys over there and ask max

01:37:27,150 --> 01:37:29,430
stuff especially since he really knows

01:37:28,740 --> 01:37:32,120
these things

01:37:29,430 --> 01:37:32,120
I was building

01:37:38,730 --> 01:37:40,790

YouTube URL: https://www.youtube.com/watch?v=VrVDXM2RlQ0


