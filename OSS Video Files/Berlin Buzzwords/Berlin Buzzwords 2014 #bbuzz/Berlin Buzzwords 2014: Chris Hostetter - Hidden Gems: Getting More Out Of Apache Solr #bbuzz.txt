Title: Berlin Buzzwords 2014: Chris Hostetter - Hidden Gems: Getting More Out Of Apache Solr #bbuzz
Publication date: 2014-05-28
Playlist: Berlin Buzzwords 2014 #bbuzz
Description: 
	Every day billions of documents are searched, sorted, faceted and highlighted by millions of users who have no idea that behind the scenes, Apache Solr is hard at work, making life simple for developers like you. But what else can Solr do for you?

In this session, we'll dive into some of the less well known, less understood, features of Apache Solr that even seasoned Solr developers may not be aware of -- features that can be useful in ways you might not have considered even if you do know about them, so you can take your Solr powered applications to the next level.

Read more:
https://2014.berlinbuzzwords.de/session/hidden-gems-getting-more-out-apache-solr

About Chris Hostetter: 
https://2014.berlinbuzzwords.de/user/215/event/1

Website: https://berlinbuzzwords.de/
Twitter: https://twitter.com/berlinbuzzwords
LinkedIn: https://www.linkedin.com/showcase/berlin-buzzwords/ 
Reddit: https://www.reddit.com/r/berlinbuzzwords/
Captions: 
	00:00:05,540 --> 00:00:13,080
hello everybody that I can't see hello

00:00:09,750 --> 00:00:16,080
hey somebody's there uh my name is Chris

00:00:13,080 --> 00:00:17,550
hostetter or Hoss this is me this is

00:00:16,080 --> 00:00:19,259
solar which is what we're here to talk

00:00:17,550 --> 00:00:21,840
about today I love this stage because

00:00:19,259 --> 00:00:25,320
I'm like right here and I glove to do

00:00:21,840 --> 00:00:27,420
this so my name is Hoss I work at lucid

00:00:25,320 --> 00:00:29,369
works you are at Berlin buzzwords we're

00:00:27,420 --> 00:00:32,279
going to talk about solar this talk is

00:00:29,369 --> 00:00:34,530
called hidden gems what the what the

00:00:32,279 --> 00:00:37,890
point of this talk is and why I sort of

00:00:34,530 --> 00:00:40,589
made this is over the years there are

00:00:37,890 --> 00:00:41,790
things about solar that I know and that

00:00:40,589 --> 00:00:44,790
people who are really experienced with

00:00:41,790 --> 00:00:46,080
solar you usually know but I'm really

00:00:44,790 --> 00:00:47,430
surprised every now and then I'll meet

00:00:46,080 --> 00:00:48,750
someone I'm like wait you've used solar

00:00:47,430 --> 00:00:50,640
for like two years like you didn't know

00:00:48,750 --> 00:00:52,530
that it had this feature and that's

00:00:50,640 --> 00:00:54,239
where it's sort of it's it's the you

00:00:52,530 --> 00:00:55,909
know it's very cool little things it's

00:00:54,239 --> 00:00:58,199
sort of a collection a survey of

00:00:55,909 --> 00:00:59,820
interesting things that I've talked to

00:00:58,199 --> 00:01:01,680
people and I've been like you're you

00:00:59,820 --> 00:01:03,119
know new users they don't know a lot of

00:01:01,680 --> 00:01:04,710
stuff they read the docs they learn

00:01:03,119 --> 00:01:06,540
about it but there's features that we've

00:01:04,710 --> 00:01:08,130
had these aren't most of these aren't

00:01:06,540 --> 00:01:09,780
new features there's one or two new

00:01:08,130 --> 00:01:11,909
features most of these are features that

00:01:09,780 --> 00:01:13,259
have been around years but not a lot of

00:01:11,909 --> 00:01:14,670
people might seem to know about them so

00:01:13,259 --> 00:01:17,609
I wanted to get out there and tell

00:01:14,670 --> 00:01:20,479
people more about them this talk is not

00:01:17,609 --> 00:01:25,200
really an intro to solar can i maybe see

00:01:20,479 --> 00:01:26,759
who here uses solar excellent ok all of

00:01:25,200 --> 00:01:28,859
you put your hands down who here has

00:01:26,759 --> 00:01:31,890
never used solar please just be honest

00:01:28,859 --> 00:01:34,350
so that I know ok well you're at a lot

00:01:31,890 --> 00:01:35,880
I'm sorry oh wait wait one more alright

00:01:34,350 --> 00:01:37,770
there's two of you so i will i will

00:01:35,880 --> 00:01:39,509
attempt to give you quick explanations

00:01:37,770 --> 00:01:41,909
but says we don't have a lot of time i

00:01:39,509 --> 00:01:44,429
won't go into much introductory stuff

00:01:41,909 --> 00:01:45,689
but i will frequently say who here has

00:01:44,429 --> 00:01:46,770
ever seen this before because i want to

00:01:45,689 --> 00:01:48,329
know because i don't want to waste time

00:01:46,770 --> 00:01:52,139
telling you stuff you guys already know

00:01:48,329 --> 00:01:54,060
okay so we're gonna start with an easy

00:01:52,139 --> 00:01:57,659
one a quick little palette cleanser

00:01:54,060 --> 00:02:00,630
monitoring right this is the solar admin

00:01:57,659 --> 00:02:06,959
UI who here has never seen this screen

00:02:00,630 --> 00:02:08,310
before 12 ice all right three okay so

00:02:06,959 --> 00:02:10,140
this is what do you get if you go to

00:02:08,310 --> 00:02:12,510
solar in a web browser this is sort of

00:02:10,140 --> 00:02:14,100
what you'll see it's got a left nav this

00:02:12,510 --> 00:02:15,720
is where you sort of can do things that

00:02:14,100 --> 00:02:18,800
are per collection these are things that

00:02:15,720 --> 00:02:21,020
are global to the whole solar setup and

00:02:18,800 --> 00:02:22,940
here I've clicked down and I've said cat

00:02:21,020 --> 00:02:24,890
tell me information about the plugins

00:02:22,940 --> 00:02:26,480
and statistics that I've got in my

00:02:24,890 --> 00:02:28,340
collection and these are the categories

00:02:26,480 --> 00:02:30,770
of things and what I want to show you

00:02:28,340 --> 00:02:32,420
here is there's a lot of statistics that

00:02:30,770 --> 00:02:34,100
solar is keeping track of and a lot of

00:02:32,420 --> 00:02:35,960
things that you can monitor in this

00:02:34,100 --> 00:02:37,820
specific case i'm looking at Cash's i'm

00:02:35,960 --> 00:02:39,770
looking specifically at the filter cash

00:02:37,820 --> 00:02:41,270
and i'm looking at some of my cache hit

00:02:39,770 --> 00:02:43,370
rates i'm looking at how many evictions

00:02:41,270 --> 00:02:45,080
I've got I've got information about the

00:02:43,370 --> 00:02:47,720
current instance of the cash but also

00:02:45,080 --> 00:02:50,000
global things since solar started up all

00:02:47,720 --> 00:02:51,680
of this is available in the UI which

00:02:50,000 --> 00:02:53,090
makes it really handy for when you're

00:02:51,680 --> 00:02:55,610
doing development you wanted to sanity

00:02:53,090 --> 00:02:57,200
check things who who here has ever it's

00:02:55,610 --> 00:02:59,210
hard to make out but this is the watch

00:02:57,200 --> 00:03:02,870
changes refresh values has anyone ever

00:02:59,210 --> 00:03:04,250
used those couple people what these do

00:03:02,870 --> 00:03:07,460
these are these are these are these

00:03:04,250 --> 00:03:10,550
really cool little just you I pieces

00:03:07,460 --> 00:03:12,320
that Stefan Mathis a German living in

00:03:10,550 --> 00:03:15,080
Zurich now who's really awesome in who

00:03:12,320 --> 00:03:17,810
did almost the entire solar you I he um

00:03:15,080 --> 00:03:19,910
he added this and what this does is it's

00:03:17,810 --> 00:03:22,010
an easy way for you to say these are my

00:03:19,910 --> 00:03:23,750
stats now i'm gonna click this button

00:03:22,010 --> 00:03:25,610
and it's it's all in the browser there's

00:03:23,750 --> 00:03:27,050
nothing sophisticated about it but i'm

00:03:25,610 --> 00:03:29,540
going to click this watch button and

00:03:27,050 --> 00:03:30,830
then i'm gonna go do some stuff and then

00:03:29,540 --> 00:03:32,989
i'm gonna come back and click the

00:03:30,830 --> 00:03:34,670
stopwatch button and it's going to tell

00:03:32,989 --> 00:03:36,770
me what changed and it's going to tell

00:03:34,670 --> 00:03:39,170
me that i got five more things put in my

00:03:36,770 --> 00:03:40,489
cash and that's going to let me sanity

00:03:39,170 --> 00:03:42,680
check that the things that I thought

00:03:40,489 --> 00:03:44,150
were being cached aren't being cached

00:03:42,680 --> 00:03:45,860
because they got added so apparently

00:03:44,150 --> 00:03:48,110
they weren't in there before it's it's a

00:03:45,860 --> 00:03:49,550
handy little little tool not a lot of

00:03:48,110 --> 00:03:51,110
people know about this it's not

00:03:49,550 --> 00:03:52,550
something that you probably use every

00:03:51,110 --> 00:03:54,890
day but it's good to sort of have in

00:03:52,550 --> 00:03:56,739
your head but at the larger picture the

00:03:54,890 --> 00:03:58,790
fact that all these stats are available

00:03:56,739 --> 00:04:00,800
sort of some people every now and then I

00:03:58,790 --> 00:04:02,540
like I don't know well they're there not

00:04:00,800 --> 00:04:05,510
only are they there but they're all

00:04:02,540 --> 00:04:08,600
available via jmx right this is the this

00:04:05,510 --> 00:04:12,350
is the jmx console jconsole right if who

00:04:08,600 --> 00:04:14,860
here uses jmx ever okay who here knew

00:04:12,350 --> 00:04:17,359
that you could get solar stats from jmx

00:04:14,860 --> 00:04:18,859
that was less hands actually that was

00:04:17,359 --> 00:04:21,109
different hands ironically the people

00:04:18,859 --> 00:04:22,820
use jmx had no idea and the people who

00:04:21,109 --> 00:04:26,690
don't use jmx or like of course you can

00:04:22,820 --> 00:04:28,729
anyway if you use jmx all of those stats

00:04:26,690 --> 00:04:32,210
are available anything you see in the

00:04:28,729 --> 00:04:34,250
admin UI is readable via j

00:04:32,210 --> 00:04:36,889
mex we don't we don't really do you

00:04:34,250 --> 00:04:38,120
can't use the the jmx system to write a

00:04:36,889 --> 00:04:41,449
lot of information into solar

00:04:38,120 --> 00:04:43,669
unfortunately but any of those stats can

00:04:41,449 --> 00:04:45,830
be monitored jmx so if you use nagios or

00:04:43,669 --> 00:04:47,930
if use avex or any of those monitoring

00:04:45,830 --> 00:04:50,000
systems that can pull from a jmx source

00:04:47,930 --> 00:04:51,979
to you know plot your time series

00:04:50,000 --> 00:04:53,539
information you can you can get all of

00:04:51,979 --> 00:04:56,150
that straight from solar just by

00:04:53,539 --> 00:04:58,280
enabling jmx and if i should have

00:04:56,150 --> 00:05:01,160
mentioned before if you look at these

00:04:58,280 --> 00:05:02,810
slides online it's all HTML all of these

00:05:01,160 --> 00:05:04,430
slides have links where you can go read

00:05:02,810 --> 00:05:06,500
the documentation about these features

00:05:04,430 --> 00:05:08,120
so you can find out more about that but

00:05:06,500 --> 00:05:10,370
all of the stuff that you see in the

00:05:08,120 --> 00:05:11,810
admin UI is available via jmx and even

00:05:10,370 --> 00:05:15,410
if you don't use jmx it's all available

00:05:11,810 --> 00:05:17,300
from a REST API the admin UI is one

00:05:15,410 --> 00:05:19,970
hundred percent JavaScript single page

00:05:17,300 --> 00:05:22,009
running on the solar port and everything

00:05:19,970 --> 00:05:24,590
it gets is just by talking to the solar

00:05:22,009 --> 00:05:26,870
port and getting json back from AP eyes

00:05:24,590 --> 00:05:29,210
that look like this so this is again

00:05:26,870 --> 00:05:32,120
this is that same cache stats info for

00:05:29,210 --> 00:05:34,130
the filter cash cumulative rates current

00:05:32,120 --> 00:05:36,289
rates right so all of that information

00:05:34,130 --> 00:05:38,120
is accessible to you can hook that into

00:05:36,289 --> 00:05:39,710
your existing monitoring systems things

00:05:38,120 --> 00:05:41,750
like that does that make sense to

00:05:39,710 --> 00:05:43,759
everybody if it doesn't make sense raise

00:05:41,750 --> 00:05:46,310
your hand if it makes sense raise your

00:05:43,759 --> 00:05:50,360
hand yeah alright good you're all awake

00:05:46,310 --> 00:05:51,740
that's the important thing okay so the

00:05:50,360 --> 00:05:53,090
next thing totally changing topics

00:05:51,740 --> 00:05:54,229
because that's the kind of talk this is

00:05:53,090 --> 00:05:57,349
we're talking about lots of different

00:05:54,229 --> 00:06:00,680
little things facet method who here uses

00:05:57,349 --> 00:06:04,820
faceting and solar who here does it use

00:06:00,680 --> 00:06:07,219
faceting and solar so for people haven't

00:06:04,820 --> 00:06:08,180
learned how awesome faceting is that's

00:06:07,219 --> 00:06:10,669
what I'm that's what I'm learning here

00:06:08,180 --> 00:06:12,199
okay so who here has used facet method

00:06:10,669 --> 00:06:15,650
who here has configured this and change

00:06:12,199 --> 00:06:18,259
this one wait wait all the people use

00:06:15,650 --> 00:06:20,840
fascinating raise your hands again wow

00:06:18,259 --> 00:06:22,880
that is that is I mean dumb that I'm not

00:06:20,840 --> 00:06:24,139
surprised but that's usually I am

00:06:22,880 --> 00:06:25,280
surprised usual I'm like oh way more

00:06:24,139 --> 00:06:26,810
people know about what that tells me is

00:06:25,280 --> 00:06:28,159
we're doing a really good job because

00:06:26,810 --> 00:06:30,380
you guys use it and it just works and

00:06:28,159 --> 00:06:31,550
you're happy we should talk later

00:06:30,380 --> 00:06:33,250
because I want to know why you had to

00:06:31,550 --> 00:06:35,659
mess with this because that saves me oh

00:06:33,250 --> 00:06:38,000
because you saw ah okay all right right

00:06:35,659 --> 00:06:40,550
right so facet method controls the

00:06:38,000 --> 00:06:42,080
internal algorithm solar uses to decide

00:06:40,550 --> 00:06:44,029
how to do your fastening there's three

00:06:42,080 --> 00:06:45,770
different values two of them are very

00:06:44,029 --> 00:06:48,020
similar they're called FC and FC

00:06:45,770 --> 00:06:50,720
yes this comes from the name field cash

00:06:48,020 --> 00:06:52,789
one is filled cash and one is filled

00:06:50,720 --> 00:06:54,319
cash per segment which is relatively in

00:06:52,789 --> 00:06:56,930
the history of soul and we've seen a

00:06:54,319 --> 00:06:58,610
relatively newer concept they both

00:06:56,930 --> 00:07:03,409
fundamentally kind of do the same thing

00:06:58,610 --> 00:07:04,520
they are iterating over the unique hold

00:07:03,409 --> 00:07:05,960
on let me get this right now they're

00:07:04,520 --> 00:07:07,460
iterating over the documents and

00:07:05,960 --> 00:07:10,069
maintaining counters for the unique

00:07:07,460 --> 00:07:13,069
values they see using the field cash the

00:07:10,069 --> 00:07:15,470
difference is that the default just FC

00:07:13,069 --> 00:07:18,050
field cash that's using a global field

00:07:15,470 --> 00:07:22,039
cash over the entire index FCS is doing

00:07:18,050 --> 00:07:23,569
it per segment right um the the sort of

00:07:22,039 --> 00:07:26,979
fundamental difference is that the

00:07:23,569 --> 00:07:29,630
global field cash takes longer to build

00:07:26,979 --> 00:07:31,610
right so every time you open a new

00:07:29,630 --> 00:07:33,139
searcher it has to build up this data

00:07:31,610 --> 00:07:34,669
structure because your entire index from

00:07:33,139 --> 00:07:37,639
its perspective because its global has

00:07:34,669 --> 00:07:39,530
changed when you do it per segment you

00:07:37,639 --> 00:07:42,289
have less work you have to do so in

00:07:39,530 --> 00:07:43,879
theory this is a little faster in the

00:07:42,289 --> 00:07:45,379
near real-time case where you're

00:07:43,879 --> 00:07:47,690
constantly updating documents and

00:07:45,379 --> 00:07:49,759
constantly reopening searchers but

00:07:47,690 --> 00:07:51,949
there's an overhead to that right it's

00:07:49,759 --> 00:07:54,319
it's faster on the updates it's faster

00:07:51,949 --> 00:07:56,479
to reopen the searchers but it has more

00:07:54,319 --> 00:07:58,580
logic it has to do to merge those counts

00:07:56,479 --> 00:08:00,860
right if you're fascinating on category

00:07:58,580 --> 00:08:03,080
and it wants to know well what is the

00:08:00,860 --> 00:08:05,120
top category is animals the top category

00:08:03,080 --> 00:08:06,710
or sports the top category it has to

00:08:05,120 --> 00:08:08,900
look at it per segment and then it has

00:08:06,710 --> 00:08:10,340
to accumulate all those counts whereas

00:08:08,900 --> 00:08:12,469
if it does it globally it's got this

00:08:10,340 --> 00:08:14,539
sort of one set up operation to build

00:08:12,469 --> 00:08:16,969
this field cash and then it could just

00:08:14,539 --> 00:08:18,949
do a simple scan right so that's why

00:08:16,969 --> 00:08:20,750
this is the default because even even in

00:08:18,949 --> 00:08:23,210
real-time cases sometimes it's still

00:08:20,750 --> 00:08:25,759
faster depending on the volume of data

00:08:23,210 --> 00:08:26,810
you're dealing with so while this is the

00:08:25,759 --> 00:08:29,000
default that works for a lot of people

00:08:26,810 --> 00:08:31,130
it's definitely worth experimenting and

00:08:29,000 --> 00:08:33,620
changing it to FCS and see if that helps

00:08:31,130 --> 00:08:35,839
you out a little bit better um more

00:08:33,620 --> 00:08:37,399
importantly though relatively recently

00:08:35,839 --> 00:08:39,919
in lucena solar is this concept called

00:08:37,399 --> 00:08:42,140
doc values if you are faceting and you

00:08:39,919 --> 00:08:44,660
are not using doc values you should

00:08:42,140 --> 00:08:46,940
totally go look in doc toys when you use

00:08:44,660 --> 00:08:49,459
doc values this is still a choice you

00:08:46,940 --> 00:08:52,579
can make doc values are inherently per

00:08:49,459 --> 00:08:54,290
segment but what solar will do if you

00:08:52,579 --> 00:08:56,630
are using the default option is it it

00:08:54,290 --> 00:08:59,120
builds a structure sort of on top of

00:08:56,630 --> 00:08:59,570
them right that structure takes a little

00:08:59,120 --> 00:09:01,010
bit of time

00:08:59,570 --> 00:09:04,190
I'm every time you open a searcher to

00:09:01,010 --> 00:09:06,170
build that but then it's very fast every

00:09:04,190 --> 00:09:07,670
time you facet but you might find that

00:09:06,170 --> 00:09:08,990
for your data for the volume of data

00:09:07,670 --> 00:09:10,790
you're dealing with for the rate of

00:09:08,990 --> 00:09:13,040
updates you're dealing with you would

00:09:10,790 --> 00:09:16,220
rather just use the doc values directly

00:09:13,040 --> 00:09:17,540
and pay that accumulation cost it's

00:09:16,220 --> 00:09:19,970
something to experiment with it's a

00:09:17,540 --> 00:09:22,880
performance related tuning knob but it's

00:09:19,970 --> 00:09:24,440
worth trying out I tried to write a blog

00:09:22,880 --> 00:09:26,420
post where I was like here is the

00:09:24,440 --> 00:09:28,730
perfect example of when it is worthwhile

00:09:26,420 --> 00:09:31,820
to use per segment stuff it was really

00:09:28,730 --> 00:09:33,770
hard I was in my head even knowing the

00:09:31,820 --> 00:09:35,450
code I was like here's an example of

00:09:33,770 --> 00:09:37,400
where this will be so much faster that I

00:09:35,450 --> 00:09:39,530
can just show it trivially in a blog

00:09:37,400 --> 00:09:41,690
post and I couldn't do it and then I

00:09:39,530 --> 00:09:43,040
tried again and I couldn't do it and as

00:09:41,690 --> 00:09:44,000
I got you know what I'm gonna give up on

00:09:43,040 --> 00:09:45,860
this book because even I don't even

00:09:44,000 --> 00:09:48,260
understand anymore so there's a lot of

00:09:45,860 --> 00:09:50,420
theories to win this is faster but just

00:09:48,260 --> 00:09:52,730
try it see usually use real data use

00:09:50,420 --> 00:09:55,130
real queries see what happens okay the

00:09:52,730 --> 00:09:56,570
third option remember we're talking

00:09:55,130 --> 00:09:58,550
about this is the parameter that you can

00:09:56,570 --> 00:10:02,000
change these are the values the third

00:09:58,550 --> 00:10:03,710
one is inu inu ms a very historical old

00:10:02,000 --> 00:10:05,330
school it was the original fastening

00:10:03,710 --> 00:10:09,320
method that we implemented in solar back

00:10:05,330 --> 00:10:11,960
in 2005-2006 I remember instead of using

00:10:09,320 --> 00:10:14,420
the field cash it actually iterates over

00:10:11,960 --> 00:10:16,130
the terms and your index and it builds a

00:10:14,420 --> 00:10:17,870
query and execute that query and it

00:10:16,130 --> 00:10:20,840
counts the results and it all of this

00:10:17,870 --> 00:10:22,220
can go in the filter cash right who here

00:10:20,840 --> 00:10:28,760
knows what I mean when I said field cash

00:10:22,220 --> 00:10:30,500
versus filter cash ah crap okay so the

00:10:28,760 --> 00:10:31,610
field cash is what's used for sorting I

00:10:30,500 --> 00:10:33,140
should probably should mention that

00:10:31,610 --> 00:10:37,370
before field caches what's used for

00:10:33,140 --> 00:10:39,890
sorting it is basically an uninvited

00:10:37,370 --> 00:10:42,290
index right it lets you do very fast

00:10:39,890 --> 00:10:44,810
lookups from documents to values right

00:10:42,290 --> 00:10:46,520
that's the field cash it's / field the

00:10:44,810 --> 00:10:48,830
filter cash is what happens when you

00:10:46,520 --> 00:10:53,480
filter results so when you say find me

00:10:48,830 --> 00:10:55,790
all products matching iPhone made by and

00:10:53,480 --> 00:10:56,930
manufacturer Apple that's a scoring base

00:10:55,790 --> 00:10:58,720
query but then you could have put a

00:10:56,930 --> 00:11:01,220
filter on it you could say and price

00:10:58,720 --> 00:11:03,590
less than two hundred dollars and those

00:11:01,220 --> 00:11:05,090
can be cashed independently in this in

00:11:03,590 --> 00:11:07,340
this special cash that we call the

00:11:05,090 --> 00:11:09,860
filter cash right so when you specify

00:11:07,340 --> 00:11:11,240
the enum option for faceting it's going

00:11:09,860 --> 00:11:13,010
to leverage that same cash and it's

00:11:11,240 --> 00:11:14,990
basically under the covers

00:11:13,010 --> 00:11:16,430
filtering it's taking whatever your

00:11:14,990 --> 00:11:18,680
query was and then you say i want to

00:11:16,430 --> 00:11:20,480
facet on the category field it's going

00:11:18,680 --> 00:11:22,670
to take your query and under the covers

00:11:20,480 --> 00:11:25,280
it's going to imagine that you have then

00:11:22,670 --> 00:11:26,930
filtered on every possible category and

00:11:25,280 --> 00:11:29,840
it's going to find all those docs and

00:11:26,930 --> 00:11:32,270
give you back the FAFSA counts this was

00:11:29,840 --> 00:11:34,550
like I say this is the old old version

00:11:32,270 --> 00:11:37,340
it wasn't super efficient that's why we

00:11:34,550 --> 00:11:39,740
came up with the FCN FCS methods but it

00:11:37,340 --> 00:11:42,230
has two very powerful use cases right

00:11:39,740 --> 00:11:45,380
one is where the cardinality of your

00:11:42,230 --> 00:11:47,180
data is very small boolean fields for

00:11:45,380 --> 00:11:49,100
example if you have bullion's and you

00:11:47,180 --> 00:11:51,020
want to fast it on them we still use

00:11:49,100 --> 00:11:54,290
this method because there's only two

00:11:51,020 --> 00:11:56,360
sets right enumerated the two boolean

00:11:54,290 --> 00:11:59,450
values and generated in those queries is

00:11:56,360 --> 00:12:01,550
really quick and if you ever filter on

00:11:59,450 --> 00:12:04,070
one of them odds are you have a fifty

00:12:01,550 --> 00:12:05,780
percent chance that you'll reuse one of

00:12:04,070 --> 00:12:07,040
those filters so there's no I mean it's

00:12:05,780 --> 00:12:08,420
like we might as well because most of

00:12:07,040 --> 00:12:10,070
the time when people want to fast it on

00:12:08,420 --> 00:12:11,930
something later they're going to go okay

00:12:10,070 --> 00:12:13,520
now I know what the top categories are

00:12:11,930 --> 00:12:15,980
what the top values are in this field

00:12:13,520 --> 00:12:17,960
now I want to filter on so it comes in

00:12:15,980 --> 00:12:20,420
very handy for this small cardinality

00:12:17,960 --> 00:12:22,010
use case boolean is an example somebody

00:12:20,420 --> 00:12:23,120
I know because of the volume of their

00:12:22,010 --> 00:12:26,300
data they found that when they were

00:12:23,120 --> 00:12:28,160
faceting on a state field in the US we

00:12:26,300 --> 00:12:29,690
have you know there's 50 states he had a

00:12:28,160 --> 00:12:31,880
state field in his data and he wanted to

00:12:29,690 --> 00:12:34,790
fast it on that he found that this was

00:12:31,880 --> 00:12:36,590
faster for his data the other end of the

00:12:34,790 --> 00:12:39,200
spectrum is when you have huge

00:12:36,590 --> 00:12:41,900
cardinality fields people like to try

00:12:39,200 --> 00:12:44,180
and build tag clouds by faceting on full

00:12:41,900 --> 00:12:46,400
text right so they index the

00:12:44,180 --> 00:12:48,020
encyclopedias of the world and then they

00:12:46,400 --> 00:12:50,030
want to build a tag cloud and they

00:12:48,020 --> 00:12:52,160
discover the faceting rolls over and

00:12:50,030 --> 00:12:54,380
dies because there's too much ram you

00:12:52,160 --> 00:12:57,380
can use the EMU method and it will be

00:12:54,380 --> 00:12:59,900
slow because its enumerated over every

00:12:57,380 --> 00:13:02,330
term but it is possible and there are

00:12:59,900 --> 00:13:04,820
options this is called facet inu cash

00:13:02,330 --> 00:13:07,460
Mindy f Mindy F refers to the minimum

00:13:04,820 --> 00:13:09,320
doc frequency this is a way of telling

00:13:07,460 --> 00:13:11,300
it while you're enumerated all over all

00:13:09,320 --> 00:13:13,160
of those terms the ones that are like

00:13:11,300 --> 00:13:15,680
trivially minor and like appear in three

00:13:13,160 --> 00:13:18,230
docs throw them away forget all about

00:13:15,680 --> 00:13:20,720
them don't bother to catch that this is

00:13:18,230 --> 00:13:22,370
how big this is how many documents that

00:13:20,720 --> 00:13:24,950
term must appear in for me to care

00:13:22,370 --> 00:13:26,810
enough for you to keep track of that so

00:13:24,950 --> 00:13:29,450
it's a very slow way too fast

00:13:26,810 --> 00:13:31,160
hi cardinality terms that would never

00:13:29,450 --> 00:13:34,660
work if you tried to build the field

00:13:31,160 --> 00:13:36,830
cash on it does that make sense to folks

00:13:34,660 --> 00:13:37,940
cool all right does anybody have any

00:13:36,830 --> 00:13:39,620
questions about that we have a mic and

00:13:37,940 --> 00:13:41,060
we'll can do questions at the end but I

00:13:39,620 --> 00:13:42,980
always like to ask because it's there's

00:13:41,060 --> 00:13:44,270
like 15 topics in this talk so you're

00:13:42,980 --> 00:13:45,620
going to forget if you have a question

00:13:44,270 --> 00:13:52,100
just shout it out and I'll repeat it for

00:13:45,620 --> 00:13:53,720
people no okay so totally new topic this

00:13:52,100 --> 00:13:56,540
is like lightning talks but with one guy

00:13:53,720 --> 00:14:00,650
I love it except that it's me so I'm

00:13:56,540 --> 00:14:07,580
biased result clustering uh did anybody

00:14:00,650 --> 00:14:09,589
go to the randomized text to pause did

00:14:07,580 --> 00:14:11,690
anyone go to the randomized testing talk

00:14:09,589 --> 00:14:15,170
earlier today yes okay so the guy who

00:14:11,690 --> 00:14:17,089
gave the talk w he works for a group

00:14:15,170 --> 00:14:18,529
called carrot carrot does result

00:14:17,089 --> 00:14:21,080
clustering this is an example of what

00:14:18,529 --> 00:14:23,779
result question is it's kind of like the

00:14:21,080 --> 00:14:25,220
the term people I've seen used I don't

00:14:23,779 --> 00:14:27,500
know I've ever seen David refer to it

00:14:25,220 --> 00:14:29,810
this way is uh is dynamic fastening

00:14:27,500 --> 00:14:31,400
right the idea is you don't know what

00:14:29,810 --> 00:14:34,190
the fields are you don't know what the

00:14:31,400 --> 00:14:35,990
features of your data are so you want it

00:14:34,190 --> 00:14:38,570
to just kind of figure it out so this is

00:14:35,990 --> 00:14:40,490
an example using a ver oni diagram from

00:14:38,570 --> 00:14:42,800
their website if you go to carrot too if

00:14:40,490 --> 00:14:45,110
you search for something like law what

00:14:42,800 --> 00:14:47,270
it does is it actually looks in the

00:14:45,110 --> 00:14:49,820
summaries of all the documents and it

00:14:47,270 --> 00:14:51,770
finds common phrases things and it tries

00:14:49,820 --> 00:14:53,570
to figure out what the sort of

00:14:51,770 --> 00:14:55,280
categories might be this is kind of a

00:14:53,570 --> 00:14:56,960
classic machine learning problem where

00:14:55,280 --> 00:14:58,880
you bulk process all of your data and

00:14:56,960 --> 00:15:00,620
you know you use a classifier system on

00:14:58,880 --> 00:15:03,170
and it finds them and then you do text

00:15:00,620 --> 00:15:04,850
label and all that but what the what the

00:15:03,170 --> 00:15:06,410
result clustering component and solar is

00:15:04,850 --> 00:15:09,680
really good at is it does this on the

00:15:06,410 --> 00:15:10,580
fly with very small sets the the result

00:15:09,680 --> 00:15:13,070
clustering algorithm is sort of

00:15:10,580 --> 00:15:14,810
optimized for small sets so instead of

00:15:13,070 --> 00:15:16,550
doing it over your corpus of a million

00:15:14,810 --> 00:15:18,589
documents it does it over some

00:15:16,550 --> 00:15:20,780
configured number of the top matching

00:15:18,589 --> 00:15:22,790
results so if in solar you turn on the

00:15:20,780 --> 00:15:24,320
clustering component in addition to your

00:15:22,790 --> 00:15:26,180
regular results here's the top ten

00:15:24,320 --> 00:15:27,410
matches you'll get back some clustering

00:15:26,180 --> 00:15:29,779
information they'll say well i found a

00:15:27,410 --> 00:15:31,430
cluster and based on the the field you

00:15:29,779 --> 00:15:33,410
configured me to look at and find words

00:15:31,430 --> 00:15:36,410
from i found that the word environmental

00:15:33,410 --> 00:15:38,600
seemed to be an interesting word in the

00:15:36,410 --> 00:15:40,730
top results and here are the five

00:15:38,600 --> 00:15:42,230
documents that I found that

00:15:40,730 --> 00:15:45,139
seem to be related to environmental and

00:15:42,230 --> 00:15:47,149
then the next interesting result cluster

00:15:45,139 --> 00:15:50,060
that i found was these three documents

00:15:47,149 --> 00:15:51,260
with the words human rights okay so in

00:15:50,060 --> 00:15:53,029
the in the docs you can find some

00:15:51,260 --> 00:15:54,680
information how to configure this in the

00:15:53,029 --> 00:15:56,029
examples you can find an easy way to

00:15:54,680 --> 00:15:58,760
sort of turn this on with the solar

00:15:56,029 --> 00:16:00,260
example data and the example can fix and

00:15:58,760 --> 00:16:02,510
it will you'll be able to sort of run

00:16:00,260 --> 00:16:04,880
this and all of these labels are just

00:16:02,510 --> 00:16:06,740
coming from the body text that we've

00:16:04,880 --> 00:16:08,240
index basically right it's just sort of

00:16:06,740 --> 00:16:09,889
finding them and it's crunching this

00:16:08,240 --> 00:16:12,050
sort of i think it's i think by default

00:16:09,889 --> 00:16:13,399
it's the top 100 matches and it's saying

00:16:12,050 --> 00:16:16,430
where what what is interesting about

00:16:13,399 --> 00:16:18,829
this it's not the sort of bulk

00:16:16,430 --> 00:16:22,839
processing result cluster it's not the

00:16:18,829 --> 00:16:24,949
bulk it's not the bulk processing

00:16:22,839 --> 00:16:26,120
clustering algorithms that you might be

00:16:24,949 --> 00:16:28,220
used to if you come from a machine

00:16:26,120 --> 00:16:29,750
learning background they're modified

00:16:28,220 --> 00:16:33,320
versions of those designed more for

00:16:29,750 --> 00:16:35,839
smaller sets and speed right has anyone

00:16:33,320 --> 00:16:37,910
ever used this and solar yeah that's why

00:16:35,839 --> 00:16:39,170
it's an Oh awesome this is why it's a

00:16:37,910 --> 00:16:40,579
hidden gem because even I forget this

00:16:39,170 --> 00:16:41,420
sometimes people ask questions and I'll

00:16:40,579 --> 00:16:43,279
be trying to figure out how to solve

00:16:41,420 --> 00:16:45,410
their problem and like half an hour into

00:16:43,279 --> 00:16:46,430
it I'll be like oh wait duh we have the

00:16:45,410 --> 00:16:48,250
clustering now you know where the

00:16:46,430 --> 00:16:52,699
cluster Rica trip just turn this on

00:16:48,250 --> 00:16:53,959
alright so next topic because I like to

00:16:52,699 --> 00:16:56,329
cram a lot of stuff in and we're already

00:16:53,959 --> 00:16:58,880
halfway done function boosting and

00:16:56,329 --> 00:17:00,260
personalized scores okay this is a quick

00:16:58,880 --> 00:17:02,630
example of what I mean by function

00:17:00,260 --> 00:17:04,309
boosting this is actually two examples

00:17:02,630 --> 00:17:05,720
are similar but not exactly the same the

00:17:04,309 --> 00:17:07,459
first one is what most people are

00:17:05,720 --> 00:17:10,010
probably used to seeing this is a query

00:17:07,459 --> 00:17:11,480
for a couple words i'm using the eda

00:17:10,010 --> 00:17:13,610
smacks parser can be can anyone read

00:17:11,480 --> 00:17:15,230
this actually I'm sorry alright I just

00:17:13,610 --> 00:17:16,490
wanted to double check because I could

00:17:15,230 --> 00:17:18,620
read it but I'm also two feet away I

00:17:16,490 --> 00:17:20,510
don't know if you guys can read it but

00:17:18,620 --> 00:17:22,250
we're doing a sort of simple query using

00:17:20,510 --> 00:17:23,900
the EDA smacks parser and then we're

00:17:22,250 --> 00:17:26,390
applying a boost this is a sort of

00:17:23,900 --> 00:17:28,610
native feature of this parser that says

00:17:26,390 --> 00:17:31,760
I want to find results that match these

00:17:28,610 --> 00:17:34,100
words I want to have the scores involved

00:17:31,760 --> 00:17:36,799
in this match I want my tf-idf scoring

00:17:34,100 --> 00:17:39,020
and relevancy scoring to matter but I

00:17:36,799 --> 00:17:41,059
want to augment that because I know some

00:17:39,020 --> 00:17:43,070
stuff about my data I know that I have a

00:17:41,059 --> 00:17:45,260
field called popularity and the bigger

00:17:43,070 --> 00:17:47,900
that number is the better and I know I

00:17:45,260 --> 00:17:50,330
have a field called price and the lower

00:17:47,900 --> 00:17:52,940
that number is the better so i'm going

00:17:50,330 --> 00:17:54,590
to multiply by popularity / price oh

00:17:52,940 --> 00:17:56,990
wait but price

00:17:54,590 --> 00:17:59,150
zero so let's add one to it so I don't

00:17:56,990 --> 00:18:01,940
get a divide by zero error this is going

00:17:59,150 --> 00:18:04,490
to give me a number that I can boost my

00:18:01,940 --> 00:18:07,039
results by I'm not ignoring my score

00:18:04,490 --> 00:18:08,570
relevancy is still a factor here but I

00:18:07,039 --> 00:18:11,929
am boosting by this function it's going

00:18:08,570 --> 00:18:15,350
to multiply in okay this is the same

00:18:11,929 --> 00:18:16,940
basic example but where this uses a

00:18:15,350 --> 00:18:19,640
special boost parameter which is a

00:18:16,940 --> 00:18:21,610
feature of the EDA smacks parser this is

00:18:19,640 --> 00:18:23,870
using as an inline parser called

00:18:21,610 --> 00:18:25,669
coincidentally the boost corey parser

00:18:23,870 --> 00:18:28,340
which works very similar it takes in a

00:18:25,669 --> 00:18:30,529
function I'm passing it through a custom

00:18:28,340 --> 00:18:32,419
variable name that I've declared I'm

00:18:30,529 --> 00:18:35,659
going to use the same function but then

00:18:32,419 --> 00:18:37,580
my query comes from another custom query

00:18:35,659 --> 00:18:39,529
parameter and I can use any parser I

00:18:37,580 --> 00:18:41,149
want here this is the leucine query

00:18:39,529 --> 00:18:43,460
parser by default using the leucine

00:18:41,149 --> 00:18:45,080
syntax with field names and and I had a

00:18:43,460 --> 00:18:48,380
plus here and I've gotten using quotes

00:18:45,080 --> 00:18:50,210
so boosting is a very general concept

00:18:48,380 --> 00:18:51,380
you might be familiar with it from the

00:18:50,210 --> 00:18:53,750
EDA smacks parser but it's a very

00:18:51,380 --> 00:18:55,880
general thing that can be done any query

00:18:53,750 --> 00:18:58,490
can be wrapped in this boost query

00:18:55,880 --> 00:19:00,440
parser to apply some custom functions

00:18:58,490 --> 00:19:02,990
like that okay if you go to my website

00:19:00,440 --> 00:19:06,020
two years ago when Apache Khanna was in

00:19:02,990 --> 00:19:08,659
sin time I gave a full hour talk on like

00:19:06,020 --> 00:19:09,770
boosting functions which I think you

00:19:08,659 --> 00:19:11,210
might want to check out if this is

00:19:09,770 --> 00:19:13,100
interesting to you does this make sense

00:19:11,210 --> 00:19:14,779
to folks that you can multiply things

00:19:13,100 --> 00:19:16,399
into the score are the people here

00:19:14,779 --> 00:19:17,899
already doing this you're already doing

00:19:16,399 --> 00:19:20,240
this raise your hand because you went to

00:19:17,899 --> 00:19:21,890
my other talk didn't you oh alright i

00:19:20,240 --> 00:19:24,679
was gonna all right but a couple other

00:19:21,890 --> 00:19:26,020
people are is anybody totally lost no

00:19:24,679 --> 00:19:27,890
one else will see you but me I promise

00:19:26,020 --> 00:19:30,350
all right nobody's totally lost that's

00:19:27,890 --> 00:19:32,270
fine so this guy Amit who's on the solar

00:19:30,350 --> 00:19:33,919
mailing list he went to my talking since

00:19:32,270 --> 00:19:36,200
I'm where I was talking about boosting

00:19:33,919 --> 00:19:37,100
functions and I gave it a crazy example

00:19:36,200 --> 00:19:38,899
of something that I thought people

00:19:37,100 --> 00:19:40,100
should do and I was like this is awesome

00:19:38,899 --> 00:19:42,169
I've never done this but people should

00:19:40,100 --> 00:19:43,490
totally check it out and he was walked

00:19:42,169 --> 00:19:44,840
out of that talk and then a month later

00:19:43,490 --> 00:19:46,159
he emailed me he's like hey I've been

00:19:44,840 --> 00:19:47,899
doing that it's really awesome like can

00:19:46,159 --> 00:19:51,200
you sanity check something for me what

00:19:47,899 --> 00:19:53,419
he's doing is he's using offline machine

00:19:51,200 --> 00:19:55,399
learning algorithms to crunch user

00:19:53,419 --> 00:19:57,080
preferences right i think if i remember

00:19:55,399 --> 00:19:59,029
right his use cases specifically movies

00:19:57,080 --> 00:20:01,250
right he works for a movie management

00:19:59,029 --> 00:20:02,480
site so it's like imagine it's netflix

00:20:01,250 --> 00:20:03,590
but he doesn't work for netflix i never

00:20:02,480 --> 00:20:05,929
said he works for Netflix you can't

00:20:03,590 --> 00:20:07,549
prove it um he'd know he doesn't

00:20:05,929 --> 00:20:08,330
actually I don't remember where I wish I

00:20:07,549 --> 00:20:10,789
did but

00:20:08,330 --> 00:20:12,860
uh but he crunches uh it's like shows

00:20:10,789 --> 00:20:14,720
right I went to this show and then he

00:20:12,860 --> 00:20:16,159
looks at the metadata that show and he

00:20:14,720 --> 00:20:19,340
tries to figure out based on the shows

00:20:16,159 --> 00:20:21,950
you go two and the categories associated

00:20:19,340 --> 00:20:23,390
with those shows what categories do you

00:20:21,950 --> 00:20:25,700
seem to like right this is a very

00:20:23,390 --> 00:20:27,890
classic kind of man out problem you come

00:20:25,700 --> 00:20:29,149
up with vectors of well he seems to

00:20:27,890 --> 00:20:31,159
really like comedy and he seems to

00:20:29,149 --> 00:20:32,659
really like what are my examples here he

00:20:31,159 --> 00:20:34,789
likes comedy nee likes action but he's

00:20:32,659 --> 00:20:37,909
never gone to a kids movie so compared

00:20:34,789 --> 00:20:39,890
to the average person his preferences

00:20:37,909 --> 00:20:42,169
seem to be more towards action and

00:20:39,890 --> 00:20:43,700
comedy he's got a positive score on

00:20:42,169 --> 00:20:46,460
action and comedy and a negative score

00:20:43,700 --> 00:20:48,350
on children's stuff right so he computes

00:20:46,460 --> 00:20:50,600
a z-score a normalized score for

00:20:48,350 --> 00:20:53,120
everybody across the entire data set he

00:20:50,600 --> 00:20:55,130
puts that into a quick key-value look up

00:20:53,120 --> 00:20:56,929
system and then when a user comes to his

00:20:55,130 --> 00:20:59,269
site he does that quick look up and says

00:20:56,929 --> 00:21:01,070
what are their three most significant

00:20:59,269 --> 00:21:02,330
scores either positive or negative what

00:21:01,070 --> 00:21:04,309
are the things they either like the most

00:21:02,330 --> 00:21:06,980
or hate the most and then he plugs them

00:21:04,309 --> 00:21:09,019
into this custom query function which

00:21:06,980 --> 00:21:11,659
says take the score of my query using

00:21:09,019 --> 00:21:12,860
tf-idf if i don't know anything about

00:21:11,659 --> 00:21:14,330
the user these numbers are just going to

00:21:12,860 --> 00:21:16,399
be 0 and they're just going to drop out

00:21:14,330 --> 00:21:17,899
but if i do what i'm going to have is

00:21:16,399 --> 00:21:20,690
i'm going to have three categories that

00:21:17,899 --> 00:21:23,659
i can execute as queries and i'm going

00:21:20,690 --> 00:21:26,000
to have three zeen or moist preference

00:21:23,659 --> 00:21:27,649
values for each of those queries which I

00:21:26,000 --> 00:21:30,799
can use as a power function on them

00:21:27,649 --> 00:21:33,639
right an exponential so I'm going to say

00:21:30,799 --> 00:21:36,200
well how much did he like action movies

00:21:33,639 --> 00:21:38,630
to the power of how much you liked it

00:21:36,200 --> 00:21:41,090
times how much you liked comedies to

00:21:38,630 --> 00:21:42,529
that exponent times how much like kids

00:21:41,090 --> 00:21:44,659
to the negative exponent which means

00:21:42,529 --> 00:21:47,059
it's basically dividing by that multiply

00:21:44,659 --> 00:21:49,279
all that up by the score so he's now got

00:21:47,059 --> 00:21:51,860
a very personalized custom scoring

00:21:49,279 --> 00:21:54,350
function that isn't ignoring relevancy

00:21:51,860 --> 00:21:56,330
it isn't ignoring tf-idf and it works

00:21:54,350 --> 00:21:59,169
great even if it's a totally random user

00:21:56,330 --> 00:22:01,700
this just all drops out it's just one

00:21:59,169 --> 00:22:04,070
but now he's got the ability to say

00:22:01,700 --> 00:22:05,510
based on what you've seen I know you're

00:22:04,070 --> 00:22:07,970
probably going to like these movies a

00:22:05,510 --> 00:22:10,460
little better right does that make sense

00:22:07,970 --> 00:22:12,080
to folks it's really powerful really

00:22:10,460 --> 00:22:13,970
easy i mean it's like i say he's like

00:22:12,080 --> 00:22:15,440
the hardest part was he was like trying

00:22:13,970 --> 00:22:16,970
to debate should i multiply or should i

00:22:15,440 --> 00:22:18,799
add you know it's like just try it find

00:22:16,970 --> 00:22:22,220
it but plugging these functions in is

00:22:18,799 --> 00:22:27,169
really simple okay all right

00:22:22,220 --> 00:22:31,010
totally new topic bah um depends but

00:22:27,169 --> 00:22:32,570
doing this depends those are two totally

00:22:31,010 --> 00:22:34,549
different words and I just made them one

00:22:32,570 --> 00:22:35,929
word which in America would be a really

00:22:34,549 --> 00:22:38,990
funny joke but I don't think you guys

00:22:35,929 --> 00:22:43,700
have depends here defaults appends

00:22:38,990 --> 00:22:45,919
invariance oh my a common complaint that

00:22:43,700 --> 00:22:47,690
I've heard about solar which just makes

00:22:45,919 --> 00:22:50,450
me shake my head and go really like

00:22:47,690 --> 00:22:54,110
that's your complaint is that my URLs

00:22:50,450 --> 00:22:55,460
are really long I have a query and I

00:22:54,110 --> 00:22:58,159
have a query parser and have the fields

00:22:55,460 --> 00:22:59,659
I want and my URLs really long well of

00:22:58,159 --> 00:23:01,669
course your euros are really long and of

00:22:59,659 --> 00:23:02,929
course this is hard to read because you

00:23:01,669 --> 00:23:04,909
don't want to put all that in the query

00:23:02,929 --> 00:23:06,710
something that Solar's had since the day

00:23:04,909 --> 00:23:08,840
I pretty sure since the day we open

00:23:06,710 --> 00:23:10,909
sourced it was the ability to say in

00:23:08,840 --> 00:23:14,539
your configuration file I want some

00:23:10,909 --> 00:23:15,770
defaults because ninety percent ninety

00:23:14,539 --> 00:23:18,380
percent of what you see here never

00:23:15,770 --> 00:23:19,820
changes in development you might type

00:23:18,380 --> 00:23:21,289
this out or cut and paste it you might

00:23:19,820 --> 00:23:22,760
try it out you might play around with

00:23:21,289 --> 00:23:24,440
what boosts you want what fields you

00:23:22,760 --> 00:23:26,000
want and you might say oh I totally

00:23:24,440 --> 00:23:27,950
forgot i also need to ask for the title

00:23:26,000 --> 00:23:29,510
field but once you get that going you're

00:23:27,950 --> 00:23:30,650
never going to change that again right

00:23:29,510 --> 00:23:33,860
you're never going to change this in

00:23:30,650 --> 00:23:35,840
production so you have defaults in your

00:23:33,860 --> 00:23:38,299
configuration file you can say when a

00:23:35,840 --> 00:23:40,340
query comes in all I really need to know

00:23:38,299 --> 00:23:41,330
is the query string all I really need to

00:23:40,340 --> 00:23:43,460
know is they're searching for nightfall

00:23:41,330 --> 00:23:46,039
by Isaac Asimov and all of this other

00:23:43,460 --> 00:23:47,210
crap just stays the same it's a default

00:23:46,039 --> 00:23:49,159
if they really want to change it they

00:23:47,210 --> 00:23:50,450
can but by default they're going to ask

00:23:49,159 --> 00:23:51,710
for the first page they're going to ask

00:23:50,450 --> 00:23:53,299
for a hundred rose we're going to filter

00:23:51,710 --> 00:23:54,799
by in stock this is the fields I'm going

00:23:53,299 --> 00:23:55,909
to return to them I'm going to sort by

00:23:54,799 --> 00:23:57,409
score and then I'm gonna have a

00:23:55,909 --> 00:23:59,419
secondary sort by price none of that

00:23:57,409 --> 00:24:03,200
changes you can default all of that on

00:23:59,419 --> 00:24:05,539
top of that though is this concept of

00:24:03,200 --> 00:24:06,860
appending and invariant parameters if we

00:24:05,539 --> 00:24:08,840
read up from the bottom these are our

00:24:06,860 --> 00:24:10,640
defaults write this is a section called

00:24:08,840 --> 00:24:13,669
defaults we said we're going to default

00:24:10,640 --> 00:24:14,870
to page 0 these are our field list but

00:24:13,669 --> 00:24:17,179
we're also going to have this depends

00:24:14,870 --> 00:24:19,130
this is similar to a default right I'm a

00:24:17,179 --> 00:24:21,200
pending a filter query on the in stock

00:24:19,130 --> 00:24:22,880
field it's similar to a default but if

00:24:21,200 --> 00:24:25,370
they give me other filters if they say

00:24:22,880 --> 00:24:27,740
filter by the action category or filter

00:24:25,370 --> 00:24:29,870
by mysteries they're still also going to

00:24:27,740 --> 00:24:32,270
get this filter for in-stock this is

00:24:29,870 --> 00:24:34,010
handy is sort of like a sanity check on

00:24:32,270 --> 00:24:35,929
your data you might be indexing all of

00:24:34,010 --> 00:24:37,940
your data because tools

00:24:35,929 --> 00:24:39,919
query it but when your front end queries

00:24:37,940 --> 00:24:41,509
it you always only want them to know

00:24:39,919 --> 00:24:44,029
what do I actually have in stock what's

00:24:41,509 --> 00:24:45,529
actually for sale okay so you want that

00:24:44,029 --> 00:24:47,899
to apply in addition to the stuff they

00:24:45,529 --> 00:24:49,340
tell you this third section here is

00:24:47,899 --> 00:24:52,279
called invariance these are things that

00:24:49,340 --> 00:24:54,649
no matter what can't be changed right in

00:24:52,279 --> 00:24:56,960
this case they can override it in this

00:24:54,649 --> 00:24:58,669
case they can append to it but in this

00:24:56,960 --> 00:25:00,740
case nothing they can do can change this

00:24:58,669 --> 00:25:03,019
they're always going to get only a

00:25:00,740 --> 00:25:04,639
hundred Doc's per page right they're

00:25:03,019 --> 00:25:06,740
always going to get sorted by score

00:25:04,639 --> 00:25:08,029
we're always going to boost by these

00:25:06,740 --> 00:25:09,649
functions they're always going to get

00:25:08,029 --> 00:25:11,480
the EDA smacks parser these are

00:25:09,649 --> 00:25:13,340
invariants that you're enforcing on all

00:25:11,480 --> 00:25:14,629
of your clients you don't have to force

00:25:13,340 --> 00:25:17,450
them on all of your clients though

00:25:14,629 --> 00:25:19,730
because this is still / handler here is

00:25:17,450 --> 00:25:21,679
our select handler you can have 50

00:25:19,730 --> 00:25:23,330
handlers configured if you want you can

00:25:21,679 --> 00:25:24,649
say for this client i'm going to create

00:25:23,330 --> 00:25:26,869
a custom handler i'm going to tell them

00:25:24,649 --> 00:25:28,820
you query with this URL you've got all

00:25:26,869 --> 00:25:30,679
of that configured later you can change

00:25:28,820 --> 00:25:32,090
that out from under them if you want if

00:25:30,679 --> 00:25:34,909
you decide that your front end should

00:25:32,090 --> 00:25:36,740
query / front end you declare a handle

00:25:34,909 --> 00:25:38,269
or name / front end you configure its

00:25:36,740 --> 00:25:39,980
defaults you can figure its invariance

00:25:38,269 --> 00:25:41,720
and then later you could say I you know

00:25:39,980 --> 00:25:43,730
what the front end does need to see

00:25:41,720 --> 00:25:45,950
products that aren't in stock so I need

00:25:43,730 --> 00:25:47,029
to remove that filter but your clients

00:25:45,950 --> 00:25:48,470
never have to know that you don't have

00:25:47,029 --> 00:25:52,340
to tell them go change all your queries

00:25:48,470 --> 00:25:53,899
right a lot of implementation details

00:25:52,340 --> 00:25:55,519
can be hidden there I'm not going to go

00:25:53,899 --> 00:25:56,509
through this example in depth it's like

00:25:55,519 --> 00:25:57,769
I said you can look at the slides a

00:25:56,509 --> 00:26:00,460
little later this uses something called

00:25:57,769 --> 00:26:03,529
the switch query parser which basically

00:26:00,460 --> 00:26:05,690
it's a way of doing case statements in a

00:26:03,529 --> 00:26:07,940
query parser right so I've got a very

00:26:05,690 --> 00:26:09,590
simple URL where I say I'm going to have

00:26:07,940 --> 00:26:11,119
a parameter called shipping and a

00:26:09,590 --> 00:26:12,740
parameter called cat these are not

00:26:11,119 --> 00:26:14,059
normal solar parameters solar would

00:26:12,740 --> 00:26:16,820
never normally know what to do with them

00:26:14,059 --> 00:26:18,529
but here without writing any code I've

00:26:16,820 --> 00:26:20,779
just configured some very basic logic

00:26:18,529 --> 00:26:22,669
that says you know I've got two

00:26:20,779 --> 00:26:25,159
different values that might be specified

00:26:22,669 --> 00:26:26,899
for shipping freedom members or what was

00:26:25,159 --> 00:26:28,340
the other one free or free to members or

00:26:26,899 --> 00:26:30,019
my two options and depending on which I

00:26:28,340 --> 00:26:31,700
get I'll have a completely different

00:26:30,019 --> 00:26:33,169
filter query and if I get neither of

00:26:31,700 --> 00:26:35,240
those i won't filter by anything i'll

00:26:33,169 --> 00:26:38,240
just match all docs and likewise on

00:26:35,240 --> 00:26:40,850
category if i get a name of a category i

00:26:38,240 --> 00:26:42,559
will filter on that my category field if

00:26:40,850 --> 00:26:44,240
I don't get that parameter I won't

00:26:42,559 --> 00:26:45,830
filter on anything this is something

00:26:44,240 --> 00:26:47,330
that's very simple to do it hides an

00:26:45,830 --> 00:26:48,830
implementation detail that your your

00:26:47,330 --> 00:26:49,539
clients never have to know how you're

00:26:48,830 --> 00:26:52,919
doing that under the

00:26:49,539 --> 00:26:52,919
covers yeah we have a question go ahead

00:26:59,129 --> 00:27:02,619
he's asking is this a form of

00:27:01,359 --> 00:27:04,960
implementing your encore pressure it's

00:27:02,619 --> 00:27:06,850
not just about the query parsing as much

00:27:04,960 --> 00:27:08,499
as it is about the configuration of

00:27:06,850 --> 00:27:10,269
things that might not be within a query

00:27:08,499 --> 00:27:12,369
parsing right the context of a query

00:27:10,269 --> 00:27:14,259
parser is either like the Q parameter

00:27:12,369 --> 00:27:16,690
the scoring part of the query or the

00:27:14,259 --> 00:27:18,190
filtering part of the query the appends

00:27:16,690 --> 00:27:19,899
and defaults and invariance they can be

00:27:18,190 --> 00:27:21,279
applied to any parameters whether

00:27:19,899 --> 00:27:23,109
they're used by the parser or whether

00:27:21,279 --> 00:27:24,879
they're used by the sorting you know

00:27:23,109 --> 00:27:27,129
things like that in the context

00:27:24,879 --> 00:27:29,649
specifically of this switch example yes

00:27:27,129 --> 00:27:32,169
you could write a custom query parser

00:27:29,649 --> 00:27:34,720
that does your special logic that says I

00:27:32,169 --> 00:27:36,099
know a word I'm going to expect and

00:27:34,720 --> 00:27:37,720
based on that I'm going to generate some

00:27:36,099 --> 00:27:39,669
complex query and you could write that a

00:27:37,720 --> 00:27:41,710
Java code absolutely that's kind of what

00:27:39,669 --> 00:27:43,090
I did with the switch parser I just

00:27:41,710 --> 00:27:45,789
implemented it in a way that it's very

00:27:43,090 --> 00:27:47,289
simple in a case statement so that you

00:27:45,789 --> 00:27:48,820
don't have to go write five lines of

00:27:47,289 --> 00:27:51,149
Java just for these kinds of examples

00:27:48,820 --> 00:27:55,179
but you certainly could to replace that

00:27:51,149 --> 00:27:57,279
okay the big takeaway here is this

00:27:55,179 --> 00:27:58,720
switch parser particular is not going to

00:27:57,279 --> 00:28:00,519
solve all your problems I mean that's

00:27:58,720 --> 00:28:02,739
why say you can always go do more custom

00:28:00,519 --> 00:28:05,379
solutions you can always go add your own

00:28:02,739 --> 00:28:06,580
rest proxy API in front of solar that

00:28:05,379 --> 00:28:09,340
implements all sorts of business logic

00:28:06,580 --> 00:28:11,559
if you want but for eighty percent of

00:28:09,340 --> 00:28:14,019
the use cases I've seen you can handle

00:28:11,559 --> 00:28:15,629
it through these handler configurations

00:28:14,019 --> 00:28:20,489
or through things like the switch parse

00:28:15,629 --> 00:28:22,869
that make sense to everybody ok cool so

00:28:20,489 --> 00:28:24,940
speaking of the query parsers and things

00:28:22,869 --> 00:28:27,489
that you can do with query parsers I

00:28:24,940 --> 00:28:29,109
talked about the leucine parser I talked

00:28:27,489 --> 00:28:30,940
about the e disse max parser we just saw

00:28:29,109 --> 00:28:33,029
an example of the switch query parser I

00:28:30,940 --> 00:28:36,549
also mentioned the boost parser before

00:28:33,029 --> 00:28:39,279
most people know these three let me see

00:28:36,549 --> 00:28:40,960
this max anita's max we've seen has the

00:28:39,279 --> 00:28:42,399
sort of canonical syntax people are used

00:28:40,960 --> 00:28:44,679
to with the plus and the minus in the

00:28:42,399 --> 00:28:46,330
ends and the oars and the quotes you

00:28:44,679 --> 00:28:50,499
know put parentheses around things to

00:28:46,330 --> 00:28:51,909
nest bullion's um dis max was a sort of

00:28:50,499 --> 00:28:53,799
simplified version of that that we came

00:28:51,909 --> 00:28:55,419
up with that I came up with and

00:28:53,799 --> 00:28:58,539
unfortunately unleashed on the world the

00:28:55,419 --> 00:29:01,149
sort of convolute stew ideas of building

00:28:58,539 --> 00:29:02,769
disjunction max queries which is a very

00:29:01,149 --> 00:29:03,130
complex topic that I don't have time to

00:29:02,769 --> 00:29:04,810
get into

00:29:03,130 --> 00:29:07,780
that exactly means but it's sort of

00:29:04,810 --> 00:29:10,030
convoluted building disjunctions over a

00:29:07,780 --> 00:29:13,060
simplified the syntax it tries to be

00:29:10,030 --> 00:29:15,640
smart and not allow you to do complex

00:29:13,060 --> 00:29:18,100
things like nesting parenthesis EDA

00:29:15,640 --> 00:29:20,320
smacks sort of tries to bridge the best

00:29:18,100 --> 00:29:22,960
of both worlds EDA smack says you can

00:29:20,320 --> 00:29:24,550
configure me like the dis max parser you

00:29:22,960 --> 00:29:27,040
can configure me to be a simplified

00:29:24,550 --> 00:29:28,360
syntax but if I see the full advanced

00:29:27,040 --> 00:29:30,880
syntax of leucine I'm going to do my

00:29:28,360 --> 00:29:33,550
best to make that work it doesn't always

00:29:30,880 --> 00:29:36,820
but it tries these are the parsers most

00:29:33,550 --> 00:29:39,250
solar users know about trying to figure

00:29:36,820 --> 00:29:41,710
how to word this question who here has

00:29:39,250 --> 00:29:45,130
used one who here is used two of these

00:29:41,710 --> 00:29:48,220
parsers before okay who's only used one

00:29:45,130 --> 00:29:49,630
of these pressures before Wow all right

00:29:48,220 --> 00:29:50,950
well more people raise their hands that

00:29:49,630 --> 00:29:52,210
they were using solar than raise their

00:29:50,950 --> 00:29:53,410
hands that they were using one of these

00:29:52,210 --> 00:29:54,940
parsers which means you're always there

00:29:53,410 --> 00:29:56,800
getting very tired or you're using solar

00:29:54,940 --> 00:29:58,480
in ways I have never seen before because

00:29:56,800 --> 00:30:00,880
somehow you are not using a clear one of

00:29:58,480 --> 00:30:02,260
these query partners but anyway these

00:30:00,880 --> 00:30:04,300
are the ones people tend to know about

00:30:02,260 --> 00:30:06,730
there's actually 10 more of them that

00:30:04,300 --> 00:30:10,030
people usually have never heard of right

00:30:06,730 --> 00:30:11,440
so um these are the full list of parsers

00:30:10,030 --> 00:30:15,370
that are in solar I'm not going to try

00:30:11,440 --> 00:30:17,050
and go into all of them the there are

00:30:15,370 --> 00:30:18,700
five of them that are bolded if you can

00:30:17,050 --> 00:30:20,320
believe that and clearly I should have

00:30:18,700 --> 00:30:22,080
used a different color we talked a

00:30:20,320 --> 00:30:25,120
little bit about the boost one before

00:30:22,080 --> 00:30:26,860
but there's also this simple parser

00:30:25,120 --> 00:30:29,500
which is really recently added which

00:30:26,860 --> 00:30:31,240
sort of tries to solve the best of both

00:30:29,500 --> 00:30:34,720
worlds of what EDA smacks does but

00:30:31,240 --> 00:30:36,730
doesn't add all the disjunction gunk the

00:30:34,720 --> 00:30:38,890
field parser and the term parser are

00:30:36,730 --> 00:30:41,260
very handy for when you don't want

00:30:38,890 --> 00:30:43,600
syntax at all you know you want to query

00:30:41,260 --> 00:30:46,420
a single field and you just want its

00:30:43,600 --> 00:30:48,400
analyzer to be used right there they're

00:30:46,420 --> 00:30:51,040
worth looking into the field one says I

00:30:48,400 --> 00:30:53,260
have a blob of text queried in this

00:30:51,040 --> 00:30:54,760
field whatever its analyzer is just make

00:30:53,260 --> 00:30:55,750
it work if it needs to be a phrase make

00:30:54,760 --> 00:30:59,230
it a phrase if it needs to be a

00:30:55,750 --> 00:31:02,680
tourniquet a term the term parser says I

00:30:59,230 --> 00:31:04,930
know this specific term is in my field I

00:31:02,680 --> 00:31:06,880
want it to work even if it has white

00:31:04,930 --> 00:31:08,620
spaces treated as one term the term

00:31:06,880 --> 00:31:10,000
parser if you're using faceting is

00:31:08,620 --> 00:31:12,100
almost always what you want to be using

00:31:10,000 --> 00:31:14,770
when you filter okay so definitely go

00:31:12,100 --> 00:31:17,020
look at that and then last the F range

00:31:14,770 --> 00:31:18,340
parser is a very handy little purse

00:31:17,020 --> 00:31:20,260
which says I'm going to generate a

00:31:18,340 --> 00:31:21,730
function right we looked at boost

00:31:20,260 --> 00:31:23,590
functions before I'm going to generate a

00:31:21,730 --> 00:31:26,350
function and I want you to filter on

00:31:23,590 --> 00:31:28,030
ranges of those functions right I'm

00:31:26,350 --> 00:31:29,770
going to I'm going to have a function

00:31:28,030 --> 00:31:31,780
which computes some sort of personalized

00:31:29,770 --> 00:31:33,480
metric and I want to filter on only

00:31:31,780 --> 00:31:37,120
things with the values between 0 and 100

00:31:33,480 --> 00:31:39,580
right the the use cases for them are

00:31:37,120 --> 00:31:40,900
honestly endless but I want a lot not a

00:31:39,580 --> 00:31:42,820
lot of people know about them and if

00:31:40,900 --> 00:31:44,260
nothing else go look into these five

00:31:42,820 --> 00:31:45,520
parsers and think to yourself would

00:31:44,260 --> 00:31:47,680
these be handy to me there's links to

00:31:45,520 --> 00:31:52,830
all this stuff in the end the slides

00:31:47,680 --> 00:31:52,830
yeah okay

00:32:04,730 --> 00:32:10,140
okay so her question her question was

00:32:07,490 --> 00:32:12,420
yeah yeah okay so a question where she's

00:32:10,140 --> 00:32:15,210
using EDA smacks right now and she'd

00:32:12,420 --> 00:32:16,320
like to wrap it in the boost parser but

00:32:15,210 --> 00:32:18,000
she's having trouble and finding that

00:32:16,320 --> 00:32:18,990
some of the features of the EDA smacks

00:32:18,000 --> 00:32:23,910
don't seem to work when it's wrapped

00:32:18,990 --> 00:32:25,650
their time check talk to me afterwards

00:32:23,910 --> 00:32:27,300
because I want to talk through that

00:32:25,650 --> 00:32:29,640
because it should work fine there are

00:32:27,300 --> 00:32:31,620
definitely the syntax definitely has its

00:32:29,640 --> 00:32:32,910
quirks I'm not gonna you know both smoke

00:32:31,620 --> 00:32:34,740
up your ass and tell you it's perfect

00:32:32,910 --> 00:32:37,230
it's not it's ugly it grew organically

00:32:34,740 --> 00:32:40,950
over time it should definitely be

00:32:37,230 --> 00:32:43,230
possible to make that all work it just

00:32:40,950 --> 00:32:44,370
may not be easy but it should be so

00:32:43,230 --> 00:32:46,080
which makes me think maybe there's some

00:32:44,370 --> 00:32:47,640
sort of simple obvious little mistake

00:32:46,080 --> 00:32:49,200
there so we can look at that all right

00:32:47,640 --> 00:32:52,890
I'm gonna go really quick hire cool

00:32:49,200 --> 00:32:55,290
documents also known as block join this

00:32:52,890 --> 00:32:57,120
is a relatively new feature solar you

00:32:55,290 --> 00:32:58,560
can basically think of it as saying you

00:32:57,120 --> 00:33:00,810
know in a classical hierarchy little

00:32:58,560 --> 00:33:02,760
document use cases I'm an index books

00:33:00,810 --> 00:33:04,620
and books consist of sections and

00:33:02,760 --> 00:33:06,510
sections consist of chapters and

00:33:04,620 --> 00:33:08,010
chapters consists of pages and I want to

00:33:06,510 --> 00:33:10,710
be able to do queries to say find me

00:33:08,010 --> 00:33:13,590
books where there is a section that

00:33:10,710 --> 00:33:15,450
contains a page which mentions Isaac

00:33:13,590 --> 00:33:17,760
Asimov and somewhere in that same

00:33:15,450 --> 00:33:19,590
section robert silverberg is mentioned

00:33:17,760 --> 00:33:21,060
that's the kind of example of

00:33:19,590 --> 00:33:22,980
hierarchical documents that you can sir

00:33:21,060 --> 00:33:26,490
to search for in this example I've said

00:33:22,980 --> 00:33:28,020
I've got a document which represents an

00:33:26,490 --> 00:33:31,650
album which is the Wayne's World

00:33:28,020 --> 00:33:34,530
soundtrack and in that soundtrack are

00:33:31,650 --> 00:33:36,540
many documents that represent songs and

00:33:34,530 --> 00:33:39,540
each of those songs has a name and an

00:33:36,540 --> 00:33:41,520
artist ok you can index this right now

00:33:39,540 --> 00:33:43,140
this is the XML example of indexing and

00:33:41,520 --> 00:33:45,180
solar you can do it in JSON you can do

00:33:43,140 --> 00:33:46,710
it using the Java API you can index

00:33:45,180 --> 00:33:48,330
these kinds of documents and all of the

00:33:46,710 --> 00:33:49,770
normal things you do with documents the

00:33:48,330 --> 00:33:51,630
normal types of queries you expect those

00:33:49,770 --> 00:33:53,370
still work you can still say ok go

00:33:51,630 --> 00:33:55,980
search for documents that contain

00:33:53,370 --> 00:33:58,860
soundtrack and I can filter by you know

00:33:55,980 --> 00:34:00,240
this is just a I've added a field here

00:33:58,860 --> 00:34:03,270
just for my own convenience called

00:34:00,240 --> 00:34:05,460
doctype so album versus song versus song

00:34:03,270 --> 00:34:07,590
you can still go say find me everything

00:34:05,460 --> 00:34:09,600
that matches soundtrack filtered by

00:34:07,590 --> 00:34:11,429
albums or find me everything that

00:34:09,600 --> 00:34:12,600
matches love filtered by songs you can

00:34:11,429 --> 00:34:14,820
go do those those are still normal

00:34:12,600 --> 00:34:16,230
documents like anything else but you can

00:34:14,820 --> 00:34:17,679
also do more interesting things where

00:34:16,230 --> 00:34:20,200
you're querying on the relation

00:34:17,679 --> 00:34:23,490
chips you can say find me documents

00:34:20,200 --> 00:34:26,829
matching love which are children of

00:34:23,490 --> 00:34:30,129
things that have doctype album which

00:34:26,829 --> 00:34:32,470
match soundtrack right so this is only

00:34:30,129 --> 00:34:34,809
love songs on soundtracks or you can say

00:34:32,470 --> 00:34:37,809
find me sound tracks which are parents

00:34:34,809 --> 00:34:39,190
of documents containing love the only

00:34:37,809 --> 00:34:41,260
thing that gets tricky here is you still

00:34:39,190 --> 00:34:42,879
in our example we only have one type of

00:34:41,260 --> 00:34:44,740
parent one type of child albums and

00:34:42,879 --> 00:34:46,389
songs but think back to that other

00:34:44,740 --> 00:34:47,980
example you could have many levels of

00:34:46,389 --> 00:34:51,339
this hierarchy you have to say which

00:34:47,980 --> 00:34:53,679
type of parent you want to be right I'm

00:34:51,339 --> 00:34:55,270
not just saying I want to find sound

00:34:53,679 --> 00:34:57,160
tracks which are songs which might be a

00:34:55,270 --> 00:34:58,359
parent of something else I'm saying I

00:34:57,160 --> 00:35:00,339
want to find sound tracks which are

00:34:58,359 --> 00:35:02,230
albums and those are parents of

00:35:00,339 --> 00:35:04,030
something which matches love this is all

00:35:02,230 --> 00:35:07,180
pretty straightforward it's very simple

00:35:04,030 --> 00:35:09,430
it works very elegantly the more

00:35:07,180 --> 00:35:13,000
complicated types of queries find me

00:35:09,430 --> 00:35:15,520
sound tracks which are a parent of songs

00:35:13,000 --> 00:35:18,609
that are by Alice Cooper but on that

00:35:15,520 --> 00:35:22,420
same soundtrack I must also find a song

00:35:18,609 --> 00:35:26,079
which is got it's a love song written by

00:35:22,420 --> 00:35:28,299
soundgarden ok so I'm finding the album

00:35:26,079 --> 00:35:30,849
the album criteria is that it must

00:35:28,299 --> 00:35:32,980
contain one or more songs which match

00:35:30,849 --> 00:35:34,900
two different criteria and it's got to

00:35:32,980 --> 00:35:37,059
be the same one this won't work if Alice

00:35:34,900 --> 00:35:38,890
Cooper wrote a love song and it's on an

00:35:37,059 --> 00:35:40,869
album which also contains Soundgarden it

00:35:38,890 --> 00:35:44,170
won't work you must find at least one

00:35:40,869 --> 00:35:45,970
which is Soundgarden and love and it

00:35:44,170 --> 00:35:47,950
must be in the same album as something

00:35:45,970 --> 00:35:49,660
by Alice Cooper write complex

00:35:47,950 --> 00:35:51,910
relationships are really easy to express

00:35:49,660 --> 00:35:53,440
here there are a lot of caveats to using

00:35:51,910 --> 00:35:55,329
block joins because it is relatively new

00:35:53,440 --> 00:35:57,970
I won't go into all the details but

00:35:55,329 --> 00:35:59,109
definitely some issues with how some of

00:35:57,970 --> 00:36:00,819
the relationships are managed when you

00:35:59,109 --> 00:36:02,890
start deleting things delete by ID in

00:36:00,819 --> 00:36:04,119
particular kind of goes nuts with this

00:36:02,890 --> 00:36:06,490
sort of situation because it doesn't

00:36:04,119 --> 00:36:07,869
understand the children and there's a

00:36:06,490 --> 00:36:10,030
you know some of these things are

00:36:07,869 --> 00:36:13,329
actually really simple and they're

00:36:10,030 --> 00:36:15,579
probably going to be in for dot nine but

00:36:13,329 --> 00:36:17,890
it's definitely there and then the last

00:36:15,579 --> 00:36:20,500
thing because I totally had time is

00:36:17,890 --> 00:36:21,970
update processors update processors are

00:36:20,500 --> 00:36:24,099
not well documented but there a way to

00:36:21,970 --> 00:36:26,470
say when a document gets added or

00:36:24,099 --> 00:36:28,329
updated in my index or when a commit

00:36:26,470 --> 00:36:30,579
happens I want certain logic to be

00:36:28,329 --> 00:36:31,540
applied there's a nice tool kit of very

00:36:30,579 --> 00:36:33,040
simple ones

00:36:31,540 --> 00:36:34,990
so here's an example where we've said if

00:36:33,040 --> 00:36:36,940
I'm doing books and books have authors

00:36:34,990 --> 00:36:39,460
and editors I want to synthetically

00:36:36,940 --> 00:36:40,990
create a field called contributors which

00:36:39,460 --> 00:36:42,940
is the list of all the authors and the

00:36:40,990 --> 00:36:44,410
editors but I also want to create a

00:36:42,940 --> 00:36:46,720
field called primary author which is

00:36:44,410 --> 00:36:48,940
whoever appears first in my author field

00:36:46,720 --> 00:36:50,260
right no code just some simple

00:36:48,940 --> 00:36:52,840
configuration of these sort of out of

00:36:50,260 --> 00:36:55,660
the box a little bits but it lets you do

00:36:52,840 --> 00:36:57,490
not's of field manipulations if you want

00:36:55,660 --> 00:36:58,810
to write code there's even one that says

00:36:57,490 --> 00:37:00,820
okay well give me a list of some

00:36:58,810 --> 00:37:01,930
JavaScript and in that JavaScript tell

00:37:00,820 --> 00:37:03,820
me what you want to do have whatever

00:37:01,930 --> 00:37:05,770
branching conditionals you want you have

00:37:03,820 --> 00:37:07,270
full access to the input document you

00:37:05,770 --> 00:37:09,010
can manipulate it any way you want and

00:37:07,270 --> 00:37:12,490
when you're done we'll go at it to the

00:37:09,010 --> 00:37:13,930
index okay that's all I've got so we've

00:37:12,490 --> 00:37:16,480
got time for questions we got one hand

00:37:13,930 --> 00:37:17,620
up just you know what just shout it out

00:37:16,480 --> 00:37:20,190
so that he doesn't have to run over

00:37:17,620 --> 00:37:20,190
there and I'll repeat it

00:37:34,000 --> 00:37:39,760
so his question was he's doing something

00:37:36,370 --> 00:37:41,490
very similar to this example but he's

00:37:39,760 --> 00:37:43,540
doing it through a java implementation

00:37:41,490 --> 00:37:45,010
your java implication is going to be

00:37:43,540 --> 00:37:46,360
faster than the script implementation

00:37:45,010 --> 00:37:48,670
like you don't need to like say oh I'm

00:37:46,360 --> 00:37:50,290
gonna stop the Java API for the update

00:37:48,670 --> 00:37:51,940
processor is very simple and it's not

00:37:50,290 --> 00:37:53,590
likely to change anytime soon so you're

00:37:51,940 --> 00:37:55,120
upgrading you're upgrading is going to

00:37:53,590 --> 00:37:56,590
be harder with a JavaScript one that it

00:37:55,120 --> 00:37:58,840
will ever be with Java because if the up

00:37:56,590 --> 00:38:00,850
if the API changes your Java will be a

00:37:58,840 --> 00:38:03,340
compile-time problems your JavaScript

00:38:00,850 --> 00:38:04,570
will be a runtime problem so your java

00:38:03,340 --> 00:38:06,250
if you've already written the java

00:38:04,570 --> 00:38:08,080
you're fine if you're a ruby guy and you

00:38:06,250 --> 00:38:10,210
don't ever want to touch java you can

00:38:08,080 --> 00:38:12,250
write this in Ruby write javascript is

00:38:10,210 --> 00:38:13,840
just the default example here but

00:38:12,250 --> 00:38:15,430
there's a way to say like hey John

00:38:13,840 --> 00:38:17,590
anything that anything that has an

00:38:15,430 --> 00:38:19,420
implementation that can run in the JVM

00:38:17,590 --> 00:38:21,790
as well as a they call it a script

00:38:19,420 --> 00:38:24,400
engine I've seen examples with Python

00:38:21,790 --> 00:38:25,960
JavaScript Ruby etc any of that stuff

00:38:24,400 --> 00:38:27,810
that you can write if you want to write

00:38:25,960 --> 00:38:31,690
some of these scripts solar can load it

00:38:27,810 --> 00:38:34,330
okay and fortunately we're out of time

00:38:31,690 --> 00:38:35,830
right we're totally out of time yeah I

00:38:34,330 --> 00:38:37,990
think we have time for one more question

00:38:35,830 --> 00:38:41,560
more one more question but I need to run

00:38:37,990 --> 00:38:44,220
these Mike oh he really just wants to

00:38:41,560 --> 00:38:46,150
exercise okay all right run run run I

00:38:44,220 --> 00:38:52,210
could have answered the question but now

00:38:46,150 --> 00:38:54,130
three four five again and we are using

00:38:52,210 --> 00:38:56,650
solar currently and we have already the

00:38:54,130 --> 00:38:59,140
discussion to use elasticsearch isola

00:38:56,650 --> 00:39:02,170
blah blah blah blah and the main

00:38:59,140 --> 00:39:05,080
technologies was seen and I'm currently

00:39:02,170 --> 00:39:08,350
syncing about and what is the right

00:39:05,080 --> 00:39:11,560
choice because many many RCM leucine

00:39:08,350 --> 00:39:14,530
developers are working at elasticsearch

00:39:11,560 --> 00:39:18,840
but contributing to leucine and to solar

00:39:14,530 --> 00:39:21,580
and this is some kind of interesting

00:39:18,840 --> 00:39:26,320
what would you think what's the best

00:39:21,580 --> 00:39:30,790
direction to go to solo elasticsearch um

00:39:26,320 --> 00:39:32,740
i mean i'm on this stage right i'm not

00:39:30,790 --> 00:39:35,050
i'm not on another stage giving a talk

00:39:32,740 --> 00:39:37,120
on hidden gems of elastic search so I

00:39:35,050 --> 00:39:38,590
think that gives you the I mean I'm just

00:39:37,120 --> 00:39:39,970
I'm not trying to be sorry guys but

00:39:38,590 --> 00:39:42,910
you're the end of your question was what

00:39:39,970 --> 00:39:45,640
do you think and I'm like well I mean it

00:39:42,910 --> 00:39:46,160
seems kind of obvious what I think what

00:39:45,640 --> 00:39:48,830
should you

00:39:46,160 --> 00:39:50,510
use is a much harder question because I

00:39:48,830 --> 00:39:51,650
want to be honest and to be honest I

00:39:50,510 --> 00:39:53,180
have to tell you I'm biased I'm not

00:39:51,650 --> 00:39:56,000
going to give you an impartial answer to

00:39:53,180 --> 00:39:58,430
that question I am NOT an elastic search

00:39:56,000 --> 00:39:59,660
expert so I can't tell you like these

00:39:58,430 --> 00:40:02,210
are the reasons why you should go use

00:39:59,660 --> 00:40:04,670
elastic search I can tell you that for

00:40:02,210 --> 00:40:07,720
me in 15 seconds which is not enough

00:40:04,670 --> 00:40:09,860
time to answer this question for me I

00:40:07,720 --> 00:40:12,710
fundamentally believe in the apache

00:40:09,860 --> 00:40:14,270
software foundation I think that it as a

00:40:12,710 --> 00:40:16,310
non-profit entity that has been around

00:40:14,270 --> 00:40:19,820
for like 15 years is never going

00:40:16,310 --> 00:40:21,200
anywhere I think that the code province

00:40:19,820 --> 00:40:22,700
and the ownership of the code and the

00:40:21,200 --> 00:40:24,830
existence of that foundation as the

00:40:22,700 --> 00:40:27,200
ownership my company could burn into a

00:40:24,830 --> 00:40:28,430
fireball tomorrow and solar still going

00:40:27,200 --> 00:40:29,900
to be around the community of solar

00:40:28,430 --> 00:40:31,420
still going to be around everything

00:40:29,900 --> 00:40:35,810
about solar is still going to be there

00:40:31,420 --> 00:40:37,610
that as a user is very important to me I

00:40:35,810 --> 00:40:39,590
have seen what happened to things like

00:40:37,610 --> 00:40:41,470
my sequel I have seen what happened to

00:40:39,590 --> 00:40:43,670
things like red hat i have seen even

00:40:41,470 --> 00:40:45,230
unfortunately this is even with apache

00:40:43,670 --> 00:40:48,410
but it sort of came into Apache and then

00:40:45,230 --> 00:40:49,520
came out of it the CouchDB fiasco you

00:40:48,410 --> 00:40:51,260
know that like I don't understand what

00:40:49,520 --> 00:40:53,840
happened there but at the end of the day

00:40:51,260 --> 00:40:55,370
couchdb is still there right it's still

00:40:53,840 --> 00:40:56,720
a de patchy no matter what happened to

00:40:55,370 --> 00:40:58,100
anybody else no matter what weird

00:40:56,720 --> 00:41:00,890
companies forked off of what weird

00:40:58,100 --> 00:41:02,600
companies it's still there but you know

00:41:00,890 --> 00:41:04,580
I look at you know I when I when I used

00:41:02,600 --> 00:41:06,770
to work with a my sequel and a lot I

00:41:04,580 --> 00:41:08,660
don't really anymore but when that all

00:41:06,770 --> 00:41:09,920
happened is like whole like how

00:41:08,660 --> 00:41:11,180
does this affect me like how does this

00:41:09,920 --> 00:41:13,640
affect my company how does this affect

00:41:11,180 --> 00:41:14,930
our access to the next version if the

00:41:13,640 --> 00:41:16,120
next version is going to be a totally

00:41:14,930 --> 00:41:19,190
different license than the last version

00:41:16,120 --> 00:41:22,250
as a user I know that's not going to

00:41:19,190 --> 00:41:23,690
happen right as an employee of

00:41:22,250 --> 00:41:26,120
lucidworks I can't tell you what lucid

00:41:23,690 --> 00:41:27,440
works is going to do tomorrow but I can

00:41:26,120 --> 00:41:29,540
tell you that the apache software

00:41:27,440 --> 00:41:32,150
foundation is still going to be here so

00:41:29,540 --> 00:41:34,150
that to me is more important than any of

00:41:32,150 --> 00:41:37,250
the sort of technical limitations as a

00:41:34,150 --> 00:41:38,930
novice of elastic search I haven't seen

00:41:37,250 --> 00:41:41,540
anything I mean I'm not gonna lie it's

00:41:38,930 --> 00:41:42,770
sexy like it looks sexy the API look

00:41:41,540 --> 00:41:44,960
sexy but I haven't seen anything where

00:41:42,770 --> 00:41:46,220
I'm like that'll never work in solar you

00:41:44,960 --> 00:41:48,380
know I've never seen anything I'm like

00:41:46,220 --> 00:41:49,610
we could never implement that what I've

00:41:48,380 --> 00:41:51,410
usually seen this stuff like oh yeah

00:41:49,610 --> 00:41:53,090
like we sort of do the same thing but we

00:41:51,410 --> 00:41:55,130
made different choices and we did it or

00:41:53,090 --> 00:41:56,840
you know ours evolved over five years

00:41:55,130 --> 00:41:58,670
and this was built from scratch and so

00:41:56,840 --> 00:41:59,960
ours has cruft that they don't because

00:41:58,670 --> 00:42:01,700
you know like like that but

00:41:59,960 --> 00:42:03,080
at the end of the day that doesn't work

00:42:01,700 --> 00:42:04,790
me up right it's not like oh we gotta go

00:42:03,080 --> 00:42:08,300
rewrite from scratch so that we match

00:42:04,790 --> 00:42:23,240
this API no I'm not but what makes sense

00:42:08,300 --> 00:42:27,349
to you I can't tell you preference yes

00:42:23,240 --> 00:42:29,300
oh don't don't even get me started on

00:42:27,349 --> 00:42:30,890
the whole like convention over code I'm

00:42:29,300 --> 00:42:33,710
not even gonna remotely I like

00:42:30,890 --> 00:42:35,690
configuration myself that's dirty word

00:42:33,710 --> 00:42:37,640
to say but I do and we have to go in

00:42:35,690 --> 00:42:39,349
fortunately I'm not yet we've got Mia if

00:42:37,640 --> 00:42:40,820
that is any need for religious war

00:42:39,349 --> 00:42:42,230
please outside of this room

00:42:40,820 --> 00:42:44,960
unfortunately we need to prepare this

00:42:42,230 --> 00:42:47,109
page for next speaker thank you very

00:42:44,960 --> 00:42:47,109

YouTube URL: https://www.youtube.com/watch?v=GHn_1DHVLBg


