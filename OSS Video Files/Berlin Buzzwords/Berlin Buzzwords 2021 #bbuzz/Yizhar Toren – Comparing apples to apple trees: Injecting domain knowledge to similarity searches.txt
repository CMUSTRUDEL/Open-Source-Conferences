Title: Yizhar Toren – Comparing apples to apple trees: Injecting domain knowledge to similarity searches
Publication date: 2021-06-24
Playlist: Berlin Buzzwords 2021 #bbuzz
Description: 
	Image & text similarity problems have plenty of textbook ML solutions. However in the wild, these solutions often fail. In this talk I'll present a use-case about inferring product similarity from multiple sources of data (images, text, etc) and discuss how we developed a practical & scalable approach using our understanding of domain knowledge.

Speaker:
Yizhar "Izzy" Toren – https://2021.berlinbuzzwords.de/member/yizhar-toren

More: https://2021.berlinbuzzwords.de/session/comparing-apples-apple-trees-injecting-domain-knowledge-similarity-searches
Captions: 
	00:00:08,240 --> 00:00:12,000
today i'll be talking to you about

00:00:10,160 --> 00:00:13,679
domain knowledge about similarity

00:00:12,000 --> 00:00:15,360
calculations how to combine them

00:00:13,679 --> 00:00:17,039
together and also how to

00:00:15,360 --> 00:00:20,240
integrate similarity from different

00:00:17,039 --> 00:00:21,840
sources in a hopefully a smart way

00:00:20,240 --> 00:00:23,840
so i'm not going to introduce myself too

00:00:21,840 --> 00:00:27,039
much you can find me

00:00:23,840 --> 00:00:29,039
on my webpage on twitter and linkedin

00:00:27,039 --> 00:00:30,640
and i don't think i need to introduce my

00:00:29,039 --> 00:00:31,840
employer too much especially after the

00:00:30,640 --> 00:00:34,960
last year

00:00:31,840 --> 00:00:36,480
shopify is basically an e-commerce giant

00:00:34,960 --> 00:00:38,559
powers a lot of businesses around the

00:00:36,480 --> 00:00:40,239
world it's a canadian company but

00:00:38,559 --> 00:00:41,760
there's a very strong presence here in

00:00:40,239 --> 00:00:43,440
berlin

00:00:41,760 --> 00:00:45,920
and since we are talking about

00:00:43,440 --> 00:00:48,800
e-commerce let's talk about products

00:00:45,920 --> 00:00:49,440
so can you tell me just by looking at

00:00:48,800 --> 00:00:51,039
these

00:00:49,440 --> 00:00:52,960
product images and you know the little

00:00:51,039 --> 00:00:54,879
descriptions um

00:00:52,960 --> 00:00:56,480
what makes all of these products

00:00:54,879 --> 00:00:58,320
essentially the same thing

00:00:56,480 --> 00:01:00,399
well it's it's pretty hard to tell we

00:00:58,320 --> 00:01:02,079
have this psychedelic giraffe here we

00:01:00,399 --> 00:01:03,920
have a lovely place in italy

00:01:02,079 --> 00:01:05,840
and a red umbrella in the middle of the

00:01:03,920 --> 00:01:07,760
street well

00:01:05,840 --> 00:01:09,280
if we start working on the data that we

00:01:07,760 --> 00:01:12,080
have so i don't know use some

00:01:09,280 --> 00:01:12,880
um you know out of the box and i'll pick

00:01:12,080 --> 00:01:14,320
it you can

00:01:12,880 --> 00:01:15,920
immediately find that there are some

00:01:14,320 --> 00:01:16,720
similarities in the descriptions

00:01:15,920 --> 00:01:18,880
although

00:01:16,720 --> 00:01:21,520
these descriptions again the case i was

00:01:18,880 --> 00:01:23,119
working on these are marketing texts

00:01:21,520 --> 00:01:24,560
not always even describe the product

00:01:23,119 --> 00:01:27,200
itself maybe more

00:01:24,560 --> 00:01:28,560
about the experience and branding um and

00:01:27,200 --> 00:01:29,439
if you want to work really really hard

00:01:28,560 --> 00:01:31,200
and process

00:01:29,439 --> 00:01:32,880
hundreds of millions of images through

00:01:31,200 --> 00:01:35,840
some deep network

00:01:32,880 --> 00:01:37,439
deep neural network um labeling effort

00:01:35,840 --> 00:01:39,200
you might be able to find some

00:01:37,439 --> 00:01:42,320
overlapping labels but

00:01:39,200 --> 00:01:43,280
this is not great and something like

00:01:42,320 --> 00:01:44,799
embedding

00:01:43,280 --> 00:01:46,079
just by looking at the images you can

00:01:44,799 --> 00:01:48,320
pretty much say that something like

00:01:46,079 --> 00:01:51,040
embedding without a lot of training

00:01:48,320 --> 00:01:51,360
um we're probably not going to work here

00:01:51,040 --> 00:01:53,759
so

00:01:51,360 --> 00:01:55,280
what is going to work well if you dig a

00:01:53,759 --> 00:01:57,200
little bit deeper so like i said these

00:01:55,280 --> 00:01:58,560
are the main product images

00:01:57,200 --> 00:02:00,560
all of these products have more than one

00:01:58,560 --> 00:02:03,439
image they have 3

00:02:00,560 --> 00:02:04,240
4 6 16 images in the background

00:02:03,439 --> 00:02:06,159
somewhere

00:02:04,240 --> 00:02:08,399
and each one of these products somewhere

00:02:06,159 --> 00:02:10,720
in the background had a version

00:02:08,399 --> 00:02:13,120
of one of these two images so all of

00:02:10,720 --> 00:02:15,120
these are pink by number products

00:02:13,120 --> 00:02:16,959
became super successful in terms of

00:02:15,120 --> 00:02:18,879
sales when the quarantine started

00:02:16,959 --> 00:02:20,080
and are still doing really really well

00:02:18,879 --> 00:02:21,520
so all of these

00:02:20,080 --> 00:02:23,440
again just by looking at the image you

00:02:21,520 --> 00:02:25,120
can't really say what it is but if you

00:02:23,440 --> 00:02:27,200
dig a little bit deeper and look at

00:02:25,120 --> 00:02:30,000
other images of the product

00:02:27,200 --> 00:02:31,599
you might be able to find the links so

00:02:30,000 --> 00:02:32,400
what kind of use case am i describing

00:02:31,599 --> 00:02:34,480
here so

00:02:32,400 --> 00:02:36,080
we have an entity of interest this can

00:02:34,480 --> 00:02:37,440
be something like a product this can be

00:02:36,080 --> 00:02:39,920
something like a user

00:02:37,440 --> 00:02:41,200
or a patient if you look at medical uh

00:02:39,920 --> 00:02:44,160
records

00:02:41,200 --> 00:02:46,160
and each one of these entities has some

00:02:44,160 --> 00:02:48,080
data items that are connected to it

00:02:46,160 --> 00:02:50,239
so in terms of products we talk about

00:02:48,080 --> 00:02:52,319
something like product reviews

00:02:50,239 --> 00:02:54,319
product images you know in terms of

00:02:52,319 --> 00:02:57,760
patients case notes

00:02:54,319 --> 00:02:59,680
test results imaging etc etc and

00:02:57,760 --> 00:03:01,200
where the main knowledge again in this

00:02:59,680 --> 00:03:03,599
example comes into play

00:03:01,200 --> 00:03:04,879
is the fact that all of these items are

00:03:03,599 --> 00:03:07,200
somehow linked through

00:03:04,879 --> 00:03:08,640
the entity that we're interested in now

00:03:07,200 --> 00:03:11,040
what we don't have

00:03:08,640 --> 00:03:11,920
and this is important what we don't have

00:03:11,040 --> 00:03:15,200
for this case

00:03:11,920 --> 00:03:18,239
is a natural way to somehow align

00:03:15,200 --> 00:03:19,840
or sort the items so if you think about

00:03:18,239 --> 00:03:22,560
something like um

00:03:19,840 --> 00:03:24,239
you know um stocks so you think about

00:03:22,560 --> 00:03:25,280
prices over time there is a natural way

00:03:24,239 --> 00:03:27,760
to align

00:03:25,280 --> 00:03:29,200
prices over time for each stock and if

00:03:27,760 --> 00:03:29,920
that was the case i would use something

00:03:29,200 --> 00:03:32,080
like you know

00:03:29,920 --> 00:03:33,760
time series clustering but here there is

00:03:32,080 --> 00:03:35,280
no natural way to order things we

00:03:33,760 --> 00:03:36,159
basically have to compare everything to

00:03:35,280 --> 00:03:38,879
everything

00:03:36,159 --> 00:03:39,680
or think about a way how do we calculate

00:03:38,879 --> 00:03:41,599
similarity

00:03:39,680 --> 00:03:42,959
on the item level and then aggregate it

00:03:41,599 --> 00:03:45,760
in a meaningful

00:03:42,959 --> 00:03:47,200
and also efficient and scalable way to

00:03:45,760 --> 00:03:48,879
what we actually want to know which is

00:03:47,200 --> 00:03:50,480
similarity between products or between

00:03:48,879 --> 00:03:54,080
users or between patients

00:03:50,480 --> 00:03:55,840
or whatever so what does

00:03:54,080 --> 00:03:57,840
domain knowledge in our case looks like

00:03:55,840 --> 00:03:59,200
like i said we know that products that

00:03:57,840 --> 00:04:01,360
sorry that images

00:03:59,200 --> 00:04:03,680
are connected to products and again i

00:04:01,360 --> 00:04:04,720
can work really really hard to say that

00:04:03,680 --> 00:04:07,760
two images

00:04:04,720 --> 00:04:10,560
of you know um an iphone cover

00:04:07,760 --> 00:04:11,040
and then a picture of a man speaking on

00:04:10,560 --> 00:04:12,799
the phone

00:04:11,040 --> 00:04:14,560
are related to the same product but i

00:04:12,799 --> 00:04:17,440
know this already this is something that

00:04:14,560 --> 00:04:19,280
our suppliers told me and if i see that

00:04:17,440 --> 00:04:21,199
product a and product b

00:04:19,280 --> 00:04:22,400
share an image again this doesn't have

00:04:21,199 --> 00:04:23,280
to be a you know one-to-many

00:04:22,400 --> 00:04:25,360
relationship

00:04:23,280 --> 00:04:27,280
but sharing image and product b and

00:04:25,360 --> 00:04:30,160
product c have two images that are

00:04:27,280 --> 00:04:31,680
similar enough in a sense i can say you

00:04:30,160 --> 00:04:33,680
know this is uh the transitive

00:04:31,680 --> 00:04:34,800
property i can say that product a and

00:04:33,680 --> 00:04:37,280
product c are

00:04:34,800 --> 00:04:38,880
somehow similar again just to emphasize

00:04:37,280 --> 00:04:40,800
i'm not saying they are the same thing

00:04:38,880 --> 00:04:42,160
i can say that product a and product b

00:04:40,800 --> 00:04:44,639
are 70

00:04:42,160 --> 00:04:45,360
similar and product b and product c are

00:04:44,639 --> 00:04:48,000
00:04:45,360 --> 00:04:48,800
similar and therefore a and c are let's

00:04:48,000 --> 00:04:52,080
say

00:04:48,800 --> 00:04:53,840
80 similar the average or 90 i take the

00:04:52,080 --> 00:04:56,960
maximum or the minimum or whatever

00:04:53,840 --> 00:04:58,560
but in essence i want to make the link

00:04:56,960 --> 00:04:59,360
between products and i can do it through

00:04:58,560 --> 00:05:01,919
the images

00:04:59,360 --> 00:05:02,720
and i can also augment the the

00:05:01,919 --> 00:05:04,880
similarity

00:05:02,720 --> 00:05:06,880
between the images through the products

00:05:04,880 --> 00:05:08,160
so what would that look like in terms of

00:05:06,880 --> 00:05:11,199
implementation

00:05:08,160 --> 00:05:14,320
here a little bit of math apologies

00:05:11,199 --> 00:05:16,240
um basically domain knowledge if

00:05:14,320 --> 00:05:18,400
if i take the approach i like to call it

00:05:16,240 --> 00:05:21,440
once and done we'll see why in a second

00:05:18,400 --> 00:05:23,120
um if the approach is that again

00:05:21,440 --> 00:05:25,360
products that are images that are linked

00:05:23,120 --> 00:05:28,400
to a product represent the same thing

00:05:25,360 --> 00:05:30,160
and if it's enough that two products

00:05:28,400 --> 00:05:30,800
share a single image in order to make

00:05:30,160 --> 00:05:33,440
them

00:05:30,800 --> 00:05:34,639
linked or similar in my in my domain

00:05:33,440 --> 00:05:35,280
then i can do something really really

00:05:34,639 --> 00:05:36,800
simple i

00:05:35,280 --> 00:05:39,520
all i need to do is take the image

00:05:36,800 --> 00:05:42,080
similarity matrix that i pre-calculated

00:05:39,520 --> 00:05:44,000
um i can add on top of that a block

00:05:42,080 --> 00:05:46,560
matrix of ones basically

00:05:44,000 --> 00:05:48,160
uh blocks for each for all the images

00:05:46,560 --> 00:05:51,039
that are linked to the same product or

00:05:48,160 --> 00:05:52,400
the same patient or the same user and do

00:05:51,039 --> 00:05:53,840
some capping there are some things you

00:05:52,400 --> 00:05:54,320
need to do here but essentially if i

00:05:53,840 --> 00:05:57,360
take

00:05:54,320 --> 00:05:59,199
overlay the the product links on top of

00:05:57,360 --> 00:06:00,880
the image similarity

00:05:59,199 --> 00:06:02,560
and then i can take this matrix and if i

00:06:00,880 --> 00:06:03,120
run whatever clustering algorithm i want

00:06:02,560 --> 00:06:04,720
to run

00:06:03,120 --> 00:06:06,800
or extract connected components or

00:06:04,720 --> 00:06:07,840
whatever what i will get is clusters of

00:06:06,800 --> 00:06:09,680
images but then

00:06:07,840 --> 00:06:12,400
all i need to do is extract the product

00:06:09,680 --> 00:06:14,960
ids and i will have clusters of products

00:06:12,400 --> 00:06:17,520
and because of the way that this works i

00:06:14,960 --> 00:06:19,280
can guarantee that a product will always

00:06:17,520 --> 00:06:21,520
fall in a single cluster

00:06:19,280 --> 00:06:23,039
everything will behave nicely uh with in

00:06:21,520 --> 00:06:26,080
a really nice way

00:06:23,039 --> 00:06:27,520
and also kind of a side note the the

00:06:26,080 --> 00:06:29,039
connections between the

00:06:27,520 --> 00:06:31,120
the images that belong to the same

00:06:29,039 --> 00:06:32,240
product don't have to be absolute they

00:06:31,120 --> 00:06:34,160
can be weakened

00:06:32,240 --> 00:06:35,360
i can i don't have to use one i can use

00:06:34,160 --> 00:06:37,440
weaker links or

00:06:35,360 --> 00:06:39,440
i can use whatever counts of how many

00:06:37,440 --> 00:06:40,240
users viewed the same product or

00:06:39,440 --> 00:06:41,840
something a little bit more

00:06:40,240 --> 00:06:43,199
sophisticated but again i wanted to keep

00:06:41,840 --> 00:06:45,840
it simple here

00:06:43,199 --> 00:06:47,280
um but again this is a very strong

00:06:45,840 --> 00:06:48,400
assumption that i use here that it's

00:06:47,280 --> 00:06:51,199
enough that

00:06:48,400 --> 00:06:51,520
two products share a single image on you

00:06:51,199 --> 00:06:53,360
know

00:06:51,520 --> 00:06:54,720
similar enough and that immediately

00:06:53,360 --> 00:06:57,120
makes them kind of

00:06:54,720 --> 00:06:58,800
uh stick together what we found is that

00:06:57,120 --> 00:06:59,360
this was a little bit too sticky in a

00:06:58,800 --> 00:07:01,039
sense

00:06:59,360 --> 00:07:02,160
too much too many products that cluster

00:07:01,039 --> 00:07:03,039
together when we use this kind of

00:07:02,160 --> 00:07:06,240
approach

00:07:03,039 --> 00:07:07,199
so what we did instead was to

00:07:06,240 --> 00:07:09,520
build something a little bit more

00:07:07,199 --> 00:07:12,000
sophisticated again

00:07:09,520 --> 00:07:13,360
if you remember from whatever whichever

00:07:12,000 --> 00:07:15,599
machine learning course you took a

00:07:13,360 --> 00:07:16,319
similarity matrix is equivalent to a

00:07:15,599 --> 00:07:19,680
similarity

00:07:16,319 --> 00:07:20,160
graph so what you see here is images

00:07:19,680 --> 00:07:22,479
each

00:07:20,160 --> 00:07:24,160
node is an image i just colored for your

00:07:22,479 --> 00:07:26,479
convenience all the images that belong

00:07:24,160 --> 00:07:28,880
to the same product

00:07:26,479 --> 00:07:30,639
sorry and the links between the images

00:07:28,880 --> 00:07:32,800
represent the similarity

00:07:30,639 --> 00:07:34,319
and what i want to do is basically take

00:07:32,800 --> 00:07:35,440
all the images that belong to the same

00:07:34,319 --> 00:07:37,520
product and somehow

00:07:35,440 --> 00:07:39,199
squish them together right into a single

00:07:37,520 --> 00:07:41,039
node and this is what

00:07:39,199 --> 00:07:44,560
is happening on this graph it's called

00:07:41,039 --> 00:07:46,400
um quoting graphs or graphs of minors

00:07:44,560 --> 00:07:48,160
and then i need to decide okay i

00:07:46,400 --> 00:07:49,599
squished all the images into the product

00:07:48,160 --> 00:07:52,800
this is the entity i want to

00:07:49,599 --> 00:07:54,400
analyze how do i decide how this product

00:07:52,800 --> 00:07:55,680
relates to this product well in this

00:07:54,400 --> 00:07:57,759
case i just took

00:07:55,680 --> 00:07:58,800
the maximal similarity of all possible

00:07:57,759 --> 00:08:01,440
pairs

00:07:58,800 --> 00:08:03,039
now and then i get the new similarity

00:08:01,440 --> 00:08:06,160
matrix and i can continue working

00:08:03,039 --> 00:08:08,000
doing my analysis um i just said a very

00:08:06,160 --> 00:08:08,800
uh dangerous words when you talk a

00:08:08,000 --> 00:08:10,800
dangerous

00:08:08,800 --> 00:08:12,720
a few words when you talk about scale

00:08:10,800 --> 00:08:15,599
between all possible pairs

00:08:12,720 --> 00:08:16,319
yeah this does not scale very nicely so

00:08:15,599 --> 00:08:17,120
i've looked

00:08:16,319 --> 00:08:18,800
we've looked through different

00:08:17,120 --> 00:08:20,400
implementations i think the one

00:08:18,800 --> 00:08:21,919
implementation i found that worked out

00:08:20,400 --> 00:08:23,599
of the box kind of immediately is

00:08:21,919 --> 00:08:25,440
network x and python

00:08:23,599 --> 00:08:27,039
if you know of any other implementations

00:08:25,440 --> 00:08:27,840
that work very nicely out of the box

00:08:27,039 --> 00:08:29,280
please

00:08:27,840 --> 00:08:31,120
reach out to me and let me know i'd be

00:08:29,280 --> 00:08:31,840
super interested but that was the one

00:08:31,120 --> 00:08:33,360
that kind of

00:08:31,840 --> 00:08:36,560
looked the most promising but it

00:08:33,360 --> 00:08:39,200
definitely doesn't scale very very well

00:08:36,560 --> 00:08:41,120
so i took my um i did a little bit more

00:08:39,200 --> 00:08:43,279
math and took my uh

00:08:41,120 --> 00:08:46,800
software engineering skills and wrote

00:08:43,279 --> 00:08:49,839
two packages uh one for python one for r

00:08:46,800 --> 00:08:52,320
um and you can find them on on github

00:08:49,839 --> 00:08:53,120
and feel free to explore them and use

00:08:52,320 --> 00:08:55,839
them if you want

00:08:53,120 --> 00:08:56,880
and there's also a paper because the

00:08:55,839 --> 00:08:58,959
approach that i use

00:08:56,880 --> 00:09:01,120
network x is built on graph i went back

00:08:58,959 --> 00:09:02,560
to the similarity matrix

00:09:01,120 --> 00:09:04,720
that it's really nice because you can

00:09:02,560 --> 00:09:06,800
use sparse representations

00:09:04,720 --> 00:09:07,760
um so immediately kind of the scale

00:09:06,800 --> 00:09:09,600
problem

00:09:07,760 --> 00:09:10,880
goes down at least one two orders of

00:09:09,600 --> 00:09:11,839
magnitude

00:09:10,880 --> 00:09:14,080
especially when you're as far as

00:09:11,839 --> 00:09:14,560
problems if you do want to extend this

00:09:14,080 --> 00:09:16,240
further

00:09:14,560 --> 00:09:17,760
i'm also building something for

00:09:16,240 --> 00:09:19,040
tensorflow so you can actually scale

00:09:17,760 --> 00:09:21,360
this up in terms of the memory

00:09:19,040 --> 00:09:22,959
representation into really really really

00:09:21,360 --> 00:09:25,920
large uh similarity uh

00:09:22,959 --> 00:09:27,839
structures but the trade-off is that

00:09:25,920 --> 00:09:29,760
when you do this kind of matrix approach

00:09:27,839 --> 00:09:31,120
you are limited to a specific class of

00:09:29,760 --> 00:09:32,560
aggregation functions

00:09:31,120 --> 00:09:35,040
i mentioned something like maximum

00:09:32,560 --> 00:09:37,519
similarity total similarity

00:09:35,040 --> 00:09:38,240
counting how many images pairs of images

00:09:37,519 --> 00:09:41,120
crossed a

00:09:38,240 --> 00:09:41,920
certain threshold it's a very wide class

00:09:41,120 --> 00:09:43,680
of functions

00:09:41,920 --> 00:09:45,120
um and there's a paper on my website if

00:09:43,680 --> 00:09:46,480
you want to see why the mathematics

00:09:45,120 --> 00:09:47,279
works and you want to convince yourself

00:09:46,480 --> 00:09:48,560
or if you wanna

00:09:47,279 --> 00:09:50,560
i'm trying to publish it now if you want

00:09:48,560 --> 00:09:51,760
to collaborate uh feel free to reach out

00:09:50,560 --> 00:09:54,800
again sorry for the

00:09:51,760 --> 00:09:57,279
shameless promotion and now

00:09:54,800 --> 00:09:57,920
once we have an efficient way scalable

00:09:57,279 --> 00:10:00,080
way

00:09:57,920 --> 00:10:01,279
to aggregate the similarity from the

00:10:00,080 --> 00:10:04,320
image level

00:10:01,279 --> 00:10:06,160
to the um to the product level

00:10:04,320 --> 00:10:07,920
then we can start doing some really

00:10:06,160 --> 00:10:10,480
interesting things because

00:10:07,920 --> 00:10:11,279
now that we have this uh um this tool in

00:10:10,480 --> 00:10:14,160
our hand

00:10:11,279 --> 00:10:15,519
and we can start aggregating things in

00:10:14,160 --> 00:10:16,560
an interesting way we don't have to

00:10:15,519 --> 00:10:18,720
limit ourselves to

00:10:16,560 --> 00:10:20,320
to limit ourselves to images we can go

00:10:18,720 --> 00:10:22,720
to text we can go to everything else we

00:10:20,320 --> 00:10:25,040
can train weights we can combine things

00:10:22,720 --> 00:10:26,560
we might even want to go beyond products

00:10:25,040 --> 00:10:27,680
think about instead of comparing trees

00:10:26,560 --> 00:10:30,160
we can compare

00:10:27,680 --> 00:10:31,120
orchids or forests there's a lot to be

00:10:30,160 --> 00:10:34,240
done here

00:10:31,120 --> 00:10:36,079
um and again thank you for uh listening

00:10:34,240 --> 00:10:38,000
um i have to mention we're hiring like i

00:10:36,079 --> 00:10:38,560
said a global company and fully remote

00:10:38,000 --> 00:10:40,079
so

00:10:38,560 --> 00:10:41,839
feel free to browse the website if you

00:10:40,079 --> 00:10:43,440
find anything interesting um

00:10:41,839 --> 00:10:45,040
please mention me to the recruiters and

00:10:43,440 --> 00:10:47,120
feel free to reach out to me on

00:10:45,040 --> 00:11:01,839
twitter on my website and again thank

00:10:47,120 --> 00:11:01,839
you for your time

00:11:08,160 --> 00:11:10,240

YouTube URL: https://www.youtube.com/watch?v=Rn3rBzNpHmo


