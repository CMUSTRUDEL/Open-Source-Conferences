Title: Anshum Gupta – Highly available and disaster ready Apache Solr
Publication date: 2021-06-30
Playlist: Berlin Buzzwords 2021 #bbuzz
Description: 
	Apache Solr is a critical piece of infrastructure for most companies dealing with data. The systems that Solr often powers are critical, requiring high availability and disaster recovery.
 
Often users tend to undermine the importance of these features, but more importantly there’s a need to better understand the need for these before it’s too late. In the recent past, a lot of effort has been put in by the community to build features that allow for operating a reliable and highly available Solr setup.
 
During this talk, I will talk about the DR and HA options that Solr provides like incremental backups, backup to Blob store, and Cross-DC replication. I will explain the reasons that make them essential, and also explain what these features actually do under the covers.
 
At the end of this talk, attendees would have a better understanding about HA and DR in general, and the options they have to improve the reliability of their Solr clusters. They would also be equipped to enable and use those features to operate a reliable Solr cluster that is disaster ready.

Speaker:
Anshum Gupta – https://2021.berlinbuzzwords.de/member/anshum-gupta

More: https://2021.berlinbuzzwords.de/session/highly-available-and-disaster-ready-apache-solr
Captions: 
	00:00:07,359 --> 00:00:12,000
hello everyone uh

00:00:08,639 --> 00:00:14,320
welcome uh to this talk um the search

00:00:12,000 --> 00:00:16,880
track of the berlin buzzwords 2021

00:00:14,320 --> 00:00:17,920
edition i'm going to be talking about

00:00:16,880 --> 00:00:21,760
highly available

00:00:17,920 --> 00:00:24,000
and disaster ready apache solar today

00:00:21,760 --> 00:00:25,680
so uh during the course of this talk i'm

00:00:24,000 --> 00:00:28,800
going to be introducing

00:00:25,680 --> 00:00:30,720
a few concepts talk about dr and then

00:00:28,800 --> 00:00:31,840
talk about ha and the options that solo

00:00:30,720 --> 00:00:34,880
provides out of the box

00:00:31,840 --> 00:00:36,239
uh to uh if you want if you were

00:00:34,880 --> 00:00:39,600
interested in hdr

00:00:36,239 --> 00:00:42,079
what what would your options look like

00:00:39,600 --> 00:00:43,920
so over the years apache solar has

00:00:42,079 --> 00:00:46,079
evolved into something that's more than

00:00:43,920 --> 00:00:48,879
and beyond full text search

00:00:46,079 --> 00:00:49,600
it's come down come over to uh to handle

00:00:48,879 --> 00:00:51,280
use cases

00:00:49,600 --> 00:00:53,440
uh that involve machine learning

00:00:51,280 --> 00:00:56,239
analytics and a lot of other things

00:00:53,440 --> 00:00:57,600
almost like a swiss army knife it's not

00:00:56,239 --> 00:00:58,000
only grown in the number of features

00:00:57,600 --> 00:01:01,120
that it

00:00:58,000 --> 00:01:04,159
offers but that it can help its users

00:01:01,120 --> 00:01:08,000
accomplish but also the scale at which

00:01:04,159 --> 00:01:08,000
these features can be successfully used

00:01:08,960 --> 00:01:12,400
because of that reason uh solar solar's

00:01:11,280 --> 00:01:14,960
been

00:01:12,400 --> 00:01:15,759
used in uh in a wide variety of

00:01:14,960 --> 00:01:18,479
industries

00:01:15,759 --> 00:01:20,400
in in infrastructure that uh i can only

00:01:18,479 --> 00:01:22,240
define as critical

00:01:20,400 --> 00:01:23,759
the ways in which these industries like

00:01:22,240 --> 00:01:26,479
retail banking travel

00:01:23,759 --> 00:01:27,840
research and a bunch of others use solar

00:01:26,479 --> 00:01:30,479
make it essential for

00:01:27,840 --> 00:01:34,320
for it to work reliably both in terms of

00:01:30,479 --> 00:01:34,320
correctness as well as availability

00:01:35,280 --> 00:01:38,720
so we're going to dive directly into

00:01:36,880 --> 00:01:40,320
disaster recovery uh

00:01:38,720 --> 00:01:42,479
disaster recovery was developed in the

00:01:40,320 --> 00:01:43,439
mid late 1970s when there was a

00:01:42,479 --> 00:01:45,680
realization

00:01:43,439 --> 00:01:47,600
uh on the dependence of computer systems

00:01:45,680 --> 00:01:50,560
and that downtime meant a

00:01:47,600 --> 00:01:52,479
loss of revenue uh back in the day

00:01:50,560 --> 00:01:54,720
mainframes would back up on tapes

00:01:52,479 --> 00:01:57,280
and wait until those tapes would reach

00:01:54,720 --> 00:02:00,399
would avoid complete restoration of data

00:01:57,280 --> 00:02:01,439
in case something were to happen over

00:02:00,399 --> 00:02:05,119
the years though

00:02:01,439 --> 00:02:08,479
uh disaster recovery has evolved

00:02:05,119 --> 00:02:10,800
a lot and currently disaster recovery

00:02:08,479 --> 00:02:11,840
involves a set of policies and tools and

00:02:10,800 --> 00:02:15,120
procedure to

00:02:11,840 --> 00:02:17,840
to kind of enable the recovery of um

00:02:15,120 --> 00:02:18,319
of an existing system for its continued

00:02:17,840 --> 00:02:22,560
uh

00:02:18,319 --> 00:02:24,000
availability or continued uh operation

00:02:22,560 --> 00:02:27,520
and that could happen due to either a

00:02:24,000 --> 00:02:27,520
natural or a human disaster

00:02:28,239 --> 00:02:31,519
and disaster recovery generally uses an

00:02:30,480 --> 00:02:35,120
alternate site

00:02:31,519 --> 00:02:37,120
uh to restore that operation uh you know

00:02:35,120 --> 00:02:38,239
for the entire to normalcy for the

00:02:37,120 --> 00:02:40,000
entire site

00:02:38,239 --> 00:02:41,760
as the intention is to have the primary

00:02:40,000 --> 00:02:43,760
location recover it can

00:02:41,760 --> 00:02:44,879
it is generally done one of the two ways

00:02:43,760 --> 00:02:46,640
either uh

00:02:44,879 --> 00:02:48,080
using an offline process something like

00:02:46,640 --> 00:02:51,599
a backup restore

00:02:48,080 --> 00:02:53,519
or more actively or transferring data at

00:02:51,599 --> 00:02:55,120
real time so that if something were to

00:02:53,519 --> 00:02:58,400
happen to your original system

00:02:55,120 --> 00:02:58,400
you could recover from that

00:03:00,640 --> 00:03:03,920
asura has provided uh dr readiness and

00:03:03,360 --> 00:03:06,720
i'm going to

00:03:03,920 --> 00:03:09,440
refer to uh disaster recovery sdr for

00:03:06,720 --> 00:03:11,200
the rest of the slide for the most

00:03:09,440 --> 00:03:13,120
more often than not so solar has

00:03:11,200 --> 00:03:13,599
provided dr readiness options for a

00:03:13,120 --> 00:03:16,000
while

00:03:13,599 --> 00:03:16,959
and while they have abroad over multiple

00:03:16,000 --> 00:03:18,319
releases

00:03:16,959 --> 00:03:21,200
they still continue to be the

00:03:18,319 --> 00:03:23,680
recommended options the same options

00:03:21,200 --> 00:03:24,319
and while uh so backup and restore is

00:03:23,680 --> 00:03:26,080
certainly

00:03:24,319 --> 00:03:27,360
uh the most important dr option

00:03:26,080 --> 00:03:30,080
available but

00:03:27,360 --> 00:03:32,159
cdcr or cross data center replication as

00:03:30,080 --> 00:03:34,879
it's known um

00:03:32,159 --> 00:03:35,360
actively copies data allowing it to be

00:03:34,879 --> 00:03:38,400
also

00:03:35,360 --> 00:03:39,920
to also work as an ha solution um

00:03:38,400 --> 00:03:41,519
but i'd like to highlight that dr

00:03:39,920 --> 00:03:42,799
shouldn't be confused with ha and we're

00:03:41,519 --> 00:03:46,000
going to get to that

00:03:42,799 --> 00:03:48,560
in a little bit tr

00:03:46,000 --> 00:03:49,840
uh an important aspect of dr that is

00:03:48,560 --> 00:03:52,720
that it is configured

00:03:49,840 --> 00:03:54,159
with a designated time to recovery um

00:03:52,720 --> 00:03:56,239
and a recovery point

00:03:54,159 --> 00:03:57,200
and by by recovery point i really mean

00:03:56,239 --> 00:04:00,480
that uh

00:03:57,200 --> 00:04:03,760
checkpoints are generally

00:04:00,480 --> 00:04:07,120
are generally uh sorry

00:04:03,760 --> 00:04:08,640
are generally uh maintained and when a

00:04:07,120 --> 00:04:11,200
restoration has to happen

00:04:08,640 --> 00:04:12,400
uh data is expected to go back to that

00:04:11,200 --> 00:04:14,640
restoration point

00:04:12,400 --> 00:04:16,479
uh essentially translating to not all

00:04:14,640 --> 00:04:18,239
data that you might have

00:04:16,479 --> 00:04:19,919
uh you know gotten into the system

00:04:18,239 --> 00:04:21,040
before the disaster happened is going to

00:04:19,919 --> 00:04:24,880
be recovered

00:04:21,040 --> 00:04:24,880
at least that's uh that's by design

00:04:25,759 --> 00:04:30,960
diving a little deep into backup and

00:04:27,600 --> 00:04:30,960
restore options for solar

00:04:31,520 --> 00:04:35,120
to give you a little bit of history of

00:04:32,880 --> 00:04:37,440
the backup restore features that solar

00:04:35,120 --> 00:04:40,000
offers it was first introduced in um

00:04:37,440 --> 00:04:42,240
in version 6.1 and when it was

00:04:40,000 --> 00:04:44,240
introduced it was vanilla but um

00:04:42,240 --> 00:04:46,479
it basically came with some restrictions

00:04:44,240 --> 00:04:47,440
uh most importantly it only allowed for

00:04:46,479 --> 00:04:49,600
full backups

00:04:47,440 --> 00:04:51,280
and was not really cloud friendly in a

00:04:49,600 --> 00:04:53,520
sense that all it would

00:04:51,280 --> 00:04:54,400
allow users to do is to back up either

00:04:53,520 --> 00:04:58,240
on nfs

00:04:54,400 --> 00:05:01,600
which is local backups or sdfs um

00:04:58,240 --> 00:05:04,000
and there was no way to only backup

00:05:01,600 --> 00:05:05,840
data or the configs so it would always

00:05:04,000 --> 00:05:09,199
back up everything

00:05:05,840 --> 00:05:10,960
every time and more often than not

00:05:09,199 --> 00:05:12,240
there were a lot of failed backups and

00:05:10,960 --> 00:05:14,000
i'm going to go back to

00:05:12,240 --> 00:05:15,600
why that happened but there was a

00:05:14,000 --> 00:05:17,440
realization that

00:05:15,600 --> 00:05:19,600
something needed to change if this

00:05:17,440 --> 00:05:22,720
feature was to be continued

00:05:19,600 --> 00:05:25,759
to use to be used by by its users

00:05:22,720 --> 00:05:27,680
so it needed a new perspective

00:05:25,759 --> 00:05:29,280
and that new perspective came in the in

00:05:27,680 --> 00:05:31,440
the form of incremental backups

00:05:29,280 --> 00:05:33,360
the realization that uh solar tries to

00:05:31,440 --> 00:05:34,800
back up every bit of data every time you

00:05:33,360 --> 00:05:35,919
want to back up and people generally

00:05:34,800 --> 00:05:38,639
want to back up

00:05:35,919 --> 00:05:39,919
early maybe twice an hour maybe less

00:05:38,639 --> 00:05:42,000
frequently but

00:05:39,919 --> 00:05:43,199
uh backing up all of the data every time

00:05:42,000 --> 00:05:45,520
really meant uh

00:05:43,199 --> 00:05:46,960
you know uh storing more data also

00:05:45,520 --> 00:05:48,240
transferring more data across the

00:05:46,960 --> 00:05:50,160
network uh

00:05:48,240 --> 00:05:52,160
maybe even to a different data center so

00:05:50,160 --> 00:05:55,280
with incremental backups uh

00:05:52,160 --> 00:05:55,919
solar offered something uh that allowed

00:05:55,280 --> 00:05:57,759
for

00:05:55,919 --> 00:05:59,039
reducing redundancy of data storage and

00:05:57,759 --> 00:06:02,319
transfer translating

00:05:59,039 --> 00:06:06,080
faster and less expensive uh backups and

00:06:02,319 --> 00:06:08,319
restores um but it did not stop there

00:06:06,080 --> 00:06:09,199
this entire feature offered two more

00:06:08,319 --> 00:06:11,840
valuable

00:06:09,199 --> 00:06:12,400
uh valuable sub features you could say

00:06:11,840 --> 00:06:15,520
or

00:06:12,400 --> 00:06:16,639
or things um first one being safety

00:06:15,520 --> 00:06:18,800
against corruption

00:06:16,639 --> 00:06:20,080
while the previous backup mechanism did

00:06:18,800 --> 00:06:22,960
not check uh

00:06:20,080 --> 00:06:24,960
for a backup index before it backed up

00:06:22,960 --> 00:06:25,360
that the incremental backups ensured

00:06:24,960 --> 00:06:27,840
that

00:06:25,360 --> 00:06:28,639
uh the index files that were that were

00:06:27,840 --> 00:06:32,240
backed up

00:06:28,639 --> 00:06:34,720
were check summed uh and to ensure that

00:06:32,240 --> 00:06:35,919
at the time of backup the index file

00:06:34,720 --> 00:06:39,039
that you were backing up

00:06:35,919 --> 00:06:41,840
was good to use if you were to need it

00:06:39,039 --> 00:06:44,080
um and another more important aspect of

00:06:41,840 --> 00:06:45,919
this was this entire

00:06:44,080 --> 00:06:47,600
architecture allowed for backups to be

00:06:45,919 --> 00:06:49,840
more cloud-friendly so you were no

00:06:47,600 --> 00:06:55,120
longer restricted to only using

00:06:49,840 --> 00:06:55,120
uh nfs or hdfs uh file systems

00:06:59,360 --> 00:07:03,440
so backup and restore evolved into

00:07:02,080 --> 00:07:05,280
something that

00:07:03,440 --> 00:07:07,759
that started using incremental backups

00:07:05,280 --> 00:07:09,759
allowing users to kind of optimize on

00:07:07,759 --> 00:07:12,800
the resources it requires and

00:07:09,759 --> 00:07:15,840
also the odds of it succeeding um

00:07:12,800 --> 00:07:17,599
but it also added extendable interfaces

00:07:15,840 --> 00:07:20,080
so what that meant was

00:07:17,599 --> 00:07:21,759
uh you could now have cloud services or

00:07:20,080 --> 00:07:24,080
cloud service providers

00:07:21,759 --> 00:07:25,680
um as their backup options well that

00:07:24,080 --> 00:07:29,039
wasn't something that was released

00:07:25,680 --> 00:07:32,240
when when this change happened uh

00:07:29,039 --> 00:07:33,759
but uh over actually the upcoming

00:07:32,240 --> 00:07:36,080
release was i think uh

00:07:33,759 --> 00:07:37,120
is going to have support for gcp and

00:07:36,080 --> 00:07:41,039
there's an open pr

00:07:37,120 --> 00:07:44,240
for supporting aws or s3 uh as a as a

00:07:41,039 --> 00:07:45,759
backup option um for for solar cloud

00:07:44,240 --> 00:07:47,360
the p are still open so i'm not sure

00:07:45,759 --> 00:07:49,039
when it's going to be merchant released

00:07:47,360 --> 00:07:51,440
but uh it's out there and it's looking

00:07:49,039 --> 00:07:54,800
really good

00:07:51,440 --> 00:07:57,039
um one one interesting thing that

00:07:54,800 --> 00:07:58,160
solar allows you to do is to define

00:07:57,039 --> 00:08:00,479
multiple

00:07:58,160 --> 00:08:02,000
uh repository implementations and uh

00:08:00,479 --> 00:08:03,759
with the extendable interfaces that i

00:08:02,000 --> 00:08:05,039
just spoke about are actually repository

00:08:03,759 --> 00:08:08,319
implementations

00:08:05,039 --> 00:08:09,360
um allowing you to have a definition of

00:08:08,319 --> 00:08:12,400
say htfs

00:08:09,360 --> 00:08:14,560
gcp aws maybe another you know

00:08:12,400 --> 00:08:16,639
proprietary backup

00:08:14,560 --> 00:08:19,199
file store that you that you might have

00:08:16,639 --> 00:08:22,400
at your workplace

00:08:19,199 --> 00:08:23,360
and you don't really have to use all of

00:08:22,400 --> 00:08:24,960
these all the time

00:08:23,360 --> 00:08:27,440
and you can specify exactly what you

00:08:24,960 --> 00:08:29,199
want at runtime or making it really easy

00:08:27,440 --> 00:08:32,399
and convenient for people to

00:08:29,199 --> 00:08:35,599
uh to switch and use

00:08:32,399 --> 00:08:38,959
things as they wanted

00:08:35,599 --> 00:08:40,080
and uh one more interesting aspect of

00:08:38,959 --> 00:08:43,120
this backup and restore

00:08:40,080 --> 00:08:44,560
update was um unlike the pre unlike the

00:08:43,120 --> 00:08:47,680
older backup restore

00:08:44,560 --> 00:08:50,480
which required users to restore uh

00:08:47,680 --> 00:08:52,160
an existing index into any into a new

00:08:50,480 --> 00:08:55,360
collection only

00:08:52,160 --> 00:08:57,200
the new backup and restore uh yes it did

00:08:55,360 --> 00:08:59,279
it still continues to work with alias

00:08:57,200 --> 00:09:00,640
which is also a recommended mechanism

00:08:59,279 --> 00:09:03,120
if you don't want to change your client

00:09:00,640 --> 00:09:04,959
code but backup the new version of

00:09:03,120 --> 00:09:07,120
backup and restore allows users to

00:09:04,959 --> 00:09:09,680
restore into an existing collection

00:09:07,120 --> 00:09:10,560
piggybacking on a feature that was

00:09:09,680 --> 00:09:13,200
released

00:09:10,560 --> 00:09:15,600
only recently that allows solar indexes

00:09:13,200 --> 00:09:18,640
or collections to be marked as read-only

00:09:15,600 --> 00:09:19,920
um a lot at the same time or

00:09:18,640 --> 00:09:23,839
in the background allowing you to

00:09:19,920 --> 00:09:23,839
restore into the same collection

00:09:25,839 --> 00:09:30,800
so how do you how do we use uh backup uh

00:09:29,200 --> 00:09:33,040
you know backup and restore and for the

00:09:30,800 --> 00:09:36,720
sake of time just discussing uh

00:09:33,040 --> 00:09:39,920
backup here you basically have to define

00:09:36,720 --> 00:09:43,120
uh your implementation that you

00:09:39,920 --> 00:09:46,240
you might use in your solar setup

00:09:43,120 --> 00:09:48,399
uh in your config um and

00:09:46,240 --> 00:09:50,080
while the config that's highlighted here

00:09:48,399 --> 00:09:52,480
is the local file system repository

00:09:50,080 --> 00:09:54,080
option the location being an nfs mount

00:09:52,480 --> 00:09:55,760
point

00:09:54,080 --> 00:09:58,240
you can you can have a gcp

00:09:55,760 --> 00:10:00,880
implementation with the upcoming release

00:09:58,240 --> 00:10:02,720
um and in the future you will be able to

00:10:00,880 --> 00:10:03,279
have an s3 configuration for this as

00:10:02,720 --> 00:10:06,480
well

00:10:03,279 --> 00:10:07,680
and solar exposes four apis as part of

00:10:06,480 --> 00:10:10,320
the backup restore

00:10:07,680 --> 00:10:12,160
uh umbrella and that's the backup the

00:10:10,320 --> 00:10:12,640
restore the list backup and the delete

00:10:12,160 --> 00:10:16,000
backup

00:10:12,640 --> 00:10:17,360
uh api calls the backup call uh let's

00:10:16,000 --> 00:10:18,560
see what happens when you sell in a

00:10:17,360 --> 00:10:20,800
backup call

00:10:18,560 --> 00:10:22,079
when you send in a backup call to to

00:10:20,800 --> 00:10:23,920
solar

00:10:22,079 --> 00:10:25,839
it parses those parameters picks up the

00:10:23,920 --> 00:10:28,320
right repository implementation

00:10:25,839 --> 00:10:29,920
based on what you've already configured

00:10:28,320 --> 00:10:31,440
and what's been provided as part of the

00:10:29,920 --> 00:10:34,079
request

00:10:31,440 --> 00:10:35,920
and then sends an internal core admin

00:10:34,079 --> 00:10:38,640
api call to backup the core

00:10:35,920 --> 00:10:39,839
well this call is kind of an optional

00:10:38,640 --> 00:10:41,519
call because it

00:10:39,839 --> 00:10:43,760
sort of allows you to specify something

00:10:41,519 --> 00:10:46,640
called the index backup strategy

00:10:43,760 --> 00:10:48,240
and while right now it supports two uh

00:10:46,640 --> 00:10:50,399
two strategies out of the box

00:10:48,240 --> 00:10:51,440
one being copy index files and the other

00:10:50,399 --> 00:10:53,200
one being none

00:10:51,440 --> 00:10:55,040
and they do exactly as the name suggests

00:10:53,200 --> 00:10:58,240
the copy index file

00:10:55,040 --> 00:11:00,320
um would allow you to take a take an

00:10:58,240 --> 00:11:02,320
index file and back it up into your

00:11:00,320 --> 00:11:03,680
implementation of choice at the location

00:11:02,320 --> 00:11:06,079
that you've specified

00:11:03,680 --> 00:11:07,279
or none would skip backing up all of

00:11:06,079 --> 00:11:08,880
your data

00:11:07,279 --> 00:11:10,640
and move and then it moves on to the

00:11:08,880 --> 00:11:12,959
next step allow and

00:11:10,640 --> 00:11:14,880
backs up your configs in this case it

00:11:12,959 --> 00:11:16,240
would allow you to only backup configs

00:11:14,880 --> 00:11:18,880
for you to create

00:11:16,240 --> 00:11:20,560
a collection say that looks exactly like

00:11:18,880 --> 00:11:22,160
like the current collection but does not

00:11:20,560 --> 00:11:24,720
hold any of the data that

00:11:22,160 --> 00:11:25,600
you have uh in your old or the existing

00:11:24,720 --> 00:11:27,360
collection

00:11:25,600 --> 00:11:29,200
and towards the end of the request it

00:11:27,360 --> 00:11:31,760
does some internal housekeeping

00:11:29,200 --> 00:11:32,399
um where it takes care of things like

00:11:31,760 --> 00:11:34,720
ensuring

00:11:32,399 --> 00:11:35,600
you're not uh you don't have too many

00:11:34,720 --> 00:11:38,959
backups

00:11:35,600 --> 00:11:40,560
and to clean up the the oldest backup

00:11:38,959 --> 00:11:42,560
that you might have if you spend if

00:11:40,560 --> 00:11:43,760
you've specified the number of backups

00:11:42,560 --> 00:11:47,600
that are allowed

00:11:43,760 --> 00:11:47,600
for a given repository implementation

00:11:51,680 --> 00:11:57,600
so moving on to availability

00:11:54,720 --> 00:11:59,040
so availability is uh is what is what is

00:11:57,600 --> 00:11:59,920
availability availability is the

00:11:59,040 --> 00:12:02,079
probability

00:11:59,920 --> 00:12:03,040
that a system will uh will work as

00:12:02,079 --> 00:12:07,200
required

00:12:03,040 --> 00:12:09,200
when required uh during a task or a pro

00:12:07,200 --> 00:12:10,720
or a mission and the mission is

00:12:09,200 --> 00:12:14,320
basically a project the time when you

00:12:10,720 --> 00:12:14,320
really intend to use the system

00:12:15,200 --> 00:12:19,200
the system which aims to ensure an

00:12:16,959 --> 00:12:22,480
agreed level of operational performance

00:12:19,200 --> 00:12:24,079
generally termed as uh as uptime for

00:12:22,480 --> 00:12:26,320
a higher than normal period and the

00:12:24,079 --> 00:12:27,600
normal period might vary based on use

00:12:26,320 --> 00:12:29,839
case to use case

00:12:27,600 --> 00:12:31,279
um it's called a highly like it's called

00:12:29,839 --> 00:12:33,600
a highly available system

00:12:31,279 --> 00:12:34,480
uh when the system is not available it's

00:12:33,600 --> 00:12:38,639
it's uh

00:12:34,480 --> 00:12:41,760
it's uh considered to be downtime

00:12:38,639 --> 00:12:44,639
a highly available system is designed uh

00:12:41,760 --> 00:12:45,120
with redundancy with redundancy in the

00:12:44,639 --> 00:12:46,800
system

00:12:45,120 --> 00:12:49,120
to take care of both micro and macro

00:12:46,800 --> 00:12:51,760
level failures to overcome competent

00:12:49,120 --> 00:12:53,519
failures at different levels

00:12:51,760 --> 00:12:55,920
the systems are designed with no single

00:12:53,519 --> 00:12:58,320
point in failures so as to ensure

00:12:55,920 --> 00:13:00,560
uh availability uh even when something

00:12:58,320 --> 00:13:03,920
were to go down

00:13:00,560 --> 00:13:06,160
it's generally achieved by uh redundancy

00:13:03,920 --> 00:13:07,120
monitoring and failover a combination of

00:13:06,160 --> 00:13:09,120
those so that

00:13:07,120 --> 00:13:10,880
you should you not only need redundancy

00:13:09,120 --> 00:13:12,560
but you also need monitoring in order to

00:13:10,880 --> 00:13:15,440
detect when something goes down

00:13:12,560 --> 00:13:16,560
and to failover by either taking uh that

00:13:15,440 --> 00:13:19,920
specific component

00:13:16,560 --> 00:13:21,920
out of out of action or to die

00:13:19,920 --> 00:13:23,519
or in addition to direct traffic that

00:13:21,920 --> 00:13:26,880
was meant for that component

00:13:23,519 --> 00:13:30,320
or do it onto a healthy component

00:13:26,880 --> 00:13:32,079
an important aspect here is highly aware

00:13:30,320 --> 00:13:34,320
high availability for a system does not

00:13:32,079 --> 00:13:36,880
really translate to

00:13:34,320 --> 00:13:38,639
a system never going down it's it just

00:13:36,880 --> 00:13:40,240
means that the system is going to

00:13:38,639 --> 00:13:42,880
continue to work

00:13:40,240 --> 00:13:43,839
beyond a certain expected uh

00:13:42,880 --> 00:13:45,680
availability

00:13:43,839 --> 00:13:47,519
threshold which is expected out of the

00:13:45,680 --> 00:13:50,720
system so

00:13:47,519 --> 00:13:51,279
any highly available system is it is and

00:13:50,720 --> 00:13:54,079
can

00:13:51,279 --> 00:13:55,519
can go down it's just whether it still

00:13:54,079 --> 00:13:58,000
continues to work for the expected

00:13:55,519 --> 00:13:58,000
duration

00:13:59,440 --> 00:14:04,800
and while h a and d are uh might sound

00:14:02,720 --> 00:14:06,160
very similar in terms of what they're

00:14:04,800 --> 00:14:08,079
trying to achieve

00:14:06,160 --> 00:14:10,240
they're essentially different uh they

00:14:08,079 --> 00:14:12,720
have some logical overlap

00:14:10,240 --> 00:14:13,839
but a highly available system by design

00:14:12,720 --> 00:14:16,240
handles uh

00:14:13,839 --> 00:14:17,040
smaller scale issues something you know

00:14:16,240 --> 00:14:20,240
a smaller

00:14:17,040 --> 00:14:22,000
component going down whereas dr

00:14:20,240 --> 00:14:25,440
generally means a bigger problem has

00:14:22,000 --> 00:14:28,399
happened and you need to now recover

00:14:25,440 --> 00:14:30,480
after the loss of something that is more

00:14:28,399 --> 00:14:32,480
than just a small component of the

00:14:30,480 --> 00:14:36,079
system

00:14:32,480 --> 00:14:39,440
so solar has provided ha options

00:14:36,079 --> 00:14:39,440
uh for a while now

00:14:40,880 --> 00:14:46,000
and replicas are the essential building

00:14:43,519 --> 00:14:49,199
blocks when it comes to a chain solar

00:14:46,000 --> 00:14:51,440
replicas provide redundancy um and so ha

00:14:49,199 --> 00:14:52,480
uh in a sense that if one replica goes

00:14:51,440 --> 00:14:54,880
down uh

00:14:52,480 --> 00:14:56,079
another active replica takes over

00:14:54,880 --> 00:14:57,680
processing the requests

00:14:56,079 --> 00:15:00,399
uh that were meant for the original

00:14:57,680 --> 00:15:00,800
replica uh solar does not automatically

00:15:00,399 --> 00:15:02,560
spin

00:15:00,800 --> 00:15:04,079
up something but it makes sure that

00:15:02,560 --> 00:15:05,519
anything that is meant for something

00:15:04,079 --> 00:15:08,399
that that's not down

00:15:05,519 --> 00:15:09,600
is redoubted due to an active replica it

00:15:08,399 --> 00:15:11,360
also takes over

00:15:09,600 --> 00:15:13,839
other roles and responsibilities like

00:15:11,360 --> 00:15:16,160
being a leader or

00:15:13,839 --> 00:15:18,560
when something vertical down ensuring

00:15:16,160 --> 00:15:22,079
the availability of the system again

00:15:18,560 --> 00:15:24,000
now however there are times when when

00:15:22,079 --> 00:15:26,560
due to some error which may be human or

00:15:24,000 --> 00:15:28,880
not the impact on the system

00:15:26,560 --> 00:15:29,839
is not limited to one or two components

00:15:28,880 --> 00:15:32,720
it's not local

00:15:29,839 --> 00:15:34,399
it's not physically pounded in such a

00:15:32,720 --> 00:15:36,639
situation you need something

00:15:34,399 --> 00:15:38,480
bigger that spans across the data

00:15:36,639 --> 00:15:39,519
centers and that's where cross data

00:15:38,480 --> 00:15:41,199
center replication

00:15:39,519 --> 00:15:43,040
allows you to have a highly available

00:15:41,199 --> 00:15:47,839
system that spans across

00:15:43,040 --> 00:15:47,839
a single physical data center

00:15:50,560 --> 00:15:57,519
so cross data center replication um

00:15:55,759 --> 00:15:59,440
talking about the history of cross data

00:15:57,519 --> 00:16:00,959
center replication it's it's existed in

00:15:59,440 --> 00:16:03,759
solar for a while now

00:16:00,959 --> 00:16:04,240
with the first release of cdcr as it was

00:16:03,759 --> 00:16:08,320
known

00:16:04,240 --> 00:16:11,519
uh coming out in in solar 6.0

00:16:08,320 --> 00:16:13,279
and um it was meant to accommodate two

00:16:11,519 --> 00:16:14,959
or more data centers with limited

00:16:13,279 --> 00:16:16,079
bandwidth and allow for data to be

00:16:14,959 --> 00:16:19,600
replicated acro

00:16:16,079 --> 00:16:22,399
across these but the design uh decisions

00:16:19,600 --> 00:16:23,759
that were made back back in the time um

00:16:22,399 --> 00:16:26,800
had some issues

00:16:23,759 --> 00:16:30,320
uh leading it to uh

00:16:26,800 --> 00:16:32,560
to failures and problems so

00:16:30,320 --> 00:16:35,680
for users that tried to use the system

00:16:32,560 --> 00:16:37,920
and so it was deprecated in atex

00:16:35,680 --> 00:16:40,160
it's now been removed and the intention

00:16:37,920 --> 00:16:41,040
is for it to be replaced in 9x by a new

00:16:40,160 --> 00:16:43,680
approach

00:16:41,040 --> 00:16:45,360
i've kind of pushed some code up already

00:16:43,680 --> 00:16:47,600
into my github repository i'm still

00:16:45,360 --> 00:16:47,920
working on it i have some working model

00:16:47,600 --> 00:16:50,160
of

00:16:47,920 --> 00:16:53,120
of this thing but let me talk about what

00:16:50,160 --> 00:16:53,120
this approach looks like

00:16:55,440 --> 00:16:59,199
so the new solar with cross dc

00:16:57,120 --> 00:16:59,920
replication architecture looks something

00:16:59,199 --> 00:17:03,120
like this

00:16:59,920 --> 00:17:05,600
um it's it's kind of widely

00:17:03,120 --> 00:17:06,240
based off of an approach that we've used

00:17:05,600 --> 00:17:08,559
at apple

00:17:06,240 --> 00:17:09,520
to achieve trust data center replication

00:17:08,559 --> 00:17:12,160
uh

00:17:09,520 --> 00:17:13,439
the reason why why we didn't use what's

00:17:12,160 --> 00:17:15,120
offered out of the box was not because

00:17:13,439 --> 00:17:17,679
we didn't believe in it but

00:17:15,120 --> 00:17:19,760
but because we started using it before

00:17:17,679 --> 00:17:20,640
solar had cross dc as a solution out of

00:17:19,760 --> 00:17:23,679
the box

00:17:20,640 --> 00:17:24,559
um the best part about this entire

00:17:23,679 --> 00:17:28,240
infrastructure

00:17:24,559 --> 00:17:31,280
is is that white box in the middle uh

00:17:28,240 --> 00:17:32,960
all of the queuing mirroring logic

00:17:31,280 --> 00:17:34,559
something that solar is not designed for

00:17:32,960 --> 00:17:37,280
it was never designed for

00:17:34,559 --> 00:17:39,039
uh is is abstracted out in the system as

00:17:37,280 --> 00:17:42,080
compared to the older system

00:17:39,039 --> 00:17:44,320
which um which tried to also

00:17:42,080 --> 00:17:45,440
behave which which also forced solar to

00:17:44,320 --> 00:17:48,559
behave like a

00:17:45,440 --> 00:17:50,080
like a queueing service uh eventually

00:17:48,559 --> 00:17:52,000
leading to problems like

00:17:50,080 --> 00:17:53,600
unbounded growth in transaction log and

00:17:52,000 --> 00:17:56,000
out of memory issues

00:17:53,600 --> 00:17:58,320
in this architecture uh when a client

00:17:56,000 --> 00:18:01,120
sends a request to solar

00:17:58,320 --> 00:18:01,919
solar locally indexes that the document

00:18:01,120 --> 00:18:05,200
um

00:18:01,919 --> 00:18:08,480
and then puts this document onto

00:18:05,200 --> 00:18:12,160
under queue and source one and desk two

00:18:08,480 --> 00:18:14,000
are basically uh topics in this case and

00:18:12,160 --> 00:18:14,720
the reason why i'm gonna refer to a

00:18:14,000 --> 00:18:16,880
bunch of things

00:18:14,720 --> 00:18:18,080
using terminology that's generally

00:18:16,880 --> 00:18:19,760
common for kafka

00:18:18,080 --> 00:18:21,600
may not be common for other queuing

00:18:19,760 --> 00:18:24,240
systems um

00:18:21,600 --> 00:18:24,640
is it's just because of that uh that the

00:18:24,240 --> 00:18:26,640
the

00:18:24,640 --> 00:18:27,679
implementation out of out of the box for

00:18:26,640 --> 00:18:30,880
this would be

00:18:27,679 --> 00:18:33,280
would be kafka to begin with um

00:18:30,880 --> 00:18:35,520
we would use kafka to begin with so

00:18:33,280 --> 00:18:37,280
solar writes this to a source topic

00:18:35,520 --> 00:18:39,120
uh let's call it source one because it

00:18:37,280 --> 00:18:39,919
belongs to data center one on the left

00:18:39,120 --> 00:18:42,320
hand side

00:18:39,919 --> 00:18:43,200
uh there's a mirror of some sort that

00:18:42,320 --> 00:18:46,080
mirrors this

00:18:43,200 --> 00:18:48,080
into a queue uh that's called test two

00:18:46,080 --> 00:18:48,720
uh a destination queue for data center

00:18:48,080 --> 00:18:50,240
two

00:18:48,720 --> 00:18:51,760
uh and there's a cross data center

00:18:50,240 --> 00:18:53,840
consumer uh who's

00:18:51,760 --> 00:18:55,600
who's responsible for consuming

00:18:53,840 --> 00:18:56,799
everything that's coming into its local

00:18:55,600 --> 00:19:00,080
destination queue

00:18:56,799 --> 00:19:02,400
and riding it onto solar uh and as

00:19:00,080 --> 00:19:04,480
i mentioned uh the isolation of

00:19:02,400 --> 00:19:06,320
responsibility in this case uh as solar

00:19:04,480 --> 00:19:08,640
is not expected to be the cue

00:19:06,320 --> 00:19:11,120
uh takes away a lot of problems that

00:19:08,640 --> 00:19:13,600
solar might have had with a cdcr

00:19:11,120 --> 00:19:13,600
solution

00:19:16,320 --> 00:19:22,720
if you wanted to wear replication

00:19:19,360 --> 00:19:23,360
it still stays easy again primarily

00:19:22,720 --> 00:19:26,000
because

00:19:23,360 --> 00:19:27,520
uh everything inside the white box is is

00:19:26,000 --> 00:19:28,000
abstracted out of solar and it's not

00:19:27,520 --> 00:19:29,760
really

00:19:28,000 --> 00:19:31,200
it doesn't really know what's going on

00:19:29,760 --> 00:19:32,960
inside that box which is where the

00:19:31,200 --> 00:19:35,679
complexity got added whatever bit of

00:19:32,960 --> 00:19:38,400
complexity there might be

00:19:35,679 --> 00:19:40,640
now in this case when an incoming

00:19:38,400 --> 00:19:43,600
request comes directly to dc2

00:19:40,640 --> 00:19:44,160
it gets written by solar onto the source

00:19:43,600 --> 00:19:46,559
topic

00:19:44,160 --> 00:19:47,919
for that data center gets mirrored to

00:19:46,559 --> 00:19:50,080
the destination topic

00:19:47,919 --> 00:19:51,440
of the other data center uh only to be

00:19:50,080 --> 00:19:53,360
consumed by a

00:19:51,440 --> 00:19:55,840
dc consumer that's running locally in

00:19:53,360 --> 00:19:59,039
that uh in in dc one

00:19:55,840 --> 00:20:00,480
and indexed into uh into this into that

00:19:59,039 --> 00:20:02,559
uh into the solar cluster running on

00:20:00,480 --> 00:20:04,080
that data center uh the cross pc

00:20:02,559 --> 00:20:06,640
consumer has checks and

00:20:04,080 --> 00:20:07,200
uh has checks in place to ensure and

00:20:06,640 --> 00:20:09,919
avoid

00:20:07,200 --> 00:20:10,960
circular mirroring so if if a request

00:20:09,919 --> 00:20:14,480
were to come

00:20:10,960 --> 00:20:15,280
uh originally into dc one solar is going

00:20:14,480 --> 00:20:18,320
to make sure

00:20:15,280 --> 00:20:21,360
that uh it does not come back

00:20:18,320 --> 00:20:23,520
through the source top source topic of

00:20:21,360 --> 00:20:24,799
data center 2. uh so there are there are

00:20:23,520 --> 00:20:28,400
checks and balances

00:20:24,799 --> 00:20:28,400
that ensure that that doesn't happen

00:20:30,000 --> 00:20:34,240
so the requirements for this new

00:20:32,000 --> 00:20:35,360
architecture are a messaging queue that

00:20:34,240 --> 00:20:37,679
messaging queue

00:20:35,360 --> 00:20:39,120
as i mentioned would be kafka to begin

00:20:37,679 --> 00:20:40,960
with but you could have your own

00:20:39,120 --> 00:20:42,159
implementation and have your own version

00:20:40,960 --> 00:20:43,840
of messaging queue

00:20:42,159 --> 00:20:45,919
it could be rapid mq it could be a file

00:20:43,840 --> 00:20:47,520
based messaging queue a proprietary

00:20:45,919 --> 00:20:49,280
internally your company might have

00:20:47,520 --> 00:20:52,080
created a messaging queue system

00:20:49,280 --> 00:20:53,760
uh and you could use it uh you'd need a

00:20:52,080 --> 00:20:54,320
very simple implementation that would

00:20:53,760 --> 00:20:57,039
allow you

00:20:54,320 --> 00:20:59,039
to to use that queue you'd need a

00:20:57,039 --> 00:21:02,000
messaging queue consumer implementation

00:20:59,039 --> 00:21:03,840
uh producer being optional you'd need a

00:21:02,000 --> 00:21:04,640
crosstc consumer that would be provided

00:21:03,840 --> 00:21:06,080
out of the box

00:21:04,640 --> 00:21:08,240
and nothing would need to really change

00:21:06,080 --> 00:21:10,880
in there maybe some configurations

00:21:08,240 --> 00:21:13,200
um and you'd need external versioning

00:21:10,880 --> 00:21:15,200
for multi-replication

00:21:13,200 --> 00:21:17,200
the reason why you need it only for

00:21:15,200 --> 00:21:21,440
multi-way replication is because

00:21:17,200 --> 00:21:24,480
if you were to send a in the traditional

00:21:21,440 --> 00:21:26,320
uh one-way replication model

00:21:24,480 --> 00:21:27,919
it's going to piggyback on solar's

00:21:26,320 --> 00:21:30,400
versions if provided

00:21:27,919 --> 00:21:32,320
in the original originating data center

00:21:30,400 --> 00:21:34,960
to just replicate everything over

00:21:32,320 --> 00:21:35,600
but if you if you don't uh if you have

00:21:34,960 --> 00:21:38,480
multiple

00:21:35,600 --> 00:21:39,120
data centers acting as source then you

00:21:38,480 --> 00:21:40,960
can't have

00:21:39,120 --> 00:21:43,039
let that happen because those versions

00:21:40,960 --> 00:21:45,039
are not synchronized

00:21:43,039 --> 00:21:47,520
and and you need an external version in

00:21:45,039 --> 00:21:47,520
that case

00:21:48,880 --> 00:21:52,400
ingesting data into this entire system

00:21:51,280 --> 00:21:54,240
um

00:21:52,400 --> 00:21:56,720
can happen in one of the two ways it can

00:21:54,240 --> 00:21:58,640
either be sent directly to the queue

00:21:56,720 --> 00:22:00,240
and consumed by the consumer in which

00:21:58,640 --> 00:22:03,200
case you would need

00:22:00,240 --> 00:22:04,400
an external version you would also not

00:22:03,200 --> 00:22:06,320
get all the benefits

00:22:04,400 --> 00:22:08,000
of the second option which is using a

00:22:06,320 --> 00:22:08,640
mirroring update request processor which

00:22:08,000 --> 00:22:11,360
is a custom

00:22:08,640 --> 00:22:13,039
request processor that that makes sure

00:22:11,360 --> 00:22:14,640
that the request is processed

00:22:13,039 --> 00:22:16,480
the way it's supposed to be processed

00:22:14,640 --> 00:22:19,600
knowing that uh the trustee

00:22:16,480 --> 00:22:21,440
is enabled um the biggest one of the

00:22:19,600 --> 00:22:23,039
biggest benefit that it provides is the

00:22:21,440 --> 00:22:24,960
abstraction of the underlying queue so

00:22:23,039 --> 00:22:26,240
if you were to start off with kafka

00:22:24,960 --> 00:22:26,799
because that's what solar provides out

00:22:26,240 --> 00:22:29,840
of the box

00:22:26,799 --> 00:22:32,559
or would provide out of the box um

00:22:29,840 --> 00:22:35,039
but move on to using a different queuing

00:22:32,559 --> 00:22:38,480
mechanism because uh that is your

00:22:35,039 --> 00:22:40,720
you know cue of preference you wouldn't

00:22:38,480 --> 00:22:42,480
have to change your client code because

00:22:40,720 --> 00:22:44,320
the client's not writing to this queue

00:22:42,480 --> 00:22:47,520
and is agnostic of that queue

00:22:44,320 --> 00:22:48,559
um so that's one of the benefits the

00:22:47,520 --> 00:22:49,919
second benefit is

00:22:48,559 --> 00:22:51,600
that it allows for more checks and

00:22:49,919 --> 00:22:53,760
controls before the submission

00:22:51,600 --> 00:22:55,520
a request that's coming in might fail on

00:22:53,760 --> 00:22:56,880
the originating data center in which

00:22:55,520 --> 00:22:57,600
case it shouldn't be written to the

00:22:56,880 --> 00:22:59,919
queue

00:22:57,600 --> 00:23:01,280
but if you if you write directly to the

00:22:59,919 --> 00:23:03,760
queue all these requests

00:23:01,280 --> 00:23:05,039
make it into solar it might succeed on

00:23:03,760 --> 00:23:07,600
one of the data centers

00:23:05,039 --> 00:23:09,280
might not succeed on the other say

00:23:07,600 --> 00:23:11,360
because the configs were different

00:23:09,280 --> 00:23:12,960
something something was off uh and the

00:23:11,360 --> 00:23:14,640
cross dc consumer in this case would

00:23:12,960 --> 00:23:15,600
have to be intelligent enough to figure

00:23:14,640 --> 00:23:18,720
out whether to

00:23:15,600 --> 00:23:22,080
retry it discard it or what piece what

00:23:18,720 --> 00:23:25,280
needs to be done with this request

00:23:22,080 --> 00:23:26,159
and um an important aspect that we used

00:23:25,280 --> 00:23:29,039
with an apple

00:23:26,159 --> 00:23:29,919
uh with our cross data center uh

00:23:29,039 --> 00:23:32,880
replication

00:23:29,919 --> 00:23:33,360
was to handle deletes better a system

00:23:32,880 --> 00:23:36,320
like this

00:23:33,360 --> 00:23:37,840
is designed so that you could have you

00:23:36,320 --> 00:23:40,960
would avoid any accidents

00:23:37,840 --> 00:23:42,960
happening um bringing down the system

00:23:40,960 --> 00:23:44,960
so an accidental delete sent to one data

00:23:42,960 --> 00:23:47,679
center uh in our case

00:23:44,960 --> 00:23:49,120
gets mapped into an update that only

00:23:47,679 --> 00:23:52,000
flags those updates

00:23:49,120 --> 00:23:53,039
by adding a feel to those documents as

00:23:52,000 --> 00:23:55,520
as deleted

00:23:53,039 --> 00:23:56,320
um a parallel process that runs

00:23:55,520 --> 00:23:59,840
occasionally

00:23:56,320 --> 00:24:01,279
or frequently uh sorry is responsible to

00:23:59,840 --> 00:24:02,799
then go ahead and

00:24:01,279 --> 00:24:04,320
clean up these documents at a later

00:24:02,799 --> 00:24:05,440
point in time what it will what it

00:24:04,320 --> 00:24:07,679
allows you to do

00:24:05,440 --> 00:24:09,120
is say delete came in into data center

00:24:07,679 --> 00:24:12,320
one um

00:24:09,120 --> 00:24:14,080
by the time you're you've realized that

00:24:12,320 --> 00:24:15,840
it was an accidental delete you could

00:24:14,080 --> 00:24:17,600
still go to data center to

00:24:15,840 --> 00:24:19,360
undelete those documents because those

00:24:17,600 --> 00:24:21,679
documents were just marked

00:24:19,360 --> 00:24:23,440
and then use backup and restore or

00:24:21,679 --> 00:24:23,840
something else to restore all of that

00:24:23,440 --> 00:24:27,919
data

00:24:23,840 --> 00:24:27,919
back you haven't really lost that data

00:24:29,600 --> 00:24:33,919
all the requests that are processed in

00:24:31,840 --> 00:24:36,000
this uh

00:24:33,919 --> 00:24:38,320
in this architecture are mirrored

00:24:36,000 --> 00:24:39,600
requests uh merit request is nothing but

00:24:38,320 --> 00:24:42,320
something that

00:24:39,600 --> 00:24:42,640
encapsulates the original solar request

00:24:42,320 --> 00:24:45,440
uh

00:24:42,640 --> 00:24:46,720
while adding uh some mirroring metadata

00:24:45,440 --> 00:24:49,120
that's used for tracking

00:24:46,720 --> 00:24:51,360
and metrics purposes uh things like

00:24:49,120 --> 00:24:51,919
attempt and submit time that allows you

00:24:51,360 --> 00:24:55,279
to track

00:24:51,919 --> 00:24:57,279
for example uh the submit time um

00:24:55,279 --> 00:24:58,960
is the time when the request was

00:24:57,279 --> 00:25:00,159
originally or first written into the

00:24:58,960 --> 00:25:03,279
system

00:25:00,159 --> 00:25:04,880
by one of solar instances in one of the

00:25:03,279 --> 00:25:07,840
data centers

00:25:04,880 --> 00:25:08,880
when a receiving data center processes

00:25:07,840 --> 00:25:10,960
this request

00:25:08,880 --> 00:25:12,320
it knows how long has it been and what

00:25:10,960 --> 00:25:16,159
the latency of this

00:25:12,320 --> 00:25:19,360
looks like so um allowing you to alert

00:25:16,159 --> 00:25:22,159
if you're off and your slas

00:25:19,360 --> 00:25:24,640
are not met attempt is another thing

00:25:22,159 --> 00:25:27,120
that allows you to track an alert if the

00:25:24,640 --> 00:25:29,520
same request is getting rejected

00:25:27,120 --> 00:25:31,840
by the cross dc consumer or not being

00:25:29,520 --> 00:25:33,520
successfully processed by the consumer

00:25:31,840 --> 00:25:36,080
in which case you could go back and

00:25:33,520 --> 00:25:42,080
figure out figure out issues like

00:25:36,080 --> 00:25:44,880
an out of sync config

00:25:42,080 --> 00:25:45,440
the cross dc consumer uh in this entire

00:25:44,880 --> 00:25:48,559
framework

00:25:45,440 --> 00:25:50,320
is a standalone app that has a simple

00:25:48,559 --> 00:25:52,000
responsibility of reading from the queue

00:25:50,320 --> 00:25:54,960
and writing to solar

00:25:52,000 --> 00:25:56,240
but also an important and intelligent

00:25:54,960 --> 00:25:58,960
ability to figure out

00:25:56,240 --> 00:26:00,320
what kind of requests to discard and

00:25:58,960 --> 00:26:02,799
which ones to resubmit

00:26:00,320 --> 00:26:03,440
into the original queue and i'm again

00:26:02,799 --> 00:26:06,720
using the

00:26:03,440 --> 00:26:10,000
term topic because uh kafka is the

00:26:06,720 --> 00:26:14,159
is the preferred queuing

00:26:10,000 --> 00:26:16,799
mechanism used here um so

00:26:14,159 --> 00:26:18,159
after a lot of trials and errors and

00:26:16,799 --> 00:26:19,840
we've learned it the hard way

00:26:18,159 --> 00:26:21,440
realized that the only kind of request

00:26:19,840 --> 00:26:24,480
that is safe to drop

00:26:21,440 --> 00:26:26,720
are 409s which is basically uh

00:26:24,480 --> 00:26:28,400
worse and conflicts in case of

00:26:26,720 --> 00:26:28,960
optimistic concurrency when a request

00:26:28,400 --> 00:26:30,799
comes in

00:26:28,960 --> 00:26:32,799
that the crosstc consumer is trying to

00:26:30,799 --> 00:26:34,559
send a solar and solar response to the

00:26:32,799 --> 00:26:36,960
00:26:34,559 --> 00:26:38,000
would translate to solar already having

00:26:36,960 --> 00:26:40,720
a more recent

00:26:38,000 --> 00:26:41,919
version of this document in which case

00:26:40,720 --> 00:26:44,159
it's safe to discard this

00:26:41,919 --> 00:26:45,039
this document in all other cases it's

00:26:44,159 --> 00:26:48,240
safe to

00:26:45,039 --> 00:26:48,240
retain these documents

00:26:50,080 --> 00:26:53,840
just like the backup and restore uh

00:26:52,559 --> 00:26:56,320
story evolved

00:26:53,840 --> 00:26:58,559
uh into allowing and using more

00:26:56,320 --> 00:27:02,159
cloud-based or is evolving into

00:26:58,559 --> 00:27:05,360
using more cloud-based uh

00:27:02,159 --> 00:27:06,640
backup repositories uh this seems true

00:27:05,360 --> 00:27:08,559
for this approach here

00:27:06,640 --> 00:27:10,159
as it's not limited to kafka and even

00:27:08,559 --> 00:27:11,919
though it might start off with kafka

00:27:10,159 --> 00:27:13,120
this interface allows for using custom

00:27:11,919 --> 00:27:14,640
queue implementation

00:27:13,120 --> 00:27:18,159
and that may or may not be something

00:27:14,640 --> 00:27:21,360
that you really desire or want or

00:27:18,159 --> 00:27:23,360
need but it certainly allows you

00:27:21,360 --> 00:27:24,960
to stay open to the idea of switching

00:27:23,360 --> 00:27:27,600
over to a totally different queuing

00:27:24,960 --> 00:27:27,600
infrastructure

00:27:27,840 --> 00:27:31,120
to extend that interface and this might

00:27:30,080 --> 00:27:34,240
be

00:27:31,120 --> 00:27:34,880
a little too much of detail but if you

00:27:34,240 --> 00:27:38,080
were to be

00:27:34,880 --> 00:27:40,240
if you were uh to extend the interface

00:27:38,080 --> 00:27:41,919
and use your own custom messaging queue

00:27:40,240 --> 00:27:44,559
you basically need to define source

00:27:41,919 --> 00:27:47,279
config and this is all in flux so

00:27:44,559 --> 00:27:48,320
uh i wouldn't please don't hold me to

00:27:47,279 --> 00:27:50,720
this for now

00:27:48,320 --> 00:27:51,600
um so there's source config that you'd

00:27:50,720 --> 00:27:54,080
need to implement

00:27:51,600 --> 00:27:55,520
and across dc consumer that accepts a

00:27:54,080 --> 00:27:58,799
message processor

00:27:55,520 --> 00:27:59,200
uh the message processor uh basically

00:27:58,799 --> 00:28:02,480
has

00:27:59,200 --> 00:28:03,679
all the logic that deals with uh sending

00:28:02,480 --> 00:28:05,679
message to solar

00:28:03,679 --> 00:28:07,200
figuring out what to do in case of a

00:28:05,679 --> 00:28:08,799
failure

00:28:07,200 --> 00:28:10,640
and everything else around it so all the

00:28:08,799 --> 00:28:12,640
intelligent aspect of stuff

00:28:10,640 --> 00:28:14,640
is in the message processor already

00:28:12,640 --> 00:28:16,559
pre-programmed the crosstc consumer is

00:28:14,640 --> 00:28:18,559
what you need to implement

00:28:16,559 --> 00:28:20,240
the responsibility of which is to get

00:28:18,559 --> 00:28:22,559
mirrored objects from the queue

00:28:20,240 --> 00:28:23,440
and put it back to the queue in case of

00:28:22,559 --> 00:28:25,279
a failure

00:28:23,440 --> 00:28:27,840
and the message processor is going to

00:28:25,279 --> 00:28:29,600
let the cross dc consumer know whether

00:28:27,840 --> 00:28:31,039
an object needs to be put back into the

00:28:29,600 --> 00:28:32,960
queue or discarded

00:28:31,039 --> 00:28:34,559
so it really needs to make no decision

00:28:32,960 --> 00:28:37,679
it just needs to be able to get

00:28:34,559 --> 00:28:39,200
and put back uh objects from and into

00:28:37,679 --> 00:28:40,640
the cube

00:28:39,200 --> 00:28:42,799
and the best part is that this approach

00:28:40,640 --> 00:28:46,640
works well with event driven systems so

00:28:42,799 --> 00:28:46,640
which is what i've been working with

00:28:48,159 --> 00:28:51,760
so um the road ahead on this is to

00:28:50,799 --> 00:28:55,360
release

00:28:51,760 --> 00:28:58,399
this kind of more basic

00:28:55,360 --> 00:29:00,880
trust dc solutions especially because

00:28:58,399 --> 00:29:01,760
9.0 would not have the old version and a

00:29:00,880 --> 00:29:04,720
lot of people

00:29:01,760 --> 00:29:06,080
i realized kind of won the need for it

00:29:04,720 --> 00:29:08,320
they're already using

00:29:06,080 --> 00:29:10,159
uh the old version and would need some

00:29:08,320 --> 00:29:12,720
form of a crosstv replication to be

00:29:10,159 --> 00:29:14,240
offered by solar

00:29:12,720 --> 00:29:16,480
it does not report any metrics to a

00:29:14,240 --> 00:29:18,880
reporting system as of yet uh

00:29:16,480 --> 00:29:20,720
or that's not what i'm working on or

00:29:18,880 --> 00:29:23,360
concentrating on at this point

00:29:20,720 --> 00:29:24,000
um and that would be great to add it

00:29:23,360 --> 00:29:25,520
does log

00:29:24,000 --> 00:29:27,120
all sorts of problems so you can always

00:29:25,520 --> 00:29:29,760
take your logs and figure out

00:29:27,120 --> 00:29:31,679
what's going on and if something's off

00:29:29,760 --> 00:29:33,440
uh or if everything is okay

00:29:31,679 --> 00:29:35,039
um it does not handle collection api

00:29:33,440 --> 00:29:36,480
requests which would be a good to have

00:29:35,039 --> 00:29:38,399
thing uh it's something that we've had

00:29:36,480 --> 00:29:40,000
with an apple so i'd be happy to add it

00:29:38,399 --> 00:29:42,480
at a later point in time

00:29:40,000 --> 00:29:43,600
but for now uh none of that is part of

00:29:42,480 --> 00:29:46,559
the solution uh

00:29:43,600 --> 00:29:48,720
this this phase um and it's great to

00:29:46,559 --> 00:29:50,960
have trustee c replicated clusters

00:29:48,720 --> 00:29:53,600
but it's really important to have some

00:29:50,960 --> 00:29:55,919
form of a mechanism to ensure that these

00:29:53,600 --> 00:29:59,360
clusters are in sync these clusters

00:29:55,919 --> 00:30:01,600
are working well together um

00:29:59,360 --> 00:30:03,919
in terms of even if it's not

00:30:01,600 --> 00:30:07,200
self-healing it doesn't fix any problem

00:30:03,919 --> 00:30:08,960
it's important for uh for for there to

00:30:07,200 --> 00:30:11,360
be a way for people to know when

00:30:08,960 --> 00:30:13,360
when things are out of sync and then

00:30:11,360 --> 00:30:15,039
support for more queue systems

00:30:13,360 --> 00:30:16,640
which again is completely subject to

00:30:15,039 --> 00:30:18,480
what the community might want

00:30:16,640 --> 00:30:20,640
maybe everyone just uses kafka that's

00:30:18,480 --> 00:30:22,399
what they love and that's what they use

00:30:20,640 --> 00:30:24,960
um and they don't really want anything

00:30:22,399 --> 00:30:25,600
else but uh if people need something

00:30:24,960 --> 00:30:28,159
else

00:30:25,600 --> 00:30:30,000
to be supported uh that's that's

00:30:28,159 --> 00:30:33,440
certainly on the road ahead

00:30:30,000 --> 00:30:34,960
um and all of this can happen by

00:30:33,440 --> 00:30:36,480
community participation so if there's

00:30:34,960 --> 00:30:37,039
some if this is something that interests

00:30:36,480 --> 00:30:39,520
you

00:30:37,039 --> 00:30:40,640
please feel free to ping or participate

00:30:39,520 --> 00:30:43,679
directly whatever

00:30:40,640 --> 00:30:45,840
uh might be your preferred way uh

00:30:43,679 --> 00:30:47,120
to get involved in this but yes uh and

00:30:45,840 --> 00:30:48,880
it doesn't have to be code can be

00:30:47,120 --> 00:30:53,200
testing it can be trying out

00:30:48,880 --> 00:30:53,200
pitching in ideas everything is valued

00:30:54,240 --> 00:30:59,039
so while i spoke a lot about so as a

00:30:56,960 --> 00:31:01,360
primary data store

00:30:59,039 --> 00:31:03,440
i spoke about a lot of hadr sort of

00:31:01,360 --> 00:31:05,519
being safe and stable scalable

00:31:03,440 --> 00:31:08,159
and you being able to safely use solar

00:31:05,519 --> 00:31:10,159
and critical systems

00:31:08,159 --> 00:31:12,240
sorry i'm very sorry i'm sure to

00:31:10,159 --> 00:31:13,440
interrupt you uh because we are running

00:31:12,240 --> 00:31:14,960
out of time

00:31:13,440 --> 00:31:16,559
so maybe find the thought you want to

00:31:14,960 --> 00:31:18,240
share and then we have to wrap this up

00:31:16,559 --> 00:31:19,919
in the interest intro yeah this is this

00:31:18,240 --> 00:31:22,080
is actually the last slide so i'm done

00:31:19,919 --> 00:31:22,080
yeah

00:31:22,799 --> 00:31:28,000
so uh the question is whether the

00:31:26,320 --> 00:31:29,600
you could use solar as a primary data

00:31:28,000 --> 00:31:32,320
store

00:31:29,600 --> 00:31:33,120
pldr is known and that is basically

00:31:32,320 --> 00:31:35,360
because yes it

00:31:33,120 --> 00:31:37,039
offers h-a-n-d-r but it's just not

00:31:35,360 --> 00:31:38,640
designed to be a primary data store it's

00:31:37,039 --> 00:31:39,840
not designed for storing documents that

00:31:38,640 --> 00:31:42,960
are really large and

00:31:39,840 --> 00:31:45,279
uh do not follow the

00:31:42,960 --> 00:31:46,080
the kind of uh format that solar is

00:31:45,279 --> 00:31:49,519
designed for

00:31:46,080 --> 00:31:51,279
so yeah um solar offers a lot and it's a

00:31:49,519 --> 00:31:52,880
great search engine so i would recommend

00:31:51,279 --> 00:31:56,960
that you use solar for just that

00:31:52,880 --> 00:31:59,039
um and that's about it thank you so much

00:31:56,960 --> 00:32:01,039
okay thank you very much armstrom i

00:31:59,039 --> 00:32:03,120
think this gave us great insights and i

00:32:01,039 --> 00:32:05,440
think many of us are looking forward

00:32:03,120 --> 00:32:07,360
to the new cross data center replication

00:32:05,440 --> 00:32:09,279
i think it's also good to see

00:32:07,360 --> 00:32:11,440
uh that the stuff you you're developed

00:32:09,279 --> 00:32:13,519
at apple uh will finally

00:32:11,440 --> 00:32:14,640
be open sourced so i think that's always

00:32:13,519 --> 00:32:17,760
good to have something

00:32:14,640 --> 00:32:18,320
that is practice proven practice proven

00:32:17,760 --> 00:32:29,840
to

00:32:18,320 --> 00:32:29,840
to see and to make it into open source

00:32:40,480 --> 00:32:42,559

YouTube URL: https://www.youtube.com/watch?v=Nx5uUVj3QOc


