Title: #Haystack: Tim Allison - Evolving Relevance
Publication date: 2020-07-02
Playlist: Haystack - Joint Virtual Event 2020
Description: 
	More: https://berlinbuzzwords.de/session/evolving-relevance

This talk builds on work by Simon Hughes and others to apply genetic algorithms (GA) and random search for finding optimal parameters for relevance ranking. While manual tuning can be useful, the parameter space is too vast to be confident that one has found optimal parameters without overfitting.We'll present Quaerite (https://github.com/tballison/quaerite), an open source toolkit that allows users to specify experiment parameters and then run a random search and/or a GA to identify the best settings given ground truth.We'll offer an overview of mapping parameter space to a GA problem in both Solr and Elasticsearch, the importance of the baked-in n-fold cross-validation, and the surprises and successes found with deployed search systems.
Captions: 
	00:00:08,769 --> 00:00:13,309
and welcome back to our haystack TV

00:00:12,110 --> 00:00:16,520
stream today

00:00:13,309 --> 00:00:18,950
so our second talk is from Tim Allison

00:00:16,520 --> 00:00:22,700
tim has been working in natural language

00:00:18,950 --> 00:00:24,949
processing since 2002 and the last few

00:00:22,700 --> 00:00:27,470
years his focus has shifted to around

00:00:24,949 --> 00:00:29,630
content extraction Advanced Search and

00:00:27,470 --> 00:00:33,710
relevance tuning Tim Tim is currently

00:00:29,630 --> 00:00:35,210
working at the Jet Propulsion Laboratory

00:00:33,710 --> 00:00:38,089
at the California Institute of

00:00:35,210 --> 00:00:40,729
Technology and he is also a member of

00:00:38,089 --> 00:00:42,979
the Apache Software Foundation the chair

00:00:40,729 --> 00:00:46,519
of hacci tika commuter and apache open

00:00:42,979 --> 00:00:49,190
LLP Apache Solr Apache PDF box and

00:00:46,519 --> 00:00:50,720
Apache Pio I and in the former life he

00:00:49,190 --> 00:00:53,780
was a professor of Latin and Greek so I

00:00:50,720 --> 00:00:56,150
can think we can we can safely say he he

00:00:53,780 --> 00:00:57,650
knows a lot about stuff and without any

00:00:56,150 --> 00:00:58,760
further ado I'm going to introduce Tim

00:00:57,650 --> 00:01:02,150
Tims gonna be talking today about

00:00:58,760 --> 00:01:04,070
genetic algorithms and random search for

00:01:02,150 --> 00:01:06,770
finding optimal parameters for relevance

00:01:04,070 --> 00:01:09,110
ranking Tim Creighton thank you so much

00:01:06,770 --> 00:01:11,119
Shirley and thank you to the organizers

00:01:09,110 --> 00:01:13,579
of Berlin buzzwords and haystack and my

00:01:11,119 --> 00:01:16,100
seas for bringing off a fantastic set of

00:01:13,579 --> 00:01:18,369
talks and colloquiums

00:01:16,100 --> 00:01:20,570
I've had a lot of fun so thank you

00:01:18,369 --> 00:01:22,490
alright so I'm going to talk a little

00:01:20,570 --> 00:01:24,369
bit first a little bit about me

00:01:22,490 --> 00:01:27,049
Charlie's gone over some of the details

00:01:24,369 --> 00:01:30,679
some of you may have seen some of my

00:01:27,049 --> 00:01:32,299
work on tika so the other important

00:01:30,679 --> 00:01:34,399
point about this talk before I really

00:01:32,299 --> 00:01:40,670
get going is that some of this work

00:01:34,399 --> 00:01:43,759
initially as with all evolving things

00:01:40,670 --> 00:01:45,200
evolved from earlier work at my former

00:01:43,759 --> 00:01:46,939
employer than later corporation so some

00:01:45,200 --> 00:01:50,060
of these slides are under copyright with

00:01:46,939 --> 00:01:52,850
them so I will be talking today about

00:01:50,060 --> 00:01:54,380
teka teka and more teeka I'm joking but

00:01:52,850 --> 00:01:56,569
seriously that's not why we're here

00:01:54,380 --> 00:02:00,969
today we are here today instead to talk

00:01:56,569 --> 00:02:04,069
about genetic algorithms and evolving

00:02:00,969 --> 00:02:05,209
ways of improving search so I'll start

00:02:04,069 --> 00:02:08,660
off with the introduction and motivation

00:02:05,209 --> 00:02:09,950
for what I from my evolution I'll talk

00:02:08,660 --> 00:02:11,860
about some of the methods that I

00:02:09,950 --> 00:02:14,930
developed a handle and with some

00:02:11,860 --> 00:02:19,489
temperance and some findings

00:02:14,930 --> 00:02:22,340
of recent findings alright so first I

00:02:19,489 --> 00:02:28,459
had tipped to Simon Hughes who spoke

00:02:22,340 --> 00:02:31,190
about evolving relevancy back in 2016

00:02:28,459 --> 00:02:34,459
before him others had tried had also

00:02:31,190 --> 00:02:38,090
experimented with this it's a fun area

00:02:34,459 --> 00:02:39,769
to work I will say that I did not get

00:02:38,090 --> 00:02:42,769
involved with this particular set of

00:02:39,769 --> 00:02:45,620
algorithms because I thought it was

00:02:42,769 --> 00:02:46,730
necessarily the best tool to use but

00:02:45,620 --> 00:02:48,230
rather it's something that I kind of

00:02:46,730 --> 00:02:50,510
evolved into and it just seems like an

00:02:48,230 --> 00:02:52,790
easy next step to take so I'll share

00:02:50,510 --> 00:02:57,680
some of some of the work on that today

00:02:52,790 --> 00:03:00,769
and off we go alright so we now know

00:02:57,680 --> 00:03:02,510
there is a a chorus of open source

00:03:00,769 --> 00:03:06,230
relevance tools as was announced

00:03:02,510 --> 00:03:10,450
yesterday two years ago so that's the

00:03:06,230 --> 00:03:14,030
combination of Cupid re quirky and Samui

00:03:10,450 --> 00:03:16,040
that is all a suite of really useful

00:03:14,030 --> 00:03:17,919
tools I'm I was really gratified to see

00:03:16,040 --> 00:03:20,840
that they're placed into a single

00:03:17,919 --> 00:03:23,000
framework to some degree so that you can

00:03:20,840 --> 00:03:25,730
have a nice toolkit for a number of

00:03:23,000 --> 00:03:27,620
different areas the reason that I

00:03:25,730 --> 00:03:29,870
started working with quiet air building

00:03:27,620 --> 00:03:32,120
it initially was before those had all

00:03:29,870 --> 00:03:33,919
been put together and also I felt that

00:03:32,120 --> 00:03:35,269
there wasn't quite something out there

00:03:33,919 --> 00:03:36,079
that allowed me to do what I wanted to

00:03:35,269 --> 00:03:38,090
and I'll talk about some of the

00:03:36,079 --> 00:03:40,579
differences between what my little tool

00:03:38,090 --> 00:03:43,400
can do and what some of the other tools

00:03:40,579 --> 00:03:45,859
can do and hopefully once my stuff

00:03:43,400 --> 00:03:49,910
matures more there could be room for it

00:03:45,859 --> 00:03:51,049
maybe of course we will see but I do

00:03:49,910 --> 00:03:52,609
look forward to collaborating whether

00:03:51,049 --> 00:03:57,319
that's simply transferring our ideas

00:03:52,609 --> 00:03:59,150
knowledge findings and so on whether

00:03:57,319 --> 00:04:02,780
it's actual code or not not not a big

00:03:59,150 --> 00:04:04,579
concern for me all right so why even

00:04:02,780 --> 00:04:06,349
bother with this first off of course as

00:04:04,579 --> 00:04:09,049
we all know search is easy it's solved

00:04:06,349 --> 00:04:10,220
so we shouldn't be here so that after I

00:04:09,049 --> 00:04:12,919
hear from around the world even though

00:04:10,220 --> 00:04:14,359
everybody nobody's nobody can speak in

00:04:12,919 --> 00:04:16,489
this channel of course search is not

00:04:14,359 --> 00:04:18,109
easy and we all know that Google makes

00:04:16,489 --> 00:04:19,280
it look easy so we have the uphill

00:04:18,109 --> 00:04:21,229
battle of trying to explain to people

00:04:19,280 --> 00:04:24,830
why it's not especially on site search

00:04:21,229 --> 00:04:26,970
and intranet search Thank You charlie

00:04:24,830 --> 00:04:29,430
for this

00:04:26,970 --> 00:04:31,920
beautiful diagram for folks in this

00:04:29,430 --> 00:04:34,740
audience you already know that the

00:04:31,920 --> 00:04:36,510
components of a search system search is

00:04:34,740 --> 00:04:39,030
not easy there are lots of different

00:04:36,510 --> 00:04:42,720
areas for tuning and lots of various

00:04:39,030 --> 00:04:45,150
areas for things to go wrong so trying

00:04:42,720 --> 00:04:48,270
to figure out where to focus ones energy

00:04:45,150 --> 00:04:51,000
trying to explore the parameter space to

00:04:48,270 --> 00:04:53,280
understand how your components are

00:04:51,000 --> 00:04:55,650
working together to yield high-quality

00:04:53,280 --> 00:04:58,070
results can be challenging especially

00:04:55,650 --> 00:05:01,740
when the parameter space is so big

00:04:58,070 --> 00:05:03,120
speaking of which as of this is somewhat

00:05:01,740 --> 00:05:05,070
dated but I don't think it's changed too

00:05:03,120 --> 00:05:08,250
much something this is these are some

00:05:05,070 --> 00:05:11,310
available parameters just within a kind

00:05:08,250 --> 00:05:14,850
of conventional solar I say conventional

00:05:11,310 --> 00:05:16,950
to differentiate from Trey's talk and

00:05:14,850 --> 00:05:19,050
all of the topics he was talking about

00:05:16,950 --> 00:05:21,570
which are fantastic on the thought

00:05:19,050 --> 00:05:23,390
factors in the dense vectors and all of

00:05:21,570 --> 00:05:26,130
that fun stuff and the knowledge graphs

00:05:23,390 --> 00:05:27,810
before you even get to that with Ian's

00:05:26,130 --> 00:05:29,400
solar and within elasticsearch you have

00:05:27,810 --> 00:05:30,840
all the different tokenizer you can use

00:05:29,400 --> 00:05:32,340
you have all the different token filters

00:05:30,840 --> 00:05:35,640
and as we all know you can stack them on

00:05:32,340 --> 00:05:37,200
top of each other order matters you have

00:05:35,640 --> 00:05:38,640
different query parsers you can boost

00:05:37,200 --> 00:05:41,100
all sorts of different things you can do

00:05:38,640 --> 00:05:44,700
phrasal boosting and shingling you can

00:05:41,100 --> 00:05:46,890
do minimum should match you can do token

00:05:44,700 --> 00:05:48,900
or field based scoring best fields most

00:05:46,890 --> 00:05:51,330
fields you can synonym list taxonomy z'

00:05:48,900 --> 00:05:54,360
and thanks shout out to Erica for an

00:05:51,330 --> 00:05:56,940
awesome talk on that and some of the

00:05:54,360 --> 00:05:59,520
complexities with those obviously you

00:05:56,940 --> 00:06:01,919
can also now manipulate the scoring

00:05:59,520 --> 00:06:03,990
parameters and be m25 in busine

00:06:01,919 --> 00:06:05,700
ecosystem elevate file for solar

00:06:03,990 --> 00:06:08,100
alternate methods to do that in

00:06:05,700 --> 00:06:10,470
elasticsearch external signal enrichment

00:06:08,100 --> 00:06:13,290
so lots of different things to do that

00:06:10,470 --> 00:06:14,430
including analysis of Cori logs all

00:06:13,290 --> 00:06:15,750
sorts of other things there and then of

00:06:14,430 --> 00:06:20,280
course it finally at the bottom I get

00:06:15,750 --> 00:06:22,410
around to rewriting via machine learning

00:06:20,280 --> 00:06:25,050
whether that's learning to rank or other

00:06:22,410 --> 00:06:26,370
things and of course as tre pointed out

00:06:25,050 --> 00:06:28,470
in this talk just earlier there are all

00:06:26,370 --> 00:06:31,229
sorts of other ways of measuring

00:06:28,470 --> 00:06:33,930
similarity including with inspectors so

00:06:31,229 --> 00:06:37,520
it's the the number of parameters we

00:06:33,930 --> 00:06:40,170
have to play with is rather astounding

00:06:37,520 --> 00:06:41,430
and let's not forget I love this one

00:06:40,170 --> 00:06:44,040
that each token filter can have its own

00:06:41,430 --> 00:06:47,610
a whole bunch of parameters so the the

00:06:44,040 --> 00:06:50,640
the parameter space is just enormous as

00:06:47,610 --> 00:06:52,650
we all know so what to do what to do

00:06:50,640 --> 00:06:55,080
for this conference I don't need to

00:06:52,650 --> 00:06:56,550
mention go out and buy that book if you

00:06:55,080 --> 00:06:58,380
haven't already you'll get two copies

00:06:56,550 --> 00:07:02,610
it's a really really nice way of

00:06:58,380 --> 00:07:06,720
thinking about how to craft the relevant

00:07:02,610 --> 00:07:07,830
signal from with various techniques and

00:07:06,720 --> 00:07:10,170
how to layer different types of

00:07:07,830 --> 00:07:13,410
relevance to achieve what you're trying

00:07:10,170 --> 00:07:16,140
to do one of my takeaways in that book

00:07:13,410 --> 00:07:19,130
and it was absolutely foundational to my

00:07:16,140 --> 00:07:22,380
work with relevance and relevance tuning

00:07:19,130 --> 00:07:25,200
but one thing I found didn't quite work

00:07:22,380 --> 00:07:27,210
for me in the context I was working in

00:07:25,200 --> 00:07:29,340
is that the one-off queries or the

00:07:27,210 --> 00:07:31,740
optimizing for individual queries here

00:07:29,340 --> 00:07:33,660
and there didn't have the systemic

00:07:31,740 --> 00:07:35,040
approach that I wanted for some of the

00:07:33,660 --> 00:07:39,060
clients I was working with at the time

00:07:35,040 --> 00:07:40,890
and now so that book has really not in

00:07:39,060 --> 00:07:43,020
my opinion has really nice set of basics

00:07:40,890 --> 00:07:47,400
and wit tools and ways of training and

00:07:43,020 --> 00:07:49,380
in tuning systems but I wanted to go a

00:07:47,400 --> 00:07:51,600
little bit beyond that into seeing how

00:07:49,380 --> 00:07:54,950
we can make changes that that have an

00:07:51,600 --> 00:07:58,350
effect across a broader swath of queries

00:07:54,950 --> 00:07:59,880
so the other thing yeah and also thank

00:07:58,350 --> 00:08:02,930
you Doug and John for permission to use

00:07:59,880 --> 00:08:06,090
the search engineer image in this talk

00:08:02,930 --> 00:08:08,040
all right so what I'll be focusing on

00:08:06,090 --> 00:08:09,720
now obviously there are in my mind there

00:08:08,040 --> 00:08:13,560
are about three it was three kind of

00:08:09,720 --> 00:08:15,780
high level categories for evaluating how

00:08:13,560 --> 00:08:19,830
well search system is doing there's a

00:08:15,780 --> 00:08:21,720
user feedback and hug flavors of that

00:08:19,830 --> 00:08:24,030
then there are how people are actually

00:08:21,720 --> 00:08:27,990
using your system I'm doing

00:08:24,030 --> 00:08:30,330
click-through analysis and conversion

00:08:27,990 --> 00:08:31,830
all of that stuff and then the third is

00:08:30,330 --> 00:08:34,860
when you have ground truth based

00:08:31,830 --> 00:08:36,270
relevance tuning for this audience I

00:08:34,860 --> 00:08:38,970
don't have to talk about how important

00:08:36,270 --> 00:08:40,530
it is to have good ground truth you all

00:08:38,970 --> 00:08:42,330
know that people are given talks on it

00:08:40,530 --> 00:08:45,360
it's very hard to do good ground truth

00:08:42,330 --> 00:08:48,120
and also I very much appreciated jet

00:08:45,360 --> 00:08:49,160
Rome and Byron's talk on the importance

00:08:48,120 --> 00:08:50,600
of measurements and

00:08:49,160 --> 00:08:52,279
walking into organizations that had no

00:08:50,600 --> 00:08:54,199
measurement and complained that the

00:08:52,279 --> 00:08:55,790
search is awful and then you know you do

00:08:54,199 --> 00:08:57,259
have to start building up the sense that

00:08:55,790 --> 00:08:59,120
you have to be able to measure against

00:08:57,259 --> 00:09:03,649
something but I sing to the quote to the

00:08:59,120 --> 00:09:05,449
choir here so I'll stop with that if you

00:09:03,649 --> 00:09:09,350
do want a good laugh do check out the

00:09:05,449 --> 00:09:11,449
tanks link and problems with overfitting

00:09:09,350 --> 00:09:13,730
especially when ground truth is

00:09:11,449 --> 00:09:16,100
expensive overfitting is a very serious

00:09:13,730 --> 00:09:18,620
risk in that you can appear to get

00:09:16,100 --> 00:09:21,680
better performance numbers but then in

00:09:18,620 --> 00:09:23,240
practice performance I get worse or

00:09:21,680 --> 00:09:25,370
certainly won't see the benefits that

00:09:23,240 --> 00:09:27,670
you would expect to see based on your

00:09:25,370 --> 00:09:32,120
experiments if you don't have a careful

00:09:27,670 --> 00:09:34,490
separation of train and test all right

00:09:32,120 --> 00:09:36,620
so ground truth we all know what this

00:09:34,490 --> 00:09:37,939
looks like to some degree and so you

00:09:36,620 --> 00:09:43,100
know you have some kind of relevance

00:09:37,939 --> 00:09:45,379
ranking a doc ID and query for choir

00:09:43,100 --> 00:09:49,730
attack and I should step back acquire

00:09:45,379 --> 00:09:51,680
'te is Latin it means search as in seek

00:09:49,730 --> 00:09:54,439
and you shall find the truth it seemed a

00:09:51,680 --> 00:09:56,449
thorough imperative so it's the notion

00:09:54,439 --> 00:09:57,470
is search find those but not actual

00:09:56,449 --> 00:09:59,240
search search and search in the

00:09:57,470 --> 00:10:00,350
parameter space for what sets of

00:09:59,240 --> 00:10:03,139
parameters what combinations of

00:10:00,350 --> 00:10:06,310
technologies can help lead to improved

00:10:03,139 --> 00:10:09,730
results so the workflow at this point is

00:10:06,310 --> 00:10:12,199
hacky it starts off with a command line

00:10:09,730 --> 00:10:13,370
and a ground truth file which I already

00:10:12,199 --> 00:10:14,029
explained experiments which I'll talk

00:10:13,370 --> 00:10:16,160
about shortly

00:10:14,029 --> 00:10:18,290
pumps those into a little h2 database

00:10:16,160 --> 00:10:19,939
and then launches those queries against

00:10:18,290 --> 00:10:22,009
those queries in those experiments

00:10:19,939 --> 00:10:25,009
against solar or elasticsearch then

00:10:22,009 --> 00:10:29,079
outputs a directory of reports so yes

00:10:25,009 --> 00:10:32,149
that is my user interface just a series

00:10:29,079 --> 00:10:34,069
CSV close I'm sorry that's where I am if

00:10:32,149 --> 00:10:35,269
anybody wants to contribute or if

00:10:34,069 --> 00:10:36,699
anybody wants to help you to create this

00:10:35,269 --> 00:10:40,759
into another project do let me know

00:10:36,699 --> 00:10:44,180
front ends are not my thing all right so

00:10:40,759 --> 00:10:47,600
some of the components the the main part

00:10:44,180 --> 00:10:49,850
of of this is in core obviously CLI is

00:10:47,600 --> 00:10:53,209
where the experiments in the command

00:10:49,850 --> 00:10:55,189
line code is the thing that people might

00:10:53,209 --> 00:10:58,339
find useful if we've all done this

00:10:55,189 --> 00:10:59,959
before is have a unified interface to

00:10:58,339 --> 00:11:01,430
talk to elastic or solar for at least

00:10:59,959 --> 00:11:02,510
those areas where they agree which is a

00:11:01,430 --> 00:11:04,490
whole bunch

00:11:02,510 --> 00:11:07,340
so that I can say you know give me a

00:11:04,490 --> 00:11:08,630
connector to solar or elastic the

00:11:07,340 --> 00:11:10,730
connector figures out what version it is

00:11:08,630 --> 00:11:13,520
applies the right connector so that you

00:11:10,730 --> 00:11:15,140
can send documents for indexing or you

00:11:13,520 --> 00:11:18,890
can do querying and other things across

00:11:15,140 --> 00:11:21,050
those different systems without having

00:11:18,890 --> 00:11:22,850
to do specific stuff and change the

00:11:21,050 --> 00:11:24,110
dependencies so that's been one

00:11:22,850 --> 00:11:26,300
component that might be useful for

00:11:24,110 --> 00:11:27,680
others that I think is kind of nice

00:11:26,300 --> 00:11:29,870
because you can copy stuff from

00:11:27,680 --> 00:11:31,190
elasticsearch to index to an elastic

00:11:29,870 --> 00:11:33,230
search seven index without using the

00:11:31,190 --> 00:11:35,210
actual elastic client which is based on

00:11:33,230 --> 00:11:36,800
one of those versions or you can go from

00:11:35,210 --> 00:11:39,260
solar to elastic easily so that's us

00:11:36,800 --> 00:11:41,840
kind of side benefit of this this

00:11:39,260 --> 00:11:43,730
project I would also encourage people to

00:11:41,840 --> 00:11:47,060
check out the examples directory and the

00:11:43,730 --> 00:11:48,950
examples read me on github page that

00:11:47,060 --> 00:11:51,760
walks you through how to run experiments

00:11:48,950 --> 00:11:55,070
and so on so that's kind of structurally

00:11:51,760 --> 00:11:56,810
where it is there I put in a placeholder

00:11:55,070 --> 00:11:58,180
for logs I don't have any log analysis

00:11:56,810 --> 00:12:04,010
now but I'm hoping to build that out

00:11:58,180 --> 00:12:06,380
hopefully with others all right so what

00:12:04,010 --> 00:12:09,830
I found myself doing and why I came to

00:12:06,380 --> 00:12:12,860
this is that I had some ground truth

00:12:09,830 --> 00:12:16,400
which was nice to have for this client I

00:12:12,860 --> 00:12:20,540
forget about 600 queries and in

00:12:16,400 --> 00:12:22,280
judgments for documents and I had all of

00:12:20,540 --> 00:12:23,990
solar available to me so I started you

00:12:22,280 --> 00:12:26,030
know playing with I'm changing the

00:12:23,990 --> 00:12:29,450
various features and seeing if I could

00:12:26,030 --> 00:12:30,620
bump the scores from their baseline but

00:12:29,450 --> 00:12:31,850
what I found is I was twirling with

00:12:30,620 --> 00:12:35,870
things is that I wasn't keeping track of

00:12:31,850 --> 00:12:39,050
what I was doing I wasn't doing things

00:12:35,870 --> 00:12:41,660
in an assistant systematic way and the

00:12:39,050 --> 00:12:44,210
output wasn't standardized I was focused

00:12:41,660 --> 00:12:47,470
on one on evaluation metric and I wanted

00:12:44,210 --> 00:12:49,540
more diversity in those so this is

00:12:47,470 --> 00:12:52,250
basically boredom and a need for

00:12:49,540 --> 00:12:54,950
reproducibility and consistency is what

00:12:52,250 --> 00:12:56,720
got me to where I am here so the key

00:12:54,950 --> 00:12:58,610
components for running experiments in

00:12:56,720 --> 00:13:00,050
clarity are scores I don't so you have

00:12:58,610 --> 00:13:02,680
an array of different types of scoring

00:13:00,050 --> 00:13:04,910
that you can do and then a map of

00:13:02,680 --> 00:13:07,250
experiments I'll go into each of those

00:13:04,910 --> 00:13:10,970
in detail now so the scores of

00:13:07,250 --> 00:13:12,440
implemented and end ECG a number of

00:13:10,970 --> 00:13:14,810
other things that various clients found

00:13:12,440 --> 00:13:15,820
useful one of which I call at least

00:13:14,810 --> 00:13:17,020
wanted and how

00:13:15,820 --> 00:13:19,150
means that you got at least one of the

00:13:17,020 --> 00:13:21,370
target talking that's at 1:00 or at 5:00

00:13:19,150 --> 00:13:22,570
or at 10:00 or so on but also some of

00:13:21,370 --> 00:13:26,710
the other traditional precision recall

00:13:22,570 --> 00:13:28,690
and so on and then there are also you

00:13:26,710 --> 00:13:31,090
can specify experiments where you have

00:13:28,690 --> 00:13:33,430
which server you're hitting and what

00:13:31,090 --> 00:13:35,680
kind of query how you want to shape that

00:13:33,430 --> 00:13:37,870
query so this is kind of a high-level

00:13:35,680 --> 00:13:41,230
view of what that experiment JSON file

00:13:37,870 --> 00:13:43,330
looks like yeah so you can have at least

00:13:41,230 --> 00:13:45,310
one a10 in combination with end ECG and

00:13:43,330 --> 00:13:47,080
you'll get all of those results I so I

00:13:45,310 --> 00:13:49,600
have some really rudimentary things like

00:13:47,080 --> 00:13:51,580
number zero results total Docs returned

00:13:49,600 --> 00:13:56,110
and so on so you've got a pretty broad

00:13:51,580 --> 00:13:58,660
sense of what how you're performing and

00:13:56,110 --> 00:14:01,990
you can see all of these scores in for

00:13:58,660 --> 00:14:02,320
each experiment with only one run all

00:14:01,990 --> 00:14:04,360
right

00:14:02,320 --> 00:14:07,990
so in slightly more detail experiments

00:14:04,360 --> 00:14:10,000
this is as you can tell a solar query so

00:14:07,990 --> 00:14:12,460
that this experiment says boost title

00:14:10,000 --> 00:14:13,960
ten boost has to give me a tie of zero

00:14:12,460 --> 00:14:15,640
point eight and so on

00:14:13,960 --> 00:14:17,650
I also want to do some phrasal boosting

00:14:15,640 --> 00:14:19,150
so this you cannot you what's nice is

00:14:17,650 --> 00:14:21,510
that you can specify this you have the

00:14:19,150 --> 00:14:24,670
chase on around so that you can tie

00:14:21,510 --> 00:14:27,330
specifics Paris to specific outputs and

00:14:24,670 --> 00:14:29,980
in the forward actually make progress

00:14:27,330 --> 00:14:31,960
the output is pretty straight forward

00:14:29,980 --> 00:14:33,340
those excel files this is one of them

00:14:31,960 --> 00:14:35,950
it's just the per query per experiment

00:14:33,340 --> 00:14:38,500
score so here we have a query of contact

00:14:35,950 --> 00:14:40,450
the experiment is called text and and we

00:14:38,500 --> 00:14:43,660
have how many documents had at least one

00:14:40,450 --> 00:14:44,920
at least one it one normalized this kind

00:14:43,660 --> 00:14:46,540
of King would have gained for that query

00:14:44,920 --> 00:14:50,110
in that experiment total Doc's returned

00:14:46,540 --> 00:14:53,380
and so on the other thing I do is then

00:14:50,110 --> 00:14:56,590
do roll-ups of those statistics so for

00:14:53,380 --> 00:14:59,860
the experiment text minimum match to how

00:14:56,590 --> 00:15:02,860
many had at least one it at one what was

00:14:59,860 --> 00:15:04,660
the mean normalize discounted chemical

00:15:02,860 --> 00:15:09,460
game what was the median was a standard

00:15:04,660 --> 00:15:13,180
deviation and I one of the things I'd

00:15:09,460 --> 00:15:16,360
like to share is that what I don't often

00:15:13,180 --> 00:15:17,920
see in talks and I know people are doing

00:15:16,360 --> 00:15:19,720
this on the inside but please let's talk

00:15:17,920 --> 00:15:21,190
about more as a community it is is

00:15:19,720 --> 00:15:23,590
looking at the standard deviations

00:15:21,190 --> 00:15:25,300
looking at the beans because sometimes

00:15:23,590 --> 00:15:28,200
those are kind of crazy and if you don't

00:15:25,300 --> 00:15:30,030
apply basic

00:15:28,200 --> 00:15:31,260
significance tests and other things it's

00:15:30,030 --> 00:15:33,060
not clear that you're actually seeing an

00:15:31,260 --> 00:15:34,260
improvement and I recognize the

00:15:33,060 --> 00:15:36,480
difference between significance and

00:15:34,260 --> 00:15:38,220
great statistical significance and

00:15:36,480 --> 00:15:41,070
operational significance and I also

00:15:38,220 --> 00:15:45,030
recognize that statistical significance

00:15:41,070 --> 00:15:46,680
is maybe not as useful as some want it

00:15:45,030 --> 00:15:48,690
to be or as we all used to think it was

00:15:46,680 --> 00:15:50,550
but still having some metric to

00:15:48,690 --> 00:15:52,470
understand how big those differences are

00:15:50,550 --> 00:15:54,780
is is really critical and I'd like to

00:15:52,470 --> 00:15:56,490
try to share that and get that out to

00:15:54,780 --> 00:15:57,960
the degree that it's not to them to the

00:15:56,490 --> 00:16:00,270
degree that it needs to be lots of folks

00:15:57,960 --> 00:16:03,600
as I said are already well ahead of me

00:16:00,270 --> 00:16:06,960
on these topics but then the third type

00:16:03,600 --> 00:16:09,030
of output is any pair wise p-value

00:16:06,960 --> 00:16:11,430
differences between the experiments so

00:16:09,030 --> 00:16:13,980
this says that you know the experiment

00:16:11,430 --> 00:16:15,780
text minimum should match to the p-value

00:16:13,980 --> 00:16:18,030
difference between that and text stem is

00:16:15,780 --> 00:16:19,890
0.94 which means there's no statistical

00:16:18,030 --> 00:16:22,110
significance difference the testicle a

00:16:19,890 --> 00:16:24,590
significant difference between those and

00:16:22,110 --> 00:16:27,120
you can see that as you move down the

00:16:24,590 --> 00:16:29,490
statistical significance goes up but

00:16:27,120 --> 00:16:31,650
it's still nothing in this little ground

00:16:29,490 --> 00:16:35,220
truths at this little place at that

00:16:31,650 --> 00:16:37,080
worked with alright so that was

00:16:35,220 --> 00:16:40,020
generation zero where I wanted

00:16:37,080 --> 00:16:41,460
replicability I wanted automaticity for

00:16:40,020 --> 00:16:42,810
those experiments I just wanted to be

00:16:41,460 --> 00:16:44,760
able to run stuff get the results back

00:16:42,810 --> 00:16:46,800
in a standardized format but then I

00:16:44,760 --> 00:16:48,450
thought why am I sitting here generating

00:16:46,800 --> 00:16:50,820
those experiments when we have all of

00:16:48,450 --> 00:16:54,270
those features I'm basically kind of

00:16:50,820 --> 00:16:55,230
lazy as we all as all coders are and why

00:16:54,270 --> 00:16:57,570
can't we just get the computer to

00:16:55,230 --> 00:16:59,790
generate those experiments so that was

00:16:57,570 --> 00:17:02,339
that was kind of my second to the step

00:16:59,790 --> 00:17:04,760
in in this evolution towards

00:17:02,339 --> 00:17:07,530
evolutionary algorithms was getting

00:17:04,760 --> 00:17:11,400
specifying parameter sets and then

00:17:07,530 --> 00:17:13,740
allowing a computer to generate the the

00:17:11,400 --> 00:17:15,959
full set of experiments that one can

00:17:13,740 --> 00:17:18,209
launch and the other thing of course is

00:17:15,959 --> 00:17:20,069
that you know you can spoke as a hit

00:17:18,209 --> 00:17:24,060
point here with a number copy and this

00:17:20,069 --> 00:17:25,410
relevance engineer there are there's a

00:17:24,060 --> 00:17:27,180
large parameter space so you can have

00:17:25,410 --> 00:17:30,510
different analyzer chains you cannot

00:17:27,180 --> 00:17:32,190
feel boost and field ranges you know you

00:17:30,510 --> 00:17:36,450
can have billion min should match tied

00:17:32,190 --> 00:17:38,460
PF p f2 p f3 PS the phrasal slop and all

00:17:36,450 --> 00:17:40,800
of those things you can do boost by the

00:17:38,460 --> 00:17:42,090
time you add in all of those

00:17:40,800 --> 00:17:43,800
things and generate all of the

00:17:42,090 --> 00:17:45,660
experiments with all of the combinations

00:17:43,800 --> 00:17:48,240
you are definitely in the area and at

00:17:45,660 --> 00:17:50,100
risk of overfitting it's possible and

00:17:48,240 --> 00:17:52,860
it's useful to do that sometimes but you

00:17:50,100 --> 00:17:54,300
have to be really careful that you're to

00:17:52,860 --> 00:17:58,650
avoid overfitting that's what led me

00:17:54,300 --> 00:18:01,380
into some other things so all right yeah

00:17:58,650 --> 00:18:03,090
so this is what can happen with with

00:18:01,380 --> 00:18:06,000
this is what the feature factories look

00:18:03,090 --> 00:18:07,350
like so instead of the experiments we

00:18:06,000 --> 00:18:08,880
have feature factories so you can have

00:18:07,350 --> 00:18:10,740
different URLs so you can send queries

00:18:08,880 --> 00:18:12,870
to different servers which may have

00:18:10,740 --> 00:18:15,930
different configurations on them

00:18:12,870 --> 00:18:17,850
and you specify ranges so what fields do

00:18:15,930 --> 00:18:19,290
I want to use for any diznex query what

00:18:17,850 --> 00:18:21,720
kind of weight what weight ranges do I

00:18:19,290 --> 00:18:24,720
want to have how many fields do I want

00:18:21,720 --> 00:18:26,970
to have if I only want to try one field

00:18:24,720 --> 00:18:30,840
or two fields or three fields different

00:18:26,970 --> 00:18:33,150
tiles values and query operator values

00:18:30,840 --> 00:18:34,340
and so on so you just this combination

00:18:33,150 --> 00:18:38,370
when you do all of the permutations

00:18:34,340 --> 00:18:39,630
generates 390 experiments the other fun

00:18:38,370 --> 00:18:41,970
thing I added those parameter izybelle

00:18:39,630 --> 00:18:44,760
strings which means that you can take

00:18:41,970 --> 00:18:47,160
this boost which is a recency boost and

00:18:44,760 --> 00:18:49,160
you can see in the as you see tell for

00:18:47,160 --> 00:18:53,250
me pointing my screen modem pointing to

00:18:49,160 --> 00:18:56,820
the you can take the 1 2 3 and then have

00:18:53,250 --> 00:18:58,500
those boost together at the same way so

00:18:56,820 --> 00:19:00,870
your range is saying I want to range at

00:18:58,500 --> 00:19:02,520
that point in the formula of 1 or 2 or 3

00:19:00,870 --> 00:19:04,560
and then I want the next value to be

00:19:02,520 --> 00:19:07,230
exactly the same as the first you can do

00:19:04,560 --> 00:19:10,140
some pretty complex parameter as

00:19:07,230 --> 00:19:11,610
parameterizing to specify different

00:19:10,140 --> 00:19:15,300
types of experiments in different

00:19:11,610 --> 00:19:16,560
different ranges of experiments but as

00:19:15,300 --> 00:19:17,850
you can tell if you do all the

00:19:16,560 --> 00:19:20,100
permutations you get permutations

00:19:17,850 --> 00:19:23,100
explosion yeah if you have seven fields

00:19:20,100 --> 00:19:25,200
you get up to two thousand experiments

00:19:23,100 --> 00:19:27,390
when you have two weights so that's why

00:19:25,200 --> 00:19:29,850
I moved into as a natural evolution into

00:19:27,390 --> 00:19:32,910
some other options so one option is

00:19:29,850 --> 00:19:34,620
random search and that is where you just

00:19:32,910 --> 00:19:35,880
say now give me a hundred random

00:19:34,620 --> 00:19:38,100
experiments and let's see where I live

00:19:35,880 --> 00:19:39,450
where I land up where I land and that's

00:19:38,100 --> 00:19:43,110
certainly an option the risk of

00:19:39,450 --> 00:19:48,990
overfitting is is lower with that and

00:19:43,110 --> 00:19:50,370
doing full beam search but it's it's it

00:19:48,990 --> 00:19:52,590
can be quite useful and it's certainly

00:19:50,370 --> 00:19:54,240
more efficient

00:19:52,590 --> 00:19:56,520
that's what led me to a genetic

00:19:54,240 --> 00:19:59,190
algorithm which is how can I improve on

00:19:56,520 --> 00:20:00,900
random search and that is you know

00:19:59,190 --> 00:20:03,720
pretty straightforward from a genetic

00:20:00,900 --> 00:20:05,190
algorithm perspective where with each

00:20:03,720 --> 00:20:06,360
generation you only let the top

00:20:05,190 --> 00:20:08,370
experiments move on to the next

00:20:06,360 --> 00:20:10,909
generation and I'll talk about this in

00:20:08,370 --> 00:20:13,799
greater detail but we're moving from

00:20:10,909 --> 00:20:15,360
we're moving from specifying experiments

00:20:13,799 --> 00:20:16,770
to generating experiments and then

00:20:15,360 --> 00:20:19,529
taking the output of those generating

00:20:16,770 --> 00:20:26,059
generated experiments yet my generation

00:20:19,529 --> 00:20:28,039
two of my personal growth in this two to

00:20:26,059 --> 00:20:30,450
twenty-two actual machine learning on

00:20:28,039 --> 00:20:33,570
figuring out what parameter sets work

00:20:30,450 --> 00:20:36,029
well together so the genetic algorithm

00:20:33,570 --> 00:20:38,520
basics it's so simple even I can figure

00:20:36,029 --> 00:20:40,980
it out remember Charlie mentioned that

00:20:38,520 --> 00:20:43,590
whole classics thing even I can do this

00:20:40,980 --> 00:20:46,169
in an athis straightforward so the

00:20:43,590 --> 00:20:48,570
notion is you generation zero you have

00:20:46,169 --> 00:20:51,600
five experiments with different settings

00:20:48,570 --> 00:20:53,130
you run those against specific against

00:20:51,600 --> 00:20:55,200
the algorithm of your choice here I'm

00:20:53,130 --> 00:20:57,990
running against notionally and ECG of

00:20:55,200 --> 00:21:00,240
ten for those different experiments you

00:20:57,990 --> 00:21:02,789
take the you score them and then you

00:21:00,240 --> 00:21:04,529
create generation one so one operation

00:21:02,789 --> 00:21:06,059
in genetic algorithms is crossover where

00:21:04,529 --> 00:21:08,700
you take features of one with features

00:21:06,059 --> 00:21:10,909
of another and you create two two

00:21:08,700 --> 00:21:14,279
crossed over cross over death

00:21:10,909 --> 00:21:16,289
experiments and then you can mutate them

00:21:14,279 --> 00:21:18,960
so you take features of one so if you

00:21:16,289 --> 00:21:21,120
had title and content in one in

00:21:18,960 --> 00:21:22,980
generation 0 you might remove a field or

00:21:21,120 --> 00:21:24,480
you might change the boost on one of

00:21:22,980 --> 00:21:27,720
those fields or some other way to mutate

00:21:24,480 --> 00:21:30,210
the features of that query you couldn't

00:21:27,720 --> 00:21:31,559
you can transfer those directly over

00:21:30,210 --> 00:21:33,330
probably into the next generation if you

00:21:31,559 --> 00:21:35,970
want and the other thing is that you can

00:21:33,330 --> 00:21:37,110
prevent poor performers from moving into

00:21:35,970 --> 00:21:40,710
the next generation and just create a

00:21:37,110 --> 00:21:43,559
new random experiment and by random of

00:21:40,710 --> 00:21:46,320
course it's a random of those those

00:21:43,559 --> 00:21:49,230
feature sets are those that I talked

00:21:46,320 --> 00:21:51,299
about earlier then you score those and

00:21:49,230 --> 00:21:53,039
then rinse and repeat where you can

00:21:51,299 --> 00:21:56,039
randomly select some for crossover

00:21:53,039 --> 00:21:58,679
mutation carry through and then we're

00:21:56,039 --> 00:21:59,730
just going to create a new random random

00:21:58,679 --> 00:22:03,120
experiments

00:21:59,730 --> 00:22:05,070
until convergence or until the heat

00:22:03,120 --> 00:22:07,350
death of the universe which can happen

00:22:05,070 --> 00:22:08,670
with some of these sometimes alright so

00:22:07,350 --> 00:22:12,690
how does this differ from learning to

00:22:08,670 --> 00:22:15,360
rank well as Peter Moses pointed out to

00:22:12,690 --> 00:22:17,970
me after last time I gave this this is a

00:22:15,360 --> 00:22:20,820
learning to rank and some of my thinking

00:22:17,970 --> 00:22:22,290
about this was inspired by an early

00:22:20,820 --> 00:22:24,300
learning to rank paper that talked about

00:22:22,290 --> 00:22:27,540
any machine learning that you use to

00:22:24,300 --> 00:22:29,730
figure out how to rank results this is

00:22:27,540 --> 00:22:33,570
quite different though from the modern

00:22:29,730 --> 00:22:36,750
day solar elastic use of learning to

00:22:33,570 --> 00:22:37,800
rank in that well first the the

00:22:36,750 --> 00:22:39,030
similarities

00:22:37,800 --> 00:22:40,440
you still need sound engineering

00:22:39,030 --> 00:22:42,450
decisions your analysis chain has to

00:22:40,440 --> 00:22:44,850
match your data it has to be a good fit

00:22:42,450 --> 00:22:46,680
for your data for the queries you have

00:22:44,850 --> 00:22:48,570
to ground truthing you have to have good

00:22:46,680 --> 00:22:52,650
ground truth the main difference between

00:22:48,570 --> 00:22:57,150
this and what we now use as the phrase

00:22:52,650 --> 00:23:00,330
line crank and we've seen land elastic

00:22:57,150 --> 00:23:02,340
and solar land is that this is meant for

00:23:00,330 --> 00:23:04,710
settings for that overall general

00:23:02,340 --> 00:23:07,620
initial search it's not a rear ankle

00:23:04,710 --> 00:23:10,400
function on on a subset of those those

00:23:07,620 --> 00:23:14,250
features that said it can certainly be

00:23:10,400 --> 00:23:16,130
adapted to be used in systems that have

00:23:14,250 --> 00:23:17,970
learning to rank and can be used in

00:23:16,130 --> 00:23:21,000
coordination with learning to rank

00:23:17,970 --> 00:23:23,220
remember earlier you could specify which

00:23:21,000 --> 00:23:24,780
server you can send those queries to you

00:23:23,220 --> 00:23:26,330
can also specify which handlers you want

00:23:24,780 --> 00:23:28,440
to use if you have a custom handler or

00:23:26,330 --> 00:23:30,960
other things that you can customize you

00:23:28,440 --> 00:23:33,530
can specify those as features in running

00:23:30,960 --> 00:23:36,480
your experiments so at this point

00:23:33,530 --> 00:23:38,960
generally it's basically it's how well

00:23:36,480 --> 00:23:41,610
can we configure things for our general

00:23:38,960 --> 00:23:43,500
general baseline search in the system

00:23:41,610 --> 00:23:46,920
given the huge number of parameters we

00:23:43,500 --> 00:23:50,160
have to play with all right the other

00:23:46,920 --> 00:23:54,390
thing that I did in generation 2 is that

00:23:50,160 --> 00:23:56,640
was build in cross-validation so that

00:23:54,390 --> 00:23:59,850
it's not something that researchers have

00:23:56,640 --> 00:24:02,670
to reinvent it's and it's not something

00:23:59,850 --> 00:24:04,590
that you can get away from mostly but

00:24:02,670 --> 00:24:06,840
it's built into it you cannot run the

00:24:04,590 --> 00:24:08,690
genetic algorithm across well validation

00:24:06,840 --> 00:24:11,790
unless you intentionally say I only want

00:24:08,690 --> 00:24:13,500
one fold don't do that

00:24:11,790 --> 00:24:16,080
so that's built into it which is

00:24:13,500 --> 00:24:17,790
so that makes the risk of overfitting

00:24:16,080 --> 00:24:19,860
much smaller the other thing is it

00:24:17,790 --> 00:24:21,300
allows you to see that the variance

00:24:19,860 --> 00:24:25,350
across those different fold so you get a

00:24:21,300 --> 00:24:26,400
sense of how fragile or how what the

00:24:25,350 --> 00:24:28,740
variance is from those different

00:24:26,400 --> 00:24:30,930
policies so you know that when you it

00:24:28,740 --> 00:24:34,650
gives you a better sense of the

00:24:30,930 --> 00:24:36,480
reliability of those results on new sets

00:24:34,650 --> 00:24:37,650
of data so if you could say oh it'll

00:24:36,480 --> 00:24:39,120
work really well in some it'll probably

00:24:37,650 --> 00:24:40,460
not work well on others on average we're

00:24:39,120 --> 00:24:44,730
probably doing better so

00:24:40,460 --> 00:24:46,350
cross-validation is really important all

00:24:44,730 --> 00:24:47,400
right so as we all know in this problem

00:24:46,350 --> 00:24:49,260
this slide probably isn't necessary for

00:24:47,400 --> 00:24:50,670
the folks in the audience but for for

00:24:49,260 --> 00:24:52,230
some if it's new here you go with

00:24:50,670 --> 00:24:55,530
cross-validation the notion is you take

00:24:52,230 --> 00:24:57,540
a set let's say here we have four you

00:24:55,530 --> 00:25:00,210
have a single data set at each iteration

00:24:57,540 --> 00:25:01,770
you set three of them as training and

00:25:00,210 --> 00:25:05,280
then you test on the fourth and in the

00:25:01,770 --> 00:25:06,510
next iteration yeah so it holds zero you

00:25:05,280 --> 00:25:09,060
train on the first three tests on the

00:25:06,510 --> 00:25:12,990
fourth so but say we get DCG of ten you

00:25:09,060 --> 00:25:15,540
get 0.45 fold one and test on those

00:25:12,990 --> 00:25:17,460
three I'm sorry train on those three

00:25:15,540 --> 00:25:19,290
tests on that one and so on so that

00:25:17,460 --> 00:25:20,700
you're you're making the most you're

00:25:19,290 --> 00:25:21,960
making very efficient use of your data

00:25:20,700 --> 00:25:23,160
and you're getting a sense of what the

00:25:21,960 --> 00:25:25,500
variances across the different

00:25:23,160 --> 00:25:27,750
experiments so after you do that you

00:25:25,500 --> 00:25:29,610
take the average also of course the

00:25:27,750 --> 00:25:31,470
standard deviation and or these parents

00:25:29,610 --> 00:25:33,440
or just eyeballing it is an important

00:25:31,470 --> 00:25:35,160
thing to do if you're only running one

00:25:33,440 --> 00:25:36,330
experiment and you get a number you

00:25:35,160 --> 00:25:38,670
think oh that's that's great but you

00:25:36,330 --> 00:25:41,130
don't get a sense of the breadth that

00:25:38,670 --> 00:25:42,840
you think you can get certainly Monte

00:25:41,130 --> 00:25:44,070
Carlo methods and other placer and other

00:25:42,840 --> 00:25:45,510
methods are a good way of getting that

00:25:44,070 --> 00:25:47,940
sense of variance but it's it's really

00:25:45,510 --> 00:25:49,740
critical to understanding how well

00:25:47,940 --> 00:25:52,350
you're doing in and if you are actually

00:25:49,740 --> 00:25:54,660
improving in some meaningful way the

00:25:52,350 --> 00:25:57,330
other key thing here is to report and

00:25:54,660 --> 00:25:59,520
talk about the average I will admit at

00:25:57,330 --> 00:26:01,500
some place I worked there I did have a

00:25:59,520 --> 00:26:04,680
colleague once I wanted to report only

00:26:01,500 --> 00:26:07,110
the best fold and I still shriek from

00:26:04,680 --> 00:26:10,470
that and I think we can all agree please

00:26:07,110 --> 00:26:11,550
don't do that all right so what does

00:26:10,470 --> 00:26:13,500
this look like in practice as I

00:26:11,550 --> 00:26:15,960
mentioned this is all command lies when

00:26:13,500 --> 00:26:19,260
you're running it you get fold zero what

00:26:15,960 --> 00:26:21,720
the training is so this said that we ran

00:26:19,260 --> 00:26:24,530
a bunch of experiments on on training

00:26:21,720 --> 00:26:26,790
those were the results we got we applied

00:26:24,530 --> 00:26:29,940
full zero generation four

00:26:26,790 --> 00:26:31,590
number two to the test data and that is

00:26:29,940 --> 00:26:35,510
the value we got at the bottom of point

00:26:31,590 --> 00:26:38,340
five five and it's pretty common to see

00:26:35,510 --> 00:26:41,250
some variation this this data says that

00:26:38,340 --> 00:26:44,430
I'm using is the data set that open

00:26:41,250 --> 00:26:47,340
source connections and talking John put

00:26:44,430 --> 00:26:49,140
out so it's a smallish data set so you

00:26:47,340 --> 00:26:51,210
expect to see kind of these broad it's a

00:26:49,140 --> 00:26:53,520
huge variance from training to testing

00:26:51,210 --> 00:26:54,780
in reality you also see some things

00:26:53,520 --> 00:26:57,810
depending on how big your data set is

00:26:54,780 --> 00:27:03,000
and how uniform your data is and then

00:26:57,810 --> 00:27:04,950
for each you can also you'll get the

00:27:03,000 --> 00:27:09,450
roll-up across that so the experiment

00:27:04,950 --> 00:27:10,860
the test for for the first four fold two

00:27:09,450 --> 00:27:14,040
with the highest that was point seven

00:27:10,860 --> 00:27:15,690
nine the test for fold zero was point

00:27:14,040 --> 00:27:17,280
five five one five four and then there's

00:27:15,690 --> 00:27:18,780
the median of point six three but you

00:27:17,280 --> 00:27:20,310
can see that the standard deviation or

00:27:18,780 --> 00:27:22,760
even just eyeballing how the variance is

00:27:20,310 --> 00:27:25,560
is quite high for this little test set

00:27:22,760 --> 00:27:28,260
alright so initial findings for one

00:27:25,560 --> 00:27:30,180
client I was able to boost their NDC g10

00:27:28,260 --> 00:27:32,040
from point two five to three

00:27:30,180 --> 00:27:33,450
given the amount of ground truth they

00:27:32,040 --> 00:27:35,730
had I think that that was actually a

00:27:33,450 --> 00:27:36,530
meaningful bump so I was really happy

00:27:35,730 --> 00:27:40,650
with that

00:27:36,530 --> 00:27:41,610
the bad is that when you set when you

00:27:40,650 --> 00:27:43,110
have when you open up the entire

00:27:41,610 --> 00:27:45,690
parameter set you don't run it long

00:27:43,110 --> 00:27:47,820
enough you can often do worse than

00:27:45,690 --> 00:27:49,800
baseline or where people are starting

00:27:47,820 --> 00:27:51,240
from the great thing in the critical

00:27:49,800 --> 00:27:52,350
thing for me is whether or not I'm

00:27:51,240 --> 00:27:54,090
actually doing better and I'll talk

00:27:52,350 --> 00:27:56,370
about this again in the next couple of

00:27:54,090 --> 00:27:58,230
slides the key thing for me is that I'm

00:27:56,370 --> 00:28:00,390
no longer specifying experiments those

00:27:58,230 --> 00:28:02,880
are being generated automatically I have

00:28:00,390 --> 00:28:04,440
a traceability for all of the

00:28:02,880 --> 00:28:05,940
experiments I did and all of the results

00:28:04,440 --> 00:28:08,280
I had I can reproduce all of those

00:28:05,940 --> 00:28:09,360
experiments and I can now and I don't

00:28:08,280 --> 00:28:10,350
have to twiddle with those things I

00:28:09,360 --> 00:28:12,480
don't have to get a bed at nine o'clock

00:28:10,350 --> 00:28:13,710
maybe ps3 ps3 is the key I'm gonna try

00:28:12,480 --> 00:28:15,180
that tomorrow I don't care anymore

00:28:13,710 --> 00:28:16,290
because I can try all of those things

00:28:15,180 --> 00:28:18,650
are the computer can try all of those

00:28:16,290 --> 00:28:21,510
things I can focus on more fun things

00:28:18,650 --> 00:28:23,250
and more you know more advanced you know

00:28:21,510 --> 00:28:25,830
feature engineering single signal

00:28:23,250 --> 00:28:27,780
enrichment external signals I'm

00:28:25,830 --> 00:28:31,020
hopefully getting some kind of spend

00:28:27,780 --> 00:28:32,550
with the dense vectors and so on so

00:28:31,020 --> 00:28:34,890
that's the key thing is that I'm not

00:28:32,550 --> 00:28:35,820
saying that this is the next cognitive

00:28:34,890 --> 00:28:38,160
blockchain that will revolutionize

00:28:35,820 --> 00:28:40,120
everything but this does K take care of

00:28:38,160 --> 00:28:42,580
a lot of the

00:28:40,120 --> 00:28:45,039
plumbing kinds of tasks the boring kinds

00:28:42,580 --> 00:28:48,100
of tasks that we can do as relevance

00:28:45,039 --> 00:28:50,260
engineers right the other thing is that

00:28:48,100 --> 00:28:52,059
I would now instead of I'd like to move

00:28:50,260 --> 00:28:55,360
from P values to L value which is if

00:28:52,059 --> 00:29:00,159
Jimmy Lin said that a difference was

00:28:55,360 --> 00:29:02,350
worth reporting in Twitter then I will

00:29:00,159 --> 00:29:05,350
also report that and call that the L

00:29:02,350 --> 00:29:07,240
value so just like to introduce that one

00:29:05,350 --> 00:29:10,480
again if you don't wanna use P values

00:29:07,240 --> 00:29:13,840
use L values alright for this talk I

00:29:10,480 --> 00:29:15,909
worked with Nate day and open source

00:29:13,840 --> 00:29:18,760
connections and thank you for the

00:29:15,909 --> 00:29:21,039
inspiration for this little hopping in

00:29:18,760 --> 00:29:24,630
puddles that I did and also for your

00:29:21,039 --> 00:29:27,120
collaboration with the data and design

00:29:24,630 --> 00:29:29,200
this is you know publicly available data

00:29:27,120 --> 00:29:31,690
when you succinate sign an agreement

00:29:29,200 --> 00:29:33,970
with them what I am presenting here is

00:29:31,690 --> 00:29:35,320
not final it's not comparable with other

00:29:33,970 --> 00:29:37,750
teams I'm not trying to sell anything

00:29:35,320 --> 00:29:39,580
it's just I we had the data around and I

00:29:37,750 --> 00:29:41,529
ran with it to see what we could have so

00:29:39,580 --> 00:29:42,760
this one is the background linking task

00:29:41,529 --> 00:29:44,620
where there are six hundred and seventy

00:29:42,760 --> 00:29:46,390
thousand documents fifty-seven topics

00:29:44,620 --> 00:29:49,690
and the notion is if we've given one

00:29:46,390 --> 00:29:52,149
document find the find documents that

00:29:49,690 --> 00:29:55,320
would be useful for background for that

00:29:52,149 --> 00:29:58,659
so it's effectively more like this query

00:29:55,320 --> 00:30:00,940
so I added that to acquire two fairly

00:29:58,659 --> 00:30:04,600
recently so that I could play a round

00:30:00,940 --> 00:30:07,200
with these with this document so so the

00:30:04,600 --> 00:30:09,100
baseline if you just use a default

00:30:07,200 --> 00:30:11,260
elasticsearch more like this query on a

00:30:09,100 --> 00:30:13,330
Content field you get normalize discount

00:30:11,260 --> 00:30:15,909
just kind of keep me looking at five of

00:30:13,330 --> 00:30:17,740
one three eight now with the genetic

00:30:15,909 --> 00:30:19,630
algorithm you bump that all the way up

00:30:17,740 --> 00:30:22,600
to point four one six which isn't a huge

00:30:19,630 --> 00:30:27,399
gain it certainly wasn't as large as the

00:30:22,600 --> 00:30:29,169
gain reported by some folks at track one

00:30:27,399 --> 00:30:30,880
set of authors but from baseline of

00:30:29,169 --> 00:30:32,890
point three five two point five five

00:30:30,880 --> 00:30:35,500
when they started adding more exciting

00:30:32,890 --> 00:30:37,870
features an LP on and the extraction

00:30:35,500 --> 00:30:42,270
they did machine learning to measure the

00:30:37,870 --> 00:30:42,270
distance the semantic distance between

00:30:42,299 --> 00:30:47,110
article categories and then they also of

00:30:45,460 --> 00:30:50,679
course applied learning to rank on these

00:30:47,110 --> 00:30:53,700
various things so they and they saw a

00:30:50,679 --> 00:30:55,980
much bigger boost but my results are not

00:30:53,700 --> 00:30:58,049
verbal but the key thing again for me is

00:30:55,980 --> 00:31:01,110
even if I didn't do a great job at track

00:30:58,049 --> 00:31:03,269
I didn't have to spend time on those on

00:31:01,110 --> 00:31:04,889
all of the built-in parameters that you

00:31:03,269 --> 00:31:08,399
can play with that's taken care of for

00:31:04,889 --> 00:31:10,470
me if I happen to do well or happen to

00:31:08,399 --> 00:31:11,909
get a boost in end ECG or something

00:31:10,470 --> 00:31:13,980
that's even meaningful that's that's a

00:31:11,909 --> 00:31:15,510
side benefit and fantastic the key thing

00:31:13,980 --> 00:31:17,429
is that I've explored the parameter

00:31:15,510 --> 00:31:22,789
space uncomfortable with it I can now be

00:31:17,429 --> 00:31:26,250
the more fun things so Renee asked me

00:31:22,789 --> 00:31:29,510
how well it scales this is a screenshot

00:31:26,250 --> 00:31:31,980
of my poor server when I was launching

00:31:29,510 --> 00:31:34,370
twenty threads of queries against the

00:31:31,980 --> 00:31:37,590
elastic cluster with Washington Post

00:31:34,370 --> 00:31:39,840
800,000 documents in it and on the left

00:31:37,590 --> 00:31:43,320
is my little laptop as you can see

00:31:39,840 --> 00:31:45,779
Firefox is taking out more CPUs than my

00:31:43,320 --> 00:31:47,159
look Java little Java pirated that's

00:31:45,779 --> 00:31:48,870
sending off all of those queries getting

00:31:47,159 --> 00:31:52,830
back to results and doing all of the

00:31:48,870 --> 00:31:55,820
calculation so it scales fairly well it

00:31:52,830 --> 00:31:58,139
does it you can hammer elastic or solar

00:31:55,820 --> 00:31:59,880
and I did find out that elastic will not

00:31:58,139 --> 00:32:02,809
allow you to query more than a thousand

00:31:59,880 --> 00:32:06,260
times concurrently I think maybe 10,000

00:32:02,809 --> 00:32:09,299
so there are limits but those limits are

00:32:06,260 --> 00:32:11,070
are on the solar and on the elastic

00:32:09,299 --> 00:32:14,639
search side and as we all know the

00:32:11,070 --> 00:32:16,320
systems are crazily little bust so don't

00:32:14,639 --> 00:32:18,630
hammer your production server but you

00:32:16,320 --> 00:32:21,600
can do a fair amount of queries fairly

00:32:18,630 --> 00:32:23,010
quickly with this all right so I'll be

00:32:21,600 --> 00:32:26,279
wrapping up a little bit early he'll be

00:32:23,010 --> 00:32:28,200
leaving more time for discussion and for

00:32:26,279 --> 00:32:29,279
lunch or dinner I guess very quickly

00:32:28,200 --> 00:32:31,710
depending on where you are in the world

00:32:29,279 --> 00:32:33,779
next steps obviously documentation I

00:32:31,710 --> 00:32:35,130
have some decent read knees but more

00:32:33,779 --> 00:32:37,769
documentation would be good I'd like to

00:32:35,130 --> 00:32:39,570
add some ground truth free measures so

00:32:37,769 --> 00:32:40,830
overlapping rank correlation just so

00:32:39,570 --> 00:32:42,440
that if you don't have ground truth and

00:32:40,830 --> 00:32:43,950
you'll want to see how different a new

00:32:42,440 --> 00:32:45,559
configuration would be from your

00:32:43,950 --> 00:32:49,049
baseline configuration you can do that

00:32:45,559 --> 00:32:50,880
one thing that really is I would why I

00:32:49,049 --> 00:32:52,289
want to have a explain ability or

00:32:50,880 --> 00:32:53,789
interpret ability so let's say the

00:32:52,289 --> 00:32:55,620
genetic algorithm finds that this

00:32:53,789 --> 00:32:57,840
cluster of experiments does does a

00:32:55,620 --> 00:32:59,789
better job what features of those

00:32:57,840 --> 00:33:01,260
experiments mark them as different from

00:32:59,789 --> 00:33:02,990
everything else is it the fact that they

00:33:01,260 --> 00:33:06,149
relied mostly on the content field

00:33:02,990 --> 00:33:06,490
versus the title field or something like

00:33:06,149 --> 00:33:09,010
that

00:33:06,490 --> 00:33:12,150
I could actually get around integrating

00:33:09,010 --> 00:33:15,640
a grown-up Bayesian optimization package

00:33:12,150 --> 00:33:16,960
at some point I'm not sure that I want

00:33:15,640 --> 00:33:18,490
to because I think there's a lot more to

00:33:16,960 --> 00:33:20,010
be gained from learning to rank and some

00:33:18,490 --> 00:33:22,809
of the other methods but I might

00:33:20,010 --> 00:33:26,350
outreach certainly talking to the chorus

00:33:22,809 --> 00:33:28,240
folks and there's some where they have

00:33:26,350 --> 00:33:30,179
connections that he open-source I can't

00:33:28,240 --> 00:33:33,040
remember name of the company quite

00:33:30,179 --> 00:33:35,350
anyways yeah in working with others

00:33:33,040 --> 00:33:36,400
whether it's to transfer the actual code

00:33:35,350 --> 00:33:38,950
or at least some of the ideas that

00:33:36,400 --> 00:33:41,890
people find useful and then made the

00:33:38,950 --> 00:33:45,670
integration to other projects as

00:33:41,890 --> 00:33:47,020
possible my takeaways from this automate

00:33:45,670 --> 00:33:48,550
automate automate even automate the

00:33:47,020 --> 00:33:49,480
generation of experiments so that you

00:33:48,550 --> 00:33:51,130
don't have to sit there and twiddle with

00:33:49,480 --> 00:33:53,940
the different parameters that one can

00:33:51,130 --> 00:33:55,900
play with replicability traceability

00:33:53,940 --> 00:33:57,309
statistical variance significant

00:33:55,900 --> 00:33:59,020
statistical significance all of these

00:33:57,309 --> 00:34:00,130
things are really important and let's

00:33:59,020 --> 00:34:04,150
continue to do what we're doing with

00:34:00,130 --> 00:34:06,610
those across the field so that's where

00:34:04,150 --> 00:34:09,490
we have questions if you want to see

00:34:06,610 --> 00:34:12,700
this live I can try a demo we do have

00:34:09,490 --> 00:34:14,859
some time although I'll defer to Charlie

00:34:12,700 --> 00:34:19,290
if we want to go straight to questions

00:34:14,859 --> 00:34:23,260
and off we go shall I go for a demo I

00:34:19,290 --> 00:34:25,450
think we bear in mind the time to try

00:34:23,260 --> 00:34:26,770
some questions said great let's see how

00:34:25,450 --> 00:34:29,470
we get through the questions maybe have

00:34:26,770 --> 00:34:33,310
a government's for a demo I think it

00:34:29,470 --> 00:34:38,169
thank you Tim fantastic stuff so our

00:34:33,310 --> 00:34:41,859
first question you may recognize Rena

00:34:38,169 --> 00:34:43,510
Kriegler no we tried to reduce the

00:34:41,859 --> 00:34:46,419
number of configurations and parameter

00:34:43,510 --> 00:34:47,980
configurations to try out have you any

00:34:46,419 --> 00:34:49,060
thoughts about reducing the number of

00:34:47,980 --> 00:34:51,669
queries

00:34:49,060 --> 00:34:55,240
some of them might correlate with

00:34:51,669 --> 00:34:57,730
optimal RAM RAM values and metrics yes

00:34:55,240 --> 00:35:00,580
so that's another area that I would like

00:34:57,730 --> 00:35:01,930
to build out is is clustering on query

00:35:00,580 --> 00:35:03,970
types to see if there are families that

00:35:01,930 --> 00:35:07,990
do well with different with different

00:35:03,970 --> 00:35:09,550
configurations obviously the the head

00:35:07,990 --> 00:35:11,320
queries are probably going to be

00:35:09,550 --> 00:35:13,570
different than the tail queries and as

00:35:11,320 --> 00:35:14,080
we oh we know you know people searching

00:35:13,570 --> 00:35:15,760
for shoes or

00:35:14,080 --> 00:35:17,460
the people searching for shoes or and

00:35:15,760 --> 00:35:20,550
the people searching for

00:35:17,460 --> 00:35:22,620
for other kinds of things are going to

00:35:20,550 --> 00:35:25,680
be looking differently so the degree to

00:35:22,620 --> 00:35:28,380
which we can cluster those results I

00:35:25,680 --> 00:35:31,290
think think would help with that in my

00:35:28,380 --> 00:35:33,480
experience I haven't really had to

00:35:31,290 --> 00:35:37,170
decrease the number of queries because

00:35:33,480 --> 00:35:40,190
elastic and solar are so powerful that I

00:35:37,170 --> 00:35:42,930
can launch thousands of queries and it

00:35:40,190 --> 00:35:45,450
works in a reasonable amount of time but

00:35:42,930 --> 00:35:48,060
that certainly certainly leads to a good

00:35:45,450 --> 00:35:49,620
point about about understanding the

00:35:48,060 --> 00:35:51,990
nature of your queries and potentially

00:35:49,620 --> 00:35:53,220
if you get a good signal from the

00:35:51,990 --> 00:35:55,380
different types of parties you have as

00:35:53,220 --> 00:35:58,490
you know and if you can do machine

00:35:55,380 --> 00:36:00,570
learning to do the categorization then

00:35:58,490 --> 00:36:02,520
that can be a really useful thing for

00:36:00,570 --> 00:36:04,140
you know korean do machine learning look

00:36:02,520 --> 00:36:07,620
at what settings work best with that

00:36:04,140 --> 00:36:09,120
kind of query and shoot that off but

00:36:07,620 --> 00:36:10,890
thank you I hadn't thought about that so

00:36:09,120 --> 00:36:12,570
though that's just my little bit of

00:36:10,890 --> 00:36:15,990
rambling on on how one might condense

00:36:12,570 --> 00:36:17,850
the queries I'm sorry before I go go on

00:36:15,990 --> 00:36:20,760
what is mildly amusing to me is this is

00:36:17,850 --> 00:36:22,800
this overall process it's very similar

00:36:20,760 --> 00:36:24,150
to what I'm doing on another project

00:36:22,800 --> 00:36:26,040
which I mentioned briefly at the

00:36:24,150 --> 00:36:28,080
beginning where we're doing fuzzing on

00:36:26,040 --> 00:36:30,420
files and the notion there is also can

00:36:28,080 --> 00:36:32,070
you decrease the corpus size and get the

00:36:30,420 --> 00:36:34,200
same results so that you don't have to

00:36:32,070 --> 00:36:38,040
do all of that processing so it's fun to

00:36:34,200 --> 00:36:40,980
see randomization in another field being

00:36:38,040 --> 00:36:47,820
extraordinarily useful fantastic thank

00:36:40,980 --> 00:36:49,470
you so Mateo asks actually yes would you

00:36:47,820 --> 00:36:53,910
recommend your approach to optimize

00:36:49,470 --> 00:36:55,710
recall instead of nd CG okay leaving the

00:36:53,910 --> 00:36:57,810
latter for re-ranking with learn to rank

00:36:55,710 --> 00:37:01,140
and other techniques so yes absolutely

00:36:57,810 --> 00:37:03,300
and I I didn't go into this but there's

00:37:01,140 --> 00:37:09,060
a notion of different categories of

00:37:03,300 --> 00:37:13,200
queries and you could certainly use this

00:37:09,060 --> 00:37:14,970
to work on how you can improve recall

00:37:13,200 --> 00:37:16,980
across those categories so you get the

00:37:14,970 --> 00:37:19,230
good baseline and then leaving the rest

00:37:16,980 --> 00:37:24,150
for learning of to ranked it to pick up

00:37:19,230 --> 00:37:28,530
with a precision what I what I proposed

00:37:24,150 --> 00:37:30,299
though is that you can also use learning

00:37:28,530 --> 00:37:32,069
to rank in this whole framework

00:37:30,299 --> 00:37:34,529
instead of specifying what fields you

00:37:32,069 --> 00:37:36,359
can do you can say I want to external

00:37:34,529 --> 00:37:37,829
with these fields but also have send it

00:37:36,359 --> 00:37:39,809
to this handler which is which uses

00:37:37,829 --> 00:37:42,179
learning to rank so you could put those

00:37:39,809 --> 00:37:44,609
together and see am I in the same

00:37:42,179 --> 00:37:46,079
experimental framework to see if you are

00:37:44,609 --> 00:37:49,170
doing better

00:37:46,079 --> 00:37:51,059
so yes recall baseline recall is where I

00:37:49,170 --> 00:37:54,319
was headed with this and then yes a

00:37:51,059 --> 00:37:58,349
precision as as Trey was pointing out

00:37:54,319 --> 00:37:59,819
with the more advanced methods may may

00:37:58,349 --> 00:38:01,650
may help out quite a bit with the

00:37:59,819 --> 00:38:04,609
knowledge crops and so on so yes

00:38:01,650 --> 00:38:08,640
completely yeah a good point thank you

00:38:04,609 --> 00:38:09,900
okay so then our next question is kind

00:38:08,640 --> 00:38:13,109
of the perfect question for an

00:38:09,900 --> 00:38:15,709
open-source maintainer we have Edward

00:38:13,109 --> 00:38:18,539
asks how can we contribute to this work

00:38:15,709 --> 00:38:21,959
sure I mean the so the easiest thing is

00:38:18,539 --> 00:38:24,059
to use it or look at it and see what

00:38:21,959 --> 00:38:25,229
things you like about it and if there

00:38:24,059 --> 00:38:27,599
are things you really like about it go

00:38:25,229 --> 00:38:29,869
get the course people to put it into

00:38:27,599 --> 00:38:34,769
their system

00:38:29,869 --> 00:38:36,719
but seriously yes so use it break it it

00:38:34,769 --> 00:38:39,689
is still hot off the press it's still an

00:38:36,719 --> 00:38:41,939
alpha version I had to make changes even

00:38:39,689 --> 00:38:46,380
as I was putting this talk together but

00:38:41,939 --> 00:38:48,059
do you use it and let me know how it's

00:38:46,380 --> 00:38:51,179
working if there ways that I can prove

00:38:48,059 --> 00:38:55,019
it I am now actively developing it for

00:38:51,179 --> 00:38:56,400
current work so I had gotten back into

00:38:55,019 --> 00:38:58,229
the codebase and it's easy for me to fix

00:38:56,400 --> 00:39:00,299
things it took me a couple of hours to

00:38:58,229 --> 00:39:01,469
add the more like this query I there are

00:39:00,299 --> 00:39:03,539
a number of other query types that I

00:39:01,469 --> 00:39:06,749
would like to add so feedback on looking

00:39:03,539 --> 00:39:09,599
on on github or on Twitter or on any of

00:39:06,749 --> 00:39:11,209
the other media so feedback feedback and

00:39:09,599 --> 00:39:15,029
obviously pull requests of course

00:39:11,209 --> 00:39:17,939
fantastic thank you and Cedric asks

00:39:15,029 --> 00:39:19,589
thinking about enterprise search and the

00:39:17,939 --> 00:39:21,179
fact that types of users may have

00:39:19,589 --> 00:39:23,459
different objectives with the same query

00:39:21,179 --> 00:39:26,039
would you recommend a great one ground

00:39:23,459 --> 00:39:28,769
truth per user type or would you see a

00:39:26,039 --> 00:39:31,189
way to do it all at once and he pens

00:39:28,769 --> 00:39:37,709
dreaming here

00:39:31,189 --> 00:39:40,229
right I mean so has everybody said but

00:39:37,709 --> 00:39:42,570
seriously if you have worked with people

00:39:40,229 --> 00:39:46,020
with different very different budgets

00:39:42,570 --> 00:39:47,910
or what they can pay for effectively

00:39:46,020 --> 00:39:50,310
what they can afford in the complexity

00:39:47,910 --> 00:39:51,870
of the evaluation framework I have not

00:39:50,310 --> 00:39:55,110
worked in the e Rita and in the retail

00:39:51,870 --> 00:39:57,180
space where search actually is but I

00:39:55,110 --> 00:39:59,610
want you to know I work more in

00:39:57,180 --> 00:40:01,920
government and other places where it's

00:39:59,610 --> 00:40:03,240
important but not they just don't have

00:40:01,920 --> 00:40:04,940
the resources that a bunch of people in

00:40:03,240 --> 00:40:08,220
this meeting have available to them so

00:40:04,940 --> 00:40:11,580
within with inquiry Ted there is a

00:40:08,220 --> 00:40:12,810
notion of a query set and I put that in

00:40:11,580 --> 00:40:15,210
there so that you could have different

00:40:12,810 --> 00:40:17,460
personas so that you could optimize and

00:40:15,210 --> 00:40:21,660
look at at those different personas in

00:40:17,460 --> 00:40:24,230
my little example from the tmdb data

00:40:21,660 --> 00:40:27,420
from open source connections Cogan John

00:40:24,230 --> 00:40:28,650
there are clearly queries that are title

00:40:27,420 --> 00:40:33,000
works and there's clearly titles that

00:40:28,650 --> 00:40:34,590
are actor queries and having having a

00:40:33,000 --> 00:40:36,060
division and having those in two

00:40:34,590 --> 00:40:37,410
different sets again as I mentioned

00:40:36,060 --> 00:40:38,670
earlier so hopefully when the queries

00:40:37,410 --> 00:40:40,170
come in you can do automatic

00:40:38,670 --> 00:40:43,560
classification on them and then figure

00:40:40,170 --> 00:40:44,790
out about how to boost them and other

00:40:43,560 --> 00:40:46,140
resources to support that from an

00:40:44,790 --> 00:40:48,270
evaluation perspective and an

00:40:46,140 --> 00:40:51,230
implementation perspective that would be

00:40:48,270 --> 00:40:53,520
the ideal world and yes we can all dream

00:40:51,230 --> 00:40:56,310
fantastic that that's the end of our

00:40:53,520 --> 00:40:57,750
questions so thank you Tim we'll be

00:40:56,310 --> 00:41:00,300
taking a short break and we'll be moving

00:40:57,750 --> 00:41:01,980
on to our last talk today but thank you

00:41:00,300 --> 00:41:04,590
Tim Tim Tim who's possibly the only

00:41:01,980 --> 00:41:10,530
classically trained rocket data

00:41:04,590 --> 00:41:14,090
scientist thanks Tim thank you with our

00:41:10,530 --> 00:41:14,090
last talk thank you so much

00:41:19,640 --> 00:41:21,700

YouTube URL: https://www.youtube.com/watch?v=rhNmplUwhf8


