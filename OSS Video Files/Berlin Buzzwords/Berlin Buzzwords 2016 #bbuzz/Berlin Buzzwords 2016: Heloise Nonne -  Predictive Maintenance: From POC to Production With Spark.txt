Title: Berlin Buzzwords 2016: Heloise Nonne -  Predictive Maintenance: From POC to Production With Spark
Publication date: 2016-06-11
Playlist: Berlin Buzzwords 2016 #bbuzz
Description: 
	Today's industrial systems produce more and more data everyday. Companies are increasingly using Big Data technologies and data analysis approaches in order to monitor their systems.

I will illustrate this trend with a project of predictive maintenance on trains. In cities where millions of people use public transportation everyday, avoiding faults on trains during circulations is critical. The goal of the project is to predict faults on trains in advance so that can be are dispatched to the workshops accordingly, thus avoiding train delays and reducing maintenance costs.

I'll explain our approach which uses random forests and artificial neural networks with theano, what are the results and how we measure success, and finally how, from developing models on historical data with python, we progressively moved to production and transposed the models to a distributed environment using Spark.

Read more:
https://2016.berlinbuzzwords.de/session/online-learning-vowpal-wabbit-and-hadoop

About Heloise Nonne:
https://2016.berlinbuzzwords.de/users/heloise-nonne

Website: https://berlinbuzzwords.de/
Twitter: https://twitter.com/berlinbuzzwords
LinkedIn: https://www.linkedin.com/showcase/berlin-buzzwords/ 
Reddit: https://www.reddit.com/r/berlinbuzzwords/
Captions: 
	00:00:03,680 --> 00:00:09,570
thank you good morning everyone so I'm

00:00:07,919 --> 00:00:14,250
going to tell you about a project I've

00:00:09,570 --> 00:00:17,550
been working on recently actually since

00:00:14,250 --> 00:00:21,689
until today as a data scientist from

00:00:17,550 --> 00:00:24,180
this company company which is doing a

00:00:21,689 --> 00:00:27,180
consulting in the designs for many

00:00:24,180 --> 00:00:29,130
clients including SNCF which is the

00:00:27,180 --> 00:00:31,590
French train company and tomorrow I will

00:00:29,130 --> 00:00:37,530
be working as a data scientist for my

00:00:31,590 --> 00:00:38,760
clients so I will switch to SNCF and I'm

00:00:37,530 --> 00:00:42,540
going to talk about predictive

00:00:38,760 --> 00:00:46,379
maintenance and trains so some part of

00:00:42,540 --> 00:00:49,770
it i will talk about when I say we is as

00:00:46,379 --> 00:00:52,379
the scientists from the team who started

00:00:49,770 --> 00:00:55,590
the project with a proof of concept but

00:00:52,379 --> 00:00:58,020
sometimes I'll say we as SNCF although

00:00:55,590 --> 00:01:00,600
at the end of the session I won't take

00:00:58,020 --> 00:01:02,430
questions on the ongoing strikes for

00:01:00,600 --> 00:01:05,760
those going to Paris for the euro I

00:01:02,430 --> 00:01:08,340
don't have predictions on that so you

00:01:05,760 --> 00:01:13,760
can take your questions to the French

00:01:08,340 --> 00:01:16,909
Bundestag but I can't answer on that

00:01:13,760 --> 00:01:20,340
anyway so let me give you some facts

00:01:16,909 --> 00:01:23,009
first and some data to give you some

00:01:20,340 --> 00:01:26,670
context where nine billion people on

00:01:23,009 --> 00:01:29,880
earth two out of three live in urban

00:01:26,670 --> 00:01:33,180
areas and when you take Paris area you

00:01:29,880 --> 00:01:36,240
have 12 million people so what it rains

00:01:33,180 --> 00:01:38,640
what does it mean daily for train

00:01:36,240 --> 00:01:42,360
company and since he F has to run 14

00:01:38,640 --> 00:01:45,149
lines 2.2 million trips every day and

00:01:42,360 --> 00:01:48,509
there are more than 6,000 trains running

00:01:45,149 --> 00:01:51,869
and moving around all these people so

00:01:48,509 --> 00:01:55,710
that puts a lot of country constraints

00:01:51,869 --> 00:01:59,040
on the train engineers and those

00:01:55,710 --> 00:02:01,549
constraints are very important so mainly

00:01:59,040 --> 00:02:05,369
you are five your trends have to be

00:02:01,549 --> 00:02:07,560
reliable absolutely reliable you need to

00:02:05,369 --> 00:02:10,950
have them available because 6,000 trains

00:02:07,560 --> 00:02:12,660
to run every day I mean you need to be

00:02:10,950 --> 00:02:15,750
well organized

00:02:12,660 --> 00:02:18,750
safety is extremely important you cannot

00:02:15,750 --> 00:02:23,160
make any mistake because lies are a

00:02:18,750 --> 00:02:27,080
stake economies at stake there's a huge

00:02:23,160 --> 00:02:30,570
constrain the costs for maintenance is

00:02:27,080 --> 00:02:34,680
also very high it's important and a

00:02:30,570 --> 00:02:37,320
slight change means different than

00:02:34,680 --> 00:02:39,810
difference in cost and also you have to

00:02:37,320 --> 00:02:41,430
comply with regulations so that's that

00:02:39,810 --> 00:02:44,370
gives you an idea about how the

00:02:41,430 --> 00:02:49,860
different parameters engineers have to

00:02:44,370 --> 00:02:51,930
deal with so all the trains well they

00:02:49,860 --> 00:02:55,110
were not very collected so you had to

00:02:51,930 --> 00:02:57,000
rely on pure engineering so there is a

00:02:55,110 --> 00:03:00,600
lot of knowledge about this and it

00:02:57,000 --> 00:03:04,200
worked but now that's so many people

00:03:00,600 --> 00:03:07,530
take trains every day this may not be

00:03:04,200 --> 00:03:12,300
sufficient to to run so many trains

00:03:07,530 --> 00:03:14,490
every day so you may use connected

00:03:12,300 --> 00:03:17,930
trains but luckily today with Internet

00:03:14,490 --> 00:03:21,780
of Things you have the possibility to

00:03:17,930 --> 00:03:24,000
get data from the trains and now trains

00:03:21,780 --> 00:03:26,400
are digital natives such as this one

00:03:24,000 --> 00:03:29,730
that replace the other one that I showed

00:03:26,400 --> 00:03:32,010
you so those are bombardier trains they

00:03:29,730 --> 00:03:34,650
are pure I mean it's it's filled with

00:03:32,010 --> 00:03:37,500
electronics in it so this is very new it

00:03:34,650 --> 00:03:40,950
coming to kates a lot they are talking

00:03:37,500 --> 00:03:43,050
all the time there is one computer in

00:03:40,950 --> 00:03:45,360
each vehicle so for each train you have

00:03:43,050 --> 00:03:49,970
six you have seven or eight vehicle and

00:03:45,360 --> 00:03:54,180
this computer generates a lot of data so

00:03:49,970 --> 00:03:56,850
it's not that huge for I mean big data

00:03:54,180 --> 00:04:00,060
people like you but for train engineers

00:03:56,850 --> 00:04:02,670
it's really new I mean this type of data

00:04:00,060 --> 00:04:06,120
arriving in real time this is completely

00:04:02,670 --> 00:04:10,320
new in their process so they are

00:04:06,120 --> 00:04:12,570
changing the process to eat this kind of

00:04:10,320 --> 00:04:16,290
data and use it as much as they can to

00:04:12,570 --> 00:04:18,989
improve maintenance and you have

00:04:16,290 --> 00:04:22,260
fourteen forty thousand different

00:04:18,989 --> 00:04:25,760
variable so a human cannot deal with it

00:04:22,260 --> 00:04:28,010
you need nicely designed

00:04:25,760 --> 00:04:30,800
sense to to deal with that so what kind

00:04:28,010 --> 00:04:33,680
of data comes from the trains I mean

00:04:30,800 --> 00:04:36,500
they just monitor everything they

00:04:33,680 --> 00:04:39,230
monitor material functions of the train

00:04:36,500 --> 00:04:41,270
they Molitor operations and then you

00:04:39,230 --> 00:04:43,880
have dates are coming from the wind

00:04:41,270 --> 00:04:45,800
scene with winch screen monitoring I

00:04:43,880 --> 00:04:48,500
mean it just check if there is enough

00:04:45,800 --> 00:04:53,270
liquid to clean it so it's it's really

00:04:48,500 --> 00:04:56,300
huge and safety are also is important

00:04:53,270 --> 00:05:01,730
because you cannot run train if a door

00:04:56,300 --> 00:05:04,670
is open it's it's impossible so you get

00:05:01,730 --> 00:05:06,920
all these data and you use it to improve

00:05:04,670 --> 00:05:15,050
your maintenance so that's what is in

00:05:06,920 --> 00:05:17,810
production today so before classic

00:05:15,050 --> 00:05:20,960
maintenance you had a failure you send a

00:05:17,810 --> 00:05:23,930
train to workshop you to your diagnostic

00:05:20,960 --> 00:05:26,270
there and you fix it and you send back

00:05:23,930 --> 00:05:30,190
your train so this is a very low level

00:05:26,270 --> 00:05:34,010
in terms of value and analytics and and

00:05:30,190 --> 00:05:36,590
I mean you don't use the data because

00:05:34,010 --> 00:05:38,630
you just are in front of the fact and

00:05:36,590 --> 00:05:40,520
you fix it then you move to connecting

00:05:38,630 --> 00:05:43,130
maintenance you can do your diagnostic

00:05:40,520 --> 00:05:45,620
when the Train is in operation so that

00:05:43,130 --> 00:05:48,140
you know where to send it which were

00:05:45,620 --> 00:05:52,040
shot should you send your train to and

00:05:48,140 --> 00:05:55,370
which failure is it about so you can

00:05:52,040 --> 00:05:58,430
plan your you can plan your maintenance

00:05:55,370 --> 00:06:01,610
in advance that allows you to have more

00:05:58,430 --> 00:06:04,220
reliable trains and make it more

00:06:01,610 --> 00:06:08,150
available as well and then you move

00:06:04,220 --> 00:06:10,430
again to a proactive that means that you

00:06:08,150 --> 00:06:12,020
do your dynastic during operations and

00:06:10,430 --> 00:06:14,980
you can also since you have information

00:06:12,020 --> 00:06:18,590
about your failure you can prioritize

00:06:14,980 --> 00:06:21,350
maintenance meaning you can target in

00:06:18,590 --> 00:06:24,650
priority failures that can have an

00:06:21,350 --> 00:06:28,430
impact on operations and leave failures

00:06:24,650 --> 00:06:33,620
that are less important for later so

00:06:28,430 --> 00:06:35,450
you're planning is optimized now the key

00:06:33,620 --> 00:06:37,970
benefits are of course increase

00:06:35,450 --> 00:06:39,689
reliability availability and you reduce

00:06:37,970 --> 00:06:43,049
your cost you make the right

00:06:39,689 --> 00:06:45,179
just at the right moment and you move

00:06:43,049 --> 00:06:47,279
from systemic maintenance such as what

00:06:45,179 --> 00:06:49,889
you do with your car your car you're

00:06:47,279 --> 00:06:51,419
sending every two years but sometimes

00:06:49,889 --> 00:06:53,369
it's not necessary sometimes you should

00:06:51,419 --> 00:06:56,009
have sent it before sometimes you you

00:06:53,369 --> 00:06:58,739
can wait to two more years so this is

00:06:56,009 --> 00:07:01,139
systematic and now they are moved to

00:06:58,739 --> 00:07:05,069
condition-based maintenance so they

00:07:01,139 --> 00:07:11,279
monitor recognition and they adapt the

00:07:05,069 --> 00:07:14,909
maintenance according to it so what's in

00:07:11,279 --> 00:07:17,899
production today is data analysis so

00:07:14,909 --> 00:07:21,209
they have filters and they monitor coats

00:07:17,899 --> 00:07:23,309
coming from trains and they say okay

00:07:21,209 --> 00:07:25,169
there is an error there is something to

00:07:23,309 --> 00:07:28,469
do with this train this train is okay

00:07:25,169 --> 00:07:31,229
and so they have the fleet's the fleet

00:07:28,469 --> 00:07:33,929
supervisor has a dashboard saying okay

00:07:31,229 --> 00:07:36,059
this trying is coughing a bit there is

00:07:33,929 --> 00:07:38,610
something to do with with with it you

00:07:36,059 --> 00:07:40,819
should plan a maintenance in workshop

00:07:38,610 --> 00:07:43,679
and remove it from circulation and

00:07:40,819 --> 00:07:49,379
replace it with another train that's

00:07:43,679 --> 00:07:52,050
feeling better the question is now can

00:07:49,379 --> 00:07:54,629
we predict failure before they happen

00:07:52,050 --> 00:07:56,159
because here its failure I mean there

00:07:54,629 --> 00:07:58,110
are many Tony Nguyen time so they know

00:07:56,159 --> 00:08:01,019
exactly when it happens it's better than

00:07:58,110 --> 00:08:03,899
before but if you can predict it's like

00:08:01,019 --> 00:08:06,149
30 minutes before it's very important

00:08:03,899 --> 00:08:07,769
because then you know okay 30 minutes I

00:08:06,149 --> 00:08:09,839
have a high probability to have a

00:08:07,769 --> 00:08:11,759
problem with this train I'm not going to

00:08:09,839 --> 00:08:14,069
send it on the tracks I'm going to

00:08:11,759 --> 00:08:16,529
replace it with another one so you avoid

00:08:14,069 --> 00:08:19,679
impact and hundreds of people in cities

00:08:16,529 --> 00:08:22,199
like Paris it's very important so even

00:08:19,679 --> 00:08:26,779
30 minutes even maybe 15 minutes is

00:08:22,199 --> 00:08:30,539
something that you win on your operation

00:08:26,779 --> 00:08:32,819
so you'd like to use I mean everyone

00:08:30,539 --> 00:08:34,709
talks about Big Data everyone talks

00:08:32,819 --> 00:08:38,550
about machine learning deep learning so

00:08:34,709 --> 00:08:41,180
I sense yes thought okay we're going to

00:08:38,550 --> 00:08:43,740
try this I mean we don't have Big Data

00:08:41,180 --> 00:08:46,199
technologies in our system in our

00:08:43,740 --> 00:08:51,660
operation in our production now but

00:08:46,199 --> 00:08:52,790
let's try it so that has that may have

00:08:51,660 --> 00:08:54,710
an impact on

00:08:52,790 --> 00:08:57,380
raishin but also it has an impact on the

00:08:54,710 --> 00:08:59,450
knowledge as well machine learning can

00:08:57,380 --> 00:09:03,170
could help to reinforce engineering

00:08:59,450 --> 00:09:07,430
knowledge in the sense that you have

00:09:03,170 --> 00:09:09,500
experts trained experts have a very long

00:09:07,430 --> 00:09:12,920
history of dealing with trains so they

00:09:09,500 --> 00:09:15,650
know what's happening they have good

00:09:12,920 --> 00:09:17,810
knowledge of the phenomenon that have up

00:09:15,650 --> 00:09:20,600
here but sometimes they have pre

00:09:17,810 --> 00:09:23,810
conceived ideas they have intuition but

00:09:20,600 --> 00:09:26,300
something may be non-intuitive you may

00:09:23,810 --> 00:09:28,700
have correlations that you can't

00:09:26,300 --> 00:09:30,590
anticipate according to you expert

00:09:28,700 --> 00:09:33,770
knowledge and that's where machine Alec

00:09:30,590 --> 00:09:36,500
will help on 40,000 variables a human

00:09:33,770 --> 00:09:38,240
cannot get cannot extract knowledge but

00:09:36,500 --> 00:09:41,210
maybe machine learning can add something

00:09:38,240 --> 00:09:44,690
more they want it won't replace experts

00:09:41,210 --> 00:09:51,140
but it could add some useful knowledge

00:09:44,690 --> 00:09:53,990
to it and produce rules AG rules about

00:09:51,140 --> 00:09:56,440
the physics but also something that may

00:09:53,990 --> 00:10:00,050
not be explained but that's known

00:09:56,440 --> 00:10:03,140
another thing also is that when you have

00:10:00,050 --> 00:10:06,140
new material you need to learn about how

00:10:03,140 --> 00:10:09,950
its aging and those new trains there are

00:10:06,140 --> 00:10:11,990
so many electronic functions in it it's

00:10:09,950 --> 00:10:15,920
new so they don't have 50 years of

00:10:11,990 --> 00:10:19,640
running this a chronic part to build

00:10:15,920 --> 00:10:21,530
knowledge on so you need to construct

00:10:19,640 --> 00:10:23,960
this new knowledge on this new part of

00:10:21,530 --> 00:10:26,780
the materials day and it's it's a noun

00:10:23,960 --> 00:10:29,960
so machine learning and the data could

00:10:26,780 --> 00:10:32,570
speed up how expert learn about the

00:10:29,960 --> 00:10:35,090
aging rules so that's the process that

00:10:32,570 --> 00:10:38,480
they are putting in place to deal with

00:10:35,090 --> 00:10:41,050
this aging trains are put in place

00:10:38,480 --> 00:10:41,050
faster

00:10:45,550 --> 00:10:56,110
so that's how this project was born a

00:10:49,750 --> 00:10:58,820
sense EF so thought to start this

00:10:56,110 --> 00:11:02,840
machine earning big data analysis

00:10:58,820 --> 00:11:05,060
project but the thing is that you have

00:11:02,840 --> 00:11:07,400
operations you cannot make mistake

00:11:05,060 --> 00:11:09,020
mistake in production it's not like

00:11:07,400 --> 00:11:11,720
marketing when you make a mistake you

00:11:09,020 --> 00:11:13,970
can you target the clients and it's you

00:11:11,720 --> 00:11:18,530
target it's wrongly that's okay nobody

00:11:13,970 --> 00:11:23,210
is going to die but trains you don't

00:11:18,530 --> 00:11:26,180
have room for mistake so for for big

00:11:23,210 --> 00:11:29,210
data in something completely new for the

00:11:26,180 --> 00:11:32,360
industry you need to prove that is going

00:11:29,210 --> 00:11:34,780
to work and you need to prove if it's

00:11:32,360 --> 00:11:37,130
reliable or not and if it's not reliable

00:11:34,780 --> 00:11:40,340
there is some uncertainty you have to

00:11:37,130 --> 00:11:43,730
control it you cannot let an artificial

00:11:40,340 --> 00:11:47,840
intelligence do something that you can't

00:11:43,730 --> 00:11:50,750
control so that's why this project was

00:11:47,840 --> 00:11:52,820
very constrained in terms of in terms of

00:11:50,750 --> 00:11:56,180
time because we had to prove it worked

00:11:52,820 --> 00:11:58,100
and we have to prove very fast so the

00:11:56,180 --> 00:12:00,320
proof-of-concept part we had ten weeks

00:11:58,100 --> 00:12:04,130
two weeks to learn about the data I get

00:12:00,320 --> 00:12:06,140
it and meet the third and then eight

00:12:04,130 --> 00:12:09,010
weeks to do the problem so data cleaning

00:12:06,140 --> 00:12:12,170
getting the data crossing thanks and

00:12:09,010 --> 00:12:14,560
countering problems and they'll build a

00:12:12,170 --> 00:12:17,900
machine learning system and predict

00:12:14,560 --> 00:12:20,180
failures so that was very very short

00:12:17,900 --> 00:12:23,060
that constraint is important to have in

00:12:20,180 --> 00:12:24,950
mind because I mean when I first learn

00:12:23,060 --> 00:12:28,160
about the project I thought okay yeah

00:12:24,950 --> 00:12:29,990
we're going to do deep learning X neural

00:12:28,160 --> 00:12:31,760
networks and everything that you can do

00:12:29,990 --> 00:12:34,250
that today in eight weeks you have to be

00:12:31,760 --> 00:12:37,070
pragmatic and you have to stick to

00:12:34,250 --> 00:12:39,320
existing processes because it has to go

00:12:37,070 --> 00:12:40,910
very good if it works if it seems to

00:12:39,320 --> 00:12:42,410
work this has to go very quickly in

00:12:40,910 --> 00:12:44,680
prediction because there are costs

00:12:42,410 --> 00:12:47,240
associated with and if you can gain

00:12:44,680 --> 00:12:49,910
return on it you have to put it in

00:12:47,240 --> 00:12:55,460
project in production very fast so there

00:12:49,910 --> 00:12:57,710
was a push to go very quickly although i

00:12:55,460 --> 00:12:59,180
would have liked as a data scientist i

00:12:57,710 --> 00:13:01,250
understand why they were

00:12:59,180 --> 00:13:05,150
I mean SMF was so pushy to put in

00:13:01,250 --> 00:13:07,220
production but from the data in default

00:13:05,150 --> 00:13:09,890
of you i would have liked more time to

00:13:07,220 --> 00:13:14,990
consolidate but this is a constrain and

00:13:09,890 --> 00:13:17,540
it makes sense so this proof-of-concept

00:13:14,990 --> 00:13:21,250
was done and then since apparently it

00:13:17,540 --> 00:13:26,420
worked we put it and we put up a pilot

00:13:21,250 --> 00:13:29,000
so moving from Park part to a production

00:13:26,420 --> 00:13:31,280
like to measure to be able to measure

00:13:29,000 --> 00:13:33,170
what happens in real conditions because

00:13:31,280 --> 00:13:35,510
there is always a big difference when

00:13:33,170 --> 00:13:37,190
you work on historical data and real

00:13:35,510 --> 00:13:40,850
data hot day they are coming from the

00:13:37,190 --> 00:13:42,680
trains and right now we are at the

00:13:40,850 --> 00:13:44,810
beginning of this phase that should last

00:13:42,680 --> 00:13:47,660
for six months we are just going to

00:13:44,810 --> 00:13:49,400
watch what's happening if the failures

00:13:47,660 --> 00:13:52,100
are predicted correctly which are

00:13:49,400 --> 00:13:55,610
predicted wrong to know what's happening

00:13:52,100 --> 00:13:58,610
because we don't know what what what's

00:13:55,610 --> 00:14:01,130
going on in in real condition yet and

00:13:58,610 --> 00:14:03,080
then if it works with if we manage to

00:14:01,130 --> 00:14:07,010
tune everything we're going to put it in

00:14:03,080 --> 00:14:08,540
real production and with this comes the

00:14:07,010 --> 00:14:11,180
red problem the change management

00:14:08,540 --> 00:14:14,300
because you're pouring a machine

00:14:11,180 --> 00:14:16,760
learning into an existing process that

00:14:14,300 --> 00:14:19,760
you cannot change for success processes

00:14:16,760 --> 00:14:21,500
have been there for a long time and they

00:14:19,760 --> 00:14:24,860
are there for good reasons so you have

00:14:21,500 --> 00:14:28,460
to stick to this and adapt but evolve

00:14:24,860 --> 00:14:32,660
mentally evolve how expert deal with

00:14:28,460 --> 00:14:35,600
that and that's our questions today so

00:14:32,660 --> 00:14:40,640
that's the contest contest of at this

00:14:35,600 --> 00:14:44,710
project and I'm going to tell you the

00:14:40,640 --> 00:14:47,090
road that we have have done since about

00:14:44,710 --> 00:14:51,140
the beginning of this this

00:14:47,090 --> 00:14:54,440
proof-of-concept so the first challenge

00:14:51,140 --> 00:14:56,480
is that failures I know people are going

00:14:54,440 --> 00:14:59,030
to say that's not true but I tell you

00:14:56,480 --> 00:15:02,750
it's true they are very rare very very

00:14:59,030 --> 00:15:04,670
very I try to ask them to produce more

00:15:02,750 --> 00:15:08,180
failures but somehow they didn't want to

00:15:04,670 --> 00:15:09,920
do it so we had to deal with this and

00:15:08,180 --> 00:15:12,160
for machine learning you don't have

00:15:09,920 --> 00:15:14,290
examples about

00:15:12,160 --> 00:15:18,550
you still have to learn from its side

00:15:14,290 --> 00:15:22,779
it's very difficult a second problem

00:15:18,550 --> 00:15:24,100
also ish although I mean trains have

00:15:22,779 --> 00:15:26,649
been running for a long time but these

00:15:24,100 --> 00:15:28,870
trains have been running for two years

00:15:26,649 --> 00:15:31,480
at most today it's been two years so at

00:15:28,870 --> 00:15:34,089
that time we had like 18 months

00:15:31,480 --> 00:15:37,300
available that's very very very small

00:15:34,089 --> 00:15:41,470
and that's a problem to have efficient

00:15:37,300 --> 00:15:45,879
machine learning another challenge that

00:15:41,470 --> 00:15:47,529
you most of you may not encounter I mean

00:15:45,879 --> 00:15:50,920
if you take a young company such as the

00:15:47,529 --> 00:15:55,449
longer i know people around here from

00:15:50,920 --> 00:15:59,220
zalando it's from 2008 okay fine so a

00:15:55,449 --> 00:16:04,810
few years you take an oil company Google

00:15:59,220 --> 00:16:07,629
1998 that's fine older but this company

00:16:04,810 --> 00:16:13,240
are digital natives when you take a

00:16:07,629 --> 00:16:15,310
sense yes it's from 1938 that means that

00:16:13,240 --> 00:16:18,850
if you're trying to do big data if you

00:16:15,310 --> 00:16:21,339
are trying to do data analysis you have

00:16:18,850 --> 00:16:23,889
to deal with data and processes and

00:16:21,339 --> 00:16:27,839
information systems that are very old

00:16:23,889 --> 00:16:32,290
and that were born long before big data

00:16:27,839 --> 00:16:35,769
so that comes with challenges that data

00:16:32,290 --> 00:16:38,170
big data engineers may not I mean don't

00:16:35,769 --> 00:16:41,500
anchored her every day because they have

00:16:38,170 --> 00:16:47,019
nice logs produced by new applications

00:16:41,500 --> 00:16:51,759
and it's all very nice but well for is

00:16:47,019 --> 00:16:54,910
in CF it's slightly different so the

00:16:51,759 --> 00:16:57,939
challenge is about data first is data

00:16:54,910 --> 00:17:01,329
quality I mean you have unclean data

00:16:57,939 --> 00:17:05,079
like everywhere but in addition you have

00:17:01,329 --> 00:17:08,100
data I mean there it's it's not clean or

00:17:05,079 --> 00:17:11,439
not reliable for different reasons for

00:17:08,100 --> 00:17:14,380
trains for instance we wanted to do

00:17:11,439 --> 00:17:17,319
supervised learning so we had to build a

00:17:14,380 --> 00:17:21,549
target so the target was a failure but

00:17:17,319 --> 00:17:24,850
failure how a failure is identified it

00:17:21,549 --> 00:17:28,030
comes from many different sources so

00:17:24,850 --> 00:17:30,580
either the Train realize itself that

00:17:28,030 --> 00:17:32,650
there is a failure in that case the time

00:17:30,580 --> 00:17:35,470
of occurrence of the fear failure is

00:17:32,650 --> 00:17:37,660
precise because it's new electric system

00:17:35,470 --> 00:17:40,539
but it may be your driver your driver

00:17:37,660 --> 00:17:42,970
has a problem so he realized that there

00:17:40,539 --> 00:17:45,940
is something he there is something a

00:17:42,970 --> 00:17:51,010
door for instance okay so he stopped the

00:17:45,940 --> 00:17:54,539
train he gets done his cabin walks along

00:17:51,010 --> 00:17:56,830
the tracks check on the door closed it

00:17:54,539 --> 00:17:59,890
manually and then comes back to the

00:17:56,830 --> 00:18:02,500
cabin he calls someone he pushed a

00:17:59,890 --> 00:18:05,320
button but the time of occurrence of

00:18:02,500 --> 00:18:07,840
your failure is completely and precise

00:18:05,320 --> 00:18:10,480
you have no idea maybe it was 15 minute

00:18:07,840 --> 00:18:13,270
before it's your information maybe it

00:18:10,480 --> 00:18:16,150
was later there is uncertainty about the

00:18:13,270 --> 00:18:19,000
time it could be the fleet supervisor so

00:18:16,150 --> 00:18:22,450
there is a lot of uncertainty in in your

00:18:19,000 --> 00:18:24,880
processes and when you build a target or

00:18:22,450 --> 00:18:27,909
that I sign this you like when it when

00:18:24,880 --> 00:18:32,559
it's precise but the target is not

00:18:27,909 --> 00:18:35,260
precise another thing is all is you need

00:18:32,559 --> 00:18:38,559
to identify which type of failure it is

00:18:35,260 --> 00:18:40,870
so you need feedback from technicians in

00:18:38,559 --> 00:18:42,960
workshops that means they are entering

00:18:40,870 --> 00:18:46,169
information at the end of their day

00:18:42,960 --> 00:18:49,510
after fixing several failures on train

00:18:46,169 --> 00:18:52,240
at at the end of the day they go back

00:18:49,510 --> 00:18:54,730
they enter this manually in the system

00:18:52,240 --> 00:18:56,500
that means sometimes it's a natural rate

00:18:54,730 --> 00:18:59,260
they are they may be in a hurry there

00:18:56,500 --> 00:19:01,179
may be a an emergency somewhere so there

00:18:59,260 --> 00:19:03,010
is also something very imp resides

00:19:01,179 --> 00:19:06,370
although it's a modern modern way to

00:19:03,010 --> 00:19:08,890
produce data I mean it's 21st century

00:19:06,370 --> 00:19:11,440
but still it's you have to deal with

00:19:08,890 --> 00:19:14,789
that so you may I mean you may need to

00:19:11,440 --> 00:19:19,600
do when lp2 to do this but you add more

00:19:14,789 --> 00:19:22,510
more noise and in your process so it's

00:19:19,600 --> 00:19:24,370
data is generated through various and

00:19:22,510 --> 00:19:27,610
very complex processes some insurances

00:19:24,370 --> 00:19:29,620
it's like a living organism so there are

00:19:27,610 --> 00:19:31,870
many functions and it's difficult to

00:19:29,620 --> 00:19:33,669
deal with it may not be big data but

00:19:31,870 --> 00:19:37,500
it's big in the sense that it's

00:19:33,669 --> 00:19:37,500
completely heterogeneous

00:19:37,799 --> 00:19:44,409
and sometimes getting data is difficult

00:19:41,649 --> 00:19:47,950
because there may be contracts with a

00:19:44,409 --> 00:19:49,750
train constructor that doesn't allow the

00:19:47,950 --> 00:19:52,360
train company to get some type of data

00:19:49,750 --> 00:19:55,149
for some reason so it's a long process

00:19:52,360 --> 00:19:57,669
and in eight weeks we some some part of

00:19:55,149 --> 00:20:00,549
the data we would have liked to have we

00:19:57,669 --> 00:20:02,770
didn't get but we had the main the core

00:20:00,549 --> 00:20:08,080
data which was the data coming from the

00:20:02,770 --> 00:20:10,330
trains the codes and operation data so

00:20:08,080 --> 00:20:14,110
another funny challenges that we did not

00:20:10,330 --> 00:20:18,520
anticipate it is that trains dream when

00:20:14,110 --> 00:20:19,809
they sleep so I didn't know about that

00:20:18,520 --> 00:20:26,409
I'm sure he didn't know about that

00:20:19,809 --> 00:20:29,110
either but yes I mean in the system in

00:20:26,409 --> 00:20:31,210
train computers generate codes I mean

00:20:29,110 --> 00:20:33,429
the analyzed physical data of vibration

00:20:31,210 --> 00:20:35,620
and everything and then they said they

00:20:33,429 --> 00:20:37,990
ike radiate this data and the site code

00:20:35,620 --> 00:20:41,710
so there are about four these trains are

00:20:37,990 --> 00:20:44,289
about 2500 different codes and that was

00:20:41,710 --> 00:20:47,380
our core data and there was one code

00:20:44,289 --> 00:20:49,510
saying okay the driver enter the train

00:20:47,380 --> 00:20:51,700
he pushed button and he started the

00:20:49,510 --> 00:20:54,870
train and there was another code to say

00:20:51,700 --> 00:21:00,309
the driver goal of the train and

00:20:54,870 --> 00:21:02,590
finished his mission and when you want

00:21:00,309 --> 00:21:05,590
to predict failure you don't want data

00:21:02,590 --> 00:21:07,770
coming from trains outside of operations

00:21:05,590 --> 00:21:10,659
because there may be a technicians a

00:21:07,770 --> 00:21:13,240
technician passing by and Adam are

00:21:10,659 --> 00:21:15,700
collecting a cable that sends a code but

00:21:13,240 --> 00:21:17,950
it has no meaning about operation so you

00:21:15,700 --> 00:21:22,090
have to remove this data so we shall

00:21:17,950 --> 00:21:24,520
okay that's uh I we did not anticipate

00:21:22,090 --> 00:21:28,090
that the we didn't know that trains

00:21:24,520 --> 00:21:30,039
would talk there in their dreams but

00:21:28,090 --> 00:21:34,690
they do so you have to take out the data

00:21:30,039 --> 00:21:37,059
and we tried this and then actually the

00:21:34,690 --> 00:21:40,120
performance of our machine learning

00:21:37,059 --> 00:21:43,029
system was very bad and we didn't know

00:21:40,120 --> 00:21:45,960
about that we didn't know why it turned

00:21:43,029 --> 00:21:49,090
out that actually the process of

00:21:45,960 --> 00:21:51,640
terminating the mission is

00:21:49,090 --> 00:21:55,650
is wrong so that the code that we are

00:21:51,640 --> 00:22:00,550
targeting to take off the useless data

00:21:55,650 --> 00:22:04,000
was wrong so we were learning about the

00:22:00,550 --> 00:22:06,870
train stream but it wasn't very useful

00:22:04,000 --> 00:22:09,430
so actually we had to get the data

00:22:06,870 --> 00:22:12,550
monitoring so from a completely

00:22:09,430 --> 00:22:15,520
different information system data saying

00:22:12,550 --> 00:22:17,980
this train started at this hour from

00:22:15,520 --> 00:22:20,620
this station and it ended at this hour

00:22:17,980 --> 00:22:23,980
from this station so that's that's okay

00:22:20,620 --> 00:22:27,490
data exists but that adds a lot of

00:22:23,980 --> 00:22:29,740
complexity in your system since okay

00:22:27,490 --> 00:22:31,570
before you thought you could rely on one

00:22:29,740 --> 00:22:33,310
source of data that's precise actually

00:22:31,570 --> 00:22:35,830
it's not precise so you have to cross it

00:22:33,310 --> 00:22:38,290
with another source and you have to

00:22:35,830 --> 00:22:41,460
filter out data that means that in

00:22:38,290 --> 00:22:44,200
production it has a cost in terms of

00:22:41,460 --> 00:22:46,360
calculation it's it's really important

00:22:44,200 --> 00:22:50,700
and you may lose two weeks in your

00:22:46,360 --> 00:22:55,720
project trying to fix this problem and

00:22:50,700 --> 00:22:57,940
also since the data is produced in

00:22:55,720 --> 00:23:00,640
production you cannot go back to the

00:22:57,940 --> 00:23:03,400
systems and ask the people to change to

00:23:00,640 --> 00:23:06,430
think because people having a hand on

00:23:03,400 --> 00:23:08,170
how the computer sends data is the

00:23:06,430 --> 00:23:10,030
constructor so you have to go back then

00:23:08,170 --> 00:23:13,960
change a contract with the constructor

00:23:10,030 --> 00:23:17,290
it's impossible to fix I mean in a short

00:23:13,960 --> 00:23:22,210
time so you have really this constraint

00:23:17,290 --> 00:23:24,160
that your system is really complex and

00:23:22,210 --> 00:23:27,100
involve many different entities and

00:23:24,160 --> 00:23:30,580
that's different from many companies

00:23:27,100 --> 00:23:33,130
that you know about I think anyway so

00:23:30,580 --> 00:23:35,140
how did work very quickly because I

00:23:33,130 --> 00:23:37,750
think you know about this so we have

00:23:35,140 --> 00:23:42,520
sequences of code and since we are doing

00:23:37,750 --> 00:23:45,040
supervised learning we need to aggregate

00:23:42,520 --> 00:23:48,760
this to have one line with one target

00:23:45,040 --> 00:23:50,830
saying okay at this this hour there was

00:23:48,760 --> 00:23:52,300
a failure this time there was not a

00:23:50,830 --> 00:23:57,010
failure and everything so you had

00:23:52,300 --> 00:24:00,640
somehow to take some time on which youth

00:23:57,010 --> 00:24:02,710
monitor your data and you count number

00:24:00,640 --> 00:24:05,470
of each codes things like I

00:24:02,710 --> 00:24:08,289
means you calculate the average duration

00:24:05,470 --> 00:24:10,600
of a code thanks a lot so you add you

00:24:08,289 --> 00:24:12,940
aggregate your data so that you have

00:24:10,600 --> 00:24:15,789
sequences corresponding to different

00:24:12,940 --> 00:24:17,830
trains and after the sequences like 30

00:24:15,789 --> 00:24:20,649
minutes later you say there was a

00:24:17,830 --> 00:24:22,899
failure or there was not a failure so

00:24:20,649 --> 00:24:24,909
that's how we did it that's very simple

00:24:22,899 --> 00:24:28,210
but we had to be pragmatic and go fast

00:24:24,909 --> 00:24:31,299
and we thought supervised learning would

00:24:28,210 --> 00:24:33,520
work because it stable it works almost

00:24:31,299 --> 00:24:35,799
all the time you take random forest it

00:24:33,520 --> 00:24:38,460
is going to work anyway it it may have

00:24:35,799 --> 00:24:41,470
lower performance than neural networks

00:24:38,460 --> 00:24:43,390
but in eight weeks there is no way you

00:24:41,470 --> 00:24:46,750
can develop a neural network and do deep

00:24:43,390 --> 00:24:51,970
learning on this so that was the safe

00:24:46,750 --> 00:24:54,399
approach we knew were going to work so

00:24:51,970 --> 00:24:58,450
that that's how it works so we have

00:24:54,399 --> 00:25:01,779
identified a false in all the trains all

00:24:58,450 --> 00:25:06,159
the time and to generate lines that has

00:25:01,779 --> 00:25:09,100
that leads to a fault we take the fault

00:25:06,159 --> 00:25:12,130
we take a horse and prediction so like

00:25:09,100 --> 00:25:14,980
30 minutes one hour whatever time you

00:25:12,130 --> 00:25:18,100
want to go in advance and then you want

00:25:14,980 --> 00:25:21,220
to share your code for some time so in

00:25:18,100 --> 00:25:24,610
this example on for hours I take four

00:25:21,220 --> 00:25:26,470
hours off of codes I aggregate I look at

00:25:24,610 --> 00:25:28,750
it I feed it to a machine learning

00:25:26,470 --> 00:25:32,799
system and I it's going to learn whether

00:25:28,750 --> 00:25:38,140
or not 30 minutes later it has led to

00:25:32,799 --> 00:25:42,250
failure or not so that's how you do with

00:25:38,140 --> 00:25:45,159
your goggle like a problem you have a

00:25:42,250 --> 00:25:48,429
history you separate it you learn on

00:25:45,159 --> 00:25:50,679
thirty seventy percent of your data and

00:25:48,429 --> 00:25:55,059
then you test it on thirty percent but

00:25:50,679 --> 00:25:56,770
that's history and real really real life

00:25:55,059 --> 00:25:59,559
data it's different because you have hot

00:25:56,770 --> 00:26:02,830
data this is cold data and it makes

00:25:59,559 --> 00:26:04,960
change and that's actually what we are

00:26:02,830 --> 00:26:10,090
saying today I mean it changes it's not

00:26:04,960 --> 00:26:15,309
the same so you have and you need your

00:26:10,090 --> 00:26:16,740
data in production and you need to have

00:26:15,309 --> 00:26:19,800
it to work lately like that

00:26:16,740 --> 00:26:22,050
but when you do it when you do a proof

00:26:19,800 --> 00:26:27,090
of concept in eight weeks your data

00:26:22,050 --> 00:26:30,240
scientists work light so I mean it's

00:26:27,090 --> 00:26:32,960
difficult you have your data engineers

00:26:30,240 --> 00:26:35,580
that know about spark and the are

00:26:32,960 --> 00:26:37,710
playing with a cluster and your data

00:26:35,580 --> 00:26:41,429
sense this work with Python insert

00:26:37,710 --> 00:26:42,990
reason I mean that's me I know and we

00:26:41,429 --> 00:26:46,290
had to communicate with the data

00:26:42,990 --> 00:26:48,480
engineer transposing your our code that

00:26:46,290 --> 00:26:51,090
was designed very quickly very pragmatic

00:26:48,480 --> 00:26:54,000
way they had to put it in production and

00:26:51,090 --> 00:26:57,740
make it work and that was difficult we

00:26:54,000 --> 00:27:00,900
didn't think at first in terms of

00:26:57,740 --> 00:27:03,630
distributed computation so we had to

00:27:00,900 --> 00:27:06,510
change reorder our code so that it would

00:27:03,630 --> 00:27:10,410
be possible to distribute computation of

00:27:06,510 --> 00:27:13,860
our trains well I took some time to to

00:27:10,410 --> 00:27:17,370
design I mean it was different also

00:27:13,860 --> 00:27:19,470
writing efficient spark code translating

00:27:17,370 --> 00:27:21,660
from a park written in Python I I

00:27:19,470 --> 00:27:23,550
thought it would be easier because spark

00:27:21,660 --> 00:27:25,710
you know they tell you we have data

00:27:23,550 --> 00:27:27,960
frame it's very much like pandas

00:27:25,710 --> 00:27:32,250
dataframe well I catch exists is not

00:27:27,960 --> 00:27:36,450
very true here it is very difficult so

00:27:32,250 --> 00:27:39,929
it took a lot of a lot of work to

00:27:36,450 --> 00:27:44,540
transpose it but Indian it's it's it's

00:27:39,929 --> 00:27:47,940
okay so but there were questions also

00:27:44,540 --> 00:27:52,220
how do you validate that your pilot's

00:27:47,940 --> 00:27:54,780
reproduce what your proof of concept did

00:27:52,220 --> 00:27:57,720
there are differences in implementation

00:27:54,780 --> 00:27:59,640
I didn't know about that but less is not

00:27:57,720 --> 00:28:02,040
the same as less than equal in Python

00:27:59,640 --> 00:28:05,309
and spark so when we would try to

00:28:02,040 --> 00:28:09,270
compare different at different points

00:28:05,309 --> 00:28:11,520
how our data was provided so we we took

00:28:09,270 --> 00:28:13,620
data from the proof of concept and we

00:28:11,520 --> 00:28:16,710
try to compare the data with a pilot but

00:28:13,620 --> 00:28:19,710
there were lines didn't match and it

00:28:16,710 --> 00:28:23,640
took us sometimes to realize that less

00:28:19,710 --> 00:28:26,880
was not less than equal I mean you don't

00:28:23,640 --> 00:28:28,860
anticipate this kind of problem so we

00:28:26,880 --> 00:28:30,360
thought we would develop this in one

00:28:28,860 --> 00:28:34,500
month and a half actually it was

00:28:30,360 --> 00:28:36,410
slightly more and there is a question

00:28:34,500 --> 00:28:40,110
also when you want to compare

00:28:36,410 --> 00:28:43,590
predictions and tradition performance

00:28:40,110 --> 00:28:46,380
between a proof of concept and a pilot

00:28:43,590 --> 00:28:49,200
so we had the random forest implemented

00:28:46,380 --> 00:28:53,880
in Python in scikit-learn and we had the

00:28:49,200 --> 00:28:56,520
random forests implemented in a leap but

00:28:53,880 --> 00:28:58,559
actually one first up somehow random so

00:28:56,520 --> 00:29:01,410
we cannot compare data with data it's

00:28:58,559 --> 00:29:04,380
obviously not going to be the same so

00:29:01,410 --> 00:29:07,919
you have to design new tests statistical

00:29:04,380 --> 00:29:09,540
tests to be able to say okay this sign

00:29:07,919 --> 00:29:12,720
is not the same you can't compare

00:29:09,540 --> 00:29:16,590
trained by train it's impossible so I

00:29:12,720 --> 00:29:18,300
mean this is new compared I mean machine

00:29:16,590 --> 00:29:19,950
learning there is some randomness there

00:29:18,300 --> 00:29:22,200
is some difference that's not the same

00:29:19,950 --> 00:29:25,080
as doing a proof of concept with the

00:29:22,200 --> 00:29:28,050
fixed application when you put machine

00:29:25,080 --> 00:29:34,610
learning there it's you you have new

00:29:28,050 --> 00:29:39,210
problems so what's our stack so we have

00:29:34,610 --> 00:29:41,760
Hadoop cluster with spark so we most of

00:29:39,210 --> 00:29:43,169
the know all data preparation and the

00:29:41,760 --> 00:29:47,090
machine learning is done it's park and

00:29:43,169 --> 00:29:49,590
there is some reporting parts that we do

00:29:47,090 --> 00:29:52,640
because we need to send back information

00:29:49,590 --> 00:29:56,550
to the experts so we have the web

00:29:52,640 --> 00:29:59,669
application that's asking astok search

00:29:56,550 --> 00:30:05,309
where results are stored so thats

00:29:59,669 --> 00:30:10,440
angularjs that that reduce reporting for

00:30:05,309 --> 00:30:13,230
the experts the Custer is quite small I

00:30:10,440 --> 00:30:16,320
mean this is the beginning and the team

00:30:13,230 --> 00:30:20,790
is learning and everything and there is

00:30:16,320 --> 00:30:22,530
a question data we have is not so big so

00:30:20,790 --> 00:30:26,730
we could have actually stick to python

00:30:22,530 --> 00:30:29,640
and put it in production but we

00:30:26,730 --> 00:30:31,710
anticipate that's very soon they're

00:30:29,640 --> 00:30:34,530
going to be more trains generating more

00:30:31,710 --> 00:30:37,500
data so we thought okay let's start with

00:30:34,530 --> 00:30:40,650
this and learn right now since we have

00:30:37,500 --> 00:30:42,659
some slack about time so that tomorrow

00:30:40,650 --> 00:30:45,809
when we have real big data

00:30:42,659 --> 00:30:51,450
we have encountered some problems and we

00:30:45,809 --> 00:30:55,139
are starting to what to work with it so

00:30:51,450 --> 00:30:57,389
how it works you have I'm sure you know

00:30:55,139 --> 00:30:59,700
the psych lecture so you have you have

00:30:57,389 --> 00:31:01,349
an incoming flux you prepare data you

00:30:59,700 --> 00:31:04,710
store it for the training of your

00:31:01,349 --> 00:31:06,840
problems your models you have some

00:31:04,710 --> 00:31:10,049
reporting and hide learn how will it

00:31:06,840 --> 00:31:11,909
learned and and then you update your

00:31:10,049 --> 00:31:15,059
model that are in production and that

00:31:11,909 --> 00:31:18,509
works on a hot data and this produces a

00:31:15,059 --> 00:31:22,379
stream of near real-time predictions

00:31:18,509 --> 00:31:27,659
that's sent to expert so that they can

00:31:22,379 --> 00:31:29,789
use it I'm going to skip that because I

00:31:27,659 --> 00:31:32,729
don't think it's so important we could

00:31:29,789 --> 00:31:37,080
come back to this if i have questions

00:31:32,729 --> 00:31:39,989
but that's how we deal with data and

00:31:37,080 --> 00:31:44,070
coming from times it's not so so

00:31:39,989 --> 00:31:47,340
interesting what we are aiming at is to

00:31:44,070 --> 00:31:49,529
have a prediction so we it predicts 30

00:31:47,340 --> 00:31:52,019
minutes before so at some point we

00:31:49,529 --> 00:31:54,450
expect you have okay I have a one train

00:31:52,019 --> 00:31:57,330
that's coming out of a workshop and then

00:31:54,450 --> 00:32:00,840
at some point its aging I mean things

00:31:57,330 --> 00:32:03,809
are going wrong so we expect that at

00:32:00,840 --> 00:32:06,539
least we can rely on looking at the

00:32:03,809 --> 00:32:08,759
history of prediction when failure is

00:32:06,539 --> 00:32:10,109
going to occur at some point probably

00:32:08,759 --> 00:32:12,359
your machine learning is going to say

00:32:10,109 --> 00:32:14,489
I'm sure something is going wrong and

00:32:12,359 --> 00:32:17,190
the half an hour later that's it's

00:32:14,489 --> 00:32:19,710
saying I think it's really going wrong

00:32:17,190 --> 00:32:22,259
and then you can see it increase so

00:32:19,710 --> 00:32:26,059
that's why how you can take decisions on

00:32:22,259 --> 00:32:28,499
this and when it reaches some alert

00:32:26,059 --> 00:32:30,779
thresholds you can send it to a workshop

00:32:28,499 --> 00:32:37,639
you fix it and then it comes back to

00:32:30,779 --> 00:32:41,129
zero so that's the reporting for

00:32:37,639 --> 00:32:45,269
training so we manager the performance

00:32:41,129 --> 00:32:48,570
on the history so we check that machine

00:32:45,269 --> 00:32:51,960
learning system worked correctly and

00:32:48,570 --> 00:32:55,970
that's reporting for the experts so they

00:32:51,960 --> 00:32:59,180
have their trains 1 2 182

00:32:55,970 --> 00:33:03,410
the red ones are half problems and they

00:32:59,180 --> 00:33:05,600
can click on it and have a list of all

00:33:03,410 --> 00:33:10,210
operations for all the functions of the

00:33:05,600 --> 00:33:10,210
trains so there is the door function the

00:33:10,330 --> 00:33:18,710
the matter problem the every function of

00:33:15,830 --> 00:33:21,620
the on the trend are about I mean it's

00:33:18,710 --> 00:33:23,480
like metal functions different

00:33:21,620 --> 00:33:27,350
equipments that our manager then it has

00:33:23,480 --> 00:33:31,250
a prediction and it tells which is wrong

00:33:27,350 --> 00:33:37,820
about it so in this case it's video

00:33:31,250 --> 00:33:40,790
video surveillance and now I'm going to

00:33:37,820 --> 00:33:45,110
speed up because I took too much time to

00:33:40,790 --> 00:33:48,110
explain we have real life questions in

00:33:45,110 --> 00:33:52,090
real life so we are here but we have to

00:33:48,110 --> 00:33:55,760
implement implement this in our existing

00:33:52,090 --> 00:33:57,650
process and I already mentioned it you

00:33:55,760 --> 00:33:59,840
have to convince your expert that your

00:33:57,650 --> 00:34:03,560
machine learning system I mean it's a

00:33:59,840 --> 00:34:05,390
black box so and they have to be

00:34:03,560 --> 00:34:09,500
convinced akande rely on the prediction

00:34:05,390 --> 00:34:11,750
which are by a sense probabilistic so

00:34:09,500 --> 00:34:14,300
you you need to control its you need to

00:34:11,750 --> 00:34:16,340
rely to be able to rely with it and how

00:34:14,300 --> 00:34:18,890
do you deal with false positive and

00:34:16,340 --> 00:34:21,650
false negative you cannot send all your

00:34:18,890 --> 00:34:23,330
training workshop because at some point

00:34:21,650 --> 00:34:25,130
of your technician is going to say okay

00:34:23,330 --> 00:34:27,800
but you were sending me trains that

00:34:25,130 --> 00:34:30,560
don't have a failure and how do you tell

00:34:27,800 --> 00:34:31,940
them yeah okay destroying I'm sending to

00:34:30,560 --> 00:34:35,180
you it doesn't have a failure but it's

00:34:31,940 --> 00:34:39,230
going to have it if you don't explain

00:34:35,180 --> 00:34:41,420
why you're saying this it's it's

00:34:39,230 --> 00:34:44,180
impossible you don't know what decision

00:34:41,420 --> 00:34:47,140
to take technician is not going to to

00:34:44,180 --> 00:34:50,740
know which door is has to fix so it's a

00:34:47,140 --> 00:34:55,580
it's difficult and you have to read your

00:34:50,740 --> 00:34:57,320
machine learning models and extract

00:34:55,580 --> 00:35:00,350
knowledge from your random forest and

00:34:57,320 --> 00:35:02,810
it's difficult scientifically taking the

00:35:00,350 --> 00:35:04,850
terms of Technology and in terms of

00:35:02,810 --> 00:35:08,330
change management that's where we are

00:35:04,850 --> 00:35:11,390
right now so the next step is

00:35:08,330 --> 00:35:13,940
using the pilot in test to find the best

00:35:11,390 --> 00:35:17,600
parameters I mean how long should we

00:35:13,940 --> 00:35:20,630
wait and how long should we wanted your

00:35:17,600 --> 00:35:23,090
data to predict correctly number of

00:35:20,630 --> 00:35:26,390
trees left and that's long to choose

00:35:23,090 --> 00:35:28,820
this introduction in real life and we

00:35:26,390 --> 00:35:31,160
have to chew to choose our threshold at

00:35:28,820 --> 00:35:33,080
when do you take your decision when do

00:35:31,160 --> 00:35:36,080
you stop a train and send it to a

00:35:33,080 --> 00:35:40,340
workshop this has costs and these

00:35:36,080 --> 00:35:47,510
decisions had to be made with reliable

00:35:40,340 --> 00:35:50,870
knowledge and although there are many

00:35:47,510 --> 00:35:54,710
other questions the data evolves there

00:35:50,870 --> 00:35:58,010
are updates of your computer in trains

00:35:54,710 --> 00:36:00,260
so data evolves and your machine

00:35:58,010 --> 00:36:03,230
learning is not stable with this data

00:36:00,260 --> 00:36:06,500
how do you deal with that how do you

00:36:03,230 --> 00:36:10,730
ensure the stability of intelligence in

00:36:06,500 --> 00:36:12,800
production what is a unit test for

00:36:10,730 --> 00:36:15,010
machine learning system I have no idea i

00:36:12,800 --> 00:36:17,720
mean i have some ideas but it's new

00:36:15,010 --> 00:36:23,540
people don't have answer yet for that

00:36:17,720 --> 00:36:26,090
and so that's our next steps and how do

00:36:23,540 --> 00:36:28,610
you protect against malicious attacks

00:36:26,090 --> 00:36:30,620
and that's the questions it's more like

00:36:28,610 --> 00:36:34,370
my own questions and stuff is not

00:36:30,620 --> 00:36:37,040
worried about that yet but when you want

00:36:34,370 --> 00:36:40,820
to really know you're trying company you

00:36:37,040 --> 00:36:42,050
can try to pour false data for your

00:36:40,820 --> 00:36:44,810
machine running it's going to learn

00:36:42,050 --> 00:36:48,250
nonsense and if it's in production it's

00:36:44,810 --> 00:36:50,810
dangerous because if you manage to feed

00:36:48,250 --> 00:36:53,330
stupid data to your machine learning and

00:36:50,810 --> 00:36:55,490
it's it production it's very dangerous

00:36:53,330 --> 00:36:58,850
so how do you protect again death and

00:36:55,490 --> 00:37:01,250
how do you design alerts to see that

00:36:58,850 --> 00:37:03,950
your machine learning is moving from

00:37:01,250 --> 00:37:07,510
what it should do it's a it is difficult

00:37:03,950 --> 00:37:10,550
so I'm going to skip the lessons learned

00:37:07,510 --> 00:37:16,280
you make you will have this presentation

00:37:10,550 --> 00:37:19,120
available but you need to basically add

00:37:16,280 --> 00:37:21,020
your data scientists have to think about

00:37:19,120 --> 00:37:24,770
prediction

00:37:21,020 --> 00:37:27,560
more a lot before then then what was

00:37:24,770 --> 00:37:31,610
done here but that's okay now we are

00:37:27,560 --> 00:37:34,730
charging or the way to do with it and I

00:37:31,610 --> 00:37:36,320
had some nice things about what's going

00:37:34,730 --> 00:37:39,320
on right now right now actually we are

00:37:36,320 --> 00:37:41,570
trying and proof of concept using neural

00:37:39,320 --> 00:37:44,960
networks but thing is that it's very

00:37:41,570 --> 00:37:47,180
very unstable most the reason being that

00:37:44,960 --> 00:37:49,310
the data evolves with time and its

00:37:47,180 --> 00:37:51,890
really really unstable that's why

00:37:49,310 --> 00:37:54,050
supervised learning is a lot safer than

00:37:51,890 --> 00:38:00,980
neural network and I'm supervised

00:37:54,050 --> 00:38:02,990
learning so with that I thank you for

00:38:00,980 --> 00:38:05,410
intention and if you have one or two

00:38:02,990 --> 00:38:05,410
questions

00:38:12,839 --> 00:38:21,609
Thank You Louise uh we have a question

00:38:15,789 --> 00:38:23,020
here thank you for a talk very

00:38:21,609 --> 00:38:25,720
interesting problem I'm just curious

00:38:23,020 --> 00:38:29,020
what kind of accuracy can you get out of

00:38:25,720 --> 00:38:32,319
that system with so many variables and

00:38:29,020 --> 00:38:35,559
so little time to learn you mean in

00:38:32,319 --> 00:38:37,900
terms of predictions yeah the accuracy I

00:38:35,559 --> 00:38:41,549
mean it's it's it's not very easy to

00:38:37,900 --> 00:38:45,069
tune to answer this question right now

00:38:41,549 --> 00:38:50,109
because I have the answer on historical

00:38:45,069 --> 00:38:53,859
data but actually accuracy is in itself

00:38:50,109 --> 00:38:57,250
not so interesting the question is more

00:38:53,859 --> 00:39:00,400
how much more accurate are you then

00:38:57,250 --> 00:39:02,710
what's existing already so we try to

00:39:00,400 --> 00:39:04,630
compare how you know I showed you

00:39:02,710 --> 00:39:08,680
filters that how are in production today

00:39:04,630 --> 00:39:11,859
and work on real-time data and we

00:39:08,680 --> 00:39:13,660
compared these alerts coming from system

00:39:11,859 --> 00:39:16,170
in production to the alerts that we

00:39:13,660 --> 00:39:19,569
could have generated with the data and

00:39:16,170 --> 00:39:22,539
we had what we of course has false

00:39:19,569 --> 00:39:25,480
positive that's costly and forced

00:39:22,539 --> 00:39:28,359
negative it's costly in terms of people

00:39:25,480 --> 00:39:30,460
and impacts and alterations and we could

00:39:28,359 --> 00:39:34,270
prove I mean we would see I don't have

00:39:30,460 --> 00:39:36,250
the numbers in mind and it depends on

00:39:34,270 --> 00:39:38,740
the parameters the number of trees you

00:39:36,250 --> 00:39:42,099
have in your thing but they were so

00:39:38,740 --> 00:39:45,039
again I mean they were thing is that you

00:39:42,099 --> 00:39:48,670
targets the highest highest probability

00:39:45,039 --> 00:39:52,599
before the first so when you take like

00:39:48,670 --> 00:39:55,150
the 10 first trains it would I don't

00:39:52,599 --> 00:39:58,569
know what's in production would say we

00:39:55,150 --> 00:40:01,930
detect two failures out of 10 and we

00:39:58,569 --> 00:40:05,440
would detect six out of 10 so there is

00:40:01,930 --> 00:40:08,980
an increase and anyway even a slight

00:40:05,440 --> 00:40:13,119
increase has real impact in sort of cost

00:40:08,980 --> 00:40:17,589
so that proved the expert that what the

00:40:13,119 --> 00:40:20,470
the approach was was good and it depends

00:40:17,589 --> 00:40:21,700
also on which function you're talking

00:40:20,470 --> 00:40:24,190
about if it's the

00:40:21,700 --> 00:40:27,820
the doors for instance we were a lot

00:40:24,190 --> 00:40:29,200
better than for air conditioning since

00:40:27,820 --> 00:40:31,690
air conditioning actually you have

00:40:29,200 --> 00:40:33,280
problems both of the time in June July

00:40:31,690 --> 00:40:37,390
August so we didn't have so many

00:40:33,280 --> 00:40:47,680
examples so it was a lost a lot less it

00:40:37,390 --> 00:40:50,670
was not as good as yours Wow I'll just

00:40:47,680 --> 00:40:50,670
go there and come to

00:40:56,610 --> 00:41:01,380
thanks for the talk my question is you

00:40:59,490 --> 00:41:04,440
were saying that you have about 2,000

00:41:01,380 --> 00:41:06,630
variables we're using all of them to

00:41:04,440 --> 00:41:08,130
train off on all your functions or maybe

00:41:06,630 --> 00:41:10,890
a pre-selection and saying okay only

00:41:08,130 --> 00:41:14,450
those 100 are relevant for the AC and

00:41:10,890 --> 00:41:17,250
the other 200 a variable or were

00:41:14,450 --> 00:41:20,790
important for the doors yeah who gave

00:41:17,250 --> 00:41:23,070
you that information so it's a it's a

00:41:20,790 --> 00:41:25,260
very good question actually the experts

00:41:23,070 --> 00:41:29,730
what they do is exactly that they have

00:41:25,260 --> 00:41:31,520
200 2,500 codes and well since the

00:41:29,730 --> 00:41:35,340
beginning of these trains they monitor

00:41:31,520 --> 00:41:37,050
almost manually and now they did also

00:41:35,340 --> 00:41:39,090
the constructor I mean they know how the

00:41:37,050 --> 00:41:42,750
codes were generated it's very long

00:41:39,090 --> 00:41:45,450
process but they know codes 8200

00:41:42,750 --> 00:41:48,240
corresponds to this small part of this

00:41:45,450 --> 00:41:51,000
function of this door but they asked us

00:41:48,240 --> 00:41:54,660
to okay we know how to do this it's long

00:41:51,000 --> 00:41:57,000
but we are doing it what we need you to

00:41:54,660 --> 00:41:58,830
do is to take all the data you don't

00:41:57,000 --> 00:42:01,680
filter it because we know we have

00:41:58,830 --> 00:42:03,710
intuitions and we know there are

00:42:01,680 --> 00:42:05,910
correlations they are non-intuitive

00:42:03,710 --> 00:42:09,060
interactions between functions on the

00:42:05,910 --> 00:42:11,340
train that's occur and we don't know

00:42:09,060 --> 00:42:14,070
about it its weak signal and we want you

00:42:11,340 --> 00:42:15,840
to use machine learning to extract this

00:42:14,070 --> 00:42:19,170
weak signal so actually we took

00:42:15,840 --> 00:42:23,010
everything everything and we cursed also

00:42:19,170 --> 00:42:25,470
with material data other data coming

00:42:23,010 --> 00:42:29,750
from different we basically try to take

00:42:25,470 --> 00:42:33,540
everything we could without filtering

00:42:29,750 --> 00:42:34,980
I'm afraid I I won't be able to take

00:42:33,540 --> 00:42:38,400
more questions because we are running

00:42:34,980 --> 00:42:41,910
out but you can check with alloys and

00:42:38,400 --> 00:42:44,600
she can take it offline thanks for you

00:42:41,910 --> 00:42:44,600
and you're standing

00:42:45,349 --> 00:42:47,410

YouTube URL: https://www.youtube.com/watch?v=UW5WYQ6t6C8


