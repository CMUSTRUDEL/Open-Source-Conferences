Title: Berlin Buzzwords 2016: Daniel Molnar - Migrating a data stack from AWS to Azure #bbuzz
Publication date: 2016-06-11
Playlist: Berlin Buzzwords 2016 #bbuzz
Description: 
	Migrating a full data stack completely relying on AWS services (and a lots of them) to Microsoft Azure does not seem to be an enlightening and funny task. 

How we managed to do it with open sourcing tools as roadkills and what we learnt about the barebone necessities ending up within the sole body of a Raspberry Pi may shock the absolute believers of distributed computing. An adventure in bash, make and SQL with a detour in Moore's law and falling memory prices.

Read more:
https://2016.berlinbuzzwords.de/session/migrating-data-stack-aws-azure-raspberry-pi

About Daniel Molnar:
https://2016.berlinbuzzwords.de/users/daniel-molnar

Website: https://berlinbuzzwords.de/
Twitter: https://twitter.com/berlinbuzzwords
LinkedIn: https://www.linkedin.com/showcase/berlin-buzzwords/ 
Reddit: https://www.reddit.com/r/berlinbuzzwords/
Captions: 
	00:00:03,080 --> 00:00:09,000
thank you for coming to this talk I try

00:00:05,819 --> 00:00:11,910
to choose some kind of possibly title

00:00:09,000 --> 00:00:14,340
for this one I'm not sure I managed to

00:00:11,910 --> 00:00:16,680
do that properly so like I my name is

00:00:14,340 --> 00:00:20,189
denim owner I work for Microsoft here

00:00:16,680 --> 00:00:21,689
used to work for sexual keener we based

00:00:20,189 --> 00:00:23,369
in Berlin and we've been acquired by

00:00:21,689 --> 00:00:27,199
microsoft as the makers of the wound

00:00:23,369 --> 00:00:29,789
alist and trying to talk you pretty

00:00:27,199 --> 00:00:32,070
condensate it like fast and what we did

00:00:29,789 --> 00:00:33,660
in the last one year so maybe you can

00:00:32,070 --> 00:00:38,309
have some embarrassing questions to meet

00:00:33,660 --> 00:00:40,860
the tiger try to answer at least I'm not

00:00:38,309 --> 00:00:43,079
sure how much you are invested in like

00:00:40,860 --> 00:00:47,460
the judeo-christian religion in general

00:00:43,079 --> 00:00:50,100
and it's pretty slick topic because

00:00:47,460 --> 00:00:52,199
there are people throughout the history

00:00:50,100 --> 00:00:55,530
of human life who claim that they have

00:00:52,199 --> 00:00:56,730
been talking to God and how can one

00:00:55,530 --> 00:00:58,289
imagine like you know talking together

00:00:56,730 --> 00:01:01,530
lacking at the big bearded man like

00:00:58,289 --> 00:01:04,229
coming to you say hey what's up actually

00:01:01,530 --> 00:01:05,729
it's a bit more complicated because it

00:01:04,229 --> 00:01:08,790
seems like that God doesn't really have

00:01:05,729 --> 00:01:11,549
a body so how do you talk to him like

00:01:08,790 --> 00:01:13,790
choice in your head and stuff there's an

00:01:11,549 --> 00:01:16,470
angel was called the Metatron and

00:01:13,790 --> 00:01:18,900
everybody who claims that they talked to

00:01:16,470 --> 00:01:21,990
God they actually talk to the Metatron

00:01:18,900 --> 00:01:24,540
he is the voice of the God so right now

00:01:21,990 --> 00:01:27,210
today I'm trying to be just channeling

00:01:24,540 --> 00:01:29,670
the one and real only message from the

00:01:27,210 --> 00:01:32,250
team I work with so I'm not like a soul

00:01:29,670 --> 00:01:34,920
crazy person in this one we're at least

00:01:32,250 --> 00:01:39,540
through added last year's we were like

00:01:34,920 --> 00:01:41,040
four altogether torsten voice and Benza

00:01:39,540 --> 00:01:46,500
who contributed to this effort and

00:01:41,040 --> 00:01:47,700
presenting to you here today and i have

00:01:46,500 --> 00:01:49,950
to say that i'm standing on the

00:01:47,700 --> 00:01:55,500
shoulders of giants these people made

00:01:49,950 --> 00:01:56,490
this impossible thing possible and so

00:01:55,500 --> 00:02:00,000
i'm going to talk about where we come

00:01:56,490 --> 00:02:02,630
from what we did plan to do how did we

00:02:00,000 --> 00:02:06,229
actually factor a system in flight and

00:02:02,630 --> 00:02:08,520
how to fix it to make it really fly and

00:02:06,229 --> 00:02:09,629
that was like original plan to talk

00:02:08,520 --> 00:02:11,400
about this when i realized that i don't

00:02:09,629 --> 00:02:12,830
have any buzz words in my presentation

00:02:11,400 --> 00:02:15,050
so i added boss version at the

00:02:12,830 --> 00:02:17,600
and maybe there will not be completely

00:02:15,050 --> 00:02:20,990
unrelated to the topic I'm talking so

00:02:17,600 --> 00:02:23,780
like this is what I think about the

00:02:20,990 --> 00:02:25,340
state of the union if you were to any

00:02:23,780 --> 00:02:27,110
other talk on this conference maybe they

00:02:25,340 --> 00:02:30,050
will disagree with what I'm telling you

00:02:27,110 --> 00:02:33,650
but I might be statistically mean and

00:02:30,050 --> 00:02:35,420
there is a pun intended and this one so

00:02:33,650 --> 00:02:39,110
where we come from how big we are how

00:02:35,420 --> 00:02:40,310
small we are what do we roll it it's

00:02:39,110 --> 00:02:42,230
called wounded list it's like a

00:02:40,310 --> 00:02:45,140
Productivity app it like 21 million

00:02:42,230 --> 00:02:48,980
users it's not so it's not big it's kind

00:02:45,140 --> 00:02:51,980
of decent size we're doing it for six

00:02:48,980 --> 00:02:55,220
years with like 70 people kind of

00:02:51,980 --> 00:02:58,310
actually 67 and in the past we did like

00:02:55,220 --> 00:02:59,870
one big migration from monolithic reyes

00:02:58,310 --> 00:03:03,170
to like a poly good market service

00:02:59,870 --> 00:03:04,790
approach and we use all kind of stuff on

00:03:03,170 --> 00:03:08,120
the back ends like Scala closure go

00:03:04,790 --> 00:03:12,310
mostly these are the important languages

00:03:08,120 --> 00:03:14,840
and the stuff is running on AWS I

00:03:12,310 --> 00:03:19,160
brought you colorful things this is like

00:03:14,840 --> 00:03:20,570
a it has arrows and color spots this is

00:03:19,160 --> 00:03:21,980
our back-end infrastructure that you

00:03:20,570 --> 00:03:24,530
talk to something that's like web

00:03:21,980 --> 00:03:26,540
service we identify you and they're like

00:03:24,530 --> 00:03:27,980
services in that they're facing you and

00:03:26,540 --> 00:03:29,540
their service that's facing the back end

00:03:27,980 --> 00:03:31,160
is coming back back then and there's

00:03:29,540 --> 00:03:34,010
like the brain that knows everything and

00:03:31,160 --> 00:03:36,350
remove messages in queues so I would say

00:03:34,010 --> 00:03:38,660
it's complicated it's working but it's

00:03:36,350 --> 00:03:40,310
complicated this is like polygon market

00:03:38,660 --> 00:03:41,720
services this is like the map of Poland

00:03:40,310 --> 00:03:46,160
you can see in the background but

00:03:41,720 --> 00:03:48,110
actually these colored circles are all

00:03:46,160 --> 00:03:50,330
different micro services and the size of

00:03:48,110 --> 00:03:52,600
the circle shows you how many of them

00:03:50,330 --> 00:03:55,700
are actually running at the same time

00:03:52,600 --> 00:03:57,830
there's lots of them like they are in

00:03:55,700 --> 00:03:59,930
the numbers of hundreds at a given

00:03:57,830 --> 00:04:01,790
moment and there are lot of different

00:03:59,930 --> 00:04:06,730
ones it's like they're not like the same

00:04:01,790 --> 00:04:09,260
I had to had one tweet in there and I

00:04:06,730 --> 00:04:12,040
presume that if you do run microservices

00:04:09,260 --> 00:04:15,920
you can agree view this finding that

00:04:12,040 --> 00:04:20,470
really running microservices is fun but

00:04:15,920 --> 00:04:24,110
running data on them is even more fun

00:04:20,470 --> 00:04:25,580
the data mostly isn't postgres databases

00:04:24,110 --> 00:04:26,360
I think there was a time when we had the

00:04:25,580 --> 00:04:28,219
single

00:04:26,360 --> 00:04:31,370
is running postgis instance running on

00:04:28,219 --> 00:04:33,860
AWS and every market service had its own

00:04:31,370 --> 00:04:36,819
database and there's lots of congruent

00:04:33,860 --> 00:04:42,009
talks here and there I like their big

00:04:36,819 --> 00:04:42,009
yeah so we had to deal with this the

00:04:42,250 --> 00:04:46,310
context of how big it is really in terms

00:04:44,750 --> 00:04:49,009
of that shuffling things here and there

00:04:46,310 --> 00:04:50,780
and moving moving things we collect

00:04:49,009 --> 00:04:53,509
events from client devices we collect

00:04:50,780 --> 00:04:55,400
events from the backend logs and we try

00:04:53,509 --> 00:04:57,229
to mirror all production databases we be

00:04:55,400 --> 00:05:02,229
kind of try to play by the book there's

00:04:57,229 --> 00:05:05,840
nothing special about it I would say but

00:05:02,229 --> 00:05:08,300
we ended up as it's in fashion now these

00:05:05,840 --> 00:05:09,590
days making cell service data for

00:05:08,300 --> 00:05:12,259
everybody sexually everybody in the

00:05:09,590 --> 00:05:16,969
company has access to data can deploy

00:05:12,259 --> 00:05:20,139
things into the data flow and yeah so

00:05:16,969 --> 00:05:24,229
you can see that 1i 25 million per day

00:05:20,139 --> 00:05:26,960
not small not big the compressed logs

00:05:24,229 --> 00:05:31,490
the output is like almost 400 gigs per

00:05:26,960 --> 00:05:34,909
day so not in the input and we do this

00:05:31,490 --> 00:05:39,289
with all school technology we have

00:05:34,909 --> 00:05:41,060
chosen boring technology explicitly we

00:05:39,289 --> 00:05:42,919
don't use anything else I would say yeah

00:05:41,060 --> 00:05:45,080
there are some patches here and there

00:05:42,919 --> 00:05:47,210
but we rely on things that are around

00:05:45,080 --> 00:05:53,419
like for more than 40 years these

00:05:47,210 --> 00:05:56,060
eunuchs bash me crontab sequel why why

00:05:53,419 --> 00:06:00,110
are we doing this I think we can blame

00:05:56,060 --> 00:06:01,759
him just him about her he was doing a

00:06:00,110 --> 00:06:04,909
data science course sometimes back in

00:06:01,759 --> 00:06:07,099
days and he was following mentioned that

00:06:04,909 --> 00:06:10,460
ah this idiot is easy you can do it and

00:06:07,099 --> 00:06:14,360
make you some dependencies and we took

00:06:10,460 --> 00:06:16,939
his word I've said yeah that's right and

00:06:14,360 --> 00:06:18,620
we kind of started to like it and we're

00:06:16,939 --> 00:06:20,990
still sticking to it and it still

00:06:18,620 --> 00:06:23,389
survives with us because as it's written

00:06:20,990 --> 00:06:27,139
like it is actually the documentation

00:06:23,389 --> 00:06:30,020
the code is the documentation it havells

00:06:27,139 --> 00:06:32,029
dependencies which rise you can test the

00:06:30,020 --> 00:06:35,770
stuff even on your local machine it's

00:06:32,029 --> 00:06:39,830
good it's all sprawl ism if you want and

00:06:35,770 --> 00:06:41,990
you can see in the git log what

00:06:39,830 --> 00:06:44,330
and was there what does the State of the

00:06:41,990 --> 00:06:45,710
Union month ago three months ago so if

00:06:44,330 --> 00:06:47,750
you figure narrow happened six months

00:06:45,710 --> 00:06:51,080
ago you can see what was the state of

00:06:47,750 --> 00:06:53,870
the system there's nothing fancy magic

00:06:51,080 --> 00:06:56,780
about you know this is a makefile the

00:06:53,870 --> 00:06:59,890
funny stuff star see here there's like a

00:06:56,780 --> 00:07:02,690
wrong sequel template Ruby oh my god

00:06:59,890 --> 00:07:04,820
this is a redshift dialect and like

00:07:02,690 --> 00:07:10,130
cadential sand configs and thighs and

00:07:04,820 --> 00:07:14,180
scrapes and stuff yeah we use redshift i

00:07:10,130 --> 00:07:16,910
get to that later we actually made an

00:07:14,180 --> 00:07:20,350
ETL system out of this blob that's

00:07:16,910 --> 00:07:23,390
something above make that uses chrome

00:07:20,350 --> 00:07:26,780
can wait together with bash and we have

00:07:23,390 --> 00:07:29,390
one magic this using ruby crb scripting

00:07:26,780 --> 00:07:31,580
language to inject variables and

00:07:29,390 --> 00:07:34,940
conditionals and like magic and logic

00:07:31,580 --> 00:07:36,740
into sequel because we have to use what

00:07:34,940 --> 00:07:40,880
we had use red shift which is real not

00:07:36,740 --> 00:07:42,740
not like a really smart sequel thingy we

00:07:40,880 --> 00:07:44,360
had this crazy idea that make a shell

00:07:42,740 --> 00:07:47,240
around the shell so we can track what's

00:07:44,360 --> 00:07:48,620
going on so it's actually having a meta

00:07:47,240 --> 00:07:51,140
shot to be able to provide this

00:07:48,620 --> 00:07:52,970
information how all the detail is going

00:07:51,140 --> 00:07:55,250
on it has a small interface in flask

00:07:52,970 --> 00:07:57,020
also locally testable and it's open

00:07:55,250 --> 00:07:58,460
source what's out there in open source

00:07:57,020 --> 00:08:03,260
is the one thing that we run in

00:07:58,460 --> 00:08:05,990
productions you can trust it yeah I want

00:08:03,260 --> 00:08:08,020
to talk about like injecting ARB into

00:08:05,990 --> 00:08:12,440
sequel it looks like this nothing really

00:08:08,020 --> 00:08:15,440
complicated but it kind of helps a lot

00:08:12,440 --> 00:08:20,660
in our daily life when we have to move

00:08:15,440 --> 00:08:22,310
data again interface is not fancy you

00:08:20,660 --> 00:08:26,240
can see like some kind of gang diagram

00:08:22,310 --> 00:08:28,220
that how things rolled it's green if

00:08:26,240 --> 00:08:31,550
it's okay it's red if it's bad and you

00:08:28,220 --> 00:08:36,500
can investigate all of the steps how did

00:08:31,550 --> 00:08:37,970
they behave and also we kind of tied in

00:08:36,500 --> 00:08:39,260
some kind of data quality measurements

00:08:37,970 --> 00:08:41,420
in there we are obsessed with data

00:08:39,260 --> 00:08:43,250
quality as far as you got lots of micro

00:08:41,420 --> 00:08:46,310
services and anything unfair ten time

00:08:43,250 --> 00:08:50,330
you have to be pretty sure whatever it's

00:08:46,310 --> 00:08:53,460
in there is the reality so it does on

00:08:50,330 --> 00:08:56,640
the thigh I mentioned redshift before

00:08:53,460 --> 00:08:58,620
are running sighs like 10 t be

00:08:56,640 --> 00:09:01,430
compressed aggregations not a big not

00:08:58,620 --> 00:09:04,890
small you don't want to open that file

00:09:01,430 --> 00:09:09,600
if you talk about ex Adam and we got the

00:09:04,890 --> 00:09:11,040
two clusters set up when we started to

00:09:09,600 --> 00:09:13,650
grow we were thinking that maybe we're

00:09:11,040 --> 00:09:16,020
gonna outgrow red shift in sense of like

00:09:13,650 --> 00:09:19,170
having all the events in one sequel

00:09:16,020 --> 00:09:21,810
database we still have all the events we

00:09:19,170 --> 00:09:25,700
had ever from day 0 from back-end and

00:09:21,810 --> 00:09:29,130
front-end in one table it's working

00:09:25,700 --> 00:09:30,420
that's why we have a cold storage we're

00:09:29,130 --> 00:09:32,970
thinking about like having some kind of

00:09:30,420 --> 00:09:35,390
hybrid approach but then realize that to

00:09:32,970 --> 00:09:37,860
keep it homogeneous it is much better

00:09:35,390 --> 00:09:40,020
it's less of a context change if you

00:09:37,860 --> 00:09:42,840
want to do things and fix things so

00:09:40,020 --> 00:09:45,180
right now we have a big slow cold

00:09:42,840 --> 00:09:47,580
storage that has every event what we had

00:09:45,180 --> 00:09:49,830
ever and we get a hot that's kind of the

00:09:47,580 --> 00:09:51,750
data warehouse where we move over an

00:09:49,830 --> 00:09:56,900
aggregation of the events and everything

00:09:51,750 --> 00:09:56,900
else that we need to do the queries

00:09:58,250 --> 00:10:03,540
arrows everybody likes arrows I think

00:10:01,620 --> 00:10:06,480
this is like a pretty simple and default

00:10:03,540 --> 00:10:09,390
setup it's the state of the union from

00:10:06,480 --> 00:10:12,210
last December through December so we

00:10:09,390 --> 00:10:15,150
lock the back end we like a engine X

00:10:12,210 --> 00:10:17,370
proxy we try to track what's happening

00:10:15,150 --> 00:10:22,050
on the client side and on in the emails

00:10:17,370 --> 00:10:24,390
we send out logging thingy goes s3 we

00:10:22,050 --> 00:10:27,150
have we had a elastic MapReduce job

00:10:24,390 --> 00:10:30,210
that's kind of crunch the stuff the

00:10:27,150 --> 00:10:32,400
client side events went to the SQ s aw

00:10:30,210 --> 00:10:34,710
service why are the SNS thing is such

00:10:32,400 --> 00:10:37,080
queue and we had to dump this queue and

00:10:34,710 --> 00:10:39,810
everything end up in s3 that goes whole

00:10:37,080 --> 00:10:41,790
storage and then again we try to move

00:10:39,810 --> 00:10:43,140
everything into the hole and then every

00:10:41,790 --> 00:10:44,850
could everybody can access the things

00:10:43,140 --> 00:10:46,740
with charred i/o and figure out what's

00:10:44,850 --> 00:10:49,320
happening making sequel craze even like

00:10:46,740 --> 00:10:55,620
drag and drop or writing them as you

00:10:49,320 --> 00:10:58,070
wish so that was a state of union last

00:10:55,620 --> 00:10:58,070
December

00:10:58,510 --> 00:11:04,150
I'm not sure you are feeling the fun and

00:11:01,960 --> 00:11:06,190
excitement now I'm telling you that

00:11:04,150 --> 00:11:10,780
we're going to move over this whole

00:11:06,190 --> 00:11:13,390
architecture from AWS to Azure but if I

00:11:10,780 --> 00:11:15,790
add some more attributes that provide

00:11:13,390 --> 00:11:18,850
this whole process we had 1.5 engineers

00:11:15,790 --> 00:11:22,360
given at any moment of time I think you

00:11:18,850 --> 00:11:26,770
get the sense that is gonna be fun it

00:11:22,360 --> 00:11:28,630
also means that we took the business

00:11:26,770 --> 00:11:32,380
requirements a bit more straight than as

00:11:28,630 --> 00:11:34,150
usual I'd say that I have mixed feelings

00:11:32,380 --> 00:11:36,220
about the gardener and garden reports

00:11:34,150 --> 00:11:38,770
but the concept of total cost of

00:11:36,220 --> 00:11:40,060
ownership is something I can Y bid so

00:11:38,770 --> 00:11:42,400
like if you put something in the

00:11:40,060 --> 00:11:47,800
production you need to be able to

00:11:42,400 --> 00:11:49,510
maintain it and also the sizing of the

00:11:47,800 --> 00:11:52,720
team shows you that we can do really

00:11:49,510 --> 00:11:54,580
like 24 7 error handling and if

00:11:52,720 --> 00:11:59,230
something fails it has to be resilient

00:11:54,580 --> 00:12:01,090
stuff ah thank God we didn't have like

00:11:59,230 --> 00:12:03,670
forensic analysis in our scope so we

00:12:01,090 --> 00:12:05,860
kind of could skip that part we were

00:12:03,670 --> 00:12:09,850
more like going the illogical direction

00:12:05,860 --> 00:12:11,830
and I think the main our Ruby had is

00:12:09,850 --> 00:12:18,490
like if we can remove something then we

00:12:11,830 --> 00:12:22,240
will so again just reflect I know if you

00:12:18,490 --> 00:12:24,730
are familiar with I try to pronounce his

00:12:22,240 --> 00:12:29,590
name properly much I check love skiing I

00:12:24,730 --> 00:12:31,090
think he's from the pinboard Fame and he

00:12:29,590 --> 00:12:34,150
had talked recently it was cold like

00:12:31,090 --> 00:12:35,920
haunted by data it had some with made

00:12:34,150 --> 00:12:38,800
some waves in the data community that oh

00:12:35,920 --> 00:12:40,720
this guy just like doesn't like big data

00:12:38,800 --> 00:12:42,880
and stuff and he had the concept of the

00:12:40,720 --> 00:12:46,180
bucolic data landscape you know we had

00:12:42,880 --> 00:12:49,330
extremes and the data lake and logs and

00:12:46,180 --> 00:12:51,730
warehouse somehow just like very ruh-roh

00:12:49,330 --> 00:12:55,150
and my friend and colleague been sent to

00:12:51,730 --> 00:12:58,190
the time and actually did this this is

00:12:55,150 --> 00:13:01,980
the bucolic data landscape

00:12:58,190 --> 00:13:04,920
it's like it's like the Hadoop Jenga you

00:13:01,980 --> 00:13:07,259
have here everything on top of it you

00:13:04,920 --> 00:13:09,180
got a data lake and Azure and like data

00:13:07,259 --> 00:13:13,470
pad last address there's like Luigi up

00:13:09,180 --> 00:13:15,509
there and the power bi some things we

00:13:13,470 --> 00:13:18,660
actually built like small animals here

00:13:15,509 --> 00:13:22,649
and there at a figure that is it's kind

00:13:18,660 --> 00:13:26,579
of complicated it's really nice we have

00:13:22,649 --> 00:13:28,110
it printed frame so if you want you can

00:13:26,579 --> 00:13:30,480
have it I will think about making some

00:13:28,110 --> 00:13:32,970
kind of a small trivial gaming then and

00:13:30,480 --> 00:13:37,620
thank you can have the physical copy so

00:13:32,970 --> 00:13:41,399
we thought that yeah make it simple so

00:13:37,620 --> 00:13:46,019
praise the Lord James maccon's and what

00:13:41,399 --> 00:13:49,649
we did is we try to refactor just invite

00:13:46,019 --> 00:13:51,540
again we have to simplify things we

00:13:49,649 --> 00:13:54,630
thought that maybe we could survive just

00:13:51,540 --> 00:13:58,380
removing the AWS specific parts and just

00:13:54,630 --> 00:13:59,850
try to cram it into a sure and we had to

00:13:58,380 --> 00:14:01,860
remove unnecessary complications like

00:13:59,850 --> 00:14:04,170
Hadoop because I just rebuild want to

00:14:01,860 --> 00:14:08,490
move over any more jobs to a sure that's

00:14:04,170 --> 00:14:10,079
something you want to do and yeah so you

00:14:08,490 --> 00:14:13,709
can see that i'm actually just giving it

00:14:10,079 --> 00:14:16,649
away so what we had an idea is like take

00:14:13,709 --> 00:14:22,519
what we want think what we have and just

00:14:16,649 --> 00:14:22,519
clone it in unix on azure

00:14:24,660 --> 00:14:31,480
so back this was the first state of you

00:14:29,260 --> 00:14:36,850
and I had I would try to make a small

00:14:31,480 --> 00:14:38,710
animation here I think I managed so what

00:14:36,850 --> 00:14:44,110
we did it actually is figure that it's

00:14:38,710 --> 00:14:49,750
enough to use logs coming from our

00:14:44,110 --> 00:14:50,920
internal engine X proxy and we made a

00:14:49,750 --> 00:14:54,070
new service called junior beaver

00:14:50,920 --> 00:14:55,990
previously our elastic MapReduce job was

00:14:54,070 --> 00:15:02,200
called mr. beaver because you know it

00:14:55,990 --> 00:15:07,360
crunches logs sorry and we're like can

00:15:02,200 --> 00:15:11,370
we do it without Hadoop so we replaced

00:15:07,360 --> 00:15:15,370
our open scholar with make and pie pie

00:15:11,370 --> 00:15:18,790
the code is in Python it runs in pi PI

00:15:15,370 --> 00:15:21,040
and make handles the parallelism and it

00:15:18,790 --> 00:15:22,930
does what you kind of expect from such a

00:15:21,040 --> 00:15:26,140
service it's kind of a MapReduce

00:15:22,930 --> 00:15:31,240
functionality but it's configurable in

00:15:26,140 --> 00:15:34,300
m-files and we kind of started to

00:15:31,240 --> 00:15:37,120
believe this saying that big run kills

00:15:34,300 --> 00:15:40,750
big data instead of having lots of small

00:15:37,120 --> 00:15:42,430
machines switched on and off on demand

00:15:40,750 --> 00:15:44,560
we were thinking maybe you could have

00:15:42,430 --> 00:15:48,400
like this war machine we let more RAM

00:15:44,560 --> 00:15:51,190
see how it goes and we did our

00:15:48,400 --> 00:15:57,420
benchmarks on this thingy are elastic

00:15:51,190 --> 00:16:02,140
MapReduce job had 600 v cpus and

00:15:57,420 --> 00:16:03,430
genevieve it has like eight but like an

00:16:02,140 --> 00:16:04,870
estimable your job is something like

00:16:03,430 --> 00:16:08,050
this coming up on demand so it's not

00:16:04,870 --> 00:16:10,510
fair to just compare vcp account i'll

00:16:08,050 --> 00:16:16,030
say let's compare like the working hours

00:16:10,510 --> 00:16:18,880
actually reproduce job kind of ran for

00:16:16,030 --> 00:16:21,670
an hour Jr beaver runs much more but

00:16:18,880 --> 00:16:26,620
still just like one-tenth of consumption

00:16:21,670 --> 00:16:29,230
and you can even call it a real time

00:16:26,620 --> 00:16:32,260
because we can run batches every 20

00:16:29,230 --> 00:16:39,920
minutes if you need

00:16:32,260 --> 00:16:42,560
animation again OOP this was a pain

00:16:39,920 --> 00:16:44,120
point all the time I have time cues are

00:16:42,560 --> 00:16:46,310
pretty nice because you can just let

00:16:44,120 --> 00:16:48,440
throw things on them and you forget

00:16:46,310 --> 00:16:50,600
about them and you're fine but getting

00:16:48,440 --> 00:16:53,600
things out of cues that's where the

00:16:50,600 --> 00:16:56,089
headache starts also the time with the

00:16:53,600 --> 00:16:59,779
SQ s thinking we actually have to use

00:16:56,089 --> 00:17:01,670
Ruby to get things out because of our

00:16:59,779 --> 00:17:04,240
limitations and the time we build thing

00:17:01,670 --> 00:17:08,059
that was already reliable binding an API

00:17:04,240 --> 00:17:10,760
but then you know the parallelism kind

00:17:08,059 --> 00:17:14,030
of was depreciated things going to start

00:17:10,760 --> 00:17:20,439
a happen and we were thinking that do we

00:17:14,030 --> 00:17:23,410
need cues we are inspired I think by a

00:17:20,439 --> 00:17:26,929
guy called Marshall Castillo who had a

00:17:23,410 --> 00:17:29,840
funny article on hacker news about

00:17:26,929 --> 00:17:33,610
handling 1,000,000 processes request

00:17:29,840 --> 00:17:38,240
processes I request in go per second and

00:17:33,610 --> 00:17:41,900
that to 30 meters think that why don't

00:17:38,240 --> 00:17:45,500
we just like try to some make something

00:17:41,900 --> 00:17:48,950
and go and change already existing no GS

00:17:45,500 --> 00:17:52,190
small even collateral thingy to go and

00:17:48,950 --> 00:17:55,010
just try to write into files wow what

00:17:52,190 --> 00:17:57,440
bad things can happen we try to

00:17:55,010 --> 00:17:58,970
implement some of the fidgety things

00:17:57,440 --> 00:18:01,010
like you know handing sessions and

00:17:58,970 --> 00:18:02,990
strict order of events which is hard

00:18:01,010 --> 00:18:05,780
because as far as we know like the

00:18:02,990 --> 00:18:07,130
concept of time is something is always a

00:18:05,780 --> 00:18:09,460
bit tricky if you are working with

00:18:07,130 --> 00:18:11,870
distributed systems and clients that are

00:18:09,460 --> 00:18:16,040
either connected or not connected or

00:18:11,870 --> 00:18:18,860
somewhere in the world and when we had

00:18:16,040 --> 00:18:20,900
this idea then it makes sense to just

00:18:18,860 --> 00:18:23,420
like support all kinds of targets

00:18:20,900 --> 00:18:26,179
meaning you can actually write in two

00:18:23,420 --> 00:18:29,059
SKUs if you want with this thing you can

00:18:26,179 --> 00:18:35,140
write in to AWS queues or a jerk use or

00:18:29,059 --> 00:18:35,140
Azure blob store or s3 doesn't care and

00:18:36,070 --> 00:18:41,000
figure that we can do six million events

00:18:38,360 --> 00:18:42,630
per minute on a single for PCP you

00:18:41,000 --> 00:18:46,470
thinking that looks more

00:18:42,630 --> 00:18:48,710
and you can send protobuf if you are

00:18:46,470 --> 00:18:51,270
saying but if you are really in a hurry

00:18:48,710 --> 00:18:52,740
we will try to handle your Jason's also

00:18:51,270 --> 00:18:56,250
it's going to be slower definitely but

00:18:52,740 --> 00:18:58,530
life is hard this thing is also open

00:18:56,250 --> 00:19:03,210
source you can check it out so for the

00:18:58,530 --> 00:19:04,830
benchmarks vcpu comes our previous

00:19:03,210 --> 00:19:07,740
roommate rack home homebrew tracking was

00:19:04,830 --> 00:19:11,760
running on 12 very small machines and

00:19:07,740 --> 00:19:17,910
nowadays Armstrong on one that has four

00:19:11,760 --> 00:19:20,070
or either to that has two cores this is

00:19:17,910 --> 00:19:21,540
a different comparison but also make

00:19:20,070 --> 00:19:24,000
sense you think about how much data you

00:19:21,540 --> 00:19:26,220
can cram into a queue or how much it can

00:19:24,000 --> 00:19:29,280
cram into like a file no it's not so no

00:19:26,220 --> 00:19:32,370
surprise but with the same hardware

00:19:29,280 --> 00:19:36,780
resources looking a bit much difference

00:19:32,370 --> 00:19:39,030
on this one and it's not about the

00:19:36,780 --> 00:19:41,420
machine actually you know Q is accusing

00:19:39,030 --> 00:19:43,950
you we have to talk a lot here and there

00:19:41,420 --> 00:19:47,610
while just cram stuff in files and just

00:19:43,950 --> 00:19:50,580
upload them and then we had that crazy

00:19:47,610 --> 00:19:53,960
idea again this is a for vcpu so

00:19:50,580 --> 00:19:57,450
computer is a small thing can we just

00:19:53,960 --> 00:20:00,090
deploy it on the Raspberry Pi on my

00:19:57,450 --> 00:20:07,340
desktop like I'm a table like what will

00:20:00,090 --> 00:20:12,690
happen it worked and we realized that

00:20:07,340 --> 00:20:16,830
this our pie has more power than we need

00:20:12,690 --> 00:20:22,560
now for one the list and then we started

00:20:16,830 --> 00:20:24,660
thinking again this is one kind of thing

00:20:22,560 --> 00:20:26,100
that consumes lots of resources we got

00:20:24,660 --> 00:20:28,290
this machine is like client phone

00:20:26,100 --> 00:20:31,290
tracker we got a machine that runs the

00:20:28,290 --> 00:20:34,740
etl is like going to make it's like a

00:20:31,290 --> 00:20:38,760
UNIX bash is not eating much CPU i would

00:20:34,740 --> 00:20:42,360
say like and we get to that we can put

00:20:38,760 --> 00:20:45,840
the lock cruncher so you can have a

00:20:42,360 --> 00:20:48,930
fully featured data stack without a data

00:20:45,840 --> 00:20:52,290
warehouse for a company the size of us

00:20:48,930 --> 00:20:55,450
and 4s berry pies with like an

00:20:52,290 --> 00:21:01,370
investment of 150 bucks

00:20:55,450 --> 00:21:03,740
I'm just saying and if I want to be like

00:21:01,370 --> 00:21:06,980
really pathetic which I actually want to

00:21:03,740 --> 00:21:09,500
be I like this idea because it gives

00:21:06,980 --> 00:21:10,970
access to data I need a passing

00:21:09,500 --> 00:21:15,290
capabilities to people who don't have

00:21:10,970 --> 00:21:16,760
much resources I like that like you are

00:21:15,290 --> 00:21:18,770
an NGO when you want to track all the

00:21:16,760 --> 00:21:23,450
gazelles in Africa it's okay you can do

00:21:18,770 --> 00:21:26,480
it with a small thing like this and this

00:21:23,450 --> 00:21:28,670
doesn't have any moving parts and you

00:21:26,480 --> 00:21:33,110
can glue together three of them if some

00:21:28,670 --> 00:21:35,840
of them fails you don't care that's

00:21:33,110 --> 00:21:37,640
about the love and dream so how'd it

00:21:35,840 --> 00:21:41,000
happen actually in reality so the fix-up

00:21:37,640 --> 00:21:43,010
part so try to change the parts in a way

00:21:41,000 --> 00:21:45,980
that they should be agnostic where they

00:21:43,010 --> 00:21:48,080
are running and we try to map them

00:21:45,980 --> 00:21:51,050
together so we say like okay we forget

00:21:48,080 --> 00:21:54,200
about SQ has stinky and just use blob

00:21:51,050 --> 00:21:57,710
storage instead of s3 use as your SQL

00:21:54,200 --> 00:21:59,450
data warehouses redshift we silly

00:21:57,710 --> 00:22:02,090
evaluate power bi we'll see how we go

00:21:59,450 --> 00:22:03,530
and we actually remove their own

00:22:02,090 --> 00:22:09,650
tracking all tracking with a new one

00:22:03,530 --> 00:22:13,460
that can run both places this is a

00:22:09,650 --> 00:22:15,800
proper equal sign I would say you're

00:22:13,460 --> 00:22:18,500
adding all kind of tests we'll do our

00:22:15,800 --> 00:22:20,390
homework and benchmarks and also i would

00:22:18,500 --> 00:22:22,550
say that I even like Ezra blob storage

00:22:20,390 --> 00:22:24,700
more in terms of like the granularity of

00:22:22,550 --> 00:22:29,000
excess control what can you do with it

00:22:24,700 --> 00:22:30,680
speed wise it's pretty much the same we

00:22:29,000 --> 00:22:33,230
spend much more time figuring out how

00:22:30,680 --> 00:22:35,000
Amazon redshift and azure sequel little

00:22:33,230 --> 00:22:38,300
house compared because they are

00:22:35,000 --> 00:22:41,180
different beasts ratchet is coming from

00:22:38,300 --> 00:22:44,480
more like you know this get an axe and

00:22:41,180 --> 00:22:46,340
like you / it approach but it's like

00:22:44,480 --> 00:22:49,220
crack because it's fast it's very good

00:22:46,340 --> 00:22:51,650
it technically scales Lynn re you happy

00:22:49,220 --> 00:22:53,060
with it why the secret or else is coming

00:22:51,650 --> 00:22:54,650
from national enterprise environment

00:22:53,060 --> 00:22:58,220
where we have all the quirks and jingles

00:22:54,650 --> 00:23:01,160
and odd nuts that also means that you

00:22:58,220 --> 00:23:02,210
have like proper stored procedures what

00:23:01,160 --> 00:23:04,100
you don't really have a night shift

00:23:02,210 --> 00:23:06,830
that's why for instance we had to use

00:23:04,100 --> 00:23:07,980
like the ER be code injection with

00:23:06,830 --> 00:23:10,140
redshift because we wanted to

00:23:07,980 --> 00:23:13,740
like more complex things later areas

00:23:10,140 --> 00:23:19,049
could handle it both of them has like

00:23:13,740 --> 00:23:21,450
good and bad points I would say and they

00:23:19,049 --> 00:23:23,820
are not the same but we had to figure

00:23:21,450 --> 00:23:27,390
out how to change small things here and

00:23:23,820 --> 00:23:31,220
there to base one with other and there's

00:23:27,390 --> 00:23:34,080
going to be an upcoming benchmarking

00:23:31,220 --> 00:23:36,360
post from the data warehouse team we

00:23:34,080 --> 00:23:37,620
work them they're in business Angeles

00:23:36,360 --> 00:23:39,650
and they just about to release like the

00:23:37,620 --> 00:23:41,429
pro bird as your data warehouse and

00:23:39,650 --> 00:23:43,230
they're going to release official

00:23:41,429 --> 00:23:46,410
numbers but it seems like that they are

00:23:43,230 --> 00:23:48,150
kind of equal and if you want to do like

00:23:46,410 --> 00:23:52,260
complex queries the azure data warehouse

00:23:48,150 --> 00:23:56,580
is even faster than red shift so dueling

00:23:52,260 --> 00:24:00,059
we want to deploy UNIX thingies in Azure

00:23:56,580 --> 00:24:01,710
which is like that in theory possible

00:24:00,059 --> 00:24:04,440
technically possible still we act like

00:24:01,710 --> 00:24:06,150
fill some gaps in there so we did

00:24:04,440 --> 00:24:07,830
something that's similar to light s

00:24:06,150 --> 00:24:09,270
recommend that can move things here and

00:24:07,830 --> 00:24:10,980
there it's called an azure command it's

00:24:09,270 --> 00:24:13,919
open source you can use it if you want

00:24:10,980 --> 00:24:16,919
to and if you're familiar with like the

00:24:13,919 --> 00:24:19,169
common line pc pole thingy we did

00:24:16,919 --> 00:24:21,120
something that's very similar is

00:24:19,169 --> 00:24:24,870
behaving in a similar way like a unix

00:24:21,120 --> 00:24:28,530
similar way to connect to measure data

00:24:24,870 --> 00:24:38,760
warehouse and also to the azure sequel

00:24:28,530 --> 00:24:44,510
server animation time so this is this is

00:24:38,760 --> 00:24:49,530
the AWS thing they're more like stricter

00:24:44,510 --> 00:24:52,010
no much hustle approach this is the

00:24:49,530 --> 00:24:54,510
azure thingy that is kind of same things

00:24:52,010 --> 00:24:56,270
yeah there's another password called

00:24:54,510 --> 00:24:59,580
weasel that's the processor but

00:24:56,270 --> 00:25:01,710
technique that's the same things we had

00:24:59,580 --> 00:25:03,900
to adopt our sequel approach when

00:25:01,710 --> 00:25:05,790
changing to their house started to talk

00:25:03,900 --> 00:25:07,559
about this we had to have different

00:25:05,790 --> 00:25:10,080
loading strategies and different they

00:25:07,559 --> 00:25:13,280
have different compression methods they

00:25:10,080 --> 00:25:15,690
have different sharding indexing whatnot

00:25:13,280 --> 00:25:17,460
there are pretty good things that you

00:25:15,690 --> 00:25:20,669
can actually push the throttle if you

00:25:17,460 --> 00:25:21,850
load kind of real time that I want extra

00:25:20,669 --> 00:25:23,440
speed and then

00:25:21,850 --> 00:25:28,150
reloaded he's gonna say let's get it

00:25:23,440 --> 00:25:30,669
back and yeah it's good to be back to

00:25:28,150 --> 00:25:35,490
fully feature sequel that really helps

00:25:30,669 --> 00:25:39,280
it's a lovely thing I would say and

00:25:35,490 --> 00:25:41,530
again passwords i wanted i want you to

00:25:39,280 --> 00:25:43,090
get to this point really because i still

00:25:41,530 --> 00:25:45,039
feel that i didn't have any buzzers up

00:25:43,090 --> 00:25:46,840
until now maybe you can have a brick

00:25:45,039 --> 00:25:49,360
much interesting conversation also if

00:25:46,840 --> 00:25:53,160
you understand what we think about

00:25:49,360 --> 00:25:53,160
buzzards and how they're coming off

00:25:53,820 --> 00:26:00,280
three things and they are interconnected

00:25:57,159 --> 00:26:03,520
definitely I think that we managed to

00:26:00,280 --> 00:26:06,039
make some kind of prototype for this

00:26:03,520 --> 00:26:07,809
cloud and all stick later stack you

00:26:06,039 --> 00:26:11,169
could say it it's not not there on

00:26:07,809 --> 00:26:14,260
Google yet I think I have yet to see

00:26:11,169 --> 00:26:17,770
more commercial deployments on Google

00:26:14,260 --> 00:26:19,539
Cloud if I might say so that's why if

00:26:17,770 --> 00:26:22,450
you that but even if you look at the

00:26:19,539 --> 00:26:25,659
Garter diagrams like yeah aw sand as

00:26:22,450 --> 00:26:28,000
your two options you have so this thing

00:26:25,659 --> 00:26:30,159
you can deploy either of them or even

00:26:28,000 --> 00:26:31,630
even deploy in like a hybrid way that

00:26:30,159 --> 00:26:36,159
you have some things here something's

00:26:31,630 --> 00:26:38,850
there you don't care when tweeting about

00:26:36,159 --> 00:26:43,030
this Raspberry Pi experiment of

00:26:38,850 --> 00:26:44,950
collecting six no resolutions 2

00:26:43,030 --> 00:26:50,770
1,000,000 no 6 video 6mon events on

00:26:44,950 --> 00:26:53,440
raspberry there is a answer that this is

00:26:50,770 --> 00:26:55,450
actually post cloud like you know to

00:26:53,440 --> 00:26:58,179
think and we were starting to think

00:26:55,450 --> 00:27:00,700
about that you have this drawer for like

00:26:58,179 --> 00:27:02,980
screws you know if you're doing makey

00:27:00,700 --> 00:27:04,059
makey stuff you know that bar and you

00:27:02,980 --> 00:27:07,000
have to have this drawer with like

00:27:04,059 --> 00:27:10,179
raspberry PI's that's your inserted form

00:27:07,000 --> 00:27:12,970
i can say like you know this this row is

00:27:10,179 --> 00:27:17,740
for one company like this is data stack

00:27:12,970 --> 00:27:19,780
really and if you look around in Germany

00:27:17,740 --> 00:27:21,659
you can even find some funny people who

00:27:19,780 --> 00:27:26,650
will host your Raspberry Pi for free

00:27:21,659 --> 00:27:28,240
forever I mean maybe you want to help

00:27:26,650 --> 00:27:30,580
them and give them like six bucks for

00:27:28,240 --> 00:27:32,140
hosting that but still it's something

00:27:30,580 --> 00:27:33,360
the realm of possible to make a data

00:27:32,140 --> 00:27:37,170
stack with that

00:27:33,360 --> 00:27:39,330
and yeah and redneck data we really i

00:27:37,170 --> 00:27:42,570
think need that kind of down-to-earth

00:27:39,330 --> 00:27:48,059
approach um I'm an old guy I'm like I'm

00:27:42,570 --> 00:27:50,970
becoming 40 in the week I'm always

00:27:48,059 --> 00:27:53,700
afraid of putting extra layers on top of

00:27:50,970 --> 00:27:56,250
things and if something is not behaving

00:27:53,700 --> 00:28:00,080
in a way I kind of like putting another

00:27:56,250 --> 00:28:08,760
X layer just you know between it and me

00:28:00,080 --> 00:28:12,350
you can call us lazy and stupid and kind

00:28:08,760 --> 00:28:15,660
of paranoid it's all true I'm just like

00:28:12,350 --> 00:28:16,980
trying to survive in an environment of

00:28:15,660 --> 00:28:21,240
around the stem things I can debug

00:28:16,980 --> 00:28:24,990
things still because resurrection if you

00:28:21,240 --> 00:28:28,679
have like 1.5 engineers and all the one

00:28:24,990 --> 00:28:32,070
points51 is a notification maybe and you

00:28:28,679 --> 00:28:34,260
get five days of data in the queue

00:28:32,070 --> 00:28:36,390
already and that queue has a retention

00:28:34,260 --> 00:28:41,309
of days x and you know you're you're

00:28:36,390 --> 00:28:43,650
counting back that's not fun so right i

00:28:41,309 --> 00:28:45,690
data may be can be based on some kind of

00:28:43,650 --> 00:28:51,559
this bucolic landscape think i mentioned

00:28:45,690 --> 00:28:51,559
if i go back so you can enjoy it again

00:28:53,330 --> 00:29:05,100
so many slides boom so if we can solve

00:29:00,750 --> 00:29:07,679
it with an ex then let's do it I don't

00:29:05,100 --> 00:29:09,120
want to let it loose on the measuring

00:29:07,679 --> 00:29:12,480
side so I think we've spent most of our

00:29:09,120 --> 00:29:14,340
time benchmarking things and counting

00:29:12,480 --> 00:29:19,290
beans and making sure that the beans are

00:29:14,340 --> 00:29:20,940
actually there so I think I err on the

00:29:19,290 --> 00:29:23,370
side that let's measure it with a

00:29:20,940 --> 00:29:26,100
micrometer and then just like / it to

00:29:23,370 --> 00:29:27,690
the next and let's figure if you can

00:29:26,100 --> 00:29:29,100
still keep the lives like we kind of

00:29:27,690 --> 00:29:32,640
started out with this set up in a way

00:29:29,100 --> 00:29:34,890
that we should be fine for us at its

00:29:32,640 --> 00:29:36,540
scale and I think we were the most

00:29:34,890 --> 00:29:40,070
surprised ones to see that actually it

00:29:36,540 --> 00:29:40,070
kind of could grew with us

00:29:40,590 --> 00:29:53,580
another picture for you mmm so yes this

00:29:50,279 --> 00:29:56,279
is a fairy if you ever design something

00:29:53,580 --> 00:30:00,690
remember this image image this is a

00:29:56,279 --> 00:30:07,350
fairy this is not a bridge this is a

00:30:00,690 --> 00:30:10,730
fairy actually it's in Germany but I

00:30:07,350 --> 00:30:15,659
like engineers I truly like engineers

00:30:10,730 --> 00:30:24,659
sometimes I feel that maybe you can

00:30:15,659 --> 00:30:38,580
simplify things a bit and this one is in

00:30:24,659 --> 00:30:39,990
production thank you I hope you have

00:30:38,580 --> 00:30:50,850
some embarrassing questions I cannot

00:30:39,990 --> 00:30:54,270
answer please yeah okay so first i'm

00:30:50,850 --> 00:30:56,340
also lazy stupid but that's like with

00:30:54,270 --> 00:30:58,620
most developed engineer system engineer

00:30:56,340 --> 00:31:01,620
system administrators in the past now

00:30:58,620 --> 00:31:04,020
also turning 40 soon okay we can drink

00:31:01,620 --> 00:31:06,210
yeah so that's okay but i have to a

00:31:04,020 --> 00:31:09,990
practical question yes you have rsyslog

00:31:06,210 --> 00:31:13,409
yes in your diagram that is you ever had

00:31:09,990 --> 00:31:16,110
problems with them it was we had exactly

00:31:13,409 --> 00:31:19,799
been processing engine X logs and they

00:31:16,110 --> 00:31:22,350
had like around 30,000 to our customer

00:31:19,799 --> 00:31:25,049
looks and at some point I start blocking

00:31:22,350 --> 00:31:29,029
out completely and like blogging one

00:31:25,049 --> 00:31:29,029
quarter of our instances like

00:31:30,250 --> 00:31:36,100
we have problems Oliver I think that's

00:31:33,850 --> 00:31:40,480
why we try to minimize the number of the

00:31:36,100 --> 00:31:43,240
moving parts and that's why we kind of

00:31:40,480 --> 00:31:45,040
started to get lost of the thing and

00:31:43,240 --> 00:31:47,650
figure that if you have this engine X

00:31:45,040 --> 00:31:50,680
proxy we can just like clamp on that and

00:31:47,650 --> 00:31:52,480
get data because we have problems for I

00:31:50,680 --> 00:31:55,390
think first we only started to use ours

00:31:52,480 --> 00:31:59,830
is log we really had to MapReduce things

00:31:55,390 --> 00:32:04,890
because things are all over the place so

00:31:59,830 --> 00:32:09,180
we slowly and finally just face it up

00:32:04,890 --> 00:32:09,180
there's no good news for you joy I

00:32:09,690 --> 00:32:14,790
interesting talk how do you find the

00:32:12,430 --> 00:32:19,660
cost comparing of as you overseas amazon

00:32:14,790 --> 00:32:23,290
good question sometimes we felt light is

00:32:19,660 --> 00:32:25,300
going to be too expensive but figure

00:32:23,290 --> 00:32:28,090
that they are pretty aggressive and

00:32:25,300 --> 00:32:29,320
pricing and I liked it that's why we try

00:32:28,090 --> 00:32:31,840
to help them with benchmarks and say

00:32:29,320 --> 00:32:35,050
like hey this is what I can get a needle

00:32:31,840 --> 00:32:38,020
yes for two bucks this cost like four

00:32:35,050 --> 00:32:39,820
can we fix it and the good thing is that

00:32:38,020 --> 00:32:42,580
the first has the latest measurement

00:32:39,820 --> 00:32:47,650
what we did run on redshift versus data

00:32:42,580 --> 00:32:51,960
warehouse data warehouse is cheaper be

00:32:47,650 --> 00:32:51,960
like thirty percent so I was like happy

00:32:56,140 --> 00:33:01,640
how is how is the controlling of that is

00:32:59,360 --> 00:33:05,840
a stuff do you need really need windows

00:33:01,640 --> 00:33:09,500
boxes or do you can do it from poor unix

00:33:05,840 --> 00:33:12,770
or mac environment I medical guarding

00:33:09,500 --> 00:33:14,630
and all this normally not normal stuff

00:33:12,770 --> 00:33:17,360
to deploy things and manage things

00:33:14,630 --> 00:33:19,130
really good question ah I forgot to

00:33:17,360 --> 00:33:21,710
mention this with for instance our whole

00:33:19,130 --> 00:33:23,120
team except the Mac except the windows

00:33:21,710 --> 00:33:26,450
developers were originally working on

00:33:23,120 --> 00:33:28,400
mcintoshes like like everybody's these

00:33:26,450 --> 00:33:30,380
days we start to have like more in those

00:33:28,400 --> 00:33:36,080
things but for instance the data stack

00:33:30,380 --> 00:33:40,130
is fully in Unix so there is hope and

00:33:36,080 --> 00:33:43,250
it's working in its production as a

00:33:40,130 --> 00:33:46,100
question is how it's about resources we

00:33:43,250 --> 00:33:50,000
we could we work on a little bit larger

00:33:46,100 --> 00:33:52,280
scale than you we have an an hour tries

00:33:50,000 --> 00:33:54,680
and Amazon a lot of resource problems we

00:33:52,280 --> 00:33:57,470
have to wait forever to get hosts or

00:33:54,680 --> 00:33:59,090
even we don't get our classes started

00:33:57,470 --> 00:34:02,240
because they're running out of resources

00:33:59,090 --> 00:34:04,400
so give us 48 hours or something like

00:34:02,240 --> 00:34:08,030
this they said probably you can start at

00:34:04,400 --> 00:34:11,540
that time so we have to ate every

00:34:08,030 --> 00:34:15,230
big class around with them to get to get

00:34:11,540 --> 00:34:17,540
800 notes yes I get a crazy number in

00:34:15,230 --> 00:34:20,860
terms what you think about it a cloud

00:34:17,540 --> 00:34:23,899
yeah I think we're trying to mitigate

00:34:20,860 --> 00:34:27,110
this with having kind of a breeding

00:34:23,899 --> 00:34:30,230
breeder you kind of start to have a bit

00:34:27,110 --> 00:34:34,780
of an overload this one kind of start to

00:34:30,230 --> 00:34:37,669
wake things sooner than they are needed

00:34:34,780 --> 00:34:39,169
but they had these problems both on AWS

00:34:37,669 --> 00:34:42,200
on Azure it's sometimes it's just like

00:34:39,169 --> 00:34:45,139
hard really so we try to get around this

00:34:42,200 --> 00:34:48,409
in this way that we try to have some

00:34:45,139 --> 00:34:51,860
resources waiting to be deployed and I

00:34:48,409 --> 00:34:53,840
kind of I don't totally see you but I

00:34:51,860 --> 00:34:56,690
kind of seen your eyes that with the

00:34:53,840 --> 00:34:59,450
size of your needs it could cost a lot

00:34:56,690 --> 00:35:01,140
of money to have something just sit

00:34:59,450 --> 00:35:06,070
there in preparation

00:35:01,140 --> 00:35:09,010
exactly that is our problem and as a

00:35:06,070 --> 00:35:11,110
question is about the object store we

00:35:09,010 --> 00:35:14,110
faced with as3 a lot of scaling problems

00:35:11,110 --> 00:35:17,110
so basically if you want to heaven

00:35:14,110 --> 00:35:20,470
cluster which has 6,000 tasks and

00:35:17,110 --> 00:35:22,600
parallel running and writing to as3 you

00:35:20,470 --> 00:35:24,370
get throttled so it doesn't doesn't work

00:35:22,600 --> 00:35:28,900
you have to do this hashing on the first

00:35:24,370 --> 00:35:32,140
pass of your sangs set it said scales

00:35:28,900 --> 00:35:34,420
then you can write it but if you want to

00:35:32,140 --> 00:35:35,830
get a directory listing and want to get

00:35:34,420 --> 00:35:39,100
it work with high if it's a nightmare

00:35:35,830 --> 00:35:40,900
okay as the question is do we have on

00:35:39,100 --> 00:35:46,060
Google's drawers similar problems that

00:35:40,900 --> 00:35:48,430
you have to hash your names the

00:35:46,060 --> 00:35:50,680
benchmarks we didn't run with Azure blob

00:35:48,430 --> 00:35:52,870
store was like not the premium offering

00:35:50,680 --> 00:35:55,690
but like generic one and the generic one

00:35:52,870 --> 00:35:58,510
was a bit faster and more reliable than

00:35:55,690 --> 00:36:00,640
the last three and i would expect the

00:35:58,510 --> 00:36:03,730
premium on with some jariabek easy thing

00:36:00,640 --> 00:36:06,550
is that could live up to the promises

00:36:03,730 --> 00:36:09,430
but I try to get you somebody who is

00:36:06,550 --> 00:36:12,660
much more bad words in this one second

00:36:09,430 --> 00:36:16,150
talk to Sam I feel it's a bit better

00:36:12,660 --> 00:36:19,330
okay because this is something which

00:36:16,150 --> 00:36:23,280
right now puts a lot of headache to us

00:36:19,330 --> 00:36:23,280
okay in terms of scaling

00:36:31,160 --> 00:36:36,270
why did you have to move to a jury in

00:36:33,839 --> 00:36:40,440
the first place yeah good question I

00:36:36,270 --> 00:36:43,020
think this was part like you know we're

00:36:40,440 --> 00:36:45,750
part of this big mothership now we

00:36:43,020 --> 00:36:49,230
should use those resources but another

00:36:45,750 --> 00:36:52,079
hand I think it was kind of we like

00:36:49,230 --> 00:36:55,319
crazy things that yeah let's try it if

00:36:52,079 --> 00:36:58,859
it's possible and and it was possible

00:36:55,319 --> 00:37:03,230
and it's really good to be a proper

00:36:58,859 --> 00:37:03,230
customer inside a company saying like

00:37:03,289 --> 00:37:10,049
and it's really good to hear that they

00:37:06,450 --> 00:37:12,180
try to answer these questions another

00:37:10,049 --> 00:37:15,299
question do you run production work

00:37:12,180 --> 00:37:18,539
loads on raspberries I kind of missed

00:37:15,299 --> 00:37:22,440
missed that point we didn't put actual

00:37:18,539 --> 00:37:24,329
production on there but our testing is

00:37:22,440 --> 00:37:26,849
pretty ok so we have a test switch for

00:37:24,329 --> 00:37:28,079
actually tested is included in the most

00:37:26,849 --> 00:37:30,900
of thing you can figure it out by

00:37:28,079 --> 00:37:33,829
yourself but it can run production load

00:37:30,900 --> 00:37:37,230
exactly and even the resident raspberry

00:37:33,829 --> 00:37:38,880
benchmark we had and I yes it is yes six

00:37:37,230 --> 00:37:42,539
million was the four vcpu and raspberry

00:37:38,880 --> 00:37:44,039
was the 1 million event per minute so

00:37:42,539 --> 00:37:45,569
the raspberry benchmark was actually

00:37:44,039 --> 00:37:48,450
running away that dress was technically

00:37:45,569 --> 00:37:51,529
on my desk so it is connected to a

00:37:48,450 --> 00:37:58,020
router and like so it's not in the cloud

00:37:51,529 --> 00:37:59,640
at all and the last question is well in

00:37:58,020 --> 00:38:03,200
all the buzz words I haven't seen docker

00:37:59,640 --> 00:38:03,200
you have plans to his daughter

00:38:05,319 --> 00:38:10,239
I'd rather not comment on this issue

00:38:15,190 --> 00:38:26,140
I think two gigs ram it took weeks to

00:38:19,020 --> 00:38:28,780
geeks okay so on the rasp I topic again

00:38:26,140 --> 00:38:32,470
yeah I did I did some benchmark of kafka

00:38:28,780 --> 00:38:35,970
non-res pie so we passed the like 25,000

00:38:32,470 --> 00:38:38,470
messages per second through rasp eyes

00:38:35,970 --> 00:38:42,250
what was your limitation there was at

00:38:38,470 --> 00:38:45,970
cpu or ram it was Ram okay yeah far as

00:38:42,250 --> 00:38:49,089
it was just networking so and I 04 for

00:38:45,970 --> 00:38:51,180
the for storing the locks to disk so it

00:38:49,089 --> 00:38:53,470
could be possible to get even faster

00:38:51,180 --> 00:38:54,880
yeah I mean like I still kind of

00:38:53,470 --> 00:38:57,339
consider the raspberry PI's the

00:38:54,880 --> 00:39:00,130
Commodore 64 of our times that's why v

00:38:57,339 --> 00:39:01,960
chosen as the target but if you go out

00:39:00,130 --> 00:39:04,180
in the market you can buy something

00:39:01,960 --> 00:39:06,060
that's like 10 x power of raspberry pi

00:39:04,180 --> 00:39:13,150
and cost like I don't know 80 bucks I

00:39:06,060 --> 00:39:15,490
like these small boxes that good very

00:39:13,150 --> 00:39:18,730
impressive talk Thanks any more

00:39:15,490 --> 00:39:20,970
questions no I think he's lunch thank

00:39:18,730 --> 00:39:20,970

YouTube URL: https://www.youtube.com/watch?v=QhXPANTd9nE


