Title: Berlin Buzzwords 2016: Flavio Junqueira - Towards consensus on distributed consensus #bbuzz
Publication date: 2016-06-11
Playlist: Berlin Buzzwords 2016 #bbuzz
Description: 
	Over the years, we have built many data-analytics systems using components like Apache ZooKeeper, etcd, Consul, or homebrewed implementations of Raft. These components are used in a number of systems to perform what we call distributed coordination: master election, group membership, configuration metadata, locks, barriers, etc. Like many other systems we have seen abused, these components are often used in scenarios where they are convenient, but not strictly necessary. This observation begs the question of where it is necessary to use a distributed consensus primitive.

To understand when it is necessary to rely on a consensus primitive, we need to step back and understand precisely what such a consensus primitive provides and its association to all the problems that we have been using it for. There are many fundamental results in the academic literature that can be used here to explain the need to use a consensus primitive: the relationship between state-machine replication and atomic broadcast, the equivalence between atomic broadcast and consensus, and the equivalence between consensus and leader election. 

Even further, there is the famous Herlihy consensus hierarchy showing the strength of asynchronous shared memory primitives based on their equivalence to consensus. This hierarchy shows that some useful primitives (e.g., distributed registers) do not need consensus, showing that for many problems we come across when building distributed systems, it is possible to rely on weaker, possibly simpler solutions. Some other primitives, like compare-and-swap, are equivalent to consensus.

Read more:
https://2016.berlinbuzzwords.de/session/towards-consensus-distributed-consensus

About Flavio Junqueira:
https://2016.berlinbuzzwords.de/users/flavio-junqueira

Website: https://berlinbuzzwords.de/
Twitter: https://twitter.com/berlinbuzzwords
LinkedIn: https://www.linkedin.com/showcase/berlin-buzzwords/ 
Reddit: https://www.reddit.com/r/berlinbuzzwords/
Captions: 
	00:00:03,680 --> 00:00:10,769
alright that's loud hello everybody so

00:00:08,220 --> 00:00:13,380
thanks for attending my talk I'm pretty

00:00:10,769 --> 00:00:16,470
happy to be here it's actually my first

00:00:13,380 --> 00:00:19,020
time at Berlin buzzwords some thanks

00:00:16,470 --> 00:00:21,090
organization for having me I'm also

00:00:19,020 --> 00:00:23,279
pretty excited to see that the consensus

00:00:21,090 --> 00:00:27,750
is to an interesting topic good to see

00:00:23,279 --> 00:00:30,260
so many people in the in the room when

00:00:27,750 --> 00:00:32,850
the main thing that triggered me to

00:00:30,260 --> 00:00:34,110
propose the stock put this all these

00:00:32,850 --> 00:00:37,680
thoughts on disappeared consensus

00:00:34,110 --> 00:00:39,329
together its many discussions I have

00:00:37,680 --> 00:00:40,379
been having with people or hearing or

00:00:39,329 --> 00:00:44,070
blog posts and people write

00:00:40,379 --> 00:00:45,899
presentations around when consensus

00:00:44,070 --> 00:00:47,100
needs to implement that when consensus

00:00:45,899 --> 00:00:49,500
need to be part of your system

00:00:47,100 --> 00:00:52,620
coordination systems and stuff like that

00:00:49,500 --> 00:00:55,530
and so in this presentation I won't be I

00:00:52,620 --> 00:00:56,940
won't be giving a lot of new stuff quite

00:00:55,530 --> 00:00:59,309
the other way around some of the results

00:00:56,940 --> 00:01:01,980
will be discussing our fairly odd but

00:00:59,309 --> 00:01:04,979
it's it's a way of putting together up

00:01:01,980 --> 00:01:06,689
my thoughts and in my angle on the

00:01:04,979 --> 00:01:08,909
problem and hopefully that will spark

00:01:06,689 --> 00:01:11,400
some interest in future conversations

00:01:08,909 --> 00:01:16,740
about about of this and help us build

00:01:11,400 --> 00:01:19,920
better systems in the future so a bit

00:01:16,740 --> 00:01:22,170
about myself first sight I would say

00:01:19,920 --> 00:01:24,180
that my quarry area of expertise is this

00:01:22,170 --> 00:01:25,950
a bit of computing not only building

00:01:24,180 --> 00:01:28,860
systems but I spent quite a lot of time

00:01:25,950 --> 00:01:32,460
looking algorithms reasoning and and

00:01:28,860 --> 00:01:34,439
deriving algorithms I currently work for

00:01:32,460 --> 00:01:37,950
confident I'm an infrastructure engineer

00:01:34,439 --> 00:01:39,720
and I work in the kafka core team if you

00:01:37,950 --> 00:01:42,270
have been following more or less what

00:01:39,720 --> 00:01:44,909
has been going on with Kafka there is a

00:01:42,270 --> 00:01:46,140
traditional messaging layer of Kafka but

00:01:44,909 --> 00:01:48,689
there are the things that are popping up

00:01:46,140 --> 00:01:50,189
like connect and streams and so on so we

00:01:48,689 --> 00:01:52,829
have various teams working on those

00:01:50,189 --> 00:01:57,299
things if I am see you in the

00:01:52,829 --> 00:01:59,159
traditional core Kafka team I've also

00:01:57,299 --> 00:02:01,649
i've also been volved with open source

00:01:59,159 --> 00:02:04,860
for for some time now in particular with

00:02:01,649 --> 00:02:07,680
a SF projects Apache zookeeper Apache

00:02:04,860 --> 00:02:10,979
bookkeeper Joe projects that i have i

00:02:07,680 --> 00:02:13,620
have helped you to create an open source

00:02:10,979 --> 00:02:15,540
and more recently because

00:02:13,620 --> 00:02:18,120
of my affiliation to confident I've been

00:02:15,540 --> 00:02:21,900
also contributing to two Apache Kafka

00:02:18,120 --> 00:02:23,670
and and I'm not evolving with a SF is

00:02:21,900 --> 00:02:26,190
Apache Incubator helping projects to go

00:02:23,670 --> 00:02:28,080
through the budget process until they

00:02:26,190 --> 00:02:31,500
actually graduate and become a top level

00:02:28,080 --> 00:02:34,079
project and before conference which is a

00:02:31,500 --> 00:02:35,879
pre recent fat past I was a researcher

00:02:34,079 --> 00:02:37,590
initially was with Yahoo research and

00:02:35,879 --> 00:02:40,349
later I joined microsoft research and

00:02:37,590 --> 00:02:42,420
then side to endeavor into a beaut

00:02:40,349 --> 00:02:46,410
development position which is where I am

00:02:42,420 --> 00:02:49,560
right now but let's move on and talk

00:02:46,410 --> 00:02:52,829
about the actual content of the stock so

00:02:49,560 --> 00:02:55,379
distributed systems there are multiple

00:02:52,829 --> 00:02:56,879
ways one can can model this video system

00:02:55,379 --> 00:03:01,440
or reason about this submitted system

00:02:56,879 --> 00:03:03,989
here's one angle collection process this

00:03:01,440 --> 00:03:06,109
process they exchanged messages in order

00:03:03,989 --> 00:03:08,909
to execute some protocol they are

00:03:06,109 --> 00:03:10,769
executing a job processing data whatever

00:03:08,909 --> 00:03:12,390
you like right so they have a goal to

00:03:10,769 --> 00:03:14,430
have a setup process they need to

00:03:12,390 --> 00:03:18,329
satisfy at the properties in need to

00:03:14,430 --> 00:03:22,739
satisfy and the executors protocol for

00:03:18,329 --> 00:03:25,500
that a slightly higher level view that

00:03:22,739 --> 00:03:27,660
we often have when we have a server that

00:03:25,500 --> 00:03:30,720
is exposing a set of objects with a

00:03:27,660 --> 00:03:33,870
given API is to look at a distributed

00:03:30,720 --> 00:03:35,370
system as servers that give me the

00:03:33,870 --> 00:03:38,970
subjects and calls that I make against

00:03:35,370 --> 00:03:41,340
those objects through our pcs in that

00:03:38,970 --> 00:03:43,859
case the network is fairly transparent

00:03:41,340 --> 00:03:45,870
to those to those process they don't

00:03:43,859 --> 00:03:47,400
they don't see the actual messages but

00:03:45,870 --> 00:03:51,840
they're still there let's see what's

00:03:47,400 --> 00:03:53,940
going on underneath and in this stock as

00:03:51,840 --> 00:03:55,319
the title implies I'll be focusing on

00:03:53,940 --> 00:03:59,069
one particular problem which is

00:03:55,319 --> 00:04:00,919
disability consensus which at a very

00:03:59,069 --> 00:04:06,049
very high level very informally means

00:04:00,919 --> 00:04:08,609
agreement across a set of process and

00:04:06,049 --> 00:04:10,859
the reason why consensus is important is

00:04:08,609 --> 00:04:12,919
that there are many problems that we

00:04:10,859 --> 00:04:16,079
cannot that we cannot solve

00:04:12,919 --> 00:04:17,340
fundamentally without it if you some of

00:04:16,079 --> 00:04:20,099
the problems I will talk about if you

00:04:17,340 --> 00:04:22,109
don't you need consensus somewhere if if

00:04:20,099 --> 00:04:24,390
you need to solve them it doesn't mean

00:04:22,109 --> 00:04:26,070
that you need consensus in every single

00:04:24,390 --> 00:04:28,930
distributed system you do

00:04:26,070 --> 00:04:31,360
that's definitely not the case but it's

00:04:28,930 --> 00:04:33,610
important to draw to draw the line and

00:04:31,360 --> 00:04:35,770
decide when it's needed when it's not

00:04:33,610 --> 00:04:39,190
needed and if it's not needed just find

00:04:35,770 --> 00:04:41,620
some other way of doing it the good news

00:04:39,190 --> 00:04:44,669
is that often when we need consensus or

00:04:41,620 --> 00:04:47,260
in the way we have been at using it it's

00:04:44,669 --> 00:04:51,010
it's not in the critical path of your

00:04:47,260 --> 00:04:54,220
application so if you have the frequent

00:04:51,010 --> 00:04:55,570
operations outside that consents is not

00:04:54,220 --> 00:04:57,190
going to be in the critical path of

00:04:55,570 --> 00:05:03,400
those operations even though it might be

00:04:57,190 --> 00:05:06,280
present in your system to the problem

00:05:03,400 --> 00:05:08,740
this will be the consensus so I have

00:05:06,280 --> 00:05:10,240
again a collection of of proxies you can

00:05:08,740 --> 00:05:12,070
call them nodes of servers whatever you

00:05:10,240 --> 00:05:14,800
like i'll be calling them process each

00:05:12,070 --> 00:05:17,320
of those processes proposes an initial

00:05:14,800 --> 00:05:19,750
value sighs you know I i think that the

00:05:17,320 --> 00:05:24,510
decision value of consensus should be

00:05:19,750 --> 00:05:28,570
one or two or zero whatever you like and

00:05:24,510 --> 00:05:30,580
after running a protocol that solves

00:05:28,570 --> 00:05:33,550
consensus I want this process to agree

00:05:30,580 --> 00:05:36,070
on a value as I want all of them are

00:05:33,550 --> 00:05:39,040
these the ones that haven't the heaven

00:05:36,070 --> 00:05:40,840
crashed to pick and decide the same

00:05:39,040 --> 00:05:43,630
value and once they do it they cannot

00:05:40,840 --> 00:05:47,050
they cannot change their mind it has to

00:05:43,630 --> 00:05:49,300
be done only once and as I said in my

00:05:47,050 --> 00:05:53,260
story crashes so we interested in

00:05:49,300 --> 00:05:55,930
scenarios in which crashes can happen if

00:05:53,260 --> 00:05:58,419
you know a bit about this dis cope there

00:05:55,930 --> 00:06:01,570
is really there is a whole body of work

00:05:58,419 --> 00:06:04,090
considering faults there are not crush

00:06:01,570 --> 00:06:07,120
their Byzantine like process that i go

00:06:04,090 --> 00:06:08,740
out of the way become militias and grew

00:06:07,120 --> 00:06:11,530
up data's and different messages to

00:06:08,740 --> 00:06:13,180
different process but we are not be

00:06:11,530 --> 00:06:16,030
considering those here we have enough on

00:06:13,180 --> 00:06:18,430
our plate to discuss but i want to make

00:06:16,030 --> 00:06:23,260
a word that this happens and it's out

00:06:18,430 --> 00:06:26,830
there I be more graphically I if I have

00:06:23,260 --> 00:06:29,590
this three process p1 p2 p3 and now my

00:06:26,830 --> 00:06:31,479
my initial values are colors each one of

00:06:29,590 --> 00:06:34,510
those processes they they pick a color

00:06:31,479 --> 00:06:37,120
to be their initial value what I want to

00:06:34,510 --> 00:06:39,280
happen is that after running a protocol

00:06:37,120 --> 00:06:41,170
they eventually pick one

00:06:39,280 --> 00:06:44,490
and only one and in this case that big

00:06:41,170 --> 00:06:50,230
black just for the sake of example okay

00:06:44,490 --> 00:06:53,500
um but what is what is the protocol that

00:06:50,230 --> 00:06:55,060
I could actually use charandas and I

00:06:53,500 --> 00:06:58,060
must want you there for the next few

00:06:55,060 --> 00:07:00,370
slides I'll try to give some insight of

00:06:58,060 --> 00:07:02,260
how this protocols work as I want I want

00:07:00,370 --> 00:07:04,080
us to be on the same page and on how

00:07:02,260 --> 00:07:07,120
things are supposed to work in practice

00:07:04,080 --> 00:07:09,430
but by no means I'm trying to teach you

00:07:07,120 --> 00:07:11,080
one concrete algorithms and now that the

00:07:09,430 --> 00:07:13,240
features and all that the details of

00:07:11,080 --> 00:07:16,110
such an algorithm so this is just to

00:07:13,240 --> 00:07:20,860
give you an intuition of how this works

00:07:16,110 --> 00:07:23,770
so one way is a pic a leader so let's

00:07:20,860 --> 00:07:26,860
say that I I pick beat you to be the

00:07:23,770 --> 00:07:30,250
leader a big be too because I decided

00:07:26,860 --> 00:07:32,710
black in the previous slide and then

00:07:30,250 --> 00:07:36,060
leader is going to ask the other process

00:07:32,710 --> 00:07:38,760
if they have accepted any any value and

00:07:36,060 --> 00:07:42,340
accepting here is a step towards

00:07:38,760 --> 00:07:45,940
deciding upon a value so enough process

00:07:42,340 --> 00:07:50,350
need to this except the value before a

00:07:45,940 --> 00:07:52,540
decision arises so believe it s those

00:07:50,350 --> 00:07:54,490
process they just started so they

00:07:52,540 --> 00:07:56,830
haven't accepted anything so they tell

00:07:54,490 --> 00:07:59,229
the the leader that I haven't accepted

00:07:56,830 --> 00:08:02,620
anything the leader tells em okay grades

00:07:59,229 --> 00:08:06,940
so accept my value except black so they

00:08:02,620 --> 00:08:08,350
will go and accept black and and they

00:08:06,940 --> 00:08:10,630
would tell another that I have accepted

00:08:08,350 --> 00:08:13,150
black everyone knows that enough process

00:08:10,630 --> 00:08:16,710
have accepted black and they go and

00:08:13,150 --> 00:08:20,650
decide black that's that's awesome

00:08:16,710 --> 00:08:24,910
however this is not entirely safe for

00:08:20,650 --> 00:08:28,090
the following reason say um because

00:08:24,910 --> 00:08:31,570
again i want to be fought aren't say

00:08:28,090 --> 00:08:34,510
that um i had picked a different leader

00:08:31,570 --> 00:08:39,070
previously as i had picked p3 to be the

00:08:34,510 --> 00:08:41,320
leader before B 2 and B 3 B 3 is still

00:08:39,070 --> 00:08:43,360
lingering there it's two things is the

00:08:41,320 --> 00:08:46,589
leader everyone else thinks is scratched

00:08:43,360 --> 00:08:49,660
by it's it's it's still there and

00:08:46,589 --> 00:08:51,130
concurrently with beat you it issues the

00:08:49,660 --> 00:08:54,340
same the same

00:08:51,130 --> 00:08:55,690
the same message by asking p 1 what the

00:08:54,340 --> 00:08:57,460
valley has accepted and let's say that

00:08:55,690 --> 00:09:04,900
the communication between you mp3s

00:08:57,460 --> 00:09:07,060
is completed the labia now Pichu is

00:09:04,900 --> 00:09:10,090
unaware of p3 so he proceeds with with

00:09:07,060 --> 00:09:13,240
its protocol it tells p12 except black

00:09:10,090 --> 00:09:14,980
be one accepts black why not picture

00:09:13,240 --> 00:09:19,930
things is the leader so pitch you must

00:09:14,980 --> 00:09:22,960
be right now p 3 and so and so it except

00:09:19,930 --> 00:09:25,930
in response to Pichu but now it is data

00:09:22,960 --> 00:09:27,610
that the message from p2 p2 to p1 saying

00:09:25,930 --> 00:09:30,490
that he has accepted hasn't arrived and

00:09:27,610 --> 00:09:32,050
so picchu thinks that it has enough

00:09:30,490 --> 00:09:34,560
process it has a majority that has

00:09:32,050 --> 00:09:39,490
accepted black so he thinks okay great

00:09:34,560 --> 00:09:44,530
this started Black in the meanwhile p3

00:09:39,490 --> 00:09:46,990
sends an accept green to p 1 and p 1 has

00:09:44,530 --> 00:09:50,680
no way to say well you know why should i

00:09:46,990 --> 00:09:53,020
not accept this value be three things

00:09:50,680 --> 00:09:55,860
it's the leader so you must be right so

00:09:53,020 --> 00:10:01,120
let's take that value to an exit screen

00:09:55,860 --> 00:10:03,160
now both process p1 b3 exchange accepted

00:10:01,120 --> 00:10:05,680
messages for green they end up deciding

00:10:03,160 --> 00:10:07,420
green which is a violation of agreement

00:10:05,680 --> 00:10:11,560
right with something I don't want

00:10:07,420 --> 00:10:13,450
because those those we got into the

00:10:11,560 --> 00:10:19,540
situation that beat you decided black

00:10:13,450 --> 00:10:21,160
and the end the other to decide agree to

00:10:19,540 --> 00:10:24,520
get around this problem what we have to

00:10:21,160 --> 00:10:27,370
do is it's not standard technology but I

00:10:24,520 --> 00:10:29,110
like to think of a fencing here so we

00:10:27,370 --> 00:10:31,000
use impacts us terms the ballot number

00:10:29,110 --> 00:10:34,960
to do the following when I send that

00:10:31,000 --> 00:10:38,080
what value have accepted message I sends

00:10:34,960 --> 00:10:41,050
a value with it asset value a ballot

00:10:38,080 --> 00:10:44,470
number with it and when p1 process that

00:10:41,050 --> 00:10:46,390
passage it promises that it's not going

00:10:44,470 --> 00:10:49,510
to process any other message with us

00:10:46,390 --> 00:10:54,130
with a lower ballot number and in that

00:10:49,510 --> 00:10:56,860
case the message from p3 we just we just

00:10:54,130 --> 00:10:58,720
fail so if be three tries to tell you

00:10:56,860 --> 00:11:03,850
want to exaggerate it's going to fail

00:10:58,720 --> 00:11:04,270
because the belt number of b3 is to any

00:11:03,850 --> 00:11:05,800
like

00:11:04,270 --> 00:11:08,110
as we proceed with the protocol with

00:11:05,800 --> 00:11:11,410
black eventually tells be one that it

00:11:08,110 --> 00:11:17,320
has accepted black be one of the sides

00:11:11,410 --> 00:11:19,960
black we are good okay so that's that

00:11:17,320 --> 00:11:23,010
was some exciting product all that we

00:11:19,960 --> 00:11:27,820
can use to to reach to get consensus

00:11:23,010 --> 00:11:32,500
initial values be kind of value and

00:11:27,820 --> 00:11:34,150
decided now one of the reasons why

00:11:32,500 --> 00:11:36,760
consensus is hard is that because there

00:11:34,150 --> 00:11:40,210
is this well known impossibility result

00:11:36,760 --> 00:11:43,150
behind it the impossibility result

00:11:40,210 --> 00:11:45,220
essentially says that if I'm in a system

00:11:43,150 --> 00:11:49,390
where things can get arbitrarily low

00:11:45,220 --> 00:11:51,580
messages and the end process then I can

00:11:49,390 --> 00:11:53,290
get into trouble and let's go into a bit

00:11:51,580 --> 00:11:56,530
more into a chance and what is what is

00:11:53,290 --> 00:12:01,750
the underlying problem so consensus

00:11:56,530 --> 00:12:05,470
tells us that we want all process that I

00:12:01,750 --> 00:12:08,530
sue up that they don't crash to agree on

00:12:05,470 --> 00:12:10,240
the same value we want the decision that

00:12:08,530 --> 00:12:12,910
it should be some value proposed by a

00:12:10,240 --> 00:12:15,310
process because we don't want to get a

00:12:12,910 --> 00:12:17,050
bogus protocol they just decides upon

00:12:15,310 --> 00:12:19,450
the same thing always in cheney and

00:12:17,050 --> 00:12:22,000
deciding just speaking the same value

00:12:19,450 --> 00:12:24,340
always and we wanted to decide

00:12:22,000 --> 00:12:26,860
eventually which turns out to be the

00:12:24,340 --> 00:12:28,600
core of the problem this disturbin a

00:12:26,860 --> 00:12:31,210
shin condition essentially forces

00:12:28,600 --> 00:12:32,650
process to eventually decide something

00:12:31,210 --> 00:12:35,230
and if they don't have enough

00:12:32,650 --> 00:12:40,030
information they wind up choosing the

00:12:35,230 --> 00:12:41,740
wrong value so let's see let's see the

00:12:40,030 --> 00:12:43,300
intuition behind this and this time i'm

00:12:41,740 --> 00:12:47,020
going to use just to process for this

00:12:43,300 --> 00:12:49,720
okay so b1 and b2 each one has an

00:12:47,020 --> 00:12:52,350
initial color as an initial value and

00:12:49,720 --> 00:12:56,350
let's say that I let's say I do have a

00:12:52,350 --> 00:12:59,170
tube process consensus prodigal now I

00:12:56,350 --> 00:13:03,480
can have the following problem say that

00:12:59,170 --> 00:13:06,250
I have an execution in which p1 p1 is up

00:13:03,480 --> 00:13:07,720
but picchu crashes right in the

00:13:06,250 --> 00:13:11,050
beginning it doesn't send a single

00:13:07,720 --> 00:13:14,110
message out in that case p1 has no

00:13:11,050 --> 00:13:17,020
choice other than big blow so it decides

00:13:14,110 --> 00:13:18,120
blue if I pick the symmetric execution

00:13:17,020 --> 00:13:22,060
in which p1

00:13:18,120 --> 00:13:24,280
p 1 crashes from the beginning then

00:13:22,060 --> 00:13:29,080
Pichu has no choice other than picking

00:13:24,280 --> 00:13:31,480
grain now if I pick a third execution in

00:13:29,080 --> 00:13:35,560
which the message between the two are

00:13:31,480 --> 00:13:37,390
arbitrarily slow and um they cannot

00:13:35,560 --> 00:13:39,790
distinguish so p1 cannot distinguish

00:13:37,390 --> 00:13:42,070
this execution from the first in the

00:13:39,790 --> 00:13:44,170
previous slide mp3 cannot distinguish

00:13:42,070 --> 00:13:47,050
pee tube cannot distinguish between this

00:13:44,170 --> 00:13:49,150
one and and chew in the previous slide

00:13:47,050 --> 00:13:52,330
then they wind up deciding upon

00:13:49,150 --> 00:13:54,670
different values so if i have this

00:13:52,330 --> 00:13:56,140
arbitrarily delay communication between

00:13:54,670 --> 00:13:58,840
the two because the processors all

00:13:56,140 --> 00:14:01,660
because the network exploitation then

00:13:58,840 --> 00:14:08,820
bottom line is that i cannot i cannot

00:14:01,660 --> 00:14:11,380
make the right call so clearly this

00:14:08,820 --> 00:14:14,590
result even though it's important we

00:14:11,380 --> 00:14:16,750
need to be aware of it it's not it

00:14:14,590 --> 00:14:18,580
doesn't prevent us from from running

00:14:16,750 --> 00:14:20,140
this in practice from having systems

00:14:18,580 --> 00:14:22,720
that use consensus and they're running

00:14:20,140 --> 00:14:25,330
production successfully the reason why

00:14:22,720 --> 00:14:29,470
that doesn't stop us is because there is

00:14:25,330 --> 00:14:32,410
a solution in for practice for partially

00:14:29,470 --> 00:14:35,140
synchronous systems so if our system is

00:14:32,410 --> 00:14:38,410
asynchronous at times meaning that a no

00:14:35,140 --> 00:14:40,120
messages get loss or I have some my

00:14:38,410 --> 00:14:42,670
email where it goes haywire it goes bad

00:14:40,120 --> 00:14:45,910
for some time or my process get

00:14:42,670 --> 00:14:48,070
overloaded whatever then I have ops

00:14:45,910 --> 00:14:50,710
people who come in fix things right and

00:14:48,070 --> 00:14:52,660
then it eventually stabilizes then I can

00:14:50,710 --> 00:14:55,210
get I can make enough progress to get

00:14:52,660 --> 00:14:57,280
consensus to work and in fact given the

00:14:55,210 --> 00:14:59,080
previous inside I gave on the on a

00:14:57,280 --> 00:15:00,610
consensus protocol finally we collect

00:14:59,080 --> 00:15:03,940
the sable leader then I'll be able to

00:15:00,610 --> 00:15:06,970
make progress with it another important

00:15:03,940 --> 00:15:11,980
point is is that if you have played with

00:15:06,970 --> 00:15:16,780
systems like zookeeper etcd you up or

00:15:11,980 --> 00:15:19,540
just raft for that matter you we all say

00:15:16,780 --> 00:15:22,770
that you need to have +1 process where F

00:15:19,540 --> 00:15:26,050
is the number of tolerated crashes and

00:15:22,770 --> 00:15:27,220
that's also fundamental results and the

00:15:26,050 --> 00:15:28,840
argument is very similar to the one I

00:15:27,220 --> 00:15:31,300
just gave you for for for the

00:15:28,840 --> 00:15:32,140
impossibility if I have less than 2 f +1

00:15:31,300 --> 00:15:34,600
for a few

00:15:32,140 --> 00:15:37,660
to have plus 1 then I can end up in that

00:15:34,600 --> 00:15:39,160
situation that I just described and

00:15:37,660 --> 00:15:43,720
again this assumes all Byzantine

00:15:39,160 --> 00:15:46,480
behavior um okay great so that was

00:15:43,720 --> 00:15:48,220
perhaps a bit too abstract so let's go

00:15:46,480 --> 00:15:50,350
into something a bit more practical and

00:15:48,220 --> 00:15:54,940
what is the connection between consensus

00:15:50,350 --> 00:15:56,620
and our world so let me talk now be a

00:15:54,940 --> 00:16:02,070
bit about state machine replication and

00:15:56,620 --> 00:16:05,560
atomic broadcast it turns out that that

00:16:02,070 --> 00:16:08,650
replication is an important application

00:16:05,560 --> 00:16:11,680
of disability consensus and that's

00:16:08,650 --> 00:16:13,360
through this technique we call we we we

00:16:11,680 --> 00:16:17,410
call state machine replication where we

00:16:13,360 --> 00:16:19,300
essentially we split the the building

00:16:17,410 --> 00:16:22,870
such a replicated machine into

00:16:19,300 --> 00:16:25,600
agreements just broadcasting massive

00:16:22,870 --> 00:16:31,240
requests to the replicas and executing

00:16:25,600 --> 00:16:33,310
that those requests so being be a bit

00:16:31,240 --> 00:16:34,750
more specific so if i have a surveyor

00:16:33,310 --> 00:16:38,650
i'm going to replicate that server we

00:16:34,750 --> 00:16:40,690
have some logic right execute the

00:16:38,650 --> 00:16:42,820
commands that a client sees you against

00:16:40,690 --> 00:16:45,670
that server and some state that i use to

00:16:42,820 --> 00:16:47,530
execute the commands that logic and

00:16:45,670 --> 00:16:49,810
state is captured as a deterministic

00:16:47,530 --> 00:16:52,930
state machine and so what I do is I just

00:16:49,810 --> 00:16:56,080
replicated across and across the

00:16:52,930 --> 00:16:58,210
replicas that I that I need and I make

00:16:56,080 --> 00:17:03,010
sure that they all execute the same

00:16:58,210 --> 00:17:04,089
sequence of commands it has to be the

00:17:03,010 --> 00:17:05,530
same sequence because if I miss a

00:17:04,089 --> 00:17:09,400
commander can get a replica in a bad

00:17:05,530 --> 00:17:10,839
state so I don't want that also has to

00:17:09,400 --> 00:17:13,030
be the same order because if i reordered

00:17:10,839 --> 00:17:15,850
I also can get inconsistencies so I

00:17:13,030 --> 00:17:18,430
don't want to do that in the end we end

00:17:15,850 --> 00:17:21,070
up with an architecture diagram that

00:17:18,430 --> 00:17:23,140
looks like this so we have this atomic

00:17:21,070 --> 00:17:26,050
broadcast layer that takes the comments

00:17:23,140 --> 00:17:27,820
from the clients up the sides upon the

00:17:26,050 --> 00:17:31,740
commands are going to be delivered and

00:17:27,820 --> 00:17:35,250
the order and their guarantees

00:17:31,740 --> 00:17:38,380
consistency across across my replicas

00:17:35,250 --> 00:17:41,470
one example that I personally familiar

00:17:38,380 --> 00:17:43,570
with is zookeeper and that would look

00:17:41,470 --> 00:17:45,130
like no mapping to that previous

00:17:43,570 --> 00:17:45,650
architecture that's what zookeeper looks

00:17:45,130 --> 00:17:47,510
like

00:17:45,650 --> 00:17:50,630
so that atomic broadcast would be what

00:17:47,510 --> 00:17:53,690
we call sub and inside the servers we

00:17:50,630 --> 00:17:55,490
have the logic of the commands that the

00:17:53,690 --> 00:17:58,310
clients can issue against the servers

00:17:55,490 --> 00:18:04,910
and this state would be the data tree of

00:17:58,310 --> 00:18:07,940
c-notes we have in a in in zookeeper but

00:18:04,910 --> 00:18:09,650
fine I i started with consensus and then

00:18:07,940 --> 00:18:11,300
I went into replication and I said that

00:18:09,650 --> 00:18:12,530
I need a Tommy broadcast upcoming

00:18:11,300 --> 00:18:14,150
broadcast has something to do with

00:18:12,530 --> 00:18:16,360
agreement but what is what is the

00:18:14,150 --> 00:18:19,010
connection there it turns out that

00:18:16,360 --> 00:18:22,040
atomic broadcast and consensus are

00:18:19,010 --> 00:18:25,430
equivalent problems they are not the

00:18:22,040 --> 00:18:28,550
same problem right often a so people use

00:18:25,430 --> 00:18:29,900
interchangeably consensus systems with

00:18:28,550 --> 00:18:31,760
systems that actually implement atomic

00:18:29,900 --> 00:18:32,930
broadcast which is not entirely wrong

00:18:31,760 --> 00:18:34,520
because again there are equivalent

00:18:32,930 --> 00:18:38,450
problems but then retrieve them from an

00:18:34,520 --> 00:18:42,230
algorithms point of view so if we look

00:18:38,450 --> 00:18:45,410
at consensus that the calls that I have

00:18:42,230 --> 00:18:47,720
our proposed on the side whereas in an

00:18:45,410 --> 00:18:51,110
atomic broadcast I have sent them

00:18:47,720 --> 00:18:53,240
deliver and for consensus we say that we

00:18:51,110 --> 00:18:55,430
decide upon one single value out of the

00:18:53,240 --> 00:18:59,990
values that have been that have been

00:18:55,430 --> 00:19:01,970
proposed and I eventually decide and for

00:18:59,990 --> 00:19:04,040
atomic broadcast we are interested in

00:19:01,970 --> 00:19:10,010
delivering the same sequence of of

00:19:04,040 --> 00:19:12,020
messages and in the same order so why

00:19:10,010 --> 00:19:14,420
are they equivalent well it's not it's

00:19:12,020 --> 00:19:17,510
not that hard to see so if I give you a

00:19:14,420 --> 00:19:19,610
consensus implementation I can implement

00:19:17,510 --> 00:19:21,980
a Tony broadcast by just instantiating

00:19:19,610 --> 00:19:25,670
by just insulin shading that consensus

00:19:21,980 --> 00:19:27,770
box right and so and so each consensus

00:19:25,670 --> 00:19:29,720
instance is going to give me a position

00:19:27,770 --> 00:19:31,880
in the sequence of delivered messages

00:19:29,720 --> 00:19:34,400
and you get a message delivered I

00:19:31,880 --> 00:19:36,470
propose that message to the consensus

00:19:34,400 --> 00:19:38,510
instance and so that those decided

00:19:36,470 --> 00:19:41,630
messages at the bottom give me the

00:19:38,510 --> 00:19:43,220
sequence of messages broadcast that my

00:19:41,630 --> 00:19:47,440
replicas are going to execute if I'm

00:19:43,220 --> 00:19:51,100
implementing a replicated service now um

00:19:47,440 --> 00:19:54,680
if I if you give me an atomic broadcast

00:19:51,100 --> 00:19:57,140
implementation then I can implement

00:19:54,680 --> 00:19:59,570
consensus by just broadcasting my value

00:19:57,140 --> 00:20:00,920
as a message and the process

00:19:59,570 --> 00:20:02,510
deliver those messages and just pick the

00:20:00,920 --> 00:20:04,490
first in that case everyone is

00:20:02,510 --> 00:20:10,970
guaranteed to pick the same value and

00:20:04,490 --> 00:20:14,780
and I have consensus okay that sounds

00:20:10,970 --> 00:20:17,540
good but if I if I am to build a

00:20:14,780 --> 00:20:21,020
replicated system should I you know so

00:20:17,540 --> 00:20:22,940
what should i do should I just go and

00:20:21,020 --> 00:20:24,590
implement everything that I just

00:20:22,940 --> 00:20:27,020
discussed in plumbing my own atomic

00:20:24,590 --> 00:20:30,320
broadcast layer you know take care of

00:20:27,020 --> 00:20:33,140
this atomic broadcasts algorithm take

00:20:30,320 --> 00:20:37,690
care of every configuration so on maybe

00:20:33,140 --> 00:20:40,460
it's it's not necessarily a bad idea

00:20:37,690 --> 00:20:42,290
it's difficult people have said is

00:20:40,460 --> 00:20:43,640
difficult but I think it's difficult

00:20:42,290 --> 00:20:45,920
based on my zookeeper experience but

00:20:43,640 --> 00:20:49,310
it's not impossible you know we can do

00:20:45,920 --> 00:20:50,840
it and if you do it you have to well you

00:20:49,310 --> 00:20:52,820
end up picking one of those those

00:20:50,840 --> 00:20:56,060
protocols that already exists or

00:20:52,820 --> 00:20:58,940
possibly invent your own if if if it's

00:20:56,060 --> 00:21:01,660
needed but then you end up having to

00:20:58,940 --> 00:21:04,550
deal with in a corn-based replication

00:21:01,660 --> 00:21:06,220
typically you use majority and such you

00:21:04,550 --> 00:21:12,070
have to deal with your own

00:21:06,220 --> 00:21:14,840
reconfiguration of your replica set and

00:21:12,070 --> 00:21:17,030
in the case of sub if you end up because

00:21:14,840 --> 00:21:18,920
AB you would look you look like this and

00:21:17,030 --> 00:21:22,490
again I'm not going through the details

00:21:18,920 --> 00:21:24,080
of the protocol but you would need

00:21:22,490 --> 00:21:26,120
something like this in your system to

00:21:24,080 --> 00:21:27,740
make sure that every time there is a

00:21:26,120 --> 00:21:30,230
crash or every time there is a leader

00:21:27,740 --> 00:21:32,660
crash you you have you go through this

00:21:30,230 --> 00:21:33,980
phase where you're you're restoring the

00:21:32,660 --> 00:21:36,920
operational system making sure that a

00:21:33,980 --> 00:21:39,980
majority has committed state so that you

00:21:36,920 --> 00:21:41,480
can start in a safe state so that end

00:21:39,980 --> 00:21:43,700
part of the broadcast part is

00:21:41,480 --> 00:21:47,080
essentially what i have discussed in the

00:21:43,700 --> 00:21:49,400
in the beginning of the talk so an

00:21:47,080 --> 00:21:51,350
alternative to that which doesn't

00:21:49,400 --> 00:21:52,550
completely get rid of of the

00:21:51,350 --> 00:21:56,060
complexities of implementing a

00:21:52,550 --> 00:21:58,940
replicated system is to use a

00:21:56,060 --> 00:22:01,370
configuration master like with the

00:21:58,940 --> 00:22:04,040
vertical axis work by Lamport and others

00:22:01,370 --> 00:22:08,960
and this is actually what at what

00:22:04,040 --> 00:22:12,450
systems like Kafka and bookkeeper use so

00:22:08,960 --> 00:22:14,460
let's let's discuss a bit those examples

00:22:12,450 --> 00:22:17,880
it might have been in one of the of the

00:22:14,460 --> 00:22:20,400
kafka talks during buzz words but let me

00:22:17,880 --> 00:22:24,090
let me say a few words again about Kafka

00:22:20,400 --> 00:22:27,060
so that we are on the same page so Kafka

00:22:24,090 --> 00:22:28,920
implements a messaging layer so Kafka's

00:22:27,060 --> 00:22:32,160
emasculate implemented as as a

00:22:28,920 --> 00:22:35,370
disability replicator log it exposes

00:22:32,160 --> 00:22:37,410
abstraction of topics where producers

00:22:35,370 --> 00:22:39,800
produce messages to those topics and

00:22:37,410 --> 00:22:45,870
consumers consume from those topics a

00:22:39,800 --> 00:22:48,780
topic can be partitioned in in the

00:22:45,870 --> 00:22:50,880
partition of a topic we have we

00:22:48,780 --> 00:22:53,150
associated a replica set with that

00:22:50,880 --> 00:22:56,310
partition we have a distinguished

00:22:53,150 --> 00:22:58,740
replica that we call leader it's not a

00:22:56,310 --> 00:23:00,270
fixed replica so you can change

00:22:58,740 --> 00:23:04,740
dynamically according to failures or

00:23:00,270 --> 00:23:07,740
sports suspicions and such and in the

00:23:04,740 --> 00:23:09,510
other our fall is in your Kafka cluster

00:23:07,740 --> 00:23:11,130
each one of those roles are going to be

00:23:09,510 --> 00:23:12,420
mapped to a server so some servers are

00:23:11,130 --> 00:23:14,700
going to be leaders or some partitions

00:23:12,420 --> 00:23:15,990
some flowers are going to be some sort

00:23:14,700 --> 00:23:17,490
of i can be false or for other

00:23:15,990 --> 00:23:27,960
partitions that we distribute the load

00:23:17,490 --> 00:23:29,820
across the kafka cluster like that so

00:23:27,960 --> 00:23:34,790
let's say for example that I decide that

00:23:29,820 --> 00:23:37,980
my partition needs to have needs to have

00:23:34,790 --> 00:23:44,040
six replicas and I'm picking an uneven

00:23:37,980 --> 00:23:47,370
number here a can of on purpose so in

00:23:44,040 --> 00:23:51,630
Kafka um we have this notion of of is

00:23:47,370 --> 00:23:55,830
ours I have the leader and I need a

00:23:51,630 --> 00:23:57,540
minimum set of requests on a minimum set

00:23:55,830 --> 00:23:59,190
of acknowledgements that I need to

00:23:57,540 --> 00:24:03,540
receive before I declare a message

00:23:59,190 --> 00:24:06,780
successfully produced and so we can say

00:24:03,540 --> 00:24:09,480
that for example the ISR initially is is

00:24:06,780 --> 00:24:11,280
the whole set because everyone is on the

00:24:09,480 --> 00:24:15,450
same set on the same page synced up and

00:24:11,280 --> 00:24:17,670
and so on but the is are obviously can

00:24:15,450 --> 00:24:20,370
change over time so i can start again

00:24:17,670 --> 00:24:21,870
with every 1n and then later i can

00:24:20,370 --> 00:24:24,540
decide that now the three bottom

00:24:21,870 --> 00:24:25,330
followers are not catching up and so I

00:24:24,540 --> 00:24:28,360
kicked them out

00:24:25,330 --> 00:24:30,250
of the ISR and so I shrink the ISR and

00:24:28,360 --> 00:24:32,200
later on at me decide to expand that's

00:24:30,250 --> 00:24:34,180
the forward Sketchup so I can I have

00:24:32,200 --> 00:24:40,240
this dynamic Sava of shrinking Anna and

00:24:34,180 --> 00:24:43,720
expanding as needed and that dynamics of

00:24:40,240 --> 00:24:46,240
that development of is ours use

00:24:43,720 --> 00:24:48,820
zookeeper to store the composition of of

00:24:46,240 --> 00:24:52,330
the ISR right so in the beginning I had

00:24:48,820 --> 00:24:55,510
one two three four five six when the

00:24:52,330 --> 00:24:58,120
bottom three crash then I and I and I

00:24:55,510 --> 00:24:59,770
kicked them out of the ISR I update the

00:24:58,120 --> 00:25:02,920
zookeepers say to be one two three and

00:24:59,770 --> 00:25:05,020
later when expanded I i added i added

00:25:02,920 --> 00:25:10,420
that the new followers so i can go like

00:25:05,020 --> 00:25:14,040
that but now given that i can have a

00:25:10,420 --> 00:25:17,560
nice art that is as small as three

00:25:14,040 --> 00:25:21,010
replicas can I have a split brain

00:25:17,560 --> 00:25:23,830
scenario here can I have a split

00:25:21,010 --> 00:25:28,480
pensionary here so the answer is you

00:25:23,830 --> 00:25:30,910
can't because what we do is we read the

00:25:28,480 --> 00:25:32,710
ISR and we make sure that the new is our

00:25:30,910 --> 00:25:34,540
needs to intersect with the previous

00:25:32,710 --> 00:25:36,100
ayahs are so you read from zookeepers

00:25:34,540 --> 00:25:39,310
say oh I have no element from the

00:25:36,100 --> 00:25:41,730
previous are so I cannot I cannot become

00:25:39,310 --> 00:25:44,140
a nice are so those three bottom

00:25:41,730 --> 00:25:46,210
followers are not going to become a

00:25:44,140 --> 00:25:48,730
parallel I sorry we are not going to

00:25:46,210 --> 00:25:50,650
have a split brain perhaps later they

00:25:48,730 --> 00:25:55,660
will catch up Anna and and will be

00:25:50,650 --> 00:25:57,880
joined the ISR but there is a tricky

00:25:55,660 --> 00:26:00,010
case here right I can have this other

00:25:57,880 --> 00:26:02,920
scenario that looks a lot more like more

00:26:00,010 --> 00:26:04,810
likely to be a split brain scenario so

00:26:02,920 --> 00:26:07,330
everyone now was part of the previous

00:26:04,810 --> 00:26:08,770
ayahs are right one two three four five

00:26:07,330 --> 00:26:11,530
six they were all part of the previous

00:26:08,770 --> 00:26:14,170
ayahs are and if they just declared this

00:26:11,530 --> 00:26:16,240
helps to be part of the SR um they

00:26:14,170 --> 00:26:19,180
legitimately in under under dense

00:26:16,240 --> 00:26:20,710
constraints they legitimately can can do

00:26:19,180 --> 00:26:23,530
it right and we couldn't have a split

00:26:20,710 --> 00:26:25,510
brain scenario the trouble is we

00:26:23,530 --> 00:26:27,940
actually don't we do a bit more than

00:26:25,510 --> 00:26:29,830
that you cannot simply write to

00:26:27,940 --> 00:26:33,790
zookeeper you need to write your

00:26:29,830 --> 00:26:37,710
zookeeper using versions right so the

00:26:33,790 --> 00:26:40,529
versions prevents that concurrent access

00:26:37,710 --> 00:26:43,590
from producing to two independent is

00:26:40,529 --> 00:26:45,830
ours and the use of versions in

00:26:43,590 --> 00:26:50,220
zookeepers is our implementation of

00:26:45,830 --> 00:26:54,210
compound swap and so give me a bit more

00:26:50,220 --> 00:26:56,510
detail if both of them decide that the

00:26:54,210 --> 00:26:59,220
to declare themselves is the new is are

00:26:56,510 --> 00:27:02,610
they would do with the same version and

00:26:59,220 --> 00:27:05,039
so that will double collection zookeeper

00:27:02,610 --> 00:27:06,690
zookeeper except only one and so only

00:27:05,039 --> 00:27:10,559
one of them is going to succeed as

00:27:06,690 --> 00:27:12,240
becoming the new is our and so if the

00:27:10,559 --> 00:27:14,159
bottom three try again they won't be

00:27:12,240 --> 00:27:15,929
able to because they want to they want

00:27:14,159 --> 00:27:17,970
overlap with the previous ayah which is

00:27:15,929 --> 00:27:19,860
not one two three the best they can do

00:27:17,970 --> 00:27:25,020
is actually you know sync up and and

00:27:19,860 --> 00:27:29,070
ketchup and rejoin that there is our and

00:27:25,020 --> 00:27:32,760
so you get this to work we need not only

00:27:29,070 --> 00:27:34,799
a total order of changes right an

00:27:32,760 --> 00:27:37,770
agreement on the order of changes today

00:27:34,799 --> 00:27:41,669
as our but I in addition to that I need

00:27:37,770 --> 00:27:43,559
this ability of preventing rights that

00:27:41,669 --> 00:27:49,320
are being produced out of stale reads

00:27:43,559 --> 00:27:51,210
and we use the versions for that the

00:27:49,320 --> 00:27:53,610
second example which is about apache

00:27:51,210 --> 00:27:55,080
bookkeepers not very different um but

00:27:53,610 --> 00:27:57,480
let's just go over it quickly just to

00:27:55,080 --> 00:28:00,990
see a bit of that the nuances we have

00:27:57,480 --> 00:28:04,529
with with bookkeeper compared to a jew

00:28:00,990 --> 00:28:06,000
Kafka simple keeper we have we have this

00:28:04,529 --> 00:28:07,919
notion of lighters Ledger's you can

00:28:06,000 --> 00:28:10,679
think you can think of like this as log

00:28:07,919 --> 00:28:12,539
segments we have this notion of ensemble

00:28:10,679 --> 00:28:14,840
which is the set of servers that are

00:28:12,539 --> 00:28:18,929
bookies that are serving a given ledger

00:28:14,840 --> 00:28:21,299
we don't have a leader among the bookies

00:28:18,929 --> 00:28:23,789
instead we have with swim a single

00:28:21,299 --> 00:28:27,299
clients a single writer and that rightly

00:28:23,789 --> 00:28:30,179
responsible for making the changes to to

00:28:27,299 --> 00:28:31,559
the bookie composition so in the

00:28:30,179 --> 00:28:34,700
beginning the client is going to go to

00:28:31,559 --> 00:28:37,799
zoo keeper and right you know my ledger

00:28:34,700 --> 00:28:41,100
starting from zero is compel you know

00:28:37,799 --> 00:28:43,500
comprises b1 b2 and b3 now if later on

00:28:41,100 --> 00:28:46,260
three crashes and really play I replace

00:28:43,500 --> 00:28:50,370
it with four then that same client is

00:28:46,260 --> 00:28:57,240
going to go to zoo keeper and right

00:28:50,370 --> 00:29:01,500
three now comprises b1 b2 before if I

00:28:57,240 --> 00:29:03,570
have a single writer if I have a single

00:29:01,500 --> 00:29:05,910
writer than in Prince why I wouldn't

00:29:03,570 --> 00:29:08,730
need to use versions because there will

00:29:05,910 --> 00:29:12,360
be no no conflict no concurrent access

00:29:08,730 --> 00:29:14,510
however there is one special case which

00:29:12,360 --> 00:29:18,360
is when we need to close the light so we

00:29:14,510 --> 00:29:20,910
require you to close these Ledger's 44

00:29:18,360 --> 00:29:25,650
safely to guarantee that I upon read see

00:29:20,910 --> 00:29:27,990
what you read a consistent state and you

00:29:25,650 --> 00:29:30,300
can have a second writer that comes just

00:29:27,990 --> 00:29:32,400
to close the ledger because it first

00:29:30,300 --> 00:29:34,710
won't crushes then you might not be able

00:29:32,400 --> 00:29:37,440
to close it and you would be open

00:29:34,710 --> 00:29:39,780
indefinitely and you don't want that now

00:29:37,440 --> 00:29:42,570
when this second client comes to close

00:29:39,780 --> 00:29:46,200
the ledger you can end up in trouble if

00:29:42,570 --> 00:29:48,420
you again don't use the versions in zoo

00:29:46,200 --> 00:29:50,850
keeper so it is again all about

00:29:48,420 --> 00:29:53,880
concurrent access doing updates over

00:29:50,850 --> 00:29:58,860
your replica set in in zookeeper but the

00:29:53,880 --> 00:30:00,929
advantage again between Kafka and and

00:29:58,860 --> 00:30:02,940
bookkeeper is the fact that if i use

00:30:00,929 --> 00:30:04,590
this scheme of updating the ledges in

00:30:02,940 --> 00:30:07,230
zookeeper or in some coordination system

00:30:04,590 --> 00:30:14,250
in using these versions i'm able to have

00:30:07,230 --> 00:30:16,770
a more flexible replication scheme so

00:30:14,250 --> 00:30:18,960
now comes the connection with with

00:30:16,770 --> 00:30:22,580
consensus it turns out that compound

00:30:18,960 --> 00:30:26,610
swap is consensus number n in the

00:30:22,580 --> 00:30:28,290
inherently his hierarchy if you don't

00:30:26,610 --> 00:30:32,150
know what what that is it's perfectly

00:30:28,290 --> 00:30:35,940
fine the one sentence about this is that

00:30:32,150 --> 00:30:39,780
being consensus number n means that with

00:30:35,940 --> 00:30:42,179
that with that operation or with that

00:30:39,780 --> 00:30:45,330
object with a chaos object you can solve

00:30:42,179 --> 00:30:47,370
consensus wait free consensus 44 in

00:30:45,330 --> 00:30:49,290
process so essentially what this is

00:30:47,370 --> 00:30:51,660
saying is that if you want to use that

00:30:49,290 --> 00:30:53,910
comp and swap consensus must be present

00:30:51,660 --> 00:30:58,640
somewhere in your system in particularly

00:30:53,910 --> 00:30:58,640
that implementation of of comparing swap

00:30:58,870 --> 00:31:04,760
um but clearly as I mentioned the

00:31:03,410 --> 00:31:06,560
beginning Constance is not needed

00:31:04,760 --> 00:31:09,590
everywhere it's not that we're damned

00:31:06,560 --> 00:31:12,710
than we we're not going to have any

00:31:09,590 --> 00:31:15,590
system without consensus consensus there

00:31:12,710 --> 00:31:18,080
are there are objects that this shared

00:31:15,590 --> 00:31:21,100
objects that's not require consensus and

00:31:18,080 --> 00:31:23,300
one key example is readwrite registers

00:31:21,100 --> 00:31:25,310
as if I have anything that has a

00:31:23,300 --> 00:31:26,810
read/write interface that we have

00:31:25,310 --> 00:31:28,910
consensus number one which means that

00:31:26,810 --> 00:31:30,770
you cannot reach consensus at all with

00:31:28,910 --> 00:31:32,510
that object and in some sense it's great

00:31:30,770 --> 00:31:34,130
if that's your requirement then you

00:31:32,510 --> 00:31:36,050
don't need you don't need to worry about

00:31:34,130 --> 00:31:38,750
about an implementation of consensus or

00:31:36,050 --> 00:31:41,090
coordination and such and one clean

00:31:38,750 --> 00:31:43,310
instantiation of that is a key value

00:31:41,090 --> 00:31:46,280
store right where my reads are just

00:31:43,310 --> 00:31:48,020
getting the data for a key my rights are

00:31:46,280 --> 00:31:52,040
setting the data for key or deleting a

00:31:48,020 --> 00:31:56,750
key but then you can come back to me and

00:31:52,040 --> 00:32:00,230
say well um what if I want to implement

00:31:56,750 --> 00:32:02,420
a highly available give that a store and

00:32:00,230 --> 00:32:05,750
I you know I replicate it and I use

00:32:02,420 --> 00:32:09,020
atomic broadcast to solve it right am I

00:32:05,750 --> 00:32:11,480
you know am I not using a strong

00:32:09,020 --> 00:32:12,770
primitive to implement this and so does

00:32:11,480 --> 00:32:15,800
it mean that I have all of a sudden

00:32:12,770 --> 00:32:19,280
exposing consensus even though I have

00:32:15,800 --> 00:32:22,310
this key value store interface it turns

00:32:19,280 --> 00:32:23,720
out that it you want right the fact that

00:32:22,310 --> 00:32:25,100
you have the underlying atomic

00:32:23,720 --> 00:32:27,740
broadcaster it's not going to give you

00:32:25,100 --> 00:32:30,730
stronger guarantees all you're doing

00:32:27,740 --> 00:32:33,440
there is exposing a weaker primitive and

00:32:30,730 --> 00:32:37,340
one way I'm saying that is if you if you

00:32:33,440 --> 00:32:40,670
take zookeeper and eliminate some of its

00:32:37,340 --> 00:32:42,610
operations like create excess get

00:32:40,670 --> 00:32:46,180
children eliminate the conditional stuff

00:32:42,610 --> 00:32:51,740
essentially making it a key value store

00:32:46,180 --> 00:32:53,420
so if i do that why doesn't why doesn't

00:32:51,740 --> 00:32:58,940
sue keeper key value store solve

00:32:53,420 --> 00:33:01,670
consensus here's one way of of observing

00:32:58,940 --> 00:33:03,500
this if you if you watch implement

00:33:01,670 --> 00:33:07,880
consensus with zookeeper what you would

00:33:03,500 --> 00:33:09,560
typically do is create a hazy node so

00:33:07,880 --> 00:33:11,630
the first client to create that c-note

00:33:09,560 --> 00:33:15,380
will put the value that the season

00:33:11,630 --> 00:33:17,420
you into that sea note but now with this

00:33:15,380 --> 00:33:19,610
version of zookeeper that I'm proposing

00:33:17,420 --> 00:33:23,060
here I don't have that a bit of creating

00:33:19,610 --> 00:33:24,620
anymore I can just get and set so what

00:33:23,060 --> 00:33:26,300
kinds can do is they can go to zoo

00:33:24,620 --> 00:33:28,490
keeper they check if there is any value

00:33:26,300 --> 00:33:30,530
that has been written I so Clank one

00:33:28,490 --> 00:33:32,210
goes to zookeeper and says you know this

00:33:30,530 --> 00:33:36,170
/ consensus that any of that it has been

00:33:32,210 --> 00:33:39,560
written already the zookeepers going to

00:33:36,170 --> 00:33:40,850
say no and kind chu is going to do the

00:33:39,560 --> 00:33:43,730
same so keep is going to say no no

00:33:40,850 --> 00:33:45,800
Valley has been written and now they

00:33:43,730 --> 00:33:47,060
both are going to write and the

00:33:45,800 --> 00:33:49,730
zookeepers not going to stop them from

00:33:47,060 --> 00:33:51,290
writing different values all right so

00:33:49,730 --> 00:33:54,290
fine one is going to write zero client

00:33:51,290 --> 00:33:55,760
choose going to write one and when Klein

00:33:54,290 --> 00:33:57,830
one receives a confirmation that has

00:33:55,760 --> 00:34:02,620
been written he may think okay so now it

00:33:57,830 --> 00:34:04,520
has been decided now it has been decided

00:34:02,620 --> 00:34:06,500
but then it has a problem that i have

00:34:04,520 --> 00:34:10,610
just nation and you may think okay so

00:34:06,500 --> 00:34:12,080
what if climb one reads again it's not

00:34:10,610 --> 00:34:13,940
going to help because i can get that

00:34:12,080 --> 00:34:16,070
last message at the bottom from flying

00:34:13,940 --> 00:34:18,710
to and just push it as far out as I want

00:34:16,070 --> 00:34:20,389
and so client one can keep reading and

00:34:18,710 --> 00:34:22,669
keep reading see if something is going

00:34:20,389 --> 00:34:25,010
to change and still I will be able to

00:34:22,669 --> 00:34:28,700
write a different value so that gives us

00:34:25,010 --> 00:34:32,060
some intuition of why if I have such an

00:34:28,700 --> 00:34:36,350
API that is weaker won't be able to give

00:34:32,060 --> 00:34:42,500
me this consensus a solution to

00:34:36,350 --> 00:34:46,280
consensus all right so to wrap up this

00:34:42,500 --> 00:34:47,929
is a quick diagram trying to be quick

00:34:46,280 --> 00:34:49,730
for the flow trying to illustrate the

00:34:47,929 --> 00:34:51,379
concepts that we have seen here the car

00:34:49,730 --> 00:34:55,940
concept I've talked about is this

00:34:51,379 --> 00:34:57,620
ability consensus it's it's it's key for

00:34:55,940 --> 00:34:58,910
implementing it's actually equivalent to

00:34:57,620 --> 00:35:00,530
Atami broadcast which is key for

00:34:58,910 --> 00:35:03,770
implementing replicated state machines

00:35:00,530 --> 00:35:06,170
and that's what you need to do if you

00:35:03,770 --> 00:35:08,450
are implementing one of those now I have

00:35:06,170 --> 00:35:11,390
also talked about a different way of

00:35:08,450 --> 00:35:13,190
dealing with consensus which is by using

00:35:11,390 --> 00:35:16,850
a configuration master i talked about

00:35:13,190 --> 00:35:18,290
you examples Kafka and and bookkeeper in

00:35:16,850 --> 00:35:21,110
both cases winded up needing

00:35:18,290 --> 00:35:23,150
compare-and-swap which is consensus

00:35:21,110 --> 00:35:24,530
number and so it used to have consensus

00:35:23,150 --> 00:35:27,350
in your system if you are

00:35:24,530 --> 00:35:28,940
if you are doing that however I also

00:35:27,350 --> 00:35:31,250
made the argument that not everything

00:35:28,940 --> 00:35:32,180
needs consensus which is great and so if

00:35:31,250 --> 00:35:33,920
you're trying to decide whether

00:35:32,180 --> 00:35:36,200
consensus needed needed at all in your

00:35:33,920 --> 00:35:39,560
system you need to essentially go and

00:35:36,200 --> 00:35:40,790
and determine if for example you would

00:35:39,560 --> 00:35:44,000
be satisfied with a read writing

00:35:40,790 --> 00:35:46,700
interface and in that case we know from

00:35:44,000 --> 00:35:51,740
our theory that's consensus that one

00:35:46,700 --> 00:35:54,860
won't be needed all right and so that's

00:35:51,740 --> 00:35:58,250
everything I had to say I hope you have

00:35:54,860 --> 00:35:59,600
learned something and I am ready to take

00:35:58,250 --> 00:36:01,130
questions if you are if you have any

00:35:59,600 --> 00:36:09,200
otherwise I can also take questions

00:36:01,130 --> 00:36:10,700
offline thank you alright two things la

00:36:09,200 --> 00:36:12,020
do we have we have time for two three

00:36:10,700 --> 00:36:21,920
questions other questions in the

00:36:12,020 --> 00:36:24,320
audience there's one hi and if the

00:36:21,920 --> 00:36:27,010
consensus isn't part of the critical

00:36:24,320 --> 00:36:29,840
path what does that have for

00:36:27,010 --> 00:36:34,370
consequences on when a network petition

00:36:29,840 --> 00:36:39,020
happened and or a crash happens on the

00:36:34,370 --> 00:36:41,060
processing of the messages sure so if

00:36:39,020 --> 00:36:42,650
you if you sure that's that's a that's a

00:36:41,060 --> 00:36:45,490
good question so the question is

00:36:42,650 --> 00:36:49,220
consensus not in the critical path and

00:36:45,490 --> 00:36:51,890
so what happens to my critical path when

00:36:49,220 --> 00:36:53,990
I do need to issue a consensus a

00:36:51,890 --> 00:36:56,720
consensus operation to reconfigure my

00:36:53,990 --> 00:36:59,180
replica said maybe you're writing that

00:36:56,720 --> 00:37:01,310
if you do if sometimes you may have to

00:36:59,180 --> 00:37:04,310
stop right to reconfigure your system

00:37:01,310 --> 00:37:06,530
stop briefly right but assuming that

00:37:04,310 --> 00:37:08,810
your system is operating normally for

00:37:06,530 --> 00:37:10,400
example if you have a real leader

00:37:08,810 --> 00:37:11,870
follower kind of configuration as we

00:37:10,400 --> 00:37:15,260
have in Kafka and there is no leader

00:37:11,870 --> 00:37:17,630
change then there is no there is no

00:37:15,260 --> 00:37:19,550
operation going to a to your

00:37:17,630 --> 00:37:22,040
configuration master you see need the

00:37:19,550 --> 00:37:23,930
replication race and Kafka for example

00:37:22,040 --> 00:37:30,770
is soo propagating the the messages from

00:37:23,930 --> 00:37:33,070
the leader 22 to the flowers right many

00:37:30,770 --> 00:37:33,070
more questions

00:37:36,239 --> 00:37:41,999
all right if not let's think the speaker

00:37:38,890 --> 00:37:41,999

YouTube URL: https://www.youtube.com/watch?v=6WbtCMbV3wM


