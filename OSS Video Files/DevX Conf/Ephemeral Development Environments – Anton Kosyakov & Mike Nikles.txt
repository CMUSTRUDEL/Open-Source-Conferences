Title: Ephemeral Development Environments â€“ Anton Kosyakov & Mike Nikles
Publication date: 2021-04-26
Playlist: DevX Conf
Description: 
	Local, long-lived development environments are what we are used to. We spend effort to configure and nurture them, which takes time away from more important tasks. In this talk, Mike and Anton introduce the concept of ephemeral development environments, their benefits and how you can get started right away too.

About DevX Conf:
DevX Conf is a two-day virtual conference. It's a space where creators collaborate, listen, discuss and declutter our workflows, toolchains, and minds. To improve developer experience. Organized by Gitpod.
https://devxconf.org/
Captions: 
	00:00:14,160 --> 00:00:16,720
hello

00:00:14,639 --> 00:00:18,400
and welcome to this talk about ephemeral

00:00:16,720 --> 00:00:20,560
development environments

00:00:18,400 --> 00:00:22,400
my name is mike nicholas i'm a customer

00:00:20,560 --> 00:00:24,640
success engineer at gitpod

00:00:22,400 --> 00:00:26,240
and i will be joined later on by anthon

00:00:24,640 --> 00:00:30,240
who is a software engineer

00:00:26,240 --> 00:00:33,120
working with me at gitpot as well

00:00:30,240 --> 00:00:33,920
today i want to introduce you to the

00:00:33,120 --> 00:00:36,399
concept of

00:00:33,920 --> 00:00:38,320
ephemeral development environments

00:00:36,399 --> 00:00:40,960
rather than what we currently have

00:00:38,320 --> 00:00:42,840
where we have a local environment and we

00:00:40,960 --> 00:00:44,000
start on adding dependencies and

00:00:42,840 --> 00:00:46,239
runtimes

00:00:44,000 --> 00:00:47,760
for each different project what i want

00:00:46,239 --> 00:00:51,120
to introduce is the concept

00:00:47,760 --> 00:00:53,920
of having a development environment

00:00:51,120 --> 00:00:55,199
fully automated all configured for each

00:00:53,920 --> 00:00:58,320
individual task

00:00:55,199 --> 00:01:01,280
pull request or any kind of work we do

00:00:58,320 --> 00:01:04,239
depending on what we want to work on

00:01:01,280 --> 00:01:06,640
before we dive into that i want to just

00:01:04,239 --> 00:01:08,880
reiterate what a current workflow looks

00:01:06,640 --> 00:01:10,159
like on a local development environment

00:01:08,880 --> 00:01:12,159
now

00:01:10,159 --> 00:01:13,520
the thing with us developers is that

00:01:12,159 --> 00:01:16,320
over the years

00:01:13,520 --> 00:01:17,360
we've just become accustomed to all

00:01:16,320 --> 00:01:19,200
these things

00:01:17,360 --> 00:01:20,479
that have to happen in order to be

00:01:19,200 --> 00:01:23,360
productive

00:01:20,479 --> 00:01:23,920
that we don't think there is much wrong

00:01:23,360 --> 00:01:26,560
with it

00:01:23,920 --> 00:01:28,080
in fact i think there's a lot of work

00:01:26,560 --> 00:01:31,119
that we do

00:01:28,080 --> 00:01:32,720
with setting up tooling dependencies

00:01:31,119 --> 00:01:35,119
making sure we have the right things at

00:01:32,720 --> 00:01:37,680
the right time at the right place

00:01:35,119 --> 00:01:39,280
this is all taking away time from being

00:01:37,680 --> 00:01:40,880
productive

00:01:39,280 --> 00:01:42,560
adding value to the business or the

00:01:40,880 --> 00:01:45,840
project and

00:01:42,560 --> 00:01:48,960
delivering features that eventually help

00:01:45,840 --> 00:01:49,840
our end users and achieving their goals

00:01:48,960 --> 00:01:53,119
right

00:01:49,840 --> 00:01:54,640
now this is a diagram where

00:01:53,119 --> 00:01:56,159
i kind of walk through from left to

00:01:54,640 --> 00:01:58,799
right in terms of

00:01:56,159 --> 00:02:00,799
how we work in a local development in

00:01:58,799 --> 00:02:02,320
our environment we go from

00:02:00,799 --> 00:02:05,119
setting it up the first time we get the

00:02:02,320 --> 00:02:06,159
laptop installing all kind of runtimes

00:02:05,119 --> 00:02:08,479
and editors and

00:02:06,159 --> 00:02:09,440
things like that to setting up a new

00:02:08,479 --> 00:02:11,280
project

00:02:09,440 --> 00:02:13,680
where we clone the source code we

00:02:11,280 --> 00:02:16,239
install uh runtimes making sure we have

00:02:13,680 --> 00:02:18,480
the right version of node or java

00:02:16,239 --> 00:02:20,720
moving on to developing a new feature

00:02:18,480 --> 00:02:22,000
where depending on how long ago we set

00:02:20,720 --> 00:02:24,879
up the project

00:02:22,000 --> 00:02:26,160
we yet again have to validate that we

00:02:24,879 --> 00:02:28,720
have to write runtimes

00:02:26,160 --> 00:02:29,599
we have to make sure we have the latest

00:02:28,720 --> 00:02:30,800
dependencies

00:02:29,599 --> 00:02:32,800
we have to install the latest

00:02:30,800 --> 00:02:34,959
dependencies if we don't have them yet

00:02:32,800 --> 00:02:36,080
so again there's already a bit of

00:02:34,959 --> 00:02:39,120
repetition that

00:02:36,080 --> 00:02:41,360
i really don't think is necessary now

00:02:39,120 --> 00:02:43,280
where it gets really interesting is when

00:02:41,360 --> 00:02:47,120
we're working on a feature

00:02:43,280 --> 00:02:48,959
in in the feature branch and a colleague

00:02:47,120 --> 00:02:51,200
taps us on the shoulder or pings on

00:02:48,959 --> 00:02:54,080
pings us on instant messaging

00:02:51,200 --> 00:02:54,959
asking us to review one of their hot

00:02:54,080 --> 00:02:57,519
fixes

00:02:54,959 --> 00:02:58,560
that are solving a critical bug in

00:02:57,519 --> 00:03:00,319
production

00:02:58,560 --> 00:03:01,920
it needs to be reviewed right away it

00:03:00,319 --> 00:03:04,159
needs to be merged right away

00:03:01,920 --> 00:03:05,680
so that the bug is no longer in

00:03:04,159 --> 00:03:07,920
production

00:03:05,680 --> 00:03:09,760
in our local development environment

00:03:07,920 --> 00:03:11,599
what that means

00:03:09,760 --> 00:03:13,280
if we kind of dissect the different

00:03:11,599 --> 00:03:16,640
steps is that

00:03:13,280 --> 00:03:18,400
we have to somehow get our code stashed

00:03:16,640 --> 00:03:18,959
or committed we have to pull the latest

00:03:18,400 --> 00:03:21,599
branch

00:03:18,959 --> 00:03:22,640
of from our coworker change to that

00:03:21,599 --> 00:03:25,120
branch

00:03:22,640 --> 00:03:26,000
potentially we have to install new

00:03:25,120 --> 00:03:28,159
runtimes or

00:03:26,000 --> 00:03:30,319
upgrade dependencies depending on what

00:03:28,159 --> 00:03:33,360
that pr fixes

00:03:30,319 --> 00:03:35,120
and then we do our actual work work here

00:03:33,360 --> 00:03:35,760
means reviewing the pull request making

00:03:35,120 --> 00:03:39,120
sure

00:03:35,760 --> 00:03:40,720
the bug fix actually works when we're

00:03:39,120 --> 00:03:41,519
satisfied and we give the approval to

00:03:40,720 --> 00:03:43,120
merge

00:03:41,519 --> 00:03:44,640
we then have to go back to our local

00:03:43,120 --> 00:03:46,560
environment you know

00:03:44,640 --> 00:03:47,920
switch back to our branch where we were

00:03:46,560 --> 00:03:49,920
before

00:03:47,920 --> 00:03:51,040
make sure we downgrade any dependencies

00:03:49,920 --> 00:03:53,200
or runtimes that we

00:03:51,040 --> 00:03:56,560
upgraded for the pr so that we're back

00:03:53,200 --> 00:03:59,120
onto a state that works for our branch

00:03:56,560 --> 00:04:00,799
and then we can continue working that's

00:03:59,120 --> 00:04:04,239
a lot of work

00:04:00,799 --> 00:04:05,760
just to review a pull request when

00:04:04,239 --> 00:04:07,760
all we really want to do is basically

00:04:05,760 --> 00:04:12,000
just look at the code run it

00:04:07,760 --> 00:04:14,879
and then approve so in summary

00:04:12,000 --> 00:04:16,560
we select the project we do a bunch of

00:04:14,879 --> 00:04:19,040
stuff

00:04:16,560 --> 00:04:19,759
every time we want to work on something

00:04:19,040 --> 00:04:22,079
and then

00:04:19,759 --> 00:04:23,520
we start coding that's a lot of work

00:04:22,079 --> 00:04:24,880
what i want to do is

00:04:23,520 --> 00:04:26,880
none of that because that can be

00:04:24,880 --> 00:04:29,360
automated and this is where gitbot comes

00:04:26,880 --> 00:04:32,160
in let me walk you through

00:04:29,360 --> 00:04:32,880
how it works at gitport when we have an

00:04:32,160 --> 00:04:34,639
issue

00:04:32,880 --> 00:04:36,479
and we open a pull request for that

00:04:34,639 --> 00:04:39,520
issue

00:04:36,479 --> 00:04:42,639
so what are we going to do is

00:04:39,520 --> 00:04:44,320
over here on our website repo we have an

00:04:42,639 --> 00:04:45,440
issue from anton that he created

00:04:44,320 --> 00:04:48,880
yesterday

00:04:45,440 --> 00:04:52,639
the issue asks me to change the

00:04:48,880 --> 00:04:56,639
header color to our brand color which

00:04:52,639 --> 00:04:59,120
represents kumquat color so orange ish

00:04:56,639 --> 00:04:59,919
now we just walked through what this

00:04:59,120 --> 00:05:01,520
would look like

00:04:59,919 --> 00:05:04,160
in an existing environment and you can

00:05:01,520 --> 00:05:06,560
imagine you being in the seat here and

00:05:04,160 --> 00:05:08,960
having to do that yourself

00:05:06,560 --> 00:05:10,000
the way it works with git pod is very

00:05:08,960 --> 00:05:12,000
different first of

00:05:10,000 --> 00:05:13,360
all you can see i have a github button

00:05:12,000 --> 00:05:16,160
here thanks to

00:05:13,360 --> 00:05:18,000
a browser extension however i can also

00:05:16,160 --> 00:05:20,320
do this differently what i want to do

00:05:18,000 --> 00:05:21,199
i want to spin up an environment

00:05:20,320 --> 00:05:24,400
automatically

00:05:21,199 --> 00:05:26,000
by basically opening a

00:05:24,400 --> 00:05:28,479
ephemeral development environment

00:05:26,000 --> 00:05:30,479
specific for that issue

00:05:28,479 --> 00:05:32,880
what that means is that i want to tell

00:05:30,479 --> 00:05:35,919
gitpod that i'm working on an issue

00:05:32,880 --> 00:05:37,199
and i want gitput to create me a branch

00:05:35,919 --> 00:05:39,360
because that's really what i need right

00:05:37,199 --> 00:05:42,400
i need a branch i can do my code changes

00:05:39,360 --> 00:05:43,919
merge it back into main branch so

00:05:42,400 --> 00:05:46,000
instead of clicking the button the

00:05:43,919 --> 00:05:47,919
alternative to that is you can go to the

00:05:46,000 --> 00:05:52,080
url

00:05:47,919 --> 00:05:55,360
type gitpod.io hash

00:05:52,080 --> 00:05:59,120
and hit enter this opens a

00:05:55,360 --> 00:06:00,880
context aware workspace

00:05:59,120 --> 00:06:02,880
context aware in this case means that

00:06:00,880 --> 00:06:04,240
gitpod knows that i'm working on an

00:06:02,880 --> 00:06:07,120
issue and i'll show you in a minute what

00:06:04,240 --> 00:06:08,960
it did the next thing we notice is it's

00:06:07,120 --> 00:06:12,560
pulling down container image

00:06:08,960 --> 00:06:14,240
and this is basically our underlying

00:06:12,560 --> 00:06:16,400
development environment this has all the

00:06:14,240 --> 00:06:20,080
runtimes the correct runtimes

00:06:16,400 --> 00:06:21,759
it has all the dependencies it has all

00:06:20,080 --> 00:06:22,560
the things installed operating system

00:06:21,759 --> 00:06:25,520
libraries

00:06:22,560 --> 00:06:27,360
anything i need underneath in order to

00:06:25,520 --> 00:06:30,880
develop my software

00:06:27,360 --> 00:06:30,880
so you can see

00:06:30,960 --> 00:06:36,400
the vs code just the same vs code as you

00:06:34,319 --> 00:06:38,800
know from your local environment

00:06:36,400 --> 00:06:40,800
start it up and show me the welcome

00:06:38,800 --> 00:06:43,360
screen just as you as you're used to

00:06:40,800 --> 00:06:44,720
from your from your local environment

00:06:43,360 --> 00:06:49,199
the other thing that it's doing

00:06:44,720 --> 00:06:51,039
down here you can see that it's running

00:06:49,199 --> 00:06:53,360
a bunch of commands so in my case this

00:06:51,039 --> 00:06:53,360
is a

00:06:53,840 --> 00:06:57,680
node based project so it's doing npm

00:06:56,560 --> 00:07:00,319
install

00:06:57,680 --> 00:07:02,240
and it ran that before i even got to the

00:07:00,319 --> 00:07:03,680
point of opening my environment

00:07:02,240 --> 00:07:06,400
what it did when i started the

00:07:03,680 --> 00:07:09,520
environment it did npm

00:07:06,400 --> 00:07:10,880
run dev which starts up my development

00:07:09,520 --> 00:07:14,080
server

00:07:10,880 --> 00:07:17,280
and everything happens basically

00:07:14,080 --> 00:07:18,240
in in a few seconds so that was probably

00:07:17,280 --> 00:07:20,400
a timing issue

00:07:18,240 --> 00:07:21,599
but if we reload that we will get a

00:07:20,400 --> 00:07:24,400
preview

00:07:21,599 --> 00:07:27,120
of the website in my local development

00:07:24,400 --> 00:07:27,120
environment here

00:07:27,599 --> 00:07:31,120
let me give that a second there we go

00:07:30,319 --> 00:07:32,960
start it up

00:07:31,120 --> 00:07:34,400
we can see there's hot reloading going

00:07:32,960 --> 00:07:37,440
on it's all happening

00:07:34,400 --> 00:07:39,120
now the next thing is we have to change

00:07:37,440 --> 00:07:41,360
the color here so

00:07:39,120 --> 00:07:42,400
i know because i worked on it that this

00:07:41,360 --> 00:07:47,440
is under

00:07:42,400 --> 00:07:52,479
um the hero swelt file there we go

00:07:47,440 --> 00:07:55,039
if we go down we have the text

00:07:52,479 --> 00:07:56,000
right here and we want to change the

00:07:55,039 --> 00:07:59,840
color

00:07:56,000 --> 00:08:02,560
to um text

00:07:59,840 --> 00:08:03,280
orange 800 so we can see the preview

00:08:02,560 --> 00:08:06,000
here as well

00:08:03,280 --> 00:08:07,680
because i installed the extensions for

00:08:06,000 --> 00:08:08,800
vs code they're pre-installed

00:08:07,680 --> 00:08:10,800
automatically because

00:08:08,800 --> 00:08:13,039
this project works with tailwind and

00:08:10,800 --> 00:08:14,560
swelt so both of these

00:08:13,039 --> 00:08:16,240
extensions are here i'll show you in a

00:08:14,560 --> 00:08:19,120
second where that happens

00:08:16,240 --> 00:08:19,680
so we see we want to use the brand ripe

00:08:19,120 --> 00:08:22,720
color

00:08:19,680 --> 00:08:25,680
so we say 800 fantastic

00:08:22,720 --> 00:08:26,720
we switch back over here to the preview

00:08:25,680 --> 00:08:29,280
environment

00:08:26,720 --> 00:08:31,919
and we should be able to see the new

00:08:29,280 --> 00:08:37,200
orange color that i just said

00:08:31,919 --> 00:08:39,279
now how did gitbot know

00:08:37,200 --> 00:08:41,279
which extensions installed and how did

00:08:39,279 --> 00:08:42,959
he know which commands to run

00:08:41,279 --> 00:08:44,640
in order to get me to that point i

00:08:42,959 --> 00:08:47,040
didn't have to install anything myself

00:08:44,640 --> 00:08:49,680
or run any command by myself

00:08:47,040 --> 00:08:51,040
if we close that we have a gitpod.yaml

00:08:49,680 --> 00:08:54,959
file

00:08:51,040 --> 00:08:56,640
right here and as you can see there's

00:08:54,959 --> 00:09:00,240
certain ports that we defined so

00:08:56,640 --> 00:09:01,839
3000 is our development environment port

00:09:00,240 --> 00:09:03,600
we opened that in preview we could open

00:09:01,839 --> 00:09:04,800
that in a browser to use the dev tools

00:09:03,600 --> 00:09:08,640
as well

00:09:04,800 --> 00:09:10,959
and we have a task list here so we have

00:09:08,640 --> 00:09:13,920
an init phase which is npm install

00:09:10,959 --> 00:09:14,800
that happens every time somebody pushes

00:09:13,920 --> 00:09:17,120
a commit

00:09:14,800 --> 00:09:18,720
to the repository and anton will talk

00:09:17,120 --> 00:09:21,040
about that in the later talk

00:09:18,720 --> 00:09:22,480
later half of the talk the other thing

00:09:21,040 --> 00:09:24,399
that happens is i'm running a couple

00:09:22,480 --> 00:09:27,440
commands to fix a bug

00:09:24,399 --> 00:09:29,120
in an existing library and then i'm

00:09:27,440 --> 00:09:31,760
running npm run dev

00:09:29,120 --> 00:09:32,800
which spins up my development server and

00:09:31,760 --> 00:09:36,720
all of that happens

00:09:32,800 --> 00:09:39,040
without me doing anything at all so

00:09:36,720 --> 00:09:40,000
that's fantastic we have our code fix we

00:09:39,040 --> 00:09:42,800
verified

00:09:40,000 --> 00:09:44,320
that it's all good the next step is we

00:09:42,800 --> 00:09:46,640
want to open a pull request

00:09:44,320 --> 00:09:47,839
so we can come over to the pull request

00:09:46,640 --> 00:09:51,200
view

00:09:47,839 --> 00:09:54,880
on in source control we can say change

00:09:51,200 --> 00:09:58,480
the header uh

00:09:54,880 --> 00:10:00,080
color to kumquat okay

00:09:58,480 --> 00:10:01,519
we can manually add that or just hit

00:10:00,080 --> 00:10:04,560
enter either way

00:10:01,519 --> 00:10:04,959
so we add the change and the next thing

00:10:04,560 --> 00:10:08,480
is

00:10:04,959 --> 00:10:11,519
we commit all right

00:10:08,480 --> 00:10:14,079
all done now we also want to open

00:10:11,519 --> 00:10:15,360
a pr so if we look down here we can see

00:10:14,079 --> 00:10:17,600
that i'm on a branch

00:10:15,360 --> 00:10:18,560
mike nicholas demo changes header color

00:10:17,600 --> 00:10:20,640
00:10:18,560 --> 00:10:21,839
that was auto generated by git bot

00:10:20,640 --> 00:10:24,160
because git button knows

00:10:21,839 --> 00:10:26,079
i'm working on an issue so all i need to

00:10:24,160 --> 00:10:30,079
do now is just click the button here

00:10:26,079 --> 00:10:32,800
create pull request there we go

00:10:30,079 --> 00:10:33,519
i have that i can put in a description

00:10:32,800 --> 00:10:36,560
if i want

00:10:33,519 --> 00:10:39,519
um leave that empty and then i can say

00:10:36,560 --> 00:10:42,079
create hitting that button it says that

00:10:39,519 --> 00:10:46,480
we are not currently tracking this

00:10:42,079 --> 00:10:50,240
branch no problem let's publish it

00:10:46,480 --> 00:10:50,880
happens under the hood okay and the next

00:10:50,240 --> 00:10:53,920
thing

00:10:50,880 --> 00:10:57,519
you can see that the vs code

00:10:53,920 --> 00:11:00,000
opens my pull request

00:10:57,519 --> 00:11:00,959
review so i can overview i can now look

00:11:00,000 --> 00:11:04,079
at what's going on

00:11:00,959 --> 00:11:06,560
the other thing is if i go back to

00:11:04,079 --> 00:11:07,760
um the pr we will see that that pull

00:11:06,560 --> 00:11:09,680
request is opened as well

00:11:07,760 --> 00:11:12,320
so what i do now is i can just close the

00:11:09,680 --> 00:11:13,440
tab and that development environment

00:11:12,320 --> 00:11:16,000
will disappear

00:11:13,440 --> 00:11:17,440
automatically or i can go here and i can

00:11:16,000 --> 00:11:19,920
say stop workspace

00:11:17,440 --> 00:11:22,160
that'll shut that down and then we're

00:11:19,920 --> 00:11:25,279
good to go so if we go back

00:11:22,160 --> 00:11:28,240
to the demo issue

00:11:25,279 --> 00:11:30,560
and i didn't actually link it to this

00:11:28,240 --> 00:11:33,600
that's fine we're going to pull requests

00:11:30,560 --> 00:11:35,279
and open the header so you can see my

00:11:33,600 --> 00:11:37,920
pull request is here

00:11:35,279 --> 00:11:38,480
the files that have changed perfect and

00:11:37,920 --> 00:11:40,160
now

00:11:38,480 --> 00:11:42,240
i'm going to hand it over to anton who

00:11:40,160 --> 00:11:44,079
is going to show you how it works when

00:11:42,240 --> 00:11:46,240
he reviews that pull request

00:11:44,079 --> 00:11:49,360
and makes changes to it thank you very

00:11:46,240 --> 00:11:52,720
much and enjoy the rest of the talk

00:11:49,360 --> 00:11:53,600
hi everybody it's anton here and today

00:11:52,720 --> 00:11:55,680
we are going to do some

00:11:53,600 --> 00:11:58,320
request reviews so here's is apr from

00:11:55,680 --> 00:12:00,399
mike which he created yesterday

00:11:58,320 --> 00:12:02,399
and i want to review it i could just

00:12:00,399 --> 00:12:03,760
prefix this url with github io to start

00:12:02,399 --> 00:12:05,839
a new workspace

00:12:03,760 --> 00:12:07,519
but the thing is about websites that we

00:12:05,839 --> 00:12:10,000
have here installed

00:12:07,519 --> 00:12:10,880
gitpod github application which can

00:12:10,000 --> 00:12:12,880
prepare

00:12:10,880 --> 00:12:14,800
workspaces like pre-built workspaces for

00:12:12,880 --> 00:12:15,120
us for the concrete branch in advance

00:12:14,800 --> 00:12:16,959
and

00:12:15,120 --> 00:12:19,040
i can start it just by clicking details

00:12:16,959 --> 00:12:21,600
here

00:12:19,040 --> 00:12:22,800
so as i mentioned here it doesn't now

00:12:21,600 --> 00:12:26,000
build from scratch

00:12:22,800 --> 00:12:29,200
but it builds it takes a result of

00:12:26,000 --> 00:12:30,240
previous which was done yesterday after

00:12:29,200 --> 00:12:33,440
mike's push change

00:12:30,240 --> 00:12:39,839
changes so you're saying load

00:12:33,440 --> 00:12:39,839
pre-built and now id will pop up

00:12:43,440 --> 00:12:49,040
okay so let's have a look at terminal

00:12:47,440 --> 00:12:50,720
it's saying that it's already started to

00:12:49,040 --> 00:12:54,160
death sugar

00:12:50,720 --> 00:12:55,120
which sweetly kid will do some build in

00:12:54,160 --> 00:12:56,800
advance but what

00:12:55,120 --> 00:12:58,720
you can interestingly if you scroll up a

00:12:56,800 --> 00:13:01,200
bit you see this message

00:12:58,720 --> 00:13:03,360
with task around the workspace rebuild

00:13:01,200 --> 00:13:06,240
and in fact everything what is above

00:13:03,360 --> 00:13:07,040
but done i think chronos is not now

00:13:06,240 --> 00:13:09,920
before

00:13:07,040 --> 00:13:10,720
and only this part is happen now so you

00:13:09,920 --> 00:13:12,800
also can see

00:13:10,720 --> 00:13:14,160
in previews that my exchange is already

00:13:12,800 --> 00:13:17,519
here that

00:13:14,160 --> 00:13:21,120
header is in color code

00:13:17,519 --> 00:13:23,680
and it's nice another thing which mike

00:13:21,120 --> 00:13:24,480
mentioned already that gitpod is context

00:13:23,680 --> 00:13:26,079
aware

00:13:24,480 --> 00:13:28,320
and it means that because of pull

00:13:26,079 --> 00:13:30,560
request for example it preloads pr

00:13:28,320 --> 00:13:31,920
within ide so if i click here on the

00:13:30,560 --> 00:13:35,120
activity bar

00:13:31,920 --> 00:13:36,480
pr view it gives me all files which has

00:13:35,120 --> 00:13:38,240
been changed

00:13:36,480 --> 00:13:39,519
and we can click on individual files

00:13:38,240 --> 00:13:42,880
like heroes virtual

00:13:39,519 --> 00:13:46,880
here so to see changes

00:13:42,880 --> 00:13:51,199
you can also comment nice

00:13:46,880 --> 00:13:54,720
thank you and start review on github

00:13:51,199 --> 00:13:57,199
obviously we have full richness of ide

00:13:54,720 --> 00:14:00,240
here for content ac support for instance

00:13:57,199 --> 00:14:03,839
so you can use it for

00:14:00,240 --> 00:14:06,959
css in uh javascript

00:14:03,839 --> 00:14:10,880
i think and you can get a overview of

00:14:06,959 --> 00:14:13,040
pull request information within ide

00:14:10,880 --> 00:14:14,959
so it's quite quite similar to what we

00:14:13,040 --> 00:14:17,040
see on github and if you go to github

00:14:14,959 --> 00:14:20,160
for instance

00:14:17,040 --> 00:14:22,320
all my comment is here already the thing

00:14:20,160 --> 00:14:23,839
is if also mike comes tomorrow

00:14:22,320 --> 00:14:25,760
and start another workspace for this

00:14:23,839 --> 00:14:29,040
pull request he could address his

00:14:25,760 --> 00:14:29,040
comment within ide

00:14:29,519 --> 00:14:33,600
and the lastly you can also approve or

00:14:31,920 --> 00:14:36,000
request changes from vd

00:14:33,600 --> 00:14:36,800
so now now let's go to slides and talk

00:14:36,000 --> 00:14:39,680
about

00:14:36,800 --> 00:14:41,440
what is pre-built and why it's important

00:14:39,680 --> 00:14:42,480
in context of git pod for a singular

00:14:41,440 --> 00:14:45,040
developer

00:14:42,480 --> 00:14:46,800
so if you but i don't have anything to

00:14:45,040 --> 00:14:48,720
check out locally whenever i have some

00:14:46,800 --> 00:14:51,360
tasks i start a new workspace right i

00:14:48,720 --> 00:14:54,240
have an issue okay the workspace

00:14:51,360 --> 00:14:54,560
i have apr to review i have a workspace

00:14:54,240 --> 00:14:56,399
i

00:14:54,560 --> 00:14:58,000
found some cool javascript project

00:14:56,399 --> 00:14:58,959
internet i want to just check out what

00:14:58,000 --> 00:15:02,079
it's doing

00:14:58,959 --> 00:15:03,680
check out demos i start another space

00:15:02,079 --> 00:15:06,000
for standard spaces i don't do any

00:15:03,680 --> 00:15:06,639
changes and when i'm done i just close

00:15:06,000 --> 00:15:08,399
it up

00:15:06,639 --> 00:15:10,079
and it's gone two minutes it's

00:15:08,399 --> 00:15:12,639
completely disposed to race it doesn't

00:15:10,079 --> 00:15:12,639
exist anymore

00:15:12,959 --> 00:15:18,000
and in sum i exchange code obviously but

00:15:16,240 --> 00:15:19,360
sometimes i also change a

00:15:18,000 --> 00:15:21,519
description of our development

00:15:19,360 --> 00:15:23,279
environments and afterwards i push it to

00:15:21,519 --> 00:15:24,160
github github or bitbucket whatever

00:15:23,279 --> 00:15:26,720
using

00:15:24,160 --> 00:15:28,079
and here's the thing you can think about

00:15:26,720 --> 00:15:30,560
gitbot as a ci

00:15:28,079 --> 00:15:32,079
server but for developer environments so

00:15:30,560 --> 00:15:34,720
it's monitoring

00:15:32,079 --> 00:15:36,880
changes and push pushing pulling them

00:15:34,720 --> 00:15:39,360
and since it started a special

00:15:36,880 --> 00:15:40,000
build for deaf environments and your

00:15:39,360 --> 00:15:42,320
application

00:15:40,000 --> 00:15:44,000
on top of it and as a result it produces

00:15:42,320 --> 00:15:46,560
so called pre-built depth environment

00:15:44,000 --> 00:15:48,000
and then shut again to the startup of

00:15:46,560 --> 00:15:51,759
the workspaces

00:15:48,000 --> 00:15:53,839
and if some branch we already pre-built

00:15:51,759 --> 00:15:56,560
the environments then it doesn't it

00:15:53,839 --> 00:15:59,279
takes very fast to start them

00:15:56,560 --> 00:16:00,639
and it's very important to scale a

00:15:59,279 --> 00:16:02,880
firmware development environment

00:16:00,639 --> 00:16:05,120
so here we look at website application

00:16:02,880 --> 00:16:07,839
but in fact it's not so

00:16:05,120 --> 00:16:09,279
takes so long to build static website

00:16:07,839 --> 00:16:10,320
it's more important like if you have

00:16:09,279 --> 00:16:12,959
complex projects

00:16:10,320 --> 00:16:13,839
think about microservices or kubernetes

00:16:12,959 --> 00:16:15,759
applications

00:16:13,839 --> 00:16:17,920
or something for takes really long like

00:16:15,759 --> 00:16:20,320
10 minutes to build

00:16:17,920 --> 00:16:21,120
getport makes a huge difference there

00:16:20,320 --> 00:16:24,320
there is

00:16:21,120 --> 00:16:27,360
also another part of feedback loop here

00:16:24,320 --> 00:16:29,920
is if build failed so if you change

00:16:27,360 --> 00:16:30,880
description of your default bias like

00:16:29,920 --> 00:16:34,000
you edit a new

00:16:30,880 --> 00:16:36,079
docker image or you upgrade it and break

00:16:34,000 --> 00:16:37,680
the build then you want to be notified

00:16:36,079 --> 00:16:39,920
you don't want to land it on the main

00:16:37,680 --> 00:16:41,199
branches breaks or other developers

00:16:39,920 --> 00:16:43,440
going like oh why it doesn't work

00:16:41,199 --> 00:16:45,040
anymore but it works for you because you

00:16:43,440 --> 00:16:46,639
had before locally to install but now

00:16:45,040 --> 00:16:49,199
nobody has it

00:16:46,639 --> 00:16:49,839
but you fix your build you make sure git

00:16:49,199 --> 00:16:52,480
bot

00:16:49,839 --> 00:16:54,160
has a green check and then merge it it's

00:16:52,480 --> 00:16:55,279
obviously very useful also if you have

00:16:54,160 --> 00:16:56,560
public popular

00:16:55,279 --> 00:16:58,240
open source project with a lot of

00:16:56,560 --> 00:16:59,759
incoming pull request changes if you

00:16:58,240 --> 00:17:00,560
pre-built them all in advance you come

00:16:59,759 --> 00:17:02,560
in the morning

00:17:00,560 --> 00:17:04,640
you just start taps you don't wait for

00:17:02,560 --> 00:17:06,400
the build you you change just

00:17:04,640 --> 00:17:08,079
think see what is there doing like in 10

00:17:06,400 --> 00:17:09,600
minutes and you cross all your stops and

00:17:08,079 --> 00:17:12,799
gun

00:17:09,600 --> 00:17:16,880
and you don't need to go far uh

00:17:12,799 --> 00:17:17,120
to experience it in fact the pot itself

00:17:16,880 --> 00:17:19,120
is

00:17:17,120 --> 00:17:20,799
kubernetes application built by multiple

00:17:19,120 --> 00:17:21,760
software engineers using multiple

00:17:20,799 --> 00:17:24,240
languages

00:17:21,760 --> 00:17:25,120
different runtimes have multiple

00:17:24,240 --> 00:17:26,559
different

00:17:25,120 --> 00:17:29,600
companies running in docker and

00:17:26,559 --> 00:17:32,400
kubernetes using database and so on

00:17:29,600 --> 00:17:33,600
and when we started building it when we

00:17:32,400 --> 00:17:36,640
experienced it

00:17:33,600 --> 00:17:38,240
we obviously were using our local

00:17:36,640 --> 00:17:41,840
machines because we do couldn't

00:17:38,240 --> 00:17:44,000
work food yet and it was

00:17:41,840 --> 00:17:45,200
not pleasant experience because each

00:17:44,000 --> 00:17:48,080
developer need to

00:17:45,200 --> 00:17:49,520
run mini cube have docker waste a lot of

00:17:48,080 --> 00:17:51,520
time pulling with images

00:17:49,520 --> 00:17:53,039
machines get really caught and

00:17:51,520 --> 00:17:55,280
personally me i

00:17:53,039 --> 00:17:56,960
work on ide integration and git bots

00:17:55,280 --> 00:17:58,640
like vs code

00:17:56,960 --> 00:18:00,240
and i'm not interested in all these

00:17:58,640 --> 00:18:03,440
parts i would like to go and

00:18:00,240 --> 00:18:05,760
start coding uh id part right and

00:18:03,440 --> 00:18:07,440
try out more changes i don't want to

00:18:05,760 --> 00:18:09,520
deal with criteria's context and

00:18:07,440 --> 00:18:11,600
identification again

00:18:09,520 --> 00:18:13,280
google and if something goes wrong

00:18:11,600 --> 00:18:17,039
trying to

00:18:13,280 --> 00:18:18,960
fixed kubernetes and so now after

00:18:17,039 --> 00:18:20,080
years of developing it posting reports i

00:18:18,960 --> 00:18:23,919
could show

00:18:20,080 --> 00:18:26,000
our current experience for it to you

00:18:23,919 --> 00:18:27,360
so here i have an issue indeed port and

00:18:26,000 --> 00:18:29,440
i just briefly

00:18:27,360 --> 00:18:31,520
will give what are you io as usual to

00:18:29,440 --> 00:18:34,880
start another workspace

00:18:31,520 --> 00:18:37,520
and what's happening uh this and special

00:18:34,880 --> 00:18:38,960
ci build the 3d pod so this is gitpodci

00:18:37,520 --> 00:18:40,320
which creates different lines but there

00:18:38,960 --> 00:18:43,520
is a usual ci

00:18:40,320 --> 00:18:44,799
in our case we use verbs which are

00:18:43,520 --> 00:18:47,520
highly optimized size

00:18:44,799 --> 00:18:48,320
for us and what it does it for each

00:18:47,520 --> 00:18:50,720
branch

00:18:48,320 --> 00:18:52,640
it creates a version of the portive

00:18:50,720 --> 00:18:56,240
changes from this branch

00:18:52,640 --> 00:18:58,640
and then it gives us one if i follow it

00:18:56,240 --> 00:18:59,280
you see it's not gitpotio but it

00:18:58,640 --> 00:19:03,360
something

00:18:59,280 --> 00:19:06,240
with my branch's name and

00:19:03,360 --> 00:19:07,440
this preview environments connected to

00:19:06,240 --> 00:19:10,480
my default environments

00:19:07,440 --> 00:19:12,559
for this branch so here we already have

00:19:10,480 --> 00:19:14,480
the pod for space started for the same

00:19:12,559 --> 00:19:16,480
branch

00:19:14,480 --> 00:19:17,840
and it says i saved six minutes it's

00:19:16,480 --> 00:19:20,320
nice but i wanted

00:19:17,840 --> 00:19:21,200
what i wanted to show that it has cube

00:19:20,320 --> 00:19:23,760
criteria

00:19:21,200 --> 00:19:25,360
two installed it's a tool who doesn't

00:19:23,760 --> 00:19:27,919
know how to manage

00:19:25,360 --> 00:19:28,799
kubernetes application and we can watch

00:19:27,919 --> 00:19:31,840
what kind of

00:19:28,799 --> 00:19:34,960
ports are running in it

00:19:31,840 --> 00:19:34,960
oh sorry which

00:19:35,440 --> 00:19:39,440
and just to verify i will go to my

00:19:37,520 --> 00:19:42,880
preview environments i will start new

00:19:39,440 --> 00:19:42,880
workspace and you will see

00:19:43,280 --> 00:19:47,280
that here you'll notice that in new

00:19:45,760 --> 00:19:49,919
containing creating

00:19:47,280 --> 00:19:50,480
so it's easier like that we got the

00:19:49,919 --> 00:19:53,360
issue

00:19:50,480 --> 00:19:54,160
a starter works skater branch it will

00:19:53,360 --> 00:19:56,400
gives me

00:19:54,160 --> 00:19:57,919
pre-built developer mines it gives me

00:19:56,400 --> 00:19:59,520
preview environments it connects it and

00:19:57,919 --> 00:20:02,640
i can just start working i don't need to

00:19:59,520 --> 00:20:02,640
deal with anything else

00:20:03,120 --> 00:20:07,039
so there's many other exciting things

00:20:06,159 --> 00:20:08,960
about gitbot

00:20:07,039 --> 00:20:11,039
for example i show you only one way to

00:20:08,960 --> 00:20:12,320
calibrate asynchronously which makes a

00:20:11,039 --> 00:20:14,080
lot of sense right now right

00:20:12,320 --> 00:20:16,480
we work remotely and asynchronously for

00:20:14,080 --> 00:20:17,200
example mike lives in canada and i lived

00:20:16,480 --> 00:20:19,200
in germany

00:20:17,200 --> 00:20:20,640
and even prepare this presentation with

00:20:19,200 --> 00:20:21,039
workers in chronology because we have

00:20:20,640 --> 00:20:24,400
like

00:20:21,039 --> 00:20:27,280
one or two hours to to sing but

00:20:24,400 --> 00:20:28,480
you also sometimes could live share your

00:20:27,280 --> 00:20:30,640
workspace for example

00:20:28,480 --> 00:20:32,240
to give the try to give someone to try

00:20:30,640 --> 00:20:34,320
changes immediately or help

00:20:32,240 --> 00:20:36,080
to get the help that you buying help you

00:20:34,320 --> 00:20:39,360
can create a snapshot

00:20:36,080 --> 00:20:40,320
of very spaces uh which are very useful

00:20:39,360 --> 00:20:43,679
to reproduce

00:20:40,320 --> 00:20:45,679
tasks or bugs or create

00:20:43,679 --> 00:20:47,520
tutorials it's basically like it

00:20:45,679 --> 00:20:48,080
captures really a state of your

00:20:47,520 --> 00:20:50,559
workspace

00:20:48,080 --> 00:20:52,640
at some point of time and can then spawn

00:20:50,559 --> 00:20:54,320
another space from it

00:20:52,640 --> 00:20:56,720
what is the best what you could do now

00:20:54,320 --> 00:20:58,000
just go to any github github or beatbot

00:20:56,720 --> 00:21:01,039
packet package a

00:20:58,000 --> 00:21:02,159
prefix keyboard iota try after that you

00:21:01,039 --> 00:21:04,080
can go to our website

00:21:02,159 --> 00:21:06,159
documentation learn about how you

00:21:04,080 --> 00:21:07,679
describe your deaf environments how you

00:21:06,159 --> 00:21:10,000
automate how we enable github

00:21:07,679 --> 00:21:11,840
application to get these pre-built

00:21:10,000 --> 00:21:13,280
and if you struggle with something if

00:21:11,840 --> 00:21:14,080
you have questions you join our

00:21:13,280 --> 00:21:16,159
community

00:21:14,080 --> 00:21:18,000
we are there to help you to improve your

00:21:16,159 --> 00:21:26,799
developer workflows

00:21:18,000 --> 00:21:26,799

YouTube URL: https://www.youtube.com/watch?v=IXVmjkI7wkc


