Title: The evolution of DevX - An interview with Erich Gamma
Publication date: 2021-04-26
Playlist: DevX Conf
Description: 
	About DevX Conf:
DevX Conf is a two-day virtual conference. It's a space where creators collaborate, listen, discuss and declutter our workflows, toolchains, and minds. To improve developer experience. Organized by Gitpod.
https://devxconf.org/
Captions: 
	00:00:14,080 --> 00:00:16,880
hi

00:00:14,480 --> 00:00:18,800
i'm sven i'm the ceo of getpod and i

00:00:16,880 --> 00:00:21,359
have the pleasure of talking with eric

00:00:18,800 --> 00:00:24,400
gamma today

00:00:21,359 --> 00:00:24,880
arie had like through the last 25 years

00:00:24,400 --> 00:00:28,240
a

00:00:24,880 --> 00:00:31,439
huge impact on developer experience

00:00:28,240 --> 00:00:33,440
you know he he wrote the design patterns

00:00:31,439 --> 00:00:36,800
book that came out in 1995

00:00:33,440 --> 00:00:40,239
as part of the gang of four um

00:00:36,800 --> 00:00:40,719
he cove wrote the junit library which is

00:00:40,239 --> 00:00:44,079
you know

00:00:40,719 --> 00:00:46,719
kind of the the the one the version

00:00:44,079 --> 00:00:47,840
that that sparked the idea of x unit

00:00:46,719 --> 00:00:49,360
libraries um

00:00:47,840 --> 00:00:51,760
around the globe so he wrote that

00:00:49,360 --> 00:00:54,559
together with um kent back who's also

00:00:51,760 --> 00:00:56,800
um popular for the extreme programming

00:00:54,559 --> 00:00:57,199
and agile methodologies work he had been

00:00:56,800 --> 00:01:00,480
on

00:00:57,199 --> 00:01:02,559
working on um and

00:01:00,480 --> 00:01:04,159
so that's already you know quite

00:01:02,559 --> 00:01:06,479
interesting and and

00:01:04,159 --> 00:01:08,560
very impactful the design patterns work

00:01:06,479 --> 00:01:10,159
and and j unit but the real work that

00:01:08,560 --> 00:01:13,280
eric is focusing on

00:01:10,159 --> 00:01:16,640
is ides and developer tools

00:01:13,280 --> 00:01:17,280
generally so uh the first one i want to

00:01:16,640 --> 00:01:20,240
mention is

00:01:17,280 --> 00:01:21,759
eclipse you know eclipse when it came

00:01:20,240 --> 00:01:24,080
out it was a really

00:01:21,759 --> 00:01:26,320
important milestone it was a very

00:01:24,080 --> 00:01:29,520
superior ide was with very

00:01:26,320 --> 00:01:30,400
nice um java support it actually was the

00:01:29,520 --> 00:01:33,439
first ide

00:01:30,400 --> 00:01:34,560
if i remember correctly that had a real

00:01:33,439 --> 00:01:37,600
compiler built

00:01:34,560 --> 00:01:38,880
in in an incremental compiler because

00:01:37,600 --> 00:01:41,119
the team understood

00:01:38,880 --> 00:01:43,280
in order to support really good language

00:01:41,119 --> 00:01:44,880
tooling you need to know a lot about the

00:01:43,280 --> 00:01:45,759
language right and so that was an

00:01:44,880 --> 00:01:48,399
important

00:01:45,759 --> 00:01:49,280
design decision there and of course also

00:01:48,399 --> 00:01:52,720
it was very

00:01:49,280 --> 00:01:55,600
and still is very extensible which um

00:01:52,720 --> 00:01:57,520
made it a great platform uh for the open

00:01:55,600 --> 00:01:59,759
source you know all the open source

00:01:57,520 --> 00:02:00,799
products that came out of that or and

00:01:59,759 --> 00:02:03,360
projects

00:02:00,799 --> 00:02:05,840
and so today eclipse is still a very

00:02:03,360 --> 00:02:08,319
thriving open source community

00:02:05,840 --> 00:02:11,680
and all of that is you know based on the

00:02:08,319 --> 00:02:14,319
initial work that eric and his team did

00:02:11,680 --> 00:02:15,680
10 years ago then eric and his team

00:02:14,319 --> 00:02:17,920
moved on to microsoft

00:02:15,680 --> 00:02:19,360
in order to again work on a code editor

00:02:17,920 --> 00:02:22,560
there

00:02:19,360 --> 00:02:25,599
fast forward to today we see vs code um

00:02:22,560 --> 00:02:26,319
very very um thriving project with over

00:02:25,599 --> 00:02:28,239
00:02:26,319 --> 00:02:31,360
market share in the developer community

00:02:28,239 --> 00:02:34,800
according to the 2019 stack overflow

00:02:31,360 --> 00:02:36,000
survey so probably even more today i'm

00:02:34,800 --> 00:02:39,040
very excited to

00:02:36,000 --> 00:02:42,640
welcome eric gamma hi erich

00:02:39,040 --> 00:02:44,959
how are you very good hi sven glad to be

00:02:42,640 --> 00:02:47,280
here and finally meet you after all this

00:02:44,959 --> 00:02:50,080
year of almost mutual collaboration

00:02:47,280 --> 00:02:50,800
from remote yeah it's very exciting for

00:02:50,080 --> 00:02:54,080
me as well

00:02:50,800 --> 00:02:57,120
um so really uh

00:02:54,080 --> 00:02:59,519
good to see you um so today

00:02:57,120 --> 00:03:00,720
uh in this uh conversation i would like

00:02:59,519 --> 00:03:04,000
to you know go through

00:03:00,720 --> 00:03:05,120
the your you know past the the

00:03:04,000 --> 00:03:06,879
achievements you've made the

00:03:05,120 --> 00:03:08,560
contributions you've made to developer

00:03:06,879 --> 00:03:11,920
experience

00:03:08,560 --> 00:03:12,720
um and in the intro i already talked

00:03:11,920 --> 00:03:15,519
about

00:03:12,720 --> 00:03:18,000
design patterns which is huge and and

00:03:15,519 --> 00:03:18,560
also the junit uh stuff and so on i

00:03:18,000 --> 00:03:21,599
still love

00:03:18,560 --> 00:03:22,400
design patterns don't don't yeah i do i

00:03:21,599 --> 00:03:25,760
love them like

00:03:22,400 --> 00:03:25,760
like you love your children right

00:03:27,920 --> 00:03:33,599
and but i would like to focus more on

00:03:31,200 --> 00:03:35,519
eclipse and vs code the work you did

00:03:33,599 --> 00:03:37,440
there which is also both full of design

00:03:35,519 --> 00:03:40,799
patterns if you look into the code so

00:03:37,440 --> 00:03:43,280
uh actually i think

00:03:40,799 --> 00:03:44,799
besides a gang of four book that i i

00:03:43,280 --> 00:03:46,879
think i read that

00:03:44,799 --> 00:03:48,480
pretty in the beginning of my career i

00:03:46,879 --> 00:03:49,440
also read the design patterns in the

00:03:48,480 --> 00:03:52,480
eclipse book

00:03:49,440 --> 00:03:54,959
that came out later yeah contributing to

00:03:52,480 --> 00:03:58,480
eclipse yeah

00:03:54,959 --> 00:03:58,480
so talking about eclipse

00:03:59,040 --> 00:04:06,319
so i mean eclipse has been around um i'm

00:04:02,480 --> 00:04:10,319
not entirely sure i think 20 25 years

00:04:06,319 --> 00:04:12,080
yeah well a long time when i left ibm it

00:04:10,319 --> 00:04:14,480
was more than 10 years yeah so

00:04:12,080 --> 00:04:16,079
now it's 10 years microsoft it's 20 more

00:04:14,480 --> 00:04:19,680
than 20 years

00:04:16,079 --> 00:04:22,800
wow yeah and it has you know it

00:04:19,680 --> 00:04:25,680
has really changed the ide landscape

00:04:22,800 --> 00:04:26,800
big time for me uh and for i mean for

00:04:25,680 --> 00:04:30,160
all the developers

00:04:26,800 --> 00:04:32,960
um i think i jumped on it on version 1.0

00:04:30,160 --> 00:04:34,800
before that i used netbeans so i i

00:04:32,960 --> 00:04:37,600
started out with java

00:04:34,800 --> 00:04:37,600
back in the days

00:04:38,400 --> 00:04:44,560
and i mean it was you know all

00:04:41,520 --> 00:04:46,320
really decent experience and so

00:04:44,560 --> 00:04:47,840
my first question would be what what

00:04:46,320 --> 00:04:50,479
from your perspective

00:04:47,840 --> 00:04:53,360
are you know the the key things that

00:04:50,479 --> 00:04:57,919
made eclipse successful

00:04:53,360 --> 00:05:00,800
i guess you really promoted the idea

00:04:57,919 --> 00:05:02,320
ides tools have to be extensible right

00:05:00,800 --> 00:05:05,360
and

00:05:02,320 --> 00:05:07,360
eclipse came up what what i still think

00:05:05,360 --> 00:05:09,759
is a nice plug-in model

00:05:07,360 --> 00:05:10,800
right so you declare an extension

00:05:09,759 --> 00:05:13,360
declaratively

00:05:10,800 --> 00:05:16,320
when it clips it in xml but you said

00:05:13,360 --> 00:05:19,120
what the contribution does

00:05:16,320 --> 00:05:20,720
and kind of the tool then does the rest

00:05:19,120 --> 00:05:22,880
right it manages it

00:05:20,720 --> 00:05:24,000
you can't be the command but the tool

00:05:22,880 --> 00:05:26,160
manages it

00:05:24,000 --> 00:05:27,199
and also thanks to this declarative

00:05:26,160 --> 00:05:30,479
description

00:05:27,199 --> 00:05:32,479
the tool can load an extension of demand

00:05:30,479 --> 00:05:34,080
right only when needed and that's

00:05:32,479 --> 00:05:38,000
something that i think is

00:05:34,080 --> 00:05:40,080
still a valid pattern if you want today

00:05:38,000 --> 00:05:41,680
right so that's that's still survived

00:05:40,080 --> 00:05:44,000
having a clear

00:05:41,680 --> 00:05:44,720
model that the at where you describe an

00:05:44,000 --> 00:05:47,919
extension

00:05:44,720 --> 00:05:49,759
and then the tool based on that manages

00:05:47,919 --> 00:05:52,400
the extension without having to give too

00:05:49,759 --> 00:05:54,320
much details of its eternals right

00:05:52,400 --> 00:05:56,160
you don't do a contribution to a ui

00:05:54,320 --> 00:05:58,400
element of the tool you contribute

00:05:56,160 --> 00:06:01,120
something like a command or an editor

00:05:58,400 --> 00:06:01,919
but the tool manages how it's presented

00:06:01,120 --> 00:06:03,520
to the user

00:06:01,919 --> 00:06:06,639
this is still the model we use in vs

00:06:03,520 --> 00:06:08,720
code today

00:06:06,639 --> 00:06:10,160
yeah i mean that yeah that is the you

00:06:08,720 --> 00:06:12,479
know the extensibility part

00:06:10,160 --> 00:06:13,840
and eclipse has become you know really a

00:06:12,479 --> 00:06:16,160
platform for

00:06:13,840 --> 00:06:18,080
all sorts of things like i've been

00:06:16,160 --> 00:06:20,880
working in that community and

00:06:18,080 --> 00:06:22,639
doing consulting basically on eclipse

00:06:20,880 --> 00:06:24,240
right so there were a lot of

00:06:22,639 --> 00:06:26,240
clients who built their products based

00:06:24,240 --> 00:06:26,720
on that and so on so this extensibility

00:06:26,240 --> 00:06:30,400
is

00:06:26,720 --> 00:06:32,400
definitely an important bit but also for

00:06:30,400 --> 00:06:33,680
you know just java developers like for

00:06:32,400 --> 00:06:36,240
you know end users it's just

00:06:33,680 --> 00:06:37,759
the user experience i think you know it

00:06:36,240 --> 00:06:40,880
had a few

00:06:37,759 --> 00:06:45,280
features that were you know changing

00:06:40,880 --> 00:06:48,479
um how we work i think one thing

00:06:45,280 --> 00:06:52,560
um is it's just a decent

00:06:48,479 --> 00:06:53,360
incremental incremental compilation

00:06:52,560 --> 00:06:56,400
stuff

00:06:53,360 --> 00:06:58,720
so i hope yeah that's

00:06:56,400 --> 00:07:00,800
okay that of course came from the

00:06:58,720 --> 00:07:04,479
previous implementation

00:07:00,800 --> 00:07:05,440
of the tool right the first java tool

00:07:04,479 --> 00:07:07,360
that

00:07:05,440 --> 00:07:10,639
the company that got and acquired by

00:07:07,360 --> 00:07:12,160
item did was implement in small talk

00:07:10,639 --> 00:07:14,160
right and small talk is known for

00:07:12,160 --> 00:07:16,639
instrumentality right you

00:07:14,160 --> 00:07:19,039
you write the method you save it and you

00:07:16,639 --> 00:07:20,319
run it even you

00:07:19,039 --> 00:07:22,880
even while you're in the middle of

00:07:20,319 --> 00:07:24,720
debugging it right and this has led to

00:07:22,880 --> 00:07:25,199
this whole mindset from the beginning

00:07:24,720 --> 00:07:28,400
right

00:07:25,199 --> 00:07:31,599
you want to get the same model for java

00:07:28,400 --> 00:07:34,000
as you had for small town right but

00:07:31,599 --> 00:07:36,319
the second iteration was we didn't want

00:07:34,000 --> 00:07:37,759
to use like as a small like a repository

00:07:36,319 --> 00:07:40,080
where everything was stored in kind of

00:07:37,759 --> 00:07:42,400
some database you want to be open for

00:07:40,080 --> 00:07:45,599
files right and eclipse was then

00:07:42,400 --> 00:07:47,280
taking ideas from visual age for java

00:07:45,599 --> 00:07:48,800
was the name right which was implemented

00:07:47,280 --> 00:07:51,759
in small talk

00:07:48,800 --> 00:07:52,720
and bring it over to an all in java

00:07:51,759 --> 00:07:55,280
implemented

00:07:52,720 --> 00:07:57,120
world but incrementality the mindset

00:07:55,280 --> 00:07:58,879
right hot code replace if you remember

00:07:57,120 --> 00:08:02,479
that which eclipse had

00:07:58,879 --> 00:08:05,919
this is just from the genes uh

00:08:02,479 --> 00:08:08,240
of the develops that use small talk

00:08:05,919 --> 00:08:09,680
yeah i mean and i think you know that

00:08:08,240 --> 00:08:13,280
paved the way for these

00:08:09,680 --> 00:08:15,120
very excellent uh java ids i i

00:08:13,280 --> 00:08:16,639
like for java i always thought about

00:08:15,120 --> 00:08:18,960
okay the language is not really

00:08:16,639 --> 00:08:20,400
super convenient so the tools need to

00:08:18,960 --> 00:08:23,599
make up for it

00:08:20,400 --> 00:08:25,360
yeah yeah yeah and

00:08:23,599 --> 00:08:27,199
uh i mean i think yeah eclipse

00:08:25,360 --> 00:08:30,879
contributed a lot to this

00:08:27,199 --> 00:08:34,240
uh to this path right

00:08:30,879 --> 00:08:37,279
this also has downsize i i think uh it's

00:08:34,240 --> 00:08:40,640
generally something that the java world

00:08:37,279 --> 00:08:41,839
maybe is a bit tool heavy i think or has

00:08:40,640 --> 00:08:44,959
been in the past it

00:08:41,839 --> 00:08:46,640
became a bit more lean and um

00:08:44,959 --> 00:08:49,600
and you know there were also some

00:08:46,640 --> 00:08:51,519
perceptions for eclipse over the years

00:08:49,600 --> 00:08:53,279
they you know it became a bit bloated

00:08:51,519 --> 00:08:56,080
and so on um

00:08:53,279 --> 00:08:57,120
what are some of the design decisions

00:08:56,080 --> 00:08:59,279
you look at

00:08:57,120 --> 00:09:00,320
in in eclipse that you would kind of

00:08:59,279 --> 00:09:03,279
regret or would

00:09:00,320 --> 00:09:03,680
would change or do differently i think

00:09:03,279 --> 00:09:05,920
you know

00:09:03,680 --> 00:09:08,000
at the time we made it i think we did it

00:09:05,920 --> 00:09:09,920
all all right but when we look

00:09:08,000 --> 00:09:11,839
back then what we learned then it would

00:09:09,920 --> 00:09:13,760
change things right

00:09:11,839 --> 00:09:15,120
that's why we did things different in

00:09:13,760 --> 00:09:18,320
nbs code

00:09:15,120 --> 00:09:21,680
and one lesson was no

00:09:18,320 --> 00:09:23,519
our life as eclipse platform developers

00:09:21,680 --> 00:09:25,920
would have been so much easier

00:09:23,519 --> 00:09:28,720
if extensions just don't run in the same

00:09:25,920 --> 00:09:31,760
process as the tool

00:09:28,720 --> 00:09:33,760
right eclipse you had uh java implants

00:09:31,760 --> 00:09:36,080
java lag implantation language

00:09:33,760 --> 00:09:37,760
java provided you support in a nice way

00:09:36,080 --> 00:09:39,920
to dynamically low code in the same

00:09:37,760 --> 00:09:41,120
address space right get class loaders

00:09:39,920 --> 00:09:44,160
all the things

00:09:41,120 --> 00:09:46,399
which was beautiful right but

00:09:44,160 --> 00:09:47,680
what they underestimate that is just the

00:09:46,399 --> 00:09:49,360
side effect that the

00:09:47,680 --> 00:09:50,880
extensions can have when they're on in

00:09:49,360 --> 00:09:53,680
the same address space right

00:09:50,880 --> 00:09:54,320
they can make startups slow they can

00:09:53,680 --> 00:09:56,320
make

00:09:54,320 --> 00:09:58,880
that you don't save that you can save

00:09:56,320 --> 00:10:01,279
because it's in the same process if an

00:09:58,880 --> 00:10:03,120
extension runs amok right i cannot press

00:10:01,279 --> 00:10:06,079
save anymore

00:10:03,120 --> 00:10:07,760
and i think the mindset just to load

00:10:06,079 --> 00:10:09,680
everything in the same process

00:10:07,760 --> 00:10:12,160
almost implied you have to write

00:10:09,680 --> 00:10:14,480
everything in java

00:10:12,160 --> 00:10:15,920
which in retrospect right is a bit of a

00:10:14,480 --> 00:10:17,360
handicap when you think of different

00:10:15,920 --> 00:10:20,399
language support right

00:10:17,360 --> 00:10:23,600
so you don't want to to write a

00:10:20,399 --> 00:10:25,120
c plus extension in java

00:10:23,600 --> 00:10:26,640
which actually my team did actually

00:10:25,120 --> 00:10:28,959
someone from my team did the first c

00:10:26,640 --> 00:10:30,560
plus things that all in java that would

00:10:28,959 --> 00:10:33,120
be much nicer if you have

00:10:30,560 --> 00:10:35,120
if you are more open you can do the

00:10:33,120 --> 00:10:35,920
tools you want to implement the language

00:10:35,120 --> 00:10:38,320
and not be

00:10:35,920 --> 00:10:41,120
constrained by having run everything in

00:10:38,320 --> 00:10:42,560
a jar on top of a java runtime

00:10:41,120 --> 00:10:44,640
in hindsight right you could have done

00:10:42,560 --> 00:10:46,240
it for eclipse as well right and today

00:10:44,640 --> 00:10:48,240
you see eclipse can

00:10:46,240 --> 00:10:50,399
consume language service and so on it

00:10:48,240 --> 00:10:53,120
was just the mindset was

00:10:50,399 --> 00:10:54,079
everything gets loaded into the same

00:10:53,120 --> 00:10:55,839
process

00:10:54,079 --> 00:10:58,320
and of course that's the fastest way to

00:10:55,839 --> 00:11:01,680
integrate right no ipc nothing

00:10:58,320 --> 00:11:03,200
but today as you see with vs code ipc

00:11:01,680 --> 00:11:05,680
and rpc is just not

00:11:03,200 --> 00:11:07,680
not a problem right and we we chase and

00:11:05,680 --> 00:11:08,160
stringify stuff and it's still fast

00:11:07,680 --> 00:11:09,839
enough

00:11:08,160 --> 00:11:11,839
right when you imagine right i press

00:11:09,839 --> 00:11:13,519
ctrl space

00:11:11,839 --> 00:11:14,959
something goes out to another process

00:11:13,519 --> 00:11:17,120
and the results come back

00:11:14,959 --> 00:11:18,399
as a big json file which again parse and

00:11:17,120 --> 00:11:20,320
show them

00:11:18,399 --> 00:11:22,399
and just we had this mindset you have to

00:11:20,320 --> 00:11:24,560
run in the same process you know a

00:11:22,399 --> 00:11:25,600
function call is so much more efficient

00:11:24,560 --> 00:11:28,959
than an ipc

00:11:25,600 --> 00:11:31,519
call but it was a lot of protection

00:11:28,959 --> 00:11:33,360
for you as a platform right so you got

00:11:31,519 --> 00:11:35,040
hammered eclipse is slow

00:11:33,360 --> 00:11:37,360
also because you're running the startup

00:11:35,040 --> 00:11:38,880
is low right or another thing is no

00:11:37,360 --> 00:11:40,560
you cannot protect your internal

00:11:38,880 --> 00:11:42,880
implementation because you're under the

00:11:40,560 --> 00:11:43,600
same address space someone can reach to

00:11:42,880 --> 00:11:46,640
you and call

00:11:43,600 --> 00:11:49,519
the function which is not api right

00:11:46,640 --> 00:11:50,800
and if it's a a product like an ibm

00:11:49,519 --> 00:11:53,040
product that does it

00:11:50,800 --> 00:11:55,040
and then you change it and break them

00:11:53,040 --> 00:11:56,639
then it's pretty stressful for a

00:11:55,040 --> 00:11:58,399
platform developed because they come and

00:11:56,639 --> 00:11:59,279
say hey you broke us you cannot change

00:11:58,399 --> 00:12:00,800
that

00:11:59,279 --> 00:12:02,480
but if you think further right this

00:12:00,800 --> 00:12:04,079
basically handcuffs you you can't do

00:12:02,480 --> 00:12:05,760
anything

00:12:04,079 --> 00:12:07,519
if you cannot change your internals for

00:12:05,760 --> 00:12:10,320
that reason

00:12:07,519 --> 00:12:12,079
i think this single process architecture

00:12:10,320 --> 00:12:14,240
of eclipse

00:12:12,079 --> 00:12:17,760
is something you really want to change

00:12:14,240 --> 00:12:17,760
as you move to yes code

00:12:18,160 --> 00:12:24,399
okay yeah so the you know talking about

00:12:21,279 --> 00:12:26,480
the difference about between eclipse and

00:12:24,399 --> 00:12:29,040
vs code and the extension model

00:12:26,480 --> 00:12:30,000
um yeah and that is one one clear

00:12:29,040 --> 00:12:33,040
difference

00:12:30,000 --> 00:12:36,639
and then this process and communication

00:12:33,040 --> 00:12:40,399
over json rpc that vs code does

00:12:36,639 --> 00:12:43,360
uh the separation i mean it also helps

00:12:40,399 --> 00:12:45,040
really what you just said with um having

00:12:43,360 --> 00:12:48,480
a stable api

00:12:45,040 --> 00:12:51,200
surface and not allowing others like

00:12:48,480 --> 00:12:52,639
you know to to go and and call any

00:12:51,200 --> 00:12:55,839
internal apis

00:12:52,639 --> 00:12:59,440
which you know which is a compromise

00:12:55,839 --> 00:13:02,240
for for some it is

00:12:59,440 --> 00:13:02,800
you know you only have this api and you

00:13:02,240 --> 00:13:05,440
try to

00:13:02,800 --> 00:13:06,320
shoehorn everything into into into into

00:13:05,440 --> 00:13:09,519
it

00:13:06,320 --> 00:13:10,800
and but of course for the maintainer and

00:13:09,519 --> 00:13:12,959
for the vs co team

00:13:10,800 --> 00:13:14,320
this is obviously makes makes the job

00:13:12,959 --> 00:13:17,839
much much simpler

00:13:14,320 --> 00:13:20,720
and i would say also for for a user

00:13:17,839 --> 00:13:23,360
in terms of discoverability it is much

00:13:20,720 --> 00:13:26,399
simpler to understand what can i do

00:13:23,360 --> 00:13:28,320
by looking at one api file that is

00:13:26,399 --> 00:13:30,320
currently like it is very long but

00:13:28,320 --> 00:13:31,440
you know i have one place where i can

00:13:30,320 --> 00:13:33,839
look at

00:13:31,440 --> 00:13:36,000
what's available what can i do you're

00:13:33,839 --> 00:13:36,800
folding right in it's long you can fold

00:13:36,000 --> 00:13:40,480
right there

00:13:36,800 --> 00:13:41,040
yeah right but it is like it is a single

00:13:40,480 --> 00:13:44,480
place

00:13:41,040 --> 00:13:46,480
rather than the eclipse architecture is

00:13:44,480 --> 00:13:48,079
more like you know everything is a

00:13:46,480 --> 00:13:50,639
plug-in and

00:13:48,079 --> 00:13:52,480
you you would just look around and see

00:13:50,639 --> 00:13:53,600
what what kind of extension points does

00:13:52,480 --> 00:13:57,040
this plug-in

00:13:53,600 --> 00:14:00,560
expose and what can i use which also

00:13:57,040 --> 00:14:02,720
um you know results in a network

00:14:00,560 --> 00:14:04,000
of dependencies with different version

00:14:02,720 --> 00:14:07,040
constraints and so on

00:14:04,000 --> 00:14:10,560
um which is very complex and

00:14:07,040 --> 00:14:12,480
so i rarely see with vs code you know

00:14:10,560 --> 00:14:15,360
big issues with version constraints and

00:14:12,480 --> 00:14:15,360
so on why is that

00:14:15,440 --> 00:14:20,480
well okay i think

00:14:18,639 --> 00:14:22,160
what you mentioned right there is these

00:14:20,480 --> 00:14:23,760
two modularity

00:14:22,160 --> 00:14:25,600
approaches right one is the one from

00:14:23,760 --> 00:14:26,480
eclipse everything is a plug-in and

00:14:25,600 --> 00:14:28,720
basically

00:14:26,480 --> 00:14:30,639
the modularity of a plug-in is the same

00:14:28,720 --> 00:14:32,800
as you structured the system right so

00:14:30,639 --> 00:14:34,959
you have uh

00:14:32,800 --> 00:14:37,360
packages public packages private

00:14:34,959 --> 00:14:40,480
packages right so it's uh

00:14:37,360 --> 00:14:42,800
you're very close to the implementation

00:14:40,480 --> 00:14:44,160
in a way right so the way that vs code

00:14:42,800 --> 00:14:47,120
is implemented

00:14:44,160 --> 00:14:49,040
shines through to the api because we

00:14:47,120 --> 00:14:51,839
just exposed the plugins and

00:14:49,040 --> 00:14:52,560
and their apis right and that was

00:14:51,839 --> 00:14:54,720
something

00:14:52,560 --> 00:14:56,560
we wanted to change right you want to

00:14:54,720 --> 00:14:59,600
say

00:14:56,560 --> 00:15:00,959
we want to keep extension authoring very

00:14:59,600 --> 00:15:03,680
simple

00:15:00,959 --> 00:15:05,120
and we found like vs code internally is

00:15:03,680 --> 00:15:06,800
very similar to eclipse right

00:15:05,120 --> 00:15:08,959
it's based on components you have

00:15:06,800 --> 00:15:11,920
service injection and all this

00:15:08,959 --> 00:15:13,199
magic right but we start for extension

00:15:11,920 --> 00:15:15,279
authors

00:15:13,199 --> 00:15:16,560
but the hurdle is too much right so you

00:15:15,279 --> 00:15:18,399
don't want that to have to deal with

00:15:16,560 --> 00:15:20,639
service injection

00:15:18,399 --> 00:15:21,519
and that's why we said we want to really

00:15:20,639 --> 00:15:24,720
have a

00:15:21,519 --> 00:15:26,959
designed api from the ground up

00:15:24,720 --> 00:15:28,240
which typescript allows us to nicely

00:15:26,959 --> 00:15:31,120
describe

00:15:28,240 --> 00:15:32,560
right and then build on that and also

00:15:31,120 --> 00:15:34,399
given that we're on

00:15:32,560 --> 00:15:36,560
extension and separate process it's

00:15:34,399 --> 00:15:37,839
pretty natural right that then this api

00:15:36,560 --> 00:15:41,440
becomes basically the

00:15:37,839 --> 00:15:44,639
rpc between the core and the process

00:15:41,440 --> 00:15:49,040
that runs the extensions

00:15:44,639 --> 00:15:51,000
so uh we we extensions have a version

00:15:49,040 --> 00:15:52,720
but we don't allow the decan

00:15:51,000 --> 00:15:55,680
dependencies

00:15:52,720 --> 00:15:56,800
on a particular version of an extension

00:15:55,680 --> 00:15:58,800
right so that's just

00:15:56,800 --> 00:16:00,959
something we don't support and it wasn't

00:15:58,800 --> 00:16:02,560
a problem up to now

00:16:00,959 --> 00:16:04,639
based on the thing we want to move

00:16:02,560 --> 00:16:07,120
forward right we want that in ex

00:16:04,639 --> 00:16:09,440
that extensions always get auto updated

00:16:07,120 --> 00:16:11,360
and move forward with vs code

00:16:09,440 --> 00:16:13,360
right we don't want that all of a sudden

00:16:11,360 --> 00:16:16,079
ext an extension can say but i

00:16:13,360 --> 00:16:16,560
depend on other extent that monopolizes

00:16:16,079 --> 00:16:18,800
that

00:16:16,560 --> 00:16:19,680
so we kept the model that really is

00:16:18,800 --> 00:16:23,360
based on

00:16:19,680 --> 00:16:24,079
the update to the latest and you cannot

00:16:23,360 --> 00:16:26,880
basically

00:16:24,079 --> 00:16:27,440
constrain right so that's you always

00:16:26,880 --> 00:16:29,839
have to

00:16:27,440 --> 00:16:32,320
move forward and you can still express

00:16:29,839 --> 00:16:33,440
an api dependency version but the api

00:16:32,320 --> 00:16:36,720
dependency

00:16:33,440 --> 00:16:38,240
is on the whole api right it's not on a

00:16:36,720 --> 00:16:40,880
subset of the api

00:16:38,240 --> 00:16:42,399
like if you in vs code you define kind

00:16:40,880 --> 00:16:44,560
of the engine version

00:16:42,399 --> 00:16:45,920
which is basically the api version of

00:16:44,560 --> 00:16:48,839
escort core

00:16:45,920 --> 00:16:51,519
and that simplifies things dramatically

00:16:48,839 --> 00:16:52,800
um support than an extension can you

00:16:51,519 --> 00:16:54,880
poke expose api

00:16:52,800 --> 00:16:58,160
and some of our extensions do it like

00:16:54,880 --> 00:17:01,360
the git extension exposes api and so on

00:16:58,160 --> 00:17:02,000
but yeah typically it's just much

00:17:01,360 --> 00:17:04,880
simpler

00:17:02,000 --> 00:17:05,679
right which also means it's not as

00:17:04,880 --> 00:17:08,240
powerful

00:17:05,679 --> 00:17:10,079
as eclipse right because in eclipse if

00:17:08,240 --> 00:17:12,480
the same modularity

00:17:10,079 --> 00:17:15,199
to extension authors they have the same

00:17:12,480 --> 00:17:17,120
power as the eclipse authors

00:17:15,199 --> 00:17:18,880
which in vs code is not the case it was

00:17:17,120 --> 00:17:22,000
intentional not the case

00:17:18,880 --> 00:17:25,360
because he wanted to have more control

00:17:22,000 --> 00:17:26,720
of the core and kind of more separation

00:17:25,360 --> 00:17:28,640
between extensions

00:17:26,720 --> 00:17:30,000
and the core right this was just this

00:17:28,640 --> 00:17:31,919
lesson learned

00:17:30,000 --> 00:17:35,520
you want to protect the core from

00:17:31,919 --> 00:17:37,520
extension as much as possible

00:17:35,520 --> 00:17:38,640
which also means for us we have a

00:17:37,520 --> 00:17:41,200
pressure right

00:17:38,640 --> 00:17:43,280
we have to continuously make the api

00:17:41,200 --> 00:17:45,039
more powerful the nicely designed api

00:17:43,280 --> 00:17:46,880
right you call it guys as the main api

00:17:45,039 --> 00:17:48,640
as you said this one api

00:17:46,880 --> 00:17:49,919
we have to continuously involve make it

00:17:48,640 --> 00:17:53,520
more powerful

00:17:49,919 --> 00:17:56,240
that you can do as powerful things

00:17:53,520 --> 00:17:57,679
with this api as we can do in the core

00:17:56,240 --> 00:17:59,280
implementation

00:17:57,679 --> 00:18:01,039
right so the pressure is there and if

00:17:59,280 --> 00:18:02,880
you look at what we did over the last

00:18:01,039 --> 00:18:04,000
five years you have continuously invest

00:18:02,880 --> 00:18:06,240
in api

00:18:04,000 --> 00:18:08,000
make more powerful like custom editors

00:18:06,240 --> 00:18:09,600
right you can now define your own editor

00:18:08,000 --> 00:18:12,640
which doesn't have to be a

00:18:09,600 --> 00:18:13,679
text editor and that's all based on on

00:18:12,640 --> 00:18:17,120
this desire

00:18:13,679 --> 00:18:19,919
of getting on par with the model

00:18:17,120 --> 00:18:20,320
where everybody can see the same as uh

00:18:19,919 --> 00:18:24,799
as

00:18:20,320 --> 00:18:29,200
the tool authors that's through the api

00:18:24,799 --> 00:18:31,440
right mm-hmm

00:18:29,200 --> 00:18:33,039
i clearly see that but i i also think

00:18:31,440 --> 00:18:35,039
like this limitation is a good thing

00:18:33,039 --> 00:18:38,240
because it narrows the scope

00:18:35,039 --> 00:18:40,160
of what vs code is for if you know

00:18:38,240 --> 00:18:43,120
comparing it with eclipse again

00:18:40,160 --> 00:18:44,799
eclipse has become more than just an ide

00:18:43,120 --> 00:18:45,200
over the years it has become you know

00:18:44,799 --> 00:18:48,240
this

00:18:45,200 --> 00:18:49,280
rcp framework running anything the worst

00:18:48,240 --> 00:18:52,000
thing on earth right

00:18:49,280 --> 00:18:53,760
how can you think that an id platform

00:18:52,000 --> 00:18:55,840
can be good be a good application

00:18:53,760 --> 00:18:59,200
platform right fewer

00:18:55,840 --> 00:19:02,160
application developers right

00:18:59,200 --> 00:19:02,799
yeah but it has been possible and so

00:19:02,160 --> 00:19:05,840
because

00:19:02,799 --> 00:19:07,200
everything is was so generic and then it

00:19:05,840 --> 00:19:09,360
was even you know there was

00:19:07,200 --> 00:19:10,320
forces making it even more generic

00:19:09,360 --> 00:19:12,960
because we wanted to

00:19:10,320 --> 00:19:14,400
support this and that and then out of a

00:19:12,960 --> 00:19:16,640
sudden a product or

00:19:14,400 --> 00:19:17,760
is the code base can do all the things

00:19:16,640 --> 00:19:21,520
instead of being

00:19:17,760 --> 00:19:24,559
focused on just you know being an ide

00:19:21,520 --> 00:19:27,440
and so to that end i think

00:19:24,559 --> 00:19:29,360
you know this is yeah it is a deliberate

00:19:27,440 --> 00:19:30,559
decision for vs code and i i think it

00:19:29,360 --> 00:19:34,080
makes sense to

00:19:30,559 --> 00:19:36,000
you know ex extend the life span

00:19:34,080 --> 00:19:38,320
of of it because you know software

00:19:36,000 --> 00:19:38,960
system has its natural tendency to grow

00:19:38,320 --> 00:19:42,160
and grow

00:19:38,960 --> 00:19:43,840
and grow you don't remove things

00:19:42,160 --> 00:19:46,000
i mean talking about that what do you do

00:19:43,840 --> 00:19:46,320
about this like you just said you you

00:19:46,000 --> 00:19:49,600
add

00:19:46,320 --> 00:19:51,840
apis all the time

00:19:49,600 --> 00:19:53,120
apis you had all the time to make more

00:19:51,840 --> 00:19:56,320
powerful extensions

00:19:53,120 --> 00:19:59,600
right so that the idea is

00:19:56,320 --> 00:20:01,440
the added functions should come through

00:19:59,600 --> 00:20:04,559
extensions and not in the core

00:20:01,440 --> 00:20:05,760
right so with extensions you can turn vs

00:20:04,559 --> 00:20:09,280
code which is an editor

00:20:05,760 --> 00:20:11,840
into an ide like vs code the core itself

00:20:09,280 --> 00:20:12,559
should not be an ide right but you want

00:20:11,840 --> 00:20:14,720
to enable

00:20:12,559 --> 00:20:17,919
that if you really want through

00:20:14,720 --> 00:20:20,320
extensions you can build an ide

00:20:17,919 --> 00:20:22,640
over then we also try to stick to our

00:20:20,320 --> 00:20:24,320
values right and our values are out of

00:20:22,640 --> 00:20:27,520
the box vs code isn't

00:20:24,320 --> 00:20:28,640
fast lightweight editor we care a lot

00:20:27,520 --> 00:20:30,400
about performance

00:20:28,640 --> 00:20:31,760
right so startup performance we don't

00:20:30,400 --> 00:20:33,520
only care we measure

00:20:31,760 --> 00:20:34,960
right we continuously measure our

00:20:33,520 --> 00:20:37,280
startup performance

00:20:34,960 --> 00:20:39,200
that helps us also with the bloat right

00:20:37,280 --> 00:20:40,400
less less code execute on startup is a

00:20:39,200 --> 00:20:43,520
good thing

00:20:40,400 --> 00:20:44,240
but then we really want to outsource a

00:20:43,520 --> 00:20:46,080
lot of the

00:20:44,240 --> 00:20:48,480
features and functionality into

00:20:46,080 --> 00:20:50,799
extensions right and be careful

00:20:48,480 --> 00:20:52,000
to not just bundle lots of stuff into

00:20:50,799 --> 00:20:54,400
the core

00:20:52,000 --> 00:20:56,400
to make it more and more fat of course

00:20:54,400 --> 00:20:58,480
figaro it's amazing how much code

00:20:56,400 --> 00:21:00,080
a team of 20 developers can produce

00:20:58,480 --> 00:21:02,320
right if you see the graph

00:21:00,080 --> 00:21:03,679
yeah that's how it is but the

00:21:02,320 --> 00:21:05,840
performance focus

00:21:03,679 --> 00:21:07,520
gives me confidence right that we have

00:21:05,840 --> 00:21:10,000
some

00:21:07,520 --> 00:21:10,799
some uh some probes right that we know

00:21:10,000 --> 00:21:14,000
where it's really

00:21:10,799 --> 00:21:16,080
go bad and so far startup

00:21:14,000 --> 00:21:19,039
we keep the performance even though we

00:21:16,080 --> 00:21:19,039
evolve and grow

00:21:20,480 --> 00:21:24,400
i wish i had a clear and simple solution

00:21:23,919 --> 00:21:26,240
to that

00:21:24,400 --> 00:21:28,320
but it's continuous engineering right

00:21:26,240 --> 00:21:31,760
that's i guess all i can say

00:21:28,320 --> 00:21:32,240
it is yeah probably also staying true to

00:21:31,760 --> 00:21:35,600
your

00:21:32,240 --> 00:21:38,159
initial focus the values um

00:21:35,600 --> 00:21:39,200
and being good at saying no and

00:21:38,159 --> 00:21:43,440
externalizing

00:21:39,200 --> 00:21:43,440
certain things yeah yeah

00:21:43,520 --> 00:21:47,520
yeah it's hard but i think that's a

00:21:45,440 --> 00:21:49,200
dilemma that every software engineer has

00:21:47,520 --> 00:21:50,720
actually because we all work on these

00:21:49,200 --> 00:21:52,960
you know tools and

00:21:50,720 --> 00:21:54,720
but also what i think of a multi-process

00:21:52,960 --> 00:21:57,760
architecture

00:21:54,720 --> 00:22:00,000
is less vulnerable to below than a

00:21:57,760 --> 00:22:02,320
single process architecture

00:22:00,000 --> 00:22:05,039
right given that we run singing language

00:22:02,320 --> 00:22:08,559
servers in a separate process and so on

00:22:05,039 --> 00:22:10,720
right then it's it's more

00:22:08,559 --> 00:22:12,000
distributed across multiple process not

00:22:10,720 --> 00:22:13,600
just one monster

00:22:12,000 --> 00:22:15,840
in the middle you really have it more

00:22:13,600 --> 00:22:16,880
balanced right and one funny story was

00:22:15,840 --> 00:22:18,799
kind of

00:22:16,880 --> 00:22:20,640
somebody that wasn't aware that the vs

00:22:18,799 --> 00:22:22,240
code is a multi-process architecture you

00:22:20,640 --> 00:22:24,320
just you look at in windows

00:22:22,240 --> 00:22:27,120
task management so the memory footprint

00:22:24,320 --> 00:22:28,480
of vs code right very impressive how

00:22:27,120 --> 00:22:31,520
small it is

00:22:28,480 --> 00:22:32,880
and of course me i was receiving yes but

00:22:31,520 --> 00:22:35,840
you have more than one process

00:22:32,880 --> 00:22:37,919
right and if you add them up then yeah

00:22:35,840 --> 00:22:39,600
look at that java language server

00:22:37,919 --> 00:22:41,760
your languages need memory right the

00:22:39,600 --> 00:22:42,159
language it's memory asts right they're

00:22:41,760 --> 00:22:44,640
not

00:22:42,159 --> 00:22:46,640
there are these which require memory and

00:22:44,640 --> 00:22:49,600
yeah but we don't have those

00:22:46,640 --> 00:22:51,440
in the core so this helps us to keep

00:22:49,600 --> 00:22:52,799
lean right because we come up with the

00:22:51,440 --> 00:22:55,120
lean core

00:22:52,799 --> 00:22:56,480
and then extensions get loaded which

00:22:55,120 --> 00:22:58,799
which helps us also

00:22:56,480 --> 00:22:59,919
right yeah i mean the language server

00:22:58,799 --> 00:23:01,679
protocol

00:22:59,919 --> 00:23:03,840
as well as the debug adapter protocol

00:23:01,679 --> 00:23:07,360
they are really you know

00:23:03,840 --> 00:23:10,720
very important steps i think um

00:23:07,360 --> 00:23:14,480
you know making it possible to stop

00:23:10,720 --> 00:23:16,559
working on on as you said before a c

00:23:14,480 --> 00:23:17,919
plus plus language implementation in

00:23:16,559 --> 00:23:19,919
java which

00:23:17,919 --> 00:23:21,840
doesn't make sense and then another one

00:23:19,919 --> 00:23:22,880
maybe in javascript or a typescript or

00:23:21,840 --> 00:23:25,919
whatnot

00:23:22,880 --> 00:23:28,720
um when you when you designed this uh

00:23:25,919 --> 00:23:31,200
came up with the idea of these protocols

00:23:28,720 --> 00:23:31,200
did you

00:23:31,280 --> 00:23:34,559
think about you know that this would

00:23:33,760 --> 00:23:36,960
maybe be

00:23:34,559 --> 00:23:38,480
universal applicable or is that somehow

00:23:36,960 --> 00:23:42,000
important to you that idea

00:23:38,480 --> 00:23:42,640
no this was remember vs code came out

00:23:42,000 --> 00:23:44,960
basically

00:23:42,640 --> 00:23:46,640
late in the game right there was sublime

00:23:44,960 --> 00:23:50,000
there was admin

00:23:46,640 --> 00:23:53,520
and they provided what an editor does

00:23:50,000 --> 00:23:55,200
coloring and so on right so we said okay

00:23:53,520 --> 00:23:57,120
we're late to the game

00:23:55,200 --> 00:23:58,480
how can you be a player right so well

00:23:57,120 --> 00:24:00,320
you have to add value

00:23:58,480 --> 00:24:02,720
and one of the value is to go beyond

00:24:00,320 --> 00:24:05,440
syntax coloring

00:24:02,720 --> 00:24:06,880
but then you also acknowledge right so

00:24:05,440 --> 00:24:10,159
we are a small niche player

00:24:06,880 --> 00:24:13,039
how can we get other language

00:24:10,159 --> 00:24:15,039
providers implement the support if it's

00:24:13,039 --> 00:24:16,640
just for vs code it's not appealing

00:24:15,039 --> 00:24:18,320
so from the beginning you want to be

00:24:16,640 --> 00:24:19,360
open right by having the language so

00:24:18,320 --> 00:24:22,320
protocol

00:24:19,360 --> 00:24:22,960
and other editor another tool can also

00:24:22,320 --> 00:24:25,840
benefit

00:24:22,960 --> 00:24:27,200
from the language brains implementing in

00:24:25,840 --> 00:24:28,640
a language server

00:24:27,200 --> 00:24:31,679
so from the beginning you wanted to be

00:24:28,640 --> 00:24:34,559
open openness was important right

00:24:31,679 --> 00:24:36,799
yeah which is consistent with our water

00:24:34,559 --> 00:24:40,640
approach right transparency and openness

00:24:36,799 --> 00:24:43,760
that's what yeah e-values

00:24:40,640 --> 00:24:46,880
yeah i mean that has been the the key

00:24:43,760 --> 00:24:49,039
success indicator for editors or ides

00:24:46,880 --> 00:24:50,880
and an ecosystem a diverse ecosystem

00:24:49,039 --> 00:24:54,640
where the whole community would you know

00:24:50,880 --> 00:24:56,320
build on stuff uh and on extensions and

00:24:54,640 --> 00:24:59,679
so on

00:24:56,320 --> 00:25:02,480
um and yeah so you you

00:24:59,679 --> 00:25:05,120
you wanted to make it very easy for

00:25:02,480 --> 00:25:08,880
existing language implementations to

00:25:05,120 --> 00:25:09,600
hook them up with vs code today it looks

00:25:08,880 --> 00:25:13,279
more like

00:25:09,600 --> 00:25:15,679
you know everyone implements their

00:25:13,279 --> 00:25:17,120
um language implementations behind the

00:25:15,679 --> 00:25:18,640
language server protocol or

00:25:17,120 --> 00:25:20,400
you know when at least when you start

00:25:18,640 --> 00:25:22,799
now you should do that

00:25:20,400 --> 00:25:23,919
and and then you can reuse that in other

00:25:22,799 --> 00:25:28,159
ides right

00:25:23,919 --> 00:25:30,080
so um is there

00:25:28,159 --> 00:25:32,400
is there some like how do you manage

00:25:30,080 --> 00:25:34,720
this process basically that

00:25:32,400 --> 00:25:36,080
um i mean you know you don't want to

00:25:34,720 --> 00:25:38,320
over abstract i guess

00:25:36,080 --> 00:25:41,039
ids are also different somewhat you know

00:25:38,320 --> 00:25:44,080
some content assist might have different

00:25:41,039 --> 00:25:45,760
information and i guess there is demand

00:25:44,080 --> 00:25:48,240
from other editors

00:25:45,760 --> 00:25:50,080
regarding the language server protocol

00:25:48,240 --> 00:25:52,880
that's that's a challenge right so

00:25:50,080 --> 00:25:56,000
to find the the common ground between

00:25:52,880 --> 00:25:58,880
different editor hosts if you want

00:25:56,000 --> 00:26:00,000
and the way how he designed the protocol

00:25:58,880 --> 00:26:02,720
actually has maintained it's

00:26:00,000 --> 00:26:04,320
mostly mullet dirk the formula is mostly

00:26:02,720 --> 00:26:05,200
the he's he's the specifier of the

00:26:04,320 --> 00:26:07,440
protocol

00:26:05,200 --> 00:26:09,200
and of course the input comes from the

00:26:07,440 --> 00:26:11,200
vs code extension api

00:26:09,200 --> 00:26:12,640
right that's the first level of

00:26:11,200 --> 00:26:14,640
experience where we had it

00:26:12,640 --> 00:26:16,720
and then of course we can abstract it

00:26:14,640 --> 00:26:17,840
further and one idea of the vs code

00:26:16,720 --> 00:26:21,360
language api

00:26:17,840 --> 00:26:24,240
is that based on on data provider

00:26:21,360 --> 00:26:25,279
right so the the model extension model

00:26:24,240 --> 00:26:28,000
is

00:26:25,279 --> 00:26:29,200
as an extension author all you do is you

00:26:28,000 --> 00:26:32,720
provide data

00:26:29,200 --> 00:26:34,720
that then the tool consumes right like

00:26:32,720 --> 00:26:36,559
there's a completion provider right

00:26:34,720 --> 00:26:38,880
that's in the api

00:26:36,559 --> 00:26:40,880
the completion provider is in charge

00:26:38,880 --> 00:26:43,360
give me the completion items which is

00:26:40,880 --> 00:26:44,320
data right gets it back and then it's

00:26:43,360 --> 00:26:46,720
managed again

00:26:44,320 --> 00:26:48,640
by escort code so this gives us some

00:26:46,720 --> 00:26:49,440
level of confidence right that that this

00:26:48,640 --> 00:26:53,760
data

00:26:49,440 --> 00:26:55,679
model really helps us and then lsp

00:26:53,760 --> 00:26:58,159
defines the corresponding protocol on

00:26:55,679 --> 00:26:59,760
that we usually always try to first have

00:26:58,159 --> 00:27:03,120
an implementation

00:26:59,760 --> 00:27:06,000
in the vs code extension api and then we

00:27:03,120 --> 00:27:07,120
abstract it in lsp that's a principle

00:27:06,000 --> 00:27:09,279
that turkey

00:27:07,120 --> 00:27:11,760
uses and always reminds me of right

00:27:09,279 --> 00:27:14,640
there because otherwise we want to know

00:27:11,760 --> 00:27:14,640
that they emerge

00:27:15,600 --> 00:27:20,480
yeah makes sense regarding the extension

00:27:19,600 --> 00:27:22,799
model

00:27:20,480 --> 00:27:24,640
um you know we we talked about they are

00:27:22,799 --> 00:27:28,559
different between eclipse and

00:27:24,640 --> 00:27:31,760
and vs code very different actually um

00:27:28,559 --> 00:27:33,760
do you think it it eclipse would have

00:27:31,760 --> 00:27:35,200
been more successful if that is

00:27:33,760 --> 00:27:37,919
important at all i don't know

00:27:35,200 --> 00:27:40,399
um with with an extension model like vs

00:27:37,919 --> 00:27:43,360
code has now

00:27:40,399 --> 00:27:45,279
i to me it's more like a generational

00:27:43,360 --> 00:27:47,760
thing right so the

00:27:45,279 --> 00:27:49,760
eclipse is kind of some first class

00:27:47,760 --> 00:27:51,360
model and with vscope we could benefit

00:27:49,760 --> 00:27:52,880
from all these experiments and build the

00:27:51,360 --> 00:27:54,799
second

00:27:52,880 --> 00:27:56,640
generation of an extension model right

00:27:54,799 --> 00:27:58,000
which makes it very easy for extension

00:27:56,640 --> 00:28:01,520
authors and also

00:27:58,000 --> 00:28:03,440
we have lots more small extensions right

00:28:01,520 --> 00:28:05,440
in the marketplace and just when i look

00:28:03,440 --> 00:28:07,360
at the numbers and i just did that

00:28:05,440 --> 00:28:10,000
before because and i know you want to

00:28:07,360 --> 00:28:12,240
talk about extensions i saw in i think

00:28:10,000 --> 00:28:13,840
in the eclipse marketplace you find 2000

00:28:12,240 --> 00:28:16,559
extensions

00:28:13,840 --> 00:28:17,840
in the vs code marketplace you find 25

00:28:16,559 --> 00:28:20,880
000 right

00:28:17,840 --> 00:28:23,840
so in a way with this model i think

00:28:20,880 --> 00:28:25,600
we had success but eclipse could have

00:28:23,840 --> 00:28:26,640
had the same success with that i don't

00:28:25,600 --> 00:28:30,240
know

00:28:26,640 --> 00:28:32,880
right yeah i mean

00:28:30,240 --> 00:28:34,080
if quantity is an indicator for that i

00:28:32,880 --> 00:28:35,600
understand it's a long kind of

00:28:34,080 --> 00:28:37,360
extensions i told you

00:28:35,600 --> 00:28:39,120
right there's a long philip extensions

00:28:37,360 --> 00:28:40,240
and of course the 100 most popular

00:28:39,120 --> 00:28:43,600
extensions

00:28:40,240 --> 00:28:46,640
they right you know the curve right um

00:28:43,600 --> 00:28:49,120
yeah yeah it's not the only thing but

00:28:46,640 --> 00:28:51,440
the extents have to be high quality

00:28:49,120 --> 00:28:52,559
and the better the platform is the

00:28:51,440 --> 00:28:54,240
better

00:28:52,559 --> 00:28:56,320
the quality of the extensions right

00:28:54,240 --> 00:28:58,480
that's what also sums that in mind

00:28:56,320 --> 00:29:01,440
as you protect the platform we also want

00:28:58,480 --> 00:29:04,960
to give an api that helps

00:29:01,440 --> 00:29:04,960
implementing quality extensions

00:29:05,360 --> 00:29:10,559
yeah i think it eclipse would have

00:29:08,480 --> 00:29:12,799
definitely been very different today

00:29:10,559 --> 00:29:15,039
with obvious code extension model but

00:29:12,799 --> 00:29:17,120
look at the history right at that time

00:29:15,039 --> 00:29:18,559
the extension model was based you load

00:29:17,120 --> 00:29:21,440
single in the same process

00:29:18,559 --> 00:29:22,240
right yeah that's netbeans was like that

00:29:21,440 --> 00:29:25,200
just that's what

00:29:22,240 --> 00:29:26,000
the mindset at a time then if you look

00:29:25,200 --> 00:29:27,919
architectures

00:29:26,000 --> 00:29:29,760
right browsers were similar right

00:29:27,919 --> 00:29:32,640
browsers were similar then came

00:29:29,760 --> 00:29:35,120
chromium which then also moved to a

00:29:32,640 --> 00:29:37,039
multi-process architecture

00:29:35,120 --> 00:29:38,720
right and i think just as a point in

00:29:37,039 --> 00:29:40,960
time i think

00:29:38,720 --> 00:29:42,159
how he designs things how did you get

00:29:40,960 --> 00:29:43,840
started with vs code

00:29:42,159 --> 00:29:45,279
like 10 years ago when you moved to

00:29:43,840 --> 00:29:48,399
microsoft with your team

00:29:45,279 --> 00:29:50,559
what was what was the plan back then

00:29:48,399 --> 00:29:51,520
well the plan was continuous steering

00:29:50,559 --> 00:29:52,640
right it was not

00:29:51,520 --> 00:29:54,559
you don't you don't think you have a

00:29:52,640 --> 00:29:56,640
master plan for 10 years

00:29:54,559 --> 00:29:58,720
when you started 10 years ago now i took

00:29:56,640 --> 00:30:00,960
some of my vs co

00:29:58,720 --> 00:30:02,159
eclipse team members with me but also

00:30:00,960 --> 00:30:04,159
some fresh

00:30:02,159 --> 00:30:07,600
fresh brains which is good and we

00:30:04,159 --> 00:30:09,760
started with building a web ide

00:30:07,600 --> 00:30:12,000
as side product of this web idea if it

00:30:09,760 --> 00:30:15,520
was monarch editor which is very popular

00:30:12,000 --> 00:30:18,960
right that was a success

00:30:15,520 --> 00:30:21,600
the web ide was less successful because

00:30:18,960 --> 00:30:23,039
we only got about 3 000 day users and

00:30:21,600 --> 00:30:24,399
something that's a number inside

00:30:23,039 --> 00:30:26,080
microsoft that

00:30:24,399 --> 00:30:28,080
you will you're not relevant with this

00:30:26,080 --> 00:30:31,760
amount of number of users right

00:30:28,080 --> 00:30:34,640
so um there are many reasons for that

00:30:31,760 --> 00:30:36,000
but then we decided yeah that's monaco

00:30:34,640 --> 00:30:38,080
editor is nice

00:30:36,000 --> 00:30:39,919
but what can we do right so and then

00:30:38,080 --> 00:30:41,600
four years into the project we decided

00:30:39,919 --> 00:30:45,039
to pivot from a web ide

00:30:41,600 --> 00:30:46,799
to a desktop tool

00:30:45,039 --> 00:30:48,720
because we found all born in the web

00:30:46,799 --> 00:30:50,880
developers they use many languages

00:30:48,720 --> 00:30:52,080
they love sublime they like this the

00:30:50,880 --> 00:30:54,000
command line

00:30:52,080 --> 00:30:57,039
right and you cannot just make them

00:30:54,000 --> 00:31:00,640
happy with the tool like visual studio

00:30:57,039 --> 00:31:02,720
and moreover microsoft has transformed

00:31:00,640 --> 00:31:05,590
itself into an any company right

00:31:02,720 --> 00:31:06,960
any language any platform any

00:31:05,590 --> 00:31:10,480
[Music]

00:31:06,960 --> 00:31:12,240
um any tool tool whatever

00:31:10,480 --> 00:31:13,679
for azure right makes total sense for a

00:31:12,240 --> 00:31:13,919
cloud provider right you're not going to

00:31:13,679 --> 00:31:16,320
be

00:31:13,919 --> 00:31:17,840
limited to only windows whatever so it

00:31:16,320 --> 00:31:19,519
became at that time were

00:31:17,840 --> 00:31:21,200
important to have a cross-platform tool

00:31:19,519 --> 00:31:23,039
for developer

00:31:21,200 --> 00:31:24,559
otherwise you kind of are not relevant

00:31:23,039 --> 00:31:26,159
to developers right

00:31:24,559 --> 00:31:27,919
which includes even tool that runs on

00:31:26,159 --> 00:31:32,159
linux and

00:31:27,919 --> 00:31:34,080
then came the idea yeah we just run what

00:31:32,159 --> 00:31:37,279
we had from the web ide

00:31:34,080 --> 00:31:40,640
on the desktop thanks to electron

00:31:37,279 --> 00:31:42,559
we could do that in a reasonable way

00:31:40,640 --> 00:31:46,240
and then we could do the first demo

00:31:42,559 --> 00:31:48,000
running vs code on linux right and

00:31:46,240 --> 00:31:50,640
everybody microsoft was proud now we

00:31:48,000 --> 00:31:53,039
have the linux base too

00:31:50,640 --> 00:31:53,760
so this was kind of four years into that

00:31:53,039 --> 00:31:56,399
and then

00:31:53,760 --> 00:31:57,840
i think five years ago we released it to

00:31:56,399 --> 00:32:00,399
uh

00:31:57,840 --> 00:32:01,760
in a preview but then it was also clear

00:32:00,399 --> 00:32:04,960
to us from the beginning

00:32:01,760 --> 00:32:08,080
we cannot do all this long

00:32:04,960 --> 00:32:09,519
tail of language support ourselves

00:32:08,080 --> 00:32:11,279
right and if you want to get there we

00:32:09,519 --> 00:32:13,600
need two things you need an extension

00:32:11,279 --> 00:32:16,000
model and you need to be open source

00:32:13,600 --> 00:32:18,399
and we got that six months later after

00:32:16,000 --> 00:32:18,880
preview which was very compressed six

00:32:18,399 --> 00:32:22,000
months

00:32:18,880 --> 00:32:22,480
in our lives but we got it and then

00:32:22,000 --> 00:32:25,360
along

00:32:22,480 --> 00:32:26,240
came lsp we talked about then came

00:32:25,360 --> 00:32:27,600
remote

00:32:26,240 --> 00:32:29,679
right that year since you can run

00:32:27,600 --> 00:32:31,760
extensions remotely we cannot

00:32:29,679 --> 00:32:33,120
in a separate process we can also run

00:32:31,760 --> 00:32:36,320
extensions

00:32:33,120 --> 00:32:38,159
remotely right this idea was it's a

00:32:36,320 --> 00:32:38,960
protocol so we should be able to do that

00:32:38,159 --> 00:32:41,279
and yeah we were

00:32:38,960 --> 00:32:43,120
able to do that and that that enabled us

00:32:41,279 --> 00:32:45,120
to come back to the browser

00:32:43,120 --> 00:32:46,640
right so with that that we come around

00:32:45,120 --> 00:32:49,279
extensions remotely

00:32:46,640 --> 00:32:51,279
we can then bring base clivious code

00:32:49,279 --> 00:32:53,519
back in the browser

00:32:51,279 --> 00:32:55,279
which closes a nice loop right that we

00:32:53,519 --> 00:32:58,559
started in a web ide

00:32:55,279 --> 00:33:00,240
and now we run back in in in

00:32:58,559 --> 00:33:02,000
in the browser and then the github code

00:33:00,240 --> 00:33:03,279
space is right there is there's a back

00:33:02,000 --> 00:33:04,960
end and

00:33:03,279 --> 00:33:06,880
that does that so that's a nice loop

00:33:04,960 --> 00:33:08,240
it's one of the many loops we had right

00:33:06,880 --> 00:33:11,279
another loop is java

00:33:08,240 --> 00:33:12,159
right so yes code now supports java then

00:33:11,279 --> 00:33:15,519
it supports it

00:33:12,159 --> 00:33:18,640
it uses the eclipse java implementation

00:33:15,519 --> 00:33:22,399
which is based on lsp right so basically

00:33:18,640 --> 00:33:24,480
yeah still still all with us

00:33:22,399 --> 00:33:26,159
yeah so it's it's great this was really

00:33:24,480 --> 00:33:28,080
great if you look at the last 10 years

00:33:26,159 --> 00:33:30,480
it was from how many loops we had

00:33:28,080 --> 00:33:32,720
how many pivots we had and it was just

00:33:30,480 --> 00:33:33,919
continuous steering right lsp was just

00:33:32,720 --> 00:33:36,159
out of the need

00:33:33,919 --> 00:33:38,320
wait we're late to the game how can you

00:33:36,159 --> 00:33:40,000
get lots of language support that goes

00:33:38,320 --> 00:33:41,760
beyond syntax coloring

00:33:40,000 --> 00:33:43,440
and then you did lsp how we can do the

00:33:41,760 --> 00:33:45,919
same with debugger then we did debug

00:33:43,440 --> 00:33:47,600
the protocol right it's really i would

00:33:45,919 --> 00:33:50,799
say continuous steering and

00:33:47,600 --> 00:33:54,080
and listening yeah awesome

00:33:50,799 --> 00:33:55,279
yeah really really uh a cool journey i

00:33:54,080 --> 00:33:58,799
would say

00:33:55,279 --> 00:33:58,799
and a tremendous access

00:33:59,600 --> 00:34:03,679
definitely a fun one i said sorry yeah

00:34:01,279 --> 00:34:06,399
okay and a tremendous success

00:34:03,679 --> 00:34:06,880
right i mean this is now over 50 market

00:34:06,399 --> 00:34:09,760
share

00:34:06,880 --> 00:34:11,359
like that was 2019 probably it's already

00:34:09,760 --> 00:34:15,040
60 or so i don't know

00:34:11,359 --> 00:34:17,040
yeah um yeah i mean i myself use that we

00:34:15,040 --> 00:34:19,280
use it and get pot obviously

00:34:17,040 --> 00:34:20,800
um so it's you know everywhere basically

00:34:19,280 --> 00:34:23,839
becoming really

00:34:20,800 --> 00:34:26,399
a standard you know the new

00:34:23,839 --> 00:34:27,919
vi emacs thing or so i don't know

00:34:26,399 --> 00:34:30,800
hopefully it also you know

00:34:27,919 --> 00:34:32,159
survives the test of time like those two

00:34:30,800 --> 00:34:35,359
editors yeah

00:34:32,159 --> 00:34:37,760
yes yeah um

00:34:35,359 --> 00:34:40,560
uh the last question would be what what

00:34:37,760 --> 00:34:45,040
are the you know future developments

00:34:40,560 --> 00:34:46,960
envious code you are most excited about

00:34:45,040 --> 00:34:48,159
well you know i love all developments

00:34:46,960 --> 00:34:51,040
right i will not

00:34:48,159 --> 00:34:52,800
say which one of more or less also as

00:34:51,040 --> 00:34:54,639
you are transparent right the roadmap of

00:34:52,800 --> 00:34:56,320
what we planned to the next 12 months we

00:34:54,639 --> 00:34:59,680
just made it available

00:34:56,320 --> 00:35:01,760
and obviously wanting what is there

00:34:59,680 --> 00:35:03,520
which i still find exciting and we share

00:35:01,760 --> 00:35:06,720
the same passion i guess you and i

00:35:03,520 --> 00:35:07,920
in that one to give developers tools but

00:35:06,720 --> 00:35:10,000
they don't have to worry about

00:35:07,920 --> 00:35:13,040
configuration of the prerequisites right

00:35:10,000 --> 00:35:14,800
and at skatepark and we work

00:35:13,040 --> 00:35:16,320
together with github and visual studio

00:35:14,800 --> 00:35:18,560
team on code spaces

00:35:16,320 --> 00:35:20,000
so this will take still takes some of

00:35:18,560 --> 00:35:22,960
our time

00:35:20,000 --> 00:35:25,520
and the web is still challenging right

00:35:22,960 --> 00:35:27,359
ipad support all the things

00:35:25,520 --> 00:35:29,040
now that you also use vs code i guess we

00:35:27,359 --> 00:35:31,119
will get help from you also can make

00:35:29,040 --> 00:35:33,359
ipad support great right

00:35:31,119 --> 00:35:34,560
so that's still i think it's exciting

00:35:33,359 --> 00:35:36,560
and um

00:35:34,560 --> 00:35:37,760
it's also i really like the work you are

00:35:36,560 --> 00:35:41,040
doing there right

00:35:37,760 --> 00:35:42,000
because it's great to not be the only

00:35:41,040 --> 00:35:44,079
one with space

00:35:42,000 --> 00:35:45,680
and yeah i'm also happy with the

00:35:44,079 --> 00:35:48,800
progress they made on the back end

00:35:45,680 --> 00:35:50,800
the team was really great and that's

00:35:48,800 --> 00:35:54,000
code spaces

00:35:50,800 --> 00:35:56,400
um related to code spaces something

00:35:54,000 --> 00:35:57,440
that came a little bit out of this work

00:35:56,400 --> 00:36:00,640
is now code space

00:35:57,440 --> 00:36:01,920
requires that you have a back end right

00:36:00,640 --> 00:36:04,640
the container that

00:36:01,920 --> 00:36:06,000
draws things how far can you push things

00:36:04,640 --> 00:36:08,880
by being browser only

00:36:06,000 --> 00:36:10,720
right that's another thing that you want

00:36:08,880 --> 00:36:12,640
to do and we did a little bit of that

00:36:10,720 --> 00:36:15,839
already in code spaces

00:36:12,640 --> 00:36:19,280
so one example i can give you right um

00:36:15,839 --> 00:36:21,599
whim a beam extension is written that

00:36:19,280 --> 00:36:23,280
for each keystroke you send something to

00:36:21,599 --> 00:36:24,000
the extension and the extension will do

00:36:23,280 --> 00:36:26,320
a command

00:36:24,000 --> 00:36:28,320
integrate the command and so on and if

00:36:26,320 --> 00:36:30,800
you do that remotely right then you have

00:36:28,320 --> 00:36:33,839
some round tripping and latency

00:36:30,800 --> 00:36:34,640
so what we did for code spaces and which

00:36:33,839 --> 00:36:36,640
has led

00:36:34,640 --> 00:36:38,240
to this pass is that we can run now like

00:36:36,640 --> 00:36:41,520
the vim extension

00:36:38,240 --> 00:36:43,200
in the browser in a web worker

00:36:41,520 --> 00:36:45,359
right so we always try to find new

00:36:43,200 --> 00:36:47,599
locations for our extension host right

00:36:45,359 --> 00:36:48,880
we can run in a docker container an ssh

00:36:47,599 --> 00:36:51,119
box in wsl

00:36:48,880 --> 00:36:53,440
and now we can also run it in a network

00:36:51,119 --> 00:36:55,280
in a browser this has a

00:36:53,440 --> 00:36:58,160
an interesting potential right how far

00:36:55,280 --> 00:36:58,160
can you push that

00:36:58,240 --> 00:37:01,359
other things uh notebooks we have

00:37:00,240 --> 00:37:04,800
started right

00:37:01,359 --> 00:37:06,400
jupiter very popular so we want to kind

00:37:04,800 --> 00:37:08,880
of evangelize that

00:37:06,400 --> 00:37:10,800
for jupiter but other things that can

00:37:08,880 --> 00:37:12,880
benefit from this metaphor

00:37:10,800 --> 00:37:13,839
and it's just amazing just for teaching

00:37:12,880 --> 00:37:15,760
things how far

00:37:13,839 --> 00:37:18,000
and powerful this this metaphor is right

00:37:15,760 --> 00:37:19,680
the notebook it sells and you run them

00:37:18,000 --> 00:37:21,440
and you can share them so that's

00:37:19,680 --> 00:37:23,440
something we will continue to invest

00:37:21,440 --> 00:37:25,280
heavily

00:37:23,440 --> 00:37:26,480
and last but not least what you see in

00:37:25,280 --> 00:37:29,680
our roadmap is

00:37:26,480 --> 00:37:31,599
security right so

00:37:29,680 --> 00:37:32,800
it's just the fact that developers are

00:37:31,599 --> 00:37:36,320
great attack

00:37:32,800 --> 00:37:38,880
target and developers are

00:37:36,320 --> 00:37:40,160
not always very careful i guess right

00:37:38,880 --> 00:37:43,119
they have no

00:37:40,160 --> 00:37:44,400
no fear the wrong code or whatever but i

00:37:43,119 --> 00:37:46,720
think that's

00:37:44,400 --> 00:37:48,480
as developers become more attractive for

00:37:46,720 --> 00:37:48,800
attackers that's something you have to

00:37:48,480 --> 00:37:52,000
do

00:37:48,800 --> 00:37:55,280
right and that's not only protecting

00:37:52,000 --> 00:37:56,400
for extensions but even that's something

00:37:55,280 --> 00:37:59,599
working right now but

00:37:56,400 --> 00:38:01,760
even when you open a folder right

00:37:59,599 --> 00:38:03,200
someone tells hey try this sample you

00:38:01,760 --> 00:38:06,000
clone it and you run it

00:38:03,200 --> 00:38:07,119
of course i can make that the sample

00:38:06,000 --> 00:38:10,800
runs code

00:38:07,119 --> 00:38:13,359
only by opening in the ide so we have to

00:38:10,800 --> 00:38:14,320
really protect developers or educate

00:38:13,359 --> 00:38:17,440
them also

00:38:14,320 --> 00:38:18,000
more that they are aware of this

00:38:17,440 --> 00:38:20,400
potential

00:38:18,000 --> 00:38:22,160
danger right so that's the whole

00:38:20,400 --> 00:38:24,160
security at the

00:38:22,160 --> 00:38:25,359
and all the workspace level and then

00:38:24,160 --> 00:38:27,680
comes also

00:38:25,359 --> 00:38:29,440
the security extension level rights will

00:38:27,680 --> 00:38:31,440
invest heavily in the marketplace that

00:38:29,440 --> 00:38:32,800
will play a key role in that right that

00:38:31,440 --> 00:38:34,960
he can say

00:38:32,800 --> 00:38:36,079
i only want to install extends from

00:38:34,960 --> 00:38:38,480
trusted

00:38:36,079 --> 00:38:39,680
providers that they are signed all these

00:38:38,480 --> 00:38:43,359
things you do

00:38:39,680 --> 00:38:46,160
to increase kind of uh

00:38:43,359 --> 00:38:47,200
protection of developers from malicious

00:38:46,160 --> 00:38:49,520
attacks yeah

00:38:47,200 --> 00:38:51,200
so that's a big app and it's super

00:38:49,520 --> 00:38:52,160
challenging to do that in a way that

00:38:51,200 --> 00:38:54,240
doesn't do

00:38:52,160 --> 00:38:55,920
to compromise too much compromises on

00:38:54,240 --> 00:38:57,680
the experience right on the developer

00:38:55,920 --> 00:38:59,200
experience like you don't want to have

00:38:57,680 --> 00:39:00,320
all the alerts all the time do you

00:38:59,200 --> 00:39:02,640
really want to do this

00:39:00,320 --> 00:39:03,599
and that's right the hope is that we can

00:39:02,640 --> 00:39:06,560
do it once

00:39:03,599 --> 00:39:08,400
at the level of vs code so that not each

00:39:06,560 --> 00:39:11,119
tool has to do it right not each

00:39:08,400 --> 00:39:12,079
extension should have to ask for hey

00:39:11,119 --> 00:39:14,160
actually

00:39:12,079 --> 00:39:16,240
my extension i potentially run code on

00:39:14,160 --> 00:39:19,200
your workspace so it won't have one ui

00:39:16,240 --> 00:39:19,520
it does it to reduce the number of time

00:39:19,200 --> 00:39:22,160
yeah

00:39:19,520 --> 00:39:24,640
a common way to do it so yeah yeah

00:39:22,160 --> 00:39:29,040
definitely super important also you know

00:39:24,640 --> 00:39:32,000
moving development towards the cloud

00:39:29,040 --> 00:39:33,760
helps but also has new challenges at the

00:39:32,000 --> 00:39:34,079
same time but both on both sides i would

00:39:33,760 --> 00:39:36,240
say

00:39:34,079 --> 00:39:37,200
security wise usually moving code to the

00:39:36,240 --> 00:39:39,599
cloud people

00:39:37,200 --> 00:39:40,560
mix things up into two challenges right

00:39:39,599 --> 00:39:42,640
one is that

00:39:40,560 --> 00:39:44,560
you really have this container where you

00:39:42,640 --> 00:39:46,400
run your software stack

00:39:44,560 --> 00:39:47,920
and then often people always think you

00:39:46,400 --> 00:39:51,280
can only connect through a

00:39:47,920 --> 00:39:54,560
browser to that right and i think

00:39:51,280 --> 00:39:57,200
you can also do cloud-based development

00:39:54,560 --> 00:39:59,760
with a desktop tool that doesn't run in

00:39:57,200 --> 00:40:02,160
a browser right and that's

00:39:59,760 --> 00:40:04,000
now an option that esco can provide

00:40:02,160 --> 00:40:06,000
right you run vs code on the desktop and

00:40:04,000 --> 00:40:08,400
you connect to a cloud

00:40:06,000 --> 00:40:10,079
cloud hosted container yeah you don't

00:40:08,400 --> 00:40:11,920
have to adopt two things at once

00:40:10,079 --> 00:40:13,680
right you don't have to adopt

00:40:11,920 --> 00:40:16,880
cloudhosted

00:40:13,680 --> 00:40:19,599
development stacks and web ides

00:40:16,880 --> 00:40:20,480
right so this is two two two new things

00:40:19,599 --> 00:40:22,960
you have to adopt

00:40:20,480 --> 00:40:26,480
and sometimes one at the time at least

00:40:22,960 --> 00:40:30,160
have the option it's a good thing

00:40:26,480 --> 00:40:31,760
yeah yeah pretty exciting times ahead of

00:40:30,160 --> 00:40:33,760
us eric oh yeah

00:40:31,760 --> 00:40:34,880
thanks for the conversation it was my

00:40:33,760 --> 00:40:36,640
pleasure um

00:40:34,880 --> 00:40:46,319
[Music]

00:40:36,640 --> 00:40:46,319

YouTube URL: https://www.youtube.com/watch?v=JiBUDS9odA8


