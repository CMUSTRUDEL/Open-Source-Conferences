Title: DevX: History of Code Search â€“ Beyang Liu
Publication date: 2021-04-29
Playlist: DevX Conf
Description: 
	What is code search? Code search is an important dev tool for some of the largest and most highly respected companies and open-source organizations, but many developers have never used it before. We'll go over the history and evolution of code search, why it's becoming more popular now, and how it might help you and your collaborators become a better team of software engineers.

DevX Conf is about developer experience - a space where creators collaborate, listen, discuss and declutter our workflows, toolchains and minds. Organized by Gitpod
Captions: 
	00:00:13,920 --> 00:00:17,199
hi everyone my name is biang

00:00:15,519 --> 00:00:19,039
i'm the cto and co-founder of a company

00:00:17,199 --> 00:00:20,480
called sourcegraph and today i'm here to

00:00:19,039 --> 00:00:24,640
tell you about code search

00:00:20,480 --> 00:00:26,400
and big code so the thesis of this talk

00:00:24,640 --> 00:00:28,480
is that everyone needs code search

00:00:26,400 --> 00:00:30,000
whether you realize it yet or not and

00:00:28,480 --> 00:00:32,399
this kind of breaks down into three

00:00:30,000 --> 00:00:33,120
parts the first is that code search is

00:00:32,399 --> 00:00:34,559
essential

00:00:33,120 --> 00:00:36,239
to reading and understanding code at

00:00:34,559 --> 00:00:37,280
scale if you have a big code base you

00:00:36,239 --> 00:00:40,160
need code search

00:00:37,280 --> 00:00:40,960
to be productive in it the second is

00:00:40,160 --> 00:00:42,800
social proof

00:00:40,960 --> 00:00:44,079
a lot of the big and respected big code

00:00:42,800 --> 00:00:46,000
bases that you've heard about have

00:00:44,079 --> 00:00:48,960
already adopted code search

00:00:46,000 --> 00:00:49,520
and the third is that everyone including

00:00:48,960 --> 00:00:53,360
you

00:00:49,520 --> 00:00:53,360
now has a big code base

00:00:53,840 --> 00:00:57,039
so i want to take a step back first and

00:00:55,520 --> 00:01:00,160
ask what is it that developers

00:00:57,039 --> 00:01:03,520
actually do so what we think we do

00:01:00,160 --> 00:01:06,479
is we think our job is to write features

00:01:03,520 --> 00:01:07,760
fix bugs essentially ship code write an

00:01:06,479 --> 00:01:10,479
author and

00:01:07,760 --> 00:01:12,400
ship code into production and in some

00:01:10,479 --> 00:01:15,360
sense that is our jobs that is the

00:01:12,400 --> 00:01:15,840
ultimate output that we produce but if

00:01:15,360 --> 00:01:17,680
you

00:01:15,840 --> 00:01:18,880
actually look at how we spend the hours

00:01:17,680 --> 00:01:20,799
of our days

00:01:18,880 --> 00:01:22,080
uh you actually see that we spend a lot

00:01:20,799 --> 00:01:24,240
more of our time

00:01:22,080 --> 00:01:25,439
reading and understanding existing code

00:01:24,240 --> 00:01:28,159
than writing

00:01:25,439 --> 00:01:28,799
new code in fact some people estimate

00:01:28,159 --> 00:01:31,439
that we spend

00:01:28,799 --> 00:01:32,479
10 times as much time reading code as

00:01:31,439 --> 00:01:35,520
writing it

00:01:32,479 --> 00:01:37,439
and there's this wonderful word uh grok

00:01:35,520 --> 00:01:38,320
that describes the level of

00:01:37,439 --> 00:01:39,840
understanding that we're trying to

00:01:38,320 --> 00:01:41,439
achieve when we're reading through code

00:01:39,840 --> 00:01:43,200
so grok originally comes from this

00:01:41,439 --> 00:01:44,880
science fiction novel called strangers

00:01:43,200 --> 00:01:46,640
in a strange land

00:01:44,880 --> 00:01:49,040
in the context of that book it meant to

00:01:46,640 --> 00:01:50,640
understand a subject so thoroughly that

00:01:49,040 --> 00:01:51,280
the observer becomes a part of the

00:01:50,640 --> 00:01:52,960
observed

00:01:51,280 --> 00:01:54,479
and over time it's come to acquire this

00:01:52,960 --> 00:01:55,920
colloquial definition of

00:01:54,479 --> 00:01:58,079
understanding something profoundly and

00:01:55,920 --> 00:01:59,520
intuitively and specifically within the

00:01:58,079 --> 00:02:01,280
context of code

00:01:59,520 --> 00:02:02,719
to grok a piece of code means to

00:02:01,280 --> 00:02:04,719
understand code uh

00:02:02,719 --> 00:02:06,079
as if you had just wrote it and in some

00:02:04,719 --> 00:02:07,759
sense this is the level of understanding

00:02:06,079 --> 00:02:10,959
that you want to get to

00:02:07,759 --> 00:02:14,879
before you're able to start writing

00:02:10,959 --> 00:02:17,680
code in an effective fashion

00:02:14,879 --> 00:02:19,040
so when you think about other tools for

00:02:17,680 --> 00:02:23,040
grocking

00:02:19,040 --> 00:02:25,280
topics i think google is one of the best

00:02:23,040 --> 00:02:26,480
tools for acquiring a deep understanding

00:02:25,280 --> 00:02:27,760
of various subjects so

00:02:26,480 --> 00:02:29,280
the amazing thing about google is you

00:02:27,760 --> 00:02:30,640
can go to the search bar you can type in

00:02:29,280 --> 00:02:33,360
any keyword

00:02:30,640 --> 00:02:35,200
indicating any topic compilers for

00:02:33,360 --> 00:02:37,200
example

00:02:35,200 --> 00:02:38,239
google will comb the far reaches of the

00:02:37,200 --> 00:02:40,160
internet uh

00:02:38,239 --> 00:02:41,920
find all the best pages that tell you

00:02:40,160 --> 00:02:43,920
about that topic surface the ones that

00:02:41,920 --> 00:02:46,160
are most relevant you click on one

00:02:43,920 --> 00:02:47,280
and then instantly you're reading uh an

00:02:46,160 --> 00:02:48,319
authoritative source about what

00:02:47,280 --> 00:02:49,840
compilers are

00:02:48,319 --> 00:02:51,519
and moreover there are the these

00:02:49,840 --> 00:02:52,160
wonderful things called hyperlinks that

00:02:51,519 --> 00:02:54,640
link you

00:02:52,160 --> 00:02:55,440
to other pages describing essentially

00:02:54,640 --> 00:02:57,519
any

00:02:55,440 --> 00:03:00,080
term or word on this page that you might

00:02:57,519 --> 00:03:02,959
want to dive deeper into

00:03:00,080 --> 00:03:04,319
and this is essential for building up

00:03:02,959 --> 00:03:07,360
that kind of structured

00:03:04,319 --> 00:03:09,920
uh graphical knowledge uh uh

00:03:07,360 --> 00:03:12,560
web that that forms kind of a deep and

00:03:09,920 --> 00:03:13,840
thorough understanding of a topic

00:03:12,560 --> 00:03:16,239
and so the question is what is the

00:03:13,840 --> 00:03:17,680
equivalent of that for code

00:03:16,239 --> 00:03:19,280
to answer that question we got to go

00:03:17,680 --> 00:03:20,879
back in time and as many

00:03:19,280 --> 00:03:23,040
you know stories about cool technology

00:03:20,879 --> 00:03:24,000
start uh in the world of software this

00:03:23,040 --> 00:03:26,959
one starts

00:03:24,000 --> 00:03:28,720
at uh bell labs uh in the 1980s with a

00:03:26,959 --> 00:03:30,879
tool called cscope

00:03:28,720 --> 00:03:33,200
so in the 80s at bell labs there's an

00:03:30,879 --> 00:03:34,959
engineer by the name of joe stefan

00:03:33,200 --> 00:03:36,799
and joe had this issue where he was

00:03:34,959 --> 00:03:40,159
working in this giant c code base

00:03:36,799 --> 00:03:43,200
uh it was uh bell labs kind of c

00:03:40,159 --> 00:03:44,560
uh monorepo if you will and it might

00:03:43,200 --> 00:03:45,599
have been the largest c code base in the

00:03:44,560 --> 00:03:48,080
world at the time

00:03:45,599 --> 00:03:49,760
and joe was having trouble um

00:03:48,080 --> 00:03:51,040
essentially grocking the code that he

00:03:49,760 --> 00:03:53,280
was modifying

00:03:51,040 --> 00:03:54,959
and this is becoming a bottleneck in his

00:03:53,280 --> 00:03:57,040
day-to-day uh workflow and his

00:03:54,959 --> 00:03:58,879
productivity so he wrote this collection

00:03:57,040 --> 00:04:00,080
of grep and said scripts to help him

00:03:58,879 --> 00:04:02,080
answer these common questions

00:04:00,080 --> 00:04:04,080
that kept recurring over and over again

00:04:02,080 --> 00:04:04,480
and over time he kind of aggregated

00:04:04,080 --> 00:04:06,640
those

00:04:04,480 --> 00:04:08,159
scripts into a single tool which he

00:04:06,640 --> 00:04:09,920
called cscope

00:04:08,159 --> 00:04:11,519
and that tool had a simple command line

00:04:09,920 --> 00:04:13,519
interface that allowed you to ask these

00:04:11,519 --> 00:04:16,479
questions these were questions like

00:04:13,519 --> 00:04:17,840
where is this function defined find all

00:04:16,479 --> 00:04:18,880
the functions that call this function

00:04:17,840 --> 00:04:21,280
find all the functions that this

00:04:18,880 --> 00:04:23,040
function calls and show me all instances

00:04:21,280 --> 00:04:25,840
of a particular string or regular

00:04:23,040 --> 00:04:28,880
expression pattern in the code base

00:04:25,840 --> 00:04:31,280
and so joe started using this tool to uh

00:04:28,880 --> 00:04:32,479
help accelerate his understanding of the

00:04:31,280 --> 00:04:34,160
code that he was working on

00:04:32,479 --> 00:04:35,600
and he told his teammates about it and

00:04:34,160 --> 00:04:37,440
they told their teammates and over time

00:04:35,600 --> 00:04:39,600
this tool kind of spread across bell

00:04:37,440 --> 00:04:42,240
labs and then across at t

00:04:39,600 --> 00:04:43,440
and eventually made its way outside 18t

00:04:42,240 --> 00:04:44,880
as it was open source

00:04:43,440 --> 00:04:47,199
and people filed a bunch of feature

00:04:44,880 --> 00:04:48,000
requests against it they integrated it

00:04:47,199 --> 00:04:49,759
into

00:04:48,000 --> 00:04:51,440
their tools it got integrated into

00:04:49,759 --> 00:04:53,040
editors that's the screenshot you see on

00:04:51,440 --> 00:04:54,800
the right here

00:04:53,040 --> 00:04:56,160
and it was just this amazing tool that

00:04:54,800 --> 00:05:00,080
really help people

00:04:56,160 --> 00:05:02,240
work inside these large code bases and

00:05:00,080 --> 00:05:04,320
grok large pieces of code for the first

00:05:02,240 --> 00:05:05,919
time

00:05:04,320 --> 00:05:07,440
fast forward a couple years there's

00:05:05,919 --> 00:05:09,120
another large c code base that came out

00:05:07,440 --> 00:05:10,400
of the scene that was the linux kernel

00:05:09,120 --> 00:05:12,560
and the wonderful thing about the linux

00:05:10,400 --> 00:05:16,320
kernel was it was completely open source

00:05:12,560 --> 00:05:18,320
so anyone that wanted to uh access it

00:05:16,320 --> 00:05:20,400
could download the source code but even

00:05:18,320 --> 00:05:22,320
though it was technically available

00:05:20,400 --> 00:05:24,000
the the understanding of the code wasn't

00:05:22,320 --> 00:05:25,919
necessarily accessible

00:05:24,000 --> 00:05:28,080
to to every engineer that wanted to

00:05:25,919 --> 00:05:29,680
learn about it and in particular

00:05:28,080 --> 00:05:31,600
if you're a newcomer to this code basis

00:05:29,680 --> 00:05:33,039
it's pretty pretty daunting to

00:05:31,600 --> 00:05:35,360
to try to go and understand everything

00:05:33,039 --> 00:05:37,520
that was going on in it so these two

00:05:35,360 --> 00:05:38,960
norwegian students wrote this tool to

00:05:37,520 --> 00:05:40,320
help them acquire a better

00:05:38,960 --> 00:05:41,919
understanding of what was going on in

00:05:40,320 --> 00:05:42,639
the linux code base and they called it

00:05:41,919 --> 00:05:45,120
lxr

00:05:42,639 --> 00:05:46,320
the linux cross-referencer and lxr

00:05:45,120 --> 00:05:48,240
answered a lot of the same questions

00:05:46,320 --> 00:05:49,840
that c-scope did but did so in this kind

00:05:48,240 --> 00:05:53,120
of graphical web-based ui

00:05:49,840 --> 00:05:54,639
because by 1994 the world wide web had

00:05:53,120 --> 00:05:55,280
come along and so hyperlinks were a

00:05:54,639 --> 00:05:57,199
thing

00:05:55,280 --> 00:05:59,199
uh and so now if you wanted to jump to a

00:05:57,199 --> 00:06:01,199
definition or find references you just

00:05:59,199 --> 00:06:03,039
click the link of the symbol in the code

00:06:01,199 --> 00:06:04,639
and there's also a nice little search

00:06:03,039 --> 00:06:07,440
box that you could use

00:06:04,639 --> 00:06:09,440
to search for specific symbols in the

00:06:07,440 --> 00:06:10,960
meantime in the 90s uh the operating

00:06:09,440 --> 00:06:12,560
system wars were a thing

00:06:10,960 --> 00:06:14,880
so different companies competed against

00:06:12,560 --> 00:06:16,319
one another to get

00:06:14,880 --> 00:06:18,240
people to adopt their their operating

00:06:16,319 --> 00:06:18,880
system or their software development

00:06:18,240 --> 00:06:20,240
platform

00:06:18,880 --> 00:06:21,919
and along with that there was kind of

00:06:20,240 --> 00:06:24,319
this arms race in

00:06:21,919 --> 00:06:26,479
ides so each of these companies wanted

00:06:24,319 --> 00:06:27,840
to drive people to use its ide because

00:06:26,479 --> 00:06:30,000
if developers used its

00:06:27,840 --> 00:06:32,240
uh development platform that means they

00:06:30,000 --> 00:06:34,960
would write better third party

00:06:32,240 --> 00:06:35,360
software and that in turn in turn would

00:06:34,960 --> 00:06:37,680
drive

00:06:35,360 --> 00:06:39,680
end users to to pile into that platform

00:06:37,680 --> 00:06:41,520
and make it the kind of winning platform

00:06:39,680 --> 00:06:43,919
and so as a consequence you saw a lot of

00:06:41,520 --> 00:06:45,440
innovation in ides and in particular

00:06:43,919 --> 00:06:46,479
things like jump to definition find

00:06:45,440 --> 00:06:49,599
references

00:06:46,479 --> 00:06:52,160
for languages like java and c-sharp got

00:06:49,599 --> 00:06:52,160
a lot better

00:06:52,240 --> 00:06:55,360
fast forward another couple of years

00:06:54,000 --> 00:06:56,400
there's a company called google that

00:06:55,360 --> 00:06:58,720
came along

00:06:56,400 --> 00:07:00,400
um and google had this problem in the

00:06:58,720 --> 00:07:01,919
early 2000s which is

00:07:00,400 --> 00:07:04,160
it was evolving from fast-growing

00:07:01,919 --> 00:07:06,160
startup to now a substantially sized

00:07:04,160 --> 00:07:07,360
uh software company with a a large

00:07:06,160 --> 00:07:08,800
amount of code

00:07:07,360 --> 00:07:10,560
uh and as more and more software

00:07:08,800 --> 00:07:12,160
developers joined google uh

00:07:10,560 --> 00:07:13,360
more and more of them were unfamiliar

00:07:12,160 --> 00:07:14,560
with the vast majority of the code

00:07:13,360 --> 00:07:16,000
inside google and this became a

00:07:14,560 --> 00:07:18,639
bottleneck for developer product

00:07:16,000 --> 00:07:19,440
productivity and so google being a

00:07:18,639 --> 00:07:21,520
search company

00:07:19,440 --> 00:07:23,360
uh search was kind of in their dna they

00:07:21,520 --> 00:07:24,880
decided hey let's go build a search

00:07:23,360 --> 00:07:26,400
solution for this so the very first

00:07:24,880 --> 00:07:26,880
instance of google's internal code

00:07:26,400 --> 00:07:28,240
search

00:07:26,880 --> 00:07:30,000
was this thing called g-search is

00:07:28,240 --> 00:07:30,960
written by an early engineer by the name

00:07:30,000 --> 00:07:32,720
of jeff dean

00:07:30,960 --> 00:07:34,639
and what essentially did was it kind of

00:07:32,720 --> 00:07:36,560
ran grep in a distributed fashion across

00:07:34,639 --> 00:07:38,960
all the code inside google

00:07:36,560 --> 00:07:40,720
now a couple years later google's code

00:07:38,960 --> 00:07:43,520
base continued to grow

00:07:40,720 --> 00:07:45,599
this distributed grep g-search started

00:07:43,520 --> 00:07:46,400
to hit scaling limits so jeff dean hired

00:07:45,599 --> 00:07:48,720
this intern

00:07:46,400 --> 00:07:51,039
by the name of russ cox uh and russ cox

00:07:48,720 --> 00:07:53,199
figured out how to make a code search

00:07:51,039 --> 00:07:54,560
even more scalable by introducing a

00:07:53,199 --> 00:07:57,599
trigram index

00:07:54,560 --> 00:08:00,560
uh uh to to uh

00:07:57,599 --> 00:08:01,919
essentially accelerate um search queries

00:08:00,560 --> 00:08:04,479
so that you didn't have to do a linear

00:08:01,919 --> 00:08:05,919
in-memory scan of the pattern that you

00:08:04,479 --> 00:08:08,319
were looking for

00:08:05,919 --> 00:08:10,400
a couple years later another googler by

00:08:08,319 --> 00:08:12,080
the name of steve yagi came along

00:08:10,400 --> 00:08:13,520
and steve said hey you know this search

00:08:12,080 --> 00:08:15,120
is great but you know what's missing

00:08:13,520 --> 00:08:16,240
it's missing that hyperlink uh

00:08:15,120 --> 00:08:16,960
functional it's missing jump to

00:08:16,240 --> 00:08:18,720
definition

00:08:16,960 --> 00:08:20,879
find references and you know what

00:08:18,720 --> 00:08:23,039
because we live in the 2000s now i'm

00:08:20,879 --> 00:08:23,360
spoiled i want compiler accurate you

00:08:23,039 --> 00:08:25,280
know

00:08:23,360 --> 00:08:27,520
code navigation jump to definition find

00:08:25,280 --> 00:08:30,000
references just like i get in my editor

00:08:27,520 --> 00:08:31,520
and so yagi's key contribution was this

00:08:30,000 --> 00:08:33,760
internal project called grok which was

00:08:31,520 --> 00:08:36,640
later open sourced as kaith

00:08:33,760 --> 00:08:37,519
that added these uh very precise uh code

00:08:36,640 --> 00:08:39,440
navigation

00:08:37,519 --> 00:08:41,839
capabilities to google's internal code

00:08:39,440 --> 00:08:41,839
search

00:08:42,800 --> 00:08:45,920
and against uh this backdrop of

00:08:45,040 --> 00:08:48,000
innovation

00:08:45,920 --> 00:08:50,240
in code understanding tools at the same

00:08:48,000 --> 00:08:52,880
time the world of code was exploding

00:08:50,240 --> 00:08:54,959
overall so if you look at this this is a

00:08:52,880 --> 00:08:57,120
graph of uh the number of open source uh

00:08:54,959 --> 00:09:00,160
repositories on github over time

00:08:57,120 --> 00:09:01,920
um this only goes to 20 2014 but you

00:09:00,160 --> 00:09:04,640
know if you extend it to the present day

00:09:01,920 --> 00:09:05,839
it continues to go up and to the right

00:09:04,640 --> 00:09:07,600
and as you can see we're

00:09:05,839 --> 00:09:09,040
in kind of this exponential growth curve

00:09:07,600 --> 00:09:10,480
of the amount of open source

00:09:09,040 --> 00:09:11,920
available in the world and another thing

00:09:10,480 --> 00:09:13,920
i'll call in this graph is you know in

00:09:11,920 --> 00:09:16,160
early 2013 another company

00:09:13,920 --> 00:09:17,040
a search based company was founded that

00:09:16,160 --> 00:09:19,120
was sourcegraph

00:09:17,040 --> 00:09:21,519
of course that's uh the company that i

00:09:19,120 --> 00:09:25,040
founded along with my co-founder quinn

00:09:21,519 --> 00:09:25,680
um and uh we we kind of realized that

00:09:25,040 --> 00:09:28,880
hey

00:09:25,680 --> 00:09:31,279
uh the the world of code is exploding

00:09:28,880 --> 00:09:32,880
and we saw all these signs that the the

00:09:31,279 --> 00:09:34,880
problems that you know were originally

00:09:32,880 --> 00:09:38,080
faced by the likes of bell labs

00:09:34,880 --> 00:09:39,200
and the linux community and google were

00:09:38,080 --> 00:09:41,920
now being faced

00:09:39,200 --> 00:09:42,800
uh by everyone essentially everyone it

00:09:41,920 --> 00:09:44,560
felt like everyone

00:09:42,800 --> 00:09:46,640
was developing now in a big code base

00:09:44,560 --> 00:09:47,920
either because their own code base had

00:09:46,640 --> 00:09:51,040
grown to the point where

00:09:47,920 --> 00:09:52,000
it was now substantially large uh or

00:09:51,040 --> 00:09:53,839
uh they were taking all these

00:09:52,000 --> 00:09:55,760
dependencies on this you know massive

00:09:53,839 --> 00:09:56,160
new world of open source and so even if

00:09:55,760 --> 00:09:59,040
you're

00:09:56,160 --> 00:09:59,760
uh your your company was a two-person

00:09:59,040 --> 00:10:01,600
startup

00:09:59,760 --> 00:10:03,200
uh your effective code base was much

00:10:01,600 --> 00:10:04,800
larger than just the code that you were

00:10:03,200 --> 00:10:06,720
writing because you're depending on

00:10:04,800 --> 00:10:09,040
this big universe of open source code

00:10:06,720 --> 00:10:09,760
and so we were hearing things like hey

00:10:09,040 --> 00:10:12,640
you know

00:10:09,760 --> 00:10:14,480
uh changes are taking a long time

00:10:12,640 --> 00:10:15,920
because i i make a change and stuff

00:10:14,480 --> 00:10:16,880
breaks unexpectedly i don't really

00:10:15,920 --> 00:10:19,040
understand the

00:10:16,880 --> 00:10:20,160
the dependencies in my own code base a

00:10:19,040 --> 00:10:22,560
lot of people were talking about code

00:10:20,160 --> 00:10:24,079
archaeology code splunking source diving

00:10:22,560 --> 00:10:25,839
people were writing blog posts

00:10:24,079 --> 00:10:27,839
uh with titles like trust no one and

00:10:25,839 --> 00:10:29,440
introduction to large code bases

00:10:27,839 --> 00:10:31,120
and all of this was a signal to us that

00:10:29,440 --> 00:10:33,200
maybe it was time uh

00:10:31,120 --> 00:10:35,760
for for code search to be made available

00:10:33,200 --> 00:10:37,600
to everyone

00:10:35,760 --> 00:10:39,600
and if you look at the historical trends

00:10:37,600 --> 00:10:41,200
um you can also see that there were a

00:10:39,600 --> 00:10:43,040
lot of new code search engines created

00:10:41,200 --> 00:10:44,800
in the 2010s as more and more companies

00:10:43,040 --> 00:10:46,160
kind of hit this scaling limitation of

00:10:44,800 --> 00:10:49,200
developing software

00:10:46,160 --> 00:10:50,560
facebook dropbox etsy uh stripe

00:10:49,200 --> 00:10:52,720
and also open source projects like

00:10:50,560 --> 00:10:54,000
debian linux and so sourcecraft came

00:10:52,720 --> 00:10:55,440
along and we wanted to build this for

00:10:54,000 --> 00:10:56,800
every company and also for every

00:10:55,440 --> 00:10:57,920
developer in open source and have been

00:10:56,800 --> 00:11:00,800
fortunate enough

00:10:57,920 --> 00:11:02,320
uh so far to have you know a great uh

00:11:00,800 --> 00:11:06,480
set of companies that are using

00:11:02,320 --> 00:11:06,480
um our our tool

00:11:07,200 --> 00:11:10,480
and the interface that we've arrived at

00:11:09,040 --> 00:11:12,160
is very similar to

00:11:10,480 --> 00:11:13,760
kind of the google web search based

00:11:12,160 --> 00:11:16,240
interface you have this query box that

00:11:13,760 --> 00:11:17,519
lets you type in a query that describes

00:11:16,240 --> 00:11:19,920
the piece of code that you're looking

00:11:17,519 --> 00:11:21,519
for we comb the far reaches of the

00:11:19,920 --> 00:11:22,720
universe of code that's relevant to you

00:11:21,519 --> 00:11:25,279
whether that's the code inside your

00:11:22,720 --> 00:11:27,360
company or the world of open source

00:11:25,279 --> 00:11:29,200
you click on a result and you have uh

00:11:27,360 --> 00:11:30,160
hyperlinks the the code navigation

00:11:29,200 --> 00:11:32,000
capabilities

00:11:30,160 --> 00:11:33,360
go to definition find references that

00:11:32,000 --> 00:11:37,279
are compiler accurate

00:11:33,360 --> 00:11:41,200
um uh in in some cases

00:11:37,279 --> 00:11:44,320
uh and uh help you build kind of that uh

00:11:41,200 --> 00:11:45,920
deep understanding of of what's going on

00:11:44,320 --> 00:11:47,920
in the code

00:11:45,920 --> 00:11:49,040
and why why are the interfaces so uh

00:11:47,920 --> 00:11:51,519
similar well

00:11:49,040 --> 00:11:53,040
i think it's uh very analogous to web

00:11:51,519 --> 00:11:54,720
search just like the world wide web

00:11:53,040 --> 00:11:56,560
code is kind of this distributed global

00:11:54,720 --> 00:11:57,440
knowledge graph and search and

00:11:56,560 --> 00:11:59,760
hyperlinks

00:11:57,440 --> 00:12:01,839
are the kind of basic primitives the

00:11:59,760 --> 00:12:04,000
understanding tools that unlock

00:12:01,839 --> 00:12:06,240
the potential of that knowledge graph

00:12:04,000 --> 00:12:07,040
for everyone who might want to access it

00:12:06,240 --> 00:12:10,480
and

00:12:07,040 --> 00:12:12,160
use it so that's all very high level

00:12:10,480 --> 00:12:13,360
let's talk about some concrete use cases

00:12:12,160 --> 00:12:15,360
for code search

00:12:13,360 --> 00:12:16,399
so uh first example i'll talk about is

00:12:15,360 --> 00:12:18,959
learning by example

00:12:16,399 --> 00:12:20,639
so uh i think almost every developer

00:12:18,959 --> 00:12:21,200
uses api docs you know when you when

00:12:20,639 --> 00:12:22,560
you're

00:12:21,200 --> 00:12:25,600
figuring out how to use a particular

00:12:22,560 --> 00:12:28,240
package you open up the documentation

00:12:25,600 --> 00:12:29,760
you hop to the point documentation that

00:12:28,240 --> 00:12:30,560
describes a particular function or type

00:12:29,760 --> 00:12:32,880
you're trying to use

00:12:30,560 --> 00:12:33,920
say in this case it's this type affinity

00:12:32,880 --> 00:12:35,360
and you kind of read through the docs

00:12:33,920 --> 00:12:36,880
and try to figure out

00:12:35,360 --> 00:12:38,800
how you're supposed to use it now this

00:12:36,880 --> 00:12:41,440
is great but the one issue here is that

00:12:38,800 --> 00:12:43,040
there's no clear usage example

00:12:41,440 --> 00:12:44,639
that tells you hey you know here's how

00:12:43,040 --> 00:12:46,240
other people use it here's a collection

00:12:44,639 --> 00:12:48,639
of things that indicate the range of

00:12:46,240 --> 00:12:50,720
possible usages

00:12:48,639 --> 00:12:52,240
and in particular here there's a field

00:12:50,720 --> 00:12:53,519
three fields actually that are optional

00:12:52,240 --> 00:12:54,800
so you know the immediate question is

00:12:53,519 --> 00:12:56,000
like okay when do i need to set those

00:12:54,800 --> 00:12:58,160
fields

00:12:56,000 --> 00:12:59,839
with great code search this becomes a

00:12:58,160 --> 00:13:01,680
question that's answerable

00:12:59,839 --> 00:13:03,839
via the find references feature so you

00:13:01,680 --> 00:13:05,279
can find references and instantly see

00:13:03,839 --> 00:13:07,760
examples of how other people in your

00:13:05,279 --> 00:13:09,200
company and people in other repositories

00:13:07,760 --> 00:13:12,320
and organizations

00:13:09,200 --> 00:13:14,240
make use of this particular api

00:13:12,320 --> 00:13:15,680
you can see what types of values they're

00:13:14,240 --> 00:13:18,079
passing uh

00:13:15,680 --> 00:13:19,440
as parameters and arguments and at a

00:13:18,079 --> 00:13:20,079
glance get an understanding of how

00:13:19,440 --> 00:13:23,200
you're supposed to

00:13:20,079 --> 00:13:25,440
to use something another use case is

00:13:23,200 --> 00:13:27,360
identifying patterns and anti-patterns

00:13:25,440 --> 00:13:28,560
and potentially using that in bigger

00:13:27,360 --> 00:13:30,079
factors so

00:13:28,560 --> 00:13:31,519
consider a hypothetical situation where

00:13:30,079 --> 00:13:32,720
you're migrating codebase from python2

00:13:31,519 --> 00:13:34,160
to python3

00:13:32,720 --> 00:13:35,920
you want to update every instance of the

00:13:34,160 --> 00:13:38,480
legacy has key

00:13:35,920 --> 00:13:39,360
function python 2 to the key in

00:13:38,480 --> 00:13:41,360
construction

00:13:39,360 --> 00:13:43,360
that's available in python 3. you can

00:13:41,360 --> 00:13:44,399
describe that pattern using a regular

00:13:43,360 --> 00:13:46,079
expression

00:13:44,399 --> 00:13:47,519
find all occurrences that pattern across

00:13:46,079 --> 00:13:51,920
your code base

00:13:47,519 --> 00:13:51,920
and then use that to make the big change

00:13:52,560 --> 00:13:55,680
another big use case is ensuring

00:13:54,000 --> 00:13:57,279
backwards compatibility i sourced this

00:13:55,680 --> 00:14:00,000
use case from my

00:13:57,279 --> 00:14:01,680
colleague adam harvey he used to be a

00:14:00,000 --> 00:14:04,079
core contributor to php

00:14:01,680 --> 00:14:06,800
he also worked at new relic for a bit

00:14:04,079 --> 00:14:10,079
and once upon a time he was tasked with

00:14:06,800 --> 00:14:12,240
updating the new relic php extension

00:14:10,079 --> 00:14:15,279
and in order to do that he used an open

00:14:12,240 --> 00:14:17,920
source code search tool called opengrock

00:14:15,279 --> 00:14:19,120
and what that let him do is search for

00:14:17,920 --> 00:14:19,920
uh occurrences of a particular

00:14:19,120 --> 00:14:21,519
definition

00:14:19,920 --> 00:14:23,760
that he's trying to verify back and pad

00:14:21,519 --> 00:14:25,680
of across different versions of php

00:14:23,760 --> 00:14:27,839
so here he selected a range of versions

00:14:25,680 --> 00:14:29,199
from php5 to php7

00:14:27,839 --> 00:14:30,639
search for the function name and sure

00:14:29,199 --> 00:14:31,839
enough he found that there was a

00:14:30,639 --> 00:14:33,839
breaking api change

00:14:31,839 --> 00:14:37,040
between php five and php seven so this

00:14:33,839 --> 00:14:37,040
is something that he had to go deal with

00:14:38,000 --> 00:14:41,360
another big use case is resolving

00:14:39,360 --> 00:14:42,079
production issues and in particular

00:14:41,360 --> 00:14:44,800
doing so

00:14:42,079 --> 00:14:45,519
quickly and collaboratively so this is a

00:14:44,800 --> 00:14:48,480
real uh

00:14:45,519 --> 00:14:49,120
issue uh in source graph a member of our

00:14:48,480 --> 00:14:52,480
team

00:14:49,120 --> 00:14:55,760
renard found this error message uh in

00:14:52,480 --> 00:14:58,160
uh search on the site he filed an issue

00:14:55,760 --> 00:14:59,360
he wasn't sure exactly how to fix it

00:14:58,160 --> 00:15:01,920
another engineer

00:14:59,360 --> 00:15:04,160
by the name of rock had you know some uh

00:15:01,920 --> 00:15:05,920
familiarity with code he searched for it

00:15:04,160 --> 00:15:07,199
uh the error message he searched for the

00:15:05,920 --> 00:15:10,399
error message in

00:15:07,199 --> 00:15:10,720
in code search uh found the source of

00:15:10,399 --> 00:15:12,720
the

00:15:10,720 --> 00:15:14,320
error message but he wasn't too familiar

00:15:12,720 --> 00:15:14,720
with that part of code so he pasted the

00:15:14,320 --> 00:15:17,440
link

00:15:14,720 --> 00:15:19,440
to uh the code search result in the

00:15:17,440 --> 00:15:20,399
issue and then another engineer uh

00:15:19,440 --> 00:15:23,040
juliana

00:15:20,399 --> 00:15:24,560
uh came along and said hey uh that's an

00:15:23,040 --> 00:15:26,399
area of code i'm familiar with

00:15:24,560 --> 00:15:27,440
she clicked on the link jumped uh

00:15:26,399 --> 00:15:29,199
directly to the source of the error

00:15:27,440 --> 00:15:30,079
message was quickly able to commit a

00:15:29,199 --> 00:15:33,040
patch

00:15:30,079 --> 00:15:34,320
um so this kind of uh uh it's like two

00:15:33,040 --> 00:15:36,720
birds one stone

00:15:34,320 --> 00:15:37,360
um we were able to resolve the

00:15:36,720 --> 00:15:39,279
production

00:15:37,360 --> 00:15:40,399
more quickly than if a single engineer

00:15:39,279 --> 00:15:43,360
had to go and figure out

00:15:40,399 --> 00:15:45,120
all this for themselves uh and in

00:15:43,360 --> 00:15:45,680
addition we're able to kind of loop more

00:15:45,120 --> 00:15:47,759
people

00:15:45,680 --> 00:15:50,639
uh constructively and collaboratively

00:15:47,759 --> 00:15:50,639
into this discussion

00:15:50,800 --> 00:15:56,160
uh kind of in the same vein so

00:15:54,079 --> 00:15:57,519
patrick mckenzie who is a software

00:15:56,160 --> 00:15:59,279
engineer at stripe

00:15:57,519 --> 00:16:01,199
stripe uses live grep which was written

00:15:59,279 --> 00:16:03,199
by uh this engineer by the name of

00:16:01,199 --> 00:16:06,480
nelson elhidge he used to be at stripe

00:16:03,199 --> 00:16:06,959
um was uh tweeting about how how much he

00:16:06,480 --> 00:16:08,800
loves

00:16:06,959 --> 00:16:10,880
their internal code search tool uh live

00:16:08,800 --> 00:16:12,560
grep in particular he said you know when

00:16:10,880 --> 00:16:14,399
someone asks him a question

00:16:12,560 --> 00:16:15,920
about code internally the first thing he

00:16:14,399 --> 00:16:17,199
does is he answers the question because

00:16:15,920 --> 00:16:18,959
he's a gentleman

00:16:17,199 --> 00:16:20,079
but the second thing is he he also tries

00:16:18,959 --> 00:16:21,279
to give them a search query that they

00:16:20,079 --> 00:16:23,279
could run themselves the next time

00:16:21,279 --> 00:16:24,000
around and a heuristic for which result

00:16:23,279 --> 00:16:25,199
to click on

00:16:24,000 --> 00:16:27,199
so that they can kind of teach

00:16:25,199 --> 00:16:30,399
themselves uh this

00:16:27,199 --> 00:16:30,399
knowledge in the future

00:16:30,480 --> 00:16:34,480
leveling up a bit um there's uh we can

00:16:33,519 --> 00:16:36,399
talk talk about

00:16:34,480 --> 00:16:38,160
how the value of code search to

00:16:36,399 --> 00:16:39,920
individuals eventually bubbles up to

00:16:38,160 --> 00:16:43,360
value for the entire community so

00:16:39,920 --> 00:16:45,759
debian linux uses a code search tool

00:16:43,360 --> 00:16:47,680
written by michael stapleberg

00:16:45,759 --> 00:16:49,279
and he's got all these testimonials on

00:16:47,680 --> 00:16:51,279
his site many of which

00:16:49,279 --> 00:16:52,399
touch upon the use cases that we we just

00:16:51,279 --> 00:16:55,360
discussed

00:16:52,399 --> 00:16:56,320
but overall the effect is to create this

00:16:55,360 --> 00:16:58,079
uh

00:16:56,320 --> 00:16:59,600
learning tool that the community can use

00:16:58,079 --> 00:17:00,320
and help facilitate the transfer

00:16:59,600 --> 00:17:03,519
knowledge

00:17:00,320 --> 00:17:05,039
among the the community of contributors

00:17:03,519 --> 00:17:07,679
and make it so that discussions are

00:17:05,039 --> 00:17:09,839
constructive collaborative effective

00:17:07,679 --> 00:17:11,679
and everyone feels like they can quickly

00:17:09,839 --> 00:17:14,319
gain understanding what's going on

00:17:11,679 --> 00:17:16,160
in the code base and it's not just open

00:17:14,319 --> 00:17:18,319
source communities

00:17:16,160 --> 00:17:19,679
kern the organization that uh runs the

00:17:18,319 --> 00:17:22,160
large hadron collider

00:17:19,679 --> 00:17:23,919
uh in europe that thing runs on code uh

00:17:22,160 --> 00:17:24,640
and they use code search to let their

00:17:23,919 --> 00:17:26,480
developers

00:17:24,640 --> 00:17:27,679
uh move fast but not break things

00:17:26,480 --> 00:17:29,919
because if you take the l

00:17:27,679 --> 00:17:32,000
large hatred and collider down that

00:17:29,919 --> 00:17:34,880
takes a lot of scientists and physicists

00:17:32,000 --> 00:17:35,600
and researchers offline and costs a lot

00:17:34,880 --> 00:17:37,760
of money

00:17:35,600 --> 00:17:40,240
and so code search allows them to make

00:17:37,760 --> 00:17:44,640
changes to their code quickly

00:17:40,240 --> 00:17:46,799
build things uh with confidence and ease

00:17:44,640 --> 00:17:48,400
and with uh the sense that they're not

00:17:46,799 --> 00:17:49,280
gonna break something inadvertently and

00:17:48,400 --> 00:17:51,120
also helps with

00:17:49,280 --> 00:17:52,480
things like code reuse and and these

00:17:51,120 --> 00:17:54,240
large-scale refactors that we talked

00:17:52,480 --> 00:17:56,080
about earlier

00:17:54,240 --> 00:17:58,400
and so all these different communities

00:17:56,080 --> 00:18:00,080
and uh uh companies and organizations

00:17:58,400 --> 00:18:01,600
are using code search now

00:18:00,080 --> 00:18:04,480
if you're thinking about adopting you'll

00:18:01,600 --> 00:18:06,400
be in good company

00:18:04,480 --> 00:18:07,760
and so to recap you know code search is

00:18:06,400 --> 00:18:09,600
is really this integral tool to

00:18:07,760 --> 00:18:10,559
understanding big code bases uh it's

00:18:09,600 --> 00:18:12,240
really

00:18:10,559 --> 00:18:13,760
essential if you want to do software

00:18:12,240 --> 00:18:16,240
development

00:18:13,760 --> 00:18:18,400
at scale and there have been a lot of

00:18:16,240 --> 00:18:19,360
big code bases whether in open source or

00:18:18,400 --> 00:18:21,440
inside

00:18:19,360 --> 00:18:23,200
organizations and companies that are

00:18:21,440 --> 00:18:25,360
already adopting code search and using

00:18:23,200 --> 00:18:28,640
it and relying on it heavily

00:18:25,360 --> 00:18:30,400
and finally you yes you

00:18:28,640 --> 00:18:32,400
you have a big code base now because we

00:18:30,400 --> 00:18:34,000
live in this world where

00:18:32,400 --> 00:18:36,080
many many more organizations are

00:18:34,000 --> 00:18:38,080
starting to have code bases that were at

00:18:36,080 --> 00:18:39,039
the scale of what bell labs had in the

00:18:38,080 --> 00:18:42,000
1980s

00:18:39,039 --> 00:18:42,480
or what google had in the 2000s and even

00:18:42,000 --> 00:18:44,640
if you're

00:18:42,480 --> 00:18:46,080
a small startup you're depending on this

00:18:44,640 --> 00:18:47,840
huge universe

00:18:46,080 --> 00:18:50,240
of open source uh you're taking

00:18:47,840 --> 00:18:51,520
advantage of that knowledge graph

00:18:50,240 --> 00:18:54,000
but what that means is your your

00:18:51,520 --> 00:18:56,000
effective code base is much larger

00:18:54,000 --> 00:18:57,840
than the the code that your engineers

00:18:56,000 --> 00:18:59,600
wrote uh and that's a scary thing

00:18:57,840 --> 00:19:01,200
because all that is unfamiliar code and

00:18:59,600 --> 00:19:03,840
it's code that could potentially

00:19:01,200 --> 00:19:05,679
uh cause a bug or critical security flaw

00:19:03,840 --> 00:19:07,679
or or break your app in production

00:19:05,679 --> 00:19:09,200
and so you need code search in order for

00:19:07,679 --> 00:19:11,520
your engineers to be able to

00:19:09,200 --> 00:19:12,480
understand what's going on uh in that

00:19:11,520 --> 00:19:13,919
code

00:19:12,480 --> 00:19:15,679
you need code search for for your

00:19:13,919 --> 00:19:18,720
engineers to grok what's going on

00:19:15,679 --> 00:19:19,840
in in that big code base so you need

00:19:18,720 --> 00:19:22,160
code search

00:19:19,840 --> 00:19:23,600
i'll finish here with a couple links to

00:19:22,160 --> 00:19:25,600
what i think are great code search

00:19:23,600 --> 00:19:27,120
engines there's opengrock which was

00:19:25,600 --> 00:19:28,880
uh initially developed at some

00:19:27,120 --> 00:19:30,880
microsystems uh

00:19:28,880 --> 00:19:32,480
and uh ultimately acquired by oracle

00:19:30,880 --> 00:19:34,320
there's live graph the thing that stripe

00:19:32,480 --> 00:19:35,600
uses written by nelson ellihidge

00:19:34,320 --> 00:19:37,120
there's hound which is originally

00:19:35,600 --> 00:19:38,880
developed by engineers at etsy and

00:19:37,120 --> 00:19:41,360
subsequently open source and of course

00:19:38,880 --> 00:19:42,000
there's also source graph which is open

00:19:41,360 --> 00:19:44,400
core

00:19:42,000 --> 00:19:45,039
99 of our functionality is in the open

00:19:44,400 --> 00:19:48,320
source

00:19:45,039 --> 00:19:49,679
uh part of our code base uh and uh we're

00:19:48,320 --> 00:19:52,000
aiming to build an awesome

00:19:49,679 --> 00:19:52,960
code search engine for both open source

00:19:52,000 --> 00:19:57,520
uh communities

00:19:52,960 --> 00:19:57,520
and uh companies uh alike

00:19:57,760 --> 00:20:01,039
so that's my spiel um if you have any

00:20:00,000 --> 00:20:03,039
questions please

00:20:01,039 --> 00:20:04,480
reach out love to hear from you i'm just

00:20:03,039 --> 00:20:06,000
beyond at twitter or

00:20:04,480 --> 00:20:14,480
feel free to shoot me an email at beyond

00:20:06,000 --> 00:20:14,480

YouTube URL: https://www.youtube.com/watch?v=J4lArxTWiIY


