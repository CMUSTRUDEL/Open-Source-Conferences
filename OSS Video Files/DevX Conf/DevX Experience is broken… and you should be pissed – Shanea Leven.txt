Title: DevX Experience is broken… and you should be pissed – Shanea Leven
Publication date: 2021-04-26
Playlist: DevX Conf
Description: 
	Our day to day developer experience is filled with practices that are inefficient, panic ridden and just down-right an utter slog. Let's talk about how we can create a more delightful daily experience by shifting our perspective from just in time understanding to continuous code understanding.

About DevX Conf:
DevX Conf is a two-day virtual conference. It's a space where creators collaborate, listen, discuss and declutter our workflows, toolchains, and minds. To improve developer experience. Organized by Gitpod.
https://devxconf.org/
Captions: 
	00:00:13,679 --> 00:00:18,720
thank you so much for joining me today

00:00:15,759 --> 00:00:19,600
i'm shania levin when i got connected to

00:00:18,720 --> 00:00:21,840
johan from

00:00:19,600 --> 00:00:23,279
gitpod i started thinking about what i

00:00:21,840 --> 00:00:24,640
wanted to share about the developer

00:00:23,279 --> 00:00:26,480
experience

00:00:24,640 --> 00:00:28,800
this conference which i'm so honored to

00:00:26,480 --> 00:00:30,400
be at is about our daily experience when

00:00:28,800 --> 00:00:31,920
trying to get the job done

00:00:30,400 --> 00:00:33,760
and how that experience should be

00:00:31,920 --> 00:00:36,079
efficient sustainable

00:00:33,760 --> 00:00:38,320
and joyful and as i thought more about

00:00:36,079 --> 00:00:38,960
it the thing that felt most authentic to

00:00:38,320 --> 00:00:43,040
me

00:00:38,960 --> 00:00:46,239
was that our experience as developers

00:00:43,040 --> 00:00:49,280
suck compared to this ideal and

00:00:46,239 --> 00:00:50,879
you should be pissed about that

00:00:49,280 --> 00:00:53,039
our day-to-day experience is filled with

00:00:50,879 --> 00:00:55,360
practices that are inefficient

00:00:53,039 --> 00:00:56,320
panic ridden and just a downright utter

00:00:55,360 --> 00:00:58,800
slog

00:00:56,320 --> 00:01:00,800
let me illustrate to you what i mean i'm

00:00:58,800 --> 00:01:02,160
going to take you back to 2018

00:01:00,800 --> 00:01:04,960
and i'm a senior director of product

00:01:02,160 --> 00:01:07,200
docker and i was so excited

00:01:04,960 --> 00:01:09,040
i'm in a new position i'm working on

00:01:07,200 --> 00:01:10,720
really complex technical challenges for

00:01:09,040 --> 00:01:12,240
developers just like me

00:01:10,720 --> 00:01:13,760
on a technology that i'm really

00:01:12,240 --> 00:01:15,040
passionate about

00:01:13,760 --> 00:01:17,520
and this and i thought this is going to

00:01:15,040 --> 00:01:18,960
be great one of the many features that

00:01:17,520 --> 00:01:22,000
our dev team was working on

00:01:18,960 --> 00:01:23,520
was the ability to launch the number of

00:01:22,000 --> 00:01:25,600
security vulnerabilities in docker

00:01:23,520 --> 00:01:26,880
images in dockerhead

00:01:25,600 --> 00:01:28,479
this was a feature that was going to

00:01:26,880 --> 00:01:30,720
make a huge impact for millions of

00:01:28,479 --> 00:01:33,040
developers all over the world

00:01:30,720 --> 00:01:34,560
and then two days before the launch the

00:01:33,040 --> 00:01:36,479
whole team were sitting around a

00:01:34,560 --> 00:01:37,759
table bug bashing as we always did

00:01:36,479 --> 00:01:40,079
before a major

00:01:37,759 --> 00:01:41,600
release and one of my colleagues finds

00:01:40,079 --> 00:01:42,240
the number of vulnerabilities on the

00:01:41,600 --> 00:01:43,600
front end

00:01:42,240 --> 00:01:46,479
isn't matching the number on the back

00:01:43,600 --> 00:01:47,759
end so our team is digging around

00:01:46,479 --> 00:01:49,600
and we look at each other and we

00:01:47,759 --> 00:01:50,720
literally have no idea why it's doing

00:01:49,600 --> 00:01:53,200
this

00:01:50,720 --> 00:01:54,000
finally we isolate the problem we think

00:01:53,200 --> 00:01:56,880
it's coming from this really

00:01:54,000 --> 00:01:58,399
critical part of the code base we ask

00:01:56,880 --> 00:02:00,000
each other just does anybody know this

00:01:58,399 --> 00:02:02,240
area of the code base

00:02:00,000 --> 00:02:03,600
and none of us do so my heart starts to

00:02:02,240 --> 00:02:06,159
race a little bit

00:02:03,600 --> 00:02:07,759
no big deal so i asked his who does know

00:02:06,159 --> 00:02:09,520
this part of the code base

00:02:07,759 --> 00:02:11,039
one of my team members says well this

00:02:09,520 --> 00:02:13,680
other person is the expert on that

00:02:11,039 --> 00:02:15,280
and i say great let's ask him and my

00:02:13,680 --> 00:02:18,480
colleague says he's no longer

00:02:15,280 --> 00:02:21,680
with docker and my heart sank

00:02:18,480 --> 00:02:24,319
and i ask is is he the only person

00:02:21,680 --> 00:02:25,520
so there's literally no one left at all

00:02:24,319 --> 00:02:29,200
and then

00:02:25,520 --> 00:02:30,239
panic with no one left to ask we do what

00:02:29,200 --> 00:02:32,239
anyone would do

00:02:30,239 --> 00:02:33,840
we start scrambling to find old

00:02:32,239 --> 00:02:36,800
documentation to try to find

00:02:33,840 --> 00:02:38,319
some inclination of how this works we're

00:02:36,800 --> 00:02:40,000
trying to hunt down no documents

00:02:38,319 --> 00:02:41,680
remember old search terms

00:02:40,000 --> 00:02:43,280
but nothing was coming up no matter how

00:02:41,680 --> 00:02:44,959
hard we tried

00:02:43,280 --> 00:02:46,800
and our hypothesis was if there was

00:02:44,959 --> 00:02:47,440
documentation it was owned by the folks

00:02:46,800 --> 00:02:50,239
who had left

00:02:47,440 --> 00:02:52,160
and we didn't have access to it so then

00:02:50,239 --> 00:02:55,280
there's only one thing left to do

00:02:52,160 --> 00:02:55,840
which is read the code one of my team

00:02:55,280 --> 00:02:57,680
members

00:02:55,840 --> 00:03:00,239
shouts out it's going to take us a month

00:02:57,680 --> 00:03:02,000
to understand all of this

00:03:00,239 --> 00:03:04,400
this part of the code base was so

00:03:02,000 --> 00:03:05,519
critical that we were all terrified that

00:03:04,400 --> 00:03:07,360
if we touch it

00:03:05,519 --> 00:03:08,800
and we broke it it was going to cause

00:03:07,360 --> 00:03:09,840
catastrophic downstream effects of

00:03:08,800 --> 00:03:11,360
something else

00:03:09,840 --> 00:03:14,000
and with the launch happening in two

00:03:11,360 --> 00:03:15,760
days there was simply no time to be

00:03:14,000 --> 00:03:17,599
confident that we can make the necessary

00:03:15,760 --> 00:03:20,720
fixes

00:03:17,599 --> 00:03:22,159
and this happens all the time

00:03:20,720 --> 00:03:24,319
i know i'm not the only one with this

00:03:22,159 --> 00:03:25,840
experience and here's what i took away

00:03:24,319 --> 00:03:28,239
from that

00:03:25,840 --> 00:03:30,239
our day-to-day process is basically

00:03:28,239 --> 00:03:33,200
outlined by the sdlc right

00:03:30,239 --> 00:03:34,799
plan code build test release deploy

00:03:33,200 --> 00:03:37,200
operate and monitor

00:03:34,799 --> 00:03:38,080
but there's one thing that we do every

00:03:37,200 --> 00:03:40,239
day that

00:03:38,080 --> 00:03:42,560
no one talks about and that is one of

00:03:40,239 --> 00:03:46,720
the main culprits of the inefficiency

00:03:42,560 --> 00:03:50,000
dismay in panic and that is our ability

00:03:46,720 --> 00:03:52,879
to understand how our systems work

00:03:50,000 --> 00:03:53,360
we as engineers do not know at any given

00:03:52,879 --> 00:03:56,239
point

00:03:53,360 --> 00:03:56,959
how our entire system works and i'm sure

00:03:56,239 --> 00:03:58,720
you're thinking

00:03:56,959 --> 00:04:00,640
of course not there's too much code for

00:03:58,720 --> 00:04:03,760
any one developer to know

00:04:00,640 --> 00:04:05,680
and that is precisely my point

00:04:03,760 --> 00:04:08,080
we all tend to practice what's called

00:04:05,680 --> 00:04:10,239
just in time understanding

00:04:08,080 --> 00:04:11,360
since it's so grueling to learn

00:04:10,239 --> 00:04:13,920
everything

00:04:11,360 --> 00:04:14,879
we learn just enough to get our tasks

00:04:13,920 --> 00:04:17,040
done

00:04:14,879 --> 00:04:18,560
so why is it so hard to understand how

00:04:17,040 --> 00:04:20,639
the system works

00:04:18,560 --> 00:04:23,040
well one the process of reading and

00:04:20,639 --> 00:04:25,600
understanding code is inefficient

00:04:23,040 --> 00:04:27,600
we read code one line at a time and

00:04:25,600 --> 00:04:29,600
imagine how our systems work

00:04:27,600 --> 00:04:30,800
and there's very little to help us make

00:04:29,600 --> 00:04:33,199
sense of the code

00:04:30,800 --> 00:04:34,800
the data is abstract with types or it's

00:04:33,199 --> 00:04:36,960
literally completely missing if the

00:04:34,800 --> 00:04:38,479
if it's untyped but reading and

00:04:36,960 --> 00:04:39,520
understanding code is at least 60

00:04:38,479 --> 00:04:41,360
percent of the job

00:04:39,520 --> 00:04:43,040
between onboarding debugging code

00:04:41,360 --> 00:04:46,080
reviews and feature work

00:04:43,040 --> 00:04:48,400
but reading is the most manual way to

00:04:46,080 --> 00:04:49,360
extract information out of code it

00:04:48,400 --> 00:04:51,280
doesn't scale

00:04:49,360 --> 00:04:52,960
and it leads to incomplete information

00:04:51,280 --> 00:04:54,639
and uncertainty

00:04:52,960 --> 00:04:57,440
for every other part of our daily lives

00:04:54,639 --> 00:05:00,560
we optimize it we have tools

00:04:57,440 --> 00:05:03,440
two the way we understand

00:05:00,560 --> 00:05:04,720
code is missing key information if

00:05:03,440 --> 00:05:06,800
you're reading the code

00:05:04,720 --> 00:05:09,440
you never really understand why the

00:05:06,800 --> 00:05:11,280
previous developers did what they did

00:05:09,440 --> 00:05:12,560
i don't know one developer who

00:05:11,280 --> 00:05:15,840
consistently puts

00:05:12,560 --> 00:05:17,440
why they did what they did in a comment

00:05:15,840 --> 00:05:19,360
but even if their thought process was

00:05:17,440 --> 00:05:21,759
captured code bases are changing

00:05:19,360 --> 00:05:23,360
all the time it quickly gets out of date

00:05:21,759 --> 00:05:25,280
our code bases are changing with

00:05:23,360 --> 00:05:26,880
literally every single pull request

00:05:25,280 --> 00:05:28,720
it's no wonder why we don't document

00:05:26,880 --> 00:05:31,520
anything

00:05:28,720 --> 00:05:32,880
not only is it hard and inefficient but

00:05:31,520 --> 00:05:34,960
every developer is building

00:05:32,880 --> 00:05:36,560
their own unique understanding of how

00:05:34,960 --> 00:05:38,160
the code base works

00:05:36,560 --> 00:05:39,919
that understanding walks right out of

00:05:38,160 --> 00:05:43,440
the door with each engineer

00:05:39,919 --> 00:05:45,759
when they leave when it's in our heads

00:05:43,440 --> 00:05:47,440
it's harder to share with others or

00:05:45,759 --> 00:05:49,840
collaborate on

00:05:47,440 --> 00:05:51,759
it's also using up valuable brain power

00:05:49,840 --> 00:05:54,240
that could be used to solve the actual

00:05:51,759 --> 00:05:57,360
problem that we're trying to solve

00:05:54,240 --> 00:05:58,240
so all of this is happening i remember i

00:05:57,360 --> 00:06:01,520
had my

00:05:58,240 --> 00:06:05,039
head and my hands and i think

00:06:01,520 --> 00:06:08,720
why is all of this happening and that

00:06:05,039 --> 00:06:11,440
quickly turned to me being pissed off

00:06:08,720 --> 00:06:13,360
i thought how is it that we never know

00:06:11,440 --> 00:06:15,440
how our code bases work

00:06:13,360 --> 00:06:16,800
because as i reflected this wasn't the

00:06:15,440 --> 00:06:19,440
first or the second

00:06:16,800 --> 00:06:21,440
or the third time that this has happened

00:06:19,440 --> 00:06:23,360
and these like snippets of conversation

00:06:21,440 --> 00:06:25,680
started popping up in my head like

00:06:23,360 --> 00:06:26,479
debates over how we think something

00:06:25,680 --> 00:06:27,840
works

00:06:26,479 --> 00:06:30,000
waiting several months for other

00:06:27,840 --> 00:06:33,039
engineers to get on board to the team

00:06:30,000 --> 00:06:35,759
or worse that one phrase you know

00:06:33,039 --> 00:06:38,080
we don't know until we get in there and

00:06:35,759 --> 00:06:40,240
i thought there has to be a better way

00:06:38,080 --> 00:06:41,759
we're making amazing sophisticated tools

00:06:40,240 --> 00:06:43,840
to get understanding out of under

00:06:41,759 --> 00:06:46,160
other industries cancer detection

00:06:43,840 --> 00:06:47,360
semantic meaning with gpt3 and summary

00:06:46,160 --> 00:06:49,520
generation

00:06:47,360 --> 00:06:51,280
and yet at any given moment i have to

00:06:49,520 --> 00:06:53,840
code die for days or weeks

00:06:51,280 --> 00:06:54,960
to understand how our systems work so i

00:06:53,840 --> 00:06:55,680
thought maybe there's something wrong

00:06:54,960 --> 00:06:58,319
with me

00:06:55,680 --> 00:06:59,520
so i started researching to see if

00:06:58,319 --> 00:07:00,960
someone else has solved this problem

00:06:59,520 --> 00:07:04,560
before

00:07:00,960 --> 00:07:07,440
lots of research the oldest one that i

00:07:04,560 --> 00:07:07,840
find was in a blog post by tudor gerba

00:07:07,440 --> 00:07:11,520
and

00:07:07,840 --> 00:07:13,840
he found in a book in 1979 by

00:07:11,520 --> 00:07:15,440
zelkowitz shaw and gannon entitled the

00:07:13,840 --> 00:07:16,560
principles of software engineering and

00:07:15,440 --> 00:07:19,280
design

00:07:16,560 --> 00:07:20,240
and it said that the most development

00:07:19,280 --> 00:07:23,599
time was spent

00:07:20,240 --> 00:07:25,919
on maintenance in more recent papers

00:07:23,599 --> 00:07:27,440
it's now called program comprehension

00:07:25,919 --> 00:07:30,000
but it's essentially

00:07:27,440 --> 00:07:31,919
the same problem turns out we've been

00:07:30,000 --> 00:07:33,199
trying to solve this problem for 40

00:07:31,919 --> 00:07:36,400
years

00:07:33,199 --> 00:07:39,199
yes there is an engineering problem

00:07:36,400 --> 00:07:40,800
that we do every day that has not been

00:07:39,199 --> 00:07:41,440
solved and has been staring us in the

00:07:40,800 --> 00:07:44,319
face

00:07:41,440 --> 00:07:45,919
for 40 years so i started talking to

00:07:44,319 --> 00:07:47,680
other engineers to validate the problem

00:07:45,919 --> 00:07:48,720
and to try to figure out how this is all

00:07:47,680 --> 00:07:50,720
happening

00:07:48,720 --> 00:07:51,919
one engineer i spoke to was the first

00:07:50,720 --> 00:07:53,599
engineer of his company

00:07:51,919 --> 00:07:55,199
and he now you know ascended to the be

00:07:53,599 --> 00:07:57,360
on the leadership team so

00:07:55,199 --> 00:07:58,639
his team of five started to build this

00:07:57,360 --> 00:08:01,199
feature

00:07:58,639 --> 00:08:02,000
for one reason or another no one told

00:08:01,199 --> 00:08:03,599
the team

00:08:02,000 --> 00:08:05,120
that this feature was more complicated

00:08:03,599 --> 00:08:06,639
than they knew

00:08:05,120 --> 00:08:07,840
so the engineers thought that they knew

00:08:06,639 --> 00:08:09,280
everything of how the feature worked

00:08:07,840 --> 00:08:13,120
they worked on the feature

00:08:09,280 --> 00:08:14,960
released it and then broke everything

00:08:13,120 --> 00:08:16,400
the team reverted all their work and

00:08:14,960 --> 00:08:18,000
started over

00:08:16,400 --> 00:08:19,840
the whole team spent another another

00:08:18,000 --> 00:08:21,680
couple of weeks co-diving

00:08:19,840 --> 00:08:23,360
drawing diagrams of how the surrounding

00:08:21,680 --> 00:08:24,800
code worked until they could put

00:08:23,360 --> 00:08:26,560
together a plan

00:08:24,800 --> 00:08:28,479
a new plan to build the feature

00:08:26,560 --> 00:08:30,319
correctly from scratch

00:08:28,479 --> 00:08:31,520
there was nothing at this company that

00:08:30,319 --> 00:08:34,000
helped them to know

00:08:31,520 --> 00:08:34,640
the problem was more complex than they

00:08:34,000 --> 00:08:38,479
thought

00:08:34,640 --> 00:08:40,560
and because one conversation was missed

00:08:38,479 --> 00:08:41,760
there was weeks of wasted time and

00:08:40,560 --> 00:08:44,320
effort

00:08:41,760 --> 00:08:45,040
spoke to another engineer whose company

00:08:44,320 --> 00:08:48,320
had

00:08:45,040 --> 00:08:50,000
code no one would touch ninety percent

00:08:48,320 --> 00:08:52,080
of the traffic flowed through this one

00:08:50,000 --> 00:08:53,040
feature so if you mess it up the site

00:08:52,080 --> 00:08:55,839
goes down

00:08:53,040 --> 00:08:57,360
super complicated super scary and the

00:08:55,839 --> 00:08:59,600
way it was written it was really

00:08:57,360 --> 00:09:00,800
easy to make expensive queries without

00:08:59,600 --> 00:09:03,600
knowing it

00:09:00,800 --> 00:09:04,800
and it was just too expensive to ramp up

00:09:03,600 --> 00:09:07,200
anyone on the code

00:09:04,800 --> 00:09:09,040
so they just like didn't fix any bugs or

00:09:07,200 --> 00:09:12,160
build any new features on it

00:09:09,040 --> 00:09:14,480
for years we live

00:09:12,160 --> 00:09:15,760
every single day with this day-to-day

00:09:14,480 --> 00:09:18,560
stress that our

00:09:15,760 --> 00:09:20,160
code can bring an entire company down

00:09:18,560 --> 00:09:21,040
not to mention if we work on code that

00:09:20,160 --> 00:09:24,080
saves lives

00:09:21,040 --> 00:09:25,839
that's pretty stressful so here's where

00:09:24,080 --> 00:09:28,560
i landed

00:09:25,839 --> 00:09:29,920
we treat this skill of reading code for

00:09:28,560 --> 00:09:33,120
understanding

00:09:29,920 --> 00:09:36,959
as a badge of honor that must be

00:09:33,120 --> 00:09:39,839
earned in order to be a real engineer

00:09:36,959 --> 00:09:41,680
and those who struggle with it are told

00:09:39,839 --> 00:09:44,640
they aren't cut out for engineering

00:09:41,680 --> 00:09:46,720
and this is why it hasn't been solved we

00:09:44,640 --> 00:09:47,680
treat this as just the necessary part of

00:09:46,720 --> 00:09:50,240
the job

00:09:47,680 --> 00:09:50,720
but code understanding is a separate

00:09:50,240 --> 00:09:54,240
skill

00:09:50,720 --> 00:09:55,839
that happens every single day not just

00:09:54,240 --> 00:09:58,959
when we're ramping up on a brand new

00:09:55,839 --> 00:10:01,360
code base we should treat it as such

00:09:58,959 --> 00:10:02,480
our ability to read and understand code

00:10:01,360 --> 00:10:05,279
doesn't even show

00:10:02,480 --> 00:10:06,320
up on the sclc the biggest innovation

00:10:05,279 --> 00:10:08,959
that i've seen is like

00:10:06,320 --> 00:10:10,000
go to declaration and it doesn't have to

00:10:08,959 --> 00:10:12,320
be this way

00:10:10,000 --> 00:10:14,240
we must build better practices and

00:10:12,320 --> 00:10:16,240
standards around this

00:10:14,240 --> 00:10:17,680
just because we can't understand

00:10:16,240 --> 00:10:19,920
everything doesn't

00:10:17,680 --> 00:10:22,079
mean that we shouldn't make tools to

00:10:19,920 --> 00:10:23,680
help make understanding easier

00:10:22,079 --> 00:10:25,839
even if we were used to just-in-time

00:10:23,680 --> 00:10:27,760
understanding tools can help us be more

00:10:25,839 --> 00:10:29,200
confident that we have understood enough

00:10:27,760 --> 00:10:30,160
to get our tasks done without breaking

00:10:29,200 --> 00:10:33,200
things

00:10:30,160 --> 00:10:34,320
so imagine a world at any point you have

00:10:33,200 --> 00:10:35,600
a question

00:10:34,320 --> 00:10:38,000
you can literally just look at a

00:10:35,600 --> 00:10:40,079
visualization of how that system works

00:10:38,000 --> 00:10:42,000
and quickly be able to understand it

00:10:40,079 --> 00:10:43,600
instead of struggling to understand just

00:10:42,000 --> 00:10:45,839
enough to get your test done

00:10:43,600 --> 00:10:47,120
imagine if those visualizations remain

00:10:45,839 --> 00:10:48,800
connected to the code

00:10:47,120 --> 00:10:51,839
and dynamically changes your code

00:10:48,800 --> 00:10:53,120
changes so that it's always up-to-date

00:10:51,839 --> 00:10:55,600
i had the realization that this is

00:10:53,120 --> 00:10:57,839
possible and i call this phenomenon

00:10:55,600 --> 00:11:00,160
continuous code understanding as opposed

00:10:57,839 --> 00:11:02,480
to just in time understanding

00:11:00,160 --> 00:11:04,000
continuous code understanding is the

00:11:02,480 --> 00:11:05,760
ecosystem of data of

00:11:04,000 --> 00:11:07,360
how and why our systems work the way

00:11:05,760 --> 00:11:09,360
they do

00:11:07,360 --> 00:11:11,600
but continuous code understanding is

00:11:09,360 --> 00:11:14,160
just like a system like any other system

00:11:11,600 --> 00:11:15,279
that we can engineer it's made up of

00:11:14,160 --> 00:11:17,360
inputs and outputs

00:11:15,279 --> 00:11:18,560
and can be optimized and when something

00:11:17,360 --> 00:11:21,120
gets optimized

00:11:18,560 --> 00:11:22,880
you can build tooling around it so i

00:11:21,120 --> 00:11:26,800
started looking for tools like this

00:11:22,880 --> 00:11:29,519
and of course i find nothing so game on

00:11:26,800 --> 00:11:31,040
that's how code c was born it's our

00:11:29,519 --> 00:11:33,440
mission to help developers master

00:11:31,040 --> 00:11:35,200
continuous understanding of code bases

00:11:33,440 --> 00:11:37,360
so codesy is a tool to visually

00:11:35,200 --> 00:11:39,440
understand how your code works

00:11:37,360 --> 00:11:41,360
so that you can dynamically document and

00:11:39,440 --> 00:11:43,360
sharing it continuously

00:11:41,360 --> 00:11:44,560
now we're building amazing never before

00:11:43,360 --> 00:11:46,880
seen tools but

00:11:44,560 --> 00:11:48,079
let's set code see aside for a minute

00:11:46,880 --> 00:11:50,959
whether you trash or not

00:11:48,079 --> 00:11:53,200
it's not about us this is about you you

00:11:50,959 --> 00:11:55,760
don't have to live with all the panic

00:11:53,200 --> 00:11:57,600
and uncertainty and stress that just in

00:11:55,760 --> 00:12:00,320
time understanding brings

00:11:57,600 --> 00:12:01,200
here's what you can do the code we write

00:12:00,320 --> 00:12:04,240
will be read

00:12:01,200 --> 00:12:08,079
10 times more often than it was written

00:12:04,240 --> 00:12:10,800
write code that is easy to understand

00:12:08,079 --> 00:12:12,959
and to read and avoid being clever no

00:12:10,800 --> 00:12:17,760
matter how good it feels

00:12:12,959 --> 00:12:19,680
two write down the why not just the what

00:12:17,760 --> 00:12:21,839
even if you do say we consider these

00:12:19,680 --> 00:12:25,120
three options and picked option two

00:12:21,839 --> 00:12:28,399
that's still not enough why why

00:12:25,120 --> 00:12:30,160
why why why if you have to we can read

00:12:28,399 --> 00:12:32,079
the code to understand what you did

00:12:30,160 --> 00:12:33,760
but the code never tells us why so

00:12:32,079 --> 00:12:34,560
please share your brilliance with the

00:12:33,760 --> 00:12:37,519
world

00:12:34,560 --> 00:12:39,360
and save future code divers some trouble

00:12:37,519 --> 00:12:42,320
three

00:12:39,360 --> 00:12:43,279
actually put links to the decisions and

00:12:42,320 --> 00:12:45,200
planning docs

00:12:43,279 --> 00:12:46,959
into your pull requests it's not enough

00:12:45,200 --> 00:12:49,120
to just write down why you have to link

00:12:46,959 --> 00:12:51,200
it to where someone's gonna find it

00:12:49,120 --> 00:12:52,800
when the next person comes along they

00:12:51,200 --> 00:12:55,519
don't just want to know

00:12:52,800 --> 00:12:57,279
how it works they want to know why you

00:12:55,519 --> 00:13:00,320
didn't build it some other way

00:12:57,279 --> 00:13:01,600
that seems better to them if you

00:13:00,320 --> 00:13:03,839
consider it an option

00:13:01,600 --> 00:13:04,639
and have good reasons for not using that

00:13:03,839 --> 00:13:07,760
option

00:13:04,639 --> 00:13:08,800
write it down otherwise the next person

00:13:07,760 --> 00:13:11,760
has to figure it out

00:13:08,800 --> 00:13:11,760
all over again

00:13:12,639 --> 00:13:16,160
write tests tests are a detailed

00:13:15,519 --> 00:13:18,959
description

00:13:16,160 --> 00:13:20,720
of how your code is supposed to work and

00:13:18,959 --> 00:13:23,519
they tell you

00:13:20,720 --> 00:13:23,920
when they get out of date i hear people

00:13:23,519 --> 00:13:25,680
ask

00:13:23,920 --> 00:13:27,519
for documentation all the time that

00:13:25,680 --> 00:13:29,920
stays up to date automatically

00:13:27,519 --> 00:13:31,680
but too often they don't use the auto

00:13:29,920 --> 00:13:35,440
updating documentation system

00:13:31,680 --> 00:13:38,880
they already have tests tests

00:13:35,440 --> 00:13:40,800
actually enable you to go a lot faster

00:13:38,880 --> 00:13:42,720
and if your team is struggling to write

00:13:40,800 --> 00:13:44,399
tests maybe you can invest some time to

00:13:42,720 --> 00:13:46,240
make it easier to write tests in your

00:13:44,399 --> 00:13:49,600
code base

00:13:46,240 --> 00:13:51,360
and finally build better tools

00:13:49,600 --> 00:13:52,880
the continuous understanding space is

00:13:51,360 --> 00:13:56,000
huge in code c

00:13:52,880 --> 00:13:57,680
it can only build a small portion of it

00:13:56,000 --> 00:13:59,040
there's way more to build than we're

00:13:57,680 --> 00:14:00,839
able to do

00:13:59,040 --> 00:14:02,079
so let's build a better ecosystem

00:14:00,839 --> 00:14:03,839
together

00:14:02,079 --> 00:14:06,079
so let's put this all together and go

00:14:03,839 --> 00:14:08,240
back to docker for a sec

00:14:06,079 --> 00:14:10,160
with better tools i could have just

00:14:08,240 --> 00:14:11,760
recorded the execution of scanning an

00:14:10,160 --> 00:14:13,920
image for vulnerabilities

00:14:11,760 --> 00:14:16,000
i would have seen a code execution map

00:14:13,920 --> 00:14:18,320
of the front end and the backing code

00:14:16,000 --> 00:14:20,079
i would have seen how the data changed

00:14:18,320 --> 00:14:21,279
and where that data transformation was

00:14:20,079 --> 00:14:23,040
incorrect

00:14:21,279 --> 00:14:24,720
and it would have been immediately clear

00:14:23,040 --> 00:14:25,600
we could have visualized all the code

00:14:24,720 --> 00:14:27,839
paths

00:14:25,600 --> 00:14:29,040
that cross our proposed change and we

00:14:27,839 --> 00:14:31,360
could have confidently

00:14:29,040 --> 00:14:32,560
considered the downstream effects we

00:14:31,360 --> 00:14:35,600
could have fixed the bug

00:14:32,560 --> 00:14:37,199
and moved on with our lives

00:14:35,600 --> 00:14:39,199
we as engineers have been living in a

00:14:37,199 --> 00:14:41,440
world that's more painful

00:14:39,199 --> 00:14:42,959
inefficient and harder than it needs to

00:14:41,440 --> 00:14:44,720
be

00:14:42,959 --> 00:14:46,720
but the good news is that there are

00:14:44,720 --> 00:14:48,800
practices that we can engage in to make

00:14:46,720 --> 00:14:51,199
our everyday lives easier

00:14:48,800 --> 00:14:52,880
and empower us to get more done and

00:14:51,199 --> 00:14:53,199
there are tools on the horizon to help

00:14:52,880 --> 00:14:56,000
us

00:14:53,199 --> 00:14:58,079
as well so i challenge you to make

00:14:56,000 --> 00:15:00,720
continuous understanding a priority

00:14:58,079 --> 00:15:02,079
for not only for yourself but for others

00:15:00,720 --> 00:15:03,279
so we can live in a world where our

00:15:02,079 --> 00:15:12,160
day-to-day experience

00:15:03,279 --> 00:15:12,160

YouTube URL: https://www.youtube.com/watch?v=N6XkqbNKxQA


