Title: DevX in the Internet Age: One Step Forward, Two Steps Back â€“ Anurag Goel
Publication date: 2021-04-29
Playlist: DevX Conf
Description: 
	Building and hosting applications has both evolved and devolved since the dawn of the Internet. We'll run through the history of DX, from CGI hosting in the nineties to what we can look forward to in the new decade.

About DevX Conf:
DevX Conf is a two-day virtual conference. It's a space where creators collaborate, listen, discuss and declutter our workflows, toolchains, and minds. To improve developer experience. Organized by Gitpod.
https://devxconf.org/
Captions: 
	00:00:14,320 --> 00:00:19,199
hi everyone

00:00:15,519 --> 00:00:19,840
my name is anurag goyal and i'm the

00:00:19,199 --> 00:00:23,119
founder

00:00:19,840 --> 00:00:26,320
and ceo of render render

00:00:23,119 --> 00:00:28,840
is a modern cloud provider focused on

00:00:26,320 --> 00:00:30,400
developers and on the developer

00:00:28,840 --> 00:00:32,239
experience

00:00:30,400 --> 00:00:34,800
today i'm excited to talk about the

00:00:32,239 --> 00:00:37,520
evolution of developer experience

00:00:34,800 --> 00:00:38,079
in the internet age and how it has

00:00:37,520 --> 00:00:41,520
changed

00:00:38,079 --> 00:00:42,480
over the last two decades we're going to

00:00:41,520 --> 00:00:44,719
go over the

00:00:42,480 --> 00:00:46,000
various eras of developer experience

00:00:44,719 --> 00:00:49,360
since we started building

00:00:46,000 --> 00:00:51,280
dynamic apps for the internet devx for

00:00:49,360 --> 00:00:54,239
static hosting has generally

00:00:51,280 --> 00:00:55,680
been fine dynamic content is where

00:00:54,239 --> 00:00:58,079
application needs

00:00:55,680 --> 00:00:59,680
strongly influence both development and

00:00:58,079 --> 00:01:02,559
deployment

00:00:59,680 --> 00:01:03,600
we'll look at how things work great with

00:01:02,559 --> 00:01:06,640
lamp

00:01:03,600 --> 00:01:10,240
and not so great with enterprise java

00:01:06,640 --> 00:01:12,720
then better again with pass 1.0

00:01:10,240 --> 00:01:14,000
and then worse with kubernetes and

00:01:12,720 --> 00:01:16,560
containers

00:01:14,000 --> 00:01:18,080
and finally i'll talk about why there's

00:01:16,560 --> 00:01:21,600
cause for optimism

00:01:18,080 --> 00:01:21,600
so let's dive in

00:01:21,840 --> 00:01:27,600
in the mid to late 90s the internet was

00:01:25,920 --> 00:01:30,000
the wild west

00:01:27,600 --> 00:01:32,240
these were the days of dial-up of

00:01:30,000 --> 00:01:35,600
bulletin board systems

00:01:32,240 --> 00:01:39,360
and of aol spamming everyone with

00:01:35,600 --> 00:01:41,360
get online discs and much like the wild

00:01:39,360 --> 00:01:42,399
west you didn't really need a permit to

00:01:41,360 --> 00:01:45,600
do things

00:01:42,399 --> 00:01:46,240
in other words developers could simply

00:01:45,600 --> 00:01:49,200
deploy

00:01:46,240 --> 00:01:51,200
code it was made easy by the common

00:01:49,200 --> 00:01:52,880
gateway interface and the lamp stack

00:01:51,200 --> 00:01:56,079
which stands for linux

00:01:52,880 --> 00:02:00,960
apache mysql and

00:01:56,079 --> 00:02:00,960
typically one of php perl or python

00:02:01,759 --> 00:02:05,920
the developer experience here was great

00:02:03,840 --> 00:02:08,800
you wrote your code

00:02:05,920 --> 00:02:10,800
and ftped it to your hosting provider

00:02:08,800 --> 00:02:12,800
who ran apache for you

00:02:10,800 --> 00:02:15,280
and your changes were instantly picked

00:02:12,800 --> 00:02:18,319
up by the next http request

00:02:15,280 --> 00:02:21,599
because apache ran your code

00:02:18,319 --> 00:02:22,800
on every request so why didn't this

00:02:21,599 --> 00:02:26,000
stick

00:02:22,800 --> 00:02:28,879
the biggest issue was performance

00:02:26,000 --> 00:02:29,680
spawning a new process but every http

00:02:28,879 --> 00:02:32,400
request

00:02:29,680 --> 00:02:33,360
was clearly expensive and because

00:02:32,400 --> 00:02:36,319
everything was

00:02:33,360 --> 00:02:36,959
a short-lived process you could not

00:02:36,319 --> 00:02:40,000
reuse

00:02:36,959 --> 00:02:41,519
things like db connections or in-memory

00:02:40,000 --> 00:02:45,360
caches

00:02:41,519 --> 00:02:48,720
the next big problem was security

00:02:45,360 --> 00:02:51,680
cgi scripts accepted form input through

00:02:48,720 --> 00:02:54,160
environment variables so they were

00:02:51,680 --> 00:02:56,400
really easy to exploit

00:02:54,160 --> 00:02:57,200
just imagine letting anyone on the

00:02:56,400 --> 00:02:59,920
internet

00:02:57,200 --> 00:03:02,400
set environment variables for your

00:02:59,920 --> 00:03:05,680
server-side code

00:03:02,400 --> 00:03:08,080
not wise finally it was

00:03:05,680 --> 00:03:08,959
hard to test and to debug cgi

00:03:08,080 --> 00:03:11,360
applications

00:03:08,959 --> 00:03:13,040
because your local development machine

00:03:11,360 --> 00:03:14,239
could not replicate the cloud

00:03:13,040 --> 00:03:17,440
environment that they

00:03:14,239 --> 00:03:18,319
ran on so in the end enterprise

00:03:17,440 --> 00:03:21,280
businesses

00:03:18,319 --> 00:03:21,840
abandoned lamp and went a different

00:03:21,280 --> 00:03:24,530
route

00:03:21,840 --> 00:03:25,760
which brings us to

00:03:24,530 --> 00:03:29,040
[Music]

00:03:25,760 --> 00:03:32,400
the rise of enterprise applications

00:03:29,040 --> 00:03:34,959
in the late 90s sun release java

00:03:32,400 --> 00:03:36,879
a free and open source runtime

00:03:34,959 --> 00:03:37,519
environment and language that could run

00:03:36,879 --> 00:03:41,120
anywhere

00:03:37,519 --> 00:03:44,840
compared to the not free microsoft stack

00:03:41,120 --> 00:03:46,560
but java didn't just catch on

00:03:44,840 --> 00:03:49,760
organically

00:03:46,560 --> 00:03:53,120
sun spent half a billion dollars

00:03:49,760 --> 00:03:54,959
on a massive java marketing campaign

00:03:53,120 --> 00:03:56,159
with christina aguilera as a

00:03:54,959 --> 00:03:58,000
spokesperson

00:03:56,159 --> 00:03:59,599
that's her right there in a sun

00:03:58,000 --> 00:04:05,920
microsystems ad

00:03:59,599 --> 00:04:08,159
from 2003 on her java powered cell phone

00:04:05,920 --> 00:04:09,120
sun did this to counter the rise of

00:04:08,159 --> 00:04:11,920
microsoft

00:04:09,120 --> 00:04:12,879
and intel they were in the business of

00:04:11,920 --> 00:04:15,680
selling servers

00:04:12,879 --> 00:04:17,680
and promoting java was their way to take

00:04:15,680 --> 00:04:20,799
developers away from microsoft

00:04:17,680 --> 00:04:22,720
and make more applications run on sun

00:04:20,799 --> 00:04:25,199
infrastructure so they could run more

00:04:22,720 --> 00:04:25,199
servers

00:04:25,680 --> 00:04:31,440
but java and specially enterprise java

00:04:28,400 --> 00:04:34,800
rested control away from developers

00:04:31,440 --> 00:04:35,759
in this world you wrote code added it to

00:04:34,800 --> 00:04:39,280
version control

00:04:35,759 --> 00:04:40,720
and just waited and on your development

00:04:39,280 --> 00:04:43,520
machine

00:04:40,720 --> 00:04:44,240
you ran these massive enterprise java

00:04:43,520 --> 00:04:47,040
servers

00:04:44,240 --> 00:04:49,040
which took forever to reload your code

00:04:47,040 --> 00:04:51,040
and

00:04:49,040 --> 00:04:53,199
you use editors like eclipse which were

00:04:51,040 --> 00:04:55,280
memory hog so in general it just wasn't

00:04:53,199 --> 00:04:58,240
a fun experience

00:04:55,280 --> 00:05:00,240
at the same time engineers had to get

00:04:58,240 --> 00:05:00,960
trained in not just server management

00:05:00,240 --> 00:05:03,280
but also

00:05:00,960 --> 00:05:04,160
in running enterprise java servers like

00:05:03,280 --> 00:05:07,199
websphere

00:05:04,160 --> 00:05:10,320
or jboss all of this meant

00:05:07,199 --> 00:05:12,960
that application developers were

00:05:10,320 --> 00:05:14,560
completely dependent on someone else to

00:05:12,960 --> 00:05:17,680
deploy their code

00:05:14,560 --> 00:05:20,639
and and this led predictably to slow

00:05:17,680 --> 00:05:23,520
development cycles

00:05:20,639 --> 00:05:25,600
this phase also created barriers to

00:05:23,520 --> 00:05:28,560
entry for startups because

00:05:25,600 --> 00:05:29,440
you had to buy expensive hardware and

00:05:28,560 --> 00:05:31,360
rent

00:05:29,440 --> 00:05:32,800
space in a data center to run your

00:05:31,360 --> 00:05:36,720
applications so

00:05:32,800 --> 00:05:38,960
just in general things were bleak and

00:05:36,720 --> 00:05:40,479
developers engineers naturally did

00:05:38,960 --> 00:05:44,160
something about it

00:05:40,479 --> 00:05:47,680
leading to virtualization and

00:05:44,160 --> 00:05:50,000
platform as a service 1.0

00:05:47,680 --> 00:05:52,080
it started with the zen hypervisor which

00:05:50,000 --> 00:05:54,720
was released in 2003.

00:05:52,080 --> 00:05:56,960
a hypervisor is used to manage virtual

00:05:54,720 --> 00:05:59,520
machines which were

00:05:56,960 --> 00:06:00,639
made mainstream by vmware earlier in the

00:05:59,520 --> 00:06:02,800
decade

00:06:00,639 --> 00:06:04,639
and then did it with good performance

00:06:02,800 --> 00:06:07,759
and enough isolation to use

00:06:04,639 --> 00:06:08,960
for shared hosting so it's no

00:06:07,759 --> 00:06:12,400
coincidence

00:06:08,960 --> 00:06:13,199
that aws launched ec2 just three years

00:06:12,400 --> 00:06:15,759
later

00:06:13,199 --> 00:06:17,280
and used zen as the foundation at least

00:06:15,759 --> 00:06:21,120
in the beginning

00:06:17,280 --> 00:06:22,880
early ec2 gave power back to developers

00:06:21,120 --> 00:06:24,639
no more waiting for someone to buy and

00:06:22,880 --> 00:06:28,319
provision servers just

00:06:24,639 --> 00:06:31,759
create a vm with an api call

00:06:28,319 --> 00:06:34,639
ec2 also made accountants happy because

00:06:31,759 --> 00:06:37,039
it transformed capital expenses on

00:06:34,639 --> 00:06:41,280
servers to operating expenses

00:06:37,039 --> 00:06:45,360
on aws this was crucial for startups

00:06:41,280 --> 00:06:48,240
and big businesses alike

00:06:45,360 --> 00:06:48,639
but aws itself was never really meant

00:06:48,240 --> 00:06:51,120
for

00:06:48,639 --> 00:06:51,840
application developers it was always

00:06:51,120 --> 00:06:54,000
meant for

00:06:51,840 --> 00:06:55,520
server administrators and that's where

00:06:54,000 --> 00:06:58,880
heroku comes in

00:06:55,520 --> 00:07:01,919
when it launched in 2009 heroku was

00:06:58,880 --> 00:07:03,199
far ahead of anything and everything in

00:07:01,919 --> 00:07:05,919
its category

00:07:03,199 --> 00:07:06,479
pushing code to git to automatically

00:07:05,919 --> 00:07:09,599
deploy

00:07:06,479 --> 00:07:10,880
rails apps was just magical and we saw

00:07:09,599 --> 00:07:13,919
similar innovations

00:07:10,880 --> 00:07:17,840
with google app engine with firebase

00:07:13,919 --> 00:07:20,720
and parse

00:07:17,840 --> 00:07:22,160
still things weren't quite perfect in

00:07:20,720 --> 00:07:25,199
fact far from it because

00:07:22,160 --> 00:07:27,599
all the past providers in this era

00:07:25,199 --> 00:07:29,199
struggled with inflexibility and with

00:07:27,599 --> 00:07:30,479
meeting the demands of complex

00:07:29,199 --> 00:07:33,360
applications

00:07:30,479 --> 00:07:34,639
as an example none of them offered

00:07:33,360 --> 00:07:37,759
private networking

00:07:34,639 --> 00:07:38,319
or disk storage which meant you could

00:07:37,759 --> 00:07:40,720
not run

00:07:38,319 --> 00:07:42,080
tools like elasticsearch or hadoop on

00:07:40,720 --> 00:07:46,000
them

00:07:42,080 --> 00:07:49,120
so this forced enterprises to adopt aws

00:07:46,000 --> 00:07:49,919
at scale and and perhaps as a result of

00:07:49,120 --> 00:07:53,199
that

00:07:49,919 --> 00:07:56,560
heroku and parse and firebase all

00:07:53,199 --> 00:07:58,240
ended up selling early they did not

00:07:56,560 --> 00:08:01,520
deliver the mega exits

00:07:58,240 --> 00:08:02,720
that vcs were looking for and and thus

00:08:01,520 --> 00:08:05,840
began the long

00:08:02,720 --> 00:08:09,120
past winter along with previously

00:08:05,840 --> 00:08:09,440
unseen levels of complexity which brings

00:08:09,120 --> 00:08:13,840
us

00:08:09,440 --> 00:08:13,840
to today

00:08:14,160 --> 00:08:18,319
containers and kubernetes and 10x

00:08:17,360 --> 00:08:21,599
complexity

00:08:18,319 --> 00:08:22,160
is where we are right now and it's not

00:08:21,599 --> 00:08:23,919
great

00:08:22,160 --> 00:08:25,759
and this is why we have this conference

00:08:23,919 --> 00:08:29,199
and this is why we're at this talk

00:08:25,759 --> 00:08:29,440
so in 2006 google released their work on

00:08:29,199 --> 00:08:32,000
c

00:08:29,440 --> 00:08:34,560
groups which made it possible to control

00:08:32,000 --> 00:08:36,800
resource usage for a group of processes

00:08:34,560 --> 00:08:38,000
and then c groups combined with linux

00:08:36,800 --> 00:08:41,120
namespaces

00:08:38,000 --> 00:08:46,480
became what we now know as lxc

00:08:41,120 --> 00:08:50,160
or linux containers then in 2013

00:08:46,480 --> 00:08:51,920
docker made containers actually usable

00:08:50,160 --> 00:08:53,920
uh docker was created by a company

00:08:51,920 --> 00:08:56,160
called cloud who were building a

00:08:53,920 --> 00:08:58,480
platform as a service to overcome some

00:08:56,160 --> 00:09:00,320
of heroku's limitations

00:08:58,480 --> 00:09:01,519
now that platform itself wasn't a

00:09:00,320 --> 00:09:03,600
success or

00:09:01,519 --> 00:09:04,720
at least a runaway success but docker

00:09:03,600 --> 00:09:06,800
was and

00:09:04,720 --> 00:09:08,880
and much more so so they renamed the

00:09:06,800 --> 00:09:11,360
company to docker in 2014

00:09:08,880 --> 00:09:13,519
and decided to focus entirely on the

00:09:11,360 --> 00:09:17,519
docker ecosystem

00:09:13,519 --> 00:09:20,640
right around then aws was also using

00:09:17,519 --> 00:09:23,519
containerization or micro vms to build

00:09:20,640 --> 00:09:25,440
lambda which was sort of like cgi 2.0

00:09:23,519 --> 00:09:26,320
but the big innovation there was around

00:09:25,440 --> 00:09:29,839
pricing

00:09:26,320 --> 00:09:32,399
you paid for lambda by the millisecond

00:09:29,839 --> 00:09:34,240
and only for the time your code was

00:09:32,399 --> 00:09:37,680
running

00:09:34,240 --> 00:09:39,680
finally also in 2014 google was getting

00:09:37,680 --> 00:09:43,040
ready to release kubernetes

00:09:39,680 --> 00:09:45,600
and this was built to manage

00:09:43,040 --> 00:09:48,399
large fleets of containers and it was

00:09:45,600 --> 00:09:50,880
inspired by their own internal systems

00:09:48,399 --> 00:09:52,880
as we'll see google helped kubernetes

00:09:50,880 --> 00:09:56,240
win the container wars

00:09:52,880 --> 00:09:59,600
and that led to the state we're in

00:09:56,240 --> 00:10:01,600
today now these are all vendors and

00:09:59,600 --> 00:10:03,760
open source projects we're using or

00:10:01,600 --> 00:10:07,120
trying to use

00:10:03,760 --> 00:10:09,279
and even without going into any details

00:10:07,120 --> 00:10:13,279
on this list it's very clear that

00:10:09,279 --> 00:10:15,839
infrastructure and the devops industry

00:10:13,279 --> 00:10:17,279
and devex in general has has just never

00:10:15,839 --> 00:10:20,320
been as complex

00:10:17,279 --> 00:10:22,880
as it is today

00:10:20,320 --> 00:10:24,320
so how did we get to this level of

00:10:22,880 --> 00:10:27,760
complexity

00:10:24,320 --> 00:10:28,480
the answer is marketing we saw this

00:10:27,760 --> 00:10:32,240
strategy

00:10:28,480 --> 00:10:34,640
earlier in the talk with sun and java

00:10:32,240 --> 00:10:36,399
google marketing was smarter because

00:10:34,640 --> 00:10:39,120
they focused on building

00:10:36,399 --> 00:10:39,600
a vibrant community around kubernetes

00:10:39,120 --> 00:10:41,600
and

00:10:39,600 --> 00:10:44,000
got a lot of companies to buy into the

00:10:41,600 --> 00:10:46,720
whole thing through the cloud native

00:10:44,000 --> 00:10:48,880
compute foundation but how does

00:10:46,720 --> 00:10:51,360
kubernetes help google

00:10:48,880 --> 00:10:52,959
it's quite simple it levels the playing

00:10:51,360 --> 00:10:55,839
field with aws

00:10:52,959 --> 00:10:58,160
because kubernetes can run anywhere

00:10:55,839 --> 00:11:01,360
kubernetes also turned out to be

00:10:58,160 --> 00:11:02,720
a better product than aws elastic

00:11:01,360 --> 00:11:05,760
container service

00:11:02,720 --> 00:11:07,120
so the industry quickly converged on it

00:11:05,760 --> 00:11:09,839
as a standard

00:11:07,120 --> 00:11:10,880
and while kubernetes has its warts and

00:11:09,839 --> 00:11:14,160
complexity

00:11:10,880 --> 00:11:16,959
it is fundamentally a great open source

00:11:14,160 --> 00:11:17,519
project and a great product what it

00:11:16,959 --> 00:11:20,880
isn't

00:11:17,519 --> 00:11:24,880
however is a product built with

00:11:20,880 --> 00:11:28,079
developers and local development in mind

00:11:24,880 --> 00:11:29,279
so this is the first problem with devx

00:11:28,079 --> 00:11:32,880
today

00:11:29,279 --> 00:11:35,120
the other issue of course is fomo

00:11:32,880 --> 00:11:36,720
most companies don't need kubernetes but

00:11:35,120 --> 00:11:39,360
they use it anyway because

00:11:36,720 --> 00:11:40,240
other companies are using it but we're

00:11:39,360 --> 00:11:41,920
also

00:11:40,240 --> 00:11:43,760
starting to see in addition to formal

00:11:41,920 --> 00:11:46,560
kubernetes fatigue

00:11:43,760 --> 00:11:48,560
we're realizing that managing kubernetes

00:11:46,560 --> 00:11:51,600
clusters is hard

00:11:48,560 --> 00:11:55,040
even if you use um gke

00:11:51,600 --> 00:11:58,399
or eks similarly a lot of

00:11:55,040 --> 00:11:59,600
lambda users are complaining about local

00:11:58,399 --> 00:12:02,160
development

00:11:59,600 --> 00:12:02,720
still serverless itself is in its

00:12:02,160 --> 00:12:06,880
infancy

00:12:02,720 --> 00:12:06,880
and i think we should keep an eye on it

00:12:09,600 --> 00:12:16,399
so that covers the last 20 years

00:12:13,040 --> 00:12:20,160
and there's clearly some

00:12:16,399 --> 00:12:21,760
ptsd but there are also signs of new

00:12:20,160 --> 00:12:24,720
life

00:12:21,760 --> 00:12:26,800
developer focused engineers are now

00:12:24,720 --> 00:12:27,839
using containers and kubernetes to

00:12:26,800 --> 00:12:30,160
create

00:12:27,839 --> 00:12:31,920
better experiences for application

00:12:30,160 --> 00:12:35,200
developers

00:12:31,920 --> 00:12:38,560
we're also seeing a renewed emphasis

00:12:35,200 --> 00:12:41,680
on performance with languages like go

00:12:38,560 --> 00:12:42,320
and rust on the back end and web

00:12:41,680 --> 00:12:46,720
assembly

00:12:42,320 --> 00:12:50,880
on the front end developers are now

00:12:46,720 --> 00:12:53,600
also driving software purchase decisions

00:12:50,880 --> 00:12:54,639
the cloud market is much bigger and

00:12:53,600 --> 00:12:57,680
growing quickly

00:12:54,639 --> 00:12:58,240
and all of this has increased the

00:12:57,680 --> 00:13:01,839
funding

00:12:58,240 --> 00:13:06,560
that's available for startups focused on

00:13:01,839 --> 00:13:10,480
devex and it's all really encouraging

00:13:06,560 --> 00:13:13,440
still there are problems kubernetes fomo

00:13:10,480 --> 00:13:14,560
is still real resulting in a lot of

00:13:13,440 --> 00:13:17,120
resume driven

00:13:14,560 --> 00:13:18,800
development and then there's

00:13:17,120 --> 00:13:21,920
fragmentation

00:13:18,800 --> 00:13:24,639
if you want a full stack application

00:13:21,920 --> 00:13:25,680
you know you get a static site provider

00:13:24,639 --> 00:13:28,880
but then you need a

00:13:25,680 --> 00:13:30,399
database and a task queue and

00:13:28,880 --> 00:13:32,160
and very quickly you're working with

00:13:30,399 --> 00:13:32,959
five different vendors who don't really

00:13:32,160 --> 00:13:35,440
play well

00:13:32,959 --> 00:13:36,079
with each other the third issue is

00:13:35,440 --> 00:13:37,920
related

00:13:36,079 --> 00:13:39,760
even if you're okay with multiple

00:13:37,920 --> 00:13:42,160
vendors there are

00:13:39,760 --> 00:13:43,360
way too many of them in almost every

00:13:42,160 --> 00:13:46,399
category so

00:13:43,360 --> 00:13:48,880
it's very hard to choose

00:13:46,399 --> 00:13:50,079
still we're making headway on these

00:13:48,880 --> 00:13:52,240
things and more

00:13:50,079 --> 00:13:53,279
and many of the speakers at this

00:13:52,240 --> 00:13:56,160
conference

00:13:53,279 --> 00:13:57,040
are part of this new generation of

00:13:56,160 --> 00:14:00,000
developers

00:13:57,040 --> 00:14:00,560
focused on improving the state of the

00:14:00,000 --> 00:14:03,839
art

00:14:00,560 --> 00:14:06,240
and making things better for the next

00:14:03,839 --> 00:14:06,240
decade

00:14:06,320 --> 00:14:10,160
so what are we looking at in the next

00:14:08,880 --> 00:14:13,199
decade

00:14:10,160 --> 00:14:14,320
first i believe most engineering teams

00:14:13,199 --> 00:14:17,120
are going to stop

00:14:14,320 --> 00:14:18,160
using kubernetes directly instead

00:14:17,120 --> 00:14:21,440
they'll use

00:14:18,160 --> 00:14:23,680
cloud providers perhaps like render that

00:14:21,440 --> 00:14:26,720
remove that complexity

00:14:23,680 --> 00:14:28,240
with a strong focus on developer

00:14:26,720 --> 00:14:31,519
experience but also

00:14:28,240 --> 00:14:34,880
by incorporating the features that

00:14:31,519 --> 00:14:37,519
complex enterprise applications need

00:14:34,880 --> 00:14:40,079
this also means that that the devops

00:14:37,519 --> 00:14:43,120
profession as we know it will change

00:14:40,079 --> 00:14:44,959
very few companies will need armies of

00:14:43,120 --> 00:14:46,639
sres because

00:14:44,959 --> 00:14:49,519
they're going to use cloud providers

00:14:46,639 --> 00:14:52,880
that make all of it unnecessary

00:14:49,519 --> 00:14:56,480
next we're going to see big advances

00:14:52,880 --> 00:15:00,160
in workload isolation and in performance

00:14:56,480 --> 00:15:03,600
which is amazing for devex because

00:15:00,160 --> 00:15:04,880
ultimately it will lead to tools and to

00:15:03,600 --> 00:15:07,920
platforms

00:15:04,880 --> 00:15:10,160
that aren't even possible to envision

00:15:07,920 --> 00:15:13,040
today

00:15:10,160 --> 00:15:14,800
so i'll end on that cheery note and

00:15:13,040 --> 00:15:16,399
that's my talk thank you for listening

00:15:14,800 --> 00:15:18,160
and thank you to the gitpod team for

00:15:16,399 --> 00:15:19,120
letting me speak at this unique

00:15:18,160 --> 00:15:21,680
conference

00:15:19,120 --> 00:15:26,800
i'll be around in discord for questions

00:15:21,680 --> 00:15:28,880
thank you cheers

00:15:26,800 --> 00:15:28,880

YouTube URL: https://www.youtube.com/watch?v=asA7rE0mDeo


