Title: Monorepos, are they right for you? – Maël Nison
Publication date: 2021-04-26
Playlist: DevX Conf
Description: 
	Monorepos are back and more popular than ever. In this talk, we’ll dive into the problems they solve, the challenges they create, and how they stack up to the alternatives. By the end of this presentation, you’ll have a better idea why so many communities find them appealing, and how to decide if monorepos are a good fit for your current and future projects.

About DevX Conf:
DevX Conf is a two-day virtual conference. It's a space where creators collaborate, listen, discuss and declutter our workflows, toolchains, and minds. To improve developer experience. Organized by Gitpod.
https://devxconf.org/
Captions: 
	00:00:14,320 --> 00:00:17,119
hello everyone

00:00:15,360 --> 00:00:18,880
today we are going to talk about mother

00:00:17,119 --> 00:00:22,320
rippers what they are

00:00:18,880 --> 00:00:25,359
and what make them useful in some cases

00:00:22,320 --> 00:00:26,960
what makes them less useful so first my

00:00:25,359 --> 00:00:29,359
name is mel nizon

00:00:26,960 --> 00:00:31,519
i've been working at datadogger for the

00:00:29,359 --> 00:00:33,040
past two years but before that i've been

00:00:31,519 --> 00:00:34,480
starting to work on yarn the package

00:00:33,040 --> 00:00:37,840
manager for javascript

00:00:34,480 --> 00:00:40,559
for about four years now and workspaces

00:00:37,840 --> 00:00:42,399
as you may know are a kind of a variant

00:00:40,559 --> 00:00:42,960
around the concept of model ripples so

00:00:42,399 --> 00:00:46,000
they're

00:00:42,960 --> 00:00:49,520
super important for us

00:00:46,000 --> 00:00:52,160
first what are monorepos exactly

00:00:49,520 --> 00:00:54,000
the idea is that as you start a project

00:00:52,160 --> 00:00:56,239
you usually start with a single folder

00:00:54,000 --> 00:00:59,760
containing a source directory

00:00:56,239 --> 00:01:01,039
then you just publish it to a registry

00:00:59,760 --> 00:01:03,680
for example npm

00:01:01,039 --> 00:01:04,479
and everything is tracked into a single

00:01:03,680 --> 00:01:07,200
uh history

00:01:04,479 --> 00:01:08,240
uh inside a single repository if you go

00:01:07,200 --> 00:01:10,720
into your comments

00:01:08,240 --> 00:01:11,760
you see that each commit is uh treating

00:01:10,720 --> 00:01:14,159
some part of

00:01:11,760 --> 00:01:16,000
this one project so far so good it's

00:01:14,159 --> 00:01:16,960
really easy to see the history of the

00:01:16,000 --> 00:01:19,680
project

00:01:16,960 --> 00:01:21,439
the problem is that as they tend to grow

00:01:19,680 --> 00:01:24,000
as their scope tend to

00:01:21,439 --> 00:01:26,159
expand uh one day you stud you notice

00:01:24,000 --> 00:01:27,119
that you want to add a new variant about

00:01:26,159 --> 00:01:30,159
your

00:01:27,119 --> 00:01:31,360
library your project or maybe it maybe

00:01:30,159 --> 00:01:33,840
develop a website

00:01:31,360 --> 00:01:34,799
or create a folder that contains a bunch

00:01:33,840 --> 00:01:36,799
of examples

00:01:34,799 --> 00:01:37,920
explaining how to use your project and

00:01:36,799 --> 00:01:40,960
then you start to have

00:01:37,920 --> 00:01:42,960
a new problem which is from one

00:01:40,960 --> 00:01:44,399
project that you had you start to have

00:01:42,960 --> 00:01:47,200
multiple of them

00:01:44,399 --> 00:01:49,119
and it starts to become annoying and you

00:01:47,200 --> 00:01:52,159
need to figure out one way to

00:01:49,119 --> 00:01:53,439
solve this what should you do the idea

00:01:52,159 --> 00:01:56,799
is that you have two

00:01:53,439 --> 00:01:57,600
very different approaches the first one

00:01:56,799 --> 00:02:01,439
is to go

00:01:57,600 --> 00:02:03,680
uh the poly repo world instead of

00:02:01,439 --> 00:02:06,079
having a monorepo as we are going to see

00:02:03,680 --> 00:02:08,959
you get one repository for each

00:02:06,079 --> 00:02:09,920
of your project so for example here i

00:02:08,959 --> 00:02:12,879
took oak cliff

00:02:09,920 --> 00:02:13,520
which is a cli library and for oakleaf

00:02:12,879 --> 00:02:15,520
they have

00:02:13,520 --> 00:02:16,800
made one repository for each of their

00:02:15,520 --> 00:02:19,040
plugins that they

00:02:16,800 --> 00:02:20,800
manage completely independently so each

00:02:19,040 --> 00:02:22,560
time you want to make an improvement to

00:02:20,800 --> 00:02:24,959
a cliff you make a put request

00:02:22,560 --> 00:02:25,760
to the specific repository that needs to

00:02:24,959 --> 00:02:29,520
get the fix

00:02:25,760 --> 00:02:31,920
uh the relevant fix um

00:02:29,520 --> 00:02:32,959
it has its use and we are going to see

00:02:31,920 --> 00:02:35,840
that um

00:02:32,959 --> 00:02:36,800
but there is another approach which are

00:02:35,840 --> 00:02:39,040
monorepos

00:02:36,800 --> 00:02:40,239
so this time instead of having multiple

00:02:39,040 --> 00:02:43,440
repositories one

00:02:40,239 --> 00:02:46,000
for each of your project

00:02:43,440 --> 00:02:47,040
you keep a single repository and this

00:02:46,000 --> 00:02:49,200
time you make one

00:02:47,040 --> 00:02:50,800
folder inside this repository for each

00:02:49,200 --> 00:02:53,040
of your sub projects

00:02:50,800 --> 00:02:54,480
so what you see on screen is the yarn

00:02:53,040 --> 00:02:57,519
repository

00:02:54,480 --> 00:03:01,680
where we keep about 40 workspaces

00:02:57,519 --> 00:03:04,319
so 40 sub projects and each of them

00:03:01,680 --> 00:03:05,440
is just a regular folder inside the the

00:03:04,319 --> 00:03:08,879
same repository

00:03:05,440 --> 00:03:12,400
it means that the history is not uh

00:03:08,879 --> 00:03:15,360
cleanly kept uh i would say um

00:03:12,400 --> 00:03:16,000
in those different repos but at the same

00:03:15,360 --> 00:03:18,159
time

00:03:16,000 --> 00:03:19,040
it means that everything is inside the

00:03:18,159 --> 00:03:23,440
same uh

00:03:19,040 --> 00:03:23,440
interlaced uh set of commits

00:03:23,920 --> 00:03:27,200
both approaches are fine for different

00:03:26,239 --> 00:03:30,640
reasons but

00:03:27,200 --> 00:03:32,400
it's really a matter of trade-off so

00:03:30,640 --> 00:03:34,560
if you see a blog post that tells you

00:03:32,400 --> 00:03:35,280
model ripples are good or modern reapers

00:03:34,560 --> 00:03:37,200
are bad

00:03:35,280 --> 00:03:38,480
take it with a pinch of salt because

00:03:37,200 --> 00:03:40,400
it's usually miss

00:03:38,480 --> 00:03:41,840
some part of the story they really have

00:03:40,400 --> 00:03:44,640
different use cases

00:03:41,840 --> 00:03:45,280
and uh you can just discard one or the

00:03:44,640 --> 00:03:49,280
other

00:03:45,280 --> 00:03:49,280
on a blanket statement

00:03:49,920 --> 00:03:56,080
so what are the reason why

00:03:52,959 --> 00:03:58,400
mana repos are good the first one

00:03:56,080 --> 00:04:00,879
is that a single pull request can reach

00:03:58,400 --> 00:04:03,680
into multiple packages

00:04:00,879 --> 00:04:04,159
i've myself worked a lot with open

00:04:03,680 --> 00:04:06,720
source

00:04:04,159 --> 00:04:08,319
projects and one thing that you notice

00:04:06,720 --> 00:04:11,280
when you're start doing this and

00:04:08,319 --> 00:04:12,720
making pull requests to them is that um

00:04:11,280 --> 00:04:15,760
it's very difficult

00:04:12,720 --> 00:04:18,239
to work when a project is splitted into

00:04:15,760 --> 00:04:20,799
multiple repositories

00:04:18,239 --> 00:04:22,160
for example one time i had to make a

00:04:20,799 --> 00:04:25,199
commit on next gs

00:04:22,160 --> 00:04:26,400
which is the mana repos except that they

00:04:25,199 --> 00:04:30,000
also rely on

00:04:26,400 --> 00:04:31,520
a few other packages that are inside

00:04:30,000 --> 00:04:34,800
their own repository

00:04:31,520 --> 00:04:36,880
in this case it was mdx and so i made a

00:04:34,800 --> 00:04:38,639
pull request to mdx in order to fix

00:04:36,880 --> 00:04:41,360
something

00:04:38,639 --> 00:04:42,880
it had to be reviewed it had to be

00:04:41,360 --> 00:04:45,280
released

00:04:42,880 --> 00:04:46,400
but then uh once it got uh reviewed

00:04:45,280 --> 00:04:48,720
merged and released

00:04:46,400 --> 00:04:50,320
i had to do the same thing on next the

00:04:48,720 --> 00:04:52,080
gs itself

00:04:50,320 --> 00:04:53,360
and it was the same thing i had to make

00:04:52,080 --> 00:04:55,040
the change then i had to

00:04:53,360 --> 00:04:57,360
get it reviewed that i had to get it

00:04:55,040 --> 00:05:00,080
merged and i had to get it released

00:04:57,360 --> 00:05:02,880
and in this case it was fairly simple

00:05:00,080 --> 00:05:05,280
because it only affected two packages

00:05:02,880 --> 00:05:07,759
but i've also been in cases where this

00:05:05,280 --> 00:05:09,680
time it was four or five packages that

00:05:07,759 --> 00:05:11,680
needed to be

00:05:09,680 --> 00:05:13,680
released and this time it becomes

00:05:11,680 --> 00:05:16,080
extremely difficult because

00:05:13,680 --> 00:05:16,880
it happens that sometime uh someone will

00:05:16,080 --> 00:05:19,120
review

00:05:16,880 --> 00:05:21,120
one or two of the pr and forget the

00:05:19,120 --> 00:05:23,600
other or it might happen that the

00:05:21,120 --> 00:05:26,000
responsibility of reviewing those peers

00:05:23,600 --> 00:05:27,919
go to different people that then need to

00:05:26,000 --> 00:05:31,280
synchronize themselves

00:05:27,919 --> 00:05:34,000
so the poly repo poly repo approach

00:05:31,280 --> 00:05:35,840
is very difficult to work on on a

00:05:34,000 --> 00:05:38,160
contributor basis

00:05:35,840 --> 00:05:38,880
and a mana repo solves that by making it

00:05:38,160 --> 00:05:40,400
so that

00:05:38,880 --> 00:05:42,080
you can make a single prequest that

00:05:40,400 --> 00:05:46,320
contains all the changes that you

00:05:42,080 --> 00:05:48,960
need to make into the same organization

00:05:46,320 --> 00:05:49,520
and just merge them all at once of

00:05:48,960 --> 00:05:51,440
course

00:05:49,520 --> 00:05:52,880
you cannot do this on everything for

00:05:51,440 --> 00:05:55,520
example um if

00:05:52,880 --> 00:05:56,160
next yes i want to make a fix if i need

00:05:55,520 --> 00:05:58,560
to make a

00:05:56,160 --> 00:06:01,120
fixing webpack then i will need to go to

00:05:58,560 --> 00:06:06,240
the webpack repository then next yes to

00:06:01,120 --> 00:06:08,960
to merge it but it still helps

00:06:06,240 --> 00:06:10,560
another reason is that comets will be

00:06:08,960 --> 00:06:12,479
validated by your ci

00:06:10,560 --> 00:06:13,759
against the very latest source of the

00:06:12,479 --> 00:06:16,160
repository

00:06:13,759 --> 00:06:17,280
one problem when you have a body repo is

00:06:16,160 --> 00:06:19,759
that so your

00:06:17,280 --> 00:06:20,639
ci will run when you make a chance to

00:06:19,759 --> 00:06:23,120
your

00:06:20,639 --> 00:06:23,840
source code right and it will also run

00:06:23,120 --> 00:06:26,800
against

00:06:23,840 --> 00:06:28,479
the request it will validate that the

00:06:26,800 --> 00:06:30,880
code works

00:06:28,479 --> 00:06:32,639
the problem is that since they are in

00:06:30,880 --> 00:06:35,039
separate repository

00:06:32,639 --> 00:06:37,039
you will only run the test for the one

00:06:35,039 --> 00:06:39,759
project that has changed

00:06:37,039 --> 00:06:41,840
in theory this isn't a problem because

00:06:39,759 --> 00:06:42,479
if the tests are still passing then the

00:06:41,840 --> 00:06:44,319
test

00:06:42,479 --> 00:06:45,840
the the applications that consume it

00:06:44,319 --> 00:06:47,919
should be fine

00:06:45,840 --> 00:06:50,639
in practice it doesn't always work like

00:06:47,919 --> 00:06:52,479
that sometimes the tests are incomplete

00:06:50,639 --> 00:06:54,400
or sometimes the application is doing

00:06:52,479 --> 00:06:57,520
something a bit different

00:06:54,400 --> 00:06:59,440
um and so in this case you might land a

00:06:57,520 --> 00:07:02,000
regression that would have been cut if

00:06:59,440 --> 00:07:04,160
you had run all your applications tests

00:07:02,000 --> 00:07:05,520
for every change that you make to your

00:07:04,160 --> 00:07:08,800
uh application

00:07:05,520 --> 00:07:10,639
so for example in yarn if we were to run

00:07:08,800 --> 00:07:11,919
just the test for what the one plugin

00:07:10,639 --> 00:07:14,560
that we changed

00:07:11,919 --> 00:07:16,960
it could happen that we would miss a

00:07:14,560 --> 00:07:17,520
regression in a non-related part of the

00:07:16,960 --> 00:07:19,120
app

00:07:17,520 --> 00:07:20,720
of course we try to prevent this kind of

00:07:19,120 --> 00:07:24,560
problem as much as possible

00:07:20,720 --> 00:07:26,800
but it's uh we often learn that

00:07:24,560 --> 00:07:28,720
mistakes happen and in this case it's

00:07:26,800 --> 00:07:31,840
better to have something to protect us

00:07:28,720 --> 00:07:31,840
from those mistakes

00:07:32,000 --> 00:07:36,319
infrastructure can be easily shared

00:07:34,880 --> 00:07:39,840
between sub-projects

00:07:36,319 --> 00:07:42,160
so the first uh example i put is issues

00:07:39,840 --> 00:07:43,919
and it goes into an organizational

00:07:42,160 --> 00:07:45,440
aspect of things

00:07:43,919 --> 00:07:47,840
in the case of yarn for example we have

00:07:45,440 --> 00:07:51,120
40 workspaces

00:07:47,840 --> 00:07:54,000
pro sub projects it wouldn't be

00:07:51,120 --> 00:07:55,599
doable to keep all of them with their

00:07:54,000 --> 00:07:58,879
own issue tracker

00:07:55,599 --> 00:08:02,319
so if our users needed to make

00:07:58,879 --> 00:08:04,319
um a request for help

00:08:02,319 --> 00:08:05,680
it wouldn't work if they had to find the

00:08:04,319 --> 00:08:08,319
one representative that they

00:08:05,680 --> 00:08:09,280
had to go to in order to drop the right

00:08:08,319 --> 00:08:12,400
issue

00:08:09,280 --> 00:08:15,919
so instead they would necessarily have

00:08:12,400 --> 00:08:19,039
one single issue tracker similarly

00:08:15,919 --> 00:08:21,440
uh tests and linting or even building

00:08:19,039 --> 00:08:22,400
are all part of the infra part that you

00:08:21,440 --> 00:08:24,479
probably want

00:08:22,400 --> 00:08:26,400
to share between all the packages that

00:08:24,479 --> 00:08:28,479
you maintain

00:08:26,400 --> 00:08:29,680
if you had a party repo approached and

00:08:28,479 --> 00:08:32,240
each of those packages

00:08:29,680 --> 00:08:33,440
could follow their own rules regarding

00:08:32,240 --> 00:08:35,519
how to build

00:08:33,440 --> 00:08:36,479
the application and it could quickly

00:08:35,519 --> 00:08:38,560
start to

00:08:36,479 --> 00:08:39,599
become a bit messy for example with some

00:08:38,560 --> 00:08:41,919
repository

00:08:39,599 --> 00:08:44,240
using a webpack some other repository

00:08:41,919 --> 00:08:47,839
using es build some other again

00:08:44,240 --> 00:08:49,279
using rollup and having a monorepo helps

00:08:47,839 --> 00:08:50,560
a bit with that because then you have

00:08:49,279 --> 00:08:52,839
the ability to share

00:08:50,560 --> 00:08:54,320
your build script your eslint

00:08:52,839 --> 00:08:56,720
configuration

00:08:54,320 --> 00:08:57,600
your pressure configuration among all

00:08:56,720 --> 00:09:00,640
your

00:08:57,600 --> 00:09:03,040
sub projects at the same time

00:09:00,640 --> 00:09:05,040
of course you still can do this with

00:09:03,040 --> 00:09:06,080
body repos for example if you publish

00:09:05,040 --> 00:09:09,279
your

00:09:06,080 --> 00:09:10,880
infrastructure as its own package

00:09:09,279 --> 00:09:12,640
but then it's still more difficult

00:09:10,880 --> 00:09:14,720
because you still need to synchronize

00:09:12,640 --> 00:09:17,680
your infrastructure dependency to each

00:09:14,720 --> 00:09:21,040
of your sub projects and again it starts

00:09:17,680 --> 00:09:21,040
to get messy real quick

00:09:21,680 --> 00:09:27,120
and force consistency between checkouts

00:09:24,720 --> 00:09:29,120
the idea with that is that if you're

00:09:27,120 --> 00:09:31,120
contributing to something

00:09:29,120 --> 00:09:33,279
you really want to make sure that you

00:09:31,120 --> 00:09:36,720
are in the exact same state

00:09:33,279 --> 00:09:38,640
as anyone else in your team

00:09:36,720 --> 00:09:40,080
because if two people are working on

00:09:38,640 --> 00:09:42,480
different views

00:09:40,080 --> 00:09:45,040
of the same thing then it starts to get

00:09:42,480 --> 00:09:48,720
really problematic

00:09:45,040 --> 00:09:49,279
body repos are making inconsistency very

00:09:48,720 --> 00:09:51,519
easy

00:09:49,279 --> 00:09:52,959
because then you need to clone all those

00:09:51,519 --> 00:09:55,519
repositories and then

00:09:52,959 --> 00:09:57,200
keep them checking check out at the at

00:09:55,519 --> 00:09:59,519
the right version

00:09:57,200 --> 00:10:01,360
you have some tools that help with that

00:09:59,519 --> 00:10:02,399
for example with git you have the same

00:10:01,360 --> 00:10:04,959
models

00:10:02,399 --> 00:10:05,440
but they come with their own drawbacks

00:10:04,959 --> 00:10:07,120
and

00:10:05,440 --> 00:10:08,640
in this case for example with some

00:10:07,120 --> 00:10:10,800
models it starts to wonder

00:10:08,640 --> 00:10:12,480
why you don't just use a single

00:10:10,800 --> 00:10:15,440
repository in the first place

00:10:12,480 --> 00:10:17,760
if your goal is to track multiple sub

00:10:15,440 --> 00:10:20,640
projects together

00:10:17,760 --> 00:10:21,760
with monorepos the consistency is

00:10:20,640 --> 00:10:23,920
enforced

00:10:21,760 --> 00:10:25,040
by design since you only have one

00:10:23,920 --> 00:10:26,720
repository

00:10:25,040 --> 00:10:28,880
if you check out one commit you will

00:10:26,720 --> 00:10:29,680
have the exact state stored by this

00:10:28,880 --> 00:10:31,920
comet

00:10:29,680 --> 00:10:33,040
and if someone tells you hey i have a

00:10:31,920 --> 00:10:36,880
problem

00:10:33,040 --> 00:10:38,959
my command doesn't work you probably can

00:10:36,880 --> 00:10:41,040
eliminate a bunch of environmental

00:10:38,959 --> 00:10:43,279
factor because you will know that if you

00:10:41,040 --> 00:10:45,440
just check out this exact commit

00:10:43,279 --> 00:10:47,519
it will be the exact same state as your

00:10:45,440 --> 00:10:50,000
colleague you won't have to check oh but

00:10:47,519 --> 00:10:51,760
have you checked whether the library

00:10:50,000 --> 00:10:53,839
repository is checked out as well as the

00:10:51,760 --> 00:10:55,600
right version

00:10:53,839 --> 00:10:56,880
so it really helps in terms of a

00:10:55,600 --> 00:10:59,200
development and

00:10:56,880 --> 00:11:00,480
getting rid of all the little tiny

00:10:59,200 --> 00:11:03,279
noises that you would have

00:11:00,480 --> 00:11:03,279
during development

00:11:03,760 --> 00:11:09,120
their project validation rules

00:11:06,800 --> 00:11:11,680
when you have a large project whether

00:11:09,120 --> 00:11:14,800
it's a body repo or a monorepo

00:11:11,680 --> 00:11:16,959
you start to want to enforce some rules

00:11:14,800 --> 00:11:18,160
it might be some simple rules for

00:11:16,959 --> 00:11:20,720
example let's say an

00:11:18,160 --> 00:11:22,560
internal repository an internal project

00:11:20,720 --> 00:11:23,839
shouldn't be published on an external

00:11:22,560 --> 00:11:25,200
registry

00:11:23,839 --> 00:11:27,920
because you don't want to publish your

00:11:25,200 --> 00:11:29,600
internal code to uh to a public

00:11:27,920 --> 00:11:32,640
repository

00:11:29,600 --> 00:11:33,279
or it can be that the dependencies must

00:11:32,640 --> 00:11:36,079
be kept

00:11:33,279 --> 00:11:37,440
in sync for example you don't want two

00:11:36,079 --> 00:11:38,079
of your applications to use different

00:11:37,440 --> 00:11:41,200
versions

00:11:38,079 --> 00:11:43,600
of react but you need to have

00:11:41,200 --> 00:11:44,720
validations and with body repos it's

00:11:43,600 --> 00:11:46,880
fairly difficult because

00:11:44,720 --> 00:11:48,079
at the very best you can do the first

00:11:46,880 --> 00:11:52,959
kind of validation

00:11:48,079 --> 00:11:55,920
so checking that your files

00:11:52,959 --> 00:11:57,120
are valid according to some rules on

00:11:55,920 --> 00:11:59,680
their own

00:11:57,120 --> 00:12:01,440
but it's very difficult to implement

00:11:59,680 --> 00:12:04,480
rules that are contextual

00:12:01,440 --> 00:12:06,240
to other projects in the

00:12:04,480 --> 00:12:08,240
to other sub projects in your main

00:12:06,240 --> 00:12:11,120
project for example

00:12:08,240 --> 00:12:12,880
in yarn we have this rule where two

00:12:11,120 --> 00:12:15,440
workspaces cannot

00:12:12,880 --> 00:12:18,000
use uh different versions of the same

00:12:15,440 --> 00:12:18,000
dependency

00:12:18,160 --> 00:12:22,079
and uh in order to do this we need to

00:12:20,639 --> 00:12:24,959
have all the

00:12:22,079 --> 00:12:26,800
uh sub projects cloned on the machine

00:12:24,959 --> 00:12:28,480
otherwise we cannot know what are the

00:12:26,800 --> 00:12:29,279
dependencies used by the other sub

00:12:28,480 --> 00:12:31,600
projects

00:12:29,279 --> 00:12:33,040
so we wouldn't be able to run our ci in

00:12:31,600 --> 00:12:35,279
order to validate that they are

00:12:33,040 --> 00:12:37,440
consistent with each other

00:12:35,279 --> 00:12:39,600
by having a mono repos prem doesn't

00:12:37,440 --> 00:12:41,120
exist we can make validation rules that

00:12:39,600 --> 00:12:43,200
cover the whole project

00:12:41,120 --> 00:12:45,440
and that are contextual to the state of

00:12:43,200 --> 00:12:48,320
the uh project

00:12:45,440 --> 00:12:51,279
so that's also one of the area where

00:12:48,320 --> 00:12:51,279
monorails shine

00:12:51,680 --> 00:12:55,040
be the change that's not about a

00:12:54,240 --> 00:12:58,000
technical

00:12:55,040 --> 00:12:59,360
um that's that's not something technical

00:12:58,000 --> 00:13:02,480
it's something that

00:12:59,360 --> 00:13:04,880
is more inside what is the monorepos

00:13:02,480 --> 00:13:07,680
encourages in terms of development

00:13:04,880 --> 00:13:10,720
practices by having all your sources

00:13:07,680 --> 00:13:11,600
be inside the same repository you end up

00:13:10,720 --> 00:13:13,680
in a state where

00:13:11,600 --> 00:13:14,880
all your engineers can contribute to the

00:13:13,680 --> 00:13:17,839
code base

00:13:14,880 --> 00:13:19,279
if something is problematic then they

00:13:17,839 --> 00:13:21,839
will be able to just

00:13:19,279 --> 00:13:22,880
see what's the problem and contribute

00:13:21,839 --> 00:13:25,279
the fix

00:13:22,880 --> 00:13:26,320
by contrast if you are inside a body

00:13:25,279 --> 00:13:29,279
repose

00:13:26,320 --> 00:13:30,079
then not only is it more difficult to

00:13:29,279 --> 00:13:32,480
contribute to

00:13:30,079 --> 00:13:33,200
other repositories as i mentioned since

00:13:32,480 --> 00:13:35,279
you need to make

00:13:33,200 --> 00:13:36,240
multiple pull requests and synchronize

00:13:35,279 --> 00:13:39,760
them together

00:13:36,240 --> 00:13:42,560
but you also are selling each part

00:13:39,760 --> 00:13:44,639
of the development teams making them

00:13:42,560 --> 00:13:46,720
believe that they are the only one

00:13:44,639 --> 00:13:48,079
in charge of this part of the

00:13:46,720 --> 00:13:48,399
application which may be what you want

00:13:48,079 --> 00:13:51,199
to

00:13:48,399 --> 00:13:52,000
achieve but monorepos really encourage

00:13:51,199 --> 00:13:54,560
um

00:13:52,000 --> 00:13:55,600
a mindset where if you see something

00:13:54,560 --> 00:13:58,079
that doesn't work

00:13:55,600 --> 00:13:58,880
then you can actually do something about

00:13:58,079 --> 00:14:01,440
it and you can

00:13:58,880 --> 00:14:02,160
fix it a data log for example our

00:14:01,440 --> 00:14:05,199
front-end

00:14:02,160 --> 00:14:06,079
uh repository is a monorepo we have a

00:14:05,199 --> 00:14:08,639
bunch of

00:14:06,079 --> 00:14:09,519
sub-applications from various uh

00:14:08,639 --> 00:14:11,920
different teams

00:14:09,519 --> 00:14:12,800
inc and we have our infrastructure

00:14:11,920 --> 00:14:15,040
script

00:14:12,800 --> 00:14:16,000
and it frequently happens that someone

00:14:15,040 --> 00:14:19,600
fixes something

00:14:16,000 --> 00:14:21,920
in an area that they don't strictly own

00:14:19,600 --> 00:14:23,519
just because it's convenient they can

00:14:21,920 --> 00:14:25,199
actually do this

00:14:23,519 --> 00:14:26,800
some other repo really encourage an

00:14:25,199 --> 00:14:29,920
interesting way of

00:14:26,800 --> 00:14:30,959
development and finally contextual

00:14:29,920 --> 00:14:34,399
reviews

00:14:30,959 --> 00:14:35,279
i mentioned earlier that many reports

00:14:34,399 --> 00:14:37,360
are useful

00:14:35,279 --> 00:14:39,199
when you are making contributions to a

00:14:37,360 --> 00:14:42,000
project because then you

00:14:39,199 --> 00:14:42,320
need to make a single put request that

00:14:42,000 --> 00:14:44,800
can

00:14:42,320 --> 00:14:46,160
reach into multiple packages the same

00:14:44,800 --> 00:14:49,199
thing is true for

00:14:46,160 --> 00:14:50,399
the reviewer side if you have a poly

00:14:49,199 --> 00:14:52,959
repo

00:14:50,399 --> 00:14:54,639
and you have those multiple requests

00:14:52,959 --> 00:14:56,399
spread across them

00:14:54,639 --> 00:14:58,240
it will be very difficult to keep in

00:14:56,399 --> 00:15:01,199
mind the overall context

00:14:58,240 --> 00:15:01,839
it will be very likely that you will

00:15:01,199 --> 00:15:04,800
forget

00:15:01,839 --> 00:15:06,639
a small detail when reviewing uh the

00:15:04,800 --> 00:15:09,839
application for example that

00:15:06,639 --> 00:15:12,639
some project didn't get updated or that

00:15:09,839 --> 00:15:13,839
something will break if used somewhere

00:15:12,639 --> 00:15:17,120
else

00:15:13,839 --> 00:15:19,760
by having all your code inside the same

00:15:17,120 --> 00:15:20,880
review by having all the code that you

00:15:19,760 --> 00:15:23,760
review inside the same

00:15:20,880 --> 00:15:26,000
pull request it's much easier to get a

00:15:23,760 --> 00:15:27,920
sense of what the i12 changes will be

00:15:26,000 --> 00:15:31,519
because then you won't have two pieces

00:15:27,920 --> 00:15:34,720
to put the pieces together yourself

00:15:31,519 --> 00:15:38,480
so those are the advantages of monorigos

00:15:34,720 --> 00:15:38,959
but as i said many ripples have their

00:15:38,480 --> 00:15:41,040
pros

00:15:38,959 --> 00:15:44,320
and their accounts and we are going to

00:15:41,040 --> 00:15:46,240
talk about their accounts as well

00:15:44,320 --> 00:15:48,399
the first one is that a single pull

00:15:46,240 --> 00:15:49,040
request can reach into multiple packages

00:15:48,399 --> 00:15:50,880
so

00:15:49,040 --> 00:15:52,480
this one was a pros but it's also

00:15:50,880 --> 00:15:56,000
account it means that

00:15:52,480 --> 00:15:58,720
it's also much easier for someone

00:15:56,000 --> 00:15:59,360
to write code that will accidentally

00:15:58,720 --> 00:16:02,880
start

00:15:59,360 --> 00:16:05,519
leaking into another project for example

00:16:02,880 --> 00:16:06,959
it could happen that in yeon we would

00:16:05,519 --> 00:16:10,320
start relying on

00:16:06,959 --> 00:16:10,720
core primitives from a package that is

00:16:10,320 --> 00:16:12,480
not

00:16:10,720 --> 00:16:14,880
meant to access them because

00:16:12,480 --> 00:16:16,880
semantically it wouldn't make sense

00:16:14,880 --> 00:16:19,519
it could also be possible that let's say

00:16:16,880 --> 00:16:22,800
the typestrip plugin would

00:16:19,519 --> 00:16:26,399
fetch utilities from the npm plugin

00:16:22,800 --> 00:16:28,720
the two of them are not meant to be um

00:16:26,399 --> 00:16:30,880
tied together but since everything is

00:16:28,720 --> 00:16:33,759
inside the same repository

00:16:30,880 --> 00:16:34,399
it's easy to make the mistake and body

00:16:33,759 --> 00:16:36,399
repos

00:16:34,399 --> 00:16:38,079
kind of prevent that by making it very

00:16:36,399 --> 00:16:38,880
explicit that the code that you're going

00:16:38,079 --> 00:16:42,079
to use

00:16:38,880 --> 00:16:42,079
come from another place

00:16:42,240 --> 00:16:49,440
the top-level history becomes entangled

00:16:46,399 --> 00:16:51,519
as i mentioned you have one history

00:16:49,440 --> 00:16:53,600
for all your sub projects it means that

00:16:51,519 --> 00:16:56,880
if you look at the history

00:16:53,600 --> 00:16:59,600
of monorepo it will be very difficult

00:16:56,880 --> 00:17:00,320
to get an idea of what are the changes

00:16:59,600 --> 00:17:03,759
that have

00:17:00,320 --> 00:17:07,199
affected this particular product

00:17:03,759 --> 00:17:10,480
there are ways to offset this

00:17:07,199 --> 00:17:12,319
problem the main one is that giz offers

00:17:10,480 --> 00:17:15,199
you to see the history by

00:17:12,319 --> 00:17:15,760
folder so if you go into the specific

00:17:15,199 --> 00:17:18,640
folder

00:17:15,760 --> 00:17:19,679
of the project sub project that you want

00:17:18,640 --> 00:17:21,360
to inspect

00:17:19,679 --> 00:17:24,000
you will be able to see the list of

00:17:21,360 --> 00:17:25,520
comments um as it would have been if it

00:17:24,000 --> 00:17:28,000
had been its own

00:17:25,520 --> 00:17:29,919
sub repository so it's not a huge

00:17:28,000 --> 00:17:32,400
problem it's more that you need to take

00:17:29,919 --> 00:17:34,720
some um to make

00:17:32,400 --> 00:17:37,280
some habits of working inside the

00:17:34,720 --> 00:17:37,280
monorepo

00:17:38,000 --> 00:17:42,400
um risk as a bending project boundaries

00:17:40,480 --> 00:17:44,000
by convenience this is actually kind of

00:17:42,400 --> 00:17:45,440
what i was saying with a single pull

00:17:44,000 --> 00:17:47,039
request that can reach into multiple

00:17:45,440 --> 00:17:50,000
package

00:17:47,039 --> 00:17:50,480
if you make mistakes it's easy to just

00:17:50,000 --> 00:17:53,919
start

00:17:50,480 --> 00:17:54,799
relying on others that you were not

00:17:53,919 --> 00:17:59,840
supposed to

00:17:54,799 --> 00:18:02,799
to do the repository size

00:17:59,840 --> 00:18:03,919
is a problem in monorepos since it means

00:18:02,799 --> 00:18:06,080
that

00:18:03,919 --> 00:18:07,280
you will have multiple projects into the

00:18:06,080 --> 00:18:09,120
same

00:18:07,280 --> 00:18:10,960
master project so we need you will need

00:18:09,120 --> 00:18:13,120
to clone it and it will

00:18:10,960 --> 00:18:14,400
uh you you won't have the ability to

00:18:13,120 --> 00:18:17,760
prevent planning

00:18:14,400 --> 00:18:19,679
one specific part of it meaning that the

00:18:17,760 --> 00:18:22,000
size on disk will be larger than if you

00:18:19,679 --> 00:18:24,640
had cloud a single repository containing

00:18:22,000 --> 00:18:25,039
a sub part of the project at the same

00:18:24,640 --> 00:18:27,520
time

00:18:25,039 --> 00:18:28,640
it can go both ways because even though

00:18:27,520 --> 00:18:31,600
you are cloning

00:18:28,640 --> 00:18:33,120
indeed uh the whole project inside a

00:18:31,600 --> 00:18:35,440
single location

00:18:33,120 --> 00:18:37,360
it also means that you are not cloning

00:18:35,440 --> 00:18:38,320
three repositories that you would have

00:18:37,360 --> 00:18:42,000
cloned otherwise

00:18:38,320 --> 00:18:43,919
so um if you were if you still need to

00:18:42,000 --> 00:18:45,520
clone all the

00:18:43,919 --> 00:18:47,679
sub projects in order for the whole

00:18:45,520 --> 00:18:49,679
application to work then having a mono

00:18:47,679 --> 00:18:51,840
repos will not take you

00:18:49,679 --> 00:18:53,760
more size it will just be inside a

00:18:51,840 --> 00:18:57,679
single repository versus multiple

00:18:53,760 --> 00:18:59,840
folders on your machine

00:18:57,679 --> 00:19:01,520
one large problem with monorepos and

00:18:59,840 --> 00:19:02,240
that's one that is not entirely solved

00:19:01,520 --> 00:19:04,880
yet

00:19:02,240 --> 00:19:06,799
is access control um it's fairly

00:19:04,880 --> 00:19:08,000
difficult to prevent someone from

00:19:06,799 --> 00:19:10,880
reading your code

00:19:08,000 --> 00:19:12,320
while still being able to access another

00:19:10,880 --> 00:19:13,919
part of the monarch

00:19:12,320 --> 00:19:17,520
for example let's say that you have an

00:19:13,919 --> 00:19:19,840
admin interface and you want to

00:19:17,520 --> 00:19:21,679
provide the contractors access to

00:19:19,840 --> 00:19:24,160
something else that is public in your

00:19:21,679 --> 00:19:25,840
monorepo but not the admin code it will

00:19:24,160 --> 00:19:28,240
be very difficult to do this

00:19:25,840 --> 00:19:28,880
so that's the main in my opinion the

00:19:28,240 --> 00:19:32,799
main con

00:19:28,880 --> 00:19:34,960
of monorepos and finally you need

00:19:32,799 --> 00:19:38,000
dedicated tooling to streamline

00:19:34,960 --> 00:19:41,120
your processes but at the same time it's

00:19:38,000 --> 00:19:43,039
true as well of poly reapers if you go

00:19:41,120 --> 00:19:45,280
with manual reports as we are going to

00:19:43,039 --> 00:19:46,400
see you have multiple tools that have

00:19:45,280 --> 00:19:49,520
been developed

00:19:46,400 --> 00:19:50,720
in order to make your life easier and uh

00:19:49,520 --> 00:19:54,480
you will need to learn

00:19:50,720 --> 00:19:57,120
about them you can do without

00:19:54,480 --> 00:19:58,240
but then you will quickly see that

00:19:57,120 --> 00:20:01,120
things are a bit

00:19:58,240 --> 00:20:03,200
more manual than you wish they would and

00:20:01,120 --> 00:20:05,280
you will quickly start to think

00:20:03,200 --> 00:20:07,200
but it would be better if something was

00:20:05,280 --> 00:20:11,200
doing all this automatically

00:20:07,200 --> 00:20:11,200
so you need to learn about new tooling

00:20:11,440 --> 00:20:14,640
as a rule of thumb modern ripples are

00:20:13,760 --> 00:20:17,679
for teams

00:20:14,640 --> 00:20:19,919
that often work together because

00:20:17,679 --> 00:20:21,039
then they have the velocity of being

00:20:19,919 --> 00:20:24,240
able to just

00:20:21,039 --> 00:20:27,919
um rely on the other team's work

00:20:24,240 --> 00:20:29,760
and at the advice based poly ripples

00:20:27,919 --> 00:20:32,480
instead are for independent

00:20:29,760 --> 00:20:35,600
sub-organization where development

00:20:32,480 --> 00:20:38,640
happen fairly in parallel but

00:20:35,600 --> 00:20:41,679
uh never really across each other

00:20:38,640 --> 00:20:44,960
for example a data log we have these

00:20:41,679 --> 00:20:45,840
uh monorepo for the front end but we

00:20:44,960 --> 00:20:47,760
have

00:20:45,840 --> 00:20:49,280
many other repositories as well so we

00:20:47,760 --> 00:20:52,320
have kind of a mixed approach

00:20:49,280 --> 00:20:53,039
we are partly reposed by org but we are

00:20:52,320 --> 00:20:57,280
monorepo

00:20:53,039 --> 00:20:59,520
inside a specific set of uh of data

00:20:57,280 --> 00:21:01,360
and that's very uh useful for us because

00:20:59,520 --> 00:21:02,159
it means that all the front-end team can

00:21:01,360 --> 00:21:04,640
work together

00:21:02,159 --> 00:21:06,720
inside a same repository but we still

00:21:04,640 --> 00:21:09,200
have the flexibility of letting

00:21:06,720 --> 00:21:10,080
for example the backend teams work on

00:21:09,200 --> 00:21:13,600
their own

00:21:10,080 --> 00:21:17,120
monorepos on their own and make it

00:21:13,600 --> 00:21:17,679
move at their pace as for open source

00:21:17,120 --> 00:21:19,520
projects

00:21:17,679 --> 00:21:22,000
model ripples are very often the right

00:21:19,520 --> 00:21:24,400
solution so as i mentioned before

00:21:22,000 --> 00:21:26,720
making contribution to a party ripple is

00:21:24,400 --> 00:21:29,600
can be extremely complicated

00:21:26,720 --> 00:21:32,559
and thus deters potential contributors

00:21:29,600 --> 00:21:34,720
so if you are

00:21:32,559 --> 00:21:36,400
pondering whether to use them or not if

00:21:34,720 --> 00:21:37,760
you are working in the open source i

00:21:36,400 --> 00:21:39,200
really advise you

00:21:37,760 --> 00:21:40,960
to start with the mono ripple and

00:21:39,200 --> 00:21:42,000
perhaps split it if you see that it

00:21:40,960 --> 00:21:45,600
doesn't work

00:21:42,000 --> 00:21:49,840
but in practice i i never seen it

00:21:45,600 --> 00:21:49,840
not work for this particular use case

00:21:50,080 --> 00:21:54,960
anyway so javascript mono repos

00:21:53,280 --> 00:21:57,039
in particular because that's something

00:21:54,960 --> 00:21:59,600
that uh i i

00:21:57,039 --> 00:22:01,200
i work with every day it's all about

00:21:59,600 --> 00:22:03,440
tooling so we are going to see a bit

00:22:01,200 --> 00:22:05,039
um what tools you can use in order to

00:22:03,440 --> 00:22:07,600
make yourself more productive

00:22:05,039 --> 00:22:09,440
with them the first one are yarn

00:22:07,600 --> 00:22:11,120
workspaces

00:22:09,440 --> 00:22:15,280
workspaces are a feature that has been

00:22:11,120 --> 00:22:18,640
introduced in 2017 i think

00:22:15,280 --> 00:22:20,320
and they allow you to manage

00:22:18,640 --> 00:22:22,480
multiple projects inside the same

00:22:20,320 --> 00:22:25,440
javascript application

00:22:22,480 --> 00:22:26,240
uh by using a very simple comment so for

00:22:25,440 --> 00:22:29,440
example

00:22:26,240 --> 00:22:29,919
um if you have a package.json and you

00:22:29,440 --> 00:22:33,679
are

00:22:29,919 --> 00:22:36,400
uh adding an one for each of your

00:22:33,679 --> 00:22:38,080
workspace folder at the root of your

00:22:36,400 --> 00:22:41,840
repository you can also add a

00:22:38,080 --> 00:22:43,520
packet.json that lists a workspace field

00:22:41,840 --> 00:22:46,159
and yarn will be able to automatically

00:22:43,520 --> 00:22:48,880
detect that all the sub

00:22:46,159 --> 00:22:49,520
packet.json need to be installed at the

00:22:48,880 --> 00:22:53,039
same time

00:22:49,520 --> 00:22:54,080
as the root one what's more is also able

00:22:53,039 --> 00:22:57,679
to properly resolve

00:22:54,080 --> 00:22:58,880
dependencies between workspaces from the

00:22:57,679 --> 00:23:01,440
same

00:22:58,880 --> 00:23:03,600
repository meaning that you can't start

00:23:01,440 --> 00:23:06,880
relying on the code from

00:23:03,600 --> 00:23:07,520
any folder inside the repo without

00:23:06,880 --> 00:23:10,000
having

00:23:07,520 --> 00:23:12,480
to uh reference relative links or

00:23:10,000 --> 00:23:12,480
whatnot

00:23:15,840 --> 00:23:19,760
enforcing consistency so this one is

00:23:18,080 --> 00:23:22,960
particularly important

00:23:19,760 --> 00:23:25,440
um various uh

00:23:22,960 --> 00:23:27,520
monorepos at the program where it's very

00:23:25,440 --> 00:23:30,640
easy to make a mistake and start

00:23:27,520 --> 00:23:33,360
making little changes from one

00:23:30,640 --> 00:23:35,760
dependency from one project to another

00:23:33,360 --> 00:23:39,200
for example it might be possible to make

00:23:35,760 --> 00:23:42,400
different ranges from for react inside

00:23:39,200 --> 00:23:44,480
two of your libraries meaning that

00:23:42,400 --> 00:23:45,600
you have the potential to use different

00:23:44,480 --> 00:23:48,480
versions and

00:23:45,600 --> 00:23:50,080
thus include different uh versions of

00:23:48,480 --> 00:23:50,720
react inside your bundle which has a

00:23:50,080 --> 00:23:53,360
size

00:23:50,720 --> 00:23:54,960
impact but sometimes even functional

00:23:53,360 --> 00:23:58,159
impact for example react

00:23:54,960 --> 00:24:00,559
uses singletons uses c

00:23:58,159 --> 00:24:02,400
symbols which are basically singletons

00:24:00,559 --> 00:24:04,320
and if you have two different versions

00:24:02,400 --> 00:24:07,200
of react then things like contexts

00:24:04,320 --> 00:24:07,919
will not work well in order to avoid

00:24:07,200 --> 00:24:09,919
that with

00:24:07,919 --> 00:24:12,320
yarn for example you just need to ensure

00:24:09,919 --> 00:24:14,480
that all your workspaces use the exact

00:24:12,320 --> 00:24:17,279
same range

00:24:14,480 --> 00:24:18,559
it's difficult to do that by yourself

00:24:17,279 --> 00:24:21,840
it's difficult to do that

00:24:18,559 --> 00:24:23,039
um by yourself it's for example here on

00:24:21,840 --> 00:24:26,080
screen you see that it's

00:24:23,039 --> 00:24:27,600
really just one character to mistake and

00:24:26,080 --> 00:24:30,000
suddenly you have problems that may

00:24:27,600 --> 00:24:32,480
arise package manager

00:24:30,000 --> 00:24:33,120
and in this case that would be yarn

00:24:32,480 --> 00:24:35,919
provide

00:24:33,120 --> 00:24:38,159
tools that are meant to validate that

00:24:35,919 --> 00:24:40,480
the consistency of your project is met

00:24:38,159 --> 00:24:42,480
so in this case it would be via a

00:24:40,480 --> 00:24:44,799
feature called constraint

00:24:42,480 --> 00:24:46,640
which lets you define rules to apply to

00:24:44,799 --> 00:24:47,919
your repository in very few lines of

00:24:46,640 --> 00:24:49,919
code

00:24:47,919 --> 00:24:51,039
i'm not yet aware of a package manager

00:24:49,919 --> 00:24:54,960
agnostic tool

00:24:51,039 --> 00:24:59,520
on this so feel free to tweet me or

00:24:54,960 --> 00:24:59,520
ping me on discord if if you know one

00:24:59,600 --> 00:25:06,480
and finally um abstract your tools

00:25:03,200 --> 00:25:09,520
so here we have uh these packages

00:25:06,480 --> 00:25:12,000
that contains all your uh tool

00:25:09,520 --> 00:25:13,200
uh dependencies for example a eslint

00:25:12,000 --> 00:25:16,880
preacher

00:25:13,200 --> 00:25:20,400
webpack and exposes a few scripts

00:25:16,880 --> 00:25:22,559
using a syntax that is the column syntax

00:25:20,400 --> 00:25:24,080
when you have a colon in the script yarn

00:25:22,559 --> 00:25:26,640
starting from version two

00:25:24,080 --> 00:25:28,320
will allow you to call it from anywhere

00:25:26,640 --> 00:25:31,039
in your workspace

00:25:28,320 --> 00:25:32,240
in your project sorry so for example

00:25:31,039 --> 00:25:35,360
let's say i'm in

00:25:32,240 --> 00:25:36,080
my library i will be able to run yarn

00:25:35,360 --> 00:25:39,039
test

00:25:36,080 --> 00:25:40,000
column lint and it will run this script

00:25:39,039 --> 00:25:43,120
even if i'm not

00:25:40,000 --> 00:25:45,679
inside the tooling workspace

00:25:43,120 --> 00:25:46,960
similarly if i go inside if i want to

00:25:45,679 --> 00:25:50,480
build a specific app

00:25:46,960 --> 00:25:52,799
i just need to run yarn build colon app

00:25:50,480 --> 00:25:53,679
put the name of the application i want

00:25:52,799 --> 00:25:57,200
to build

00:25:53,679 --> 00:26:00,320
and yarn will run webpack and replace

00:25:57,200 --> 00:26:03,200
project cwd and dollar one

00:26:00,320 --> 00:26:04,400
by the right values for the command i

00:26:03,200 --> 00:26:08,000
invoked

00:26:04,400 --> 00:26:10,720
by doing this you avoid having to copy

00:26:08,000 --> 00:26:11,840
the build script into each of your uh

00:26:10,720 --> 00:26:13,840
project

00:26:11,840 --> 00:26:14,880
which would be a pain to maintain of

00:26:13,840 --> 00:26:16,960
course

00:26:14,880 --> 00:26:19,840
but would also be error prone since you

00:26:16,960 --> 00:26:21,840
would be risking

00:26:19,840 --> 00:26:24,080
to to make mistakes by for example

00:26:21,840 --> 00:26:27,520
listing the dependencies as we saw

00:26:24,080 --> 00:26:27,520
or just writing the scripts

00:26:29,120 --> 00:26:32,400
you also should use a tool in order to

00:26:31,120 --> 00:26:34,000
manage your release

00:26:32,400 --> 00:26:36,000
so again that's not something that you

00:26:34,000 --> 00:26:39,919
have to do you can just go

00:26:36,000 --> 00:26:41,679
inside each of your of your packages

00:26:39,919 --> 00:26:43,919
and release them independently but

00:26:41,679 --> 00:26:46,000
that's not something that you should uh

00:26:43,919 --> 00:26:48,480
that you should do

00:26:46,000 --> 00:26:49,440
instead you should rather use a tool

00:26:48,480 --> 00:26:52,720
that is meant

00:26:49,440 --> 00:26:55,440
to help you on that so you have multiple

00:26:52,720 --> 00:26:56,960
options um atlassian has made a tool

00:26:55,440 --> 00:27:00,159
called change sets

00:26:56,960 --> 00:27:01,440
that allow you to use um github action

00:27:00,159 --> 00:27:03,440
bot

00:27:01,440 --> 00:27:05,360
in order to release which package should

00:27:03,440 --> 00:27:09,279
be really re-released

00:27:05,360 --> 00:27:11,760
for each of your pull requests

00:27:09,279 --> 00:27:13,279
leona is also a popular option and

00:27:11,760 --> 00:27:15,520
offers the option to

00:27:13,279 --> 00:27:17,120
bump the version of all your packages at

00:27:15,520 --> 00:27:20,399
once to release them

00:27:17,120 --> 00:27:22,320
all at the same time gun offers

00:27:20,399 --> 00:27:23,919
a built-in workflow called the radius

00:27:22,320 --> 00:27:25,919
workflow that is still a bit

00:27:23,919 --> 00:27:27,520
experimental but that we use to in order

00:27:25,919 --> 00:27:30,320
to release yarn itself so it's

00:27:27,520 --> 00:27:31,200
continuously improved and the idea is

00:27:30,320 --> 00:27:33,760
that you just have

00:27:31,200 --> 00:27:34,320
a command to run and on your cli you

00:27:33,760 --> 00:27:37,760
have a

00:27:34,320 --> 00:27:38,640
little uh graphical interface inside the

00:27:37,760 --> 00:27:41,279
terminal

00:27:38,640 --> 00:27:41,919
showing you all the workspaces that have

00:27:41,279 --> 00:27:44,960
been changed

00:27:41,919 --> 00:27:45,440
by your peer and offering you to bum

00:27:44,960 --> 00:27:49,039
that

00:27:45,440 --> 00:27:51,679
or not so each of those options

00:27:49,039 --> 00:27:53,279
is a good one uh it really depends on

00:27:51,679 --> 00:27:54,720
your use case release are something that

00:27:53,279 --> 00:27:57,760
is very difficult to

00:27:54,720 --> 00:27:58,799
make a uniform for everyone because we

00:27:57,760 --> 00:28:00,960
all have

00:27:58,799 --> 00:28:02,399
very slightly uh different uh

00:28:00,960 --> 00:28:04,960
requirements

00:28:02,399 --> 00:28:06,960
and for example babel wrote their own

00:28:04,960 --> 00:28:09,919
young plugins in order to

00:28:06,960 --> 00:28:10,559
achieve that they are just building a

00:28:09,919 --> 00:28:13,600
plugin

00:28:10,559 --> 00:28:16,720
that queries our internal apis

00:28:13,600 --> 00:28:17,360
and generate the version bumps as they

00:28:16,720 --> 00:28:19,919
want to

00:28:17,360 --> 00:28:22,480
to do so it's also an option if you if

00:28:19,919 --> 00:28:22,480
you want that

00:28:23,279 --> 00:28:28,320
okay um i hope this talk will have been

00:28:26,000 --> 00:28:29,600
helpful

00:28:28,320 --> 00:28:31,120
there are a lot of things that we

00:28:29,600 --> 00:28:32,960
haven't had the time to discuss about

00:28:31,120 --> 00:28:35,279
mono repos and body repos

00:28:32,960 --> 00:28:36,640
there is this repository that i've

00:28:35,279 --> 00:28:39,039
literally just discovered

00:28:36,640 --> 00:28:40,399
while uh writing this talk that is

00:28:39,039 --> 00:28:43,520
awesome monorepos

00:28:40,399 --> 00:28:44,000
uh by corferi and it's uh listing a

00:28:43,520 --> 00:28:46,480
bunch of

00:28:44,000 --> 00:28:48,159
resources that you will find useful uh

00:28:46,480 --> 00:28:51,279
about about mana repos

00:28:48,159 --> 00:28:53,360
as i said there are no right or wrong uh

00:28:51,279 --> 00:28:54,960
answer it's really up to you to decide

00:28:53,360 --> 00:28:56,080
what are the trade-offs that you want to

00:28:54,960 --> 00:28:58,880
to use

00:28:56,080 --> 00:28:59,919
so keep your mind open uh including if

00:28:58,880 --> 00:29:02,000
you're a

00:28:59,919 --> 00:29:03,840
monorepo fan keep your mind open to

00:29:02,000 --> 00:29:06,880
people using body rippers

00:29:03,840 --> 00:29:07,679
and um feel free to ask questions as you

00:29:06,880 --> 00:29:09,440
wish

00:29:07,679 --> 00:29:13,840
on discord i will be there to answer

00:29:09,440 --> 00:29:13,840

YouTube URL: https://www.youtube.com/watch?v=G3yIAS4NShk


