Title: Simplifying the Journey of Your Containerized Application from Dev to Production – Kyle Quest
Publication date: 2021-04-29
Playlist: DevX Conf
Description: 
	Creating a containerized application PoC is deceptively simple. Making it production ready is a lot of work though. This talk will cover what’s necessary to have a production ready containerized application and the steps to get there. We’ll explore the best practices and gotchas containerizing applications. We’ll also compare creating production ready containers the hard way and the easy way.
Captions: 
	00:00:15,120 --> 00:00:17,600
hi

00:00:15,440 --> 00:00:20,320
everybody i'll talk about taking

00:00:17,600 --> 00:00:22,240
containerized applications to production

00:00:20,320 --> 00:00:24,160
and what can be done to simplify the

00:00:22,240 --> 00:00:26,000
process i assume

00:00:24,160 --> 00:00:28,480
you know at least a little bit about

00:00:26,000 --> 00:00:31,599
containers and docker files

00:00:28,480 --> 00:00:33,520
so what's the problem creating a basic

00:00:31,599 --> 00:00:36,320
containerized application

00:00:33,520 --> 00:00:37,680
is pretty simple but making it

00:00:36,320 --> 00:00:40,239
production ready

00:00:37,680 --> 00:00:42,160
is actually a lot of work here's a

00:00:40,239 --> 00:00:45,440
couple of examples of what other people

00:00:42,160 --> 00:00:46,079
said about it docker files are easy they

00:00:45,440 --> 00:00:48,320
set

00:00:46,079 --> 00:00:49,760
then i had to handle proper caching

00:00:48,320 --> 00:00:52,399
proper security

00:00:49,760 --> 00:00:54,960
proper reproducibility proper config

00:00:52,399 --> 00:00:58,719
management proper portability and proper

00:00:54,960 --> 00:01:01,199
reusability turned out not to be so easy

00:00:58,719 --> 00:01:02,559
i spent two weeks building the poc and

00:01:01,199 --> 00:01:05,760
then eight months

00:01:02,559 --> 00:01:08,960
passing compliance eight months

00:01:05,760 --> 00:01:11,040
is a long time to get to production

00:01:08,960 --> 00:01:13,439
some of it is technical and some of it

00:01:11,040 --> 00:01:15,360
isn't of course

00:01:13,439 --> 00:01:17,040
there's a lot to care about when it

00:01:15,360 --> 00:01:19,759
comes to production

00:01:17,040 --> 00:01:20,880
i'll focus on image composition but i

00:01:19,759 --> 00:01:23,360
want to mention a few

00:01:20,880 --> 00:01:25,360
other things as well when it comes to

00:01:23,360 --> 00:01:26,400
the ops plane with logging metrics and

00:01:25,360 --> 00:01:28,080
monitoring

00:01:26,400 --> 00:01:29,840
it's more about integrating with what

00:01:28,080 --> 00:01:30,640
you have there are many different

00:01:29,840 --> 00:01:33,439
reasons

00:01:30,640 --> 00:01:34,720
for complexity there some of them are

00:01:33,439 --> 00:01:37,759
container related

00:01:34,720 --> 00:01:38,560
while others are legacy related if you

00:01:37,759 --> 00:01:41,119
can do

00:01:38,560 --> 00:01:42,320
one thing for the ops plane make sure

00:01:41,119 --> 00:01:45,360
you have structured

00:01:42,320 --> 00:01:47,439
login with json for example

00:01:45,360 --> 00:01:49,439
and if you can do two things make sure

00:01:47,439 --> 00:01:51,520
you log to the console

00:01:49,439 --> 00:01:53,119
it will be a lot easier to integrate

00:01:51,520 --> 00:01:56,079
with many container logging

00:01:53,119 --> 00:01:58,640
infrastructure tools out there

00:01:56,079 --> 00:01:59,600
dealing with secrets in a safe way can

00:01:58,640 --> 00:02:01,840
be a headache

00:01:59,600 --> 00:02:04,640
the biggest no-no of course is embedding

00:02:01,840 --> 00:02:06,479
secrets in your container images

00:02:04,640 --> 00:02:08,160
using environmental variables for

00:02:06,479 --> 00:02:10,879
secrets is not a good idea

00:02:08,160 --> 00:02:11,440
either security and compliance in

00:02:10,879 --> 00:02:14,319
general

00:02:11,440 --> 00:02:16,080
end up taking a lot of time because it

00:02:14,319 --> 00:02:18,319
requires a lot of manual work

00:02:16,080 --> 00:02:20,560
and because it requires security related

00:02:18,319 --> 00:02:22,640
domain knowledge

00:02:20,560 --> 00:02:24,160
the build and deploy times are super

00:02:22,640 --> 00:02:26,080
important when you develop your

00:02:24,160 --> 00:02:27,040
application and when you release it to

00:02:26,080 --> 00:02:30,239
production

00:02:27,040 --> 00:02:32,480
it almost always feels too slow and you

00:02:30,239 --> 00:02:34,239
don't want to make it a lot slower with

00:02:32,480 --> 00:02:37,360
containers

00:02:34,239 --> 00:02:39,440
now that we have a bit of context

00:02:37,360 --> 00:02:40,400
let's look for a containerized hello

00:02:39,440 --> 00:02:44,000
world app

00:02:40,400 --> 00:02:46,000
to start the journey i picked the first

00:02:44,000 --> 00:02:47,120
match i found on the internet it's

00:02:46,000 --> 00:02:49,519
simple enough

00:02:47,120 --> 00:02:50,959
and it turned out to be a good example

00:02:49,519 --> 00:02:54,640
for the stock

00:02:50,959 --> 00:02:56,959
it's a web app listening on port 3000

00:02:54,640 --> 00:02:57,760
the docker file is pretty small and

00:02:56,959 --> 00:03:00,239
simple

00:02:57,760 --> 00:03:01,440
and it has a few common problems so it's

00:03:00,239 --> 00:03:03,840
perfect

00:03:01,440 --> 00:03:05,599
it uses a standard node image it

00:03:03,840 --> 00:03:07,519
installs the app and it configures the

00:03:05,599 --> 00:03:08,959
container image to run the app on

00:03:07,519 --> 00:03:10,720
startup

00:03:08,959 --> 00:03:12,319
when we build it we end up with a

00:03:10,720 --> 00:03:15,680
container image that's almost

00:03:12,319 --> 00:03:17,440
one gig in size so

00:03:15,680 --> 00:03:19,760
what's wrong with the image and its

00:03:17,440 --> 00:03:21,360
docker file

00:03:19,760 --> 00:03:23,680
let's take a look at the docker file

00:03:21,360 --> 00:03:23,680
again

00:03:23,840 --> 00:03:27,920
the first thing that jumps at you is the

00:03:26,080 --> 00:03:30,239
image size of course

00:03:27,920 --> 00:03:32,080
it's a simple hello world app but it's

00:03:30,239 --> 00:03:35,120
almost one gig

00:03:32,080 --> 00:03:37,519
the second problem is related to caching

00:03:35,120 --> 00:03:38,159
if we update the application code we'll

00:03:37,519 --> 00:03:41,200
end up

00:03:38,159 --> 00:03:42,799
reinstalling the dependencies even if we

00:03:41,200 --> 00:03:45,280
don't change them

00:03:42,799 --> 00:03:46,640
that means slower container image build

00:03:45,280 --> 00:03:48,159
time

00:03:46,640 --> 00:03:50,159
because we don't have the user

00:03:48,159 --> 00:03:52,319
instruction in the docker file

00:03:50,159 --> 00:03:53,280
it means we're running as root and

00:03:52,319 --> 00:03:55,599
running as root

00:03:53,280 --> 00:03:57,319
is definitely not a good idea for

00:03:55,599 --> 00:03:59,680
production

00:03:57,319 --> 00:04:00,879
reproducibility is another problem we'll

00:03:59,680 --> 00:04:03,120
need to address

00:04:00,879 --> 00:04:04,319
we're not using the latest node image as

00:04:03,120 --> 00:04:07,200
the base

00:04:04,319 --> 00:04:09,439
which is actually great but we're only

00:04:07,200 --> 00:04:11,280
pinning the major node version

00:04:09,439 --> 00:04:14,239
and we can do better because we can

00:04:11,280 --> 00:04:16,479
still end up with breaking changes

00:04:14,239 --> 00:04:18,320
another reproducibility problem is

00:04:16,479 --> 00:04:21,120
application specific

00:04:18,320 --> 00:04:23,680
npm install may end up installing

00:04:21,120 --> 00:04:26,560
something different from production

00:04:23,680 --> 00:04:28,400
we also have a hidden problem the entry

00:04:26,560 --> 00:04:30,720
point for the node container image

00:04:28,400 --> 00:04:31,520
is actually a shell script and that

00:04:30,720 --> 00:04:33,280
shell script

00:04:31,520 --> 00:04:34,960
doesn't handle the system signals

00:04:33,280 --> 00:04:37,120
properly it means that

00:04:34,960 --> 00:04:39,680
your application won't get the signals

00:04:37,120 --> 00:04:42,479
it means no graceful shutdown and other

00:04:39,680 --> 00:04:44,000
signal related side effects good news we

00:04:42,479 --> 00:04:47,520
can quickly fix it

00:04:44,000 --> 00:04:49,759
with the init runtime parameter

00:04:47,520 --> 00:04:51,840
many of these problems are pretty common

00:04:49,759 --> 00:04:54,240
and there are common gotchas

00:04:51,840 --> 00:04:55,680
most dockerfile examples out there are

00:04:54,240 --> 00:04:58,720
not good for production

00:04:55,680 --> 00:05:01,199
they're they're not meant to be though

00:04:58,720 --> 00:05:03,120
they usually show only the most basic

00:05:01,199 --> 00:05:05,199
concepts

00:05:03,120 --> 00:05:06,960
one of the major gotchas especially for

00:05:05,199 --> 00:05:09,520
people new to containers

00:05:06,960 --> 00:05:11,520
is related to deleting files if you

00:05:09,520 --> 00:05:13,520
don't delete the files in the same

00:05:11,520 --> 00:05:15,680
run instruction where they get created

00:05:13,520 --> 00:05:18,400
the files will not be deleted

00:05:15,680 --> 00:05:21,360
it will just look like they are one of

00:05:18,400 --> 00:05:24,160
the commonly overlooked gotcha

00:05:21,360 --> 00:05:26,400
is related to large build contacts and

00:05:24,160 --> 00:05:28,400
the slower build times they cause

00:05:26,400 --> 00:05:30,800
when you build an image you specify a

00:05:28,400 --> 00:05:32,639
context directory for the build

00:05:30,800 --> 00:05:34,639
everything in that directory gets

00:05:32,639 --> 00:05:36,880
bundled into a tar file

00:05:34,639 --> 00:05:38,400
and then that file is sent to the docker

00:05:36,880 --> 00:05:40,240
daemon it means the

00:05:38,400 --> 00:05:42,400
locally installed app packages for

00:05:40,240 --> 00:05:44,639
example and other junk

00:05:42,400 --> 00:05:46,080
will end up in that r file unless you

00:05:44,639 --> 00:05:49,120
exclude them in the

00:05:46,080 --> 00:05:52,240
docker ignore file which is similar to

00:05:49,120 --> 00:05:53,840
that git ignore

00:05:52,240 --> 00:05:55,759
there are a few small enhancements we

00:05:53,840 --> 00:05:58,080
can make to the docker file to get us

00:05:55,759 --> 00:06:01,680
closer to production-ready containers

00:05:58,080 --> 00:06:03,759
so let's start there using a more

00:06:01,680 --> 00:06:06,800
specific version for the base image

00:06:03,759 --> 00:06:08,240
on line 1 is the first quick win doing

00:06:06,800 --> 00:06:12,080
the same for the os and

00:06:08,240 --> 00:06:13,919
application packages is a good idea too

00:06:12,080 --> 00:06:16,319
there's a number of language and

00:06:13,919 --> 00:06:18,400
framework specific ways to ensure we end

00:06:16,319 --> 00:06:21,520
up with the dependencies we expect

00:06:18,400 --> 00:06:23,759
for node.js it's using npmci

00:06:21,520 --> 00:06:25,120
instead of npm install you can see it on

00:06:23,759 --> 00:06:27,759
line 4.

00:06:25,120 --> 00:06:30,000
one of the other enhancements is related

00:06:27,759 --> 00:06:31,039
to removing the unused package cache

00:06:30,000 --> 00:06:32,880
files

00:06:31,039 --> 00:06:34,479
it's also specific to the language and

00:06:32,880 --> 00:06:37,120
the package manager you use

00:06:34,479 --> 00:06:38,639
you can see it on line 4 as well the

00:06:37,120 --> 00:06:41,039
instruction on line 4

00:06:38,639 --> 00:06:43,199
installs the application packages and it

00:06:41,039 --> 00:06:45,199
deletes the package cache in the same

00:06:43,199 --> 00:06:48,080
docker file run instruction

00:06:45,199 --> 00:06:50,880
to make sure we really delete the files

00:06:48,080 --> 00:06:53,360
and we don't create an extra layer

00:06:50,880 --> 00:06:55,199
the last application related enhancement

00:06:53,360 --> 00:06:56,560
is about installing the application

00:06:55,199 --> 00:06:58,800
dependencies

00:06:56,560 --> 00:06:59,680
separately from the application code

00:06:58,800 --> 00:07:02,560
that's lines

00:06:59,680 --> 00:07:03,680
three and five now changing the

00:07:02,560 --> 00:07:05,680
application code

00:07:03,680 --> 00:07:07,680
doesn't invalidate the image layer that

00:07:05,680 --> 00:07:09,759
includes the install dependencies

00:07:07,680 --> 00:07:11,120
and this improves the container image

00:07:09,759 --> 00:07:13,680
build time

00:07:11,120 --> 00:07:15,039
using a non-root user in the container

00:07:13,680 --> 00:07:17,919
is another quick win

00:07:15,039 --> 00:07:18,800
that's line six many language specific

00:07:17,919 --> 00:07:21,120
base images

00:07:18,800 --> 00:07:25,039
already have an unroot user for the

00:07:21,120 --> 00:07:27,520
node.js based images it snowed

00:07:25,039 --> 00:07:29,199
after making these enhancements we end

00:07:27,520 --> 00:07:31,440
up with a slightly smaller

00:07:29,199 --> 00:07:35,120
image don't worry you'll get better

00:07:31,440 --> 00:07:37,039
results with the real application

00:07:35,120 --> 00:07:38,240
the enhancements we made to the docker

00:07:37,039 --> 00:07:40,319
file represent

00:07:38,240 --> 00:07:41,440
some of the most common best practices

00:07:40,319 --> 00:07:43,680
for container

00:07:41,440 --> 00:07:44,560
there's a lot more of course and i won't

00:07:43,680 --> 00:07:48,160
be able to cover

00:07:44,560 --> 00:07:50,560
all of them here one of the important

00:07:48,160 --> 00:07:53,199
themes in the container best practices

00:07:50,560 --> 00:07:55,840
is keeping your images as

00:07:53,199 --> 00:07:57,759
small as possible some of the

00:07:55,840 --> 00:07:58,000
recommendations are pretty funny though

00:07:57,759 --> 00:07:59,919
for

00:07:58,000 --> 00:08:02,080
example don't install the tools you

00:07:59,919 --> 00:08:03,120
don't need well if you install something

00:08:02,080 --> 00:08:05,840
explicitly

00:08:03,120 --> 00:08:07,199
it implies that you actually need it

00:08:05,840 --> 00:08:10,000
it's not always clear

00:08:07,199 --> 00:08:12,240
what you need and don't need though and

00:08:10,000 --> 00:08:15,520
what you do need might be a subset

00:08:12,240 --> 00:08:19,440
of what you install figuring out

00:08:15,520 --> 00:08:21,039
manually that is super painful and

00:08:19,440 --> 00:08:23,280
pretty time consuming

00:08:21,039 --> 00:08:25,199
using smaller base images is considered

00:08:23,280 --> 00:08:27,120
to be one of the best ways to reduce the

00:08:25,199 --> 00:08:29,280
application image size

00:08:27,120 --> 00:08:31,680
there are a number of options out there

00:08:29,280 --> 00:08:33,919
using alpine is a pretty popular

00:08:31,680 --> 00:08:35,440
recommendation because it gives you a

00:08:33,919 --> 00:08:37,919
much smaller image

00:08:35,440 --> 00:08:40,000
for example alpine wood node is about

00:08:37,919 --> 00:08:42,959
115 megabytes while

00:08:40,000 --> 00:08:44,640
the default node.js image is 940

00:08:42,959 --> 00:08:47,040
megabytes

00:08:44,640 --> 00:08:49,040
using alpine sounds good on paper but

00:08:47,040 --> 00:08:51,040
it's not always straightforward

00:08:49,040 --> 00:08:53,120
it's good if it works for you but there

00:08:51,040 --> 00:08:56,399
are many reasons why you might

00:08:53,120 --> 00:08:57,839
end up with other base images developer

00:08:56,399 --> 00:09:00,160
experience is one of them

00:08:57,839 --> 00:09:01,600
the package manager ecosystem is another

00:09:00,160 --> 00:09:04,399
one it's also

00:09:01,600 --> 00:09:05,760
a lot easier to find examples for ubuntu

00:09:04,399 --> 00:09:07,760
and debian

00:09:05,760 --> 00:09:09,680
there are other options including

00:09:07,760 --> 00:09:14,560
distroless

00:09:09,680 --> 00:09:15,440
node.js but distroless is about 120

00:09:14,560 --> 00:09:18,959
megabytes

00:09:15,440 --> 00:09:21,200
but i'll talk about that a bit later

00:09:18,959 --> 00:09:22,720
if you're considering alpine do a bit of

00:09:21,200 --> 00:09:24,959
research and a spy

00:09:22,720 --> 00:09:27,200
to see if it's a good fit for you there

00:09:24,959 --> 00:09:29,440
are a lot of gotchas to explore

00:09:27,200 --> 00:09:31,120
many people who start using alpine

00:09:29,440 --> 00:09:33,519
eventually move away from it

00:09:31,120 --> 00:09:34,880
learning about the alpine gotchas the

00:09:33,519 --> 00:09:37,440
hard way

00:09:34,880 --> 00:09:39,680
speaking of the hard way let's make more

00:09:37,440 --> 00:09:41,200
manual improvements to our container

00:09:39,680 --> 00:09:43,519
image

00:09:41,200 --> 00:09:45,120
i'll skip manual image hardening it's

00:09:43,519 --> 00:09:48,080
complicated it's messy

00:09:45,120 --> 00:09:49,760
it's brittle and it's time consuming and

00:09:48,080 --> 00:09:50,000
we already got a taste of what it's like

00:09:49,760 --> 00:09:52,320
to

00:09:50,000 --> 00:09:54,160
manually optimize the docker file

00:09:52,320 --> 00:09:55,440
instructions with our application

00:09:54,160 --> 00:09:59,200
dependencies

00:09:55,440 --> 00:09:59,920
there are a lot more there i'll focus on

00:09:59,200 --> 00:10:02,880
the

00:09:59,920 --> 00:10:04,720
multi-stage and smaller base image steps

00:10:02,880 --> 00:10:06,800
multi-stage builds

00:10:04,720 --> 00:10:08,720
is a relatively new docker feature you

00:10:06,800 --> 00:10:10,000
build your app in one stage and then you

00:10:08,720 --> 00:10:12,320
copy the application

00:10:10,000 --> 00:10:14,399
artifacts to the next stage where you

00:10:12,320 --> 00:10:16,480
assemble your deployment image

00:10:14,399 --> 00:10:18,800
you can think of the multi-stage builds

00:10:16,480 --> 00:10:20,880
in docker as a native implementation of

00:10:18,800 --> 00:10:23,120
the builder pattern concept

00:10:20,880 --> 00:10:24,720
the main got you with multi-stage aside

00:10:23,120 --> 00:10:26,800
from edit complexity

00:10:24,720 --> 00:10:28,560
is that you need to know what has to be

00:10:26,800 --> 00:10:30,720
copied this means

00:10:28,560 --> 00:10:32,399
that unless you have a single file or a

00:10:30,720 --> 00:10:35,120
few files you're copying

00:10:32,399 --> 00:10:37,200
everything possible i've seen that many

00:10:35,120 --> 00:10:39,519
times

00:10:37,200 --> 00:10:41,040
let's see what our docker file looks

00:10:39,519 --> 00:10:43,680
like with multi-stage

00:10:41,040 --> 00:10:44,399
here we copy the application folder to

00:10:43,680 --> 00:10:48,320
our

00:10:44,399 --> 00:10:50,640
deployment image that's line 13.

00:10:48,320 --> 00:10:53,360
we don't need to clean the package cache

00:10:50,640 --> 00:10:55,279
in the first stage on line 5 because

00:10:53,360 --> 00:10:56,399
it's not going to be included in the

00:10:55,279 --> 00:10:58,640
deployment image

00:10:56,399 --> 00:10:59,760
other than that it's mostly the same

00:10:58,640 --> 00:11:02,720
instructions but

00:10:59,760 --> 00:11:04,320
two from instructions that represent two

00:11:02,720 --> 00:11:06,720
stages

00:11:04,320 --> 00:11:08,640
let's see what we get we end up with a

00:11:06,720 --> 00:11:10,880
slightly smaller image

00:11:08,640 --> 00:11:12,000
a real web application with react or

00:11:10,880 --> 00:11:15,040
view

00:11:12,000 --> 00:11:18,640
or another major framework

00:11:15,040 --> 00:11:21,040
will have a much bigger difference there

00:11:18,640 --> 00:11:22,640
now let's see what we need to do to have

00:11:21,040 --> 00:11:24,480
an alpine version

00:11:22,640 --> 00:11:26,240
and here we only need to change the base

00:11:24,480 --> 00:11:29,040
image stack everything else

00:11:26,240 --> 00:11:32,480
is the same but this version the image

00:11:29,040 --> 00:11:36,240
size is much smaller 118 megabytes

00:11:32,480 --> 00:11:38,399
pretty nice another option is distroless

00:11:36,240 --> 00:11:40,000
distrolus is a stripped down version of

00:11:38,399 --> 00:11:42,800
debian but no shell

00:11:40,000 --> 00:11:45,920
and no package manager the digitalis

00:11:42,800 --> 00:11:48,640
image for node is 121 megabytes which is

00:11:45,920 --> 00:11:50,639
pretty close to what you get with alpine

00:11:48,640 --> 00:11:52,320
aside from no shell and no package

00:11:50,639 --> 00:11:53,680
manager there's a couple of other

00:11:52,320 --> 00:11:56,240
gotchas to keep in mind

00:11:53,680 --> 00:11:56,880
first you have to use multi-stage builds

00:11:56,240 --> 00:11:59,200
second

00:11:56,880 --> 00:12:00,639
not always not all languages are

00:11:59,200 --> 00:12:03,040
officially supported

00:12:00,639 --> 00:12:04,160
for example there's no official ruby

00:12:03,040 --> 00:12:06,000
support

00:12:04,160 --> 00:12:07,279
the docker file needs to be tweaked a

00:12:06,000 --> 00:12:09,519
little bit as well

00:12:07,279 --> 00:12:11,440
there's no node user and the command

00:12:09,519 --> 00:12:12,880
instruction format is slightly different

00:12:11,440 --> 00:12:15,920
because the default

00:12:12,880 --> 00:12:18,320
entry point is also different

00:12:15,920 --> 00:12:20,399
with the distroless version the app

00:12:18,320 --> 00:12:20,959
image size is close to what we get with

00:12:20,399 --> 00:12:24,880
alpine

00:12:20,959 --> 00:12:27,600
122 megs that's pretty great

00:12:24,880 --> 00:12:29,680
that was fun but as a developer you

00:12:27,600 --> 00:12:30,800
probably want to spend more time working

00:12:29,680 --> 00:12:33,680
on your application

00:12:30,800 --> 00:12:34,480
and less time with docker files there

00:12:33,680 --> 00:12:36,240
are a number of

00:12:34,480 --> 00:12:38,160
options that will get you closer to

00:12:36,240 --> 00:12:41,040
production ready containers and with a

00:12:38,160 --> 00:12:43,920
lot less manual work

00:12:41,040 --> 00:12:45,600
these are great options to consider if

00:12:43,920 --> 00:12:48,320
they work for your app

00:12:45,600 --> 00:12:49,600
these tools simplify container authoring

00:12:48,320 --> 00:12:52,880
and they give you at least

00:12:49,600 --> 00:12:55,040
some of the basic image optimizations

00:12:52,880 --> 00:12:56,959
build packs are the most mature and

00:12:55,040 --> 00:12:59,440
consistent option because of their

00:12:56,959 --> 00:13:00,480
passwords you don't need to write any

00:12:59,440 --> 00:13:02,079
docker files

00:13:00,480 --> 00:13:04,079
just point the build packs onto your

00:13:02,079 --> 00:13:07,600
application code

00:13:04,079 --> 00:13:09,279
let's see them in action to use build

00:13:07,600 --> 00:13:11,920
packs you can get the pack tool

00:13:09,279 --> 00:13:12,720
or you can use waypoint from hashicorp

00:13:11,920 --> 00:13:14,320
either way

00:13:12,720 --> 00:13:15,839
you choose a builder type that's

00:13:14,320 --> 00:13:17,120
responsible for building your

00:13:15,839 --> 00:13:19,040
application image

00:13:17,120 --> 00:13:21,200
and you can choose which build packs the

00:13:19,040 --> 00:13:23,120
builder should try or you can rely on

00:13:21,200 --> 00:13:24,399
the application detection logic and

00:13:23,120 --> 00:13:26,160
buildbacks

00:13:24,399 --> 00:13:27,920
depending on the build pack vendor and

00:13:26,160 --> 00:13:29,360
the builder type you choose

00:13:27,920 --> 00:13:31,519
you'll end up with slightly different

00:13:29,360 --> 00:13:33,760
images they'll have different sizes

00:13:31,519 --> 00:13:35,680
they'll use different non-root users

00:13:33,760 --> 00:13:36,800
with build packs you also need to define

00:13:35,680 --> 00:13:38,880
a proc file

00:13:36,800 --> 00:13:39,920
to declare your application entry point

00:13:38,880 --> 00:13:41,760
or

00:13:39,920 --> 00:13:43,600
you will need to structure your

00:13:41,760 --> 00:13:45,360
application in a certain way

00:13:43,600 --> 00:13:47,360
for example for node.js you need to

00:13:45,360 --> 00:13:50,399
define the start script in the patch

00:13:47,360 --> 00:13:52,399
in the package.json file

00:13:50,399 --> 00:13:54,800
keep in mind that these tools are pretty

00:13:52,399 --> 00:13:57,120
opinionated and with limited ability to

00:13:54,800 --> 00:13:59,279
customize for some of these options

00:13:57,120 --> 00:14:00,959
with build packs you can customize quite

00:13:59,279 --> 00:14:03,120
a few things so

00:14:00,959 --> 00:14:05,279
you give up control so you can do a lot

00:14:03,120 --> 00:14:07,360
less it's definitely worth it if it

00:14:05,279 --> 00:14:09,680
works for your app

00:14:07,360 --> 00:14:12,160
build packs and the other tools give you

00:14:09,680 --> 00:14:14,240
a number of basic image optimizations

00:14:12,160 --> 00:14:16,480
but there's a lot more that can be done

00:14:14,240 --> 00:14:19,279
at the os and application level

00:14:16,480 --> 00:14:22,079
for example your application might need

00:14:19,279 --> 00:14:23,360
the aws sdk package but it might not

00:14:22,079 --> 00:14:26,560
need all of it

00:14:23,360 --> 00:14:29,040
this is where docker slim shines docker

00:14:26,560 --> 00:14:31,600
slim can do a lot of different things

00:14:29,040 --> 00:14:32,240
optimizing container images is one of

00:14:31,600 --> 00:14:34,800
its

00:14:32,240 --> 00:14:36,480
best known capabilities it uses an

00:14:34,800 --> 00:14:38,240
application-centric approach

00:14:36,480 --> 00:14:40,560
to figure out what should be in the

00:14:38,240 --> 00:14:42,959
container image and what should

00:14:40,560 --> 00:14:44,560
you also get to spend a lot less time on

00:14:42,959 --> 00:14:46,480
vulnerability management

00:14:44,560 --> 00:14:48,880
and image hardening in addition to

00:14:46,480 --> 00:14:50,639
getting security profiles you can use at

00:14:48,880 --> 00:14:52,399
runtime

00:14:50,639 --> 00:14:54,480
on this screen i executed the build

00:14:52,399 --> 00:14:58,560
command for docker slim it took our

00:14:54,480 --> 00:15:00,959
original 945 megabyte container image

00:14:58,560 --> 00:15:02,720
and a generated and optimized image

00:15:00,959 --> 00:15:05,680
that's about 80mx

00:15:02,720 --> 00:15:08,160
docker slim uses a combination of static

00:15:05,680 --> 00:15:10,880
and dynamic analysis to generate

00:15:08,160 --> 00:15:12,000
optimized container images being me if

00:15:10,880 --> 00:15:14,240
you want to know

00:15:12,000 --> 00:15:15,680
more about the internals you can also

00:15:14,240 --> 00:15:17,440
use the x-ray command

00:15:15,680 --> 00:15:19,440
in docker sling to see what the

00:15:17,440 --> 00:15:23,600
optimized image looks like

00:15:19,440 --> 00:15:25,440
how it's structured and what's included

00:15:23,600 --> 00:15:27,839
in this journey we went through a number

00:15:25,440 --> 00:15:28,959
of revisions for our containerized

00:15:27,839 --> 00:15:31,120
application

00:15:28,959 --> 00:15:32,639
we started with an image that had number

00:15:31,120 --> 00:15:35,120
of problems

00:15:32,639 --> 00:15:35,759
and it was almost one gig in size and we

00:15:35,120 --> 00:15:37,839
ended up

00:15:35,759 --> 00:15:39,279
with an optimized image that's 80

00:15:37,839 --> 00:15:41,600
megabytes

00:15:39,279 --> 00:15:43,680
depending on the path you choose you can

00:15:41,600 --> 00:15:44,639
have optimized production ready

00:15:43,680 --> 00:15:47,519
containers

00:15:44,639 --> 00:15:48,800
without ever touching any docker files

00:15:47,519 --> 00:15:50,560
creating a production ready

00:15:48,800 --> 00:15:54,000
containerized application

00:15:50,560 --> 00:15:57,279
doesn't need to be complicated and you

00:15:54,000 --> 00:16:00,320
don't need to do it the hard way

00:15:57,279 --> 00:16:01,040
a few takeaways first of all keep it

00:16:00,320 --> 00:16:02,560
simple

00:16:01,040 --> 00:16:04,959
there are many great tools out there

00:16:02,560 --> 00:16:06,800
that will help and if you need to have

00:16:04,959 --> 00:16:08,959
custom docker files

00:16:06,800 --> 00:16:11,440
make sure you don't run as root and you

00:16:08,959 --> 00:16:13,920
install your application dependencies

00:16:11,440 --> 00:16:15,519
separately from your application code if

00:16:13,920 --> 00:16:23,120
you have any questions

00:16:15,519 --> 00:16:25,199
feel free to reach out anytime thank you

00:16:23,120 --> 00:16:25,199

YouTube URL: https://www.youtube.com/watch?v=8iJ_6VUzk1I


