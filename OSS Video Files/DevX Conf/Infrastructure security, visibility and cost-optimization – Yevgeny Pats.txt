Title: Infrastructure security, visibility and cost-optimization â€“ Yevgeny Pats
Publication date: 2021-04-26
Playlist: DevX Conf
Description: 
	About DevX Conf:
DevX Conf is a two-day virtual conference. It's a space where creators collaborate, listen, discuss and declutter our workflows, toolchains, and minds. To improve developer experience. Organized by Gitpod.
https://devxconf.org/
Captions: 
	00:00:13,920 --> 00:00:17,440
hi everyone

00:00:15,200 --> 00:00:19,359
thanks for joining me here i'm evgeny

00:00:17,440 --> 00:00:20,960
potts ceo with call query

00:00:19,359 --> 00:00:23,439
and in this short session i'll talk

00:00:20,960 --> 00:00:27,119
about cloud infrastructure security

00:00:23,439 --> 00:00:28,840
visibility and cost optimization

00:00:27,119 --> 00:00:31,039
so before we dive in quickly about

00:00:28,840 --> 00:00:32,480
myself i'm the co-founder and ceo at

00:00:31,039 --> 00:00:35,600
cloud query before that

00:00:32,480 --> 00:00:37,600
i was the founder of fuzzy.dev which is

00:00:35,600 --> 00:00:40,559
now part of gitlab which is

00:00:37,600 --> 00:00:42,800
a ci for fast testing last 10 plus years

00:00:40,559 --> 00:00:44,719
i worked at the cyber security space

00:00:42,800 --> 00:00:46,320
and the last two years i was focused in

00:00:44,719 --> 00:00:48,000
the depths of golf space

00:00:46,320 --> 00:00:49,600
i'm a big believer in this space as a

00:00:48,000 --> 00:00:51,440
developer myself

00:00:49,600 --> 00:00:53,760
and before that i served at the cyber

00:00:51,440 --> 00:00:57,199
security intelligence unit

00:00:53,760 --> 00:00:58,800
so let's dive in and start with a

00:00:57,199 --> 00:01:01,840
question

00:00:58,800 --> 00:01:04,320
so why do we need another security tool

00:01:01,840 --> 00:01:05,920
and because we are at the davinx conf

00:01:04,320 --> 00:01:10,000
i'll reuse the meme

00:01:05,920 --> 00:01:12,479
from the manifesto and transfer this

00:01:10,000 --> 00:01:13,360
i need to walk you through a small

00:01:12,479 --> 00:01:17,200
exercise

00:01:13,360 --> 00:01:21,280
so let's design a small tv app in aws

00:01:17,200 --> 00:01:24,400
and sign up which has two main features

00:01:21,280 --> 00:01:26,640
sign up and log into users and

00:01:24,400 --> 00:01:27,439
each user can add remove update his own

00:01:26,640 --> 00:01:29,040
to-do's

00:01:27,439 --> 00:01:31,600
so it's a classic multi-tenant

00:01:29,040 --> 00:01:31,600
application

00:01:32,079 --> 00:01:36,240
so we have our users we hire our first

00:01:34,880 --> 00:01:40,159
ninja developer

00:01:36,240 --> 00:01:44,159
he goes opens an aws root account

00:01:40,159 --> 00:01:48,799
he creates an aws item user for himself

00:01:44,159 --> 00:01:51,119
he enables mfa creates an access key

00:01:48,799 --> 00:01:53,759
now he stores the frontend application

00:01:51,119 --> 00:01:57,520
as three bucket

00:01:53,759 --> 00:01:59,600
he uses cognitive for authentication

00:01:57,520 --> 00:02:00,799
the fronted application talks to the api

00:01:59,600 --> 00:02:03,280
gateway

00:02:00,799 --> 00:02:05,439
and we want to run our business logic

00:02:03,280 --> 00:02:07,360
and crowdlogic somewhere so we'll use

00:02:05,439 --> 00:02:09,520
kind of serverless architecture so we'll

00:02:07,360 --> 00:02:11,280
run it in a lambda function

00:02:09,520 --> 00:02:12,959
and we need somewhere to store our

00:02:11,280 --> 00:02:16,160
introduce so we started

00:02:12,959 --> 00:02:17,360
in dynamodb we might also want to put it

00:02:16,160 --> 00:02:20,480
in a vpc

00:02:17,360 --> 00:02:22,239
for security purposes and we might also

00:02:20,480 --> 00:02:24,400
want to enable some monitoring so we

00:02:22,239 --> 00:02:27,040
enable cloud watch

00:02:24,400 --> 00:02:27,760
so hopefully now we have something that

00:02:27,040 --> 00:02:30,560
is

00:02:27,760 --> 00:02:32,720
working to the application but now our

00:02:30,560 --> 00:02:34,800
developer also wants to have a kind of a

00:02:32,720 --> 00:02:38,480
staging or testing environment

00:02:34,800 --> 00:02:40,640
so we duplicate it again and now our app

00:02:38,480 --> 00:02:42,720
grows in popularity

00:02:40,640 --> 00:02:43,760
and we hire our first account executive

00:02:42,720 --> 00:02:48,640
we provide him an

00:02:43,760 --> 00:02:50,560
aws iem user and an access key

00:02:48,640 --> 00:02:53,760
and you might want to duplicate it again

00:02:50,560 --> 00:02:56,160
to have a demo account

00:02:53,760 --> 00:02:57,440
so pretty quickly you can see that it

00:02:56,160 --> 00:02:59,040
becomes this

00:02:57,440 --> 00:03:01,120
and this is not even for real

00:02:59,040 --> 00:03:04,400
application obviously

00:03:01,120 --> 00:03:06,480
even for a small startup that has a real

00:03:04,400 --> 00:03:08,720
production application and obviously for

00:03:06,480 --> 00:03:12,319
medium size and larger organization

00:03:08,720 --> 00:03:12,560
which is even worse and we don't want to

00:03:12,319 --> 00:03:16,560
be

00:03:12,560 --> 00:03:18,239
this person so we need to ask ourselves

00:03:16,560 --> 00:03:21,200
couple of questions

00:03:18,239 --> 00:03:22,400
so how do we ensure uh security

00:03:21,200 --> 00:03:25,360
compliance

00:03:22,400 --> 00:03:26,080
cost uh how do we monitor all this how

00:03:25,360 --> 00:03:29,519
do we connect

00:03:26,080 --> 00:03:32,000
the dots um how do we do one-time audit

00:03:29,519 --> 00:03:34,720
or cloud infrastructure

00:03:32,000 --> 00:03:35,280
and even better how do we run those

00:03:34,720 --> 00:03:38,239
audits

00:03:35,280 --> 00:03:40,159
continuously so we can catch it right

00:03:38,239 --> 00:03:43,040
away when something is wrong

00:03:40,159 --> 00:03:44,239
um some companies use multiple cloud

00:03:43,040 --> 00:03:46,480
providers

00:03:44,239 --> 00:03:48,400
some of them use multiple uh sas

00:03:46,480 --> 00:03:50,799
applications that are connected to those

00:03:48,400 --> 00:03:51,599
cloud providers in various ways like all

00:03:50,799 --> 00:03:54,720
zero

00:03:51,599 --> 00:03:55,519
octa and so on so how do we enforce

00:03:54,720 --> 00:03:59,040
pulses

00:03:55,519 --> 00:04:00,080
across providers uh do we use multiple

00:03:59,040 --> 00:04:03,120
tools

00:04:00,080 --> 00:04:06,799
uh how do we connect them and so on

00:04:03,120 --> 00:04:09,200
and this is exactly why we introduce

00:04:06,799 --> 00:04:11,280
cloud query

00:04:09,200 --> 00:04:13,439
it's hosted on github.com slash cloud

00:04:11,280 --> 00:04:16,239
very slash cloud query

00:04:13,439 --> 00:04:18,160
and in one sentence what it does it

00:04:16,239 --> 00:04:20,880
transforms your cloud infrastructure and

00:04:18,160 --> 00:04:23,840
sas application configuration to sql

00:04:20,880 --> 00:04:25,360
for security reason compliance cost and

00:04:23,840 --> 00:04:28,479
various other use cases

00:04:25,360 --> 00:04:29,919
you can think of you can think of it as

00:04:28,479 --> 00:04:33,280
a single pane of glass

00:04:29,919 --> 00:04:34,400
for your infrastructure we released it

00:04:33,280 --> 00:04:37,440
late last year

00:04:34,400 --> 00:04:39,759
we already have more than 1.4 k stars

00:04:37,440 --> 00:04:40,639
uh thanks to all the community and the

00:04:39,759 --> 00:04:42,720
users that were

00:04:40,639 --> 00:04:44,800
opening issues asking for feature

00:04:42,720 --> 00:04:48,000
requests reporting bugs

00:04:44,800 --> 00:04:48,880
um it really helped the law it's written

00:04:48,000 --> 00:04:51,199
in go

00:04:48,880 --> 00:04:52,240
it's one binary it has pluggable

00:04:51,199 --> 00:04:54,000
architecture

00:04:52,240 --> 00:04:56,720
so actually you can write your own

00:04:54,000 --> 00:04:58,880
providers you can maintain

00:04:56,720 --> 00:05:00,400
yourself in your data in your own github

00:04:58,880 --> 00:05:02,479
repository

00:05:00,400 --> 00:05:03,520
so uh you don't need to go through our

00:05:02,479 --> 00:05:06,479
pr process

00:05:03,520 --> 00:05:07,680
and you can still use the query sdk and

00:05:06,479 --> 00:05:10,720
the cloud query

00:05:07,680 --> 00:05:11,520
ecosystem uh so currently we maintain

00:05:10,720 --> 00:05:13,520
gcp

00:05:11,520 --> 00:05:14,720
azure rateable you ask kubernetes and

00:05:13,520 --> 00:05:17,120
octa provider

00:05:14,720 --> 00:05:18,080
we are working on some more and also we

00:05:17,120 --> 00:05:20,960
are expanding

00:05:18,080 --> 00:05:21,840
uh those pro the existing providers uh

00:05:20,960 --> 00:05:25,280
obviously

00:05:21,840 --> 00:05:26,639
all of them are open source so you can

00:05:25,280 --> 00:05:28,800
actually add

00:05:26,639 --> 00:05:31,280
support for more resources that you need

00:05:28,800 --> 00:05:34,400
just by opening a pull request

00:05:31,280 --> 00:05:37,360
uh and if some of you

00:05:34,400 --> 00:05:39,360
are familiar with osquery and terraform

00:05:37,360 --> 00:05:43,759
so you can think of it as a

00:05:39,360 --> 00:05:47,360
kind of a merge between the two tools

00:05:43,759 --> 00:05:50,400
so enough talking and now

00:05:47,360 --> 00:05:52,960
let's deep dive into the live demo

00:05:50,400 --> 00:05:54,160
so first let's start by installing cloud

00:05:52,960 --> 00:05:56,479
3 by running

00:05:54,160 --> 00:05:57,520
brew install cloud 3 slash dab slash

00:05:56,479 --> 00:06:00,160
clock grid

00:05:57,520 --> 00:06:02,160
if you're on mac of course you can also

00:06:00,160 --> 00:06:05,120
upgrade to the latest version via guru

00:06:02,160 --> 00:06:06,800
upgrade so it's not needed correctly as

00:06:05,120 --> 00:06:09,520
the latest version is installed

00:06:06,800 --> 00:06:10,479
already on my machine if you're on

00:06:09,520 --> 00:06:14,639
windows

00:06:10,479 --> 00:06:17,840
linux you can just go to our github page

00:06:14,639 --> 00:06:20,880
and i get it from releases

00:06:17,840 --> 00:06:22,720
it's pre-compiled binary with no

00:06:20,880 --> 00:06:26,319
dependencies

00:06:22,720 --> 00:06:27,199
so it just works once it's installed

00:06:26,319 --> 00:06:30,479
cloud query has

00:06:27,199 --> 00:06:35,440
three main commands fetch

00:06:30,479 --> 00:06:37,280
gen config and query

00:06:35,440 --> 00:06:39,120
we'll go through each of them so fetch

00:06:37,280 --> 00:06:40,479
as the name suggests just fetches the

00:06:39,120 --> 00:06:43,360
configuration from

00:06:40,479 --> 00:06:45,039
your cloud provider or applications

00:06:43,360 --> 00:06:46,880
concurrently

00:06:45,039 --> 00:06:48,800
you can fetch them from multiple

00:06:46,880 --> 00:06:50,560
accounts multiple providers

00:06:48,800 --> 00:06:52,240
all concurrently depending on what you

00:06:50,560 --> 00:06:55,319
specify

00:06:52,240 --> 00:06:57,360
and to specify you need to create a

00:06:55,319 --> 00:06:59,759
config.yaml

00:06:57,360 --> 00:07:01,360
which is generated by a helper command

00:06:59,759 --> 00:07:04,960
called jumpconfig

00:07:01,360 --> 00:07:08,720
you can pass it aws gcp

00:07:04,960 --> 00:07:11,919
you can also pass multiple providers

00:07:08,720 --> 00:07:14,960
depending on what we want to fetch so

00:07:11,919 --> 00:07:16,720
i already created a config.cml which we

00:07:14,960 --> 00:07:19,360
can look into

00:07:16,720 --> 00:07:20,560
essentially it's a very simple yaml file

00:07:19,360 --> 00:07:23,199
specified

00:07:20,560 --> 00:07:26,319
all the resources that you want to fetch

00:07:23,199 --> 00:07:28,240
uh by default clock regen config

00:07:26,319 --> 00:07:30,479
generates the config.jml with all the

00:07:28,240 --> 00:07:32,319
resources that it supports

00:07:30,479 --> 00:07:33,840
uh you can comment out some of them if

00:07:32,319 --> 00:07:36,240
you're not interested

00:07:33,840 --> 00:07:37,360
but usually it fetches them all

00:07:36,240 --> 00:07:39,680
concurrently so

00:07:37,360 --> 00:07:41,039
it's not really a problem also by

00:07:39,680 --> 00:07:45,120
default it fetches

00:07:41,039 --> 00:07:47,520
from all the regions but for specific

00:07:45,120 --> 00:07:48,479
uh for this specific example i'll just

00:07:47,520 --> 00:07:53,599
use uses

00:07:48,479 --> 00:07:56,400
one also another very common use case in

00:07:53,599 --> 00:07:58,240
cloud providers that you have one role

00:07:56,400 --> 00:08:01,599
that can assume

00:07:58,240 --> 00:08:03,440
roll to multiple other accounts and then

00:08:01,599 --> 00:08:06,879
you can fetch the data

00:08:03,440 --> 00:08:11,120
from multiple accounts with uh one

00:08:06,879 --> 00:08:12,879
ton one credential so

00:08:11,120 --> 00:08:14,639
in this specific case we'll just use the

00:08:12,879 --> 00:08:15,840
default account but you can specify

00:08:14,639 --> 00:08:18,479
multiple accounts in

00:08:15,840 --> 00:08:18,479
this section

00:08:21,280 --> 00:08:26,400
so now uh toronto query we also need a

00:08:24,560 --> 00:08:26,960
password database where it will store

00:08:26,400 --> 00:08:29,680
the

00:08:26,960 --> 00:08:30,800
data so you can either specify an

00:08:29,680 --> 00:08:33,279
existing database

00:08:30,800 --> 00:08:35,200
or if you're running locally you can run

00:08:33,279 --> 00:08:39,120
passwords database with docker

00:08:35,200 --> 00:08:42,399
pretty easily so now let's

00:08:39,120 --> 00:08:42,399
run cloud prefetch

00:08:44,640 --> 00:08:48,320
which will print some login to the

00:08:46,160 --> 00:08:50,240
screen and it will take a few seconds

00:08:48,320 --> 00:08:55,839
essentially creating the table and then

00:08:50,240 --> 00:08:55,839
fetching the information

00:08:59,920 --> 00:09:03,200
so once we once will finish we'll shell

00:09:02,640 --> 00:09:07,200
in

00:09:03,200 --> 00:09:10,160
into the postgres um docker to see

00:09:07,200 --> 00:09:11,440
how the tables looks like and what we

00:09:10,160 --> 00:09:15,839
can find

00:09:11,440 --> 00:09:15,839
so doctor exact

00:09:18,240 --> 00:09:23,839
and then we can use the p sql shell

00:09:24,480 --> 00:09:28,240
you can see all the tables that were

00:09:26,000 --> 00:09:31,680
created with slash dt

00:09:28,240 --> 00:09:33,440
plus and actually

00:09:31,680 --> 00:09:36,160
a better way in my opinion to see all

00:09:33,440 --> 00:09:36,959
the tables that are available in this

00:09:36,160 --> 00:09:41,360
provider

00:09:36,959 --> 00:09:43,760
you can use uh schema.cloudqriy.io

00:09:41,360 --> 00:09:44,959
if you're familiar with schema spy it's

00:09:43,760 --> 00:09:48,320
pretty convenient tool

00:09:44,959 --> 00:09:50,480
to kind of browse tables that are made

00:09:48,320 --> 00:09:53,360
available in a postgres database so you

00:09:50,480 --> 00:09:56,480
can search for gcp related tables

00:09:53,360 --> 00:09:57,680
aws related tables and for each table

00:09:56,480 --> 00:10:01,040
you can see

00:09:57,680 --> 00:10:01,839
the available fields um available

00:10:01,040 --> 00:10:06,399
relations

00:10:01,839 --> 00:10:06,399
and browse into them as well

00:10:06,880 --> 00:10:12,320
so now let's see what fields we have at

00:10:09,200 --> 00:10:15,360
awss three buckets table

00:10:12,320 --> 00:10:18,160
and create a query

00:10:15,360 --> 00:10:19,920
for example we want to get all the

00:10:18,160 --> 00:10:22,959
buckets

00:10:19,920 --> 00:10:26,000
and account id region name from

00:10:22,959 --> 00:10:27,519
aws ss3 buckets table

00:10:26,000 --> 00:10:29,680
now we can see all the buckets that we

00:10:27,519 --> 00:10:32,880
have in our test account

00:10:29,680 --> 00:10:34,160
so here you can create new queries you

00:10:32,880 --> 00:10:35,839
can investigate

00:10:34,160 --> 00:10:38,160
you can use actually any shell that you

00:10:35,839 --> 00:10:39,200
like not just the piece pause crispy sql

00:10:38,160 --> 00:10:41,360
shell

00:10:39,200 --> 00:10:43,839
uh but usually once you create those

00:10:41,360 --> 00:10:46,079
queries some of them can be more complex

00:10:43,839 --> 00:10:47,200
than just one one liners and can be

00:10:46,079 --> 00:10:49,519
joined between

00:10:47,200 --> 00:10:51,040
multiple tables in the same provider

00:10:49,519 --> 00:10:53,839
between multiple tables

00:10:51,040 --> 00:10:54,959
across providers you can create a query

00:10:53,839 --> 00:10:59,519
uh for example

00:10:54,959 --> 00:11:02,079
across gcp and and aws

00:10:59,519 --> 00:11:03,440
but once you create those queries or

00:11:02,079 --> 00:11:06,800
those rules

00:11:03,440 --> 00:11:09,920
uh you usually would want them to run in

00:11:06,800 --> 00:11:13,760
uh in a ci or in some way

00:11:09,920 --> 00:11:15,440
periodically or manually uh together so

00:11:13,760 --> 00:11:18,079
for this we created something that we

00:11:15,440 --> 00:11:19,839
call cloud query policy pack

00:11:18,079 --> 00:11:21,440
a policy pack essentially is just the

00:11:19,839 --> 00:11:25,120
yaml file with

00:11:21,440 --> 00:11:27,920
two sections views and queries views

00:11:25,120 --> 00:11:28,640
is just as named it creates a view that

00:11:27,920 --> 00:11:31,839
you can

00:11:28,640 --> 00:11:33,519
reuse later at the query section so you

00:11:31,839 --> 00:11:36,160
don't really need to write this

00:11:33,519 --> 00:11:37,920
huge uh create view statements at each

00:11:36,160 --> 00:11:40,160
query

00:11:37,920 --> 00:11:41,200
and queries also something that we call

00:11:40,160 --> 00:11:44,240
checks

00:11:41,200 --> 00:11:47,360
is just a name and then

00:11:44,240 --> 00:11:50,959
the sql query so

00:11:47,360 --> 00:11:53,279
if the sql query returns a result then

00:11:50,959 --> 00:11:54,399
the check fails and you can also invert

00:11:53,279 --> 00:11:57,839
this behavior

00:11:54,399 --> 00:11:59,760
so you can do invert false and then

00:11:57,839 --> 00:12:02,399
if it doesn't regenerate the result the

00:11:59,760 --> 00:12:04,399
check will fail

00:12:02,399 --> 00:12:05,440
so in this particular case we actually

00:12:04,399 --> 00:12:08,639
implemented the

00:12:05,440 --> 00:12:09,839
aws cis benchmark if you are familiar

00:12:08,639 --> 00:12:13,120
with it

00:12:09,839 --> 00:12:15,279
aws cis benchmark is

00:12:13,120 --> 00:12:16,240
kind of a benchmark of best practices

00:12:15,279 --> 00:12:18,480
for aws

00:12:16,240 --> 00:12:20,480
they have the same thing for gcp for

00:12:18,480 --> 00:12:21,920
ager for kubernetes and a bunch of other

00:12:20,480 --> 00:12:24,800
stuff

00:12:21,920 --> 00:12:25,440
usually it's a very long pdf with either

00:12:24,800 --> 00:12:28,240
manual

00:12:25,440 --> 00:12:29,680
steps or some shell scripts that you

00:12:28,240 --> 00:12:32,240
need to run for

00:12:29,680 --> 00:12:34,480
each and every account of yours so what

00:12:32,240 --> 00:12:36,800
we did we just translated it into

00:12:34,480 --> 00:12:38,079
cloud query policy pack that you can run

00:12:36,800 --> 00:12:40,240
with cloudbury

00:12:38,079 --> 00:12:42,560
uh query command and i'll show you in a

00:12:40,240 --> 00:12:42,560
second

00:12:42,800 --> 00:12:46,000
how to do that so let's go back to our

00:12:45,040 --> 00:12:48,720
demo

00:12:46,000 --> 00:12:50,079
uh cloud query command gets the same

00:12:48,720 --> 00:12:52,639
minus minus d7

00:12:50,079 --> 00:12:54,560
parameter for the postgres and also

00:12:52,639 --> 00:12:57,839
minus minus pass for the

00:12:54,560 --> 00:12:59,839
uh free policy pack uh

00:12:57,839 --> 00:13:01,440
specifically this policy pack is

00:12:59,839 --> 00:13:03,360
available at our github

00:13:01,440 --> 00:13:05,519
so you can take it you can customize it

00:13:03,360 --> 00:13:06,399
to your need you can create new policy

00:13:05,519 --> 00:13:09,120
packs

00:13:06,399 --> 00:13:11,040
um you're you're free to share it to

00:13:09,120 --> 00:13:11,680
open the pr and add this policy back to

00:13:11,040 --> 00:13:15,279
our

00:13:11,680 --> 00:13:17,040
github as well so this is a very cheap

00:13:15,279 --> 00:13:18,560
command actually because it just queries

00:13:17,040 --> 00:13:21,760
the postgres

00:13:18,560 --> 00:13:24,639
and it doesn't go and make any api uh

00:13:21,760 --> 00:13:25,680
requests to the network so you can see

00:13:24,639 --> 00:13:28,800
that we have some

00:13:25,680 --> 00:13:30,000
in configured security groups we have

00:13:28,800 --> 00:13:32,639
some checks that

00:13:30,000 --> 00:13:34,079
pass some checks that failed uh we can

00:13:32,639 --> 00:13:38,720
see that we have some

00:13:34,079 --> 00:13:42,399
um incorrectly configured vpcs

00:13:38,720 --> 00:13:45,519
so this is how um an output looks like

00:13:42,399 --> 00:13:48,959
you can also put it into json uh

00:13:45,519 --> 00:13:51,360
and then kind of create alerts um

00:13:48,959 --> 00:13:55,360
or you know monitor the output in the ci

00:13:51,360 --> 00:14:00,880
so you know when something fails or not

00:13:55,360 --> 00:14:00,880
so let's go back to the presentation

00:14:01,360 --> 00:14:04,160
so what you get

00:14:04,720 --> 00:14:08,560
you get the most powerful query language

00:14:06,560 --> 00:14:10,000
to query your blog infrastructure

00:14:08,560 --> 00:14:12,000
across clouds and across sas

00:14:10,000 --> 00:14:14,000
applications you get

00:14:12,000 --> 00:14:15,040
open source transparent extensible

00:14:14,000 --> 00:14:17,680
framework

00:14:15,040 --> 00:14:19,600
you get awesome dev community support

00:14:17,680 --> 00:14:21,519
you can write policies with sql you can

00:14:19,600 --> 00:14:24,800
commit them to your repository

00:14:21,519 --> 00:14:28,240
run it in the ci you can use

00:14:24,800 --> 00:14:29,519
reuse the sql ecosystem to visualize

00:14:28,240 --> 00:14:31,680
your infrastructure

00:14:29,519 --> 00:14:33,680
whatever you're using metabase quicksite

00:14:31,680 --> 00:14:35,519
tableau etc

00:14:33,680 --> 00:14:37,360
um you don't need to maintain custom

00:14:35,519 --> 00:14:39,279
scripts

00:14:37,360 --> 00:14:41,440
and you don't need to write code to run

00:14:39,279 --> 00:14:43,920
your security checks

00:14:41,440 --> 00:14:46,320
keep up with the sdks that change pretty

00:14:43,920 --> 00:14:46,320
often

00:14:46,560 --> 00:14:50,079
and a bit about what next before we

00:14:49,040 --> 00:14:53,199
finish

00:14:50,079 --> 00:14:54,880
uh you get support for more resources

00:14:53,199 --> 00:14:57,120
uh and more providers that we are

00:14:54,880 --> 00:14:59,839
currently working on

00:14:57,120 --> 00:15:01,760
we are working on uh more out-of-the-box

00:14:59,839 --> 00:15:03,680
uh policy packs and security and

00:15:01,760 --> 00:15:06,560
compliance best practices that you can

00:15:03,680 --> 00:15:06,959
either use it as is or adopted to your

00:15:06,560 --> 00:15:10,560
um

00:15:06,959 --> 00:15:12,160
use cases uh also we are using uh

00:15:10,560 --> 00:15:14,639
we're working on a self-serve sus

00:15:12,160 --> 00:15:16,480
version so stay tuned if you don't want

00:15:14,639 --> 00:15:18,560
to deploy it yourself

00:15:16,480 --> 00:15:19,920
uh and also we have a bunch of more

00:15:18,560 --> 00:15:23,760
things on the roadmap so

00:15:19,920 --> 00:15:25,279
uh stay tuned and last thing but of list

00:15:23,760 --> 00:15:33,360
we are hiring so

00:15:25,279 --> 00:15:33,360

YouTube URL: https://www.youtube.com/watch?v=AizWSieYRGk


