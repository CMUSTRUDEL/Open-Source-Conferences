Title: Testing in Production - Talia Nassi | JSHeroes Meetups
Publication date: 2020-06-11
Playlist: JSHeroes Meetups 2020
Description: 
	How do you know your feature is working perfectly in production?
If something breaks in production, how will you know?
Will you wait for a user to report it to you?
What do you do when your staging test results do not reflect current production behavior?

In order to test proactively as opposed to reactively, try testing in production! You will have an increased accuracy of test results, your tests will run faster due to elimination of bad data, and you will have higher confidence before releases. This can be accomplished through feature flagging, canary releases, setting up a proper CI/CD pipeline, and data cleanup.

You will leave this talk with strategies to mitigate risk, to better your understanding of the steps to get there, and to shift your companyâ€™s testing culture, so you can provide the best possible experience to your users. At the end of the day, we don't care if your features work in staging, we care if they work in production.

About Talia

Talia Nassi is an international keynote speaker who delivers content on all things testing and quality. She is a developer advocate at http://Split.io where she works closely with engineering teams globally to ship software more efficiently. She is passionate about feature flagging, canary launches, CI/CD, testing in production, and A/B testing. She has spoken at countless conferences internationally, ranging from audiences of 100 to 2000!
Twitter: talia_nassi
Captions: 
	00:00:05,359 --> 00:00:09,280
i saw her live in

00:00:06,720 --> 00:00:10,240
one of the conferences and i was really

00:00:09,280 --> 00:00:14,400
amazed by her

00:00:10,240 --> 00:00:16,960
her talk and uh i'm really happy that

00:00:14,400 --> 00:00:17,440
she's here to share with us her wisdom

00:00:16,960 --> 00:00:21,520
about

00:00:17,440 --> 00:00:25,119
testing in production thank you

00:00:21,520 --> 00:00:27,519
i'm happy to be here um okay so

00:00:25,119 --> 00:00:28,720
i want to start off by telling you guys

00:00:27,519 --> 00:00:30,720
a story

00:00:28,720 --> 00:00:32,079
about something that happened to me a

00:00:30,720 --> 00:00:35,200
few years ago

00:00:32,079 --> 00:00:37,040
um i was interviewing at this

00:00:35,200 --> 00:00:38,399
test engineering position for this

00:00:37,040 --> 00:00:41,120
company and i was

00:00:38,399 --> 00:00:42,079
really really nervous and i walked into

00:00:41,120 --> 00:00:43,600
this interview

00:00:42,079 --> 00:00:45,200
and i'm answering all the questions

00:00:43,600 --> 00:00:46,000
correctly and everything's going really

00:00:45,200 --> 00:00:50,000
great

00:00:46,000 --> 00:00:52,320
and then at the end of the interview

00:00:50,000 --> 00:00:54,160
the interviewer asked me if i had like

00:00:52,320 --> 00:00:56,320
any questions for him

00:00:54,160 --> 00:00:58,640
so i asked him about their staging

00:00:56,320 --> 00:01:01,359
environment and how their releases work

00:00:58,640 --> 00:01:03,039
and how does it work with the different

00:01:01,359 --> 00:01:05,119
testing environments and

00:01:03,039 --> 00:01:07,520
he stopped me and he said they don't

00:01:05,119 --> 00:01:09,119
have a staging environment they test in

00:01:07,520 --> 00:01:11,680
production

00:01:09,119 --> 00:01:13,200
and i was so shocked i thought this was

00:01:11,680 --> 00:01:15,439
like a trick in the interview like what

00:01:13,200 --> 00:01:18,240
do you mean you test in production

00:01:15,439 --> 00:01:19,520
um he could see that i was really

00:01:18,240 --> 00:01:21,520
confused

00:01:19,520 --> 00:01:24,159
so he asked me to do something that i

00:01:21,520 --> 00:01:26,400
want all of you to do right now

00:01:24,159 --> 00:01:30,479
so i want everyone to think about the

00:01:26,400 --> 00:01:31,920
last feature that your team deployed

00:01:30,479 --> 00:01:33,840
okay so you're thinking about this

00:01:31,920 --> 00:01:34,720
feature you have it in your head i can't

00:01:33,840 --> 00:01:36,320
see any of you

00:01:34,720 --> 00:01:38,159
because none of you turned on your

00:01:36,320 --> 00:01:39,680
cameras but um

00:01:38,159 --> 00:01:43,360
i'm assuming you're all thinking about

00:01:39,680 --> 00:01:43,360
this okay

00:01:43,600 --> 00:01:48,159
is it working is this feature working

00:01:48,560 --> 00:01:51,200
right now

00:01:52,720 --> 00:01:55,840
in production

00:01:56,159 --> 00:02:01,040
how do you know your users haven't

00:01:59,040 --> 00:02:03,360
reported anything to you

00:02:01,040 --> 00:02:04,799
your alarms haven't gone off so you

00:02:03,360 --> 00:02:09,039
assume that it's working

00:02:04,799 --> 00:02:11,280
right but you don't know

00:02:09,039 --> 00:02:13,200
testing in production is the only way to

00:02:11,280 --> 00:02:17,200
know that your features are working

00:02:13,200 --> 00:02:19,599
in production right now

00:02:17,200 --> 00:02:21,040
so testing and production means testing

00:02:19,599 --> 00:02:22,800
your features in the environment that

00:02:21,040 --> 00:02:25,440
your features will live in

00:02:22,800 --> 00:02:26,720
um not using a dummy environment like

00:02:25,440 --> 00:02:29,680
staging or qa

00:02:26,720 --> 00:02:30,400
or something like that and what is it

00:02:29,680 --> 00:02:32,560
not

00:02:30,400 --> 00:02:36,080
it's not a replacement for all testing

00:02:32,560 --> 00:02:39,760
and it's not the end of the world

00:02:36,080 --> 00:02:43,519
so i'm talia i'm a dev advocate at split

00:02:39,760 --> 00:02:47,760
and um this is my twitter

00:02:43,519 --> 00:02:50,879
i'm you guys can follow me if you want

00:02:47,760 --> 00:02:52,239
my passions include chipotle i don't i

00:02:50,879 --> 00:02:53,040
actually don't know if you guys have

00:02:52,239 --> 00:02:56,400
chipotle

00:02:53,040 --> 00:02:59,120
in romania but it's like a fast food

00:02:56,400 --> 00:03:00,319
like mexican food type place and it's

00:02:59,120 --> 00:03:04,000
amazing

00:03:00,319 --> 00:03:06,879
um so my passions include chipotle and

00:03:04,000 --> 00:03:07,440
breaking my features prior to launch and

00:03:06,879 --> 00:03:09,200
of course

00:03:07,440 --> 00:03:11,280
testing my co-workers that's what every

00:03:09,200 --> 00:03:13,519
good test engineer does

00:03:11,280 --> 00:03:15,360
but what do i mean by testing my

00:03:13,519 --> 00:03:17,920
co-workers

00:03:15,360 --> 00:03:18,640
i test their reactions to things that i

00:03:17,920 --> 00:03:22,239
think are

00:03:18,640 --> 00:03:23,680
pretty funny um i'm also a warriors fan

00:03:22,239 --> 00:03:27,280
so this one was

00:03:23,680 --> 00:03:29,760
particularly fun

00:03:27,280 --> 00:03:31,519
okay so after the interview i went home

00:03:29,760 --> 00:03:33,280
and i did my homework so why have i

00:03:31,519 --> 00:03:35,040
never heard about testing in production

00:03:33,280 --> 00:03:37,360
and if it's so great why aren't more

00:03:35,040 --> 00:03:39,200
companies using it

00:03:37,360 --> 00:03:41,519
most companies and all the companies

00:03:39,200 --> 00:03:43,120
that i had worked for previously use

00:03:41,519 --> 00:03:45,120
a test environment or a staging

00:03:43,120 --> 00:03:46,959
environment

00:03:45,120 --> 00:03:48,319
and i would ask for a show of hands but

00:03:46,959 --> 00:03:50,400
i'm assuming that

00:03:48,319 --> 00:03:52,239
most of you guys use a test environment

00:03:50,400 --> 00:03:53,760
or a staging environment and

00:03:52,239 --> 00:03:55,840
i don't even have to ask you like i

00:03:53,760 --> 00:03:59,599
already know that that environment

00:03:55,840 --> 00:04:01,599
is not an exact replica of production

00:03:59,599 --> 00:04:04,000
so testing environments really are not

00:04:01,599 --> 00:04:04,799
the way to go here and let's talk about

00:04:04,000 --> 00:04:07,280
why

00:04:04,799 --> 00:04:08,879
so through my experience and my research

00:04:07,280 --> 00:04:11,040
this is what i've learned

00:04:08,879 --> 00:04:12,720
staging environments are expensive to

00:04:11,040 --> 00:04:14,959
maintain so

00:04:12,720 --> 00:04:17,680
if you just take into account like a

00:04:14,959 --> 00:04:20,479
basic website architecture of

00:04:17,680 --> 00:04:22,400
web servers in front of a number of

00:04:20,479 --> 00:04:25,040
application servers that

00:04:22,400 --> 00:04:26,880
query a database and then throw in like

00:04:25,040 --> 00:04:28,479
a memory based cache

00:04:26,880 --> 00:04:30,560
you're looking at over a hundred

00:04:28,479 --> 00:04:32,720
thousand dollars per year and that's not

00:04:30,560 --> 00:04:33,600
taking into account the cost of software

00:04:32,720 --> 00:04:36,720
licenses

00:04:33,600 --> 00:04:38,720
support infrastructure costs so

00:04:36,720 --> 00:04:40,240
each standing environment per year is

00:04:38,720 --> 00:04:42,320
going to run you

00:04:40,240 --> 00:04:43,840
about a hundred thousand dollars and i

00:04:42,320 --> 00:04:45,280
was talking to this company the other

00:04:43,840 --> 00:04:48,080
day and they said that they had

00:04:45,280 --> 00:04:48,720
eight staging environments before they

00:04:48,080 --> 00:04:50,560
um

00:04:48,720 --> 00:04:52,080
released their code to production like

00:04:50,560 --> 00:04:53,040
they're spending almost a million

00:04:52,080 --> 00:04:57,440
dollars a year

00:04:53,040 --> 00:05:00,479
on staging environments it was crazy

00:04:57,440 --> 00:05:02,080
so staging test results do not always

00:05:00,479 --> 00:05:04,080
match production test results which i'm

00:05:02,080 --> 00:05:05,120
sure as developers like we experience

00:05:04,080 --> 00:05:08,240
this all the time

00:05:05,120 --> 00:05:10,880
so imagine like you're testing a feature

00:05:08,240 --> 00:05:11,840
and staging and you worked so hard on it

00:05:10,880 --> 00:05:13,280
and you went through

00:05:11,840 --> 00:05:15,039
all the requirements you went through

00:05:13,280 --> 00:05:16,000
all the documentation with your product

00:05:15,039 --> 00:05:19,199
owner

00:05:16,000 --> 00:05:21,120
and you fixed all the bugs and then

00:05:19,199 --> 00:05:23,919
your end-to-end tests are passing in

00:05:21,120 --> 00:05:26,240
staging and you sign off on the feature

00:05:23,919 --> 00:05:30,000
and then you launch it to production

00:05:26,240 --> 00:05:31,840
and what happens there's a bug

00:05:30,000 --> 00:05:34,240
so these environments are different

00:05:31,840 --> 00:05:36,160
plain and simple

00:05:34,240 --> 00:05:38,080
production includes data that staging

00:05:36,160 --> 00:05:40,160
doesn't have and so you're never going

00:05:38,080 --> 00:05:41,520
to know the differences between staging

00:05:40,160 --> 00:05:44,880
and production

00:05:41,520 --> 00:05:44,880
until you test in production

00:05:46,080 --> 00:05:51,520
okay so picture this you are

00:05:49,440 --> 00:05:52,560
testing a high priority fix for a

00:05:51,520 --> 00:05:55,440
feature and you

00:05:52,560 --> 00:05:58,560
log into staging to test it but staging

00:05:55,440 --> 00:06:01,600
is down you get the 404 screen of death

00:05:58,560 --> 00:06:03,759
so you ping the devops guy but he's not

00:06:01,600 --> 00:06:06,240
answering so you ping someone else and

00:06:03,759 --> 00:06:08,000
they tell you to open an it ticket

00:06:06,240 --> 00:06:09,440
and then you have to get your manager to

00:06:08,000 --> 00:06:10,960
escalate it and

00:06:09,440 --> 00:06:12,560
meanwhile you're testing this high

00:06:10,960 --> 00:06:14,880
priority ticket and

00:06:12,560 --> 00:06:16,880
no one seems to care so no one's going

00:06:14,880 --> 00:06:19,039
to get get a call on the middle of

00:06:16,880 --> 00:06:22,240
thanksgiving dinner if staging is broken

00:06:19,039 --> 00:06:22,240
really no one cares

00:06:22,639 --> 00:06:26,400
okay so the load in staging does not

00:06:24,960 --> 00:06:28,000
match production so

00:06:26,400 --> 00:06:30,080
when you think of the number of people

00:06:28,000 --> 00:06:31,440
who use your staging environment versus

00:06:30,080 --> 00:06:33,520
your production environment

00:06:31,440 --> 00:06:34,639
the difference is a lot and because the

00:06:33,520 --> 00:06:37,120
load is different

00:06:34,639 --> 00:06:40,000
the accuracy of speed and lag times is

00:06:37,120 --> 00:06:42,160
not going to be correct

00:06:40,000 --> 00:06:44,160
and at the end of the day i've never

00:06:42,160 --> 00:06:48,479
heard anyone speak highly of their

00:06:44,160 --> 00:06:50,880
staging environment

00:06:48,479 --> 00:06:52,639
okay but i know what you're thinking i

00:06:50,880 --> 00:06:55,120
know that testing in production

00:06:52,639 --> 00:06:55,680
is like this huge risky thing that you

00:06:55,120 --> 00:06:59,199
know

00:06:55,680 --> 00:07:00,160
what could go wrong but what's the first

00:06:59,199 --> 00:07:02,080
thing you do

00:07:00,160 --> 00:07:03,759
right after you deploy a feature to

00:07:02,080 --> 00:07:05,840
production

00:07:03,759 --> 00:07:08,080
you go to production and you test it

00:07:05,840 --> 00:07:08,080
right

00:07:11,599 --> 00:07:15,840
okay so some more things i learned when

00:07:13,919 --> 00:07:17,680
i was studying about this is that

00:07:15,840 --> 00:07:21,440
testing and production works when

00:07:17,680 --> 00:07:25,120
when the whole team owns product quality

00:07:21,440 --> 00:07:27,919
so contrary to popular belief

00:07:25,120 --> 00:07:30,240
it's not just the test engineers job or

00:07:27,919 --> 00:07:32,720
the qa engineer's job or

00:07:30,240 --> 00:07:34,240
um the product person's job or just the

00:07:32,720 --> 00:07:36,720
developer's job

00:07:34,240 --> 00:07:38,400
to ensure product quality this is a team

00:07:36,720 --> 00:07:39,840
effort and especially when

00:07:38,400 --> 00:07:41,599
you're doing something sensitive like

00:07:39,840 --> 00:07:44,960
testing and production it's

00:07:41,599 --> 00:07:46,720
really just an a team effort um testing

00:07:44,960 --> 00:07:49,360
and production only works when you test

00:07:46,720 --> 00:07:51,120
early and often because the earlier you

00:07:49,360 --> 00:07:52,960
start testing the earlier you'll find

00:07:51,120 --> 00:07:55,840
bugs and defects which means the earlier

00:07:52,960 --> 00:07:58,000
you'll be delivering value to your users

00:07:55,840 --> 00:07:59,199
and testing and production only works

00:07:58,000 --> 00:08:02,639
when you trust your

00:07:59,199 --> 00:08:05,599
team and your product

00:08:02,639 --> 00:08:07,199
so think about this companies don't oh

00:08:05,599 --> 00:08:08,380
there's a siren i'm just gonna

00:08:07,199 --> 00:08:11,520
pause for one second

00:08:08,380 --> 00:08:13,120
[Music]

00:08:11,520 --> 00:08:14,800
it's kind of crazy in l.a right now i

00:08:13,120 --> 00:08:18,160
don't know if you guys know

00:08:14,800 --> 00:08:21,440
um okay i think it's gone okay

00:08:18,160 --> 00:08:22,479
so companies don't test in production

00:08:21,440 --> 00:08:24,720
because of this

00:08:22,479 --> 00:08:25,599
fear and this lack of trust in their

00:08:24,720 --> 00:08:28,160
systems

00:08:25,599 --> 00:08:29,440
and for the same reason they refuse to

00:08:28,160 --> 00:08:32,000
engage

00:08:29,440 --> 00:08:35,440
in the tools and process changes that

00:08:32,000 --> 00:08:35,440
are going to generate that trust

00:08:36,159 --> 00:08:40,080
so i know that it's risky i know that

00:08:38,399 --> 00:08:42,880
testing and production can

00:08:40,080 --> 00:08:43,599
affect real end users it can affect

00:08:42,880 --> 00:08:46,160
reporting

00:08:43,599 --> 00:08:47,680
and business decisions it can affect

00:08:46,160 --> 00:08:50,240
third parties

00:08:47,680 --> 00:08:51,040
that your software is integrated with i

00:08:50,240 --> 00:08:53,760
know that it's

00:08:51,040 --> 00:08:55,200
super risky but i'm going to show you a

00:08:53,760 --> 00:08:56,880
step-by-step process

00:08:55,200 --> 00:08:59,200
and we're going to address all of these

00:08:56,880 --> 00:09:00,880
risks together

00:08:59,200 --> 00:09:03,040
so the first step when you're testing in

00:09:00,880 --> 00:09:03,519
production is to install the necessary

00:09:03,040 --> 00:09:05,279
tools

00:09:03,519 --> 00:09:06,720
and the first tool that you need that's

00:09:05,279 --> 00:09:09,519
really the key

00:09:06,720 --> 00:09:10,800
is feature flagging and feature flagging

00:09:09,519 --> 00:09:14,240
is a way to decide

00:09:10,800 --> 00:09:17,200
who sees which features um it's used

00:09:14,240 --> 00:09:18,080
to hide enable or disable features at

00:09:17,200 --> 00:09:20,160
runtime and

00:09:18,080 --> 00:09:21,519
it's basically in your code and if else

00:09:20,160 --> 00:09:24,720
statement which i'll show you

00:09:21,519 --> 00:09:25,440
in a little bit so here's what it looks

00:09:24,720 --> 00:09:29,920
like in

00:09:25,440 --> 00:09:32,000
my head so our developers would create a

00:09:29,920 --> 00:09:33,279
feature flag from the ui which again

00:09:32,000 --> 00:09:35,440
i'll show you in a minute

00:09:33,279 --> 00:09:36,560
and then they target all of our internal

00:09:35,440 --> 00:09:39,680
teammates so

00:09:36,560 --> 00:09:40,959
dev qa products design all of our

00:09:39,680 --> 00:09:43,040
automation bots

00:09:40,959 --> 00:09:44,880
so anything related to the feature can

00:09:43,040 --> 00:09:47,120
only be seen by the users

00:09:44,880 --> 00:09:49,040
inside of the feature flag because the

00:09:47,120 --> 00:09:51,200
default is off right now

00:09:49,040 --> 00:09:53,360
so the people on the right these end

00:09:51,200 --> 00:09:55,600
users are real users they don't see

00:09:53,360 --> 00:09:59,120
anything related to the feature

00:09:55,600 --> 00:10:01,440
so if there's a new bug if there's

00:09:59,120 --> 00:10:03,600
a bug in your new feature it has no

00:10:01,440 --> 00:10:04,000
impact on your end users because they

00:10:03,600 --> 00:10:06,480
don't have

00:10:04,000 --> 00:10:08,160
access to it they don't have the right

00:10:06,480 --> 00:10:09,760
permissions to see

00:10:08,160 --> 00:10:12,640
anything related to the feature and that

00:10:09,760 --> 00:10:12,640
includes bugs

00:10:12,959 --> 00:10:16,800
so while the feature flag is off you go

00:10:15,279 --> 00:10:18,880
in and you test everything

00:10:16,800 --> 00:10:20,800
so you're testing to make sure that all

00:10:18,880 --> 00:10:22,240
the proper functionality works you're

00:10:20,800 --> 00:10:23,920
fixing all the bugs

00:10:22,240 --> 00:10:27,200
you're making sure that this feature

00:10:23,920 --> 00:10:27,200
works in production

00:10:27,519 --> 00:10:30,720
so once you know that your feature is

00:10:30,079 --> 00:10:33,519
working

00:10:30,720 --> 00:10:34,720
you turn on the flag already knowing a

00:10:33,519 --> 00:10:36,320
hundred percent

00:10:34,720 --> 00:10:38,160
that your features are working in

00:10:36,320 --> 00:10:39,519
production and you didn't break anything

00:10:38,160 --> 00:10:41,680
that was existing

00:10:39,519 --> 00:10:43,839
and now when you turn the feature flag

00:10:41,680 --> 00:10:46,000
on everyone sees the new feature

00:10:43,839 --> 00:10:47,279
and now your users are happy and they're

00:10:46,000 --> 00:10:48,880
dancing because

00:10:47,279 --> 00:10:51,279
they have a perfect feature and they

00:10:48,880 --> 00:10:54,480
don't have um bugs to report

00:10:51,279 --> 00:10:56,079
so yeah

00:10:54,480 --> 00:10:58,160
and then basically you repeat this

00:10:56,079 --> 00:11:02,160
process with every new feature so each

00:10:58,160 --> 00:11:02,160
feature has its own feature flag

00:11:03,519 --> 00:11:08,079
so it can be overwhelming when you have

00:11:06,079 --> 00:11:09,680
a lot of flags and you don't know which

00:11:08,079 --> 00:11:11,839
combinations to test

00:11:09,680 --> 00:11:13,920
so the best thing to do is to talk to

00:11:11,839 --> 00:11:15,200
your product owner to prioritize what

00:11:13,920 --> 00:11:17,200
these flows are

00:11:15,200 --> 00:11:19,040
and then together with your data analyst

00:11:17,200 --> 00:11:22,399
you can choose what the most important

00:11:19,040 --> 00:11:24,720
flows are that need to be automated so

00:11:22,399 --> 00:11:26,399
basically you get the most important

00:11:24,720 --> 00:11:28,079
business flows from your product donor

00:11:26,399 --> 00:11:30,560
and then you get the flows that are

00:11:28,079 --> 00:11:32,240
that you that your users are are doing

00:11:30,560 --> 00:11:35,279
the most in production

00:11:32,240 --> 00:11:36,880
and from there you get that list

00:11:35,279 --> 00:11:38,800
and then again target your automation

00:11:36,880 --> 00:11:40,720
box inside the feature flags which i'll

00:11:38,800 --> 00:11:43,600
also show you

00:11:40,720 --> 00:11:44,880
so after you feel comfortable and you

00:11:43,600 --> 00:11:46,640
know that the release went out

00:11:44,880 --> 00:11:48,079
successfully it's a good idea to delete

00:11:46,640 --> 00:11:50,160
the feature flag

00:11:48,079 --> 00:11:52,000
um and then after you delete the flag in

00:11:50,160 --> 00:11:53,519
the ui you should delete it in the code

00:11:52,000 --> 00:11:56,240
also just because you don't want stale

00:11:53,519 --> 00:11:57,279
code um and then i also have a video

00:11:56,240 --> 00:11:59,440
that goes

00:11:57,279 --> 00:12:00,320
much more in depth on feature flag

00:11:59,440 --> 00:12:02,800
maintenance

00:12:00,320 --> 00:12:05,760
um that you can look up that goes really

00:12:02,800 --> 00:12:07,360
just a lot more into detail

00:12:05,760 --> 00:12:10,639
okay so i'm going to walk you through

00:12:07,360 --> 00:12:11,600
how to do what i just showed you in the

00:12:10,639 --> 00:12:14,399
ui

00:12:11,600 --> 00:12:15,440
so this is from the split ui so there's

00:12:14,399 --> 00:12:18,560
a button that says

00:12:15,440 --> 00:12:20,639
create split and that just means that

00:12:18,560 --> 00:12:22,800
you're creating a feature flag so

00:12:20,639 --> 00:12:24,000
in this context a split is a feature

00:12:22,800 --> 00:12:25,760
flag so

00:12:24,000 --> 00:12:28,000
the first thing you want to do is name

00:12:25,760 --> 00:12:28,320
your flag and this is the same name that

00:12:28,000 --> 00:12:31,600
you'll

00:12:28,320 --> 00:12:33,920
include in your code so

00:12:31,600 --> 00:12:36,160
the next thing after you decide a name

00:12:33,920 --> 00:12:38,480
is to define a traffic type and

00:12:36,160 --> 00:12:40,160
the traffic type differentiates the

00:12:38,480 --> 00:12:41,760
people who see your feature and the

00:12:40,160 --> 00:12:42,959
people who don't see your feature so

00:12:41,760 --> 00:12:44,959
this can be

00:12:42,959 --> 00:12:46,079
device if you only want people with

00:12:44,959 --> 00:12:49,279
android

00:12:46,079 --> 00:12:49,839
devices to see this feature or um if you

00:12:49,279 --> 00:12:52,959
only want

00:12:49,839 --> 00:12:54,000
ios devices to see this feature if you

00:12:52,959 --> 00:12:57,200
can also

00:12:54,000 --> 00:12:59,839
differentiate by employee or location

00:12:57,200 --> 00:13:01,760
if you only want people in romania to

00:12:59,839 --> 00:13:03,440
see this feature or whatever it is you

00:13:01,760 --> 00:13:04,959
can you can decide

00:13:03,440 --> 00:13:06,959
i'm going to do this by user because

00:13:04,959 --> 00:13:10,560
that's what makes testing and production

00:13:06,959 --> 00:13:13,440
possible for for me

00:13:10,560 --> 00:13:15,200
so after you create the flag you're

00:13:13,440 --> 00:13:16,800
going to set up your targeting rules and

00:13:15,200 --> 00:13:18,000
again this means who can see your

00:13:16,800 --> 00:13:20,800
feature

00:13:18,000 --> 00:13:21,360
so in my targeting rules i'm saying that

00:13:20,800 --> 00:13:23,600
me

00:13:21,360 --> 00:13:24,800
and my developers and my product person

00:13:23,600 --> 00:13:27,200
and my designers

00:13:24,800 --> 00:13:28,000
and my automation robot can see the

00:13:27,200 --> 00:13:30,079
feature

00:13:28,000 --> 00:13:31,360
and then the default rule so everyone

00:13:30,079 --> 00:13:34,720
who's not in this

00:13:31,360 --> 00:13:36,079
list um cannot see that feature so they

00:13:34,720 --> 00:13:37,839
cannot see

00:13:36,079 --> 00:13:39,839
anything related to the feature this

00:13:37,839 --> 00:13:41,680
includes bugs this includes data that

00:13:39,839 --> 00:13:44,800
the feature is linked with

00:13:41,680 --> 00:13:46,720
um and again notice that we do have this

00:13:44,800 --> 00:13:47,600
test user inside the feature flag and

00:13:46,720 --> 00:13:49,680
that's there for

00:13:47,600 --> 00:13:52,959
automation so that i can run automation

00:13:49,680 --> 00:13:56,720
scripts while the feature flag is off

00:13:52,959 --> 00:13:58,240
so my feature flag looks like this in my

00:13:56,720 --> 00:14:00,720
code it's going to say

00:13:58,240 --> 00:14:02,560
if the user is in this flag give them

00:14:00,720 --> 00:14:05,839
treatment on and if they're not give

00:14:02,560 --> 00:14:07,839
them the existing treatment

00:14:05,839 --> 00:14:09,839
so then in my automation script it looks

00:14:07,839 --> 00:14:12,079
something like this i'm gonna log in as

00:14:09,839 --> 00:14:14,240
that test user that was in

00:14:12,079 --> 00:14:16,160
the feature flag and i'm gonna perform

00:14:14,240 --> 00:14:18,320
the test do whatever i need to do

00:14:16,160 --> 00:14:20,399
and then expect that feature to work and

00:14:18,320 --> 00:14:22,639
i'm going to expect it to work because

00:14:20,399 --> 00:14:23,760
i have the right permissions as that

00:14:22,639 --> 00:14:28,560
test user

00:14:23,760 --> 00:14:32,320
to see what is linked to that feature

00:14:28,560 --> 00:14:34,320
and that's it so the cherry oops

00:14:32,320 --> 00:14:36,560
the cherry on top of the cake is that

00:14:34,320 --> 00:14:37,440
when when you turn on the feature in

00:14:36,560 --> 00:14:39,279
production you

00:14:37,440 --> 00:14:42,399
already know that the feature is working

00:14:39,279 --> 00:14:44,800
so there's no surprises

00:14:42,399 --> 00:14:46,720
okay so the next tool that you need is

00:14:44,800 --> 00:14:48,720
an automation framework

00:14:46,720 --> 00:14:51,040
and you need an automation framework

00:14:48,720 --> 00:14:52,560
because it's not scalable to test

00:14:51,040 --> 00:14:54,240
everything manually

00:14:52,560 --> 00:14:55,519
um especially when you're testing in

00:14:54,240 --> 00:14:56,320
production and again it's a really

00:14:55,519 --> 00:14:58,959
sensitive

00:14:56,320 --> 00:15:00,240
thing so um you want an automation

00:14:58,959 --> 00:15:03,440
framework that's

00:15:00,240 --> 00:15:05,279
easy to adopt so if it takes months of

00:15:03,440 --> 00:15:08,480
implementation and if it takes

00:15:05,279 --> 00:15:09,120
so long to set up and your developers

00:15:08,480 --> 00:15:11,120
are just

00:15:09,120 --> 00:15:12,639
fed up like that's not the right tool

00:15:11,120 --> 00:15:14,480
for you um

00:15:12,639 --> 00:15:16,240
you want one that's easy to debug so

00:15:14,480 --> 00:15:18,160
when something goes wrong

00:15:16,240 --> 00:15:19,920
do you know what's going on or does it

00:15:18,160 --> 00:15:23,519
take you hours to figure out

00:15:19,920 --> 00:15:24,959
what the problem is um you also want an

00:15:23,519 --> 00:15:25,680
automation framework that has good

00:15:24,959 --> 00:15:27,920
reporting

00:15:25,680 --> 00:15:29,759
so when a test passes do you know

00:15:27,920 --> 00:15:31,120
exactly what the functionality is that

00:15:29,759 --> 00:15:33,440
passed do you know

00:15:31,120 --> 00:15:35,600
how the test could be improved um the

00:15:33,440 --> 00:15:37,040
reporting is is super important

00:15:35,600 --> 00:15:38,480
and then you also want to get an

00:15:37,040 --> 00:15:40,079
automation framework that has a good

00:15:38,480 --> 00:15:41,680
support community so

00:15:40,079 --> 00:15:43,680
i can't tell you how many automation

00:15:41,680 --> 00:15:46,000
frameworks that i've used that

00:15:43,680 --> 00:15:46,959
don't have a good support community and

00:15:46,000 --> 00:15:49,680
i will have

00:15:46,959 --> 00:15:50,800
issues and i will open a ticket in

00:15:49,680 --> 00:15:52,639
github or

00:15:50,800 --> 00:15:54,560
stack overflow or whatever and like no

00:15:52,639 --> 00:15:55,120
one responds and no one knows the answer

00:15:54,560 --> 00:15:56,880
to

00:15:55,120 --> 00:15:58,959
my problems and it gets really

00:15:56,880 --> 00:16:01,279
frustrating so just make sure that

00:15:58,959 --> 00:16:03,120
there is a support community because if

00:16:01,279 --> 00:16:04,800
something goes wrong and need help

00:16:03,120 --> 00:16:09,040
it's really important that you are able

00:16:04,800 --> 00:16:10,639
to get that okay so the next thing you

00:16:09,040 --> 00:16:13,279
need is a job scheduler

00:16:10,639 --> 00:16:14,720
that will run your tests for you so this

00:16:13,279 --> 00:16:17,199
can be a simple cron

00:16:14,720 --> 00:16:23,680
job or through something like jenkins

00:16:17,199 --> 00:16:26,639
sorry one second

00:16:23,680 --> 00:16:27,120
don't worry as long as you're safe yeah

00:16:26,639 --> 00:16:30,720
yeah

00:16:27,120 --> 00:16:33,600
yeah thank you okay

00:16:30,720 --> 00:16:34,560
so this can be like a simple cron job or

00:16:33,600 --> 00:16:36,639
through something like

00:16:34,560 --> 00:16:38,240
jenkins i'll list out all the ones that

00:16:36,639 --> 00:16:40,959
i've used in a second

00:16:38,240 --> 00:16:42,800
um and then a question that i get a lot

00:16:40,959 --> 00:16:44,880
of the time is why not just run the

00:16:42,800 --> 00:16:46,320
tests in a loop like

00:16:44,880 --> 00:16:47,680
testing in production is really

00:16:46,320 --> 00:16:49,680
sensitive and if you're going to do it

00:16:47,680 --> 00:16:52,320
you should just do it continuously

00:16:49,680 --> 00:16:53,600
so first of all it's overkill you can

00:16:52,320 --> 00:16:55,759
set up the test to run

00:16:53,600 --> 00:16:56,639
in the build pipeline or incrementally

00:16:55,759 --> 00:16:58,880
like i said

00:16:56,639 --> 00:17:00,399
to run them in a loop is just overkill

00:16:58,880 --> 00:17:02,320
and then you also just want to trust

00:17:00,399 --> 00:17:03,839
your test so something that i like to do

00:17:02,320 --> 00:17:06,480
is run the tests

00:17:03,839 --> 00:17:07,199
20 30 times in production and watch them

00:17:06,480 --> 00:17:08,959
pass

00:17:07,199 --> 00:17:10,319
and that that builds my confidence so

00:17:08,959 --> 00:17:10,799
that when i push them up and they're

00:17:10,319 --> 00:17:13,199
running

00:17:10,799 --> 00:17:16,240
i know what exactly the test is doing

00:17:13,199 --> 00:17:18,559
because i've seen them run

00:17:16,240 --> 00:17:19,439
okay so the next thing that you need the

00:17:18,559 --> 00:17:21,760
next tool

00:17:19,439 --> 00:17:23,520
is an alerting tool and it's really

00:17:21,760 --> 00:17:25,439
important that you choose an alerting

00:17:23,520 --> 00:17:28,319
tool that can be integrated with your

00:17:25,439 --> 00:17:31,679
job scheduler so

00:17:28,319 --> 00:17:33,679
everyone is on call here and everyone on

00:17:31,679 --> 00:17:34,960
your team from product to design to

00:17:33,679 --> 00:17:37,200
engineering

00:17:34,960 --> 00:17:38,799
should be on call because everyone on

00:17:37,200 --> 00:17:43,120
the team owns product

00:17:38,799 --> 00:17:46,640
quality okay so these are the tools

00:17:43,120 --> 00:17:47,760
that i've used for testing in production

00:17:46,640 --> 00:17:50,880
and i'll just go through

00:17:47,760 --> 00:17:52,559
each of them really fast so for feature

00:17:50,880 --> 00:17:55,679
flagging i've used

00:17:52,559 --> 00:17:56,960
split and launch darkly for my

00:17:55,679 --> 00:17:59,760
automation framework

00:17:56,960 --> 00:18:00,720
i love robot framework that's like my

00:17:59,760 --> 00:18:02,480
ultimate

00:18:00,720 --> 00:18:03,919
favorite automation framework of all

00:18:02,480 --> 00:18:06,640
time um

00:18:03,919 --> 00:18:07,679
and then puppeteering just puppeteer is

00:18:06,640 --> 00:18:12,240
not the easiest

00:18:07,679 --> 00:18:12,240
to use and set up but um

00:18:12,400 --> 00:18:17,520
i i actually prefer cypress for

00:18:15,440 --> 00:18:18,559
javascript uh for an automation

00:18:17,520 --> 00:18:20,640
framework but

00:18:18,559 --> 00:18:22,400
i haven't used cypress with testing and

00:18:20,640 --> 00:18:23,679
production so i'm not sure

00:18:22,400 --> 00:18:26,080
i wasn't going to recommend that because

00:18:23,679 --> 00:18:27,520
i haven't used it um

00:18:26,080 --> 00:18:29,200
but if you're just looking for an

00:18:27,520 --> 00:18:32,320
automation framework

00:18:29,200 --> 00:18:35,520
i would choose cyprus over puppeteer um

00:18:32,320 --> 00:18:37,120
and then for angular applications i've

00:18:35,520 --> 00:18:39,039
used protractor

00:18:37,120 --> 00:18:40,240
and then for my job scheduler like

00:18:39,039 --> 00:18:42,720
jenkins circle ci

00:18:40,240 --> 00:18:44,240
travis like they're all the same and

00:18:42,720 --> 00:18:47,280
then for my alerting

00:18:44,240 --> 00:18:49,280
i have set up pagerduty and slack so

00:18:47,280 --> 00:18:50,799
something that i like to do is to set up

00:18:49,280 --> 00:18:54,080
my

00:18:50,799 --> 00:18:55,919
um really critical alerts like

00:18:54,080 --> 00:18:57,520
the things that you're going to wake up

00:18:55,919 --> 00:18:59,520
in the middle of the night for i set

00:18:57,520 --> 00:19:00,720
those up with pagerduty and then the

00:18:59,520 --> 00:19:04,000
things that

00:19:00,720 --> 00:19:06,480
um are lower level

00:19:04,000 --> 00:19:08,080
alerts like you know all the tests have

00:19:06,480 --> 00:19:10,080
passed or you know there's this

00:19:08,080 --> 00:19:12,000
smaller issue then i set those up with

00:19:10,080 --> 00:19:14,960
slack so you can differentiate between

00:19:12,000 --> 00:19:14,960
the alerting types

00:19:15,919 --> 00:19:19,600
okay so the next step after you install

00:19:18,559 --> 00:19:22,880
all of your tools

00:19:19,600 --> 00:19:24,720
is to create your test data

00:19:22,880 --> 00:19:26,559
so the problem is you need a way to

00:19:24,720 --> 00:19:27,600
create and manipulate test data in

00:19:26,559 --> 00:19:30,559
production

00:19:27,600 --> 00:19:32,480
without affecting real end users or any

00:19:30,559 --> 00:19:35,760
data or analytics

00:19:32,480 --> 00:19:38,799
so a solution is to create a consistent

00:19:35,760 --> 00:19:41,440
naming convention for test users

00:19:38,799 --> 00:19:43,840
and these users act like real people and

00:19:41,440 --> 00:19:46,000
they look like real people but

00:19:43,840 --> 00:19:47,760
only we would be able to interact with

00:19:46,000 --> 00:19:49,440
them like the outside world

00:19:47,760 --> 00:19:51,440
are not going to be able to see them or

00:19:49,440 --> 00:19:54,080
interact with them because

00:19:51,440 --> 00:19:54,799
what we do is we create this boolean and

00:19:54,080 --> 00:19:58,160
something like

00:19:54,799 --> 00:19:58,559
is test user is true or is test equals

00:19:58,160 --> 00:20:01,120
true

00:19:58,559 --> 00:20:02,400
or whatever you decide so that in your

00:20:01,120 --> 00:20:05,200
data dashboard

00:20:02,400 --> 00:20:06,159
whether you're using like data dog or

00:20:05,200 --> 00:20:09,440
looker or

00:20:06,159 --> 00:20:12,159
whatever dashboard you have you can

00:20:09,440 --> 00:20:12,880
exclude all the actions done by users

00:20:12,159 --> 00:20:15,919
whose

00:20:12,880 --> 00:20:18,000
is test user boolean is set to true or

00:20:15,919 --> 00:20:19,840
you can differentiate them into like two

00:20:18,000 --> 00:20:21,600
separate tables so like all of your test

00:20:19,840 --> 00:20:24,559
data goes into one table

00:20:21,600 --> 00:20:25,120
and then all of your um normal user data

00:20:24,559 --> 00:20:27,520
goes into

00:20:25,120 --> 00:20:29,679
another table and then you can have a

00:20:27,520 --> 00:20:30,480
backend flagging system that's used to

00:20:29,679 --> 00:20:33,440
identify

00:20:30,480 --> 00:20:34,080
all of your test entities so if the flag

00:20:33,440 --> 00:20:37,039
was on

00:20:34,080 --> 00:20:37,760
then you know that this page or this

00:20:37,039 --> 00:20:40,480
specific

00:20:37,760 --> 00:20:41,120
object or this thing that's in

00:20:40,480 --> 00:20:43,679
production

00:20:41,120 --> 00:20:47,679
is a test entity and it should not be

00:20:43,679 --> 00:20:49,919
included in any data and analytics

00:20:47,679 --> 00:20:51,679
so in your automation scripts you make

00:20:49,919 --> 00:20:54,080
sure that your test entities

00:20:51,679 --> 00:20:56,080
only interact with each other so that

00:20:54,080 --> 00:20:59,679
means that your test user

00:20:56,080 --> 00:21:01,520
logs in to your um

00:20:59,679 --> 00:21:02,880
logs into your application and then they

00:21:01,520 --> 00:21:05,600
click on

00:21:02,880 --> 00:21:06,559
the test object that does this thing

00:21:05,600 --> 00:21:09,280
like

00:21:06,559 --> 00:21:10,400
your test entities should only interact

00:21:09,280 --> 00:21:12,559
with each other

00:21:10,400 --> 00:21:14,559
and you can hard code that in your test

00:21:12,559 --> 00:21:16,159
and you can say like login is this test

00:21:14,559 --> 00:21:18,159
user and click on this test

00:21:16,159 --> 00:21:20,000
thing and do whatever you need the test

00:21:18,159 --> 00:21:23,039
to do so and then if any

00:21:20,000 --> 00:21:25,120
any part of that fails or if um

00:21:23,039 --> 00:21:26,960
your your test doesn't find that test

00:21:25,120 --> 00:21:29,120
object then the test needs to fail you

00:21:26,960 --> 00:21:31,919
need to figure out what's going on

00:21:29,120 --> 00:21:34,000
so once you have these specific

00:21:31,919 --> 00:21:36,240
predetermined guidelines

00:21:34,000 --> 00:21:38,080
you can create and manipulate these

00:21:36,240 --> 00:21:39,520
testing entities in production and this

00:21:38,080 --> 00:21:43,039
is how you do it safely

00:21:39,520 --> 00:21:46,000
but each team has their own um

00:21:43,039 --> 00:21:48,080
flows has their own like user flows so

00:21:46,000 --> 00:21:49,200
you need to sit down with your team and

00:21:48,080 --> 00:21:51,760
figure out like

00:21:49,200 --> 00:21:53,039
what these specific guidelines are

00:21:51,760 --> 00:21:56,320
because each product is

00:21:53,039 --> 00:21:58,400
is obviously different okay so the next

00:21:56,320 --> 00:22:01,039
step is to write your tests

00:21:58,400 --> 00:22:04,320
so personally i like bdd because it's

00:22:01,039 --> 00:22:07,600
easy to read and it's easy to write

00:22:04,320 --> 00:22:09,679
my like ideal setup is robot framework

00:22:07,600 --> 00:22:11,360
with cucumber and gherkin and just

00:22:09,679 --> 00:22:14,320
simple bdd

00:22:11,360 --> 00:22:15,200
um it makes it also really easy for my

00:22:14,320 --> 00:22:17,039
product owner

00:22:15,200 --> 00:22:18,799
when he looks at my test and he knows

00:22:17,039 --> 00:22:21,280
exactly what's going on

00:22:18,799 --> 00:22:23,600
um because it uses a keyword driven

00:22:21,280 --> 00:22:25,919
library

00:22:23,600 --> 00:22:27,120
yeah i really love robot framework guys

00:22:25,919 --> 00:22:30,720
um okay

00:22:27,120 --> 00:22:33,760
so the next step is to have

00:22:30,720 --> 00:22:33,760
a really um

00:22:34,240 --> 00:22:38,960
a really good setup and tear down so

00:22:37,200 --> 00:22:40,559
basically in your setup for your test

00:22:38,960 --> 00:22:42,640
you want to clear your cookies

00:22:40,559 --> 00:22:44,960
do your login you know basically just

00:22:42,640 --> 00:22:47,280
set up the test whatever you need to do

00:22:44,960 --> 00:22:48,799
and then in your test you can perform

00:22:47,280 --> 00:22:51,520
whatever actions you need

00:22:48,799 --> 00:22:52,880
validate whatever functionality and then

00:22:51,520 --> 00:22:55,760
in your tear down you can

00:22:52,880 --> 00:22:58,080
undo any actions of the test this is

00:22:55,760 --> 00:23:03,039
basically like your clean up time

00:22:58,080 --> 00:23:06,080
so something that's really important to

00:23:03,039 --> 00:23:08,480
to keep in mind is that

00:23:06,080 --> 00:23:10,720
if any step fails whether it's your

00:23:08,480 --> 00:23:13,440
setup your test or your teardown

00:23:10,720 --> 00:23:13,919
you need to immediately get alerted and

00:23:13,440 --> 00:23:17,039
then

00:23:13,919 --> 00:23:18,400
the tests need to stop so if your

00:23:17,039 --> 00:23:20,240
cleanup fails

00:23:18,400 --> 00:23:21,760
and like you still have test data in

00:23:20,240 --> 00:23:22,000
production like that's a problem you

00:23:21,760 --> 00:23:24,400
need

00:23:22,000 --> 00:23:26,240
to go back and fix it figure out what's

00:23:24,400 --> 00:23:29,600
going on like if any step of this

00:23:26,240 --> 00:23:29,600
fails it's a problem

00:23:30,000 --> 00:23:40,000
sorry guys

00:23:36,240 --> 00:23:42,240
okay so the next step is to deploy to a

00:23:40,000 --> 00:23:44,080
production canary and this

00:23:42,240 --> 00:23:45,840
a lot of companies a lot of teams that

00:23:44,080 --> 00:23:47,919
i've worked with um

00:23:45,840 --> 00:23:49,200
think that this is optional and it can

00:23:47,919 --> 00:23:50,720
be optional but

00:23:49,200 --> 00:23:52,559
i'm gonna go through it and you'll

00:23:50,720 --> 00:23:56,159
understand the value of why

00:23:52,559 --> 00:23:59,039
you should do it okay so

00:23:56,159 --> 00:24:00,080
production canaries allow you to slowly

00:23:59,039 --> 00:24:02,480
roll out a change

00:24:00,080 --> 00:24:05,360
to a small subset of users before you

00:24:02,480 --> 00:24:07,760
roll it out to the entire population and

00:24:05,360 --> 00:24:08,799
basically like the story of a production

00:24:07,760 --> 00:24:10,720
canary is like

00:24:08,799 --> 00:24:12,400
back in the days of like coal mining

00:24:10,720 --> 00:24:15,760
like um

00:24:12,400 --> 00:24:18,960
the miners would like send a canary bird

00:24:15,760 --> 00:24:22,320
down with them and like if the canary

00:24:18,960 --> 00:24:23,039
um had trouble breathing then the canary

00:24:22,320 --> 00:24:24,880
would die

00:24:23,039 --> 00:24:26,240
and so like that that's how they would

00:24:24,880 --> 00:24:27,919
know like oh there's something in the

00:24:26,240 --> 00:24:29,039
air that's bad and like we need to get

00:24:27,919 --> 00:24:31,279
out now

00:24:29,039 --> 00:24:33,039
um so basically what this does is it

00:24:31,279 --> 00:24:34,559
just like minimizes the impact if

00:24:33,039 --> 00:24:35,760
something goes wrong it like gives you

00:24:34,559 --> 00:24:38,799
that alert that

00:24:35,760 --> 00:24:41,600
you know you've um

00:24:38,799 --> 00:24:43,919
implemented something that's wrong for

00:24:41,600 --> 00:24:46,960
you know one percent of the population

00:24:43,919 --> 00:24:48,799
and you can fix it

00:24:46,960 --> 00:24:50,480
so basically what this does is it

00:24:48,799 --> 00:24:52,720
provides risk mitigation

00:24:50,480 --> 00:24:53,919
so do you want a hundred percent of your

00:24:52,720 --> 00:24:57,520
users to encounter this

00:24:53,919 --> 00:24:59,679
issue or one percent um

00:24:57,520 --> 00:25:01,679
what this means is like if you went

00:24:59,679 --> 00:25:04,559
through the feature flagging process and

00:25:01,679 --> 00:25:06,960
if um there was a bug that you did

00:25:04,559 --> 00:25:09,120
release to production

00:25:06,960 --> 00:25:11,039
this is like an extra layer of

00:25:09,120 --> 00:25:12,960
protection that says

00:25:11,039 --> 00:25:14,799
i'm only gonna show this feature to one

00:25:12,960 --> 00:25:17,600
percent of your population

00:25:14,799 --> 00:25:19,760
um make sure that it works for them and

00:25:17,600 --> 00:25:22,159
then i'll release it to everyone

00:25:19,760 --> 00:25:22,960
so this just allows you to identify the

00:25:22,159 --> 00:25:24,960
issue

00:25:22,960 --> 00:25:29,039
and then roll it back to a good version

00:25:24,960 --> 00:25:30,400
and fix it in a controlled environment

00:25:29,039 --> 00:25:32,559
and then just to note that like

00:25:30,400 --> 00:25:34,320
infrastructure and configuration changes

00:25:32,559 --> 00:25:36,080
in my opinion should always be released

00:25:34,320 --> 00:25:37,679
for the canary just because

00:25:36,080 --> 00:25:39,679
these these are usually really sensitive

00:25:37,679 --> 00:25:41,360
changes that affect a lot of people and

00:25:39,679 --> 00:25:42,720
you want to make sure that they that

00:25:41,360 --> 00:25:46,000
they work for

00:25:42,720 --> 00:25:49,360
a smaller population before you

00:25:46,000 --> 00:25:51,279
roll it up to everyone and this is what

00:25:49,360 --> 00:25:52,240
the canary setup looks like it's split

00:25:51,279 --> 00:25:55,279
it's just super

00:25:52,240 --> 00:25:57,279
intuitive there's just a lever that you

00:25:55,279 --> 00:26:00,480
can say i want to allocate

00:25:57,279 --> 00:26:00,799
5 traffic or 10 traffic or whatever and

00:26:00,480 --> 00:26:02,320
then

00:26:00,799 --> 00:26:05,039
as you build your confidence you can

00:26:02,320 --> 00:26:07,840
slowly increase this

00:26:05,039 --> 00:26:09,440
so what if there's an issue with your

00:26:07,840 --> 00:26:11,760
canary code like what if you do this

00:26:09,440 --> 00:26:14,960
process and you do have an issue

00:26:11,760 --> 00:26:17,279
um basically just first stay calm like

00:26:14,960 --> 00:26:18,320
ask yourself if it's okay if your users

00:26:17,279 --> 00:26:21,600
see this

00:26:18,320 --> 00:26:22,559
and if yes keep the canary as is and fix

00:26:21,600 --> 00:26:25,279
the bug

00:26:22,559 --> 00:26:27,200
and if not then just return the canary

00:26:25,279 --> 00:26:31,200
to zero percent traffic

00:26:27,200 --> 00:26:31,200
fix the bug and then redeploy

00:26:31,520 --> 00:26:34,720
so in terms of risk mitigation before

00:26:34,240 --> 00:26:37,360
launch

00:26:34,720 --> 00:26:39,279
use feature flags to target your users

00:26:37,360 --> 00:26:43,039
and then after launch use production

00:26:39,279 --> 00:26:43,039
canaries to limit your audience

00:26:44,880 --> 00:26:48,559
okay so the outcome of this process was

00:26:47,840 --> 00:26:51,760
just

00:26:48,559 --> 00:26:53,600
incredible so we as a team just had

00:26:51,760 --> 00:26:56,240
higher confidence we had an

00:26:53,600 --> 00:26:58,640
increased developer velocity because our

00:26:56,240 --> 00:27:01,120
developers were spending more time

00:26:58,640 --> 00:27:02,640
creating value to our users and creating

00:27:01,120 --> 00:27:06,480
features and less time

00:27:02,640 --> 00:27:08,480
fixing bugs and at the end of the day

00:27:06,480 --> 00:27:10,960
like testing and production promotes a

00:27:08,480 --> 00:27:12,960
proactive engineering culture so

00:27:10,960 --> 00:27:14,880
i don't want to wait until something

00:27:12,960 --> 00:27:16,960
breaks have a user report it to me and

00:27:14,880 --> 00:27:19,360
then fix it like i want to know what's

00:27:16,960 --> 00:27:22,880
going on and fix any issues before my

00:27:19,360 --> 00:27:24,960
users ever see anything wrong

00:27:22,880 --> 00:27:27,039
and what this did long term again is

00:27:24,960 --> 00:27:28,880
that it minimized our user interaction

00:27:27,039 --> 00:27:32,720
with bugs and defects and it really

00:27:28,880 --> 00:27:32,720
ensured a great user experience

00:27:32,880 --> 00:27:36,799
okay so just a note on performance

00:27:35,440 --> 00:27:39,120
testing in production

00:27:36,799 --> 00:27:40,000
like yes it's possible you want to do it

00:27:39,120 --> 00:27:43,039
at a time with

00:27:40,000 --> 00:27:44,960
low traffic and be prepared for outages

00:27:43,039 --> 00:27:46,559
so i was working at a company that we

00:27:44,960 --> 00:27:47,120
did performance testing in production

00:27:46,559 --> 00:27:48,799
and

00:27:47,120 --> 00:27:50,240
basically it sucked but everyone had to

00:27:48,799 --> 00:27:51,919
wake up at like 1am

00:27:50,240 --> 00:27:53,760
do the test and then you could go back

00:27:51,919 --> 00:27:55,679
to sleep and like we all got paid

00:27:53,760 --> 00:27:57,200
overtime like it wasn't a big deal but

00:27:55,679 --> 00:27:58,720
you want to do this at a time with low

00:27:57,200 --> 00:28:01,200
traffic and it's better to do this

00:27:58,720 --> 00:28:04,399
on purpose and control the outcome

00:28:01,200 --> 00:28:04,399
because you need to be prepared

00:28:04,480 --> 00:28:08,080
okay and then how to handle third

00:28:06,080 --> 00:28:10,399
parties so when you're handling

00:28:08,080 --> 00:28:13,039
third parties what's worked best for me

00:28:10,399 --> 00:28:15,279
is to have a header and the api request

00:28:13,039 --> 00:28:17,039
that you send to the third party

00:28:15,279 --> 00:28:19,600
and then work with the third party and

00:28:17,039 --> 00:28:20,880
tell them hey any requests that you get

00:28:19,600 --> 00:28:23,360
with this header

00:28:20,880 --> 00:28:25,039
is coming from a test so i want you to

00:28:23,360 --> 00:28:25,919
handle it differently and tell them what

00:28:25,039 --> 00:28:27,440
you want so

00:28:25,919 --> 00:28:28,960
i've done this a few times with third

00:28:27,440 --> 00:28:31,039
parties where i say hey

00:28:28,960 --> 00:28:33,520
you know if you see this header that

00:28:31,039 --> 00:28:34,799
says like is test user or whatever it is

00:28:33,520 --> 00:28:36,399
like i want you to

00:28:34,799 --> 00:28:38,399
do this other thing with it and don't

00:28:36,399 --> 00:28:40,960
treat it like a production

00:28:38,399 --> 00:28:40,960
request

00:28:41,679 --> 00:28:44,960
okay so what if you cannot test and prod

00:28:44,159 --> 00:28:48,240
like what if you

00:28:44,960 --> 00:28:51,440
absolutely cannot test improv you work

00:28:48,240 --> 00:28:54,720
for i don't know some

00:28:51,440 --> 00:28:56,960
institution that is just it's it's not

00:28:54,720 --> 00:28:59,120
possible you can't do it

00:28:56,960 --> 00:29:00,799
um this is what i recommend i recommend

00:28:59,120 --> 00:29:03,279
using a containerized

00:29:00,799 --> 00:29:04,880
environment and spinning that up per

00:29:03,279 --> 00:29:07,279
build

00:29:04,880 --> 00:29:09,600
so you can use docker to spin up your

00:29:07,279 --> 00:29:12,240
micro services but just remember

00:29:09,600 --> 00:29:13,919
the more dependencies you have the more

00:29:12,240 --> 00:29:16,880
complicated it is

00:29:13,919 --> 00:29:18,240
because you need to know which versions

00:29:16,880 --> 00:29:20,320
of docker are going to be used in

00:29:18,240 --> 00:29:23,360
production and then test against

00:29:20,320 --> 00:29:23,360
those versions

00:29:23,440 --> 00:29:29,120
sorry guys

00:29:26,799 --> 00:29:31,200
um you also need to run separate tests

00:29:29,120 --> 00:29:33,039
for each individual micro service as

00:29:31,200 --> 00:29:35,840
well as all of them together

00:29:33,039 --> 00:29:37,279
it's also just not the most secure place

00:29:35,840 --> 00:29:41,360
especially when you're talking about

00:29:37,279 --> 00:29:44,399
like pen testing and like the wasp tests

00:29:41,360 --> 00:29:45,760
um it's hackers are constantly targeting

00:29:44,399 --> 00:29:47,760
those systems

00:29:45,760 --> 00:29:49,279
um and again it's super expensive if you

00:29:47,760 --> 00:29:50,480
think of like the number of times that

00:29:49,279 --> 00:29:51,600
you're gonna have to spin up these

00:29:50,480 --> 00:29:55,679
environments to

00:29:51,600 --> 00:29:57,200
for these tests to run it just adds up

00:29:55,679 --> 00:29:58,960
so testing in a containerized

00:29:57,200 --> 00:30:03,279
environment is good

00:29:58,960 --> 00:30:06,000
it's just not as good in my opinion

00:30:03,279 --> 00:30:06,880
so what about other non-production tests

00:30:06,000 --> 00:30:09,919
so

00:30:06,880 --> 00:30:12,080
basically staging environments can still

00:30:09,919 --> 00:30:15,120
be used for pre-production testing

00:30:12,080 --> 00:30:18,320
if you have things like socks compliance

00:30:15,120 --> 00:30:21,120
or things that are like

00:30:18,320 --> 00:30:22,000
privacy related um things that need to

00:30:21,120 --> 00:30:24,320
minimize data

00:30:22,000 --> 00:30:25,279
breaches so things like this can be

00:30:24,320 --> 00:30:28,640
tested in

00:30:25,279 --> 00:30:31,440
a staging environment the place where

00:30:28,640 --> 00:30:34,080
production tests operate is in this like

00:30:31,440 --> 00:30:36,720
smaller bubble so if you think of

00:30:34,080 --> 00:30:38,320
all of your tests within that basic

00:30:36,720 --> 00:30:41,120
suite of tests you have your

00:30:38,320 --> 00:30:42,960
unit tests and your snapshot tests um

00:30:41,120 --> 00:30:44,159
and then within that you have your end

00:30:42,960 --> 00:30:46,080
to end flows

00:30:44,159 --> 00:30:47,440
and then within the end to end flows you

00:30:46,080 --> 00:30:49,600
have your production test

00:30:47,440 --> 00:30:51,840
so just notice that there are production

00:30:49,600 --> 00:30:52,720
tests or sorry there are end-to-end

00:30:51,840 --> 00:30:54,720
flows that

00:30:52,720 --> 00:30:55,919
are not production tests and that's due

00:30:54,720 --> 00:30:59,440
to these

00:30:55,919 --> 00:31:02,080
you know data issues or um

00:30:59,440 --> 00:31:02,880
socks compliant issues or whatever it is

00:31:02,080 --> 00:31:05,919
so

00:31:02,880 --> 00:31:06,880
you're your product and your company is

00:31:05,919 --> 00:31:09,120
going to be

00:31:06,880 --> 00:31:10,320
a little bit different in the ratio of

00:31:09,120 --> 00:31:11,840
you know the staging tests and

00:31:10,320 --> 00:31:14,640
production tests but

00:31:11,840 --> 00:31:18,240
um not all of your end-to-end tests will

00:31:14,640 --> 00:31:19,760
be in production and that's fine

00:31:18,240 --> 00:31:21,600
so let's talk about shifting your

00:31:19,760 --> 00:31:22,640
company's testing culture this is my

00:31:21,600 --> 00:31:24,399
favorite thing

00:31:22,640 --> 00:31:26,320
to talk about because i get to like

00:31:24,399 --> 00:31:28,480
prove people wrong all the time

00:31:26,320 --> 00:31:29,679
um so what i would do if this is

00:31:28,480 --> 00:31:32,880
something that

00:31:29,679 --> 00:31:34,000
um i wanted to propose to my company or

00:31:32,880 --> 00:31:36,399
to my team

00:31:34,000 --> 00:31:37,679
i would explain why the pros outweigh

00:31:36,399 --> 00:31:39,440
the cons so

00:31:37,679 --> 00:31:41,440
think of like is your staging

00:31:39,440 --> 00:31:42,399
environment unreliable which i know that

00:31:41,440 --> 00:31:44,960
it is because

00:31:42,399 --> 00:31:46,640
you know it's staging um and then think

00:31:44,960 --> 00:31:47,679
of like are there frequently issues that

00:31:46,640 --> 00:31:49,120
could have been caught if you were

00:31:47,679 --> 00:31:51,760
testing in production like

00:31:49,120 --> 00:31:53,600
yes there are and then use examples from

00:31:51,760 --> 00:31:55,200
the past like do you remember when we

00:31:53,600 --> 00:31:57,039
merged this thing and it caused this

00:31:55,200 --> 00:31:59,039
huge issue in production like would we

00:31:57,039 --> 00:32:00,000
have been able to catch it if we tested

00:31:59,039 --> 00:32:02,960
in production with

00:32:00,000 --> 00:32:04,080
feature flags um and then propose a path

00:32:02,960 --> 00:32:05,519
forward like you can't just go to

00:32:04,080 --> 00:32:07,039
management with a problem you have to go

00:32:05,519 --> 00:32:10,240
to them with a solution

00:32:07,039 --> 00:32:11,600
so think of things like can i take some

00:32:10,240 --> 00:32:13,600
time in my next sprint to

00:32:11,600 --> 00:32:15,360
play with feature flagging like i know

00:32:13,600 --> 00:32:16,000
split has like a free version that you

00:32:15,360 --> 00:32:17,519
can try

00:32:16,000 --> 00:32:19,360
and just play with it and see if like

00:32:17,519 --> 00:32:21,919
it's something that your team would be

00:32:19,360 --> 00:32:24,480
interested in

00:32:21,919 --> 00:32:26,399
and then with my company like we used to

00:32:24,480 --> 00:32:28,000
be scared of deploying new features and

00:32:26,399 --> 00:32:30,240
we used to have debates of whether or

00:32:28,000 --> 00:32:32,559
not to deploy code on fridays like

00:32:30,240 --> 00:32:34,240
now we don't fight about that we fight

00:32:32,559 --> 00:32:36,320
about other things

00:32:34,240 --> 00:32:37,600
um and then once we started moving more

00:32:36,320 --> 00:32:38,640
and more things to testing and

00:32:37,600 --> 00:32:41,200
production

00:32:38,640 --> 00:32:42,080
these discussions and this fear stopped

00:32:41,200 --> 00:32:44,799
because

00:32:42,080 --> 00:32:47,039
we already knew if something was broken

00:32:44,799 --> 00:32:48,880
and we fixed it ahead of time

00:32:47,039 --> 00:32:51,840
that lead time to know if something was

00:32:48,880 --> 00:32:51,840
wrong was reduced

00:32:52,000 --> 00:32:56,640
okay so there's always going to be those

00:32:54,960 --> 00:32:58,880
people who say

00:32:56,640 --> 00:32:59,840
testing in production will never work

00:32:58,880 --> 00:33:02,799
and

00:32:59,840 --> 00:33:03,760
to those people i say three things

00:33:02,799 --> 00:33:05,919
number one

00:33:03,760 --> 00:33:08,080
staging will never fully represent

00:33:05,919 --> 00:33:09,679
production it's a separate environment

00:33:08,080 --> 00:33:10,000
it's separate data it's never gonna

00:33:09,679 --> 00:33:12,799
fully

00:33:10,000 --> 00:33:14,480
represent production number two staging

00:33:12,799 --> 00:33:16,640
is a sunk cost

00:33:14,480 --> 00:33:18,480
and number three these people are not my

00:33:16,640 --> 00:33:20,080
target audience

00:33:18,480 --> 00:33:24,320
they're either gonna get on board or

00:33:20,080 --> 00:33:28,000
they're gonna die off

00:33:24,320 --> 00:33:30,000
okay so if this is something you wanted

00:33:28,000 --> 00:33:31,279
to do let's just summarize the steps

00:33:30,000 --> 00:33:32,720
briefly so

00:33:31,279 --> 00:33:34,880
you're going to want to install your

00:33:32,720 --> 00:33:37,039
tools so your feature flagging your

00:33:34,880 --> 00:33:38,640
automation framework your job scheduler

00:33:37,039 --> 00:33:39,840
and your learning tool

00:33:38,640 --> 00:33:41,519
and then you're going to want to create

00:33:39,840 --> 00:33:41,919
your test data and make sure that your

00:33:41,519 --> 00:33:44,799
test

00:33:41,919 --> 00:33:46,080
entities only interact with each other

00:33:44,799 --> 00:33:46,399
and then you're going to want to write

00:33:46,080 --> 00:33:48,559
your

00:33:46,399 --> 00:33:50,720
tests and make sure that your teardown

00:33:48,559 --> 00:33:52,640
cleans up the test and you get alerted

00:33:50,720 --> 00:33:55,120
if any part of the test fails so your

00:33:52,640 --> 00:33:57,200
setup your test or your tear down

00:33:55,120 --> 00:34:00,399
launch your feature behind a feature

00:33:57,200 --> 00:34:02,880
flag deploy to your production canary

00:34:00,399 --> 00:34:05,200
and have a drink because you're testing

00:34:02,880 --> 00:34:07,279
in production

00:34:05,200 --> 00:34:08,399
okay in case you haven't been paying

00:34:07,279 --> 00:34:11,280
attention at all

00:34:08,399 --> 00:34:12,800
the past 35 minutes and you're just

00:34:11,280 --> 00:34:14,879
tuning in now

00:34:12,800 --> 00:34:15,839
i want you to take away two things from

00:34:14,879 --> 00:34:18,240
this talk

00:34:15,839 --> 00:34:20,000
the first thing is that no one cares if

00:34:18,240 --> 00:34:21,919
your feature is working in staging we

00:34:20,000 --> 00:34:23,679
care if it works in production

00:34:21,919 --> 00:34:25,359
and the second is that the only way to

00:34:23,679 --> 00:34:28,800
know if it's working in production

00:34:25,359 --> 00:34:28,800
is to test it in production

00:34:29,280 --> 00:34:36,000
and that's it guys i can take

00:34:32,399 --> 00:34:39,040
questions now um

00:34:36,000 --> 00:34:42,079
thank you for having me

00:34:39,040 --> 00:34:42,079
and uh yeah

00:34:43,119 --> 00:34:47,679
for the questions uh talia said maybe

00:34:46,159 --> 00:34:48,399
it's better if you write them in the in

00:34:47,679 --> 00:34:51,599
the channel

00:34:48,399 --> 00:34:52,480
so everybody can see and she can read

00:34:51,599 --> 00:34:57,680
the question

00:34:52,480 --> 00:35:03,839
as well yes have any questions

00:34:57,680 --> 00:35:03,839
please post them

00:35:04,800 --> 00:35:08,480
no questions this is the first oh here

00:35:07,760 --> 00:35:10,320
we go

00:35:08,480 --> 00:35:11,599
are there any integration testing with

00:35:10,320 --> 00:35:13,599
the features released

00:35:11,599 --> 00:35:15,599
after deployment in like an internal

00:35:13,599 --> 00:35:19,359
environment no

00:35:15,599 --> 00:35:21,920
only in production so the integration

00:35:19,359 --> 00:35:24,480
tests will run in the build pipeline

00:35:21,920 --> 00:35:26,000
in production and they'll be blocking so

00:35:24,480 --> 00:35:28,560
like if the integration test

00:35:26,000 --> 00:35:29,440
fails in production because of your

00:35:28,560 --> 00:35:30,960
feature

00:35:29,440 --> 00:35:34,000
that the rest of the code won't be

00:35:30,960 --> 00:35:34,000
promoted to production

00:35:35,119 --> 00:35:37,760
you're welcome

00:35:41,599 --> 00:35:45,839
anything else

00:35:47,839 --> 00:35:52,400
okay what would you say to developers

00:35:50,720 --> 00:35:53,280
saying that feature flags are too much

00:35:52,400 --> 00:35:56,480
work

00:35:53,280 --> 00:35:58,160
um it's an if else statement so

00:35:56,480 --> 00:35:59,599
i don't think and if else statement is

00:35:58,160 --> 00:36:02,480
too much work

00:35:59,599 --> 00:36:04,160
um you just like literally i showed it

00:36:02,480 --> 00:36:05,920
to you in the ui you just create the

00:36:04,160 --> 00:36:08,800
feature flag in the ui

00:36:05,920 --> 00:36:09,839
set your targeting rules and write the

00:36:08,800 --> 00:36:13,839
if else statement

00:36:09,839 --> 00:36:13,839
in your code um

00:36:14,160 --> 00:36:20,480
yeah i i think that's it's manageable

00:36:18,160 --> 00:36:21,520
um but if you really do think it's too

00:36:20,480 --> 00:36:24,560
much work like

00:36:21,520 --> 00:36:26,880
we have um people who can help

00:36:24,560 --> 00:36:28,800
us split like i'm happy to help you if

00:36:26,880 --> 00:36:32,560
it's really um

00:36:28,800 --> 00:36:34,960
if it's really a problem but

00:36:32,560 --> 00:36:36,160
it's really intuitive um it's just an if

00:36:34,960 --> 00:36:38,000
else like you're saying if you're in the

00:36:36,160 --> 00:36:41,839
feature flag you see the feature and if

00:36:38,000 --> 00:36:41,839
you're not then you don't

00:36:42,640 --> 00:36:45,760
um you guys also have a staging

00:36:44,720 --> 00:36:47,839
environment

00:36:45,760 --> 00:36:49,680
having extra efforts testing product is

00:36:47,839 --> 00:36:52,720
it way too time consuming

00:36:49,680 --> 00:36:54,880
so we don't have a staging environment

00:36:52,720 --> 00:36:56,400
because all of our tests are running in

00:36:54,880 --> 00:36:59,520
production and we

00:36:56,400 --> 00:37:00,880
don't as far as i know we don't use like

00:36:59,520 --> 00:37:03,040
we don't we don't abide by socks

00:37:00,880 --> 00:37:06,720
compliance because our company

00:37:03,040 --> 00:37:10,079
um doesn't i don't think that we

00:37:06,720 --> 00:37:12,320
uh are in like that socks world

00:37:10,079 --> 00:37:14,160
um but if you do and if your company

00:37:12,320 --> 00:37:15,440
does need to have a staging environment

00:37:14,160 --> 00:37:18,640
because of like

00:37:15,440 --> 00:37:23,839
socks and gdpr and whatever

00:37:18,640 --> 00:37:23,839
you know data rules

00:37:31,520 --> 00:37:34,640
then you can't have that and it's

00:37:32,960 --> 00:37:35,760
important if it runs in staging you

00:37:34,640 --> 00:37:38,160
don't want to run on production

00:37:35,760 --> 00:37:39,440
it's like a different uh set of tests

00:37:38,160 --> 00:37:40,720
because they're testing different things

00:37:39,440 --> 00:37:42,320
you don't want the same test running in

00:37:40,720 --> 00:37:44,800
both places because

00:37:42,320 --> 00:37:47,280
um if it runs in production who cares if

00:37:44,800 --> 00:37:51,839
it runs in staging

00:37:47,280 --> 00:37:51,839
does that make sense

00:37:53,839 --> 00:37:58,400
when do you start testing as soon as i

00:37:56,720 --> 00:38:01,280
get requirements from product

00:37:58,400 --> 00:38:04,000
and i write my feature um i'm writing

00:38:01,280 --> 00:38:06,880
the test at the same time so

00:38:04,000 --> 00:38:08,320
when the feature is done then the test

00:38:06,880 --> 00:38:11,359
is done at the same time

00:38:08,320 --> 00:38:14,240
and then i run the test that tests

00:38:11,359 --> 00:38:14,720
the feature and then if there's any

00:38:14,240 --> 00:38:17,440
issues

00:38:14,720 --> 00:38:19,280
i'll fix the issues um and then i'll

00:38:17,440 --> 00:38:20,320
turn the feature flag on so the testing

00:38:19,280 --> 00:38:21,920
starts

00:38:20,320 --> 00:38:23,440
as soon as i know what the feature is

00:38:21,920 --> 00:38:25,520
and what's going on like sometimes i'll

00:38:23,440 --> 00:38:28,240
leave in blanks if i don't know like

00:38:25,520 --> 00:38:29,520
the selector name or you know whatever

00:38:28,240 --> 00:38:30,880
if i'm waiting for issues from the

00:38:29,520 --> 00:38:33,359
developers but

00:38:30,880 --> 00:38:35,599
um you know you gotta start like right

00:38:33,359 --> 00:38:35,599
away

00:38:38,160 --> 00:38:43,200
when do when doing canaries how is the

00:38:40,960 --> 00:38:45,200
subset of users chosen it's random

00:38:43,200 --> 00:38:46,560
it's random you allocate a specific

00:38:45,200 --> 00:38:49,280
percentage

00:38:46,560 --> 00:38:52,079
within split there's um a bunch of

00:38:49,280 --> 00:38:56,400
different rules like i know i covered um

00:38:52,079 --> 00:38:59,520
just allocating traffic and i covered um

00:38:56,400 --> 00:39:02,880
um what else did i cover

00:38:59,520 --> 00:39:04,800
um like certain targeting rules

00:39:02,880 --> 00:39:06,560
you there's also like white lists and

00:39:04,800 --> 00:39:08,320
black lists and like you can get like

00:39:06,560 --> 00:39:11,119
super specific of like

00:39:08,320 --> 00:39:13,359
who you want to see specific features

00:39:11,119 --> 00:39:15,440
but then after that it's random so

00:39:13,359 --> 00:39:16,640
there's basically like a hierarchy and

00:39:15,440 --> 00:39:19,040
you can say like

00:39:16,640 --> 00:39:20,560
these users are whitelisted to always

00:39:19,040 --> 00:39:22,160
see it and then if you're in this

00:39:20,560 --> 00:39:23,280
location you can see it and then if

00:39:22,160 --> 00:39:25,599
you're in this

00:39:23,280 --> 00:39:26,320
you if you have this device you can see

00:39:25,599 --> 00:39:28,480
it and then

00:39:26,320 --> 00:39:30,320
after that everyone else it's like a

00:39:28,480 --> 00:39:33,040
random

00:39:30,320 --> 00:39:33,040
allocation

00:39:33,839 --> 00:39:37,440
um it's really like customizable so you

00:39:36,000 --> 00:39:43,839
you can decide

00:39:37,440 --> 00:39:43,839
but for the most part it's it's random

00:39:45,920 --> 00:39:50,560
have you used test cafe i have not used

00:39:49,119 --> 00:39:53,280
test cafe

00:39:50,560 --> 00:39:54,720
for ui automation tests um i've heard of

00:39:53,280 --> 00:39:59,440
test cafe

00:39:54,720 --> 00:39:59,440
um but i've not personally used it

00:40:08,560 --> 00:40:12,240
i'll give you guys a little more time

00:40:10,640 --> 00:40:14,480
and if if you guys have

00:40:12,240 --> 00:40:15,920
questions you can always email me um if

00:40:14,480 --> 00:40:16,960
you set up split and you're having

00:40:15,920 --> 00:40:18,720
issues like

00:40:16,960 --> 00:40:20,400
i'm happy to help you with feature

00:40:18,720 --> 00:40:21,280
flagging and testing and production and

00:40:20,400 --> 00:40:23,920
all that

00:40:21,280 --> 00:40:26,079
um you can email me you can tweet me you

00:40:23,920 --> 00:40:26,079
can

00:40:27,119 --> 00:40:29,599
whatever

00:40:34,000 --> 00:40:39,680
okay oh cool you said that

00:40:37,200 --> 00:40:40,960
uh you flagged the back end somehow that

00:40:39,680 --> 00:40:42,400
you're a test user do you know the

00:40:40,960 --> 00:40:44,560
technical details here

00:40:42,400 --> 00:40:45,760
yeah so basically when you're creating a

00:40:44,560 --> 00:40:49,440
test user

00:40:45,760 --> 00:40:53,280
um in our like our specific

00:40:49,440 --> 00:40:54,400
case we have a box um like a check box

00:40:53,280 --> 00:40:57,280
that just says like

00:40:54,400 --> 00:40:58,720
this is a test user and that sets that

00:40:57,280 --> 00:41:02,400
boolean to be true

00:40:58,720 --> 00:41:05,200
so um the technical details are just

00:41:02,400 --> 00:41:06,400
setting like this boolean to be true

00:41:05,200 --> 00:41:08,800
when when that

00:41:06,400 --> 00:41:09,920
check checkbox is on and then you can

00:41:08,800 --> 00:41:13,040
differentiate that

00:41:09,920 --> 00:41:15,200
in like your your data

00:41:13,040 --> 00:41:21,839
does that make sense it's just it's just

00:41:15,200 --> 00:41:21,839
a boolean

00:41:22,160 --> 00:41:26,560
yeah of course it's my pleasure

00:41:26,800 --> 00:41:30,800
um sorry again about all the sirens it's

00:41:28,720 --> 00:41:34,160
a little crazy here

00:41:30,800 --> 00:41:38,400
in la but thank you for having me

00:41:34,160 --> 00:41:41,440
and um yeah i will

00:41:38,400 --> 00:41:43,040
i will be i'll be here for

00:41:41,440 --> 00:41:46,960
questions and other things like email me

00:41:43,040 --> 00:41:49,599
tweet me whatever whatever you guys want

00:41:46,960 --> 00:41:50,160
thank you very much for for your time if

00:41:49,599 --> 00:41:53,040
you can just

00:41:50,160 --> 00:41:54,079
post the the video that you mentioned i

00:41:53,040 --> 00:41:56,240
didn't

00:41:54,079 --> 00:41:57,520
i was wasn't paying attention when i

00:41:56,240 --> 00:41:59,440
wrote properly and didn't real for

00:41:57,520 --> 00:42:01,040
please mention the video that goes more

00:41:59,440 --> 00:42:04,560
in depth at a certain

00:42:01,040 --> 00:42:07,280
subject yeah on um feature flag

00:42:04,560 --> 00:42:09,920
maintenance so like when you have

00:42:07,280 --> 00:42:11,680
a lot of uh when you have a lot of

00:42:09,920 --> 00:42:13,599
feature flags and you like implement

00:42:11,680 --> 00:42:18,240
this process

00:42:13,599 --> 00:42:21,040
um i'm gonna post it right now

00:42:18,240 --> 00:42:22,000
yeah we have a lot of future flags and

00:42:21,040 --> 00:42:26,079
actually my

00:42:22,000 --> 00:42:28,480
my pm asked the question with the flags

00:42:26,079 --> 00:42:30,000
oh yeah yeah we have a lot of issues and

00:42:28,480 --> 00:42:31,599
that's why she she asked

00:42:30,000 --> 00:42:34,880
and were complaining about the future

00:42:31,599 --> 00:42:38,240
flags by one of those

00:42:34,880 --> 00:42:40,400
um yeah this is i made this like a

00:42:38,240 --> 00:42:42,079
a while ago it's it's just it goes

00:42:40,400 --> 00:42:44,000
through like the basics of like

00:42:42,079 --> 00:42:45,920
what you need to know about setting up

00:42:44,000 --> 00:42:50,240
your feature flags and

00:42:45,920 --> 00:42:50,240
um like best practices and

00:42:54,400 --> 00:43:02,400
cool well if there's no more questions i

00:42:59,359 --> 00:43:02,400
will let you guys go

00:43:02,640 --> 00:43:06,800
okay thank you very much and have a

00:43:05,119 --> 00:43:09,040
lovely day it's just the beginning for

00:43:06,800 --> 00:43:17,839
you thank you

00:43:09,040 --> 00:43:17,839

YouTube URL: https://www.youtube.com/watch?v=jLu4EdgiDCQ


