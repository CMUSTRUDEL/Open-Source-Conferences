Title: The Power of JavaScript Generators - Anjana Vakil | JSHeroes Meetups
Publication date: 2020-10-13
Playlist: JSHeroes Meetups 2020
Description: 
	Generators have been around in JavaScript since ES2015, yet remain largely ignored by many JS devs, who don't see why or how they'd use them in their day-to-day work.
But generators - which we can think of as special functions whose execution can be "paused" and resumed later on - are actually extremely powerful tools for producing and consuming series of data. That makes them perfect for implementing lazy sequences, custom iterables, animation, even the convenient asynchronous programming we now enjoy with "await"!

In this talk we'll dive into how JS generators work, what makes them so powerful, and why you should care.

About Anjana

Anjana suffers from a chronic case of curiosity, which led her from philosophy to English teaching to computational linguistics to software development. As a developer advocate at Observable, she codes & streams from her home base in San Francisco.

In the before-times, you could often find her speaking at events around the world; in the now-times it's around the web. A lifelong learner, she loves to share the joy of programming and advocate for a more diverse, equitable, and ethical tech industry. Ask her about the Recurse Center & Outreachy, she's an alumna of both!
Captions: 
	00:00:03,600 --> 00:00:09,040
welcome everyone

00:00:05,279 --> 00:00:10,719
to the second actually meet up in

00:00:09,040 --> 00:00:12,880
september right the second online j

00:00:10,719 --> 00:00:16,720
serial meetup in september

00:00:12,880 --> 00:00:19,840
um we have a very special guest from

00:00:16,720 --> 00:00:22,000
across the ocean this evening

00:00:19,840 --> 00:00:24,000
which we want to thank very much for

00:00:22,000 --> 00:00:27,199
taking the time

00:00:24,000 --> 00:00:28,080
um so uh for those of you who don't know

00:00:27,199 --> 00:00:31,599
her anjana

00:00:28,080 --> 00:00:34,640
is one of our old friends of js heroes

00:00:31,599 --> 00:00:38,160
she was a speaker at the conference

00:00:34,640 --> 00:00:40,879
in 2018 and in 2019

00:00:38,160 --> 00:00:43,520
uh and just as a little insight her

00:00:40,879 --> 00:00:47,039
talks were usually among the top rated

00:00:43,520 --> 00:00:49,680
at each year the event so you're in for

00:00:47,039 --> 00:00:52,640
a treat this evening i'm pretty sure

00:00:49,680 --> 00:00:54,160
uh she i know that she's super

00:00:52,640 --> 00:00:56,840
passionate about

00:00:54,160 --> 00:00:58,719
javascript and about the language itself

00:00:56,840 --> 00:01:01,440
so

00:00:58,719 --> 00:01:04,960
i'm pretty sure this as always this

00:01:01,440 --> 00:01:08,960
project presentation will rock

00:01:04,960 --> 00:01:10,400
so um yeah i don't think i have anything

00:01:08,960 --> 00:01:13,840
else to add

00:01:10,400 --> 00:01:15,680
whenever you are ready uh you are free

00:01:13,840 --> 00:01:19,200
to take the stage

00:01:15,680 --> 00:01:21,439
hi hi everybody it's so nice to be

00:01:19,200 --> 00:01:23,360
here with you i mean we are as with each

00:01:21,439 --> 00:01:26,400
other as we possibly could be right so

00:01:23,360 --> 00:01:27,840
um i was really really sad this year as

00:01:26,400 --> 00:01:30,479
i said on twitter to

00:01:27,840 --> 00:01:32,079
miss my annual trip to cluj i've been go

00:01:30,479 --> 00:01:32,479
i've been like regular for the last few

00:01:32,079 --> 00:01:34,720
years

00:01:32,479 --> 00:01:35,680
planning to go back again this year and

00:01:34,720 --> 00:01:38,240
and then the world

00:01:35,680 --> 00:01:39,920
had other plans so this is this is um

00:01:38,240 --> 00:01:42,880
it's really nice to see you all

00:01:39,920 --> 00:01:43,840
um virtually if not in person and hope

00:01:42,880 --> 00:01:46,479
to be back

00:01:43,840 --> 00:01:47,360
include sometime in the foreseeable

00:01:46,479 --> 00:01:49,759
future

00:01:47,360 --> 00:01:51,520
fingers crossed we all get to go back to

00:01:49,759 --> 00:01:54,399
traveling and seeing each other

00:01:51,520 --> 00:01:56,159
um but yes my name is anjana vacheel i

00:01:54,399 --> 00:01:57,040
am coming at you from san francisco

00:01:56,159 --> 00:02:00,960
california

00:01:57,040 --> 00:02:02,240
today and uh some of you may know it's a

00:02:00,960 --> 00:02:05,439
turbulent time

00:02:02,240 --> 00:02:07,040
over here so if i'm a little off

00:02:05,439 --> 00:02:08,720
or if we're all a little off i think

00:02:07,040 --> 00:02:09,759
that's just kind of par for the course

00:02:08,720 --> 00:02:12,080
these days yeah

00:02:09,759 --> 00:02:12,879
um but uh let's just let's just all be

00:02:12,080 --> 00:02:15,040
really

00:02:12,879 --> 00:02:16,560
um like like uh was said in the

00:02:15,040 --> 00:02:18,400
introduction you know everybody is just

00:02:16,560 --> 00:02:20,000
here to like learn together and share

00:02:18,400 --> 00:02:21,280
their knowledge that's all i'm intending

00:02:20,000 --> 00:02:22,800
to do today is like

00:02:21,280 --> 00:02:24,319
show you a couple of the cool things

00:02:22,800 --> 00:02:27,200
i've learned about generators

00:02:24,319 --> 00:02:28,319
and it's a weird time in the world so

00:02:27,200 --> 00:02:30,160
let's all just like

00:02:28,319 --> 00:02:31,599
try to bring that compassion and that

00:02:30,160 --> 00:02:32,959
empathy um

00:02:31,599 --> 00:02:34,720
to these kind of meetups it's really

00:02:32,959 --> 00:02:36,560
nice to like see see

00:02:34,720 --> 00:02:38,160
some of you and know that the rest of

00:02:36,560 --> 00:02:39,920
you are hanging out here

00:02:38,160 --> 00:02:41,440
we have a moment to think about

00:02:39,920 --> 00:02:42,480
javascript instead of the rest of the

00:02:41,440 --> 00:02:45,440
world

00:02:42,480 --> 00:02:47,360
so um i'm going to share my screen i

00:02:45,440 --> 00:02:49,680
before i do that i just want to say that

00:02:47,360 --> 00:02:51,680
i have a lot of motion in my slides

00:02:49,680 --> 00:02:54,879
today so if anybody has

00:02:51,680 --> 00:02:56,879
motion sensitivities um

00:02:54,879 --> 00:02:58,720
and this might be problematic for like

00:02:56,879 --> 00:03:00,800
uh maybe you can send me a

00:02:58,720 --> 00:03:02,800
message uh privately and zoom or what

00:03:00,800 --> 00:03:04,800
have you and i can try to adjust but

00:03:02,800 --> 00:03:06,560
um just as a warning there is like gonna

00:03:04,800 --> 00:03:09,040
be animation and motion

00:03:06,560 --> 00:03:11,360
so let me try to share my screen and

00:03:09,040 --> 00:03:13,519
you'll see what i'm talking about

00:03:11,360 --> 00:03:15,440
okay now when i did this before it

00:03:13,519 --> 00:03:18,080
crashed my entire computer so let's hope

00:03:15,440 --> 00:03:19,280
that that doesn't happen right now all

00:03:18,080 --> 00:03:21,200
right

00:03:19,280 --> 00:03:23,120
so far so good as far as i can tell we

00:03:21,200 --> 00:03:26,319
looking good all right great

00:03:23,120 --> 00:03:29,680
so um i want to talk to you today about

00:03:26,319 --> 00:03:33,200
generators in javascript um i

00:03:29,680 --> 00:03:34,799
am a javascript programmer among other

00:03:33,200 --> 00:03:37,519
things but actually my first

00:03:34,799 --> 00:03:38,400
language was python and python also has

00:03:37,519 --> 00:03:40,080
generators

00:03:38,400 --> 00:03:41,760
and so when generators came to

00:03:40,080 --> 00:03:44,480
javascript in

00:03:41,760 --> 00:03:46,000
es2015 and es6 i was actually really

00:03:44,480 --> 00:03:48,640
excited because i thought generators

00:03:46,000 --> 00:03:50,400
were really cool from my python days

00:03:48,640 --> 00:03:52,239
um and so what i want to do today is

00:03:50,400 --> 00:03:53,840
just tell you a couple of cool things

00:03:52,239 --> 00:03:54,640
that i think are cool about generators

00:03:53,840 --> 00:03:57,920
and

00:03:54,640 --> 00:03:59,920
uh and um all of this is going to be

00:03:57,920 --> 00:04:01,360
uh posted online and i'm realizing

00:03:59,920 --> 00:04:03,040
actually right now that it's not

00:04:01,360 --> 00:04:04,480
accessible yet but by the time this

00:04:03,040 --> 00:04:06,640
presentation is over you will be able to

00:04:04,480 --> 00:04:09,040
find these slides at that url

00:04:06,640 --> 00:04:11,280
um underneath my name and you can find

00:04:09,040 --> 00:04:13,519
me on twitter at antenavacil

00:04:11,280 --> 00:04:15,680
so yeah i am a developer advocate at a

00:04:13,519 --> 00:04:18,479
place called observable hq

00:04:15,680 --> 00:04:19,359
we are based virtually in san francisco

00:04:18,479 --> 00:04:22,079
and

00:04:19,359 --> 00:04:23,360
we make interactive visual computing

00:04:22,079 --> 00:04:24,880
notebooks that run in the browser and

00:04:23,360 --> 00:04:25,840
that's what i'm presenting to you today

00:04:24,880 --> 00:04:26,880
so we're going to talk about that a

00:04:25,840 --> 00:04:30,080
little bit later

00:04:26,880 --> 00:04:32,320
but uh that's me and most importantly

00:04:30,080 --> 00:04:33,919
i like to nerd out about weird

00:04:32,320 --> 00:04:36,560
programming things that i think

00:04:33,919 --> 00:04:37,840
are cool and i think generators are

00:04:36,560 --> 00:04:39,440
super cool

00:04:37,840 --> 00:04:40,960
um and hopefully by the time we're done

00:04:39,440 --> 00:04:42,080
today i will have convinced you of the

00:04:40,960 --> 00:04:44,320
same

00:04:42,080 --> 00:04:46,080
um but i also think that generators in

00:04:44,320 --> 00:04:48,000
javascript are like

00:04:46,080 --> 00:04:50,240
really underappreciated i don't think

00:04:48,000 --> 00:04:52,400
they get the love that they deserve

00:04:50,240 --> 00:04:54,639
um which again is why i want to talk to

00:04:52,400 --> 00:04:55,199
you about this today um because i think

00:04:54,639 --> 00:04:56,960
that

00:04:55,199 --> 00:04:59,360
you know generators have been around in

00:04:56,960 --> 00:05:01,600
javascript for what five years now and

00:04:59,360 --> 00:05:02,880
i'm not sure that most javascript devs

00:05:01,600 --> 00:05:04,479
like love them

00:05:02,880 --> 00:05:06,240
as much as i think we all should love

00:05:04,479 --> 00:05:07,360
them so that's why i'm putting this talk

00:05:06,240 --> 00:05:09,280
together and that's why we're

00:05:07,360 --> 00:05:10,800
talking about this today um and the

00:05:09,280 --> 00:05:12,800
thing is that

00:05:10,800 --> 00:05:14,320
generators contrary to some popular

00:05:12,800 --> 00:05:16,240
beliefs are actually like

00:05:14,320 --> 00:05:17,360
useful pragmatically for certain

00:05:16,240 --> 00:05:19,360
day-to-day things and we're going to

00:05:17,360 --> 00:05:22,400
talk about a few use cases for them

00:05:19,360 --> 00:05:22,800
but if you ask me more importantly they

00:05:22,400 --> 00:05:24,720
are

00:05:22,800 --> 00:05:26,880
really great learning tools they're

00:05:24,720 --> 00:05:28,639
really great teachers um and i've been

00:05:26,880 --> 00:05:31,840
learning a lot about some

00:05:28,639 --> 00:05:33,680
like core computer science concepts

00:05:31,840 --> 00:05:35,520
uh i don't have a background in computer

00:05:33,680 --> 00:05:37,360
science i don't know about the rest of

00:05:35,520 --> 00:05:40,400
y'all if anybody wants to share

00:05:37,360 --> 00:05:41,919
in chat um but i i think a lot of us in

00:05:40,400 --> 00:05:42,560
the web community and the javascript

00:05:41,919 --> 00:05:44,639
community

00:05:42,560 --> 00:05:46,479
might have non-traditional backgrounds

00:05:44,639 --> 00:05:49,039
that might not have done like a

00:05:46,479 --> 00:05:50,639
a full-length uh college degree uh in

00:05:49,039 --> 00:05:52,639
computer science and so

00:05:50,639 --> 00:05:54,160
if you're like me you're trying to kind

00:05:52,639 --> 00:05:56,560
of play catch up all the time and learn

00:05:54,160 --> 00:05:58,160
some of these fundamental concepts in cs

00:05:56,560 --> 00:06:00,319
and i think generators are actually

00:05:58,160 --> 00:06:03,600
really great windows into a few

00:06:00,319 --> 00:06:05,039
um tricky things in cs so that's uh what

00:06:03,600 --> 00:06:06,479
i'm hoping we're gonna we're gonna

00:06:05,039 --> 00:06:09,039
start to expand our minds with a little

00:06:06,479 --> 00:06:11,680
bit by the end of the talk today

00:06:09,039 --> 00:06:12,560
um and really at the at the at the end

00:06:11,680 --> 00:06:14,000
of the day

00:06:12,560 --> 00:06:16,400
i don't know if anybody saw my lambda

00:06:14,000 --> 00:06:17,440
calculus talk from uh from was it last

00:06:16,400 --> 00:06:19,759
year two years ago

00:06:17,440 --> 00:06:20,479
um but uh kind of like the lambda

00:06:19,759 --> 00:06:22,080
calculus

00:06:20,479 --> 00:06:24,080
i think that generators are one of these

00:06:22,080 --> 00:06:25,840
kind of mind-blowing concepts that they

00:06:24,080 --> 00:06:27,680
seem really simple on the surface

00:06:25,840 --> 00:06:29,120
but once you get into the nitty-gritty

00:06:27,680 --> 00:06:29,919
of like what you can actually do with

00:06:29,120 --> 00:06:31,680
them

00:06:29,919 --> 00:06:33,520
it kind of opens up all these rabbit

00:06:31,680 --> 00:06:35,680
holes all these like wormholes

00:06:33,520 --> 00:06:36,800
into just like stuff that you should not

00:06:35,680 --> 00:06:39,280
be able to do

00:06:36,800 --> 00:06:40,800
with a tiny little generator function so

00:06:39,280 --> 00:06:42,319
um we'll see if we have time to talk

00:06:40,800 --> 00:06:44,080
about some of the ways you can

00:06:42,319 --> 00:06:45,840
you can blow your mind instead of your

00:06:44,080 --> 00:06:48,560
call stack anywho

00:06:45,840 --> 00:06:50,080
all right so but first um the basics of

00:06:48,560 --> 00:06:51,680
generators uh

00:06:50,080 --> 00:06:53,680
i'm not sure and it's a little hard

00:06:51,680 --> 00:06:54,800
since i can't see all your faces and ask

00:06:53,680 --> 00:06:56,080
you all

00:06:54,800 --> 00:06:57,360
uh whether or not people have

00:06:56,080 --> 00:06:58,639
encountered generators before in

00:06:57,360 --> 00:06:59,599
javascript so i'm just going to go over

00:06:58,639 --> 00:07:02,720
some really

00:06:59,599 --> 00:07:04,080
basic syntax okay so a generator in

00:07:02,720 --> 00:07:06,000
javascript is a type of

00:07:04,080 --> 00:07:08,080
iterator well what is an iterator well

00:07:06,000 --> 00:07:11,759
an iterator is just something that

00:07:08,080 --> 00:07:15,520
has a method called next which

00:07:11,759 --> 00:07:17,840
returns a an object of the shape

00:07:15,520 --> 00:07:19,520
that it has a value property which might

00:07:17,840 --> 00:07:20,479
have some value that you're using or

00:07:19,520 --> 00:07:23,039
might be undefined

00:07:20,479 --> 00:07:24,000
and then it has a done property which

00:07:23,039 --> 00:07:27,199
might be

00:07:24,000 --> 00:07:28,800
um which is a boolean true or false

00:07:27,199 --> 00:07:31,120
so i'm trying to get my highlighting

00:07:28,800 --> 00:07:32,080
here so any iterator and it doesn't have

00:07:31,120 --> 00:07:33,680
to be a java

00:07:32,080 --> 00:07:35,440
a generator there are other types of

00:07:33,680 --> 00:07:37,680
iterators that you might encounter

00:07:35,440 --> 00:07:39,440
when you call the next method on it you

00:07:37,680 --> 00:07:40,720
expect to get something out that looks

00:07:39,440 --> 00:07:43,039
like this

00:07:40,720 --> 00:07:43,759
and as long as the iterator is still

00:07:43,039 --> 00:07:46,479
running

00:07:43,759 --> 00:07:48,080
it will be churning out values and

00:07:46,479 --> 00:07:51,440
telling you that it is not done

00:07:48,080 --> 00:07:55,199
done is false and then eventually

00:07:51,440 --> 00:07:57,360
maybe the iterator will um at some point

00:07:55,199 --> 00:07:58,800
tell you actually no you know what on

00:07:57,360 --> 00:08:01,520
that last call of next

00:07:58,800 --> 00:08:03,120
now i'm done and it might pass you um an

00:08:01,520 --> 00:08:03,520
undefined value of that and from that

00:08:03,120 --> 00:08:06,639
point

00:08:03,520 --> 00:08:08,080
on any additional calls you make to next

00:08:06,639 --> 00:08:09,680
to the next method on the iterator will

00:08:08,080 --> 00:08:11,919
continue to return this

00:08:09,680 --> 00:08:13,440
done true object it's like the iterator

00:08:11,919 --> 00:08:15,680
is over it is done

00:08:13,440 --> 00:08:17,599
there's nothing more to get from it so

00:08:15,680 --> 00:08:19,360
essentially this next method is what we

00:08:17,599 --> 00:08:22,720
can use in javascript to pull

00:08:19,360 --> 00:08:27,039
values out of an iterator okay

00:08:22,720 --> 00:08:28,000
um now there are other types of

00:08:27,039 --> 00:08:28,800
iterators which we're not going to talk

00:08:28,000 --> 00:08:31,840
about but but

00:08:28,800 --> 00:08:34,320
generators are one way to like get

00:08:31,840 --> 00:08:35,760
an iterator and the way that this works

00:08:34,320 --> 00:08:39,440
is we have a new keyword

00:08:35,760 --> 00:08:42,159
since uh since es6 function star

00:08:39,440 --> 00:08:43,519
which defines a generator function and

00:08:42,159 --> 00:08:43,919
this is a little bit of terminology but

00:08:43,519 --> 00:08:46,959
like

00:08:43,919 --> 00:08:48,240
a generator function here this is a

00:08:46,959 --> 00:08:50,240
really simple one

00:08:48,240 --> 00:08:51,839
um you can often recognize them well you

00:08:50,240 --> 00:08:54,080
can recognize them by function star

00:08:51,839 --> 00:08:55,200
and often by there's a yield keyword in

00:08:54,080 --> 00:08:56,320
there which we're going to talk about a

00:08:55,200 --> 00:08:58,640
ton

00:08:56,320 --> 00:09:00,640
the generator function when you call it

00:08:58,640 --> 00:09:03,040
returns a generator object which

00:09:00,640 --> 00:09:06,160
javascript knows is a capital g

00:09:03,040 --> 00:09:08,640
generator and that object is

00:09:06,160 --> 00:09:09,680
the iterator thing that you can call

00:09:08,640 --> 00:09:13,519
next on

00:09:09,680 --> 00:09:16,959
to get values out so in this case um

00:09:13,519 --> 00:09:20,160
the yield keyword is

00:09:16,959 --> 00:09:22,080
essentially telling the

00:09:20,160 --> 00:09:23,920
caller whoever's calling into this

00:09:22,080 --> 00:09:27,040
generator with next

00:09:23,920 --> 00:09:28,080
when uh like it's it's putting out a

00:09:27,040 --> 00:09:29,920
value

00:09:28,080 --> 00:09:31,600
that is going to show up in the next

00:09:29,920 --> 00:09:33,360
call to next so in this case we just

00:09:31,600 --> 00:09:35,920
have we're just yielding one time

00:09:33,360 --> 00:09:37,040
we're yielding one value hello world so

00:09:35,920 --> 00:09:39,200
the first time i call

00:09:37,040 --> 00:09:40,959
next that is the first thing i get i get

00:09:39,200 --> 00:09:43,440
this value hello world and then

00:09:40,959 --> 00:09:45,120
done false and this object is just

00:09:43,440 --> 00:09:46,640
created for me magically because i have

00:09:45,120 --> 00:09:48,160
this generator which i created with

00:09:46,640 --> 00:09:50,000
function star

00:09:48,160 --> 00:09:51,680
and then since that's the end of the

00:09:50,000 --> 00:09:53,760
function there's nothing else there i

00:09:51,680 --> 00:09:56,000
have an implicit return basically

00:09:53,760 --> 00:09:57,839
when i call next again i'm gonna get

00:09:56,000 --> 00:09:59,600
that done true

00:09:57,839 --> 00:10:01,200
okay so hopefully everybody's with me so

00:09:59,600 --> 00:10:05,120
far i can't see you all

00:10:01,200 --> 00:10:06,959
so you're gonna have to thanks alex

00:10:05,120 --> 00:10:08,560
um okay so these are just like these are

00:10:06,959 --> 00:10:09,600
the basic mechanics of how we work with

00:10:08,560 --> 00:10:12,880
generators

00:10:09,600 --> 00:10:15,120
um okay so

00:10:12,880 --> 00:10:16,640
this uh just to drill back into this

00:10:15,120 --> 00:10:19,200
syntax a little bit

00:10:16,640 --> 00:10:22,000
when i call next i can think of that as

00:10:19,200 --> 00:10:24,720
advancing a generator

00:10:22,000 --> 00:10:25,519
and when i see yield in the body of the

00:10:24,720 --> 00:10:28,800
generator

00:10:25,519 --> 00:10:31,760
that's when i'm going to pause basically

00:10:28,800 --> 00:10:33,040
and spit out that next value so here

00:10:31,760 --> 00:10:34,959
i've got a little generator that i'm

00:10:33,040 --> 00:10:38,079
calling logarator that's just being very

00:10:34,959 --> 00:10:40,240
vocal about what it's doing um when i

00:10:38,079 --> 00:10:42,240
instantiate that generator object by

00:10:40,240 --> 00:10:43,680
calling logerator i get this this uh

00:10:42,240 --> 00:10:47,600
generator called logger

00:10:43,680 --> 00:10:50,160
when i call next on that

00:10:47,600 --> 00:10:50,959
that is going to advance the body of

00:10:50,160 --> 00:10:54,079
this

00:10:50,959 --> 00:10:56,480
generator function till the first yield

00:10:54,079 --> 00:10:57,120
so when i call the first next it's going

00:10:56,480 --> 00:11:00,079
to run

00:10:57,120 --> 00:11:00,880
from the beginning until that yield

00:11:00,079 --> 00:11:03,519
statement

00:11:00,880 --> 00:11:04,640
so what i see in my log is i'm going to

00:11:03,519 --> 00:11:06,880
see running

00:11:04,640 --> 00:11:08,399
and then the output of that yield is

00:11:06,880 --> 00:11:09,839
going to be this object with value

00:11:08,399 --> 00:11:12,880
paused

00:11:09,839 --> 00:11:14,079
cool so what at this point the generator

00:11:12,880 --> 00:11:17,279
is basically paused

00:11:14,079 --> 00:11:20,480
right here right on the first yield when

00:11:17,279 --> 00:11:21,279
when somebody calls next again on the

00:11:20,480 --> 00:11:23,600
generator

00:11:21,279 --> 00:11:25,200
it's going to resume where it left off

00:11:23,600 --> 00:11:28,079
and it's going to run

00:11:25,200 --> 00:11:30,320
whatever is next until the next yield or

00:11:28,079 --> 00:11:32,079
in this case until the return

00:11:30,320 --> 00:11:33,839
so when i call next again i'm going to

00:11:32,079 --> 00:11:35,279
see that running again logged out

00:11:33,839 --> 00:11:37,279
and then the next value that i get is

00:11:35,279 --> 00:11:40,640
going to be this return value

00:11:37,279 --> 00:11:43,200
which allows me to basically tell

00:11:40,640 --> 00:11:44,720
whoever's calling that the that the

00:11:43,200 --> 00:11:46,880
generator is done

00:11:44,720 --> 00:11:48,079
and i can optionally return a value

00:11:46,880 --> 00:11:50,560
although those aren't often

00:11:48,079 --> 00:11:52,320
used very much um but basically that

00:11:50,560 --> 00:11:54,079
return and remember there's an implicit

00:11:52,320 --> 00:11:55,360
return if you don't have one that return

00:11:54,079 --> 00:11:58,079
is what stops

00:11:55,360 --> 00:12:00,240
um stops anything that's looking at this

00:11:58,079 --> 00:12:03,360
as an iterator

00:12:00,240 --> 00:12:06,000
okay so hopefully we've got the

00:12:03,360 --> 00:12:07,040
mechanics of generators now down um it

00:12:06,000 --> 00:12:10,320
gets weirder but

00:12:07,040 --> 00:12:12,079
let's take a moment to um review

00:12:10,320 --> 00:12:13,839
what like how we could use these

00:12:12,079 --> 00:12:16,639
generators or any

00:12:13,839 --> 00:12:17,440
anything that's iterable in javascript

00:12:16,639 --> 00:12:20,800
we can use

00:12:17,440 --> 00:12:22,000
in a for loop or uh something like

00:12:20,800 --> 00:12:23,600
spread syntax

00:12:22,000 --> 00:12:26,240
or a few other places where javascript

00:12:23,600 --> 00:12:29,120
knows to expect an iterable

00:12:26,240 --> 00:12:31,360
um and then a generator is cool because

00:12:29,120 --> 00:12:34,480
it not only is it an iterator

00:12:31,360 --> 00:12:36,800
but it is also iterable because

00:12:34,480 --> 00:12:39,120
it's kind of giving us a succession of

00:12:36,800 --> 00:12:41,440
values so here i have a little generator

00:12:39,120 --> 00:12:43,519
function that just yields three values a

00:12:41,440 --> 00:12:46,160
b and c one after the other

00:12:43,519 --> 00:12:48,320
i can use that in a for loop like this

00:12:46,160 --> 00:12:49,519
when i instantiate the generator i get

00:12:48,320 --> 00:12:51,920
something iterable

00:12:49,519 --> 00:12:53,440
that i can pull each letter out of so if

00:12:51,920 --> 00:12:55,040
i log those letters

00:12:53,440 --> 00:12:56,880
by after converting them to uppercase

00:12:55,040 --> 00:12:59,279
i'll see a b c

00:12:56,880 --> 00:13:00,320
and i can also spread that generator

00:12:59,279 --> 00:13:01,760
object

00:13:00,320 --> 00:13:03,760
and note those parentheses i do need to

00:13:01,760 --> 00:13:04,639
like instantiate the generator i can't

00:13:03,760 --> 00:13:07,120
spread the

00:13:04,639 --> 00:13:09,040
generator function itself i have to call

00:13:07,120 --> 00:13:09,440
it to make a generator object and then i

00:13:09,040 --> 00:13:11,680
can

00:13:09,440 --> 00:13:13,519
iterate over that because it's iterable

00:13:11,680 --> 00:13:14,240
and using the spread syntax to pull out

00:13:13,519 --> 00:13:18,399
an array

00:13:14,240 --> 00:13:21,120
or using a for loop okay

00:13:18,399 --> 00:13:22,800
so generators are both iterators and

00:13:21,120 --> 00:13:26,079
iterable

00:13:22,800 --> 00:13:26,959
uh and you might be thinking like okay

00:13:26,079 --> 00:13:30,079
but why

00:13:26,959 --> 00:13:31,040
would i need to create a generator to

00:13:30,079 --> 00:13:33,839
yield

00:13:31,040 --> 00:13:34,880
a and b and c instead of just like

00:13:33,839 --> 00:13:37,279
making an array

00:13:34,880 --> 00:13:38,800
for the first place yes well okay this

00:13:37,279 --> 00:13:40,160
is a contrived example you probably

00:13:38,800 --> 00:13:41,360
wouldn't write a generator like this

00:13:40,160 --> 00:13:43,600
abc's one

00:13:41,360 --> 00:13:45,199
but there are some really cool things

00:13:43,600 --> 00:13:47,279
that generators can do

00:13:45,199 --> 00:13:48,240
that just a simple array or sometimes

00:13:47,279 --> 00:13:51,279
even

00:13:48,240 --> 00:13:51,920
a non-generator iterator can't really

00:13:51,279 --> 00:13:52,959
achieve

00:13:51,920 --> 00:13:55,279
so let's take a look at some of the

00:13:52,959 --> 00:13:58,800
things that generators can do

00:13:55,279 --> 00:14:01,519
when it comes to this iteration

00:13:58,800 --> 00:14:03,360
so another thing that came along with

00:14:01,519 --> 00:14:05,920
generators and iterators

00:14:03,360 --> 00:14:08,480
was the the notion of implementing your

00:14:05,920 --> 00:14:11,519
own iterables

00:14:08,480 --> 00:14:14,639
in javascript now since es6 you can

00:14:11,519 --> 00:14:15,199
implement any object that you create can

00:14:14,639 --> 00:14:16,720
become an

00:14:15,199 --> 00:14:18,720
iterable meaning something that you can

00:14:16,720 --> 00:14:19,279
use in a for loop or in the spread

00:14:18,720 --> 00:14:22,720
operator

00:14:19,279 --> 00:14:25,920
or so on if you implement this

00:14:22,720 --> 00:14:29,519
at iterator this symbol iterator

00:14:25,920 --> 00:14:30,880
method um and you can the way this works

00:14:29,519 --> 00:14:32,160
and you can see in this little tiny

00:14:30,880 --> 00:14:33,760
example that i've got here is

00:14:32,160 --> 00:14:35,600
let's say i have some object this one

00:14:33,760 --> 00:14:36,480
i'm going to call card deck has a couple

00:14:35,600 --> 00:14:38,480
of properties

00:14:36,480 --> 00:14:40,160
uh it has a suits array and a court

00:14:38,480 --> 00:14:42,560
array that represent the different types

00:14:40,160 --> 00:14:46,000
of cards that might be in it

00:14:42,560 --> 00:14:47,760
i can write a generator function

00:14:46,000 --> 00:14:49,519
um this is just an anonymous generator

00:14:47,760 --> 00:14:52,320
function function star here

00:14:49,519 --> 00:14:54,639
which gives me basically a generator

00:14:52,320 --> 00:14:56,560
that will spit out for each suit it will

00:14:54,639 --> 00:14:57,040
spit out all of the cards from two to

00:14:56,560 --> 00:14:58,959
ten

00:14:57,040 --> 00:15:02,079
and then all of the court cards and it

00:14:58,959 --> 00:15:04,240
will yield each of those successively

00:15:02,079 --> 00:15:06,000
okay so i'm kind of i've got this i've

00:15:04,240 --> 00:15:08,480
got a generator that's generating

00:15:06,000 --> 00:15:09,120
all of the cards in a deck here if i

00:15:08,480 --> 00:15:12,320
assign

00:15:09,120 --> 00:15:14,560
that to the symbol iterator property

00:15:12,320 --> 00:15:14,880
which this is like a special the symbols

00:15:14,560 --> 00:15:16,880
in

00:15:14,880 --> 00:15:18,160
in javascript are these like this way of

00:15:16,880 --> 00:15:20,480
accessing this like

00:15:18,160 --> 00:15:21,600
very special property which then

00:15:20,480 --> 00:15:24,720
javascript

00:15:21,600 --> 00:15:25,279
runtime like knows how to use in for

00:15:24,720 --> 00:15:27,760
loops and

00:15:25,279 --> 00:15:29,279
in the spread operator so by assigning a

00:15:27,760 --> 00:15:30,800
generator function

00:15:29,279 --> 00:15:32,160
and it doesn't have to be a generator

00:15:30,800 --> 00:15:33,920
function it could also be some other

00:15:32,160 --> 00:15:35,920
kind of iterator but generator functions

00:15:33,920 --> 00:15:37,279
are really convenient ways for writing

00:15:35,920 --> 00:15:39,199
these iterators

00:15:37,279 --> 00:15:40,399
by assigning an iterator like that to

00:15:39,199 --> 00:15:43,519
simple iterator

00:15:40,399 --> 00:15:45,519
i get an iterable object that again i

00:15:43,519 --> 00:15:46,560
can use in for loops i can use in the

00:15:45,519 --> 00:15:48,320
spread operator

00:15:46,560 --> 00:15:50,560
and in this case if i spread it out if i

00:15:48,320 --> 00:15:52,399
spread out my card deck object i get

00:15:50,560 --> 00:15:54,320
this deck of cards with all of the

00:15:52,399 --> 00:15:57,360
different um card

00:15:54,320 --> 00:16:00,399
and suit and card number combos that i

00:15:57,360 --> 00:16:02,079
need so this is one useful application

00:16:00,399 --> 00:16:04,000
of generators is like they're very handy

00:16:02,079 --> 00:16:05,839
for implementing iterable objects if you

00:16:04,000 --> 00:16:07,120
have like a special type of collection

00:16:05,839 --> 00:16:08,720
that you're working with and you want to

00:16:07,120 --> 00:16:10,160
be able to use it in for loops they're

00:16:08,720 --> 00:16:12,959
great for that

00:16:10,160 --> 00:16:14,399
and if anybody saw my talk from i think

00:16:12,959 --> 00:16:17,519
it was 2018

00:16:14,399 --> 00:16:19,440
um you might remember me talking about

00:16:17,519 --> 00:16:20,639
this about how you can actually

00:16:19,440 --> 00:16:22,639
something that's really cool with

00:16:20,639 --> 00:16:23,680
generators is you can write kind of

00:16:22,639 --> 00:16:26,959
recursive

00:16:23,680 --> 00:16:29,040
iterators so for example um and and

00:16:26,959 --> 00:16:30,480
i go into this in way more detail in my

00:16:29,040 --> 00:16:31,920
talk from a couple years ago so you can

00:16:30,480 --> 00:16:34,720
check out that video

00:16:31,920 --> 00:16:36,079
um on the js here's youtube channel but

00:16:34,720 --> 00:16:37,040
here i've got a little function that's

00:16:36,079 --> 00:16:39,759
going to spit out

00:16:37,040 --> 00:16:41,199
uh nodes for a tree so i'm i'm give this

00:16:39,759 --> 00:16:42,160
function a value and it's going to give

00:16:41,199 --> 00:16:45,839
me a node

00:16:42,160 --> 00:16:48,639
that i can use to make like a a

00:16:45,839 --> 00:16:50,079
two branch a binary tree holding a bunch

00:16:48,639 --> 00:16:51,440
of different values

00:16:50,079 --> 00:16:53,120
so the way that works is i've got a

00:16:51,440 --> 00:16:55,279
little object that represents my node it

00:16:53,120 --> 00:16:58,560
has a value property

00:16:55,279 --> 00:17:00,639
and um it's also optionally going to

00:16:58,560 --> 00:17:02,000
have a left child property which is

00:17:00,639 --> 00:17:03,519
itself a node

00:17:02,000 --> 00:17:05,120
and it's optionally going to have a

00:17:03,519 --> 00:17:07,919
right child property which is

00:17:05,120 --> 00:17:09,039
again another of the same type of node

00:17:07,919 --> 00:17:12,640
so what i've got now

00:17:09,039 --> 00:17:16,000
is i've got a generator function that is

00:17:12,640 --> 00:17:18,240
essentially recursively doing a depth

00:17:16,000 --> 00:17:21,039
first traversal of

00:17:18,240 --> 00:17:21,679
a tree made up of these nodes where it's

00:17:21,039 --> 00:17:24,640
first going to

00:17:21,679 --> 00:17:25,679
yield the value of this node and then

00:17:24,640 --> 00:17:28,400
it's going to

00:17:25,679 --> 00:17:30,320
recursively yield everything out from

00:17:28,400 --> 00:17:33,280
the left and right children

00:17:30,320 --> 00:17:34,160
using this yield star operator what

00:17:33,280 --> 00:17:36,559
yield star

00:17:34,160 --> 00:17:39,280
does is you can think of it as kind of

00:17:36,559 --> 00:17:42,480
like a for loop combined with yield

00:17:39,280 --> 00:17:45,440
it's it takes expect something iterable

00:17:42,480 --> 00:17:46,160
after it and it's going to successively

00:17:45,440 --> 00:17:49,280
yield

00:17:46,160 --> 00:17:52,480
each value from that iterator

00:17:49,280 --> 00:17:56,000
from that iterable one by one so

00:17:52,480 --> 00:17:58,320
um in this case if the left child exists

00:17:56,000 --> 00:18:00,640
it's going to be another iterable tree

00:17:58,320 --> 00:18:04,400
node and i'm going to basically

00:18:00,640 --> 00:18:07,840
call into its iterator uh

00:18:04,400 --> 00:18:08,799
property method to recursively yield out

00:18:07,840 --> 00:18:10,799
all the values

00:18:08,799 --> 00:18:12,320
so if i have a little function here make

00:18:10,799 --> 00:18:14,160
tree which is going to take in this type

00:18:12,320 --> 00:18:14,960
of tree and sort of set up a little tree

00:18:14,160 --> 00:18:17,280
with

00:18:14,960 --> 00:18:19,280
many different values i can then use

00:18:17,280 --> 00:18:22,080
that tree in a for loop

00:18:19,280 --> 00:18:24,559
and i don't have to write my own code to

00:18:22,080 --> 00:18:26,320
traverse that tree

00:18:24,559 --> 00:18:28,160
so yeah if that didn't make sense or was

00:18:26,320 --> 00:18:29,840
really fast don't worry because i have a

00:18:28,160 --> 00:18:31,600
whole other talk where about half the

00:18:29,840 --> 00:18:33,360
talk is dedicated to going into this in

00:18:31,600 --> 00:18:36,080
more detail suffice it to say

00:18:33,360 --> 00:18:38,160
what i'm doing here is using a recursive

00:18:36,080 --> 00:18:39,679
pattern a recursive paradigm

00:18:38,160 --> 00:18:41,440
for thinking about how i want to do this

00:18:39,679 --> 00:18:44,160
traversal traversal and i'm

00:18:41,440 --> 00:18:48,160
implementing it as a kind of recursive

00:18:44,160 --> 00:18:48,160
generator using this yield star

00:18:48,240 --> 00:18:52,480
so that is another cool thing that an

00:18:50,080 --> 00:18:55,520
array can't do

00:18:52,480 --> 00:18:57,600
silly arrays generators are way superior

00:18:55,520 --> 00:18:58,559
just kidding but actually more cool if

00:18:57,600 --> 00:19:02,240
you ask me

00:18:58,559 --> 00:19:03,280
is that unlike arrays uh generators can

00:19:02,240 --> 00:19:05,760
give me

00:19:03,280 --> 00:19:06,720
lazy evaluated sequences which means i

00:19:05,760 --> 00:19:09,440
can even make them

00:19:06,720 --> 00:19:10,960
infinite so here i've got a little

00:19:09,440 --> 00:19:12,400
generator called infinity and beyond

00:19:10,960 --> 00:19:13,520
that's basically going to give me all of

00:19:12,400 --> 00:19:15,039
the counting numbers

00:19:13,520 --> 00:19:16,559
all the whole numbers so it's starting

00:19:15,039 --> 00:19:19,039
at one

00:19:16,559 --> 00:19:20,400
and look at this scary thing where if if

00:19:19,039 --> 00:19:22,799
you're like me as a javascript

00:19:20,400 --> 00:19:24,160
programmer while true should strike fear

00:19:22,799 --> 00:19:26,400
into your heart

00:19:24,160 --> 00:19:27,760
but the thing is it's okay in generators

00:19:26,400 --> 00:19:31,679
because that yield

00:19:27,760 --> 00:19:34,480
pauses and it's only going to advance

00:19:31,679 --> 00:19:34,960
when somebody explicitly pulls the value

00:19:34,480 --> 00:19:38,400
out

00:19:34,960 --> 00:19:39,520
so this is lazily going to give me each

00:19:38,400 --> 00:19:42,960
successive number

00:19:39,520 --> 00:19:43,440
one after another um what i don't want

00:19:42,960 --> 00:19:46,080
to do

00:19:43,440 --> 00:19:47,760
is like spread this into an array for

00:19:46,080 --> 00:19:48,720
example that would that would not go

00:19:47,760 --> 00:19:50,480
well

00:19:48,720 --> 00:19:52,160
but what i can do is write another

00:19:50,480 --> 00:19:54,400
little generator this one is called

00:19:52,160 --> 00:19:56,559
take which if you've worked in like

00:19:54,400 --> 00:19:58,480
other functional programming languages

00:19:56,559 --> 00:19:59,120
somebody mentioned closure earlier stuff

00:19:58,480 --> 00:20:01,840
like that

00:19:59,120 --> 00:20:02,400
often you run into this utility of take

00:20:01,840 --> 00:20:05,760
which

00:20:02,400 --> 00:20:08,720
it basically gives you the first n items

00:20:05,760 --> 00:20:09,039
from some kind of iterable sequence and

00:20:08,720 --> 00:20:11,600
so

00:20:09,039 --> 00:20:12,799
i've implemented this this um stolen

00:20:11,600 --> 00:20:14,080
this implementation from one of the

00:20:12,799 --> 00:20:16,559
references you'll see later

00:20:14,080 --> 00:20:17,440
but basically um we're just basically

00:20:16,559 --> 00:20:21,679
going through

00:20:17,440 --> 00:20:25,200
the iterable lazily that's important

00:20:21,679 --> 00:20:27,360
um and we're stopping when we've counted

00:20:25,200 --> 00:20:28,640
off the number of items that we that we

00:20:27,360 --> 00:20:30,559
need so

00:20:28,640 --> 00:20:32,000
on each run of this for loop i'm going

00:20:30,559 --> 00:20:34,320
to count down

00:20:32,000 --> 00:20:35,679
the number of items that i need so if i

00:20:34,320 --> 00:20:38,400
say if i ask for three

00:20:35,679 --> 00:20:39,840
let's say um i will first yield the

00:20:38,400 --> 00:20:41,440
first item and then i'm

00:20:39,840 --> 00:20:43,919
going to take two more and then i'm

00:20:41,440 --> 00:20:46,159
gonna yield another item and

00:20:43,919 --> 00:20:48,320
take one more and yield another item and

00:20:46,159 --> 00:20:51,919
then when n reaches zero

00:20:48,320 --> 00:20:54,000
i'm going to return and jump out of this

00:20:51,919 --> 00:20:55,840
iterator jump out of this uh generator

00:20:54,000 --> 00:20:57,600
so that uh the for loop doesn't go on

00:20:55,840 --> 00:20:59,600
forever

00:20:57,600 --> 00:21:01,919
uh because that's that's something

00:20:59,600 --> 00:21:05,600
that's pretty cool is i can actually use

00:21:01,919 --> 00:21:08,080
an infinite iterable here in my

00:21:05,600 --> 00:21:08,880
uh in this take function so for example

00:21:08,080 --> 00:21:12,000
i can pass

00:21:08,880 --> 00:21:12,640
in the generator created by infinity and

00:21:12,000 --> 00:21:15,760
beyond

00:21:12,640 --> 00:21:16,000
up here and i can pass it to take and

00:21:15,760 --> 00:21:19,120
say

00:21:16,000 --> 00:21:20,640
okay give me the first five that's gonna

00:21:19,120 --> 00:21:22,080
give me a generator which then i can

00:21:20,640 --> 00:21:23,600
spread into an array

00:21:22,080 --> 00:21:25,919
and i get this array one two three four

00:21:23,600 --> 00:21:27,679
five and this is live code so i can show

00:21:25,919 --> 00:21:29,360
you that this works with bigger numbers

00:21:27,679 --> 00:21:32,480
with smaller numbers

00:21:29,360 --> 00:21:35,360
um and so what we can do is

00:21:32,480 --> 00:21:37,520
basically use infinite sequences and

00:21:35,360 --> 00:21:38,559
work with them as if they were regular

00:21:37,520 --> 00:21:41,440
old iterables

00:21:38,559 --> 00:21:43,120
thanks to generators and i can also make

00:21:41,440 --> 00:21:46,640
some other like helpful

00:21:43,120 --> 00:21:48,559
um lazy uh iterable processors

00:21:46,640 --> 00:21:50,480
like the map function so we're used to

00:21:48,559 --> 00:21:52,240
using a map on arrays right but wouldn't

00:21:50,480 --> 00:21:52,880
it be cool if you could use map on any

00:21:52,240 --> 00:21:55,039
iterable

00:21:52,880 --> 00:21:56,559
out there at all in javascript so you

00:21:55,039 --> 00:21:58,640
could implement a generator

00:21:56,559 --> 00:22:00,159
that takes in an iterable and some kind

00:21:58,640 --> 00:22:02,960
of map function

00:22:00,159 --> 00:22:04,400
and lazily is going to go through each

00:22:02,960 --> 00:22:06,720
thing in that iterable

00:22:04,400 --> 00:22:09,440
and yield out whatever the result of

00:22:06,720 --> 00:22:11,440
calling the map function on that item is

00:22:09,440 --> 00:22:15,120
so for example i could use this to

00:22:11,440 --> 00:22:17,600
square everything in my taken array

00:22:15,120 --> 00:22:18,720
here i'm going to call my map function

00:22:17,600 --> 00:22:21,919
on my taken

00:22:18,720 --> 00:22:24,960
sequence and map

00:22:21,919 --> 00:22:28,559
each thing to its square

00:22:24,960 --> 00:22:30,720
so i'll get this uh this array now of

00:22:28,559 --> 00:22:34,960
the squares of each of the numbers

00:22:30,720 --> 00:22:38,480
and this is lazily evaluated this is

00:22:34,960 --> 00:22:40,400
this is um not computing those values

00:22:38,480 --> 00:22:41,679
until they're actually asked for in this

00:22:40,400 --> 00:22:42,880
case they're being asked for by the

00:22:41,679 --> 00:22:44,400
spread operator

00:22:42,880 --> 00:22:46,000
but if i were using this in a for loop

00:22:44,400 --> 00:22:48,559
let's say i would only be

00:22:46,000 --> 00:22:50,159
getting the next value that i need as i

00:22:48,559 --> 00:22:51,760
go through each run of that for loop

00:22:50,159 --> 00:22:52,880
instead of having to set it up all in

00:22:51,760 --> 00:22:55,919
advance and use up

00:22:52,880 --> 00:22:57,760
all of my memory possibly so this is

00:22:55,919 --> 00:23:00,799
pretty cool if you ask me we can do lazy

00:22:57,760 --> 00:23:02,480
evaluation we can do infinite sequences

00:23:00,799 --> 00:23:04,480
and we can actually work with them as if

00:23:02,480 --> 00:23:09,200
they were regular javascript

00:23:04,480 --> 00:23:11,200
iterables okay so

00:23:09,200 --> 00:23:12,559
here is another weird thing that we can

00:23:11,200 --> 00:23:15,360
do with generators which

00:23:12,559 --> 00:23:17,200
i would never have thought of had i not

00:23:15,360 --> 00:23:20,000
come to work at observable

00:23:17,200 --> 00:23:21,360
okay how about using generators to do

00:23:20,000 --> 00:23:26,000
animation

00:23:21,360 --> 00:23:29,360
what what all right so um

00:23:26,000 --> 00:23:29,360
the cool thing about generators

00:23:29,440 --> 00:23:35,760
like uh like like all

00:23:32,480 --> 00:23:36,960
iterators is basically that whatever's

00:23:35,760 --> 00:23:38,559
calling that

00:23:36,960 --> 00:23:40,080
calling into that next method is

00:23:38,559 --> 00:23:43,679
controlling when

00:23:40,080 --> 00:23:46,480
the next value pops out so what if we

00:23:43,679 --> 00:23:49,520
kind of hooked that up to the browser's

00:23:46,480 --> 00:23:52,240
uh to the to the request animation frame

00:23:49,520 --> 00:23:53,840
uh loop like where we can ask for

00:23:52,240 --> 00:23:55,840
something new to draw

00:23:53,840 --> 00:23:57,120
uh on every kind of render frame that

00:23:55,840 --> 00:24:00,400
the browser is

00:23:57,120 --> 00:24:02,559
is uh is pulling up here could we use

00:24:00,400 --> 00:24:04,880
that to actually animate things

00:24:02,559 --> 00:24:06,240
with a generator so okay bear with me

00:24:04,880 --> 00:24:07,120
here this is going to feel weird because

00:24:06,240 --> 00:24:09,440
it is weird

00:24:07,120 --> 00:24:11,039
i've got a little um a little html

00:24:09,440 --> 00:24:12,320
snippet this is just some observable

00:24:11,039 --> 00:24:14,960
that that makes it um

00:24:12,320 --> 00:24:16,240
that inserts a little html snippet onto

00:24:14,960 --> 00:24:18,000
the page so i've got a div

00:24:16,240 --> 00:24:19,919
i've got something an element with id

00:24:18,000 --> 00:24:21,919
animate me here and it says generators

00:24:19,919 --> 00:24:24,480
rock because that's true they do

00:24:21,919 --> 00:24:26,320
um now what i've done here is i've got a

00:24:24,480 --> 00:24:29,600
little animate function

00:24:26,320 --> 00:24:31,200
which is a regular function that is

00:24:29,600 --> 00:24:34,400
going to basically

00:24:31,200 --> 00:24:36,640
grab that animate element and

00:24:34,400 --> 00:24:38,480
it takes in a generator function and

00:24:36,640 --> 00:24:40,080
it's going to pass that element

00:24:38,480 --> 00:24:42,080
into that generator function to create a

00:24:40,080 --> 00:24:44,400
new generator that's like aware of that

00:24:42,080 --> 00:24:49,360
element

00:24:44,400 --> 00:24:52,960
and then using this redraw function

00:24:49,360 --> 00:24:56,400
it's basically on each animation frame

00:24:52,960 --> 00:24:58,720
going to ask for the next

00:24:56,400 --> 00:24:59,520
value from the generator which as we saw

00:24:58,720 --> 00:25:01,520
earlier

00:24:59,520 --> 00:25:03,760
means that the generator function is

00:25:01,520 --> 00:25:06,320
going to run until it hits its next

00:25:03,760 --> 00:25:07,760
yield statement and then we could say

00:25:06,320 --> 00:25:08,880
you know that maybe some of this some of

00:25:07,760 --> 00:25:12,559
these generators will

00:25:08,880 --> 00:25:13,200
be um finite so if at some point i get

00:25:12,559 --> 00:25:16,159
the done

00:25:13,200 --> 00:25:16,880
true value if i get if i get done true

00:25:16,159 --> 00:25:18,880
out of the

00:25:16,880 --> 00:25:21,120
next method i'm just going to return and

00:25:18,880 --> 00:25:22,960
like stop this animation loop

00:25:21,120 --> 00:25:25,679
but as long as i still have values

00:25:22,960 --> 00:25:28,159
coming through i'm just going to keep

00:25:25,679 --> 00:25:30,000
running this redraw function on every

00:25:28,159 --> 00:25:31,919
animation frame

00:25:30,000 --> 00:25:33,679
okay i know this feels weird but are

00:25:31,919 --> 00:25:35,360
folks with me i don't i can't see you

00:25:33,679 --> 00:25:36,720
all so i'm just hoping and praying that

00:25:35,360 --> 00:25:40,080
you're with me

00:25:36,720 --> 00:25:42,240
okay so now now what does this why would

00:25:40,080 --> 00:25:44,400
i do this well because now once i've got

00:25:42,240 --> 00:25:47,679
my animation logic set up

00:25:44,400 --> 00:25:50,240
i can write animators that are basically

00:25:47,679 --> 00:25:51,760
just generator functions so for example

00:25:50,240 --> 00:25:53,279
here i've got a little animator that's

00:25:51,760 --> 00:25:55,760
called slide right

00:25:53,279 --> 00:25:57,760
it takes in my element and it's

00:25:55,760 --> 00:26:00,799
basically going to

00:25:57,760 --> 00:26:01,520
reposition the element to a certain x

00:26:00,799 --> 00:26:03,840
value

00:26:01,520 --> 00:26:05,520
using a transform it's going to

00:26:03,840 --> 00:26:08,880
translate

00:26:05,520 --> 00:26:11,279
in the x dimension by a certain number

00:26:08,880 --> 00:26:14,559
of pixels and what this is going to do

00:26:11,279 --> 00:26:15,279
is just go through from 0 to 200 or what

00:26:14,559 --> 00:26:16,720
have you

00:26:15,279 --> 00:26:18,799
but i could also imagine this bouncing

00:26:16,720 --> 00:26:19,600
back and forth forever or using y

00:26:18,799 --> 00:26:22,559
instead of x

00:26:19,600 --> 00:26:22,960
it's going to increment that x value and

00:26:22,559 --> 00:26:25,360
then

00:26:22,960 --> 00:26:27,120
perform the transform and pause with

00:26:25,360 --> 00:26:30,240
that yield

00:26:27,120 --> 00:26:31,840
so now if everything if the if the live

00:26:30,240 --> 00:26:35,039
demo gods are with me

00:26:31,840 --> 00:26:37,440
um if i run if i

00:26:35,039 --> 00:26:38,880
pass this slide right generator function

00:26:37,440 --> 00:26:40,880
to animate

00:26:38,880 --> 00:26:42,960
it should run my animation for me let's

00:26:40,880 --> 00:26:46,400
see i'm going to run this

00:26:42,960 --> 00:26:48,480
and uh there it goes look at it going

00:26:46,400 --> 00:26:50,559
bye generators no it's just going to

00:26:48,480 --> 00:26:54,000
stop after a second yay

00:26:50,559 --> 00:26:54,400
so this is super weird and you might

00:26:54,000 --> 00:26:56,799
think

00:26:54,400 --> 00:26:59,840
like i would never do this that may be

00:26:56,799 --> 00:27:00,960
true but the advantage of this

00:26:59,840 --> 00:27:02,640
because you could you could also write

00:27:00,960 --> 00:27:04,320
this animation yourself like using your

00:27:02,640 --> 00:27:05,600
own loop but the advantage of this is i

00:27:04,320 --> 00:27:08,080
only had to write that loop

00:27:05,600 --> 00:27:10,240
once and now i can write whatever

00:27:08,080 --> 00:27:11,200
animators i want as generators i could

00:27:10,240 --> 00:27:13,919
do a slide left

00:27:11,200 --> 00:27:16,559
or a bounce back and forth or a i could

00:27:13,919 --> 00:27:19,279
change the opacity or do whatever i want

00:27:16,559 --> 00:27:20,480
just by writing a generator instead of

00:27:19,279 --> 00:27:23,279
having to like

00:27:20,480 --> 00:27:24,480
redo all that looping logic and so the

00:27:23,279 --> 00:27:26,240
thing is

00:27:24,480 --> 00:27:28,880
this notebook that you've been looking

00:27:26,240 --> 00:27:31,679
at with these like text animations which

00:27:28,880 --> 00:27:32,640
uh were designed by my uh teammate mike

00:27:31,679 --> 00:27:35,520
bostock

00:27:32,640 --> 00:27:37,840
um this is actually running on

00:27:35,520 --> 00:27:40,080
generators observable

00:27:37,840 --> 00:27:42,000
which again is this this platform for

00:27:40,080 --> 00:27:44,159
doing visual computing in the browser in

00:27:42,000 --> 00:27:45,760
these interactive notebooks

00:27:44,159 --> 00:27:48,080
you're looking at an observable notebook

00:27:45,760 --> 00:27:51,120
right now an observable

00:27:48,080 --> 00:27:54,240
uses generators and

00:27:51,120 --> 00:27:57,520
the animation frame loop to basically

00:27:54,240 --> 00:28:00,240
automatically pull once a

00:27:57,520 --> 00:28:02,480
an animation frame from any generators

00:28:00,240 --> 00:28:05,600
that you give it in a cell

00:28:02,480 --> 00:28:07,520
and then observable is also reactive so

00:28:05,600 --> 00:28:10,240
basically whenever something updates

00:28:07,520 --> 00:28:13,600
the rest of the notebook that uses it

00:28:10,240 --> 00:28:16,080
also updates so what's going on here is

00:28:13,600 --> 00:28:17,600
i have this little html snippet and

00:28:16,080 --> 00:28:19,600
don't worry about these the the the

00:28:17,600 --> 00:28:21,039
coloring and the the shading and these

00:28:19,600 --> 00:28:21,679
lines and all that that's there's some

00:28:21,039 --> 00:28:23,360
little

00:28:21,679 --> 00:28:25,200
not that complex but little functions

00:28:23,360 --> 00:28:26,960
that are like computing based on a

00:28:25,200 --> 00:28:27,919
certain time stamp based on a certain

00:28:26,960 --> 00:28:31,760
time

00:28:27,919 --> 00:28:35,360
um representation they're computing

00:28:31,760 --> 00:28:36,080
how to shade this thing so this depends

00:28:35,360 --> 00:28:39,279
on this t

00:28:36,080 --> 00:28:40,880
value and t here depends on basically

00:28:39,279 --> 00:28:43,120
the current time stamp

00:28:40,880 --> 00:28:44,080
which is a built in in observable called

00:28:43,120 --> 00:28:46,000
now

00:28:44,080 --> 00:28:47,679
which is actually so this is coming from

00:28:46,000 --> 00:28:48,880
observable standard lib you can find the

00:28:47,679 --> 00:28:50,720
code on github

00:28:48,880 --> 00:28:53,440
um but this is just a really simple

00:28:50,720 --> 00:28:56,640
generator that is just a wild true

00:28:53,440 --> 00:29:00,320
loop yielding date.now so

00:28:56,640 --> 00:29:02,799
every time um basically on

00:29:00,320 --> 00:29:04,720
on each animation frame observable is

00:29:02,799 --> 00:29:08,159
pulling a new value

00:29:04,720 --> 00:29:09,840
the new date.now from this now generator

00:29:08,159 --> 00:29:11,279
and it's automatically making that

00:29:09,840 --> 00:29:13,600
available and then

00:29:11,279 --> 00:29:15,760
any other cell in this case this t this

00:29:13,600 --> 00:29:19,279
is a cell that depends on now

00:29:15,760 --> 00:29:21,360
is reactively updating to that

00:29:19,279 --> 00:29:23,039
new changed value of now which

00:29:21,360 --> 00:29:24,240
observable just pulled out of the

00:29:23,039 --> 00:29:26,240
generator

00:29:24,240 --> 00:29:27,919
um i should say the observable runtime

00:29:26,240 --> 00:29:30,640
just pulled out of the generator

00:29:27,919 --> 00:29:31,760
and then if t updates similarly anything

00:29:30,640 --> 00:29:34,640
that depends on t

00:29:31,760 --> 00:29:36,559
like this little html svg element is

00:29:34,640 --> 00:29:37,919
also going to reactively update so

00:29:36,559 --> 00:29:40,080
that's how

00:29:37,919 --> 00:29:41,760
we're doing these animations right now

00:29:40,080 --> 00:29:43,840
and um

00:29:41,760 --> 00:29:45,520
i can i we can nerd out about this for

00:29:43,840 --> 00:29:47,200
like ever and ever because there are so

00:29:45,520 --> 00:29:48,640
many cool animations that folks have

00:29:47,200 --> 00:29:51,919
come up with um

00:29:48,640 --> 00:29:53,360
just by writing really simple generators

00:29:51,919 --> 00:29:54,960
in their observable cells because

00:29:53,360 --> 00:29:56,320
observable is basically doing that

00:29:54,960 --> 00:29:57,919
animation loop logic

00:29:56,320 --> 00:30:00,080
of figuring out that it needs to pull

00:29:57,919 --> 00:30:03,360
something new from every

00:30:00,080 --> 00:30:06,559
uh on every animation loop uh

00:30:03,360 --> 00:30:06,559
animation frame yeah

00:30:06,840 --> 00:30:11,919
so suffice it to say that like

00:30:09,840 --> 00:30:13,440
if this feels weird it's actually try it

00:30:11,919 --> 00:30:15,039
out and observable try writing

00:30:13,440 --> 00:30:17,039
writing animators with just like a

00:30:15,039 --> 00:30:18,720
little yield statement it's very fun

00:30:17,039 --> 00:30:21,039
it makes life very easy when you don't

00:30:18,720 --> 00:30:24,080
have to handle all that animation logic

00:30:21,039 --> 00:30:24,399
okay okay okay i'm just going to pause

00:30:24,080 --> 00:30:28,320
to

00:30:24,399 --> 00:30:32,880
take a sip here and let's think about

00:30:28,320 --> 00:30:34,240
what this means in the higher level

00:30:32,880 --> 00:30:36,320
what are all of these generators that

00:30:34,240 --> 00:30:37,440
we've been seeing what are they doing

00:30:36,320 --> 00:30:39,760
well

00:30:37,440 --> 00:30:41,919
they've been producing data right so

00:30:39,760 --> 00:30:44,240
like every time we call the next method

00:30:41,919 --> 00:30:46,159
the generator produces a new value for

00:30:44,240 --> 00:30:47,679
us sometimes it could be also like doing

00:30:46,159 --> 00:30:50,720
some other side effects like

00:30:47,679 --> 00:30:53,120
like moving that html element but

00:30:50,720 --> 00:30:55,120
uh in generally there in general they're

00:30:53,120 --> 00:30:56,880
essentially producing data when we want

00:30:55,120 --> 00:30:57,840
it so generators are really great for

00:30:56,880 --> 00:30:59,360
that

00:30:57,840 --> 00:31:00,960
um and that makes them really great for

00:30:59,360 --> 00:31:04,240
things like data like

00:31:00,960 --> 00:31:06,960
uh you know sequences and and

00:31:04,240 --> 00:31:08,480
iteration like we've seen but the really

00:31:06,960 --> 00:31:10,320
mind-blowing thing about generators and

00:31:08,480 --> 00:31:12,480
this is the part where i think it gets

00:31:10,320 --> 00:31:14,320
extra interesting uh so i hope for doing

00:31:12,480 --> 00:31:16,799
okay for time

00:31:14,320 --> 00:31:18,159
is that they don't just produce data

00:31:16,799 --> 00:31:21,760
they can also

00:31:18,159 --> 00:31:22,640
consume data and this is something that

00:31:21,760 --> 00:31:24,240
i think

00:31:22,640 --> 00:31:26,080
we don't talk enough about with

00:31:24,240 --> 00:31:28,240
generators so

00:31:26,080 --> 00:31:29,120
here is the weird thing about this yield

00:31:28,240 --> 00:31:32,960
statement

00:31:29,120 --> 00:31:35,440
is that it is actually a two-way street

00:31:32,960 --> 00:31:36,480
yield doesn't just give us the

00:31:35,440 --> 00:31:39,279
opportunity to like

00:31:36,480 --> 00:31:40,080
pass out a value to whoever called the

00:31:39,279 --> 00:31:43,120
dot next

00:31:40,080 --> 00:31:46,559
method it actually also lets us

00:31:43,120 --> 00:31:49,760
pass in a value i can pass

00:31:46,559 --> 00:31:53,039
uh some kind of input some kind of value

00:31:49,760 --> 00:31:56,320
into my call to the dot next method

00:31:53,039 --> 00:31:57,679
and here's a super weird thing that will

00:31:56,320 --> 00:32:00,960
become

00:31:57,679 --> 00:32:01,679
the value of wherever i have this yield

00:32:00,960 --> 00:32:03,440
statement

00:32:01,679 --> 00:32:04,880
which means that i can use a yield

00:32:03,440 --> 00:32:07,919
statement in

00:32:04,880 --> 00:32:10,960
like an assignment for example or

00:32:07,919 --> 00:32:12,480
whatever else i want um

00:32:10,960 --> 00:32:14,000
this is this was something that took me

00:32:12,480 --> 00:32:15,600
a minute to wrap my head around so

00:32:14,000 --> 00:32:17,360
like let's think through this real

00:32:15,600 --> 00:32:19,600
carefully

00:32:17,360 --> 00:32:20,799
i have this little listener generator

00:32:19,600 --> 00:32:22,640
function here

00:32:20,799 --> 00:32:24,720
the first thing it's going to do before

00:32:22,640 --> 00:32:25,360
it pauses at any yield is it's just

00:32:24,720 --> 00:32:27,600
going to log

00:32:25,360 --> 00:32:28,399
out that it's listening then it enters

00:32:27,600 --> 00:32:32,000
this this

00:32:28,399 --> 00:32:33,519
infinite loop where the first thing it

00:32:32,000 --> 00:32:35,919
does in that infinite loop

00:32:33,519 --> 00:32:37,519
is it's gonna the javascript's gonna try

00:32:35,919 --> 00:32:38,399
to evaluate the right-hand side of this

00:32:37,519 --> 00:32:40,559
assignment right so

00:32:38,399 --> 00:32:42,559
it's gonna see this yield and it's going

00:32:40,559 --> 00:32:44,799
to pause

00:32:42,559 --> 00:32:46,720
and there's nothing after the yield so

00:32:44,799 --> 00:32:47,760
i'm i'm just going to be the values that

00:32:46,720 --> 00:32:49,840
i'm returning in my

00:32:47,760 --> 00:32:51,120
like value done done is going to be true

00:32:49,840 --> 00:32:56,080
the value is just going to be undefined

00:32:51,120 --> 00:32:58,480
we're not really using the value

00:32:56,080 --> 00:32:59,760
it hits that pause that's when things

00:32:58,480 --> 00:33:02,960
get interesting

00:32:59,760 --> 00:33:05,279
so okay the first time that i call next

00:33:02,960 --> 00:33:07,039
what happens well we saw this earlier we

00:33:05,279 --> 00:33:10,640
start at the beginning of the function

00:33:07,039 --> 00:33:12,880
body and we advance until this next

00:33:10,640 --> 00:33:13,919
yield so we're going to advance to right

00:33:12,880 --> 00:33:15,919
here

00:33:13,919 --> 00:33:17,600
which means it's going to spit out

00:33:15,919 --> 00:33:20,799
listening

00:33:17,600 --> 00:33:23,840
now the thing is this first

00:33:20,799 --> 00:33:24,640
time that i call next the generator

00:33:23,840 --> 00:33:27,760
hasn't really

00:33:24,640 --> 00:33:30,320
started running yet so it doesn't have

00:33:27,760 --> 00:33:31,679
any way of capturing that input value

00:33:30,320 --> 00:33:33,360
so this is an important thing that we're

00:33:31,679 --> 00:33:35,519
going to come back to um

00:33:33,360 --> 00:33:37,279
but basically the first time you call

00:33:35,519 --> 00:33:39,279
next

00:33:37,279 --> 00:33:41,120
the generator can't receive any input

00:33:39,279 --> 00:33:42,640
yet so whatever input you pass to the

00:33:41,120 --> 00:33:43,840
first call of next is going to be

00:33:42,640 --> 00:33:46,080
ignored

00:33:43,840 --> 00:33:47,519
it did not hear this first are you there

00:33:46,080 --> 00:33:49,919
that i'm asking it

00:33:47,519 --> 00:33:51,679
but now it's running it's in the middle

00:33:49,919 --> 00:33:52,559
of running and it's paused at this yield

00:33:51,679 --> 00:33:56,320
statement

00:33:52,559 --> 00:34:00,320
now the next time that i call next

00:33:56,320 --> 00:34:00,320
whatever input value is passed in

00:34:00,399 --> 00:34:03,519
when the generator resumes at the yield

00:34:02,720 --> 00:34:06,320
it's going to

00:34:03,519 --> 00:34:07,760
use that value as the value of this

00:34:06,320 --> 00:34:10,000
yield expression

00:34:07,760 --> 00:34:12,000
so what i'm going to get is message

00:34:10,000 --> 00:34:13,359
equals how about now

00:34:12,000 --> 00:34:14,960
and then it's going to continue running

00:34:13,359 --> 00:34:16,480
until the next yield so it's going to

00:34:14,960 --> 00:34:19,520
run through this line

00:34:16,480 --> 00:34:21,119
it's going to log herd how about now and

00:34:19,520 --> 00:34:24,240
then it's going to hit the loop again

00:34:21,119 --> 00:34:26,560
and pause again on the next yield where

00:34:24,240 --> 00:34:29,119
it's ready to receive another input so

00:34:26,560 --> 00:34:33,280
any successive calls to next

00:34:29,119 --> 00:34:35,679
are going to get heard by the generator

00:34:33,280 --> 00:34:37,440
okay is this weird yet are we weirded

00:34:35,679 --> 00:34:40,639
out yet

00:34:37,440 --> 00:34:43,679
all right so takeaways are that

00:34:40,639 --> 00:34:44,480
you can pass in a value to next and it

00:34:43,679 --> 00:34:47,839
will be

00:34:44,480 --> 00:34:50,240
used to replace whatever yield statement

00:34:47,839 --> 00:34:53,359
the generator was currently paused at

00:34:50,240 --> 00:34:54,960
the first time that you call next there

00:34:53,359 --> 00:34:56,720
is no yield statement that the generator

00:34:54,960 --> 00:34:58,960
has paused that it hasn't started yet so

00:34:56,720 --> 00:35:01,119
the first value gets ignored so you

00:34:58,960 --> 00:35:03,520
often have to call next a first time

00:35:01,119 --> 00:35:05,440
usually with nothing to to kind of prime

00:35:03,520 --> 00:35:05,920
the generator receive input but after

00:35:05,440 --> 00:35:08,880
that

00:35:05,920 --> 00:35:10,160
you can pass things into it with next

00:35:08,880 --> 00:35:13,200
okay

00:35:10,160 --> 00:35:16,240
now what this means

00:35:13,200 --> 00:35:17,760
is that you can be talking to a

00:35:16,240 --> 00:35:21,440
generator

00:35:17,760 --> 00:35:24,160
that is maintaining its own internal

00:35:21,440 --> 00:35:26,880
state and and deciding what to do with

00:35:24,160 --> 00:35:28,320
the inputs that you're giving to it

00:35:26,880 --> 00:35:29,920
so for example i have a little bank

00:35:28,320 --> 00:35:30,640
account generator that represents a bank

00:35:29,920 --> 00:35:33,760
account

00:35:30,640 --> 00:35:36,079
um it starts off with a balance of zero

00:35:33,760 --> 00:35:37,599
and first thing it's going to do and as

00:35:36,079 --> 00:35:38,160
long as as long as the balance is above

00:35:37,599 --> 00:35:41,359
zero

00:35:38,160 --> 00:35:43,359
it's just going to yield out the balance

00:35:41,359 --> 00:35:46,320
and in this case i'm using both i'm

00:35:43,359 --> 00:35:48,320
outputting a value with yield

00:35:46,320 --> 00:35:50,240
and i'm pausing here to wait for the

00:35:48,320 --> 00:35:52,880
next input

00:35:50,240 --> 00:35:54,480
so let's walk through what this is going

00:35:52,880 --> 00:35:55,440
to do i instantiate my bank account

00:35:54,480 --> 00:35:57,920
generator

00:35:55,440 --> 00:35:59,280
i call next the first time no input

00:35:57,920 --> 00:36:01,280
because it can't receive any input on

00:35:59,280 --> 00:36:04,560
that first next call as we said

00:36:01,280 --> 00:36:06,720
and i get out the

00:36:04,560 --> 00:36:07,760
the ex the current balance which is zero

00:36:06,720 --> 00:36:08,960
because i just started i haven't made

00:36:07,760 --> 00:36:11,119
any deposits yet

00:36:08,960 --> 00:36:12,000
and the information that we are not done

00:36:11,119 --> 00:36:14,560
the generator is still

00:36:12,000 --> 00:36:17,839
running my bank account is still open

00:36:14,560 --> 00:36:20,800
now let's say i call next with 50.

00:36:17,839 --> 00:36:22,320
we are paused right here so 50 gets

00:36:20,800 --> 00:36:24,880
passed in essentially

00:36:22,320 --> 00:36:28,480
as the value of this yield expression it

00:36:24,880 --> 00:36:31,040
gets added to my balance here

00:36:28,480 --> 00:36:33,200
and then hitting the while loop again it

00:36:31,040 --> 00:36:34,720
gets the new balance the updated balance

00:36:33,200 --> 00:36:37,040
gets yielded out

00:36:34,720 --> 00:36:37,920
i've now done a loop of this tiny

00:36:37,040 --> 00:36:40,800
one-line line

00:36:37,920 --> 00:36:42,880
while loop so what i get out then is the

00:36:40,800 --> 00:36:45,680
updated balance value of 50.

00:36:42,880 --> 00:36:46,480
and and as i continue going i can keep

00:36:45,680 --> 00:36:49,200
passing in

00:36:46,480 --> 00:36:50,880
more quote-unquote transactions to my

00:36:49,200 --> 00:36:54,400
bank account like maybe i withdraw

00:36:50,880 --> 00:36:57,280
10 and then i get a balance of 40.

00:36:54,400 --> 00:36:59,359
and so on and so forth until if at some

00:36:57,280 --> 00:37:01,040
point the balance drops below zero

00:36:59,359 --> 00:37:02,880
i've gone bankrupt the bank account is

00:37:01,040 --> 00:37:04,320
closed and

00:37:02,880 --> 00:37:06,079
in this case so like if i try to

00:37:04,320 --> 00:37:09,440
overdraw my account

00:37:06,079 --> 00:37:10,480
i i asked for too much money i get back

00:37:09,440 --> 00:37:12,240
this done true

00:37:10,480 --> 00:37:13,760
and a little um i'm just using this

00:37:12,240 --> 00:37:14,720
return value to message the fact that

00:37:13,760 --> 00:37:16,960
i'm bankrupt

00:37:14,720 --> 00:37:17,839
and i can't make any more transactions

00:37:16,960 --> 00:37:19,200
with my

00:37:17,839 --> 00:37:20,960
with my bank account and so what we've

00:37:19,200 --> 00:37:22,720
got here kind of is like this little

00:37:20,960 --> 00:37:24,320
this little generator this little four

00:37:22,720 --> 00:37:27,440
line function

00:37:24,320 --> 00:37:30,400
is remembering where it's at

00:37:27,440 --> 00:37:31,520
for as long as i want until i hit some

00:37:30,400 --> 00:37:33,839
kind of condition that

00:37:31,520 --> 00:37:34,640
makes it return or if it's got a wild

00:37:33,839 --> 00:37:38,000
true in there

00:37:34,640 --> 00:37:39,599
forever and it can use whatever inputs i

00:37:38,000 --> 00:37:41,119
give it to make decisions about for

00:37:39,599 --> 00:37:41,839
example advancing through a state

00:37:41,119 --> 00:37:44,320
machine

00:37:41,839 --> 00:37:45,200
um so because generators remember where

00:37:44,320 --> 00:37:47,280
they're at they're

00:37:45,200 --> 00:37:48,800
they're paused they're not like a

00:37:47,280 --> 00:37:51,280
function where every time you run it

00:37:48,800 --> 00:37:53,440
it's kind of starting from scratch

00:37:51,280 --> 00:37:55,520
when you call into a generator it

00:37:53,440 --> 00:37:58,160
remembers exactly where it left off so

00:37:55,520 --> 00:38:01,520
you can do a lot with that

00:37:58,160 --> 00:38:01,520
okay um

00:38:02,800 --> 00:38:07,440
the interesting thing about this is if

00:38:05,359 --> 00:38:09,599
we think about it

00:38:07,440 --> 00:38:11,440
with this two-way yield statement what

00:38:09,599 --> 00:38:11,760
it basically means is that the generator

00:38:11,440 --> 00:38:14,800
can

00:38:11,760 --> 00:38:17,040
give up execution control it can when it

00:38:14,800 --> 00:38:19,920
hits the yield it says i'm paused

00:38:17,040 --> 00:38:20,960
and it gives control back to whoever

00:38:19,920 --> 00:38:22,560
called

00:38:20,960 --> 00:38:24,000
into the generator whoever called that

00:38:22,560 --> 00:38:26,880
next method

00:38:24,000 --> 00:38:28,000
and then when whoever that person is or

00:38:26,880 --> 00:38:30,400
whatever that

00:38:28,000 --> 00:38:32,240
that part of the program is when it

00:38:30,400 --> 00:38:34,960
calls next again

00:38:32,240 --> 00:38:37,119
the generator takes control back and

00:38:34,960 --> 00:38:39,440
resumes where it left off

00:38:37,119 --> 00:38:41,680
so the generator this with this yield

00:38:39,440 --> 00:38:44,800
and with the um the idea that next

00:38:41,680 --> 00:38:46,800
resumes the generator can basically

00:38:44,800 --> 00:38:48,560
give back control to the outside outside

00:38:46,800 --> 00:38:49,520
world take it back later and pick up

00:38:48,560 --> 00:38:51,680
where it left off and

00:38:49,520 --> 00:38:54,160
it can kind of pass that control back

00:38:51,680 --> 00:38:54,160
and forth

00:38:54,800 --> 00:38:59,040
this means some really interesting

00:38:56,640 --> 00:39:02,800
things for control flow

00:38:59,040 --> 00:39:05,280
so in fact generators are like

00:39:02,800 --> 00:39:07,760
were a really important step on the way

00:39:05,280 --> 00:39:10,960
on the road towards async which now

00:39:07,760 --> 00:39:14,560
we're all possibly used to writing

00:39:10,960 --> 00:39:18,000
um writing async functions with a weight

00:39:14,560 --> 00:39:19,760
um and in

00:39:18,000 --> 00:39:21,760
a world without a weight we could

00:39:19,760 --> 00:39:23,440
actually do something really similar by

00:39:21,760 --> 00:39:25,599
combining generators

00:39:23,440 --> 00:39:26,720
and promises and essentially using the

00:39:25,599 --> 00:39:30,240
yield keyword

00:39:26,720 --> 00:39:30,720
as our sort of a weight so here's a

00:39:30,240 --> 00:39:34,079
little

00:39:30,720 --> 00:39:36,560
a little um generator called async ish

00:39:34,079 --> 00:39:38,240
um and it's not an asicj it's just it's

00:39:36,560 --> 00:39:39,520
just we're not using async or wait here

00:39:38,240 --> 00:39:41,520
we're we're

00:39:39,520 --> 00:39:43,200
reverting to a time between es6 and

00:39:41,520 --> 00:39:46,320
between the s7

00:39:43,200 --> 00:39:48,400
um what i've got here is a generator

00:39:46,320 --> 00:39:50,000
that's yielding promises

00:39:48,400 --> 00:39:51,599
um promises delay is just this is a

00:39:50,000 --> 00:39:54,640
little uh helper from

00:39:51,599 --> 00:39:56,720
observable that just is going to resolve

00:39:54,640 --> 00:39:58,640
a promise with this value after this

00:39:56,720 --> 00:40:01,599
many milliseconds so this is just gonna

00:39:58,640 --> 00:40:04,720
time give us a little a little delay on

00:40:01,599 --> 00:40:04,720
when this promise returns

00:40:05,200 --> 00:40:10,640
okay if i write another little function

00:40:08,640 --> 00:40:12,480
and this is the part that um this is the

00:40:10,640 --> 00:40:16,240
crucial kind of helper

00:40:12,480 --> 00:40:18,160
if i write a run function that takes in

00:40:16,240 --> 00:40:19,760
some iterator in this case it's going to

00:40:18,160 --> 00:40:24,160
be the generator but

00:40:19,760 --> 00:40:27,280
um and and some value it's going to pass

00:40:24,160 --> 00:40:30,319
that value into the iterator

00:40:27,280 --> 00:40:31,920
by calling next which is going to run in

00:40:30,319 --> 00:40:34,000
this case our generator up until the

00:40:31,920 --> 00:40:36,160
next yield statement

00:40:34,000 --> 00:40:37,599
and it's going to get out whatever the

00:40:36,160 --> 00:40:40,800
generator yields back

00:40:37,599 --> 00:40:44,560
as this next object and if next

00:40:40,800 --> 00:40:46,079
is not done then it's going to wait for

00:40:44,560 --> 00:40:47,760
the value it's going to assume that that

00:40:46,079 --> 00:40:49,920
value is like a promise

00:40:47,760 --> 00:40:52,240
and it's going to wait for it to resolve

00:40:49,920 --> 00:40:56,079
and then

00:40:52,240 --> 00:40:56,079
keep running with the result

00:40:56,400 --> 00:41:01,280
so what this does is basically the first

00:40:59,119 --> 00:41:05,040
time

00:41:01,280 --> 00:41:05,520
i call run with this async ish generator

00:41:05,040 --> 00:41:06,960
and i'm going to

00:41:05,520 --> 00:41:09,280
do it in a second but we're just going

00:41:06,960 --> 00:41:11,119
to think through it first

00:41:09,280 --> 00:41:12,720
it's going to run until the first yield

00:41:11,119 --> 00:41:13,760
so it's going to run this it should tell

00:41:12,720 --> 00:41:16,160
me that it's working

00:41:13,760 --> 00:41:17,359
then it's going to stop at this yield

00:41:16,160 --> 00:41:19,440
and it's going to hand

00:41:17,359 --> 00:41:21,359
control over what's happening back to

00:41:19,440 --> 00:41:23,040
this run function

00:41:21,359 --> 00:41:25,680
which has just called into its next

00:41:23,040 --> 00:41:26,400
value and then the run function is

00:41:25,680 --> 00:41:29,839
basically

00:41:26,400 --> 00:41:30,160
using using the promise is going to wait

00:41:29,839 --> 00:41:33,040
and

00:41:30,160 --> 00:41:34,720
keep control until the promise resolves

00:41:33,040 --> 00:41:37,280
and then

00:41:34,720 --> 00:41:37,839
by running again and calling the next

00:41:37,280 --> 00:41:41,520
method

00:41:37,839 --> 00:41:44,720
it's going to pass control back to

00:41:41,520 --> 00:41:48,160
the async-ish generator passing in

00:41:44,720 --> 00:41:50,079
whatever the value of that promise was

00:41:48,160 --> 00:41:51,200
as the value of the yield expression

00:41:50,079 --> 00:41:53,359
which then the generator is going to

00:41:51,200 --> 00:41:55,520
pick up from there and keep running

00:41:53,359 --> 00:41:57,040
keep running keep running and so on and

00:41:55,520 --> 00:42:00,720
so forth

00:41:57,040 --> 00:42:02,880
okay so what we've got is something that

00:42:00,720 --> 00:42:04,240
basically looks really similar to async

00:42:02,880 --> 00:42:05,599
await now

00:42:04,240 --> 00:42:07,280
let's see if this works i'm going to

00:42:05,599 --> 00:42:09,520
open up my console here

00:42:07,280 --> 00:42:10,560
i'm going to clear it out one second

00:42:09,520 --> 00:42:13,359
okay uh

00:42:10,560 --> 00:42:14,240
if this works as expected then we should

00:42:13,359 --> 00:42:17,680
see

00:42:14,240 --> 00:42:21,440
when i run this async is function

00:42:17,680 --> 00:42:25,359
we should see a little time

00:42:21,440 --> 00:42:27,280
delayed run of the apparently it looks

00:42:25,359 --> 00:42:29,599
synchronous code but it's not

00:42:27,280 --> 00:42:31,119
in my async it's function okay ready i'm

00:42:29,599 --> 00:42:34,160
gonna run this

00:42:31,119 --> 00:42:36,240
fingers crossed okay it's working oh

00:42:34,160 --> 00:42:37,760
it's almost done and then i got hello

00:42:36,240 --> 00:42:39,760
world did you see the delays

00:42:37,760 --> 00:42:41,040
i don't know if you did but it did it

00:42:39,760 --> 00:42:43,040
worked let's try it again

00:42:41,040 --> 00:42:44,560
there goes it's working again oh and

00:42:43,040 --> 00:42:45,520
it's doing it slowly because it's

00:42:44,560 --> 00:42:48,319
waiting for

00:42:45,520 --> 00:42:49,200
a second between each of those promises

00:42:48,319 --> 00:42:51,040
okay

00:42:49,200 --> 00:42:52,319
i may be a little too excited about this

00:42:51,040 --> 00:42:54,240
and you might be saying but why would i

00:42:52,319 --> 00:42:56,640
do this we have async

00:42:54,240 --> 00:42:59,280
uh and we have a weight now yes that is

00:42:56,640 --> 00:43:00,640
true but understanding the things that

00:42:59,280 --> 00:43:03,200
we work with every day

00:43:00,640 --> 00:43:04,400
is a pretty good idea so if you ask me

00:43:03,200 --> 00:43:06,000
like playing around with these

00:43:04,400 --> 00:43:07,359
generators and promises for me this was

00:43:06,000 --> 00:43:10,319
like really helpful to

00:43:07,359 --> 00:43:12,000
to understand how this like how you

00:43:10,319 --> 00:43:14,240
could do that kind of

00:43:12,000 --> 00:43:15,359
um that that that control flow of sort

00:43:14,240 --> 00:43:17,440
of like okay let's

00:43:15,359 --> 00:43:18,880
let's stop on this promise now let's

00:43:17,440 --> 00:43:20,720
pass control back to the promise and

00:43:18,880 --> 00:43:22,319
wait for it to figure itself out and

00:43:20,720 --> 00:43:25,119
then pick up where we left off

00:43:22,319 --> 00:43:26,880
when uh when the run time tells me that

00:43:25,119 --> 00:43:30,079
this promise is done

00:43:26,880 --> 00:43:31,680
so learning is the goal here all right

00:43:30,079 --> 00:43:33,520
i'm running out of time

00:43:31,680 --> 00:43:35,440
but i want to really quickly mention

00:43:33,520 --> 00:43:36,160
what we have just discovered it turns

00:43:35,440 --> 00:43:38,720
out

00:43:36,160 --> 00:43:40,880
that generators can be understood as a

00:43:38,720 --> 00:43:42,640
type of co-routine

00:43:40,880 --> 00:43:43,920
now if you're like me again no

00:43:42,640 --> 00:43:45,359
background in computer science core

00:43:43,920 --> 00:43:46,400
routine is one of those super vague

00:43:45,359 --> 00:43:50,079
words that like

00:43:46,400 --> 00:43:52,079
i have a very vague non-understanding of

00:43:50,079 --> 00:43:53,200
um but basically the way that i am

00:43:52,079 --> 00:43:54,960
thinking of co routines

00:43:53,200 --> 00:43:57,440
now that i've learned about them through

00:43:54,960 --> 00:43:58,960
generators is that they're kind of their

00:43:57,440 --> 00:44:00,000
routines or their their chunks of a

00:43:58,960 --> 00:44:02,079
program

00:44:00,000 --> 00:44:03,760
that can share control with one another

00:44:02,079 --> 00:44:04,319
they can kind of pass control back and

00:44:03,760 --> 00:44:06,880
forth

00:44:04,319 --> 00:44:08,079
to one another or to some other context

00:44:06,880 --> 00:44:11,200
and that allows them to

00:44:08,079 --> 00:44:15,040
cooperate and to basically um

00:44:11,200 --> 00:44:17,599
to basically return the

00:44:15,040 --> 00:44:18,480
control over what's running on the

00:44:17,599 --> 00:44:20,640
current

00:44:18,480 --> 00:44:21,520
cpu or in the current thread or what

00:44:20,640 --> 00:44:24,079
have you

00:44:21,520 --> 00:44:25,040
back to something else while they're

00:44:24,079 --> 00:44:26,720
waiting

00:44:25,040 --> 00:44:28,640
uh for maybe input from somewhere else

00:44:26,720 --> 00:44:30,319
for a promise to resolve for the user to

00:44:28,640 --> 00:44:34,160
give some input whatever it is

00:44:30,319 --> 00:44:37,440
so this gives us a lot of of um

00:44:34,160 --> 00:44:39,359
opportunities for weird cool things

00:44:37,440 --> 00:44:41,680
on the level of like systems on the

00:44:39,359 --> 00:44:43,280
level of processes talking to each other

00:44:41,680 --> 00:44:45,040
and essentially it allows for things

00:44:43,280 --> 00:44:48,160
like cooperative multitasking

00:44:45,040 --> 00:44:49,599
so i know we're like five minutes until

00:44:48,160 --> 00:44:51,359
the end of the hour

00:44:49,599 --> 00:44:52,880
but i want to show you really quickly if

00:44:51,359 --> 00:44:56,000
we have time um

00:44:52,880 --> 00:44:59,200
some cool things we can do with this

00:44:56,000 --> 00:45:01,839
notion of generators as co-routines

00:44:59,200 --> 00:45:03,280
okay um i've just got right now i'm

00:45:01,839 --> 00:45:04,800
switching out of observable because as

00:45:03,280 --> 00:45:07,119
we saw observable

00:45:04,800 --> 00:45:08,240
automatically runs generators and that's

00:45:07,119 --> 00:45:10,240
not going to be useful

00:45:08,240 --> 00:45:11,599
for for us right now because we're not

00:45:10,240 --> 00:45:13,359
going to be able to

00:45:11,599 --> 00:45:14,640
see what's happening quickly enough so

00:45:13,359 --> 00:45:16,160
i'm just in a um

00:45:14,640 --> 00:45:17,200
i've just got some some code that i've

00:45:16,160 --> 00:45:18,160
written up but i'm going to just like

00:45:17,200 --> 00:45:20,240
really quickly

00:45:18,160 --> 00:45:21,359
show you what's happening what i'm

00:45:20,240 --> 00:45:23,359
trying to do here

00:45:21,359 --> 00:45:24,960
is create two generators that talk to

00:45:23,359 --> 00:45:25,520
each other and they're going to talk to

00:45:24,960 --> 00:45:28,160
each other

00:45:25,520 --> 00:45:29,040
by telling a knock knock joke okay knock

00:45:28,160 --> 00:45:31,680
knock who's there

00:45:29,040 --> 00:45:33,599
these jokes all right so what i've

00:45:31,680 --> 00:45:34,880
essentially got is i'm gonna have two

00:45:33,599 --> 00:45:36,640
players and i'm gonna put them in a

00:45:34,880 --> 00:45:40,160
little object um

00:45:36,640 --> 00:45:43,040
which uh keeps track of which

00:45:40,160 --> 00:45:44,480
players i have available in my game here

00:45:43,040 --> 00:45:47,920
that i'm playing

00:45:44,480 --> 00:45:48,800
now i could try to have two generators

00:45:47,920 --> 00:45:52,079
directly

00:45:48,800 --> 00:45:53,920
call each other's next methods

00:45:52,079 --> 00:45:57,040
um to try and like go back and forth

00:45:53,920 --> 00:45:57,040
like that but the problem is

00:45:57,359 --> 00:46:00,800
javascript knows when a generator is

00:45:59,359 --> 00:46:02,400
currently running

00:46:00,800 --> 00:46:03,920
and if a generator if one generator is

00:46:02,400 --> 00:46:04,560
running and it tries to pass control to

00:46:03,920 --> 00:46:06,640
another

00:46:04,560 --> 00:46:10,000
and that other generator is also running

00:46:06,640 --> 00:46:11,359
and passes control back to the first one

00:46:10,000 --> 00:46:13,599
you're going to hit an error that says

00:46:11,359 --> 00:46:15,200
that the generator is already executing

00:46:13,599 --> 00:46:16,240
and so you can't call its next method

00:46:15,200 --> 00:46:18,560
again

00:46:16,240 --> 00:46:20,240
so instead what i'm doing and this is

00:46:18,560 --> 00:46:21,599
also stolen from one of the references

00:46:20,240 --> 00:46:24,319
that i'll show you in a second

00:46:21,599 --> 00:46:26,400
um is i'm i'm setting up a little cue

00:46:24,319 --> 00:46:28,000
it's sort of like a message queue

00:46:26,400 --> 00:46:30,240
and i've got a little function called

00:46:28,000 --> 00:46:31,119
send which is going to take the name of

00:46:30,240 --> 00:46:33,599
a player

00:46:31,119 --> 00:46:35,280
who i want to receive a message and some

00:46:33,599 --> 00:46:36,880
message that i want them to receive

00:46:35,280 --> 00:46:39,200
and it's going to push that onto the

00:46:36,880 --> 00:46:41,680
queue and it's also just going to log

00:46:39,200 --> 00:46:43,359
out what messages are being sent

00:46:41,680 --> 00:46:45,040
and so then i'm going to have a little

00:46:43,359 --> 00:46:47,359
run function

00:46:45,040 --> 00:46:49,040
which is basically going to take things

00:46:47,359 --> 00:46:50,240
off of this queue so as long as there's

00:46:49,040 --> 00:46:53,599
something in the queue

00:46:50,240 --> 00:46:54,720
it's going to shift the first thing off

00:46:53,599 --> 00:46:57,119
it's going to grab the name and the

00:46:54,720 --> 00:46:58,800
message and then it's going to find the

00:46:57,119 --> 00:47:00,480
player with that name using my little

00:46:58,800 --> 00:47:02,880
players directory here

00:47:00,480 --> 00:47:04,560
and call its next message let's call its

00:47:02,880 --> 00:47:06,240
next method with the message so

00:47:04,560 --> 00:47:09,200
essentially passing in

00:47:06,240 --> 00:47:10,240
that input as we saw to that to its next

00:47:09,200 --> 00:47:12,560
um

00:47:10,240 --> 00:47:14,480
uh yield statement so this is just this

00:47:12,560 --> 00:47:17,520
little bit of indirection

00:47:14,480 --> 00:47:18,079
is necessary to escape that um that kind

00:47:17,520 --> 00:47:20,559
of like

00:47:18,079 --> 00:47:21,920
you can't call into a generator that

00:47:20,559 --> 00:47:24,319
you're already calling into

00:47:21,920 --> 00:47:25,760
error which i could show you if we had a

00:47:24,319 --> 00:47:27,119
little bit more time but just trust me

00:47:25,760 --> 00:47:30,079
there's an error there

00:47:27,119 --> 00:47:30,720
so what i've got now is i've got two

00:47:30,079 --> 00:47:32,559
little

00:47:30,720 --> 00:47:33,680
players which are written as generator

00:47:32,559 --> 00:47:35,119
functions i've got somebody who's

00:47:33,680 --> 00:47:38,160
knocking

00:47:35,119 --> 00:47:40,400
who is going to send

00:47:38,160 --> 00:47:41,760
messages to um the person who's going to

00:47:40,400 --> 00:47:43,280
be asking questions so i've called the

00:47:41,760 --> 00:47:44,880
asker

00:47:43,280 --> 00:47:46,880
so the knocker is going to start things

00:47:44,880 --> 00:47:49,119
off by saying knock knock

00:47:46,880 --> 00:47:50,160
and then it's going to wait for some

00:47:49,119 --> 00:47:53,119
input from

00:47:50,160 --> 00:47:56,160
the other person uh which it's expecting

00:47:53,119 --> 00:47:58,800
to be a question that's who's there

00:47:56,160 --> 00:48:00,000
and if if the if the conversation goes

00:47:58,800 --> 00:48:01,520
as i expect it to

00:48:00,000 --> 00:48:03,599
it's going to keep going with this knock

00:48:01,520 --> 00:48:04,960
knock joke format and similarly the

00:48:03,599 --> 00:48:06,319
asker

00:48:04,960 --> 00:48:08,079
it's not going to say anything at first

00:48:06,319 --> 00:48:09,680
it's just going to get ready to receive

00:48:08,079 --> 00:48:11,599
some kind of input by it but it's just

00:48:09,680 --> 00:48:15,920
going to hop straight to a yield

00:48:11,599 --> 00:48:17,920
and then it's going to get some kind of

00:48:15,920 --> 00:48:19,599
something some input and if that input

00:48:17,920 --> 00:48:21,520
is not the phrase knock knock

00:48:19,599 --> 00:48:22,720
it's going to stop but if it's the

00:48:21,520 --> 00:48:25,359
phrase knock knock it's going to keep

00:48:22,720 --> 00:48:27,040
going with the typical who's there

00:48:25,359 --> 00:48:28,720
etc flow that we know from knock knock

00:48:27,040 --> 00:48:29,680
jokes okay i know this feels really

00:48:28,720 --> 00:48:31,520
weird but it's a very

00:48:29,680 --> 00:48:32,960
silly contrived example but we're going

00:48:31,520 --> 00:48:34,160
to try to get these two things to talk

00:48:32,960 --> 00:48:36,720
to each other

00:48:34,160 --> 00:48:38,720
so what i have to do is first set up my

00:48:36,720 --> 00:48:41,040
my generators my knocker and my asker

00:48:38,720 --> 00:48:43,200
and put those in my players directory

00:48:41,040 --> 00:48:45,680
and then remember the first time i call

00:48:43,200 --> 00:48:46,240
next on any generator it's not ready to

00:48:45,680 --> 00:48:48,000
receive

00:48:46,240 --> 00:48:49,920
input yet so if i want these two

00:48:48,000 --> 00:48:51,040
generators to be co-routines that are

00:48:49,920 --> 00:48:54,160
talking to each other

00:48:51,040 --> 00:48:54,640
i have to basically first call the next

00:48:54,160 --> 00:48:58,000
method

00:48:54,640 --> 00:48:59,520
a first time to get them ready for input

00:48:58,000 --> 00:49:00,559
so i'm going to first get the asker

00:48:59,520 --> 00:49:02,079
ready

00:49:00,559 --> 00:49:03,839
and then i'm going to call i'm going to

00:49:02,079 --> 00:49:07,119
send um a

00:49:03,839 --> 00:49:09,040
a a useless message that's just like go

00:49:07,119 --> 00:49:11,040
into the into the knocker which is going

00:49:09,040 --> 00:49:12,480
to start the conversation as soon as i

00:49:11,040 --> 00:49:14,640
hit run

00:49:12,480 --> 00:49:17,040
so if i've done all this right when i

00:49:14,640 --> 00:49:20,160
hit run right now we should see

00:49:17,040 --> 00:49:23,680
a really hilarious joke ready

00:49:20,160 --> 00:49:25,440
okay oh it did it so

00:49:23,680 --> 00:49:27,359
this is the first two messages are like

00:49:25,440 --> 00:49:29,280
from the system they're telling

00:49:27,359 --> 00:49:31,119
they're telling everybody to get ready

00:49:29,280 --> 00:49:32,960
and then we see the first message from

00:49:31,119 --> 00:49:34,319
the asker

00:49:32,960 --> 00:49:36,800
uh sorry the first message from the

00:49:34,319 --> 00:49:40,079
knocker the asker responds

00:49:36,800 --> 00:49:44,160
the knocker responds the asker responds

00:49:40,079 --> 00:49:47,119
with the context that it got and finally

00:49:44,160 --> 00:49:48,480
we get a hilarious joke

00:49:47,119 --> 00:49:49,680
okay now you might be saying like all

00:49:48,480 --> 00:49:51,040
right but so what you could have just

00:49:49,680 --> 00:49:52,800
console logged all these things but no

00:49:51,040 --> 00:49:55,599
these two are really actually talking to

00:49:52,800 --> 00:49:58,880
each other like let's say

00:49:55,599 --> 00:50:01,119
let's say the the asker um doesn't feel

00:49:58,880 --> 00:50:02,559
like playing this game

00:50:01,119 --> 00:50:04,400
and it's going to respond that it

00:50:02,559 --> 00:50:06,960
doesn't care

00:50:04,400 --> 00:50:08,480
um i think oh yeah i've redefining

00:50:06,960 --> 00:50:10,160
things so when i run this now

00:50:08,480 --> 00:50:11,839
okay everybody gets ready and then the

00:50:10,160 --> 00:50:14,400
knocker goes knock knock and the oscar

00:50:11,839 --> 00:50:16,640
goes i don't care and everything stops

00:50:14,400 --> 00:50:17,680
right like the rest of the conversation

00:50:16,640 --> 00:50:21,520
didn't happen

00:50:17,680 --> 00:50:21,520
similarly like if i

00:50:21,839 --> 00:50:30,559
if um if we want to give a

00:50:25,119 --> 00:50:34,319
uh like a different response here

00:50:30,559 --> 00:50:36,880
if i run this

00:50:34,319 --> 00:50:38,880
the asker is actually receiving those

00:50:36,880 --> 00:50:41,680
responses right like if the knocker

00:50:38,880 --> 00:50:44,079
gives me different information the asker

00:50:41,680 --> 00:50:45,760
is going to respond to it appropriately

00:50:44,079 --> 00:50:46,319
i didn't change anything about the oscar

00:50:45,760 --> 00:50:47,760
code here

00:50:46,319 --> 00:50:50,559
so these are like really actually

00:50:47,760 --> 00:50:51,760
talking to each other um and

00:50:50,559 --> 00:50:54,720
i don't know about you but i think that

00:50:51,760 --> 00:50:57,280
that's pretty cool what we've kind of

00:50:54,720 --> 00:50:58,640
got here is using these proteins in this

00:50:57,280 --> 00:50:58,960
way with this like message queue we've

00:50:58,640 --> 00:51:00,640
got

00:50:58,960 --> 00:51:02,000
like we're sending messages back and

00:51:00,640 --> 00:51:04,480
forth and we're allowing

00:51:02,000 --> 00:51:06,160
these two generators to like really send

00:51:04,480 --> 00:51:07,920
messages back and forth almost as if

00:51:06,160 --> 00:51:09,359
like in any kind of message passing

00:51:07,920 --> 00:51:10,400
paradigm of programming if you've heard

00:51:09,359 --> 00:51:12,000
me talk about

00:51:10,400 --> 00:51:13,359
like message-based object-oriented

00:51:12,000 --> 00:51:15,280
programming or if you've heard about

00:51:13,359 --> 00:51:16,960
things like the actor model like this is

00:51:15,280 --> 00:51:18,880
kind of in that direction

00:51:16,960 --> 00:51:20,720
so generators and like these these

00:51:18,880 --> 00:51:23,760
co-routiney generators

00:51:20,720 --> 00:51:26,319
um are a really great way to explore

00:51:23,760 --> 00:51:28,319
some of these like these these

00:51:26,319 --> 00:51:28,800
interesting notions of computer science

00:51:28,319 --> 00:51:31,440
but like

00:51:28,800 --> 00:51:33,040
how elements of a program can talk to

00:51:31,440 --> 00:51:33,920
one another so things like the actor

00:51:33,040 --> 00:51:36,559
model um

00:51:33,920 --> 00:51:38,400
things like systems programming where

00:51:36,559 --> 00:51:39,599
you basically have the operating system

00:51:38,400 --> 00:51:41,839
and a bunch of little

00:51:39,599 --> 00:51:43,200
uh task processes like sending messages

00:51:41,839 --> 00:51:45,520
back and forth to each other

00:51:43,200 --> 00:51:47,440
to decide what's gonna happen when this

00:51:45,520 --> 00:51:50,960
is like a huge window

00:51:47,440 --> 00:51:52,800
into all of that stuff um

00:51:50,960 --> 00:51:54,079
so yeah i know we're pretty much like a

00:51:52,800 --> 00:51:56,160
couple minutes over time

00:51:54,079 --> 00:51:58,480
some folks have to go um if you have to

00:51:56,160 --> 00:51:59,040
run no worries so great seeing everybody

00:51:58,480 --> 00:52:01,280
um

00:51:59,040 --> 00:52:02,880
but if folks have a couple minutes and

00:52:01,280 --> 00:52:04,640
alex i don't know if we have like a

00:52:02,880 --> 00:52:07,040
couple minutes there's one other cool

00:52:04,640 --> 00:52:10,160
thing you can do with this weird actory

00:52:07,040 --> 00:52:12,480
carrotini message passing thing okay so

00:52:10,160 --> 00:52:14,640
you know how i love recursion

00:52:12,480 --> 00:52:15,920
if you've if you've seen any of my talks

00:52:14,640 --> 00:52:16,559
you know i love recursion and if you

00:52:15,920 --> 00:52:18,079
haven't

00:52:16,559 --> 00:52:20,319
just take it from me i love recursion

00:52:18,079 --> 00:52:22,800
and i also love breaking recursion

00:52:20,319 --> 00:52:23,760
um so again my talk from 2018 i talk

00:52:22,800 --> 00:52:27,200
about like um

00:52:23,760 --> 00:52:30,559
the recursion limits and stack overflows

00:52:27,200 --> 00:52:33,520
and if you've um if you've ever run

00:52:30,559 --> 00:52:36,319
into something called mutual recursion

00:52:33,520 --> 00:52:38,559
you might have run into a stack overflow

00:52:36,319 --> 00:52:40,400
uh or in some browsers it's called like

00:52:38,559 --> 00:52:40,960
in firefox it's a too much recursion

00:52:40,400 --> 00:52:42,800
error

00:52:40,960 --> 00:52:44,319
um you might have run into an error

00:52:42,800 --> 00:52:46,160
where it's not just that i'm like

00:52:44,319 --> 00:52:46,640
recursing infinitely in a while loop or

00:52:46,160 --> 00:52:48,800
something

00:52:46,640 --> 00:52:50,240
but i can have two functions that are

00:52:48,800 --> 00:52:52,800
calling into each other

00:52:50,240 --> 00:52:54,960
and creating a mutual recursive loop

00:52:52,800 --> 00:52:56,640
which blows my stack so for example here

00:52:54,960 --> 00:52:57,040
i've got two really simple functions

00:52:56,640 --> 00:52:58,800
ping

00:52:57,040 --> 00:53:00,319
and pong and they're just basically

00:52:58,800 --> 00:53:02,720
calling each other

00:53:00,319 --> 00:53:03,839
um incrementing a number so they're

00:53:02,720 --> 00:53:05,040
pinging back and forth so they're

00:53:03,839 --> 00:53:06,160
starting with zero it'll be like ping

00:53:05,040 --> 00:53:09,280
zero ping one

00:53:06,160 --> 00:53:11,280
sorry ping zero pong one ping two pong

00:53:09,280 --> 00:53:12,880
three and so on and so forth back and

00:53:11,280 --> 00:53:16,240
forth add infinitum

00:53:12,880 --> 00:53:18,720
until i hit the uh

00:53:16,240 --> 00:53:20,640
the the memory limit on my call stack

00:53:18,720 --> 00:53:21,599
because i have too many frames piling up

00:53:20,640 --> 00:53:23,920
on my call stack

00:53:21,599 --> 00:53:25,599
and i get a stack overflow error or too

00:53:23,920 --> 00:53:27,200
much recursion error

00:53:25,599 --> 00:53:28,720
in this case i was able i did this

00:53:27,200 --> 00:53:30,000
beforehand just so i wouldn't slow my

00:53:28,720 --> 00:53:31,839
browser down right now

00:53:30,000 --> 00:53:33,440
but i did this beforehand and got up to

00:53:31,839 --> 00:53:36,480
like around 30 000

00:53:33,440 --> 00:53:39,599
um ping pongs before before hitting this

00:53:36,480 --> 00:53:41,040
error now uh i

00:53:39,599 --> 00:53:43,200
in other talks i've talked about ways to

00:53:41,040 --> 00:53:45,280
escape this using like tail call

00:53:43,200 --> 00:53:47,680
optimization and tail recursion but

00:53:45,280 --> 00:53:51,040
here's another way we can escape this

00:53:47,680 --> 00:53:54,319
if i modify my little um

00:53:51,040 --> 00:53:55,599
knock knock game a little bit um and

00:53:54,319 --> 00:53:56,480
i've just i've just added a little bit

00:53:55,599 --> 00:53:59,520
of uh

00:53:56,480 --> 00:54:01,119
a little bit of uh of

00:53:59,520 --> 00:54:02,880
logging to this send function but don't

00:54:01,119 --> 00:54:04,720
worry about that right now i've replaced

00:54:02,880 --> 00:54:05,599
my knocker and asker with a ping and a

00:54:04,720 --> 00:54:08,720
pong

00:54:05,599 --> 00:54:10,319
um generator players here and in this

00:54:08,720 --> 00:54:11,760
case there's they're they're i'm gonna

00:54:10,319 --> 00:54:13,040
put a max on this because again i'm

00:54:11,760 --> 00:54:14,160
afraid of crashing my browser because

00:54:13,040 --> 00:54:15,119
this whole presentation is in the

00:54:14,160 --> 00:54:18,000
browser and

00:54:15,119 --> 00:54:19,680
yeah i don't know what'll happen but um

00:54:18,000 --> 00:54:20,079
what i've got is i'm basically using the

00:54:19,680 --> 00:54:22,640
same

00:54:20,079 --> 00:54:24,240
the same send function which uh again

00:54:22,640 --> 00:54:24,720
i'll show you what i did in that logging

00:54:24,240 --> 00:54:26,800
in a

00:54:24,720 --> 00:54:28,400
moment but using the same send and the

00:54:26,800 --> 00:54:29,760
same run functions same same

00:54:28,400 --> 00:54:31,839
architecture as before

00:54:29,760 --> 00:54:33,599
i've i'm trying to recreate that mutual

00:54:31,839 --> 00:54:37,119
recursion example so i've got

00:54:33,599 --> 00:54:40,480
a ping which is taking in an n

00:54:37,119 --> 00:54:42,720
and basically sending pong the message

00:54:40,480 --> 00:54:44,960
of the next higher number so it's

00:54:42,720 --> 00:54:47,040
incrementing n and then sending it

00:54:44,960 --> 00:54:48,160
and then i've just put a max a max cap

00:54:47,040 --> 00:54:50,319
here just to again

00:54:48,160 --> 00:54:52,160
make sure i don't crash things until the

00:54:50,319 --> 00:54:55,280
end of the presentation

00:54:52,160 --> 00:54:57,359
um but so what i'm doing now is i'm

00:54:55,280 --> 00:54:59,200
uh setting up my ping in my pong i'm

00:54:57,359 --> 00:55:00,640
sending them each the first message so

00:54:59,200 --> 00:55:01,359
they get ready remember that first call

00:55:00,640 --> 00:55:03,520
to next

00:55:01,359 --> 00:55:05,680
um is necessary so that they can receive

00:55:03,520 --> 00:55:07,359
input and then i'm kicking things off

00:55:05,680 --> 00:55:08,799
the same way essentially as i did with

00:55:07,359 --> 00:55:11,599
my recursive functions with

00:55:08,799 --> 00:55:12,400
um with a call to ping of zero so now if

00:55:11,599 --> 00:55:15,040
i run this

00:55:12,400 --> 00:55:15,760
uh and this is gonna stop after uh just

00:55:15,040 --> 00:55:17,200
a few

00:55:15,760 --> 00:55:19,680
but i can see that this is working

00:55:17,200 --> 00:55:23,040
similar to my knock knock joke yeah

00:55:19,680 --> 00:55:26,240
now what i'm going to do

00:55:23,040 --> 00:55:27,920
is remove these max constraints but to

00:55:26,240 --> 00:55:29,520
keep things sane

00:55:27,920 --> 00:55:30,960
instead of console logging everything

00:55:29,520 --> 00:55:33,280
because that'll make things super slow

00:55:30,960 --> 00:55:35,599
i'm just going to console log

00:55:33,280 --> 00:55:37,520
the the beginning and then the first uh

00:55:35,599 --> 00:55:39,119
or like every time i i hit a thousand

00:55:37,520 --> 00:55:40,240
i'm just gonna let let me know that i'm

00:55:39,119 --> 00:55:42,160
still running

00:55:40,240 --> 00:55:43,920
and then by the time we get to a hundred

00:55:42,160 --> 00:55:46,480
thou sorry a million

00:55:43,920 --> 00:55:49,200
uh i'm pretty confident that we have

00:55:46,480 --> 00:55:51,680
escaped the uh stack memory

00:55:49,200 --> 00:55:53,200
limits so by the time we get to a

00:55:51,680 --> 00:55:54,160
million i'm just gonna stop with a

00:55:53,200 --> 00:55:56,319
return here

00:55:54,160 --> 00:55:57,520
i'm gonna stop sending messages and stop

00:55:56,319 --> 00:56:00,960
this running

00:55:57,520 --> 00:56:02,880
okay so what i expect to happen now

00:56:00,960 --> 00:56:04,160
and anything could happen but when i

00:56:02,880 --> 00:56:07,920
comment out these

00:56:04,160 --> 00:56:09,760
lines if i haven't made any horrible

00:56:07,920 --> 00:56:12,480
mistakes which is a big if

00:56:09,760 --> 00:56:14,240
when i run this code we should see

00:56:12,480 --> 00:56:16,720
something really cool which is this

00:56:14,240 --> 00:56:18,160
escaping this recursion limit all right

00:56:16,720 --> 00:56:19,760
so i'm going to run it's going to tell

00:56:18,160 --> 00:56:20,480
me i have redefined things i'm going to

00:56:19,760 --> 00:56:24,000
refresh

00:56:20,480 --> 00:56:26,640
okay everybody hold on to your butts

00:56:24,000 --> 00:56:28,240
here we go oh okay it's doing something

00:56:26,640 --> 00:56:30,880
it's going it's going it's going

00:56:28,240 --> 00:56:32,720
it made it it made it up to a million

00:56:30,880 --> 00:56:33,200
and nothing crashed right can you still

00:56:32,720 --> 00:56:36,240
hear me

00:56:33,200 --> 00:56:37,720
see me okay so what we've done is using

00:56:36,240 --> 00:56:41,200
this kind of actory

00:56:37,720 --> 00:56:43,359
co-routiney generator architecture

00:56:41,200 --> 00:56:44,480
we've been able to escape the

00:56:43,359 --> 00:56:47,440
constraints

00:56:44,480 --> 00:56:48,480
of mutual recursion um which again is

00:56:47,440 --> 00:56:50,000
just a hobby of mine

00:56:48,480 --> 00:56:51,680
escaping recursion limits is just

00:56:50,000 --> 00:56:53,599
something super fun

00:56:51,680 --> 00:56:55,839
so yeah i don't know but i think that

00:56:53,599 --> 00:56:56,160
this is like super cool and i didn't

00:56:55,839 --> 00:56:58,319
know

00:56:56,160 --> 00:56:59,520
that generators could do any of these

00:56:58,319 --> 00:57:02,799
cool things

00:56:59,520 --> 00:57:04,240
um so yeah over time

00:57:02,799 --> 00:57:06,079
thanks for bearing with me but just to

00:57:04,240 --> 00:57:08,240
sum up real quick

00:57:06,079 --> 00:57:09,440
generators are actually practically

00:57:08,240 --> 00:57:11,359
useful um

00:57:09,440 --> 00:57:13,200
where they're super useful for creating

00:57:11,359 --> 00:57:14,079
custom iterables or for working with

00:57:13,200 --> 00:57:16,160
sequences

00:57:14,079 --> 00:57:17,440
which means and also the fact that they

00:57:16,160 --> 00:57:18,960
can consume data

00:57:17,440 --> 00:57:20,640
as well as put it out means they're

00:57:18,960 --> 00:57:22,240
really great for data processing

00:57:20,640 --> 00:57:23,680
you can actually hook up a bunch of

00:57:22,240 --> 00:57:27,040
generators um

00:57:23,680 --> 00:57:29,280
to to kind of as little like little uh

00:57:27,040 --> 00:57:30,960
data processing units um there's some in

00:57:29,280 --> 00:57:32,640
the resources i'll show you there's some

00:57:30,960 --> 00:57:34,559
you can even you can create like a

00:57:32,640 --> 00:57:36,400
like a like a programming language with

00:57:34,559 --> 00:57:37,040
a tokenizer and a parser all this stuff

00:57:36,400 --> 00:57:39,040
like you can

00:57:37,040 --> 00:57:40,319
you can have tokenizers or do like

00:57:39,040 --> 00:57:42,000
natural language processing and

00:57:40,319 --> 00:57:44,480
generators you can do all kinds of cool

00:57:42,000 --> 00:57:46,400
data processing um they can function as

00:57:44,480 --> 00:57:48,400
sort of state machines like we said they

00:57:46,400 --> 00:57:50,000
maintain that internal state so you can

00:57:48,400 --> 00:57:52,720
uh decide like when to transition

00:57:50,000 --> 00:57:54,720
between states and as we saw i use them

00:57:52,720 --> 00:57:56,480
every day at observable to power

00:57:54,720 --> 00:57:58,160
animation and reactivity

00:57:56,480 --> 00:58:00,400
because of the way observables runtime

00:57:58,160 --> 00:58:02,640
is set up to work with generators

00:58:00,400 --> 00:58:04,000
so they are like practical things i hear

00:58:02,640 --> 00:58:06,400
a lot of javascript programmers be like

00:58:04,000 --> 00:58:09,599
why would i ever use a generator well

00:58:06,400 --> 00:58:11,599
there you go but also more cool they're

00:58:09,599 --> 00:58:12,960
really great for learning computer

00:58:11,599 --> 00:58:15,280
science concepts like

00:58:12,960 --> 00:58:17,440
by playing with these generators um you

00:58:15,280 --> 00:58:19,760
can learn so much about how control flow

00:58:17,440 --> 00:58:21,119
works in systems you can as we saw learn

00:58:19,760 --> 00:58:23,359
about co-routines learn about how

00:58:21,119 --> 00:58:25,520
cooperative multitasking can work

00:58:23,359 --> 00:58:26,720
in systems things like actor models as

00:58:25,520 --> 00:58:28,160
we saw and just

00:58:26,720 --> 00:58:29,839
some really low level systems

00:58:28,160 --> 00:58:30,720
programming like operating systems

00:58:29,839 --> 00:58:33,760
concepts

00:58:30,720 --> 00:58:35,599
um like traps and and signals and things

00:58:33,760 --> 00:58:37,359
like that you can explore all that

00:58:35,599 --> 00:58:39,280
in javascript using generators it's

00:58:37,359 --> 00:58:41,280
super cool you can even learn stuff

00:58:39,280 --> 00:58:42,720
about functional programming like the m

00:58:41,280 --> 00:58:44,559
word

00:58:42,720 --> 00:58:46,319
there's a talk uh that i'll show you in

00:58:44,559 --> 00:58:47,520
a second that that actually explains

00:58:46,319 --> 00:58:49,359
this so um

00:58:47,520 --> 00:58:50,640
i i have some resources here and i'm

00:58:49,359 --> 00:58:52,880
going to share these slides

00:58:50,640 --> 00:58:53,839
um the miracle of generators was this

00:58:52,880 --> 00:58:55,520
talk i saw

00:58:53,839 --> 00:58:57,200
i don't know four or five years ago by

00:58:55,520 --> 00:58:57,920
bottle stoke who's this big functional

00:58:57,200 --> 00:58:59,839
programmer

00:58:57,920 --> 00:59:00,960
um that talks about like what some of

00:58:59,839 --> 00:59:02,720
the stuff i've walked through today but

00:59:00,960 --> 00:59:05,599
in more detail so check that out

00:59:02,720 --> 00:59:07,839
um also really really want to recommend

00:59:05,599 --> 00:59:08,799
there is a python programmer named david

00:59:07,839 --> 00:59:11,040
beasley who

00:59:08,799 --> 00:59:12,400
puts out these awesome computer science

00:59:11,040 --> 00:59:15,040
courses on all kinds of stuff

00:59:12,400 --> 00:59:15,760
um like low level stuff high level all

00:59:15,040 --> 00:59:17,920
kinds of things

00:59:15,760 --> 00:59:19,839
he has some really great courses on

00:59:17,920 --> 00:59:22,559
co-routines and generators

00:59:19,839 --> 00:59:23,359
and systems programming things you can

00:59:22,559 --> 00:59:26,079
do with them

00:59:23,359 --> 00:59:27,440
it is all in python but python

00:59:26,079 --> 00:59:28,880
generators and

00:59:27,440 --> 00:59:30,880
observable generators are really not

00:59:28,880 --> 00:59:32,480
that different and so you can still

00:59:30,880 --> 00:59:34,079
learn a lot even if you're not a python

00:59:32,480 --> 00:59:35,520
programmer from those courses

00:59:34,079 --> 00:59:37,119
and then some other some other um

00:59:35,520 --> 00:59:38,400
reference materials there as well that

00:59:37,119 --> 00:59:40,079
were super helpful to me so

00:59:38,400 --> 00:59:42,559
please like keep learning about

00:59:40,079 --> 00:59:44,880
generators um you know learning is an

00:59:42,559 --> 00:59:46,000
iterative process ah it's an iteration

00:59:44,880 --> 00:59:48,079
path um so

00:59:46,000 --> 00:59:49,680
like don't stop um playing with these

00:59:48,079 --> 00:59:50,720
and just like exploring what you can

00:59:49,680 --> 00:59:52,319
find out through them i

00:59:50,720 --> 00:59:53,359
personally i think that's the coolest

00:59:52,319 --> 00:59:55,119
thing about them is that they're kind of

00:59:53,359 --> 00:59:56,160
like this window onto all of these like

00:59:55,119 --> 00:59:57,760
really hard

00:59:56,160 --> 01:00:01,760
but really interesting computer science

00:59:57,760 --> 01:00:03,599
concepts so yeah thank you so much

01:00:01,760 --> 01:00:05,119
and i'm going to share the link to these

01:00:03,599 --> 01:00:06,880
slides they'll be up on observable i

01:00:05,119 --> 01:00:08,160
forgot to publish before the talk but

01:00:06,880 --> 01:00:09,520
um you'll be able to find them there you

01:00:08,160 --> 01:00:10,960
can reach me on twitter at

01:00:09,520 --> 01:00:13,280
anjennavacheel

01:00:10,960 --> 01:00:14,000
and yeah just want to give a huge shout

01:00:13,280 --> 01:00:16,880
out thank you so

01:00:14,000 --> 01:00:18,079
much alex and the js heroes organizers

01:00:16,880 --> 01:00:20,640
for having me

01:00:18,079 --> 01:00:22,240
again virtually this time um and thank

01:00:20,640 --> 01:00:23,440
you all so much for being here and for

01:00:22,240 --> 01:00:25,599
sticking with me

01:00:23,440 --> 01:00:27,280
through this uh very strange and

01:00:25,599 --> 01:00:28,400
hopefully interesting

01:00:27,280 --> 01:00:30,720
trip through the rabbit hole of

01:00:28,400 --> 01:00:33,760
generators

01:00:30,720 --> 01:00:35,200
all right thank you thank you so much

01:00:33,760 --> 01:00:38,079
this was really great

01:00:35,200 --> 01:00:40,240
uh let's talk afterwards we'll book up

01:00:38,079 --> 01:00:40,799
the next three or four meetups because

01:00:40,240 --> 01:00:42,960
uh

01:00:40,799 --> 01:00:45,200
with this level of entertainment i'm

01:00:42,960 --> 01:00:48,319
sure we can

01:00:45,200 --> 01:00:48,319
we can do a series

01:00:49,359 --> 01:00:53,119
thank you so much for being here

01:00:50,880 --> 01:00:54,160
everybody and um and yeah i don't know

01:00:53,119 --> 01:00:56,079
if folks um

01:00:54,160 --> 01:00:57,839
i know we're over time so i folks have

01:00:56,079 --> 01:00:59,200
to run no worries but um if folks do

01:00:57,839 --> 01:01:00,319
have a couple of questions or things

01:00:59,200 --> 01:01:03,280
like that i'm happy to

01:01:00,319 --> 01:01:03,280
hang out in the chat

01:01:04,160 --> 01:01:08,079
so do we have any questions everyone is

01:01:07,520 --> 01:01:11,839
really

01:01:08,079 --> 01:01:11,839
loving the presentation in the chat

01:01:12,960 --> 01:01:18,160
but feel free to ask would have been fun

01:01:15,760 --> 01:01:20,480
to see on stage

01:01:18,160 --> 01:01:22,799
to get that energy to the public like

01:01:20,480 --> 01:01:25,680
you did in the

01:01:22,799 --> 01:01:26,480
previous years heroes conferences well

01:01:25,680 --> 01:01:28,559
hopefully

01:01:26,480 --> 01:01:29,520
i will uh i will get to see you all

01:01:28,559 --> 01:01:32,559
include some

01:01:29,520 --> 01:01:33,599
other time if not next year 20 20 20 20

01:01:32,559 --> 01:01:34,960
21 is not

01:01:33,599 --> 01:01:37,359
looking amazing either but hopefully

01:01:34,960 --> 01:01:38,400
2022 maybe there's a vaccine or

01:01:37,359 --> 01:01:40,559
something i don't know

01:01:38,400 --> 01:01:42,480
we'll see but eventually um i would love

01:01:40,559 --> 01:01:43,200
to be back uh with you all in person

01:01:42,480 --> 01:01:45,440
includes

01:01:43,200 --> 01:01:47,599
one of these days one of these years

01:01:45,440 --> 01:01:50,880
yeah just a little

01:01:47,599 --> 01:01:52,720
a little insight from uh organizing the

01:01:50,880 --> 01:01:55,520
agenda for js heroes the first

01:01:52,720 --> 01:01:56,400
rule is that anjana stock goes after

01:01:55,520 --> 01:01:59,920
lunch

01:01:56,400 --> 01:01:59,920
when people need energy

01:02:02,559 --> 01:02:06,000
yeah in case you missed her talks or you

01:02:05,200 --> 01:02:08,000
have never seen

01:02:06,000 --> 01:02:10,400
one of her talks i think you have one of

01:02:08,000 --> 01:02:13,520
the most popular talks in tech right the

01:02:10,400 --> 01:02:16,960
functional programming one it has like

01:02:13,520 --> 01:02:19,680
hundreds of thousands of views

01:02:16,960 --> 01:02:21,359
uh it's the the learning functional

01:02:19,680 --> 01:02:22,240
programming in javascript talk yeah it

01:02:21,359 --> 01:02:24,079
um

01:02:22,240 --> 01:02:25,920
i think i don't know folks folks found

01:02:24,079 --> 01:02:28,880
it uh accessible

01:02:25,920 --> 01:02:30,880
which i to me is really important um for

01:02:28,880 --> 01:02:32,480
beginners to to be able to relate to

01:02:30,880 --> 01:02:35,359
these kind of trickier

01:02:32,480 --> 01:02:36,640
um computer science concepts like

01:02:35,359 --> 01:02:37,680
functional program or whatever because

01:02:36,640 --> 01:02:38,319
the reason it's important to me is

01:02:37,680 --> 01:02:40,880
because i

01:02:38,319 --> 01:02:42,480
am a perpetual beginner and i don't know

01:02:40,880 --> 01:02:44,160
what i'm talking about so i love it when

01:02:42,480 --> 01:02:46,400
we all just get to like

01:02:44,160 --> 01:02:48,000
learn together and share the few tiny

01:02:46,400 --> 01:02:49,760
things we do know

01:02:48,000 --> 01:02:51,200
um so yeah if you're curious about the

01:02:49,760 --> 01:02:52,799
basics of functional programming i have

01:02:51,200 --> 01:02:54,559
a talk about it and i think

01:02:52,799 --> 01:02:56,400
also my past js heroes talks have gone

01:02:54,559 --> 01:02:59,440
into some of the um

01:02:56,400 --> 01:02:59,680
the um like uh nitty gritty of some of

01:02:59,440 --> 01:03:00,640
the

01:02:59,680 --> 01:03:02,880
some of the functional programming

01:03:00,640 --> 01:03:06,160
concepts that i find pretty fun

01:03:02,880 --> 01:03:08,799
and cool yeah i think they were

01:03:06,160 --> 01:03:11,280
shared or one one of the links is

01:03:08,799 --> 01:03:13,599
already shared here

01:03:11,280 --> 01:03:14,880
so i just published my slides i'm sorry

01:03:13,599 --> 01:03:16,720
that i didn't have those public um

01:03:14,880 --> 01:03:17,280
beforehand but uh you should now be able

01:03:16,720 --> 01:03:20,079
to find them

01:03:17,280 --> 01:03:20,640
at that url that i just dropped in the

01:03:20,079 --> 01:03:22,319
chat

01:03:20,640 --> 01:03:24,160
and um hopefully we can like get it on

01:03:22,319 --> 01:03:26,000
the get it on the video or what have you

01:03:24,160 --> 01:03:29,359
so folks can find it later too

01:03:26,000 --> 01:03:31,599
um but yeah uh

01:03:29,359 --> 01:03:33,520
be careful with some of that code don't

01:03:31,599 --> 01:03:35,200
don't maybe don't run some of the

01:03:33,520 --> 01:03:38,160
some of the infinite code if you don't

01:03:35,200 --> 01:03:38,160
want your browser to crash

01:03:38,720 --> 01:03:43,200
i'm curious about something uh you you

01:03:41,839 --> 01:03:46,319
kind of

01:03:43,200 --> 01:03:48,640
you you kind of took back the time like

01:03:46,319 --> 01:03:50,319
you you reminded me of the period when

01:03:48,640 --> 01:03:52,319
like right after generators

01:03:50,319 --> 01:03:53,520
were announced and everybody was super

01:03:52,319 --> 01:03:55,920
hyped

01:03:53,520 --> 01:03:57,280
and then it kind of dropped because i

01:03:55,920 --> 01:04:00,880
think async await

01:03:57,280 --> 01:04:03,119
was uh very fast to be standard

01:04:00,880 --> 01:04:04,880
like chrome i think implemented it on

01:04:03,119 --> 01:04:06,880
the fly so then everybody started

01:04:04,880 --> 01:04:08,319
looking at async awaiting all these

01:04:06,880 --> 01:04:09,839
there were libraries that supported this

01:04:08,319 --> 01:04:10,960
but i remember a time when we were

01:04:09,839 --> 01:04:14,319
looking at libraries like

01:04:10,960 --> 01:04:17,440
co to do asynchronous stuff

01:04:14,319 --> 01:04:19,039
exactly yeah like generators were like

01:04:17,440 --> 01:04:20,400
oh my god this is the best

01:04:19,039 --> 01:04:23,280
thing that's gonna happen to this

01:04:20,400 --> 01:04:25,440
language in in years but

01:04:23,280 --> 01:04:26,559
since i guess since people switch to

01:04:25,440 --> 01:04:28,880
async awaits

01:04:26,559 --> 01:04:30,000
they don't really find the use cases

01:04:28,880 --> 01:04:33,200
anymore so

01:04:30,000 --> 01:04:35,119
i know i guess what you presented today

01:04:33,200 --> 01:04:37,440
is a great example of things that could

01:04:35,119 --> 01:04:39,520
be still done with generators

01:04:37,440 --> 01:04:41,920
yeah so yeah exactly now that we have a

01:04:39,520 --> 01:04:43,760
weight and async like i don't

01:04:41,920 --> 01:04:46,079
you wouldn't write that um that

01:04:43,760 --> 01:04:46,640
async-ish kind of code with generators

01:04:46,079 --> 01:04:48,480
anymore

01:04:46,640 --> 01:04:50,160
but i still think again it's useful like

01:04:48,480 --> 01:04:51,440
to to think about how that would work to

01:04:50,160 --> 01:04:54,000
to understand

01:04:51,440 --> 01:04:55,440
how how like that control flow can work

01:04:54,000 --> 01:04:57,119
can be passed back and forth

01:04:55,440 --> 01:04:59,680
but also the other stuff that we talked

01:04:57,119 --> 01:05:02,960
about iterators iterables like i don't i

01:04:59,680 --> 01:05:04,559
i i'm just constantly surprised like how

01:05:02,960 --> 01:05:06,000
generators and maybe it's because like i

01:05:04,559 --> 01:05:08,640
came from a python background where like

01:05:06,000 --> 01:05:09,839
people do use generators for intervals

01:05:08,640 --> 01:05:12,640
and all kinds of stuff

01:05:09,839 --> 01:05:14,000
um it's sort of just like a tool like

01:05:12,640 --> 01:05:15,599
another tool in the toolbox

01:05:14,000 --> 01:05:17,440
um and in javascript i feel like what

01:05:15,599 --> 01:05:19,280
you know people did get really excited

01:05:17,440 --> 01:05:20,799
about the implications for control flow

01:05:19,280 --> 01:05:23,359
and asynchronicity but

01:05:20,799 --> 01:05:24,480
they they kind of under-appreciated the

01:05:23,359 --> 01:05:26,480
rest of the cool things

01:05:24,480 --> 01:05:28,880
that generators open up for us so that's

01:05:26,480 --> 01:05:31,680
why i know it's like it's not really a

01:05:28,880 --> 01:05:33,280
hot topic or anything anymore um but

01:05:31,680 --> 01:05:35,200
that's why i just like i just

01:05:33,280 --> 01:05:36,319
feel like generators need some more love

01:05:35,200 --> 01:05:38,400
so thank you for

01:05:36,319 --> 01:05:40,720
letting me nerd out about generators and

01:05:38,400 --> 01:05:43,359
why i love them so much

01:05:40,720 --> 01:05:44,960
and do you know if uh like for example

01:05:43,359 --> 01:05:47,039
you mentioned at some point

01:05:44,960 --> 01:05:48,480
uh state machines and state machine

01:05:47,039 --> 01:05:50,319
libraries do you know if

01:05:48,480 --> 01:05:51,520
they in general are implemented on top

01:05:50,319 --> 01:05:53,760
of generators

01:05:51,520 --> 01:05:55,520
i don't know i mean that's a good

01:05:53,760 --> 01:05:57,039
question like there's a lot of ways that

01:05:55,520 --> 01:05:59,039
you could implement state machines right

01:05:57,039 --> 01:06:01,280
and you might have

01:05:59,039 --> 01:06:02,720
reasons for preferring like maybe a more

01:06:01,280 --> 01:06:04,559
full-fledged um

01:06:02,720 --> 01:06:06,640
solution that's probably gonna have like

01:06:04,559 --> 01:06:09,119
their own kind of

01:06:06,640 --> 01:06:10,480
object-like representations of states um

01:06:09,119 --> 01:06:13,520
i don't i don't know a ton

01:06:10,480 --> 01:06:15,920
about state machine programming um i

01:06:13,520 --> 01:06:16,799
uh i know they definitely wanna if

01:06:15,920 --> 01:06:18,160
anybody's curious about that you

01:06:16,799 --> 01:06:20,319
definitely want to take out check out

01:06:18,160 --> 01:06:22,319
david korsheed's work um the x-state

01:06:20,319 --> 01:06:23,920
creator but um i'm not too sure about

01:06:22,319 --> 01:06:25,680
how those are implemented under the hood

01:06:23,920 --> 01:06:26,960
but if you just need if you need like a

01:06:25,680 --> 01:06:28,400
tiny little state machine that's just

01:06:26,960 --> 01:06:29,520
like my little bank account example i

01:06:28,400 --> 01:06:30,640
mean that's contrived but

01:06:29,520 --> 01:06:33,119
do you need something that's just kind

01:06:30,640 --> 01:06:36,160
of like i don't know

01:06:33,119 --> 01:06:37,359
uh remembering the the number of clicks

01:06:36,160 --> 01:06:38,400
to something or what have you and you're

01:06:37,359 --> 01:06:40,400
not working in like

01:06:38,400 --> 01:06:41,839
a whole web framework that already has

01:06:40,400 --> 01:06:43,680
its own notions of how it wants to

01:06:41,839 --> 01:06:45,200
manage state and how it wants to

01:06:43,680 --> 01:06:46,880
like think about that which the thing is

01:06:45,200 --> 01:06:48,559
a lot of us day-to-day are

01:06:46,880 --> 01:06:49,680
um you could certainly use a generator

01:06:48,559 --> 01:06:50,480
to like implement a tiny little

01:06:49,680 --> 01:06:52,880
lightweight

01:06:50,480 --> 01:06:54,480
um sort of state machiney thing um but

01:06:52,880 --> 01:06:55,760
again it's also useful for kind of

01:06:54,480 --> 01:06:57,200
understanding

01:06:55,760 --> 01:06:59,200
understanding how those could work and

01:06:57,200 --> 01:07:03,119
understanding what the concept of like

01:06:59,200 --> 01:07:03,839
um of having the notion of being in a

01:07:03,119 --> 01:07:06,400
state

01:07:03,839 --> 01:07:07,839
and transitioning between states like

01:07:06,400 --> 01:07:10,000
can can feel like

01:07:07,839 --> 01:07:12,079
so again even if you wouldn't if you

01:07:10,000 --> 01:07:13,359
would use some out-of-the-box solution

01:07:12,079 --> 01:07:14,799
or some state management system that

01:07:13,359 --> 01:07:15,599
that goes along with your framework or

01:07:14,799 --> 01:07:18,079
what have you

01:07:15,599 --> 01:07:19,280
to do that in real life day to day like

01:07:18,079 --> 01:07:20,400
i still think that playing around with

01:07:19,280 --> 01:07:22,079
it a little bit is a

01:07:20,400 --> 01:07:23,760
is a useful way to kind of like

01:07:22,079 --> 01:07:27,680
internalize those notions and

01:07:23,760 --> 01:07:32,160
and really um like grok those concepts

01:07:27,680 --> 01:07:32,160
for me anyway i i find it helpful

01:07:32,880 --> 01:07:38,160
do we have any other questions maybe

01:07:36,319 --> 01:07:40,000
i don't see i don't know if i missed

01:07:38,160 --> 01:07:43,839
anything in the back scroll but i don't

01:07:40,000 --> 01:07:48,000
see any questions from the chat

01:07:43,839 --> 01:07:49,440
but uh yeah hopefully so so this this

01:07:48,000 --> 01:07:51,200
notebook that the slides are in

01:07:49,440 --> 01:07:52,799
um this is an observable notebook that

01:07:51,200 --> 01:07:54,799
now is public so anybody can

01:07:52,799 --> 01:07:56,000
you can you can read it you can fork it

01:07:54,799 --> 01:07:58,160
um you can

01:07:56,000 --> 01:07:59,520
um you know play with the code live in

01:07:58,160 --> 01:08:00,319
the in your browser without doing

01:07:59,520 --> 01:08:02,400
anything you can just

01:08:00,319 --> 01:08:04,559
mess with it um but you can also leave

01:08:02,400 --> 01:08:06,240
comments on cells um

01:08:04,559 --> 01:08:07,760
so if you have a question about anything

01:08:06,240 --> 01:08:09,680
feel free to also like leave a comment

01:08:07,760 --> 01:08:12,240
on that notebook

01:08:09,680 --> 01:08:14,960
or hit me up on twitter or all of the

01:08:12,240 --> 01:08:18,080
all of the above what have you

01:08:14,960 --> 01:08:20,000
okay great

01:08:18,080 --> 01:08:21,279
then if we don't have any other

01:08:20,000 --> 01:08:24,319
questions

01:08:21,279 --> 01:08:28,080
i guess we can call it today i mean uh

01:08:24,319 --> 01:08:28,080
for us it's almost nice

01:08:28,239 --> 01:08:31,440
for me i'm just getting started i'm

01:08:29,359 --> 01:08:33,359
gonna go to work right now

01:08:31,440 --> 01:08:34,799
yeah but uh thank you so much for having

01:08:33,359 --> 01:08:36,960
me thanks everybody for sticking around

01:08:34,799 --> 01:08:37,920
i know we went a little over time but um

01:08:36,960 --> 01:08:41,440
really great to

01:08:37,920 --> 01:08:44,159
see you all virtually or in the chat

01:08:41,440 --> 01:08:44,560
and uh yeah thank you again for having

01:08:44,159 --> 01:08:46,960
me

01:08:44,560 --> 01:08:47,920
um it's always such a joy to be at js

01:08:46,960 --> 01:08:50,080
heroes um

01:08:47,920 --> 01:08:51,520
love this crowd so hope to see you all

01:08:50,080 --> 01:08:53,839
again soon

01:08:51,520 --> 01:08:54,640
in person sooner rather than later

01:08:53,839 --> 01:08:56,719
likewise

01:08:54,640 --> 01:08:57,920
thank you and if anyone wants to hang

01:08:56,719 --> 01:09:00,560
around for a

01:08:57,920 --> 01:09:01,359
small chat for two three five minutes

01:09:00,560 --> 01:09:04,480
feel free

01:09:01,359 --> 01:09:07,040
if not have a great evening day

01:09:04,480 --> 01:09:07,040
wherever you

01:09:09,359 --> 01:09:14,960
thanks everybody thank you very much

01:09:12,640 --> 01:09:14,960
bye

01:09:19,279 --> 01:09:22,799
um angelina i just when you said while

01:09:22,239 --> 01:09:25,920
true

01:09:22,799 --> 01:09:28,640
i remember my first meet ups at gs

01:09:25,920 --> 01:09:31,120
heroes was one about generators

01:09:28,640 --> 01:09:33,440
i don't know if you alex remember was

01:09:31,120 --> 01:09:36,000
gabrielle limber presenting

01:09:33,440 --> 01:09:38,319
and i saw there i was the being i was

01:09:36,000 --> 01:09:40,400
like while true i was like no this is

01:09:38,319 --> 01:09:42,400
not possible

01:09:40,400 --> 01:09:43,520
it was almost with the hand up like hey

01:09:42,400 --> 01:09:45,839
hey it's

01:09:43,520 --> 01:09:48,000
an error there and then it was a yield

01:09:45,839 --> 01:09:48,880
later and he explained everything and i

01:09:48,000 --> 01:09:51,920
was like okay

01:09:48,880 --> 01:09:53,679
now i got it but yeah well super strange

01:09:51,920 --> 01:09:55,440
especially whenever in the beginning

01:09:53,679 --> 01:09:56,960
it's like fear not like for example i

01:09:55,440 --> 01:09:57,840
showed you that while true that is

01:09:56,960 --> 01:09:59,600
actually running

01:09:57,840 --> 01:10:01,199
in my browser right now the well true in

01:09:59,600 --> 01:10:02,880
the um and the now

01:10:01,199 --> 01:10:04,400
uh generator for the observable standard

01:10:02,880 --> 01:10:06,080
library that's like

01:10:04,400 --> 01:10:08,159
constantly generating the time the

01:10:06,080 --> 01:10:09,600
current times down um

01:10:08,159 --> 01:10:11,600
it is just running it's just running a

01:10:09,600 --> 01:10:13,280
while loop forever forever

01:10:11,600 --> 01:10:15,679
it's great it's great because you can

01:10:13,280 --> 01:10:17,199
just pause every time uh and you know

01:10:15,679 --> 01:10:20,640
don't you're not blocking anything so

01:10:17,199 --> 01:10:22,400
yeah i love i love wild truths now

01:10:20,640 --> 01:10:24,080
used to strengthen clear into my heart

01:10:22,400 --> 01:10:29,199
stop the recording

01:10:24,080 --> 01:10:29,199

YouTube URL: https://www.youtube.com/watch?v=MR-87Fwoq2A


