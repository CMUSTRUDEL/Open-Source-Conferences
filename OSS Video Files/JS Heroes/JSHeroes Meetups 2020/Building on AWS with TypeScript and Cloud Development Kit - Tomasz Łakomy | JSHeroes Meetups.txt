Title: Building on AWS with TypeScript and Cloud Development Kit - Tomasz Łakomy | JSHeroes Meetups
Publication date: 2020-11-24
Playlist: JSHeroes Meetups 2020
Description: 
	Cloud is eating the (software) world. More and more teams, companies and organizations are building their infrastructure and applications on AWS (Amazon Web Services) Cloud. Once you start exploring the abyss that is AWS and their diverse range of services it's clear that it's a *whole new world* to explore.

What if there was a way for us, web developers, to translate our existing skills into the world of AWS and use them to harness the power of S3, Lambda, DynamoDB and all the other services?

AWS CDK (Cloud Development Kit) makes it possible - in this talk we're going to learn how we can use CDK to define, build and provision infrastructure on AWS using TypeScript! After watching this talk you'll be on your way to become an even-fuller-stack developer - backend/frontend/infra, everything can be built with a single programming language - TS.

About the speaker:
Tomasz is a Senior Frontend Developer at OLX Group. Tech speaker, egghead.io instructor, AWS Certified. His interests include React, Svelte, AWS, VR and making cheesiest jokes known to mankind.
Captions: 
	00:00:04,000 --> 00:00:09,200
okay

00:00:04,799 --> 00:00:13,440
uh so welcome everyone um

00:00:09,200 --> 00:00:17,760
it is uh it is nice to see um

00:00:13,440 --> 00:00:20,800
cia see the community coming back

00:00:17,760 --> 00:00:24,800
again we are continuing the

00:00:20,800 --> 00:00:28,800
um the series of events

00:00:24,800 --> 00:00:32,160
with uh former speakers of just heroes

00:00:28,800 --> 00:00:36,559
or what would have been uh 2020

00:00:32,160 --> 00:00:40,399
speakers and trainers at js heroes

00:00:36,559 --> 00:00:41,200
uh thomas was supposed to give actually

00:00:40,399 --> 00:00:45,200
a

00:00:41,200 --> 00:00:49,120
smelt workshop uh back in april

00:00:45,200 --> 00:00:51,680
and he was a speaker in 2019 uh

00:00:49,120 --> 00:00:52,160
for those of you who were at the event

00:00:51,680 --> 00:00:54,800
or

00:00:52,160 --> 00:00:55,440
if you saw the recording where he spoke

00:00:54,800 --> 00:00:57,920
about

00:00:55,440 --> 00:00:59,840
testing with cyprus and today he's

00:00:57,920 --> 00:01:02,079
actually going to present

00:00:59,840 --> 00:01:03,600
or he's going to talk about his third

00:01:02,079 --> 00:01:07,520
passion

00:01:03,600 --> 00:01:11,200
which is aws right

00:01:07,520 --> 00:01:12,400
so yeah i would like to introduce

00:01:11,200 --> 00:01:14,240
yourself and

00:01:12,400 --> 00:01:16,080
you can start whenever you're ready

00:01:14,240 --> 00:01:17,439
awesome uh in the meantime i'm going to

00:01:16,080 --> 00:01:20,080
start showing my screen

00:01:17,439 --> 00:01:21,439
uh so hello everyone my name is thomas

00:01:20,080 --> 00:01:24,240
walcombe i am a

00:01:21,439 --> 00:01:24,640
senior fronted engineer at oleg's group

00:01:24,240 --> 00:01:27,119
and

00:01:24,640 --> 00:01:28,479
apart from that i've been also teaching

00:01:27,119 --> 00:01:31,360
on ahead at io

00:01:28,479 --> 00:01:32,799
so i have over 170 lessons recorded for

00:01:31,360 --> 00:01:35,920
for that platform

00:01:32,799 --> 00:01:37,439
uh and as alex said for the last

00:01:35,920 --> 00:01:40,560
i think year and a half i've been quite

00:01:37,439 --> 00:01:42,079
interested in the world of uh aws

00:01:40,560 --> 00:01:44,079
last year i managed to get away

00:01:42,079 --> 00:01:45,119
certified i'm getting my second

00:01:44,079 --> 00:01:47,840
certificate

00:01:45,119 --> 00:01:49,520
uh like 10 days from now and i'm very

00:01:47,840 --> 00:01:52,640
excited to talk to you about

00:01:49,520 --> 00:01:52,880
how can we build on aws with typescript

00:01:52,640 --> 00:01:55,280
and

00:01:52,880 --> 00:01:56,000
cloud development kit another way how

00:01:55,280 --> 00:01:58,159
can we

00:01:56,000 --> 00:01:59,759
web developers translate our existing

00:01:58,159 --> 00:02:02,159
skills into the world

00:01:59,759 --> 00:02:04,320
of uh cloud so i'm going to fight my

00:02:02,159 --> 00:02:06,880
mouse because i'm fighting with it

00:02:04,320 --> 00:02:07,600
all right so uh before we start i would

00:02:06,880 --> 00:02:09,520
like to

00:02:07,600 --> 00:02:12,160
quickly uh take you through my very

00:02:09,520 --> 00:02:15,200
first encounter with aws because

00:02:12,160 --> 00:02:18,239
uh i was not always somebody who knew uh

00:02:15,200 --> 00:02:19,200
a bit about aws back in 2016 i was

00:02:18,239 --> 00:02:22,239
working on this

00:02:19,200 --> 00:02:24,959
uh so i i got hired for

00:02:22,239 --> 00:02:26,160
uh for a project and we are working on

00:02:24,959 --> 00:02:28,160
online casinos

00:02:26,160 --> 00:02:29,840
and as you can imagine like every single

00:02:28,160 --> 00:02:32,480
product i was involved in

00:02:29,840 --> 00:02:34,560
it was a huge success because it was

00:02:32,480 --> 00:02:38,720
closed down uh two years later

00:02:34,560 --> 00:02:41,040
uh in any case we were working on this

00:02:38,720 --> 00:02:43,200
and we got all those images for

00:02:41,040 --> 00:02:45,840
different casino games and whatnot

00:02:43,200 --> 00:02:46,640
and i was told to there you go you have

00:02:45,840 --> 00:02:49,200
those images

00:02:46,640 --> 00:02:51,680
as a zip file or whatever and yeah yeah

00:02:49,200 --> 00:02:55,599
just put those images on as free

00:02:51,680 --> 00:02:58,080
and i i remember thinking what

00:02:55,599 --> 00:02:58,879
what exactly is sv what are we talking

00:02:58,080 --> 00:03:00,800
about

00:02:58,879 --> 00:03:02,720
because like in in the world of cloud

00:03:00,800 --> 00:03:04,720
and native blast uh

00:03:02,720 --> 00:03:07,120
some people i mean in general in the

00:03:04,720 --> 00:03:09,120
world of tech sometimes people assume

00:03:07,120 --> 00:03:10,879
that just because they know something it

00:03:09,120 --> 00:03:12,879
is obvious to everybody else which

00:03:10,879 --> 00:03:14,959
cannot be further from the truth

00:03:12,879 --> 00:03:16,239
uh just to let you know by the way what

00:03:14,959 --> 00:03:19,519
the heck is

00:03:16,239 --> 00:03:20,720
is free so what i'm going to do is that

00:03:19,519 --> 00:03:23,680
i am going to actually

00:03:20,720 --> 00:03:25,519
quote the amazon s3 landing page and i'm

00:03:23,680 --> 00:03:27,920
going to do that for a reason

00:03:25,519 --> 00:03:30,560
so first off amazon simple storage

00:03:27,920 --> 00:03:33,360
service also known as amazon s3

00:03:30,560 --> 00:03:34,319
is an object storage service that offers

00:03:33,360 --> 00:03:36,720
industry leading

00:03:34,319 --> 00:03:37,920
scalability data availability security

00:03:36,720 --> 00:03:40,959
and performance

00:03:37,920 --> 00:03:44,080
it is designed for 90.999

00:03:40,959 --> 00:03:45,760
11 9 of durability and stores data

00:03:44,080 --> 00:03:48,080
for millions of applications for

00:03:45,760 --> 00:03:50,400
companies all around the world

00:03:48,080 --> 00:03:51,760
and the only reason why i've read those

00:03:50,400 --> 00:03:54,720
two long sentences

00:03:51,760 --> 00:03:56,000
is to kind of show you how sometimes

00:03:54,720 --> 00:03:57,840
difficult it is

00:03:56,000 --> 00:03:59,200
uh because it is kind of like a

00:03:57,840 --> 00:04:01,680
different language because this

00:03:59,200 --> 00:04:03,360
page is a very marketing oriented one

00:04:01,680 --> 00:04:06,080
and you can read those and like

00:04:03,360 --> 00:04:07,280
okay what what the what exactly is that

00:04:06,080 --> 00:04:10,239
what does it mean

00:04:07,280 --> 00:04:10,959
so if i were writing this from a from a

00:04:10,239 --> 00:04:13,040
developer's

00:04:10,959 --> 00:04:14,000
perspective i would just say that amazon

00:04:13,040 --> 00:04:15,519
s3 is an

00:04:14,000 --> 00:04:17,359
object-based storage you can put your

00:04:15,519 --> 00:04:18,000
files in there and that will be that

00:04:17,359 --> 00:04:20,639
will be it

00:04:18,000 --> 00:04:21,680
luckily i don't work in marketing in any

00:04:20,639 --> 00:04:25,759
case

00:04:21,680 --> 00:04:28,479
learning at bls is hard because you have

00:04:25,759 --> 00:04:28,800
all sorts of jargon you have all sorts

00:04:28,479 --> 00:04:31,280
of

00:04:28,800 --> 00:04:32,560
uh well new things that you have to

00:04:31,280 --> 00:04:33,440
learn new topics that you have to

00:04:32,560 --> 00:04:37,040
discover

00:04:33,440 --> 00:04:39,840
uh amazon aws documentation is famously

00:04:37,040 --> 00:04:41,040
well lacking in some areas it is gather

00:04:39,840 --> 00:04:43,120
it is getting better

00:04:41,040 --> 00:04:45,360
with all the time but nevertheless it is

00:04:43,120 --> 00:04:47,600
not uh trivial

00:04:45,360 --> 00:04:50,320
because when you log in to aws console

00:04:47,600 --> 00:04:52,240
for the very first time you see this

00:04:50,320 --> 00:04:53,440
and this is a screenshot from aws

00:04:52,240 --> 00:04:55,919
consoles showing all

00:04:53,440 --> 00:04:56,960
the different services that aws has to

00:04:55,919 --> 00:04:59,199
offer

00:04:56,960 --> 00:05:00,560
and i remember looking at this for the

00:04:59,199 --> 00:05:03,199
very first time and it's

00:05:00,560 --> 00:05:03,919
absolutely daunting you look at it and

00:05:03,199 --> 00:05:06,479
like

00:05:03,919 --> 00:05:07,199
what do i do what do i do where do i go

00:05:06,479 --> 00:05:09,680
there's just

00:05:07,199 --> 00:05:10,960
so many of it and for the record i am

00:05:09,680 --> 00:05:13,039
not blaming

00:05:10,960 --> 00:05:14,240
aws for kind of showing all those

00:05:13,039 --> 00:05:16,080
services

00:05:14,240 --> 00:05:18,080
uh you know on their homepage because it

00:05:16,080 --> 00:05:20,880
makes sense for the discovery

00:05:18,080 --> 00:05:23,280
but nevertheless this is not obvious uh

00:05:20,880 --> 00:05:25,759
for instance there's a service called

00:05:23,280 --> 00:05:27,360
beam stock and you will probably not be

00:05:25,759 --> 00:05:29,759
aware

00:05:27,360 --> 00:05:31,680
by the name alone what exactly is that

00:05:29,759 --> 00:05:33,919
so it is not easy to learn

00:05:31,680 --> 00:05:34,800
uh so there's lots of uh difficult

00:05:33,919 --> 00:05:37,280
concepts

00:05:34,800 --> 00:05:38,080
and ideas that you have to kind of

00:05:37,280 --> 00:05:39,840
acquire

00:05:38,080 --> 00:05:41,360
so the question naturally becomes why

00:05:39,840 --> 00:05:44,240
would you be interested

00:05:41,360 --> 00:05:46,400
why somebody who's been doing you know

00:05:44,240 --> 00:05:48,479
javascript html css

00:05:46,400 --> 00:05:50,320
uh why somebody somebody like me would

00:05:48,479 --> 00:05:53,759
even be interested in

00:05:50,320 --> 00:05:54,960
learning about aws so i i think there's

00:05:53,759 --> 00:05:56,880
a couple of things here

00:05:54,960 --> 00:05:58,639
uh first off i would like to quote this

00:05:56,880 --> 00:06:00,720
article uh

00:05:58,639 --> 00:06:01,759
from uh i'm not going to pronounce his

00:06:00,720 --> 00:06:03,840
name because i will

00:06:01,759 --> 00:06:05,440
mispronounce it but nevertheless he

00:06:03,840 --> 00:06:08,639
writes that he writes that

00:06:05,440 --> 00:06:10,479
the cloud is eating the world notice

00:06:08,639 --> 00:06:11,919
that this article was written eight

00:06:10,479 --> 00:06:13,919
years ago

00:06:11,919 --> 00:06:15,039
because the cloud was eating the world

00:06:13,919 --> 00:06:17,120
and it is still

00:06:15,039 --> 00:06:19,600
totally eating the world and it is

00:06:17,120 --> 00:06:21,919
becoming so much more prevalent

00:06:19,600 --> 00:06:22,800
in the way we build software in the way

00:06:21,919 --> 00:06:25,919
we ship

00:06:22,800 --> 00:06:28,880
products and services to our users and

00:06:25,919 --> 00:06:29,919
customers and i think that you know this

00:06:28,880 --> 00:06:33,199
trend is not

00:06:29,919 --> 00:06:35,199
going to slow down any minute now for me

00:06:33,199 --> 00:06:36,479
personally it's also about keeping your

00:06:35,199 --> 00:06:39,520
eyes open

00:06:36,479 --> 00:06:40,960
uh because as an engineer you probably

00:06:39,520 --> 00:06:42,800
want to continue growing

00:06:40,960 --> 00:06:44,080
you probably want to continue expanding

00:06:42,800 --> 00:06:45,680
your skills and

00:06:44,080 --> 00:06:47,440
i'm not saying that you basically have

00:06:45,680 --> 00:06:50,319
to i don't know like abandon

00:06:47,440 --> 00:06:51,440
javascript html css react whatever it is

00:06:50,319 --> 00:06:53,199
what you are doing

00:06:51,440 --> 00:06:55,199
i am just saying that it might be

00:06:53,199 --> 00:06:57,280
worthwhile just keeping your eyes open

00:06:55,199 --> 00:07:00,000
when it comes to new technologies

00:06:57,280 --> 00:07:02,479
for instance if you have if you have

00:07:00,000 --> 00:07:05,440
been using netify

00:07:02,479 --> 00:07:07,599
they have this idea of netify functions

00:07:05,440 --> 00:07:10,000
so notify functions allows you

00:07:07,599 --> 00:07:11,520
allow you to use serverless functions

00:07:10,000 --> 00:07:15,599
without even thinking

00:07:11,520 --> 00:07:17,199
about aws so i'm a huge fan of netify i

00:07:15,599 --> 00:07:19,599
use it for basically everything

00:07:17,199 --> 00:07:21,039
my own site uh telecommerce.com is

00:07:19,599 --> 00:07:23,120
hosted on netsify

00:07:21,039 --> 00:07:24,160
and the idea behind that if i function

00:07:23,120 --> 00:07:26,800
is that you provide

00:07:24,160 --> 00:07:27,599
a piece of code and they are going to

00:07:26,800 --> 00:07:29,680
run it

00:07:27,599 --> 00:07:31,759
on their infrastructure without managing

00:07:29,680 --> 00:07:33,680
any any servers

00:07:31,759 --> 00:07:36,000
so this under the hood it is actually

00:07:33,680 --> 00:07:37,919
using aws infrastructure

00:07:36,000 --> 00:07:40,560
and the reason why i'm mentioning this

00:07:37,919 --> 00:07:42,080
is that it may be worthwhile to you to

00:07:40,560 --> 00:07:44,960
kind of understand

00:07:42,080 --> 00:07:46,240
how those uh kind of like the higher

00:07:44,960 --> 00:07:48,560
level tools

00:07:46,240 --> 00:07:49,520
work under the hood uh in order for you

00:07:48,560 --> 00:07:51,440
to expand as

00:07:49,520 --> 00:07:52,560
an as an engineer because perhaps you're

00:07:51,440 --> 00:07:54,720
going to join

00:07:52,560 --> 00:07:56,240
a nativify functions team and this

00:07:54,720 --> 00:08:00,560
knowledge about aws

00:07:56,240 --> 00:08:03,120
will sure come in handy so how do we

00:08:00,560 --> 00:08:03,680
build stuff on aws because it is the

00:08:03,120 --> 00:08:06,720
cloud

00:08:03,680 --> 00:08:10,400
and there's all those different services

00:08:06,720 --> 00:08:11,919
and how do we create things so i want to

00:08:10,400 --> 00:08:14,160
build an app i would like to have a

00:08:11,919 --> 00:08:16,240
database i would like to have some

00:08:14,160 --> 00:08:18,479
functions that i can call and i would

00:08:16,240 --> 00:08:19,120
like to have some storage for my static

00:08:18,479 --> 00:08:22,479
assets

00:08:19,120 --> 00:08:24,560
how do i do that well first up you can

00:08:22,479 --> 00:08:26,800
do something that most people are using

00:08:24,560 --> 00:08:29,120
from uh from the very beginning

00:08:26,800 --> 00:08:30,800
and also in production when nobody's

00:08:29,120 --> 00:08:32,959
when nobody is watching

00:08:30,800 --> 00:08:34,080
they're using just the aws console and

00:08:32,959 --> 00:08:37,039
aws console

00:08:34,080 --> 00:08:37,839
uh it's a fancy way of saying you know

00:08:37,039 --> 00:08:40,399
this ui

00:08:37,839 --> 00:08:43,279
in the browser this is what is naturally

00:08:40,399 --> 00:08:45,360
being referred to aws console

00:08:43,279 --> 00:08:47,360
and as you can see this is not the most

00:08:45,360 --> 00:08:50,399
intuitive piece of software

00:08:47,360 --> 00:08:52,399
uh this is a new ec2 console

00:08:50,399 --> 00:08:54,080
and the idea here is not for you to know

00:08:52,399 --> 00:08:56,000
what what is going on

00:08:54,080 --> 00:08:57,920
but notice that you are looking at this

00:08:56,000 --> 00:08:58,320
slide and your eyes don't know where to

00:08:57,920 --> 00:09:00,240
go

00:08:58,320 --> 00:09:01,680
because there's just so much to discover

00:09:00,240 --> 00:09:04,399
you're basically being hit

00:09:01,680 --> 00:09:04,720
with all of this information and this is

00:09:04,399 --> 00:09:07,519
not

00:09:04,720 --> 00:09:08,480
easy for one for usage because it's not

00:09:07,519 --> 00:09:10,800
intuitive

00:09:08,480 --> 00:09:13,120
because you have to have uh some sort of

00:09:10,800 --> 00:09:16,959
acquired skills in order to use that

00:09:13,120 --> 00:09:20,720
and secondly for for learning this stuff

00:09:16,959 --> 00:09:24,320
well there are surely better ways

00:09:20,720 --> 00:09:27,360
next up uh you could use scripts

00:09:24,320 --> 00:09:28,640
right because looking back at this if

00:09:27,360 --> 00:09:30,800
you wanted to

00:09:28,640 --> 00:09:32,080
have uh an infrastructure where you have

00:09:30,800 --> 00:09:34,880
a database again

00:09:32,080 --> 00:09:36,560
you have some functions you can probably

00:09:34,880 --> 00:09:37,839
you know click it through the aws

00:09:36,560 --> 00:09:40,880
console just configure it

00:09:37,839 --> 00:09:41,920
in the ui itself this can totally be

00:09:40,880 --> 00:09:45,680
done

00:09:41,920 --> 00:09:47,600
but how about we do it again

00:09:45,680 --> 00:09:49,040
are you going to remember a year from

00:09:47,600 --> 00:09:51,839
now what steps

00:09:49,040 --> 00:09:52,959
did you take in order to create your app

00:09:51,839 --> 00:09:55,680
probably not

00:09:52,959 --> 00:09:56,800
you could write it down and i don't know

00:09:55,680 --> 00:09:58,320
about you but

00:09:56,800 --> 00:10:00,480
i have been reading writing

00:09:58,320 --> 00:10:01,839
documentation and unless you really care

00:10:00,480 --> 00:10:03,920
about the documentation

00:10:01,839 --> 00:10:05,040
it is going to be outdated the minute

00:10:03,920 --> 00:10:06,399
you hit save this

00:10:05,040 --> 00:10:08,560
is what always happens with

00:10:06,399 --> 00:10:10,800
documentation it becomes outdated

00:10:08,560 --> 00:10:11,839
so the idea is to use scripts instead so

00:10:10,800 --> 00:10:13,519
maybe we don't need to write

00:10:11,839 --> 00:10:15,360
documentation maybe we don't need to

00:10:13,519 --> 00:10:18,320
click for the ui maybe we can just

00:10:15,360 --> 00:10:19,440
automate it with a script and i don't

00:10:18,320 --> 00:10:22,720
know about you but

00:10:19,440 --> 00:10:24,000
my experience with automation sometimes

00:10:22,720 --> 00:10:27,279
is that

00:10:24,000 --> 00:10:29,200
take a look at this deck he's looking at

00:10:27,279 --> 00:10:30,640
this is what it's supposed to look like

00:10:29,200 --> 00:10:32,640
why are you building this

00:10:30,640 --> 00:10:34,160
well because the script is outdated and

00:10:32,640 --> 00:10:36,560
we forgot to update it

00:10:34,160 --> 00:10:37,279
and nobody knows how to run the script

00:10:36,560 --> 00:10:40,000
anymore

00:10:37,279 --> 00:10:41,760
or the person who wrote the script quit

00:10:40,000 --> 00:10:44,240
uh two months ago and we actually have

00:10:41,760 --> 00:10:46,480
no idea how to run it again

00:10:44,240 --> 00:10:47,519
well this is not this is not easy this

00:10:46,480 --> 00:10:49,839
is not trivial

00:10:47,519 --> 00:10:52,399
and that is partially why this idea of

00:10:49,839 --> 00:10:55,920
infrastructure as code has been born

00:10:52,399 --> 00:10:59,040
so the the thing is that

00:10:55,920 --> 00:11:01,519
maybe we don't have to tell people

00:10:59,040 --> 00:11:03,440
how to build stuff maybe we can just

00:11:01,519 --> 00:11:05,519
tell the machine what we want

00:11:03,440 --> 00:11:07,839
in other words infrastructure as code is

00:11:05,519 --> 00:11:10,880
this idea that we are going to

00:11:07,839 --> 00:11:12,160
kind of codify the infrastructure in aws

00:11:10,880 --> 00:11:14,720
that we want to get

00:11:12,160 --> 00:11:15,760
think of it as react when you are using

00:11:14,720 --> 00:11:18,399
react

00:11:15,760 --> 00:11:20,480
you are returning a piece of jsx from

00:11:18,399 --> 00:11:23,680
your component so returning a div

00:11:20,480 --> 00:11:25,279
a header and whatnot you as a developer

00:11:23,680 --> 00:11:28,000
you don't really care

00:11:25,279 --> 00:11:29,839
how exactly the browser is going to

00:11:28,000 --> 00:11:32,000
render this dave this header

00:11:29,839 --> 00:11:33,760
you are basically saying to react give

00:11:32,000 --> 00:11:34,399
me those elements i don't care how you

00:11:33,760 --> 00:11:36,640
do it

00:11:34,399 --> 00:11:37,920
just do it infrastructure as code is

00:11:36,640 --> 00:11:40,880
roughly similar

00:11:37,920 --> 00:11:42,000
we get to describe what you what we want

00:11:40,880 --> 00:11:45,600
and we get what

00:11:42,000 --> 00:11:48,800
we want so in a in a file in code

00:11:45,600 --> 00:11:50,880
we get to tell aws by the way my app

00:11:48,800 --> 00:11:51,839
is going to require those exact

00:11:50,880 --> 00:11:54,320
resources

00:11:51,839 --> 00:11:54,959
please provision them for me create them

00:11:54,320 --> 00:11:56,959
for me

00:11:54,959 --> 00:11:59,519
i don't care how you're going to do it

00:11:56,959 --> 00:12:01,680
just do it and additional benefits

00:11:59,519 --> 00:12:03,920
include things like version control

00:12:01,680 --> 00:12:05,200
because there are no scripts anymore

00:12:03,920 --> 00:12:08,079
there's no more

00:12:05,200 --> 00:12:09,839
you know implicit documentation that you

00:12:08,079 --> 00:12:11,279
have to show to somebody in order to

00:12:09,839 --> 00:12:13,040
configure this stuff

00:12:11,279 --> 00:12:14,800
you can just take a look at a

00:12:13,040 --> 00:12:15,440
configuration file and it is going to

00:12:14,800 --> 00:12:17,440
show you

00:12:15,440 --> 00:12:19,600
what is being done so you can version

00:12:17,440 --> 00:12:21,120
control it you can do code review which

00:12:19,600 --> 00:12:22,880
is especially useful

00:12:21,120 --> 00:12:24,399
uh because if somebody is going to

00:12:22,880 --> 00:12:26,079
introduce a change that is going to

00:12:24,399 --> 00:12:29,120
increase your aws bill

00:12:26,079 --> 00:12:30,399
by 100 percent you probably want to know

00:12:29,120 --> 00:12:33,440
about this

00:12:30,399 --> 00:12:34,800
and another i'm sorry another idea is

00:12:33,440 --> 00:12:37,920
predictability

00:12:34,800 --> 00:12:39,600
because if you have a declarative file

00:12:37,920 --> 00:12:40,399
which is describing your infrastructure

00:12:39,600 --> 00:12:42,880
as code

00:12:40,399 --> 00:12:44,320
if you're going to run it once two times

00:12:42,880 --> 00:12:46,240
or 500 times

00:12:44,320 --> 00:12:48,720
you are always going to get the same

00:12:46,240 --> 00:12:51,839
results whereas if you assigned

00:12:48,720 --> 00:12:52,560
a human to repeat the same steps 500

00:12:51,839 --> 00:12:54,959
times

00:12:52,560 --> 00:12:57,120
i assure you that there will be mistake

00:12:54,959 --> 00:12:59,279
down the road this is just how humans

00:12:57,120 --> 00:12:59,279
are

00:12:59,519 --> 00:13:03,600
and there are multiple tools of kind of

00:13:02,560 --> 00:13:06,720
creating stuff

00:13:03,600 --> 00:13:10,160
in the cloud using code so uh

00:13:06,720 --> 00:13:12,320
the kind of maybe not the oldest but

00:13:10,160 --> 00:13:13,279
uh kind of like the basis of how we

00:13:12,320 --> 00:13:15,839
build stuff

00:13:13,279 --> 00:13:17,839
on aws using uh infrastructure as code

00:13:15,839 --> 00:13:19,279
is aws cloud formation

00:13:17,839 --> 00:13:21,040
so class formation is actually two

00:13:19,279 --> 00:13:24,240
things it is

00:13:21,040 --> 00:13:27,040
this uh language this yam based uh

00:13:24,240 --> 00:13:29,440
template language that we are using in

00:13:27,040 --> 00:13:30,639
order to provision and create resources

00:13:29,440 --> 00:13:32,320
in aws

00:13:30,639 --> 00:13:34,639
and as you can see i don't know about

00:13:32,320 --> 00:13:36,959
you but this is not

00:13:34,639 --> 00:13:38,079
intuitive this is not easy to read so

00:13:36,959 --> 00:13:39,920
what's happening here

00:13:38,079 --> 00:13:42,480
is that it is going to create an s3

00:13:39,920 --> 00:13:44,399
bucket so as i mentioned earlier an s3

00:13:42,480 --> 00:13:47,279
bucket is kind of like a container

00:13:44,399 --> 00:13:49,279
for for files and it is going to call it

00:13:47,279 --> 00:13:52,800
my awesome js heroes bucket

00:13:49,279 --> 00:13:56,320
and there's also all sorts of settings

00:13:52,800 --> 00:13:59,279
and those files get large like in

00:13:56,320 --> 00:14:01,279
hundreds of lines if not more and this

00:13:59,279 --> 00:14:02,240
is not easy to hide this is not easy to

00:14:01,279 --> 00:14:03,519
maintain

00:14:02,240 --> 00:14:05,760
but nevertheless this was a

00:14:03,519 --> 00:14:07,360
groundbreaking uh kind of innovation

00:14:05,760 --> 00:14:09,360
when cloud formation came out

00:14:07,360 --> 00:14:11,120
i was not doing anything cloud related

00:14:09,360 --> 00:14:14,160
at the time so i cannot tell you

00:14:11,120 --> 00:14:14,560
very much but nevertheless i think it's

00:14:14,160 --> 00:14:16,880
some

00:14:14,560 --> 00:14:19,360
important discovery that we get to write

00:14:16,880 --> 00:14:22,880
what we want and get what we want

00:14:19,360 --> 00:14:25,760
uh later there was uh something called

00:14:22,880 --> 00:14:28,079
serverless framework and the way i see

00:14:25,760 --> 00:14:30,720
it is that this is javascript

00:14:28,079 --> 00:14:31,519
this is jquery so this is another kind

00:14:30,720 --> 00:14:34,560
of layer

00:14:31,519 --> 00:14:38,000
of abstraction over cloud formation

00:14:34,560 --> 00:14:40,880
it is also a yaml based uh template

00:14:38,000 --> 00:14:42,560
but this is much simpler as in this

00:14:40,880 --> 00:14:44,480
template it is not doing the same stuff

00:14:42,560 --> 00:14:45,040
as the confirmation template that we saw

00:14:44,480 --> 00:14:47,920
before

00:14:45,040 --> 00:14:48,560
because it is doing uh so much more than

00:14:47,920 --> 00:14:50,880
this

00:14:48,560 --> 00:14:52,160
so it is actually going to provision a

00:14:50,880 --> 00:14:54,560
serverless function

00:14:52,160 --> 00:14:55,680
with an api gateway and all kinds of

00:14:54,560 --> 00:14:57,760
different things

00:14:55,680 --> 00:14:59,199
i don't want to go into too much detail

00:14:57,760 --> 00:15:02,480
into what it is doing

00:14:59,199 --> 00:15:04,639
but just know that basically with

00:15:02,480 --> 00:15:07,279
serverless framework we get to create

00:15:04,639 --> 00:15:08,880
our own applications in the cloud with

00:15:07,279 --> 00:15:11,279
much less code that is much

00:15:08,880 --> 00:15:12,000
easier to maintain and there are also

00:15:11,279 --> 00:15:15,040
plugins

00:15:12,000 --> 00:15:15,680
and and whatnot but you may be looking

00:15:15,040 --> 00:15:18,800
at this

00:15:15,680 --> 00:15:20,800
and thinking well okay yum

00:15:18,800 --> 00:15:22,240
infrastructure as code okay i am a

00:15:20,800 --> 00:15:24,800
javascript engineer

00:15:22,240 --> 00:15:26,880
i want to learn the stuff i don't want

00:15:24,800 --> 00:15:29,680
to learn a new programming language

00:15:26,880 --> 00:15:32,079
i've been working very hard to learn

00:15:29,680 --> 00:15:34,000
javascript to learn typescript

00:15:32,079 --> 00:15:35,199
and i would like to continue using those

00:15:34,000 --> 00:15:38,480
skills

00:15:35,199 --> 00:15:40,959
and by the way a fun fact is that yam is

00:15:38,480 --> 00:15:41,680
actually somewhat an uh a programming

00:15:40,959 --> 00:15:43,680
language so

00:15:41,680 --> 00:15:45,759
like if somebody has this critique that

00:15:43,680 --> 00:15:47,120
yama is not a real programming language

00:15:45,759 --> 00:15:48,240
this is not really true because

00:15:47,120 --> 00:15:51,440
apparently

00:15:48,240 --> 00:15:54,560
you can use loops and conditionals uh

00:15:51,440 --> 00:15:56,639
don't try this but it is possible and if

00:15:54,560 --> 00:16:00,959
you do don't sue me

00:15:56,639 --> 00:16:03,839
in any case uh aws cloud development kit

00:16:00,959 --> 00:16:05,440
allows us to have all the benefits of

00:16:03,839 --> 00:16:09,199
infrastructure as code

00:16:05,440 --> 00:16:12,160
code reviews version control and whatnot

00:16:09,199 --> 00:16:12,800
without kind of leaving this safe bubble

00:16:12,160 --> 00:16:16,000
of

00:16:12,800 --> 00:16:17,839
typescript so it is an open source

00:16:16,000 --> 00:16:19,519
software development framework that

00:16:17,839 --> 00:16:22,240
allows us to define

00:16:19,519 --> 00:16:23,600
cloud application resources using family

00:16:22,240 --> 00:16:26,160
programming languages

00:16:23,600 --> 00:16:27,360
that we love or at least um totally

00:16:26,160 --> 00:16:30,160
tolerate in you know

00:16:27,360 --> 00:16:31,839
in some cases so i would like to show

00:16:30,160 --> 00:16:34,720
you a slide that i

00:16:31,839 --> 00:16:36,000
borrowed from aws and i hope that they

00:16:34,720 --> 00:16:38,399
don't mind because it's it's

00:16:36,000 --> 00:16:39,920
excellent so we can see a bunch of

00:16:38,399 --> 00:16:42,399
different things here

00:16:39,920 --> 00:16:44,320
first up take a look at the center of

00:16:42,399 --> 00:16:47,199
the screen

00:16:44,320 --> 00:16:47,759
it's just code you may not know what it

00:16:47,199 --> 00:16:50,880
is doing

00:16:47,759 --> 00:16:53,199
because uh it's a rather complicated

00:16:50,880 --> 00:16:54,320
uh infrastructure but nevertheless you

00:16:53,199 --> 00:16:56,000
can recognize

00:16:54,320 --> 00:16:58,480
something that you are used to so

00:16:56,000 --> 00:17:00,399
there's a class there's a constructor

00:16:58,480 --> 00:17:02,480
there's const we are creating some

00:17:00,399 --> 00:17:03,600
variables we are using those variables

00:17:02,480 --> 00:17:06,400
there are objects

00:17:03,600 --> 00:17:07,520
so this is much more familiar to a

00:17:06,400 --> 00:17:10,160
javascript

00:17:07,520 --> 00:17:11,760
typescript developer and notice and

00:17:10,160 --> 00:17:15,600
we're going to see that during the

00:17:11,760 --> 00:17:18,720
the later of in the talk that

00:17:15,600 --> 00:17:22,000
whenever somebody is actually using cdk

00:17:18,720 --> 00:17:23,839
there's type completion in the editor so

00:17:22,000 --> 00:17:25,760
if you are not sure how to configure

00:17:23,839 --> 00:17:26,240
something your editor is going to help

00:17:25,760 --> 00:17:29,280
you

00:17:26,240 --> 00:17:32,400
so you can have quite a lot

00:17:29,280 --> 00:17:34,799
of um how should i say that

00:17:32,400 --> 00:17:35,600
uh you can learn how quite a lot about

00:17:34,799 --> 00:17:38,720
aws

00:17:35,600 --> 00:17:41,360
without even leaving your editor

00:17:38,720 --> 00:17:43,520
uh all right and there are also a number

00:17:41,360 --> 00:17:45,200
of programming languages supported

00:17:43,520 --> 00:17:46,720
so you can use python you can use

00:17:45,200 --> 00:17:49,919
javascript typescript

00:17:46,720 --> 00:17:52,320
java c-sharp and there's also apparently

00:17:49,919 --> 00:17:55,360
a support for go programming language

00:17:52,320 --> 00:17:58,240
coming soon i very much like this idea

00:17:55,360 --> 00:18:01,360
this idea of being able to use

00:17:58,240 --> 00:18:04,400
the the same programming language

00:18:01,360 --> 00:18:05,039
for multiple uh multiple ways so

00:18:04,400 --> 00:18:07,679
front-end

00:18:05,039 --> 00:18:09,360
back-end and now infrastructure if you

00:18:07,679 --> 00:18:11,840
are very happy with your editor

00:18:09,360 --> 00:18:14,240
you can keep using the same editor you

00:18:11,840 --> 00:18:17,679
can keep using the same tools for

00:18:14,240 --> 00:18:18,640
infrastructure code uh by the way i'm

00:18:17,679 --> 00:18:20,799
going to stop

00:18:18,640 --> 00:18:22,480
sharing because i am a host of this

00:18:20,799 --> 00:18:24,799
meeting apparently i figure people they

00:18:22,480 --> 00:18:28,880
are trying to join

00:18:24,799 --> 00:18:32,000
uh so just let me add them real quick

00:18:28,880 --> 00:18:35,679
okay so i'm going to resume where was

00:18:32,000 --> 00:18:37,520
i there you go okay so ctk patterns

00:18:35,679 --> 00:18:38,720
is one more thing why you might be

00:18:37,520 --> 00:18:41,760
interested in

00:18:38,720 --> 00:18:43,760
uh in cdk as a developer

00:18:41,760 --> 00:18:46,000
because maybe you don't want to reinvent

00:18:43,760 --> 00:18:49,039
the wheel like uh

00:18:46,000 --> 00:18:49,679
some apps are not you know work at

00:18:49,039 --> 00:18:52,240
science

00:18:49,679 --> 00:18:53,600
ah so many so many apps just require

00:18:52,240 --> 00:18:55,280
some database uh

00:18:53,600 --> 00:18:56,640
so many of us are basically shipping to

00:18:55,280 --> 00:18:58,480
the apps for a living and

00:18:56,640 --> 00:19:00,080
you know that is okay uh you know every

00:18:58,480 --> 00:19:03,280
app has a create read

00:19:00,080 --> 00:19:06,480
update uh delete pattern

00:19:03,280 --> 00:19:07,280
so there's this idea of pre-existing

00:19:06,480 --> 00:19:10,400
patterns

00:19:07,280 --> 00:19:11,600
that you can use uh in order to make

00:19:10,400 --> 00:19:13,280
your life easier

00:19:11,600 --> 00:19:15,039
so for instance if you want to ship your

00:19:13,280 --> 00:19:18,240
react app to aws

00:19:15,039 --> 00:19:20,559
you can download a pre-made cdk pattern

00:19:18,240 --> 00:19:21,919
and just use it in order to uh to ship

00:19:20,559 --> 00:19:23,840
something in the cloud

00:19:21,919 --> 00:19:24,960
and there's lots of those different

00:19:23,840 --> 00:19:29,440
patterns

00:19:24,960 --> 00:19:33,120
and in a way you can basically run

00:19:29,440 --> 00:19:36,559
mpm install your desired architecture

00:19:33,120 --> 00:19:37,520
so if you have an image of what you

00:19:36,559 --> 00:19:41,760
would like to build

00:19:37,520 --> 00:19:44,799
on aws and it is a rather common problem

00:19:41,760 --> 00:19:46,240
you can either invent the will which is

00:19:44,799 --> 00:19:49,200
not terrible you're going to learn

00:19:46,240 --> 00:19:51,039
lots of new things along the way or you

00:19:49,200 --> 00:19:52,000
can use an existing pattern that was

00:19:51,039 --> 00:19:54,240
made by somebody

00:19:52,000 --> 00:19:55,120
who probably has more experience in that

00:19:54,240 --> 00:19:58,160
than you

00:19:55,120 --> 00:19:59,280
and you also get to well use that if you

00:19:58,160 --> 00:20:01,120
create something new

00:19:59,280 --> 00:20:03,280
interesting with cdk you can share it

00:20:01,120 --> 00:20:06,880
with others on npm because

00:20:03,280 --> 00:20:09,760
it is just javascript in fact

00:20:06,880 --> 00:20:10,240
let me show you so i've realized that i

00:20:09,760 --> 00:20:13,360
am

00:20:10,240 --> 00:20:14,159
physically unable to do a talk without a

00:20:13,360 --> 00:20:15,600
demo

00:20:14,159 --> 00:20:17,440
so what we are going to do i would like

00:20:15,600 --> 00:20:18,400
to show you a couple of interesting

00:20:17,440 --> 00:20:21,520
features

00:20:18,400 --> 00:20:23,120
of cdk so i have a

00:20:21,520 --> 00:20:25,679
brand new directory there's nothing in

00:20:23,120 --> 00:20:26,880
here uh first up i'm going to initialize

00:20:25,679 --> 00:20:29,520
a new project

00:20:26,880 --> 00:20:31,440
so when we run cdk in it it is going to

00:20:29,520 --> 00:20:33,280
tell us that we have a bunch of

00:20:31,440 --> 00:20:35,919
different different templates

00:20:33,280 --> 00:20:37,600
so you can create a new application you

00:20:35,919 --> 00:20:39,360
can create a new construct

00:20:37,600 --> 00:20:41,919
i'm going to tell you what construct is

00:20:39,360 --> 00:20:44,559
in just a minute or a simple application

00:20:41,919 --> 00:20:46,720
with some constructs already installed

00:20:44,559 --> 00:20:47,840
so i'm going to create a new app so i'm

00:20:46,720 --> 00:20:51,120
going to run cdk

00:20:47,840 --> 00:20:54,480
init app and language

00:20:51,120 --> 00:20:55,919
is going to be set to typescript and as

00:20:54,480 --> 00:20:56,720
you can see over here you can also use

00:20:55,919 --> 00:21:00,640
c-sharp

00:20:56,720 --> 00:21:02,640
java python and also javascript

00:21:00,640 --> 00:21:04,000
for the record you are probably not

00:21:02,640 --> 00:21:06,400
going to write

00:21:04,000 --> 00:21:08,320
so much code over here so like if you

00:21:06,400 --> 00:21:10,559
are not familiar with typescript i would

00:21:08,320 --> 00:21:13,120
recommend using typescript anyways

00:21:10,559 --> 00:21:14,720
because you get type completion which is

00:21:13,120 --> 00:21:16,880
highly useful over here

00:21:14,720 --> 00:21:19,440
in any case we have created a brand new

00:21:16,880 --> 00:21:21,039
project i'm going to open up my visual

00:21:19,440 --> 00:21:24,400
studio code and

00:21:21,039 --> 00:21:26,799
show you what what we've got so the vast

00:21:24,400 --> 00:21:27,360
majority of your cdk code is going to

00:21:26,799 --> 00:21:30,400
live

00:21:27,360 --> 00:21:33,520
inside of uh lib directory

00:21:30,400 --> 00:21:37,039
so over here we have a fresh cdk

00:21:33,520 --> 00:21:37,760
stuck and and again this is uh this

00:21:37,039 --> 00:21:39,840
should be

00:21:37,760 --> 00:21:41,760
roughly familiar if you are a typescript

00:21:39,840 --> 00:21:45,280
javascript developer because we have

00:21:41,760 --> 00:21:47,919
imports we have a class notice that uh

00:21:45,280 --> 00:21:49,120
this directory that i was i created this

00:21:47,919 --> 00:21:51,520
product in

00:21:49,120 --> 00:21:54,240
it's called js heroes and that is why uh

00:21:51,520 --> 00:21:57,600
it automatically created a js hero stack

00:21:54,240 --> 00:21:59,440
it is going to extend a cdk stack so it

00:21:57,600 --> 00:22:02,880
is a class that represents

00:21:59,440 --> 00:22:05,360
um a stack in the cloud so a set

00:22:02,880 --> 00:22:06,480
of kind of resources that are connected

00:22:05,360 --> 00:22:08,159
together

00:22:06,480 --> 00:22:09,679
and here in the constructor we're going

00:22:08,159 --> 00:22:13,919
to create our own

00:22:09,679 --> 00:22:16,480
resources so first up

00:22:13,919 --> 00:22:16,960
what do we want to have in the in our

00:22:16,480 --> 00:22:19,919
app

00:22:16,960 --> 00:22:21,200
it's basically up to us so by default

00:22:19,919 --> 00:22:23,280
the sdk income

00:22:21,200 --> 00:22:24,480
comes with a set of like core

00:22:23,280 --> 00:22:27,280
functionality

00:22:24,480 --> 00:22:29,120
and if you want to have more well like

00:22:27,280 --> 00:22:30,400
any typescript javascript project we

00:22:29,120 --> 00:22:33,520
have to install them

00:22:30,400 --> 00:22:36,080
so i'm going to run npm install and i'm

00:22:33,520 --> 00:22:40,240
going to install a bunch of dependencies

00:22:36,080 --> 00:22:42,559
so i would like to use amazon s3 so

00:22:40,240 --> 00:22:43,919
s3 buckets for storage i would like to

00:22:42,559 --> 00:22:45,840
use aws lambda

00:22:43,919 --> 00:22:48,080
for serverless functions i would like to

00:22:45,840 --> 00:22:49,760
use api gateway in order to be able to

00:22:48,080 --> 00:22:50,720
talk to those lambda functions through

00:22:49,760 --> 00:22:53,760
https

00:22:50,720 --> 00:22:55,120
or http and i'm going to also create a

00:22:53,760 --> 00:22:57,280
dynamodb table

00:22:55,120 --> 00:22:58,880
and notice that you only have to install

00:22:57,280 --> 00:22:59,360
the thing that you're going to actually

00:22:58,880 --> 00:23:01,520
use

00:22:59,360 --> 00:23:02,480
in your uh in your app in your

00:23:01,520 --> 00:23:04,400
infrastructure

00:23:02,480 --> 00:23:05,520
so that's actually kind of uh

00:23:04,400 --> 00:23:07,919
interesting because

00:23:05,520 --> 00:23:09,520
you get to ask you you get to install

00:23:07,919 --> 00:23:12,080
whatever you want

00:23:09,520 --> 00:23:12,640
so first of all i'm going to import

00:23:12,080 --> 00:23:16,400
everything

00:23:12,640 --> 00:23:17,600
as as free from aws s3

00:23:16,400 --> 00:23:19,840
you can see already that i have some

00:23:17,600 --> 00:23:23,440
code completion enabled

00:23:19,840 --> 00:23:27,120
and what is s3 so

00:23:23,440 --> 00:23:29,039
if i were to run s3 dot bucket

00:23:27,120 --> 00:23:30,799
this is something that is called a

00:23:29,039 --> 00:23:33,520
construct so

00:23:30,799 --> 00:23:33,840
there are a couple of different levels

00:23:33,520 --> 00:23:37,200
of

00:23:33,840 --> 00:23:38,640
constructs in cdk a construct is a

00:23:37,200 --> 00:23:40,960
representation of

00:23:38,640 --> 00:23:42,799
something in the cloud so there are very

00:23:40,960 --> 00:23:44,559
like low-level constructs

00:23:42,799 --> 00:23:47,200
imagine that it is just a single

00:23:44,559 --> 00:23:50,559
resource so like a

00:23:47,200 --> 00:23:51,600
database table or an s3 bucket so that

00:23:50,559 --> 00:23:53,039
means that it's something that is

00:23:51,600 --> 00:23:55,120
basically like a single

00:23:53,039 --> 00:23:56,559
thing in the cloud but there are also

00:23:55,120 --> 00:23:58,559
higher level constructs

00:23:56,559 --> 00:24:01,039
and because the idea is that you can

00:23:58,559 --> 00:24:04,640
compose those constructs together

00:24:01,039 --> 00:24:07,600
so if i were to implement and

00:24:04,640 --> 00:24:08,080
a complicated infrastructure pattern for

00:24:07,600 --> 00:24:10,960
my

00:24:08,080 --> 00:24:11,679
company for my organization i could

00:24:10,960 --> 00:24:14,559
actually

00:24:11,679 --> 00:24:16,080
publish this to our both internal or

00:24:14,559 --> 00:24:18,320
external npm

00:24:16,080 --> 00:24:19,279
and have other developers in the same

00:24:18,320 --> 00:24:22,080
organization

00:24:19,279 --> 00:24:24,000
kind of reusing the same functionality

00:24:22,080 --> 00:24:26,880
these same constructs and so on

00:24:24,000 --> 00:24:28,880
so this is highly useful because why we

00:24:26,880 --> 00:24:30,960
use javascript frameworks because we

00:24:28,880 --> 00:24:32,960
want to have some problems

00:24:30,960 --> 00:24:34,320
implemented for us we want to have them

00:24:32,960 --> 00:24:36,640
abstracted away

00:24:34,320 --> 00:24:38,000
uh from us i don't want to do dom

00:24:36,640 --> 00:24:40,320
manipulation anymore

00:24:38,000 --> 00:24:42,320
this is why i am using react instead of

00:24:40,320 --> 00:24:45,039
jquery even though i absolutely

00:24:42,320 --> 00:24:47,120
love jquery it's still in my heart in

00:24:45,039 --> 00:24:50,000
any case and that's free bucket

00:24:47,120 --> 00:24:50,559
it takes a free argument first up is a

00:24:50,000 --> 00:24:52,559
scope

00:24:50,559 --> 00:24:54,559
so the scope is this because we are

00:24:52,559 --> 00:24:55,600
creating this bucket in the scope of

00:24:54,559 --> 00:24:58,080
this stack

00:24:55,600 --> 00:25:00,720
then secondly the argument is the id so

00:24:58,080 --> 00:25:04,720
i'm just going to call it my bucket

00:25:00,720 --> 00:25:07,760
and first third up are the bucket props

00:25:04,720 --> 00:25:09,840
and take a look at this if i enable uh

00:25:07,760 --> 00:25:10,799
type completion so like control plus

00:25:09,840 --> 00:25:14,559
space

00:25:10,799 --> 00:25:16,799
we can see all kinds of different

00:25:14,559 --> 00:25:17,679
uh settings that we can enable in this

00:25:16,799 --> 00:25:19,279
bucket

00:25:17,679 --> 00:25:20,799
so this is what i've meant that we can

00:25:19,279 --> 00:25:24,400
use uh

00:25:20,799 --> 00:25:26,720
cdk in order to not only build our stuff

00:25:24,400 --> 00:25:29,279
but also to learn about the cloud

00:25:26,720 --> 00:25:29,919
because if you are roughly familiar with

00:25:29,279 --> 00:25:32,320
s3

00:25:29,919 --> 00:25:33,440
you can you know you have this idea that

00:25:32,320 --> 00:25:35,679
you can use it to store

00:25:33,440 --> 00:25:37,919
files well maybe you didn't know that

00:25:35,679 --> 00:25:40,080
you can enable encryption on it on it

00:25:37,919 --> 00:25:42,240
and by just browsing those different

00:25:40,080 --> 00:25:44,240
settings you can learn quite a lot

00:25:42,240 --> 00:25:45,520
about s3 and all kinds of different

00:25:44,240 --> 00:25:49,919
services

00:25:45,520 --> 00:25:53,600
and one more thing is that

00:25:49,919 --> 00:25:55,279
cdk is based on best practices so

00:25:53,600 --> 00:25:57,840
there's a lots of things that are kind

00:25:55,279 --> 00:25:59,279
of decided for you

00:25:57,840 --> 00:26:01,360
so if you are building something you

00:25:59,279 --> 00:26:01,919
don't have to specify every single

00:26:01,360 --> 00:26:04,159
option

00:26:01,919 --> 00:26:05,039
in fact in order to create an s3 bucket

00:26:04,159 --> 00:26:06,960
you don't have to

00:26:05,039 --> 00:26:09,120
configure anything it is just going to

00:26:06,960 --> 00:26:11,840
create an s3 bucket for you

00:26:09,120 --> 00:26:13,840
so i'm going to open up my terminal and

00:26:11,840 --> 00:26:17,200
i'm going to run a deploy command

00:26:13,840 --> 00:26:21,039
so we have to run cdk deploy in order to

00:26:17,200 --> 00:26:21,440
uh to deploy our stack i am also passing

00:26:21,039 --> 00:26:24,240
in

00:26:21,440 --> 00:26:25,919
my profile because i have a bunch of aws

00:26:24,240 --> 00:26:28,400
profiles on this machine

00:26:25,919 --> 00:26:29,520
uh so i am passing a cdk one but by

00:26:28,400 --> 00:26:32,640
default you wouldn't have to

00:26:29,520 --> 00:26:33,679
use it uh just to let you know what is

00:26:32,640 --> 00:26:35,919
this cdk

00:26:33,679 --> 00:26:37,360
over here uh this is a command line

00:26:35,919 --> 00:26:41,039
interface that comes

00:26:37,360 --> 00:26:42,640
with the cdk so cdk is not only you know

00:26:41,039 --> 00:26:45,279
this idea that you can

00:26:42,640 --> 00:26:47,120
create stuff using typescript but also a

00:26:45,279 --> 00:26:48,159
command line interface for you to

00:26:47,120 --> 00:26:50,400
deploying stuff

00:26:48,159 --> 00:26:51,360
for you to be able to deploy things in

00:26:50,400 --> 00:26:54,000
the cloud

00:26:51,360 --> 00:26:55,120
and i basically in order to install cdk

00:26:54,000 --> 00:26:58,320
you have to run

00:26:55,120 --> 00:26:59,520
npm install global cdk and this is as

00:26:58,320 --> 00:27:01,360
simple as that

00:26:59,520 --> 00:27:02,640
there's some configuration involved but

00:27:01,360 --> 00:27:05,440
you can find more info

00:27:02,640 --> 00:27:06,000
in the documentation all right so we can

00:27:05,440 --> 00:27:07,600
see that our

00:27:06,000 --> 00:27:09,440
js hero stack has been successfully

00:27:07,600 --> 00:27:11,039
deployed there was not much in it

00:27:09,440 --> 00:27:14,240
because it was a simple

00:27:11,039 --> 00:27:18,159
as free bucket so i'm going to go ahead

00:27:14,240 --> 00:27:21,760
and go to my aws console and we can see

00:27:18,159 --> 00:27:23,120
in cloud formation why in confirmation

00:27:21,760 --> 00:27:24,880
because i mentioned earlier cloud

00:27:23,120 --> 00:27:27,279
formation was this uh

00:27:24,880 --> 00:27:28,720
yaml file this huge one that was uh

00:27:27,279 --> 00:27:31,440
uneasy to read

00:27:28,720 --> 00:27:33,039
cloud development kit cdk is built on

00:27:31,440 --> 00:27:35,039
top of cloud formation

00:27:33,039 --> 00:27:36,080
so when you think about it you write

00:27:35,039 --> 00:27:37,440
typescript code

00:27:36,080 --> 00:27:39,279
that is going to be converted into

00:27:37,440 --> 00:27:42,000
javascript that is going to be

00:27:39,279 --> 00:27:44,080
going to be converted uh into cloud

00:27:42,000 --> 00:27:45,440
formation template and this confirmation

00:27:44,080 --> 00:27:46,480
template is going to be used to

00:27:45,440 --> 00:27:48,880
provision your

00:27:46,480 --> 00:27:50,480
infrastructure in the cloud but you as a

00:27:48,880 --> 00:27:50,799
developer the only thing that you have

00:27:50,480 --> 00:27:53,520
to

00:27:50,799 --> 00:27:54,640
actively think about is typescript and

00:27:53,520 --> 00:27:56,399
how cool is that like

00:27:54,640 --> 00:27:58,000
so many things are abstracted away from

00:27:56,399 --> 00:28:00,559
you in any case

00:27:58,000 --> 00:28:02,159
if i click on my js hero stack here in

00:28:00,559 --> 00:28:04,960
the cloud formation console

00:28:02,159 --> 00:28:05,679
what i can see is that in the resources

00:28:04,960 --> 00:28:08,240
section

00:28:05,679 --> 00:28:08,880
there's an s3 bucket which was created

00:28:08,240 --> 00:28:11,039
for us

00:28:08,880 --> 00:28:12,559
by ourselves so we didn't have to do

00:28:11,039 --> 00:28:13,760
anything and there we go we have our

00:28:12,559 --> 00:28:16,480
very first

00:28:13,760 --> 00:28:18,720
resource created in the cloud without

00:28:16,480 --> 00:28:21,360
leaving our editor

00:28:18,720 --> 00:28:21,840
i'm going to test something i'm going to

00:28:21,360 --> 00:28:24,880
uh

00:28:21,840 --> 00:28:27,679
upload a new file to this bucket so

00:28:24,880 --> 00:28:29,279
let me see what do i have on my desktop

00:28:27,679 --> 00:28:31,360
okay i have this

00:28:29,279 --> 00:28:33,440
image of a cookie so i'm going to hit

00:28:31,360 --> 00:28:36,720
upload in order to upload this file

00:28:33,440 --> 00:28:39,760
to to the cloud and there you go

00:28:36,720 --> 00:28:41,440
right now i can take a look at this

00:28:39,760 --> 00:28:43,120
image of a cookie so let me click over

00:28:41,440 --> 00:28:44,720
here and

00:28:43,120 --> 00:28:46,799
here we have something that is called an

00:28:44,720 --> 00:28:48,080
object url so if i click on that i'm

00:28:46,799 --> 00:28:51,200
going to see my cookie

00:28:48,080 --> 00:28:52,320
and i'm not going to see my cookie and

00:28:51,200 --> 00:28:55,760
why is that

00:28:52,320 --> 00:28:58,799
because uh teaching you some aws

00:28:55,760 --> 00:28:59,360
kind of in between and s3 rocket by

00:28:58,799 --> 00:29:01,679
default

00:28:59,360 --> 00:29:03,520
does not have public access because you

00:29:01,679 --> 00:29:04,559
can store some potentially sensitive

00:29:03,520 --> 00:29:06,559
data in there

00:29:04,559 --> 00:29:08,559
and you don't want to make it public by

00:29:06,559 --> 00:29:10,559
default and this is what i meant

00:29:08,559 --> 00:29:12,559
when it comes to sensible kind of

00:29:10,559 --> 00:29:15,039
defaults over here

00:29:12,559 --> 00:29:16,559
because i didn't have to configure

00:29:15,039 --> 00:29:19,760
whether this bucket is open

00:29:16,559 --> 00:29:21,520
or whether it's closed aws thought that

00:29:19,760 --> 00:29:25,039
it is better to assume that i want to

00:29:21,520 --> 00:29:27,600
keep things closed and if i open it

00:29:25,039 --> 00:29:29,919
i want to just i have to just specify

00:29:27,600 --> 00:29:29,919
and

00:29:30,000 --> 00:29:33,520
what is the name i've actually forgot

00:29:31,840 --> 00:29:35,360
the name so let me just take a look okay

00:29:33,520 --> 00:29:37,279
there you go public read access

00:29:35,360 --> 00:29:38,960
what does it do grants public with

00:29:37,279 --> 00:29:40,640
access to all objects in the bucket

00:29:38,960 --> 00:29:43,279
by default is set to false i'm going to

00:29:40,640 --> 00:29:43,279
set it to true

00:29:43,440 --> 00:29:50,399
there's one more awesome feature of cdk

00:29:48,320 --> 00:29:52,720
one of my favorite git commands is git

00:29:50,399 --> 00:29:55,360
div because it allows me to see

00:29:52,720 --> 00:29:56,720
what am i about to push to main or

00:29:55,360 --> 00:29:59,919
master branch

00:29:56,720 --> 00:30:02,960
uh cdk has something similar

00:29:59,919 --> 00:30:03,360
zika has ckdiff and it is going to show

00:30:02,960 --> 00:30:05,360
me

00:30:03,360 --> 00:30:07,520
what is the difference between things

00:30:05,360 --> 00:30:09,200
that i have already in the cloud

00:30:07,520 --> 00:30:11,039
and the things i am about to push in the

00:30:09,200 --> 00:30:13,440
cloud and it is

00:30:11,039 --> 00:30:15,360
important to review this stuff because

00:30:13,440 --> 00:30:18,080
imagine that this my bucket

00:30:15,360 --> 00:30:19,600
had hr documents in it you know like

00:30:18,080 --> 00:30:22,559
sensitive data

00:30:19,600 --> 00:30:23,679
you probably want to be warned if you

00:30:22,559 --> 00:30:25,840
are about to make it

00:30:23,679 --> 00:30:27,520
open to the public because right now i

00:30:25,840 --> 00:30:30,480
am going to allow

00:30:27,520 --> 00:30:32,159
a get object action to be taken by

00:30:30,480 --> 00:30:33,440
everyone

00:30:32,159 --> 00:30:36,000
with that being said i'm just going to

00:30:33,440 --> 00:30:38,640
deploy it this is going to take a second

00:30:36,000 --> 00:30:39,360
it's going to ask me if i am comfortable

00:30:38,640 --> 00:30:41,360
deploying those

00:30:39,360 --> 00:30:43,440
changes in the cloud i am totally

00:30:41,360 --> 00:30:44,159
comfortable i'm sorry comfortable doing

00:30:43,440 --> 00:30:46,559
that

00:30:44,159 --> 00:30:48,000
so it is going to create a cloud

00:30:46,559 --> 00:30:50,799
formation template

00:30:48,000 --> 00:30:52,159
so again this giant yaml file that you

00:30:50,799 --> 00:30:54,720
don't even get to see

00:30:52,159 --> 00:30:55,440
in that example all of this is being

00:30:54,720 --> 00:30:58,880
taken care

00:30:55,440 --> 00:31:00,159
uh for you all right so it's managed to

00:30:58,880 --> 00:31:02,480
successfully deploy

00:31:00,159 --> 00:31:04,080
i'm going to refresh and there you go we

00:31:02,480 --> 00:31:07,840
have a cookie

00:31:04,080 --> 00:31:09,200
uh and this is just a simple example but

00:31:07,840 --> 00:31:12,320
i think it shows

00:31:09,200 --> 00:31:13,200
uh how powerful this is and how easy it

00:31:12,320 --> 00:31:16,559
is to

00:31:13,200 --> 00:31:19,760
to learn this uh to learn you know

00:31:16,559 --> 00:31:21,120
more about aws through sdk but i'm going

00:31:19,760 --> 00:31:23,919
to do some more stuff

00:31:21,120 --> 00:31:24,640
so what i would like to do is let me

00:31:23,919 --> 00:31:27,279
take uh

00:31:24,640 --> 00:31:28,559
look at my list i'm going to create a

00:31:27,279 --> 00:31:31,919
lambda function

00:31:28,559 --> 00:31:32,399
so just so you know a lambda function is

00:31:31,919 --> 00:31:35,120
a

00:31:32,399 --> 00:31:37,120
serverless function so the idea is that

00:31:35,120 --> 00:31:41,200
we are going to provide some code

00:31:37,120 --> 00:31:43,279
i'm going to create a main.ts file

00:31:41,200 --> 00:31:44,399
and over here i'm going to paste so some

00:31:43,279 --> 00:31:47,840
code because i

00:31:44,399 --> 00:31:51,440
am i am lazy so there you go

00:31:47,840 --> 00:31:51,440
this i'm going to remove this part

00:31:51,679 --> 00:31:59,279
and i am also going to remove

00:31:55,760 --> 00:32:02,080
this for now

00:31:59,279 --> 00:32:03,120
okay so the idea behind serverless

00:32:02,080 --> 00:32:05,200
lambda functions

00:32:03,120 --> 00:32:06,480
is that i'm going to just provide a

00:32:05,200 --> 00:32:09,120
piece of code

00:32:06,480 --> 00:32:10,000
that i want to be executed and i don't

00:32:09,120 --> 00:32:12,000
have a server

00:32:10,000 --> 00:32:14,640
i don't want to have a server i want to

00:32:12,000 --> 00:32:16,640
be able to run this code so the idea

00:32:14,640 --> 00:32:19,760
behind serverless lambda functions

00:32:16,640 --> 00:32:20,559
is that you don't have to think about

00:32:19,760 --> 00:32:23,200
servers

00:32:20,559 --> 00:32:23,600
you just have to provide a piece of code

00:32:23,200 --> 00:32:26,960
to

00:32:23,600 --> 00:32:28,320
uh to aws cloud and whenever you uh

00:32:26,960 --> 00:32:30,640
whenever this function is going to be

00:32:28,320 --> 00:32:33,519
called you will only have to pay

00:32:30,640 --> 00:32:34,240
for the duration of this function so if

00:32:33,519 --> 00:32:36,640
you

00:32:34,240 --> 00:32:38,240
have a server under your desk you have

00:32:36,640 --> 00:32:41,279
to pay 24

00:32:38,240 --> 00:32:42,720
7 you know all year long

00:32:41,279 --> 00:32:44,640
with serverless you don't have to do

00:32:42,720 --> 00:32:46,720
this because you only care

00:32:44,640 --> 00:32:48,399
about providing the code and you are

00:32:46,720 --> 00:32:50,559
going to be built only based

00:32:48,399 --> 00:32:52,880
on how much your code is actually being

00:32:50,559 --> 00:32:54,720
executed there's also a fit here so like

00:32:52,880 --> 00:32:56,799
the first million invocation of the

00:32:54,720 --> 00:32:58,399
lambda functions are completely free

00:32:56,799 --> 00:32:59,600
so unless you have some significant

00:32:58,399 --> 00:33:01,760
traffic you are not going to pay

00:32:59,600 --> 00:33:04,880
anything at all

00:33:01,760 --> 00:33:07,039
with that being said i'm going to do

00:33:04,880 --> 00:33:08,080
a couple of more things so i'm going to

00:33:07,039 --> 00:33:10,880
import

00:33:08,080 --> 00:33:12,799
a couple of couple of things over here

00:33:10,880 --> 00:33:15,360
so

00:33:12,799 --> 00:33:15,840
uh let me just remove dynamodb for now

00:33:15,360 --> 00:33:18,640
so

00:33:15,840 --> 00:33:18,960
i am going to import a lambda in order

00:33:18,640 --> 00:33:20,559
to

00:33:18,960 --> 00:33:22,480
because this is a construct that allows

00:33:20,559 --> 00:33:22,799
me to create lambda functions and push

00:33:22,480 --> 00:33:24,880
them

00:33:22,799 --> 00:33:26,559
to the cloud and i'm going to also

00:33:24,880 --> 00:33:27,679
import something that is called an api

00:33:26,559 --> 00:33:30,960
gateway

00:33:27,679 --> 00:33:33,600
to put fixed simple an api gateway is

00:33:30,960 --> 00:33:35,200
a it's a door it's a door to the cloud

00:33:33,600 --> 00:33:37,679
so through api gateway

00:33:35,200 --> 00:33:38,480
you can actually call lambda functions

00:33:37,679 --> 00:33:41,919
that live

00:33:38,480 --> 00:33:43,919
inside of aws cloud

00:33:41,919 --> 00:33:46,240
because remember a cloud is just

00:33:43,919 --> 00:33:49,200
somebody else's computer

00:33:46,240 --> 00:33:50,640
okay so i'm going to create a new lambda

00:33:49,200 --> 00:33:53,840
function so i'm going to call it

00:33:50,640 --> 00:33:53,840
my lambda

00:33:53,919 --> 00:33:58,080
it is going to be a new lambda that

00:33:56,000 --> 00:33:59,760
function notice that it is basically

00:33:58,080 --> 00:34:03,039
telling me what to do

00:33:59,760 --> 00:34:05,679
i'm going to call it uh well my lambda

00:34:03,039 --> 00:34:06,320
and here i have a bunch of props that

00:34:05,679 --> 00:34:08,720
are not

00:34:06,320 --> 00:34:10,000
marked by the question mark therefore i

00:34:08,720 --> 00:34:13,040
have to provide them

00:34:10,000 --> 00:34:15,440
so first up there's code so where is the

00:34:13,040 --> 00:34:18,480
code uh so code is actually located

00:34:15,440 --> 00:34:19,119
in code from asset because i have to get

00:34:18,480 --> 00:34:23,679
it from

00:34:19,119 --> 00:34:25,839
somewhere and i'm going to provide the

00:34:23,679 --> 00:34:27,359
the name of this folder so this folder

00:34:25,839 --> 00:34:29,280
is called lambda functions and i have to

00:34:27,359 --> 00:34:30,720
provide the same thing over here

00:34:29,280 --> 00:34:33,599
it is still complaining because i have

00:34:30,720 --> 00:34:37,679
to provide two more things hands are

00:34:33,599 --> 00:34:38,879
so notice that i have called

00:34:37,679 --> 00:34:42,000
this function that is going to be

00:34:38,879 --> 00:34:44,159
executed a handser this is a

00:34:42,000 --> 00:34:45,599
common convention in the word of

00:34:44,159 --> 00:34:46,879
serverless and lambda

00:34:45,599 --> 00:34:48,560
that the function is going to be

00:34:46,879 --> 00:34:50,079
actually executed should be called a

00:34:48,560 --> 00:34:52,000
handler

00:34:50,079 --> 00:34:53,839
well it's generic enough so i'm going to

00:34:52,000 --> 00:34:57,440
keep keep calling that

00:34:53,839 --> 00:34:59,200
so the handler is main.hanser so

00:34:57,440 --> 00:35:00,480
what is it saying that go to lambda

00:34:59,200 --> 00:35:02,160
functions directory

00:35:00,480 --> 00:35:03,920
and inside of it you're going to file

00:35:02,160 --> 00:35:07,280
find a file called main

00:35:03,920 --> 00:35:10,240
and i would like to you to invoke a

00:35:07,280 --> 00:35:10,640
function that is called handler one last

00:35:10,240 --> 00:35:14,079
thing

00:35:10,640 --> 00:35:17,119
we have to provide the runtime

00:35:14,079 --> 00:35:18,800
so a lambda function can be written in

00:35:17,119 --> 00:35:20,320
all sorts of different programming

00:35:18,800 --> 00:35:23,119
languages and

00:35:20,320 --> 00:35:23,760
i'm going to show you a list so you can

00:35:23,119 --> 00:35:26,640
use

00:35:23,760 --> 00:35:28,079
net you can use go you could use java

00:35:26,640 --> 00:35:31,680
you could use node.js

00:35:28,079 --> 00:35:34,079
different versions uh python ruby

00:35:31,680 --> 00:35:37,280
and if you really want to you can also

00:35:34,079 --> 00:35:38,800
do something that is called a

00:35:37,280 --> 00:35:40,480
custom environment if i remember

00:35:38,800 --> 00:35:41,440
correctly so you can basically write

00:35:40,480 --> 00:35:43,599
functions in

00:35:41,440 --> 00:35:45,920
cobol or husk if you really wanted to

00:35:43,599 --> 00:35:48,160
but i i don't think i

00:35:45,920 --> 00:35:49,200
i don't recommend it so this is a lambda

00:35:48,160 --> 00:35:50,880
function

00:35:49,200 --> 00:35:52,960
and it's easy as that so we are just

00:35:50,880 --> 00:35:54,960
going to provide uh some code

00:35:52,960 --> 00:35:56,800
and if you want to call it we're going

00:35:54,960 --> 00:35:59,599
to create a rest api

00:35:56,800 --> 00:36:00,720
and two lines of code so in order to

00:35:59,599 --> 00:36:02,720
create a rsapi

00:36:00,720 --> 00:36:04,880
i'm going to use this api gateway which

00:36:02,720 --> 00:36:07,359
again a reminder is basically a door

00:36:04,880 --> 00:36:09,760
to the cloud i'm going to create a

00:36:07,359 --> 00:36:12,560
lambda

00:36:09,760 --> 00:36:14,160
rest api apologies my editor seems to be

00:36:12,560 --> 00:36:17,280
a bit wonky

00:36:14,160 --> 00:36:19,280
i'm going to close those those and this

00:36:17,280 --> 00:36:20,720
i'm going to call it an endpoint and the

00:36:19,280 --> 00:36:21,440
only thing i have to provide is the

00:36:20,720 --> 00:36:22,960
handser

00:36:21,440 --> 00:36:25,440
so which function is going to be

00:36:22,960 --> 00:36:27,200
executed after i hit an endpoint

00:36:25,440 --> 00:36:29,760
so to keep things simple i'm just going

00:36:27,200 --> 00:36:32,400
to use this my lambda

00:36:29,760 --> 00:36:33,280
and in the meantime i'm going to

00:36:32,400 --> 00:36:36,480
provision that

00:36:33,280 --> 00:36:36,480
so i'm going to run deploy

00:36:37,520 --> 00:36:41,599
and tokyo through it again so it's going

00:36:39,680 --> 00:36:44,560
to ask me to confirm a bunch of

00:36:41,599 --> 00:36:45,760
uh actions because i am deploying a

00:36:44,560 --> 00:36:48,400
lambda function

00:36:45,760 --> 00:36:50,160
and i am also allowing this function to

00:36:48,400 --> 00:36:52,640
be called from the internet

00:36:50,160 --> 00:36:54,079
because uh well by default everything

00:36:52,640 --> 00:36:56,320
that you deploy in aws

00:36:54,079 --> 00:36:57,280
is going to live in aws and it's going

00:36:56,320 --> 00:36:59,839
to stay there

00:36:57,280 --> 00:37:01,839
so uh by default things don't really

00:36:59,839 --> 00:37:05,040
have access to the outside internet

00:37:01,839 --> 00:37:06,000
and that is uh by design because imagine

00:37:05,040 --> 00:37:09,599
that you know

00:37:06,000 --> 00:37:11,599
you have a function that is

00:37:09,599 --> 00:37:14,160
it's not meant to be public so it is not

00:37:11,599 --> 00:37:15,839
meant to be called by http request

00:37:14,160 --> 00:37:17,520
uh because it's doing some kind of

00:37:15,839 --> 00:37:20,160
internal work for you

00:37:17,520 --> 00:37:20,960
uh in your in your cloud for your cloud

00:37:20,160 --> 00:37:23,359
resources

00:37:20,960 --> 00:37:25,200
you probably want to ensure that it is

00:37:23,359 --> 00:37:27,200
not going to remain uh it is not going

00:37:25,200 --> 00:37:31,599
to be open

00:37:27,200 --> 00:37:35,200
so a couple of more things is that

00:37:31,599 --> 00:37:37,280
similarly to an s3 bucket you also have

00:37:35,200 --> 00:37:39,440
all sorts of options for a lambda

00:37:37,280 --> 00:37:40,800
function and i'm not going to go through

00:37:39,440 --> 00:37:43,040
all of them because there will be

00:37:40,800 --> 00:37:44,160
like way too much but for instance

00:37:43,040 --> 00:37:47,760
you're going to see it

00:37:44,160 --> 00:37:50,400
um later that you can also provide an

00:37:47,760 --> 00:37:52,880
environment for for the lambda function

00:37:50,400 --> 00:37:55,119
so you can provide environment variables

00:37:52,880 --> 00:37:56,960
and there's all sorts of different

00:37:55,119 --> 00:37:58,640
things here

00:37:56,960 --> 00:38:00,320
one more thing is that you could also

00:37:58,640 --> 00:38:02,560
provide a memory size

00:38:00,320 --> 00:38:04,640
so a lambda function basically the way

00:38:02,560 --> 00:38:06,800
it works is that you're going to rent

00:38:04,640 --> 00:38:08,079
some sort of compute capacity in the

00:38:06,800 --> 00:38:09,760
cloud and

00:38:08,079 --> 00:38:11,359
how much you're going to rent well it

00:38:09,760 --> 00:38:13,680
depends on how much you want

00:38:11,359 --> 00:38:14,480
by default you're going to get 128

00:38:13,680 --> 00:38:17,200
megabytes

00:38:14,480 --> 00:38:18,720
but if your function requires more

00:38:17,200 --> 00:38:19,280
because for instance you're doing some

00:38:18,720 --> 00:38:22,560
very

00:38:19,280 --> 00:38:25,440
uh like computation sensitive stuff

00:38:22,560 --> 00:38:26,480
like you are you know uh analyzing huge

00:38:25,440 --> 00:38:28,240
amounts of data

00:38:26,480 --> 00:38:30,000
and you need more ram where you could

00:38:28,240 --> 00:38:32,160
get up to three gigabytes

00:38:30,000 --> 00:38:34,240
uh of ram of course you're going to get

00:38:32,160 --> 00:38:36,400
charged significantly more

00:38:34,240 --> 00:38:38,320
for for doing that but nevertheless uh

00:38:36,400 --> 00:38:39,920
this is still an option

00:38:38,320 --> 00:38:41,760
one last thing since i'm talking about

00:38:39,920 --> 00:38:45,280
lambda why not

00:38:41,760 --> 00:38:47,680
lambda have has a maximum duration so

00:38:45,280 --> 00:38:50,160
as i mentioned your function is going to

00:38:47,680 --> 00:38:52,079
be called only when it's necessary and

00:38:50,160 --> 00:38:54,480
you don't have to think about servers

00:38:52,079 --> 00:38:56,720
but your function cannot last forever

00:38:54,480 --> 00:38:59,119
so because of that lambda functions by

00:38:56,720 --> 00:39:00,640
default have a timeout of three seconds

00:38:59,119 --> 00:39:02,800
which is more than enough for like

00:39:00,640 --> 00:39:04,320
simple things you know you call them the

00:39:02,800 --> 00:39:06,160
function it talks to a database

00:39:04,320 --> 00:39:07,599
the date date sorry the database is

00:39:06,160 --> 00:39:10,240
going to get some data back

00:39:07,599 --> 00:39:11,760
that's it uh but you can extend it up to

00:39:10,240 --> 00:39:14,480
15 minutes

00:39:11,760 --> 00:39:15,599
which well honestly is um it's quite a

00:39:14,480 --> 00:39:17,680
lot like if you are

00:39:15,599 --> 00:39:19,280
if you are not done in 15 minutes you

00:39:17,680 --> 00:39:21,839
could probably think about some other

00:39:19,280 --> 00:39:24,000
solutions to your problem

00:39:21,839 --> 00:39:25,680
with that being said our stack has been

00:39:24,000 --> 00:39:28,880
successfully deployed

00:39:25,680 --> 00:39:32,400
what do we have here we have an endpoint

00:39:28,880 --> 00:39:35,520
so we have something that i can actually

00:39:32,400 --> 00:39:37,359
call so i'm going to call this endpoint

00:39:35,520 --> 00:39:39,280
and i'm going to get an internal server

00:39:37,359 --> 00:39:43,520
error because i screwed something

00:39:39,280 --> 00:39:47,119
and i wonder why this is absolutely not

00:39:43,520 --> 00:39:47,119
meant to to happen

00:39:50,240 --> 00:39:54,960
okay not terribly happy about that let

00:39:53,119 --> 00:39:59,280
me

00:39:54,960 --> 00:39:59,280
let me see what did i do wrong um

00:40:01,440 --> 00:40:04,480
in any case i'm going to take a look at

00:40:03,040 --> 00:40:05,839
something else so i'm not going to try

00:40:04,480 --> 00:40:07,839
to code this function again

00:40:05,839 --> 00:40:10,000
i'm just going to confirm that it exists

00:40:07,839 --> 00:40:13,920
so i'm going to go back to

00:40:10,000 --> 00:40:15,599
my uh to my stack and i am going to go

00:40:13,920 --> 00:40:17,839
over here to resources

00:40:15,599 --> 00:40:19,040
and we can see that uh with those two

00:40:17,839 --> 00:40:21,040
lines of code

00:40:19,040 --> 00:40:23,359
with only those couple of lines of code

00:40:21,040 --> 00:40:25,760
i have managed to create all sorts of

00:40:23,359 --> 00:40:29,359
different resources so i'm going to take

00:40:25,760 --> 00:40:32,240
a look at my lambda function over here

00:40:29,359 --> 00:40:32,240
let's see what's going on

00:40:33,680 --> 00:40:37,040
so this is this is not the the lambda

00:40:35,599 --> 00:40:37,760
function because oh there you go this is

00:40:37,040 --> 00:40:40,240
the

00:40:37,760 --> 00:40:41,760
function so we can see again all sorts

00:40:40,240 --> 00:40:45,119
of different things were created

00:40:41,760 --> 00:40:47,839
configured for us and this is a

00:40:45,119 --> 00:40:51,040
connection that we have right now

00:40:47,839 --> 00:40:52,160
okay i know what happened so i would

00:40:51,040 --> 00:40:55,520
like to show you something

00:40:52,160 --> 00:40:58,000
on the top of my notes i have this

00:40:55,520 --> 00:40:59,680
i remember about mpm random watch do you

00:40:58,000 --> 00:41:00,640
know what is not ironic right on my

00:40:59,680 --> 00:41:03,920
machine

00:41:00,640 --> 00:41:06,560
npm or unwatch exactly so

00:41:03,920 --> 00:41:07,599
the thing is that before we could build

00:41:06,560 --> 00:41:10,319
this

00:41:07,599 --> 00:41:12,000
uh this is written in typescript so i

00:41:10,319 --> 00:41:14,079
have to convert it to javascript because

00:41:12,000 --> 00:41:14,880
typescript is not supported by aws

00:41:14,079 --> 00:41:18,640
lambda

00:41:14,880 --> 00:41:20,720
so i can run either mpmron build

00:41:18,640 --> 00:41:21,680
that is going to create typescript files

00:41:20,720 --> 00:41:24,800
for us

00:41:21,680 --> 00:41:26,960
or i could try an npm around watch

00:41:24,800 --> 00:41:30,079
that is going to watch for those changes

00:41:26,960 --> 00:41:32,720
and compile them in the meantime

00:41:30,079 --> 00:41:34,880
nevertheless i would like to show you

00:41:32,720 --> 00:41:36,480
that you can actually build a serverless

00:41:34,880 --> 00:41:40,400
function api

00:41:36,480 --> 00:41:43,040
so i'm going to deploy it again and

00:41:40,400 --> 00:41:45,119
show you over here what can we see when

00:41:43,040 --> 00:41:47,839
it comes to the lambda function

00:41:45,119 --> 00:41:49,520
because i think what is important to to

00:41:47,839 --> 00:41:52,079
understand about cdk

00:41:49,520 --> 00:41:53,520
is that not only you get to create

00:41:52,079 --> 00:41:54,960
resources in the cloud

00:41:53,520 --> 00:41:56,720
but you can also create different

00:41:54,960 --> 00:41:59,680
connection be between

00:41:56,720 --> 00:42:01,359
those resources so this is this has

00:41:59,680 --> 00:42:04,480
created a lambda function

00:42:01,359 --> 00:42:07,920
and it is connected to an api gateway

00:42:04,480 --> 00:42:10,800
uh alternatively we could for instance

00:42:07,920 --> 00:42:11,760
have a function that is uh triggered by

00:42:10,800 --> 00:42:14,400
s3

00:42:11,760 --> 00:42:16,319
so imagine building something like an

00:42:14,400 --> 00:42:17,040
user is going to upload their profile

00:42:16,319 --> 00:42:19,680
image

00:42:17,040 --> 00:42:20,800
to an s3 bucket that is going to call a

00:42:19,680 --> 00:42:23,119
lambda function

00:42:20,800 --> 00:42:23,920
that is going to generate a thumbnail of

00:42:23,119 --> 00:42:26,160
this image

00:42:23,920 --> 00:42:27,040
and it's going to store it in another s3

00:42:26,160 --> 00:42:30,000
bucket

00:42:27,040 --> 00:42:30,640
you can build that with typescript

00:42:30,000 --> 00:42:32,400
without

00:42:30,640 --> 00:42:33,760
kind of like learning additional

00:42:32,400 --> 00:42:37,760
programming language without

00:42:33,760 --> 00:42:40,400
learning python or any other you know

00:42:37,760 --> 00:42:42,560
more backhandy programming language and

00:42:40,400 --> 00:42:44,800
honestly i'm a huge fan of it

00:42:42,560 --> 00:42:46,720
so all right now right now it's going to

00:42:44,800 --> 00:42:49,839
work

00:42:46,720 --> 00:42:51,920
hey awesome we have a hello js heroes

00:42:49,839 --> 00:42:54,160
this is something that we have defined

00:42:51,920 --> 00:42:57,359
over here

00:42:54,160 --> 00:43:01,520
okay so i would like to do one

00:42:57,359 --> 00:43:05,119
last thing so i'm going to import

00:43:01,520 --> 00:43:08,880
a dynamodb table why because

00:43:05,119 --> 00:43:11,200
well building an api is awesome

00:43:08,880 --> 00:43:13,440
but storing data is even better like

00:43:11,200 --> 00:43:15,680
every single application

00:43:13,440 --> 00:43:17,119
probably has uh some sort of like

00:43:15,680 --> 00:43:19,359
persistent storage

00:43:17,119 --> 00:43:21,760
and you know serverless applications are

00:43:19,359 --> 00:43:23,440
no different like okay awesome you can

00:43:21,760 --> 00:43:24,079
call a lambda function going to do your

00:43:23,440 --> 00:43:25,520
stuff

00:43:24,079 --> 00:43:27,680
but nevertheless you want to store this

00:43:25,520 --> 00:43:30,400
data somewhere and dynamodb

00:43:27,680 --> 00:43:31,280
which is a no sql database provided by

00:43:30,400 --> 00:43:35,200
aws

00:43:31,280 --> 00:43:38,319
is a perfect solution for that so uh

00:43:35,200 --> 00:43:40,720
because i am a bit behind on time

00:43:38,319 --> 00:43:42,240
because i was you know fumbling with uh

00:43:40,720 --> 00:43:43,920
with my code being broken

00:43:42,240 --> 00:43:46,640
i'm going to copy that and explain it

00:43:43,920 --> 00:43:49,520
quickly so it is going to create

00:43:46,640 --> 00:43:52,079
a new dynamodb table which i'm going to

00:43:49,520 --> 00:43:55,119
call table because i'm not very original

00:43:52,079 --> 00:43:56,240
and each dynamodb table has to have a

00:43:55,119 --> 00:43:59,280
partition key

00:43:56,240 --> 00:44:02,960
so to quickly

00:43:59,280 --> 00:44:05,760
inform you a partition key is

00:44:02,960 --> 00:44:06,240
something that uniquely identifies an

00:44:05,760 --> 00:44:08,960
item

00:44:06,240 --> 00:44:09,280
in dynamodb in my case it is going to be

00:44:08,960 --> 00:44:13,200
in

00:44:09,280 --> 00:44:15,200
an id of type string and that's it

00:44:13,200 --> 00:44:16,800
imagine i'm not sure i'm not sure if you

00:44:15,200 --> 00:44:20,000
have like experience with

00:44:16,800 --> 00:44:21,599
mysql or other databases but

00:44:20,000 --> 00:44:23,359
creating a database from scratch could

00:44:21,599 --> 00:44:25,359
be you know a bit of a hustle

00:44:23,359 --> 00:44:26,960
and right now i get to create a

00:44:25,359 --> 00:44:29,839
cloud-based dynamodb

00:44:26,960 --> 00:44:31,359
database with basically three lines of

00:44:29,839 --> 00:44:33,440
code

00:44:31,359 --> 00:44:35,359
and this database is going to scale

00:44:33,440 --> 00:44:37,760
massively for me without

00:44:35,359 --> 00:44:39,760
any input whatsoever from my site and

00:44:37,760 --> 00:44:41,119
the i am only going to pay

00:44:39,760 --> 00:44:42,880
for the data that is going to be

00:44:41,119 --> 00:44:45,359
actually stored in that database

00:44:42,880 --> 00:44:45,920
so you will no longer have to pay for

00:44:45,359 --> 00:44:48,000
like you know

00:44:45,920 --> 00:44:49,839
keeping an empty database running on

00:44:48,000 --> 00:44:51,599
some server server in your basement

00:44:49,839 --> 00:44:54,800
somewhere

00:44:51,599 --> 00:44:55,280
i'm going to also do one more thing i

00:44:54,800 --> 00:44:58,560
remember

00:44:55,280 --> 00:45:00,480
i've told you earlier that cdk is not

00:44:58,560 --> 00:45:02,240
only about creating resources but also

00:45:00,480 --> 00:45:03,119
about making connections between your

00:45:02,240 --> 00:45:06,640
sources

00:45:03,119 --> 00:45:09,119
so by default for instance uh

00:45:06,640 --> 00:45:10,000
a lambda function cannot talk to this

00:45:09,119 --> 00:45:12,640
database

00:45:10,000 --> 00:45:14,960
which makes sense right because i am i

00:45:12,640 --> 00:45:17,599
don't want everyone to have access

00:45:14,960 --> 00:45:18,079
to uh the data in my database that

00:45:17,599 --> 00:45:20,400
includes

00:45:18,079 --> 00:45:21,119
also my colleagues and that includes

00:45:20,400 --> 00:45:22,800
also

00:45:21,119 --> 00:45:25,440
different like lambda functions that i'm

00:45:22,800 --> 00:45:27,520
going to create but i would like to

00:45:25,440 --> 00:45:29,520
have this function return the data from

00:45:27,520 --> 00:45:32,960
the database how do i do that

00:45:29,520 --> 00:45:37,040
well i could just do this table grant

00:45:32,960 --> 00:45:38,960
read data my lambda and that's it

00:45:37,040 --> 00:45:40,319
this is a single line of code and with

00:45:38,960 --> 00:45:43,920
that single line of code

00:45:40,319 --> 00:45:46,079
i have granted this my lambda function

00:45:43,920 --> 00:45:47,040
the privileges to read the data from

00:45:46,079 --> 00:45:49,520
this table

00:45:47,040 --> 00:45:50,160
and that's it i i was honestly blown

00:45:49,520 --> 00:45:54,640
away

00:45:50,160 --> 00:45:56,560
the first time i saw it i will have to

00:45:54,640 --> 00:45:58,160
do one more thing in the lambda function

00:45:56,560 --> 00:46:01,280
so i'm going to

00:45:58,160 --> 00:46:03,839
quickly copy and paste that over here

00:46:01,280 --> 00:46:05,280
so this lambda function is a bit

00:46:03,839 --> 00:46:08,079
different now

00:46:05,280 --> 00:46:10,400
uh so i'm just going to remove that it's

00:46:08,079 --> 00:46:12,800
going to make typescript unhappy but

00:46:10,400 --> 00:46:14,400
uh this is this is absolutely fine for

00:46:12,800 --> 00:46:16,640
for that part

00:46:14,400 --> 00:46:17,839
because i forgot actually to install two

00:46:16,640 --> 00:46:19,680
things because

00:46:17,839 --> 00:46:22,160
it's complaining about the lack of aw

00:46:19,680 --> 00:46:25,359
cdk

00:46:22,160 --> 00:46:28,400
so i'm going to install that quickly and

00:46:25,359 --> 00:46:31,599
you know let me took it back it is going

00:46:28,400 --> 00:46:34,319
to complain about

00:46:31,599 --> 00:46:34,800
types oh there you go we also have to

00:46:34,319 --> 00:46:37,680
install

00:46:34,800 --> 00:46:39,760
uh types for for the stuff that we are

00:46:37,680 --> 00:46:41,200
using because it is typescript after all

00:46:39,760 --> 00:46:42,720
so right now there we go it is not

00:46:41,200 --> 00:46:44,480
complaining anymore

00:46:42,720 --> 00:46:46,000
i'm going to quickly walk you through

00:46:44,480 --> 00:46:49,200
this function so

00:46:46,000 --> 00:46:52,720
it is going to use aws cdk

00:46:49,200 --> 00:46:53,520
so aws cdk is a software development kit

00:46:52,720 --> 00:46:56,000
not to

00:46:53,520 --> 00:46:59,119
be confused with cloud development kit

00:46:56,000 --> 00:47:02,400
again i told you names in aws are not

00:46:59,119 --> 00:47:04,720
consistent to say the least

00:47:02,400 --> 00:47:06,800
so this is going to take a table name

00:47:04,720 --> 00:47:09,040
from an environment variable

00:47:06,800 --> 00:47:10,240
and it is going to use a dynamodb

00:47:09,040 --> 00:47:13,440
document client

00:47:10,240 --> 00:47:14,319
which is basically the way how we can

00:47:13,440 --> 00:47:16,960
use

00:47:14,319 --> 00:47:18,160
database dynamodb database from

00:47:16,960 --> 00:47:21,359
javascript

00:47:18,160 --> 00:47:24,400
and this function is just going to get

00:47:21,359 --> 00:47:27,920
all the items in in

00:47:24,400 --> 00:47:29,760
this on apologies in this dynamodb table

00:47:27,920 --> 00:47:31,280
so this go it's called gold get all

00:47:29,760 --> 00:47:32,160
to-do's i'm going to actually rename it

00:47:31,280 --> 00:47:35,760
to get all

00:47:32,160 --> 00:47:37,920
items because this is much more

00:47:35,760 --> 00:47:39,280
convenient in that case and it is going

00:47:37,920 --> 00:47:43,119
to get those items

00:47:39,280 --> 00:47:43,119
and return them as a json

00:47:43,359 --> 00:47:48,480
one more thing how do we take a look

00:47:46,559 --> 00:47:50,480
on the right hand side we have this

00:47:48,480 --> 00:47:54,880
lambda function on the left hand side

00:47:50,480 --> 00:47:57,520
we have this uh our stack

00:47:54,880 --> 00:47:59,920
we have to somehow pass the table name

00:47:57,520 --> 00:48:02,960
as an environment variable

00:47:59,920 --> 00:48:03,359
to uh our lambda function how do we do

00:48:02,960 --> 00:48:06,400
that

00:48:03,359 --> 00:48:08,480
well luckily there's a relatively simple

00:48:06,400 --> 00:48:11,440
way of doing that

00:48:08,480 --> 00:48:13,760
i just have to use this so i'm going to

00:48:11,440 --> 00:48:16,319
pass in an environment variable

00:48:13,760 --> 00:48:17,040
to my lambda function and the only thing

00:48:16,319 --> 00:48:20,000
i have to

00:48:17,040 --> 00:48:21,119
pass in is the table name and this table

00:48:20,000 --> 00:48:25,520
name is going to be

00:48:21,119 --> 00:48:27,839
uh equal to table dot table name

00:48:25,520 --> 00:48:29,839
and that's it like i i don't have to you

00:48:27,839 --> 00:48:32,720
know configure stuff i don't have to

00:48:29,839 --> 00:48:33,200
deal with like environment of files i

00:48:32,720 --> 00:48:36,160
just

00:48:33,200 --> 00:48:37,599
get to create variables and assign those

00:48:36,160 --> 00:48:39,280
variables to different variables

00:48:37,599 --> 00:48:40,800
this is what i love i am a typescript

00:48:39,280 --> 00:48:43,200
developer i want to

00:48:40,800 --> 00:48:44,400
you know keep continue working with

00:48:43,200 --> 00:48:47,839
typescript i don't want to

00:48:44,400 --> 00:48:51,119
you know write config files and

00:48:47,839 --> 00:48:51,119
so i'm going to deploy that quickly

00:48:51,200 --> 00:48:55,040
and this is going to take a bit longer

00:48:53,599 --> 00:48:57,839
than uh

00:48:55,040 --> 00:48:59,440
than before because it has to create a

00:48:57,839 --> 00:49:01,359
dynamodb table

00:48:59,440 --> 00:49:03,200
which is um i know it's going to take

00:49:01,359 --> 00:49:05,440
probably like a minute or so

00:49:03,200 --> 00:49:07,599
which again it's uh it's much faster

00:49:05,440 --> 00:49:09,119
than the stuff that you are kind of used

00:49:07,599 --> 00:49:10,000
to if you are not doing things in the

00:49:09,119 --> 00:49:12,640
cloud

00:49:10,000 --> 00:49:14,880
because you know buying a server

00:49:12,640 --> 00:49:16,400
configuring mysql on it is going

00:49:14,880 --> 00:49:17,920
probably to take you significantly

00:49:16,400 --> 00:49:20,640
longer

00:49:17,920 --> 00:49:21,440
so this is going to create this stock

00:49:20,640 --> 00:49:24,480
it's uh

00:49:21,440 --> 00:49:27,359
it's working so

00:49:24,480 --> 00:49:27,760
i'm thinking what what else can i uh

00:49:27,359 --> 00:49:31,599
share

00:49:27,760 --> 00:49:34,559
share with you in in the meantime so

00:49:31,599 --> 00:49:35,200
of course like this function over here

00:49:34,559 --> 00:49:37,520
this is not

00:49:35,200 --> 00:49:39,119
you know perfectly ideal uh this this

00:49:37,520 --> 00:49:40,480
number function because i am not like

00:49:39,119 --> 00:49:43,359
handing errors

00:49:40,480 --> 00:49:45,520
i am only going to get all items on

00:49:43,359 --> 00:49:47,920
every single request

00:49:45,520 --> 00:49:48,880
but if you want to have a single

00:49:47,920 --> 00:49:51,200
function

00:49:48,880 --> 00:49:52,079
for you know saving data into the

00:49:51,200 --> 00:49:55,040
database

00:49:52,079 --> 00:49:56,240
or getting the items from that database

00:49:55,040 --> 00:49:58,720
you can

00:49:56,240 --> 00:50:00,400
generally create an entire rest api in a

00:49:58,720 --> 00:50:02,000
single lambda function

00:50:00,400 --> 00:50:03,520
you can totally do that this is

00:50:02,000 --> 00:50:05,680
absolutely up to you

00:50:03,520 --> 00:50:07,680
uh although i would probably recommend

00:50:05,680 --> 00:50:09,359
having different lambda functions per

00:50:07,680 --> 00:50:12,079
action that you want to take

00:50:09,359 --> 00:50:13,280
so i would imagine a function like get

00:50:12,079 --> 00:50:16,720
items

00:50:13,280 --> 00:50:19,839
put items delete item delete items and

00:50:16,720 --> 00:50:21,280
and whatnot okay this is going to this

00:50:19,839 --> 00:50:24,160
is actually taking a significantly

00:50:21,280 --> 00:50:24,160
longer than i thought

00:50:24,880 --> 00:50:28,720
i don't think this is my internet though

00:50:26,559 --> 00:50:30,960
uh i think this is you know

00:50:28,720 --> 00:50:32,800
live demo gods not being terribly happy

00:50:30,960 --> 00:50:36,720
with me today

00:50:32,800 --> 00:50:38,960
uh so let's just give it a minute

00:50:36,720 --> 00:50:41,040
it's going to probably okay this is

00:50:38,960 --> 00:50:43,359
three out of 11

00:50:41,040 --> 00:50:44,079
but this operates on windows rules so

00:50:43,359 --> 00:50:46,800
remember when

00:50:44,079 --> 00:50:48,720
we are like installing windows 98 it

00:50:46,800 --> 00:50:49,680
says that it's either between two weeks

00:50:48,720 --> 00:50:52,160
or 20 seconds

00:50:49,680 --> 00:50:55,040
remaining you you never know okay right

00:50:52,160 --> 00:50:58,160
now it's managed to to successfully

00:50:55,040 --> 00:50:59,760
uh push this stack to the cloud so i am

00:50:58,160 --> 00:51:02,480
going to very quickly

00:50:59,760 --> 00:51:04,079
go over here refresh the resources that

00:51:02,480 --> 00:51:06,480
we have in our stack

00:51:04,079 --> 00:51:08,480
and i'm going to look for our dynamodb

00:51:06,480 --> 00:51:11,440
table we can see that over here

00:51:08,480 --> 00:51:11,760
i'm going to click on that in order to

00:51:11,440 --> 00:51:15,440
see

00:51:11,760 --> 00:51:15,680
our fresh dynamodb table created i have

00:51:15,440 --> 00:51:18,319
an

00:51:15,680 --> 00:51:22,800
invite url which is funny because i

00:51:18,319 --> 00:51:25,760
click on the url from the cloud

00:51:22,800 --> 00:51:27,280
uh this is this is new this is new this

00:51:25,760 --> 00:51:28,880
is not something that i have seen before

00:51:27,280 --> 00:51:32,079
so i'm going to

00:51:28,880 --> 00:51:34,480
okay um i think that

00:51:32,079 --> 00:51:36,319
aws is right now introducing a preview

00:51:34,480 --> 00:51:38,240
of the new dynamodb console and

00:51:36,319 --> 00:51:39,520
this is actually a bug on their site so

00:51:38,240 --> 00:51:42,400
this is interesting

00:51:39,520 --> 00:51:43,040
in any case this is the js hero stack

00:51:42,400 --> 00:51:45,520
table

00:51:43,040 --> 00:51:46,640
with that we have created just right now

00:51:45,520 --> 00:51:49,119
right now we have

00:51:46,640 --> 00:51:52,720
zero items in the database but i'm going

00:51:49,119 --> 00:51:52,720
to very quickly create an item

00:51:53,280 --> 00:52:00,720
so i'm going to basically put a uh

00:51:56,800 --> 00:52:02,960
an item over here so i'm going to

00:52:00,720 --> 00:52:03,760
create an item with an id of one two

00:52:02,960 --> 00:52:06,480
three

00:52:03,760 --> 00:52:06,480
create an item

00:52:07,280 --> 00:52:10,480
and there you go we have a single item

00:52:09,440 --> 00:52:12,160
in our database

00:52:10,480 --> 00:52:13,839
i know this is not exactly failing

00:52:12,160 --> 00:52:16,880
because it's only one item

00:52:13,839 --> 00:52:17,760
but you can probably imagine that you

00:52:16,880 --> 00:52:20,640
know you can put

00:52:17,760 --> 00:52:22,720
all sorts of data in this database it is

00:52:20,640 --> 00:52:24,880
i know sql database so that is why i

00:52:22,720 --> 00:52:28,400
didn't have to create any schema

00:52:24,880 --> 00:52:30,880
for it and right now i'm going to

00:52:28,400 --> 00:52:33,839
do a moment of truth event i'm going to

00:52:30,880 --> 00:52:34,640
curl or serial i'm not sure how you

00:52:33,839 --> 00:52:37,920
pronounce it

00:52:34,640 --> 00:52:39,839
i'm going to call this uh url in order

00:52:37,920 --> 00:52:42,800
to get all items from our

00:52:39,839 --> 00:52:42,800
dynamodb table

00:52:43,440 --> 00:52:48,400
there you go so it it did look for all

00:52:47,200 --> 00:52:51,839
of the items

00:52:48,400 --> 00:52:55,280
uh it didn't get the item of the id

00:52:51,839 --> 00:52:56,400
of 123 and the count of the items was

00:52:55,280 --> 00:52:59,119
one

00:52:56,400 --> 00:53:01,040
just for the record uh this is a scan

00:52:59,119 --> 00:53:03,119
operation that we are using over here

00:53:01,040 --> 00:53:04,079
it's going to go for your your entire

00:53:03,119 --> 00:53:06,400
database

00:53:04,079 --> 00:53:08,000
so if you have like millions of files

00:53:06,400 --> 00:53:09,839
you probably don't want to get

00:53:08,000 --> 00:53:11,359
all of them in a single batch because it

00:53:09,839 --> 00:53:13,040
can be rather expensive

00:53:11,359 --> 00:53:14,559
but nevertheless for a small example

00:53:13,040 --> 00:53:18,480
like this this is

00:53:14,559 --> 00:53:21,200
exactly valid so

00:53:18,480 --> 00:53:22,240
uh to kind of conclude this demo i would

00:53:21,200 --> 00:53:24,559
like to quickly

00:53:22,240 --> 00:53:25,920
review what we just did in just in just

00:53:24,559 --> 00:53:28,400
like couple of minutes

00:53:25,920 --> 00:53:29,680
from zero to hero we've learned how to

00:53:28,400 --> 00:53:31,680
create an s3 bucket

00:53:29,680 --> 00:53:33,359
we've learned how to make it public

00:53:31,680 --> 00:53:34,160
we've learned how to create a lambda

00:53:33,359 --> 00:53:36,880
function

00:53:34,160 --> 00:53:38,559
from scratch we've also learned how to

00:53:36,880 --> 00:53:41,040
define an environment variable

00:53:38,559 --> 00:53:42,319
for the zombie function we know how to

00:53:41,040 --> 00:53:44,880
create a

00:53:42,319 --> 00:53:45,920
lambda rest api in order to be able to

00:53:44,880 --> 00:53:48,880
call this function

00:53:45,920 --> 00:53:50,079
from the internet we know how to create

00:53:48,880 --> 00:53:53,520
a dynamodb

00:53:50,079 --> 00:53:55,599
table how to set up a partition key

00:53:53,520 --> 00:53:57,119
and what is the partition key so it is

00:53:55,599 --> 00:54:00,480
going to uniquely identify

00:53:57,119 --> 00:54:02,559
items in an array and we also know

00:54:00,480 --> 00:54:03,520
that we can define kind of connections

00:54:02,559 --> 00:54:07,200
between

00:54:03,520 --> 00:54:09,280
resources in cdk so we get to tell that

00:54:07,200 --> 00:54:10,960
this resource has access to that

00:54:09,280 --> 00:54:14,000
resource so this

00:54:10,960 --> 00:54:16,800
lambda function can write data

00:54:14,000 --> 00:54:17,200
to this dynamodb table that is quite a

00:54:16,800 --> 00:54:19,760
lot

00:54:17,200 --> 00:54:21,200
and i am honestly very proud of all of

00:54:19,760 --> 00:54:24,079
us that we've managed to

00:54:21,200 --> 00:54:24,559
do it together i mean i did it but you

00:54:24,079 --> 00:54:26,480
were

00:54:24,559 --> 00:54:27,839
here for emotional support and i

00:54:26,480 --> 00:54:30,240
appreciate that

00:54:27,839 --> 00:54:32,800
uh i would like to conclude this talk

00:54:30,240 --> 00:54:34,400
with with this idea that with cdk you

00:54:32,800 --> 00:54:37,920
can kind of become

00:54:34,400 --> 00:54:38,400
a fuller stack developer so you get to

00:54:37,920 --> 00:54:41,280
use

00:54:38,400 --> 00:54:42,240
typescript for frontends you know jquery

00:54:41,280 --> 00:54:44,319
obviously but

00:54:42,240 --> 00:54:46,880
uh but nevertheless typescript for

00:54:44,319 --> 00:54:49,680
front-end backend with node.js

00:54:46,880 --> 00:54:52,240
and infrastructure and this unlocks

00:54:49,680 --> 00:54:53,200
quite a lot of possibilities i was

00:54:52,240 --> 00:54:56,480
actually watching a

00:54:53,200 --> 00:55:00,319
talk earlier today but you can also do

00:54:56,480 --> 00:55:02,559
continuous delivery with cdk so

00:55:00,319 --> 00:55:04,319
you can use cdk in order to create

00:55:02,559 --> 00:55:07,520
continuous delivery pipelines

00:55:04,319 --> 00:55:09,680
for your cdk apps and this is like one

00:55:07,520 --> 00:55:11,200
level above all of that and i'm really

00:55:09,680 --> 00:55:13,680
looking forward to see

00:55:11,200 --> 00:55:15,200
how many things are we going to be

00:55:13,680 --> 00:55:17,520
building with cdk

00:55:15,200 --> 00:55:19,040
uh a little while from now cdk is still

00:55:17,520 --> 00:55:21,760
relatively new

00:55:19,040 --> 00:55:22,319
and i'm very excited about it in fact i

00:55:21,760 --> 00:55:25,119
would like to

00:55:22,319 --> 00:55:26,240
quickly plug in that i did a course on

00:55:25,119 --> 00:55:28,160
echo.io

00:55:26,240 --> 00:55:30,000
which is called a built-in app with the

00:55:28,160 --> 00:55:33,520
aws cloud development kit

00:55:30,000 --> 00:55:35,599
it guides you from uh from xero to hero

00:55:33,520 --> 00:55:38,480
when it comes to club development kit

00:55:35,599 --> 00:55:40,079
we are building stuff uh roughly similar

00:55:38,480 --> 00:55:43,040
to what you saw right now

00:55:40,079 --> 00:55:43,760
but with a lot more kind of context

00:55:43,040 --> 00:55:46,240
there's a lot

00:55:43,760 --> 00:55:47,680
more going on and you're going to learn

00:55:46,240 --> 00:55:50,480
an awful lot about

00:55:47,680 --> 00:55:51,839
all kinds of different aws servers uh

00:55:50,480 --> 00:55:52,400
highly recommended this is the best

00:55:51,839 --> 00:55:55,040
thing i

00:55:52,400 --> 00:55:57,119
ever done when it comes to content with

00:55:55,040 --> 00:55:57,760
that being said i would like to uh thank

00:55:57,119 --> 00:55:59,520
you for

00:55:57,760 --> 00:56:03,280
listening and i would love to hear if

00:55:59,520 --> 00:56:06,000
you have any questions

00:56:03,280 --> 00:56:06,960
thank you that was really nice awesome

00:56:06,000 --> 00:56:08,799
happy to hear that and

00:56:06,960 --> 00:56:11,520
we can we could clap but it would be

00:56:08,799 --> 00:56:11,520
awkward probably

00:56:15,440 --> 00:56:20,079
i actually missed it you know yeah for

00:56:18,480 --> 00:56:22,480
for me it was really interesting because

00:56:20,079 --> 00:56:22,960
i had no prior experience with any of

00:56:22,480 --> 00:56:24,880
these and

00:56:22,960 --> 00:56:26,319
it actually it's quite surprising to see

00:56:24,880 --> 00:56:30,400
how easy it is to

00:56:26,319 --> 00:56:31,520
to do everything like uh back in the

00:56:30,400 --> 00:56:33,280
days

00:56:31,520 --> 00:56:34,880
if i can say that like you will probably

00:56:33,280 --> 00:56:37,839
have to rely on the

00:56:34,880 --> 00:56:38,240
aws console or your just inner knowledge

00:56:37,839 --> 00:56:41,119
of

00:56:38,240 --> 00:56:42,839
what service to use and when exactly

00:56:41,119 --> 00:56:44,799
this looks like it's a much more

00:56:42,839 --> 00:56:47,359
accessible

00:56:44,799 --> 00:56:49,040
uh kind of approach for for especially

00:56:47,359 --> 00:56:52,000
for developers with no prior

00:56:49,040 --> 00:56:52,640
infrastructure knowledge yeah do we have

00:56:52,000 --> 00:56:55,200
any

00:56:52,640 --> 00:56:56,559
yeah sorry no no go ahead go ahead now

00:56:55,200 --> 00:57:00,319
if you have any questions

00:56:56,559 --> 00:57:00,319
if anyone has any questions i wanted to

00:57:01,760 --> 00:57:05,040
i'd like to like ask a question sure

00:57:04,480 --> 00:57:07,839
sure

00:57:05,040 --> 00:57:08,240
first and thank you very much like this

00:57:07,839 --> 00:57:10,160
is

00:57:08,240 --> 00:57:12,240
amazing and blown away because i'm

00:57:10,160 --> 00:57:14,480
building an app right now with only

00:57:12,240 --> 00:57:15,520
amplify and a little bit of tweaking in

00:57:14,480 --> 00:57:17,520
the console

00:57:15,520 --> 00:57:19,280
so this is a huge improve and thank you

00:57:17,520 --> 00:57:21,680
very much for the time

00:57:19,280 --> 00:57:23,599
and i wanted to know that in the moment

00:57:21,680 --> 00:57:26,079
when you made the

00:57:23,599 --> 00:57:26,799
bucket public could you also with the

00:57:26,079 --> 00:57:29,359
cdk

00:57:26,799 --> 00:57:31,200
make only a folder inside the bucket

00:57:29,359 --> 00:57:33,440
public

00:57:31,200 --> 00:57:34,240
uh okay so this is actually not

00:57:33,440 --> 00:57:37,359
encouraged by

00:57:34,240 --> 00:57:40,160
aws um like s3 buckets have

00:57:37,359 --> 00:57:42,000
different ways how you can control kind

00:57:40,160 --> 00:57:42,720
of the access to the contents of the

00:57:42,000 --> 00:57:44,559
bucket

00:57:42,720 --> 00:57:46,240
so there used to be things that were

00:57:44,559 --> 00:57:49,359
called if i remember currency

00:57:46,240 --> 00:57:50,160
bucket policies so in in a bucket policy

00:57:49,359 --> 00:57:51,599
you could

00:57:50,160 --> 00:57:53,520
for instance because i know what you're

00:57:51,599 --> 00:57:55,280
saying like you have a single bucket

00:57:53,520 --> 00:57:57,119
and you have couple of files that are

00:57:55,280 --> 00:57:58,240
meant to be public and some of them are

00:57:57,119 --> 00:58:02,079
meant to be

00:57:58,240 --> 00:58:02,720
private this is still supported by aws

00:58:02,079 --> 00:58:06,079
bar for

00:58:02,720 --> 00:58:09,359
kind of legacy reasons so you rather

00:58:06,079 --> 00:58:12,319
want to have separate buckets for public

00:58:09,359 --> 00:58:14,960
and and private data you can have up to

00:58:12,319 --> 00:58:16,559
1 000 buckets in an account

00:58:14,960 --> 00:58:18,079
so this is not a huge deal that you have

00:58:16,559 --> 00:58:21,119
to create a separate

00:58:18,079 --> 00:58:23,119
new one and honestly like managing

00:58:21,119 --> 00:58:24,400
which file should be public and which

00:58:23,119 --> 00:58:27,200
files should be private

00:58:24,400 --> 00:58:28,240
in you know a single aws backup bucket

00:58:27,200 --> 00:58:30,720
can be

00:58:28,240 --> 00:58:32,240
i assume probably kind of a bit messy

00:58:30,720 --> 00:58:33,920
this is why i'm very happy that i am a

00:58:32,240 --> 00:58:37,839
developer and not a you know

00:58:33,920 --> 00:58:37,839
security data compliance engineer

00:58:38,000 --> 00:58:42,240
thank you man that helps you know thank

00:58:40,160 --> 00:58:44,880
you yeah speaking of amplify

00:58:42,240 --> 00:58:46,720
uh there's an awesome talk on youtube

00:58:44,880 --> 00:58:50,319
which i watched uh yesterday

00:58:46,720 --> 00:58:52,960
about how you can combine aws

00:58:50,319 --> 00:58:54,799
amplify with cdk i'm going to find it in

00:58:52,960 --> 00:58:57,119
the meantime and paste the link in the

00:58:54,799 --> 00:58:57,119
chat

00:58:57,440 --> 00:59:01,760
if you have any more questions i'm i'm

00:58:59,280 --> 00:59:01,760
also here

00:59:03,520 --> 00:59:06,799
yes i do have a question

00:59:06,880 --> 00:59:12,880
and thank you it's a great presentation

00:59:10,000 --> 00:59:13,839
um so i i'm wondering regarding the the

00:59:12,880 --> 00:59:15,599
the tools

00:59:13,839 --> 00:59:17,359
and the development life cycle i

00:59:15,599 --> 00:59:20,319
remember when

00:59:17,359 --> 00:59:22,799
when sam was launched there was quite a

00:59:20,319 --> 00:59:23,520
challenge for example to develop locally

00:59:22,799 --> 00:59:27,359
or test

00:59:23,520 --> 00:59:28,400
locally and even the the plugins for

00:59:27,359 --> 00:59:31,599
different uh

00:59:28,400 --> 00:59:33,040
ides so i'm just wondering you know from

00:59:31,599 --> 00:59:35,839
your experience so far

00:59:33,040 --> 00:59:37,520
how easy is it today for example to use

00:59:35,839 --> 00:59:40,720
cdk locally to test

00:59:37,520 --> 00:59:43,359
locally and and also you know how how

00:59:40,720 --> 00:59:46,079
ready are the plugins for different ids

00:59:43,359 --> 00:59:47,440
um i i saw you you were using the visual

00:59:46,079 --> 00:59:51,520
studio code

00:59:47,440 --> 00:59:55,920
is there already a a good extension

00:59:51,520 --> 00:59:55,920
for visual studio

00:59:57,200 --> 01:00:00,720
so i'm going to talk about visual studio

00:59:59,359 --> 01:00:04,079
code because this is

01:00:00,720 --> 01:00:05,200
the my idea of choice uh i i think that

01:00:04,079 --> 01:00:08,960
it is

01:00:05,200 --> 01:00:11,359
much better when as opposed to to some

01:00:08,960 --> 01:00:12,160
so a couple of things here uh i feel

01:00:11,359 --> 01:00:14,319
like cdk

01:00:12,160 --> 01:00:15,440
is much more focused on like developer

01:00:14,319 --> 01:00:18,480
experience

01:00:15,440 --> 01:00:20,559
so uh people who are you know writing c

01:00:18,480 --> 01:00:22,559
writing cd came themselves like the cdk

01:00:20,559 --> 01:00:25,359
team they're using visual studio code

01:00:22,559 --> 01:00:26,880
and there's actually a vs code extension

01:00:25,359 --> 01:00:28,799
for cdk which makes uh

01:00:26,880 --> 01:00:30,799
quite a lot of things a bit simpler so

01:00:28,799 --> 01:00:32,319
for instance you can see the contents of

01:00:30,799 --> 01:00:35,040
your cdk stack

01:00:32,319 --> 01:00:36,240
after you deploy it within the vs code

01:00:35,040 --> 01:00:39,359
editor

01:00:36,240 --> 01:00:41,440
when it comes to testing uh locally

01:00:39,359 --> 01:00:43,359
you can uh so there's a couple of things

01:00:41,440 --> 01:00:45,680
you can actually write tests

01:00:43,359 --> 01:00:47,200
for for cdk which uh which is something

01:00:45,680 --> 01:00:49,280
that i could probably do in

01:00:47,200 --> 01:00:50,640
another talk because i didn't have the

01:00:49,280 --> 01:00:52,480
the time right now

01:00:50,640 --> 01:00:54,880
so you can write tests in order to see

01:00:52,480 --> 01:00:56,319
uh kind of whether your stack works as

01:00:54,880 --> 01:00:58,319
intended uh

01:00:56,319 --> 01:01:00,319
you could also run your functions

01:00:58,319 --> 01:01:03,599
locally but this is going to use

01:01:00,319 --> 01:01:05,440
some under the hood i am i am unable to

01:01:03,599 --> 01:01:06,640
find a better way of doing that right

01:01:05,440 --> 01:01:09,920
now

01:01:06,640 --> 01:01:11,520
but uh i think that this is going to

01:01:09,920 --> 01:01:14,960
change i think that you know

01:01:11,520 --> 01:01:16,960
aws is going to kind of adopt uh cdk as

01:01:14,960 --> 01:01:18,640
one of them kind of mainstream ways of

01:01:16,960 --> 01:01:21,760
building stuff in the cloud

01:01:18,640 --> 01:01:23,599
and things that we have right now in cdk

01:01:21,760 --> 01:01:25,359
i i think this this landscape is going

01:01:23,599 --> 01:01:28,079
to be so much more different

01:01:25,359 --> 01:01:28,400
in a year from now uh because like even

01:01:28,079 --> 01:01:30,799
the

01:01:28,400 --> 01:01:32,160
cto of amazon has said you know in

01:01:30,799 --> 01:01:35,280
public on his twitter

01:01:32,160 --> 01:01:36,160
that cdks is a game changer and honestly

01:01:35,280 --> 01:01:37,599
i kind of agree

01:01:36,160 --> 01:01:39,520
with that even though i don't work for

01:01:37,599 --> 01:01:42,160
aws i am not involved

01:01:39,520 --> 01:01:42,799
uh but but still i am very happy to kind

01:01:42,160 --> 01:01:45,520
of see

01:01:42,799 --> 01:01:46,480
uh see the progress there so to sum up i

01:01:45,520 --> 01:01:49,359
think it's not

01:01:46,480 --> 01:01:52,240
100 perfect perfect right now but it is

01:01:49,359 --> 01:01:52,799
going to get so much better okay thank

01:01:52,240 --> 01:01:55,039
you

01:01:52,799 --> 01:01:57,920
we probably need to write an article cdk

01:01:55,039 --> 01:01:57,920
is it in the world

01:01:58,960 --> 01:02:04,559
yeah honestly honestly you can quote me

01:02:02,480 --> 01:02:06,000
in two years uh in two years cdk is

01:02:04,559 --> 01:02:10,640
going to be the mainstream way

01:02:06,000 --> 01:02:12,319
of building stuff in aws yeah 2022.

01:02:10,640 --> 01:02:15,280
okay thank you very much and good luck

01:02:12,319 --> 01:02:20,960
with the certification in 10 days

01:02:15,280 --> 01:02:24,000
oh crap i have to study yes

01:02:20,960 --> 01:02:24,799
uh if no i i also have my blue one

01:02:24,000 --> 01:02:27,280
question

01:02:24,799 --> 01:02:29,520
uh more of a curiosity so you mentioned

01:02:27,280 --> 01:02:31,440
the you mentioned the egghead course

01:02:29,520 --> 01:02:33,760
uh for people that are just starting

01:02:31,440 --> 01:02:35,520
with this other than the course what are

01:02:33,760 --> 01:02:37,200
what other resources should they take

01:02:35,520 --> 01:02:38,640
into consideration like the official

01:02:37,200 --> 01:02:39,119
docs stuff like that like where would

01:02:38,640 --> 01:02:42,480
you go

01:02:39,119 --> 01:02:44,000
for you know any uh okay so a couple of

01:02:42,480 --> 01:02:47,359
things uh

01:02:44,000 --> 01:02:48,400
the cdk documentation is is great uh

01:02:47,359 --> 01:02:51,119
because it is

01:02:48,400 --> 01:02:52,880
in a relatively new service so uh they

01:02:51,119 --> 01:02:53,440
are trying to keep things fresh so the

01:02:52,880 --> 01:02:55,200
official

01:02:53,440 --> 01:02:59,440
documentation is a great place to to

01:02:55,200 --> 01:03:01,200
start uh there's also a cdk.dev stack

01:02:59,440 --> 01:03:03,680
so if i remember correctly this is the

01:03:01,200 --> 01:03:06,720
address sdk.dev

01:03:03,680 --> 01:03:07,440
uh this is the the slack uh for the cdk

01:03:06,720 --> 01:03:09,119
community

01:03:07,440 --> 01:03:11,839
there are also many people who are

01:03:09,119 --> 01:03:14,839
active on twitter also a great way to

01:03:11,839 --> 01:03:16,400
learn more about cdk is to visit

01:03:14,839 --> 01:03:17,920
cdkpatterns.com

01:03:16,400 --> 01:03:20,720
this is the the site i was showing in

01:03:17,920 --> 01:03:21,440
the sites uh where you have all sorts of

01:03:20,720 --> 01:03:23,359
different

01:03:21,440 --> 01:03:26,160
uh kind of patterns that are already

01:03:23,359 --> 01:03:28,640
implemented in in cdk so you can see

01:03:26,160 --> 01:03:29,359
not only how you create you know very

01:03:28,640 --> 01:03:31,839
basic stuff

01:03:29,359 --> 01:03:33,359
but also how you can leverage those

01:03:31,839 --> 01:03:34,079
skills in order to build something that

01:03:33,359 --> 01:03:36,000
is

01:03:34,079 --> 01:03:37,359
much bigger and much more uh

01:03:36,000 --> 01:03:40,720
production-ready

01:03:37,359 --> 01:03:44,160
um and there are also uh quite a lot of

01:03:40,720 --> 01:03:44,640
uh videos on youtube so iws they are

01:03:44,160 --> 01:03:47,839
doing

01:03:44,640 --> 01:03:51,280
aws tech talks and cdk is

01:03:47,839 --> 01:03:53,520
is featured rather frequently in there

01:03:51,280 --> 01:03:54,400
and if you are interested there's also

01:03:53,520 --> 01:03:57,119
one more thing

01:03:54,400 --> 01:03:58,480
a month ago there was a cdk day so there

01:03:57,119 --> 01:04:01,280
was a whole conference

01:03:58,480 --> 01:04:02,960
online obviously about cdk and the

01:04:01,280 --> 01:04:04,799
videos are already on youtube so if you

01:04:02,960 --> 01:04:07,200
are interested in that area

01:04:04,799 --> 01:04:08,880
uh if you want to learn more in a video

01:04:07,200 --> 01:04:10,960
format i strongly recommend you check it

01:04:08,880 --> 01:04:13,599
out

01:04:10,960 --> 01:04:14,799
cool thanks i think these are very

01:04:13,599 --> 01:04:18,799
useful resources for

01:04:14,799 --> 01:04:20,799
everyone that want to get started from

01:04:18,799 --> 01:04:22,480
somewhere or

01:04:20,799 --> 01:04:24,880
need some sort of references as they're

01:04:22,480 --> 01:04:24,880
working

01:04:25,599 --> 01:04:30,960
okay uh anyone else any other questions

01:04:36,160 --> 01:04:44,160
okay if not i guess we can

01:04:40,480 --> 01:04:48,000
call it a meetup uh thank you

01:04:44,160 --> 01:04:48,000
thomas for taking the time

01:04:48,559 --> 01:04:52,079
yeah uh looking forward to actually

01:04:51,119 --> 01:04:57,039
seeing you

01:04:52,079 --> 01:04:57,039
include in person oh by me too

01:04:57,440 --> 01:05:00,880
um and yeah thank you all for joining i

01:04:59,760 --> 01:05:02,400
hope you enjoyed this

01:05:00,880 --> 01:05:04,000
and yeah we'll see each other at the

01:05:02,400 --> 01:05:07,119
next event all right

01:05:04,000 --> 01:05:07,119

YouTube URL: https://www.youtube.com/watch?v=hxdcSJAbygg


