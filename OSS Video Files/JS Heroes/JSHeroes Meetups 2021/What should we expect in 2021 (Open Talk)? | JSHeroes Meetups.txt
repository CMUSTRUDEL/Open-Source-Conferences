Title: What should we expect in 2021 (Open Talk)? | JSHeroes Meetups
Publication date: 2021-03-05
Playlist: JSHeroes Meetups 2021
Description: 
	After an unforgettable 2020, let's have a chat and see what you expect from 2021 in web development (mainly JavaScript Ecosystem).

This will be an open talk so anyone can contribute, but if you just want to sit back and listen that is ok too.

Some of the topics that we might debate are:

- what frameworks will be popular
- what to expect from the job market
- will TypeScript be the default choice when you start a project in 2021?
- what new libraries/tool should we have a look in 2021 (ex. Cypress a few years back)
...and many more.
Captions: 
	00:00:05,359 --> 00:00:09,120
okay

00:00:05,759 --> 00:00:11,840
so uh welcome to our meet up um

00:00:09,120 --> 00:00:13,080
i'm it's our first meetup js heroes

00:00:11,840 --> 00:00:16,800
meetup in

00:00:13,080 --> 00:00:20,880
2021 we wanted to

00:00:16,800 --> 00:00:25,599
say hi to you in this uh new year and

00:00:20,880 --> 00:00:27,519
we're curious to see uh what things so

00:00:25,599 --> 00:00:29,439
you guys think they're gonna they're

00:00:27,519 --> 00:00:35,120
gonna go big

00:00:29,439 --> 00:00:37,920
or they're going to disappear in 2021

00:00:35,120 --> 00:00:38,399
and uh what we're going to do is we're

00:00:37,920 --> 00:00:41,760
going to

00:00:38,399 --> 00:00:44,719
go around the room and uh

00:00:41,760 --> 00:00:45,760
if uh or you have any questions we're

00:00:44,719 --> 00:00:47,520
gonna write them down

00:00:45,760 --> 00:00:50,079
in the chat so everybody can see them

00:00:47,520 --> 00:00:53,840
and then we can go and

00:00:50,079 --> 00:00:57,039
discuss around the topic so um

00:00:53,840 --> 00:00:58,800
i'm gonna start uh

00:00:57,039 --> 00:01:00,239
i'm gonna start from the from the

00:00:58,800 --> 00:01:02,079
beginning and

00:01:00,239 --> 00:01:03,600
if you don't have any questions just say

00:01:02,079 --> 00:01:05,199
no and it's

00:01:03,600 --> 00:01:07,920
it's not an issue or you can add a

00:01:05,199 --> 00:01:11,680
question a bit later it's not a problem

00:01:07,920 --> 00:01:12,880
so um laurent do you have any questions

00:01:11,680 --> 00:01:14,880
you can

00:01:12,880 --> 00:01:16,799
tell it to me or you can write it in the

00:01:14,880 --> 00:01:19,759
chat what what do you

00:01:16,799 --> 00:01:22,880
topic you would be interested in the

00:01:19,759 --> 00:01:22,880
discussing in this meetup

00:01:23,360 --> 00:01:29,920
that's a good question

00:01:26,479 --> 00:01:33,600
i i'm not sure if i have

00:01:29,920 --> 00:01:33,600
any preferences

00:01:35,280 --> 00:01:38,960
mostly i'm interested in server side

00:01:38,400 --> 00:01:41,840
rendering

00:01:38,960 --> 00:01:41,840
basically

00:01:47,200 --> 00:01:50,799
i think i think that's it if there will

00:01:49,840 --> 00:01:54,000
be some

00:01:50,799 --> 00:01:55,119
other topics that or some

00:01:54,000 --> 00:01:57,280
things that will come up in the

00:01:55,119 --> 00:02:00,719
discussion i will ask then

00:01:57,280 --> 00:02:04,240
um please forgive me if i don't write it

00:02:00,719 --> 00:02:05,600
well oh no no it's okay yes okay so i

00:02:04,240 --> 00:02:08,879
wrote it there so we talked about

00:02:05,600 --> 00:02:12,319
server-side rendering okay thank you

00:02:08,879 --> 00:02:13,760
um christina uh what do you want us to

00:02:12,319 --> 00:02:16,959
talk or what topics would you be

00:02:13,760 --> 00:02:20,000
interesting for you

00:02:16,959 --> 00:02:23,840
um well i'm interested in what do you

00:02:20,000 --> 00:02:23,840
expect from the job market

00:02:24,400 --> 00:02:28,959
first of all second i would like to know

00:02:27,599 --> 00:02:33,599
what are your opinions

00:02:28,959 --> 00:02:36,400
as javascript developers regarding your

00:02:33,599 --> 00:02:38,239
day-to-day responsibilities where do you

00:02:36,400 --> 00:02:41,760
see the market going the

00:02:38,239 --> 00:02:44,800
the whole javascript ecosystem

00:02:41,760 --> 00:02:51,200
um and that's about it

00:02:44,800 --> 00:02:53,599
i think for now

00:02:51,200 --> 00:02:53,599
thank you

00:02:55,599 --> 00:03:02,239
okay uh evalika

00:03:00,159 --> 00:03:03,280
do you have anything that you'd like us

00:03:02,239 --> 00:03:05,840
to to touch

00:03:03,280 --> 00:03:05,840
in this meetup

00:03:06,959 --> 00:03:12,800
i hope to there will be more people but

00:03:10,560 --> 00:03:13,760
i was hoping to hear more than to

00:03:12,800 --> 00:03:16,159
thought

00:03:13,760 --> 00:03:19,519
i'm interested in i don't know new

00:03:16,159 --> 00:03:23,760
things on the css side and

00:03:19,519 --> 00:03:23,760
front-end framework so things like this

00:03:24,400 --> 00:03:30,720
uh front-end framework

00:03:28,080 --> 00:03:31,200
and i sorry i didn't catch the the first

00:03:30,720 --> 00:03:35,040
one

00:03:31,200 --> 00:03:36,480
the css oh yes yes

00:03:35,040 --> 00:03:38,480
that's how you say it in english right

00:03:36,480 --> 00:03:41,360
now yeah

00:03:38,480 --> 00:03:42,799
yeah i know i usually say uh so that's

00:03:41,360 --> 00:03:43,200
why i was why didn't i understand but

00:03:42,799 --> 00:03:46,480
yes

00:03:43,200 --> 00:03:49,760
yes thanks yeah

00:03:46,480 --> 00:03:52,159
thank you uh okay

00:03:49,760 --> 00:03:54,400
so uh florine what do you want us to

00:03:52,159 --> 00:03:54,400
talk

00:03:55,200 --> 00:04:00,000
um okay so i would be really interested

00:03:59,599 --> 00:04:03,200
in

00:04:00,000 --> 00:04:05,599
your thoughts about um

00:04:03,200 --> 00:04:08,000
what's gonna happen with web assembly

00:04:05,599 --> 00:04:11,519
and how is that going to

00:04:08,000 --> 00:04:15,599
affect our let's say next five years

00:04:11,519 --> 00:04:19,280
as developers regarding speed

00:04:15,599 --> 00:04:19,280
regarding bringing

00:04:19,359 --> 00:04:25,680
bigger applications to the

00:04:22,560 --> 00:04:27,040
web environment and what do you feel

00:04:25,680 --> 00:04:32,320
about typescript

00:04:27,040 --> 00:04:32,320
will it become the norm or not that's it

00:04:39,680 --> 00:04:45,600
okay robert

00:04:42,720 --> 00:04:47,120
um florian covered in my question like

00:04:45,600 --> 00:04:50,479
how do you see the

00:04:47,120 --> 00:04:52,960
front and market like the typescript

00:04:50,479 --> 00:04:53,520
where do you think it's gonna go front

00:04:52,960 --> 00:04:57,840
end with

00:04:53,520 --> 00:04:57,840
typescript is gonna be the new norm or

00:04:58,400 --> 00:05:03,120
okay anything else

00:05:03,440 --> 00:05:08,720
okay thank you if any anyway if you guys

00:05:06,639 --> 00:05:12,320
have any questions later we can

00:05:08,720 --> 00:05:15,600
we can touch them then as well

00:05:12,320 --> 00:05:18,639
okay uh stefano do you have any

00:05:15,600 --> 00:05:24,639
question questions or things that you

00:05:18,639 --> 00:05:27,039
would like us to talk in this meetup

00:05:24,639 --> 00:05:29,039
you can unmute yourself or if you want

00:05:27,039 --> 00:05:29,759
you can write it there okay perfect if

00:05:29,039 --> 00:05:31,600
you

00:05:29,759 --> 00:05:34,240
have any questions later you can just

00:05:31,600 --> 00:05:37,919
type them in the chat thank you

00:05:34,240 --> 00:05:40,320
vlad uh pascari do you have any

00:05:37,919 --> 00:05:40,320
questions

00:05:43,120 --> 00:05:47,600
you can also get a mute or you can write

00:05:46,320 --> 00:05:53,840
them in the chat it's

00:05:47,600 --> 00:05:53,840
up to you

00:05:55,280 --> 00:06:01,199
okay you can just uh unmute yourself and

00:05:58,639 --> 00:06:01,199
if you want

00:06:04,240 --> 00:06:07,840
oh yeah sorry

00:06:08,000 --> 00:06:14,400
so i didn't manage to enable

00:06:11,360 --> 00:06:17,280
mine so no question thanks

00:06:14,400 --> 00:06:17,280
okay thank you

00:06:17,600 --> 00:06:21,840
vlad zelinski

00:06:22,000 --> 00:06:25,440
well i think a couple of questions have

00:06:24,560 --> 00:06:27,360
already been

00:06:25,440 --> 00:06:28,960
touched maybe it would be interesting to

00:06:27,360 --> 00:06:32,080
also touch a little bit

00:06:28,960 --> 00:06:35,039
um on the build tools and the

00:06:32,080 --> 00:06:36,639
build side of things which could be

00:06:35,039 --> 00:06:38,800
interesting right because

00:06:36,639 --> 00:06:40,160
uh a couple of things changed lately

00:06:38,800 --> 00:06:42,319
based on

00:06:40,160 --> 00:06:44,000
popular surveys that circulate around

00:06:42,319 --> 00:06:45,199
the world especially in terms of

00:06:44,000 --> 00:06:48,240
popularity

00:06:45,199 --> 00:06:48,960
the testing space as well maybe that

00:06:48,240 --> 00:06:51,759
would be

00:06:48,960 --> 00:06:52,560
something that we could also touch upon

00:06:51,759 --> 00:06:55,759
testing

00:06:52,560 --> 00:06:57,599
the unit testing automation or

00:06:55,759 --> 00:06:58,880
testing as in frameworks right and

00:06:57,599 --> 00:07:01,919
frameworks and

00:06:58,880 --> 00:07:02,400
what what are we missing as developers

00:07:01,919 --> 00:07:05,360
there

00:07:02,400 --> 00:07:07,440
what's like what are people using why

00:07:05,360 --> 00:07:11,039
are they using certain things

00:07:07,440 --> 00:07:12,720
um how does it help them to to do their

00:07:11,039 --> 00:07:16,240
day-to-day job

00:07:12,720 --> 00:07:19,840
um and i guess one thing would

00:07:16,240 --> 00:07:22,720
be also interesting to maybe

00:07:19,840 --> 00:07:23,360
you know tying back into the entire

00:07:22,720 --> 00:07:26,479
market

00:07:23,360 --> 00:07:28,400
and everything um maybe it would be

00:07:26,479 --> 00:07:31,599
interesting to discuss a little bit the

00:07:28,400 --> 00:07:34,880
idea of um

00:07:31,599 --> 00:07:36,800
what does it mean now to be as

00:07:34,880 --> 00:07:38,800
a javascript developer what are you

00:07:36,800 --> 00:07:40,560
expected to focus on because there are

00:07:38,800 --> 00:07:42,479
so many things nowadays right there's

00:07:40,560 --> 00:07:44,879
this notion of full stack as well

00:07:42,479 --> 00:07:47,280
um yeah i got a couple of these ideas

00:07:44,879 --> 00:07:50,560
from alex's presentation

00:07:47,280 --> 00:07:52,800
uh on web a web odyssey

00:07:50,560 --> 00:07:54,080
and he talked a little bit about how the

00:07:52,800 --> 00:07:57,680
entire

00:07:54,080 --> 00:08:00,400
market is gonna change in terms of

00:07:57,680 --> 00:08:02,319
more segregation and responsibility in

00:08:00,400 --> 00:08:03,360
the coding space right so you're not

00:08:02,319 --> 00:08:07,199
going to be

00:08:03,360 --> 00:08:08,800
necessarily a full stack developer doing

00:08:07,199 --> 00:08:12,000
all kinds of javascripty

00:08:08,800 --> 00:08:14,160
css html things or that's actually

00:08:12,000 --> 00:08:15,199
the question are you going to continue

00:08:14,160 --> 00:08:18,879
to be or not

00:08:15,199 --> 00:08:20,479
throughout 2021 and and furthermore

00:08:18,879 --> 00:08:21,919
so maybe that would be also interesting

00:08:20,479 --> 00:08:26,240
to discuss in my opinion

00:08:21,919 --> 00:08:29,520
yep that's that's a really good question

00:08:26,240 --> 00:08:30,720
and i think it's uh one of the pain

00:08:29,520 --> 00:08:34,159
points that we

00:08:30,720 --> 00:08:38,240
most of us have that you know

00:08:34,159 --> 00:08:41,599
at least sometimes that's how i feel it

00:08:38,240 --> 00:08:45,040
okay um so back to me uh

00:08:41,599 --> 00:08:49,120
did i miss somebody uh

00:08:45,040 --> 00:08:51,040
stefan do you have any questions you can

00:08:49,120 --> 00:08:52,720
write them directly in the chat

00:08:51,040 --> 00:08:55,839
if you want or you can none would you

00:08:52,720 --> 00:08:55,839
turn me meet yourself

00:09:04,240 --> 00:09:11,519
okay so uh i have um

00:09:08,000 --> 00:09:13,360
i have a couple of uh

00:09:11,519 --> 00:09:15,519
questions as well some of them they are

00:09:13,360 --> 00:09:18,880
attached like the one with the

00:09:15,519 --> 00:09:19,760
typescript for example uh but i'm also

00:09:18,880 --> 00:09:23,040
curious

00:09:19,760 --> 00:09:25,519
if um for example

00:09:23,040 --> 00:09:27,040
also uh it was touched a bit with the

00:09:25,519 --> 00:09:27,519
frameworks as well i'm curious for

00:09:27,040 --> 00:09:30,560
example

00:09:27,519 --> 00:09:33,920
i never i haven't heard at least

00:09:30,560 --> 00:09:35,760
in my group for example people's using

00:09:33,920 --> 00:09:38,800
angular i mean a lot of people go

00:09:35,760 --> 00:09:42,399
towards react type script

00:09:38,800 --> 00:09:42,399
is maybe it's

00:09:43,760 --> 00:09:52,240
[Music]

00:09:46,800 --> 00:09:52,240
the right naming

00:09:52,399 --> 00:09:55,680
i haven't seen for example any any new

00:09:54,480 --> 00:09:58,640
projects with uh

00:09:55,680 --> 00:09:59,040
angular so that's why maybe it's just my

00:09:58,640 --> 00:10:03,120
uh

00:09:59,040 --> 00:10:05,920
the context that i'm working and

00:10:03,120 --> 00:10:07,519
i'm also curious uh and probably

00:10:05,920 --> 00:10:10,880
christina can help us there

00:10:07,519 --> 00:10:13,360
how do what skills

00:10:10,880 --> 00:10:16,160
uh do you see they are needed for a

00:10:13,360 --> 00:10:33,839
javascript developer in

00:10:16,160 --> 00:10:33,839
2021 on the job market

00:10:40,959 --> 00:10:48,480
okay anybody else has any

00:10:44,959 --> 00:10:52,160
other questions um

00:10:48,480 --> 00:10:54,880
laurent uh we went around the room and

00:10:52,160 --> 00:10:56,720
we put some questions down if you wanna

00:10:54,880 --> 00:10:58,800
add uh

00:10:56,720 --> 00:11:00,720
if you wanna add a question what do you

00:10:58,800 --> 00:11:02,959
would like to us to discuss in this

00:11:00,720 --> 00:11:05,839
meetup just unmute yourself

00:11:02,959 --> 00:11:07,519
and uh or you can write in the in the

00:11:05,839 --> 00:11:10,160
chat your question or topic that you

00:11:07,519 --> 00:11:10,160
want to discuss

00:11:11,279 --> 00:11:15,040
yes of course so my question will be if

00:11:14,160 --> 00:11:19,680
uh

00:11:15,040 --> 00:11:24,000
tie script is going to be a default uh

00:11:19,680 --> 00:11:26,399
default uh way of

00:11:24,000 --> 00:11:27,360
starting a project uh something that

00:11:26,399 --> 00:11:29,760
will

00:11:27,360 --> 00:11:31,519
that the project will require by default

00:11:29,760 --> 00:11:33,200
this is something i would be interested

00:11:31,519 --> 00:11:36,800
in

00:11:33,200 --> 00:11:39,120
thank you uh i think we uh it was

00:11:36,800 --> 00:11:40,640
added typescript is the norm so i think

00:11:39,120 --> 00:11:42,800
it it

00:11:40,640 --> 00:11:44,240
fits in that category so yeah thank you

00:11:42,800 --> 00:11:44,800
it's a it's a good question i think a

00:11:44,240 --> 00:11:48,399
lot of us

00:11:44,800 --> 00:11:51,040
have uh are curious about this

00:11:48,399 --> 00:11:52,639
uh what i just remembered now that maybe

00:11:51,040 --> 00:11:56,639
um

00:11:52,639 --> 00:11:59,839
what the frameworks

00:11:56,639 --> 00:12:11,839
should we have a look on the server side

00:11:59,839 --> 00:12:11,839
of like node.js

00:12:36,000 --> 00:12:42,760
okay so um

00:12:39,279 --> 00:12:47,519
server side rendering in

00:12:42,760 --> 00:12:52,000
2021 um

00:12:47,519 --> 00:12:56,240
anybody wants to start

00:12:52,000 --> 00:12:56,240
what are is your opinion on this topic

00:13:00,240 --> 00:13:06,720
okay um i can i can say at least

00:13:03,519 --> 00:13:09,279
the few a few words on this

00:13:06,720 --> 00:13:10,800
at least my colleagues i know they use

00:13:09,279 --> 00:13:13,839
uh

00:13:10,800 --> 00:13:16,959
next gs to to

00:13:13,839 --> 00:13:19,040
do this uh to fix decision because

00:13:16,959 --> 00:13:21,200
you can under or at least on react

00:13:19,040 --> 00:13:23,120
projects you could

00:13:21,200 --> 00:13:24,800
do the server side rendering and do the

00:13:23,120 --> 00:13:27,040
setup yourself

00:13:24,800 --> 00:13:30,079
but with next you have some some

00:13:27,040 --> 00:13:33,360
advantages and you could

00:13:30,079 --> 00:13:38,160
do that quite easily so

00:13:33,360 --> 00:13:41,360
i don't know if that helps the

00:13:38,160 --> 00:13:43,680
the question um

00:13:41,360 --> 00:13:45,120
for somebody who doesn't uh know what

00:13:43,680 --> 00:13:48,570
server side rendering

00:13:45,120 --> 00:13:51,809
is uh server center rendering is

00:13:48,570 --> 00:13:51,809
[Music]

00:13:52,399 --> 00:13:56,560
sorry is um

00:13:57,600 --> 00:14:03,760
building your html and

00:14:01,279 --> 00:14:04,720
javascript part and css on the server

00:14:03,760 --> 00:14:07,880
and save it

00:14:04,720 --> 00:14:10,639
and serve it on the front end as uh as a

00:14:07,880 --> 00:14:13,760
html page and after

00:14:10,639 --> 00:14:16,800
uh after it's loaded

00:14:13,760 --> 00:14:20,079
you can then do the the javascript part

00:14:16,800 --> 00:14:23,279
this helps a lot for the search engines

00:14:20,079 --> 00:14:26,000
and it's usually a bit faster to

00:14:23,279 --> 00:14:28,240
to build because for example search

00:14:26,000 --> 00:14:32,399
engines like google go on your page

00:14:28,240 --> 00:14:34,000
and uh if they read the html part with

00:14:32,399 --> 00:14:37,360
all the information there with

00:14:34,000 --> 00:14:40,480
all the dom build already it's uh

00:14:37,360 --> 00:14:44,000
easier for them to parse it and um and

00:14:40,480 --> 00:14:48,000
index it also most

00:14:44,000 --> 00:14:51,839
robots cannot render javascript so

00:14:48,000 --> 00:14:54,480
uh google google's robots

00:14:51,839 --> 00:14:55,839
has some capabilities or at least they

00:14:54,480 --> 00:14:59,360
advertised it as

00:14:55,839 --> 00:15:03,199
having the capabilities about

00:14:59,360 --> 00:15:06,800
the other ones do not um my

00:15:03,199 --> 00:15:07,199
um i i have mostly two questions about

00:15:06,800 --> 00:15:12,639
this

00:15:07,199 --> 00:15:16,240
this is why i brought this topic up um

00:15:12,639 --> 00:15:19,680
how efficient is in because i i've only

00:15:16,240 --> 00:15:21,199
messed around to it next.js said i did a

00:15:19,680 --> 00:15:24,399
proof of concept

00:15:21,199 --> 00:15:27,920
in case it was uh wanted on a project

00:15:24,399 --> 00:15:30,959
but uh on in actual

00:15:27,920 --> 00:15:35,759
production environment how efficient

00:15:30,959 --> 00:15:39,519
is the way next handles these

00:15:35,759 --> 00:15:42,079
operations um because it gets the

00:15:39,519 --> 00:15:43,759
html from the server but it also

00:15:42,079 --> 00:15:46,639
downloads

00:15:43,759 --> 00:15:47,759
the component structure on top of it to

00:15:46,639 --> 00:15:51,519
be able to

00:15:47,759 --> 00:15:53,839
start rendering at least in react

00:15:51,519 --> 00:15:57,440
that's how it does it and i'm not sure

00:15:53,839 --> 00:15:57,440
that doesn't sound very efficient

00:15:57,839 --> 00:16:06,560
um and the second question would

00:16:01,199 --> 00:16:10,079
be how isn't there a bottleneck

00:16:06,560 --> 00:16:13,839
in communication with apis um

00:16:10,079 --> 00:16:17,839
for example if i have

00:16:13,839 --> 00:16:21,120
um if i have

00:16:17,839 --> 00:16:25,759
three apis that on the front end could

00:16:21,120 --> 00:16:29,279
be called in parallel

00:16:25,759 --> 00:16:34,079
but they are used in on the server

00:16:29,279 --> 00:16:37,199
side part before the html is built

00:16:34,079 --> 00:16:41,759
isn't that a bottleneck for on

00:16:37,199 --> 00:16:41,759
until it gets served to the browser

00:16:42,320 --> 00:16:47,440
i can yeah go ahead but i don't have a

00:16:45,440 --> 00:16:51,360
lot of experience with next i just

00:16:47,440 --> 00:16:54,560
played around access javascript

00:16:51,360 --> 00:16:55,519
js heroes website it's done with uh next

00:16:54,560 --> 00:16:58,880
but

00:16:55,519 --> 00:17:01,040
it's not complicated so

00:16:58,880 --> 00:17:02,560
but if you know more just go ahead and

00:17:01,040 --> 00:17:06,079
please

00:17:02,560 --> 00:17:06,799
right i'm there are a couple of things

00:17:06,079 --> 00:17:10,160
that i would

00:17:06,799 --> 00:17:14,079
i would like to touch um regarding the

00:17:10,160 --> 00:17:15,520
the questions that were asked um

00:17:14,079 --> 00:17:17,439
and and and the things that were

00:17:15,520 --> 00:17:20,559
mentioned before now

00:17:17,439 --> 00:17:23,600
before we get into the server side thing

00:17:20,559 --> 00:17:25,600
um i just want to mention that

00:17:23,600 --> 00:17:26,720
not only it was advertised but also in

00:17:25,600 --> 00:17:30,480
the way it works

00:17:26,720 --> 00:17:30,480
uh google's

00:17:30,559 --> 00:17:34,799
crawlers they actually work very well

00:17:33,200 --> 00:17:37,760
with javascript right it

00:17:34,799 --> 00:17:40,480
that does not mean you're going to get

00:17:37,760 --> 00:17:43,600
you know like visibility all over

00:17:40,480 --> 00:17:46,160
but it's not as

00:17:43,600 --> 00:17:47,600
big as a concern from a ceo perspective

00:17:46,160 --> 00:17:50,400
than it was like

00:17:47,600 --> 00:17:50,960
10 years ago that that's just one one

00:17:50,400 --> 00:17:54,400
point i

00:17:50,960 --> 00:17:57,600
i wanted to to make um now regarding the

00:17:54,400 --> 00:17:59,520
server server side things

00:17:57,600 --> 00:18:00,720
i'm not gonna talk about next year

00:17:59,520 --> 00:18:02,960
specifically because

00:18:00,720 --> 00:18:04,240
i also don't have that much experience

00:18:02,960 --> 00:18:06,000
but i've done a couple of things with

00:18:04,240 --> 00:18:07,919
server side rendering

00:18:06,000 --> 00:18:10,640
based on react's capabilities you know

00:18:07,919 --> 00:18:13,360
with streaming html back

00:18:10,640 --> 00:18:13,679
and there are two things that i want to

00:18:13,360 --> 00:18:16,080
say

00:18:13,679 --> 00:18:16,960
one in regards to the question about the

00:18:16,080 --> 00:18:18,400
apis

00:18:16,960 --> 00:18:20,480
right that's actually not going to

00:18:18,400 --> 00:18:22,640
happen on the server side

00:18:20,480 --> 00:18:24,799
so you're going to do a couple of things

00:18:22,640 --> 00:18:27,360
you're going to render some html

00:18:24,799 --> 00:18:28,000
onto the server side and then you're

00:18:27,360 --> 00:18:30,720
going to stream

00:18:28,000 --> 00:18:32,000
that html back you're going to render it

00:18:30,720 --> 00:18:33,840
from react components you're going to

00:18:32,000 --> 00:18:35,360
stream it back to the client side where

00:18:33,840 --> 00:18:38,160
you're going to do this process called

00:18:35,360 --> 00:18:40,000
rehydration also in terms of state

00:18:38,160 --> 00:18:43,120
right because you got to synchronize the

00:18:40,000 --> 00:18:45,200
state that you have on the client side

00:18:43,120 --> 00:18:46,799
from the entire application maybe you

00:18:45,200 --> 00:18:48,720
even have a state management tool like

00:18:46,799 --> 00:18:50,480
redux or mobx or whatever

00:18:48,720 --> 00:18:52,240
you got to synchronize it with what it

00:18:50,480 --> 00:18:54,000
has been done on the server

00:18:52,240 --> 00:18:55,280
and then everything does javascript

00:18:54,000 --> 00:18:58,240
specific there

00:18:55,280 --> 00:18:59,919
is going to be called uh you know the

00:18:58,240 --> 00:19:02,000
javascript needs to be interpreted

00:18:59,919 --> 00:19:03,200
and parsed and interpreted client-side

00:19:02,000 --> 00:19:04,480
rehydrate the

00:19:03,200 --> 00:19:06,559
application and then you're going to

00:19:04,480 --> 00:19:08,720
have all of those calls being done

00:19:06,559 --> 00:19:10,640
and stuff like that so what you're

00:19:08,720 --> 00:19:13,360
actually gonna pay

00:19:10,640 --> 00:19:14,000
is a subsequent amount of time in terms

00:19:13,360 --> 00:19:16,640
of

00:19:14,000 --> 00:19:18,240
um of you know the time it takes to

00:19:16,640 --> 00:19:21,600
parse the javascript

00:19:18,240 --> 00:19:24,480
on the client side and rehydrate it

00:19:21,600 --> 00:19:26,880
and this comes in opposition with the

00:19:24,480 --> 00:19:29,440
fact that you're gonna get initial

00:19:26,880 --> 00:19:31,679
usually faster rendering times because

00:19:29,440 --> 00:19:31,679
you

00:19:32,000 --> 00:19:36,000
created the the main html on the server

00:19:35,440 --> 00:19:38,960
side and

00:19:36,000 --> 00:19:39,600
just stream back html per se which is

00:19:38,960 --> 00:19:42,320
way

00:19:39,600 --> 00:19:44,000
slimmer in terms of the payload and way

00:19:42,320 --> 00:19:46,400
slimmer in terms of the

00:19:44,000 --> 00:19:47,600
you know the overall timing it takes to

00:19:46,400 --> 00:19:49,679
send those bytes in

00:19:47,600 --> 00:19:50,880
and then render them on the on the

00:19:49,679 --> 00:19:52,880
client side because it's just going to

00:19:50,880 --> 00:19:55,919
be html that you

00:19:52,880 --> 00:20:00,160
put css on top of afterwards

00:19:55,919 --> 00:20:00,960
um so i'm going to touch back on this

00:20:00,160 --> 00:20:05,120
idea of

00:20:00,960 --> 00:20:05,120
apis and how can they be

00:20:05,679 --> 00:20:09,679
localized only on the server side

00:20:08,240 --> 00:20:11,840
because i would like to

00:20:09,679 --> 00:20:12,960
briefly talk about this new concept in

00:20:11,840 --> 00:20:16,400
react

00:20:12,960 --> 00:20:17,679
um that's been uh in the open for a very

00:20:16,400 --> 00:20:20,640
short time

00:20:17,679 --> 00:20:23,280
but basically you can't really segregate

00:20:20,640 --> 00:20:26,559
the javascript responsibilities

00:20:23,280 --> 00:20:27,600
that also imply api calls from the

00:20:26,559 --> 00:20:29,360
client side

00:20:27,600 --> 00:20:31,039
you can't segregate that from from the

00:20:29,360 --> 00:20:33,360
server side and cannot easily

00:20:31,039 --> 00:20:34,400
port them at least not in the current

00:20:33,360 --> 00:20:38,480
state of

00:20:34,400 --> 00:20:40,080
react specifically um the second

00:20:38,480 --> 00:20:41,919
thing that i wanted to mention in

00:20:40,080 --> 00:20:45,679
regards to the performance

00:20:41,919 --> 00:20:46,799
um there's no short answer to this and

00:20:45,679 --> 00:20:48,799
you got to measure stuff

00:20:46,799 --> 00:20:50,480
right so it's a trade-off that you do

00:20:48,799 --> 00:20:53,679
but between an initial

00:20:50,480 --> 00:20:56,799
faster usually faster render time

00:20:53,679 --> 00:20:58,480
and the fact that you gotta rehydrate on

00:20:56,799 --> 00:20:59,840
the client side and make sure you

00:20:58,480 --> 00:21:01,679
synchronize states

00:20:59,840 --> 00:21:04,159
on the client-side application with what

00:21:01,679 --> 00:21:08,640
you had on the server

00:21:04,159 --> 00:21:11,919
and the way you do that is by paying

00:21:08,640 --> 00:21:12,640
a cost in terms of time that comes from

00:21:11,919 --> 00:21:14,640
parsing and

00:21:12,640 --> 00:21:16,000
interpreting the javascript including

00:21:14,640 --> 00:21:19,760
the rehydration code

00:21:16,000 --> 00:21:21,600
the rehydration code and you paid that

00:21:19,760 --> 00:21:23,520
in order to get those faster initial

00:21:21,600 --> 00:21:25,200
times and

00:21:23,520 --> 00:21:26,559
i think the answer to this is to just

00:21:25,200 --> 00:21:28,559
try it out and measure it

00:21:26,559 --> 00:21:30,559
because i've heard a lot of success

00:21:28,559 --> 00:21:31,679
stories but doing this on the server

00:21:30,559 --> 00:21:35,360
side

00:21:31,679 --> 00:21:36,000
and getting out an initial html that

00:21:35,360 --> 00:21:38,480
comes

00:21:36,000 --> 00:21:40,320
to the client very very very quick and

00:21:38,480 --> 00:21:42,080
it gets rendered quickly

00:21:40,320 --> 00:21:43,600
and especially if you combine that with

00:21:42,080 --> 00:21:45,679
code splitting on the client side in

00:21:43,600 --> 00:21:47,919
terms of javascript you only rehydrate

00:21:45,679 --> 00:21:49,679
the portion of the app that contains the

00:21:47,919 --> 00:21:52,640
state that you're currently viewing

00:21:49,679 --> 00:21:54,799
and you do all of the background work

00:21:52,640 --> 00:21:56,159
for synchronizing the entire state or

00:21:54,799 --> 00:21:58,080
just parsing the code of other

00:21:56,159 --> 00:22:01,840
javascript components you do that by

00:21:58,080 --> 00:22:03,360
lazy loading them so i've heard a lot of

00:22:01,840 --> 00:22:07,200
success stories

00:22:03,360 --> 00:22:10,559
with with doing this but i've also heard

00:22:07,200 --> 00:22:13,280
stories of not that great success

00:22:10,559 --> 00:22:14,320
or let's call it small failures for

00:22:13,280 --> 00:22:17,120
example in the case of

00:22:14,320 --> 00:22:18,400
pinterest right where they try this

00:22:17,120 --> 00:22:20,720
approach

00:22:18,400 --> 00:22:23,360
on the server side and they realized

00:22:20,720 --> 00:22:26,000
that with proper code splitting

00:22:23,360 --> 00:22:27,919
the cost that they were paying upfront

00:22:26,000 --> 00:22:30,480
to render on the server side

00:22:27,919 --> 00:22:33,200
and create all of that html plus the

00:22:30,480 --> 00:22:36,480
payload of that initial html and the

00:22:33,200 --> 00:22:40,240
time it took to send it over the wire

00:22:36,480 --> 00:22:42,559
was greater than the time of properly

00:22:40,240 --> 00:22:43,440
and plus rehydrating the app was greater

00:22:42,559 --> 00:22:46,080
than the time

00:22:43,440 --> 00:22:47,120
of just sending the initial html very

00:22:46,080 --> 00:22:49,440
very slim

00:22:47,120 --> 00:22:51,600
and creating with javascript with a

00:22:49,440 --> 00:22:54,080
small portion of javascript

00:22:51,600 --> 00:22:55,039
that was lazy loaded right code splitted

00:22:54,080 --> 00:22:57,120
and lazy loaded

00:22:55,039 --> 00:22:59,039
only that initial part of the app that

00:22:57,120 --> 00:23:01,039
the user was seeing at that moment

00:22:59,039 --> 00:23:02,480
so they actually tried to server side

00:23:01,039 --> 00:23:05,039
render stuff

00:23:02,480 --> 00:23:06,159
but they got into this point that by

00:23:05,039 --> 00:23:08,080
measuring

00:23:06,159 --> 00:23:09,440
they were actually obtaining longer

00:23:08,080 --> 00:23:11,679
times

00:23:09,440 --> 00:23:13,840
with with doing this than they would

00:23:11,679 --> 00:23:16,480
have obtained in the normal mode

00:23:13,840 --> 00:23:16,880
of just you know properly code splitting

00:23:16,480 --> 00:23:18,720
and

00:23:16,880 --> 00:23:20,559
lazy loading javascript on the client

00:23:18,720 --> 00:23:22,720
side and just sending

00:23:20,559 --> 00:23:24,000
blank htmls and let the javascript do

00:23:22,720 --> 00:23:25,840
the rest

00:23:24,000 --> 00:23:28,080
so i don't think there's an there's an

00:23:25,840 --> 00:23:29,600
easy answer to this i've heard way more

00:23:28,080 --> 00:23:32,159
successful stories than

00:23:29,600 --> 00:23:33,360
stories of you know like failure trying

00:23:32,159 --> 00:23:35,760
this

00:23:33,360 --> 00:23:39,120
but i still think it needs to be tested

00:23:35,760 --> 00:23:39,120
on a case-by-case basis

00:23:41,919 --> 00:23:46,159
awesome thanks i definitely agree about

00:23:44,640 --> 00:23:49,279
the performance part

00:23:46,159 --> 00:23:52,240
and it's there is never a clear-cut

00:23:49,279 --> 00:23:54,880
answer to any of the into any

00:23:52,240 --> 00:23:57,840
performance questions

00:23:54,880 --> 00:23:57,840
i'm just a bit

00:23:58,159 --> 00:24:02,559
a bit surprised

00:24:02,640 --> 00:24:09,840
how popular it is right now um

00:24:06,000 --> 00:24:09,840
having this approach of

00:24:10,159 --> 00:24:16,320
having some apis which are mostly

00:24:14,000 --> 00:24:16,320
just

00:24:17,279 --> 00:24:24,400
uh layer over the database and

00:24:21,200 --> 00:24:26,880
doing server-side rendering via

00:24:24,400 --> 00:24:30,640
javascript frameworks

00:24:26,880 --> 00:24:34,159
um i mean

00:24:30,640 --> 00:24:38,000
the this has i've read

00:24:34,159 --> 00:24:38,720
about uh projects and approaches like

00:24:38,000 --> 00:24:41,600
this

00:24:38,720 --> 00:24:42,480
uh i've been reading about them for

00:24:41,600 --> 00:24:45,840
months now

00:24:42,480 --> 00:24:48,400
and uh people are very excited about

00:24:45,840 --> 00:24:48,400
this but

00:24:49,600 --> 00:24:55,360
compared it just seems like

00:24:52,720 --> 00:24:56,799
uh there's lots of accidental complexity

00:24:55,360 --> 00:25:01,039
here

00:24:56,799 --> 00:25:04,960
which i i know that the tools themselves

00:25:01,039 --> 00:25:07,600
probably mitigate a lot because

00:25:04,960 --> 00:25:08,320
uh with good documentation and good

00:25:07,600 --> 00:25:11,520
setup and

00:25:08,320 --> 00:25:12,000
good scaffolding of a project things can

00:25:11,520 --> 00:25:15,440
be done

00:25:12,000 --> 00:25:18,080
is easier but

00:25:15,440 --> 00:25:18,480
it's i'm i'm just a bit surprised that's

00:25:18,080 --> 00:25:22,000
all

00:25:18,480 --> 00:25:26,000
and he also given that

00:25:22,000 --> 00:25:26,000
you need to still rehydrate everything

00:25:26,320 --> 00:25:30,000
doesn't seem very efficient especially

00:25:28,559 --> 00:25:33,440
in low latency

00:25:30,000 --> 00:25:38,240
on low latency networks

00:25:33,440 --> 00:25:38,240
i i think people are working a lot with

00:25:38,400 --> 00:25:45,440
um very very fast networks

00:25:42,400 --> 00:25:46,799
and i i'm not sure this would be

00:25:45,440 --> 00:25:49,840
feasible

00:25:46,799 --> 00:25:51,200
right so so that so that's true right in

00:25:49,840 --> 00:25:52,960
the sense that

00:25:51,200 --> 00:25:54,320
we tend to be very biased when we do

00:25:52,960 --> 00:25:56,799
development as

00:25:54,320 --> 00:25:58,480
as people working on on code as

00:25:56,799 --> 00:25:59,760
developers per se we tend to be very

00:25:58,480 --> 00:26:02,080
biased into

00:25:59,760 --> 00:26:03,760
and and practical about the conditions

00:26:02,080 --> 00:26:06,799
that we have at

00:26:03,760 --> 00:26:08,640
you know at the moment x in time uh

00:26:06,799 --> 00:26:10,000
which is if you look at romania per se

00:26:08,640 --> 00:26:12,480
just as an example we're actually

00:26:10,000 --> 00:26:13,279
doing pretty good in terms of bandwidth

00:26:12,480 --> 00:26:16,159
and

00:26:13,279 --> 00:26:17,840
network connectivity and you know how

00:26:16,159 --> 00:26:22,159
fast that is and stuff like that

00:26:17,840 --> 00:26:23,840
um what the whole idea of server side

00:26:22,159 --> 00:26:26,400
rendering was to help with that

00:26:23,840 --> 00:26:27,200
initial render right and that initial

00:26:26,400 --> 00:26:30,320
render

00:26:27,200 --> 00:26:32,000
can actually go a very long way in terms

00:26:30,320 --> 00:26:34,880
of perceived performance

00:26:32,000 --> 00:26:37,200
it's not like you're going to overall be

00:26:34,880 --> 00:26:38,080
a whole lot better if you server side

00:26:37,200 --> 00:26:41,039
render

00:26:38,080 --> 00:26:41,919
but it helps a little bit with that

00:26:41,039 --> 00:26:44,320
initial hit

00:26:41,919 --> 00:26:45,840
in the sense that you are able to show

00:26:44,320 --> 00:26:48,080
the user something

00:26:45,840 --> 00:26:50,799
like for example a page that gets

00:26:48,080 --> 00:26:52,640
rendered in terms of html and css

00:26:50,799 --> 00:26:54,400
you know with the with the javascript

00:26:52,640 --> 00:26:56,159
functionality rehydrating in the

00:26:54,400 --> 00:26:57,039
background and all the events listeners

00:26:56,159 --> 00:26:59,840
and all the things

00:26:57,039 --> 00:27:00,880
etc being added after you get that

00:26:59,840 --> 00:27:02,960
initial view

00:27:00,880 --> 00:27:04,880
and sometimes this can go a long way in

00:27:02,960 --> 00:27:06,960
terms of how the user perceive the

00:27:04,880 --> 00:27:08,480
performance of your website because

00:27:06,960 --> 00:27:10,400
you know even though overall you're

00:27:08,480 --> 00:27:12,960
gonna get the same time to interactive

00:27:10,400 --> 00:27:14,799
or roughly the same time to interactive

00:27:12,960 --> 00:27:16,000
you're gonna get faster initial

00:27:14,799 --> 00:27:19,120
rendering times which

00:27:16,000 --> 00:27:22,320
are gonna make users say well right this

00:27:19,120 --> 00:27:25,039
site renders faster because i've seen

00:27:22,320 --> 00:27:26,000
a page doing something or showing me

00:27:25,039 --> 00:27:28,640
something

00:27:26,000 --> 00:27:29,760
after just 1.5 seconds instead of just

00:27:28,640 --> 00:27:32,799
waiting for

00:27:29,760 --> 00:27:34,880
seven seconds to see anything right

00:27:32,799 --> 00:27:35,919
staring for seven seconds at a blank

00:27:34,880 --> 00:27:37,600
screen

00:27:35,919 --> 00:27:40,000
or seeing loaders everywhere we're

00:27:37,600 --> 00:27:42,480
seeing loaders and exactly all kinds of

00:27:40,000 --> 00:27:43,760
user patterns that you know show you

00:27:42,480 --> 00:27:44,320
that something's happening in the

00:27:43,760 --> 00:27:48,000
background

00:27:44,320 --> 00:27:50,240
but so again it's it's mostly

00:27:48,000 --> 00:27:51,279
centered around this idea of initial

00:27:50,240 --> 00:27:54,320
rendering times

00:27:51,279 --> 00:27:57,360
which is just the part of the overall

00:27:54,320 --> 00:27:59,520
uh you know um the overall

00:27:57,360 --> 00:28:01,679
things and the overall process that you

00:27:59,520 --> 00:28:03,120
need to complete until a user can

00:28:01,679 --> 00:28:06,559
properly interact

00:28:03,120 --> 00:28:08,559
with your website and what that point in

00:28:06,559 --> 00:28:10,880
time actually means is

00:28:08,559 --> 00:28:12,720
it's calculated based on this metric

00:28:10,880 --> 00:28:14,720
which is called time to interactive so

00:28:12,720 --> 00:28:16,880
that's the time at which

00:28:14,720 --> 00:28:17,919
a user can properly interact with your

00:28:16,880 --> 00:28:21,440
application by

00:28:17,919 --> 00:28:23,039
clicking buttons and actually you know

00:28:21,440 --> 00:28:25,520
doing stuff in the background through

00:28:23,039 --> 00:28:28,480
those actions

00:28:25,520 --> 00:28:30,320
so it only addresses a small part of

00:28:28,480 --> 00:28:32,799
this issue and the second part

00:28:30,320 --> 00:28:34,320
that that i was mentioning was that it's

00:28:32,799 --> 00:28:37,200
very hard to segregate

00:28:34,320 --> 00:28:38,159
what is functionality in terms of data

00:28:37,200 --> 00:28:40,240
fetching and

00:28:38,159 --> 00:28:41,600
attaching event listeners on components

00:28:40,240 --> 00:28:43,039
and stuff like that because you cannot

00:28:41,600 --> 00:28:45,279
do that on the server

00:28:43,039 --> 00:28:47,120
right you just render html through

00:28:45,279 --> 00:28:49,919
server-side stuff

00:28:47,120 --> 00:28:50,320
and then all of that html gets enhanced

00:28:49,919 --> 00:28:52,399
with

00:28:50,320 --> 00:28:53,520
future capabilities like adding event

00:28:52,399 --> 00:28:55,440
listeners and

00:28:53,520 --> 00:28:56,880
you know rehydrating the state on the

00:28:55,440 --> 00:28:59,440
client side with javascript

00:28:56,880 --> 00:29:00,320
and also you need to send back the

00:28:59,440 --> 00:29:02,960
components

00:29:00,320 --> 00:29:03,840
and the client-side code is going to

00:29:02,960 --> 00:29:07,120
re-fetch

00:29:03,840 --> 00:29:08,960
or fetch data at that point in

00:29:07,120 --> 00:29:10,799
i know use effect or component that

00:29:08,960 --> 00:29:11,520
mount or whatever people are using

00:29:10,799 --> 00:29:14,320
nowadays

00:29:11,520 --> 00:29:16,320
specifically in the react ecosystem so

00:29:14,320 --> 00:29:18,799
the client code needs to get

00:29:16,320 --> 00:29:19,440
parsed rehydrated and then executed and

00:29:18,799 --> 00:29:21,120
then

00:29:19,440 --> 00:29:22,960
you know you might have run trips back

00:29:21,120 --> 00:29:24,960
to the server

00:29:22,960 --> 00:29:26,399
issuing data requests and stuff like

00:29:24,960 --> 00:29:27,679
that to further populate your

00:29:26,399 --> 00:29:31,120
application

00:29:27,679 --> 00:29:33,600
so in this regard i i have some

00:29:31,120 --> 00:29:35,760
some good news um i don't know if you

00:29:33,600 --> 00:29:38,799
were watching closely the react

00:29:35,760 --> 00:29:40,640
uh ecosystem lately but roughly

00:29:38,799 --> 00:29:42,640
at the end of december or something like

00:29:40,640 --> 00:29:44,240
that there's been a post from the

00:29:42,640 --> 00:29:44,880
reacting with something that they're

00:29:44,240 --> 00:29:47,919
working on

00:29:44,880 --> 00:29:49,360
at this point called react server

00:29:47,919 --> 00:29:52,399
components

00:29:49,360 --> 00:29:54,640
so um i'm actually gonna

00:29:52,399 --> 00:29:55,600
take a brief moment to paste this in the

00:29:54,640 --> 00:29:58,640
web

00:29:55,600 --> 00:30:00,640
in the in the chat i i highly encourage

00:29:58,640 --> 00:30:03,840
you to take a look at that link and

00:30:00,640 --> 00:30:04,640
watch the presentation it's um from them

00:30:03,840 --> 00:30:08,000
abramov

00:30:04,640 --> 00:30:10,399
and and uh another person whose name i i

00:30:08,000 --> 00:30:12,399
cannot recall right now but the whole

00:30:10,399 --> 00:30:16,320
idea of this

00:30:12,399 --> 00:30:18,880
is that instead of sending pages per se

00:30:16,320 --> 00:30:20,159
to the to the server to be rendered on

00:30:18,880 --> 00:30:23,120
the server

00:30:20,159 --> 00:30:23,919
pages which can be actually you know

00:30:23,120 --> 00:30:27,520
formed out of

00:30:23,919 --> 00:30:30,480
multiple components that need to just

00:30:27,520 --> 00:30:31,360
render on the server from uh from an

00:30:30,480 --> 00:30:33,840
html

00:30:31,360 --> 00:30:34,720
mostly perspective and then have all the

00:30:33,840 --> 00:30:36,480
feedback of

00:30:34,720 --> 00:30:38,080
attaching event listeners and doing the

00:30:36,480 --> 00:30:41,440
data fetching on the

00:30:38,080 --> 00:30:44,480
client side you are able to

00:30:41,440 --> 00:30:46,000
send in components that are rendered on

00:30:44,480 --> 00:30:49,039
the server

00:30:46,000 --> 00:30:50,000
including the data fetching part right

00:30:49,039 --> 00:30:51,679
so you would have

00:30:50,000 --> 00:30:53,600
a component that would render on the

00:30:51,679 --> 00:30:55,440
server including the data fetching part

00:30:53,600 --> 00:30:57,919
that would allow you to go

00:30:55,440 --> 00:30:59,120
on the server to the database which is

00:30:57,919 --> 00:31:00,799
going to be very fast

00:30:59,120 --> 00:31:02,960
because you're not going to pay the the

00:31:00,799 --> 00:31:05,200
time it takes to send that

00:31:02,960 --> 00:31:06,480
request over the network from the client

00:31:05,200 --> 00:31:07,919
to the actual server

00:31:06,480 --> 00:31:09,440
right so it's going to be very fast it's

00:31:07,919 --> 00:31:10,640
going to happen in the server's memory

00:31:09,440 --> 00:31:12,640
and you're going to only have the

00:31:10,640 --> 00:31:14,960
connection to the database

00:31:12,640 --> 00:31:17,279
and then you can take that data and bake

00:31:14,960 --> 00:31:19,360
it in into the component

00:31:17,279 --> 00:31:20,320
and the funny the funny or the most

00:31:19,360 --> 00:31:21,760
interesting thing

00:31:20,320 --> 00:31:23,519
but i also find it funny i don't know

00:31:21,760 --> 00:31:25,440
why but the most interesting thing

00:31:23,519 --> 00:31:27,679
about this is that you can actually have

00:31:25,440 --> 00:31:29,519
server components

00:31:27,679 --> 00:31:30,720
that are going to render on the server

00:31:29,519 --> 00:31:33,519
which are going

00:31:30,720 --> 00:31:34,720
are going gonna then be streamed back to

00:31:33,519 --> 00:31:36,960
the client

00:31:34,720 --> 00:31:38,720
to have client components which are

00:31:36,960 --> 00:31:40,880
gonna be a hundred percent rendered on

00:31:38,720 --> 00:31:42,240
the client with javascript interpreted

00:31:40,880 --> 00:31:45,440
and parsed on the client

00:31:42,240 --> 00:31:46,399
which can in turn have server components

00:31:45,440 --> 00:31:48,080
as children

00:31:46,399 --> 00:31:49,600
which are going to render back on the

00:31:48,080 --> 00:31:51,600
server side

00:31:49,600 --> 00:31:52,799
right so it's a back and forth thing

00:31:51,600 --> 00:31:55,200
that now

00:31:52,799 --> 00:31:57,519
happens at the component level including

00:31:55,200 --> 00:31:59,679
the data fetching things

00:31:57,519 --> 00:32:01,200
right and and it allows for a much

00:31:59,679 --> 00:32:03,760
proper segregation

00:32:01,200 --> 00:32:04,720
of responsibilities because think about

00:32:03,760 --> 00:32:08,080
this we

00:32:04,720 --> 00:32:08,960
i think we've all come across this

00:32:08,080 --> 00:32:11,440
pattern of

00:32:08,960 --> 00:32:12,240
smart and dumb components right or you

00:32:11,440 --> 00:32:16,080
create

00:32:12,240 --> 00:32:18,320
or or um has it called um

00:32:16,080 --> 00:32:19,440
presentational components and uh what's

00:32:18,320 --> 00:32:22,080
the other name

00:32:19,440 --> 00:32:24,240
uh container components right where

00:32:22,080 --> 00:32:28,080
container components

00:32:24,240 --> 00:32:30,960
create and contain the logic of data

00:32:28,080 --> 00:32:33,039
fetching and then pass it down to a

00:32:30,960 --> 00:32:34,720
child component which only acts as a

00:32:33,039 --> 00:32:36,799
presentation layer

00:32:34,720 --> 00:32:38,720
so in a component you just do all the

00:32:36,799 --> 00:32:40,799
data fetching that you have

00:32:38,720 --> 00:32:42,720
and then you take all that data and you

00:32:40,799 --> 00:32:43,600
pass it down as props to a children

00:32:42,720 --> 00:32:45,840
component which

00:32:43,600 --> 00:32:47,600
only accepts props and renders them on

00:32:45,840 --> 00:32:49,919
the client side

00:32:47,600 --> 00:32:51,760
so if you think about a system that has

00:32:49,919 --> 00:32:55,600
multiple of these patterns

00:32:51,760 --> 00:32:57,600
you can now simply deconstruct them

00:32:55,600 --> 00:32:59,360
and say that the container components

00:32:57,600 --> 00:33:00,559
are going to be server rendered

00:32:59,360 --> 00:33:01,919
components

00:33:00,559 --> 00:33:03,760
because you're going to be able to

00:33:01,919 --> 00:33:05,360
render them on the server including the

00:33:03,760 --> 00:33:06,000
data fetching part you're going to get

00:33:05,360 --> 00:33:08,000
to

00:33:06,000 --> 00:33:09,200
the to the data very very fast because

00:33:08,000 --> 00:33:11,760
it's all going to happen in

00:33:09,200 --> 00:33:13,039
in memory on the server side you're

00:33:11,760 --> 00:33:15,760
going to take all that data

00:33:13,039 --> 00:33:16,640
in and you're going to stream it back to

00:33:15,760 --> 00:33:18,559
a client

00:33:16,640 --> 00:33:20,399
component which just acts as the

00:33:18,559 --> 00:33:22,559
presentation layer

00:33:20,399 --> 00:33:24,960
and then that client component can

00:33:22,559 --> 00:33:27,679
deeper down into the hierarchy

00:33:24,960 --> 00:33:29,519
contain another server component that

00:33:27,679 --> 00:33:32,000
just does the data fetching

00:33:29,519 --> 00:33:32,720
including other child components that

00:33:32,000 --> 00:33:35,039
will act as

00:33:32,720 --> 00:33:36,320
client components later on only for

00:33:35,039 --> 00:33:39,679
presentational side

00:33:36,320 --> 00:33:42,000
of things and it allows for a much

00:33:39,679 --> 00:33:44,000
uh cleaner pattern of a much cleaner

00:33:42,000 --> 00:33:47,120
segregation of responsibility

00:33:44,000 --> 00:33:49,120
or separation of responsibility uh for

00:33:47,120 --> 00:33:51,760
for that matter if we're talking about

00:33:49,120 --> 00:33:52,720
coding principles and it also allows for

00:33:51,760 --> 00:33:55,200
faster build

00:33:52,720 --> 00:33:56,720
times on the server right and if you

00:33:55,200 --> 00:33:58,559
combine all of these with

00:33:56,720 --> 00:34:00,080
code splitting and lazy loading you're

00:33:58,559 --> 00:34:02,880
going to be able to achieve

00:34:00,080 --> 00:34:04,080
overall way bigger performances that are

00:34:02,880 --> 00:34:06,399
going to be consistent

00:34:04,080 --> 00:34:07,679
also in times of time to interactive not

00:34:06,399 --> 00:34:11,040
only in times of

00:34:07,679 --> 00:34:13,919
first initial render so i

00:34:11,040 --> 00:34:14,639
i hope that makes a bit of sense uh what

00:34:13,919 --> 00:34:18,000
i just said

00:34:14,639 --> 00:34:19,679
but i i highly recommend reading

00:34:18,000 --> 00:34:21,679
the article and just watching the

00:34:19,679 --> 00:34:23,119
presentation because it's a good run

00:34:21,679 --> 00:34:23,839
through and you can actually play with

00:34:23,119 --> 00:34:26,399
that

00:34:23,839 --> 00:34:28,240
i think um at this point uh i don't know

00:34:26,399 --> 00:34:30,159
if it's experimental or not

00:34:28,240 --> 00:34:31,919
uh or if it's just big ten and you can

00:34:30,159 --> 00:34:34,159
you can try tomorrow

00:34:31,919 --> 00:34:36,240
um what i also know is that the next

00:34:34,159 --> 00:34:40,560
version of next js

00:34:36,240 --> 00:34:42,879
is supposed to support these by default

00:34:40,560 --> 00:34:44,240
which is also quite a good news in my

00:34:42,879 --> 00:34:46,720
opinion

00:34:44,240 --> 00:34:48,079
so yeah that's that's what i had in mind

00:34:46,720 --> 00:34:52,480
sounds good but

00:34:48,079 --> 00:34:56,320
this all obviously assumes that you have

00:34:52,480 --> 00:34:56,320
uh javascript on the server

00:34:57,680 --> 00:35:01,359
as the and it connects to the database

00:35:01,040 --> 00:35:04,720
so

00:35:01,359 --> 00:35:06,560
it's basically your server side language

00:35:04,720 --> 00:35:09,200
yeah yeah that's the thing you gotta

00:35:06,560 --> 00:35:11,599
have you know like node.js

00:35:09,200 --> 00:35:12,800
yeah the entire site yes as a

00:35:11,599 --> 00:35:14,240
server-side language in terms of

00:35:12,800 --> 00:35:16,000
database connection i think

00:35:14,240 --> 00:35:17,920
at the same point all all servers

00:35:16,000 --> 00:35:20,400
connect to the database

00:35:17,920 --> 00:35:22,000
uh and if they don't basically you're

00:35:20,400 --> 00:35:24,320
not going to need that

00:35:22,000 --> 00:35:26,240
in your application by default anyway so

00:35:24,320 --> 00:35:27,920
it wouldn't be a problem in terms of

00:35:26,240 --> 00:35:30,000
you know like payloads and network

00:35:27,920 --> 00:35:32,720
requests and anything

00:35:30,000 --> 00:35:33,520
at that point but uh yeah that's why

00:35:32,720 --> 00:35:35,760
next js

00:35:33,520 --> 00:35:37,599
i think is gonna you know they're

00:35:35,760 --> 00:35:39,200
they're the first ones to to jump on the

00:35:37,599 --> 00:35:40,079
string because their entire stack and

00:35:39,200 --> 00:35:42,839
everything will

00:35:40,079 --> 00:35:44,400
allow them to do this very easily

00:35:42,839 --> 00:35:47,839
awesome

00:35:44,400 --> 00:35:48,800
so i haven't really read sorry i just

00:35:47,839 --> 00:35:52,800
joined

00:35:48,800 --> 00:35:53,520
this conversation and i i'm not familiar

00:35:52,800 --> 00:35:56,320
with this

00:35:53,520 --> 00:35:57,839
react server components but from what

00:35:56,320 --> 00:36:01,359
i've heard don't they

00:35:57,839 --> 00:36:04,640
sound a lot like having react with

00:36:01,359 --> 00:36:08,720
apollo graphql

00:36:04,640 --> 00:36:12,000
how is it different because you can have

00:36:08,720 --> 00:36:14,320
components that issue their own

00:36:12,000 --> 00:36:15,520
queries they can be rendered on the

00:36:14,320 --> 00:36:18,320
server

00:36:15,520 --> 00:36:20,560
and i'm not sure when you say that the

00:36:18,320 --> 00:36:24,400
server renders these components

00:36:20,560 --> 00:36:28,400
will it stream back html or data

00:36:24,400 --> 00:36:31,119
or what would it stream back

00:36:28,400 --> 00:36:31,119
to the client

00:36:32,640 --> 00:36:41,440
i think it's also gonna stream back html

00:36:35,760 --> 00:36:44,480
right um i mean it's gonna stream back

00:36:41,440 --> 00:36:45,839
html but with react components in it so

00:36:44,480 --> 00:36:48,400
it's gonna stream back i think

00:36:45,839 --> 00:36:50,079
it would be like some sort of jxx which

00:36:48,400 --> 00:36:51,680
is then gonna get reinterpreted on the

00:36:50,079 --> 00:36:52,839
client side with the client components

00:36:51,680 --> 00:36:56,000
as well

00:36:52,839 --> 00:36:57,200
um this is something that i don't have a

00:36:56,000 --> 00:37:00,400
definitive answer to

00:36:57,200 --> 00:37:01,119
that that's just a guess that i would i

00:37:00,400 --> 00:37:04,800
ventured to

00:37:01,119 --> 00:37:07,680
to make um so i'm not very

00:37:04,800 --> 00:37:08,720
uh there's no problem oriented in this

00:37:07,680 --> 00:37:12,400
regard

00:37:08,720 --> 00:37:15,440
um but in in terms of of apollo

00:37:12,400 --> 00:37:19,200
and graphql right you still

00:37:15,440 --> 00:37:21,200
issues requests from the client

00:37:19,200 --> 00:37:22,320
to the graphql server which then goes

00:37:21,200 --> 00:37:24,000
back into

00:37:22,320 --> 00:37:25,760
you know like through resolvers and

00:37:24,000 --> 00:37:27,280
everything goes back to you

00:37:25,760 --> 00:37:29,680
through your server and onto the

00:37:27,280 --> 00:37:30,320
database in the end but you still pay

00:37:29,680 --> 00:37:33,520
the

00:37:30,320 --> 00:37:34,800
payload of issuing the requests from the

00:37:33,520 --> 00:37:37,200
client side

00:37:34,800 --> 00:37:38,480
and they have to travel the network in

00:37:37,200 --> 00:37:41,119
this case it would

00:37:38,480 --> 00:37:43,280
it wouldn't be so those requests would

00:37:41,119 --> 00:37:45,599
happen on the server side

00:37:43,280 --> 00:37:47,040
but when you say server render component

00:37:45,599 --> 00:37:49,839
you mean on the initial

00:37:47,040 --> 00:37:52,079
load on the initial page load so that

00:37:49,839 --> 00:37:52,880
means they would be static for the rest

00:37:52,079 --> 00:37:55,920
of the

00:37:52,880 --> 00:37:57,680
run because maybe i misunderstood they

00:37:55,920 --> 00:38:01,599
would be static for the rest of the run

00:37:57,680 --> 00:38:04,160
but they they would be

00:38:01,599 --> 00:38:05,119
it's not just about the initial load

00:38:04,160 --> 00:38:08,000
right you can

00:38:05,119 --> 00:38:09,440
actually imagine this you have a page

00:38:08,000 --> 00:38:10,960
you have a parent component that you

00:38:09,440 --> 00:38:12,560
render on the server side and then you

00:38:10,960 --> 00:38:14,800
have

00:38:12,560 --> 00:38:16,240
three children component in a hierarchy

00:38:14,800 --> 00:38:18,160
so i'm talking about everything in a

00:38:16,240 --> 00:38:19,040
parent-child relationship right no

00:38:18,160 --> 00:38:21,280
siblings know

00:38:19,040 --> 00:38:23,119
anything you first render that initial

00:38:21,280 --> 00:38:23,440
component on the server side it streams

00:38:23,119 --> 00:38:26,000
back

00:38:23,440 --> 00:38:27,839
jsx all of the children component from

00:38:26,000 --> 00:38:29,920
level two level three level four

00:38:27,839 --> 00:38:31,599
they get rendered on the client side and

00:38:29,920 --> 00:38:32,960
level four component which is a

00:38:31,599 --> 00:38:35,359
client-side component

00:38:32,960 --> 00:38:36,720
contains another server-side component

00:38:35,359 --> 00:38:38,560
in it as a children

00:38:36,720 --> 00:38:40,240
and that gets rendered back on the on

00:38:38,560 --> 00:38:42,480
the server side

00:38:40,240 --> 00:38:43,760
and if you do this with lazy loading and

00:38:42,480 --> 00:38:46,800
code splitting

00:38:43,760 --> 00:38:49,359
you can actually achieve

00:38:46,800 --> 00:38:51,040
not only the initial render of the page

00:38:49,359 --> 00:38:53,359
but subsequent renders

00:38:51,040 --> 00:38:55,119
of that subsequent renders of that

00:38:53,359 --> 00:38:58,320
initial page

00:38:55,119 --> 00:39:00,160
or part of those on the server side

00:38:58,320 --> 00:39:02,000
by going back and forth between the

00:39:00,160 --> 00:39:03,760
client and the server depending on how

00:39:02,000 --> 00:39:05,520
you construct your hierarchy between

00:39:03,760 --> 00:39:06,480
server side components and client-side

00:39:05,520 --> 00:39:08,720
components

00:39:06,480 --> 00:39:10,880
and that's actually decently powerful if

00:39:08,720 --> 00:39:11,520
you if you code split them and lazy-load

00:39:10,880 --> 00:39:13,440
them

00:39:11,520 --> 00:39:15,119
right and if you combine that with the

00:39:13,440 --> 00:39:17,359
fact that you can

00:39:15,119 --> 00:39:18,320
render on the server those components

00:39:17,359 --> 00:39:21,520
which are

00:39:18,320 --> 00:39:24,880
dealing with the data fetching to to win

00:39:21,520 --> 00:39:26,320
the payload that you pay to do the

00:39:24,880 --> 00:39:28,240
network requests

00:39:26,320 --> 00:39:30,079
right you can construct the hierarchy of

00:39:28,240 --> 00:39:33,440
your components in such a way that

00:39:30,079 --> 00:39:35,359
all of the or mostly all of the

00:39:33,440 --> 00:39:36,720
the queries are going to happen on the

00:39:35,359 --> 00:39:39,119
server and

00:39:36,720 --> 00:39:40,839
your client just receives components

00:39:39,119 --> 00:39:42,480
that are going to be rendered as

00:39:40,839 --> 00:39:45,040
presentation

00:39:42,480 --> 00:39:47,359
and interpreted and parsed interpreted

00:39:45,040 --> 00:39:48,079
and rendered by the react on the client

00:39:47,359 --> 00:39:50,640
side

00:39:48,079 --> 00:39:51,520
so it's like it's a little bit in terms

00:39:50,640 --> 00:39:55,520
of

00:39:51,520 --> 00:39:57,920
approach is a little bit of going back

00:39:55,520 --> 00:39:59,760
to those days where everything was

00:39:57,920 --> 00:40:01,680
rendered on the server and the client

00:39:59,760 --> 00:40:03,200
was just receiving the html and you

00:40:01,680 --> 00:40:05,200
would sprinkle javascript

00:40:03,200 --> 00:40:06,880
on top of it just in terms of

00:40:05,200 --> 00:40:08,079
interactions and event listeners and

00:40:06,880 --> 00:40:11,280
stuff like that

00:40:08,079 --> 00:40:15,599
but you now do it on a component basis

00:40:11,280 --> 00:40:15,599
not on a page basis like it was before

00:40:15,760 --> 00:40:19,839
that's that's how i see it in terms of

00:40:18,160 --> 00:40:20,480
approach architectural approach and

00:40:19,839 --> 00:40:23,520
mindset

00:40:20,480 --> 00:40:26,240
i i hope that makes sense a little bit

00:40:23,520 --> 00:40:27,440
or at least a little bit thank you vlad

00:40:26,240 --> 00:40:30,400
i think we should uh

00:40:27,440 --> 00:40:31,680
we should go to the next topics i mean

00:40:30,400 --> 00:40:33,359
maybe we could have

00:40:31,680 --> 00:40:35,599
just a meet up about server side

00:40:33,359 --> 00:40:39,839
rendering and the

00:40:35,599 --> 00:40:39,839
react server components

00:40:40,560 --> 00:40:47,280
if you guys don't mind so uh

00:40:44,480 --> 00:40:47,680
i would like to tackle the next question

00:40:47,280 --> 00:40:50,079
which

00:40:47,680 --> 00:40:51,040
is what do you expect from the job

00:40:50,079 --> 00:40:54,319
market

00:40:51,040 --> 00:40:54,319
in 2021

00:40:56,160 --> 00:40:59,359
christina if you want to give more

00:40:58,160 --> 00:41:03,160
details like

00:40:59,359 --> 00:41:04,560
what to expect do you mean like skills

00:41:03,160 --> 00:41:09,599
required

00:41:04,560 --> 00:41:09,599
or what part do you want to touch there

00:41:12,079 --> 00:41:17,440
indeed i'm interested in what skills do

00:41:15,440 --> 00:41:19,520
do you see that are required to be a

00:41:17,440 --> 00:41:20,720
javascript developer a good javascript

00:41:19,520 --> 00:41:24,319
developer

00:41:20,720 --> 00:41:26,960
if you haven't seen a change during the

00:41:24,319 --> 00:41:28,720
this month regarding how your

00:41:26,960 --> 00:41:31,440
responsibilities look like

00:41:28,720 --> 00:41:33,359
do you see that if you're open for a job

00:41:31,440 --> 00:41:36,240
do you see that the jobs ad

00:41:33,359 --> 00:41:39,200
have other things other tools other

00:41:36,240 --> 00:41:42,480
frameworks are more oriented

00:41:39,200 --> 00:41:42,480
i'm interested on that

00:41:43,920 --> 00:41:47,920
yeah i think this touches a bit with

00:41:46,400 --> 00:41:50,880
what skills should the javascript

00:41:47,920 --> 00:41:52,079
developer have in 2021 to be relevant to

00:41:50,880 --> 00:41:55,680
the job market

00:41:52,079 --> 00:41:57,760
i think they're tied up a bit yeah but

00:41:55,680 --> 00:41:59,680
the information from you guys not that

00:41:57,760 --> 00:42:03,599
me as a recruiter because

00:41:59,680 --> 00:42:06,319
yeah i already see some changes

00:42:03,599 --> 00:42:07,760
but i'm interested how do you feel or

00:42:06,319 --> 00:42:17,839
see

00:42:07,760 --> 00:42:17,839
um anybody wants to to start

00:42:18,480 --> 00:42:24,000
okay um i can um

00:42:21,680 --> 00:42:25,200
i can say a few words for the beginning

00:42:24,000 --> 00:42:28,800
until

00:42:25,200 --> 00:42:32,240
um somebody else wants to jump in

00:42:28,800 --> 00:42:35,920
uh the thing is what i see with the job

00:42:32,240 --> 00:42:38,960
market is that they're expecting uh

00:42:35,920 --> 00:42:41,440
i think vlad mentioned a bit that part

00:42:38,960 --> 00:42:42,240
where you need to have like a tons of

00:42:41,440 --> 00:42:44,960
skills

00:42:42,240 --> 00:42:47,119
and a lot of ads requires tons of skills

00:42:44,960 --> 00:42:50,000
so if you're javascript developer

00:42:47,119 --> 00:42:50,800
uh part for example of the let's say of

00:42:50,000 --> 00:42:53,760
the jobs

00:42:50,800 --> 00:42:54,160
description contain also you need to

00:42:53,760 --> 00:42:57,280
know

00:42:54,160 --> 00:43:00,319
some devops stuff like avs or

00:42:57,280 --> 00:43:03,359
any other stuff so the the

00:43:00,319 --> 00:43:07,680
thing is i think this trend uh

00:43:03,359 --> 00:43:10,240
unfortunately uh will will go on

00:43:07,680 --> 00:43:11,359
and i would have prepared preferred a

00:43:10,240 --> 00:43:15,359
bit to

00:43:11,359 --> 00:43:16,480
to to remain a bit more like focused on

00:43:15,359 --> 00:43:18,480
some of the things

00:43:16,480 --> 00:43:20,160
because now i think they're expecting

00:43:18,480 --> 00:43:23,200
javascript developers to do

00:43:20,160 --> 00:43:26,000
everything and i think

00:43:23,200 --> 00:43:27,520
it's good for the employer because they

00:43:26,000 --> 00:43:29,839
don't need to hire

00:43:27,520 --> 00:43:32,000
more people to do those specific job but

00:43:29,839 --> 00:43:34,319
it's really hard for us and on the long

00:43:32,000 --> 00:43:41,839
term on the long run i think it's not

00:43:34,319 --> 00:43:41,839
good for the employer as well

00:43:45,040 --> 00:43:49,680
right my my two cents on this is that i

00:43:48,000 --> 00:43:51,760
believe that the market is going through

00:43:49,680 --> 00:43:54,560
transition period in the sense that

00:43:51,760 --> 00:43:54,960
i i do agree with the fact that this is

00:43:54,560 --> 00:43:56,720
still

00:43:54,960 --> 00:43:58,560
something that's not going to shake off

00:43:56,720 --> 00:44:00,640
in the following years

00:43:58,560 --> 00:44:03,040
but i don't think it's sustainable over

00:44:00,640 --> 00:44:05,520
a longer period of time

00:44:03,040 --> 00:44:07,520
because you know everything in the

00:44:05,520 --> 00:44:10,560
ecosystem is just rising

00:44:07,520 --> 00:44:13,599
tools are getting better smarter

00:44:10,560 --> 00:44:14,800
but also new tools appear frameworks are

00:44:13,599 --> 00:44:17,520
getting better smarter

00:44:14,800 --> 00:44:20,079
but new frameworks appear and so on and

00:44:17,520 --> 00:44:20,079
so forth

00:44:20,839 --> 00:44:26,160
and about that but the

00:44:22,880 --> 00:44:27,760
user expectations also get um bigger and

00:44:26,160 --> 00:44:29,760
bigger over time so

00:44:27,760 --> 00:44:32,880
i don't think this is sustainable for

00:44:29,760 --> 00:44:36,160
for a very longer period of time

00:44:32,880 --> 00:44:36,720
i think people have a limit to how much

00:44:36,160 --> 00:44:38,640
they can

00:44:36,720 --> 00:44:40,000
keep into their minds in terms of

00:44:38,640 --> 00:44:42,880
knowledge and everything it's like

00:44:40,000 --> 00:44:43,200
if you have limited brain space for that

00:44:42,880 --> 00:44:45,119
the

00:44:43,200 --> 00:44:46,160
the companies are going to realize that

00:44:45,119 --> 00:44:47,280
and at the certain point they're going

00:44:46,160 --> 00:44:50,160
to have to make

00:44:47,280 --> 00:44:50,640
a better segregation in terms of skills

00:44:50,160 --> 00:44:52,079
now

00:44:50,640 --> 00:44:53,920
at that point i think we're going to get

00:44:52,079 --> 00:44:55,680
into some sort of financial wars

00:44:53,920 --> 00:44:57,520
because there are going to be

00:44:55,680 --> 00:45:00,480
differences in terms of utility

00:44:57,520 --> 00:45:01,839
and in in regarding what you can

00:45:00,480 --> 00:45:03,680
actually do

00:45:01,839 --> 00:45:05,599
and whether or not the fact that you can

00:45:03,680 --> 00:45:07,599
code in javascript is more or less

00:45:05,599 --> 00:45:10,000
important or more important than

00:45:07,599 --> 00:45:11,920
coding just css which is going to be

00:45:10,000 --> 00:45:13,200
more important than coding just html and

00:45:11,920 --> 00:45:15,599
so on so forth

00:45:13,200 --> 00:45:16,480
um but i think that's going to happen in

00:45:15,599 --> 00:45:19,200
a not

00:45:16,480 --> 00:45:20,480
not this year but in a distant future it

00:45:19,200 --> 00:45:23,839
is going to happen because

00:45:20,480 --> 00:45:23,839
you you cannot keep up with that

00:45:25,119 --> 00:45:32,160
i'm not mainly a

00:45:28,400 --> 00:45:35,839
javascript developer um

00:45:32,160 --> 00:45:39,040
so i can maybe come with an even

00:45:35,839 --> 00:45:40,880
broader view from what happens

00:45:39,040 --> 00:45:43,440
from what i've observed in other

00:45:40,880 --> 00:45:47,440
technologies as well

00:45:43,440 --> 00:45:50,480
um i think the

00:45:47,440 --> 00:45:53,680
basic programming skill

00:45:50,480 --> 00:45:57,359
or skill level

00:45:53,680 --> 00:45:59,440
has decreased i think there's not enough

00:45:57,359 --> 00:46:00,560
focus on that and there's too much focus

00:45:59,440 --> 00:46:03,680
on other stuff

00:46:00,560 --> 00:46:07,359
like like it was said

00:46:03,680 --> 00:46:10,800
before devops skills

00:46:07,359 --> 00:46:12,839
um maybe a lot

00:46:10,800 --> 00:46:14,720
to know lots of tools lots of

00:46:12,839 --> 00:46:19,359
technologies

00:46:14,720 --> 00:46:22,800
in the end these tools and technologies

00:46:19,359 --> 00:46:27,440
usually have good documentation

00:46:22,800 --> 00:46:30,800
some of these tools are very

00:46:27,440 --> 00:46:31,680
uh very idiot proof as well uh at least

00:46:30,800 --> 00:46:34,480
when it comes

00:46:31,680 --> 00:46:36,319
when it comes to setting up and uh just

00:46:34,480 --> 00:46:39,920
get going

00:46:36,319 --> 00:46:42,319
um when it comes to the advanced uh

00:46:39,920 --> 00:46:43,760
advanced parts you usually need someone

00:46:42,319 --> 00:46:46,240
who actually knows

00:46:43,760 --> 00:46:47,280
what they are talking about and has

00:46:46,240 --> 00:46:50,800
actually

00:46:47,280 --> 00:46:50,800
has dug into the code

00:46:52,560 --> 00:46:56,319
this is the first so basic programming

00:46:55,040 --> 00:46:59,359
programming knowledge

00:46:56,319 --> 00:47:02,880
uh is missing i think and

00:46:59,359 --> 00:47:07,280
maybe maybe

00:47:02,880 --> 00:47:07,280
that should be expected that should be a

00:47:07,839 --> 00:47:14,079
a more focus and a more

00:47:10,960 --> 00:47:15,760
a bigger expectation than all the rest

00:47:14,079 --> 00:47:19,119
of the tools

00:47:15,760 --> 00:47:21,599
um we are very we

00:47:19,119 --> 00:47:25,599
i mean the javascript community is very

00:47:21,599 --> 00:47:29,040
uh proud of

00:47:25,599 --> 00:47:32,400
of switching to functional

00:47:29,040 --> 00:47:35,760
programming but i've never i

00:47:32,400 --> 00:47:37,839
i haven't seen yet i haven't seen proper

00:47:35,760 --> 00:47:40,960
functional

00:47:37,839 --> 00:47:44,319
practices applied on projects

00:47:40,960 --> 00:47:46,720
so and there are also

00:47:44,319 --> 00:47:48,079
stuff like angular it will probably come

00:47:46,720 --> 00:47:52,720
up later

00:47:48,079 --> 00:47:55,920
which is purely all um

00:47:52,720 --> 00:47:59,359
so it's a bit it's a bit strange that

00:47:55,920 --> 00:48:02,480
there is no solid

00:47:59,359 --> 00:48:05,280
programming uh skill uh

00:48:02,480 --> 00:48:07,040
needed or there is no background for

00:48:05,280 --> 00:48:10,319
this

00:48:07,040 --> 00:48:13,760
at least companies are not asking for it

00:48:10,319 --> 00:48:17,119
uh and the second part

00:48:13,760 --> 00:48:19,680
um i know we are

00:48:17,119 --> 00:48:21,040
tracking forwards with the technology

00:48:19,680 --> 00:48:24,160
and we like

00:48:21,040 --> 00:48:27,200
the shiny new stuff

00:48:24,160 --> 00:48:27,680
but because these frameworks abstract

00:48:27,200 --> 00:48:32,640
away

00:48:27,680 --> 00:48:32,640
most most of the heavy lifting

00:48:32,839 --> 00:48:38,720
um people

00:48:35,280 --> 00:48:42,240
tend to not know how

00:48:38,720 --> 00:48:46,000
http works how basic web

00:48:42,240 --> 00:48:46,000
processes work how

00:48:46,079 --> 00:48:53,200
maybe you will have to integrate some

00:48:49,760 --> 00:48:56,480
um some

00:48:53,200 --> 00:48:56,960
legacy script that for tracking script

00:48:56,480 --> 00:48:59,280
from

00:48:56,960 --> 00:49:01,520
for a client and you will have to know

00:48:59,280 --> 00:49:05,119
basic javascript

00:49:01,520 --> 00:49:09,119
for that it's not enough to just

00:49:05,119 --> 00:49:12,240
write some components and that's it

00:49:09,119 --> 00:49:16,640
i did i i have experienced this

00:49:12,240 --> 00:49:19,839
in my teams and especially when

00:49:16,640 --> 00:49:22,160
i've talked to junior developers and

00:49:19,839 --> 00:49:25,119
i've talked with other people from other

00:49:22,160 --> 00:49:25,119
companies as well

00:49:26,640 --> 00:49:32,880
these two things are lacking

00:49:29,680 --> 00:49:34,000
and they should be focused on more in my

00:49:32,880 --> 00:49:37,680
opinion

00:49:34,000 --> 00:49:40,079
all right actually yeah daniel

00:49:37,680 --> 00:49:42,319
we want to go to the next question oh

00:49:40,079 --> 00:49:42,319
sorry

00:49:42,400 --> 00:49:47,280
it's not it's no problem we can go to

00:49:44,079 --> 00:49:47,280
the next one it's fine

00:49:47,520 --> 00:49:51,760
i mean you can say it's no it's not an

00:49:50,160 --> 00:49:54,800
issue we can

00:49:51,760 --> 00:49:55,760
just say your your thoughts i completely

00:49:54,800 --> 00:49:58,559
agree with

00:49:55,760 --> 00:49:59,680
with what was just said i feel exactly

00:49:58,559 --> 00:50:03,040
the same and i come

00:49:59,680 --> 00:50:04,800
from you know i've been working for

00:50:03,040 --> 00:50:06,960
a long time i remember the first

00:50:04,800 --> 00:50:09,359
requirements were for you to translate

00:50:06,960 --> 00:50:12,559
the design into a pixel perfect

00:50:09,359 --> 00:50:16,559
thingy you'd had to know a lot of css

00:50:12,559 --> 00:50:20,480
cross-browser issues those all went away

00:50:16,559 --> 00:50:23,359
but the the market beca

00:50:20,480 --> 00:50:24,839
became more fragmented nowadays it's all

00:50:23,359 --> 00:50:27,760
about frameworks and

00:50:24,839 --> 00:50:29,839
and this and that but it's never about

00:50:27,760 --> 00:50:33,040
the basics i think

00:50:29,839 --> 00:50:35,839
we think of someone as being a senior if

00:50:33,040 --> 00:50:37,200
they know the basics they think of

00:50:35,839 --> 00:50:40,319
themselves

00:50:37,200 --> 00:50:42,640
of seeing as seniors if they know very

00:50:40,319 --> 00:50:43,920
well react for example but as soon as we

00:50:42,640 --> 00:50:47,119
introduce

00:50:43,920 --> 00:50:50,000
like you said uh http or caching or

00:50:47,119 --> 00:50:50,559
you know query strings or whatever some

00:50:50,000 --> 00:50:55,359
simple

00:50:50,559 --> 00:50:57,920
basic things they get lost and they get

00:50:55,359 --> 00:50:58,559
it's it's sad from my point of view as

00:50:57,920 --> 00:51:01,680
well

00:50:58,559 --> 00:51:03,760
that this is the situation but on the

00:51:01,680 --> 00:51:06,720
other hand i think it's the market

00:51:03,760 --> 00:51:07,359
that generated this because we didn't

00:51:06,720 --> 00:51:12,160
work on

00:51:07,359 --> 00:51:14,960
too many apps or websites that required

00:51:12,160 --> 00:51:16,400
people to know the complexity of their

00:51:14,960 --> 00:51:19,280
algorithms

00:51:16,400 --> 00:51:20,720
we have the network latency to blame

00:51:19,280 --> 00:51:23,520
when something is slow

00:51:20,720 --> 00:51:24,319
or we introduce pagination and that's it

00:51:23,520 --> 00:51:28,480
you only load

00:51:24,319 --> 00:51:32,240
10 items so you don't really care about

00:51:28,480 --> 00:51:35,280
how fast or optimum your code is

00:51:32,240 --> 00:51:38,640
and i think this is the cause of all the

00:51:35,280 --> 00:51:38,640
bad code we see today

00:51:38,720 --> 00:51:43,280
can i play a little bit the devil's

00:51:40,240 --> 00:51:45,119
advocate here or yeah do we show

00:51:43,280 --> 00:51:48,160
uh i don't know no no i'm not looking at

00:51:45,119 --> 00:51:49,920
the daniel because i don't want to

00:51:48,160 --> 00:51:51,920
just just go a couple of minutes and

00:51:49,920 --> 00:51:53,920
then we

00:51:51,920 --> 00:51:55,920
i think we touched a bit also what are

00:51:53,920 --> 00:51:58,400
your pains uh

00:51:55,920 --> 00:51:59,680
the next question also with all this

00:51:58,400 --> 00:52:03,119
talk

00:51:59,680 --> 00:52:05,440
so go ahead please right so i

00:52:03,119 --> 00:52:07,040
i want to say one thing but i'm i'm

00:52:05,440 --> 00:52:07,520
going to play the devil's advocate here

00:52:07,040 --> 00:52:09,359
as

00:52:07,520 --> 00:52:10,960
a developer i wholeheartedly agree with

00:52:09,359 --> 00:52:12,720
you and i've i've

00:52:10,960 --> 00:52:14,160
chatted with a lot of people and i do

00:52:12,720 --> 00:52:16,160
think you're both right

00:52:14,160 --> 00:52:17,760
and and this is the overall sentiment i

00:52:16,160 --> 00:52:20,000
get from the market as well

00:52:17,760 --> 00:52:21,680
but here's a harsh truth about what

00:52:20,000 --> 00:52:23,200
we're doing

00:52:21,680 --> 00:52:25,920
we're actually being judged on the

00:52:23,200 --> 00:52:26,559
output and output means products and

00:52:25,920 --> 00:52:28,880
products

00:52:26,559 --> 00:52:30,400
mean things that produce money for our

00:52:28,880 --> 00:52:33,520
clients and the

00:52:30,400 --> 00:52:35,440
thing that is a fundamental relationship

00:52:33,520 --> 00:52:36,880
or a fundamental truth in this

00:52:35,440 --> 00:52:39,040
relationship is that

00:52:36,880 --> 00:52:41,520
the money and the outcome is not a

00:52:39,040 --> 00:52:44,480
hundred percent and always tied in a

00:52:41,520 --> 00:52:46,400
correlation in a pixel perfect linear

00:52:44,480 --> 00:52:47,599
correlation with what we're doing as

00:52:46,400 --> 00:52:49,760
developers in terms of

00:52:47,599 --> 00:52:50,880
in terms of the code and i know i know

00:52:49,760 --> 00:52:53,200
that sounds a little bit

00:52:50,880 --> 00:52:54,400
harsh and and undesired but that's the

00:52:53,200 --> 00:52:57,520
reality

00:52:54,400 --> 00:52:58,880
so there's another point i want to make

00:52:57,520 --> 00:53:01,680
here

00:52:58,880 --> 00:53:02,079
and i don't think this is for 2021 not

00:53:01,680 --> 00:53:04,880
even

00:53:02,079 --> 00:53:07,119
maybe this decade but as as we go on and

00:53:04,880 --> 00:53:09,280
on and on technology evolves

00:53:07,119 --> 00:53:10,400
and what we need to do as programmers

00:53:09,280 --> 00:53:12,000
and as people

00:53:10,400 --> 00:53:14,160
not only as programs as people in the

00:53:12,000 --> 00:53:15,839
society but especially as programmers is

00:53:14,160 --> 00:53:18,160
we need to move up the

00:53:15,839 --> 00:53:18,880
abstraction ladder and we're gonna work

00:53:18,160 --> 00:53:21,119
with

00:53:18,880 --> 00:53:22,559
more and more abstract things down to

00:53:21,119 --> 00:53:25,599
the point

00:53:22,559 --> 00:53:26,240
where we're gonna actually be allowed to

00:53:25,599 --> 00:53:28,480
forget

00:53:26,240 --> 00:53:30,400
how something works internally down to

00:53:28,480 --> 00:53:33,119
the very core level

00:53:30,400 --> 00:53:35,599
and that's gonna be fine because people

00:53:33,119 --> 00:53:38,559
nowadays working in java

00:53:35,599 --> 00:53:40,160
which has memory management by done by

00:53:38,559 --> 00:53:42,480
themselves

00:53:40,160 --> 00:53:44,559
they don't know or most people doing

00:53:42,480 --> 00:53:47,119
that they don't really know how to

00:53:44,559 --> 00:53:48,800
memory manage everything as opposed to

00:53:47,119 --> 00:53:50,400
people working in c

00:53:48,800 --> 00:53:52,240
for example where you have to memory

00:53:50,400 --> 00:53:55,200
manage everything by yourself

00:53:52,240 --> 00:53:57,040
i think i agree with this in c you have

00:53:55,200 --> 00:53:58,880
to do it from the beginning

00:53:57,040 --> 00:54:01,040
in java you know from the beginning that

00:53:58,880 --> 00:54:03,599
there's a garbage collector

00:54:01,040 --> 00:54:04,559
and not knowing the essential leads to

00:54:03,599 --> 00:54:07,520
bad code

00:54:04,559 --> 00:54:08,800
which leads to bad maintainability which

00:54:07,520 --> 00:54:10,960
means to people getting

00:54:08,800 --> 00:54:12,079
angry at their own framework and

00:54:10,960 --> 00:54:15,599
dropping it

00:54:12,079 --> 00:54:18,640
for the next big big thing creating

00:54:15,599 --> 00:54:20,480
unhappiness amongst developers that they

00:54:18,640 --> 00:54:23,119
still have to do for example let's

00:54:20,480 --> 00:54:24,000
say angular 1 which was fine and

00:54:23,119 --> 00:54:26,319
everyone was

00:54:24,000 --> 00:54:27,520
hyped about at that time but they all

00:54:26,319 --> 00:54:30,960
dropped it and

00:54:27,520 --> 00:54:34,160
now give someone a project with

00:54:30,960 --> 00:54:37,359
react using classes and they will be

00:54:34,160 --> 00:54:38,640
really really angry is it your fault did

00:54:37,359 --> 00:54:40,799
you write that code

00:54:38,640 --> 00:54:42,079
no they did it but now they don't like

00:54:40,799 --> 00:54:45,920
it because there's a

00:54:42,079 --> 00:54:48,240
shiny new thing and they don't want

00:54:45,920 --> 00:54:50,000
yeah they just want to drop whatever

00:54:48,240 --> 00:54:52,319
they've been doing so far and jump to

00:54:50,000 --> 00:54:55,119
the next thing i think this is

00:54:52,319 --> 00:54:56,559
so bad yeah so i think maintainability

00:54:55,119 --> 00:55:00,640
is the key word

00:54:56,559 --> 00:55:02,799
that uh that i think it's relevant

00:55:00,640 --> 00:55:04,960
in this discussion right but that that

00:55:02,799 --> 00:55:06,640
that also doesn't go on for ages so what

00:55:04,960 --> 00:55:10,400
i'm saying is uh well

00:55:06,640 --> 00:55:13,599
you know some projects will disagree

00:55:10,400 --> 00:55:15,680
right but no no no no we can talk about

00:55:13,599 --> 00:55:17,839
decades but what i'm saying is not that

00:55:15,680 --> 00:55:19,440
legacy code doesn't exist and not that

00:55:17,839 --> 00:55:20,240
there's there's always going to be a

00:55:19,440 --> 00:55:22,000
market for

00:55:20,240 --> 00:55:23,839
older code and people needing to

00:55:22,000 --> 00:55:25,920
understand the basics in order to be

00:55:23,839 --> 00:55:29,040
able to properly work on that code

00:55:25,920 --> 00:55:31,280
what i'm saying is that on an average

00:55:29,040 --> 00:55:33,520
on a decently long time we're going to

00:55:31,280 --> 00:55:34,640
move up the abstraction ladder and i can

00:55:33,520 --> 00:55:36,960
see why

00:55:34,640 --> 00:55:38,960
in 20 years from now everybody is going

00:55:36,960 --> 00:55:42,240
to know how to program react

00:55:38,960 --> 00:55:42,720
but they don't know how http works

00:55:42,240 --> 00:55:44,720
because

00:55:42,720 --> 00:55:46,160
all of that is going to be baked into

00:55:44,720 --> 00:55:48,079
protocols and everything and

00:55:46,160 --> 00:55:49,839
in the framework layer and everything is

00:55:48,079 --> 00:55:51,760
going to be done by itself

00:55:49,839 --> 00:55:53,200
the same way memory management is now

00:55:51,760 --> 00:55:56,559
being done by itself

00:55:53,200 --> 00:55:57,440
as opposed to how it was 40 or 50 years

00:55:56,559 --> 00:55:59,760
ago

00:55:57,440 --> 00:56:00,640
so yeah and it's it's normal for that to

00:55:59,760 --> 00:56:02,720
happen just

00:56:00,640 --> 00:56:03,760
the consequence of technology that's

00:56:02,720 --> 00:56:05,760
what i had in mind

00:56:03,760 --> 00:56:08,000
i think you're right and that's good but

00:56:05,760 --> 00:56:11,599
i think the bad thing about this is that

00:56:08,000 --> 00:56:14,319
everyone is moving with the proprietary

00:56:11,599 --> 00:56:14,799
framework and not with the open web i

00:56:14,319 --> 00:56:17,440
think

00:56:14,799 --> 00:56:18,720
web components is the way to go and not

00:56:17,440 --> 00:56:21,359
virtual dom

00:56:18,720 --> 00:56:23,040
which is more about developer experience

00:56:21,359 --> 00:56:24,880
and not user experience if you think

00:56:23,040 --> 00:56:27,200
about all the computations

00:56:24,880 --> 00:56:28,079
and the battery life and everything that

00:56:27,200 --> 00:56:30,319
involves

00:56:28,079 --> 00:56:31,359
right to run react on the client and

00:56:30,319 --> 00:56:35,680
computing all those

00:56:31,359 --> 00:56:38,319
stiffs and whatever it does i think

00:56:35,680 --> 00:56:40,160
it's sad that people don't move with the

00:56:38,319 --> 00:56:42,839
browsers and all the diffing

00:56:40,160 --> 00:56:44,079
and all the events they support by

00:56:42,839 --> 00:56:47,359
default

00:56:44,079 --> 00:56:50,960
that's the wrong approach for my

00:56:47,359 --> 00:56:54,559
from my point of view so

00:56:50,960 --> 00:56:57,680
going with these frameworks

00:56:54,559 --> 00:56:58,240
consider how different angular is from

00:56:57,680 --> 00:57:02,720
view

00:56:58,240 --> 00:57:05,119
and from react

00:57:02,720 --> 00:57:06,480
and like everyone solves the same

00:57:05,119 --> 00:57:08,720
problem in different ways

00:57:06,480 --> 00:57:09,839
instead of adopting an open standard

00:57:08,720 --> 00:57:12,000
that works for

00:57:09,839 --> 00:57:15,040
everyone and we wouldn't be so divided

00:57:12,000 --> 00:57:15,040
as a community

00:57:16,880 --> 00:57:21,280
yeah i think we can pass to the

00:57:19,570 --> 00:57:23,839
[Music]

00:57:21,280 --> 00:57:26,000
front-end frameworks that you you just

00:57:23,839 --> 00:57:29,680
touch them somehow with uh now with the

00:57:26,000 --> 00:57:32,720
with your uh picture comment

00:57:29,680 --> 00:57:34,960
uh how do you guys see the

00:57:32,720 --> 00:57:36,720
the war between the front end frameworks

00:57:34,960 --> 00:57:41,839
and what

00:57:36,720 --> 00:57:41,839
where do you see the winners in 2021

00:57:43,599 --> 00:57:48,240
i personally don't see a winner i think

00:57:45,839 --> 00:57:50,480
there is going to be a slow

00:57:48,240 --> 00:57:52,079
movement towards web components because

00:57:50,480 --> 00:57:53,520
all the big companies are doing it

00:57:52,079 --> 00:57:55,520
there's a nice

00:57:53,520 --> 00:57:58,079
talk about it with some of the people

00:57:55,520 --> 00:58:00,240
behind this and how they

00:57:58,079 --> 00:58:02,799
sort of went quiet a bit from the social

00:58:00,240 --> 00:58:05,440
media because of all the toxic

00:58:02,799 --> 00:58:07,200
fanboys like mentality and all the

00:58:05,440 --> 00:58:09,520
comments that they had

00:58:07,200 --> 00:58:11,520
i think salesforce is one of the biggest

00:58:09,520 --> 00:58:13,280
companies that implemented a lot of

00:58:11,520 --> 00:58:17,040
components

00:58:13,280 --> 00:58:19,200
using web components and

00:58:17,040 --> 00:58:20,480
there's just a lot of benefit there's

00:58:19,200 --> 00:58:23,040
going to be support

00:58:20,480 --> 00:58:23,760
soon for server side rendering these web

00:58:23,040 --> 00:58:27,040
components

00:58:23,760 --> 00:58:28,079
there is no way of declaring the shadow

00:58:27,040 --> 00:58:31,200
dome

00:58:28,079 --> 00:58:34,880
right now but it's coming anyway

00:58:31,200 --> 00:58:37,839
i think heading towards components is

00:58:34,880 --> 00:58:37,839
is the way to go

00:58:40,079 --> 00:58:45,760
so i'm using lead element i really like

00:58:43,040 --> 00:58:45,760
that framework

00:58:46,640 --> 00:58:52,240
can you post a link in the chat yes

00:58:49,680 --> 00:58:53,839
with uh with it so we can we can have a

00:58:52,240 --> 00:58:57,760
look on it

00:58:53,839 --> 00:58:59,200
um i can i can give my

00:58:57,760 --> 00:59:00,880
at least how i see the front end

00:58:59,200 --> 00:59:03,359
frameworks

00:59:00,880 --> 00:59:04,000
and as i i wrote one of the question

00:59:03,359 --> 00:59:06,640
that is

00:59:04,000 --> 00:59:08,640
angular dying at least in the context

00:59:06,640 --> 00:59:10,720
that i'm working and the colleagues and

00:59:08,640 --> 00:59:13,760
the people that i talked with

00:59:10,720 --> 00:59:16,839
i see uh view and direct

00:59:13,760 --> 00:59:18,640
as as the the winners and the main

00:59:16,839 --> 00:59:22,000
drivers at least

00:59:18,640 --> 00:59:24,400
probably in 2021 i

00:59:22,000 --> 00:59:25,920
rarely heard like any new projects

00:59:24,400 --> 00:59:29,599
starting with uh

00:59:25,920 --> 00:59:32,720
with angular for example or even

00:59:29,599 --> 00:59:33,680
the swelt that it was quite popular at

00:59:32,720 --> 00:59:36,559
the beginning of

00:59:33,680 --> 00:59:36,960
2020 like people were talking a lot

00:59:36,559 --> 00:59:40,640
about

00:59:36,960 --> 00:59:43,599
it what do you guys think our

00:59:40,640 --> 00:59:44,319
vaccination platform is angular from

00:59:43,599 --> 00:59:47,520
what i've seen

00:59:44,319 --> 00:59:52,799
in the dome

00:59:47,520 --> 00:59:57,359
so i i think i think uh if there is uh

00:59:52,799 --> 01:00:01,440
this will probably happen um

00:59:57,359 --> 01:00:03,920
in companies where um

01:00:01,440 --> 01:00:06,079
they have specific departments for a

01:00:03,920 --> 01:00:08,960
specific stack

01:00:06,079 --> 01:00:11,280
and where there's lots of.net you will

01:00:08,960 --> 01:00:13,920
find angular as well

01:00:11,280 --> 01:00:15,839
just because the ecosystem is like

01:00:13,920 --> 01:00:18,240
angular was the first

01:00:15,839 --> 01:00:19,440
framework that adopted typescript and

01:00:18,240 --> 01:00:22,640
typescript

01:00:19,440 --> 01:00:25,680
comes as a typing system

01:00:22,640 --> 01:00:31,359
based on c-sharp as

01:00:25,680 --> 01:00:34,319
microsoft developed so because of this

01:00:31,359 --> 01:00:35,839
the tooling and ids and all that we need

01:00:34,319 --> 01:00:39,599
in our daily lives

01:00:35,839 --> 01:00:45,040
i think is what influenced

01:00:39,599 --> 01:00:49,040
this and that's why i think we have

01:00:45,040 --> 01:00:50,720
dot-net people or dot-net on server and

01:00:49,040 --> 01:00:57,839
angular on the front

01:00:50,720 --> 01:00:57,839
projects these are actually very common

01:00:59,359 --> 01:01:03,040
well i i don't i don't think it it died

01:01:02,079 --> 01:01:05,440
or

01:01:03,040 --> 01:01:06,480
anything it's just i'm i'm not saying

01:01:05,440 --> 01:01:10,079
he's died but

01:01:06,480 --> 01:01:12,240
yeah i know i faded away because

01:01:10,079 --> 01:01:13,760
yeah it brings some some good benefits

01:01:12,240 --> 01:01:16,079
angular and not seeing it

01:01:13,760 --> 01:01:18,799
but i just you know at least in my

01:01:16,079 --> 01:01:22,160
context that's always curious how

01:01:18,799 --> 01:01:23,200
you guys see this this will probably

01:01:22,160 --> 01:01:26,000
vary a lot

01:01:23,200 --> 01:01:28,640
from company to company but even from

01:01:26,000 --> 01:01:32,480
country to country

01:01:28,640 --> 01:01:32,480
similarly you have

01:01:33,280 --> 01:01:38,880
you have specific php frameworks by

01:01:36,400 --> 01:01:42,240
country or specific

01:01:38,880 --> 01:01:46,799
goal flavors

01:01:42,240 --> 01:01:48,960
or python divided in countries as well

01:01:46,799 --> 01:01:50,000
depending on the project so companies

01:01:48,960 --> 01:01:53,599
will specialize on

01:01:50,000 --> 01:01:57,039
some things and not others because

01:01:53,599 --> 01:02:00,480
that's the that's the technical

01:01:57,039 --> 01:02:00,480
portfolio they've built up

01:02:00,960 --> 01:02:04,960
but a big factor i think it's also the

01:02:03,039 --> 01:02:06,960
fact that there's mostly outsourcing

01:02:04,960 --> 01:02:09,359
going on here so if you'd have your

01:02:06,960 --> 01:02:12,400
product you could choose something that

01:02:09,359 --> 01:02:14,799
fits your product but outsource

01:02:12,400 --> 01:02:16,160
basically have to just match what the

01:02:14,799 --> 01:02:19,440
client needs

01:02:16,160 --> 01:02:23,280
or what they tell you to use anyway

01:02:19,440 --> 01:02:25,200
i agree with you that angular and react

01:02:23,280 --> 01:02:28,240
and i think vue is coming up pretty

01:02:25,200 --> 01:02:28,240
strong these days

01:02:28,480 --> 01:02:32,640
they're really good to have in your tool

01:02:31,599 --> 01:02:34,720
belt

01:02:32,640 --> 01:02:37,680
i think it's easy to get a job if you

01:02:34,720 --> 01:02:37,680
know one of these

01:02:37,839 --> 01:02:43,280
but i wonder for how long this will last

01:02:45,599 --> 01:02:50,319
okay react react is pretty often in the

01:02:48,880 --> 01:02:53,680
news cycle i think

01:02:50,319 --> 01:02:56,480
so they will keep themselves up there

01:02:53,680 --> 01:02:58,079
for sure if they come with uh server

01:02:56,480 --> 01:02:59,920
components and the and if they keep

01:02:58,079 --> 01:03:03,039
coming with

01:02:59,920 --> 01:03:06,240
uh with new things uh and

01:03:03,039 --> 01:03:08,799
new approaches um

01:03:06,240 --> 01:03:09,520
if people are finding something that's

01:03:08,799 --> 01:03:12,640
novel

01:03:09,520 --> 01:03:15,039
and the setup is good and the perceived

01:03:12,640 --> 01:03:17,280
performance is good enough then they

01:03:15,039 --> 01:03:21,039
will adopt it

01:03:17,280 --> 01:03:24,960
i don't question this i just feel

01:03:21,039 --> 01:03:26,000
like react is doing a lot more than it

01:03:24,960 --> 01:03:29,760
should be

01:03:26,000 --> 01:03:32,720
okay on this lion like if you want some

01:03:29,760 --> 01:03:33,680
optimized code and you care about like i

01:03:32,720 --> 01:03:36,400
said the

01:03:33,680 --> 01:03:45,119
battery of your device and so on you

01:03:36,400 --> 01:03:48,319
might opt for something else

01:03:45,119 --> 01:03:51,359
cool thank you um i'm gonna

01:03:48,319 --> 01:03:54,000
go to the next question uh

01:03:51,359 --> 01:03:54,000
css

01:03:57,760 --> 01:04:02,960
is that the question yeah i just wrote

01:04:00,799 --> 01:04:06,000
front-end frameworks and css

01:04:02,960 --> 01:04:09,520
and i think if

01:04:06,000 --> 01:04:12,559
asked this question so

01:04:09,520 --> 01:04:17,480
anybody has to something to add this

01:04:12,559 --> 01:04:20,480
like what we're gonna use for css in

01:04:17,480 --> 01:04:20,480
01:04:22,720 --> 01:04:28,960
or do you guys see any trends there

01:04:26,559 --> 01:04:30,319
i thought like i haven't used it but i

01:04:28,960 --> 01:04:33,280
saw like tailwind is

01:04:30,319 --> 01:04:34,400
that uh like a framework uh for css or

01:04:33,280 --> 01:04:38,160
something i don't remember

01:04:34,400 --> 01:04:41,359
i haven't read about it it is that it

01:04:38,160 --> 01:04:44,480
it grew quite a lot

01:04:41,359 --> 01:04:47,200
yeah i could really like a really nice

01:04:44,480 --> 01:04:49,920
video with tailwind if you want

01:04:47,200 --> 01:04:52,839
but i'm not personally i'm not a big fan

01:04:49,920 --> 01:04:54,640
of it but i think it's really good for

01:04:52,839 --> 01:04:57,839
prototyping

01:04:54,640 --> 01:05:00,000
okay perfect so if you can

01:04:57,839 --> 01:05:02,640
write it in the comments it would be

01:05:00,000 --> 01:05:02,640
really helpful

01:05:04,160 --> 01:05:10,720
um at

01:05:07,440 --> 01:05:14,799
in in our project today

01:05:10,720 --> 01:05:20,640
we we parked ourselves

01:05:14,799 --> 01:05:20,640
uh on material ui

01:05:20,839 --> 01:05:24,640
and uh it's just

01:05:24,880 --> 01:05:27,440
too easy

01:05:28,400 --> 01:05:32,079
so we are we are not going to switch

01:05:30,880 --> 01:05:35,599
anytime soon

01:05:32,079 --> 01:05:36,799
i think so i'm in charge of an internal

01:05:35,599 --> 01:05:39,760
project

01:05:36,799 --> 01:05:40,799
as i'm sure happens everywhere in

01:05:39,760 --> 01:05:45,039
incluge

01:05:40,799 --> 01:05:47,440
at least um you get a bunch of

01:05:45,039 --> 01:05:48,160
newcomers and you give them an internal

01:05:47,440 --> 01:05:50,079
project where

01:05:48,160 --> 01:05:52,240
you can experiment with things one of

01:05:50,079 --> 01:05:55,119
these things was

01:05:52,240 --> 01:05:57,200
the material design guidelines so no

01:05:55,119 --> 01:05:58,799
framework just reading their specs and

01:05:57,200 --> 01:06:01,760
trying to implement

01:05:58,799 --> 01:06:03,119
some of the things described in there

01:06:01,760 --> 01:06:06,960
because there's a lot

01:06:03,119 --> 01:06:10,079
from accessibility from animation

01:06:06,960 --> 01:06:12,640
you know all the spacing fonts all

01:06:10,079 --> 01:06:14,319
all of it to be taken into account and

01:06:12,640 --> 01:06:18,000
how to

01:06:14,319 --> 01:06:21,280
think in terms of units atoms molecules

01:06:18,000 --> 01:06:22,640
interactions sheets elevation all of

01:06:21,280 --> 01:06:26,000
those things

01:06:22,640 --> 01:06:29,359
but i think this is the

01:06:26,000 --> 01:06:32,960
kind of effort you put when you

01:06:29,359 --> 01:06:36,000
care about the product and you own it

01:06:32,960 --> 01:06:37,680
and you have all the time you need

01:06:36,000 --> 01:06:39,440
other than that i think you're just

01:06:37,680 --> 01:06:42,799
gonna pick a framework or

01:06:39,440 --> 01:06:44,880
a convention like bem or

01:06:42,799 --> 01:06:46,720
whatever else is there and you're just

01:06:44,880 --> 01:06:50,000
gonna go with that

01:06:46,720 --> 01:06:51,200
i don't see people excited about css

01:06:50,000 --> 01:06:53,920
whenever

01:06:51,200 --> 01:06:54,960
we're holding interviews i think 90

01:06:53,920 --> 01:06:59,200
percent of them

01:06:54,960 --> 01:07:02,960
don't want to touch css for some reason

01:06:59,200 --> 01:07:05,760
and it's all about react nowadays

01:07:02,960 --> 01:07:08,079
and writing components but not the css

01:07:05,760 --> 01:07:08,079
for it

01:07:11,119 --> 01:07:18,799
okay thank you um the next question

01:07:14,720 --> 01:07:20,799
is web assembly and how

01:07:18,799 --> 01:07:23,839
is it going to affect us in the next

01:07:20,799 --> 01:07:23,839
five years

01:07:26,640 --> 01:07:34,799
i think that

01:07:29,760 --> 01:07:37,039
this is aimed at companies who have

01:07:34,799 --> 01:07:39,119
big products that they want to bring to

01:07:37,039 --> 01:07:42,960
the web

01:07:39,119 --> 01:07:44,480
or new devices that can be integrated

01:07:42,960 --> 01:07:46,480
with the web

01:07:44,480 --> 01:07:48,880
but other than that i don't see an

01:07:46,480 --> 01:07:57,839
overlap between what we do

01:07:48,880 --> 01:07:57,839
and the web assembly

01:07:57,920 --> 01:08:01,760
okay um anyone else

01:08:02,559 --> 01:08:09,359
maybe tooling could

01:08:05,839 --> 01:08:12,000
be based on it as

01:08:09,359 --> 01:08:14,880
the complexity grows and we try to

01:08:12,000 --> 01:08:18,000
integrate with lots of different

01:08:14,880 --> 01:08:20,719
um a lot

01:08:18,000 --> 01:08:20,719
lots of different

01:08:21,679 --> 01:08:26,080
tools that are not java or not in the

01:08:24,159 --> 01:08:29,520
javascript ecosystem

01:08:26,080 --> 01:08:33,759
and they are in for example i've seen

01:08:29,520 --> 01:08:37,520
i think this sas preprocessor

01:08:33,759 --> 01:08:40,400
has some webassembly in it when it

01:08:37,520 --> 01:08:41,920
downloads and after it after which it

01:08:40,400 --> 01:08:45,040
builds

01:08:41,920 --> 01:08:48,400
um so things like this

01:08:45,040 --> 01:08:52,960
uh which if you would run

01:08:48,400 --> 01:08:55,040
these tools in uh if you would interpret

01:08:52,960 --> 01:08:56,000
javascript code it would be a lot slower

01:08:55,040 --> 01:09:00,880
but

01:08:56,000 --> 01:09:00,880
when you actually um

01:09:01,759 --> 01:09:06,080
recompile them and make a very very

01:09:04,000 --> 01:09:10,640
optimized code then that

01:09:06,080 --> 01:09:14,319
that will speed up some of the um

01:09:10,640 --> 01:09:16,880
at least installing or at the initial

01:09:14,319 --> 01:09:18,080
bootstrapping or of whatever mechanism

01:09:16,880 --> 01:09:21,759
that you want but

01:09:18,080 --> 01:09:25,839
it's it's something that i i see

01:09:21,759 --> 01:09:33,920
rarely on so yeah

01:09:25,839 --> 01:09:35,759
not sure if it's very web specific

01:09:33,920 --> 01:09:39,040
unless you get a project where you

01:09:35,759 --> 01:09:39,040
have to write a game

01:09:39,759 --> 01:09:46,400
but even so yeah

01:09:43,279 --> 01:09:48,640
you have unity it's a very niche

01:09:46,400 --> 01:09:51,040
technology and i don't think it's for

01:09:48,640 --> 01:09:54,640
websites

01:09:51,040 --> 01:09:59,040
for complex apps like cad level or

01:09:54,640 --> 01:10:02,320
photoshop level even though they

01:09:59,040 --> 01:10:06,159
can't be done with proper

01:10:02,320 --> 01:10:09,199
js i guess most of it but

01:10:06,159 --> 01:10:13,120
heavy computations and

01:10:09,199 --> 01:10:15,280
stuff that we really don't ever touch as

01:10:13,120 --> 01:10:16,159
in our day-to-day lives i i don't think

01:10:15,280 --> 01:10:18,880
it's for web

01:10:16,159 --> 01:10:18,880
developers

01:10:20,880 --> 01:10:27,360
thank you so i think we can move to the

01:10:23,600 --> 01:10:27,360
next topic which was the

01:10:27,920 --> 01:10:34,800
typescript if it's a norm and

01:10:31,040 --> 01:10:38,560
if i know any project started in 2021

01:10:34,800 --> 01:10:38,560
should start with typescript

01:10:39,520 --> 01:10:44,400
what do you guys think everything should

01:10:42,480 --> 01:10:47,440
have types i

01:10:44,400 --> 01:10:49,840
would make it mandatory i think is

01:10:47,440 --> 01:10:51,760
if the project is small enough go with

01:10:49,840 --> 01:10:54,960
javascript

01:10:51,760 --> 01:10:57,280
typescript just slows you down

01:10:54,960 --> 01:11:00,000
and i'm i'm interested why would you

01:10:57,280 --> 01:11:03,679
make it mandatory

01:11:00,000 --> 01:11:03,679
what's the reasoning behind

01:11:09,600 --> 01:11:16,880
i'm curious too

01:11:13,679 --> 01:11:18,159
sorry why would you make typescript

01:11:16,880 --> 01:11:21,280
mandatory

01:11:18,159 --> 01:11:24,080
oh um i think

01:11:21,280 --> 01:11:25,040
it just offers a safety that doesn't

01:11:24,080 --> 01:11:28,640
come

01:11:25,040 --> 01:11:30,800
with uh with javascript

01:11:28,640 --> 01:11:32,960
sure that's on paper but have you

01:11:30,800 --> 01:11:38,080
encountered those problems it

01:11:32,960 --> 01:11:41,520
solves yeah for sure i haven't for sure

01:11:38,080 --> 01:11:44,880
i mean not personally uh in

01:11:41,520 --> 01:11:47,440
what i've coded um

01:11:44,880 --> 01:11:47,440
because

01:11:48,239 --> 01:11:54,400
we write tests as well and

01:11:51,360 --> 01:11:58,560
so that that kind of solves uh

01:11:54,400 --> 01:12:03,679
solves it but uh i've been

01:11:58,560 --> 01:12:08,320
in i've been involved in the effort of

01:12:03,679 --> 01:12:11,280
of training

01:12:08,320 --> 01:12:13,600
uh front-end developers even though i

01:12:11,280 --> 01:12:17,920
was not a front-end developer

01:12:13,600 --> 01:12:23,840
and that was hard

01:12:17,920 --> 01:12:23,840
because basically i had to convert

01:12:24,000 --> 01:12:27,840
teams that have been doing only styling

01:12:26,320 --> 01:12:31,840
until then

01:12:27,840 --> 01:12:36,000
to start working on products

01:12:31,840 --> 01:12:39,520
and it was it was a very painful journey

01:12:36,000 --> 01:12:44,480
and in

01:12:39,520 --> 01:12:49,440
judging on that experience alone

01:12:44,480 --> 01:12:51,840
um writing javascript

01:12:49,440 --> 01:12:52,719
right switching from javascript to

01:12:51,840 --> 01:12:57,280
typescript

01:12:52,719 --> 01:12:57,280
actually reduced

01:12:57,360 --> 01:13:05,840
time spent on bugs reduced the

01:13:01,199 --> 01:13:05,840
number of bugs because

01:13:06,320 --> 01:13:10,480
and i'm this is because i've been

01:13:08,880 --> 01:13:14,239
working with

01:13:10,480 --> 01:13:18,000
juniors or mid-level

01:13:14,239 --> 01:13:21,920
colleagues um

01:13:18,000 --> 01:13:26,400
it was still some that every dom

01:13:21,920 --> 01:13:29,360
every dumb mistake was eliminated

01:13:26,400 --> 01:13:32,239
and that just that is a big that is a

01:13:29,360 --> 01:13:35,440
big plus

01:13:32,239 --> 01:13:37,440
and when it i mean we

01:13:35,440 --> 01:13:39,600
in the in the meantime we've switched to

01:13:37,440 --> 01:13:42,640
functional programming but

01:13:39,600 --> 01:13:46,080
when i tried to introduce uh

01:13:42,640 --> 01:13:49,600
object-oriented programming and

01:13:46,080 --> 01:13:52,960
some elements maybe of a

01:13:49,600 --> 01:13:55,520
rich class design rich object design and

01:13:52,960 --> 01:13:57,920
stuff like this that eventually would

01:13:55,520 --> 01:14:03,199
lead to

01:13:57,920 --> 01:14:03,199
ddd and domain driven stuff

01:14:05,760 --> 01:14:13,440
when you don't have to write tests

01:14:09,360 --> 01:14:16,159
that very verify the

01:14:13,440 --> 01:14:17,600
return type of something that's a big

01:14:16,159 --> 01:14:19,840
help already

01:14:17,600 --> 01:14:21,040
i understand i understand there are

01:14:19,840 --> 01:14:24,239
there are

01:14:21,040 --> 01:14:27,440
lots of stuff i it's just safety and

01:14:24,239 --> 01:14:30,960
it's very convenient as well

01:14:27,440 --> 01:14:33,920
well my experience is the exact opposite

01:14:30,960 --> 01:14:35,679
i think it slows you down a lot and it

01:14:33,920 --> 01:14:39,120
doesn't allow you to

01:14:35,679 --> 01:14:40,000
iterate i agree you should write that if

01:14:39,120 --> 01:14:44,239
you start

01:14:40,000 --> 01:14:44,239
and finish a polished

01:14:44,480 --> 01:14:50,880
product yeah why not but if you

01:14:48,560 --> 01:14:52,080
throw ideas you show the client they

01:14:50,880 --> 01:14:55,440
change their mind you

01:14:52,080 --> 01:14:57,760
change your code i think that most of

01:14:55,440 --> 01:15:01,440
the product development time

01:14:57,760 --> 01:15:04,719
at least that i'm doing is

01:15:01,440 --> 01:15:06,080
putting ideas into code showing them to

01:15:04,719 --> 01:15:09,600
the client

01:15:06,080 --> 01:15:11,600
they decide if they like it or not we

01:15:09,600 --> 01:15:13,600
redo everything of course there's gonna

01:15:11,600 --> 01:15:16,640
be bugs but the bugs

01:15:13,600 --> 01:15:20,880
are related to the business logic

01:15:16,640 --> 01:15:24,080
or are unhandled edge cases or

01:15:20,880 --> 01:15:25,360
some errors not the types not anything

01:15:24,080 --> 01:15:28,159
that the typescript

01:15:25,360 --> 01:15:29,679
could solve and it slows us down if we

01:15:28,159 --> 01:15:32,960
have to define all the

01:15:29,679 --> 01:15:34,719
types and interfaces what i end up doing

01:15:32,960 --> 01:15:36,640
is just

01:15:34,719 --> 01:15:38,159
playing around with the code throwing it

01:15:36,640 --> 01:15:41,520
in the face you know

01:15:38,159 --> 01:15:41,920
at the client they see it we iterate and

01:15:41,520 --> 01:15:45,120
we

01:15:41,920 --> 01:15:47,520
we move forward all the back end

01:15:45,120 --> 01:15:49,280
or all all the interactions are very

01:15:47,520 --> 01:15:52,000
well documented it's really

01:15:49,280 --> 01:15:53,440
and we have good naming conventions i

01:15:52,000 --> 01:15:55,920
think it's really hard

01:15:53,440 --> 01:15:57,360
you have to do it intentionally to to

01:15:55,920 --> 01:16:00,560
have mistakes in there or

01:15:57,360 --> 01:16:01,120
you know maybe a search and replace gone

01:16:00,560 --> 01:16:04,080
wrong

01:16:01,120 --> 01:16:05,199
but those are not the issues mostly it's

01:16:04,080 --> 01:16:09,040
race conditions

01:16:05,199 --> 01:16:12,239
or business logic that yeah

01:16:09,040 --> 01:16:13,600
i think it also i think it also helps in

01:16:12,239 --> 01:16:17,120
business logic a lot

01:16:13,600 --> 01:16:20,320
um if you if you

01:16:17,120 --> 01:16:25,199
um if you are

01:16:20,320 --> 01:16:28,080
try to stick to the notion of

01:16:25,199 --> 01:16:29,840
having your code reflect the business

01:16:28,080 --> 01:16:32,239
requirements

01:16:29,840 --> 01:16:33,600
uh at least when it comes to the types

01:16:32,239 --> 01:16:37,679
and

01:16:33,600 --> 01:16:37,679
the interaction between these types

01:16:38,719 --> 01:16:47,040
i think it's helpful

01:16:42,400 --> 01:16:49,840
if you have some some business entities

01:16:47,040 --> 01:16:53,040
that you and some interactions between

01:16:49,840 --> 01:16:53,040
them that you have to model

01:16:53,760 --> 01:17:00,960
if those happen in the front end then

01:16:57,600 --> 01:17:04,239
it's pretty good to have typescript

01:17:00,960 --> 01:17:06,800
and have types have the types describe

01:17:04,239 --> 01:17:07,760
what the actual business is there it's

01:17:06,800 --> 01:17:11,120
it adds a bit

01:17:07,760 --> 01:17:13,840
to the readability in my opinion um

01:17:11,120 --> 01:17:15,600
but it shouldn't slow you i'm not sure

01:17:13,840 --> 01:17:18,159
how it slows down

01:17:15,600 --> 01:17:20,000
i mean if you don't want to fix typing

01:17:18,159 --> 01:17:23,600
issues you can just put any

01:17:20,000 --> 01:17:24,960
and you solve the issue what's the point

01:17:23,600 --> 01:17:28,560
of using it then

01:17:24,960 --> 01:17:31,920
no the point is then you can if you want

01:17:28,560 --> 01:17:34,239
uh if you want a period in your project

01:17:31,920 --> 01:17:36,560
where you want

01:17:34,239 --> 01:17:37,679
more frequent iterations then you can

01:17:36,560 --> 01:17:41,040
have that

01:17:37,679 --> 01:17:41,840
and then over time build the type system

01:17:41,040 --> 01:17:45,199
in

01:17:41,840 --> 01:17:46,320
to solidify well i've been using graphql

01:17:45,199 --> 01:17:48,800
and graphql

01:17:46,320 --> 01:17:50,880
graphql has the schema which validates

01:17:48,800 --> 01:17:54,239
all of our

01:17:50,880 --> 01:17:57,600
business related models and okay

01:17:54,239 --> 01:17:58,159
that works really well i i'm actually

01:17:57,600 --> 01:18:00,080
gonna

01:17:58,159 --> 01:18:01,440
in in terms of opinion i'm gonna play

01:18:00,080 --> 01:18:04,560
the the middle guy

01:18:01,440 --> 01:18:07,520
between between you guys so

01:18:04,560 --> 01:18:08,800
and and this is my take on typescript

01:18:07,520 --> 01:18:11,600
first of all

01:18:08,800 --> 01:18:12,640
i'm actually not a big fan of it i i

01:18:11,600 --> 01:18:14,880
don't use it

01:18:12,640 --> 01:18:16,159
so that full full disclosure i don't use

01:18:14,880 --> 01:18:19,040
it and i have

01:18:16,159 --> 01:18:21,199
what i believe are reasons for that but

01:18:19,040 --> 01:18:24,800
one thing i grant typescript with

01:18:21,199 --> 01:18:26,000
is the ability of it as a technology as

01:18:24,800 --> 01:18:29,520
a superset of

01:18:26,000 --> 01:18:31,280
types around javascript of acting as a

01:18:29,520 --> 01:18:34,159
level playing

01:18:31,280 --> 01:18:36,320
equalizer between various seniority

01:18:34,159 --> 01:18:39,440
levels within the team

01:18:36,320 --> 01:18:42,800
right so i believe it's decently

01:18:39,440 --> 01:18:45,760
um good to use something like this

01:18:42,800 --> 01:18:47,600
whenever you have a big team where the

01:18:45,760 --> 01:18:49,600
level of seniority is

01:18:47,600 --> 01:18:52,159
quite mixed like you have very junior

01:18:49,600 --> 01:18:55,040
people but you also have advanced people

01:18:52,159 --> 01:18:56,880
with the higher level of seniority and

01:18:55,040 --> 01:18:59,040
they all work on the same code base and

01:18:56,880 --> 01:19:02,159
there needs to be some sort of a

01:18:59,040 --> 01:19:04,640
um of a you know like a a

01:19:02,159 --> 01:19:06,560
checking system that allows for the code

01:19:04,640 --> 01:19:09,760
to be

01:19:06,560 --> 01:19:12,159
decent maintainable easily understood

01:19:09,760 --> 01:19:14,400
you know and that can kind of like prune

01:19:12,159 --> 01:19:16,000
away all of the inconsistencies that may

01:19:14,400 --> 01:19:19,199
arise especially

01:19:16,000 --> 01:19:21,760
from coding at lower levels of seniority

01:19:19,199 --> 01:19:24,000
now that being said i believe that a lot

01:19:21,760 --> 01:19:24,320
of things can be covered a lot of things

01:19:24,000 --> 01:19:27,040
that

01:19:24,320 --> 01:19:27,840
typescript offers in terms of these

01:19:27,040 --> 01:19:29,920
checks

01:19:27,840 --> 01:19:31,760
a lot of that safety net let's call it

01:19:29,920 --> 01:19:32,080
like that a lot of that safety net can

01:19:31,760 --> 01:19:34,560
be

01:19:32,080 --> 01:19:36,239
covered by doing other things that

01:19:34,560 --> 01:19:39,040
actually should be done anyway

01:19:36,239 --> 01:19:39,760
in a decent project like you do unit

01:19:39,040 --> 01:19:41,679
tests

01:19:39,760 --> 01:19:44,480
you have linting and you have a couple

01:19:41,679 --> 01:19:47,120
of checks in terms of static type

01:19:44,480 --> 01:19:48,239
aesthetic type checking of your code

01:19:47,120 --> 01:19:50,400
when you when you're

01:19:48,239 --> 01:19:51,360
actually coding or pushing to a branch

01:19:50,400 --> 01:19:53,280
or whatever

01:19:51,360 --> 01:19:55,120
so you should have those tools uh

01:19:53,280 --> 01:19:55,840
enabled on your clients are like yes

01:19:55,120 --> 01:19:59,520
lent or

01:19:55,840 --> 01:20:02,000
or i don't know um and and

01:19:59,520 --> 01:20:03,280
another thing is a function of knowledge

01:20:02,000 --> 01:20:06,480
so what i'm saying is

01:20:03,280 --> 01:20:07,440
i've rarely seen people who have a

01:20:06,480 --> 01:20:10,000
decent

01:20:07,440 --> 01:20:11,920
knowledge of javascript jumping into the

01:20:10,000 --> 01:20:14,719
typescript bandwagon

01:20:11,920 --> 01:20:16,239
because they just know enough that they

01:20:14,719 --> 01:20:18,480
they know enough that they also

01:20:16,239 --> 01:20:19,600
know the inconsistencies and possible

01:20:18,480 --> 01:20:21,600
dangers of

01:20:19,600 --> 01:20:23,040
coding in javascript and they know how

01:20:21,600 --> 01:20:25,679
to avoid that

01:20:23,040 --> 01:20:26,239
right so i personally haven't used i i

01:20:25,679 --> 01:20:29,120
mean i

01:20:26,239 --> 01:20:29,920
i use typescript up to a certain degree

01:20:29,120 --> 01:20:33,040
but

01:20:29,920 --> 01:20:36,400
after a certain point i think if your

01:20:33,040 --> 01:20:39,920
team has a decent level of seniority

01:20:36,400 --> 01:20:42,239
i believe the over

01:20:39,920 --> 01:20:43,120
the cost of adding this new technology

01:20:42,239 --> 01:20:45,040
and learning it

01:20:43,120 --> 01:20:46,800
and maintaining it and writing types and

01:20:45,040 --> 01:20:49,840
interfaces and make sure that

01:20:46,800 --> 01:20:52,400
everything is decently on track and and

01:20:49,840 --> 01:20:54,320
maintained and that just not putting any

01:20:52,400 --> 01:20:56,400
everywhere because then you're just

01:20:54,320 --> 01:20:58,639
using it for nothing

01:20:56,400 --> 01:21:00,080
i believe that that cost depending on

01:20:58,639 --> 01:21:01,679
the team composition

01:21:00,080 --> 01:21:03,440
and what you have to do and whether or

01:21:01,679 --> 01:21:05,280
not it's a you know it's a

01:21:03,440 --> 01:21:06,719
project that you just want to prototype

01:21:05,280 --> 01:21:08,320
or it's something that's going to grow

01:21:06,719 --> 01:21:10,800
into this giant over

01:21:08,320 --> 01:21:12,639
three years that we have to maintain and

01:21:10,800 --> 01:21:14,560
looking at all of these factors i think

01:21:12,639 --> 01:21:17,040
there are some use cases where you could

01:21:14,560 --> 01:21:18,159
jump into the typescript bandwagon and

01:21:17,040 --> 01:21:20,639
and some of them

01:21:18,159 --> 01:21:22,000
where you don't but i personally haven't

01:21:20,639 --> 01:21:24,960
used it

01:21:22,000 --> 01:21:25,920
consistently since it it appeared i

01:21:24,960 --> 01:21:27,840
played with it i

01:21:25,920 --> 01:21:30,400
i know the things that typescript does

01:21:27,840 --> 01:21:32,880
but i choose not to use it

01:21:30,400 --> 01:21:33,760
because i think that i can get by faster

01:21:32,880 --> 01:21:36,560
just by knowing

01:21:33,760 --> 01:21:36,560
the things that i know

01:21:39,360 --> 01:21:45,920
okay i think oh

01:21:43,360 --> 01:21:47,440
i have uh one more question about this

01:21:45,920 --> 01:21:49,920
topic with typescript

01:21:47,440 --> 01:21:52,800
i'm curious how you guys see for example

01:21:49,920 --> 01:21:56,400
an internship starting directly with

01:21:52,800 --> 01:21:59,360
typescript or with javascript

01:21:56,400 --> 01:22:01,199
because i think at least how i see it

01:21:59,360 --> 01:22:03,520
from the exterior i think

01:22:01,199 --> 01:22:04,719
if somebody's in the the beginning and

01:22:03,520 --> 01:22:08,080
they start

01:22:04,719 --> 01:22:11,120
learning it's easier to to learn with

01:22:08,080 --> 01:22:12,639
to learn javascript that typescript i

01:22:11,120 --> 01:22:14,320
think it's it's a little bit more

01:22:12,639 --> 01:22:17,520
confusing

01:22:14,320 --> 01:22:19,360
it could be uh depends on

01:22:17,520 --> 01:22:22,239
the actual pool of candidates that you

01:22:19,360 --> 01:22:25,840
have um

01:22:22,239 --> 01:22:28,880
right now i mean right now nowadays

01:22:25,840 --> 01:22:32,560
or maybe even from

01:22:28,880 --> 01:22:37,600
forever especially the web part i was

01:22:32,560 --> 01:22:40,480
very very permissive uh in terms of

01:22:37,600 --> 01:22:42,000
what's the actual computer science

01:22:40,480 --> 01:22:45,040
background

01:22:42,000 --> 01:22:48,880
uh lots of these technologies are

01:22:45,040 --> 01:22:50,159
very very easy to get into so you have

01:22:48,880 --> 01:22:54,560
lots of self-taught

01:22:50,159 --> 01:22:57,679
people who just don't have the cs

01:22:54,560 --> 01:22:58,000
major background but if you have a pool

01:22:57,679 --> 01:23:01,120
that

01:22:58,000 --> 01:23:03,760
do then that pool of people

01:23:01,120 --> 01:23:05,280
at some point learned about typing

01:23:03,760 --> 01:23:07,920
systems

01:23:05,280 --> 01:23:09,280
and learned about uh risk of

01:23:07,920 --> 01:23:12,320
substitution

01:23:09,280 --> 01:23:15,520
contravariance covariance

01:23:12,320 --> 01:23:18,800
things like that even even even if they

01:23:15,520 --> 01:23:22,639
maybe forgot or they weren't at

01:23:18,800 --> 01:23:27,840
that particular course uh that semester

01:23:22,639 --> 01:23:31,199
the they should at least

01:23:27,840 --> 01:23:34,880
be aware of the terms uh and

01:23:31,199 --> 01:23:37,280
i think in that case types

01:23:34,880 --> 01:23:38,239
starting up with typescript would have

01:23:37,280 --> 01:23:41,760
no overhead

01:23:38,239 --> 01:23:43,840
at all but if you have people who

01:23:41,760 --> 01:23:45,920
say that okay i've done some websites

01:23:43,840 --> 01:23:49,199
and i've done some html and

01:23:45,920 --> 01:23:52,800
i have a react project and i've in

01:23:49,199 --> 01:23:57,520
did a to-do app with the server

01:23:52,800 --> 01:24:01,360
on some i don't know aws or something

01:23:57,520 --> 01:24:03,760
then maybe as javascript would be

01:24:01,360 --> 01:24:04,880
but i i would gradually roll them into

01:24:03,760 --> 01:24:07,440
it so

01:24:04,880 --> 01:24:08,880
even if you don't have to know generics

01:24:07,440 --> 01:24:13,040
you don't have to know you it

01:24:08,880 --> 01:24:16,159
it's it's simple enough to say okay

01:24:13,040 --> 01:24:19,600
just make sure this is an object

01:24:16,159 --> 01:24:22,159
this has these properties even if you

01:24:19,600 --> 01:24:23,360
um they don't have to know the setup of

01:24:22,159 --> 01:24:25,760
it

01:24:23,360 --> 01:24:28,560
they just have to know that and the ids

01:24:25,760 --> 01:24:31,199
help a lot so

01:24:28,560 --> 01:24:31,840
well i understand the point of being

01:24:31,199 --> 01:24:34,239
confusing

01:24:31,840 --> 01:24:34,239
for sure

01:24:35,199 --> 01:24:41,920
okay thank you uh we passed uh

01:24:38,880 --> 01:24:44,480
our time by five minutes uh we can

01:24:41,920 --> 01:24:46,480
if you guys want we can continue and try

01:24:44,480 --> 01:24:48,000
to stay just couple of minutes to the

01:24:46,480 --> 01:24:51,199
topics that

01:24:48,000 --> 01:24:54,080
that we have or we can close it here

01:24:51,199 --> 01:24:54,080
what do you guys think

01:24:56,880 --> 01:24:58,960
i

01:25:04,159 --> 01:25:10,880
okay so um we talked about typescript uh

01:25:09,080 --> 01:25:13,440
[Music]

01:25:10,880 --> 01:25:14,679
let's talk a bit about the build tools

01:25:13,440 --> 01:25:17,679
in

01:25:14,679 --> 01:25:17,679
01:25:18,880 --> 01:25:23,840
anybody has any opinions on this or what

01:25:21,120 --> 01:25:23,840
do you guys use

01:25:24,800 --> 01:25:28,080
do you guys use roll up

01:25:29,280 --> 01:25:31,520
no

01:25:32,719 --> 01:25:37,440
because that is like the hot thing

01:25:34,880 --> 01:25:37,440
nowadays

01:25:38,239 --> 01:25:42,800
it has basically the same same feature

01:25:41,760 --> 01:25:45,520
set as webpack

01:25:42,800 --> 01:25:46,480
from what i've read but i haven't seen

01:25:45,520 --> 01:25:50,800
anyone

01:25:46,480 --> 01:25:50,800
actually switching

01:25:51,440 --> 01:25:56,639
took me ages to learn pack and

01:25:54,719 --> 01:25:58,639
i need a reason to switch to something

01:25:56,639 --> 01:26:01,440
else i totally

01:25:58,639 --> 01:26:02,480
understand right the the reason and and

01:26:01,440 --> 01:26:06,719
this is something

01:26:02,480 --> 01:26:09,120
that i'm so i'm pointing now to the fts

01:26:06,719 --> 01:26:10,960
you know results from 2020 and i think

01:26:09,120 --> 01:26:13,120
that's a decent metric considering it's

01:26:10,960 --> 01:26:14,480
a global survey and it touches on so

01:26:13,120 --> 01:26:18,639
many countries

01:26:14,480 --> 01:26:20,639
and a lot of people respond um

01:26:18,639 --> 01:26:22,880
there's an interesting trend there in

01:26:20,639 --> 01:26:24,960
the sense that webpack seems to lose

01:26:22,880 --> 01:26:27,520
a little bit of the popularity because

01:26:24,960 --> 01:26:30,480
of the proliferation of other tools

01:26:27,520 --> 01:26:31,280
rola being one of them but not at this

01:26:30,480 --> 01:26:35,120
point not that

01:26:31,280 --> 01:26:37,360
popular which abstract away

01:26:35,120 --> 01:26:38,800
even more of the configuration work that

01:26:37,360 --> 01:26:41,760
you need to do

01:26:38,800 --> 01:26:43,120
because that's something that kind of

01:26:41,760 --> 01:26:46,639
like hinders people

01:26:43,120 --> 01:26:49,040
like okay webpack is is

01:26:46,639 --> 01:26:51,120
used in a lot of places but it's so

01:26:49,040 --> 01:26:53,199
convoluted in terms of the configuration

01:26:51,120 --> 01:26:54,719
and all of these options that you have

01:26:53,199 --> 01:26:56,480
and you have to specify and you have to

01:26:54,719 --> 01:26:57,280
configure in a certain way in order for

01:26:56,480 --> 01:27:00,800
it to do

01:26:57,280 --> 01:27:04,239
whatever you wanted to do um

01:27:00,800 --> 01:27:07,280
so i think there's a trend

01:27:04,239 --> 01:27:10,960
in the sense that people are gonna look

01:27:07,280 --> 01:27:14,239
for ways that they can put in as

01:27:10,960 --> 01:27:17,600
less brain power as they need to

01:27:14,239 --> 01:27:19,280
to achieve decently similar results

01:27:17,600 --> 01:27:21,040
and tools that are going to abstract

01:27:19,280 --> 01:27:23,040
away the configuration like

01:27:21,040 --> 01:27:24,400
rola being one of them or es build or

01:27:23,040 --> 01:27:28,639
snowpack which are

01:27:24,400 --> 01:27:31,280
quite recent entries in the 2020 survey

01:27:28,639 --> 01:27:32,960
they're gonna or parcel for example

01:27:31,280 --> 01:27:35,679
they're they're gonna

01:27:32,960 --> 01:27:36,400
be there to kind of like support this

01:27:35,679 --> 01:27:39,600
this trend

01:27:36,400 --> 01:27:43,440
that's that's my thought on it

01:27:39,600 --> 01:27:46,480
i also think that the frameworks

01:27:43,440 --> 01:27:49,600
uh are helping on this side to be honest

01:27:46,480 --> 01:27:50,400
a few years back i was like oh webpack i

01:27:49,600 --> 01:27:54,080
could do that

01:27:50,400 --> 01:27:56,960
i would do the uh set up for react

01:27:54,080 --> 01:27:57,520
and i would do a lot of twitching there

01:27:56,960 --> 01:28:00,000
and i

01:27:57,520 --> 01:28:01,600
i was like looking at people oh you

01:28:00,000 --> 01:28:04,639
start with react

01:28:01,600 --> 01:28:05,280
with start react create app oh i was

01:28:04,639 --> 01:28:07,199
like no

01:28:05,280 --> 01:28:08,800
no you have to have your own webpack but

01:28:07,199 --> 01:28:12,400
now to be honest

01:28:08,800 --> 01:28:14,560
i don't even care about webpack

01:28:12,400 --> 01:28:16,159
i just want my project to start and to

01:28:14,560 --> 01:28:17,520
work if there are any

01:28:16,159 --> 01:28:19,360
issues that i want to do i'm going to

01:28:17,520 --> 01:28:22,239
dig in but for the as

01:28:19,360 --> 01:28:23,120
vlad said i want it to be as easy as

01:28:22,239 --> 01:28:26,560
possible

01:28:23,120 --> 01:28:27,600
and to if a few years back for example

01:28:26,560 --> 01:28:30,159
at the interview

01:28:27,600 --> 01:28:32,000
i would ask people if they know roll up

01:28:30,159 --> 01:28:34,560
webpack or anything else

01:28:32,000 --> 01:28:35,920
i would do it but now it's not even on

01:28:34,560 --> 01:28:37,920
my radar

01:28:35,920 --> 01:28:39,199
i think these things should be us

01:28:37,920 --> 01:28:42,639
abstracted for us

01:28:39,199 --> 01:28:45,520
and use the brain power like blood said

01:28:42,639 --> 01:28:48,400
to do something else that is that's

01:28:45,520 --> 01:28:51,600
that's my feeling

01:28:48,400 --> 01:28:53,840
i agree but i i remember how scary it

01:28:51,600 --> 01:28:56,320
was when we first used

01:28:53,840 --> 01:28:58,800
react scripts or whatever they were

01:28:56,320 --> 01:29:00,960
called and we had no idea what to do

01:28:58,800 --> 01:29:03,199
and how confusing it all seemed and how

01:29:00,960 --> 01:29:06,080
to add something new to it

01:29:03,199 --> 01:29:07,040
anyway for me as well the the entire

01:29:06,080 --> 01:29:09,440
build tools

01:29:07,040 --> 01:29:10,239
fell under the radar don't care about

01:29:09,440 --> 01:29:13,360
them

01:29:10,239 --> 01:29:15,040
mostly because browsers now nowadays do

01:29:13,360 --> 01:29:18,960
most of the things that you needed

01:29:15,040 --> 01:29:21,120
polyfills for or other hacks

01:29:18,960 --> 01:29:22,239
but there's like i don't know how many

01:29:21,120 --> 01:29:25,280
of you work with

01:29:22,239 --> 01:29:27,040
mono repos and and like more complex

01:29:25,280 --> 01:29:29,280
projects i think that's

01:29:27,040 --> 01:29:30,800
the only time where i do care about the

01:29:29,280 --> 01:29:34,800
build tools for sure

01:29:30,800 --> 01:29:38,000
for sure and having um

01:29:34,800 --> 01:29:41,360
and when it comes to a team

01:29:38,000 --> 01:29:43,840
managing their own uh

01:29:41,360 --> 01:29:45,280
ci pipelines for example then there it

01:29:43,840 --> 01:29:48,239
counts as well

01:29:45,280 --> 01:29:50,159
because you have to optimize those and

01:29:48,239 --> 01:29:53,360
some and

01:29:50,159 --> 01:29:54,880
when you want to have the test coverage

01:29:53,360 --> 01:29:58,960
and things like this

01:29:54,880 --> 01:30:02,560
so this this is not the

01:29:58,960 --> 01:30:05,440
the the cases in which

01:30:02,560 --> 01:30:06,080
we need in-depth web technology or even

01:30:05,440 --> 01:30:10,000
custom

01:30:06,080 --> 01:30:13,040
builds custom configurations are

01:30:10,000 --> 01:30:16,800
not for business reasons

01:30:13,040 --> 01:30:19,600
our mo these are mostly for our sanity

01:30:16,800 --> 01:30:21,280
when it comes to ci's when it comes to

01:30:19,600 --> 01:30:24,639
reporting when it comes to

01:30:21,280 --> 01:30:28,080
things that are actually that maybe

01:30:24,639 --> 01:30:31,280
the team leader or the architect is

01:30:28,080 --> 01:30:34,719
supposed to deliver

01:30:31,280 --> 01:30:38,159
to stakeholders and

01:30:34,719 --> 01:30:41,840
but the rest arrest is mostly just

01:30:38,159 --> 01:30:42,639
optimization of local enviro local dev

01:30:41,840 --> 01:30:49,840
environments

01:30:42,639 --> 01:30:49,840
and fast pipelines

01:30:50,880 --> 01:30:54,320
cool so um

01:30:54,400 --> 01:31:00,840
i think we can go to the next topic

01:30:57,920 --> 01:31:04,560
which is testing frameworks what do we

01:31:00,840 --> 01:31:08,400
use what are we missing

01:31:04,560 --> 01:31:08,400
anything on on those lines

01:31:11,120 --> 01:31:17,840
cyprus is great

01:31:18,639 --> 01:31:23,199
well more at least for uh for automation

01:31:21,760 --> 01:31:26,320
tests my colleagues

01:31:23,199 --> 01:31:27,840
use test cafe and they're quite happy

01:31:26,320 --> 01:31:31,600
with it

01:31:27,840 --> 01:31:34,880
we use it uh we use it for the

01:31:31,600 --> 01:31:37,600
you know for the past three years or so

01:31:34,880 --> 01:31:38,880
at least maybe even more and everything

01:31:37,600 --> 01:31:41,590
goes well

01:31:38,880 --> 01:31:42,800
um the

01:31:41,590 --> 01:31:46,239
[Music]

01:31:42,800 --> 01:31:49,440
for the like unit testing my

01:31:46,239 --> 01:31:51,679
at least my default stuff is uh is just

01:31:49,440 --> 01:31:52,880
i go to jest and then see what other

01:31:51,679 --> 01:31:56,840
tools

01:31:52,880 --> 01:31:59,040
i need on a site for for what i need to

01:31:56,840 --> 01:32:02,400
tell

01:31:59,040 --> 01:32:05,520
we sometimes combine with xenon

01:32:02,400 --> 01:32:08,719
if we need some more complicated

01:32:05,520 --> 01:32:08,719
mocking and stubbing

01:32:09,280 --> 01:32:15,199
but usually there are plugins

01:32:12,560 --> 01:32:17,360
enough plugins for just and enough

01:32:15,199 --> 01:32:27,840
plugins for cypress to help us

01:32:17,360 --> 01:32:27,840
go along

01:32:29,840 --> 01:32:35,199
and probably the main question is who's

01:32:32,560 --> 01:32:37,840
doing tests

01:32:35,199 --> 01:32:39,600
i mean at least we're doing i can say

01:32:37,840 --> 01:32:42,320
we're doing some tests but not

01:32:39,600 --> 01:32:44,000
not as much as we need well at least

01:32:42,320 --> 01:32:47,760
we're at the beginning of the project

01:32:44,000 --> 01:32:51,199
and things move

01:32:47,760 --> 01:32:53,120
so fast that

01:32:51,199 --> 01:32:55,360
so what i implemented today i might

01:32:53,120 --> 01:32:58,080
scratch you tomorrow so

01:32:55,360 --> 01:32:59,760
uh when we get a bit more stable on the

01:32:58,080 --> 01:33:01,920
project at least we're gonna start

01:32:59,760 --> 01:33:04,080
adding more tests we just created a few

01:33:01,920 --> 01:33:06,080
tests for example for react

01:33:04,080 --> 01:33:08,239
for the stable components that we know

01:33:06,080 --> 01:33:12,000
we're gonna have for a while

01:33:08,239 --> 01:33:14,960
and on the back-end side i just used

01:33:12,000 --> 01:33:16,719
a couple of tests uh unit tests and then

01:33:14,960 --> 01:33:20,159
we're going to probably do

01:33:16,719 --> 01:33:23,520
integration tests either with postman

01:33:20,159 --> 01:33:27,040
done by the or automation team or

01:33:23,520 --> 01:33:29,440
i'm gonna do with the

01:33:27,040 --> 01:33:31,840
we just am super agent and do the calls

01:33:29,440 --> 01:33:31,840
and stuff

01:33:35,120 --> 01:33:44,560
we are we we are trying to

01:33:39,760 --> 01:33:48,960
uh to have as many tests as possible

01:33:44,560 --> 01:33:53,120
um but this is project specific

01:33:48,960 --> 01:33:55,679
uh not everybody writes uh

01:33:53,120 --> 01:33:56,400
the same amount of tests as we do on our

01:33:55,679 --> 01:33:58,480
project

01:33:56,400 --> 01:33:59,520
we actually need those tests so it's not

01:33:58,480 --> 01:34:02,560
like

01:33:59,520 --> 01:34:05,600
we are aiming for 90

01:34:02,560 --> 01:34:08,719
because we were told to

01:34:05,600 --> 01:34:11,920
we actually found it useful to have

01:34:08,719 --> 01:34:11,920
high test coverage

01:34:12,719 --> 01:34:19,120
and we are trying to

01:34:16,880 --> 01:34:21,440
we are trying to switch to test

01:34:19,120 --> 01:34:26,480
different development

01:34:21,440 --> 01:34:26,480
and it just it it encourages

01:34:27,440 --> 01:34:34,480
it encourages thinking basically

01:34:31,360 --> 01:34:36,880
thinking thinking first and then writing

01:34:34,480 --> 01:34:36,880
the code

01:34:36,960 --> 01:34:40,960
we we are we are finally and fortunately

01:34:40,400 --> 01:34:44,000
we are

01:34:40,960 --> 01:34:47,440
in uh in a position where

01:34:44,000 --> 01:34:48,400
we can dictate the quality uh and we can

01:34:47,440 --> 01:34:51,119
have

01:34:48,400 --> 01:34:52,880
extra serious discussions with the

01:34:51,119 --> 01:34:53,520
stakeholders about this and they

01:34:52,880 --> 01:34:56,880
understand

01:34:53,520 --> 01:35:00,080
which is very rare in my

01:34:56,880 --> 01:35:03,360
experience so we

01:35:00,080 --> 01:35:05,840
we can actually say that

01:35:03,360 --> 01:35:08,480
we can afford having these conversations

01:35:05,840 --> 01:35:08,480
and doing this

01:35:10,320 --> 01:35:16,080
but i i know for sure that not everybody

01:35:12,480 --> 01:35:16,080
is in the same situation so

01:35:20,480 --> 01:35:28,159
thank you um the other topics i think we

01:35:24,159 --> 01:35:32,320
touched them a bit like what should the

01:35:28,159 --> 01:35:33,520
javascript developer do angular is dying

01:35:32,320 --> 01:35:36,159
what are the skills should the

01:35:33,520 --> 01:35:38,080
javascript developer have in 2021 to be

01:35:36,159 --> 01:35:40,080
relevant to the job market

01:35:38,080 --> 01:35:41,280
the only thing that maybe we didn't

01:35:40,080 --> 01:35:44,480
touch is

01:35:41,280 --> 01:35:47,119
what frameworks do you guys

01:35:44,480 --> 01:35:47,920
think are going to be popular on the

01:35:47,119 --> 01:35:51,040
notes

01:35:47,920 --> 01:35:52,480
on the server side like the node.js i

01:35:51,040 --> 01:35:55,520
noticed that uh

01:35:52,480 --> 01:35:56,000
for example nest js it's it's growing

01:35:55,520 --> 01:35:59,040
quite

01:35:56,000 --> 01:36:01,119
uh quite big are there other competitors

01:35:59,040 --> 01:36:04,880
or any other frameworks

01:36:01,119 --> 01:36:11,840
that we should uh

01:36:04,880 --> 01:36:11,840
keep on eye on on 2021

01:36:18,719 --> 01:36:22,239
what are the main features of such a

01:36:21,040 --> 01:36:25,840
framework

01:36:22,239 --> 01:36:28,800
why would nest js

01:36:25,840 --> 01:36:30,239
be a choice over i don't know something

01:36:28,800 --> 01:36:34,159
else

01:36:30,239 --> 01:36:35,760
i i have no experience in this i have i

01:36:34,159 --> 01:36:39,040
am working on different technologies on

01:36:35,760 --> 01:36:42,080
the back end so no node.js

01:36:39,040 --> 01:36:44,880
experience here well

01:36:42,080 --> 01:36:45,520
at least what i what they notice is that

01:36:44,880 --> 01:36:48,239
on the

01:36:45,520 --> 01:36:49,840
on the server side on the front end we

01:36:48,239 --> 01:36:53,040
have the frameworks we have

01:36:49,840 --> 01:36:53,840
react we have angular we have you and we

01:36:53,040 --> 01:36:56,400
have some

01:36:53,840 --> 01:36:57,679
let's say best practices and the way of

01:36:56,400 --> 01:37:00,960
doing stuff

01:36:57,679 --> 01:37:02,400
but uh my feeling was that on the server

01:37:00,960 --> 01:37:06,000
side on the node.js

01:37:02,400 --> 01:37:07,760
people were going like like in diff in

01:37:06,000 --> 01:37:12,159
different ways

01:37:07,760 --> 01:37:13,600
doing um implementation by the year or

01:37:12,159 --> 01:37:15,520
you know how the how they actually want

01:37:13,600 --> 01:37:18,639
it and i think uh

01:37:15,520 --> 01:37:22,239
that was one of the the things

01:37:18,639 --> 01:37:26,800
that is missing on the note side of the

01:37:22,239 --> 01:37:26,800
server side is like a framework to

01:37:27,280 --> 01:37:32,880
have a standard of doing stuff

01:37:30,400 --> 01:37:33,440
and i think that's why nest i haven't

01:37:32,880 --> 01:37:36,800
used it

01:37:33,440 --> 01:37:38,159
i just saw it a couple of times somebody

01:37:36,800 --> 01:37:41,360
just

01:37:38,159 --> 01:37:44,719
grabbed me hey look at this framework

01:37:41,360 --> 01:37:48,239
it's new and it's on javascript

01:37:44,719 --> 01:37:50,320
and i think it adds some

01:37:48,239 --> 01:37:52,719
some consistency especially if you have

01:37:50,320 --> 01:37:53,119
a big project and people are coming in

01:37:52,719 --> 01:37:56,080
you

01:37:53,119 --> 01:37:58,800
have a structure and a thing to to

01:37:56,080 --> 01:37:58,800
relate to

01:38:00,880 --> 01:38:04,080
at least that those ones are the

01:38:02,800 --> 01:38:07,360
advantages that i

01:38:04,080 --> 01:38:10,880
that i see is is it different

01:38:07,360 --> 01:38:12,000
like from using something like express

01:38:10,880 --> 01:38:15,360
for example

01:38:12,000 --> 01:38:17,840
no it's like a full blown if i

01:38:15,360 --> 01:38:18,960
remember well it's a full blown with uh

01:38:17,840 --> 01:38:21,520
let's say models

01:38:18,960 --> 01:38:23,119
controllers it allows you to interact

01:38:21,520 --> 01:38:27,040
with the

01:38:23,119 --> 01:38:29,119
um to the database it creates the models

01:38:27,040 --> 01:38:30,480
and all that parts so for full stack

01:38:29,119 --> 01:38:34,000
framework for everything

01:38:30,480 --> 01:38:36,800
yeah it's not like just uh i'm not just

01:38:34,000 --> 01:38:38,800
but express

01:38:36,800 --> 01:38:45,840
router you're just a router and that's

01:38:38,800 --> 01:38:45,840
it yeah okay

01:38:46,719 --> 01:38:54,159
okay so i think we can uh we can wrap

01:38:50,080 --> 01:38:54,560
uh things up uh thank you very much for

01:38:54,159 --> 01:38:57,440
uh

01:38:54,560 --> 01:38:58,000
for coming and for uh staying a bit

01:38:57,440 --> 01:39:01,360
longer

01:38:58,000 --> 01:39:04,560
and thank you guys for for listening us

01:39:01,360 --> 01:39:07,199
and uh thank you for for contributing to

01:39:04,560 --> 01:39:07,199
our meetup

01:39:09,280 --> 01:39:15,840
okay um thank you bye

01:39:12,560 --> 01:39:23,440
welcome back thank you guys have a great

01:39:15,840 --> 01:39:23,440

YouTube URL: https://www.youtube.com/watch?v=d7Jd5fyP-xE


