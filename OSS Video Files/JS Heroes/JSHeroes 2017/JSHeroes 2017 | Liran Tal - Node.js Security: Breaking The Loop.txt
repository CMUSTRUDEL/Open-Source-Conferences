Title: JSHeroes 2017 | Liran Tal - Node.js Security: Breaking The Loop
Publication date: 2017-06-23
Playlist: JSHeroes 2017
Description: 
	Node.js and JavaScript adoption are high and application security plays a big part in shipping your products in the midst of cyber security threats. 
We will deep-dive into practical Node.js security measures which you can easily implement in your current projects. Covering topics such as OWASP Top 10 vulnerabilities, Secure Code Guidelines, Leveraging recommended npm libraries, Hardening ExpressJS, and Secure Dependencies Management with CI/CD integration.
Captions: 
	00:00:10,750 --> 00:00:15,260
all right so good morning everyone

00:00:13,190 --> 00:00:16,910
I'm glad we're off with a front-end

00:00:15,260 --> 00:00:23,330
boring stuff and we're like a back-end

00:00:16,910 --> 00:00:24,980
nodejs you know so hi everyone my name

00:00:23,330 --> 00:00:27,590
is Iran I'm an engineering manager at

00:00:24,980 --> 00:00:29,360
Nielson where I help build a marketing

00:00:27,590 --> 00:00:33,200
cloud platform it's mostly JavaScript

00:00:29,360 --> 00:00:35,660
and ojs I came from Israel and you know

00:00:33,200 --> 00:00:38,660
it's a in the Middle East and we commute

00:00:35,660 --> 00:00:40,520
to work like this on camels so it's

00:00:38,660 --> 00:00:43,370
worse than your traffic here trust me

00:00:40,520 --> 00:00:45,109
and that's in the morning so we don't

00:00:43,370 --> 00:00:48,129
have a lot of traffic and it still took

00:00:45,109 --> 00:00:48,129
me like an hour to get to work

00:00:48,489 --> 00:00:53,899
Middle East what can you do

00:00:51,370 --> 00:00:56,660
actually this is Tel Aviv so it's pretty

00:00:53,899 --> 00:01:01,670
fun and fast-paced like we said here a

00:00:56,660 --> 00:01:02,749
couple of times on the industry and what

00:01:01,670 --> 00:01:05,440
I'm really passionate about is

00:01:02,749 --> 00:01:08,540
open-source when I'm not doing the all

00:01:05,440 --> 00:01:10,940
coding hours at work being a manager is

00:01:08,540 --> 00:01:12,920
kind of taking you into meetings a lot

00:01:10,940 --> 00:01:15,230
of other stuff that we were singing

00:01:12,920 --> 00:01:17,900
about in the morning with activities so

00:01:15,230 --> 00:01:20,330
I'm doing it at home and some would work

00:01:17,900 --> 00:01:22,730
as well but had a privilege for the last

00:01:20,330 --> 00:01:24,500
two and a half years to lead and

00:01:22,730 --> 00:01:28,970
maintain the min-jae's project which is

00:01:24,500 --> 00:01:30,680
my very favorite min stack and recently

00:01:28,970 --> 00:01:33,230
actually I also had a privilege of

00:01:30,680 --> 00:01:36,190
taking care of some of volunteering

00:01:33,230 --> 00:01:38,290
activity around OS which is an activism

00:01:36,190 --> 00:01:41,450
volunteering community around security

00:01:38,290 --> 00:01:44,350
for web applications part of which will

00:01:41,450 --> 00:01:46,580
actually touch today there's a node.js

00:01:44,350 --> 00:01:49,280
project called node goat we will use it

00:01:46,580 --> 00:01:50,990
today it's by design vulnerable so we

00:01:49,280 --> 00:01:53,330
can do an educational experience and see

00:01:50,990 --> 00:01:57,760
how many security vulnerabilities we can

00:01:53,330 --> 00:02:00,350
go when we are doing node development so

00:01:57,760 --> 00:02:05,220
beyond that at home this is my kid ory

00:02:00,350 --> 00:02:10,110
history result and you can do

00:02:05,220 --> 00:02:11,520
thank you as you can see we take

00:02:10,110 --> 00:02:12,780
security pretty seriously we had a

00:02:11,520 --> 00:02:14,760
session on I don't know if you can reach

00:02:12,780 --> 00:02:15,210
the CSRF tokens implementation for

00:02:14,760 --> 00:02:18,480
nodejs

00:02:15,210 --> 00:02:20,460
and he really got all of it I only paid

00:02:18,480 --> 00:02:23,310
him like 100 bucks two bucks to laugh

00:02:20,460 --> 00:02:24,990
when I took a picture so I wasn't that

00:02:23,310 --> 00:02:27,450
price is going to go to the conference

00:02:24,990 --> 00:02:28,530
and have the picture but we actually do

00:02:27,450 --> 00:02:30,450
take it seriously and if there's

00:02:28,530 --> 00:02:32,850
something I want to convey to you in the

00:02:30,450 --> 00:02:35,460
talk today is basically to give you a

00:02:32,850 --> 00:02:37,350
focus of you know a mindset for security

00:02:35,460 --> 00:02:39,540
where when you will write code or you

00:02:37,350 --> 00:02:41,280
read code review things for your

00:02:39,540 --> 00:02:44,070
colleagues you would have that you know

00:02:41,280 --> 00:02:45,330
red flags coming up for security so if

00:02:44,070 --> 00:02:47,460
you see something fishy you know you're

00:02:45,330 --> 00:02:49,470
gonna cut it so there's also going to be

00:02:47,460 --> 00:02:51,030
a lot of security obviously weighted

00:02:49,470 --> 00:02:54,720
stuff but all of it is tips and tricks

00:02:51,030 --> 00:02:57,330
which are very practical so going back

00:02:54,720 --> 00:02:59,490
to what they call the magical twenty ten

00:02:57,330 --> 00:03:01,640
and people have been talking about it

00:02:59,490 --> 00:03:04,110
for a while here on some of the talks

00:03:01,640 --> 00:03:06,840
this is where I think fully JavaScript

00:03:04,110 --> 00:03:10,440
started its its rise with all of these

00:03:06,840 --> 00:03:13,320
frameworks maybe most notably I really

00:03:10,440 --> 00:03:15,540
remember and like the 2010 because we

00:03:13,320 --> 00:03:21,090
had Justin Bieber winning the American

00:03:15,540 --> 00:03:23,010
Music Award I think but maybe no js' I

00:03:21,090 --> 00:03:24,540
think has been really contributing to

00:03:23,010 --> 00:03:26,940
this rise because it had all of this

00:03:24,540 --> 00:03:29,489
ecosystem all of these tools and the NPM

00:03:26,940 --> 00:03:31,020
repository has grown so much so it made

00:03:29,489 --> 00:03:33,840
JavaScript oligo everywhere and we've

00:03:31,020 --> 00:03:35,790
also touching this throughout the talks

00:03:33,840 --> 00:03:37,680
today where it's IOT and Universal apps

00:03:35,790 --> 00:03:39,769
and you know server-side rendering so

00:03:37,680 --> 00:03:42,930
everything is today JavaScript and

00:03:39,769 --> 00:03:44,100
JavaScript is really everywhere so this

00:03:42,930 --> 00:03:46,620
is what I want to talk to you about some

00:03:44,100 --> 00:03:48,930
security horror stories that are I just

00:03:46,620 --> 00:03:52,500
be noticing around when I was working on

00:03:48,930 --> 00:03:55,350
this deck my fail number one that I want

00:03:52,500 --> 00:03:57,150
to share with you by a show of hand

00:03:55,350 --> 00:04:02,340
who has heard about this package called

00:03:57,150 --> 00:04:03,989
Dream Rafal awesome so not a lot but

00:04:02,340 --> 00:04:05,880
it's good as some people know

00:04:03,989 --> 00:04:09,390
so remember fall is a package that has

00:04:05,880 --> 00:04:11,940
been sent to the NPM repository a couple

00:04:09,390 --> 00:04:15,480
of years ago as you can see it's very

00:04:11,940 --> 00:04:17,010
special I really recommend it well let

00:04:15,480 --> 00:04:19,019
it speak for itself it has a

00:04:17,010 --> 00:04:21,930
pre-installed script that runs RM in

00:04:19,019 --> 00:04:23,910
Aref slash asterisk when you install it

00:04:21,930 --> 00:04:25,410
it's going to run so you know if you

00:04:23,910 --> 00:04:28,830
want just to render your system

00:04:25,410 --> 00:04:31,770
completely useless install this one it

00:04:28,830 --> 00:04:33,539
was actually really ignorance to the

00:04:31,770 --> 00:04:35,639
open source repository for this actually

00:04:33,539 --> 00:04:37,259
it's still alive and of course there's a

00:04:35,639 --> 00:04:39,389
disclaimer that note take it on your own

00:04:37,259 --> 00:04:42,090
risk but it was published as a test

00:04:39,389 --> 00:04:44,699
experiment to NPM and it showed how much

00:04:42,090 --> 00:04:46,409
this ecosystem is very open but also

00:04:44,699 --> 00:04:49,979
very vulnerable if we don't know what

00:04:46,409 --> 00:04:51,750
we're doing so it was there for a while

00:04:49,979 --> 00:04:54,419
like about two hours after it was taken

00:04:51,750 --> 00:04:56,039
off and this was on Twitter back then so

00:04:54,419 --> 00:04:58,050
everyone will letting NPM j/s know and

00:04:56,039 --> 00:04:59,490
they took it down but this is something

00:04:58,050 --> 00:05:00,990
that if people actually installed

00:04:59,490 --> 00:05:03,870
through I don't already tour hacker news

00:05:00,990 --> 00:05:09,659
or whatever it could harm their system

00:05:03,870 --> 00:05:11,400
and it did so Phil number two validator

00:05:09,659 --> 00:05:13,800
j/s it's a library that we'll talk about

00:05:11,400 --> 00:05:15,389
today a little bit more in depth but

00:05:13,800 --> 00:05:16,889
let's say that you want to use it to

00:05:15,389 --> 00:05:19,229
sanitize your strings you like after

00:05:16,889 --> 00:05:21,569
this talk you're going home

00:05:19,229 --> 00:05:24,419
working on your laptop and maybe you say

00:05:21,569 --> 00:05:26,940
I want to do validator j/s let's running

00:05:24,419 --> 00:05:28,409
pretty fast let's do a validator j/s

00:05:26,940 --> 00:05:29,849
install from my project because I want

00:05:28,409 --> 00:05:32,310
to avoid entering the right way and you

00:05:29,849 --> 00:05:33,419
see the ripple is also called validator

00:05:32,310 --> 00:05:35,880
Jes so the next thing you will probably

00:05:33,419 --> 00:05:38,789
do is go to your terminal and do NPM

00:05:35,880 --> 00:05:41,190
install validator jus make sense except

00:05:38,789 --> 00:05:44,219
the NPM library actually called

00:05:41,190 --> 00:05:47,069
validator and not validate or j/s right

00:05:44,219 --> 00:05:49,110
so this is kind of a phishing attack

00:05:47,069 --> 00:05:51,719
where you can have malicious models in a

00:05:49,110 --> 00:05:54,060
similar name we're just a typo away

00:05:51,719 --> 00:05:57,449
could actually harm your system if it

00:05:54,060 --> 00:06:00,029
had a pre-install hook I'll give the

00:05:57,449 --> 00:06:03,120
example for socket IO since we have

00:06:00,029 --> 00:06:06,000
winner Moe in the crowd so many

00:06:03,120 --> 00:06:08,279
downloads for the real one and not so

00:06:06,000 --> 00:06:11,360
much for the one without the dot and it

00:06:08,279 --> 00:06:14,099
doesn't mean that it's malicious or not

00:06:11,360 --> 00:06:16,469
but it just shows that people are can

00:06:14,099 --> 00:06:18,659
install it and just by accident or you

00:06:16,469 --> 00:06:19,310
know just a typo wrong group copy and

00:06:18,659 --> 00:06:21,630
paste

00:06:19,310 --> 00:06:27,899
could install something else so that

00:06:21,630 --> 00:06:30,270
happens sale number three is this

00:06:27,899 --> 00:06:32,460
tutorial I was seeing on the internet

00:06:30,270 --> 00:06:35,100
seemed interesting no D

00:06:32,460 --> 00:06:38,520
as reactive Wi-Fi dashboard stuff I like

00:06:35,100 --> 00:06:42,210
I'll try to read it so really innocent

00:06:38,520 --> 00:06:44,220
reader going into this and when I was

00:06:42,210 --> 00:06:46,229
looking through a code having this

00:06:44,220 --> 00:06:48,720
security mindset was something was

00:06:46,229 --> 00:06:52,319
popping up at first if you will take a

00:06:48,720 --> 00:06:54,870
closer look like I did you will actually

00:06:52,319 --> 00:06:56,880
have your mind pay attention to what's

00:06:54,870 --> 00:07:00,180
going on there with this child process

00:06:56,880 --> 00:07:01,650
exact which is executing commands to

00:07:00,180 --> 00:07:04,050
figure out what's going on probably with

00:07:01,650 --> 00:07:05,610
a Wi-Fi in the background and that's

00:07:04,050 --> 00:07:08,669
actually a bad way to run that command

00:07:05,610 --> 00:07:11,190
and while it is just a tutorial people

00:07:08,669 --> 00:07:13,169
will usually take this input and use it

00:07:11,190 --> 00:07:14,820
where they copy and paste it from Stack

00:07:13,169 --> 00:07:16,830
Overflow where this tutorial website or

00:07:14,820 --> 00:07:19,050
they just how is always so child process

00:07:16,830 --> 00:07:20,970
exact let's use it it's it's actually

00:07:19,050 --> 00:07:23,370
very frowned upon even in the nodejs

00:07:20,970 --> 00:07:25,860
talks that they actually tell you note

00:07:23,370 --> 00:07:28,699
you know never pass and sanitized inputs

00:07:25,860 --> 00:07:31,620
this is not the one to use right and

00:07:28,699 --> 00:07:33,180
granted that config that Wi-Fi command

00:07:31,620 --> 00:07:35,460
looks like a constant that doesn't

00:07:33,180 --> 00:07:37,770
change but they just assume someone was

00:07:35,460 --> 00:07:39,300
able through other layers of attack to

00:07:37,770 --> 00:07:42,990
just inject something else

00:07:39,300 --> 00:07:44,759
so x'q actually behind the scene execute

00:07:42,990 --> 00:07:46,919
the shell with all the globins

00:07:44,759 --> 00:07:48,599
and all i/o redirection and your

00:07:46,919 --> 00:07:51,030
parameters that you want to add to your

00:07:48,599 --> 00:07:52,889
execute commands is going to suffer if

00:07:51,030 --> 00:07:53,880
someone is if you're not sanitizing it

00:07:52,889 --> 00:07:57,120
correctly and someone is trying to

00:07:53,880 --> 00:08:01,289
inject something malicious so it's a

00:07:57,120 --> 00:08:03,449
fail of I think maybe failing to educate

00:08:01,289 --> 00:08:05,280
the younger generation because the

00:08:03,449 --> 00:08:07,680
nodejs in JavaScript is kind of young

00:08:05,280 --> 00:08:09,479
given to it existed for a while but this

00:08:07,680 --> 00:08:11,400
is something that we've mentioned PHP

00:08:09,479 --> 00:08:13,530
for a while and PHP has been frowned

00:08:11,400 --> 00:08:15,300
upon for the same reasons for the same

00:08:13,530 --> 00:08:16,830
reasons of let's do things that just you

00:08:15,300 --> 00:08:18,780
know a script they are quick they run

00:08:16,830 --> 00:08:21,210
but it doesn't mean they are written in

00:08:18,780 --> 00:08:23,009
a good way so I would like to see us do

00:08:21,210 --> 00:08:25,219
some examples on the web where we

00:08:23,009 --> 00:08:28,759
actually have these security notions

00:08:25,219 --> 00:08:30,930
taken into account so with that said

00:08:28,759 --> 00:08:35,159
yeah I'm going to interact waiting Tim

00:08:30,930 --> 00:08:37,560
for that can take away with that that's

00:08:35,159 --> 00:08:40,349
being with him it's good to slogan so

00:08:37,560 --> 00:08:42,150
let's make no J security great again and

00:08:40,349 --> 00:08:44,190
I have a video prefer to just get you

00:08:42,150 --> 00:08:47,459
into that security mindset

00:08:44,190 --> 00:08:47,459
[Music]

00:08:47,610 --> 00:08:52,720
let's reduce virus from the database

00:08:49,810 --> 00:08:54,010
it's happening replicating eating of

00:08:52,720 --> 00:08:56,350
memory or what do I do

00:08:54,010 --> 00:09:02,710
type cookie you idiot I'll head him off

00:08:56,350 --> 00:09:04,360
to the past never threw a bug attack a

00:09:02,710 --> 00:09:08,280
little luck in and all the way file run

00:09:04,360 --> 00:09:08,280
antivirus give me a systems display

00:09:13,720 --> 00:09:21,730
dieeee dickweeds rabbit is in the

00:09:19,930 --> 00:09:25,090
administration system send a flu shot

00:09:21,730 --> 00:09:27,540
rabbit flu shot someone talk alright so

00:09:25,090 --> 00:09:29,860
I know it's funny I hope you enjoyed it

00:09:27,540 --> 00:09:32,410
that is how we used to hack system back

00:09:29,860 --> 00:09:34,180
in the 90s it was all visual file

00:09:32,410 --> 00:09:35,950
systems like that we were going in and

00:09:34,180 --> 00:09:38,860
there were rabbits and pac-man's on the

00:09:35,950 --> 00:09:40,900
screen it's actually fun it from a 95

00:09:38,860 --> 00:09:42,520
records movie kind of cult kind of also

00:09:40,900 --> 00:09:46,630
lasts upon because of all of this

00:09:42,520 --> 00:09:48,190
weirdness that were seeing before so for

00:09:46,630 --> 00:09:50,710
me security for nodejs started a while

00:09:48,190 --> 00:09:52,690
ago about a year when I was doing I was

00:09:50,710 --> 00:09:54,700
working back then at HP and we're doing

00:09:52,690 --> 00:09:56,740
a lot of cred modeling around nodejs we

00:09:54,700 --> 00:09:58,390
also had we also had this web

00:09:56,740 --> 00:10:00,820
application that was open and exposed to

00:09:58,390 --> 00:10:02,500
everyone on the internet and the threat

00:10:00,820 --> 00:10:05,260
bundling cyber security team with HP

00:10:02,500 --> 00:10:06,790
they were like used to Java and.net and

00:10:05,260 --> 00:10:08,170
they have this really good protocols and

00:10:06,790 --> 00:10:10,720
libraries to talk about but when you

00:10:08,170 --> 00:10:12,550
come to know gesture like what what how

00:10:10,720 --> 00:10:13,750
do I treat that from security

00:10:12,550 --> 00:10:16,150
perspective it works completely

00:10:13,750 --> 00:10:19,180
different and this is where I really

00:10:16,150 --> 00:10:20,590
don't dived in to talking with them

00:10:19,180 --> 00:10:22,870
about how to do things right and I

00:10:20,590 --> 00:10:24,910
learned myself and eventually wrote a

00:10:22,870 --> 00:10:26,830
book about it which is very practical

00:10:24,910 --> 00:10:28,660
there's not out of curiosity there's a

00:10:26,830 --> 00:10:30,940
lot of tips and tricks that you'll use

00:10:28,660 --> 00:10:33,610
today of which best practices you can do

00:10:30,940 --> 00:10:37,230
to avoid issues and also which libraries

00:10:33,610 --> 00:10:40,810
help you maintain those the nodejs

00:10:37,230 --> 00:10:41,800
secure best practices saying so then the

00:10:40,810 --> 00:10:43,990
first thing I want to thank start

00:10:41,800 --> 00:10:46,030
talking about is security that we can

00:10:43,990 --> 00:10:48,730
add through HTTP headers and this one is

00:10:46,030 --> 00:10:50,500
one of those very low hanging fruits

00:10:48,730 --> 00:10:53,230
where you can just implement it very

00:10:50,500 --> 00:10:54,910
quickly understand what it does and you

00:10:53,230 --> 00:10:57,160
can wave off some of the security issues

00:10:54,910 --> 00:11:00,910
that are of been you know one of the top

00:10:57,160 --> 00:11:03,190
10 for all was for example so I want to

00:11:00,910 --> 00:11:07,480
talk about you know three three

00:11:03,190 --> 00:11:09,040
important ones to make the group and not

00:11:07,480 --> 00:11:15,280
just any styles and sorry I don't know

00:11:09,040 --> 00:11:19,210
how to gather these guys so the first

00:11:15,280 --> 00:11:22,000
one three transport security is all

00:11:19,210 --> 00:11:24,640
about HTTPS and that's what we're seeing

00:11:22,000 --> 00:11:27,550
today especially with let's encrypt for

00:11:24,640 --> 00:11:30,700
web is being so much so so important

00:11:27,550 --> 00:11:34,000
today that we can't anyway rely on HTTP

00:11:30,700 --> 00:11:37,360
and this whole thing around the

00:11:34,000 --> 00:11:39,490
redirection that happens today which

00:11:37,360 --> 00:11:41,890
this is the classic examples we have a

00:11:39,490 --> 00:11:44,980
bank site usually there's a lot of ads

00:11:41,890 --> 00:11:46,660
and you know advertisement stuffs about

00:11:44,980 --> 00:11:49,060
the bank and they have this login link

00:11:46,660 --> 00:11:52,450
that is HTTPS and when you go to it

00:11:49,060 --> 00:11:55,930
you're like oh it's HTTPS I'm safe but

00:11:52,450 --> 00:11:58,300
what happens is still that Bank site is

00:11:55,930 --> 00:12:01,630
HTTP so when men in the middle attack

00:11:58,300 --> 00:12:03,640
could go in and do some SSL downgrading

00:12:01,630 --> 00:12:06,340
so they would replace that HTTP link

00:12:03,640 --> 00:12:07,480
maybe with their own HTTP link so

00:12:06,340 --> 00:12:09,550
actually the fact that they were

00:12:07,480 --> 00:12:12,940
redirecting it to HTTPS link to begin

00:12:09,550 --> 00:12:15,880
with is vulnerable and so that's what

00:12:12,940 --> 00:12:17,950
happens and shrink restrict Transport

00:12:15,880 --> 00:12:19,660
Security is a header that you sent from

00:12:17,950 --> 00:12:22,120
the server to the browser and you tell

00:12:19,660 --> 00:12:23,590
him well the next time I visit you for

00:12:22,120 --> 00:12:24,850
decent that duration of time there's an

00:12:23,590 --> 00:12:28,030
expiration attribute that you can give

00:12:24,850 --> 00:12:30,910
it please do not do any redirect just

00:12:28,030 --> 00:12:33,010
load all of the resources under HTTP the

00:12:30,910 --> 00:12:36,940
CSS the images the JavaScript everything

00:12:33,010 --> 00:12:39,970
is going to be see HTTPS and there is no

00:12:36,940 --> 00:12:41,890
back pink route to the to the server to

00:12:39,970 --> 00:12:43,450
do like redirects like you can do on the

00:12:41,890 --> 00:12:46,000
on the web with JavaScript or you can do

00:12:43,450 --> 00:12:50,290
on the on the server side with HTTP

00:12:46,000 --> 00:12:52,360
there is no so that's one the other one

00:12:50,290 --> 00:12:55,270
is extreme options which is all around

00:12:52,360 --> 00:13:00,100
iframes where this clickjacking problem

00:12:55,270 --> 00:13:02,440
is I'll tell you a story so I have this

00:13:00,100 --> 00:13:05,500
friend who is a kind of heavy I don't

00:13:02,440 --> 00:13:10,120
want to give his name but slow me from

00:13:05,500 --> 00:13:13,630
Tel Aviv here I'm sorry didn't mean to

00:13:10,120 --> 00:13:16,270
do that so he likes Nutella and if he

00:13:13,630 --> 00:13:18,520
goes to this website he's gonna click on

00:13:16,270 --> 00:13:20,860
a free Nutella sample to just order it

00:13:18,520 --> 00:13:24,040
for him and what happens behind the sin

00:13:20,860 --> 00:13:26,560
is I took an iframe for Twitter page and

00:13:24,040 --> 00:13:28,900
I just layered it with CSS and other

00:13:26,560 --> 00:13:30,790
techniques behind the scenes because I

00:13:28,900 --> 00:13:33,190
can load your website through iframes

00:13:30,790 --> 00:13:34,390
theoretically and when that happens I

00:13:33,190 --> 00:13:36,730
can fool the guy and this is

00:13:34,390 --> 00:13:38,209
clickjacking where you press buttons on

00:13:36,730 --> 00:13:40,730
your webs

00:13:38,209 --> 00:13:43,879
rights that are coming up and they can

00:13:40,730 --> 00:13:46,249
actually actually invoke clicks to

00:13:43,879 --> 00:13:48,319
iframed other websites completely that

00:13:46,249 --> 00:13:51,019
are rendered behind the scenes so the

00:13:48,319 --> 00:13:52,069
next time that those pop-ups are going

00:13:51,019 --> 00:13:53,779
to show you know when you're watching

00:13:52,069 --> 00:13:56,179
whatever you're doing on the web just

00:13:53,779 --> 00:13:59,149
think about maybe you are clicking that

00:13:56,179 --> 00:14:01,129
allow web camera to turn on and allow

00:13:59,149 --> 00:14:02,509
microphone to turn on because our

00:14:01,129 --> 00:14:05,600
techniques that are doing the exact same

00:14:02,509 --> 00:14:06,800
thing with just that turning on your

00:14:05,600 --> 00:14:08,779
camera when you're clicking something

00:14:06,800 --> 00:14:11,480
which is like cancel I don't want to

00:14:08,779 --> 00:14:13,610
install another Java update good with

00:14:11,480 --> 00:14:18,410
the Java and PageSpeed of today I like

00:14:13,610 --> 00:14:21,139
it alright so content security policy

00:14:18,410 --> 00:14:24,079
being a third one is all about white

00:14:21,139 --> 00:14:26,269
listing trusted content which basically

00:14:24,079 --> 00:14:29,269
means what if you could tell the browser

00:14:26,269 --> 00:14:31,879
which content to render and which not

00:14:29,269 --> 00:14:34,819
you for example let's say I don't want

00:14:31,879 --> 00:14:37,639
to render any inline JavaScript what

00:14:34,819 --> 00:14:39,949
does that solve immediately all of XSS

00:14:37,639 --> 00:14:42,079
attacks are going away we call you

00:14:39,949 --> 00:14:43,670
because you have just you know those

00:14:42,079 --> 00:14:45,709
script tags that we'll see later on that

00:14:43,670 --> 00:14:48,110
people are adding you know Indian forms

00:14:45,709 --> 00:14:49,970
you have just told the browser hey don't

00:14:48,110 --> 00:14:51,649
don't render that I don't prostate only

00:14:49,970 --> 00:14:52,160
render JavaScript at is coming from my

00:14:51,649 --> 00:14:55,579
domain

00:14:52,160 --> 00:14:56,990
and from any other domain and we'll talk

00:14:55,579 --> 00:14:58,129
about it later because it can also cause

00:14:56,990 --> 00:15:04,100
problems you have to know how your

00:14:58,129 --> 00:15:04,759
application works see alright so out of

00:15:04,100 --> 00:15:07,999
the tree

00:15:04,759 --> 00:15:13,040
just like with Destiny's Child there's a

00:15:07,999 --> 00:15:14,509
favorite one yeah it's this one it's my

00:15:13,040 --> 00:15:17,269
favorite ethos it's also a recent one

00:15:14,509 --> 00:15:19,100
and has been getting a lot of spec

00:15:17,269 --> 00:15:20,569
updates which regards to the what the

00:15:19,100 --> 00:15:25,189
trust and content policy actually

00:15:20,569 --> 00:15:28,689
support so the way to do that in ojs is

00:15:25,189 --> 00:15:29,869
using helmet who has heard and used it

00:15:28,689 --> 00:15:33,769
okay

00:15:29,869 --> 00:15:37,879
very few people it's good why we have

00:15:33,769 --> 00:15:39,290
the this session so let's see what's

00:15:37,879 --> 00:15:40,939
going on and from now on it's going to

00:15:39,290 --> 00:15:44,829
be a lot of technical and hands-on so

00:15:40,939 --> 00:15:44,829
I'll try to keep it in place

00:15:50,300 --> 00:15:59,570
when you can see stuff just let me know

00:15:52,709 --> 00:15:59,570
and I'll try to turn those fonts on okay

00:16:00,560 --> 00:16:11,820
so first things first do you know what

00:16:07,649 --> 00:16:16,320
it is is Guillermo here no he paid me to

00:16:11,820 --> 00:16:17,880
use Piper's gas app I was like marketing

00:16:16,320 --> 00:16:24,089
for diet you know do it I'll pay you

00:16:17,880 --> 00:16:29,310
afterwards all right so I'm on the note

00:16:24,089 --> 00:16:30,959
goat branch me think it's the marks on

00:16:29,310 --> 00:16:34,589
the node goat projects on my machine

00:16:30,959 --> 00:16:39,500
starting it off and should have a

00:16:34,589 --> 00:16:39,500
browser here somewhere there we go

00:16:40,520 --> 00:16:47,310
we're going to login and this is the

00:16:45,000 --> 00:16:49,620
sample application it's nothing to show

00:16:47,310 --> 00:16:52,770
off you're just a sample one go to the

00:16:49,620 --> 00:16:55,170
profile tab and instead of your first

00:16:52,770 --> 00:16:57,899
name usually when QA test your

00:16:55,170 --> 00:17:04,050
application for security problems they

00:16:57,899 --> 00:17:08,189
would go and do that classic see that

00:17:04,050 --> 00:17:13,880
classic script tag I'll enlarge this as

00:17:08,189 --> 00:17:13,880
well a little bit for you guys okay good

00:17:14,360 --> 00:17:19,740
so what's happening here is chrome is

00:17:17,130 --> 00:17:21,689
actually figuring out this is XSS and

00:17:19,740 --> 00:17:23,730
trying to stop you from doing this stuff

00:17:21,689 --> 00:17:27,750
and then why it's critical for these

00:17:23,730 --> 00:17:29,550
presentations but it didn't really solve

00:17:27,750 --> 00:17:32,100
the problem because every page I visit

00:17:29,550 --> 00:17:35,370
this XSS attack which a developer for

00:17:32,100 --> 00:17:37,260
example at this page wasn't output and

00:17:35,370 --> 00:17:39,900
coding or sanitizing it correctly is

00:17:37,260 --> 00:17:42,179
happening so now susceptible to assist

00:17:39,900 --> 00:17:47,640
attacks on this application so the way

00:17:42,179 --> 00:17:49,820
to solve that would be let's try to load

00:17:47,640 --> 00:17:49,820
out

00:17:53,030 --> 00:18:00,830
yep and let's watch the server config

00:18:10,570 --> 00:18:18,280
yeah don't do any of the es6 stuff here

00:18:13,510 --> 00:18:27,430
so security guys we're going to use

00:18:18,280 --> 00:18:31,480
helmet and I'm going to go after all of

00:18:27,430 --> 00:18:33,460
the others and just add mine so for the

00:18:31,480 --> 00:18:35,860
front end of or just in general what

00:18:33,460 --> 00:18:37,780
we're doing here is we're using the

00:18:35,860 --> 00:18:39,430
Express framework and providing it to

00:18:37,780 --> 00:18:43,440
middleware that knows how to handle

00:18:39,430 --> 00:18:43,440
those browser requests

00:18:59,390 --> 00:19:03,100
I think that you do it

00:19:09,260 --> 00:19:29,230
I think interesting yeah so what record

00:19:22,280 --> 00:19:38,090
I don't see here thank you

00:19:29,230 --> 00:19:43,220
stir it again all right so we're looking

00:19:38,090 --> 00:19:45,740
in profile dub this still happens that's

00:19:43,220 --> 00:19:50,240
what happens here so when I'm on the

00:19:45,740 --> 00:19:55,120
dashboard now basically that script tag

00:19:50,240 --> 00:20:00,200
is not popping up and we have basically

00:19:55,120 --> 00:20:02,450
let's go up we've basically told you

00:20:00,200 --> 00:20:05,210
know JSF to send that content security

00:20:02,450 --> 00:20:08,179
policy HTTP header to the browser and

00:20:05,210 --> 00:20:09,650
tell it to just use for the script

00:20:08,179 --> 00:20:11,870
source all the script stuff that is

00:20:09,650 --> 00:20:13,610
JavaScript just use the self so it's

00:20:11,870 --> 00:20:15,770
only trusting the JavaScript that I'm

00:20:13,610 --> 00:20:17,900
sending from the browser but it's not

00:20:15,770 --> 00:20:21,640
trusting all that specifically crafted

00:20:17,900 --> 00:20:25,220
user input that gets inline JavaScript

00:20:21,640 --> 00:20:30,080
and you can see it because if I'll turn

00:20:25,220 --> 00:20:31,940
on my knowledge is for you guys so you

00:20:30,080 --> 00:20:33,770
can see it but basically chrome

00:20:31,940 --> 00:20:36,049
understood it and it's like I refuse to

00:20:33,770 --> 00:20:39,380
execute it just because it violates the

00:20:36,049 --> 00:20:42,049
content security policy right so without

00:20:39,380 --> 00:20:43,850
now investing a lot of time with output

00:20:42,049 --> 00:20:45,260
and coding or input sanitization or

00:20:43,850 --> 00:20:47,720
stuff like that which maybe you should

00:20:45,260 --> 00:20:49,970
do anyway we can talk about that also

00:20:47,720 --> 00:20:52,280
later but we have already mitigated

00:20:49,970 --> 00:20:53,870
those XSS attacks to a point and the

00:20:52,280 --> 00:20:55,429
context security one the content

00:20:53,870 --> 00:20:57,500
security policy one is really my

00:20:55,429 --> 00:20:59,720
favorite because it extends not only to

00:20:57,500 --> 00:21:04,010
script to the waveforms and other embeds

00:20:59,720 --> 00:21:06,400
are happening in your HTML so back to

00:21:04,010 --> 00:21:06,400
the slides

00:21:07,000 --> 00:21:12,350
so helmet since you haven't heard a lot

00:21:10,370 --> 00:21:13,760
about it you can just look at what's

00:21:12,350 --> 00:21:16,460
going on there basically how we provide

00:21:13,760 --> 00:21:19,700
you XSS filtering and no sniff which are

00:21:16,460 --> 00:21:21,590
like IE specific and chrome and it has

00:21:19,700 --> 00:21:23,059
the frame guard one which is the extreme

00:21:21,590 --> 00:21:25,549
options that you are talking about

00:21:23,059 --> 00:21:27,470
and at the top the HTTP strict Transport

00:21:25,549 --> 00:21:30,049
Security you can give it to moderation

00:21:27,470 --> 00:21:32,029
and set as a cell so you can apply all

00:21:30,049 --> 00:21:40,399
of those headers and some more just by

00:21:32,029 --> 00:21:45,289
using this middleware and that's it so

00:21:40,399 --> 00:21:49,039
no SQL injection who is using MongoDB by

00:21:45,289 --> 00:21:50,749
a show of hands have used it I would say

00:21:49,039 --> 00:21:52,970
somewhere like github servers and stuff

00:21:50,749 --> 00:21:54,169
like that but have you ever worried

00:21:52,970 --> 00:21:56,149
about our SQL injections

00:21:54,169 --> 00:22:02,629
you know they exist for MongoDB and

00:21:56,149 --> 00:22:04,519
other document waste right let's see so

00:22:02,629 --> 00:22:06,440
this is the classic one taking from SQL

00:22:04,519 --> 00:22:09,049
world where it's like the body drop

00:22:06,440 --> 00:22:10,850
tables you just kind of mesh other

00:22:09,049 --> 00:22:12,769
strings with queries that going and

00:22:10,850 --> 00:22:15,289
sanitized into the database and of

00:22:12,769 --> 00:22:19,009
course it's going to in this case login

00:22:15,289 --> 00:22:21,499
or do something else and MongoDB queries

00:22:19,009 --> 00:22:23,360
to try and see if the username account

00:22:21,499 --> 00:22:27,559
matches a record if you're just using

00:22:23,360 --> 00:22:29,269
the basically the MongoDB driver and not

00:22:27,559 --> 00:22:30,980
using anything anything else like our

00:22:29,269 --> 00:22:32,749
ends or stuff like that that it's just

00:22:30,980 --> 00:22:34,460
user that find you provide the username

00:22:32,749 --> 00:22:36,169
which is from the request and the

00:22:34,460 --> 00:22:40,600
password from the request and that's it

00:22:36,169 --> 00:22:40,600
and that has some issues

00:22:45,430 --> 00:22:54,790
all right I need this one okay so I'm

00:22:52,810 --> 00:22:58,240
sure if I can enlarge this screen maybe

00:22:54,790 --> 00:23:01,030
a bit so there is an end point here

00:22:58,240 --> 00:23:03,670
which is an API login one and what I'm

00:23:01,030 --> 00:23:07,300
basically doing is sending the wrong

00:23:03,670 --> 00:23:10,900
password to it so if I still have the

00:23:07,300 --> 00:23:12,760
server up it's telling me that it is

00:23:10,900 --> 00:23:13,900
incorrect and this is okay because I

00:23:12,760 --> 00:23:16,990
know this is the wrong one

00:23:13,900 --> 00:23:19,810
so the API works if I switch to the

00:23:16,990 --> 00:23:22,300
right one which is this and I send the

00:23:19,810 --> 00:23:27,370
same request you can see that now I'm

00:23:22,300 --> 00:23:29,110
logged in that benefits page and the

00:23:27,370 --> 00:23:32,680
logout button so I'm already logged in

00:23:29,110 --> 00:23:34,930
but what happens if you are not really

00:23:32,680 --> 00:23:36,880
strict looking at what you are sending

00:23:34,930 --> 00:23:39,160
and what you are receiving and at this

00:23:36,880 --> 00:23:41,260
point because this is specifically

00:23:39,160 --> 00:23:45,550
related to MongoDB and its nature of the

00:23:41,260 --> 00:23:47,800
operator is that it has so which MongoDB

00:23:45,550 --> 00:23:50,290
it has those specific operators where

00:23:47,800 --> 00:23:52,360
you can say well something greater then

00:23:50,290 --> 00:23:55,150
and that's like regex or you know like a

00:23:52,360 --> 00:23:59,530
matching pattern and basically what I'm

00:23:55,150 --> 00:24:02,410
doing here is I'm injecting those

00:23:59,530 --> 00:24:04,420
operators right into MongoDB to evaluate

00:24:02,410 --> 00:24:06,820
and I'm basically saying all right so

00:24:04,420 --> 00:24:08,410
give me where user names is greater than

00:24:06,820 --> 00:24:10,090
nothing and password is greater than

00:24:08,410 --> 00:24:12,520
nothing and it's just going to catch the

00:24:10,090 --> 00:24:15,220
first one and give it to me back so I'm

00:24:12,520 --> 00:24:17,980
logged in if I go to the pretty page you

00:24:15,220 --> 00:24:19,870
can see that it works so I'm logged in

00:24:17,980 --> 00:24:21,960
again right benefits and logout and that

00:24:19,870 --> 00:24:25,540
just works

00:24:21,960 --> 00:24:27,190
okay so we've just hacked into the

00:24:25,540 --> 00:24:30,760
system using among the be no SQL

00:24:27,190 --> 00:24:32,440
injection and it's if you would search

00:24:30,760 --> 00:24:34,390
github it has that ability to search

00:24:32,440 --> 00:24:36,490
through code and you would go and search

00:24:34,390 --> 00:24:38,770
for that user that's fine and you know

00:24:36,490 --> 00:24:39,760
username doc username that's what's

00:24:38,770 --> 00:24:42,010
going to happen you're going to see a

00:24:39,760 --> 00:24:43,600
lot of results from github open source

00:24:42,010 --> 00:24:45,430
projects that are just using that and

00:24:43,600 --> 00:24:46,660
sometimes you might even see just the

00:24:45,430 --> 00:24:49,300
username and add the password part

00:24:46,660 --> 00:24:51,340
doesn't mean it's extra secure there are

00:24:49,300 --> 00:24:53,370
other like no like blind no SQL

00:24:51,340 --> 00:24:56,080
injections that can happen and just

00:24:53,370 --> 00:24:57,430
because of MongoDB working like that and

00:24:56,080 --> 00:24:58,610
we'll see something related to express

00:24:57,430 --> 00:25:01,940
in a second this

00:24:58,610 --> 00:25:08,870
the real vulnerability so back to the

00:25:01,940 --> 00:25:11,690
slides so why is this really happening

00:25:08,870 --> 00:25:13,370
right I mean why is I'm sending a JSON

00:25:11,690 --> 00:25:16,220
request why is that getting translated

00:25:13,370 --> 00:25:18,230
into MongoDB there's a reason for it is

00:25:16,220 --> 00:25:21,140
because Express doesn't have any way to

00:25:18,230 --> 00:25:23,570
parse your JSON body it uses something

00:25:21,140 --> 00:25:26,510
else that is called body parts or

00:25:23,570 --> 00:25:29,510
middleware to parse it and if you'd open

00:25:26,510 --> 00:25:30,230
up any node.js project you're probably

00:25:29,510 --> 00:25:32,059
going to see this

00:25:30,230 --> 00:25:34,580
it's the classic example we're choosing

00:25:32,059 --> 00:25:37,340
body parser that JSON and body parts are

00:25:34,580 --> 00:25:40,070
cured and coded and it's just taking all

00:25:37,340 --> 00:25:42,080
of that JSON encode input and putting it

00:25:40,070 --> 00:25:43,970
as a JavaScript object so it's not on

00:25:42,080 --> 00:25:49,090
your runtime and that is why they are

00:25:43,970 --> 00:25:49,090
injected as actual operators to MongoDB

00:25:51,190 --> 00:25:56,660
so I'm going to do an acting thing for

00:25:53,690 --> 00:25:58,669
node.js and try to go to this would you

00:25:56,660 --> 00:26:00,890
deposit your lifetime savings on a

00:25:58,669 --> 00:26:04,040
system written entirely nodejs

00:26:00,890 --> 00:26:09,280
and have that much lifetime setting that

00:26:04,040 --> 00:26:12,049
ahead and bind I don't see why not

00:26:09,280 --> 00:26:13,820
there is a up and option down for

00:26:12,049 --> 00:26:15,559
everything and of course you have to do

00:26:13,820 --> 00:26:19,610
things right so you could write a poorly

00:26:15,559 --> 00:26:21,320
written system very insecure just as

00:26:19,610 --> 00:26:22,669
well in Java in PHP and in Python it

00:26:21,320 --> 00:26:25,070
doesn't matter there are a lot of stuff

00:26:22,669 --> 00:26:28,340
around it I'm getting into the related

00:26:25,070 --> 00:26:31,460
to security so and were you or a person

00:26:28,340 --> 00:26:37,010
you know affected by the removal no just

00:26:31,460 --> 00:26:39,230
sorry I read about all right so that

00:26:37,010 --> 00:26:40,940
classic example where we see this is

00:26:39,230 --> 00:26:42,919
happening right you would see that route

00:26:40,940 --> 00:26:44,990
and controller being implemented and you

00:26:42,919 --> 00:26:47,480
see user that find username request body

00:26:44,990 --> 00:26:49,580
it's trusting the body input and just

00:26:47,480 --> 00:26:53,030
giving you back the output and we have

00:26:49,580 --> 00:26:55,040
seen how to with with a web tool how to

00:26:53,030 --> 00:26:56,960
exploit it but how would you actually

00:26:55,040 --> 00:27:00,460
fix that what would be like the quickest

00:26:56,960 --> 00:27:00,460
fix that you would do to do it

00:27:04,809 --> 00:27:18,500
right but we can do it in a very easy

00:27:07,789 --> 00:27:20,740
way as well so sessions there we go this

00:27:18,500 --> 00:27:24,070
is my handle API login request and it's

00:27:20,740 --> 00:27:26,360
right and I need to validate API one

00:27:24,070 --> 00:27:29,480
this is the request being done behind

00:27:26,360 --> 00:27:31,940
the scenes and the basic things would be

00:27:29,480 --> 00:27:35,330
if we are actually knowing that user

00:27:31,940 --> 00:27:40,879
name is a string then why not casting is

00:27:35,330 --> 00:27:43,159
right this is before even going to

00:27:40,879 --> 00:27:49,129
frameworks and our ends that help you do

00:27:43,159 --> 00:27:54,799
those stuff someone needs to contribute

00:27:49,129 --> 00:27:57,700
a node 1 to this node.js project yeah

00:27:54,799 --> 00:28:01,190
one of you guys

00:27:57,700 --> 00:28:02,889
open-source you know okay let's see it

00:28:01,190 --> 00:28:06,909
now

00:28:02,889 --> 00:28:09,259
so now sending this request would

00:28:06,909 --> 00:28:11,240
actually fail right I was sending the

00:28:09,259 --> 00:28:12,799
exact request and it's failing it's

00:28:11,240 --> 00:28:15,970
asking for the same user name and

00:28:12,799 --> 00:28:22,429
password problem as we've seen before

00:28:15,970 --> 00:28:24,470
okay alright so moving on so best

00:28:22,429 --> 00:28:27,889
practices for security actually vary

00:28:24,470 --> 00:28:30,409
between different stacks for example

00:28:27,889 --> 00:28:32,480
would it be smart to validate and

00:28:30,409 --> 00:28:34,279
sanitize input before you validate the

00:28:32,480 --> 00:28:37,129
length of the string or the stream that

00:28:34,279 --> 00:28:40,789
you're getting and it makes sense

00:28:37,129 --> 00:28:43,970
because for nodes CPU long time is very

00:28:40,789 --> 00:28:46,070
important so actually kind of the first

00:28:43,970 --> 00:28:47,480
two are in a specific order they're not

00:28:46,070 --> 00:28:49,340
just outdoors bullets so you would want

00:28:47,480 --> 00:28:51,740
to you know validate your lengths and

00:28:49,340 --> 00:28:54,500
types cast it to whatever is expected

00:28:51,740 --> 00:28:55,460
and the rest is just general security

00:28:54,500 --> 00:28:59,179
consideration that you should probably

00:28:55,460 --> 00:29:01,759
take regardless just a small break

00:28:59,179 --> 00:29:06,290
because enough security is like a hard

00:29:01,759 --> 00:29:11,840
thing other kids all right

00:29:06,290 --> 00:29:15,680
all right cool redose regular expression

00:29:11,840 --> 00:29:18,080
dos attacks has been quite interesting

00:29:15,680 --> 00:29:21,200
and happening all around javascript

00:29:18,080 --> 00:29:23,780
frameworks for a very long time and I

00:29:21,200 --> 00:29:25,400
also mentioned one which just a few

00:29:23,780 --> 00:29:27,200
weeks ago received couple of ulnar

00:29:25,400 --> 00:29:28,730
ability updates and it affected an

00:29:27,200 --> 00:29:31,580
entire ecosystem I will show you later

00:29:28,730 --> 00:29:35,810
on so when you think about regular

00:29:31,580 --> 00:29:38,240
expressions by a show of hands who has

00:29:35,810 --> 00:29:42,410
done regular expression at least once in

00:29:38,240 --> 00:29:45,290
his life oh my god there is such a bad

00:29:42,410 --> 00:29:48,080
situation now this is really bad for us

00:29:45,290 --> 00:29:50,120
I will show you why because regular

00:29:48,080 --> 00:29:51,500
expressions are like unicorns you don't

00:29:50,120 --> 00:29:53,420
really know what's going on there

00:29:51,500 --> 00:29:56,090
right or you know it and then five

00:29:53,420 --> 00:29:59,860
minutes afterwards what do they do when

00:29:56,090 --> 00:29:59,860
you try to code review that what is it

00:30:01,720 --> 00:30:07,540
and don't do comments right because has

00:30:04,850 --> 00:30:11,450
time for that so any ideas what that is

00:30:07,540 --> 00:30:13,550
can just kill it that's right it's an IP

00:30:11,450 --> 00:30:17,690
address it's a regular expression that

00:30:13,550 --> 00:30:21,410
matches IP address and when you when you

00:30:17,690 --> 00:30:25,730
write it yeah and it works you're like

00:30:21,410 --> 00:30:31,160
hey it's working for me right now

00:30:25,730 --> 00:30:33,890
matching IP addresses now cool that's so

00:30:31,160 --> 00:30:36,980
cool I'll show you why let's match some

00:30:33,890 --> 00:30:41,990
song titles for our imaginary music apps

00:30:36,980 --> 00:30:46,250
okay and questions keep coming up it's

00:30:41,990 --> 00:30:57,680
good so I'll need your help with this a

00:30:46,250 --> 00:31:00,170
little bit Internet be alive yes okay

00:30:57,680 --> 00:31:02,540
it's pretty or it is slow

00:31:00,170 --> 00:31:06,070
all right so we're matching some titles

00:31:02,540 --> 00:31:08,420
any volunteers to give me a song title

00:31:06,070 --> 00:31:10,600
in English that we don't do UTS stuff

00:31:08,420 --> 00:31:10,600
here

00:31:11,820 --> 00:31:14,869
I like it how would they Tibby do one

00:31:14,220 --> 00:31:17,129
that's good

00:31:14,869 --> 00:31:18,929
near you're having quite an impact here

00:31:17,129 --> 00:31:23,690
regarding you know cultural stuff with a

00:31:18,929 --> 00:31:27,749
TBD song it's good it's good for us

00:31:23,690 --> 00:31:30,389
alright so I'm gonna work on this

00:31:27,749 --> 00:31:34,289
together with you guys basically I'm

00:31:30,389 --> 00:31:36,629
going to use this example of a capturing

00:31:34,289 --> 00:31:39,059
group and then a matching token for any

00:31:36,629 --> 00:31:49,440
alphanumeric and maybe there's a number

00:31:39,059 --> 00:31:55,649
for I don't know some reason right so

00:31:49,440 --> 00:31:57,509
it's working but at four spaces so I'm

00:31:55,649 --> 00:32:04,159
going to add any occurrences of that and

00:31:57,509 --> 00:32:10,830
then a space what for that song again

00:32:04,159 --> 00:32:12,749
this one yeah I don't work because I'm

00:32:10,830 --> 00:32:15,479
actually missing another quantifier to

00:32:12,749 --> 00:32:20,820
have repeating capturing groups I

00:32:15,479 --> 00:32:22,830
believe a everyone are now thinking

00:32:20,820 --> 00:32:25,830
let's get commit it and send it there

00:32:22,830 --> 00:32:32,159
it's working alright I'm done with a

00:32:25,830 --> 00:32:35,299
regex stuff for this print that would be

00:32:32,159 --> 00:32:35,299
a very weird song

00:32:36,000 --> 00:32:45,600
I thirst where the sad part is is when

00:32:43,740 --> 00:32:47,910
you get this user input from someone and

00:32:45,600 --> 00:32:49,470
they're trying to abuse it and they know

00:32:47,910 --> 00:32:51,980
like what's going on with regex and

00:32:49,470 --> 00:32:54,960
they're just mad matching giving that

00:32:51,980 --> 00:32:56,700
exclamation mark you're suddenly going

00:32:54,960 --> 00:32:59,370
and getting this catastrophic

00:32:56,700 --> 00:33:00,000
backtracking this doesn't look good and

00:32:59,370 --> 00:33:01,950
it's red

00:33:00,000 --> 00:33:08,190
I'm not a front-end guy but I know when

00:33:01,950 --> 00:33:10,050
it's red it's not good it's not good all

00:33:08,190 --> 00:33:11,370
right so I'm going to use the rejected

00:33:10,050 --> 00:33:14,760
bugger here to show you what's going on

00:33:11,370 --> 00:33:19,350
there and why we were all kind of stupid

00:33:14,760 --> 00:33:24,800
to write our own reg X's I'm sorry I put

00:33:19,350 --> 00:33:27,240
myself in that boat as well all right so

00:33:24,800 --> 00:33:29,160
the way registers work and what happened

00:33:27,240 --> 00:33:31,710
here we were using greedy quantifiers

00:33:29,160 --> 00:33:34,080
and basically the regex compiler

00:33:31,710 --> 00:33:36,660
computation infinite state machine thing

00:33:34,080 --> 00:33:39,270
is going through the string input that

00:33:36,660 --> 00:33:40,950
we got and it has this matching

00:33:39,270 --> 00:33:43,260
criterias the token and it's trying to

00:33:40,950 --> 00:33:44,910
match them one by one so it's matching

00:33:43,260 --> 00:33:46,590
and matching and matching to the tokens

00:33:44,910 --> 00:33:49,260
through everything that we were having

00:33:46,590 --> 00:33:51,720
that plus at the end and when it reaches

00:33:49,260 --> 00:33:53,820
a point where it doesn't recognize and

00:33:51,720 --> 00:33:55,410
has nothing to do with the exclamation

00:33:53,820 --> 00:33:58,440
mark because there is no token that

00:33:55,410 --> 00:34:01,230
matches that one it's doing a backtrack

00:33:58,440 --> 00:34:03,830
to maybe a shorter less greedy

00:34:01,230 --> 00:34:06,000
quantifier to catch the rest and

00:34:03,830 --> 00:34:09,060
obviously as you can imagine this

00:34:06,000 --> 00:34:10,919
happens for quite a while so we've been

00:34:09,060 --> 00:34:13,200
doing like 80,000 steps and that just

00:34:10,919 --> 00:34:15,720
the browser or the debugger application

00:34:13,200 --> 00:34:16,889
here for reg X 101 just stopping that

00:34:15,720 --> 00:34:18,649
and you know warning you there is a

00:34:16,889 --> 00:34:21,389
backtracking catastrophe going under

00:34:18,649 --> 00:34:23,760
background gotta backtrack in

00:34:21,389 --> 00:34:26,730
catastrophe that just doesn't bad all

00:34:23,760 --> 00:34:29,639
right so this is actually a problem for

00:34:26,730 --> 00:34:32,520
node.js as well it's not on the on the

00:34:29,639 --> 00:34:39,419
browser or just a general one I have

00:34:32,520 --> 00:34:41,560
saved it here this one like this one as

00:34:39,419 --> 00:34:46,240
well

00:34:41,560 --> 00:34:49,750
oh there we go alright so I know you can

00:34:46,240 --> 00:34:50,050
see that one I'll try to it's okay all

00:34:49,750 --> 00:34:53,020
right

00:34:50,050 --> 00:34:55,020
I don't know how hyper yes is stable or

00:34:53,020 --> 00:34:56,590
not so I just want to win it just

00:34:55,020 --> 00:34:59,770
kidding

00:34:56,590 --> 00:35:03,280
so basically I put a time of prep ended

00:34:59,770 --> 00:35:04,800
up Italian command for my node evil one

00:35:03,280 --> 00:35:07,450
and you can see it's the same regex and

00:35:04,800 --> 00:35:11,230
basically the same input and when I run

00:35:07,450 --> 00:35:13,120
it it's once for hours and I don't know

00:35:11,230 --> 00:35:14,950
how many time I actually never waited

00:35:13,120 --> 00:35:18,460
for it to finish it could happen like

00:35:14,950 --> 00:35:22,330
hundred years say a thousand years like

00:35:18,460 --> 00:35:23,290
a million years like a billion years so

00:35:22,330 --> 00:35:28,240
I didn't wait you get a point

00:35:23,290 --> 00:35:29,740
all right so I'm so it's important to

00:35:28,240 --> 00:35:30,880
understand this because when you guys

00:35:29,740 --> 00:35:33,400
are writing regex

00:35:30,880 --> 00:35:34,780
on your node side you are basically

00:35:33,400 --> 00:35:36,790
because this is node and this is not

00:35:34,780 --> 00:35:38,440
some multi-threading up your basically

00:35:36,790 --> 00:35:41,290
blocking that event though because this

00:35:38,440 --> 00:35:43,960
is CPU bound operation no doesn't know

00:35:41,290 --> 00:35:45,760
how to take this regex problem and put

00:35:43,960 --> 00:35:47,320
it on you know worker thread or

00:35:45,760 --> 00:35:48,970
something else you are doing that as

00:35:47,320 --> 00:35:50,830
part of your JavaScript call stack and

00:35:48,970 --> 00:35:52,600
now everything is waiting for this to

00:35:50,830 --> 00:35:54,610
finish so if you have this problem on

00:35:52,600 --> 00:35:56,290
your node.js project you might be

00:35:54,610 --> 00:35:57,610
susceptible to the same regular

00:35:56,290 --> 00:35:59,260
expression dos attacks that has been

00:35:57,610 --> 00:36:03,190
happening for other JavaScript

00:35:59,260 --> 00:36:03,920
frameworks alright so back to the

00:36:03,190 --> 00:36:05,460
presentation

00:36:03,920 --> 00:36:09,690
[Music]

00:36:05,460 --> 00:36:09,690
great having fun with the hands-on stuff

00:36:12,060 --> 00:36:18,550
all right so you are matching it and

00:36:15,610 --> 00:36:23,230
when it's kind of blew up on us it's

00:36:18,550 --> 00:36:26,760
like Brittany is like and then I knew

00:36:23,230 --> 00:36:29,650
that would happen to you all right so

00:36:26,760 --> 00:36:32,740
regular expressions of attacks we talked

00:36:29,650 --> 00:36:35,590
about some of it but don't think that a

00:36:32,740 --> 00:36:37,960
really large or a weird or a complex

00:36:35,590 --> 00:36:42,070
project attack string can be a problem

00:36:37,960 --> 00:36:46,270
it can also happen for very short regex

00:36:42,070 --> 00:36:47,590
expressions so that's why I'm going to

00:36:46,270 --> 00:36:51,430
show you that regex

00:36:47,590 --> 00:36:54,190
is a real problem I put the rest like

00:36:51,430 --> 00:36:55,390
the older ones except MS awhile ago and

00:36:54,190 --> 00:36:57,549
then MS that

00:36:55,390 --> 00:36:58,960
every which we can go in a second and I

00:36:57,549 --> 00:37:01,319
will show that has like three million

00:36:58,960 --> 00:37:04,210
downloads a month or something like that

00:37:01,319 --> 00:37:06,880
has had the same problem which was

00:37:04,210 --> 00:37:09,839
acceptable to the exact same problem

00:37:06,880 --> 00:37:11,859
regular expressions that ms is doing and

00:37:09,839 --> 00:37:13,960
the rest you're pretty familiar with

00:37:11,859 --> 00:37:17,559
them as well right marked uglify a

00:37:13,960 --> 00:37:19,690
moment for pretty popular and PM

00:37:17,559 --> 00:37:23,500
repositories around the nogf psycho

00:37:19,690 --> 00:37:27,069
system so what are some regex best

00:37:23,500 --> 00:37:29,589
practices for you guys I have this paper

00:37:27,069 --> 00:37:35,349
that you guys need to read it's on how

00:37:29,589 --> 00:37:37,119
to write regular expressions and I give

00:37:35,349 --> 00:37:39,069
it to you guys just pass it along and

00:37:37,119 --> 00:37:40,559
this is I already talked with all of

00:37:39,069 --> 00:37:44,589
your team managers you want to take it

00:37:40,559 --> 00:37:47,190
so basically you have to read it through

00:37:44,589 --> 00:37:49,480
before you implement another regex

00:37:47,190 --> 00:37:55,779
and i'm just kidding i know no one will

00:37:49,480 --> 00:37:57,010
read it so what it is so because i know

00:37:55,779 --> 00:38:01,480
none of you will read it because you're

00:37:57,010 --> 00:38:02,799
lazy people developers are so lazy so

00:38:01,480 --> 00:38:07,480
here's the first regex

00:38:02,799 --> 00:38:11,730
best practice right don't write it why I

00:38:07,480 --> 00:38:21,430
write it and the next one is my favorite

00:38:11,730 --> 00:38:25,809
you guys would love it there we go can I

00:38:21,430 --> 00:38:30,009
continue if you guys get it alright so

00:38:25,809 --> 00:38:31,750
the real one is basically if you need to

00:38:30,009 --> 00:38:33,160
validate some kind of you know

00:38:31,750 --> 00:38:35,619
expressions that they're going on and

00:38:33,160 --> 00:38:36,640
they're okay there's this validator no

00:38:35,619 --> 00:38:39,400
J's I read that you're talking about

00:38:36,640 --> 00:38:43,660
before and you can use it it's pretty

00:38:39,400 --> 00:38:45,910
popular and the thing is you're now all

00:38:43,660 --> 00:38:47,460
floating the risk to someone else and we

00:38:45,910 --> 00:38:48,670
if you pay attention before in a

00:38:47,460 --> 00:38:51,700
previous slide

00:38:48,670 --> 00:38:53,680
it was also problematic with some of the

00:38:51,700 --> 00:38:55,779
regex says that it was using but at

00:38:53,680 --> 00:38:58,390
least someone else is trying to attack

00:38:55,779 --> 00:39:00,880
and break this one and there's a lot of

00:38:58,390 --> 00:39:03,549
other people also trying to fix it so

00:39:00,880 --> 00:39:08,319
it's probably safer you try to offload

00:39:03,549 --> 00:39:09,040
this thing and it has all of these red X

00:39:08,319 --> 00:39:10,930
patterns

00:39:09,040 --> 00:39:13,359
pretty pretty common around the industry

00:39:10,930 --> 00:39:16,210
like is it I don't know basic t4 is a

00:39:13,359 --> 00:39:17,650
date is it ipv4 is it email so they

00:39:16,210 --> 00:39:19,869
don't have to write all of those things

00:39:17,650 --> 00:39:23,230
and maybe mess it up okay because we

00:39:19,869 --> 00:39:25,900
don't really know for situations where I

00:39:23,230 --> 00:39:30,310
get it that sometimes your regex pattern

00:39:25,900 --> 00:39:31,510
is I would say very custom to what you

00:39:30,310 --> 00:39:33,130
have and there's nothing else to do

00:39:31,510 --> 00:39:35,380
about it there's this library called

00:39:33,130 --> 00:39:38,530
safe projects where if you're using it

00:39:35,380 --> 00:39:40,270
it's going to try and detect what are

00:39:38,530 --> 00:39:41,560
your rejects that you've put it as an

00:39:40,270 --> 00:39:44,230
input string or do you know just a regex

00:39:41,560 --> 00:39:47,859
expression in JavaScript is okay or not

00:39:44,230 --> 00:39:50,140
so I hope you're not giving the regex

00:39:47,859 --> 00:39:52,920
expression from an input string from the

00:39:50,140 --> 00:39:55,830
user because that would be bad but

00:39:52,920 --> 00:40:01,390
that's an example of how that would work

00:39:55,830 --> 00:40:05,260
you had to test it alright so moving on

00:40:01,390 --> 00:40:07,990
to the other thing which I really like

00:40:05,260 --> 00:40:15,850
and kind of relate to secure dependences

00:40:07,990 --> 00:40:17,650
and that is security ops everyone are

00:40:15,850 --> 00:40:21,220
doing CIT D I really hope you're doing

00:40:17,650 --> 00:40:26,340
tests but how would you know around the

00:40:21,220 --> 00:40:32,650
nodejs ecosystem which has more models

00:40:26,340 --> 00:40:38,760
mass than a black hole how would you

00:40:32,650 --> 00:40:40,580
know that they are safe right because

00:40:38,760 --> 00:40:43,500
you're developing nodejs applications

00:40:40,580 --> 00:40:45,570
that's probably the basic question that

00:40:43,500 --> 00:40:46,890
you would have to ask yourself when

00:40:45,570 --> 00:40:48,630
you're going into production and having

00:40:46,890 --> 00:40:50,460
this security mindset along with all

00:40:48,630 --> 00:40:52,560
other questions this is one of them

00:40:50,460 --> 00:40:55,830
because you are now using open source

00:40:52,560 --> 00:40:58,080
models that someone else wrote maybe one

00:40:55,830 --> 00:41:00,030
of you guys here wrote it but we don't

00:40:58,080 --> 00:41:04,290
know if it says it's if it's okay if

00:41:00,030 --> 00:41:06,240
someone checked it so I want to

00:41:04,290 --> 00:41:09,830
introduce you to a case and this tool

00:41:06,240 --> 00:41:09,830
which will sit through the example

00:41:29,640 --> 00:41:41,110
we're going to run it again to just give

00:41:31,720 --> 00:41:47,080
you the context for it so I'm logged in

00:41:41,110 --> 00:41:50,440
and I have these memos checkbox up text

00:41:47,080 --> 00:41:53,590
area that maybe I want to leave a memo

00:41:50,440 --> 00:41:58,140
for someone so it would be something

00:41:53,590 --> 00:41:58,140
like this oh yeah

00:41:58,470 --> 00:42:05,250
dry runs want to remove this one

00:42:22,150 --> 00:42:27,920
yeah we're still stuck on that one as

00:42:24,680 --> 00:42:29,720
well all right so have a large 8 zeros

00:42:27,920 --> 00:42:32,090
and then comes a request from

00:42:29,720 --> 00:42:34,610
requirements product whatever and you're

00:42:32,090 --> 00:42:36,950
like hey maybe do it to markdown style

00:42:34,610 --> 00:42:38,540
so it can be a little bit prettier so

00:42:36,950 --> 00:42:43,360
you can do stuff like this would be a

00:42:38,540 --> 00:42:47,840
title may be right but it doesn't work

00:42:43,360 --> 00:42:49,250
so you go around then you ask well it's

00:42:47,840 --> 00:42:52,270
probably a JavaScript are ready to do it

00:42:49,250 --> 00:42:54,890
right and marked it's pretty popular

00:42:52,270 --> 00:42:57,980
with doing that so I have it already

00:42:54,890 --> 00:43:02,740
installed and I'll go and we had it

00:42:57,980 --> 00:43:13,010
before I'll just add it again just

00:43:02,740 --> 00:43:17,830
adding it here can just put it before of

00:43:13,010 --> 00:43:17,830
my routes which would be so good this

00:43:18,430 --> 00:43:24,200
sometimes you don't really remember the

00:43:20,500 --> 00:43:29,090
syntax for it so this is useful it's

00:43:24,200 --> 00:43:33,200
running NPM home marked and should bring

00:43:29,090 --> 00:43:35,710
it up here or it's not you know it's

00:43:33,200 --> 00:43:35,710
going under

00:43:37,710 --> 00:43:45,240
trying to oh I have it probably in a

00:43:40,109 --> 00:43:49,049
different window weird okay so this one

00:43:45,240 --> 00:43:55,289
I just internet completely light in

00:43:49,049 --> 00:43:56,930
general I guess alright so let's try it

00:43:55,289 --> 00:44:00,750
I guess I remember some of it

00:43:56,930 --> 00:44:02,640
let's set options and then I wanted to

00:44:00,750 --> 00:44:06,420
give it a special one which I remember

00:44:02,640 --> 00:44:09,119
to be sanitized true and that means it's

00:44:06,420 --> 00:44:11,640
taking extra caution when it's doing

00:44:09,119 --> 00:44:13,559
those sanitization on the HTML input

00:44:11,640 --> 00:44:17,039
that you're giving it and of course I

00:44:13,559 --> 00:44:27,779
have to pull it out the local variable

00:44:17,039 --> 00:44:30,650
so I can use it in the memos view if I

00:44:27,779 --> 00:44:30,650
got this stuff working

00:44:33,259 --> 00:44:37,079
yeah now internet for us but we don't

00:44:36,839 --> 00:44:43,019
need it

00:44:37,079 --> 00:44:45,420
oh so what I actually want to do is

00:44:43,019 --> 00:44:49,019
since we're testing it on a different

00:44:45,420 --> 00:44:50,670
library I want to go ahead and show you

00:44:49,019 --> 00:44:53,130
a situation where we actually did it

00:44:50,670 --> 00:44:58,700
have that content security policy right

00:44:53,130 --> 00:45:05,400
in right because otherwise not connect

00:44:58,700 --> 00:45:10,410
it's okay I need it for now okay yeah so

00:45:05,400 --> 00:45:13,039
you still have that I'm gonna move this

00:45:10,410 --> 00:45:13,039
for a second

00:45:16,880 --> 00:45:25,369
hey worked amazing the world of

00:45:21,869 --> 00:45:31,230
JavaScript all right

00:45:25,369 --> 00:45:33,420
get rolling good ecosystem so so far so

00:45:31,230 --> 00:45:36,450
good right but what happens if someone

00:45:33,420 --> 00:45:46,380
gives you a link I hope this is the

00:45:36,450 --> 00:45:48,809
right markdown syntax and that would

00:45:46,380 --> 00:45:52,950
basically if Internet work here

00:45:48,809 --> 00:45:56,579
would have worked but the problem there

00:45:52,950 --> 00:46:02,700
is what happens if we try to inject it

00:45:56,579 --> 00:46:10,099
with the same script alert right so I'm

00:46:02,700 --> 00:46:17,819
gonna try doing that and then JavaScript

00:46:10,099 --> 00:46:19,829
alert 1 it doesn't really work for me so

00:46:17,819 --> 00:46:21,299
I'm kind of frustrated hackers you know

00:46:19,829 --> 00:46:23,489
those they're kind of have those hoodies

00:46:21,299 --> 00:46:29,130
stay at home all day try to hack other

00:46:23,489 --> 00:46:30,089
stuff so I'm gonna give it to be

00:46:29,130 --> 00:46:31,769
challenging I'm going to give it another

00:46:30,089 --> 00:46:35,759
try and I'm going to try and use

00:46:31,769 --> 00:46:38,130
something which is HTML and it is to try

00:46:35,759 --> 00:46:43,489
and flick it and see if it catches that

00:46:38,130 --> 00:46:43,489
one so remember correctly

00:46:48,680 --> 00:46:54,660
what I'm trying to do here is this is

00:46:52,170 --> 00:46:59,040
the HTML entity that corresponds with a

00:46:54,660 --> 00:47:02,970
colon and the same for closing the

00:46:59,040 --> 00:47:04,619
brackets and it still doesn't work so

00:47:02,970 --> 00:47:08,810
it's catching up pretty well in the

00:47:04,619 --> 00:47:11,099
sanitizer but browser they have this

00:47:08,810 --> 00:47:13,109
they have this things where they're

00:47:11,099 --> 00:47:15,240
trying to be really nice all the times

00:47:13,109 --> 00:47:17,670
like the nicest software did you ever

00:47:15,240 --> 00:47:21,720
try to give it a broken HTML with broken

00:47:17,670 --> 00:47:23,040
dibs what happens it fixes it because

00:47:21,720 --> 00:47:25,560
it's oh now he's trying to please you

00:47:23,040 --> 00:47:34,880
it's like hey your front end guys I'm

00:47:25,560 --> 00:47:37,589
going to work for you right I can see it

00:47:34,880 --> 00:47:39,900
alright so what I'm going to do is try

00:47:37,589 --> 00:47:41,280
to fool it and give it a valid character

00:47:39,900 --> 00:47:45,690
for JavaScript that's going to evaluate

00:47:41,280 --> 00:47:50,579
later and basically I know this works

00:47:45,690 --> 00:47:53,099
I'll show you just show you that we were

00:47:50,579 --> 00:47:56,099
able to circumvent the sanitization that

00:47:53,099 --> 00:47:57,810
happens on marked library and this is is

00:47:56,099 --> 00:48:01,140
one of the reasons that it was

00:47:57,810 --> 00:48:08,240
vulnerable before and I don't know if we

00:48:01,140 --> 00:48:12,650
still have internet github marked oh

00:48:08,240 --> 00:48:15,829
wait it's working I go yeah just turn up

00:48:12,650 --> 00:48:15,829
thank you

00:48:16,160 --> 00:48:27,170
so we've all been using it it's pretty

00:48:18,540 --> 00:48:30,510
simple it's pretty popular as well right

00:48:27,170 --> 00:48:32,940
in theory if we hadn't put any security

00:48:30,510 --> 00:48:34,890
mechanism or testing around this one all

00:48:32,940 --> 00:48:37,500
of those three million downloads people

00:48:34,890 --> 00:48:39,390
in theory were getting the same infected

00:48:37,500 --> 00:48:41,940
version or vulnerable version or

00:48:39,390 --> 00:48:43,530
susceptible to the same problem assuming

00:48:41,940 --> 00:48:45,180
they didn't encode and decode it you

00:48:43,530 --> 00:48:47,520
know the other way with just passing on

00:48:45,180 --> 00:48:49,410
that input and doing like with it and

00:48:47,520 --> 00:48:52,200
probably that's the majority of people

00:48:49,410 --> 00:48:55,170
right so how do we deal with these

00:48:52,200 --> 00:48:57,000
problems and by the way I remove the

00:48:55,170 --> 00:48:57,960
helmet content security policy because

00:48:57,000 --> 00:48:59,520
if we had it

00:48:57,960 --> 00:49:00,690
you were actually being protected from

00:48:59,520 --> 00:49:02,339
it and you wouldn't see that demo

00:49:00,690 --> 00:49:07,020
running right so that's another reason

00:49:02,339 --> 00:49:12,420
why you have security in layers so going

00:49:07,020 --> 00:49:17,730
over to my slides all right so what is

00:49:12,420 --> 00:49:23,010
sneak so sneak is relatively new tool

00:49:17,730 --> 00:49:27,240
for security and what it does is it on

00:49:23,010 --> 00:49:30,119
the slides as well for you guys so what

00:49:27,240 --> 00:49:32,150
it does is it basically it's a tool in a

00:49:30,119 --> 00:49:35,700
platform they are very much open-source

00:49:32,150 --> 00:49:37,170
so the researchers team behind it

00:49:35,700 --> 00:49:39,780
security research researchers are

00:49:37,170 --> 00:49:42,089
maintaining this CDE the common

00:49:39,780 --> 00:49:44,940
vulnerability database for all of the

00:49:42,089 --> 00:49:46,380
known issues around NPM packages or they

00:49:44,940 --> 00:49:49,530
have actually expanded to Ruby and

00:49:46,380 --> 00:49:51,359
they're doing Java now I think and you

00:49:49,530 --> 00:49:52,859
know front-end and and all this of

00:49:51,359 --> 00:49:55,650
course talk goes to front-end and

00:49:52,859 --> 00:49:58,440
back-end developers regardless so what

00:49:55,650 --> 00:50:00,990
it does is when you install it and use

00:49:58,440 --> 00:50:02,700
it it's going to check your package JSON

00:50:00,990 --> 00:50:04,950
for the dependencies that you want to

00:50:02,700 --> 00:50:07,410
rely on and it's going to record all of

00:50:04,950 --> 00:50:09,780
your node modules directory as well and

00:50:07,410 --> 00:50:12,030
check and match those to what you have

00:50:09,780 --> 00:50:14,520
and then it's going and looking at it

00:50:12,030 --> 00:50:15,510
open source database that anyone can go

00:50:14,520 --> 00:50:17,940
in and see all of those vulnerabilities

00:50:15,510 --> 00:50:20,820
and the patches for them and tell you if

00:50:17,940 --> 00:50:24,119
it's vulnerable or not you're not the

00:50:20,820 --> 00:50:25,500
newest like tool that was doing it and a

00:50:24,119 --> 00:50:27,540
speed another security project was doing

00:50:25,500 --> 00:50:30,359
it as well but it was kind of sleepy and

00:50:27,540 --> 00:50:31,530
doing during that you know non security

00:50:30,359 --> 00:50:32,790
mindset that's what's happening for

00:50:31,530 --> 00:50:34,589
developers it didn't really get any

00:50:32,790 --> 00:50:36,000
attention when these guys came in they

00:50:34,589 --> 00:50:37,650
put a whole platform around it and

00:50:36,000 --> 00:50:39,810
they're pretty much working a lot

00:50:37,650 --> 00:50:42,140
together so I want to show you how that

00:50:39,810 --> 00:50:42,140
works

00:50:50,170 --> 00:50:57,590
so if I were just a we need internet so

00:50:53,330 --> 00:50:59,030
I hope this works actually so basically

00:50:57,590 --> 00:51:00,680
just by running sneak test I just

00:50:59,030 --> 00:51:03,250
installed it the NPM install you know

00:51:00,680 --> 00:51:05,930
ministry or on whatever is your favorite

00:51:03,250 --> 00:51:16,580
it's going to check what I have

00:51:05,930 --> 00:51:18,380
installed I thought we had a problem in

00:51:16,580 --> 00:51:23,750
Israel where we're commuting to work and

00:51:18,380 --> 00:51:27,230
camels but no all right so until that

00:51:23,750 --> 00:51:31,310
works have a screenshot for it just in

00:51:27,230 --> 00:51:34,280
case so as you can see it found when I

00:51:31,310 --> 00:51:36,740
ran it it found some defendants some

00:51:34,280 --> 00:51:38,570
vulnerabilities in my packages and it

00:51:36,740 --> 00:51:40,700
has it gonna tell you if it's a high or

00:51:38,570 --> 00:51:43,100
low one by no standards of industry that

00:51:40,700 --> 00:51:44,690
they rate and you have that you know

00:51:43,100 --> 00:51:47,780
this is a regular expression in one of

00:51:44,690 --> 00:51:49,070
the dependencies the below one is

00:51:47,780 --> 00:51:52,190
actually pretty interesting the aldehyde

00:51:49,070 --> 00:51:53,540
is which you would say ugly Phi J s I

00:51:52,190 --> 00:51:55,460
don't know it's like our build tool I

00:51:53,540 --> 00:51:57,980
run it through web golf grunt whatever

00:51:55,460 --> 00:52:00,020
so I don't really care and it's okay you

00:51:57,980 --> 00:52:01,610
can you okay if you don't care about it

00:52:00,020 --> 00:52:04,280
if you just minifying your stuff on the

00:52:01,610 --> 00:52:06,770
server you know before you serve it but

00:52:04,280 --> 00:52:08,270
you should know about it and the most

00:52:06,770 --> 00:52:11,540
interesting thing that happens here is

00:52:08,270 --> 00:52:16,940
you can move my mouse or point with this

00:52:11,540 --> 00:52:18,560
one but basically it's not just about

00:52:16,940 --> 00:52:20,270
your dependencies right there is the

00:52:18,560 --> 00:52:21,890
notion of transient dependencies that

00:52:20,270 --> 00:52:25,340
I'm getting from other dependencies so

00:52:21,890 --> 00:52:27,920
I'm actually trusting another dependency

00:52:25,340 --> 00:52:31,550
and it's dependencies so it can show you

00:52:27,920 --> 00:52:34,250
that true sneak and mocha and glove and

00:52:31,550 --> 00:52:36,050
mini much that the dependency tree of Y

00:52:34,250 --> 00:52:38,150
mini match and how you got it and white

00:52:36,050 --> 00:52:39,440
vulnerable for you so you can go ahead

00:52:38,150 --> 00:52:40,580
and figure out hey maybe I want to

00:52:39,440 --> 00:52:42,440
upgrade many much for a new version

00:52:40,580 --> 00:52:43,850
which is possible maybe I just want to

00:52:42,440 --> 00:52:45,830
patch that one which the tool also

00:52:43,850 --> 00:52:47,600
provides they we just want to switch

00:52:45,830 --> 00:52:49,340
from my Donal globe to something else

00:52:47,600 --> 00:52:50,810
you just want to wait it out and you

00:52:49,340 --> 00:52:54,280
know all right take the risk or

00:52:50,810 --> 00:52:54,280
vulnerable to teach you know about it

00:52:58,059 --> 00:53:03,950
all right so this isn't really working

00:53:00,559 --> 00:53:07,910
and I don't have previous history but if

00:53:03,950 --> 00:53:10,510
I did you would basically see that a on

00:53:07,910 --> 00:53:13,609
this project it would a find marked and

00:53:10,510 --> 00:53:16,640
MS which this project still uses and all

00:53:13,609 --> 00:53:19,549
these all over the place and basically

00:53:16,640 --> 00:53:25,910
it would just pawn a lot of security

00:53:19,549 --> 00:53:28,059
vulnerabilities right so back to the

00:53:25,910 --> 00:53:28,059
slides

00:53:28,660 --> 00:53:33,740
all right so and this is a true story

00:53:31,579 --> 00:53:35,270
when we do see ICD came in in my team

00:53:33,740 --> 00:53:36,980
I'm doing the same I'm running the tests

00:53:35,270 --> 00:53:40,280
on every PR and every commit in the

00:53:36,980 --> 00:53:42,650
office and we've added sneak as well so

00:53:40,280 --> 00:53:44,750
when we when developers are now adding

00:53:42,650 --> 00:53:47,180
suddenly marked for some feature or some

00:53:44,750 --> 00:53:48,770
other vulnerable library the PR you know

00:53:47,180 --> 00:53:51,200
the input that you have there is going

00:53:48,770 --> 00:53:52,760
to tell you hey you have a vulnerability

00:53:51,200 --> 00:53:54,829
in the package that we just introduced

00:53:52,760 --> 00:53:56,930
this is really cool because you can use

00:53:54,829 --> 00:53:58,520
it in open source projects as well but

00:53:56,930 --> 00:54:00,410
all the github integrations so you're

00:53:58,520 --> 00:54:02,690
not just getting Travis and coveralls

00:54:00,410 --> 00:54:04,460
updater knowing if your project is

00:54:02,690 --> 00:54:07,420
up-to-date with dependencies if your

00:54:04,460 --> 00:54:10,930
project is vulnerable or not

00:54:07,420 --> 00:54:14,329
alright so to conclude this session I

00:54:10,930 --> 00:54:15,740
really want to leave you with this

00:54:14,329 --> 00:54:19,089
because I know it was a lot of topics

00:54:15,740 --> 00:54:22,369
but just take those bullets and you know

00:54:19,089 --> 00:54:24,290
HTTP headers can help a lot no SQL

00:54:22,369 --> 00:54:26,000
injections happen so this is all about

00:54:24,290 --> 00:54:27,349
really the notion Jackson was just a

00:54:26,000 --> 00:54:29,569
story to tell you to sanitize you know

00:54:27,349 --> 00:54:32,140
your input and stuff like that avoid

00:54:29,569 --> 00:54:37,099
your own reg X as well as you can and

00:54:32,140 --> 00:54:40,900
sneak or Y on to secure NPM dependencies

00:54:37,099 --> 00:54:47,709
as well that's it

00:54:40,900 --> 00:54:47,709

YouTube URL: https://www.youtube.com/watch?v=DX8FSC_7wRI


