Title: JSHeroes 2017 | Gautam Arora - From Localhost to Production
Publication date: 2017-06-23
Playlist: JSHeroes 2017
Description: 
	This talk is a practical introduction to production deployment of node.js applications. In this talk, I will share my journey of gaining a better understanding of managing production websites and becoming more confident in delivering solutions that scale. I will go over Node Clusters, MongoDB Replicas, Reverse Proxies, Load Balancers, CDNs and more with demos and real world scenarios of usage. With this knowledge, developers will be able to have a better understanding of production deployments and also learn that some problems can be solved without writing a single line of code.
Captions: 
	00:00:10,240 --> 00:00:16,790
hi everybody I'm Guatemala and I'm here

00:00:14,720 --> 00:00:18,619
to talk to you about taking your

00:00:16,790 --> 00:00:20,660
applications from localhost to

00:00:18,619 --> 00:00:24,619
production and now I do realize that

00:00:20,660 --> 00:00:26,689
it's a very large topic production mean

00:00:24,619 --> 00:00:28,880
can mean a lot of different things right

00:00:26,689 --> 00:00:30,680
it can mean the code that we write and

00:00:28,880 --> 00:00:33,290
the best practices involved it could

00:00:30,680 --> 00:00:35,720
mean about the server's it could be

00:00:33,290 --> 00:00:37,760
about CIC the pipeline's it could be

00:00:35,720 --> 00:00:40,250
about configuration management it could

00:00:37,760 --> 00:00:41,989
be about monitoring it could be about so

00:00:40,250 --> 00:00:44,780
many different things but we have to

00:00:41,989 --> 00:00:46,870
pick a topic for today and talk about

00:00:44,780 --> 00:00:49,850
that so what I will be focusing on is

00:00:46,870 --> 00:00:53,300
understanding the building blocks for

00:00:49,850 --> 00:00:56,329
web application delivery and I'll walk

00:00:53,300 --> 00:00:58,760
to you on why I believe that is a very

00:00:56,329 --> 00:01:00,230
important topic and I feel that's

00:00:58,760 --> 00:01:02,660
something that needs to be discussed

00:01:00,230 --> 00:01:05,600
more especially if you are like a

00:01:02,660 --> 00:01:09,260
JavaScript developer a little bit about

00:01:05,600 --> 00:01:12,770
myself I'm a director of developer

00:01:09,260 --> 00:01:13,970
evangelism and growth at Conde Nast and

00:01:12,770 --> 00:01:16,700
I'll touch a little bit on what

00:01:13,970 --> 00:01:18,470
corniness does I'm a co-organizer of New

00:01:16,700 --> 00:01:21,730
York JavaScript where I work with a lot

00:01:18,470 --> 00:01:25,310
of developers in my community and I have

00:01:21,730 --> 00:01:26,870
been seeing a lot of questions that come

00:01:25,310 --> 00:01:29,420
from them these are developers that are

00:01:26,870 --> 00:01:31,580
just getting started with react with

00:01:29,420 --> 00:01:33,530
node and they know how to get their

00:01:31,580 --> 00:01:35,420
applications off the ground really

00:01:33,530 --> 00:01:36,980
quickly and that's the beauty of the

00:01:35,420 --> 00:01:39,350
jobs of ecosystem that we live in right

00:01:36,980 --> 00:01:41,720
like you just write a few lines of code

00:01:39,350 --> 00:01:44,450
you do create react app and your

00:01:41,720 --> 00:01:46,190
application is in production and then as

00:01:44,450 --> 00:01:48,350
a production I mean runs on Heroku or

00:01:46,190 --> 00:01:51,440
something right and then you get a real

00:01:48,350 --> 00:01:54,410
job in a real company and it gives you

00:01:51,440 --> 00:01:55,940
access to production systems and you

00:01:54,410 --> 00:01:58,040
look clueless you're like I don't know

00:01:55,940 --> 00:01:59,270
how this is all set up the other day on

00:01:58,040 --> 00:02:01,460
reddit I don't know if you saw that

00:01:59,270 --> 00:02:03,320
article about somebody who deleted a

00:02:01,460 --> 00:02:05,480
production database while they were

00:02:03,320 --> 00:02:08,390
getting owned on-boarded and those

00:02:05,480 --> 00:02:10,519
problems are real and when I joined a

00:02:08,390 --> 00:02:12,709
large organization myself I used to be

00:02:10,519 --> 00:02:15,050
worried about that I was always worried

00:02:12,709 --> 00:02:16,670
about bringing my site down so we'll

00:02:15,050 --> 00:02:20,090
talk about my worries which I'll get

00:02:16,670 --> 00:02:23,150
into in detail I'm also a curator of a

00:02:20,090 --> 00:02:25,599
website called full stack Jesco

00:02:23,150 --> 00:02:28,159
this was basically my learning from

00:02:25,599 --> 00:02:30,379
basically trying to understand all the

00:02:28,159 --> 00:02:33,769
different pieces that come together that

00:02:30,379 --> 00:02:36,019
make our special snowflake of an

00:02:33,769 --> 00:02:38,689
application there's so many different

00:02:36,019 --> 00:02:41,810
pieces to learn about and I think Paul

00:02:38,689 --> 00:02:45,260
touched on it in the keynote today that

00:02:41,810 --> 00:02:47,450
it's so important for us to be aware of

00:02:45,260 --> 00:02:49,909
the larger systems that come into play

00:02:47,450 --> 00:02:51,950
so full statue is calm it touches on

00:02:49,909 --> 00:02:54,769
that and if you want to talk to me I'm

00:02:51,950 --> 00:02:56,239
going on Twitter so a little bit about

00:02:54,769 --> 00:02:59,359
calling us what is called an ask on an

00:02:56,239 --> 00:03:01,670
EFT is a magazine publisher V you might

00:02:59,359 --> 00:03:06,620
know us through our brands like wild

00:03:01,670 --> 00:03:09,139
arstechnica Vanity Fair full GQ corners

00:03:06,620 --> 00:03:12,109
traveler Epicurious born app so

00:03:09,139 --> 00:03:16,340
basically a large collection of website

00:03:12,109 --> 00:03:18,230
and what we focus on is serving a large

00:03:16,340 --> 00:03:20,720
global audience so we have a global

00:03:18,230 --> 00:03:22,909
audience of 100 million and we have a

00:03:20,720 --> 00:03:25,189
lot of these brands and we focus on user

00:03:22,909 --> 00:03:28,879
experience so a lot of our team members

00:03:25,189 --> 00:03:31,150
are rock star front-end developers and

00:03:28,879 --> 00:03:34,970
are always thinking about building

00:03:31,150 --> 00:03:37,909
high-performing web applications at home

00:03:34,970 --> 00:03:40,659
at a very like 10,000 foot level view

00:03:37,909 --> 00:03:43,190
the vivia set up is very similar to any

00:03:40,659 --> 00:03:45,680
traditional organization we use a

00:03:43,190 --> 00:03:48,260
content management system API that is

00:03:45,680 --> 00:03:50,389
built on top of node you could use

00:03:48,260 --> 00:03:51,859
WordPress you could use triple at the

00:03:50,389 --> 00:03:53,870
end of the day you basically need an API

00:03:51,859 --> 00:03:55,549
that has all of this content and we

00:03:53,870 --> 00:03:59,449
split the system of our own that we use

00:03:55,549 --> 00:04:01,340
user users node users happy to us on top

00:03:59,449 --> 00:04:04,819
of that are all our brand site

00:04:01,340 --> 00:04:06,260
experiences we have about like four if

00:04:04,819 --> 00:04:08,389
you have 20 brands we have 20 brand

00:04:06,260 --> 00:04:10,519
teams each of these brand teams build

00:04:08,389 --> 00:04:13,370
these websites so now we have a lot of

00:04:10,519 --> 00:04:15,290
diversity in the different stacks that

00:04:13,370 --> 00:04:17,900
they are using so we are working on

00:04:15,290 --> 00:04:20,690
standardization across those tags and on

00:04:17,900 --> 00:04:22,659
top of that you have heard of new

00:04:20,690 --> 00:04:25,789
technologies coming like google amp

00:04:22,659 --> 00:04:27,860
Facebook instant articles Apple news so

00:04:25,789 --> 00:04:29,810
we because we are publisher we always

00:04:27,860 --> 00:04:30,919
have to stay on top of these things and

00:04:29,810 --> 00:04:33,139
we have to keep building for these

00:04:30,919 --> 00:04:34,669
different platforms so we have a team

00:04:33,139 --> 00:04:35,780
that is dedicated to building a

00:04:34,669 --> 00:04:37,820
distribution plan

00:04:35,780 --> 00:04:40,160
forms as well as building chat boards

00:04:37,820 --> 00:04:41,900
building we are building a are all the

00:04:40,160 --> 00:04:43,850
cool stuff the reason that I've

00:04:41,900 --> 00:04:46,970
highlighted the travelers over there is

00:04:43,850 --> 00:04:49,190
because before I joined EV evangelism

00:04:46,970 --> 00:04:52,400
I was the tech lead at korrina's

00:04:49,190 --> 00:04:54,740
traveler and a little bit about myself

00:04:52,400 --> 00:04:56,980
was that I had the previously been a

00:04:54,740 --> 00:04:59,810
Java developer I know it looks like Java

00:04:56,980 --> 00:05:01,790
like giving away your age so I was a

00:04:59,810 --> 00:05:04,040
Java developer and then a PHP developer

00:05:01,790 --> 00:05:07,639
in a startup and I experienced I was

00:05:04,040 --> 00:05:10,790
very shielded by my DevOps teams like if

00:05:07,639 --> 00:05:13,340
I I never had to worry about anything

00:05:10,790 --> 00:05:16,130
server fire like I would just like do my

00:05:13,340 --> 00:05:17,870
code write my queries shipping away the

00:05:16,130 --> 00:05:19,610
DBA would make sure that the queries

00:05:17,870 --> 00:05:22,100
were all good and what tell me when they

00:05:19,610 --> 00:05:23,810
weren't and then my dev of folks would

00:05:22,100 --> 00:05:26,090
make sure that the application is

00:05:23,810 --> 00:05:29,870
performing well I just focused on code

00:05:26,090 --> 00:05:32,990
wonderful but when I became a tech lead

00:05:29,870 --> 00:05:35,660
and join Conan asked I realized my team

00:05:32,990 --> 00:05:38,360
of four people was responsible for

00:05:35,660 --> 00:05:40,280
everything we were responsible for the

00:05:38,360 --> 00:05:43,520
front-end code the backend code the

00:05:40,280 --> 00:05:44,240
server's the security everything and I

00:05:43,520 --> 00:05:46,460
had nightmares

00:05:44,240 --> 00:05:48,740
I would I would always write that my

00:05:46,460 --> 00:05:50,570
site will go down and down it did it

00:05:48,740 --> 00:05:52,250
wasn't that like no we're building these

00:05:50,570 --> 00:05:54,740
sites and we've got to act together

00:05:52,250 --> 00:05:56,570
like nothing's going down no they would

00:05:54,740 --> 00:05:58,850
go down I remember being at a party and

00:05:56,570 --> 00:06:00,740
I'm getting page of duty calls when my

00:05:58,850 --> 00:06:02,810
site is down because BOTS are hitting

00:06:00,740 --> 00:06:04,550
our site and there's too much traffic on

00:06:02,810 --> 00:06:06,410
the node servers and we can't handle it

00:06:04,550 --> 00:06:07,940
and at that moment when I'm scrambling I

00:06:06,410 --> 00:06:09,710
have no clue what I'm doing I'm like

00:06:07,940 --> 00:06:11,570
that like I'm trying to figure this out

00:06:09,710 --> 00:06:13,130
I have no clue what is going on all

00:06:11,570 --> 00:06:15,020
right looking looking at logs on node

00:06:13,130 --> 00:06:17,510
look at logs on nginx look at logs on

00:06:15,020 --> 00:06:20,450
CDN why is this happening why then we

00:06:17,510 --> 00:06:22,130
set this up correctly so those are real

00:06:20,450 --> 00:06:24,440
issues that happen in production systems

00:06:22,130 --> 00:06:28,039
I would worry that my ID is too slow who

00:06:24,440 --> 00:06:29,720
here has used PageSpeed insights to kind

00:06:28,039 --> 00:06:32,120
of test their website performance I know

00:06:29,720 --> 00:06:34,070
doesn't make you feel good or bad you

00:06:32,120 --> 00:06:35,720
can see the score and they tell you

00:06:34,070 --> 00:06:37,130
they're like you're bad it's like a poor

00:06:35,720 --> 00:06:38,720
like and they give you these like

00:06:37,130 --> 00:06:40,490
fifteen things that you should do to

00:06:38,720 --> 00:06:42,860
your website and you start reading to

00:06:40,490 --> 00:06:44,900
them and like do gzip compression and

00:06:42,860 --> 00:06:46,520
make sure they're not async scripts and

00:06:44,900 --> 00:06:49,580
I don't know who you're talking to

00:06:46,520 --> 00:06:51,710
because nobody thought me in the to

00:06:49,580 --> 00:06:53,630
that I'll that I read through and now

00:06:51,710 --> 00:06:55,400
I'm a developer at a job in now you're

00:06:53,630 --> 00:06:58,160
telling me am bad so if you told me I

00:06:55,400 --> 00:06:59,330
was great so but suddenly Google's

00:06:58,160 --> 00:07:01,790
judging you and if you if you feel

00:06:59,330 --> 00:07:03,650
judgment if you try a lighthouse which

00:07:01,790 --> 00:07:05,240
is the tool that are using for PWS

00:07:03,650 --> 00:07:07,610
coding but you feel super bad about

00:07:05,240 --> 00:07:10,070
yourself and we had like an internal

00:07:07,610 --> 00:07:12,320
dashboard where we would have twenty

00:07:10,070 --> 00:07:14,630
teams and we would compare their Google

00:07:12,320 --> 00:07:16,820
speed scores so imagine being inside

00:07:14,630 --> 00:07:19,160
like 20 team then you're being ranked

00:07:16,820 --> 00:07:20,870
and you're seeing your team in a super

00:07:19,160 --> 00:07:26,690
low score imagine the morale of that

00:07:20,870 --> 00:07:28,040
team horrible and apart from that I was

00:07:26,690 --> 00:07:30,800
also worried about the fact that I was

00:07:28,040 --> 00:07:32,690
using all the wrong tools I was a node

00:07:30,800 --> 00:07:35,180
developer and look and I say I'm a node

00:07:32,690 --> 00:07:37,280
developer that basically because I had

00:07:35,180 --> 00:07:41,270
two applications that I put on Heroku so

00:07:37,280 --> 00:07:42,740
yeah me I was a node developer and but I

00:07:41,270 --> 00:07:45,080
was always worried that I was using the

00:07:42,740 --> 00:07:46,730
wrong tools like any question my product

00:07:45,080 --> 00:07:49,130
manager came to me that I hate got and

00:07:46,730 --> 00:07:51,140
we have this new feature how where do we

00:07:49,130 --> 00:07:53,840
do this I'm like I think I know how to

00:07:51,140 --> 00:07:56,330
do this in node I I think I know how I

00:07:53,840 --> 00:07:58,760
can put this up I would go look at

00:07:56,330 --> 00:08:00,560
Express middlewares and I'm like oh god

00:07:58,760 --> 00:08:02,560
it is an express middleware to do

00:08:00,560 --> 00:08:05,630
whatever it is that I want to do and

00:08:02,560 --> 00:08:08,240
soon at my application was just a bunch

00:08:05,630 --> 00:08:10,390
of like NPM modules because like this

00:08:08,240 --> 00:08:12,650
this ecosystem is amazing right

00:08:10,390 --> 00:08:14,630
everybody has done the hard work for us

00:08:12,650 --> 00:08:16,520
in open source and we really don't have

00:08:14,630 --> 00:08:20,030
to think hard we just take the module to

00:08:16,520 --> 00:08:22,220
bear in and it works great but it's not

00:08:20,030 --> 00:08:23,780
the right thing to do I don't know

00:08:22,220 --> 00:08:25,820
nobody's telling me what the right thing

00:08:23,780 --> 00:08:27,590
to do is and while we are building

00:08:25,820 --> 00:08:29,600
systems and like no these large

00:08:27,590 --> 00:08:32,240
interactions between like I have a web

00:08:29,600 --> 00:08:34,190
server and an API server and then I have

00:08:32,240 --> 00:08:36,710
this new chat bot that I'm writing and

00:08:34,190 --> 00:08:38,090
my micro sites have to be developed if

00:08:36,710 --> 00:08:40,190
anybody's in publishing you have a lot

00:08:38,090 --> 00:08:42,770
of like tentpole moments will you create

00:08:40,190 --> 00:08:44,630
small websites that live on your parent

00:08:42,770 --> 00:08:47,360
site but our built by a vendor and you

00:08:44,630 --> 00:08:50,270
try to integrate them and their ads and

00:08:47,360 --> 00:08:51,830
their analytics and system is like a

00:08:50,270 --> 00:08:52,910
spaghetti like I'm not even talking

00:08:51,830 --> 00:08:57,380
about the code I'm talking about the

00:08:52,910 --> 00:08:59,360
system the system is a mess and we are

00:08:57,380 --> 00:09:01,520
working on node and we've been working

00:08:59,360 --> 00:09:02,840
on it for like two three years and we

00:09:01,520 --> 00:09:05,270
are feeling the pain

00:09:02,840 --> 00:09:07,550
like an old somebody's working on code

00:09:05,270 --> 00:09:10,790
bases that are larger than that this

00:09:07,550 --> 00:09:12,560
this issue is more prevalent in our

00:09:10,790 --> 00:09:14,780
entire industry it's not just about no

00:09:12,560 --> 00:09:18,830
Jeff it's a lot of larger problem that

00:09:14,780 --> 00:09:21,110
we have to tackle so today what I'm

00:09:18,830 --> 00:09:23,540
going to be talking about is how I got

00:09:21,110 --> 00:09:25,880
over some of those fears how I saw light

00:09:23,540 --> 00:09:27,800
at the end of the tunnel and how I was

00:09:25,880 --> 00:09:30,860
able to make sure that my site is up

00:09:27,800 --> 00:09:33,110
it's fast I'm using the right tools and

00:09:30,860 --> 00:09:34,310
it's good complex I say good complex and

00:09:33,110 --> 00:09:36,880
you're like you just invented a word

00:09:34,310 --> 00:09:39,500
that's not a word yes that is true

00:09:36,880 --> 00:09:41,900
complexity will always be there in our

00:09:39,500 --> 00:09:43,490
systems for anybody who tells you that

00:09:41,900 --> 00:09:47,240
like you know there's one mogul me any

00:09:43,490 --> 00:09:48,830
complexity thank you it is always going

00:09:47,240 --> 00:09:50,570
to be complexity in our code in our

00:09:48,830 --> 00:09:53,180
system when we need to get kinky with

00:09:50,570 --> 00:09:55,460
that if you're managing multiple servers

00:09:53,180 --> 00:09:58,850
multiple sites get over it like you know

00:09:55,460 --> 00:10:00,890
let's start accepting the dis complexity

00:09:58,850 --> 00:10:04,090
in our system then we need to teach

00:10:00,890 --> 00:10:07,370
ourselves to be a better developer a

00:10:04,090 --> 00:10:10,790
better developer and that leads to the

00:10:07,370 --> 00:10:12,010
point again was Paul's talking about we

00:10:10,790 --> 00:10:14,210
as developers have a lot of

00:10:12,010 --> 00:10:16,460
responsibility we can't live in our

00:10:14,210 --> 00:10:18,860
bubbles in say hey I just know about

00:10:16,460 --> 00:10:20,900
front-end and I only know what react and

00:10:18,860 --> 00:10:22,100
rest of the node folks I really don't

00:10:20,900 --> 00:10:24,500
care about what you're back in it's

00:10:22,100 --> 00:10:25,850
written n similarly the node folks need

00:10:24,500 --> 00:10:28,790
to be a little more empathetic to the

00:10:25,850 --> 00:10:31,520
DevOps team and make sure we are more

00:10:28,790 --> 00:10:33,080
knowledgeable about the cloud ecosystem

00:10:31,520 --> 00:10:34,790
and what are the capabilities the more

00:10:33,080 --> 00:10:36,920
the tools available there and the same

00:10:34,790 --> 00:10:38,960
goes for the devil folks it's like it's

00:10:36,920 --> 00:10:41,870
a cycle that we all need to go through

00:10:38,960 --> 00:10:43,400
and like I was having this conversation

00:10:41,870 --> 00:10:44,930
with a few developers and they were like

00:10:43,400 --> 00:10:46,370
eh I get I get what you're saying

00:10:44,930 --> 00:10:48,200
you mean a full-stack developer I'm a

00:10:46,370 --> 00:10:49,940
full-stack developer and I was like yeah

00:10:48,200 --> 00:10:52,400
but what about the cloud like why aren't

00:10:49,940 --> 00:10:53,540
you like embracing the cloud why aren't

00:10:52,400 --> 00:10:54,770
you learning more about it and then when

00:10:53,540 --> 00:10:56,570
I go but though stack only say is

00:10:54,770 --> 00:10:58,010
fronting and back-end so I came up with

00:10:56,570 --> 00:10:59,990
another term called a fuller stack

00:10:58,010 --> 00:11:01,340
developer and a fuller stack developer

00:10:59,990 --> 00:11:04,370
also uses

00:11:01,340 --> 00:11:06,980
DevOps and if you're planning to learn

00:11:04,370 --> 00:11:09,940
AI then yeah you fall into my definition

00:11:06,980 --> 00:11:11,810
of a fuller stack developer so today

00:11:09,940 --> 00:11:13,520
getting into the talk we'll be talking

00:11:11,810 --> 00:11:15,920
about bridging the boundaries between

00:11:13,520 --> 00:11:16,579
node in cloud and what why I believe

00:11:15,920 --> 00:11:20,689
that is

00:11:16,579 --> 00:11:24,350
that is important for for web

00:11:20,689 --> 00:11:25,549
application delivery let's let's get

00:11:24,350 --> 00:11:26,329
started with the meat of the

00:11:25,549 --> 00:11:29,269
presentation

00:11:26,329 --> 00:11:32,119
imagine euro developer your experience

00:11:29,269 --> 00:11:35,449
with node has been that you know that

00:11:32,119 --> 00:11:38,389
you can you read a few toriel you found

00:11:35,449 --> 00:11:40,040
out you wrote at Jess file which is

00:11:38,389 --> 00:11:42,949
basically your JavaScript code you run

00:11:40,040 --> 00:11:45,470
it on your terminal or hyper term and

00:11:42,949 --> 00:11:47,239
you try it and it spins up a server and

00:11:45,470 --> 00:11:49,069
on the browser you can access it that's

00:11:47,239 --> 00:11:51,170
great our production systems are very

00:11:49,069 --> 00:11:53,360
similar right you do something similar

00:11:51,170 --> 00:11:55,399
you run some commands they go on to the

00:11:53,360 --> 00:11:57,649
cloud and working in the cloud and

00:11:55,399 --> 00:12:01,670
browser works like you're like my job

00:11:57,649 --> 00:12:04,369
here is done gonna go home now but that

00:12:01,670 --> 00:12:07,819
is that is not that is the part where I

00:12:04,369 --> 00:12:11,629
feel this cloud is what I want to you

00:12:07,819 --> 00:12:13,309
and myself to be better of air off so I

00:12:11,629 --> 00:12:15,949
started this journey a couple of years

00:12:13,309 --> 00:12:18,739
ago and starting to understand the cloud

00:12:15,949 --> 00:12:21,319
a little better I said ok let me

00:12:18,739 --> 00:12:22,939
understand a little bit about node so if

00:12:21,319 --> 00:12:24,829
anybody is Google for like you know

00:12:22,939 --> 00:12:27,470
Express or node best performance

00:12:24,829 --> 00:12:28,999
practices you'll end up on this page and

00:12:27,470 --> 00:12:30,739
this is this is on the Express

00:12:28,999 --> 00:12:32,869
documentation which is very good and

00:12:30,739 --> 00:12:35,029
they'll give you these like things to do

00:12:32,869 --> 00:12:37,489
in your code and things to do in your

00:12:35,029 --> 00:12:39,589
environment and set up and they also

00:12:37,489 --> 00:12:42,410
mention that set up thing is like ops

00:12:39,589 --> 00:12:44,299
think so you're like oh I'm not going to

00:12:42,410 --> 00:12:46,189
do it it's probably the ops people are

00:12:44,299 --> 00:12:47,779
responsible for that but today what we

00:12:46,189 --> 00:12:49,249
will do is we actually go into that

00:12:47,779 --> 00:12:52,669
world and see what is it that absque

00:12:49,249 --> 00:12:54,709
ives do similarly if you're interested

00:12:52,669 --> 00:12:57,549
in the cloud you will actually end up on

00:12:54,709 --> 00:12:59,720
AWS website and they're amazing like

00:12:57,549 --> 00:13:02,299
like it's if you talk about JavaScript

00:12:59,720 --> 00:13:04,850
fatigue like look at this this is like

00:13:02,299 --> 00:13:08,389
AWS fatigue like I don't even know where

00:13:04,850 --> 00:13:09,709
to get started like I am interested I

00:13:08,389 --> 00:13:11,329
want to get into this world I am

00:13:09,709 --> 00:13:12,679
actually like taking the first step in

00:13:11,329 --> 00:13:14,480
saying I want to know more about the

00:13:12,679 --> 00:13:17,419
cloud and like it abuse is like yeah

00:13:14,480 --> 00:13:18,799
tell me where you want to start and and

00:13:17,419 --> 00:13:20,959
then you start reading reference

00:13:18,799 --> 00:13:23,299
documentation and they have 3d diagrams

00:13:20,959 --> 00:13:24,619
and it's like I am not sure why they

00:13:23,299 --> 00:13:26,689
have to make it in 3d but they show you

00:13:24,619 --> 00:13:28,759
that there is this application server

00:13:26,689 --> 00:13:29,870
and database behind it and in front of

00:13:28,759 --> 00:13:31,640
it there are learn

00:13:29,870 --> 00:13:33,980
boxes and when I first looked at this I

00:13:31,640 --> 00:13:35,360
thought they were buildings so like I

00:13:33,980 --> 00:13:38,750
don't do any default building for this

00:13:35,360 --> 00:13:40,250
but didn't get the point across and then

00:13:38,750 --> 00:13:41,870
you keep searching because you're not

00:13:40,250 --> 00:13:43,880
getting your answers and there is this

00:13:41,870 --> 00:13:46,160
one talk that is fascinating

00:13:43,880 --> 00:13:49,279
it's every your own ews reinvent

00:13:46,160 --> 00:13:51,170
reinvent is a double uses conference and

00:13:49,279 --> 00:13:54,020
this one talk that has happened every

00:13:51,170 --> 00:13:55,550
year at AWS reinvent it is a talk which

00:13:54,020 --> 00:13:57,560
basically says how to scale your web

00:13:55,550 --> 00:13:59,510
applications so even if I what I've said

00:13:57,560 --> 00:14:01,490
till now you're like no but he works in

00:13:59,510 --> 00:14:03,650
a publishing company I don't care I was

00:14:01,490 --> 00:14:06,560
going to start up I only care about like

00:14:03,650 --> 00:14:08,360
building ecommerce applications that are

00:14:06,560 --> 00:14:09,770
brighter than today going to be one user

00:14:08,360 --> 00:14:12,529
and tomorrow gonna need 10 million users

00:14:09,770 --> 00:14:14,510
they actually walk through like all the

00:14:12,529 --> 00:14:16,130
steps required and by the end you get to

00:14:14,510 --> 00:14:17,990
it and like it's like it's that good

00:14:16,130 --> 00:14:19,940
complex sort of diagram that I showed

00:14:17,990 --> 00:14:22,040
it's like so many systems working

00:14:19,940 --> 00:14:23,570
together and if you have no idea how do

00:14:22,040 --> 00:14:27,080
you put them together with your going to

00:14:23,570 --> 00:14:29,570
be a little clueless so what I needed to

00:14:27,080 --> 00:14:32,450
learn for myself was build a baseline

00:14:29,570 --> 00:14:34,970
knowledge for the cloud and then come up

00:14:32,450 --> 00:14:36,560
with practical starting points the

00:14:34,970 --> 00:14:38,660
reason I say practical starting points

00:14:36,560 --> 00:14:40,580
is because I feel as developers we are

00:14:38,660 --> 00:14:42,800
spoiled by create react up and Express

00:14:40,580 --> 00:14:44,330
generator we just run a few commands we

00:14:42,800 --> 00:14:46,130
get the application and we run it

00:14:44,330 --> 00:14:48,680
something like that does not exist in

00:14:46,130 --> 00:14:50,330
the cloud or at least I did not know so

00:14:48,680 --> 00:14:52,880
I wanted to change that

00:14:50,330 --> 00:14:55,459
the rest of this talk I will talk about

00:14:52,880 --> 00:14:57,529
how you can do more with node how you

00:14:55,459 --> 00:14:59,690
can do more with nginx and we'll get

00:14:57,529 --> 00:15:01,880
into what nginx is how you can do more

00:14:59,690 --> 00:15:03,230
with cloud front there are tools that I

00:15:01,880 --> 00:15:05,720
will use and I will show you some

00:15:03,230 --> 00:15:08,630
screenshots and all the code for this is

00:15:05,720 --> 00:15:10,670
available on my github I will be posting

00:15:08,630 --> 00:15:12,380
this website so you can actually go by

00:15:10,670 --> 00:15:14,029
the end of this talk hopefully you will

00:15:12,380 --> 00:15:16,130
be able to set up like a production

00:15:14,029 --> 00:15:18,290
system with a CDN with elastic load

00:15:16,130 --> 00:15:21,620
balancer and stuff and like wow I can

00:15:18,290 --> 00:15:24,380
get that done so where do you begin when

00:15:21,620 --> 00:15:26,510
you start reading a documentation around

00:15:24,380 --> 00:15:28,279
production systems the first thing that

00:15:26,510 --> 00:15:30,320
a node developer comes across is

00:15:28,279 --> 00:15:33,470
something called node clusters what if

00:15:30,320 --> 00:15:36,050
node cluster Chris nearly when we run

00:15:33,470 --> 00:15:38,360
node application there is no cluster no

00:15:36,050 --> 00:15:40,579
cluster means that your application runs

00:15:38,360 --> 00:15:41,780
on a single CPU we've all heard that in

00:15:40,579 --> 00:15:43,370
here like yeah that's what makes node

00:15:41,780 --> 00:15:45,350
awesome right and now you're telling me

00:15:43,370 --> 00:15:47,600
not like why why are you breaking this

00:15:45,350 --> 00:15:50,330
for me and the reason that is is because

00:15:47,600 --> 00:15:52,580
no one will run on a single thread on a

00:15:50,330 --> 00:15:54,350
single CPU but when you run in

00:15:52,580 --> 00:15:56,870
production systems you might have

00:15:54,350 --> 00:15:58,820
multiple CPUs and in order to use

00:15:56,870 --> 00:16:02,420
multi-core systems you should run your

00:15:58,820 --> 00:16:04,190
application on multiple cores now that

00:16:02,420 --> 00:16:07,520
is phenomenal right it's like having an

00:16:04,190 --> 00:16:09,260
internal load balancer that in your

00:16:07,520 --> 00:16:11,720
application performance just is like

00:16:09,260 --> 00:16:13,279
four times right you're using all cores

00:16:11,720 --> 00:16:16,610
and of course it would be four times but

00:16:13,279 --> 00:16:18,320
you get the idea it increases and how it

00:16:16,610 --> 00:16:20,089
works is actually very simple you have a

00:16:18,320 --> 00:16:21,800
cluster master and all these terms

00:16:20,089 --> 00:16:23,240
hopefully make sense right it's like you

00:16:21,800 --> 00:16:25,100
have a master slave you've heard of

00:16:23,240 --> 00:16:27,170
those concepts so you have like master

00:16:25,100 --> 00:16:29,210
you have cluster workers so master

00:16:27,170 --> 00:16:31,760
stacks multiple workers you're like life

00:16:29,210 --> 00:16:34,250
is beautiful I just increased my

00:16:31,760 --> 00:16:37,550
throughput of my application and like

00:16:34,250 --> 00:16:39,620
I'm better at production systems and to

00:16:37,550 --> 00:16:41,600
do it itself like it's very easy like

00:16:39,620 --> 00:16:42,890
the code for it is on github of course

00:16:41,600 --> 00:16:44,540
you can even Google for it and Stack

00:16:42,890 --> 00:16:45,710
Overflow with all the answers for it so

00:16:44,540 --> 00:16:49,130
there's nothing special in this code

00:16:45,710 --> 00:16:50,570
it's just being aware of the concept not

00:16:49,130 --> 00:16:53,029
about the code it's never about the code

00:16:50,570 --> 00:16:54,500
and you're like hey I have heard of this

00:16:53,029 --> 00:16:56,360
what you're talking about I actually can

00:16:54,500 --> 00:16:58,070
use p.m. - I don't even need your code

00:16:56,360 --> 00:16:59,480
and that's great like maybe you don't

00:16:58,070 --> 00:17:03,050
want to maybe you want to use that

00:16:59,480 --> 00:17:05,449
approach but then the important part -

00:17:03,050 --> 00:17:08,480
identifies should you be even doing this

00:17:05,449 --> 00:17:11,270
because here's a tweet from rod wag who

00:17:08,480 --> 00:17:12,920
is on the node Technical Committee and

00:17:11,270 --> 00:17:15,319
he posted this picture the other day

00:17:12,920 --> 00:17:17,870
said node cluster modules idea of load

00:17:15,319 --> 00:17:20,750
balancing and he shows this like cycle

00:17:17,870 --> 00:17:23,360
like which has something in the cycle

00:17:20,750 --> 00:17:24,770
but it's a system and like a production

00:17:23,360 --> 00:17:27,050
systems which you don't understand and

00:17:24,770 --> 00:17:28,580
this is red bolt in the middle and I

00:17:27,050 --> 00:17:30,500
didn't get in on the joke and I'm like

00:17:28,580 --> 00:17:32,150
what all right and people are laughing

00:17:30,500 --> 00:17:33,020
and they're like haha this is funny and

00:17:32,150 --> 00:17:36,470
I'm like I don't get it

00:17:33,020 --> 00:17:40,010
the reason is underlying - mode clusters

00:17:36,470 --> 00:17:43,400
node clusters use the operating system

00:17:40,010 --> 00:17:46,820
to decide how to split the load between

00:17:43,400 --> 00:17:48,410
the different worker threads now what it

00:17:46,820 --> 00:17:50,809
happens is oh and you would believe that

00:17:48,410 --> 00:17:53,810
OS knows what it's supposed to do right

00:17:50,809 --> 00:17:56,720
but in production systems it's been seen

00:17:53,810 --> 00:17:57,799
that even if you have four to five

00:17:56,720 --> 00:18:00,590
process

00:17:57,799 --> 00:18:03,409
the OS will tend to send all the traffic

00:18:00,590 --> 00:18:06,049
to processors which will basically mean

00:18:03,409 --> 00:18:07,610
that you are not really optimizing your

00:18:06,049 --> 00:18:09,740
application and you're not really using

00:18:07,610 --> 00:18:11,269
the for goals so this can bite you in

00:18:09,740 --> 00:18:15,230
the back like we've had production

00:18:11,269 --> 00:18:17,720
issues where a few workers have died and

00:18:15,230 --> 00:18:20,389
did not realize that those workers died

00:18:17,720 --> 00:18:21,620
didn't tell the master and then we've

00:18:20,389 --> 00:18:24,769
identified that it is the consistency

00:18:21,620 --> 00:18:26,899
these issues so even do you know you can

00:18:24,769 --> 00:18:29,419
use mode cluster even though the Express

00:18:26,899 --> 00:18:31,100
documentation say views nor cluster you

00:18:29,419 --> 00:18:33,649
should think about and you should be

00:18:31,100 --> 00:18:35,960
aware of the issues in fact though

00:18:33,649 --> 00:18:37,730
you're like okay then what do I do

00:18:35,960 --> 00:18:40,700
not gonna use no clusters you just said

00:18:37,730 --> 00:18:44,090
they're awesome in fact if you read this

00:18:40,700 --> 00:18:47,269
is from github on the happy jet which is

00:18:44,090 --> 00:18:50,090
another web framework their lead he says

00:18:47,269 --> 00:18:52,850
we do not recommend node clusters in

00:18:50,090 --> 00:18:55,279
fact we say you should use single core

00:18:52,850 --> 00:18:56,690
VMs to run our set up and again when I

00:18:55,279 --> 00:18:59,450
first read this I was like I don't know

00:18:56,690 --> 00:19:01,190
what he's talking about and but now

00:18:59,450 --> 00:19:04,039
having learnt a little bit I know what

00:19:01,190 --> 00:19:06,500
he's talking about is that when you spin

00:19:04,039 --> 00:19:08,960
up if you two instances these ec2

00:19:06,500 --> 00:19:10,850
instances can have a single core so if

00:19:08,960 --> 00:19:12,919
you are a developer who is basically

00:19:10,850 --> 00:19:15,289
using ec2 instances that have a single

00:19:12,919 --> 00:19:18,080
core you really don't need no cluster

00:19:15,289 --> 00:19:20,059
right so that's the gist of this we can

00:19:18,080 --> 00:19:25,009
use node clusters should we use node

00:19:20,059 --> 00:19:26,690
clusters probably not huh but if you

00:19:25,009 --> 00:19:28,220
want to disregard everything I said in

00:19:26,690 --> 00:19:30,710
like nope I still want to use node

00:19:28,220 --> 00:19:31,850
cluster is simple steps to do it again

00:19:30,710 --> 00:19:33,110
you don't have to take notes all the

00:19:31,850 --> 00:19:35,179
slides will be available but I want to

00:19:33,110 --> 00:19:37,700
give you an idea on how much effort does

00:19:35,179 --> 00:19:40,309
it take to get from A to B you will

00:19:37,700 --> 00:19:42,529
basically install the AWS CLI you will

00:19:40,309 --> 00:19:45,200
run your instance actually I have been

00:19:42,529 --> 00:19:47,870
using the AWS console a lot the website

00:19:45,200 --> 00:19:50,210
to do it but now ever since I've learned

00:19:47,870 --> 00:19:52,100
you can actually do everything using the

00:19:50,210 --> 00:19:54,919
CLI which is pretty awesome and then you

00:19:52,100 --> 00:19:56,509
log into your box you install node on

00:19:54,919 --> 00:19:59,210
the box which is like an or fairly

00:19:56,509 --> 00:20:00,139
complicated process you can get an ami

00:19:59,210 --> 00:20:02,990
but I haven't found a good

00:20:00,139 --> 00:20:05,179
ami you can install the node cluster you

00:20:02,990 --> 00:20:06,889
can check out my code from github and

00:20:05,179 --> 00:20:08,750
you can run it like there's nothing

00:20:06,889 --> 00:20:10,559
fancy about it once you understand the

00:20:08,750 --> 00:20:12,269
concept behind what

00:20:10,559 --> 00:20:14,669
would lustre this what it represents

00:20:12,269 --> 00:20:18,600
when to use it the code feeds away in

00:20:14,669 --> 00:20:20,279
the background ok so we now know one

00:20:18,600 --> 00:20:23,429
thing about the cloud we know that we've

00:20:20,279 --> 00:20:25,440
got we from our terminal can spin up

00:20:23,429 --> 00:20:26,789
node applications they can go into the

00:20:25,440 --> 00:20:28,499
cloud and this node application lives

00:20:26,789 --> 00:20:29,399
over there now let's talk about

00:20:28,499 --> 00:20:32,100
something else

00:20:29,399 --> 00:20:33,570
the second part nginx what is nginx why

00:20:32,100 --> 00:20:35,249
the quality nginx I don't know actually

00:20:33,570 --> 00:20:36,870
try looking for why the call nginx

00:20:35,249 --> 00:20:39,330
didn't find any good answer

00:20:36,870 --> 00:20:43,950
but I found this it leaves don't use

00:20:39,330 --> 00:20:46,980
nodejs for static content tags smart

00:20:43,950 --> 00:20:48,629
person if nginx isn't sitting in front

00:20:46,980 --> 00:20:51,389
of your node server you're probably

00:20:48,629 --> 00:20:52,559
doing it wrong and like it's kind of

00:20:51,389 --> 00:20:54,779
that thing when Google PageSpeed

00:20:52,559 --> 00:20:56,429
insights give you a poor score but you

00:20:54,779 --> 00:20:57,980
know something is bad but you really

00:20:56,429 --> 00:21:02,039
don't know what to do about that right

00:20:57,980 --> 00:21:03,869
so um I started reading up on what

00:21:02,039 --> 00:21:05,429
engine access and like know for those

00:21:03,869 --> 00:21:07,080
who've done Apache and those who build

00:21:05,429 --> 00:21:09,119
production websites it must be like yeah

00:21:07,080 --> 00:21:11,610
of course we know what nginx is of

00:21:09,119 --> 00:21:13,200
course we know but for a wide variety of

00:21:11,610 --> 00:21:15,809
developers who don't have that

00:21:13,200 --> 00:21:17,730
background nginx can mean a lot of

00:21:15,809 --> 00:21:19,139
things I used to see these like videos

00:21:17,730 --> 00:21:21,570
and if like nginx can do everything

00:21:19,139 --> 00:21:23,519
nginx can like save you from like you

00:21:21,570 --> 00:21:26,190
can save your life and I would wonder

00:21:23,519 --> 00:21:28,529
what that really means I try to break it

00:21:26,190 --> 00:21:31,190
down and this is what I took away nginx

00:21:28,529 --> 00:21:35,220
does three good things reverse proxy

00:21:31,190 --> 00:21:37,499
load balancer content accelerator let's

00:21:35,220 --> 00:21:38,879
talk about them reverse proxy first of

00:21:37,499 --> 00:21:40,259
all I never understood this concept of a

00:21:38,879 --> 00:21:41,879
reverse proxy what do you mean by a

00:21:40,259 --> 00:21:43,830
reverse proxy like you know I understand

00:21:41,879 --> 00:21:45,210
proxy is led traffic through but reverse

00:21:43,830 --> 00:21:49,289
is it's like sending my traffic back

00:21:45,210 --> 00:21:51,389
like that never like I was confused

00:21:49,289 --> 00:21:53,549
about like what why use the word reverse

00:21:51,389 --> 00:21:54,960
proxy as probably a term made by smart

00:21:53,549 --> 00:21:57,210
people so that like you know they could

00:21:54,960 --> 00:22:00,059
they could confuse me but the idea here

00:21:57,210 --> 00:22:02,519
is that it acts like an endpoint a

00:22:00,059 --> 00:22:04,919
single entry into your network basically

00:22:02,519 --> 00:22:07,230
into the back of your network so if

00:22:04,919 --> 00:22:08,940
that's all you take away reverse proxies

00:22:07,230 --> 00:22:11,700
are just basically entry points into

00:22:08,940 --> 00:22:14,610
your systems nginx as a reverse proxy

00:22:11,700 --> 00:22:16,830
can act as a single origin so that's

00:22:14,610 --> 00:22:19,139
another word to user origin origin is

00:22:16,830 --> 00:22:21,179
basically it can you can have your node

00:22:19,139 --> 00:22:23,490
application behind her or you can have

00:22:21,179 --> 00:22:24,540
different node applications behind that

00:22:23,490 --> 00:22:26,520
that's what it

00:22:24,540 --> 00:22:29,220
it's a reverse proxy it also does

00:22:26,520 --> 00:22:31,080
load-balancing which if we kind of

00:22:29,220 --> 00:22:34,260
member that's what node was doing with

00:22:31,080 --> 00:22:36,360
node cluster and it also is a Content

00:22:34,260 --> 00:22:37,830
accelerator which basically means that

00:22:36,360 --> 00:22:40,530
instead of hitting your node application

00:22:37,830 --> 00:22:42,990
it can hit a cache and get data from

00:22:40,530 --> 00:22:44,880
there as well as it can do G v which is

00:22:42,990 --> 00:22:48,720
means basically it can compress the data

00:22:44,880 --> 00:22:51,210
for you which is wonderful so basically

00:22:48,720 --> 00:22:54,690
now we know nginx that's what that's all

00:22:51,210 --> 00:22:57,900
that it does but let's focus on why we

00:22:54,690 --> 00:22:59,580
should use nginx like we know we should

00:22:57,900 --> 00:23:01,590
use it but while using this what makes

00:22:59,580 --> 00:23:04,020
nginx so much I mean anything right so

00:23:01,590 --> 00:23:06,000
you read about it nginx has an

00:23:04,020 --> 00:23:08,130
event-driven earth synchronous

00:23:06,000 --> 00:23:10,440
architecture so you think about it like

00:23:08,130 --> 00:23:12,419
wait I thought that's what made note

00:23:10,440 --> 00:23:14,280
special right node have another

00:23:12,419 --> 00:23:16,620
synchronous architecture they very

00:23:14,280 --> 00:23:18,660
event-driven it's similar and you will

00:23:16,620 --> 00:23:22,320
realize that nginx has a very similar

00:23:18,660 --> 00:23:24,570
architecture to node in fact of going to

00:23:22,320 --> 00:23:27,330
the documentation you also realize it

00:23:24,570 --> 00:23:29,309
has a master and it spins up multiple

00:23:27,330 --> 00:23:32,280
workers now where have we seen that

00:23:29,309 --> 00:23:33,780
before I think I've seen that before

00:23:32,280 --> 00:23:36,030
I just showed it to you like two slides

00:23:33,780 --> 00:23:38,929
ago it was basically the same node

00:23:36,030 --> 00:23:41,429
cluster idea so now the whole thing

00:23:38,929 --> 00:23:42,990
becomes clear to us that this is not

00:23:41,429 --> 00:23:46,710
rocket science it is actually the same

00:23:42,990 --> 00:23:49,140
concept of having the masters in workers

00:23:46,710 --> 00:23:52,770
great and we know nginx does that that

00:23:49,140 --> 00:23:54,809
is fabulous I know some of you are still

00:23:52,770 --> 00:23:56,580
curious you like is it really performant

00:23:54,809 --> 00:23:59,850
and this is the best I could find

00:23:56,580 --> 00:24:02,120
it's from the Internet's website it says

00:23:59,850 --> 00:24:05,340
pulling numbers from thin air for

00:24:02,120 --> 00:24:07,799
illustrative purposes serving 10,000

00:24:05,340 --> 00:24:10,049
simultaneous connections would probably

00:24:07,799 --> 00:24:12,419
only cause nginx to use a few megabytes

00:24:10,049 --> 00:24:14,490
of RAM while Apache would not be able to

00:24:12,419 --> 00:24:16,110
do it and I'm pretty sure node won't be

00:24:14,490 --> 00:24:17,880
able to do it either and that's a

00:24:16,110 --> 00:24:19,830
picture of guy pulling numbers from thin

00:24:17,880 --> 00:24:20,700
air but you get the idea

00:24:19,830 --> 00:24:22,590
don't worry too much about the

00:24:20,700 --> 00:24:25,950
performance right now focus on the

00:24:22,590 --> 00:24:28,110
concepts good now that we've done that

00:24:25,950 --> 00:24:29,850
you will see there's another another

00:24:28,110 --> 00:24:33,240
concept that we touched on load

00:24:29,850 --> 00:24:35,340
balancing but what is a load balancer a

00:24:33,240 --> 00:24:37,610
load balancer as many know would

00:24:35,340 --> 00:24:41,030
basically be splitting your traffic

00:24:37,610 --> 00:24:43,280
amongst different incidences EWS has

00:24:41,030 --> 00:24:46,460
this concept of an elastic load balancer

00:24:43,280 --> 00:24:49,880
which basically puts your nginx and node

00:24:46,460 --> 00:24:51,650
applications in a single zone and place

00:24:49,880 --> 00:24:53,630
the load balancer is going to manage

00:24:51,650 --> 00:24:56,809
that we know nginx could have done it

00:24:53,630 --> 00:24:59,630
for us but EWS is elastic load balancer

00:24:56,809 --> 00:25:01,160
can also do that for us the Hutts

00:24:59,630 --> 00:25:03,890
that I've drawn over there are not

00:25:01,160 --> 00:25:05,150
because like no node and nginx love each

00:25:03,890 --> 00:25:07,190
other which they kind of do their best

00:25:05,150 --> 00:25:09,110
friends but the heart represents there

00:25:07,190 --> 00:25:11,480
are health checks that are made where

00:25:09,110 --> 00:25:13,940
this elastic load balancer can basically

00:25:11,480 --> 00:25:15,440
make sure that your instances are up and

00:25:13,940 --> 00:25:17,330
running so that your site is not going

00:25:15,440 --> 00:25:19,460
down every time your instances go down

00:25:17,330 --> 00:25:23,720
elastic balance load balancer creates

00:25:19,460 --> 00:25:25,190
more instances that is fabulous but when

00:25:23,720 --> 00:25:26,690
I was doing this I was like this is

00:25:25,190 --> 00:25:29,990
great I understand the theory but how do

00:25:26,690 --> 00:25:33,380
I practice they're like I want to do

00:25:29,990 --> 00:25:35,030
this I want to have node with nginx and

00:25:33,380 --> 00:25:36,260
free lastic load balancers I want to

00:25:35,030 --> 00:25:38,240
play with this because that's how we

00:25:36,260 --> 00:25:40,100
learn right we developers we put things

00:25:38,240 --> 00:25:42,169
up and we're like we want to break it we

00:25:40,100 --> 00:25:45,350
want to see how that works and for me

00:25:42,169 --> 00:25:47,270
the best what I found was there's a

00:25:45,350 --> 00:25:49,400
concept of elastic beanstalk which is

00:25:47,270 --> 00:25:51,500
another product by Amazon where they

00:25:49,400 --> 00:25:53,600
basically give you the same idea if you

00:25:51,500 --> 00:25:55,700
see if an elastic load balancer is

00:25:53,600 --> 00:25:59,600
called web app servers with nginx and

00:25:55,700 --> 00:26:01,490
node they put in and ask auto scaling

00:25:59,600 --> 00:26:04,970
group concepts we don't get into right

00:26:01,490 --> 00:26:08,090
now but this is the same idea you as

00:26:04,970 --> 00:26:10,520
developers we can actually go try it

00:26:08,090 --> 00:26:13,190
today and see how this would work in our

00:26:10,520 --> 00:26:15,980
production systems and that that's what

00:26:13,190 --> 00:26:19,790
I wanted us to do so how do we set this

00:26:15,980 --> 00:26:22,910
up again super simple we install the

00:26:19,790 --> 00:26:25,370
elastic load balancer CLI we run a few

00:26:22,910 --> 00:26:27,370
commands which is basically saying which

00:26:25,370 --> 00:26:28,669
region we are want to create this

00:26:27,370 --> 00:26:30,410
Beanstalk

00:26:28,669 --> 00:26:33,110
application in and you give it a

00:26:30,410 --> 00:26:35,929
platform nodejs it creates that like

00:26:33,110 --> 00:26:39,350
literally the barrier to entry for

00:26:35,929 --> 00:26:41,840
someone from knowing how to use nginx

00:26:39,350 --> 00:26:43,040
and load balancing is very easy it's

00:26:41,840 --> 00:26:46,790
knowing that these tools are available

00:26:43,040 --> 00:26:48,559
to us a bit about the Beanstalk

00:26:46,790 --> 00:26:50,570
configuration this is how you can very

00:26:48,559 --> 00:26:51,410
quickly define how to put your

00:26:50,570 --> 00:26:53,330
applications

00:26:51,410 --> 00:26:54,260
together the reason I'm showing this is

00:26:53,330 --> 00:26:56,120
because they're concepts like

00:26:54,260 --> 00:26:58,430
configuration management and how do you

00:26:56,120 --> 00:27:00,200
kind of make sure that you are putting

00:26:58,430 --> 00:27:01,880
the right number of instances this can

00:27:00,200 --> 00:27:03,290
help you over there as you can see this

00:27:01,880 --> 00:27:04,580
is the tree the entire file this is not

00:27:03,290 --> 00:27:08,180
too much code this is like the entire

00:27:04,580 --> 00:27:10,220
file and it's available on github so now

00:27:08,180 --> 00:27:13,040
we have learned a little bit more about

00:27:10,220 --> 00:27:14,480
the cloud now we know that there is an

00:27:13,040 --> 00:27:16,400
elastic load balancer

00:27:14,480 --> 00:27:18,380
there's nginx and there is node

00:27:16,400 --> 00:27:20,650
hopefully these concepts make more sense

00:27:18,380 --> 00:27:20,650
now

00:27:20,750 --> 00:27:25,640
how have I use these in production we

00:27:23,330 --> 00:27:27,110
use like you know many of us are using

00:27:25,640 --> 00:27:30,200
known applications building multiple

00:27:27,110 --> 00:27:31,910
applications in the last two years I

00:27:30,200 --> 00:27:34,130
have had three node production

00:27:31,910 --> 00:27:35,810
applications three applications using

00:27:34,130 --> 00:27:37,880
three different frameworks using three

00:27:35,810 --> 00:27:39,560
different front ends why am i doing that

00:27:37,880 --> 00:27:42,170
am I crazy can I make up my mind it's

00:27:39,560 --> 00:27:44,720
actually because node keeps changing the

00:27:42,170 --> 00:27:47,210
ecosystem is evolving so instead of

00:27:44,720 --> 00:27:49,730
tying myself to a certain architecture

00:27:47,210 --> 00:27:51,500
we make sure we are allowing our

00:27:49,730 --> 00:27:54,320
developers to have the flexibility to

00:27:51,500 --> 00:27:56,690
use the tools that they want so when we

00:27:54,320 --> 00:27:59,420
have to write our API we created another

00:27:56,690 --> 00:28:02,390
node application and let nginx route

00:27:59,420 --> 00:28:05,150
that traffic to that API we are moving

00:28:02,390 --> 00:28:07,970
to happy GS we created the happy J's app

00:28:05,150 --> 00:28:10,880
and had a subset of our routes just go

00:28:07,970 --> 00:28:13,660
to happy J and we had everything else in

00:28:10,880 --> 00:28:16,580
our site go to Express application

00:28:13,660 --> 00:28:20,120
before that I have actually written a

00:28:16,580 --> 00:28:22,970
proxy in load myself multiple times with

00:28:20,120 --> 00:28:26,210
a lot of bugs that have taken like like

00:28:22,970 --> 00:28:29,720
quarters to find and fix why did I do

00:28:26,210 --> 00:28:31,610
that to myself it's because I didn't

00:28:29,720 --> 00:28:33,890
know better and I think Gary's key

00:28:31,610 --> 00:28:36,260
knowing our tools makes us better

00:28:33,890 --> 00:28:38,570
developers it's not the one of the lines

00:28:36,260 --> 00:28:40,220
of code we write it's about knowing our

00:28:38,570 --> 00:28:42,050
tools because smarter developers have

00:28:40,220 --> 00:28:45,650
written these tools for us and we should

00:28:42,050 --> 00:28:47,750
know when to leverage them the proxy

00:28:45,650 --> 00:28:50,690
configuration again is available but

00:28:47,750 --> 00:28:53,870
it's very simple literally five lines of

00:28:50,690 --> 00:28:56,420
code in the middle if all I needed to

00:28:53,870 --> 00:28:58,580
get that set up working the reason that

00:28:56,420 --> 00:29:01,250
I never knew how to use that set up is

00:28:58,580 --> 00:29:03,260
because I did not have an environment

00:29:01,250 --> 00:29:04,590
where I could set all of this up and

00:29:03,260 --> 00:29:07,200
test it in the crowd

00:29:04,590 --> 00:29:09,060
in the cloud the today we had that so I

00:29:07,200 --> 00:29:12,720
would encourage you to definitely try it

00:29:09,060 --> 00:29:15,270
out and the final part of this talk is

00:29:12,720 --> 00:29:16,860
about the cloud front CDN I know the

00:29:15,270 --> 00:29:18,480
first time somebody to talk to me about

00:29:16,860 --> 00:29:20,070
a CDN I thought was the most boring

00:29:18,480 --> 00:29:21,900
thing ever it stands for content

00:29:20,070 --> 00:29:24,360
delivery network I'm like who talks

00:29:21,900 --> 00:29:25,140
about CDN that's like pouring like you

00:29:24,360 --> 00:29:27,210
know what

00:29:25,140 --> 00:29:29,130
Akamai like yeah I know they exist I

00:29:27,210 --> 00:29:30,960
know they're important but like who

00:29:29,130 --> 00:29:31,590
really cares I don't worry about that

00:29:30,960 --> 00:29:34,950
too much

00:29:31,590 --> 00:29:37,050
but like this anybody reads TechCrunch

00:29:34,950 --> 00:29:39,360
right so at other day I came across this

00:29:37,050 --> 00:29:40,740
article which touches on a few aspects

00:29:39,360 --> 00:29:43,110
that what I'm talking about today is

00:29:40,740 --> 00:29:44,250
there is a disruption in content

00:29:43,110 --> 00:29:47,520
delivery networks

00:29:44,250 --> 00:29:49,590
it says death beams really have no idea

00:29:47,520 --> 00:29:51,390
how the site will run until they get

00:29:49,590 --> 00:29:56,610
into production I think is talking about

00:29:51,390 --> 00:29:58,890
me I had no clue future of web

00:29:56,610 --> 00:30:01,170
application delivery platform developers

00:29:58,890 --> 00:30:03,480
have full control over reverse proxy

00:30:01,170 --> 00:30:05,990
configuration experiment in testing

00:30:03,480 --> 00:30:08,970
environment this could be you tomorrow

00:30:05,990 --> 00:30:09,390
these guys are giving all that access to

00:30:08,970 --> 00:30:13,080
you

00:30:09,390 --> 00:30:14,940
so we all better know how to use the

00:30:13,080 --> 00:30:18,600
reverse proxy configuration right so we

00:30:14,940 --> 00:30:20,040
need to be aware of the system so at a

00:30:18,600 --> 00:30:21,630
high level I know this is the part that

00:30:20,040 --> 00:30:22,890
everybody understands about cloud front

00:30:21,630 --> 00:30:25,320
or CDN

00:30:22,890 --> 00:30:28,470
cloud front is amazon's CDN there are

00:30:25,320 --> 00:30:30,210
Akamai diff fastly there's CloudFlare or

00:30:28,470 --> 00:30:32,810
the systems cloud front is just one such

00:30:30,210 --> 00:30:35,460
example it's a content delivery network

00:30:32,810 --> 00:30:36,600
it's got multiple edge locations which

00:30:35,460 --> 00:30:39,240
basically means it's a distributed

00:30:36,600 --> 00:30:41,370
network all over the globe it's across

00:30:39,240 --> 00:30:43,590
five continents that's great and it

00:30:41,370 --> 00:30:46,470
reduces network latency so you can have

00:30:43,590 --> 00:30:48,840
your server in America or Europe and

00:30:46,470 --> 00:30:50,490
your content delivery network is spread

00:30:48,840 --> 00:30:54,060
all over the world and it works that way

00:30:50,490 --> 00:30:56,220
that is great but how is a developer can

00:30:54,060 --> 00:30:59,070
make that content delivery network more

00:30:56,220 --> 00:31:00,420
accessible to myself first I need to

00:30:59,070 --> 00:31:03,180
understand what a content delivery

00:31:00,420 --> 00:31:05,460
network can do it is more than just

00:31:03,180 --> 00:31:08,130
content delivery and file caching a

00:31:05,460 --> 00:31:10,260
content delivery network voilá has the

00:31:08,130 --> 00:31:12,180
same concept if the reverse proxy same

00:31:10,260 --> 00:31:14,820
concept comes again same thing we read

00:31:12,180 --> 00:31:15,870
about in nginx it the single origin it's

00:31:14,820 --> 00:31:17,490
a multi religion

00:31:15,870 --> 00:31:18,309
multi-region is interesting because

00:31:17,490 --> 00:31:20,710
amazon has

00:31:18,309 --> 00:31:22,479
other infrastructure like s3 that you

00:31:20,710 --> 00:31:25,059
can put some of your static files in and

00:31:22,479 --> 00:31:27,219
if you saw one of the previous slides we

00:31:25,059 --> 00:31:29,379
mentioned that we should not put our

00:31:27,219 --> 00:31:31,389
static files on nodejs we then as

00:31:29,379 --> 00:31:33,359
developers together made the decision

00:31:31,389 --> 00:31:35,229
that we will put those static files in

00:31:33,359 --> 00:31:36,879
nginx because that's the right thing to

00:31:35,229 --> 00:31:38,950
do and now amazon has this

00:31:36,879 --> 00:31:40,749
infrastructure for s3 so we should

00:31:38,950 --> 00:31:45,369
probably move our files to the edge and

00:31:40,749 --> 00:31:47,679
have the CDN you stack it can also work

00:31:45,369 --> 00:31:50,619
as an content accelerator so basically

00:31:47,679 --> 00:31:53,289
it has a cache that it can use and this

00:31:50,619 --> 00:31:55,089
one's really interesting it actually has

00:31:53,289 --> 00:31:56,739
a concept of a steal cache which

00:31:55,089 --> 00:32:00,639
basically means if your site is down

00:31:56,739 --> 00:32:04,809
your CDN will not let the user even know

00:32:00,639 --> 00:32:06,279
and we'll get into details of that so

00:32:04,809 --> 00:32:08,320
that's literally what a production

00:32:06,279 --> 00:32:12,009
system looks like it's actually that

00:32:08,320 --> 00:32:14,049
simple you have a cloud front CDN you

00:32:12,009 --> 00:32:16,029
have an s3 bucket in which you put your

00:32:14,049 --> 00:32:18,159
static assets you have a LV which is the

00:32:16,029 --> 00:32:20,830
load balancer you have nginx and you

00:32:18,159 --> 00:32:23,619
have node and hopefully this picture

00:32:20,830 --> 00:32:25,419
which is the same idea that you saw in

00:32:23,619 --> 00:32:28,419
the AWS reference architecture of

00:32:25,419 --> 00:32:30,219
buildings and of the different kinds

00:32:28,419 --> 00:32:33,269
like you know diagram that AWS provides

00:32:30,219 --> 00:32:37,089
this is a simple representation of what

00:32:33,269 --> 00:32:40,899
skills you need to be able to understand

00:32:37,089 --> 00:32:43,059
the cloud it's literally that simple but

00:32:40,899 --> 00:32:44,529
now this this was the hard part for me I

00:32:43,059 --> 00:32:46,089
almost like no matter was preparing this

00:32:44,529 --> 00:32:47,289
presentation at this part I said I

00:32:46,089 --> 00:32:48,549
thought I'm going to give up because I

00:32:47,289 --> 00:32:50,649
really didn't know how to put all of

00:32:48,549 --> 00:32:52,419
this together I spoke to many DevOps

00:32:50,649 --> 00:32:53,289
engineers I was like I want this set up

00:32:52,419 --> 00:32:56,589
because I'm going to talk to developers

00:32:53,289 --> 00:32:58,719
and really show them how to create this

00:32:56,589 --> 00:33:01,779
environment in the cloud I want to do

00:32:58,719 --> 00:33:06,279
this for real we'll do a live demo of

00:33:01,779 --> 00:33:07,659
that but it's hard I spent a lot of time

00:33:06,279 --> 00:33:10,779
try to understand what the right tools

00:33:07,659 --> 00:33:12,309
are what I then realized that I system

00:33:10,779 --> 00:33:13,929
like this when you're making a system

00:33:12,309 --> 00:33:16,330
that is so complex that has so many

00:33:13,929 --> 00:33:17,979
moving parts what you use if you use a

00:33:16,330 --> 00:33:19,869
template you don't even use something

00:33:17,979 --> 00:33:24,369
like a managed service like Beanstalk

00:33:19,869 --> 00:33:27,009
you use a template so what is that

00:33:24,369 --> 00:33:30,039
template like it looks like this it is a

00:33:27,009 --> 00:33:31,360
cloud formation template again so long

00:33:30,039 --> 00:33:34,090
template I

00:33:31,360 --> 00:33:35,770
would definitely agree this is this is

00:33:34,090 --> 00:33:38,020
challenging this is hard to kind of like

00:33:35,770 --> 00:33:39,670
understand the entire template I don't

00:33:38,020 --> 00:33:41,530
think I fully completely understand I

00:33:39,670 --> 00:33:43,809
work with my DevOps teams and we have

00:33:41,530 --> 00:33:45,670
like internal templates that they

00:33:43,809 --> 00:33:48,040
provide for spinning up our architecture

00:33:45,670 --> 00:33:50,350
but at least now I can read the template

00:33:48,040 --> 00:33:54,429
I understand the various concepts that

00:33:50,350 --> 00:33:56,950
are associated about a template and once

00:33:54,429 --> 00:33:59,559
you have the template what you can

00:33:56,950 --> 00:34:01,929
really do is with like a single command

00:33:59,559 --> 00:34:03,610
which is the first command which will

00:34:01,929 --> 00:34:07,059
take you 12 minutes so I'm not going to

00:34:03,610 --> 00:34:09,879
do a demo of that it takes 12 minutes to

00:34:07,059 --> 00:34:12,970
spin up that architecture you say AWS

00:34:09,879 --> 00:34:15,429
CloudFormation create stack you give the

00:34:12,970 --> 00:34:17,350
name of your stack you give the template

00:34:15,429 --> 00:34:18,820
body and then you give certain

00:34:17,350 --> 00:34:22,260
parameters you basically need one

00:34:18,820 --> 00:34:25,030
parameter which is your key and that's a

00:34:22,260 --> 00:34:27,460
with a single command you can actually

00:34:25,030 --> 00:34:30,609
have access to a production environment

00:34:27,460 --> 00:34:32,020
and this environment is very similar to

00:34:30,609 --> 00:34:34,359
what like you know when you join an

00:34:32,020 --> 00:34:35,710
organization and so you're learning like

00:34:34,359 --> 00:34:38,230
that's the production environment they

00:34:35,710 --> 00:34:40,060
will have spinning up a stack is

00:34:38,230 --> 00:34:42,490
actually very easy you can see all the

00:34:40,060 --> 00:34:44,859
different instances that come in what's

00:34:42,490 --> 00:34:48,129
really interesting is now that you have

00:34:44,859 --> 00:34:50,470
the stack up you can debug the entire

00:34:48,129 --> 00:34:52,210
thing with goal if you view skull it's

00:34:50,470 --> 00:34:53,800
an amazing come on it gives you like in

00:34:52,210 --> 00:34:56,500
it you can basically learn a lot more

00:34:53,800 --> 00:34:58,540
about sqt be as a developer using curves

00:34:56,500 --> 00:35:00,340
so here are some sample ideas you can

00:34:58,540 --> 00:35:02,500
basically test the headers you can test

00:35:00,340 --> 00:35:04,270
your gzip cache headers you can test

00:35:02,500 --> 00:35:06,880
your etag headers you can test your

00:35:04,270 --> 00:35:10,600
network latency all of these concepts

00:35:06,880 --> 00:35:15,100
that were hard to touch and understand

00:35:10,600 --> 00:35:16,869
are now very accessible to us so that's

00:35:15,100 --> 00:35:18,820
pretty much it that's like enough like

00:35:16,869 --> 00:35:21,580
you know now we know how the production

00:35:18,820 --> 00:35:23,140
system sets up we know that in terms of

00:35:21,580 --> 00:35:24,820
a per mo performance point of view I

00:35:23,140 --> 00:35:26,980
know some of you are thinking well wait

00:35:24,820 --> 00:35:29,230
a CDN is so great should I just like

00:35:26,980 --> 00:35:30,700
stop doing what I'm doing as a developer

00:35:29,230 --> 00:35:33,490
is the front-end developer not that

00:35:30,700 --> 00:35:37,270
important but hopefully this diagram

00:35:33,490 --> 00:35:39,820
sure this table shows you that this work

00:35:37,270 --> 00:35:43,330
hand-in-hand just because I am claiming

00:35:39,820 --> 00:35:44,770
that a CDN is going to make it faster

00:35:43,330 --> 00:35:46,720
does not mean

00:35:44,770 --> 00:35:49,960
that the front-end developer is off the

00:35:46,720 --> 00:35:51,820
hook or that it does not matter what the

00:35:49,960 --> 00:35:54,490
JavaScript performance is on the browser

00:35:51,820 --> 00:35:56,230
that is also very important and that's

00:35:54,490 --> 00:35:58,150
why when we are building applications it

00:35:56,230 --> 00:36:00,730
is our responsibility to build

00:35:58,150 --> 00:36:03,640
applications that work both fast on the

00:36:00,730 --> 00:36:08,200
browser but also I delivered fast to the

00:36:03,640 --> 00:36:11,800
user a couple of real-world scenarios

00:36:08,200 --> 00:36:14,980
one my app went down on a Saturday and

00:36:11,800 --> 00:36:17,620
the cerium saved the day and it is

00:36:14,980 --> 00:36:18,910
amazing once you know that a CDN even

00:36:17,620 --> 00:36:21,520
round that like before some I realize

00:36:18,910 --> 00:36:23,560
like what it can do that it's actually

00:36:21,520 --> 00:36:26,020
but you have to know what settings have

00:36:23,560 --> 00:36:28,690
to be put in the CDN for it to do that

00:36:26,020 --> 00:36:30,820
so talk to your DevOps engineer and make

00:36:28,690 --> 00:36:33,130
sure if you're running a website that

00:36:30,820 --> 00:36:34,990
you know what those settings are every

00:36:33,130 --> 00:36:37,330
Syrian has a different setting

00:36:34,990 --> 00:36:39,100
but once you put that setting you can

00:36:37,330 --> 00:36:41,290
test your site and you can make sure

00:36:39,100 --> 00:36:44,770
that if even if your node application

00:36:41,290 --> 00:36:48,760
went down your front end is still up for

00:36:44,770 --> 00:36:50,290
all the users across the world another

00:36:48,760 --> 00:36:53,200
cool feature and this gets me really

00:36:50,290 --> 00:36:54,370
excited about the future of CDN I know I

00:36:53,200 --> 00:36:57,910
can't believe I'm saying that

00:36:54,370 --> 00:36:59,950
but down what's very exciting is usually

00:36:57,910 --> 00:37:02,020
as an app developer we think every

00:36:59,950 --> 00:37:02,980
feature request has to be done in that

00:37:02,020 --> 00:37:06,070
application

00:37:02,980 --> 00:37:09,430
I like no application request for us was

00:37:06,070 --> 00:37:12,010
get a you based on the users IP figure

00:37:09,430 --> 00:37:14,470
out which part of the world the fuser is

00:37:12,010 --> 00:37:16,030
from like okay I think I can do that a

00:37:14,470 --> 00:37:17,710
couple of Google searches and I realize

00:37:16,030 --> 00:37:19,930
there's a max mind database that I can

00:37:17,710 --> 00:37:23,530
use and I can like buy that database or

00:37:19,930 --> 00:37:25,930
figure that out and use that but did you

00:37:23,530 --> 00:37:27,130
know that your CDN can do the same so

00:37:25,930 --> 00:37:29,170
you really don't have to write a single

00:37:27,130 --> 00:37:30,970
line of code to do that you can

00:37:29,170 --> 00:37:32,320
literally have your CDN configured

00:37:30,970 --> 00:37:34,420
that's the next to the database it does

00:37:32,320 --> 00:37:36,100
all of that work for you and then your

00:37:34,420 --> 00:37:37,420
application just gets the data about the

00:37:36,100 --> 00:37:41,050
user that's pretty awesome

00:37:37,420 --> 00:37:43,320
internally we've also used it for a be

00:37:41,050 --> 00:37:45,790
testing our site and providing different

00:37:43,320 --> 00:37:48,400
UI so different user and that can be

00:37:45,790 --> 00:37:49,960
done at the edge as well as I am

00:37:48,400 --> 00:37:51,880
personally exploring lambda on the edge

00:37:49,960 --> 00:37:54,670
which basically provides service along

00:37:51,880 --> 00:37:58,190
with CDN so that's that's a very

00:37:54,670 --> 00:38:00,230
interesting architecture so

00:37:58,190 --> 00:38:02,510
having this all up we started at the

00:38:00,230 --> 00:38:06,410
developer who knew a little bit about

00:38:02,510 --> 00:38:08,150
node applications we knew that there was

00:38:06,410 --> 00:38:10,130
the cloud but we didn't know what was in

00:38:08,150 --> 00:38:12,620
the cloud and hopefully through this

00:38:10,130 --> 00:38:15,260
presentation you now know what the

00:38:12,620 --> 00:38:17,450
various parts of the cloud are and how

00:38:15,260 --> 00:38:19,850
it's super accessible and you as a

00:38:17,450 --> 00:38:23,000
developer can actually spin it all up

00:38:19,850 --> 00:38:24,530
and become a better developer I leave

00:38:23,000 --> 00:38:27,740
you with this one thought that the

00:38:24,530 --> 00:38:30,410
reason of exploring all of this is not

00:38:27,740 --> 00:38:32,180
because you want to be a DevOps engineer

00:38:30,410 --> 00:38:35,300
that is not the point of this the point

00:38:32,180 --> 00:38:37,760
of this is so that we all are curious

00:38:35,300 --> 00:38:40,550
developers and we build that skill of

00:38:37,760 --> 00:38:43,580
curiosity in us so that we don't look at

00:38:40,550 --> 00:38:45,530
what we do at work as whether it's my

00:38:43,580 --> 00:38:48,170
bubble of front-end or back-end or tear

00:38:45,530 --> 00:38:50,150
box but look at it more holistically

00:38:48,170 --> 00:38:52,550
because then only will we be able to

00:38:50,150 --> 00:38:56,330
deliver experiences that are world-class

00:38:52,550 --> 00:39:08,240
and that can make our life easier thank

00:38:56,330 --> 00:39:10,760
you so I take a few questions if we have

00:39:08,240 --> 00:39:15,500
time for questions or I IDL is low I

00:39:10,760 --> 00:39:19,880
bring over TD M stands for no TTL time

00:39:15,500 --> 00:39:21,920
to lunch at the demos people see kicker

00:39:19,880 --> 00:39:24,320
like that let's go put two questions to

00:39:21,920 --> 00:39:26,390
questions okay do you think service is

00:39:24,320 --> 00:39:28,010
the future does it scale well can it be

00:39:26,390 --> 00:39:29,900
a performance hit when expecting a lot

00:39:28,010 --> 00:39:31,790
of requests okay so three questions

00:39:29,900 --> 00:39:35,480
really do you think service is the

00:39:31,790 --> 00:39:38,180
future ah no not really

00:39:35,480 --> 00:39:40,130
I even believe that is I think there are

00:39:38,180 --> 00:39:42,830
lot of applications that benefit from a

00:39:40,130 --> 00:39:46,040
server less architecture where you don't

00:39:42,830 --> 00:39:47,960
have to spin up your application and

00:39:46,040 --> 00:39:49,850
keep it up and I'm actually like no

00:39:47,960 --> 00:39:53,360
trying to see how those patterns work

00:39:49,850 --> 00:39:56,720
for content based websites but based on

00:39:53,360 --> 00:39:58,370
discussions I've had with other folks in

00:39:56,720 --> 00:40:01,100
my team where we are talking about this

00:39:58,370 --> 00:40:04,220
we feel the cost that will happy there

00:40:01,100 --> 00:40:05,840
for so LS versus having an instance that

00:40:04,220 --> 00:40:08,000
is resolved so you should look into

00:40:05,840 --> 00:40:10,940
pricing of AWS that's a fascinating

00:40:08,000 --> 00:40:11,609
place so pricing like if you have

00:40:10,940 --> 00:40:13,650
reserved in

00:40:11,609 --> 00:40:15,509
chances with its own demand instances

00:40:13,650 --> 00:40:18,089
versus spot instances with the server

00:40:15,509 --> 00:40:20,549
less when you look at pricing that's

00:40:18,089 --> 00:40:23,609
where I feel it'll be hard for survey

00:40:20,549 --> 00:40:26,249
less to scale and be be cost effective

00:40:23,609 --> 00:40:29,190
start at the right word does it scale

00:40:26,249 --> 00:40:31,380
well honestly don't know I will be using

00:40:29,190 --> 00:40:33,200
server less for a chat mode that I wrote

00:40:31,380 --> 00:40:34,859
I think it's very good fit for

00:40:33,200 --> 00:40:37,890
applications like that which are

00:40:34,859 --> 00:40:40,319
event-driven so I'll find out if it's K

00:40:37,890 --> 00:40:41,729
as well can it be a performance hit when

00:40:40,319 --> 00:40:44,309
expecting a lot of requests yes

00:40:41,729 --> 00:40:46,170
certainly I do believe I was having that

00:40:44,309 --> 00:40:48,869
discussion I think it will have a

00:40:46,170 --> 00:40:51,239
performance here what's your opinion on

00:40:48,869 --> 00:40:53,640
docker we have just started using docker

00:40:51,239 --> 00:40:56,880
internally previously we were not using

00:40:53,640 --> 00:41:00,599
docker my opinion of that is that it is

00:40:56,880 --> 00:41:02,339
so it's a good it's a good way for us as

00:41:00,599 --> 00:41:05,249
developers not to worry about setting up

00:41:02,339 --> 00:41:07,319
your our environments and while I think

00:41:05,249 --> 00:41:09,269
that is good I still seal developers

00:41:07,319 --> 00:41:10,140
need to know the concepts of like even

00:41:09,269 --> 00:41:11,849
though you have daugher you'll have

00:41:10,140 --> 00:41:13,859
nginx running a dog or you'll have like

00:41:11,849 --> 00:41:16,529
all these ELB running a docker there's a

00:41:13,859 --> 00:41:19,979
complementary technology not a not a

00:41:16,529 --> 00:41:21,479
kind of a substitute so rest of the

00:41:19,979 --> 00:41:22,530
questions I'll be in the node corner

00:41:21,479 --> 00:41:28,639
thank you so much

00:41:22,530 --> 00:41:28,639

YouTube URL: https://www.youtube.com/watch?v=-UCtcKCYlwM


