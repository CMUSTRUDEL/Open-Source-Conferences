Title: JSHeroes 2017 | Cassi Lup - Warping Time with Async Await
Publication date: 2017-06-23
Playlist: JSHeroes 2017
Description: 
	The JS world is a constant surprise. Just look at the recent years and you'll see why. The language itself is maturing and the angles from which we look at it are becoming more and more diverse. We've arrived from 10-year release cycles to yearly feature upgrades. ES2017 is upon us and together with it, a new tool that gives us time-warping superpowers: Async/Await. Come learn (almost) all there is to know about it and how you can start using it today. It's going to be fun!
Captions: 
	00:00:00,000 --> 00:00:03,139
[Music]

00:00:11,310 --> 00:00:14,640
an introduction and thank you all for

00:00:12,600 --> 00:00:17,070
being here it's definitely an awesome

00:00:14,640 --> 00:00:19,710
crowd and the vibes are really really

00:00:17,070 --> 00:00:21,570
good today here so I'm honored to be

00:00:19,710 --> 00:00:24,480
here and speak today about some

00:00:21,570 --> 00:00:26,610
JavaScript stuff and I've known the guys

00:00:24,480 --> 00:00:28,290
in the organizational team for for a

00:00:26,610 --> 00:00:30,150
while now and I know they put a lot of

00:00:28,290 --> 00:00:31,380
effort into it and I just want to say

00:00:30,150 --> 00:00:34,290
that we really appreciate what you did

00:00:31,380 --> 00:00:40,130
so thank you and keep up the good work

00:00:34,290 --> 00:00:43,530
yeah yeah so you might have heard about

00:00:40,130 --> 00:00:45,960
async await back a couple of months when

00:00:43,530 --> 00:00:47,700
I chose this subject not so many

00:00:45,960 --> 00:00:50,460
articles have been written about it and

00:00:47,700 --> 00:00:52,620
then as I was you know writing the the

00:00:50,460 --> 00:00:54,330
stuff I'm I was happy to have so many

00:00:52,620 --> 00:00:56,430
resources to write from but then I said

00:00:54,330 --> 00:00:58,800
maybe people already know odd there is

00:00:56,430 --> 00:01:01,230
two about it so I still hope there's

00:00:58,800 --> 00:01:04,710
something new that will pick up today in

00:01:01,230 --> 00:01:06,420
this talk so I'm actually involved with

00:01:04,710 --> 00:01:08,759
the tamesha our JavaScript group and

00:01:06,420 --> 00:01:10,619
there's a couple of people here who are

00:01:08,759 --> 00:01:14,130
part of that group so thanks for being

00:01:10,619 --> 00:01:16,740
here and making this event awesome

00:01:14,130 --> 00:01:18,479
but yeah it's definitely cool to have

00:01:16,740 --> 00:01:22,020
communities and we talked last night

00:01:18,479 --> 00:01:24,479
about how they motivate us do better

00:01:22,020 --> 00:01:26,549
work they teach us and they push us

00:01:24,479 --> 00:01:28,439
forward in the JavaScript world so it's

00:01:26,549 --> 00:01:30,749
definitely awesome to be able to meet

00:01:28,439 --> 00:01:32,969
new people and to see what they're doing

00:01:30,749 --> 00:01:34,799
I'm also tech lead with a through pillar

00:01:32,969 --> 00:01:37,079
and I'm actually working on I just

00:01:34,799 --> 00:01:39,179
realize that all the codebase the

00:01:37,079 --> 00:01:42,450
project that I'm in is in typescript so

00:01:39,179 --> 00:01:44,189
you know SIL javascript is strong and I

00:01:42,450 --> 00:01:46,139
think it's going to grow and the trend

00:01:44,189 --> 00:01:46,619
that we've seen up until now will just

00:01:46,139 --> 00:01:49,920
continue

00:01:46,619 --> 00:01:51,749
ascending weathers researching material

00:01:49,920 --> 00:01:54,359
for this I stumbled about upon this

00:01:51,749 --> 00:01:57,030
great piece of news do follow it it

00:01:54,359 --> 00:02:00,149
always has fresh news and definitely the

00:01:57,030 --> 00:02:02,399
truth right so a bit of history we did

00:02:00,149 --> 00:02:04,619
hear about how JavaScript has evolved

00:02:02,399 --> 00:02:06,869
over time I just wanted us to focus on

00:02:04,619 --> 00:02:08,910
three main moments and it's easy because

00:02:06,869 --> 00:02:11,670
they're separated by ten years each and

00:02:08,910 --> 00:02:15,090
in 95 we all know it's actually December

00:02:11,670 --> 00:02:17,640
94 if I'm right we have JavaScript being

00:02:15,090 --> 00:02:20,129
written ten days and then in 2005 we

00:02:17,640 --> 00:02:21,930
have the es5 version that's the most

00:02:20,129 --> 00:02:24,960
popular and all browsers understand it

00:02:21,930 --> 00:02:29,070
and I'm sorry we usually write code in

00:02:24,960 --> 00:02:31,110
es 5-10 years later we get yes six right

00:02:29,070 --> 00:02:34,230
so there's quite a quite a bit of a time

00:02:31,110 --> 00:02:37,560
but the word the way it was worth it

00:02:34,230 --> 00:02:39,810
and with these with these three moments

00:02:37,560 --> 00:02:41,250
in time I want us to look at how we're

00:02:39,810 --> 00:02:43,050
communicating with the server's right

00:02:41,250 --> 00:02:45,240
how we're rendering data how we're

00:02:43,050 --> 00:02:47,280
requesting it and how it's making it its

00:02:45,240 --> 00:02:49,950
way into our browsers so when ninety

00:02:47,280 --> 00:02:51,690
five as we heard before Tudor said that

00:02:49,950 --> 00:02:53,250
we just got page loads right you would

00:02:51,690 --> 00:02:55,020
click you would get page loads and

00:02:53,250 --> 00:02:56,840
JavaScript did nothing about that so

00:02:55,020 --> 00:03:00,390
that's how we would serve the the

00:02:56,840 --> 00:03:02,460
websites back then and yes five though

00:03:00,390 --> 00:03:05,400
we have this major breakthrough

00:03:02,460 --> 00:03:07,050
invention that change it's not part of

00:03:05,400 --> 00:03:09,690
years five its itself but it just

00:03:07,050 --> 00:03:11,640
coincided right so this major

00:03:09,690 --> 00:03:13,350
breakthrough changed the way we would

00:03:11,640 --> 00:03:14,940
look at web pages for all our lives

00:03:13,350 --> 00:03:16,650
starting with that and of course I'm

00:03:14,940 --> 00:03:19,020
talking about the loader right we're all

00:03:16,650 --> 00:03:21,360
familiar with the loader it's a great

00:03:19,020 --> 00:03:25,200
piece of a piece of Internet innovation

00:03:21,360 --> 00:03:26,790
and it did change how we we were

00:03:25,200 --> 00:03:28,920
rendering data and when we see a loader

00:03:26,790 --> 00:03:32,010
we know that it's grabbing something and

00:03:28,920 --> 00:03:35,850
we'll just get the result from it so

00:03:32,010 --> 00:03:40,920
that was 2005 in these ten years from

00:03:35,850 --> 00:03:43,520
2005 to 2015 we learned quite a quite a

00:03:40,920 --> 00:03:46,410
bit about working with async code and

00:03:43,520 --> 00:03:49,290
what happened was that we got this term

00:03:46,410 --> 00:03:51,600
of deferred right deferred mean meaning

00:03:49,290 --> 00:03:54,990
to postpone something to wait until it

00:03:51,600 --> 00:03:57,180
renders and then get it back so we built

00:03:54,990 --> 00:03:59,790
this abstract ization over the

00:03:57,180 --> 00:04:02,130
asynchronous called Ajax as we as we

00:03:59,790 --> 00:04:04,260
knew them but back then and we just

00:04:02,130 --> 00:04:06,210
standardized all that we did in a sync

00:04:04,260 --> 00:04:08,640
code with promises so if you're here

00:04:06,210 --> 00:04:12,060
today all chances are that you're really

00:04:08,640 --> 00:04:13,740
familiar with promises but I just want

00:04:12,060 --> 00:04:15,960
us to pause a bit and just look at the

00:04:13,740 --> 00:04:19,950
anatomy of promises right so we have

00:04:15,960 --> 00:04:21,570
that deferred term there it just called

00:04:19,950 --> 00:04:23,970
something that will happen and we'll get

00:04:21,570 --> 00:04:26,340
information back so please look at the

00:04:23,970 --> 00:04:28,380
two sides we have the synchronous code

00:04:26,340 --> 00:04:30,180
and then acing right the callbacks that

00:04:28,380 --> 00:04:32,490
are being invoked when the information

00:04:30,180 --> 00:04:33,990
comes comes back so if you're in new

00:04:32,490 --> 00:04:35,820
developer right if you're just going

00:04:33,990 --> 00:04:38,729
into JavaScript this might be one of the

00:04:35,820 --> 00:04:41,520
topics that heart that is hard to grasp

00:04:38,729 --> 00:04:43,080
I love trying to explain things that I

00:04:41,520 --> 00:04:44,460
get to understand from JavaScript world

00:04:43,080 --> 00:04:46,559
and web world in general

00:04:44,460 --> 00:04:49,409
in simple terms and that's what we're

00:04:46,559 --> 00:04:51,809
trying to do today here so let's look at

00:04:49,409 --> 00:04:54,210
some code it's pretty basic no magic

00:04:51,809 --> 00:04:57,089
behind we just have this function we

00:04:54,210 --> 00:04:58,800
evoke it at the bottom and we just get

00:04:57,089 --> 00:05:00,360
the latest sweet get latest sweet

00:04:58,800 --> 00:05:03,930
returns a promise and then we just

00:05:00,360 --> 00:05:06,779
listen for its success callback and then

00:05:03,930 --> 00:05:09,719
for the error itself right so let's look

00:05:06,779 --> 00:05:12,149
at the green code here it actually

00:05:09,719 --> 00:05:14,189
signifies that the synchronous code when

00:05:12,149 --> 00:05:15,839
we look at it it just does what it we

00:05:14,189 --> 00:05:18,029
expect it to do it kind of orange in

00:05:15,839 --> 00:05:19,680
sequence but the red part there we don't

00:05:18,029 --> 00:05:21,449
know one is going to be invoked right

00:05:19,680 --> 00:05:23,279
the server might be down the server

00:05:21,449 --> 00:05:25,110
might be taking a long time to respond

00:05:23,279 --> 00:05:27,149
so we never know when that's going to

00:05:25,110 --> 00:05:29,520
happen we cannot pinpoint exactly in

00:05:27,149 --> 00:05:31,199
time so this is basically the main

00:05:29,520 --> 00:05:33,990
difference between synchronous code and

00:05:31,199 --> 00:05:36,389
an async code asynchronous right so I

00:05:33,990 --> 00:05:38,449
drew the lines on the Left signifying

00:05:36,389 --> 00:05:41,399
something that we kind of kind of can

00:05:38,449 --> 00:05:43,800
know what when it's going to run and the

00:05:41,399 --> 00:05:45,270
red represents when it's when it's not

00:05:43,800 --> 00:05:48,539
going to we were not sure when it's

00:05:45,270 --> 00:05:52,409
going to load the crux of the problem is

00:05:48,539 --> 00:05:54,389
that dot then right there right so when

00:05:52,409 --> 00:05:57,810
you see a dot then you just go into

00:05:54,389 --> 00:06:00,830
async world so if only there was a way

00:05:57,810 --> 00:06:03,839
to make that dot then more user-friendly

00:06:00,830 --> 00:06:06,419
well thankfully there is and we're today

00:06:03,839 --> 00:06:09,839
in 2017 and that means that we have es

00:06:06,419 --> 00:06:13,589
2017 upon us and with it we have this

00:06:09,839 --> 00:06:16,020
new proposal of async await which

00:06:13,589 --> 00:06:18,479
already made it into the final draft so

00:06:16,020 --> 00:06:22,139
it's staged consider a stage three and

00:06:18,479 --> 00:06:24,419
Ekman script specifications and we can

00:06:22,139 --> 00:06:26,099
start using it today basically of course

00:06:24,419 --> 00:06:28,789
we do need to transpile our code but

00:06:26,099 --> 00:06:31,319
we'll see later that if we no don't

00:06:28,789 --> 00:06:32,909
necessarily need to do that so let's

00:06:31,319 --> 00:06:37,740
look at the difference between what we

00:06:32,909 --> 00:06:41,159
had in es5 and es 2017 you see that that

00:06:37,740 --> 00:06:43,830
then right there gets replaced by await

00:06:41,159 --> 00:06:45,779
so that that's step one you right await

00:06:43,830 --> 00:06:48,899
and that actually gets rid of the whole

00:06:45,779 --> 00:06:51,060
then syntax the second step would be to

00:06:48,899 --> 00:06:52,320
grab the response that you used to get

00:06:51,060 --> 00:06:55,110
in the success

00:06:52,320 --> 00:06:57,840
call back and just save it into in our

00:06:55,110 --> 00:07:00,570
case a constant right so you see how we

00:06:57,840 --> 00:07:02,160
took the the other scoped isolated scope

00:07:00,570 --> 00:07:04,320
of the function and you brought it into

00:07:02,160 --> 00:07:07,110
the parent scope so no more separate

00:07:04,320 --> 00:07:09,150
scopes anymore and also we don't need to

00:07:07,110 --> 00:07:11,790
forget that in order to use a weight we

00:07:09,150 --> 00:07:14,070
need to declare our parent function as a

00:07:11,790 --> 00:07:15,990
sync so whenever you see a weight it

00:07:14,070 --> 00:07:19,290
means that its parent function has been

00:07:15,990 --> 00:07:24,420
a sync aside right so it's declared as a

00:07:19,290 --> 00:07:26,850
sync so this is the you know the basic

00:07:24,420 --> 00:07:29,160
happy path use case with async/await

00:07:26,850 --> 00:07:31,530
of course here we have the three states

00:07:29,160 --> 00:07:33,750
of promises usually they're pending when

00:07:31,530 --> 00:07:36,840
you create them and the other resolve or

00:07:33,750 --> 00:07:39,600
they get rejected how do you treat that

00:07:36,840 --> 00:07:42,210
with async await it actually brings a

00:07:39,600 --> 00:07:44,910
really nice syntactic sugar over that we

00:07:42,210 --> 00:07:50,760
can use try and catch in order to treat

00:07:44,910 --> 00:07:53,130
all these states of the the promise the

00:07:50,760 --> 00:07:55,230
main rule here and if you remember this

00:07:53,130 --> 00:07:57,240
it's great right I just got one ticket

00:07:55,230 --> 00:07:59,430
from the stock that's it as long as it

00:07:57,240 --> 00:08:01,560
returns a promise it can be awaited and

00:07:59,430 --> 00:08:03,300
I know there's a small detail there

00:08:01,560 --> 00:08:06,240
we'll get to that in a moment but do you

00:08:03,300 --> 00:08:08,340
remember to remember this so now that we

00:08:06,240 --> 00:08:10,950
know a bit of what I think away does

00:08:08,340 --> 00:08:12,960
you're probably asking ourselves what's

00:08:10,950 --> 00:08:15,090
in it for us right we did learn about

00:08:12,960 --> 00:08:17,850
about it today but as we heard before

00:08:15,090 --> 00:08:19,860
transitioning from what we have now in

00:08:17,850 --> 00:08:22,740
our code base to something new like I

00:08:19,860 --> 00:08:26,940
don't know Raphael angular 2 or sorry

00:08:22,740 --> 00:08:29,250
four five yeah right might take time and

00:08:26,940 --> 00:08:31,110
I hear that in my team all the time okay

00:08:29,250 --> 00:08:32,550
we should do that but it's just you know

00:08:31,110 --> 00:08:35,790
a lot of time who would give us the time

00:08:32,550 --> 00:08:38,130
to do it and the answer might be that

00:08:35,790 --> 00:08:40,440
well we not necessarily have to do it

00:08:38,130 --> 00:08:41,729
all the time by hand right manually we

00:08:40,440 --> 00:08:43,590
could automate that and that's what

00:08:41,729 --> 00:08:46,530
we're trying to do today and I built

00:08:43,590 --> 00:08:51,120
this small app that we're going to look

00:08:46,530 --> 00:08:53,310
at especially for this for this talk and

00:08:51,120 --> 00:08:57,060
you might have heard of cows a right

00:08:53,310 --> 00:09:00,140
it's a really useful app I'm sorry

00:08:57,060 --> 00:09:03,360
package that you can use in all sorts of

00:09:00,140 --> 00:09:05,529
environments right and what we have here

00:09:03,360 --> 00:09:09,129
is a node app that just

00:09:05,529 --> 00:09:09,579
requests requests beef free recipes

00:09:09,129 --> 00:09:11,350
right

00:09:09,579 --> 00:09:13,959
what cow would like to give you a recipe

00:09:11,350 --> 00:09:15,399
to eat that contains beef you know no

00:09:13,959 --> 00:09:16,810
Kyle would like to do that so that's

00:09:15,399 --> 00:09:19,899
what we have here a cow that's

00:09:16,810 --> 00:09:22,660
suggesting B free recipes right so

00:09:19,899 --> 00:09:25,990
that's how we built it here we have this

00:09:22,660 --> 00:09:29,740
request promise library that just

00:09:25,990 --> 00:09:31,930
returns it makes a call and then every

00:09:29,740 --> 00:09:36,519
times the promise with it and we have

00:09:31,930 --> 00:09:39,339
this helper that just returns a URL with

00:09:36,519 --> 00:09:41,740
a be free recipe and then we grab that

00:09:39,339 --> 00:09:44,680
and build our response and we show it

00:09:41,740 --> 00:09:46,749
right and of course what we do here is

00:09:44,680 --> 00:09:48,850
use then because that's a promise and

00:09:46,749 --> 00:09:51,120
that's how we treat promises so let me

00:09:48,850 --> 00:09:55,170
just start this up oops

00:09:51,120 --> 00:09:59,249
and hopefully this will work

00:09:55,170 --> 00:09:59,249
oops not this

00:10:04,510 --> 00:10:11,360
yeah and sure enough it does this is our

00:10:08,080 --> 00:10:15,140
awesome program that just runs them just

00:10:11,360 --> 00:10:17,630
a lot of nice things feed of course no

00:10:15,140 --> 00:10:19,910
beef so what we want to do here is we

00:10:17,630 --> 00:10:22,130
want to come and you know change this to

00:10:19,910 --> 00:10:23,720
use async/await and if we're like a

00:10:22,130 --> 00:10:25,250
normal developer with the normal code

00:10:23,720 --> 00:10:27,500
base we might have like hundreds of

00:10:25,250 --> 00:10:29,390
files and we have to go and manually

00:10:27,500 --> 00:10:32,180
change those and you know it might not

00:10:29,390 --> 00:10:35,240
work as as we want that to so what I did

00:10:32,180 --> 00:10:36,470
here was I wrote a codemod and this is

00:10:35,240 --> 00:10:38,870
something we're going to hear about

00:10:36,470 --> 00:10:41,290
later on the Pahlavi that will give us a

00:10:38,870 --> 00:10:43,970
great talk about how to use a SDS

00:10:41,290 --> 00:10:45,260
section text trees and I'll let her go

00:10:43,970 --> 00:10:47,860
into more details about that but

00:10:45,260 --> 00:10:51,020
basically you just get a note of your

00:10:47,860 --> 00:10:54,320
app of your code and then you can mingle

00:10:51,020 --> 00:10:57,380
with it so this ast basically does those

00:10:54,320 --> 00:11:01,250
three things that I showed it adds the

00:10:57,380 --> 00:11:04,040
await keyword it saves the response into

00:11:01,250 --> 00:11:06,890
a variable and then it adds a sink to

00:11:04,040 --> 00:11:08,750
the top of it at the top of the function

00:11:06,890 --> 00:11:11,570
and it also wraps everything in a

00:11:08,750 --> 00:11:13,790
try-catch so basically this is this is

00:11:11,570 --> 00:11:15,080
where all the magic happens if you if

00:11:13,790 --> 00:11:17,630
you're curious I can go into more

00:11:15,080 --> 00:11:21,710
details afterwards but how we're going

00:11:17,630 --> 00:11:25,160
to run this is by using a tool from

00:11:21,710 --> 00:11:28,420
Facebook called a J's cut code mod it's

00:11:25,160 --> 00:11:32,900
a NPM package that I installed globally

00:11:28,420 --> 00:11:34,880
I'm sorry code shipped J's code shipped

00:11:32,900 --> 00:11:36,830
and then I'll give it a transition file

00:11:34,880 --> 00:11:42,140
the one that we just created here so

00:11:36,830 --> 00:11:43,760
it's a single a transform and then I'll

00:11:42,140 --> 00:11:45,590
give it the file that I want to apply

00:11:43,760 --> 00:11:48,100
the changes to and that's my index J s

00:11:45,590 --> 00:11:50,630
and as I run this you'll see that it

00:11:48,100 --> 00:11:53,210
found one file that I change and it says

00:11:50,630 --> 00:11:56,180
that it's ok and of course I forgot to

00:11:53,210 --> 00:11:58,070
have this open so that you can see how

00:11:56,180 --> 00:11:59,900
the code changes real time but what we

00:11:58,070 --> 00:12:02,330
see here is that we no longer have that

00:11:59,900 --> 00:12:05,000
dot then but we rather get the await and

00:12:02,330 --> 00:12:08,030
we have it saved in a constant and then

00:12:05,000 --> 00:12:10,160
this response is also used lower down

00:12:08,030 --> 00:12:13,250
the down the road and we also have

00:12:10,160 --> 00:12:16,209
everything wrapped in a try-catch right

00:12:13,250 --> 00:12:18,040
so if we go back

00:12:16,209 --> 00:12:20,949
and let's just restart this to make sure

00:12:18,040 --> 00:12:23,589
we're running the latest version we go

00:12:20,949 --> 00:12:27,220
back and re reload we should see the

00:12:23,589 --> 00:12:31,629
same thing happening and sure does and

00:12:27,220 --> 00:12:34,120
this time we have a more sync looking

00:12:31,629 --> 00:12:37,829
code that does the same thing right so

00:12:34,120 --> 00:12:40,449
let's get get back to the presentation

00:12:37,829 --> 00:12:42,579
there are still some gotchas right you

00:12:40,449 --> 00:12:45,069
don't just don't go and change your

00:12:42,579 --> 00:12:48,009
whole code and it just works out of the

00:12:45,069 --> 00:12:50,470
bat the first thing we need to note is

00:12:48,009 --> 00:12:52,569
that a weight introduces this delay

00:12:50,470 --> 00:12:55,629
right so whenever you await for a

00:12:52,569 --> 00:12:57,220
promise to resolve your execution code

00:12:55,629 --> 00:13:00,850
execution will actually stop there and

00:12:57,220 --> 00:13:02,319
pause until a response comes back so

00:13:00,850 --> 00:13:05,560
that's really important to note because

00:13:02,319 --> 00:13:07,449
up until now as I was saying in my promo

00:13:05,560 --> 00:13:09,639
video JavaScript didn't like to wait

00:13:07,449 --> 00:13:11,649
right so we're trying to make it wait

00:13:09,639 --> 00:13:14,439
we're trying to work time so that it

00:13:11,649 --> 00:13:18,550
actually has the the path that we expect

00:13:14,439 --> 00:13:20,529
it to second of all now that we have

00:13:18,550 --> 00:13:23,350
these delays being introduced we don't

00:13:20,529 --> 00:13:24,850
want to have to wait for each request to

00:13:23,350 --> 00:13:26,620
go to the server and then come back and

00:13:24,850 --> 00:13:29,110
you know do this a couple of times and

00:13:26,620 --> 00:13:31,660
build that delay so as you might know

00:13:29,110 --> 00:13:34,449
promise all returns the promise itself

00:13:31,660 --> 00:13:37,329
that means that we can we can await its

00:13:34,449 --> 00:13:39,910
response and we can grab several

00:13:37,329 --> 00:13:42,040
promises throw them in a promise all and

00:13:39,910 --> 00:13:45,490
then just await the response of that so

00:13:42,040 --> 00:13:48,309
this way we can save time and thirdly we

00:13:45,490 --> 00:13:50,500
can also await non promises and this is

00:13:48,309 --> 00:13:51,939
pretty cool because you don't know when

00:13:50,500 --> 00:13:54,970
you would need that in your code it

00:13:51,939 --> 00:13:56,889
might be at any moment and what it does

00:13:54,970 --> 00:13:59,920
if you like oh wait

00:13:56,889 --> 00:14:02,170
I don't know string no code string it

00:13:59,920 --> 00:14:04,449
will just build a promise resolve and

00:14:02,170 --> 00:14:08,350
throw that value in there so that's

00:14:04,449 --> 00:14:09,910
really important to know so I just want

00:14:08,350 --> 00:14:13,029
to do a quick recap of what we've been

00:14:09,910 --> 00:14:15,160
through up until now a bit of history we

00:14:13,029 --> 00:14:17,199
see JavaScript evolving and I really

00:14:15,160 --> 00:14:20,170
love the fact that we have yearly

00:14:17,199 --> 00:14:22,689
release cycles now do check them out the

00:14:20,170 --> 00:14:24,670
specifications are stated I think it's a

00:14:22,689 --> 00:14:26,439
good hub page there I might have added

00:14:24,670 --> 00:14:29,440
and the resources links I can remember

00:14:26,439 --> 00:14:31,450
but there's definitely a lot of fun

00:14:29,440 --> 00:14:33,700
stuff and awesome stuffs coming in to

00:14:31,450 --> 00:14:35,380
javascript and that's because we have a

00:14:33,700 --> 00:14:37,570
lot of developed developers switching

00:14:35,380 --> 00:14:39,640
from other languages to javascript

00:14:37,570 --> 00:14:43,090
because if it's popularity

00:14:39,640 --> 00:14:46,270
second of all know that a single wave is

00:14:43,090 --> 00:14:49,300
just a syntax sugar over promises right

00:14:46,270 --> 00:14:52,680
what it does is it just makes it easier

00:14:49,300 --> 00:14:55,720
to read right it doesn't change the

00:14:52,680 --> 00:14:59,140
async concept we still have async code

00:14:55,720 --> 00:15:00,640
that's being run thirdly we have a

00:14:59,140 --> 00:15:02,320
shared state so you notice that we now

00:15:00,640 --> 00:15:04,660
have everything like the constant that

00:15:02,320 --> 00:15:07,360
we grab the result into is in the parent

00:15:04,660 --> 00:15:10,090
scope and just don't remember that any

00:15:07,360 --> 00:15:12,310
don't forget that any async function so

00:15:10,090 --> 00:15:13,930
when we have that async keyword to the

00:15:12,310 --> 00:15:16,390
top of the function it causes it to

00:15:13,930 --> 00:15:18,760
automatically return a promise so that

00:15:16,390 --> 00:15:21,910
might be not what you expect in the code

00:15:18,760 --> 00:15:23,590
that you that you have right now we also

00:15:21,910 --> 00:15:25,720
have the possibility to use try catch

00:15:23,590 --> 00:15:29,920
you can wait anything I said before and

00:15:25,720 --> 00:15:32,620
very interestingly we have the a couple

00:15:29,920 --> 00:15:34,600
of days we had note eight being launched

00:15:32,620 --> 00:15:36,940
and it's the long time support a version

00:15:34,600 --> 00:15:40,810
of node and you can use a cinco eight

00:15:36,940 --> 00:15:42,540
with it as I was writing this app at one

00:15:40,810 --> 00:15:44,980
moment in time I had like a version

00:15:42,540 --> 00:15:47,320
older version and like compiling this

00:15:44,980 --> 00:15:49,180
was why it's not working and turns out

00:15:47,320 --> 00:15:52,210
that of course it's going to throw a

00:15:49,180 --> 00:15:54,790
syntax error and browsers are starting

00:15:52,210 --> 00:15:57,250
to support this but for the Mona I think

00:15:54,790 --> 00:16:01,240
it's still needed that we transpile our

00:15:57,250 --> 00:16:02,310
code to back to es6 if yes es five

00:16:01,240 --> 00:16:06,550
actually

00:16:02,310 --> 00:16:08,500
so that being said this was a bit of an

00:16:06,550 --> 00:16:10,270
introduction to async await and I do

00:16:08,500 --> 00:16:13,360
hope that you got something new out of

00:16:10,270 --> 00:16:15,880
it of course my code mod will probably

00:16:13,360 --> 00:16:17,890
not work on all code bases and it's

00:16:15,880 --> 00:16:19,810
still something that can be involved so

00:16:17,890 --> 00:16:21,820
if you have any feedback I'm glad to

00:16:19,810 --> 00:16:23,970
receive it but I want to thank you for

00:16:21,820 --> 00:16:23,970
listening

00:16:30,820 --> 00:16:35,480
yeah so what's the best way to handle

00:16:32,990 --> 00:16:38,660
concurrent awaits I think we answered

00:16:35,480 --> 00:16:40,580
that with promise all so as you need to

00:16:38,660 --> 00:16:43,160
wait you want to save time and you just

00:16:40,580 --> 00:16:45,290
use the promise all what's under the

00:16:43,160 --> 00:16:48,649
hood of a sink oh wait it's actually

00:16:45,290 --> 00:16:51,050
using generators in in the you know

00:16:48,649 --> 00:16:53,050
behind and it when it turns piles it

00:16:51,050 --> 00:16:55,790
responds to generators so it's actually

00:16:53,050 --> 00:16:59,060
that's what what it does behind so it's

00:16:55,790 --> 00:17:02,060
not just plainly as index sugar why not

00:16:59,060 --> 00:17:03,709
use our observable observables good

00:17:02,060 --> 00:17:05,780
question maybe your code base is not

00:17:03,709 --> 00:17:08,329
ready for that maybe your mindset is not

00:17:05,780 --> 00:17:11,360
ready for that observers are really

00:17:08,329 --> 00:17:14,179
elegant and a really hyper way of

00:17:11,360 --> 00:17:15,709
writing code I love them but it's

00:17:14,179 --> 00:17:19,550
probably not the best solution for all

00:17:15,709 --> 00:17:22,910
code bases I don't know what to say

00:17:19,550 --> 00:17:27,559
sometimes yes sometimes no I just a wait

00:17:22,910 --> 00:17:29,900
to see the answer to that my opinion on

00:17:27,559 --> 00:17:32,090
generators is that they're a bit

00:17:29,900 --> 00:17:36,050
complicated and trying to explain them

00:17:32,090 --> 00:17:38,059
to others kind of got you know mixed

00:17:36,050 --> 00:17:39,890
feedback on that I think it's much

00:17:38,059 --> 00:17:41,929
easier to explain what a async/await

00:17:39,890 --> 00:17:43,760
does then what generators do so I'm

00:17:41,929 --> 00:17:45,830
really glad that we have them now I

00:17:43,760 --> 00:17:48,530
personally don't use them in our code

00:17:45,830 --> 00:17:50,600
base I've seen some usages of them but

00:17:48,530 --> 00:17:53,090
as I said I think they're a bit hard to

00:17:50,600 --> 00:17:55,910
grasp and I'd rather write code that

00:17:53,090 --> 00:18:03,890
it's easier to understand then you know

00:17:55,910 --> 00:18:06,919
when I can well you can you can still

00:18:03,890 --> 00:18:08,750
use both promises and async/await

00:18:06,919 --> 00:18:10,730
you know in tandem and just use it where

00:18:08,750 --> 00:18:12,440
it makes sense for you as I said you

00:18:10,730 --> 00:18:14,300
want to make your code look good and

00:18:12,440 --> 00:18:17,419
easy to read and easy to understand so

00:18:14,300 --> 00:18:20,570
if that helps you so be it use them if

00:18:17,419 --> 00:18:22,130
you're getting nightmare from libraries

00:18:20,570 --> 00:18:25,429
you know it's probably not not a good

00:18:22,130 --> 00:18:29,390
sign to jump into async/await I hope I

00:18:25,429 --> 00:18:31,370
answered the question does acing in a

00:18:29,390 --> 00:18:33,610
way to benefit from long stack traces

00:18:31,370 --> 00:18:36,650
I know generators do if I'm not mistaken

00:18:33,610 --> 00:18:38,110
I'm not 100% sure I understand the

00:18:36,650 --> 00:18:40,669
question but if I don't answer it

00:18:38,110 --> 00:18:42,770
completely do come afterwards and I try

00:18:40,669 --> 00:18:44,540
to give my best answer

00:18:42,770 --> 00:18:47,480
as far as I know there's no difference

00:18:44,540 --> 00:18:50,300
there's no limit into how how you you

00:18:47,480 --> 00:18:51,679
just declared in a sink and the top of

00:18:50,300 --> 00:18:53,780
the function then you could use as many

00:18:51,679 --> 00:18:57,080
a weights as you want and group them you

00:18:53,780 --> 00:19:00,050
know as your as your needs go can the

00:18:57,080 --> 00:19:02,179
bees with observers that I don't know

00:19:00,050 --> 00:19:05,059
but we can look into it and we can find

00:19:02,179 --> 00:19:07,910
out together can cancel on a weight well

00:19:05,059 --> 00:19:10,910
weight is being based on promises I know

00:19:07,910 --> 00:19:13,070
there was this talk about introducing

00:19:10,910 --> 00:19:15,860
cancellation for promises but I think it

00:19:13,070 --> 00:19:20,240
was dropped and I'm not sure again it

00:19:15,860 --> 00:19:22,490
was like a gray line there but as long

00:19:20,240 --> 00:19:27,740
as promises can be canceled you can also

00:19:22,490 --> 00:19:29,210
cancel oh it operations so yeah how

00:19:27,740 --> 00:19:31,070
would you go about resolving a promise

00:19:29,210 --> 00:19:33,640
with multiple arguments since that not

00:19:31,070 --> 00:19:37,040
supported by default right browsers

00:19:33,640 --> 00:19:38,420
that's a good question and I hope I'm

00:19:37,040 --> 00:19:41,780
not wrong but I think you can also do

00:19:38,420 --> 00:19:43,670
structure your your response I need to

00:19:41,780 --> 00:19:45,320
look into that but again let's come chat

00:19:43,670 --> 00:19:48,559
afterwards and I will we'll find an

00:19:45,320 --> 00:19:52,309
answer to that how does the async/await

00:19:48,559 --> 00:19:55,670
code execute so what it does is you know

00:19:52,309 --> 00:19:58,460
that it JavaScript the run itself the

00:19:55,670 --> 00:20:01,460
engine behind just has it's this stack

00:19:58,460 --> 00:20:04,910
where it stores the doctor said you have

00:20:01,460 --> 00:20:07,400
each line with with each operator which

00:20:04,910 --> 00:20:09,500
is expression expression it adds that

00:20:07,400 --> 00:20:11,500
and pauses the execution until the

00:20:09,500 --> 00:20:15,800
response comes and then continues

00:20:11,500 --> 00:20:17,960
working 3 or code why can't we use async

00:20:15,800 --> 00:20:20,750
with arrows I'm not sure I understand

00:20:17,960 --> 00:20:22,880
what that means but I know I mean I've

00:20:20,750 --> 00:20:24,740
seen some usages with errors so again

00:20:22,880 --> 00:20:28,420
come afterwards and we'll write a few

00:20:24,740 --> 00:20:31,130
lines of code and see if it doesn't work

00:20:28,420 --> 00:20:33,980
any thoughts about coop versus Express

00:20:31,130 --> 00:20:35,480
not really but there's a node car near

00:20:33,980 --> 00:20:37,910
the corner and I'm sure we can find more

00:20:35,480 --> 00:20:40,610
more there I just like its press because

00:20:37,910 --> 00:20:42,650
it's pretty popular I know Co is 2 but I

00:20:40,610 --> 00:20:44,210
found it more most accessible to get

00:20:42,650 --> 00:20:47,960
into and I've only had a good experience

00:20:44,210 --> 00:20:49,460
with good experiences with it so far is

00:20:47,960 --> 00:20:51,710
there any good shim available at the

00:20:49,460 --> 00:20:56,179
moment and how's the IE compatible

00:20:51,710 --> 00:20:59,210
compatibility good question so we have

00:20:56,179 --> 00:21:01,340
this UI beginner training that we're

00:20:59,210 --> 00:21:03,350
giving at our company and I'm always

00:21:01,340 --> 00:21:04,940
telling people that are coming and

00:21:03,350 --> 00:21:07,309
learning about UI that they're so lucky

00:21:04,940 --> 00:21:09,379
to get into this field now because if

00:21:07,309 --> 00:21:11,659
they were to come to have come like five

00:21:09,379 --> 00:21:13,970
years ago it was much more of a

00:21:11,659 --> 00:21:15,619
nightmare because of ie I remember one

00:21:13,970 --> 00:21:17,539
time that we had to give an estimation

00:21:15,619 --> 00:21:19,340
of how long the feature would take to

00:21:17,539 --> 00:21:21,049
implement we actually had to give to

00:21:19,340 --> 00:21:23,269
estimation so one was for the feature

00:21:21,049 --> 00:21:25,039
itself and then one for was for the IE

00:21:23,269 --> 00:21:27,889
support I'm not kidding this happen a

00:21:25,039 --> 00:21:31,129
couple of times actually so as far as I

00:21:27,889 --> 00:21:32,600
know if es five runs in your eye then it

00:21:31,129 --> 00:21:34,999
this will also run because your

00:21:32,600 --> 00:21:37,129
transpiling your code I do look forward

00:21:34,999 --> 00:21:41,679
to the day when we'll be able to write

00:21:37,129 --> 00:21:41,679
async/await code and not have a pilot

00:21:42,429 --> 00:21:48,110
you said that execution stops does this

00:21:45,440 --> 00:21:51,019
makes make it sugar coat over promises

00:21:48,110 --> 00:21:54,049
isn't this a low-level feature again

00:21:51,019 --> 00:21:56,720
what's happening in the behind the

00:21:54,049 --> 00:21:59,960
scenes is that it's using generators

00:21:56,720 --> 00:22:01,759
right so it's rather a sugar syntax over

00:21:59,960 --> 00:22:04,970
generators you could do the same thing

00:22:01,759 --> 00:22:06,740
using generators but it would be harder

00:22:04,970 --> 00:22:08,509
to rest as I said that's again my

00:22:06,740 --> 00:22:11,659
personal opinion don't throw eggs or

00:22:08,509 --> 00:22:14,320
anything what our promise pits pitfalls

00:22:11,659 --> 00:22:16,940
good question so again when you're

00:22:14,320 --> 00:22:18,289
waiting for values you also need to to

00:22:16,940 --> 00:22:20,869
treat all its states you know the

00:22:18,289 --> 00:22:24,019
resolve the rejections and you need to

00:22:20,869 --> 00:22:26,090
think in an async manner in a way right

00:22:24,019 --> 00:22:27,919
you need to know that the information is

00:22:26,090 --> 00:22:30,230
not there for you to grab instantly need

00:22:27,919 --> 00:22:32,210
to wait so that's basically what I meant

00:22:30,230 --> 00:22:34,100
by that how do you differentiate between

00:22:32,210 --> 00:22:38,450
errors in the catch for example

00:22:34,100 --> 00:22:40,759
json.parse fails well try catch is not

00:22:38,450 --> 00:22:43,009
new it's just that we can use it with

00:22:40,759 --> 00:22:48,379
requests right now instead of having to

00:22:43,009 --> 00:22:50,570
treat a error in the callback like an

00:22:48,379 --> 00:22:51,980
error callback for the promise so it's

00:22:50,570 --> 00:22:54,289
the same thing you would look at what

00:22:51,980 --> 00:22:55,879
the promise is and what its contents I'm

00:22:54,289 --> 00:22:58,009
sorry what the error is and what its

00:22:55,879 --> 00:23:01,429
content contents are and you would treat

00:22:58,009 --> 00:23:03,320
them on each different case good to know

00:23:01,429 --> 00:23:04,519
that a think is already supported from

00:23:03,320 --> 00:23:07,279
no j76

00:23:04,519 --> 00:23:09,320
yep that's my thoughts exactly what's

00:23:07,279 --> 00:23:09,590
the benefit of other than syntactic

00:23:09,320 --> 00:23:12,470
sugar

00:23:09,590 --> 00:23:16,030
as I said I think oh there's one more

00:23:12,470 --> 00:23:19,670
benefit I've seen a lot of like promise

00:23:16,030 --> 00:23:23,510
chain health being reduced to readable

00:23:19,670 --> 00:23:25,580
code lets less lines of code so it's

00:23:23,510 --> 00:23:26,390
just how your code looks it's easier to

00:23:25,580 --> 00:23:28,100
digest

00:23:26,390 --> 00:23:29,570
what if promise all delivers different

00:23:28,100 --> 00:23:32,630
types of objects how do you assign

00:23:29,570 --> 00:23:34,610
values well usually you just want to

00:23:32,630 --> 00:23:36,830
make the calls and wait for them to

00:23:34,610 --> 00:23:38,720
complete again we can go into details

00:23:36,830 --> 00:23:41,830
afterwards if you'd like common thing me

00:23:38,720 --> 00:23:44,750
I think we do need a coder for that too

00:23:41,830 --> 00:23:47,480
to see how fast is async/await

00:23:44,750 --> 00:23:52,270
as fast as fast as you know promises I'd

00:23:47,480 --> 00:23:55,640
say and I think a weight versus fibers

00:23:52,270 --> 00:23:57,440
I'm I'm not sure I understand what that

00:23:55,640 --> 00:24:00,350
means but again do ping me afterwards

00:23:57,440 --> 00:24:01,980
and we'll we'll get into more details so

00:24:00,350 --> 00:24:10,369
thank you guys

00:24:01,980 --> 00:24:10,369

YouTube URL: https://www.youtube.com/watch?v=1J-2huqyrBk


