Title: JSHeroes 2017 | Robert Onodi - Building Universal Apps
Publication date: 2017-06-23
Playlist: JSHeroes 2017
Description: 
	The present enables us to build universal applications, that run on multiple platforms and environments. Why should I care to build such applications? Or why should I even care that such applications can be built. 
From theory to code examples, from sane coding to going crazy. You name it.
Captions: 
	00:00:11,519 --> 00:00:18,880
so hello everyone thank you very much

00:00:16,630 --> 00:00:22,140
for being here thank you Paul

00:00:18,880 --> 00:00:24,939
as Paul pointed out I just moved to Mac

00:00:22,140 --> 00:00:27,220
it's interesting story came to in the

00:00:24,939 --> 00:00:32,199
office and said well you cannot go to

00:00:27,220 --> 00:00:36,790
the conference using a Windows so I got

00:00:32,199 --> 00:00:39,820
a Mac yeah I know and I'm still a huge

00:00:36,790 --> 00:00:42,790
windows fan mainly the operating system

00:00:39,820 --> 00:00:48,699
not the dotnet and I was programming

00:00:42,790 --> 00:00:49,930
that one so here are mmm on your budget

00:00:48,699 --> 00:00:52,530
it will appear that I were going to

00:00:49,930 --> 00:00:55,930
speak about peer-to-peer applications

00:00:52,530 --> 00:00:57,879
but I will speak about building

00:00:55,930 --> 00:01:03,519
universal apps games just mix up so

00:00:57,879 --> 00:01:06,820
don't worry interesting I have a funny

00:01:03,519 --> 00:01:10,660
story for today my dear loveth father

00:01:06,820 --> 00:01:13,929
just writing to me just to say that have

00:01:10,660 --> 00:01:16,119
fun at the conference and success at a

00:01:13,929 --> 00:01:18,670
Java conference so basically he thinks

00:01:16,119 --> 00:01:20,289
that I'm going to Java conference now I

00:01:18,670 --> 00:01:22,599
imagine you surprised if you found out

00:01:20,289 --> 00:01:25,360
that I'm working like almost for 10

00:01:22,599 --> 00:01:28,119
years in JavaScript so that would be

00:01:25,360 --> 00:01:28,660
very interesting for him so if you don't

00:01:28,119 --> 00:01:32,979
know me

00:01:28,660 --> 00:01:34,450
I'm Robert Ronald E I'm a technical guy

00:01:32,979 --> 00:01:37,959
I work at the devil's own at the moment

00:01:34,450 --> 00:01:42,369
I make people's life harder a devil's

00:01:37,959 --> 00:01:46,780
own so mainly I do just I don't know

00:01:42,369 --> 00:01:50,140
coding so coding life is my motto

00:01:46,780 --> 00:01:52,780
what does that mean is that I forget

00:01:50,140 --> 00:01:56,170
what profile I usually just do open

00:01:52,780 --> 00:01:57,759
source project there and I have a blog I

00:01:56,170 --> 00:02:01,000
haven't blogged for like maybe a year

00:01:57,759 --> 00:02:01,720
something and I wrote a book about me

00:02:01,000 --> 00:02:04,840
blueprints

00:02:01,720 --> 00:02:08,649
so it basically book about Express

00:02:04,840 --> 00:02:14,560
angular and know jazz okay so it's about

00:02:08,649 --> 00:02:17,319
angular 2 I try to be cool funny story

00:02:14,560 --> 00:02:19,659
that when I started writing the book it

00:02:17,319 --> 00:02:20,170
was angular 1 and when I almost finished

00:02:19,659 --> 00:02:22,329
the book

00:02:20,170 --> 00:02:24,400
angular 2 came out so they take

00:02:22,329 --> 00:02:24,670
contacted me and said well you know we

00:02:24,400 --> 00:02:28,000
will

00:02:24,670 --> 00:02:30,370
I too have like angular2 maybe can you

00:02:28,000 --> 00:02:33,520
do that for us and like yeah but the

00:02:30,370 --> 00:02:36,540
book is almost ready like well just take

00:02:33,520 --> 00:02:39,040
your time and do something nice for us

00:02:36,540 --> 00:02:44,860
so it's a book about six real life

00:02:39,040 --> 00:02:46,360
applications and interestingly a few

00:02:44,860 --> 00:02:49,480
years ago there was like I mean I think

00:02:46,360 --> 00:02:51,069
a year ago it was hello Jess and the

00:02:49,480 --> 00:02:54,880
whole town was here and he spoke about

00:02:51,069 --> 00:03:00,040
micro apps and I really included that in

00:02:54,880 --> 00:03:01,930
the last chapter so it's pretty nice I'm

00:03:00,040 --> 00:03:03,730
not really twitter person so you don't

00:03:01,930 --> 00:03:05,440
find me on Twitter I mean you will find

00:03:03,730 --> 00:03:09,489
me but I would not tweet there anything

00:03:05,440 --> 00:03:11,380
so just Facebook me or github this is

00:03:09,489 --> 00:03:17,580
the book hashtag the book it's a pretty

00:03:11,380 --> 00:03:17,580
nice cover so just going to move on what

00:03:19,830 --> 00:03:23,950
yeah of course is free you just have to

00:03:22,390 --> 00:03:26,830
pay I don't know four dollars or

00:03:23,950 --> 00:03:36,600
something like that but the shipping is

00:03:26,830 --> 00:03:39,910
free so so today I'm going to talk about

00:03:36,600 --> 00:03:42,609
universal apps and what does that mean

00:03:39,910 --> 00:03:44,650
it's little bit may be confusing for you

00:03:42,609 --> 00:03:46,750
it was confusing for me too in the

00:03:44,650 --> 00:03:48,609
beginning but let's just roll back a

00:03:46,750 --> 00:03:51,040
little bit in time and we're going to

00:03:48,609 --> 00:03:53,140
hit like isomorphic apps again there was

00:03:51,040 --> 00:03:57,489
a lot of buzz words about isomorphic

00:03:53,140 --> 00:04:00,630
apps and how we can do them what they

00:03:57,489 --> 00:04:05,410
didn't mean and stuff like that so

00:04:00,630 --> 00:04:07,480
correspondingly they're like not the

00:04:05,410 --> 00:04:10,920
best way to describe something that runs

00:04:07,480 --> 00:04:13,180
on a client and a server so basically

00:04:10,920 --> 00:04:14,980
meteor was doing the same thing so they

00:04:13,180 --> 00:04:17,140
were like building these isomorphic apps

00:04:14,980 --> 00:04:19,630
that can run on and those on the clients

00:04:17,140 --> 00:04:22,000
and then in the back end with some

00:04:19,630 --> 00:04:23,710
changes between them so we would not

00:04:22,000 --> 00:04:26,350
have a universal code base so we'll have

00:04:23,710 --> 00:04:30,400
like different code bases for that and I

00:04:26,350 --> 00:04:33,820
think that at the moment we just evolved

00:04:30,400 --> 00:04:37,490
from the isomorphic state so we can like

00:04:33,820 --> 00:04:39,710
get a new definition for that so

00:04:37,490 --> 00:04:42,160
I think a better definition would be

00:04:39,710 --> 00:04:45,650
like universal apps okay

00:04:42,160 --> 00:04:50,270
because basically we would like to have

00:04:45,650 --> 00:04:53,060
a shared code base that is can be run on

00:04:50,270 --> 00:04:56,240
multiple platforms like a mobile devices

00:04:53,060 --> 00:04:59,900
on back-end servers and and maybe

00:04:56,240 --> 00:05:02,389
interesting devices so basically the

00:04:59,900 --> 00:05:06,410
same code that can run on multiple

00:05:02,389 --> 00:05:09,620
platforms not the same code with changes

00:05:06,410 --> 00:05:12,440
in it like meteor does with this client

00:05:09,620 --> 00:05:15,440
and do this if server then do that okay

00:05:12,440 --> 00:05:17,599
so it different so I think it's a better

00:05:15,440 --> 00:05:19,970
definition like relating to or done by

00:05:17,599 --> 00:05:21,919
people things in the world like groups

00:05:19,970 --> 00:05:25,849
of applicable to everything in the world

00:05:21,919 --> 00:05:28,009
so I think it's a better approach to

00:05:25,849 --> 00:05:32,419
just define apps that can run everywhere

00:05:28,009 --> 00:05:34,099
like universal apps okay so in a word

00:05:32,419 --> 00:05:36,050
that we can roll the same code in

00:05:34,099 --> 00:05:38,990
different environments okay that's the

00:05:36,050 --> 00:05:40,789
key definition from here and it will run

00:05:38,990 --> 00:05:43,639
of course it will run on multiple

00:05:40,789 --> 00:05:47,240
devices like we can it can run in Chrome

00:05:43,639 --> 00:05:52,250
iOS like that's the sign for Google

00:05:47,240 --> 00:05:56,990
functions no jazz engineer as verify and

00:05:52,250 --> 00:06:02,479
an Android okay if you don't really

00:05:56,990 --> 00:06:08,139
believe me I have proof so this is a

00:06:02,479 --> 00:06:12,110
JavaScript code it's an engine script

00:06:08,139 --> 00:06:15,680
it's pretty old I think it's like three

00:06:12,110 --> 00:06:19,099
or five years in the market basically we

00:06:15,680 --> 00:06:21,740
can run JavaScript code is interpreted

00:06:19,099 --> 00:06:24,110
by nginx it's like a partial web server

00:06:21,740 --> 00:06:27,770
so we can write small chunks of code

00:06:24,110 --> 00:06:31,430
that can be ran by the nginx server

00:06:27,770 --> 00:06:36,500
itself so for example these functions

00:06:31,430 --> 00:06:38,150
will just enhance your logging in nginx

00:06:36,500 --> 00:06:41,930
okay so you can just make some custom

00:06:38,150 --> 00:06:43,490
Logging's with the giass kit so it's

00:06:41,930 --> 00:06:48,050
pretty straightforward it's like in

00:06:43,490 --> 00:06:50,169
hopes it's like you know see you just

00:06:48,050 --> 00:06:56,169
import your libraries

00:06:50,169 --> 00:06:57,999
at the desired function there and set

00:06:56,169 --> 00:07:01,050
the format for the log like key value

00:06:57,999 --> 00:07:04,719
pairs define special log format and

00:07:01,050 --> 00:07:06,879
voila it just works so basically you

00:07:04,719 --> 00:07:09,789
have like custom logs here in the XS

00:07:06,879 --> 00:07:13,419
head a lot okay so it's JavaScript ran

00:07:09,789 --> 00:07:15,460
in nginx it's very stripped-down version

00:07:13,419 --> 00:07:17,499
of JavaScript so you're not going to

00:07:15,460 --> 00:07:19,960
have like the cool imports and require

00:07:17,499 --> 00:07:24,249
than any fancy stuff that you had like

00:07:19,960 --> 00:07:25,509
yes sixteen so but it works so you have

00:07:24,249 --> 00:07:32,080
like the basic functionality of

00:07:25,509 --> 00:07:35,189
JavaScript and the core syntax so taking

00:07:32,080 --> 00:07:39,310
my idea a little bit further from nginx

00:07:35,189 --> 00:07:42,580
that means that we can take JavaScript

00:07:39,310 --> 00:07:44,469
and run it on different devices so we

00:07:42,580 --> 00:07:48,249
have like the browser we have large

00:07:44,469 --> 00:07:50,589
mobile web LT device and servers okay so

00:07:48,249 --> 00:07:53,229
at the moment we can run JavaScript on

00:07:50,589 --> 00:07:55,919
each of those platforms okay seemingly

00:07:53,229 --> 00:08:00,039
we have no problem with it we can write

00:07:55,919 --> 00:08:02,199
I don't know maybe ultimately scars like

00:08:00,039 --> 00:08:08,229
Tesla has like displays in their cars

00:08:02,199 --> 00:08:10,180
probably written in some JavaScript but

00:08:08,229 --> 00:08:14,289
before we continue there's another thing

00:08:10,180 --> 00:08:17,439
that I really admire in human history is

00:08:14,289 --> 00:08:20,009
the abstraction okay so I think

00:08:17,439 --> 00:08:23,620
abstraction is the biggest tool of human

00:08:20,009 --> 00:08:26,249
fossil ever invented in life so this fan

00:08:23,620 --> 00:08:30,460
of extractions has like a 1,000 year

00:08:26,249 --> 00:08:34,539
100,000 years because for example we can

00:08:30,460 --> 00:08:36,849
like speak to each other and I can say

00:08:34,539 --> 00:08:40,329
ball and everybody understands what the

00:08:36,849 --> 00:08:42,430
ball means okay without going any

00:08:40,329 --> 00:08:44,410
further with details like you have

00:08:42,430 --> 00:08:45,880
leather ball we do have a sociable we

00:08:44,410 --> 00:08:48,639
have a basketball or something like that

00:08:45,880 --> 00:08:51,760
a ball is a ball it's rounding it played

00:08:48,639 --> 00:08:53,709
this in sports or we can just attach to

00:08:51,760 --> 00:08:55,720
it with which our memories that when I

00:08:53,709 --> 00:08:56,260
was a child I played saucer maybe or

00:08:55,720 --> 00:09:01,900
something like that

00:08:56,260 --> 00:09:04,180
and one interesting fact is

00:09:01,900 --> 00:09:06,190
the keyboardist tooling okay so

00:09:04,180 --> 00:09:09,550
abstraction is a tool for us as human

00:09:06,190 --> 00:09:13,560
beings okay so we can extract software

00:09:09,550 --> 00:09:16,300
software and make the connection between

00:09:13,560 --> 00:09:18,970
programmers and clients just tell them

00:09:16,300 --> 00:09:22,180
what the hell is going on in that piece

00:09:18,970 --> 00:09:26,830
of code so I don't know if you're

00:09:22,180 --> 00:09:30,640
familiar with Coco it's a monkey in

00:09:26,830 --> 00:09:35,589
gorilla my precisely it's a special

00:09:30,640 --> 00:09:39,339
gorilla in a special way because he

00:09:35,589 --> 00:09:43,240
knows sign language so the first gorilla

00:09:39,339 --> 00:09:46,660
to know sign language and it was he was

00:09:43,240 --> 00:09:49,990
in she was instructed by dr. patty

00:09:46,660 --> 00:09:52,900
Peterson it was a project from the 90s

00:09:49,990 --> 00:09:56,710
90s maybe or something like that when

00:09:52,900 --> 00:10:00,900
she just started teaching a gorilla to

00:09:56,710 --> 00:10:04,440
talk to human beings by sign language so

00:10:00,900 --> 00:10:07,480
this is the interesting fact because we

00:10:04,440 --> 00:10:11,110
gave someone the ability to interact

00:10:07,480 --> 00:10:13,510
with us okay so we had a common language

00:10:11,110 --> 00:10:16,060
to interact with another specie okay

00:10:13,510 --> 00:10:18,160
like animals that is the first boundary

00:10:16,060 --> 00:10:21,250
between humans that can interact this

00:10:18,160 --> 00:10:23,500
with someone besides machines okay at

00:10:21,250 --> 00:10:26,529
the in the moment we can interact with

00:10:23,500 --> 00:10:27,970
machines like in AI voice or VR we can

00:10:26,529 --> 00:10:29,920
just interact with machines and they

00:10:27,970 --> 00:10:33,010
understand us and they make decisions

00:10:29,920 --> 00:10:37,089
based on our our request the same thing

00:10:33,010 --> 00:10:39,459
with the gorilla she was able to tell

00:10:37,089 --> 00:10:41,860
people that she wants to raise a child

00:10:39,459 --> 00:10:44,529
so they gave a cat and she started

00:10:41,860 --> 00:10:48,850
raising the cat and started to share the

00:10:44,529 --> 00:10:54,490
feelings with humans so that was like a

00:10:48,850 --> 00:10:57,100
big window in life of other species and

00:10:54,490 --> 00:11:00,600
this was made possible by an abstract

00:10:57,100 --> 00:11:03,400
language that was a sign language so

00:11:00,600 --> 00:11:06,040
what I want to say with this is that at

00:11:03,400 --> 00:11:08,800
the moment we have JavaScript that can

00:11:06,040 --> 00:11:11,290
run everywhere I think as chosen a

00:11:08,800 --> 00:11:15,120
little bit right colors sorry for that

00:11:11,290 --> 00:11:17,980
so you're like this big overlap on the

00:11:15,120 --> 00:11:19,330
systems so you have like JavaScript

00:11:17,980 --> 00:11:22,330
running and everywhere so this is our

00:11:19,330 --> 00:11:28,030
common language at the moment on I think

00:11:22,330 --> 00:11:31,030
it's pretty good because we can we have

00:11:28,030 --> 00:11:33,580
the PDF let's Paul said using javascript

00:11:31,030 --> 00:11:36,580
so we can like build whole ecosystems

00:11:33,580 --> 00:11:38,500
using one single language one single

00:11:36,580 --> 00:11:41,260
maybe with a little bit different in a

00:11:38,500 --> 00:11:43,300
team construction and we can build

00:11:41,260 --> 00:11:46,060
amazing teams so we can build whole

00:11:43,300 --> 00:11:48,940
platforms that are run from from mobile

00:11:46,060 --> 00:11:53,980
to to just the hardware itself like

00:11:48,940 --> 00:11:58,600
Raspberry Pi so for example we could

00:11:53,980 --> 00:12:02,410
just use this piece of code in any

00:11:58,600 --> 00:12:06,160
module okay so we could use like boot

00:12:02,410 --> 00:12:07,480
your application on each of these sorry

00:12:06,160 --> 00:12:12,180
Coco oops

00:12:07,480 --> 00:12:16,810
each of these uh environment okay

00:12:12,180 --> 00:12:18,730
because the code is really abstracted we

00:12:16,810 --> 00:12:21,250
have like a logger we have app run we

00:12:18,730 --> 00:12:24,280
have a core of our application and we

00:12:21,250 --> 00:12:26,140
just ran a boot function for our app so

00:12:24,280 --> 00:12:28,210
basically we were doing like getting the

00:12:26,140 --> 00:12:29,860
environment loading the configuration

00:12:28,210 --> 00:12:32,340
loading the transports for our logging

00:12:29,860 --> 00:12:34,540
system okay

00:12:32,340 --> 00:12:35,710
creating the new logger instance is

00:12:34,540 --> 00:12:37,390
creating the core instances just

00:12:35,710 --> 00:12:39,400
initializing up the application and

00:12:37,390 --> 00:12:41,950
finally we can just boot everything and

00:12:39,400 --> 00:12:45,520
our app will just run smoothly okay

00:12:41,950 --> 00:12:51,010
without knowing where am I at the moment

00:12:45,520 --> 00:12:53,650
okay so I can be on any platform another

00:12:51,010 --> 00:12:57,070
story here is like the introduction of

00:12:53,650 --> 00:13:02,080
wolves I know if you're familiar with

00:12:57,070 --> 00:13:04,300
the story of yellow lake in him okay so

00:13:02,080 --> 00:13:07,690
there I aside I remember correctly they

00:13:04,300 --> 00:13:10,540
were like 414 wolves yeah introduced in

00:13:07,690 --> 00:13:13,030
the park so they were extinct for a

00:13:10,540 --> 00:13:16,060
pretty large amount of time and the park

00:13:13,030 --> 00:13:20,710
rangers had decided to introduce the

00:13:16,060 --> 00:13:23,530
wolf to the park we know that from our

00:13:20,710 --> 00:13:25,000
experience wolves are like bad creatures

00:13:23,530 --> 00:13:26,740
they

00:13:25,000 --> 00:13:29,519
they're carnivores they eat up other

00:13:26,740 --> 00:13:34,240
animals and they destroy the environment

00:13:29,519 --> 00:13:36,850
the interesting fact was that it has a

00:13:34,240 --> 00:13:41,189
it had a different effect on the

00:13:36,850 --> 00:13:44,290
ecosystem so instead of destroying it

00:13:41,189 --> 00:13:47,160
the ecosystems started modifying itself

00:13:44,290 --> 00:13:50,589
okay so is this health had a part but

00:13:47,160 --> 00:13:53,860
the rules started treating to eat other

00:13:50,589 --> 00:13:56,290
animals that's not this man that other

00:13:53,860 --> 00:13:58,480
animals could just join the part because

00:13:56,290 --> 00:14:02,589
they are not endangered by other

00:13:58,480 --> 00:14:03,819
predators that meant that rodents could

00:14:02,589 --> 00:14:06,970
have come to work and they had just

00:14:03,819 --> 00:14:09,009
distributed trees they beaver

00:14:06,970 --> 00:14:11,500
started to coming inside those Park and

00:14:09,009 --> 00:14:13,720
just building dance and in a few years

00:14:11,500 --> 00:14:16,209
the whole structure and an ecosystem of

00:14:13,720 --> 00:14:18,850
the park just went to a new modification

00:14:16,209 --> 00:14:22,029
and the river then just made it was

00:14:18,850 --> 00:14:24,639
smaller and new type of animals were

00:14:22,029 --> 00:14:30,069
introduced in the park naturally my

00:14:24,639 --> 00:14:32,470
migration so if we correct with this

00:14:30,069 --> 00:14:35,139
events from nature nature in our

00:14:32,470 --> 00:14:38,290
ecosystem of programming we can see a

00:14:35,139 --> 00:14:40,029
clear timeline of the introduction of

00:14:38,290 --> 00:14:41,680
wolves so for example the first

00:14:40,029 --> 00:14:45,279
interaction of wolves in our ecosystem

00:14:41,680 --> 00:14:49,240
was the jQuery framework that was pretty

00:14:45,279 --> 00:14:52,300
dominant in our in our ecosystem and it

00:14:49,240 --> 00:14:57,509
made possible for changes and new ways

00:14:52,300 --> 00:14:57,509
of producing technology and software but

00:14:57,689 --> 00:15:06,819
another wolf that was introduced in our

00:15:00,339 --> 00:15:08,879
ecosystem was no jazz okay so when it

00:15:06,819 --> 00:15:11,980
was the rechannel they started to just

00:15:08,879 --> 00:15:14,589
pour in that note the jaw stick will be

00:15:11,980 --> 00:15:18,430
available on the server side it was like

00:15:14,589 --> 00:15:19,930
yeah okay whatever but some guys were

00:15:18,430 --> 00:15:22,420
like oh my god this is amazing

00:15:19,930 --> 00:15:25,329
so we have like a language that runs on

00:15:22,420 --> 00:15:27,670
the client in browser it's pretty decent

00:15:25,329 --> 00:15:32,050
and you can do this and stuff with it

00:15:27,670 --> 00:15:34,689
and we can run it on the server an end

00:15:32,050 --> 00:15:38,470
moment I put away everything so I put

00:15:34,689 --> 00:15:38,680
away PHP I haven't wrote a little single

00:15:38,470 --> 00:15:42,370
line

00:15:38,680 --> 00:15:44,850
skilled in Java so I went just fool

00:15:42,370 --> 00:15:49,810
JavaScript so I started writing

00:15:44,850 --> 00:15:52,300
applications in node.js hanging an item

00:15:49,810 --> 00:15:55,149
your channels with the guys developing a

00:15:52,300 --> 00:15:58,750
flatiron it's a very very old framework

00:15:55,149 --> 00:16:01,000
it's not maintained anymore and if you

00:15:58,750 --> 00:16:03,100
imagine it was like back like few years

00:16:01,000 --> 00:16:04,990
ago like six years ago maybe about any

00:16:03,100 --> 00:16:10,089
moment no josh is one of the most

00:16:04,990 --> 00:16:13,690
popular frameworks in the ecosystem of

00:16:10,089 --> 00:16:16,600
programming languages and it's I think

00:16:13,690 --> 00:16:21,220
it's JavaScript has the most code base

00:16:16,600 --> 00:16:23,410
on github so it's pretty amazing thing

00:16:21,220 --> 00:16:25,870
that we can run JavaScript on note on

00:16:23,410 --> 00:16:28,149
the server side and create like

00:16:25,870 --> 00:16:31,570
enterprise applications Walmart is using

00:16:28,149 --> 00:16:35,230
javascript conde nast it's using

00:16:31,570 --> 00:16:37,510
javascript and large company are using

00:16:35,230 --> 00:16:39,100
javascript and they are like investing

00:16:37,510 --> 00:16:42,220
in Jaws if Microsoft is investing

00:16:39,100 --> 00:16:44,350
heavily in JavaScript and node.js so

00:16:42,220 --> 00:16:50,050
this means that we can have some code

00:16:44,350 --> 00:16:53,950
like this run on server so we can

00:16:50,050 --> 00:16:57,790
include libraries we can define classes

00:16:53,950 --> 00:17:00,180
thanks to the new es syntax so pretty

00:16:57,790 --> 00:17:03,250
much we're going to the enterprise ish

00:17:00,180 --> 00:17:04,929
syntax of a language okay so what we

00:17:03,250 --> 00:17:07,360
still have the key benefits of

00:17:04,929 --> 00:17:11,160
prototypal languages that we are used in

00:17:07,360 --> 00:17:15,339
javascript and we can do amazing

00:17:11,160 --> 00:17:18,189
applications because we only have like a

00:17:15,339 --> 00:17:20,620
huge community we have great packages

00:17:18,189 --> 00:17:22,929
great frameworks like Express that is

00:17:20,620 --> 00:17:29,740
pretty stable it has its hiccups but

00:17:22,929 --> 00:17:33,400
it's pretty stable so for example we

00:17:29,740 --> 00:17:35,530
have like a simple application that will

00:17:33,400 --> 00:17:37,570
just manage two doors so I have a mobile

00:17:35,530 --> 00:17:42,190
application that will just unlock doors

00:17:37,570 --> 00:17:45,130
I could just write it in Java scripts

00:17:42,190 --> 00:17:48,580
and the best part in universal apps is

00:17:45,130 --> 00:17:52,809
that this Rho code can run on any device

00:17:48,580 --> 00:17:56,440
so I can review this module

00:17:52,809 --> 00:17:58,390
the door service to be ran on on each

00:17:56,440 --> 00:18:02,710
device the same code base included

00:17:58,390 --> 00:18:07,000
inside the the projects for each module

00:18:02,710 --> 00:18:12,090
and I can just define abstract methods

00:18:07,000 --> 00:18:14,830
that execute function based on other

00:18:12,090 --> 00:18:18,610
classes methods so for example this

00:18:14,830 --> 00:18:20,410
unlock method from the door service from

00:18:18,610 --> 00:18:24,670
the services of abstract class from

00:18:20,410 --> 00:18:28,690
application that includes some door

00:18:24,670 --> 00:18:31,179
gateway so I'm doing a pretty basic

00:18:28,690 --> 00:18:32,860
injection of dependency here so I'm

00:18:31,179 --> 00:18:35,620
doing this door date gateway call

00:18:32,860 --> 00:18:37,480
gateway and if not then I'm going to

00:18:35,620 --> 00:18:43,210
just make a new instance of that gateway

00:18:37,480 --> 00:18:45,880
and I can call the door gateway without

00:18:43,210 --> 00:18:48,010
knowing what is included inside it ok so

00:18:45,880 --> 00:18:50,500
it can be on a Raspberry Pi so the door

00:18:48,010 --> 00:18:53,350
gateway will call on bash function that

00:18:50,500 --> 00:18:56,230
will just open the door or it can be on

00:18:53,350 --> 00:18:59,620
a mobile device which I tap the bottom

00:18:56,230 --> 00:19:03,610
and the door gateway will call the API

00:18:59,620 --> 00:19:05,050
gateway and just tell the server to just

00:19:03,610 --> 00:19:06,880
open the door and the server we just

00:19:05,050 --> 00:19:09,370
propagate the call to the mobile device

00:19:06,880 --> 00:19:12,730
so we can have like this vicious circle

00:19:09,370 --> 00:19:14,980
that it's abstract advice Ingle function

00:19:12,730 --> 00:19:18,360
that has all the validation and held all

00:19:14,980 --> 00:19:24,130
the functionalities for doing this

00:19:18,360 --> 00:19:26,830
business logic as you can see I'm using

00:19:24,130 --> 00:19:30,400
callbacks so I've just walk up here and

00:19:26,830 --> 00:19:33,910
be like presidency cells to say may call

00:19:30,400 --> 00:19:39,040
back straight again so I know there were

00:19:33,910 --> 00:19:42,090
lots of talks about promises and weight

00:19:39,040 --> 00:19:46,960
functions but I'm pretty old-school so

00:19:42,090 --> 00:19:51,809
this is my campaign you can donate money

00:19:46,960 --> 00:19:51,809
for it by buying my book to just King

00:19:52,890 --> 00:20:00,100
it's so I made a an upgraded version of

00:19:58,270 --> 00:20:02,580
this function so I didn't remove the

00:20:00,100 --> 00:20:05,530
callbacks you're there don't worry I

00:20:02,580 --> 00:20:08,470
like these abstractions

00:20:05,530 --> 00:20:11,050
brought it from Django so basically

00:20:08,470 --> 00:20:13,030
you're doing like policies d'Oro not

00:20:11,050 --> 00:20:15,610
policy validate door so I validate the

00:20:13,030 --> 00:20:18,730
door before unlocking it so this can be

00:20:15,610 --> 00:20:23,140
run on mobile devices and say that

00:20:18,730 --> 00:20:26,430
there's no current user logged in so I

00:20:23,140 --> 00:20:30,010
must I can validate door before it and

00:20:26,430 --> 00:20:37,780
on the policy we have like this errors

00:20:30,010 --> 00:20:41,080
so before and I had this excel on

00:20:37,780 --> 00:20:43,630
processable response but doesn't make

00:20:41,080 --> 00:20:45,880
much sense to me because I don't know if

00:20:43,630 --> 00:20:49,000
that's an HTTP an error then that the

00:20:45,880 --> 00:20:53,080
system error of or an error from from

00:20:49,000 --> 00:20:55,420
the database so but a better way is to

00:20:53,080 --> 00:20:57,280
be is to just abstract the errors and

00:20:55,420 --> 00:21:03,190
just propagate it to a globe or air

00:20:57,280 --> 00:21:07,600
handler and and it will take effect

00:21:03,190 --> 00:21:10,030
there so for example this could be a

00:21:07,600 --> 00:21:12,310
service provider for our my mobile app

00:21:10,030 --> 00:21:14,380
so as you can see we have like required

00:21:12,310 --> 00:21:16,180
function here the door service and I'm

00:21:14,380 --> 00:21:20,140
requiring a door gateway from the mobile

00:21:16,180 --> 00:21:21,820
door project and just the rest of the

00:21:20,140 --> 00:21:25,180
project I will use this provider for

00:21:21,820 --> 00:21:30,100
that service that's basically calling

00:21:25,180 --> 00:21:34,000
the door API gateway the server API that

00:21:30,100 --> 00:21:36,520
could be a REST API so as you can see no

00:21:34,000 --> 00:21:39,700
J's included another type of wolf that

00:21:36,520 --> 00:21:43,780
was NPM that made as possible to install

00:21:39,700 --> 00:21:45,730
packages so we came like this packages

00:21:43,780 --> 00:21:47,590
from public repositories we can have

00:21:45,730 --> 00:21:50,650
back edges from our own github

00:21:47,590 --> 00:21:52,960
repositories we can have packages from

00:21:50,650 --> 00:21:56,920
our local files and we can have packages

00:21:52,960 --> 00:21:59,110
from from bundle dependencies okay so

00:21:56,920 --> 00:21:59,440
those are dependencies that are checked

00:21:59,110 --> 00:22:01,750
in

00:21:59,440 --> 00:22:05,110
inside node modules in versioning system

00:22:01,750 --> 00:22:09,150
and are not installed on again on the

00:22:05,110 --> 00:22:12,520
device this makes possible deploying

00:22:09,150 --> 00:22:14,500
projects on Internet of Things device is

00:22:12,520 --> 00:22:16,720
pretty famously because I can just test

00:22:14,500 --> 00:22:18,890
out on a local development device and

00:22:16,720 --> 00:22:23,480
just propagate all the code

00:22:18,890 --> 00:22:25,400
angles to that device other wolf that

00:22:23,480 --> 00:22:28,760
was introduced it was like react and

00:22:25,400 --> 00:22:31,400
react was a game changer for us I was

00:22:28,760 --> 00:22:33,890
doing a lot of angular code but lately I

00:22:31,400 --> 00:22:36,620
was just convinced by react the best to

00:22:33,890 --> 00:22:38,420
of abstractions for UI and if you can do

00:22:36,620 --> 00:22:41,570
amazing things with it it's the same

00:22:38,420 --> 00:22:47,360
principle applied as in no jazz so I had

00:22:41,570 --> 00:22:49,670
like the same ecosystem that no just

00:22:47,360 --> 00:22:51,950
brought us create is doing in the same

00:22:49,670 --> 00:22:54,260
way so he had like react native already

00:22:51,950 --> 00:22:57,710
they can I can write almost the same

00:22:54,260 --> 00:23:04,550
applications in in mobile devices using

00:22:57,710 --> 00:23:06,410
react and the best approach is to just

00:23:04,550 --> 00:23:08,090
make an abstractions for those

00:23:06,410 --> 00:23:09,950
applications so for example you can have

00:23:08,090 --> 00:23:11,990
higher-order components that are doing

00:23:09,950 --> 00:23:15,710
all the wiring of business logic and

00:23:11,990 --> 00:23:19,490
data and from there on you're using just

00:23:15,710 --> 00:23:22,700
simple methods to just get the data do

00:23:19,490 --> 00:23:26,960
some actions and just render the

00:23:22,700 --> 00:23:29,180
component itself as you can see I didn't

00:23:26,960 --> 00:23:31,940
implement the door details I just spoke

00:23:29,180 --> 00:23:33,560
abstract about it but everybody could

00:23:31,940 --> 00:23:37,060
understand what I'm talking about

00:23:33,560 --> 00:23:39,440
because the simplicity of the component

00:23:37,060 --> 00:23:44,690
idea so this concept of creating

00:23:39,440 --> 00:23:46,550
components as you can see there is no

00:23:44,690 --> 00:23:48,380
Redux at the moment so probably the

00:23:46,550 --> 00:23:50,330
application will run fine without Redux

00:23:48,380 --> 00:23:56,120
we had a great conversation about this I

00:23:50,330 --> 00:23:59,510
think last night but we just give us

00:23:56,120 --> 00:24:03,950
gives us a good abstraction over actions

00:23:59,510 --> 00:24:05,870
and pretty much gives the tooling for

00:24:03,950 --> 00:24:08,000
newcomers in a project to understand how

00:24:05,870 --> 00:24:11,150
things are done and how actions are

00:24:08,000 --> 00:24:14,660
taken when when hitting a different

00:24:11,150 --> 00:24:16,730
buttons so we could just seamlessly add

00:24:14,660 --> 00:24:18,920
Redux to our application we just import

00:24:16,730 --> 00:24:21,650
like the stores like actions and

00:24:18,920 --> 00:24:24,460
selectors and we can use does connect to

00:24:21,650 --> 00:24:27,490
just connect those map producers and

00:24:24,460 --> 00:24:31,450
state property dispatcher sorry and

00:24:27,490 --> 00:24:31,450
props to our state

00:24:32,530 --> 00:24:37,990
and if you're not familiar I mean if you

00:24:36,010 --> 00:24:40,060
are doing a lot of hard coding in redux

00:24:37,990 --> 00:24:41,410
and doing lots of boilerplate code you

00:24:40,060 --> 00:24:44,020
can just extract Redux

00:24:41,410 --> 00:24:47,830
and using the helper function and just

00:24:44,020 --> 00:24:49,390
create actions and selectors seamlessly

00:24:47,830 --> 00:24:52,720
so just basically have like the

00:24:49,390 --> 00:24:55,500
namespace the property of that namespace

00:24:52,720 --> 00:25:00,120
and the action to be done on its going

00:24:55,500 --> 00:25:04,600
so we abstracted Redux in another way

00:25:00,120 --> 00:25:12,220
anything else yeah so a good thing is

00:25:04,600 --> 00:25:14,110
typescript that patch keeps really

00:25:12,220 --> 00:25:17,380
interesting because it gives you a lot

00:25:14,110 --> 00:25:20,440
of abstraction clear code so you can run

00:25:17,380 --> 00:25:22,660
multiple different types of instances

00:25:20,440 --> 00:25:26,850
where you're your toes for example you

00:25:22,660 --> 00:25:29,950
can just export it with 2015 or 2016 or

00:25:26,850 --> 00:25:33,760
even support very old type of JavaScript

00:25:29,950 --> 00:25:36,010
so yes free or maybe so you just define

00:25:33,760 --> 00:25:38,320
the property to export it and the code

00:25:36,010 --> 00:25:42,760
base from new version of Jaws kit will

00:25:38,320 --> 00:25:45,100
be exported in in JavaScript so pretty

00:25:42,760 --> 00:25:47,640
much that's it thank you very much so

00:25:45,100 --> 00:25:47,640
listening to me

00:25:52,880 --> 00:25:58,470
so cash questions can you give us an

00:25:56,370 --> 00:26:00,900
example I used rocket - any other things

00:25:58,470 --> 00:26:05,130
I could but I won't

00:26:00,900 --> 00:26:07,820
I will just tell you about it we're

00:26:05,130 --> 00:26:10,410
doing an interesting project

00:26:07,820 --> 00:26:12,900
so we're controlling some

00:26:10,410 --> 00:26:15,660
functionalities with Raspberry Pi

00:26:12,900 --> 00:26:18,510
we have like mobile application we have

00:26:15,660 --> 00:26:21,600
the server and there are like hard

00:26:18,510 --> 00:26:24,240
radiant's inside machines that we can

00:26:21,600 --> 00:26:29,280
just unlock closed doors verify the

00:26:24,240 --> 00:26:31,320
state of the machine and see where is

00:26:29,280 --> 00:26:34,290
the location of the machine who is

00:26:31,320 --> 00:26:35,760
operating it and stuff like that so

00:26:34,290 --> 00:26:42,480
basically we have a combination of

00:26:35,760 --> 00:26:44,850
node.js and c c c++ libraries - scripts

00:26:42,480 --> 00:26:47,220
and many accident that you can use on

00:26:44,850 --> 00:26:51,510
unix systems using raspberry pi for that

00:26:47,220 --> 00:26:52,950
as our hardware to go what about servers

00:26:51,510 --> 00:26:53,880
that require most shredding and

00:26:52,950 --> 00:26:58,260
concurrency control

00:26:53,880 --> 00:27:00,810
oh that's very strange thing so I think

00:26:58,260 --> 00:27:03,720
when you're doing JavaScript event you

00:27:00,810 --> 00:27:09,690
need to just have a state of different

00:27:03,720 --> 00:27:13,230
state of mind because you won't be doing

00:27:09,690 --> 00:27:15,090
multi-threading you what you want to do

00:27:13,230 --> 00:27:16,710
is just have worker processes that you

00:27:15,090 --> 00:27:19,380
just span up when you need things done

00:27:16,710 --> 00:27:22,290
and just close them when you don't need

00:27:19,380 --> 00:27:24,480
them because it's really hard to just

00:27:22,290 --> 00:27:27,090
manage a multi-threaded application in

00:27:24,480 --> 00:27:29,840
in JavaScript it's possible but I don't

00:27:27,090 --> 00:27:32,820
think it you want to do that because

00:27:29,840 --> 00:27:35,850
there are other languages that do it

00:27:32,820 --> 00:27:37,950
more properly and and better and

00:27:35,850 --> 00:27:43,470
concurrency control I don't know if

00:27:37,950 --> 00:27:45,240
you're meaning about locks and stuff

00:27:43,470 --> 00:27:47,490
like that it depends on your

00:27:45,240 --> 00:27:52,230
architecture and depends on what

00:27:47,490 --> 00:27:55,320
database are using and you can just chat

00:27:52,230 --> 00:27:57,180
with me in the breaks you know just

00:27:55,320 --> 00:28:00,630
secure enough to make and maintain big

00:27:57,180 --> 00:28:03,120
and complex apps yeah I think so and

00:28:00,630 --> 00:28:06,090
later on we'll have like as a great book

00:28:03,120 --> 00:28:10,590
about that securing a node applications

00:28:06,090 --> 00:28:13,230
and I were using it's like for like for

00:28:10,590 --> 00:28:14,820
four or five years we have applications

00:28:13,230 --> 00:28:15,360
in production for the same amount of

00:28:14,820 --> 00:28:20,070
time

00:28:15,360 --> 00:28:22,920
I think it's secure and enough the way

00:28:20,070 --> 00:28:25,290
it is one security approach that we

00:28:22,920 --> 00:28:27,930
always brought was using nginx in front

00:28:25,290 --> 00:28:32,160
of our nose applications so engineer was

00:28:27,930 --> 00:28:34,680
always the first line of frontier that

00:28:32,160 --> 00:28:38,340
was amazing because we had faster secure

00:28:34,680 --> 00:28:40,440
patches for nginx so there was like a

00:28:38,340 --> 00:28:42,180
DDoS attack with no judge that can be

00:28:40,440 --> 00:28:44,640
brought only using node.js server it

00:28:42,180 --> 00:28:47,220
without nginx but if you are using nginx

00:28:44,640 --> 00:28:48,030
on the node official site Azure like

00:28:47,220 --> 00:28:51,000
you're good to go

00:28:48,030 --> 00:28:52,710
so that was a good approach for us it

00:28:51,000 --> 00:28:55,980
works pretty well it's working very well

00:28:52,710 --> 00:28:59,930
for the moment mean investment

00:28:55,980 --> 00:29:02,520
well my up my opinion will be that

00:28:59,930 --> 00:29:07,470
currently I'm transitioning from me so

00:29:02,520 --> 00:29:09,630
I'm not using angular anymore but it

00:29:07,470 --> 00:29:12,410
doesn't make sense for at any tea every

00:29:09,630 --> 00:29:15,720
team for example you can have like solid

00:29:12,410 --> 00:29:18,780
themes that are not so familiar with

00:29:15,720 --> 00:29:20,910
JavaScript and they still can make

00:29:18,780 --> 00:29:25,190
applicate great applications using the

00:29:20,910 --> 00:29:27,510
mean stack sorry dotnet people or Java

00:29:25,190 --> 00:29:29,640
but it's pretty pretty awesome for the

00:29:27,510 --> 00:29:31,530
MN and I think it's a solid construction

00:29:29,640 --> 00:29:33,930
and give you a great structure when

00:29:31,530 --> 00:29:37,740
you're doing applications with the mean

00:29:33,930 --> 00:29:40,320
stack the reacts approach is a little

00:29:37,740 --> 00:29:42,540
bit different and it's a little bit more

00:29:40,320 --> 00:29:44,760
complex so I haven't no Redux so I need

00:29:42,540 --> 00:29:49,080
need Redux do I need three free particle

00:29:44,760 --> 00:29:51,690
flux or nuclear chess so it's a more

00:29:49,080 --> 00:29:59,520
hard wiring and decision making than the

00:29:51,690 --> 00:30:03,090
mean stack oh yeah I think so because it

00:29:59,520 --> 00:30:06,330
gives us or maybe it would be merged in

00:30:03,090 --> 00:30:08,670
in JavaScript because it gives us more

00:30:06,330 --> 00:30:13,560
performance than the JavaScript itself

00:30:08,670 --> 00:30:16,170
so I think definitely will be a game

00:30:13,560 --> 00:30:17,910
changer I mean we always can see some

00:30:16,170 --> 00:30:19,500
pre interesting project done by Google

00:30:17,910 --> 00:30:22,680
they have

00:30:19,500 --> 00:30:27,180
sedation tool that you transfer data not

00:30:22,680 --> 00:30:29,370
in JSON but in a different format and it

00:30:27,180 --> 00:30:31,620
has better performance than using the

00:30:29,370 --> 00:30:35,250
native JSON format from JavaScript

00:30:31,620 --> 00:30:41,250
I do J server app scale at to a large

00:30:35,250 --> 00:30:44,780
amount of requests yeah so we did a

00:30:41,250 --> 00:30:48,120
couple of years ago a test with poll and

00:30:44,780 --> 00:30:54,880
there's so many articles that JavaScript

00:30:48,120 --> 00:30:56,030
supports like 300 know 3,000 or 30,000

00:30:54,880 --> 00:30:58,890
[Music]

00:30:56,030 --> 00:31:02,160
100k amounts of requests at second and

00:30:58,890 --> 00:31:04,110
stuff like that but when we start a job

00:31:02,160 --> 00:31:07,050
we can just build up the default server

00:31:04,110 --> 00:31:09,840
we always couldn't get Best Buy 300

00:31:07,050 --> 00:31:13,610
requests per second for Joseph 3000

00:31:09,840 --> 00:31:17,190
recod sorry 3,000 requests thank you and

00:31:13,610 --> 00:31:18,960
that was an interesting fact because we

00:31:17,190 --> 00:31:21,360
stripped down we just use just the bare

00:31:18,960 --> 00:31:24,450
bones jaws node modules still the same

00:31:21,360 --> 00:31:28,290
effect maybe like a few hundred requests

00:31:24,450 --> 00:31:30,630
per second in plus so don't believe

00:31:28,290 --> 00:31:32,610
those numbers on the sites you can

00:31:30,630 --> 00:31:34,200
achieve that each you're lying in multi

00:31:32,610 --> 00:31:35,880
tread the same instance of the

00:31:34,200 --> 00:31:38,100
application in multi-threading you're

00:31:35,880 --> 00:31:40,980
doing some weight distribution of the

00:31:38,100 --> 00:31:44,880
request but it's doable so the most we

00:31:40,980 --> 00:31:48,179
got was 30 27 thousand requests maybe

00:31:44,880 --> 00:31:50,250
something like that but it was a server

00:31:48,179 --> 00:31:52,740
with 8 cores and running eight instances

00:31:50,250 --> 00:31:54,840
of joe liske it then four instances were

00:31:52,740 --> 00:31:58,200
just loading the the requests between

00:31:54,840 --> 00:32:01,950
the each instance of JavaScript but

00:31:58,200 --> 00:32:06,480
still it was a $40 server so I think

00:32:01,950 --> 00:32:08,700
it's a good approach we recommend the

00:32:06,480 --> 00:32:12,360
full stack approach 2000 people

00:32:08,700 --> 00:32:15,420
definitely not so there are a lot of

00:32:12,360 --> 00:32:17,420
things to just guess in a in a short

00:32:15,420 --> 00:32:20,610
amount of time so you have like

00:32:17,420 --> 00:32:23,490
server-side information you have like

00:32:20,610 --> 00:32:26,850
the front end echo system to react and I

00:32:23,490 --> 00:32:27,990
think the best approach is to just pick

00:32:26,850 --> 00:32:30,240
one from the list

00:32:27,990 --> 00:32:31,620
and to just have a vision of how I'm

00:32:30,240 --> 00:32:32,990
going to transition to do meaningful

00:32:31,620 --> 00:32:36,590
spectacle

00:32:32,990 --> 00:32:40,620
so maybe you can just start with I think

00:32:36,590 --> 00:32:44,820
Benedict told us yesterday the CLI

00:32:40,620 --> 00:32:46,260
approach of doing tutorials and I think

00:32:44,820 --> 00:32:49,920
is the best approach because you can

00:32:46,260 --> 00:32:51,750
just learn about how to use the command

00:32:49,920 --> 00:32:53,310
line how to use the application the

00:32:51,750 --> 00:32:56,010
serve and just build some pretty nice

00:32:53,310 --> 00:32:58,230
applications the people thing no jet is

00:32:56,010 --> 00:33:04,260
me forget about our Deathwing runs a

00:32:58,230 --> 00:33:05,790
node huh interesting question I think so

00:33:04,260 --> 00:33:09,360
that a lot of people think that need

00:33:05,790 --> 00:33:12,630
node.js and Greg ray dotnet in Java and

00:33:09,360 --> 00:33:14,940
maybe PHP as you can see PHP has less

00:33:12,630 --> 00:33:16,620
abstractions Facebook slack is using PHP

00:33:14,940 --> 00:33:19,880
and they're doing like amazing stuff

00:33:16,620 --> 00:33:24,770
with it but other hand we have like

00:33:19,880 --> 00:33:28,680
hidden parts of people using node.js and

00:33:24,770 --> 00:33:33,510
they fall probably Facebook is using a

00:33:28,680 --> 00:33:36,360
lot of node.js and I think they if they

00:33:33,510 --> 00:33:38,250
have like this understanding of how to

00:33:36,360 --> 00:33:41,000
use the proper tooling and the

00:33:38,250 --> 00:33:44,640
application I don't know why we cannot

00:33:41,000 --> 00:33:47,220
see no jazz or jaws it as the strongest

00:33:44,640 --> 00:33:50,160
language at the moment I mean not from a

00:33:47,220 --> 00:33:52,490
technical perspective but from community

00:33:50,160 --> 00:33:55,380
and and tooling

00:33:52,490 --> 00:34:03,990
how would you avoid the spaghetti code

00:33:55,380 --> 00:34:06,960
oh it went it went away okay its back

00:34:03,990 --> 00:34:09,960
don't worry we got the situation I don't

00:34:06,960 --> 00:34:11,730
know what its back but we just it's okay

00:34:09,960 --> 00:34:17,820
avoid spaghetti code that can appear

00:34:11,730 --> 00:34:19,530
from freedom of note well yeah so the

00:34:17,820 --> 00:34:22,950
one approach we took when we we had like

00:34:19,530 --> 00:34:27,770
the callback hell problem is to abstract

00:34:22,950 --> 00:34:30,060
and just break down our code in no Jess

00:34:27,770 --> 00:34:32,100
there are a lot of information about

00:34:30,060 --> 00:34:33,780
promises that but promises didn't

00:34:32,100 --> 00:34:36,570
resolve the spaghetti code problem I

00:34:33,780 --> 00:34:40,650
think the spaghetti code problem comes

00:34:36,570 --> 00:34:44,430
from a pure decision-making of the

00:34:40,650 --> 00:34:46,409
software developer that is trying to do

00:34:44,430 --> 00:34:49,530
so many things in one

00:34:46,409 --> 00:34:51,690
method or one function and you should

00:34:49,530 --> 00:34:54,240
just split it up and think of very

00:34:51,690 --> 00:34:56,849
module and don't worry if your code is

00:34:54,240 --> 00:35:00,539
and manic and doesn't do any much stuff

00:34:56,849 --> 00:35:02,910
but at least it's just broken and just

00:35:00,539 --> 00:35:05,210
you can use composition so react the

00:35:02,910 --> 00:35:09,359
strongest part is using composition over

00:35:05,210 --> 00:35:11,369
extent extending classes and it cross

00:35:09,359 --> 00:35:18,030
platform framework recommendation yes

00:35:11,369 --> 00:35:22,950
JavaScript or no Jess joking yes I think

00:35:18,030 --> 00:35:25,020
as you can see from my talk I really

00:35:22,950 --> 00:35:29,730
keen on expressed because it gives us a

00:35:25,020 --> 00:35:35,549
lot of flexibility and it runs on on the

00:35:29,730 --> 00:35:38,910
server and on devices X react you saw

00:35:35,549 --> 00:35:41,670
great talk about next jet and that runs

00:35:38,910 --> 00:35:45,299
on the server and the client seemingly

00:35:41,670 --> 00:35:47,250
so I think we already have like great

00:35:45,299 --> 00:35:53,390
tools and great frameworks to just run

00:35:47,250 --> 00:35:55,859
across platforms yeah

00:35:53,390 --> 00:35:57,869
electrons are pretty amazing too also as

00:35:55,859 --> 00:36:01,109
you can see probably a lot of you are

00:35:57,869 --> 00:36:05,279
using atom as your ID for daily day

00:36:01,109 --> 00:36:10,380
basis coding and atom is done in I think

00:36:05,279 --> 00:36:13,020
electronics I don't mistaken and I think

00:36:10,380 --> 00:36:17,400
slack Windows client is done an electron

00:36:13,020 --> 00:36:20,039
to and so we have like another wolf in

00:36:17,400 --> 00:36:22,230
the system that we can just do desktop

00:36:20,039 --> 00:36:25,650
applications that Microsoft's tried with

00:36:22,230 --> 00:36:29,520
his Universal windows apps written in

00:36:25,650 --> 00:36:31,109
HTML CSS and JavaScript session does

00:36:29,520 --> 00:36:37,529
angular dependence injecting is a good

00:36:31,109 --> 00:36:40,260
example inject by that I think the

00:36:37,529 --> 00:36:40,890
angular guys in version one were onto

00:36:40,260 --> 00:36:43,559
something

00:36:40,890 --> 00:36:46,740
but in version 2 they take it to a whole

00:36:43,559 --> 00:36:50,700
new level so my just scroll back to

00:36:46,740 --> 00:36:52,559
typescript and leave this on so I think

00:36:50,700 --> 00:36:54,480
angular 2 strongest

00:36:52,559 --> 00:36:56,970
point at the moment is that they're

00:36:54,480 --> 00:36:59,540
using typescript so by script enables

00:36:56,970 --> 00:37:01,829
them to do just amazing stuff you

00:36:59,540 --> 00:37:03,569
decorator's for example you have we have

00:37:01,829 --> 00:37:05,520
a simple class and just added the

00:37:03,569 --> 00:37:09,740
component decorator and you have a like

00:37:05,520 --> 00:37:12,690
a component I can react and we are using

00:37:09,740 --> 00:37:13,890
such syntax in our code to just generate

00:37:12,690 --> 00:37:18,240
some on-the-fly

00:37:13,890 --> 00:37:21,089
classes and modify our code base so for

00:37:18,240 --> 00:37:24,920
example I can take a five year old code

00:37:21,089 --> 00:37:31,099
and just operate it with a decorator and

00:37:24,920 --> 00:37:34,349
using typescript I can just create a

00:37:31,099 --> 00:37:37,170
running version on on the device and

00:37:34,349 --> 00:37:40,829
also on the server or maybe in the

00:37:37,170 --> 00:37:42,620
browser okay thank you very much

00:37:40,829 --> 00:37:49,320
hopefully I answered all your cashman

00:37:42,620 --> 00:37:49,320

YouTube URL: https://www.youtube.com/watch?v=i0wkGqm0Dy8


