Title: JSHeroes 2017 | Ovidiu CherecheÈ™ | UI Development Made Simple
Publication date: 2017-06-23
Playlist: JSHeroes 2017
Description: 
	Web developers either love or hate client-side JavaScript. 
The proliferation of frameworks is empowering for avid followers of the JavaScript ecosystem, but often terrifying for backend developers who want to catch up. 
Is it really easier to write JS in 2017 than in 2007? I believe so, but only if we stop to appreciate how much the size and complexity of web pages grew in the past decade. 
Let's explore how to use the React component model to create a simple development process and a scalable architecture for building modern web apps.
Captions: 
	00:00:11,900 --> 00:00:18,660
hello everyone welcome back I hope you

00:00:15,960 --> 00:00:20,970
great lunch but I also hope you didn't

00:00:18,660 --> 00:00:24,330
need too much because there's another

00:00:20,970 --> 00:00:25,740
course that you need to ingest and of

00:00:24,330 --> 00:00:29,670
course I'm not talking about food but

00:00:25,740 --> 00:00:32,009
rather this presentation which is a it's

00:00:29,670 --> 00:00:34,800
a bit abstract at least it starts though

00:00:32,009 --> 00:00:37,100
so I need you to to bear with me because

00:00:34,800 --> 00:00:42,180
it gets more interesting and practical

00:00:37,100 --> 00:00:44,430
towards the end so my name is a video

00:00:42,180 --> 00:00:48,929
but saying my name is not necessarily

00:00:44,430 --> 00:00:50,910
easy if you're not from around so I'm

00:00:48,929 --> 00:00:53,280
going to show you a quick story to help

00:00:50,910 --> 00:00:56,370
you remember it I had this client once

00:00:53,280 --> 00:00:58,859
who is building a video publishing

00:00:56,370 --> 00:01:01,920
platform and after trying to say my name

00:00:58,859 --> 00:01:03,600
three times and failing she said ok I

00:01:01,920 --> 00:01:07,050
got it now so your name is like the

00:01:03,600 --> 00:01:12,060
letter O and video so that's what that

00:01:07,050 --> 00:01:15,090
is and but by now you're probably

00:01:12,060 --> 00:01:18,270
wondering what's wrong with my side and

00:01:15,090 --> 00:01:21,570
the thing is I read this article a while

00:01:18,270 --> 00:01:25,409
ago we said that in order to do a great

00:01:21,570 --> 00:01:27,000
presentation you need to put you need to

00:01:25,409 --> 00:01:28,530
avoid putting a lot of text on your

00:01:27,000 --> 00:01:30,420
slides because then the audience will

00:01:28,530 --> 00:01:32,700
read the slides and not focus on you and

00:01:30,420 --> 00:01:35,520
because my brain works in black and

00:01:32,700 --> 00:01:37,320
white I said okay so I won't put any

00:01:35,520 --> 00:01:40,770
text on my slides and I'll do a good

00:01:37,320 --> 00:01:45,509
presentation so yeah you'll see a lot of

00:01:40,770 --> 00:01:48,060
emojis today so quickly intro on me I've

00:01:45,509 --> 00:01:52,439
been doing websites for the past 12

00:01:48,060 --> 00:01:57,600
years and then for the past five

00:01:52,439 --> 00:02:00,509
I focused extensively on building large

00:01:57,600 --> 00:02:04,380
scalable single page apps so that's what

00:02:00,509 --> 00:02:06,299
I occupied most of my time with and in

00:02:04,380 --> 00:02:08,970
working with a lot of companies and

00:02:06,299 --> 00:02:14,070
projects I stumbled into a recurring

00:02:08,970 --> 00:02:16,440
pattern a negative one that I think I

00:02:14,070 --> 00:02:21,330
have a solution to and that that is what

00:02:16,440 --> 00:02:24,450
I want to talk about today so before

00:02:21,330 --> 00:02:26,160
before getting into the meat of it I'd

00:02:24,450 --> 00:02:28,260
like to see a quick show of hands and

00:02:26,160 --> 00:02:29,550
I'm only going to ask for showing hands

00:02:28,260 --> 00:02:32,010
on so this is your own

00:02:29,550 --> 00:02:37,140
yes if there's anyone here who ever

00:02:32,010 --> 00:02:45,630
experienced technical debt yeah that's

00:02:37,140 --> 00:02:47,850
what I thought so the thing is every new

00:02:45,630 --> 00:02:51,450
project is exciting starting something

00:02:47,850 --> 00:02:53,730
for from scratch is a lot of fun because

00:02:51,450 --> 00:02:58,230
everything is new and there are no bugs

00:02:53,730 --> 00:03:01,710
to fix it feels very productive but of

00:02:58,230 --> 00:03:05,520
course that's that's just an illusion in

00:03:01,710 --> 00:03:08,820
time as most of you I think already know

00:03:05,520 --> 00:03:12,780
that productivity decreases and once the

00:03:08,820 --> 00:03:15,480
honeymoon period is over the

00:03:12,780 --> 00:03:18,120
productivity drops and so does your

00:03:15,480 --> 00:03:20,430
enthusiasm and then you get to a point

00:03:18,120 --> 00:03:22,260
where where you want to go and start

00:03:20,430 --> 00:03:24,420
again from scratch again which of course

00:03:22,260 --> 00:03:25,950
is every product managers nightmare and

00:03:24,420 --> 00:03:33,450
it's not a good idea

00:03:25,950 --> 00:03:35,910
for businesses in general so this is the

00:03:33,450 --> 00:03:39,060
trend that I've been noticing which is

00:03:35,910 --> 00:03:42,030
that and this is especially in front-end

00:03:39,060 --> 00:03:46,980
projects they tend to deteriorate in

00:03:42,030 --> 00:03:49,680
time at an alarming rate and this is the

00:03:46,980 --> 00:03:52,440
problem that I want to address and my

00:03:49,680 --> 00:03:55,050
idea for for solving this is the rather

00:03:52,440 --> 00:03:57,690
simple one but I think also a very

00:03:55,050 --> 00:03:59,760
powerful one and this idea is that the

00:03:57,690 --> 00:04:02,520
key to a scalable you are architecture

00:03:59,760 --> 00:04:04,709
is good component design but of course

00:04:02,520 --> 00:04:07,380
this is not very abstract so let's get a

00:04:04,709 --> 00:04:10,410
bit into it and see what that means so

00:04:07,380 --> 00:04:14,600
good focusing on component design and on

00:04:10,410 --> 00:04:17,489
component API means worrying less about

00:04:14,600 --> 00:04:18,750
the libraries that you use and the

00:04:17,489 --> 00:04:23,070
technologies that use and most

00:04:18,750 --> 00:04:26,490
importantly the generic concerns those

00:04:23,070 --> 00:04:29,520
that don't map to to product behavior so

00:04:26,490 --> 00:04:32,010
things like data fetching or routing

00:04:29,520 --> 00:04:36,600
which people spend a lot of time

00:04:32,010 --> 00:04:38,520
focusing on and what I want to get at is

00:04:36,600 --> 00:04:40,890
that you should focus less on this and

00:04:38,520 --> 00:04:42,840
way way more on the design of each

00:04:40,890 --> 00:04:45,169
component that you put out there

00:04:42,840 --> 00:04:47,970
and I also believe this is not intuitive

00:04:45,169 --> 00:04:51,690
which is why we do this mistake every

00:04:47,970 --> 00:04:54,480
single time because if you take

00:04:51,690 --> 00:04:56,880
something like data fetching who was

00:04:54,480 --> 00:04:59,790
present in almost every component in a

00:04:56,880 --> 00:05:01,710
front-end project you think well if this

00:04:59,790 --> 00:05:03,510
happens in every component is then it's

00:05:01,710 --> 00:05:05,639
very important so I'm going to focus on

00:05:03,510 --> 00:05:07,790
this aspect and then if I get it right I

00:05:05,639 --> 00:05:12,750
have a have a great start

00:05:07,790 --> 00:05:14,610
but then I will argue that if you do a

00:05:12,750 --> 00:05:17,970
lesser version of something like data

00:05:14,610 --> 00:05:19,260
fetching or routing at first and then

00:05:17,970 --> 00:05:21,960
even if you get to a point where you

00:05:19,260 --> 00:05:24,300
have 50 components that need upgraded to

00:05:21,960 --> 00:05:27,120
a better solution it's a manageable

00:05:24,300 --> 00:05:29,729
problem it's still a lot of pain and you

00:05:27,120 --> 00:05:34,130
should avoid it but it's like you have a

00:05:29,729 --> 00:05:34,130
problem that you have to fix n times and

00:05:34,220 --> 00:05:38,610
you can even get creative about it maybe

00:05:36,720 --> 00:05:41,130
automate that feed a codemod or

00:05:38,610 --> 00:05:42,510
something but it's something linear the

00:05:41,130 --> 00:05:45,000
effort is linear and you know how to

00:05:42,510 --> 00:05:48,630
approach it whereas if the if the

00:05:45,000 --> 00:05:50,340
component design is messed up and your

00:05:48,630 --> 00:05:51,840
components are not reusable and they

00:05:50,340 --> 00:05:53,370
keep upsetting each other you change

00:05:51,840 --> 00:05:55,140
something here something breaks over

00:05:53,370 --> 00:05:57,840
there and you get to a point where you

00:05:55,140 --> 00:06:00,450
have 50 or 100 components there's not a

00:05:57,840 --> 00:06:02,550
linear effort to fix it's not like you

00:06:00,450 --> 00:06:05,550
have to fix the same problem n times but

00:06:02,550 --> 00:06:06,900
rather you have to fix n problems so if

00:06:05,550 --> 00:06:08,580
you want to fix that it's like you're

00:06:06,900 --> 00:06:13,380
going back to the drawing board

00:06:08,580 --> 00:06:15,330
and you're redoing everything so to

00:06:13,380 --> 00:06:17,700
conclude this part I'd say that in time

00:06:15,330 --> 00:06:20,130
it's the quality of your component api's

00:06:17,700 --> 00:06:21,810
that make or break your UI architecture

00:06:20,130 --> 00:06:26,630
and not the libraries or the

00:06:21,810 --> 00:06:29,520
cross-cutting concerns so once again

00:06:26,630 --> 00:06:31,500
like to stress the idea that the key to

00:06:29,520 --> 00:06:34,169
a scalable u architecture is component

00:06:31,500 --> 00:06:37,320
design but then to understand this let's

00:06:34,169 --> 00:06:40,680
take a closer look to what exactly is a

00:06:37,320 --> 00:06:42,720
component and what makes a great usable

00:06:40,680 --> 00:06:44,280
component so a reusable component is

00:06:42,720 --> 00:06:48,120
something it's a part of your system

00:06:44,280 --> 00:06:51,539
that can be taken from here and put here

00:06:48,120 --> 00:06:52,950
and still work that's it it's something

00:06:51,539 --> 00:06:56,280
that can be reused

00:06:52,950 --> 00:06:57,810
but then the question becomes how do we

00:06:56,280 --> 00:07:00,630
ensure that a component is reusable

00:06:57,810 --> 00:07:02,610
because this is the promise that we get

00:07:00,630 --> 00:07:07,110
at the beginning of a project then this

00:07:02,610 --> 00:07:10,520
promise doesn't fulfill so take one

00:07:07,110 --> 00:07:13,020
aspect that we need to recognize is that

00:07:10,520 --> 00:07:15,060
when we think of useable components we

00:07:13,020 --> 00:07:16,620
think of something that we just take

00:07:15,060 --> 00:07:19,800
from here and put here and it works

00:07:16,620 --> 00:07:22,380
whereas unless you're dealing with

00:07:19,800 --> 00:07:24,300
static components all your components

00:07:22,380 --> 00:07:26,880
have dependencies and have side effects

00:07:24,300 --> 00:07:29,010
even though the side effect sounds like

00:07:26,880 --> 00:07:30,870
something bad that's what makes a wrap

00:07:29,010 --> 00:07:34,610
you need something to change your state

00:07:30,870 --> 00:07:39,450
so that it interacts with the user so

00:07:34,610 --> 00:07:42,660
even good reusable components have

00:07:39,450 --> 00:07:45,420
dependencies and have side effects so

00:07:42,660 --> 00:07:48,150
then in order to make sure they're

00:07:45,420 --> 00:07:50,310
properly reusable you need to make sure

00:07:48,150 --> 00:07:53,460
they don't have unexpected dependencies

00:07:50,310 --> 00:07:55,320
and unexpected side effects or in other

00:07:53,460 --> 00:07:58,290
words you need to ensure that your

00:07:55,320 --> 00:08:00,660
components have proper boundaries and

00:07:58,290 --> 00:08:03,600
what that means you need to be able to

00:08:00,660 --> 00:08:06,300
to detect where the responsibility of a

00:08:03,600 --> 00:08:11,670
component end and when that of its

00:08:06,300 --> 00:08:14,670
neighboring component begins so this of

00:08:11,670 --> 00:08:16,530
course sounds like something obvious

00:08:14,670 --> 00:08:20,240
maybe and something that you should keep

00:08:16,530 --> 00:08:24,030
in mind but that is not enough because

00:08:20,240 --> 00:08:26,040
the boundaries of our components are too

00:08:24,030 --> 00:08:27,720
hard to keep track of especially when we

00:08:26,040 --> 00:08:29,580
move past when you have a big team and

00:08:27,720 --> 00:08:32,520
we're we're putting a bunch of

00:08:29,580 --> 00:08:34,110
components every week and even if when

00:08:32,520 --> 00:08:35,910
you change a small component somewhere

00:08:34,110 --> 00:08:37,830
you think you didn't affect only that

00:08:35,910 --> 00:08:40,500
zone but you probably affected more than

00:08:37,830 --> 00:08:44,730
you expect so it's not about keeping

00:08:40,500 --> 00:08:47,850
this practice in mind but rather about

00:08:44,730 --> 00:08:50,630
using tools and processes that are

00:08:47,850 --> 00:08:53,460
strictly designed about defining and

00:08:50,630 --> 00:08:56,550
testing this component boundaries so to

00:08:53,460 --> 00:08:58,590
make sure they're reusable which brings

00:08:56,550 --> 00:09:01,650
me to the second part of my presentation

00:08:58,590 --> 00:09:04,590
which is a tool that I want to show you

00:09:01,650 --> 00:09:06,900
it's called via Cosmos is something that

00:09:04,590 --> 00:09:11,190
I've been working on and working with

00:09:06,900 --> 00:09:15,839
for the past three years and has made my

00:09:11,190 --> 00:09:18,540
life much easier in this respect so as

00:09:15,839 --> 00:09:24,270
the name as an inn suggests it works

00:09:18,540 --> 00:09:25,650
with react and the reason works reacted

00:09:24,270 --> 00:09:28,140
because react has a great component

00:09:25,650 --> 00:09:29,810
model and I actually discovered reacts

00:09:28,140 --> 00:09:32,910
when I was researching for this project

00:09:29,810 --> 00:09:34,260
it was very early days and it was a

00:09:32,910 --> 00:09:36,630
perfect match

00:09:34,260 --> 00:09:40,800
but the vision for this project is to

00:09:36,630 --> 00:09:43,290
work with any rendering engine so maybe

00:09:40,800 --> 00:09:45,180
in the future you'll be able to plug any

00:09:43,290 --> 00:09:47,400
other framework that has the component

00:09:45,180 --> 00:09:52,770
model into this because the principle is

00:09:47,400 --> 00:09:56,390
the same so what does VI cosmos do it is

00:09:52,770 --> 00:09:59,970
a playground for your components and

00:09:56,390 --> 00:10:03,390
it's a development tool where where UI

00:09:59,970 --> 00:10:06,000
developers live so what it does is it

00:10:03,390 --> 00:10:07,320
scans your codebase for components so it

00:10:06,000 --> 00:10:09,420
detects all the component that you have

00:10:07,320 --> 00:10:11,760
in your code base and then loads them up

00:10:09,420 --> 00:10:13,560
in this UI and you see a list of

00:10:11,760 --> 00:10:16,320
components and for each component you

00:10:13,560 --> 00:10:17,880
have a list of fixtures which is the

00:10:16,320 --> 00:10:21,380
States of components that you define

00:10:17,880 --> 00:10:24,089
that you expect those components to to

00:10:21,380 --> 00:10:26,970
to be present in in your app or the D

00:10:24,089 --> 00:10:28,680
support so once you have this you're

00:10:26,970 --> 00:10:31,500
able to explore every component from

00:10:28,680 --> 00:10:36,350
your codebase in isolation and test them

00:10:31,500 --> 00:10:38,640
in isolation and exactly watch their

00:10:36,350 --> 00:10:44,339
their behavior outside their usual

00:10:38,640 --> 00:10:46,140
context so instead of just talking about

00:10:44,339 --> 00:10:49,380
it why don't I just show it to you

00:10:46,140 --> 00:10:51,930
because it's much easier and as it turns

00:10:49,380 --> 00:10:54,660
out this presentation that I'm showing

00:10:51,930 --> 00:10:57,120
you is actually an a quick app that I

00:10:54,660 --> 00:11:00,360
did that's loaded inside via corresponds

00:10:57,120 --> 00:11:02,880
it's just in full-screen mode so if I go

00:11:00,360 --> 00:11:05,720
back you should be able to see the menu

00:11:02,880 --> 00:11:05,720
that I was talking about

00:11:09,660 --> 00:11:15,490
so the UI is very simple you have a home

00:11:13,269 --> 00:11:16,930
button you have a fixture editor button

00:11:15,490 --> 00:11:18,850
which is something that I'll show you in

00:11:16,930 --> 00:11:20,649
a minute the fullscreen button then the

00:11:18,850 --> 00:11:22,959
searchable list of components and

00:11:20,649 --> 00:11:25,449
fixtures now in this app because it's a

00:11:22,959 --> 00:11:27,430
very simple one we only have two

00:11:25,449 --> 00:11:29,579
components it's the presentation which

00:11:27,430 --> 00:11:32,290
is the root level component and then

00:11:29,579 --> 00:11:36,250
there's a slide which is the individual

00:11:32,290 --> 00:11:38,829
slide that only shows one emoji so we

00:11:36,250 --> 00:11:39,939
can go to the fixtures of the slide

00:11:38,829 --> 00:11:41,740
which doesn't have the background

00:11:39,939 --> 00:11:46,000
because that's part of the parent

00:11:41,740 --> 00:11:51,189
component so if we open up the fixture

00:11:46,000 --> 00:11:54,250
editor we can see the input that's being

00:11:51,189 --> 00:11:56,079
passed to this component in order for it

00:11:54,250 --> 00:11:59,170
to be in the state so because this

00:11:56,079 --> 00:12:01,329
component it doesn't have any state in

00:11:59,170 --> 00:12:02,560
the react wall you'd call it a stateless

00:12:01,329 --> 00:12:05,589
or a functional component

00:12:02,560 --> 00:12:08,110
it only has props which is this sort of

00:12:05,589 --> 00:12:10,509
immutable properties that you received

00:12:08,110 --> 00:12:13,480
from a parent or in this case from the

00:12:10,509 --> 00:12:15,790
playground and the slide component is a

00:12:13,480 --> 00:12:18,250
very simple component only has one prop

00:12:15,790 --> 00:12:21,130
it's content and here you can put any

00:12:18,250 --> 00:12:23,290
text you want or emojis so you can play

00:12:21,130 --> 00:12:25,209
with this you can just change the input

00:12:23,290 --> 00:12:28,360
here and see it reflect on the right

00:12:25,209 --> 00:12:30,189
side so see if if the father in this

00:12:28,360 --> 00:12:31,360
family were to be an

00:12:30,189 --> 00:12:33,779
and you want to remove him from the

00:12:31,360 --> 00:12:36,970
picture it just did this and it updates

00:12:33,779 --> 00:12:38,380
of course this is a simple example and

00:12:36,970 --> 00:12:45,069
you do want to do that you want to be

00:12:38,380 --> 00:12:48,189
home records so working like this allows

00:12:45,069 --> 00:12:51,339
you to to understand how your component

00:12:48,189 --> 00:12:53,529
works at another level when you work on

00:12:51,339 --> 00:12:56,290
a component inside the bigger context of

00:12:53,529 --> 00:12:59,649
like 50/50 components you have no idea

00:12:56,290 --> 00:13:01,990
what's going on and of course if you do

00:12:59,649 --> 00:13:04,509
unit testing properly which I'm sure

00:13:01,990 --> 00:13:07,959
everybody does in the front involved you

00:13:04,509 --> 00:13:10,269
get a lot of the benefit but because

00:13:07,959 --> 00:13:12,189
we're working with user interfaces you

00:13:10,269 --> 00:13:15,430
need to see it work and there's also the

00:13:12,189 --> 00:13:18,970
CSS ID so there are plenty more benefits

00:13:15,430 --> 00:13:21,130
to this now a bunch of all the fixtures

00:13:18,970 --> 00:13:22,520
here this is from the first slide which

00:13:21,130 --> 00:13:26,240
of course should be

00:13:22,520 --> 00:13:30,830
just my name and then this is the one

00:13:26,240 --> 00:13:33,260
about daily life and this is when you

00:13:30,830 --> 00:13:38,000
realize this this talk was going to be

00:13:33,260 --> 00:13:41,210
awkward there's also the presentation

00:13:38,000 --> 00:13:42,980
component the level one you see there's

00:13:41,210 --> 00:13:44,180
the fixture for the first slide for the

00:13:42,980 --> 00:13:46,630
website which I'm not going to show you

00:13:44,180 --> 00:13:49,100
yet and then the one we left off and

00:13:46,630 --> 00:13:51,170
this one doesn't have props but rather

00:13:49,100 --> 00:13:52,850
has state which is also you can

00:13:51,170 --> 00:13:58,040
something you can mark from the fixture

00:13:52,850 --> 00:14:01,040
and this again this component is simple

00:13:58,040 --> 00:14:04,910
it just has two two state attributes the

00:14:01,040 --> 00:14:09,260
first is the slide index so you can see

00:14:04,910 --> 00:14:10,790
if we go back the number changes so it

00:14:09,260 --> 00:14:12,710
reflects the state that's currently in

00:14:10,790 --> 00:14:14,300
the running instance but then you can

00:14:12,710 --> 00:14:17,300
also play with the editor and changes of

00:14:14,300 --> 00:14:17,960
here so in a way it's like two two-way

00:14:17,300 --> 00:14:19,490
data-binding

00:14:17,960 --> 00:14:23,240
which is really fun when you deal with

00:14:19,490 --> 00:14:25,100
state inside the playground now the

00:14:23,240 --> 00:14:27,020
second attribute is really not important

00:14:25,100 --> 00:14:28,460
it I wasn't sure what sort of remote

00:14:27,020 --> 00:14:29,990
control I was going to have so I wanted

00:14:28,460 --> 00:14:33,470
to make sure I can navigate with just

00:14:29,990 --> 00:14:35,510
one button so if you long press that

00:14:33,470 --> 00:14:38,780
going back flag turns to true and then

00:14:35,510 --> 00:14:44,120
you go back instead of forward just Plan

00:14:38,780 --> 00:14:46,550
B but this is how it works and of course

00:14:44,120 --> 00:14:49,910
things get much more interesting when

00:14:46,550 --> 00:14:52,250
you have a bigger app because there are

00:14:49,910 --> 00:14:53,630
other things you can mock in in the

00:14:52,250 --> 00:14:57,860
react world there's also this thing

00:14:53,630 --> 00:15:00,470
called context which is sort of props on

00:14:57,860 --> 00:15:03,260
steroids because you only test it once

00:15:00,470 --> 00:15:07,220
and it gets to all the children of your

00:15:03,260 --> 00:15:08,860
children and so on and that can also be

00:15:07,220 --> 00:15:11,390
marked from this interface but then

00:15:08,860 --> 00:15:18,220
there are also higher level things like

00:15:11,390 --> 00:15:21,920
Redux which whoops so read that Redux

00:15:18,220 --> 00:15:23,890
also works with context in the back so

00:15:21,920 --> 00:15:26,540
it creates this instance and then

00:15:23,890 --> 00:15:29,120
attaches it to the context which passes

00:15:26,540 --> 00:15:31,250
all your components but you wouldn't

00:15:29,120 --> 00:15:32,330
want to see that internal stuff here

00:15:31,250 --> 00:15:33,860
because you're not dealing with that

00:15:32,330 --> 00:15:36,259
you're dealing with the real axis

00:15:33,860 --> 00:15:39,529
surface API which is the store

00:15:36,259 --> 00:15:41,119
so then in VI cosmos you have this thing

00:15:39,529 --> 00:15:43,819
called proxies which is a sort of a

00:15:41,119 --> 00:15:45,979
middleware which allows you to process

00:15:43,819 --> 00:15:50,509
the fixtures and do other stuff with the

00:15:45,979 --> 00:15:53,029
data there so you'll be able to put the

00:15:50,509 --> 00:15:57,139
redox state as it is in the store and

00:15:53,029 --> 00:15:58,970
that proxy would process it put it in do

00:15:57,139 --> 00:16:01,939
the same work that our provider does and

00:15:58,970 --> 00:16:04,160
then send it to the component and I have

00:16:01,939 --> 00:16:08,689
an example like that just to get an idea

00:16:04,160 --> 00:16:10,519
this is this is a code base with many

00:16:08,689 --> 00:16:13,579
more components and fixtures so you can

00:16:10,519 --> 00:16:16,100
get the idea it's it's a game that I've

00:16:13,579 --> 00:16:19,100
done a long time ago it's called

00:16:16,100 --> 00:16:24,289
Slattery's it's a Tetris with a flat

00:16:19,100 --> 00:16:28,970
design and you can see as you're playing

00:16:24,289 --> 00:16:32,029
the game the state evolves on the left

00:16:28,970 --> 00:16:34,009
side and you're able to inspect

00:16:32,029 --> 00:16:36,439
everything that's going on inside your

00:16:34,009 --> 00:16:39,529
app this is everything that's driving

00:16:36,439 --> 00:16:41,419
the state this entire object and then

00:16:39,529 --> 00:16:45,919
you can also do the opposite and change

00:16:41,419 --> 00:16:49,100
the states cheat a little bit and let's

00:16:45,919 --> 00:16:52,459
see what happens but the powerful thing

00:16:49,100 --> 00:16:55,069
here is that you can go at any level so

00:16:52,459 --> 00:16:56,689
here we're exploring this component

00:16:55,069 --> 00:16:58,850
called Flash's game which is the top

00:16:56,689 --> 00:17:00,949
level component and it Nets the entire

00:16:58,850 --> 00:17:02,929
app so it's pretty much the same as you

00:17:00,949 --> 00:17:05,899
would load the app but then you can

00:17:02,929 --> 00:17:07,819
really go low level and work with

00:17:05,899 --> 00:17:10,490
something like the info panel or the

00:17:07,819 --> 00:17:13,159
game panel and just to work with the

00:17:10,490 --> 00:17:15,769
properties it needs and then even go

00:17:13,159 --> 00:17:17,449
lower or work with a tetromino which is

00:17:15,769 --> 00:17:21,439
basically just a component that receives

00:17:17,449 --> 00:17:24,760
the color and the grid and this is also

00:17:21,439 --> 00:17:27,110
an amazing way for somebody new that

00:17:24,760 --> 00:17:29,570
just joined your team to explore your

00:17:27,110 --> 00:17:32,049
codebase and see exactly what it what's

00:17:29,570 --> 00:17:32,049
it about

00:17:32,529 --> 00:17:38,230
so yeah this is very much it the demo

00:17:38,409 --> 00:17:42,399
stick it up where we left it off

00:17:52,350 --> 00:18:00,580
so there are a bunch of and other things

00:17:56,200 --> 00:18:02,680
I would like to mention in before

00:18:00,580 --> 00:18:05,140
leaving a few thoughts that I'd like to

00:18:02,680 --> 00:18:08,650
leave you with so first of all using

00:18:05,140 --> 00:18:10,780
usually a component playground is by no

00:18:08,650 --> 00:18:14,530
means a silver bullet

00:18:10,780 --> 00:18:15,309
nothing is it's a huge step in the right

00:18:14,530 --> 00:18:18,730
direction

00:18:15,309 --> 00:18:21,520
but the key of this talk is that you

00:18:18,730 --> 00:18:23,740
need to you need to work at every step

00:18:21,520 --> 00:18:26,140
and you need to properly design every

00:18:23,740 --> 00:18:29,380
component if you want your your codebase

00:18:26,140 --> 00:18:32,380
to still be healthy and functional and

00:18:29,380 --> 00:18:34,480
fun in two years from now so this is a

00:18:32,380 --> 00:18:36,370
tool that allows you and empowers you to

00:18:34,480 --> 00:18:38,530
do that and it surfaces these nasty

00:18:36,370 --> 00:18:41,679
dependencies that you lose track of off

00:18:38,530 --> 00:18:43,090
in time but it's not the only thing that

00:18:41,679 --> 00:18:46,120
you need to do you just need to put in

00:18:43,090 --> 00:18:49,090
the work and then there are a lot of

00:18:46,120 --> 00:18:52,120
people and we've already touched on this

00:18:49,090 --> 00:18:54,130
today who complain about the complexity

00:18:52,120 --> 00:18:56,380
of building JavaScript applications in

00:18:54,130 --> 00:18:59,200
the last years and how this has been

00:18:56,380 --> 00:19:01,059
growing and growing or which I'm sure

00:18:59,200 --> 00:19:04,450
it's a pain that we all feel on some

00:19:01,059 --> 00:19:06,730
level but I think only thing this is

00:19:04,450 --> 00:19:09,880
unfair because it only tells half the

00:19:06,730 --> 00:19:12,309
story because as the complexity of

00:19:09,880 --> 00:19:16,390
building JavaScript apps grew so did the

00:19:12,309 --> 00:19:19,679
expectations we have for them so if we

00:19:16,390 --> 00:19:22,600
take this into account how much the the

00:19:19,679 --> 00:19:25,210
websites that we build look like today

00:19:22,600 --> 00:19:28,150
as opposed to 10 years from now 10 years

00:19:25,210 --> 00:19:31,000
in the past I think the complexity and

00:19:28,150 --> 00:19:35,290
the tools that we use make a lot of

00:19:31,000 --> 00:19:37,900
sense another thing that I want to leave

00:19:35,290 --> 00:19:42,480
you is with is that what I'd be

00:19:37,900 --> 00:19:42,480
delighted if you try it out via cosmos

00:19:42,720 --> 00:19:48,010
it's much more important for me that you

00:19:45,520 --> 00:19:51,190
use any other tool of this kind so if

00:19:48,010 --> 00:19:52,630
you don't use react or you don't like

00:19:51,190 --> 00:19:56,679
the story in particular there are plenty

00:19:52,630 --> 00:19:57,490
others that appears in the meantime some

00:19:56,679 --> 00:20:02,050
are very popular

00:19:57,490 --> 00:20:05,350
are some are very niche specialized on

00:20:02,050 --> 00:20:08,650
something like style guides and the last

00:20:05,350 --> 00:20:09,580
time I saw there were like 50 of them 15

00:20:08,650 --> 00:20:12,610
sorry

00:20:09,580 --> 00:20:15,570
so it's been I'd be much more happier if

00:20:12,610 --> 00:20:20,110
you use any of these tools at all then

00:20:15,570 --> 00:20:22,030
if you didn't so because that's the

00:20:20,110 --> 00:20:23,800
message I want to convey today not that

00:20:22,030 --> 00:20:25,360
you need to use react Cotton's relative

00:20:23,800 --> 00:20:29,230
you need some to use a tool like this

00:20:25,360 --> 00:20:31,210
and to make sure that your components

00:20:29,230 --> 00:20:33,130
are truly usable and you don't just keep

00:20:31,210 --> 00:20:37,630
throwing them in a bucket and hope

00:20:33,130 --> 00:20:41,080
things will work out but if you do

00:20:37,630 --> 00:20:43,600
choose to use react cosmos I'd be very

00:20:41,080 --> 00:20:47,050
delighted again and I'd love to hear

00:20:43,600 --> 00:20:48,820
your feedback and you know I'd be very

00:20:47,050 --> 00:20:56,170
happy if you wanted to help make it

00:20:48,820 --> 00:20:57,730
better so in closing I'd like to leave

00:20:56,170 --> 00:21:01,300
you with a final thought which is that

00:20:57,730 --> 00:21:04,990
if you want to build a long-standing

00:21:01,300 --> 00:21:08,200
healthy user interface you need to take

00:21:04,990 --> 00:21:10,750
front-end development seriously and with

00:21:08,200 --> 00:21:15,720
that in mind I'd like to invite you all

00:21:10,750 --> 00:21:15,720
to set your components free thank you

00:21:22,480 --> 00:21:26,809
so the fun part

00:21:24,790 --> 00:21:28,880
tragically something seriously when it

00:21:26,809 --> 00:21:31,640
has the word epic in it so do you agree

00:21:28,880 --> 00:21:34,010
that native components will kill react

00:21:31,640 --> 00:21:38,600
in an epic fight for the best way to

00:21:34,010 --> 00:21:40,910
create components mmm I don't know you

00:21:38,600 --> 00:21:44,890
can create a native experience with

00:21:40,910 --> 00:21:48,370
react already so natural about that I

00:21:44,890 --> 00:21:48,370
don't have a better answer

00:21:49,510 --> 00:21:55,910
cosmos versus storybook well use which

00:21:53,390 --> 00:21:59,270
one you like best

00:21:55,910 --> 00:22:02,510
there are a couple of differences in in

00:21:59,270 --> 00:22:06,919
story book you define your your fixtures

00:22:02,510 --> 00:22:07,600
via stories so and you define them using

00:22:06,919 --> 00:22:10,370
JSX

00:22:07,600 --> 00:22:13,000
in card modes you you define your

00:22:10,370 --> 00:22:16,549
fixtures using plain JavaScript objects

00:22:13,000 --> 00:22:18,580
which I like because you're able to to

00:22:16,549 --> 00:22:21,020
display that fixture editor that

00:22:18,580 --> 00:22:23,000
basically shows you the state and can be

00:22:21,020 --> 00:22:27,020
updated in real time as you play with

00:22:23,000 --> 00:22:29,350
your app or your components and I also

00:22:27,020 --> 00:22:32,270
think it paves the way for making it

00:22:29,350 --> 00:22:34,220
compatible with other libraries as well

00:22:32,270 --> 00:22:39,470
because the fixtures are just plain

00:22:34,220 --> 00:22:43,090
JavaScript objects other than that I

00:22:39,470 --> 00:22:45,710
really don't know they're both great

00:22:43,090 --> 00:22:53,720
technical debt contributes to JavaScript

00:22:45,710 --> 00:22:56,330
fatigue hmm maybe maybe I think

00:22:53,720 --> 00:22:57,770
JavaScript fatigue is mostly driven by

00:22:56,330 --> 00:23:00,140
the fact that we don't know what we want

00:22:57,770 --> 00:23:02,360
to do so we we think we need to learn

00:23:00,140 --> 00:23:04,010
everything and I find that as soon as

00:23:02,360 --> 00:23:06,020
I'm focused and I know what I want to

00:23:04,010 --> 00:23:09,250
pursue in terms of learning and in terms

00:23:06,020 --> 00:23:13,160
of building then the JavaScript fatigue

00:23:09,250 --> 00:23:17,510
slowly disappears technical that I think

00:23:13,160 --> 00:23:21,850
it's a bigger problem and yeah we want

00:23:17,510 --> 00:23:24,140
to see real app in via cosmos well the

00:23:21,850 --> 00:23:26,330
the companies that I used to work with

00:23:24,140 --> 00:23:31,010
had a very real app but of course I can

00:23:26,330 --> 00:23:33,440
show that and I'd also like to see a

00:23:31,010 --> 00:23:38,990
real app in VI cosmos oh please

00:23:33,440 --> 00:23:40,460
footed the can use this tool to test

00:23:38,990 --> 00:23:46,759
your application from the UI perspective

00:23:40,460 --> 00:23:48,620
by changing the series of states well

00:23:46,759 --> 00:23:51,649
you can use this tool to test your

00:23:48,620 --> 00:23:55,659
application in a number of ways so so

00:23:51,649 --> 00:23:55,659
one thing that we were doing at HUD was

00:23:55,840 --> 00:24:01,549
actually taking snapshots of every

00:23:58,940 --> 00:24:03,799
single URL so every fixture that you

00:24:01,549 --> 00:24:07,789
have in VI cosmos has a unique URL and

00:24:03,799 --> 00:24:10,009
we were using that to to start up a

00:24:07,789 --> 00:24:12,019
headless server and take a screenshot

00:24:10,009 --> 00:24:13,759
and we'd have a screenshot a repository

00:24:12,019 --> 00:24:16,519
of screenshots of every components in

00:24:13,759 --> 00:24:18,679
every state and then whenever we do a

00:24:16,519 --> 00:24:21,559
deploy or something we add that to our

00:24:18,679 --> 00:24:25,100
test suit and we'd get the visual diff

00:24:21,559 --> 00:24:27,049
and in most cases that was intended

00:24:25,100 --> 00:24:29,120
because you change something but it's an

00:24:27,049 --> 00:24:31,340
extra check you're like mmmm this change

00:24:29,120 --> 00:24:33,529
but I wanted it to this one I didn't

00:24:31,340 --> 00:24:35,990
expect it to and it's really fun talking

00:24:33,529 --> 00:24:38,899
about component boundaries when you

00:24:35,990 --> 00:24:42,860
change one component and then you run

00:24:38,899 --> 00:24:44,600
this test and you see 100 dips and you

00:24:42,860 --> 00:24:48,799
realize that the button that you change

00:24:44,600 --> 00:24:51,139
was actually present in I don't know 10

00:24:48,799 --> 00:24:53,450
other pages and then there are other

00:24:51,139 --> 00:24:58,190
types of tests you can do with VR Cosmos

00:24:53,450 --> 00:25:00,470
if you're familiar with just the test

00:24:58,190 --> 00:25:03,919
framework from facebook which is kind of

00:25:00,470 --> 00:25:07,909
Awesome you're able to create this sort

00:25:03,919 --> 00:25:10,820
of snapshots from your component so you

00:25:07,909 --> 00:25:13,519
use the set up is you set up your

00:25:10,820 --> 00:25:16,159
component and it creates sort of like a

00:25:13,519 --> 00:25:18,799
visual test but instead of capturing the

00:25:16,159 --> 00:25:21,019
pixels it captures the ji-sun that's

00:25:18,799 --> 00:25:23,149
deterministic of your component and you

00:25:21,019 --> 00:25:26,659
can also use that with via cosmos is

00:25:23,149 --> 00:25:29,059
just install a separate package and it

00:25:26,659 --> 00:25:31,389
automatically creates a test for every

00:25:29,059 --> 00:25:33,440
component you have set up with fixtures

00:25:31,389 --> 00:25:38,539
so yeah you could you could definitely

00:25:33,440 --> 00:25:42,200
use it to test your app in many ways how

00:25:38,539 --> 00:25:44,360
would you define statements turns to

00:25:42,200 --> 00:25:47,899
react oznas concept

00:25:44,360 --> 00:25:52,700
it's a component Explorer it allows you

00:25:47,899 --> 00:25:56,240
to dissect your app and work with each

00:25:52,700 --> 00:26:02,210
component in isolation so that their

00:25:56,240 --> 00:26:04,039
internal usable how do you handle

00:26:02,210 --> 00:26:08,960
components those require event handling

00:26:04,039 --> 00:26:16,870
or server-side interactions well the two

00:26:08,960 --> 00:26:19,940
things event handling usually maps to a

00:26:16,870 --> 00:26:22,789
in reality prop it's like a callback

00:26:19,940 --> 00:26:24,590
that the parent sends you so that's

00:26:22,789 --> 00:26:26,269
something you can definitely put in the

00:26:24,590 --> 00:26:30,200
fixture you don't have to put just plain

00:26:26,269 --> 00:26:32,419
values you keep instructions as well but

00:26:30,200 --> 00:26:34,309
I think you should mock everything as

00:26:32,419 --> 00:26:36,620
much as possible so if your component

00:26:34,309 --> 00:26:40,179
that you're rolling is the exact one

00:26:36,620 --> 00:26:40,179
that's doing the server-side requests

00:26:40,269 --> 00:26:46,639
then you could you could mark that as

00:26:44,419 --> 00:26:50,149
well there are there are ways for you to

00:26:46,639 --> 00:26:52,429
mark like a charge request or fetch

00:26:50,149 --> 00:26:55,519
requests and that's that's something you

00:26:52,429 --> 00:26:58,580
can plug into in to Cardinals again via

00:26:55,519 --> 00:27:00,559
the proxy middleware system so we've

00:26:58,580 --> 00:27:02,570
done that as well you just in the

00:27:00,559 --> 00:27:06,139
fixture besides the component input you

00:27:02,570 --> 00:27:08,269
define a map of URLs and payloads so it

00:27:06,139 --> 00:27:10,700
mocks that as well you wouldn't want a

00:27:08,269 --> 00:27:13,940
component to do actual request the

00:27:10,700 --> 00:27:16,100
server side in the playground is this to

00:27:13,940 --> 00:27:19,460
properly unit tested oh my god it has

00:27:16,100 --> 00:27:22,070
like 700 tests and several layers of

00:27:19,460 --> 00:27:26,750
tests yes I invite you to check out the

00:27:22,070 --> 00:27:31,750
code base do you think via cosmos she

00:27:26,750 --> 00:27:34,730
had component of the final frontier I

00:27:31,750 --> 00:27:36,799
wouldn't dare see anything as powerful

00:27:34,730 --> 00:27:40,669
as that I don't even know what a final

00:27:36,799 --> 00:27:45,830
frontier means sorry how does this

00:27:40,669 --> 00:27:51,350
compare with react dev tools mmm that's

00:27:45,830 --> 00:27:56,559
a good one so react dev tools has def

00:27:51,350 --> 00:28:01,299
definitely has a lot of overlap but

00:27:56,559 --> 00:28:03,370
you don't get to define predefined

00:28:01,299 --> 00:28:05,259
states like you do with cosmos where you

00:28:03,370 --> 00:28:07,210
have fixtures then you say this this is

00:28:05,259 --> 00:28:10,179
the state in my component we can be in

00:28:07,210 --> 00:28:12,159
and then or State Dec and then you can

00:28:10,179 --> 00:28:14,019
come on later and replicate that just by

00:28:12,159 --> 00:28:16,659
clicking on a fixture which is like a

00:28:14,019 --> 00:28:18,999
bookmark I don't think you can do that

00:28:16,659 --> 00:28:22,950
with the dev tools whereas there you're

00:28:18,999 --> 00:28:25,059
just inspecting the state at the moment

00:28:22,950 --> 00:28:27,820
this is one difference I'm sure there

00:28:25,059 --> 00:28:30,909
are many but I try to think at this

00:28:27,820 --> 00:28:33,190
point with this concept work with

00:28:30,909 --> 00:28:35,970
angular 2 I hope so

00:28:33,190 --> 00:28:39,190
I don't have enough experience to to

00:28:35,970 --> 00:28:41,169
answer this but I definitely hope so and

00:28:39,190 --> 00:28:42,759
if you do have experience I'd love to

00:28:41,169 --> 00:28:46,539
have a chat with you and talk about it

00:28:42,759 --> 00:28:50,619
because this is like the thing I'm most

00:28:46,539 --> 00:28:56,139
interested wind in to make it go beyond

00:28:50,619 --> 00:28:58,869
react and I just realized that I didn't

00:28:56,139 --> 00:29:01,539
get to my last slide which had my

00:28:58,869 --> 00:29:06,309
Twitter handle so I lied I did put some

00:29:01,539 --> 00:29:08,940
text in there how much time does it take

00:29:06,309 --> 00:29:13,210
in a project make all components usable

00:29:08,940 --> 00:29:16,330
does it worth the effort well there are

00:29:13,210 --> 00:29:19,629
two questions there or the effort yes it

00:29:16,330 --> 00:29:22,899
does because otherwise you're fooling

00:29:19,629 --> 00:29:26,889
yourself and it's something that usually

00:29:22,899 --> 00:29:28,960
happens is you design a component when

00:29:26,889 --> 00:29:31,570
you start from scratch like a drop-down

00:29:28,960 --> 00:29:33,970
a magical reusable drop-down and you

00:29:31,570 --> 00:29:36,369
work like one or two weeks on that and

00:29:33,970 --> 00:29:38,769
you the promise is that you do it once

00:29:36,369 --> 00:29:42,399
and you reuse it everywhere and then

00:29:38,769 --> 00:29:43,899
when the second use Kies comes along it

00:29:42,399 --> 00:29:46,659
takes just as much time to make it work

00:29:43,899 --> 00:29:48,369
for the second use case not only that

00:29:46,659 --> 00:29:51,970
you introduce bugs in the first use case

00:29:48,369 --> 00:29:56,230
so yes I think it's worth the effort how

00:29:51,970 --> 00:29:59,409
much does it take that really depends on

00:29:56,230 --> 00:30:03,210
what you're building as long as it takes

00:29:59,409 --> 00:30:03,210
I don't know

00:30:05,010 --> 00:30:09,960
how do you say the conference you do

00:30:07,020 --> 00:30:15,840
usable or not still composed most of

00:30:09,960 --> 00:30:19,340
them should be reusable indeed sometimes

00:30:15,840 --> 00:30:21,780
you you will split a component into many

00:30:19,340 --> 00:30:23,970
small components even if you don't want

00:30:21,780 --> 00:30:30,510
to reuse them because you want a reason

00:30:23,970 --> 00:30:33,540
about them in smaller bits but I would

00:30:30,510 --> 00:30:35,340
argue that even even in those cases it

00:30:33,540 --> 00:30:39,030
would be useful to be able to load them

00:30:35,340 --> 00:30:41,460
in isolation because another benefit of

00:30:39,030 --> 00:30:45,330
something like this is not just

00:30:41,460 --> 00:30:47,450
usability is being able to work in

00:30:45,330 --> 00:30:49,800
parallel with your colleagues because

00:30:47,450 --> 00:30:51,630
you work on your component somebody else

00:30:49,800 --> 00:30:55,740
works on their component and you only

00:30:51,630 --> 00:30:58,020
put them together at the end so yeah I

00:30:55,740 --> 00:30:59,940
think all of them should be designed as

00:30:58,020 --> 00:31:02,330
usable even if you're only going to put

00:30:59,940 --> 00:31:02,330
it in one place

00:31:03,860 --> 00:31:11,220
one more question then we'll have to

00:31:06,630 --> 00:31:13,800
thank you how do you handle components

00:31:11,220 --> 00:31:20,850
that have services injected with lazy

00:31:13,800 --> 00:31:26,700
inject or other similar tools that's a

00:31:20,850 --> 00:31:30,240
good question I think it you just have

00:31:26,700 --> 00:31:34,050
to find a way to mark whatever is lazy

00:31:30,240 --> 00:31:40,410
or if not to be able to still load

00:31:34,050 --> 00:31:42,150
lazily it the thing is you only want to

00:31:40,410 --> 00:31:44,610
load components and states that they're

00:31:42,150 --> 00:31:47,070
going to be in real life so you wouldn't

00:31:44,610 --> 00:31:51,590
want to break it into other artificial

00:31:47,070 --> 00:31:54,600
states how would you market in that case

00:31:51,590 --> 00:32:01,520
I've not done it but I'm sure there's a

00:31:54,600 --> 00:32:05,930
way yeah that is all thank you thank you

00:32:01,520 --> 00:32:05,930

YouTube URL: https://www.youtube.com/watch?v=C3tx999wbgM


