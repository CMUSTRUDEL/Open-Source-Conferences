Title: Advanced Redux: Design Patterns and Practices - Nir Kaufman | JSHeroes 2018
Publication date: 2018-05-03
Playlist: JSHeroes 2018
Description: 
	Redux is as a modern popular state management library in frontend today. But if you dig a little deeper, you will find out the Redux build on top of patterns and concepts that was introduced 20 years ago. During this session, we talk about design patterns from the world of micro services and messaging systems and see how to use those ideas in the context of modern single page app. You will never use Redux the same way again.
Captions: 
	00:00:01,840 --> 00:00:04,899
[Music]

00:00:09,830 --> 00:00:14,210
someone asked me if I'm going to be

00:00:12,120 --> 00:00:19,619
funny today

00:00:14,210 --> 00:00:22,080
I'm not going to be funny today today

00:00:19,619 --> 00:00:26,760
this is going to be a professional

00:00:22,080 --> 00:00:49,739
highly technical talk I will try not to

00:00:26,760 --> 00:00:52,140
smile okay I smile all right I'm so

00:00:49,739 --> 00:00:53,399
happy to be here again like Alexei I was

00:00:52,140 --> 00:00:55,949
a here last year

00:00:53,399 --> 00:00:57,870
I just found myself on YouTube and if

00:00:55,949 --> 00:01:02,340
you look very closely you will notice

00:00:57,870 --> 00:01:04,940
that I'm wearing the same clothes I'm

00:01:02,340 --> 00:01:04,940
not joking

00:01:05,369 --> 00:01:11,460
I have only one pair of decent jeans and

00:01:08,490 --> 00:01:13,320
a shirt to talk with so this is me from

00:01:11,460 --> 00:01:16,229
last year and today I'm going to talk

00:01:13,320 --> 00:01:17,759
about radix because we taxes framework

00:01:16,229 --> 00:01:22,110
agnostic you can take this information

00:01:17,759 --> 00:01:24,659
to any framework you choose a short

00:01:22,110 --> 00:01:29,280
introduction very very short let's start

00:01:24,659 --> 00:01:31,680
with me I was born in 1981 not far from

00:01:29,280 --> 00:01:34,200
here this is me right here right there

00:01:31,680 --> 00:01:38,040
somewhere all right my mother used to

00:01:34,200 --> 00:01:40,860
arrange meetups they didn't have any any

00:01:38,040 --> 00:01:44,250
diversity issues you see all of them are

00:01:40,860 --> 00:01:47,790
women's but you know history is hard and

00:01:44,250 --> 00:01:50,159
in 2006 there's something awful happened

00:01:47,790 --> 00:01:53,399
we changed my life you all know about

00:01:50,159 --> 00:01:57,960
this yeah what's happening 200 2006 you

00:01:53,399 --> 00:02:00,479
know no no no Vista was released so we

00:01:57,960 --> 00:02:03,450
all need to buy Mac books and pay tons

00:02:00,479 --> 00:02:05,820
of money for adapters and awful life but

00:02:03,450 --> 00:02:09,690
now I'm good I've got a great title I've

00:02:05,820 --> 00:02:13,840
got my photo in color and some titles

00:02:09,690 --> 00:02:17,020
so let's get started I'm also proud to

00:02:13,840 --> 00:02:20,920
be a part of the community where I live

00:02:17,020 --> 00:02:23,380
it and work in New York so if you're

00:02:20,920 --> 00:02:25,720
visiting come and check it out we've got

00:02:23,380 --> 00:02:28,630
great meetups and just before we deep

00:02:25,720 --> 00:02:30,910
dive into Redux let's take a second

00:02:28,630 --> 00:02:34,060
because we are having fun but not

00:02:30,910 --> 00:02:36,070
everything perfect in our world so I

00:02:34,060 --> 00:02:40,120
like to share with you I'm also

00:02:36,070 --> 00:02:42,160
volunteering for a.m. oh you which

00:02:40,120 --> 00:02:46,890
stands for anonymous Microsoft Office

00:02:42,160 --> 00:02:50,380
users so if you or one of your friends

00:02:46,890 --> 00:02:52,650
still use Microsoft Office please give

00:02:50,380 --> 00:02:56,800
meet me after the talk I will hug you

00:02:52,650 --> 00:03:03,750
alright let's start let's start the talk

00:02:56,800 --> 00:03:10,960
let's waste the time relax who use redux

00:03:03,750 --> 00:03:13,360
yeah 1997 when we still use city rooms

00:03:10,960 --> 00:03:15,940
this book was published object-oriented

00:03:13,360 --> 00:03:18,850
software construction and this term was

00:03:15,940 --> 00:03:20,380
I think this was the first time that we

00:03:18,850 --> 00:03:24,489
heard about this pattern who heard about

00:03:20,380 --> 00:03:28,060
CQ s command query separation right a

00:03:24,489 --> 00:03:31,150
very old pattern basically it means that

00:03:28,060 --> 00:03:34,090
every method should be either a command

00:03:31,150 --> 00:03:36,070
or a query in other words if we're

00:03:34,090 --> 00:03:39,390
asking a questions we are not changing

00:03:36,070 --> 00:03:42,030
the answer we want to separate between

00:03:39,390 --> 00:03:45,070
methods that change the state and

00:03:42,030 --> 00:03:48,010
queries that return the results all

00:03:45,070 --> 00:03:50,680
right so if we take this diagram from

00:03:48,010 --> 00:03:53,140
twenty twenty years ago we think and we

00:03:50,680 --> 00:03:57,760
just change change the names we've got

00:03:53,140 --> 00:03:59,650
Redux so separate methods to change the

00:03:57,760 --> 00:04:03,280
state from those who query the state

00:03:59,650 --> 00:04:06,430
this is not a new idea and Redux just

00:04:03,280 --> 00:04:08,709
implement this this great book 15 years

00:04:06,430 --> 00:04:13,209
ago enterprise integration patterns if

00:04:08,709 --> 00:04:14,140
you read it you find what I'm ok are you

00:04:13,209 --> 00:04:20,190
just look worried

00:04:14,140 --> 00:04:23,670
want me to this is my good side

00:04:20,190 --> 00:04:26,850
if you read this book you'll find 65

00:04:23,670 --> 00:04:30,950
messaging patterns it will really help

00:04:26,850 --> 00:04:34,500
you to really understand redox and

00:04:30,950 --> 00:04:38,430
basically design your app your modern

00:04:34,500 --> 00:04:44,460
2018 app all right let's finish by this

00:04:38,430 --> 00:04:44,760
picture who knows this person no one me

00:04:44,460 --> 00:04:46,620
either

00:04:44,760 --> 00:04:49,280
is just a random picture of someone who

00:04:46,620 --> 00:04:51,320
looks important let's talk about read X

00:04:49,280 --> 00:04:53,730
[Music]

00:04:51,320 --> 00:04:57,290
always put a picture of someone who

00:04:53,730 --> 00:04:57,290
looks important in your slide it just

00:04:58,280 --> 00:05:02,310
relaxes the fronted oriented lean

00:05:00,630 --> 00:05:05,640
implementation of a messaging system

00:05:02,310 --> 00:05:07,680
don't a treat Redux just as a library

00:05:05,640 --> 00:05:11,700
that's the message from this talk all

00:05:07,680 --> 00:05:13,410
right so we all familiar or who use

00:05:11,700 --> 00:05:13,860
redux familiar with this flow we've got

00:05:13,410 --> 00:05:16,640
your eye

00:05:13,860 --> 00:05:18,600
action creators action middleware right

00:05:16,640 --> 00:05:20,760
unidirectional flow something

00:05:18,600 --> 00:05:23,100
interesting here the only pump and the

00:05:20,760 --> 00:05:25,830
only part in this pattern that accept an

00:05:23,100 --> 00:05:27,810
action and return an action is the

00:05:25,830 --> 00:05:30,330
middle work right

00:05:27,810 --> 00:05:32,900
it's very important so redox is all

00:05:30,330 --> 00:05:35,160
about action processing we care about

00:05:32,900 --> 00:05:37,770
getting an action and dispatching an

00:05:35,160 --> 00:05:39,900
action back and the most interesting

00:05:37,770 --> 00:05:43,380
part of Friedreich's is the middle work

00:05:39,900 --> 00:05:46,500
the rest of the system is just plain

00:05:43,380 --> 00:05:48,150
functions and plain objects when you

00:05:46,500 --> 00:05:50,580
work with lyrics you need to change your

00:05:48,150 --> 00:05:53,310
mind you need to understand that you are

00:05:50,580 --> 00:05:56,340
programming with actions and once we

00:05:53,310 --> 00:06:00,120
understand it it's become much easier to

00:05:56,340 --> 00:06:03,360
implement very complicated data flows if

00:06:00,120 --> 00:06:07,980
we're programming with actions we like

00:06:03,360 --> 00:06:09,840
to to divide categorize our actions

00:06:07,980 --> 00:06:11,910
basically into three different

00:06:09,840 --> 00:06:14,370
categories we've got command actions

00:06:11,910 --> 00:06:16,770
event actions and document actions

00:06:14,370 --> 00:06:18,600
command is an action that ask for

00:06:16,770 --> 00:06:21,600
something it's just the initial action

00:06:18,600 --> 00:06:24,390
that will start a process an event

00:06:21,600 --> 00:06:26,850
action just an event something happened

00:06:24,390 --> 00:06:29,550
in our system maybe we like to know

00:06:26,850 --> 00:06:32,030
about it maybe some other parts of our

00:06:29,550 --> 00:06:33,720
system want to react to this event and

00:06:32,030 --> 00:06:36,720
document action is

00:06:33,720 --> 00:06:38,880
an action and event that has the final

00:06:36,720 --> 00:06:41,760
structure of the data and this is the

00:06:38,880 --> 00:06:46,400
only event in redux that the reducer

00:06:41,760 --> 00:06:49,020
process so if you look at this basic

00:06:46,400 --> 00:06:51,320
flow we want to fetch a collection of

00:06:49,020 --> 00:06:55,020
books and then we want to set our loader

00:06:51,320 --> 00:06:57,120
to truly want to show a spinner and then

00:06:55,020 --> 00:07:00,120
start an API request it can be

00:06:57,120 --> 00:07:02,910
successful we want to set the books in

00:07:00,120 --> 00:07:06,450
our estate shut down the loader all

00:07:02,910 --> 00:07:09,510
right if I take this diagram and use

00:07:06,450 --> 00:07:12,120
this way of thinking and categorize my

00:07:09,510 --> 00:07:14,430
action I think it's become more clearer

00:07:12,120 --> 00:07:17,760
I've got to command action fetch books

00:07:14,430 --> 00:07:20,970
an API request to events and five

00:07:17,760 --> 00:07:23,370
different document action why do I care

00:07:20,970 --> 00:07:25,320
about it because right now just by

00:07:23,370 --> 00:07:29,880
looking at this diagram I can implement

00:07:25,320 --> 00:07:32,310
most of my app do you agree I can create

00:07:29,880 --> 00:07:34,080
all of my actions I'm aware I can create

00:07:32,310 --> 00:07:38,490
all of my action creators right now I

00:07:34,080 --> 00:07:41,220
can implement all the reducers so I can

00:07:38,490 --> 00:07:42,810
define my action types I can create my

00:07:41,220 --> 00:07:46,320
action creators I can implement the

00:07:42,810 --> 00:07:51,990
reducers just by thinking and dividing

00:07:46,320 --> 00:07:55,530
my actions into different types the hard

00:07:51,990 --> 00:07:58,590
part in Redux is how do I get from this

00:07:55,530 --> 00:08:02,190
initial action this command action in

00:07:58,590 --> 00:08:04,860
our example get books how do I get to

00:08:02,190 --> 00:08:07,380
the final action with the collection of

00:08:04,860 --> 00:08:12,270
books that the reducer can put on the

00:08:07,380 --> 00:08:12,990
state all right make sense someone are

00:08:12,270 --> 00:08:16,830
you alive

00:08:12,990 --> 00:08:23,010
did you ate this strange green thing at

00:08:16,830 --> 00:08:29,160
lunch some of you at this summer people

00:08:23,010 --> 00:08:31,500
are missing here all right so let's take

00:08:29,160 --> 00:08:35,310
a look at some some code all right so

00:08:31,500 --> 00:08:41,339
this is a very basic read except let me

00:08:35,310 --> 00:08:43,340
just check out the branch check out your

00:08:41,339 --> 00:08:48,380
fourth check out

00:08:43,340 --> 00:08:51,050
you are not threatening me so if I'm

00:08:48,380 --> 00:08:53,750
implementing this this disinherited to

00:08:51,050 --> 00:08:55,670
just show you let's take a look at this

00:08:53,750 --> 00:09:00,290
action creator for fetching books

00:08:55,670 --> 00:09:03,170
everyone can see the code so I'd like to

00:09:00,290 --> 00:09:05,180
create a modest clinic a prefix for my

00:09:03,170 --> 00:09:07,250
action because I want my logo to make

00:09:05,180 --> 00:09:10,940
sense that's the whole point of using

00:09:07,250 --> 00:09:12,860
react I'm creating constants for my

00:09:10,940 --> 00:09:15,020
action names and I'm going to use these

00:09:12,860 --> 00:09:17,330
prefix and we're going to use it in

00:09:15,020 --> 00:09:21,250
other places as well and my action

00:09:17,330 --> 00:09:23,930
creators will always look like this

00:09:21,250 --> 00:09:27,290
basics of free Docs I'm sure that most

00:09:23,930 --> 00:09:30,080
of you are familiar with this if you're

00:09:27,290 --> 00:09:32,390
doing something more than just returning

00:09:30,080 --> 00:09:35,540
an action in redux you just making

00:09:32,390 --> 00:09:42,800
things more complicated they they really

00:09:35,540 --> 00:09:49,370
should who's using redux thunk don't you

00:09:42,800 --> 00:09:53,330
don't need you alright let's take a look

00:09:49,370 --> 00:09:55,880
at my API actions now this is a great

00:09:53,330 --> 00:09:58,370
pattern I think this is very opinionated

00:09:55,880 --> 00:10:00,910
but I'll show you why in a minute and

00:09:58,370 --> 00:10:06,020
let you know let me know what you think

00:10:00,910 --> 00:10:08,510
the API action types are pretty white

00:10:06,020 --> 00:10:11,660
can we see all right you can see it well

00:10:08,510 --> 00:10:14,330
the TV the API action types I don't use

00:10:11,660 --> 00:10:18,080
any prefix because it's an API request I

00:10:14,330 --> 00:10:22,280
can use it in other context but when I'm

00:10:18,080 --> 00:10:27,860
creating my action I'm delivering a

00:10:22,280 --> 00:10:29,720
prefix the entity name so I'll know to

00:10:27,860 --> 00:10:35,440
make a connection between a generic API

00:10:29,720 --> 00:10:35,440
request through a certain entity alright

00:10:35,680 --> 00:10:42,350
my UI action just set loader I can hard

00:10:40,100 --> 00:10:47,630
code the prefix I don't need to use it

00:10:42,350 --> 00:10:50,860
it will always be a UI my notification

00:10:47,630 --> 00:10:55,670
actions again simple action creator I

00:10:50,860 --> 00:10:57,260
can also implement the reducers I don't

00:10:55,670 --> 00:10:59,180
need to implement reducer for a

00:10:57,260 --> 00:11:03,200
P eiections because this is a command

00:10:59,180 --> 00:11:06,440
action API request and API success an

00:11:03,200 --> 00:11:09,530
API error just events I don't care about

00:11:06,440 --> 00:11:12,410
it in the books actions their care only

00:11:09,530 --> 00:11:15,110
about the set books notification action

00:11:12,410 --> 00:11:19,190
and care about only the set notification

00:11:15,110 --> 00:11:23,140
alright so if I jump to my reducers I

00:11:19,190 --> 00:11:26,690
keep them very very simple and clean and

00:11:23,140 --> 00:11:29,690
I can implement them without even know

00:11:26,690 --> 00:11:33,290
how I'm going to gather who is going to

00:11:29,690 --> 00:11:36,290
dispatch the set books alright did you

00:11:33,290 --> 00:11:38,660
ever all of you that use redux did you

00:11:36,290 --> 00:11:43,010
ever had a situation where a single

00:11:38,660 --> 00:11:46,540
reducer had a switch case for two

00:11:43,010 --> 00:11:51,500
different actions you know what no one

00:11:46,540 --> 00:11:55,520
doing great cool like I care about set

00:11:51,500 --> 00:11:58,340
books and I'm always and also about I

00:11:55,520 --> 00:11:59,960
don't know eight API and or API success

00:11:58,340 --> 00:12:00,560
like two different actions in one

00:11:59,960 --> 00:12:02,570
reducer

00:12:00,560 --> 00:12:06,980
because you want to change different

00:12:02,570 --> 00:12:09,580
places in your state alright so I

00:12:06,980 --> 00:12:12,320
implemented my reducers everything fine

00:12:09,580 --> 00:12:15,220
let's move forward let's talk about how

00:12:12,320 --> 00:12:17,990
do I get from this initial action to my

00:12:15,220 --> 00:12:21,020
document action and this is where the

00:12:17,990 --> 00:12:24,790
middle world kicks in we need to process

00:12:21,020 --> 00:12:27,050
our action with getting initial actions

00:12:24,790 --> 00:12:29,330
finally we want to dispatch the document

00:12:27,050 --> 00:12:33,920
action and we can reprocess action if we

00:12:29,330 --> 00:12:36,200
need for this we've got well-defined

00:12:33,920 --> 00:12:38,060
design patterns because we're

00:12:36,200 --> 00:12:41,750
programming with actions we've got a

00:12:38,060 --> 00:12:43,130
bunch of ideas some of them are very

00:12:41,750 --> 00:12:44,750
simple and straightforward and you

00:12:43,130 --> 00:12:47,930
probably use them without even those

00:12:44,750 --> 00:12:51,320
other just can help you think about your

00:12:47,930 --> 00:12:53,450
flow like I want to filter actions I

00:12:51,320 --> 00:12:54,950
want to map one action to another I want

00:12:53,450 --> 00:13:00,529
to split one action into two other

00:12:54,950 --> 00:13:03,589
actions and so on all right

00:13:00,529 --> 00:13:06,079
I split my middle race into two

00:13:03,589 --> 00:13:08,209
categories I've got my core middle

00:13:06,079 --> 00:13:09,499
world's middle was the processed generic

00:13:08,209 --> 00:13:13,220
application level

00:13:09,499 --> 00:13:18,170
actions like API request is a generic

00:13:13,220 --> 00:13:20,209
application call action I can use it in

00:13:18,170 --> 00:13:22,610
different context but I'm also creating

00:13:20,209 --> 00:13:26,350
middleware specifically for an entity

00:13:22,610 --> 00:13:32,389
for example the books middleware is

00:13:26,350 --> 00:13:37,430
coupled to my fetching books collection

00:13:32,389 --> 00:13:40,730
business logic so if I want to implement

00:13:37,430 --> 00:13:42,620
this and now we've got this diagram and

00:13:40,730 --> 00:13:45,970
I've got those terms and I can identify

00:13:42,620 --> 00:13:47,809
my action it's much easier for me to

00:13:45,970 --> 00:13:49,399
build my middle world

00:13:47,809 --> 00:13:50,870
the first middleware I want to build is

00:13:49,399 --> 00:13:52,670
the books middle world because I want to

00:13:50,870 --> 00:13:56,959
catch the fetch books and I want to

00:13:52,670 --> 00:13:58,339
split filter and split the next

00:13:56,959 --> 00:14:01,249
middleware is the application level

00:13:58,339 --> 00:14:04,850
middle of the API meter world I want to

00:14:01,249 --> 00:14:08,180
catch filter the initial action the API

00:14:04,850 --> 00:14:11,980
request and then dispatch to events API

00:14:08,180 --> 00:14:15,800
success API or maybe API on progress

00:14:11,980 --> 00:14:17,839
back to my books I want to catch API

00:14:15,800 --> 00:14:20,480
success that related to books and split

00:14:17,839 --> 00:14:22,309
it into two document action and then

00:14:20,480 --> 00:14:25,279
send them to to two different reducers

00:14:22,309 --> 00:14:27,529
what the set loader to the UI we do sir

00:14:25,279 --> 00:14:30,019
the set books for the books reducer

00:14:27,529 --> 00:14:32,870
that's how I keep my reducer screen and

00:14:30,019 --> 00:14:36,649
separated all right sounds good

00:14:32,870 --> 00:14:40,970
and I use the entity this entity

00:14:36,649 --> 00:14:43,360
attribute or to keep the context let's

00:14:40,970 --> 00:14:48,550
try to see it in action

00:14:43,360 --> 00:14:52,059
so let's try to do some live coding and

00:14:48,550 --> 00:14:54,559
for this whoo using Visual Studio code

00:14:52,059 --> 00:14:59,209
okay I'm going to open up visual studio

00:14:54,559 --> 00:15:02,230
code and then wait it and continue it a

00:14:59,209 --> 00:15:02,230
real ID

00:15:02,830 --> 00:15:11,830
and this is considered to be actually a

00:15:06,040 --> 00:15:14,050
best practice all right all right so how

00:15:11,830 --> 00:15:17,140
this middleware looks like if I go back

00:15:14,050 --> 00:15:19,690
to my app I want to create let's do it

00:15:17,140 --> 00:15:25,720
fullscreen I want to create my books

00:15:19,690 --> 00:15:29,800
middleware create a new file let's call

00:15:25,720 --> 00:15:31,390
it just books and my middle one will

00:15:29,800 --> 00:15:38,140
look something like this

00:15:31,390 --> 00:15:41,649
books middleware the first line is

00:15:38,140 --> 00:15:44,560
always next action so the first thing

00:15:41,649 --> 00:15:51,880
I'm doing is keeping my logger on the

00:15:44,560 --> 00:16:02,970
right in the right order then action

00:15:51,880 --> 00:16:06,519
type switch action type let's do this I

00:16:02,970 --> 00:16:10,360
want to split the fetch books the iPad

00:16:06,519 --> 00:16:12,279
is that I want to split the get books

00:16:10,360 --> 00:16:14,620
the fetch books the initial action into

00:16:12,279 --> 00:16:17,440
two other actions so I go is going to

00:16:14,620 --> 00:16:22,630
look like this in case of fetch books

00:16:17,440 --> 00:16:27,880
what I want to do is to dispatch and you

00:16:22,630 --> 00:16:30,910
knew you caught me I'm doing angular now

00:16:27,880 --> 00:16:33,730
it's just function a new API request I

00:16:30,910 --> 00:16:38,110
need to pass the body I don't have

00:16:33,730 --> 00:16:40,240
anybody method let's do a get URL I've

00:16:38,110 --> 00:16:43,810
got a constant that hold the URL so

00:16:40,240 --> 00:16:48,690
books and the entity name which is books

00:16:43,810 --> 00:16:55,949
I'm also want to do this dispatch and

00:16:48,690 --> 00:16:55,949
set loader to true

00:16:58,730 --> 00:17:14,579
let's break it alright next in case of

00:17:09,020 --> 00:17:18,870
API success I want to catch API success

00:17:14,579 --> 00:17:23,189
that related to books so I'm going to do

00:17:18,870 --> 00:17:25,079
this API success in case of books API

00:17:23,189 --> 00:17:33,870
success I can set the loader to false

00:17:25,079 --> 00:17:36,240
and I can dispatch a set books set books

00:17:33,870 --> 00:17:41,660
event because now we've got the results

00:17:36,240 --> 00:17:41,660
from the action payload action payload

00:17:45,020 --> 00:17:52,830
and so on and so on because what you

00:17:49,950 --> 00:17:55,559
sing right now this button this is the

00:17:52,830 --> 00:17:59,010
only middleware that actually coupled to

00:17:55,559 --> 00:18:01,290
an entity this is the glue my API

00:17:59,010 --> 00:18:04,500
request middleware knows nothing about

00:18:01,290 --> 00:18:08,030
nothing and I can reuse it and this is

00:18:04,500 --> 00:18:10,650
very similar to to how we define routes

00:18:08,030 --> 00:18:13,740
because when we are working with redux

00:18:10,650 --> 00:18:15,960
we are programming with actions and we

00:18:13,740 --> 00:18:19,980
won we programming with actions we need

00:18:15,960 --> 00:18:24,900
to think about action in action out all

00:18:19,980 --> 00:18:27,360
right let's implement I'm going to take

00:18:24,900 --> 00:18:30,200
these books middle row I'm going to

00:18:27,360 --> 00:18:30,200
throw it right here

00:18:38,559 --> 00:18:45,219
huh visual silikal just opened you say I

00:18:42,340 --> 00:18:47,539
didn't do nothing

00:18:45,219 --> 00:18:48,409
I've got some kind of an arrow but we

00:18:47,539 --> 00:18:53,210
take care of it

00:18:48,409 --> 00:18:57,229
API is not defined in books Jess let's

00:18:53,210 --> 00:19:00,379
take it second API yeah of course what

00:18:57,229 --> 00:19:04,009
is an API I don't know I can't just

00:19:00,379 --> 00:19:12,799
invent stuff so I'm going to import from

00:19:04,009 --> 00:19:15,460
my constant now it's supposed to work so

00:19:12,799 --> 00:19:20,749
when I press this button now you can see

00:19:15,460 --> 00:19:22,759
my initial action fetch it doesn't do

00:19:20,749 --> 00:19:24,289
nothing to the stage you just for me for

00:19:22,759 --> 00:19:27,259
debugging to understand what's going on

00:19:24,289 --> 00:19:30,799
and then an API request with some

00:19:27,259 --> 00:19:34,849
metadata what to perform which method

00:19:30,799 --> 00:19:35,960
URL entity and the set loader set

00:19:34,849 --> 00:19:40,639
loaders set to true

00:19:35,960 --> 00:19:44,960
all right make sense great next now I

00:19:40,639 --> 00:19:46,899
want to implement a call middle world a

00:19:44,960 --> 00:19:50,089
middle read that that I'm going to reuse

00:19:46,899 --> 00:19:52,279
the API middle were just one middle word

00:19:50,089 --> 00:19:55,789
that will take care of all of my API

00:19:52,279 --> 00:20:02,269
actions so let's try to do a middle word

00:19:55,789 --> 00:20:04,700
for this API middleware and in case of

00:20:02,269 --> 00:20:07,929
API middleware I'm only care about one

00:20:04,700 --> 00:20:15,109
action so I can say if action types

00:20:07,929 --> 00:20:22,099
equals to API requests then I'm going to

00:20:15,109 --> 00:20:28,179
fetch let's take the entity name the

00:20:22,099 --> 00:20:32,499
method and what else and say method and

00:20:28,179 --> 00:20:32,499
don't remember what I put on my own

00:20:33,669 --> 00:20:47,120
action payload metadata oh the URL yeah

00:20:44,120 --> 00:20:53,080
the most important part I'm going to

00:20:47,120 --> 00:20:56,930
fetch from this URL using this method

00:20:53,080 --> 00:21:00,340
because it's a plane fetch it returns

00:20:56,930 --> 00:21:05,660
the promise I can catch the response

00:21:00,340 --> 00:21:11,060
return a JSON and then and then and then

00:21:05,660 --> 00:21:18,110
and and and then catch here I've got the

00:21:11,060 --> 00:21:22,610
data so I can call API success and I

00:21:18,110 --> 00:21:26,150
need to pass the data and the entity

00:21:22,610 --> 00:21:32,210
name in case of an error

00:21:26,150 --> 00:21:39,950
I want to dispatch API error and again

00:21:32,210 --> 00:21:44,000
the same pattern the error and the

00:21:39,950 --> 00:21:48,050
entity name so if you take a closer look

00:21:44,000 --> 00:21:50,000
on this code is actually very generic

00:21:48,050 --> 00:21:53,750
very simple very focused

00:21:50,000 --> 00:21:56,090
it doesn't aware of no entity it'll just

00:21:53,750 --> 00:21:58,850
use the entity that I passed to him from

00:21:56,090 --> 00:22:02,360
the action payload to keep the integrity

00:21:58,850 --> 00:22:05,030
of my actions and this middle way will

00:22:02,360 --> 00:22:10,030
handle all of my API calls so I'm going

00:22:05,030 --> 00:22:13,730
to add it to my core API array API

00:22:10,030 --> 00:22:16,700
middle one hopefully there wasn't no

00:22:13,730 --> 00:22:23,870
mistakes and try to dispatch the worst

00:22:16,700 --> 00:22:28,790
mistake because I can say stuck here can

00:22:23,870 --> 00:22:33,659
you spot a problem yeah I didn't choose

00:22:28,790 --> 00:22:39,549
this patch here dispatch

00:22:33,659 --> 00:22:42,489
let's put it let's give it a try I'm

00:22:39,549 --> 00:22:50,200
dispatching I'm still a Venetian maybe

00:22:42,489 --> 00:22:59,009
it's just what happened this part API

00:22:50,200 --> 00:23:01,619
success action middle what I just did

00:22:59,009 --> 00:23:06,879
call me there were API meter were

00:23:01,619 --> 00:23:10,179
alright what we see it works I'm not

00:23:06,879 --> 00:23:11,049
going to waste time because of a typo or

00:23:10,179 --> 00:23:13,929
something alright

00:23:11,049 --> 00:23:16,450
this is how my API Middle's looks like

00:23:13,929 --> 00:23:19,389
now every time you want to you want to

00:23:16,450 --> 00:23:24,220
perform an API request just send an API

00:23:19,389 --> 00:23:27,999
action make sense so actually just by

00:23:24,220 --> 00:23:31,090
looking at this books router action

00:23:27,999 --> 00:23:35,379
router and this generic LP I call middle

00:23:31,090 --> 00:23:38,230
we can understand the pattern it's just

00:23:35,379 --> 00:23:41,440
like a playing ball you catching an

00:23:38,230 --> 00:23:44,049
action and you flowing an action and to

00:23:41,440 --> 00:23:46,600
be successful with Redux the way I see

00:23:44,049 --> 00:23:50,529
it is to understand this concept and

00:23:46,600 --> 00:23:53,350
keep your Redux component very small and

00:23:50,529 --> 00:23:56,379
focused so each reducer care only about

00:23:53,350 --> 00:23:58,299
document action the API middleware and

00:23:56,379 --> 00:24:01,149
the rest of my core API me the rest care

00:23:58,299 --> 00:24:03,820
about specific actions and I'm not

00:24:01,149 --> 00:24:06,700
coupling nothing the only middle road

00:24:03,820 --> 00:24:15,929
the knows about a specific flow is my

00:24:06,700 --> 00:24:15,929
books middle all right let me switch

00:24:29,720 --> 00:24:35,309
so this is the complete flow always the

00:24:33,900 --> 00:24:38,040
complete flow there is an arrow which is

00:24:35,309 --> 00:24:41,220
good I've got a fetch request related to

00:24:38,040 --> 00:24:44,550
books then an API request asset loader

00:24:41,220 --> 00:24:48,120
we change the state an API error event

00:24:44,550 --> 00:24:52,140
create notification related to books set

00:24:48,120 --> 00:24:54,660
notification only document only document

00:24:52,140 --> 00:24:56,370
action changed the actual state set

00:24:54,660 --> 00:24:58,230
loader because I want to shut down the

00:24:56,370 --> 00:25:00,840
loader and after a few seconds I'm

00:24:58,230 --> 00:25:02,550
removing the notification maybe when I

00:25:00,840 --> 00:25:05,550
build a UI for this it will be like a

00:25:02,550 --> 00:25:08,280
toast message so just by reading the

00:25:05,550 --> 00:25:09,990
logs I can understand everything in my

00:25:08,280 --> 00:25:12,809
weed except and I've seen a lot of

00:25:09,990 --> 00:25:15,059
lyrics based up then when you open the

00:25:12,809 --> 00:25:18,660
logger you just say random names you

00:25:15,059 --> 00:25:20,880
don't even know which one which which

00:25:18,660 --> 00:25:22,890
action was the initial election which

00:25:20,880 --> 00:25:25,890
entity related to that maybe you need to

00:25:22,890 --> 00:25:30,150
to deep dive and dig inside your action

00:25:25,890 --> 00:25:31,620
metadata the way I see it this is redux

00:25:30,150 --> 00:25:34,140
this is the pattern this is walking with

00:25:31,620 --> 00:25:36,929
action I want to be to understand how it

00:25:34,140 --> 00:25:38,670
works just by watching the logs and of

00:25:36,929 --> 00:25:42,420
course I can do all this time traveling

00:25:38,670 --> 00:25:45,540
so don't be afraid to dispatch event

00:25:42,420 --> 00:25:49,650
like API error that doesn't change this

00:25:45,540 --> 00:25:52,610
state but enable other parts to react to

00:25:49,650 --> 00:25:58,440
this event this is your extension point

00:25:52,610 --> 00:26:06,840
all right let's go back to the slide so

00:25:58,440 --> 00:26:09,540
in this point of time we looked at the

00:26:06,840 --> 00:26:11,760
filter map and split which are the most

00:26:09,540 --> 00:26:14,010
common patterns when you're building

00:26:11,760 --> 00:26:16,620
your middle walls and we use the

00:26:14,010 --> 00:26:19,050
integrity key pattern which is to pass

00:26:16,620 --> 00:26:22,830
the entity and keep everything in

00:26:19,050 --> 00:26:25,710
context now we can add more and more

00:26:22,830 --> 00:26:28,410
middle words to our app part of them

00:26:25,710 --> 00:26:31,410
will be core part of them will be very

00:26:28,410 --> 00:26:33,270
specific like the multi middleware which

00:26:31,410 --> 00:26:34,560
cept an array of actions and then

00:26:33,270 --> 00:26:37,260
dispatched them one by one

00:26:34,560 --> 00:26:39,810
a local meter well if we like this is

00:26:37,260 --> 00:26:43,230
the world's most famous Miller was in in

00:26:39,810 --> 00:26:46,110
react and we can implement some

00:26:43,230 --> 00:26:48,780
transformation patterns like the

00:26:46,110 --> 00:26:51,510
enriched and normalize all of those

00:26:48,780 --> 00:26:55,470
patterns are related only to middle

00:26:51,510 --> 00:26:56,310
words because the rest of the component

00:26:55,470 --> 00:27:00,600
in Redux

00:26:56,310 --> 00:27:04,520
are simple code which deals only with

00:27:00,600 --> 00:27:10,020
simple functions and simple objects I

00:27:04,520 --> 00:27:14,130
want to show you the full flow now so

00:27:10,020 --> 00:27:15,930
back to my app I've got some core middle

00:27:14,130 --> 00:27:18,660
words the API middleware we seen it

00:27:15,930 --> 00:27:22,770
except type a request and the action

00:27:18,660 --> 00:27:26,400
that goes out API successor API ello my

00:27:22,770 --> 00:27:30,090
normalized middleware do something very

00:27:26,400 --> 00:27:32,370
tricky if there is a set event number

00:27:30,090 --> 00:27:34,860
using action type includes because they

00:27:32,370 --> 00:27:37,920
don't care which entity is related to I

00:27:34,860 --> 00:27:40,830
care about events that start with set

00:27:37,920 --> 00:27:43,560
because those event are document events

00:27:40,830 --> 00:27:45,810
those events contain the data that the

00:27:43,560 --> 00:27:48,480
reducer is going to take and put on my

00:27:45,810 --> 00:27:52,530
state so I'm catching all the all my

00:27:48,480 --> 00:27:54,960
document action I'm checking if on the

00:27:52,530 --> 00:27:58,020
action payload metadata I've got some

00:27:54,960 --> 00:28:02,220
some indication that this data need to

00:27:58,020 --> 00:28:04,680
be normalized if so I'm taking the data

00:28:02,220 --> 00:28:08,640
structure and I'm right here I'm convent

00:28:04,680 --> 00:28:11,760
converting an array to an object so this

00:28:08,640 --> 00:28:14,010
middle will normalize the data and there

00:28:11,760 --> 00:28:16,560
is a name for this this is a transform

00:28:14,010 --> 00:28:20,250
pattern took one action and produce

00:28:16,560 --> 00:28:24,570
another I'm also firing an event and

00:28:20,250 --> 00:28:27,930
notify my app that that the data was

00:28:24,570 --> 00:28:32,640
normalized if we go back to the logger

00:28:27,930 --> 00:28:36,480
and dispatch this action we just need to

00:28:32,640 --> 00:28:41,240
get rid of this error let's go to my

00:28:36,480 --> 00:28:41,240
constant URLs

00:28:42,950 --> 00:28:48,140
back here

00:28:44,460 --> 00:28:52,710
a man dispatching you can see right here

00:28:48,140 --> 00:29:01,140
API success normalize data and then

00:28:52,710 --> 00:29:04,100
slide the data alright they enrich the

00:29:01,140 --> 00:29:07,410
enriched action it means that when I'm

00:29:04,100 --> 00:29:11,040
dispatching the set notification action

00:29:07,410 --> 00:29:12,540
from my books middleware I don't want to

00:29:11,040 --> 00:29:15,210
care about how these notifications

00:29:12,540 --> 00:29:18,150
created and how it's going to be removed

00:29:15,210 --> 00:29:20,880
so I created this generic middleware

00:29:18,150 --> 00:29:23,820
the notification middleware and here I'm

00:29:20,880 --> 00:29:26,240
catching the create notification and I'm

00:29:23,820 --> 00:29:29,929
enriching the data what's happened

00:29:26,240 --> 00:29:34,830
that's it when the time over you just

00:29:29,929 --> 00:29:38,340
you want to kick me off the stage I've

00:29:34,830 --> 00:29:40,650
got two more minutes just for this I'm

00:29:38,340 --> 00:29:43,830
catching the create notification and

00:29:40,650 --> 00:29:46,140
then adding adding some data and enrich

00:29:43,830 --> 00:29:50,820
the action payload so I'm adding an ID

00:29:46,140 --> 00:29:54,360
and adding basically quake in creating

00:29:50,820 --> 00:29:55,980
an object and then set timeout and after

00:29:54,360 --> 00:29:59,660
a few seconds I'm removing the

00:29:55,980 --> 00:30:02,400
notification but the books middle world

00:29:59,660 --> 00:30:05,480
doesn't know nothing about it

00:30:02,400 --> 00:30:08,669
it's just fire create notification and

00:30:05,480 --> 00:30:12,240
another part of the system will deal

00:30:08,669 --> 00:30:13,530
with it because to success with Redux we

00:30:12,240 --> 00:30:16,230
need to understand that we are

00:30:13,530 --> 00:30:19,410
programming with actions so action in

00:30:16,230 --> 00:30:21,030
action out and the rest our simple

00:30:19,410 --> 00:30:23,370
functions that know how to catch a

00:30:21,030 --> 00:30:25,440
specific action what to do with it and

00:30:23,370 --> 00:30:34,850
which action need to be dispatched in

00:30:25,440 --> 00:30:34,850
response alright back to our slides

00:30:37,400 --> 00:30:44,370
so right now I've got an action I've got

00:30:41,280 --> 00:30:48,810
an array of application middle worse and

00:30:44,370 --> 00:30:50,880
then array of core middle worse so my

00:30:48,810 --> 00:30:53,100
action my initial actions get processed

00:30:50,880 --> 00:30:55,820
until the final document action dispatch

00:30:53,100 --> 00:31:00,240
and the reducers take care of it

00:30:55,820 --> 00:31:02,040
let's summarize reacts is the front-end

00:31:00,240 --> 00:31:03,930
oriented lean implementation of a

00:31:02,040 --> 00:31:06,870
full-blown messaging system patterns

00:31:03,930 --> 00:31:09,360
that we took from the server side

00:31:06,870 --> 00:31:11,730
why because single page from that

00:31:09,360 --> 00:31:13,410
application become complicated we want

00:31:11,730 --> 00:31:16,050
to learn how to do complicated stuff we

00:31:13,410 --> 00:31:18,750
can look off of what we did for 20 years

00:31:16,050 --> 00:31:22,200
on the server side make sense learn

00:31:18,750 --> 00:31:23,970
about those design patterns understand

00:31:22,200 --> 00:31:27,030
that Redux is much more than just a

00:31:23,970 --> 00:31:31,140
library that works for me and you be

00:31:27,030 --> 00:31:33,180
able to think about and use a well-known

00:31:31,140 --> 00:31:37,110
design patterns of working with events

00:31:33,180 --> 00:31:39,480
and use terms to describe the flow that

00:31:37,110 --> 00:31:42,030
eventually will help you use Redux

00:31:39,480 --> 00:31:44,220
in a very simple way because Redux

00:31:42,030 --> 00:31:46,110
doesn't have to be complicated you can

00:31:44,220 --> 00:31:48,120
take this demo and share the code with

00:31:46,110 --> 00:31:50,640
you and you see that it's actually a

00:31:48,120 --> 00:31:52,710
very complex infrastructure to build a

00:31:50,640 --> 00:31:56,850
very complex data flow and I'm not using

00:31:52,710 --> 00:31:59,580
any of those fancy reactor found a

00:31:56,850 --> 00:32:04,050
reductive encore or observables or

00:31:59,580 --> 00:32:06,030
whatever just plain cold alright you can

00:32:04,050 --> 00:32:08,280
use those support ins library I use them

00:32:06,030 --> 00:32:11,010
sometimes when I need they just help you

00:32:08,280 --> 00:32:14,130
to implement those patterns I highly

00:32:11,010 --> 00:32:21,450
recommend you to check out this book is

00:32:14,130 --> 00:32:23,100
old it's got the most ugly cover but it

00:32:21,450 --> 00:32:27,240
helps you a few hundred stand the

00:32:23,100 --> 00:32:29,940
pattern if you liked my opinion you can

00:32:27,240 --> 00:32:31,860
check out my book is not ready yet but

00:32:29,940 --> 00:32:35,310
you can put your email and we'll send

00:32:31,860 --> 00:32:37,050
you a free copy once it's ready and all

00:32:35,310 --> 00:32:40,170
those stuff and those ideas will be

00:32:37,050 --> 00:32:42,810
there if you like you can check my other

00:32:40,170 --> 00:32:47,610
books like vs cold why are you doing it

00:32:42,810 --> 00:32:50,190
to yourself or how to live with PHP if

00:32:47,610 --> 00:32:51,299
you're anyway I want to thank you very

00:32:50,190 --> 00:32:54,980
much if you've got any other questions

00:32:51,299 --> 00:32:57,990
I'll be outside near the coffee machine

00:32:54,980 --> 00:33:00,590
I think yeah thank you

00:32:57,990 --> 00:33:00,590
thank you

00:33:00,750 --> 00:33:04,329
[Music]

00:33:01,150 --> 00:33:04,329
[Applause]

00:33:07,010 --> 00:33:10,130

YouTube URL: https://www.youtube.com/watch?v=5gl3cCB_26M


