Title: A Guide to Instant Loading Angular Apps - Mashhood Rastgar | JSHeroes 2018
Publication date: 2018-05-02
Playlist: JSHeroes 2018
Description: 
	Minimizing first time to render is one of the bigger challenges in Angular. This talks covers several tips and tricks you can do to get those bundle sizes small and loading times to a minimum!
Captions: 
	00:00:01,840 --> 00:00:04,899
[Music]

00:00:11,599 --> 00:00:19,260
hello everyone excited to be here this

00:00:16,650 --> 00:00:22,980
is my first time in Romania having a lot

00:00:19,260 --> 00:00:25,740
of fun it's it's super amazing so I'm

00:00:22,980 --> 00:00:28,260
here today to share with you a problem

00:00:25,740 --> 00:00:30,359
that I personally keep running into and

00:00:28,260 --> 00:00:33,090
a lot of people around me keep running

00:00:30,359 --> 00:00:35,880
into they talk about me a lot with they

00:00:33,090 --> 00:00:38,670
talk about on this with me a lot

00:00:35,880 --> 00:00:41,190
so just to just to kick off with a few

00:00:38,670 --> 00:00:43,700
questions first how many people here are

00:00:41,190 --> 00:00:46,320
front-end developers show of hands

00:00:43,700 --> 00:00:49,289
alright most of you of course JavaScript

00:00:46,320 --> 00:00:52,440
right how many of you have had the

00:00:49,289 --> 00:00:56,520
problem of your app loading too slowly

00:00:52,440 --> 00:00:59,070
for the first time right almost everyone

00:00:56,520 --> 00:01:01,410
because we are all looking for smaller

00:00:59,070 --> 00:01:04,320
apps now when are you when you're using

00:01:01,410 --> 00:01:08,490
something like angular or react of UGS

00:01:04,320 --> 00:01:10,619
your bundle size tends to blow up

00:01:08,490 --> 00:01:12,930
exponentially suddenly and before you

00:01:10,619 --> 00:01:16,229
know it you have like a 3 MB or 5 MB

00:01:12,930 --> 00:01:19,140
vendor bundle and it's taking 30 seconds

00:01:16,229 --> 00:01:21,689
to to load your app and effectively this

00:01:19,140 --> 00:01:24,540
talk is going to be around what can you

00:01:21,689 --> 00:01:26,670
do to effectively reduce that bundle

00:01:24,540 --> 00:01:28,320
size and what are other different

00:01:26,670 --> 00:01:31,290
strategies that we can use to make a

00:01:28,320 --> 00:01:34,439
better experience for our users

00:01:31,290 --> 00:01:37,170
so as introduced my name is Massoud and

00:01:34,439 --> 00:01:40,200
I'm the technical lead editorship Ricker

00:01:37,170 --> 00:01:41,939
ship is a JavaScript consultancy so

00:01:40,200 --> 00:01:44,040
we're working with a lot of different

00:01:41,939 --> 00:01:47,040
projects mostly on angular and node.js

00:01:44,040 --> 00:01:49,170
which is why I get to see a lot of

00:01:47,040 --> 00:01:51,149
different angular apps that have this

00:01:49,170 --> 00:01:54,420
particular problem and we're trying to

00:01:51,149 --> 00:01:56,610
help our clients fix it I'm fairly

00:01:54,420 --> 00:01:58,740
active in Karachi the communities over

00:01:56,610 --> 00:02:02,100
there we have angular Pakistan which is

00:01:58,740 --> 00:02:04,860
obviously the the core angular angular

00:02:02,100 --> 00:02:08,039
community over there a docker and local

00:02:04,860 --> 00:02:11,610
GDG chapters and of course I'm also the

00:02:08,039 --> 00:02:13,580
Google developer expert for web and

00:02:11,610 --> 00:02:17,930
angular

00:02:13,580 --> 00:02:20,629
so on average I like to know from you

00:02:17,930 --> 00:02:23,660
guys how long does it take for you guys

00:02:20,629 --> 00:02:30,970
to load your app for the first time on a

00:02:23,660 --> 00:02:30,970
browser any any suggestions 30 seconds

00:02:33,190 --> 00:02:39,560
well it's it's so the average is is

00:02:36,950 --> 00:02:44,360
actually not not that good it's about 16

00:02:39,560 --> 00:02:47,030
seconds for for first view right and it

00:02:44,360 --> 00:02:51,290
takes about 20 seconds to fully load it

00:02:47,030 --> 00:02:54,860
up on average we're shipping about 4 and

00:02:51,290 --> 00:02:56,780
20 KB's of JavaScript I feel if you're

00:02:54,860 --> 00:03:00,560
using like a like a framework that's

00:02:56,780 --> 00:03:02,480
usually a bit higher but effectively

00:03:00,560 --> 00:03:04,250
these numbers are not looking good

00:03:02,480 --> 00:03:06,590
especially when when you read something

00:03:04,250 --> 00:03:09,290
like if the user doesn't see anything

00:03:06,590 --> 00:03:11,780
for 3 seconds they kind of leave the

00:03:09,290 --> 00:03:16,880
page so nobody obviously waiting for 16

00:03:11,780 --> 00:03:18,920
seconds for your app to load so we

00:03:16,880 --> 00:03:20,900
understand that we want to make this

00:03:18,920 --> 00:03:24,069
experience better but we also want to

00:03:20,900 --> 00:03:26,840
understand where is the exact bottleneck

00:03:24,069 --> 00:03:29,930
so obviously when you initially think

00:03:26,840 --> 00:03:32,150
about it you might think that hey my

00:03:29,930 --> 00:03:34,130
button size is big so it takes time a

00:03:32,150 --> 00:03:37,130
lot of time to download which is why

00:03:34,130 --> 00:03:40,489
it's slow but that's not necessarily the

00:03:37,130 --> 00:03:44,810
case so this is a chart here that shows

00:03:40,489 --> 00:03:48,769
that between desktop and mobile there's

00:03:44,810 --> 00:03:52,280
a 5-time difference in just compiling

00:03:48,769 --> 00:03:53,750
JavaScript so we're not just fetching it

00:03:52,280 --> 00:03:56,180
we're not executing it I'm not doing

00:03:53,750 --> 00:03:57,650
anything we're just compiling the

00:03:56,180 --> 00:04:00,079
JavaScript that has been received and

00:03:57,650 --> 00:04:03,500
preparing it for execution

00:04:00,079 --> 00:04:04,400
and so this is for in 1 MB file and if

00:04:03,500 --> 00:04:06,530
you look at a slightly different

00:04:04,400 --> 00:04:08,900
perspective if you're running on a

00:04:06,530 --> 00:04:10,940
laptop the the one at the bottom is

00:04:08,900 --> 00:04:13,430
MacBook Pro and that one on top is the

00:04:10,940 --> 00:04:15,230
first gen Moto G there's a five-time

00:04:13,430 --> 00:04:17,979
difference and it's two and a half

00:04:15,230 --> 00:04:20,810
seconds just for compiling your

00:04:17,979 --> 00:04:22,460
JavaScript so that's insane two and a

00:04:20,810 --> 00:04:23,720
half seconds the users just waiting

00:04:22,460 --> 00:04:25,700
looking at a bank blank screen

00:04:23,720 --> 00:04:26,449
potentially waiting for your JavaScript

00:04:25,700 --> 00:04:31,280
to

00:04:26,449 --> 00:04:33,930
compile so this is this is a problem and

00:04:31,280 --> 00:04:36,650
faster internet connections 5g is not

00:04:33,930 --> 00:04:39,120
going to fix this obviously over time

00:04:36,650 --> 00:04:41,370
our mobile processors will probably get

00:04:39,120 --> 00:04:43,470
better and faster the technologies

00:04:41,370 --> 00:04:45,870
itself will get better but right now

00:04:43,470 --> 00:04:49,169
this is a major problem and this is what

00:04:45,870 --> 00:04:51,150
we need to fix so effectively

00:04:49,169 --> 00:04:53,610
with a basic understanding of the

00:04:51,150 --> 00:04:55,620
problem we understand that we can use

00:04:53,610 --> 00:04:57,150
think things like gzip to make our

00:04:55,620 --> 00:04:59,400
button size smaller but how do we

00:04:57,150 --> 00:05:02,539
actually make it smaller and that's what

00:04:59,400 --> 00:05:08,009
we're gonna focus on in the next slides

00:05:02,539 --> 00:05:10,380
so some of these points are gonna relate

00:05:08,009 --> 00:05:12,690
specifically to angular but you'll

00:05:10,380 --> 00:05:14,250
notice that most of them are actually a

00:05:12,690 --> 00:05:16,500
bit more generic so they can be applied

00:05:14,250 --> 00:05:17,340
to any framework and I feel this is one

00:05:16,500 --> 00:05:19,289
of them

00:05:17,340 --> 00:05:21,690
so as frameworks improve they're

00:05:19,289 --> 00:05:24,449
constantly working towards making them

00:05:21,690 --> 00:05:26,970
more performant and more optimized and

00:05:24,449 --> 00:05:29,580
angular specially has promised this one

00:05:26,970 --> 00:05:33,300
and they have superbly delivered this on

00:05:29,580 --> 00:05:36,060
every major release and the latest

00:05:33,300 --> 00:05:38,159
release that we have is upcoming we were

00:05:36,060 --> 00:05:40,680
hoping to have it out already but it's

00:05:38,159 --> 00:05:44,159
just a bit delayed hopefully it's gonna

00:05:40,680 --> 00:05:46,919
be out in in a week or so and so angular

00:05:44,159 --> 00:05:49,139
has your core library that you use and

00:05:46,919 --> 00:05:52,110
it also has this built tool called

00:05:49,139 --> 00:05:54,900
angular CLI that helps you scaffold and

00:05:52,110 --> 00:05:59,639
manage your build pipeline and if you

00:05:54,900 --> 00:06:01,380
update both of your tools to the Mac so

00:05:59,639 --> 00:06:05,490
your angular CLI will help you update

00:06:01,380 --> 00:06:07,650
your app itself then you get a few new

00:06:05,490 --> 00:06:10,020
features that will help you reduce your

00:06:07,650 --> 00:06:11,550
bundle size automatically so now this is

00:06:10,020 --> 00:06:14,669
specifically just for the new version

00:06:11,550 --> 00:06:16,320
coming up every six months they they

00:06:14,669 --> 00:06:18,440
release a new version every time there's

00:06:16,320 --> 00:06:21,509
some pretty awesome stuff that comes in

00:06:18,440 --> 00:06:22,919
at this time thanks to web pack for

00:06:21,509 --> 00:06:25,919
their they've been some really awesome

00:06:22,919 --> 00:06:27,930
optimizations in there where I've seen

00:06:25,919 --> 00:06:30,210
anywhere between 10 to 20 percent

00:06:27,930 --> 00:06:34,500
decrees and bundle size and the projects

00:06:30,210 --> 00:06:36,630
that I've been working on are xj6 again

00:06:34,500 --> 00:06:38,849
not doesn't look like it's a it's a

00:06:36,630 --> 00:06:40,110
bundle sized thing but actually they

00:06:38,849 --> 00:06:41,940
refactored there

00:06:40,110 --> 00:06:44,070
sporting strategy and that has helped

00:06:41,940 --> 00:06:47,760
out not including operators that you're

00:06:44,070 --> 00:06:49,790
not using crease shakable services you

00:06:47,760 --> 00:06:52,830
don't strip out stuff you don't need

00:06:49,790 --> 00:06:54,930
support for basil so that you can do

00:06:52,830 --> 00:06:57,900
more advanced compliation things and

00:06:54,930 --> 00:07:02,370
better integration with service worker

00:06:57,900 --> 00:07:04,350
something we'll talk about in a bit so

00:07:02,370 --> 00:07:08,640
how many angular developers do we have

00:07:04,350 --> 00:07:12,960
in the room here okay and how many of

00:07:08,640 --> 00:07:17,220
you guys are using a OT well fewer

00:07:12,960 --> 00:07:19,800
interesting so I think IOT came out with

00:07:17,220 --> 00:07:22,230
angular 2 and I feel that this is like

00:07:19,800 --> 00:07:25,010
everybody should be using a OT now

00:07:22,230 --> 00:07:27,960
because it's it's like obviously use it

00:07:25,010 --> 00:07:31,380
effectively what this is doing is its

00:07:27,960 --> 00:07:32,460
stripping out so when angular is when

00:07:31,380 --> 00:07:35,070
you when you when you want to run

00:07:32,460 --> 00:07:38,400
angular you compile your angular code in

00:07:35,070 --> 00:07:42,390
templates and then it runs in the

00:07:38,400 --> 00:07:45,030
browser a ot compiles them in the build

00:07:42,390 --> 00:07:47,790
process and just ships the optimised

00:07:45,030 --> 00:07:49,890
version to you on the browser so that

00:07:47,790 --> 00:07:52,230
obviously means it's a faster boot time

00:07:49,890 --> 00:07:54,180
and it's a smaller bundle so this has

00:07:52,230 --> 00:07:56,730
been there for a while

00:07:54,180 --> 00:08:00,690
in anger v they introduced something

00:07:56,730 --> 00:08:03,510
called build optimizer and this was

00:08:00,690 --> 00:08:07,850
another library written it's a plugin

00:08:03,510 --> 00:08:11,880
for web web pack that does optimizations

00:08:07,850 --> 00:08:15,150
specifically for angular and is used by

00:08:11,880 --> 00:08:17,760
angular CLI now this is if you're using

00:08:15,150 --> 00:08:20,250
angular 5 which is the latest version

00:08:17,760 --> 00:08:23,420
you are already using this because this

00:08:20,250 --> 00:08:26,550
gets enabled automatically using äôt so

00:08:23,420 --> 00:08:28,920
as you'll notice a pattern here angler

00:08:26,550 --> 00:08:30,570
is doing a lot of stuff but and they're

00:08:28,920 --> 00:08:32,490
doing it in a way that you don't have to

00:08:30,570 --> 00:08:34,320
do anything you just need to make sure

00:08:32,490 --> 00:08:36,510
that you're using their tools and use it

00:08:34,320 --> 00:08:41,340
improperly and you're gonna get the best

00:08:36,510 --> 00:08:44,130
most optimized app that is available for

00:08:41,340 --> 00:08:45,750
those of us who have more enterprising

00:08:44,130 --> 00:08:48,270
software we need a lot of custom stuff

00:08:45,750 --> 00:08:50,640
maybe we can figure out to create a

00:08:48,270 --> 00:08:54,010
plugin that will super optimize our apps

00:08:50,640 --> 00:08:56,380
we can eject from angular CLI and

00:08:54,010 --> 00:08:58,870
we can change the config in any way we

00:08:56,380 --> 00:09:00,850
want that's available personally i have

00:08:58,870 --> 00:09:03,430
not been able to i've not needed to do

00:09:00,850 --> 00:09:06,790
that yet because essentially angler has

00:09:03,430 --> 00:09:08,770
been doing good job so far and finally

00:09:06,790 --> 00:09:10,930
this is something super exciting that's

00:09:08,770 --> 00:09:16,300
it's gonna be actually available in

00:09:10,930 --> 00:09:19,180
angular 7 but it's already available

00:09:16,300 --> 00:09:21,220
under a flag in angular 6 and they're

00:09:19,180 --> 00:09:23,200
essentially changing the way they render

00:09:21,220 --> 00:09:26,170
the templates and that effectively

00:09:23,200 --> 00:09:27,970
effectively means that right now if you

00:09:26,170 --> 00:09:31,360
build a hello world app it takes about

00:09:27,970 --> 00:09:35,820
35 kb compressed it's the button size

00:09:31,360 --> 00:09:39,270
and that comes down to a 3.7 kb

00:09:35,820 --> 00:09:41,590
compressed when you use this ib renderer

00:09:39,270 --> 00:09:44,140
somebody did a to-do app and that was

00:09:41,590 --> 00:09:46,450
twelve point seven kb it's not ready for

00:09:44,140 --> 00:09:48,580
prime time but this is like again

00:09:46,450 --> 00:09:50,800
promising technology that's going to

00:09:48,580 --> 00:09:55,750
help us in the coming months to reduce

00:09:50,800 --> 00:09:59,140
our bond size even further so once

00:09:55,750 --> 00:10:02,230
you've done your build stuff you start

00:09:59,140 --> 00:10:04,600
looking at your code and one of the more

00:10:02,230 --> 00:10:06,850
obvious choices that you have in your

00:10:04,600 --> 00:10:10,150
code is that you started using lazy

00:10:06,850 --> 00:10:12,940
loading for those who are not aware lazy

00:10:10,150 --> 00:10:14,770
loading is effectively only downloading

00:10:12,940 --> 00:10:17,230
the resources that you want for that

00:10:14,770 --> 00:10:20,140
particular view so if i'm downloading

00:10:17,230 --> 00:10:22,270
the login page i should just have the

00:10:20,140 --> 00:10:24,220
authentication module downloaded not the

00:10:22,270 --> 00:10:25,240
dashboard module because i don't need

00:10:24,220 --> 00:10:28,660
that

00:10:25,240 --> 00:10:30,100
and again angular here one of the things

00:10:28,660 --> 00:10:33,250
i love about is how everything is just

00:10:30,100 --> 00:10:35,050
built into it all you have to do is

00:10:33,250 --> 00:10:37,360
create your modules what you do when

00:10:35,050 --> 00:10:39,550
you're making angular apps and then just

00:10:37,360 --> 00:10:41,140
reference them properly using this load

00:10:39,550 --> 00:10:44,920
children property in there in the router

00:10:41,140 --> 00:10:46,030
and this handles everything for you like

00:10:44,920 --> 00:10:48,520
literally everything

00:10:46,030 --> 00:10:50,680
it will there'll be some edge cases that

00:10:48,520 --> 00:10:53,650
you might have to check i haven't come

00:10:50,680 --> 00:10:56,620
across many of those but effectively

00:10:53,650 --> 00:10:58,360
it's gonna build the chunks for you it's

00:10:56,620 --> 00:11:01,300
gonna configure angular in a way so it

00:10:58,360 --> 00:11:03,700
knows what to fetch when to fetch and i

00:11:01,300 --> 00:11:07,090
worked with an enterprise app where we

00:11:03,700 --> 00:11:07,870
had very several big modules and we went

00:11:07,090 --> 00:11:11,200
from a fire

00:11:07,870 --> 00:11:12,910
Mb winner file - just 200 KB for for the

00:11:11,200 --> 00:11:19,180
login page so that was that was a big

00:11:12,910 --> 00:11:21,790
one once you're done just going through

00:11:19,180 --> 00:11:24,910
your code then you want to start

00:11:21,790 --> 00:11:27,370
analyzing your bundles to see how else

00:11:24,910 --> 00:11:29,440
can you improve how else can you what

00:11:27,370 --> 00:11:32,470
else can you take out of the bundles to

00:11:29,440 --> 00:11:34,420
make them smaller and it's not obvious

00:11:32,470 --> 00:11:36,460
right away but there might be things

00:11:34,420 --> 00:11:39,690
that you added before but you're not

00:11:36,460 --> 00:11:43,060
using anymore or it could be some

00:11:39,690 --> 00:11:46,360
incorrect imports that you did that got

00:11:43,060 --> 00:11:48,670
included which resulted in bloating of

00:11:46,360 --> 00:11:50,560
your of your bundle so I've there are

00:11:48,670 --> 00:11:54,160
many tools I mentioned - over here which

00:11:50,560 --> 00:11:57,279
I usually use in my applications so one

00:11:54,160 --> 00:11:59,710
is part of angular CLI stats Jason true

00:11:57,279 --> 00:12:02,640
you just use this flag when you're doing

00:11:59,710 --> 00:12:05,470
your build and it will dump a JSON file

00:12:02,640 --> 00:12:09,010
and that JSON file can be uploaded into

00:12:05,470 --> 00:12:14,050
webpack github io / analyze and it's

00:12:09,010 --> 00:12:15,640
gonna give you this beautiful dashboard

00:12:14,050 --> 00:12:18,070
that can show you all your dependencies

00:12:15,640 --> 00:12:20,709
and how they're working together all the

00:12:18,070 --> 00:12:22,300
modules and you can just play around

00:12:20,709 --> 00:12:24,130
with it check the sizes see if

00:12:22,300 --> 00:12:26,400
everything makes sense and maybe strip

00:12:24,130 --> 00:12:28,779
out something that you don't want

00:12:26,400 --> 00:12:31,779
there's another tool called source map

00:12:28,779 --> 00:12:33,670
Explorer there is also one for web pack

00:12:31,779 --> 00:12:36,279
webpack bundle analyzer does this

00:12:33,670 --> 00:12:39,459
relatively the same thing and this takes

00:12:36,279 --> 00:12:43,959
your bundle and essentially visual

00:12:39,459 --> 00:12:48,040
visualizes all that is in there and in

00:12:43,959 --> 00:12:49,630
this particular example the thing that I

00:12:48,040 --> 00:12:51,820
came across there are two main things

00:12:49,630 --> 00:12:54,220
that when I saw this bundle I saw I was

00:12:51,820 --> 00:12:56,200
like I'd messed up somewhere so on the

00:12:54,220 --> 00:13:03,970
right side you can see there's there's

00:12:56,200 --> 00:13:06,100
this huge rectangle that belongs to rxjs

00:13:03,970 --> 00:13:07,990
so I talked about alright rxjs before

00:13:06,100 --> 00:13:10,089
and what's happening here is all those

00:13:07,990 --> 00:13:11,830
little boxes inside it an extreme right

00:13:10,089 --> 00:13:13,779
they're all different operators that are

00:13:11,830 --> 00:13:16,300
being included and I know in this

00:13:13,779 --> 00:13:18,940
application I just use two operators so

00:13:16,300 --> 00:13:21,400
this means I messed up the import

00:13:18,940 --> 00:13:24,250
somewhere and that has included

00:13:21,400 --> 00:13:27,280
all the operators of rxjs into this

00:13:24,250 --> 00:13:29,680
bundle and that's 300 KB that I can now

00:13:27,280 --> 00:13:31,450
save by simply making sure that my

00:13:29,680 --> 00:13:33,250
imports are correct

00:13:31,450 --> 00:13:36,790
similarly at the bottom here on the Left

00:13:33,250 --> 00:13:39,040
you'll see moment GS and moment GS is

00:13:36,790 --> 00:13:41,710
also including quite a few things and

00:13:39,040 --> 00:13:44,410
it's worth another 300 KB these our

00:13:41,710 --> 00:13:48,100
moment look here things that again I'm

00:13:44,410 --> 00:13:51,520
not using in my app and I just stripped

00:13:48,100 --> 00:13:54,700
them out and within like 15 20 minutes I

00:13:51,520 --> 00:13:57,250
was able to save 600 KB on this

00:13:54,700 --> 00:14:02,400
particular bundle by just having a quick

00:13:57,250 --> 00:14:05,830
look so tools like this are useful and

00:14:02,400 --> 00:14:08,010
effectively they help you give a get

00:14:05,830 --> 00:14:12,210
they help you get a high-level view of

00:14:08,010 --> 00:14:12,210
what's happening in your application

00:14:12,960 --> 00:14:17,920
once you've done optimizing your bundle

00:14:16,360 --> 00:14:19,750
and you can't really figure out how to

00:14:17,920 --> 00:14:22,000
make it smaller anymore but it's still

00:14:19,750 --> 00:14:24,880
too big we then start thinking about

00:14:22,000 --> 00:14:30,190
what else can we do to improve the

00:14:24,880 --> 00:14:31,900
overall user experience and one of my

00:14:30,190 --> 00:14:34,090
personal favorites is using service

00:14:31,900 --> 00:14:36,520
workers now service workers have got a

00:14:34,090 --> 00:14:39,610
fairly wide adoption and anger

00:14:36,520 --> 00:14:41,800
especially has native support in them

00:14:39,610 --> 00:14:43,870
all you have to do is pass in the flag

00:14:41,800 --> 00:14:45,790
in angular CLI and it adds all the

00:14:43,870 --> 00:14:48,040
configuration for service worker in your

00:14:45,790 --> 00:14:49,810
angular app and then it manages

00:14:48,040 --> 00:14:52,150
everything it creates the the JSON

00:14:49,810 --> 00:14:55,780
config files everything for you using

00:14:52,150 --> 00:14:58,540
that so that's super useful and so what

00:14:55,780 --> 00:15:01,000
what's gonna happen is your first load

00:14:58,540 --> 00:15:03,250
time might be slower but from that point

00:15:01,000 --> 00:15:05,560
on it's gonna use the cache to load your

00:15:03,250 --> 00:15:07,510
app instantly and even better is when

00:15:05,560 --> 00:15:09,940
whenever you update your app the updates

00:15:07,510 --> 00:15:11,680
happen in the background and whenever a

00:15:09,940 --> 00:15:13,480
new version is ready you can just say

00:15:11,680 --> 00:15:16,750
hey you know what I have a new version

00:15:13,480 --> 00:15:18,400
just boom let's update this app and you

00:15:16,750 --> 00:15:20,170
can use the new version so it's it's a

00:15:18,400 --> 00:15:24,670
really good and seamless experience for

00:15:20,170 --> 00:15:28,750
for the user and then there's a slightly

00:15:24,670 --> 00:15:31,090
different approach that usually is not

00:15:28,750 --> 00:15:35,260
used for performance but it does help

00:15:31,090 --> 00:15:37,150
performance a lot is server-side

00:15:35,260 --> 00:15:39,490
and this is again applies to all

00:15:37,150 --> 00:15:42,160
frameworks so when your application

00:15:39,490 --> 00:15:45,100
becomes really big at that point you

00:15:42,160 --> 00:15:46,840
might consider focusing on doing

00:15:45,100 --> 00:15:51,430
server-side rendering so that instead of

00:15:46,840 --> 00:15:54,370
just shipping your full bundle you serve

00:15:51,430 --> 00:15:56,140
you you render it on the server side and

00:15:54,370 --> 00:15:58,270
then send it over so that the user gets

00:15:56,140 --> 00:16:00,400
to see something first while the rest of

00:15:58,270 --> 00:16:02,290
the application loads in the backend so

00:16:00,400 --> 00:16:07,120
this is definitely another strategy that

00:16:02,290 --> 00:16:10,840
you can use finally I want to touch on

00:16:07,120 --> 00:16:15,460
so this is an amazing article I've

00:16:10,840 --> 00:16:18,100
linked below by adieus money and it's

00:16:15,460 --> 00:16:22,050
really about why do we get in that

00:16:18,100 --> 00:16:24,910
position where a bundles get too big and

00:16:22,050 --> 00:16:27,370
effectively if you understand the

00:16:24,910 --> 00:16:30,520
problem and you define your budgets from

00:16:27,370 --> 00:16:32,110
before you won't get into this thing in

00:16:30,520 --> 00:16:34,300
the first place

00:16:32,110 --> 00:16:35,760
so webpack now supports this thing

00:16:34,300 --> 00:16:37,990
called performance budgets and

00:16:35,760 --> 00:16:40,540
effectively all you need to do is

00:16:37,990 --> 00:16:43,690
configure some stuff in your package

00:16:40,540 --> 00:16:45,580
JSON and when if you're using webpack it

00:16:43,690 --> 00:16:48,630
will start giving you warnings and even

00:16:45,580 --> 00:16:52,450
errors if you start exceeding your

00:16:48,630 --> 00:16:54,610
budget and the cool part about this is

00:16:52,450 --> 00:16:57,340
that you can do this part of your build

00:16:54,610 --> 00:16:59,350
tool chain and if you exceed certain

00:16:57,340 --> 00:17:02,110
limits it can throw an error and can

00:16:59,350 --> 00:17:03,730
stop the build right there so if you

00:17:02,110 --> 00:17:05,680
include a new library that broke the

00:17:03,730 --> 00:17:08,140
budget then it really need to think

00:17:05,680 --> 00:17:11,430
about it's hey should I be using a

00:17:08,140 --> 00:17:13,570
different library or is it worthwhile

00:17:11,430 --> 00:17:16,330
sacrificing that experience for the user

00:17:13,570 --> 00:17:18,040
in order to include this library so it

00:17:16,330 --> 00:17:22,090
gets some interesting conversation

00:17:18,040 --> 00:17:26,230
started over there and that was about it

00:17:22,090 --> 00:17:27,310
from my site and yeah I'm looking

00:17:26,230 --> 00:17:30,310
forward to meeting you all

00:17:27,310 --> 00:17:30,910
in the breaks I'll be here for the next

00:17:30,310 --> 00:17:35,640
few days

00:17:30,910 --> 00:17:35,640
and yeah thank you very much

00:17:39,010 --> 00:17:42,130

YouTube URL: https://www.youtube.com/watch?v=OigaRuQrkFs


