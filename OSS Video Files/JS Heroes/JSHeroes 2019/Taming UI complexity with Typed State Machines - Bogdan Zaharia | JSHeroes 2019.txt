Title: Taming UI complexity with Typed State Machines - Bogdan Zaharia | JSHeroes 2019
Publication date: 2019-04-28
Playlist: JSHeroes 2019
Description: 
	Managing state in UI apps is hard. Keeping a coherent mental model of it is even harder.

Finite State Machines seem to offer a good abstraction of the way we interact with UIs, making states and transitions between them explicit, and thus easier to reason about.

One of the nice things about FSMs is that only certain transitions are legal from each state. But is it possible to enforce that in code? It seems that, with some TypeScript magic, it is possible.

In this talk, you'll be exposed to a new perspective on implementing FSMs in JS/TS and how it compares to libraries such as XState or Redux (not really a FSM, but similar). You'll also see how this new approach can be used in real apps, using various libraries, such as React, Vue, and others, some of them quite unexpected.
Captions: 
	00:00:00,070 --> 00:00:03,219
[Music]

00:00:14,120 --> 00:00:23,550
hi everyone we're gonna talk today about

00:00:17,910 --> 00:00:27,150
how we can tame our complexity of our

00:00:23,550 --> 00:00:29,489
applications and we're gonna try to see

00:00:27,150 --> 00:00:30,169
how state machines can help us can help

00:00:29,489 --> 00:00:33,090
us with that

00:00:30,169 --> 00:00:38,670
also using types which can save us from

00:00:33,090 --> 00:00:41,760
some bugs first of all it's good to be

00:00:38,670 --> 00:00:44,940
back here I was also last year at Jazz

00:00:41,760 --> 00:00:47,519
heroes and I had a great time and if you

00:00:44,940 --> 00:00:54,390
don't believe me that I was here this is

00:00:47,519 --> 00:00:58,469
me in the official photos oh yeah I'm a

00:00:54,390 --> 00:01:00,809
bug on the boko on Twitter and other

00:00:58,469 --> 00:01:04,290
things I'm a software developer at

00:01:00,809 --> 00:01:07,920
HootSuite where I write react with

00:01:04,290 --> 00:01:10,110
typescript for now and I also played

00:01:07,920 --> 00:01:14,240
with Elm at home and I mentioned that

00:01:10,110 --> 00:01:17,280
because some ideas from this talk are

00:01:14,240 --> 00:01:20,010
borrowed or stolen as you wish from from

00:01:17,280 --> 00:01:21,450
L and the M architecture so for those of

00:01:20,010 --> 00:01:24,510
you who know Elm

00:01:21,450 --> 00:01:29,580
you might find those mine file find

00:01:24,510 --> 00:01:31,580
those familiar so this is my that the

00:01:29,580 --> 00:01:36,000
slides are here if you want to follow

00:01:31,580 --> 00:01:39,320
them in UI ok before we start let's

00:01:36,000 --> 00:01:41,880
address some questions you might have

00:01:39,320 --> 00:01:45,390
do I need to know about state machines

00:01:41,880 --> 00:01:47,550
well not really it's fine if you don't

00:01:45,390 --> 00:01:50,540
know anything because we have a simple

00:01:47,550 --> 00:01:53,790
example do I need to know type script

00:01:50,540 --> 00:01:55,680
well here maybe you should know a little

00:01:53,790 --> 00:01:58,710
or even if you don't know type script

00:01:55,680 --> 00:02:02,160
you should be I mean you should know

00:01:58,710 --> 00:02:05,970
what a little bit about types which is

00:02:02,160 --> 00:02:08,780
ok because everybody knows about types a

00:02:05,970 --> 00:02:12,480
little okay so what are state machines

00:02:08,780 --> 00:02:15,890
and we'll see with an example from the

00:02:12,480 --> 00:02:18,510
real world at first this is a reverse

00:02:15,890 --> 00:02:21,269
vending machine which means that it

00:02:18,510 --> 00:02:25,110
gives you money for stuff it's quite

00:02:21,269 --> 00:02:26,400
interesting and for this case you can

00:02:25,110 --> 00:02:30,810
recycle

00:02:26,400 --> 00:02:33,870
hands and then you get the reward so

00:02:30,810 --> 00:02:36,689
it's pretty nice that it explains you

00:02:33,870 --> 00:02:40,200
have steps as you see might see I hope

00:02:36,689 --> 00:02:43,920
you can see step one do something step

00:02:40,200 --> 00:02:46,709
two and so on and as we will see this

00:02:43,920 --> 00:02:50,099
also is a state machine not just a

00:02:46,709 --> 00:02:53,879
vending machine so it's a state machine

00:02:50,099 --> 00:02:56,459
so it has States and it can be idle at

00:02:53,879 --> 00:03:00,569
first we can insert the can and it

00:02:56,459 --> 00:03:04,049
becomes loaded we can press the green

00:03:00,569 --> 00:03:05,459
button and it starts recycling and now

00:03:04,049 --> 00:03:09,599
we have to do something that is not

00:03:05,459 --> 00:03:12,090
written anywhere wait for recycling and

00:03:09,599 --> 00:03:13,220
then we're done and we can collect the

00:03:12,090 --> 00:03:16,109
reward

00:03:13,220 --> 00:03:21,269
and now the machine goes back to the

00:03:16,109 --> 00:03:24,269
idle state and can be used again so to

00:03:21,269 --> 00:03:27,659
be more abstract we can define we can

00:03:24,269 --> 00:03:28,980
define this as a diagram and it's the

00:03:27,659 --> 00:03:32,010
same thing I'm not going to go over

00:03:28,980 --> 00:03:35,069
again this is pretty simple it's really

00:03:32,010 --> 00:03:39,389
basic state machine and this is the

00:03:35,069 --> 00:03:41,970
ideal model it's something that we wish

00:03:39,389 --> 00:03:45,090
the users of the machine would do if

00:03:41,970 --> 00:03:47,370
they are will be well behaved but the

00:03:45,090 --> 00:03:50,870
user might not be always that well

00:03:47,370 --> 00:03:54,090
behaved and when the machine is idle

00:03:50,870 --> 00:03:56,340
instead of inserting the can they can

00:03:54,090 --> 00:04:00,690
press the button maybe they had a bad

00:03:56,340 --> 00:04:02,299
day who knows or maybe they can try to

00:04:00,690 --> 00:04:08,519
collect the reward

00:04:02,299 --> 00:04:11,669
somehow or wait for recycling of course

00:04:08,519 --> 00:04:13,349
the last two are joke okay but the first

00:04:11,669 --> 00:04:16,699
one is real and it's an action that the

00:04:13,349 --> 00:04:16,699
user can do at any point and

00:04:16,910 --> 00:04:24,070
also is inserting the can so the the

00:04:20,989 --> 00:04:26,180
machine doesn't might stop you but it

00:04:24,070 --> 00:04:29,420
usually don't don't stop you from doing

00:04:26,180 --> 00:04:32,180
anything at any time so this is the the

00:04:29,420 --> 00:04:34,160
case with the physical machines now we

00:04:32,180 --> 00:04:38,840
are software developers and we build

00:04:34,160 --> 00:04:40,370
apps so we can do better and there are

00:04:38,840 --> 00:04:44,120
implementations of state machines in

00:04:40,370 --> 00:04:45,950
JavaScript the most well-known is AK

00:04:44,120 --> 00:04:49,970
State which is a great library has a lot

00:04:45,950 --> 00:04:52,310
of features and it's widely used I

00:04:49,970 --> 00:04:55,820
didn't specify States and transitions

00:04:52,310 --> 00:04:57,950
quite easily you have an initial state

00:04:55,820 --> 00:04:59,620
and then you have transitions from one

00:04:57,950 --> 00:05:02,240
state to the other that's

00:04:59,620 --> 00:05:04,280
straightforward it's also written in

00:05:02,240 --> 00:05:07,700
Thai Street which is nice because you

00:05:04,280 --> 00:05:10,450
have some guarantees but there's not

00:05:07,700 --> 00:05:13,610
enforced transition so it has types but

00:05:10,450 --> 00:05:15,080
you cannot specify at compile time what

00:05:13,610 --> 00:05:17,980
transitions you can make with the

00:05:15,080 --> 00:05:21,140
machine so you see that you can still

00:05:17,980 --> 00:05:23,260
insert can as many times as you want and

00:05:21,140 --> 00:05:28,550
it says loaded

00:05:23,260 --> 00:05:31,490
okay what about Redux what about Redux

00:05:28,550 --> 00:05:37,730
it's this is a state machine talk so

00:05:31,490 --> 00:05:40,370
okay what do you mean maybe if we think

00:05:37,730 --> 00:05:43,390
about it that's in from some one point

00:05:40,370 --> 00:05:46,280
of view maybe Redux is a state machine

00:05:43,390 --> 00:05:49,790
and maybe Redux is a state machine with

00:05:46,280 --> 00:05:52,760
on one state and I'm gonna think I'm

00:05:49,790 --> 00:05:56,420
crazy because okay Redux has one state

00:05:52,760 --> 00:05:59,360
is a store state right and to avoid that

00:05:56,420 --> 00:06:01,940
confusion that react and redux and other

00:05:59,360 --> 00:06:06,530
libraries use states to define the data

00:06:01,940 --> 00:06:09,340
and in this talk we have we talked about

00:06:06,530 --> 00:06:15,400
state machines we're gonna call data

00:06:09,340 --> 00:06:19,640
model so let's see a simple example of

00:06:15,400 --> 00:06:23,180
an app a very interesting app you can

00:06:19,640 --> 00:06:25,940
login if you're the right user hero

00:06:23,180 --> 00:06:29,919
should be a good user and you can put

00:06:25,940 --> 00:06:29,919
your name to lowercase that's great app

00:06:30,459 --> 00:06:39,529
useful so I read except I hope the font

00:06:35,719 --> 00:06:41,479
is big enough we have the model and for

00:06:39,529 --> 00:06:45,169
those of you who don't know Thai script

00:06:41,479 --> 00:06:48,589
at all the question mark means that the

00:06:45,169 --> 00:06:51,259
field is optional so in our model we

00:06:48,589 --> 00:06:53,119
have also the error and the name because

00:06:51,259 --> 00:06:54,709
we can have an error and the name if the

00:06:53,119 --> 00:06:57,039
user is logged in but they are both

00:06:54,709 --> 00:07:00,379
optional because we might not have them

00:06:57,039 --> 00:07:03,559
and we have some simple actions we don't

00:07:00,379 --> 00:07:08,509
don't use any this is a demo so we don't

00:07:03,559 --> 00:07:10,939
use requests or server we just login

00:07:08,509 --> 00:07:14,419
success and login error when the user

00:07:10,939 --> 00:07:16,699
presses the button and then we can go

00:07:14,419 --> 00:07:22,519
get the name to lowercase and we can

00:07:16,699 --> 00:07:23,469
logout and we have a reducer that it's

00:07:22,519 --> 00:07:26,089
pretty straightforward

00:07:23,469 --> 00:07:29,360
nothing fancy if you are quite familiar

00:07:26,089 --> 00:07:34,419
with Redux or even if you're not for any

00:07:29,360 --> 00:07:38,360
action you just changes the model but

00:07:34,419 --> 00:07:42,289
you maybe can see we have an issue here

00:07:38,360 --> 00:07:44,719
and since this is this example is in

00:07:42,289 --> 00:07:47,360
typescript the compiler will kind of

00:07:44,719 --> 00:07:49,550
yell at us and say well model name is

00:07:47,360 --> 00:07:54,139
not always there it's it can be only

00:07:49,550 --> 00:07:56,089
find and then we say well but I only

00:07:54,139 --> 00:07:59,209
call the name to lowercase action when

00:07:56,089 --> 00:08:03,169
the user is logged in so I know is there

00:07:59,209 --> 00:08:05,659
what what do you mean and then we have

00:08:03,169 --> 00:08:08,569
an operator that's the bank operator in

00:08:05,659 --> 00:08:12,139
type Street which basically means shut

00:08:08,569 --> 00:08:17,110
up I know what I'm doing we usually

00:08:12,139 --> 00:08:20,029
don't so that's maybe the source of bugs

00:08:17,110 --> 00:08:23,240
but the root cause of this is that the

00:08:20,029 --> 00:08:26,149
model of our app is wrong so we we hold

00:08:23,240 --> 00:08:28,909
together data that doesn't really belong

00:08:26,149 --> 00:08:31,369
together we have also the error and the

00:08:28,909 --> 00:08:33,229
name is it possible we can house have a

00:08:31,369 --> 00:08:35,959
name and an error I mean the user logs

00:08:33,229 --> 00:08:36,439
in but it has an error doesn't make

00:08:35,959 --> 00:08:38,689
sense

00:08:36,439 --> 00:08:40,789
so maybe we need to split a model by

00:08:38,689 --> 00:08:42,740
state and by state I mean this state

00:08:40,789 --> 00:08:47,429
from the state machines

00:08:42,740 --> 00:08:51,329
so going back to our our vending machine

00:08:47,429 --> 00:08:55,019
example but only that now we we attach

00:08:51,329 --> 00:08:57,990
some model to the state so we have the

00:08:55,019 --> 00:09:01,439
logged out state which is the initial

00:08:57,990 --> 00:09:03,029
one and we can we have an error here it

00:09:01,439 --> 00:09:06,990
is optional because we don't always have

00:09:03,029 --> 00:09:11,910
an error if it so it's okay no error and

00:09:06,990 --> 00:09:15,899
we can transition from logged out to the

00:09:11,910 --> 00:09:19,050
same to devil same state with login

00:09:15,899 --> 00:09:21,990
error which is basically similar to what

00:09:19,050 --> 00:09:25,619
we saw with redux only that now it's a

00:09:21,990 --> 00:09:27,779
transition between states so and you can

00:09:25,619 --> 00:09:29,910
see it's a string there so login error

00:09:27,779 --> 00:09:33,209
takes a payload we'll call it the

00:09:29,910 --> 00:09:35,429
payload and it means that it's a

00:09:33,209 --> 00:09:38,220
transition that can can also hold data

00:09:35,429 --> 00:09:40,649
so when we get an error we transition to

00:09:38,220 --> 00:09:43,679
the same state but we set the error on

00:09:40,649 --> 00:09:46,439
the model we can also transition between

00:09:43,679 --> 00:09:48,660
states and when we get login success we

00:09:46,439 --> 00:09:52,049
go to the logged in state with a name

00:09:48,660 --> 00:09:54,929
and the nice thing here is that the name

00:09:52,049 --> 00:09:56,819
is no longer optional so we logged in so

00:09:54,929 --> 00:10:00,299
we are sure that we have a name because

00:09:56,819 --> 00:10:03,899
we have a user so now we can safely do

00:10:00,299 --> 00:10:07,079
name to lowercase and then we can log

00:10:03,899 --> 00:10:11,879
out if you want okay so far so good

00:10:07,079 --> 00:10:14,160
this looks good I guess but still we

00:10:11,879 --> 00:10:17,879
don't solve the issue of restricting

00:10:14,160 --> 00:10:20,279
transitions at compile time at at run

00:10:17,879 --> 00:10:21,899
time it should be easy it should have a

00:10:20,279 --> 00:10:23,879
function like can I transition from this

00:10:21,899 --> 00:10:26,639
day to the other but it would be nice

00:10:23,879 --> 00:10:31,049
since we have types to restrict

00:10:26,639 --> 00:10:33,149
transitions and before we see how we can

00:10:31,049 --> 00:10:36,059
do that let's see how will you is

00:10:33,149 --> 00:10:40,199
handled in redux we have the view which

00:10:36,059 --> 00:10:45,869
is react Impala mostly and or another

00:10:40,199 --> 00:10:50,730
another library or viewer yeah for me

00:10:45,869 --> 00:10:52,070
sorry react can be anything and we have

00:10:50,730 --> 00:10:55,280
the store

00:10:52,070 --> 00:10:58,340
and the view is external to the store it

00:10:55,280 --> 00:11:03,320
uses its model and then its patches

00:10:58,340 --> 00:11:06,920
actions to tweet and the same the same

00:11:03,320 --> 00:11:09,020
idea is with AK state only that it has

00:11:06,920 --> 00:11:09,380
different names but the basic idea is

00:11:09,020 --> 00:11:12,980
the same

00:11:09,380 --> 00:11:14,990
and here the view is external so the

00:11:12,980 --> 00:11:18,110
view has no information about the

00:11:14,990 --> 00:11:21,680
machine from a compile-time point of

00:11:18,110 --> 00:11:24,560
view from a static point of view so what

00:11:21,680 --> 00:11:27,410
we if we invert the control what we view

00:11:24,560 --> 00:11:30,440
if we let the Machine take care of the

00:11:27,410 --> 00:11:34,370
views and tell the views what they can

00:11:30,440 --> 00:11:36,050
do and what they cannot do so we have

00:11:34,370 --> 00:11:39,410
the machine and we give it a logged out

00:11:36,050 --> 00:11:43,310
view and we give it the error and then

00:11:39,410 --> 00:11:45,950
the logged out view with from that view

00:11:43,310 --> 00:11:47,960
the user can dispatch with a click or

00:11:45,950 --> 00:11:50,150
whatever it can dispatch back to the

00:11:47,960 --> 00:11:54,080
machine only the login success and login

00:11:50,150 --> 00:11:59,060
error like we would expect and we have

00:11:54,080 --> 00:12:00,920
the same we've logged in and ok I

00:11:59,060 --> 00:12:03,380
thought about these things because I

00:12:00,920 --> 00:12:07,280
thought that they're interesting and I

00:12:03,380 --> 00:12:09,220
started writing proof of concept which

00:12:07,280 --> 00:12:12,110
turned into a library

00:12:09,220 --> 00:12:17,150
it's called type machine not very

00:12:12,110 --> 00:12:19,370
original but that's it I guess and it's

00:12:17,150 --> 00:12:22,930
it's open-source but it's really not

00:12:19,370 --> 00:12:26,240
production ready so don't don't judge

00:12:22,930 --> 00:12:29,690
but it's good enough for a demo so I'd

00:12:26,240 --> 00:12:33,730
like to show you I don't have a live

00:12:29,690 --> 00:12:33,730
coding actually I have recorded so

00:12:38,500 --> 00:12:46,760
sorry okay so first we define the

00:12:43,610 --> 00:12:49,190
Machine and it's gonna be pretty fast

00:12:46,760 --> 00:12:50,780
I'm gonna stop it at some point when you

00:12:49,190 --> 00:12:53,570
define the state in typescript

00:12:50,780 --> 00:12:55,340
it's a logged in or logged out and this

00:12:53,570 --> 00:12:59,270
is a very important we define the

00:12:55,340 --> 00:13:04,490
template for the machine and this is

00:12:59,270 --> 00:13:06,500
some typescript magic but yeah the basic

00:13:04,490 --> 00:13:09,410
idea is that for each state we define

00:13:06,500 --> 00:13:12,740
its model like we saw so logged out has

00:13:09,410 --> 00:13:15,670
error model we have the transition

00:13:12,740 --> 00:13:18,590
payloads and I'm gonna stop a little

00:13:15,670 --> 00:13:21,620
because this is might be tricky to

00:13:18,590 --> 00:13:24,500
understand at first transition payloads

00:13:21,620 --> 00:13:27,230
it means the type of the data associated

00:13:24,500 --> 00:13:30,950
with transitions so we saw before that

00:13:27,230 --> 00:13:34,400
on login success and login error we can

00:13:30,950 --> 00:13:39,190
have strings because we want to pass the

00:13:34,400 --> 00:13:42,899
error or the name respectively

00:13:39,190 --> 00:13:46,870
we have the same for logged in state and

00:13:42,899 --> 00:13:48,730
here the Paila payloads are null because

00:13:46,870 --> 00:13:52,990
we don't pass any data with the

00:13:48,730 --> 00:13:55,389
transitions and that's it this is the

00:13:52,990 --> 00:13:59,680
template is very important and basically

00:13:55,389 --> 00:14:01,930
this tells us these describes our our

00:13:59,680 --> 00:14:04,360
machine basically it tells us what types

00:14:01,930 --> 00:14:07,750
what transitions can be done and so on

00:14:04,360 --> 00:14:09,350
and now we actually define the Machine

00:14:07,750 --> 00:14:13,490
Factory

00:14:09,350 --> 00:14:18,820
which is actual cold so far was just

00:14:13,490 --> 00:14:22,990
types and this machine factory takes

00:14:18,820 --> 00:14:25,670
basically describes the transitions and

00:14:22,990 --> 00:14:28,570
for the logged out state we can do login

00:14:25,670 --> 00:14:33,860
error login success and each function

00:14:28,570 --> 00:14:35,720
it's basically a like a reducer we get

00:14:33,860 --> 00:14:38,480
the model and the payload and we

00:14:35,720 --> 00:14:42,440
transition to another state with with

00:14:38,480 --> 00:14:44,330
its model here we don't use the model we

00:14:42,440 --> 00:14:46,660
just use the payload for the transitions

00:14:44,330 --> 00:14:51,080
and

00:14:46,660 --> 00:14:55,490
okay this is the in the logged in state

00:14:51,080 --> 00:14:57,620
we as we said the as I said before we

00:14:55,490 --> 00:15:00,140
get the model name and we do the

00:14:57,620 --> 00:15:01,610
lowercase - to lowercase on it and the

00:15:00,140 --> 00:15:05,000
compiler would not complain because the

00:15:01,610 --> 00:15:07,280
name is always defined and here we just

00:15:05,000 --> 00:15:11,210
from logout we just transition to logged

00:15:07,280 --> 00:15:14,900
out and no no error so that's basically

00:15:11,210 --> 00:15:16,610
it now we have a machine and the nice

00:15:14,900 --> 00:15:19,940
thing about this machine is that it's

00:15:16,610 --> 00:15:24,290
abstract we have now react or view or

00:15:19,940 --> 00:15:28,820
whatever other library rendering library

00:15:24,290 --> 00:15:31,520
called here and now we have to to

00:15:28,820 --> 00:15:34,460
actually make it work we have to use an

00:15:31,520 --> 00:15:36,500
adapter and for this case it's it's

00:15:34,460 --> 00:15:42,770
react because this is the first adapter

00:15:36,500 --> 00:15:49,340
that I wrote and we define the props for

00:15:42,770 --> 00:15:53,390
the component and then we have basically

00:15:49,340 --> 00:15:58,400
a component a machine adapter that takes

00:15:53,390 --> 00:16:01,580
a machine and views as I said before the

00:15:58,400 --> 00:16:03,610
the Machine controls the views so for

00:16:01,580 --> 00:16:06,340
for each state we have a different view

00:16:03,610 --> 00:16:09,610
so for this one we have the logged out

00:16:06,340 --> 00:16:09,610
view that

00:16:09,950 --> 00:16:14,570
yeah we give it the we have a form a

00:16:13,070 --> 00:16:17,290
simple form when you give it well names

00:16:14,570 --> 00:16:21,050
so we know who can login and who cannot

00:16:17,290 --> 00:16:26,180
we have the error which is in the model

00:16:21,050 --> 00:16:30,199
and here is the nice thing on these

00:16:26,180 --> 00:16:32,180
callbacks when the user is successfully

00:16:30,199 --> 00:16:36,350
logged in we we can dispatch login

00:16:32,180 --> 00:16:42,399
success but as you see we have some

00:16:36,350 --> 00:16:45,350
errors and we can we can see here that

00:16:42,399 --> 00:16:47,089
the compiler knows that we can only do

00:16:45,350 --> 00:16:50,149
login success and login error from this

00:16:47,089 --> 00:16:53,000
state so this is basically what we

00:16:50,149 --> 00:16:54,829
wanted to do and also it knows that it

00:16:53,000 --> 00:16:57,019
should take a string so when you login

00:16:54,829 --> 00:16:58,850
success you must give it a new

00:16:57,019 --> 00:17:02,990
transition with login success you must

00:16:58,850 --> 00:17:06,290
also provide the name so we do just that

00:17:02,990 --> 00:17:10,880
we provide a name and for error we

00:17:06,290 --> 00:17:13,660
provide the error and we have the same

00:17:10,880 --> 00:17:13,660
we've logged in

00:17:14,330 --> 00:17:18,220
it's basically the same thing

00:17:22,950 --> 00:17:28,020
yeah so these are this is a adapter now

00:17:26,550 --> 00:17:30,690
it we have a react component that

00:17:28,020 --> 00:17:34,350
basically uses the machine and renders

00:17:30,690 --> 00:17:37,770
the current state of the of the machine

00:17:34,350 --> 00:17:40,320
and then waited waits for action for

00:17:37,770 --> 00:17:43,380
transitions to get back and then changes

00:17:40,320 --> 00:17:46,560
the current state and it's pretty easy

00:17:43,380 --> 00:17:48,810
to inject this in our application which

00:17:46,560 --> 00:17:51,260
is the Anita machine with the state

00:17:48,810 --> 00:17:57,720
logged out and the model for that state

00:17:51,260 --> 00:18:00,010
and we we render the component and yeah

00:17:57,720 --> 00:18:02,660
this is

00:18:00,010 --> 00:18:05,840
should be fine

00:18:02,660 --> 00:18:11,090
okay I hope I didn't lose too many

00:18:05,840 --> 00:18:14,510
people you're still here okay so as I

00:18:11,090 --> 00:18:17,270
said it's not only react

00:18:14,510 --> 00:18:20,420
it's the demo is in react because that's

00:18:17,270 --> 00:18:24,320
what I use day-to-day but as you saw in

00:18:20,420 --> 00:18:24,800
the first the first file that it was

00:18:24,320 --> 00:18:28,070
there

00:18:24,800 --> 00:18:31,220
the machine is abstract so we can

00:18:28,070 --> 00:18:32,810
actually use it in many technologies we

00:18:31,220 --> 00:18:37,010
did we just need to write the adapter

00:18:32,810 --> 00:18:38,840
which is quite easy to write and the

00:18:37,010 --> 00:18:40,970
same machine so it can be used with

00:18:38,840 --> 00:18:42,650
different views even in the same

00:18:40,970 --> 00:18:45,410
technology so we can have two components

00:18:42,650 --> 00:18:47,420
that use the same machine and also with

00:18:45,410 --> 00:18:48,560
different adapters so we have we can

00:18:47,420 --> 00:18:51,100
have a machine that we can share

00:18:48,560 --> 00:18:54,560
throughout our code with different

00:18:51,100 --> 00:18:56,830
technologies so what I what I did is

00:18:54,560 --> 00:18:59,900
exactly that I wrote a machine and I

00:18:56,830 --> 00:19:02,630
then I wrote some examples and some

00:18:59,900 --> 00:19:07,010
adapters but not in a very nice way for

00:19:02,630 --> 00:19:10,250
for view yes for the CLI the simple CLI

00:19:07,010 --> 00:19:13,280
application that does stuff and them

00:19:10,250 --> 00:19:15,350
actually works with the machine and this

00:19:13,280 --> 00:19:18,410
is the interesting part I also wrote it

00:19:15,350 --> 00:19:21,380
on the server side I wrote a simple KOA

00:19:18,410 --> 00:19:25,690
which is similar to express a simple

00:19:21,380 --> 00:19:28,910
core server that based on the state

00:19:25,690 --> 00:19:32,620
renders different routes so instead of

00:19:28,910 --> 00:19:35,510
rendering something to the user it

00:19:32,620 --> 00:19:39,980
exposes different routes for a given

00:19:35,510 --> 00:19:43,130
state so yeah I hope you some point you

00:19:39,980 --> 00:19:45,490
can say it works on my machine thanks

00:19:43,130 --> 00:19:55,839
[Applause]

00:19:45,490 --> 00:19:55,839

YouTube URL: https://www.youtube.com/watch?v=gcuZJ2LHTFI


