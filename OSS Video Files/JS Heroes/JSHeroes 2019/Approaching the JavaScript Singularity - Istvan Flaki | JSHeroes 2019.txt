Title: Approaching the JavaScript Singularity - Istvan Flaki | JSHeroes 2019
Publication date: 2019-05-03
Playlist: JSHeroes 2019
Description: 
	Developers are quick to complain about "JavaScript Fatigue", the perceived high volatility of libraries, tooling and the JavaScript language itself â€” yet very few look at these changes and additions as a whole. In this talk I will take some of JavaScript's new features with the biggest transformative potential (ES Modules, WebAssembly, the DOM-Node.js API convergence), and I try to showcase what they mean for web development and how, when used together, they are able to address various hurdles and complaints that have been plaguing Node.js & web development for a long time.
Captions: 
	00:00:00,070 --> 00:00:03,219
[Music]

00:00:15,170 --> 00:00:20,130
I hope you're just as tired as I am and

00:00:18,270 --> 00:00:24,240
I hope that you just as much want to go

00:00:20,130 --> 00:00:26,480
home as I do but unfortunately for you I

00:00:24,240 --> 00:00:29,730
prepared a lot of content for you so

00:00:26,480 --> 00:00:32,669
yeah samake is a short of issue

00:00:29,730 --> 00:00:38,309
posnansky which is like explains why

00:00:32,669 --> 00:00:39,719
sake and I'm a I'm a missile attack

00:00:38,309 --> 00:00:42,059
speaker as you can see from the blue

00:00:39,719 --> 00:00:45,059
booty and you know you have you have

00:00:42,059 --> 00:00:53,359
seen a bunch of others already running

00:00:45,059 --> 00:00:56,819
around and stuff like that so I'm also a

00:00:53,359 --> 00:01:00,149
trainer I work with the Muslim over

00:00:56,819 --> 00:01:02,819
relations team mostly and community

00:01:00,149 --> 00:01:07,100
management and events and my free time

00:01:02,819 --> 00:01:07,100
which is you might imagine like it's

00:01:07,430 --> 00:01:13,700
basically I'm doing JavaScript hardware

00:01:11,670 --> 00:01:16,320
stuff so if that's your kind of thing

00:01:13,700 --> 00:01:17,970
they hit me up and you're gonna be

00:01:16,320 --> 00:01:19,560
talking about the approaching the

00:01:17,970 --> 00:01:22,410
JavaScript singularity

00:01:19,560 --> 00:01:24,900
so I was like you what is that and

00:01:22,410 --> 00:01:27,000
I was like yeah like we can put it in a

00:01:24,900 --> 00:01:32,820
different way as like burning questions

00:01:27,000 --> 00:01:35,130
of the JavaScript ecosystem but yeah so

00:01:32,820 --> 00:01:37,500
so this is basically what we are gonna

00:01:35,130 --> 00:01:42,180
be talking about and the story really

00:01:37,500 --> 00:01:45,120
starts in 2008 so we're gonna take a

00:01:42,180 --> 00:01:47,790
memory trip back to 2008 when v8 was

00:01:45,120 --> 00:01:51,270
released via is the JavaScript engine

00:01:47,790 --> 00:01:55,470
that Google the search engine Google

00:01:51,270 --> 00:01:58,680
created for the Chrome browser in 2009

00:01:55,470 --> 00:02:00,900
this led to the creation of no Jia's and

00:01:58,680 --> 00:02:04,200
like that's know Jess is ten years old

00:02:00,900 --> 00:02:09,629
first a lot and I think there is like

00:02:04,200 --> 00:02:10,800
another moment in the history of what

00:02:09,629 --> 00:02:15,870
we're gonna be talking about and that's

00:02:10,800 --> 00:02:17,760
2013 ish which let Judy Lake Ohrid

00:02:15,870 --> 00:02:20,580
mentioned as an engineer and Firefox

00:02:17,760 --> 00:02:22,560
decided to optimize javascript in a way

00:02:20,580 --> 00:02:24,840
that nobody forwards miser and

00:02:22,560 --> 00:02:26,670
eventually this led to the creation of

00:02:24,840 --> 00:02:30,150
web assembly fruit like you have

00:02:26,670 --> 00:02:33,750
and collaboration of browsers but let's

00:02:30,150 --> 00:02:35,970
just go back to the 2008 ish and just

00:02:33,750 --> 00:02:37,800
like you know give a bit of talk about

00:02:35,970 --> 00:02:40,020
you know what happened to JavaScript

00:02:37,800 --> 00:02:42,140
during that time especially around that

00:02:40,020 --> 00:02:46,170
time and what you're gonna see is the

00:02:42,140 --> 00:02:48,959
SunSpider benchmark which is which came

00:02:46,170 --> 00:02:52,380
around a bunch of years ago the people

00:02:48,959 --> 00:02:57,180
sorta chief try to figure out how to

00:02:52,380 --> 00:03:00,330
make sure make the how to make the

00:02:57,180 --> 00:03:02,519
JavaScript ecosystem kind of like a a

00:03:00,330 --> 00:03:04,440
test for the ecosystem to figure out

00:03:02,519 --> 00:03:07,980
which browsers JavaScript engine was the

00:03:04,440 --> 00:03:11,280
best and you know as these things would

00:03:07,980 --> 00:03:15,180
evolve and evolve it has anything else

00:03:11,280 --> 00:03:17,580
devolved into a fight 2008 the release

00:03:15,180 --> 00:03:19,590
of the v8 engine kind of sparked

00:03:17,580 --> 00:03:24,120
something that we call the browser war

00:03:19,590 --> 00:03:26,100
and JavaScript engine speed started

00:03:24,120 --> 00:03:28,680
increasing like in an exponential manner

00:03:26,100 --> 00:03:32,670
and it didn't stop until it reached like

00:03:28,680 --> 00:03:35,970
well close to like native speeds with a

00:03:32,670 --> 00:03:38,609
help asm.js obviously but the technology

00:03:35,970 --> 00:03:41,400
kind of kicked off this this this work

00:03:38,609 --> 00:03:44,070
but it also it kid what it kicked off is

00:03:41,400 --> 00:03:47,970
what I already mentioned is a great

00:03:44,070 --> 00:03:50,760
divide because a perform like JavaScript

00:03:47,970 --> 00:03:56,540
never reversed manually performed but

00:03:50,760 --> 00:03:59,430
the creation of the v8 engine actually

00:03:56,540 --> 00:04:01,920
made it fast enough that people wanted

00:03:59,430 --> 00:04:05,670
to you know try to explore other ways to

00:04:01,920 --> 00:04:09,209
do JavaScript and the important piece of

00:04:05,670 --> 00:04:11,430
that is that JavaScript was universal

00:04:09,209 --> 00:04:13,140
enough and isomorphic enough and this

00:04:11,430 --> 00:04:15,959
was basically the two hardest words I'm

00:04:13,140 --> 00:04:17,789
gonna be pronouncing today that people

00:04:15,959 --> 00:04:20,220
wanted to use it all over the place and

00:04:17,789 --> 00:04:25,020
then it became like fast enough they did

00:04:20,220 --> 00:04:26,789
it and you know I hate you still hate

00:04:25,020 --> 00:04:28,770
and standard but we're gonna be talking

00:04:26,789 --> 00:04:31,490
about a lot about people using it like

00:04:28,770 --> 00:04:34,350
in very weird ways so please excuse me

00:04:31,490 --> 00:04:36,840
but they're very interesting part is

00:04:34,350 --> 00:04:39,300
Jeremy Keef recently tweeting about this

00:04:36,840 --> 00:04:40,260
and really short reading about this like

00:04:39,300 --> 00:04:43,140
what

00:04:40,260 --> 00:04:45,210
basically the key part or key position

00:04:43,140 --> 00:04:46,980
of this is like because it's Java shrimp

00:04:45,210 --> 00:04:48,420
you can use it all over the place you

00:04:46,980 --> 00:04:50,100
can use it in the server side you can

00:04:48,420 --> 00:04:54,150
use it on the client side for your

00:04:50,100 --> 00:04:57,750
front-end you can use it for for site

00:04:54,150 --> 00:05:01,410
generators or or build tools and the

00:04:57,750 --> 00:05:04,680
very reason this is very interesting is

00:05:01,410 --> 00:05:06,060
because you can reuse the code that you

00:05:04,680 --> 00:05:08,730
create and then the skills that you

00:05:06,060 --> 00:05:10,440
learned and this is what basically

00:05:08,730 --> 00:05:12,690
eventually pushed like JavaScript into

00:05:10,440 --> 00:05:16,200
the real like everybody wanted to do

00:05:12,690 --> 00:05:18,120
everything with it and let's talk about

00:05:16,200 --> 00:05:19,650
nodejs because what started this whole

00:05:18,120 --> 00:05:21,300
everybody wanted to do everything with

00:05:19,650 --> 00:05:24,780
JavaScript it was probably you don't yes

00:05:21,300 --> 00:05:29,550
and no just enable my server-side code

00:05:24,780 --> 00:05:32,030
enables likes service functions when you

00:05:29,550 --> 00:05:34,770
are running service you're still using

00:05:32,030 --> 00:05:39,690
javascript you're still using a node.js

00:05:34,770 --> 00:05:44,820
runtime it enables static site

00:05:39,690 --> 00:05:48,870
generation and a bunch of tooling that

00:05:44,820 --> 00:05:51,390
we use today so it is clear that the

00:05:48,870 --> 00:05:53,760
JavaScript and like the front end as we

00:05:51,390 --> 00:05:56,730
know it wouldn't be an appointment but

00:05:53,760 --> 00:05:59,450
no jeselsohn haven't been invented but

00:05:56,730 --> 00:06:01,920
this is kind of the question of you know

00:05:59,450 --> 00:06:05,130
the raises a question of you know

00:06:01,920 --> 00:06:06,840
there's this gift when you're like you

00:06:05,130 --> 00:06:08,640
were so preoccupied with thinking that

00:06:06,840 --> 00:06:11,260
you could that you didn't think to stop

00:06:08,640 --> 00:06:12,650
just stop to think but you should and

00:06:11,260 --> 00:06:15,690
[Music]

00:06:12,650 --> 00:06:17,610
what what came out old is this is the

00:06:15,690 --> 00:06:20,190
great divide which is basically div no

00:06:17,610 --> 00:06:22,260
js' platform kind of became so like silo

00:06:20,190 --> 00:06:24,900
and the vet platform itself game became

00:06:22,260 --> 00:06:27,240
its own Sylar itself rich man he still

00:06:24,900 --> 00:06:31,440
wrote JavaScript on both sides but the

00:06:27,240 --> 00:06:33,150
JavaScript was not interoperable and you

00:06:31,440 --> 00:06:35,880
know like all the all the tools that

00:06:33,150 --> 00:06:38,670
were coming out of that we're trying to

00:06:35,880 --> 00:06:42,920
like like bridge this divide between the

00:06:38,670 --> 00:06:48,120
two ends of the JavaScript ecosystem and

00:06:42,920 --> 00:06:50,370
the bigger problem is that with that is

00:06:48,120 --> 00:06:52,500
actually that these gaps these problems

00:06:50,370 --> 00:06:54,630
were actually unbridgeable for a bunch

00:06:52,500 --> 00:06:58,260
of reasons because it you black

00:06:54,630 --> 00:07:00,390
had very different a very different

00:06:58,260 --> 00:07:02,580
purpose in mind and we're creating with

00:07:00,390 --> 00:07:05,280
very different restrictions that meant

00:07:02,580 --> 00:07:08,990
that you know the nodejs I'd miss the

00:07:05,280 --> 00:07:11,850
secure sandbox that the JavaScript was

00:07:08,990 --> 00:07:14,910
very famous of you could you would have

00:07:11,850 --> 00:07:16,950
unlimited network and file access native

00:07:14,910 --> 00:07:18,720
modules you could execute file so you're

00:07:16,950 --> 00:07:22,580
right left and right over the place and

00:07:18,720 --> 00:07:25,470
still Hayden's non-existent bitcoins and

00:07:22,580 --> 00:07:27,720
this kind of like created a fissure

00:07:25,470 --> 00:07:30,750
between the boundaries of these systems

00:07:27,720 --> 00:07:33,930
because like the web the web still

00:07:30,750 --> 00:07:35,430
focused on being like to secure there is

00:07:33,930 --> 00:07:38,760
a reason they call the browser user

00:07:35,430 --> 00:07:41,370
agent the browser supposed to be working

00:07:38,760 --> 00:07:43,620
for you so this kind of created a

00:07:41,370 --> 00:07:45,660
fissure between the two systems in my

00:07:43,620 --> 00:07:48,270
people when you try to do something on

00:07:45,660 --> 00:07:50,880
the a on the on one side you run into

00:07:48,270 --> 00:07:54,000
you like problems and like limitations

00:07:50,880 --> 00:07:55,950
if you didn't OGS you are like oh I have

00:07:54,000 --> 00:07:58,080
like all these security prompts and like

00:07:55,950 --> 00:08:01,200
course origin policies and knowledge and

00:07:58,080 --> 00:08:03,330
when you went to the server but you were

00:08:01,200 --> 00:08:05,150
you're you were faced with a bunch of

00:08:03,330 --> 00:08:10,410
like security problems and issues that

00:08:05,150 --> 00:08:13,800
the overzealous like permission of note

00:08:10,410 --> 00:08:16,500
is created so what comes you know the

00:08:13,800 --> 00:08:19,260
great power comes great boner ability

00:08:16,500 --> 00:08:22,500
and we already heard about the stealing

00:08:19,260 --> 00:08:24,720
of your bacon and Russ had this line in

00:08:22,500 --> 00:08:27,030
when Russ the Ross programming language

00:08:24,720 --> 00:08:30,150
was was still in its infancy it has this

00:08:27,030 --> 00:08:33,570
line in the in the west side that you

00:08:30,150 --> 00:08:35,460
know it is very beta so Russ could do

00:08:33,570 --> 00:08:37,890
any kind of things including it in your

00:08:35,460 --> 00:08:39,539
own laundry and like kinda nodejs is the

00:08:37,890 --> 00:08:41,610
same like it could eat your laundry if

00:08:39,539 --> 00:08:43,410
you don't don't look at and there are

00:08:41,610 --> 00:08:45,630
medications and you know there are ways

00:08:43,410 --> 00:08:47,220
to be like sir command based issues you

00:08:45,630 --> 00:08:51,960
know you can just write all your code

00:08:47,220 --> 00:08:54,950
yourself like some of us try to but

00:08:51,960 --> 00:08:56,190
that's also not sustainable so that

00:08:54,950 --> 00:08:58,590
there's a

00:08:56,190 --> 00:09:01,230
bumpass by Jake Archibald but a bunch of

00:08:58,590 --> 00:09:04,380
others came out recently they tell you

00:09:01,230 --> 00:09:05,670
that it's not just your the nodejs party

00:09:04,380 --> 00:09:07,220
that there's a problem but all the

00:09:05,670 --> 00:09:12,170
third-party dependencies that you

00:09:07,220 --> 00:09:15,290
are using and I but I cannot go into too

00:09:12,170 --> 00:09:17,089
much detail of this but but this kind of

00:09:15,290 --> 00:09:20,720
you can kind of see it that noches was

00:09:17,089 --> 00:09:23,529
inevitable as day as soon as the

00:09:20,720 --> 00:09:25,910
JavaScript ecosystem got fast enough and

00:09:23,529 --> 00:09:27,860
like people figured out ways to do it

00:09:25,910 --> 00:09:30,350
people wanted to do more of a JavaScript

00:09:27,860 --> 00:09:34,220
people wanted to put your trip in do all

00:09:30,350 --> 00:09:36,980
kinds of places and so eventually like

00:09:34,220 --> 00:09:39,379
notations of the first thing that came

00:09:36,980 --> 00:09:42,980
out that was running a JavaScript on the

00:09:39,379 --> 00:09:45,379
server side or like tooling but it was

00:09:42,980 --> 00:09:47,959
the one that made this thing popular so

00:09:45,379 --> 00:09:51,500
if you want to learn more I'll link the

00:09:47,959 --> 00:09:53,990
blog post on this but basically what we

00:09:51,500 --> 00:09:56,569
can see now is like 10 years past and

00:09:53,990 --> 00:09:56,990
what we can't see is no just is here to

00:09:56,569 --> 00:09:59,420
stay

00:09:56,990 --> 00:10:01,069
nobody's arguing with that but also the

00:09:59,420 --> 00:10:03,470
baby is also here to stay so they kind

00:10:01,069 --> 00:10:06,079
of realized that this kind of chasm that

00:10:03,470 --> 00:10:08,209
is between the two platform is causing a

00:10:06,079 --> 00:10:09,949
lot of developer churn like you cannot

00:10:08,209 --> 00:10:11,899
reuse the same tools you cannot reuse

00:10:09,949 --> 00:10:14,689
the same same items that that you

00:10:11,899 --> 00:10:16,490
usually used to be using so they kind of

00:10:14,689 --> 00:10:20,620
started merging together and and

00:10:16,490 --> 00:10:23,360
bridging those gaps between the the

00:10:20,620 --> 00:10:26,509
languages and the platforms and disha

00:10:23,360 --> 00:10:28,160
had like a great densha like a great

00:10:26,509 --> 00:10:33,350
presentation about this

00:10:28,160 --> 00:10:35,180
I also linked you but what we are kind

00:10:33,350 --> 00:10:37,639
of seeing these days is like there is

00:10:35,180 --> 00:10:39,290
like a convergence between the the

00:10:37,639 --> 00:10:42,889
server-side platform and the client-side

00:10:39,290 --> 00:10:46,160
platform so what you see on there on the

00:10:42,889 --> 00:10:48,529
on the slides is of one of these

00:10:46,160 --> 00:10:51,290
experiments when nodejs started

00:10:48,529 --> 00:10:54,680
implementing a cenotes has always been

00:10:51,290 --> 00:10:57,019
like single threaded but that was base

00:10:54,680 --> 00:10:59,089
to do like multi-threaded code while you

00:10:57,019 --> 00:11:01,819
falter process or like like started

00:10:59,089 --> 00:11:03,439
cluster or something like that but

00:11:01,819 --> 00:11:05,360
sometimes you just wanted to put some

00:11:03,439 --> 00:11:06,319
code he do you like some JavaScript into

00:11:05,360 --> 00:11:09,350
your separate Fred

00:11:06,319 --> 00:11:11,329
so your main Fred would remain empty and

00:11:09,350 --> 00:11:13,370
you could do that on web app but you

00:11:11,329 --> 00:11:15,019
could never do that like easily oh no no

00:11:13,370 --> 00:11:16,759
yes so that what they were like hey that

00:11:15,019 --> 00:11:19,220
actually sounds like these burgers thing

00:11:16,759 --> 00:11:21,190
that we have on the web platform sounds

00:11:19,220 --> 00:11:24,790
pretty cool so they basically

00:11:21,190 --> 00:11:27,040
like a a copy or like a inspiration took

00:11:24,790 --> 00:11:28,510
inspiration from it if you want to learn

00:11:27,040 --> 00:11:31,000
more about this like there's a great

00:11:28,510 --> 00:11:33,700
talk exploring how they got there and

00:11:31,000 --> 00:11:35,590
why they exactly got there but workers

00:11:33,700 --> 00:11:40,510
is not the only thing that has been

00:11:35,590 --> 00:11:42,580
coming into no js' like you can see just

00:11:40,510 --> 00:11:45,160
a few months there's a talk coming up he

00:11:42,580 --> 00:11:46,930
has come for you that is Johnny Cheng is

00:11:45,160 --> 00:11:48,940
going to be talking about all the api's

00:11:46,930 --> 00:11:51,280
that are currently landing in nodejs

00:11:48,940 --> 00:11:54,580
that are exactly and especially aimed at

00:11:51,280 --> 00:11:56,170
like developers have being able to reuse

00:11:54,580 --> 00:11:58,810
the things that they have been using

00:11:56,170 --> 00:12:00,340
online of a platform and like kind of

00:11:58,810 --> 00:12:07,300
trying to bridge this gap between the

00:12:00,340 --> 00:12:08,980
two platforms the issue with that is so

00:12:07,300 --> 00:12:11,500
so they are like there is a native fetch

00:12:08,980 --> 00:12:13,330
implementation because because most of

00:12:11,500 --> 00:12:16,150
you probably like running queue wanting

00:12:13,330 --> 00:12:19,380
to use fetch on the nodejs side there is

00:12:16,150 --> 00:12:21,700
like a various other like Dom like

00:12:19,380 --> 00:12:23,290
minimal libraries and like other things

00:12:21,700 --> 00:12:24,460
that make sense on the server side so

00:12:23,290 --> 00:12:26,650
they are like hey is gonna take

00:12:24,460 --> 00:12:27,160
this and put in your server or like

00:12:26,650 --> 00:12:29,470
nodejs

00:12:27,160 --> 00:12:31,390
and there's also bad sound nes modules

00:12:29,470 --> 00:12:34,030
which I'm gonna be talking a bit more in

00:12:31,390 --> 00:12:37,600
detail about because I think that's an

00:12:34,030 --> 00:12:38,770
important problem of the JavaScript

00:12:37,600 --> 00:12:41,110
ecosystem and this is probably something

00:12:38,770 --> 00:12:44,230
that you've been running into quite a

00:12:41,110 --> 00:12:46,990
lot so let's face it code separation in

00:12:44,230 --> 00:12:48,700
JavaScript has not really been easy for

00:12:46,990 --> 00:12:51,960
a long time I mean there was it was

00:12:48,700 --> 00:12:54,460
pretty much non-existent this is a

00:12:51,960 --> 00:12:57,580
picture from Lynn Clark's article that I

00:12:54,460 --> 00:13:00,880
linked in below when the code is looking

00:12:57,580 --> 00:13:03,300
for the jQuery global somebody forgot to

00:13:00,880 --> 00:13:08,320
implement it in lambda calculus probably

00:13:03,300 --> 00:13:12,760
but the thing is like Noches like they

00:13:08,320 --> 00:13:15,190
were like various British companies and

00:13:12,760 --> 00:13:17,680
various like efforts try to create an

00:13:15,190 --> 00:13:20,980
ecosystem of packages or like like code

00:13:17,680 --> 00:13:23,140
sharing for for JavaScript but really it

00:13:20,980 --> 00:13:25,990
was it's easy to see that it was no js'

00:13:23,140 --> 00:13:29,380
and commonjs was that that really took

00:13:25,990 --> 00:13:30,970
this bacon and to the home run the red

00:13:29,380 --> 00:13:33,520
line that you see as the number of

00:13:30,970 --> 00:13:34,550
JavaScript modules in the NPM registry

00:13:33,520 --> 00:13:39,140
compared

00:13:34,550 --> 00:13:42,980
- like dotnet PHP Ruby by fighting on a

00:13:39,140 --> 00:13:45,250
bunch of headers but but no yes wasn't

00:13:42,980 --> 00:13:48,230
this was a bit too late

00:13:45,250 --> 00:13:50,660
so by that time like I said everybody

00:13:48,230 --> 00:13:52,970
tried to choose all this room in their

00:13:50,660 --> 00:13:55,459
own way and you know yeah

00:13:52,970 --> 00:13:57,680
the existence of people try to figure

00:13:55,459 --> 00:13:59,839
out how to universalize like the only

00:13:57,680 --> 00:14:02,660
the the different methods people could

00:13:59,839 --> 00:14:07,149
use for this and like very slow ders and

00:14:02,660 --> 00:14:10,459
like code generators in code like

00:14:07,149 --> 00:14:12,380
because code tooling appeared that was

00:14:10,459 --> 00:14:14,200
trying to tackle this problem and we had

00:14:12,380 --> 00:14:17,810
a lot of your own conflicting

00:14:14,200 --> 00:14:21,310
conflicting resolutions to this issue it

00:14:17,810 --> 00:14:25,160
kind of caused a mess and that mess a

00:14:21,310 --> 00:14:27,950
lot of a lot of people disagree better

00:14:25,160 --> 00:14:30,290
commonjs helped beat that mess or like

00:14:27,950 --> 00:14:33,649
even further intensified that this is

00:14:30,290 --> 00:14:35,870
Ellen Pierce Park he was basically the

00:14:33,649 --> 00:14:39,910
editor of the ACMA script specification

00:14:35,870 --> 00:14:43,670
until and until they shipped the es6 or

00:14:39,910 --> 00:14:47,270
if you more like it yes 2015 but he was

00:14:43,670 --> 00:14:49,490
basically editing the specification

00:14:47,270 --> 00:14:52,250
while a lot of people are moaning about

00:14:49,490 --> 00:14:54,170
how common Jas was really messing things

00:14:52,250 --> 00:14:56,810
up I mean come on Jace is literally just

00:14:54,170 --> 00:14:58,610
hey I take your code slap some some

00:14:56,810 --> 00:15:01,730
headers in front of it and back of it

00:14:58,610 --> 00:15:04,520
and just evaluate it as text and create

00:15:01,730 --> 00:15:07,100
a function out of it which is like and

00:15:04,520 --> 00:15:09,110
it was not very complex and a lot of

00:15:07,100 --> 00:15:13,279
people complain that it probably should

00:15:09,110 --> 00:15:16,220
have been more elaborate in this tweet

00:15:13,279 --> 00:15:17,690
Lang disagrees but everybody is can

00:15:16,220 --> 00:15:21,170
decide it for themselves the mess is

00:15:17,690 --> 00:15:23,329
already made however big it is and but

00:15:21,170 --> 00:15:25,310
the ACMA script specification has well

00:15:23,329 --> 00:15:28,579
it took their time but they actually

00:15:25,310 --> 00:15:31,550
figured a DDS es6 module syntax would

00:15:28,579 --> 00:15:35,570
probably be able to solve this trying to

00:15:31,550 --> 00:15:39,110
clean up this mess if how many if you

00:15:35,570 --> 00:15:41,660
are using yeah yes modules already okay

00:15:39,110 --> 00:15:44,360
so who is a who is using it natively and

00:15:41,660 --> 00:15:47,360
not map packing and out of it see

00:15:44,360 --> 00:15:48,750
that's that's like that's like 15 hands

00:15:47,360 --> 00:15:51,180
out of the house

00:15:48,750 --> 00:15:53,550
so you could use it like all browsers

00:15:51,180 --> 00:15:55,530
are supported but there is a problem

00:15:53,550 --> 00:15:58,110
because because no Jesus didn't support

00:15:55,530 --> 00:16:00,180
it and you still have to and also like

00:15:58,110 --> 00:16:03,060
you have like other things that you

00:16:00,180 --> 00:16:05,610
might want to do with it like code split

00:16:03,060 --> 00:16:07,140
and whatever your bundles but here's the

00:16:05,610 --> 00:16:10,770
thing no Jesus didn't support it for a

00:16:07,140 --> 00:16:13,220
long time until no js' we tell rolled

00:16:10,770 --> 00:16:16,490
around and they started implementing

00:16:13,220 --> 00:16:19,410
experimental native syntax for for

00:16:16,490 --> 00:16:21,480
JavaScript modules now a lot of these

00:16:19,410 --> 00:16:24,570
churn a lot of the arguments are coming

00:16:21,480 --> 00:16:26,910
from the part that the standardization

00:16:24,570 --> 00:16:28,800
organization yes modules were created

00:16:26,910 --> 00:16:30,570
without the understanding and like

00:16:28,800 --> 00:16:33,120
without like taking into account what no

00:16:30,570 --> 00:16:34,530
just really wanted and people also

00:16:33,120 --> 00:16:35,600
disagree and this because people also

00:16:34,530 --> 00:16:38,480
disagree on everything

00:16:35,600 --> 00:16:42,300
and like no just really felt left behind

00:16:38,480 --> 00:16:44,310
in you know the atmosphere specification

00:16:42,300 --> 00:16:47,430
was focusing on the web browser

00:16:44,310 --> 00:16:49,050
scientists only so that if they had

00:16:47,430 --> 00:16:51,630
problems if you ever heard of like the

00:16:49,050 --> 00:16:56,130
MGS life extension whatever you probably

00:16:51,630 --> 00:16:58,200
heard of this and it was not ideal but

00:16:56,130 --> 00:17:00,600
you have a lot of legacy code in the

00:16:58,200 --> 00:17:02,940
common J's format in NPM already you saw

00:17:00,600 --> 00:17:05,190
the red line so there was kind of

00:17:02,940 --> 00:17:07,100
nothing to be done except you know there

00:17:05,190 --> 00:17:09,480
are a lot of very smart people in the

00:17:07,100 --> 00:17:11,820
organization and they eventually figured

00:17:09,480 --> 00:17:14,460
out a way so if you haven't heard of

00:17:11,820 --> 00:17:18,000
this I have good news for you this is

00:17:14,460 --> 00:17:18,480
supposed to be landing in v12 so in like

00:17:18,000 --> 00:17:20,730
two weeks

00:17:18,480 --> 00:17:24,120
v12 version of node.js will actually

00:17:20,730 --> 00:17:27,720
have like a face to implementation which

00:17:24,120 --> 00:17:30,750
is basically practically ecology as is

00:17:27,720 --> 00:17:35,670
legacy now as in there is complete and

00:17:30,750 --> 00:17:39,000
full cooperation between seed come on

00:17:35,670 --> 00:17:41,670
Jas and and yes modules you still have

00:17:39,000 --> 00:17:44,550
to use the experimental flag for now but

00:17:41,670 --> 00:17:46,530
but every everybody you know this is

00:17:44,550 --> 00:17:49,650
kind of like everybody ate their their

00:17:46,530 --> 00:17:50,910
cabbage and also I don't know how you

00:17:49,650 --> 00:17:53,060
say that in English in the first place

00:17:50,910 --> 00:17:55,920
but yeah so everybody was happy

00:17:53,060 --> 00:17:58,530
well at least like is happy to be happy

00:17:55,920 --> 00:18:00,750
with this you still have to wait a bit

00:17:58,530 --> 00:18:02,040
but that's kind of like who everybody

00:18:00,750 --> 00:18:03,840
was very upset

00:18:02,040 --> 00:18:06,950
now they actually figured it out so

00:18:03,840 --> 00:18:10,050
that's like a nice cozy feeling I guess

00:18:06,950 --> 00:18:13,050
but will it blend or like will it blend

00:18:10,050 --> 00:18:16,650
in because you're gonna be using now you

00:18:13,050 --> 00:18:19,440
have browser side yes module modules and

00:18:16,650 --> 00:18:21,600
you have no js' ids modules problem is

00:18:19,440 --> 00:18:23,790
they're gonna work like the syntax is

00:18:21,600 --> 00:18:25,410
gonna work but your modules may not work

00:18:23,790 --> 00:18:27,660
because there's still a chasm between

00:18:25,410 --> 00:18:30,210
the two platforms there's still API

00:18:27,660 --> 00:18:31,740
differences you can probably like deal

00:18:30,210 --> 00:18:33,480
away with them in the abstractions and

00:18:31,740 --> 00:18:37,950
whatever's but but it's you'll have to

00:18:33,480 --> 00:18:40,110
work your ass off so who knows what this

00:18:37,950 --> 00:18:44,220
one is you're probably running to this

00:18:40,110 --> 00:18:47,580
one for folks in the back like this is a

00:18:44,220 --> 00:18:49,470
no chip error which what you get so so

00:18:47,580 --> 00:18:51,860
let's get into you like details of a bet

00:18:49,470 --> 00:18:54,600
because like the no jibber comes from

00:18:51,860 --> 00:18:58,260
notice allows you to compile native

00:18:54,600 --> 00:19:00,420
modules and Noches allows you to use

00:18:58,260 --> 00:19:02,280
native modules man you have to when you

00:19:00,420 --> 00:19:04,950
need system access or you need like

00:19:02,280 --> 00:19:07,830
something that is closer to the

00:19:04,950 --> 00:19:09,600
performance of native code this error

00:19:07,830 --> 00:19:11,520
the problem with that is is these

00:19:09,600 --> 00:19:14,610
packages are downloaded in their source

00:19:11,520 --> 00:19:17,460
format and they end up being compiled on

00:19:14,610 --> 00:19:21,300
your machine taking up your electricity

00:19:17,460 --> 00:19:23,280
and burning your CPU and occasionally

00:19:21,300 --> 00:19:25,140
failing while they do that on

00:19:23,280 --> 00:19:26,520
installation time of an application that

00:19:25,140 --> 00:19:28,830
you're trying to use a module that

00:19:26,520 --> 00:19:33,120
you're trying to use and you know these

00:19:28,830 --> 00:19:34,950
things are are getting like exacerbated

00:19:33,120 --> 00:19:37,950
when you're actually using electron

00:19:34,950 --> 00:19:41,040
there are various ways people will be

00:19:37,950 --> 00:19:49,350
trying yes your slides totally stole

00:19:41,040 --> 00:19:51,330
them and in any case these problems are

00:19:49,350 --> 00:19:53,700
exacerbated when you are using latch on

00:19:51,330 --> 00:19:55,560
because you have now not just no js' but

00:19:53,700 --> 00:19:56,940
also like a chromium servers that are

00:19:55,560 --> 00:19:59,270
interacting with each other in various

00:19:56,940 --> 00:20:03,120
ways you are probably mean here and so

00:19:59,270 --> 00:20:05,040
domestic you can get out of this and the

00:20:03,120 --> 00:20:06,900
fingers like this kind of like dropping

00:20:05,040 --> 00:20:09,210
down to a lower level instruction is

00:20:06,900 --> 00:20:11,310
like nothing new like if you want to run

00:20:09,210 --> 00:20:12,630
like numeric calculations in Python

00:20:11,310 --> 00:20:14,130
biotin is going to include a binary

00:20:12,630 --> 00:20:15,750
module that is going to do it for you

00:20:14,130 --> 00:20:17,670
because it's just faster and

00:20:15,750 --> 00:20:20,940
it's not news foreign language no js'

00:20:17,670 --> 00:20:22,650
has a Python hazard Ruby as it the

00:20:20,940 --> 00:20:24,360
interesting part sir this is Dan

00:20:22,650 --> 00:20:26,720
Callahan a colleague of mine at the

00:20:24,360 --> 00:20:30,270
Mozilla deverel team talking a bike on

00:20:26,720 --> 00:20:31,770
about a possible way to fix this and the

00:20:30,270 --> 00:20:33,810
possible way to fix this you're already

00:20:31,770 --> 00:20:36,270
been introduced to this by Lynn until

00:20:33,810 --> 00:20:38,610
yesterday's bad assembly now not

00:20:36,270 --> 00:20:40,530
I literally have nine minutes so I'm not

00:20:38,610 --> 00:20:43,680
gonna be able to go into details of what

00:20:40,530 --> 00:20:45,450
webassembly is and but I definitely want

00:20:43,680 --> 00:20:48,090
you kind of at your appetite for it

00:20:45,450 --> 00:20:50,580
because this might actually save your

00:20:48,090 --> 00:20:53,670
bacon if you have been doing a lot of

00:20:50,580 --> 00:20:56,490
new GS and a lot of modules lately so

00:20:53,670 --> 00:20:58,440
the first thing like Lynn mentioned is

00:20:56,490 --> 00:21:01,590
like web assemblies an MVP which means

00:20:58,440 --> 00:21:03,270
it it is very minimal and but there is

00:21:01,590 --> 00:21:06,030
already use cases that you can already

00:21:03,270 --> 00:21:08,610
use it for if you ever installed the

00:21:06,030 --> 00:21:11,700
notes s on your machine you probably

00:21:08,610 --> 00:21:14,100
seen no chip you may have been even like

00:21:11,700 --> 00:21:16,430
bitten by it or like all kinds of Ruby

00:21:14,100 --> 00:21:18,570
cans you have to install at some point

00:21:16,430 --> 00:21:21,000
what they're actually trying to do is

00:21:18,570 --> 00:21:25,830
replacing the binary modules of no chip

00:21:21,000 --> 00:21:29,220
in notes as binary modules of obsess in

00:21:25,830 --> 00:21:32,670
notes as VDV assembly dependency the

00:21:29,220 --> 00:21:35,190
thing is because web assembly is a is

00:21:32,670 --> 00:21:37,680
coming from the JavaScript engine the v8

00:21:35,190 --> 00:21:40,110
engine supports it since the v10 version

00:21:37,680 --> 00:21:42,120
there's an experimental version of it so

00:21:40,110 --> 00:21:43,770
they're actually working on making sure

00:21:42,120 --> 00:21:45,270
that they can they can replace the

00:21:43,770 --> 00:21:47,430
binary code bit about assembly

00:21:45,270 --> 00:21:49,590
counterpart the interesting part of this

00:21:47,430 --> 00:21:51,600
is webassembly you only compile once and

00:21:49,590 --> 00:21:55,320
then you can run it on any device that

00:21:51,600 --> 00:21:57,480
and it supports it and close to or like

00:21:55,320 --> 00:22:01,080
a reasonably close to native native

00:21:57,480 --> 00:22:03,960
speeds which means that v8 has a built

00:22:01,080 --> 00:22:06,800
in assembly engine that will be able to

00:22:03,960 --> 00:22:08,970
run this like SAS interpreter for you

00:22:06,800 --> 00:22:13,950
now if you're really getting into the

00:22:08,970 --> 00:22:15,720
weeds so I'm really hoping I wrapped

00:22:13,950 --> 00:22:16,800
some interstitial it's not gonna pop up

00:22:15,720 --> 00:22:18,660
on my screen

00:22:16,800 --> 00:22:21,630
but we are gonna go deeper because the

00:22:18,660 --> 00:22:22,860
thing is currently there is a lot of

00:22:21,630 --> 00:22:25,140
boilerplate that you have to apply to

00:22:22,860 --> 00:22:26,820
this and Link larger shell is the

00:22:25,140 --> 00:22:28,980
champion of it proposal that was

00:22:26,820 --> 00:22:30,990
McDowell is going to make this even

00:22:28,980 --> 00:22:33,390
easier and the end result on the end

00:22:30,990 --> 00:22:36,059
goal is actually to make a vamp assembly

00:22:33,390 --> 00:22:39,630
modules just as easy to reuse and pop

00:22:36,059 --> 00:22:42,380
into your code as as normal JavaScript

00:22:39,630 --> 00:22:45,720
modules so on the left hand side or like

00:22:42,380 --> 00:22:47,610
my left hand side you see the current

00:22:45,720 --> 00:22:52,679
like boilerplate you need to import and

00:22:47,610 --> 00:22:54,270
use a website module Lynn's proposal the

00:22:52,679 --> 00:22:57,809
champion the purpose of the lineage

00:22:54,270 --> 00:22:59,820
championing makes automated lead verb

00:22:57,809 --> 00:23:03,870
assembly modules being able to tap into

00:22:59,820 --> 00:23:06,630
the es6 module syntax which is a very

00:23:03,870 --> 00:23:08,669
important point because the idea is to

00:23:06,630 --> 00:23:10,890
create small web assembly modules that

00:23:08,669 --> 00:23:12,360
could replace like surgically replace

00:23:10,890 --> 00:23:15,630
parts of the things that you actually

00:23:12,360 --> 00:23:17,640
want to make sure that are running fast

00:23:15,630 --> 00:23:20,549
or maybe you want to share some code

00:23:17,640 --> 00:23:22,950
between platforms make sure that you you

00:23:20,549 --> 00:23:25,770
can have the absolute minimum size of

00:23:22,950 --> 00:23:28,260
web assembly module compiled targeted to

00:23:25,770 --> 00:23:32,610
this what you see on the screen is like

00:23:28,260 --> 00:23:36,150
the speed improvements the Merciless

00:23:32,610 --> 00:23:41,070
team has got out of like generator using

00:23:36,150 --> 00:23:43,140
web assembly and rust recreating the the

00:23:41,070 --> 00:23:45,660
mapping file part of the Firefox

00:23:43,140 --> 00:23:47,730
developer tools if you use Firefox your

00:23:45,660 --> 00:23:51,270
developer tools runs JavaScript and

00:23:47,730 --> 00:23:53,220
react and a bunch of other stuff and it

00:23:51,270 --> 00:23:56,340
actually is going to use a swap assembly

00:23:53,220 --> 00:23:58,980
module in the browser to make think 10

00:23:56,340 --> 00:24:00,390
times faster parsing of like you're a

00:23:58,980 --> 00:24:03,600
free man go buy it like mapping flat

00:24:00,390 --> 00:24:05,880
bundle that your favorite code generator

00:24:03,600 --> 00:24:07,740
created so this is this is huge

00:24:05,880 --> 00:24:09,210
difference and it's embedded in a

00:24:07,740 --> 00:24:11,160
shipping product in 200 million

00:24:09,210 --> 00:24:14,700
computers but you don't have to go that

00:24:11,160 --> 00:24:17,490
far the chrome team has a squash up an

00:24:14,700 --> 00:24:19,380
image application names crush that

00:24:17,490 --> 00:24:21,660
actually they have been developing to

00:24:19,380 --> 00:24:23,580
kind of make like image manipulations

00:24:21,660 --> 00:24:25,950
and resizing and a bunch of other stuff

00:24:23,580 --> 00:24:27,210
like easier so what they did is they

00:24:25,950 --> 00:24:29,880
have been experimenting with web

00:24:27,210 --> 00:24:32,250
assembly they will be writing it from

00:24:29,880 --> 00:24:34,770
scratch and at some point they they

00:24:32,250 --> 00:24:38,159
found this library piston is a russ

00:24:34,770 --> 00:24:40,980
library for writing games and like

00:24:38,159 --> 00:24:42,850
native app like multimedia applications

00:24:40,980 --> 00:24:44,440
and the finger about rust is

00:24:42,850 --> 00:24:47,410
kind of have these small modules like

00:24:44,440 --> 00:24:49,210
everything is a like overseeing it's

00:24:47,410 --> 00:24:52,240
kind of like Rusty's like the cinders

00:24:49,210 --> 00:24:54,190
owners of the ecosystem they like use

00:24:52,240 --> 00:24:56,440
like super small modules and everything

00:24:54,190 --> 00:24:59,140
is reusable or like instructed in race

00:24:56,440 --> 00:25:01,420
efficiently so this gaming library has a

00:24:59,140 --> 00:25:03,550
library that can do image resizing and

00:25:01,420 --> 00:25:05,920
manipulations they just took the library

00:25:03,550 --> 00:25:08,250
use the restroom chain to compile it to

00:25:05,920 --> 00:25:12,010
webassembly they got like a 10 kilowatt

00:25:08,250 --> 00:25:14,380
assembly bundle of a library that they

00:25:12,010 --> 00:25:16,510
could use to use all kinds of resizing

00:25:14,380 --> 00:25:19,840
algorithms inside the application and

00:25:16,510 --> 00:25:22,030
what Jake Archibald also mentions here

00:25:19,840 --> 00:25:22,660
is that because they just could split

00:25:22,030 --> 00:25:25,270
this out

00:25:22,660 --> 00:25:27,730
the application is still it this adds 10

00:25:25,270 --> 00:25:29,380
kilobyte to the final bundle the final

00:25:27,730 --> 00:25:31,060
download of the application but the

00:25:29,380 --> 00:25:33,610
application is still 15 kilobytes like

00:25:31,060 --> 00:25:35,290
down the wire and until interactive they

00:25:33,610 --> 00:25:39,100
can just load this like separately and

00:25:35,290 --> 00:25:40,630
and you can use this code that somebody

00:25:39,100 --> 00:25:44,620
else wrote in a completely different

00:25:40,630 --> 00:25:49,000
language in your web application and if

00:25:44,620 --> 00:25:51,760
you want to so I'm what I'm what I'm

00:25:49,000 --> 00:25:53,980
kind of getting to you is is that

00:25:51,760 --> 00:25:58,780
experimentation is essential and I

00:25:53,980 --> 00:25:59,380
really am NOT here to still no I I don't

00:25:58,780 --> 00:26:02,110
want

00:25:59,380 --> 00:26:04,600
I thought usually say to people is like

00:26:02,110 --> 00:26:06,640
the the end goal of electron is to not

00:26:04,600 --> 00:26:09,460
exist anymore and I really don't want

00:26:06,640 --> 00:26:11,470
Shelly do not have a job anymore but

00:26:09,460 --> 00:26:16,240
that's kind of the thing electron was

00:26:11,470 --> 00:26:18,850
kind of no GS in the same same vein like

00:26:16,240 --> 00:26:21,550
no GS like people wanted to do more and

00:26:18,850 --> 00:26:23,890
people figured out a way to do more but

00:26:21,550 --> 00:26:27,070
eventually what you see here just as it

00:26:23,890 --> 00:26:29,710
happened with jQuery you know what

00:26:27,070 --> 00:26:31,210
people use about people do eventually

00:26:29,710 --> 00:26:33,490
like kind of seeps back into the

00:26:31,210 --> 00:26:35,740
platform and is implemented right into

00:26:33,490 --> 00:26:37,840
the browser or the Dom API of your

00:26:35,740 --> 00:26:40,060
choice and kind of that isn't the

00:26:37,840 --> 00:26:41,680
expectation of electron as well and I'm

00:26:40,060 --> 00:26:43,780
not just one I don't just want you

00:26:41,680 --> 00:26:45,190
talking to year last time I'll you give

00:26:43,780 --> 00:26:48,640
this talk and not come for GT and I

00:26:45,190 --> 00:26:50,530
couldn't really back this up what you

00:26:48,640 --> 00:26:54,060
see on this on the screen

00:26:50,530 --> 00:26:56,140
last week I was in bonus areas a

00:26:54,060 --> 00:26:59,170
workshop in

00:26:56,140 --> 00:27:01,690
no notes covert shop now what I can tell

00:26:59,170 --> 00:27:03,340
you it's very hard to teach people no

00:27:01,690 --> 00:27:05,470
Jess if you don't speak their language

00:27:03,340 --> 00:27:08,590
so maybe think about that the next time

00:27:05,470 --> 00:27:11,490
you try this but what I saw is Alejandro

00:27:08,590 --> 00:27:13,510
who was speaking here yesterday about

00:27:11,490 --> 00:27:17,260
black holes but also in the node.js

00:27:13,510 --> 00:27:19,870
ecosystem he installed a bunch of like

00:27:17,260 --> 00:27:21,940
docker containers serving you off

00:27:19,870 --> 00:27:24,430
basically what is Visual Studio code

00:27:21,940 --> 00:27:28,150
into a browser now visitor studio code

00:27:24,430 --> 00:27:29,950
or add-on or whatever has been has been

00:27:28,150 --> 00:27:32,470
quite a feat to pull off and you really

00:27:29,950 --> 00:27:34,540
need the speed of chrome or the rendered

00:27:32,470 --> 00:27:36,580
amount of rendering of engines to pull

00:27:34,540 --> 00:27:38,140
of the UI and you really need it to have

00:27:36,580 --> 00:27:40,320
like something in the background that

00:27:38,140 --> 00:27:43,000
you could use to your around your

00:27:40,320 --> 00:27:47,700
JavaScript or CoffeeScript god forbid

00:27:43,000 --> 00:27:51,070
but but but what really made it possible

00:27:47,700 --> 00:27:54,120
Visual Studio code is probably a thing

00:27:51,070 --> 00:27:57,400
is still like the biggest like github

00:27:54,120 --> 00:27:59,140
repository at this point and they just

00:27:57,400 --> 00:28:01,660
took it and they figured out a way how

00:27:59,140 --> 00:28:03,940
to run it in the browser I'm want to

00:28:01,660 --> 00:28:07,000
point out this is Firefox like chrome

00:28:03,940 --> 00:28:09,190
like electron embeds like the chromium

00:28:07,000 --> 00:28:11,080
engine and the UI is actually running in

00:28:09,190 --> 00:28:14,410
Firefox what they did is basically just

00:28:11,080 --> 00:28:17,140
rewired the the back end code of this

00:28:14,410 --> 00:28:20,290
application to instead of like going to

00:28:17,140 --> 00:28:22,660
the file system directly or using the

00:28:20,290 --> 00:28:25,120
nodejs application that's behind it it

00:28:22,660 --> 00:28:26,980
basically goes to your server another

00:28:25,120 --> 00:28:28,570
problem with the server is obviously

00:28:26,980 --> 00:28:30,970
they figured out a way how do you like

00:28:28,570 --> 00:28:33,310
emulate this like file system behind

00:28:30,970 --> 00:28:37,180
this behind this whole thing

00:28:33,310 --> 00:28:39,370
and what you see on this on the screen

00:28:37,180 --> 00:28:43,630
is a Mozilla experiment that actually

00:28:39,370 --> 00:28:46,660
puts puts the scientific computing into

00:28:43,630 --> 00:28:48,580
your computer but the interesting part

00:28:46,660 --> 00:28:50,470
is this is kinda like Jude Jupiter

00:28:48,580 --> 00:28:52,510
notebooks on like steroids jupiter

00:28:50,470 --> 00:28:55,360
notebooks is basically a journal used

00:28:52,510 --> 00:28:56,920
this for her lambda presentation i was

00:28:55,360 --> 00:28:59,050
like who that that was really cool the

00:28:56,920 --> 00:29:01,900
problem is that actually depends on

00:28:59,050 --> 00:29:04,390
running a server in the background and

00:29:01,900 --> 00:29:07,300
the server a lapel valuating your phones

00:29:04,390 --> 00:29:08,740
in the background for you because even

00:29:07,300 --> 00:29:10,040
if you could do JavaScript on the client

00:29:08,740 --> 00:29:14,360
side

00:29:10,040 --> 00:29:16,520
notebooks run Python or Ruby or a bunch

00:29:14,360 --> 00:29:18,410
of other languages what you see here the

00:29:16,520 --> 00:29:20,960
iodide app actually as a Mozilla

00:29:18,410 --> 00:29:23,360
experiment when they took the r

00:29:20,960 --> 00:29:26,690
programming language runtime and in

00:29:23,360 --> 00:29:28,610
compiled it to bab assembly so then the

00:29:26,690 --> 00:29:30,800
iodide UI is basically a jupiter

00:29:28,610 --> 00:29:35,870
notebook that pulls in the assembly file

00:29:30,800 --> 00:29:38,000
for for for the our compiler and you can

00:29:35,870 --> 00:29:41,750
do like visualizations completely

00:29:38,000 --> 00:29:43,700
separate from a server and my friend i

00:29:41,750 --> 00:29:46,250
mentioned Dan callahan at PyCon actually

00:29:43,700 --> 00:29:48,500
shows you a python interpreter in the

00:29:46,250 --> 00:29:50,060
browser now i'm not saying you should do

00:29:48,500 --> 00:29:53,270
this but it's pretty cool to be

00:29:50,060 --> 00:29:54,860
collaborating on the browser and near

00:29:53,270 --> 00:29:56,780
native speeds in your browser without

00:29:54,860 --> 00:29:59,810
having to install any desktop

00:29:56,780 --> 00:30:01,100
applications and but the problem here is

00:29:59,810 --> 00:30:02,780
the same like somebody had to

00:30:01,100 --> 00:30:04,970
re-implement the backend of this and

00:30:02,780 --> 00:30:07,580
this is what kind of diwali team is

00:30:04,970 --> 00:30:09,650
trying to figure out is like early

00:30:07,580 --> 00:30:11,750
standardizing the device people could

00:30:09,650 --> 00:30:18,830
interact using web assembly to the

00:30:11,750 --> 00:30:20,600
system so like the code io code or io

00:30:18,830 --> 00:30:22,580
team had to re-implement the back end

00:30:20,600 --> 00:30:24,440
like the far back end of the file

00:30:22,580 --> 00:30:27,050
the i would i team kind of had to figure

00:30:24,440 --> 00:30:28,580
out figure it out how to make it work

00:30:27,050 --> 00:30:31,400
make these things work and they all

00:30:28,580 --> 00:30:33,410
figured out their own abstractions what

00:30:31,400 --> 00:30:35,960
the vasa team is trying to do is kind of

00:30:33,410 --> 00:30:38,240
channel the web assembly specification

00:30:35,960 --> 00:30:39,860
which is in a sandbox so all the

00:30:38,240 --> 00:30:41,930
security problems that you get from our

00:30:39,860 --> 00:30:46,120
native technologies don't really apply

00:30:41,930 --> 00:30:49,640
or not as much and just channel olders

00:30:46,120 --> 00:30:51,650
all those efforts of using like native

00:30:49,640 --> 00:30:55,370
file systems or network connections into

00:30:51,650 --> 00:30:57,170
a a well-defined interface and then the

00:30:55,370 --> 00:31:01,520
way they can actually make this work is

00:30:57,170 --> 00:31:03,980
actually was he uses a permission system

00:31:01,520 --> 00:31:06,170
that is a capital capability maze

00:31:03,980 --> 00:31:07,880
permission system that means the

00:31:06,170 --> 00:31:10,160
devadasi

00:31:07,880 --> 00:31:12,530
the was is supporting webassembly binary

00:31:10,160 --> 00:31:14,240
you are using can only use the things

00:31:12,530 --> 00:31:16,220
that you give it access to if you're

00:31:14,240 --> 00:31:18,260
gonna pass in a file it can use a file

00:31:16,220 --> 00:31:20,600
but not the directory the files and if

00:31:18,260 --> 00:31:22,119
you pass in a directory it can use a

00:31:20,600 --> 00:31:25,269
directory but not

00:31:22,119 --> 00:31:27,789
not maybe you pass in read-only

00:31:25,269 --> 00:31:30,009
directory so it cannot write into the

00:31:27,789 --> 00:31:32,469
directory well you see in the stage

00:31:30,009 --> 00:31:34,959
there is a video from Lin Clark who

00:31:32,469 --> 00:31:38,049
introduces this technology and what you

00:31:34,959 --> 00:31:41,319
see here is a body run time actually

00:31:38,049 --> 00:31:44,229
forbids access to the a TC / password

00:31:41,319 --> 00:31:47,679
file on the user's computer because your

00:31:44,229 --> 00:31:48,999
code didn't give it access to and this

00:31:47,679 --> 00:31:53,709
is something interesting that we are

00:31:48,999 --> 00:31:56,829
also seeing in in other ways other

00:31:53,709 --> 00:31:58,629
experiments going on so so nodejs and an

00:31:56,829 --> 00:32:02,409
electron was in the last experiments and

00:31:58,629 --> 00:32:07,059
if you heard of Dino Ryan dolls types

00:32:02,409 --> 00:32:09,699
web-based like systems engine what guy

00:32:07,059 --> 00:32:12,279
bad for says here in this comment is

00:32:09,699 --> 00:32:13,689
that Dino is doing something something

00:32:12,279 --> 00:32:15,669
really interesting and we should be

00:32:13,689 --> 00:32:17,439
keeping our hours on that because these

00:32:15,669 --> 00:32:20,409
kind of experience we can learn a lot

00:32:17,439 --> 00:32:23,559
from and what you're gonna see here so

00:32:20,409 --> 00:32:24,999
Dino is actually going to run a server

00:32:23,559 --> 00:32:25,779
here it's kind of like a hello world

00:32:24,999 --> 00:32:28,839
example

00:32:25,779 --> 00:32:31,089
so what Dino will do is actually ask you

00:32:28,839 --> 00:32:33,849
if you want to give permission to the

00:32:31,089 --> 00:32:35,919
app to connect to the internet and what

00:32:33,849 --> 00:32:38,699
it well what you do not see on this

00:32:35,919 --> 00:32:41,739
picture is actually every dependency

00:32:38,699 --> 00:32:43,569
will only get the permissions that you

00:32:41,739 --> 00:32:45,999
give them so if you pull in a random

00:32:43,569 --> 00:32:48,519
module that wants to write your it is

00:32:45,999 --> 00:32:51,699
your computer Dino will ask you unless

00:32:48,519 --> 00:32:53,439
you preemptively tell them and not to do

00:32:51,699 --> 00:32:56,379
that or like give permissions ahead of

00:32:53,439 --> 00:32:59,679
time that this module can write into

00:32:56,379 --> 00:33:01,419
like format my hard disk so this is kind

00:32:59,679 --> 00:33:03,099
of an experiment obviously but this is

00:33:01,419 --> 00:33:05,199
something that you can you can see all

00:33:03,099 --> 00:33:06,819
over the place is that kind of the

00:33:05,199 --> 00:33:08,319
current like practices are not cutting

00:33:06,819 --> 00:33:14,319
it and people are experimenting with

00:33:08,319 --> 00:33:15,879
these with these experiences so yeah so

00:33:14,319 --> 00:33:18,909
if you haven't checked it out it's

00:33:15,879 --> 00:33:21,519
really interesting to see and kind of

00:33:18,909 --> 00:33:24,369
like you know a way various words the

00:33:21,519 --> 00:33:26,229
the technology of the future had it so

00:33:24,369 --> 00:33:27,999
that's a lot of things right that's a

00:33:26,229 --> 00:33:30,059
lot of amazing technology but I really

00:33:27,999 --> 00:33:33,129
wanted to leave you with one thought

00:33:30,059 --> 00:33:35,299
which we had I kind of get this like

00:33:33,129 --> 00:33:38,039
every single talk I give

00:33:35,299 --> 00:33:40,289
and I can tell this is the same thing I

00:33:38,039 --> 00:33:42,570
tell that tell these people so we have

00:33:40,289 --> 00:33:44,759
the panel at Dell conversion Tina and

00:33:42,570 --> 00:33:47,129
somebody else as a question should I be

00:33:44,759 --> 00:33:48,779
using nodejs in production like do you

00:33:47,129 --> 00:33:51,330
do you think it's fine to be using

00:33:48,779 --> 00:33:53,609
nodejs in production now if that spaced

00:33:51,330 --> 00:33:55,379
out like a silly question really because

00:33:53,609 --> 00:33:57,450
like I just told you I know just is 10

00:33:55,379 --> 00:34:00,359
years old it's kind of backed by a bunch

00:33:57,450 --> 00:34:04,200
of companies and like the JavaScript

00:34:00,359 --> 00:34:06,149
foundation but the thing the bad news is

00:34:04,200 --> 00:34:08,129
basically nobody should tell you if you

00:34:06,149 --> 00:34:09,960
should use it to lure not like you will

00:34:08,129 --> 00:34:11,460
have to figure it out yourself because

00:34:09,960 --> 00:34:14,099
whether or not you should use a tool

00:34:11,460 --> 00:34:17,549
depends on you know your countries and

00:34:14,099 --> 00:34:20,010
not how people people think about that

00:34:17,549 --> 00:34:22,950
so on this panel we had something

00:34:20,010 --> 00:34:25,260
similar which is Susan turn it Cal

00:34:22,950 --> 00:34:28,200
reiterate and the GS Party podcast I'll

00:34:25,260 --> 00:34:31,349
link to the full podcast but what she

00:34:28,200 --> 00:34:34,049
says is what's the really important part

00:34:31,349 --> 00:34:36,299
I think what you can do is respect that

00:34:34,049 --> 00:34:37,950
you won't be able to know everything and

00:34:36,299 --> 00:34:40,619
I think you should all respect that

00:34:37,950 --> 00:34:43,530
because it's gonna put you in a very bad

00:34:40,619 --> 00:34:46,139
place if you're gonna try what she also

00:34:43,530 --> 00:34:47,879
says I think you need to respect that

00:34:46,139 --> 00:34:49,589
you need several people all working

00:34:47,879 --> 00:34:51,270
together we're good at different things

00:34:49,589 --> 00:34:54,839
in order to produce the best quality

00:34:51,270 --> 00:34:57,750
output and you don't have to know

00:34:54,839 --> 00:34:59,760
everything but what you have to do is

00:34:57,750 --> 00:35:01,650
you have to read along on the podcast

00:34:59,760 --> 00:35:03,690
she also talks about that you have to

00:35:01,650 --> 00:35:05,250
play with things if you're not gonna

00:35:03,690 --> 00:35:07,079
discover new things you're not gonna

00:35:05,250 --> 00:35:09,059
know if you're gonna need them or if you

00:35:07,079 --> 00:35:12,150
want to use them don't use your new

00:35:09,059 --> 00:35:14,220
library on like a client project like in

00:35:12,150 --> 00:35:16,470
in production like the first time user

00:35:14,220 --> 00:35:20,309
you have to play with at first if it

00:35:16,470 --> 00:35:23,069
code sandbox or something and and play

00:35:20,309 --> 00:35:24,809
it really early and often like try but

00:35:23,069 --> 00:35:26,940
suddenly try the new stuff that comes

00:35:24,809 --> 00:35:29,010
out you know don't try to know

00:35:26,940 --> 00:35:30,990
everything but you know if this sounds

00:35:29,010 --> 00:35:34,049
interesting spend some time on it and

00:35:30,990 --> 00:35:35,579
you know try it out don't be afraid to

00:35:34,049 --> 00:35:37,440
step out of your comfort zone it's very

00:35:35,579 --> 00:35:39,390
important I'm not telling you that you

00:35:37,440 --> 00:35:41,760
should do this on your free time I'm not

00:35:39,390 --> 00:35:43,410
telling you you should be coding morning

00:35:41,760 --> 00:35:45,059
and evening and weekends or you should

00:35:43,410 --> 00:35:47,160
spend your weekends trying to figure

00:35:45,059 --> 00:35:47,710
this out if you're in a good place any

00:35:47,160 --> 00:35:50,170
good calm

00:35:47,710 --> 00:35:51,910
funny they should give you this is what

00:35:50,170 --> 00:35:53,859
it called research and development time

00:35:51,910 --> 00:35:57,550
when you should be able to improve your

00:35:53,859 --> 00:35:59,710
skills so if you are somebody who who

00:35:57,550 --> 00:36:01,540
are not yet Burnham management but still

00:35:59,710 --> 00:36:03,280
in management build a team with

00:36:01,540 --> 00:36:05,490
different strengths like figure out how

00:36:03,280 --> 00:36:08,320
to build a team that you know but then

00:36:05,490 --> 00:36:09,099
put together their more than the sum of

00:36:08,320 --> 00:36:12,430
its parts

00:36:09,099 --> 00:36:13,900
and it identified the problems and find

00:36:12,430 --> 00:36:15,580
the right people to solve them and find

00:36:13,900 --> 00:36:17,230
the right tools to solve them so kind of

00:36:15,580 --> 00:36:19,270
build your own tool belt and don't ask

00:36:17,230 --> 00:36:23,320
other people everybody you should be

00:36:19,270 --> 00:36:26,599
using it or not thank you very much

00:36:23,320 --> 00:36:26,599
[Applause]

00:36:28,080 --> 00:36:34,240
awesome you will see the link to the

00:36:31,960 --> 00:36:36,580
slides on the on the list if you go one

00:36:34,240 --> 00:36:37,960
slide before after there's a reading

00:36:36,580 --> 00:36:40,210
list if you want to learn more of these

00:36:37,960 --> 00:36:43,060
technologies you will find me at SLE

00:36:40,210 --> 00:36:44,710
Softworks and at mass hex is the muscle

00:36:43,060 --> 00:36:46,450
of developer teams maintained like

00:36:44,710 --> 00:36:50,340
Twitter channel but new cool stuff on

00:36:46,450 --> 00:37:00,780
the web so check those out thank you

00:36:50,340 --> 00:37:00,780

YouTube URL: https://www.youtube.com/watch?v=6wPeM8mY-98


