Title: Web typography: a non-English perspective - Hui Jing Chen | JSHeroes 2019
Publication date: 2019-05-03
Playlist: JSHeroes 2019
Description: 
	Typography was defined by Gerrit Noordzij as writing with prefabricated letters. More than half of the content on the web is in English even though native English speakers make up less than 5% of the world's population. English only has 26 letters, but writing systems across the world use many more letters and characters, many of which are laid out in different directions as well. This talk covers the intricacies of ensuring web fonts display and are laid out correctly regardless of language, and how some of these layouts can translate across writing systems for creative art direction on the web.
Captions: 
	00:00:00,070 --> 00:00:03,219
[Music]

00:00:16,610 --> 00:00:23,119
no service one in Belize soon region

00:00:25,150 --> 00:00:30,010
she Volvo vide s prayer nah I'm kidding

00:00:28,300 --> 00:00:32,200
this entire talks going to be in English

00:00:30,010 --> 00:00:34,060
I'm sorry if I butchered your beautiful

00:00:32,200 --> 00:00:36,070
language though I want to shout out Alex

00:00:34,060 --> 00:00:39,040
Lakatos for teaching me out for nuns all

00:00:36,070 --> 00:00:42,040
those words so today I'm going to be

00:00:39,040 --> 00:00:44,500
talking about web typography which you

00:00:42,040 --> 00:00:47,410
know may be fairly common but I'm also

00:00:44,500 --> 00:00:49,600
going to talk a bit about none English

00:00:47,410 --> 00:00:53,020
web typography which hopefully is a

00:00:49,600 --> 00:00:55,330
little less common so anyway my name is

00:00:53,020 --> 00:00:58,809
Wei Jing you can call me Jing this is me

00:00:55,330 --> 00:01:02,050
in emojis make what you will of them

00:00:58,809 --> 00:01:04,300
that Fox is the closest emoji I could

00:01:02,050 --> 00:01:06,130
associate with being a Muslim

00:01:04,300 --> 00:01:08,950
tech speaker there are a lot of us in

00:01:06,130 --> 00:01:11,670
the house today so I know at least some

00:01:08,950 --> 00:01:16,090
people will laugh at my shitty jokes and

00:01:11,670 --> 00:01:18,520
I also I also have a day job at age of

00:01:16,090 --> 00:01:20,440
it next MO as a developer advocate next

00:01:18,520 --> 00:01:21,850
Mon being a platform that makes it

00:01:20,440 --> 00:01:23,770
easier for developers to integrate

00:01:21,850 --> 00:01:25,960
communications into their applications

00:01:23,770 --> 00:01:27,660
by providing api's for messaging voice

00:01:25,960 --> 00:01:32,080
authentication that kind of thing

00:01:27,660 --> 00:01:34,810
so what is typography right it seems

00:01:32,080 --> 00:01:37,060
like almost everyone and their cat has a

00:01:34,810 --> 00:01:39,130
definition for typography I mean

00:01:37,060 --> 00:01:43,810
Wikipedia calls it the art and technique

00:01:39,130 --> 00:01:46,390
of arranging type Matthew Buttrick whose

00:01:43,810 --> 00:01:48,520
article is the first result you get when

00:01:46,390 --> 00:01:51,520
you google warriors typography he got

00:01:48,520 --> 00:01:54,039
all the SEO juice going on he defines it

00:01:51,520 --> 00:01:56,979
as the visual component of the written

00:01:54,039 --> 00:02:00,550
word Encyclopedia Brittanica has its own

00:01:56,979 --> 00:02:03,039
definition but I like this one by given

00:02:00,550 --> 00:02:05,800
not je that says typography is writing

00:02:03,039 --> 00:02:08,050
with pre fabricated letters simply

00:02:05,800 --> 00:02:11,800
because it doesn't tie the definition

00:02:08,050 --> 00:02:13,900
into any specific medium typography as a

00:02:11,800 --> 00:02:18,069
discipline will continue to evolve as

00:02:13,900 --> 00:02:19,780
mediums change over time letters are

00:02:18,069 --> 00:02:22,420
mentioned in most of those definitions

00:02:19,780 --> 00:02:24,970
and letters are a type of grapheme which

00:02:22,420 --> 00:02:28,030
is the smallest unit of a writing system

00:02:24,970 --> 00:02:30,670
of any given language now the world

00:02:28,030 --> 00:02:33,459
writing systems website presents one

00:02:30,670 --> 00:02:36,069
glyph of each of the world's writing

00:02:33,459 --> 00:02:37,940
systems and it is the first step of the

00:02:36,069 --> 00:02:40,520
missing scripts project which is a

00:02:37,940 --> 00:02:43,460
long-term initiative to identify writing

00:02:40,520 --> 00:02:45,080
systems which are not yet encoded in the

00:02:43,460 --> 00:02:49,700
unicode standard and right now there are

00:02:45,080 --> 00:02:52,790
still 146 scripts that cannot be found

00:02:49,700 --> 00:02:54,920
in Unicode now a large number of the

00:02:52,790 --> 00:02:57,620
world's writing systems are alphabetic

00:02:54,920 --> 00:02:59,660
in nature we're a relatively small set

00:02:57,620 --> 00:03:02,840
of letters can be combined in a myriad

00:02:59,660 --> 00:03:05,690
of ways to form words phrases sentences

00:03:02,840 --> 00:03:08,540
all of which become a visual

00:03:05,690 --> 00:03:10,880
representation of the spoken word now

00:03:08,540 --> 00:03:13,130
currently in the dominant writing system

00:03:10,880 --> 00:03:15,320
is the Latin alphabet originating from

00:03:13,130 --> 00:03:17,720
Italy in the seventh century it has its

00:03:15,320 --> 00:03:20,240
roots in the estroux skin' Greek and

00:03:17,720 --> 00:03:23,030
Phoenician alphabet and the writing

00:03:20,240 --> 00:03:25,130
system spread with the expansion of the

00:03:23,030 --> 00:03:27,740
Roman Empire and yet again in the early

00:03:25,130 --> 00:03:30,260
modern period during which massive waves

00:03:27,740 --> 00:03:33,050
of European colonization of the Americas

00:03:30,260 --> 00:03:35,180
of Oceania parts of Africa and Asia took

00:03:33,050 --> 00:03:37,460
place and results and numbers that you

00:03:35,180 --> 00:03:40,130
know look like this with Chinese and

00:03:37,460 --> 00:03:42,980
Arabic a very distant second and third

00:03:40,130 --> 00:03:46,190
and a geographic distribution that looks

00:03:42,980 --> 00:03:48,800
like this where the dark areas represent

00:03:46,190 --> 00:03:51,080
countries who only use the Latin script

00:03:48,800 --> 00:03:53,209
the lighter areas show countries that

00:03:51,080 --> 00:03:55,910
use the Latin script in addition to

00:03:53,209 --> 00:03:58,640
others and even the gray areas have

00:03:55,910 --> 00:04:01,400
Latin script alphabets as an unofficial

00:03:58,640 --> 00:04:05,239
second language or transliteration that

00:04:01,400 --> 00:04:05,810
sort of thing of course not all latin

00:04:05,239 --> 00:04:08,019
scripts

00:04:05,810 --> 00:04:10,910
use the same alphabet and neither are

00:04:08,019 --> 00:04:13,580
alphabets restricted to latin scripts

00:04:10,910 --> 00:04:17,000
alone all 26 letters in the English

00:04:13,580 --> 00:04:19,190
alphabet are fairly vanilla no

00:04:17,000 --> 00:04:21,830
diacritics no circumflex errs no

00:04:19,190 --> 00:04:23,720
ligatures unlike romanian or german for

00:04:21,830 --> 00:04:25,640
example and we relate this back to

00:04:23,720 --> 00:04:28,040
typography and the concept of

00:04:25,640 --> 00:04:30,410
prefabricated letters when we pick

00:04:28,040 --> 00:04:32,660
typefaces be it in the physical or the

00:04:30,410 --> 00:04:35,620
digital world they may be instances

00:04:32,660 --> 00:04:38,900
where a particular characters glyph is

00:04:35,620 --> 00:04:40,850
missing from the typeface so what I'd

00:04:38,900 --> 00:04:44,440
lifts then well let's take a look at

00:04:40,850 --> 00:04:47,810
some examples this very strong sturdy M

00:04:44,440 --> 00:04:50,449
that's a glyph oh look a lovely

00:04:47,810 --> 00:04:53,749
collection of pixels that's also a glyph

00:04:50,449 --> 00:04:56,509
uh-huh vector image that can also be a

00:04:53,749 --> 00:04:59,150
glyph so a glyph is the specific shape

00:04:56,509 --> 00:05:01,039
of a letter or character of a particular

00:04:59,150 --> 00:05:02,990
font now in the digital world where

00:05:01,039 --> 00:05:05,029
everything is data glyphs can be

00:05:02,990 --> 00:05:06,710
described as an array of pixels

00:05:05,029 --> 00:05:08,569
collection of vector images or even

00:05:06,710 --> 00:05:10,939
paths of Bezier curves and straight

00:05:08,569 --> 00:05:13,009
lines and the next question would be

00:05:10,939 --> 00:05:15,139
what about fonts what are those then our

00:05:13,009 --> 00:05:17,240
forms can be thought of as collections

00:05:15,139 --> 00:05:19,520
of glyphs so in the world of metal

00:05:17,240 --> 00:05:20,930
typesetting these are fonts and some of

00:05:19,520 --> 00:05:23,539
you may have seen you know drawers

00:05:20,930 --> 00:05:26,449
containing individual metal sorts used

00:05:23,539 --> 00:05:27,110
for letterpress printing and the digital

00:05:26,449 --> 00:05:29,180
world

00:05:27,110 --> 00:05:31,639
these are fonts specifically these are

00:05:29,180 --> 00:05:33,860
font files and different font formats

00:05:31,639 --> 00:05:36,169
store information about the font like

00:05:33,860 --> 00:05:37,400
that glyphs they're encodings metadata

00:05:36,169 --> 00:05:39,310
about their font a little bit

00:05:37,400 --> 00:05:41,629
differently depending on how the

00:05:39,310 --> 00:05:44,300
specifications were written now given

00:05:41,629 --> 00:05:46,249
this is Jas Heroes and I'm clearly not

00:05:44,300 --> 00:05:48,259
talking about anything related to

00:05:46,249 --> 00:05:50,360
JavaScript I would at least keep it

00:05:48,259 --> 00:05:52,809
really related to the web you know

00:05:50,360 --> 00:05:56,149
trying to keep things remotely relevant

00:05:52,809 --> 00:05:59,120
so content languages on the web they

00:05:56,149 --> 00:06:01,639
look like this where 54% of websites are

00:05:59,120 --> 00:06:04,399
in English now can you take a guess at

00:06:01,639 --> 00:06:05,919
how many native English speakers they

00:06:04,399 --> 00:06:11,089
are in the world today

00:06:05,919 --> 00:06:13,430
anybody fine five percent right on so

00:06:11,089 --> 00:06:15,740
the distribution of languages is much

00:06:13,430 --> 00:06:19,249
more spread out in the real world than

00:06:15,740 --> 00:06:22,009
on the web with Chinese speakers topping

00:06:19,249 --> 00:06:24,399
the charts about 17% and Spanish coming

00:06:22,009 --> 00:06:28,339
in next at 6.4%

00:06:24,399 --> 00:06:30,800
but writing systems are more than just a

00:06:28,339 --> 00:06:33,439
means of communication they're also a

00:06:30,800 --> 00:06:37,459
reflection of a people's culture their

00:06:33,439 --> 00:06:39,259
spirituality and even their soul as more

00:06:37,459 --> 00:06:41,629
and more of our communications move on

00:06:39,259 --> 00:06:43,810
to the digital realm and into the online

00:06:41,629 --> 00:06:46,969
world it is important that we preserve

00:06:43,810 --> 00:06:48,529
language diversity it is crucial that a

00:06:46,969 --> 00:06:51,080
technology meant to be ubiquitous

00:06:48,529 --> 00:06:53,599
supports creation of local content

00:06:51,080 --> 00:06:55,520
across the world and that every writing

00:06:53,599 --> 00:06:59,769
system in the world can be correctly

00:06:55,520 --> 00:07:01,879
rendered on the web so let's assume that

00:06:59,769 --> 00:07:03,900
Unicode supports the requisite

00:07:01,879 --> 00:07:05,820
characters for a particular language

00:07:03,900 --> 00:07:07,680
and that typeface designers have taken

00:07:05,820 --> 00:07:09,990
the effort to support that language by

00:07:07,680 --> 00:07:12,750
designing all the relevant glyphs so how

00:07:09,990 --> 00:07:14,310
can we as people who implement content

00:07:12,750 --> 00:07:16,139
on the web make sure that we are doing

00:07:14,310 --> 00:07:18,810
our part in this effort to make sure

00:07:16,139 --> 00:07:20,490
languages are presented correctly now we

00:07:18,810 --> 00:07:22,770
can start by understanding a bit more

00:07:20,490 --> 00:07:25,440
about digital forms and typesetting for

00:07:22,770 --> 00:07:26,850
the web declaring a Content language on

00:07:25,440 --> 00:07:28,889
an element is one of the most basic

00:07:26,850 --> 00:07:30,690
things we can do because it identifies

00:07:28,889 --> 00:07:33,090
the specific written form of the

00:07:30,690 --> 00:07:35,850
language to be used in that element aka

00:07:33,090 --> 00:07:37,680
the content writing system now this is

00:07:35,850 --> 00:07:39,870
important because language and writing

00:07:37,680 --> 00:07:41,660
system conventions affect lots of

00:07:39,870 --> 00:07:42,930
typographic effects like line breaking

00:07:41,660 --> 00:07:46,080
hyphenation

00:07:42,930 --> 00:07:48,840
glyph substitution and so more so for

00:07:46,080 --> 00:07:51,389
CSS language specific typographic

00:07:48,840 --> 00:07:54,960
tailoring czar only applied when content

00:07:51,389 --> 00:07:57,270
language is explicitly declared so it is

00:07:54,960 --> 00:08:00,240
in our best interest to tell the browser

00:07:57,270 --> 00:08:03,389
exactly what language our content is in

00:08:00,240 --> 00:08:06,150
to ensure a higher quality typographic

00:08:03,389 --> 00:08:07,770
experiences for our users but before we

00:08:06,150 --> 00:08:09,870
go deeper into typesetting let's talk

00:08:07,770 --> 00:08:12,720
about the characters that were trying to

00:08:09,870 --> 00:08:15,870
typeset first so the earliest digital

00:08:12,720 --> 00:08:17,880
fonts were pixel based bitmaps okay for

00:08:15,870 --> 00:08:19,949
low resolution screens but problematic

00:08:17,880 --> 00:08:21,900
when content needed to be printed and

00:08:19,949 --> 00:08:24,570
one of the solutions to this problem

00:08:21,900 --> 00:08:27,419
came from Adobe founder John Warner who

00:08:24,570 --> 00:08:29,340
created PostScript in 1985 the very

00:08:27,419 --> 00:08:32,789
first vector font and it was very

00:08:29,340 --> 00:08:35,339
popular so TrueType TTF was Apple and

00:08:32,789 --> 00:08:37,529
Microsoft's answer to Adobe's font

00:08:35,339 --> 00:08:39,839
monopoly Microsoft came up with few type

00:08:37,529 --> 00:08:41,729
opened in 94 and eventually Adobe joined

00:08:39,839 --> 00:08:44,910
in and together they developed something

00:08:41,729 --> 00:08:46,890
called open type ODF now Microsoft also

00:08:44,910 --> 00:08:49,290
came up with this thing called IOT or

00:08:46,890 --> 00:08:52,290
embedded open type and they tried to

00:08:49,290 --> 00:08:55,230
submit this as a w3c recommendation but

00:08:52,290 --> 00:08:56,910
it was rejected in favour of web open

00:08:55,230 --> 00:08:59,339
font format or whoof

00:08:56,910 --> 00:09:01,320
now off to is merely an improvement over

00:08:59,339 --> 00:09:04,260
Wolff with significantly better

00:09:01,320 --> 00:09:06,209
compression rates so please continue to

00:09:04,260 --> 00:09:12,510
indulge me in this walk back in time

00:09:06,209 --> 00:09:14,310
back to 1996 when CSS first became a w3c

00:09:12,510 --> 00:09:16,920
recommendation there was a font

00:09:14,310 --> 00:09:17,680
properties section defining font

00:09:16,920 --> 00:09:19,990
families

00:09:17,680 --> 00:09:22,570
Varian weight size plus font as a

00:09:19,990 --> 00:09:25,120
shorthand and there was also the you

00:09:22,570 --> 00:09:28,960
know infamous font tag introduced in

00:09:25,120 --> 00:09:32,200
HTML 3.2 to define font size color and

00:09:28,960 --> 00:09:35,440
face for its content via attributes now

00:09:32,200 --> 00:09:40,420
this tag is now obsolete you're advised

00:09:35,440 --> 00:09:42,970
not to use it no you do you now you can

00:09:40,420 --> 00:09:45,550
clearly specify different font families

00:09:42,970 --> 00:09:48,130
although they were limited just system

00:09:45,550 --> 00:09:50,110
fonts but not long after there was a

00:09:48,130 --> 00:09:52,420
working draft which proposed the

00:09:50,110 --> 00:09:55,360
possibility of loading font data from

00:09:52,420 --> 00:09:57,250
external sources via URL and this was

00:09:55,360 --> 00:09:59,410
the earliest public instance I could

00:09:57,250 --> 00:10:02,050
find of the app font face room now the

00:09:59,410 --> 00:10:03,550
original five font properties still

00:10:02,050 --> 00:10:03,910
around they haven't changed all that

00:10:03,550 --> 00:10:06,130
much

00:10:03,910 --> 00:10:08,380
though with the advent of variable fonts

00:10:06,130 --> 00:10:09,850
more values are available for use and

00:10:08,380 --> 00:10:12,760
much of the latest and greatest can be

00:10:09,850 --> 00:10:15,459
found in level 4 of the CSS fonts

00:10:12,760 --> 00:10:18,010
specification and generic font families

00:10:15,459 --> 00:10:20,320
were introduced in CSS too and they left

00:10:18,010 --> 00:10:22,779
it up to the user agents to provide

00:10:20,320 --> 00:10:25,390
reasonable default choices which

00:10:22,779 --> 00:10:28,510
expresses the characteristics of each

00:10:25,390 --> 00:10:31,450
family as well as possible it's just

00:10:28,510 --> 00:10:34,510
very laissez-faire if you ask me for

00:10:31,450 --> 00:10:36,250
this from the specification writers now

00:10:34,510 --> 00:10:38,140
there's an algorithm browsers used to

00:10:36,250 --> 00:10:40,390
determine which fonts to load in use and

00:10:38,140 --> 00:10:41,950
even though it's expanded quite a lot

00:10:40,390 --> 00:10:44,080
over the past two decades this is a

00:10:41,950 --> 00:10:45,820
general idea of what goes on underneath

00:10:44,080 --> 00:10:49,120
the hood of your browser now if the user

00:10:45,820 --> 00:10:51,610
agent will first take the first family

00:10:49,120 --> 00:10:54,310
name defined in the font family property

00:10:51,610 --> 00:10:55,839
now if it's a generic family keyword the

00:10:54,310 --> 00:10:58,390
you a will just pick the one it always

00:10:55,839 --> 00:11:00,430
users and load that otherwise I'll try

00:10:58,390 --> 00:11:03,940
to find the family from the fonts

00:11:00,430 --> 00:11:06,459
declare in app font face once matched

00:11:03,940 --> 00:11:08,800
the you a will assemble a set of font

00:11:06,459 --> 00:11:10,870
faces in the family then pick the

00:11:08,800 --> 00:11:13,600
appropriate font face based on declared

00:11:10,870 --> 00:11:16,450
font properties but if no matching face

00:11:13,600 --> 00:11:19,360
exists or if the matched face is missing

00:11:16,450 --> 00:11:21,640
the glyph that needs to be rendered then

00:11:19,360 --> 00:11:24,310
the next family is considered the you a

00:11:21,640 --> 00:11:26,560
runs through the steps again and once a

00:11:24,310 --> 00:11:29,680
font face is matched the font will be

00:11:26,560 --> 00:11:30,840
loaded if all the font family names have

00:11:29,680 --> 00:11:33,120
been run through and

00:11:30,840 --> 00:11:35,250
you know font face matches a system

00:11:33,120 --> 00:11:37,770
fallback font will be called into play

00:11:35,250 --> 00:11:39,480
now if a character cannot be displayed

00:11:37,770 --> 00:11:41,610
using any font at all

00:11:39,480 --> 00:11:44,730
for example this famous or maybe

00:11:41,610 --> 00:11:47,130
infamous beiong Chinese character you

00:11:44,730 --> 00:11:48,720
will end up with a symbol of the missing

00:11:47,130 --> 00:11:50,520
glyph like the background we endearingly

00:11:48,720 --> 00:11:52,470
call these tofu characters which

00:11:50,520 --> 00:11:54,930
personally I see much less of these days

00:11:52,470 --> 00:11:56,700
thanks to the widespread use of Unicode

00:11:54,930 --> 00:11:59,160
but you know well I see this sort of

00:11:56,700 --> 00:12:01,950
like blank square characters when the

00:11:59,160 --> 00:12:03,450
latest emojis get released and your

00:12:01,950 --> 00:12:06,540
program doesn't support them yet that's

00:12:03,450 --> 00:12:08,910
when I see along these empty squares so

00:12:06,540 --> 00:12:11,010
this is an example of the lovely app

00:12:08,910 --> 00:12:12,570
font face rule and if you've ever tried

00:12:11,010 --> 00:12:14,760
loading web fonts before you have

00:12:12,570 --> 00:12:16,800
probably written something similar and

00:12:14,760 --> 00:12:19,560
given the support status these days it's

00:12:16,800 --> 00:12:22,890
fairly safe to write just wolf and Wharf

00:12:19,560 --> 00:12:25,410
to now some fun facts about the font

00:12:22,890 --> 00:12:27,300
face rule it may have many descriptors

00:12:25,410 --> 00:12:30,300
but only these two the font family and

00:12:27,300 --> 00:12:33,810
source mandatory now the font family

00:12:30,300 --> 00:12:36,030
descriptor works purely like a label so

00:12:33,810 --> 00:12:38,430
that we can reference the font data in

00:12:36,030 --> 00:12:40,860
later CSS declaration so maybe you're

00:12:38,430 --> 00:12:42,660
using a font like I'm say Helvetica

00:12:40,860 --> 00:12:45,420
right you don't have to call it

00:12:42,660 --> 00:12:48,420
Helvetica in the font family district

00:12:45,420 --> 00:12:51,270
descriptor you could call it like Somali

00:12:48,420 --> 00:12:53,850
and it would still work you know you can

00:12:51,270 --> 00:12:56,370
name it whatever you want now the sauce

00:12:53,850 --> 00:12:57,780
descriptor tells the browser where to

00:12:56,370 --> 00:13:00,570
find the font data and it could be an

00:12:57,780 --> 00:13:03,180
external URL or a local phone the font

00:13:00,570 --> 00:13:05,700
hint is optional though so descriptors

00:13:03,180 --> 00:13:08,130
for style weight stretch they're used to

00:13:05,700 --> 00:13:10,890
match styles to a particular typeface in

00:13:08,130 --> 00:13:14,310
the later CSS declarations now April

00:13:10,890 --> 00:13:19,110
Fool's Day couple weeks ago if you're as

00:13:14,310 --> 00:13:21,360
annoying a person as I am you could swap

00:13:19,110 --> 00:13:24,000
some font descriptors around maybe you

00:13:21,360 --> 00:13:25,710
know so the italics and the bolts and

00:13:24,000 --> 00:13:27,690
then your teamates we left utterly

00:13:25,710 --> 00:13:28,920
perplexed to why or there M elements

00:13:27,690 --> 00:13:31,350
suddenly turned bold

00:13:28,920 --> 00:13:33,420
I mean if office pranks are your thing

00:13:31,350 --> 00:13:35,820
I'm just saying it's it's not my fault

00:13:33,420 --> 00:13:40,470
if you get in trouble hashtag don't get

00:13:35,820 --> 00:13:42,810
fired at this point I want to shout out

00:13:40,470 --> 00:13:43,900
the Firefox font tools and the entire

00:13:42,810 --> 00:13:45,880
team who are

00:13:43,900 --> 00:13:46,960
dev tools because at some point last

00:13:45,880 --> 00:13:48,610
year Patrick blosser

00:13:46,960 --> 00:13:50,440
who does a lot of work on the front

00:13:48,610 --> 00:13:52,240
tools he picked me on Twitter about a

00:13:50,440 --> 00:13:54,670
feature for detecting missing characters

00:13:52,240 --> 00:13:56,980
now I'm sure he had been thinking about

00:13:54,670 --> 00:13:58,930
this feature for a long while but it was

00:13:56,980 --> 00:14:00,820
still an amazing surprise to me to see

00:13:58,930 --> 00:14:03,280
that he already had a working prototype

00:14:00,820 --> 00:14:04,900
the following day now the fonts panel in

00:14:03,280 --> 00:14:06,970
Firefox has been around for a very long

00:14:04,900 --> 00:14:09,610
time possibly since I don't know version

00:14:06,970 --> 00:14:11,680
24 but over the past two years Firefox

00:14:09,610 --> 00:14:13,390
has really upped their dev tools game

00:14:11,680 --> 00:14:15,790
they've got by far the best grid

00:14:13,390 --> 00:14:18,820
inspector if now got a flexbox inspector

00:14:15,790 --> 00:14:22,420
shapes editor I could go on but funds

00:14:18,820 --> 00:14:23,920
right so version 63 shipped with a suite

00:14:22,420 --> 00:14:25,930
of font tools including the more

00:14:23,920 --> 00:14:28,120
polished up version of the font

00:14:25,930 --> 00:14:30,430
highlighter demonstrated in these treats

00:14:28,120 --> 00:14:33,340
and this is how it looks like in action

00:14:30,430 --> 00:14:35,380
where you can see which fonts I loaded

00:14:33,340 --> 00:14:37,870
on the page and which fonts are loaded

00:14:35,380 --> 00:14:39,400
for which characters on the page and

00:14:37,870 --> 00:14:41,770
there's also information about all the

00:14:39,400 --> 00:14:43,360
fonts on the page in the bottom section

00:14:41,770 --> 00:14:46,480
as there as well and you can check on

00:14:43,360 --> 00:14:47,980
how you vote your font face rule now

00:14:46,480 --> 00:14:50,140
this tool comes in very handy for me

00:14:47,980 --> 00:14:51,760
especially when I have just a handful of

00:14:50,140 --> 00:14:54,250
words in a foreign language and the

00:14:51,760 --> 00:14:55,990
typeface that I picked somehow does not

00:14:54,250 --> 00:14:58,930
support that language so for example

00:14:55,990 --> 00:15:02,500
this nice little around San serif it's

00:14:58,930 --> 00:15:04,150
called railway developed by a foundry

00:15:02,500 --> 00:15:06,010
called the League of movable-type it's

00:15:04,150 --> 00:15:09,370
pretty nice in my opinion but it does

00:15:06,010 --> 00:15:10,870
not support silly Cyrillic characters so

00:15:09,370 --> 00:15:12,550
what we can do here is that we can find

00:15:10,870 --> 00:15:15,160
a form that does support those

00:15:12,550 --> 00:15:17,410
characters and then it's still somewhat

00:15:15,160 --> 00:15:19,060
resembles the design of my original font

00:15:17,410 --> 00:15:21,310
and then utilize something called a

00:15:19,060 --> 00:15:23,800
unicorn range descriptor to create a

00:15:21,310 --> 00:15:25,660
composite font now it's got a composite

00:15:23,800 --> 00:15:27,820
font because it makes us glyphs from

00:15:25,660 --> 00:15:29,560
different fonts for different scripts

00:15:27,820 --> 00:15:32,170
now to deal with the fact that railway

00:15:29,560 --> 00:15:33,760
does not support Cyrillic letters I use

00:15:32,170 --> 00:15:35,380
the Unicode range descriptor here to

00:15:33,760 --> 00:15:37,630
tell the browser to load the other font

00:15:35,380 --> 00:15:39,700
that comforta when it encounters any

00:15:37,630 --> 00:15:41,860
Cyrillic characters so remember that for

00:15:39,700 --> 00:15:44,290
font face rules the font family is just

00:15:41,860 --> 00:15:46,230
label so what we've done here is create

00:15:44,290 --> 00:15:49,270
a composite form that uses the name

00:15:46,230 --> 00:15:51,460
railway when actuality it loads two

00:15:49,270 --> 00:15:53,740
different font files depending on which

00:15:51,460 --> 00:15:55,630
characters need to be displayed and the

00:15:53,740 --> 00:15:56,760
form highlighter reveals what the

00:15:55,630 --> 00:15:58,920
browser does when

00:15:56,760 --> 00:16:00,810
counter such a scenario where railway is

00:15:58,920 --> 00:16:02,640
the font family descriptor where you can

00:16:00,810 --> 00:16:04,980
see the Firefox is actually loading both

00:16:02,640 --> 00:16:07,890
railway and comforta and the font tools

00:16:04,980 --> 00:16:09,570
also reveal which font format the

00:16:07,890 --> 00:16:14,070
browser is using as well at the bottom

00:16:09,570 --> 00:16:16,080
part there now CSS for fonts and text

00:16:14,070 --> 00:16:18,240
these are typesetting tools for the web

00:16:16,080 --> 00:16:20,700
and when you use them in your CSS

00:16:18,240 --> 00:16:22,710
declarations imagine that you're running

00:16:20,700 --> 00:16:24,060
your own print workshop right and you're

00:16:22,710 --> 00:16:26,130
telling your apprentice in this case

00:16:24,060 --> 00:16:27,720
your browser that you need a font of a

00:16:26,130 --> 00:16:30,390
particular size a particular style

00:16:27,720 --> 00:16:32,160
weight etc and then your apprentice runs

00:16:30,390 --> 00:16:34,140
off to the back room where all the fonts

00:16:32,160 --> 00:16:36,600
are kept and tries to find the font that

00:16:34,140 --> 00:16:37,980
best matches your instructions from the

00:16:36,600 --> 00:16:40,230
descriptors that you assigned in the app

00:16:37,980 --> 00:16:42,000
font face room now there's quite a bit

00:16:40,230 --> 00:16:44,280
of work going on with fonts neatly and

00:16:42,000 --> 00:16:46,110
variable fonts built on top of some of

00:16:44,280 --> 00:16:48,720
the original properties like weight

00:16:46,110 --> 00:16:51,960
styling stretch to take in newer ranges

00:16:48,720 --> 00:16:56,100
of variation access values but there are

00:16:51,960 --> 00:16:57,660
plenty more variation axes for designers

00:16:56,100 --> 00:17:00,330
to play around with for example this is

00:16:57,660 --> 00:17:03,120
a font called movement so it uses this

00:17:00,330 --> 00:17:05,940
additional axis called space as you can

00:17:03,120 --> 00:17:07,829
see if I change the value of space here

00:17:05,940 --> 00:17:10,589
the design of the typeface actually

00:17:07,829 --> 00:17:12,300
changes as well and I can do it for

00:17:10,589 --> 00:17:15,150
weight so there's two axes to play with

00:17:12,300 --> 00:17:18,180
right now and this is one single font

00:17:15,150 --> 00:17:20,910
file so a lot of possibilities that we

00:17:18,180 --> 00:17:23,280
have with variable fonts and sometimes

00:17:20,910 --> 00:17:25,800
we pick a typeface without realizing

00:17:23,280 --> 00:17:27,839
that it only had one style so the

00:17:25,800 --> 00:17:30,420
browser will try to create in bold or

00:17:27,839 --> 00:17:33,060
italics on its own based on the regular

00:17:30,420 --> 00:17:35,850
font and the end result is and that

00:17:33,060 --> 00:17:38,790
green so under not and even under normal

00:17:35,850 --> 00:17:40,890
circumstances Chinese fonts we do not

00:17:38,790 --> 00:17:43,110
have Italian variants for those so we

00:17:40,890 --> 00:17:44,820
can set the font synthesis property to a

00:17:43,110 --> 00:17:49,020
value of none to tell the browser to

00:17:44,820 --> 00:17:50,910
just leave your beautiful font alone now

00:17:49,020 --> 00:17:52,470
for future properties were introduced in

00:17:50,910 --> 00:17:54,480
fonts level 3 and they allow us to

00:17:52,470 --> 00:17:56,430
utilize a variety of typographic

00:17:54,480 --> 00:17:58,650
features like sources ligatures old

00:17:56,430 --> 00:18:00,660
style numerals etc and these can help

00:17:58,650 --> 00:18:02,430
maintain typographic color and enhance

00:18:00,660 --> 00:18:04,140
the reading experience for your users

00:18:02,430 --> 00:18:06,120
now as long as the phone you're using

00:18:04,140 --> 00:18:07,770
supports these features you can toggle

00:18:06,120 --> 00:18:10,050
them with CSS

00:18:07,770 --> 00:18:12,540
now there's one particular font very

00:18:10,050 --> 00:18:15,030
property for East Asian text which allow

00:18:12,540 --> 00:18:16,860
us to control glyph substitution and

00:18:15,030 --> 00:18:19,650
positioning for Han characters now I

00:18:16,860 --> 00:18:22,800
know that probably nobody else reads

00:18:19,650 --> 00:18:24,840
Chinese so just take a look at the

00:18:22,800 --> 00:18:28,500
characters on the screen as I changed

00:18:24,840 --> 00:18:30,480
this value to traditional the words

00:18:28,500 --> 00:18:32,820
themselves they are exactly the same

00:18:30,480 --> 00:18:34,590
words but the browser vendors the glyphs

00:18:32,820 --> 00:18:37,290
a little bit differently based on the

00:18:34,590 --> 00:18:39,600
value now there's also one for Japanese

00:18:37,290 --> 00:18:41,340
because Japanese have sun standards

00:18:39,600 --> 00:18:44,640
called the Japanese industrial standard

00:18:41,340 --> 00:18:47,130
for different glyphs as well so it's all

00:18:44,640 --> 00:18:51,270
like a subset for Japanese characters

00:18:47,130 --> 00:18:53,400
and this is CSS controlled now the user

00:18:51,270 --> 00:18:56,130
agent will refer to the Lang attribute

00:18:53,400 --> 00:18:58,710
when rendering text but if a selected

00:18:56,130 --> 00:19:00,690
phone lacks support for that language we

00:18:58,710 --> 00:19:02,970
can ask the browser to use taifa graphic

00:19:00,690 --> 00:19:05,370
conventions of a related language that

00:19:02,970 --> 00:19:08,610
the font you picked does support so

00:19:05,370 --> 00:19:10,590
here's a martyr for macedonian text so

00:19:08,610 --> 00:19:13,440
just imagine that the font being used

00:19:10,590 --> 00:19:15,810
does not support macedonian but somehow

00:19:13,440 --> 00:19:19,650
has the characters for say serbian which

00:19:15,810 --> 00:19:22,620
is a related language so by setting the

00:19:19,650 --> 00:19:25,470
font language override property to SRB

00:19:22,620 --> 00:19:27,960
the Macedonian text will be rendered

00:19:25,470 --> 00:19:32,550
with Serbian - graphic conventions but

00:19:27,960 --> 00:19:34,770
still be recognized as Macedonian now a

00:19:32,550 --> 00:19:36,480
friend of mine he built a tool that can

00:19:34,770 --> 00:19:39,000
tell you what features that a font has

00:19:36,480 --> 00:19:41,400
and the appropriate CSS you can use to

00:19:39,000 --> 00:19:43,980
toggle them and it also has the best

00:19:41,400 --> 00:19:48,090
name of any app I've ever seen

00:19:43,980 --> 00:19:54,420
let me explain listen listen what come

00:19:48,090 --> 00:19:56,460
my fondue what can my font do hey yes

00:19:54,420 --> 00:19:58,890
that's why you should check it out best

00:19:56,460 --> 00:20:01,170
name ever now if you're interested in

00:19:58,890 --> 00:20:02,910
web typography at all I highly recommend

00:20:01,170 --> 00:20:04,350
getting a copy of web typography by

00:20:02,910 --> 00:20:06,600
Richard Rutter because it is the most

00:20:04,350 --> 00:20:08,820
comprehensive resource that I personally

00:20:06,600 --> 00:20:11,040
know of this is my own personal copy and

00:20:08,820 --> 00:20:13,020
also do watch this great top by him at

00:20:11,040 --> 00:20:15,300
CSS Day last year we go through all

00:20:13,020 --> 00:20:17,820
these golden rules for web typography

00:20:15,300 --> 00:20:19,320
and these rules are universal regardless

00:20:17,820 --> 00:20:22,909
of language but there are certain

00:20:19,320 --> 00:20:25,549
language specific features that CSS can

00:20:22,909 --> 00:20:28,309
address so most of the time that use

00:20:25,549 --> 00:20:30,859
text transform for case adjustments and

00:20:28,309 --> 00:20:33,379
capitalization but it actually does take

00:20:30,859 --> 00:20:36,229
into account numerous language specific

00:20:33,379 --> 00:20:39,409
case mapping rules so for example the

00:20:36,229 --> 00:20:41,239
German as it becomes a double s in

00:20:39,409 --> 00:20:44,840
uppercase so we can like do some

00:20:41,239 --> 00:20:47,119
toggling Greek vowels lose their accent

00:20:44,840 --> 00:20:49,210
when the entire word is uppercase stuff

00:20:47,119 --> 00:20:52,639
like that there's also a value called

00:20:49,210 --> 00:20:54,590
full-size kana that only applies to the

00:20:52,639 --> 00:20:56,929
text at the bottom because this is

00:20:54,590 --> 00:21:00,649
mostly used for Ruby annotations in the

00:20:56,929 --> 00:21:04,849
Japanese language and here here we have

00:21:00,649 --> 00:21:06,859
five inline boxes now this situation

00:21:04,849 --> 00:21:09,919
there's enough room for all five boxes

00:21:06,859 --> 00:21:11,929
to fit into a single line box but when

00:21:09,919 --> 00:21:15,259
there isn't enough room let me blow up

00:21:11,929 --> 00:21:18,349
the font size the inline boxes will be

00:21:15,259 --> 00:21:21,349
broken across line boxes and the line

00:21:18,349 --> 00:21:26,029
break no you can't see anyway the line

00:21:21,349 --> 00:21:27,289
break here this is known okay this is

00:21:26,029 --> 00:21:29,599
known as line bang anyway these

00:21:27,289 --> 00:21:32,419
particular lines have been broken due to

00:21:29,599 --> 00:21:34,879
content wrapping so this is we also call

00:21:32,419 --> 00:21:36,649
it something like a soft wrap brick

00:21:34,879 --> 00:21:38,779
now if wrapping is enabled the user

00:21:36,649 --> 00:21:41,539
agent has to minimize the amount of

00:21:38,779 --> 00:21:43,759
content overflowing a line by wrapping

00:21:41,539 --> 00:21:45,769
the line at a software opportunity if

00:21:43,759 --> 00:21:47,869
one exists or in English this is fine

00:21:45,769 --> 00:21:50,509
for most writing systems software

00:21:47,869 --> 00:21:53,330
opportunities occur at word boundaries

00:21:50,509 --> 00:21:57,379
where spaces or punctuation are used

00:21:53,330 --> 00:22:00,169
explicitly to separate words and if

00:21:57,379 --> 00:22:02,320
you're thinking breaking lines how hard

00:22:00,169 --> 00:22:05,090
can it be well there's a lot of new ones

00:22:02,320 --> 00:22:06,919
because weren't breaking works slightly

00:22:05,090 --> 00:22:08,479
differently depending on the language

00:22:06,919 --> 00:22:11,539
were type setting for for example

00:22:08,479 --> 00:22:14,389
English wraps at spaces but for Japanese

00:22:11,539 --> 00:22:17,359
and Chinese characters the break is per

00:22:14,389 --> 00:22:19,759
character usually but not always because

00:22:17,359 --> 00:22:22,249
line breaks are prohibited before

00:22:19,759 --> 00:22:24,289
certain punctuation marks a number of

00:22:22,249 --> 00:22:27,320
Southeast Asian scripts are written

00:22:24,289 --> 00:22:29,599
without spaces between words then text

00:22:27,320 --> 00:22:31,159
is wrapped at syllable boundaries in

00:22:29,599 --> 00:22:33,649
addition to word boundaries I could go

00:22:31,159 --> 00:22:35,839
on here and there is interplay between

00:22:33,649 --> 00:22:36,640
these four properties here to provide

00:22:35,839 --> 00:22:38,679
developers

00:22:36,640 --> 00:22:41,170
a little bit more precise control over

00:22:38,679 --> 00:22:43,510
line breaking because some rules take

00:22:41,170 --> 00:22:45,910
precedence over others if both are

00:22:43,510 --> 00:22:48,929
present or some only take effect if

00:22:45,910 --> 00:22:51,160
whitespace allows wrapping for example

00:22:48,929 --> 00:22:54,429
now I highly recommend watching this

00:22:51,160 --> 00:22:56,350
talk by florian Raval co-editor of the

00:22:54,429 --> 00:22:59,140
CSS text specification because he

00:22:56,350 --> 00:22:59,980
explains all of this in his talk at CSS

00:22:59,140 --> 00:23:02,830
last year as well

00:22:59,980 --> 00:23:04,900
and if you're not sure what's going on

00:23:02,830 --> 00:23:06,490
at all or you're all just very confused

00:23:04,900 --> 00:23:08,380
about all this just set the Lang

00:23:06,490 --> 00:23:09,850
attribute because setting the Lang

00:23:08,380 --> 00:23:12,340
attribute takes care of some of this

00:23:09,850 --> 00:23:16,840
stuff for you some which is better than

00:23:12,340 --> 00:23:18,820
none text justification it's not a

00:23:16,840 --> 00:23:21,220
trivial computer science problem because

00:23:18,820 --> 00:23:23,440
I've seen programming assignments for

00:23:21,220 --> 00:23:25,960
Markov chains asking for text

00:23:23,440 --> 00:23:28,000
justification algorithms and whether we

00:23:25,960 --> 00:23:29,820
realize it or not most of us would have

00:23:28,000 --> 00:23:31,870
encountered at least two major

00:23:29,820 --> 00:23:34,330
justification algorithms we have the

00:23:31,870 --> 00:23:37,000
greedy algorithm which analyzes only a

00:23:34,330 --> 00:23:39,130
single line and the much more advanced

00:23:37,000 --> 00:23:41,440
enough plus algorithm which analyzes

00:23:39,130 --> 00:23:43,090
every line in a paragraph now design

00:23:41,440 --> 00:23:45,400
software with advanced typesetting

00:23:43,090 --> 00:23:48,280
capabilities like InDesign then use

00:23:45,400 --> 00:23:50,830
another plus but browsers sadly used the

00:23:48,280 --> 00:23:53,380
simple one possibly performance reasons

00:23:50,830 --> 00:23:56,650
I don't know but although we don't have

00:23:53,380 --> 00:23:58,900
a robust justification algorithm text

00:23:56,650 --> 00:24:00,700
level 3 does include the text justify

00:23:58,900 --> 00:24:04,360
property to allow some further tweaking

00:24:00,700 --> 00:24:08,740
of justified text so if I search for

00:24:04,360 --> 00:24:12,580
text justify web on Google the top

00:24:08,740 --> 00:24:14,740
result is titled don't fully don't use

00:24:12,580 --> 00:24:18,070
fully justified text alignment on your

00:24:14,740 --> 00:24:21,270
website and the next result is justify

00:24:18,070 --> 00:24:24,160
text with HTML and CSS don't do it

00:24:21,270 --> 00:24:27,400
it seems that justified text has a

00:24:24,160 --> 00:24:29,559
really bad rap on the web and this might

00:24:27,400 --> 00:24:31,540
be true for Latin based scripts but not

00:24:29,559 --> 00:24:33,940
so for Chinese characters which are also

00:24:31,540 --> 00:24:35,770
known as square characters because each

00:24:33,940 --> 00:24:38,650
character is composed with in a uniform

00:24:35,770 --> 00:24:40,630
square and Chinese texts can be typeset

00:24:38,650 --> 00:24:43,690
into neat rows and columns in fact it is

00:24:40,630 --> 00:24:45,520
ideal to do so however when there are

00:24:43,690 --> 00:24:47,710
both latin-based alphabets and Chinese

00:24:45,520 --> 00:24:48,970
characters is impossible for everything

00:24:47,710 --> 00:24:49,860
to line up both vertically and

00:24:48,970 --> 00:24:51,900
horizontally

00:24:49,860 --> 00:24:54,090
so the next best thing is to ensure the

00:24:51,900 --> 00:24:56,790
start and end of every line is aligned

00:24:54,090 --> 00:25:00,060
well so what we can do is we can make

00:24:56,790 --> 00:25:02,310
adjustments between adjacent typographic

00:25:00,060 --> 00:25:05,760
character units in Chinese texts with a

00:25:02,310 --> 00:25:09,450
value called inter character which is so

00:25:05,760 --> 00:25:13,160
hard to spell yeah so it lines up neatly

00:25:09,450 --> 00:25:15,750
when it's activated which is really nice

00:25:13,160 --> 00:25:18,390
now finally writing systems are not

00:25:15,750 --> 00:25:20,790
limited to just horizontal top to bottom

00:25:18,390 --> 00:25:23,370
traditionally East Asian languages were

00:25:20,790 --> 00:25:25,490
all written with vertically Arabic and

00:25:23,370 --> 00:25:27,390
Hebrew they returned from left to right

00:25:25,490 --> 00:25:29,790
so the writing mode property

00:25:27,390 --> 00:25:32,310
specifically caters for vertical writing

00:25:29,790 --> 00:25:33,900
on the web and the default is horizontal

00:25:32,310 --> 00:25:35,970
top to bottom and to change the

00:25:33,900 --> 00:25:38,910
direction to vertical we can use a

00:25:35,970 --> 00:25:41,100
vertical RL property or vertical L R

00:25:38,910 --> 00:25:42,540
there's a sideways option that has been

00:25:41,100 --> 00:25:44,490
moved to level four in the spec but

00:25:42,540 --> 00:25:47,100
Firefox already has it implemented so

00:25:44,490 --> 00:25:49,440
you can see it right here and when we

00:25:47,100 --> 00:25:51,300
rotate lines of text this affects the

00:25:49,440 --> 00:25:53,640
individual characters inside the line as

00:25:51,300 --> 00:25:55,770
well so again the Lang attribute is very

00:25:53,640 --> 00:25:57,870
important because browsers are smart

00:25:55,770 --> 00:25:59,850
enough to tell that Chinese characters

00:25:57,870 --> 00:26:02,250
which are dual Direction will always be

00:25:59,850 --> 00:26:03,720
displayed upright while horizontal only

00:26:02,250 --> 00:26:06,510
languages will have their characters

00:26:03,720 --> 00:26:08,490
rotated when vertical so this text

00:26:06,510 --> 00:26:10,170
orientation property we have here can be

00:26:08,490 --> 00:26:12,650
used to make all the characters up right

00:26:10,170 --> 00:26:15,240
or sideways depending on what you want

00:26:12,650 --> 00:26:17,370
the last property in the set is called

00:26:15,240 --> 00:26:19,800
text combine a write which addresses the

00:26:17,370 --> 00:26:21,420
issues of numerals and abbreviations in

00:26:19,800 --> 00:26:23,850
vertical text for example if your text

00:26:21,420 --> 00:26:25,770
contains say dates so this property lets

00:26:23,850 --> 00:26:27,900
us fit all the digits into the width of

00:26:25,770 --> 00:26:29,880
one character space and display them all

00:26:27,900 --> 00:26:31,920
up right and we have this very last

00:26:29,880 --> 00:26:34,050
value on the right called digits it has

00:26:31,920 --> 00:26:36,390
yet to be implemented in any browser but

00:26:34,050 --> 00:26:38,700
it really makes sense to have this sort

00:26:36,390 --> 00:26:40,890
of limit let me explain I mean four

00:26:38,700 --> 00:26:44,010
digits is probably the maximum you can

00:26:40,890 --> 00:26:46,800
squeeze into such a tiny space 7 looks

00:26:44,010 --> 00:26:50,730
very uncomfortable and 13 is just

00:26:46,800 --> 00:26:53,190
ridiculous so yes it's good to have a

00:26:50,730 --> 00:26:54,990
limit here now vertical text may be

00:26:53,190 --> 00:26:57,270
better suited for East Asian languages

00:26:54,990 --> 00:26:58,950
when it comes to full length body copy

00:26:57,270 --> 00:27:00,630
but that doesn't mean other languages

00:26:58,950 --> 00:27:01,870
can't get in on the fun we see

00:27:00,630 --> 00:27:04,870
vertically set

00:27:01,870 --> 00:27:06,430
next in print all the time now headers

00:27:04,870 --> 00:27:08,800
or short runs of text are actually

00:27:06,430 --> 00:27:11,110
relatively safe to typeset vertically

00:27:08,800 --> 00:27:13,870
and we can add some type of graphic

00:27:11,110 --> 00:27:15,940
variety to your web layouts so for

00:27:13,870 --> 00:27:19,240
example if you you have a short word

00:27:15,940 --> 00:27:21,370
here you can just do up write something

00:27:19,240 --> 00:27:25,630
like this in fact we can even you know

00:27:21,370 --> 00:27:28,510
combine different the writing mode

00:27:25,630 --> 00:27:30,340
property with say transforms so then you

00:27:28,510 --> 00:27:32,559
can sort of flip the text around as well

00:27:30,340 --> 00:27:36,580
so there are a lot of possibilities with

00:27:32,559 --> 00:27:39,340
modern CSS these days now I spoke a bit

00:27:36,580 --> 00:27:41,890
more about East Asian typography because

00:27:39,340 --> 00:27:44,470
Chinese is my mother tongue and I'm more

00:27:41,890 --> 00:27:46,270
involved with the Chinese layout task

00:27:44,470 --> 00:27:48,340
force but if you notice on the list at

00:27:46,270 --> 00:27:50,620
the very corner there are also layout

00:27:48,340 --> 00:27:52,630
task forces for numerous other scripts

00:27:50,620 --> 00:27:53,920
and this is definitely a step in the

00:27:52,630 --> 00:27:56,440
right direction when it comes to

00:27:53,920 --> 00:27:59,890
preserving language diversity on the web

00:27:56,440 --> 00:28:02,380
an ideographic language like Chinese was

00:27:59,890 --> 00:28:05,440
not a good candidate for movable-type

00:28:02,380 --> 00:28:07,660
printing the calligraphic style of

00:28:05,440 --> 00:28:10,240
Arabic writing also resulted in efforts

00:28:07,660 --> 00:28:12,610
to reduce the number of variations of

00:28:10,240 --> 00:28:15,460
letters and diacritical marks and such

00:28:12,610 --> 00:28:17,620
typographical compromises are akin to

00:28:15,460 --> 00:28:21,520
having the finest sculptures in the

00:28:17,620 --> 00:28:23,320
world caked in mud and dirt now I think

00:28:21,520 --> 00:28:26,020
that in the digital age presents an

00:28:23,320 --> 00:28:28,150
opportunity to clean off the dirt and

00:28:26,020 --> 00:28:31,330
mud of these scripts that have long had

00:28:28,150 --> 00:28:33,640
to compromise to get with the times our

00:28:31,330 --> 00:28:35,740
digital age is the age of light and

00:28:33,640 --> 00:28:38,110
electronic signals and there are far

00:28:35,740 --> 00:28:40,870
fewer limitations as compared to a

00:28:38,110 --> 00:28:42,700
physical medium like movable type so if

00:28:40,870 --> 00:28:45,460
the virtual world is being touted as a

00:28:42,700 --> 00:28:47,590
realm with limitless possibilities then

00:28:45,460 --> 00:28:50,440
it should be reasonable to expect that

00:28:47,590 --> 00:28:53,260
all of our scripts can be restored to

00:28:50,440 --> 00:28:55,559
their full artistic glory on the World

00:28:53,260 --> 00:28:55,559
Wide Web

00:28:57,760 --> 00:29:03,190
[Applause]

00:29:01,490 --> 00:29:06,239
[Music]

00:29:03,190 --> 00:29:06,239

YouTube URL: https://www.youtube.com/watch?v=yLQHDGRLOwQ


