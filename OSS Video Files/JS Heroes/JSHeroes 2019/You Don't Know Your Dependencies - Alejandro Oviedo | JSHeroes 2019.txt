Title: You Don't Know Your Dependencies - Alejandro Oviedo | JSHeroes 2019
Publication date: 2019-04-27
Playlist: JSHeroes 2019
Description: 
	If you’re building applications chances are your dependency tree is in the order of hundreds. That easily can scale up to at least a thousand for large applications (like popular OS projects Ghost or Keystone). Join me in my hindered journey to address a big elephant in the room: managing dependencies. Updating a dependency or following common practices shouldn’t have to be a mysterious thing. What’s the right thing to do in your package.json? Exact versions? Using a caret? What’s the reason behind lockfiles? What type of tooling is out there? I’ll present answers from my research to these common questions.
Captions: 
	00:00:00,070 --> 00:00:03,219
[Music]

00:00:13,950 --> 00:00:20,440
thank you very much well today I will be

00:00:17,530 --> 00:00:24,400
talking about how I don't know my

00:00:20,440 --> 00:00:26,890
dependencies before I continue let's let

00:00:24,400 --> 00:00:29,230
me introduce myself I'm Alejandro I'm

00:00:26,890 --> 00:00:31,449
from Buenos Aires Argentina if you want

00:00:29,230 --> 00:00:33,670
to talk about Macy just gone come on

00:00:31,449 --> 00:00:36,430
find me after the talk in the hall I

00:00:33,670 --> 00:00:38,739
would be very happy about it I worked

00:00:36,430 --> 00:00:42,100
mostly on back-end systems and

00:00:38,739 --> 00:00:44,140
JavaScript and I helped run node

00:00:42,100 --> 00:00:45,909
conversion Tina our conference back

00:00:44,140 --> 00:00:49,449
there and help with other communities

00:00:45,909 --> 00:00:52,449
that are local as well if you want to

00:00:49,449 --> 00:00:55,479
follow along the presentation you can do

00:00:52,449 --> 00:00:58,470
that on that link and you can find me on

00:00:55,479 --> 00:01:01,629
Twitter with that handle at the bottom

00:00:58,470 --> 00:01:04,780
before I continue I want to share a

00:01:01,629 --> 00:01:10,299
story about this awesome person leerin

00:01:04,780 --> 00:01:12,909
he was talking about a blog post on

00:01:10,299 --> 00:01:16,420
dependencies and how they particularly

00:01:12,909 --> 00:01:19,930
work with lock files so I reached out

00:01:16,420 --> 00:01:24,850
and to say I was interested in reviewing

00:01:19,930 --> 00:01:27,899
that that blog post so he sent the draft

00:01:24,850 --> 00:01:32,020
to me and we started a conversation and

00:01:27,899 --> 00:01:35,679
back then I realized that I was using

00:01:32,020 --> 00:01:38,649
log files until until then but I didn't

00:01:35,679 --> 00:01:43,240
really mean some of the key points about

00:01:38,649 --> 00:01:47,130
them and yeah I would say there was the

00:01:43,240 --> 00:01:51,729
spark that then they come into the

00:01:47,130 --> 00:01:55,469
representation for today I wanted to

00:01:51,729 --> 00:02:00,549
first start with some misguided concepts

00:01:55,469 --> 00:02:05,200
about log files dependencies let's go

00:02:00,549 --> 00:02:07,299
over pinning dependencies I heard that a

00:02:05,200 --> 00:02:09,280
lot of you like to you pee near

00:02:07,299 --> 00:02:12,610
dependencies which is great I won't say

00:02:09,280 --> 00:02:16,510
it's something bad but I wanted to

00:02:12,610 --> 00:02:20,380
display here maybe a graph some

00:02:16,510 --> 00:02:22,959
graphical explanation of the result that

00:02:20,380 --> 00:02:26,470
you get when you pin your dependency to

00:02:22,959 --> 00:02:29,260
be more explicit about

00:02:26,470 --> 00:02:32,110
pin your dependencies is when you put an

00:02:29,260 --> 00:02:34,990
exact number on your packet Jason right

00:02:32,110 --> 00:02:38,620
when you instead of using the caret or a

00:02:34,990 --> 00:02:42,430
range in your dependencies you put in a

00:02:38,620 --> 00:02:46,270
specific version for example 3 dot free

00:02:42,430 --> 00:02:50,530
or anything that you would want so let's

00:02:46,270 --> 00:02:54,430
say you have a happy dependency tree you

00:02:50,530 --> 00:02:57,700
have this on the on the top you would

00:02:54,430 --> 00:03:00,730
get the package or the application that

00:02:57,700 --> 00:03:03,100
you're building now and on the first

00:03:00,730 --> 00:03:05,710
level you would have what it's called

00:03:03,100 --> 00:03:09,970
your director premises your direct

00:03:05,710 --> 00:03:12,360
dependencies again we'll have other

00:03:09,970 --> 00:03:16,060
dependencies that will be your transient

00:03:12,360 --> 00:03:19,050
dependencies those dependencies if you

00:03:16,060 --> 00:03:22,870
pin if you only pin your dependencies

00:03:19,050 --> 00:03:26,610
those on the bottom that you can see on

00:03:22,870 --> 00:03:30,310
red will be resolved on at install time

00:03:26,610 --> 00:03:34,180
meaning that from one install to another

00:03:30,310 --> 00:03:36,640
those could change especially because an

00:03:34,180 --> 00:03:39,550
open source is very common to to take

00:03:36,640 --> 00:03:43,180
advantage of cember and referenced

00:03:39,550 --> 00:03:49,540
arrange in your libraries or in your

00:03:43,180 --> 00:03:53,310
modules another little known fact about

00:03:49,540 --> 00:03:57,459
dependencies is that you can cash them

00:03:53,310 --> 00:04:01,390
so that yan you are not dependent on the

00:03:57,459 --> 00:04:04,720
network to reinstall those so but that

00:04:01,390 --> 00:04:07,180
sure is a very very nice tool it's very

00:04:04,720 --> 00:04:10,750
straightforward and at the same time

00:04:07,180 --> 00:04:13,510
gives you a lot of additional features

00:04:10,750 --> 00:04:17,290
rather lanten cache your dependencies

00:04:13,510 --> 00:04:21,520
you can use it as a private registry as

00:04:17,290 --> 00:04:25,740
well in comparison to private modules

00:04:21,520 --> 00:04:29,230
provided by NPM another little known

00:04:25,740 --> 00:04:31,090
fact that I recently learned yesterday

00:04:29,230 --> 00:04:35,289
because a script that I was running

00:04:31,090 --> 00:04:38,080
failed is that MPN has the option to

00:04:35,289 --> 00:04:38,940
reference the file system in the

00:04:38,080 --> 00:04:42,360
dependencies

00:04:38,940 --> 00:04:46,880
the package.json who here knew about it

00:04:42,360 --> 00:04:51,420
that you can okay many of you maybe ten

00:04:46,880 --> 00:04:55,770
I really didn't knew that and had no

00:04:51,420 --> 00:04:59,190
idea I was like why is this a script

00:04:55,770 --> 00:05:02,210
failing and then I realized that I

00:04:59,190 --> 00:05:06,270
didn't had the the modules required for

00:05:02,210 --> 00:05:09,690
four to stall in my file system so if

00:05:06,270 --> 00:05:14,340
you want to do that you can do that by

00:05:09,690 --> 00:05:17,820
putting file in your dependency colon

00:05:14,340 --> 00:05:20,730
and then the reference to the directory

00:05:17,820 --> 00:05:23,040
you want to use I'm not sure if I at

00:05:20,730 --> 00:05:25,920
this point Jeff from NPM is saying oh no

00:05:23,040 --> 00:05:29,190
we should delete that I have no idea if

00:05:25,920 --> 00:05:32,910
that's a good practice or not I just

00:05:29,190 --> 00:05:35,400
learned that and I had to rethink I use

00:05:32,910 --> 00:05:38,010
case for that I don't really know why

00:05:35,400 --> 00:05:40,170
anyone would do that but the fact that

00:05:38,010 --> 00:05:47,040
you can is really cool awesome thank you

00:05:40,170 --> 00:05:50,760
Jeff related to log files a lot of

00:05:47,040 --> 00:05:53,100
package managers can provide and will

00:05:50,760 --> 00:05:55,950
provide a log file for you

00:05:53,100 --> 00:06:01,169
once you install your dependencies both

00:05:55,950 --> 00:06:05,760
NPM yarn or PM PM can take advantage of

00:06:01,169 --> 00:06:08,130
log files on four NPM and John they are

00:06:05,760 --> 00:06:12,720
very opinionated about it when you

00:06:08,130 --> 00:06:16,130
install NPM there's a message that it's

00:06:12,720 --> 00:06:23,370
telling you that you should push that

00:06:16,130 --> 00:06:26,010
package lock to your repository let's

00:06:23,370 --> 00:06:30,900
see what what you will get when you use

00:06:26,010 --> 00:06:33,600
this type of log files but first let me

00:06:30,900 --> 00:06:38,910
do a show of hands how many of you have

00:06:33,600 --> 00:06:43,740
used log files before okay I would say

00:06:38,910 --> 00:06:46,710
maybe a half that's very nice and raise

00:06:43,740 --> 00:06:50,210
your hand if you had any problem with

00:06:46,710 --> 00:06:50,210
log files at some point

00:06:50,630 --> 00:06:57,610
I think those are the same people I

00:06:53,450 --> 00:06:57,610
would love to talk about your experience

00:06:57,670 --> 00:07:03,320
me too I had some problems with locked

00:07:00,620 --> 00:07:06,260
files back then but I will I will focus

00:07:03,320 --> 00:07:09,200
on the latest versions of them in the

00:07:06,260 --> 00:07:12,530
case of NPM package lock and yon look

00:07:09,200 --> 00:07:17,360
they are kind of different but they

00:07:12,530 --> 00:07:20,300
provide the same functionality let's use

00:07:17,360 --> 00:07:24,740
the the happy dependency tree that we

00:07:20,300 --> 00:07:27,800
had before now you can see that the

00:07:24,740 --> 00:07:30,950
dependencies that were resolved at

00:07:27,800 --> 00:07:34,040
install time before when only pinning

00:07:30,950 --> 00:07:36,710
the pin your dependencies are now green

00:07:34,040 --> 00:07:40,550
because they will be locked for every

00:07:36,710 --> 00:07:42,640
install that you ran meaning that you

00:07:40,550 --> 00:07:46,610
will get rep reducible bills and

00:07:42,640 --> 00:07:49,820
reproducible installs which is super

00:07:46,610 --> 00:07:53,540
nice and for this example I only took

00:07:49,820 --> 00:07:55,610
dependency tree with two levels but you

00:07:53,540 --> 00:08:00,590
can imagine that working for several

00:07:55,610 --> 00:08:05,020
levels with many nested dependencies or

00:08:00,590 --> 00:08:05,020
transient dependencies in your tree

00:08:05,050 --> 00:08:11,660
let's see what you can get on how you

00:08:09,410 --> 00:08:16,340
can integrate these log files how you

00:08:11,660 --> 00:08:20,680
can maintain those let's see how how are

00:08:16,340 --> 00:08:24,980
the tools working to keep up with them

00:08:20,680 --> 00:08:26,960
so if you use log files maybe you've

00:08:24,980 --> 00:08:29,120
heard about this awesome tool that you

00:08:26,960 --> 00:08:32,900
have out there it's called wind keeper

00:08:29,120 --> 00:08:34,969
and a nice feature about wind keeper is

00:08:32,900 --> 00:08:38,120
that it's a free service for open source

00:08:34,969 --> 00:08:41,900
you can add it to your open source

00:08:38,120 --> 00:08:45,170
modules freely and basically it will

00:08:41,900 --> 00:08:49,580
create a new pull request for every new

00:08:45,170 --> 00:08:53,030
release on your dependencies then you

00:08:49,580 --> 00:08:58,520
can go and see if the test passes and

00:08:53,030 --> 00:09:00,980
then merge those updates to your

00:08:58,520 --> 00:09:02,690
repository a nice feature about Winkie

00:09:00,980 --> 00:09:04,310
Braswell is that it supports semantic

00:09:02,690 --> 00:09:08,330
release it supports moaner

00:09:04,310 --> 00:09:12,070
propose but uh one little catch about

00:09:08,330 --> 00:09:15,980
greenkeeper is that I couldn't get

00:09:12,070 --> 00:09:20,660
private packages working out of the box

00:09:15,980 --> 00:09:24,740
with along with log files another I

00:09:20,660 --> 00:09:26,510
think less known tool is renovate which

00:09:24,740 --> 00:09:28,870
is really nice it's also open source

00:09:26,510 --> 00:09:33,410
it's a free service for open source

00:09:28,870 --> 00:09:35,420
projects and basically it will do the

00:09:33,410 --> 00:09:40,029
same thing then we win keeper you will

00:09:35,420 --> 00:09:41,839
open pull requests to your modules and

00:09:40,029 --> 00:09:44,500
we'll let you know

00:09:41,839 --> 00:09:47,330
for newer versions of your dependencies

00:09:44,500 --> 00:09:49,370
but I found a little difference to

00:09:47,330 --> 00:09:52,130
greenkeeper which is whenever it can

00:09:49,370 --> 00:09:56,630
have a very granular configuration so

00:09:52,130 --> 00:10:00,080
that you can automatic west's that

00:09:56,630 --> 00:10:03,020
changes on the minor version of your

00:10:00,080 --> 00:10:05,960
dependency but not on the measure if you

00:10:03,020 --> 00:10:11,089
want to keep some difference about the

00:10:05,960 --> 00:10:13,190
the new releases for that it's also it

00:10:11,089 --> 00:10:15,460
also provides you with the option to run

00:10:13,190 --> 00:10:19,100
self-hosted meaning that you can run

00:10:15,460 --> 00:10:21,830
that on your own infrastructure and can

00:10:19,100 --> 00:10:26,440
integrate well with both get half and

00:10:21,830 --> 00:10:29,690
get love as well which is really nice

00:10:26,440 --> 00:10:32,450
another improvement that you can use

00:10:29,690 --> 00:10:36,530
while having log files are is this

00:10:32,450 --> 00:10:40,100
amazing comment that basically installs

00:10:36,530 --> 00:10:44,120
your dependencies but but kind of faster

00:10:40,100 --> 00:10:48,740
and I have a hypothesis on why this is

00:10:44,120 --> 00:10:52,370
the case both pnpn

00:10:48,740 --> 00:10:55,010
or yarn doesn't offer an alternative for

00:10:52,370 --> 00:10:57,890
this so if you're using yarn you'll have

00:10:55,010 --> 00:11:02,990
to stick with your european comments

00:10:57,890 --> 00:11:05,690
either way on CI so npn CI what it takes

00:11:02,990 --> 00:11:08,540
is your log file and basically it

00:11:05,690 --> 00:11:10,910
iterates along all these lists of

00:11:08,540 --> 00:11:14,500
dependencies or dev dependencies that

00:11:10,910 --> 00:11:17,450
you have in there meaning that it can

00:11:14,500 --> 00:11:20,990
can go over all of them with

00:11:17,450 --> 00:11:24,830
having to wait to for the network to

00:11:20,990 --> 00:11:28,840
download in the other case if you do an

00:11:24,830 --> 00:11:30,920
NPM install basically you have to go to

00:11:28,840 --> 00:11:33,740
you have to traverse the whole

00:11:30,920 --> 00:11:36,320
dependency tree and it will generate

00:11:33,740 --> 00:11:39,500
some blockers for example to get to the

00:11:36,320 --> 00:11:41,870
bottom of the tree you'll have to first

00:11:39,500 --> 00:11:44,930
download and get the package asana of

00:11:41,870 --> 00:11:47,330
the parent on the the parent of that

00:11:44,930 --> 00:11:50,540
parent and so on and so forth so you

00:11:47,330 --> 00:11:54,320
created like a cascade on the network

00:11:50,540 --> 00:11:58,100
and you have to add those there's little

00:11:54,320 --> 00:12:00,590
network requests and latency that you

00:11:58,100 --> 00:12:04,400
have going through all your your tree

00:12:00,590 --> 00:12:06,230
where in these lists you can just choose

00:12:04,400 --> 00:12:08,750
how many you want to download download

00:12:06,230 --> 00:12:11,770
at the same time and how many you want

00:12:08,750 --> 00:12:15,130
to install at the same time which is

00:12:11,770 --> 00:12:15,130
much faster

00:12:17,950 --> 00:12:24,160
yesterday I was procrastinating on

00:12:21,230 --> 00:12:27,200
Twitter because I I do that a lot and

00:12:24,160 --> 00:12:32,240
for those who haven't heard there was a

00:12:27,200 --> 00:12:34,190
really interesting advance and a really

00:12:32,240 --> 00:12:36,590
interesting day for science because they

00:12:34,190 --> 00:12:39,980
presented the results for the event

00:12:36,590 --> 00:12:44,150
horizon telescope they were trying to

00:12:39,980 --> 00:12:47,780
get to reproduce an image of black hole

00:12:44,150 --> 00:12:52,780
and they used different satellites over

00:12:47,780 --> 00:12:57,350
the earth and then reconstruct that

00:12:52,780 --> 00:13:00,080
those little parts as the earth was

00:12:57,350 --> 00:13:02,540
rotating so that they can reproduce a

00:13:00,080 --> 00:13:06,560
whole image and I saw a reference on

00:13:02,540 --> 00:13:09,010
Twitter by someone mentioning that

00:13:06,560 --> 00:13:13,280
during the presentation they used this

00:13:09,010 --> 00:13:16,600
image that you can see here and on the

00:13:13,280 --> 00:13:20,690
right there's a black hole that is

00:13:16,600 --> 00:13:24,730
compared to the Sun and it's also

00:13:20,690 --> 00:13:24,730
compared to the size of your new modules

00:13:24,910 --> 00:13:31,000
I'm sorry I had to do the credit goes to

00:13:29,090 --> 00:13:37,810
you the person on Twitter that

00:13:31,000 --> 00:13:40,570
treat that I didn't fart on that so for

00:13:37,810 --> 00:13:45,100
a case of a study I wanted to grab the

00:13:40,570 --> 00:13:51,780
top most dependent modules the top 1000

00:13:45,100 --> 00:13:56,500
and check how many of them had average

00:13:51,780 --> 00:13:59,590
dependency trees and I realized that the

00:13:56,500 --> 00:14:04,270
average dependency tree when you include

00:13:59,590 --> 00:14:06,430
dependencies is 295 but when you go to

00:14:04,270 --> 00:14:09,130
production on the dependencies meaning

00:14:06,430 --> 00:14:11,920
that you clued the ones that you use for

00:14:09,130 --> 00:14:15,970
development you get only 30 which is

00:14:11,920 --> 00:14:19,090
kind of nice but then again this is the

00:14:15,970 --> 00:14:22,210
top 1,000 most dependent modules which

00:14:19,090 --> 00:14:24,930
are Muslims ivories that you can use to

00:14:22,210 --> 00:14:27,240
build things so I wanted to get

00:14:24,930 --> 00:14:29,370
something closer to a real-world

00:14:27,240 --> 00:14:32,290
application something that you can build

00:14:29,370 --> 00:14:38,410
or something that you can relate to you

00:14:32,290 --> 00:14:41,230
on your work so I grabbed some prolific

00:14:38,410 --> 00:14:45,400
open source projects like renovate

00:14:41,230 --> 00:14:48,910
greenkeeper itself a spectrum Keystone

00:14:45,400 --> 00:14:52,150
Genesis and a couple more that where

00:14:48,910 --> 00:14:54,870
were using and we're solving a problem

00:14:52,150 --> 00:14:57,970
in the real world so the average

00:14:54,870 --> 00:15:01,210
dependency tree size jumped to a

00:14:57,970 --> 00:15:04,600
thousand on 52 but if you go to

00:15:01,210 --> 00:15:11,020
production only dependencies that goes

00:15:04,600 --> 00:15:14,339
down to 426 which is kind of nice it's

00:15:11,020 --> 00:15:17,380
not a thousand but then I was thinking

00:15:14,339 --> 00:15:21,880
and we were talking about these with

00:15:17,380 --> 00:15:24,130
some other community members what should

00:15:21,880 --> 00:15:28,870
you do about it like is there something

00:15:24,130 --> 00:15:33,070
that you can do or that you would have

00:15:28,870 --> 00:15:35,860
to fix and add-ins I don't think that

00:15:33,070 --> 00:15:38,230
the correct word for it is worrying

00:15:35,860 --> 00:15:40,600
about it but rather be conscious about

00:15:38,230 --> 00:15:42,940
the dependencies you are pulling into

00:15:40,600 --> 00:15:43,709
your application and set a level of

00:15:42,940 --> 00:15:48,209
Strasse

00:15:43,709 --> 00:15:50,119
in them say you're working on an

00:15:48,209 --> 00:15:52,499
application and you have different

00:15:50,119 --> 00:15:56,160
dependencies

00:15:52,499 --> 00:16:01,490
I would rather check that they have like

00:15:56,160 --> 00:16:04,319
a prolific time doing open source and

00:16:01,490 --> 00:16:06,689
some level of trust for them to be

00:16:04,319 --> 00:16:08,790
responsible about it but at the same

00:16:06,689 --> 00:16:12,509
time you can also work on your

00:16:08,790 --> 00:16:16,379
application and write all the modules by

00:16:12,509 --> 00:16:18,329
yourself instead of using reactor or

00:16:16,379 --> 00:16:21,269
Express you can go by your own

00:16:18,329 --> 00:16:24,329
implementation you're not entirely

00:16:21,269 --> 00:16:28,439
forced to use any of that but you have

00:16:24,329 --> 00:16:31,019
to wait to put on on the balance that

00:16:28,439 --> 00:16:36,679
these dependencies or the most

00:16:31,019 --> 00:16:39,569
dependencies that we see here are have

00:16:36,679 --> 00:16:42,600
contributors of the years on the number

00:16:39,569 --> 00:16:45,769
of thousands or even hundreds they have

00:16:42,600 --> 00:16:49,920
improved performance they have improved

00:16:45,769 --> 00:16:52,139
code quality and so on and so forth so

00:16:49,920 --> 00:16:55,319
you won't have to think of and put a

00:16:52,139 --> 00:16:57,809
balance on those where you want to spend

00:16:55,319 --> 00:17:00,269
your time but they're building your own

00:16:57,809 --> 00:17:03,029
version of express falsify your own

00:17:00,269 --> 00:17:06,059
version of react or rather leveraging

00:17:03,029 --> 00:17:13,679
those tools that you can use to focus on

00:17:06,059 --> 00:17:16,079
other things I also thought on another

00:17:13,679 --> 00:17:19,789
thing while we're coming preparing this

00:17:16,079 --> 00:17:24,209
topic was the fact that there are some

00:17:19,789 --> 00:17:27,809
there is some thought about NPM being a

00:17:24,209 --> 00:17:31,409
proxy for all open-source projects well

00:17:27,809 --> 00:17:35,250
I think that's a at some level could

00:17:31,409 --> 00:17:37,500
come be like that but it's not really

00:17:35,250 --> 00:17:40,559
the case if you go over the little

00:17:37,500 --> 00:17:43,679
details for example you can have

00:17:40,559 --> 00:17:46,140
something published in NPM that it it

00:17:43,679 --> 00:17:50,929
doesn't correlates to a git repository

00:17:46,140 --> 00:17:54,970
or you can have a version of module

00:17:50,929 --> 00:17:58,960
published to NPM that it's not pass and

00:17:54,970 --> 00:18:02,410
on github and I was thinking about it

00:17:58,960 --> 00:18:04,870
and realized why there are no tools that

00:18:02,410 --> 00:18:07,990
that would check for these that could

00:18:04,870 --> 00:18:11,080
could have a validation at some point

00:18:07,990 --> 00:18:14,170
either any of those that we mentioned

00:18:11,080 --> 00:18:16,600
today or some other tool that could

00:18:14,170 --> 00:18:20,500
check for that so I did what every

00:18:16,600 --> 00:18:23,080
engineer does so I built my own tool to

00:18:20,500 --> 00:18:27,300
check whether you have something on NPM

00:18:23,080 --> 00:18:32,410
that it's not an on github in this case

00:18:27,300 --> 00:18:36,310
and I was going over the results for a

00:18:32,410 --> 00:18:40,750
test for this module that I built until

00:18:36,310 --> 00:18:45,430
I found one of the files for a

00:18:40,750 --> 00:18:50,140
dependency was not doesn't didn't had

00:18:45,430 --> 00:18:52,600
the exact same hash that there was on

00:18:50,140 --> 00:18:55,750
github and I was like aha

00:18:52,600 --> 00:19:00,520
I found you and then I realized that

00:18:55,750 --> 00:19:04,750
there was also valid reasoning to not

00:19:00,520 --> 00:19:06,550
have the same file publish to NPM that

00:19:04,750 --> 00:19:09,610
the one you have on behalf say for

00:19:06,550 --> 00:19:13,600
example you are building your module you

00:19:09,610 --> 00:19:18,280
are building your dependency you you

00:19:13,600 --> 00:19:22,030
could want to change what you have on

00:19:18,280 --> 00:19:25,150
that file in github and what you have on

00:19:22,030 --> 00:19:28,180
NPM so it wasn't really like a sanity

00:19:25,150 --> 00:19:32,620
check at that point and of course when I

00:19:28,180 --> 00:19:34,990
was almost finished with that I realized

00:19:32,620 --> 00:19:39,910
there was another tool out there which

00:19:34,990 --> 00:19:43,500
is nicer I believe the only difference

00:19:39,910 --> 00:19:48,580
that I found is that these tool adds

00:19:43,500 --> 00:19:50,680
little receives a module name and I can

00:19:48,580 --> 00:19:53,050
you can run the verification for a

00:19:50,680 --> 00:19:56,530
single module where on the tool that I

00:19:53,050 --> 00:20:00,240
built you can get you can provide your

00:19:56,530 --> 00:20:02,650
log file and run the verification

00:20:00,240 --> 00:20:06,040
against are multiple at least of

00:20:02,650 --> 00:20:09,990
dependencies itself

00:20:06,040 --> 00:20:13,799
again there were some reasoning about

00:20:09,990 --> 00:20:16,540
whether those should be different or

00:20:13,799 --> 00:20:19,590
whether those can be different

00:20:16,540 --> 00:20:24,370
so I don't think it's a really good

00:20:19,590 --> 00:20:26,799
alternative to verification on all those

00:20:24,370 --> 00:20:30,640
modules but rather could be something

00:20:26,799 --> 00:20:33,970
that meant a nurse would use on my

00:20:30,640 --> 00:20:37,929
results running that they verify I found

00:20:33,970 --> 00:20:41,400
that there were some released versions

00:20:37,929 --> 00:20:45,370
on NPM that were not taught on github so

00:20:41,400 --> 00:20:49,240
that could be one on the CI environment

00:20:45,370 --> 00:20:51,730
for that package and could be useful for

00:20:49,240 --> 00:20:55,000
maintainer to realize that they forgot

00:20:51,730 --> 00:20:58,080
to push attack for example in that case

00:20:55,000 --> 00:21:01,780
I would say something closer to what

00:20:58,080 --> 00:21:03,970
trance but verify this it has a nicer

00:21:01,780 --> 00:21:08,730
name as well the module on the on the

00:21:03,970 --> 00:21:12,370
bottom is doing but something more

00:21:08,730 --> 00:21:18,190
configurable that you can enable or

00:21:12,370 --> 00:21:22,470
disable some checks in the linker on the

00:21:18,190 --> 00:21:27,700
top you will find the github repository

00:21:22,470 --> 00:21:31,840
for both of these of these tools and you

00:21:27,700 --> 00:21:34,330
can use them and just tell me if there's

00:21:31,840 --> 00:21:37,440
something wrong on your dependencies or

00:21:34,330 --> 00:21:39,880
something broke on my POC on my package

00:21:37,440 --> 00:21:40,930
that's what all that I have thank you

00:21:39,880 --> 00:21:51,339
for today

00:21:40,930 --> 00:21:51,339

YouTube URL: https://www.youtube.com/watch?v=WsUIVlc3MCs


