Title: The Magic of RxJS  - Natalia Tepluhina | JSHeroes 2019
Publication date: 2019-05-03
Playlist: JSHeroes 2019
Description: 
	RxJS is often considered as complicated but it's not true! It's just developed to deal with difficult asynchronous tasks. Let's try to learn this magic while building a simple game with RxJS.
Captions: 
	00:00:00,070 --> 00:00:03,219
[Music]

00:00:14,599 --> 00:00:19,590
I'm going to stick about Eric's GS and

00:00:17,520 --> 00:00:21,180
when I apply it with this stock I

00:00:19,590 --> 00:00:23,759
thought okay it's advanced topic it's

00:00:21,180 --> 00:00:26,250
interesting but after two previous talks

00:00:23,759 --> 00:00:28,340
it's like basic stuff you can learn from

00:00:26,250 --> 00:00:31,739
Stack Overflow just fine

00:00:28,340 --> 00:00:34,079
and before we start speaking about what

00:00:31,739 --> 00:00:37,200
is a Rick GS and how to implement it

00:00:34,079 --> 00:00:38,570
let's answer the question why use Eric

00:00:37,200 --> 00:00:42,450
GS at all

00:00:38,570 --> 00:00:44,370
what is the use case in fact in

00:00:42,450 --> 00:00:46,710
front-end applications there are some

00:00:44,370 --> 00:00:49,530
areas that took a lot of attention from

00:00:46,710 --> 00:00:51,929
front-end developers and these areas are

00:00:49,530 --> 00:00:57,059
usually connected with user input and

00:00:51,929 --> 00:01:00,479
API calls what's common are them in fact

00:00:57,059 --> 00:01:02,460
it's concurrency in both cases were

00:01:00,479 --> 00:01:06,050
dealing with a synchronous behavior and

00:01:02,460 --> 00:01:08,370
a sim is hard of course we have promises

00:01:06,050 --> 00:01:11,430
but promises still have a limited

00:01:08,370 --> 00:01:13,620
functionality and Ricky has provides

00:01:11,430 --> 00:01:16,350
some nice concept the deal with I think

00:01:13,620 --> 00:01:18,990
it's not a silver bullet but it's good

00:01:16,350 --> 00:01:21,150
to know now I can introduce myself so

00:01:18,990 --> 00:01:25,140
you can know some more information about

00:01:21,150 --> 00:01:28,950
me except like driving with Sarah in

00:01:25,140 --> 00:01:31,560
Romania my name is Natalia I'm a Google

00:01:28,950 --> 00:01:33,480
developer expert in web technologies I'm

00:01:31,560 --> 00:01:34,020
a new community partner not the core

00:01:33,480 --> 00:01:36,690
team

00:01:34,020 --> 00:01:39,090
it's I'm Anna dogs team and it's like

00:01:36,690 --> 00:01:40,110
it's very complicated by the working

00:01:39,090 --> 00:01:41,760
with you and I really like this

00:01:40,110 --> 00:01:45,420
framework and I work as a senior

00:01:41,760 --> 00:01:49,380
front-end engineer at github so what is

00:01:45,420 --> 00:01:52,050
Eric GS it's easy to see that Eric GS is

00:01:49,380 --> 00:01:54,890
an abbreviation meaning reactive

00:01:52,050 --> 00:01:57,720
extensions library for JavaScript

00:01:54,890 --> 00:01:59,600
JavaScript part is clear I hope we had

00:01:57,720 --> 00:02:03,300
JavaScript conference

00:01:59,600 --> 00:02:05,730
what is reactive extensions let's look

00:02:03,300 --> 00:02:08,759
at official documentation of reactive X

00:02:05,730 --> 00:02:10,679
and it stated that red DivX

00:02:08,759 --> 00:02:15,200
is an api for a synchronous programming

00:02:10,679 --> 00:02:18,890
with observable streams wait what

00:02:15,200 --> 00:02:21,860
what does it mean let's try to

00:02:18,890 --> 00:02:24,950
destructure this spell and start with

00:02:21,860 --> 00:02:29,840
streams because understanding reactive X

00:02:24,950 --> 00:02:33,170
is sinking in streams string is not

00:02:29,840 --> 00:02:36,890
something alien stream is just a

00:02:33,170 --> 00:02:39,410
collection of events so when user is

00:02:36,890 --> 00:02:41,900
typing on the keyboard it's a collection

00:02:39,410 --> 00:02:45,380
of key down events and key up events as

00:02:41,900 --> 00:02:48,290
well when we are moving the mouse it's a

00:02:45,380 --> 00:02:50,840
collection of mousemove events when we

00:02:48,290 --> 00:02:53,620
have an API call again a collection of

00:02:50,840 --> 00:02:57,140
send in requests and resolving it

00:02:53,620 --> 00:02:59,570
everything is a stream and Springs a

00:02:57,140 --> 00:03:02,060
collection of events like objects and

00:02:59,570 --> 00:03:04,070
race in JavaScript and we have an

00:03:02,060 --> 00:03:07,280
awesome library to deal with and raising

00:03:04,070 --> 00:03:11,450
objects it's law - so you can think of a

00:03:07,280 --> 00:03:13,040
rich GS as law - for events it provides

00:03:11,450 --> 00:03:16,340
plenty of methods to deal with

00:03:13,040 --> 00:03:18,820
observable streams and the core concept

00:03:16,340 --> 00:03:22,579
of Eric's GS as I just mentioned is

00:03:18,820 --> 00:03:25,400
observables let's have a look at a place

00:03:22,579 --> 00:03:28,430
where observable should be in JavaScript

00:03:25,400 --> 00:03:31,400
so here is a table representing

00:03:28,430 --> 00:03:33,650
JavaScript primitives and the single

00:03:31,400 --> 00:03:36,799
synchronous primitive we have just a

00:03:33,650 --> 00:03:39,860
value number string boolean whatever

00:03:36,799 --> 00:03:42,950
just value for plural synchronous

00:03:39,860 --> 00:03:46,549
primitive we have an iterable of value

00:03:42,950 --> 00:03:48,560
which is just an array for singular a

00:03:46,549 --> 00:03:51,200
synchronous primitive we have a promise

00:03:48,560 --> 00:03:54,590
and at some moment of time promises

00:03:51,200 --> 00:03:57,549
resolving to value but we don't have a

00:03:54,590 --> 00:04:00,290
primitive for plural a synchronous and

00:03:57,549 --> 00:04:04,310
it's a place where observables should be

00:04:00,290 --> 00:04:05,530
in fact there is proposal to tc39 it's

00:04:04,310 --> 00:04:09,739
stage one right now

00:04:05,530 --> 00:04:12,970
since 2017 which doesn't give us hope it

00:04:09,739 --> 00:04:15,560
will be in ACMA script at some point but

00:04:12,970 --> 00:04:16,450
we have a library to deal with it so

00:04:15,560 --> 00:04:19,940
it's fine

00:04:16,450 --> 00:04:22,100
let's compare observables to promises

00:04:19,940 --> 00:04:26,870
just to understand the difference

00:04:22,100 --> 00:04:29,120
so x-axis here is a time at some moment

00:04:26,870 --> 00:04:33,260
of time promise will either

00:04:29,120 --> 00:04:36,020
to value our jets and so throw an error

00:04:33,260 --> 00:04:38,389
and it's a moment where promises

00:04:36,020 --> 00:04:42,740
completed you can do anything with

00:04:38,389 --> 00:04:46,190
promise after this moment let's have a

00:04:42,740 --> 00:04:49,820
look at observable observable will emit

00:04:46,190 --> 00:04:54,229
values over time and it's a moment of

00:04:49,820 --> 00:04:56,720
time it complete as well but this moment

00:04:54,229 --> 00:04:59,510
can be completely separate from the

00:04:56,720 --> 00:05:02,590
latest emitted value and also any moment

00:04:59,510 --> 00:05:05,860
of time observable can throw an error

00:05:02,590 --> 00:05:09,160
what is observable under the hood

00:05:05,860 --> 00:05:11,320
nothing specific is just a function a

00:05:09,160 --> 00:05:13,970
lot of baggage

00:05:11,320 --> 00:05:18,169
more functions now it's observable

00:05:13,970 --> 00:05:21,830
functions this function takes observer

00:05:18,169 --> 00:05:25,639
as a parameter and returns cancellation

00:05:21,830 --> 00:05:27,500
logic what is observer observers symbol

00:05:25,639 --> 00:05:31,490
is just an object not a function sorry

00:05:27,500 --> 00:05:34,940
but it has three methods next error and

00:05:31,490 --> 00:05:37,850
complete next method is called one

00:05:34,940 --> 00:05:40,340
observable emits next value error

00:05:37,850 --> 00:05:43,490
obviously on error and complete when

00:05:40,340 --> 00:05:45,500
it's completed and we can create an

00:05:43,490 --> 00:05:47,210
observable with a constructor function

00:05:45,500 --> 00:05:50,090
which is like looks really complicated

00:05:47,210 --> 00:05:53,570
but nothing special we take an observer

00:05:50,090 --> 00:05:57,650
and call observer methods whenever we

00:05:53,570 --> 00:05:59,419
have data error or complete in fact this

00:05:57,650 --> 00:06:02,660
complex thing will never happen with

00:05:59,419 --> 00:06:05,660
Erics GS because it has a lot of methods

00:06:02,660 --> 00:06:10,930
for creating observables without this

00:06:05,660 --> 00:06:13,070
huge structure observables are lazy

00:06:10,930 --> 00:06:16,310
that's why I really like them they're

00:06:13,070 --> 00:06:21,729
just like me what does it mean

00:06:16,310 --> 00:06:25,270
lazy observable won't emit any values

00:06:21,729 --> 00:06:28,340
until it has at least one subscription

00:06:25,270 --> 00:06:32,419
to understand what's going on let's

00:06:28,340 --> 00:06:35,690
think about YouTube video YouTube video

00:06:32,419 --> 00:06:39,440
is a stream because it emits frames as

00:06:35,690 --> 00:06:41,930
events and imagine there is a YouTube

00:06:39,440 --> 00:06:44,930
video and nobody is watching it

00:06:41,930 --> 00:06:50,169
nobody on earth nobody just click play

00:06:44,930 --> 00:06:53,150
button this observable want emit values

00:06:50,169 --> 00:06:57,139
this behavior is also named cold

00:06:53,150 --> 00:07:00,169
observable observables can be converted

00:06:57,139 --> 00:07:02,930
to hot ones emitting values without

00:07:00,169 --> 00:07:06,160
subscriptions let's imagine a YouTube

00:07:02,930 --> 00:07:08,479
livestream and there is a streamer

00:07:06,160 --> 00:07:11,150
somewhere on earth and nobody is

00:07:08,479 --> 00:07:16,970
watching his or her stream been there

00:07:11,150 --> 00:07:20,479
done this it's very sad but still even

00:07:16,970 --> 00:07:24,039
if nobody is watching the stream stream

00:07:20,479 --> 00:07:28,580
will and meet values will emit frames

00:07:24,039 --> 00:07:31,550
this is called hot observable but by

00:07:28,580 --> 00:07:35,360
default they are all cold and lazy and

00:07:31,550 --> 00:07:37,580
they need subscriptions subscription is

00:07:35,360 --> 00:07:39,949
created with a simple method of

00:07:37,580 --> 00:07:43,940
observable named subscribe and we're

00:07:39,949 --> 00:07:45,560
passing our observer at this moment very

00:07:43,940 --> 00:07:49,460
important moment if you create a

00:07:45,560 --> 00:07:53,330
subscription observable will emit values

00:07:49,460 --> 00:07:55,400
until you unsubscribe so if you don't

00:07:53,330 --> 00:08:00,070
need your observable anymore please

00:07:55,400 --> 00:08:02,720
unsubscribe don't make it work it's lazy

00:08:00,070 --> 00:08:05,810
now it's like function function what

00:08:02,720 --> 00:08:09,050
part of ribs yes its operators like for

00:08:05,810 --> 00:08:12,919
LA - energy has has a lot of operators

00:08:09,050 --> 00:08:16,300
to transform filter combined and ultra

00:08:12,919 --> 00:08:18,770
streams and when I say a lot it's a lot

00:08:16,300 --> 00:08:21,440
good thing like don't need to remember

00:08:18,770 --> 00:08:24,800
all of them are HGS has an awesome

00:08:21,440 --> 00:08:28,729
documentation at learn Arabs J's I oh so

00:08:24,800 --> 00:08:32,120
we go check it and I need an example of

00:08:28,729 --> 00:08:34,400
course and I won't work with API calls

00:08:32,120 --> 00:08:40,370
today but I will work with contacts user

00:08:34,400 --> 00:08:46,230
input and like what can we imagine as an

00:08:40,370 --> 00:08:49,470
example for complex user input games

00:08:46,230 --> 00:08:51,690
in fact when we're playing games we have

00:08:49,470 --> 00:08:54,320
a lot of interaction a lot of different

00:08:51,690 --> 00:08:59,700
options to interact integrate input and

00:08:54,320 --> 00:09:00,770
I have a great example please make a

00:08:59,700 --> 00:09:02,330
sound a bit louder

00:09:00,770 --> 00:09:04,460
[Music]

00:09:02,330 --> 00:09:06,200
oh my god I'm staying on stage with

00:09:04,460 --> 00:09:08,640
moonlight sonata' on the background my

00:09:06,200 --> 00:09:13,410
mom should be really proud with this

00:09:08,640 --> 00:09:16,430
it's a game built with you thank you

00:09:13,410 --> 00:09:16,430
and the rigs yes

00:09:18,970 --> 00:09:24,670
in fact I'm just just putting space all

00:09:22,510 --> 00:09:28,990
this time but you need to do it with the

00:09:24,670 --> 00:09:30,910
right temp and it will play music so if

00:09:28,990 --> 00:09:32,680
you're a bit bored and don't want to

00:09:30,910 --> 00:09:35,620
listen about Arabs Jess anymore

00:09:32,680 --> 00:09:38,730
go please check the game but make a

00:09:35,620 --> 00:09:42,670
sound a bit a bit quieter because talk

00:09:38,730 --> 00:09:44,740
and I don't have this amazing skills of

00:09:42,670 --> 00:09:47,590
nice animations I'm not Sarah Dresner

00:09:44,740 --> 00:09:51,990
sorry that's why I will build nerdy

00:09:47,590 --> 00:09:58,180
stuff from 1876 like this

00:09:51,990 --> 00:10:00,570
bricks nice so let's go to demo time

00:09:58,180 --> 00:10:03,750
yeah I have no idea what I'm doing but

00:10:00,570 --> 00:10:05,020
let's try to create a breakout from

00:10:03,750 --> 00:10:08,830
scratch

00:10:05,020 --> 00:10:13,960
well almost from scratch okay let me

00:10:08,830 --> 00:10:20,050
know if you see the code nicely a bit

00:10:13,960 --> 00:10:31,710
okay I will make it a bit bigger does it

00:10:20,050 --> 00:10:37,030
mean better more more okay and more yay

00:10:31,710 --> 00:10:40,390
okay I hope you can see it nice and I

00:10:37,030 --> 00:10:43,300
spoiled the question but okay now we

00:10:40,390 --> 00:10:48,070
need to define our source streams for

00:10:43,300 --> 00:10:52,680
the game so what's our streams can you

00:10:48,070 --> 00:10:56,830
imagine for breakout game any guesses

00:10:52,680 --> 00:11:01,510
yes first one is actually user input but

00:10:56,830 --> 00:11:03,660
we have one more time right

00:11:01,510 --> 00:11:07,620
we need ticks we need to update our

00:11:03,660 --> 00:11:12,700
image over time and let's try to create

00:11:07,620 --> 00:11:15,490
this stream okay this is a game should

00:11:12,700 --> 00:11:23,470
begin so let's create our first stream

00:11:15,490 --> 00:11:28,030
let's create ticker and we should emit

00:11:23,470 --> 00:11:29,110
values over time and for this Eric GS

00:11:28,030 --> 00:11:34,300
has a method

00:11:29,110 --> 00:11:36,670
called interval and I have a magic

00:11:34,300 --> 00:11:42,340
constant ticker interval which is going

00:11:36,670 --> 00:11:46,630
to emit values for achieving like 60fps

00:11:42,340 --> 00:11:49,630
and let's have a look how it works in

00:11:46,630 --> 00:11:56,830
our council we will subscribe have a

00:11:49,630 --> 00:11:57,610
tick and show it in a council yay arrow

00:11:56,830 --> 00:12:03,880
functions

00:11:57,610 --> 00:12:07,750
I feel smart now okay it's very small I

00:12:03,880 --> 00:12:09,280
will try to increase it a bit as you can

00:12:07,750 --> 00:12:12,840
see in the console something is

00:12:09,280 --> 00:12:20,470
happening in fact we're emitting number

00:12:12,840 --> 00:12:25,180
every 0.0 17 of a second nothing fancy

00:12:20,470 --> 00:12:28,140
just numbers let's try to add some words

00:12:25,180 --> 00:12:32,320
in first of all we need to think about

00:12:28,140 --> 00:12:35,500
animation frame because 60fps is nice

00:12:32,320 --> 00:12:38,980
but it's not always achievable so let's

00:12:35,500 --> 00:12:42,010
add a scheduler here and it will define

00:12:38,980 --> 00:12:44,350
when actually we have a change of a

00:12:42,010 --> 00:12:48,760
frame and it will emit a value only

00:12:44,350 --> 00:12:51,820
after this so I have animation frame

00:12:48,760 --> 00:12:53,950
scheduler in fact if we have a look

00:12:51,820 --> 00:12:56,560
nothing changed but it's just a bit

00:12:53,950 --> 00:13:00,430
slower because I can't achieve 60fps

00:12:56,560 --> 00:13:03,760
right now great now we will need to

00:13:00,430 --> 00:13:06,910
think what do we need to have here we

00:13:03,760 --> 00:13:10,660
need to calculate a delta time between

00:13:06,910 --> 00:13:13,770
previous tick and current ik and to do

00:13:10,660 --> 00:13:17,970
so we need to transform our string a bit

00:13:13,770 --> 00:13:22,210
in order to GS all methods are pipeable

00:13:17,970 --> 00:13:24,900
it's very similar to a chaining but all

00:13:22,210 --> 00:13:27,220
pipeable functions are pure functions

00:13:24,900 --> 00:13:30,640
functional programming is great it's

00:13:27,220 --> 00:13:34,750
just easier and more clean and we are

00:13:30,640 --> 00:13:38,350
reaching our first operator its map it's

00:13:34,750 --> 00:13:39,410
not gjs map it's not a ray prototype map

00:13:38,350 --> 00:13:42,800
it's

00:13:39,410 --> 00:13:46,699
map from rxjs it does pretty much the

00:13:42,800 --> 00:13:50,209
same as a ray map but with observables

00:13:46,699 --> 00:13:52,250
now I have an observable we don't need

00:13:50,209 --> 00:13:55,100
anything from our interval observable

00:13:52,250 --> 00:13:59,060
but we are going to return and your

00:13:55,100 --> 00:14:04,870
object every single tick of time we will

00:13:59,060 --> 00:14:10,209
have time which is just date now and

00:14:04,870 --> 00:14:12,649
Delta time which is just now for now

00:14:10,209 --> 00:14:15,920
because we're just transforming our

00:14:12,649 --> 00:14:19,550
ticks to these objects not calculating

00:14:15,920 --> 00:14:22,910
the other time as you can see we have

00:14:19,550 --> 00:14:25,970
date now emitting and now we need

00:14:22,910 --> 00:14:30,920
somehow to check the previous value of

00:14:25,970 --> 00:14:32,689
the date and new one and it's really

00:14:30,920 --> 00:14:34,670
tricky moment because usually you need

00:14:32,689 --> 00:14:37,639
an external state for this you need to

00:14:34,670 --> 00:14:40,939
store the previous value somewhere to

00:14:37,639 --> 00:14:44,660
calculate it but the radius is magical

00:14:40,939 --> 00:14:48,350
and it has scan operator and scan is

00:14:44,660 --> 00:14:50,750
similar to reduce method on array it

00:14:48,350 --> 00:14:54,319
will take previous value and you value

00:14:50,750 --> 00:14:58,100
and will operate with them but also emit

00:14:54,319 --> 00:15:04,490
values every single iteration so now we

00:14:58,100 --> 00:15:08,449
have previews and current and we are

00:15:04,490 --> 00:15:16,069
going to calculate Delta time so right

00:15:08,449 --> 00:15:21,709
now time is current time and Delta will

00:15:16,069 --> 00:15:28,069
be current time subtracting previous

00:15:21,709 --> 00:15:29,990
time and divided by 1,000 okay now you

00:15:28,069 --> 00:15:33,110
can see we have this Delta time and it

00:15:29,990 --> 00:15:37,879
will be used in our helper functions to

00:15:33,110 --> 00:15:39,620
update the picture and we can remove the

00:15:37,879 --> 00:15:43,670
subscription we don't need it anymore

00:15:39,620 --> 00:15:48,960
on our ticker now let's move to the

00:15:43,670 --> 00:15:53,770
second stream user input that's great

00:15:48,960 --> 00:15:55,870
an input and I forgot to say you can see

00:15:53,770 --> 00:15:58,480
this dollar sign it's a common

00:15:55,870 --> 00:16:01,270
convention to add dollar sign when

00:15:58,480 --> 00:16:05,050
you're naming observable streams just

00:16:01,270 --> 00:16:08,260
two distinct them from the Const values

00:16:05,050 --> 00:16:13,350
so input and we need to create it again

00:16:08,260 --> 00:16:13,350
we will use a radius method from event

00:16:13,560 --> 00:16:30,430
we will take document key down event and

00:16:22,230 --> 00:16:34,210
we'll do something with this what do we

00:16:30,430 --> 00:16:37,930
actually need from user input we need to

00:16:34,210 --> 00:16:42,750
find if user is pressing left or right

00:16:37,930 --> 00:16:46,800
arrow and move our pedal with this input

00:16:42,750 --> 00:16:56,440
so let's add a simple switch on

00:16:46,800 --> 00:16:59,350
event.keycode so in case we have pedal

00:16:56,440 --> 00:17:02,440
keys left and this magic pedal keys is

00:16:59,350 --> 00:17:11,130
just an object where left is 37 and

00:17:02,440 --> 00:17:14,949
right is 39 we will return -1 y -1

00:17:11,130 --> 00:17:17,740
because we're moving our pedal on x-axis

00:17:14,949 --> 00:17:22,959
so we are going to move it left we're

00:17:17,740 --> 00:17:25,050
subtracting obviously in case of pedal

00:17:22,959 --> 00:17:31,320
keys right

00:17:25,050 --> 00:17:31,320
we have what one nice

00:17:32,290 --> 00:17:40,309
and for default case if we're just

00:17:36,230 --> 00:17:43,030
pressing some random button we will

00:17:40,309 --> 00:17:43,030
return zero

00:17:44,140 --> 00:17:56,120
okay let's subscribe to it and see

00:17:47,300 --> 00:18:04,790
what's happening yeah I love console

00:17:56,120 --> 00:18:07,550
logs okay now we are trying to move our

00:18:04,790 --> 00:18:10,790
paddle no paddle exist so far but we are

00:18:07,550 --> 00:18:15,770
just emitting events on every key down

00:18:10,790 --> 00:18:20,300
and if I try to push some random Keys

00:18:15,770 --> 00:18:28,340
it's zero okay now we are ready to

00:18:20,300 --> 00:18:30,770
create a paddle and paddle is depending

00:18:28,340 --> 00:18:33,830
on two streams because we need to move

00:18:30,770 --> 00:18:36,830
it over time so we need our take a

00:18:33,830 --> 00:18:41,059
stream but we also need count on user

00:18:36,830 --> 00:18:47,510
input where should it move so we are

00:18:41,059 --> 00:18:49,730
taking our ticker and here is the first

00:18:47,510 --> 00:18:54,080
magical operator it's not that obvious

00:18:49,730 --> 00:18:57,460
it's with latest from what it actually

00:18:54,080 --> 00:19:01,880
does we're taking the first stream and

00:18:57,460 --> 00:19:05,330
we will emit new values whenever first

00:19:01,880 --> 00:19:09,280
stream is emitting a value but we also

00:19:05,330 --> 00:19:11,480
will take the value from the second one

00:19:09,280 --> 00:19:14,450
it's really interesting moment because

00:19:11,480 --> 00:19:17,270
rxjs has a similar operator named

00:19:14,450 --> 00:19:20,480
combined latest which takes two streams

00:19:17,270 --> 00:19:23,840
but it will emit values whenever any of

00:19:20,480 --> 00:19:25,760
these streams emit a value here we are

00:19:23,840 --> 00:19:31,610
emitting values only one ticker emit

00:19:25,760 --> 00:19:37,790
values so like 60 times a second and we

00:19:31,610 --> 00:19:40,760
take our input here and be going to do

00:19:37,790 --> 00:19:44,020
some scan again we will take a previous

00:19:40,760 --> 00:19:49,730
one as a position we already have and we

00:19:44,020 --> 00:19:54,040
have our ticker and our let's name it

00:19:49,730 --> 00:20:00,260
direction it's not an input already and

00:19:54,040 --> 00:20:05,030
of course we need more brackets and we

00:20:00,260 --> 00:20:09,309
are going to call our helper function

00:20:05,030 --> 00:20:09,309
with paddle with three parameters

00:20:12,070 --> 00:20:20,210
position ticker and Direction this magic

00:20:16,960 --> 00:20:25,790
method is just calculating the position

00:20:20,210 --> 00:20:29,870
depending on Delta time and move it so

00:20:25,790 --> 00:20:32,050
let's try to subscribe and more console

00:20:29,870 --> 00:20:32,050
logs

00:20:40,290 --> 00:20:47,670
everything is cool instead of not a

00:20:43,270 --> 00:20:51,850
number why like why why it's not working

00:20:47,670 --> 00:20:54,550
because we have this position and it's a

00:20:51,850 --> 00:20:57,670
previous value and for the first

00:20:54,550 --> 00:20:59,520
iteration it's undefined like our pedal

00:20:57,670 --> 00:21:03,130
doesn't know the initial position here

00:20:59,520 --> 00:21:10,810
so let's provide it it will be our

00:21:03,130 --> 00:21:14,980
canvas with / - so it's a center okay

00:21:10,810 --> 00:21:19,020
now we have coordinates of our pedal and

00:21:14,980 --> 00:21:24,610
we are ready to actually draw something

00:21:19,020 --> 00:21:29,250
no more comes from hopefully if it won't

00:21:24,610 --> 00:21:33,310
work will be a console.log again ok

00:21:29,250 --> 00:21:36,820
let's try to create our game loop here

00:21:33,310 --> 00:21:43,980
with our pedal we need an update

00:21:36,820 --> 00:21:48,460
function and it will take our pedal as a

00:21:43,980 --> 00:21:52,600
coordinate and first of all we need to

00:21:48,460 --> 00:21:57,930
clear the whole game so I will do just

00:21:52,600 --> 00:21:57,930
context clear record

00:22:08,320 --> 00:22:19,540
so it will clear the whole field of the

00:22:10,930 --> 00:22:21,760
game and let's draw pedal and before

00:22:19,540 --> 00:22:28,240
this I want to use two more magic

00:22:21,760 --> 00:22:31,590
methods it will be row title and draw

00:22:28,240 --> 00:22:35,410
controls and these two methods will just

00:22:31,590 --> 00:22:41,380
draw some text on the game field let's

00:22:35,410 --> 00:22:42,910
make it a bit bigger as well yeah now we

00:22:41,380 --> 00:22:49,270
are going to create our main

00:22:42,910 --> 00:22:52,660
subscription which is a game and here we

00:22:49,270 --> 00:22:54,550
are going to combine our streams because

00:22:52,660 --> 00:22:56,820
we need to emit new values whenever we

00:22:54,550 --> 00:23:01,540
have a new tic or use a removed paddle

00:22:56,820 --> 00:23:05,980
so we are combining our ticker and our

00:23:01,540 --> 00:23:11,020
paddle as well and we are subscribing to

00:23:05,980 --> 00:23:17,460
them and we have we don't need ticker in

00:23:11,020 --> 00:23:29,410
update function so only a paddle great

00:23:17,460 --> 00:23:31,750
and we are calling our update okay so

00:23:29,410 --> 00:23:35,350
yes it's moving but we have the first

00:23:31,750 --> 00:23:38,080
issue I'm not typing anything but it

00:23:35,350 --> 00:23:41,110
still moves sometimes it's good if

00:23:38,080 --> 00:23:44,680
you're really lazy but we need somehow

00:23:41,110 --> 00:23:47,410
to stop it interesting moment if right

00:23:44,680 --> 00:23:51,310
now I will push any button not an arrow

00:23:47,410 --> 00:23:54,430
it will stop because by default we're

00:23:51,310 --> 00:23:57,000
emitting zero so probably will we will

00:23:54,430 --> 00:24:03,760
need to emit zero also onkeyup event

00:23:57,000 --> 00:24:06,700
let's go back to our input and merge two

00:24:03,760 --> 00:24:11,590
strings here so first is our familiar

00:24:06,700 --> 00:24:18,710
key down second is very similar it's

00:24:11,590 --> 00:24:22,130
again from event it will be document yep

00:24:18,710 --> 00:24:23,230
and we will just omit in 0 no matter

00:24:22,130 --> 00:24:27,860
what

00:24:23,230 --> 00:24:34,580
ok back to game ku I'm moving a

00:24:27,860 --> 00:24:36,470
rectangle great feeling now we need like

00:24:34,580 --> 00:24:39,860
like with an oh yeah draw two circles

00:24:36,470 --> 00:24:42,410
now draw the rest of the oh now we need

00:24:39,860 --> 00:24:44,120
to draw a ball and bricks and I won't

00:24:42,410 --> 00:24:46,670
dive deeply inside of it because I have

00:24:44,120 --> 00:24:49,730
like five minutes so I have a magic

00:24:46,670 --> 00:24:53,690
method to draw them all but we need one

00:24:49,730 --> 00:25:00,530
more stream to be created here so we

00:24:53,690 --> 00:25:04,220
have objects and by objects I mean the

00:25:00,530 --> 00:25:06,050
rest of the game and again we are

00:25:04,220 --> 00:25:14,990
working on our ticket stream because

00:25:06,050 --> 00:25:17,810
it's our game loop base with latest from

00:25:14,990 --> 00:25:20,720
pedal because we need to take our pedal

00:25:17,810 --> 00:25:25,250
into account what about collisions with

00:25:20,720 --> 00:25:29,510
ball and other stuff and again we have

00:25:25,250 --> 00:25:31,580
this magical scan operator and I will

00:25:29,510 --> 00:25:33,830
just copy paste all the parameters

00:25:31,580 --> 00:25:37,010
because there are a lot of them so I

00:25:33,830 --> 00:25:43,430
have this huge function to calculate

00:25:37,010 --> 00:25:47,180
everything and from previous state we

00:25:43,430 --> 00:25:52,420
will need these four parameters and we

00:25:47,180 --> 00:26:01,710
also have our ticker and our paddle

00:25:52,420 --> 00:26:04,810
great more brackets yeah I know exciting

00:26:01,710 --> 00:26:06,610
and we are going to calculate object

00:26:04,810 --> 00:26:11,500
with all these parameters and also

00:26:06,610 --> 00:26:13,390
ticker and idle but now we are smart and

00:26:11,500 --> 00:26:16,240
we know we need initial objects

00:26:13,390 --> 00:26:22,230
otherwise we will have the same as with

00:26:16,240 --> 00:26:25,690
a pedal and we have initial objects yay

00:26:22,230 --> 00:26:27,190
let's hope it's got no it's not going to

00:26:25,690 --> 00:26:30,520
work because we need to provide our

00:26:27,190 --> 00:26:35,080
objects to update function so we are

00:26:30,520 --> 00:26:41,380
adding third string here and it's

00:26:35,080 --> 00:26:47,710
objects and here and we are going to

00:26:41,380 --> 00:26:49,990
pass them to update function and inside

00:26:47,710 --> 00:27:02,770
of update function we are going to draw

00:26:49,990 --> 00:27:05,710
a bowl also bricks not object but

00:27:02,770 --> 00:27:08,140
objects and I forgot to pass them if you

00:27:05,710 --> 00:27:11,320
see I'm failing just don't hesitate to

00:27:08,140 --> 00:27:18,550
shout out like yeah you forgot objects

00:27:11,320 --> 00:27:26,290
you're going to fail objects bricks and

00:27:18,550 --> 00:27:30,990
we also need a score as it's a game what

00:27:26,290 --> 00:27:36,400
about achievements score

00:27:30,990 --> 00:27:43,900
okay now person finger seats should work

00:27:36,400 --> 00:27:45,820
okay Wow wait wait

00:27:43,900 --> 00:27:47,070
there is a fail and you will see it

00:27:45,820 --> 00:27:49,360
right now okay

00:27:47,070 --> 00:27:51,220
what the hell wasn't like the game

00:27:49,360 --> 00:27:59,110
should just be over

00:27:51,220 --> 00:28:03,720
we need somehow to die like wow so the

00:27:59,110 --> 00:28:08,740
thing is we need to define the moment I

00:28:03,720 --> 00:28:12,480
know right it's like it's immortal code

00:28:08,740 --> 00:28:17,289
but we need somehow to end the game and

00:28:12,480 --> 00:28:19,299
the game is subscription so we need to

00:28:17,289 --> 00:28:26,309
unsubscribe from it and the game

00:28:19,299 --> 00:28:32,890
actually so let's add a condition if our

00:28:26,309 --> 00:28:39,760
objects ball position Y is more than

00:28:32,890 --> 00:28:42,850
canvas height - ball radius because

00:28:39,760 --> 00:28:48,279
otherwise it will go under there more

00:28:42,850 --> 00:28:50,380
than we are going to draw game over it

00:28:48,279 --> 00:28:55,690
will just render a text on the screen

00:28:50,380 --> 00:29:00,720
nothing magical and a magical part is

00:28:55,690 --> 00:29:00,720
here we need to make game unsubscribe

00:29:01,440 --> 00:29:10,779
let's check it now okay nice game is

00:29:07,120 --> 00:29:13,360
over and to be a bit better and be more

00:29:10,779 --> 00:29:19,690
kind when it also to end the game when

00:29:13,360 --> 00:29:22,360
we have no bricks imagine if you just

00:29:19,690 --> 00:29:31,029
think you're winning like no bricks and

00:29:22,360 --> 00:29:32,649
game is not stopping just continue now

00:29:31,029 --> 00:29:38,409
we will draw something more positive

00:29:32,649 --> 00:29:40,179
like congrats and unsubscribe again and

00:29:38,409 --> 00:29:41,910
I'm not going to test it because it will

00:29:40,179 --> 00:29:44,850
take a lot of time

00:29:41,910 --> 00:29:48,390
and also the lunch is ahead so everyone

00:29:44,850 --> 00:29:50,220
will food but okay game over and if you

00:29:48,390 --> 00:29:52,559
want to check this game and all the

00:29:50,220 --> 00:29:55,799
magic methods I had here I have this

00:29:52,559 --> 00:29:56,620
repository for the breakout and thank

00:29:55,799 --> 00:29:58,970
you

00:29:56,620 --> 00:30:00,640
[Applause]

00:29:58,970 --> 00:30:00,760
[Music]

00:30:00,640 --> 00:30:08,369
[Applause]

00:30:00,760 --> 00:30:08,369

YouTube URL: https://www.youtube.com/watch?v=vS1-jzngpmw


