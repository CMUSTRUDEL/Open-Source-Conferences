Title: Serverless can do that?! - Simona Cotin | JSHeroes 2019
Publication date: 2019-04-27
Playlist: JSHeroes 2019
Description: 
	As a frontend developer you might think - why would I even care about servers? Or lack thereof! ðŸ¤”

In this session we'll explore how empowering serverless is for the Javascript developer and how much we can already achieve by not reinventing the wheel. We'll also sprinkling a bit of serverless magic and learn how we can use it once we add it to our toolbox.
Captions: 
	00:00:00,160 --> 00:00:13,310
[Music]

00:00:14,120 --> 00:00:19,529
thank you so much for having me the

00:00:16,980 --> 00:00:22,800
story behind the blind invite is that

00:00:19,529 --> 00:00:25,500
right about that time when Alex messaged

00:00:22,800 --> 00:00:27,570
me I was actually at ng-conf and I was

00:00:25,500 --> 00:00:30,029
just getting ready for my talk and I was

00:00:27,570 --> 00:00:32,279
freaking out both about the talk that

00:00:30,029 --> 00:00:34,590
was upcoming as well as the fact that I

00:00:32,279 --> 00:00:38,670
was gonna speak for the very first time

00:00:34,590 --> 00:00:41,580
in Romania which is my country right so

00:00:38,670 --> 00:00:43,379
I'm really really really happy and

00:00:41,580 --> 00:00:45,510
thankful for being here

00:00:43,379 --> 00:00:48,510
and I look forward to speaking with all

00:00:45,510 --> 00:00:51,989
of you throughout these two days and

00:00:48,510 --> 00:00:55,280
hopefully yeah I'll get to meet a lot of

00:00:51,989 --> 00:00:57,600
you and today we're gonna focus on

00:00:55,280 --> 00:00:59,510
service we're gonna learn about several

00:00:57,600 --> 00:01:03,870
lists together

00:00:59,510 --> 00:01:06,300
I'm gonna start with time time is

00:01:03,870 --> 00:01:11,340
absolutely crucial when we're building

00:01:06,300 --> 00:01:14,810
products service is here to help us

00:01:11,340 --> 00:01:18,450
spend time on things that are important

00:01:14,810 --> 00:01:21,720
instead of stuff that seems shiny but

00:01:18,450 --> 00:01:24,720
isn't essential how many time times as

00:01:21,720 --> 00:01:27,209
developers did we get really excited

00:01:24,720 --> 00:01:29,789
about technology that was very new and

00:01:27,209 --> 00:01:32,130
we weren't really sure that it was

00:01:29,789 --> 00:01:34,170
solving our problem but it sounded

00:01:32,130 --> 00:01:34,770
really cool that happens all the time

00:01:34,170 --> 00:01:36,750
right

00:01:34,770 --> 00:01:38,940
but it's not always great for our

00:01:36,750 --> 00:01:40,709
products and it's not always great for

00:01:38,940 --> 00:01:44,849
our teams and the way we work together

00:01:40,709 --> 00:01:47,520
and service will help us bring that

00:01:44,849 --> 00:01:49,920
excitement into our team work with new

00:01:47,520 --> 00:01:51,569
technologies but at the same time make

00:01:49,920 --> 00:01:55,140
sure that we are building the products

00:01:51,569 --> 00:01:57,929
that we have to and when we incorporate

00:01:55,140 --> 00:02:00,989
several us into our applications we no

00:01:57,929 --> 00:02:04,200
longer need to worry about configuring

00:02:00,989 --> 00:02:07,530
servers that will be handled by the

00:02:04,200 --> 00:02:09,629
platform provider as well as auto

00:02:07,530 --> 00:02:13,260
scaling or applications so making sure

00:02:09,629 --> 00:02:14,580
that we need the workload that our user

00:02:13,260 --> 00:02:18,300
is creating for us

00:02:14,580 --> 00:02:19,860
and finally what probably one of the

00:02:18,300 --> 00:02:22,020
most important things about service is

00:02:19,860 --> 00:02:26,040
that you only pay for the resources that

00:02:22,020 --> 00:02:27,470
you're using and we're gonna look at a

00:02:26,040 --> 00:02:31,440
story of

00:02:27,470 --> 00:02:34,530
that shows us how impactful abstractions

00:02:31,440 --> 00:02:37,290
of servers is so Anthony Catalina who is

00:02:34,530 --> 00:02:40,860
the founder of Squarespace wants to

00:02:37,290 --> 00:02:43,020
empower every single person out there to

00:02:40,860 --> 00:02:46,200
build their own website without ever

00:02:43,020 --> 00:02:50,700
having to code so that's like stealing

00:02:46,200 --> 00:02:53,910
our jobs in a way maybe in his own words

00:02:50,700 --> 00:02:58,950
Squarespace is working on solving the

00:02:53,910 --> 00:03:01,710
problem of self-expression but before he

00:02:58,950 --> 00:03:06,470
actually got to tackle that very

00:03:01,710 --> 00:03:09,180
important problem he needed $30,000 and

00:03:06,470 --> 00:03:12,000
that's how much money he had to spend on

00:03:09,180 --> 00:03:15,870
two servers buying two servers back in

00:03:12,000 --> 00:03:17,640
2000 in order to release his very first

00:03:15,870 --> 00:03:19,680
version of Squarespace so make it

00:03:17,640 --> 00:03:22,950
available for everyone out there that

00:03:19,680 --> 00:03:27,270
wanted to build their website and after

00:03:22,950 --> 00:03:29,610
his initial investment he went on to

00:03:27,270 --> 00:03:31,770
hosting his servers in his dorm room he

00:03:29,610 --> 00:03:34,410
was a student back then can you imagine

00:03:31,770 --> 00:03:37,170
that being a student in a dorm room and

00:03:34,410 --> 00:03:40,470
having to host two ginormous servers and

00:03:37,170 --> 00:03:42,420
the actual like logistics of that

00:03:40,470 --> 00:03:46,010
obviously that didn't work out very well

00:03:42,420 --> 00:03:48,870
and he ended up moving those servers

00:03:46,010 --> 00:03:50,880
into an actual data center so renting

00:03:48,870 --> 00:03:56,370
space there and that added to the cost

00:03:50,880 --> 00:03:58,680
of his product and his business and not

00:03:56,370 --> 00:04:03,240
very long after that he also experienced

00:03:58,680 --> 00:04:06,000
his very first outage and with that he

00:04:03,240 --> 00:04:09,090
also experienced the panic of losing his

00:04:06,000 --> 00:04:12,060
entire data his user data which was the

00:04:09,090 --> 00:04:13,860
equivalent of losing his business that's

00:04:12,060 --> 00:04:16,080
pretty scary right you're just starting

00:04:13,860 --> 00:04:20,100
you're a student you've invested all

00:04:16,080 --> 00:04:22,680
this money and everything is gone not

00:04:20,100 --> 00:04:26,160
fun at all eventually he also had to

00:04:22,680 --> 00:04:30,960
replace those servers because dig they

00:04:26,160 --> 00:04:33,210
dig it they'll go bad so $30,000 that

00:04:30,960 --> 00:04:35,310
was the initial investment that Anthony

00:04:33,210 --> 00:04:37,800
had to make in order to build a product

00:04:35,310 --> 00:04:40,409
for his users and probably that was the

00:04:37,800 --> 00:04:44,369
case for a lot of the startup founders

00:04:40,409 --> 00:04:45,779
that time and this is what virtual

00:04:44,369 --> 00:04:48,349
virtualization or

00:04:45,779 --> 00:04:51,839
infrastructure-as-a-service held

00:04:48,349 --> 00:04:54,509
move forward with we basically didn't

00:04:51,839 --> 00:04:57,809
have to buy Hardware anymore we don't

00:04:54,509 --> 00:05:01,529
have to worry about Hardware getting

00:04:57,809 --> 00:05:03,569
broken now we can start building our

00:05:01,529 --> 00:05:06,389
products without having to make that

00:05:03,569 --> 00:05:11,819
upfront commitment financial commitment

00:05:06,389 --> 00:05:13,679
and service is the latest step on the

00:05:11,819 --> 00:05:17,339
path of taking away the burden of

00:05:13,679 --> 00:05:19,379
infrastructure and has a similar impact

00:05:17,339 --> 00:05:22,679
on getting us started with building our

00:05:19,379 --> 00:05:25,379
products only now it will free us up

00:05:22,679 --> 00:05:27,449
from having to manage those servers and

00:05:25,379 --> 00:05:29,819
having to configure them and having to

00:05:27,449 --> 00:05:32,099
patch them with security updates and

00:05:29,819 --> 00:05:34,469
install web servers and operating

00:05:32,099 --> 00:05:37,409
systems so all of that work all of that

00:05:34,469 --> 00:05:39,719
operational work we no longer have to do

00:05:37,409 --> 00:05:42,779
it when we start building service

00:05:39,719 --> 00:05:46,729
applications and that means that it

00:05:42,779 --> 00:05:50,189
frees time first which is money as well

00:05:46,729 --> 00:05:52,559
this is a a pen vysehrad Reznor that i

00:05:50,189 --> 00:05:54,689
absolutely love and takes us through the

00:05:52,559 --> 00:05:58,709
jordan journey of moving from

00:05:54,689 --> 00:06:03,089
infrastructure as a service to functions

00:05:58,709 --> 00:06:05,550
as a service and much like high-level

00:06:03,089 --> 00:06:08,999
programming languages are an abstraction

00:06:05,550 --> 00:06:12,989
of machine code serverless is an

00:06:08,999 --> 00:06:15,119
abstraction of cloud infrastructure so

00:06:12,989 --> 00:06:17,909
with low-level programming languages we

00:06:15,119 --> 00:06:20,429
have to know how to manage memory how to

00:06:17,909 --> 00:06:26,099
allocate and deallocate it we have to

00:06:20,429 --> 00:06:30,829
have provision that memory and what

00:06:26,099 --> 00:06:33,569
service we don't have to do that anymore

00:06:30,829 --> 00:06:35,399
with traditional applications we have to

00:06:33,569 --> 00:06:36,959
we whenever we're working with

00:06:35,399 --> 00:06:39,029
traditionally hosted applications we

00:06:36,959 --> 00:06:42,209
have to kind of answer those questions

00:06:39,029 --> 00:06:45,389
how many users do I expect to be on my

00:06:42,209 --> 00:06:47,459
websites what's how much infrastructure

00:06:45,389 --> 00:06:50,039
did I provision for that and how much

00:06:47,459 --> 00:06:53,249
would I need if there's a spike in my

00:06:50,039 --> 00:06:54,070
traffic how do I configure that how do I

00:06:53,249 --> 00:06:56,290
make it out of

00:06:54,070 --> 00:06:59,830
kill we have to answer all of those

00:06:56,290 --> 00:07:02,220
questions and just like high-level

00:06:59,830 --> 00:07:05,170
programming languages took away that

00:07:02,220 --> 00:07:07,140
configuration from us and we can just

00:07:05,170 --> 00:07:10,270
focus on writing code and building

00:07:07,140 --> 00:07:13,000
applications faster just like that

00:07:10,270 --> 00:07:17,110
service is helping us build our

00:07:13,000 --> 00:07:19,540
applications faster it enables us to

00:07:17,110 --> 00:07:21,820
focus on the code that's relevant to our

00:07:19,540 --> 00:07:24,250
product without having to worry about

00:07:21,820 --> 00:07:28,630
babysitting servers just like Sarah

00:07:24,250 --> 00:07:30,670
would say and said many times several us

00:07:28,630 --> 00:07:32,890
gives us the ability to focus on the

00:07:30,670 --> 00:07:35,710
important things right from the

00:07:32,890 --> 00:07:38,590
beginning and in our case important

00:07:35,710 --> 00:07:40,960
means solving problems or we're all

00:07:38,590 --> 00:07:42,700
passionate about that right that's the

00:07:40,960 --> 00:07:48,250
one thing that programmers like to do

00:07:42,700 --> 00:07:51,130
solve problems the next thing that we

00:07:48,250 --> 00:07:53,380
have to worry about so we're starting

00:07:51,130 --> 00:07:55,750
building this application and the first

00:07:53,380 --> 00:07:56,860
thing we worry about is well what kind

00:07:55,750 --> 00:07:58,750
of servers ready

00:07:56,860 --> 00:08:00,940
what's my web server and all that

00:07:58,750 --> 00:08:02,320
infrastructure questions and then as our

00:08:00,940 --> 00:08:05,170
application becomes more and more

00:08:02,320 --> 00:08:07,360
popular we start thinking about scale we

00:08:05,170 --> 00:08:12,370
start thinking about what happens when

00:08:07,360 --> 00:08:15,010
we have more and more users and every

00:08:12,370 --> 00:08:20,140
five years millions of Australians have

00:08:15,010 --> 00:08:23,200
to fill in a census survey and in 2016

00:08:20,140 --> 00:08:26,260
the Australian Government decided to run

00:08:23,200 --> 00:08:31,300
that survey online instead of having

00:08:26,260 --> 00:08:32,950
people go on site and they spend nine

00:08:31,300 --> 00:08:36,340
million dollars and probably a lot of

00:08:32,950 --> 00:08:39,580
time building an online survey form and

00:08:36,340 --> 00:08:42,340
they told everyone to go home and fill

00:08:39,580 --> 00:08:45,520
in the survey and that's exactly what

00:08:42,340 --> 00:08:46,900
happened everyone went home at the exact

00:08:45,520 --> 00:08:52,210
same time after work

00:08:46,900 --> 00:08:54,700
and they started filling the Surrey the

00:08:52,210 --> 00:08:57,100
next thing that happened the website has

00:08:54,700 --> 00:08:59,710
crashed and Senses Fail

00:08:57,100 --> 00:09:03,100
is trending on social media that's never

00:08:59,710 --> 00:09:06,250
good news right so the government

00:09:03,100 --> 00:09:08,259
managed to gather very little data about

00:09:06,250 --> 00:09:10,540
their people

00:09:08,259 --> 00:09:12,669
and they ended up spending other tens of

00:09:10,540 --> 00:09:17,229
millions of dollars to fix those issues

00:09:12,669 --> 00:09:21,609
and also fix the marketing disaster that

00:09:17,229 --> 00:09:23,290
happened in a completely different

00:09:21,609 --> 00:09:25,449
environment that we can after the

00:09:23,290 --> 00:09:27,789
failure to students at a hackathon

00:09:25,449 --> 00:09:29,369
they're trying to figure out what kind

00:09:27,789 --> 00:09:33,399
of problem do they want to solve and

00:09:29,369 --> 00:09:35,229
they ended up replicating the census

00:09:33,399 --> 00:09:36,939
website so they downloaded all the

00:09:35,229 --> 00:09:38,589
static assets that they could find and

00:09:36,939 --> 00:09:40,470
then they implemented their back-end

00:09:38,589 --> 00:09:47,769
using serverless

00:09:40,470 --> 00:09:51,519
so to students 72 hours after the three

00:09:47,769 --> 00:09:53,079
days they also ran load tests and it

00:09:51,519 --> 00:09:56,019
turns out that they were able to sort

00:09:53,079 --> 00:09:58,179
serve even more requests than the

00:09:56,019 --> 00:10:01,809
initial predicted load for the census

00:09:58,179 --> 00:10:06,549
website for less than two hundred

00:10:01,809 --> 00:10:12,850
dollars so nine million dollars and two

00:10:06,549 --> 00:10:14,589
hundred dollars without census fail with

00:10:12,850 --> 00:10:17,019
surveys we can be sure that our

00:10:14,589 --> 00:10:19,379
applications will scale automatically to

00:10:17,019 --> 00:10:22,059
meet the current workload and

00:10:19,379 --> 00:10:25,649
scalability is basically a term used to

00:10:22,059 --> 00:10:27,970
describe a system's ability to cope with

00:10:25,649 --> 00:10:31,019
increased demand so we answer questions

00:10:27,970 --> 00:10:34,149
like what happens when we move from a

00:10:31,019 --> 00:10:37,359
thousand concurrent users or a thousand

00:10:34,149 --> 00:10:39,600
users to a hundred thousand users or 1

00:10:37,359 --> 00:10:42,100
million users to a hundred million users

00:10:39,600 --> 00:10:44,350
our system will probably have to deal

00:10:42,100 --> 00:10:47,049
with an increased number of concurrent

00:10:44,350 --> 00:10:50,169
requests as well as processing a lot

00:10:47,049 --> 00:10:53,109
more data and for that we have to

00:10:50,169 --> 00:10:55,629
provision dynamically resources so we

00:10:53,109 --> 00:10:58,179
have to make sure that we add more

00:10:55,629 --> 00:10:59,649
resources or we reduce the number of

00:10:58,179 --> 00:11:04,889
resources depending on the actual

00:10:59,649 --> 00:11:07,839
workload and put server lists we

00:11:04,889 --> 00:11:09,220
dynamically add and remove those

00:11:07,839 --> 00:11:11,829
resources based on the number of

00:11:09,220 --> 00:11:13,779
incoming requests then the goal for this

00:11:11,829 --> 00:11:16,869
is to make sure that we maintain a

00:11:13,779 --> 00:11:20,789
reliable performance even when when our

00:11:16,869 --> 00:11:20,789
load parameters are changing

00:11:21,460 --> 00:11:28,310
scalability is definitely a hard problem

00:11:24,110 --> 00:11:32,330
to solve and by outsourcing the job of

00:11:28,310 --> 00:11:34,670
spinning up new instances and monitoring

00:11:32,330 --> 00:11:37,279
them by outsourcing that to someone else

00:11:34,670 --> 00:11:39,589
to the cloud provider or generally the

00:11:37,279 --> 00:11:42,410
service provider we actually make sure

00:11:39,589 --> 00:11:44,779
that we have enough time to focus on how

00:11:42,410 --> 00:11:47,240
our components communicate with each

00:11:44,779 --> 00:11:50,860
other and how they scale together as a

00:11:47,240 --> 00:11:52,760
system as opposed to individually and

00:11:50,860 --> 00:11:54,860
finally probably one of the most

00:11:52,760 --> 00:11:56,300
important aspects of servers that i've

00:11:54,860 --> 00:11:59,330
mentioned before is the fact that we

00:11:56,300 --> 00:12:03,050
only pay for what we use so for 1

00:11:59,330 --> 00:12:06,230
million invocations using up to 128

00:12:03,050 --> 00:12:09,470
megabytes of memory and running for less

00:12:06,230 --> 00:12:13,220
than a second wind up paying zero

00:12:09,470 --> 00:12:16,430
dollars you heard that correctly so

00:12:13,220 --> 00:12:19,700
nowadays basically we have we can have

00:12:16,430 --> 00:12:24,040
someone buy all the hardware for us set

00:12:19,700 --> 00:12:27,200
up all the loads a load balancing and

00:12:24,040 --> 00:12:30,890
install operating system patch patch

00:12:27,200 --> 00:12:32,990
things for us run code a million times

00:12:30,890 --> 00:12:35,390
and we pay absolutely nothing for it

00:12:32,990 --> 00:12:37,100
that's all wonderful this is a wonderful

00:12:35,390 --> 00:12:39,620
time to build applications and I

00:12:37,100 --> 00:12:41,690
encourage all of you if you have a sort

00:12:39,620 --> 00:12:43,880
of idea if you have any idea do make

00:12:41,690 --> 00:12:47,240
sure to try it out with service you're

00:12:43,880 --> 00:12:49,040
gonna you're gonna get very far

00:12:47,240 --> 00:12:50,839
if we increase the number of requests

00:12:49,040 --> 00:12:54,440
from or invocations from 1 million to

00:12:50,839 --> 00:12:56,330
five millions then we're gonna pay less

00:12:54,440 --> 00:13:00,610
than five dollars that's like the cost

00:12:56,330 --> 00:13:00,610
less than the cost of a Starbucks coffee

00:13:01,420 --> 00:13:07,279
all right so we've seen some of the

00:13:03,709 --> 00:13:09,050
benefits of using service and probably

00:13:07,279 --> 00:13:11,650
now everyone's really excited I'm gonna

00:13:09,050 --> 00:13:15,130
go home and try the server last thing

00:13:11,650 --> 00:13:19,640
but where do you get started

00:13:15,130 --> 00:13:21,709
and there's two different components

00:13:19,640 --> 00:13:23,660
that make up server list so the first

00:13:21,709 --> 00:13:26,149
one is back-end as a service and that's

00:13:23,660 --> 00:13:28,190
third party API that we might be using

00:13:26,149 --> 00:13:30,680
things like for example an

00:13:28,190 --> 00:13:32,800
authentication provider as opposed to us

00:13:30,680 --> 00:13:34,370
reinventing the wheel and implementing

00:13:32,800 --> 00:13:37,730
authentication who here

00:13:34,370 --> 00:13:44,630
of implementing authentication we have

00:13:37,730 --> 00:13:47,089
Sara but I bet she's lying right yeah

00:13:44,630 --> 00:13:50,140
it's it's so much better to reuse

00:13:47,089 --> 00:13:52,940
someone else's server right service and

00:13:50,140 --> 00:13:55,760
that's what back end as a service allows

00:13:52,940 --> 00:13:58,190
us to do we use someone else's services

00:13:55,760 --> 00:13:59,570
and they scale depending on demand we

00:13:58,190 --> 00:14:01,910
don't have to worry about any of that

00:13:59,570 --> 00:14:04,370
and then the other component of services

00:14:01,910 --> 00:14:07,130
functions as a service that is basically

00:14:04,370 --> 00:14:09,920
running code in ephemeral containers on

00:14:07,130 --> 00:14:12,020
demand so these two components will make

00:14:09,920 --> 00:14:14,480
up your service architectures and your

00:14:12,020 --> 00:14:16,910
service applications and I might

00:14:14,480 --> 00:14:19,400
actually you already be using some of

00:14:16,910 --> 00:14:22,820
these services so if you're using things

00:14:19,400 --> 00:14:27,380
like AWS dynamodb or azure cosmos DB or

00:14:22,820 --> 00:14:30,110
any storage any form of storage like s3

00:14:27,380 --> 00:14:34,339
or Azure storage you're already using

00:14:30,110 --> 00:14:36,830
managed services and fully managed and

00:14:34,339 --> 00:14:40,220
highly scalable services our core

00:14:36,830 --> 00:14:42,740
tenants of service systems they clear

00:14:40,220 --> 00:14:46,060
the path for us to focus on features

00:14:42,740 --> 00:14:48,830
that are truly relevant to our products

00:14:46,060 --> 00:14:50,570
by removing the need for us to learn how

00:14:48,830 --> 00:14:52,730
they work how to install them how to

00:14:50,570 --> 00:14:54,140
configure them how to provision them we

00:14:52,730 --> 00:14:59,140
only have to learn how to use their

00:14:54,140 --> 00:15:01,820
api's that's it that's a good deal and

00:14:59,140 --> 00:15:04,430
at the core of service applications we

00:15:01,820 --> 00:15:08,000
also have functions as a service or

00:15:04,430 --> 00:15:10,570
cloud functions and they they run in MML

00:15:08,000 --> 00:15:14,060
containers as I mentioned earlier in

00:15:10,570 --> 00:15:17,390
reaction to an event so think of an HTTP

00:15:14,060 --> 00:15:20,540
request being sent to an endpoint we can

00:15:17,390 --> 00:15:23,750
run code in reaction to that or a file

00:15:20,540 --> 00:15:25,430
being uploaded in a storage account we

00:15:23,750 --> 00:15:28,339
can run code in reaction to that to

00:15:25,430 --> 00:15:32,200
process that file or even a very common

00:15:28,339 --> 00:15:35,959
task with service functions is running

00:15:32,200 --> 00:15:37,700
cron jobs so you'll normally have to

00:15:35,959 --> 00:15:40,190
provision a server in order to run those

00:15:37,700 --> 00:15:42,410
cron jobs but you can actually use

00:15:40,190 --> 00:15:46,820
service and you don't have to set up any

00:15:42,410 --> 00:15:47,990
of the server configuration and because

00:15:46,820 --> 00:15:50,839
our code is run

00:15:47,990 --> 00:15:53,390
in a femoral containers and for us in

00:15:50,839 --> 00:15:55,820
order to for us to be able to scale out

00:15:53,390 --> 00:15:58,580
infinitely that code you have to write

00:15:55,820 --> 00:16:01,390
stateless code that might be a pain

00:15:58,580 --> 00:16:05,600
sometime your service function is like a

00:16:01,390 --> 00:16:09,589
goldfish it has a very short memory you

00:16:05,600 --> 00:16:13,130
you cannot rely for for state to be

00:16:09,589 --> 00:16:15,500
stored in between function runs if you

00:16:13,130 --> 00:16:18,470
need that you're gonna have to save that

00:16:15,500 --> 00:16:21,770
state somewhere in a queue for example

00:16:18,470 --> 00:16:27,830
or a database so you have to move that

00:16:21,770 --> 00:16:31,209
state outside your your memory our code

00:16:27,830 --> 00:16:34,700
is also event-driven so it reacts to

00:16:31,209 --> 00:16:37,130
specific triggers which can be either

00:16:34,700 --> 00:16:39,560
trigger triggered by your managed

00:16:37,130 --> 00:16:43,790
services or some of the other custom

00:16:39,560 --> 00:16:45,529
sources that you might define and in a

00:16:43,790 --> 00:16:48,339
nutshell this would be the the

00:16:45,529 --> 00:16:51,020
processing model of a service

00:16:48,339 --> 00:16:52,940
environment where you have on your left

00:16:51,020 --> 00:16:55,700
hand side you have your event sources

00:16:52,940 --> 00:16:57,649
which can be a change that happened in a

00:16:55,700 --> 00:16:59,959
github repository or a change that

00:16:57,649 --> 00:17:02,440
happen in database and that is being

00:16:59,959 --> 00:17:05,089
intercepted by a scale controller and

00:17:02,440 --> 00:17:08,480
the scale controller is in charge of

00:17:05,089 --> 00:17:11,660
creating the the function instances so

00:17:08,480 --> 00:17:14,750
depending it will use basically some

00:17:11,660 --> 00:17:16,490
heuristics where depending for example

00:17:14,750 --> 00:17:18,709
if you're using a queue trigger if

00:17:16,490 --> 00:17:20,929
you're listening to events of messages

00:17:18,709 --> 00:17:24,020
on a queue it will figure out how many

00:17:20,929 --> 00:17:26,300
instances it needs to create by looking

00:17:24,020 --> 00:17:29,390
at the number of messages that you have

00:17:26,300 --> 00:17:31,429
on the queue and the age of the oldest

00:17:29,390 --> 00:17:34,280
message on that queue and based on that

00:17:31,429 --> 00:17:39,530
it will create either two instances of

00:17:34,280 --> 00:17:41,840
functions or a hundred and then the

00:17:39,530 --> 00:17:45,020
yellow things there are your actual code

00:17:41,840 --> 00:17:47,300
that's being deployed in a container and

00:17:45,020 --> 00:17:49,640
then at the bottom we can see some of

00:17:47,300 --> 00:17:52,309
the managed services that you might want

00:17:49,640 --> 00:17:56,179
you might interact with from your server

00:17:52,309 --> 00:18:00,260
less code it's quite simple right three

00:17:56,179 --> 00:18:01,550
components but with every new technology

00:18:00,260 --> 00:18:03,650
we need to figure out what

00:18:01,550 --> 00:18:07,280
of tools are available for us and how

00:18:03,650 --> 00:18:08,840
can we add them to our toolset and what

00:18:07,280 --> 00:18:11,720
service we have a couple of options to

00:18:08,840 --> 00:18:14,960
consider so we could use the browser for

00:18:11,720 --> 00:18:16,640
creating serverless functions all you

00:18:14,960 --> 00:18:18,560
need is a computer and the browser

00:18:16,640 --> 00:18:22,010
running and that's a good place to start

00:18:18,560 --> 00:18:25,700
with functions this is a screen shot of

00:18:22,010 --> 00:18:27,590
my portal which is in a drive I work for

00:18:25,700 --> 00:18:29,630
Microsoft so the examples here will be

00:18:27,590 --> 00:18:32,120
on Azure but you can see here on your

00:18:29,630 --> 00:18:34,910
left hand side you can create new

00:18:32,120 --> 00:18:37,910
functions and then in the at the center

00:18:34,910 --> 00:18:39,410
of the screen you're gonna see all the

00:18:37,910 --> 00:18:41,420
code that you've written at the bottom

00:18:39,410 --> 00:18:43,910
you're gonna see the logs for your

00:18:41,420 --> 00:18:45,560
invocations and on the right hand side

00:18:43,910 --> 00:18:48,320
you can actually test your code right

00:18:45,560 --> 00:18:50,510
there so you can set your HTTP method

00:18:48,320 --> 00:18:53,960
you can send parameters and you can see

00:18:50,510 --> 00:18:57,380
the output of that invocation you will

00:18:53,960 --> 00:19:00,080
see a very similar kind of screen for

00:18:57,380 --> 00:19:02,180
most of the other cloud providers with

00:19:00,080 --> 00:19:04,670
serverless functions but as you get more

00:19:02,180 --> 00:19:06,290
accustomed than you you get more excited

00:19:04,670 --> 00:19:09,920
about service you're probably gonna want

00:19:06,290 --> 00:19:13,310
to move from coding in the browser you

00:19:09,920 --> 00:19:14,750
might want to move in your local and as

00:19:13,310 --> 00:19:17,440
you do that you're gonna want to be able

00:19:14,750 --> 00:19:20,720
to write code in your editor of choice

00:19:17,440 --> 00:19:22,460
you're also going to want to have tools

00:19:20,720 --> 00:19:24,830
that do all the heavy lifting for you

00:19:22,460 --> 00:19:27,920
and generate all the boilerplate code

00:19:24,830 --> 00:19:29,530
that you might need so that you can be

00:19:27,920 --> 00:19:32,450
super productive

00:19:29,530 --> 00:19:34,070
you're also once you be able to run in

00:19:32,450 --> 00:19:37,640
the bug code locally we all like that

00:19:34,070 --> 00:19:40,400
right and so word for cook quickly

00:19:37,640 --> 00:19:42,800
deploying your code what what use does a

00:19:40,400 --> 00:19:44,360
code have if it's sitting only on our

00:19:42,800 --> 00:19:47,840
machine it works on my machine but

00:19:44,360 --> 00:19:49,370
nobody else's so with the azure

00:19:47,840 --> 00:19:52,160
functions you're gonna have support for

00:19:49,370 --> 00:19:53,900
that using the core tools which you can

00:19:52,160 --> 00:19:56,930
install from NPM and then you can

00:19:53,900 --> 00:19:59,780
initialize the project using the CLI so

00:19:56,930 --> 00:20:02,510
if you like using the CLI you can use

00:19:59,780 --> 00:20:04,790
the function lie and it will help you do

00:20:02,510 --> 00:20:07,040
all of those things that we listed there

00:20:04,790 --> 00:20:08,750
otherwise if your editor of choice

00:20:07,040 --> 00:20:11,090
happens to be vs code there's a

00:20:08,750 --> 00:20:13,520
wonderful extension for that the azure

00:20:11,090 --> 00:20:14,990
functions extension in vs code is

00:20:13,520 --> 00:20:20,990
the best thing that has happened to

00:20:14,990 --> 00:20:24,200
service in my opinion once you have that

00:20:20,990 --> 00:20:27,530
installed you can access the extension

00:20:24,200 --> 00:20:29,980
from the ash from the panel there and it

00:20:27,530 --> 00:20:32,300
will allow us to create a new project

00:20:29,980 --> 00:20:34,160
which is called a function app and this

00:20:32,300 --> 00:20:36,080
is where you would group all of your

00:20:34,160 --> 00:20:38,330
functions together so that they can

00:20:36,080 --> 00:20:41,510
scale at the same time and you can

00:20:38,330 --> 00:20:44,930
deploy them together it will also enable

00:20:41,510 --> 00:20:47,210
you to configure some custom settings

00:20:44,930 --> 00:20:49,240
for the entire project so things like

00:20:47,210 --> 00:20:51,770
what kind of runtime do you want to use

00:20:49,240 --> 00:20:54,350
2.0 is the latest version of the azure

00:20:51,770 --> 00:20:56,450
functions runtime it will also allow you

00:20:54,350 --> 00:20:59,450
to customize the function timeout so by

00:20:56,450 --> 00:21:03,470
default it's five minutes you can get up

00:20:59,450 --> 00:21:05,770
to 15 minutes with running serverless

00:21:03,470 --> 00:21:08,270
code and then you can also configure

00:21:05,770 --> 00:21:11,630
some of the extensions that we have

00:21:08,270 --> 00:21:13,430
available so think of the HTTP events we

00:21:11,630 --> 00:21:17,630
can configure things like the route

00:21:13,430 --> 00:21:19,940
prefix so add to our URL a certain part

00:21:17,630 --> 00:21:21,950
like in this case tacos or the number of

00:21:19,940 --> 00:21:29,510
concurrent requests that we want to

00:21:21,950 --> 00:21:31,550
support another thing that we want to do

00:21:29,510 --> 00:21:34,310
since we're communicating with managed

00:21:31,550 --> 00:21:37,490
services will also want to be able to

00:21:34,310 --> 00:21:39,860
use connection strings that's part of

00:21:37,490 --> 00:21:41,900
our daily job right be able to connect

00:21:39,860 --> 00:21:45,140
to data sources and we're gonna be able

00:21:41,900 --> 00:21:48,260
to do that using local that settings up

00:21:45,140 --> 00:21:51,470
JSON or application settings we can

00:21:48,260 --> 00:21:52,880
configure them here and then the next

00:21:51,470 --> 00:21:55,010
thing that so we've created the project

00:21:52,880 --> 00:21:57,020
we've configured global settings then

00:21:55,010 --> 00:22:00,380
we're going to want to be able to create

00:21:57,020 --> 00:22:02,510
new functions and here you can you can

00:22:00,380 --> 00:22:04,160
see some of the types of events that we

00:22:02,510 --> 00:22:08,270
can listen to the languages that are

00:22:04,160 --> 00:22:10,460
available for us and then these this is

00:22:08,270 --> 00:22:13,850
the code that's generated for us the

00:22:10,460 --> 00:22:15,860
boilerplate code based on templates that

00:22:13,850 --> 00:22:17,990
we have already created for you so this

00:22:15,860 --> 00:22:21,680
is an HTTP triggered function where we

00:22:17,990 --> 00:22:24,020
have two parameters there the context

00:22:21,680 --> 00:22:25,940
object and the request data the context

00:22:24,020 --> 00:22:26,790
object allows us to communicate with the

00:22:25,940 --> 00:22:29,870
Platt

00:22:26,790 --> 00:22:34,700
API so because in the service

00:22:29,870 --> 00:22:36,390
environment our we're shared the same

00:22:34,700 --> 00:22:37,800
operating system were the same

00:22:36,390 --> 00:22:40,650
environment we share it with other

00:22:37,800 --> 00:22:44,040
customers or with other users we you

00:22:40,650 --> 00:22:46,350
don't have access to the low-level API s

00:22:44,040 --> 00:22:48,720
you want to be able to communicate with

00:22:46,350 --> 00:22:51,000
a platform API and we do that with casts

00:22:48,720 --> 00:22:56,160
with context this is a hello world

00:22:51,000 --> 00:22:58,590
function and then here we can already

00:22:56,160 --> 00:23:04,560
talked about the context and request and

00:22:58,590 --> 00:23:06,900
then we use the context object to log

00:23:04,560 --> 00:23:09,870
information and then here we can set the

00:23:06,900 --> 00:23:12,420
the response the other important thing

00:23:09,870 --> 00:23:14,190
about functions and service functions is

00:23:12,420 --> 00:23:16,290
that we have access to bindings we can

00:23:14,190 --> 00:23:19,350
use bindings to communicate with those

00:23:16,290 --> 00:23:22,980
data sources and they they are used to

00:23:19,350 --> 00:23:25,830
read and write data from two databases

00:23:22,980 --> 00:23:27,390
or even send emails if we wanted to

00:23:25,830 --> 00:23:29,220
they basically enable developers

00:23:27,390 --> 00:23:31,590
simplicity better performance and

00:23:29,220 --> 00:23:33,480
security the serverless platform will

00:23:31,590 --> 00:23:35,760
manage for us those data base

00:23:33,480 --> 00:23:37,920
connections it will reuse those

00:23:35,760 --> 00:23:40,710
connections between invocation calls and

00:23:37,920 --> 00:23:42,870
in a distant future maybe your close

00:23:40,710 --> 00:23:45,000
future we're also going to be able to do

00:23:42,870 --> 00:23:48,120
things like prefetching or caching data

00:23:45,000 --> 00:23:50,580
that we've already retrieved and by

00:23:48,120 --> 00:23:53,540
using these constructs we hard we avoid

00:23:50,580 --> 00:23:56,010
hard coding access to these services

00:23:53,540 --> 00:23:59,040
this is an example of how we would

00:23:56,010 --> 00:24:01,860
define a binding to a cosmos DB database

00:23:59,040 --> 00:24:04,200
so it's a JSON object where we define

00:24:01,860 --> 00:24:14,150
the name the type and the connection

00:24:04,200 --> 00:24:16,770
string okay these are some examples and

00:24:14,150 --> 00:24:19,380
then we'd also we mentioned that we

00:24:16,770 --> 00:24:22,890
wanted to debug or service code and we

00:24:19,380 --> 00:24:24,360
can do that from from the IDE itself we

00:24:22,890 --> 00:24:29,220
can either a click on the debug button

00:24:24,360 --> 00:24:32,220
or filter over start debugging and this

00:24:29,220 --> 00:24:35,040
will happen very easily you can add

00:24:32,220 --> 00:24:37,260
breakpoints and when you run that will

00:24:35,040 --> 00:24:39,450
stop and then you can inspect all those

00:24:37,260 --> 00:24:40,450
variables just like you would do with

00:24:39,450 --> 00:24:42,780
any other program

00:24:40,450 --> 00:24:50,410
language or any other environment

00:24:42,780 --> 00:24:52,210
service is awesome so we've written all

00:24:50,410 --> 00:24:55,420
this code in our local let's imagine

00:24:52,210 --> 00:24:58,300
we've built a wonderful API and then we

00:24:55,420 --> 00:25:01,480
want to be able to push it to the cloud

00:24:58,300 --> 00:25:03,490
and this code will help you with that as

00:25:01,480 --> 00:25:06,760
well you're gonna be able to right click

00:25:03,490 --> 00:25:09,220
on your code or on your function in your

00:25:06,760 --> 00:25:11,830
IDE and say deploy this to the cloud but

00:25:09,220 --> 00:25:14,650
actually there will be a warning there

00:25:11,830 --> 00:25:17,710
asking do you want to override your

00:25:14,650 --> 00:25:21,850
existing deployment and the answer for

00:25:17,710 --> 00:25:24,540
that should always be no unless you're

00:25:21,850 --> 00:25:27,340
very sure that you want to do that

00:25:24,540 --> 00:25:30,880
ideally you'll want to be able to either

00:25:27,340 --> 00:25:33,580
connect your service code to a github

00:25:30,880 --> 00:25:36,070
repository or even better you're gonna

00:25:33,580 --> 00:25:38,200
want to set up a CI CD pipeline you'll

00:25:36,070 --> 00:25:40,930
want to make sure that when you push

00:25:38,200 --> 00:25:42,700
code to your repository you're gonna run

00:25:40,930 --> 00:25:45,240
you're gonna build that code and then

00:25:42,700 --> 00:25:48,340
you're gonna install dependencies and

00:25:45,240 --> 00:25:49,600
run tests and only after that push to

00:25:48,340 --> 00:25:53,920
production right we don't want to

00:25:49,600 --> 00:25:56,170
override our colleagues code this is an

00:25:53,920 --> 00:25:59,290
example of a llamo configuration that

00:25:56,170 --> 00:26:01,810
you can use to set up a CI CD pipeline

00:25:59,290 --> 00:26:04,080
using Azure functions but you can use

00:26:01,810 --> 00:26:07,000
github actions for that as well or

00:26:04,080 --> 00:26:09,490
circle CI whichever you want it's quite

00:26:07,000 --> 00:26:12,370
easy to do you have to use the exact

00:26:09,490 --> 00:26:16,780
same practices that you would use in

00:26:12,370 --> 00:26:18,820
your normal development environment so

00:26:16,780 --> 00:26:21,160
hopefully you're kind of interested

00:26:18,820 --> 00:26:23,850
you're asking yourself questions right

00:26:21,160 --> 00:26:26,230
now when do I use server lists is this

00:26:23,850 --> 00:26:28,060
the type of thing that you can use for

00:26:26,230 --> 00:26:30,610
everything in your development

00:26:28,060 --> 00:26:33,580
environment or are there any specific

00:26:30,610 --> 00:26:35,670
types of applications and generally your

00:26:33,580 --> 00:26:40,210
you'll want to use service when building

00:26:35,670 --> 00:26:42,220
web api s-- so think of an an example of

00:26:40,210 --> 00:26:44,230
your application where you can take a

00:26:42,220 --> 00:26:46,270
picture with your phone and then your

00:26:44,230 --> 00:26:49,510
that picture will get uploaded in a

00:26:46,270 --> 00:26:51,490
storage account and we will resize that

00:26:49,510 --> 00:26:53,830
picture to generate thumbnails and that

00:26:51,490 --> 00:26:55,210
will be available for our users that's

00:26:53,830 --> 00:26:57,669
the hello world of surveillance

00:26:55,210 --> 00:27:01,890
applications and that's an API that we

00:26:57,669 --> 00:27:05,679
can easily use another type of

00:27:01,890 --> 00:27:08,409
application that you can you can

00:27:05,679 --> 00:27:10,630
implement is data processing so think

00:27:08,409 --> 00:27:12,970
when you upload a CSV file in a storage

00:27:10,630 --> 00:27:16,690
account you want to be able to parse

00:27:12,970 --> 00:27:18,850
that CSV clean the data and then save

00:27:16,690 --> 00:27:23,529
that data in a database or something

00:27:18,850 --> 00:27:25,480
that's a service type of task how many

00:27:23,529 --> 00:27:28,450
times do we build single page

00:27:25,480 --> 00:27:32,049
applications very fat ones and then we

00:27:28,450 --> 00:27:34,419
have to connect to to a third party API

00:27:32,049 --> 00:27:37,779
and in order to do that we need an

00:27:34,419 --> 00:27:39,760
authentication token what do you do then

00:27:37,779 --> 00:27:42,220
you have to spin up a server and make

00:27:39,760 --> 00:27:44,529
the request from that from that back-end

00:27:42,220 --> 00:27:47,019
but as opposed to doing that you can

00:27:44,529 --> 00:27:50,440
easily build a service function that

00:27:47,019 --> 00:27:53,380
will be like a thin layer between your

00:27:50,440 --> 00:27:56,919
single page app and your third party API

00:27:53,380 --> 00:27:58,960
and Sarah has a very good example of how

00:27:56,919 --> 00:28:01,360
to build that with Azure functions how

00:27:58,960 --> 00:28:04,929
to call the stripe API to build a

00:28:01,360 --> 00:28:07,330
wonderful ecommerce website and we've

00:28:04,929 --> 00:28:09,789
seen Charlie's talk about machine

00:28:07,330 --> 00:28:11,380
learning service is not quite there when

00:28:09,789 --> 00:28:13,809
it comes to machine learning you cannot

00:28:11,380 --> 00:28:16,450
use service to train models but you can

00:28:13,809 --> 00:28:18,970
use service to deploy your models and

00:28:16,450 --> 00:28:19,330
you can also use service to build chat

00:28:18,970 --> 00:28:23,470
box

00:28:19,330 --> 00:28:27,250
an example that I built was a slack

00:28:23,470 --> 00:28:29,919
command that I can add a query string

00:28:27,250 --> 00:28:32,590
and then it will go to the noun API

00:28:29,919 --> 00:28:36,460
where I can retrieve icons and then

00:28:32,590 --> 00:28:40,029
reply back in slack sending URLs to

00:28:36,460 --> 00:28:41,799
those images I have the code don't

00:28:40,029 --> 00:28:43,510
github all share that with you later on

00:28:41,799 --> 00:28:45,789
but chat bots are a good example for

00:28:43,510 --> 00:28:48,419
that and in practice anything that's

00:28:45,789 --> 00:28:53,200
highly parallelizable concurrent a

00:28:48,419 --> 00:28:56,950
synchronous or has spiky traffic is a

00:28:53,200 --> 00:28:58,620
good a good example for service you want

00:28:56,950 --> 00:29:01,360
to spend a minimal amount of time

00:28:58,620 --> 00:29:05,820
solving the exact problem you need to

00:29:01,360 --> 00:29:05,820
address and service helps you with that

00:29:06,730 --> 00:29:10,400
obviously it's not perfect and you have

00:29:10,010 --> 00:29:11,960
to

00:29:10,400 --> 00:29:14,750
there's tons of recommendations out

00:29:11,960 --> 00:29:16,820
there I think one of the issues with

00:29:14,750 --> 00:29:19,430
turbulence is that it's not yet a mature

00:29:16,820 --> 00:29:21,020
technology so there's different opinions

00:29:19,430 --> 00:29:23,000
and there's different ways of building

00:29:21,020 --> 00:29:26,330
applications using server lists but I'm

00:29:23,000 --> 00:29:28,580
gonna mention two recommendations that

00:29:26,330 --> 00:29:32,150
you'll want to be able to you'll want to

00:29:28,580 --> 00:29:33,320
use in your environment the first the

00:29:32,150 --> 00:29:36,080
first thing that you need to keep in

00:29:33,320 --> 00:29:38,420
mind or remember is the single

00:29:36,080 --> 00:29:40,460
responsibility principle that states

00:29:38,420 --> 00:29:43,190
that every module class or function

00:29:40,460 --> 00:29:45,860
should have responsibility over a single

00:29:43,190 --> 00:29:48,260
part of the functionality provided by

00:29:45,860 --> 00:29:50,390
the software and that responsibility

00:29:48,260 --> 00:29:53,360
should be entirely encapsulated by the

00:29:50,390 --> 00:29:55,310
function the same is extremely important

00:29:53,360 --> 00:29:57,200
with serverless functions when you

00:29:55,310 --> 00:29:59,240
deploy a function you wanted to have a

00:29:57,200 --> 00:30:01,520
single responsibility because it will

00:29:59,240 --> 00:30:03,440
deploy together at the same time so it

00:30:01,520 --> 00:30:05,840
will influence your deployment strategy

00:30:03,440 --> 00:30:07,970
and it will also scale at the same time

00:30:05,840 --> 00:30:10,580
so you want to make sure that you group

00:30:07,970 --> 00:30:14,780
similar functionality together so that

00:30:10,580 --> 00:30:18,920
it's scale is scaled similarly the other

00:30:14,780 --> 00:30:21,590
important thing is to have a very clear

00:30:18,920 --> 00:30:25,100
understanding of how your system scales

00:30:21,590 --> 00:30:27,470
and which are your bottlenecks one of

00:30:25,100 --> 00:30:31,010
the very first things that everyone that

00:30:27,470 --> 00:30:34,850
tries service encounters is they build

00:30:31,010 --> 00:30:37,550
this system that scale oil functions

00:30:34,850 --> 00:30:41,510
that scale automatically infinitely they

00:30:37,550 --> 00:30:43,040
have at 500 requests per second but once

00:30:41,510 --> 00:30:45,830
they hit the database if they use a

00:30:43,040 --> 00:30:48,740
sequel database or if they use a on-prem

00:30:45,830 --> 00:30:51,050
type of solution then that's gonna be

00:30:48,740 --> 00:30:53,450
your battle neck and your system will

00:30:51,050 --> 00:30:55,550
just be as overloaded as it was before

00:30:53,450 --> 00:30:57,680
and your users are gonna be just as

00:30:55,550 --> 00:30:59,630
unhappy as they were before so it's

00:30:57,680 --> 00:31:01,490
really important to understand to have

00:30:59,630 --> 00:31:05,620
an overview of your application and

00:31:01,490 --> 00:31:05,620
understand which are your bottlenecks

00:31:06,370 --> 00:31:11,750
service enables you to solve problems

00:31:09,110 --> 00:31:14,150
creatively and at the fraction of a car

00:31:11,750 --> 00:31:17,660
of the cost that we usually pay for

00:31:14,150 --> 00:31:18,500
using traditional applications and our

00:31:17,660 --> 00:31:20,870
service

00:31:18,500 --> 00:31:23,720
applications will truly scale with our

00:31:20,870 --> 00:31:27,740
organization by enabling us to onboard

00:31:23,720 --> 00:31:31,700
users as our application becomes more

00:31:27,740 --> 00:31:35,420
and more popular and I have nothing but

00:31:31,700 --> 00:31:37,250
gratitude and hopeful feelings about how

00:31:35,420 --> 00:31:40,550
your companies and your products are

00:31:37,250 --> 00:31:42,800
going to change the world based on my

00:31:40,550 --> 00:31:44,270
experience with service I know that this

00:31:42,800 --> 00:31:49,430
technology is gonna help you achieve

00:31:44,270 --> 00:31:53,870
those goals so I'm super excited that it

00:31:49,430 --> 00:31:56,780
is here for for you to build a better

00:31:53,870 --> 00:32:07,159
world thank you so much

00:31:56,780 --> 00:32:07,159

YouTube URL: https://www.youtube.com/watch?v=fNKT6GMUxBY


