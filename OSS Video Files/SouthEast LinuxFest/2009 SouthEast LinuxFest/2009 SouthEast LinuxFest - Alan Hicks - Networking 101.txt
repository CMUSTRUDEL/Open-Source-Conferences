Title: 2009 SouthEast LinuxFest - Alan Hicks - Networking 101
Publication date: 2012-02-13
Playlist: 2009 SouthEast LinuxFest
Description: 
	2009 SouthEast LinuxFest - Alan Hicks - Networking 101

This video is licensed under Creative Commons Attribution 3.0 Unported License.
Captions: 
	00:00:00,000 --> 00:00:04,080
the following presentation was recorded

00:00:02,010 --> 00:00:06,359
by view digital media at the inaugural

00:00:04,080 --> 00:00:10,740
southeast linux fest in clemson south

00:00:06,359 --> 00:00:13,049
carolina on jun 13 2004 more information

00:00:10,740 --> 00:00:16,260
about the southeast linux fest visit

00:00:13,049 --> 00:00:18,060
southeast linux fest org thank you all

00:00:16,260 --> 00:00:19,140
so much for coming i was actually you

00:00:18,060 --> 00:00:20,880
know a little afraid wouldn't nobody

00:00:19,140 --> 00:00:23,279
show up because they had you know linux

00:00:20,880 --> 00:00:27,920
games and doob unto Colonel Ryan right

00:00:23,279 --> 00:00:30,980
now I know how popular Ubuntu is anyhow

00:00:27,920 --> 00:00:34,219
this is just a real quick primer on

00:00:30,980 --> 00:00:36,300
tcp/ip for the for the full discussion

00:00:34,219 --> 00:00:38,730
you'll want to check out the link

00:00:36,300 --> 00:00:44,010
provided here at Mozilla dotnet forward

00:00:38,730 --> 00:00:46,170
slash networking 101 dot txt the full

00:00:44,010 --> 00:00:48,570
you know the full thing is available

00:00:46,170 --> 00:00:50,399
there and you'll get you know a much

00:00:48,570 --> 00:00:53,219
greater understanding than what I can

00:00:50,399 --> 00:00:55,230
just do here for example or in this

00:00:53,219 --> 00:00:58,170
presentation we won't look at a packet

00:00:55,230 --> 00:01:03,840
in its entire binary form although and

00:00:58,170 --> 00:01:06,600
in the text file here we will so I

00:01:03,840 --> 00:01:08,880
basically started doing this class I

00:01:06,600 --> 00:01:10,950
guess you would say on IRC because

00:01:08,880 --> 00:01:13,470
that's kind of impressed by how many you

00:01:10,950 --> 00:01:15,570
know smart people just didn't know turn

00:01:13,470 --> 00:01:19,229
think about the protocols used for

00:01:15,570 --> 00:01:20,460
networking across the internet today you

00:01:19,229 --> 00:01:22,710
know there's a heap of people out there

00:01:20,460 --> 00:01:25,530
that I respect a lot that know a bunch

00:01:22,710 --> 00:01:28,610
of junk that I don't know and you know

00:01:25,530 --> 00:01:32,040
they would think UDP was you know

00:01:28,610 --> 00:01:34,710
guaranteed delivery you know just just

00:01:32,040 --> 00:01:37,439
ridiculous stuff or you know didn't

00:01:34,710 --> 00:01:39,560
understand how a routing decision was

00:01:37,439 --> 00:01:43,200
made so I you know invented this class

00:01:39,560 --> 00:01:45,840
to sort of answer that there's a couple

00:01:43,200 --> 00:01:47,549
you know basic terms we go through i'm

00:01:45,840 --> 00:01:49,710
sure you're familiar with node that's

00:01:47,549 --> 00:01:54,360
just anything that's actually on a

00:01:49,710 --> 00:01:55,920
network is a node and a frame you'll

00:01:54,360 --> 00:01:58,680
probably more commonly hear them called

00:01:55,920 --> 00:02:00,570
called packets you know you talk about a

00:01:58,680 --> 00:02:02,100
packet doing this for a packet doing

00:02:00,570 --> 00:02:04,469
that but when you get down to the low

00:02:02,100 --> 00:02:06,869
level it's more often that you're

00:02:04,469 --> 00:02:09,959
referring to frames it's basically the

00:02:06,869 --> 00:02:11,950
same thing oftentimes a frame is an

00:02:09,959 --> 00:02:14,190
incomplete packet or a packet

00:02:11,950 --> 00:02:19,230
it's that's currently being mangled

00:02:14,190 --> 00:02:21,190
somewhere along in the stack oh there's

00:02:19,230 --> 00:02:24,519
there's a whole bunch of layers is

00:02:21,190 --> 00:02:26,050
actually seven in this OSI model but

00:02:24,519 --> 00:02:29,410
we're only really interested in five

00:02:26,050 --> 00:02:32,580
four most basic things that's the

00:02:29,410 --> 00:02:35,080
physical layer that data link layer the

00:02:32,580 --> 00:02:37,900
network layer the transport layer and

00:02:35,080 --> 00:02:40,330
then the application layer the physical

00:02:37,900 --> 00:02:43,989
layer it's basically anything you can

00:02:40,330 --> 00:02:46,540
kick and I used to say that but now you

00:02:43,989 --> 00:02:48,489
have wireless and you can't kick there

00:02:46,540 --> 00:02:51,640
you know you can't kick the airwaves the

00:02:48,489 --> 00:02:53,890
radio waves so but basically the

00:02:51,640 --> 00:02:56,650
physical layers will actually transmits

00:02:53,890 --> 00:02:58,599
a signal you know usually you're talking

00:02:56,650 --> 00:03:00,940
about fiber optic cables or copper

00:02:58,599 --> 00:03:02,920
cables but you could also be talking

00:03:00,940 --> 00:03:06,730
about radio waves but the physical layer

00:03:02,920 --> 00:03:12,519
is this what exists in the real world as

00:03:06,730 --> 00:03:17,530
a real thing not as just data the data

00:03:12,519 --> 00:03:19,180
link layer is the first really

00:03:17,530 --> 00:03:20,560
interesting layer the physical layer is

00:03:19,180 --> 00:03:23,440
kind of boring you know it's just it's

00:03:20,560 --> 00:03:24,670
just here's this stuff you know but the

00:03:23,440 --> 00:03:27,100
data link layer is well actually

00:03:24,670 --> 00:03:29,680
delivers frames or packets to other

00:03:27,100 --> 00:03:32,709
computers without it you don't get any

00:03:29,680 --> 00:03:34,450
delivery whatsoever and then you have

00:03:32,709 --> 00:03:36,280
the network layer that's the first

00:03:34,450 --> 00:03:38,620
really foam and that's where all your

00:03:36,280 --> 00:03:41,079
routing decisions are made that's what

00:03:38,620 --> 00:03:43,329
allows you to actually communicate with

00:03:41,079 --> 00:03:46,510
the computer through an intermediary

00:03:43,329 --> 00:03:48,430
computer like a default gateway without

00:03:46,510 --> 00:03:51,670
the network layer you have no internet

00:03:48,430 --> 00:03:55,420
and that was going back in the day that

00:03:51,670 --> 00:03:58,690
was a big failure of no vales IPX you

00:03:55,420 --> 00:04:02,769
know it just didn't really have any sort

00:03:58,690 --> 00:04:04,540
of way to route on the internet net buoy

00:04:02,769 --> 00:04:08,139
if you're familiar with that you know

00:04:04,540 --> 00:04:10,060
windows machine name stuff like that

00:04:08,139 --> 00:04:12,370
it's not routable there's no network

00:04:10,060 --> 00:04:19,030
layer there it's why you can't you know

00:04:12,370 --> 00:04:20,590
connect to a workstation Dale 53 x you

00:04:19,030 --> 00:04:22,440
know across the internet because there's

00:04:20,590 --> 00:04:26,950
no network layer

00:04:22,440 --> 00:04:30,550
the transport layer this is a where you

00:04:26,950 --> 00:04:32,620
start to talk about TCP or UDP and this

00:04:30,550 --> 00:04:35,560
is the only layer that can guarantee

00:04:32,620 --> 00:04:38,620
that your data actually arrived intact

00:04:35,560 --> 00:04:41,290
at the opposite location everything else

00:04:38,620 --> 00:04:43,480
is unreliable transmission but until you

00:04:41,290 --> 00:04:45,430
get to the transport layer this is where

00:04:43,480 --> 00:04:48,070
we start doing some intelligent hackery

00:04:45,430 --> 00:04:51,669
that allows us to know that the other

00:04:48,070 --> 00:04:54,450
end received what we sent and that it

00:04:51,669 --> 00:04:57,940
was intact when it was received and the

00:04:54,450 --> 00:04:59,260
application layer is in a nutshell it's

00:04:57,940 --> 00:05:02,620
just the application is whatever

00:04:59,260 --> 00:05:06,160
actually makes the data portion of the

00:05:02,620 --> 00:05:08,740
frame of the packet oh there's there's

00:05:06,160 --> 00:05:11,770
the session layer and there's one other

00:05:08,740 --> 00:05:13,900
that's never really used as well but

00:05:11,770 --> 00:05:15,940
they're really usually restricted to

00:05:13,900 --> 00:05:17,229
things like multi casting and we're just

00:05:15,940 --> 00:05:20,770
not going to get into because they're

00:05:17,229 --> 00:05:21,910
not of practical importance here all

00:05:20,770 --> 00:05:24,010
right the first labor we're going to

00:05:21,910 --> 00:05:25,690
look into big as the physical layer like

00:05:24,010 --> 00:05:28,540
we said it'd be anything from radio

00:05:25,690 --> 00:05:32,620
waves the laser beams to copper wire to

00:05:28,540 --> 00:05:35,710
fiber optics but basically your cat 5

00:05:32,620 --> 00:05:37,120
cable and all it is the most common

00:05:35,710 --> 00:05:39,280
that's where you see you know you go

00:05:37,120 --> 00:05:41,470
into a network closet or you have a

00:05:39,280 --> 00:05:44,050
switch at home or your cable modem

00:05:41,470 --> 00:05:45,789
there's copper cable coming out of that

00:05:44,050 --> 00:05:48,700
going to your computer because it's

00:05:45,789 --> 00:05:51,250
cheap and it's reliable you know it

00:05:48,700 --> 00:05:53,770
costs a lot to make fiber optic cable to

00:05:51,250 --> 00:05:57,220
run you know short distances so most

00:05:53,770 --> 00:06:01,750
everyone just uses copper cat 5 or cat5e

00:05:57,220 --> 00:06:03,700
cat6 something like that in the physical

00:06:01,750 --> 00:06:08,200
layer we're just going to pay attention

00:06:03,700 --> 00:06:10,479
to cat 5 here for for copper because we

00:06:08,200 --> 00:06:13,930
just don't have time to delve into fiber

00:06:10,479 --> 00:06:17,919
optics and and you know Wi-Fi things

00:06:13,930 --> 00:06:20,800
like that but in in cat 5 or any sort of

00:06:17,919 --> 00:06:24,880
copper transmission the fluctuations in

00:06:20,800 --> 00:06:26,449
vulture fluctuations in voltage excuse

00:06:24,880 --> 00:06:30,439
me I had some beers at lunch

00:06:26,449 --> 00:06:32,559
they are registers your binary digits so

00:06:30,439 --> 00:06:39,339
if you look at this what we have here is

00:06:32,559 --> 00:06:43,699
110 basically the number 16 and b12 406

00:06:39,339 --> 00:06:46,189
so as you can see here on this graph and

00:06:43,699 --> 00:06:49,309
this is not a hundred percent accurate

00:06:46,189 --> 00:06:51,830
but the blue line sort of here

00:06:49,309 --> 00:06:54,830
represents your baseline that's your no

00:06:51,830 --> 00:06:57,229
value line I guess you would say if the

00:06:54,830 --> 00:07:00,680
voltage fluctuation is above that it

00:06:57,229 --> 00:07:03,259
registers as a one if it's below that it

00:07:00,680 --> 00:07:05,960
registers as a zero so you have this

00:07:03,259 --> 00:07:10,189
sine wave you know going back and forth

00:07:05,960 --> 00:07:12,770
basically that determines whether the

00:07:10,189 --> 00:07:14,990
signal is interpreted as a one or if

00:07:12,770 --> 00:07:16,370
it's interpreted as a zero it's

00:07:14,990 --> 00:07:18,710
important to remember that in the fiscal

00:07:16,370 --> 00:07:21,680
air everything is analog it's just

00:07:18,710 --> 00:07:25,219
interpreted digitally you know there's

00:07:21,680 --> 00:07:27,800
no way to transmit one no way to

00:07:25,219 --> 00:07:30,560
transmit zero you have to transmit a

00:07:27,800 --> 00:07:32,509
voltage above a certain value or below a

00:07:30,560 --> 00:07:37,580
certain value and that's interpreted as

00:07:32,509 --> 00:07:39,529
a one or a zero now in the physical

00:07:37,580 --> 00:07:43,279
layer you got a whole bunch of devices

00:07:39,529 --> 00:07:46,189
your network interface cards repeaters

00:07:43,279 --> 00:07:49,219
these are just basically once you get a

00:07:46,189 --> 00:07:51,889
signal out so far you start to lose the

00:07:49,219 --> 00:07:54,319
voltage is called voltage drop you just

00:07:51,889 --> 00:07:56,029
get so much resistance from the wire so

00:07:54,319 --> 00:07:58,099
if you get out certain distance you need

00:07:56,029 --> 00:08:00,110
some sort of repeater there that will

00:07:58,099 --> 00:08:03,080
then you know up the voltage on the line

00:08:00,110 --> 00:08:06,379
basically so the signal gets further out

00:08:03,080 --> 00:08:09,020
and gets reliably delivered there's also

00:08:06,379 --> 00:08:15,319
hubs we really don't use these much

00:08:09,020 --> 00:08:18,169
anymore because they suck it's basically

00:08:15,319 --> 00:08:20,149
like splitting one cable so that

00:08:18,169 --> 00:08:22,370
delivers to multiple places you know

00:08:20,149 --> 00:08:24,770
usually got a cable it's got one end

00:08:22,370 --> 00:08:26,839
over here in one end over here and if

00:08:24,770 --> 00:08:29,330
you can only send between those two ends

00:08:26,839 --> 00:08:31,490
it's it's not you know really

00:08:29,330 --> 00:08:33,889
interesting there's no sense in routing

00:08:31,490 --> 00:08:36,610
between just two places you know you

00:08:33,889 --> 00:08:38,620
don't really need a whole lot to say

00:08:36,610 --> 00:08:42,760
send a bob if Bob's the only other

00:08:38,620 --> 00:08:44,709
person in the world you know so a hub

00:08:42,760 --> 00:08:47,500
basically sort of splits that cable so

00:08:44,709 --> 00:08:49,930
it puts multiple ends on it we'll get

00:08:47,500 --> 00:08:54,760
into a little bit more as to why hub

00:08:49,930 --> 00:08:58,230
suck in the next section the data link

00:08:54,760 --> 00:09:00,820
layer okay this is the very first

00:08:58,230 --> 00:09:02,519
portion that a things start to get

00:09:00,820 --> 00:09:05,350
interesting if anybody has a question

00:09:02,519 --> 00:09:07,899
don't raise your hand just shout I won't

00:09:05,350 --> 00:09:11,790
get offended you know just speak up I'll

00:09:07,899 --> 00:09:14,079
stop the data link layer includes of

00:09:11,790 --> 00:09:18,579
something y'all may have heard of mac

00:09:14,079 --> 00:09:21,850
addresses media access control every

00:09:18,579 --> 00:09:23,829
device that you know operates on the

00:09:21,850 --> 00:09:26,829
data link layer has a mac address and

00:09:23,829 --> 00:09:32,560
it's set by the factory unless you're

00:09:26,829 --> 00:09:34,779
good and you can change it but uh any

00:09:32,560 --> 00:09:37,839
time frame just sent out and it's

00:09:34,779 --> 00:09:40,510
destined to some other computer it gets

00:09:37,839 --> 00:09:43,540
a source and a destination MAC address

00:09:40,510 --> 00:09:45,310
said the source address you know the

00:09:43,540 --> 00:09:47,260
source MAC addresses of course your mac

00:09:45,310 --> 00:09:49,690
address whichever machine is actually

00:09:47,260 --> 00:09:51,490
sending the frame and the destination

00:09:49,690 --> 00:09:53,709
addresses whichever one is going to

00:09:51,490 --> 00:09:56,079
there might not be its final destination

00:09:53,709 --> 00:09:58,029
it's just the next place that's going to

00:09:56,079 --> 00:09:59,529
and we'll see that a little bit more in

00:09:58,029 --> 00:10:06,550
the next layer when we start to talk

00:09:59,529 --> 00:10:08,860
about rowdy um but uh as we go on mac

00:10:06,550 --> 00:10:12,610
addresses are you need 48 bit numbers

00:10:08,860 --> 00:10:16,649
and to give you an idea you know we're

00:10:12,610 --> 00:10:19,329
starting to run out of ipv4 space and

00:10:16,649 --> 00:10:23,230
that's a 32-bit number so you got a

00:10:19,329 --> 00:10:25,149
whole other 16 bits to deal with so

00:10:23,230 --> 00:10:29,500
we're okay on Mike addresses they're not

00:10:25,149 --> 00:10:31,360
a big big problem it's important to

00:10:29,500 --> 00:10:33,970
realize the mac address is the only

00:10:31,360 --> 00:10:37,149
address that is used to deliver a packet

00:10:33,970 --> 00:10:39,490
or frame the IP address means nothing as

00:10:37,149 --> 00:10:42,010
far as where the packet actually ends up

00:10:39,490 --> 00:10:45,550
the IP address is just determined is

00:10:42,010 --> 00:10:47,949
just determining where to route it to

00:10:45,550 --> 00:10:50,240
and if it's on your subnet and then art

00:10:47,949 --> 00:10:55,670
takes over we'll see that a little bit

00:10:50,240 --> 00:10:58,160
20 this is why this is why hopes up

00:10:55,670 --> 00:11:00,610
lands that are connected with hubs a lad

00:10:58,160 --> 00:11:03,200
as a local area network you know we got

00:11:00,610 --> 00:11:04,850
you know this laptop hooked up to some

00:11:03,200 --> 00:11:07,100
other laptop upstairs and there's a

00:11:04,850 --> 00:11:08,360
server and it's all contained in this

00:11:07,100 --> 00:11:13,040
building that would be a local area

00:11:08,360 --> 00:11:16,040
network if you connect that with hubs

00:11:13,040 --> 00:11:18,620
every time one machine sends a frame

00:11:16,040 --> 00:11:21,110
it's going to go to every other computer

00:11:18,620 --> 00:11:24,399
on that local area network so every

00:11:21,110 --> 00:11:27,020
other computer has to deal with it on

00:11:24,399 --> 00:11:29,930
each computer that receives a frame

00:11:27,020 --> 00:11:33,080
checks the destination MAC address if

00:11:29,930 --> 00:11:35,209
that matches that modes MAC address that

00:11:33,080 --> 00:11:38,060
says hey this frame is meant for me and

00:11:35,209 --> 00:11:40,700
then accepts it and sends it on with the

00:11:38,060 --> 00:11:42,410
stock if it doesn't it just discards it

00:11:40,700 --> 00:11:45,050
to the bit bucket you know the frames

00:11:42,410 --> 00:11:49,089
gone as far as that notes concerned and

00:11:45,050 --> 00:11:52,130
that's you know okay for small networks

00:11:49,089 --> 00:11:53,810
but when things start to build up you

00:11:52,130 --> 00:11:56,450
get a lot of collisions a lot of

00:11:53,810 --> 00:11:59,440
repeated data and so there's two things

00:11:56,450 --> 00:12:04,029
they're used at the data link layer two

00:11:59,440 --> 00:12:07,010
to mitigate this the first is bridges

00:12:04,029 --> 00:12:09,110
these are kind of old school they're not

00:12:07,010 --> 00:12:11,870
used as much anymore for their original

00:12:09,110 --> 00:12:14,209
purpose what you would do is you would

00:12:11,870 --> 00:12:16,399
have one hub you know over here on the

00:12:14,209 --> 00:12:18,500
left and one hope way over here on the

00:12:16,399 --> 00:12:20,810
right and a bridge sat in between and

00:12:18,500 --> 00:12:24,050
the bridge makes an intelligent decision

00:12:20,810 --> 00:12:26,779
whenever it sees a frame it says does

00:12:24,050 --> 00:12:29,450
this frame need to go across me if it

00:12:26,779 --> 00:12:32,480
does it lets it across if it does it

00:12:29,450 --> 00:12:34,360
just drops it so if you have one machine

00:12:32,480 --> 00:12:37,190
over here connected this hub on the Left

00:12:34,360 --> 00:12:39,560
talking to another machine on the left

00:12:37,190 --> 00:12:40,940
all these machines connect to the hub

00:12:39,560 --> 00:12:42,649
over here on the right never see that

00:12:40,940 --> 00:12:45,140
frame because the bridge right here in

00:12:42,649 --> 00:12:46,610
the middle stops it saying if you got

00:12:45,140 --> 00:12:48,440
machines on the right talking to

00:12:46,610 --> 00:12:51,860
machines on the right the ones on the

00:12:48,440 --> 00:12:54,200
Left never see it and that was a big

00:12:51,860 --> 00:12:56,270
performance boost because you didn't

00:12:54,200 --> 00:12:58,670
have all this replication of data and

00:12:56,270 --> 00:13:00,980
remember when when you've got physical

00:12:58,670 --> 00:13:02,190
layers here you're talking about having

00:13:00,980 --> 00:13:05,940
every machine

00:13:02,190 --> 00:13:09,630
get the same binary ones into ones and

00:13:05,940 --> 00:13:15,240
zeros institute man who would be an

00:13:09,630 --> 00:13:20,610
increasing and through food get tertiary

00:13:15,240 --> 00:13:23,910
computers in here but uh every machine

00:13:20,610 --> 00:13:27,840
basically has to sin see the same ones

00:13:23,910 --> 00:13:29,730
and zeros at the same time with bridges

00:13:27,840 --> 00:13:32,100
you now have the ability for two

00:13:29,730 --> 00:13:33,900
machines on the left to talk to each

00:13:32,100 --> 00:13:35,400
other at one time while two machines on

00:13:33,900 --> 00:13:38,220
the right are talking to each other at

00:13:35,400 --> 00:13:39,780
the same time a switch goes a little bit

00:13:38,220 --> 00:13:42,990
further it's sort of a combination of

00:13:39,780 --> 00:13:47,310
the hub and a bridge oh you know hubs

00:13:42,990 --> 00:13:49,530
might have 48 ports on well ass which is

00:13:47,310 --> 00:13:54,390
basically a hub with a bridge on every

00:13:49,530 --> 00:13:57,800
port so that whenever you know the let's

00:13:54,390 --> 00:14:00,390
say Allen and I'm plugged into one and

00:13:57,800 --> 00:14:03,480
you know I want to talk to camera guy

00:14:00,390 --> 00:14:06,150
who's plugged into two I can send a

00:14:03,480 --> 00:14:08,520
packet and the switch says well camera

00:14:06,150 --> 00:14:11,130
guys on port two and it just sends it

00:14:08,520 --> 00:14:13,740
down port to all y'all other people

00:14:11,130 --> 00:14:15,870
three through 48 y'all don't ever see it

00:14:13,740 --> 00:14:18,060
don't know it exists and in fact y'all

00:14:15,870 --> 00:14:20,520
are able to talk to one another at the

00:14:18,060 --> 00:14:22,950
same time because the media isn't being

00:14:20,520 --> 00:14:26,190
reserved the switch has you know

00:14:22,950 --> 00:14:28,020
intelligently handled the frame and just

00:14:26,190 --> 00:14:30,840
routed it to the one place that needed

00:14:28,020 --> 00:14:32,550
to go it does this by doing an art look

00:14:30,840 --> 00:14:36,390
up and I'm not going to go into all this

00:14:32,550 --> 00:14:39,260
at this time but uh you shouldn't rely

00:14:36,390 --> 00:14:43,530
on switches to do a security work

00:14:39,260 --> 00:14:45,450
because if you aren't flow to switch it

00:14:43,530 --> 00:14:47,280
will either shut down entirely and not

00:14:45,450 --> 00:14:50,280
pass any frames or it will operate as a

00:14:47,280 --> 00:14:51,930
hub depending on the make and model so

00:14:50,280 --> 00:14:53,190
you know just be aware just because you

00:14:51,930 --> 00:14:55,230
have a switch doesn't mean somebody

00:14:53,190 --> 00:14:58,860
can't plug in on another port and listen

00:14:55,230 --> 00:15:01,740
to you it just depends on how good your

00:14:58,860 --> 00:15:07,050
switch is if nothing else second auction

00:15:01,740 --> 00:15:08,400
around but on the network layer that's a

00:15:07,050 --> 00:15:09,560
rope here that's a probably most

00:15:08,400 --> 00:15:13,200
difficult to learn

00:15:09,560 --> 00:15:18,450
but it's also the most rewarding this is

00:15:13,200 --> 00:15:22,320
the first place that allows you to from

00:15:18,450 --> 00:15:25,320
one computer and you know one part of

00:15:22,320 --> 00:15:29,340
the world lizella Georgia and that's

00:15:25,320 --> 00:15:31,140
right it's jobs not Georgia Georgia to

00:15:29,340 --> 00:15:36,690
talk to someone in Clemson South

00:15:31,140 --> 00:15:39,720
Carolina because it allows you to decide

00:15:36,690 --> 00:15:42,120
whether that machine is I guess you

00:15:39,720 --> 00:15:44,490
would say near or far whether it's on my

00:15:42,120 --> 00:15:47,910
local area network or whether it's not

00:15:44,490 --> 00:15:50,100
and then to consult a routing table and

00:15:47,910 --> 00:15:52,710
decide where to send the packet to next

00:15:50,100 --> 00:15:56,970
and allow someone else to send it on

00:15:52,710 --> 00:15:58,560
further down the line without this layer

00:15:56,970 --> 00:16:01,650
you can only call it with your local

00:15:58,560 --> 00:16:08,100
area network that's why net buoy you

00:16:01,650 --> 00:16:10,770
know windows SMB well as some B's now

00:16:08,100 --> 00:16:14,250
done over TCP but in the days of Windows

00:16:10,770 --> 00:16:16,590
95 windows 98 when his NT you know you

00:16:14,250 --> 00:16:19,770
couldn't do any sort of you know file

00:16:16,590 --> 00:16:22,400
sharing across a land at least without

00:16:19,770 --> 00:16:25,590
wins because there was no way to

00:16:22,400 --> 00:16:30,660
encapsulate it there was no wit routing

00:16:25,590 --> 00:16:32,730
on frames around it based on their

00:16:30,660 --> 00:16:37,010
destination IP address we should see

00:16:32,730 --> 00:16:37,010
that in the next couple slides here

00:16:38,030 --> 00:16:42,210
people tend to think of the network

00:16:40,230 --> 00:16:44,820
layer is only including internet

00:16:42,210 --> 00:16:48,630
protocol but but there's some others as

00:16:44,820 --> 00:16:50,310
well and some protocols like ICMP they

00:16:48,630 --> 00:16:53,700
actually kind of straddle the network

00:16:50,310 --> 00:16:57,150
and and the transport layer we'll get to

00:16:53,700 --> 00:17:00,360
those in a moment ipv4 addresses those

00:16:57,150 --> 00:17:03,210
are 32-bit numbers that's 2 to the 32nd

00:17:00,360 --> 00:17:07,700
power possible IP addresses don't let me

00:17:03,210 --> 00:17:11,670
do that knife but it's a big number ipv6

00:17:07,700 --> 00:17:12,720
128 bit numbers that's a huge friggin

00:17:11,670 --> 00:17:16,289
number

00:17:12,720 --> 00:17:19,169
and I mean if you took if you took every

00:17:16,289 --> 00:17:22,559
molecule of water in the ocean and you

00:17:19,169 --> 00:17:24,659
know the earth is covered 75% by ocean

00:17:22,559 --> 00:17:26,909
and you gave each water molecule a

00:17:24,659 --> 00:17:31,520
unique IP address you still wouldn't run

00:17:26,909 --> 00:17:34,950
out you know so once we switch to ipv6

00:17:31,520 --> 00:17:39,799
knock on wood we won't need any more IP

00:17:34,950 --> 00:17:39,799
addresses for at least my generation

00:17:39,950 --> 00:17:46,799
we're only going to discuss ipv6 here

00:17:43,020 --> 00:17:48,270
because you know if I actually put 128

00:17:46,799 --> 00:17:51,059
bit number on there I mean you can see

00:17:48,270 --> 00:17:55,740
what this 32-bit number he is I'd run

00:17:51,059 --> 00:17:57,510
out of room on the on the slide IP

00:17:55,740 --> 00:17:59,400
addresses are generally listed it's for

00:17:57,510 --> 00:18:01,409
optics you see one right here this is

00:17:59,400 --> 00:18:02,940
probably something you're very common we

00:18:01,409 --> 00:18:05,400
had a guy linksys router or something

00:18:02,940 --> 00:18:09,419
like that 192 dot one sixty eight dot

00:18:05,400 --> 00:18:12,360
one dot 10 we split it up into four

00:18:09,419 --> 00:18:15,900
optics what that means is therefore

00:18:12,360 --> 00:18:18,840
different 8-bit numbers and with 228

00:18:15,900 --> 00:18:21,990
powers 256 that allows you to do any

00:18:18,840 --> 00:18:25,309
number from 0 to 255 that's why you

00:18:21,990 --> 00:18:28,620
don't see any IP addresses like 300 dot

00:18:25,309 --> 00:18:32,850
497 you know you can only go up to 255

00:18:28,620 --> 00:18:35,460
and eight bits um but computers don't

00:18:32,850 --> 00:18:40,909
separate it like that the computer will

00:18:35,460 --> 00:18:44,809
actually treat it as 1 32 bit binary

00:18:40,909 --> 00:18:50,220
number it's not des monts binary so

00:18:44,809 --> 00:18:51,870
actually you know 110 bobollo one is 192

00:18:50,220 --> 00:18:54,480
dot one sixty eight dot one dot one

00:18:51,870 --> 00:18:56,730
that's how the computer sees it well how

00:18:54,480 --> 00:19:04,740
any network device was computer or

00:18:56,730 --> 00:19:06,120
switch whatever um subnetting and we're

00:19:04,740 --> 00:19:08,240
going pretty fast if you don't

00:19:06,120 --> 00:19:10,740
understand anything you know holler

00:19:08,240 --> 00:19:13,760
subnet is probably the toughest part of

00:19:10,740 --> 00:19:17,850
networking you used to be real easy

00:19:13,760 --> 00:19:21,690
because we were real stupid and we only

00:19:17,850 --> 00:19:23,800
had three possible subnets 255 dot 0 dot

00:19:21,690 --> 00:19:29,350
0 dot 0 and

00:19:23,800 --> 00:19:31,300
you know 255 255 0 and 255 255 255 0 and

00:19:29,350 --> 00:19:36,490
that was it you know you could have

00:19:31,300 --> 00:19:39,400
either 16,000 addresses 255,000

00:19:36,490 --> 00:19:40,900
addresses or a million and that was the

00:19:39,400 --> 00:19:43,630
you know there was no sort of

00:19:40,900 --> 00:19:45,310
fine-tuning and that kind of exacerbated

00:19:43,630 --> 00:19:49,690
the problem as far as this run how to IP

00:19:45,310 --> 00:19:53,440
addresses with ipv4 cos I think forward

00:19:49,690 --> 00:19:57,310
has a couple million addresses and IBM

00:19:53,440 --> 00:20:01,840
probably has 10 or 12 and you know who

00:19:57,310 --> 00:20:03,310
knows Jim goes bank well DMD can

00:20:01,840 --> 00:20:08,550
bankrupt maybe they got a bunch IP

00:20:03,310 --> 00:20:11,050
addresses we can get back oh so what

00:20:08,550 --> 00:20:12,910
yeah yeah yeah well then you got the

00:20:11,050 --> 00:20:19,600
white house with a million IP addresses

00:20:12,910 --> 00:20:21,490
and who needs that subnets their denoted

00:20:19,600 --> 00:20:25,000
basically the same way IP addresses are

00:20:21,490 --> 00:20:28,240
we got you know for Arctic's you know

00:20:25,000 --> 00:20:30,820
255 255 255 0 is probably the most

00:20:28,240 --> 00:20:35,050
common you dealt with but it can be any

00:20:30,820 --> 00:20:38,560
number from all zeros to all wines will

00:20:35,050 --> 00:20:41,500
show that oh you also sometimes Simmons

00:20:38,560 --> 00:20:46,180
mask 192 dot one sixty eight dot one dot

00:20:41,500 --> 00:20:47,830
1 / 24 once you actually look at this

00:20:46,180 --> 00:20:51,130
the way a computer looks at it you

00:20:47,830 --> 00:20:53,920
understand that / 24 if you look at as a

00:20:51,130 --> 00:20:56,890
32 bit binary number you'll notice the

00:20:53,920 --> 00:21:01,180
first twenty four digits are all one and

00:20:56,890 --> 00:21:05,020
then the last eight are all zero so if

00:21:01,180 --> 00:21:06,640
you do / 24 that means your first 24

00:21:05,020 --> 00:21:09,850
straight numbers are all going to be one

00:21:06,640 --> 00:21:13,600
and you can't subnet it where you have

00:21:09,850 --> 00:21:16,120
like 1101 it has to be one straight from

00:21:13,600 --> 00:21:18,790
the beginning 20 straight at the end or

00:21:16,120 --> 00:21:20,500
it's not a proper subnet and I have no

00:21:18,790 --> 00:21:28,810
idea where your computer will do with it

00:21:20,500 --> 00:21:30,700
um this basically and I might need yeah

00:21:28,810 --> 00:21:33,100
there we go okay I got something the

00:21:30,700 --> 00:21:35,560
next slide to demonstrate this better

00:21:33,100 --> 00:21:36,269
but when you look at the happy address

00:21:35,560 --> 00:21:38,429
and the sub

00:21:36,269 --> 00:21:41,459
Mass together it's easy to determine

00:21:38,429 --> 00:21:43,739
what IP addresses you can communicate

00:21:41,459 --> 00:21:49,919
basically what what IP addresses are

00:21:43,739 --> 00:21:54,419
local and which ones are remote this 192

00:21:49,919 --> 00:21:59,759
168 11 / 24 it can contact all addresses

00:21:54,419 --> 00:22:03,719
between 0 and 255 because the bit mask

00:21:59,759 --> 00:22:06,659
has hidden the 192 dot 168 not one part

00:22:03,719 --> 00:22:09,059
we see that right here if you look at

00:22:06,659 --> 00:22:11,549
the two numbers together the top one is

00:22:09,059 --> 00:22:15,570
the IP address the bottom one is the

00:22:11,549 --> 00:22:18,570
subnet mask and everywhere in the subnet

00:22:15,570 --> 00:22:19,979
mask that you see a worn all those

00:22:18,570 --> 00:22:22,349
numbers in the IP address are

00:22:19,979 --> 00:22:26,519
effectively mast in other words the

00:22:22,349 --> 00:22:30,599
computer doesn't look at those as local

00:22:26,519 --> 00:22:33,029
addresses so the 192 the 168 and the

00:22:30,599 --> 00:22:35,759
Warren are ignored in this example

00:22:33,029 --> 00:22:38,459
because their mast out by the subnet and

00:22:35,759 --> 00:22:43,769
the only one that's an important is the

00:22:38,459 --> 00:22:45,839
final dot one on the end so when you

00:22:43,769 --> 00:22:47,820
look at that look at it this way you can

00:22:45,839 --> 00:22:49,859
see you know if you total all the

00:22:47,820 --> 00:22:53,329
possible binary combinations for those

00:22:49,859 --> 00:22:59,099
last eight binary numbers you got 256

00:22:53,329 --> 00:23:00,869
combinations from 0 to 255 if we you

00:22:59,099 --> 00:23:02,759
know added another bit of the subnet

00:23:00,869 --> 00:23:05,519
mask or subtracted another bit it

00:23:02,759 --> 00:23:12,690
affects which machines are considered

00:23:05,519 --> 00:23:17,070
local by the computer um if a frame is

00:23:12,690 --> 00:23:21,299
not considered local basically if the

00:23:17,070 --> 00:23:22,829
frame is not in this subnet here if it's

00:23:21,299 --> 00:23:26,519
not in this one ninety two dot one sixty

00:23:22,829 --> 00:23:29,429
eight dot one subnet then the computer

00:23:26,519 --> 00:23:32,969
or the node knows it has to use a

00:23:29,429 --> 00:23:38,249
gateway to reach the final destination

00:23:32,969 --> 00:23:39,959
it has to use a router essentially oh we

00:23:38,249 --> 00:23:43,469
got some other network layer protocols

00:23:39,959 --> 00:23:47,249
ICMP which kind of straddles the network

00:23:43,469 --> 00:23:49,020
layer and the transport layer it's used

00:23:47,249 --> 00:23:52,580
for trace route Spain

00:23:49,020 --> 00:23:56,250
time to live expired jumped like that

00:23:52,580 --> 00:23:59,790
there's also art which resolves IP

00:23:56,250 --> 00:24:01,080
addresses to mac addresses we're not

00:23:59,790 --> 00:24:02,970
going to spend a whole lot of time on

00:24:01,080 --> 00:24:04,860
that here if you want if you want to

00:24:02,970 --> 00:24:07,380
actually learn more about how that works

00:24:04,860 --> 00:24:10,350
you'll have to check the slide in the

00:24:07,380 --> 00:24:14,940
beginning oh how much time to look out

00:24:10,350 --> 00:24:19,170
here oh I'm good I knew I was good i

00:24:14,940 --> 00:24:21,060
just got plenty of time oh the transport

00:24:19,170 --> 00:24:23,070
layer here we go this is probably what

00:24:21,060 --> 00:24:25,770
you you've probably heard the most about

00:24:23,070 --> 00:24:29,880
and in some ways it's that it's the

00:24:25,770 --> 00:24:32,940
least interesting at least to me this is

00:24:29,880 --> 00:24:35,220
where you have TCP and UDP you may have

00:24:32,940 --> 00:24:38,220
heard three-way handshake for where

00:24:35,220 --> 00:24:40,680
handshake all that good job but this is

00:24:38,220 --> 00:24:42,390
the first and only layer that can

00:24:40,680 --> 00:24:45,390
optionally that's important it can

00:24:42,390 --> 00:24:49,590
optionally guarantee the data was

00:24:45,390 --> 00:24:52,790
delivered and intact it can always well

00:24:49,590 --> 00:24:55,650
you can disable that guarantee basically

00:24:52,790 --> 00:24:59,670
TCP can guarantee that your data got

00:24:55,650 --> 00:25:04,260
where it got to UDP is the brain dead

00:24:59,670 --> 00:25:08,580
cousin of TCP and can it just says do

00:25:04,260 --> 00:25:11,640
let me send data TCP sends data looks

00:25:08,580 --> 00:25:18,270
for responses and you know basically go

00:25:11,640 --> 00:25:20,310
ahead oh yeah anytime that you don't

00:25:18,270 --> 00:25:23,910
really care so much about data delivery

00:25:20,310 --> 00:25:26,160
oh it's not a big deal if you're

00:25:23,910 --> 00:25:30,540
streaming a video or streaming some

00:25:26,160 --> 00:25:34,770
audio if you know a couple split seconds

00:25:30,540 --> 00:25:37,260
or lost a TCP adds so much additional

00:25:34,770 --> 00:25:39,210
overhead that in that situation you

00:25:37,260 --> 00:25:42,270
would probably actually lose more doing

00:25:39,210 --> 00:25:46,530
TCP at least in a streaming way then you

00:25:42,270 --> 00:25:48,390
will be UDP also VPNs and some of you

00:25:46,530 --> 00:25:51,690
I'm sure probably looked at using secure

00:25:48,390 --> 00:25:55,710
shell or something for a VPN any VPN it

00:25:51,690 --> 00:26:01,030
uses TCP is by definition stupid oh you

00:25:55,710 --> 00:26:03,830
should use UDP for a VPN and

00:26:01,030 --> 00:26:06,380
I'll get into well I'll go ahead and say

00:26:03,830 --> 00:26:08,210
the reason why if you have TCP and it's

00:26:06,380 --> 00:26:10,370
doing all these additional checks to

00:26:08,210 --> 00:26:13,040
guarantee data delivery and it's

00:26:10,370 --> 00:26:15,350
encapsulated inside a VPN it's doing all

00:26:13,040 --> 00:26:18,290
these additional checks to guarantee

00:26:15,350 --> 00:26:21,770
delivery there's no point in doing that

00:26:18,290 --> 00:26:23,419
twice if you're not worried about you

00:26:21,770 --> 00:26:26,000
know your data getting to live or just

00:26:23,419 --> 00:26:29,059
use UDP and if it's encapsulated in UDP

00:26:26,000 --> 00:26:31,640
you don't care if you are worried about

00:26:29,059 --> 00:26:33,799
it getting delivered do it in TCP and if

00:26:31,640 --> 00:26:36,380
it's encapsulated in UDP you still have

00:26:33,799 --> 00:26:41,059
that checking so you're not adding all

00:26:36,380 --> 00:26:42,770
this additional packet overhead so it's

00:26:41,059 --> 00:26:45,950
just better to use something like open

00:26:42,770 --> 00:26:48,140
ppm which is UDP by default although you

00:26:45,950 --> 00:26:54,590
can do it with TCP but your brain dead

00:26:48,140 --> 00:26:57,590
if you do oh yes actually not just

00:26:54,590 --> 00:27:02,360
smaller packets but as we'll see there's

00:26:57,590 --> 00:27:07,100
a lot of special frames with TCP the add

00:27:02,360 --> 00:27:09,260
to overhead plus tcp does some hackery

00:27:07,100 --> 00:27:13,160
to determine if we're transmitting data

00:27:09,260 --> 00:27:16,460
too fast and if we are it backs off UDP

00:27:13,160 --> 00:27:18,500
just sends it out as quick as it can so

00:27:16,460 --> 00:27:20,270
there's no need to do that check twice

00:27:18,500 --> 00:27:23,179
and if we get to a point where we're

00:27:20,270 --> 00:27:26,480
sending data too fast and we have TCP

00:27:23,179 --> 00:27:29,840
encapsulated in TCP it slows down twice

00:27:26,480 --> 00:27:34,270
at an exponential rate so you get much

00:27:29,840 --> 00:27:34,270
less throughput with a TCP beeping in oh

00:27:36,610 --> 00:27:44,600
ok now going off track either either tcp

00:27:41,330 --> 00:27:47,030
or UDP or they are add some information

00:27:44,600 --> 00:27:50,210
to the frame so that it can actually be

00:27:47,030 --> 00:27:52,760
delivered to the proper application you

00:27:50,210 --> 00:27:56,380
know the application might be Firefox it

00:27:52,760 --> 00:28:02,030
might be dhcpd it might be you know

00:27:56,380 --> 00:28:06,140
Klaus mail or it could be I don't know a

00:28:02,030 --> 00:28:08,870
passion or posed to xml anything but

00:28:06,140 --> 00:28:11,240
without that without that additional

00:28:08,870 --> 00:28:13,700
data there's no way for the receiving

00:28:11,240 --> 00:28:14,600
computer to know what application to

00:28:13,700 --> 00:28:20,270
give the data to

00:28:14,600 --> 00:28:21,890
oh it's responsible for handing off data

00:28:20,270 --> 00:28:24,410
between applications and the network

00:28:21,890 --> 00:28:29,140
layer basically that last one's kind of

00:28:24,410 --> 00:28:33,470
dry in order to guarantee delivery

00:28:29,140 --> 00:28:37,250
transport control protocol tcp it uses

00:28:33,470 --> 00:28:40,270
some some pretty nice hackery it has a

00:28:37,250 --> 00:28:43,700
lot of will really mainly to handshakes

00:28:40,270 --> 00:28:47,390
that guarantee that you're able to

00:28:43,700 --> 00:28:50,360
communicate with whatever machine you're

00:28:47,390 --> 00:28:54,730
trying to talk to and for actually

00:28:50,360 --> 00:28:57,409
shutting that communication down also

00:28:54,730 --> 00:29:01,549
there's things called back packets those

00:28:57,409 --> 00:29:04,970
are acknowledging its ACK oh and every

00:29:01,549 --> 00:29:09,159
frame has to have an acknowledgement and

00:29:04,970 --> 00:29:12,530
act packet so if i send some data to

00:29:09,159 --> 00:29:17,390
only barn out authorize.net my home

00:29:12,530 --> 00:29:19,789
firewall with tcp i will know it got

00:29:17,390 --> 00:29:21,980
that when i get the acknowledgement

00:29:19,789 --> 00:29:23,539
packet back if I don't get that

00:29:21,980 --> 00:29:25,159
acknowledgement packet back there's one

00:29:23,539 --> 00:29:27,650
of two things that can have happened

00:29:25,159 --> 00:29:29,990
either born I all the commits the

00:29:27,650 --> 00:29:32,000
computer I'm trying to talk to never got

00:29:29,990 --> 00:29:37,039
my original packet in the first place in

00:29:32,000 --> 00:29:39,440
which case I need to resend it or two it

00:29:37,039 --> 00:29:40,970
got it and sent the acknowledgement but

00:29:39,440 --> 00:29:42,289
I never got the acknowledgement so I

00:29:40,970 --> 00:29:44,659
have no way of knowing which of those

00:29:42,289 --> 00:29:48,350
two happened so I'll just resend the

00:29:44,659 --> 00:29:51,200
packet anyway that way I can guarantee

00:29:48,350 --> 00:29:54,080
that the packet eventually gets through

00:29:51,200 --> 00:29:56,350
once i get that acknowledgement up till

00:29:54,080 --> 00:29:59,840
now we've had no way of knowing whether

00:29:56,350 --> 00:30:02,780
the receiving computer ever actually got

00:29:59,840 --> 00:30:04,610
what we sent to them now we do because

00:30:02,780 --> 00:30:07,429
we have these acknowledgement packets

00:30:04,610 --> 00:30:10,250
and this is where you also have if you

00:30:07,429 --> 00:30:12,080
talk about you know TCP VPNs you're

00:30:10,250 --> 00:30:14,169
going to get an acknowledgement packet

00:30:12,080 --> 00:30:16,280
for whatever you're encrypting an

00:30:14,169 --> 00:30:18,200
acknowledgement packet for the encrypted

00:30:16,280 --> 00:30:22,039
connection so it's twice the amount of

00:30:18,200 --> 00:30:25,280
data data data look apparently I did

00:30:22,039 --> 00:30:27,020
have too much beer is twice the amount

00:30:25,280 --> 00:30:28,039
of data you have to send across the

00:30:27,020 --> 00:30:30,440
network and

00:30:28,039 --> 00:30:37,039
it's just tangling things up without

00:30:30,440 --> 00:30:38,509
adding more information there's four

00:30:37,039 --> 00:30:40,929
types of frames we're going to look at

00:30:38,509 --> 00:30:43,190
here but there's not just four types

00:30:40,929 --> 00:30:46,369
there's the explicit congestion

00:30:43,190 --> 00:30:48,590
notification some additional types but

00:30:46,369 --> 00:30:57,379
we're mainly just going to look at force

00:30:48,590 --> 00:30:59,450
in a thin and rst to start with we'll

00:30:57,379 --> 00:31:02,979
look at the three-way handshake this is

00:30:59,450 --> 00:31:05,299
what's used to initiate a connection and

00:31:02,979 --> 00:31:06,830
it's where we will first see the syn

00:31:05,299 --> 00:31:10,970
packet and you should never see it

00:31:06,830 --> 00:31:13,849
outside of a three-way handshake let's

00:31:10,970 --> 00:31:17,029
say I want to talk to google.com on port

00:31:13,849 --> 00:31:20,840
of haiti on tcp connection i'm going to

00:31:17,029 --> 00:31:25,159
do a web search Firefox starts up and

00:31:20,840 --> 00:31:29,149
immediately sends a syn packet to google

00:31:25,159 --> 00:31:31,609
google com once google receives that

00:31:29,149 --> 00:31:35,330
package that's the receiving note there

00:31:31,609 --> 00:31:37,119
it sends back a syn ACK packet in other

00:31:35,330 --> 00:31:40,789
words both the sin and the

00:31:37,119 --> 00:31:43,070
acknowledgement packet sin stands for

00:31:40,789 --> 00:31:46,190
synchronized both the synchronizing

00:31:43,070 --> 00:31:49,940
acknowledgement Oh fields are checked

00:31:46,190 --> 00:31:54,349
essentially they're worn and once we get

00:31:49,940 --> 00:31:58,249
that we send back and acknowledgement to

00:31:54,349 --> 00:32:00,769
Google saying hey we got it so not only

00:31:58,249 --> 00:32:03,859
do we know that Google is receiving from

00:32:00,769 --> 00:32:06,710
us but Google knows that we're receiving

00:32:03,859 --> 00:32:11,629
from you at this point we can start

00:32:06,710 --> 00:32:13,639
actually transmitting data that first

00:32:11,629 --> 00:32:16,129
acknowledgement is sometimes called a

00:32:13,639 --> 00:32:18,200
syn ack ack if you ever hear that or

00:32:16,129 --> 00:32:21,440
send double act that's what they're

00:32:18,200 --> 00:32:25,460
talking about oh there's a four-way

00:32:21,440 --> 00:32:30,950
handshake as well for a closing down a

00:32:25,460 --> 00:32:35,590
connection um basically the fin packet

00:32:30,950 --> 00:32:39,349
for finish it works sort of like the sin

00:32:35,590 --> 00:32:41,210
if I'm wanting to close down from google

00:32:39,349 --> 00:32:45,760
I'll send them a fin

00:32:41,210 --> 00:32:48,980
bakit they'll reply with a fin act and

00:32:45,760 --> 00:32:50,990
at this point the connection is is

00:32:48,980 --> 00:32:53,990
what's called half open her half closed

00:32:50,990 --> 00:32:58,700
if you you know the glass is half full

00:32:53,990 --> 00:33:00,919
or half empty kind of guy Oh once you

00:32:58,700 --> 00:33:03,409
send a fin packet you say hey I'm not

00:33:00,919 --> 00:33:06,080
sending any more data to you I'm done

00:33:03,409 --> 00:33:09,169
sending data but you can still send data

00:33:06,080 --> 00:33:12,500
back to me like say I'm doing a double

00:33:09,169 --> 00:33:15,559
you get on some huge you know I don't

00:33:12,500 --> 00:33:21,020
know tour in or you know DVD or

00:33:15,559 --> 00:33:25,460
something oh I may send a cynic and say

00:33:21,020 --> 00:33:28,370
just give me I don't know southeast

00:33:25,460 --> 00:33:31,640
linux fest dot r dot g see all the

00:33:28,370 --> 00:33:33,649
videos from here and then i'll send a

00:33:31,640 --> 00:33:36,830
finish because i don't want anything

00:33:33,649 --> 00:33:40,429
else but for the next hour hour and a

00:33:36,830 --> 00:33:42,590
half the other machine will continue to

00:33:40,429 --> 00:33:44,600
send me the data that i requested and

00:33:42,590 --> 00:33:48,470
then we'll close it out with its own

00:33:44,600 --> 00:33:50,779
finished packet there's also the rst

00:33:48,470 --> 00:33:52,580
packet which is basically like the

00:33:50,779 --> 00:33:55,250
Silver Bullet it says kill the

00:33:52,580 --> 00:34:00,500
connection right now once you get an rst

00:33:55,250 --> 00:34:03,399
everything shuts down oh so you see at

00:34:00,500 --> 00:34:06,980
this point no two will call that Google

00:34:03,399 --> 00:34:09,409
Google they finished sending us our

00:34:06,980 --> 00:34:12,679
Clemson is or whoever's finish sending

00:34:09,409 --> 00:34:14,929
us all these videos they finally send us

00:34:12,679 --> 00:34:18,080
a fin packet we send them back Fna and

00:34:14,929 --> 00:34:29,480
we're done both nodes will fully

00:34:18,080 --> 00:34:31,940
terminate the TCP connection yep yes

00:34:29,480 --> 00:34:34,609
absolutely it always continues to send

00:34:31,940 --> 00:34:36,619
acknowledgments it just basically says

00:34:34,609 --> 00:34:38,720
i'm not going to request any more data

00:34:36,619 --> 00:34:40,760
i'm not going to send you any more data

00:34:38,720 --> 00:34:48,589
but it will still send acknowledgments

00:34:40,760 --> 00:34:50,270
Oh data frames this is you know we're

00:34:48,589 --> 00:34:52,040
actually talking about the data we're

00:34:50,270 --> 00:34:53,859
receiving as far as these videos they

00:34:52,040 --> 00:34:57,279
don't have any particular space

00:34:53,859 --> 00:34:59,829
flags they're just bulk data essentially

00:34:57,279 --> 00:35:03,099
with a potent uncle and a sequence

00:34:59,829 --> 00:35:06,339
number and some other stuff I wish I had

00:35:03,099 --> 00:35:08,079
space on all these slides to show the

00:35:06,339 --> 00:35:10,239
actual things but we'll see a little bit

00:35:08,079 --> 00:35:17,319
more and some of these later ones i

00:35:10,239 --> 00:35:19,989
didn't believe yeah anyhow Oh every time

00:35:17,319 --> 00:35:22,329
you get a data data frame even if the

00:35:19,989 --> 00:35:23,980
even if the session is half clothes like

00:35:22,329 --> 00:35:27,130
you said you have to send an

00:35:23,980 --> 00:35:30,880
acknowledgement so the sender knows hey

00:35:27,130 --> 00:35:34,329
we're we're getting data they're

00:35:30,880 --> 00:35:36,640
receiving it again this is only with TCP

00:35:34,329 --> 00:35:41,619
with UDP they just said oh I assume you

00:35:36,640 --> 00:35:43,480
got it oh if you don't ever see that at

00:35:41,619 --> 00:35:56,230
frame that acknowledgement they'll

00:35:43,480 --> 00:36:00,009
resend the data ports layer 5 i'm sorry

00:35:56,230 --> 00:36:11,470
for physical data network yet for

00:36:00,009 --> 00:36:13,930
transport layer that's basically your

00:36:11,470 --> 00:36:16,859
port and we'll we'll show you right here

00:36:13,930 --> 00:36:20,019
that's what the port is for essentially

00:36:16,859 --> 00:36:23,019
the colonel will create a socket for

00:36:20,019 --> 00:36:24,789
that poor and send the data through its

00:36:23,019 --> 00:36:26,859
filters just to get the data out and

00:36:24,789 --> 00:36:30,630
then sensitive whatever application open

00:36:26,859 --> 00:36:32,619
that port oh but that's how TCP

00:36:30,630 --> 00:36:35,829
communicates with the application layer

00:36:32,619 --> 00:36:39,900
with whatever actually wanted the data

00:36:35,829 --> 00:36:43,499
like in my example w get or Firefox or a

00:36:39,900 --> 00:36:47,230
send mail or clothes metal or whatever

00:36:43,499 --> 00:36:51,309
every TCP frame it's got source port and

00:36:47,230 --> 00:36:55,180
a destination for so if I start up

00:36:51,309 --> 00:36:58,119
Firefox and I want to I don't know do a

00:36:55,180 --> 00:37:00,999
google search it will set a destination

00:36:58,119 --> 00:37:05,650
for of port 80 that's the world wide web

00:37:00,999 --> 00:37:06,960
for HTTP port you got a question mr. all

00:37:05,650 --> 00:37:11,910
right no trouble no trouble

00:37:06,960 --> 00:37:14,849
I ain't real picky oh and I'll set a

00:37:11,910 --> 00:37:20,070
source port that's what ever it is some

00:37:14,849 --> 00:37:23,130
random high number port like Oh 30 2568

00:37:20,070 --> 00:37:26,670
that Firefox just chose or the colonel

00:37:23,130 --> 00:37:28,920
assigned to Firefox to use randomly as

00:37:26,670 --> 00:37:31,410
its source port and when it gets any

00:37:28,920 --> 00:37:36,330
sort of data back from that it knows

00:37:31,410 --> 00:37:38,190
what application to send it to oh that's

00:37:36,330 --> 00:37:40,190
basically they tailed us even know where

00:37:38,190 --> 00:37:42,960
to send the data portion of the frame

00:37:40,190 --> 00:37:48,599
UDP here we go we get the pic on you

00:37:42,960 --> 00:37:51,480
know my brain dead end says cousin it's

00:37:48,599 --> 00:37:55,140
the brain dead cousin a UDP it has ports

00:37:51,480 --> 00:37:58,619
and that's about it it doesn't do any

00:37:55,140 --> 00:38:01,530
sort of handshakes it doesn't do any

00:37:58,619 --> 00:38:05,910
sort of acknowledgments it just sends

00:38:01,530 --> 00:38:08,099
data as fast as it can Oh which is a

00:38:05,910 --> 00:38:11,400
good bit faster than TCP in some cases

00:38:08,099 --> 00:38:14,630
in some cases it's slower because the

00:38:11,400 --> 00:38:17,160
you know the transmission made is just

00:38:14,630 --> 00:38:19,650
unreliable and you never really ever get

00:38:17,160 --> 00:38:23,790
everything you wanted you wouldn't want

00:38:19,650 --> 00:38:27,150
to use UDP for downloading you know our

00:38:23,790 --> 00:38:29,520
video stuff here because when you start

00:38:27,150 --> 00:38:30,750
to get some network congestion it's just

00:38:29,520 --> 00:38:32,250
going to get worse and worse when where

00:38:30,750 --> 00:38:35,160
it's and eventually time out you've only

00:38:32,250 --> 00:38:38,460
got half the video TCP is smart enough

00:38:35,160 --> 00:38:42,480
to slow down and speed up when it needs

00:38:38,460 --> 00:38:43,920
to and I don't really have time to go

00:38:42,480 --> 00:38:49,920
through that whole algorithm it's how

00:38:43,920 --> 00:38:52,650
how it does that but basically a UDP

00:38:49,920 --> 00:38:56,400
real good for voice over IP streaming

00:38:52,650 --> 00:39:00,270
media VPNs anything we don't need to

00:38:56,400 --> 00:39:03,900
guarantee that data was reliably seeing

00:39:00,270 --> 00:39:06,240
for whatever reason uses the same port

00:39:03,900 --> 00:39:09,300
numbers even though these are actually

00:39:06,240 --> 00:39:12,660
different ports it's in basically the

00:39:09,300 --> 00:39:14,820
same way as TCP it just knows what

00:39:12,660 --> 00:39:18,050
socket or what application to hand the

00:39:14,820 --> 00:39:24,210
data off to buy those port

00:39:18,050 --> 00:39:30,150
sequencing sequencing information in a

00:39:24,210 --> 00:39:31,650
UDP yes there is a single number i'm

00:39:30,150 --> 00:39:34,410
almost positive i have to double check

00:39:31,650 --> 00:39:36,420
and tcp there he is so that if you get

00:39:34,410 --> 00:39:38,850
packets out of order it can put them

00:39:36,420 --> 00:39:41,520
back in the order and actually every

00:39:38,850 --> 00:39:44,460
acknowledgment has that same sequence

00:39:41,520 --> 00:39:46,470
number in tcp every acknowledgement

00:39:44,460 --> 00:39:49,860
packet has that same sequence number so

00:39:46,470 --> 00:39:51,870
the sending computer knows which one's

00:39:49,860 --> 00:39:54,240
actually were received in which ones

00:39:51,870 --> 00:39:57,240
weren't and can just you know he can

00:39:54,240 --> 00:39:59,640
intelligently resend the one that got

00:39:57,240 --> 00:40:03,390
missed delivered and it will show up

00:39:59,640 --> 00:40:06,630
later and they can reassemble so we

00:40:03,390 --> 00:40:09,480
should see if you later yeah we'll see

00:40:06,630 --> 00:40:11,250
some of the actual sequence numbers

00:40:09,480 --> 00:40:14,040
acknowledgement numbers all that stuff

00:40:11,250 --> 00:40:19,290
here in just a moment when we actually

00:40:14,040 --> 00:40:21,210
hang craft our very own frame oh the

00:40:19,290 --> 00:40:25,470
application layer this is real boring

00:40:21,210 --> 00:40:28,080
it's basically dhcp dns firefox HTTP

00:40:25,470 --> 00:40:31,290
it's just whatever actually makes the

00:40:28,080 --> 00:40:33,480
payload for the frame and since we're

00:40:31,290 --> 00:40:36,330
not interested and you know what that

00:40:33,480 --> 00:40:38,490
actual data is we're not really

00:40:36,330 --> 00:40:40,350
interested in the application layer you

00:40:38,490 --> 00:40:43,470
know we want to know how to write how to

00:40:40,350 --> 00:40:50,070
send that sort of stuff so it's kind of

00:40:43,470 --> 00:40:52,860
boring but you sometimes see you know

00:40:50,070 --> 00:40:59,040
like firefox will request a port number

00:40:52,860 --> 00:41:02,040
to send to like in this case you'll see

00:40:59,040 --> 00:41:04,770
lizella dotnet colon 8080 it's saying

00:41:02,040 --> 00:41:10,800
instead of normally sending 289 send to

00:41:04,770 --> 00:41:12,810
80 80 or 443 or whatever you know it's

00:41:10,800 --> 00:41:15,310
not hard coded by the application

00:41:12,810 --> 00:41:17,800
application can actually check

00:41:15,310 --> 00:41:19,570
you know the colonel to go ahead and cry

00:41:17,800 --> 00:41:24,310
and craft this packet to connect to a

00:41:19,570 --> 00:41:26,080
different port than usual all right if

00:41:24,310 --> 00:41:28,450
everybody's still with me we're going to

00:41:26,080 --> 00:41:31,120
go through the fun process of making our

00:41:28,450 --> 00:41:39,130
very own baby packet and we'll see just

00:41:31,120 --> 00:41:40,900
how fast she goes up oh we're going to

00:41:39,130 --> 00:41:42,700
start here with the application layer

00:41:40,900 --> 00:41:46,600
and you can see right down here at the

00:41:42,700 --> 00:41:50,980
bottom I've cut everything off at 32

00:41:46,600 --> 00:41:53,200
bits you start with zero go all the way

00:41:50,980 --> 00:41:55,930
out to one there then that's actually 31

00:41:53,200 --> 00:41:58,780
so each one of these little diagrams

00:41:55,930 --> 00:42:01,870
you've seen in the next few slides will

00:41:58,780 --> 00:42:04,510
be actually 32 bits in length and you'll

00:42:01,870 --> 00:42:07,690
see where everything actually is in the

00:42:04,510 --> 00:42:10,330
real packet so if for some ungodly

00:42:07,690 --> 00:42:12,940
reason you know you develop the ability

00:42:10,330 --> 00:42:15,400
to read binary ones and zeros on the

00:42:12,940 --> 00:42:17,710
wire you'll be able to figure out where

00:42:15,400 --> 00:42:22,480
everything actually is without using TCP

00:42:17,710 --> 00:42:25,150
dot um basically okay our application

00:42:22,480 --> 00:42:28,840
layer will call it send mail or Firefox

00:42:25,150 --> 00:42:31,720
whatever it sets the payload and here

00:42:28,840 --> 00:42:33,700
I've just said the payloads 32 bits it's

00:42:31,720 --> 00:42:37,990
real uninteresting maybe it's the number

00:42:33,700 --> 00:42:40,630
40 but you know we don't really care

00:42:37,990 --> 00:42:44,080
what the payload is we don't need values

00:42:40,630 --> 00:42:49,330
for it so we're just going to go on and

00:42:44,080 --> 00:42:51,850
start wrapping the pack it up as we go

00:42:49,330 --> 00:42:54,700
down each layer in the stack to the

00:42:51,850 --> 00:42:57,160
transport layer to the network layer to

00:42:54,700 --> 00:43:00,850
the data link layer we're going to add

00:42:57,160 --> 00:43:03,520
things to this payload to get it on down

00:43:00,850 --> 00:43:05,140
to its next destination and the first

00:43:03,520 --> 00:43:09,390
thing we'll do is we'll have the port

00:43:05,140 --> 00:43:14,790
number sequence numbers flags yada yada

00:43:09,390 --> 00:43:18,010
the TCP ads so you can see the first 16

00:43:14,790 --> 00:43:20,500
the first 16 binary places are reserved

00:43:18,010 --> 00:43:25,540
for the source port which is why porch

00:43:20,500 --> 00:43:28,410
can only go up to 60 5575 to the 16th

00:43:25,540 --> 00:43:31,470
power and then the next 16 or destiny

00:43:28,410 --> 00:43:33,330
import same basic deal and then you got

00:43:31,470 --> 00:43:36,300
sequence number and acknowledgement

00:43:33,330 --> 00:43:37,650
number personally I have no idea why

00:43:36,300 --> 00:43:40,610
they have both of these in the same

00:43:37,650 --> 00:43:44,340
packet I would think you could use just

00:43:40,610 --> 00:43:47,700
one 32-bit number here and whether the

00:43:44,340 --> 00:43:48,810
flag citizen hack or not you know decide

00:43:47,700 --> 00:43:51,990
whether it's a sequence or an

00:43:48,810 --> 00:43:54,930
acknowledgement number but apparently

00:43:51,990 --> 00:43:58,740
the guys that you know created TCP

00:43:54,930 --> 00:44:01,650
thought differently so we have a few

00:43:58,740 --> 00:44:04,320
other flags here dlrs we're not going to

00:44:01,650 --> 00:44:06,210
worry about all that stuff flags that's

00:44:04,320 --> 00:44:09,540
where we actually set whether it's a syn

00:44:06,210 --> 00:44:13,680
packet a fin packet acknowledgement of

00:44:09,540 --> 00:44:17,220
reset rst all that stuff they're

00:44:13,680 --> 00:44:20,550
actually binary ones or zeros so you

00:44:17,220 --> 00:44:22,530
have a sin 0 or sin mullen an

00:44:20,550 --> 00:44:24,290
acknowledgement 0r acknowledgement

00:44:22,530 --> 00:44:27,540
warning based on whether it's a 1 or 0

00:44:24,290 --> 00:44:29,610
tells the receiving node is this an

00:44:27,540 --> 00:44:31,890
acknowledgement packet is this a

00:44:29,610 --> 00:44:34,500
finished packet is it a synchronization

00:44:31,890 --> 00:44:36,480
packet that's where all those are coming

00:44:34,500 --> 00:44:40,200
in and when you actually do filtering

00:44:36,480 --> 00:44:42,960
you know in that filter or you know if

00:44:40,200 --> 00:44:46,440
you're leading enough to use openbsd PF

00:44:42,960 --> 00:44:47,640
oh you know when you start checking

00:44:46,440 --> 00:44:50,430
flags that's what you're actually

00:44:47,640 --> 00:44:54,720
looking for it's saying is this bit

00:44:50,430 --> 00:44:57,930
groin or is it 0 if you say you know I

00:44:54,720 --> 00:45:02,340
don't want send packets from anything

00:44:57,930 --> 00:45:04,200
else or I don't want Oh anything but

00:45:02,340 --> 00:45:07,200
send packets unless they're already

00:45:04,200 --> 00:45:10,920
established you say well if sin ain't

00:45:07,200 --> 00:45:13,260
one don't accept it unless it's already

00:45:10,920 --> 00:45:15,450
established that's where all that logic

00:45:13,260 --> 00:45:17,520
comes in it just looks at that one bit

00:45:15,450 --> 00:45:22,290
and is able to make an intelligent

00:45:17,520 --> 00:45:23,550
decision oh the window it's not really

00:45:22,290 --> 00:45:26,850
that important it's sort of like a

00:45:23,550 --> 00:45:30,210
sizing thing I can't really explain it

00:45:26,850 --> 00:45:33,900
all checksum basically sort of like md5

00:45:30,210 --> 00:45:36,870
checksum it just says hey here's little

00:45:33,900 --> 00:45:39,840
shakes on if some bits are flick this

00:45:36,870 --> 00:45:40,890
might catch it an urgent pointer we're

00:45:39,840 --> 00:45:44,010
not really going to go in

00:45:40,890 --> 00:45:48,630
too it's sometimes useful to explicit

00:45:44,010 --> 00:45:50,880
congestion notification not really all

00:45:48,630 --> 00:45:53,130
that important and then you can see

00:45:50,880 --> 00:45:56,430
payload down here I've actually done the

00:45:53,130 --> 00:46:01,160
little curly braces so you can see this

00:45:56,430 --> 00:46:01,160
is actually from the last time we did

00:46:01,220 --> 00:46:06,540
once we've added all this binary

00:46:03,540 --> 00:46:09,960
information we then step down to the

00:46:06,540 --> 00:46:12,270
network layer and first thing we'll see

00:46:09,960 --> 00:46:14,790
down here to the very bottom I just need

00:46:12,270 --> 00:46:17,090
the TCP header and payload because I

00:46:14,790 --> 00:46:20,880
couldn't fit everything on one slide and

00:46:17,090 --> 00:46:22,890
you know the text file online you'll be

00:46:20,880 --> 00:46:26,130
able to look at it all and read it all

00:46:22,890 --> 00:46:28,020
in binary and hexadecimal form and

00:46:26,130 --> 00:46:32,760
really get an idea of where you're you

00:46:28,020 --> 00:46:35,790
know where you're at this has got a

00:46:32,760 --> 00:46:39,860
buttload of flags don't it you've got

00:46:35,790 --> 00:46:41,990
version header length ty totally

00:46:39,860 --> 00:46:44,100
identification numbers and flags

00:46:41,990 --> 00:46:46,290
fragmentation offs that time to live

00:46:44,100 --> 00:46:49,050
protocol hitter check source IP

00:46:46,290 --> 00:46:51,330
destination IP address and then your TCP

00:46:49,050 --> 00:46:55,170
header in your payload whole bunch of

00:46:51,330 --> 00:46:57,480
junk in the network protocol the most

00:46:55,170 --> 00:46:59,520
important things are the source IP

00:46:57,480 --> 00:47:03,030
address and the destination IP address

00:46:59,520 --> 00:47:05,670
if you'll notice there's no subnetting

00:47:03,030 --> 00:47:08,250
information in the pocket no subnetting

00:47:05,670 --> 00:47:10,200
information whatsoever often we don't

00:47:08,250 --> 00:47:12,810
even know what the subnet is for the

00:47:10,200 --> 00:47:14,820
destination IP address and what it is

00:47:12,810 --> 00:47:20,660
for our source IP doesn't matter for the

00:47:14,820 --> 00:47:23,060
router basically when we send a our

00:47:20,660 --> 00:47:27,180
little will show you that the next thing

00:47:23,060 --> 00:47:31,020
version if we're talking about ipv4 it's

00:47:27,180 --> 00:47:33,600
going to be four minutes I mean a four

00:47:31,020 --> 00:47:36,780
if we're talking by IB v6 at six you

00:47:33,600 --> 00:47:38,640
know you get the idea and we're down to

00:47:36,780 --> 00:47:44,460
two minutes so I'm gonna you know go

00:47:38,640 --> 00:47:46,050
fast don't ask questions once we get

00:47:44,460 --> 00:47:48,180
down here we have destination MAC

00:47:46,050 --> 00:47:49,920
address and source MAC address you can

00:47:48,180 --> 00:47:51,010
see there 48-bit numbers that's why I

00:47:49,920 --> 00:47:53,440
take up more and a half

00:47:51,010 --> 00:47:55,690
on each one and then you gotta check

00:47:53,440 --> 00:47:57,930
some as well if we look right here the

00:47:55,690 --> 00:48:01,900
most important thing for you understand

00:47:57,930 --> 00:48:04,600
based on the destination IP address we

00:48:01,900 --> 00:48:06,490
set our destination MAC address it might

00:48:04,600 --> 00:48:08,950
not be the mac address for our eventual

00:48:06,490 --> 00:48:11,260
destination it will often be the mac

00:48:08,950 --> 00:48:17,230
address for the next hot our gateway and

00:48:11,260 --> 00:48:22,090
the next gateway after that for how we

00:48:17,230 --> 00:48:25,570
did get through it but basically what we

00:48:22,090 --> 00:48:27,430
have like say my local area my computer

00:48:25,570 --> 00:48:32,770
on my local area network connection and

00:48:27,430 --> 00:48:35,590
if i run long just shout if I want to

00:48:32,770 --> 00:48:39,310
send a packet to Google yeah 30 seconds

00:48:35,590 --> 00:48:41,710
I'm very long following send a packet to

00:48:39,310 --> 00:48:44,350
Google I don't know what Google's mac

00:48:41,710 --> 00:48:45,880
address he is and even if I did it

00:48:44,350 --> 00:48:49,330
wouldn't help me because the mac address

00:48:45,880 --> 00:48:51,850
isn't routable so what I do I I know

00:48:49,330 --> 00:48:55,120
Google isn't on my local area network I

00:48:51,850 --> 00:48:58,000
know my default gateway is so I set the

00:48:55,120 --> 00:49:01,300
destination MAC address to match my

00:48:58,000 --> 00:49:04,180
default gateway once it gets that packet

00:49:01,300 --> 00:49:06,880
it strips off this data link layer and

00:49:04,180 --> 00:49:10,570
says well I don't know where to get to a

00:49:06,880 --> 00:49:13,360
Google but I know somebody who does so

00:49:10,570 --> 00:49:17,040
it sets the destination MAC address to

00:49:13,360 --> 00:49:20,170
be the next hop closer to google and

00:49:17,040 --> 00:49:21,880
then it gets it and does the same thing

00:49:20,170 --> 00:49:25,180
until it eventually gets to Google

00:49:21,880 --> 00:49:27,430
that's how they go one hot at a time and

00:49:25,180 --> 00:49:32,530
you'll notice that you never actually

00:49:27,430 --> 00:49:35,770
send to the the IP address you always

00:49:32,530 --> 00:49:37,750
are sending to the mac address and yet

00:49:35,770 --> 00:49:41,080
you in stock now I'm pushing my 30

00:49:37,750 --> 00:49:43,030
seconds are up any other questions or

00:49:41,080 --> 00:49:46,660
you want to holler it anybody you can

00:49:43,030 --> 00:49:52,480
always catch me afterwards I'm not hard

00:49:46,660 --> 00:49:55,500
to spot bring bring beer and redman and

00:49:52,480 --> 00:49:55,500
I'll talk to you all day

00:49:57,250 --> 00:50:01,970
this work was recorded by view digital

00:50:00,170 --> 00:50:04,720
media and is licensed under a creative

00:50:01,970 --> 00:50:07,190
commons attribution share-alike version

00:50:04,720 --> 00:50:10,040
3.4 more information about the southeast

00:50:07,190 --> 00:50:12,790
linux fest visit south east linux fest

00:50:10,040 --> 00:50:12,790

YouTube URL: https://www.youtube.com/watch?v=FE3fKYDZFVw


