Title: 2009 SouthEast LinuxFest - Pete Graner - The Ubuntu Kernel
Publication date: 2012-02-14
Playlist: 2009 SouthEast LinuxFest
Description: 
	2009 SouthEast LinuxFest - Pete Graner - The Ubuntu Kernel

This video is licensed under Creative Commons Attribution 3.0 Unported License.
Captions: 
	00:00:00,000 --> 00:00:04,080
the following presentation was recorded

00:00:02,010 --> 00:00:06,359
by view digital media at the inaugural

00:00:04,080 --> 00:00:10,740
southeast linux fest in clemson south

00:00:06,359 --> 00:00:13,049
carolina on jun 13 2004 more information

00:00:10,740 --> 00:00:15,960
about the southeast linux fest visit

00:00:13,049 --> 00:00:19,710
southeast linux fest org thanks

00:00:15,960 --> 00:00:21,840
everybody so as was pointed out I'm the

00:00:19,710 --> 00:00:24,750
manager I don't claim to hack a lot of

00:00:21,840 --> 00:00:27,869
criminal code anymore so I've got a team

00:00:24,750 --> 00:00:32,040
of folks that pretty much just work on

00:00:27,869 --> 00:00:36,059
the kernel for a bun too so to start off

00:00:32,040 --> 00:00:38,610
I want to get a couple things one is by

00:00:36,059 --> 00:00:39,930
the enjoy what this talk is not ok I'm

00:00:38,610 --> 00:00:41,969
going to outline what we're not going to

00:00:39,930 --> 00:00:43,620
cover in this talk because I've done

00:00:41,969 --> 00:00:45,989
these before and they kind of get off in

00:00:43,620 --> 00:00:48,090
the weeds so I want to outline what we

00:00:45,989 --> 00:00:51,840
won't get into if people are interested

00:00:48,090 --> 00:00:53,309
in deeper discussions we can set up a

00:00:51,840 --> 00:00:55,739
buff and we can go over there and talk

00:00:53,309 --> 00:00:57,690
all you want I'll talked about the

00:00:55,739 --> 00:00:58,890
colonel team the overview how we're made

00:00:57,690 --> 00:01:00,270
up what's the difference between

00:00:58,890 --> 00:01:03,750
canonical and what's the difference

00:01:00,270 --> 00:01:05,640
between the community aspect some of the

00:01:03,750 --> 00:01:08,729
colonel team responsibilities what we do

00:01:05,640 --> 00:01:11,340
what we're charged with handling and not

00:01:08,729 --> 00:01:13,439
doing a little bit of the process and

00:01:11,340 --> 00:01:15,990
procedure these are a lot of questions

00:01:13,439 --> 00:01:17,460
we get routinely why do I do you do this

00:01:15,990 --> 00:01:20,670
this way why do you do that that way so

00:01:17,460 --> 00:01:22,530
I'll try to cover a lot of that what's

00:01:20,670 --> 00:01:24,979
different in ubuntu colonel from the

00:01:22,530 --> 00:01:27,360
mainline upstream linux kernel and

00:01:24,979 --> 00:01:29,700
what's new in our upcoming release in

00:01:27,360 --> 00:01:32,040
october at a karmic koala and then at

00:01:29,700 --> 00:01:38,579
the end we'll do some Q&A and go from

00:01:32,040 --> 00:01:40,020
there so what this talk is not not a

00:01:38,579 --> 00:01:44,579
great session about your favorite of on

00:01:40,020 --> 00:01:46,439
to bug or your linux kernel bug we're

00:01:44,579 --> 00:01:49,110
not going to debate upstream topics or

00:01:46,439 --> 00:01:51,810
upstream technical decisions and or

00:01:49,110 --> 00:01:54,630
distro bashing session because I've seen

00:01:51,810 --> 00:01:55,950
these devolved really quickly and all

00:01:54,630 --> 00:01:58,619
distros are good they all have their

00:01:55,950 --> 00:02:02,579
place and you know we love everybody

00:01:58,619 --> 00:02:05,729
else so why this talk it's really about

00:02:02,579 --> 00:02:09,060
transparency I came to canonical about a

00:02:05,729 --> 00:02:10,440
year ago and the colonel team wasn't

00:02:09,060 --> 00:02:13,100
very transparent and what they were

00:02:10,440 --> 00:02:16,010
doing while we were a community

00:02:13,100 --> 00:02:18,200
tribution a lot of decisions were out

00:02:16,010 --> 00:02:20,030
there nobody really understood how we

00:02:18,200 --> 00:02:23,510
came to those decisions why we came to

00:02:20,030 --> 00:02:26,570
those decisions so we've done a lot of

00:02:23,510 --> 00:02:29,420
things since I've been there to make it

00:02:26,570 --> 00:02:31,820
more open we hold community RC meetings

00:02:29,420 --> 00:02:33,620
everything's done on our mailing list so

00:02:31,820 --> 00:02:35,510
we've tried to open that process up and

00:02:33,620 --> 00:02:38,240
we try to bring in outside contributors

00:02:35,510 --> 00:02:41,180
from the community the colonel is a

00:02:38,240 --> 00:02:43,150
unique animal in that it's not like a

00:02:41,180 --> 00:02:45,590
lot of user space stuff where you get

00:02:43,150 --> 00:02:47,000
contributors or drive by people that you

00:02:45,590 --> 00:02:49,760
know throw a patch out at you to fix a

00:02:47,000 --> 00:02:52,430
bug the colonel is pretty specialized in

00:02:49,760 --> 00:02:54,560
pretty deep so a lot of contributors go

00:02:52,430 --> 00:02:57,020
upstream they don't necessarily come to

00:02:54,560 --> 00:02:59,000
us and give us patches they'll go up to

00:02:57,020 --> 00:03:00,860
the mainline linux kernel and we'll get

00:02:59,000 --> 00:03:04,730
those when weari base on whatever

00:03:00,860 --> 00:03:06,080
version they roll back down we have a

00:03:04,730 --> 00:03:09,590
handful of community which I'll get into

00:03:06,080 --> 00:03:13,100
in a little bit that help us out and are

00:03:09,590 --> 00:03:15,110
really quite valuable in the way our

00:03:13,100 --> 00:03:21,050
distros run especially from the colonel

00:03:15,110 --> 00:03:23,120
side so about the colonel team itself so

00:03:21,050 --> 00:03:26,240
the colonel teams made up of three basic

00:03:23,120 --> 00:03:29,720
parts we've got paid canonical employees

00:03:26,240 --> 00:03:32,180
which I'm one of I manage these two

00:03:29,720 --> 00:03:34,460
bullets here the top bullets which are

00:03:32,180 --> 00:03:36,770
the about to platform developers and

00:03:34,460 --> 00:03:38,570
there's nine of us there and then we've

00:03:36,770 --> 00:03:40,640
got the canonical paid employees that

00:03:38,570 --> 00:03:42,650
work on contract work these are the

00:03:40,640 --> 00:03:45,560
folks that you see enabling the dell

00:03:42,650 --> 00:03:47,930
mini nines with a bun to the HP mini

00:03:45,560 --> 00:03:50,720
me's and a lot of other things that are

00:03:47,930 --> 00:03:53,540
rebranded a bun to that you'll see press

00:03:50,720 --> 00:03:55,040
about you know for example acer did one

00:03:53,540 --> 00:03:57,110
that had all their branding but it was a

00:03:55,040 --> 00:03:58,670
bun to under the covers so that's the

00:03:57,110 --> 00:04:01,100
team that works on that half and they

00:03:58,670 --> 00:04:03,380
feed their patches back to us that we

00:04:01,100 --> 00:04:05,480
roll out in later a bunch of releases

00:04:03,380 --> 00:04:08,050
and we've got the community contributors

00:04:05,480 --> 00:04:10,430
which I talked a little bit about so

00:04:08,050 --> 00:04:12,050
that's sort of how we're structured a

00:04:10,430 --> 00:04:14,180
lot of people don't really understand

00:04:12,050 --> 00:04:15,740
that they think it's just one big lump

00:04:14,180 --> 00:04:21,070
of people and they all kind of do

00:04:15,740 --> 00:04:23,600
something so that's our primary division

00:04:21,070 --> 00:04:26,330
we do a lot of hardware enablement for

00:04:23,600 --> 00:04:30,669
people for Intel for

00:04:26,330 --> 00:04:34,729
a lot of the ODMs and when we do that a

00:04:30,669 --> 00:04:39,020
lot of this work is on device level

00:04:34,729 --> 00:04:42,259
things so for example we will enable for

00:04:39,020 --> 00:04:43,909
Intel a specific board however that

00:04:42,259 --> 00:04:47,090
board might be used in a let's say a

00:04:43,909 --> 00:04:49,189
netbook later down the road the second

00:04:47,090 --> 00:04:52,219
team the partner contract guys actually

00:04:49,189 --> 00:04:53,930
enable the device so we all the

00:04:52,219 --> 00:04:56,599
reference platform work is done in the a

00:04:53,930 --> 00:04:58,310
bunting platform team where we r you

00:04:56,599 --> 00:05:00,590
know taking for example we're doing an

00:04:58,310 --> 00:05:03,349
arm port so we'll get the reference

00:05:00,590 --> 00:05:05,569
board from freescale we'll take that

00:05:03,349 --> 00:05:07,849
enable it make sure it boots it works

00:05:05,569 --> 00:05:10,669
and then when it actually shows up in a

00:05:07,849 --> 00:05:12,500
device by some manufacturer the second

00:05:10,669 --> 00:05:15,530
team takes it and enables all the things

00:05:12,500 --> 00:05:18,289
that hang off it all the webcams the USB

00:05:15,530 --> 00:05:20,210
gizmos the Bluetooth because every

00:05:18,289 --> 00:05:22,969
vendor adds their own specialized

00:05:20,210 --> 00:05:30,409
chipsets and things like that so that's

00:05:22,969 --> 00:05:32,180
how the division sort of works so like I

00:05:30,409 --> 00:05:34,099
said here the platform we enable

00:05:32,180 --> 00:05:36,349
reference platforms and then the

00:05:34,099 --> 00:05:39,199
hardware Nabal minh team does specific

00:05:36,349 --> 00:05:40,940
devices the teams as she saw is pretty

00:05:39,199 --> 00:05:43,969
big it's almost 20 people will probably

00:05:40,940 --> 00:05:47,810
be at 25 people by the end of this

00:05:43,969 --> 00:05:50,330
summer we're global across seven

00:05:47,810 --> 00:05:53,960
countries everybody's remote nobody's in

00:05:50,330 --> 00:05:56,240
an office so it makes coordinating the

00:05:53,960 --> 00:05:58,069
type of work very challenging we use a

00:05:56,240 --> 00:05:59,839
lot of things which I'll hit in a later

00:05:58,069 --> 00:06:01,250
slide that talks about how we

00:05:59,839 --> 00:06:06,050
communicate and how we try to keep that

00:06:01,250 --> 00:06:08,690
coordination together so our community

00:06:06,050 --> 00:06:10,400
we can consist of upstream developers we

00:06:08,690 --> 00:06:13,219
have quite a few upstream colonel folks

00:06:10,400 --> 00:06:15,710
that actively work in launchpad which is

00:06:13,219 --> 00:06:18,800
our bug tracking system we have Ted so

00:06:15,710 --> 00:06:21,740
from the Linux file system he's in there

00:06:18,800 --> 00:06:24,949
working quite a bit in fact we worked

00:06:21,740 --> 00:06:29,539
with him to solve an F sync bug here

00:06:24,949 --> 00:06:31,479
recently we've got Jessie Barnes from

00:06:29,539 --> 00:06:33,740
Intel who's doing a lot of the ex work

00:06:31,479 --> 00:06:35,690
we've got all three major wireless

00:06:33,740 --> 00:06:37,129
upstream people working with this John

00:06:35,690 --> 00:06:39,739
Linville

00:06:37,129 --> 00:06:41,779
Johannesburg and luis rodriguez from

00:06:39,739 --> 00:06:43,909
atheros are all working in our bug

00:06:41,779 --> 00:06:45,349
tracker they're tracking what we're

00:06:43,909 --> 00:06:46,849
doing we're tracking what they're doing

00:06:45,349 --> 00:06:50,689
we've got a real good collaboration back

00:06:46,849 --> 00:06:52,610
and forth and then we've got partners

00:06:50,689 --> 00:06:56,899
and vendors we've got Intel we've got

00:06:52,610 --> 00:06:59,149
dell we've got HP vaya you name it there

00:06:56,899 --> 00:07:02,319
there's probably 25 or 30 partners that

00:06:59,149 --> 00:07:05,569
we work with that are all contributing

00:07:02,319 --> 00:07:07,849
and then we've got our volunteers we've

00:07:05,569 --> 00:07:10,369
got volunteered developers a couple of

00:07:07,849 --> 00:07:12,069
who are here today daniel chen is one

00:07:10,369 --> 00:07:14,779
who does a lot of audio work for us

00:07:12,069 --> 00:07:16,639
we've got a lot of testers we've got bug

00:07:14,779 --> 00:07:18,379
triage errs and a lot of people to just

00:07:16,639 --> 00:07:20,029
write documentation for us especially

00:07:18,379 --> 00:07:22,699
around the kernel bits because they're

00:07:20,029 --> 00:07:25,159
so complicated like will throw out a

00:07:22,699 --> 00:07:26,809
wiki page with just brute force how to

00:07:25,159 --> 00:07:28,309
do something and they'll come along

00:07:26,809 --> 00:07:30,740
behind us and clean it up and make it

00:07:28,309 --> 00:07:35,989
much more useful for the you know the

00:07:30,740 --> 00:07:37,849
community at large so our

00:07:35,989 --> 00:07:41,119
responsibilities so there's a lot of

00:07:37,849 --> 00:07:42,619
bullets here and this is not all

00:07:41,119 --> 00:07:45,679
inclusive this is just like the

00:07:42,619 --> 00:07:49,009
highlights you know we get stuck with a

00:07:45,679 --> 00:07:51,439
lot of things a lot of bugs look like

00:07:49,009 --> 00:07:52,789
Colonel initially so we get garaged with

00:07:51,439 --> 00:07:55,819
a lot of things than we find out later

00:07:52,789 --> 00:07:57,349
their user space but you know we're

00:07:55,819 --> 00:07:58,969
supposed to develop in an open and

00:07:57,349 --> 00:08:00,679
collaborative fashion and we've really

00:07:58,969 --> 00:08:02,899
been stressing that over the last two

00:08:00,679 --> 00:08:06,619
cycles through intrepid and John Key and

00:08:02,899 --> 00:08:08,329
moving in the karmic our primary way of

00:08:06,619 --> 00:08:11,179
doing that which is the last bullet

00:08:08,329 --> 00:08:13,429
there is UDS are a bunch of developer

00:08:11,179 --> 00:08:15,349
summit so we get the community together

00:08:13,429 --> 00:08:16,519
we try to do it in a very open fashion

00:08:15,349 --> 00:08:19,339
we talk about what we're going to do

00:08:16,519 --> 00:08:21,589
what the rationale is why it makes sense

00:08:19,339 --> 00:08:24,439
to do that and we take everybody's input

00:08:21,589 --> 00:08:27,019
and we come to a collective decision by

00:08:24,439 --> 00:08:28,339
the community it's not just canonical we

00:08:27,019 --> 00:08:31,039
have our interests and we have things

00:08:28,339 --> 00:08:32,180
that we want to do but we do take all

00:08:31,039 --> 00:08:34,370
the feedback from the community and

00:08:32,180 --> 00:08:38,389
factor that in and try to come up with a

00:08:34,370 --> 00:08:40,610
good middle ground for everybody we

00:08:38,389 --> 00:08:43,639
enable a wide range of hardware we've

00:08:40,610 --> 00:08:46,130
got several data centers that have

00:08:43,639 --> 00:08:49,040
testing facilities where we do netbook

00:08:46,130 --> 00:08:51,889
testing for example on

00:08:49,040 --> 00:08:53,690
Jonte we bought we went out and bought a

00:08:51,889 --> 00:08:56,269
large number of the top five netbooks

00:08:53,690 --> 00:08:58,910
that were on the market we bought those

00:08:56,269 --> 00:09:01,009
and we did nothing but just attack them

00:08:58,910 --> 00:09:03,320
from the enablement perspective to make

00:09:01,009 --> 00:09:04,970
sure everything worked or reasonably

00:09:03,320 --> 00:09:07,009
worked out of the box and if they didn't

00:09:04,970 --> 00:09:08,959
you had a documented work around or a

00:09:07,009 --> 00:09:12,560
reason why and what you could do about

00:09:08,959 --> 00:09:15,800
it so we really concentrate a lot on the

00:09:12,560 --> 00:09:17,870
hardware aspect we have all the

00:09:15,800 --> 00:09:19,819
supported architectures there's a slide

00:09:17,870 --> 00:09:21,380
later on that will outline what the

00:09:19,819 --> 00:09:24,410
architectures are and where they're

00:09:21,380 --> 00:09:26,779
supported and not supported we set the

00:09:24,410 --> 00:09:28,730
development standards we try to do

00:09:26,779 --> 00:09:31,490
things as close as possible to the way

00:09:28,730 --> 00:09:32,870
the upstream Linux kernel works so by

00:09:31,490 --> 00:09:35,870
that is we do everything on a mailing

00:09:32,870 --> 00:09:37,970
list we have peer review of patches same

00:09:35,870 --> 00:09:41,000
thing for example if Intel throws us a

00:09:37,970 --> 00:09:42,620
patch for a wireless driver that patch

00:09:41,000 --> 00:09:44,660
goes through our review process gets

00:09:42,620 --> 00:09:46,490
after an act based on the quality what

00:09:44,660 --> 00:09:48,410
it's touching what it's doing if it's

00:09:46,490 --> 00:09:51,230
nacked they take the patch back and

00:09:48,410 --> 00:09:54,110
rework it so you know we do a lot of

00:09:51,230 --> 00:09:55,760
things that way we have the care and

00:09:54,110 --> 00:09:58,519
feeding of the colonel git tree which is

00:09:55,760 --> 00:10:02,120
public the mailing list bug policies

00:09:58,519 --> 00:10:05,300
documentation which takes up a

00:10:02,120 --> 00:10:06,829
surprising amount of time it's probably

00:10:05,300 --> 00:10:07,819
equal to the time we spend on

00:10:06,829 --> 00:10:10,970
development it's just in the

00:10:07,819 --> 00:10:13,370
housekeeping we do vanilla Linux kernel

00:10:10,970 --> 00:10:16,970
builds and packaging I'll cover some of

00:10:13,370 --> 00:10:20,600
that later we've got what version we

00:10:16,970 --> 00:10:21,829
picked for the releases we do we serve

00:10:20,600 --> 00:10:25,310
as the interface to the Linux kernel

00:10:21,829 --> 00:10:28,310
upstream I'm routinely in communication

00:10:25,310 --> 00:10:29,839
with numerous people as well as members

00:10:28,310 --> 00:10:33,680
of my team working in the individual

00:10:29,839 --> 00:10:37,339
subsystems are working there we have our

00:10:33,680 --> 00:10:43,399
weekly RC meetings we do roadmaps and we

00:10:37,339 --> 00:10:45,649
conduct and run tracks at UDS so into

00:10:43,399 --> 00:10:47,990
the development real quick so this is

00:10:45,649 --> 00:10:50,449
our life cycle it's a circle it's

00:10:47,990 --> 00:10:54,079
never-ending we're on a six-month cycle

00:10:50,449 --> 00:10:57,050
so right now when the we're just

00:10:54,079 --> 00:10:58,850
starting so we're in the actually we're

00:10:57,050 --> 00:11:02,040
in the second block there on the right

00:10:58,850 --> 00:11:04,290
the open phase we just had UDS

00:11:02,040 --> 00:11:05,670
weeks ago in barcelona spain we went

00:11:04,290 --> 00:11:08,040
through and laid everything out that

00:11:05,670 --> 00:11:09,660
we're going to do for the release and we

00:11:08,040 --> 00:11:11,490
have a method of doing that it goes

00:11:09,660 --> 00:11:14,310
through a process called a blueprint and

00:11:11,490 --> 00:11:17,100
then into a formal spec that outlines

00:11:14,310 --> 00:11:18,750
the work what packages are touched what

00:11:17,100 --> 00:11:21,600
other subsystems are involved what other

00:11:18,750 --> 00:11:23,639
teams within a buncha would be involved

00:11:21,600 --> 00:11:27,149
in that we outline all the dependencies

00:11:23,639 --> 00:11:29,279
and then we proceed on the work so we're

00:11:27,149 --> 00:11:32,130
in the open phase right now for karmic

00:11:29,279 --> 00:11:34,980
which is we've already done the merge

00:11:32,130 --> 00:11:37,680
from debian and we're in the process of

00:11:34,980 --> 00:11:41,220
adding the new experimental code and

00:11:37,680 --> 00:11:43,560
it's highly unstable it's equivalent to

00:11:41,220 --> 00:11:45,630
fodor's rawhide at this stage where

00:11:43,560 --> 00:11:48,420
every day there's breakage your your

00:11:45,630 --> 00:11:52,470
machine may or may not boot X may or may

00:11:48,420 --> 00:11:55,440
not come up random crashes and hangs so

00:11:52,470 --> 00:11:56,730
that is where it's really ugly and

00:11:55,440 --> 00:11:59,850
that's kind of where we're at right now

00:11:56,730 --> 00:12:05,639
we move into the design phase which

00:11:59,850 --> 00:12:06,930
starts I guess I guess we're sort of

00:12:05,639 --> 00:12:10,199
sort of in that now a lot of these

00:12:06,930 --> 00:12:12,000
things kind of overlap and we move into

00:12:10,199 --> 00:12:13,889
the develop where we're doing the active

00:12:12,000 --> 00:12:15,870
feature development and we'll be there

00:12:13,889 --> 00:12:18,510
shortly specs we're supposed to be

00:12:15,870 --> 00:12:19,769
completed by this last Friday and we're

00:12:18,510 --> 00:12:21,360
starting to move into the actual

00:12:19,769 --> 00:12:23,850
implementation of all the different

00:12:21,360 --> 00:12:26,160
things that we're doing that we move

00:12:23,850 --> 00:12:27,449
into test and then we release and go

00:12:26,160 --> 00:12:32,519
into maintenance and the cycle repeats

00:12:27,449 --> 00:12:34,800
itself we do to UTS is a year so we do

00:12:32,519 --> 00:12:38,130
them in usually november december and

00:12:34,800 --> 00:12:39,959
then we do them again in April May

00:12:38,130 --> 00:12:45,029
depending upon when the release actually

00:12:39,959 --> 00:12:48,089
hits so here's an example schedule so

00:12:45,029 --> 00:12:51,209
this was the 810 to the 904 so I was

00:12:48,089 --> 00:12:53,130
intrepid to John T the A's along the

00:12:51,209 --> 00:12:55,769
center in yellow or the alpha releases

00:12:53,130 --> 00:12:58,769
alpha 1 through 6 we have a beta and

00:12:55,769 --> 00:13:01,680
then we have a release candidate which

00:12:58,769 --> 00:13:03,860
is if nothing is wrong with the release

00:13:01,680 --> 00:13:06,060
candidate it goes to the final release

00:13:03,860 --> 00:13:08,189
since I've been there we only had one

00:13:06,060 --> 00:13:11,939
that didn't actually turn into it we had

00:13:08,189 --> 00:13:14,430
a real bad blocker bug and intrepid so

00:13:11,939 --> 00:13:15,300
we actually had a RC one and then went

00:13:14,430 --> 00:13:17,700
into release

00:13:15,300 --> 00:13:20,120
but that was just to stabilize but

00:13:17,700 --> 00:13:23,279
you'll see like we go November to April

00:13:20,120 --> 00:13:26,940
the alphas starting with alpha 2 or

00:13:23,279 --> 00:13:29,790
about every two weeks beta is two weeks

00:13:26,940 --> 00:13:32,610
off after alpha six and then the release

00:13:29,790 --> 00:13:34,260
is two weeks after beta and we do

00:13:32,610 --> 00:13:36,149
another interesting thing here right

00:13:34,260 --> 00:13:39,660
around the alpha 5 timeframe called a

00:13:36,149 --> 00:13:42,300
sprint that's where canonical gets all

00:13:39,660 --> 00:13:45,089
the developers together it's about a

00:13:42,300 --> 00:13:46,620
hundred or so of the engineers and we go

00:13:45,089 --> 00:13:49,050
somewhere and we checkpoint on the

00:13:46,620 --> 00:13:51,690
release so our last sprint for this

00:13:49,050 --> 00:13:53,640
cycle was in Berlin and everybody got

00:13:51,690 --> 00:13:55,230
together and we spent a week going

00:13:53,640 --> 00:13:57,720
through the specs finding out what was

00:13:55,230 --> 00:14:01,140
what was blocking what was late what was

00:13:57,720 --> 00:14:03,959
going to drop were we going to you know

00:14:01,140 --> 00:14:07,800
maybe decrease functionality of some

00:14:03,959 --> 00:14:10,560
feature we don't slip releases ever so

00:14:07,800 --> 00:14:12,420
we will always have a rollback plan on a

00:14:10,560 --> 00:14:15,180
feature to take it back to a known good

00:14:12,420 --> 00:14:17,100
state rather than slip the release for

00:14:15,180 --> 00:14:22,920
it so that's why we have these

00:14:17,100 --> 00:14:24,810
intermediate checkpoints sure very

00:14:22,920 --> 00:14:27,810
little because the spec is highly

00:14:24,810 --> 00:14:30,899
detailed so if you go to blueprints that

00:14:27,810 --> 00:14:32,850
avanti calm and you can search on karmic

00:14:30,899 --> 00:14:36,480
you'll get all the karmic blueprints I

00:14:32,850 --> 00:14:40,649
think there was like 378 for this

00:14:36,480 --> 00:14:43,430
release across seven teams and out of

00:14:40,649 --> 00:14:46,290
those summer very minor right there like

00:14:43,430 --> 00:14:48,600
not contentious real simple things like

00:14:46,290 --> 00:14:51,120
move this button here but it has to be

00:14:48,600 --> 00:14:53,279
documented and why we're doing it some

00:14:51,120 --> 00:14:56,459
are more in-depth like we're moving to

00:14:53,279 --> 00:14:58,709
grub 2 off of grub for the bootloader so

00:14:56,459 --> 00:15:00,000
that is a huge undertaking because you

00:14:58,709 --> 00:15:02,399
have upgrade issues that you have to

00:15:00,000 --> 00:15:04,620
deal with you have broken biases that

00:15:02,399 --> 00:15:07,770
have to be found out and worked around

00:15:04,620 --> 00:15:10,709
so that is a very detailed spec several

00:15:07,770 --> 00:15:12,000
pages so there it all depends upon the

00:15:10,709 --> 00:15:16,170
level of the feature and what we're

00:15:12,000 --> 00:15:18,870
trying to do and feature is a really

00:15:16,170 --> 00:15:20,940
funny word in a bunt too because we're

00:15:18,870 --> 00:15:23,399
not really developing a lot of things

00:15:20,940 --> 00:15:25,300
like from scratch development it's

00:15:23,399 --> 00:15:28,100
mainly integration and

00:15:25,300 --> 00:15:30,050
bonding issues trying to make two pieces

00:15:28,100 --> 00:15:34,040
go together seamlessly without a lot of

00:15:30,050 --> 00:15:36,379
issue so that's what some people call it

00:15:34,040 --> 00:15:39,019
features it to me it's really not

00:15:36,379 --> 00:15:42,290
especially in the kernel space we're not

00:15:39,019 --> 00:15:44,389
actively writing kernel code we're doing

00:15:42,290 --> 00:15:46,550
bug fixing and we're doing a lot of

00:15:44,389 --> 00:15:48,350
integration work making it work better

00:15:46,550 --> 00:15:52,129
with the distro with the whole plumbing

00:15:48,350 --> 00:15:54,439
layer you know with d bus and how and

00:15:52,129 --> 00:15:57,740
you dev and all the underlying stack

00:15:54,439 --> 00:16:00,379
underneath so but that's the way a basic

00:15:57,740 --> 00:16:02,649
schedule looks and then it just flips so

00:16:00,379 --> 00:16:04,730
then you'll go from may to december

00:16:02,649 --> 00:16:07,459
which is the cycle we're in right now

00:16:04,730 --> 00:16:09,290
and it looks very similar all the

00:16:07,459 --> 00:16:10,819
milestones line up just about the same

00:16:09,290 --> 00:16:17,839
weeks just on the opposite end of the

00:16:10,819 --> 00:16:19,459
calendar so this is a sampling of the

00:16:17,839 --> 00:16:22,399
things that we talked about at this UDS

00:16:19,459 --> 00:16:24,439
for the karmic colonel so you see we had

00:16:22,399 --> 00:16:26,360
everything from bike bug handling right

00:16:24,439 --> 00:16:28,639
we have the largest number of incoming

00:16:26,360 --> 00:16:32,209
bugs in the event to project in the

00:16:28,639 --> 00:16:34,670
kernel and we don't fix very many of

00:16:32,209 --> 00:16:36,649
them because by the time we get into

00:16:34,670 --> 00:16:39,230
maintenance which you'll see as part of

00:16:36,649 --> 00:16:41,660
our update policy we're not really

00:16:39,230 --> 00:16:45,110
fixing those bugs were moved on to the

00:16:41,660 --> 00:16:47,209
next release we fix critical showstopper

00:16:45,110 --> 00:16:50,149
bugs and security but we're not doing

00:16:47,209 --> 00:16:52,250
new hardware enable mint we're not doing

00:16:50,149 --> 00:16:55,399
anything that's not won't be considered

00:16:52,250 --> 00:16:56,660
a showstopper for somebody if if it's a

00:16:55,399 --> 00:16:59,209
piece of hardware that doesn't work

00:16:56,660 --> 00:17:03,019
we'll evaluate it which gets into the

00:16:59,209 --> 00:17:04,760
second bullet the hardware database you

00:17:03,019 --> 00:17:07,189
have the option is a bunt to user to

00:17:04,760 --> 00:17:09,679
submit your hardware info in and we can

00:17:07,189 --> 00:17:13,189
actually look at that and say let's say

00:17:09,679 --> 00:17:14,750
you've got a intel 948 it's giving you

00:17:13,189 --> 00:17:17,839
problems we can go in the hardware

00:17:14,750 --> 00:17:19,549
database and say oh damn there's 10,000

00:17:17,839 --> 00:17:21,919
people with that card we probably need

00:17:19,549 --> 00:17:24,049
to fix that bug if there's five people

00:17:21,919 --> 00:17:26,480
using it and probably not worth the

00:17:24,049 --> 00:17:28,549
effort so that's what the hardware

00:17:26,480 --> 00:17:30,409
database workshop was about was trying

00:17:28,549 --> 00:17:32,990
to figure out how to mine that data

00:17:30,409 --> 00:17:34,580
better and get it so we could make more

00:17:32,990 --> 00:17:36,500
intelligent decisions on how we focus

00:17:34,580 --> 00:17:37,860
our resource because we are a pretty

00:17:36,500 --> 00:17:41,700
small kernel team

00:17:37,860 --> 00:17:44,250
compared to some folks Colonel config

00:17:41,700 --> 00:17:47,220
review this is contentious subject every

00:17:44,250 --> 00:17:48,870
cycle the colonel has thousands of

00:17:47,220 --> 00:17:51,600
config options what do you turn on what

00:17:48,870 --> 00:17:53,549
do you turn off people expect certain

00:17:51,600 --> 00:17:55,200
things to be there people want certain

00:17:53,549 --> 00:17:57,450
things to be there and they may or may

00:17:55,200 --> 00:17:59,940
not make sense often things conflict

00:17:57,450 --> 00:18:02,340
turn you turn one thing off you have to

00:17:59,940 --> 00:18:05,790
turn something else off you vice versus

00:18:02,340 --> 00:18:08,549
so we have a whole session about we go

00:18:05,790 --> 00:18:10,980
through our well we consider our key

00:18:08,549 --> 00:18:13,230
Colonel config items and we run down

00:18:10,980 --> 00:18:14,850
those and there's a lot of things that

00:18:13,230 --> 00:18:16,980
we just turn off because the hardware is

00:18:14,850 --> 00:18:19,370
so old by this point we don't need it

00:18:16,980 --> 00:18:21,710
it's not worth turning it on in

00:18:19,370 --> 00:18:25,559
potentially risking regressing people

00:18:21,710 --> 00:18:28,049
with newer newer models kernel mode

00:18:25,559 --> 00:18:29,850
setting we talked about having newer

00:18:28,049 --> 00:18:33,630
kernels on our long-term support

00:18:29,850 --> 00:18:36,120
releases the LTS those stay in existence

00:18:33,630 --> 00:18:38,040
for five years and people want newer

00:18:36,120 --> 00:18:40,500
hardware on those so can we bring you

00:18:38,040 --> 00:18:41,970
were kernels back and what impact does

00:18:40,500 --> 00:18:44,820
that have on user space what do we need

00:18:41,970 --> 00:18:46,110
to update how can we do that reasonably

00:18:44,820 --> 00:18:49,080
without breaking things that was a

00:18:46,110 --> 00:18:51,330
pretty good session we had we reviewed

00:18:49,080 --> 00:18:52,500
non upstream code there's a lot of

00:18:51,330 --> 00:18:56,130
things in the bunch of colonel

00:18:52,500 --> 00:18:58,500
previously that were not upstream aufs

00:18:56,130 --> 00:19:01,110
app armor i mean the list is long and

00:18:58,500 --> 00:19:03,270
varied so we went through and decided

00:19:01,110 --> 00:19:06,510
what do we really need do we need a lot

00:19:03,270 --> 00:19:07,830
of this stuff and we ended up I think we

00:19:06,510 --> 00:19:09,480
got like seventy percent of it out

00:19:07,830 --> 00:19:10,890
because it wasn't needed there was

00:19:09,480 --> 00:19:13,200
better functionality in the upstream

00:19:10,890 --> 00:19:17,160
kernel and we're migrating the rest of

00:19:13,200 --> 00:19:18,900
user space to use that our stable

00:19:17,160 --> 00:19:22,110
release update policy we went over that

00:19:18,900 --> 00:19:24,809
we had a we tried an experiment for a

00:19:22,110 --> 00:19:27,660
couple releases in which I'll cover in

00:19:24,809 --> 00:19:29,490
the SRU section we talked about adding

00:19:27,660 --> 00:19:32,460
android colonel components in the

00:19:29,490 --> 00:19:35,669
colonel we have our kernel decision

00:19:32,460 --> 00:19:39,030
session which is what kernel version we

00:19:35,669 --> 00:19:41,610
pick what are good the defaults so after

00:19:39,030 --> 00:19:43,169
we had the grub 2 session we said are we

00:19:41,610 --> 00:19:46,590
going to turn it on by default yes or no

00:19:43,169 --> 00:19:49,669
ext4 on or off by default all those type

00:19:46,590 --> 00:19:54,090
of things are decided in that session

00:19:49,669 --> 00:19:55,950
yes yeah it was on it was available in

00:19:54,090 --> 00:19:58,799
jaunty but it wasn't a default you had

00:19:55,950 --> 00:20:01,110
to manually say I want ext4 but it will

00:19:58,799 --> 00:20:03,570
be the default we won't if you're on

00:20:01,110 --> 00:20:06,480
ext3 we want to upgrade you to it but if

00:20:03,570 --> 00:20:08,419
it's a new install you'll get it or

00:20:06,480 --> 00:20:11,129
unless you say I don't want it

00:20:08,419 --> 00:20:13,350
sponsoring staging drivers so in the

00:20:11,129 --> 00:20:15,720
Linnet lynus is tree there's a directory

00:20:13,350 --> 00:20:17,879
called staging that Greg KH maintains

00:20:15,720 --> 00:20:20,840
which is basically the dumping ground

00:20:17,879 --> 00:20:23,639
for a lot of drivers that nobody

00:20:20,840 --> 00:20:25,950
maintains anymore but they are still

00:20:23,639 --> 00:20:28,139
useful to somebody so he dumps him in

00:20:25,950 --> 00:20:29,399
this directory called staging and in the

00:20:28,139 --> 00:20:31,799
hope that community people will come

00:20:29,399 --> 00:20:34,289
along and take an interest it's a low

00:20:31,799 --> 00:20:36,029
barrier to kernel development you can

00:20:34,289 --> 00:20:38,029
pick a driver you might have the

00:20:36,029 --> 00:20:40,379
hardware for it you can work on it and

00:20:38,029 --> 00:20:42,539
get it up to the colonel standards and

00:20:40,379 --> 00:20:44,279
get it into main line so there's a

00:20:42,539 --> 00:20:47,179
number of those drivers that we pull

00:20:44,279 --> 00:20:50,669
especially for oddball wireless chipsets

00:20:47,179 --> 00:20:52,919
the USB dongle cards things like that

00:20:50,669 --> 00:20:54,840
that we enable so we picked a number of

00:20:52,919 --> 00:20:56,879
those that we're going to actively

00:20:54,840 --> 00:21:00,480
dedicate developers to fix up and get in

00:20:56,879 --> 00:21:02,639
the mainline kernel SSDs are really big

00:21:00,480 --> 00:21:04,739
now so how do we make those operate

00:21:02,639 --> 00:21:05,970
better with a bun to that was a huge

00:21:04,739 --> 00:21:10,440
session we had and there's a lot of

00:21:05,970 --> 00:21:12,539
things that sandisk came in and talked

00:21:10,440 --> 00:21:14,909
to us about the low level how their

00:21:12,539 --> 00:21:16,350
where we're level algorithms work and

00:21:14,909 --> 00:21:18,659
why they do things the way they do and

00:21:16,350 --> 00:21:20,580
we found about 15 things we can do in

00:21:18,659 --> 00:21:22,139
kernel and user space to increase

00:21:20,580 --> 00:21:24,749
performance by twenty to thirty percent

00:21:22,139 --> 00:21:26,399
on the average SSD so it's things like

00:21:24,749 --> 00:21:28,379
when you format your file system

00:21:26,399 --> 00:21:30,710
aligning block sizes so you're not

00:21:28,379 --> 00:21:33,119
getting half rights across blocks

00:21:30,710 --> 00:21:34,950
adjusting the elevator to know up so

00:21:33,119 --> 00:21:37,049
it's not optimized for spinning media

00:21:34,950 --> 00:21:38,489
it's optimized for so there's a lot of

00:21:37,049 --> 00:21:40,830
different things we can do so we're

00:21:38,489 --> 00:21:43,369
going to auto-detect that and have the

00:21:40,830 --> 00:21:45,570
system tuned if you've got an SSD

00:21:43,369 --> 00:21:47,999
suspend resume is always a problem as

00:21:45,570 --> 00:21:50,369
well as Wi-Fi every linux distro suffers

00:21:47,999 --> 00:21:53,340
from this it's just do the very

00:21:50,369 --> 00:21:56,029
manufacturers hardware standards that

00:21:53,340 --> 00:21:59,009
are very subject to interpretation

00:21:56,029 --> 00:22:00,330
especially in the acpi arena so we

00:21:59,009 --> 00:22:02,530
talked about how we can do this better

00:22:00,330 --> 00:22:04,990
what we learned out of the last test

00:22:02,530 --> 00:22:06,400
psychol how we can make it better so we

00:22:04,990 --> 00:22:07,930
have a lot of a lot of things we cover

00:22:06,400 --> 00:22:09,910
these sessions and this is just a

00:22:07,930 --> 00:22:14,850
handful of what we covered there was a

00:22:09,910 --> 00:22:17,700
lot more sessions so when we communicate

00:22:14,850 --> 00:22:21,130
these are our primary means we use IRC

00:22:17,700 --> 00:22:22,960
freenode we have a public channel we

00:22:21,130 --> 00:22:25,630
have our public mailing list and in our

00:22:22,960 --> 00:22:27,250
weekly RCT meeting you know if you're

00:22:25,630 --> 00:22:29,760
interested all in the kernel and welcome

00:22:27,250 --> 00:22:32,470
you to come on by join the mailing list

00:22:29,760 --> 00:22:34,600
you know just say hey I want to help and

00:22:32,470 --> 00:22:36,940
we'll we'll work with you we have

00:22:34,600 --> 00:22:38,440
mentoring program that we have if you're

00:22:36,940 --> 00:22:40,540
somebody that wants to learn how to

00:22:38,440 --> 00:22:43,420
write criminal code or fixed drivers or

00:22:40,540 --> 00:22:45,970
fix bugs we've got a lot of bugs that we

00:22:43,420 --> 00:22:47,740
kind of tag as ones that would be great

00:22:45,970 --> 00:22:49,660
entry level things for people to do and

00:22:47,740 --> 00:22:50,860
we'll help you work on them and get them

00:22:49,660 --> 00:22:57,490
fixed and get your changes pushed

00:22:50,860 --> 00:23:01,030
upstream so takes us to Colonel

00:22:57,490 --> 00:23:03,910
differences every distro has a unique

00:23:01,030 --> 00:23:05,770
problem in that you can't run a vanilla

00:23:03,910 --> 00:23:07,960
kernel as much as everybody wants to

00:23:05,770 --> 00:23:09,520
there's always distro integration

00:23:07,960 --> 00:23:12,510
patches that you have to carry for one

00:23:09,520 --> 00:23:16,990
reason or another we try to keep our

00:23:12,510 --> 00:23:18,970
Delta very small from Lynn as's tree we

00:23:16,990 --> 00:23:21,610
call the differences in a bunch of sauce

00:23:18,970 --> 00:23:24,550
patches their special sauce that we add

00:23:21,610 --> 00:23:26,770
to you know make a bun to work so the

00:23:24,550 --> 00:23:30,760
differences really fall in integration

00:23:26,770 --> 00:23:33,700
patches support for live CD file systems

00:23:30,760 --> 00:23:35,770
we were carrying aufs which is a union

00:23:33,700 --> 00:23:39,310
type file system allows the live CD to

00:23:35,770 --> 00:23:41,680
work better in karmic we've dumped aufs

00:23:39,310 --> 00:23:44,170
because it was rejected upstream for the

00:23:41,680 --> 00:23:49,660
third time so we're going to move to the

00:23:44,170 --> 00:23:53,440
DM solution that fedora and Susa use we

00:23:49,660 --> 00:23:55,600
carry the dsdt that's all it's a patch

00:23:53,440 --> 00:23:58,090
that allows you to override your bios

00:23:55,600 --> 00:24:00,750
from user space so if you know you've

00:23:58,090 --> 00:24:03,580
got a buggy bios you can actually write

00:24:00,750 --> 00:24:05,830
BIOS code compile it with the intel bios

00:24:03,580 --> 00:24:07,540
compiler and load it at boot time to

00:24:05,830 --> 00:24:09,700
override a lot of functions that the

00:24:07,540 --> 00:24:13,120
colonel will call we have a lot of

00:24:09,700 --> 00:24:15,430
systems that we need to do that to make

00:24:13,120 --> 00:24:16,480
suspend resume work properly they don't

00:24:15,430 --> 00:24:18,820
enumerate the ace

00:24:16,480 --> 00:24:20,470
p I tables properly things aren't

00:24:18,820 --> 00:24:22,900
located where they're supposed to be by

00:24:20,470 --> 00:24:26,080
the standard the Linux kernel chokes on

00:24:22,900 --> 00:24:29,169
it and a lot of manufacturers to Shiva

00:24:26,080 --> 00:24:32,530
particular writes their own dsdt that

00:24:29,169 --> 00:24:35,140
they distribute and we put it in Linda's

00:24:32,530 --> 00:24:37,179
rejected the patch to do that saying

00:24:35,140 --> 00:24:38,890
that you know we should fix the kernel

00:24:37,179 --> 00:24:40,690
to deal with all these occurrences the

00:24:38,890 --> 00:24:42,580
problem is the occurrences happen at

00:24:40,690 --> 00:24:44,620
such a rate that the criminal can't keep

00:24:42,580 --> 00:24:46,510
up and this is just a stopgap work

00:24:44,620 --> 00:24:50,650
around that we carry to try to make the

00:24:46,510 --> 00:24:53,640
user experience better we do limited

00:24:50,650 --> 00:24:57,160
backports of new drivers so for example

00:24:53,640 --> 00:24:59,980
were you going to use 26 31 for karmic

00:24:57,160 --> 00:25:02,919
which is now just the emerg window just

00:24:59,980 --> 00:25:05,559
opened there will be some drivers that

00:25:02,919 --> 00:25:07,750
will not thoroughly complete within that

00:25:05,559 --> 00:25:10,840
merge window there will be features left

00:25:07,750 --> 00:25:12,280
out or there will be bugs that the

00:25:10,840 --> 00:25:14,890
upstream developers just say they're not

00:25:12,280 --> 00:25:17,080
going to fix in that series will reach

00:25:14,890 --> 00:25:19,360
forward to the Linux next tree which is

00:25:17,080 --> 00:25:21,460
the latest and greatest bleeding edge

00:25:19,360 --> 00:25:25,690
and we'll pull those drivers with those

00:25:21,460 --> 00:25:27,610
fixes back into the 31 kernel and ship

00:25:25,690 --> 00:25:30,010
that so that way the user has a better

00:25:27,610 --> 00:25:31,900
experience we see that a lot with the

00:25:30,010 --> 00:25:36,460
wireless drivers and with the video

00:25:31,900 --> 00:25:39,880
drivers with 4x and then we carry a

00:25:36,460 --> 00:25:44,230
parmer and we're going to be pushing a

00:25:39,880 --> 00:25:45,640
parmer upstream novell let the opera

00:25:44,230 --> 00:25:48,250
more team go they were the primary

00:25:45,640 --> 00:25:49,900
sponsor of it we hired a few of those

00:25:48,250 --> 00:25:52,120
guys and now they're going to take it

00:25:49,900 --> 00:26:00,360
and push it upstream and hopefully get

00:25:52,120 --> 00:26:03,610
it in from a technical perspective

00:26:00,360 --> 00:26:06,280
selinux is a role in tight based

00:26:03,610 --> 00:26:10,419
enforcement mandatory access control app

00:26:06,280 --> 00:26:13,450
armor uses path based so selinux looks

00:26:10,419 --> 00:26:15,700
inside a kernel objects and says you can

00:26:13,450 --> 00:26:17,260
or cannot do things with it such as

00:26:15,700 --> 00:26:21,700
write to a file system or write to a

00:26:17,260 --> 00:26:23,919
file a parmer does it by pathing so it

00:26:21,700 --> 00:26:25,360
will look at the physical path or

00:26:23,919 --> 00:26:28,390
symlinks and you know

00:26:25,360 --> 00:26:31,330
in direct them back and apply the

00:26:28,390 --> 00:26:33,520
controls that way they achieve the same

00:26:31,330 --> 00:26:35,260
end there's just how they go about it's

00:26:33,520 --> 00:26:38,710
different and it's a very religious

00:26:35,260 --> 00:26:41,290
subject it's the VI versus Emacs genome

00:26:38,710 --> 00:26:44,470
versus KDE app armor versus selinux

00:26:41,290 --> 00:26:47,220
they're all in the same light we chose

00:26:44,470 --> 00:26:49,960
it a long time ago before I was there

00:26:47,220 --> 00:26:53,320
because it's very simple to write the

00:26:49,960 --> 00:26:58,840
rules to lock the system down selinux is

00:26:53,320 --> 00:27:00,220
notoriously complicated so it's six and

00:26:58,840 --> 00:27:02,470
one-half dozen the other we chose it

00:27:00,220 --> 00:27:04,809
because it fit the about to model of

00:27:02,470 --> 00:27:06,610
being simple and allowing users to get

00:27:04,809 --> 00:27:11,620
the maximum benefit for the least amount

00:27:06,610 --> 00:27:12,850
of work they have to put into it and if

00:27:11,620 --> 00:27:14,559
you ever want to see what we're carrying

00:27:12,850 --> 00:27:16,330
that's different from the main line if

00:27:14,559 --> 00:27:18,940
you look at our git tree it looks

00:27:16,330 --> 00:27:20,169
exactly like the upstream tree the only

00:27:18,940 --> 00:27:21,669
difference is there's a directory called

00:27:20,169 --> 00:27:23,740
a bunt too and that's where all these

00:27:21,669 --> 00:27:25,720
patches live in various sub directories

00:27:23,740 --> 00:27:27,460
under there so it's very easy to find

00:27:25,720 --> 00:27:29,740
what the Delta between a bun to an

00:27:27,460 --> 00:27:34,419
upstream is I think right now my karmic

00:27:29,740 --> 00:27:37,960
we're carrying an 8 24 25 patches not

00:27:34,419 --> 00:27:40,150
very big so when I first got here a year

00:27:37,960 --> 00:27:44,860
ago we were at like sixty so we've

00:27:40,150 --> 00:27:46,690
pruned it down quite a bit so here's

00:27:44,860 --> 00:27:48,760
some of the policies and things that we

00:27:46,690 --> 00:27:52,900
operate by sort of like you know it's

00:27:48,760 --> 00:27:56,500
sort of like our our basic rules so sr

00:27:52,900 --> 00:28:00,160
use their equivalent to fedora or red

00:27:56,500 --> 00:28:01,929
hat errata they there's a set of rules

00:28:00,160 --> 00:28:04,870
that govern what we can and can't put

00:28:01,929 --> 00:28:08,140
out I talked a little bit before about

00:28:04,870 --> 00:28:10,299
an experiment we tried so after Hardy we

00:28:08,140 --> 00:28:13,470
really wanted to try to give the users

00:28:10,299 --> 00:28:16,380
the benefit of the Linux table colonel

00:28:13,470 --> 00:28:19,860
the stable updates that keep pouring out

00:28:16,380 --> 00:28:23,440
Greg KH maintains that tree and he pours

00:28:19,860 --> 00:28:25,900
at a shot anywhere between 80 and 120

00:28:23,440 --> 00:28:28,179
patches out to the stable tree every

00:28:25,900 --> 00:28:29,950
round and there's a lot of good stuff

00:28:28,179 --> 00:28:32,470
there that we thought our users could

00:28:29,950 --> 00:28:35,230
really benefit from so we started taking

00:28:32,470 --> 00:28:37,750
those wholesale we took them there

00:28:35,230 --> 00:28:39,160
supposedly tested and you know signed

00:28:37,750 --> 00:28:41,470
off by everybody upstream

00:28:39,160 --> 00:28:43,540
so we started putting those in intrepid

00:28:41,470 --> 00:28:44,680
it worked fine for the first couple

00:28:43,540 --> 00:28:47,940
updates and then we started getting

00:28:44,680 --> 00:28:50,770
regressions on current functionality

00:28:47,940 --> 00:28:52,900
previously RS are you policy was only

00:28:50,770 --> 00:28:55,180
critical bugs and security so now we

00:28:52,900 --> 00:28:57,160
were taking any bug fix that came from

00:28:55,180 --> 00:28:59,850
upstream and applying it and we were

00:28:57,160 --> 00:29:03,670
starting to regress users very badly so

00:28:59,850 --> 00:29:05,920
we after we didn't know what it was

00:29:03,670 --> 00:29:08,020
going to be like so we tried it we found

00:29:05,920 --> 00:29:09,850
it didn't work the way we expected so

00:29:08,020 --> 00:29:12,730
we're reverting reverting back to our

00:29:09,850 --> 00:29:15,040
old policy which is for long-term

00:29:12,730 --> 00:29:17,200
support releases will do hardware enable

00:29:15,040 --> 00:29:19,810
meant for the first two years and that's

00:29:17,200 --> 00:29:23,950
limited hardware enable man its minor pc

00:29:19,810 --> 00:29:26,110
ID updates if it's a driver in by itself

00:29:23,950 --> 00:29:28,030
in addition there's no chance of

00:29:26,110 --> 00:29:31,420
regressing anybody else no problem we'll

00:29:28,030 --> 00:29:34,600
take it if it's a major change to a very

00:29:31,420 --> 00:29:37,450
big driver like maybe the 3965 wireless

00:29:34,600 --> 00:29:40,660
driver we won't touch it it's just too

00:29:37,450 --> 00:29:44,140
too risky and then oh my god kitten

00:29:40,660 --> 00:29:47,230
killer critical bugs and security fixes

00:29:44,140 --> 00:29:49,570
for the non LTS releases it's just

00:29:47,230 --> 00:29:51,490
critical bugs and security so if you're

00:29:49,570 --> 00:29:54,370
wondering why you have a certain bug and

00:29:51,490 --> 00:29:57,640
we're not fixing it the SRU policy is

00:29:54,370 --> 00:29:59,290
why and that's the way all of ubuntu is

00:29:57,640 --> 00:30:01,630
not just the colonel we made a

00:29:59,290 --> 00:30:03,910
modification like i said to see if we

00:30:01,630 --> 00:30:07,450
could get some more that this fixes in

00:30:03,910 --> 00:30:10,300
and it was just too risky we release our

00:30:07,450 --> 00:30:13,240
sr used quarterly except security they

00:30:10,300 --> 00:30:16,720
go out on an async basis so as we get a

00:30:13,240 --> 00:30:18,100
cve they're usually embargoed till all

00:30:16,720 --> 00:30:20,590
the vendors can release on the same day

00:30:18,100 --> 00:30:27,550
and then everybody kicks it out on the

00:30:20,590 --> 00:30:29,980
same day so we try to operate as close

00:30:27,550 --> 00:30:32,320
to possible as upstream that means our

00:30:29,980 --> 00:30:35,170
mailing list works the same way you post

00:30:32,320 --> 00:30:37,690
patches you do get pulls so we have a

00:30:35,170 --> 00:30:39,640
lot of people like daniel chen maintains

00:30:37,690 --> 00:30:42,160
a lot of our sound he has his own get

00:30:39,640 --> 00:30:44,110
tree he'll send us a git pull we'll go

00:30:42,160 --> 00:30:46,540
pull it right out of history and apply

00:30:44,110 --> 00:30:48,280
it and the Shah ones keep everything in

00:30:46,540 --> 00:30:52,370
line and we know where the patches came

00:30:48,280 --> 00:30:54,960
from and it makes life better

00:30:52,370 --> 00:30:56,720
we do patch review patch submission

00:30:54,960 --> 00:30:59,669
works the same way we make our partners

00:30:56,720 --> 00:31:03,360
go post to our mailing list you'll see

00:30:59,669 --> 00:31:04,830
intel on there you'll see HP you'll see

00:31:03,360 --> 00:31:08,610
everybody in there brother posting

00:31:04,830 --> 00:31:09,929
patches in there via drops by about once

00:31:08,610 --> 00:31:13,380
a release cycle they update their

00:31:09,929 --> 00:31:14,610
chromedriver the video driver so you

00:31:13,380 --> 00:31:16,380
know we get it we get a lot of good

00:31:14,610 --> 00:31:18,090
people doing that on the list so we try

00:31:16,380 --> 00:31:20,880
to keep it as close to the main line as

00:31:18,090 --> 00:31:22,590
possible it's less that the developers

00:31:20,880 --> 00:31:24,720
have to learn worry about deviate from

00:31:22,590 --> 00:31:26,279
if they learn how upstream works or

00:31:24,720 --> 00:31:32,880
they're familiar with upstream we're

00:31:26,279 --> 00:31:35,640
very much the same way so this is like

00:31:32,880 --> 00:31:37,049
the various deviations in the kernel

00:31:35,640 --> 00:31:38,190
this is the hardest thing I had had to

00:31:37,049 --> 00:31:42,029
get my head around when I first came

00:31:38,190 --> 00:31:44,630
here I was used to I worked a red hat

00:31:42,029 --> 00:31:48,390
before it was basically one kernel

00:31:44,630 --> 00:31:51,630
unless you had Iran rel and you got big

00:31:48,390 --> 00:31:54,950
mem huge ma'am kernels and all this we

00:31:51,630 --> 00:31:57,990
really have two types generic and server

00:31:54,950 --> 00:32:01,049
for hearty and back we supported all

00:31:57,990 --> 00:32:05,159
those architectures x86 x86 64 power

00:32:01,049 --> 00:32:10,020
spark hppa I 64 it was a living

00:32:05,159 --> 00:32:12,539
nightmare we had a lot of patches for

00:32:10,020 --> 00:32:15,720
the odd architectures like spark that

00:32:12,539 --> 00:32:19,140
would break the x86 build and you'd have

00:32:15,720 --> 00:32:21,720
to resolve all this mass of architecture

00:32:19,140 --> 00:32:24,440
dependent issues to get a kernel out the

00:32:21,720 --> 00:32:26,820
door it would take us weeks sometimes

00:32:24,440 --> 00:32:30,049
intrepid you see we dropped it down the

00:32:26,820 --> 00:32:32,669
x86 next 86 64 we pushed all the

00:32:30,049 --> 00:32:34,409
architect the odd architectures out to

00:32:32,669 --> 00:32:37,620
the community they're called the porch

00:32:34,409 --> 00:32:39,299
tree we maintain the tree we keep the

00:32:37,620 --> 00:32:42,179
git tree for everybody to make sure it

00:32:39,299 --> 00:32:43,799
doesn't collide with the main tree but

00:32:42,179 --> 00:32:45,059
it's maintained by strictly community

00:32:43,799 --> 00:32:47,730
members they submit it to the build

00:32:45,059 --> 00:32:49,919
system and when it's ready they assemble

00:32:47,730 --> 00:32:54,240
their own a bunt to spark distribution

00:32:49,919 --> 00:32:58,289
and put it out jaunty we added the ARM

00:32:54,240 --> 00:33:01,549
architecture we've got several contracts

00:32:58,289 --> 00:33:04,230
for various people to do arm work

00:33:01,549 --> 00:33:04,490
specifically netbook type things coming

00:33:04,230 --> 00:33:09,950
down

00:33:04,490 --> 00:33:13,070
pipe so the IMX 51 the IP 4 x.x that is

00:33:09,950 --> 00:33:15,890
the everybody's running one if you're

00:33:13,070 --> 00:33:18,650
running a linksys router it's that chip

00:33:15,890 --> 00:33:21,200
so you can actually go and get John T

00:33:18,650 --> 00:33:23,210
flash it onto your router and run a bun

00:33:21,200 --> 00:33:26,240
to on your router and configure however

00:33:23,210 --> 00:33:28,670
you want to we have the versatile kernel

00:33:26,240 --> 00:33:31,220
which will basically give you a cue and

00:33:28,670 --> 00:33:33,800
qemu operating environment to do dev

00:33:31,220 --> 00:33:36,830
work and testing that requires its own

00:33:33,800 --> 00:33:40,130
special build for karmic going forward

00:33:36,830 --> 00:33:42,050
we saw the IMX 51 and that will conclude

00:33:40,130 --> 00:33:45,620
the a and B revisions which are the

00:33:42,050 --> 00:33:49,580
Babbage one two and three boards and

00:33:45,620 --> 00:33:52,460
then versatile we drop the IP for XX the

00:33:49,580 --> 00:33:55,970
IP for XX is an arm 5 instruction set

00:33:52,460 --> 00:34:00,140
which is nobody wants to use anymore so

00:33:55,970 --> 00:34:02,330
all the new ones the IMX 51 can do about

00:34:00,140 --> 00:34:04,670
four different instruction sets all the

00:34:02,330 --> 00:34:08,869
vendors want to move to six and it's

00:34:04,670 --> 00:34:12,740
armed 6mm seven so the coal karma tree

00:34:08,869 --> 00:34:14,960
will be armed six and then we have

00:34:12,740 --> 00:34:16,879
upstream mainline builds these are not

00:34:14,960 --> 00:34:18,320
officially supported kernels and that if

00:34:16,879 --> 00:34:20,389
you find a bug in it we're not going to

00:34:18,320 --> 00:34:23,750
take the bug report support you can't

00:34:20,389 --> 00:34:25,490
pay canonical support to fix the bug but

00:34:23,750 --> 00:34:27,859
there's a lot of folks that want to use

00:34:25,490 --> 00:34:30,320
plain vanilla kernels and mainly for

00:34:27,859 --> 00:34:32,570
testing they want to be able to run the

00:34:30,320 --> 00:34:35,899
about to Colonel they find a bug they'll

00:34:32,570 --> 00:34:38,240
grab the latest upstream colonel vanilla

00:34:35,899 --> 00:34:39,889
colonel run it if the bug is there they

00:34:38,240 --> 00:34:43,159
know it's a mainline bug not in a bunt

00:34:39,889 --> 00:34:45,679
to patch that caused the bug so we have

00:34:43,159 --> 00:34:47,330
a lot of mainline builds they go all the

00:34:45,679 --> 00:34:51,500
way back to hardy and they're done on

00:34:47,330 --> 00:34:53,149
every RC release from upstream so

00:34:51,500 --> 00:34:55,070
there's no sauce patches in the mainline

00:34:53,149 --> 00:34:57,950
builds there we use the ax bunt to

00:34:55,070 --> 00:35:01,790
config and we don't build the supporting

00:34:57,950 --> 00:35:03,980
packages lbm lung or lrm that's linux

00:35:01,790 --> 00:35:07,550
backport modules linux update modules

00:35:03,980 --> 00:35:09,109
and linux restricted modules and i'll

00:35:07,550 --> 00:35:12,109
get to those i think in a minute i

00:35:09,109 --> 00:35:14,600
recall correctly and then we do the

00:35:12,109 --> 00:35:16,369
daily tip builds so we take Lin as's

00:35:14,600 --> 00:35:18,190
tree and we build it on an automated

00:35:16,369 --> 00:35:20,380
fashion into Deb packages

00:35:18,190 --> 00:35:22,329
daily and that's for people that really

00:35:20,380 --> 00:35:23,770
want to live on the bleeding edge they

00:35:22,329 --> 00:35:26,589
want to track upstream but they don't

00:35:23,770 --> 00:35:29,560
want to have the problem of building deb

00:35:26,589 --> 00:35:32,950
packages out of it every day so again no

00:35:29,560 --> 00:35:35,440
sauce no a bunch you config if you talk

00:35:32,950 --> 00:35:37,569
to any of the a bunch of people about it

00:35:35,440 --> 00:35:40,420
it's called crack of the day so you'll

00:35:37,569 --> 00:35:42,069
see an IRC c dash 0 dash D and that's

00:35:40,420 --> 00:35:44,530
what people are referring to have you

00:35:42,069 --> 00:35:47,470
tried cod2 make sure that it's not there

00:35:44,530 --> 00:35:56,670
in referring to a bug and again we don't

00:35:47,470 --> 00:36:00,339
build any supporting packages oops so

00:35:56,670 --> 00:36:02,200
lrm this was a very contentious item for

00:36:00,339 --> 00:36:03,760
us this was Lynch restricted modules

00:36:02,200 --> 00:36:10,020
this is where we put all the binary

00:36:03,760 --> 00:36:13,569
blobs fglrx Nvidia broadcom's WL driver

00:36:10,020 --> 00:36:15,819
we removed it in karmic it's gone we've

00:36:13,569 --> 00:36:18,940
moved everything into dkms packages and

00:36:15,819 --> 00:36:21,819
you only get it if you go in and select

00:36:18,940 --> 00:36:25,240
I want the Nvidia binary driver then it

00:36:21,819 --> 00:36:27,339
downloads it gets it so we are actively

00:36:25,240 --> 00:36:30,310
trying to remove as much binary junk

00:36:27,339 --> 00:36:32,550
from the distro as possible but we're

00:36:30,310 --> 00:36:34,599
not going to do it at the risk of

00:36:32,550 --> 00:36:38,099
regressing the users that are used to it

00:36:34,599 --> 00:36:41,859
so that's why they're in DKMS packages

00:36:38,099 --> 00:36:43,810
for the fglrx Nvidia there's the ati

00:36:41,859 --> 00:36:45,760
driver which has gained a lot of

00:36:43,810 --> 00:36:49,859
momentum upstream and being able to

00:36:45,760 --> 00:36:52,150
support 3d in a TI we're actively

00:36:49,859 --> 00:36:55,150
contributing to that project and to the

00:36:52,150 --> 00:36:57,730
nvidia niveau project so we're hoping at

00:36:55,150 --> 00:36:59,890
some point to actually not even have to

00:36:57,730 --> 00:37:01,900
offer those as an option if the upstream

00:36:59,890 --> 00:37:04,150
drivers can get in the right shape so

00:37:01,900 --> 00:37:06,119
we've decided to invest some developer

00:37:04,150 --> 00:37:11,230
time and money in there and get it done

00:37:06,119 --> 00:37:13,060
the WL driver from broadcom be 44 is a

00:37:11,230 --> 00:37:15,069
reverse engineer driver and it's just

00:37:13,060 --> 00:37:17,260
not up to par to deal with the broadcom

00:37:15,069 --> 00:37:21,730
and about fifty percent of the notebook

00:37:17,260 --> 00:37:24,640
ship with broadcom we've tried to talk

00:37:21,730 --> 00:37:26,670
to them they're patently unhelpful they

00:37:24,640 --> 00:37:28,569
hide behind legal ease all the time

00:37:26,670 --> 00:37:30,520
every time you talk to them about

00:37:28,569 --> 00:37:31,840
opening the driver they're afraid of the

00:37:30,520 --> 00:37:33,700
FCC there

00:37:31,840 --> 00:37:36,640
afraid of getting sued they're afraid of

00:37:33,700 --> 00:37:38,440
patent infringement so we've pretty much

00:37:36,640 --> 00:37:40,090
given up on them we have the driver

00:37:38,440 --> 00:37:45,040
there it's there if you really want to

00:37:40,090 --> 00:37:50,290
use it but it is what it is I would just

00:37:45,040 --> 00:37:52,750
say buy notebook without broadcom so

00:37:50,290 --> 00:37:56,320
what's in karmic the latest and greatest

00:37:52,750 --> 00:37:58,840
stuff it will be using a 26 31 Colonel

00:37:56,320 --> 00:38:01,630
like I mentioned before KMS will be the

00:37:58,840 --> 00:38:04,660
default we've got a whitelist and

00:38:01,630 --> 00:38:06,250
blacklist of chips that are supported so

00:38:04,660 --> 00:38:08,710
you should be able to get KMS goodness

00:38:06,250 --> 00:38:12,010
out of the box what that really buys you

00:38:08,710 --> 00:38:13,930
is flicker-free x from boot up so you'll

00:38:12,010 --> 00:38:16,180
go into graphics mode from the time the

00:38:13,930 --> 00:38:19,180
colonel gets initialized so you won't

00:38:16,180 --> 00:38:21,790
get that text mode flickr to Chungking

00:38:19,180 --> 00:38:26,140
back and forth it also eliminates a lot

00:38:21,790 --> 00:38:27,910
of suspend and resume hangs probably

00:38:26,140 --> 00:38:31,840
about twenty thirty percent of suspend

00:38:27,910 --> 00:38:34,360
resumed deal with chpt happenings in the

00:38:31,840 --> 00:38:36,730
x server and in the PM utils underneath

00:38:34,360 --> 00:38:39,340
they switch x away so it can save state

00:38:36,730 --> 00:38:41,440
and throw you two a text console that's

00:38:39,340 --> 00:38:43,990
blank and then they throw you back well

00:38:41,440 --> 00:38:46,240
a lot of times those all hit at the same

00:38:43,990 --> 00:38:47,860
time x is trying to change while user

00:38:46,240 --> 00:38:49,690
space is trying to change and they're

00:38:47,860 --> 00:38:51,370
deadlocked on the semaphore and they

00:38:49,690 --> 00:38:53,380
just don't know it and that's where you

00:38:51,370 --> 00:38:55,390
come you can ping your box it's alive

00:38:53,380 --> 00:38:57,340
but you just have a black screen and you

00:38:55,390 --> 00:38:59,200
don't know why what a blinking cursor in

00:38:57,340 --> 00:39:01,750
the upper left corner if you ever seen

00:38:59,200 --> 00:39:03,940
that KMS will probably eliminate that

00:39:01,750 --> 00:39:07,900
problem because you're not doing all the

00:39:03,940 --> 00:39:09,700
VT switching anymore grub2 by default i

00:39:07,900 --> 00:39:13,330
think we're the first distro to go with

00:39:09,700 --> 00:39:16,380
grub to as the default this is mainly to

00:39:13,330 --> 00:39:19,420
support a new round of hardware from

00:39:16,380 --> 00:39:22,810
various manufacturers who I can't name

00:39:19,420 --> 00:39:25,420
that are going to be using efi as their

00:39:22,810 --> 00:39:29,950
primary boot mechanism from now on there

00:39:25,420 --> 00:39:32,020
is no more bios so they do have a bio

00:39:29,950 --> 00:39:34,360
simulation mode but it's freshly written

00:39:32,020 --> 00:39:36,120
and i would rather go with grub too

00:39:34,360 --> 00:39:39,700
that's been out there longer than

00:39:36,120 --> 00:39:42,850
somebody's bio simulation mode so we've

00:39:39,700 --> 00:39:45,039
tested it on i think over a hundred

00:39:42,850 --> 00:39:47,739
different models of notebook and death

00:39:45,039 --> 00:39:50,319
computers and we've had no failures so

00:39:47,739 --> 00:39:53,169
it's about on feature parity it's

00:39:50,319 --> 00:39:55,119
missing a few things one of my guys

00:39:53,169 --> 00:39:56,709
Colin King is actively working on

00:39:55,119 --> 00:40:00,209
putting those features in with grub

00:39:56,709 --> 00:40:04,239
upstream so hopefully it'll all be done

00:40:00,209 --> 00:40:07,539
before Kermit goes live ext4 will be the

00:40:04,239 --> 00:40:10,179
default and also one but one other thing

00:40:07,539 --> 00:40:12,130
if I back up for a moment grub2 we won't

00:40:10,179 --> 00:40:14,140
upgrade your grub if you're already

00:40:12,130 --> 00:40:15,910
running it so if you're running grub

00:40:14,140 --> 00:40:18,130
that's great a new install you'll get

00:40:15,910 --> 00:40:19,749
grub too you still have the option to

00:40:18,130 --> 00:40:22,059
use grub or lie low through the

00:40:19,749 --> 00:40:25,779
Installer if you want that we won't take

00:40:22,059 --> 00:40:27,759
that away actually was really easy I'm

00:40:25,779 --> 00:40:30,849
running it on my notebook if anybody

00:40:27,759 --> 00:40:33,939
wants to see it basically I apt-get it a

00:40:30,849 --> 00:40:37,179
package and it did all the magic Iran

00:40:33,939 --> 00:40:41,709
update grub and it was done it was that

00:40:37,179 --> 00:40:43,719
simple app armor we're up streaming in

00:40:41,709 --> 00:40:45,969
the dot 31 merge window we're hoping to

00:40:43,719 --> 00:40:48,160
get that accepted we've removed all the

00:40:45,969 --> 00:40:50,949
offending parts of the code in the VFS

00:40:48,160 --> 00:41:00,429
layer that people were adept objecting

00:40:50,949 --> 00:41:02,049
to so it should go in sure a ufs it's a

00:41:00,429 --> 00:41:04,679
union based file system that we use for

00:41:02,049 --> 00:41:08,499
the live CD it basically allowed you to

00:41:04,679 --> 00:41:10,509
use read-only media and write to

00:41:08,499 --> 00:41:11,949
temporary storage so it looked like your

00:41:10,509 --> 00:41:15,279
writing in the right places on the file

00:41:11,949 --> 00:41:17,049
system and we had a mechanism where you

00:41:15,279 --> 00:41:19,689
could use a USB key and allocate a

00:41:17,049 --> 00:41:24,669
certain amount of storage to keep it

00:41:19,689 --> 00:41:26,559
like a computer on a stick at UF s just

00:41:24,669 --> 00:41:28,890
got rejected for the third time upstream

00:41:26,559 --> 00:41:31,239
it looks like it does not have a future

00:41:28,890 --> 00:41:35,019
the upstream colonel community is very

00:41:31,239 --> 00:41:38,049
hard on Union file systems fact lwn had

00:41:35,019 --> 00:41:39,400
a big write-up maybe a month ago on all

00:41:38,049 --> 00:41:43,449
the different ones and why they were

00:41:39,400 --> 00:41:47,049
evil and so there's the DM Union mount

00:41:43,449 --> 00:41:51,299
that is currently in use by fedora and

00:41:47,049 --> 00:41:51,299
Susa we're adopting the same mechanism

00:41:51,410 --> 00:41:57,480
are the colonel teams point was we had

00:41:55,500 --> 00:41:58,950
to fix it up for every release it was

00:41:57,480 --> 00:42:00,840
always broken we'd rebased on a new

00:41:58,950 --> 00:42:03,540
kernel we'd spend a week cleaning that

00:42:00,840 --> 00:42:05,160
code up just to get it to work where if

00:42:03,540 --> 00:42:07,020
we stuck and put that same amount of

00:42:05,160 --> 00:42:09,120
resource in the upstream we would make

00:42:07,020 --> 00:42:15,540
the upstream a lot better so we're going

00:42:09,120 --> 00:42:17,340
to focus on upstream it you can do

00:42:15,540 --> 00:42:19,260
snapshots and other things as well so it

00:42:17,340 --> 00:42:20,820
has some other side effects it's slower

00:42:19,260 --> 00:42:24,540
that's the main reason people don't like

00:42:20,820 --> 00:42:27,060
it but there's changes in 31 to it that

00:42:24,540 --> 00:42:30,960
should bring it up to par with a ufs on

00:42:27,060 --> 00:42:33,900
speed we're adding android colonel

00:42:30,960 --> 00:42:35,940
support in the criminal it won't be in

00:42:33,900 --> 00:42:38,250
the default ubuntu kernel that is if

00:42:35,940 --> 00:42:40,530
you're running x86 you're not going to

00:42:38,250 --> 00:42:42,270
get the ax bunt to bits in there you'll

00:42:40,530 --> 00:42:44,250
have to get a special kernel with

00:42:42,270 --> 00:42:46,140
android in it if you care to run it

00:42:44,250 --> 00:42:49,230
really what that gives you is the

00:42:46,140 --> 00:42:50,580
android bender IPC mechanism that all

00:42:49,230 --> 00:42:55,410
the android apps use to talk to each

00:42:50,580 --> 00:42:58,920
other we did a demo of a bunch of

00:42:55,410 --> 00:43:01,530
running Android at UDS which I guess hit

00:42:58,920 --> 00:43:03,390
the various places across the net a

00:43:01,530 --> 00:43:07,200
couple of our engineers ported all the

00:43:03,390 --> 00:43:08,880
stuff over and it runs on x86 it's still

00:43:07,200 --> 00:43:11,460
a bit broken there's no cursor there's

00:43:08,880 --> 00:43:15,890
no mouse support it's all touch base

00:43:11,460 --> 00:43:18,180
type stuff limited keyboard support but

00:43:15,890 --> 00:43:19,980
there's a lot of netbook vendors that

00:43:18,180 --> 00:43:22,380
are looking at it as an option so we're

00:43:19,980 --> 00:43:25,970
looking at it just because it's

00:43:22,380 --> 00:43:30,600
something to do it gives us flexibility

00:43:25,970 --> 00:43:33,360
better Wi-Fi support we're at UTS we had

00:43:30,600 --> 00:43:35,520
the three primary wireless maintained

00:43:33,360 --> 00:43:37,530
errs and we talked about ways to make

00:43:35,520 --> 00:43:40,410
this better how we can help them improve

00:43:37,530 --> 00:43:41,760
the code improve testing so we're going

00:43:40,410 --> 00:43:44,220
to go forward with a pretty aggressive

00:43:41,760 --> 00:43:46,800
plan on Wi-Fi trying to get the drivers

00:43:44,220 --> 00:43:49,400
cleaned up and in shape doing the right

00:43:46,800 --> 00:43:51,780
things for things like suspend resume

00:43:49,400 --> 00:43:54,000
you know there's a lot of drivers have a

00:43:51,780 --> 00:43:56,640
lag time and Association coming back

00:43:54,000 --> 00:43:58,380
they're constantly rescanning and so

00:43:56,640 --> 00:44:01,960
we're going to try to get a lot of these

00:43:58,380 --> 00:44:03,790
very leading-edge patches into

00:44:01,960 --> 00:44:06,970
karmic to make white Wi-Fi better and

00:44:03,790 --> 00:44:09,790
flush it out we're focusing again on

00:44:06,970 --> 00:44:11,560
suspend resume it got a lot better this

00:44:09,790 --> 00:44:13,599
last release cycle we learned a lot of

00:44:11,560 --> 00:44:16,030
things about how to test to spend resume

00:44:13,599 --> 00:44:17,619
and we're going to take the lessons

00:44:16,030 --> 00:44:19,450
learned and try to make it yet one more

00:44:17,619 --> 00:44:21,520
time better and we'll be doing the same

00:44:19,450 --> 00:44:23,410
round we're buying the top ten notebooks

00:44:21,520 --> 00:44:26,410
the top ten netbooks and trying to

00:44:23,410 --> 00:44:30,609
enable those and make sure they work out

00:44:26,410 --> 00:44:32,800
of the box as expected and then we're

00:44:30,609 --> 00:44:34,900
we've got the auto tuning of SSD media

00:44:32,800 --> 00:44:37,570
which I said you can get some pretty

00:44:34,900 --> 00:44:39,490
significant speeding speed improvements

00:44:37,570 --> 00:44:42,400
especially on some of the cheaper SSD

00:44:39,490 --> 00:44:44,530
drives where they're not as fast as like

00:44:42,400 --> 00:44:48,640
Intel's got the fastest SSD out there

00:44:44,530 --> 00:44:51,550
now sandisk has their third generation

00:44:48,640 --> 00:44:53,859
coming out at some point this year which

00:44:51,550 --> 00:44:56,680
will be about hard drive speed for both

00:44:53,859 --> 00:45:00,400
read and write but you're going to see a

00:44:56,680 --> 00:45:03,460
lot of these lower costs smaller 32 to

00:45:00,400 --> 00:45:05,410
64 gig SSD starting to hit the market as

00:45:03,460 --> 00:45:08,080
these new ones are coming out and we

00:45:05,410 --> 00:45:09,820
want to make sure we're optimized to get

00:45:08,080 --> 00:45:13,060
the best performance passo as possible

00:45:09,820 --> 00:45:18,369
out of it so we're going to spend a lot

00:45:13,060 --> 00:45:20,530
of time in auto tuning so that takes me

00:45:18,369 --> 00:45:25,530
to the end with questions and this is

00:45:20,530 --> 00:45:25,530
usually the longest part so sure

00:45:32,509 --> 00:45:39,859
yeah we work together on IRC pretty much

00:45:36,390 --> 00:45:39,859
like I said we're cross seven countries

00:45:40,130 --> 00:45:48,749
we've tried to do the hiring in division

00:45:44,279 --> 00:45:51,180
of people to match up with reasonable

00:45:48,749 --> 00:45:53,460
time zones so for example that whole

00:45:51,180 --> 00:45:56,579
hardware enable my portion of my team is

00:45:53,460 --> 00:45:58,710
pretty much located in the Far East I've

00:45:56,579 --> 00:46:01,499
got a manager that manages those guys

00:45:58,710 --> 00:46:04,829
and they're pretty self sustaining once

00:46:01,499 --> 00:46:06,869
a month they join our calls and we

00:46:04,829 --> 00:46:09,329
collaborate back and forth there on the

00:46:06,869 --> 00:46:10,769
mailing list pushing patches back but

00:46:09,329 --> 00:46:14,039
the rest of us are pretty much in North

00:46:10,769 --> 00:46:16,410
America in Europe the farthest in Europe

00:46:14,039 --> 00:46:20,099
i think is finland which is what you TC

00:46:16,410 --> 00:46:24,239
plus 3 I think so we can pretty much all

00:46:20,099 --> 00:46:26,309
line up in a day we're all remote so we

00:46:24,239 --> 00:46:29,249
have pretty flexible work hours I

00:46:26,309 --> 00:46:32,130
usually work from 5am Eastern to about 3

00:46:29,249 --> 00:46:33,930
p.m. eastern which puts me in the bulk

00:46:32,130 --> 00:46:36,930
of the European time where a lot of my

00:46:33,930 --> 00:46:39,869
team is I've got a quite a few guys in

00:46:36,930 --> 00:46:42,749
Portland so they're on the far end of

00:46:39,869 --> 00:46:45,180
the spectrum so you know it's it's IRC

00:46:42,749 --> 00:46:47,489
and mailing list you know it's pretty

00:46:45,180 --> 00:46:50,640
much how we we do it everybody works

00:46:47,489 --> 00:46:53,400
from home we have canonical as for

00:46:50,640 --> 00:46:55,349
offices globally we have one in London

00:46:53,400 --> 00:46:58,200
we have one in Taipei we have one in

00:46:55,349 --> 00:47:01,799
Montreal than one in Boston so and

00:46:58,200 --> 00:47:03,839
they're very small offices 20 less than

00:47:01,799 --> 00:47:06,359
20 people in office and most of those

00:47:03,839 --> 00:47:07,890
are really admin type you know the

00:47:06,359 --> 00:47:11,039
London office is the headquarters that's

00:47:07,890 --> 00:47:14,309
all admin HR finance you know PR

00:47:11,039 --> 00:47:18,150
marketing all those guys the developers

00:47:14,309 --> 00:47:21,779
are all pretty much remote so yeah it's

00:47:18,150 --> 00:47:23,430
fun fun place to work so I think we're

00:47:21,779 --> 00:47:25,640
down or like four minutes or so any

00:47:23,430 --> 00:47:25,640
other questions

00:47:30,750 --> 00:47:41,800
right actually it's quite the opposite

00:47:39,490 --> 00:47:43,750
so a TI opened their code recently and

00:47:41,800 --> 00:47:45,280
pushed it all to the community for their

00:47:43,750 --> 00:47:47,340
legacy stuff they only want to write

00:47:45,280 --> 00:47:50,920
drivers for their latest and greatest

00:47:47,340 --> 00:47:53,290
chipsets then once that becomes main

00:47:50,920 --> 00:47:55,480
line or mainstreamed its popular they're

00:47:53,290 --> 00:47:58,660
on to their next development that their

00:47:55,480 --> 00:48:01,380
plan is to push that code back so ati

00:47:58,660 --> 00:48:05,590
has sort of gotten it especially since

00:48:01,380 --> 00:48:08,530
AMD acquired them AMD's been very open

00:48:05,590 --> 00:48:11,080
source friendly for a long time nvidia

00:48:08,530 --> 00:48:13,060
like Broadcom is the problem child they

00:48:11,080 --> 00:48:15,610
it's all reverse engineered the nuvo

00:48:13,060 --> 00:48:18,100
driver is actually surprisingly well I

00:48:15,610 --> 00:48:20,980
saw Bryce Harrington who's our ex

00:48:18,100 --> 00:48:22,750
maintainer was showing me at UDS some of

00:48:20,980 --> 00:48:24,880
the stuff that the nuvo driver could do

00:48:22,750 --> 00:48:27,760
I was pretty impressed given its all

00:48:24,880 --> 00:48:28,960
reverse engineered and so said we're

00:48:27,760 --> 00:48:32,170
going to throw some resource I didn't

00:48:28,960 --> 00:48:33,970
try to make it better you know we want

00:48:32,170 --> 00:48:36,030
to get rid of as much as possible get

00:48:33,970 --> 00:48:40,770
the binary stuff out of the distro

00:48:36,030 --> 00:48:40,770
that's really what we're trying to go oh

00:48:42,870 --> 00:48:49,660
no it's supported it's there you can use

00:48:45,790 --> 00:48:53,170
it we still package it up but it's DKMS

00:48:49,660 --> 00:48:55,570
which means it's outside the main

00:48:53,170 --> 00:48:58,780
colonel tree and it will not be shipped

00:48:55,570 --> 00:49:00,730
on the CD in that will happen is it'll

00:48:58,780 --> 00:49:02,950
come up in 2d mode you'll say hey we

00:49:00,730 --> 00:49:05,080
found hardware that you know you could

00:49:02,950 --> 00:49:07,240
use this driver for by the way this is

00:49:05,080 --> 00:49:09,040
really evil software it's you know blah

00:49:07,240 --> 00:49:11,350
blah blah do you want to use it if you

00:49:09,040 --> 00:49:13,540
say if you say yes it will go out and

00:49:11,350 --> 00:49:15,850
download it it will compile the shim

00:49:13,540 --> 00:49:17,860
because it's a two piece thing there's a

00:49:15,850 --> 00:49:20,440
binary blob and a shim layer to get

00:49:17,860 --> 00:49:23,290
around the GPL export symbol restriction

00:49:20,440 --> 00:49:25,300
and it will compile the shim load it up

00:49:23,290 --> 00:49:28,230
and then you've got it from that point

00:49:25,300 --> 00:49:28,230
on unless you remove it

00:49:28,750 --> 00:49:38,040
I they don't at all that's why we're

00:49:34,030 --> 00:49:41,770
forcing the ATI and the Nouvelle because

00:49:38,040 --> 00:49:45,370
in order to use KMS you have to use GPL

00:49:41,770 --> 00:49:47,500
exported symbols and once you do that it

00:49:45,370 --> 00:49:48,970
creates a derivative work and now you

00:49:47,500 --> 00:49:51,100
have to release the code they're not

00:49:48,970 --> 00:49:58,360
going to release the code and we're in

00:49:51,100 --> 00:50:04,390
this evil circle so fun fun I think 30

00:49:58,360 --> 00:50:11,560
seconds one last question same version

00:50:04,390 --> 00:50:14,260
GCC yes yep and to build environments

00:50:11,560 --> 00:50:16,330
for those of you that care for the life

00:50:14,260 --> 00:50:21,160
of the product we use the same GCC we're

00:50:16,330 --> 00:50:23,140
not building old binaries with new GCC

00:50:21,160 --> 00:50:27,400
week whatever we ship with and that

00:50:23,140 --> 00:50:31,210
releases built with us a GCC we use yeah

00:50:27,400 --> 00:50:36,280
across the board yeah good deal we're

00:50:31,210 --> 00:50:38,440
done all right thanks everybody this

00:50:36,280 --> 00:50:40,450
work was recorded by view digital media

00:50:38,440 --> 00:50:43,900
and is licensed under a creative commons

00:50:40,450 --> 00:50:45,700
attribution share-alike version 3.4 more

00:50:43,900 --> 00:50:50,790
information about the southeast linux

00:50:45,700 --> 00:50:50,790

YouTube URL: https://www.youtube.com/watch?v=zYoSpqdtrYY


