Title: 2011 SouthEast LinuxFest - DrupalCamp - Erik Webb - The Basics Of Smart Drupal Deployment
Publication date: 2013-03-11
Playlist: 2011 SouthEast LinuxFest - DrupalCamp
Description: 
	2011 SouthEast LinuxFest
DrupalCamp
Erik Webb
The Basics Of Smart Drupal Deployment
Captions: 
	00:00:01,129 --> 00:00:07,290
the following presentation was recorded

00:00:04,200 --> 00:00:09,870
at the 2011 southeast linux fest in

00:00:07,290 --> 00:00:11,370
Spartanburg South Carolina it is

00:00:09,870 --> 00:00:14,190
licensed under a creative commons

00:00:11,370 --> 00:00:19,020
license for more information about the

00:00:14,190 --> 00:00:22,350
southeast linux fest visit w wh linux pc

00:00:19,020 --> 00:00:24,029
org the southeast linux fest would like

00:00:22,350 --> 00:00:27,180
to thank the following diamond and

00:00:24,029 --> 00:00:31,500
platinum sponsors in 2011 for helping

00:00:27,180 --> 00:00:35,460
make these videos possible so my topic

00:00:31,500 --> 00:00:37,260
is going to be on drupal deployment this

00:00:35,460 --> 00:00:39,719
sort of gonna be dividing the two

00:00:37,260 --> 00:00:41,460
separate sections the first the sexy

00:00:39,719 --> 00:00:45,270
presentation i gave it the Atlanta meet

00:00:41,460 --> 00:00:47,520
up about month and Africa now I don't

00:00:45,270 --> 00:00:50,430
think any you guys are there right not

00:00:47,520 --> 00:00:51,570
that I remember heuer okay so you will

00:00:50,430 --> 00:00:53,309
have seen the first half of this

00:00:51,570 --> 00:00:56,850
presentation but they'll be they'll be

00:00:53,309 --> 00:00:58,620
more co.offaly so I'm first half inning

00:00:56,850 --> 00:01:00,600
and talk about sort of what are the

00:00:58,620 --> 00:01:02,609
tools to make deployment even have a

00:01:00,600 --> 00:01:04,650
chance to succeed how do you get things

00:01:02,609 --> 00:01:07,049
in the code how do you set things up to

00:01:04,650 --> 00:01:08,490
make it easy for you down the road and

00:01:07,049 --> 00:01:11,070
then the second half of it is actually

00:01:08,490 --> 00:01:12,840
more of a demo that I've created that

00:01:11,070 --> 00:01:15,720
actually is using Jenkins jmeter

00:01:12,840 --> 00:01:19,200
selenium and rush to actually create a

00:01:15,720 --> 00:01:23,970
fully deploy belen vironment selenium

00:01:19,200 --> 00:01:26,040
was gracious enough to provide me with

00:01:23,970 --> 00:01:29,490
some nice swags and hot sauce stickers

00:01:26,040 --> 00:01:31,079
business cards I still have devcloud I

00:01:29,490 --> 00:01:34,170
have a shirt i can give away i have all

00:01:31,079 --> 00:01:35,970
kinds of different stuff sauce labs I've

00:01:34,170 --> 00:01:37,650
been talking to their CEO back and forth

00:01:35,970 --> 00:01:40,680
and they've been great company to just

00:01:37,650 --> 00:01:41,670
talk to and work with so I'll show them

00:01:40,680 --> 00:01:44,640
off a little bit later in the

00:01:41,670 --> 00:01:46,680
presentation and we'll we'll take a look

00:01:44,640 --> 00:01:50,880
so i guess it's this presentations

00:01:46,680 --> 00:01:54,840
co-sponsored by them indirectly all

00:01:50,880 --> 00:01:58,049
right so since most you guys with my

00:01:54,840 --> 00:01:59,520
presentation last time i'll skip that so

00:01:58,049 --> 00:02:01,229
the big thing is how do we define

00:01:59,520 --> 00:02:02,850
deployment first before we know there's

00:02:01,229 --> 00:02:06,390
a problem before we try and fix a

00:02:02,850 --> 00:02:09,290
problem what is deployment look like for

00:02:06,390 --> 00:02:09,290
most people will take this

00:02:09,930 --> 00:02:14,980
but the important thing the seriousness

00:02:12,760 --> 00:02:17,160
the important things our deployment is

00:02:14,980 --> 00:02:19,690
about maintaining independent violence

00:02:17,160 --> 00:02:22,000
this is not about something that is

00:02:19,690 --> 00:02:25,270
copying everything from one another it's

00:02:22,000 --> 00:02:26,770
not about backups it's not it's not just

00:02:25,270 --> 00:02:29,440
a one-way flow this is something that

00:02:26,770 --> 00:02:31,510
affects your day-to-day work it's also

00:02:29,440 --> 00:02:33,970
about migrating and testing between them

00:02:31,510 --> 00:02:36,700
that second one being the key migrating

00:02:33,970 --> 00:02:38,680
is there's ways to do it's not that

00:02:36,700 --> 00:02:40,030
difficult testing as part of the

00:02:38,680 --> 00:02:43,420
migration is something most people

00:02:40,030 --> 00:02:46,720
overlook and also updating without down

00:02:43,420 --> 00:02:50,200
down time or rollbacks this is key

00:02:46,720 --> 00:02:52,810
downtime is manageable if you plan to

00:02:50,200 --> 00:02:55,650
have the downtime robeks can be really

00:02:52,810 --> 00:02:57,850
nasty if you don't plan for it and also

00:02:55,650 --> 00:03:00,490
accounting for the changes so knowing

00:02:57,850 --> 00:03:01,900
what changed this one I'm not actually

00:03:00,490 --> 00:03:04,150
gonna be able to talk about this one is

00:03:01,900 --> 00:03:06,070
more about developer responsibility you

00:03:04,150 --> 00:03:08,530
need to know between releases of your

00:03:06,070 --> 00:03:12,520
product what is changing what isn't

00:03:08,530 --> 00:03:14,290
changing just years now all this is

00:03:12,520 --> 00:03:17,410
going to be on I'll put all this on

00:03:14,290 --> 00:03:19,540
slide show so you don't forget crazy

00:03:17,410 --> 00:03:21,000
notes or anything like that so I always

00:03:19,540 --> 00:03:23,830
look at this as being three and a half

00:03:21,000 --> 00:03:25,660
environments starting at the bottom the

00:03:23,830 --> 00:03:28,450
local environments what's sitting in

00:03:25,660 --> 00:03:30,040
front all you guys but the key thing is

00:03:28,450 --> 00:03:32,110
it needs to match software versions and

00:03:30,040 --> 00:03:33,670
I know it's hard with multiple hosts and

00:03:32,110 --> 00:03:36,610
doing all these different things but as

00:03:33,670 --> 00:03:40,660
close as possible especially at least

00:03:36,610 --> 00:03:43,840
between like PHP 5 2 versus 53 my sequel

00:03:40,660 --> 00:03:46,000
50 vs 55 things like that that are you

00:03:43,840 --> 00:03:48,910
know really really tiny point releases

00:03:46,000 --> 00:03:51,490
maybe not such a big deal but I've seen

00:03:48,910 --> 00:03:55,209
people develop on 5 to deploy to 53 and

00:03:51,490 --> 00:03:56,920
just seen all kind of chaos going up one

00:03:55,209 --> 00:03:58,720
level up I use development is the

00:03:56,920 --> 00:04:00,160
integration environment so putting

00:03:58,720 --> 00:04:02,260
everything together making sure enough

00:04:00,160 --> 00:04:04,830
in crashes and burns this is basically

00:04:02,260 --> 00:04:07,350
testing make sure the code is sound

00:04:04,830 --> 00:04:10,330
staging is a sign-off staging is

00:04:07,350 --> 00:04:11,620
something that's semi external this is

00:04:10,330 --> 00:04:13,180
probably the first level that you

00:04:11,620 --> 00:04:14,709
actually show a client shows someone

00:04:13,180 --> 00:04:16,630
outside of the immediate development

00:04:14,709 --> 00:04:18,820
team and then of course production is

00:04:16,630 --> 00:04:20,910
hands-off it's something you put up

00:04:18,820 --> 00:04:22,560
there if you need to make a change

00:04:20,910 --> 00:04:25,410
it needs to go back through the testing

00:04:22,560 --> 00:04:29,900
process I know that's ideal that's what

00:04:25,410 --> 00:04:32,930
I'm here for the three season enough

00:04:29,900 --> 00:04:35,250
code goes up configuration lives in code

00:04:32,930 --> 00:04:37,380
content only goes down files only move

00:04:35,250 --> 00:04:39,540
down there's ways to figure out the

00:04:37,380 --> 00:04:41,910
different different ways to do it if you

00:04:39,540 --> 00:04:45,030
do it this way it's going to save you a

00:04:41,910 --> 00:04:48,090
lot of headaches the question is always

00:04:45,030 --> 00:04:51,630
how do you stage content the best way I

00:04:48,090 --> 00:04:54,800
always say to set that up is just create

00:04:51,630 --> 00:04:56,850
everything on production with a workflow

00:04:54,800 --> 00:04:58,470
kim records actually doing a

00:04:56,850 --> 00:05:00,270
presentation on workbench at the end of

00:04:58,470 --> 00:05:01,710
today i've actually already deployed

00:05:00,270 --> 00:05:04,250
that two or three project this is a

00:05:01,710 --> 00:05:06,120
really really cool module so if you're

00:05:04,250 --> 00:05:08,240
confused at all about workflow

00:05:06,120 --> 00:05:10,200
especially moving forward in Drupal 7

00:05:08,240 --> 00:05:14,370
definitely don't miss that presentation

00:05:10,200 --> 00:05:16,290
it's a really slick suite of modules so

00:05:14,370 --> 00:05:18,720
the very bottom step is how do we set up

00:05:16,290 --> 00:05:21,660
a version control to make this actually

00:05:18,720 --> 00:05:23,700
work so everyone knows everyone's here

00:05:21,660 --> 00:05:25,680
dealt with the resolving madness right

00:05:23,700 --> 00:05:27,330
you have two developers working on two

00:05:25,680 --> 00:05:29,820
separate parts of the code of course it

00:05:27,330 --> 00:05:32,430
won't collide right and you end up with

00:05:29,820 --> 00:05:34,860
that and these are your pm's over here

00:05:32,430 --> 00:05:41,010
just going huh how are we going to fix

00:05:34,860 --> 00:05:43,110
it so a really nice thing is using

00:05:41,010 --> 00:05:44,820
branches and tags so branches are used

00:05:43,110 --> 00:05:47,280
for ongoing development there's

00:05:44,820 --> 00:05:49,169
something that you put code into and you

00:05:47,280 --> 00:05:52,680
constantly deployed and constantly

00:05:49,169 --> 00:05:54,570
commit to trunk is a branch you kind of

00:05:52,680 --> 00:05:57,570
people mostly think about them

00:05:54,570 --> 00:05:58,980
differently but it is a branch so it

00:05:57,570 --> 00:06:01,770
doesn't complete it's not wholly

00:05:58,980 --> 00:06:03,630
separate from that I mean also tags are

00:06:01,770 --> 00:06:06,930
used for release numbers tags are used

00:06:03,630 --> 00:06:09,000
for a single point in time to refer to a

00:06:06,930 --> 00:06:12,450
single release they should never change

00:06:09,000 --> 00:06:16,530
if one tag is bad you just create a new

00:06:12,450 --> 00:06:18,110
tag and move on here's a diagram I like

00:06:16,530 --> 00:06:19,980
using that kind of explains the process

00:06:18,110 --> 00:06:22,380
there's a bunch of different ways to

00:06:19,980 --> 00:06:26,160
manage version control this is just one

00:06:22,380 --> 00:06:27,870
method I like so essentially trunk is

00:06:26,160 --> 00:06:30,889
where you do your any sort of

00:06:27,870 --> 00:06:32,719
pre-release development and then once

00:06:30,889 --> 00:06:34,370
they have a version that is ready to be

00:06:32,719 --> 00:06:37,280
tested that's ready to actually put out

00:06:34,370 --> 00:06:39,830
there and really use you branch off of

00:06:37,280 --> 00:06:41,479
that when you get to a point where

00:06:39,830 --> 00:06:43,729
there's some sort of substantial feature

00:06:41,479 --> 00:06:46,099
you want to add to your brain you break

00:06:43,729 --> 00:06:47,659
off into a feature branch this way if

00:06:46,099 --> 00:06:50,449
you have a hotfix and easy coming in

00:06:47,659 --> 00:06:53,539
between so by hotfix i mean something

00:06:50,449 --> 00:06:55,699
that is a typo a one-line bug something

00:06:53,539 --> 00:06:58,159
that you can sort of fix in line and

00:06:55,699 --> 00:06:59,449
test and redeploy whereas a feature is

00:06:58,159 --> 00:07:01,729
something we are adding a new module

00:06:59,449 --> 00:07:04,819
you're rewriting part of your project

00:07:01,729 --> 00:07:07,310
that needs to be done out of band normal

00:07:04,819 --> 00:07:10,039
development and then we've done you

00:07:07,310 --> 00:07:13,669
merge it back into the branch and that

00:07:10,039 --> 00:07:15,169
pattern just kind of follows a lot of

00:07:13,669 --> 00:07:16,969
this is planning to make sure you don't

00:07:15,169 --> 00:07:20,090
have two features that are going to kind

00:07:16,969 --> 00:07:22,009
of conflict with one another but you

00:07:20,090 --> 00:07:23,960
know this is the theoretical obviously

00:07:22,009 --> 00:07:28,069
the real world is a lot more about

00:07:23,960 --> 00:07:31,310
communication anything else how do you

00:07:28,069 --> 00:07:32,990
keep your version control sane first you

00:07:31,310 --> 00:07:36,050
ignore the inappropriate files which is

00:07:32,990 --> 00:07:39,250
files directory and this is one that's

00:07:36,050 --> 00:07:42,620
always fun to discuss I don't like I

00:07:39,250 --> 00:07:43,909
like versioning settings PHP a lot of

00:07:42,620 --> 00:07:47,240
people leave it out because it has

00:07:43,909 --> 00:07:50,210
database information in it I can show

00:07:47,240 --> 00:07:52,490
the way I like doing it at the end of

00:07:50,210 --> 00:07:54,710
this presentation but the reasoning

00:07:52,490 --> 00:07:56,449
mainly for me is there's a lot of

00:07:54,710 --> 00:07:58,490
settings in there that aren't database

00:07:56,449 --> 00:08:00,229
specific and you want to be able to

00:07:58,490 --> 00:08:03,439
version those things like cookie

00:08:00,229 --> 00:08:06,110
timeouts other random configurations

00:08:03,439 --> 00:08:11,149
that you make to your site but you want

00:08:06,110 --> 00:08:12,710
versions somewhere so I'm looking around

00:08:11,149 --> 00:08:15,259
I know some of you guys like I don't

00:08:12,710 --> 00:08:17,750
like the sound of that but i'll show you

00:08:15,259 --> 00:08:21,770
sort of the method i use it's sort of a

00:08:17,750 --> 00:08:24,620
hybrid between the two also preventing

00:08:21,770 --> 00:08:27,169
bad PHP's and lynch x so does everyone

00:08:24,620 --> 00:08:33,409
know what PHP Lintas can someone explain

00:08:27,169 --> 00:08:35,690
to me what it is anyone know so when you

00:08:33,409 --> 00:08:38,750
run a PHP script and you see that little

00:08:35,690 --> 00:08:39,750
thing says semicolon expected that's

00:08:38,750 --> 00:08:42,240
basically went

00:08:39,750 --> 00:08:44,300
so it's basically doing a syntax check

00:08:42,240 --> 00:08:46,500
ahead of time and making sure codes okay

00:08:44,300 --> 00:08:48,480
you should be doing that in the

00:08:46,500 --> 00:08:51,690
repository there should be no bad code

00:08:48,480 --> 00:08:54,450
in your repository and also don't be

00:08:51,690 --> 00:08:56,520
afraid to blame so s DNA and get those

00:08:54,450 --> 00:08:58,260
have blame commands so if you're working

00:08:56,520 --> 00:09:00,300
on a project with a handful of

00:08:58,260 --> 00:09:02,100
developers you can actually see who

00:09:00,300 --> 00:09:04,710
committed that individual line is

00:09:02,100 --> 00:09:07,380
causing problems and that's a really

00:09:04,710 --> 00:09:08,880
good way to know immediately not sending

00:09:07,380 --> 00:09:10,650
blasting I was about walking over the

00:09:08,880 --> 00:09:12,810
deaths and say hey I noticed you commit

00:09:10,650 --> 00:09:14,340
this I don't think I don't think it's

00:09:12,810 --> 00:09:17,270
quite working right can you explain this

00:09:14,340 --> 00:09:22,410
to me it just saves you a lot of time

00:09:17,270 --> 00:09:23,940
here's an example of a get lint check so

00:09:22,410 --> 00:09:25,380
I'm not going to worry about the

00:09:23,940 --> 00:09:26,850
individual lines but essentially it

00:09:25,380 --> 00:09:28,860
pulls out all the files that have

00:09:26,850 --> 00:09:30,720
changed and runs on wind check against

00:09:28,860 --> 00:09:34,200
if any of those fails it actually blocks

00:09:30,720 --> 00:09:36,900
the commit so this way there's never any

00:09:34,200 --> 00:09:39,810
bad PHP syntax in your repository

00:09:36,900 --> 00:09:42,930
because there never should be and this

00:09:39,810 --> 00:09:45,320
is just kind of a harsh way to make sure

00:09:42,930 --> 00:09:45,320
that happens

00:09:48,670 --> 00:09:53,090
so moving configuration code this is

00:09:51,380 --> 00:09:55,880
probably jerkles a number one pain point

00:09:53,090 --> 00:09:59,890
I think in terms of deployment is most

00:09:55,880 --> 00:10:03,580
things do not translate well into code

00:09:59,890 --> 00:10:07,070
views easy panels easy workflow

00:10:03,580 --> 00:10:08,600
workbench what do those look like those

00:10:07,070 --> 00:10:11,630
are basically just sequel commands you

00:10:08,600 --> 00:10:13,340
don't have a lot of help there so you

00:10:11,630 --> 00:10:15,380
know you end up with a square peg in a

00:10:13,340 --> 00:10:16,580
circle hole and you have you're just

00:10:15,380 --> 00:10:18,740
going to keep cramming cream and

00:10:16,580 --> 00:10:20,660
cramming until it fits and then you're

00:10:18,740 --> 00:10:24,590
gonna break and leave something on the

00:10:20,660 --> 00:10:26,450
table so most people know people know

00:10:24,590 --> 00:10:29,330
about most of these there's a/c tools

00:10:26,450 --> 00:10:31,970
exports there's features which Matthew

00:10:29,330 --> 00:10:33,290
Lee time out more later today which I

00:10:31,970 --> 00:10:35,330
think I've seen your presentation by two

00:10:33,290 --> 00:10:38,060
or three times at least so it's a good

00:10:35,330 --> 00:10:41,060
presentation strong arm for variables

00:10:38,060 --> 00:10:44,090
boxes for a stand and replacement for

00:10:41,060 --> 00:10:46,010
blocks a little less people know about

00:10:44,090 --> 00:10:48,740
that one that one's really key so you

00:10:46,010 --> 00:10:52,370
can have static content blocks that

00:10:48,740 --> 00:10:54,440
people can edit but our deployables uuid

00:10:52,370 --> 00:10:56,440
that's you'll probably be hearing a lot

00:10:54,440 --> 00:10:59,150
more about that next year and a half

00:10:56,440 --> 00:11:02,000
this is a way so that we can get away

00:10:59,150 --> 00:11:04,970
from the idea of having node 1 2 3 4 5 6

00:11:02,000 --> 00:11:06,560
which is just not deployable at all to a

00:11:04,970 --> 00:11:09,440
point where we have these unique IDs

00:11:06,560 --> 00:11:11,810
that will be unique between environments

00:11:09,440 --> 00:11:14,570
and we can deploy content much easier it

00:11:11,810 --> 00:11:18,440
somewhat works right now with node and

00:11:14,570 --> 00:11:21,320
taxonomy don't be surprised if in Drupal

00:11:18,440 --> 00:11:26,390
8 everything has one and there's also

00:11:21,320 --> 00:11:29,060
the abomination of net export and what's

00:11:26,390 --> 00:11:30,920
left you know eighty percent is handled

00:11:29,060 --> 00:11:32,560
by C tools or features or something like

00:11:30,920 --> 00:11:35,480
that that's really not that difficult

00:11:32,560 --> 00:11:37,550
but if your non developer at that point

00:11:35,480 --> 00:11:39,920
you know there's not really anything you

00:11:37,550 --> 00:11:41,870
can do you have to write code at that

00:11:39,920 --> 00:11:43,580
point that's the biggest problems if

00:11:41,870 --> 00:11:45,980
you're on a large development project if

00:11:43,580 --> 00:11:48,410
you if you're the smart guy in the room

00:11:45,980 --> 00:11:49,900
you can figure it out but if you're

00:11:48,410 --> 00:11:51,490
really new to Drupal

00:11:49,900 --> 00:11:53,710
or you're more of just like a site

00:11:51,490 --> 00:11:56,170
builder you're pretty much stuck and

00:11:53,710 --> 00:12:01,090
that's you know that's really the pain

00:11:56,170 --> 00:12:03,310
point right there and the exception suck

00:12:01,090 --> 00:12:05,200
these you can't say oh I can export this

00:12:03,310 --> 00:12:07,480
but not this and I'm gonna figure out a

00:12:05,200 --> 00:12:09,280
way to fit it into this model that I can

00:12:07,480 --> 00:12:12,940
explore and you end up with a bigger

00:12:09,280 --> 00:12:15,910
mess than you had before the answers

00:12:12,940 --> 00:12:17,230
these update functions how many guys

00:12:15,910 --> 00:12:20,380
have written here you guys have written

00:12:17,230 --> 00:12:25,510
an update function know what it is okay

00:12:20,380 --> 00:12:28,170
do I explain with us no actual update

00:12:25,510 --> 00:12:28,170
like hook update

00:12:52,820 --> 00:12:57,960
right exactly yeah so it's something

00:12:56,220 --> 00:13:00,390
that's built in a Drupal you don't have

00:12:57,960 --> 00:13:07,410
to worry about the management of module

00:13:00,390 --> 00:13:09,900
versions anymore and you don't have

00:13:07,410 --> 00:13:12,800
trying to kill the speaker up here you

00:13:09,900 --> 00:13:15,810
just want the stage don't you be honest

00:13:12,800 --> 00:13:18,090
it's supported by drupal so like Mark

00:13:15,810 --> 00:13:19,620
was saying if you have you just number

00:13:18,090 --> 00:13:21,600
it in incremental numbers and knows

00:13:19,620 --> 00:13:23,400
where the last one was it knows what the

00:13:21,600 --> 00:13:25,320
next one's to run our it handles all

00:13:23,400 --> 00:13:29,600
that for you all you have to do is write

00:13:25,320 --> 00:13:32,100
the Codex executor here's an example

00:13:29,600 --> 00:13:34,650
this is similar to a forum enabled us

00:13:32,100 --> 00:13:36,060
just to see where I got the code from so

00:13:34,650 --> 00:13:38,130
if you go to my knowledge and run your

00:13:36,060 --> 00:13:40,830
update function it'll save a new

00:13:38,130 --> 00:13:45,030
vocabulary and return a string sale is

00:13:40,830 --> 00:13:47,160
imported super simple example there's a

00:13:45,030 --> 00:13:49,140
nice texana me helper function that

00:13:47,160 --> 00:13:51,150
actually clears it up for you and makes

00:13:49,140 --> 00:13:52,680
it a lot easier but there's a lot of

00:13:51,150 --> 00:13:54,570
helper functions out there to do this

00:13:52,680 --> 00:13:57,240
the problem is they're not always that

00:13:54,570 --> 00:14:00,330
easy to find sometimes it's easier just

00:13:57,240 --> 00:14:02,520
do this just write an insert query you

00:14:00,330 --> 00:14:03,960
know like workbench is the perfect

00:14:02,520 --> 00:14:06,330
example that's workbench is not

00:14:03,960 --> 00:14:09,060
exportable but it's isolated to like

00:14:06,330 --> 00:14:10,650
three tables so you can you already know

00:14:09,060 --> 00:14:13,590
where it's going to be it's only a

00:14:10,650 --> 00:14:16,950
couple rows in each one just print a

00:14:13,590 --> 00:14:18,840
sequel minutes it's not going to be it's

00:14:16,950 --> 00:14:22,950
not the cleanest way but it works

00:14:18,840 --> 00:14:25,500
perfectly fine so I I do this a lot and

00:14:22,950 --> 00:14:27,780
if you really take this to that to that

00:14:25,500 --> 00:14:30,000
integrate you can really get a hundred

00:14:27,780 --> 00:14:33,210
percent of your configuration in the

00:14:30,000 --> 00:14:35,940
code just an example we had I was work

00:14:33,210 --> 00:14:37,950
on a large project last summer where we

00:14:35,940 --> 00:14:42,330
had we had all of our configuration in

00:14:37,950 --> 00:14:44,070
code and we had all everything done

00:14:42,330 --> 00:14:46,800
automatically through drush doing

00:14:44,070 --> 00:14:50,760
content imports so our deployment

00:14:46,800 --> 00:14:53,370
process was address make file and an

00:14:50,760 --> 00:14:55,290
insulation profile and all we did was

00:14:53,370 --> 00:14:57,510
Rand just make and installed using the

00:14:55,290 --> 00:14:59,220
profile and it enabled everything put

00:14:57,510 --> 00:15:02,049
every configuration into code

00:14:59,220 --> 00:15:04,209
migrated all the content in email the

00:15:02,049 --> 00:15:06,910
right people all of that just using

00:15:04,209 --> 00:15:09,339
dressmaking install profile and it's

00:15:06,910 --> 00:15:11,589
definitely possible it's just it's just

00:15:09,339 --> 00:15:13,809
a matter of getting people knowledgeable

00:15:11,589 --> 00:15:16,839
about using update functions and making

00:15:13,809 --> 00:15:18,850
it easier on themselves and this is

00:15:16,839 --> 00:15:21,249
something that most people know how to

00:15:18,850 --> 00:15:25,480
write an insert statement so might as

00:15:21,249 --> 00:15:29,230
well keep it fairly simple so next step

00:15:25,480 --> 00:15:32,049
is deploying like a pro how do we go

00:15:29,230 --> 00:15:34,359
from writing all this configuration into

00:15:32,049 --> 00:15:36,429
code to actually moving in between the

00:15:34,359 --> 00:15:40,119
barman's you know that's a huge step for

00:15:36,429 --> 00:15:41,649
most people the ideal is your developer

00:15:40,119 --> 00:15:43,869
you know you get that code out there you

00:15:41,649 --> 00:15:46,179
make little changes once or twice a week

00:15:43,869 --> 00:15:49,029
to a client and the rest of the time you

00:15:46,179 --> 00:15:51,429
end up sitting on the beach or on a nice

00:15:49,029 --> 00:15:55,359
rocking chair in the mountains depending

00:15:51,429 --> 00:15:57,879
who you are and the keys are deploying

00:15:55,359 --> 00:16:00,549
via version control that's definitely

00:15:57,879 --> 00:16:02,919
the start don't version control is the

00:16:00,549 --> 00:16:06,759
absolute start for any code going out

00:16:02,919 --> 00:16:10,049
and it needs to be atomic so sdn updates

00:16:06,759 --> 00:16:10,049
out of the question don't use them

00:16:10,860 --> 00:16:15,399
symbolic links in a way to go symbolic

00:16:13,269 --> 00:16:18,160
links can happen immediately we'll look

00:16:15,399 --> 00:16:20,410
at what i mean by that in practice but

00:16:18,160 --> 00:16:23,799
what that means is if you're doing an SD

00:16:20,410 --> 00:16:26,319
an update in the directory that your

00:16:23,799 --> 00:16:28,029
site's hosting what happens when it if

00:16:26,319 --> 00:16:30,129
you get a request between the time the

00:16:28,029 --> 00:16:31,239
update starts and it finishes you're

00:16:30,129 --> 00:16:32,739
going to have different versions of

00:16:31,239 --> 00:16:35,110
files in between and you have absolutely

00:16:32,739 --> 00:16:37,029
no idea what's going to happen what you

00:16:35,110 --> 00:16:40,419
should be doing is doing a new check out

00:16:37,029 --> 00:16:42,579
and just switching siblings so you have

00:16:40,419 --> 00:16:44,529
version 1 and version 2 you should check

00:16:42,579 --> 00:16:46,660
out version 2 and then just point your

00:16:44,529 --> 00:16:48,939
web server to the new version if you do

00:16:46,660 --> 00:16:50,319
an update there's just so much stuff in

00:16:48,939 --> 00:16:52,169
between that can happen if you if you

00:16:50,319 --> 00:16:54,009
take your site down when you do it

00:16:52,169 --> 00:16:56,949
obviously it's a different issue but

00:16:54,009 --> 00:17:00,549
what I want to get to here is a place

00:16:56,949 --> 00:17:02,169
where sites have the zero downtime and

00:17:00,549 --> 00:17:05,079
there's a lot of tools for doing this is

00:17:02,169 --> 00:17:06,970
there's 80 of post commit hooks so when

00:17:05,079 --> 00:17:09,559
you commit to subversion when you commit

00:17:06,970 --> 00:17:12,480
to get that automatically triggers

00:17:09,559 --> 00:17:15,030
you can do that but I don't like writing

00:17:12,480 --> 00:17:17,549
all that stuff in scripts and one long

00:17:15,030 --> 00:17:19,170
post commit took and I think it's kind

00:17:17,549 --> 00:17:20,819
of messy so i choose use jenkins and

00:17:19,170 --> 00:17:25,559
i'll show you a demo that just a second

00:17:20,819 --> 00:17:28,740
and also drush makes deployment so much

00:17:25,559 --> 00:17:31,170
easier so these first two steps are

00:17:28,740 --> 00:17:33,510
getting dressed ready so that actually

00:17:31,170 --> 00:17:35,640
should say up TV so you can actually run

00:17:33,510 --> 00:17:39,030
all those update functions automatically

00:17:35,640 --> 00:17:41,280
with script drush CC so you can clear

00:17:39,030 --> 00:17:45,780
out all the menu all the croft and get

00:17:41,280 --> 00:17:47,910
your new site up and running and jenkins

00:17:45,780 --> 00:17:50,490
most people just call a fancy cron

00:17:47,910 --> 00:17:53,549
that's how most people end up using it

00:17:50,490 --> 00:17:56,130
it's just kind of a really basic tool to

00:17:53,549 --> 00:17:58,049
most people but that's not really the

00:17:56,130 --> 00:17:59,760
power of it the power of is integrating

00:17:58,049 --> 00:18:01,970
with other tools and combining all these

00:17:59,760 --> 00:18:04,320
results like i'll show you guys a minute

00:18:01,970 --> 00:18:06,059
there's coupled it you can trigger it by

00:18:04,320 --> 00:18:08,790
pulling the source code management

00:18:06,059 --> 00:18:11,190
system so for instance every time you

00:18:08,790 --> 00:18:12,600
commit to version control it should

00:18:11,190 --> 00:18:15,450
actually be deploying to your

00:18:12,600 --> 00:18:18,450
integration environment or every hour

00:18:15,450 --> 00:18:20,070
every night every 12 hours whatever this

00:18:18,450 --> 00:18:21,419
way you don't have to worry about oh I

00:18:20,070 --> 00:18:23,040
made new changes let me go my

00:18:21,419 --> 00:18:25,049
integration environment and pull all

00:18:23,040 --> 00:18:26,970
that stuff together it can do that

00:18:25,049 --> 00:18:29,250
automatically for you and I'll show

00:18:26,970 --> 00:18:33,780
integration with two tools selenium and

00:18:29,250 --> 00:18:35,549
jmeter everyone what jmeter is ok it's

00:18:33,780 --> 00:18:38,250
basically a load testing till it's

00:18:35,549 --> 00:18:40,740
written in Java but it's actually

00:18:38,250 --> 00:18:42,390
supports a distributed architecture so

00:18:40,740 --> 00:18:44,460
you can actually have a jmeter head and

00:18:42,390 --> 00:18:46,890
like five or ten jmeter clients and

00:18:44,460 --> 00:18:49,679
really hit thousands and thousands of

00:18:46,890 --> 00:18:51,960
concurrent requests doing that method I

00:18:49,679 --> 00:18:54,390
won't actually show demo of that I'll

00:18:51,960 --> 00:18:55,650
show a demo selenium but Jay meters are

00:18:54,390 --> 00:18:58,200
really good to it it has a learning

00:18:55,650 --> 00:19:00,120
curve the best way to get started with

00:18:58,200 --> 00:19:03,120
that is Jacob sing one of the engineers

00:19:00,120 --> 00:19:05,790
at aqua he acts as a github account she

00:19:03,120 --> 00:19:09,540
just go get hub calm / jacob sing he has

00:19:05,790 --> 00:19:11,880
a jmeter test a jmeter test there just

00:19:09,540 --> 00:19:13,679
for drupal specifically that has some

00:19:11,880 --> 00:19:16,679
pre-built functions for like log into a

00:19:13,679 --> 00:19:18,720
drupal site log out go to node 1 that

00:19:16,679 --> 00:19:20,850
kind of stuff so everything I do is

00:19:18,720 --> 00:19:21,590
always start off of that so you're not

00:19:20,850 --> 00:19:23,539
familiar

00:19:21,590 --> 00:19:25,580
where you started definitely go there

00:19:23,539 --> 00:19:35,770
and that'll at least kind of get you

00:19:25,580 --> 00:19:38,870
familiar as soon as quick as possible so

00:19:35,770 --> 00:19:41,600
part of my the project here that I

00:19:38,870 --> 00:19:45,049
didn't quite finish up was I wanted to

00:19:41,600 --> 00:19:47,750
have a system work for jmeter if

00:19:45,049 --> 00:19:50,179
response times were above a certain time

00:19:47,750 --> 00:19:51,799
it would stop the deployment so in other

00:19:50,179 --> 00:19:53,630
words if you introduce something your

00:19:51,799 --> 00:19:55,789
code that's a massive regression

00:19:53,630 --> 00:19:59,450
performance wise it would actually stop

00:19:55,789 --> 00:20:03,110
it from even going forward another way

00:19:59,450 --> 00:20:06,200
we use it at aqua a lot is will actually

00:20:03,110 --> 00:20:08,120
run it across a site and see if varnish

00:20:06,200 --> 00:20:09,799
is working or not because jmeter is

00:20:08,120 --> 00:20:13,429
really good at like parsing headers so

00:20:09,799 --> 00:20:15,140
we can crawl a whole site and see if

00:20:13,429 --> 00:20:17,120
there's weird cookies in there that's

00:20:15,140 --> 00:20:19,460
not letting it be cached that's another

00:20:17,120 --> 00:20:21,610
way we use it I've used it had

00:20:19,460 --> 00:20:23,929
performance audits at clients and done

00:20:21,610 --> 00:20:26,360
thousands and thousands of concurrent

00:20:23,929 --> 00:20:30,110
requests and just to see what happens

00:20:26,360 --> 00:20:33,470
this site it's it's a really great tool

00:20:30,110 --> 00:20:36,559
I did a presentation at Atlanta Drupal 6

00:20:33,470 --> 00:20:42,890
months ago I think on Drupal performance

00:20:36,559 --> 00:20:45,500
and I had like a 64 128 Meg vm set up

00:20:42,890 --> 00:20:47,360
and using jmeter I was getting like two

00:20:45,500 --> 00:20:50,870
thousand requests a second using varnish

00:20:47,360 --> 00:20:52,460
and it's jmeter can handle all that

00:20:50,870 --> 00:20:54,649
stuff and really really get there

00:20:52,460 --> 00:20:57,409
without going to something like sosta or

00:20:54,649 --> 00:20:59,360
Gomez or which is really cost

00:20:57,409 --> 00:21:00,830
prohibitive for most developers I mean

00:20:59,360 --> 00:21:04,010
talking about four or five fingers for

00:21:00,830 --> 00:21:07,450
you know a few months of testing but

00:21:04,010 --> 00:21:10,100
jmeter gets you most of the way there

00:21:07,450 --> 00:21:13,669
and also running commands only on

00:21:10,100 --> 00:21:16,780
success and this goes to these Adam the

00:21:13,669 --> 00:21:18,790
city at Thomas city am I

00:21:16,780 --> 00:21:21,400
if that's a word or how to say it or I'm

00:21:18,790 --> 00:21:23,200
just making stuff up on the floor but

00:21:21,400 --> 00:21:26,020
basically if it fails these tests they

00:21:23,200 --> 00:21:28,090
shouldn't deploy that's the point of the

00:21:26,020 --> 00:21:29,830
point is you shouldn't deploy something

00:21:28,090 --> 00:21:32,530
hoping at a work and then it doesn't

00:21:29,830 --> 00:21:36,940
work if it does that then you've kind of

00:21:32,530 --> 00:21:38,740
broken the whole system so any questions

00:21:36,940 --> 00:21:40,090
conceptually prefer go on the demo the

00:21:38,740 --> 00:21:42,640
demo is definitely the meat of it but I

00:21:40,090 --> 00:21:44,320
want to make sure one has a good basic

00:21:42,640 --> 00:21:47,650
understanding of kind of where I'm going

00:21:44,320 --> 00:21:50,580
here any questions on deployment getting

00:21:47,650 --> 00:21:54,730
stuff into code using dress for that

00:21:50,580 --> 00:22:00,610
okay all right so let's take a look at

00:21:54,730 --> 00:22:04,720
the demo so how many guys have actually

00:22:00,610 --> 00:22:09,480
seen Jenkins before use Jenkins so three

00:22:04,720 --> 00:22:09,480
for three and a half okay

00:22:31,020 --> 00:22:41,230
sorry let me mirror my screens here make

00:22:33,730 --> 00:22:43,510
this all easier for me there we go so

00:22:41,230 --> 00:22:45,490
Jenkins is a job based continuous

00:22:43,510 --> 00:23:02,140
integration tool so you configure these

00:22:45,490 --> 00:23:05,789
different jobs I can hold on my laptop

00:23:02,140 --> 00:23:10,590
if everyone gets real close it's our

00:23:05,789 --> 00:23:10,590
it's not like big TVs and not projectors

00:23:12,210 --> 00:23:17,890
okay all right so Jenkins is it's a

00:23:16,120 --> 00:23:20,500
java-based tool so in a lot of cases

00:23:17,890 --> 00:23:21,880
it's not necessarily PHP friendly

00:23:20,500 --> 00:23:27,520
sometimes you really have to force it in

00:23:21,880 --> 00:23:29,169
there but it but it is shell friendly so

00:23:27,520 --> 00:23:31,779
if you know how to write some command

00:23:29,169 --> 00:23:35,350
line scripts you can integrate it just

00:23:31,779 --> 00:23:41,850
as easily as just as easy as a job of

00:23:35,350 --> 00:23:41,850
building hopefully this will hold up

00:23:47,410 --> 00:23:52,600
I'm not good at vocal demo I'm not that

00:23:50,090 --> 00:23:52,600
good of a singer

00:24:03,740 --> 00:24:10,700
alright I'll work fast all right so you

00:24:08,000 --> 00:24:12,440
create individual jobs they run based on

00:24:10,700 --> 00:24:14,720
what you tell whether it's periodic or

00:24:12,440 --> 00:24:17,270
based on some sort of trigger it knows

00:24:14,720 --> 00:24:19,250
successes and failures based on those it

00:24:17,270 --> 00:24:23,420
can contact the right people it can stop

00:24:19,250 --> 00:24:25,490
other dependent jobs from running gives

00:24:23,420 --> 00:24:28,040
you nice little weather clouds of the

00:24:25,490 --> 00:24:30,620
status of them and just give you a

00:24:28,040 --> 00:24:32,900
really nice quick overview of the full

00:24:30,620 --> 00:24:37,490
status of your site so in my case I've

00:24:32,900 --> 00:24:39,830
set up three different jobs the simplest

00:24:37,490 --> 00:24:42,250
job we'll look at is the integration

00:24:39,830 --> 00:24:42,250
part

00:24:55,750 --> 00:25:01,220
so the goal here basically i'm checking

00:24:58,640 --> 00:25:02,780
out from get so this is my whole site

00:25:01,220 --> 00:25:04,400
for my case i just put on drupal.org

00:25:02,780 --> 00:25:07,460
obviously you're probably gonna have

00:25:04,400 --> 00:25:13,040
your own version control system so i

00:25:07,460 --> 00:25:15,050
check it out from get and you do a

00:25:13,040 --> 00:25:17,510
sequel see so what that does it actually

00:25:15,050 --> 00:25:19,850
this is some more advanced rush stuff

00:25:17,510 --> 00:25:22,040
that's kind of part of them part of

00:25:19,850 --> 00:25:24,470
what's necessary here so it takes your

00:25:22,040 --> 00:25:26,750
prod atta bass and drops it down to your

00:25:24,470 --> 00:25:28,940
dev environment so that way

00:25:26,750 --> 00:25:30,380
automatically you get whatever's on

00:25:28,940 --> 00:25:31,760
production all the latest comment and

00:25:30,380 --> 00:25:33,730
all the ladies settings you know what

00:25:31,760 --> 00:25:36,650
this is going to look like on production

00:25:33,730 --> 00:25:37,700
also i'm going to run update DB which is

00:25:36,650 --> 00:25:39,380
going to run any of those update

00:25:37,700 --> 00:25:42,140
functions i have so it's going to take

00:25:39,380 --> 00:25:43,970
production bring it down run any of

00:25:42,140 --> 00:25:46,760
those scripts i have to bring it to the

00:25:43,970 --> 00:25:50,480
state that will be there and then i do

00:25:46,760 --> 00:25:53,600
just I always do CC all update DB

00:25:50,480 --> 00:25:56,960
supposedly clears the cache but you can

00:25:53,600 --> 00:25:59,120
never clear the cache enough and what

00:25:56,960 --> 00:26:02,330
this does it actually pulls the source

00:25:59,120 --> 00:26:04,370
commando system so this is cron language

00:26:02,330 --> 00:26:08,860
everyone's familiar that so basically

00:26:04,370 --> 00:26:11,930
all stars means every minute it'll scan

00:26:08,860 --> 00:26:13,430
so if there if anyone commits a change

00:26:11,930 --> 00:26:15,080
the version control this will

00:26:13,430 --> 00:26:18,620
automatically pick that up and do this

00:26:15,080 --> 00:26:21,020
integration more often you'll see people

00:26:18,620 --> 00:26:24,100
do stuff like this where it's every four

00:26:21,020 --> 00:26:25,940
hours or every two hours or every night

00:26:24,100 --> 00:26:28,760
something like that that's that's

00:26:25,940 --> 00:26:30,470
probably more common but you can do this

00:26:28,760 --> 00:26:32,030
and always have a completely up-to-date

00:26:30,470 --> 00:26:33,770
version if you have a bunch of people

00:26:32,030 --> 00:26:37,310
committing this is obviously going to

00:26:33,770 --> 00:26:40,190
collide and be almost worthless but so

00:26:37,310 --> 00:26:41,690
this is just a really simple way to just

00:26:40,190 --> 00:26:43,730
set this up once and then your

00:26:41,690 --> 00:26:47,560
integration environment is just it's

00:26:43,730 --> 00:26:47,560
always there it's always the right state

00:26:49,940 --> 00:26:57,289
and Jenkins now Jenkins has all kinds

00:26:55,519 --> 00:26:59,659
they can send email notifications they

00:26:57,289 --> 00:27:03,340
can wrap up what happened into a log and

00:26:59,659 --> 00:27:06,529
send it out so for instance if i look at

00:27:03,340 --> 00:27:07,759
my most recent build here you can see it

00:27:06,529 --> 00:27:09,889
gives me a revision number that have

00:27:07,759 --> 00:27:12,879
pulled from and I look at console output

00:27:09,889 --> 00:27:15,590
and it actually stores everything it did

00:27:12,879 --> 00:27:18,820
so its stores this was a get check out

00:27:15,590 --> 00:27:21,200
this was the sequel sync I did sanitize

00:27:18,820 --> 00:27:22,970
you guys I don't know that's a really

00:27:21,200 --> 00:27:25,730
nice command what actually does is takes

00:27:22,970 --> 00:27:28,460
your database and scrubs it of usernames

00:27:25,730 --> 00:27:31,309
and passwords and email addresses so

00:27:28,460 --> 00:27:33,590
then between environments you never have

00:27:31,309 --> 00:27:35,990
to worry about you know having user

00:27:33,590 --> 00:27:37,399
information on your laptop or anything

00:27:35,990 --> 00:27:40,610
like that it's like you it just says

00:27:37,399 --> 00:27:43,429
user 123456 you don't care it doesn't

00:27:40,610 --> 00:27:46,549
really matter going down here and update

00:27:43,429 --> 00:27:48,769
DB you see all the dress output no

00:27:46,549 --> 00:27:50,600
database updates required keeps going if

00:27:48,769 --> 00:27:52,580
it had output it would obviously print

00:27:50,600 --> 00:27:56,149
that out finally there's a clear cache

00:27:52,580 --> 00:27:58,039
and finish the success this is a perfect

00:27:56,149 --> 00:28:01,549
example of why drush is much more than

00:27:58,039 --> 00:28:04,429
just a fancy cron system and it it's

00:28:01,549 --> 00:28:08,200
probably maybe 30 minutes of effort it's

00:28:04,429 --> 00:28:08,200
really really simple way to do it

00:28:13,070 --> 00:28:20,160
so the next part of this is so how many

00:28:17,220 --> 00:28:24,000
guys have heard of selenium how many

00:28:20,160 --> 00:28:31,110
guys have actually used it okay so half

00:28:24,000 --> 00:28:33,330
a person so who does QA by here who does

00:28:31,110 --> 00:28:39,750
like unit testing functional testing by

00:28:33,330 --> 00:28:47,010
hand most people who hates it you don't

00:28:39,750 --> 00:28:50,280
mind it really okay you have much more

00:28:47,010 --> 00:28:55,410
patience than i did all the rest of you

00:28:50,280 --> 00:28:57,570
can have hot sauce so what's linea ms is

00:28:55,410 --> 00:28:59,310
it's basically a tool that allows you to

00:28:57,570 --> 00:29:02,910
click through visually through an

00:28:59,310 --> 00:29:05,640
interface and create a task that way so

00:29:02,910 --> 00:29:06,840
what it does is it you do it once you

00:29:05,640 --> 00:29:08,640
click through you go through your six

00:29:06,840 --> 00:29:10,620
tabs you see what all happens and then

00:29:08,640 --> 00:29:13,950
you save that test and then you can run

00:29:10,620 --> 00:29:16,290
it any time in the future sauce labs is

00:29:13,950 --> 00:29:20,910
actually a company co-founded by the

00:29:16,290 --> 00:29:22,260
creator of of selenium so I definitely

00:29:20,910 --> 00:29:27,000
have some parallels to kind of help

00:29:22,260 --> 00:29:30,000
acquiesce setup but just to give you an

00:29:27,000 --> 00:29:33,810
idea real quick of what their product is

00:29:30,000 --> 00:29:35,610
is so here's the boring factor this is

00:29:33,810 --> 00:29:38,010
every job that's run how long it took

00:29:35,610 --> 00:29:40,410
wet environment on notice I'm running

00:29:38,010 --> 00:29:43,590
stuff on windows 2003 and Safari windows

00:29:40,410 --> 00:29:47,730
2008 and ie I can run it everything from

00:29:43,590 --> 00:29:51,840
IE six to nine Firefox 324 Safari 325

00:29:47,730 --> 00:29:53,640
all kinds of different stuff so then

00:29:51,840 --> 00:29:58,290
what I can do is I good about you last

00:29:53,640 --> 00:30:00,630
year login tehsils run and you see here

00:29:58,290 --> 00:30:03,330
has all kinds of information it was

00:30:00,630 --> 00:30:06,090
completed here it shows every step that

00:30:03,330 --> 00:30:09,990
was actually run it's green because it

00:30:06,090 --> 00:30:13,440
passed it takes a screenshot at every

00:30:09,990 --> 00:30:15,850
single point in time so you can see it

00:30:13,440 --> 00:30:18,610
just added the test block to the name

00:30:15,850 --> 00:30:20,710
so not only can you just make sure it's

00:30:18,610 --> 00:30:22,570
working but actually gives you the

00:30:20,710 --> 00:30:24,280
resources to know what's working at what

00:30:22,570 --> 00:30:27,070
point it's stopped looking right it's

00:30:24,280 --> 00:30:29,980
really impressive and it combines all

00:30:27,070 --> 00:30:33,250
that together so click one button and

00:30:29,980 --> 00:30:37,210
now you have a full video of that whole

00:30:33,250 --> 00:30:40,870
test which to me this was definite while

00:30:37,210 --> 00:30:42,370
factor emails this takes QA to a whole

00:30:40,870 --> 00:30:44,620
nother level when you can actually look

00:30:42,370 --> 00:30:46,360
at something that failed and reference

00:30:44,620 --> 00:30:48,010
it and send it to designer and send it

00:30:46,360 --> 00:30:52,270
to a client so that they know exactly

00:30:48,010 --> 00:30:55,539
what happened so you can say this is the

00:30:52,270 --> 00:30:56,890
45 in Windows it was probably the

00:30:55,539 --> 00:31:00,850
weirdest combination I could find so I

00:30:56,890 --> 00:31:03,250
used it and obviously that kind of

00:31:00,850 --> 00:31:05,640
skipped through a little bit fast but it

00:31:03,250 --> 00:31:08,650
went through the process of putting in

00:31:05,640 --> 00:31:10,390
information into and this is what the

00:31:08,650 --> 00:31:12,370
whole language looks like it's really

00:31:10,390 --> 00:31:14,679
easy understand it has drivers for Ruby

00:31:12,370 --> 00:31:18,700
if you want to write in Ruby Python PHP

00:31:14,679 --> 00:31:20,169
Java Sea everything anything you can

00:31:18,700 --> 00:31:22,299
want I think I was like three flavors

00:31:20,169 --> 00:31:24,039
for Ruby even but this is what the hook

00:31:22,299 --> 00:31:26,860
the whole syntax looks like you do

00:31:24,039 --> 00:31:29,980
really even more advanced XPath stuff to

00:31:26,860 --> 00:31:33,130
see what exists so basically I create a

00:31:29,980 --> 00:31:35,230
test account tried to login with it if

00:31:33,130 --> 00:31:37,360
it came back and now I have a my account

00:31:35,230 --> 00:31:39,340
link which there's probably a better way

00:31:37,360 --> 00:31:42,220
to strictly check if they logged in but

00:31:39,340 --> 00:31:45,850
that's efficient enough shuts on the

00:31:42,220 --> 00:31:51,880
server and there it is super super

00:31:45,850 --> 00:31:55,030
simple so that's cool but soft scout I

00:31:51,880 --> 00:31:57,880
think is even cooler so how many go-sees

00:31:55,030 --> 00:32:00,429
like browser shots or browser labs from

00:31:57,880 --> 00:32:05,169
Adobe or everyone's pricing or those

00:32:00,429 --> 00:32:07,360
tools this is even better so which

00:32:05,169 --> 00:32:12,730
browser do you want to run in which

00:32:07,360 --> 00:32:13,900
operating system and you say I really

00:32:12,730 --> 00:32:15,990
don't want to click this but I'm going

00:32:13,900 --> 00:32:15,990
to

00:32:20,580 --> 00:32:25,870
you just click the browser you want

00:32:23,160 --> 00:32:28,420
loads it up in a cloud machine that's it

00:32:25,870 --> 00:32:32,410
all up and you have a browser now of

00:32:28,420 --> 00:32:33,850
whatever you wanted so not only so you

00:32:32,410 --> 00:32:35,200
don't have to run for I use on your

00:32:33,850 --> 00:32:38,530
receipt don't have to run virtual

00:32:35,200 --> 00:32:47,200
changing often any of that stuff and I

00:32:38,530 --> 00:32:49,900
can just browse anything I want here so

00:32:47,200 --> 00:32:51,880
I can browse to the side intestine and

00:32:49,900 --> 00:32:59,650
click around don't me want to know what

00:32:51,880 --> 00:33:01,840
this is going to look like no this is

00:32:59,650 --> 00:33:05,940
just browsing just to see what happens

00:33:01,840 --> 00:33:05,940
I'll show creating the tests after this

00:33:08,100 --> 00:33:17,710
so you see I have their PNG transparency

00:33:12,520 --> 00:33:23,380
needs that but you can use it as a full

00:33:17,710 --> 00:33:26,140
browser it's a little slow because I'm

00:33:23,380 --> 00:33:28,810
over Bluetooth over my phone it's not

00:33:26,140 --> 00:33:31,750
the service just me but you can interact

00:33:28,810 --> 00:33:33,040
with it as a complete browser and

00:33:31,750 --> 00:33:34,480
they're looking and they're expanding

00:33:33,040 --> 00:33:38,620
this into more and more browsers in the

00:33:34,480 --> 00:33:39,970
future but as far as I'm concerned I can

00:33:38,620 --> 00:33:42,490
do it in Avery I you version every

00:33:39,970 --> 00:33:44,740
Firefox version and opera and Safari I

00:33:42,490 --> 00:33:50,560
i'm not sure what more I would need them

00:33:44,740 --> 00:33:55,480
there so those are kind of their two key

00:33:50,560 --> 00:33:58,110
focuses so that's how you actually use

00:33:55,480 --> 00:34:00,700
the test how do you create a test right

00:33:58,110 --> 00:34:02,890
so there's a tool called selenium ide

00:34:00,700 --> 00:34:06,340
which is sort of the open source tool to

00:34:02,890 --> 00:34:09,429
use which works fine I prefer actually

00:34:06,340 --> 00:34:12,370
salsas tool which they're both firefox

00:34:09,429 --> 00:34:14,169
extensions so essentially turn on

00:34:12,370 --> 00:34:16,270
firefox you open up the plug-in that

00:34:14,169 --> 00:34:18,970
becomes a proxy anything you click shows

00:34:16,270 --> 00:34:20,740
up anything you type in shows up you

00:34:18,970 --> 00:34:23,050
don't have to write all that language

00:34:20,740 --> 00:34:25,800
you saw I didn't write any of that I

00:34:23,050 --> 00:34:25,800
don't you don't need

00:34:30,750 --> 00:34:39,700
so what I can actually do here is going

00:34:34,000 --> 00:34:41,560
to launch the sauce builder and you can

00:34:39,700 --> 00:34:42,940
see do I want to open a test file open

00:34:41,560 --> 00:34:45,099
to Tessalit or start a new one they'll

00:34:42,940 --> 00:34:46,990
start a new one on Google you can start

00:34:45,099 --> 00:34:49,530
at any domain you want you can see I

00:34:46,990 --> 00:34:52,419
opened it wait for the page to load

00:34:49,530 --> 00:35:01,710
let's just search for Drupal k up South

00:34:52,419 --> 00:35:01,710
Carolina and

00:35:03,800 --> 00:35:12,450
you can see it captured all that i typed

00:35:08,820 --> 00:35:16,500
in into the cubox that text i press

00:35:12,450 --> 00:35:20,340
enter which is 13 and then I clicked on

00:35:16,500 --> 00:35:22,020
the first link there with a site like

00:35:20,340 --> 00:35:25,410
drupal some or a site like Google

00:35:22,020 --> 00:35:29,160
sometimes it just doesn't you know it's

00:35:25,410 --> 00:35:32,310
not exactly too kind to you let's see it

00:35:29,160 --> 00:35:34,110
this is create a whole test where it

00:35:32,310 --> 00:35:36,540
went to google and search for drupalcamp

00:35:34,110 --> 00:35:38,310
i clicked inner and i clicked on the

00:35:36,540 --> 00:35:41,190
link this is drupalcamp south carolina

00:35:38,310 --> 00:35:43,410
and now it brings us up and i can test

00:35:41,190 --> 00:35:45,750
that i mean you can even take this to

00:35:43,410 --> 00:35:48,000
the point of does my website show up on

00:35:45,750 --> 00:35:50,820
the first page of Google I mean this is

00:35:48,000 --> 00:35:52,440
fully like browse they don't like using

00:35:50,820 --> 00:35:54,960
web browser automation because it can't

00:35:52,440 --> 00:35:57,690
do stuff like saving a page and it can't

00:35:54,960 --> 00:36:02,160
do full browser automation but it can

00:35:57,690 --> 00:36:04,640
use full user automation and when you're

00:36:02,160 --> 00:36:06,600
done with that all you just save it and

00:36:04,640 --> 00:36:10,710
you can see these are all the different

00:36:06,600 --> 00:36:13,350
formats you can use so PHP two versions

00:36:10,710 --> 00:36:20,010
of Ruby two versions of Java you can

00:36:13,350 --> 00:36:22,560
find a way to use it so and then you

00:36:20,010 --> 00:36:24,600
just click it in a download but there's

00:36:22,560 --> 00:36:31,980
no typing of code at all right there

00:36:24,600 --> 00:36:34,910
doesn't have to be I should say so just

00:36:31,980 --> 00:36:34,910
to show you guys an example

00:36:50,869 --> 00:36:57,180
so I put mine in Ruby I think it's easy

00:36:54,600 --> 00:36:59,190
enough to read one way or another so

00:36:57,180 --> 00:37:00,780
this is exactly what export again I

00:36:59,190 --> 00:37:04,230
didn't write any code to do this I don't

00:37:00,780 --> 00:37:06,930
have to touch it it does a setup which

00:37:04,230 --> 00:37:10,350
this is online the sauce on demand stuff

00:37:06,930 --> 00:37:12,980
what browser version use what OS to use

00:37:10,350 --> 00:37:15,600
what the URL starting point is and

00:37:12,980 --> 00:37:18,030
contact their servers so selenium works

00:37:15,600 --> 00:37:19,890
in a distributed way you can run it on a

00:37:18,030 --> 00:37:23,280
remote system which is kind of the

00:37:19,890 --> 00:37:26,160
beauty of how this works setting it up

00:37:23,280 --> 00:37:28,800
locally involves installing agents so

00:37:26,160 --> 00:37:30,630
that the selenium server can actually

00:37:28,800 --> 00:37:33,060
open a browser and literally move their

00:37:30,630 --> 00:37:36,690
mouse around and click stuff it's just

00:37:33,060 --> 00:37:38,640
kind of a pain to set up and this is

00:37:36,690 --> 00:37:41,010
almost identical to what you saw I mean

00:37:38,640 --> 00:37:45,480
this is all perfectly readable open up

00:37:41,010 --> 00:37:47,760
the route of self 2011 tests put in

00:37:45,480 --> 00:37:51,390
these values submit if my coexist you're

00:37:47,760 --> 00:37:53,820
good so you can prob exported any

00:37:51,390 --> 00:37:57,650
language you want you can read it just

00:37:53,820 --> 00:38:00,960
the same so this is just a perfect

00:37:57,650 --> 00:38:02,220
perfect simplicity of an API you don't

00:38:00,960 --> 00:38:03,990
have to create a bunch of different data

00:38:02,220 --> 00:38:05,700
structures and passing them around I

00:38:03,990 --> 00:38:09,119
mean that's I think that's pretty

00:38:05,700 --> 00:38:11,850
readable for anyone this even dabbled in

00:38:09,119 --> 00:38:14,310
code before and for people to haven't

00:38:11,850 --> 00:38:17,670
that you can actually export it in HTML

00:38:14,310 --> 00:38:19,800
format even and it can run straight at

00:38:17,670 --> 00:38:22,170
HTML so you obviously can't do a lot of

00:38:19,800 --> 00:38:23,910
advanced stuff but that's I mean that's

00:38:22,170 --> 00:38:25,740
something you can actually open in a

00:38:23,910 --> 00:38:28,109
browser and it renders is like a table

00:38:25,740 --> 00:38:30,570
and you can just see what the whole test

00:38:28,109 --> 00:38:33,030
is going to be even outside of code so

00:38:30,570 --> 00:38:37,350
they've really thought that 10 really

00:38:33,030 --> 00:38:40,230
really well ok so back to how that

00:38:37,350 --> 00:38:43,590
integrates with Jenkins so here's the

00:38:40,230 --> 00:38:47,770
the big job i set up so i have a

00:38:43,590 --> 00:38:52,750
deployed job so first of all

00:38:47,770 --> 00:38:54,940
these are the jmeter statistics so this

00:38:52,750 --> 00:38:58,240
is attacking no errors and it's actually

00:38:54,940 --> 00:39:01,900
charting response this is right to say

00:38:58,240 --> 00:39:02,920
what a pc for anyone that doesn't pretty

00:39:01,900 --> 00:39:05,830
when it's not sure if they should have

00:39:02,920 --> 00:39:10,120
any pc install it or not it increase my

00:39:05,830 --> 00:39:11,890
load time about thirty percent so you

00:39:10,120 --> 00:39:15,220
can see it actually charts this out as

00:39:11,890 --> 00:39:18,760
you go and the configuration of this is

00:39:15,220 --> 00:39:20,620
a little more advanced sexy let's take a

00:39:18,760 --> 00:39:25,240
look at running it first to give you an

00:39:20,620 --> 00:39:26,980
idea so I give it parameter so the first

00:39:25,240 --> 00:39:28,360
thing I do is do I want to deploy it to

00:39:26,980 --> 00:39:30,730
stage you do I wouldn't employ it to

00:39:28,360 --> 00:39:33,730
production I'm going to deploy to

00:39:30,730 --> 00:39:35,860
staging obviously and I've went ahead

00:39:33,730 --> 00:39:37,990
and created some tags and my git

00:39:35,860 --> 00:39:40,150
repository or subversion however you

00:39:37,990 --> 00:39:42,490
want to use it and I have a bunch of

00:39:40,150 --> 00:39:47,530
stable tags so I'm going to deploy the

00:39:42,490 --> 00:39:51,550
stable tag into version into my staging

00:39:47,530 --> 00:39:53,800
environment and if you look at what it's

00:39:51,550 --> 00:39:55,480
doing here what I have I'll show you the

00:39:53,800 --> 00:39:58,660
other scripts or maybe i'll post more

00:39:55,480 --> 00:40:00,940
independent I have a setup script that

00:39:58,660 --> 00:40:02,950
actually copies the right code into a

00:40:00,940 --> 00:40:04,990
test environment so I actually have a

00:40:02,950 --> 00:40:08,440
another environment sitting out there

00:40:04,990 --> 00:40:10,210
just for testing so what this does this

00:40:08,440 --> 00:40:12,250
allows me to be completely atomic I can

00:40:10,210 --> 00:40:14,230
deploy to this test environment run all

00:40:12,250 --> 00:40:16,510
my tests on that make sure it's fine and

00:40:14,230 --> 00:40:20,650
then just switch something over so it's

00:40:16,510 --> 00:40:23,470
no wonder test now at staging so you can

00:40:20,650 --> 00:40:26,320
see I set it up I don't know why that's

00:40:23,470 --> 00:40:28,750
there still works fine pretend you're

00:40:26,320 --> 00:40:31,360
not seeing the fatal obviously isn't so

00:40:28,750 --> 00:40:34,930
fatal I'm doing the clear cache against

00:40:31,360 --> 00:40:37,180
equal sing sanitize that'll take just a

00:40:34,930 --> 00:40:39,400
second next I'll drop in the selenium

00:40:37,180 --> 00:40:41,680
and I have three tests running one is

00:40:39,400 --> 00:40:43,960
checking user login one is checking to

00:40:41,680 --> 00:40:46,510
make sure the note i created is actually

00:40:43,960 --> 00:40:48,250
in the menu and actually exists and the

00:40:46,510 --> 00:40:50,830
third one just checks to see if a site

00:40:48,250 --> 00:40:53,980
weather is there just as a very very

00:40:50,830 --> 00:40:55,670
simple example so we'll let this run for

00:40:53,980 --> 00:40:59,280
just

00:40:55,670 --> 00:41:04,680
so who wants some hot sauce its habanero

00:40:59,280 --> 00:41:21,090
hot sauce I haven't tried it right but

00:41:04,680 --> 00:41:22,710
you don't but you like you a yet and you

00:41:21,090 --> 00:41:25,020
can actually you can actually make

00:41:22,710 --> 00:41:26,610
individual tests public so you can

00:41:25,020 --> 00:41:37,220
actually flip it over make it public and

00:41:26,610 --> 00:41:37,220
send it exactly yeah once more hot sauce

00:41:41,980 --> 00:41:48,730
Edgar's are completely completely

00:41:45,620 --> 00:41:53,780
different two-leggers for deploying

00:41:48,730 --> 00:41:58,010
drupal level changes I'm not a big fan

00:41:53,780 --> 00:41:59,480
of agar I'd be interested to talk about

00:41:58,010 --> 00:42:02,300
that but I think from my perspective

00:41:59,480 --> 00:42:03,740
agar automates at the drupal level where

00:42:02,300 --> 00:42:06,440
this sort of just requires you to have

00:42:03,740 --> 00:42:09,440
the development practices and maintain

00:42:06,440 --> 00:42:11,450
it a bit more at the system level which

00:42:09,440 --> 00:42:13,900
is just where I'm more comfortable so

00:42:11,450 --> 00:42:17,720
it's possibly personal preference but

00:42:13,900 --> 00:42:19,820
some of this stuff is not possible agar

00:42:17,720 --> 00:42:22,700
like the selenium test the jmeter test

00:42:19,820 --> 00:42:24,950
it's it's just a drew sort of a subset

00:42:22,700 --> 00:42:27,440
that's a very focused and for what it's

00:42:24,950 --> 00:42:29,570
focused on it's good this is just more

00:42:27,440 --> 00:42:32,630
of a general purpose so i use jenkins

00:42:29,570 --> 00:42:35,560
for non PHP stuff to any other hot sauce

00:42:32,630 --> 00:42:35,560
recipients

00:42:42,270 --> 00:42:49,000
alright so you can see I have my session

00:42:46,930 --> 00:42:50,680
info test which is that note I created

00:42:49,000 --> 00:42:53,350
just to make sure it exists started

00:42:50,680 --> 00:43:00,670
finished 40 seconds site logo make sure

00:42:53,350 --> 00:43:03,820
the logo exists my lovely assistant will

00:43:00,670 --> 00:43:07,420
be hearing about in my user login test

00:43:03,820 --> 00:43:09,070
just the same it passes all that you can

00:43:07,420 --> 00:43:10,510
say one test two assertions zero

00:43:09,070 --> 00:43:12,400
failures your photos your failures

00:43:10,510 --> 00:43:18,970
that's what you want to see now attacks

00:43:12,400 --> 00:43:20,410
you're running a jmeter test and like I

00:43:18,970 --> 00:43:22,300
mentioned jmeter can be used for

00:43:20,410 --> 00:43:23,560
anything from checking response times

00:43:22,300 --> 00:43:26,620
make sure there's no performance

00:43:23,560 --> 00:43:29,050
degradation to checking headers are

00:43:26,620 --> 00:43:31,330
being set correctly make sure redirects

00:43:29,050 --> 00:43:33,730
are happening right more of the more at

00:43:31,330 --> 00:43:35,470
the like HTTP like protocol level

00:43:33,730 --> 00:43:39,640
whereas selenium is definitely more at

00:43:35,470 --> 00:43:50,310
the browser level anyone else want a hot

00:43:39,640 --> 00:43:50,310
sauce thing going last one good timing

00:43:53,079 --> 00:43:58,400
alright so hopefully that will finish it

00:43:56,480 --> 00:44:02,720
just like so basically what it's doing

00:43:58,400 --> 00:44:04,569
now is jmeter has to use camped java

00:44:02,720 --> 00:44:07,369
whatever i don't ask questions anymore

00:44:04,569 --> 00:44:08,869
but if you look on the actual plugin

00:44:07,369 --> 00:44:11,630
page there's a template that you just

00:44:08,869 --> 00:44:13,040
change a few values in so I haven't ran

00:44:11,630 --> 00:44:15,260
in an script to probably five or six

00:44:13,040 --> 00:44:18,559
years but it was pretty easy just modify

00:44:15,260 --> 00:44:20,839
them and what's really nice is these jot

00:44:18,559 --> 00:44:22,849
these jmeter scripts not only does it

00:44:20,839 --> 00:44:25,430
run the script and actually does it real

00:44:22,849 --> 00:44:27,319
time but there's a plugin for Jenkins

00:44:25,430 --> 00:44:29,240
that actually processes as after the

00:44:27,319 --> 00:44:32,240
fact and creates HTML reports out of

00:44:29,240 --> 00:44:36,920
them so it actually is making a full

00:44:32,240 --> 00:44:38,660
test suite guys here we go so it's

00:44:36,920 --> 00:44:40,690
extremely test plan which is based off

00:44:38,660 --> 00:44:44,030
of Jason Jacob sings like I mentioned

00:44:40,690 --> 00:44:47,319
which i think is doing like 2,000

00:44:44,030 --> 00:44:49,430
anonymous requests is doing 200

00:44:47,319 --> 00:44:51,230
authenticated request and 200 more

00:44:49,430 --> 00:44:52,760
authenticated request and there's

00:44:51,230 --> 00:44:54,890
varnish sitting in front of the

00:44:52,760 --> 00:44:57,109
anonymous request so you can really see

00:44:54,890 --> 00:45:03,200
where each different jobs actually

00:44:57,109 --> 00:45:06,980
working while we're waiting on that to

00:45:03,200 --> 00:45:09,140
finish so sauce labs has a free package

00:45:06,980 --> 00:45:10,640
it gives you 200 minutes a month which

00:45:09,140 --> 00:45:14,180
if you have a small site and actually

00:45:10,640 --> 00:45:16,760
enough but as you go up a small team

00:45:14,180 --> 00:45:19,160
package is now a thousand minutes a

00:45:16,760 --> 00:45:20,569
month which is definitely a lot I mean

00:45:19,160 --> 00:45:23,750
each one of these tests you saw it took

00:45:20,569 --> 00:45:25,819
20 seconds they're simplistic but unless

00:45:23,750 --> 00:45:27,589
you're running tests daily or two or

00:45:25,819 --> 00:45:31,010
three times a week you're never going to

00:45:27,589 --> 00:45:33,380
run to that if you guys can give me your

00:45:31,010 --> 00:45:36,589
business card I can actually get you

00:45:33,380 --> 00:45:38,000
free samples of small team like I

00:45:36,589 --> 00:45:41,750
mentioned the sauce labs guys have been

00:45:38,000 --> 00:45:45,260
really really helpful with this just

00:45:41,750 --> 00:45:47,510
coordinating and so they offered anyone

00:45:45,260 --> 00:45:49,160
a small team trial that I just need to

00:45:47,510 --> 00:45:51,500
forward your information over to them

00:45:49,160 --> 00:45:53,900
and just write down the username you're

00:45:51,500 --> 00:45:55,309
going to register with which is not an

00:45:53,900 --> 00:45:58,160
email it's actually username and I'll

00:45:55,309 --> 00:46:00,309
pass that along I'll try not to login as

00:45:58,160 --> 00:46:00,309
you

00:46:06,609 --> 00:46:17,920
almost okay but yeah they're uh they're

00:46:13,210 --> 00:46:17,920
tools are very very impressive to me

00:46:18,039 --> 00:46:22,309
just waiting for that Jamie to finish

00:46:20,509 --> 00:46:23,569
here in just a second so you can see

00:46:22,309 --> 00:46:27,769
I've actually been running this for like

00:46:23,569 --> 00:46:29,930
last week you know these 39 minutes it's

00:46:27,769 --> 00:46:32,150
not like a cell phone couple rounds up

00:46:29,930 --> 00:46:35,440
and does all that wacky logic it's

00:46:32,150 --> 00:46:38,900
actually it's actually very fair and

00:46:35,440 --> 00:46:41,839
this is a cool service to as a if your

00:46:38,900 --> 00:46:44,450
website isn't accessible externally you

00:46:41,839 --> 00:46:47,990
can they will actually tunnel in and run

00:46:44,450 --> 00:46:49,039
the test within your environment so just

00:46:47,990 --> 00:46:51,740
because you can't access your

00:46:49,039 --> 00:46:54,730
environment from the web doesn't mean

00:46:51,740 --> 00:46:54,730
you can't use this product

00:47:04,069 --> 00:47:10,519
so any questions or anything so far this

00:47:07,039 --> 00:47:13,969
generator just only takes about two or

00:47:10,519 --> 00:47:16,009
three minutes so Jenkins is definitely

00:47:13,969 --> 00:47:17,900
something that I think a lot of the PHP

00:47:16,009 --> 00:47:20,509
community mrs. Allen good so Java

00:47:17,900 --> 00:47:22,039
focused I mean everything in it wants

00:47:20,509 --> 00:47:24,829
you to build an ant script or once you'd

00:47:22,039 --> 00:47:27,559
have class pass or wants you to do a lot

00:47:24,829 --> 00:47:30,199
of work to just make it java friendly

00:47:27,559 --> 00:47:31,729
but if you start looking around there's

00:47:30,199 --> 00:47:34,519
enough tools out there so you don't have

00:47:31,729 --> 00:47:37,190
no job at all which personally speaking

00:47:34,519 --> 00:47:41,420
is something I'm very happy too happy to

00:47:37,190 --> 00:47:43,279
stick to but there's really a lot in

00:47:41,420 --> 00:47:46,819
there everything from Jamie and selenium

00:47:43,279 --> 00:47:48,949
to running ruby scripts and connecting

00:47:46,819 --> 00:47:51,109
to like for instance they can actually

00:47:48,949 --> 00:47:52,940
when you run a job it can actually

00:47:51,109 --> 00:47:55,279
connect to Amazon open up a cloud

00:47:52,940 --> 00:47:57,529
instance run a test and then close it at

00:47:55,279 --> 00:47:58,940
the end I mean the plugins for it a

00:47:57,529 --> 00:48:01,279
really impressive so you can see here

00:47:58,940 --> 00:48:05,839
all right so finished build successful

00:48:01,279 --> 00:48:08,959
took three minutes and 20 seconds they

00:48:05,839 --> 00:48:11,479
reported 400 to the second of failures

00:48:08,959 --> 00:48:13,849
for whatever reason my login logout part

00:48:11,479 --> 00:48:16,640
of the script isn't working it's not

00:48:13,849 --> 00:48:18,229
that title for this purpose everything

00:48:16,640 --> 00:48:20,599
was a success so I've finished with a

00:48:18,229 --> 00:48:24,890
success and you can see it triggered a

00:48:20,599 --> 00:48:28,430
new build of deploy release which is my

00:48:24,890 --> 00:48:34,339
second job here which is actually doing

00:48:28,430 --> 00:48:36,799
the code deployment so what the reason

00:48:34,339 --> 00:48:38,329
they're split up like that is now I have

00:48:36,799 --> 00:48:41,029
one script that tests to make sure

00:48:38,329 --> 00:48:43,339
everything is okay and assuming all the

00:48:41,029 --> 00:48:46,249
tests pass only then will actually

00:48:43,339 --> 00:48:48,619
deploy so if there's any sort of code

00:48:46,249 --> 00:48:51,170
that actually breaks one of those

00:48:48,619 --> 00:48:53,719
selenium tests or introduces errors to

00:48:51,170 --> 00:48:57,309
jmeter the whole process just stops and

00:48:53,719 --> 00:48:57,309
it doesn't affect your real environments

00:48:57,640 --> 00:49:05,219
okay so that's finished

00:49:00,919 --> 00:49:06,689
so I'm going to run a so as we look at

00:49:05,219 --> 00:49:09,389
the configuration I can actually run a

00:49:06,689 --> 00:49:12,059
version that I know will break and just

00:49:09,389 --> 00:49:17,519
I can show you the different example

00:49:12,059 --> 00:49:19,379
there all right so just give you a quick

00:49:17,519 --> 00:49:21,119
run-through there's a lot of options and

00:49:19,379 --> 00:49:23,009
jenkins you'll just it's probably taken

00:49:21,119 --> 00:49:25,829
me six plus months to really get a grasp

00:49:23,009 --> 00:49:29,879
of everything i have parameters so i can

00:49:25,829 --> 00:49:31,469
set up dude rush aliases if you're not

00:49:29,879 --> 00:49:35,609
familiar those they're pretty well

00:49:31,469 --> 00:49:38,009
documented but very very useful i also

00:49:35,609 --> 00:49:39,479
like what tagged you only deploy from so

00:49:38,009 --> 00:49:41,219
these are just environment variables i

00:49:39,479 --> 00:49:45,809
pass around to different scripts just

00:49:41,219 --> 00:49:48,689
like the run so i'm actually using a

00:49:45,809 --> 00:49:50,399
make file setup the different

00:49:48,689 --> 00:49:56,729
environments i clear the cache i do the

00:49:50,399 --> 00:49:59,309
sink and I pushed it to fraction and

00:49:56,729 --> 00:50:00,569
then I have a selenium job here that all

00:49:59,309 --> 00:50:02,909
it does is a loop through the Ruby

00:50:00,569 --> 00:50:06,689
scripts and runs them it's just one line

00:50:02,909 --> 00:50:11,929
for loop and then this is actually

00:50:06,689 --> 00:50:11,929
jmeter code word for jmeter essentially

00:50:13,450 --> 00:50:19,329
and what you see here is it it takes all

00:50:17,650 --> 00:50:21,460
those jmeter results and actually

00:50:19,329 --> 00:50:23,079
publishes a report based on them so you

00:50:21,460 --> 00:50:25,599
can actually see what happened I'll show

00:50:23,079 --> 00:50:29,680
you that in just a second and it will

00:50:25,599 --> 00:50:32,050
only create and only call the release if

00:50:29,680 --> 00:50:33,940
the build was actually stable so if any

00:50:32,050 --> 00:50:35,650
of those tests failed it would actually

00:50:33,940 --> 00:50:37,930
stop and it would never affect your

00:50:35,650 --> 00:50:39,369
environment which is what we want to get

00:50:37,930 --> 00:50:41,650
you know we want to get the point we

00:50:39,369 --> 00:50:44,380
have all this test of a very very end if

00:50:41,650 --> 00:50:49,630
everything was perfect it just switches

00:50:44,380 --> 00:50:54,460
symbolic link and now your site's bar so

00:50:49,630 --> 00:50:57,130
if we look at our previous you can see

00:50:54,460 --> 00:50:58,690
here this is part of what it's

00:50:57,130 --> 00:51:01,119
generating these are all the samples

00:50:58,690 --> 00:51:02,859
these would mean response times a lot

00:51:01,119 --> 00:51:07,000
lower than it was before you can see

00:51:02,859 --> 00:51:10,390
logout for whatever reason is busted but

00:51:07,000 --> 00:51:13,390
if you look at the actual it gives you

00:51:10,390 --> 00:51:15,790
full statistics line 90s a key

00:51:13,390 --> 00:51:18,369
statistics means ninety percent of the

00:51:15,790 --> 00:51:19,869
traffic was under this number which is

00:51:18,369 --> 00:51:24,970
really the number to look at not the

00:51:19,869 --> 00:51:27,780
average so you can see every single

00:51:24,970 --> 00:51:27,780
request that happened

00:51:34,910 --> 00:51:42,770
and hopefully the other deploy script

00:51:38,640 --> 00:51:46,140
run so the configuration of droop of

00:51:42,770 --> 00:51:48,510
Jenkins is definitely the hard part the

00:51:46,140 --> 00:51:53,119
use of it is definitely is not very

00:51:48,510 --> 00:51:53,119
difficult at all so let's take a look at

00:51:59,220 --> 00:52:05,800
so this is my deploy script I test what

00:52:03,430 --> 00:52:08,890
environment I want to deploy to and then

00:52:05,800 --> 00:52:11,619
I go on to the server and switches

00:52:08,890 --> 00:52:15,180
symbolically that's that's that's

00:52:11,619 --> 00:52:19,089
probably most complicated script i have

00:52:15,180 --> 00:52:20,440
my setup script puts it in this extra

00:52:19,089 --> 00:52:22,480
sort of testing environment that doesn't

00:52:20,440 --> 00:52:25,510
really exist it's just kind of sitting

00:52:22,480 --> 00:52:27,130
out there so this gets this script

00:52:25,510 --> 00:52:29,230
running so I can actually run the test

00:52:27,130 --> 00:52:34,569
before copying anything over before

00:52:29,230 --> 00:52:39,579
switching anything and I just have

00:52:34,569 --> 00:52:42,490
another script that I mean this is

00:52:39,579 --> 00:52:52,690
what's this is all the code I had to

00:52:42,490 --> 00:52:54,609
write to do selenium so I mean I like

00:52:52,690 --> 00:52:57,550
writing code don't like write code of

00:52:54,609 --> 00:53:03,819
that much so I'd rather just I'd write

00:52:57,550 --> 00:53:07,690
my one line and move on so I promise you

00:53:03,819 --> 00:53:10,630
guys at the settings PHP how I approach

00:53:07,690 --> 00:53:20,680
that so I used settings PHP for all of

00:53:10,630 --> 00:53:23,079
mine for all of my actual changes for my

00:53:20,680 --> 00:53:24,640
cookie lifetime at base pads all the

00:53:23,079 --> 00:53:27,069
stuff that's actually specific to an

00:53:24,640 --> 00:53:30,430
environment and this is actually similar

00:53:27,069 --> 00:53:32,770
to what we do it off Leah you can see

00:53:30,430 --> 00:53:34,660
these all my different siblings so

00:53:32,770 --> 00:53:37,270
current points to stable one right now

00:53:34,660 --> 00:53:39,339
so does development stage and testing

00:53:37,270 --> 00:53:42,520
because of this is now pointing to

00:53:39,339 --> 00:53:45,940
unstable and once I run a new script

00:53:42,520 --> 00:53:48,220
testing leary pointed to that new tag so

00:53:45,940 --> 00:53:51,089
at all once I set it up it's all

00:53:48,220 --> 00:53:51,089
completely hands-off

00:53:56,750 --> 00:54:01,100
so this is my logic to figure out which

00:53:59,120 --> 00:54:03,560
settings PHP around so in my settings

00:54:01,100 --> 00:54:06,050
PHP I have a complete norm one and the

00:54:03,560 --> 00:54:08,900
very last line of it just includes this

00:54:06,050 --> 00:54:12,110
mod which figures out what environmental

00:54:08,900 --> 00:54:18,470
min and includes that that include

00:54:12,110 --> 00:54:24,140
includes that path so for instance on

00:54:18,470 --> 00:54:25,580
development I have self 2011 development

00:54:24,140 --> 00:54:28,280
as name of database this is just the

00:54:25,580 --> 00:54:30,170
database string from Drupal 7 I could

00:54:28,280 --> 00:54:32,900
add in memcache configuration whose

00:54:30,170 --> 00:54:35,060
Apache Solr anything else is specific to

00:54:32,900 --> 00:54:36,950
one environment and I don't have to

00:54:35,060 --> 00:54:39,080
worry about figuring out the logic in

00:54:36,950 --> 00:54:45,590
the settings PHP and writing a big

00:54:39,080 --> 00:54:49,540
switch in there anything like that so

00:54:45,590 --> 00:54:49,540
this past for some reason

00:55:03,330 --> 00:55:08,890
so this is what it should have done so

00:55:07,240 --> 00:55:10,180
that user login test I'm going to

00:55:08,890 --> 00:55:11,830
mentioned a couple times now where it

00:55:10,180 --> 00:55:15,220
puts in the username and password and

00:55:11,830 --> 00:55:17,350
looks at my account link cilenia likes

00:55:15,220 --> 00:55:20,200
you read it and say this is I tried to

00:55:17,350 --> 00:55:22,960
click on that it didn't exist and it

00:55:20,200 --> 00:55:24,430
Ares out the whole time so jmeter

00:55:22,960 --> 00:55:26,860
doesn't run the deploy doesn't take

00:55:24,430 --> 00:55:29,860
place the whole system just stops once

00:55:26,860 --> 00:55:31,450
it finds any air whatsoever so there's

00:55:29,860 --> 00:55:34,600
no harm to your live site there's no

00:55:31,450 --> 00:55:37,660
downtime there's no sort of manual

00:55:34,600 --> 00:55:39,340
testing process all this you can just do

00:55:37,660 --> 00:55:42,310
you just click it you know good lunch

00:55:39,340 --> 00:55:44,350
come back and let you know if you're

00:55:42,310 --> 00:55:45,610
staging environment succeeded and then

00:55:44,350 --> 00:55:47,200
your development bar you click it you

00:55:45,610 --> 00:55:50,160
probably don't go to lunch and then you

00:55:47,200 --> 00:55:50,160
check in your production environment

00:55:52,590 --> 00:55:59,200
thank you so this demo I mean this is

00:55:57,400 --> 00:56:00,730
something that I'm not sure I've seen

00:55:59,200 --> 00:56:03,220
any when I actually set up all the steps

00:56:00,730 --> 00:56:05,590
to this but I think supervalu and I'll

00:56:03,220 --> 00:56:08,380
whatever i can i'll post this also on my

00:56:05,590 --> 00:56:10,750
blog whatever scripts i can pull out of

00:56:08,380 --> 00:56:13,540
jenkins the selenium tests all that

00:56:10,750 --> 00:56:15,280
stuff i'll put as much as i can off on

00:56:13,540 --> 00:56:21,910
my blog and so you guys can at least

00:56:15,280 --> 00:56:27,550
have a good starting point but this is

00:56:21,910 --> 00:56:31,930
what i was referring to earlier so it's

00:56:27,550 --> 00:56:33,790
really simplistic but it basically just

00:56:31,930 --> 00:56:36,520
gives you a jmeter script starting point

00:56:33,790 --> 00:56:38,380
to log into a Drupal 6 or 7 site and do

00:56:36,520 --> 00:56:39,730
a couple different actions and from

00:56:38,380 --> 00:56:43,770
there you can probably figure it out

00:56:39,730 --> 00:56:43,770
fairly well what those next steps are

00:56:47,360 --> 00:56:51,210
because this is what the actual action

00:56:49,710 --> 00:56:53,420
all looks like you're not going to write

00:56:51,210 --> 00:56:53,420
that

00:56:59,770 --> 00:57:04,670
so any questions on Jenkins or any of

00:57:02,630 --> 00:57:06,320
this stuff again I like filling my

00:57:04,670 --> 00:57:09,380
presentations and letting you guys kind

00:57:06,320 --> 00:57:12,260
of fill in the gaps later I'd rather do

00:57:09,380 --> 00:57:14,390
that and have too much dead time during

00:57:12,260 --> 00:57:15,860
presentation so any questions for now

00:57:14,390 --> 00:57:21,130
like I said it will all be on my website

00:57:15,860 --> 00:57:25,460
probably next few days anyone else I

00:57:21,130 --> 00:57:28,970
have so I told them how many people are

00:57:25,460 --> 00:57:30,770
showing up to this conference and this

00:57:28,970 --> 00:57:33,770
is how many devcloud subscriptions I

00:57:30,770 --> 00:57:35,600
sent me so if you guys want to take home

00:57:33,770 --> 00:57:39,950
a couple to friends or anything like

00:57:35,600 --> 00:57:41,930
that feel free be generous and I have

00:57:39,950 --> 00:57:44,960
all kinds of stickers swags again we're

00:57:41,930 --> 00:57:47,570
hiring you know please come talk to me

00:57:44,960 --> 00:57:48,800
after the presentation you know with any

00:57:47,570 --> 00:57:50,780
of these presentation I want to make

00:57:48,800 --> 00:57:53,480
sure it fits and needs people have so

00:57:50,780 --> 00:57:55,190
again I do QA this doesn't work how do i

00:57:53,480 --> 00:57:58,870
make network in Drupal that's what I

00:57:55,190 --> 00:57:58,870
want to hear thanks everyone

00:58:13,140 --> 00:58:17,309
what about this I can help it like it we

00:58:15,750 --> 00:58:20,900
have the same problem for what happened

00:58:17,309 --> 00:58:20,900
a few years you gave me I thought

00:58:22,850 --> 00:58:27,320
let's put the word out

00:58:25,260 --> 00:58:27,320
you

00:58:35,760 --> 00:58:43,230
well s an OS that works the way that you

00:58:39,210 --> 00:58:48,390
do across all your devices HP Slate and

00:58:43,230 --> 00:58:51,300
webos HP as a service leader in cloud

00:58:48,390 --> 00:58:53,010
computing all we do is hosted computing

00:58:51,300 --> 00:58:55,080
to us the cloud is just the next

00:58:53,010 --> 00:58:56,520
generation of hosting and if someone

00:58:55,080 --> 00:58:58,140
who's been in the hosting industry for

00:58:56,520 --> 00:59:00,240
12 years we feel we're in a unique

00:58:58,140 --> 00:59:01,890
position to really help bring these two

00:59:00,240 --> 00:59:03,930
worlds together these different sets of

00:59:01,890 --> 00:59:05,850
technologies and to help companies

00:59:03,930 --> 00:59:08,070
embrace this new world and this great

00:59:05,850 --> 00:59:10,650
new tool that allows faster innovation

00:59:08,070 --> 00:59:12,540
not only is it about us being responsive

00:59:10,650 --> 00:59:15,200
and accountable but it's about us doing

00:59:12,540 --> 00:59:15,200
more for you

00:59:37,359 --> 00:59:39,420

YouTube URL: https://www.youtube.com/watch?v=JTmTu4iOlDc


