Title: 2012 SouthEast LinuxFest - Thomas Hatch - SaltStack Training - Salt States
Publication date: 2014-05-20
Playlist: 2012 SouthEast LinuxFest - SaltStack Training
Description: 
	2012 SouthEast LinuxFest
Thomas Hatch
SaltStack Training
Salt States
Captions: 
	00:00:00,000 --> 00:00:05,279
the following presentation was recorded

00:00:02,490 --> 00:00:08,040
the 2012 southeast linux fest in

00:00:05,279 --> 00:00:10,410
charlotte north carolina it is licensed

00:00:08,040 --> 00:00:12,090
under a creative commons license for

00:00:10,410 --> 00:00:16,859
more information about the southeast

00:00:12,090 --> 00:00:19,230
linux fest visit www.lend expense org

00:00:16,859 --> 00:00:21,320
the southeast linux fest would like to

00:00:19,230 --> 00:00:23,279
thank the following diamond sponsors in

00:00:21,320 --> 00:00:31,140
2012 for helping make these videos

00:00:23,279 --> 00:00:42,180
possible all right we'll dive back in

00:00:31,140 --> 00:00:43,559
for some more fun salt states now I've

00:00:42,180 --> 00:00:46,500
actually gotten into some arguments with

00:00:43,559 --> 00:00:48,090
people about my term of calling the

00:00:46,500 --> 00:00:56,399
configuration management component of

00:00:48,090 --> 00:00:57,930
salt States and primarily because people

00:00:56,399 --> 00:01:02,190
say one is just call it configuration

00:00:57,930 --> 00:01:04,500
management and I and and if you've

00:01:02,190 --> 00:01:05,700
talked to me oftentimes I do just call

00:01:04,500 --> 00:01:08,909
it configuration management because

00:01:05,700 --> 00:01:12,869
people know what that is and I say well

00:01:08,909 --> 00:01:16,229
we do state management and why the whole

00:01:12,869 --> 00:01:19,259
idea behind state management is that

00:01:16,229 --> 00:01:22,939
you're managing atomic states on the

00:01:19,259 --> 00:01:26,310
system and that you don't need to build

00:01:22,939 --> 00:01:29,060
necessarily a large the large state tree

00:01:26,310 --> 00:01:32,729
to do it you can interact with

00:01:29,060 --> 00:01:35,640
individual atomic States on those

00:01:32,729 --> 00:01:39,900
systems because we build everything out

00:01:35,640 --> 00:01:41,939
in layers and so like we're talking

00:01:39,900 --> 00:01:45,450
about before the base layers of salt are

00:01:41,939 --> 00:01:47,939
remote execution bus system API via the

00:01:45,450 --> 00:01:50,939
modules and so the next thing we have is

00:01:47,939 --> 00:01:52,790
a state API and then we've got ways in

00:01:50,939 --> 00:01:56,430
which we can call the state API

00:01:52,790 --> 00:01:57,990
depending on what level of the stack so

00:01:56,430 --> 00:02:00,540
to speak you want to interact with a

00:01:57,990 --> 00:02:03,149
system generally speaking you pick a

00:02:00,540 --> 00:02:05,310
level and you stay there and it just

00:02:03,149 --> 00:02:06,810
kind of happens because you go oh well

00:02:05,310 --> 00:02:09,270
this makes sense up here for my

00:02:06,810 --> 00:02:11,670
deployment but I've worked with a lot of

00:02:09,270 --> 00:02:13,410
deployments and I know that they're not

00:02:11,670 --> 00:02:15,480
all going to be the same so I'm

00:02:13,410 --> 00:02:18,210
going to tell you what to do i'm going

00:02:15,480 --> 00:02:20,010
to give you options and when when you

00:02:18,210 --> 00:02:21,990
when I present or when you go through

00:02:20,010 --> 00:02:25,050
tutorials they're usually going to peg

00:02:21,990 --> 00:02:26,550
in certain locations and then mention by

00:02:25,050 --> 00:02:28,140
the way you can do it there's like these

00:02:26,550 --> 00:02:31,350
other little levels here just so you

00:02:28,140 --> 00:02:33,120
know for you to explore but we're going

00:02:31,350 --> 00:02:34,680
to use what we feel are going to be the

00:02:33,120 --> 00:02:37,500
general defaults as to how someone's

00:02:34,680 --> 00:02:42,090
going to interact but anyway what we're

00:02:37,500 --> 00:02:45,540
going to cover in this presentation the

00:02:42,090 --> 00:02:46,830
basic aspects of the state system so

00:02:45,540 --> 00:02:51,530
we're going to talk a little bit about

00:02:46,830 --> 00:02:54,540
the top file which is how you map

00:02:51,530 --> 00:02:57,360
certain state files back to certain

00:02:54,540 --> 00:02:59,550
minions and you'll see that we use those

00:02:57,360 --> 00:03:03,060
targets inside the top file which is why

00:02:59,550 --> 00:03:05,010
it's important to cover those early sls

00:03:03,060 --> 00:03:06,840
files which are kind of similar if

00:03:05,010 --> 00:03:12,000
you're feeling like puppet to manifest

00:03:06,840 --> 00:03:13,670
or chef two recipes we'll talk a little

00:03:12,000 --> 00:03:15,450
bit about what those are made out of

00:03:13,670 --> 00:03:17,840
we're going to talk about the steak

00:03:15,450 --> 00:03:20,880
module itself the state module is a

00:03:17,840 --> 00:03:23,370
module inside of all of these executions

00:03:20,880 --> 00:03:25,170
and that's how you execute states

00:03:23,370 --> 00:03:27,300
because I mean it's how you actually

00:03:25,170 --> 00:03:30,240
anything in salt is through our core

00:03:27,300 --> 00:03:33,690
system API through the modules we're

00:03:30,240 --> 00:03:35,100
going to talk about a number of the

00:03:33,690 --> 00:03:36,360
functions inside of the state module

00:03:35,100 --> 00:03:38,310
there's some things in there for

00:03:36,360 --> 00:03:39,660
debugging there's some things in there

00:03:38,310 --> 00:03:41,580
too allowing you to run states in

00:03:39,660 --> 00:03:43,140
different ways there's things in there

00:03:41,580 --> 00:03:44,370
that allow you to bypass the top file

00:03:43,140 --> 00:03:45,989
there's things in there that allow you

00:03:44,370 --> 00:03:49,890
to say I just want to run this one

00:03:45,989 --> 00:03:54,360
individual state we're going to then

00:03:49,890 --> 00:03:57,209
talk about SLS components if if you take

00:03:54,360 --> 00:03:59,850
a nap doing that that's okay I shouldn't

00:03:57,209 --> 00:04:03,270
say it like that I won't be offended it

00:03:59,850 --> 00:04:05,160
can be a little dry we're going to talk

00:04:03,270 --> 00:04:07,440
about very briefly about a piece of

00:04:05,160 --> 00:04:12,840
technology inside of salt called pillar

00:04:07,440 --> 00:04:14,400
and yes it's a pillar of salt if you're

00:04:12,840 --> 00:04:16,290
running away from a city that's being

00:04:14,400 --> 00:04:19,709
annihilated by God don't look don't look

00:04:16,290 --> 00:04:21,209
behind you if you get the reference it's

00:04:19,709 --> 00:04:22,740
a biblical reference I'm going to have

00:04:21,209 --> 00:04:25,900
to get more religious references because

00:04:22,740 --> 00:04:30,000
it is salt and that's where it shows up

00:04:25,900 --> 00:04:30,000
prevalently in mythology and religion

00:04:31,620 --> 00:04:36,000
then I'll have to get some non

00:04:33,400 --> 00:04:49,120
judeo-christian ones as well of course

00:04:36,000 --> 00:04:53,440
and and then say what right oh oh that

00:04:49,120 --> 00:04:57,009
was good i'm impressed ok and then we're

00:04:53,440 --> 00:05:01,389
going to briefly talk about how this SLS

00:04:57,009 --> 00:05:05,160
structure which how the actual data then

00:05:01,389 --> 00:05:08,289
maps back into the literal salt code

00:05:05,160 --> 00:05:10,120
because I show generally when people see

00:05:08,289 --> 00:05:12,330
that a light bulb goes on and says

00:05:10,120 --> 00:05:14,530
really that's all that's going on

00:05:12,330 --> 00:05:17,010
because we go through and we talk about

00:05:14,530 --> 00:05:20,349
these SLS files we talk about states and

00:05:17,010 --> 00:05:21,970
and there's a lot of little components

00:05:20,349 --> 00:05:24,190
and little pieces that are helpful to

00:05:21,970 --> 00:05:25,949
know you don't need to know them but

00:05:24,190 --> 00:05:28,120
they're very helpful to know and you

00:05:25,949 --> 00:05:29,770
look at how the state files are laid out

00:05:28,120 --> 00:05:32,830
and the goal was to make them as

00:05:29,770 --> 00:05:37,539
intuitive as possible but on the same

00:05:32,830 --> 00:05:41,909
hand make them make them create a lot of

00:05:37,539 --> 00:05:44,979
internal mappings and structures ok so

00:05:41,909 --> 00:05:52,139
that's what you get to listen to me talk

00:05:44,979 --> 00:05:56,620
about for the next hour ok salt states

00:05:52,139 --> 00:05:59,680
now before going forward and talking

00:05:56,620 --> 00:06:01,360
about what salt states are I'm going to

00:05:59,680 --> 00:06:03,780
see if I can get enough juice out of a

00:06:01,360 --> 00:06:03,780
web browser

00:06:06,409 --> 00:06:19,199
so far so good and we'll take a quick

00:06:11,759 --> 00:06:21,409
look at the salt code cool got a poor

00:06:19,199 --> 00:06:21,409
wreck

00:06:27,430 --> 00:06:35,920
all right instead of the salt and some

00:06:31,780 --> 00:06:38,560
salt code we've got these directories

00:06:35,920 --> 00:06:41,770
grains modules vendors returners runners

00:06:38,560 --> 00:06:46,270
and states these are all plug in

00:06:41,770 --> 00:06:49,270
directories where we can just drop added

00:06:46,270 --> 00:06:51,760
functionality to salt and this is and

00:06:49,270 --> 00:06:54,460
this is very central to how states works

00:06:51,760 --> 00:06:56,080
if we look into modules we see these are

00:06:54,460 --> 00:06:57,550
all of those python modules that we're

00:06:56,080 --> 00:07:01,690
talking about just a few minutes ago

00:06:57,550 --> 00:07:04,270
that make up this core API it's way too

00:07:01,690 --> 00:07:06,070
small right now I really if you guys

00:07:04,270 --> 00:07:09,910
want to add to it that's great give me

00:07:06,070 --> 00:07:13,290
some pull Rex okay and we've got all

00:07:09,910 --> 00:07:17,610
this window support in here and etc etc

00:07:13,290 --> 00:07:29,440
but so if we go back and say well have

00:07:17,610 --> 00:07:31,570
how do these work there it is and we

00:07:29,440 --> 00:07:36,070
kept running this test dot this test

00:07:31,570 --> 00:07:40,360
thing fundamentally these are just flat

00:07:36,070 --> 00:07:42,580
python modules the goal here being that

00:07:40,360 --> 00:07:45,880
I wanted to make it as ridiculously

00:07:42,580 --> 00:07:48,850
simple as possible to write to extend

00:07:45,880 --> 00:07:50,460
salt with modules and so they're just

00:07:48,850 --> 00:07:53,560
Python you don't have to import anything

00:07:50,460 --> 00:07:55,090
salt does all the work of pulling up one

00:07:53,560 --> 00:07:57,370
of these files looking at it and

00:07:55,090 --> 00:08:00,490
figuring out how it's going to abstract

00:07:57,370 --> 00:08:03,910
the functionality inside of it for you

00:08:00,490 --> 00:08:05,320
so that it's just easy let me go back

00:08:03,910 --> 00:08:09,700
and we see that if we were in test op

00:08:05,320 --> 00:08:12,580
ping we're just running test module like

00:08:09,700 --> 00:08:16,380
I was saying ping function and returns

00:08:12,580 --> 00:08:16,380
proof and there's your documentation

00:08:17,780 --> 00:08:30,510
and so States over here what they do is

00:08:26,850 --> 00:08:33,330
you've got a module a state module that

00:08:30,510 --> 00:08:36,180
wraps the functionality of stateful

00:08:33,330 --> 00:08:40,130
behavior on top of the functionality of

00:08:36,180 --> 00:08:44,220
just getting crap done in the modules

00:08:40,130 --> 00:08:49,230
and so that's fundamentally what states

00:08:44,220 --> 00:08:51,570
are is a thin veneer with with a system

00:08:49,230 --> 00:08:53,730
to execute them in in a deterministic

00:08:51,570 --> 00:08:55,080
order and these sorts of things so that

00:08:53,730 --> 00:08:57,600
you can group them together but

00:08:55,080 --> 00:09:00,510
fundamentally a thin veneer on top of

00:08:57,600 --> 00:09:04,260
the modules that facilitate stateful

00:09:00,510 --> 00:09:05,850
behavior okay and so for instance we can

00:09:04,260 --> 00:09:08,130
look at this package state one thing and

00:09:05,850 --> 00:09:10,410
which is great we go back in the modules

00:09:08,130 --> 00:09:13,140
will see a pacman module a young package

00:09:10,410 --> 00:09:17,820
module and absent module and and he

00:09:13,140 --> 00:09:25,050
build yeah it's called he built for the

00:09:17,820 --> 00:09:28,230
portage module and but since it genera

00:09:25,050 --> 00:09:32,700
sizes things then the states can be it's

00:09:28,230 --> 00:09:34,380
just the PKG state but again it's just a

00:09:32,700 --> 00:09:37,350
function and we're going to come back to

00:09:34,380 --> 00:09:42,870
this and to the to the reason why and

00:09:37,350 --> 00:09:47,130
and how some of this works okay when

00:09:42,870 --> 00:09:52,500
we're defining states okay they're just

00:09:47,130 --> 00:09:54,900
plain data I didn't want to make a

00:09:52,500 --> 00:09:56,160
domain-specific language I didn't want

00:09:54,900 --> 00:09:58,740
to write a programming language for two

00:09:56,160 --> 00:10:01,080
reasons and I think both of these

00:09:58,740 --> 00:10:04,620
reasons are very good reasons the first

00:10:01,080 --> 00:10:07,080
is that I'm terribly lazy and the second

00:10:04,620 --> 00:10:09,540
is because I really don't like having a

00:10:07,080 --> 00:10:11,010
beard and anybody can tell you that if

00:10:09,540 --> 00:10:15,920
you're not going to go a beard then your

00:10:11,010 --> 00:10:15,920
program languages can take off okay

00:10:16,110 --> 00:10:19,840
more importantly the reason why their

00:10:18,700 --> 00:10:22,870
data structures is because they're

00:10:19,840 --> 00:10:25,410
extremely pluggable you can take a data

00:10:22,870 --> 00:10:27,970
structure from any programming language

00:10:25,410 --> 00:10:30,220
shove it through something like JSON and

00:10:27,970 --> 00:10:33,810
then hand it to salt and it can work

00:10:30,220 --> 00:10:37,330
with it and so again it makes salt

00:10:33,810 --> 00:10:39,850
ridiculously extensible but since

00:10:37,330 --> 00:10:42,070
they're just data and they're just data

00:10:39,850 --> 00:10:44,110
structures then we can interact with

00:10:42,070 --> 00:10:46,120
these data structures pretty much any

00:10:44,110 --> 00:10:48,250
way that we want now by default we do we

00:10:46,120 --> 00:10:53,110
do it with a yam with llamo files and we

00:10:48,250 --> 00:10:55,270
arrange them in a tree but we'll take a

00:10:53,110 --> 00:10:57,400
very brief in Rhode throughout the day

00:10:55,270 --> 00:11:01,630
as to some of the other ways in which we

00:10:57,400 --> 00:11:04,180
can interact with these states now the

00:11:01,630 --> 00:11:06,490
tree is made to be as flat and straight

00:11:04,180 --> 00:11:10,690
forward as possible again we're trying

00:11:06,490 --> 00:11:12,340
to make it as simple as possible I'm an

00:11:10,690 --> 00:11:15,910
arch guy and it's all about keeping it

00:11:12,340 --> 00:11:20,590
simple simple straightforward easy to

00:11:15,910 --> 00:11:22,300
grok now you can also make an

00:11:20,590 --> 00:11:29,740
environment centric and we'll talk very

00:11:22,300 --> 00:11:37,150
briefly on how to do that okay now we're

00:11:29,740 --> 00:11:40,590
going to start making a state tree so

00:11:37,150 --> 00:11:40,590
I'm going to hop over to a terminal now

00:11:44,320 --> 00:12:04,010
actually I'm going to start in I'm going

00:11:50,779 --> 00:12:05,330
to start by doing this and then I'm

00:12:04,010 --> 00:12:11,540
going to talk for another couple of

00:12:05,330 --> 00:12:14,330
minutes somewhat boom okay well we set

00:12:11,540 --> 00:12:16,070
up a state tree the first thing that we

00:12:14,330 --> 00:12:18,050
need to do is we're going to take a look

00:12:16,070 --> 00:12:21,290
at the salt master configuration file

00:12:18,050 --> 00:12:24,800
there's a single configuration inside of

00:12:21,290 --> 00:12:27,320
the master config file that defines how

00:12:24,800 --> 00:12:28,910
the state tree or where the state tree

00:12:27,320 --> 00:12:31,490
is and how the state tree is going to

00:12:28,910 --> 00:12:32,870
behave since states are environment

00:12:31,490 --> 00:12:35,180
based we can define multiple

00:12:32,870 --> 00:12:37,070
environments to look up by default

00:12:35,180 --> 00:12:39,620
there's a base environment and you have

00:12:37,070 --> 00:12:42,770
to have your base environment it's kind

00:12:39,620 --> 00:12:45,920
of the foundation inside of that

00:12:42,770 --> 00:12:48,500
configuration we can overlay directories

00:12:45,920 --> 00:12:51,950
as well so we can prioritize directories

00:12:48,500 --> 00:12:55,850
this is particularly a nice and this was

00:12:51,950 --> 00:12:57,020
this this feature was requested and then

00:12:55,850 --> 00:13:01,279
I realized that I'd built it in

00:12:57,020 --> 00:13:03,980
inadvertently but this is particularly

00:13:01,279 --> 00:13:06,140
nice because you can have one directory

00:13:03,980 --> 00:13:10,850
with the state tree that you might get

00:13:06,140 --> 00:13:12,620
stock from the guy writing the state

00:13:10,850 --> 00:13:14,540
tree or it might be stocked for another

00:13:12,620 --> 00:13:17,150
environment and then have another

00:13:14,540 --> 00:13:20,779
directory that has just modifications

00:13:17,150 --> 00:13:23,450
and it'll find those in an ordered

00:13:20,779 --> 00:13:28,670
manner so that you can overlay state

00:13:23,450 --> 00:13:31,160
trees very very cleanly the directory

00:13:28,670 --> 00:13:34,490
structure is what defines how we name

00:13:31,160 --> 00:13:39,890
the sls components and they were rather

00:13:34,490 --> 00:13:42,620
sorry the sls files and and everything

00:13:39,890 --> 00:13:43,880
is made to be very unix-like in that

00:13:42,620 --> 00:13:46,550
everything's just a file there's no

00:13:43,880 --> 00:13:48,440
magic paths when you refer to something

00:13:46,550 --> 00:13:51,700
you're referring to it as the location

00:13:48,440 --> 00:13:51,700
of a file generally

00:13:57,000 --> 00:14:05,230
who said that thank you well I'm what

00:14:01,839 --> 00:14:09,730
does SLS stand for I picked the I picked

00:14:05,230 --> 00:14:11,170
term SLS for a couple of reasons one

00:14:09,730 --> 00:14:14,920
because it was a final extension that

00:14:11,170 --> 00:14:16,930
wasn't heavily used already but

00:14:14,920 --> 00:14:24,640
primarily what it stands for is salt

00:14:16,930 --> 00:14:28,810
States s all states so it is a very

00:14:24,640 --> 00:14:32,019
lousy akron oh I'm not going to pretend

00:14:28,810 --> 00:14:48,970
that it isn't I need ruby lips for vim

00:14:32,019 --> 00:14:52,600
is your right well yeah and we're in

00:14:48,970 --> 00:14:53,740
fedora so it's it's I always find it

00:14:52,600 --> 00:14:58,630
fascinating to look at different

00:14:53,740 --> 00:15:03,480
distributions policies on including

00:14:58,630 --> 00:15:06,040
dependencies and yeah we look asleep

00:15:03,480 --> 00:15:08,770
right right in gentoo you've got your

00:15:06,040 --> 00:15:14,230
you've got college been 20 years since

00:15:08,770 --> 00:15:16,180
I've been injected guy yeah and gently

00:15:14,230 --> 00:15:18,070
you've got you've got your making clue

00:15:16,180 --> 00:15:20,260
your yeah your make additions and things

00:15:18,070 --> 00:15:22,839
like that so that you're compiling in

00:15:20,260 --> 00:15:25,990
extra components and that's it's a

00:15:22,839 --> 00:15:30,240
really cool way to do it and then you've

00:15:25,990 --> 00:15:32,529
got systems like arch that say well

00:15:30,240 --> 00:15:35,820
we're just not going to install all the

00:15:32,529 --> 00:15:38,430
dependencies because we wanted lean and

00:15:35,820 --> 00:15:41,500
that can be rather aggravating sometimes

00:15:38,430 --> 00:15:43,839
and then we've got guys like Fedora that

00:15:41,500 --> 00:15:45,820
say let's let's add pretty much all the

00:15:43,839 --> 00:15:48,490
dependencies and then we've got guys

00:15:45,820 --> 00:15:50,970
like debian ubuntu that say let's add

00:15:48,490 --> 00:15:50,970
even more

00:15:51,180 --> 00:15:54,790
actually they because they

00:15:53,110 --> 00:15:55,960
compartmentalize it and they come back

00:15:54,790 --> 00:15:58,630
and they say well these are required

00:15:55,960 --> 00:16:01,420
these recommended actually I like that

00:15:58,630 --> 00:16:02,530
that about debian because they come

00:16:01,420 --> 00:16:10,330
because they're able to cleanly

00:16:02,530 --> 00:16:14,340
compartmentalize those all right there

00:16:10,330 --> 00:16:14,340
we go oh yeah

00:16:21,050 --> 00:16:47,040
my patience is a known limitation of yum

00:16:24,360 --> 00:16:51,209
oh all right now if we go down the

00:16:47,040 --> 00:16:53,329
master configuration file we want to we

00:16:51,209 --> 00:16:56,790
want to go down in and focus on states

00:16:53,329 --> 00:17:07,010
i'm i'm using too much time but that's

00:16:56,790 --> 00:17:07,010
all right did I open the master

00:17:08,550 --> 00:17:19,050
oh right okay so hopefully this config

00:17:17,640 --> 00:17:20,790
file doesn't turn into what the squid

00:17:19,050 --> 00:17:23,220
config file used to look like for the

00:17:20,790 --> 00:17:25,710
view who are familiar with that one of

00:17:23,220 --> 00:17:27,420
the world's most well commented config

00:17:25,710 --> 00:17:32,430
files it had something like six thousand

00:17:27,420 --> 00:17:35,540
lines of comments in it but these config

00:17:32,430 --> 00:17:38,130
file server will comment it and

00:17:35,540 --> 00:17:39,390
sometimes they I'll go over the go over

00:17:38,130 --> 00:17:41,190
the documentation structure in little

00:17:39,390 --> 00:17:43,560
more detail so that you can see how

00:17:41,190 --> 00:17:45,720
every every one of the options inside of

00:17:43,560 --> 00:17:49,110
the config files are also thoroughly

00:17:45,720 --> 00:17:52,140
documented online anyway when we're

00:17:49,110 --> 00:17:53,940
setting up the state system well what we

00:17:52,140 --> 00:17:56,190
what we deal with is called this file

00:17:53,940 --> 00:17:58,770
routes directive by default it looks

00:17:56,190 --> 00:18:00,600
like this we've got five roads we've got

00:17:58,770 --> 00:18:08,340
a base environment and it's got one

00:18:00,600 --> 00:18:10,350
directory in it serve salt now if we

00:18:08,340 --> 00:18:13,380
want multiple environments then we can

00:18:10,350 --> 00:18:14,850
define them up here and define what

00:18:13,380 --> 00:18:17,790
directories those environments there are

00:18:14,850 --> 00:18:21,420
in and then they take priority based on

00:18:17,790 --> 00:18:24,630
what order they are in this list so if

00:18:21,420 --> 00:18:26,490
we look up an SLS file and there's the

00:18:24,630 --> 00:18:27,720
same SLS filers in this directory and

00:18:26,490 --> 00:18:30,330
this directory it's going to use the one

00:18:27,720 --> 00:18:33,570
at the top of the list okay and same

00:18:30,330 --> 00:18:36,060
with any file that we query from the

00:18:33,570 --> 00:18:40,200
state system which just runs off of the

00:18:36,060 --> 00:18:42,330
salt file server so the default setup is

00:18:40,200 --> 00:18:44,040
to just have a base environment and sort

00:18:42,330 --> 00:18:46,580
of salt that's what we're going to focus

00:18:44,040 --> 00:18:46,580
on here

00:18:55,280 --> 00:19:00,800
ok

00:18:57,260 --> 00:19:07,700
now i'm going to start building out this

00:19:00,800 --> 00:19:11,440
state tree by making a top file now what

00:19:07,700 --> 00:19:15,650
the top file does is we declare

00:19:11,440 --> 00:19:17,480
environment again it's all yamo or

00:19:15,650 --> 00:19:26,540
rather it the data structure that by

00:19:17,480 --> 00:19:30,730
default is represented the enamel then

00:19:26,540 --> 00:19:30,730
we give it a matcher or rather target

00:19:32,740 --> 00:19:42,080
and then we list sls modules so that's a

00:19:37,790 --> 00:19:43,640
functional top file and then everybody

00:19:42,080 --> 00:19:48,050
who checks into this guy is going to

00:19:43,640 --> 00:19:52,280
look for a mom NSLs module called Apache

00:19:48,050 --> 00:19:57,980
and install it so now let's make that

00:19:52,280 --> 00:19:59,180
module make that SLS module I'm working

00:19:57,980 --> 00:20:02,500
on figuring out a way to make the word

00:19:59,180 --> 00:20:11,780
module little as overloaded insult so

00:20:02,500 --> 00:20:13,820
yes okay so now we're in this directory

00:20:11,780 --> 00:20:15,320
and we've got there are two possible

00:20:13,820 --> 00:20:20,840
locations that we can put this Apache

00:20:15,320 --> 00:20:25,360
SLS module one is that just right flat

00:20:20,840 --> 00:20:27,560
here in the route we can say Apache SLS

00:20:25,360 --> 00:20:29,660
which is all fine and dandy if you're

00:20:27,560 --> 00:20:32,240
not doing diff you've got a pretty small

00:20:29,660 --> 00:20:33,710
state tree but generally we like to

00:20:32,240 --> 00:20:36,530
organize things in a little more

00:20:33,710 --> 00:20:41,650
hierarchical fashion and so the other

00:20:36,530 --> 00:20:41,650
way that we can define it is this way

00:20:44,920 --> 00:20:55,090
I make an Apache directory and then make

00:20:51,700 --> 00:20:57,610
an SLS file called Annette so if it's

00:20:55,090 --> 00:21:00,370
Apache sls then that will be the Apache

00:20:57,610 --> 00:21:03,640
SLS module or if it's in a directory and

00:21:00,370 --> 00:21:06,430
called an it then that will be the

00:21:03,640 --> 00:21:12,150
Apache that's less module similarly

00:21:06,430 --> 00:21:12,150
let's say that we wanted to do Apache

00:21:12,690 --> 00:21:19,030
customs SLS we would call this in the

00:21:16,120 --> 00:21:21,070
top file by saying a patchy dot custom

00:21:19,030 --> 00:21:30,370
it will make it will make some of these

00:21:21,070 --> 00:21:34,540
as we move move on alright so I've gotta

00:21:30,370 --> 00:21:40,060
now NSLs file what we're going to do to

00:21:34,540 --> 00:21:43,290
make this SLS file is start going over

00:21:40,060 --> 00:21:46,600
what this data structure looks like and

00:21:43,290 --> 00:21:49,630
the most basic way to do this is we make

00:21:46,600 --> 00:21:57,610
what we call an ID ID declaration I see

00:21:49,630 --> 00:22:00,700
this is fedora so and so we've got the

00:21:57,610 --> 00:22:05,590
ID up there which is httpd the name of

00:22:00,700 --> 00:22:14,290
the package that we want to have

00:22:05,590 --> 00:22:16,930
installed and we're done is Apache

00:22:14,290 --> 00:22:20,400
called httpd on fedora my brains gone

00:22:16,930 --> 00:22:20,400
blank thank thank you

00:22:22,299 --> 00:22:31,480
keep giving you a second all right

00:22:44,690 --> 00:23:12,380
all right maybe we're not done that's

00:22:57,870 --> 00:23:18,360
right sls isn't it oh no it's not right

00:23:12,380 --> 00:23:20,310
call justjust I'm ratchet now obviously

00:23:18,360 --> 00:23:25,380
I just told it to install Apache because

00:23:20,310 --> 00:23:30,660
I'm an idiot you know I've got this

00:23:25,380 --> 00:23:44,150
great fiber line into my house I'm just

00:23:30,660 --> 00:23:44,150
yeah okay I'm not going to wait

00:23:44,980 --> 00:23:52,730
all right now this is the most basic way

00:23:49,399 --> 00:23:54,710
to declare a stanza instead of an SLS

00:23:52,730 --> 00:23:56,960
file but let's say that we want this to

00:23:54,710 --> 00:24:00,169
be a little more robust we want to start

00:23:56,960 --> 00:24:03,230
apache as well we want to lay down a

00:24:00,169 --> 00:24:06,190
config file so let's start list are

00:24:03,230 --> 00:24:06,190
looking with that entails

00:24:19,889 --> 00:24:26,490
it looks like that so now we're going to

00:24:23,529 --> 00:24:26,490
start apache as well

00:24:44,390 --> 00:24:48,920
I bet I control seed out of yum at the

00:24:47,510 --> 00:24:52,540
wrong time and I've got a corrupted

00:24:48,920 --> 00:24:52,540
Apache install now what do you bet

00:25:21,830 --> 00:25:29,980
okay so what it's going to do now is it

00:25:26,659 --> 00:25:33,080
goes through that SLS file it reads in

00:25:29,980 --> 00:25:35,809
it reads in the data compares and then

00:25:33,080 --> 00:25:38,990
compiles that data down into an ordered

00:25:35,809 --> 00:25:41,600
list of things to execute in this case

00:25:38,990 --> 00:25:44,899
it's going to get us a list of 21 is

00:25:41,600 --> 00:25:48,169
going to be the PKG installed function

00:25:44,899 --> 00:25:51,679
for engine X the other is going to be

00:25:48,169 --> 00:25:54,440
the service stop running function for

00:25:51,679 --> 00:26:01,549
engine X it's going to execute those in

00:25:54,440 --> 00:26:04,730
a particular order yep I've messed up

00:26:01,549 --> 00:26:08,450
the UM repository have had to take me

00:26:04,730 --> 00:26:10,960
along now does it it's going to execute

00:26:08,450 --> 00:26:14,029
those in a in a particular order and

00:26:10,960 --> 00:26:19,429
then when it's done it's going to dump

00:26:14,029 --> 00:26:21,740
out a piece of data to us ah it says

00:26:19,429 --> 00:26:32,960
that it failed fantastic we get more

00:26:21,740 --> 00:26:35,000
colors that way now alright we've got

00:26:32,960 --> 00:26:36,559
some logging as to what goes on but now

00:26:35,000 --> 00:26:40,070
this is this really the important stuff

00:26:36,559 --> 00:26:43,159
if it's coming up in blue then it means

00:26:40,070 --> 00:26:45,649
that the result is true and changes

00:26:43,159 --> 00:26:48,730
happened if it comes up in red then the

00:26:45,649 --> 00:26:52,940
result is false if it comes up in green

00:26:48,730 --> 00:26:56,899
then the result is true and no changes

00:26:52,940 --> 00:26:58,940
happened now we've got a hopefully

00:26:56,899 --> 00:27:01,190
pretty clear view of what happened and

00:26:58,940 --> 00:27:04,970
it shows it in order of what half what

00:27:01,190 --> 00:27:06,559
occurred that we ran state package the

00:27:04,970 --> 00:27:10,039
name of the state was n genetics the

00:27:06,559 --> 00:27:11,779
function was installed it worked we've

00:27:10,039 --> 00:27:13,760
got a little comment we install package

00:27:11,779 --> 00:27:15,440
in Gen X and then we've got all of the

00:27:13,760 --> 00:27:19,039
changes that occurred with respect to

00:27:15,440 --> 00:27:20,600
this particular state and this this list

00:27:19,039 --> 00:27:21,830
right here if we were to install

00:27:20,600 --> 00:27:24,500
something with a lot of dependencies

00:27:21,830 --> 00:27:26,779
would list every package there was

00:27:24,500 --> 00:27:29,419
installed along with engine X when we

00:27:26,779 --> 00:27:41,270
executed that young command so that we

00:27:29,419 --> 00:27:42,710
get a very full dump of what happened if

00:27:41,270 --> 00:27:47,630
the package is installed already then

00:27:42,710 --> 00:27:48,980
this happens it doesn't try to install

00:27:47,630 --> 00:27:52,580
it it to text that its installed already

00:27:48,980 --> 00:27:54,980
in this case it by default is going to

00:27:52,580 --> 00:27:59,260
emit reporting on something that didn't

00:27:54,980 --> 00:27:59,260
change if we want to change that

00:28:10,179 --> 00:28:20,019
we change the state for both option in

00:28:12,970 --> 00:28:21,789
the config file to true okay and yep

00:28:20,019 --> 00:28:26,970
package engine X is already installed

00:28:21,789 --> 00:28:26,970
changes nothing Santa is your question

00:28:33,179 --> 00:29:00,450
exactly then this happens yes right I

00:28:56,350 --> 00:29:02,830
don't trust metadata for live systems

00:29:00,450 --> 00:29:05,549
well I shouldn't say that it's quite

00:29:02,830 --> 00:29:08,669
that blanket Lee I mean you have to but

00:29:05,549 --> 00:29:10,720
but I mean as far as salt is concerned

00:29:08,669 --> 00:29:12,789
when you're checking the stateful

00:29:10,720 --> 00:29:14,830
behavior of a system there we go we

00:29:12,789 --> 00:29:16,779
installed it again when you're checking

00:29:14,830 --> 00:29:19,360
this the stateful nature of a system

00:29:16,779 --> 00:29:22,840
what you do inside of a state is you

00:29:19,360 --> 00:29:25,480
first say this this is going to happen

00:29:22,840 --> 00:29:27,399
there we want this state to be there

00:29:25,480 --> 00:29:30,639
check to see if that state already

00:29:27,399 --> 00:29:33,009
exists if it does return what was in

00:29:30,639 --> 00:29:35,409
green if it doesn't then make then state

00:29:33,009 --> 00:29:36,909
exists and then return everything that

00:29:35,409 --> 00:29:40,360
you needed to do to make that state

00:29:36,909 --> 00:29:42,399
exists and and then return all

00:29:40,360 --> 00:29:49,830
everything that you did to make that

00:29:42,399 --> 00:29:49,830
state exists that makes sense ok

00:29:52,620 --> 00:30:08,290
now if we too quick this will be a silly

00:30:06,670 --> 00:30:13,270
ongoing demo that we're using the Apache

00:30:08,290 --> 00:30:15,070
module to install engine acts but my

00:30:13,270 --> 00:30:23,140
general apologies out there to the world

00:30:15,070 --> 00:30:25,300
of Apache developers now any questions

00:30:23,140 --> 00:30:36,070
on that on that basic structure of a top

00:30:25,300 --> 00:30:38,440
file okay now the next thing that we can

00:30:36,070 --> 00:30:39,580
do in a top file is I put a put a

00:30:38,440 --> 00:30:41,320
matcher in there and that was obviously

00:30:39,580 --> 00:30:44,590
a glob metric because those are the

00:30:41,320 --> 00:30:50,320
defaults if we want to mention something

00:30:44,590 --> 00:30:56,530
else then we can and so if I go back

00:30:50,320 --> 00:30:59,160
into the top file then we can make

00:30:56,530 --> 00:30:59,160
another matter

00:31:19,520 --> 00:31:25,940
and to assign a new SLS file so now this

00:31:24,320 --> 00:31:31,550
is going to say that we're only going to

00:31:25,940 --> 00:31:35,950
install swapping this swap eNOS SLS if

00:31:31,550 --> 00:31:40,370
the OS is fedora and we can match

00:31:35,950 --> 00:31:41,780
multiple things inside of this file so

00:31:40,370 --> 00:31:43,520
in this case it's actually fairly common

00:31:41,780 --> 00:31:46,760
to have on the top of your environment

00:31:43,520 --> 00:31:47,810
to star like this that says these are a

00:31:46,760 --> 00:31:50,870
few things that we're going to install

00:31:47,810 --> 00:32:05,840
on everybody and then get more granular

00:31:50,870 --> 00:32:08,840
as you go down okay now going to talk a

00:32:05,840 --> 00:32:11,240
little bit about this high state data

00:32:08,840 --> 00:32:13,280
structure before before I go into too

00:32:11,240 --> 00:32:15,980
much detail i'm going to get a spin up

00:32:13,280 --> 00:32:18,430
one that's a little more complicated and

00:32:15,980 --> 00:32:22,820
because we've been ridiculously terse

00:32:18,430 --> 00:32:26,650
and and discuss what's going on and one

00:32:22,820 --> 00:32:26,650
that's again a little more complicated

00:32:54,370 --> 00:33:11,260
let's see no no no let's make Andrew

00:33:05,299 --> 00:33:11,260
more than happy set the SWA penis to 100

00:33:14,200 --> 00:33:19,520
okay so let's start talking a little bit

00:33:17,390 --> 00:33:21,200
about what's going on in here and then

00:33:19,520 --> 00:33:24,590
I'll and I'll go back over into the

00:33:21,200 --> 00:33:27,710
specification file every single line in

00:33:24,590 --> 00:33:30,770
this has a name and is doing a specific

00:33:27,710 --> 00:33:34,059
thing so at the top we've got the ID

00:33:30,770 --> 00:33:38,030
declaration that's the vm swapping us

00:33:34,059 --> 00:33:41,770
now that's going to pass into the state

00:33:38,030 --> 00:33:45,440
function the name that's being used or

00:33:41,770 --> 00:33:46,940
or that fulfills the name argument which

00:33:45,440 --> 00:33:50,299
is mandatory when writing a state

00:33:46,940 --> 00:33:53,480
function next we've gone sister dot

00:33:50,299 --> 00:33:55,789
present this is the state declaration

00:33:53,480 --> 00:33:57,530
line this is where we're declaring what

00:33:55,789 --> 00:34:00,080
state it is that we're going to actually

00:33:57,530 --> 00:34:05,120
be using in this case we're using the

00:34:00,080 --> 00:34:06,830
services cotorro dot present state we're

00:34:05,120 --> 00:34:10,070
verifying that something is going to be

00:34:06,830 --> 00:34:12,619
present in the cisco system and then

00:34:10,070 --> 00:34:13,970
below that we've got any arguments that

00:34:12,619 --> 00:34:16,669
we're going to be passing into this

00:34:13,970 --> 00:34:23,599
system in well into this function in

00:34:16,669 --> 00:34:26,960
this case we've got value is 100 next so

00:34:23,599 --> 00:34:31,580
yeah so we've got ID declaration state

00:34:26,960 --> 00:34:35,440
declaration arguments now beyond that if

00:34:31,580 --> 00:34:42,800
we go back to our patchy are sorry

00:34:35,440 --> 00:34:47,770
arpeggiation jennex situation here we've

00:34:42,800 --> 00:34:47,770
made it a little different so

00:34:49,070 --> 00:34:55,380
we've got the state declaration or sorry

00:34:52,920 --> 00:34:57,510
the engine X which is the ID declaration

00:34:55,380 --> 00:35:00,150
package which is the state declaration

00:34:57,510 --> 00:35:03,570
and we've separated out the state and

00:35:00,150 --> 00:35:05,160
the function and the function in this

00:35:03,570 --> 00:35:08,250
case is installed in the function in

00:35:05,160 --> 00:35:10,710
this case is running so we can add

00:35:08,250 --> 00:35:13,130
multiple state declarations sitting

00:35:10,710 --> 00:35:16,290
happily below one ID declaration the

00:35:13,130 --> 00:35:18,180
benefit there is that we don't have to

00:35:16,290 --> 00:35:21,540
repeat saying that its engine X every

00:35:18,180 --> 00:35:23,850
time but let's say that it's not engine

00:35:21,540 --> 00:35:35,910
X every time which actually appears to

00:35:23,850 --> 00:35:44,640
be the case oh I can't remember how to

00:35:35,910 --> 00:35:50,580
do this in system d anyway let's say

00:35:44,640 --> 00:35:56,940
that it's not then we can override the

00:35:50,580 --> 00:36:03,060
ID and one of these sub guys here with

00:35:56,940 --> 00:36:05,640
what's called a name demon ok I know

00:36:03,060 --> 00:36:10,410
it's not engine XD anybody remember what

00:36:05,640 --> 00:36:19,220
is in flora no ok ok as long as I'm a

00:36:10,410 --> 00:36:27,620
good company what yeah yeah it's true I

00:36:19,220 --> 00:36:30,540
might have a bad you doing something ok

00:36:27,620 --> 00:36:32,730
anyway we can add more arguments into

00:36:30,540 --> 00:36:38,460
these as well the other thing that we

00:36:32,730 --> 00:36:42,420
can do is add a type of statement in

00:36:38,460 --> 00:36:44,310
called a requisite so obviously we don't

00:36:42,420 --> 00:36:46,080
want to try and see if the service

00:36:44,310 --> 00:36:49,700
should start running unless we verified

00:36:46,080 --> 00:36:52,470
that the package is installed ok now

00:36:49,700 --> 00:36:55,710
this is how this is how we begin to

00:36:52,470 --> 00:36:58,890
order what's going on inside of an SLS

00:36:55,710 --> 00:37:01,470
file or inside of the the dsls files as

00:36:58,890 --> 00:37:11,730
a whole and so we can say require

00:37:01,470 --> 00:37:14,340
a package engine X and so now we're

00:37:11,730 --> 00:37:16,020
going to just verify rather quickly that

00:37:14,340 --> 00:37:20,099
engine ex has been installed before we

00:37:16,020 --> 00:37:22,859
try and run the surface similarly let's

00:37:20,099 --> 00:37:24,780
say no no no that's not enough if the

00:37:22,859 --> 00:37:28,170
engine X package has ever changed or

00:37:24,780 --> 00:37:33,690
upgraded then I want to restart engine X

00:37:28,170 --> 00:37:35,580
so I want to reload engine X and so we

00:37:33,690 --> 00:37:39,030
can use a different requisite statement

00:37:35,580 --> 00:37:40,980
the these requisites statements I mean

00:37:39,030 --> 00:37:46,170
they've got their own little class of

00:37:40,980 --> 00:37:47,880
statement where there's currently three

00:37:46,170 --> 00:37:51,119
requisite statements and three what we

00:37:47,880 --> 00:37:52,650
call requisite in statements so in this

00:37:51,119 --> 00:37:54,300
case we're saying that make sure that

00:37:52,650 --> 00:37:57,210
this service doesn't do anything until

00:37:54,300 --> 00:37:58,590
we've required engine X or until we

00:37:57,210 --> 00:38:01,440
verified that engine ex has been

00:37:58,590 --> 00:38:05,849
installed the next director this

00:38:01,440 --> 00:38:07,940
statement is called watch this requires

00:38:05,849 --> 00:38:15,900
does exactly the same thing as require

00:38:07,940 --> 00:38:19,800
but it also will reload or restart if we

00:38:15,900 --> 00:38:22,710
say reload true then it will be load but

00:38:19,800 --> 00:38:25,560
it will restart engine X if we ever get

00:38:22,710 --> 00:38:33,690
a return from the package installed that

00:38:25,560 --> 00:38:35,700
has stuff in that changes dictionary now

00:38:33,690 --> 00:38:36,960
one of one of our major differentiating

00:38:35,700 --> 00:38:38,609
factors from some of the other

00:38:36,960 --> 00:38:43,080
configuration management systems out

00:38:38,609 --> 00:38:46,230
there is how we run it's um it's common

00:38:43,080 --> 00:38:48,390
in a different dominant configuration

00:38:46,230 --> 00:38:52,290
management system what they do is that

00:38:48,390 --> 00:38:54,720
they start an event loop and so if an

00:38:52,290 --> 00:38:58,260
event occurs then they notify another

00:38:54,720 --> 00:39:00,420
aspect of of their configuration

00:38:58,260 --> 00:39:02,990
management run that this needs to occur

00:39:00,420 --> 00:39:05,130
I've noticed that that event loop has

00:39:02,990 --> 00:39:08,190
occasionally done things like restart

00:39:05,130 --> 00:39:10,780
apache seven times in a run which fills

00:39:08,190 --> 00:39:13,369
me with fear

00:39:10,780 --> 00:39:15,230
so there's no event loop in here I've

00:39:13,369 --> 00:39:16,789
also noticed that building an event loop

00:39:15,230 --> 00:39:19,730
like that can generally use up a lot

00:39:16,789 --> 00:39:22,760
more RAM and resources and is a little

00:39:19,730 --> 00:39:26,599
slower and we want salt to always be

00:39:22,760 --> 00:39:28,250
highly performant not just because we

00:39:26,599 --> 00:39:30,920
want it to be fast and you always want

00:39:28,250 --> 00:39:32,720
something to be fast but much more so

00:39:30,920 --> 00:39:35,630
because we wanted to have the lowest

00:39:32,720 --> 00:39:40,160
possible possible impact on target

00:39:35,630 --> 00:39:41,839
systems yeah we don't we don't want to

00:39:40,160 --> 00:39:48,170
get too much of that that Heisenberg

00:39:41,839 --> 00:39:50,839
effect going on so how this works is

00:39:48,170 --> 00:39:53,480
that we take this data structure and we

00:39:50,839 --> 00:39:56,780
compile it into this finite list of

00:39:53,480 --> 00:40:00,079
things to do in order so when we say

00:39:56,780 --> 00:40:02,990
require or watch it's going to make sure

00:40:00,079 --> 00:40:07,670
that no matter what everything that is

00:40:02,990 --> 00:40:10,670
required by service service done running

00:40:07,670 --> 00:40:14,329
for engine X is going to happen before

00:40:10,670 --> 00:40:16,819
we even start looking at this guy so

00:40:14,329 --> 00:40:23,119
that we have a full data set of what to

00:40:16,819 --> 00:40:24,470
work with okay now similarly so we've

00:40:23,119 --> 00:40:25,490
gotta watch statement in here and I

00:40:24,470 --> 00:40:27,829
mentioned that there's these other

00:40:25,490 --> 00:40:30,650
things called requisite in state

00:40:27,829 --> 00:40:32,750
business similarly we can say well maybe

00:40:30,650 --> 00:40:35,119
I don't want to define and maybe I don't

00:40:32,750 --> 00:40:37,220
want to keep this big list of everything

00:40:35,119 --> 00:40:39,980
that we're requiring or watching inside

00:40:37,220 --> 00:40:42,260
of the service stanza here maybe I want

00:40:39,980 --> 00:40:45,319
to do it every time I declare a package

00:40:42,260 --> 00:40:47,420
or a file i want to say I've declared

00:40:45,319 --> 00:40:50,000
this package of this file and just so

00:40:47,420 --> 00:40:52,849
you know this stanza shouldn't should

00:40:50,000 --> 00:40:54,980
always run before this other one and

00:40:52,849 --> 00:40:57,490
this other one's going to require it so

00:40:54,980 --> 00:40:57,490
we can do this

00:41:05,440 --> 00:41:14,360
okay so this is the exact same thing we

00:41:09,320 --> 00:41:16,460
just did just backwards so now we're

00:41:14,360 --> 00:41:19,220
saying that make sure that we're

00:41:16,460 --> 00:41:21,310
watching service that we're watching

00:41:19,220 --> 00:41:25,360
packaged uninstalled for engine acts

00:41:21,310 --> 00:41:27,890
inside of service engine X makes sense

00:41:25,360 --> 00:41:30,710
this makes it very easy to be able to

00:41:27,890 --> 00:41:33,610
say that lets say that let's say that

00:41:30,710 --> 00:41:37,520
we've got got it the way it was before

00:41:33,610 --> 00:41:39,440
like this and then we're extending this

00:41:37,520 --> 00:41:41,740
SLS file somewhere else and adding a

00:41:39,440 --> 00:41:46,220
config file that we want to be watched

00:41:41,740 --> 00:41:49,040
by the engine deck surface we can

00:41:46,220 --> 00:41:53,330
declare watch in in this other file and

00:41:49,040 --> 00:41:56,060
it will map back this is this kind of

00:41:53,330 --> 00:42:04,100
similar to a puppet notifying that kind

00:41:56,060 --> 00:42:05,960
of all right so we've got requisites

00:42:04,100 --> 00:42:10,430
we've got the basic ideas going on in

00:42:05,960 --> 00:42:14,110
here ok now I'm going to I'm going to

00:42:10,430 --> 00:42:14,110
walk over to this guy

00:42:23,970 --> 00:42:34,780
and our documentation I put the link in

00:42:30,520 --> 00:42:39,700
20 no this is the right document for

00:42:34,780 --> 00:42:43,119
some reason my anyway sorry alright this

00:42:39,700 --> 00:42:46,570
data structure has a spec file it's well

00:42:43,119 --> 00:42:49,390
it's got a specification that defines

00:42:46,570 --> 00:42:52,990
exactly what every little piece of the

00:42:49,390 --> 00:42:54,310
SLS data does the benefit here is that

00:42:52,990 --> 00:42:57,190
you can always come back and reference

00:42:54,310 --> 00:42:59,619
this to say oh well what does this

00:42:57,190 --> 00:43:00,790
hierarchy really look like in case

00:42:59,619 --> 00:43:01,990
you're scratching your head and going

00:43:00,790 --> 00:43:05,650
I'm getting an error and I don't know

00:43:01,990 --> 00:43:10,180
what that means because that happens to

00:43:05,650 --> 00:43:11,890
the best of us right and I mean that is

00:43:10,180 --> 00:43:13,630
in me giving you an error that isn't

00:43:11,890 --> 00:43:15,609
intuitive enough I'm working on it

00:43:13,630 --> 00:43:17,770
always always willing always happy to

00:43:15,609 --> 00:43:21,730
have feedback on ways to make errors a

00:43:17,770 --> 00:43:25,270
little more intuitive okay but if we go

00:43:21,730 --> 00:43:29,050
down here to the bottom we've got a

00:43:25,270 --> 00:43:30,880
large example of all of the different

00:43:29,050 --> 00:43:33,160
things that we can we can shove in here

00:43:30,880 --> 00:43:34,990
so we've got include declarations that

00:43:33,160 --> 00:43:38,440
allows us to have references to other

00:43:34,990 --> 00:43:41,200
sls modules extend declarations that

00:43:38,440 --> 00:43:44,380
allows us to basically extend or

00:43:41,200 --> 00:43:48,280
overwrite the behavior of any other

00:43:44,380 --> 00:43:50,020
module that we've included and then

00:43:48,280 --> 00:43:51,700
we've got our basic hierarchy right here

00:43:50,020 --> 00:43:53,710
that we've already talked about ID

00:43:51,700 --> 00:43:55,869
declaration state declaration the

00:43:53,710 --> 00:43:58,660
optional function can be here or here if

00:43:55,869 --> 00:44:01,089
we use that dot delimitation all of the

00:43:58,660 --> 00:44:02,619
keyword arguments we can override the

00:44:01,089 --> 00:44:06,130
name if want otherwise the ID

00:44:02,619 --> 00:44:09,310
declaration is the name and then do a

00:44:06,130 --> 00:44:10,750
requisite declaration and a list of all

00:44:09,310 --> 00:44:15,819
of the things that something's going to

00:44:10,750 --> 00:44:18,940
require and then to quickly mention

00:44:15,819 --> 00:44:23,770
there's one more aspect here called

00:44:18,940 --> 00:44:26,050
names names allows us to take all of the

00:44:23,770 --> 00:44:29,170
functions and all of the arguments for

00:44:26,050 --> 00:44:32,109
an ID and a state and then replicate it

00:44:29,170 --> 00:44:34,050
with lots of different names so we can

00:44:32,109 --> 00:44:38,910
do something like

00:44:34,050 --> 00:44:46,610
this I was anti-climactic when I hit the

00:44:38,910 --> 00:44:46,610
wrong button isn't it now so let's see

00:45:12,380 --> 00:45:20,340
obviously we're not going to have a

00:45:14,010 --> 00:45:26,480
package name Python packages but now we

00:45:20,340 --> 00:45:47,520
can say names and come in and say Python

00:45:26,480 --> 00:45:52,170
Mako xenos Python jinja too okay

00:45:47,520 --> 00:45:53,850
so this named statement then we

00:45:52,170 --> 00:45:57,330
basically covered everything you can do

00:45:53,850 --> 00:45:58,740
in these files and that does cover every

00:45:57,330 --> 00:46:00,570
piece of functionality you need in

00:45:58,740 --> 00:46:02,910
config management to make this happen

00:46:00,570 --> 00:46:09,180
outside of when we talk about Jinjin

00:46:02,910 --> 00:46:13,220
templating but so now we're going to run

00:46:09,180 --> 00:46:15,870
pkg installed for all of these

00:46:13,220 --> 00:46:17,520
individual packages and it separates

00:46:15,870 --> 00:46:19,860
them all out into their own atomic

00:46:17,520 --> 00:46:25,650
States for you so that you can make

00:46:19,860 --> 00:46:27,950
something again much more terse actually

00:46:25,650 --> 00:46:30,180
not going to save this because I've used

00:46:27,950 --> 00:46:34,790
package names that don't particularly

00:46:30,180 --> 00:46:34,790
work okay

00:46:41,970 --> 00:46:52,510
so despite the fact that hopefully when

00:46:50,830 --> 00:46:57,099
I'm going on when I'm when I'm going

00:46:52,510 --> 00:47:01,000
over there ya know it the hope is that

00:46:57,099 --> 00:47:02,830
it just kind of makes sense but we've

00:47:01,000 --> 00:47:05,859
got all of these individual little

00:47:02,830 --> 00:47:07,990
components and the more you work with

00:47:05,859 --> 00:47:09,310
salt and become become a little more

00:47:07,990 --> 00:47:11,500
aware of what these individual

00:47:09,310 --> 00:47:12,849
components are what they look like then

00:47:11,500 --> 00:47:15,580
it's going to make more sense to be able

00:47:12,849 --> 00:47:19,000
to go back to that spec but frankly to

00:47:15,580 --> 00:47:21,490
get going most people don't need to so

00:47:19,000 --> 00:47:24,339
to get the goal is that to get going

00:47:21,490 --> 00:47:26,080
with salt is very easy but as time goes

00:47:24,339 --> 00:47:31,800
on you will continue to learn more about

00:47:26,080 --> 00:47:34,420
the depths and breadth of the system ok

00:47:31,800 --> 00:47:37,420
i'm almost out of time for this for this

00:47:34,420 --> 00:47:40,480
chunk and so i'll probably pick up on

00:47:37,420 --> 00:47:42,430
pick up on this in the next hour so i'll

00:47:40,480 --> 00:47:50,650
just get a few more in state

00:47:42,430 --> 00:47:53,250
documentation that's that's great that's

00:47:50,650 --> 00:47:53,250
not a link

00:47:53,910 --> 00:48:13,210
so we've got documentation on how to lay

00:47:56,710 --> 00:48:20,800
out sls data we've got there's a

00:48:13,210 --> 00:48:25,000
tutorial in here here we go a full list

00:48:20,800 --> 00:48:27,910
of built-in states so we took a we took

00:48:25,000 --> 00:48:29,440
a brief look at service running we took

00:48:27,910 --> 00:48:31,589
a brief look at package that installed

00:48:29,440 --> 00:48:34,960
we took a brief look at cisco torial dot

00:48:31,589 --> 00:48:38,470
present we've got quite a few states

00:48:34,960 --> 00:48:41,109
that are available to use inside of salt

00:48:38,470 --> 00:48:43,690
right now and they're all documented

00:48:41,109 --> 00:48:47,200
right up here on on the documentation

00:48:43,690 --> 00:48:48,970
and generally have examples so we can

00:48:47,200 --> 00:48:51,220
see that if we want to add an alias to

00:48:48,970 --> 00:48:52,720
the aliases file for a mail server than

00:48:51,220 --> 00:48:55,420
we can define it in salt and say

00:48:52,720 --> 00:48:59,320
username alias is present and what the

00:48:55,420 --> 00:49:03,099
target is and we can just go we could

00:48:59,320 --> 00:49:06,849
I'm not going to I'll mention a few of

00:49:03,099 --> 00:49:08,550
these of note file for instance is

00:49:06,849 --> 00:49:12,760
generally going to be one of the most

00:49:08,550 --> 00:49:15,310
widely used statements and one that has

00:49:12,760 --> 00:49:18,250
more arguments so in this case we're

00:49:15,310 --> 00:49:21,339
going to be laying down HTTP HTTP com

00:49:18,250 --> 00:49:24,580
file we're going to be using the managed

00:49:21,339 --> 00:49:27,849
function inside of the file module the

00:49:24,580 --> 00:49:30,550
source is back on the salt server in the

00:49:27,849 --> 00:49:33,550
apache directory and it's named HTTP

00:49:30,550 --> 00:49:37,720
cough so these config files are in line

00:49:33,550 --> 00:49:40,180
with all of the sls files and we're able

00:49:37,720 --> 00:49:42,089
to declare any of the general things

00:49:40,180 --> 00:49:48,099
that you would be declaring with a file

00:49:42,089 --> 00:49:50,650
user group mode etc then we can say that

00:49:48,099 --> 00:49:51,730
this file isn't a flat file that was

00:49:50,650 --> 00:49:54,070
just downloading and putting in the

00:49:51,730 --> 00:49:56,800
place but this file needs to be rendered

00:49:54,070 --> 00:49:58,750
as a ginger template right now we

00:49:56,800 --> 00:50:03,040
support three types of templating

00:49:58,750 --> 00:50:05,710
engines in file managed one is jinja the

00:50:03,040 --> 00:50:07,300
second is Mako you do have to have Mako

00:50:05,710 --> 00:50:09,580
installed on the minions to be able to

00:50:07,300 --> 00:50:11,830
use it the third is a pure python

00:50:09,580 --> 00:50:15,010
renderer I'm sorry a pure python

00:50:11,830 --> 00:50:17,380
template so it'll just execute a

00:50:15,010 --> 00:50:18,670
function in a Python file and then

00:50:17,380 --> 00:50:19,990
whatever the string is that have

00:50:18,670 --> 00:50:22,030
function returns will be written

00:50:19,990 --> 00:50:24,130
directly to the file so we've got a

00:50:22,030 --> 00:50:30,670
couple of ways that we can use templates

00:50:24,130 --> 00:50:34,090
inside of files okay and then as we go

00:50:30,670 --> 00:50:36,000
down these state modules are going to

00:50:34,090 --> 00:50:38,440
come with a lot of individual functions

00:50:36,000 --> 00:50:40,510
some while some many more than others

00:50:38,440 --> 00:50:42,700
file probably has more than any at this

00:50:40,510 --> 00:50:44,620
point I think they can do different

00:50:42,700 --> 00:50:47,200
things so we can come in here and say

00:50:44,620 --> 00:50:50,650
that we want to make a directory it's

00:50:47,200 --> 00:50:51,820
going to be owned by Fred and we're

00:50:50,650 --> 00:50:54,040
going to make sure that directory is

00:50:51,820 --> 00:50:57,970
there by make doors we're making sure

00:50:54,040 --> 00:51:01,500
that if stuff isn't there then we'll

00:50:57,970 --> 00:51:04,750
make the stuff directory and sub stuff

00:51:01,500 --> 00:51:05,920
instead of erroring out and saying I can

00:51:04,750 --> 00:51:08,670
make a directory there it's a

00:51:05,920 --> 00:51:11,670
subdirectory of a non-existent directory

00:51:08,670 --> 00:51:11,670
okay

00:51:19,589 --> 00:51:25,569
santha we fix this oh well the

00:51:22,420 --> 00:51:27,039
underscore are always not even here all

00:51:25,569 --> 00:51:33,819
the underscore ones he knew i was going

00:51:27,039 --> 00:51:36,190
to rag on them because of this okay if

00:51:33,819 --> 00:51:37,809
there's a function inside of inside of a

00:51:36,190 --> 00:51:38,949
module whether it be a modular state

00:51:37,809 --> 00:51:40,059
module or whatever that's got an

00:51:38,949 --> 00:51:43,539
underscore in front of it it gets

00:51:40,059 --> 00:51:44,559
ignored by the external access system so

00:51:43,539 --> 00:51:50,319
it shouldn't be showing up at the

00:51:44,559 --> 00:51:53,319
documentation so there's a bug in our

00:51:50,319 --> 00:51:55,119
dogs okay but so we come down here and

00:51:53,319 --> 00:51:56,589
we're able to see that we've got quite a

00:51:55,119 --> 00:51:58,359
quite a few functions we've got five

00:51:56,589 --> 00:52:01,809
apps in' make sure that the file isn't

00:51:58,359 --> 00:52:04,900
there file that append make sure that a

00:52:01,809 --> 00:52:07,749
certain chunk of text is just magically

00:52:04,900 --> 00:52:09,459
at the end of a file commenting a phonic

00:52:07,749 --> 00:52:11,410
commenting lines in a file directory

00:52:09,459 --> 00:52:15,910
make sure files manage that's going to

00:52:11,410 --> 00:52:18,309
be one of the most common ones found out

00:52:15,910 --> 00:52:22,059
recurse is kind of kind of nifty you're

00:52:18,309 --> 00:52:26,349
able to set up a directory hierarchy on

00:52:22,059 --> 00:52:28,779
the master and then recursively copy all

00:52:26,349 --> 00:52:32,380
of those files into a directory on the

00:52:28,779 --> 00:52:33,609
minion and verify any changes so you can

00:52:32,380 --> 00:52:36,219
have it you can have a directory of

00:52:33,609 --> 00:52:38,949
files and then occasionally change one

00:52:36,219 --> 00:52:41,289
or two and then recursively copy all of

00:52:38,949 --> 00:52:43,059
those files down and if it detects that

00:52:41,289 --> 00:53:00,390
one file has changed then it'll just

00:52:43,059 --> 00:53:03,219
bring that individual change in I

00:53:00,390 --> 00:53:07,150
wouldn't use it for a full source tree

00:53:03,219 --> 00:53:13,150
if you have a lot of minions it's very

00:53:07,150 --> 00:53:17,079
performant if it's not fanning out so

00:53:13,150 --> 00:53:20,199
that does work it is it is capable of

00:53:17,079 --> 00:53:23,670
dealing with very large trees i

00:53:20,199 --> 00:53:23,670
generally test it with the kernel source

00:53:24,290 --> 00:53:30,240
but yeah I wouldn't I wouldn't do if

00:53:27,090 --> 00:53:32,550
you're rolling out source updates then

00:53:30,240 --> 00:53:33,770
you put 22 larger environments and you'd

00:53:32,550 --> 00:53:35,940
probably want to come up with something

00:53:33,770 --> 00:53:39,170
something else like using a package

00:53:35,940 --> 00:53:43,070
management system or are saying or what

00:53:39,170 --> 00:53:45,120
is it Yahoo that's using BitTorrent

00:53:43,070 --> 00:53:47,460
there's a lot of creative ways to solve

00:53:45,120 --> 00:53:49,440
that particular problem that's

00:53:47,460 --> 00:53:53,100
definitely not a one-size-fits-all for

00:53:49,440 --> 00:53:55,440
that problem it can get complicated okay

00:53:53,100 --> 00:54:05,130
symlink we're setting up symlink touch

00:53:55,440 --> 00:54:13,500
make sure if I was there okay so lots of

00:54:05,130 --> 00:54:15,120
stuff in there now pillar I don't we

00:54:13,500 --> 00:54:17,790
might not have enough time to go into

00:54:15,120 --> 00:54:20,910
depth on what Hillary's today but pillar

00:54:17,790 --> 00:54:24,750
allows you to create a structure of data

00:54:20,910 --> 00:54:26,370
on the master in a different tree it

00:54:24,750 --> 00:54:29,940
works very similar to the state tree

00:54:26,370 --> 00:54:33,930
would let you assign arbitrary data back

00:54:29,940 --> 00:54:37,740
to individual minions so that that data

00:54:33,930 --> 00:54:40,290
is always minion specific it allows you

00:54:37,740 --> 00:54:44,130
to do some really tricky and higher

00:54:40,290 --> 00:54:49,440
level things you don't need to use it

00:54:44,130 --> 00:54:51,240
but it's available some some guys in the

00:54:49,440 --> 00:54:54,240
community swear by they actually write

00:54:51,240 --> 00:54:56,670
all of their sls data raw inside of

00:54:54,240 --> 00:55:02,310
their pillars and then just realize them

00:54:56,670 --> 00:55:04,050
in sls files but personally i only is

00:55:02,310 --> 00:55:07,200
pillar for the occasional little chunks

00:55:04,050 --> 00:55:08,880
of data but jeff we have time then we'll

00:55:07,200 --> 00:55:14,000
cover will cover pillar and more detail

00:55:08,880 --> 00:55:14,000
little later on alright

00:55:14,240 --> 00:55:20,690
now let's say that we want to put some

00:55:17,540 --> 00:55:24,380
logic inside of our sls files let's say

00:55:20,690 --> 00:55:25,700
that our SOS files need to repeat the

00:55:24,380 --> 00:55:31,520
same thing over and over again with

00:55:25,700 --> 00:55:34,040
minor modification aka a loop let's say

00:55:31,520 --> 00:55:35,869
there are so less files need to apply

00:55:34,040 --> 00:55:39,580
different names for different packages

00:55:35,869 --> 00:55:41,570
based on different operating systems or

00:55:39,580 --> 00:55:44,570
let's say that we want to define a

00:55:41,570 --> 00:55:48,830
function function like behavior instead

00:55:44,570 --> 00:55:50,750
of our SLS files we can use the ginger

00:55:48,830 --> 00:55:52,160
templating engine on top of it now

00:55:50,750 --> 00:55:57,110
that's the default that it comes with

00:55:52,160 --> 00:55:59,720
like I was saying earlier SLS files

00:55:57,110 --> 00:56:01,820
they're just data structures I no insult

00:55:59,720 --> 00:56:04,940
doesn't care how it gets the data

00:56:01,820 --> 00:56:07,760
structure all it cares about is that it

00:56:04,940 --> 00:56:09,020
gets the data structure and so we don't

00:56:07,760 --> 00:56:11,150
need to represent it the way we've been

00:56:09,020 --> 00:56:13,280
doing here with yellow we can represent

00:56:11,150 --> 00:56:15,100
it in JSON we can represent an impure

00:56:13,280 --> 00:56:17,990
Python as long as that data structures

00:56:15,100 --> 00:56:19,760
represented we can represent it in ya

00:56:17,990 --> 00:56:21,290
M'Lynn then run it through cheetah we

00:56:19,760 --> 00:56:22,790
can represent any amylin runner through

00:56:21,290 --> 00:56:26,690
make oh we're going to do whatever you

00:56:22,790 --> 00:56:29,150
want whatever floats your boat the

00:56:26,690 --> 00:56:32,260
default is ginger because Jinja is a

00:56:29,150 --> 00:56:34,730
very widely used and very performant

00:56:32,260 --> 00:56:37,820
templating language it's also very

00:56:34,730 --> 00:56:40,460
similar to to django django templates

00:56:37,820 --> 00:56:41,900
and things of that nature so we felt as

00:56:40,460 --> 00:56:48,200
though would it would be good for

00:56:41,900 --> 00:56:53,150
general adoption now using ginger inside

00:56:48,200 --> 00:56:56,180
of your inside of your state's actually

00:56:53,150 --> 00:56:58,010
instead of drawing all of these out I'm

00:56:56,180 --> 00:57:00,640
going to cheat and show you some that

00:56:58,010 --> 00:57:00,640
already exists

00:57:21,630 --> 00:57:34,740
oh yeah that's a good one all right so

00:57:30,259 --> 00:57:36,210
let's say that we're installing them and

00:57:34,740 --> 00:57:37,500
we've got a couple of different

00:57:36,210 --> 00:57:40,380
operating systems that we need to deal

00:57:37,500 --> 00:57:45,299
with so we can pull out the ginger right

00:57:40,380 --> 00:57:47,160
here and say you know its name vim by

00:57:45,299 --> 00:57:49,619
default but if it's but if we've got a

00:57:47,160 --> 00:57:53,130
redhead system then the name is going to

00:57:49,619 --> 00:57:56,190
be vim enhance and end or if statement

00:57:53,130 --> 00:57:58,440
and so inside of ginger inside of these

00:57:56,190 --> 00:58:00,839
ginger templates you have access to

00:57:58,440 --> 00:58:03,000
grain all of the grains for that

00:58:00,839 --> 00:58:07,890
particular system you also have access

00:58:03,000 --> 00:58:09,960
to directly execute any modules please

00:58:07,890 --> 00:58:12,089
just do that to gather data don't like

00:58:09,960 --> 00:58:14,759
do things in the ginger templating that

00:58:12,089 --> 00:58:16,559
kind of breaks the model but at the end

00:58:14,759 --> 00:58:20,519
of the day it's not my system insurers

00:58:16,559 --> 00:58:22,980
do what you want but so all of this

00:58:20,519 --> 00:58:25,710
information is available also all the

00:58:22,980 --> 00:58:27,359
information from pillar is available

00:58:25,710 --> 00:58:29,910
inside of the ginger template as well

00:58:27,359 --> 00:58:33,450
but so we can create loops and things of

00:58:29,910 --> 00:58:35,549
this nature now we were really excited

00:58:33,450 --> 00:58:37,160
about using jinja one of the one of the

00:58:35,549 --> 00:58:41,609
first deployments that I had salt on

00:58:37,160 --> 00:58:45,799
we're migrating away from a different

00:58:41,609 --> 00:58:47,759
configuration management system and

00:58:45,799 --> 00:58:49,349
thanks to some of the flexibility that

00:58:47,759 --> 00:58:51,809
we had inside of ginger and the fact

00:58:49,349 --> 00:58:54,599
that we could very easily call modules

00:58:51,809 --> 00:58:58,319
or directly shell out without building

00:58:54,599 --> 00:59:02,609
in extra components and we can directly

00:58:58,319 --> 00:59:05,190
access a law this the module API from

00:59:02,609 --> 00:59:08,819
these files were able to do some things

00:59:05,190 --> 00:59:12,470
like take we took our solar install at

00:59:08,819 --> 00:59:14,819
that particular company and it was using

00:59:12,470 --> 00:59:19,440
with the old configuration management

00:59:14,819 --> 00:59:24,359
system there were 12 configuration files

00:59:19,440 --> 00:59:25,859
in there three files declaring code for

00:59:24,359 --> 00:59:29,579
the old for the other configuration

00:59:25,859 --> 00:59:31,680
management system and and there were

00:59:29,579 --> 00:59:32,970
about seven hundred lines of code for

00:59:31,680 --> 00:59:35,460
the other configuration management

00:59:32,970 --> 00:59:37,620
system when we convert it to salt

00:59:35,460 --> 00:59:40,080
because we could use some basic loops

00:59:37,620 --> 00:59:43,200
and we were able to inject a little more

00:59:40,080 --> 00:59:47,130
information the result was that instead

00:59:43,200 --> 00:59:51,480
of it being 15 files it was now three it

00:59:47,130 --> 00:59:55,350
was all done in about 60 60 65 lines of

00:59:51,480 --> 00:59:57,090
salt sls and instead of having 12 config

00:59:55,350 --> 00:59:58,680
files we only had three config files

00:59:57,090 --> 01:00:00,780
because they're all basically identical

00:59:58,680 --> 01:00:05,580
and we were able to inject more data

01:00:00,780 --> 01:00:09,420
into them but anyway you can do things

01:00:05,580 --> 01:00:11,900
that are ridiculously powerful by moving

01:00:09,420 --> 01:00:16,200
over and injecting some some raw code

01:00:11,900 --> 01:00:18,330
now the main idea here again going back

01:00:16,200 --> 01:00:19,860
to one when I when I made the joke about

01:00:18,330 --> 01:00:25,050
a beard and writing a programming

01:00:19,860 --> 01:00:30,330
language is that is that we have at our

01:00:25,050 --> 01:00:34,710
disposal many interfaces to inject pure

01:00:30,330 --> 01:00:36,090
code into into our processes so we might

01:00:34,710 --> 01:00:38,810
as well use what's already there other

01:00:36,090 --> 01:00:41,850
guys have done a fantastic job of

01:00:38,810 --> 01:00:44,160
building these sorts of these sorts of

01:00:41,850 --> 01:00:45,870
things for us and so we're able to

01:00:44,160 --> 01:00:48,030
piggyback on other people's work and

01:00:45,870 --> 01:00:50,790
we're also able to then since it's

01:00:48,030 --> 01:00:53,190
pluggable integrate with anybody's

01:00:50,790 --> 01:00:55,020
existing systems which is why we've got

01:00:53,190 --> 01:00:58,350
companies that have come back and said

01:00:55,020 --> 01:01:01,650
to us hey you know we like ginger and

01:00:58,350 --> 01:01:03,180
all but we're a mako shop and they're

01:01:01,650 --> 01:01:04,880
just going to run may go on everything

01:01:03,180 --> 01:01:08,340
instead of ginger and they can do that

01:01:04,880 --> 01:01:13,530
you can run you can run it any way you'd

01:01:08,340 --> 01:01:17,160
like I've never had someone not using

01:01:13,530 --> 01:01:18,750
yam although everybody likes to use yamo

01:01:17,160 --> 01:01:23,990
occasionally they'll inject a pure

01:01:18,750 --> 01:01:28,470
python one okay

01:01:23,990 --> 01:01:35,600
running States I did one example staked

01:01:28,470 --> 01:01:35,600
out high state let's go back over here

01:01:39,560 --> 01:01:47,190
hi state says go out look at the I must

01:01:45,150 --> 01:01:49,310
have sent a bad argument into that swap

01:01:47,190 --> 01:01:56,280
eNOS call didn't I that looks beautiful

01:01:49,310 --> 01:01:59,250
now we say staked out high state which

01:01:56,280 --> 01:02:02,970
says go out get that top file follow

01:01:59,250 --> 01:02:04,920
orders do with the top file says we can

01:02:02,970 --> 01:02:07,820
in turn say you know I don't want to

01:02:04,920 --> 01:02:12,470
actually run anything but I want to see

01:02:07,820 --> 01:02:16,830
what the high state actually looks like

01:02:12,470 --> 01:02:21,510
and so we can see the compiled high

01:02:16,830 --> 01:02:25,770
state fantastic let's say that we want

01:02:21,510 --> 01:02:30,270
to see what the what we call the low

01:02:25,770 --> 01:02:31,950
state looks like the low state is going

01:02:30,270 --> 01:02:35,460
to be the ordered list in which things

01:02:31,950 --> 01:02:37,770
are going to be running and so we see

01:02:35,460 --> 01:02:40,740
that by default and this is before

01:02:37,770 --> 01:02:43,320
evaluating those requisite statements

01:02:40,740 --> 01:02:49,080
it's going to first try this guy and

01:02:43,320 --> 01:02:51,720
this guy then this guy but so that

01:02:49,080 --> 01:02:54,360
allows us to get very close in and say

01:02:51,720 --> 01:02:55,680
this is this is all those SLS files that

01:02:54,360 --> 01:03:00,930
I mean this is where they really look

01:02:55,680 --> 01:03:02,400
like when we tear them apart next let's

01:03:00,930 --> 01:03:06,000
say that we don't want to deal with the

01:03:02,400 --> 01:03:11,150
top file I just want to directly grab a

01:03:06,000 --> 01:03:11,150
module and run it so we can say

01:03:12,270 --> 01:03:26,400
just give me a single SLS or we could do

01:03:18,810 --> 01:03:29,430
a a list commented limited list of SLS s

01:03:26,400 --> 01:03:31,440
so that we can set this up in such a way

01:03:29,430 --> 01:03:33,480
that you never would need to even make a

01:03:31,440 --> 01:03:36,480
top file you just make a bunch of s and

01:03:33,480 --> 01:03:39,690
less files and then call them directly

01:03:36,480 --> 01:03:48,900
and yeah that was something that Spotify

01:03:39,690 --> 01:03:55,910
came and asked us for ok see if I'm

01:03:48,900 --> 01:03:58,830
missing any here good did oh yes single

01:03:55,910 --> 01:04:02,010
let's say I want to bypass this malarkey

01:03:58,830 --> 01:04:05,130
of doing anything at all with SLS files

01:04:02,010 --> 01:04:07,380
I just want to manually run a state call

01:04:05,130 --> 01:04:09,110
this is a great way to test to see if a

01:04:07,380 --> 01:04:12,120
stake all that you've written this

01:04:09,110 --> 01:04:14,460
garbage or not see if it's actually

01:04:12,120 --> 01:04:19,790
running so we can do state that's single

01:04:14,460 --> 01:04:19,790
that one

01:04:30,540 --> 01:04:37,450
my brain is saying Emacs but we just

01:04:33,280 --> 01:04:47,880
don't have that bandwidth do it screen

01:04:37,450 --> 01:04:59,559
thank you screen right gotcha oh oh oh

01:04:47,880 --> 01:05:02,079
my bad its installed okay so yeah we're

01:04:59,559 --> 01:05:06,069
able just execute a single one off steak

01:05:02,079 --> 01:05:12,339
chunk okay and then wait forever to

01:05:06,069 --> 01:05:15,849
downloading tea mugs fantastic okay all

01:05:12,339 --> 01:05:27,069
right any questions comments arguments

01:05:15,849 --> 01:05:30,670
rebuttals yes yeah yeah this is the end

01:05:27,069 --> 01:05:36,240
of this the problem of course being is

01:05:30,670 --> 01:05:42,849
that we've got lunch what at 12 Oh 1230

01:05:36,240 --> 01:05:44,200
more or less yeah we're done with this

01:05:42,849 --> 01:05:46,089
we're done with this presentation and

01:05:44,200 --> 01:05:48,040
then we'll take we'll take a ten-minute

01:05:46,089 --> 01:05:51,270
break and then probably come back and

01:05:48,040 --> 01:05:51,270
hit up the next one

01:05:52,390 --> 01:05:54,450
you

01:06:25,280 --> 01:06:32,099
how's that sigh every way this is the

01:06:28,800 --> 01:06:34,260
way to better utilize all your resources

01:06:32,099 --> 01:06:37,710
and it makes managing all your resources

01:06:34,260 --> 01:06:41,569
pretty easy all of the innovation is

01:06:37,710 --> 01:06:45,059
happening in open source the

01:06:41,569 --> 01:06:46,890
collaborative nature and of the you know

01:06:45,059 --> 01:06:48,990
of the community and the speed at which

01:06:46,890 --> 01:06:50,970
these are these you know these these

01:06:48,990 --> 01:06:52,859
deficiencies these bugs are getting

01:06:50,970 --> 01:06:54,960
discovered and then fixed is it

01:06:52,859 --> 01:06:58,410
everything that really shows the power

01:06:54,960 --> 01:07:00,210
of the of the open source community it

01:06:58,410 --> 01:07:04,440
is global and it's definitely because of

01:07:00,210 --> 01:07:10,770
the users community people are extremely

01:07:04,440 --> 01:07:12,630
friendly and always ready to help if you

01:07:10,770 --> 01:07:14,940
go on tire see any day you'll see these

01:07:12,630 --> 01:07:16,670
guys helping each other out and they're

01:07:14,940 --> 01:07:19,349
all doing it like in a selfless manner

01:07:16,670 --> 01:07:22,369
the product is transparent for everyone

01:07:19,349 --> 01:07:25,559
everyone can look at the code base

01:07:22,369 --> 01:07:27,770
everyone can see how CloudStack is being

01:07:25,559 --> 01:07:33,299
built nothing nothing is proprietary

01:07:27,770 --> 01:07:36,210
everything is open in many ways it's

01:07:33,299 --> 01:07:42,329
absolutely vital to the tiangong health

01:07:36,210 --> 01:07:44,790
card stack the most exciting event in

01:07:42,329 --> 01:07:47,390
recent memory for me was our first

01:07:44,790 --> 01:07:50,059
developer boot camp

01:07:47,390 --> 01:07:52,700
and our call gave people I gave you two

01:07:50,059 --> 01:07:56,660
weeks notice to come attend I was

01:07:52,700 --> 01:08:00,829
expecting 25 or 30 people so we ended up

01:07:56,660 --> 01:08:03,680
with 87 people and had to go get more

01:08:00,829 --> 01:08:06,200
chairs in the room twice everything

01:08:03,680 --> 01:08:09,470
within cloud computing is commodity and

01:08:06,200 --> 01:08:12,529
is open source and so I don't think that

01:08:09,470 --> 01:08:14,450
you will you'll see anywhere where open

01:08:12,529 --> 01:08:17,900
sources not pervasive in cloud computing

01:08:14,450 --> 01:08:20,060
and so i think it's i think it's an

01:08:17,900 --> 01:08:21,560
assumption i think when you talk about

01:08:20,060 --> 01:08:26,389
cloud computing you're really talking

01:08:21,560 --> 01:08:28,670
about open source cloud computing cloud

01:08:26,389 --> 01:08:31,429
sac is a robust solution for large

01:08:28,670 --> 01:08:33,830
deployments you'll have dozens of data

01:08:31,429 --> 01:08:37,850
centers and thousands of servers in each

01:08:33,830 --> 01:08:41,120
data centers these hardware is going to

01:08:37,850 --> 01:08:44,330
fail and CloudStack is designed to

01:08:41,120 --> 01:08:46,819
handle number one that mass scale number

01:08:44,330 --> 01:08:49,549
two it's designed to handle the failure

01:08:46,819 --> 01:08:52,400
that inevitably happens in large

01:08:49,549 --> 01:08:56,600
deployments started working on contact

01:08:52,400 --> 01:08:59,870
over four years ago and it was the

01:08:56,600 --> 01:09:01,639
original set of people working on it had

01:08:59,870 --> 01:09:05,750
a background of delivering software

01:09:01,639 --> 01:09:09,980
telcos and service providers lots of QA

01:09:05,750 --> 01:09:13,609
lots of users actually using it high

01:09:09,980 --> 01:09:16,670
availability is the key feature multiple

01:09:13,609 --> 01:09:18,710
hypervisors support different network

01:09:16,670 --> 01:09:21,380
models you can pick up whatever suits

01:09:18,710 --> 01:09:23,630
you better while step management server

01:09:21,380 --> 01:09:27,319
can be deployed in different physical

01:09:23,630 --> 01:09:28,969
machines it definitely has a huge

01:09:27,319 --> 01:09:33,980
footprint it's being deployed everywhere

01:09:28,969 --> 01:09:36,560
there's a major movie studio that they

01:09:33,980 --> 01:09:39,859
were using cloudstack they were using it

01:09:36,560 --> 01:09:41,839
to transcode video and I thought that

01:09:39,859 --> 01:09:43,489
was terribly fascinating what I found

01:09:41,839 --> 01:09:46,759
more fascinating is what they did during

01:09:43,489 --> 01:09:49,520
lunch where they would spin up you know

01:09:46,759 --> 01:09:50,900
50 or 60 game servers then as soon as

01:09:49,520 --> 01:09:52,440
lunch was over they would destroy all

01:09:50,900 --> 01:09:56,460
the instances and go back

01:09:52,440 --> 01:09:57,900
doing real work CloudStack is vast it

01:09:56,460 --> 01:09:59,400
touches so many different aspects and

01:09:57,900 --> 01:10:01,620
there's no one person that's kind of

01:09:59,400 --> 01:10:05,100
like a master of all those realms I

01:10:01,620 --> 01:10:07,770
think clouds stack as a project is going

01:10:05,100 --> 01:10:11,600
to be one of the leaders simply because

01:10:07,770 --> 01:10:18,210
it's some of the most feature fallen and

01:10:11,600 --> 01:10:21,469
and robust platforms out they were Adam

01:10:18,210 --> 01:10:21,469
senior limits of the clouds dag

01:10:34,280 --> 01:10:36,340
you

01:10:39,670 --> 01:10:44,750
when we created asterisk over a decade

01:10:42,380 --> 01:10:46,700
ago we could not have imagined that

01:10:44,750 --> 01:10:48,890
asterisk would not only become the most

01:10:46,700 --> 01:10:51,050
widely adopted open source communication

01:10:48,890 --> 01:10:53,090
software on the planet but that it would

01:10:51,050 --> 01:10:55,610
impact the entire industry in the way

01:10:53,090 --> 01:10:57,590
that it has today asterisk has found its

01:10:55,610 --> 01:11:00,200
way in the more than 170 countries and

01:10:57,590 --> 01:11:02,180
virtually every fortune 1000 company the

01:11:00,200 --> 01:11:04,280
success of asterisk has enabled a

01:11:02,180 --> 01:11:05,660
transition of power from the hands of

01:11:04,280 --> 01:11:07,940
the traditional proprietary phone

01:11:05,660 --> 01:11:10,340
vendors into the hands of the users and

01:11:07,940 --> 01:11:12,260
administrators of phone systems using

01:11:10,340 --> 01:11:13,490
this power our customers have created

01:11:12,260 --> 01:11:15,440
all sorts of business changing

01:11:13,490 --> 01:11:17,300
applications from small office phone

01:11:15,440 --> 01:11:19,610
systems to mission-critical call centers

01:11:17,300 --> 01:11:21,410
the international carrier networks in

01:11:19,610 --> 01:11:23,210
fact there's even an entire country

01:11:21,410 --> 01:11:25,790
those communications infrastructure runs

01:11:23,210 --> 01:11:27,710
on Astra's the gym has always been about

01:11:25,790 --> 01:11:29,420
creating technology that expands

01:11:27,710 --> 01:11:31,610
communications capabilities in ways that

01:11:29,420 --> 01:11:32,810
we could never have imagined and that's

01:11:31,610 --> 01:11:35,180
part of what's game-changing about

01:11:32,810 --> 01:11:37,880
Digium today we're doing it again this

01:11:35,180 --> 01:11:39,980
time by introducing a new family of HD

01:11:37,880 --> 01:11:42,110
IP phones that extends control of the

01:11:39,980 --> 01:11:43,850
user all the way to the desktop the

01:11:42,110 --> 01:11:45,560
launch of these new products represents

01:11:43,850 --> 01:11:47,660
the next phase indigenous history of

01:11:45,560 --> 01:11:50,060
innovation these are the first and only

01:11:47,660 --> 01:11:51,410
IP phones designed to fully leverage the

01:11:50,060 --> 01:11:53,090
power of esther's when we first

01:11:51,410 --> 01:11:54,320
discussed our expectations for building

01:11:53,090 --> 01:11:56,210
a family of phones for use with

01:11:54,320 --> 01:11:58,430
asterisks our requirements were pretty

01:11:56,210 --> 01:11:59,780
simple we asked the team to build the

01:11:58,430 --> 01:12:02,120
phones such that they were easy to

01:11:59,780 --> 01:12:04,280
install integrate provision and use I

01:12:02,120 --> 01:12:06,350
think you'll soon agree our engineers

01:12:04,280 --> 01:12:08,150
have delivered on that goal user

01:12:06,350 --> 01:12:09,770
feedback is validating that when it

01:12:08,150 --> 01:12:12,200
comes to operation with astro space

01:12:09,770 --> 01:12:14,090
systems including our own Switchvox

01:12:12,200 --> 01:12:16,820
based product these are the easiest to

01:12:14,090 --> 01:12:19,160
use best integrated most interoperable

01:12:16,820 --> 01:12:20,840
products on the market today the Digium

01:12:19,160 --> 01:12:23,570
family of phones will initially include

01:12:20,840 --> 01:12:25,490
three IP des hommes uniquely designed to

01:12:23,570 --> 01:12:27,350
complement any asterisk or Switchvox

01:12:25,490 --> 01:12:29,450
based solution these phones are

01:12:27,350 --> 01:12:31,640
different for a number of reasons first

01:12:29,450 --> 01:12:33,920
there is clue sively designed for use

01:12:31,640 --> 01:12:35,540
with asterisks secondly we've made it

01:12:33,920 --> 01:12:38,000
really easy to autodiscover and

01:12:35,540 --> 01:12:39,110
provision the phones next we've made it

01:12:38,000 --> 01:12:41,630
easy for the phones to access

01:12:39,110 --> 01:12:42,370
information inside of asterisk allowing

01:12:41,630 --> 01:12:44,400
tight coupling

01:12:42,370 --> 01:12:46,390
between an application and the phone

01:12:44,400 --> 01:12:48,520
additionally we've created an

01:12:46,390 --> 01:12:50,650
applications engine that allows users

01:12:48,520 --> 01:12:53,230
and developers to create and run their

01:12:50,650 --> 01:12:55,300
own apps on the following and finally

01:12:53,230 --> 01:12:57,370
we've done all of this at a very

01:12:55,300 --> 01:12:59,050
compelling price point at Digium we're

01:12:57,370 --> 01:13:00,850
always thinking of ways to give our

01:12:59,050 --> 01:13:03,220
customers the best value in business

01:13:00,850 --> 01:13:05,080
phone systems and also give them the

01:13:03,220 --> 01:13:07,240
power to create their own solutions or

01:13:05,080 --> 01:13:09,130
any communications challenge well

01:13:07,240 --> 01:13:10,780
continue to push the boundaries not only

01:13:09,130 --> 01:13:12,820
to make Astra's cooler faster and more

01:13:10,780 --> 01:13:14,470
technologically feature-rich but to make

01:13:12,820 --> 01:13:16,960
asterisk and what communications even

01:13:14,470 --> 01:13:20,070
easier and together we'll change the way

01:13:16,960 --> 01:13:20,070

YouTube URL: https://www.youtube.com/watch?v=P9Byipjzckg


