Title: 2012 SouthEast LinuxFest - SaltStack Training - Thomas Hatch - Extending Salt
Publication date: 2014-06-30
Playlist: 2012 SouthEast LinuxFest - SaltStack Training
Description: 
	2012 SouthEast LinuxFest
SaltStack Training

Thomas Hatch - Extending Salt:  Modules and States
Captions: 
	00:00:00,000 --> 00:00:05,279
the following presentation was recorded

00:00:02,490 --> 00:00:08,040
the 2012 southeast linux fest in

00:00:05,279 --> 00:00:10,410
charlotte north carolina it is licensed

00:00:08,040 --> 00:00:12,090
under a creative commons license for

00:00:10,410 --> 00:00:16,859
more information about the southeast

00:00:12,090 --> 00:00:19,230
linux fest visit www.lend expense org

00:00:16,859 --> 00:00:21,320
the southeast linux fest would like to

00:00:19,230 --> 00:00:23,279
thank the following diamond sponsors in

00:00:21,320 --> 00:00:29,970
2012 for helping make these videos

00:00:23,279 --> 00:00:33,840
possible so the next hour we're going to

00:00:29,970 --> 00:00:35,760
be talking about how to extend salt in

00:00:33,840 --> 00:00:37,739
the most basic and straightforward ways

00:00:35,760 --> 00:00:40,230
and that's going to be making your own

00:00:37,739 --> 00:00:43,770
modules extending that base api that

00:00:40,230 --> 00:00:49,050
we've been talking about and how to make

00:00:43,770 --> 00:00:51,719
your own states and just as a reference

00:00:49,050 --> 00:00:55,739
in january of this year i believe that

00:00:51,719 --> 00:00:59,879
we had five state modules and about

00:00:55,739 --> 00:01:03,680
twenty salt modules and right now we've

00:00:59,879 --> 00:01:06,450
got just shy of 80 salt modules and

00:01:03,680 --> 00:01:10,909
somewhere in the vicinity of 20 state

00:01:06,450 --> 00:01:13,229
modules the what I'm trying to get at is

00:01:10,909 --> 00:01:15,659
not only we had a lot of people

00:01:13,229 --> 00:01:18,540
contribute modules and state modules to

00:01:15,659 --> 00:01:21,930
solve but they can generally do it

00:01:18,540 --> 00:01:24,000
rather quickly it's the again the goal

00:01:21,930 --> 00:01:26,729
is to make everything that you do dinner

00:01:24,000 --> 00:01:35,360
act with salt as easy and intuitive as

00:01:26,729 --> 00:01:35,360
possible okay

00:01:36,140 --> 00:01:46,049
now we're going to go over how to make

00:01:41,930 --> 00:01:49,920
two very core extension pieces instead

00:01:46,049 --> 00:01:53,189
of salt primarily the modules and in the

00:01:49,920 --> 00:01:55,770
state modules or salt states now right

00:01:53,189 --> 00:02:00,890
now there are six extension points

00:01:55,770 --> 00:02:04,020
inside of salt there's modules States

00:02:00,890 --> 00:02:05,670
renderers which is what which is which

00:02:04,020 --> 00:02:07,369
allows you to write as the less files

00:02:05,670 --> 00:02:09,780
and something other than yeah Mel jinja

00:02:07,369 --> 00:02:14,610
runners which allows you to do master

00:02:09,780 --> 00:02:16,950
signed complicated reporting grains

00:02:14,610 --> 00:02:22,290
which we discussed we can extend grains

00:02:16,950 --> 00:02:23,849
fairly easily and returners which allows

00:02:22,290 --> 00:02:27,450
you to redirect the return information

00:02:23,849 --> 00:02:29,519
from a salt command to any arbitrary

00:02:27,450 --> 00:02:32,519
location so we're going to start by

00:02:29,519 --> 00:02:34,110
talking about these to the next the next

00:02:32,519 --> 00:02:36,750
hour is going to talk about the

00:02:34,110 --> 00:02:37,920
remaining for how they work how to

00:02:36,750 --> 00:02:44,579
interact with them how to use them and

00:02:37,920 --> 00:02:46,680
how to extend them okay now we're going

00:02:44,579 --> 00:02:48,510
to start off by talking about salt

00:02:46,680 --> 00:02:50,100
modules I've already shown you a few of

00:02:48,510 --> 00:02:53,250
those the fact that they're just plain

00:02:50,100 --> 00:02:55,049
python python modules but there's a lot

00:02:53,250 --> 00:02:57,600
of extra things that you can do inside

00:02:55,049 --> 00:03:00,329
of them to extend their capability and

00:02:57,600 --> 00:03:03,650
you've got access to quite a few goodies

00:03:00,329 --> 00:03:06,810
so to say so to speak inside of them

00:03:03,650 --> 00:03:10,319
models are going to cover how to use the

00:03:06,810 --> 00:03:12,450
Python kwargs and two args capabilities

00:03:10,319 --> 00:03:15,060
inside of modules particularly state

00:03:12,450 --> 00:03:17,549
modules they let you pass in and deal

00:03:15,060 --> 00:03:20,790
with some very arbitrary data so that

00:03:17,549 --> 00:03:22,560
you can assign arbitrary data or you can

00:03:20,790 --> 00:03:25,829
make a state that supports putting just

00:03:22,560 --> 00:03:29,100
some extra random garbage of anything

00:03:25,829 --> 00:03:31,319
that you'd like so to say into into an

00:03:29,100 --> 00:03:33,690
SLS file for a state and that can be

00:03:31,319 --> 00:03:36,900
absorbed and utilized if you want it to

00:03:33,690 --> 00:03:39,329
be inside of inside of the actual SLS

00:03:36,900 --> 00:03:40,739
and then inside of solid states we're

00:03:39,329 --> 00:03:43,680
going to talk about how these data

00:03:40,739 --> 00:03:45,740
structures actually map back over to the

00:03:43,680 --> 00:03:48,170
actual code

00:03:45,740 --> 00:03:51,980
hopefully from a programming perspective

00:03:48,170 --> 00:03:53,720
it should be intuitive and actually that

00:03:51,980 --> 00:03:55,520
mapping right there is genuine when

00:03:53,720 --> 00:03:59,950
people the light bulb goes on and they

00:03:55,520 --> 00:04:01,970
say oh that's how states work because

00:03:59,950 --> 00:04:04,940
because they look at the code and they

00:04:01,970 --> 00:04:06,200
go oh that just makes sense so hopefully

00:04:04,940 --> 00:04:14,650
we're able to continue on with that

00:04:06,200 --> 00:04:17,900
tradition okay solve modules again just

00:04:14,650 --> 00:04:21,470
python modules when we run the remote

00:04:17,900 --> 00:04:24,470
execution and we did pique and we do

00:04:21,470 --> 00:04:26,720
test out paying its test module bing

00:04:24,470 --> 00:04:28,010
function let's start taking a look at

00:04:26,720 --> 00:04:30,640
some of these and look at how they're

00:04:28,010 --> 00:04:46,370
structured and what we can do with them

00:04:30,640 --> 00:04:49,910
okay 499 Watchers I'm almost there

00:04:46,370 --> 00:05:03,950
almost a 500 somebody get on github and

00:04:49,910 --> 00:05:05,330
watches all right so modules despite the

00:05:03,950 --> 00:05:10,130
fact that it may look like we've got a

00:05:05,330 --> 00:05:13,180
we've got a lot of these we can have

00:05:10,130 --> 00:05:15,860
modules to integrate with almost any

00:05:13,180 --> 00:05:18,530
piece of software that you can run I

00:05:15,860 --> 00:05:23,200
mean we've got we've got some I think

00:05:18,530 --> 00:05:26,480
fairly intuitive ones in here like

00:05:23,200 --> 00:05:30,980
definitely pretty pretty bad cross

00:05:26,480 --> 00:05:32,690
section let's try this one I like this

00:05:30,980 --> 00:05:34,670
cross section better for this for what

00:05:32,690 --> 00:05:38,810
I'm trying to say so interfacing with

00:05:34,670 --> 00:05:41,990
RabbitMQ interfacing with users and

00:05:38,810 --> 00:05:47,900
groups on freebsd interfacing with

00:05:41,990 --> 00:05:53,590
puppet postgres pimp Pacman's orange

00:05:47,900 --> 00:05:53,590
linux package support mac desktop stuff

00:05:53,910 --> 00:06:01,090
engine X MySQL moves offense who here

00:05:58,210 --> 00:06:04,270
knows what moose offenses as what I

00:06:01,090 --> 00:06:09,250
thought booster vest is a is a

00:06:04,270 --> 00:06:10,750
distributed file system but anyway you

00:06:09,250 --> 00:06:12,700
can interface with pretty much any piece

00:06:10,750 --> 00:06:15,670
of software in the long run we should

00:06:12,700 --> 00:06:18,400
have access to thousands of modules as

00:06:15,670 --> 00:06:21,460
this module base continues to grow and

00:06:18,400 --> 00:06:24,220
if you have a piece of software that you

00:06:21,460 --> 00:06:31,300
won't integrate with with salt enjoy the

00:06:24,220 --> 00:06:34,510
module and its public software then give

00:06:31,300 --> 00:06:36,310
us the module we want it we want to grow

00:06:34,510 --> 00:06:41,530
this library want it to be as large as

00:06:36,310 --> 00:06:48,400
possible as powerful as possible okay so

00:06:41,530 --> 00:06:52,960
let's dive into the test module which is

00:06:48,400 --> 00:06:56,230
very simple pretty straightforward and

00:06:52,960 --> 00:07:00,280
allows the end and is generally used to

00:06:56,230 --> 00:07:02,950
test some interfaces so we go down and

00:07:00,280 --> 00:07:05,590
we see that there just again just

00:07:02,950 --> 00:07:07,120
functions now these functions can take

00:07:05,590 --> 00:07:10,840
arbitrary arguments or not take

00:07:07,120 --> 00:07:13,510
arguments so if it takes 10 and text

00:07:10,840 --> 00:07:15,310
here with the echo function let me hop

00:07:13,510 --> 00:07:24,520
over and demonstrate what this looks

00:07:15,310 --> 00:07:26,670
like on the right system we pass an

00:07:24,520 --> 00:07:26,670
argument

00:07:27,819 --> 00:07:33,500
okay and so when I say foo bar right

00:07:32,000 --> 00:07:39,379
here it's going to pass soon as the

00:07:33,500 --> 00:07:42,680
first argument to this function that

00:07:39,379 --> 00:07:45,889
screen which is text and all I go does

00:07:42,680 --> 00:07:55,699
is return text and we have a functional

00:07:45,889 --> 00:07:58,879
component okay all right now let's talk

00:07:55,699 --> 00:08:00,349
about some of the goodies some of the

00:07:58,879 --> 00:08:01,879
case some of the extra things that we

00:08:00,349 --> 00:08:06,520
have inside of these modules to work

00:08:01,879 --> 00:08:10,430
with right now we've got cross calling

00:08:06,520 --> 00:08:12,949
so this is great we've got this big

00:08:10,430 --> 00:08:16,849
library of modules that are specifically

00:08:12,949 --> 00:08:18,740
designed and loaded for salt well if I'm

00:08:16,849 --> 00:08:20,389
in one module then it would only make

00:08:18,740 --> 00:08:25,129
sense that I would want to have access

00:08:20,389 --> 00:08:28,009
to a different module because I'm I mean

00:08:25,129 --> 00:08:30,500
it's an API right so what we can do is

00:08:28,009 --> 00:08:32,510
we can cross call other modules now the

00:08:30,500 --> 00:08:34,250
actual way the salt modules are loaded

00:08:32,510 --> 00:08:36,529
is that they're loaded up and then

00:08:34,250 --> 00:08:38,599
embedded with a bunch of extra

00:08:36,529 --> 00:08:40,570
information so that you can do things

00:08:38,599 --> 00:08:43,370
like cross call and you can pull up

00:08:40,570 --> 00:08:45,680
specific data this is something that

00:08:43,370 --> 00:08:49,190
that we can't intuitively do just with

00:08:45,680 --> 00:08:53,029
normal Python it imports and so the

00:08:49,190 --> 00:08:55,040
loader functionality embeds these extra

00:08:53,029 --> 00:08:56,839
these extra bits of data that we're

00:08:55,040 --> 00:08:58,910
going to talk about and so we've got

00:08:56,839 --> 00:09:02,720
this one under scrunch rosaldo score

00:08:58,910 --> 00:09:05,300
score and this is a dictionary of all of

00:09:02,720 --> 00:09:15,410
the other functions and we can just call

00:09:05,300 --> 00:09:20,050
them so let's take a look at there you

00:09:15,410 --> 00:09:20,050
go there will be some good stuff in here

00:09:23,010 --> 00:09:32,920
so I want to show out so I'm going to

00:09:30,640 --> 00:09:35,710
call the command module it's gotta run

00:09:32,920 --> 00:09:37,330
function and it takes as an argument to

00:09:35,710 --> 00:09:40,600
string that I'm going to execute and

00:09:37,330 --> 00:09:41,740
returns standard out so I'm just going

00:09:40,600 --> 00:09:44,620
to use that I'm going to use that

00:09:41,740 --> 00:09:47,170
instead of doing all the subprocess

00:09:44,620 --> 00:09:49,030
stuff now primarily we like to use this

00:09:47,170 --> 00:09:52,090
in this case because it logs that it

00:09:49,030 --> 00:09:55,330
happened it logs that this command got

00:09:52,090 --> 00:09:56,770
executed but we see very very quickly

00:09:55,330 --> 00:10:00,730
the dance how we make these calls

00:09:56,770 --> 00:10:06,030
because this salt object here is a

00:10:00,730 --> 00:10:10,210
dictionary the keys are function calls

00:10:06,030 --> 00:10:11,590
and the values are or the keys are

00:10:10,210 --> 00:10:14,440
function names and the values are

00:10:11,590 --> 00:10:19,990
function objects so that we can cross

00:10:14,440 --> 00:10:23,190
call other functions okay and we see a

00:10:19,990 --> 00:10:25,720
lot of shelling out as one might expect

00:10:23,190 --> 00:10:31,770
inside of a module that's doing package

00:10:25,720 --> 00:10:31,770
management all right

00:10:38,000 --> 00:10:44,910
next we have access to grains so as one

00:10:43,140 --> 00:10:48,690
might expect we might want to make a

00:10:44,910 --> 00:10:52,440
module behave slightly differently based

00:10:48,690 --> 00:10:53,610
on system information so if it's a

00:10:52,440 --> 00:10:54,720
different operating system that we

00:10:53,610 --> 00:10:59,100
needed to do something slightly

00:10:54,720 --> 00:11:01,500
different and then so on so we have

00:10:59,100 --> 00:11:05,760
access to all of the grains via a grains

00:11:01,500 --> 00:11:14,310
dictionary if we take a look back at

00:11:05,760 --> 00:11:17,370
this back at this pac-man module is that

00:11:14,310 --> 00:11:19,580
we're accessing the OS grain right up

00:11:17,370 --> 00:11:19,580
here

00:11:29,320 --> 00:11:35,660
next we've gone on we've got access to

00:11:32,630 --> 00:11:39,980
all of the options that have been passed

00:11:35,660 --> 00:11:42,800
to the minion so you can put arbitrary

00:11:39,980 --> 00:11:44,930
data inside of the minion config file

00:11:42,800 --> 00:11:48,610
and it'll be available to all of the

00:11:44,930 --> 00:11:48,610
modules that you have on that menu

00:11:52,750 --> 00:12:01,970
alright those are the important embedded

00:11:58,430 --> 00:12:05,060
bits next we've got something called the

00:12:01,970 --> 00:12:11,180
virtual function now if we go back and

00:12:05,060 --> 00:12:16,070
if you recall we go back to here and we

00:12:11,180 --> 00:12:24,160
do a song PKG dot let's say list

00:12:16,070 --> 00:12:24,160
packages okay

00:12:26,070 --> 00:12:33,040
okay well i called that PKG i didn't

00:12:29,440 --> 00:12:35,079
call it young package and but but it new

00:12:33,040 --> 00:12:38,050
to use young to get all of this package

00:12:35,079 --> 00:12:40,060
information right so how do we make sure

00:12:38,050 --> 00:12:45,240
that all of these things are mapped to

00:12:40,060 --> 00:12:50,070
the right locations and that's done via

00:12:45,240 --> 00:12:53,769
the virtual function so we see up here

00:12:50,070 --> 00:12:55,690
that we've got this virtual function and

00:12:53,769 --> 00:13:00,010
it's going to return one of two things

00:12:55,690 --> 00:13:01,899
if the virtual function is omitted then

00:13:00,010 --> 00:13:04,329
it's going then the module is going to

00:13:01,899 --> 00:13:07,329
show up by whatever whatever the file

00:13:04,329 --> 00:13:09,940
itself is named otherwise if the virtual

00:13:07,329 --> 00:13:12,820
function is available that it's going to

00:13:09,940 --> 00:13:14,769
be executed and it's going to be known

00:13:12,820 --> 00:13:18,279
to solve by whatever the string is

00:13:14,769 --> 00:13:21,190
that's returned or if you return false

00:13:18,279 --> 00:13:22,690
is just not going to load it so if i'm

00:13:21,190 --> 00:13:24,760
running a fedora system then why the

00:13:22,690 --> 00:13:29,170
devil would i ever load the package

00:13:24,760 --> 00:13:33,190
management stuff for arch so it would

00:13:29,170 --> 00:13:36,820
return false so this very very basic

00:13:33,190 --> 00:13:41,050
methodology is how we map what modules

00:13:36,820 --> 00:13:44,370
to load in place of what providers okay

00:13:41,050 --> 00:13:44,370
in questions there

00:13:45,139 --> 00:14:01,199
alright the virtual function is used a

00:13:55,500 --> 00:14:03,420
lot and then for a lot of a lot of

00:14:01,199 --> 00:14:05,300
modules that gets submitted we we have

00:14:03,420 --> 00:14:08,760
to bounce back and say can you please

00:14:05,300 --> 00:14:11,100
provide a virtual function for this but

00:14:08,760 --> 00:14:13,440
as you saw and as you'll see with other

00:14:11,100 --> 00:14:14,490
modules the virtual function is

00:14:13,440 --> 00:14:17,190
generally not too particularly

00:14:14,490 --> 00:14:18,170
complicated it just returns a string if

00:14:17,190 --> 00:14:23,220
it's going to be named something

00:14:18,170 --> 00:14:30,269
specific that's it okay again go simple

00:14:23,220 --> 00:14:35,880
interfaces okay next we have the output

00:14:30,269 --> 00:14:40,339
or system now back in the day back in

00:14:35,880 --> 00:14:44,670
say last September so eons ago in

00:14:40,339 --> 00:14:46,980
insulting time you would execute a

00:14:44,670 --> 00:14:49,350
command on the command line with salt it

00:14:46,980 --> 00:14:51,800
would return the data to you and it

00:14:49,350 --> 00:14:55,740
would print down that data in raw Python

00:14:51,800 --> 00:14:59,730
and it was incredibly difficult to read

00:14:55,740 --> 00:15:02,940
and not too particularly useful and so

00:14:59,730 --> 00:15:05,880
we added in the output her system the

00:15:02,940 --> 00:15:09,420
operator system allows you to say this

00:15:05,880 --> 00:15:13,130
function when it returns it's going to

00:15:09,420 --> 00:15:16,889
be printed a certain way to the terminal

00:15:13,130 --> 00:15:22,980
that's why if we come over here dump

00:15:16,889 --> 00:15:25,019
that one okay and we do package that

00:15:22,980 --> 00:15:27,420
list packages which gives us a dump of

00:15:25,019 --> 00:15:30,389
all the packages installed on the

00:15:27,420 --> 00:15:34,760
minions and what versions they are okay

00:15:30,389 --> 00:15:34,760
and then we do something like

00:15:42,529 --> 00:15:50,069
run a command that up it looks pretty

00:15:46,170 --> 00:15:52,970
different I mean we've got we've got a

00:15:50,069 --> 00:15:58,550
pretty printed data structure up here of

00:15:52,970 --> 00:16:01,769
raw Python and down here we've got a

00:15:58,550 --> 00:16:07,379
textual output of exactly what the

00:16:01,769 --> 00:16:09,689
command ran okay and so that's all done

00:16:07,379 --> 00:16:11,670
via this outfitter system I really like

00:16:09,689 --> 00:16:14,100
this because we can run a command and we

00:16:11,670 --> 00:16:16,019
see that this is what you know minion

00:16:14,100 --> 00:16:23,399
that's what it would look like if we run

00:16:16,019 --> 00:16:24,569
it locally very very gras cabool all

00:16:23,399 --> 00:16:40,470
right so let's take a look at how the

00:16:24,569 --> 00:16:43,019
output system works see MGMT is actually

00:16:40,470 --> 00:16:46,529
really example one because it's not

00:16:43,019 --> 00:16:50,550
named CMD and so it's got to use a

00:16:46,529 --> 00:16:52,500
virtual function this is great because

00:16:50,550 --> 00:16:55,769
we wanted the we wanted the name to

00:16:52,500 --> 00:16:58,740
actually be CMD but if we named it CMD

00:16:55,769 --> 00:17:02,069
then we can't import the python module

00:16:58,740 --> 00:17:04,199
CMD to actually work with we need to

00:17:02,069 --> 00:17:05,250
name the file something different so we

00:17:04,199 --> 00:17:07,559
have to be a little creative there but

00:17:05,250 --> 00:17:12,600
we can still call it CMD inside of salt

00:17:07,559 --> 00:17:14,970
so it's still tirsan direct and then

00:17:12,600 --> 00:17:18,799
we've got the operator system here we

00:17:14,970 --> 00:17:23,270
define this dictionary called output ER

00:17:18,799 --> 00:17:25,350
and knowing define a function run and

00:17:23,270 --> 00:17:28,190
then the output is that we're going to

00:17:25,350 --> 00:17:30,539
use so we can output things either as

00:17:28,190 --> 00:17:33,120
text which is what I just showed you at

00:17:30,539 --> 00:17:35,940
the command run we can output things the

00:17:33,120 --> 00:17:39,720
default way which is use pythons pretty

00:17:35,940 --> 00:17:47,120
printer module we can output things in

00:17:39,720 --> 00:17:47,120
JSON or we can output things in yellow

00:17:47,540 --> 00:17:52,830
or if you do a high state run and you're

00:17:51,270 --> 00:17:54,600
thinking and you may you may be thinking

00:17:52,830 --> 00:17:57,540
way we'll wait when you were in high

00:17:54,600 --> 00:18:00,780
state it gave you this real specific

00:17:57,540 --> 00:18:03,300
color now punked as because we have an

00:18:00,780 --> 00:18:07,320
output or specifically for high state

00:18:03,300 --> 00:18:09,750
returns and so you can write a module

00:18:07,320 --> 00:18:12,180
that's going to give some complex data

00:18:09,750 --> 00:18:14,340
and then go in and write an output or

00:18:12,180 --> 00:18:19,050
that's going to be give you a very

00:18:14,340 --> 00:18:20,700
specific view of of how that data is

00:18:19,050 --> 00:18:24,390
going to be represented on the on the

00:18:20,700 --> 00:18:27,780
screen so that you control the complete

00:18:24,390 --> 00:18:29,130
user experience so to speak of how

00:18:27,780 --> 00:18:42,570
someone's going to be interacting with

00:18:29,130 --> 00:18:44,990
your function ok 0 output modes can be

00:18:42,570 --> 00:18:44,990
overwritten

00:18:52,559 --> 00:18:58,450
so I can run a command and say nah I'll

00:18:55,179 --> 00:19:04,840
give that to me in JSON because I like

00:18:58,450 --> 00:19:07,150
to read things that way okay actually to

00:19:04,840 --> 00:19:09,400
be clearer if you're shelling out from

00:19:07,150 --> 00:19:11,200
another application and you want to

00:19:09,400 --> 00:19:14,799
bring some data in and you don't want to

00:19:11,200 --> 00:19:16,900
have to you know parse it you can just

00:19:14,799 --> 00:19:18,700
pass to that command JSON out or yanil

00:19:16,900 --> 00:19:24,669
out or something and then bring it in as

00:19:18,700 --> 00:19:25,840
JSON ok but so you can overwrite that

00:19:24,669 --> 00:19:35,730
output her when you're actually

00:19:25,840 --> 00:19:38,770
expecting the commands now kwargs and

00:19:35,730 --> 00:19:46,090
modules this is actually a fairly recent

00:19:38,770 --> 00:19:49,539
addition but so inside of Python who

00:19:46,090 --> 00:19:53,289
here has who who's written Python before

00:19:49,539 --> 00:19:59,950
oh that's good we've got a fairly good

00:19:53,289 --> 00:20:03,809
spread here inside of Python if you have

00:19:59,950 --> 00:20:06,400
a function or method and they accept an

00:20:03,809 --> 00:20:10,299
argument that starts with two asterisks

00:20:06,400 --> 00:20:13,539
and generally you call that you call it

00:20:10,299 --> 00:20:16,530
quarks then any keyword arguments that

00:20:13,539 --> 00:20:18,940
you pass into that function get absorbed

00:20:16,530 --> 00:20:24,429
for a long time salt couldn't handle

00:20:18,940 --> 00:20:27,520
this very well but now we can so we can

00:20:24,429 --> 00:20:29,620
declare command week we can we can make

00:20:27,520 --> 00:20:31,720
keyword arguments when we make the

00:20:29,620 --> 00:20:34,090
actual assault call and they'll get

00:20:31,720 --> 00:20:36,600
translated in and so you can have

00:20:34,090 --> 00:20:38,500
arbitrary keyword arguments now the

00:20:36,600 --> 00:20:39,850
example here because you're probably

00:20:38,500 --> 00:20:43,210
going I don't understand why this

00:20:39,850 --> 00:20:45,299
matters the good example here is let's

00:20:43,210 --> 00:20:48,340
look at one of these package managers

00:20:45,299 --> 00:20:51,880
package managers all deal with things

00:20:48,340 --> 00:20:54,330
rather differently and some of them have

00:20:51,880 --> 00:20:58,510
certain capabilities that others do not

00:20:54,330 --> 00:21:00,350
and so if we come down here and look at

00:20:58,510 --> 00:21:10,130
young package

00:21:00,350 --> 00:21:21,320
and we find install there we go we see

00:21:10,130 --> 00:21:30,440
that it's accepting korg's heavens not

00:21:21,320 --> 00:21:32,539
using them that's embarrassing thief I'm

00:21:30,440 --> 00:21:33,919
running through my brain now trying to

00:21:32,539 --> 00:21:36,409
remember which package manager I

00:21:33,919 --> 00:21:47,090
intended to pull up that I know uses

00:21:36,409 --> 00:21:59,299
korg's oh excuse me so I muted for that

00:21:47,090 --> 00:22:04,190
I apologize okay there we go yeah we

00:21:59,299 --> 00:22:08,539
were using it so this is impact impact

00:22:04,190 --> 00:22:10,130
man we can specify that a file is

00:22:08,539 --> 00:22:12,500
greater than less than or equal to

00:22:10,130 --> 00:22:15,620
certain versions and so we've got

00:22:12,500 --> 00:22:19,340
support to pass in these extra g greater

00:22:15,620 --> 00:22:22,580
than less than or equal to arguments or

00:22:19,340 --> 00:22:25,100
keyword arguments and since we're taking

00:22:22,580 --> 00:22:29,659
korg's in here then we can actually

00:22:25,100 --> 00:22:31,600
arbitrarily add greater than version

00:22:29,659 --> 00:22:36,260
number less than version number etc

00:22:31,600 --> 00:22:37,820
flags into an SLS file and then those

00:22:36,260 --> 00:22:40,700
will make it all the way back to this

00:22:37,820 --> 00:22:42,650
base function and change the

00:22:40,700 --> 00:22:45,799
functionality for you which means that

00:22:42,650 --> 00:22:48,380
when you write a package provider you

00:22:45,799 --> 00:22:51,110
can embed things specific to just that

00:22:48,380 --> 00:22:56,600
in package provider inside of quarks and

00:22:51,110 --> 00:22:58,730
they will be available they'll be

00:22:56,600 --> 00:23:02,150
available inside of sls files inside of

00:22:58,730 --> 00:23:08,390
states because they're being brought in

00:23:02,150 --> 00:23:10,370
in a generic way and they're not going

00:23:08,390 --> 00:23:12,110
to interfere with any other behavior of

00:23:10,370 --> 00:23:13,639
the system because if you put extra data

00:23:12,110 --> 00:23:16,879
in an sls that's not a flick

00:23:13,639 --> 00:23:18,440
just ignored so somebody would be able

00:23:16,879 --> 00:23:21,950
to put in information that's pertinent

00:23:18,440 --> 00:23:24,200
to a specific package manager and then

00:23:21,950 --> 00:23:27,469
it's going to still automatically work

00:23:24,200 --> 00:23:29,329
with multiple with multiple package

00:23:27,469 --> 00:23:42,349
management backends without throwing a

00:23:29,329 --> 00:23:45,859
fat okay now is anybody have any

00:23:42,349 --> 00:23:48,499
questions on these modules before we

00:23:45,859 --> 00:23:57,129
move into state modules and how they

00:23:48,499 --> 00:23:57,129
work okay all right state modules

00:24:07,230 --> 00:24:11,220
so all of these the baseline execution

00:24:10,140 --> 00:24:13,590
modules are in the modules directory

00:24:11,220 --> 00:24:24,929
here all the state modules are in the

00:24:13,590 --> 00:24:29,130
state's directory all right file there

00:24:24,929 --> 00:24:34,679
we go this is our example and then we're

00:24:29,130 --> 00:24:37,049
going to look at file all right file is

00:24:34,679 --> 00:24:39,000
probably the scariest and hairiest of

00:24:37,049 --> 00:24:45,150
all state modules because there's a lot

00:24:39,000 --> 00:24:46,200
that goes on the file system but we can

00:24:45,150 --> 00:24:47,490
come down i think i've already mentioned

00:24:46,200 --> 00:24:49,950
that if there's an underscore they're

00:24:47,490 --> 00:24:54,140
ignored by the systems of their only

00:24:49,950 --> 00:25:00,000
local rather they become private

00:24:54,140 --> 00:25:01,500
functions and so let's get down to one

00:25:00,000 --> 00:25:06,299
of those functions that we were actually

00:25:01,500 --> 00:25:11,280
using i know i should have hit ctrl f a

00:25:06,299 --> 00:25:16,169
long time ago now symlink so if we're in

00:25:11,280 --> 00:25:21,270
an sls fun and we then we say filed a

00:25:16,169 --> 00:25:24,090
symlink what happens we're going to be

00:25:21,270 --> 00:25:27,870
declaring arguments for the fourth in

00:25:24,090 --> 00:25:32,340
this SLS file so the ID declarations we

00:25:27,870 --> 00:25:34,380
work all becomes the name we can

00:25:32,340 --> 00:25:37,559
override it by saying name somewhere in

00:25:34,380 --> 00:25:40,169
line and then we would specify an

00:25:37,559 --> 00:25:42,350
argument target with specify an argument

00:25:40,169 --> 00:25:46,230
force and make yours if we wanted to and

00:25:42,350 --> 00:25:50,549
then salt is going to read in that data

00:25:46,230 --> 00:25:53,100
from the SLS file inspect the function

00:25:50,549 --> 00:25:55,230
find out what arguments it takes and

00:25:53,100 --> 00:25:58,320
then line up the right arguments from

00:25:55,230 --> 00:26:00,840
the SLS file and and overlay them

00:25:58,320 --> 00:26:03,000
directly on to the function which means

00:26:00,840 --> 00:26:05,640
that there is a one-to-one mapping of

00:26:03,000 --> 00:26:09,090
the data that you pass into an SLS file

00:26:05,640 --> 00:26:12,120
and the function the function arguments

00:26:09,090 --> 00:26:23,309
themselves so

00:26:12,120 --> 00:26:23,309
what this means is that file dot symlink

00:26:25,799 --> 00:26:35,160
actually let me do it with files I've

00:26:32,440 --> 00:26:35,160
managed

00:26:46,740 --> 00:26:49,370
ok

00:26:49,700 --> 00:26:53,320
because we've got an example right here

00:26:53,740 --> 00:26:59,149
as we can see you filed on manage takes

00:26:56,360 --> 00:27:08,360
a lot of arguments only one of them is

00:26:59,149 --> 00:27:10,159
mandatory name if you pass if you pass

00:27:08,360 --> 00:27:11,389
into files i manage just name all it's

00:27:10,159 --> 00:27:13,190
going to do is make sure that the file

00:27:11,389 --> 00:27:14,679
exists that's it won't try and download

00:27:13,190 --> 00:27:18,049
it from anywhere or anything like that

00:27:14,679 --> 00:27:20,360
but so we've got name source source hash

00:27:18,049 --> 00:27:28,250
user group mode template makers context

00:27:20,360 --> 00:27:35,320
replace etc and here we've got name file

00:27:28,250 --> 00:27:44,139
dot managed which is file dot managed

00:27:35,320 --> 00:27:48,679
source which is source user user etc

00:27:44,139 --> 00:27:52,010
direct mapping the the act of creating

00:27:48,679 --> 00:27:54,139
the function inside of a state file also

00:27:52,010 --> 00:27:55,789
creates all of the available arguments

00:27:54,139 --> 00:28:01,510
which can be passed to it in a state

00:27:55,789 --> 00:28:01,510
file so there's no extra layer there

00:28:02,230 --> 00:28:15,470
alright and then will also notice or

00:28:07,990 --> 00:28:17,570
recall oh why do I have a requisite

00:28:15,470 --> 00:28:21,950
statement here but you were called we

00:28:17,570 --> 00:28:23,690
could also do that require thing so that

00:28:21,950 --> 00:28:26,360
we could require something else happens

00:28:23,690 --> 00:28:29,809
before and there's no require option in

00:28:26,360 --> 00:28:32,149
here and so some of those are just

00:28:29,809 --> 00:28:33,260
global options they get passed in so we

00:28:32,149 --> 00:28:38,179
don't need to worry about them when

00:28:33,260 --> 00:28:39,799
we're riding stake functions okay so

00:28:38,179 --> 00:28:44,960
we're down here in a state file there's

00:28:39,799 --> 00:28:47,419
a couple things of things to note one is

00:28:44,960 --> 00:28:50,090
that all of those goodies that I talked

00:28:47,419 --> 00:28:51,830
about that underscores course all-time

00:28:50,090 --> 00:28:54,049
scorer score which allows you to call

00:28:51,830 --> 00:28:56,809
modules you have access to those in the

00:28:54,049 --> 00:28:58,370
set of states go-backs s2 grains in side

00:28:56,809 --> 00:28:59,870
of stage you have access to options

00:28:58,370 --> 00:29:01,720
instead of states you have access to

00:28:59,870 --> 00:29:04,720
underscore each core pillar

00:29:01,720 --> 00:29:07,810
score score inside of states so all that

00:29:04,720 --> 00:29:12,720
data we talked about in normal modules

00:29:07,810 --> 00:29:14,980
is available in state modules okay so

00:29:12,720 --> 00:29:18,280
the difference being is that state

00:29:14,980 --> 00:29:21,430
molecules have a few requirements to

00:29:18,280 --> 00:29:24,160
make them function properly and really

00:29:21,430 --> 00:29:26,320
there's three main requirements the

00:29:24,160 --> 00:29:30,280
first is that a state module must always

00:29:26,320 --> 00:29:32,310
take the argument name and it must oh

00:29:30,280 --> 00:29:37,570
and it should be the first argument

00:29:32,310 --> 00:29:42,250
that's pretty easy to follow the second

00:29:37,570 --> 00:29:46,540
requirement is that it must return a

00:29:42,250 --> 00:29:50,410
dictionary that looks like this is the

00:29:46,540 --> 00:29:53,560
backbone of how States works saying that

00:29:50,410 --> 00:29:56,110
it's always going to return something

00:29:53,560 --> 00:29:58,030
that we expect that's going to give us

00:29:56,110 --> 00:30:00,370
the information that we need based on

00:29:58,030 --> 00:30:02,170
what occurred and so as you recall when

00:30:00,370 --> 00:30:04,690
we're looking at the cat the console

00:30:02,170 --> 00:30:09,640
after running States it's that result

00:30:04,690 --> 00:30:11,710
true name name comment and what all the

00:30:09,640 --> 00:30:14,200
changes were this is the dictionary

00:30:11,710 --> 00:30:16,870
that's just returned draw from this

00:30:14,200 --> 00:30:22,390
function and then that's added into the

00:30:16,870 --> 00:30:27,940
total return data and reported back the

00:30:22,390 --> 00:30:33,810
last thing that you need is this test

00:30:27,940 --> 00:30:36,550
interface okay so what this does is

00:30:33,810 --> 00:30:38,980
let's say that we don't want we want to

00:30:36,550 --> 00:30:42,790
do a dry run of the state's we just want

00:30:38,980 --> 00:30:48,100
to see what salt plans on doing we don't

00:30:42,790 --> 00:30:52,380
want to actually do it okay let me go

00:30:48,100 --> 00:30:52,380
back and demonstrate how that works

00:31:02,280 --> 00:31:12,360
it doesn't work like that all right

00:31:13,799 --> 00:31:19,409
so this is done as it's gone out and

00:31:17,710 --> 00:31:21,190
said engine X is already installed

00:31:19,409 --> 00:31:23,799
swapping this is already set of the

00:31:21,190 --> 00:31:26,859
right value but we're going to try and

00:31:23,799 --> 00:31:29,469
start engine X but it didn't actually

00:31:26,859 --> 00:31:32,499
apply anything it didn't try to start

00:31:29,469 --> 00:31:35,289
engine X it just looked in and said are

00:31:32,499 --> 00:31:38,259
we going to and so if we were deploying

00:31:35,289 --> 00:31:40,210
a lot of files in this situation then it

00:31:38,259 --> 00:31:43,149
would give us a diff and say these final

00:31:40,210 --> 00:31:45,399
is going to be dipped this way if we're

00:31:43,149 --> 00:31:47,589
installing packages we're going to say

00:31:45,399 --> 00:31:51,489
these packages are going to be installed

00:31:47,589 --> 00:31:55,809
this way and those always come back in

00:31:51,489 --> 00:32:05,279
yellow and that result is none because

00:31:55,809 --> 00:32:05,279
they didn't do anything all right

00:32:05,680 --> 00:32:12,670
so the test interface is going to return

00:32:09,390 --> 00:32:15,550
the same functionality what you do is

00:32:12,670 --> 00:32:18,310
you see if test is inside of the options

00:32:15,550 --> 00:32:24,460
that have been passed in if it is then

00:32:18,310 --> 00:32:34,690
you don't do anything ok any questions

00:32:24,460 --> 00:32:38,710
so far is anyone just wildly bewildered

00:32:34,690 --> 00:32:47,710
a little bit little too much information

00:32:38,710 --> 00:32:49,270
too quickly you're a doer yes well we're

00:32:47,710 --> 00:32:52,240
still working in getting a bunch of demo

00:32:49,270 --> 00:32:54,570
runs and exercises put together for

00:32:52,240 --> 00:32:54,570
these things

00:32:56,880 --> 00:33:04,830
so we'll definitely have those next year

00:32:58,800 --> 00:33:16,980
itself anyway right after I get some

00:33:04,830 --> 00:33:18,390
sleep and I have more employees all

00:33:16,980 --> 00:33:21,240
right i think i've already mentioned

00:33:18,390 --> 00:33:23,970
this if you pass kwargs into the

00:33:21,240 --> 00:33:26,370
interstates it does the same thing it

00:33:23,970 --> 00:33:30,390
grabs any extra data that's in the sls

00:33:26,370 --> 00:33:33,210
file and passes it in the first argument

00:33:30,390 --> 00:33:37,230
has to be named and it has to return

00:33:33,210 --> 00:33:40,020
that standard return struct or a data

00:33:37,230 --> 00:33:44,390
structure and that's it other than that

00:33:40,020 --> 00:33:46,680
they're just plain python modules ok

00:33:44,390 --> 00:33:49,860
again to go over the return data really

00:33:46,680 --> 00:33:51,420
quickly the name we just copy the name

00:33:49,860 --> 00:33:53,970
that was the name value that was passed

00:33:51,420 --> 00:33:55,950
in directly into the return data the

00:33:53,970 --> 00:33:59,250
changes has to be a Python dictionary

00:33:55,950 --> 00:34:01,890
and it's going to be a key value list of

00:33:59,250 --> 00:34:03,720
everything that has changed or will be

00:34:01,890 --> 00:34:08,520
changed if you if you're in a test

00:34:03,720 --> 00:34:12,210
interface there's old true if everything

00:34:08,520 --> 00:34:14,100
went swimmingly meaning that either true

00:34:12,210 --> 00:34:18,629
if nothing changed or something changed

00:34:14,100 --> 00:34:23,100
successfully false if it failed none if

00:34:18,629 --> 00:34:24,899
it didn't do anything and then a comment

00:34:23,100 --> 00:34:27,780
so that we've got a nice little blurb

00:34:24,899 --> 00:34:37,169
that says hey just so you know Bob this

00:34:27,780 --> 00:34:44,100
is what I just did to your system ok the

00:34:37,169 --> 00:34:48,540
test interface as I demonstrated allows

00:34:44,100 --> 00:34:50,159
you to do a dry run and we and we need

00:34:48,540 --> 00:34:52,100
to have it and you always need to have a

00:34:50,159 --> 00:34:56,480
test interface inside of your modules

00:34:52,100 --> 00:34:59,400
granted if you submit upstream to me a

00:34:56,480 --> 00:35:03,060
state module that is missing the test

00:34:59,400 --> 00:35:07,290
interface I'll probably accept it and

00:35:03,060 --> 00:35:11,520
write the test interface myself because

00:35:07,290 --> 00:35:13,170
I'm far far more interested in getting

00:35:11,520 --> 00:35:14,700
contributions from people and getting

00:35:13,170 --> 00:35:17,910
them excited about being part of this

00:35:14,700 --> 00:35:19,650
project then I am about browbeating them

00:35:17,910 --> 00:35:20,910
into writing code the exact same way

00:35:19,650 --> 00:35:22,320
that I think it should always be written

00:35:20,910 --> 00:35:24,540
I'm more than happy to clean a few

00:35:22,320 --> 00:35:26,930
things up and the result that we found

00:35:24,540 --> 00:35:30,090
there is that people end up just writing

00:35:26,930 --> 00:35:31,350
better code in the long run and if

00:35:30,090 --> 00:35:34,850
there's anything the world needs more of

00:35:31,350 --> 00:35:41,880
its guys writing better code all right

00:35:34,850 --> 00:35:44,390
ok I was a little shorter than I thought

00:35:41,880 --> 00:35:44,390
it was going to be

00:35:45,590 --> 00:35:57,000
now if you guys want to write your own

00:35:51,960 --> 00:36:00,990
modules then just try it out with

00:35:57,000 --> 00:36:02,670
assault install some time just drop

00:36:00,990 --> 00:36:05,070
those modules into the install path

00:36:02,670 --> 00:36:09,330
that's the that's the quickest way to do

00:36:05,070 --> 00:36:14,310
it and then just use some call to run

00:36:09,330 --> 00:36:15,930
them and that's all it takes if if you

00:36:14,310 --> 00:36:17,700
if you're trying to write modules if

00:36:15,930 --> 00:36:20,790
you're trying to put extensions into

00:36:17,700 --> 00:36:22,140
salt and you're having any problems and

00:36:20,790 --> 00:36:25,890
actually if you're having any problems

00:36:22,140 --> 00:36:30,420
at all with salt one check out the

00:36:25,890 --> 00:36:32,610
documentation it's very extensive my gin

00:36:30,420 --> 00:36:34,050
my general thought is that you guys are

00:36:32,610 --> 00:36:37,890
going to leave you're going you talked

00:36:34,050 --> 00:36:40,320
about a lot of stuff but then you're

00:36:37,890 --> 00:36:42,810
going to go back and you'll walk through

00:36:40,320 --> 00:36:44,580
a couple of tutorials and you'll say

00:36:42,810 --> 00:36:46,020
okay this isn't that difficult and

00:36:44,580 --> 00:36:48,690
you'll look back and you look at those

00:36:46,020 --> 00:36:52,020
SLS files and you go it wasn't a whole

00:36:48,690 --> 00:36:54,780
lot there they were pretty small and

00:36:52,020 --> 00:36:56,130
you'll get it quickly but we have all of

00:36:54,780 --> 00:36:57,710
the tutorials on the docks that are

00:36:56,130 --> 00:36:59,820
going to help step you through

00:36:57,710 --> 00:37:01,470
everything you need to do to get

00:36:59,820 --> 00:37:04,950
acquainted with what's going on with

00:37:01,470 --> 00:37:07,800
salt when you run into snags or if you

00:37:04,950 --> 00:37:10,740
went into snags we have a very lively

00:37:07,800 --> 00:37:18,960
IRC channel which is pound salt on

00:37:10,740 --> 00:37:21,630
freenode we have a very lively mailing

00:37:18,960 --> 00:37:22,950
list I will be late to respond that for

00:37:21,630 --> 00:37:28,710
every now and then to mailing list if

00:37:22,950 --> 00:37:31,350
I'm at a conference but generally either

00:37:28,710 --> 00:37:32,820
me or sub or a member of our community

00:37:31,350 --> 00:37:36,060
is going to be really quick to respond

00:37:32,820 --> 00:37:39,330
to your questions we really want to get

00:37:36,060 --> 00:37:40,620
more people involved in salt and we're

00:37:39,330 --> 00:37:42,750
doing everything that we can to make it

00:37:40,620 --> 00:37:46,080
intuitive despite the fact that there is

00:37:42,750 --> 00:37:50,190
a lot of information the goal is that

00:37:46,080 --> 00:37:53,430
salt is kind of like them in that if you

00:37:50,190 --> 00:37:55,350
know about escape Colin WQ you can use

00:37:53,430 --> 00:38:00,850
them

00:37:55,350 --> 00:38:03,010
but it's extremely powerful once you get

00:38:00,850 --> 00:38:05,050
once you're able to dive in deeper so

00:38:03,010 --> 00:38:07,210
you can have a shallow learning curve

00:38:05,050 --> 00:38:09,330
but you're able to work into the fact

00:38:07,210 --> 00:38:15,820
that there's so many more capabilities

00:38:09,330 --> 00:38:18,190
but so in a nutshell ask questions of

00:38:15,820 --> 00:38:20,110
the community there's a lot of people

00:38:18,190 --> 00:38:23,260
here to help and here to help you get

00:38:20,110 --> 00:38:26,920
going and again in the long run what's

00:38:23,260 --> 00:38:29,380
occurred in what generally occurs with

00:38:26,920 --> 00:38:31,240
people using salt is that they is that

00:38:29,380 --> 00:38:33,990
once they get get their feet wet they

00:38:31,240 --> 00:38:33,990
understand it quickly

00:38:37,549 --> 00:38:42,630
when we created asterisk over a decade

00:38:40,260 --> 00:38:44,579
ago we could not have imagined that

00:38:42,630 --> 00:38:46,770
asterisk would not only become the most

00:38:44,579 --> 00:38:48,930
widely adopted open source communication

00:38:46,770 --> 00:38:50,940
software on the planet but that it would

00:38:48,930 --> 00:38:53,460
impact the entire industry in the way

00:38:50,940 --> 00:38:55,440
that it has today asterisk has found its

00:38:53,460 --> 00:38:58,079
way in the more than 170 countries and

00:38:55,440 --> 00:39:00,030
virtually every fortune 1000 company the

00:38:58,079 --> 00:39:02,130
success of asterisk has enabled a

00:39:00,030 --> 00:39:03,539
transition of power from the hands of

00:39:02,130 --> 00:39:05,819
the traditional proprietary phone

00:39:03,539 --> 00:39:08,220
vendors into the hands of the users and

00:39:05,819 --> 00:39:10,289
administrators of phone systems using

00:39:08,220 --> 00:39:11,940
this power our customers have traded all

00:39:10,289 --> 00:39:14,010
sorts of business changing applications

00:39:11,940 --> 00:39:15,809
from small office phone systems to

00:39:14,010 --> 00:39:17,910
mission-critical call centers the

00:39:15,809 --> 00:39:19,740
international carrier networks in fact

00:39:17,910 --> 00:39:21,210
there's even an entire country those

00:39:19,740 --> 00:39:23,460
communications infrastructure runs on

00:39:21,210 --> 00:39:25,589
esters the gym has always been about

00:39:23,460 --> 00:39:27,299
creating technology that expands

00:39:25,589 --> 00:39:29,490
communications capabilities in ways that

00:39:27,299 --> 00:39:30,660
we could never have imagined and that's

00:39:29,490 --> 00:39:33,420
part of what's game-changing about

00:39:30,660 --> 00:39:35,760
Digium today we're doing it again this

00:39:33,420 --> 00:39:37,859
time by introducing a new family of HD

00:39:35,760 --> 00:39:39,960
IP phones that extends control of the

00:39:37,859 --> 00:39:41,730
user all the way to the desktop the

00:39:39,960 --> 00:39:43,440
launch of these new products represents

00:39:41,730 --> 00:39:45,420
the next phase indigenous history of

00:39:43,440 --> 00:39:47,940
innovation these are the first and only

00:39:45,420 --> 00:39:49,650
IP phones designed to fully leverage the

00:39:47,940 --> 00:39:51,329
power of estrus when we first discussed

00:39:49,650 --> 00:39:53,250
our expectations for building a family

00:39:51,329 --> 00:39:55,380
of phones for use with asterisk our

00:39:53,250 --> 00:39:57,119
requirements were pretty simple we asked

00:39:55,380 --> 00:39:58,770
the team to build the phones such that

00:39:57,119 --> 00:40:00,960
they were easy to install integrate

00:39:58,770 --> 00:40:02,819
provision and use I think you'll soon

00:40:00,960 --> 00:40:05,369
agree our engineers have delivered on

00:40:02,819 --> 00:40:06,990
that goal user feedback is validating

00:40:05,369 --> 00:40:09,119
that when it comes to operation with

00:40:06,990 --> 00:40:11,549
Astra space systems including our own

00:40:09,119 --> 00:40:14,099
Switchvox based product these are the

00:40:11,549 --> 00:40:15,420
easiest to use best integrated most

00:40:14,099 --> 00:40:18,420
interoperable products on the market

00:40:15,420 --> 00:40:21,000
today the digital phones will initially

00:40:18,420 --> 00:40:22,770
include three IP des hommes uniquely

00:40:21,000 --> 00:40:25,049
designed to complement any asterisks or

00:40:22,770 --> 00:40:26,329
Switchvox based solution these phones

00:40:25,049 --> 00:40:29,400
are different for a number of reasons

00:40:26,329 --> 00:40:31,680
first there is clue sively designed for

00:40:29,400 --> 00:40:33,420
use with asterisks secondly we've made

00:40:31,680 --> 00:40:35,880
it really easy to autodiscover and

00:40:33,420 --> 00:40:36,990
provision the phones next we've made it

00:40:35,880 --> 00:40:39,510
easy for the phones to access

00:40:36,990 --> 00:40:41,160
information inside of asterisks allowing

00:40:39,510 --> 00:40:42,260
tight coupling between an application

00:40:41,160 --> 00:40:44,250
and

00:40:42,260 --> 00:40:46,410
additionally we've created an

00:40:44,250 --> 00:40:48,510
applications engine that allows users

00:40:46,410 --> 00:40:51,120
and developers to create and run their

00:40:48,510 --> 00:40:53,190
own apps on the following and finally

00:40:51,120 --> 00:40:55,230
we've done all of this at a very

00:40:53,190 --> 00:40:56,940
compelling price point at Digium we're

00:40:55,230 --> 00:40:58,710
always thinking of ways to give our

00:40:56,940 --> 00:41:01,080
customers the best value in business

00:40:58,710 --> 00:41:02,970
phone systems and also give them the

00:41:01,080 --> 00:41:05,100
power to create their own solutions or

00:41:02,970 --> 00:41:06,900
eating communications challenge will

00:41:05,100 --> 00:41:08,700
continue to push the boundaries not only

00:41:06,900 --> 00:41:10,740
to make Astra's cooler bastard more

00:41:08,700 --> 00:41:12,480
technologically feature-rich but to make

00:41:10,740 --> 00:41:15,000
asterisk and communications even easier

00:41:12,480 --> 00:41:18,530
and together we'll change the way the

00:41:15,000 --> 00:41:18,530
world communicates again

00:41:28,940 --> 00:41:35,760
how's that sigh every way this is the

00:41:32,520 --> 00:41:37,920
way to better utilize all your resources

00:41:35,760 --> 00:41:41,370
and it makes managing all your resources

00:41:37,920 --> 00:41:45,200
pretty easy all of the innovation is

00:41:41,370 --> 00:41:48,720
happening in open source the

00:41:45,200 --> 00:41:50,520
collaborative nature and of the you know

00:41:48,720 --> 00:41:52,440
of the community and the speed at which

00:41:50,520 --> 00:41:54,630
these are these you know these

00:41:52,440 --> 00:41:56,940
deficiencies these bugs are getting

00:41:54,630 --> 00:41:59,520
discovered and then fixed is it like

00:41:56,940 --> 00:42:02,250
that really shows the power of the you

00:41:59,520 --> 00:42:03,870
know of the open source community it is

00:42:02,250 --> 00:42:08,070
global and it's definitely because of

00:42:03,870 --> 00:42:14,400
the users community people are extremely

00:42:08,070 --> 00:42:16,320
friendly and always ready to help if you

00:42:14,400 --> 00:42:18,600
go on tire see any day you'll see these

00:42:16,320 --> 00:42:20,330
guys helping each other out and they're

00:42:18,600 --> 00:42:23,010
all doing it like in a selfless manner

00:42:20,330 --> 00:42:26,000
the product is transparent for everyone

00:42:23,010 --> 00:42:28,950
everyone can look at the code base

00:42:26,000 --> 00:42:30,690
everyone can see how close that is is

00:42:28,950 --> 00:42:36,540
being built nothing nothing is

00:42:30,690 --> 00:42:39,180
proprietary everything is open in many

00:42:36,540 --> 00:42:43,380
ways it's absolutely vital to the the

00:42:39,180 --> 00:42:47,160
unborn health CloudStack the most

00:42:43,380 --> 00:42:51,050
exciting event in recent memory for me

00:42:47,160 --> 00:42:53,720
was our first developer boot camp

00:42:51,050 --> 00:42:56,360
and our call gave people I gave you two

00:42:53,720 --> 00:43:00,320
weeks notice to come attend I was

00:42:56,360 --> 00:43:04,550
expecting 25 or 30 people so we ended up

00:43:00,320 --> 00:43:07,310
with 87 people and had to go get board

00:43:04,550 --> 00:43:09,860
chairs into the room twice everything

00:43:07,310 --> 00:43:13,100
within cloud computing is commodity and

00:43:09,860 --> 00:43:16,190
is open source and so I don't think that

00:43:13,100 --> 00:43:17,930
you will you'll see anywhere where open

00:43:16,190 --> 00:43:20,960
source is not pervasive in cloud

00:43:17,930 --> 00:43:23,510
computing and so i think it's i think

00:43:20,960 --> 00:43:25,040
it's an assumption i think when you talk

00:43:23,510 --> 00:43:28,750
about cloud computing you're really

00:43:25,040 --> 00:43:28,750
talking about a source cloud computing

00:43:29,050 --> 00:43:35,090
cloud sac is a robust solution for large

00:43:32,330 --> 00:43:37,490
deployments you have dozens of data

00:43:35,090 --> 00:43:41,510
centers and thousands of servers in each

00:43:37,490 --> 00:43:44,780
data centers these hardware is going to

00:43:41,510 --> 00:43:47,990
fail and CloudStack is designed to

00:43:44,780 --> 00:43:50,480
handle number one that mass scale number

00:43:47,990 --> 00:43:53,180
two it's designed to handle the failure

00:43:50,480 --> 00:43:55,460
that inevitably happens in large

00:43:53,180 --> 00:43:58,280
deployments we started working on

00:43:55,460 --> 00:44:01,790
college attack over four years ago and

00:43:58,280 --> 00:44:04,370
it was the original set of people

00:44:01,790 --> 00:44:06,560
working on it had a background of

00:44:04,370 --> 00:44:10,370
delivering software telcos and service

00:44:06,560 --> 00:44:14,810
providers lots of QA lots of users

00:44:10,370 --> 00:44:18,850
actually using it high availability is a

00:44:14,810 --> 00:44:21,770
key feature multiple hypervisors support

00:44:18,850 --> 00:44:24,200
different network models you can pick up

00:44:21,770 --> 00:44:26,210
whatever suits you better while step

00:44:24,200 --> 00:44:29,870
management server can be deployed in

00:44:26,210 --> 00:44:31,670
different physical machines it

00:44:29,870 --> 00:44:33,290
definitely has a huge footprint it's

00:44:31,670 --> 00:44:38,690
being deployed everywhere there's a

00:44:33,290 --> 00:44:40,420
major movie studio that they were using

00:44:38,690 --> 00:44:43,640
cloudstack they were using it to

00:44:40,420 --> 00:44:45,800
transcode video and I thought that was

00:44:43,640 --> 00:44:47,120
terribly fascinating what I found more

00:44:45,800 --> 00:44:50,390
fascinating is what they did during

00:44:47,120 --> 00:44:53,180
lunch where they would spin up you know

00:44:50,390 --> 00:44:54,560
50 or 60 game servers then as soon as

00:44:53,180 --> 00:44:55,130
lunch was over they would destroy all

00:44:54,560 --> 00:44:57,250
the guests

00:44:55,130 --> 00:45:00,650
this and go back to doing real world

00:44:57,250 --> 00:45:02,150
cloudstack is vast it touches so many

00:45:00,650 --> 00:45:04,040
different aspects and there's no one

00:45:02,150 --> 00:45:06,710
person that's kind of like a master of

00:45:04,040 --> 00:45:10,520
all those realms I think clouds stack as

00:45:06,710 --> 00:45:12,740
a project is going to be one of the

00:45:10,520 --> 00:45:16,790
leaders simply because it's some of the

00:45:12,740 --> 00:45:22,220
most feature fallen and and robust

00:45:16,790 --> 00:45:25,120
platforms out they were Adam senior

00:45:22,220 --> 00:45:25,120

YouTube URL: https://www.youtube.com/watch?v=WU_vKJYSjDc


