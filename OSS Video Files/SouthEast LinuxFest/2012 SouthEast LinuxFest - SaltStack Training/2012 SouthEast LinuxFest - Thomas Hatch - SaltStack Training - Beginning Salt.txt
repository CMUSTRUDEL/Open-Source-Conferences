Title: 2012 SouthEast LinuxFest - Thomas Hatch - SaltStack Training - Beginning Salt
Publication date: 2014-05-20
Playlist: 2012 SouthEast LinuxFest - SaltStack Training
Description: 
	2012 SouthEast LinuxFest
Thomas Hatch
SaltStack Training
Beginning Salt
Captions: 
	00:00:00,000 --> 00:00:05,279
the following presentation was recorded

00:00:02,490 --> 00:00:08,040
the 2012 southeast linux fest in

00:00:05,279 --> 00:00:10,410
charlotte north carolina it is licensed

00:00:08,040 --> 00:00:12,090
under a creative commons license for

00:00:10,410 --> 00:00:17,609
more information about the southeast

00:00:12,090 --> 00:00:19,439
linux fest visit w wh linux pc org the

00:00:17,609 --> 00:00:22,320
southeast linux fest would like to thank

00:00:19,439 --> 00:00:25,699
the following diamond sponsors in 2012

00:00:22,320 --> 00:00:28,380
for helping make these videos possible

00:00:25,699 --> 00:00:30,660
dead and I've discovered that we have a

00:00:28,380 --> 00:00:34,440
lot less knowledge in this area about

00:00:30,660 --> 00:00:37,500
salt than other areas back back West

00:00:34,440 --> 00:00:40,710
we've got well the following is a little

00:00:37,500 --> 00:00:42,570
more entrenched at this point so anyway

00:00:40,710 --> 00:00:44,820
we're going to talk a little bit about

00:00:42,570 --> 00:00:48,180
getting started with salt we're going to

00:00:44,820 --> 00:00:51,050
talk a little bit about about the main

00:00:48,180 --> 00:00:53,670
philosophies and ideas behind salt and

00:00:51,050 --> 00:00:55,020
and that should give a good overview as

00:00:53,670 --> 00:01:02,850
to why they're different from some

00:00:55,020 --> 00:01:05,100
similar tools in the in the area so this

00:01:02,850 --> 00:01:07,680
first tonic is going to be is going to

00:01:05,100 --> 00:01:10,110
be kind of a lengthy overview of those

00:01:07,680 --> 00:01:12,930
ideas of what the what the basic system

00:01:10,110 --> 00:01:15,840
is and we're going to cover a few key

00:01:12,930 --> 00:01:18,920
topics that kind of get proliferated out

00:01:15,840 --> 00:01:21,840
throughout all of the context of salt

00:01:18,920 --> 00:01:24,960
I'm also going to go over how to install

00:01:21,840 --> 00:01:27,479
and setup salt which is generally and

00:01:24,960 --> 00:01:31,350
hopefully a very easy thing to do now if

00:01:27,479 --> 00:01:33,810
you guys want to follow along with some

00:01:31,350 --> 00:01:37,140
of the examples you're more than welcome

00:01:33,810 --> 00:01:40,079
to I'm going to be using fedora 17 but

00:01:37,140 --> 00:01:43,680
we are in young back to fedora 15 and

00:01:40,079 --> 00:01:45,720
we're in apple if you've got any of any

00:01:43,680 --> 00:01:51,600
of those distributions available in a vm

00:01:45,720 --> 00:01:54,930
or on your system we are also have have

00:01:51,600 --> 00:01:58,469
a PPA if you're running a boon to or

00:01:54,930 --> 00:02:00,240
worry in we're in portage for gen 2

00:01:58,469 --> 00:02:03,600
we're in the arch linux that you are

00:02:00,240 --> 00:02:05,189
we're in the freebsd ports tree so if

00:02:03,600 --> 00:02:07,079
you want to follow along and install in

00:02:05,189 --> 00:02:09,420
a virtual machine or on your or directly

00:02:07,079 --> 00:02:11,410
on your system then

00:02:09,420 --> 00:02:15,460
make sure you've got an environment

00:02:11,410 --> 00:02:17,020
ready okay we're going to talk a little

00:02:15,460 --> 00:02:21,490
bit about how authentication works

00:02:17,020 --> 00:02:24,070
insult how remote execution works and

00:02:21,490 --> 00:02:32,050
some of the fundamental design concepts

00:02:24,070 --> 00:02:36,070
behind it now the main reason why I

00:02:32,050 --> 00:02:39,220
develop salt I've worked i work for a

00:02:36,070 --> 00:02:42,510
number of companies that i needed to

00:02:39,220 --> 00:02:44,830
deploy cloud-like infrastructures

00:02:42,510 --> 00:02:48,910
granted we've all been calling them that

00:02:44,830 --> 00:02:50,590
for a few years but but you have virtual

00:02:48,910 --> 00:02:51,700
machine like infrastructures and the

00:02:50,590 --> 00:02:53,020
problem that I kept running into it's a

00:02:51,700 --> 00:02:56,440
lot of existing virtual machine

00:02:53,020 --> 00:02:58,840
deployment tools especially a few years

00:02:56,440 --> 00:03:02,200
ago they've improved greatly in the last

00:02:58,840 --> 00:03:04,390
just in last year but a few years ago

00:03:02,200 --> 00:03:08,230
was that a lot of them are lied on

00:03:04,390 --> 00:03:10,209
cached data and in a lot of situations I

00:03:08,230 --> 00:03:12,190
was finding the cached data as to where

00:03:10,209 --> 00:03:13,959
virtual machines were inside at the

00:03:12,190 --> 00:03:17,019
inside of the cloud controllers to be

00:03:13,959 --> 00:03:19,570
incorrect or to be out of date and so I

00:03:17,019 --> 00:03:21,850
wanted to deploy a system or I was able

00:03:19,570 --> 00:03:23,769
to query live data about an

00:03:21,850 --> 00:03:26,799
infrastructure and find out where

00:03:23,769 --> 00:03:28,360
virtual machines were and so I developed

00:03:26,799 --> 00:03:30,070
a few Ramona can parallel remote

00:03:28,360 --> 00:03:31,239
execution systems and found that over

00:03:30,070 --> 00:03:33,549
and over again either they couldn't

00:03:31,239 --> 00:03:37,000
scale because the master ended up using

00:03:33,549 --> 00:03:39,730
far too much RAM to pull to bring up a

00:03:37,000 --> 00:03:45,970
thousand or so SSH connections at once

00:03:39,730 --> 00:03:49,390
and then it was a very fast anyway or or

00:03:45,970 --> 00:03:52,000
if i was using cereal or xmlrpc systems

00:03:49,390 --> 00:03:54,640
then yeah those weren't fast enough

00:03:52,000 --> 00:03:57,100
either because I needed something that

00:03:54,640 --> 00:04:00,340
was able to look at a large group of

00:03:57,100 --> 00:04:02,380
systems all at once and use it inside of

00:04:00,340 --> 00:04:05,920
an API and not have to hang out for it

00:04:02,380 --> 00:04:12,670
to finish and so I found a system called

00:04:05,920 --> 00:04:16,410
0 mq 0 mq is a networking library that

00:04:12,670 --> 00:04:16,410
that was developed to

00:04:16,579 --> 00:04:25,099
to deliver some interesting network

00:04:18,530 --> 00:04:27,889
topologies back out via an API and so it

00:04:25,099 --> 00:04:29,449
stemmed out of the amqp projects that

00:04:27,889 --> 00:04:32,120
were developed a few years ago if those

00:04:29,449 --> 00:04:37,520
if you're not familiar with amqp I've

00:04:32,120 --> 00:04:40,189
just got a lot of people aren't amqp you

00:04:37,520 --> 00:04:41,870
is a project a number of banks financial

00:04:40,189 --> 00:04:44,180
institutions and large software

00:04:41,870 --> 00:04:47,300
companies gun together a few years ago

00:04:44,180 --> 00:04:50,979
and said we want to create a new way to

00:04:47,300 --> 00:04:54,229
pass information around on a network and

00:04:50,979 --> 00:04:56,539
as one might expect if you get a lot of

00:04:54,229 --> 00:05:00,229
banks and large software companies

00:04:56,539 --> 00:05:02,330
together to cooperate on the deployment

00:05:00,229 --> 00:05:04,639
of a piece of software is going to end

00:05:02,330 --> 00:05:06,080
up being somewhat large have probably

00:05:04,639 --> 00:05:09,139
more features than you could ever need

00:05:06,080 --> 00:05:10,669
and a little bloated and so they had

00:05:09,139 --> 00:05:15,229
brought in a consultant to help them

00:05:10,669 --> 00:05:16,639
develop am amqp and this individual felt

00:05:15,229 --> 00:05:19,520
as though the project was going in that

00:05:16,639 --> 00:05:20,779
direction I'll leave individuals up to

00:05:19,520 --> 00:05:24,409
decide whether or not they think that's

00:05:20,779 --> 00:05:28,550
what happened but that's what he felt

00:05:24,409 --> 00:05:33,110
and so he split off and developed zeromq

00:05:28,550 --> 00:05:35,240
which is an API that allows you to build

00:05:33,110 --> 00:05:37,460
these functions directly into an

00:05:35,240 --> 00:05:41,180
application so that you're able to use

00:05:37,460 --> 00:05:44,089
the core aspects of this amqp system the

00:05:41,180 --> 00:05:46,190
really good ideas from it and just those

00:05:44,089 --> 00:05:48,770
and then build them into your

00:05:46,190 --> 00:05:49,940
application which means that unlike amqp

00:05:48,770 --> 00:05:51,830
you don't need to have a dedicated

00:05:49,940 --> 00:05:53,449
broker sitting out there on your network

00:05:51,830 --> 00:05:55,759
you don't need to have a rabid mq server

00:05:53,449 --> 00:05:57,159
or an active mq server sitting out on

00:05:55,759 --> 00:05:59,449
your network that you're constantly

00:05:57,159 --> 00:06:00,529
communicating with you can build all of

00:05:59,449 --> 00:06:03,020
that communication all those

00:06:00,529 --> 00:06:07,310
communication constructs directly into

00:06:03,020 --> 00:06:09,830
your application and so I found 0 mq and

00:06:07,310 --> 00:06:11,870
gave it a shot and realize that finally

00:06:09,830 --> 00:06:14,060
I had found the way to communicate with

00:06:11,870 --> 00:06:17,300
lots and lots of servers very quickly

00:06:14,060 --> 00:06:20,000
and get that information back and so I

00:06:17,300 --> 00:06:23,300
develop salt to do that for remote

00:06:20,000 --> 00:06:24,680
execution I developed a prototype Cloud

00:06:23,300 --> 00:06:26,330
Controller for a company I was working

00:06:24,680 --> 00:06:31,550
with at the time

00:06:26,330 --> 00:06:33,430
and and and i really don't suggest using

00:06:31,550 --> 00:06:35,330
that prototype cloud controller and

00:06:33,430 --> 00:06:37,009
ironically despite the fact that my

00:06:35,330 --> 00:06:38,569
original intention for saw was for it to

00:06:37,009 --> 00:06:44,270
be a cloud controller I've never

00:06:38,569 --> 00:06:46,729
released anything of that sort instead I

00:06:44,270 --> 00:06:50,569
built configuration management on top of

00:06:46,729 --> 00:06:52,939
it a few months later primarily because

00:06:50,569 --> 00:06:54,620
I kept running into problems with a few

00:06:52,939 --> 00:06:57,469
of the existing configuration management

00:06:54,620 --> 00:06:59,419
tools and a good friend of mine was

00:06:57,469 --> 00:07:03,800
goading me into come on Tom you can you

00:06:59,419 --> 00:07:06,289
can make one that's better and and so I

00:07:03,800 --> 00:07:13,819
made one and some people agree that it's

00:07:06,289 --> 00:07:16,520
better I think it is anyway the core

00:07:13,819 --> 00:07:20,240
idea behind salt is that having this

00:07:16,520 --> 00:07:22,729
remote execution system gives us a

00:07:20,240 --> 00:07:26,180
couple of things into an infrastructure

00:07:22,729 --> 00:07:28,520
that we generally haven't had before if

00:07:26,180 --> 00:07:29,900
you were to look at the the classic

00:07:28,520 --> 00:07:31,340
methodology for gaining information

00:07:29,900 --> 00:07:33,800
about an infrastructure through a

00:07:31,340 --> 00:07:38,569
monitoring medium and we've got we've

00:07:33,800 --> 00:07:40,520
got some xenos foo here then then with a

00:07:38,569 --> 00:07:42,349
lot of those systems as you know you've

00:07:40,520 --> 00:07:43,849
got agents sitting out on the systems

00:07:42,349 --> 00:07:46,610
and then constantly reporting back into

00:07:43,849 --> 00:07:48,620
a database of some sort and then you

00:07:46,610 --> 00:07:51,020
query that data to find out what's going

00:07:48,620 --> 00:07:52,789
on one of the main difference is with

00:07:51,020 --> 00:07:54,409
salt and I'm not saying that this

00:07:52,789 --> 00:07:55,879
replaces the functionality of a

00:07:54,409 --> 00:07:59,180
monitoring system because the scope

00:07:55,879 --> 00:08:01,490
differs a little but that is that you

00:07:59,180 --> 00:08:02,960
can just query and say what's going on

00:08:01,490 --> 00:08:06,139
on my thousands of servers and it just

00:08:02,960 --> 00:08:08,120
comes back and tells you or you can send

00:08:06,139 --> 00:08:10,520
a command out to actually do anything

00:08:08,120 --> 00:08:14,330
that you want on thousands of servers or

00:08:10,520 --> 00:08:16,099
target very specific servers and so all

00:08:14,330 --> 00:08:19,039
of the functionality in salt is based

00:08:16,099 --> 00:08:21,800
based on top of this core idea of high

00:08:19,039 --> 00:08:23,089
speed remote execution which is why

00:08:21,800 --> 00:08:24,849
we've got a bit of a different approach

00:08:23,089 --> 00:08:28,280
to how we handle things like

00:08:24,849 --> 00:08:30,650
configuration management okay

00:08:28,280 --> 00:08:32,090
the other big benefit behind the remote

00:08:30,650 --> 00:08:36,919
execution system is that we've developed

00:08:32,090 --> 00:08:40,039
a system centric API a system centric

00:08:36,919 --> 00:08:42,530
set of modules that allow us to do

00:08:40,039 --> 00:08:45,170
things that are specific to managing

00:08:42,530 --> 00:08:48,080
systems and so we've got this workhorse

00:08:45,170 --> 00:08:50,980
API that does everything from manage

00:08:48,080 --> 00:08:53,720
files on systems all the way up to

00:08:50,980 --> 00:08:56,330
manipulating SQL and dealing with solar

00:08:53,720 --> 00:08:58,280
search engines and we've had quite a few

00:08:56,330 --> 00:09:07,160
contributions in the last just in last

00:08:58,280 --> 00:09:13,790
few months so we're going to talk a lot

00:09:07,160 --> 00:09:15,860
about how this core API works one of the

00:09:13,790 --> 00:09:19,430
talks later on talks about exactly how

00:09:15,860 --> 00:09:21,620
to extend the quarry API it's very it

00:09:19,430 --> 00:09:26,089
did the goal was to make it as easy and

00:09:21,620 --> 00:09:27,500
intuitive to extend as possible and and

00:09:26,089 --> 00:09:29,630
talk a little bit about how we access

00:09:27,500 --> 00:09:32,180
these tools and systems inside of this

00:09:29,630 --> 00:09:37,700
API via the remote execution and via a

00:09:32,180 --> 00:09:42,640
few other mediums okay any questions so

00:09:37,700 --> 00:09:47,240
far or am I just becoming boring okay

00:09:42,640 --> 00:09:49,490
now setting up salt the main salt

00:09:47,240 --> 00:09:53,660
topology is that we have a salt master

00:09:49,490 --> 00:09:55,400
and that master is a published node that

00:09:53,660 --> 00:09:56,960
does well it does quite a few things it

00:09:55,400 --> 00:09:58,339
starts up a number of processes to

00:09:56,960 --> 00:10:01,970
maintain all of its all of its

00:09:58,339 --> 00:10:03,800
background capabilities and then all of

00:10:01,970 --> 00:10:05,870
the systems that you connect to you set

00:10:03,800 --> 00:10:08,120
up a salt minion on and these guys all

00:10:05,870 --> 00:10:10,790
check back into the master and to wait

00:10:08,120 --> 00:10:14,530
for commands now as I was saying we're

00:10:10,790 --> 00:10:23,930
in a lot of package trees etc etc and so

00:10:14,530 --> 00:10:26,140
the easiest way to install salt there we

00:10:23,930 --> 00:10:26,140
go

00:10:32,060 --> 00:10:40,529
is co install it or to amp get instant

00:10:37,130 --> 00:10:44,459
or two well to get to get it through

00:10:40,529 --> 00:10:46,200
your through your package manager well I

00:10:44,459 --> 00:10:52,709
have to give this a second of course oh

00:10:46,200 --> 00:10:55,500
we're doing rather good unsung the

00:10:52,709 --> 00:10:58,260
master server g wants install both

00:10:55,500 --> 00:11:04,920
master and minute or gee that's going to

00:10:58,260 --> 00:11:06,330
be yourself um it depends there's

00:11:04,920 --> 00:11:07,740
there's a lot of deployments out there

00:11:06,330 --> 00:11:11,820
where they don't want their master to

00:11:07,740 --> 00:11:14,480
beacon controlled by their master and

00:11:11,820 --> 00:11:17,339
there's somewhere they were they do

00:11:14,480 --> 00:11:22,950
generally speaking and and i'll light on

00:11:17,339 --> 00:11:24,480
this a little later today you can

00:11:22,950 --> 00:11:26,250
actually run for instance the song

00:11:24,480 --> 00:11:28,890
configuration management system without

00:11:26,250 --> 00:11:31,200
having a master and the main the main

00:11:28,890 --> 00:11:32,850
idea is behind that is that you can have

00:11:31,200 --> 00:11:36,000
a standalone chunk it delivered

00:11:32,850 --> 00:11:41,209
somewhere and set it up or that you can

00:11:36,000 --> 00:11:41,209
use salt to salt a salt master

00:11:44,800 --> 00:11:50,360
okay now once we've got a salt measure

00:11:48,860 --> 00:11:53,000
well actually i'll talk a little bit

00:11:50,360 --> 00:11:57,860
about the other ways to install the salt

00:11:53,000 --> 00:12:02,210
is written entirely in Python and so

00:11:57,860 --> 00:12:04,430
it's also up on pi PI well I'm certainly

00:12:02,210 --> 00:12:06,260
in the camp that I do not think that

00:12:04,430 --> 00:12:08,840
deploying production code from PI pi is

00:12:06,260 --> 00:12:12,170
a good idea and that there are system

00:12:08,840 --> 00:12:13,550
packages for a reasons I'm not going to

00:12:12,170 --> 00:12:15,610
stop you from doing whatever the devil

00:12:13,550 --> 00:12:19,430
you want to do in your production system

00:12:15,610 --> 00:12:25,010
but you can pip install salt or easy

00:12:19,430 --> 00:12:30,170
install salt from PI pi hey how's it

00:12:25,010 --> 00:12:35,720
going come on in don't be shy don't

00:12:30,170 --> 00:12:43,330
worry we're not too far ahead oh oh I

00:12:35,720 --> 00:12:46,040
sometimes I wish I had overslept alright

00:12:43,330 --> 00:12:49,400
so a lot of different ways that you can

00:12:46,040 --> 00:12:52,150
install salt you can also some people

00:12:49,400 --> 00:12:54,740
are daring enough to actually follow get

00:12:52,150 --> 00:12:56,480
because we deploy a lot of new features

00:12:54,740 --> 00:12:59,690
and a lot of new capabilities in salt

00:12:56,480 --> 00:13:01,880
very very quickly if we go back and look

00:12:59,690 --> 00:13:03,890
at the release notes you'll see and the

00:13:01,880 --> 00:13:06,380
recently the release notes are available

00:13:03,890 --> 00:13:07,430
inside of our documentation but if you

00:13:06,380 --> 00:13:10,100
go back and look at the release notes

00:13:07,430 --> 00:13:12,650
you'll see that we we will have say a

00:13:10,100 --> 00:13:16,300
three-week bridge between releases and

00:13:12,650 --> 00:13:19,100
something like ten exciting new features

00:13:16,300 --> 00:13:23,000
so it is it is under very rapid

00:13:19,100 --> 00:13:25,070
development but if you decide to install

00:13:23,000 --> 00:13:26,540
via get once fell directly via the

00:13:25,070 --> 00:13:32,000
source tarball then it's just a set up

00:13:26,540 --> 00:13:34,880
top high and that set up that pie will

00:13:32,000 --> 00:13:36,880
use we use pip to download any of the

00:13:34,880 --> 00:13:41,830
dependencies that are required as well

00:13:36,880 --> 00:13:41,830
okay let's see if this install is done

00:13:42,310 --> 00:13:47,440
and I was embarrassing I know what I'm

00:13:45,730 --> 00:13:51,720
tough I know that I should choose

00:13:47,440 --> 00:13:51,720
something else and obviously it isn't

00:13:59,659 --> 00:14:10,099
it is not we have a PPA so a PPA in

00:14:06,299 --> 00:14:13,199
ubuntu is a personal whose PPA Steve

00:14:10,099 --> 00:14:16,469
thank you a personal pack is our package

00:14:13,199 --> 00:14:22,319
archive and it's just a system where you

00:14:16,469 --> 00:14:27,299
can upload Deb files and then you can

00:14:22,319 --> 00:14:43,229
use no I'm good I'm good I'll just I'll

00:14:27,299 --> 00:14:44,579
just die on the door yeah and we've gone

00:14:43,229 --> 00:14:46,829
we've got all the instructions on

00:14:44,579 --> 00:14:50,159
specific ubuntu installations inside of

00:14:46,829 --> 00:14:56,239
our dogs alright this is a pretty

00:14:50,159 --> 00:14:56,239
bare-bones install so we do yes

00:15:04,999 --> 00:15:12,959
okay we don't have official Debian

00:15:09,779 --> 00:15:16,259
packages yet and frankly if anybody

00:15:12,959 --> 00:15:20,149
knows anyone who is in with Debbie and

00:15:16,259 --> 00:15:20,149
upstream we really need to get in there

00:15:20,629 --> 00:15:29,990
yeah right now on debian you do need to

00:15:23,399 --> 00:15:40,050
do a source install there we go that was

00:15:29,990 --> 00:15:41,279
I'm embarrassed okay now we put a lot of

00:15:40,050 --> 00:15:43,139
effort trying to get into Debbie an

00:15:41,279 --> 00:15:51,230
upstream but we just need the better

00:15:43,139 --> 00:15:53,550
contacts I guess at this point alright

00:15:51,230 --> 00:15:56,069
so we're finally getting solved

00:15:53,550 --> 00:16:00,120
installed since we've had some download

00:15:56,069 --> 00:16:05,759
issues already I'm really excited that

00:16:00,120 --> 00:16:07,980
we're starting the day off so well now

00:16:05,759 --> 00:16:11,009
in most package repository salt is split

00:16:07,980 --> 00:16:14,160
up into three packages their salt itself

00:16:11,009 --> 00:16:16,709
which is pretty much the entire of

00:16:14,160 --> 00:16:18,180
library and most of those libraries are

00:16:16,709 --> 00:16:20,250
shared between the master of the minion

00:16:18,180 --> 00:16:22,769
and then master and menu packages that

00:16:20,250 --> 00:16:28,009
come with startup scripts or systemd or

00:16:22,769 --> 00:16:33,920
whatever okay so we've got it installed

00:16:28,009 --> 00:16:37,819
and to start at the master all we do is

00:16:33,920 --> 00:16:39,959
either either run service start master

00:16:37,819 --> 00:16:41,309
because it's going to be put into your

00:16:39,959 --> 00:16:44,129
knit system if you've installed via

00:16:41,309 --> 00:16:46,470
package or we can start it up by saying

00:16:44,129 --> 00:16:48,870
let's run it in the foreground in debug

00:16:46,470 --> 00:16:50,550
mode which is a great way to see what's

00:16:48,870 --> 00:16:53,160
going on the first time that you start

00:16:50,550 --> 00:16:57,120
up a master is going to create the

00:16:53,160 --> 00:17:00,899
master side RSA key pair and then start

00:16:57,120 --> 00:17:04,409
up a bunch of processes so by default it

00:17:00,899 --> 00:17:07,589
starts up five worker processes and then

00:17:04,409 --> 00:17:09,199
it starts up three management management

00:17:07,589 --> 00:17:16,699
processes to manage some of the

00:17:09,199 --> 00:17:18,199
events that occur on the master okay now

00:17:16,699 --> 00:17:19,730
since I don't want the master to be

00:17:18,199 --> 00:17:21,260
flying off and telling us everything

00:17:19,730 --> 00:17:27,909
that's going on I'm going to start it up

00:17:21,260 --> 00:17:30,620
in as demon they're nice and quiet now

00:17:27,909 --> 00:17:32,029
similarly we can we now start up the

00:17:30,620 --> 00:17:34,760
salt minion there's only one

00:17:32,029 --> 00:17:37,370
configuration that we need to do on the

00:17:34,760 --> 00:17:39,169
salt minion before starting it up and

00:17:37,370 --> 00:17:40,940
that is make sure that it knows where

00:17:39,169 --> 00:17:43,850
the salt mass tourism one of the

00:17:40,940 --> 00:17:45,620
interesting things about about the salt

00:17:43,850 --> 00:17:48,139
minions is that they don't listen on any

00:17:45,620 --> 00:17:50,690
ports only the master listens on ports

00:17:48,139 --> 00:17:52,309
and so the minion connects to the master

00:17:50,690 --> 00:17:56,389
and then binds to one of those ports

00:17:52,309 --> 00:17:57,980
awaiting commands now what this means is

00:17:56,389 --> 00:18:00,320
that your minion can still be firewalled

00:17:57,980 --> 00:18:04,940
into oblivion which is rather nice I

00:18:00,320 --> 00:18:07,580
think and then the master only needs to

00:18:04,940 --> 00:18:09,980
have these two ports open one port for

00:18:07,580 --> 00:18:20,320
bi-directional communication and the

00:18:09,980 --> 00:18:24,490
other port for zoom Q publications so if

00:18:20,320 --> 00:18:28,460
we discover the vim is not available

00:18:24,490 --> 00:18:31,250
okay then we get to play a bill joy old

00:18:28,460 --> 00:18:32,389
school so by default the minions are

00:18:31,250 --> 00:18:34,940
going to look for the master under the

00:18:32,389 --> 00:18:36,200
dns name of salt so generally the

00:18:34,940 --> 00:18:38,110
easiest way to configure this in a

00:18:36,200 --> 00:18:42,019
larger environment is just set your dns

00:18:38,110 --> 00:18:47,360
to have an entry salt pointing back to

00:18:42,019 --> 00:18:50,059
the salt master now if you don't want to

00:18:47,360 --> 00:18:53,029
do that or if you're running tests on

00:18:50,059 --> 00:18:56,320
your local machine like we are then we

00:18:53,029 --> 00:18:58,340
can statically assign with mass tourism

00:18:56,320 --> 00:18:59,330
now another thing that I'm going to do

00:18:58,340 --> 00:19:00,590
in here before you move forward

00:18:59,330 --> 00:19:02,029
primarily because I don't want this

00:19:00,590 --> 00:19:05,120
meeting to show up as local host

00:19:02,029 --> 00:19:07,610
localhost to the master when that minion

00:19:05,120 --> 00:19:10,399
turns on it checks in it it assigns

00:19:07,610 --> 00:19:11,870
itself an ID now my default that idea is

00:19:10,399 --> 00:19:14,899
going to be whatever it thinks its host

00:19:11,870 --> 00:19:17,029
name is but we can statically override

00:19:14,899 --> 00:19:19,610
this ID one of the main there is a

00:19:17,029 --> 00:19:22,429
couple main reasons for allowing static

00:19:19,610 --> 00:19:24,700
ova statically overriding the ID

00:19:22,429 --> 00:19:27,320
the primary one was because a

00:19:24,700 --> 00:19:28,850
supercomputing deployment to asked me to

00:19:27,320 --> 00:19:30,679
make it so that we could have multiple

00:19:28,850 --> 00:19:33,470
minions running on a single super

00:19:30,679 --> 00:19:35,029
computer node and so we can assign

00:19:33,470 --> 00:19:36,499
different IDs for different minions and

00:19:35,029 --> 00:19:38,840
run multiple meanings own sigil Noda

00:19:36,499 --> 00:19:44,179
then use them as separate communication

00:19:38,840 --> 00:19:46,220
channels if that's applicable for most

00:19:44,179 --> 00:19:50,210
cases frankly it isn't but you can

00:19:46,220 --> 00:19:56,139
statically sign the ID so i'll call this

00:19:50,210 --> 00:19:56,139
guy minion all right

00:19:59,620 --> 00:20:08,470
we'll start the minion up it'll create

00:20:02,380 --> 00:20:12,430
its keys excellent and then we get

00:20:08,470 --> 00:20:15,250
informed by the minion whoa the master

00:20:12,430 --> 00:20:17,350
is cached or key and it says that it

00:20:15,250 --> 00:20:22,090
hasn't been accepted yet okay great

00:20:17,350 --> 00:20:25,920
grand wonderful so oh I thought i fixed

00:20:22,090 --> 00:20:25,920
that trace when I kissed control C

00:20:26,340 --> 00:20:32,559
alright so we'll start the meeting in

00:20:28,809 --> 00:20:38,170
the background and then we'll hop back

00:20:32,559 --> 00:20:41,110
over here to some slides now we watched

00:20:38,170 --> 00:20:42,400
this some keys got generated and so

00:20:41,110 --> 00:20:46,840
we're going to talk a little bit about

00:20:42,400 --> 00:20:49,960
authentication now again one of the main

00:20:46,840 --> 00:20:52,780
goals behind salt is that it is simple

00:20:49,960 --> 00:20:54,850
that is easy to use easy to understand

00:20:52,780 --> 00:20:58,770
and gets out of your way that you set it

00:20:54,850 --> 00:21:03,100
up and you don't need to fret per se and

00:20:58,770 --> 00:21:08,470
so the authentication is based on RSA

00:21:03,100 --> 00:21:10,330
keys it's very SSH like and so we can go

00:21:08,470 --> 00:21:13,570
in here and take a look at how look at

00:21:10,330 --> 00:21:15,790
these keys and we do that with the salt

00:21:13,570 --> 00:21:18,940
key command there's quite a few salt

00:21:15,790 --> 00:21:23,440
commands it will cover most of them

00:21:18,940 --> 00:21:25,870
during the course of the day but so we

00:21:23,440 --> 00:21:27,190
can run salt key it'll help message see

00:21:25,870 --> 00:21:29,170
all the things we can do with salt key

00:21:27,190 --> 00:21:33,040
so we can do everything from generate

00:21:29,170 --> 00:21:34,990
RSA keys with salt key for salt or we

00:21:33,040 --> 00:21:40,090
can print existing Keys reject keys

00:21:34,990 --> 00:21:41,980
accept keys etc etc so let's start by

00:21:40,090 --> 00:21:44,470
just getting a list here and we see that

00:21:41,980 --> 00:21:47,290
yep we've got an unaccepted key for a

00:21:44,470 --> 00:21:52,990
minyan name Dominion no except Keys no

00:21:47,290 --> 00:21:54,910
rejected keys and so i can run salt key

00:21:52,990 --> 00:21:57,700
dash capital a to just say hey accept

00:21:54,910 --> 00:22:00,270
everything or we can be a little more

00:21:57,700 --> 00:22:00,270
prudent

00:22:01,850 --> 00:22:11,299
and accept an individual key and so yeah

00:22:07,460 --> 00:22:13,700
it's accepted now as you recall the

00:22:11,299 --> 00:22:17,570
minion was back there continually every

00:22:13,700 --> 00:22:21,890
couple of seconds just quietly checking

00:22:17,570 --> 00:22:30,080
in and saying am I good and so since

00:22:21,890 --> 00:22:31,910
it's still running has already checked

00:22:30,080 --> 00:22:33,770
in for us so we're gonna need to go in

00:22:31,910 --> 00:22:35,990
and do anything else we've turned it on

00:22:33,770 --> 00:22:38,090
we've accepted the key we are done we

00:22:35,990 --> 00:22:47,330
now have connection to the minion and we

00:22:38,090 --> 00:22:51,440
can boss it about I ooh I want to show a

00:22:47,330 --> 00:22:54,350
few more salt key capabilities primarily

00:22:51,440 --> 00:22:56,900
as we all know if you're going to accept

00:22:54,350 --> 00:22:58,039
someone's key the prudent thing to do is

00:22:56,900 --> 00:23:02,059
to make sure that you're accepting the

00:22:58,039 --> 00:23:03,860
right key instead of what we all know

00:23:02,059 --> 00:23:05,419
that we all do which is just accept keys

00:23:03,860 --> 00:23:07,640
blindly because we think that's all

00:23:05,419 --> 00:23:11,809
right or rather because we don't want to

00:23:07,640 --> 00:23:14,409
be bothered but so you're going to

00:23:11,809 --> 00:23:16,610
install Kadesh capital P to print all

00:23:14,409 --> 00:23:19,850
public keys that you've that you've

00:23:16,610 --> 00:23:22,570
cashed from the minions or lowercase P

00:23:19,850 --> 00:23:22,570
followed by

00:23:26,600 --> 00:23:39,480
the minion itself okay yes I don't have

00:23:36,990 --> 00:23:41,789
fingerprint printouts in here yet

00:23:39,480 --> 00:23:50,059
they're coming because I know they're

00:23:41,789 --> 00:23:54,389
easier all right any questions so far

00:23:50,059 --> 00:23:57,830
arguments concerns rebuttals all right

00:23:54,389 --> 00:23:57,830
now while we're on the topic of

00:23:58,250 --> 00:24:03,120
authentication in salt I want to make a

00:24:01,259 --> 00:24:07,799
quick mention of how to make salt less

00:24:03,120 --> 00:24:08,820
secure primarily because I've worked

00:24:07,799 --> 00:24:11,669
with I've worked with a number of

00:24:08,820 --> 00:24:13,289
systems out there and and I used to have

00:24:11,669 --> 00:24:15,360
a job working for a government

00:24:13,289 --> 00:24:16,470
contractor and this government

00:24:15,360 --> 00:24:19,320
contractor worked for the US

00:24:16,470 --> 00:24:21,950
intelligence community and many of our

00:24:19,320 --> 00:24:24,450
deployments existed inside of a bunker

00:24:21,950 --> 00:24:27,629
inside of some foreign country which

00:24:24,450 --> 00:24:31,740
they would never tell me where which I'm

00:24:27,629 --> 00:24:33,750
grateful for and they would inform me

00:24:31,740 --> 00:24:35,629
that they don't really give a crap about

00:24:33,750 --> 00:24:37,860
network security on authentication

00:24:35,629 --> 00:24:39,840
because if somebody gets close enough to

00:24:37,860 --> 00:24:41,580
actually touch the system a lot of

00:24:39,840 --> 00:24:42,960
thermite is going to go off above it and

00:24:41,580 --> 00:24:45,659
it's going to melt into the ground or be

00:24:42,960 --> 00:24:47,639
blown up by a lot of c4 because it's an

00:24:45,659 --> 00:24:48,960
intelligent system at which point I

00:24:47,639 --> 00:24:51,120
would cry because I knew that they had

00:24:48,960 --> 00:24:55,110
spent ten million dollars on hardware

00:24:51,120 --> 00:25:00,330
and hope that doesn't happen but anyway

00:24:55,110 --> 00:25:02,759
the the gist of that experience made me

00:25:00,330 --> 00:25:06,240
feel as though auto accepting keys was

00:25:02,759 --> 00:25:09,149
not a sufficiently insecure ability to

00:25:06,240 --> 00:25:12,960
add to salt now by default obviously

00:25:09,149 --> 00:25:14,490
these settings are turned off but if you

00:25:12,960 --> 00:25:16,500
want to auto accept your keys because

00:25:14,490 --> 00:25:19,889
you're a little reckless like that then

00:25:16,500 --> 00:25:22,500
you can more importantly let's say your

00:25:19,889 --> 00:25:25,529
keys get messed up somehow and you're

00:25:22,500 --> 00:25:28,350
very comfortable that that you haven't

00:25:25,529 --> 00:25:31,379
been hacked or let's say that you are

00:25:28,350 --> 00:25:32,789
deploying salt inside of a bunker and

00:25:31,379 --> 00:25:34,289
you really don't care about

00:25:32,789 --> 00:25:36,690
authentication and you want it out of

00:25:34,289 --> 00:25:38,669
your way completely or if you're setting

00:25:36,690 --> 00:25:39,600
up certain test environments so for

00:25:38,669 --> 00:25:40,830
instance later today we're

00:25:39,600 --> 00:25:43,580
going to talk a little bit about the

00:25:40,830 --> 00:25:46,190
salt test environment testing system and

00:25:43,580 --> 00:25:48,870
that's all testing system uses open mode

00:25:46,190 --> 00:25:50,220
but open mode basically says if I get a

00:25:48,870 --> 00:25:52,260
key i'm going to accept it and if

00:25:50,220 --> 00:25:55,340
there's a conflict with an existing key

00:25:52,260 --> 00:25:57,840
i'm going to overwrite the existing key

00:25:55,340 --> 00:26:00,539
basically i'm going to give a big fat

00:25:57,840 --> 00:26:02,130
middle finger to authentication don't

00:26:00,539 --> 00:26:08,120
use that unless you know what you're

00:26:02,130 --> 00:26:08,120
doing is the gist of this okay

00:26:11,420 --> 00:26:19,350
now we're finally going to get into some

00:26:14,970 --> 00:26:21,030
meat on how to run salt commands now the

00:26:19,350 --> 00:26:25,200
sole command is broken up into three

00:26:21,030 --> 00:26:26,670
main groups we've got the target I'm

00:26:25,200 --> 00:26:29,610
going to talk a little bit about what

00:26:26,670 --> 00:26:31,470
this target means but that's right here

00:26:29,610 --> 00:26:34,620
this is how we define who's going to

00:26:31,470 --> 00:26:35,790
execute a command we've got the function

00:26:34,620 --> 00:26:36,750
that we're going to execute we're going

00:26:35,790 --> 00:26:39,660
to talk a little bit about what

00:26:36,750 --> 00:26:43,590
functions are available what functions

00:26:39,660 --> 00:26:49,950
do and then arguments that are passed

00:26:43,590 --> 00:26:54,860
two functions so if we hop back over

00:26:49,950 --> 00:27:00,390
here you saw that I did one of these and

00:26:54,860 --> 00:27:01,830
it returns thankfully it's always doing

00:27:00,390 --> 00:27:07,440
a demo that something goes wrong right

00:27:01,830 --> 00:27:11,040
now what we're saying here is we're

00:27:07,440 --> 00:27:14,400
voguing salt obviously and then we've

00:27:11,040 --> 00:27:18,230
got the target in this case the default

00:27:14,400 --> 00:27:21,780
target mechanism is to is to match

00:27:18,230 --> 00:27:27,420
minions based on their IDs and using a

00:27:21,780 --> 00:27:28,890
filesystem glob and then we were on the

00:27:27,420 --> 00:27:31,530
function in this case the function is

00:27:28,890 --> 00:27:34,770
test stop paying test up ping does not

00:27:31,530 --> 00:27:37,170
ping a minion it just runs a function

00:27:34,770 --> 00:27:39,780
called ping in the test module and all

00:27:37,170 --> 00:27:42,210
it does is returns true so that if it's

00:27:39,780 --> 00:27:44,340
out there is going to return true if you

00:27:42,210 --> 00:27:46,020
run tests up in somebody returns false

00:27:44,340 --> 00:27:57,570
then you've then something bad is going

00:27:46,020 --> 00:27:59,190
on now there's a number of different

00:27:57,570 --> 00:28:03,030
ways that we can that we can access

00:27:59,190 --> 00:28:05,040
target targets inside of salt so the

00:28:03,030 --> 00:28:07,140
default is this glob structure and so

00:28:05,040 --> 00:28:09,540
file system blobs again most disciplines

00:28:07,140 --> 00:28:13,260
are comfortable with file system glomps

00:28:09,540 --> 00:28:16,170
if you prefer to crank out a little more

00:28:13,260 --> 00:28:18,630
power you can use full PC re regular

00:28:16,170 --> 00:28:22,760
expressions we do that by passing a

00:28:18,630 --> 00:28:26,520
capital e option and then giving us a

00:28:22,760 --> 00:28:33,630
PCA well reg ex so we can come back here

00:28:26,520 --> 00:28:36,840
and say that that minion is unavailable

00:28:33,630 --> 00:28:45,660
because I need to escape that there we

00:28:36,840 --> 00:28:47,040
go okay next there's this concept of

00:28:45,660 --> 00:28:48,840
grains and I'm going to actually pull

00:28:47,040 --> 00:28:54,480
out for a second and talk about what

00:28:48,840 --> 00:28:57,060
grains are and and grains are system

00:28:54,480 --> 00:28:59,310
properties now originally a long long

00:28:57,060 --> 00:29:01,380
time ago when I first wrote I want it I

00:28:59,310 --> 00:29:04,140
wanted to be able to match or target

00:29:01,380 --> 00:29:06,930
minions based on system properties and I

00:29:04,140 --> 00:29:09,000
actually built puppets factor into solid

00:29:06,930 --> 00:29:12,300
so if you're insane and you install salt

00:29:09,000 --> 00:29:16,160
0.7 point oh you'll see that it has Ruby

00:29:12,300 --> 00:29:16,160
as a dependency but that's been fixed

00:29:19,310 --> 00:29:25,920
but so let's say we want to look at this

00:29:21,690 --> 00:29:27,660
grain system grains deliver static the

00:29:25,920 --> 00:29:30,900
whole idea behind grains the core idea

00:29:27,660 --> 00:29:33,650
behind grains is that we have system

00:29:30,900 --> 00:29:37,010
properties that are completely static

00:29:33,650 --> 00:29:40,590
meaning that we have system properties

00:29:37,010 --> 00:29:42,900
that we can preload so that they can be

00:29:40,590 --> 00:29:45,960
matched very quickly because when i run

00:29:42,900 --> 00:29:48,180
a match for a grain I don't want to

00:29:45,960 --> 00:29:49,860
actually query those grains that takes

00:29:48,180 --> 00:29:51,750
too long I mean we're talking about

00:29:49,860 --> 00:29:55,720
taking a half a second that's just wrong

00:29:51,750 --> 00:29:57,740
that's too long so

00:29:55,720 --> 00:30:00,980
if we want to see what grains are

00:29:57,740 --> 00:30:03,830
available we can use the grains module

00:30:00,980 --> 00:30:08,810
and check a function in their run items

00:30:03,830 --> 00:30:10,550
and I can misspell it which some people

00:30:08,810 --> 00:30:16,460
will tell you is a bit of a problem fine

00:30:10,550 --> 00:30:18,020
now and we've gone a few grains here

00:30:16,460 --> 00:30:22,490
pertinent to the system that we can now

00:30:18,020 --> 00:30:24,080
match on so generally the idea is that

00:30:22,490 --> 00:30:26,810
if something isn't going to be changing

00:30:24,080 --> 00:30:29,870
without without forcibly restarting with

00:30:26,810 --> 00:30:31,400
the salt menu negate can be a grain and

00:30:29,870 --> 00:30:34,550
so some of the things that are more

00:30:31,400 --> 00:30:36,290
important let's see the OS the OS

00:30:34,550 --> 00:30:38,060
codename OS release things of that

00:30:36,290 --> 00:30:41,480
nature are more common to be matching on

00:30:38,060 --> 00:30:44,420
and targeting versions of salt you've

00:30:41,480 --> 00:30:45,920
got information about paths relative so

00:30:44,420 --> 00:30:48,920
we know what the Python path of the

00:30:45,920 --> 00:30:51,380
running minion is things like that I'm a

00:30:48,920 --> 00:30:54,050
big fan of the server ID down here this

00:30:51,380 --> 00:30:56,330
is a number this is a number that uses a

00:30:54,050 --> 00:30:57,830
couple of the existing grains and then

00:30:56,330 --> 00:31:00,350
it generates a number that will be

00:30:57,830 --> 00:31:03,380
static for that minion so you've just

00:31:00,350 --> 00:31:05,750
got this this unique numeric identifier

00:31:03,380 --> 00:31:07,570
as well can't tell how many times have

00:31:05,750 --> 00:31:10,220
actually needed that in real deployments

00:31:07,570 --> 00:31:13,060
but anyway we've got some grains here

00:31:10,220 --> 00:31:21,070
and so let's say that we want to match

00:31:13,060 --> 00:31:24,070
based on a grain so we say capital g OS

00:31:21,070 --> 00:31:24,070
fedora

00:31:25,309 --> 00:31:31,460
and since we're running futur it's going

00:31:27,919 --> 00:31:34,730
to return if I say I won't either want

00:31:31,460 --> 00:31:36,379
to hear from the arch linux systems

00:31:34,730 --> 00:31:49,669
it'll go out and it'll say anybody run

00:31:36,379 --> 00:31:54,980
an arch anyone bueller now okay just sat

00:31:49,669 --> 00:31:58,759
on a big fan of arch arch is good stuff

00:31:54,980 --> 00:32:04,720
I used to be a tu so I used to be an art

00:31:58,759 --> 00:32:07,369
contributor until I ran out of time okay

00:32:04,720 --> 00:32:09,259
so that's grains any questions on grains

00:32:07,369 --> 00:32:11,749
does that make sense where have I left

00:32:09,259 --> 00:32:15,169
people reeling and confused already all

00:32:11,749 --> 00:32:17,450
right we can pass an explicit list that

00:32:15,169 --> 00:32:19,009
main idea between I I've actually had

00:32:17,450 --> 00:32:20,749
arguments with people about passing a

00:32:19,009 --> 00:32:22,850
list because they go I would just define

00:32:20,749 --> 00:32:24,529
a list inside of a globe or reg ex why

00:32:22,850 --> 00:32:27,259
would I define an explicit list of

00:32:24,529 --> 00:32:29,659
minions and I remind them that there's

00:32:27,259 --> 00:32:31,460
this thing called an API and it likes to

00:32:29,659 --> 00:32:36,110
be passed like a data structure called

00:32:31,460 --> 00:32:38,690
the list and then they're quiet but

00:32:36,110 --> 00:32:45,559
anyway you can pass an explicit list so

00:32:38,690 --> 00:32:47,480
we can say L minion if we had another

00:32:45,559 --> 00:32:50,480
one then we could just comment to limit

00:32:47,480 --> 00:32:56,240
them so that we have a very clear list

00:32:50,480 --> 00:33:00,860
of who's going to reply ok next we've

00:32:56,240 --> 00:33:04,009
got compound targets compound targets

00:33:00,860 --> 00:33:06,830
are I think rather cool because it

00:33:04,009 --> 00:33:09,559
allows you to take multiple target types

00:33:06,830 --> 00:33:13,789
and then bring them together with and or

00:33:09,559 --> 00:33:14,929
or not statements so that you're able to

00:33:13,789 --> 00:33:18,110
say things like I want to target

00:33:14,929 --> 00:33:22,850
everybody is running fedora but not if

00:33:18,110 --> 00:33:25,940
their OS release is 16 and not if

00:33:22,850 --> 00:33:28,240
they've got more than eight CPUs and not

00:33:25,940 --> 00:33:30,700
if they're but in

00:33:28,240 --> 00:33:33,520
and only if their name starts with foo

00:33:30,700 --> 00:33:37,120
and you can make this huge string that

00:33:33,520 --> 00:33:41,380
has this very aggressive matching

00:33:37,120 --> 00:33:44,559
context and run it and only some very

00:33:41,380 --> 00:33:48,190
specific guys are going to return next

00:33:44,559 --> 00:33:51,070
we've got no groups no groups allow you

00:33:48,190 --> 00:33:54,130
to put compound targets inside of the

00:33:51,070 --> 00:33:56,170
Masters configuration file so that

00:33:54,130 --> 00:33:58,990
you're able to define some huge hairy

00:33:56,170 --> 00:34:02,410
compound target and never type it again

00:33:58,990 --> 00:34:04,570
because nobody wants to do that and just

00:34:02,410 --> 00:34:13,869
specify it in in your master config file

00:34:04,570 --> 00:34:16,450
and be done ok now I'm going to run

00:34:13,869 --> 00:34:20,530
through a couple of functions which is

00:34:16,450 --> 00:34:23,020
yeah we're about good on time and talk a

00:34:20,530 --> 00:34:26,560
little bit about what's available inside

00:34:23,020 --> 00:34:30,280
of this API and really when we dilute

00:34:26,560 --> 00:34:35,850
down what salt is its high speed remote

00:34:30,280 --> 00:34:39,100
execution and a big o systems API and

00:34:35,850 --> 00:34:45,510
everything else is stacked on top of it

00:34:39,100 --> 00:34:45,510
which is why I use the term stack so

00:34:48,060 --> 00:34:54,790
we've been running tests up ping that

00:34:52,990 --> 00:34:58,210
means that there's a module it's just a

00:34:54,790 --> 00:34:59,710
python module it's called test and I'll

00:34:58,210 --> 00:35:02,280
show it to you guys here in a second and

00:34:59,710 --> 00:35:07,840
it has a function called pink

00:35:02,280 --> 00:35:11,560
similarly we can run this guy which i

00:35:07,840 --> 00:35:12,910
think is rather useful sis doc because

00:35:11,560 --> 00:35:15,730
all of the salt minions are

00:35:12,910 --> 00:35:18,130
fundamentally self documenting and so if

00:35:15,730 --> 00:35:20,530
we want to find out every method oh

00:35:18,130 --> 00:35:23,650
sorry every function that's available

00:35:20,530 --> 00:35:25,090
out there I'm going to insist doc it's

00:35:23,650 --> 00:35:28,210
going to go to the minion in the minions

00:35:25,090 --> 00:35:30,630
going to rather quickly it takes for

00:35:28,210 --> 00:35:32,980
much much longer to actually print it

00:35:30,630 --> 00:35:34,510
but it's going to give us a dump of all

00:35:32,980 --> 00:35:37,390
of the functions that are available in

00:35:34,510 --> 00:35:39,280
the current salt API and so if we wanted

00:35:37,390 --> 00:35:41,490
to actually deal with this then we're

00:35:39,280 --> 00:35:43,930
going to pipe it through less of course

00:35:41,490 --> 00:35:55,840
now we're going to get a broken pipe for

00:35:43,930 --> 00:35:58,350
some reason thank you generally less is

00:35:55,840 --> 00:36:02,830
more than more but there are exceptions

00:35:58,350 --> 00:36:06,490
thank you now and we can see that we've

00:36:02,830 --> 00:36:14,740
got functions for alias the aliases file

00:36:06,490 --> 00:36:19,030
for mail servers we've got functions

00:36:14,740 --> 00:36:22,480
that take care of archives butter kvm is

00:36:19,030 --> 00:36:24,390
deprecated don't use it we've got the

00:36:22,480 --> 00:36:27,100
CMD function that allows us to execute

00:36:24,390 --> 00:36:32,410
just shell out to anything that would

00:36:27,100 --> 00:36:34,870
like the copy function is used as the

00:36:32,410 --> 00:36:36,460
backplane for salt copy and for

00:36:34,870 --> 00:36:37,570
downloading files from the master we're

00:36:36,460 --> 00:36:40,270
going to talk about that a little more

00:36:37,570 --> 00:36:42,100
when we talk about states but basically

00:36:40,270 --> 00:36:44,470
we can use the master as a file server

00:36:42,100 --> 00:36:50,050
and then distribute files via the

00:36:44,470 --> 00:36:53,410
Masters zeromq file server copy

00:36:50,050 --> 00:36:56,500
functions there's a bunch ok managing

00:36:53,410 --> 00:36:58,930
cron so we can go in and get dumps and

00:36:56,500 --> 00:37:03,030
reports about everything that's going on

00:36:58,930 --> 00:37:03,030
inside of inside of your user cron files

00:37:03,870 --> 00:37:09,280
data

00:37:06,490 --> 00:37:12,220
I was just talking to Seth last night

00:37:09,280 --> 00:37:14,410
who's the main salt guy back there and

00:37:12,220 --> 00:37:16,060
explaining that I think Dave the data

00:37:14,410 --> 00:37:19,750
module is really cool but nobody ever

00:37:16,060 --> 00:37:24,940
seems to use it but that allows you to

00:37:19,750 --> 00:37:28,210
keep a salt specific data cache / minion

00:37:24,940 --> 00:37:35,530
of just anything you want in a key-value

00:37:28,210 --> 00:37:37,510
store okay a couple things about disks

00:37:35,530 --> 00:37:43,630
we've got some Django management file

00:37:37,510 --> 00:37:46,900
management it keeps going there we are

00:37:43,630 --> 00:37:50,580
more file management running said

00:37:46,900 --> 00:37:53,740
commands commenting and commenting i'm

00:37:50,580 --> 00:37:55,000
rather excited about this one a lot of a

00:37:53,740 --> 00:37:57,700
lot of the people in the competition

00:37:55,000 --> 00:38:00,040
space use Ruby but apparently so do we

00:37:57,700 --> 00:38:09,700
so we have support for gem management in

00:38:00,040 --> 00:38:15,130
Ruby get anyway as you can see it keeps

00:38:09,700 --> 00:38:17,250
going and there's more if you want to

00:38:15,130 --> 00:38:19,240
add some go ahead I like pull requests I

00:38:17,250 --> 00:38:23,770
certainly didn't write all of these

00:38:19,240 --> 00:38:27,790
myself there's too many okay managing

00:38:23,770 --> 00:38:29,950
the hosts file keeps going so sister doc

00:38:27,790 --> 00:38:33,359
self-documenting let's say we don't want

00:38:29,950 --> 00:38:33,359
that whole list because we're not insane

00:38:33,780 --> 00:38:40,060
we can just pass it one thing and so I

00:38:38,230 --> 00:38:42,280
said tell me everything instead of the

00:38:40,060 --> 00:38:43,540
package module and so it tells us

00:38:42,280 --> 00:38:47,290
everything inside of the package module

00:38:43,540 --> 00:38:49,200
now this is the next little tidbit about

00:38:47,290 --> 00:38:51,580
these modules about these functions and

00:38:49,200 --> 00:38:53,350
that is that here we are looking at the

00:38:51,580 --> 00:38:56,200
package module well what does the

00:38:53,350 --> 00:38:57,940
package module mean it means that it's

00:38:56,200 --> 00:38:59,890
going to wrap back to the package

00:38:57,940 --> 00:39:03,640
manager that is used by the specific

00:38:59,890 --> 00:39:06,190
underlying platform and so in this case

00:39:03,640 --> 00:39:09,130
we've got a fedora minion and so PKG

00:39:06,190 --> 00:39:11,770
dunstall is going to use yum let's say

00:39:09,130 --> 00:39:13,780
we've got an arch minion it's going to

00:39:11,770 --> 00:39:15,820
be using pac-man let's say we've got a

00:39:13,780 --> 00:39:20,080
debian minion or an ubuntu menu is going

00:39:15,820 --> 00:39:22,960
using abs get let's say it's freebsd if

00:39:20,080 --> 00:39:27,430
it's freebsd eight then it's going to

00:39:22,960 --> 00:39:30,100
use PKG if its previous being d 9 is

00:39:27,430 --> 00:39:31,690
going to use PKG next gen if it's jen to

00:39:30,100 --> 00:39:34,390
it's going to use e built so you get the

00:39:31,690 --> 00:39:36,490
idea automatically pass through and

00:39:34,390 --> 00:39:39,070
normalize the majority of the functions

00:39:36,490 --> 00:39:40,780
of actually and I frankly don't like

00:39:39,070 --> 00:39:42,880
this but people are starting to do it

00:39:40,780 --> 00:39:46,060
they're starting to actually use salt to

00:39:42,880 --> 00:39:48,580
bypass their package managers natively

00:39:46,060 --> 00:39:50,500
so that they don't deal with them and I

00:39:48,580 --> 00:39:51,970
inform them that they need to know what

00:39:50,500 --> 00:39:54,760
the devil they're doing on their systems

00:39:51,970 --> 00:40:01,980
if they're administering but people are

00:39:54,760 --> 00:40:01,980
doing that anyway any questions so far

00:40:05,819 --> 00:40:26,169
all right yeah almost very there's one

00:40:14,949 --> 00:40:29,049
debris hmm hi Krypto yes hi crypto does

00:40:26,169 --> 00:40:30,549
em to crypto doesn't the prime the

00:40:29,049 --> 00:40:32,140
primary the primary issue present

00:40:30,549 --> 00:40:36,269
preventing us from supporting Python 3

00:40:32,140 --> 00:40:39,819
we've actually got got the salt source

00:40:36,269 --> 00:40:44,619
set up dual so we'll run under Python 2

00:40:39,819 --> 00:40:47,769
or Python 3 the main issue that were

00:40:44,619 --> 00:40:51,849
ringing right now is that to use pine

00:40:47,769 --> 00:40:55,269
crypto to manage PEM encoded RSA keys

00:40:51,849 --> 00:40:59,979
you need to manually manually extract

00:40:55,269 --> 00:41:02,049
the RSA numeric components and what

00:40:59,979 --> 00:41:03,640
about that fundamentally boils down to

00:41:02,049 --> 00:41:06,969
is that I haven't written a bear

00:41:03,640 --> 00:41:08,650
decrypter yet and once we do that then

00:41:06,969 --> 00:41:10,900
we can get rid of em to crypto because

00:41:08,650 --> 00:41:12,279
mt crypto does that for us and them to

00:41:10,900 --> 00:41:14,859
cryptos the only depth that we have that

00:41:12,279 --> 00:41:17,079
doesn't run on Python 3 so that's that's

00:41:14,859 --> 00:41:22,419
what's on the timeline is for me to sit

00:41:17,079 --> 00:41:26,259
down and write a bear decrypter but

00:41:22,419 --> 00:41:29,859
other than that yes one one thing left

00:41:26,259 --> 00:41:31,089
on the list get off by three and a lot

00:41:29,859 --> 00:41:32,739
of the code has been written from the

00:41:31,089 --> 00:41:35,909
get go with the intent of making sure

00:41:32,739 --> 00:41:42,359
that we can run on Python 3 eventually

00:41:35,909 --> 00:41:42,359
because we're not crazy all right

00:41:42,390 --> 00:41:46,650
actually we are crazy anybody who

00:41:44,730 --> 00:41:48,779
undertakes the the endeavor to create

00:41:46,650 --> 00:41:50,849
large piece of software when they're not

00:41:48,779 --> 00:41:57,359
being paid to do it has to be somewhat

00:41:50,849 --> 00:41:58,529
nuts just a little bit all right so

00:41:57,359 --> 00:42:00,119
we've got a good example here of a

00:41:58,529 --> 00:42:02,160
compound command in which case we're

00:42:00,119 --> 00:42:03,510
saying this is actually a horrible

00:42:02,160 --> 00:42:05,880
example of a compound command now that

00:42:03,510 --> 00:42:11,099
I'm looking at it we're saying everybody

00:42:05,880 --> 00:42:13,160
and fedora well that's silly anyway calm

00:42:11,099 --> 00:42:17,490
down command meaning that we can say a

00:42:13,160 --> 00:42:20,119
certain expression and or or not and

00:42:17,490 --> 00:42:23,339
then we say the type of matcher

00:42:20,119 --> 00:42:34,829
ampersand and then the actual target

00:42:23,339 --> 00:42:40,140
statement now I think this is the last

00:42:34,829 --> 00:42:42,569
explanatory slide but let's say that we

00:42:40,140 --> 00:42:45,150
don't want to run a function through the

00:42:42,569 --> 00:42:46,980
remote execution system let's say we

00:42:45,150 --> 00:42:50,309
just want to directly access a piece of

00:42:46,980 --> 00:42:54,480
the API locally now we're going to see a

00:42:50,309 --> 00:42:56,279
lot more of this particularly when we're

00:42:54,480 --> 00:42:58,349
writing modules and talking about how to

00:42:56,279 --> 00:43:00,269
easily debug modules when we're writing

00:42:58,349 --> 00:43:02,099
them because it could be a bit of a pain

00:43:00,269 --> 00:43:03,420
to say okay I'm gonna log into my menu

00:43:02,099 --> 00:43:04,589
and I'm going to write a module I'm

00:43:03,420 --> 00:43:06,690
going to put a module up here that I'm

00:43:04,589 --> 00:43:08,700
gonna lie to my master I can execute the

00:43:06,690 --> 00:43:10,619
module and then and then see if

00:43:08,700 --> 00:43:12,779
something happens it's generally easier

00:43:10,619 --> 00:43:13,980
to do do everything locally so it's

00:43:12,779 --> 00:43:15,900
really good at debugging those things

00:43:13,980 --> 00:43:19,619
also if you earning more complicated

00:43:15,900 --> 00:43:22,039
commands particularly running the state

00:43:19,619 --> 00:43:23,789
system which is configuration management

00:43:22,039 --> 00:43:25,650
oftentimes you want to be able to run

00:43:23,789 --> 00:43:27,390
that locally because you're going to a

00:43:25,650 --> 00:43:28,799
give a little more information as to

00:43:27,390 --> 00:43:30,839
what's going on because you'll have full

00:43:28,799 --> 00:43:33,059
out full direct access to debug log

00:43:30,839 --> 00:43:35,490
output while it's running instead of

00:43:33,059 --> 00:43:37,559
just getting the return data structure

00:43:35,490 --> 00:43:40,849
but it's a great way to debug your

00:43:37,559 --> 00:43:40,849
states and

00:43:43,150 --> 00:43:49,340
and like I was saying some people just

00:43:45,350 --> 00:43:54,290
use the salt API directly so let's take

00:43:49,340 --> 00:43:56,480
a look here this is done with salt call

00:43:54,290 --> 00:43:59,150
to use song calling you need to have a

00:43:56,480 --> 00:44:02,570
minion installed you don't need to have

00:43:59,150 --> 00:44:04,280
a minion running it's going to start all

00:44:02,570 --> 00:44:07,340
that up independent of your running

00:44:04,280 --> 00:44:09,320
minion and so we can run so call since

00:44:07,340 --> 00:44:10,850
we're not remotely executing where we're

00:44:09,320 --> 00:44:13,220
excuse something on the local minion

00:44:10,850 --> 00:44:20,750
itself we have no targeting so I'm going

00:44:13,220 --> 00:44:27,770
to run locally and then run a function

00:44:20,750 --> 00:44:30,080
and it runs ok and since and it's never

00:44:27,770 --> 00:44:31,940
going to return with its ID it's always

00:44:30,080 --> 00:44:34,490
going to say this is local the local guy

00:44:31,940 --> 00:44:36,140
or turn this because again salt calls

00:44:34,490 --> 00:44:40,400
never going to be accessing more than

00:44:36,140 --> 00:44:43,970
one minion the minion that your arm also

00:44:40,400 --> 00:44:46,040
salt call is self documenting so we can

00:44:43,970 --> 00:44:47,570
pass a dash D which says give you the

00:44:46,040 --> 00:44:50,000
documentation on that function that's

00:44:47,570 --> 00:44:52,220
that's here locally we can see up test

00:44:50,000 --> 00:44:58,940
stop paying just use to make sure the

00:44:52,220 --> 00:45:02,630
minions up and responding return true so

00:44:58,940 --> 00:45:06,490
anyway salt call is your friend you

00:45:02,630 --> 00:45:06,490
really will use salt call

00:45:10,890 --> 00:45:18,480
oh yes I forgot about this slide

00:45:13,079 --> 00:45:23,130
excellent now one of the problems that i

00:45:18,480 --> 00:45:26,430
ran into early on was the fact that i

00:45:23,130 --> 00:45:30,720
don't always have access to play around

00:45:26,430 --> 00:45:33,480
with a server environment that has say

00:45:30,720 --> 00:45:35,700
five thousand to ten thousand systems on

00:45:33,480 --> 00:45:40,950
it I'm just not that rich yet we're

00:45:35,700 --> 00:45:42,720
working on that but so we started toward

00:45:40,950 --> 00:45:44,789
into the occasional bug when somebody

00:45:42,720 --> 00:45:47,730
came back and said hey I just deployed

00:45:44,789 --> 00:45:50,250
saldana sit on a 10,000 minion system

00:45:47,730 --> 00:45:51,630
and I ran into this problem and I said

00:45:50,250 --> 00:45:53,819
well I can't reproduce that because I've

00:45:51,630 --> 00:45:57,450
only got a server in my basement just

00:45:53,819 --> 00:45:58,920
just just a few at the at the time we

00:45:57,450 --> 00:46:03,150
have a little more iron now we're

00:45:58,920 --> 00:46:07,980
getting that but so I put together

00:46:03,150 --> 00:46:11,819
minions form minions warm fires up a ton

00:46:07,980 --> 00:46:14,880
of salt minions on one system so that

00:46:11,819 --> 00:46:16,829
you can simulate what it would look like

00:46:14,880 --> 00:46:19,680
if you were attaching too many many many

00:46:16,829 --> 00:46:23,339
minions now I think that it's a whole

00:46:19,680 --> 00:46:24,839
lot of fun to play around with and kind

00:46:23,339 --> 00:46:26,970
of have competitions with people to see

00:46:24,839 --> 00:46:29,549
hey how many minions can you get going

00:46:26,970 --> 00:46:30,930
on your laptop you know how much iron do

00:46:29,549 --> 00:46:32,369
you have in your house because you can

00:46:30,930 --> 00:46:39,140
get so many minions before you run out

00:46:32,369 --> 00:46:39,140
of ram and kernel panic so

00:46:41,930 --> 00:46:49,030
let's take a there we go

00:46:54,329 --> 00:47:00,040
i'll fire up on my laptop instead of a

00:46:57,700 --> 00:47:04,630
vm because i've gotten a little more ram

00:47:00,040 --> 00:47:05,950
here and i was hoping I'd be able to get

00:47:04,630 --> 00:47:08,140
into my server at home but apparently

00:47:05,950 --> 00:47:09,849
not where I've got a lot more RAM and I

00:47:08,140 --> 00:47:12,190
can actually fire up a thousand minions

00:47:09,849 --> 00:47:13,839
and show you what that looks like but I

00:47:12,190 --> 00:47:24,300
can only get up to about 40 or so on

00:47:13,839 --> 00:47:24,300
this laptop so let's see get rid of that

00:47:26,790 --> 00:47:31,380
good we don't have any minions running

00:47:32,160 --> 00:47:39,490
so if you look into the salt source code

00:47:35,550 --> 00:47:40,869
there's a test directory and in there

00:47:39,490 --> 00:47:43,150
because minions form isn't isn't

00:47:40,869 --> 00:47:46,780
distributed with salt it's it's part of

00:47:43,150 --> 00:47:55,990
a test system but there we go minions

00:47:46,780 --> 00:47:58,359
swarm this this is an arch box so i have

00:47:55,990 --> 00:48:00,670
to say python to those of you familiar

00:47:58,359 --> 00:48:06,040
with that wonderful situation inside of

00:48:00,670 --> 00:48:07,720
arch i'll fire up 40 actually i'm going

00:48:06,040 --> 00:48:11,230
to play it safe I don't want to kill my

00:48:07,720 --> 00:48:14,400
machine they do use a little bit of RAM

00:48:11,230 --> 00:48:14,400
when you fire up too many of them

00:48:18,220 --> 00:48:23,410
I'm going to tell them to only load a

00:48:20,630 --> 00:48:23,410
couple of modules

00:48:36,040 --> 00:48:41,600
well this must be an old check out I

00:48:39,280 --> 00:48:44,810
suppose I'll not tell them to only load

00:48:41,600 --> 00:48:46,280
a few modules if you tell them to only

00:48:44,810 --> 00:48:48,500
load a few module at the sponsors they

00:48:46,280 --> 00:48:52,250
use a little less Ram so you can squeeze

00:48:48,500 --> 00:48:54,290
a few more minions onto a server okay my

00:48:52,250 --> 00:48:56,930
fan fires out because I'm now generating

00:48:54,290 --> 00:49:03,200
25 RSA key pairs for all of these

00:48:56,930 --> 00:49:05,110
minions I've got this master of running

00:49:03,200 --> 00:49:07,790
an open mode because i use it for

00:49:05,110 --> 00:49:09,350
testing and i don't want to deal with

00:49:07,790 --> 00:49:11,240
having to accept lots of minion keys

00:49:09,350 --> 00:49:13,280
when i'm starting up swarms but we see

00:49:11,240 --> 00:49:15,140
that we've fired up at this minion swarm

00:49:13,280 --> 00:49:16,910
we've got 25 of them it's pretty small

00:49:15,140 --> 00:49:24,740
swarm and it gives them all these

00:49:16,910 --> 00:49:31,520
incredibly unique IDs yeah it looks like

00:49:24,740 --> 00:49:33,590
we're all here and we see what it looks

00:49:31,520 --> 00:49:36,830
like so now we're running tests stop

00:49:33,590 --> 00:49:38,150
paying on 25 minions and actually when

00:49:36,830 --> 00:49:39,710
you earning a minions form it's usually

00:49:38,150 --> 00:49:42,200
a little slower than it is over a real

00:49:39,710 --> 00:49:48,020
network just cuz you're beating the tar

00:49:42,200 --> 00:49:51,530
out of your local system yeah that's a

00:49:48,020 --> 00:49:53,990
lot slower than normal normally it's

00:49:51,530 --> 00:49:58,520
about point two seconds point to 2.3

00:49:53,990 --> 00:50:00,790
seconds okay let's say I minion storms

00:49:58,520 --> 00:50:00,790
are fun

00:50:03,250 --> 00:50:18,150
and we can get lots and lots of grains

00:50:05,620 --> 00:50:20,250
and soda Tara all right any questions

00:50:18,150 --> 00:50:26,130
everybody feeling all right about that

00:50:20,250 --> 00:50:28,780
not too much of a waste of time okay

00:50:26,130 --> 00:50:31,150
we're going to take a bit of a break for

00:50:28,780 --> 00:50:34,740
about 5-10 minutes while I get ready to

00:50:31,150 --> 00:50:40,290
put together the next the next slides

00:50:34,740 --> 00:50:40,290
which are going to go over salt

00:50:43,130 --> 00:50:47,940
when we created asterisk over a decade

00:50:45,840 --> 00:50:50,160
ago we could not have imagined that

00:50:47,940 --> 00:50:52,350
asterisk would not only become the most

00:50:50,160 --> 00:50:54,510
widely adopted open source communication

00:50:52,350 --> 00:50:56,520
software on the planet but that it would

00:50:54,510 --> 00:50:59,040
impact the entire industry in the way

00:50:56,520 --> 00:51:01,050
that it has today asterisk has found its

00:50:59,040 --> 00:51:03,660
way into more than 170 countries and

00:51:01,050 --> 00:51:05,610
virtually every fortune 1000 company the

00:51:03,660 --> 00:51:07,680
success of asterisk has enabled a

00:51:05,610 --> 00:51:09,119
transition of power from the hands of

00:51:07,680 --> 00:51:11,400
the traditional proprietary phone

00:51:09,119 --> 00:51:13,800
vendors into the hands of the users and

00:51:11,400 --> 00:51:15,869
administrators of phone systems using

00:51:13,800 --> 00:51:17,520
this power our customers have traded all

00:51:15,869 --> 00:51:19,590
sorts of business changing applications

00:51:17,520 --> 00:51:21,390
from small office phone systems to

00:51:19,590 --> 00:51:23,490
mission-critical call centers the

00:51:21,390 --> 00:51:25,320
international carrier networks in fact

00:51:23,490 --> 00:51:26,790
there's even an entire country those

00:51:25,320 --> 00:51:29,250
communications infrastructure runs on

00:51:26,790 --> 00:51:31,170
esters the gym has always been about

00:51:29,250 --> 00:51:32,880
creating technology that expands

00:51:31,170 --> 00:51:35,070
communications capabilities in ways that

00:51:32,880 --> 00:51:36,240
we could never have imagined and that's

00:51:35,070 --> 00:51:39,000
part of what's game-changing about

00:51:36,240 --> 00:51:41,340
Digium today we're doing it again this

00:51:39,000 --> 00:51:43,440
time by introducing a new family of HD

00:51:41,340 --> 00:51:45,540
IP phones that extends control of the

00:51:43,440 --> 00:51:47,310
user all the way to the desktop the

00:51:45,540 --> 00:51:49,020
launch of these new products represents

00:51:47,310 --> 00:51:51,119
the next phase indigenous history of

00:51:49,020 --> 00:51:53,520
innovation these are the first and only

00:51:51,119 --> 00:51:55,230
IP phones designed to fully leverage the

00:51:53,520 --> 00:51:56,790
power of Astra's when we first discussed

00:51:55,230 --> 00:51:58,830
our expectations for building a family

00:51:56,790 --> 00:52:00,960
of phones for use with asterisk our

00:51:58,830 --> 00:52:02,700
requirements were pretty simple we asked

00:52:00,960 --> 00:52:04,350
the team to build the phones such that

00:52:02,700 --> 00:52:06,540
they were easy to install integrate

00:52:04,350 --> 00:52:08,400
provision and use I think you'll soon

00:52:06,540 --> 00:52:10,950
agree our engineers have delivered on

00:52:08,400 --> 00:52:12,570
that goal user feedback is validating

00:52:10,950 --> 00:52:14,700
that when it comes to operation with

00:52:12,570 --> 00:52:17,130
Astra space systems including our own

00:52:14,700 --> 00:52:19,680
Switchvox based product these are the

00:52:17,130 --> 00:52:21,000
easiest to use best integrated most

00:52:19,680 --> 00:52:23,580
interoperable products on the market

00:52:21,000 --> 00:52:25,580
today the digitally of phones will

00:52:23,580 --> 00:52:27,630
initially include three IP des hommes

00:52:25,580 --> 00:52:29,580
uniquely designed to complement any

00:52:27,630 --> 00:52:31,440
asterisks or Switchvox based solution

00:52:29,580 --> 00:52:34,109
these phones are different for a number

00:52:31,440 --> 00:52:36,780
of reasons first there is clue sively

00:52:34,109 --> 00:52:38,190
designed for use with esters secondly

00:52:36,780 --> 00:52:39,800
we've made it really easy to

00:52:38,190 --> 00:52:42,210
autodiscover and provision the phones

00:52:39,800 --> 00:52:43,890
next we've made it easy for the phones

00:52:42,210 --> 00:52:45,600
to access information inside of

00:52:43,890 --> 00:52:46,330
asterisks allowing tight coupling

00:52:45,600 --> 00:52:48,850
between

00:52:46,330 --> 00:52:50,740
application and the phone additionally

00:52:48,850 --> 00:52:53,020
we've created an applications engine

00:52:50,740 --> 00:52:55,210
that allows users and developers to

00:52:53,020 --> 00:52:57,970
create and run their own apps on the

00:52:55,210 --> 00:53:00,070
phone and finally we've done all of this

00:52:57,970 --> 00:53:01,780
at a very compelling price point at

00:53:00,070 --> 00:53:04,000
digium we're always thinking of ways to

00:53:01,780 --> 00:53:06,340
give our customers the best value in

00:53:04,000 --> 00:53:07,630
business phone systems and also give

00:53:06,340 --> 00:53:09,730
them the power to create their own

00:53:07,630 --> 00:53:11,530
solutions or any communications

00:53:09,730 --> 00:53:13,210
challenge will continue to push the

00:53:11,530 --> 00:53:14,980
boundaries not only to make Astra's

00:53:13,210 --> 00:53:16,870
cooler bastard more technologically

00:53:14,980 --> 00:53:19,300
feature-rich but to make asterisk and

00:53:16,870 --> 00:53:20,620
communications even easier and together

00:53:19,300 --> 00:53:24,090
we'll change the way the world

00:53:20,620 --> 00:53:24,090
communication again

00:54:05,190 --> 00:54:12,009
how's that sigh every way this is the

00:54:08,680 --> 00:54:14,170
way to better utilize all your resources

00:54:12,009 --> 00:54:17,619
and it makes managing all your resources

00:54:14,170 --> 00:54:21,450
pretty easy all of the innovation is

00:54:17,619 --> 00:54:24,969
happening in open source the

00:54:21,450 --> 00:54:26,769
collaborative nature and of the you know

00:54:24,969 --> 00:54:28,690
of the community and the speed at which

00:54:26,769 --> 00:54:30,880
these are these you know these

00:54:28,690 --> 00:54:33,190
deficiencies these bugs are getting

00:54:30,880 --> 00:54:35,769
discovered and then fixed is it like

00:54:33,190 --> 00:54:38,499
that really shows the power of the you

00:54:35,769 --> 00:54:40,119
know of the open source community it is

00:54:38,499 --> 00:54:44,319
global and it's definitely because of

00:54:40,119 --> 00:54:50,650
the users community people are extremely

00:54:44,319 --> 00:54:52,539
friendly and always ready to help if you

00:54:50,650 --> 00:54:54,819
go on tire see any day you'll see these

00:54:52,539 --> 00:54:56,549
guys helping each other out and they're

00:54:54,819 --> 00:54:59,259
all doing it like in a selfless manner

00:54:56,549 --> 00:55:02,249
the product is transparent for everyone

00:54:59,259 --> 00:55:05,200
everyone can look at the code base

00:55:02,249 --> 00:55:06,910
everyone can see how close darkest is

00:55:05,200 --> 00:55:12,789
being built nothing nothing is

00:55:06,910 --> 00:55:15,430
proprietary everything is open in many

00:55:12,789 --> 00:55:19,630
ways it's absolutely vital to the the

00:55:15,430 --> 00:55:23,410
ongoing health cloudstack the most

00:55:19,630 --> 00:55:27,220
exciting event in recent memory for me

00:55:23,410 --> 00:55:29,950
was our first developer boot camp

00:55:27,220 --> 00:55:32,590
and our call gave people I gave you two

00:55:29,950 --> 00:55:36,550
weeks notice to come attend I was

00:55:32,590 --> 00:55:40,750
expecting 25 or 30 people so we ended up

00:55:36,550 --> 00:55:43,570
with 87 people and had to go get more

00:55:40,750 --> 00:55:46,119
chairs into the room twice everything

00:55:43,570 --> 00:55:49,450
within cloud computing is commodity and

00:55:46,119 --> 00:55:52,420
is open source and so I don't think that

00:55:49,450 --> 00:55:54,190
you will you'll see anywhere where open

00:55:52,420 --> 00:55:57,220
source is not pervasive in cloud

00:55:54,190 --> 00:55:59,770
computing and so i think it's i think

00:55:57,220 --> 00:56:01,270
it's an assumption i think when you talk

00:55:59,770 --> 00:56:02,410
about cloud computing you're really

00:56:01,270 --> 00:56:07,930
talking about open source cloud

00:56:02,410 --> 00:56:10,990
computing cloud sac is a robust solution

00:56:07,930 --> 00:56:13,119
for large deployments you'll have dozens

00:56:10,990 --> 00:56:17,380
of data centers and thousands of servers

00:56:13,119 --> 00:56:20,050
in each data center is these hardware is

00:56:17,380 --> 00:56:23,560
going to fail and CloudStack is designed

00:56:20,050 --> 00:56:26,260
to handle number one that mass scale

00:56:23,560 --> 00:56:29,440
number two it's designed to handle the

00:56:26,260 --> 00:56:32,290
failure that inevitably happens in large

00:56:29,440 --> 00:56:36,490
deployments started working on contact

00:56:32,290 --> 00:56:39,760
over four years ago and it was the

00:56:36,490 --> 00:56:41,530
original set of people working on it had

00:56:39,760 --> 00:56:45,640
a background of delivering software

00:56:41,530 --> 00:56:49,869
telcos and service providers lots of QA

00:56:45,640 --> 00:56:53,500
lots of users actually using it high

00:56:49,869 --> 00:56:56,589
availability is the key feature multiple

00:56:53,500 --> 00:56:58,599
hypervisors support different network

00:56:56,589 --> 00:57:01,270
models you can pick up whatever suits

00:56:58,599 --> 00:57:03,520
you better while step management server

00:57:01,270 --> 00:57:07,210
can be deployed in different physical

00:57:03,520 --> 00:57:08,890
machines it definitely has a huge

00:57:07,210 --> 00:57:13,869
footprint it's being deployed everywhere

00:57:08,890 --> 00:57:16,450
there's a major movie studio that they

00:57:13,869 --> 00:57:19,750
were using cloudstack they were using it

00:57:16,450 --> 00:57:21,730
to transcode video and I thought that

00:57:19,750 --> 00:57:23,380
was terribly fascinating what I found

00:57:21,730 --> 00:57:26,650
more fascinating is what they did during

00:57:23,380 --> 00:57:29,440
lunch where they would spin up you know

00:57:26,650 --> 00:57:30,790
50 or 60 game servers then as soon as

00:57:29,440 --> 00:57:31,360
lunch was over they would destroy all

00:57:30,790 --> 00:57:33,510
the instance

00:57:31,360 --> 00:57:36,910
isn't go back to doing real work

00:57:33,510 --> 00:57:38,380
CloudStack is vast it touches so many

00:57:36,910 --> 00:57:40,300
different aspects and there's no one

00:57:38,380 --> 00:57:42,970
person that's kind of like a master of

00:57:40,300 --> 00:57:46,750
all those realms I think clouds stack as

00:57:42,970 --> 00:57:49,060
a project is going to be one of the

00:57:46,750 --> 00:57:53,050
leaders simply because it's some of the

00:57:49,060 --> 00:57:58,480
most feature Folan and and robust

00:57:53,050 --> 00:58:01,380
platforms out there I don't senior

00:57:58,480 --> 00:58:01,380
living through the clouds dag

00:58:14,160 --> 00:58:16,220

YouTube URL: https://www.youtube.com/watch?v=iwl4gpLZ9_Q


