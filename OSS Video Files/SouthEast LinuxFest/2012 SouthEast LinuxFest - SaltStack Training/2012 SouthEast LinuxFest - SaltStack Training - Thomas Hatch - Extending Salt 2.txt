Title: 2012 SouthEast LinuxFest - SaltStack Training - Thomas Hatch - Extending Salt 2
Publication date: 2014-06-30
Playlist: 2012 SouthEast LinuxFest - SaltStack Training
Description: 
	2012 SouthEast LinuxFest
SaltStack Training

Thomas Hatch - Extending Salt:  Grains, Returners, Renderers, Runners, and Tests
Captions: 
	00:00:00,000 --> 00:00:05,279
the following presentation was recorded

00:00:02,490 --> 00:00:08,040
the 2012 southeast linux fest in

00:00:05,279 --> 00:00:10,410
charlotte north carolina it is licensed

00:00:08,040 --> 00:00:12,090
under a creative commons license for

00:00:10,410 --> 00:00:16,859
more information about the southeast

00:00:12,090 --> 00:00:19,230
linux fest visit www.lend expense org

00:00:16,859 --> 00:00:21,320
the southeast linux fest would like to

00:00:19,230 --> 00:00:23,279
thank the following diamond sponsors in

00:00:21,320 --> 00:00:29,820
2012 for helping make these videos

00:00:23,279 --> 00:00:34,559
possible alright we're going to have one

00:00:29,820 --> 00:00:38,910
more talk this talk is going to be a

00:00:34,559 --> 00:00:41,190
brief overview of so in the first couple

00:00:38,910 --> 00:00:43,770
of times we talked about the core

00:00:41,190 --> 00:00:45,270
concept of salt and that is remote and

00:00:43,770 --> 00:00:47,129
that's the remote execution in the

00:00:45,270 --> 00:00:48,870
modules we talked about how to get

00:00:47,129 --> 00:00:52,079
started with States in the second talk

00:00:48,870 --> 00:00:53,910
and then we talked about how to how to

00:00:52,079 --> 00:00:57,390
get started with actually developing an

00:00:53,910 --> 00:00:59,760
extending salt in the last one now in

00:00:57,390 --> 00:01:03,899
this one what we're going to go over is

00:00:59,760 --> 00:01:08,430
a pretty brief overview of how to extend

00:01:03,899 --> 00:01:10,140
salt in in for more ways in code and

00:01:08,430 --> 00:01:13,260
then we're going to talk very briefly

00:01:10,140 --> 00:01:16,200
about a few other aspects of salt to be

00:01:13,260 --> 00:01:17,189
aware of now a lot of these things we're

00:01:16,200 --> 00:01:18,299
going to talk about we're not going to

00:01:17,189 --> 00:01:20,759
talk about in depth it's just going to

00:01:18,299 --> 00:01:22,740
be a quick introduction that to say that

00:01:20,759 --> 00:01:25,470
there are a lot of little pieces out

00:01:22,740 --> 00:01:29,009
here that can be useful hopefully just

00:01:25,470 --> 00:01:31,350
to get get your minds in this minnow

00:01:29,009 --> 00:01:32,369
mindset that realizes that well there's

00:01:31,350 --> 00:01:34,140
some things in these different

00:01:32,369 --> 00:01:35,939
directions that you could be aware of

00:01:34,140 --> 00:01:38,369
that you can look into and more depth in

00:01:35,939 --> 00:01:41,390
the future because we don't have enough

00:01:38,369 --> 00:01:47,530
time to cover them all in extreme depth

00:01:41,390 --> 00:01:51,100
so all right all right

00:01:47,530 --> 00:01:57,330
so primarily I mentioned that there are

00:01:51,100 --> 00:01:57,330
six ways to extend salt via the code and

00:01:57,450 --> 00:02:01,299
the two ways that we covered modules and

00:02:00,009 --> 00:02:04,960
states and then we've got grains

00:02:01,299 --> 00:02:06,820
returners renderers and runners and so

00:02:04,960 --> 00:02:10,209
we're going to spend some time talking

00:02:06,820 --> 00:02:11,770
about what those are how they work and a

00:02:10,209 --> 00:02:16,870
few reasons as to why you might want to

00:02:11,770 --> 00:02:19,390
extend them so grains there's a number

00:02:16,870 --> 00:02:29,410
of ways in which you can add grains to a

00:02:19,390 --> 00:02:31,090
minyan now if you've got if you open up

00:02:29,410 --> 00:02:33,360
the minyan configuration file you can

00:02:31,090 --> 00:02:36,310
statically assign grains right in there

00:02:33,360 --> 00:02:39,130
so that you can open the config file put

00:02:36,310 --> 00:02:40,900
some arbitrary values in there and bam

00:02:39,130 --> 00:02:43,120
you've got more grains it's the easiest

00:02:40,900 --> 00:02:46,090
way to do it and I'll demonstrate that

00:02:43,120 --> 00:02:48,100
here in a moment but also you can extend

00:02:46,090 --> 00:02:50,830
grains by adding more grains modules

00:02:48,100 --> 00:02:53,170
into the code itself so that you can

00:02:50,830 --> 00:02:55,480
make another mechanism that's going to

00:02:53,170 --> 00:02:57,820
discover some system properties or

00:02:55,480 --> 00:02:59,769
properties of some sort that are going

00:02:57,820 --> 00:03:01,180
that's going to return data now a really

00:02:59,769 --> 00:03:04,209
good example of this i was talking to

00:03:01,180 --> 00:03:06,959
accompany jive communications there

00:03:04,209 --> 00:03:09,190
they're one of our earliest adopters

00:03:06,959 --> 00:03:11,890
starting to the bank in january about

00:03:09,190 --> 00:03:13,959
salt and they wanted to integrate their

00:03:11,890 --> 00:03:16,540
salt system with some of the components

00:03:13,959 --> 00:03:18,280
of their existing provisioning and

00:03:16,540 --> 00:03:22,959
management systems that they'd built

00:03:18,280 --> 00:03:25,989
in-house and their existing system they

00:03:22,959 --> 00:03:29,410
would hit an HTTP server somewhere and

00:03:25,989 --> 00:03:32,170
grab some some data and then integrate

00:03:29,410 --> 00:03:33,579
that into their into their deployment

00:03:32,170 --> 00:03:35,769
scripts and they said we'd love to still

00:03:33,579 --> 00:03:37,359
be able to grab that data and didn't

00:03:35,769 --> 00:03:39,760
implement it in salt and I said well

00:03:37,359 --> 00:03:42,480
that'll be a custom grain you see you

00:03:39,760 --> 00:03:44,920
write a modular returns a dictionary and

00:03:42,480 --> 00:03:46,299
and you put it in there and it then

00:03:44,920 --> 00:03:48,850
it'll work well we'll talk about that in

00:03:46,299 --> 00:03:50,290
a few minutes is what I told them and a

00:03:48,850 --> 00:03:53,710
few minutes passed and one of them in

00:03:50,290 --> 00:03:56,560
the back does one of these

00:03:53,710 --> 00:03:59,560
and he says I got to work I got a grain

00:03:56,560 --> 00:04:02,950
that integrates our existing deployment

00:03:59,560 --> 00:04:07,420
system directly into salt so they can it

00:04:02,950 --> 00:04:11,670
can be very useful and it's one of those

00:04:07,420 --> 00:04:16,210
interfaces that emphasizes the fact that

00:04:11,670 --> 00:04:18,580
one of the core goals of salt is that it

00:04:16,210 --> 00:04:22,210
will mold to your environment and your

00:04:18,580 --> 00:04:25,810
needs as opposed to you needing to

00:04:22,210 --> 00:04:31,350
change any of any of your own internal

00:04:25,810 --> 00:04:31,350
turnip processes as much so let's see

00:04:34,590 --> 00:04:42,460
let's take a quick look at how these

00:04:36,730 --> 00:04:47,320
grains work right now we've got our core

00:04:42,460 --> 00:04:49,600
grain module here same thing that just a

00:04:47,320 --> 00:04:51,730
Python module if there's a underscore in

00:04:49,600 --> 00:04:53,740
front of it it won't be executed but

00:04:51,730 --> 00:04:57,720
this is a little different how grains

00:04:53,740 --> 00:05:02,650
works is that it'll go through and

00:04:57,720 --> 00:05:05,530
execute these these functions and then

00:05:02,650 --> 00:05:08,770
just append the dictionary that's

00:05:05,530 --> 00:05:10,000
returned to the existing grains so if

00:05:08,770 --> 00:05:12,820
you want to add some grains you can

00:05:10,000 --> 00:05:14,230
chuck some functions in here or add some

00:05:12,820 --> 00:05:16,000
more grain modules into that directory

00:05:14,230 --> 00:05:18,340
and they'll get automatically loaded as

00:05:16,000 --> 00:05:20,290
we can see for instance that we go

00:05:18,340 --> 00:05:23,920
through and we figure out what what the

00:05:20,290 --> 00:05:27,640
what the operating system is add some

00:05:23,920 --> 00:05:31,000
keys into this dictionary and then just

00:05:27,640 --> 00:05:36,070
return it actually this is a better

00:05:31,000 --> 00:05:37,660
example that was nice and brief that

00:05:36,070 --> 00:05:39,250
we're going to figure out what the post

00:05:37,660 --> 00:05:42,160
name and the fully qualified domain name

00:05:39,250 --> 00:05:49,090
and whatnot is and then return it and

00:05:42,160 --> 00:05:51,810
they all get appended all right oh I

00:05:49,090 --> 00:05:51,810
wanted to mention

00:05:54,020 --> 00:06:08,760
if we go into the minion config file

00:05:56,520 --> 00:06:11,990
here so now I've made a grain called foo

00:06:08,760 --> 00:06:11,990
with the value of bar

00:06:21,740 --> 00:06:24,920
there it is

00:06:24,990 --> 00:06:33,740
so we can stand up the ad grains to the

00:06:27,450 --> 00:06:33,740
config file any questions on that okay

00:06:38,060 --> 00:06:46,500
salt returners now the idea here is one

00:06:45,120 --> 00:06:47,880
of the core ideas of salt remote

00:06:46,500 --> 00:06:50,940
execution system is that it is

00:06:47,880 --> 00:06:53,970
fundamentally detached what that means

00:06:50,940 --> 00:06:56,010
is that when you execute a command the

00:06:53,970 --> 00:06:58,710
mass tourism doesn't have a persistent

00:06:56,010 --> 00:07:00,750
TCP connection waiting for that command

00:06:58,710 --> 00:07:02,790
to return which means that this

00:07:00,750 --> 00:07:05,580
information can be redirected to any

00:07:02,790 --> 00:07:07,610
other location that you really want it

00:07:05,580 --> 00:07:11,460
doesn't have to come back to the master

00:07:07,610 --> 00:07:14,160
now the benefit here is that you can

00:07:11,460 --> 00:07:16,230
very easily set up say a script that's

00:07:14,160 --> 00:07:20,250
running on the master that every now and

00:07:16,230 --> 00:07:22,350
then says I want I want a or an

00:07:20,250 --> 00:07:27,360
SQL or a red a server or something like

00:07:22,350 --> 00:07:32,150
that to just have this data sent over to

00:07:27,360 --> 00:07:32,150
it every X number of minutes or seconds

00:07:33,290 --> 00:07:40,350
so it's got this this built-in mechanism

00:07:36,360 --> 00:07:48,230
to make the minyan cache data and so to

00:07:40,350 --> 00:07:52,140
add a returner let's take a look at one

00:07:48,230 --> 00:07:54,480
and then i'll show how to use one so

00:07:52,140 --> 00:07:56,070
here's our cassandra returner this is

00:07:54,480 --> 00:07:57,060
another thing that jive communications

00:07:56,070 --> 00:08:03,990
gave us since i've already mentioned

00:07:57,060 --> 00:08:07,050
them today okay setting up a returner is

00:08:03,990 --> 00:08:10,110
pretty straightforward all you need to

00:08:07,050 --> 00:08:12,150
do is have a function in here called

00:08:10,110 --> 00:08:16,020
returner that function is going to get

00:08:12,150 --> 00:08:18,210
called and it's going to receive a data

00:08:16,020 --> 00:08:21,660
structure that has the return data from

00:08:18,210 --> 00:08:25,040
the actual call that return data or this

00:08:21,660 --> 00:08:31,500
rat as it is in this bin this returner

00:08:25,040 --> 00:08:34,590
is going to have three keys those keys

00:08:31,500 --> 00:08:36,649
will be let's see if I'm looking for

00:08:34,590 --> 00:08:43,339
here we go

00:08:36,649 --> 00:08:44,449
oh yeah no it's for I apologize those

00:08:43,339 --> 00:08:46,819
are going to be the function that was

00:08:44,449 --> 00:08:48,050
actually called so it could be it could

00:08:46,819 --> 00:08:49,910
have been tested up paying kind of

00:08:48,050 --> 00:08:52,790
impacts done stalled or staked out high

00:08:49,910 --> 00:08:56,059
state it's going to be the minions ID

00:08:52,790 --> 00:08:58,339
that's actually returning the data it's

00:08:56,059 --> 00:09:00,079
going to be the return data itself so

00:08:58,339 --> 00:09:02,410
this is what's actually returned from

00:09:00,079 --> 00:09:05,839
the function inside of the modules and

00:09:02,410 --> 00:09:08,240
then the job ID because every time we

00:09:05,839 --> 00:09:10,279
launched a job we're done we launched in

00:09:08,240 --> 00:09:12,619
command and solve there's a job ID

00:09:10,279 --> 00:09:16,759
that's associated with it so that we can

00:09:12,619 --> 00:09:19,149
track historically exactly what happened

00:09:16,759 --> 00:09:22,279
with respect to that singular execution

00:09:19,149 --> 00:09:25,100
and so you've got access to that data

00:09:22,279 --> 00:09:27,949
and in this case we're just connecting

00:09:25,100 --> 00:09:31,249
to a Cassandra server and sending the

00:09:27,949 --> 00:09:36,439
data off in what is going to be a

00:09:31,249 --> 00:09:39,920
consistent format so hopefully hopefully

00:09:36,439 --> 00:09:42,350
that 61 lines of Python code isn't too

00:09:39,920 --> 00:09:44,059
particularly daunting for anyone who's

00:09:42,350 --> 00:09:48,110
trying to write something that's going

00:09:44,059 --> 00:09:56,029
to return this information to a to a to

00:09:48,110 --> 00:10:00,319
say a database now to use returners I

00:09:56,029 --> 00:10:02,660
don't have a I have a Cassandra or a

00:10:00,319 --> 00:10:05,660
 or a Redis or anything like that

00:10:02,660 --> 00:10:14,800
set up right now so there's a limit to

00:10:05,660 --> 00:10:14,800
my my demo but we run the command

00:10:19,110 --> 00:10:24,959
and then specify dash dash return and

00:10:22,320 --> 00:10:27,209
say what fraternity to use we can pass a

00:10:24,959 --> 00:10:30,240
comma delimited list of returners as

00:10:27,209 --> 00:10:33,899
well so that if you could say I want it

00:10:30,240 --> 00:10:42,079
to be sent to these five returners then

00:10:33,899 --> 00:10:44,790
that's that's also possible all right

00:10:42,079 --> 00:10:47,790
we've gone we've had a few more people

00:10:44,790 --> 00:10:49,709
use renderers again as I mentioned when

00:10:47,790 --> 00:10:50,820
you define as LS files for the state

00:10:49,709 --> 00:10:52,860
tree when you're defining your

00:10:50,820 --> 00:10:54,570
configuration management it's on the

00:10:52,860 --> 00:11:00,209
data structure we don't care how you get

00:10:54,570 --> 00:11:03,540
it but we've got to have some mechanism

00:11:00,209 --> 00:11:06,980
to turn that information into the data

00:11:03,540 --> 00:11:09,980
structure and so we do that inside of

00:11:06,980 --> 00:11:09,980
renderers

00:11:17,840 --> 00:11:23,510
so if we take a look at the default

00:11:20,740 --> 00:11:27,440
renderer it's actually not too

00:11:23,510 --> 00:11:29,090
particularly complicated all we're doing

00:11:27,440 --> 00:11:31,190
here is we're taking this information

00:11:29,090 --> 00:11:33,470
that i mentioned before the salt the

00:11:31,190 --> 00:11:35,780
grains and the options and everything

00:11:33,470 --> 00:11:40,010
making those available inside of the

00:11:35,780 --> 00:11:42,890
file rendering the running it through

00:11:40,010 --> 00:11:44,990
the jinja templating engine and then

00:11:42,890 --> 00:11:55,070
winning it three amel and returning the

00:11:44,990 --> 00:11:57,590
raw data so similarly the Mako render is

00:11:55,070 --> 00:12:00,470
fairly popular in yeah as far as the

00:11:57,590 --> 00:12:08,990
code goes we're looking at was that 26

00:12:00,470 --> 00:12:10,670
lines of real code to make it happen but

00:12:08,990 --> 00:12:12,650
so again fundamentally the renderer is

00:12:10,670 --> 00:12:15,380
the way in which you extend salt to

00:12:12,650 --> 00:12:24,160
accept a different type of SLS format if

00:12:15,380 --> 00:12:26,650
you don't want to use the default now

00:12:24,160 --> 00:12:29,240
quickly when you're writing renderers

00:12:26,650 --> 00:12:30,710
they've primarily they primarily take

00:12:29,240 --> 00:12:32,810
three arguments those have to be

00:12:30,710 --> 00:12:37,160
available or else your render will throw

00:12:32,810 --> 00:12:38,510
a stack trace there's got to be the the

00:12:37,160 --> 00:12:41,240
template file that's going to be the

00:12:38,510 --> 00:12:44,630
file that's available or sorry the file

00:12:41,240 --> 00:12:46,670
the template file itself and salts going

00:12:44,630 --> 00:12:49,630
to pass to the renderer the location of

00:12:46,670 --> 00:12:52,670
that template file for you to render and

00:12:49,630 --> 00:12:55,370
then you need to accept the environment

00:12:52,670 --> 00:12:59,540
and the sls and those are pieces of data

00:12:55,370 --> 00:13:01,340
that you embed so that so this state

00:12:59,540 --> 00:13:04,150
system is able to track where rendered

00:13:01,340 --> 00:13:04,150
files have come from

00:13:09,970 --> 00:13:17,710
okay so that kind of that that that

00:13:15,620 --> 00:13:19,820
cover is actually everything but runners

00:13:17,710 --> 00:13:24,020
but before you can get into runners we

00:13:19,820 --> 00:13:27,710
have to mention the API so I've gone

00:13:24,020 --> 00:13:29,660
over how to call salt commands from the

00:13:27,710 --> 00:13:32,510
command line but to actually run the

00:13:29,660 --> 00:13:34,760
executions from Python directly you

00:13:32,510 --> 00:13:36,830
don't need to shell out you can directly

00:13:34,760 --> 00:13:39,740
call the api and there's a lot of

00:13:36,830 --> 00:13:48,010
functions inside of the API that are

00:13:39,740 --> 00:13:48,010
useful so

00:13:51,210 --> 00:13:59,010
actually I'll just do this in in a

00:13:56,050 --> 00:13:59,010
Python shell here

00:14:10,300 --> 00:14:16,650
so the salt salt our client libraries

00:14:13,330 --> 00:14:16,650
where the API is located

00:14:30,100 --> 00:14:38,779
when we create a when we create a client

00:14:32,749 --> 00:14:41,299
object that's we we make that instance

00:14:38,779 --> 00:14:42,979
out of the local client we just have to

00:14:41,299 --> 00:14:45,709
pass it the location of the Masters

00:14:42,979 --> 00:14:47,539
config file because it's going to have

00:14:45,709 --> 00:14:49,609
to read information about the Masters

00:14:47,539 --> 00:14:54,069
config file to attach to the master to

00:14:49,609 --> 00:14:54,069
send out a command okay

00:15:07,100 --> 00:15:17,950
and then I need to remember oh that's

00:15:12,320 --> 00:15:21,470
right that's right the target of course

00:15:17,950 --> 00:15:22,970
and so the same conflicts that we're

00:15:21,470 --> 00:15:28,240
using on the command line are available

00:15:22,970 --> 00:15:31,250
in here and in the same order the target

00:15:28,240 --> 00:15:32,990
the function if we were passing

00:15:31,250 --> 00:15:36,530
arguments then we would have a list a

00:15:32,990 --> 00:15:38,660
list and then a comma separated list of

00:15:36,530 --> 00:15:41,660
what the arguments are if we're using

00:15:38,660 --> 00:15:43,580
something other than the default target

00:15:41,660 --> 00:15:46,600
then we would then we would say the

00:15:43,580 --> 00:15:52,520
expression form equals grain or

00:15:46,600 --> 00:15:55,550
something else and we're able to execute

00:15:52,520 --> 00:16:08,720
Python call or solve calls directly from

00:15:55,550 --> 00:16:12,640
Python ok so the gist here is that it's

00:16:08,720 --> 00:16:14,840
very straightforward to be able to

00:16:12,640 --> 00:16:16,790
execute commands and write your own

00:16:14,840 --> 00:16:20,450
scripts or your own applications on top

00:16:16,790 --> 00:16:22,250
of salts communication that's still

00:16:20,450 --> 00:16:24,680
using it to run all of the run all of

00:16:22,250 --> 00:16:27,020
your commands query data and then bring

00:16:24,680 --> 00:16:30,530
all of that back so fundamentally

00:16:27,020 --> 00:16:32,480
extensible in that way now inside of

00:16:30,530 --> 00:16:34,900
that local object that we created we've

00:16:32,480 --> 00:16:37,220
got the CMD command which is a classic

00:16:34,900 --> 00:16:39,950
just send a single command and get a

00:16:37,220 --> 00:16:41,480
return back CMD CLI is also going to

00:16:39,950 --> 00:16:43,420
print a bunch of things to the terminal

00:16:41,480 --> 00:16:48,580
it's what the salt command itself uses

00:16:43,420 --> 00:16:53,540
we've also got CMD it ER so normally

00:16:48,580 --> 00:16:56,480
when a salt when the when the sole

00:16:53,540 --> 00:16:58,490
command runs it's going to execute it

00:16:56,480 --> 00:17:00,050
publishes the command that everybody

00:16:58,490 --> 00:17:01,940
needs to run and then it detaches and

00:17:00,050 --> 00:17:04,790
just kind of waits for them to all

00:17:01,940 --> 00:17:09,230
respond and then as all of the minions

00:17:04,790 --> 00:17:15,020
reply they're ingested one at a time and

00:17:09,230 --> 00:17:16,940
then sent back to the command and so the

00:17:15,020 --> 00:17:18,680
basic command here just waits for all of

00:17:16,940 --> 00:17:19,900
the minions to reply and then sends all

00:17:18,680 --> 00:17:23,140
of their returns back

00:17:19,900 --> 00:17:26,589
at once whereas we can use an iterator

00:17:23,140 --> 00:17:28,300
command to say that it creates it

00:17:26,589 --> 00:17:31,780
creates a Python generator for those of

00:17:28,300 --> 00:17:34,750
you familiar with this but but it allows

00:17:31,780 --> 00:17:38,410
you to retrieve the information about

00:17:34,750 --> 00:17:43,540
who's executed one at a time as they

00:17:38,410 --> 00:17:45,100
come in so it's really good for gen

00:17:43,540 --> 00:17:47,620
generally used by people who have built

00:17:45,100 --> 00:17:50,560
some web interfaces to solve because

00:17:47,620 --> 00:17:52,210
it's it's capable of using web sockets

00:17:50,560 --> 00:17:54,090
and they run a command and you can

00:17:52,210 --> 00:17:57,190
actually see on their web pages

00:17:54,090 --> 00:18:06,370
components filling up as the minions

00:17:57,190 --> 00:18:09,760
reply from the queries all right the

00:18:06,370 --> 00:18:14,850
last way to the last common mechanism

00:18:09,760 --> 00:18:21,550
used to extend salt is called a runner

00:18:14,850 --> 00:18:24,570
now a runner the concept here is that if

00:18:21,550 --> 00:18:29,020
you want to write a specific purpose

00:18:24,570 --> 00:18:32,170
script that executes some more

00:18:29,020 --> 00:18:34,120
complicated sequence in salt you can

00:18:32,170 --> 00:18:37,750
drop it in and make it a runner and then

00:18:34,120 --> 00:18:39,660
call it with assault run command it so

00:18:37,750 --> 00:18:42,520
it's a really good way to build out

00:18:39,660 --> 00:18:45,520
specialized reports and a really good

00:18:42,520 --> 00:18:47,110
way to to make some of the more

00:18:45,520 --> 00:18:49,150
complicated things that you might do

00:18:47,110 --> 00:18:51,070
more convenient there's a couple of

00:18:49,150 --> 00:18:58,810
built-in runners so we run them with

00:18:51,070 --> 00:19:01,060
salt run we can say sulfur and managed

00:18:58,810 --> 00:19:06,400
on up to say who's everybody that's

00:19:01,060 --> 00:19:09,460
responding manage down to say who isn't

00:19:06,400 --> 00:19:17,160
responding nobody it's easy to track

00:19:09,460 --> 00:19:17,160
just one isn't it similarly we can do

00:19:22,540 --> 00:19:26,900
there's a runner that manages jobs let

00:19:25,430 --> 00:19:39,530
me check the documentation here real

00:19:26,900 --> 00:19:43,040
quick perfect thank you and so I can go

00:19:39,530 --> 00:19:45,560
back and use this job's runner to list

00:19:43,040 --> 00:19:49,310
every execution that i have sent out of

00:19:45,560 --> 00:19:51,740
this master so long as we've maintained

00:19:49,310 --> 00:19:56,390
the cache of jobs by default there

00:19:51,740 --> 00:19:58,130
maintained for 24 hours now but so we

00:19:56,390 --> 00:20:02,060
can see that this last test stopped

00:19:58,130 --> 00:20:06,910
paying that I executed from the from the

00:20:02,060 --> 00:20:10,850
Python API was cashed here's his job ID

00:20:06,910 --> 00:20:18,830
which is actually kind of a timestamp

00:20:10,850 --> 00:20:20,990
there so 2012 the 10th 1224 etc we know

00:20:18,830 --> 00:20:23,240
what arguments were passed we know what

00:20:20,990 --> 00:20:26,470
time it started we know who was intended

00:20:23,240 --> 00:20:26,470
to execute it etc

00:20:31,389 --> 00:20:40,690
we can use this job runner here to read

00:20:37,839 --> 00:20:44,049
what that historic response was from

00:20:40,690 --> 00:20:46,239
that job ID so we can go in and again

00:20:44,049 --> 00:20:54,249
look at everything that's happened in

00:20:46,239 --> 00:20:56,739
the past and query it back through so

00:20:54,249 --> 00:20:58,629
those are brothers and really the job

00:20:56,739 --> 00:21:11,639
interface is a very useful thing to be

00:20:58,629 --> 00:21:11,639
aware of any questions okay

00:21:18,500 --> 00:21:26,280
when when you're developing runners

00:21:23,730 --> 00:21:29,490
modules States etcetera etcetera

00:21:26,280 --> 00:21:33,420
etcetera we do we do have a full testing

00:21:29,490 --> 00:21:36,570
system in place so you can add tests to

00:21:33,420 --> 00:21:39,500
verify that that your code is working on

00:21:36,570 --> 00:21:39,500
a continual basis

00:21:57,600 --> 00:22:03,730
now to run the tests all you've got to

00:22:01,810 --> 00:22:05,260
do is CD into the test directory make

00:22:03,730 --> 00:22:06,700
sure that your modules are in there and

00:22:05,260 --> 00:22:16,330
that your test that your tests are in

00:22:06,700 --> 00:22:21,310
there they don't need to be run as root

00:22:16,330 --> 00:22:23,170
but I've got a funny configuration on

00:22:21,310 --> 00:22:27,850
this laptop right now that goes crazy if

00:22:23,170 --> 00:22:31,060
I don't the test system is pretty

00:22:27,850 --> 00:22:33,670
thorough what it does or what is what

00:22:31,060 --> 00:22:36,870
it's been doing up there is that it

00:22:33,670 --> 00:22:42,030
actually starts up to master servers a

00:22:36,870 --> 00:22:45,220
Syndic into minions so that it builds a

00:22:42,030 --> 00:22:47,470
hierarchy and build out some minions so

00:22:45,220 --> 00:22:49,900
that these tests are not just unit tests

00:22:47,470 --> 00:22:54,130
but they're running on live salt

00:22:49,900 --> 00:22:55,810
infrastructure that's all running as the

00:22:54,130 --> 00:23:01,870
user that you started as and they all

00:22:55,810 --> 00:23:04,690
cleanly die when you're done but so

00:23:01,870 --> 00:23:08,820
we're able to embed any test that we

00:23:04,690 --> 00:23:08,820
want to and verify them very very easily

00:23:26,080 --> 00:23:33,590
now we're going to we're going we're

00:23:31,700 --> 00:23:36,320
going to have what we're calling the the

00:23:33,590 --> 00:23:39,560
first grade salt sprint here on the

00:23:36,320 --> 00:23:43,370
thirtieth of June it's sponsored by the

00:23:39,560 --> 00:23:44,810
Linux fund and their main the main goal

00:23:43,370 --> 00:23:48,560
and one of the reasons why they gave us

00:23:44,810 --> 00:23:51,530
the money is to help us build out more

00:23:48,560 --> 00:23:55,720
tests for salt because right now we've

00:23:51,530 --> 00:23:55,720
only got maybe thirty percent coverage

00:23:56,620 --> 00:24:02,420
and we've got a and this this

00:24:00,200 --> 00:24:06,440
development sprint has been done in a

00:24:02,420 --> 00:24:07,970
real salt fashion it's distributed so we

00:24:06,440 --> 00:24:09,800
have the sprint is going on

00:24:07,970 --> 00:24:13,070
simultaneously in three different

00:24:09,800 --> 00:24:15,680
locations we've got one location in Salt

00:24:13,070 --> 00:24:18,350
Lake City another in Silicon Valley and

00:24:15,680 --> 00:24:20,930
another up in Portland Oregon well we've

00:24:18,350 --> 00:24:23,240
got teams of guys coming together all to

00:24:20,930 --> 00:24:25,430
develop salt code so it's going to be

00:24:23,240 --> 00:24:27,530
really exciting if anybody wants to see

00:24:25,430 --> 00:24:30,950
if I I don't we don't have one down and

00:24:27,530 --> 00:24:33,680
down in the South right now but if

00:24:30,950 --> 00:24:35,990
anybody wants to be involved in that go

00:24:33,680 --> 00:24:37,100
ahead and check online check the web

00:24:35,990 --> 00:24:38,720
page on the 30th and we'll have

00:24:37,100 --> 00:24:42,320
instructions on how to hop in the video

00:24:38,720 --> 00:24:44,510
feed so that so that anybody anywhere

00:24:42,320 --> 00:24:48,560
can be involved in helping us write some

00:24:44,510 --> 00:24:51,340
salt code and the goal of this sprint

00:24:48,560 --> 00:24:55,760
like I said is to make our test better

00:24:51,340 --> 00:24:58,570
but as usual we we like patches of all

00:24:55,760 --> 00:25:01,310
sorts as long as they're not just wrong

00:24:58,570 --> 00:25:10,700
but yeah we really like module additions

00:25:01,310 --> 00:25:14,170
and test additions now there's two more

00:25:10,700 --> 00:25:14,170
interfaces that I want to talk about

00:25:14,560 --> 00:25:21,140
then we're in the next that I did

00:25:17,570 --> 00:25:22,220
prepare another another presentation but

00:25:21,140 --> 00:25:25,310
i don't think that we're going to have

00:25:22,220 --> 00:25:26,570
enough time to go into it because i've

00:25:25,310 --> 00:25:31,040
got a lot of flights that are starting

00:25:26,570 --> 00:25:33,970
to go out so that our numbers have

00:25:31,040 --> 00:25:33,970
already waned considerably

00:25:34,740 --> 00:25:45,549
yeah well then that's not a good enough

00:25:38,500 --> 00:25:47,320
reason it's all right so there's two

00:25:45,549 --> 00:25:49,059
more interfaces inside of salt that I

00:25:47,320 --> 00:25:52,539
want to talk about and I don't have a

00:25:49,059 --> 00:25:57,399
whiteboard they're so white board type

00:25:52,539 --> 00:25:59,320
things but all the communications we've

00:25:57,399 --> 00:26:00,880
been talking about so far has been based

00:25:59,320 --> 00:26:03,730
on a master sending out commands

00:26:00,880 --> 00:26:06,279
dominions but there's there's two more

00:26:03,730 --> 00:26:08,200
interfaces that we can work with insult

00:26:06,279 --> 00:26:12,370
one of them and I mentioned a very

00:26:08,200 --> 00:26:16,600
briefly briefly is called a Syndic and

00:26:12,370 --> 00:26:23,049
meaning to syndicate so if say you've

00:26:16,600 --> 00:26:25,480
got four data centers or say you've got

00:26:23,049 --> 00:26:29,250
one data center that's just really big

00:26:25,480 --> 00:26:33,070
and you go well sure I could attach

00:26:29,250 --> 00:26:34,360
30,000 minions to my one salt master but

00:26:33,070 --> 00:26:38,919
that's more than I want to deal with

00:26:34,360 --> 00:26:40,779
logically anyway and so instead we'll

00:26:38,919 --> 00:26:42,940
say let's take a salt master here and

00:26:40,779 --> 00:26:45,760
give it about two hundred and here and

00:26:42,940 --> 00:26:47,380
give it about two hundred etc so that

00:26:45,760 --> 00:26:49,090
you've got a number of salt masters and

00:26:47,380 --> 00:26:51,789
maybe you'll have salt masters at every

00:26:49,090 --> 00:26:53,350
one of your data centers so say you've

00:26:51,789 --> 00:26:55,690
got five data centers and so you've got

00:26:53,350 --> 00:26:58,210
a data center it's got it's got its

00:26:55,690 --> 00:26:59,590
master it's got its minions and they're

00:26:58,210 --> 00:27:01,929
all over the world or all over the

00:26:59,590 --> 00:27:04,090
country but you still want to be able to

00:27:01,929 --> 00:27:08,500
control all of them from one central

00:27:04,090 --> 00:27:11,110
location and so what you do is you set

00:27:08,500 --> 00:27:13,799
up what we call a sin deck and the

00:27:11,110 --> 00:27:16,149
Syndic is like a it's like a bridge that

00:27:13,799 --> 00:27:17,740
allows you to take one of these salt

00:27:16,149 --> 00:27:20,200
masters or one of your data centers and

00:27:17,740 --> 00:27:23,830
then tie it into a higher level master

00:27:20,200 --> 00:27:27,399
up here so that you may have these five

00:27:23,830 --> 00:27:30,970
data centers and they all report back to

00:27:27,399 --> 00:27:34,029
this higher level master and so this guy

00:27:30,970 --> 00:27:37,779
can now send commands out to every day

00:27:34,029 --> 00:27:42,610
the center or gather information from

00:27:37,779 --> 00:27:44,080
every data center in a unified place the

00:27:42,610 --> 00:27:45,789
other thing about the Syndic interface

00:27:44,080 --> 00:27:46,930
is that it is a completely transparent

00:27:45,789 --> 00:27:48,850
interface

00:27:46,930 --> 00:27:50,530
what this means is that this higher

00:27:48,850 --> 00:27:55,570
level master could have direct minions

00:27:50,530 --> 00:27:57,310
of its own and it could have you can

00:27:55,570 --> 00:27:59,730
have a master of a master of a master of

00:27:57,310 --> 00:28:02,620
a master with minions on every layer and

00:27:59,730 --> 00:28:05,980
build whatever insane topology you want

00:28:02,620 --> 00:28:08,650
it because I don't I'm not going to try

00:28:05,980 --> 00:28:11,590
and predict how you're going to make

00:28:08,650 --> 00:28:14,680
your data center and I've seen some real

00:28:11,590 --> 00:28:26,650
doozies so all that people do what they

00:28:14,680 --> 00:28:31,060
want yes the the question was in that

00:28:26,650 --> 00:28:32,560
type of complicated environment which of

00:28:31,060 --> 00:28:37,510
the masters have access to which of the

00:28:32,560 --> 00:28:39,700
minions now a master a master has

00:28:37,510 --> 00:28:42,580
minions directly connected to it okay

00:28:39,700 --> 00:28:45,220
and so it only can see its own minions

00:28:42,580 --> 00:28:46,540
if you've got a master over here in a

00:28:45,220 --> 00:28:48,520
master over here and they've got their

00:28:46,540 --> 00:28:51,970
own minions and they're tied together

00:28:48,520 --> 00:28:54,940
with a Syndic then this guy cannot see

00:28:51,970 --> 00:29:04,150
this guy's minions but this guy can see

00:28:54,940 --> 00:29:18,030
both of their minions make sense right

00:29:04,150 --> 00:29:18,030
but not parallel okay sorry correct

00:29:18,930 --> 00:29:26,460
alright so that's the Syndic interface

00:29:21,310 --> 00:29:26,460
it's actually very very easy configure

00:29:32,830 --> 00:29:38,110
I haven't accounted for a new thing that

00:29:35,740 --> 00:29:54,130
I changed looks like any dad died

00:29:38,110 --> 00:29:57,570
another test all right so so if we look

00:29:54,130 --> 00:29:57,570
down to the syndics settings in here

00:30:07,110 --> 00:30:24,850
do we see that yeah yes yes I know all

00:30:17,289 --> 00:30:27,010
right so there's two settings to manage

00:30:24,850 --> 00:30:29,890
syndics so it's really simple in the

00:30:27,010 --> 00:30:31,270
master config you set a Syndic master so

00:30:29,890 --> 00:30:33,340
if you're on a master with minions who

00:30:31,270 --> 00:30:35,860
wants to report to a higher level you

00:30:33,340 --> 00:30:39,630
say Syndic master equals wherever this

00:30:35,860 --> 00:30:42,250
guy up here is and then this guy up here

00:30:39,630 --> 00:30:48,100
needs to have orders order master is

00:30:42,250 --> 00:30:50,620
equal to true and then it works that's

00:30:48,100 --> 00:30:52,809
that's all it takes and the only reason

00:30:50,620 --> 00:30:54,640
you need order masters appears that the

00:30:52,809 --> 00:30:56,860
true is because it adds a little more

00:30:54,640 --> 00:31:00,490
information to the publications that are

00:30:56,860 --> 00:31:02,020
sent out and down here master of masters

00:31:00,490 --> 00:31:04,659
you just need to know where that high

00:31:02,020 --> 00:31:06,370
level guy is once those are configured

00:31:04,659 --> 00:31:09,730
you start up a demon called assaults

00:31:06,370 --> 00:31:12,580
Indyk and that salt Syndic demon does

00:31:09,730 --> 00:31:15,340
all the bridge work for you so very

00:31:12,580 --> 00:31:24,750
straightforward to configs in two places

00:31:15,340 --> 00:31:24,750
or one can fake it in two places now

00:31:27,840 --> 00:31:31,810
the next thing that I want to talk about

00:31:30,010 --> 00:31:34,780
this this is going to be the last thing

00:31:31,810 --> 00:31:37,480
and then we'll have then any if you guys

00:31:34,780 --> 00:31:42,000
have any questions or anything that I

00:31:37,480 --> 00:31:42,000
want to talk about is pure communication

00:31:42,600 --> 00:31:47,080
now by default peer communication is

00:31:45,130 --> 00:31:48,970
turned off and i think you'll you'll

00:31:47,080 --> 00:31:52,420
understand why when i start explaining

00:31:48,970 --> 00:31:54,340
what it is but peer communication allows

00:31:52,420 --> 00:31:57,760
so you've got a master and you've got

00:31:54,340 --> 00:32:01,030
minions peer communication allows a

00:31:57,760 --> 00:32:05,710
minion to send publications to other

00:32:01,030 --> 00:32:09,100
minions now this could be a fairly

00:32:05,710 --> 00:32:11,380
serious security risk because it's

00:32:09,100 --> 00:32:14,320
already kind of dangerous if your master

00:32:11,380 --> 00:32:15,640
gets compromised then whoever

00:32:14,320 --> 00:32:19,030
compromised it now owns everything

00:32:15,640 --> 00:32:20,410
because they can send out commands we

00:32:19,030 --> 00:32:22,660
don't want to make it so that every

00:32:20,410 --> 00:32:25,870
single system you have if it gets

00:32:22,660 --> 00:32:28,990
compromised and can compromise

00:32:25,870 --> 00:32:32,070
everything else that's bad but so the

00:32:28,990 --> 00:32:37,840
pier system allows you to open up

00:32:32,070 --> 00:32:42,610
specific minions to be able to execute

00:32:37,840 --> 00:32:44,080
on specific commands so in this case

00:32:42,610 --> 00:32:46,720
we're saying that if we've got a minion

00:32:44,080 --> 00:32:51,360
food at example.com it has access to all

00:32:46,720 --> 00:32:53,800
of the tests and package functions okay

00:32:51,360 --> 00:32:55,960
now this is very useful if you've got a

00:32:53,800 --> 00:32:59,080
minion down here who has an event and

00:32:55,960 --> 00:33:02,770
that event needs to be able to trigger

00:32:59,080 --> 00:33:09,310
events someplace else so that you can

00:33:02,770 --> 00:33:10,720
use cross communication also in the next

00:33:09,310 --> 00:33:15,220
release of salt we just finished

00:33:10,720 --> 00:33:18,430
building in the pier run interface so

00:33:15,220 --> 00:33:21,220
that you can open up minions to be able

00:33:18,430 --> 00:33:25,030
to execute a runner on the master and

00:33:21,220 --> 00:33:26,740
then get that data back on the minion so

00:33:25,030 --> 00:33:28,240
that a minion itself would be able to

00:33:26,740 --> 00:33:30,210
integrate in such a way to gather

00:33:28,240 --> 00:33:35,970
information about everything else

00:33:30,210 --> 00:33:35,970
specific to one of the runners reports

00:33:38,100 --> 00:33:56,350
alright that's what I've got so someone

00:33:53,649 --> 00:33:57,519
question to you guys is is there is

00:33:56,350 --> 00:33:59,769
there anything else did you want me to

00:33:57,519 --> 00:34:01,779
talk about a little bit more before we

00:33:59,769 --> 00:34:06,460
call it quits you guys have any

00:34:01,779 --> 00:34:08,520
questions or any or any use cases or

00:34:06,460 --> 00:34:11,740
anything that you want to go over before

00:34:08,520 --> 00:34:21,040
before we we shut this shut this show

00:34:11,740 --> 00:34:22,929
bow down well they don't use it as a

00:34:21,040 --> 00:34:43,720
package manager they use it to automate

00:34:22,929 --> 00:34:46,649
the setup of their build system a lot so

00:34:43,720 --> 00:34:49,629
there's there's a start-up in Europe

00:34:46,649 --> 00:34:52,149
called 30 loops that's using salt and

00:34:49,629 --> 00:34:54,429
they actually came in and refined a lot

00:34:52,149 --> 00:34:55,809
of the pier interface because what

00:34:54,429 --> 00:34:59,020
they're doing is they've got a bunch of

00:34:55,809 --> 00:35:01,839
Django systems and these Django systems

00:34:59,020 --> 00:35:03,069
when an event happens on one then it

00:35:01,839 --> 00:35:05,470
needs to be able to trigger a

00:35:03,069 --> 00:35:07,930
modification mummification on another

00:35:05,470 --> 00:35:10,900
system in the architecture and so

00:35:07,930 --> 00:35:14,650
they're able to take in a signal from

00:35:10,900 --> 00:35:21,130
from that it gets fired on one Django

00:35:14,650 --> 00:35:22,900
server and then use it to start up to

00:35:21,130 --> 00:35:24,819
like start up a database someplace else

00:35:22,900 --> 00:35:28,359
so that they're using these arbitrary

00:35:24,819 --> 00:35:35,589
communication bridges we've also seen

00:35:28,359 --> 00:35:38,890
that done yeah that's sorry yes that's

00:35:35,589 --> 00:35:40,599
done with peer publishing most most of

00:35:38,890 --> 00:35:42,819
the really wonky things I've seen have

00:35:40,599 --> 00:35:44,589
been done with peer publishing but also

00:35:42,819 --> 00:35:47,500
also a lot of things that I really

00:35:44,589 --> 00:35:49,450
didn't expect were the ways in which

00:35:47,500 --> 00:35:49,829
people have integrated it with a lot of

00:35:49,450 --> 00:35:51,930
things

00:35:49,829 --> 00:35:53,849
infrastructures where they've come back

00:35:51,930 --> 00:35:56,640
and said that we've got we've got like

00:35:53,849 --> 00:35:59,190
this data set unlike this this giant

00:35:56,640 --> 00:36:01,019
communications thing and there there a

00:35:59,190 --> 00:36:02,609
VoIP company but all of their all their

00:36:01,019 --> 00:36:05,309
servers that they were starting up again

00:36:02,609 --> 00:36:07,289
needed this interesting data set and

00:36:05,309 --> 00:36:10,019
they were going out and grabbing it with

00:36:07,289 --> 00:36:14,190
grains and so so yeah I didn't expect

00:36:10,019 --> 00:36:20,670
that we've also got guys they're using

00:36:14,190 --> 00:36:22,380
it to to integrate to integrate part of

00:36:20,670 --> 00:36:26,489
their storage services so there's

00:36:22,380 --> 00:36:30,779
another startup that's doing storage as

00:36:26,489 --> 00:36:34,559
a service that's using salt and and what

00:36:30,779 --> 00:36:36,509
they're doing this is also a pure

00:36:34,559 --> 00:36:39,420
communication thing but what they're

00:36:36,509 --> 00:36:42,269
doing is they're firing off events in

00:36:39,420 --> 00:36:47,759
different locations to reallocate disk

00:36:42,269 --> 00:36:49,640
space for certain tasks another another

00:36:47,759 --> 00:36:52,920
thing that I thought was really cool was

00:36:49,640 --> 00:36:55,199
was are used in supercomputers there is

00:36:52,920 --> 00:36:57,449
there's a number of universities that

00:36:55,199 --> 00:36:59,969
are using salt inside of their

00:36:57,449 --> 00:37:02,099
supercomputers to manage not only

00:36:59,969 --> 00:37:08,640
setting up and maintaining their super

00:37:02,099 --> 00:37:10,829
compute nodes but also using it to to

00:37:08,640 --> 00:37:12,209
manage the soup manage the jobs that are

00:37:10,829 --> 00:37:15,199
running on a lot of their supercomputers

00:37:12,209 --> 00:37:18,539
and I really didn't see that one coming

00:37:15,199 --> 00:37:21,839
and so now we're looking into developing

00:37:18,539 --> 00:37:23,999
some some front ends that are specific

00:37:21,839 --> 00:37:28,109
to potentially the management of

00:37:23,999 --> 00:37:31,229
supercomputing that and and I've been

00:37:28,109 --> 00:37:33,269
honestly I've been surprised by I can't

00:37:31,229 --> 00:37:35,579
I can't mention all of them quite yet

00:37:33,269 --> 00:37:38,430
we're still working that out but but

00:37:35,579 --> 00:37:42,329
I've been surprised by how many very

00:37:38,430 --> 00:37:45,199
large companies are using salt and the

00:37:42,329 --> 00:37:47,759
fact that even though we're really young

00:37:45,199 --> 00:37:50,910
the chat we're being used by guys that

00:37:47,759 --> 00:37:52,680
are that are pretty big players that

00:37:50,910 --> 00:37:56,670
have come out and found us and already

00:37:52,680 --> 00:37:58,229
replaced existing infrastructure from

00:37:56,670 --> 00:38:00,749
from some of the other players in the

00:37:58,229 --> 00:38:02,990
area with us and done it very very

00:38:00,749 --> 00:38:05,570
rapidly a

00:38:02,990 --> 00:38:18,200
out of it's been done in well not not a

00:38:05,570 --> 00:38:20,960
whole lot of time yes yes the question

00:38:18,200 --> 00:38:25,369
was have I seen salt been you used to

00:38:20,960 --> 00:38:28,880
provision virtual machine house and now

00:38:25,369 --> 00:38:30,560
that's actually what I wrote it for was

00:38:28,880 --> 00:38:34,580
was to be the backplane for a cloud

00:38:30,560 --> 00:38:36,470
controller and and we've got a prototype

00:38:34,580 --> 00:38:43,400
Cloud Controller that I would not

00:38:36,470 --> 00:38:45,410
recommend using called butter that that

00:38:43,400 --> 00:38:52,160
it specifically controls kvm virtual

00:38:45,410 --> 00:38:53,869
machines and in kvm hypervisors but yeah

00:38:52,160 --> 00:38:56,990
it's something that I'd like to do down

00:38:53,869 --> 00:39:00,470
the road but we'll see we'll see what

00:38:56,990 --> 00:39:02,150
happens oh yeah definitely as the has

00:39:00,470 --> 00:39:03,590
that potential it's going to say and if

00:39:02,150 --> 00:39:05,090
you're if you're interested in working

00:39:03,590 --> 00:39:09,619
on something to that effect I'd love to

00:39:05,090 --> 00:39:12,020
collaborate on it because again that was

00:39:09,619 --> 00:39:13,820
those original intent was for was for

00:39:12,020 --> 00:39:16,250
the remote execution to manage the

00:39:13,820 --> 00:39:20,000
distribution creation migration and

00:39:16,250 --> 00:39:21,830
maintenance of virtual machines and that

00:39:20,000 --> 00:39:24,440
was the original problem set as to why i

00:39:21,830 --> 00:39:26,690
bade the remote x and y wanted it to be

00:39:24,440 --> 00:39:29,869
fast so that i could have it connected

00:39:26,690 --> 00:39:32,390
to an API that was querying the status

00:39:29,869 --> 00:39:34,550
of virtual machines it's just that the

00:39:32,390 --> 00:39:36,859
general market demand is moved in the

00:39:34,550 --> 00:39:45,640
direction of configuration management a

00:39:36,859 --> 00:39:45,640
little more then there are

00:39:47,109 --> 00:39:58,710
oh yeah and a lot of them have matured a

00:39:53,499 --> 00:40:02,049
lot since I originally wrote salt and

00:39:58,710 --> 00:40:04,900
and and which is why I'm not entirely

00:40:02,049 --> 00:40:08,489
sure that that's going to be build the

00:40:04,900 --> 00:40:11,140
long-term thing that we use it for but

00:40:08,489 --> 00:40:13,089
well within a said I do know of people

00:40:11,140 --> 00:40:16,119
and companies that have been using salt

00:40:13,089 --> 00:40:20,589
in tandem with things like CloudStack

00:40:16,119 --> 00:40:22,749
and OpenStack to manage to manage those

00:40:20,589 --> 00:40:31,059
to manage and or integrate with those

00:40:22,749 --> 00:40:33,249
cloud controllers yeah so they'll use

00:40:31,059 --> 00:40:35,559
something like OpenStack for the actual

00:40:33,249 --> 00:40:37,210
deployment of the virtual machines but

00:40:35,559 --> 00:40:38,890
then once those virtual machines come

00:40:37,210 --> 00:40:40,119
online then they check into the salt

00:40:38,890 --> 00:40:42,430
master and they finish up their

00:40:40,119 --> 00:40:44,380
configurations and then they're still

00:40:42,430 --> 00:40:48,239
able to use them to get all that live

00:40:44,380 --> 00:40:48,239
state data or run commands everywhere

00:41:04,279 --> 00:41:17,640
um at this point probably but the nice

00:41:15,660 --> 00:41:20,760
thing about about the salt approach is

00:41:17,640 --> 00:41:22,410
that you could and then we didn't talk

00:41:20,760 --> 00:41:26,400
about like the salt file server and a

00:41:22,410 --> 00:41:30,510
lot of depth ready that but but you

00:41:26,400 --> 00:41:34,010
could very very well deploy manage

00:41:30,510 --> 00:41:34,010
virtual machines with solved quickly

00:41:34,039 --> 00:41:41,069
salt well I and I think it will be and

00:41:37,650 --> 00:41:43,529
and the the ideas that I've got for

00:41:41,069 --> 00:41:45,029
building a cloud controller with salt is

00:41:43,529 --> 00:41:46,230
able to use some of the same techniques

00:41:45,029 --> 00:41:49,049
like we've talked about those virtual

00:41:46,230 --> 00:41:51,180
functions and how and how a virtual

00:41:49,049 --> 00:41:55,559
function can map function map generic

00:41:51,180 --> 00:41:56,760
functionality back one one thing that

00:41:55,559 --> 00:41:59,279
I'd really like to do with the cloud

00:41:56,760 --> 00:42:02,910
controller if it becomes a priority is

00:41:59,279 --> 00:42:07,109
to make it fundamentally generic and so

00:42:02,910 --> 00:42:08,970
that cloud controller is is able to

00:42:07,109 --> 00:42:13,140
communicate with everything from freebsd

00:42:08,970 --> 00:42:15,210
jails to openvz and kvm and zen so that

00:42:13,140 --> 00:42:16,529
so that you've got this ubiquitous Cloud

00:42:15,210 --> 00:42:18,420
Controller that would be able to

00:42:16,529 --> 00:42:22,950
seamlessly merge an infrastructure

00:42:18,420 --> 00:42:29,339
that's got freebsd jails overhearing kvm

00:42:22,950 --> 00:42:30,630
over here openvz over here not not so

00:42:29,339 --> 00:42:33,240
much that you would necessarily want to

00:42:30,630 --> 00:42:39,630
do that but so much that it's

00:42:33,240 --> 00:42:40,859
fundamentally that flexible and actually

00:42:39,630 --> 00:42:42,329
i have been in a number of situations

00:42:40,859 --> 00:42:44,579
where i felt as though it would be

00:42:42,329 --> 00:42:47,400
compelling to be able to have different

00:42:44,579 --> 00:42:49,859
container types because certain certain

00:42:47,400 --> 00:42:52,260
services in my opinion work better in

00:42:49,859 --> 00:42:55,020
VMs and certain services work better in

00:42:52,260 --> 00:42:56,970
a jail environment it depends on what

00:42:55,020 --> 00:42:59,210
you're doing and then i'd like to be

00:42:56,970 --> 00:43:01,920
able to have a system that fundamentally

00:42:59,210 --> 00:43:05,180
actually offers those sorts of

00:43:01,920 --> 00:43:05,180
flexibility flexibility

00:43:05,710 --> 00:43:20,130
okay you got nothing Oakland right right

00:43:20,640 --> 00:43:35,140
okay so you keep me busy at the airport

00:43:24,570 --> 00:43:37,480
okay okay we've actually handsome guys

00:43:35,140 --> 00:43:40,690
use it was funny we had some guys use

00:43:37,480 --> 00:43:42,310
make some custom renders at one at one

00:43:40,690 --> 00:43:45,099
of our users and they made custom

00:43:42,310 --> 00:43:48,700
renders so they could inject even more

00:43:45,099 --> 00:43:51,250
information into the renderer and they

00:43:48,700 --> 00:43:54,460
showed them to me and I said oh you want

00:43:51,250 --> 00:43:56,230
to do that and so yeah we changed part

00:43:54,460 --> 00:43:59,109
of how renders work so that it's easier

00:43:56,230 --> 00:44:12,180
to just custom inject extra data into

00:43:59,109 --> 00:44:12,180
like into the default ones uh-huh

00:44:24,880 --> 00:44:37,640
yeah yeah then yeah yeah that's

00:44:36,230 --> 00:44:39,080
definitely possible and I mean the

00:44:37,640 --> 00:44:42,530
mechanism would be along the lines of

00:44:39,080 --> 00:44:43,910
using say say was puppet the the

00:44:42,530 --> 00:44:45,680
mechanism would be along the lines of

00:44:43,910 --> 00:44:47,990
the fact that to point you when you have

00:44:45,680 --> 00:44:53,120
puppet data it actually it gets pushed

00:44:47,990 --> 00:44:55,430
back to a certain extent to to be values

00:44:53,120 --> 00:44:56,960
and objects and at that point then we

00:44:55,430 --> 00:44:59,720
would take those values and objects and

00:44:56,960 --> 00:45:04,040
then map them over to salt data

00:44:59,720 --> 00:45:06,890
structures yeah the the downside to that

00:45:04,040 --> 00:45:08,350
is that frankly a lot of guys that have

00:45:06,890 --> 00:45:15,760
switched have said that it's gone pretty

00:45:08,350 --> 00:45:15,760
pretty quick anyway oh yeah

00:45:31,920 --> 00:46:01,290
oh yeah yes now that would be nice yeah

00:45:59,700 --> 00:46:02,760
there's I think there's some technical

00:46:01,290 --> 00:46:04,109
problems but I but yeah you're right

00:46:02,760 --> 00:46:08,190
there's nothing instrument

00:46:04,109 --> 00:46:10,829
insurmountable there I'm also to your

00:46:08,190 --> 00:46:15,000
question earlier about the defined

00:46:10,829 --> 00:46:22,020
statement a lot of guys using ginger

00:46:15,000 --> 00:46:25,190
micros I'm not going to argue with you

00:46:22,020 --> 00:46:25,190
but yeah

00:46:38,620 --> 00:46:50,800
still feed out in terms of utility like

00:46:47,630 --> 00:46:50,800
to see something like where I can

00:47:02,160 --> 00:47:15,809
okay all right we good oh please

00:47:11,400 --> 00:47:15,809
sufficiently satisfied hopefully

00:47:43,980 --> 00:47:46,040
you

00:47:49,260 --> 00:47:54,040
when we created asterisk over a decade

00:47:51,970 --> 00:47:56,290
ago we could not have imagined that

00:47:54,040 --> 00:47:58,480
asterisk would not only become the most

00:47:56,290 --> 00:48:00,610
widely adopted open source communication

00:47:58,480 --> 00:48:02,650
software on the planet but that it would

00:48:00,610 --> 00:48:05,170
impact the entire industry in the way

00:48:02,650 --> 00:48:07,150
that it has today asterisk has found its

00:48:05,170 --> 00:48:09,790
way in the more than 170 countries and

00:48:07,150 --> 00:48:11,740
virtually every fortune 1000 company the

00:48:09,790 --> 00:48:13,840
success of asterisk has enabled a

00:48:11,740 --> 00:48:15,250
transition of power from the hands of

00:48:13,840 --> 00:48:17,500
the traditional proprietary phone

00:48:15,250 --> 00:48:19,900
vendors into the hands of the users and

00:48:17,500 --> 00:48:21,850
administrators of phone systems using

00:48:19,900 --> 00:48:23,080
this power our customers have created

00:48:21,850 --> 00:48:25,030
all sorts of business changing

00:48:23,080 --> 00:48:26,860
applications from small office phone

00:48:25,030 --> 00:48:29,380
systems to mission-critical call centers

00:48:26,860 --> 00:48:31,000
the international carrier networks in

00:48:29,380 --> 00:48:32,770
fact there's even an entire country

00:48:31,000 --> 00:48:35,380
those communications infrastructure runs

00:48:32,770 --> 00:48:37,300
on esters the gym has always been about

00:48:35,380 --> 00:48:39,010
creating technology that expands

00:48:37,300 --> 00:48:41,170
communications capabilities in ways that

00:48:39,010 --> 00:48:42,370
we could never have imagined and that's

00:48:41,170 --> 00:48:45,130
part of what's game-changing about

00:48:42,370 --> 00:48:47,470
digium today we're doing it again this

00:48:45,130 --> 00:48:49,570
time by introducing a new family of HD

00:48:47,470 --> 00:48:51,670
IP phones that extends control of the

00:48:49,570 --> 00:48:53,440
user all the way to the desktop the

00:48:51,670 --> 00:48:55,150
launch of these new products represents

00:48:53,440 --> 00:48:57,250
the next phase indigenous history of

00:48:55,150 --> 00:48:59,650
innovation these are the first and only

00:48:57,250 --> 00:49:01,360
IP phones designed to fully leverage the

00:48:59,650 --> 00:49:02,890
power of estrus when we first discussed

00:49:01,360 --> 00:49:04,930
our expectations for building a family

00:49:02,890 --> 00:49:07,090
of phones for use with asterisk our

00:49:04,930 --> 00:49:08,830
requirements were pretty simple we asked

00:49:07,090 --> 00:49:10,480
the team to build the phones such that

00:49:08,830 --> 00:49:12,670
they were easy to install integrate

00:49:10,480 --> 00:49:14,500
provision and use I think you'll soon

00:49:12,670 --> 00:49:17,080
agree our engineers have delivered on

00:49:14,500 --> 00:49:18,700
that goal user feedback is validating

00:49:17,080 --> 00:49:20,830
that when it comes to operation with

00:49:18,700 --> 00:49:23,230
astro space systems including our own

00:49:20,830 --> 00:49:25,810
switchvox based product these are the

00:49:23,230 --> 00:49:27,130
easiest to use best integrated most

00:49:25,810 --> 00:49:29,710
interoperable products on the market

00:49:27,130 --> 00:49:31,710
today the digitally phones will

00:49:29,710 --> 00:49:33,760
initially include three IP des hommes

00:49:31,710 --> 00:49:35,710
uniquely designed to complement any

00:49:33,760 --> 00:49:37,570
asterisk or switch box based solution

00:49:35,710 --> 00:49:40,240
these phones are different for a number

00:49:37,570 --> 00:49:42,880
of reasons first there is clue sively

00:49:40,240 --> 00:49:44,320
designed for use with esters secondly

00:49:42,880 --> 00:49:45,930
we've made it really easy to

00:49:44,320 --> 00:49:48,310
autodiscover and provision the phones

00:49:45,930 --> 00:49:50,410
next we've made it easy for the phones

00:49:48,310 --> 00:49:52,470
to access information inside of asterisk

00:49:50,410 --> 00:49:54,960
allowing tight coupling

00:49:52,470 --> 00:49:56,849
allocation and the phone additionally

00:49:54,960 --> 00:49:59,160
we've created an applications engine

00:49:56,849 --> 00:50:01,349
that allows users and developers to

00:49:59,160 --> 00:50:04,080
create and run their own apps on the

00:50:01,349 --> 00:50:06,060
phone and finally we've done all of this

00:50:04,080 --> 00:50:07,890
at a very compelling price point at

00:50:06,060 --> 00:50:10,109
digium we're always thinking of ways to

00:50:07,890 --> 00:50:12,480
give our customers the best value in

00:50:10,109 --> 00:50:13,859
business phone systems and also give

00:50:12,480 --> 00:50:15,869
them the power to create their own

00:50:13,859 --> 00:50:17,670
solutions or any communications

00:50:15,869 --> 00:50:19,349
challenge well continue to push the

00:50:17,670 --> 00:50:21,119
boundaries not only to make Astra's

00:50:19,349 --> 00:50:22,980
cooler faster more technologically

00:50:21,119 --> 00:50:25,440
feature-rich but to make asterisk and

00:50:22,980 --> 00:50:26,760
communications even easier and together

00:50:25,440 --> 00:50:29,869
we'll change the way the world

00:50:26,760 --> 00:50:29,869
communication again

00:50:40,640 --> 00:50:47,460
how's that sigh every way this is the

00:50:44,250 --> 00:50:49,619
way to better utilize all your resources

00:50:47,460 --> 00:50:53,070
and it makes managing all your resources

00:50:49,619 --> 00:50:56,930
pretty easy all of the innovation is

00:50:53,070 --> 00:51:00,390
happening in open source the

00:50:56,930 --> 00:51:02,250
collaborative nature and of the you know

00:51:00,390 --> 00:51:04,349
of the community and the speed at which

00:51:02,250 --> 00:51:06,329
these are these you know these these

00:51:04,349 --> 00:51:08,640
deficiencies these bugs are getting

00:51:06,329 --> 00:51:11,250
discovered and then fixed is the thing

00:51:08,640 --> 00:51:13,950
that really shows the power of the you

00:51:11,250 --> 00:51:15,570
know of the open source community it is

00:51:13,950 --> 00:51:19,770
global and it's definitely because of

00:51:15,570 --> 00:51:26,130
the users community people are extremely

00:51:19,770 --> 00:51:27,869
friendly and almost ready to help if you

00:51:26,130 --> 00:51:29,300
go an entire see any day you'll see

00:51:27,869 --> 00:51:31,440
these guys helping each other out and

00:51:29,300 --> 00:51:34,320
they're all doing it like in a selfless

00:51:31,440 --> 00:51:36,150
manner the product is transparent for

00:51:34,320 --> 00:51:40,349
everyone everyone can look at the code

00:51:36,150 --> 00:51:42,390
base everyone can see how CloudStack is

00:51:40,349 --> 00:51:48,270
being built nothing nothing is

00:51:42,390 --> 00:51:50,910
proprietary everything is open in many

00:51:48,270 --> 00:51:55,109
ways it's absolutely vital to the the

00:51:50,910 --> 00:51:58,859
unborn helped I'll stack the most

00:51:55,109 --> 00:52:02,720
exciting event in recent memory for me

00:51:58,859 --> 00:52:05,420
was our first developer boot camp

00:52:02,720 --> 00:52:08,060
and our call gave people activity two

00:52:05,420 --> 00:52:12,020
weeks notice to come attend I was

00:52:08,060 --> 00:52:16,190
expecting 25 or 30 people so we ended up

00:52:12,020 --> 00:52:19,040
with 87 people and had to go get more

00:52:16,190 --> 00:52:21,560
chairs in the room twice everything

00:52:19,040 --> 00:52:24,830
within cloud computing is commodity and

00:52:21,560 --> 00:52:27,890
is open source and so I don't think that

00:52:24,830 --> 00:52:29,810
you will you'll see anywhere where open

00:52:27,890 --> 00:52:33,260
sources not pervasive in cloud computing

00:52:29,810 --> 00:52:35,420
and so i think it's i think it's an

00:52:33,260 --> 00:52:36,920
assumption i think when you talk about

00:52:35,420 --> 00:52:41,750
cloud computing you're really talking

00:52:36,920 --> 00:52:44,030
about open source cloud computing cloud

00:52:41,750 --> 00:52:46,790
sac is a robust solution for large

00:52:44,030 --> 00:52:49,190
deployments you'll have dozens of data

00:52:46,790 --> 00:52:53,150
centers and thousands of servers in each

00:52:49,190 --> 00:52:56,480
data center is these hardware is going

00:52:53,150 --> 00:52:59,690
to fail and CloudStack is designed to

00:52:56,480 --> 00:53:02,180
handle number one that mass scale number

00:52:59,690 --> 00:53:04,910
two it's designed to handle the failure

00:53:02,180 --> 00:53:07,160
that inevitably happens in large

00:53:04,910 --> 00:53:10,970
deployments we started working on

00:53:07,160 --> 00:53:14,330
contact over four years ago and it was

00:53:10,970 --> 00:53:17,000
the original set of people working on it

00:53:14,330 --> 00:53:21,109
add a background of delivering software

00:53:17,000 --> 00:53:25,339
telcos and service providers lots of QA

00:53:21,109 --> 00:53:28,970
lots of users actually using it high

00:53:25,339 --> 00:53:32,030
availability is a key feature multiple

00:53:28,970 --> 00:53:34,070
hypervisors support different network

00:53:32,030 --> 00:53:36,740
models you can pick up whatever suits

00:53:34,070 --> 00:53:38,990
you better well step management server

00:53:36,740 --> 00:53:42,680
can be deployed in different physical

00:53:38,990 --> 00:53:44,359
machines it definitely has a huge

00:53:42,680 --> 00:53:49,310
footprint it's being deployed everywhere

00:53:44,359 --> 00:53:51,920
there's a major movie studio that they

00:53:49,310 --> 00:53:55,220
were using cloudstack they were using it

00:53:51,920 --> 00:53:57,200
to transcode video and i thought that

00:53:55,220 --> 00:53:58,849
was terribly fascinating what i found

00:53:57,200 --> 00:54:02,119
more fascinating is what they did during

00:53:58,849 --> 00:54:04,880
lunch where they would spin up you know

00:54:02,119 --> 00:54:06,260
50 or 60 game servers then as soon as

00:54:04,880 --> 00:54:08,970
lunch was over they would destroy all

00:54:06,260 --> 00:54:12,370
the instances and go back to doing

00:54:08,970 --> 00:54:13,900
cloudstack is vast it touches so many

00:54:12,370 --> 00:54:15,760
different aspects and there's no one

00:54:13,900 --> 00:54:18,720
person that's kind of like a master of

00:54:15,760 --> 00:54:22,180
all those realms I think CloudStack as a

00:54:18,720 --> 00:54:24,430
project is going to be one of the

00:54:22,180 --> 00:54:28,510
leaders simply because it's some of the

00:54:24,430 --> 00:54:33,940
most feature pulling and and robust

00:54:28,510 --> 00:54:36,840
platforms out they were Adam senior

00:54:33,940 --> 00:54:36,840
living through the clouds dag

00:54:49,640 --> 00:54:51,700

YouTube URL: https://www.youtube.com/watch?v=v7rsNGv8WZU


