Title: 2011 SouthEast LinuxFest - Gerald Carter - Likewise Open:  A Platform for Cross Platform
Publication date: 2012-02-26
Playlist: 2011 SouthEast LinuxFest
Description: 
	2011 SouthEast LinuxFest - Gerald Carter - Likewise Open:  A Platform for Cross Platform

This video is licensed under Creative Commons Attribution 3.0 Unported License.
Captions: 
	00:00:01,129 --> 00:00:07,290
the following presentation was recorded

00:00:04,200 --> 00:00:09,870
at the 2011 southeast linux fest in

00:00:07,290 --> 00:00:11,370
Spartanburg South Carolina it is

00:00:09,870 --> 00:00:14,190
licensed under a creative commons

00:00:11,370 --> 00:00:18,390
license for more information about the

00:00:14,190 --> 00:00:21,840
southeast linux fest visit www southeast

00:00:18,390 --> 00:00:23,070
linux fest org the southeast linux fest

00:00:21,840 --> 00:00:26,430
would like to thank the following

00:00:23,070 --> 00:00:28,789
diamond and platinum sponsors in 2011

00:00:26,430 --> 00:00:32,309
for helping make these videos possible

00:00:28,789 --> 00:00:34,380
acted like this is like likewise open we

00:00:32,309 --> 00:00:35,700
didn't show up here by default or just

00:00:34,380 --> 00:00:39,480
looking for a place to plug in laptops

00:00:35,700 --> 00:00:41,129
yeah okay yeah it's always kind of a

00:00:39,480 --> 00:00:43,950
little bit of a toss-up I mean how

00:00:41,129 --> 00:00:47,100
interested people will be at this it's

00:00:43,950 --> 00:00:48,690
it's interesting so to me it is and so

00:00:47,100 --> 00:00:51,930
what I kind of wanted to do I'm a

00:00:48,690 --> 00:00:53,219
developer by by trade currently I'm

00:00:51,930 --> 00:00:54,180
director of engineering it likewise I

00:00:53,219 --> 00:00:57,660
give a little bit more background on

00:00:54,180 --> 00:01:00,120
myself but essentially what we've

00:00:57,660 --> 00:01:01,800
developed it likewise is a Microsoft

00:01:00,120 --> 00:01:04,170
compatible distributed distributed

00:01:01,800 --> 00:01:06,030
computing platform and it's much broader

00:01:04,170 --> 00:01:07,799
than just you know being able to login

00:01:06,030 --> 00:01:10,680
using your Active Directory credentials

00:01:07,799 --> 00:01:12,299
you know on a Mac box or in the linux

00:01:10,680 --> 00:01:14,400
box or whatever I mean it's actually a

00:01:12,299 --> 00:01:17,450
development platform so you've got you

00:01:14,400 --> 00:01:19,950
know complete you know Microsoft IDL

00:01:17,450 --> 00:01:21,150
compatible DCR pc runtime there's a lot

00:01:19,950 --> 00:01:24,509
of cool stuff that you can do with it

00:01:21,150 --> 00:01:27,689
but so it's primarily going to be kind

00:01:24,509 --> 00:01:30,090
of a little bit of a development talk so

00:01:27,689 --> 00:01:32,220
I guess I'm kind of curious in terms of

00:01:30,090 --> 00:01:34,829
a background so how many people are more

00:01:32,220 --> 00:01:36,000
on the administration side all right how

00:01:34,829 --> 00:01:38,009
many people are more on the development

00:01:36,000 --> 00:01:39,600
side okay so what kind of apps do you

00:01:38,009 --> 00:01:47,610
guys working what did what level of the

00:01:39,600 --> 00:01:48,990
sack systems web middle systems sweet we

00:01:47,610 --> 00:01:51,869
should get t-shirt to print it up and

00:01:48,990 --> 00:01:53,220
it's like a dying breed you know all

00:01:51,869 --> 00:01:55,020
right so these are the plans for the day

00:01:53,220 --> 00:01:58,290
I want to go over a little bit of the

00:01:55,020 --> 00:01:59,640
likewise ecology just in terms of you

00:01:58,290 --> 00:02:03,000
know what is likewise open the project

00:01:59,640 --> 00:02:04,439
versus likewise open the product go over

00:02:03,000 --> 00:02:06,390
sort of an architectural overview of the

00:02:04,439 --> 00:02:07,979
platform itself individual components

00:02:06,390 --> 00:02:09,840
things like that when you give a demo of

00:02:07,979 --> 00:02:12,840
likewise open just in terms of the end

00:02:09,840 --> 00:02:13,500
user experience of it at some point you

00:02:12,840 --> 00:02:15,390
know I can look at the

00:02:13,500 --> 00:02:18,150
sip server I guess are you guys more

00:02:15,390 --> 00:02:22,860
interested in file storage or in

00:02:18,150 --> 00:02:24,960
identity identity identities kind of the

00:02:22,860 --> 00:02:26,340
building block so all right that's fine

00:02:24,960 --> 00:02:27,240
we'll focus a lot on that I want to look

00:02:26,340 --> 00:02:29,760
some of the integrated authentication

00:02:27,240 --> 00:02:32,820
api's in terms of because it is a

00:02:29,760 --> 00:02:34,050
platform we don't have what you would

00:02:32,820 --> 00:02:35,670
consider be sort of a formalized

00:02:34,050 --> 00:02:38,459
software development kit in terms of

00:02:35,670 --> 00:02:41,550
documentation but we do stress very

00:02:38,459 --> 00:02:44,670
heavily public interfaces public header

00:02:41,550 --> 00:02:47,700
files and client-side libraries we've

00:02:44,670 --> 00:02:49,739
consolidated a lot on GSS so the

00:02:47,700 --> 00:02:52,530
integrated security model essentially we

00:02:49,739 --> 00:02:54,830
provide an Intel MSSP mechanism for the

00:02:52,530 --> 00:02:57,510
SP nego stack in the MIT curb 5 code and

00:02:54,830 --> 00:02:59,670
and so essentially just by calling GSS

00:02:57,510 --> 00:03:02,190
except security context then you get

00:02:59,670 --> 00:03:03,780
ntlm you get curb 5 I mean it just kind

00:03:02,190 --> 00:03:05,370
of all works it's really great because

00:03:03,780 --> 00:03:08,310
the authentication code in our file

00:03:05,370 --> 00:03:11,160
server stack is about 20 lines of code I

00:03:08,310 --> 00:03:12,420
mean it's really really tiny and then

00:03:11,160 --> 00:03:13,680
obviously my other goal for today's

00:03:12,420 --> 00:03:15,510
enough to do something is going to me up

00:03:13,680 --> 00:03:17,400
on YouTube and you know haunt me for the

00:03:15,510 --> 00:03:19,350
rest of my life the unspoken thing is

00:03:17,400 --> 00:03:21,269
don't suck and be funny right so we'll

00:03:19,350 --> 00:03:25,170
see how well I do you guys can write me

00:03:21,269 --> 00:03:27,180
on that I'm notorious for bad jokes just

00:03:25,170 --> 00:03:28,590
to keep you awake so if I see anybody

00:03:27,180 --> 00:03:30,060
coming one to one of those little red

00:03:28,590 --> 00:03:31,890
spots on their forehead because they

00:03:30,060 --> 00:03:34,290
leaned over a little bit too long I'll

00:03:31,890 --> 00:03:35,580
let you know so my backgrounds in

00:03:34,290 --> 00:03:38,700
academic CES I've been in the industry

00:03:35,580 --> 00:03:42,360
about 11 plus years I've done a lot of

00:03:38,700 --> 00:03:45,660
systems administration in been involved

00:03:42,360 --> 00:03:46,799
in systems administration community you

00:03:45,660 --> 00:03:50,160
know my Master's work was around

00:03:46,799 --> 00:03:53,220
compilers I work at the systems layer I

00:03:50,160 --> 00:03:55,470
worked on samba for about 11 years so my

00:03:53,220 --> 00:03:59,760
apologies for any pain that I caused you

00:03:55,470 --> 00:04:01,950
guys I left Samba in 2009 actually

00:03:59,760 --> 00:04:03,840
because it was at that point that like

00:04:01,950 --> 00:04:06,030
was it was actually I'm building a new

00:04:03,840 --> 00:04:09,750
sip stack and it seemed to be why work

00:04:06,030 --> 00:04:10,829
on two different sip servers anyways so

00:04:09,750 --> 00:04:12,660
I've done lots of different things I

00:04:10,829 --> 00:04:14,790
like to run I like to play music piano

00:04:12,660 --> 00:04:16,680
guitar started off on drums have a drum

00:04:14,790 --> 00:04:19,350
set in my office at the house and

00:04:16,680 --> 00:04:22,560
Alabama a little bit if you haven't

00:04:19,350 --> 00:04:24,539
heard likewise likewise the open-source

00:04:22,560 --> 00:04:25,940
efforts are the project did we do is

00:04:24,539 --> 00:04:31,220
often termed

00:04:25,940 --> 00:04:33,380
core it's a little bit of a misnomer we

00:04:31,220 --> 00:04:34,940
have a single source code base and we've

00:04:33,380 --> 00:04:36,380
released a large portion of that the

00:04:34,940 --> 00:04:39,050
core identity framework the core

00:04:36,380 --> 00:04:43,550
platform in the sift stack under GPL

00:04:39,050 --> 00:04:44,840
ldbl licenses so free to use it I to be

00:04:43,550 --> 00:04:46,670
honest at this point I would have really

00:04:44,840 --> 00:04:48,590
sit under BSD if I could but we needed

00:04:46,670 --> 00:04:50,780
to protect the IP and make it open and

00:04:48,590 --> 00:04:52,250
you know available for people to use so

00:04:50,780 --> 00:04:56,270
likewise itself is based out of Bellevue

00:04:52,250 --> 00:04:58,700
Washington I myself and based out of a

00:04:56,270 --> 00:05:01,490
small town in Alabama near Auburn so I

00:04:58,700 --> 00:05:04,550
actually telecommute work there I manage

00:05:01,490 --> 00:05:08,300
about at this point about ten folks on

00:05:04,550 --> 00:05:10,040
our on our engineering team just to give

00:05:08,300 --> 00:05:13,910
you another idea when I talk about

00:05:10,040 --> 00:05:15,440
likewise as a platform it really is a

00:05:13,910 --> 00:05:17,390
platform there's not something specific

00:05:15,440 --> 00:05:20,060
to Linux this is something that's been

00:05:17,390 --> 00:05:24,650
integrated in all types of devices it

00:05:20,060 --> 00:05:27,740
scales up and it scales down so we've

00:05:24,650 --> 00:05:30,020
we've run inside hypervisors we're

00:05:27,740 --> 00:05:34,370
actually baked into Zen we're baked into

00:05:30,020 --> 00:05:36,620
vmware esxi for dot one desktops and

00:05:34,370 --> 00:05:38,270
servers obviously we both have you know

00:05:36,620 --> 00:05:40,430
we have an open product we have a

00:05:38,270 --> 00:05:43,480
commercial product network devices

00:05:40,430 --> 00:05:45,950
network accelerators storage gateways

00:05:43,480 --> 00:05:47,660
printers you know all kinds of stuff so

00:05:45,950 --> 00:05:50,210
it is a very portable it is a very

00:05:47,660 --> 00:05:53,570
portable platform we actually build and

00:05:50,210 --> 00:05:59,300
compiling it a you know across hp-ux AIX

00:05:53,570 --> 00:06:03,740
solaris freebsd mac linux you know all

00:05:59,300 --> 00:06:05,180
itanium powerpc and intel variants I'd

00:06:03,740 --> 00:06:08,210
rather just focus on entail it's much

00:06:05,180 --> 00:06:10,520
easier but anyways all right so a little

00:06:08,210 --> 00:06:13,430
bit of background first of all the git

00:06:10,520 --> 00:06:16,430
repository is located up on this URL top

00:06:13,430 --> 00:06:18,110
of the screen to avoid some confusion

00:06:16,430 --> 00:06:20,060
there's something called likewise open

00:06:18,110 --> 00:06:22,930
the project which is basically just an

00:06:20,060 --> 00:06:26,960
umbrella project that likewise releases

00:06:22,930 --> 00:06:28,910
and I kind of sort of manage in own it's

00:06:26,960 --> 00:06:30,440
an umbrella project for anything that

00:06:28,910 --> 00:06:33,650
has to do with interoperability that we

00:06:30,440 --> 00:06:34,970
can push out open source ok there's

00:06:33,650 --> 00:06:37,100
something called likewise open the

00:06:34,970 --> 00:06:38,810
product which is actually this you know

00:06:37,100 --> 00:06:39,920
thing that gets you a GUI on your

00:06:38,810 --> 00:06:41,270
desktop that says join

00:06:39,920 --> 00:06:43,310
into active directory and we actually

00:06:41,270 --> 00:06:44,870
release packages on that then there's

00:06:43,310 --> 00:06:46,730
something called likewise identity

00:06:44,870 --> 00:06:49,220
services which is essentially just the

00:06:46,730 --> 00:06:51,320
identity piece and then there's like why

00:06:49,220 --> 00:06:52,550
storage services which is the the file

00:06:51,320 --> 00:06:54,410
server stack these are basically

00:06:52,550 --> 00:06:56,480
vertical offerings on our horizontal

00:06:54,410 --> 00:06:58,190
platform really that's all it is but

00:06:56,480 --> 00:06:59,830
likewise the likewise platform

00:06:58,190 --> 00:07:02,030
everything that's in the git repository

00:06:59,830 --> 00:07:04,760
encompasses pretty much everything on

00:07:02,030 --> 00:07:08,720
the screen okay so it's it's kind of all

00:07:04,760 --> 00:07:11,390
there we did recently add an

00:07:08,720 --> 00:07:12,890
announcement for NFS v3 support in our

00:07:11,390 --> 00:07:14,900
storage stack that's actually commercial

00:07:12,890 --> 00:07:18,100
only so ignore that and in to be

00:07:14,900 --> 00:07:20,870
completely transparent i'm going to try

00:07:18,100 --> 00:07:22,940
except for when necessary to distinguish

00:07:20,870 --> 00:07:24,410
between different components to not talk

00:07:22,940 --> 00:07:26,510
about commercial stuff at all so

00:07:24,410 --> 00:07:31,790
everything that we talked about is part

00:07:26,510 --> 00:07:35,060
of the the open core platform okay okay

00:07:31,790 --> 00:07:36,710
so I want to talk about architecture I

00:07:35,060 --> 00:07:37,940
want to talk about what's available what

00:07:36,710 --> 00:07:40,760
the individual pieces are one of the

00:07:37,940 --> 00:07:42,020
things I'm very proud of is the this

00:07:40,760 --> 00:07:45,380
sort of the very modular architecture

00:07:42,020 --> 00:07:47,590
that we have it's easy to explain it's

00:07:45,380 --> 00:07:50,090
easy to talk about it's easy to point to

00:07:47,590 --> 00:07:51,770
it's it's I think great from a

00:07:50,090 --> 00:07:55,550
development point of view because we do

00:07:51,770 --> 00:07:57,980
focus on process isolation we do focus

00:07:55,550 --> 00:07:59,270
on you know well-defined interfaces not

00:07:57,980 --> 00:08:02,240
going to claim that we're perfect it's

00:07:59,270 --> 00:08:04,610
software God knows it's not but so I

00:08:02,240 --> 00:08:06,980
want to focus on essentially the the

00:08:04,610 --> 00:08:09,020
architecture that we have okay poor

00:08:06,980 --> 00:08:10,760
platform the i/o manager the Security

00:08:09,020 --> 00:08:12,350
Authority and everything down is all

00:08:10,760 --> 00:08:15,170
included in the likewise open platform

00:08:12,350 --> 00:08:16,550
okay these bottom level components these

00:08:15,170 --> 00:08:19,370
are what I'm going to call sort of core

00:08:16,550 --> 00:08:21,230
foundational pieces right it's the

00:08:19,370 --> 00:08:23,870
Security Authority which is what we call

00:08:21,230 --> 00:08:26,420
elsass and the i/o manager which is el

00:08:23,870 --> 00:08:27,980
de baño which are really the core heart

00:08:26,420 --> 00:08:31,250
of the functionality of the system

00:08:27,980 --> 00:08:32,780
things like the IPC communication

00:08:31,250 --> 00:08:34,010
handles all the marshalling and then

00:08:32,780 --> 00:08:35,720
marshalling of requests going to car

00:08:34,010 --> 00:08:38,180
scenic so many sockets between processes

00:08:35,720 --> 00:08:40,479
in the system itself it's a sort of

00:08:38,180 --> 00:08:43,280
lightweight serialization protocol okay

00:08:40,479 --> 00:08:45,560
things like the domain like the the name

00:08:43,280 --> 00:08:47,750
resolver is a single service that allows

00:08:45,560 --> 00:08:49,070
any process running on the system to be

00:08:47,750 --> 00:08:50,810
able to locate the appropriate domain

00:08:49,070 --> 00:08:53,360
controller to talk to it handles all the

00:08:50,810 --> 00:08:53,720
knowledge of AD sykes of topology it

00:08:53,360 --> 00:08:56,449
handles

00:08:53,720 --> 00:08:59,899
all the knowledge of you know things

00:08:56,449 --> 00:09:01,220
like you know looking up and finding the

00:08:59,899 --> 00:09:02,959
most responsive and closest domain

00:09:01,220 --> 00:09:04,490
controller it also handles things like

00:09:02,959 --> 00:09:06,470
riding out configuration files for

00:09:04,490 --> 00:09:10,819
integration with third-party apps right

00:09:06,470 --> 00:09:14,750
to make things like openssh that's got

00:09:10,819 --> 00:09:16,639
gssapi authentication enabled it handles

00:09:14,750 --> 00:09:20,420
writing out the configuration files are

00:09:16,639 --> 00:09:24,230
the the curb 5.com for configuring the

00:09:20,420 --> 00:09:28,610
preferred DC locations so that when sshd

00:09:24,230 --> 00:09:30,860
wants to you know obtain well I'm trying

00:09:28,610 --> 00:09:32,300
to think of a good example it's more of

00:09:30,860 --> 00:09:33,649
an ssh client if you so if you're

00:09:32,300 --> 00:09:35,779
logging in you want to get a service

00:09:33,649 --> 00:09:38,300
ticket to be able to access some remote

00:09:35,779 --> 00:09:40,579
Kerberos application then it's actually

00:09:38,300 --> 00:09:42,589
got the the dc's listed in order as

00:09:40,579 --> 00:09:44,629
determined by the resolver to what the

00:09:42,589 --> 00:09:45,920
most preferable one to talk to is so

00:09:44,629 --> 00:09:47,420
it's a central place to be able to get

00:09:45,920 --> 00:09:50,480
that the service manager is sort of a

00:09:47,420 --> 00:09:54,860
meta service management and monitoring

00:09:50,480 --> 00:09:56,899
framework DC RPC I talked about our DC

00:09:54,860 --> 00:09:58,639
RPC runtime this is middle compatible so

00:09:56,899 --> 00:10:00,559
it is a good way to be able to do you

00:09:58,639 --> 00:10:05,899
know to port applications from windows

00:10:00,559 --> 00:10:07,519
over to linux just rebuild the little

00:10:05,899 --> 00:10:08,870
stubs and then sort of relink your

00:10:07,519 --> 00:10:11,569
application you pretty pretty good to go

00:10:08,870 --> 00:10:13,579
we have a central configuration store we

00:10:11,569 --> 00:10:15,079
call it the registry you can think of it

00:10:13,579 --> 00:10:16,850
as a trusted service with a sequel like

00:10:15,079 --> 00:10:19,550
back in ok I'll show you some examples

00:10:16,850 --> 00:10:25,579
of that everything's multi-threaded

00:10:19,550 --> 00:10:27,319
heavily threaded thread-safe common

00:10:25,579 --> 00:10:28,790
security model basically across

00:10:27,319 --> 00:10:31,550
everything i'll talk a little bit about

00:10:28,790 --> 00:10:35,600
that towards the end of the talk and

00:10:31,550 --> 00:10:38,269
then services are isolated they

00:10:35,600 --> 00:10:40,069
communicate across this well-defined IPC

00:10:38,269 --> 00:10:41,959
bus we'll talk more about that as well

00:10:40,069 --> 00:10:44,089
and kind of go into to each individual

00:10:41,959 --> 00:10:46,579
detail right how many people have never

00:10:44,089 --> 00:10:49,490
seen or sort of read through the code in

00:10:46,579 --> 00:10:55,490
the likewise platform at all okay all

00:10:49,490 --> 00:10:57,410
right so what I'll do is I mean first

00:10:55,490 --> 00:10:59,329
just to get sort of a level set for

00:10:57,410 --> 00:11:02,449
everybody give you a quick demo a quick

00:10:59,329 --> 00:11:04,689
demo of likewise open on Ubuntu 1104

00:11:02,449 --> 00:11:07,400
it's included in the main repositories

00:11:04,689 --> 00:11:09,260
I'll show you to show you from the end

00:11:07,400 --> 00:11:11,420
there's perspective and then we can talk

00:11:09,260 --> 00:11:14,750
about actually what's what's the

00:11:11,420 --> 00:11:16,610
plumbing under the sink right so i'll go

00:11:14,750 --> 00:11:18,710
ahead and swap back down here i've got a

00:11:16,610 --> 00:11:20,120
couple of VMS running let me get rid of

00:11:18,710 --> 00:11:25,100
a couple of these windows that aren't in

00:11:20,120 --> 00:11:27,260
use so I've got a Windows 2008 DC

00:11:25,100 --> 00:11:33,260
running in one VM and then I've got an

00:11:27,260 --> 00:11:34,730
bun to 1104 desktop in another so the

00:11:33,260 --> 00:11:37,120
packages there's a likewise open

00:11:34,730 --> 00:11:41,480
packages of likewise open gooey package

00:11:37,120 --> 00:11:43,640
and I'll just launched the sort of

00:11:41,480 --> 00:11:45,890
graphical join my machine to this domain

00:11:43,640 --> 00:11:48,050
there's some options that you can tweak

00:11:45,890 --> 00:11:50,150
here I mean as a systems administrator I

00:11:48,050 --> 00:11:52,370
mean you may want to you know force

00:11:50,150 --> 00:11:53,570
people to you know preface their

00:11:52,370 --> 00:11:55,370
username when they log in with the name

00:11:53,570 --> 00:11:57,950
of the domain or some variant thereof or

00:11:55,370 --> 00:12:01,870
you can just kind of assume it I'm kind

00:11:57,950 --> 00:12:05,030
of a purist so I never I never use that

00:12:01,870 --> 00:12:11,840
so name of mine domain razor that

00:12:05,030 --> 00:12:14,120
likewise open org and the name of my

00:12:11,840 --> 00:12:16,120
computer name is is snappy and I'm just

00:12:14,120 --> 00:12:18,500
going to say join this to the domain and

00:12:16,120 --> 00:12:20,270
don't you love this progress bar because

00:12:18,500 --> 00:12:21,890
it's not done anything and then all of a

00:12:20,270 --> 00:12:25,820
sudden it's done it's like no progress

00:12:21,890 --> 00:12:28,070
at all so at this point we're joined

00:12:25,820 --> 00:12:31,460
into active directory if I go back and

00:12:28,070 --> 00:12:34,250
look in over here in administrative

00:12:31,460 --> 00:12:40,730
tools in a duck will get a computer

00:12:34,250 --> 00:12:46,450
object that shows up probably should

00:12:40,730 --> 00:12:51,350
have brought this up already computers

00:12:46,450 --> 00:12:55,490
or snappy there's snappy look at the

00:12:51,350 --> 00:12:58,060
properties phone behold operating system

00:12:55,490 --> 00:13:01,790
says likewise open 60 flu flu flu

00:12:58,060 --> 00:13:03,620
version numbers 1104 from a bun to so I

00:13:01,790 --> 00:13:09,220
mean there you go there's the computer

00:13:03,620 --> 00:13:12,220
object in ad it's also gone through and

00:13:09,220 --> 00:13:12,220
see

00:13:13,630 --> 00:13:27,800
all right can you guys is that font big

00:13:16,100 --> 00:13:33,170
enough okay so if you've ever done any

00:13:27,800 --> 00:13:35,960
Kerberos configuration wow this is a

00:13:33,170 --> 00:13:37,640
really big file it's set up a lot of

00:13:35,960 --> 00:13:39,080
things some of this is for smart card

00:13:37,640 --> 00:13:40,610
integration which is actually part of

00:13:39,080 --> 00:13:42,860
the the enterprise product but it sets

00:13:40,610 --> 00:13:44,390
up some of the PK and yet utilities and

00:13:42,860 --> 00:13:45,590
requirements that are there the default

00:13:44,390 --> 00:13:47,450
realm set up to be the name of the

00:13:45,590 --> 00:13:49,730
Active Directory domain that I joined

00:13:47,450 --> 00:13:51,350
sets up the default encryption types the

00:13:49,730 --> 00:13:54,890
preferred encryption types to be those

00:13:51,350 --> 00:13:57,740
specific inks that work with with active

00:13:54,890 --> 00:13:59,120
directory it's also done at least in the

00:13:57,740 --> 00:14:01,610
end user product or at least and

00:13:59,120 --> 00:14:04,610
likewise open the desktop integration

00:14:01,610 --> 00:14:06,770
product is also set up a name service

00:14:04,610 --> 00:14:09,650
switch module to integrate in with the

00:14:06,770 --> 00:14:11,630
NSS libraries so for example if I wanted

00:14:09,650 --> 00:14:15,680
to say you know show me the information

00:14:11,630 --> 00:14:18,200
about a user called G Carter it's going

00:14:15,680 --> 00:14:20,330
to go through and it'll look up and pull

00:14:18,200 --> 00:14:23,870
all the information about that user from

00:14:20,330 --> 00:14:25,490
Active Directory and then and then give

00:14:23,870 --> 00:14:28,040
you those listings of groups after maps

00:14:25,490 --> 00:14:32,480
those ad groups back into to unix

00:14:28,040 --> 00:14:41,680
identities let me do this like clear the

00:14:32,480 --> 00:14:41,680
cache since I've been playing

00:14:45,360 --> 00:15:02,740
baby cash all right so cash has been

00:14:59,860 --> 00:15:08,470
emptied so the next thing I'll do is

00:15:02,740 --> 00:15:10,420
just log out and then just just to kind

00:15:08,470 --> 00:15:11,470
of finish the demo I'll log back in to

00:15:10,420 --> 00:15:16,420
show you that there's no smoke and

00:15:11,470 --> 00:15:19,540
mirrors so in this case I'll just login

00:15:16,420 --> 00:15:20,529
is G Carter at razor razor being the

00:15:19,540 --> 00:15:25,389
shortening of the Active Directory

00:15:20,529 --> 00:15:27,699
domain pop in my password and there we

00:15:25,389 --> 00:15:29,050
go so once we log in the authentication

00:15:27,699 --> 00:15:31,420
of this particular spot integrate sin

00:15:29,050 --> 00:15:35,499
with gdm going through a Pam interface

00:15:31,420 --> 00:15:36,790
and then as part of that log in it'll

00:15:35,499 --> 00:15:41,709
actually go through and initialize the

00:15:36,790 --> 00:15:48,730
users Kerberos ticket cash as well so if

00:15:41,709 --> 00:15:50,920
I can find a terminal all right and I

00:15:48,730 --> 00:15:52,720
look at what my my Kerberos ticket cash

00:15:50,920 --> 00:15:54,970
is it's already given me a TGT and a

00:15:52,720 --> 00:15:56,949
couple of service tickets to to access

00:15:54,970 --> 00:15:59,079
the localhost to assume to ensure that

00:15:56,949 --> 00:16:02,949
the TGT wasn't actually spooked by some

00:15:59,079 --> 00:16:07,149
rogue KDC and if i wanted to for example

00:16:02,949 --> 00:16:08,230
access you know i'll just I'd spend so

00:16:07,149 --> 00:16:09,670
much time in the file server it's

00:16:08,230 --> 00:16:11,139
probably easy for me to just kind of you

00:16:09,670 --> 00:16:14,309
know deal with it like this so if I just

00:16:11,139 --> 00:16:16,809
want to connect to a server I've got a

00:16:14,309 --> 00:16:19,959
my laptop actually the base operating

00:16:16,809 --> 00:16:22,509
system is is running the likewise

00:16:19,959 --> 00:16:26,470
storage sack so I'll just connect to CF

00:16:22,509 --> 00:16:28,000
laptop the share will be public and I

00:16:26,470 --> 00:16:30,970
don't even think I have to put in a user

00:16:28,000 --> 00:16:34,509
name should just use my Kerberos creds

00:16:30,970 --> 00:16:36,759
and there we go we've already committed

00:16:34,509 --> 00:16:38,259
we've already connected to it Kahless

00:16:36,759 --> 00:16:39,519
now shows that it's you know

00:16:38,259 --> 00:16:40,660
everything's gone through curve Bob

00:16:39,519 --> 00:16:42,999
authentications given me a service

00:16:40,660 --> 00:16:45,069
ticket so at this point anything that

00:16:42,999 --> 00:16:47,379
requires kerberos authentication on this

00:16:45,069 --> 00:16:48,870
desktop can use that Tiki cash so that

00:16:47,379 --> 00:16:52,300
can be single sign-on through Mozilla

00:16:48,870 --> 00:16:55,779
that can be openssh that can be on you

00:16:52,300 --> 00:16:57,370
know sazzle based operations whether

00:16:55,779 --> 00:16:59,980
it's for things like smt

00:16:57,370 --> 00:17:01,570
be or whether it's for imap axis you

00:16:59,980 --> 00:17:02,740
know things like that the application

00:17:01,570 --> 00:17:05,230
integration is always kind of the hard

00:17:02,740 --> 00:17:07,900
part but this gives you essentially all

00:17:05,230 --> 00:17:09,339
the plumbing that's necessary to all the

00:17:07,900 --> 00:17:12,100
plumbing that's kind of necessary to do

00:17:09,339 --> 00:17:14,800
that okay so that's sort of the quick

00:17:12,100 --> 00:17:17,170
and dirty demo to show you it's not

00:17:14,800 --> 00:17:18,520
vapor where it actually does work it's

00:17:17,170 --> 00:17:20,620
out there that was actually pulled from

00:17:18,520 --> 00:17:23,530
the likewise open package that's

00:17:20,620 --> 00:17:24,730
included in a bun to 1104 you can pull

00:17:23,530 --> 00:17:27,579
the source code and you can build the

00:17:24,730 --> 00:17:30,130
sign bits what's actually in the tree is

00:17:27,579 --> 00:17:31,150
much newer okay so we got several

00:17:30,130 --> 00:17:34,510
branches showing up in the git

00:17:31,150 --> 00:17:35,980
repository masters the truck trunk

00:17:34,510 --> 00:17:37,780
branch they'll probably beat you up and

00:17:35,980 --> 00:17:41,620
take your take your lunch money so be

00:17:37,780 --> 00:17:45,880
careful okay all right so how do we do

00:17:41,620 --> 00:17:48,070
it so the the platform components is

00:17:45,880 --> 00:17:50,320
essentially composed of several

00:17:48,070 --> 00:17:51,340
different services now in this case

00:17:50,320 --> 00:17:53,800
we're just talking about the identity

00:17:51,340 --> 00:17:55,450
stack ignore the server service right

00:17:53,800 --> 00:17:58,870
but everything else everything else

00:17:55,450 --> 00:18:00,429
actually holds true and in our previous

00:17:58,870 --> 00:18:02,260
generation I would say that everything

00:18:00,429 --> 00:18:05,440
that's in a light blue box is actually a

00:18:02,260 --> 00:18:09,400
separate Damon running on the server

00:18:05,440 --> 00:18:10,840
itself we've moved to an architecture

00:18:09,400 --> 00:18:15,970
that allows us to port something called

00:18:10,840 --> 00:18:24,360
service containers and if I if I can get

00:18:15,970 --> 00:18:30,490
a listing here come on where'd you go

00:18:24,360 --> 00:18:36,520
there you are right so these are

00:18:30,490 --> 00:18:38,350
actually the right so these are actually

00:18:36,520 --> 00:18:40,929
the likewise services that are running

00:18:38,350 --> 00:18:43,360
on on this particular box and you'll see

00:18:40,929 --> 00:18:46,780
that each one shows itself as Elda be

00:18:43,360 --> 00:18:48,940
container so a service container allowed

00:18:46,780 --> 00:18:51,850
us to take something that used to run is

00:18:48,940 --> 00:18:54,910
an individual process define it as a

00:18:51,850 --> 00:18:56,710
service library and essentially our

00:18:54,910 --> 00:18:58,330
service manager Forks a copy of itself

00:18:56,710 --> 00:19:00,220
and then can load one or more of those

00:18:58,330 --> 00:19:01,570
individual service instances or the

00:19:00,220 --> 00:19:03,309
service libraries into a single

00:19:01,570 --> 00:19:06,580
container so this is going to allow us

00:19:03,309 --> 00:19:08,590
to scale down so previously you would

00:19:06,580 --> 00:19:08,770
have to run multiple damon's even if you

00:19:08,590 --> 00:19:10,840
were

00:19:08,770 --> 00:19:14,670
small footprint device you'd have to run

00:19:10,840 --> 00:19:17,830
multiple damon's you know elsass lwo

00:19:14,670 --> 00:19:19,240
netlogon in LW HD and the service

00:19:17,830 --> 00:19:21,460
manager would have to run at least five

00:19:19,240 --> 00:19:23,560
Damon's on a small footprint environment

00:19:21,460 --> 00:19:26,020
and you could tune the stack size down /

00:19:23,560 --> 00:19:27,610
threads to about think 32k is as low as

00:19:26,020 --> 00:19:29,110
we've trimmed it down so you can trim

00:19:27,610 --> 00:19:32,020
the memory usage down but you still have

00:19:29,110 --> 00:19:33,340
you know each individual process that

00:19:32,020 --> 00:19:35,050
has its own thread pool and things like

00:19:33,340 --> 00:19:37,180
that service containers are going to

00:19:35,050 --> 00:19:39,550
allow us to essentially collapse all of

00:19:37,180 --> 00:19:41,740
those individual services into a single

00:19:39,550 --> 00:19:43,660
Dame in itself so we're doing what we

00:19:41,740 --> 00:19:45,580
call likewise embedded which would allow

00:19:43,660 --> 00:19:47,290
us to take this whole stack and collapse

00:19:45,580 --> 00:19:49,660
it down its back into a single process

00:19:47,290 --> 00:19:52,630
to share common resources like a single

00:19:49,660 --> 00:19:54,430
thread pool things like that and mainly

00:19:52,630 --> 00:19:56,700
it's for small footprint advice small

00:19:54,430 --> 00:20:00,010
footprint devices like network devices

00:19:56,700 --> 00:20:01,330
routers you know potentially handhelds

00:20:00,010 --> 00:20:05,650
we can you know come up with a market

00:20:01,330 --> 00:20:07,600
for that so so anyway so everything that

00:20:05,650 --> 00:20:08,800
shows up in a blue box is an individual

00:20:07,600 --> 00:20:10,840
I'm going to call it a service rather

00:20:08,800 --> 00:20:13,600
than a daemon at this point so the

00:20:10,840 --> 00:20:15,400
likewise Security Authority this is the

00:20:13,600 --> 00:20:16,750
heart of the system and I should I

00:20:15,400 --> 00:20:19,030
should be clear because there's

00:20:16,750 --> 00:20:22,150
sometimes confusion about this none of

00:20:19,030 --> 00:20:24,250
this is Samba code okay if you look at

00:20:22,150 --> 00:20:25,300
it it's very obvious it's not okay

00:20:24,250 --> 00:20:26,650
because it's a completely different

00:20:25,300 --> 00:20:28,960
coding style it's a threaded

00:20:26,650 --> 00:20:30,460
architecture I worked on Sam before 11

00:20:28,960 --> 00:20:32,350
years this is entirely a cleanroom

00:20:30,460 --> 00:20:34,420
implementation it's not the same code

00:20:32,350 --> 00:20:36,400
base it's not taken from the same code

00:20:34,420 --> 00:20:39,670
base it doesn't even resemble the same

00:20:36,400 --> 00:20:42,400
code base ok so for better or worse just

00:20:39,670 --> 00:20:44,670
so that everybody knows the likewise

00:20:42,400 --> 00:20:47,680
Security Authority is the equivalent of

00:20:44,670 --> 00:20:48,760
winbind in Samba or else a sexy on

00:20:47,680 --> 00:20:50,800
Windows this is the heart of the

00:20:48,760 --> 00:20:55,120
authentication system so everything that

00:20:50,800 --> 00:20:57,370
has to do with exposing users from one

00:20:55,120 --> 00:21:00,460
of these providers to unix applications

00:20:57,370 --> 00:21:01,750
or to other services running within the

00:21:00,460 --> 00:21:03,760
likewise stack are handled by the

00:21:01,750 --> 00:21:05,530
likewise security authority now

00:21:03,760 --> 00:21:07,030
internally there's a provider routing

00:21:05,530 --> 00:21:08,290
layer and each one of these providers is

00:21:07,030 --> 00:21:09,490
actually a shared library that gets

00:21:08,290 --> 00:21:12,820
loaded so there's an active directory

00:21:09,490 --> 00:21:14,890
provider that handles the join into

00:21:12,820 --> 00:21:17,050
active directory maintaining things like

00:21:14,890 --> 00:21:19,150
machine account membership updating the

00:21:17,050 --> 00:21:21,280
keytab file on machine password changes

00:21:19,150 --> 00:21:21,799
maintaining affinity to the last server

00:21:21,280 --> 00:21:25,639
that we can

00:21:21,799 --> 00:21:26,899
you know successfully connected to so

00:21:25,639 --> 00:21:29,090
this is kind of the heart of that not

00:21:26,899 --> 00:21:31,759
only does the active directory provider

00:21:29,090 --> 00:21:33,139
maintain the account information for a

00:21:31,759 --> 00:21:35,720
joint to an individual Active Directory

00:21:33,139 --> 00:21:37,940
domain but it can actually can it can

00:21:35,720 --> 00:21:40,249
support multi tendency at this point so

00:21:37,940 --> 00:21:41,899
it can join multiple disparate Active

00:21:40,249 --> 00:21:43,369
Directory domains in the common use case

00:21:41,899 --> 00:21:45,739
would be a network routing device for

00:21:43,369 --> 00:21:48,080
proxy authentication device that sits in

00:21:45,739 --> 00:21:49,669
a building there's five floors on the

00:21:48,080 --> 00:21:52,129
building each one's a different company

00:21:49,669 --> 00:21:54,799
none of them interact with each other at

00:21:52,129 --> 00:21:56,989
all but yet the the maintenance or the

00:21:54,799 --> 00:21:58,609
lease agreement you know says that all

00:21:56,989 --> 00:22:01,850
of your traffic has to go out through

00:21:58,609 --> 00:22:03,590
this device this device has a VIP or you

00:22:01,850 --> 00:22:05,239
know some physical leg on each and one

00:22:03,590 --> 00:22:07,549
of those individual networks each one of

00:22:05,239 --> 00:22:09,399
those interfaces represents a computer

00:22:07,549 --> 00:22:11,929
object is joined in to that specific

00:22:09,399 --> 00:22:13,309
individual Active Directory domain so it

00:22:11,929 --> 00:22:15,019
can support this concept of multi

00:22:13,309 --> 00:22:16,249
tendency in the authentication side of

00:22:15,019 --> 00:22:18,070
the stack we haven't finished the multi

00:22:16,249 --> 00:22:20,869
tendency work in the file server yet but

00:22:18,070 --> 00:22:22,639
but active directory provider took what

00:22:20,869 --> 00:22:24,499
was previously global state collapsed it

00:22:22,639 --> 00:22:27,080
down into an individual per domain

00:22:24,499 --> 00:22:28,820
context and then that's essentially what

00:22:27,080 --> 00:22:30,499
it supports all the same things like

00:22:28,820 --> 00:22:33,529
machine password changes individually

00:22:30,499 --> 00:22:36,739
for each one of those domains mapping

00:22:33,529 --> 00:22:39,409
users back and forth from a Windows

00:22:36,739 --> 00:22:40,789
security identifier to unix ID this is

00:22:39,409 --> 00:22:44,710
also the layer that does things so

00:22:40,789 --> 00:22:47,629
currently in the identity identity stack

00:22:44,710 --> 00:22:50,119
the default mode of operation is to hash

00:22:47,629 --> 00:22:52,009
that Sid which is 128-bit number down to

00:22:50,119 --> 00:22:54,830
a 31 bit number so we take some domain

00:22:52,009 --> 00:22:56,600
sid we hashed it to a 31 bit UID ok so

00:22:54,830 --> 00:22:59,480
there's no problems with that you get

00:22:56,600 --> 00:23:01,309
over 500,000 users or you have a high

00:22:59,480 --> 00:23:03,139
turnover rate in your account you'll

00:23:01,309 --> 00:23:05,570
start to get duplicate UID so this is

00:23:03,139 --> 00:23:07,070
actually what we call policy and that it

00:23:05,570 --> 00:23:08,989
works for most people but if anybody

00:23:07,070 --> 00:23:10,639
wants to replace it it's very easy

00:23:08,989 --> 00:23:12,169
there's a three or four different

00:23:10,639 --> 00:23:16,399
functions that can be stubbed out and

00:23:12,169 --> 00:23:19,580
simply replaced here the changes to the

00:23:16,399 --> 00:23:21,200
stack that actually support so in the

00:23:19,580 --> 00:23:23,389
enterprise product we support pulling

00:23:21,200 --> 00:23:25,460
information out of ad but in the

00:23:23,389 --> 00:23:27,350
OpenStack and don't tell anybody I told

00:23:25,460 --> 00:23:30,019
you this the size of the patch to

00:23:27,350 --> 00:23:32,809
actually implement support for rst 2307

00:23:30,019 --> 00:23:34,090
attributes and just read those directly

00:23:32,809 --> 00:23:37,630
out of AD and we

00:23:34,090 --> 00:23:40,330
use the Microsoft identity management

00:23:37,630 --> 00:23:42,760
for unix plugin is like I don't know 20

00:23:40,330 --> 00:23:44,080
30 lines it's really minimal so all the

00:23:42,760 --> 00:23:46,390
plumbing is already there it's just not

00:23:44,080 --> 00:23:48,279
shipped by default it also has a local

00:23:46,390 --> 00:23:50,980
provider which is a full user and group

00:23:48,279 --> 00:23:52,330
database supports group nesting same

00:23:50,980 --> 00:23:54,400
concept that you have with a windows box

00:23:52,330 --> 00:23:56,860
when you join it into a domain so when

00:23:54,400 --> 00:23:58,000
you join a likewise installation into

00:23:56,860 --> 00:24:00,460
active directory there's a built-in

00:23:58,000 --> 00:24:02,140
administrators group the domain

00:24:00,460 --> 00:24:03,909
administrators are added into that

00:24:02,140 --> 00:24:06,520
built-in administrators group so you can

00:24:03,909 --> 00:24:09,520
use that for doing authorization checks

00:24:06,520 --> 00:24:12,279
based on group membership lwi OD is the

00:24:09,520 --> 00:24:16,690
is the core io path it's both client and

00:24:12,279 --> 00:24:18,760
server and the the client aspect is

00:24:16,690 --> 00:24:21,429
actually used for supporting the named

00:24:18,760 --> 00:24:23,260
pipe transport layer for our DC RPC

00:24:21,429 --> 00:24:25,299
runtime and this is essentially the

00:24:23,260 --> 00:24:27,039
equivalent of a kernel i/o system ported

00:24:25,299 --> 00:24:30,399
into user space all of this is in user

00:24:27,039 --> 00:24:33,039
space okay the resolver I've talked a

00:24:30,399 --> 00:24:35,860
little bit about that netlogon DS the

00:24:33,039 --> 00:24:38,470
name of the service that handles you

00:24:35,860 --> 00:24:40,929
know all the CL that traffic the DNS SRV

00:24:38,470 --> 00:24:42,880
record lookups you know 80 psych

00:24:40,929 --> 00:24:43,929
topology all the implementation the

00:24:42,880 --> 00:24:46,450
knowledge of that is built into that

00:24:43,929 --> 00:24:49,090
service the registry is our central

00:24:46,450 --> 00:24:50,559
configuration service it is exposed and

00:24:49,090 --> 00:24:53,260
has an information that's sort of a

00:24:50,559 --> 00:24:56,320
subkey hierarchy keyvaluepair database

00:24:53,260 --> 00:24:59,409
its back ended by sequel light we also

00:24:56,320 --> 00:25:01,390
have an in-memory back end for that for

00:24:59,409 --> 00:25:06,220
lighter smaller scale down environments

00:25:01,390 --> 00:25:09,100
okay server service is really just for

00:25:06,220 --> 00:25:11,409
interoperability with windows boxes in

00:25:09,100 --> 00:25:14,980
the storage stack right all right so all

00:25:11,409 --> 00:25:16,779
the this yellow line IPC communication

00:25:14,980 --> 00:25:21,610
between all of these services so for

00:25:16,779 --> 00:25:22,870
example if if the likewise Security

00:25:21,610 --> 00:25:25,149
Authority needs to find a domain

00:25:22,870 --> 00:25:27,610
controller it makes a request of the

00:25:25,149 --> 00:25:31,659
resolver library using a well-defined

00:25:27,610 --> 00:25:33,370
public interface and asked the resolver

00:25:31,659 --> 00:25:34,720
library to go find a DC for for this

00:25:33,370 --> 00:25:39,100
particular domain all of that is done

00:25:34,720 --> 00:25:41,110
over this IPC message bus right so the

00:25:39,100 --> 00:25:47,250
command line utilities and I'll show you

00:25:41,110 --> 00:26:03,120
this a little bit as we go on so

00:25:47,250 --> 00:26:05,460
LW oops opened up work okay so all of

00:26:03,120 --> 00:26:06,960
this information that's printed back so

00:26:05,460 --> 00:26:09,480
all of our command line utilities are

00:26:06,960 --> 00:26:10,920
thin wrappers around underlying api's

00:26:09,480 --> 00:26:13,350
that do the same thing or some

00:26:10,920 --> 00:26:15,540
combination of that so you don't have to

00:26:13,350 --> 00:26:18,150
fork an exec to call utilities to be

00:26:15,540 --> 00:26:20,580
able to do this there's an LW net get DC

00:26:18,150 --> 00:26:22,470
name API call and all this is doing is

00:26:20,580 --> 00:26:23,760
making that API call this is essentially

00:26:22,470 --> 00:26:26,190
mirroring the structure that's returned

00:26:23,760 --> 00:26:29,070
back so in this case you see information

00:26:26,190 --> 00:26:31,110
like the forest name that you're

00:26:29,070 --> 00:26:33,270
actually talking to for this specific DC

00:26:31,110 --> 00:26:34,650
maybe this is not the root of the forest

00:26:33,270 --> 00:26:35,850
maybe that's actually a child domain so

00:26:34,650 --> 00:26:39,510
you'd actually get the real forest name

00:26:35,850 --> 00:26:42,510
here things 80 psych topology the short

00:26:39,510 --> 00:26:45,900
name of the DC itself short name of the

00:26:42,510 --> 00:26:48,480
of the domain that you're talking to the

00:26:45,900 --> 00:26:51,780
ipv4 address so currently i should say

00:26:48,480 --> 00:26:55,320
this about ipv6 we will likely have

00:26:51,780 --> 00:26:57,540
complete support for ipv6 only domains

00:26:55,320 --> 00:27:00,180
later this year so I think right now

00:26:57,540 --> 00:27:05,460
we've got the dev support scheduled for

00:27:00,180 --> 00:27:07,440
like huh i'm gonna say july in august

00:27:05,460 --> 00:27:09,390
but it may be September so right now we

00:27:07,440 --> 00:27:10,920
i mean it's it's I think it's just going

00:27:09,390 --> 00:27:12,420
to be grunt work really I mean we're in

00:27:10,920 --> 00:27:17,790
a pretty good shape for it but right now

00:27:12,420 --> 00:27:24,150
it's IBB ipv4 only okay but the way that

00:27:17,790 --> 00:27:26,690
this works is there is a header if I

00:27:24,150 --> 00:27:26,690
make it a little smaller

00:27:34,520 --> 00:27:50,460
netlogon include the v-net h my hard

00:27:49,260 --> 00:27:51,360
disk is kind of complaining with

00:27:50,460 --> 00:27:53,870
something it with a couple of VMS

00:27:51,360 --> 00:27:53,870
running

00:28:03,740 --> 00:28:11,330
I got the wrong header I might I've got

00:28:10,100 --> 00:28:12,530
it in one of the slides that may have

00:28:11,330 --> 00:28:14,450
the wrong header up at the moment so

00:28:12,530 --> 00:28:18,740
we'll come back to it but but

00:28:14,450 --> 00:28:21,020
essentially the model is like when you

00:28:18,740 --> 00:28:22,610
look at it this architecture of else

00:28:21,020 --> 00:28:24,230
assets it's sort of expanded out a

00:28:22,610 --> 00:28:27,740
little bit more this UNIX the domain

00:28:24,230 --> 00:28:29,600
socket interface is done over this LW

00:28:27,740 --> 00:28:30,980
message component and the other view

00:28:29,600 --> 00:28:33,910
message component allows you to

00:28:30,980 --> 00:28:39,050
essentially serialized structures make

00:28:33,910 --> 00:28:42,110
local RPC calls across the UNIX domain

00:28:39,050 --> 00:28:45,110
socket so with every service right this

00:28:42,110 --> 00:28:48,200
is all the GPL code with every service

00:28:45,110 --> 00:28:51,170
there is a associated client library

00:28:48,200 --> 00:28:53,390
that is lgpl and a header so in order to

00:28:51,170 --> 00:28:55,730
communicate with the likewise Security

00:28:53,390 --> 00:28:57,860
Authority there's an LSA client library

00:28:55,730 --> 00:29:00,170
that your your application would link

00:28:57,860 --> 00:29:01,730
with and there's an LSA each header file

00:29:00,170 --> 00:29:03,170
that you would include in your source

00:29:01,730 --> 00:29:05,020
code and then that would give you the

00:29:03,170 --> 00:29:08,270
ability to make any of these public

00:29:05,020 --> 00:29:09,980
calls into else s and like I say the

00:29:08,270 --> 00:29:12,140
model is the client libraries are

00:29:09,980 --> 00:29:13,970
released under lgpl and the cord daemon

00:29:12,140 --> 00:29:19,309
is actually under GPL and this is all v2

00:29:13,970 --> 00:29:20,660
not be three okay so for else s itself

00:29:19,309 --> 00:29:23,000
I've already talked a little bit about

00:29:20,660 --> 00:29:24,440
the provider this IPC dispatch layer is

00:29:23,000 --> 00:29:26,090
something very common that you'll see

00:29:24,440 --> 00:29:28,850
for handling the incoming requests on

00:29:26,090 --> 00:29:30,740
the off the UNIX domain sockets on the

00:29:28,850 --> 00:29:32,960
other side you'll see that the pam and

00:29:30,740 --> 00:29:34,550
the NSS layers are actually just

00:29:32,960 --> 00:29:36,500
applications written on top of the

00:29:34,550 --> 00:29:40,160
client api and this client api has

00:29:36,500 --> 00:29:43,400
things like you know LSA find security

00:29:40,160 --> 00:29:48,140
object LSA authenticate user eh which

00:29:43,400 --> 00:29:50,090
supports the raw non sspi version of

00:29:48,140 --> 00:29:52,100
ntlm authentication until him one and

00:29:50,090 --> 00:29:54,080
two we also support constrained

00:29:52,100 --> 00:29:57,860
delegations so if you build the likewise

00:29:54,080 --> 00:30:00,350
stack on a device and you want to allow

00:29:57,860 --> 00:30:02,540
that particular device to be able to

00:30:00,350 --> 00:30:05,080
obtain Kerberos tickets on behalf of

00:30:02,540 --> 00:30:07,220
other users then you can we support

00:30:05,080 --> 00:30:08,780
essentially services for user which is a

00:30:07,220 --> 00:30:12,320
version constrained delegation with in

00:30:08,780 --> 00:30:13,970
Active Directory this comes up a lot

00:30:12,320 --> 00:30:15,830
when people want to do like encrypted

00:30:13,970 --> 00:30:18,710
mapi acceleration and you know things

00:30:15,830 --> 00:30:21,230
like that I mentioned that we also

00:30:18,710 --> 00:30:24,260
support G ssense healing mechanism for

00:30:21,230 --> 00:30:26,690
an SP nego stack so I'll show you an

00:30:24,260 --> 00:30:28,700
example of a web server that's about

00:30:26,690 --> 00:30:30,980
seven hundred lines of code the

00:30:28,700 --> 00:30:33,470
authentication part is about ten lines

00:30:30,980 --> 00:30:35,090
of code it just as a GSS except security

00:30:33,470 --> 00:30:37,070
context but allows you to do single

00:30:35,090 --> 00:30:38,750
sign-on from I e on windows directly to

00:30:37,070 --> 00:30:40,940
some application running on Linux a good

00:30:38,750 --> 00:30:42,679
example sort of sample code this one is

00:30:40,940 --> 00:30:44,150
actually only negotiating in tliem but

00:30:42,679 --> 00:30:48,380
you get kind of the eye you get kind of

00:30:44,150 --> 00:30:50,600
the idea in terms of in terms of

00:30:48,380 --> 00:30:53,630
external code that we that we've pulled

00:30:50,600 --> 00:30:57,850
into our tree we have about 1.5 million

00:30:53,630 --> 00:31:01,780
lines of see we've pulled in MIT

00:30:57,850 --> 00:31:04,220
kerberos 17 and back forwarded the

00:31:01,780 --> 00:31:06,710
constrained delegation support from 18

00:31:04,220 --> 00:31:08,809
but any local patches that we have we

00:31:06,710 --> 00:31:10,460
work with the curve five guys to push

00:31:08,809 --> 00:31:12,860
back up we actually have some former MIT

00:31:10,460 --> 00:31:14,480
devs so which we actually don't like to

00:31:12,860 --> 00:31:16,280
carry local patches we just have a

00:31:14,480 --> 00:31:18,230
version that Sam boxed and we ship

00:31:16,280 --> 00:31:20,120
because we build across a lot of

00:31:18,230 --> 00:31:24,130
platforms and you just you know they

00:31:20,120 --> 00:31:28,010
don't all have what you need openldap

00:31:24,130 --> 00:31:30,919
client libraries only we had some local

00:31:28,010 --> 00:31:33,679
modifications for those to support GS s

00:31:30,919 --> 00:31:35,780
SP nego zazzle authentication we've

00:31:33,679 --> 00:31:39,050
since moved to write a GS SSP nego

00:31:35,780 --> 00:31:40,940
plug-in for Cyrus azle so you know the

00:31:39,050 --> 00:31:45,260
actual amount of external components

00:31:40,940 --> 00:31:48,290
that we have that have local patches is

00:31:45,260 --> 00:31:50,030
really minimal so it's you know pretty

00:31:48,290 --> 00:31:51,290
much all of those all of those external

00:31:50,030 --> 00:31:53,840
patches are either just for convenience

00:31:51,290 --> 00:31:57,050
or they're just to ensure stability on a

00:31:53,840 --> 00:31:58,970
single version itself ok ignore the

00:31:57,050 --> 00:32:00,919
likewise cells that's part of likewise

00:31:58,970 --> 00:32:03,620
enterprise I'm not going to go into it

00:32:00,919 --> 00:32:05,360
on provision mode I talked about that's

00:32:03,620 --> 00:32:06,860
this hashing scheme so you can just sort

00:32:05,360 --> 00:32:09,230
of drop it into an ad environment it

00:32:06,860 --> 00:32:11,390
does support the full gamut of windows

00:32:09,230 --> 00:32:14,690
trust scenarios so one way trust farce

00:32:11,390 --> 00:32:17,690
transitive trusts you know external

00:32:14,690 --> 00:32:20,330
trust things like that it supports

00:32:17,690 --> 00:32:23,510
offline password caching for interactive

00:32:20,330 --> 00:32:25,550
logon only so it doesn't allow you to

00:32:23,510 --> 00:32:27,320
cash in tlm logons but if somebody logs

00:32:25,550 --> 00:32:30,560
on on the desktop then

00:32:27,320 --> 00:32:32,090
will securely store a version based on

00:32:30,560 --> 00:32:33,530
the clear 6 of that user's password so

00:32:32,090 --> 00:32:34,520
for laptop scenarios you can carry him

00:32:33,530 --> 00:32:38,180
around and still log in when you

00:32:34,520 --> 00:32:40,160
disconnected to the network automated

00:32:38,180 --> 00:32:42,380
machine password user ticket refreshes

00:32:40,160 --> 00:32:44,000
site infinity you know all of that kind

00:32:42,380 --> 00:32:45,830
of stuff I mean this is really the heart

00:32:44,000 --> 00:32:47,300
of the authentication in the system

00:32:45,830 --> 00:32:48,890
itself and it's kind of one of the

00:32:47,300 --> 00:32:50,870
reasons why we were able to do this file

00:32:48,890 --> 00:32:52,820
server development so rapidly is because

00:32:50,870 --> 00:32:58,370
we built on top of this existing

00:32:52,820 --> 00:33:01,130
platform now the storage services is is

00:32:58,370 --> 00:33:04,480
key to the identity stack for one reason

00:33:01,130 --> 00:33:08,000
and the reason is is because in order to

00:33:04,480 --> 00:33:09,680
implement real interoperability with DC

00:33:08,000 --> 00:33:13,730
RPC you have to support a named pipe

00:33:09,680 --> 00:33:16,190
transport okay we inherited or we picked

00:33:13,730 --> 00:33:18,860
up novell release so Luke Howard wrote

00:33:16,190 --> 00:33:20,750
xad which turned into UNIX domain

00:33:18,860 --> 00:33:23,270
services for windows when novell bought

00:33:20,750 --> 00:33:26,540
it no veil re release some of the

00:33:23,270 --> 00:33:28,580
original modified OS FDC RPC libraries

00:33:26,540 --> 00:33:29,930
that Luke had worked on originally we

00:33:28,580 --> 00:33:32,870
pick that up and did a lot of other

00:33:29,930 --> 00:33:34,700
cleanup and in fact Apple has now picked

00:33:32,870 --> 00:33:36,380
up those same libraries back from us and

00:33:34,700 --> 00:33:39,020
they have rereleased their changes back

00:33:36,380 --> 00:33:41,060
out on DC RPC org so this thing gets

00:33:39,020 --> 00:33:43,850
kind of a lot of life but this parts a

00:33:41,060 --> 00:33:46,190
fairly old code base but in order to

00:33:43,850 --> 00:33:49,970
implement the name pipe transport we so

00:33:46,190 --> 00:33:51,350
r io managers essentially it's say i'm

00:33:49,970 --> 00:33:52,580
going to call them drivers even though

00:33:51,350 --> 00:33:54,020
it's in user space their shared

00:33:52,580 --> 00:33:56,360
libraries that have well-defined entry

00:33:54,020 --> 00:34:00,680
points so the client redirector is

00:33:56,360 --> 00:34:03,560
actually a rd r dot s 0 file on disk

00:34:00,680 --> 00:34:06,320
that gets loaded by the i/o manager and

00:34:03,560 --> 00:34:08,390
it is a client file system so if you

00:34:06,320 --> 00:34:11,420
think about it talking about the VFS

00:34:08,390 --> 00:34:14,150
layer on Linux when you mount a remote

00:34:11,420 --> 00:34:16,550
NFS file system as a user is an

00:34:14,150 --> 00:34:18,170
application you just go to open a file

00:34:16,550 --> 00:34:20,570
you don't have to worry about where it's

00:34:18,170 --> 00:34:22,250
actually stored what happens is it the

00:34:20,570 --> 00:34:24,020
VFS layer that's actually handed off to

00:34:22,250 --> 00:34:25,340
the NFS client that NFS client didn't

00:34:24,020 --> 00:34:27,140
sends that and translate that to a

00:34:25,340 --> 00:34:30,170
request to some remote server to do the

00:34:27,140 --> 00:34:31,880
open itself same concept here in this

00:34:30,170 --> 00:34:35,780
case the client redirector is an SMB

00:34:31,880 --> 00:34:37,260
smb2 client redirector and our DC RPC

00:34:35,780 --> 00:34:40,800
runtime does

00:34:37,260 --> 00:34:42,690
ioann in T create file to actually open

00:34:40,800 --> 00:34:44,850
up the name pipe on some remote server

00:34:42,690 --> 00:34:46,560
so that's why its core to the identity

00:34:44,850 --> 00:34:48,389
stack itself again you see the common

00:34:46,560 --> 00:34:50,520
unix domain socket layer which is this

00:34:48,389 --> 00:34:53,010
Elda me message component same type

00:34:50,520 --> 00:34:54,240
you've got an L WI o client let me

00:34:53,010 --> 00:34:56,220
finish this thought my grab you have an

00:34:54,240 --> 00:34:58,200
elder vio client library with a set of

00:34:56,220 --> 00:35:01,560
AP is that you can link to and there's

00:34:58,200 --> 00:35:02,880
other drivers available for this right

00:35:01,560 --> 00:35:10,470
now get to those in a couple of slides

00:35:02,880 --> 00:35:13,290
yeah no no this is in let's let's be

00:35:10,470 --> 00:35:14,760
clear it's SMB and SMB two is the name

00:35:13,290 --> 00:35:17,220
of the protocol Samba is another

00:35:14,760 --> 00:35:20,490
implementation of that protocol ok and

00:35:17,220 --> 00:35:21,780
this is all again clean room code the

00:35:20,490 --> 00:35:23,640
client redirector is fully threaded

00:35:21,780 --> 00:35:25,020
there's actually no threads within the

00:35:23,640 --> 00:35:26,670
i/o manager they the thread pooling

00:35:25,020 --> 00:35:31,410
mechanism has to be in to be implemented

00:35:26,670 --> 00:35:35,190
by each individual driver it's very

00:35:31,410 --> 00:35:36,900
similar if you've ever done any any file

00:35:35,190 --> 00:35:39,690
system development or filter driver

00:35:36,900 --> 00:35:41,550
development on a Windows NT kernel or

00:35:39,690 --> 00:35:44,100
even probably BMS a lot of this actually

00:35:41,550 --> 00:35:45,960
translates from VMs we have internally

00:35:44,100 --> 00:35:47,870
we use an herb model in our request

00:35:45,960 --> 00:35:50,220
packet model so there's about 20 herbs

00:35:47,870 --> 00:35:53,400
you know read file right file closed

00:35:50,220 --> 00:35:56,880
file lock file query information file or

00:35:53,400 --> 00:35:58,500
directory change things like that and so

00:35:56,880 --> 00:36:00,180
all of all the only things that this

00:35:58,500 --> 00:36:02,460
driver has to implement are these

00:36:00,180 --> 00:36:03,900
particular herbs and then these drivers

00:36:02,460 --> 00:36:06,030
can actually communicate with each other

00:36:03,900 --> 00:36:08,190
over this core API so for example we'll

00:36:06,030 --> 00:36:10,800
get to talk about the SMB server driver

00:36:08,190 --> 00:36:12,600
itself and the SMB server driver

00:36:10,800 --> 00:36:14,940
receives information coming in off the

00:36:12,600 --> 00:36:17,130
wire and then calls into the file system

00:36:14,940 --> 00:36:18,900
driver to actually access the bits on on

00:36:17,130 --> 00:36:20,730
disk itself so in order for

00:36:18,900 --> 00:36:24,030
customization we find I mean a lot of

00:36:20,730 --> 00:36:26,310
people tend to integrate in that file

00:36:24,030 --> 00:36:27,690
system port with their we deal with a

00:36:26,310 --> 00:36:29,100
lot of clustered storage vendors so they

00:36:27,690 --> 00:36:30,960
integrate that file system driver with

00:36:29,100 --> 00:36:32,910
their clustered file system very tightly

00:36:30,960 --> 00:36:34,170
but they never worry about the SMB

00:36:32,910 --> 00:36:40,020
protocol engine gives a completely

00:36:34,170 --> 00:36:42,240
separate driver itself right yeah

00:36:40,020 --> 00:36:43,680
modular blah blah blah I just like this

00:36:42,240 --> 00:36:46,569
slide so I have to put it in and spend a

00:36:43,680 --> 00:36:49,220
lot of time on its a nice object model

00:36:46,569 --> 00:36:51,500
it's a completely asynchronous interface

00:36:49,220 --> 00:36:53,119
and I won't go into that too much but

00:36:51,500 --> 00:36:54,890
for example one driver calling into

00:36:53,119 --> 00:36:56,299
another can specify an asynchronous

00:36:54,890 --> 00:36:59,660
control block that has a callback

00:36:56,299 --> 00:37:01,549
mechanism and inside the second driver

00:36:59,660 --> 00:37:03,260
can basically take that ARP it can

00:37:01,549 --> 00:37:04,670
return status pending edit on an

00:37:03,260 --> 00:37:06,140
internal work you go do whatever it

00:37:04,670 --> 00:37:07,940
wants and when it gets done it completes

00:37:06,140 --> 00:37:10,010
a tarp and the oven manager will invoke

00:37:07,940 --> 00:37:11,660
the callback for the original calling

00:37:10,010 --> 00:37:12,950
process or the original calling driver

00:37:11,660 --> 00:37:14,299
within that process but they're just

00:37:12,950 --> 00:37:16,900
function pointers they get that get

00:37:14,299 --> 00:37:19,460
passed around herb cancellation as well

00:37:16,900 --> 00:37:23,329
file rundown semantics on handle closed

00:37:19,460 --> 00:37:24,980
so for example if you have you know a

00:37:23,329 --> 00:37:26,990
file object that gets closed but it has

00:37:24,980 --> 00:37:28,369
some pending reads on that that having

00:37:26,990 --> 00:37:29,869
completed the i/o manager will

00:37:28,369 --> 00:37:31,460
internally cancel all those outstanding

00:37:29,869 --> 00:37:33,770
nerves the driver has to release all the

00:37:31,460 --> 00:37:35,599
resources so it's pretty it's pretty

00:37:33,770 --> 00:37:37,760
elegant but you know it's I think you've

00:37:35,599 --> 00:37:40,220
probably run into it before it's just a

00:37:37,760 --> 00:37:42,140
list of herbs I'll give these slides to

00:37:40,220 --> 00:37:44,329
Jeremy or somebody at the conference and

00:37:42,140 --> 00:37:49,630
posted or if you want them directly i'll

00:37:44,329 --> 00:37:52,130
be happy to email them out too so so

00:37:49,630 --> 00:37:53,750
storage services so to actually take the

00:37:52,130 --> 00:37:57,020
i/o manager make it into a file server

00:37:53,750 --> 00:38:00,380
you add in like a filesystem driver

00:37:57,020 --> 00:38:02,420
named pyke file system driver you add in

00:38:00,380 --> 00:38:04,609
the SMB protocol engine which is what we

00:38:02,420 --> 00:38:08,420
call the serve driver pretty broad

00:38:04,609 --> 00:38:10,970
support SMB smb2 supports linux mac OSX

00:38:08,420 --> 00:38:12,770
clients we're also working on clustering

00:38:10,970 --> 00:38:15,109
support and like I mentioned we've added

00:38:12,770 --> 00:38:16,940
in some additional protocol drivers for

00:38:15,109 --> 00:38:20,420
things other than SMB so we've got NFS

00:38:16,940 --> 00:38:22,279
coming right in FS 3 now you know almost

00:38:20,420 --> 00:38:26,630
done and then NFS four and four dot 1

00:38:22,279 --> 00:38:28,220
and P NFS later ok so that's kind of

00:38:26,630 --> 00:38:31,730
that's kind of the heart of it itself

00:38:28,220 --> 00:38:34,279
right so what are the other pieces in

00:38:31,730 --> 00:38:36,319
the platform so the other pieces yeah

00:38:34,279 --> 00:38:38,900
way too many slides how I mom 16 I'm

00:38:36,319 --> 00:38:46,940
halfway done what time have I got to

00:38:38,900 --> 00:38:48,500
shut up like 20 minutes ok hmm ok so we

00:38:46,940 --> 00:38:50,240
have a service manager I've talked a

00:38:48,500 --> 00:38:52,099
little bit about this this originally

00:38:50,240 --> 00:38:53,569
was for us just a portable way of

00:38:52,099 --> 00:38:55,309
dealing with the hassle of an it scripts

00:38:53,569 --> 00:38:57,819
across all this you know wide variety of

00:38:55,309 --> 00:38:59,540
platforms since then we've added in

00:38:57,819 --> 00:39:00,620
things like service can

00:38:59,540 --> 00:39:03,050
Tanner's we've done some watchdog

00:39:00,620 --> 00:39:05,000
facility watchdog facilities within the

00:39:03,050 --> 00:39:06,650
service managers so that if a process

00:39:05,000 --> 00:39:10,400
dies it can automatically restarted up

00:39:06,650 --> 00:39:12,140
to a threshold and you know it can do

00:39:10,400 --> 00:39:17,810
some really kind of fun things like for

00:39:12,140 --> 00:39:20,270
example here because it internally can

00:39:17,810 --> 00:39:22,850
manage its own service dependencies what

00:39:20,270 --> 00:39:25,580
I'll do is I'll just stop the registry

00:39:22,850 --> 00:39:26,630
and when I stop the registry oops see

00:39:25,580 --> 00:39:30,710
this is what I get from working off

00:39:26,630 --> 00:39:34,460
trunk actually let me go from a clean

00:39:30,710 --> 00:39:39,590
state so pay no attention to the man

00:39:34,460 --> 00:39:41,510
behind the mirrors all right ok so if I

00:39:39,590 --> 00:39:42,860
wanted to start up the if I wanted to

00:39:41,510 --> 00:39:48,980
start up the service service which is

00:39:42,860 --> 00:39:50,780
the the net share enum file shares kind

00:39:48,980 --> 00:39:53,840
of thing i can say startup the server

00:39:50,780 --> 00:39:55,580
service and it'll go through and start

00:39:53,840 --> 00:39:57,110
up all of the services that serve

00:39:55,580 --> 00:39:58,640
service actually depends on so it

00:39:57,110 --> 00:40:01,460
actually maintains this directed graph

00:39:58,640 --> 00:40:02,960
of information so at least on the client

00:40:01,460 --> 00:40:05,450
side that you can build up this some

00:40:02,960 --> 00:40:06,920
disservice dependency I think I'd give

00:40:05,450 --> 00:40:09,740
you an example yeah it's like the

00:40:06,920 --> 00:40:12,380
dependency graph you know you can see

00:40:09,740 --> 00:40:14,360
that in order to start up something like

00:40:12,380 --> 00:40:15,860
server management it requires that the

00:40:14,360 --> 00:40:18,860
Security Authority has started up as

00:40:15,860 --> 00:40:20,480
well as a named pipe file system for the

00:40:18,860 --> 00:40:22,820
Security Authority to start up it has to

00:40:20,480 --> 00:40:24,290
start up several other things so it kind

00:40:22,820 --> 00:40:26,120
of builds this directed graph in memory

00:40:24,290 --> 00:40:27,500
and can help handle a lot of that stuff

00:40:26,120 --> 00:40:29,750
so we shipped with a couple of init

00:40:27,500 --> 00:40:32,960
scripts this is just an example of that

00:40:29,750 --> 00:40:36,170
public API right so there's an LD smh

00:40:32,960 --> 00:40:37,930
there's enumerate services start service

00:40:36,170 --> 00:40:41,750
acquire handle everything's handle based

00:40:37,930 --> 00:40:43,580
and then you link with the lwsn library

00:40:41,750 --> 00:40:46,730
and this is the kind of information that

00:40:43,580 --> 00:40:48,950
you can get right so this information is

00:40:46,730 --> 00:40:51,110
about the elsass service its

00:40:48,950 --> 00:40:53,870
dependencies upon these other configured

00:40:51,110 --> 00:40:55,250
services what service group or what

00:40:53,870 --> 00:40:57,530
service container needs to be assigned

00:40:55,250 --> 00:40:58,850
to and then you know like I said when it

00:40:57,530 --> 00:41:01,040
starts up it'll handle those

00:40:58,850 --> 00:41:03,400
dependencies so the question is where is

00:41:01,040 --> 00:41:06,080
that information actually stored and

00:41:03,400 --> 00:41:10,820
it's actually stored in the registry so

00:41:06,080 --> 00:41:12,609
let me just give you a quick quick shock

00:41:10,820 --> 00:41:17,989
and awe

00:41:12,609 --> 00:41:20,589
so so this is actually the likewise

00:41:17,989 --> 00:41:22,970
registry this LW red shell is

00:41:20,589 --> 00:41:27,200
communicating with a service that

00:41:22,970 --> 00:41:28,849
service has a persistent back in store

00:41:27,200 --> 00:41:31,190
written in sequel lights stored on the

00:41:28,849 --> 00:41:33,049
file system but it implements

00:41:31,190 --> 00:41:34,369
essentially a trusted service model

00:41:33,049 --> 00:41:37,309
where it performs the authentication

00:41:34,369 --> 00:41:38,809
based on the SOP or creds of the user

00:41:37,309 --> 00:41:41,509
coming in over the UNIX domain sake

00:41:38,809 --> 00:41:43,039
creates the access token does the RTL

00:41:41,509 --> 00:41:45,170
access check against the security

00:41:43,039 --> 00:41:46,849
descriptor for a particular key so for

00:41:45,170 --> 00:41:49,069
example if I try to read the Machine

00:41:46,849 --> 00:41:50,089
password as a non root user it's going

00:41:49,069 --> 00:41:51,619
to look at the security descriptor

00:41:50,089 --> 00:41:53,150
associated with a particular key and

00:41:51,619 --> 00:41:54,859
it's going to say no sorry you can't

00:41:53,150 --> 00:41:56,720
actually see that but this is the

00:41:54,859 --> 00:41:59,930
central configuration store for the

00:41:56,720 --> 00:42:01,640
entire entire likewise sweet so all of

00:41:59,930 --> 00:42:03,440
those services each one has an

00:42:01,640 --> 00:42:06,529
individual key if I wanted to look at LW

00:42:03,440 --> 00:42:08,569
I oh you'd have other other information

00:42:06,529 --> 00:42:09,920
associated with that and we could drill

00:42:08,569 --> 00:42:11,569
down through this and give a lot of

00:42:09,920 --> 00:42:13,339
other examples but I think I think you

00:42:11,569 --> 00:42:15,799
kind of get the idea the nice thing

00:42:13,339 --> 00:42:17,809
about this again just just like the

00:42:15,799 --> 00:42:20,779
Elden unit get DC name was a thin

00:42:17,809 --> 00:42:23,119
wrapper around an API call this registry

00:42:20,779 --> 00:42:26,450
shell is just a wrapper around things

00:42:23,119 --> 00:42:30,069
like open key enum subkeys you know

00:42:26,450 --> 00:42:32,479
query' value set value things like that

00:42:30,069 --> 00:42:36,140
of anything I think this is the most

00:42:32,479 --> 00:42:38,269
horrific interface and the reason it's a

00:42:36,140 --> 00:42:41,479
little bit historic our past VP of

00:42:38,269 --> 00:42:43,940
engineering was very very strict on we

00:42:41,479 --> 00:42:45,589
want to maintain API compatibility to

00:42:43,940 --> 00:42:48,140
make it easier to port from windows over

00:42:45,589 --> 00:42:51,289
to Linux but the registry API does some

00:42:48,140 --> 00:42:54,259
really god awful things so we've changed

00:42:51,289 --> 00:42:57,799
it a little bit in fact we've created

00:42:54,259 --> 00:43:01,279
this ability to do what we call

00:42:57,799 --> 00:43:03,200
copy-on-write semantics right so these

00:43:01,279 --> 00:43:04,729
copy-on-write semantics allow us to

00:43:03,200 --> 00:43:07,279
assign some attributes with a given

00:43:04,729 --> 00:43:08,930
value right so that the problem that we

00:43:07,279 --> 00:43:12,259
had is somebody sets a value in the

00:43:08,930 --> 00:43:14,390
registry and now you upgrade but you

00:43:12,259 --> 00:43:16,130
can't tell if the explicit value defined

00:43:14,390 --> 00:43:17,599
in the registry was the default from the

00:43:16,130 --> 00:43:20,089
previous installation or something that

00:43:17,599 --> 00:43:21,890
that administrator explicitly set so we

00:43:20,089 --> 00:43:23,539
created these attributes that allow us

00:43:21,890 --> 00:43:25,519
to define sort of a default attributes

00:43:23,539 --> 00:43:26,450
and make it self documenting we can add

00:43:25,519 --> 00:43:28,550
doc strings

00:43:26,450 --> 00:43:29,810
some sort of range or hints things that

00:43:28,550 --> 00:43:31,369
could be parsed by management

00:43:29,810 --> 00:43:33,530
application to say Oh would you like to

00:43:31,369 --> 00:43:36,290
set the Machine password lifespan well

00:43:33,530 --> 00:43:38,300
here you go the default is set to this

00:43:36,290 --> 00:43:39,680
of the doc description that I get backs

00:43:38,300 --> 00:43:42,260
is that this is the Machine password

00:43:39,680 --> 00:43:45,050
expiration lifetime in seconds and then

00:43:42,260 --> 00:43:47,530
these are valid integer ranges so it

00:43:45,050 --> 00:43:50,150
gives you some ability to be able to

00:43:47,530 --> 00:43:53,240
have some of the advantages of things

00:43:50,150 --> 00:43:56,150
like XML without the overhead of having

00:43:53,240 --> 00:43:57,650
XML so and it's kind of nice because you

00:43:56,150 --> 00:43:59,180
can define a default value and then you

00:43:57,650 --> 00:44:00,950
can just override all the defaults but

00:43:59,180 --> 00:44:02,839
if anybody has an explicit value set

00:44:00,950 --> 00:44:05,060
then that actually gets maintained

00:44:02,839 --> 00:44:06,260
across upgrades and then this is we're

00:44:05,060 --> 00:44:08,000
actually backing up the security

00:44:06,260 --> 00:44:09,410
descriptor associate with an individual

00:44:08,000 --> 00:44:12,170
key and we're writing it out in this

00:44:09,410 --> 00:44:14,510
standard software this security

00:44:12,170 --> 00:44:16,310
descriptor definition language it's st

00:44:14,510 --> 00:44:20,240
dl it's kind of a common coming

00:44:16,310 --> 00:44:22,940
microsoft ism the domain resolver i've

00:44:20,240 --> 00:44:25,280
talked about this a little bit i guess

00:44:22,940 --> 00:44:29,000
let me show you at least the generated

00:44:25,280 --> 00:44:33,069
files on disk so for for third-party app

00:44:29,000 --> 00:44:36,589
integration if i go to VAR lib likewise

00:44:33,069 --> 00:44:39,079
there is this curve five affinity file

00:44:36,589 --> 00:44:41,030
that gets written out and what it does

00:44:39,079 --> 00:44:43,760
is it writes out a manual list of KD

00:44:41,030 --> 00:44:45,589
sees that have been located that have

00:44:43,760 --> 00:44:47,839
been determined to match the site of the

00:44:45,589 --> 00:44:49,790
local client machine so you can set the

00:44:47,839 --> 00:44:51,980
environment variable the curb five

00:44:49,790 --> 00:44:55,339
config environment variable to actually

00:44:51,980 --> 00:44:56,930
maintain multiple configuration files

00:44:55,339 --> 00:44:58,400
and then essentially the client

00:44:56,930 --> 00:45:00,619
application will get the the aggregate

00:44:58,400 --> 00:45:02,180
sum of all those so you can have all of

00:45:00,619 --> 00:45:05,329
your settings that you tweak in it

00:45:02,180 --> 00:45:10,700
seeker 5 comp and you can sit you know

00:45:05,329 --> 00:45:15,530
something like curb 5 config equals it C

00:45:10,700 --> 00:45:20,930
curve 5.com well I can't type that you

00:45:15,530 --> 00:45:23,569
get the idea like five affinity right so

00:45:20,930 --> 00:45:26,900
you could set it to be that kind of

00:45:23,569 --> 00:45:28,400
value and your your third-party Kerberos

00:45:26,900 --> 00:45:30,200
applications would then sort of you know

00:45:28,400 --> 00:45:31,910
get the aggregate sum of all those

00:45:30,200 --> 00:45:33,920
settings which means that all of a

00:45:31,910 --> 00:45:36,349
sudden things like the openssh clients

00:45:33,920 --> 00:45:38,210
are now aware of 80 sites so if it's

00:45:36,349 --> 00:45:39,980
going to go try to get a service ticket

00:45:38,210 --> 00:45:41,900
to access a remote host

00:45:39,980 --> 00:45:44,570
it's going to go to a DC that's actually

00:45:41,900 --> 00:45:46,160
configured within the local site of the

00:45:44,570 --> 00:45:48,109
host itself I mean we've had

00:45:46,160 --> 00:45:50,660
environments where I mean this has been

00:45:48,109 --> 00:45:51,830
a big big deal and it's in some

00:45:50,660 --> 00:45:53,570
environments I mean this is kind of one

00:45:51,830 --> 00:45:54,859
of the reasons why people were we're

00:45:53,570 --> 00:45:58,330
willing to go with this was because of

00:45:54,859 --> 00:45:58,330
this this third-party app integration

00:45:58,570 --> 00:46:05,530
some API examples again I mentioned the

00:46:01,910 --> 00:46:09,200
get DC name right so you'll see a lot of

00:46:05,530 --> 00:46:11,300
very sort of Hungarian notation it's

00:46:09,200 --> 00:46:12,890
again historical we're moving kind of

00:46:11,300 --> 00:46:14,990
away from it but what you will see a

00:46:12,890 --> 00:46:18,440
standard set of type deaths in terms of

00:46:14,990 --> 00:46:21,400
structure definitions as well as 32-bit

00:46:18,440 --> 00:46:23,660
64-bit values unsigned things like that

00:46:21,400 --> 00:46:25,340
so it's kind of it's a common coding

00:46:23,660 --> 00:46:27,470
convention throughout the throughout the

00:46:25,340 --> 00:46:32,060
entire code base at least of all of our

00:46:27,470 --> 00:46:34,510
code ok ok so now we kind of we kind of

00:46:32,060 --> 00:46:37,790
that's the gist of the platform itself

00:46:34,510 --> 00:46:38,930
so i think the and i'm doing pretty good

00:46:37,790 --> 00:46:40,730
on time at this point i think i got

00:46:38,930 --> 00:46:42,320
about five slides less than about 15

00:46:40,730 --> 00:46:43,640
minutes so i want to talk about the

00:46:42,320 --> 00:46:44,960
common security mount how many people

00:46:43,640 --> 00:46:49,340
have ever programmed something to use

00:46:44,960 --> 00:46:51,770
gssapi ok it's alright so here's the

00:46:49,340 --> 00:46:54,920
number one rule you have to remember any

00:46:51,770 --> 00:46:58,760
RFC that has generic or simple in the

00:46:54,920 --> 00:47:01,400
title is not ok so remember that so

00:46:58,760 --> 00:47:02,930
generic the gssapi generic security

00:47:01,400 --> 00:47:06,710
services application programming

00:47:02,930 --> 00:47:10,040
interface in the way the gssapi works is

00:47:06,710 --> 00:47:13,580
that it's it's an interface that you can

00:47:10,040 --> 00:47:16,250
code against right so the client will do

00:47:13,580 --> 00:47:17,660
in an it security context it'll send a

00:47:16,250 --> 00:47:18,950
serialized version of that security

00:47:17,660 --> 00:47:20,720
buffer over the wire to the server the

00:47:18,950 --> 00:47:22,940
server takes that hands it off to an

00:47:20,720 --> 00:47:24,740
accept security context and then it's

00:47:22,940 --> 00:47:27,290
it's up to whatever mechanism is

00:47:24,740 --> 00:47:29,690
implementing that gssapi interface

00:47:27,290 --> 00:47:33,710
that's negotiated through through oh I

00:47:29,690 --> 00:47:35,390
DS basically it's set by Oh a DS to do

00:47:33,710 --> 00:47:36,710
the right thing so your application

00:47:35,390 --> 00:47:39,080
doesn't have to know anything so if you

00:47:36,710 --> 00:47:40,609
wanted to change what mechanism you are

00:47:39,080 --> 00:47:42,200
using for authentication you wouldn't

00:47:40,609 --> 00:47:44,000
have to rebuild or rewrite your

00:47:42,200 --> 00:47:48,530
applications you just have to you know

00:47:44,000 --> 00:47:49,760
link in another gssapi library now that

00:47:48,530 --> 00:47:51,350
was okay except for you only got one

00:47:49,760 --> 00:47:53,060
mechanism and the client and the server

00:47:51,350 --> 00:47:55,370
had no way to determine which

00:47:53,060 --> 00:47:56,900
one they actually wanted so they had to

00:47:55,370 --> 00:47:58,310
know beforehand so then we have this

00:47:56,900 --> 00:48:01,490
thing called simple protected

00:47:58,310 --> 00:48:03,110
negotiation of gssapi SP nego and

00:48:01,490 --> 00:48:05,090
microsoft's ones are really sort of

00:48:03,110 --> 00:48:07,820
brought it to bear in Windows 2000 SP

00:48:05,090 --> 00:48:10,510
nego sends a list of oils and says these

00:48:07,820 --> 00:48:13,790
are the ones that I know are actually

00:48:10,510 --> 00:48:15,350
the clients sins the server has to send

00:48:13,790 --> 00:48:16,850
back there can be multiple steps in the

00:48:15,350 --> 00:48:18,080
negotiation but the service in Chile

00:48:16,850 --> 00:48:19,640
sends back and says these are these are

00:48:18,080 --> 00:48:21,110
the woods of the authentication

00:48:19,640 --> 00:48:22,700
mechanisms that I know which ones do you

00:48:21,110 --> 00:48:25,370
support and then the client pics wine

00:48:22,700 --> 00:48:27,890
and Sansa security input token you know

00:48:25,370 --> 00:48:29,480
an input buffer with that represented

00:48:27,890 --> 00:48:31,940
that particular security mechanism that

00:48:29,480 --> 00:48:33,460
it wants to support and you see this

00:48:31,940 --> 00:48:35,360
this is our windows client support

00:48:33,460 --> 00:48:37,220
Kerberos and ntlm authentication

00:48:35,360 --> 00:48:39,050
depending upon whatever the environment

00:48:37,220 --> 00:48:41,450
actually supports and you see this in

00:48:39,050 --> 00:48:44,300
single sign on in like web applications

00:48:41,450 --> 00:48:46,340
where there's an HTTP negotiate protocol

00:48:44,300 --> 00:48:48,530
that actually supports SP nego then you

00:48:46,340 --> 00:48:50,510
also have this thing called sazzle right

00:48:48,530 --> 00:48:52,010
which shows up in ldap RFC's and it's

00:48:50,510 --> 00:48:58,370
simple authentication and security layer

00:48:52,010 --> 00:49:00,260
and sazzle has a gssapi mechanism right

00:48:58,370 --> 00:49:02,510
so you can negotiate that you want to

00:49:00,260 --> 00:49:04,430
use gssapi but you still have to already

00:49:02,510 --> 00:49:06,260
know which gssapi mechanism you want to

00:49:04,430 --> 00:49:08,720
use so microsoft came up with GS SSP

00:49:06,260 --> 00:49:10,580
nego which means that you have sazzle to

00:49:08,720 --> 00:49:11,930
negotiate with authentication mechanism

00:49:10,580 --> 00:49:15,740
that you want to use and you select

00:49:11,930 --> 00:49:17,300
espe- it's a p.i mechanism you want to

00:49:15,740 --> 00:49:19,610
use so it's like multiple layers on an

00:49:17,300 --> 00:49:21,890
onion the thing is nobody should ever

00:49:19,610 --> 00:49:24,080
have to write this again and again and

00:49:21,890 --> 00:49:25,340
again there should be a single library

00:49:24,080 --> 00:49:28,340
that you code against you how Windows

00:49:25,340 --> 00:49:30,650
developers do it there's sspi that's all

00:49:28,340 --> 00:49:33,560
they do sspi is signature compatible

00:49:30,650 --> 00:49:35,330
with g SS so for example it's probably

00:49:33,560 --> 00:49:39,430
you know getting to the point where i

00:49:35,330 --> 00:49:39,430
can kind of i can kind of wrap things up

00:49:40,030 --> 00:49:48,430
let's see all right i want to stay there

00:49:44,680 --> 00:49:48,430
you bring up another window

00:49:51,050 --> 00:50:01,500
I'm gonna bring out some example code

00:49:53,310 --> 00:50:03,650
just to give you an idea CBS VN all

00:50:01,500 --> 00:50:03,650
right

00:50:10,260 --> 00:50:12,320
you

00:50:16,330 --> 00:50:25,960
okay this line right here this is

00:50:23,410 --> 00:50:28,290
basically this is this is all that this

00:50:25,960 --> 00:50:36,850
app has to do you can't see that can you

00:50:28,290 --> 00:50:38,170
hold on terminal change profile is that

00:50:36,850 --> 00:50:42,550
better still can't see what the

00:50:38,170 --> 00:50:46,810
highlight can you can you see that yeah

00:50:42,550 --> 00:50:48,550
yeah ok so this g SSM except security

00:50:46,810 --> 00:50:50,080
context is the server side call that

00:50:48,550 --> 00:50:51,580
basically takes the input buffer that

00:50:50,080 --> 00:50:54,190
the client sends it and this is all it

00:50:51,580 --> 00:50:56,650
has to do in order to do authentication

00:50:54,190 --> 00:50:58,120
so if you wanted to ride in ntlm or a

00:50:56,650 --> 00:50:59,280
Kerberos enabled application to

00:50:58,120 --> 00:51:01,320
integrating with Active Directory

00:50:59,280 --> 00:51:03,910
essentially you can link against the

00:51:01,320 --> 00:51:05,760
gssapi Kerberos libraries on the

00:51:03,910 --> 00:51:12,310
likewise platform and this just works

00:51:05,760 --> 00:51:15,130
alright so how does this just work so I

00:51:12,310 --> 00:51:22,390
have over here only change the profile

00:51:15,130 --> 00:51:24,460
again alright so i have this negotiate

00:51:22,390 --> 00:51:28,990
you know small server application that

00:51:24,460 --> 00:51:33,610
we that we've implemented the whole file

00:51:28,990 --> 00:51:43,180
is 700 lines why does it take so long to

00:51:33,610 --> 00:51:46,780
count ooh yeah all right for some reason

00:51:43,180 --> 00:51:51,160
i guess i'm running out of swap the page

00:51:46,780 --> 00:51:53,500
cache is flushing now okay anyways trust

00:51:51,160 --> 00:51:55,620
me its own about 700 lines of code and a

00:51:53,500 --> 00:51:57,820
lot of is that is setting up threads

00:51:55,620 --> 00:52:01,180
setting up the socket listening on the

00:51:57,820 --> 00:52:04,180
socket yada yada yada ok so what i will

00:52:01,180 --> 00:52:10,450
do is I'm just going to put this in temp

00:52:04,180 --> 00:52:13,360
to lower my path and then you're going

00:52:10,450 --> 00:52:18,940
to run this on port 8080 and I'm going

00:52:13,360 --> 00:52:21,850
to bind to one ninety two dot one sixty

00:52:18,940 --> 00:52:25,380
eight dot 56 dot one alright so now this

00:52:21,850 --> 00:52:25,380
is just running in the background and

00:52:26,750 --> 00:52:31,130
I'm going to go back to my windows box

00:52:36,470 --> 00:52:45,510
somebody please fix my linux box so I

00:52:44,190 --> 00:52:47,280
was going to be really slick and I was

00:52:45,510 --> 00:52:52,200
going to show you how this application

00:52:47,280 --> 00:52:55,560
integration actually works but there we

00:52:52,200 --> 00:52:56,970
go yeah I've got some stuff that's sort

00:52:55,560 --> 00:53:01,470
of paging around all right let's see if

00:52:56,970 --> 00:53:04,470
we can give this a go so I'm logged in

00:53:01,470 --> 00:53:05,730
as an Active Directory user logged in as

00:53:04,470 --> 00:53:09,450
administrator so razor slash

00:53:05,730 --> 00:53:11,100
administrator and I'm going to go ahead

00:53:09,450 --> 00:53:16,500
and I'll just restart this network

00:53:11,100 --> 00:53:18,270
capture and then bring up Internet

00:53:16,500 --> 00:53:24,060
Explorer because I haven't configured

00:53:18,270 --> 00:53:26,070
Firefox and it's fine and I'm going to

00:53:24,060 --> 00:53:29,450
try to connect to one ninety two dot one

00:53:26,070 --> 00:53:35,010
sixty eight dot 56 one on port 8080

00:53:29,450 --> 00:53:37,620
right so it prompts me for login

00:53:35,010 --> 00:53:39,300
credentials right you can see that

00:53:37,620 --> 00:53:42,300
essentially all the server did is its

00:53:39,300 --> 00:53:44,820
impact this HTTP negotiate for the www

00:53:42,300 --> 00:53:46,560
authenticate header and so then the

00:53:44,820 --> 00:53:48,360
clients going to and it's set in this

00:53:46,560 --> 00:53:53,130
case it's not actually authenticating

00:53:48,360 --> 00:53:54,390
presby- espe- five Orion tliem this

00:53:53,130 --> 00:53:57,320
one's actually set up for auntie lynn

00:53:54,390 --> 00:53:59,520
testing so it's it's negotiate stage of

00:53:57,320 --> 00:54:02,610
ntlm so the clients actually going to

00:53:59,520 --> 00:54:07,710
prompt me for credentials so I'm going

00:54:02,610 --> 00:54:14,340
to put in razor G Carter and my password

00:54:07,710 --> 00:54:17,340
and it says congratulations gssapi ntlm

00:54:14,340 --> 00:54:21,260
authentication passed over here you know

00:54:17,340 --> 00:54:21,260
we see that it's it's gone through some

00:54:21,920 --> 00:54:27,600
right so this is actually the base64

00:54:24,870 --> 00:54:29,820
encoding of that gssapi security token

00:54:27,600 --> 00:54:32,070
that was passed across the wire all

00:54:29,820 --> 00:54:33,870
right and it just decodes that and then

00:54:32,070 --> 00:54:38,240
essentially all it does is it takes that

00:54:33,870 --> 00:54:38,240
blob and it feeds it into

00:54:44,579 --> 00:54:55,599
yeah 736 lines okay so Jesus accept all

00:54:53,890 --> 00:54:59,020
right essentially just takes that input

00:54:55,599 --> 00:55:00,250
buffer which was w buff assigns it to

00:54:59,020 --> 00:55:02,740
the input description with the length

00:55:00,250 --> 00:55:05,619
and the value passes it into GSS except

00:55:02,740 --> 00:55:08,109
security context this will just continue

00:55:05,619 --> 00:55:09,369
as many steps as needed in tliem

00:55:08,109 --> 00:55:10,930
actually goes through a couple of passes

00:55:09,369 --> 00:55:12,819
this there's a type 1 type 2 and type 3

00:55:10,930 --> 00:55:16,300
message but you just keep calling this

00:55:12,819 --> 00:55:19,510
until you get g sss server complete and

00:55:16,300 --> 00:55:21,520
you're done and then you can you can go

00:55:19,510 --> 00:55:23,559
through other stages to find information

00:55:21,520 --> 00:55:28,089
about that particular user so for

00:55:23,559 --> 00:55:30,730
example the access token right which is

00:55:28,089 --> 00:55:32,530
the users list of groups we will

00:55:30,730 --> 00:55:34,990
actually pass this back simply if you do

00:55:32,530 --> 00:55:36,700
a GSS inquire security context you'll

00:55:34,990 --> 00:55:39,190
actually get that information back this

00:55:36,700 --> 00:55:40,920
could be the pack as its defined inside

00:55:39,190 --> 00:55:43,690
the Kerberos ticket or this could be the

00:55:40,920 --> 00:55:47,530
net user info 3 structure from the ntlm

00:55:43,690 --> 00:55:48,940
authentication itself and then you know

00:55:47,530 --> 00:55:51,369
internally inside the likewise stack

00:55:48,940 --> 00:55:53,049
we're all sid based and we convert to

00:55:51,369 --> 00:55:54,400
you ids and g IDs on the boundary when

00:55:53,049 --> 00:55:55,900
we need to write something to a file or

00:55:54,400 --> 00:55:57,730
when we need to check your unit resource

00:55:55,900 --> 00:55:59,410
but internally you know we're all sid

00:55:57,730 --> 00:56:03,369
based so this works out really well and

00:55:59,410 --> 00:56:04,660
then the the security I don't think I

00:56:03,369 --> 00:56:05,589
have the security descriptors but if

00:56:04,660 --> 00:56:07,630
you've ever dealt with security

00:56:05,589 --> 00:56:10,930
descriptors it's essentially just like a

00:56:07,630 --> 00:56:13,480
list of SIDS with 32-bit access masks so

00:56:10,930 --> 00:56:15,190
the gssapi interface will support going

00:56:13,480 --> 00:56:17,349
directly DNT land which is what we did

00:56:15,190 --> 00:56:19,839
in that example also it will support SP

00:56:17,349 --> 00:56:22,119
nego these two pieces are actually

00:56:19,839 --> 00:56:24,970
pulled from the the MIT code but this

00:56:22,119 --> 00:56:27,549
type of dss interface is again sspi

00:56:24,970 --> 00:56:29,020
compatible with windows and supports

00:56:27,549 --> 00:56:31,150
it's plumbed into essentially all of

00:56:29,020 --> 00:56:34,690
those protocols right so our DC RPC

00:56:31,150 --> 00:56:36,339
runtime has all of the wrap and unwrap

00:56:34,690 --> 00:56:40,900
the signing and sealing that's actually

00:56:36,339 --> 00:56:43,930
actually implemented in the DSS the DC

00:56:40,900 --> 00:56:46,359
RPC buying calls by using those same GSS

00:56:43,930 --> 00:56:48,849
calls so it's I mean I just don't want

00:56:46,359 --> 00:56:50,890
anybody to ever have to write parsing

00:56:48,849 --> 00:56:52,839
ntlm packets again there's just no need

00:56:50,890 --> 00:56:54,069
for it you should

00:56:52,839 --> 00:56:55,749
have a platform you should be able to

00:56:54,069 --> 00:56:57,339
build on that platform and you should be

00:56:55,749 --> 00:56:59,049
able to write your applications and be

00:56:57,339 --> 00:57:00,999
able to leverage work that's that's

00:56:59,049 --> 00:57:03,640
already been done so my time is almost

00:57:00,999 --> 00:57:05,259
up I'll make these slides available

00:57:03,640 --> 00:57:07,930
they've got a few more details in terms

00:57:05,259 --> 00:57:09,670
of authentication api's the top ones

00:57:07,930 --> 00:57:15,339
clear text the bottom ones for doing raw

00:57:09,670 --> 00:57:18,729
non GSS ntlm building blocks access

00:57:15,339 --> 00:57:20,349
tokens okay so if you want the likewise

00:57:18,729 --> 00:57:22,119
platform you can grab it from gets

00:57:20,349 --> 00:57:24,400
pretty straightforward we've recently

00:57:22,119 --> 00:57:27,039
moved to a build system called make it I

00:57:24,400 --> 00:57:29,259
cannot sing its praises enough it cut

00:57:27,039 --> 00:57:33,099
our build times x over sixty percent it

00:57:29,259 --> 00:57:35,469
has proved that you know that

00:57:33,099 --> 00:57:38,079
directories and recursive directories is

00:57:35,469 --> 00:57:39,369
just you know harmful to make okay what

00:57:38,079 --> 00:57:43,210
is the name of that paper my brains gone

00:57:39,369 --> 00:57:44,529
into a fart what is it harmful yeah it's

00:57:43,210 --> 00:57:47,140
it's something like that I mean this is

00:57:44,529 --> 00:57:50,469
like proof for it and it's a replacement

00:57:47,140 --> 00:57:52,299
for libtool and autocom and its really

00:57:50,469 --> 00:57:53,589
been amazingly fast so look at the

00:57:52,299 --> 00:57:56,109
readme file it's pretty straightforward

00:57:53,589 --> 00:57:57,400
to do completely paralyzed the entire

00:57:56,109 --> 00:57:59,499
building across deep directory

00:57:57,400 --> 00:58:01,719
structures we do support rpms and debs

00:57:59,499 --> 00:58:03,999
the build systems mainly for linux and

00:58:01,719 --> 00:58:07,450
freebsd at the moment and then i'm going

00:58:03,999 --> 00:58:09,160
to finish up on a soapbox okay so this

00:58:07,450 --> 00:58:12,329
is my soapbox i was involved in San

00:58:09,160 --> 00:58:14,680
before 11 years and it was a tremendous

00:58:12,329 --> 00:58:16,960
value to me I got a lot of really good

00:58:14,680 --> 00:58:18,969
friends out of it I did a lot of really

00:58:16,960 --> 00:58:22,029
interesting work but my plea to

00:58:18,969 --> 00:58:23,380
developers is that open source its

00:58:22,029 --> 00:58:27,999
greatest strength is also its greatest

00:58:23,380 --> 00:58:30,039
weakness okay it's great in that you can

00:58:27,999 --> 00:58:31,660
continue to work on a project as you

00:58:30,039 --> 00:58:34,809
move from job to job you can make a

00:58:31,660 --> 00:58:36,910
living working on that however the

00:58:34,809 --> 00:58:38,529
advantage of commercial software is that

00:58:36,910 --> 00:58:41,499
you have to move from project to project

00:58:38,529 --> 00:58:44,170
and so my plea to developers in the open

00:58:41,499 --> 00:58:46,569
source community is to move from project

00:58:44,170 --> 00:58:49,059
to project because you're smarter than

00:58:46,569 --> 00:58:50,950
just staying in one place if you stay in

00:58:49,059 --> 00:58:52,779
one tight-knit community that doesn't

00:58:50,950 --> 00:58:54,249
have a lot of turnover you'll start to

00:58:52,779 --> 00:58:55,690
believe the down is up and up is down

00:58:54,249 --> 00:58:57,219
and you'll start to believe that the

00:58:55,690 --> 00:58:59,380
best practices of that community are the

00:58:57,219 --> 00:59:00,969
best practices of that industry so I'm a

00:58:59,380 --> 00:59:02,829
firm believer in open source I think

00:59:00,969 --> 00:59:05,180
it's got tremendous value in so many

00:59:02,829 --> 00:59:07,640
different ways but I think that it

00:59:05,180 --> 00:59:09,530
very you have to be very careful that

00:59:07,640 --> 00:59:11,690
you don't professionally stagnate okay

00:59:09,530 --> 00:59:13,880
so that's one that's one plea and this

00:59:11,690 --> 00:59:16,069
is just personal second one is listen to

00:59:13,880 --> 00:59:17,990
your end users without them you don't

00:59:16,069 --> 00:59:20,359
have anything to do and the third thing

00:59:17,990 --> 00:59:22,400
is to look outward not inward okay don't

00:59:20,359 --> 00:59:24,200
become incestuous in the community but

00:59:22,400 --> 00:59:28,520
always look outward to see what sale see

00:59:24,200 --> 00:59:30,170
what else is going on okay so you know

00:59:28,520 --> 00:59:32,180
that's the end of the talk I hope it's

00:59:30,170 --> 00:59:33,410
been helpful I'm more than happy to sort

00:59:32,180 --> 00:59:35,480
of hang around and answer some questions

00:59:33,410 --> 00:59:37,190
out in the hall I'll make the slides

00:59:35,480 --> 00:59:39,079
available both at the conference and if

00:59:37,190 --> 00:59:41,089
anybody wants them but I'll leave that

00:59:39,079 --> 00:59:44,839
one kind of up so I've got like 30

00:59:41,089 --> 00:59:46,339
seconds for questions so anything before

00:59:44,839 --> 00:59:48,230
we wrap up is everybody's head going to

00:59:46,339 --> 01:00:10,250
like explode or go to sleep or something

00:59:48,230 --> 01:00:15,230
yeah yep yep yes yep you mean like an

01:00:10,250 --> 01:00:17,270
RPC service yes yes server and client

01:00:15,230 --> 01:00:18,829
side so the question was if you haven't

01:00:17,270 --> 01:00:20,839
really dealt with this before but so so

01:00:18,829 --> 01:00:23,839
we support named pipes client and server

01:00:20,839 --> 01:00:25,760
side so you can have an RPC application

01:00:23,839 --> 01:00:29,150
running on a Windows client accessing

01:00:25,760 --> 01:00:30,770
server and getting that same integrated

01:00:29,150 --> 01:00:32,930
authentication with an RPC service

01:00:30,770 --> 01:00:36,619
running on Linux box also vice versa as

01:00:32,930 --> 01:00:39,790
well okay yay okay there was another

01:00:36,619 --> 01:00:39,790
question yeah

01:00:52,910 --> 01:00:56,369
yeah it's probably so the question was

01:00:54,989 --> 01:00:58,259
really about likewise enterprise

01:00:56,369 --> 01:01:00,180
deployment in terms of just coming from

01:00:58,259 --> 01:01:02,400
a Linux background and is there is there

01:01:00,180 --> 01:01:04,079
some white papers I mean the thing is

01:01:02,400 --> 01:01:06,329
the difficulty in any sort of

01:01:04,079 --> 01:01:08,069
integration strategy is that you really

01:01:06,329 --> 01:01:10,229
have to understand both sides of the

01:01:08,069 --> 01:01:18,229
fence which is a huge amount to swallow

01:01:10,229 --> 01:01:20,789
starting off yeah yeah I mean it's um

01:01:18,229 --> 01:01:22,019
you know it's it's probably a question

01:01:20,789 --> 01:01:23,069
we need to we should take offline

01:01:22,019 --> 01:01:24,809
because it's probably more than i can

01:01:23,069 --> 01:01:26,519
answer right now so if i mean if you're

01:01:24,809 --> 01:01:30,420
free i can we can talk in the hall after

01:01:26,519 --> 01:01:32,359
this okay what was your name Dave okay

01:01:30,420 --> 01:01:35,519
all right all right any other questions

01:01:32,359 --> 01:01:40,039
wrap up for a trip and embarrass myself

01:01:35,519 --> 01:01:40,039
and end up on YouTube okay thank you

01:01:53,150 --> 01:01:56,960
what about this I can help you like it

01:01:55,099 --> 01:01:59,950
we have the same problem what would

01:01:56,960 --> 01:01:59,950
happen a few years

01:02:02,840 --> 01:02:05,980
let's put the word out

01:02:07,460 --> 01:02:09,520
you

01:03:15,150 --> 01:03:21,910
as a service leader in cloud computing

01:03:18,430 --> 01:03:23,500
all we do is hosting computing to us the

01:03:21,910 --> 01:03:25,450
cloud is just the next generation of

01:03:23,500 --> 01:03:27,400
hosting and if someone who's been in the

01:03:25,450 --> 01:03:29,349
hosting industry for 12 years we feel

01:03:27,400 --> 01:03:30,520
we're in a unique position to really

01:03:29,349 --> 01:03:32,650
help bring these two worlds together

01:03:30,520 --> 01:03:34,990
these different sets of technologies and

01:03:32,650 --> 01:03:37,300
to help companies embrace this new world

01:03:34,990 --> 01:03:39,310
in this great new tool that allows

01:03:37,300 --> 01:03:41,920
faster innovation not only is it about

01:03:39,310 --> 01:03:46,930
us being responsive and accountable but

01:03:41,920 --> 01:03:50,130
it's about us doing more for you whether

01:03:46,930 --> 01:03:53,710
less nos that works the way that you do

01:03:50,130 --> 01:03:57,839
across all your devices HP Slate and

01:03:53,710 --> 01:03:57,839

YouTube URL: https://www.youtube.com/watch?v=Pz2dHZPm1Rk


