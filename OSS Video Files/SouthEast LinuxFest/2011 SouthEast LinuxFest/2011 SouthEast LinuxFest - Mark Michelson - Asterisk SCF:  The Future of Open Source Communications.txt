Title: 2011 SouthEast LinuxFest - Mark Michelson - Asterisk SCF:  The Future of Open Source Communications
Publication date: 2012-02-22
Playlist: 2011 SouthEast LinuxFest
Description: 
	2011 SouthEast LinuxFest - Mark Michelson - Asterisk SCF:  The Future of Open Source Communications

This video is licensed under Creative Commons Attribution 3.0 Unported License.
Captions: 
	00:00:01,159 --> 00:00:07,319
the following presentation was recorded

00:00:04,230 --> 00:00:09,900
at the 2011 southeast linux fest in

00:00:07,319 --> 00:00:11,400
Spartanburg South Carolina it is

00:00:09,900 --> 00:00:14,219
licensed under a creative commons

00:00:11,400 --> 00:00:18,779
license for more information about the

00:00:14,219 --> 00:00:22,199
southeast linux fest visit wwcc linux

00:00:18,779 --> 00:00:24,060
fest org the southeast linux fest would

00:00:22,199 --> 00:00:27,210
like to thank the following diamond and

00:00:24,060 --> 00:00:58,410
platinum sponsors in 2011 for helping

00:00:27,210 --> 00:01:00,539
make these videos possible everybody so

00:00:58,410 --> 00:01:02,820
i am mark Michaelson I am a software

00:01:00,539 --> 00:01:04,439
developer in Digium for those of you who

00:01:02,820 --> 00:01:06,960
are expecting a talk today by Brian

00:01:04,439 --> 00:01:10,080
John's he was unable to make it to this

00:01:06,960 --> 00:01:11,189
conference so I'm filling in for so what

00:01:10,080 --> 00:01:14,250
we're going to talk about today is

00:01:11,189 --> 00:01:15,930
asterisk SCF what it is and how it's

00:01:14,250 --> 00:01:17,369
going to make an impact in the world of

00:01:15,930 --> 00:01:19,400
open-source software and

00:01:17,369 --> 00:01:23,400
telecommunications and just in general

00:01:19,400 --> 00:01:26,310
communications worldwide so to

00:01:23,400 --> 00:01:28,200
understand asterisk SCF i'm going to

00:01:26,310 --> 00:01:30,950
talk quite a bit here actually about the

00:01:28,200 --> 00:01:33,360
project that came before it asterisk I

00:01:30,950 --> 00:01:34,829
shouldn't say came it's still being

00:01:33,360 --> 00:01:37,770
worked on actively developed and

00:01:34,829 --> 00:01:39,869
everything but asterisk I mean it

00:01:37,770 --> 00:01:44,280
started in 1999 and still going strong

00:01:39,869 --> 00:01:45,750
here in 2011 so for those of you who

00:01:44,280 --> 00:01:47,340
aren't too familiar with asterisk I want

00:01:45,750 --> 00:01:49,950
to go over a little bit you know why is

00:01:47,340 --> 00:01:54,149
asterisk just it's a huge deal and i'm

00:01:49,950 --> 00:01:58,140
going to show you why so first of all

00:01:54,149 --> 00:02:00,689
we've done some statistics gathering and

00:01:58,140 --> 00:02:02,939
found that there are approximately 9800

00:02:00,689 --> 00:02:05,369
active development participants right

00:02:02,939 --> 00:02:08,090
now that's a huge number for an open

00:02:05,369 --> 00:02:11,819
source project and even more astounding

00:02:08,090 --> 00:02:14,030
the asterisk org membership is at

00:02:11,819 --> 00:02:17,550
approximately 73,000

00:02:14,030 --> 00:02:19,500
so to give you an idea again of how big

00:02:17,550 --> 00:02:21,120
that is that's enough people to fill up

00:02:19,500 --> 00:02:24,840
Lambeau Field in Green Bay Wisconsin

00:02:21,120 --> 00:02:26,190
where the packers play and so while

00:02:24,840 --> 00:02:28,170
we're talking about hypothetical

00:02:26,190 --> 00:02:31,680
situations like filling up stadiums and

00:02:28,170 --> 00:02:33,090
such we can talk about you know what you

00:02:31,680 --> 00:02:36,209
know what might you do if you had a

00:02:33,090 --> 00:02:39,860
million servers what could you do well

00:02:36,209 --> 00:02:42,450
you could have essentially a Google

00:02:39,860 --> 00:02:44,250
Google's worth of servers you'd have two

00:02:42,450 --> 00:02:46,170
times what Microsoft has you could

00:02:44,250 --> 00:02:48,450
actually start up ten Facebook's with a

00:02:46,170 --> 00:02:51,380
million servers well what we found

00:02:48,450 --> 00:02:53,400
though is that worldwide we've counted

00:02:51,380 --> 00:02:58,200
approximately a million servers running

00:02:53,400 --> 00:03:00,870
asterisk and in fact to see the

00:02:58,200 --> 00:03:03,090
distribution of it we have this map here

00:03:00,870 --> 00:03:05,790
which shows the countries that are

00:03:03,090 --> 00:03:08,400
running asterisk right now are in orange

00:03:05,790 --> 00:03:10,650
and the ones that are greyed out we just

00:03:08,400 --> 00:03:12,510
don't actually know if they're running

00:03:10,650 --> 00:03:18,630
asterisk or not but we suspect they

00:03:12,510 --> 00:03:20,310
probably are and they're not just

00:03:18,630 --> 00:03:22,920
running asterisk they're constantly

00:03:20,310 --> 00:03:24,930
running it in fact we predict that

00:03:22,920 --> 00:03:26,519
approximately 400 calls per second are

00:03:24,930 --> 00:03:32,040
being made on average around the world

00:03:26,519 --> 00:03:39,810
using astro servers so it is in fact a

00:03:32,040 --> 00:03:42,480
really big deal so when you start

00:03:39,810 --> 00:03:44,069
talking about how great asterisk is you

00:03:42,480 --> 00:03:45,150
might say to yourself well why in the

00:03:44,069 --> 00:03:47,099
world would there be this new project

00:03:45,150 --> 00:03:52,440
this asterisk SCF project well let's

00:03:47,099 --> 00:03:54,209
talk about that a little bit so the

00:03:52,440 --> 00:03:56,700
community is the driving force behind

00:03:54,209 --> 00:03:58,290
everything of course and the community

00:03:56,700 --> 00:04:02,069
has contributed a whole lot asterisk

00:03:58,290 --> 00:04:03,690
they've done great things for it and the

00:04:02,069 --> 00:04:07,049
thing is though the community has grown

00:04:03,690 --> 00:04:11,069
and they have more sophisticated sets of

00:04:07,049 --> 00:04:13,530
needs so this we couldn't predict the

00:04:11,069 --> 00:04:17,310
future if any of you know the story

00:04:13,530 --> 00:04:18,810
behind asterisks inception you know it's

00:04:17,310 --> 00:04:20,310
not as if there were a group of people

00:04:18,810 --> 00:04:22,320
who sat down and said you know what I'm

00:04:20,310 --> 00:04:23,909
going to make myself an open source you

00:04:22,320 --> 00:04:25,990
know telephony communications project

00:04:23,909 --> 00:04:28,900
and it's going to be huge

00:04:25,990 --> 00:04:31,630
sted what happened was the CEO of a

00:04:28,900 --> 00:04:33,340
small company decided I need a PBX I'm

00:04:31,630 --> 00:04:36,130
too cheap to buy one i'm going to write

00:04:33,340 --> 00:04:37,930
my own and so since then it's just been

00:04:36,130 --> 00:04:39,370
thanks to the community and and other

00:04:37,930 --> 00:04:43,630
people being interested in it that it's

00:04:39,370 --> 00:04:46,539
grown to what it is today the problem is

00:04:43,630 --> 00:04:50,139
the future is just it's a whole lot more

00:04:46,539 --> 00:04:52,599
than just phones it's all about unified

00:04:50,139 --> 00:04:54,580
communications as they say it's all

00:04:52,599 --> 00:04:59,740
about video it's about messaging it's

00:04:54,580 --> 00:05:01,030
about presence and all that so the

00:04:59,740 --> 00:05:02,889
community has been saying for a while

00:05:01,030 --> 00:05:04,720
now they've been telling us you know we

00:05:02,889 --> 00:05:06,490
need this and we need that and in a lot

00:05:04,720 --> 00:05:07,900
of cases when they ask us you know they

00:05:06,490 --> 00:05:09,430
say we need this feature added to

00:05:07,900 --> 00:05:11,139
asterisk most of the time we'll jump on

00:05:09,430 --> 00:05:13,990
it will say we can do that we're going

00:05:11,139 --> 00:05:15,580
to do that here you go and the problem

00:05:13,990 --> 00:05:19,090
though is that there's you know several

00:05:15,580 --> 00:05:21,250
of these features though that would

00:05:19,090 --> 00:05:24,039
require us to just pretty much tear the

00:05:21,250 --> 00:05:26,380
entire code apart in order to do it so

00:05:24,039 --> 00:05:29,590
the problem is we didn't want to do that

00:05:26,380 --> 00:05:32,050
because if we were to do that then what

00:05:29,590 --> 00:05:33,729
our product actually be asterisk anymore

00:05:32,050 --> 00:05:38,490
or would it see store would it actually

00:05:33,729 --> 00:05:41,110
be something completely different so

00:05:38,490 --> 00:05:42,789
instead of just completely ripping apart

00:05:41,110 --> 00:05:45,099
asterisk to try to give the features

00:05:42,789 --> 00:05:48,849
that people wanted we decided to do

00:05:45,099 --> 00:05:52,440
something radical instead we created a

00:05:48,849 --> 00:05:55,630
brand new project called the asterisk

00:05:52,440 --> 00:05:58,810
scalable communications framework also

00:05:55,630 --> 00:06:00,819
known as asterisk SCF it's a completely

00:05:58,810 --> 00:06:03,099
new project from asterisk it's not an

00:06:00,819 --> 00:06:04,930
add-on or any well I mean it can be used

00:06:03,099 --> 00:06:07,000
in addition two asterisks but it's not

00:06:04,930 --> 00:06:10,210
necessarily just a software add-on for

00:06:07,000 --> 00:06:13,389
it is completely separate an asterisk

00:06:10,210 --> 00:06:16,240
SCF has goals in place specifically for

00:06:13,389 --> 00:06:23,919
performance for scalability fault

00:06:16,240 --> 00:06:26,050
tolerance and extensibility so for those

00:06:23,919 --> 00:06:27,729
of you who may be sort of blurry about

00:06:26,050 --> 00:06:29,889
what the difference is between asterisk

00:06:27,729 --> 00:06:31,389
and asterisk SCF there's a there's an

00:06:29,889 --> 00:06:35,800
analogy i'm going to use here and say

00:06:31,389 --> 00:06:38,560
it's a kit car versus parts so with

00:06:35,800 --> 00:06:39,820
asterisk what you get is you're buying

00:06:38,560 --> 00:06:42,580
essentially a kick

00:06:39,820 --> 00:06:44,380
are you can use the parts to your desire

00:06:42,580 --> 00:06:46,030
to make pretty much any sort of car you

00:06:44,380 --> 00:06:47,980
might imagine you can make a you know a

00:06:46,030 --> 00:06:49,660
little you know a little coupe you can

00:06:47,980 --> 00:06:52,000
make a sedan you can pick a sports car

00:06:49,660 --> 00:06:54,010
you could you know with a lot of effort

00:06:52,000 --> 00:06:56,410
you can even make it into a bus that

00:06:54,010 --> 00:06:58,140
sort of thing but you're not really

00:06:56,410 --> 00:07:01,750
going to be able to expand beyond that

00:06:58,140 --> 00:07:03,910
with asterisk SCF instead you're getting

00:07:01,750 --> 00:07:06,940
a collection of independent parts which

00:07:03,910 --> 00:07:08,680
you go make a small coupe or sedan or a

00:07:06,940 --> 00:07:11,110
bus with but you could also make a

00:07:08,680 --> 00:07:14,080
speedboat or you can make a spaceship or

00:07:11,110 --> 00:07:20,320
you can make a giant robot whatever you

00:07:14,080 --> 00:07:23,440
wanted to do another analogy is if you

00:07:20,320 --> 00:07:26,020
take out this amazing band here and you

00:07:23,440 --> 00:07:27,940
decided I really want to modify this to

00:07:26,020 --> 00:07:30,460
have more capacity I want it to be able

00:07:27,940 --> 00:07:32,710
to do more I want to I want to make it

00:07:30,460 --> 00:07:36,280
do do more than what it currently can

00:07:32,710 --> 00:07:39,430
right now the problem is you would end

00:07:36,280 --> 00:07:42,940
up with this awful Franken van thing and

00:07:39,430 --> 00:07:45,550
it really the problem is it just

00:07:42,940 --> 00:07:47,800
wouldn't be you know what it is that it

00:07:45,550 --> 00:07:50,530
might sort of do what you want but it

00:07:47,800 --> 00:07:52,270
would be kind of ugly with asterisk SCF

00:07:50,530 --> 00:07:55,120
you can think of it more like a train

00:07:52,270 --> 00:07:57,430
for instance where if you need to add

00:07:55,120 --> 00:07:59,830
more to it it's just as easy as adding

00:07:57,430 --> 00:08:01,780
new cars new cars in the middle and it

00:07:59,830 --> 00:08:04,720
can expand as much or as little as you

00:08:01,780 --> 00:08:07,600
want and in fact like with a train you

00:08:04,720 --> 00:08:11,190
could even put new cars in while the

00:08:07,600 --> 00:08:11,190
Train is actually running on the track

00:08:12,300 --> 00:08:18,760
so asterisk SCF is a distributed

00:08:15,460 --> 00:08:20,890
application so here's what a distributed

00:08:18,760 --> 00:08:22,630
application looks like this may not make

00:08:20,890 --> 00:08:24,700
a whole lot of sense at the moment but

00:08:22,630 --> 00:08:26,290
we're going to be breaking this diagram

00:08:24,700 --> 00:08:29,710
down piece by piece here in just a

00:08:26,290 --> 00:08:31,780
moment so first the first goal we talked

00:08:29,710 --> 00:08:33,969
about was how asterisk SCF is meant to

00:08:31,780 --> 00:08:37,030
be very you know it's supposed to have

00:08:33,969 --> 00:08:41,349
very good performance so if we look at

00:08:37,030 --> 00:08:43,510
this diagram here you can see that we

00:08:41,349 --> 00:08:45,340
have four different components here

00:08:43,510 --> 00:08:46,930
we've got a session manager a routing

00:08:45,340 --> 00:08:50,080
component a bridging component and a

00:08:46,930 --> 00:08:52,630
media services component and in this

00:08:50,080 --> 00:08:53,620
scenario you can see that there's a

00:08:52,630 --> 00:08:55,120
single phone over the

00:08:53,620 --> 00:08:56,620
air which is supposed to represent you

00:08:55,120 --> 00:08:59,320
know not a whole lot of people using the

00:08:56,620 --> 00:09:01,029
system necessarily and the thing is

00:08:59,320 --> 00:09:03,130
though each of these components rather

00:09:01,029 --> 00:09:05,529
than being say loadable modules into

00:09:03,130 --> 00:09:07,420
your one application each one is an

00:09:05,529 --> 00:09:10,300
independent application meaning that

00:09:07,420 --> 00:09:13,089
each one could potentially be running on

00:09:10,300 --> 00:09:19,660
its own core or own CPU of a computer

00:09:13,089 --> 00:09:22,870
somewhere but asterisk us yes that is

00:09:19,660 --> 00:09:25,150
scalable scales well too because they

00:09:22,870 --> 00:09:26,560
are their own applications I mean of

00:09:25,150 --> 00:09:29,440
course obviously you could run them all

00:09:26,560 --> 00:09:33,460
in the same server but as your load

00:09:29,440 --> 00:09:37,029
increases it's very easy and just works

00:09:33,460 --> 00:09:39,610
natively to instead for instance in this

00:09:37,029 --> 00:09:41,110
case we've moved the session manager and

00:09:39,610 --> 00:09:42,850
the media services onto their own

00:09:41,110 --> 00:09:45,330
servers while the routing and bridging

00:09:42,850 --> 00:09:48,460
are still on one server together and

00:09:45,330 --> 00:09:50,470
then as you grow even more you can just

00:09:48,460 --> 00:09:53,110
you can actually add in multiple servers

00:09:50,470 --> 00:09:54,490
to use for the session manager and media

00:09:53,110 --> 00:09:56,110
services and now you can start putting

00:09:54,490 --> 00:10:01,990
your routing and bridging services on

00:09:56,110 --> 00:10:04,029
separate servers one of the big things

00:10:01,990 --> 00:10:05,920
that people have been asking of us for

00:10:04,029 --> 00:10:09,160
many many many many many many many many

00:10:05,920 --> 00:10:11,380
movements now is for fault tolerance so

00:10:09,160 --> 00:10:15,029
asterisk SCF is designed to be fault

00:10:11,380 --> 00:10:17,830
tolerant and the way it does this is

00:10:15,029 --> 00:10:20,170
through state replication in other words

00:10:17,830 --> 00:10:23,470
every session every service rather that

00:10:20,170 --> 00:10:26,020
we write is capable of replicating its

00:10:23,470 --> 00:10:29,380
state to a backup server so that if the

00:10:26,020 --> 00:10:31,390
primary were to go bad the backup would

00:10:29,380 --> 00:10:33,880
have all the information currently about

00:10:31,390 --> 00:10:40,089
whatever is going on and could be failed

00:10:33,880 --> 00:10:44,080
over to an asterisk SCF is designed to

00:10:40,089 --> 00:10:46,120
be extensible so even while you have all

00:10:44,080 --> 00:10:49,270
these services running it's perfectly

00:10:46,120 --> 00:10:52,740
possible for you to you know upgrade a

00:10:49,270 --> 00:10:54,880
component or download some amazing new

00:10:52,740 --> 00:10:56,110
application that someone has written or

00:10:54,880 --> 00:10:58,510
possibly that you've written yourself

00:10:56,110 --> 00:11:02,940
and just place it into the cluster and

00:10:58,510 --> 00:11:02,940
have it just show up and be available

00:11:04,620 --> 00:11:09,150
so the extensibility part is in my

00:11:08,130 --> 00:11:11,370
opinion probably one of the biggest

00:11:09,150 --> 00:11:15,150
things that I I think it's neat about

00:11:11,370 --> 00:11:16,290
asterisk SCF so one of the things we

00:11:15,150 --> 00:11:20,370
have we're going to have is just

00:11:16,290 --> 00:11:24,750
published and well-documented api's so

00:11:20,370 --> 00:11:26,760
it's very easy to to to do what it is

00:11:24,750 --> 00:11:28,080
you need to do and possibly just just

00:11:26,760 --> 00:11:31,740
hook yourself into the system as

00:11:28,080 --> 00:11:34,070
necessary extension points extension

00:11:31,740 --> 00:11:38,010
points is a fancy way of saying hooks

00:11:34,070 --> 00:11:40,560
basically if if we have we have we write

00:11:38,010 --> 00:11:43,410
our own components and there are times

00:11:40,560 --> 00:11:45,030
where we realize that you know we've hit

00:11:43,410 --> 00:11:47,130
this point in the processing we're

00:11:45,030 --> 00:11:50,130
really this is a business logic decision

00:11:47,130 --> 00:11:54,150
so we have the ability for you to hook

00:11:50,130 --> 00:11:55,620
in in a lot of places and and affect the

00:11:54,150 --> 00:11:57,210
operation that way without necessarily

00:11:55,620 --> 00:12:02,130
having to write your own entire

00:11:57,210 --> 00:12:05,670
application we also as part of our goal

00:12:02,130 --> 00:12:06,840
are going to be operating the software

00:12:05,670 --> 00:12:10,140
is going to be able to run on many

00:12:06,840 --> 00:12:12,030
operating systems and another thing

00:12:10,140 --> 00:12:14,640
that's kind of cool is the fact that our

00:12:12,030 --> 00:12:17,190
api's are going to be available in many

00:12:14,640 --> 00:12:18,900
programming languages as well if you

00:12:17,190 --> 00:12:22,860
want to current list of what those are

00:12:18,900 --> 00:12:33,930
that includes C++ Objective C Java

00:12:22,860 --> 00:12:36,060
Python PHP Ruby and I think that's it so

00:12:33,930 --> 00:12:38,220
I've got a slide here about the asterisk

00:12:36,060 --> 00:12:40,530
SCF architecture and I'm afraid it's

00:12:38,220 --> 00:12:44,160
probably mostly unreadable to people in

00:12:40,530 --> 00:12:48,720
here but so I'm just going to skip that

00:12:44,160 --> 00:12:49,860
one and but the thing is the one of the

00:12:48,720 --> 00:12:52,350
big things of course I actually

00:12:49,860 --> 00:12:54,330
mentioned this earlier is that we don't

00:12:52,350 --> 00:12:55,710
put business logic in here instead that

00:12:54,330 --> 00:12:59,280
is up to the people who are writing

00:12:55,710 --> 00:13:01,380
applications for asterisk SCF so it

00:12:59,280 --> 00:13:03,630
actually reminds me a lot of Mad Dogs

00:13:01,380 --> 00:13:05,580
talk about how there's no to business

00:13:03,630 --> 00:13:07,530
cases that are ever the same and so

00:13:05,580 --> 00:13:09,210
we're trying to avoid the whole square

00:13:07,530 --> 00:13:11,640
pegs in the round holes like he had

00:13:09,210 --> 00:13:14,340
instead it we're trying to make it sort

00:13:11,640 --> 00:13:17,529
of maybe have be small and expanding it

00:13:14,340 --> 00:13:24,610
into the round hole as as the customer

00:13:17,529 --> 00:13:26,949
is it too so be prepared for this next

00:13:24,610 --> 00:13:33,360
slide I apologize for it but here we go

00:13:26,949 --> 00:13:37,230
asterisk SCF 1 point 0 plan features ok

00:13:33,360 --> 00:13:39,879
the point is is pretty feature poll that

00:13:37,230 --> 00:13:42,009
but I'm going to just talk about a

00:13:39,879 --> 00:13:44,259
couple of bullet points here on the left

00:13:42,009 --> 00:13:46,180
hand side one of the big things you'll

00:13:44,259 --> 00:13:48,220
see is it's this session oriented

00:13:46,180 --> 00:13:51,999
communications and below it it says sip

00:13:48,220 --> 00:13:55,149
and ISDN so of course being that

00:13:51,999 --> 00:13:57,519
asterisk is what spawned asterisk SCF we

00:13:55,149 --> 00:13:59,290
of course want to be able to support any

00:13:57,519 --> 00:14:00,910
sort of session based communications and

00:13:59,290 --> 00:14:02,850
so initially we're going for of course

00:14:00,910 --> 00:14:06,160
the telephony side of things so we're

00:14:02,850 --> 00:14:10,360
orienting the most common or were sorry

00:14:06,160 --> 00:14:12,759
writing the most commonly used protocols

00:14:10,360 --> 00:14:16,930
to be used for so well we've already

00:14:12,759 --> 00:14:20,110
written a sip support and ISDN is the

00:14:16,930 --> 00:14:22,509
next planned one and also on the right

00:14:20,110 --> 00:14:25,120
hand side you can see message oriented

00:14:22,509 --> 00:14:28,000
communications so we also want to be

00:14:25,120 --> 00:14:30,069
able to have a a p.i stack available for

00:14:28,000 --> 00:14:34,029
doing say instant messaging with the

00:14:30,069 --> 00:14:35,170
system as well so that's a you know so

00:14:34,029 --> 00:14:36,610
we're planning that in from the

00:14:35,170 --> 00:14:41,139
beginning rather than trying to shoehorn

00:14:36,610 --> 00:14:43,449
it into an old project the only other

00:14:41,139 --> 00:14:45,639
thing I wanted to point out on this and

00:14:43,449 --> 00:14:48,129
of course it's on the left hand side so

00:14:45,639 --> 00:14:51,759
it's in the very tiny font but there is

00:14:48,129 --> 00:14:53,529
a there is a bullet point on there that

00:14:51,759 --> 00:14:56,079
says all components provide interfaces

00:14:53,529 --> 00:14:58,569
for dynamic configuration that's one

00:14:56,079 --> 00:15:00,579
thing that to be honest is something I

00:14:58,569 --> 00:15:02,350
think is really cool with asterisk SCF

00:15:00,579 --> 00:15:05,379
is that all components are just designed

00:15:02,350 --> 00:15:07,660
upfront to be able to just receive and

00:15:05,379 --> 00:15:13,329
update their configuration in real time

00:15:07,660 --> 00:15:16,779
as necessary so asterisk SEF of course

00:15:13,329 --> 00:15:18,279
can be used for you know anything you

00:15:16,779 --> 00:15:20,259
can think of to use for communications

00:15:18,279 --> 00:15:24,480
but here's some potential you know what

00:15:20,259 --> 00:15:24,480
we expected to be used for mostly

00:15:25,139 --> 00:15:29,470
service provider networks of course

00:15:27,509 --> 00:15:30,970
right now there's a lot of service

00:15:29,470 --> 00:15:35,259
providers that use asterisk but

00:15:30,970 --> 00:15:37,899
for the volume and the reliability that

00:15:35,259 --> 00:15:41,980
they require we expect that asterisk SCF

00:15:37,899 --> 00:15:44,410
would fit in very well their enterprise

00:15:41,980 --> 00:15:46,930
communications that's a fancy way of

00:15:44,410 --> 00:15:49,300
saying really big companies in other

00:15:46,930 --> 00:15:50,920
words the distributed nature of asterisk

00:15:49,300 --> 00:15:53,439
SCF would fit in well force a

00:15:50,920 --> 00:15:55,990
multinational companies and such but

00:15:53,439 --> 00:16:00,850
better than say trying to just put in

00:15:55,990 --> 00:16:03,579
trying to cluster asterisk servers or

00:16:00,850 --> 00:16:07,949
other open source communications

00:16:03,579 --> 00:16:11,319
software themselves cloud applications

00:16:07,949 --> 00:16:14,680
they're all the rage and of course

00:16:11,319 --> 00:16:17,350
contact centers by that I suppose that

00:16:14,680 --> 00:16:18,819
means say like your tech support type

00:16:17,350 --> 00:16:21,910
places and such they're already using

00:16:18,819 --> 00:16:23,680
asterisk the reason why astris SEF would

00:16:21,910 --> 00:16:25,329
possibly work really well for them is

00:16:23,680 --> 00:16:28,480
the fact that they're the API is

00:16:25,329 --> 00:16:30,610
published for asterisk SCF would allow

00:16:28,480 --> 00:16:33,100
them to be able to put their very

00:16:30,610 --> 00:16:36,100
specific business logic into play

00:16:33,100 --> 00:16:41,319
instead of how trying to fit into what

00:16:36,100 --> 00:16:48,519
might be offered by other open source PP

00:16:41,319 --> 00:16:50,259
exits so for those of you who think this

00:16:48,519 --> 00:16:51,519
project sounds cool I want to take a

00:16:50,259 --> 00:16:55,230
look into it I want to get involved

00:16:51,519 --> 00:16:57,930
there are several ways you can do so

00:16:55,230 --> 00:17:00,699
first of all there are some websites

00:16:57,930 --> 00:17:03,040
asterisk org is the home of both the

00:17:00,699 --> 00:17:03,939
asterisk and asterisk SCF projects and

00:17:03,040 --> 00:17:06,549
you can find lots of information

00:17:03,939 --> 00:17:08,500
including how to download and how to end

00:17:06,549 --> 00:17:10,419
some development tips there but what's

00:17:08,500 --> 00:17:13,750
even better i think is the wiki that we

00:17:10,419 --> 00:17:15,789
have now wiki Dasaratha torgus also it's

00:17:13,750 --> 00:17:18,909
a wiki about both the asterisks an

00:17:15,789 --> 00:17:22,059
asterisk SCF projects has a whole lot

00:17:18,909 --> 00:17:23,890
more about development and process and

00:17:22,059 --> 00:17:25,750
how to get your code there and how to

00:17:23,890 --> 00:17:31,809
download it how to install all that fun

00:17:25,750 --> 00:17:33,909
stuff asterisk SCF has bi-weekly

00:17:31,809 --> 00:17:36,940
developer conference calls that are on

00:17:33,909 --> 00:17:39,780
thursdays every two weeks and it

00:17:36,940 --> 00:17:43,059
alternates between being in the morning

00:17:39,780 --> 00:17:44,770
eastern standard time and in the

00:17:43,059 --> 00:17:46,840
afternoon eastern standard time

00:17:44,770 --> 00:17:48,700
so that it can accommodate people in

00:17:46,840 --> 00:17:52,840
time zones you know outside the United

00:17:48,700 --> 00:17:57,010
States well and there's a couple of IRC

00:17:52,840 --> 00:17:59,380
channels on the free node Network we

00:17:57,010 --> 00:18:03,280
have pound asterisk at CF and pound

00:17:59,380 --> 00:18:04,750
asterisk SCF dev pound asterisk SCF dev

00:18:03,280 --> 00:18:06,550
is one of those if you're interested in

00:18:04,750 --> 00:18:08,290
being a developer on this I would highly

00:18:06,550 --> 00:18:09,580
recommend being in that channel because

00:18:08,290 --> 00:18:11,980
that's where the majority of

00:18:09,580 --> 00:18:15,670
communications take place and decisions

00:18:11,980 --> 00:18:17,260
can be made there and and about things

00:18:15,670 --> 00:18:18,760
that can just change radically all of a

00:18:17,260 --> 00:18:20,620
sudden and if you read it on the wiki

00:18:18,760 --> 00:18:22,210
you might go wait that's not how it

00:18:20,620 --> 00:18:26,260
works and we said well we just changed

00:18:22,210 --> 00:18:27,400
it in the dev Channel so thank you very

00:18:26,260 --> 00:18:29,410
much that's all I have to say about

00:18:27,400 --> 00:18:31,540
asterisk SCF I imagine you guys have a

00:18:29,410 --> 00:18:41,410
bunch of questions so please feel free

00:18:31,540 --> 00:18:44,610
to ask are there any question ello I see

00:18:41,410 --> 00:18:44,610
you in the back there

00:18:57,489 --> 00:19:04,489
the question was how did our lessons

00:19:02,899 --> 00:19:06,889
from how the community was involved in

00:19:04,489 --> 00:19:08,629
astro shaped the way that we are going

00:19:06,889 --> 00:19:13,360
for with a stirrer asked SCF is that

00:19:08,629 --> 00:19:16,070
correct okay just make sure okay so

00:19:13,360 --> 00:19:20,299
basically the community involvement in

00:19:16,070 --> 00:19:23,090
asterisk is a very difficult question to

00:19:20,299 --> 00:19:25,549
answer to be honest on the spot but I

00:19:23,090 --> 00:19:28,609
would say that the community with

00:19:25,549 --> 00:19:29,659
asterisks giving the big thing we one of

00:19:28,609 --> 00:19:31,970
the biggest things that we did with

00:19:29,659 --> 00:19:33,470
asterisk of course is that like I said

00:19:31,970 --> 00:19:35,359
it wasn't it start up with one guy

00:19:33,470 --> 00:19:38,179
trying to ride his pbx for his company

00:19:35,359 --> 00:19:39,350
and I imagine in the beginning there

00:19:38,179 --> 00:19:40,850
wasn't a whole lot of community

00:19:39,350 --> 00:19:43,070
involvement he didn't go around start

00:19:40,850 --> 00:19:44,659
asking people hey what features would

00:19:43,070 --> 00:19:46,789
you want out of this if you were going

00:19:44,659 --> 00:19:48,980
to use this so one of the things that we

00:19:46,789 --> 00:19:52,249
did before doing any sort of design work

00:19:48,980 --> 00:19:55,789
is we said you know we got people in who

00:19:52,249 --> 00:19:58,190
we know are using asterisk today and who

00:19:55,789 --> 00:19:59,480
are using it for large-scale deployments

00:19:58,190 --> 00:20:01,279
and who are you know who may have

00:19:59,480 --> 00:20:03,440
actually written their own ways of

00:20:01,279 --> 00:20:06,379
failing over things and asterisk and we

00:20:03,440 --> 00:20:09,859
said what are the features you want and

00:20:06,379 --> 00:20:12,109
what what can we do with this to make it

00:20:09,859 --> 00:20:14,090
so that you would want to use it and so

00:20:12,109 --> 00:20:16,100
we took their directives in order to

00:20:14,090 --> 00:20:20,029
come up with our one point 0 feature

00:20:16,100 --> 00:20:21,350
list now on the other hand there are a

00:20:20,029 --> 00:20:25,070
lot of people out there who are very

00:20:21,350 --> 00:20:28,999
opinionated on things that honestly it's

00:20:25,070 --> 00:20:31,279
not but like for instance a we knew we

00:20:28,999 --> 00:20:33,230
knew without any community input that

00:20:31,279 --> 00:20:36,289
you know we were going to have this

00:20:33,230 --> 00:20:38,179
we're going to write primarily in C++ as

00:20:36,289 --> 00:20:39,859
our development language we knew people

00:20:38,179 --> 00:20:42,320
there would be people who like that and

00:20:39,859 --> 00:20:44,179
people don't but the thing is we just

00:20:42,320 --> 00:20:45,919
said that's not an important that's not

00:20:44,179 --> 00:20:48,080
worth arguing about with the community

00:20:45,919 --> 00:20:50,239
it's nice to hear input on that but it's

00:20:48,080 --> 00:20:51,350
not going to be you know something that

00:20:50,239 --> 00:20:53,330
they're probably going to be of

00:20:51,350 --> 00:20:55,759
convincing us out otherwise so it's a

00:20:53,330 --> 00:20:58,039
matter of listening to what features

00:20:55,759 --> 00:20:59,779
they want without trying to focus on say

00:20:58,039 --> 00:21:02,269
the bike shed topics if you ever heard

00:20:59,779 --> 00:21:04,060
that sort of terminology before so I

00:21:02,269 --> 00:21:06,610
guess oh you haven't

00:21:04,060 --> 00:21:08,590
okay the bike shed by the way is

00:21:06,610 --> 00:21:10,810
something that someone on the subversion

00:21:08,590 --> 00:21:12,900
team talked about at a at a talk back a

00:21:10,810 --> 00:21:14,980
few years ago and basically it's where

00:21:12,900 --> 00:21:16,930
instead of talking about the house that

00:21:14,980 --> 00:21:19,090
you're building people start arguing

00:21:16,930 --> 00:21:22,060
over what color to paint to paint the

00:21:19,090 --> 00:21:24,010
bike shed and in all this attention goes

00:21:22,060 --> 00:21:27,490
there as opposed to on the more massive

00:21:24,010 --> 00:21:29,350
problem of the house itself so that's so

00:21:27,490 --> 00:21:31,210
we tried to focus less on those issues

00:21:29,350 --> 00:21:35,680
while focusing of course more on the

00:21:31,210 --> 00:21:39,370
house are there any other questions yes

00:21:35,680 --> 00:21:42,750
Jeff Jeff asked the question what is the

00:21:39,370 --> 00:21:46,230
license the license is GPL version to

00:21:42,750 --> 00:21:48,640
its dual license GPL version 2 and

00:21:46,230 --> 00:21:51,040
commercial license as a possibility as

00:21:48,640 --> 00:21:54,340
well for more information on that you

00:21:51,040 --> 00:22:01,060
can find that on the wiki that I showed

00:21:54,340 --> 00:22:03,610
earlier yes if there were any particular

00:22:01,060 --> 00:22:06,520
reasons why we did or did not choose v3

00:22:03,610 --> 00:22:08,710
and to be perfectly honest I do not know

00:22:06,520 --> 00:22:11,580
that I was not involved in the licensing

00:22:08,710 --> 00:22:15,450
decision I just know what was picked

00:22:11,580 --> 00:22:15,450
okay yes sir

00:22:22,830 --> 00:22:27,489
the question was is there plans to

00:22:25,059 --> 00:22:29,830
replace asterisk with an asterisk SCF

00:22:27,489 --> 00:22:32,590
application the plan right now is for

00:22:29,830 --> 00:22:35,440
the to coexist the idea is of course

00:22:32,590 --> 00:22:37,929
that asterisk SCF is you know doesn't

00:22:35,440 --> 00:22:40,299
have nearly as many features as asterisk

00:22:37,929 --> 00:22:42,429
does but the idea is that it should it

00:22:40,299 --> 00:22:45,279
would be a very performant and very

00:22:42,429 --> 00:22:48,159
reliable communications formed so

00:22:45,279 --> 00:22:49,720
perhaps it could be used for lack of a

00:22:48,159 --> 00:22:51,519
better way putting this say at the front

00:22:49,720 --> 00:22:54,009
end of communications while asterisk is

00:22:51,519 --> 00:22:57,460
contacted to be using things such as its

00:22:54,009 --> 00:22:59,470
voicemail and its cues and any other

00:22:57,460 --> 00:23:09,549
features that perhaps asterisk SCF does

00:22:59,470 --> 00:23:11,889
not implement at the moment yes sir okay

00:23:09,549 --> 00:23:14,259
he asked if I could be more explicit

00:23:11,889 --> 00:23:16,330
about the relationship between asterisk

00:23:14,259 --> 00:23:18,340
and asterisk SCF so when you say

00:23:16,330 --> 00:23:20,229
relationship I do you mean like how it's

00:23:18,340 --> 00:23:22,119
used or do you mean like as in the

00:23:20,229 --> 00:23:30,399
development communities or what is it

00:23:22,119 --> 00:23:34,239
you mean exactly yes oh okay well yeah

00:23:30,399 --> 00:23:38,309
let's talk about that okay so the thing

00:23:34,239 --> 00:23:40,899
is there's no secret that you know

00:23:38,309 --> 00:23:43,629
asterisk an asterisk SCF are sponsored

00:23:40,899 --> 00:23:46,149
by the company Digium incorporated and

00:23:43,629 --> 00:23:48,009
the thing is Digium marketing department

00:23:46,149 --> 00:23:52,479
when coming up with the name for the new

00:23:48,009 --> 00:23:54,879
project was very insistent that it had

00:23:52,479 --> 00:23:56,679
the name asterisk in it because asterisk

00:23:54,879 --> 00:23:58,359
has a lot of recognition as I told you

00:23:56,679 --> 00:24:01,450
before it's it's a really big deal right

00:23:58,359 --> 00:24:03,639
so because it has all this recognition

00:24:01,450 --> 00:24:06,159
we want people to recognize that

00:24:03,639 --> 00:24:08,590
asterisk SCF is being developed by the

00:24:06,159 --> 00:24:11,049
same people and has the same you know

00:24:08,590 --> 00:24:12,729
history as not same history that's a bad

00:24:11,049 --> 00:24:14,679
way of saying it but it's basically

00:24:12,729 --> 00:24:16,539
people they should have the name

00:24:14,679 --> 00:24:18,909
Association that you know it's being

00:24:16,539 --> 00:24:21,309
made by the same people and people who

00:24:18,909 --> 00:24:23,169
like asterisk should also just be like a

00:24:21,309 --> 00:24:25,960
stress SCF as well because they like

00:24:23,169 --> 00:24:28,179
asterisk so that's that's how that came

00:24:25,960 --> 00:24:29,529
about and SCF actually scalable

00:24:28,179 --> 00:24:31,419
communications framework of course

00:24:29,529 --> 00:24:33,220
describes what it is but they also

00:24:31,419 --> 00:24:33,990
wanted to have an acronym that they

00:24:33,220 --> 00:24:44,270
could

00:24:33,990 --> 00:24:44,270
any dirty meanings for ya so I yes sir

00:25:01,120 --> 00:25:08,140
yes people have rodent have run asterisk

00:25:03,860 --> 00:25:08,140
on very small hardware um so

00:25:18,090 --> 00:25:23,320
well I'll be perfectly honest with you

00:25:20,500 --> 00:25:25,809
about this I am unsure because we really

00:25:23,320 --> 00:25:28,779
haven't done a whole lot of benchmarking

00:25:25,809 --> 00:25:31,419
and that sort of thing I would suspect

00:25:28,779 --> 00:25:33,580
that it inevitably is going to be larger

00:25:31,419 --> 00:25:37,320
than asterisk but I don't necessarily

00:25:33,580 --> 00:25:41,350
know by how much I know that for our

00:25:37,320 --> 00:25:43,899
demonstration at Astrakhan last year hey

00:25:41,350 --> 00:25:49,960
Russell what sort of hardware was that

00:25:43,899 --> 00:25:51,159
running on at Astrakhan okay but

00:25:49,960 --> 00:25:53,200
obviously they're not they're not little

00:25:51,159 --> 00:25:54,820
routers or anything but I mean it's not

00:25:53,200 --> 00:25:57,549
like you're going to require you know a

00:25:54,820 --> 00:26:00,000
huge you know mainframe server or

00:25:57,549 --> 00:26:00,000
anything like that

00:26:07,980 --> 00:26:14,700
right okay yeah that is a very good

00:26:13,200 --> 00:26:16,020
point so if for those who couldn't hear

00:26:14,700 --> 00:26:17,880
Russell he was saying that you know

00:26:16,020 --> 00:26:20,370
don't don't try to think of asterisk us

00:26:17,880 --> 00:26:21,809
yet like replacing asterisk or anything

00:26:20,370 --> 00:26:23,340
like that so if you currently we're

00:26:21,809 --> 00:26:26,010
going to use asterisk on some some old

00:26:23,340 --> 00:26:28,470
platform say like you know on you know a

00:26:26,010 --> 00:26:30,570
wrt cisco router or something like that

00:26:28,470 --> 00:26:32,490
you know you go ahead and do it keep

00:26:30,570 --> 00:26:35,490
doing it because we're not really trying

00:26:32,490 --> 00:26:39,049
to replace asterisk by any means any

00:26:35,490 --> 00:26:39,049
further questions did you have one yes

00:26:41,630 --> 00:26:49,260
the question was does asterisk SCF used

00:26:44,340 --> 00:26:50,690
dialplan well basically an hour in the

00:26:49,260 --> 00:26:52,830
slides that I showed you there was a

00:26:50,690 --> 00:26:54,929
service running that was called the

00:26:52,830 --> 00:26:56,700
routing service and the routing service

00:26:54,929 --> 00:26:59,610
is responsible for either routing

00:26:56,700 --> 00:27:02,970
sessions or routing messages and it's

00:26:59,610 --> 00:27:04,620
likely that that will probably be the

00:27:02,970 --> 00:27:06,600
most customized component that people

00:27:04,620 --> 00:27:08,070
ever use because essentially that's

00:27:06,600 --> 00:27:10,580
where they're probably going to put

00:27:08,070 --> 00:27:13,710
their business logic to determine how to

00:27:10,580 --> 00:27:16,440
how to route the calls so there's

00:27:13,710 --> 00:27:18,179
there's several options first of all you

00:27:16,440 --> 00:27:20,460
could write your own routing opponent

00:27:18,179 --> 00:27:23,160
that just you know fills in the AP is

00:27:20,460 --> 00:27:24,929
that you know the it does implements

00:27:23,160 --> 00:27:27,450
what the interface for routing is

00:27:24,929 --> 00:27:28,650
supposed to do in that way you know you

00:27:27,450 --> 00:27:30,390
have a whole lot of control you can

00:27:28,650 --> 00:27:32,520
write it in one of the many programming

00:27:30,390 --> 00:27:34,380
languages that asterisk SCF supports and

00:27:32,520 --> 00:27:37,650
as long as you're a programmer that's

00:27:34,380 --> 00:27:39,510
fine we also have what's called the

00:27:37,650 --> 00:27:42,090
basic routing service I mean all it will

00:27:39,510 --> 00:27:44,010
do is just do lookups based on you know

00:27:42,090 --> 00:27:46,919
that you give it a number and it'll tell

00:27:44,010 --> 00:27:50,850
it will figure out which session gateway

00:27:46,919 --> 00:27:53,010
to contact for that number and and it

00:27:50,850 --> 00:27:54,990
can also i do believe it can call out to

00:27:53,010 --> 00:27:57,660
a luis script just so you can sort of

00:27:54,990 --> 00:28:00,929
say give it a yes or no sort of thing so

00:27:57,660 --> 00:28:02,549
if you have further rules behind whether

00:28:00,929 --> 00:28:04,110
someone should be contacted or whether a

00:28:02,549 --> 00:28:05,490
call should be round and you can you can

00:28:04,110 --> 00:28:07,559
do it in the lewis script but it's not

00:28:05,490 --> 00:28:09,299
very flexible the idea is just basically

00:28:07,559 --> 00:28:12,840
to show how the routing service works

00:28:09,299 --> 00:28:16,530
and in fact in our git repos if you

00:28:12,840 --> 00:28:18,540
check out the routing repo they idea is

00:28:16,530 --> 00:28:19,500
like we kind of know that that's going

00:28:18,540 --> 00:28:20,460
to be something that a lot of people

00:28:19,500 --> 00:28:22,350
write their own routing

00:28:20,460 --> 00:28:25,320
service and so we've actually

00:28:22,350 --> 00:28:28,080
implemented a sample sample routing

00:28:25,320 --> 00:28:31,170
service in Java and Python just so that

00:28:28,080 --> 00:28:32,610
people can see you know kind of they can

00:28:31,170 --> 00:28:35,040
visualize it a little better they can

00:28:32,610 --> 00:28:36,630
say oh that's what i need to do okay and

00:28:35,040 --> 00:28:38,340
here's where I'd put in you know my

00:28:36,630 --> 00:28:40,710
database calls to figure out you know

00:28:38,340 --> 00:28:42,690
whether this person can be contacted

00:28:40,710 --> 00:28:44,820
right now or what time it is or whatever

00:28:42,690 --> 00:28:47,010
it is you're going to do but before you

00:28:44,820 --> 00:28:48,600
decide whether to route a call or not as

00:28:47,010 --> 00:28:50,970
far as actually whether it will use

00:28:48,600 --> 00:28:53,220
asterisks to dial plan language there

00:28:50,970 --> 00:28:55,050
are no plans to implement that right now

00:28:53,220 --> 00:28:56,640
so it's not like you could take your

00:28:55,050 --> 00:29:00,480
Astros dial plan and just plug it into

00:28:56,640 --> 00:29:02,550
asterisk SCF mainly because honestly

00:29:00,480 --> 00:29:04,710
most of us feel like the asterisk

00:29:02,550 --> 00:29:06,030
dialplan language is a little bit you

00:29:04,710 --> 00:29:08,550
know trying to do more than it should

00:29:06,030 --> 00:29:10,140
and in since they're all these

00:29:08,550 --> 00:29:13,110
programming languages out there that do

00:29:10,140 --> 00:29:16,110
things you know really well anyway it's

00:29:13,110 --> 00:29:17,760
a you know it's probably the majority of

00:29:16,110 --> 00:29:19,620
people would be fine just you know like

00:29:17,760 --> 00:29:22,250
i said writing it in Python or Java or

00:29:19,620 --> 00:29:22,250
something like that

00:29:25,290 --> 00:29:30,330
yes it is very possible for someone to

00:29:27,720 --> 00:29:32,010
either implement an extension point or

00:29:30,330 --> 00:29:33,750
write a routing component and publish it

00:29:32,010 --> 00:29:37,170
out there that actually you know can

00:29:33,750 --> 00:29:39,060
call out to an astros dialplan file to

00:29:37,170 --> 00:29:42,240
figure out how to route a call so it's

00:29:39,060 --> 00:30:00,270
certainly possible are there any other

00:29:42,240 --> 00:30:01,380
questions Jeff ah yeah yes eeks is by

00:30:00,270 --> 00:30:04,020
the way that's the inter asterisk

00:30:01,380 --> 00:30:06,260
exchange protocol and currently there is

00:30:04,020 --> 00:30:12,180
no plan to implement it for one point oh

00:30:06,260 --> 00:30:14,330
it may come up in a future version yes

00:30:12,180 --> 00:30:14,330
sir

00:30:23,560 --> 00:30:28,700
the question was about fault tolerance

00:30:26,270 --> 00:30:30,440
and he asked if if a box were to fail

00:30:28,700 --> 00:30:32,840
with the session stay up and actually

00:30:30,440 --> 00:30:35,510
yes that's the idea behind it now one

00:30:32,840 --> 00:30:38,120
thing to mention is that all asterisk

00:30:35,510 --> 00:30:40,790
SCF does is replicate the state of the

00:30:38,120 --> 00:30:43,520
call to another box as far as something

00:30:40,790 --> 00:30:45,260
detecting a failure and and passing it

00:30:43,520 --> 00:30:48,080
over that's not actually built into

00:30:45,260 --> 00:30:49,670
asterisk SCF because our logic was there

00:30:48,080 --> 00:30:51,080
are already lots of software that does

00:30:49,670 --> 00:30:53,450
that and could probably do it a lot

00:30:51,080 --> 00:30:57,010
better than we could do so you know

00:30:53,450 --> 00:30:59,510
there's four demo at Astrakhan last year

00:30:57,010 --> 00:31:02,180
but that's actually the demo that we did

00:30:59,510 --> 00:31:05,660
is we had a call up between two people

00:31:02,180 --> 00:31:08,480
and then switched off the power on one

00:31:05,660 --> 00:31:10,760
of the servers and then showed how he

00:31:08,480 --> 00:31:13,940
could still transfer the call to someone

00:31:10,760 --> 00:31:16,400
else and it worked just fine and what we

00:31:13,940 --> 00:31:19,460
use to do that we used a few things we

00:31:16,400 --> 00:31:24,400
used koro sink and pacemaker as the ways

00:31:19,460 --> 00:31:28,550
of detecting the system's health and and

00:31:24,400 --> 00:31:32,540
giving the backup server the IP of the

00:31:28,550 --> 00:31:34,400
old one and we also had a an option

00:31:32,540 --> 00:31:36,410
enabled in the kernel on the back up so

00:31:34,400 --> 00:31:38,420
that you could actually bind to an IP

00:31:36,410 --> 00:31:42,500
address that you didn't own and it would

00:31:38,420 --> 00:31:45,440
be fine and then it just worked so it

00:31:42,500 --> 00:31:47,840
was pretty awesome yeah and so the idea

00:31:45,440 --> 00:31:53,030
of course is you'll have so at the time

00:31:47,840 --> 00:31:56,530
we only had a sip session of what would

00:31:53,030 --> 00:31:58,940
call replication and so we did the

00:31:56,530 --> 00:32:00,620
transferring the call thing but since

00:31:58,940 --> 00:32:02,870
then we've also added it to say the

00:32:00,620 --> 00:32:05,180
media component as well and so josh one

00:32:02,870 --> 00:32:06,710
of our one of my co-workers you know he

00:32:05,180 --> 00:32:09,500
got really excited because he was able

00:32:06,710 --> 00:32:10,940
to you know fail you know fail over the

00:32:09,500 --> 00:32:12,770
media component he just heard this

00:32:10,940 --> 00:32:16,400
little blip in the audio and everything

00:32:12,770 --> 00:32:18,820
was back it was really cool are there

00:32:16,400 --> 00:32:18,820
any other questions

00:32:21,090 --> 00:32:27,650
oh we got to Jared first

00:32:43,070 --> 00:32:57,780
okay well okay so one of the things so

00:32:54,270 --> 00:32:59,460
jared is asking about so I've been

00:32:57,780 --> 00:33:01,020
saying things a source SC it doesn't

00:32:59,460 --> 00:33:02,790
have but what does it have okay try to

00:33:01,020 --> 00:33:06,360
try to put some positive things out

00:33:02,790 --> 00:33:11,820
there yeah so asterisk us yet at the

00:33:06,360 --> 00:33:14,610
moment is has has well defined api's for

00:33:11,820 --> 00:33:16,740
session communications and has has an

00:33:14,610 --> 00:33:20,610
implementation of sip that's built on

00:33:16,740 --> 00:33:22,740
top of the pj sip framework so pretty

00:33:20,610 --> 00:33:24,600
much if you wanted to talk about it in

00:33:22,740 --> 00:33:27,660
comparison asterisks i mean it can do

00:33:24,600 --> 00:33:29,160
sip calls and can do transfers and it

00:33:27,660 --> 00:33:31,049
also has support for a couple of things

00:33:29,160 --> 00:33:33,000
just because pj sip already has it

00:33:31,049 --> 00:33:35,600
things like for instance provisional

00:33:33,000 --> 00:33:37,799
acknowledgments to prac reliable

00:33:35,600 --> 00:33:41,040
reliable provisional responses as

00:33:37,799 --> 00:33:43,350
they're called but the one thing a lot

00:33:41,040 --> 00:33:45,720
of it right now is near future type

00:33:43,350 --> 00:33:47,580
stuff so for instance one of the things

00:33:45,720 --> 00:33:48,780
that's in my opinion kind of a big one

00:33:47,580 --> 00:33:50,640
is the fact that we're going to have an

00:33:48,780 --> 00:33:52,860
API for messaging communications in

00:33:50,640 --> 00:33:55,440
asterisk they just now in the newest

00:33:52,860 --> 00:33:59,130
version the trunk right now have put in

00:33:55,440 --> 00:34:01,410
ways of routing instant messages into

00:33:59,130 --> 00:34:02,700
the dialplan and such but that's

00:34:01,410 --> 00:34:05,940
something that we want to have from the

00:34:02,700 --> 00:34:07,710
get-go and have it and try and a big

00:34:05,940 --> 00:34:09,450
thing is of course by writing its own

00:34:07,710 --> 00:34:11,159
api we can write a separate message

00:34:09,450 --> 00:34:14,250
router instead of having just the

00:34:11,159 --> 00:34:17,280
session router and it can you know

00:34:14,250 --> 00:34:20,040
perhaps be a lot more flexible than than

00:34:17,280 --> 00:34:21,720
otherwise so there's the messaging

00:34:20,040 --> 00:34:28,230
trying to think if there's anything else

00:34:21,720 --> 00:34:29,879
for one point 0 a lot of most of the one

00:34:28,230 --> 00:34:32,490
point 0 features are stuff that's just

00:34:29,879 --> 00:34:34,530
in asterisk already with the exception

00:34:32,490 --> 00:34:36,389
of like i said just some things that pj

00:34:34,530 --> 00:34:40,169
sit provides that asterisk doesn't have

00:34:36,389 --> 00:34:42,899
and the messaging communications

00:34:40,169 --> 00:34:44,369
framework but the big thing and but i

00:34:42,899 --> 00:34:46,020
guess okay so here's something else i

00:34:44,369 --> 00:34:47,790
guess because the big thing with

00:34:46,020 --> 00:34:49,770
asterisk SCF also is just the fact that

00:34:47,790 --> 00:34:52,290
we have all these api is published so

00:34:49,770 --> 00:34:54,580
it's just a whole lot more in my opinion

00:34:52,290 --> 00:34:59,700
easily easily extensible

00:34:54,580 --> 00:34:59,700
and then asterisk is so there's that too

00:35:01,350 --> 00:35:07,570
yes the api's are doc well the api's

00:35:04,780 --> 00:35:09,490
have Javadoc style documentation on them

00:35:07,570 --> 00:35:11,560
but we haven't actually like run doxygen

00:35:09,490 --> 00:35:13,420
on it to actually generate the docs yet

00:35:11,560 --> 00:35:17,020
but you know that that'll be done of

00:35:13,420 --> 00:35:21,390
course before the release other

00:35:17,020 --> 00:35:21,390
questions person in the back

00:35:45,160 --> 00:35:49,940
okay so the question was about

00:35:47,000 --> 00:35:53,180
cross-platform and such and the

00:35:49,940 --> 00:35:57,770
cross-platform requirement was one that

00:35:53,180 --> 00:36:00,560
basically did geum's team of sales

00:35:57,770 --> 00:36:02,540
people always get the question of when

00:36:00,560 --> 00:36:04,400
you know looking at astris they go if

00:36:02,540 --> 00:36:06,530
someone asks does it run on Windows and

00:36:04,400 --> 00:36:08,840
they always say no it doesn't it only

00:36:06,530 --> 00:36:11,170
runs on linux and people say oh well

00:36:08,840 --> 00:36:14,450
we're not going to use it then and so

00:36:11,170 --> 00:36:17,360
the thing with asterisk SCF is the thing

00:36:14,450 --> 00:36:20,780
is we're not doing anything ourselves to

00:36:17,360 --> 00:36:22,970
actually you know make sure that it runs

00:36:20,780 --> 00:36:25,550
on windows as well as Linux as well as

00:36:22,970 --> 00:36:27,440
you know FreeBSD and all those basically

00:36:25,550 --> 00:36:29,450
we're just choosing cross-platform

00:36:27,440 --> 00:36:31,580
libraries to use the biggest thing we're

00:36:29,450 --> 00:36:35,710
using is a product by a company called

00:36:31,580 --> 00:36:40,240
0c called ice and ice runs natively on

00:36:35,710 --> 00:36:43,040
windows and linux and mac and iphone and

00:36:40,240 --> 00:36:45,710
symbian and all these other systems and

00:36:43,040 --> 00:36:47,900
so we just use what they have and we

00:36:45,710 --> 00:36:49,640
don't have to actually think about the

00:36:47,900 --> 00:36:51,650
whole operating system thing too much

00:36:49,640 --> 00:36:52,940
there have been some things that have

00:36:51,650 --> 00:36:54,500
come up a few times that have been

00:36:52,940 --> 00:36:56,030
window specific problems but the thing

00:36:54,500 --> 00:36:57,680
is we have a few developers now who

00:36:56,030 --> 00:36:59,270
developed primarily in Windows and so

00:36:57,680 --> 00:37:04,490
those things get caught immediately and

00:36:59,270 --> 00:37:07,120
get fixed up other questions Jeff did

00:37:04,490 --> 00:37:07,120
you have another one

00:37:10,120 --> 00:37:19,730
manageability well I can't answer that

00:37:16,190 --> 00:37:21,460
exactly but I would say that the thing

00:37:19,730 --> 00:37:24,770
is that we do we are publishing

00:37:21,460 --> 00:37:27,890
interfaces to be able to monitor system

00:37:24,770 --> 00:37:30,620
health as far as SNMP goes I'm not on a

00:37:27,890 --> 00:37:40,910
percent sure about the status of that or

00:37:30,620 --> 00:37:43,220
what the plans are anything else all

00:37:40,910 --> 00:37:46,180
right well thank you guys very much it's

00:37:43,220 --> 00:37:46,180
been fun talking

00:38:01,890 --> 00:38:05,880
what about this I can help the liquid we

00:38:04,530 --> 00:38:07,740
have the same problem what would have

00:38:05,880 --> 00:38:10,070
become a few haters you gave me I found

00:38:07,740 --> 00:38:10,070
the problem

00:38:11,579 --> 00:38:16,080
let's put the word out

00:38:14,020 --> 00:38:16,080
you

00:39:23,930 --> 00:39:30,690
as a service leader in cloud computing

00:39:27,539 --> 00:39:32,249
all we do is hosting computing to us the

00:39:30,690 --> 00:39:34,200
cloud is just the next generation of

00:39:32,249 --> 00:39:36,150
hosting and if someone who's been in the

00:39:34,200 --> 00:39:38,099
hosting industry for 12 years we feel

00:39:36,150 --> 00:39:39,269
we're in a unique position to really

00:39:38,099 --> 00:39:41,400
help bring these two worlds together

00:39:39,269 --> 00:39:43,739
these different sets of technologies and

00:39:41,400 --> 00:39:46,049
to help companies embrace this new world

00:39:43,739 --> 00:39:48,089
in this great new tool that allows

00:39:46,049 --> 00:39:50,670
faster innovation not only is it about

00:39:48,089 --> 00:39:56,069
us being responsive and accountable but

00:39:50,670 --> 00:39:58,880
it's about us doing more for you webos

00:39:56,069 --> 00:40:02,430
an OS that works the way that you do

00:39:58,880 --> 00:40:06,589
across all your devices HP Slate and

00:40:02,430 --> 00:40:06,589

YouTube URL: https://www.youtube.com/watch?v=2HPNjXB4dFs


