Title: 2011 SouthEast LinuxFest - Seth Chisamore - Highly Available Django with Chef
Publication date: 2012-03-24
Playlist: 2011 SouthEast LinuxFest
Description: 
	2011 SouthEast LinuxFest - Seth Chisamore - Deploying Highly Available Django Application Stacks with Chef

This video is licensed under Creative Commons Attribution 3.0 Unported License.
Captions: 
	00:00:01,220 --> 00:00:07,350
the following presentation was recorded

00:00:04,259 --> 00:00:09,929
at the 2011 southeast linux fest in

00:00:07,350 --> 00:00:11,429
Spartanburg South Carolina it is

00:00:09,929 --> 00:00:14,250
licensed under a creative commons

00:00:11,429 --> 00:00:19,080
license for more information about the

00:00:14,250 --> 00:00:22,439
southeast linux fest visit w wh linux pc

00:00:19,080 --> 00:00:24,090
org the southeast linux fest would like

00:00:22,439 --> 00:00:27,269
to thank the following diamond and

00:00:24,090 --> 00:00:30,439
platinum sponsors in 2011 for helping

00:00:27,269 --> 00:00:30,439
make these videos possible

00:00:43,200 --> 00:00:48,280
quick okay it started alright sounds

00:00:45,850 --> 00:01:08,040
good in your mind do you need this mic

00:00:48,280 --> 00:01:08,040
no okay you just you can't believe it is

00:01:15,090 --> 00:01:25,690
is one of the chief code riders so you

00:01:23,979 --> 00:01:31,630
guys hear me ok on the mic just want to

00:01:25,690 --> 00:01:33,970
make sure yes okay alright so my name is

00:01:31,630 --> 00:01:35,890
more um I'm going to be talking today

00:01:33,970 --> 00:01:37,690
about deploying fully automated highly

00:01:35,890 --> 00:01:40,570
available Django application stacks with

00:01:37,690 --> 00:01:42,130
Chef mainly using that is sort of a

00:01:40,570 --> 00:01:43,720
model to talk about Chef and some of the

00:01:42,130 --> 00:01:44,800
features it has and just talk about some

00:01:43,720 --> 00:01:46,330
of the benefits it can use when you're

00:01:44,800 --> 00:01:49,330
deploying things like Django or really

00:01:46,330 --> 00:01:51,610
any other web application stack so first

00:01:49,330 --> 00:01:52,990
talked a lot who I am except my names

00:01:51,610 --> 00:01:55,709
such as more i'm a senior technical

00:01:52,990 --> 00:01:58,119
consultant evangelist with Opscode inc

00:01:55,709 --> 00:01:59,890
i'm also the project lead for many the

00:01:58,119 --> 00:02:01,090
Opscode sponsored open source projects

00:01:59,890 --> 00:02:04,300
including the Opscode cookbook

00:02:01,090 --> 00:02:06,039
repository the night cloud provisioning

00:02:04,300 --> 00:02:08,289
plugins which are 90 c 2 knife rack

00:02:06,039 --> 00:02:10,179
space and knife OpenStack and also the

00:02:08,289 --> 00:02:11,470
night windows plugin which probably hear

00:02:10,179 --> 00:02:13,150
you guys can hiss at me a little bit but

00:02:11,470 --> 00:02:15,760
which is used for interacting with

00:02:13,150 --> 00:02:17,739
windows nodes and also provisioning

00:02:15,760 --> 00:02:19,959
windows nodes but the cool thing is you

00:02:17,739 --> 00:02:21,130
do that all from your regular nice unix

00:02:19,959 --> 00:02:22,379
environment so you don't have to be on a

00:02:21,130 --> 00:02:24,520
windows box so it's really nice for

00:02:22,379 --> 00:02:26,410
admins in a mixed mixed environment

00:02:24,520 --> 00:02:30,520
where their windows and linux nodes to

00:02:26,410 --> 00:02:32,739
manage so i don't know like talk a

00:02:30,520 --> 00:02:34,060
little bit who you guys are today is we

00:02:32,739 --> 00:02:38,349
have any system in administrators here

00:02:34,060 --> 00:02:39,910
today okay developers and then i guess

00:02:38,349 --> 00:02:42,190
everyone else's business people that's

00:02:39,910 --> 00:02:44,230
what we'll assume so and probably a lot

00:02:42,190 --> 00:02:45,940
of us are a mix of all these things I

00:02:44,230 --> 00:02:47,650
mean nowadays with old DevOps move and

00:02:45,940 --> 00:02:49,000
everything going on I think we move back

00:02:47,650 --> 00:02:52,450
and forth between all these categories

00:02:49,000 --> 00:02:53,770
quite regularly so today what are we

00:02:52,450 --> 00:02:55,240
gonna be talking about

00:02:53,770 --> 00:02:57,400
we're going to talk about the hows and

00:02:55,240 --> 00:03:00,160
whys of managing difference truck sure

00:02:57,400 --> 00:03:03,580
with chef a quick overview chef which

00:03:00,160 --> 00:03:05,410
will call the chef 101 we'll discuss a

00:03:03,580 --> 00:03:07,330
little bit about deploying an interior

00:03:05,410 --> 00:03:09,970
django app application stack with chef

00:03:07,330 --> 00:03:11,620
and then we'll also we'll finish up with

00:03:09,970 --> 00:03:13,060
leveraging ways that you can leverage

00:03:11,620 --> 00:03:14,650
the same chef code to actually deploy

00:03:13,060 --> 00:03:16,900
different configurations of that stack

00:03:14,650 --> 00:03:18,250
so sort of like right once and you can

00:03:16,900 --> 00:03:19,360
you know run your code and many

00:03:18,250 --> 00:03:22,960
different stacks that we'll talk about

00:03:19,360 --> 00:03:24,070
that a little bit so sort of the hows

00:03:22,960 --> 00:03:25,420
and whys and where we're going to start

00:03:24,070 --> 00:03:26,740
with this the first thing this all has

00:03:25,420 --> 00:03:29,200
to do with this infrastructure is code

00:03:26,740 --> 00:03:31,210
and this is the first like the technical

00:03:29,200 --> 00:03:32,710
definition the technical domain

00:03:31,210 --> 00:03:36,370
revolving around building and managing

00:03:32,710 --> 00:03:38,910
infrastructure programa CLE but at its

00:03:36,370 --> 00:03:40,870
heart I think this definitions better

00:03:38,910 --> 00:03:42,220
really what we're trying to do is enable

00:03:40,870 --> 00:03:43,600
the reconstruction the business from

00:03:42,220 --> 00:03:45,730
nothing but a source code repo an

00:03:43,600 --> 00:03:48,130
application data backup and bare metal

00:03:45,730 --> 00:03:49,480
resources so this is the dream if you

00:03:48,130 --> 00:03:50,230
can get to this point the idea being

00:03:49,480 --> 00:03:51,940
that you could rebuild your

00:03:50,230 --> 00:03:55,360
infrastructure from scratch in case

00:03:51,940 --> 00:03:57,460
disaster happens and it'll help you when

00:03:55,360 --> 00:03:59,290
you know everybody's second everybody's

00:03:57,460 --> 00:04:00,190
favorite second girlfriend nagios wakes

00:03:59,290 --> 00:04:01,810
you in the middle of the night and

00:04:00,190 --> 00:04:02,920
you're ready for the worst-case scenario

00:04:01,810 --> 00:04:07,240
if you had to rebuild everything from

00:04:02,920 --> 00:04:08,680
scratch so there's there's a few parts

00:04:07,240 --> 00:04:10,930
of this first configuration management

00:04:08,680 --> 00:04:12,190
in configuration management is really

00:04:10,930 --> 00:04:13,540
talking about keeping track of all the

00:04:12,190 --> 00:04:16,060
steps required to take bare metal

00:04:13,540 --> 00:04:18,670
systems and get them up and doing their

00:04:16,060 --> 00:04:20,080
job in the infrastructure so this

00:04:18,670 --> 00:04:22,210
doesn't have to be fancy and fully

00:04:20,080 --> 00:04:23,890
automated at the lowest end of this it

00:04:22,210 --> 00:04:26,170
can be a wiki page and the meat cloud

00:04:23,890 --> 00:04:27,850
aka SS admin in putting things but that

00:04:26,170 --> 00:04:29,530
is configuration management it's

00:04:27,850 --> 00:04:31,960
documented how to rebuild a server if

00:04:29,530 --> 00:04:33,310
you had to we're hopefully aiming for

00:04:31,960 --> 00:04:35,890
something a little more fully automated

00:04:33,310 --> 00:04:37,090
like chef and when we talk about

00:04:35,890 --> 00:04:38,710
configuration management we're usually

00:04:37,090 --> 00:04:40,780
talking about in the context of a single

00:04:38,710 --> 00:04:45,340
server so building a single server and

00:04:40,780 --> 00:04:46,660
getting it up and running so as we start

00:04:45,340 --> 00:04:48,060
to get into the next step of things we

00:04:46,660 --> 00:04:50,410
start to talk about systems integration

00:04:48,060 --> 00:04:51,400
with regard to chef this is actually

00:04:50,410 --> 00:04:52,720
talking about fully automated

00:04:51,400 --> 00:04:53,830
infrastructure and it's actually taking

00:04:52,720 --> 00:04:54,940
all those different nodes that you might

00:04:53,830 --> 00:04:56,440
have brought up and actually making them

00:04:54,940 --> 00:04:59,230
talk together and interact with each

00:04:56,440 --> 00:05:00,760
other so that's sort of the next step in

00:04:59,230 --> 00:05:01,900
things so just because you can figure a

00:05:00,760 --> 00:05:03,070
single server it gets more interesting

00:05:01,900 --> 00:05:04,450
when you actually have to consider it

00:05:03,070 --> 00:05:07,780
configure a bunch of servers to talk to

00:05:04,450 --> 00:05:09,730
each other so let's

00:05:07,780 --> 00:05:11,590
get into a little quick intro by chef

00:05:09,730 --> 00:05:16,510
how many of you have heard about chef or

00:05:11,590 --> 00:05:18,160
You chef at all okay a couple of you so

00:05:16,510 --> 00:05:19,900
chefs got a couple different parts to it

00:05:18,160 --> 00:05:20,919
we'll go through each of those the first

00:05:19,900 --> 00:05:24,010
thing we're going to talk about the chef

00:05:20,919 --> 00:05:25,600
framework so chef the project provides a

00:05:24,010 --> 00:05:29,700
framework fully automated infrastructure

00:05:25,600 --> 00:05:32,889
and has some important design principles

00:05:29,700 --> 00:05:34,000
it's i dented in so I'm going to go into

00:05:32,889 --> 00:05:35,560
each of these in a little more detail

00:05:34,000 --> 00:05:37,030
and we'll talk about them and break them

00:05:35,560 --> 00:05:39,850
out each individually so that's just the

00:05:37,030 --> 00:05:44,130
first principle it's made up of

00:05:39,850 --> 00:05:50,080
libraries and primitives it's flexible

00:05:44,130 --> 00:05:51,580
it's reasonable and now this is a pearl

00:05:50,080 --> 00:05:52,810
turn but Tim toady basically there's

00:05:51,580 --> 00:05:53,950
more than one way to do things so we

00:05:52,810 --> 00:05:54,970
believe that you know your

00:05:53,950 --> 00:05:56,290
infrastructure best and you should be

00:05:54,970 --> 00:05:59,110
able to switch up how you do things so

00:05:56,290 --> 00:06:00,400
chef should be flexible so when we talk

00:05:59,110 --> 00:06:01,960
about a dense we're actually talking

00:06:00,400 --> 00:06:04,479
about multiple applications of an

00:06:01,960 --> 00:06:05,979
operation do not change the result so in

00:06:04,479 --> 00:06:07,960
the context of chef what this means is

00:06:05,979 --> 00:06:09,700
you can run the chef Klein on a node

00:06:07,960 --> 00:06:11,229
over and over and over again the things

00:06:09,700 --> 00:06:13,090
that it's configuring once they get to

00:06:11,229 --> 00:06:14,620
the state they should be in install a

00:06:13,090 --> 00:06:17,320
package it's not going to attempt to

00:06:14,620 --> 00:06:18,729
reinstall those things so once you get

00:06:17,320 --> 00:06:20,440
to the state that you sort of modeled

00:06:18,729 --> 00:06:21,729
and said it should be at this state you

00:06:20,440 --> 00:06:22,720
can just keep running the chef client

00:06:21,729 --> 00:06:27,729
over and over again and things won't

00:06:22,720 --> 00:06:29,710
change on a server or node so chef also

00:06:27,729 --> 00:06:31,990
believes in providing you primitives we

00:06:29,710 --> 00:06:33,100
don't try to model the world mostly

00:06:31,990 --> 00:06:34,270
because every infrastructure is

00:06:33,100 --> 00:06:35,470
different and you know your

00:06:34,270 --> 00:06:36,820
infrastructure best so we're not going

00:06:35,470 --> 00:06:38,169
to give you a configuration management

00:06:36,820 --> 00:06:39,550
tool that says this is the way you

00:06:38,169 --> 00:06:41,020
should set up your servers this is the

00:06:39,550 --> 00:06:42,370
way it should be done we're going to

00:06:41,020 --> 00:06:44,650
provide you primitives that allow you to

00:06:42,370 --> 00:06:45,970
model that and and and that way people

00:06:44,650 --> 00:06:50,950
can actually model their infrastructure

00:06:45,970 --> 00:06:54,580
as they see fit so from chefs

00:06:50,950 --> 00:06:56,110
perspective you know the tool should do

00:06:54,580 --> 00:06:58,150
pretty much what you expect so there

00:06:56,110 --> 00:06:59,350
should be saying defaults but you need

00:06:58,150 --> 00:07:00,789
to have those override points when you

00:06:59,350 --> 00:07:02,229
need them you middle change things so

00:07:00,789 --> 00:07:03,400
out of the box you're going to get

00:07:02,229 --> 00:07:05,140
something that's not going to blow up in

00:07:03,400 --> 00:07:06,490
your face and it's going to work but if

00:07:05,140 --> 00:07:07,930
you see a need to change things and

00:07:06,490 --> 00:07:13,680
scale things differently or tweak things

00:07:07,930 --> 00:07:16,510
you have the the pivots to do that and

00:07:13,680 --> 00:07:18,280
sort of tying into that you know there's

00:07:16,510 --> 00:07:20,440
more than one way to do it so chef is a

00:07:18,280 --> 00:07:21,729
very flexible framework you can do

00:07:20,440 --> 00:07:23,110
pretty much anything you want

00:07:21,729 --> 00:07:24,639
and just like pearl doesn't tell

00:07:23,110 --> 00:07:26,710
programmers how to program chef doesn't

00:07:24,639 --> 00:07:28,599
tell us us admins how to manage the

00:07:26,710 --> 00:07:29,949
system so you can extend it mold it

00:07:28,599 --> 00:07:32,080
modify it and do what you need with it

00:07:29,949 --> 00:07:34,749
and since it's written in Ruby and

00:07:32,080 --> 00:07:36,610
Ruby's uh the main language for most of

00:07:34,749 --> 00:07:38,319
it it's very powerful and you can hook

00:07:36,610 --> 00:07:41,860
into other things within Ruby and take

00:07:38,319 --> 00:07:43,300
advantage of the Ruby that's in there so

00:07:41,860 --> 00:07:44,740
that's sort of the overview that the

00:07:43,300 --> 00:07:46,089
whole framework but the actual chef

00:07:44,740 --> 00:07:47,860
tools things that you use on a

00:07:46,089 --> 00:07:49,710
day-to-day basis there's a few of those

00:07:47,860 --> 00:07:53,589
and let's go over those real quick so oh

00:07:49,710 --> 00:07:55,180
hi is the actual tool that runs on a

00:07:53,589 --> 00:07:56,860
node and gathers metadata about that

00:07:55,180 --> 00:07:57,939
things like IP address memory usage all

00:07:56,860 --> 00:08:00,699
those different things and it's very

00:07:57,939 --> 00:08:03,610
similar to factor which is in puppet so

00:08:00,699 --> 00:08:06,520
that's the first piece of it the chef

00:08:03,610 --> 00:08:08,649
client that's the actual thing that runs

00:08:06,520 --> 00:08:10,809
on your nodes and configures them so

00:08:08,649 --> 00:08:12,759
when the chef client runs it actually

00:08:10,809 --> 00:08:14,589
runs oh hi to collect all that metadata

00:08:12,759 --> 00:08:15,879
and then it actually executes things in

00:08:14,589 --> 00:08:17,680
recipes and cook books which we'll get

00:08:15,879 --> 00:08:20,199
into in a little bit here but that's the

00:08:17,680 --> 00:08:21,969
actual sort of I guess binary that you

00:08:20,199 --> 00:08:26,949
run out on your nodes on a regular basis

00:08:21,969 --> 00:08:29,169
and it's the chorus chef knife is the

00:08:26,949 --> 00:08:31,180
command line interface or the actual

00:08:29,169 --> 00:08:32,649
tool that as a sysadmin or a chef user

00:08:31,180 --> 00:08:34,750
you will actually use that to manage

00:08:32,649 --> 00:08:37,060
your infrastructure so most your

00:08:34,750 --> 00:08:38,260
interactions with chef and and working

00:08:37,060 --> 00:08:43,510
with nodes and that are done through

00:08:38,260 --> 00:08:45,190
knife and then chef with an S which is a

00:08:43,510 --> 00:08:47,440
terrible name and it confuses people all

00:08:45,190 --> 00:08:49,540
the time but she'll chef is an

00:08:47,440 --> 00:08:51,339
interactive debugger console or that you

00:08:49,540 --> 00:08:53,380
can basically jump in and and start

00:08:51,339 --> 00:08:54,850
running commands inside of with your

00:08:53,380 --> 00:08:58,800
chef infrastructure so it's really

00:08:54,850 --> 00:09:01,060
useful when you're debugging things so

00:08:58,800 --> 00:09:02,829
those are the core tools in chef but

00:09:01,060 --> 00:09:04,180
there's an actual API chef in sort of

00:09:02,829 --> 00:09:08,290
architecture and we'll talk about that a

00:09:04,180 --> 00:09:09,940
little bit now so first chef believes in

00:09:08,290 --> 00:09:11,110
a fat client and a thin server and I'll

00:09:09,940 --> 00:09:13,420
try to explain what this means a little

00:09:11,110 --> 00:09:16,209
all actual code and chef is valve

00:09:13,420 --> 00:09:18,069
evaluated down on the nodes so the

00:09:16,209 --> 00:09:19,810
actual server that's involved here is

00:09:18,069 --> 00:09:21,760
very thin and it's really just an API

00:09:19,810 --> 00:09:23,199
rest server and a file server where it

00:09:21,760 --> 00:09:25,690
distributes the cookbooks out to nodes

00:09:23,199 --> 00:09:28,540
so that allows chef to scale very easily

00:09:25,690 --> 00:09:33,279
since the server so thin and most work

00:09:28,540 --> 00:09:34,750
is done out on the actual nodes the API

00:09:33,279 --> 00:09:35,529
that the client-server interact with

00:09:34,750 --> 00:09:38,230
it's restful

00:09:35,529 --> 00:09:41,199
and the payloads or JSON so you know

00:09:38,230 --> 00:09:42,550
pretty pretty simple there's a built-in

00:09:41,199 --> 00:09:44,019
search service and that's one of the

00:09:42,550 --> 00:09:45,999
most powerful features built into chef

00:09:44,019 --> 00:09:47,170
so and we'll get into examples of that

00:09:45,999 --> 00:09:49,509
especially when we talk about the Django

00:09:47,170 --> 00:09:51,339
application pieces but it allows you to

00:09:49,509 --> 00:09:53,139
actually in the context of a recipe in

00:09:51,339 --> 00:09:54,699
your code make a search for other

00:09:53,139 --> 00:09:56,110
components your infrastructure and use

00:09:54,699 --> 00:09:58,029
the metadata indexed about those

00:09:56,110 --> 00:10:00,040
components to do other configuration

00:09:58,029 --> 00:10:01,870
tasks so a really simple example is

00:10:00,040 --> 00:10:03,209
you've got an application server and you

00:10:01,870 --> 00:10:05,889
need to write out your database config

00:10:03,209 --> 00:10:07,449
you could actually do a search grab a

00:10:05,889 --> 00:10:09,370
reference to the database master and

00:10:07,449 --> 00:10:10,930
then write out that configuration using

00:10:09,370 --> 00:10:12,399
the IP address and all the things in

00:10:10,930 --> 00:10:14,620
that environment so you don't have to do

00:10:12,399 --> 00:10:17,050
any hard coding another great example is

00:10:14,620 --> 00:10:19,540
the context of a load balancer the load

00:10:17,050 --> 00:10:20,829
balancer can actually make a search and

00:10:19,540 --> 00:10:22,480
find out all the nodes it's supposed to

00:10:20,829 --> 00:10:24,309
be balancing based on some type of role

00:10:22,480 --> 00:10:25,749
name or some other attribute and then

00:10:24,309 --> 00:10:27,459
automatically routes configuration and

00:10:25,749 --> 00:10:29,970
keep up-to-date so it's a really

00:10:27,459 --> 00:10:32,079
powerful feature chef and then

00:10:29,970 --> 00:10:34,779
derivative services so since chef

00:10:32,079 --> 00:10:35,829
exposes a REST API you can easily match

00:10:34,779 --> 00:10:38,920
it up with other pieces of your

00:10:35,829 --> 00:10:40,920
infrastructure so we've got integrations

00:10:38,920 --> 00:10:44,139
to things like run deck which is a

00:10:40,920 --> 00:10:45,430
orchestration tool you know and there's

00:10:44,139 --> 00:10:46,839
a lot of people writing other things out

00:10:45,430 --> 00:10:48,399
there just because the API is well

00:10:46,839 --> 00:10:52,600
documented and easy to use and it's just

00:10:48,399 --> 00:10:53,649
rest so so chefs also an open source

00:10:52,600 --> 00:10:58,470
project and there's a large community

00:10:53,649 --> 00:11:01,059
behind it it's Apache License version 2

00:10:58,470 --> 00:11:03,329
there's about three hundred sixty plus

00:11:01,059 --> 00:11:05,439
individual contributors at this time

00:11:03,329 --> 00:11:07,120
about seventy plus corporate

00:11:05,439 --> 00:11:09,550
contributors including del Rackspace

00:11:07,120 --> 00:11:14,050
VMware right scale Heroku and numerous

00:11:09,550 --> 00:11:15,699
others we've got about two hundred forty

00:11:14,050 --> 00:11:17,529
plus cookbooks out on the community site

00:11:15,699 --> 00:11:19,329
and one of the most powerful things

00:11:17,529 --> 00:11:20,559
about Chef is you're going to dive in

00:11:19,329 --> 00:11:23,079
and talk about cookbooks a little but

00:11:20,559 --> 00:11:25,269
you can sort of write these cookbooks

00:11:23,079 --> 00:11:26,740
and they represent configuring a certain

00:11:25,269 --> 00:11:28,449
thing in your infrastructure but they

00:11:26,740 --> 00:11:29,649
also could represent the same thing in

00:11:28,449 --> 00:11:31,899
other people's infrastructure so you're

00:11:29,649 --> 00:11:32,949
able to take that code tarde up and

00:11:31,899 --> 00:11:34,360
share it with the community and then

00:11:32,949 --> 00:11:36,490
everyone else is able to build on top of

00:11:34,360 --> 00:11:38,410
that so not not only is the core chef a

00:11:36,490 --> 00:11:40,509
really neat open source project but the

00:11:38,410 --> 00:11:41,559
actual cookbooks that that sis admins

00:11:40,509 --> 00:11:42,670
are using out there is really

00:11:41,559 --> 00:11:44,949
interesting people are sharing those

00:11:42,670 --> 00:11:48,610
left and right and those are all share

00:11:44,949 --> 00:11:49,510
down in community Opscode com which the

00:11:48,610 --> 00:11:51,760
way to think about that it

00:11:49,510 --> 00:11:53,140
sort of like Sipan or rubygems or you

00:11:51,760 --> 00:11:54,100
know any of those different that package

00:11:53,140 --> 00:11:59,260
management thanks four different

00:11:54,100 --> 00:12:00,760
languages so if we talked with the chef

00:11:59,260 --> 00:12:04,240
client a little bit the chef client runs

00:12:00,760 --> 00:12:07,300
on your systems it talks to a chef

00:12:04,240 --> 00:12:08,680
server and you know you can either

00:12:07,300 --> 00:12:10,330
install your own chef server and

00:12:08,680 --> 00:12:12,910
maintain that or there are hosted chef

00:12:10,330 --> 00:12:14,290
servers Opscode provides one right now

00:12:12,910 --> 00:12:15,790
it's been being called the Opscode

00:12:14,290 --> 00:12:16,810
platform but we're rebranding it's going

00:12:15,790 --> 00:12:18,520
to be called hosted chef you'll probably

00:12:16,810 --> 00:12:20,470
hear about that this week but that

00:12:18,520 --> 00:12:23,380
allows you to basically just leverage a

00:12:20,470 --> 00:12:26,860
SAS chefs chef server and not have to

00:12:23,380 --> 00:12:29,680
maintain that yourself so the clients

00:12:26,860 --> 00:12:31,000
authenticate with our esky RSA keys the

00:12:29,680 --> 00:12:32,830
client holds the private key and the

00:12:31,000 --> 00:12:34,360
server holds the public key so the

00:12:32,830 --> 00:12:37,000
server is not a centralized store of the

00:12:34,360 --> 00:12:38,830
authentication information and it pushes

00:12:37,000 --> 00:12:42,040
out that responsibility to the node so

00:12:38,830 --> 00:12:43,570
the first time a client or a node checks

00:12:42,040 --> 00:12:45,520
in with the chef server it gets a unique

00:12:43,570 --> 00:12:47,140
key pair generated for it and the

00:12:45,520 --> 00:12:48,430
private keys sent down to the node and

00:12:47,140 --> 00:12:50,560
at that point that's where it lives and

00:12:48,430 --> 00:12:52,480
then all other authentication takes over

00:12:50,560 --> 00:12:57,040
with that key pair you know from their

00:12:52,480 --> 00:12:58,510
forward each system that you Matt each

00:12:57,040 --> 00:13:02,560
system that you can figure we call it a

00:12:58,510 --> 00:13:05,440
note or a managed node and nodes have

00:13:02,560 --> 00:13:08,080
attributes so this is some example

00:13:05,440 --> 00:13:09,640
output of what oh hi returns on like my

00:13:08,080 --> 00:13:10,900
macbook and you can see some of the

00:13:09,640 --> 00:13:13,060
information that came back we've got

00:13:10,900 --> 00:13:15,970
Colonel information you know platform

00:13:13,060 --> 00:13:17,920
version the platform it's running on an

00:13:15,970 --> 00:13:19,600
IP address the host name you know

00:13:17,920 --> 00:13:21,460
there's tons of this and oh hi actually

00:13:19,600 --> 00:13:23,200
has a really extensible plug-in system

00:13:21,460 --> 00:13:24,820
so if there's data that oh hi isn't

00:13:23,200 --> 00:13:26,470
returning for your platform you can

00:13:24,820 --> 00:13:28,840
actually write custom plugins to

00:13:26,470 --> 00:13:30,490
actually return more information some

00:13:28,840 --> 00:13:31,930
people do this for they have a plugin

00:13:30,490 --> 00:13:33,220
for their data center store to turn very

00:13:31,930 --> 00:13:35,680
specific information about the data

00:13:33,220 --> 00:13:37,210
center maybe call out to a local API

00:13:35,680 --> 00:13:40,900
server to even pull in more information

00:13:37,210 --> 00:13:43,510
so it's pretty neat and all that data is

00:13:40,900 --> 00:13:45,400
JSON so oh hi returns JSON and then that

00:13:43,510 --> 00:13:48,820
Jade that data set up to the chef server

00:13:45,400 --> 00:13:50,140
an indexed and then you know now that

00:13:48,820 --> 00:13:53,500
we're collecting all this metadata we

00:13:50,140 --> 00:13:54,940
can actually make searches based on that

00:13:53,500 --> 00:13:57,130
so you can see this is two different

00:13:54,940 --> 00:13:58,870
examples of the same search that first

00:13:57,130 --> 00:14:00,550
one is actually using the knife CLI tool

00:13:58,870 --> 00:14:01,930
I talked about so this might be that you

00:14:00,550 --> 00:14:02,860
just want to do some type of inventory

00:14:01,930 --> 00:14:04,630
work and try to figure

00:14:02,860 --> 00:14:06,670
alright give me a list of all the nodes

00:14:04,630 --> 00:14:08,440
in my environment that are running OS 10

00:14:06,670 --> 00:14:11,920
that Chef manages and you get back a

00:14:08,440 --> 00:14:13,900
list of that data the same exact search

00:14:11,920 --> 00:14:15,010
query this is what you would do inside

00:14:13,900 --> 00:14:16,510
of a recipe and we're going to look at

00:14:15,010 --> 00:14:17,980
it some example code of that but you can

00:14:16,510 --> 00:14:19,330
see we're searching it is the node index

00:14:17,980 --> 00:14:22,600
and we want to get a list of all nodes

00:14:19,330 --> 00:14:27,790
that are running OS 10 so it's pretty

00:14:22,600 --> 00:14:29,440
simple syntax and very powerful so chef

00:14:27,790 --> 00:14:31,930
enables infrastructure area code in a

00:14:29,440 --> 00:14:32,800
different ways so we're going to again

00:14:31,930 --> 00:14:34,930
dive in each of these things

00:14:32,800 --> 00:14:37,390
individually we manage our system

00:14:34,930 --> 00:14:40,000
configuration as resources we put those

00:14:37,390 --> 00:14:43,630
resources together into recipes we

00:14:40,000 --> 00:14:45,280
distribute recipes as cookbooks and we

00:14:43,630 --> 00:14:47,650
actually assign recipes to individual

00:14:45,280 --> 00:14:50,620
systems through roles and then we also

00:14:47,650 --> 00:14:52,270
have an arbitrary storage area called a

00:14:50,620 --> 00:14:53,530
data bag that we can put different

00:14:52,270 --> 00:14:55,000
information about our infrastructure and

00:14:53,530 --> 00:14:57,130
we'll look at some examples of that and

00:14:55,000 --> 00:14:59,410
then the big thing we want to do here is

00:14:57,130 --> 00:15:01,210
track all of this like source code so

00:14:59,410 --> 00:15:03,040
we're going to be saving our actual

00:15:01,210 --> 00:15:04,600
configurations up into like a git repo

00:15:03,040 --> 00:15:06,490
or svn or somewhere that way we can

00:15:04,600 --> 00:15:08,080
again rebuild from scratch if we ever

00:15:06,490 --> 00:15:09,790
had to we can collaborate with multiple

00:15:08,080 --> 00:15:12,280
peoples on with a multiple people on our

00:15:09,790 --> 00:15:15,660
team but again its source code and we

00:15:12,280 --> 00:15:15,660
want to check it into a repo in the end

00:15:17,130 --> 00:15:23,620
so first thing chef manages resources

00:15:19,660 --> 00:15:28,270
this note or manner manages resources on

00:15:23,620 --> 00:15:29,290
nodes so all resources have a type and

00:15:28,270 --> 00:15:30,520
you can see we highlighted a couple

00:15:29,290 --> 00:15:32,650
different resources here we've got a

00:15:30,520 --> 00:15:33,850
package resource template resource and

00:15:32,650 --> 00:15:35,830
the service resource and what we're

00:15:33,850 --> 00:15:37,780
doing in this little set of three

00:15:35,830 --> 00:15:40,360
resources installing and configuring H a

00:15:37,780 --> 00:15:42,970
proxy so you can see at the top we

00:15:40,360 --> 00:15:44,530
actually do a package you know install

00:15:42,970 --> 00:15:47,620
the package template and service and

00:15:44,530 --> 00:15:50,440
dive into more of this I they have a

00:15:47,620 --> 00:15:51,880
name so in some cases usually the name

00:15:50,440 --> 00:15:52,840
like on the package resource it's the

00:15:51,880 --> 00:15:55,000
actual name of the package you're

00:15:52,840 --> 00:15:56,890
installing in the template resource it's

00:15:55,000 --> 00:15:58,480
the the path to the final file that

00:15:56,890 --> 00:15:59,860
we're going to render and in this case

00:15:58,480 --> 00:16:03,240
the service resources the name of the

00:15:59,860 --> 00:16:03,240
service that we're going to manage so

00:16:03,300 --> 00:16:08,770
they have parameters you can see we've

00:16:07,150 --> 00:16:10,000
highlighted different things in the

00:16:08,770 --> 00:16:11,500
service woman we're telling that that

00:16:10,000 --> 00:16:13,420
particular service supports a restart

00:16:11,500 --> 00:16:14,680
and the template one you guys might see

00:16:13,420 --> 00:16:16,019
some things you recognize we've got an

00:16:14,680 --> 00:16:17,850
owner and group for the final file

00:16:16,019 --> 00:16:22,290
in the you know what mode is going to be

00:16:17,850 --> 00:16:23,759
in so in this case 644 and the source

00:16:22,290 --> 00:16:25,529
one up there is actually the template

00:16:23,759 --> 00:16:28,829
that we're going to render so the actual

00:16:25,529 --> 00:16:30,300
templates and chef are our er B which if

00:16:28,829 --> 00:16:32,779
you've done any Ruby that's a templating

00:16:30,300 --> 00:16:34,829
language so it allows you to interject

00:16:32,779 --> 00:16:36,179
dynamic values in the context that

00:16:34,829 --> 00:16:37,829
config file and then we render that out

00:16:36,179 --> 00:16:42,329
on disk and you'll see some examples of

00:16:37,829 --> 00:16:44,279
that minute and we take action to put

00:16:42,329 --> 00:16:46,350
resources into a declared state so every

00:16:44,279 --> 00:16:47,910
resource you see is going to have an

00:16:46,350 --> 00:16:49,709
action associated with it so in the case

00:16:47,910 --> 00:16:51,720
of a package we're going to install it

00:16:49,709 --> 00:16:54,480
we might another action if you do that

00:16:51,720 --> 00:16:56,069
is upgrade you could also do remove on

00:16:54,480 --> 00:16:57,269
the service we're going to enable it

00:16:56,069 --> 00:16:59,579
we're going to start it to ensure it's

00:16:57,269 --> 00:17:01,110
running in the template we don't

00:16:59,579 --> 00:17:02,579
actually there are every resource

00:17:01,110 --> 00:17:04,319
actually has a default to in this case

00:17:02,579 --> 00:17:07,970
the default is to create it so we didn't

00:17:04,319 --> 00:17:11,520
have to actually spell that out but and

00:17:07,970 --> 00:17:13,260
resources actually oops and we can also

00:17:11,520 --> 00:17:15,449
send notifications to other resources so

00:17:13,260 --> 00:17:17,970
in this case you can see when we make a

00:17:15,449 --> 00:17:20,039
change to the Apache or H a proxy

00:17:17,970 --> 00:17:21,990
configuration we would actually want to

00:17:20,039 --> 00:17:23,339
notify the H a proxy service that needs

00:17:21,990 --> 00:17:28,199
to restart so it picks up those new

00:17:23,339 --> 00:17:31,770
changes so and researchers actually take

00:17:28,199 --> 00:17:34,169
action through providers so we have

00:17:31,770 --> 00:17:37,020
multiple providers / resource type and a

00:17:34,169 --> 00:17:38,789
great example is the package resource we

00:17:37,020 --> 00:17:41,220
have providers for apt yum rubygems

00:17:38,789 --> 00:17:42,690
portage macports freebsd ports and

00:17:41,220 --> 00:17:44,010
really anything else anybody want to

00:17:42,690 --> 00:17:47,220
implement if there's another package

00:17:44,010 --> 00:17:48,570
manager out there so if you're a

00:17:47,220 --> 00:17:51,389
developer you can sort of think of it

00:17:48,570 --> 00:17:53,520
the resources the interface and the

00:17:51,389 --> 00:17:54,870
actual provider is the implementation so

00:17:53,520 --> 00:17:55,889
just like you know if you're programming

00:17:54,870 --> 00:17:57,029
Java or something you could have

00:17:55,889 --> 00:17:59,220
multiple implementations for an

00:17:57,029 --> 00:18:00,360
interface it's the same idea and the

00:17:59,220 --> 00:18:04,850
providers are the actual thing that

00:18:00,360 --> 00:18:09,149
takes action out of the system so we

00:18:04,850 --> 00:18:10,230
talked about how like a recipe or we

00:18:09,149 --> 00:18:11,520
talked about the individual resources

00:18:10,230 --> 00:18:12,960
now you saw some code there that was

00:18:11,520 --> 00:18:18,480
sort of a recipe so recipes are just

00:18:12,960 --> 00:18:20,190
collections of these resources recipes

00:18:18,480 --> 00:18:21,840
are evaluated in the order they appear

00:18:20,190 --> 00:18:23,700
so it's pretty simple as you're writing

00:18:21,840 --> 00:18:25,139
your code you know it's going to happen

00:18:23,700 --> 00:18:26,549
just like normal code and you're right

00:18:25,139 --> 00:18:27,750
in any other language you know the

00:18:26,549 --> 00:18:29,159
package is going to be installed first

00:18:27,750 --> 00:18:29,490
the template is going to be rendered and

00:18:29,159 --> 00:18:31,470
then this

00:18:29,490 --> 00:18:34,350
is going to be enabled to started so

00:18:31,470 --> 00:18:35,850
each resource object is added to the

00:18:34,350 --> 00:18:37,050
resource collection at runtime and

00:18:35,850 --> 00:18:41,309
that's our chef actually does the work

00:18:37,050 --> 00:18:45,450
of evaluating what it should do recipes

00:18:41,309 --> 00:18:47,280
can include other recipes so you might

00:18:45,450 --> 00:18:50,370
have this actually I think was lifted

00:18:47,280 --> 00:18:52,950
from the nagios cookbook but in order

00:18:50,370 --> 00:18:54,450
for the nagios web UI to run you would

00:18:52,950 --> 00:18:56,040
need that make sure Apaches installed

00:18:54,450 --> 00:18:58,470
and some modules are enabled so that's

00:18:56,040 --> 00:18:59,610
an example of you don't have to copy and

00:18:58,470 --> 00:19:01,640
paste you just go ahead and make a

00:18:59,610 --> 00:19:08,490
reference to the other cookbook and

00:19:01,640 --> 00:19:09,480
recipes that you want to use so one

00:19:08,490 --> 00:19:13,050
thing that's really neat about chef

00:19:09,480 --> 00:19:14,790
recipes they are pure Ruby you know

00:19:13,050 --> 00:19:16,470
there's a nice dsl you can use but when

00:19:14,790 --> 00:19:17,790
you feel you want to drop into Ruby to

00:19:16,470 --> 00:19:19,080
make things a little easier it's

00:19:17,790 --> 00:19:20,490
completely encouraged and you should do

00:19:19,080 --> 00:19:23,100
it so in this particular case what we're

00:19:20,490 --> 00:19:24,840
doing we could have written out to

00:19:23,100 --> 00:19:26,700
package resources if we wanted to to do

00:19:24,840 --> 00:19:29,010
this is to install Python and Python deb

00:19:26,700 --> 00:19:31,650
packages but in this case we can also

00:19:29,010 --> 00:19:33,420
just put it into a loop % w is a ruby

00:19:31,650 --> 00:19:35,429
ism that basically makes that into an

00:19:33,420 --> 00:19:36,870
array all the items in the array

00:19:35,429 --> 00:19:38,760
terminated by white space inside those

00:19:36,870 --> 00:19:40,830
brackets so what we're saying here is

00:19:38,760 --> 00:19:42,570
for each of the items in that array we

00:19:40,830 --> 00:19:44,460
want to do a package install so you can

00:19:42,570 --> 00:19:47,340
see how that's sort of simplified the

00:19:44,460 --> 00:19:48,929
code we can also do dynamic

00:19:47,340 --> 00:19:51,150
configuration through search so this is

00:19:48,929 --> 00:19:53,760
the first time you guys are seeing an

00:19:51,150 --> 00:19:56,730
example of using the search syntax so in

00:19:53,760 --> 00:19:58,679
this case we're going to create the h.a

00:19:56,730 --> 00:20:00,840
proxies configuration we're actually

00:19:58,679 --> 00:20:02,670
going to list of pool members by making

00:20:00,840 --> 00:20:04,620
a search out to the node index and

00:20:02,670 --> 00:20:07,020
grabbing every node that has a role of

00:20:04,620 --> 00:20:08,610
Django CMS so we're assuming that's our

00:20:07,020 --> 00:20:11,970
the rule we applied to our application

00:20:08,610 --> 00:20:14,040
server and that will give us a list of

00:20:11,970 --> 00:20:15,750
or an array of all the pool members will

00:20:14,040 --> 00:20:18,270
able to take those pool members then and

00:20:15,750 --> 00:20:19,830
actually send them into the template and

00:20:18,270 --> 00:20:21,960
that template knows how to work with

00:20:19,830 --> 00:20:23,220
that array and loop over them and write

00:20:21,960 --> 00:20:26,010
out configuration values for each of

00:20:23,220 --> 00:20:27,690
those things so it doesn't matter if you

00:20:26,010 --> 00:20:29,340
know one items returned from that 10

00:20:27,690 --> 00:20:31,620
item or 100 items or return from that

00:20:29,340 --> 00:20:33,179
the idea being it's very dynamic at this

00:20:31,620 --> 00:20:34,650
point and you don't have to rewrite this

00:20:33,179 --> 00:20:38,640
code as you add more app servers into

00:20:34,650 --> 00:20:41,730
the balancing pool so cookbooks our

00:20:38,640 --> 00:20:43,380
packages for recipes and just like

00:20:41,730 --> 00:20:45,690
packages and any other packaging

00:20:43,380 --> 00:20:46,770
system they have dependencies so when

00:20:45,690 --> 00:20:48,870
you're creating your cookbook if you

00:20:46,770 --> 00:20:50,910
have to use the Apache to cook book for

00:20:48,870 --> 00:20:53,040
your particular cookbook you just put an

00:20:50,910 --> 00:20:55,380
explicit dependency on those so it's

00:20:53,040 --> 00:20:58,440
pretty nice it makes code very

00:20:55,380 --> 00:20:59,730
reasonable and they're easy to share as

00:20:58,440 --> 00:21:02,040
we talked about before community to

00:20:59,730 --> 00:21:03,600
Opscode calm is the spot to go share

00:21:02,040 --> 00:21:11,820
those and they're just that's just like

00:21:03,600 --> 00:21:14,190
pie pie rubygems.org or Sipan so we

00:21:11,820 --> 00:21:16,410
talked about the recipes the cookbooks

00:21:14,190 --> 00:21:18,150
now rolls are the actual thing that

00:21:16,410 --> 00:21:19,290
describe a node so you can see in this

00:21:18,150 --> 00:21:21,690
particular case we're actually looking

00:21:19,290 --> 00:21:24,510
at two separate roll files here the

00:21:21,690 --> 00:21:27,780
first one is for the Django CMS app

00:21:24,510 --> 00:21:28,830
server for a particular app server they

00:21:27,780 --> 00:21:30,120
both have a description of what they're

00:21:28,830 --> 00:21:34,260
going to do the bottom one is the Django

00:21:30,120 --> 00:21:36,060
CMS load balancer and rules have a run

00:21:34,260 --> 00:21:37,770
list so in the top one which is our app

00:21:36,060 --> 00:21:40,740
server we're going to install the my

00:21:37,770 --> 00:21:43,890
sequel client and then we're going to

00:21:40,740 --> 00:21:45,030
run a recipe that actually sets up the

00:21:43,890 --> 00:21:46,200
application server and we're going to

00:21:45,030 --> 00:21:48,870
get into the details of that and a

00:21:46,200 --> 00:21:50,610
little bit the bottom when you can see

00:21:48,870 --> 00:21:52,350
all that sentence are under this is H a

00:21:50,610 --> 00:21:53,370
proxy and the recipes app load balancer

00:21:52,350 --> 00:21:54,840
so that's basically just going to

00:21:53,370 --> 00:21:58,410
install AJ proxy and do that search that

00:21:54,840 --> 00:22:01,290
we talked about and roles can also have

00:21:58,410 --> 00:22:02,490
attributes and this is sort of where we

00:22:01,290 --> 00:22:03,720
start to get into some of the override

00:22:02,490 --> 00:22:05,550
points i talked about how you can

00:22:03,720 --> 00:22:08,460
override saying defaults so in this

00:22:05,550 --> 00:22:10,140
particular case we're telling chef which

00:22:08,460 --> 00:22:12,270
role we want to perform the search with

00:22:10,140 --> 00:22:15,210
so that will ensure that the actual

00:22:12,270 --> 00:22:21,750
search to look for app servers to load

00:22:15,210 --> 00:22:23,520
balance is Django CMS so so the last

00:22:21,750 --> 00:22:26,790
thing we talked about is data bags and

00:22:23,520 --> 00:22:28,740
data bags are really just a arbitrary

00:22:26,790 --> 00:22:31,680
place to store data sort of like a large

00:22:28,740 --> 00:22:33,360
no sequel store this is a little small

00:22:31,680 --> 00:22:34,920
and I want to be but in this particular

00:22:33,360 --> 00:22:36,570
case I'm just dumping out to show you

00:22:34,920 --> 00:22:39,300
what kind of data might be in there so

00:22:36,570 --> 00:22:40,290
this is the actual data bag item for our

00:22:39,300 --> 00:22:41,550
application that we're going to be

00:22:40,290 --> 00:22:42,990
deploying you can see some of the data

00:22:41,550 --> 00:22:45,470
that's stored up in there we've got a

00:22:42,990 --> 00:22:47,460
bunch of the database information about

00:22:45,470 --> 00:22:48,990
the password for the database in the

00:22:47,460 --> 00:22:50,910
name of the database the username that

00:22:48,990 --> 00:22:53,430
you connect with where do we want to

00:22:50,910 --> 00:22:56,220
deploy code to out on the server where

00:22:53,430 --> 00:22:57,870
do we actually pull code from um

00:22:56,220 --> 00:23:00,590
what kind of native packages do we need

00:22:57,870 --> 00:23:03,419
to install what what Django pack or

00:23:00,590 --> 00:23:05,070
Python packages do we need to install so

00:23:03,419 --> 00:23:06,419
you can see this is and this is just

00:23:05,070 --> 00:23:07,679
freeform data depending on your

00:23:06,419 --> 00:23:10,140
application or your needs you can put

00:23:07,679 --> 00:23:13,169
anything in there you might want to put

00:23:10,140 --> 00:23:14,400
you know IP information there's just a

00:23:13,169 --> 00:23:15,450
lot of different information to pay your

00:23:14,400 --> 00:23:19,500
infrastructure that you might want to

00:23:15,450 --> 00:23:20,909
throw in a data bag and then finally we

00:23:19,500 --> 00:23:22,320
want to track all this like source code

00:23:20,909 --> 00:23:24,450
which we talked about before so this is

00:23:22,320 --> 00:23:26,220
just showing the get log from one of our

00:23:24,450 --> 00:23:27,299
projects the cookbook repo and you can

00:23:26,220 --> 00:23:29,100
see some of the stuff you know we just

00:23:27,299 --> 00:23:33,390
start checking it in writing to get like

00:23:29,100 --> 00:23:35,250
everything else so the stack we're going

00:23:33,390 --> 00:23:36,570
to be talking about we're going to be

00:23:35,250 --> 00:23:39,539
talking about an into your stack that's

00:23:36,570 --> 00:23:42,270
using django Django CMS and green

00:23:39,539 --> 00:23:47,970
unicorn which is one of the newer ways

00:23:42,270 --> 00:23:48,990
to deploy Django applications so there's

00:23:47,970 --> 00:23:51,240
a couple different steps we've got to

00:23:48,990 --> 00:23:53,789
discuss here the first thing we have to

00:23:51,240 --> 00:23:54,659
do is actually provision our servers we

00:23:53,789 --> 00:23:56,280
need some computers on the internet

00:23:54,659 --> 00:23:57,720
they're going to end up being load

00:23:56,280 --> 00:24:00,360
balancers web servers and database

00:23:57,720 --> 00:24:01,770
servers and we need to launch these now

00:24:00,360 --> 00:24:04,169
we could launch these through something

00:24:01,770 --> 00:24:05,130
like you know kickstart or something in

00:24:04,169 --> 00:24:06,299
our case we're going to chat a little

00:24:05,130 --> 00:24:07,770
bit about just launching with a cloud

00:24:06,299 --> 00:24:09,570
API but the idea being you just have

00:24:07,770 --> 00:24:10,799
bare metal running somewhere nothing

00:24:09,570 --> 00:24:13,679
else can figure just a base a less

00:24:10,799 --> 00:24:15,210
install after you do that we actually

00:24:13,679 --> 00:24:19,260
have to configure these servers to do

00:24:15,210 --> 00:24:21,450
something so we want to install package

00:24:19,260 --> 00:24:24,450
create users you could use pre-built

00:24:21,450 --> 00:24:27,840
images for this but just for a simple

00:24:24,450 --> 00:24:29,309
infrastructure you know you'd have for

00:24:27,840 --> 00:24:30,510
discrete images to maintain and keep

00:24:29,309 --> 00:24:31,890
maintaining so we actually would rather

00:24:30,510 --> 00:24:35,880
do this using something like chef to do

00:24:31,890 --> 00:24:37,260
the configuration and the last mile of

00:24:35,880 --> 00:24:39,450
all this is we've got to actually

00:24:37,260 --> 00:24:40,830
integrate these so the systems are

00:24:39,450 --> 00:24:42,780
configured but we also need to configure

00:24:40,830 --> 00:24:44,340
them to talk to each other so just

00:24:42,780 --> 00:24:45,600
because we brought up a load balancer or

00:24:44,340 --> 00:24:47,280
just because we brought up an app server

00:24:45,600 --> 00:24:50,250
we've got to draw those final lines and

00:24:47,280 --> 00:24:51,780
actually connect it all together so

00:24:50,250 --> 00:24:57,270
that's sort of the stack we're going to

00:24:51,780 --> 00:24:59,220
be talking about the final look of it so

00:24:57,270 --> 00:25:00,390
chef enables systems integration that

00:24:59,220 --> 00:25:01,830
that's a really important thing that

00:25:00,390 --> 00:25:04,679
chef does that some other configuration

00:25:01,830 --> 00:25:06,179
management tools don't do chef searches

00:25:04,679 --> 00:25:09,520
allow nodes to be aware of each other

00:25:06,179 --> 00:25:11,850
and self configure a shared app

00:25:09,520 --> 00:25:14,440
data bag which we looked at before

00:25:11,850 --> 00:25:16,060
allows many application servers to check

00:25:14,440 --> 00:25:18,550
out the same application code during

00:25:16,060 --> 00:25:19,510
their initial bootstrapping so what we

00:25:18,550 --> 00:25:22,030
want to be able to do is actually

00:25:19,510 --> 00:25:23,710
provision a server bootstrap that server

00:25:22,030 --> 00:25:25,810
and by the end of that first initial

00:25:23,710 --> 00:25:27,340
provision bootstrap the app should be up

00:25:25,810 --> 00:25:29,640
and running on that server and that

00:25:27,340 --> 00:25:33,160
should take like minutes versus hours

00:25:29,640 --> 00:25:35,320
and the app server and database servers

00:25:33,160 --> 00:25:37,210
will also initialize off the same

00:25:35,320 --> 00:25:38,560
database config and you'll see what we

00:25:37,210 --> 00:25:43,000
mean by that when we actually look at

00:25:38,560 --> 00:25:44,500
the individual servers so the first item

00:25:43,000 --> 00:25:48,040
we're talking about will bring up first

00:25:44,500 --> 00:25:50,020
at our database master take a look at

00:25:48,040 --> 00:25:51,820
the role we're going to apply to that so

00:25:50,020 --> 00:25:53,620
again this is just if I was to use knife

00:25:51,820 --> 00:25:55,810
and run this command to see output of

00:25:53,620 --> 00:25:58,840
that the main thing we want to look at

00:25:55,810 --> 00:26:00,640
here is the run list so all of this node

00:25:58,840 --> 00:26:02,680
has in its run list is database master

00:26:00,640 --> 00:26:05,650
so it's the database cookbook and the

00:26:02,680 --> 00:26:07,330
master recipe within that cookbook the

00:26:05,650 --> 00:26:08,830
database master recipe reads the

00:26:07,330 --> 00:26:11,650
application information from that data

00:26:08,830 --> 00:26:13,330
bag I showed you guys earlier and it

00:26:11,650 --> 00:26:19,120
uses it to create the database so the

00:26:13,330 --> 00:26:20,170
application can store its data so at a

00:26:19,120 --> 00:26:23,140
high level or it's doing we're going to

00:26:20,170 --> 00:26:25,960
stall configure my sequel we're going to

00:26:23,140 --> 00:26:27,250
create an application database we're

00:26:25,960 --> 00:26:29,470
going to grant the application user

00:26:27,250 --> 00:26:30,370
access to that database and that's all

00:26:29,470 --> 00:26:31,810
going to happen one hundred percent

00:26:30,370 --> 00:26:33,430
automated we're not going to have to get

00:26:31,810 --> 00:26:38,260
involved and type any sequel commands or

00:26:33,430 --> 00:26:40,210
do anything out on the actual server the

00:26:38,260 --> 00:26:42,430
actual Django application servers we're

00:26:40,210 --> 00:26:43,720
going to have one to end of these you

00:26:42,430 --> 00:26:45,250
know you at least obviously have to have

00:26:43,720 --> 00:26:47,560
one but we can keep adding more if we

00:26:45,250 --> 00:26:49,120
had to and we adding more is just

00:26:47,560 --> 00:26:50,890
provisioning more of those so if we

00:26:49,120 --> 00:26:52,090
needed like three of them we just go

00:26:50,890 --> 00:26:53,530
ahead and provision three of them if we

00:26:52,090 --> 00:26:58,960
need a fourth in we could provision one

00:26:53,530 --> 00:27:00,670
more so we're basically scaling

00:26:58,960 --> 00:27:02,500
horizontal with this and we can even

00:27:00,670 --> 00:27:03,970
scale up and down based on demands so

00:27:02,500 --> 00:27:05,770
there's a lot of people out there using

00:27:03,970 --> 00:27:07,570
chef that they this layer they actually

00:27:05,770 --> 00:27:09,130
change based on certain outside inputs

00:27:07,570 --> 00:27:10,690
and they take advantage of the chef

00:27:09,130 --> 00:27:14,400
api's to actually know when they need to

00:27:10,690 --> 00:27:18,670
add more servers or take down servers

00:27:14,400 --> 00:27:20,470
the actual role for this particular node

00:27:18,670 --> 00:27:21,760
you can see we looked at this a little

00:27:20,470 --> 00:27:23,230
bit earlier but we're going to install

00:27:21,760 --> 00:27:24,520
the my sequel client

00:27:23,230 --> 00:27:26,380
p which ensures that my secret client

00:27:24,520 --> 00:27:30,490
libraries are there and then we're also

00:27:26,380 --> 00:27:31,900
going to use the application recipe the

00:27:30,490 --> 00:27:33,580
main one here that soon the heavy

00:27:31,900 --> 00:27:35,470
lifting is the application recipe and

00:27:33,580 --> 00:27:38,020
this recipe reads data from the data bag

00:27:35,470 --> 00:27:39,549
that we looked at before it determines

00:27:38,020 --> 00:27:41,350
what type of application needs to deploy

00:27:39,549 --> 00:27:43,900
the repository where it should grab the

00:27:41,350 --> 00:27:46,090
code the details on where to put it and

00:27:43,900 --> 00:27:47,740
what roles the search to find the actual

00:27:46,090 --> 00:27:49,720
database master to make the connection

00:27:47,740 --> 00:27:54,510
and then it renders its configuration

00:27:49,720 --> 00:27:56,919
file out so on this particular server

00:27:54,510 --> 00:27:58,870
we've got a couple important steps in

00:27:56,919 --> 00:28:00,460
the context of talking about an app

00:27:58,870 --> 00:28:01,840
server we need to actually deploy the

00:28:00,460 --> 00:28:05,770
application code and get it on the

00:28:01,840 --> 00:28:09,400
system so in this case our example we're

00:28:05,770 --> 00:28:11,200
going to check out code from get we need

00:28:09,400 --> 00:28:12,970
to install any required packages these

00:28:11,200 --> 00:28:15,700
might be OS packages or Python so it

00:28:12,970 --> 00:28:18,970
might be native packages say we were

00:28:15,700 --> 00:28:20,919
using a image magix or something you

00:28:18,970 --> 00:28:22,210
know inside of our Python we'd have to

00:28:20,919 --> 00:28:24,820
ensure that those native packages are

00:28:22,210 --> 00:28:26,919
installed we're going to create an

00:28:24,820 --> 00:28:28,210
environmental specific config file so

00:28:26,919 --> 00:28:29,380
this actual file is the thing that's

00:28:28,210 --> 00:28:30,970
going to have the database connection

00:28:29,380 --> 00:28:32,799
information and the neat thing about

00:28:30,970 --> 00:28:34,240
this is its dynamic it's created on the

00:28:32,799 --> 00:28:37,000
fly based on the environment where the

00:28:34,240 --> 00:28:38,230
app servers running so we don't have to

00:28:37,000 --> 00:28:40,179
actually hard code anything in those

00:28:38,230 --> 00:28:41,380
files check those into source control or

00:28:40,179 --> 00:28:42,280
anything like that and so when we

00:28:41,380 --> 00:28:44,290
deployed in multiple different

00:28:42,280 --> 00:28:47,530
environments that file just is rendered

00:28:44,290 --> 00:28:48,490
based on the local environment and after

00:28:47,530 --> 00:28:49,780
you've deployed your code actually

00:28:48,490 --> 00:28:51,160
gotten on the system we actually have to

00:28:49,780 --> 00:28:52,809
do something and put something on there

00:28:51,160 --> 00:28:54,760
serve it up so in our particular case

00:28:52,809 --> 00:28:56,200
we're going to install G unicorn you

00:28:54,760 --> 00:28:58,630
could also do something like a patchy to

00:28:56,200 --> 00:29:00,040
mod whiskey but that's the actual thing

00:28:58,630 --> 00:29:01,720
that's going to serve up the code and

00:29:00,040 --> 00:29:04,330
then we're going to create an app

00:29:01,720 --> 00:29:09,630
application specific config file or if

00:29:04,330 --> 00:29:11,830
it's Apache like a V host basically so

00:29:09,630 --> 00:29:13,770
the real magic on this though if you

00:29:11,830 --> 00:29:16,030
look at the recipe code is this search

00:29:13,770 --> 00:29:17,470
it looks very similar to the search we

00:29:16,030 --> 00:29:18,370
looked at before for a load balancer but

00:29:17,470 --> 00:29:20,440
really what we're doing is we're

00:29:18,370 --> 00:29:21,850
searching against the node index we're

00:29:20,440 --> 00:29:25,510
looking for anything that has a role of

00:29:21,850 --> 00:29:27,580
Django CMS database master and those

00:29:25,510 --> 00:29:29,799
results were actually going to use to

00:29:27,580 --> 00:29:32,559
render out the local settings po file so

00:29:29,799 --> 00:29:35,350
that's just within the Django community

00:29:32,559 --> 00:29:37,059
there's not really a standard settings

00:29:35,350 --> 00:29:38,049
file sort of like in ray

00:29:37,059 --> 00:29:40,389
if you guys have done that there's a

00:29:38,049 --> 00:29:42,159
database the animal so in this one we're

00:29:40,389 --> 00:29:43,720
going to render out local settings py

00:29:42,159 --> 00:29:45,730
and that will get picked up by the

00:29:43,720 --> 00:29:46,840
application and override the database

00:29:45,730 --> 00:29:51,549
settings so it connects to the right

00:29:46,840 --> 00:29:53,799
database and so now that we've got our

00:29:51,549 --> 00:29:56,049
database masterbuilt out we've got a

00:29:53,799 --> 00:29:57,759
couple app servers we're actually going

00:29:56,049 --> 00:30:01,389
to need to install and configure the

00:29:57,759 --> 00:30:03,009
load balancer so we looked at this rule

00:30:01,389 --> 00:30:06,129
a little bit before nothing too exciting

00:30:03,009 --> 00:30:07,870
here basically we're overriding some

00:30:06,129 --> 00:30:10,299
attributes while we're looking for all

00:30:07,870 --> 00:30:13,899
app all nodes with a role of Django CMS

00:30:10,299 --> 00:30:19,179
and our run list is just H a proxy app

00:30:13,899 --> 00:30:21,340
load balancer so and the big thing here

00:30:19,179 --> 00:30:22,720
is we want the balancing Pole to grow as

00:30:21,340 --> 00:30:28,869
more application servers are brought

00:30:22,720 --> 00:30:30,850
online and very simple search syntax

00:30:28,869 --> 00:30:32,769
here we're going to search for all nodes

00:30:30,850 --> 00:30:34,090
that have a role of Django CMS again

00:30:32,769 --> 00:30:37,119
this would have been sending dynamically

00:30:34,090 --> 00:30:38,379
though from the override and all those

00:30:37,119 --> 00:30:39,940
full members are going to be sent in to

00:30:38,379 --> 00:30:43,210
actually render the H a proxy config

00:30:39,940 --> 00:30:44,740
file so this search actually occurs

00:30:43,210 --> 00:30:48,070
every time chef runs on the load

00:30:44,740 --> 00:30:49,539
balancer on that node so as you add more

00:30:48,070 --> 00:30:51,279
app servers to the mix the load balancer

00:30:49,539 --> 00:30:53,830
will automatically become aware of them

00:30:51,279 --> 00:30:55,389
so I mean that's a pretty pretty

00:30:53,830 --> 00:30:56,769
powerful thing it's a very simple thing

00:30:55,389 --> 00:30:58,240
all you have to do is Damon I chef

00:30:56,769 --> 00:30:59,740
client to run on those load balancers

00:30:58,240 --> 00:31:01,450
and you can set that to any time period

00:30:59,740 --> 00:31:02,950
you want it could be five minutes it

00:31:01,450 --> 00:31:03,999
could be 30 minutes you know it's up to

00:31:02,950 --> 00:31:08,980
you based on your needs in your

00:31:03,999 --> 00:31:11,499
infrastructure so you know now that

00:31:08,980 --> 00:31:13,149
we've we've gotten looked at everything

00:31:11,499 --> 00:31:14,470
what's really interesting about the code

00:31:13,149 --> 00:31:17,200
we just walked through or that sort of

00:31:14,470 --> 00:31:18,789
architecture we're talking about we can

00:31:17,200 --> 00:31:20,769
actually use a single set of chef

00:31:18,789 --> 00:31:22,360
cookbooks roles and data bags to deploy

00:31:20,769 --> 00:31:24,610
our application stacks and a bunch of

00:31:22,360 --> 00:31:26,529
different ways so let's talk a little

00:31:24,610 --> 00:31:30,279
bit how we can deploy that and why this

00:31:26,529 --> 00:31:32,889
is interesting we can take those and

00:31:30,279 --> 00:31:34,480
actually provision a node with all those

00:31:32,889 --> 00:31:37,059
roles applied and actually put

00:31:34,480 --> 00:31:38,049
everything on a single node so you know

00:31:37,059 --> 00:31:39,369
we were looking at the case where we

00:31:38,049 --> 00:31:40,659
want to break apart everything into

00:31:39,369 --> 00:31:42,279
individual nodes and actually have a

00:31:40,659 --> 00:31:44,230
load balance or two app servers in a

00:31:42,279 --> 00:31:46,659
database master there's no reason that

00:31:44,230 --> 00:31:48,429
we could miss provision a node with a

00:31:46,659 --> 00:31:49,659
run list that had all of those roles on

00:31:48,429 --> 00:31:50,800
it and actually had everything running

00:31:49,659 --> 00:31:52,180
on a single box

00:31:50,800 --> 00:31:55,180
and that's really interesting for doing

00:31:52,180 --> 00:31:59,410
things like QA or staging boxes or even

00:31:55,180 --> 00:32:00,670
development we could use the same code

00:31:59,410 --> 00:32:03,880
to provision things on physical hardware

00:32:00,670 --> 00:32:06,820
or any number of public or private cloud

00:32:03,880 --> 00:32:08,800
providers so most your chef code is

00:32:06,820 --> 00:32:10,450
going to be able to run on any different

00:32:08,800 --> 00:32:12,250
hardware running anywhere it doesn't

00:32:10,450 --> 00:32:13,750
matter if it's its public private cloud

00:32:12,250 --> 00:32:15,130
or physical and we'll look at some of

00:32:13,750 --> 00:32:21,940
the commands you do to provision things

00:32:15,130 --> 00:32:23,200
differently and the last thing it's

00:32:21,940 --> 00:32:26,200
really interesting is we can take that

00:32:23,200 --> 00:32:28,210
same run list and provision a developer

00:32:26,200 --> 00:32:30,370
workstation with a fully virtualized

00:32:28,210 --> 00:32:36,190
vagrant and virtual box set up for doing

00:32:30,370 --> 00:32:37,980
their testing in debugging so so i'm

00:32:36,190 --> 00:32:40,060
going to show you these are actually

00:32:37,980 --> 00:32:42,670
three different commands to launch

00:32:40,060 --> 00:32:45,370
things on three different sort of like I

00:32:42,670 --> 00:32:46,600
guess hardware setup so the first one we

00:32:45,370 --> 00:32:49,480
could use that to actually launch our

00:32:46,600 --> 00:32:50,950
stack in a data center assuming that a

00:32:49,480 --> 00:32:52,300
box had been provisioned ahead of time

00:32:50,950 --> 00:32:54,670
using something like cobbler kick start

00:32:52,300 --> 00:32:56,170
or whatever with an IP address of one

00:32:54,670 --> 00:32:58,330
two three one two three three three just

00:32:56,170 --> 00:32:59,680
in this example and you can see the big

00:32:58,330 --> 00:33:01,810
thing we're doing here is passing in the

00:32:59,680 --> 00:33:03,400
run list with a dash are so right there

00:33:01,810 --> 00:33:06,820
we're actually going to install the

00:33:03,400 --> 00:33:08,650
database master making an app server by

00:33:06,820 --> 00:33:11,980
using the Django CMS role and then also

00:33:08,650 --> 00:33:13,750
making it a load balancer so conversely

00:33:11,980 --> 00:33:16,560
we can take this exact same command and

00:33:13,750 --> 00:33:19,720
using nice built-in cloud provisioning

00:33:16,560 --> 00:33:21,070
stopped with a knife ec2 plugin we could

00:33:19,720 --> 00:33:23,590
actually create and provision a server

00:33:21,070 --> 00:33:24,880
out in ec2 and then apply the same run

00:33:23,590 --> 00:33:26,530
list and it would do the exact same

00:33:24,880 --> 00:33:28,210
steps that you you know we were doing in

00:33:26,530 --> 00:33:29,410
the first one and then to do it with

00:33:28,210 --> 00:33:31,330
rackspace it's just a matter of

00:33:29,410 --> 00:33:34,210
switching out you know knife rack space

00:33:31,330 --> 00:33:35,560
server create so we didn't actually have

00:33:34,210 --> 00:33:37,060
to change any of the code that we wrote

00:33:35,560 --> 00:33:39,100
for chef or any of that configuration

00:33:37,060 --> 00:33:40,390
code it's all the same code it's just

00:33:39,100 --> 00:33:42,970
that we've chosen to provision things in

00:33:40,390 --> 00:33:44,680
three different ways so you can see that

00:33:42,970 --> 00:33:46,300
makes it very portable across crowd

00:33:44,680 --> 00:33:52,150
providers or even across your data

00:33:46,300 --> 00:33:54,430
center out to a cloud so if we wanted to

00:33:52,150 --> 00:33:56,260
make this a multi machine cluster out an

00:33:54,430 --> 00:33:57,610
ec2 you can see that all we have to do

00:33:56,260 --> 00:34:00,190
is just provision for different nodes

00:33:57,610 --> 00:34:01,690
and break those roles apart versus

00:34:00,190 --> 00:34:03,250
stacking them in a single node that

00:34:01,690 --> 00:34:04,669
would do the same thing but we'd have

00:34:03,250 --> 00:34:07,159
that setup we talked about where we

00:34:04,669 --> 00:34:09,500
add you know the interior architecture

00:34:07,159 --> 00:34:11,000
everything's split apart so it's really

00:34:09,500 --> 00:34:14,629
just a matter of how you provision

00:34:11,000 --> 00:34:17,030
things that makes the difference and

00:34:14,629 --> 00:34:20,089
then finally if anyone's heard about

00:34:17,030 --> 00:34:21,799
vagrant vagrants basically a ruby gem

00:34:20,089 --> 00:34:24,260
that makes a nice wraparound virtualbox

00:34:21,799 --> 00:34:28,220
and allows you to automate bring up and

00:34:24,260 --> 00:34:30,079
breaking down virtualbox VMS so it's

00:34:28,220 --> 00:34:32,359
almost like making VirtualBox feel like

00:34:30,079 --> 00:34:33,619
a cloud because you can easily provision

00:34:32,359 --> 00:34:35,990
things in Britain and bring them down

00:34:33,619 --> 00:34:37,460
programa CLE quickly so vagrants a

00:34:35,990 --> 00:34:39,200
project that's actually been written it

00:34:37,460 --> 00:34:40,700
allows you to actually write this nice

00:34:39,200 --> 00:34:42,169
little configuration file out the big

00:34:40,700 --> 00:34:44,690
thing you're going to see here is we're

00:34:42,169 --> 00:34:46,909
specifying the run list in our vagrant

00:34:44,690 --> 00:34:49,280
file exact same run list we saw before

00:34:46,909 --> 00:34:50,599
that we're stacking and then all you

00:34:49,280 --> 00:34:51,980
have to type is vagran up and that would

00:34:50,599 --> 00:34:53,839
basically do all the work under the

00:34:51,980 --> 00:34:57,399
covers to talk to VirtualBox bring it up

00:34:53,839 --> 00:34:57,399
running on your local machine yep

00:34:57,790 --> 00:35:01,849
usually the way it works with virtual

00:34:59,839 --> 00:35:03,890
boxes you have boxes so you've got a

00:35:01,849 --> 00:35:06,319
base just like you have sort of a sammy

00:35:03,890 --> 00:35:08,059
and ec2 or something so and there's

00:35:06,319 --> 00:35:10,549
actually a tool called v we that allows

00:35:08,059 --> 00:35:12,470
you to build those it's got a really

00:35:10,549 --> 00:35:14,660
high level language to allow you to sort

00:35:12,470 --> 00:35:16,069
of define this is the OSS should be

00:35:14,660 --> 00:35:17,780
installed here's some base things that

00:35:16,069 --> 00:35:19,280
should be in the image so that's a neat

00:35:17,780 --> 00:35:20,150
project so once you build those boxes

00:35:19,280 --> 00:35:22,309
though you just share them like you

00:35:20,150 --> 00:35:24,410
wouldn't a me or something else but

00:35:22,309 --> 00:35:28,099
that's really really neat for if you're

00:35:24,410 --> 00:35:29,510
like in a web development shop and what

00:35:28,099 --> 00:35:30,920
happens in the development shop like

00:35:29,510 --> 00:35:32,329
that a lot is you get developers who are

00:35:30,920 --> 00:35:33,799
running things on their local MacBook

00:35:32,329 --> 00:35:36,140
and they go to throw things out on

00:35:33,799 --> 00:35:37,880
production that's sent us or Bunty or

00:35:36,140 --> 00:35:39,290
something that stuff breaks so this is a

00:35:37,880 --> 00:35:41,240
way that they can actually bring up the

00:35:39,290 --> 00:35:44,869
production environment locally test

00:35:41,240 --> 00:35:46,490
their changes and you'll get a lot less

00:35:44,869 --> 00:35:47,630
that finger pointing or that hey it

00:35:46,490 --> 00:35:52,150
worked on my machine I don't know why

00:35:47,630 --> 00:35:54,380
it's not working in production so so as

00:35:52,150 --> 00:35:55,670
a bonus we're going to talk a little

00:35:54,380 --> 00:35:59,750
about we just talked about doing this

00:35:55,670 --> 00:36:02,900
all with a Django application stack so

00:35:59,750 --> 00:36:04,819
the application cookbook which it's

00:36:02,900 --> 00:36:06,920
we're not going to dive into it today

00:36:04,819 --> 00:36:08,540
but but at a high level it allows you to

00:36:06,920 --> 00:36:10,460
deploy the following web stack so you

00:36:08,540 --> 00:36:11,599
can deploy Django java web apps PHP

00:36:10,460 --> 00:36:15,799
rails and we're going to be adding

00:36:11,599 --> 00:36:19,060
node.js soon and so that one cookbook

00:36:15,799 --> 00:36:21,080
has this pattern of deploy the code

00:36:19,060 --> 00:36:22,460
get the server component running

00:36:21,080 --> 00:36:23,780
configure it right that thing we talked

00:36:22,460 --> 00:36:24,980
about at a high level you could insert

00:36:23,780 --> 00:36:26,060
and all that stuff we just talked about

00:36:24,980 --> 00:36:27,910
you can insert in these other

00:36:26,060 --> 00:36:31,160
technologies into the exact same thing

00:36:27,910 --> 00:36:33,760
we've also got some quick starts that

00:36:31,160 --> 00:36:36,170
Opscode wrote and i'll make sure that I

00:36:33,760 --> 00:36:37,430
when I post these slides I'll make sure

00:36:36,170 --> 00:36:39,230
there's links to those but if you go out

00:36:37,430 --> 00:36:40,480
to our blog and just search for quick

00:36:39,230 --> 00:36:43,090
starts you'll find them pretty quickly

00:36:40,480 --> 00:36:45,260
and they actually walk you through

00:36:43,090 --> 00:36:46,790
hand-holding you through the steps to do

00:36:45,260 --> 00:36:48,290
exactly what I just talked about so it's

00:36:46,790 --> 00:36:50,300
really nice you could know nothing about

00:36:48,290 --> 00:36:51,590
shop and be up and running with your

00:36:50,300 --> 00:36:56,360
favorite web stack and see how to deploy

00:36:51,590 --> 00:36:58,820
it and run with it so so you know

00:36:56,360 --> 00:37:00,770
there's some further resources on you

00:36:58,820 --> 00:37:03,380
can go out to our website Opscode calm

00:37:00,770 --> 00:37:06,710
the open source projects out on wikidata

00:37:03,380 --> 00:37:09,080
Opscode calm you know if you're ever

00:37:06,710 --> 00:37:11,240
searching for anything on twitter pound

00:37:09,080 --> 00:37:12,740
op chef is the actual our hashtag for

00:37:11,240 --> 00:37:15,250
chef so if you're ever work on anything

00:37:12,740 --> 00:37:18,650
chef definitely search through that

00:37:15,250 --> 00:37:21,980
we're always out on irc.freenode.net in

00:37:18,650 --> 00:37:23,720
the pound Chef and chef hacking so chefs

00:37:21,980 --> 00:37:25,100
more if you're a chef user hackings for

00:37:23,720 --> 00:37:27,440
more than vet dev team working on the

00:37:25,100 --> 00:37:28,970
core shop project and then there's

00:37:27,440 --> 00:37:31,910
mailing lists available at list on

00:37:28,970 --> 00:37:41,740
opscode com so you might have any

00:37:31,910 --> 00:37:41,740
questions or get going okay

00:37:41,910 --> 00:37:46,600
um so weblogic and websphere have some

00:37:44,950 --> 00:37:49,360
interesting stuff because they're semi

00:37:46,600 --> 00:37:50,710
proprietary obviously uh we do have some

00:37:49,360 --> 00:37:51,790
proprietary cookbooks we've written

00:37:50,710 --> 00:37:53,850
there's nothing stopping you from

00:37:51,790 --> 00:37:57,730
writing a cookbook to deploy WebSphere

00:37:53,850 --> 00:37:59,110
it just you'd have to figure out if it's

00:37:57,730 --> 00:38:01,120
kind of gooey installers there's a way

00:37:59,110 --> 00:38:03,190
to automate that that can be a difficult

00:38:01,120 --> 00:38:06,370
you know right now we do have support

00:38:03,190 --> 00:38:08,260
for tomcat and jetty but there's nothing

00:38:06,370 --> 00:38:10,360
stopping you from writing a cookbook to

00:38:08,260 --> 00:38:12,760
automate installation of you know

00:38:10,360 --> 00:38:14,560
WebSphere so and we do have some

00:38:12,760 --> 00:38:16,360
proprietary cookbooks we've written with

00:38:14,560 --> 00:38:17,590
partners so like splunk we've got a

00:38:16,360 --> 00:38:19,510
cookbook err writing with them that

00:38:17,590 --> 00:38:21,010
deals with license management all that

00:38:19,510 --> 00:38:32,160
kind of stuff to deploy one can get it

00:38:21,010 --> 00:38:32,160
running so so can you that's a good

00:38:36,800 --> 00:38:55,350
okay okay so as far as installing chef

00:38:53,880 --> 00:38:58,770
in the context of your workstation to

00:38:55,350 --> 00:39:02,760
run knife or out on a node or as server

00:38:58,770 --> 00:39:03,840
okay yeah the chef I'm not I don't know

00:39:02,760 --> 00:39:05,490
the server that well to be completely

00:39:03,840 --> 00:39:07,500
honest with you I actually know the

00:39:05,490 --> 00:39:08,730
client-side stuff very well I've written

00:39:07,500 --> 00:39:10,020
a lot of the night help right allow the

00:39:08,730 --> 00:39:12,180
knife stuff and the actual chef client

00:39:10,020 --> 00:39:13,860
stuff but the server the server can be a

00:39:12,180 --> 00:39:15,990
complicated Beast because it's running

00:39:13,860 --> 00:39:18,960
rabbit solar I mean it's got a lot of

00:39:15,990 --> 00:39:20,160
CouchDB you know one thing that if

00:39:18,960 --> 00:39:22,470
you're just getting started with Chef

00:39:20,160 --> 00:39:24,570
you might look into just going out and

00:39:22,470 --> 00:39:26,520
messing with a platform because I didn't

00:39:24,570 --> 00:39:28,320
mention that but we you know the basic

00:39:26,520 --> 00:39:30,330
count the free account lets you have up

00:39:28,320 --> 00:39:32,190
to five nodes for free so it basically

00:39:30,330 --> 00:39:35,100
means you can manage five servers with

00:39:32,190 --> 00:39:36,300
with our chef server and sometimes

00:39:35,100 --> 00:39:37,560
that's a better way to get started

00:39:36,300 --> 00:39:39,090
because you can focus on writing on the

00:39:37,560 --> 00:39:41,550
cookbooks and using knife and getting

00:39:39,090 --> 00:39:42,750
used to chef and then once you feel more

00:39:41,550 --> 00:39:44,910
comfortable with that you can go ahead

00:39:42,750 --> 00:39:46,350
and set up your own chef server right

00:39:44,910 --> 00:39:48,660
when you get into production in you're

00:39:46,350 --> 00:39:50,660
worried about that but for development

00:39:48,660 --> 00:39:59,880
it might be easier just to set up a

00:39:50,660 --> 00:40:03,270
hosted chef account just you know at

00:39:59,880 --> 00:40:05,130
this point I think it's about two-thirds

00:40:03,270 --> 00:40:06,570
using hosted I mean there's there's

00:40:05,130 --> 00:40:08,130
people out there using the chef server

00:40:06,570 --> 00:40:10,620
but we have more and more people every

00:40:08,130 --> 00:40:12,810
day moving to the the hosted chef just

00:40:10,620 --> 00:40:14,460
because running the chef server isn't

00:40:12,810 --> 00:40:17,370
really part of what you're trying to get

00:40:14,460 --> 00:40:19,710
done with Chef so you know and it is

00:40:17,370 --> 00:40:21,900
secure everything's run over HTTPS it's

00:40:19,710 --> 00:40:23,220
encrypted you know we talked about the

00:40:21,900 --> 00:40:26,070
key how it's all done we don't actually

00:40:23,220 --> 00:40:27,510
ever have a copy of your private key so

00:40:26,070 --> 00:40:29,040
we couldn't get on your nodes the chef

00:40:27,510 --> 00:40:31,560
server never does and he pushes out to

00:40:29,040 --> 00:40:32,820
the nodes everything's done pull so when

00:40:31,560 --> 00:40:35,700
notes check into the chef server they

00:40:32,820 --> 00:40:38,310
pull stuff down you know so it's very

00:40:35,700 --> 00:40:40,320
secure and we're you know we've got a

00:40:38,310 --> 00:40:42,320
couple next week we're gonna have a big

00:40:40,320 --> 00:40:44,610
announcement if you for some reason

00:40:42,320 --> 00:40:45,750
can't run your own you don't want to run

00:40:44,610 --> 00:40:46,890
the chef server yourself but you can't

00:40:45,750 --> 00:40:47,250
use our hosted product we're going to

00:40:46,890 --> 00:40:48,600
have

00:40:47,250 --> 00:40:49,980
moves for people so we're going to

00:40:48,600 --> 00:40:54,960
philosophy next week we'll make some

00:40:49,980 --> 00:40:56,730
announcements so but I don't know if a

00:40:54,960 --> 00:40:57,930
lot of it made sense I mean I hope you

00:40:56,730 --> 00:41:01,830
know I tried to zoom through a lot of

00:40:57,930 --> 00:41:03,210
things you know doing a chef 101 mix

00:41:01,830 --> 00:41:05,280
with a deep dive can be difficult

00:41:03,210 --> 00:41:06,750
sometimes so I don't know is there

00:41:05,280 --> 00:41:08,820
anything that people had other questions

00:41:06,750 --> 00:41:19,140
about I mean I can anything chef you

00:41:08,820 --> 00:41:20,930
know yes so the cookbooks are cached

00:41:19,140 --> 00:41:23,490
down on the disk I think it's out in

00:41:20,930 --> 00:41:25,440
bark a chef and there's a cookbooks

00:41:23,490 --> 00:41:28,020
directory and everything's cash there so

00:41:25,440 --> 00:41:29,400
if they're so if you've been working on

00:41:28,020 --> 00:41:31,170
a cookbook and you push that up the chef

00:41:29,400 --> 00:41:32,820
server to make a change the next time

00:41:31,170 --> 00:41:34,260
chef runs on one of the nodes it's going

00:41:32,820 --> 00:41:38,640
to pull down those changes automatically

00:41:34,260 --> 00:41:40,080
so and the actual with an execution the

00:41:38,640 --> 00:41:41,550
chef klein it evaluates those cookbooks

00:41:40,080 --> 00:41:45,150
and does everything out on the local

00:41:41,550 --> 00:41:47,040
node so if you talked about how a chef

00:41:45,150 --> 00:41:50,850
run works like when you actually invoke

00:41:47,040 --> 00:41:52,650
chef client oh I actually goes out and

00:41:50,850 --> 00:41:55,320
gret and gathers all that metadata about

00:41:52,650 --> 00:41:57,240
the node and it sends that back up to

00:41:55,320 --> 00:41:59,420
the chef server and saves it and then

00:41:57,240 --> 00:42:02,850
the actual recipe cozy valuated and run

00:41:59,420 --> 00:42:04,260
and then seeing that the state of the

00:42:02,850 --> 00:42:05,640
nodes actually say back up the chef

00:42:04,260 --> 00:42:09,980
server once more when i say state it's

00:42:05,640 --> 00:42:09,980
all that attribute data so

00:42:15,000 --> 00:42:21,390
yeah they're actually so a lot of stuff

00:42:19,770 --> 00:42:22,500
you'd end up putting in like a data bag

00:42:21,390 --> 00:42:23,700
and you can actually encrypt the data

00:42:22,500 --> 00:42:25,260
bags so we have something called

00:42:23,700 --> 00:42:27,300
encrypted data bags that allows you to

00:42:25,260 --> 00:42:29,100
actually you know it's almost like

00:42:27,300 --> 00:42:30,420
storing secure data and Dropbox there's

00:42:29,100 --> 00:42:31,620
ways to do it but you have to encrypt

00:42:30,420 --> 00:42:33,780
the data before you send it to the

00:42:31,620 --> 00:42:35,850
storage area so we have this idea of an

00:42:33,780 --> 00:42:37,230
encrypted data bag that the keys are

00:42:35,850 --> 00:42:39,960
kept in the clear so the actual thing

00:42:37,230 --> 00:42:42,900
like my sequel user but the actual user

00:42:39,960 --> 00:42:44,310
value could be encrypted and save so

00:42:42,900 --> 00:42:46,770
there are it's a little more difficult

00:42:44,310 --> 00:42:48,120
to do but if you're in a you know you

00:42:46,770 --> 00:42:50,970
want to store some really sensitive data

00:42:48,120 --> 00:42:54,170
in your data bag you can do it and we

00:42:50,970 --> 00:42:54,170
have ways to get around that so

00:42:58,840 --> 00:43:09,560
mm-hmm yep it's it's huge I mean right

00:43:08,150 --> 00:43:11,450
now like I so I was the primary author

00:43:09,560 --> 00:43:12,590
of all that code and they're really

00:43:11,450 --> 00:43:14,360
excited there's a lot of people asking

00:43:12,590 --> 00:43:15,890
about it at this point you can fully

00:43:14,360 --> 00:43:20,360
bootstrap a provision windows nodes

00:43:15,890 --> 00:43:22,580
using the ssh protocol or win RM so when

00:43:20,360 --> 00:43:24,020
our am sort of the Microsoft blessed way

00:43:22,580 --> 00:43:26,840
to do remote management now in Windows

00:43:24,020 --> 00:43:28,750
nodes and i also just wrote a powershell

00:43:26,840 --> 00:43:33,380
cookbook which allows you to basically

00:43:28,750 --> 00:43:37,040
execute and evaluate powershell code in

00:43:33,380 --> 00:43:38,360
the context of chef so next week I'm

00:43:37,040 --> 00:43:40,310
going to be actually meeting with one of

00:43:38,360 --> 00:43:42,080
the vmware guys to go over talking about

00:43:40,310 --> 00:43:44,570
some other things for windows and i

00:43:42,080 --> 00:43:45,980
think we're going to be adding a couple

00:43:44,570 --> 00:43:47,870
other primitives things like windows

00:43:45,980 --> 00:43:49,310
package management like so there isn't

00:43:47,870 --> 00:43:50,780
really a package manager but we want to

00:43:49,310 --> 00:43:52,880
make a nice way that you can install MS

00:43:50,780 --> 00:43:55,880
eyes and install you know all those kind

00:43:52,880 --> 00:43:56,660
of things and manage those so we're

00:43:55,880 --> 00:43:58,310
going to add some more windows

00:43:56,660 --> 00:44:01,100
primitives and then I think we're hoping

00:43:58,310 --> 00:44:02,650
to write a cookbook do is installation

00:44:01,100 --> 00:44:04,910
and configuration and sequel server

00:44:02,650 --> 00:44:06,440
really so we could do a full quick start

00:44:04,910 --> 00:44:08,180
showing how to deploy a window sack

00:44:06,440 --> 00:44:15,080
that's the goal for at least my team you

00:44:08,180 --> 00:44:17,060
noted so um like months like weeks like

00:44:15,080 --> 00:44:20,300
yeah it's going to be this summer yeah

00:44:17,060 --> 00:44:22,220
yeah so and something that gets

00:44:20,300 --> 00:44:23,450
accelerated so I you know I do all this

00:44:22,220 --> 00:44:24,920
with the open source project but I'm

00:44:23,450 --> 00:44:26,450
also on the services team so if a

00:44:24,920 --> 00:44:27,800
customer we're working in a customer

00:44:26,450 --> 00:44:29,480
engagement where they want they're

00:44:27,800 --> 00:44:31,910
paying us to do some of this work it

00:44:29,480 --> 00:44:34,130
gets done quicker so knife windows came

00:44:31,910 --> 00:44:35,720
out of a customer project where they

00:44:34,130 --> 00:44:38,300
they wanted provisioning from windows so

00:44:35,720 --> 00:44:40,340
we got it done every time we work on the

00:44:38,300 --> 00:44:41,750
services engagement we make sure there's

00:44:40,340 --> 00:44:43,370
language in there to say any of the code

00:44:41,750 --> 00:44:44,720
that we do will be open sourced and

00:44:43,370 --> 00:44:46,280
brought back to the community so it's

00:44:44,720 --> 00:44:47,630
nice that every project we work on we're

00:44:46,280 --> 00:44:51,890
able to bring that stuff right back and

00:44:47,630 --> 00:44:53,240
so but yeah i mean i'll give you a card

00:44:51,890 --> 00:44:54,260
if you want to talk more about the

00:44:53,240 --> 00:44:57,470
windows stuff you can just shoot me an

00:44:54,260 --> 00:44:58,910
email or I'm always on IRC so but I've

00:44:57,470 --> 00:45:03,550
got stickers up here too if you guys

00:44:58,910 --> 00:45:03,550
want so cool

00:45:36,820 --> 00:45:40,960
what about this I can help you like it

00:45:38,770 --> 00:45:44,590
we have the same problem or whatever a

00:45:40,960 --> 00:45:46,460
few days like

00:45:44,590 --> 00:45:48,890
I

00:45:46,460 --> 00:45:50,950
that's put the word out

00:45:48,890 --> 00:45:50,950
you

00:46:58,760 --> 00:47:05,580
as a service leader in cloud computing

00:47:02,070 --> 00:47:07,140
all we do is hosted computing to us the

00:47:05,580 --> 00:47:09,119
cloud is just the next generation of

00:47:07,140 --> 00:47:11,070
hosting and if someone who's been in the

00:47:09,119 --> 00:47:13,020
hosting industry for 12 years we feel

00:47:11,070 --> 00:47:14,190
we're in a unique position to really

00:47:13,020 --> 00:47:16,320
help bring these two worlds together

00:47:14,190 --> 00:47:18,660
these different sets of technologies and

00:47:16,320 --> 00:47:20,970
to help companies embrace this new world

00:47:18,660 --> 00:47:22,980
in this great new tool that allows

00:47:20,970 --> 00:47:25,590
faster innovation not only is it about

00:47:22,980 --> 00:47:31,160
us being responsive and accountable but

00:47:25,590 --> 00:47:33,800
it's about us doing more for you webos

00:47:31,160 --> 00:47:37,350
nos that works the way that you do

00:47:33,800 --> 00:47:41,510
across all your devices HP Slate and

00:47:37,350 --> 00:47:41,510

YouTube URL: https://www.youtube.com/watch?v=unWwye1uEGc


