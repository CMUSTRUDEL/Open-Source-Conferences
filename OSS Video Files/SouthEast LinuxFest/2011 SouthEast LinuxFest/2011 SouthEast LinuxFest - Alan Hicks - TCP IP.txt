Title: 2011 SouthEast LinuxFest - Alan Hicks - TCP IP
Publication date: 2012-03-22
Playlist: 2011 SouthEast LinuxFest
Description: 
	2011 SouthEast LinuxFest - Alan Hicks - TCP/IP

This video is licensed under Creative Commons Attribution 3.0 Unported License.
Captions: 
	00:00:01,220 --> 00:00:07,350
the following presentation was recorded

00:00:04,259 --> 00:00:09,929
at the 2011 southeast linux fest in

00:00:07,350 --> 00:00:11,429
Spartanburg South Carolina it is

00:00:09,929 --> 00:00:14,250
licensed under a creative commons

00:00:11,429 --> 00:00:18,840
license for more information about the

00:00:14,250 --> 00:00:22,260
southeast linux fest visit w wh linux

00:00:18,840 --> 00:00:24,119
fest org the southeast linux fest would

00:00:22,260 --> 00:00:27,269
like to thank the following diamond and

00:00:24,119 --> 00:00:30,869
platinum sponsors in 2011 for helping

00:00:27,269 --> 00:00:33,020
make these videos possible I'm not Kelly

00:00:30,869 --> 00:00:36,899
couldn't be with us today so I'm

00:00:33,020 --> 00:00:39,450
pinch-hitting my name is Alan Hicks if

00:00:36,899 --> 00:00:43,950
you don't know who i am by now where

00:00:39,450 --> 00:00:47,270
have you been on this time i'm going to

00:00:43,950 --> 00:00:49,620
be doing a talk on tcp/ip basically uh

00:00:47,270 --> 00:00:50,820
just a real quick primer because I don't

00:00:49,620 --> 00:00:52,530
really have a whole lot of time to go

00:00:50,820 --> 00:00:56,760
into depth into everything is just an

00:00:52,530 --> 00:00:59,579
hour talk it's going to go over you know

00:00:56,760 --> 00:01:02,160
just the fundamentals from the physical

00:00:59,579 --> 00:01:04,979
layer on up into you know the network

00:01:02,160 --> 00:01:07,439
layer and if you don't really know a

00:01:04,979 --> 00:01:09,659
whole lot about this stuff you know

00:01:07,439 --> 00:01:11,189
you'll probably learn a few things if

00:01:09,659 --> 00:01:14,220
you already kind of know this stuff well

00:01:11,189 --> 00:01:19,159
maybe you'll learn something if not you

00:01:14,220 --> 00:01:21,990
might find a little boring so uh yeah I

00:01:19,159 --> 00:01:24,810
got to use this little PDF Reader a

00:01:21,990 --> 00:01:26,880
couple quick terms everybody probably

00:01:24,810 --> 00:01:29,430
knows what an OD is it's just anything

00:01:26,880 --> 00:01:32,250
that has an IP address essentially or

00:01:29,430 --> 00:01:34,470
any sort of thing on a network you know

00:01:32,250 --> 00:01:37,799
maybe it's a computer maybe it's a

00:01:34,470 --> 00:01:39,360
router or switch a printer anything you

00:01:37,799 --> 00:01:45,119
know that you can address by a network

00:01:39,360 --> 00:01:47,009
is a node and a frame you probably heard

00:01:45,119 --> 00:01:51,180
the term packet tossed around you know

00:01:47,009 --> 00:01:53,520
we look at your TCP packets and stuff

00:01:51,180 --> 00:01:56,329
like that well we often are in network

00:01:53,520 --> 00:01:58,380
engineering refer to them as frames

00:01:56,329 --> 00:02:00,210
especially when we're dealing with lower

00:01:58,380 --> 00:02:05,689
levels you know something lower in the

00:02:00,210 --> 00:02:07,829
stack like the ethernet or uh 802 11

00:02:05,689 --> 00:02:10,770
when we start talking down there we

00:02:07,829 --> 00:02:13,020
generally say frame for purposes of this

00:02:10,770 --> 00:02:13,910
if I say framer packet it's pretty much

00:02:13,020 --> 00:02:19,020
the same thing

00:02:13,910 --> 00:02:21,330
just so you know and I'm going to go

00:02:19,020 --> 00:02:23,850
over basically the five layers really

00:02:21,330 --> 00:02:26,760
real quick here and a glance if you're

00:02:23,850 --> 00:02:29,310
familiar at all with the OSI model which

00:02:26,760 --> 00:02:33,000
doesn't entirely apply to things like

00:02:29,310 --> 00:02:35,370
ICMP but it's you know this seven-layer

00:02:33,000 --> 00:02:37,950
model where you have different stacks

00:02:35,370 --> 00:02:42,750
that a network frame or whatever goes

00:02:37,950 --> 00:02:44,459
through to arrive we're only really

00:02:42,750 --> 00:02:46,170
going to discuss five of them because

00:02:44,459 --> 00:02:49,590
that's the only five that are really

00:02:46,170 --> 00:02:53,160
commonly used there's a couple more you

00:02:49,590 --> 00:02:56,910
don't need to know about them first up

00:02:53,160 --> 00:02:58,200
is the physical layer and when we're

00:02:56,910 --> 00:02:59,459
talking about the physical layer for

00:02:58,200 --> 00:03:02,370
this talk we're just going to be talking

00:02:59,459 --> 00:03:05,400
about essentially copper wire you know

00:03:02,370 --> 00:03:07,560
it could be fiber optic it could be some

00:03:05,400 --> 00:03:10,320
sort of radio wave it could be you know

00:03:07,560 --> 00:03:13,170
laser transmission infrared something

00:03:10,320 --> 00:03:16,680
like that but but we're just going to be

00:03:13,170 --> 00:03:18,510
talking about a copper wire and oh yeah

00:03:16,680 --> 00:03:21,060
sorry I didn't say this at the beginning

00:03:18,510 --> 00:03:23,340
if you got any questions you know just

00:03:21,060 --> 00:03:25,380
blurt them out don't feel bad about

00:03:23,340 --> 00:03:26,489
interrupting me don't raise your hand

00:03:25,380 --> 00:03:29,340
because I'm getting blinded by the

00:03:26,489 --> 00:03:33,840
spotlight I'll never see you just you

00:03:29,340 --> 00:03:35,280
know blurt something out so uh again

00:03:33,840 --> 00:03:37,530
physical layer we're just going to be

00:03:35,280 --> 00:03:39,480
talking about copper and when we talk

00:03:37,530 --> 00:03:43,590
about copper wire like your patch cables

00:03:39,480 --> 00:03:46,290
and whatnot these those transmit binary

00:03:43,590 --> 00:03:48,660
zeros and ones as voltage fluctuations

00:03:46,290 --> 00:03:51,660
will show you how that happens in a

00:03:48,660 --> 00:03:54,239
little bit the data link layer is really

00:03:51,660 --> 00:03:56,220
the first interesting layer when you're

00:03:54,239 --> 00:03:58,920
talking about ethernet you're actually

00:03:56,220 --> 00:04:01,500
talking about the data link layer you're

00:03:58,920 --> 00:04:04,320
not talking about Internet Protocol

00:04:01,500 --> 00:04:07,320
you're not talking about TCP or UDP

00:04:04,320 --> 00:04:09,180
you're talking about ethernet it's a

00:04:07,320 --> 00:04:12,510
little bit different and a lot of people

00:04:09,180 --> 00:04:15,829
don't know or understand that yet this

00:04:12,510 --> 00:04:20,400
is a what's responsible for making sure

00:04:15,829 --> 00:04:24,210
these bits this frame gets from wherever

00:04:20,400 --> 00:04:24,480
it is on one network or on one subnet or

00:04:24,210 --> 00:04:27,210
one

00:04:24,480 --> 00:04:30,030
land to where it needs to go next on

00:04:27,210 --> 00:04:33,560
that same subnet or land you can't do

00:04:30,030 --> 00:04:37,800
any routing at the data link layer but

00:04:33,560 --> 00:04:40,560
that's why we have next up oops the

00:04:37,800 --> 00:04:45,090
network layer this is where you start

00:04:40,560 --> 00:04:46,980
talking about ipv4 ipv6 this is where

00:04:45,090 --> 00:04:50,430
you're actually begin to actually be

00:04:46,980 --> 00:04:52,710
able to route frames or packets from one

00:04:50,430 --> 00:04:57,510
network on to another or alter the

00:04:52,710 --> 00:04:59,550
internet large the transport layer

00:04:57,510 --> 00:05:03,480
that's basically when you're talking TCP

00:04:59,550 --> 00:05:04,920
UDP ICMP kind of straddles both the

00:05:03,480 --> 00:05:07,500
network layer and the transport layer

00:05:04,920 --> 00:05:09,090
it's a little funny but for purposes

00:05:07,500 --> 00:05:13,890
here I'm probably just going to lump it

00:05:09,090 --> 00:05:15,420
in with transport and that's the only

00:05:13,890 --> 00:05:18,270
part where it's able to actually

00:05:15,420 --> 00:05:21,120
guarantee that your data got to where it

00:05:18,270 --> 00:05:23,060
was going and it can do that optionally

00:05:21,120 --> 00:05:27,030
it doesn't have to it's just an option

00:05:23,060 --> 00:05:28,920
and the application layer which is you

00:05:27,030 --> 00:05:33,330
know basically what makes or receives

00:05:28,920 --> 00:05:36,230
the frame you know say Firefox makes you

00:05:33,330 --> 00:05:39,870
get requests you know get index dot HTML

00:05:36,230 --> 00:05:41,400
that's your data portion then it gets

00:05:39,870 --> 00:05:44,370
passed off to the transport layer

00:05:41,400 --> 00:05:46,290
wrapped up in that that gets passed to

00:05:44,370 --> 00:05:49,170
the network layer wrapped up in that and

00:05:46,290 --> 00:05:50,940
so on and so forth and like I said

00:05:49,170 --> 00:05:52,680
there's other layers like the session

00:05:50,940 --> 00:05:55,790
layer whatnot but they're not commonly

00:05:52,680 --> 00:05:58,500
used if you're dealing with those things

00:05:55,790 --> 00:06:00,450
you're beyond this point you know you're

00:05:58,500 --> 00:06:04,530
beyond what I discussing this talk

00:06:00,450 --> 00:06:08,970
that's things like multicast and much

00:06:04,530 --> 00:06:10,290
more serious junk so let's look at the

00:06:08,970 --> 00:06:12,240
physical layer a little bit more in

00:06:10,290 --> 00:06:14,670
depth like I said earlier may be

00:06:12,240 --> 00:06:17,070
anything from radio waves to laser beams

00:06:14,670 --> 00:06:21,420
to copper pairs we're only going to

00:06:17,070 --> 00:06:27,300
discuss cop repair a long time ago it

00:06:21,420 --> 00:06:31,530
was all coax cable but copper cat5 cat5e

00:06:27,300 --> 00:06:37,670
cat6 so on those and its derivatives are

00:06:31,530 --> 00:06:37,670
by far the most common and so what

00:06:37,910 --> 00:06:44,400
yeah yeah yeah yeah but I mean when you

00:06:42,660 --> 00:06:45,930
start to add it all up in his comment

00:06:44,400 --> 00:06:48,690
was you know then the most common for

00:06:45,930 --> 00:06:50,970
local area not necessarily for wide area

00:06:48,690 --> 00:06:53,310
networks but yeah when you begin to add

00:06:50,970 --> 00:06:55,380
up you know all the different types of

00:06:53,310 --> 00:07:00,360
cable copper is still going to be you

00:06:55,380 --> 00:07:03,060
know the biggest and when you're doing a

00:07:00,360 --> 00:07:05,040
copper basically voltage fluctuations

00:07:03,060 --> 00:07:06,930
that's what registers as your binary

00:07:05,040 --> 00:07:09,300
digits and I have a nice little graph

00:07:06,930 --> 00:07:11,640
here with made up numbers so if the

00:07:09,300 --> 00:07:15,020
numbers don't work you know don't blame

00:07:11,640 --> 00:07:18,740
me I just pulled this out of my butt

00:07:15,020 --> 00:07:21,960
here you can see our x-axis is

00:07:18,740 --> 00:07:24,870
essentially time or y-axis is voltage

00:07:21,960 --> 00:07:27,810
and right here at this you know right

00:07:24,870 --> 00:07:30,660
around 3 volts we have essentially a

00:07:27,810 --> 00:07:33,810
blank and empty bit so whenever it's

00:07:30,660 --> 00:07:36,450
above that three bolt 3 volt value it's

00:07:33,810 --> 00:07:39,770
a binary one and when it's below that 3

00:07:36,450 --> 00:07:42,170
volt value it registers as a binary 0

00:07:39,770 --> 00:07:46,290
it's important to realize you know

00:07:42,170 --> 00:07:48,810
digital stuff it's really analog its

00:07:46,290 --> 00:07:53,130
analog stuff that's just interpreted

00:07:48,810 --> 00:07:55,980
digitally you know we can't send you

00:07:53,130 --> 00:07:57,990
know when we send make these uh voltage

00:07:55,980 --> 00:08:02,070
fluctuations it's going to go on a sine

00:07:57,990 --> 00:08:05,430
curve or a sine wave and so values above

00:08:02,070 --> 00:08:08,250
a certain bit or one thing and blow it

00:08:05,430 --> 00:08:10,890
or another does that make sense to

00:08:08,250 --> 00:08:16,170
everyone okay somebody's nodding their

00:08:10,890 --> 00:08:18,660
head that's good enough for me physical

00:08:16,170 --> 00:08:20,400
layer devices I used to say this was

00:08:18,660 --> 00:08:22,980
anything you could kick but now you know

00:08:20,400 --> 00:08:27,030
you've got Wi-Fi and you can't you know

00:08:22,980 --> 00:08:29,190
kick radio waves but uh you know this is

00:08:27,030 --> 00:08:31,320
anything that's you know a physical part

00:08:29,190 --> 00:08:35,760
of the network from network interface

00:08:31,320 --> 00:08:39,780
cards two hubs two repeaters a repeater

00:08:35,760 --> 00:08:42,240
that's just basically when we're dealing

00:08:39,780 --> 00:08:43,710
with cat5 fiber optics a little bit

00:08:42,240 --> 00:08:45,570
better about this but when you're

00:08:43,710 --> 00:08:48,480
dealing with copper cables after you get

00:08:45,570 --> 00:08:49,649
a certain distance out you get so much

00:08:48,480 --> 00:08:51,689
interference from

00:08:49,649 --> 00:08:53,730
you know just the wire itself you start

00:08:51,689 --> 00:08:56,490
to get you know a drop in voltage do the

00:08:53,730 --> 00:08:58,589
resistance in the wire and so a repeater

00:08:56,490 --> 00:09:01,290
is you know a device which reads those

00:08:58,589 --> 00:09:05,009
then amplifies it and sends it back out

00:09:01,290 --> 00:09:07,860
so you can you know stretch a copper

00:09:05,009 --> 00:09:11,759
cable a long distance you don't see very

00:09:07,860 --> 00:09:13,679
many of these media converters or

00:09:11,759 --> 00:09:15,679
something somewhat similar we maybe you

00:09:13,679 --> 00:09:18,959
have a fiber optic cable and you need to

00:09:15,679 --> 00:09:22,290
switch it into a cat5 to go into a

00:09:18,959 --> 00:09:23,699
switch or hub or whatever you know those

00:09:22,290 --> 00:09:25,319
are essentially taking you know one

00:09:23,699 --> 00:09:30,420
physical media and converting it to

00:09:25,319 --> 00:09:33,869
another similar in how they work Hubbs

00:09:30,420 --> 00:09:35,670
we don't really use these all that much

00:09:33,869 --> 00:09:38,670
because they're stupid I mean they're

00:09:35,670 --> 00:09:40,769
called dumb for a reason you can think

00:09:38,670 --> 00:09:42,809
of these as splitting one cable into

00:09:40,769 --> 00:09:44,699
mini you know you've got one cable

00:09:42,809 --> 00:09:47,009
coming out of your computer and it goes

00:09:44,699 --> 00:09:49,139
into a hub and then there's 23 other

00:09:47,009 --> 00:09:52,079
cables that come out of it and they go

00:09:49,139 --> 00:09:55,170
to 23 other computers well when your

00:09:52,079 --> 00:09:58,519
computer sends a frame a packet whatever

00:09:55,170 --> 00:10:00,809
out its cable when you're using a hub

00:09:58,519 --> 00:10:03,449
every other computer is going to see

00:10:00,809 --> 00:10:05,429
that same frame even if it's not meant

00:10:03,449 --> 00:10:08,429
for them they're stupid they're done

00:10:05,429 --> 00:10:11,249
they just it's just dark and send data

00:10:08,429 --> 00:10:14,220
and so they send it everywhere they you

00:10:11,249 --> 00:10:17,040
know possibly can we don't use these

00:10:14,220 --> 00:10:19,410
today because we have switches switches

00:10:17,040 --> 00:10:24,990
are much better and they're a layer 2

00:10:19,410 --> 00:10:26,490
devices which we'll get into now the

00:10:24,990 --> 00:10:29,970
data link layer this is actually

00:10:26,490 --> 00:10:32,189
ethernet over 802 11 there's several

00:10:29,970 --> 00:10:38,699
others but those are the most common

00:10:32,189 --> 00:10:40,679
most prevalent data link layer have

00:10:38,699 --> 00:10:42,110
addresses their own they're not IP

00:10:40,679 --> 00:10:46,350
addresses they're called MAC addresses

00:10:42,110 --> 00:10:47,699
media access control I'm sure you know

00:10:46,350 --> 00:10:50,420
most of you have heard about mac

00:10:47,699 --> 00:10:54,329
addresses on your Nick and stuff it's a

00:10:50,420 --> 00:10:56,009
48-bit number i believe if I'm recalling

00:10:54,329 --> 00:10:59,730
correctly it's been a couple years since

00:10:56,009 --> 00:11:01,769
I've done this and it's usually just

00:10:59,730 --> 00:11:03,240
physically assigned by the manufacturer

00:11:01,769 --> 00:11:05,630
to the device

00:11:03,240 --> 00:11:08,850
you can change it depending on you know

00:11:05,630 --> 00:11:14,130
your particular hardware but usually

00:11:08,850 --> 00:11:20,190
there's no need to when a frame goes out

00:11:14,130 --> 00:11:22,740
I don't say Ethernet it includes you

00:11:20,190 --> 00:11:25,020
know it the there's two mac addresses

00:11:22,740 --> 00:11:27,390
that are included a source MAC address

00:11:25,020 --> 00:11:30,029
where it's coming from and a destination

00:11:27,390 --> 00:11:35,029
MAC destination MAC address which is the

00:11:30,029 --> 00:11:37,200
next hop that it's going to and will

00:11:35,029 --> 00:11:40,709
understand that a little more we begin

00:11:37,200 --> 00:11:42,510
to talk about the network layer next but

00:11:40,709 --> 00:11:44,940
with the data link layer you can't do

00:11:42,510 --> 00:11:50,910
any sort of routing there's no routing

00:11:44,940 --> 00:11:53,790
whatsoever you have essentially computer

00:11:50,910 --> 00:11:57,720
a with mac address a computer be with

00:11:53,790 --> 00:11:59,550
mac address b which is your router but

00:11:57,720 --> 00:12:02,339
you're wanting to send to computer see

00:11:59,550 --> 00:12:04,770
which is halfway across the world well

00:12:02,339 --> 00:12:07,320
you have no idea what mike address I

00:12:04,770 --> 00:12:09,570
mean what Mike USC is with that computer

00:12:07,320 --> 00:12:11,550
sees MAC address is because it's not on

00:12:09,570 --> 00:12:14,730
your local area network you can't

00:12:11,550 --> 00:12:17,000
directly reach it as long as all your

00:12:14,730 --> 00:12:20,730
systems are essentially on that same

00:12:17,000 --> 00:12:22,649
subnet on that same physical land and

00:12:20,730 --> 00:12:24,810
you don't need to do any routing you

00:12:22,649 --> 00:12:29,220
don't actually need the network layer

00:12:24,810 --> 00:12:32,130
but without it things uh stop getting

00:12:29,220 --> 00:12:34,170
interesting because can't do routing you

00:12:32,130 --> 00:12:38,160
can't really reach very far that's why

00:12:34,170 --> 00:12:40,620
we're not all running IPX today if any

00:12:38,160 --> 00:12:44,339
of if anyone remembers that from you

00:12:40,620 --> 00:12:46,470
know the novell days it died because it

00:12:44,339 --> 00:12:51,240
was not routable you just could not do

00:12:46,470 --> 00:12:54,029
very much with it so we'll look at some

00:12:51,240 --> 00:12:57,890
of these data link layer devices yeah I

00:12:54,029 --> 00:13:01,649
was right they are 40 bit 48-bit numbers

00:12:57,890 --> 00:13:03,660
like I said it's the only address used

00:13:01,649 --> 00:13:07,110
to deliver a frame to its destination

00:13:03,660 --> 00:13:10,589
the IP address which is used later is

00:13:07,110 --> 00:13:13,350
only used to determine rowdy and there's

00:13:10,589 --> 00:13:15,950
also a protocol called art which allows

00:13:13,350 --> 00:13:19,100
you to determine and I p.m. i am a key

00:13:15,950 --> 00:13:23,420
s from an IP address but we're not all

00:13:19,100 --> 00:13:25,040
that interested in it right now Lance

00:13:23,420 --> 00:13:29,030
connected with hubs and Sen frames to

00:13:25,040 --> 00:13:32,300
all attacks nodes nodes are responsible

00:13:29,030 --> 00:13:34,820
for disco ting discarding I can't speak

00:13:32,300 --> 00:13:36,320
today discarding any frames that don't

00:13:34,820 --> 00:13:39,650
match their mac address so let's look

00:13:36,320 --> 00:13:41,530
back at hubs then we had you know 24

00:13:39,650 --> 00:13:44,560
computers hooked up on this hub and

00:13:41,530 --> 00:13:49,280
computer a send something to computer be

00:13:44,560 --> 00:13:53,690
well computers be through what is that x

00:13:49,280 --> 00:13:57,350
yeah x would all receive the same packet

00:13:53,690 --> 00:14:00,410
and only computer be would have that mac

00:13:57,350 --> 00:14:02,780
address so see-through x would all see

00:14:00,410 --> 00:14:04,880
it they would look at it and say this

00:14:02,780 --> 00:14:07,430
doesn't match my mac address and they

00:14:04,880 --> 00:14:09,080
would drop it in the bit bucket computer

00:14:07,430 --> 00:14:12,350
be would see it and say hey this matches

00:14:09,080 --> 00:14:14,290
my mac address let me accept it as you

00:14:12,350 --> 00:14:17,650
can imagine that's very inefficient

00:14:14,290 --> 00:14:22,280
that's why we have switches today

00:14:17,650 --> 00:14:24,890
bridges bridges are what we mainly use

00:14:22,280 --> 00:14:26,720
before we had switches or before

00:14:24,890 --> 00:14:29,600
switches were cheap enough to really use

00:14:26,720 --> 00:14:32,150
everywhere a bridge is like a small

00:14:29,600 --> 00:14:34,760
switch it maintains a list of mac

00:14:32,150 --> 00:14:39,380
addresses on different sides of the

00:14:34,760 --> 00:14:41,540
bridge so you know let's take our 24

00:14:39,380 --> 00:14:44,060
computers again we'll break them into

00:14:41,540 --> 00:14:47,600
two switches or two hubs I'm sorry on

00:14:44,060 --> 00:14:50,900
you know 12 over here 12 over there and

00:14:47,600 --> 00:14:53,600
a bridge that sits between it well if

00:14:50,900 --> 00:14:56,120
computer a sends one to computer be and

00:14:53,600 --> 00:14:59,540
they're both on the same hub the bridge

00:14:56,120 --> 00:15:02,300
will see that and discard it and then

00:14:59,540 --> 00:15:04,190
you know computers what would that be m

00:15:02,300 --> 00:15:06,650
through X something like that would

00:15:04,190 --> 00:15:08,450
never even see that frame because the

00:15:06,650 --> 00:15:12,940
bridge that sits between them just

00:15:08,450 --> 00:15:15,800
dropped it we use those pretty heavily

00:15:12,940 --> 00:15:19,640
back before switches were you know

00:15:15,800 --> 00:15:22,640
economically feasible simply because it

00:15:19,640 --> 00:15:25,940
was a great way to reduce the amount of

00:15:22,640 --> 00:15:28,100
waste that hubs generated now that we

00:15:25,940 --> 00:15:29,710
have switches switches are essentially

00:15:28,100 --> 00:15:32,050
bridges on every poll

00:15:29,710 --> 00:15:35,320
work you know if you've got a 24 port

00:15:32,050 --> 00:15:37,840
switch it remembers MAC addresses on

00:15:35,320 --> 00:15:39,280
every single port and they're cheap

00:15:37,840 --> 00:15:43,360
enough that we can put them essentially

00:15:39,280 --> 00:15:46,990
everywhere so if computer a sends a

00:15:43,360 --> 00:15:49,900
packet out to computer be it hits the

00:15:46,990 --> 00:15:52,840
switch the switch says okay out of these

00:15:49,900 --> 00:15:55,720
24 ports I've got this MAC address

00:15:52,840 --> 00:15:59,410
matches port 2 which goes your computer

00:15:55,720 --> 00:16:02,200
be and sends it out port to port 3

00:15:59,410 --> 00:16:05,200
through 24 never see it and never get

00:16:02,200 --> 00:16:07,480
sent down on and that greatly reduces

00:16:05,200 --> 00:16:12,700
the amount of bullcrap going over your

00:16:07,480 --> 00:16:14,650
wires needlessly you can see why that's

00:16:12,700 --> 00:16:16,510
a big improvement over hubs and it's why

00:16:14,650 --> 00:16:23,050
we don't use hubs today and why we call

00:16:16,510 --> 00:16:24,610
hubs dumb ok so the network layer this

00:16:23,050 --> 00:16:28,090
is probably the only one you're really

00:16:24,610 --> 00:16:30,340
greatly interested in I think it's the

00:16:28,090 --> 00:16:32,860
most difficult to learn it's the most

00:16:30,340 --> 00:16:36,240
rewarding it's the one that actually

00:16:32,860 --> 00:16:38,980
does routing it's it's the biggest layer

00:16:36,240 --> 00:16:43,660
for a reason it does a lot of different

00:16:38,980 --> 00:16:48,070
stuff it does well and it's just it's

00:16:43,660 --> 00:16:51,370
fun so without the network layer like we

00:16:48,070 --> 00:16:53,410
discussed you could only have a packet

00:16:51,370 --> 00:16:55,780
sending back and forth on essentially

00:16:53,410 --> 00:16:58,930
the same land you couldn't do any

00:16:55,780 --> 00:17:01,360
routing just like the old IPX days with

00:16:58,930 --> 00:17:04,780
the network layer internet protocol

00:17:01,360 --> 00:17:06,790
version 4 version 6 whatever that's what

00:17:04,780 --> 00:17:10,540
allows us to do routing i'll show you

00:17:06,790 --> 00:17:14,170
how that's done based on the destination

00:17:10,540 --> 00:17:17,550
IP address it does a subnet look up

00:17:14,170 --> 00:17:17,550
we'll discuss that on the next slide

00:17:17,700 --> 00:17:22,990
most commonly thought I only include

00:17:20,200 --> 00:17:26,170
internet protocol but there's others

00:17:22,990 --> 00:17:28,450
don't ask me to name them because I

00:17:26,170 --> 00:17:31,330
probably could have two years ago and I

00:17:28,450 --> 00:17:36,850
wrote this but I long ago forgot about

00:17:31,330 --> 00:17:40,390
them ok let's look at ipv4 real quick

00:17:36,850 --> 00:17:43,220
these are 32-bit numbers to to the 32nd

00:17:40,390 --> 00:17:48,500
power that's you know four billion

00:17:43,220 --> 00:17:54,500
something it's a big number ipv6

00:17:48,500 --> 00:18:00,350
addresses 128 bits that's a honking big

00:17:54,500 --> 00:18:02,809
number two to the 128 power I would not

00:18:00,350 --> 00:18:07,059
have room on this slide to write that

00:18:02,809 --> 00:18:10,190
number you know it's incredibly big

00:18:07,059 --> 00:18:13,220
we're only going to discuss ipv4 because

00:18:10,190 --> 00:18:15,770
uh you know we're all waiting for ipv6

00:18:13,220 --> 00:18:20,659
to slap us upside the face and say why

00:18:15,770 --> 00:18:23,780
didn't you do me ten years ago I mainly

00:18:20,659 --> 00:18:25,130
doing v4 here because like I said don't

00:18:23,780 --> 00:18:31,220
have the room to put everything on the

00:18:25,130 --> 00:18:35,690
slide if we do these six yeah colon

00:18:31,220 --> 00:18:39,549
colon and you split yeah but I didn't

00:18:35,690 --> 00:18:42,590
want to go through all that work we

00:18:39,549 --> 00:18:45,230
generally look at IP addresses as you

00:18:42,590 --> 00:18:48,049
know four octaves basically two to the

00:18:45,230 --> 00:18:50,120
eighth power dot to they thought to the

00:18:48,049 --> 00:18:52,750
eighth power to the eighth power like

00:18:50,120 --> 00:18:55,070
192 dot one sixty eight dot one dot one

00:18:52,750 --> 00:18:57,919
but the network device sees that

00:18:55,070 --> 00:18:59,720
entirely is one 32-bit number this

00:18:57,919 --> 00:19:02,080
32-bit number down here is one ninety

00:18:59,720 --> 00:19:05,150
two dot one sixty eight dot one dot one

00:19:02,080 --> 00:19:06,860
that's the way your way your switch the

00:19:05,150 --> 00:19:09,650
way your router the way everything else

00:19:06,860 --> 00:19:16,929
is going to see it just as that 32 bit

00:19:09,650 --> 00:19:16,929
string of binary numbers so subnetting

00:19:17,289 --> 00:19:22,429
some this is what's required to

00:19:19,700 --> 00:19:27,230
determine if an IP address is known to

00:19:22,429 --> 00:19:34,520
the sending node or the router think of

00:19:27,230 --> 00:19:36,860
it as being a local subnets are denoted

00:19:34,520 --> 00:19:40,460
in two ways we have you know octa-core

00:19:36,860 --> 00:19:44,240
masks and when you look down here you

00:19:40,460 --> 00:19:48,590
know you see 255 255 255 0 which we

00:19:44,240 --> 00:19:51,230
commonly call / 24 for shorthand if you

00:19:48,590 --> 00:19:54,710
look at it as the 32-bit number that the

00:19:51,230 --> 00:19:57,080
device sees you can see why it's a / 24

00:19:54,710 --> 00:20:02,030
the first 24 numbers

00:19:57,080 --> 00:20:06,080
one the last are all 0 if you have a /

00:20:02,030 --> 00:20:09,470
25 that first 0 will be a 10 / 26 the

00:20:06,080 --> 00:20:11,240
first two zeros will be a 1a / 8 the

00:20:09,470 --> 00:20:13,850
first eight will be one and then

00:20:11,240 --> 00:20:16,610
everything else will be zero that's how

00:20:13,850 --> 00:20:23,780
we come up with you know these funny 255

00:20:16,610 --> 00:20:26,210
255 255 248 so you know it may help if

00:20:23,780 --> 00:20:28,700
you when you see those funny subnets

00:20:26,210 --> 00:20:31,910
somewhere and you're not entirely sure

00:20:28,700 --> 00:20:40,160
what it's doing think of it as a binary

00:20:31,910 --> 00:20:44,180
number that's 32 bits long so subnetting

00:20:40,160 --> 00:20:46,100
continued IP address and subnet masks

00:20:44,180 --> 00:20:47,720
this is what determines whether other IP

00:20:46,100 --> 00:20:50,330
addresses are reachable without

00:20:47,720 --> 00:20:52,670
contacting a router if you looked at

00:20:50,330 --> 00:20:57,310
your routing table before on linux or

00:20:52,670 --> 00:21:01,340
windows or bsd or I don't know Tron

00:20:57,310 --> 00:21:09,580
you'll see things like 192 dot one sixty

00:21:01,340 --> 00:21:12,920
eight dot 10 / 24 no gateway 0 0 0 0 / 0

00:21:09,580 --> 00:21:17,090
use gateway 192 dot one sixty eight dot

00:21:12,920 --> 00:21:18,980
one dot one what you see there when

00:21:17,090 --> 00:21:23,480
you're looking at the routing table is

00:21:18,980 --> 00:21:26,180
if it's in this subnet I can either

00:21:23,480 --> 00:21:34,310
address it directly or I have to use

00:21:26,180 --> 00:21:36,200
this router the the subnet mask is a bit

00:21:34,310 --> 00:21:38,090
mask that hides part of the IP address

00:21:36,200 --> 00:21:41,960
let me show you on this next slide what

00:21:38,090 --> 00:21:46,000
that looks like okay this should be 192

00:21:41,960 --> 00:21:50,710
dot one sixty eight dot one dot 1 / 24

00:21:46,000 --> 00:21:53,180
you can see the first 2401 and

00:21:50,710 --> 00:21:57,140
everywhere we have a one in the subnet

00:21:53,180 --> 00:21:59,960
mask we just ignore that value in the IP

00:21:57,140 --> 00:22:02,360
address so once we get down here to the

00:21:59,960 --> 00:22:06,560
last eight bits we can see you know

00:22:02,360 --> 00:22:09,880
that's 256 IP addresses in there I can

00:22:06,560 --> 00:22:10,970
route to these I mean I can get to these

00:22:09,880 --> 00:22:14,230
00:22:10,970 --> 00:22:17,780
IP addresses without contacting a router

00:22:14,230 --> 00:22:20,620
and yet like I said the first 24 bits

00:22:17,780 --> 00:22:23,059
they hide everything the last 8 bits are

00:22:20,620 --> 00:22:24,440
available to the land everything else

00:22:23,059 --> 00:22:31,159
has got to go through a different route

00:22:24,440 --> 00:22:32,960
usually through a router and if a frame

00:22:31,159 --> 00:22:35,929
you know it's going to an IP address not

00:22:32,960 --> 00:22:40,010
in its local subnet it has to go through

00:22:35,929 --> 00:22:42,799
a router there's other network layer

00:22:40,010 --> 00:22:45,320
protocols whether or not ipv4 like I

00:22:42,799 --> 00:22:47,750
discussed above ICMP kind of straddles

00:22:45,320 --> 00:22:50,720
both the network layer and the transport

00:22:47,750 --> 00:22:54,559
layer there's also art this is what

00:22:50,720 --> 00:22:57,559
determines our or allows you to resolve

00:22:54,559 --> 00:23:02,059
an IP address to a mac address if you're

00:22:57,559 --> 00:23:03,620
on say the same subnet basically you

00:23:02,059 --> 00:23:08,390
know it sends out an art packet that

00:23:03,620 --> 00:23:11,059
says who has dot 3 and then when dot 3

00:23:08,390 --> 00:23:14,450
gets it it says I have dot 3 this is my

00:23:11,059 --> 00:23:18,110
mac address and that's how you resolve

00:23:14,450 --> 00:23:23,270
mike addresses to ipv4 addresses is very

00:23:18,110 --> 00:23:24,980
simple and remember frames they're only

00:23:23,270 --> 00:23:27,950
delivered to my addresses not IP

00:23:24,980 --> 00:23:30,230
addresses the IP address is just used to

00:23:27,950 --> 00:23:33,380
determine rowdy people think you know

00:23:30,230 --> 00:23:35,179
we'll send it to this IP address you're

00:23:33,380 --> 00:23:38,480
not actually sending to an IP address

00:23:35,179 --> 00:23:40,309
your node goes out to a mac address it

00:23:38,480 --> 00:23:42,470
then does a routing lookup it hits

00:23:40,309 --> 00:23:44,690
another router on a mac address there's

00:23:42,470 --> 00:23:51,470
another routing look up and so on and so

00:23:44,690 --> 00:23:53,090
forth the transport layer this is the

00:23:51,470 --> 00:23:55,700
only thing they can optionally guarantee

00:23:53,090 --> 00:23:58,490
data delivery it's a little bit

00:23:55,700 --> 00:24:00,940
different with 802 11 802 11 actually

00:23:58,490 --> 00:24:05,860
has atomic operations which require

00:24:00,940 --> 00:24:08,390
explicit notification of delivery but

00:24:05,860 --> 00:24:10,630
802 dot 3 that we're looking at you know

00:24:08,390 --> 00:24:13,700
Ethernet just sends the data out and

00:24:10,630 --> 00:24:16,909
maybe it gets there maybe it doesn't we

00:24:13,700 --> 00:24:20,360
don't know and and the data link layer

00:24:16,909 --> 00:24:22,039
the network layer they don't care the

00:24:20,360 --> 00:24:24,559
transport layer is the only one that can

00:24:22,039 --> 00:24:24,840
optionally guarantee the data got to

00:24:24,559 --> 00:24:28,529
where

00:24:24,840 --> 00:24:30,720
is going this includes TCP and UDP

00:24:28,529 --> 00:24:34,130
there's other protocols I'm not going to

00:24:30,720 --> 00:24:36,450
discuss them it adds additional

00:24:34,130 --> 00:24:39,240
information to determine what

00:24:36,450 --> 00:24:41,760
application should receive the data

00:24:39,240 --> 00:24:44,460
portion of the frame like say you've

00:24:41,760 --> 00:24:48,390
heard someone say you know well Apache

00:24:44,460 --> 00:24:51,570
listens on port 80 well you know a TCP

00:24:48,390 --> 00:24:54,450
packet gets sent out it lists port 80 as

00:24:51,570 --> 00:24:57,990
the destination port when the server

00:24:54,450 --> 00:25:00,149
receives it it says okay I'm on port 80

00:24:57,990 --> 00:25:06,710
I need to send it to this application

00:25:00,149 --> 00:25:08,850
which is apache httpd make sense is

00:25:06,710 --> 00:25:10,880
responsible for delivering receiving

00:25:08,850 --> 00:25:15,000
data straight from the application layer

00:25:10,880 --> 00:25:17,909
in the reverse thing Apache says okay

00:25:15,000 --> 00:25:21,390
I've got your get index dot HTML here's

00:25:17,909 --> 00:25:24,240
your index dot HTML and it wraps it up

00:25:21,390 --> 00:25:25,770
since the source port is port 80 the

00:25:24,240 --> 00:25:30,809
destination port will be the original

00:25:25,770 --> 00:25:33,390
source port and that's how the two

00:25:30,809 --> 00:25:35,510
different endpoints know which

00:25:33,390 --> 00:25:37,710
applications to send the data between

00:25:35,510 --> 00:25:41,100
because you may have you know your

00:25:37,710 --> 00:25:46,279
laptop may be connected to our ftp

00:25:41,100 --> 00:25:48,720
slackware com on an FTP connection and

00:25:46,279 --> 00:25:51,779
secure shelled into that box at the same

00:25:48,720 --> 00:25:54,840
time those port numbers are what help

00:25:51,779 --> 00:25:57,000
determine which application data gets

00:25:54,840 --> 00:25:59,399
sent to so that your secure shell you

00:25:57,000 --> 00:26:01,799
know encrypted data doesn't gets it into

00:25:59,399 --> 00:26:03,840
the ftp server and you know your

00:26:01,799 --> 00:26:05,789
unencrypted ftp data doesn't get sent to

00:26:03,840 --> 00:26:11,340
a secure shell if that happened i

00:26:05,789 --> 00:26:14,390
suspect both applications from crash so

00:26:11,340 --> 00:26:18,510
a transport control protocol that's tcp

00:26:14,390 --> 00:26:21,480
this is one that gets used the most it's

00:26:18,510 --> 00:26:25,890
a you can think of it as UDP smart

00:26:21,480 --> 00:26:30,360
cousin uses a series of handshakes to

00:26:25,890 --> 00:26:32,460
guarantee data transmission TCP always

00:26:30,360 --> 00:26:34,409
assumes that the media you know whether

00:26:32,460 --> 00:26:36,240
we're talking about radio waves

00:26:34,409 --> 00:26:37,710
fiber-optic whatever weather we're

00:26:36,240 --> 00:26:38,220
talking about going across the internet

00:26:37,710 --> 00:26:40,620
or

00:26:38,220 --> 00:26:44,070
going across the room it always assumes

00:26:40,620 --> 00:26:47,190
we can't rely on the data actually

00:26:44,070 --> 00:26:50,850
getting there so it requires an

00:26:47,190 --> 00:26:52,919
acknowledgement every frame that gets

00:26:50,850 --> 00:26:54,750
sent out it's got to have a

00:26:52,919 --> 00:26:59,789
corresponding acknowledgement returned

00:26:54,750 --> 00:27:02,070
saying I got this data if it doesn't get

00:26:59,789 --> 00:27:07,730
that it resends it until it gets it or

00:27:02,070 --> 00:27:12,330
gives up there's basically four types of

00:27:07,730 --> 00:27:16,350
TCP frames or you know frame types that

00:27:12,330 --> 00:27:17,850
get used syn ACK 10 and rst there's some

00:27:16,350 --> 00:27:20,250
others like explicit congestion

00:27:17,850 --> 00:27:22,230
notification we're not going to deal

00:27:20,250 --> 00:27:25,110
with those they're pretty rarely used

00:27:22,230 --> 00:27:31,020
and if you need to use them you're above

00:27:25,110 --> 00:27:32,940
the level of this talk we're going to

00:27:31,020 --> 00:27:35,789
look at the three-way handshake first

00:27:32,940 --> 00:27:41,610
this is what's used to set up a TCP

00:27:35,789 --> 00:27:47,940
connection say you're communicating to

00:27:41,610 --> 00:27:51,059
slashdot.org on HTTP your laptop your

00:27:47,940 --> 00:27:54,950
desktop whatever we'll send out a TCP

00:27:51,059 --> 00:27:58,380
syn packet that means synchronized start

00:27:54,950 --> 00:28:00,090
when the server receives that it has to

00:27:58,380 --> 00:28:02,809
acknowledge it acknowledges it with a

00:28:00,090 --> 00:28:07,230
synchronized acknowledgement frame or

00:28:02,809 --> 00:28:09,480
what we call a cynic and then you have

00:28:07,230 --> 00:28:11,909
to tell the server hey I got your

00:28:09,480 --> 00:28:15,120
acknowledgement that way both endpoints

00:28:11,909 --> 00:28:17,030
know that we're communicating fine stuff

00:28:15,120 --> 00:28:19,320
isn't getting dropped to the destination

00:28:17,030 --> 00:28:23,190
stuff isn't getting dropped going back

00:28:19,320 --> 00:28:26,370
to the original source and when it gets

00:28:23,190 --> 00:28:29,789
that packet it sends a cynic with an act

00:28:26,370 --> 00:28:32,250
frame or I'm sorry it responds with the

00:28:29,789 --> 00:28:36,419
acknowledgement we sometimes call this a

00:28:32,250 --> 00:28:38,429
syn ack ack and once we've got that done

00:28:36,419 --> 00:28:41,580
we can start exchanging data you know

00:28:38,429 --> 00:28:43,230
data packet says get index dot PHP and

00:28:41,580 --> 00:28:45,270
then it replies when that

00:28:43,230 --> 00:28:47,130
acknowledgement and then start sending

00:28:45,270 --> 00:28:49,890
it data packet with you know the actual

00:28:47,130 --> 00:28:50,559
web page and every data packet for that

00:28:49,890 --> 00:28:52,779
you get

00:28:50,559 --> 00:28:55,629
send it back in acknowledgment and that

00:28:52,779 --> 00:28:58,929
way both endpoints know where we're

00:28:55,629 --> 00:29:03,639
going there's a way to close it down to

00:28:58,929 --> 00:29:06,190
call it a 4 Way handshake this is used

00:29:03,639 --> 00:29:09,159
to gracefully clothes a tcp connection

00:29:06,190 --> 00:29:10,600
you can also close it with an rst packet

00:29:09,159 --> 00:29:16,179
which just basically terminates and

00:29:10,600 --> 00:29:20,259
tears down everything but let's uh W

00:29:16,179 --> 00:29:22,269
gets a useful one to think of here let's

00:29:20,259 --> 00:29:26,679
say node one is your desktop and you're

00:29:22,269 --> 00:29:31,059
doing a double you get of I don't know

00:29:26,679 --> 00:29:34,269
some I so you know big file a DVD you

00:29:31,059 --> 00:29:36,610
send out you know get DVD whatever it

00:29:34,269 --> 00:29:37,960
starts sending data and then W get says

00:29:36,610 --> 00:29:40,899
you know i'm not going to request

00:29:37,960 --> 00:29:44,590
anything else i'll send a finish packet

00:29:40,899 --> 00:29:47,259
a fin and node 2 or reply with a finish

00:29:44,590 --> 00:29:49,539
acknowledgment and it can continue

00:29:47,259 --> 00:29:52,990
sending data at this point the

00:29:49,539 --> 00:29:55,269
connection is called half open no one

00:29:52,990 --> 00:29:57,249
can keep sending or no one won't send

00:29:55,269 --> 00:30:00,759
any more data frames but no tent no two

00:29:57,249 --> 00:30:03,129
might it will continue sending that I so

00:30:00,759 --> 00:30:04,809
until it gets done at which point it'll

00:30:03,129 --> 00:30:09,460
send to finish packet and you'll have to

00:30:04,809 --> 00:30:11,409
send back and finish acknowledgment it

00:30:09,460 --> 00:30:19,059
and once again if you don't understand

00:30:11,409 --> 00:30:22,659
anything you know shout and then oh this

00:30:19,059 --> 00:30:27,690
is basically continued you know once the

00:30:22,659 --> 00:30:30,309
servers finally finished sending the the

00:30:27,690 --> 00:30:32,769
iso file or whatever it is you know it

00:30:30,309 --> 00:30:37,049
sends its final finish and then at that

00:30:32,769 --> 00:30:37,049
point the TCP connection is terminated

00:30:38,129 --> 00:30:44,940
TCP connection can also be terminated

00:30:40,659 --> 00:30:44,940
with an rst flag you know imagine your

00:30:46,769 --> 00:30:51,369
router or whatever is just getting

00:30:48,850 --> 00:30:53,799
completely flooded it can say rst and

00:30:51,369 --> 00:30:55,720
start shutting some of this crap down or

00:30:53,799 --> 00:31:01,809
you can just you know silently drop it

00:30:55,720 --> 00:31:04,450
and TCP will slow down but uh data flags

00:31:01,809 --> 00:31:06,580
like get index dot PHP

00:31:04,450 --> 00:31:09,160
or here's your document here's your ISO

00:31:06,580 --> 00:31:12,130
those don't have any special flags

00:31:09,160 --> 00:31:19,150
they're just raw all those flags are set

00:31:12,130 --> 00:31:22,980
to binary 0 and every data flight data

00:31:19,150 --> 00:31:25,360
frame has a sequence number you know say

00:31:22,980 --> 00:31:27,820
here's your first packet they will be

00:31:25,360 --> 00:31:30,280
sequence number one here's your second

00:31:27,820 --> 00:31:32,980
when it will be sequence number two now

00:31:30,280 --> 00:31:34,300
here's your third one but maybe you gets

00:31:32,980 --> 00:31:36,490
dropped somewhere along the way you

00:31:34,300 --> 00:31:38,860
don't get it here's your fourth one

00:31:36,490 --> 00:31:40,870
here's your fifth one here's your third

00:31:38,860 --> 00:31:43,090
one again well then you know once you

00:31:40,870 --> 00:31:44,650
get that third one it can go back and

00:31:43,090 --> 00:31:47,320
insert the data where it's supposed to

00:31:44,650 --> 00:31:48,700
go that's why we have those sequence

00:31:47,320 --> 00:31:51,580
numbers there because we can't even

00:31:48,700 --> 00:31:54,270
guarantee that the data will get there

00:31:51,580 --> 00:31:57,970
in the order it's supposed to get there

00:31:54,270 --> 00:32:00,910
and every time you get a data packet you

00:31:57,970 --> 00:32:02,950
have to acknowledge it with a knack just

00:32:00,910 --> 00:32:05,080
like we said before if the sender

00:32:02,950 --> 00:32:07,480
doesn't get the act for whatever reason

00:32:05,080 --> 00:32:09,310
maybe you didn't get the data maybe it

00:32:07,480 --> 00:32:11,170
didn't get the acknowledgement either

00:32:09,310 --> 00:32:17,530
one could have got dropped it will

00:32:11,170 --> 00:32:18,910
automatically resend that data and this

00:32:17,530 --> 00:32:21,910
is something already kind of briefly

00:32:18,910 --> 00:32:25,150
touched on with you know the application

00:32:21,910 --> 00:32:30,610
layer speaking to tcp / ports you know

00:32:25,150 --> 00:32:32,830
HTTP opens the socket on port 80 data

00:32:30,610 --> 00:32:35,950
gets sent on that socket to the

00:32:32,830 --> 00:32:38,320
application when the colonel gets one

00:32:35,950 --> 00:32:45,360
that says you know here's tcp port its

00:32:38,320 --> 00:32:52,840
port 80 we we take it and send it to

00:32:45,360 --> 00:32:55,030
httpd every TCP frames got source port

00:32:52,840 --> 00:32:57,790
destination port so you know Firefox

00:32:55,030 --> 00:33:00,700
pick some random high number port will

00:32:57,790 --> 00:33:03,130
call it one two three four five the

00:33:00,700 --> 00:33:05,500
destination port maybe 443 for an

00:33:03,130 --> 00:33:07,360
encrypted connection those will get

00:33:05,500 --> 00:33:10,030
reversed when the acknowledgement gets

00:33:07,360 --> 00:33:12,400
sent out or we need I to get sent out so

00:33:10,030 --> 00:33:17,020
then the destination will be 1 2 3 4 5

00:33:12,400 --> 00:33:17,830
and the source will be 443 and it's

00:33:17,020 --> 00:33:20,320
those poor time

00:33:17,830 --> 00:33:25,750
to tell the colonel which application I

00:33:20,320 --> 00:33:39,299
need to give this crap to UDP is the

00:33:25,750 --> 00:33:42,159
brain dead cousin of TCP yeah yeah yeah

00:33:39,299 --> 00:33:44,080
what he said is strictly speaking the

00:33:42,159 --> 00:33:46,029
random source port gets determined by

00:33:44,080 --> 00:33:47,890
the kernel not by the application

00:33:46,029 --> 00:33:51,039
there's a lot of very good reasons for

00:33:47,890 --> 00:33:52,690
that one of them is that you know if

00:33:51,039 --> 00:33:54,220
you've got multi-user systems or

00:33:52,690 --> 00:33:56,980
multiple applications running at the

00:33:54,220 --> 00:33:59,320
same time if you allow the applications

00:33:56,980 --> 00:34:01,240
to independently determine that they

00:33:59,320 --> 00:34:03,159
might even you know randomly pick the

00:34:01,240 --> 00:34:06,899
same one by pushing it to the colonel

00:34:03,159 --> 00:34:06,899
you can sort of guarantee uniqueness

00:34:07,409 --> 00:34:13,330
down to UDP like I said it's the brain

00:34:11,470 --> 00:34:16,570
dead cousin of TCP it just basically

00:34:13,330 --> 00:34:18,220
says do I can send data it's not worried

00:34:16,570 --> 00:34:22,030
about whether the data actually gets

00:34:18,220 --> 00:34:23,980
there whether some of it gets there and

00:34:22,030 --> 00:34:28,119
some of it doesn't whether none of it

00:34:23,980 --> 00:34:30,520
gets there it just blanket sends data it

00:34:28,119 --> 00:34:31,450
has a lot less overhead than TCP because

00:34:30,520 --> 00:34:33,820
you're not sending all these

00:34:31,450 --> 00:34:36,970
acknowledgment packets you're not doing

00:34:33,820 --> 00:34:38,679
all these handshakes and stuff so it's

00:34:36,970 --> 00:34:42,879
very good for certain things like voice

00:34:38,679 --> 00:34:44,349
over IP you know things where it's more

00:34:42,879 --> 00:34:47,649
important that data gets there as

00:34:44,349 --> 00:34:49,869
quickly as possible then the all of the

00:34:47,649 --> 00:34:51,760
data gets there you know when we're

00:34:49,869 --> 00:34:53,379
downloading in I so we get kind of

00:34:51,760 --> 00:34:57,099
pissed when we find out that there's a

00:34:53,379 --> 00:34:59,170
few bits that were missing when we're

00:34:57,099 --> 00:35:02,560
doing a voice over IP you know

00:34:59,170 --> 00:35:05,589
discussion for five minutes and you know

00:35:02,560 --> 00:35:08,560
you miss a few microseconds of someone

00:35:05,589 --> 00:35:14,470
you know speaking we might not even

00:35:08,560 --> 00:35:16,119
notice it so it's very good for those

00:35:14,470 --> 00:35:17,950
sort of uses that need speed over a

00:35:16,119 --> 00:35:19,480
liability and an ultra next comment is

00:35:17,950 --> 00:35:22,420
going to be robot I'll get to that in a

00:35:19,480 --> 00:35:26,920
moment it uses ports in the same way

00:35:22,420 --> 00:35:28,930
it's TCP if you're doing any sort of VPN

00:35:26,920 --> 00:35:32,859
like openvpn

00:35:28,930 --> 00:35:37,270
I don't know ipsec you want to use UDP

00:35:32,859 --> 00:35:41,530
instead of TCP for a lot of very good

00:35:37,270 --> 00:35:43,950
reasons the most important is the fact

00:35:41,530 --> 00:35:48,010
that when you start encapsulating TCP

00:35:43,950 --> 00:35:50,079
inside of TCP you get double

00:35:48,010 --> 00:35:52,680
acknowledgments you get double slowdowns

00:35:50,079 --> 00:35:58,290
it just doesn't operate as efficiently

00:35:52,680 --> 00:36:01,990
let's look at say i'm doing a have a VPN

00:35:58,290 --> 00:36:05,859
that's on the UDP and it's encapsulating

00:36:01,990 --> 00:36:09,579
a tcp connection to send mail so i send

00:36:05,859 --> 00:36:12,910
out you know my port or send my data on

00:36:09,579 --> 00:36:15,099
port 25 and before it goes out it gets

00:36:12,910 --> 00:36:17,650
wrapped up and encapsulated in this

00:36:15,099 --> 00:36:19,540
encrypted UDP packet or whether it gets

00:36:17,650 --> 00:36:24,700
encrypted and then gets encapsulated in

00:36:19,540 --> 00:36:28,079
a UDP packet if that UDP packet doesn't

00:36:24,700 --> 00:36:31,000
get where it's going we still have that

00:36:28,079 --> 00:36:33,549
TCP session that was started that knows

00:36:31,000 --> 00:36:36,910
hey I haven't gotten an acknowledgement

00:36:33,549 --> 00:36:39,880
back and I can resend it if we then wrap

00:36:36,910 --> 00:36:42,790
that up inside another TCP packet we

00:36:39,880 --> 00:36:45,250
have to TCP sessions that say I didn't

00:36:42,790 --> 00:36:48,069
get my acknowledgement I need to resend

00:36:45,250 --> 00:36:50,140
and so you can get act packets I have to

00:36:48,069 --> 00:36:52,690
get you know wrapped up and then read

00:36:50,140 --> 00:36:55,210
and it just gets to be a mess and

00:36:52,690 --> 00:36:56,650
doesn't perform as well it's why you

00:36:55,210 --> 00:37:00,190
shouldn't use something like secure

00:36:56,650 --> 00:37:02,309
shell as a TCP VPN for anything other

00:37:00,190 --> 00:37:05,589
than you know a quick and dirty solution

00:37:02,309 --> 00:37:13,000
it just isn't going to perform well from

00:37:05,589 --> 00:37:14,950
a network standpoint so the application

00:37:13,000 --> 00:37:16,780
layer this is what's responsible for

00:37:14,950 --> 00:37:19,119
cracking into actual data portion of the

00:37:16,780 --> 00:37:23,940
frame and this can be anything from you

00:37:19,119 --> 00:37:27,880
know HTTP send mail to I don't know your

00:37:23,940 --> 00:37:30,970
your favorite online game there's some

00:37:27,880 --> 00:37:34,950
that are more closely tied to the

00:37:30,970 --> 00:37:37,599
networking concepts like DHCP and DNS

00:37:34,950 --> 00:37:39,430
for this talk we're just going to

00:37:37,599 --> 00:37:41,730
discuss those others are pretty much

00:37:39,430 --> 00:37:41,730
similar

00:37:42,609 --> 00:37:51,460
and when you're doing like a service

00:37:47,249 --> 00:37:53,999
type protocol they're kind of used for

00:37:51,460 --> 00:37:57,130
determining usually the destination port

00:37:53,999 --> 00:37:58,839
because you know when you're doing say

00:37:57,130 --> 00:38:00,999
you open firefox firefox is

00:37:58,839 --> 00:38:02,739
automatically going to say unless I'm

00:38:00,999 --> 00:38:06,190
doing an encrypted connection or you see

00:38:02,739 --> 00:38:07,539
otherwise I'm going to go to port 80 you

00:38:06,190 --> 00:38:11,109
know unless they have a proxy server

00:38:07,539 --> 00:38:13,359
that says go to port 8080 if you open a

00:38:11,109 --> 00:38:15,999
mail client and you do you know I want

00:38:13,359 --> 00:38:18,460
to pull down pop mail it's going to say

00:38:15,999 --> 00:38:20,650
unless you specify otherwise let me use

00:38:18,460 --> 00:38:24,460
port 110 because that's the port that

00:38:20,650 --> 00:38:26,019
nearly every pop3 server runs all I did

00:38:24,460 --> 00:38:30,849
get that right it's 110 that spot right

00:38:26,019 --> 00:38:34,869
it's 143 that's I'm out yeah I sometimes

00:38:30,849 --> 00:38:36,999
get those confused so while we still got

00:38:34,869 --> 00:38:40,059
a little bit of time we're going to take

00:38:36,999 --> 00:38:43,329
a simple packet from the beginning you

00:38:40,059 --> 00:38:44,799
know a simple data packet wrap it up in

00:38:43,329 --> 00:38:49,180
each layer and show you what it looks

00:38:44,799 --> 00:38:51,069
like throughout the entire thing and for

00:38:49,180 --> 00:38:53,349
this demonstration I'm just saying

00:38:51,069 --> 00:38:56,049
payload here I'm not going to put the

00:38:53,349 --> 00:38:58,390
actual data will see it's get index dot

00:38:56,049 --> 00:39:03,009
HTML whatever it is doesn't really

00:38:58,390 --> 00:39:05,470
matter it can be some cooking recipe you

00:39:03,009 --> 00:39:07,299
know it can be this discussion being

00:39:05,470 --> 00:39:12,519
transmitted later on over the internet

00:39:07,299 --> 00:39:15,460
so we're going to say you know it's just

00:39:12,519 --> 00:39:18,549
a 32-bit payload just to make it look

00:39:15,460 --> 00:39:20,079
pretty on my graphs the first thing

00:39:18,549 --> 00:39:24,249
that's going to do is get wrapped up in

00:39:20,079 --> 00:39:27,759
the TCP or the transport layer and we're

00:39:24,249 --> 00:39:29,890
assuming TCP here UDP looks similar it

00:39:27,759 --> 00:39:32,589
just doesn't have you know as many flags

00:39:29,890 --> 00:39:36,970
and stuff the window i believe is not

00:39:32,589 --> 00:39:39,099
there i'd have to double check that but

00:39:36,970 --> 00:39:41,920
the first thing we have in 16-bit source

00:39:39,099 --> 00:39:45,759
port number 16 bit destination port

00:39:41,920 --> 00:39:49,180
number a 32 bit sequence number a 32-bit

00:39:45,759 --> 00:39:50,890
acknowledgement number we have a couple

00:39:49,180 --> 00:39:53,529
other fields which i forget at the

00:39:50,890 --> 00:39:56,530
moment we have five or six bits for

00:39:53,529 --> 00:40:00,550
flags six bits for flags

00:39:56,530 --> 00:40:01,690
then we have a 16-bit window I'm trying

00:40:00,550 --> 00:40:05,140
to remember off the top of my head well

00:40:01,690 --> 00:40:07,210
that window goes to I don't recall then

00:40:05,140 --> 00:40:09,250
we have you know a 16-bit check some of

00:40:07,210 --> 00:40:11,620
the whole thing think of it like an md5

00:40:09,250 --> 00:40:14,140
sum of the packet it doesn't actually

00:40:11,620 --> 00:40:17,130
use md5 i'm not sure what algorithm it

00:40:14,140 --> 00:40:20,620
uses but you know it gives you an idea

00:40:17,130 --> 00:40:23,050
sorta like parody and then urgent

00:40:20,620 --> 00:40:28,420
pointer i can't remember exactly what it

00:40:23,050 --> 00:40:30,700
is but you get the idea so you know say

00:40:28,420 --> 00:40:33,640
it's an HTTP thing and we're going to

00:40:30,700 --> 00:40:41,020
use source port 1 2 3 4 5 it will be

00:40:33,640 --> 00:40:43,630
binary you know 12345 binary 80 and it's

00:40:41,020 --> 00:40:46,870
the initial one the sequence number will

00:40:43,630 --> 00:40:49,860
probably probably be one unless you have

00:40:46,870 --> 00:40:53,350
some sort of randomized sequence number

00:40:49,860 --> 00:40:55,210
some systems do that some dal the

00:40:53,350 --> 00:41:00,430
acknowledgement field because this isn't

00:40:55,210 --> 00:41:03,310
an act packet will just be 0 and then

00:41:00,430 --> 00:41:07,420
the flags since it's a data packet there

00:41:03,310 --> 00:41:08,980
aren't going to be any flag set and so

00:41:07,420 --> 00:41:11,700
this should give you an idea of what the

00:41:08,980 --> 00:41:14,290
binary packet actually looks like I

00:41:11,700 --> 00:41:15,670
can't go into every field because quite

00:41:14,290 --> 00:41:19,180
frankly I don't remember what they all

00:41:15,670 --> 00:41:21,160
are then we're going to take what we

00:41:19,180 --> 00:41:23,470
just wrapped up and you can see down

00:41:21,160 --> 00:41:26,140
here at the bottom I've got TCP header

00:41:23,470 --> 00:41:29,140
and payload we're going to add the

00:41:26,140 --> 00:41:32,440
networking layer onto it the first bit

00:41:29,140 --> 00:41:35,980
is two bits for version or is that

00:41:32,440 --> 00:41:42,730
version I can't recall maybe it's four

00:41:35,980 --> 00:41:45,520
bits yes for so usually this is going to

00:41:42,730 --> 00:41:50,020
be binary for pretty soon hopefully it

00:41:45,520 --> 00:41:52,030
will be binary six for ipv6 and when you

00:41:50,020 --> 00:41:53,800
have ipv6 this stuff is going to look

00:41:52,030 --> 00:41:56,110
different especially because your

00:41:53,800 --> 00:41:59,410
addresses are now going to be 128 bits

00:41:56,110 --> 00:42:06,880
instead just 32 32 looks a whole lot

00:41:59,410 --> 00:42:08,260
nicer on this screen then 128 you've got

00:42:06,880 --> 00:42:10,090
a few other fields here that I'm not

00:42:08,260 --> 00:42:12,280
going to go into like tie

00:42:10,090 --> 00:42:16,360
generally they're all going to be at the

00:42:12,280 --> 00:42:19,750
same time but you might have some GRE

00:42:16,360 --> 00:42:22,900
packets things like that not going to

00:42:19,750 --> 00:42:27,640
get into all that the total length I

00:42:22,900 --> 00:42:29,620
believe this is in 32-bit words it'll be

00:42:27,640 --> 00:42:32,650
like the total length from the beginning

00:42:29,620 --> 00:42:40,300
of the ipv4 packet to the end of the

00:42:32,650 --> 00:42:42,820
payload and that should be 16 bits then

00:42:40,300 --> 00:42:47,170
you have an ID number I forget exactly

00:42:42,820 --> 00:42:49,930
what that is you have a one bit f that

00:42:47,170 --> 00:42:53,170
means is this a fragmented packet or not

00:42:49,930 --> 00:42:55,750
if it's one its fragmented if it's zero

00:42:53,170 --> 00:43:00,280
it's not fragmented then you have a

00:42:55,750 --> 00:43:02,230
fragmentation offset if it's fragmented

00:43:00,280 --> 00:43:04,990
you know this will have a value of you

00:43:02,230 --> 00:43:12,700
know where in the chain does this packet

00:43:04,990 --> 00:43:16,900
belong and if you know if it's not

00:43:12,700 --> 00:43:21,340
fragmented that'll all be 0 then you

00:43:16,900 --> 00:43:23,340
have a TTL that's time to live and when

00:43:21,340 --> 00:43:28,180
you start thinking about time to live

00:43:23,340 --> 00:43:31,420
don't think about a real time like this

00:43:28,180 --> 00:43:33,130
is not a field of seconds the routers

00:43:31,420 --> 00:43:34,960
have no idea when the packet was

00:43:33,130 --> 00:43:37,030
generated it might been generated you

00:43:34,960 --> 00:43:39,220
know instantly you know a few

00:43:37,030 --> 00:43:42,550
milliseconds ago it might have been

00:43:39,220 --> 00:43:45,850
generated 15 days ago the time to live

00:43:42,550 --> 00:43:49,180
is actually the number of hops routers

00:43:45,850 --> 00:43:51,700
things like that that it will go through

00:43:49,180 --> 00:43:54,540
before it finally says hey I'm not

00:43:51,700 --> 00:43:57,130
getting where I'm going let me give up

00:43:54,540 --> 00:44:02,020
and I believe that sick no that's eight

00:43:57,130 --> 00:44:05,100
bits eight bits in size so what to they

00:44:02,020 --> 00:44:08,920
be it to the eighth power you can be 256

00:44:05,100 --> 00:44:11,680
possible hops is the maximum usually

00:44:08,920 --> 00:44:14,290
something like 30 is what TC p I mean a

00:44:11,680 --> 00:44:15,910
traceroute uses if you can't get there

00:44:14,290 --> 00:44:19,450
within 30 hops that's a pretty long

00:44:15,910 --> 00:44:23,800
chain but basically every time a router

00:44:19,450 --> 00:44:26,260
sees this it decrements that number

00:44:23,800 --> 00:44:28,480
you know you might be let's say 30 then

00:44:26,260 --> 00:44:31,300
your first router gets it it changes it

00:44:28,480 --> 00:44:34,150
to binary 29 the next router gets it

00:44:31,300 --> 00:44:36,550
changes it to binary 28 and on down the

00:44:34,150 --> 00:44:39,130
line until it gets to binary 0 and that

00:44:36,550 --> 00:44:42,840
router drops it just drops it on the

00:44:39,130 --> 00:44:42,840
floor and forgets it ever existed

00:44:43,470 --> 00:44:58,120
protocol trying to remember exactly what

00:44:47,350 --> 00:45:02,320
that is and I don't he good point good

00:44:58,120 --> 00:45:05,080
point you're exactly right and his

00:45:02,320 --> 00:45:06,820
comment was that indicates essentially

00:45:05,080 --> 00:45:10,960
which transport layer protocols in

00:45:06,820 --> 00:45:12,490
effect whether it's a TCP or UDP you

00:45:10,960 --> 00:45:14,800
could probably determine that just by

00:45:12,490 --> 00:45:17,440
looking at you know the whole thing but

00:45:14,800 --> 00:45:19,360
computationally it's a whole lot faster

00:45:17,440 --> 00:45:22,150
to look at which bits are all in this

00:45:19,360 --> 00:45:24,610
protocol field at the network layer than

00:45:22,150 --> 00:45:27,940
it is to you know well let me strip down

00:45:24,610 --> 00:45:29,650
here and see you know is this you know

00:45:27,940 --> 00:45:31,330
is there a window here is it's an IP

00:45:29,650 --> 00:45:33,490
address and and you've got to remember

00:45:31,330 --> 00:45:38,040
there's no handy fields and stuff here

00:45:33,490 --> 00:45:41,560
it's just a long ass binary number so

00:45:38,040 --> 00:45:44,350
having that protocol filled their big

00:45:41,560 --> 00:45:46,270
big help and hit her check again you

00:45:44,350 --> 00:45:50,740
know it's sort of like a checksum type

00:45:46,270 --> 00:45:52,780
thing I should really go on Wikipedia

00:45:50,740 --> 00:45:55,320
and look that up because I could be

00:45:52,780 --> 00:45:58,660
telling you you know a complete story

00:45:55,320 --> 00:46:04,180
but I do believe it's you know not it's

00:45:58,660 --> 00:46:08,010
not exactly a checksum but uh it's

00:46:04,180 --> 00:46:12,850
something similar and again if I'm wrong

00:46:08,010 --> 00:46:14,470
I'm wrong sorry now let's look at a once

00:46:12,850 --> 00:46:18,910
you get done with the network layer it's

00:46:14,470 --> 00:46:22,240
determined hey I need to go hit my

00:46:18,910 --> 00:46:24,340
primary gateway my default gateway let

00:46:22,240 --> 00:46:27,190
me grab my default gateways MAC address

00:46:24,340 --> 00:46:30,910
and I'll put that as the destination MAC

00:46:27,190 --> 00:46:34,120
address that's a 48-bit number this is

00:46:30,910 --> 00:46:37,080
my source MAC address it's a 48-bit

00:46:34,120 --> 00:46:39,720
number I'll put it in there then I have

00:46:37,080 --> 00:46:44,730
the IP header the TCP header the payload

00:46:39,720 --> 00:46:47,580
and then we have a net checks on and

00:46:44,730 --> 00:46:49,740
this is only for 80 23 other protocols

00:46:47,580 --> 00:46:55,440
are going to look different this is just

00:46:49,740 --> 00:46:57,990
a ethernet it's pretty simple other

00:46:55,440 --> 00:46:59,910
protocols especially 802 dot11 they get

00:46:57,990 --> 00:47:03,120
more complex you have a lot of

00:46:59,910 --> 00:47:07,650
additional fields and stuff but for this

00:47:03,120 --> 00:47:10,890
you know that's all you have destination

00:47:07,650 --> 00:47:13,080
MAC source MAC and then it checks on

00:47:10,890 --> 00:47:15,240
that's at the bottom of everything else

00:47:13,080 --> 00:47:17,970
and this is you know the last step

00:47:15,240 --> 00:47:21,390
before we send it out of wire so let's

00:47:17,970 --> 00:47:24,300
say we set it to our default gateways

00:47:21,390 --> 00:47:26,480
destination MAC address our source

00:47:24,300 --> 00:47:29,820
address our source Matt gets it there

00:47:26,480 --> 00:47:32,210
then our default gateway picks it up but

00:47:29,820 --> 00:47:34,950
at this point the default gateway says

00:47:32,210 --> 00:47:38,040
ok I've got this packet let me strip

00:47:34,950 --> 00:47:41,790
away this entire Mac layer it'll move up

00:47:38,040 --> 00:47:43,920
to the network layer and say well the

00:47:41,790 --> 00:47:46,590
destination IP address here isn't mine

00:47:43,920 --> 00:47:49,440
I've got to send it on let me do a route

00:47:46,590 --> 00:47:51,650
look up ok now I need to send it to this

00:47:49,440 --> 00:47:56,400
next router to get where it needs to go

00:47:51,650 --> 00:48:00,090
so it retracts this Mac layer and it

00:47:56,400 --> 00:48:01,500
says ok I'm going to use my source MAC

00:48:00,090 --> 00:48:04,440
address again we're talking about the

00:48:01,500 --> 00:48:06,060
routers source MAC address and the

00:48:04,440 --> 00:48:09,240
destination MAC address will be the

00:48:06,060 --> 00:48:12,600
destination MAC of the next router and

00:48:09,240 --> 00:48:14,790
the hop and that's how we go from one

00:48:12,600 --> 00:48:17,400
machine to another machine then we tear

00:48:14,790 --> 00:48:20,610
it down we rebuild it to go from machine

00:48:17,400 --> 00:48:23,070
to machine 3 it tears it down rebuilds

00:48:20,610 --> 00:48:24,780
it go from machine 32 machine for it

00:48:23,070 --> 00:48:27,270
tears it down and so on and so on until

00:48:24,780 --> 00:48:29,580
eventually it gets where it's going does

00:48:27,270 --> 00:48:32,490
that make sense to everyone and so you

00:48:29,580 --> 00:48:34,140
can see here that this is why the mac

00:48:32,490 --> 00:48:36,780
address is what actually you know

00:48:34,140 --> 00:48:39,960
determines or where things are actually

00:48:36,780 --> 00:48:43,800
sent and the IP address is just

00:48:39,960 --> 00:48:45,810
determines do I need to send it out here

00:48:43,800 --> 00:48:49,760
do I need to send it out there do I need

00:48:45,810 --> 00:48:49,760
to use a router or what

00:48:51,020 --> 00:48:58,500
any more questions because that's pretty

00:48:55,560 --> 00:49:08,490
much the end of my presentation come on

00:48:58,500 --> 00:49:10,380
somebody give me a question that

00:49:08,490 --> 00:49:11,970
question so stupid I'm going to allow my

00:49:10,380 --> 00:49:15,450
chauffeur who's sitting about one row

00:49:11,970 --> 00:49:30,870
behind you to answer that for me any

00:49:15,450 --> 00:49:34,470
other questions okay uh you're you're

00:49:30,870 --> 00:49:39,420
asking essentially say uh say this

00:49:34,470 --> 00:49:41,100
laptop is connected by ethernet to the

00:49:39,420 --> 00:49:44,280
switch way back there in that room and

00:49:41,100 --> 00:49:46,980
I'm trying to get to a laptop that's you

00:49:44,280 --> 00:49:51,630
know fictitious laptop over here when

00:49:46,980 --> 00:49:55,800
that switch gets the frame how does it

00:49:51,630 --> 00:49:57,780
know which which port on that switch to

00:49:55,800 --> 00:50:00,900
send to get to this laptop over here is

00:49:57,780 --> 00:50:04,950
that correct what it does that switch

00:50:00,900 --> 00:50:10,440
we'll look at the IP address and do an

00:50:04,950 --> 00:50:13,560
art look up and say you know which if it

00:50:10,440 --> 00:50:16,590
doesn't already have it it will say and

00:50:13,560 --> 00:50:19,170
it should but it'll say you know what

00:50:16,590 --> 00:50:22,080
machine has this IP address and when it

00:50:19,170 --> 00:50:24,750
sees that art packet come in on that

00:50:22,080 --> 00:50:28,950
port it'll it'll say okay this port

00:50:24,750 --> 00:50:30,780
matches this MAC address and so it will

00:50:28,950 --> 00:50:34,940
send for that MAC address out just that

00:50:30,780 --> 00:50:34,940
port make sense

00:50:38,430 --> 00:50:43,930
an ordinary switch no but that's a

00:50:42,250 --> 00:50:46,450
simplified way of putting it generally

00:50:43,930 --> 00:50:48,789
what happens is my laptop sends out an

00:50:46,450 --> 00:50:50,740
art packet and then the switch will see

00:50:48,789 --> 00:50:56,470
that art packet wind gets returned and

00:50:50,740 --> 00:50:59,109
match it up right right and you do have

00:50:56,470 --> 00:51:18,910
layer four switches but our layer 3

00:50:59,109 --> 00:51:22,859
switches but that's my understanding as

00:51:18,910 --> 00:51:22,859
well did I not put it you know proper

00:51:28,410 --> 00:51:33,730
yeah and generally in the switch you

00:51:31,299 --> 00:51:38,650
refer to it as an art table so that

00:51:33,730 --> 00:51:40,900
might be why it's confusing right but

00:51:38,650 --> 00:51:43,329
you know you generally do and maybe I'm

00:51:40,900 --> 00:51:46,259
just a little confused there I believe

00:51:43,329 --> 00:51:46,259
you had a question sir

00:51:55,730 --> 00:51:57,790
you

00:52:07,750 --> 00:52:12,520
that's a little bit more complicated and

00:52:12,730 --> 00:52:19,220
I can imagine some events where where

00:52:16,520 --> 00:52:21,380
you have essentially you know let me

00:52:19,220 --> 00:52:23,000
open Firefox over here Firefox over

00:52:21,380 --> 00:52:26,210
there we're both going to connect to

00:52:23,000 --> 00:52:27,860
slackware com at you know essentially

00:52:26,210 --> 00:52:31,550
the same time we're both going to use

00:52:27,860 --> 00:52:34,580
the same source port that could get a

00:52:31,550 --> 00:52:36,530
little freaky and I'm not entirely sure

00:52:34,580 --> 00:52:40,190
how the colonel on the router handles

00:52:36,530 --> 00:52:41,900
that on the night side generally

00:52:40,190 --> 00:52:43,910
speaking unless they come in at the

00:52:41,900 --> 00:52:45,200
exact same time you'll have different

00:52:43,910 --> 00:52:46,820
sequence numbers different

00:52:45,200 --> 00:52:49,730
acknowledgement numbers and it can use

00:52:46,820 --> 00:52:53,960
those to determine you know which one it

00:52:49,730 --> 00:52:56,600
goes or which one needs to earn that too

00:52:53,960 --> 00:52:58,630
does that make sense am I saying it

00:52:56,600 --> 00:52:58,630
right

00:53:08,600 --> 00:53:47,870
right yeah maybe did these people answer

00:53:44,400 --> 00:53:52,070
your question sufficiently okay

00:53:47,870 --> 00:53:55,760
basically they were saying uh when the

00:53:52,070 --> 00:53:58,590
when your night router gets the packet

00:53:55,760 --> 00:54:01,170
say it gets one from here and one from

00:53:58,590 --> 00:54:03,440
over there they go into the same place

00:54:01,170 --> 00:54:05,820
they have the same source port whatnot

00:54:03,440 --> 00:54:08,130
when the colonel gets it will actually

00:54:05,820 --> 00:54:11,510
change that source port when it leaves

00:54:08,130 --> 00:54:14,880
the night router or when it does the net

00:54:11,510 --> 00:54:16,710
translation it will change that and then

00:54:14,880 --> 00:54:20,010
when it comes back in it will look that

00:54:16,710 --> 00:54:22,140
up and say okay from this source port I

00:54:20,010 --> 00:54:25,170
need to change it again to this

00:54:22,140 --> 00:54:27,090
destination port to get back to here and

00:54:25,170 --> 00:54:29,520
leave it the same or change it to some

00:54:27,090 --> 00:54:35,690
other value to get back to here does

00:54:29,520 --> 00:54:35,690
that make sense okay any other questions

00:54:35,780 --> 00:54:41,210
come on somebody give me a hard when

00:54:38,160 --> 00:54:41,210
these people can't answer

00:54:47,950 --> 00:54:56,870
because MAC addresses do not allow you

00:54:50,720 --> 00:54:59,120
to do any sort of routing right

00:54:56,870 --> 00:55:01,550
basically saying why do i do you know

00:54:59,120 --> 00:55:03,770
slackware calm a record and it doesn't

00:55:01,550 --> 00:55:05,570
give me a mac address the answers MAC

00:55:03,770 --> 00:55:07,730
addresses aren't routable is that is

00:55:05,570 --> 00:55:09,350
that basically what you were asking okay

00:55:07,730 --> 00:55:13,070
the answer is mac addresses aren't

00:55:09,350 --> 00:55:15,230
routable say this laptop has a mac

00:55:13,070 --> 00:55:18,080
address if while I'm not going to make

00:55:15,230 --> 00:55:22,250
up a number we'll just say one okay and

00:55:18,080 --> 00:55:24,410
slag Wacom has a mac address of two well

00:55:22,250 --> 00:55:26,780
since like we're calm isn't on my local

00:55:24,410 --> 00:55:28,760
area network the data link layer can

00:55:26,780 --> 00:55:30,830
only send to you know essentially

00:55:28,760 --> 00:55:33,290
physical devices it can reach without

00:55:30,830 --> 00:55:37,580
going through a router if I say you know

00:55:33,290 --> 00:55:39,710
a record dot to mac address I have no

00:55:37,580 --> 00:55:42,290
idea from this laptop how to reach dot

00:55:39,710 --> 00:55:44,540
to I know what you know dot three four

00:55:42,290 --> 00:55:46,550
or five all the other boxes here are but

00:55:44,540 --> 00:55:49,760
dot 2 is something else it's somewhere

00:55:46,550 --> 00:55:52,210
else it exists outside the universe of

00:55:49,760 --> 00:55:58,760
the data link layer for this machine

00:55:52,210 --> 00:56:01,000
does that make sense some variant of

00:55:58,760 --> 00:56:01,000
what

00:56:07,230 --> 00:56:15,150
uh I think the irony you're referring to

00:56:13,020 --> 00:56:19,680
is Dijkstra's algorithm which is what

00:56:15,150 --> 00:56:22,800
you know open bgp and a BGP of any kind

00:56:19,680 --> 00:56:24,600
uses which says you know how many hops

00:56:22,800 --> 00:56:28,830
do I have to go through to reach this IP

00:56:24,600 --> 00:56:32,609
address the answer is no it wouldn't

00:56:28,830 --> 00:56:39,980
because uh how do i how do I answer the

00:56:32,609 --> 00:56:42,930
because part again let's see okay i have

00:56:39,980 --> 00:56:47,820
bgp running on here and I want to get to

00:56:42,930 --> 00:56:51,600
dot 2 which is slackware com okay I can

00:56:47,820 --> 00:56:54,990
say okay from this box here you know go

00:56:51,600 --> 00:56:57,570
to my router which is dot 3 my router

00:56:54,990 --> 00:57:02,369
looks across the entire universe it

00:56:57,570 --> 00:57:04,530
knows of and says okay where's dot 4 or

00:57:02,369 --> 00:57:07,200
where's doc too well I don't have a dot

00:57:04,530 --> 00:57:09,180
to let me ask doc for if it knows about

00:57:07,200 --> 00:57:11,160
dot to let me ask doc 5 and fit knows

00:57:09,180 --> 00:57:12,960
about dot to let me know as you know dot

00:57:11,160 --> 00:57:15,660
six if it knows about dot too and

00:57:12,960 --> 00:57:19,050
suddenly you flooded the entire internet

00:57:15,660 --> 00:57:21,840
with all these uh connections trying to

00:57:19,050 --> 00:57:28,910
locate every single mac address in the

00:57:21,840 --> 00:57:28,910
universe and it's just not efficient

00:57:30,560 --> 00:57:33,560
yeah

00:57:35,600 --> 00:57:43,530
because they're not on the data link

00:57:37,770 --> 00:57:46,380
layer thereon some other right from from

00:57:43,530 --> 00:57:49,410
the IP layer you know you can mix and

00:57:46,380 --> 00:57:51,270
match these and it's most often mixed

00:57:49,410 --> 00:57:54,900
and matched on the data link layer say

00:57:51,270 --> 00:57:56,820
uh you know I'm going from ethernet 2802

00:57:54,900 --> 00:57:59,310
dot11 well they both have MAC addresses

00:57:56,820 --> 00:58:01,680
they're similar maybe you could kind of

00:57:59,310 --> 00:58:05,790
make it work but let's say I use some

00:58:01,680 --> 00:58:08,220
other protocol you know your gsm it's

00:58:05,790 --> 00:58:10,830
not a mac address it doesn't operate in

00:58:08,220 --> 00:58:13,530
the same way if i give it you know a gsm

00:58:10,830 --> 00:58:15,810
address it's not going to know what the

00:58:13,530 --> 00:58:18,380
hell to do with it believe you had a

00:58:15,810 --> 00:58:18,380
question sir

00:58:39,890 --> 00:58:52,050
you had a question sir i duplicate the

00:58:47,550 --> 00:58:56,520
MAC addresses I've only seen that occur

00:58:52,050 --> 00:59:04,470
once personally it does happen basically

00:58:56,520 --> 00:59:06,510
these mac addresses say what right right

00:59:04,470 --> 00:59:10,830
because every single device has to have

00:59:06,510 --> 00:59:14,700
a unique MAC address and these these mac

00:59:10,830 --> 00:59:16,710
addresses get set by the factory the

00:59:14,700 --> 00:59:20,910
government or some organization says

00:59:16,710 --> 00:59:23,460
okay Cisco you can use IP addresses or

00:59:20,910 --> 00:59:26,520
mac addresses from one to ten and then

00:59:23,460 --> 00:59:30,690
it says you know HP you get ten or you

00:59:26,520 --> 00:59:33,720
get 11 to 15 or whatever and now I've

00:59:30,690 --> 00:59:36,330
got about 30 seconds to go so to wrap it

00:59:33,720 --> 00:59:39,600
up you know you're going to have some

00:59:36,330 --> 00:59:43,170
overlap and we really wouldn't want to

00:59:39,600 --> 00:59:45,510
have you know 48 machines get the same

00:59:43,170 --> 00:59:48,300
packet this destined for site where com

00:59:45,510 --> 00:59:50,400
you know slackware com could share a mac

00:59:48,300 --> 00:59:58,830
address with lemon party com for all we

00:59:50,400 --> 01:00:00,870
know or whatever and if you've got any

00:59:58,830 --> 01:00:03,170
more questions these two will be sure to

01:00:00,870 --> 01:00:03,170
help you

01:00:23,180 --> 01:00:27,440
what about this I can help the like it

01:00:25,130 --> 01:00:31,869
we have the same problem or whatever up

01:00:27,440 --> 01:00:31,869
a few years you gave me I found property

01:00:32,630 --> 01:00:37,360
that's not the word

01:00:35,300 --> 01:00:37,360
you

01:01:45,130 --> 01:01:51,950
as a service leader in cloud computing

01:01:48,800 --> 01:01:53,510
all we do is hosting computing to us the

01:01:51,950 --> 01:01:55,460
cloud is just the next generation of

01:01:53,510 --> 01:01:57,440
hosting and if someone who's been in the

01:01:55,460 --> 01:01:59,390
hosting industry for 12 years we feel

01:01:57,440 --> 01:02:00,560
we're in a unique position to really

01:01:59,390 --> 01:02:02,660
help bring these two worlds together

01:02:00,560 --> 01:02:05,000
these different sets of technologies and

01:02:02,660 --> 01:02:07,340
to help companies embrace this new world

01:02:05,000 --> 01:02:09,350
and this great new tool that allows

01:02:07,340 --> 01:02:11,930
faster innovation not only is it about

01:02:09,350 --> 01:02:16,940
us being responsive and accountable but

01:02:11,930 --> 01:02:19,340
it's about us doing more for you whether

01:02:16,940 --> 01:02:23,540
or less an OS that works the way that

01:02:19,340 --> 01:02:27,850
you do across all your devices HP Slate

01:02:23,540 --> 01:02:27,850

YouTube URL: https://www.youtube.com/watch?v=suYSnnNfiVM


