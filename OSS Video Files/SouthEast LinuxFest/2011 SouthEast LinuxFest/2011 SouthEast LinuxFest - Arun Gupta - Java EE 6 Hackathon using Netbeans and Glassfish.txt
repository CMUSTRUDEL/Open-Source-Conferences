Title: 2011 SouthEast LinuxFest - Arun Gupta - Java EE 6 Hackathon using Netbeans and Glassfish
Publication date: 2012-03-23
Playlist: 2011 SouthEast LinuxFest
Description: 
	2011 SouthEast LinuxFest - Arun Gupta - Java EE 6 Hackathon using Netbeans and Glassfish

This video is licensed under Creative Commons Attribution 3.0 Unported License.
Captions: 
	00:00:01,159 --> 00:00:07,319
the following presentation was recorded

00:00:04,230 --> 00:00:09,900
at the 2011 southeast linux fest in

00:00:07,319 --> 00:00:11,400
Spartanburg South Carolina it is

00:00:09,900 --> 00:00:14,219
licensed under a creative commons

00:00:11,400 --> 00:00:18,390
license for more information about the

00:00:14,219 --> 00:00:21,869
southeast linux fest visit www southeast

00:00:18,390 --> 00:00:23,100
linux fest org the southeast linux fest

00:00:21,869 --> 00:00:26,460
would like to thank the following

00:00:23,100 --> 00:00:30,380
diamond and platinum sponsors in 2011

00:00:26,460 --> 00:00:30,380
for helping make these videos possible

00:03:21,280 --> 00:03:29,030
check check check all right thank you

00:03:25,300 --> 00:03:30,590
yeah so then I won't that saves my

00:03:29,030 --> 00:03:32,870
effort no because then I don't need to

00:03:30,590 --> 00:03:35,150
have to explain what Java EE is so

00:03:32,870 --> 00:03:36,500
glassfish is basically a community you

00:03:35,150 --> 00:03:39,070
know it's an open source community and

00:03:36,500 --> 00:03:41,600
the URL is simple is glassfish dot org

00:03:39,070 --> 00:03:44,090
automatically redirects here the biggest

00:03:41,600 --> 00:03:45,910
deliverable of the community is really

00:03:44,090 --> 00:03:49,370
an open source application server

00:03:45,910 --> 00:03:51,920
glassfish has always been the reference

00:03:49,370 --> 00:03:55,220
implementation of Java EE so starting

00:03:51,920 --> 00:03:58,940
from j2ee 1 or 2 1 dot 3 1 dot for java

00:03:55,220 --> 00:04:01,520
e5 now java ee 6 and going forward java

00:03:58,940 --> 00:04:03,850
ee 7 it's been the first and the

00:04:01,520 --> 00:04:06,410
foremost to come out with the java ee

00:04:03,850 --> 00:04:09,500
compliant implementation so that means

00:04:06,410 --> 00:04:12,470
all the specification jsp-servlet EG BJP

00:04:09,500 --> 00:04:15,530
a jsf all those specifications are

00:04:12,470 --> 00:04:18,170
implemented in glassfish first it's a

00:04:15,530 --> 00:04:19,940
fully open source community source code

00:04:18,170 --> 00:04:22,910
is out in the public now we got very

00:04:19,940 --> 00:04:24,170
active community forums issue tracker is

00:04:22,910 --> 00:04:27,020
out in the public everything I mean

00:04:24,170 --> 00:04:28,880
literally is to the extent that certain

00:04:27,020 --> 00:04:31,250
times we do our engineering discussions

00:04:28,880 --> 00:04:33,860
in the hallway but then you know we

00:04:31,250 --> 00:04:36,530
still make sure hey let's still send an

00:04:33,860 --> 00:04:39,080
email to the forum because somebody is

00:04:36,530 --> 00:04:40,550
not in the hallway somebody out in the

00:04:39,080 --> 00:04:43,610
community might be interested in that

00:04:40,550 --> 00:04:45,470
exact conversation so we try to be

00:04:43,610 --> 00:04:47,540
little bit diligent about that that okay

00:04:45,470 --> 00:04:48,890
a hardware conversation let's still send

00:04:47,540 --> 00:04:50,690
an email so that somebody else is

00:04:48,890 --> 00:04:53,150
watching our Twitter stream is pretty

00:04:50,690 --> 00:04:54,860
active we have social media channels so

00:04:53,150 --> 00:04:56,120
different ways by which you can connect

00:04:54,860 --> 00:04:59,450
to us we have a youtube video channel

00:04:56,120 --> 00:05:02,750
twitter stream community forums all of

00:04:59,450 --> 00:05:04,850
that glassfish is of course what gives

00:05:02,750 --> 00:05:06,770
us the open-source application server

00:05:04,850 --> 00:05:09,169
today what I'm going to do is I'm going

00:05:06,770 --> 00:05:11,990
to use netbeans which is yet another

00:05:09,169 --> 00:05:13,400
open source IDE again fully open source

00:05:11,990 --> 00:05:15,470
so you can download it go to NetBeans

00:05:13,400 --> 00:05:18,050
dot org download the entire ide for

00:05:15,470 --> 00:05:23,270
yourselves and the NetBeans comes

00:05:18,050 --> 00:05:28,850
integrated with glassfish so for example

00:05:23,270 --> 00:05:32,210
if i go to NetBeans dot org then you can

00:05:28,850 --> 00:05:40,580
say download free netbeans ide 70

00:05:32,210 --> 00:05:42,110
you can click here and then it comes for

00:05:40,580 --> 00:05:44,210
all different variety of platforms the

00:05:42,110 --> 00:05:46,430
windows linux solaris and mac OS so you

00:05:44,210 --> 00:05:48,349
can download whatever words anyone or it

00:05:46,430 --> 00:05:50,599
even comes in an OS independent zip file

00:05:48,349 --> 00:05:53,300
and then it comes in different flavors

00:05:50,599 --> 00:05:55,250
so you can just say oh I care only about

00:05:53,300 --> 00:05:57,410
the Java development part of it so

00:05:55,250 --> 00:05:59,210
download that version or java enterprise

00:05:57,410 --> 00:06:01,729
which is what we will be building today

00:05:59,210 --> 00:06:04,460
or an all version with everything

00:06:01,729 --> 00:06:06,620
integrated in there it's got PHP tooling

00:06:04,460 --> 00:06:10,669
as well and some CC shot is + + tooling

00:06:06,620 --> 00:06:12,590
as well now glassfish also comes

00:06:10,669 --> 00:06:14,150
integrated with a database called as

00:06:12,590 --> 00:06:16,610
java DB which is sort of a derived

00:06:14,150 --> 00:06:18,860
version of Apache Derby and that's again

00:06:16,610 --> 00:06:21,919
open source so the idea is you know you

00:06:18,860 --> 00:06:24,830
have glassfish you have Java DB you have

00:06:21,919 --> 00:06:26,300
NetBeans and then you can also use MySQL

00:06:24,830 --> 00:06:27,979
with that you know it is again yet open

00:06:26,300 --> 00:06:30,409
source so what I'm saying is a fully

00:06:27,979 --> 00:06:33,139
open sourced at Java or glass well

00:06:30,409 --> 00:06:36,349
Jadakiss starting even with jdk jdk

00:06:33,139 --> 00:06:38,889
glassfish NetBeans mysql java DB all of

00:06:36,349 --> 00:06:41,509
that combination using that combination

00:06:38,889 --> 00:06:44,180
you can easily build an enterprise

00:06:41,509 --> 00:06:47,270
application a web application and that

00:06:44,180 --> 00:06:49,669
would scale well and today my focus is

00:06:47,270 --> 00:06:51,919
going to be about ease-of-use simplicity

00:06:49,669 --> 00:06:53,240
and things like that more than

00:06:51,919 --> 00:06:54,919
encouraged to keep everything

00:06:53,240 --> 00:06:58,070
interactive so if you have a question

00:06:54,919 --> 00:07:00,440
just raise your hand now small cozy

00:06:58,070 --> 00:07:04,449
audience in a cold room we'll try to

00:07:00,440 --> 00:07:04,449
keep it warm so let's keep it that way

00:07:06,009 --> 00:07:11,930
so what I have here is NetBeans IDE

00:07:08,780 --> 00:07:13,250
seven-point what I downloaded from the

00:07:11,930 --> 00:07:14,870
web you know there's no additional

00:07:13,250 --> 00:07:16,699
configuration that's one thing that

00:07:14,870 --> 00:07:18,800
means is really good at out-of-the-box

00:07:16,699 --> 00:07:21,650
configuration so everything that you get

00:07:18,800 --> 00:07:23,090
is pre-configured for you you can start

00:07:21,650 --> 00:07:25,340
building your application with these

00:07:23,090 --> 00:07:26,659
come out of effort what I'm going to do

00:07:25,340 --> 00:07:28,849
is I'm going to right click here I'm

00:07:26,659 --> 00:07:30,530
going to say a new project I want to

00:07:28,849 --> 00:07:32,900
build a new project so that's my web

00:07:30,530 --> 00:07:36,680
application so i click on java web web

00:07:32,900 --> 00:07:38,620
application click on next and i'll build

00:07:36,680 --> 00:07:43,060
a simple application let's call it self

00:07:38,620 --> 00:07:43,060
2011 ok nothing fancy there

00:07:43,790 --> 00:07:47,930
and I'm going to deploy it on a

00:07:45,500 --> 00:07:49,550
glassfish server open source edition now

00:07:47,930 --> 00:07:50,690
it also comes with a commercial addition

00:07:49,550 --> 00:07:52,370
there are a little bit of value adds

00:07:50,690 --> 00:07:56,060
available over there will not go there

00:07:52,370 --> 00:07:57,980
it's not a marketing pitch the butt but

00:07:56,060 --> 00:08:00,020
you can earn so idea is you can click on

00:07:57,980 --> 00:08:01,730
add here and configure a variety of

00:08:00,020 --> 00:08:03,830
different application servers the tomcat

00:08:01,730 --> 00:08:07,100
J bars all the servers can be configured

00:08:03,830 --> 00:08:10,100
as well very easily Here I am building a

00:08:07,100 --> 00:08:13,900
I'm building a Java EE 6 web profile

00:08:10,100 --> 00:08:16,730
compliant application now typically the

00:08:13,900 --> 00:08:18,890
the perception with j2ee and certain

00:08:16,730 --> 00:08:21,860
cases true as well that is bloated and

00:08:18,890 --> 00:08:23,780
the reason that bloatware is kind of

00:08:21,860 --> 00:08:26,810
associated with it is over a period of

00:08:23,780 --> 00:08:30,070
time we got from 10 specifications to

00:08:26,810 --> 00:08:32,450
literally 30 specifications in Java EE 6

00:08:30,070 --> 00:08:35,150
so every time you fire up a Java EE

00:08:32,450 --> 00:08:37,040
server the whole thing starts up and

00:08:35,150 --> 00:08:39,140
that takes a while UB container web

00:08:37,040 --> 00:08:42,020
container JMS container this container

00:08:39,140 --> 00:08:43,340
that container services binding all that

00:08:42,020 --> 00:08:46,820
stuff takes a while and that's why you

00:08:43,340 --> 00:08:48,680
know it's a supported perception now

00:08:46,820 --> 00:08:50,960
with java ee 6 one thing that we're

00:08:48,680 --> 00:08:53,360
trying to solve is we define this

00:08:50,960 --> 00:08:56,540
concept of a web profile web profile is

00:08:53,360 --> 00:08:59,090
a subset of the complete set of

00:08:56,540 --> 00:09:01,640
specifications in the platform and that

00:08:59,090 --> 00:09:03,470
subset is targeted towards the modern

00:09:01,640 --> 00:09:06,170
web application development you know you

00:09:03,470 --> 00:09:08,600
don't have all the legacy specifications

00:09:06,170 --> 00:09:10,790
in there just the latest specifications

00:09:08,600 --> 00:09:14,720
that you care about and that's what I'm

00:09:10,790 --> 00:09:16,190
building my application to so i'm going

00:09:14,720 --> 00:09:17,810
to say the java ee was you know there

00:09:16,190 --> 00:09:19,910
are a whole lot of words when three

00:09:17,810 --> 00:09:21,890
versions here but i'm going to build a

00:09:19,910 --> 00:09:29,320
Java EE 6 web profile compliant

00:09:21,890 --> 00:09:32,120
application yes sir excellent question

00:09:29,320 --> 00:09:34,280
can I work with netbeans only or their

00:09:32,120 --> 00:09:35,540
other IDE supported everything that I'm

00:09:34,280 --> 00:09:38,120
showing today I'm going to be using

00:09:35,540 --> 00:09:39,980
NetBeans but all of this functionality

00:09:38,120 --> 00:09:42,200
is very much implemented in Eclipse as

00:09:39,980 --> 00:09:43,760
well now that means you know Oracle is

00:09:42,200 --> 00:09:45,440
the main contributor over there so we

00:09:43,760 --> 00:09:47,750
maintain it we make sure that is one of

00:09:45,440 --> 00:09:49,760
the best experiences and Eclipse what we

00:09:47,750 --> 00:09:51,500
have done is we have a plug-in that we

00:09:49,760 --> 00:09:54,320
maintain and we contribute to the

00:09:51,500 --> 00:09:56,390
Eclipse community so on my blog and now

00:09:54,320 --> 00:09:59,450
you can go to blogs oracle com

00:09:56,390 --> 00:10:01,820
/ arun gupta i have our long webcasts

00:09:59,450 --> 00:10:05,030
which shows you complete java ee 6

00:10:01,820 --> 00:10:07,550
tooling for both NetBeans or Eclipse and

00:10:05,030 --> 00:10:09,140
IntelliJ also has partial support in

00:10:07,550 --> 00:10:11,660
terms of glassfish integration is good

00:10:09,140 --> 00:10:17,450
but Java EE 6 srl partial support over

00:10:11,660 --> 00:10:19,970
there now one of the new specifications

00:10:17,450 --> 00:10:22,940
that has been added to java ee 6 is a

00:10:19,970 --> 00:10:24,980
CDI is context and dependency injection

00:10:22,940 --> 00:10:27,770
that gives you the ability to do

00:10:24,980 --> 00:10:29,390
typesafe dependency injection no string

00:10:27,770 --> 00:10:31,960
bass everything that you want to specify

00:10:29,390 --> 00:10:34,340
as part of dependency injection is

00:10:31,960 --> 00:10:36,070
specified in the Java type system and

00:10:34,340 --> 00:10:39,140
hopefully i will show a sample of that

00:10:36,070 --> 00:10:41,960
now you got to explicitly enable it and

00:10:39,140 --> 00:10:44,270
that's required by the CD i spec so that

00:10:41,960 --> 00:10:46,100
and the explicit enablement is required

00:10:44,270 --> 00:10:48,260
because so that you can say this is the

00:10:46,100 --> 00:10:50,390
scope from which i want to enable

00:10:48,260 --> 00:10:52,010
injection otherwise your class loader

00:10:50,390 --> 00:10:54,350
will go haywire and i will start looking

00:10:52,010 --> 00:10:57,050
everywhere where do i do the injection

00:10:54,350 --> 00:11:00,680
from so i can do the injection now or we

00:10:57,050 --> 00:11:02,930
can deal with it later as well and i can

00:11:00,680 --> 00:11:04,460
add a bunch of frameworks also so let's

00:11:02,930 --> 00:11:06,440
not worry about that let's build a very

00:11:04,460 --> 00:11:08,540
simple application see what does it mean

00:11:06,440 --> 00:11:10,760
to actually build this application or

00:11:08,540 --> 00:11:16,010
run this application so i click on

00:11:10,760 --> 00:11:17,930
finish here now if i show you so it's a

00:11:16,010 --> 00:11:20,150
generated a simple index dot JSP page

00:11:17,930 --> 00:11:24,140
for me over here now if i show you in

00:11:20,150 --> 00:11:26,300
the services tab here let me minimize my

00:11:24,140 --> 00:11:27,830
databases so in my servers i have a

00:11:26,300 --> 00:11:30,620
commercial version and open source

00:11:27,830 --> 00:11:32,390
version i can expand applications and it

00:11:30,620 --> 00:11:34,820
shows one simple service that is already

00:11:32,390 --> 00:11:37,130
being deployed over there now if i go

00:11:34,820 --> 00:11:40,070
back to my projects tab if i want to

00:11:37,130 --> 00:11:43,100
deploy this service I right click and I

00:11:40,070 --> 00:11:45,650
say run and at this point netbeans is

00:11:43,100 --> 00:11:47,750
going to run my project on my glass the

00:11:45,650 --> 00:11:50,660
server and show up a default web page

00:11:47,750 --> 00:11:52,070
and this is how it looks like so in just

00:11:50,660 --> 00:11:54,020
a matter of couple of seconds the page

00:11:52,070 --> 00:11:56,870
is live that's no big deal just one

00:11:54,020 --> 00:11:58,460
simple index JSP anybody can do that so

00:11:56,870 --> 00:12:01,340
let's add couple of exclamation marks

00:11:58,460 --> 00:12:04,640
here well more than couple we save the

00:12:01,340 --> 00:12:06,890
file here go back to the browser refresh

00:12:04,640 --> 00:12:09,649
the page and the change is available to

00:12:06,890 --> 00:12:13,430
me instantly and the idea is

00:12:09,649 --> 00:12:15,860
when you do edit you save the IDE should

00:12:13,430 --> 00:12:17,540
know that oh but when you're saving you

00:12:15,860 --> 00:12:19,939
want me to redeploy the project so I de

00:12:17,540 --> 00:12:22,490
should take care of the deployment your

00:12:19,939 --> 00:12:24,920
your cycle is edit save refresh there is

00:12:22,490 --> 00:12:26,689
no explicit deployment step that you

00:12:24,920 --> 00:12:28,249
need to care about now that is a

00:12:26,689 --> 00:12:31,699
completely optional feature by the way

00:12:28,249 --> 00:12:35,059
which we turn on by default so if you

00:12:31,699 --> 00:12:38,929
look at properties run here we say

00:12:35,059 --> 00:12:40,730
deploy on save so that means you are

00:12:38,929 --> 00:12:42,350
indicating to NetBeans to deploy

00:12:40,730 --> 00:12:45,019
automatically every time you save a file

00:12:42,350 --> 00:12:46,999
now this is a primarily a development

00:12:45,019 --> 00:12:49,160
time feature you you would not see a

00:12:46,999 --> 00:12:51,350
project where you are doing a production

00:12:49,160 --> 00:12:55,429
deployment from your ID that's not the

00:12:51,350 --> 00:12:57,050
recommended idea here alright so let's

00:12:55,429 --> 00:12:58,429
go start building our application a

00:12:57,050 --> 00:13:01,160
little bit the first thing I'm going to

00:12:58,429 --> 00:13:04,850
do is add a simple servlet over there so

00:13:01,160 --> 00:13:09,920
click on new add a new servlet and I'll

00:13:04,850 --> 00:13:11,869
call it as test servlet and that goes in

00:13:09,920 --> 00:13:15,050
my old glass fish samples package okay

00:13:11,869 --> 00:13:16,579
so nothing fancy now as I said that

00:13:15,050 --> 00:13:19,189
means has default configurations for

00:13:16,579 --> 00:13:21,199
everything so if I click on finish here

00:13:19,189 --> 00:13:22,790
since I finish button is enabled and you

00:13:21,199 --> 00:13:26,360
just work but just to show you something

00:13:22,790 --> 00:13:29,209
click on next deployment descriptors are

00:13:26,360 --> 00:13:31,009
optional in Java EE 6 all the

00:13:29,209 --> 00:13:33,290
information that you typically specify

00:13:31,009 --> 00:13:36,199
in a deployment descriptor can be

00:13:33,290 --> 00:13:37,730
specified in an annotation now so this

00:13:36,199 --> 00:13:40,220
information that would typically go in a

00:13:37,730 --> 00:13:42,439
deployment descriptor I have to

00:13:40,220 --> 00:13:45,829
explicitly say add it to the descriptor

00:13:42,439 --> 00:13:48,439
otherwise if I click on finish here so i

00:13:45,829 --> 00:13:50,959
get my servlet this is act web server

00:13:48,439 --> 00:13:54,079
lat annotation my sublet name and URL

00:13:50,959 --> 00:13:55,549
pattern in the servlet itself and if i

00:13:54,079 --> 00:13:58,309
look at my web and if there is no

00:13:55,549 --> 00:14:03,170
web.xml here so let's go back to our

00:13:58,309 --> 00:14:05,179
browser and i say test servlet so this

00:14:03,170 --> 00:14:07,759
page is available to me instantly same

00:14:05,179 --> 00:14:12,499
thing at it save refresh now if I go

00:14:07,759 --> 00:14:16,220
back in my servlet here I can uncomment

00:14:12,499 --> 00:14:19,850
the boilerplate code save it again go

00:14:16,220 --> 00:14:21,799
back to the browser refresh it and the

00:14:19,850 --> 00:14:22,800
change is available to me instantly now

00:14:21,799 --> 00:14:24,600
this is not

00:14:22,800 --> 00:14:26,250
incremental deployment this is full

00:14:24,600 --> 00:14:27,660
deployment and that's one of the

00:14:26,250 --> 00:14:29,940
advantages I mean agreed there are two

00:14:27,660 --> 00:14:33,480
files for now but the deployment time is

00:14:29,940 --> 00:14:35,640
so fast the war sighs the overall war

00:14:33,480 --> 00:14:40,110
file is so small you can easily afford

00:14:35,640 --> 00:14:42,570
that if I show you here really in the

00:14:40,110 --> 00:14:44,790
output window this is and this is

00:14:42,570 --> 00:14:46,860
NetBeans IDE so I call it as an

00:14:44,790 --> 00:14:50,130
integrated development experience it's a

00:14:46,860 --> 00:14:53,040
full experience in terms of you know be

00:14:50,130 --> 00:14:55,079
able to manage your app server from

00:14:53,040 --> 00:14:56,850
there see your app server logs from

00:14:55,079 --> 00:14:59,100
there do debugging from there do

00:14:56,850 --> 00:15:02,279
profiling from their code completion

00:14:59,100 --> 00:15:04,980
javadoc completion all of that is a part

00:15:02,279 --> 00:15:07,950
of the IDE if you look at my server log

00:15:04,980 --> 00:15:10,790
here if you look at my deployment times

00:15:07,950 --> 00:15:15,029
there are five six to six milliseconds

00:15:10,790 --> 00:15:16,649
461 498 404 so about half a second now

00:15:15,029 --> 00:15:19,440
that start my deployment time and that's

00:15:16,649 --> 00:15:22,820
the typical feeling know that you have

00:15:19,440 --> 00:15:22,820
in the beginning stages of the project

00:15:23,600 --> 00:15:32,310
so let me show you another interesting

00:15:25,740 --> 00:15:34,470
feature over here let's say you have a

00:15:32,310 --> 00:15:37,920
session data as part of your servlet and

00:15:34,470 --> 00:15:39,380
if you are redeploying the project you

00:15:37,920 --> 00:15:42,029
want to preserve that session data

00:15:39,380 --> 00:15:43,410
shopping cart login session whatever it

00:15:42,029 --> 00:15:45,570
is you don't want to lose their session

00:15:43,410 --> 00:15:47,339
data that's yet another convenience

00:15:45,570 --> 00:15:50,610
feature that we have available for you

00:15:47,339 --> 00:15:53,070
to try it out so what I'm going to do is

00:15:50,610 --> 00:15:55,140
I'm going to type a keyword here session

00:15:53,070 --> 00:15:58,260
and that means has this concept of code

00:15:55,140 --> 00:16:00,930
template so if I hit tab here is going

00:15:58,260 --> 00:16:03,510
to blow it up into a code template like

00:16:00,930 --> 00:16:05,430
this if I hit tab this is the code

00:16:03,510 --> 00:16:08,940
template is generated and it's basically

00:16:05,430 --> 00:16:10,230
a simple session attribute counting how

00:16:08,940 --> 00:16:13,260
many times the page has been accessed

00:16:10,230 --> 00:16:15,029
you know ridgid from session plus 1

00:16:13,260 --> 00:16:19,620
prints it and dumps it back into the

00:16:15,029 --> 00:16:24,240
session so let's save this page here now

00:16:19,620 --> 00:16:27,720
in my servers here I can right click and

00:16:24,240 --> 00:16:29,490
I can say properties this is an

00:16:27,720 --> 00:16:32,370
attribute called as preserve sessions

00:16:29,490 --> 00:16:34,680
across a redeployment so I need to

00:16:32,370 --> 00:16:36,120
explicitly enable it and my default is

00:16:34,680 --> 00:16:36,510
enable I was playing with this might

00:16:36,120 --> 00:16:40,050
have

00:16:36,510 --> 00:16:42,180
it but once I enable it the idea is my

00:16:40,050 --> 00:16:45,150
sessions will be redeployed or preserved

00:16:42,180 --> 00:16:48,360
across multiple redeploy okay I closed

00:16:45,150 --> 00:16:52,500
it here you know make a minor change and

00:16:48,360 --> 00:16:56,390
save the file here now if I go back to

00:16:52,500 --> 00:17:01,650
the browser I refresh it acts as one

00:16:56,390 --> 00:17:05,310
access to access three now in my IDE I

00:17:01,650 --> 00:17:07,320
go here and I changed some value and I

00:17:05,310 --> 00:17:09,600
save it so you see the project is

00:17:07,320 --> 00:17:12,300
actually getting deployed again from

00:17:09,600 --> 00:17:14,730
three it goes to four so my session

00:17:12,300 --> 00:17:17,010
state has persisted across a redeploys

00:17:14,730 --> 00:17:18,839
and as I said it's a full redeploy it's

00:17:17,010 --> 00:17:20,880
not an incremental redeployment and

00:17:18,839 --> 00:17:23,010
again it's an optional feature so if you

00:17:20,880 --> 00:17:25,440
know that your session data is changed

00:17:23,010 --> 00:17:27,810
or you want to invalidate your session

00:17:25,440 --> 00:17:29,100
so you can just uncheck it and then it

00:17:27,810 --> 00:17:35,220
will not be preserved for you across

00:17:29,100 --> 00:17:37,470
redeployment another ease-of-use feature

00:17:35,220 --> 00:17:40,140
typically when people hear about ejbs or

00:17:37,470 --> 00:17:42,090
jsf there's a oh boy I don't want to use

00:17:40,140 --> 00:17:44,310
them and frankly when I start first

00:17:42,090 --> 00:17:46,950
started using them I think about j2ee 1

00:17:44,310 --> 00:17:50,490
dot 4 I just could not understand why I

00:17:46,950 --> 00:17:53,100
have to write five files to get one

00:17:50,490 --> 00:17:55,470
simple ejb rolling or why do i have to

00:17:53,100 --> 00:17:58,020
write so many deployment descriptors and

00:17:55,470 --> 00:18:01,170
configuration files to have a JSF page

00:17:58,020 --> 00:18:03,720
working so here you go let's take a

00:18:01,170 --> 00:18:07,380
simplified look you know how ejbs have

00:18:03,720 --> 00:18:10,470
been simplified in java ee 6 so in my

00:18:07,380 --> 00:18:13,440
source package here first of all now

00:18:10,470 --> 00:18:15,000
ejbs can be packaged in a war file so

00:18:13,440 --> 00:18:16,950
you don't need any special packaging

00:18:15,000 --> 00:18:20,340
that you know you package your ejb in a

00:18:16,950 --> 00:18:22,020
jar file which then goes in a war file

00:18:20,340 --> 00:18:24,810
and then you deploy them nothing of that

00:18:22,020 --> 00:18:27,390
sort in a war file you can pack it in EG

00:18:24,810 --> 00:18:31,200
be simplified packaging so right click

00:18:27,390 --> 00:18:32,370
here now instead of using my wizard all

00:18:31,200 --> 00:18:35,820
I'm going to do is I'm going to create a

00:18:32,370 --> 00:18:39,270
simple Java class call this class as

00:18:35,820 --> 00:18:40,650
test bean and click on finish so no code

00:18:39,270 --> 00:18:43,470
is generated at all I mean just this

00:18:40,650 --> 00:18:45,750
boilerplate code for me and here I'm

00:18:43,470 --> 00:18:47,990
going to add a simple business method

00:18:45,750 --> 00:18:47,990
for me

00:18:57,159 --> 00:19:01,090
so i just added a simple method now i am

00:18:59,409 --> 00:19:03,279
returning a simple logic over there okay

00:19:01,090 --> 00:19:07,119
now how do i make it an enterprise Java

00:19:03,279 --> 00:19:09,849
Bean I just add an annotation over there

00:19:07,119 --> 00:19:12,340
that's about it that's all you need to

00:19:09,849 --> 00:19:15,340
have to make convert a simple pojo class

00:19:12,340 --> 00:19:17,619
into an ejb it is all the import it

00:19:15,340 --> 00:19:19,960
comes from Java X ejb package and there

00:19:17,619 --> 00:19:22,509
you go so you're each method you know

00:19:19,960 --> 00:19:24,609
all the benefits of ejb by each method

00:19:22,509 --> 00:19:26,289
being transactional secure and all those

00:19:24,609 --> 00:19:29,229
things are available to you in a war

00:19:26,289 --> 00:19:33,039
file itself now if I want to invoke this

00:19:29,229 --> 00:19:38,499
ejb from a servlet that's again simple

00:19:33,039 --> 00:19:42,879
too I go here and I say inject my ejb at

00:19:38,499 --> 00:19:44,950
this point call this beam now let me do

00:19:42,879 --> 00:19:49,029
the code completion here test beam and

00:19:44,950 --> 00:19:51,789
beam give it a variable name now in here

00:19:49,029 --> 00:19:57,039
I want to invoke my beam or essentially

00:19:51,789 --> 00:19:59,619
print its result first so beam dot say

00:19:57,039 --> 00:20:03,190
hello and I'll say hello to my friend

00:19:59,619 --> 00:20:05,559
Duke okay now once again I save the

00:20:03,190 --> 00:20:08,229
files I don't want to worry about my

00:20:05,559 --> 00:20:13,720
deployment and all those steps of it go

00:20:08,229 --> 00:20:15,700
back here refresh it and of course one

00:20:13,720 --> 00:20:19,389
compatible source code okay we got to

00:20:15,700 --> 00:20:24,489
resolve that reference let's do that

00:20:19,389 --> 00:20:27,249
again and save it now and the project

00:20:24,489 --> 00:20:29,919
gets deployed and there you go so it

00:20:27,249 --> 00:20:31,960
changes from four to five and hello Duke

00:20:29,919 --> 00:20:34,779
so just in a couple of files in a

00:20:31,960 --> 00:20:37,450
servlet your ejb they're all clubbed

00:20:34,779 --> 00:20:39,159
together in a simple war file so I think

00:20:37,450 --> 00:20:41,950
that's a very powerful concept single

00:20:39,159 --> 00:20:44,409
class now the thing with this is this

00:20:41,950 --> 00:20:46,809
ejb is accessed only can be accessed

00:20:44,409 --> 00:20:48,700
locally only it cannot be accessed

00:20:46,809 --> 00:20:50,349
remotely if you want to access it

00:20:48,700 --> 00:20:52,090
remotely then the additional thing you

00:20:50,349 --> 00:20:54,789
will have to add is an interface as well

00:20:52,090 --> 00:20:56,320
so that definition is required but most

00:20:54,789 --> 00:20:58,179
of the times you know your requirements

00:20:56,320 --> 00:21:00,340
are like within a war file you have a

00:20:58,179 --> 00:21:01,989
servlet or some other and or listener

00:21:00,340 --> 00:21:04,239
from which you want to invoke the ejb

00:21:01,989 --> 00:21:05,919
those will be met very easily with this

00:21:04,239 --> 00:21:09,450
and remember there are no deployment

00:21:05,919 --> 00:21:09,450
descriptors at all that we added so far

00:21:10,720 --> 00:21:14,530
look at the web LF there is no

00:21:12,039 --> 00:21:15,640
deployment descriptor at all I can

00:21:14,530 --> 00:21:17,890
actually show you the file structure

00:21:15,640 --> 00:21:20,890
also the other thing that important to

00:21:17,890 --> 00:21:23,200
note here is when we say deploy the

00:21:20,890 --> 00:21:25,510
project is not really creating a war

00:21:23,200 --> 00:21:26,710
file and saying OK Go deploy it over

00:21:25,510 --> 00:21:28,840
there because essentially on the other

00:21:26,710 --> 00:21:31,720
side wherever the server is is going to

00:21:28,840 --> 00:21:36,640
unbar it and then deploy it we say oh by

00:21:31,720 --> 00:21:38,950
the way this is the unworld war file in

00:21:36,640 --> 00:21:40,510
my bill directory you do the directory

00:21:38,950 --> 00:21:42,610
deployment of that itself so that's

00:21:40,510 --> 00:21:44,500
pretty cool because that's what no gives

00:21:42,610 --> 00:21:45,730
you officiant directory deployment or

00:21:44,500 --> 00:21:51,580
efficient deployment time quick

00:21:45,730 --> 00:21:53,289
deployment time all right um let's build

00:21:51,580 --> 00:21:54,880
on build upon it so the next thing I'm

00:21:53,289 --> 00:21:58,150
going to do here is I'm going to add a

00:21:54,880 --> 00:21:59,620
simple Java server face page now as I

00:21:58,150 --> 00:22:00,850
was saying earlier the first time I

00:21:59,620 --> 00:22:03,789
started building javaserver faces

00:22:00,850 --> 00:22:05,320
application you know version one or two

00:22:03,789 --> 00:22:06,760
or so I just could not figure out you

00:22:05,320 --> 00:22:09,909
know why do I need a faces config you

00:22:06,760 --> 00:22:11,530
know a thing as simple as specifying a

00:22:09,909 --> 00:22:14,230
navigation rule in a deployment

00:22:11,530 --> 00:22:16,690
descriptor from this page to this page

00:22:14,230 --> 00:22:18,669
no text bass string navigation I just

00:22:16,690 --> 00:22:21,250
could not understand that I'll show you

00:22:18,669 --> 00:22:25,179
exactly how intuitive and how natural it

00:22:21,250 --> 00:22:26,890
is now well actually before that because

00:22:25,179 --> 00:22:29,350
we're going to be using a database table

00:22:26,890 --> 00:22:33,520
in our JSF page let me show you how easy

00:22:29,350 --> 00:22:35,559
it is to create a jpa energy so i'm

00:22:33,520 --> 00:22:38,470
going to right click here to be back at

00:22:35,559 --> 00:22:41,289
my projects right click here i'm going

00:22:38,470 --> 00:22:46,059
to say new and i say create an entity

00:22:41,289 --> 00:22:48,640
class from a database now i could create

00:22:46,059 --> 00:22:50,950
a new jdbc resource which will point to

00:22:48,640 --> 00:22:53,289
a JDBC connection pool which is actually

00:22:50,950 --> 00:22:55,929
pointing to my database or I can use a

00:22:53,289 --> 00:22:57,640
pre-configured jdbc resource so I can

00:22:55,929 --> 00:23:00,280
say you know what pick a pre-configured

00:22:57,640 --> 00:23:04,990
jdbc resource a JDBC movies for example

00:23:00,280 --> 00:23:07,720
so it connects to the database it says

00:23:04,990 --> 00:23:10,030
movies I click on add so it moves the

00:23:07,720 --> 00:23:12,460
table that for the table movies I'm

00:23:10,030 --> 00:23:13,900
going to generate my JP energy now jpa

00:23:12,460 --> 00:23:16,090
the way it works is you know it's as a

00:23:13,900 --> 00:23:18,250
pluggable persistence provider mechanism

00:23:16,090 --> 00:23:21,580
so what you could do is you can say i'm

00:23:18,250 --> 00:23:23,820
going to use a standard jpa api at the

00:23:21,580 --> 00:23:26,040
back end i will be using either

00:23:23,820 --> 00:23:27,780
no eclipselink as a persistence provider

00:23:26,040 --> 00:23:29,940
or hibernate as the persistence provided

00:23:27,780 --> 00:23:32,460
doesn't matter they're all conforming to

00:23:29,940 --> 00:23:39,420
a standard API from a user side I'm

00:23:32,460 --> 00:23:42,000
using the standard jpa API itself so i

00:23:39,420 --> 00:23:44,310
click on next here and let's say i want

00:23:42,000 --> 00:23:48,150
to keep my entities in a separate

00:23:44,310 --> 00:23:50,100
package and tease i can do some

00:23:48,150 --> 00:23:53,610
customization here know how do i want my

00:23:50,100 --> 00:23:55,080
movies class name to look like and here

00:23:53,610 --> 00:23:57,210
is going to generate some named query

00:23:55,080 --> 00:24:00,030
annotations for me now named query or

00:23:57,210 --> 00:24:02,820
convenience queries that i can fire on

00:24:00,030 --> 00:24:04,050
any database table very easily and i'll

00:24:02,820 --> 00:24:06,120
show you exactly when the code is

00:24:04,050 --> 00:24:08,970
generated for me i can also generate

00:24:06,120 --> 00:24:11,310
jacks be annotations for me and what

00:24:08,970 --> 00:24:15,060
that allows you is take a pojo class if

00:24:11,310 --> 00:24:17,580
you are converted into XML or JSON j XB

00:24:15,060 --> 00:24:19,740
exactly knows how to do that so you just

00:24:17,580 --> 00:24:22,650
put a single annotation and then that

00:24:19,740 --> 00:24:25,260
class is convertible to an XML fragment

00:24:22,650 --> 00:24:26,490
on the fly that's pretty cool and then

00:24:25,260 --> 00:24:28,380
of course we you need to have a

00:24:26,490 --> 00:24:29,910
persistence unit that's where exactly

00:24:28,380 --> 00:24:32,880
you specify what your persistence

00:24:29,910 --> 00:24:34,410
provided is going to look like so my

00:24:32,880 --> 00:24:37,530
finish button is enable as i said i

00:24:34,410 --> 00:24:43,680
click on finish and this going to do my

00:24:37,530 --> 00:24:45,930
code generation so first thing let's

00:24:43,680 --> 00:24:48,390
take a look at our generated code so i

00:24:45,930 --> 00:24:50,430
look at my movies class here here it

00:24:48,390 --> 00:24:51,900
says oh this is a jpa ener-d this is a

00:24:50,430 --> 00:24:55,350
standard you know coming from java x

00:24:51,900 --> 00:24:57,090
persistence package this is a table now

00:24:55,350 --> 00:24:59,970
in this case what i did is i started

00:24:57,090 --> 00:25:02,730
from a database table and i generated

00:24:59,970 --> 00:25:05,130
a.j.p energy the other angle could be is

00:25:02,730 --> 00:25:07,500
you start from a jpa model or a java

00:25:05,130 --> 00:25:09,570
model you specify your annotation in

00:25:07,500 --> 00:25:11,910
there and then you say oh by the way now

00:25:09,570 --> 00:25:14,100
go generate my database schema I want to

00:25:11,910 --> 00:25:15,960
be more comfortable in my database on my

00:25:14,100 --> 00:25:18,210
java model so that you could do that and

00:25:15,960 --> 00:25:21,840
that's where this a table annotation is

00:25:18,210 --> 00:25:23,280
handy for now this is redundant because

00:25:21,840 --> 00:25:25,350
the table name and the class name are

00:25:23,280 --> 00:25:26,910
exactly same but if you're going from JP

00:25:25,350 --> 00:25:29,490
a database then it might be relevant

00:25:26,910 --> 00:25:32,610
wherein you know you have conflicting

00:25:29,490 --> 00:25:34,770
database table name for example this is

00:25:32,610 --> 00:25:37,590
my xml root element which allows my JP

00:25:34,770 --> 00:25:39,510
energy to be converted to XML fragment

00:25:37,590 --> 00:25:41,880
and these are my name queries now as

00:25:39,510 --> 00:25:44,520
part of name queries what I do is I give

00:25:41,880 --> 00:25:46,830
them a convenience name and next to the

00:25:44,520 --> 00:25:48,630
convenience name I have the j PQ el

00:25:46,830 --> 00:25:51,630
which is called as java persistence

00:25:48,630 --> 00:25:56,309
query language that's the query language

00:25:51,630 --> 00:25:57,450
that i use on my java model now it's

00:25:56,309 --> 00:25:59,730
important to understand the difference

00:25:57,450 --> 00:26:01,650
why it operates on the Java model now

00:25:59,730 --> 00:26:03,390
your database structure could be flat

00:26:01,650 --> 00:26:06,059
for example you could have a person

00:26:03,390 --> 00:26:10,380
table you could have a name or first

00:26:06,059 --> 00:26:12,929
name last name city street country zip

00:26:10,380 --> 00:26:14,490
so on so forth now that's not an

00:26:12,929 --> 00:26:16,289
intuitive Java model that makes sense

00:26:14,490 --> 00:26:18,570
from a database perspective so you

00:26:16,289 --> 00:26:20,429
generate a jpa energy out of it and then

00:26:18,570 --> 00:26:22,080
you may want to start creating some

00:26:20,429 --> 00:26:24,720
structure in your java class so you may

00:26:22,080 --> 00:26:27,029
say oh this is my person class in my

00:26:24,720 --> 00:26:28,710
person I have a name class which could

00:26:27,029 --> 00:26:30,809
have you know maybe two for the fields

00:26:28,710 --> 00:26:32,789
first name and last name then I could

00:26:30,809 --> 00:26:35,669
have a contact info class which could

00:26:32,789 --> 00:26:38,130
have in a city straight country and

00:26:35,669 --> 00:26:39,720
those kind of feels so the idea is your

00:26:38,130 --> 00:26:41,669
database structure may be different your

00:26:39,720 --> 00:26:44,010
Java structure may be more aligned to

00:26:41,669 --> 00:26:46,529
your java programming model so you write

00:26:44,010 --> 00:26:49,020
your j TQ l which is very close to SQL

00:26:46,529 --> 00:26:51,510
how but it still operates on your java

00:26:49,020 --> 00:26:56,820
model because it may reflect your nested

00:26:51,510 --> 00:26:58,740
structure so here for example i am

00:26:56,820 --> 00:27:00,960
saying fine all just a convenience name

00:26:58,740 --> 00:27:03,330
could be any random name and here i am

00:27:00,960 --> 00:27:04,890
saying select em from movies em it's

00:27:03,330 --> 00:27:07,890
essentially saying select all movie

00:27:04,890 --> 00:27:10,980
select star from movies then if i keep

00:27:07,890 --> 00:27:13,529
going down here here it says okay this

00:27:10,980 --> 00:27:16,320
is a field which is heavily annotated

00:27:13,529 --> 00:27:17,640
apparently again you know several

00:27:16,320 --> 00:27:19,260
annotations over here are just

00:27:17,640 --> 00:27:21,360
convenience annotations and can be

00:27:19,260 --> 00:27:23,250
removed and optional but the key one

00:27:21,360 --> 00:27:27,510
over here is it says ID that means this

00:27:23,250 --> 00:27:29,970
is my primary key this is a generated

00:27:27,510 --> 00:27:32,330
value that means this key value is the

00:27:29,970 --> 00:27:35,399
primary key is automatically generated

00:27:32,330 --> 00:27:38,309
here is a cool one no I say NAT not null

00:27:35,399 --> 00:27:40,470
now this is coming from Java X

00:27:38,309 --> 00:27:43,110
validation constraints package that's

00:27:40,470 --> 00:27:45,840
again a new specification added in Java

00:27:43,110 --> 00:27:47,580
EE 6 is called as bean validation now

00:27:45,840 --> 00:27:49,950
with that what we do is you could start

00:27:47,580 --> 00:27:50,820
specifying validation constraints on a

00:27:49,950 --> 00:27:53,490
beam

00:27:50,820 --> 00:27:57,539
which are then honored by the JPA layer

00:27:53,490 --> 00:28:00,630
very easily and the idea is if your bean

00:27:57,539 --> 00:28:02,399
is not meeting the constraints the JPA

00:28:00,630 --> 00:28:04,919
layer which is my persistence provider

00:28:02,399 --> 00:28:07,919
essentially eclipselink will fire an

00:28:04,919 --> 00:28:09,899
exception so the idea is if you're JP a

00:28:07,919 --> 00:28:11,940
layer will not throw an error you take a

00:28:09,899 --> 00:28:13,860
base layer well so where exactly do you

00:28:11,940 --> 00:28:14,789
want to do that no it's an optional

00:28:13,860 --> 00:28:17,250
thing again for you is fully

00:28:14,789 --> 00:28:19,289
configurable by the way so once so forth

00:28:17,250 --> 00:28:21,000
so that means you know takes takes a

00:28:19,289 --> 00:28:23,070
look at a database structure schema and

00:28:21,000 --> 00:28:24,179
generate those validation constraints

00:28:23,070 --> 00:28:27,480
for you automatically here it says

00:28:24,179 --> 00:28:30,450
string name max 30 similarly string

00:28:27,480 --> 00:28:32,460
actors sighs max 50 so these are all

00:28:30,450 --> 00:28:35,490
predefined constraints as part of the

00:28:32,460 --> 00:28:37,200
bean validation specification and you

00:28:35,490 --> 00:28:39,090
can even define your own custom

00:28:37,200 --> 00:28:41,450
constraint very easily as well if you

00:28:39,090 --> 00:28:44,789
need to so for example it could be a

00:28:41,450 --> 00:28:48,450
string email email being the variable

00:28:44,789 --> 00:28:51,750
name and then this for example this ad

00:28:48,450 --> 00:28:53,639
this ad size could be at email for

00:28:51,750 --> 00:28:55,889
example very easily and what that means

00:28:53,639 --> 00:28:58,379
is you are defining a custom constraint

00:28:55,889 --> 00:28:59,519
to exactly specify what that email

00:28:58,379 --> 00:29:02,039
address should look like you know you

00:28:59,519 --> 00:29:07,350
could define certain format or mask out

00:29:02,039 --> 00:29:09,659
certain domains and things like that so

00:29:07,350 --> 00:29:11,340
now we have the movies Java here in my

00:29:09,659 --> 00:29:13,169
test bean what I'm going to do is I'm

00:29:11,340 --> 00:29:16,110
going to add some business logic to

00:29:13,169 --> 00:29:21,690
retrieve all the movies so I go here I

00:29:16,110 --> 00:29:24,840
say at persistence context this is going

00:29:21,690 --> 00:29:28,409
to give me entitymanager I'm going to

00:29:24,840 --> 00:29:31,830
resolve the imports and I'll have a

00:29:28,409 --> 00:29:36,179
simple method called as get all movies

00:29:31,830 --> 00:29:38,340
and then this get all movies all I'm

00:29:36,179 --> 00:29:40,580
going to say is the entity manager that

00:29:38,340 --> 00:29:44,669
I just injected from the entitymanager

00:29:40,580 --> 00:29:46,860
create unnamed query let's take the

00:29:44,669 --> 00:29:50,840
named query from the movies this is my

00:29:46,860 --> 00:29:53,970
select star from movies named query I

00:29:50,840 --> 00:29:58,559
take it go back to my netbeans or my

00:29:53,970 --> 00:30:00,419
test bean put the name here so once the

00:29:58,559 --> 00:30:03,360
name query is generated i'm going to say

00:30:00,419 --> 00:30:04,950
get results list and this is essentially

00:30:03,360 --> 00:30:07,390
what i am returning

00:30:04,950 --> 00:30:10,419
so that's your business logic over here

00:30:07,390 --> 00:30:12,669
and because all the input one more time

00:30:10,419 --> 00:30:14,620
so that's about it and now you inject

00:30:12,669 --> 00:30:16,960
identity manager to the entitymanager

00:30:14,620 --> 00:30:18,909
you say create unnamed query if you want

00:30:16,960 --> 00:30:21,010
you can hardcode your name query here as

00:30:18,909 --> 00:30:22,419
well but that does not follow the dry

00:30:21,010 --> 00:30:24,789
principle so you want to follow the dry

00:30:22,419 --> 00:30:26,799
principle of don't repeat yourself put

00:30:24,789 --> 00:30:28,659
it at one place and then you know start

00:30:26,799 --> 00:30:30,400
using that reference you know at other

00:30:28,659 --> 00:30:33,940
places so that is easy to maintain and

00:30:30,400 --> 00:30:36,400
manage your code all right I think we

00:30:33,940 --> 00:30:37,750
are ready to run and then in the test

00:30:36,400 --> 00:30:39,940
servlet what I'm going to do is I'm

00:30:37,750 --> 00:30:42,100
going to invoke my test mean so that i

00:30:39,940 --> 00:30:48,520
can find out what all movies are in

00:30:42,100 --> 00:30:53,140
there so back here i'll say out dot

00:30:48,520 --> 00:30:55,030
println and i will say beam dot get all

00:30:53,140 --> 00:31:00,159
movies and let's print the list of

00:30:55,030 --> 00:31:01,840
movies and just convenience less comment

00:31:00,159 --> 00:31:03,429
this code for now so that we can

00:31:01,840 --> 00:31:06,549
actually look only at the movies that

00:31:03,429 --> 00:31:09,280
are being printed so save this code and

00:31:06,549 --> 00:31:11,919
once again the deployment will happen so

00:31:09,280 --> 00:31:17,470
if i look at the output here to my open

00:31:11,919 --> 00:31:18,820
source here this time remember it took a

00:31:17,470 --> 00:31:20,730
little longer because we had a whole

00:31:18,820 --> 00:31:23,260
bunch of files that were being generated

00:31:20,730 --> 00:31:27,309
but other than that and you could see

00:31:23,260 --> 00:31:32,440
574 4056 80 milliseconds things like

00:31:27,309 --> 00:31:35,080
that so let's refresh the page and here

00:31:32,440 --> 00:31:37,150
you go I see one two and three and four

00:31:35,080 --> 00:31:38,500
movies but that's not you know exciting

00:31:37,150 --> 00:31:41,169
I don't see the movie name essentially I

00:31:38,500 --> 00:31:44,740
want to see the movie title so all I do

00:31:41,169 --> 00:31:46,210
is I go to my movies here my string to

00:31:44,740 --> 00:31:50,950
string method is being called over here

00:31:46,210 --> 00:31:56,049
let's see movies have a name okay so let

00:31:50,950 --> 00:32:00,789
me return name here so I return the name

00:31:56,049 --> 00:32:03,039
save it go back to the browser refresh

00:32:00,789 --> 00:32:04,480
it and there you go so I got the movies

00:32:03,039 --> 00:32:07,179
name listed over here so nice and easy

00:32:04,480 --> 00:32:09,970
nothing fancy but you have you know your

00:32:07,179 --> 00:32:12,340
servlet your ejb your JP a connection to

00:32:09,970 --> 00:32:14,770
the database all figure out in one flow

00:32:12,340 --> 00:32:17,320
now let's see you know going back to the

00:32:14,770 --> 00:32:18,580
jsf part of it what i was saying let me

00:32:17,320 --> 00:32:21,340
add a JSF page too

00:32:18,580 --> 00:32:23,980
it and show this list of movies in a

00:32:21,340 --> 00:32:28,539
nice manner over here basically so I go

00:32:23,980 --> 00:32:32,470
here first thing I need to do is enable

00:32:28,539 --> 00:32:35,320
jsf in the project so I go here go two

00:32:32,470 --> 00:32:37,630
frameworks a property's frameworks and I

00:32:35,320 --> 00:32:40,000
say add the framework so I'm going to

00:32:37,630 --> 00:32:42,580
say javaserver faces now one thing that

00:32:40,000 --> 00:32:45,399
we need to understand here is if you are

00:32:42,580 --> 00:32:49,299
using any standard jsf to allocation

00:32:45,399 --> 00:32:51,669
there is no need to add the framework if

00:32:49,299 --> 00:32:54,700
you're using you know at managed bean or

00:32:51,669 --> 00:32:57,820
jsf validator or jsf renderer or

00:32:54,700 --> 00:32:59,500
anything of that sort glass pressure on

00:32:57,820 --> 00:33:03,669
time automatically looks at your war

00:32:59,500 --> 00:33:05,860
file and registers the jsf faces servlet

00:33:03,669 --> 00:33:07,779
essentially for you so that's sort of

00:33:05,860 --> 00:33:09,279
the advantage but here in this case we

00:33:07,779 --> 00:33:12,039
are not using an annotation you know we

00:33:09,279 --> 00:33:13,870
are using we will be using ejb as the

00:33:12,039 --> 00:33:15,669
backing bean so there is no at Joseph

00:33:13,870 --> 00:33:18,610
annotation that's the reason you have to

00:33:15,669 --> 00:33:21,399
explicitly the register or servlet all

00:33:18,610 --> 00:33:24,940
right the face is sublet so as soon as I

00:33:21,399 --> 00:33:27,490
click on ok here and I can do because

00:33:24,940 --> 00:33:31,299
server library click on ok one more time

00:33:27,490 --> 00:33:34,380
and here i will see my web door xml

00:33:31,299 --> 00:33:34,380
being generated for me

00:33:46,020 --> 00:33:49,680
what are you saving

00:34:03,140 --> 00:34:09,860
there you go I don't know what happened

00:34:05,270 --> 00:34:12,440
here but if i look at my files here if i

00:34:09,860 --> 00:34:14,929
look at my web where been if no I have a

00:34:12,440 --> 00:34:17,240
weblog XML here as well and I can look

00:34:14,929 --> 00:34:19,280
at the actual xml representation all I'm

00:34:17,240 --> 00:34:23,570
doing over here is registering the faces

00:34:19,280 --> 00:34:26,330
sublet ok so if I go back here and my

00:34:23,570 --> 00:34:30,440
web browser i could say faces / index

00:34:26,330 --> 00:34:36,110
dot XHTML my template page was generated

00:34:30,440 --> 00:34:37,850
for me automatically shows up but we

00:34:36,110 --> 00:34:39,800
want you to display the list of movies

00:34:37,850 --> 00:34:41,179
over there so how will we do that well

00:34:39,800 --> 00:34:44,750
another thing that i want to show you

00:34:41,179 --> 00:34:46,790
here is the templating language that we

00:34:44,750 --> 00:34:49,880
add edit as part of jsf and which is

00:34:46,790 --> 00:34:51,679
basically you can use facelets as the

00:34:49,880 --> 00:34:54,740
templating language no you don't need to

00:34:51,679 --> 00:34:56,929
use JSP anymore which really does not

00:34:54,740 --> 00:34:59,360
promote MVC in any way you can

00:34:56,929 --> 00:35:02,090
essentially have your M the Model View

00:34:59,360 --> 00:35:05,120
the actual representation and controller

00:35:02,090 --> 00:35:07,580
all in JSP itself everything you know

00:35:05,120 --> 00:35:09,710
because it allows so facelets on the

00:35:07,580 --> 00:35:12,830
other hand recommends good practices it

00:35:09,710 --> 00:35:14,900
says you go to use X HTML and CSS only

00:35:12,830 --> 00:35:17,480
in the front end all the backing logic

00:35:14,900 --> 00:35:19,160
is in the backing bean essentially so

00:35:17,480 --> 00:35:22,280
let me generate a simple template page

00:35:19,160 --> 00:35:26,000
here say new and I'm going to generate a

00:35:22,280 --> 00:35:29,150
facelets template and this is of course

00:35:26,000 --> 00:35:31,070
my template page and since I don't want

00:35:29,150 --> 00:35:33,200
to expose this template to the wild side

00:35:31,070 --> 00:35:37,250
world I will put it in the web in a

00:35:33,200 --> 00:35:39,080
folder put it in there there are certain

00:35:37,250 --> 00:35:40,370
templates that are available to you and

00:35:39,080 --> 00:35:44,090
these are just convenience templates

00:35:40,370 --> 00:35:45,740
he's using plain X HTML and CSS I pick

00:35:44,090 --> 00:35:51,890
the one which is has a header content

00:35:45,740 --> 00:35:55,670
and footer and click on finish so here i

00:35:51,890 --> 00:35:57,470
have my template dot XHTML as using CSS

00:35:55,670 --> 00:36:00,650
and I've got by standard XHTML

00:35:57,470 --> 00:36:03,170
namespaces and my standard dibs so dave

00:36:00,650 --> 00:36:05,390
has a UI colon insert on top content and

00:36:03,170 --> 00:36:08,570
bottom ok now the template itself isn't

00:36:05,390 --> 00:36:10,100
meaningful unless we use a pay we define

00:36:08,570 --> 00:36:12,440
a page that will be using that page

00:36:10,100 --> 00:36:15,980
template so let's create a new page now

00:36:12,440 --> 00:36:16,990
so here right click new facelets

00:36:15,980 --> 00:36:19,360
template

00:36:16,990 --> 00:36:21,700
and let's say this is my show page okay

00:36:19,360 --> 00:36:25,480
is asking me which template you want to

00:36:21,700 --> 00:36:28,750
apply go to web and f point to the

00:36:25,480 --> 00:36:30,940
template and click on finish take

00:36:28,750 --> 00:36:33,550
everything else as default so generally

00:36:30,940 --> 00:36:35,020
most of the times you know you should be

00:36:33,550 --> 00:36:37,300
able to take the defaults at least

00:36:35,020 --> 00:36:39,220
that's the philosophy and things would

00:36:37,300 --> 00:36:40,630
work out of the box for you so it's a

00:36:39,220 --> 00:36:43,119
convention over configuration you follow

00:36:40,630 --> 00:36:44,980
the convention you get a project get it

00:36:43,119 --> 00:36:46,930
working and then if you want to override

00:36:44,980 --> 00:36:50,740
it you can go into the IDE and start

00:36:46,930 --> 00:36:54,070
tinkering with the code so let me go to

00:36:50,740 --> 00:36:56,140
my browser here and see how this show

00:36:54,070 --> 00:36:58,150
dot X HTML page is looking this is how

00:36:56,140 --> 00:37:02,680
it's looking like no top content and

00:36:58,150 --> 00:37:05,020
bottom well in my template here I have

00:37:02,680 --> 00:37:08,530
you I colon insert top content bottom

00:37:05,020 --> 00:37:12,460
and here I have your colon define so the

00:37:08,530 --> 00:37:14,860
idea is if I don't want to define my top

00:37:12,460 --> 00:37:16,690
and bottom in each of my child pages

00:37:14,860 --> 00:37:18,790
that's essentially the idea of a

00:37:16,690 --> 00:37:21,550
template they will automatically be

00:37:18,790 --> 00:37:24,790
inherited from my template page so if I

00:37:21,550 --> 00:37:26,859
go in my template here and I say you

00:37:24,790 --> 00:37:31,900
know let's put a header here say H 1

00:37:26,859 --> 00:37:35,530
cell 2011 and put the closing tag here

00:37:31,900 --> 00:37:41,369
in the trailer I could say put it into

00:37:35,530 --> 00:37:46,240
the center and I could say powered by

00:37:41,369 --> 00:37:51,310
glassfish okay and I go back to my show

00:37:46,240 --> 00:37:55,119
dog page here remove the top and the

00:37:51,310 --> 00:37:59,440
bottom save the files all over again in

00:37:55,119 --> 00:38:01,720
my browser refresh it and boom so my

00:37:59,440 --> 00:38:03,520
show dot XHTML does not have the top and

00:38:01,720 --> 00:38:04,780
the bottom sections they are

00:38:03,520 --> 00:38:07,420
automatically and edited from my

00:38:04,780 --> 00:38:10,030
template and you get a consistent look

00:38:07,420 --> 00:38:12,160
and feel so any page that you create you

00:38:10,030 --> 00:38:13,930
can follow the same guideline and then

00:38:12,160 --> 00:38:15,480
they'll have a consistent look and feel

00:38:13,930 --> 00:38:18,369
so then you can start adding your

00:38:15,480 --> 00:38:22,119
navigation bars or you know sidebars

00:38:18,369 --> 00:38:24,490
anything that you like so here what I

00:38:22,119 --> 00:38:26,859
want to do really is I want to invoke

00:38:24,490 --> 00:38:29,050
the ejb that I created where my database

00:38:26,859 --> 00:38:30,820
logic exist so I want to invoke that ejb

00:38:29,050 --> 00:38:35,740
and display the list of

00:38:30,820 --> 00:38:39,490
movies in here how do I do that so in my

00:38:35,740 --> 00:38:43,090
test mean all the logic exists but this

00:38:39,490 --> 00:38:45,040
test beam is not yet can be injected in

00:38:43,090 --> 00:38:48,010
my expression language which is what i

00:38:45,040 --> 00:38:50,560
use in my JSF page so in order to make

00:38:48,010 --> 00:38:52,540
it expression language injectable I have

00:38:50,560 --> 00:38:53,890
to make this as a CDI beam and CGI is a

00:38:52,540 --> 00:38:56,770
beam the spec I was talking about

00:38:53,890 --> 00:38:59,470
earlier it gives you typesafe dependency

00:38:56,770 --> 00:39:02,620
injection so i got to first qualify this

00:38:59,470 --> 00:39:04,870
beam so that it can be injected in an

00:39:02,620 --> 00:39:09,670
expression language and the way I do

00:39:04,870 --> 00:39:11,860
that is I add additional qualifier

00:39:09,670 --> 00:39:15,220
called as at named that means this beam

00:39:11,860 --> 00:39:19,480
is named now and can be referred in any

00:39:15,220 --> 00:39:22,330
other ex HTML pages so resolve the

00:39:19,480 --> 00:39:24,550
import here one more time now one more

00:39:22,330 --> 00:39:26,680
thing I need to do here is enable

00:39:24,550 --> 00:39:30,760
injection as I said you know we have to

00:39:26,680 --> 00:39:32,920
enable or add beans or XML in your war

00:39:30,760 --> 00:39:35,260
file to give an indication to the CDI

00:39:32,920 --> 00:39:38,710
run time that this is the scope on where

00:39:35,260 --> 00:39:41,200
the injection needs to happen so right

00:39:38,710 --> 00:39:42,790
click on web enough and the specified

00:39:41,200 --> 00:39:45,940
location for that is web in f directory

00:39:42,790 --> 00:39:48,220
so say new I'm going to add a beans or

00:39:45,940 --> 00:39:51,670
XML which is my CD icons recognition

00:39:48,220 --> 00:39:53,950
file click on finish and this file

00:39:51,670 --> 00:39:55,960
essentially can be completely empty it's

00:39:53,950 --> 00:39:57,940
just a marker file no I don't need any

00:39:55,960 --> 00:40:00,040
contents in there I mean if you want you

00:39:57,940 --> 00:40:02,140
can if you want to get little bit

00:40:00,040 --> 00:40:04,540
sophisticated over there but we're not

00:40:02,140 --> 00:40:07,510
going there right now so in my test bean

00:40:04,540 --> 00:40:10,270
I added my at stateless which is already

00:40:07,510 --> 00:40:13,510
there at named now back so let's save

00:40:10,270 --> 00:40:16,330
all the files for a second so now when i

00:40:13,510 --> 00:40:19,960
go to my show dot XHTML i can start

00:40:16,330 --> 00:40:22,810
adding my standard HTML tags or a jsf

00:40:19,960 --> 00:40:26,830
tax i can say h colon for example data

00:40:22,810 --> 00:40:28,390
table and the value here i want to pick

00:40:26,830 --> 00:40:30,730
the value now this is my expression

00:40:28,390 --> 00:40:32,530
language now in the expression language

00:40:30,730 --> 00:40:35,020
i will say show me the beans that are

00:40:32,530 --> 00:40:37,390
available to me the one that I had was

00:40:35,020 --> 00:40:39,790
test bean see how my code completion

00:40:37,390 --> 00:40:43,240
works within the expression language as

00:40:39,790 --> 00:40:44,630
well and then here I will say I will

00:40:43,240 --> 00:40:49,100
assign it a very

00:40:44,630 --> 00:40:53,390
all call as M for example m being for

00:40:49,100 --> 00:40:54,980
movie actually test beam and then I need

00:40:53,390 --> 00:40:56,450
to say all movies because that's exactly

00:40:54,980 --> 00:40:59,600
what I'm saying that's what is returning

00:40:56,450 --> 00:41:04,490
with a list of movies and in here I

00:40:59,600 --> 00:41:06,950
could say H colon data table so I get my

00:41:04,490 --> 00:41:10,880
closing tag now within the data table I

00:41:06,950 --> 00:41:13,400
got to say H colon column H column

00:41:10,880 --> 00:41:16,970
column here and one more expression

00:41:13,400 --> 00:41:19,850
language I say m dot and if we remember

00:41:16,970 --> 00:41:21,290
movie had a name so if we look back at

00:41:19,850 --> 00:41:24,230
our movies that's the one that we

00:41:21,290 --> 00:41:25,490
printed name okay so that's what that's

00:41:24,230 --> 00:41:30,080
what we are printing over here as well

00:41:25,490 --> 00:41:33,200
so let's save all the pages go back to

00:41:30,080 --> 00:41:35,870
the browser refresh it and we have the

00:41:33,200 --> 00:41:37,430
entire list displayed in the JSF page so

00:41:35,870 --> 00:41:39,680
the same logic that we were using with

00:41:37,430 --> 00:41:42,050
test test sublet you know in a text

00:41:39,680 --> 00:41:46,700
based representation can now be easily

00:41:42,050 --> 00:41:47,990
achieve in a JSF page very easily these

00:41:46,700 --> 00:41:51,200
other fancy things that we can start

00:41:47,990 --> 00:41:58,300
doing over here is I could say for

00:41:51,200 --> 00:42:03,050
example add H colon button okay and say

00:41:58,300 --> 00:42:08,180
action here is this pages show let's say

00:42:03,050 --> 00:42:13,700
I say show too okay and I say value say

00:42:08,180 --> 00:42:15,440
submit now in jsf one dot one land

00:42:13,700 --> 00:42:17,930
typically what you would do is you will

00:42:15,440 --> 00:42:20,000
have to specify the configuration rule

00:42:17,930 --> 00:42:22,880
and the configuration rule will look

00:42:20,000 --> 00:42:25,400
nasty in the sense you will say coming

00:42:22,880 --> 00:42:27,980
from this page which is show dot XHTML

00:42:25,400 --> 00:42:29,960
I'm going to go to show two dot XHTML

00:42:27,980 --> 00:42:31,970
and then you will specify some string

00:42:29,960 --> 00:42:35,320
variable based upon which you will do

00:42:31,970 --> 00:42:39,370
the navigation here all I'm saying is

00:42:35,320 --> 00:42:39,370
why action is complain

00:42:42,430 --> 00:42:44,490
you

00:43:23,490 --> 00:43:28,530
I am missing the exact attribute name

00:43:25,860 --> 00:43:30,690
but the idea here is once you put your

00:43:28,530 --> 00:43:33,300
button you can put the exact action

00:43:30,690 --> 00:43:37,230
element over there so the idea is once

00:43:33,300 --> 00:43:39,660
you click on the button then essentially

00:43:37,230 --> 00:43:42,300
is looking for a new file called as

00:43:39,660 --> 00:43:44,490
showed to about XHTML is as simple as

00:43:42,300 --> 00:43:46,710
that really and that's what it cares

00:43:44,490 --> 00:43:49,560
about there is no need for our faces

00:43:46,710 --> 00:43:53,270
configure XML to specify your navigation

00:43:49,560 --> 00:43:59,190
information and information like that

00:43:53,270 --> 00:44:00,540
just commented foot now now one more

00:43:59,190 --> 00:44:03,119
thing I want to show you here is how

00:44:00,540 --> 00:44:05,330
easy it is to generate restful web

00:44:03,119 --> 00:44:08,070
services so let's take a look at that

00:44:05,330 --> 00:44:13,770
right click here and i'm going to say

00:44:08,070 --> 00:44:17,280
new and i will say other guru web

00:44:13,770 --> 00:44:20,700
services say restful web services from

00:44:17,280 --> 00:44:23,250
patterns now i could generate i can take

00:44:20,700 --> 00:44:25,890
a look at my entity class and generate a

00:44:23,250 --> 00:44:28,050
restful web service from that but for

00:44:25,890 --> 00:44:32,340
now all i care about is a simple restful

00:44:28,050 --> 00:44:34,619
resource so i click on next year take a

00:44:32,340 --> 00:44:37,800
simple root resource click on the next

00:44:34,619 --> 00:44:41,070
one more time this is going to be my

00:44:37,800 --> 00:44:43,560
simple resource and i'm going to return

00:44:41,070 --> 00:44:44,700
say text plain mime type now these are

00:44:43,560 --> 00:44:48,180
the ones that are pre-configured in

00:44:44,700 --> 00:44:51,390
netbeans ide you can specify any

00:44:48,180 --> 00:44:52,680
standard mime type and even custom mime

00:44:51,390 --> 00:44:54,119
type but you will have to write your

00:44:52,680 --> 00:44:58,350
reader and a writer for that in that

00:44:54,119 --> 00:45:00,750
case and I click on finish now just like

00:44:58,350 --> 00:45:02,369
you know you say starting with slashed

00:45:00,750 --> 00:45:04,980
faces everything is going to be a sub

00:45:02,369 --> 00:45:08,100
jsf request you have to specify a base

00:45:04,980 --> 00:45:11,990
URL for restful resources as well and

00:45:08,100 --> 00:45:11,990
that's the URL that i'm specifying here

00:45:21,550 --> 00:45:28,700
so this is how my simple resource looks

00:45:24,710 --> 00:45:31,520
like in here I have a at path annotation

00:45:28,700 --> 00:45:32,630
which says this is a simple resource

00:45:31,520 --> 00:45:35,930
that is going to be accessible at the

00:45:32,630 --> 00:45:38,600
path simple and then in here I have a

00:45:35,930 --> 00:45:42,200
simple method colors get text saying

00:45:38,600 --> 00:45:44,630
whenever HTTP GET is being called invoke

00:45:42,200 --> 00:45:48,650
this method and what this meth is going

00:45:44,630 --> 00:45:54,980
to return say return hello Duke for

00:45:48,650 --> 00:45:56,900
example for now and that's about it it

00:45:54,980 --> 00:46:00,910
says produces that means it's producing

00:45:56,900 --> 00:46:05,840
text / plane so if I save the page here

00:46:00,910 --> 00:46:12,020
go to the browser and I say resources

00:46:05,840 --> 00:46:14,030
and the URL was simple and I get my

00:46:12,020 --> 00:46:16,280
exact response that I cared about so

00:46:14,030 --> 00:46:18,200
just you know one more class and you

00:46:16,280 --> 00:46:23,090
have your poggio exposed as a restful

00:46:18,200 --> 00:46:27,860
entity I can take this URL and I can say

00:46:23,090 --> 00:46:30,650
curl on a command line and I can give

00:46:27,860 --> 00:46:33,110
this same URL and I get the same

00:46:30,650 --> 00:46:35,810
response back so the idea is immaterial

00:46:33,110 --> 00:46:37,310
what your client is a nice restful

00:46:35,810 --> 00:46:38,990
service that's the whole idea behind it

00:46:37,310 --> 00:46:42,800
now with curl you can start getting

00:46:38,990 --> 00:46:44,540
fancy where you could say oh how does

00:46:42,800 --> 00:46:47,150
the content negotiation work so from

00:46:44,540 --> 00:46:48,980
curl you can explicitly specify or this

00:46:47,150 --> 00:46:53,110
is the content that I want so for

00:46:48,980 --> 00:46:58,460
example on the server side here in

00:46:53,110 --> 00:47:02,720
produces you can start saying text /

00:46:58,460 --> 00:47:05,360
plane and by the way application / JSON

00:47:02,720 --> 00:47:07,460
so I produce both of these types for

00:47:05,360 --> 00:47:09,170
example okay now this won't be converted

00:47:07,460 --> 00:47:11,720
sj's on though we'll see let's take a

00:47:09,170 --> 00:47:19,040
look I don't have never tried it so here

00:47:11,720 --> 00:47:21,770
I could say oops h and i'm sending an

00:47:19,040 --> 00:47:25,040
header HTTP header called as accept and

00:47:21,770 --> 00:47:26,630
I'm saying application / J's on so the

00:47:25,040 --> 00:47:29,420
moment i do that i get a response back

00:47:26,630 --> 00:47:31,520
now it's not JSON it's not using format

00:47:29,420 --> 00:47:33,410
it because that's what I'm returning but

00:47:31,520 --> 00:47:35,269
the idea is it's not throwing an error

00:47:33,410 --> 00:47:40,369
back now here if I say

00:47:35,269 --> 00:47:43,069
I add some random type say I just added

00:47:40,369 --> 00:47:45,169
you know AAS before application so this

00:47:43,069 --> 00:47:46,969
is the unknown mime type my jersey

00:47:45,169 --> 00:47:49,189
resource or my restful resource does not

00:47:46,969 --> 00:47:53,329
understand what it is if I enter this

00:47:49,189 --> 00:47:54,859
URL it says the resource identified by

00:47:53,329 --> 00:47:55,849
this request is only capable of

00:47:54,859 --> 00:47:57,679
generating responses with

00:47:55,849 --> 00:48:00,079
characteristics not acceptable recording

00:47:57,679 --> 00:48:01,939
to the request accept headers not

00:48:00,079 --> 00:48:04,309
acceptable I mean the idea is it saying

00:48:01,939 --> 00:48:06,559
hey you send me some accept header which

00:48:04,309 --> 00:48:08,089
I don't understand so I cannot generate

00:48:06,559 --> 00:48:09,890
the response properly so it's kind of

00:48:08,089 --> 00:48:12,619
giving you the right HTTP error code

00:48:09,890 --> 00:48:17,239
back now all of this code can be very

00:48:12,619 --> 00:48:19,039
easily generated using your servlet but

00:48:17,239 --> 00:48:20,959
in servlet what you would do is you will

00:48:19,039 --> 00:48:22,579
take a look at the request you will find

00:48:20,959 --> 00:48:25,159
out whether it's get put post delete

00:48:22,579 --> 00:48:27,019
then you start parsing the URI you start

00:48:25,159 --> 00:48:29,149
mapping the parameters and things like

00:48:27,019 --> 00:48:31,069
that and that's where things get nasty

00:48:29,149 --> 00:48:33,019
just within a couple of annotation a

00:48:31,069 --> 00:48:34,789
couple of classes and annotations you

00:48:33,019 --> 00:48:42,380
get the whole logic available to you in

00:48:34,789 --> 00:48:43,939
a declarative way let's take a look at

00:48:42,380 --> 00:48:46,489
the last technology that I want to show

00:48:43,939 --> 00:48:51,529
here today is about the CDI or contacts

00:48:46,489 --> 00:48:55,519
and dependency injection so here so this

00:48:51,529 --> 00:48:58,099
is my test beam now in test mean let's

00:48:55,519 --> 00:49:00,529
say I have the implementation here in

00:48:58,099 --> 00:49:04,069
the business method itself let's say I

00:49:00,529 --> 00:49:06,199
want to implement this business logic in

00:49:04,069 --> 00:49:07,189
a separate interface driven class in a

00:49:06,199 --> 00:49:08,509
could could could be different

00:49:07,189 --> 00:49:10,909
implementations based upon my

00:49:08,509 --> 00:49:13,819
requirements so all I'm going to do here

00:49:10,909 --> 00:49:19,279
is I'm going to say greeting greeting

00:49:13,819 --> 00:49:23,149
and here it will say create class

00:49:19,279 --> 00:49:27,309
greeting okay now instead of class I

00:49:23,149 --> 00:49:31,579
will say public interface creating okay

00:49:27,309 --> 00:49:34,789
so why is that okay that's resolved and

00:49:31,579 --> 00:49:38,989
then to the interface I'll add a method

00:49:34,789 --> 00:49:42,049
say public string say hello that's going

00:49:38,989 --> 00:49:44,929
to take my string name okay now go back

00:49:42,049 --> 00:49:46,729
here instead of putting the

00:49:44,929 --> 00:49:49,040
implementation in here I'm going to say

00:49:46,729 --> 00:49:51,530
greeting dot say hello

00:49:49,040 --> 00:49:56,810
okay like that now I need to of course

00:49:51,530 --> 00:50:01,010
implement my reading class so that's

00:49:56,810 --> 00:50:09,020
what I do here so I say okay create a

00:50:01,010 --> 00:50:13,300
Java class call it simple greeting now

00:50:09,020 --> 00:50:17,390
the simple greeting is implementing my

00:50:13,300 --> 00:50:20,000
grading interface okay and then i will

00:50:17,390 --> 00:50:24,640
let it implement all abstract methods

00:50:20,000 --> 00:50:29,530
and here is where i will put my

00:50:24,640 --> 00:50:33,830
implementation call us hello name okay

00:50:29,530 --> 00:50:42,560
now instead of let me close some files

00:50:33,830 --> 00:50:44,740
here but we don't need now in my test

00:50:42,560 --> 00:50:47,480
bean instead of saying greeting greeting

00:50:44,740 --> 00:50:49,340
this is going to give me an interface

00:50:47,480 --> 00:50:52,010
only that's not what I want to do I want

00:50:49,340 --> 00:50:53,690
to say greeting is an interface which

00:50:52,010 --> 00:50:56,510
could have multiple implementations I

00:50:53,690 --> 00:51:01,040
want you to inject an implementation of

00:50:56,510 --> 00:51:02,960
that interface so this is how we inject

00:51:01,040 --> 00:51:04,670
we just put the annotation at inject and

00:51:02,960 --> 00:51:06,740
this is going to find an appropriate

00:51:04,670 --> 00:51:08,150
implementation well in this case there's

00:51:06,740 --> 00:51:09,770
only one implementation is going to find

00:51:08,150 --> 00:51:11,900
that implementation and inject it for me

00:51:09,770 --> 00:51:17,480
so I resolve the imports one more time

00:51:11,900 --> 00:51:21,560
and I save the page here again and I go

00:51:17,480 --> 00:51:28,340
back to the browser and back in my test

00:51:21,560 --> 00:51:32,870
servlet oh I got to put that uncomment

00:51:28,340 --> 00:51:35,240
that message again this one and let's

00:51:32,870 --> 00:51:39,290
comment this one this time okay save the

00:51:35,240 --> 00:51:41,210
page go to the browser refresh it and

00:51:39,290 --> 00:51:43,520
hello do nothing has changed so far

00:51:41,210 --> 00:51:45,350
because hey there is one interface what

00:51:43,520 --> 00:51:48,350
implementation does easily identifiable

00:51:45,350 --> 00:51:50,480
so let's get a little bit fancy so here

00:51:48,350 --> 00:51:53,990
I am going to say oh by the way let's

00:51:50,480 --> 00:51:59,440
add a new implementation and this call

00:51:53,990 --> 00:52:04,690
as smiley greeting okay and this also

00:51:59,440 --> 00:52:04,690
implements the same interface

00:52:05,499 --> 00:52:16,730
and here i am going to say hello + name

00:52:12,710 --> 00:52:19,880
+ and add a little smiley over here okay

00:52:16,730 --> 00:52:22,809
now i am not saving the file yet but i

00:52:19,880 --> 00:52:29,989
want what i want to show you here is

00:52:22,809 --> 00:52:32,569
let's lock my output so i clear the

00:52:29,989 --> 00:52:35,289
console here and i try to save the file

00:52:32,569 --> 00:52:38,299
here as soon as i try to save the file

00:52:35,289 --> 00:52:40,789
my CD I runtime which is trying to

00:52:38,299 --> 00:52:43,460
inject a unique implementation gets

00:52:40,789 --> 00:52:45,440
confused Oh simple grading smiley

00:52:43,460 --> 00:52:46,670
grading which one should I inject so

00:52:45,440 --> 00:52:48,009
that's where the confusion comes in you

00:52:46,670 --> 00:52:51,470
know I mean so you have to have a

00:52:48,009 --> 00:52:54,079
uniquely identifiable implementation of

00:52:51,470 --> 00:52:57,289
an interface well how do we make it

00:52:54,079 --> 00:53:01,249
unique we can add a qualifier for

00:52:57,289 --> 00:53:05,109
example so i could say at smiling so by

00:53:01,249 --> 00:53:05,109
default if i show you the error message

00:53:06,940 --> 00:53:13,160
it says ambiguous dependencies for type

00:53:10,670 --> 00:53:16,730
greeting and they both have the same

00:53:13,160 --> 00:53:18,470
qualifiers at default and add any that's

00:53:16,730 --> 00:53:20,210
not what we want so what we're going to

00:53:18,470 --> 00:53:22,730
do is we're going to add a new qualifier

00:53:20,210 --> 00:53:25,249
on our smiley grading which makes sure

00:53:22,730 --> 00:53:29,119
that you know this little bit more

00:53:25,249 --> 00:53:36,710
qualified so i create some boilerplate

00:53:29,119 --> 00:53:40,309
code for this qualifier and I oops i

00:53:36,710 --> 00:53:42,079
clear my console here again and i save

00:53:40,309 --> 00:53:44,569
the file so once I save the file this

00:53:42,079 --> 00:53:47,210
time now see the dependency resolution

00:53:44,569 --> 00:53:49,849
is all happening at the deployment time

00:53:47,210 --> 00:53:51,230
itself and so this again you know once

00:53:49,849 --> 00:53:55,099
again my project gets deployed correctly

00:53:51,230 --> 00:53:58,579
because now it says at inject greeting

00:53:55,099 --> 00:54:00,769
and this time it knows exactly you know

00:53:58,579 --> 00:54:03,380
there are two kinds of readings you know

00:54:00,769 --> 00:54:05,059
smiley and simple and the smiley is the

00:54:03,380 --> 00:54:08,420
one which is additionally qualified as

00:54:05,059 --> 00:54:11,869
well so it resolves it I go to my

00:54:08,420 --> 00:54:14,239
browser refresh the page they'll get the

00:54:11,869 --> 00:54:16,079
same result but now if i go to my test

00:54:14,239 --> 00:54:19,380
mean this time instead

00:54:16,079 --> 00:54:23,009
and in my test mean I could say oh by

00:54:19,380 --> 00:54:24,630
the way now I want smiley beam to be

00:54:23,009 --> 00:54:26,219
injected I just put that additional

00:54:24,630 --> 00:54:28,829
qualifier matching you know what is on

00:54:26,219 --> 00:54:33,059
the beam and what are you injecting save

00:54:28,829 --> 00:54:34,920
it here refresh it and you have your

00:54:33,059 --> 00:54:39,180
little smiley over here so that's the

00:54:34,920 --> 00:54:41,209
whole idea so in short 55 minutes I

00:54:39,180 --> 00:54:44,069
showed you exactly you know kind of

00:54:41,209 --> 00:54:49,549
basic in overview of some of the

00:54:44,069 --> 00:54:54,509
important technologies jpa servlets ejb

00:54:49,549 --> 00:54:55,559
jsf jax-rs CDI sort of the key

00:54:54,509 --> 00:54:57,839
technologies little bit of bean

00:54:55,559 --> 00:55:00,119
validation sort of the key technologies

00:54:57,839 --> 00:55:03,479
that you would typically use in a java

00:55:00,119 --> 00:55:07,229
ee 6 application now glassfish provides

00:55:03,479 --> 00:55:11,239
you a complete implementation of hawaii

00:55:07,229 --> 00:55:13,430
6 and as I said glassfish NetBeans mysql

00:55:11,239 --> 00:55:16,289
java DB you know those are excellent

00:55:13,430 --> 00:55:17,880
open-source tax to start building your

00:55:16,289 --> 00:55:20,579
simple web applications or enterprise

00:55:17,880 --> 00:55:22,949
applications so definitely encourage you

00:55:20,579 --> 00:55:26,219
to take a look at it we also have these

00:55:22,949 --> 00:55:28,680
DVDs if you care about it so on these

00:55:26,219 --> 00:55:31,259
DVDs what we have is not only virtual

00:55:28,680 --> 00:55:33,809
box but we also have virtual box images

00:55:31,259 --> 00:55:36,509
using those images you can install you

00:55:33,809 --> 00:55:39,269
know the entire you can run the entire

00:55:36,509 --> 00:55:41,940
virtual box image and in addition we

00:55:39,269 --> 00:55:44,160
have well not three we have a whole

00:55:41,940 --> 00:55:47,759
variety of hands-on labs lots of them

00:55:44,160 --> 00:55:50,369
focusing on jobs just pure Java javafx

00:55:47,759 --> 00:55:52,289
you know java ee 6 we have three hands

00:55:50,369 --> 00:55:53,880
on labs over there with detailed

00:55:52,289 --> 00:55:55,829
instructions on how to get started and

00:55:53,880 --> 00:55:57,660
what do you need and things like that so

00:55:55,829 --> 00:56:00,719
definitely encourage you to take a look

00:55:57,660 --> 00:56:02,579
at it and take a copy of it and we got a

00:56:00,719 --> 00:56:06,209
couple of t-shirts for oracle tech

00:56:02,579 --> 00:56:09,029
network and this is sort of fun of the

00:56:06,209 --> 00:56:12,779
collector's edition of Duke which you

00:56:09,029 --> 00:56:15,329
gave our Java one China typically you

00:56:12,779 --> 00:56:17,029
will have oracle logo over here and then

00:56:15,329 --> 00:56:20,279
in the back you will say made in China

00:56:17,029 --> 00:56:22,499
this is unique it's got Oracle logo up

00:56:20,279 --> 00:56:25,529
in the front in Chinese you know you

00:56:22,499 --> 00:56:29,390
don't get to see that very often so by

00:56:25,529 --> 00:56:29,390
all means take your time any questions

00:56:33,110 --> 00:56:38,180
okay I guess enjoy lunch then thank you

00:56:54,400 --> 00:57:01,020
what about this I can help you like it

00:56:56,349 --> 00:57:01,020
we have the same problem every few weeks

00:57:04,100 --> 00:57:08,500
let's get the word out

00:57:06,440 --> 00:57:08,500
you

00:58:16,330 --> 00:58:23,150
as a service leader in cloud computing

00:58:19,670 --> 00:58:24,740
all we do is hosting computing to us the

00:58:23,150 --> 00:58:26,690
cloud is just the next generation of

00:58:24,740 --> 00:58:28,640
hosting and if someone who's been in the

00:58:26,690 --> 00:58:30,590
hosting industry for 12 years we feel

00:58:28,640 --> 00:58:31,760
we're in a unique position to really

00:58:30,590 --> 00:58:33,890
help bring these two worlds together

00:58:31,760 --> 00:58:36,260
these different sets of technologies and

00:58:33,890 --> 00:58:38,540
to help companies embrace this new world

00:58:36,260 --> 00:58:40,550
and this great new tool that allows

00:58:38,540 --> 00:58:43,160
faster innovation not only is it about

00:58:40,550 --> 00:58:48,170
us being responsive and accountable but

00:58:43,160 --> 00:58:50,930
it's about us doing more for you whether

00:58:48,170 --> 00:58:54,920
less an OS that works the way that you

00:58:50,930 --> 00:58:59,080
do across all your devices HP Slate and

00:58:54,920 --> 00:58:59,080

YouTube URL: https://www.youtube.com/watch?v=qb3wVRcqHYg


