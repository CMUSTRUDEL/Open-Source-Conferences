Title: 2011 SouthEast LinuxFest - Richard Hipp - Fossilize Your Code
Publication date: 2012-03-06
Playlist: 2011 SouthEast LinuxFest
Description: 
	2011 SouthEast LinuxFest - Richard Hipp - Fossilize Your Code

This video is licensed under Creative Commons Attribution 3.0 Unported License.
Captions: 
	00:00:01,159 --> 00:00:07,290
the following presentation was recorded

00:00:03,810 --> 00:00:09,870
at the 2011 southeast linux Fest in

00:00:07,290 --> 00:00:11,370
Spartanburg South Carolina it is

00:00:09,870 --> 00:00:12,599
licensed under a Creative Commons

00:00:11,370 --> 00:00:14,460
license

00:00:12,599 --> 00:00:20,760
for more information about the south

00:00:14,460 --> 00:00:22,500
east linux fest visit www.ccltss.org the

00:00:20,760 --> 00:00:24,269
south east linux fest would like to

00:00:22,500 --> 00:00:27,570
thank the following diamond and platinum

00:00:24,269 --> 00:00:35,250
sponsors in 2011 for helping make these

00:00:27,570 --> 00:00:38,430
videos possible the one so this is

00:00:35,250 --> 00:00:41,430
Richard hip and I think the best way to

00:00:38,430 --> 00:00:43,050
describe him quickly is that pretty much

00:00:41,430 --> 00:00:44,730
everybody in this room has used free and

00:00:43,050 --> 00:00:48,840
open-source software created by Hamlet's

00:00:44,730 --> 00:00:51,620
hands up if you've used Firefox any okay

00:00:48,840 --> 00:00:55,440
we can stop right there that's everyone

00:00:51,620 --> 00:00:58,109
okay he's best known for SQLite and

00:00:55,440 --> 00:00:59,850
fossil which this talk is about and the

00:00:58,109 --> 00:01:02,520
south east linux fest issue would not be

00:00:59,850 --> 00:01:04,500
possible in fact without fossil as we

00:01:02,520 --> 00:01:07,560
use it exclusively for all of our

00:01:04,500 --> 00:01:19,560
internal organization work so without

00:01:07,560 --> 00:01:21,299
further ado mr. hip so that introduction

00:01:19,560 --> 00:01:22,710
it's been a great conference so far I've

00:01:21,299 --> 00:01:30,750
really had a good time this time I hope

00:01:22,710 --> 00:01:34,049
you guys have too so fossil a

00:01:30,750 --> 00:01:35,759
distributed version control system yet

00:01:34,049 --> 00:01:38,390
another one like we need another one

00:01:35,759 --> 00:01:42,090
yeah because this is really popular

00:01:38,390 --> 00:01:43,950
these days we've got this whole

00:01:42,090 --> 00:01:46,560
distributed version control system thing

00:01:43,950 --> 00:01:48,780
kind of got going with monotone he's

00:01:46,560 --> 00:01:50,549
anybody here heard of monotone premiere

00:01:48,780 --> 00:01:54,869
with that one a couple people have used

00:01:50,549 --> 00:01:57,000
monotone how many people have but get if

00:01:54,869 --> 00:01:58,590
you all know get right and everybody

00:01:57,000 --> 00:02:00,840
probably advise used to get maybe a

00:01:58,590 --> 00:02:03,719
little bit mercurial

00:02:00,840 --> 00:02:05,820
mercurial users Iran help bizarre who's

00:02:03,719 --> 00:02:07,350
done bizarre a lot of people use bizarre

00:02:05,820 --> 00:02:08,420
well really monsoon was kind of the

00:02:07,350 --> 00:02:11,009
first one

00:02:08,420 --> 00:02:13,140
and they they pioneered a lot of the

00:02:11,009 --> 00:02:15,930
concepts here and then Linus was

00:02:13,140 --> 00:02:17,849
actually looking at using monotone for

00:02:15,930 --> 00:02:20,220
the Linux kernel but you decide to write

00:02:17,849 --> 00:02:22,319
his own instead and then mercurial

00:02:20,220 --> 00:02:23,819
lambdas are going to follow them but do

00:02:22,319 --> 00:02:25,590
we really you know these these kind of

00:02:23,819 --> 00:02:28,830
covered things pretty well do we really

00:02:25,590 --> 00:02:33,840
need another distributed version control

00:02:28,830 --> 00:02:34,890
system well you know I develop my spend

00:02:33,840 --> 00:02:37,080
my spare time working on asking a lot

00:02:34,890 --> 00:02:38,940
and I felt like SQL I did because these

00:02:37,080 --> 00:02:44,880
other version control systems were not

00:02:38,940 --> 00:02:47,579
meeting my needs so I wrote fossile

00:02:44,880 --> 00:02:49,410
specifically to meet the needs of the

00:02:47,579 --> 00:02:53,160
SQLite development that we're doing and

00:02:49,410 --> 00:02:57,180
if other people find it you find it

00:02:53,160 --> 00:02:58,530
useful but well that's just great so but

00:02:57,180 --> 00:03:00,209
why should you pay attention to this I

00:02:58,530 --> 00:03:02,670
mean you're not you know necessarily

00:03:00,209 --> 00:03:05,040
developing with fossil why developing on

00:03:02,670 --> 00:03:06,720
SQLite why do you care well a lot of

00:03:05,040 --> 00:03:08,549
people have found that as fossil is

00:03:06,720 --> 00:03:12,420
useful for themselves and so you might

00:03:08,549 --> 00:03:13,980
be among that group I'm also going to

00:03:12,420 --> 00:03:16,859
talk about that some of the advantages

00:03:13,980 --> 00:03:18,870
of distributed version control versus

00:03:16,859 --> 00:03:21,480
the older concurrent version control

00:03:18,870 --> 00:03:23,989
that you might incur you in if you're a

00:03:21,480 --> 00:03:27,209
developer for git or mercurial or

00:03:23,989 --> 00:03:29,250
bizarre or monotone maybe you can steal

00:03:27,209 --> 00:03:30,720
some my ideas because fossil has some

00:03:29,250 --> 00:03:33,690
concepts that none of these others have

00:03:30,720 --> 00:03:35,489
in them and finally it's sort of a

00:03:33,690 --> 00:03:37,680
cottage industry to disparage any

00:03:35,489 --> 00:03:42,680
distributed version control system which

00:03:37,680 --> 00:03:46,230
is not yet it has a really really

00:03:42,680 --> 00:03:48,989
devoted fan club and anything that's not

00:03:46,230 --> 00:03:52,290
yet is deemed as bad so if you want to

00:03:48,989 --> 00:03:54,630
find some some some facts with by which

00:03:52,290 --> 00:03:57,470
you can disparage fossil in your blog

00:03:54,630 --> 00:04:00,389
then this is a good place to come so

00:03:57,470 --> 00:04:01,650
right now the version control systems

00:04:00,389 --> 00:04:02,760
are kind of divided into these two

00:04:01,650 --> 00:04:04,139
categories which I'm going to call

00:04:02,760 --> 00:04:06,630
concurrent and distributed and

00:04:04,139 --> 00:04:08,310
concurrent it's your older CVS and

00:04:06,630 --> 00:04:10,470
subversion and the distributed or the

00:04:08,310 --> 00:04:13,950
new ones get mercurial bizarre amount of

00:04:10,470 --> 00:04:15,720
time now there are other categories as

00:04:13,950 --> 00:04:21,450
well I mean old-timers like me can

00:04:15,720 --> 00:04:25,110
remember the systems like se CS and all

00:04:21,450 --> 00:04:26,670
yes which were not even concurrent okay

00:04:25,110 --> 00:04:28,260
that means they don't you could only one

00:04:26,670 --> 00:04:31,230
person could be editing at a time they

00:04:28,260 --> 00:04:34,620
were really so people these days are

00:04:31,230 --> 00:04:36,330
speak very disparagingly of CBS which

00:04:34,620 --> 00:04:37,950
was kind of the first concurrent version

00:04:36,330 --> 00:04:40,940
system and in fact that's what CBS

00:04:37,950 --> 00:04:43,380
stands for concurrent versioning system

00:04:40,940 --> 00:04:46,110
but if you've had to use the prior

00:04:43,380 --> 00:04:47,580
systems you know if CBS does have its

00:04:46,110 --> 00:04:48,840
issues and it does have weaknesses

00:04:47,580 --> 00:04:50,070
especially compared to the modern ones

00:04:48,840 --> 00:04:52,620
but if you had to use the ones that came

00:04:50,070 --> 00:04:54,960
before you can never bring yourself to

00:04:52,620 --> 00:04:58,220
say anything bad about CBS it was such a

00:04:54,960 --> 00:05:01,800
wonderful thing when it first came out

00:04:58,220 --> 00:05:04,050
Chris the world has moved on now but but

00:05:01,800 --> 00:05:05,880
now we're kind of focused between this

00:05:04,050 --> 00:05:07,620
this big divide here between concurrent

00:05:05,880 --> 00:05:09,480
and distributed and the big difference

00:05:07,620 --> 00:05:11,490
here is that with a concurrent system

00:05:09,480 --> 00:05:13,740
you've got a central repository a master

00:05:11,490 --> 00:05:16,410
repository that's on the server that has

00:05:13,740 --> 00:05:17,910
everything and then people check out

00:05:16,410 --> 00:05:21,210
just the part they're working on

00:05:17,910 --> 00:05:25,320
whereas with distributed everybody has a

00:05:21,210 --> 00:05:27,770
complete copy of the entire project

00:05:25,320 --> 00:05:30,830
history they're on their local machine

00:05:27,770 --> 00:05:33,810
well this gives you some advantages

00:05:30,830 --> 00:05:35,910
among them is that with distributed you

00:05:33,810 --> 00:05:37,560
kind of get this automatic backup scheme

00:05:35,910 --> 00:05:40,200
because everybody has the complete copy

00:05:37,560 --> 00:05:42,240
if you lose one machine because of a

00:05:40,200 --> 00:05:44,130
disaster you've still got other machines

00:05:42,240 --> 00:05:46,050
with all your developers and and they

00:05:44,130 --> 00:05:48,090
can they can recreate the entire history

00:05:46,050 --> 00:05:49,650
from that because everything is local

00:05:48,090 --> 00:05:51,780
you're not doing as much network traffic

00:05:49,650 --> 00:05:55,440
and a lot of the operations were run a

00:05:51,780 --> 00:05:59,490
lot faster you distributed works

00:05:55,440 --> 00:06:01,470
disconnected I can do useful work with

00:05:59,490 --> 00:06:04,590
the distributed file system when I'm on

00:06:01,470 --> 00:06:06,330
an airplane or winning or when I'm in a

00:06:04,590 --> 00:06:11,580
place where I don't have connectivity

00:06:06,330 --> 00:06:13,950
which is a lot of places so that's

00:06:11,580 --> 00:06:16,740
that's kind of the the concept we see

00:06:13,950 --> 00:06:18,560
here to build this further we've got a

00:06:16,740 --> 00:06:21,030
picture here of Bob and Alice and

00:06:18,560 --> 00:06:22,350
they're working on a project and you're

00:06:21,030 --> 00:06:24,210
using a distributed version control

00:06:22,350 --> 00:06:27,270
system and this could be get mercurial

00:06:24,210 --> 00:06:29,160
fossil whatever and I've got this little

00:06:27,270 --> 00:06:32,700
box here which kind of represents the

00:06:29,160 --> 00:06:34,200
repository and that's all of their

00:06:32,700 --> 00:06:36,240
complete files that every

00:06:34,200 --> 00:06:38,340
everything about the whole project going

00:06:36,240 --> 00:06:39,990
back to say 1020 years it's all in that

00:06:38,340 --> 00:06:43,160
one little thing they all have their own

00:06:39,990 --> 00:06:48,320
private copy and that means that if

00:06:43,160 --> 00:06:50,550
Alice gets disconnected from the network

00:06:48,320 --> 00:06:53,520
she can keep working now if you're using

00:06:50,550 --> 00:06:56,010
some subversion or CVS and you get

00:06:53,520 --> 00:06:57,150
disconnected like this you can keep

00:06:56,010 --> 00:06:58,590
working on the files that you happen to

00:06:57,150 --> 00:07:00,750
have checked out but you can't check in

00:06:58,590 --> 00:07:02,250
stuff you can't bring in old stuff you

00:07:00,750 --> 00:07:04,140
can't do discs with some sort of

00:07:02,250 --> 00:07:04,680
historical versions you're kind of cut

00:07:04,140 --> 00:07:06,240
off

00:07:04,680 --> 00:07:08,010
you're kind of blocked from working but

00:07:06,240 --> 00:07:10,200
since you have everything locally Alice

00:07:08,010 --> 00:07:12,960
could keep Riedel working checking in

00:07:10,200 --> 00:07:14,610
new changes and and that sort of thing

00:07:12,960 --> 00:07:18,600
even though she's disconnected and then

00:07:14,610 --> 00:07:22,080
later on her connection gets restored

00:07:18,600 --> 00:07:24,660
and she can synchronize her her changes

00:07:22,080 --> 00:07:27,420
with one of the servers in her cloud and

00:07:24,660 --> 00:07:28,830
then that server would synchronize with

00:07:27,420 --> 00:07:30,540
the other servers and then eventually

00:07:28,830 --> 00:07:32,820
that would get down to Bob and everybody

00:07:30,540 --> 00:07:35,940
gets all synced up after the fact

00:07:32,820 --> 00:07:38,790
this is a very useful concept this is

00:07:35,940 --> 00:07:40,710
the disconnected operation now the other

00:07:38,790 --> 00:07:43,860
big thing I talked about was the

00:07:40,710 --> 00:07:46,500
necessity of backups I mean machines are

00:07:43,860 --> 00:07:47,160
increasingly reliable I mean two decades

00:07:46,500 --> 00:07:49,950
ago

00:07:47,160 --> 00:07:53,790
you always had at least one machine

00:07:49,950 --> 00:07:56,430
crash and lose data every quarter at

00:07:53,790 --> 00:07:57,690
least one okay and now they're a lot

00:07:56,430 --> 00:08:01,250
more reliable but you still have

00:07:57,690 --> 00:08:03,480
machines that are failing and this is

00:08:01,250 --> 00:08:05,910
you know you talk about backups and

00:08:03,480 --> 00:08:07,530
things sometimes the backups don't work

00:08:05,910 --> 00:08:10,950
like you want here this is an actual

00:08:07,530 --> 00:08:15,810
news blurb from Linux weekly news two

00:08:10,950 --> 00:08:18,530
years ago this is the the Savannah

00:08:15,810 --> 00:08:21,720
project they were doing regular backups

00:08:18,530 --> 00:08:23,340
but the raid array was going bad while

00:08:21,720 --> 00:08:27,830
they were backing up and so they lost

00:08:23,340 --> 00:08:31,830
all kinds of stuff here out of their

00:08:27,830 --> 00:08:36,120
version control system two years ago and

00:08:31,830 --> 00:08:40,020
here's another news blur but I pulled

00:08:36,120 --> 00:08:41,760
off of the firebird SQL site a year and

00:08:40,020 --> 00:08:43,710
a half ago where they had a similar

00:08:41,760 --> 00:08:45,990
situation they had a network attached

00:08:43,710 --> 00:08:47,470
storage machine and they were doing

00:08:45,990 --> 00:08:49,120
their backups writing everything but

00:08:47,470 --> 00:08:50,800
the machine was slowly failing without

00:08:49,120 --> 00:08:54,520
them realizing it they were backing up

00:08:50,800 --> 00:08:57,040
faulty data and so they both lost a lot

00:08:54,520 --> 00:09:00,070
of stuff it was a big problem and this

00:08:57,040 --> 00:09:01,630
sort of thing still happened so now it

00:09:00,070 --> 00:09:03,460
but if you have a distributed version

00:09:01,630 --> 00:09:05,500
control system and once again I'm

00:09:03,460 --> 00:09:08,560
talking here about all of them get

00:09:05,500 --> 00:09:11,590
mercurial monitor and bizarre fossil

00:09:08,560 --> 00:09:13,540
they all work this way if you you lose

00:09:11,590 --> 00:09:15,250
the machine and you're in your system

00:09:13,540 --> 00:09:19,120
you just replace that machine with a

00:09:15,250 --> 00:09:21,490
brand new one and then it automatically

00:09:19,120 --> 00:09:23,290
synchronizes and you're right and

00:09:21,490 --> 00:09:26,080
everything's back to normal there's no

00:09:23,290 --> 00:09:27,850
need for this there's no need for a

00:09:26,080 --> 00:09:29,140
system administrator to run backups

00:09:27,850 --> 00:09:31,720
there's no need for a backup policy

00:09:29,140 --> 00:09:33,790
there's no all that hassle you don't

00:09:31,720 --> 00:09:35,770
need to mess with any of that I'm gonna

00:09:33,790 --> 00:09:38,490
talk more about this later on the key

00:09:35,770 --> 00:09:40,480
features though that are part of

00:09:38,490 --> 00:09:42,340
distributed version control that I

00:09:40,480 --> 00:09:44,800
really like are the automatic backup and

00:09:42,340 --> 00:09:46,390
the disconnected operation you're gonna

00:09:44,800 --> 00:09:48,640
hear me coming back to this again and

00:09:46,390 --> 00:09:51,070
again so if you're using subversion

00:09:48,640 --> 00:09:52,810
you're not getting this but you're gonna

00:09:51,070 --> 00:09:56,440
want it now the other thing that you

00:09:52,810 --> 00:09:59,590
hear people talk about the difference

00:09:56,440 --> 00:10:01,840
between distributed versus concurrent

00:09:59,590 --> 00:10:04,390
version systems is this whole concept of

00:10:01,840 --> 00:10:07,390
the cathedral versus the bazaar this is

00:10:04,390 --> 00:10:10,150
going back to eric Redmon's paper about

00:10:07,390 --> 00:10:12,790
you know the development models and

00:10:10,150 --> 00:10:15,670
people kind of think that well the

00:10:12,790 --> 00:10:16,870
concurrent versioning system CVS

00:10:15,670 --> 00:10:18,730
subversion because they've got the

00:10:16,870 --> 00:10:20,560
central repository and it's centrally

00:10:18,730 --> 00:10:25,200
planned that's sort of the cathedral

00:10:20,560 --> 00:10:27,130
model of development and but the

00:10:25,200 --> 00:10:29,080
distributed version control because it's

00:10:27,130 --> 00:10:31,510
kind of chaotic and stuff is all over

00:10:29,080 --> 00:10:34,900
the place that the bazaar method of

00:10:31,510 --> 00:10:37,360
development now it's the implicit

00:10:34,900 --> 00:10:39,670
statement that bazaars is better and and

00:10:37,360 --> 00:10:42,850
and I don't necessarily agree with that

00:10:39,670 --> 00:10:46,060
I mean I don't the bazaar is not good

00:10:42,850 --> 00:10:48,070
for in every circumstance in particular

00:10:46,060 --> 00:10:51,910
I don't want to be using the bazaar

00:10:48,070 --> 00:10:54,370
model as eric redmond calls it when I'm

00:10:51,910 --> 00:10:58,630
doing SQL I because especially with

00:10:54,370 --> 00:11:00,730
SQLite with many applications that are

00:10:58,630 --> 00:11:02,620
like on your cell phone or something

00:11:00,730 --> 00:11:04,930
if there's a bug in the software any

00:11:02,620 --> 00:11:06,820
crashes no problem it automatically

00:11:04,930 --> 00:11:10,120
reboots and it comes back up and the

00:11:06,820 --> 00:11:14,050
fresh copy is gonna run okay but with

00:11:10,120 --> 00:11:16,329
the storage system a bug because the

00:11:14,050 --> 00:11:17,589
storage system is remembering things if

00:11:16,329 --> 00:11:20,709
there's a bug there it's going to

00:11:17,589 --> 00:11:22,899
remember the mistake and you can't just

00:11:20,709 --> 00:11:26,290
fix the problem by rebooting because it

00:11:22,899 --> 00:11:30,070
remembers and so quality control is

00:11:26,290 --> 00:11:32,230
really really important to us and the

00:11:30,070 --> 00:11:35,339
bazaar model doesn't really work we need

00:11:32,230 --> 00:11:37,630
we need to be really accountable and

00:11:35,339 --> 00:11:39,850
we're also in the public domain which

00:11:37,630 --> 00:11:43,300
means that we have to be able to track

00:11:39,850 --> 00:11:45,010
every every single byte of code to know

00:11:43,300 --> 00:11:48,670
where it came from so that we don't

00:11:45,010 --> 00:11:52,240
accidentally introduce code that is

00:11:48,670 --> 00:11:53,829
under copyright and actually that's

00:11:52,240 --> 00:11:57,820
where our revenue comes from for our

00:11:53,829 --> 00:12:00,820
company is that we sell contracts to big

00:11:57,820 --> 00:12:02,440
users of SQLite that just essentially

00:12:00,820 --> 00:12:04,990
guarantee that we're not going to let

00:12:02,440 --> 00:12:06,339
any contaminated code get into the

00:12:04,990 --> 00:12:07,329
product so that we can guarantee that

00:12:06,339 --> 00:12:10,649
it's going to continue to be in the

00:12:07,329 --> 00:12:12,970
public domain we sort of sell of

00:12:10,649 --> 00:12:16,839
copyright liability insurance you might

00:12:12,970 --> 00:12:18,250
say so am I thinking once you know I

00:12:16,839 --> 00:12:19,569
really like the automated backup I

00:12:18,250 --> 00:12:23,250
really like to just connected operation

00:12:19,569 --> 00:12:25,990
why can't I do that and still follow a

00:12:23,250 --> 00:12:27,519
cathedral type development model why do

00:12:25,990 --> 00:12:29,560
I have to switch to Bazaar in order to

00:12:27,519 --> 00:12:31,449
have these really cool features of the

00:12:29,560 --> 00:12:34,329
new distributed version control systems

00:12:31,449 --> 00:12:36,730
and so that it's sort of the genesis of

00:12:34,329 --> 00:12:38,709
the whole idea behind fossil which I

00:12:36,730 --> 00:12:42,850
started working on around 2005 but the

00:12:38,709 --> 00:12:44,019
same time it came out but I was working

00:12:42,850 --> 00:12:46,089
on it kind of slowly because I had some

00:12:44,019 --> 00:12:51,459
other things going on and possibly came

00:12:46,089 --> 00:12:53,199
self-hosting almost four years ago we

00:12:51,459 --> 00:12:55,240
immediately put the SQLite documentation

00:12:53,199 --> 00:12:58,269
on and it's been there three and half

00:12:55,240 --> 00:13:02,110
years SQLite got cut over about two

00:12:58,269 --> 00:13:04,680
years ago some other projects have come

00:13:02,110 --> 00:13:06,790
before the big project tickle TK adopted

00:13:04,680 --> 00:13:09,430
fossil as their distributed version

00:13:06,790 --> 00:13:11,649
control system earlier this year they

00:13:09,430 --> 00:13:13,700
were forum they've been on CVS forever

00:13:11,649 --> 00:13:17,360
and ever they were using SourceForge

00:13:13,700 --> 00:13:19,280
and back at the beginning of the year

00:13:17,360 --> 00:13:21,980
SourceForge got hacked I don't like to

00:13:19,280 --> 00:13:26,120
remember this story there was a big

00:13:21,980 --> 00:13:30,140
hacking event and they shut off CBS just

00:13:26,120 --> 00:13:33,050
shut it off cold and tickle TK was sort

00:13:30,140 --> 00:13:34,880
of left in a lurch and they had zero

00:13:33,050 --> 00:13:36,050
development for a month while they were

00:13:34,880 --> 00:13:38,270
scrambling around trying to figure out

00:13:36,050 --> 00:13:40,220
what to do and there was a bit there was

00:13:38,270 --> 00:13:42,710
a lot of contentious discussion and I'm

00:13:40,220 --> 00:13:45,980
used to be active in the tickle TK

00:13:42,710 --> 00:13:48,410
community actually sqlite we it's a it's

00:13:45,980 --> 00:13:52,850
a SQLite is a tickle TK extension that

00:13:48,410 --> 00:13:56,690
escaped into the wild but I'm sort of an

00:13:52,850 --> 00:13:59,180
alumnus of that community now but but

00:13:56,690 --> 00:14:00,710
they asked me to look at it and I

00:13:59,180 --> 00:14:03,650
supported them with it and we made that

00:14:00,710 --> 00:14:06,050
cut over just this past year so here's

00:14:03,650 --> 00:14:07,460
some things about fossil that make it

00:14:06,050 --> 00:14:07,820
different from what you might have seen

00:14:07,460 --> 00:14:10,130
before

00:14:07,820 --> 00:14:14,510
well fossil isn't just version control

00:14:10,130 --> 00:14:16,670
it also gives you a wiki it also gives

00:14:14,510 --> 00:14:20,510
you bug tracking it also gives you blog

00:14:16,670 --> 00:14:24,530
features an online documentation and all

00:14:20,510 --> 00:14:27,380
of this is versioned just like your code

00:14:24,530 --> 00:14:29,300
and it's also distributed so you can

00:14:27,380 --> 00:14:31,300
like work on your you can file bug

00:14:29,300 --> 00:14:34,040
reports while you're on the airplane and

00:14:31,300 --> 00:14:36,710
then when you land and sync up with your

00:14:34,040 --> 00:14:38,510
co-workers back at the office does bug

00:14:36,710 --> 00:14:41,090
reports will appear on their systems or

00:14:38,510 --> 00:14:43,520
you can make changes in notations on

00:14:41,090 --> 00:14:45,680
buglar but oh I fix this one I fix this

00:14:43,520 --> 00:14:49,490
one I was all over the Atlantic okay and

00:14:45,680 --> 00:14:51,530
and then when you land and sync up this

00:14:49,490 --> 00:14:54,730
will automatically go in and and and

00:14:51,530 --> 00:14:54,730
become part of everybody else's

00:14:56,020 --> 00:15:03,890
repository in fact the fossil website

00:15:00,230 --> 00:15:07,540
which you can visit it w- fossil sem dot

00:15:03,890 --> 00:15:11,750
o-r-g is just an instance of fossil

00:15:07,540 --> 00:15:13,400
everything you see on this website with

00:15:11,750 --> 00:15:15,200
the exception of the download page which

00:15:13,400 --> 00:15:16,850
is a separate thing but everything on

00:15:15,200 --> 00:15:20,750
this website all the documentation all

00:15:16,850 --> 00:15:23,810
the links is just fossil if you cloned a

00:15:20,750 --> 00:15:26,390
copy of fossil and its self hosting

00:15:23,810 --> 00:15:27,000
repository you don't just get the source

00:15:26,390 --> 00:15:30,990
code to follow

00:15:27,000 --> 00:15:32,880
so you get the whole website and I'll

00:15:30,990 --> 00:15:35,360
show you look if we have time I'll

00:15:32,880 --> 00:15:37,470
demonstrate some of this for you so

00:15:35,360 --> 00:15:40,590
another way that I like to think about

00:15:37,470 --> 00:15:42,300
fossil is its github in a box who's

00:15:40,590 --> 00:15:45,540
familiar with github who has github

00:15:42,300 --> 00:15:47,100
projects yeah a few of you do now and of

00:15:45,540 --> 00:15:48,510
course I get a lot of pushback with this

00:15:47,100 --> 00:15:50,550
claim because people say well the thing

00:15:48,510 --> 00:15:54,630
with github is the social community yada

00:15:50,550 --> 00:15:57,930
yada yada well you have that but I'm not

00:15:54,630 --> 00:15:59,460
gonna argue with that but really fossil

00:15:57,930 --> 00:16:03,030
is giving you a lot of the features that

00:15:59,460 --> 00:16:04,440
github provides but it's kind of built

00:16:03,030 --> 00:16:06,210
in it's kind of integrated so that you

00:16:04,440 --> 00:16:08,120
can kind of set up your own private

00:16:06,210 --> 00:16:11,430
github now of course you could go to

00:16:08,120 --> 00:16:12,780
github and pay them $7 a month and get

00:16:11,430 --> 00:16:14,310
your own private github and then it'll

00:16:12,780 --> 00:16:16,650
be hosted on you know their servers but

00:16:14,310 --> 00:16:22,080
or you could set it up yourself by using

00:16:16,650 --> 00:16:27,540
fossil we've got three fossil

00:16:22,080 --> 00:16:29,550
repositories for SQLite out there sort

00:16:27,540 --> 00:16:32,390
of our personal cloud now these are the

00:16:29,550 --> 00:16:34,380
ones that I control I've got two and

00:16:32,390 --> 00:16:36,180
part of it you know the part of the

00:16:34,380 --> 00:16:38,310
company's paying is to support SQLite

00:16:36,180 --> 00:16:40,370
one of the contractual requirements we

00:16:38,310 --> 00:16:42,510
have is that we have to keep

00:16:40,370 --> 00:16:44,280
geographically dispersed copies of the

00:16:42,510 --> 00:16:46,290
code for a disaster recovery type

00:16:44,280 --> 00:16:48,930
situation so I have three different

00:16:46,290 --> 00:16:51,450
machines a one of them Fremont with

00:16:48,930 --> 00:16:53,640
hurricane electric and two limos Lee

00:16:51,450 --> 00:16:55,560
nodes right outside the door here I've

00:16:53,640 --> 00:16:57,330
got a Linode in Dallas and another one

00:16:55,560 --> 00:17:01,410
in New Jersey right across the river

00:16:57,330 --> 00:17:03,900
from New York City and there's fossil

00:17:01,410 --> 00:17:05,430
instances of SQLite running on all three

00:17:03,900 --> 00:17:09,329
of these and they automatically

00:17:05,430 --> 00:17:10,589
synchronize so you can push or pull from

00:17:09,329 --> 00:17:12,329
any of those instances and they'll

00:17:10,589 --> 00:17:14,699
automatically kind of link up with the

00:17:12,329 --> 00:17:16,319
other guys and we've got you know all

00:17:14,699 --> 00:17:18,300
the documentation all the wiki all the

00:17:16,319 --> 00:17:21,209
ticket tracking that all automatically

00:17:18,300 --> 00:17:23,970
synchronizes to so if an earthquake

00:17:21,209 --> 00:17:27,030
takes out Fremont you know we're cool

00:17:23,970 --> 00:17:29,970
with that if Texas finally decides this

00:17:27,030 --> 00:17:31,800
is if Texas finally decides to secede

00:17:29,970 --> 00:17:33,240
from the union and you cuts all the

00:17:31,800 --> 00:17:34,740
internet connectivity well we're cool

00:17:33,240 --> 00:17:37,670
with that too I mean we got some we got

00:17:34,740 --> 00:17:37,670
some redundancy here

00:17:38,930 --> 00:17:44,370
so like you say we've been using

00:17:42,200 --> 00:17:46,890
hurricane electric and Linode for a long

00:17:44,370 --> 00:17:48,450
time I'm going to show you just how

00:17:46,890 --> 00:17:49,770
simple it is to set up with hurricane

00:17:48,450 --> 00:17:52,370
elect but the hurricane Electric account

00:17:49,770 --> 00:17:55,800
is a $10 much shared internet hosting

00:17:52,370 --> 00:17:58,140
service where we just have CGI we don't

00:17:55,800 --> 00:17:59,760
have full shell access well we've got a

00:17:58,140 --> 00:18:03,510
shell but we don't have root access we

00:17:59,760 --> 00:18:06,120
can't run services we can't run demons

00:18:03,510 --> 00:18:08,400
on that machine all we have a CGI so to

00:18:06,120 --> 00:18:10,950
setup fossil on Hurricane electric all

00:18:08,400 --> 00:18:14,250
you do is well first you have to put

00:18:10,950 --> 00:18:15,960
your repository there step one step two

00:18:14,250 --> 00:18:17,760
is you have to have the fossil binary

00:18:15,960 --> 00:18:20,070
there and you can either compile it

00:18:17,760 --> 00:18:21,630
yourself they're on their machine or you

00:18:20,070 --> 00:18:23,910
can download the bond here and just put

00:18:21,630 --> 00:18:26,190
it in your bin and then you have to

00:18:23,910 --> 00:18:27,510
enable CGI this might already it might

00:18:26,190 --> 00:18:30,510
already be enabled for you and so you

00:18:27,510 --> 00:18:33,090
can skip step three but here's the two

00:18:30,510 --> 00:18:35,730
line thing a two line script in Apache

00:18:33,090 --> 00:18:38,010
to turn CGI on and then you create this

00:18:35,730 --> 00:18:40,230
CGI script shown on these two lines down

00:18:38,010 --> 00:18:43,770
at the bottom you've got a shebang which

00:18:40,230 --> 00:18:45,450
is just the fossil binary and then

00:18:43,770 --> 00:18:47,790
you've got a one line thing that shows

00:18:45,450 --> 00:18:51,900
you the file name which is your

00:18:47,790 --> 00:18:54,750
repository okay now you at this point

00:18:51,900 --> 00:18:56,160
you can point your web server there and

00:18:54,750 --> 00:19:00,540
you've got a complete web site up and

00:18:56,160 --> 00:19:05,880
running ready to go now for the

00:19:00,540 --> 00:19:07,920
automatic synchronization a simple cron

00:19:05,880 --> 00:19:10,080
job takes care of this I do a little

00:19:07,920 --> 00:19:12,870
shell script and it just runs fossil and

00:19:10,080 --> 00:19:15,930
says sync with the other guys and then I

00:19:12,870 --> 00:19:18,840
set up a crontab that I've got mine set

00:19:15,930 --> 00:19:20,220
to think every once every three hours it

00:19:18,840 --> 00:19:22,680
does this think you can do it every 10

00:19:20,220 --> 00:19:24,450
minutes if you want to three hours is we

00:19:22,680 --> 00:19:26,400
only do about three chickens a day on

00:19:24,450 --> 00:19:28,830
the SQLite and so that's that's plenty

00:19:26,400 --> 00:19:31,470
at 43 minutes past the hour every third

00:19:28,830 --> 00:19:34,170
hour we synchronize all of the machines

00:19:31,470 --> 00:19:35,970
like this now so this is a really really

00:19:34,170 --> 00:19:38,250
simple setup and this is given a version

00:19:35,970 --> 00:19:41,430
control tickets wiki documentation a

00:19:38,250 --> 00:19:45,510
whole bit oh sure you can do the same

00:19:41,430 --> 00:19:47,010
thing with mercurial or subversion you

00:19:45,510 --> 00:19:51,370
know you can pull in all these little

00:19:47,010 --> 00:19:53,050
extension on subversion get or make sure

00:19:51,370 --> 00:19:54,370
you can pull on all these extensions

00:19:53,050 --> 00:19:57,270
that they have and they will do they

00:19:54,370 --> 00:19:59,230
will let you do all this stuff too but

00:19:57,270 --> 00:20:01,930
you know you've got to have a bunch of

00:19:59,230 --> 00:20:03,040
Perl scripts and a bunch of Python and

00:20:01,930 --> 00:20:06,250
stuff to kind of glue it all together

00:20:03,040 --> 00:20:07,930
and the point with fossil is that you

00:20:06,250 --> 00:20:09,670
kind of it's it's a toaster each you

00:20:07,930 --> 00:20:10,390
just you plop this one binary there and

00:20:09,670 --> 00:20:14,620
that's all you need there are no

00:20:10,390 --> 00:20:18,130
dependencies it makes it a lot easier to

00:20:14,620 --> 00:20:21,220
administer the other which leads me to

00:20:18,130 --> 00:20:26,440
the next distinctive feature of a fossil

00:20:21,220 --> 00:20:28,410
which is it's a standalone binary I I've

00:20:26,440 --> 00:20:31,540
been listening to a lot of people talk

00:20:28,410 --> 00:20:33,670
this week and a big issue people have is

00:20:31,540 --> 00:20:35,800
installers and making sure people are

00:20:33,670 --> 00:20:37,780
coming up to me and say oh yeah well

00:20:35,800 --> 00:20:39,880
what what my company does we build this

00:20:37,780 --> 00:20:41,350
thing that makes sure that all of the

00:20:39,880 --> 00:20:45,550
dependencies are satisfied when they

00:20:41,350 --> 00:20:47,290
install you or if I was talking to mad

00:20:45,550 --> 00:20:50,470
dog he was talking about how we need

00:20:47,290 --> 00:20:52,090
support because people might install an

00:20:50,470 --> 00:20:54,520
application and it messes up another

00:20:52,090 --> 00:20:56,020
application because it overrode a dll or

00:20:54,520 --> 00:20:59,200
whatever and this gets really

00:20:56,020 --> 00:21:02,590
complicated well with fossil it's not

00:20:59,200 --> 00:21:04,150
it's just a file okay you download the

00:21:02,590 --> 00:21:06,130
file you're the freaking pub pioneer you

00:21:04,150 --> 00:21:09,940
put it on your path and you're done

00:21:06,130 --> 00:21:11,680
if your security minded there are no

00:21:09,940 --> 00:21:13,450
dependencies if you've statically linked

00:21:11,680 --> 00:21:15,970
it you can put the fossil binary in a

00:21:13,450 --> 00:21:17,590
change or jail and it runs you don't

00:21:15,970 --> 00:21:19,150
have to copy all of your shared

00:21:17,590 --> 00:21:20,740
libraries into the chain George L's ago

00:21:19,150 --> 00:21:22,600
you don't have to have Python on your

00:21:20,740 --> 00:21:24,130
system you don't have to have diff you

00:21:22,600 --> 00:21:27,040
don't have to have patch you don't have

00:21:24,130 --> 00:21:29,080
to have Java you don't have to have any

00:21:27,040 --> 00:21:30,700
of these other utilities everything is

00:21:29,080 --> 00:21:33,630
built into that one binary which is

00:21:30,700 --> 00:21:36,400
about half a megabyte

00:21:33,630 --> 00:21:39,280
so it's trivial to install update and

00:21:36,400 --> 00:21:40,780
uninstall if you're gonna try it out

00:21:39,280 --> 00:21:42,690
download the binary put it on your path

00:21:40,780 --> 00:21:46,000
oh I hate this thing

00:21:42,690 --> 00:21:47,470
REM and it's out of there and you also

00:21:46,000 --> 00:21:49,600
don't need to be have administrator

00:21:47,470 --> 00:21:52,300
privileges to install it so here's the

00:21:49,600 --> 00:21:53,440
website you can go there if you have

00:21:52,300 --> 00:21:55,120
your laptop open now you can just

00:21:53,440 --> 00:21:58,390
download one of these things and try it

00:21:55,120 --> 00:22:01,330
we have builds out for Linux Mac open

00:21:58,390 --> 00:22:04,080
BSD and windows or you can get the

00:22:01,330 --> 00:22:06,440
source tarball and do it yourself

00:22:04,080 --> 00:22:08,519
kind of plays into our whole concept of

00:22:06,440 --> 00:22:10,559
we want it to be easy to use because I

00:22:08,519 --> 00:22:14,640
hate doing system administration stuff I

00:22:10,559 --> 00:22:17,669
hate that I want to just and you know at

00:22:14,640 --> 00:22:19,350
this point I talked about SQL I is a

00:22:17,669 --> 00:22:22,289
wrote possum for risk your life I've

00:22:19,350 --> 00:22:24,899
actually got dozens of projects that I'm

00:22:22,289 --> 00:22:26,159
tracking using fossil right now and I

00:22:24,899 --> 00:22:29,039
don't want to have to go around and

00:22:26,159 --> 00:22:32,429
duplicate a huge pile of Perl Python

00:22:29,039 --> 00:22:34,620
tickle scripts whatever and get a setup

00:22:32,429 --> 00:22:38,880
going on each machine that's one of my

00:22:34,620 --> 00:22:42,210
servers next feature of fossil is kind

00:22:38,880 --> 00:22:42,990
of web oriented that's the the user

00:22:42,210 --> 00:22:45,570
interface

00:22:42,990 --> 00:22:46,889
there's once you get fossil install and

00:22:45,570 --> 00:22:48,899
I'll talk more about this in a minute

00:22:46,889 --> 00:22:52,139
you type fossil UI and it brings up your

00:22:48,899 --> 00:22:53,549
web browser you're your preferred web

00:22:52,139 --> 00:22:54,899
browser and gives you a nice little user

00:22:53,549 --> 00:22:57,690
interface there that you can just click

00:22:54,899 --> 00:22:59,610
on and surf the history and get a lot of

00:22:57,690 --> 00:23:01,679
information about that it's got a web

00:22:59,610 --> 00:23:04,889
server built into this little standalone

00:23:01,679 --> 00:23:06,750
binary it's ready to use with CGI if

00:23:04,889 --> 00:23:09,210
your server doesn't happen to have a web

00:23:06,750 --> 00:23:11,580
server on it that supports CGI you can

00:23:09,210 --> 00:23:14,490
configure I NAT D or X inot D or

00:23:11,580 --> 00:23:16,889
whatever the latest thing is for you

00:23:14,490 --> 00:23:18,750
know dispatching processes when an

00:23:16,889 --> 00:23:20,519
inbound tcp/ip connection comes in and

00:23:18,750 --> 00:23:23,070
it'll just run it directly it's got a

00:23:20,519 --> 00:23:25,110
very rich interface with the timeline it

00:23:23,070 --> 00:23:30,720
gives you situational awareness here's a

00:23:25,110 --> 00:23:34,559
screenshot of the what you would

00:23:30,720 --> 00:23:36,480
typically see when you do fossil UI and

00:23:34,559 --> 00:23:38,429
this is something cold and I actually

00:23:36,480 --> 00:23:40,679
zoomed in on this in the next slide

00:23:38,429 --> 00:23:42,740
because I had made the assumption that

00:23:40,679 --> 00:23:46,529
at these talks they would be giving us a

00:23:42,740 --> 00:23:48,179
projector that had 640 by 480 resolution

00:23:46,529 --> 00:23:49,950
and I thought you wouldn't be able to

00:23:48,179 --> 00:23:53,159
read that previous one but this is

00:23:49,950 --> 00:23:54,659
actually a really nice projector so but

00:23:53,159 --> 00:23:56,340
you can zoom in and you can kind of see

00:23:54,659 --> 00:24:03,450
the kind of information that you would

00:23:56,340 --> 00:24:06,269
see in a typical repository this is a

00:24:03,450 --> 00:24:08,970
shot from the SQLite repository we've

00:24:06,269 --> 00:24:12,120
got a change here on this is from last

00:24:08,970 --> 00:24:14,490
summer on July 7th there was a check in

00:24:12,120 --> 00:24:15,720
you know strengthen the assert on malloc

00:24:14,490 --> 00:24:16,909
you know and there's another check in

00:24:15,720 --> 00:24:20,840
that was derived from that

00:24:16,909 --> 00:24:23,239
here it 22:26 at 10 o'clock at night

00:24:20,840 --> 00:24:25,279
these are these because my development

00:24:23,239 --> 00:24:27,229
team for SQLite is international people

00:24:25,279 --> 00:24:31,639
around the world all of these times are

00:24:27,229 --> 00:24:33,950
GMT so it's not really that late but at

00:24:31,639 --> 00:24:35,389
that point I we branched off and and

00:24:33,950 --> 00:24:38,690
there's several different things we try

00:24:35,389 --> 00:24:40,669
to work around a problem and it shows

00:24:38,690 --> 00:24:43,999
the development progressing with time

00:24:40,669 --> 00:24:45,979
and then we merged things back together

00:24:43,999 --> 00:24:50,029
and got back onto the main line up there

00:24:45,979 --> 00:24:51,739
on July 26 and there's lots of

00:24:50,029 --> 00:24:55,639
hyperlinks on this that we can click on

00:24:51,739 --> 00:24:58,039
oh what's wrong way so the big thing

00:24:55,639 --> 00:24:59,840
here is situational awareness

00:24:58,039 --> 00:25:01,700
I mean quality is very important to me I

00:24:59,840 --> 00:25:03,769
want to be I'm tracking a lot of

00:25:01,700 --> 00:25:06,679
different projects all at one time I'm

00:25:03,769 --> 00:25:09,200
sort of the manager and I want to know

00:25:06,679 --> 00:25:10,519
what's going on on all of my projects

00:25:09,200 --> 00:25:14,330
all at the same time and this timeline

00:25:10,519 --> 00:25:16,460
feature lets me stay aware of what's

00:25:14,330 --> 00:25:18,019
happening because I don't want to lose

00:25:16,460 --> 00:25:20,479
situational awareness one of my favorite

00:25:18,019 --> 00:25:22,039
slides of all time it's the scuba divers

00:25:20,479 --> 00:25:23,629
and the shark they think everything's

00:25:22,039 --> 00:25:26,029
just fine lately there's been this

00:25:23,629 --> 00:25:27,519
insurance company job that's been

00:25:26,029 --> 00:25:29,229
running this ad which I thought was just

00:25:27,519 --> 00:25:31,849
great you know

00:25:29,229 --> 00:25:34,609
don't lose situational awareness on your

00:25:31,849 --> 00:25:36,289
software because when you do you're

00:25:34,609 --> 00:25:39,489
gonna over run schedules you're gonna

00:25:36,289 --> 00:25:41,629
have run into quality problems and

00:25:39,489 --> 00:25:44,239
fossil is the situational awareness

00:25:41,629 --> 00:25:48,320
means understanding what's going on

00:25:44,239 --> 00:25:50,419
around you don't be surprised understand

00:25:48,320 --> 00:25:52,340
the status of what's happening what

00:25:50,419 --> 00:25:56,210
people are doing anticipate what is

00:25:52,340 --> 00:25:58,789
coming up next and and know what your

00:25:56,210 --> 00:26:00,440
team is doing now fossil gives you a lot

00:25:58,789 --> 00:26:02,539
of things to promote situational

00:26:00,440 --> 00:26:04,700
awareness the timeline is it's kind of

00:26:02,539 --> 00:26:08,119
the key thing anybody here use track

00:26:04,700 --> 00:26:15,139
with subversion few people here in her

00:26:08,119 --> 00:26:19,429
CVS track no track was was kind of a

00:26:15,139 --> 00:26:21,889
copy of CVS driver at CVS track a decade

00:26:19,429 --> 00:26:23,269
ago to give me a timeline to do exactly

00:26:21,889 --> 00:26:24,919
the sort of thing and the track people

00:26:23,269 --> 00:26:27,679
saw that hey that's really cool but I

00:26:24,919 --> 00:26:29,359
want to rewrite it for in Python for

00:26:27,679 --> 00:26:30,200
subversion and and they did and they

00:26:29,359 --> 00:26:32,480
actual

00:26:30,200 --> 00:26:34,910
does look a lot nicer a little bit slow

00:26:32,480 --> 00:26:36,230
or a lot more dependencies but this

00:26:34,910 --> 00:26:38,180
timeline feature turned out to be very

00:26:36,230 --> 00:26:41,810
powerful way of tracking your

00:26:38,180 --> 00:26:46,790
development and so I wanted a timeline

00:26:41,810 --> 00:26:47,840
but with the with the screens and fossil

00:26:46,790 --> 00:26:50,450
you've got the ability to look at

00:26:47,840 --> 00:26:52,910
timelines on a per branch basis you can

00:26:50,450 --> 00:26:54,200
look at time ons for a file if you've

00:26:52,910 --> 00:26:55,730
got a single file in your project want

00:26:54,200 --> 00:26:59,030
to see how its evolved over time you can

00:26:55,730 --> 00:27:02,240
look at that what individual users have

00:26:59,030 --> 00:27:03,710
been doing per tag I mean if you've got

00:27:02,240 --> 00:27:05,270
a particular tag if you tagged every

00:27:03,710 --> 00:27:07,580
release with just say release you can

00:27:05,270 --> 00:27:09,350
look at all your release history you can

00:27:07,580 --> 00:27:10,910
look at discs between branches between

00:27:09,350 --> 00:27:12,500
versions between check-ins you could

00:27:10,910 --> 00:27:14,660
look at annotated histories there's a

00:27:12,500 --> 00:27:16,940
lot of information you can get get it

00:27:14,660 --> 00:27:20,450
access to here simply by clicking on

00:27:16,940 --> 00:27:23,260
your screen which I at least find very

00:27:20,450 --> 00:27:25,730
useful for keeping track of things and

00:27:23,260 --> 00:27:29,300
you can do all of this of course with

00:27:25,730 --> 00:27:31,930
the proper packages that you use to

00:27:29,300 --> 00:27:35,420
augment git and mercurial but with

00:27:31,930 --> 00:27:38,170
fossil they're kind of built in so

00:27:35,420 --> 00:27:43,970
fossil has a single file repository

00:27:38,170 --> 00:27:46,670
which is an SQLite database so fossil

00:27:43,970 --> 00:27:49,430
depends on SQL I cannot exist without it

00:27:46,670 --> 00:27:53,300
SQLite depends on fossil cannot exist

00:27:49,430 --> 00:27:54,440
without it you can ponder this problem

00:27:53,300 --> 00:27:57,680
for yourself later

00:27:54,440 --> 00:28:00,530
but it's it's a transactional back in so

00:27:57,680 --> 00:28:05,930
if you're doing an update and you lose

00:28:00,530 --> 00:28:07,550
power or something like that it's atomic

00:28:05,930 --> 00:28:11,230
and so you're not going to corrupt your

00:28:07,550 --> 00:28:13,280
repository before we do any check-in

00:28:11,230 --> 00:28:14,360
before anything before there's any

00:28:13,280 --> 00:28:16,160
change everything is done inside a

00:28:14,360 --> 00:28:18,140
transaction and fossil goes through and

00:28:16,160 --> 00:28:20,390
does all sorts of internal self checks

00:28:18,140 --> 00:28:22,520
to make sure that it can always reacts

00:28:20,390 --> 00:28:25,100
tracked your content before it actually

00:28:22,520 --> 00:28:27,230
commits so if there's a bug in fossil

00:28:25,100 --> 00:28:29,000
that causes a problem that might corrupt

00:28:27,230 --> 00:28:30,710
its internal representation of your

00:28:29,000 --> 00:28:32,660
historical files you're not going to

00:28:30,710 --> 00:28:34,880
lose anything it will see that problem

00:28:32,660 --> 00:28:37,340
and it will roll back and give you an

00:28:34,880 --> 00:28:39,770
error there have been a couple of bugs

00:28:37,340 --> 00:28:41,960
over the past five years which would

00:28:39,770 --> 00:28:42,350
have caused us to lose data if it had

00:28:41,960 --> 00:28:48,500
not been

00:28:42,350 --> 00:28:51,919
for that mechanism one fossil is

00:28:48,500 --> 00:28:54,770
cross-platform well he said well so is

00:28:51,919 --> 00:28:57,049
gettin mercurial and and these others

00:28:54,770 --> 00:28:58,669
well you know I'm gonna claim mercurial

00:28:57,049 --> 00:29:00,770
is not cross-platform it's single

00:28:58,669 --> 00:29:04,370
platform it only runs on one platform

00:29:00,770 --> 00:29:07,490
and that platform is called Python okay

00:29:04,370 --> 00:29:08,690
and Python is a virtual machine which

00:29:07,490 --> 00:29:10,910
happens to run on a lot of other

00:29:08,690 --> 00:29:13,490
platforms so but it's but really

00:29:10,910 --> 00:29:16,909
mercurial as it runs on the Python

00:29:13,490 --> 00:29:19,940
platform get it's been ported to Windows

00:29:16,909 --> 00:29:22,039
and stuff but get the feedback I'm

00:29:19,940 --> 00:29:25,990
getting from people in Windows who try

00:29:22,039 --> 00:29:25,990
to use git is that they're disappointed

00:29:26,289 --> 00:29:30,350
it really wants to run on what on UNIX

00:29:28,820 --> 00:29:33,440
also runs on all of these things

00:29:30,350 --> 00:29:36,409
somebody ran it on Android the other day

00:29:33,440 --> 00:29:39,080
it's not clear to me why you want to get

00:29:36,409 --> 00:29:40,429
your but if you go on the mailing list

00:29:39,080 --> 00:29:43,010
you can look this up and somebody is

00:29:40,429 --> 00:29:47,960
running on Android you know I've got an

00:29:43,010 --> 00:29:50,360
old PowerPC iBook that I use because I

00:29:47,960 --> 00:29:51,890
need to test SQL I on a big endian

00:29:50,360 --> 00:29:55,039
machine and that's kind of the only big

00:29:51,890 --> 00:29:56,210
endian machine around anymore and I run

00:29:55,039 --> 00:29:59,840
fossil there so I can download the

00:29:56,210 --> 00:30:01,370
latest SQLite code to to test it on a

00:29:59,840 --> 00:30:05,419
big endian machine for really slow and

00:30:01,370 --> 00:30:07,309
old but it still works and finally and

00:30:05,419 --> 00:30:09,110
this is this this is surprisingly

00:30:07,309 --> 00:30:10,610
important to a lot of people fossil is

00:30:09,110 --> 00:30:13,490
the only distributed version control

00:30:10,610 --> 00:30:17,570
system that is not GPL it uses the two

00:30:13,490 --> 00:30:20,360
calls berkeley license and you know i

00:30:17,570 --> 00:30:21,890
don't really care but some people really

00:30:20,360 --> 00:30:24,740
do some people get really uptight with

00:30:21,890 --> 00:30:26,510
GPL and a lot of businesses and then

00:30:24,740 --> 00:30:27,470
people tell me that well you know we're

00:30:26,510 --> 00:30:29,330
not allowed to use anything that has a

00:30:27,470 --> 00:30:30,590
GPL on it and i think well it's a

00:30:29,330 --> 00:30:32,000
command-line tool it's not like you're

00:30:30,590 --> 00:30:33,890
integrating it with your product I know

00:30:32,000 --> 00:30:36,409
but the blogger saying what you know you

00:30:33,890 --> 00:30:38,960
gotta water and so here's a two o'clock

00:30:36,409 --> 00:30:40,640
here's a BSD licensed option

00:30:38,960 --> 00:30:45,350
for those of you who are in that

00:30:40,640 --> 00:30:46,669
situation so quick tour of fossil if you

00:30:45,350 --> 00:30:47,780
want to start using false you want to

00:30:46,669 --> 00:30:50,059
play with it the first thing you need to

00:30:47,780 --> 00:30:52,220
do is produce a repository and I'm going

00:30:50,059 --> 00:30:53,990
to give you four ways to generate a

00:30:52,220 --> 00:30:55,820
fossil repository you can do fossil and

00:30:53,990 --> 00:30:58,160
yet just type the command fossil in it

00:30:55,820 --> 00:31:01,010
name of a file that filename will become

00:30:58,160 --> 00:31:03,410
your new repository it will be empty it

00:31:01,010 --> 00:31:04,910
will have a generic name like unnamed

00:31:03,410 --> 00:31:07,130
repository or something like that which

00:31:04,910 --> 00:31:09,590
you can change but it will be an empty

00:31:07,130 --> 00:31:11,720
repository mercurial and get worked the

00:31:09,590 --> 00:31:16,850
same way or you can clone an existing

00:31:11,720 --> 00:31:19,550
repository and make a copy of it and we

00:31:16,850 --> 00:31:23,330
use a URL syntax to specify the other

00:31:19,550 --> 00:31:26,570
repository to join to clone you can give

00:31:23,330 --> 00:31:28,790
it using HTTP or HTTPS it supports them

00:31:26,570 --> 00:31:33,860
both our file or it'll also work with

00:31:28,790 --> 00:31:36,080
SSH so you can clone things that way if

00:31:33,860 --> 00:31:38,540
you have an existing git repository you

00:31:36,080 --> 00:31:41,500
can use the git fast

00:31:38,540 --> 00:31:44,840
export facility and then pipe that into

00:31:41,500 --> 00:31:47,120
fossil import and it'll take your git

00:31:44,840 --> 00:31:48,620
repository and turn it into a file

00:31:47,120 --> 00:31:50,450
surplus store also goes the other way so

00:31:48,620 --> 00:31:51,770
if you try fossil out and later on you

00:31:50,450 --> 00:31:54,050
decide you don't like it you want to go

00:31:51,770 --> 00:31:58,880
back to get or something you can react

00:31:54,050 --> 00:32:01,910
sport and import back into get or you

00:31:58,880 --> 00:32:03,470
know if if you happen to just have a

00:32:01,910 --> 00:32:05,210
repulsor you can just copy it make a

00:32:03,470 --> 00:32:07,010
copy of the repository file it contains

00:32:05,210 --> 00:32:09,590
everything you need now this is not

00:32:07,010 --> 00:32:11,720
recommended because the repository also

00:32:09,590 --> 00:32:15,410
contains a lot of information that isn't

00:32:11,720 --> 00:32:17,240
versioned such as passwords for logging

00:32:15,410 --> 00:32:19,070
in on the website and that sort of thing

00:32:17,240 --> 00:32:21,080
and if you want to copy that stuff then

00:32:19,070 --> 00:32:22,520
just copy the file but if you're running

00:32:21,080 --> 00:32:24,770
a website and it's got all your

00:32:22,520 --> 00:32:26,510
developers passwords on it this is not

00:32:24,770 --> 00:32:29,330
something that you want random users off

00:32:26,510 --> 00:32:30,710
the internet to be downloading so you

00:32:29,330 --> 00:32:32,660
know there's a little bit a little bit

00:32:30,710 --> 00:32:33,980
of caution there it does it's not

00:32:32,660 --> 00:32:36,320
storing the passwords directly it's

00:32:33,980 --> 00:32:38,060
storing a hash of them but but these

00:32:36,320 --> 00:32:39,230
days if you've got a hash of the website

00:32:38,060 --> 00:32:41,870
you can generally do an exhaustive

00:32:39,230 --> 00:32:45,200
search on the password and find it in a

00:32:41,870 --> 00:32:47,120
few hours so after you get your

00:32:45,200 --> 00:32:49,550
repository the next thing you need to do

00:32:47,120 --> 00:32:51,140
is produce a check out you do fall you

00:32:49,550 --> 00:32:53,000
need go to your working directory that

00:32:51,140 --> 00:32:54,350
can be anywhere and then you say fossil

00:32:53,000 --> 00:32:56,900
open and give the name of the repository

00:32:54,350 --> 00:32:59,630
and that gives you a all the files that

00:32:56,900 --> 00:33:03,200
you're going to be working on and a

00:32:59,630 --> 00:33:05,630
feature of fossil which is missing and

00:33:03,200 --> 00:33:07,400
git and mercurial is that you can have

00:33:05,630 --> 00:33:08,870
multiple checkouts associated with a

00:33:07,400 --> 00:33:13,789
single repository

00:33:08,870 --> 00:33:15,769
and get in mercurial the repository and

00:33:13,789 --> 00:33:18,490
the checkout are kind of the same thing

00:33:15,769 --> 00:33:21,649
there's the dot HG or the dot G IT

00:33:18,490 --> 00:33:24,049
directory which is which is your kind of

00:33:21,649 --> 00:33:26,679
a date is your repository really it's a

00:33:24,049 --> 00:33:29,179
database it's a pile of files database

00:33:26,679 --> 00:33:31,730
it's not using a real database engine

00:33:29,179 --> 00:33:33,679
and but but that means you can only have

00:33:31,730 --> 00:33:35,330
a single check out at a time I find it's

00:33:33,679 --> 00:33:38,240
very useful to have multiple check outs

00:33:35,330 --> 00:33:40,909
on different branches or different

00:33:38,240 --> 00:33:45,019
points in time if I'm wanting to do some

00:33:40,909 --> 00:33:46,669
performance studies between the previous

00:33:45,019 --> 00:33:48,259
release and the next release of SQLite

00:33:46,669 --> 00:33:50,450
to make sure that I haven't hit a for

00:33:48,259 --> 00:33:53,389
performance regression I'll check out

00:33:50,450 --> 00:33:55,039
what you know the previous release you

00:33:53,389 --> 00:33:57,649
know in one directory and I'll also

00:33:55,039 --> 00:33:59,360
check out you know the head of trunk and

00:33:57,649 --> 00:34:01,190
another another directory compile them

00:33:59,360 --> 00:34:03,970
both up and do some studies that way

00:34:01,190 --> 00:34:07,399
this turns out to be very useful thing

00:34:03,970 --> 00:34:09,139
now you can move around your check out

00:34:07,399 --> 00:34:10,700
two different versions different

00:34:09,139 --> 00:34:13,849
historical commits using the updated

00:34:10,700 --> 00:34:15,649
command ok update fossil update and then

00:34:13,849 --> 00:34:17,329
give the version name now version

00:34:15,649 --> 00:34:19,520
there's lots of different ways to

00:34:17,329 --> 00:34:22,899
specify a version we're going to talk

00:34:19,520 --> 00:34:25,669
about this briefly here's for example

00:34:22,899 --> 00:34:27,200
well the one thing if you've not done

00:34:25,669 --> 00:34:29,810
the the distributed version control

00:34:27,200 --> 00:34:32,359
systems before if you've just been doing

00:34:29,810 --> 00:34:34,609
subversion and CBS you're probably used

00:34:32,359 --> 00:34:36,980
to doing filed our version numbers like

00:34:34,609 --> 00:34:39,429
1.1 1.2 1 like that

00:34:36,980 --> 00:34:41,899
very sequential very easy to remember

00:34:39,429 --> 00:34:45,129
because the distributed version control

00:34:41,899 --> 00:34:47,419
systems can be things can be committed

00:34:45,129 --> 00:34:49,429
with people without a central authority

00:34:47,419 --> 00:34:52,429
there to assign version numbers to

00:34:49,429 --> 00:34:53,810
things we have to give them strange

00:34:52,429 --> 00:34:58,280
version numbers which are typically a

00:34:53,810 --> 00:34:59,780
sha-1 hash 40 characters of hex they're

00:34:58,280 --> 00:35:02,630
not intuitive they're not it's not

00:34:59,780 --> 00:35:05,270
sequential they're a little bit hard to

00:35:02,630 --> 00:35:06,470
deal with this is this is the this is

00:35:05,270 --> 00:35:08,119
what you're giving up when you go to

00:35:06,470 --> 00:35:10,130
disconnected operation you have to deal

00:35:08,119 --> 00:35:12,829
with kind of funky version numbers like

00:35:10,130 --> 00:35:14,569
this and all of the distributed version

00:35:12,829 --> 00:35:15,920
consists systems work that way but you

00:35:14,569 --> 00:35:18,290
can you don't have to always time all

00:35:15,920 --> 00:35:20,810
that stuff in this version that you type

00:35:18,290 --> 00:35:22,340
in it can be any unique prefix of that

00:35:20,810 --> 00:35:25,290
sha-1 hash

00:35:22,340 --> 00:35:26,520
or give me the name of a branch in which

00:35:25,290 --> 00:35:28,110
case we'll give you the most recent

00:35:26,520 --> 00:35:32,700
checking on the branch or it can be a

00:35:28,110 --> 00:35:33,810
tag or can be a date/time stamp in which

00:35:32,700 --> 00:35:36,720
case it'll give you the most recent

00:35:33,810 --> 00:35:38,550
check-in that's after that date time it

00:35:36,720 --> 00:35:39,870
can be a branch name : in a date/time

00:35:38,550 --> 00:35:41,610
stamp which means it'll give you the

00:35:39,870 --> 00:35:43,950
most recent check in on that branch that

00:35:41,610 --> 00:35:45,450
occurred after the date and time or it

00:35:43,950 --> 00:35:47,250
can be like key words like next in

00:35:45,450 --> 00:35:50,250
previous to kind of move up and down in

00:35:47,250 --> 00:35:53,310
the in the history any of that will go

00:35:50,250 --> 00:35:57,710
go there and so you do that so here's an

00:35:53,310 --> 00:36:00,300
example suppose I wanted to check out

00:35:57,710 --> 00:36:02,240
that release there in the middle and

00:36:00,300 --> 00:36:07,130
I've got a couple blow ups at this page

00:36:02,240 --> 00:36:07,130
because I had previously assumed that

00:36:08,150 --> 00:36:14,100
we'd have a low resolution projector but

00:36:11,640 --> 00:36:18,420
here on this one line on the timeline

00:36:14,100 --> 00:36:20,160
we've got version 376 of SQLite and I've

00:36:18,420 --> 00:36:22,080
identified four different names by which

00:36:20,160 --> 00:36:23,640
I can call this I've got the first 10

00:36:22,080 --> 00:36:27,090
characters of the sha-1 hash there at

00:36:23,640 --> 00:36:29,070
the beginning version a and and so I

00:36:27,090 --> 00:36:31,140
could do a fossil update and I just give

00:36:29,070 --> 00:36:33,600
the first six characters which is unique

00:36:31,140 --> 00:36:36,060
and that would take me immediately to

00:36:33,600 --> 00:36:38,160
that check out or I could go over here

00:36:36,060 --> 00:36:39,690
under tags and look this this thing is

00:36:38,160 --> 00:36:43,890
tagged as trunk because it's on the

00:36:39,690 --> 00:36:48,650
trunk branch and so I could say give me

00:36:43,890 --> 00:36:52,860
or go to the trunk that is prior to

00:36:48,650 --> 00:36:54,510
April 11th at 2:00 a.m. now I had to

00:36:52,860 --> 00:36:56,280
specify time there because if it's just

00:36:54,510 --> 00:36:58,350
a fossil uptick trunk it's gonna go to

00:36:56,280 --> 00:37:00,060
the very latest check-in on the trunk

00:36:58,350 --> 00:37:02,460
and which is not what I want I want the

00:37:00,060 --> 00:37:05,610
check-in on the trunk that's back in

00:37:02,460 --> 00:37:07,440
time a little bit likewise we put a tag

00:37:05,610 --> 00:37:09,990
on every release of SQLite called

00:37:07,440 --> 00:37:13,920
release so there's multiple check-ins

00:37:09,990 --> 00:37:15,690
that have this release tag and I had

00:37:13,920 --> 00:37:17,100
until you can you can say fossil update

00:37:15,690 --> 00:37:19,650
release but I have to give it a

00:37:17,100 --> 00:37:21,480
timestamp of some sort or it's going to

00:37:19,650 --> 00:37:24,420
give me the most recent release and this

00:37:21,480 --> 00:37:26,610
is not the most recent one so it gave me

00:37:24,420 --> 00:37:29,670
time skip Ora the we give it a tag

00:37:26,610 --> 00:37:31,200
version 376 which is unique and so I can

00:37:29,670 --> 00:37:32,520
just go with that one tag there's lots

00:37:31,200 --> 00:37:35,240
of different ways that you can specify

00:37:32,520 --> 00:37:35,240
checkout

00:37:37,400 --> 00:37:43,070
once you have something checked out you

00:37:39,320 --> 00:37:44,360
can do fossil UI if you're already in it

00:37:43,070 --> 00:37:45,860
if you're in sitting in a checkout when

00:37:44,360 --> 00:37:47,510
you do this it just automatically brings

00:37:45,860 --> 00:37:48,800
up your web browser here's a hint who's

00:37:47,510 --> 00:37:50,660
all Hughes is in material

00:37:48,800 --> 00:37:54,980
anybody have contacts with the material

00:37:50,660 --> 00:37:57,410
team no mercurial has this the same

00:37:54,980 --> 00:37:59,720
thing where you can do hg space serve

00:37:57,410 --> 00:38:02,090
and it kind of starts up a little mini

00:37:59,720 --> 00:38:03,470
web browser right there for you and then

00:38:02,090 --> 00:38:05,870
you can take your web browser and point

00:38:03,470 --> 00:38:08,840
at it and you can look at some stuff but

00:38:05,870 --> 00:38:11,480
where mercurial falls down is that one

00:38:08,840 --> 00:38:14,540
you have to tell it what tcp/ip port to

00:38:11,480 --> 00:38:17,450
use all right maybe it defaults to 8080

00:38:14,540 --> 00:38:20,060
I'm not sure how it works but fossil

00:38:17,450 --> 00:38:23,000
well I'd actually go through and find a

00:38:20,060 --> 00:38:26,810
free tcp/ip port so you can do fossil UI

00:38:23,000 --> 00:38:29,060
in three or four different X terms which

00:38:26,810 --> 00:38:30,380
I frequently end up doing and because

00:38:29,060 --> 00:38:32,600
they're all running they've got to be on

00:38:30,380 --> 00:38:33,980
different tcp/ip ports and it'll find a

00:38:32,600 --> 00:38:36,460
free one and do it and then it

00:38:33,980 --> 00:38:38,780
automatically launches your web browser

00:38:36,460 --> 00:38:39,920
so I don't have to fumble around with

00:38:38,780 --> 00:38:42,830
the web browser and type stuff in the

00:38:39,920 --> 00:38:45,380
viewer and to the the URL bar I just

00:38:42,830 --> 00:38:47,120
typed false on you I in my shell and up

00:38:45,380 --> 00:38:54,410
pops my web browser pointing immediately

00:38:47,120 --> 00:38:55,700
to my my information it's it binds only

00:38:54,410 --> 00:38:57,890
to the loopback address so I don't have

00:38:55,700 --> 00:38:59,510
to worry about other people coming in

00:38:57,890 --> 00:39:02,120
and it automatically gives me an

00:38:59,510 --> 00:39:03,650
administrator login now fossile also has

00:39:02,120 --> 00:39:06,140
you can notice you also do fossil serve

00:39:03,650 --> 00:39:11,330
like a hand with a with material and in

00:39:06,140 --> 00:39:14,120
that case it binds to the all IP

00:39:11,330 --> 00:39:16,100
addresses and but it but then it doesn't

00:39:14,120 --> 00:39:18,380
disable the the logins and so people

00:39:16,100 --> 00:39:19,310
have to give a password so you do fossil

00:39:18,380 --> 00:39:23,660
server if you want to kind of run a

00:39:19,310 --> 00:39:26,630
server for ad-hoc sharing alright so

00:39:23,660 --> 00:39:28,490
once you once you get the so you look at

00:39:26,630 --> 00:39:30,290
the UI and see what's going on you've

00:39:28,490 --> 00:39:33,370
got the usual commands you know you add

00:39:30,290 --> 00:39:35,810
files remove files move files around and

00:39:33,370 --> 00:39:39,350
remove means it kind of looks at your

00:39:35,810 --> 00:39:42,560
entire checkout and if there's any

00:39:39,350 --> 00:39:43,850
uncommit it adds files that need to be

00:39:42,560 --> 00:39:45,230
added and removed files that have gone

00:39:43,850 --> 00:39:47,220
missing so that it's kind of

00:39:45,230 --> 00:39:50,369
synchronized as your check out with

00:39:47,220 --> 00:39:52,890
with what's in the repository there's

00:39:50,369 --> 00:39:54,300
fossil status which shows you you know

00:39:52,890 --> 00:39:57,119
what's the status of the things in your

00:39:54,300 --> 00:40:00,630
checkout shows you the changes the dif

00:39:57,119 --> 00:40:02,550
gives you a diff a gdf I said fossil has

00:40:00,630 --> 00:40:05,640
no no external dependencies it doesn't

00:40:02,550 --> 00:40:08,550
require a differ in your machine GTI if

00:40:05,640 --> 00:40:09,900
is a graphical diff and for that you

00:40:08,550 --> 00:40:13,020
have to say I want you to use this

00:40:09,900 --> 00:40:16,140
external graphical diff tool you know

00:40:13,020 --> 00:40:18,180
TKD for gif or whatever and you have to

00:40:16,140 --> 00:40:20,940
configure that because fossil doesn't

00:40:18,180 --> 00:40:22,680
know what your external the graphical

00:40:20,940 --> 00:40:25,980
dipping tool is what your preferred one

00:40:22,680 --> 00:40:29,550
is is you have to tell if that but but

00:40:25,980 --> 00:40:31,050
the differ is built in and when you

00:40:29,550 --> 00:40:33,089
finish making your changes you do a

00:40:31,050 --> 00:40:35,069
commit and this goes into the repository

00:40:33,089 --> 00:40:36,660
and there's lots of options to commit

00:40:35,069 --> 00:40:37,859
you can give it a branch name and give

00:40:36,660 --> 00:40:39,780
it a background color you can say this

00:40:37,859 --> 00:40:44,010
is a private check in which I'm never

00:40:39,780 --> 00:40:45,510
going to share with anybody else give it

00:40:44,010 --> 00:40:48,900
a commit message it'll prompt you for

00:40:45,510 --> 00:40:51,510
the commit log message if you don't

00:40:48,900 --> 00:40:54,150
don't I usually just let it prompt me

00:40:51,510 --> 00:40:57,660
for one now once you get things

00:40:54,150 --> 00:40:59,880
committed you can push or pull with with

00:40:57,660 --> 00:41:01,619
other repositories if you don't specify

00:40:59,880 --> 00:41:03,300
the URL where you're pushing or pulling

00:41:01,619 --> 00:41:04,829
and uses the one that you most recently

00:41:03,300 --> 00:41:06,240
did if you just cloned a new repository

00:41:04,829 --> 00:41:08,130
and you try and push it automatically

00:41:06,240 --> 00:41:13,680
tries to push back to the place where

00:41:08,130 --> 00:41:16,980
you cloned and fossil incident you have

00:41:13,680 --> 00:41:18,599
a automatic synchronization with with

00:41:16,980 --> 00:41:20,960
git and mercurial I think but I think

00:41:18,599 --> 00:41:24,020
bizarre has this to anybody use bizarre

00:41:20,960 --> 00:41:27,980
they have this concept as well so and

00:41:24,020 --> 00:41:30,930
this is on by default if ever you do it

00:41:27,980 --> 00:41:32,670
before you do an update it'll

00:41:30,930 --> 00:41:34,740
automatically go out to the last machine

00:41:32,670 --> 00:41:36,750
that you pulled from and see if there's

00:41:34,740 --> 00:41:38,220
any new information out there so I've

00:41:36,750 --> 00:41:41,130
been away from the office for a day now

00:41:38,220 --> 00:41:44,280
I'll go home and I'll do fossil update

00:41:41,130 --> 00:41:46,710
on SQL I and it'll first go out to the

00:41:44,280 --> 00:41:47,970
servers that we saw earlier and see if

00:41:46,710 --> 00:41:49,410
there's been any changes and I'll pull

00:41:47,970 --> 00:41:51,150
in all those changes to my local thing

00:41:49,410 --> 00:41:53,970
and then it will do the update operation

00:41:51,150 --> 00:41:56,640
so it it's kind of a one-step thing I

00:41:53,970 --> 00:41:58,760
don't have to pull separately similarly

00:41:56,640 --> 00:42:00,860
if I do a commit at first before it does

00:41:58,760 --> 00:42:02,240
it does a pool to make sure that

00:42:00,860 --> 00:42:05,180
somebody else hasn't checked in ahead of

00:42:02,240 --> 00:42:06,830
me and then after I commit it pushes

00:42:05,180 --> 00:42:09,050
that back out to the server it tends to

00:42:06,830 --> 00:42:11,540
keep the server in synchronization what

00:42:09,050 --> 00:42:13,880
you have here this prevents a lot of

00:42:11,540 --> 00:42:16,370
needless forking and branching that you

00:42:13,880 --> 00:42:18,770
get in the other systems it works a

00:42:16,370 --> 00:42:19,760
little bit more like CVS of subversion

00:42:18,770 --> 00:42:21,890
where it keeps everybody in

00:42:19,760 --> 00:42:23,270
synchronization it doesn't always work

00:42:21,890 --> 00:42:24,830
because people can still work

00:42:23,270 --> 00:42:28,280
disconnected and you can still get some

00:42:24,830 --> 00:42:30,080
forts but it works really well it's on

00:42:28,280 --> 00:42:33,650
by default you can turn that behavior on

00:42:30,080 --> 00:42:36,530
and off at will you want to do a branch

00:42:33,650 --> 00:42:39,260
you just commit and you tell the branch

00:42:36,530 --> 00:42:40,850
name interesting feature fossil is you

00:42:39,260 --> 00:42:46,100
can branch after the fact here's a

00:42:40,850 --> 00:42:48,440
here's a here's just a demo project that

00:42:46,100 --> 00:42:50,720
I did I just did you know started out

00:42:48,440 --> 00:42:54,410
with an empty repository I did two

00:42:50,720 --> 00:42:59,420
check-ins and let's suppose that that

00:42:54,410 --> 00:43:00,830
second check-in ef-1 see I really wanted

00:42:59,420 --> 00:43:02,750
to go into a different branch but you

00:43:00,830 --> 00:43:04,370
know when I did the commit ah I messed

00:43:02,750 --> 00:43:07,490
up I didn't mean didn't mean to go in

00:43:04,370 --> 00:43:09,260
the trunk well I can just click I can

00:43:07,490 --> 00:43:13,430
bring up fossil you I can just click on

00:43:09,260 --> 00:43:15,470
that little hyperlink there and that

00:43:13,430 --> 00:43:17,450
takes me to a screen that describes the

00:43:15,470 --> 00:43:21,410
second check-in and then down over here

00:43:17,450 --> 00:43:24,860
under other links I've got edit and I

00:43:21,410 --> 00:43:27,050
can click on edit then and that takes me

00:43:24,860 --> 00:43:28,610
to a screen here which allows me to do

00:43:27,050 --> 00:43:30,230
things like edit the name of the user

00:43:28,610 --> 00:43:34,340
that checked it in edit the commit

00:43:30,230 --> 00:43:37,820
comment edit the check-in time but also

00:43:34,340 --> 00:43:41,180
I'm gonna zoom in it allows me to set a

00:43:37,820 --> 00:43:43,310
new background color which could be

00:43:41,180 --> 00:43:45,380
propagated forward or just for that one

00:43:43,310 --> 00:43:46,910
check-in and it allows me to enter a new

00:43:45,380 --> 00:43:51,530
branch name so I could go up here and

00:43:46,910 --> 00:43:53,360
enter for example a new branch demo and

00:43:51,530 --> 00:43:54,860
I'm going to give it some background

00:43:53,360 --> 00:43:56,120
color just kind of because I like my

00:43:54,860 --> 00:43:57,230
different branches to be different

00:43:56,120 --> 00:44:02,900
background colors to kind of keep them

00:43:57,230 --> 00:44:05,390
separate and then I press apply and what

00:44:02,900 --> 00:44:08,030
that did it didn't really change the

00:44:05,390 --> 00:44:09,900
Nate the the tree of commits but it it

00:44:08,030 --> 00:44:12,180
displays them differently now it

00:44:09,900 --> 00:44:17,400
that's a second check in into another

00:44:12,180 --> 00:44:18,900
branch now fossil has this idea that it

00:44:17,400 --> 00:44:21,420
never changes history

00:44:18,900 --> 00:44:23,790
there's no rebase command and fossil and

00:44:21,420 --> 00:44:26,250
so it doesn't really change things it

00:44:23,790 --> 00:44:28,170
just it uses the accountants principle

00:44:26,250 --> 00:44:30,540
you don't make changes you make

00:44:28,170 --> 00:44:31,860
corrections the original still visible

00:44:30,540 --> 00:44:34,050
and you can go back and look and see

00:44:31,860 --> 00:44:37,410
what the original branch was it just

00:44:34,050 --> 00:44:38,640
makes a correction to it so then suppose

00:44:37,410 --> 00:44:44,430
somebody else comes along and they put

00:44:38,640 --> 00:44:47,010
another commit on the branch there and

00:44:44,430 --> 00:44:48,810
so now we've got like two diverging

00:44:47,010 --> 00:44:50,400
versions here and you want to go back

00:44:48,810 --> 00:44:53,750
and you want to bring these back

00:44:50,400 --> 00:44:56,130
together the way you would do that and

00:44:53,750 --> 00:44:58,530
if you if you if you're familiar with

00:44:56,130 --> 00:45:00,180
mercurial and get you're already know

00:44:58,530 --> 00:45:02,460
how to do this of course but if you're

00:45:00,180 --> 00:45:04,440
in the subversion world this might be

00:45:02,460 --> 00:45:07,020
new to you the way you do that is you

00:45:04,440 --> 00:45:08,850
first update over to the branch and so

00:45:07,020 --> 00:45:10,590
your local checkout has all the files

00:45:08,850 --> 00:45:15,000
that are associated with the branch and

00:45:10,590 --> 00:45:16,080
then you do merge trunk where I have

00:45:15,000 --> 00:45:18,180
written trunk there that can be any

00:45:16,080 --> 00:45:20,220
version identifier you want trunk is

00:45:18,180 --> 00:45:23,700
convenient it's going to give me the the

00:45:20,220 --> 00:45:25,260
top of that branch and that that pulls

00:45:23,700 --> 00:45:25,710
all the changes in merges them together

00:45:25,260 --> 00:45:27,690
nicely

00:45:25,710 --> 00:45:30,000
you should probably test it now but then

00:45:27,690 --> 00:45:31,140
you do commit and that'll birch all this

00:45:30,000 --> 00:45:33,480
changes together and you get a nice

00:45:31,140 --> 00:45:35,640
little graphical display of this where

00:45:33,480 --> 00:45:39,300
it shows that it merged the changes from

00:45:35,640 --> 00:45:40,740
trunk into your new commit there now

00:45:39,300 --> 00:45:43,740
suppose I wanted to close that branch

00:45:40,740 --> 00:45:46,110
out completely I could go back over here

00:45:43,740 --> 00:45:48,330
and I could update to the trunk and then

00:45:46,110 --> 00:45:50,600
merge demo1 into trunk and then commit

00:45:48,330 --> 00:45:55,050
again and that would merge the demon one

00:45:50,600 --> 00:45:58,860
into the trunk like that familiar to you

00:45:55,050 --> 00:46:01,740
if you're using mercurial or yet if

00:45:58,860 --> 00:46:03,780
you're used to the CVS world I found

00:46:01,740 --> 00:46:08,370
that my experience with the tickle TK

00:46:03,780 --> 00:46:09,930
crowd who had been CVS for decades this

00:46:08,370 --> 00:46:11,100
was really confusing to them it took

00:46:09,930 --> 00:46:13,740
them a while for them to kind of get

00:46:11,100 --> 00:46:15,780
their head around this process and but I

00:46:13,740 --> 00:46:19,550
think to be able to see this graphically

00:46:15,780 --> 00:46:19,550
and by default really helped them a lot

00:46:19,700 --> 00:46:23,380
some other features of fossil you type

00:46:22,020 --> 00:46:24,790
fossil help

00:46:23,380 --> 00:46:27,070
gives you a list of commands puzzle help

00:46:24,790 --> 00:46:30,490
command name a really cool thing is this

00:46:27,070 --> 00:46:32,230
fossil all command fossil has it's got a

00:46:30,490 --> 00:46:34,060
dot file in your home directory and it

00:46:32,230 --> 00:46:38,440
keeps track of all the repositories that

00:46:34,060 --> 00:46:39,730
you have and you can you can push and

00:46:38,440 --> 00:46:41,170
pull to all of your result and

00:46:39,730 --> 00:46:43,930
repositories with a single command this

00:46:41,170 --> 00:46:45,340
is really useful for me because I'm

00:46:43,930 --> 00:46:49,390
working on a desktop system which is a

00:46:45,340 --> 00:46:51,640
Linux box and I'm constantly

00:46:49,390 --> 00:46:52,930
automatically syncing to a server which

00:46:51,640 --> 00:46:54,850
is the three servers that I showed you

00:46:52,930 --> 00:46:56,950
earlier but then I go on the road

00:46:54,850 --> 00:47:00,000
sometimes to visit a client or to come a

00:46:56,950 --> 00:47:03,040
conference and I take a MacBook with me

00:47:00,000 --> 00:47:05,140
but MacBook sticks over in the corner

00:47:03,040 --> 00:47:06,220
it's not used most of the time but when

00:47:05,140 --> 00:47:08,050
I'm getting ready to go on the road I

00:47:06,220 --> 00:47:12,280
just go over to my macbook and I bring

00:47:08,050 --> 00:47:14,020
it up and I do fossil all pull and in

00:47:12,280 --> 00:47:15,880
those about all my repositories and it

00:47:14,020 --> 00:47:17,350
goes in automatically pulls down all the

00:47:15,880 --> 00:47:20,920
information from all of my repositories

00:47:17,350 --> 00:47:23,590
I developed this talk on my desktop and

00:47:20,920 --> 00:47:24,790
I push it up to the server and then

00:47:23,590 --> 00:47:27,550
before it come to the conference in just

00:47:24,790 --> 00:47:29,560
do fossil all pull and it pulled all the

00:47:27,550 --> 00:47:32,710
slides for this talk into a repository

00:47:29,560 --> 00:47:34,690
of all of my talks on my laptop now

00:47:32,710 --> 00:47:36,730
while I'm on the road I will typically

00:47:34,690 --> 00:47:40,360
make some changes to a talk or something

00:47:36,730 --> 00:47:42,310
like that and I you know I'm in the

00:47:40,360 --> 00:47:47,830
Marriott so I don't have Wi-Fi in the

00:47:42,310 --> 00:47:49,690
room and so then I do you know so I make

00:47:47,830 --> 00:47:50,920
the changes I check them in locally but

00:47:49,690 --> 00:47:53,110
then when I get connectivity again

00:47:50,920 --> 00:47:55,510
adjust to get home I do fossil all push

00:47:53,110 --> 00:47:56,890
and it pushes all my changes back at the

00:47:55,510 --> 00:47:59,890
server it's a very convenient way to

00:47:56,890 --> 00:48:01,690
keep things in synchronization some

00:47:59,890 --> 00:48:02,980
other features we talked about it's got

00:48:01,690 --> 00:48:05,350
the built-in wiki which automatically

00:48:02,980 --> 00:48:07,780
synchronizes when you do push or pull

00:48:05,350 --> 00:48:09,430
it's got imbedded documentation I

00:48:07,780 --> 00:48:11,440
thought it was gonna be short of time

00:48:09,430 --> 00:48:12,880
and so I didn't go into a lot of this we

00:48:11,440 --> 00:48:14,530
can demonstrate it to you later if you

00:48:12,880 --> 00:48:18,040
are after after the talk if you want

00:48:14,530 --> 00:48:20,470
we've got tickets trouble tickets bug

00:48:18,040 --> 00:48:22,360
reports it's the ability to do blog

00:48:20,470 --> 00:48:31,540
entries you can customize the look and

00:48:22,360 --> 00:48:33,250
feel of the of the web screens I want to

00:48:31,540 --> 00:48:35,740
emphasize that it's robust or inaudible

00:48:33,250 --> 00:48:36,900
nobody has ever lost in the 5 year

00:48:35,740 --> 00:48:39,270
history

00:48:36,900 --> 00:48:41,460
but he has ever lost any content after

00:48:39,270 --> 00:48:43,290
it's successfully gotten into a fossil

00:48:41,460 --> 00:48:45,240
repository a couple of weeks ago there

00:48:43,290 --> 00:48:48,150
was a big big blowup on the Internet

00:48:45,240 --> 00:48:50,430
where this guy Zed Shaw was trying to

00:48:48,150 --> 00:48:52,440
check some things into fossil and he had

00:48:50,430 --> 00:48:53,640
a bug in fossil and what fossil did is

00:48:52,440 --> 00:48:56,370
they went through and deleted a bunch of

00:48:53,640 --> 00:48:57,870
files in his check out now it retained

00:48:56,370 --> 00:49:00,330
all the files that he had actually

00:48:57,870 --> 00:49:01,950
changed the files that it deleted were

00:49:00,330 --> 00:49:03,090
files that were unchanged that he could

00:49:01,950 --> 00:49:05,040
recover easily enough from the

00:49:03,090 --> 00:49:08,130
repository the files that he had edited

00:49:05,040 --> 00:49:09,480
were retained but it's all he saw it

00:49:08,130 --> 00:49:11,730
deleting a bunch of files and that was a

00:49:09,480 --> 00:49:14,160
bug but he's not deleting these files I

00:49:11,730 --> 00:49:17,730
think he panicked and he entered a bunch

00:49:14,160 --> 00:49:19,590
of other fossil commands which ended up

00:49:17,730 --> 00:49:22,170
deleting files that he'd actually edited

00:49:19,590 --> 00:49:24,150
and he'd lost work the other commands

00:49:22,170 --> 00:49:26,400
that he entered actually asked fossil to

00:49:24,150 --> 00:49:28,350
delete his work okay and he was in a

00:49:26,400 --> 00:49:32,550
panic and there it was it was it was a

00:49:28,350 --> 00:49:34,440
cascade of errors here there were

00:49:32,550 --> 00:49:37,230
multiple points along the way where he

00:49:34,440 --> 00:49:39,570
could have recovered from it but but he

00:49:37,230 --> 00:49:41,760
there was a big blowup about that but he

00:49:39,570 --> 00:49:46,140
never actually got his content into the

00:49:41,760 --> 00:49:47,640
fossil repository when this happen once

00:49:46,140 --> 00:49:49,710
you get into the fossil deposit but as

00:49:47,640 --> 00:49:54,210
far as I know nobody's ever reported any

00:49:49,710 --> 00:49:56,550
loss of content water people so fossil

00:49:54,210 --> 00:49:59,010
has been self-hosting since 2007 or

00:49:56,550 --> 00:50:02,310
would have well as of the middle of last

00:49:59,010 --> 00:50:08,250
month we've had you know 2,700 check-ins

00:50:02,310 --> 00:50:09,810
406 source files there's about half a

00:50:08,250 --> 00:50:12,240
gigabyte of content it compresses down

00:50:09,810 --> 00:50:14,310
to about 15 megabytes and if you clone

00:50:12,240 --> 00:50:16,490
the fossil record stories about 9.6

00:50:14,310 --> 00:50:21,020
megabytes of traffic just to clone it

00:50:16,490 --> 00:50:27,510
SQLite we've got 11 years of history

00:50:21,020 --> 00:50:29,300
over 9,000 check-ins this when after two

00:50:27,510 --> 00:50:32,880
years ago when we first transferred

00:50:29,300 --> 00:50:35,610
SQLite from CVS into fossil at that

00:50:32,880 --> 00:50:37,070
point the CVS repository was 320

00:50:35,610 --> 00:50:39,390
megabytes

00:50:37,070 --> 00:50:42,420
now two years later with a lot of

00:50:39,390 --> 00:50:45,960
changes we're at 29 megabytes for the

00:50:42,420 --> 00:50:49,440
fossil report ori a single checkout is

00:50:45,960 --> 00:50:52,470
about 19 megabytes uncompressed if you

00:50:49,440 --> 00:50:53,849
on the entire history it's only it's

00:50:52,470 --> 00:50:54,930
slightly more than that 20 megabytes

00:50:53,849 --> 00:50:57,510
though of course it's obviously

00:50:54,930 --> 00:51:02,339
compressed but that seems to be pretty

00:50:57,510 --> 00:51:04,880
good tickle has been we've got 13 years

00:51:02,339 --> 00:51:12,270
of history of tickle history in there

00:51:04,880 --> 00:51:15,829
there's 12,000 check-ins for 5 gigabytes

00:51:12,270 --> 00:51:19,290
of content and an 81 megabyte repository

00:51:15,829 --> 00:51:22,079
that BSD --then tinkering around with

00:51:19,290 --> 00:51:24,349
this they have not actually mmm their

00:51:22,079 --> 00:51:26,130
own CVS right now they're looking at

00:51:24,349 --> 00:51:27,839
configuration management systems they

00:51:26,130 --> 00:51:29,730
need to get off of CVS they recognize

00:51:27,839 --> 00:51:31,069
this and they haven't decided what

00:51:29,730 --> 00:51:33,180
they're going to do yet they're kind of

00:51:31,069 --> 00:51:37,140
looking and get they're kind of looking

00:51:33,180 --> 00:51:39,599
at fossil they like fossil because it's

00:51:37,140 --> 00:51:41,069
it uses the BSD license instead of GPL

00:51:39,599 --> 00:51:44,430
and there's some bad blood there you

00:51:41,069 --> 00:51:47,220
know that's that's the one thing I've

00:51:44,430 --> 00:51:50,010
got going for me but they're they're

00:51:47,220 --> 00:51:53,010
very puzzler is absolutely enormous

00:51:50,010 --> 00:51:57,210
they've got what a hundred thousand

00:51:53,010 --> 00:52:02,430
files they're a total check out 328

00:51:57,210 --> 00:52:05,310
megabytes and yet it works so it's able

00:52:02,430 --> 00:52:08,609
to handle some large packages fossil vs.

00:52:05,310 --> 00:52:10,109
get fossils gets a lot of little

00:52:08,609 --> 00:52:13,369
programs some people say that's an

00:52:10,109 --> 00:52:16,260
advantage I'm not so sure about that

00:52:13,369 --> 00:52:19,740
fossil has a single file repository

00:52:16,260 --> 00:52:22,770
versus a pile of files forget begin is a

00:52:19,740 --> 00:52:25,970
huge community and the community is

00:52:22,770 --> 00:52:27,960
fanatically devoted to get to and so if

00:52:25,970 --> 00:52:31,560
if you've got some people on your team

00:52:27,960 --> 00:52:33,089
and they're in that get community you

00:52:31,560 --> 00:52:35,010
may get some pushback if you try and go

00:52:33,089 --> 00:52:39,780
with anything other than get and okay

00:52:35,010 --> 00:52:43,170
I'm just I'm just saying the GPL vs. the

00:52:39,780 --> 00:52:45,210
BSD get you've got the web interface

00:52:43,170 --> 00:52:46,920
tools they're built in the fossil again

00:52:45,210 --> 00:52:49,140
it's a little bit complicated everybody

00:52:46,920 --> 00:52:51,450
admits this if you want to ease your

00:52:49,140 --> 00:52:53,010
approach look in if you don't use fossil

00:52:51,450 --> 00:52:57,810
but you want them easier than get at

00:52:53,010 --> 00:52:59,250
least look at mercurial I have never

00:52:57,810 --> 00:53:00,569
been able to find any documentation on

00:52:59,250 --> 00:53:04,560
the get file format does even know where

00:53:00,569 --> 00:53:06,390
that is have no idea the fossil file

00:53:04,560 --> 00:53:07,859
more format is specifically designed to

00:53:06,390 --> 00:53:10,349
be long lasting enduring

00:53:07,859 --> 00:53:13,290
I put the words I use and the

00:53:10,349 --> 00:53:16,740
documentation is designed to be used a

00:53:13,290 --> 00:53:20,550
read used and extended by people who are

00:53:16,740 --> 00:53:24,319
not yet born and it's it's it's

00:53:20,550 --> 00:53:28,230
explained in excruciating detail so it's

00:53:24,319 --> 00:53:29,910
it's designed to last get does the file

00:53:28,230 --> 00:53:31,470
versioning only fossil includes all this

00:53:29,910 --> 00:53:33,150
other stuff what are people saying about

00:53:31,470 --> 00:53:35,250
this stuff well you know here's some

00:53:33,150 --> 00:53:38,040
quotes from some things people missing

00:53:35,250 --> 00:53:41,010
about get get approaches we use the

00:53:38,040 --> 00:53:42,990
ability of iptables which is to say uh

00:53:41,010 --> 00:53:45,210
Turley useful unusable unless you have

00:53:42,990 --> 00:53:47,579
the man page to add to man page tattooed

00:53:45,210 --> 00:53:49,680
to your arm this next one is my favorite

00:53:47,579 --> 00:53:50,010
quote of all about git you're gonna love

00:53:49,680 --> 00:53:51,930
this one

00:53:50,010 --> 00:53:54,420
the simplest it's simplest to think of

00:53:51,930 --> 00:53:56,069
your git repository as a point in a

00:53:54,420 --> 00:53:57,810
high-dimensional code space in which

00:53:56,069 --> 00:53:58,980
branches are represented as in

00:53:57,810 --> 00:54:01,560
dimensional membranes

00:53:58,980 --> 00:54:03,450
mapping the spatial loci of successive

00:54:01,560 --> 00:54:07,680
commits into the projected manifold of

00:54:03,450 --> 00:54:10,500
each cloned repository if you understand

00:54:07,680 --> 00:54:13,640
that then I submit that git is the right

00:54:10,500 --> 00:54:16,349
configuration management system for you

00:54:13,640 --> 00:54:18,599
and you know and the real idea is the

00:54:16,349 --> 00:54:26,430
guy who wrote this it's not in jest he's

00:54:18,599 --> 00:54:27,780
serious here's the link it's uh we've

00:54:26,430 --> 00:54:29,040
been using git and github for a few

00:54:27,780 --> 00:54:31,170
months and it's not into it I'm hoping

00:54:29,040 --> 00:54:35,339
Sony will come up with a set of standard

00:54:31,170 --> 00:54:37,200
wrappers GUI to make it bearable so and

00:54:35,339 --> 00:54:38,730
contrast you know I'm getting comments

00:54:37,200 --> 00:54:40,710
like this from fossil opossum mesmerized

00:54:38,730 --> 00:54:42,300
me with simplicity especially after I

00:54:40,710 --> 00:54:45,589
struggled to get a bug tracking system

00:54:42,300 --> 00:54:45,589
to work with mercurial

00:54:46,650 --> 00:54:51,630
we run a large university to manage code

00:54:48,869 --> 00:54:53,369
with small team you know I you know this

00:54:51,630 --> 00:54:55,230
is this is a direct quote by the way

00:54:53,369 --> 00:54:57,660
this is I haven't edited this in any way

00:54:55,230 --> 00:55:02,400
to correct the typos and the email

00:54:57,660 --> 00:55:04,740
message with small team writes the runs

00:55:02,400 --> 00:55:06,329
everywhere ease of installation imported

00:55:04,740 --> 00:55:08,460
it I think and then say it runs in

00:55:06,329 --> 00:55:09,900
everywhere with ease of installation and

00:55:08,460 --> 00:55:11,190
portability is something that seems to

00:55:09,900 --> 00:55:15,380
be a good fit with the environment we

00:55:11,190 --> 00:55:15,380
have highly distributed

00:55:15,760 --> 00:55:20,530
very restrictive firewalls we are happy

00:55:17,800 --> 00:55:23,620
with it teaching master signs and PhD

00:55:20,530 --> 00:55:25,690
students it's been a smoother ride than

00:55:23,620 --> 00:55:29,830
get I have heard a lot of people tell me

00:55:25,690 --> 00:55:31,180
that fossil is the only distributed

00:55:29,830 --> 00:55:32,650
version control system that they can get

00:55:31,180 --> 00:55:35,920
to work through their restrictive

00:55:32,650 --> 00:55:37,480
corporate firewalls the other ones tend

00:55:35,920 --> 00:55:41,860
to assume kind of a clear channel

00:55:37,480 --> 00:55:44,560
through HTTP one of my simple hats I'm

00:55:41,860 --> 00:55:46,150
in a small team which uses git and goes

00:55:44,560 --> 00:55:47,560
on to describe pages of frustration

00:55:46,150 --> 00:55:49,060
which I omitted for you just to say

00:55:47,560 --> 00:55:51,490
thanks for false will make my life a lot

00:55:49,060 --> 00:55:56,290
easier and for not having a misanthropic

00:55:51,490 --> 00:55:58,990
command-line interface so that's a quick

00:55:56,290 --> 00:56:01,570
overview of fossil there's the website

00:55:58,990 --> 00:56:04,660
there if you want to learn more about it

00:56:01,570 --> 00:56:08,260
I think we probably I have five minutes

00:56:04,660 --> 00:56:11,530
for questions if there are any I also

00:56:08,260 --> 00:56:15,120
have stickers fossil stickers if you

00:56:11,530 --> 00:56:15,120
didn't get a fossil sticker

00:56:25,550 --> 00:56:30,390
the question is are there conversion

00:56:28,350 --> 00:56:34,109
utilities for converting from from

00:56:30,390 --> 00:56:34,740
repository formats other than get not at

00:56:34,109 --> 00:56:37,560
this time

00:56:34,740 --> 00:56:40,050
though I have less provisions in there

00:56:37,560 --> 00:56:42,330
to do this in the future the thinking at

00:56:40,050 --> 00:56:44,730
this point and and it seems to work out

00:56:42,330 --> 00:56:49,740
pretty well is that they get fast export

00:56:44,730 --> 00:56:52,260
format kludgy though it is has become

00:56:49,740 --> 00:56:54,050
sort of a lingua franca for transporting

00:56:52,260 --> 00:56:57,869
information between the various

00:56:54,050 --> 00:57:00,420
repositories there there are there are

00:56:57,869 --> 00:57:02,910
definite issues with get fast export but

00:57:00,420 --> 00:57:05,940
but everybody seems to understand it and

00:57:02,910 --> 00:57:08,010
so typically what you do is you export

00:57:05,940 --> 00:57:10,080
from one configuration management system

00:57:08,010 --> 00:57:12,540
to the fast export format and then

00:57:10,080 --> 00:57:15,119
import into another one that seems to be

00:57:12,540 --> 00:57:32,790
what everybody's doing another question

00:57:15,119 --> 00:57:35,190
was right here so the question is you

00:57:32,790 --> 00:57:37,320
know I'm fossil as self-hosting it's and

00:57:35,190 --> 00:57:40,850
and what what is my logical what what is

00:57:37,320 --> 00:57:43,680
my decision tree for determining when I

00:57:40,850 --> 00:57:47,310
take the latest fossil code and stick it

00:57:43,680 --> 00:57:48,990
on the server you know it's stable

00:57:47,310 --> 00:57:53,790
enough that I don't really worry about

00:57:48,990 --> 00:57:56,850
it I it on my local Linux desktop first

00:57:53,790 --> 00:57:58,619
and and then I I run a couple quick

00:57:56,850 --> 00:58:00,750
smoke tests and if everything seems to

00:57:58,619 --> 00:58:03,900
work I just go up to the server and I

00:58:00,750 --> 00:58:06,750
recompile it there and because I've got

00:58:03,900 --> 00:58:08,430
SQLite underneath it that's given me

00:58:06,750 --> 00:58:10,470
this transactional behavior and I've got

00:58:08,430 --> 00:58:12,630
all these self checks built in I hash

00:58:10,470 --> 00:58:17,880
things every way imaginable I'm using

00:58:12,630 --> 00:58:20,400
sha-1 and md5 okay to prevent a common

00:58:17,880 --> 00:58:21,869
mode failure okay and it and it's got

00:58:20,400 --> 00:58:24,330
all of these lots of different hashes

00:58:21,869 --> 00:58:26,880
that have to check out and if anything

00:58:24,330 --> 00:58:29,970
doesn't work out it doesn't commit the

00:58:26,880 --> 00:58:32,730
transaction so you really have to work

00:58:29,970 --> 00:58:35,580
hard and have a really really really

00:58:32,730 --> 00:58:36,810
serious bug to damage anything and so

00:58:35,580 --> 00:58:37,950
you know occasionally there are bugs

00:58:36,810 --> 00:58:39,990
that come up and no I can't

00:58:37,950 --> 00:58:42,810
check out anymore well I'll rebuild and

00:58:39,990 --> 00:58:44,910
and and and do it and fix the problem

00:58:42,810 --> 00:58:46,880
and get it going again but that's pretty

00:58:44,910 --> 00:58:50,490
rare it's it seems to be really stable

00:58:46,880 --> 00:58:52,859
so typically typically what's running on

00:58:50,490 --> 00:58:57,119
the server is maybe one or two check-ins

00:58:52,859 --> 00:58:59,099
behind what's actually in the tree if

00:58:57,119 --> 00:59:00,240
you look on the website down on the very

00:58:59,099 --> 00:59:03,329
bottom of the page in the lower

00:59:00,240 --> 00:59:05,400
left-hand corner there's the the date

00:59:03,329 --> 00:59:09,619
and time stamp for the version that's

00:59:05,400 --> 00:59:09,619
running two minutes for more questions

00:59:09,890 --> 00:59:24,089
if there another question well with the

00:59:22,230 --> 00:59:26,310
questions why do I use the CGI version

00:59:24,089 --> 00:59:28,260
rather than just running fossil serve on

00:59:26,310 --> 00:59:30,060
the host environment well one fossil

00:59:28,260 --> 00:59:32,430
serve has to be restarted and have to

00:59:30,060 --> 00:59:34,440
mess around with all of the startup

00:59:32,430 --> 00:59:36,060
scripts too if I'm running on something

00:59:34,440 --> 00:59:38,369
like hurricane electric it doesn't give

00:59:36,060 --> 00:59:40,160
me that option on Hurricane electric all

00:59:38,369 --> 00:59:42,869
I have is CGI

00:59:40,160 --> 00:59:44,400
okay as far as I know fossil it's the

00:59:42,869 --> 00:59:46,109
only full-featured configuration managed

00:59:44,400 --> 00:59:48,480
in the system that can run on a shared

00:59:46,109 --> 00:59:50,310
hosting environment like Hurricane

00:59:48,480 --> 00:59:52,890
electric everybody else you have to be

00:59:50,310 --> 00:59:54,270
able to start in your own server I don't

00:59:52,890 --> 00:59:56,160
have to write my own server it are

00:59:54,270 --> 00:59:59,819
startling the service it'll run purely

00:59:56,160 --> 01:00:02,430
out of CGI further questions thank you

00:59:59,819 --> 01:00:04,230
very much for your attendance and I

01:00:02,430 --> 01:00:07,700
think e note is next so I guess they

01:00:04,230 --> 01:00:07,700
need to start moving the walls out huh

01:00:08,390 --> 01:00:11,810
thank you very much

01:00:30,819 --> 01:00:35,019
about this I can help you like it we

01:00:33,369 --> 01:00:37,529
have the same problem or whatever than

01:00:35,019 --> 01:00:37,529
if you do here

01:00:40,820 --> 01:00:44,860
that's not the word out

01:00:42,800 --> 01:00:44,860
you

01:01:53,960 --> 01:01:59,520
as a service leader in cloud computing

01:01:56,010 --> 01:02:01,110
all we do is hosting computing to us the

01:01:59,520 --> 01:02:03,120
cloud is just the next generation of

01:02:01,110 --> 01:02:04,980
hosting and if someone who's been in the

01:02:03,120 --> 01:02:07,020
hosting industry for 12 years we feel

01:02:04,980 --> 01:02:08,130
we're in a unique position to really

01:02:07,020 --> 01:02:10,230
help bring these two worlds together

01:02:08,130 --> 01:02:12,600
these different sets of technologies and

01:02:10,230 --> 01:02:14,910
to help companies embrace this new world

01:02:12,600 --> 01:02:16,920
in this great new tool that allows

01:02:14,910 --> 01:02:19,530
faster innovation not only is it about

01:02:16,920 --> 01:02:24,900
us being responsive and accountable but

01:02:19,530 --> 01:02:27,770
it's about us doing more for you webos

01:02:24,900 --> 01:02:31,320
an OS that works the way that you do

01:02:27,770 --> 01:02:35,450
across all your devices HP Slate and

01:02:31,320 --> 01:02:35,450

YouTube URL: https://www.youtube.com/watch?v=-ceEWWqaVsI


