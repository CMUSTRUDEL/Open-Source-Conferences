Title: 2011 SouthEast LinuxFest - Tyler McAdams - The LinuxDNA Kernel Project
Publication date: 2012-03-13
Playlist: 2011 SouthEast LinuxFest
Description: 
	2011 SouthEast LinuxFest - Tyler McAdams - The LinuxDNA Kernel Project:  Increasing System Performance

This video is licensed under Creative Commons Attribution 3.0 Unported License.
Captions: 
	00:00:01,159 --> 00:00:07,319
the following presentation was recorded

00:00:04,230 --> 00:00:09,900
at the 2011 southeast linux fest in

00:00:07,319 --> 00:00:11,400
Spartanburg South Carolina it is

00:00:09,900 --> 00:00:14,219
licensed under a creative commons

00:00:11,400 --> 00:00:18,779
license for more information about the

00:00:14,219 --> 00:00:22,199
southeast linux fest visit wwcc linux

00:00:18,779 --> 00:00:24,060
fest org the southeast linux fest would

00:00:22,199 --> 00:00:27,210
like to thank the following diamond and

00:00:24,060 --> 00:00:47,940
platinum sponsors in 2011 for helping

00:00:27,210 --> 00:00:50,610
make these videos possible all right you

00:00:47,940 --> 00:00:52,770
guys ready to get started oh my god a

00:00:50,610 --> 00:00:55,739
blue screen of death now that is

00:00:52,770 --> 00:00:58,379
embarrassing i'm here at southeast linux

00:00:55,739 --> 00:01:01,199
fest and i just got caught with this if

00:00:58,379 --> 00:01:03,420
i only had my high performance colonel

00:01:01,199 --> 00:01:04,769
patch running on my system this would

00:01:03,420 --> 00:01:06,420
have never happened don't let it happen

00:01:04,769 --> 00:01:12,060
to you okay that's the end of that

00:01:06,420 --> 00:01:13,650
that's ice breaker right there it's

00:01:12,060 --> 00:01:19,049
always funny right you can't get away

00:01:13,650 --> 00:01:22,259
from it all right so ICC is anybody in

00:01:19,049 --> 00:01:26,490
here used ICC cool you guys know the new

00:01:22,259 --> 00:01:29,360
name for icc it's called xee now it's

00:01:26,490 --> 00:01:32,579
called composer XE or compiler XE

00:01:29,360 --> 00:01:36,860
because when you use icc you're not just

00:01:32,579 --> 00:01:36,860
creating nevermind

00:01:38,900 --> 00:01:51,509
let's see so if my slides work what are

00:01:45,090 --> 00:01:53,460
the possibilities there we go all right

00:01:51,509 --> 00:01:55,409
so obviously one of the big reasons that

00:01:53,460 --> 00:01:59,240
everybody uses ICC is extreme

00:01:55,409 --> 00:02:02,940
performance there's always you know a

00:01:59,240 --> 00:02:05,280
big competition between GCC and ICC it's

00:02:02,940 --> 00:02:07,700
very close but I see see in a lot of

00:02:05,280 --> 00:02:10,580
situations it's just a little bit faster

00:02:07,700 --> 00:02:13,920
some people that's not worth it you know

00:02:10,580 --> 00:02:17,340
there is a lot of work you know creating

00:02:13,920 --> 00:02:19,350
an ICC Colonel if I was Steve Jobs I

00:02:17,340 --> 00:02:23,340
might come up here and say you know it's

00:02:19,350 --> 00:02:25,050
easy to use and it just works that's not

00:02:23,340 --> 00:02:28,350
what we've got going on here you got to

00:02:25,050 --> 00:02:30,660
put in some time your compile is not

00:02:28,350 --> 00:02:32,430
going to happen the first time there's

00:02:30,660 --> 00:02:34,080
going to be some stuff some quirks

00:02:32,430 --> 00:02:36,180
because everybody's configuration is

00:02:34,080 --> 00:02:38,640
different everybody it's building there

00:02:36,180 --> 00:02:40,470
Colonel a little bit different so that

00:02:38,640 --> 00:02:44,510
kind of thing just has to be accounted

00:02:40,470 --> 00:02:46,980
for but once you get it built you know

00:02:44,510 --> 00:02:49,799
it is faster it's better it's an

00:02:46,980 --> 00:02:52,739
accomplishment so it's a project for

00:02:49,799 --> 00:02:55,769
hackers people who are interested in

00:02:52,739 --> 00:02:57,720
getting things working that are a little

00:02:55,769 --> 00:02:58,820
bit difficult so if you're the kind of

00:02:57,720 --> 00:03:02,250
guy who likes to take on a challenge

00:02:58,820 --> 00:03:05,250
this is the project for you you'll learn

00:03:02,250 --> 00:03:10,079
a lot and you learn a new skill you

00:03:05,250 --> 00:03:12,750
learn a new compiler diversification we

00:03:10,079 --> 00:03:15,000
can find bugs real easy with icc we'll

00:03:12,750 --> 00:03:21,030
get into that why we find interesting

00:03:15,000 --> 00:03:23,310
things and freedom really it gives well

00:03:21,030 --> 00:03:25,019
up until about a couple months ago it

00:03:23,310 --> 00:03:28,049
really gives freedom what there isn't

00:03:25,019 --> 00:03:30,840
any or there's very little in other

00:03:28,049 --> 00:03:32,600
words there's a little bit of a monopoly

00:03:30,840 --> 00:03:37,870
Richard Stallman is and then here

00:03:32,600 --> 00:03:47,000
not going to kill me okay all right so

00:03:37,870 --> 00:03:49,130
yeah yeah it's it's something that gives

00:03:47,000 --> 00:03:51,140
competition and competition is good I

00:03:49,130 --> 00:03:52,580
mean you know you can't play tennis

00:03:51,140 --> 00:03:54,080
without somebody else and you usually

00:03:52,580 --> 00:03:57,560
get better when you have somebody to

00:03:54,080 --> 00:03:58,970
play against there's that there's some

00:03:57,560 --> 00:04:02,210
other guys out there that have got

00:03:58,970 --> 00:04:04,910
Colonels running solaris their compiler

00:04:02,210 --> 00:04:06,590
sweet supposedly I haven't seen it can't

00:04:04,910 --> 00:04:07,760
find any patches but they've built the

00:04:06,590 --> 00:04:11,120
colonel as what they're saying they

00:04:07,760 --> 00:04:14,930
provoke the Linux kernel si lang which

00:04:11,120 --> 00:04:17,570
is the BSD group evidently has done this

00:04:14,930 --> 00:04:20,330
there's some other smaller compilers out

00:04:17,570 --> 00:04:23,300
there that have done that as far as I'm

00:04:20,330 --> 00:04:24,920
concerned that's great because I think

00:04:23,300 --> 00:04:28,100
that that takes the code that we have

00:04:24,920 --> 00:04:32,030
and makes it better because you can find

00:04:28,100 --> 00:04:38,200
bugs that you normally can't find it's

00:04:32,030 --> 00:04:41,720
the diversification of a code also

00:04:38,200 --> 00:04:43,370
regarding freedom ICC I don't know about

00:04:41,720 --> 00:04:47,840
the other compilers because I haven't

00:04:43,370 --> 00:04:50,510
really gotten into them as much they ICC

00:04:47,840 --> 00:04:53,420
that is has some flags that have been

00:04:50,510 --> 00:04:55,280
incorporated in older patches that kind

00:04:53,420 --> 00:04:58,670
of gives you another dimension another

00:04:55,280 --> 00:05:01,190
extra part of the fact that Linux is

00:04:58,670 --> 00:05:04,130
free and that you can do with it what

00:05:01,190 --> 00:05:05,930
you want what we'll get into that it

00:05:04,130 --> 00:05:07,850
really has to do with pgo a profile

00:05:05,930 --> 00:05:10,970
guided optimization what you can do with

00:05:07,850 --> 00:05:12,740
that you know if you're compiling

00:05:10,970 --> 00:05:15,590
something to make it faster you're

00:05:12,740 --> 00:05:19,130
usually considering your architecture

00:05:15,590 --> 00:05:21,620
you've got a p4 system and you trade the

00:05:19,130 --> 00:05:23,810
flags and then you recompile it well

00:05:21,620 --> 00:05:26,180
that makes your system faster right

00:05:23,810 --> 00:05:28,730
which is going to help you out but what

00:05:26,180 --> 00:05:31,310
about how you use your system is there a

00:05:28,730 --> 00:05:34,400
way that custom tailor it even more so

00:05:31,310 --> 00:05:36,320
it reflects your usage patterns and so

00:05:34,400 --> 00:05:39,460
that's something that our patch set has

00:05:36,320 --> 00:05:39,460
the possibility of doing

00:05:46,440 --> 00:05:53,160
so how did it all start it started very

00:05:49,590 --> 00:05:58,260
humbly on gin to forums lab Jinsu users

00:05:53,160 --> 00:06:00,090
in here anybody so so you know when you

00:05:58,260 --> 00:06:01,800
first start gin to all that code is

00:06:00,090 --> 00:06:03,630
awesome it looks like the matrix you

00:06:01,800 --> 00:06:05,160
know you're compiling stuff and you're

00:06:03,630 --> 00:06:07,770
hoping it works and when it does it's

00:06:05,160 --> 00:06:09,780
like yes but it can get a little old it

00:06:07,770 --> 00:06:12,570
can get a little pedantic right so I

00:06:09,780 --> 00:06:14,670
mean after a while you're starting to

00:06:12,570 --> 00:06:17,190
think what can i do to snazz this up I

00:06:14,670 --> 00:06:19,350
was reading up on icc as i move this is

00:06:17,190 --> 00:06:22,110
interesting oh it's faster i got to try

00:06:19,350 --> 00:06:24,840
this it's for you yes so I downloaded it

00:06:22,110 --> 00:06:26,670
i emerged it the emerge out there i

00:06:24,840 --> 00:06:27,990
should say right now is really old don't

00:06:26,670 --> 00:06:30,030
do it we've got Annie build that will

00:06:27,990 --> 00:06:31,470
give you something a little bit a lot

00:06:30,030 --> 00:06:37,860
better than what it would really

00:06:31,470 --> 00:06:40,560
originally hand out there but that was

00:06:37,860 --> 00:06:42,600
the reason is it was something else to

00:06:40,560 --> 00:06:44,190
do it was faster i started messing

00:06:42,600 --> 00:06:47,070
around with it i started compiling

00:06:44,190 --> 00:06:49,170
things like python like pearl you know I

00:06:47,070 --> 00:06:51,870
was seeing good performance increases

00:06:49,170 --> 00:06:55,400
with these applications and I thought to

00:06:51,870 --> 00:06:59,750
myself well why not the colonel why not

00:06:55,400 --> 00:07:02,190
why not go after try the bag the elfin

00:06:59,750 --> 00:07:03,660
went out on Google is a little crazy and

00:07:02,190 --> 00:07:05,250
I thought you know maybe there's

00:07:03,660 --> 00:07:07,800
somebody as crazy as me maybe somebody

00:07:05,250 --> 00:07:12,030
out there has tried this and sure enough

00:07:07,800 --> 00:07:13,560
this guy right here Ingo a koblan i'm

00:07:12,030 --> 00:07:16,590
not sure if i pronounce his name ever

00:07:13,560 --> 00:07:20,190
write his german but he had some really

00:07:16,590 --> 00:07:24,419
mad scientist's level patches out there

00:07:20,190 --> 00:07:26,120
that I'd like to see him back on the

00:07:24,419 --> 00:07:28,320
project because he's just an amazing

00:07:26,120 --> 00:07:30,450
individual one of the things that he did

00:07:28,320 --> 00:07:33,360
with this his colonel sets which were

00:07:30,450 --> 00:07:35,190
basically through 264 and it's 269 and

00:07:33,360 --> 00:07:38,220
these had all the bells and whistles

00:07:35,190 --> 00:07:39,919
that i'll be talking about there have

00:07:38,220 --> 00:07:42,960
been some hardware architectural changes

00:07:39,919 --> 00:07:44,910
that have made it harder of course a

00:07:42,960 --> 00:07:47,310
software or you know changes all the

00:07:44,910 --> 00:07:51,590
time but there's been some basic

00:07:47,310 --> 00:07:53,310
inherence changes to then sell and amt

00:07:51,590 --> 00:07:55,440
architectures that have made it a little

00:07:53,310 --> 00:07:56,910
bit harder to do

00:07:55,440 --> 00:07:59,250
what you could do with these patches

00:07:56,910 --> 00:08:01,370
they don't they don't work even if we

00:07:59,250 --> 00:08:03,630
could get them to the point where

00:08:01,370 --> 00:08:07,530
everything the code works compiles

00:08:03,630 --> 00:08:09,800
normally all the other stuff pgo and

00:08:07,530 --> 00:08:11,550
other flags don't work correctly

00:08:09,800 --> 00:08:14,250
unfortunately it takes a lot of

00:08:11,550 --> 00:08:15,870
debugging I've got a guy working on and

00:08:14,250 --> 00:08:18,990
working on and working on it you can't

00:08:15,870 --> 00:08:20,550
get it to work so if you guys are

00:08:18,990 --> 00:08:23,610
interested know anybody who is

00:08:20,550 --> 00:08:25,290
interested this is something that is

00:08:23,610 --> 00:08:27,240
going to create a patch set this can be

00:08:25,290 --> 00:08:32,010
faster than anything out there it's a

00:08:27,240 --> 00:08:33,750
specific purpose patchset is how it does

00:08:32,010 --> 00:08:35,729
a custom tailors your kernel for

00:08:33,750 --> 00:08:38,219
whatever the usage is so it takes it a

00:08:35,729 --> 00:08:39,870
little bit step step further from what

00:08:38,219 --> 00:08:42,960
you would consider a regular gin to

00:08:39,870 --> 00:08:47,400
build on how it does thanks our first

00:08:42,960 --> 00:08:49,380
proof of concept was 26 22 26 23 and

00:08:47,400 --> 00:08:51,570
above had some code that would not

00:08:49,380 --> 00:08:53,970
compile we ran into some big errors and

00:08:51,570 --> 00:08:55,740
so we just kind of gave up on that and

00:08:53,970 --> 00:08:59,400
we found out that 262 had not

00:08:55,740 --> 00:09:02,340
implemented those yet so at this point i

00:08:59,400 --> 00:09:03,780
was on the intel forums and i was

00:09:02,340 --> 00:09:05,700
working with one of the guys that I work

00:09:03,780 --> 00:09:11,040
with still today a guy named FEI long

00:09:05,700 --> 00:09:14,010
long long he is out of Singapore excuse

00:09:11,040 --> 00:09:17,460
me Shanghai China him in a guy named Liu

00:09:14,010 --> 00:09:18,780
ye Qing who does not work for Intel but

00:09:17,460 --> 00:09:21,930
these two guys I started working with

00:09:18,780 --> 00:09:23,130
him on the forums and this got a lot of

00:09:21,930 --> 00:09:24,960
attention I don't know how many hits

00:09:23,130 --> 00:09:27,540
that did but everybody wanted this thing

00:09:24,960 --> 00:09:28,740
to work and Louie just you know we were

00:09:27,540 --> 00:09:30,750
me and Fei Long we're just trying

00:09:28,740 --> 00:09:33,120
everything we're starting to rewrite ASM

00:09:30,750 --> 00:09:35,490
code and all sorts of crazy stuff to try

00:09:33,120 --> 00:09:38,010
to get it to work and that wasn't

00:09:35,490 --> 00:09:39,360
helping out so he just came in and he

00:09:38,010 --> 00:09:43,920
just added this line he said well what

00:09:39,360 --> 00:09:47,640
about this really okay so we'll try it

00:09:43,920 --> 00:09:50,910
why not nothing else is working we did a

00:09:47,640 --> 00:09:53,070
make we had a colonel so we were like

00:09:50,910 --> 00:09:55,350
wow this is something and that got me

00:09:53,070 --> 00:09:57,540
really excited because I was like this

00:09:55,350 --> 00:09:59,490
actually works you know this is

00:09:57,540 --> 00:10:01,710
something that the community confuse

00:09:59,490 --> 00:10:04,740
they could use access to the patch set

00:10:01,710 --> 00:10:05,550
so that's basically the first pass

00:10:04,740 --> 00:10:08,990
should ever had

00:10:05,550 --> 00:10:08,990
our mirror that I set up

00:10:15,020 --> 00:10:19,400
alright so I already talked about Louie

00:10:17,060 --> 00:10:22,700
Ching he's head of development he's in

00:10:19,400 --> 00:10:24,950
Shanghai China I have to work with him

00:10:22,700 --> 00:10:27,200
at night because he's on the other side

00:10:24,950 --> 00:10:30,620
of the planet and I did that for two

00:10:27,200 --> 00:10:32,330
years he's been hard to get in touch

00:10:30,620 --> 00:10:34,580
with right now because I just took a

00:10:32,330 --> 00:10:38,450
very full time position with LexisNexis

00:10:34,580 --> 00:10:41,150
so I hate to say that I have not given

00:10:38,450 --> 00:10:44,540
the attention that i usually do for this

00:10:41,150 --> 00:10:47,060
project but I want to see it do good and

00:10:44,540 --> 00:10:49,820
that's why I'm here today to make sure

00:10:47,060 --> 00:10:51,830
that it keeps producing patches and that

00:10:49,820 --> 00:10:54,560
kind of thing but yeah he's the go-to

00:10:51,830 --> 00:10:56,150
guy I mean I'll get to the point I'm the

00:10:54,560 --> 00:10:57,860
where near this guy's level you know

00:10:56,150 --> 00:10:59,600
I'll get to the point where i've tried

00:10:57,860 --> 00:11:02,510
this I tried this it's not working I

00:10:59,600 --> 00:11:05,060
gone to the make file change the flags

00:11:02,510 --> 00:11:08,210
still not compiling and he'll come back

00:11:05,060 --> 00:11:10,850
yet what about this I'm like okay let's

00:11:08,210 --> 00:11:12,320
try and then it works he gets all sorts

00:11:10,850 --> 00:11:14,480
of stuff to compile that I didn't think

00:11:12,320 --> 00:11:16,820
people come back and say well you can't

00:11:14,480 --> 00:11:20,030
do X work it's not you can't compile it

00:11:16,820 --> 00:11:22,280
oh we've tried openssl you can't compile

00:11:20,030 --> 00:11:23,780
it and then I tell that to him I say you

00:11:22,280 --> 00:11:26,510
know we got some problems if we want to

00:11:23,780 --> 00:11:28,220
do a holistic system these are not going

00:11:26,510 --> 00:11:31,100
to compile and he comes back he's like

00:11:28,220 --> 00:11:35,360
oh yeah yeah got it to work early yeah

00:11:31,100 --> 00:11:38,930
okay i just did no GCC with openssl and

00:11:35,360 --> 00:11:40,930
got to compile and voila you got better

00:11:38,930 --> 00:11:43,760
performance and I was like okay well

00:11:40,930 --> 00:11:46,220
that went off and so it's got to the

00:11:43,760 --> 00:11:48,950
point where we get a lot of pretty much

00:11:46,220 --> 00:11:52,580
everything except for a few things out

00:11:48,950 --> 00:11:57,380
there like GCC go figure it doesn't want

00:11:52,580 --> 00:12:00,190
to compile with icc yeah so I have to

00:11:57,380 --> 00:12:00,190
talk to mr. storm

00:12:05,200 --> 00:12:12,910
so we still have some other members out

00:12:08,440 --> 00:12:15,760
humor he is in Austria and he is always

00:12:12,910 --> 00:12:16,990
there everybody in the project just kind

00:12:15,760 --> 00:12:20,620
of comes and goes but when they have

00:12:16,990 --> 00:12:22,540
something that they want add it in well

00:12:20,620 --> 00:12:24,280
usually it's Alex he's always talking

00:12:22,540 --> 00:12:26,800
about wanting to get some IRC stuff

00:12:24,280 --> 00:12:28,090
going on so that's always always

00:12:26,800 --> 00:12:30,070
hammering me about that so we're going

00:12:28,090 --> 00:12:32,140
to try to get that going I met Alex in

00:12:30,070 --> 00:12:35,950
the Ginsu forums he was one of the guys

00:12:32,140 --> 00:12:39,130
it was kind of they're like yeah you're

00:12:35,950 --> 00:12:40,930
crazy but it might work you know and I

00:12:39,130 --> 00:12:43,960
was like okay that's good that's good to

00:12:40,930 --> 00:12:46,810
hear so he was moral support there and

00:12:43,960 --> 00:12:54,220
you know guess everybody else and pull

00:12:46,810 --> 00:12:55,780
them this is the son he is a web dev I

00:12:54,220 --> 00:12:58,270
have Drupal here but he does all sorts

00:12:55,780 --> 00:13:00,490
of stuff and he is working on the

00:12:58,270 --> 00:13:03,760
community right now really all we have

00:13:00,490 --> 00:13:06,130
as a Google Group and the mirror and

00:13:03,760 --> 00:13:07,780
it's very stripped down because I just

00:13:06,130 --> 00:13:09,850
don't have time to make something fancy

00:13:07,780 --> 00:13:12,100
you know and if you're using Ginsu

00:13:09,850 --> 00:13:13,540
you're probably using links or w get to

00:13:12,100 --> 00:13:17,740
get your files anyway you really don't

00:13:13,540 --> 00:13:19,720
care so I've just left it at that so

00:13:17,740 --> 00:13:26,620
he's going to come in he's going to make

00:13:19,720 --> 00:13:29,020
a community either either repository

00:13:26,620 --> 00:13:32,830
everything that a good project should

00:13:29,020 --> 00:13:36,640
have so handing off the reins that let

00:13:32,830 --> 00:13:38,410
him do that the next guy does not like

00:13:36,640 --> 00:13:42,730
to give out his name he just goes by

00:13:38,410 --> 00:13:47,500
dark basic he grade he created a great

00:13:42,730 --> 00:13:51,310
ebuild a 64-bit ebuild that will install

00:13:47,500 --> 00:13:55,420
both 32-bit and 64-bit parts into gentoo

00:13:51,310 --> 00:14:00,490
so it will compile correctly that was

00:13:55,420 --> 00:14:03,850
with 10.1 points72 at the latest and now

00:14:00,490 --> 00:14:05,000
this week I wanted to bring in a stage

00:14:03,850 --> 00:14:06,110
and

00:14:05,000 --> 00:14:08,690
virtual machine for people to play

00:14:06,110 --> 00:14:10,640
around with and it doesn't work there's

00:14:08,690 --> 00:14:12,200
some been some changes and I've been

00:14:10,640 --> 00:14:13,940
beating my head up against a wall

00:14:12,200 --> 00:14:15,740
unfortunately guys I'm sorry I don't

00:14:13,940 --> 00:14:17,690
have that for you if we will have that

00:14:15,740 --> 00:14:21,950
soon because that's really the best way

00:14:17,690 --> 00:14:23,960
to experiment with Ginsu it gives you

00:14:21,950 --> 00:14:26,120
all your flags it you know you can put

00:14:23,960 --> 00:14:28,010
them down and you can just do mirchi

00:14:26,120 --> 00:14:30,680
world and see what compiles and what not

00:14:28,010 --> 00:14:32,660
and you can get a pretty fast system and

00:14:30,680 --> 00:14:35,630
that way marketable faster than if you

00:14:32,660 --> 00:14:37,400
had just done it with GCC some of the

00:14:35,630 --> 00:14:40,430
advanced flags don't always compile

00:14:37,400 --> 00:14:44,300
don't expect them to you might want to

00:14:40,430 --> 00:14:46,220
go on a flag by flag basis reportage for

00:14:44,300 --> 00:14:47,360
that kind of thing but we've got we've

00:14:46,220 --> 00:14:49,370
got stuff out there we've got

00:14:47,360 --> 00:14:50,890
information and we'll be putting that in

00:14:49,370 --> 00:14:53,420
some community to let everybody know

00:14:50,890 --> 00:14:54,860
what's compiling what's not what are the

00:14:53,420 --> 00:14:57,830
best flags what are you going to get the

00:14:54,860 --> 00:15:00,200
best performance out of you know good

00:14:57,830 --> 00:15:03,710
things to off of that good things to

00:15:00,200 --> 00:15:05,390
compile or Python if your Python

00:15:03,710 --> 00:15:07,580
programmer and you want it to get to the

00:15:05,390 --> 00:15:09,860
point where it's unoptimized see like

00:15:07,580 --> 00:15:12,500
which is you know that's the golden

00:15:09,860 --> 00:15:14,510
Grail for a lot of Python developers try

00:15:12,500 --> 00:15:17,630
ICC I think you'll be happy with the

00:15:14,510 --> 00:15:19,700
results pearl that's another one that's

00:15:17,630 --> 00:15:20,780
going to give you better results you

00:15:19,700 --> 00:15:22,460
know there's a whole bunch of them out

00:15:20,780 --> 00:15:26,540
there that's on the chin to wiki we have

00:15:22,460 --> 00:15:29,300
some of them on our mirror but yeah

00:15:26,540 --> 00:15:32,390
working shot I think I should mention

00:15:29,300 --> 00:15:35,900
that ICC is free you do have to have a

00:15:32,390 --> 00:15:40,970
license it is free for individuals now

00:15:35,900 --> 00:15:43,190
if you're a corporation with money yeah

00:15:40,970 --> 00:15:46,010
they want they want money for that so it

00:15:43,190 --> 00:15:48,610
is closed source open source they don't

00:15:46,010 --> 00:15:52,670
want you doing some stuff to the

00:15:48,610 --> 00:15:54,560
compiler in certain situations so but

00:15:52,670 --> 00:15:56,420
for what its intended for it's

00:15:54,560 --> 00:15:59,440
absolutely free for you guys to go out

00:15:56,420 --> 00:15:59,440
there and experiment with

00:15:59,990 --> 00:16:04,640
I suggested if you find it fun you like

00:16:02,630 --> 00:16:10,250
compiling you light into something that

00:16:04,640 --> 00:16:13,370
will open your eyes good bringing on

00:16:10,250 --> 00:16:17,420
that subject a little bit more is our

00:16:13,370 --> 00:16:23,180
Colonel non GPL know it will work with

00:16:17,420 --> 00:16:25,370
Alf XE installed composer FC ACC is free

00:16:23,180 --> 00:16:28,730
for your personal usage and our patches

00:16:25,370 --> 00:16:31,070
that we give out our GPL to point of

00:16:28,730 --> 00:16:32,450
code and that's why we put them back in

00:16:31,070 --> 00:16:34,399
the community we're going to make sure

00:16:32,450 --> 00:16:38,680
that everybody sees the changes that

00:16:34,399 --> 00:16:38,680
we've made and has that available

00:16:46,240 --> 00:16:53,290
so some of these are successes some of

00:16:49,480 --> 00:16:55,600
them not so much the first fast and easy

00:16:53,290 --> 00:16:59,649
to make pretty much a success we have

00:16:55,600 --> 00:17:01,240
changes and how we do compiling we kind

00:16:59,649 --> 00:17:04,569
of need a streamline that so we have it

00:17:01,240 --> 00:17:06,370
more into we decide one method or the

00:17:04,569 --> 00:17:08,679
other right now we have several methods

00:17:06,370 --> 00:17:11,380
and it kind of changes depending on who

00:17:08,679 --> 00:17:14,050
is heading up creating the patch you

00:17:11,380 --> 00:17:15,699
know if it's Intel they do it one way if

00:17:14,050 --> 00:17:17,890
it's a community they kind of trying to

00:17:15,699 --> 00:17:19,780
get everything in the patch so it's

00:17:17,890 --> 00:17:22,920
create the patch and then you don't have

00:17:19,780 --> 00:17:27,250
anything in between ICC to create the

00:17:22,920 --> 00:17:31,330
colonel we have a deal with SGI they've

00:17:27,250 --> 00:17:35,740
given us an all take super computer to

00:17:31,330 --> 00:17:40,450
get the Itanium chip compiled with it

00:17:35,740 --> 00:17:43,150
and the reason for that is that itanium

00:17:40,450 --> 00:17:45,490
ships are kind of intimately linked to

00:17:43,150 --> 00:17:48,130
the compiler they rely a little bit more

00:17:45,490 --> 00:17:51,250
on what the compiler can give them for

00:17:48,130 --> 00:17:53,800
their performance and they generally are

00:17:51,250 --> 00:17:56,679
faster you know itanium doesn't always

00:17:53,800 --> 00:17:59,260
get a lot of fanfare you shouldn't never

00:17:56,679 --> 00:18:01,000
named your you know your CPU after

00:17:59,260 --> 00:18:04,600
something that sounds like the Titanic

00:18:01,000 --> 00:18:06,580
it's not gonna not going to work right

00:18:04,600 --> 00:18:11,620
you know it doesn't matter how good it

00:18:06,580 --> 00:18:15,640
is just forget about it the mob lemn

00:18:11,620 --> 00:18:20,520
project was something that max domi cup

00:18:15,640 --> 00:18:23,440
in 20 he's out in Oregon wanted us to do

00:18:20,520 --> 00:18:29,700
Max is an embedded space he does a lot

00:18:23,440 --> 00:18:32,100
of Adam kind of development great guy

00:18:29,700 --> 00:18:34,480
unfortunately right now our resources

00:18:32,100 --> 00:18:36,840
we're not at the point where we have the

00:18:34,480 --> 00:18:39,220
time to be able to create those repos

00:18:36,840 --> 00:18:42,309
there's some other stuff out there that

00:18:39,220 --> 00:18:44,440
we have to do to get that we get tangled

00:18:42,309 --> 00:18:46,900
up a little bit and legalities because

00:18:44,440 --> 00:18:49,030
well you can't really redistribute that

00:18:46,900 --> 00:18:52,120
compiler with your code right because

00:18:49,030 --> 00:18:54,100
that's closed source so then I want you

00:18:52,120 --> 00:18:55,960
to do that what they do is they give you

00:18:54,100 --> 00:18:58,240
the libs you've got redistributable

00:18:55,960 --> 00:18:59,360
lives well that's nice but we're

00:18:58,240 --> 00:19:02,390
redistributing

00:18:59,360 --> 00:19:04,460
rpms so we've got to make an RPM out of

00:19:02,390 --> 00:19:06,110
that and get that and that's kind of a

00:19:04,460 --> 00:19:07,790
tangled mess and you know that's

00:19:06,110 --> 00:19:09,740
something that we talked to until about

00:19:07,790 --> 00:19:11,510
so if we can get that hammered out and

00:19:09,740 --> 00:19:14,270
we can find somebody who's willing to do

00:19:11,510 --> 00:19:17,210
those rpms that's the kind of thing that

00:19:14,270 --> 00:19:20,929
we'd like to get going but right now the

00:19:17,210 --> 00:19:22,940
focus is on making the patches that's

00:19:20,929 --> 00:19:24,740
that's the main thing because that's

00:19:22,940 --> 00:19:26,000
what people are after is two extra speed

00:19:24,740 --> 00:19:28,240
they're going to be able to get from our

00:19:26,000 --> 00:19:28,240
patches

00:19:33,260 --> 00:19:41,900
so the visions why we do the craziness

00:19:37,130 --> 00:19:45,110
behind it general PC computing in a

00:19:41,900 --> 00:19:49,480
general-purpose computing versus

00:19:45,110 --> 00:19:51,890
specific purchase purpose computing

00:19:49,480 --> 00:19:53,870
general-purpose computing is basically

00:19:51,890 --> 00:19:56,260
what you buy when you go to microcenter

00:19:53,870 --> 00:19:59,450
or walmart and you pick up a box and

00:19:56,260 --> 00:20:01,640
you've got windows seven on there you

00:19:59,450 --> 00:20:04,340
know its installed but it's kind of like

00:20:01,640 --> 00:20:06,080
yeah I'm here well what do you want me

00:20:04,340 --> 00:20:09,740
to use when you go to mine one of my

00:20:06,080 --> 00:20:12,410
four I'm not optimized really but you

00:20:09,740 --> 00:20:14,990
know i can run anything specific purpose

00:20:12,410 --> 00:20:17,570
computing is more for the server segment

00:20:14,990 --> 00:20:19,700
is for things that do one purpose you've

00:20:17,570 --> 00:20:21,650
got a web server out there you've got a

00:20:19,700 --> 00:20:23,180
database out there well you're not gonna

00:20:21,650 --> 00:20:24,370
be surfing the web on that you're not

00:20:23,180 --> 00:20:28,010
gonna be doing other stuff like that

00:20:24,370 --> 00:20:29,990
it's taken and all that stuff is swept

00:20:28,010 --> 00:20:32,360
away and it's optimized for what you use

00:20:29,990 --> 00:20:35,240
it for there are a lot of big companies

00:20:32,360 --> 00:20:36,980
like IBM they're investing in getting

00:20:35,240 --> 00:20:39,200
the hardware and the software to the

00:20:36,980 --> 00:20:42,370
state where it is an appliance it does

00:20:39,200 --> 00:20:47,450
what it does it's secure it's fast and

00:20:42,370 --> 00:20:49,880
that's his purpose deployment maybe a

00:20:47,450 --> 00:20:51,140
little bit more of a pain because right

00:20:49,880 --> 00:20:54,530
now you can just take a general purpose

00:20:51,140 --> 00:20:56,090
box throw whatever on it and it'll do

00:20:54,530 --> 00:20:58,460
what you want but then you've got all

00:20:56,090 --> 00:21:00,410
this other stuff out there taking up cpu

00:20:58,460 --> 00:21:02,750
it's taking up memory and sticking up

00:21:00,410 --> 00:21:04,640
you know everything else hard drives and

00:21:02,750 --> 00:21:05,840
you know there's a security risks

00:21:04,640 --> 00:21:08,570
involved with that the code is

00:21:05,840 --> 00:21:10,460
unoptimized I mean it's it's quick and

00:21:08,570 --> 00:21:11,750
dirty but I mean if you get to the point

00:21:10,460 --> 00:21:12,920
where you want something a little bit

00:21:11,750 --> 00:21:15,200
more polished you want to save some

00:21:12,920 --> 00:21:16,820
money I think it's worth the time and

00:21:15,200 --> 00:21:19,070
effort to get something that's going to

00:21:16,820 --> 00:21:24,890
you know get the job done faster with

00:21:19,070 --> 00:21:28,270
less electricity so that's why we think

00:21:24,890 --> 00:21:30,830
this is a good idea for the enterprise

00:21:28,270 --> 00:21:33,410
argument there a lot of times is that

00:21:30,830 --> 00:21:36,770
you know well is it worth the time that

00:21:33,410 --> 00:21:38,450
you put your your sis admin you know to

00:21:36,770 --> 00:21:41,240
compile all this code

00:21:38,450 --> 00:21:43,010
running well I mean you can pile it on

00:21:41,240 --> 00:21:45,890
one system if you've got a cluster you

00:21:43,010 --> 00:21:48,020
move it to all the other boxes so I mean

00:21:45,890 --> 00:21:51,710
right there that's one install versus a

00:21:48,020 --> 00:21:53,120
million kick-starts or whatever and then

00:21:51,710 --> 00:21:55,400
you've got a system that's a lot faster

00:21:53,120 --> 00:21:58,700
so you know it's going to save money

00:21:55,400 --> 00:22:01,540
inside the store that's it soon so

00:21:58,700 --> 00:22:06,020
they're examples low-level examples

00:22:01,540 --> 00:22:09,770
hardware risc cpu for networking it's a

00:22:06,020 --> 00:22:11,930
big Indian ship usually and so network

00:22:09,770 --> 00:22:14,060
packets are in big Indian so there's

00:22:11,930 --> 00:22:17,750
less translation that has to go on there

00:22:14,060 --> 00:22:20,090
so that's something that makes things

00:22:17,750 --> 00:22:22,820
faster because it's optimized for what

00:22:20,090 --> 00:22:24,200
is using for a lot of network appliances

00:22:22,820 --> 00:22:27,530
are all risk and that's one of the

00:22:24,200 --> 00:22:29,570
reasons behind that software off

00:22:27,530 --> 00:22:31,340
obviously you hear me talk about gentoo

00:22:29,570 --> 00:22:33,430
linux a lot the ability to compile a

00:22:31,340 --> 00:22:35,780
system for a specific platform

00:22:33,430 --> 00:22:38,960
streamline the software for the specific

00:22:35,780 --> 00:22:42,530
purpose and create web appliances for

00:22:38,960 --> 00:22:44,540
the specific purposes we're ready to

00:22:42,530 --> 00:22:46,990
take both of these and involve them to

00:22:44,540 --> 00:22:46,990
the next level

00:22:50,809 --> 00:22:55,320
like I was saying optimized code

00:22:53,010 --> 00:22:58,920
executes faster it takes less time on

00:22:55,320 --> 00:23:01,740
the same hardware so if you want to save

00:22:58,920 --> 00:23:03,360
money you know hardware is expensive you

00:23:01,740 --> 00:23:05,340
might want to think about just doing a

00:23:03,360 --> 00:23:07,770
little bit of reconfiguration to your

00:23:05,340 --> 00:23:10,370
systems instead of going on 14 out money

00:23:07,770 --> 00:23:13,880
especially in situation that we're in

00:23:10,370 --> 00:23:13,880
the economy

00:23:16,710 --> 00:23:22,860
so why else move from monolithic OSS I

00:23:20,370 --> 00:23:26,490
think this is the best example that I've

00:23:22,860 --> 00:23:29,370
come across so Windows has 50 million

00:23:26,490 --> 00:23:31,890
lines of code not including applications

00:23:29,370 --> 00:23:33,690
like office it's a gigantic monolithic

00:23:31,890 --> 00:23:38,039
style operating system ready for

00:23:33,690 --> 00:23:39,929
anything so I think it was phoenix bios

00:23:38,039 --> 00:23:41,700
that was doing some stuff where they

00:23:39,929 --> 00:23:43,320
were trying to make instant on bios and

00:23:41,700 --> 00:23:45,360
they were trying to calculate the time

00:23:43,320 --> 00:23:47,640
and they were trying to figure out why

00:23:45,360 --> 00:23:49,500
the hell does it take this long for

00:23:47,640 --> 00:23:51,270
windows to load and they started

00:23:49,500 --> 00:23:54,059
thinking about all calculations and they

00:23:51,270 --> 00:23:57,380
came up with 20 billion cpu operations

00:23:54,059 --> 00:24:00,270
just to get to the logon screen which is

00:23:57,380 --> 00:24:01,799
that's pretty ridiculous you think about

00:24:00,270 --> 00:24:05,070
it i'm not sure what's going on there

00:24:01,799 --> 00:24:10,049
but a lot of that i think can be kind

00:24:05,070 --> 00:24:12,419
cut out streamlined okay you know which

00:24:10,049 --> 00:24:14,789
you know is why solid state drives are

00:24:12,419 --> 00:24:17,610
such a good idea for windows boxes

00:24:14,789 --> 00:24:19,470
because you know I cuts down on it yeah

00:24:17,610 --> 00:24:21,210
i should mention that icc is a fast

00:24:19,470 --> 00:24:23,039
colonel set but if you're expecting it

00:24:21,210 --> 00:24:25,980
to be faster than a hardware solution

00:24:23,039 --> 00:24:28,740
like a solid state drive or GPU

00:24:25,980 --> 00:24:31,559
computing no it's not going to do that

00:24:28,740 --> 00:24:38,640
it's not at a point icc does have

00:24:31,559 --> 00:24:41,399
plugins for cuda so that you can you can

00:24:38,640 --> 00:24:44,039
commingle those api's and gets the

00:24:41,399 --> 00:24:46,789
faster execution on your codes that's

00:24:44,039 --> 00:24:46,789
something that's going to

00:24:50,380 --> 00:24:56,710
50 million lines of code well you think

00:24:53,730 --> 00:25:00,220
usually somewhere between 12 to 6

00:24:56,710 --> 00:25:02,380
million lines of code for the colonel in

00:25:00,220 --> 00:25:04,240
that obviously depends on your Colonel

00:25:02,380 --> 00:25:05,350
how its configured and everything like

00:25:04,240 --> 00:25:06,880
that i'm guessing that would be

00:25:05,350 --> 00:25:08,530
something like a red hat system but

00:25:06,880 --> 00:25:12,550
that's the numbers somewhere between

00:25:08,530 --> 00:25:14,680
there is what i always see for that so

00:25:12,550 --> 00:25:16,630
that's a lot slimmed down and then you

00:25:14,680 --> 00:25:19,120
know your service process is really a

00:25:16,630 --> 00:25:22,180
little bit slim down it's a server you

00:25:19,120 --> 00:25:24,190
know it doesn't have to load and gooey

00:25:22,180 --> 00:25:26,380
and all that kind of stuff which windows

00:25:24,190 --> 00:25:28,690
going to load anyway in that kind of

00:25:26,380 --> 00:25:30,040
situations and you know that's one of

00:25:28,690 --> 00:25:32,890
the reasons that you don't see a whole

00:25:30,040 --> 00:25:35,470
lot of windows boxes on supercomputers

00:25:32,890 --> 00:25:37,240
it's because well I mean there's all

00:25:35,470 --> 00:25:39,160
this extra code taking up space it's

00:25:37,240 --> 00:25:41,770
pretty much pointless I think a lot of

00:25:39,160 --> 00:25:44,050
what they've done with the compute

00:25:41,770 --> 00:25:46,720
clusters that they do now kind of take

00:25:44,050 --> 00:25:48,730
out a lot of that but still I mean if

00:25:46,720 --> 00:25:51,010
you need a fast box you don't have a

00:25:48,730 --> 00:25:53,050
suit with the puter you take the legs

00:25:51,010 --> 00:25:54,550
it's really no choice you know you're

00:25:53,050 --> 00:25:57,730
not going to be able to take the code

00:25:54,550 --> 00:25:59,800
and say oh this is nice now I don't need

00:25:57,730 --> 00:26:02,260
this I don't need that I can take it out

00:25:59,800 --> 00:26:05,260
of the colonel and now I can recompile

00:26:02,260 --> 00:26:07,810
it and now it's faster because all this

00:26:05,260 --> 00:26:11,260
other crap is out of the way and I don't

00:26:07,810 --> 00:26:13,240
need it so you're not gonna be able to

00:26:11,260 --> 00:26:17,080
do that with windows unless you want to

00:26:13,240 --> 00:26:18,460
go to jail and you know I don't want to

00:26:17,080 --> 00:26:20,940
do that I want to learn more about my

00:26:18,460 --> 00:26:20,940
system

00:26:25,410 --> 00:26:30,930
so you know a few years ago lennis came

00:26:29,250 --> 00:26:33,810
out he's just kind of like you know what

00:26:30,930 --> 00:26:36,870
our Colonel is getting a little bit big

00:26:33,810 --> 00:26:38,820
and I mean this is a cross aboard I mean

00:26:36,870 --> 00:26:41,040
every kernel these days is getting huge

00:26:38,820 --> 00:26:44,490
you keep adding stuff that we want it to

00:26:41,040 --> 00:26:47,820
do and eventually it's just gigantic and

00:26:44,490 --> 00:26:50,910
it has no real specific purpose this is

00:26:47,820 --> 00:26:54,750
the problem with general purpose

00:26:50,910 --> 00:26:56,820
computing is that your your box has to

00:26:54,750 --> 00:26:58,860
be ready for anything because it's just

00:26:56,820 --> 00:27:01,500
code it's ready to be deployed it's fast

00:26:58,860 --> 00:27:03,300
it's updateable real quick but it

00:27:01,500 --> 00:27:05,130
doesn't really know what it's doing it's

00:27:03,300 --> 00:27:08,870
a little bit schizophrenic doesn't know

00:27:05,130 --> 00:27:12,090
what's going on so yeah spork like

00:27:08,870 --> 00:27:16,010
nature the best analogy I can come up

00:27:12,090 --> 00:27:19,830
with you know it's the kernel itself is

00:27:16,010 --> 00:27:23,940
see an inline assembly code where it

00:27:19,830 --> 00:27:26,900
needs it but maybe that could be better

00:27:23,940 --> 00:27:29,430
I do that could be more optimized

00:27:26,900 --> 00:27:32,640
hardware abstraction you know that's

00:27:29,430 --> 00:27:35,640
another thing they want it to be able to

00:27:32,640 --> 00:27:37,440
be on any ship out there and that's a

00:27:35,640 --> 00:27:40,530
good thing about GCC by the way I should

00:27:37,440 --> 00:27:43,080
say I'm not a GCC basher I love GCC and

00:27:40,530 --> 00:27:44,940
everything that it does it's always just

00:27:43,080 --> 00:27:50,340
on the edges I see when it comes to

00:27:44,940 --> 00:27:53,310
performance sometimes better so it is a

00:27:50,340 --> 00:27:55,020
great you know it'll take the code and

00:27:53,310 --> 00:27:59,640
put it on pretty much any chip out there

00:27:55,020 --> 00:28:04,110
you know if GCC gives you will it run

00:27:59,640 --> 00:28:06,720
linux icc is will it run linux fast and

00:28:04,110 --> 00:28:09,090
it doesn't do that on every chip it does

00:28:06,720 --> 00:28:11,460
not intel chips and auntie chips but

00:28:09,090 --> 00:28:14,180
that's his purpose is to be a fast

00:28:11,460 --> 00:28:14,180
compiler

00:28:19,120 --> 00:28:23,410
so right I think we already went over

00:28:21,040 --> 00:28:26,950
this backwards compatibility and that's

00:28:23,410 --> 00:28:28,630
always fun if you're compiling an icc

00:28:26,950 --> 00:28:30,370
kernel and you have an old 8-track

00:28:28,630 --> 00:28:33,250
cassette sep that you want to use your

00:28:30,370 --> 00:28:35,230
backups for ya you might have problems

00:28:33,250 --> 00:28:39,370
compiling back code will get into why

00:28:35,230 --> 00:28:42,390
later but yeah that that's an issue but

00:28:39,370 --> 00:28:46,020
that's an issue with monolithic

00:28:42,390 --> 00:28:46,020
operating systems as well

00:28:51,460 --> 00:28:56,620
so just an example in the server

00:28:54,279 --> 00:28:59,679
scenario I see it a lot where I work is

00:28:56,620 --> 00:29:01,659
that will have a TCP offloading engine

00:28:59,679 --> 00:29:04,690
it's an it car that does firewall it

00:29:01,659 --> 00:29:07,419
does hardware I'll flow to the network

00:29:04,690 --> 00:29:10,899
stack and stuff like that well that code

00:29:07,419 --> 00:29:14,370
and the colonel is very CPU it takes a

00:29:10,899 --> 00:29:16,390
lot of CPU time if it's not being used

00:29:14,370 --> 00:29:19,210
recompile your Colonel you don't need

00:29:16,390 --> 00:29:21,220
that Russia decide have the towed car do

00:29:19,210 --> 00:29:23,169
it and now you've got a faster kernel

00:29:21,220 --> 00:29:26,080
and you've got a system that's got

00:29:23,169 --> 00:29:28,240
hardware optimization at the same time

00:29:26,080 --> 00:29:36,700
so I mean it's a one-two punch to

00:29:28,240 --> 00:29:40,049
getting better optimization right so

00:29:36,700 --> 00:29:40,049
basically touch that

00:29:43,650 --> 00:29:54,150
and one of the final problems is that a

00:29:47,870 --> 00:29:57,390
p4 is not always a p4 sometimes it's got

00:29:54,150 --> 00:30:02,340
EMT 64 and the later versions you know

00:29:57,390 --> 00:30:05,730
sometimes it's got SS a sse3 sometimes

00:30:02,340 --> 00:30:08,310
it has no HD so what you'll see you know

00:30:05,730 --> 00:30:11,490
with debian you know you see a debian I

00:30:08,310 --> 00:30:12,990
386 bills well it's not an optimized

00:30:11,490 --> 00:30:15,360
kernel in the sense that it's going to

00:30:12,990 --> 00:30:18,060
be able to take everything that the

00:30:15,360 --> 00:30:20,400
Prescott core can do so you know the

00:30:18,060 --> 00:30:22,920
problem is is what do we do we do we

00:30:20,400 --> 00:30:24,870
patch it so it runs on everything or do

00:30:22,920 --> 00:30:26,160
we do all these different distros or do

00:30:24,870 --> 00:30:28,800
we just leave it up to the person to

00:30:26,160 --> 00:30:30,990
recompile the stuff and yeah that's

00:30:28,800 --> 00:30:32,250
usually what it is because you know they

00:30:30,990 --> 00:30:35,130
want to bring it out they want to test

00:30:32,250 --> 00:30:36,840
it they want to make it stable and and

00:30:35,130 --> 00:30:40,520
have it run on everything you know I

00:30:36,840 --> 00:30:44,430
mean that's that's the idea right so in

00:30:40,520 --> 00:30:46,790
this situation all of this stuff at the

00:30:44,430 --> 00:30:50,810
bottom kind of goes by the wayside

00:30:46,790 --> 00:30:50,810
unless you do a recompile

00:30:53,840 --> 00:31:00,200
so you know that's great but what if you

00:30:57,470 --> 00:31:02,080
can't build a Ginsu system what if you

00:31:00,200 --> 00:31:05,510
can't just compile everything

00:31:02,080 --> 00:31:07,100
specifically for it and that's what I'm

00:31:05,510 --> 00:31:09,610
trying to get at with some of these

00:31:07,100 --> 00:31:13,400
advanced optimization is because they

00:31:09,610 --> 00:31:17,870
for lack of a better analogy can take a

00:31:13,400 --> 00:31:19,669
square peg put in a round hole and they

00:31:17,870 --> 00:31:22,549
get around the fact that you have to

00:31:19,669 --> 00:31:24,409
compile things generically but they take

00:31:22,549 --> 00:31:27,860
out code they take out other stuff that

00:31:24,409 --> 00:31:29,630
still optimizes the system and in the

00:31:27,860 --> 00:31:34,520
end you end up with a binary that you

00:31:29,630 --> 00:31:36,559
can redistribute and a lot of mainstream

00:31:34,520 --> 00:31:38,390
applications out there in fact a lot of

00:31:36,559 --> 00:31:41,350
Windows applications out there have been

00:31:38,390 --> 00:31:43,419
forced to do this to get the kind of

00:31:41,350 --> 00:31:46,419
throughput that they need for their

00:31:43,419 --> 00:31:46,419
applications

00:31:51,280 --> 00:31:58,390
and this is really this is really the

00:31:55,090 --> 00:32:01,510
great part about open source is that we

00:31:58,390 --> 00:32:04,480
can do this ourselves we can open up

00:32:01,510 --> 00:32:05,890
another dimension of freedom that a lot

00:32:04,480 --> 00:32:08,140
of people don't think about when they

00:32:05,890 --> 00:32:10,720
have the code they have the code and

00:32:08,140 --> 00:32:13,210
okay so i can compile it for my system

00:32:10,720 --> 00:32:15,850
but what about for my personal usage

00:32:13,210 --> 00:32:18,820
what about my own OS fingerprint is it

00:32:15,850 --> 00:32:23,140
there for what I use it for isn't as

00:32:18,820 --> 00:32:26,050
fast as it possibly can and so using

00:32:23,140 --> 00:32:29,770
these optimizations IPO especially pgo

00:32:26,050 --> 00:32:33,310
we shape things for what we use them for

00:32:29,770 --> 00:32:34,720
whether that's a desktop or a server or

00:32:33,310 --> 00:32:37,980
whatever we need to have that

00:32:34,720 --> 00:32:37,980
optimization for

00:32:42,830 --> 00:32:47,659
so what I've been talking about idea

00:32:45,380 --> 00:32:50,269
interprocedural optimization mtgo

00:32:47,659 --> 00:32:53,029
profile guided optimizations onion

00:32:50,269 --> 00:32:55,429
vectorization high-end math algorithms

00:32:53,029 --> 00:32:57,860
optimized reading really won't get into

00:32:55,429 --> 00:33:01,130
any of the high-end map algorithms are

00:32:57,860 --> 00:33:05,059
optimized reading high-end vectorization

00:33:01,130 --> 00:33:09,590
we'll talk about that some so

00:33:05,059 --> 00:33:11,360
interprocedural optimization it's a

00:33:09,590 --> 00:33:14,690
little bit hard to grasp because it does

00:33:11,360 --> 00:33:16,519
a lot of different things but i think

00:33:14,690 --> 00:33:18,740
this breaks it down this is it's a

00:33:16,519 --> 00:33:20,750
heuristically based optimization scheme

00:33:18,740 --> 00:33:23,710
that can be implemented on entire

00:33:20,750 --> 00:33:26,179
programs and that's where the IPO switch

00:33:23,710 --> 00:33:29,419
they were on single files and that's

00:33:26,179 --> 00:33:31,580
just a dash I piece which IPO can

00:33:29,419 --> 00:33:36,019
eliminate inefficient wasted CPU

00:33:31,580 --> 00:33:37,610
register the Sun Jian is more want to

00:33:36,019 --> 00:33:47,750
call garbage collecting for your

00:33:37,610 --> 00:33:49,610
compiler profile guided optimization and

00:33:47,750 --> 00:33:54,080
this is probably the real interesting

00:33:49,610 --> 00:33:56,330
one because protocol guided optimization

00:33:54,080 --> 00:33:58,970
is a two-step process and it really is

00:33:56,330 --> 00:34:01,970
kind of like going to get fitted for a

00:33:58,970 --> 00:34:04,039
tux or a tailor for a nice occasion

00:34:01,970 --> 00:34:07,279
because you go in there you make the

00:34:04,039 --> 00:34:09,320
suits and then originally you have a

00:34:07,279 --> 00:34:12,530
suit it's a very nice suit but it's not

00:34:09,320 --> 00:34:15,379
a suit that's customized for you and so

00:34:12,530 --> 00:34:17,990
what pgo does is it tailors that just

00:34:15,379 --> 00:34:20,619
like a tailor does and what it does is

00:34:17,990 --> 00:34:23,629
you've got to stage one in the stage to

00:34:20,619 --> 00:34:26,300
compile option I was asked by one

00:34:23,629 --> 00:34:27,740
programmer Alice you saying like well

00:34:26,300 --> 00:34:30,139
what do they call the stage one in the

00:34:27,740 --> 00:34:33,020
stage two what's the names for it and I

00:34:30,139 --> 00:34:36,919
said I think it's a stage one in a stage

00:34:33,020 --> 00:34:40,190
two no that's all I've been calling it

00:34:36,919 --> 00:34:44,929
but anyway you have some different build

00:34:40,190 --> 00:34:48,770
flags for the first pgo make and you

00:34:44,929 --> 00:34:50,790
make a binary that basically has the

00:34:48,770 --> 00:34:53,429
ability to analyze what's going

00:34:50,790 --> 00:34:55,679
on and so what you do is you bring up on

00:34:53,429 --> 00:34:57,810
something you can bring up a game like

00:34:55,679 --> 00:35:00,900
quake 3 and you put it through its

00:34:57,810 --> 00:35:03,540
benchmark and you want that benchmark to

00:35:00,900 --> 00:35:06,240
be faster for instance well it's

00:35:03,540 --> 00:35:08,820
creating how it's great some dine files

00:35:06,240 --> 00:35:12,080
on the fly while it's executing so it's

00:35:08,820 --> 00:35:16,820
basically watching what's going on and

00:35:12,080 --> 00:35:18,990
then when you do the mix to make stage 2

00:35:16,820 --> 00:35:21,090
it's taking all those dying files

00:35:18,990 --> 00:35:23,520
putting it into what's called a dpi file

00:35:21,090 --> 00:35:27,770
and then it merges that and with that

00:35:23,520 --> 00:35:31,650
information it creates a binary that

00:35:27,770 --> 00:35:34,500
basically is for what you're using it

00:35:31,650 --> 00:35:35,970
for and there are a lot of programs out

00:35:34,500 --> 00:35:39,450
there that are actually doing that to

00:35:35,970 --> 00:35:41,310
stay there the squeem by one thing I

00:35:39,450 --> 00:35:44,130
should mention though why I mentioned

00:35:41,310 --> 00:35:46,290
the benchmark thing is that yeah it'll

00:35:44,130 --> 00:35:48,840
bake a benchmark it'll make it look

00:35:46,290 --> 00:35:50,430
faster than it is so if you really want

00:35:48,840 --> 00:35:52,140
to employ this you want to make sure

00:35:50,430 --> 00:35:53,130
that it well if you're going to with

00:35:52,140 --> 00:35:54,750
your benchmarks you want to make sure

00:35:53,130 --> 00:35:57,420
your benchmark is valid does that really

00:35:54,750 --> 00:35:59,550
mean anything to you you know if you

00:35:57,420 --> 00:36:01,080
compile Firefox with peach you and all

00:35:59,550 --> 00:36:03,180
you do is open up a whole bunch of tabs

00:36:01,080 --> 00:36:05,730
and recompile it yeah you'll have a

00:36:03,180 --> 00:36:08,010
Firefox it's like that with plenty of

00:36:05,730 --> 00:36:10,020
tags you know them tab so it's not what

00:36:08,010 --> 00:36:14,730
you want right what a Firefox that Scott

00:36:10,020 --> 00:36:19,830
bastard jscript and JavaScript and all

00:36:14,730 --> 00:36:22,710
that kind of stuff so basically this

00:36:19,830 --> 00:36:25,550
goes through the phases there it's got a

00:36:22,710 --> 00:36:29,670
little bit messed up on that but anyway

00:36:25,550 --> 00:36:35,130
the first phase uses a flag called prop

00:36:29,670 --> 00:36:39,240
gen that's what generates that gives the

00:36:35,130 --> 00:36:43,170
ability to generate the dime files you

00:36:39,240 --> 00:36:46,560
run that it generates the diné files and

00:36:43,170 --> 00:36:49,290
then phase 3 is the final make where you

00:36:46,560 --> 00:36:52,800
use prop news and that's when you've got

00:36:49,290 --> 00:36:56,090
your shape executable binary that

00:36:52,800 --> 00:36:56,090
optimizes things how you want

00:36:58,510 --> 00:37:03,380
so I don't think a lot of people knew

00:37:01,730 --> 00:37:06,800
about this but we actually had the

00:37:03,380 --> 00:37:09,440
fastest Firefox out there where we did

00:37:06,800 --> 00:37:11,060
pgo and IPO optimization we still have

00:37:09,440 --> 00:37:14,630
the patches out there somewhere on

00:37:11,060 --> 00:37:19,670
google groups and I pick on firefox

00:37:14,630 --> 00:37:22,850
because actually windows had a PG oh and

00:37:19,670 --> 00:37:24,830
IPO optimized Firefox version that was

00:37:22,850 --> 00:37:27,410
faster than the wind or the Linux

00:37:24,830 --> 00:37:31,580
version yeah shame on us that should

00:37:27,410 --> 00:37:33,980
never happen the good thing is that the

00:37:31,580 --> 00:37:36,880
people good people GCC have now seen the

00:37:33,980 --> 00:37:41,330
light and they've got pgo an IPO filled

00:37:36,880 --> 00:37:42,920
into their builds so now it's on par as

00:37:41,330 --> 00:37:46,730
far as I know it's still on par with

00:37:42,920 --> 00:37:49,240
what Microsoft has obviously Microsoft

00:37:46,730 --> 00:37:52,250
is more bloated so it's going to be

00:37:49,240 --> 00:37:54,140
close but this was done a while back by

00:37:52,250 --> 00:37:59,150
Louie these are the benchmarks on

00:37:54,140 --> 00:38:02,300
opinion and 1.7 gigahertz that's a

00:37:59,150 --> 00:38:05,540
pretty good difference in JavaScript

00:38:02,300 --> 00:38:07,850
performance right there if you're

00:38:05,540 --> 00:38:09,500
expecting something that's you know you

00:38:07,850 --> 00:38:11,660
wake up the next morning and a mansion

00:38:09,500 --> 00:38:14,690
somebody serving UT because you compiled

00:38:11,660 --> 00:38:16,490
your pgo just perfect don't expect that

00:38:14,690 --> 00:38:18,350
it's not going to happen this is

00:38:16,490 --> 00:38:23,060
something that's good for situations

00:38:18,350 --> 00:38:26,300
where you've got a CPU bound situation

00:38:23,060 --> 00:38:29,720
and you needed to go faster it's good

00:38:26,300 --> 00:38:31,970
for clusters because you know if you get

00:38:29,720 --> 00:38:33,560
five percent on one cluster well if

00:38:31,970 --> 00:38:35,780
you've got a falcon clusters that's

00:38:33,560 --> 00:38:37,730
going to add up pretty quick right so

00:38:35,780 --> 00:38:40,180
that's a situation where it's a good

00:38:37,730 --> 00:38:40,180
idea that

00:38:42,910 --> 00:38:48,170
so the vectorization probably everybody

00:38:46,370 --> 00:38:53,480
here to understands what vectorization

00:38:48,170 --> 00:38:56,840
as i imagined everybody's heard of SSC

00:38:53,480 --> 00:39:01,550
SSC for all these different units out

00:38:56,840 --> 00:39:03,920
there which actually started back by

00:39:01,550 --> 00:39:06,650
crate was popularized by Cray back in

00:39:03,920 --> 00:39:10,070
the 60s on their super computers which

00:39:06,650 --> 00:39:12,140
they used it basically it's really what

00:39:10,070 --> 00:39:16,190
we use it for today is to optimize loops

00:39:12,140 --> 00:39:19,550
and make them more parallel and give

00:39:16,190 --> 00:39:22,880
them to those coprocessors and make

00:39:19,550 --> 00:39:24,770
everything happen at one time Photoshop

00:39:22,880 --> 00:39:26,600
will do this for a file where you give

00:39:24,770 --> 00:39:29,690
it a blur they'll say okay this is the

00:39:26,600 --> 00:39:33,100
data this is the operation boom it's

00:39:29,690 --> 00:39:35,860
done we did it all with at one time with

00:39:33,100 --> 00:39:39,170
single instruction multiple data

00:39:35,860 --> 00:39:40,880
coprocessors in icc you'll see this when

00:39:39,170 --> 00:39:42,320
you're compiling something you'll all of

00:39:40,880 --> 00:39:44,870
a sudden see something come out that

00:39:42,320 --> 00:39:47,180
says loop was vectorized that's when you

00:39:44,870 --> 00:39:49,310
know that you've got some code that's

00:39:47,180 --> 00:39:50,840
been evaluated and they said well you

00:39:49,310 --> 00:39:54,460
know what would you think that we're

00:39:50,840 --> 00:39:54,460
going to put that in a vectorized state

00:40:00,450 --> 00:40:05,210
so there's some other stuff out there

00:40:02,280 --> 00:40:07,680
that you can use there's a debugger

00:40:05,210 --> 00:40:10,859
there's the pro which is a performance

00:40:07,680 --> 00:40:13,200
and a landing analyzation utility I

00:40:10,859 --> 00:40:15,260
don't use it much but it will find hot

00:40:13,200 --> 00:40:18,960
spots in your code it's a little bit

00:40:15,260 --> 00:40:21,560
advanced debugging but Intel they swear

00:40:18,960 --> 00:40:23,940
by it and think it's the greatest thing

00:40:21,560 --> 00:40:25,880
threading building blocks you know for

00:40:23,940 --> 00:40:28,050
parallelization and that kind of thing

00:40:25,880 --> 00:40:31,680
automatic parallelization is one of the

00:40:28,050 --> 00:40:34,020
big new features that I CC and XE is

00:40:31,680 --> 00:40:36,570
pushing integrated performance

00:40:34,020 --> 00:40:38,609
primitives math kernal library you don't

00:40:36,570 --> 00:40:42,109
use that whole lot they're kind of the

00:40:38,609 --> 00:40:42,109
background they'll do their thing so

00:40:44,210 --> 00:40:54,300
just some examples the good thing about

00:40:50,150 --> 00:40:57,060
GCC versus icc is that it doesn't take a

00:40:54,300 --> 00:40:58,859
lot of crazy flags to do what you want

00:40:57,060 --> 00:41:00,900
you know you've got three or four in

00:40:58,859 --> 00:41:02,280
there that you're going to use and then

00:41:00,900 --> 00:41:04,310
it's going to know what to do and it's

00:41:02,280 --> 00:41:08,849
going to cream it's going to give you a

00:41:04,310 --> 00:41:11,010
optimized output at the bottom we've got

00:41:08,849 --> 00:41:14,040
the prof gin and the prof use so in that

00:41:11,010 --> 00:41:16,020
case we're using pgo and in the bottom

00:41:14,040 --> 00:41:19,170
case we're using IPO in the first one

00:41:16,020 --> 00:41:22,109
generating a binary that's going to do

00:41:19,170 --> 00:41:23,910
dime files it's going to be able to

00:41:22,109 --> 00:41:25,170
generate dot files and then the second

00:41:23,910 --> 00:41:31,369
one's going to say oh I've got some

00:41:25,170 --> 00:41:31,369
compile men Priya optimized binary

00:41:41,800 --> 00:41:51,310
so compiling the colonel is a little bit

00:41:46,270 --> 00:41:55,860
different and one of the reasons is the

00:41:51,310 --> 00:42:00,250
kernel developers really love GCC and

00:41:55,860 --> 00:42:02,680
ICC understands GC but not always and

00:42:00,250 --> 00:42:06,820
that's why some stuff doesn't always

00:42:02,680 --> 00:42:10,030
compile so we've got a guy in the middle

00:42:06,820 --> 00:42:13,540
who kind of plays referee and it's the

00:42:10,030 --> 00:42:17,890
rapper and he can translate semantics

00:42:13,540 --> 00:42:21,430
from GCC to icc he can add flags for

00:42:17,890 --> 00:42:24,640
specific optimizations but probably the

00:42:21,430 --> 00:42:28,680
most useful thing at least for us for

00:42:24,640 --> 00:42:33,790
debugging is filtering out

00:42:28,680 --> 00:42:35,560
non-compatible flags and seed files we

00:42:33,790 --> 00:42:37,360
just give up on something we put it in

00:42:35,560 --> 00:42:38,890
the wrapper will say you know what it's

00:42:37,360 --> 00:42:41,380
not compiling but I want to see what

00:42:38,890 --> 00:42:44,380
else does at the end we submit that pile

00:42:41,380 --> 00:42:47,800
to Intel and say what is it what's going

00:42:44,380 --> 00:42:49,930
on is that the compiler is C because a

00:42:47,800 --> 00:42:52,870
lot of situations you know if there's a

00:42:49,930 --> 00:42:55,810
lot of turning wheels you get a new ICC

00:42:52,870 --> 00:42:57,640
or XE composer build then you get a new

00:42:55,810 --> 00:42:59,350
kernel build and then you got to test

00:42:57,640 --> 00:43:00,820
your old patch and then you get to find

00:42:59,350 --> 00:43:02,950
out what the problem is that this is

00:43:00,820 --> 00:43:04,630
that this or is it this so it's a

00:43:02,950 --> 00:43:06,520
never-ending cycle to figure out what's

00:43:04,630 --> 00:43:10,920
going on that's one of the main problems

00:43:06,520 --> 00:43:10,920
of keeping things up to date

00:43:18,119 --> 00:43:22,950
alright so Colonel commands are pretty

00:43:21,509 --> 00:43:25,710
straightforward if you're using the

00:43:22,950 --> 00:43:28,680
wrapper what you want to do is put this

00:43:25,710 --> 00:43:30,210
in the top and what I usually do is I

00:43:28,680 --> 00:43:32,849
just take the wrapper it's just a shell

00:43:30,210 --> 00:43:34,769
script and we've got them on the sites i

00:43:32,849 --> 00:43:37,680
just put it in user local been marquez

00:43:34,769 --> 00:43:40,999
executable and then source it do a

00:43:37,680 --> 00:43:45,059
source epc profile and finds it and

00:43:40,999 --> 00:43:47,730
basically do a make i think there should

00:43:45,059 --> 00:43:49,920
be a host CC of the front i'm sorry occ

00:43:47,730 --> 00:43:52,200
intel rapper CC info rapper or whatever

00:43:49,920 --> 00:43:55,490
you want to call the rapper and at the

00:43:52,200 --> 00:43:58,980
end of this these are your linking so

00:43:55,490 --> 00:44:03,180
intel has libraries to link to instead

00:43:58,980 --> 00:44:05,730
of your G libraries ng loob and so these

00:44:03,180 --> 00:44:09,720
guys are fast they're a little bit

00:44:05,730 --> 00:44:13,890
faster in most situations especially if

00:44:09,720 --> 00:44:17,430
using IPO you want to link to that if

00:44:13,890 --> 00:44:19,980
you don't you can try the second version

00:44:17,430 --> 00:44:23,430
now some of our patches you see here

00:44:19,980 --> 00:44:26,640
I've used host cci cci CC in this case

00:44:23,430 --> 00:44:28,619
our patch is built in where it's got the

00:44:26,640 --> 00:44:30,869
wrapper integrated and you don't have to

00:44:28,619 --> 00:44:35,069
use that it doesn't need to translate it

00:44:30,869 --> 00:44:38,609
we've got some patches like 26 34 one

00:44:35,069 --> 00:44:41,160
that does not need the path does not

00:44:38,609 --> 00:44:45,059
need the wrapper so you can use that in

00:44:41,160 --> 00:44:46,880
that kind of situation one thing that

00:44:45,059 --> 00:44:50,819
you'll notice when you first start

00:44:46,880 --> 00:44:53,849
making it is what have I just done to my

00:44:50,819 --> 00:44:55,559
system what in the hell is all this crap

00:44:53,849 --> 00:44:57,989
that's coming on the screen because it

00:44:55,559 --> 00:44:59,549
doesn't look like GCC you don't get

00:44:57,989 --> 00:45:02,670
lokay this is compile this compiler

00:44:59,549 --> 00:45:04,890
compiles compile you get a lot of weird

00:45:02,670 --> 00:45:07,710
stuff happening on the screen and your

00:45:04,890 --> 00:45:09,690
leg Oh should I turn off my screen shut

00:45:07,710 --> 00:45:12,569
turn off my system or what's going on

00:45:09,690 --> 00:45:16,230
just let it go it's very chatty is very

00:45:12,569 --> 00:45:19,369
fat pedantic basically because it's

00:45:16,230 --> 00:45:23,210
taken the GCC file on a psycho

00:45:19,369 --> 00:45:25,369
right so you're finally compiles it and

00:45:23,210 --> 00:45:28,369
then you've got a perfectly good colonel

00:45:25,369 --> 00:45:35,140
as long as nothing too bad that it can't

00:45:28,369 --> 00:45:35,140
handle like I said it's a process

00:45:39,050 --> 00:45:44,740
so we just got some other compile

00:45:41,510 --> 00:45:47,120
examples in here this is how you get the

00:45:44,740 --> 00:45:52,370
compiler to work once you've installed

00:45:47,120 --> 00:45:54,380
it you want to source what type of

00:45:52,370 --> 00:45:56,420
compiling you want to do if you want to

00:45:54,380 --> 00:45:59,870
do 32-bit you need to put in the string

00:45:56,420 --> 00:46:03,110
right here that has IE 32 at the end if

00:45:59,870 --> 00:46:06,980
you want to do it was 64 bit it's intel

00:46:03,110 --> 00:46:10,190
64 at the end not ia64 because that's

00:46:06,980 --> 00:46:12,670
for the itanium boxes a little bit

00:46:10,190 --> 00:46:12,670
different there

00:46:16,130 --> 00:46:24,020
so you can integrate it into debian this

00:46:20,830 --> 00:46:25,610
presentation is available on linux DN

00:46:24,020 --> 00:46:28,010
i'll give you guys the link if you want

00:46:25,610 --> 00:46:30,560
it and it will give you some basic

00:46:28,010 --> 00:46:35,050
examples of doing that files RPM files

00:46:30,560 --> 00:46:35,050
that's basically what we have here our

00:46:35,920 --> 00:46:42,760
p.m. you know doing a little spec file

00:46:39,430 --> 00:46:42,760
other hacks

00:46:44,630 --> 00:46:51,020
ginsu you know I still think that it's

00:46:48,140 --> 00:46:53,480
the best way to go and the reason is you

00:46:51,020 --> 00:46:56,960
start out with a simplified system and

00:46:53,480 --> 00:46:58,790
then you build your way up if you start

00:46:56,960 --> 00:47:01,970
out with a red hat kernel and you patch

00:46:58,790 --> 00:47:05,590
it things are not going to go as

00:47:01,970 --> 00:47:08,720
smoothly is if you had a streamlined pat

00:47:05,590 --> 00:47:09,950
kernel and you build your way up it's

00:47:08,720 --> 00:47:11,270
just not going to happen because they've

00:47:09,950 --> 00:47:13,190
got a lot of things they've got a lot of

00:47:11,270 --> 00:47:15,650
extra patches that they put in there

00:47:13,190 --> 00:47:18,140
with rel 6 they're not telling you those

00:47:15,650 --> 00:47:21,470
patches in the month anymore you guys

00:47:18,140 --> 00:47:24,950
know why it's a horrible competition the

00:47:21,470 --> 00:47:27,560
unbreakable linux that they're there a

00:47:24,950 --> 00:47:29,300
little bit pissed about the fact that

00:47:27,560 --> 00:47:31,340
they're taking it this red hat and

00:47:29,300 --> 00:47:38,450
they're calling it unbreakable well we

00:47:31,340 --> 00:47:41,710
do that with centos yeah really it's got

00:47:38,450 --> 00:47:41,710
none of that in there did they change

00:47:47,130 --> 00:47:55,480
okay are you with Oracle I'm sorry no no

00:47:53,950 --> 00:47:57,369
that's good to know I didn't know that

00:47:55,480 --> 00:47:58,440
because I've been told the reason that

00:47:57,369 --> 00:48:04,619
they're doing that is because

00:47:58,440 --> 00:48:08,710
competition is you okay all right

00:48:04,619 --> 00:48:10,830
conspiracy theories all right but this

00:48:08,710 --> 00:48:13,540
is basically your make flag for Ginsu

00:48:10,830 --> 00:48:17,350
you just stick your icc flags at the

00:48:13,540 --> 00:48:19,270
bottom now not all of those are not

00:48:17,350 --> 00:48:20,770
going to work are going to work a lot of

00:48:19,270 --> 00:48:26,650
problems are going to happen if you use

00:48:20,770 --> 00:48:30,220
IPO i would suggest using IP IP is going

00:48:26,650 --> 00:48:32,859
to do it on a per file basis where IPO

00:48:30,220 --> 00:48:36,190
is going to take the whole program

00:48:32,859 --> 00:48:38,550
they'll take firefox and just do IPO

00:48:36,190 --> 00:48:40,810
regression across the entire thing so

00:48:38,550 --> 00:48:42,190
with that situation there's one thing

00:48:40,810 --> 00:48:44,950
that you're going to want it is a lot of

00:48:42,190 --> 00:48:47,440
RAM because IPO take some makes a huge

00:48:44,950 --> 00:48:49,390
temp file to figure out what it can take

00:48:47,440 --> 00:48:54,640
in and take out and finally create that

00:48:49,390 --> 00:49:00,150
binary so I needed eight gigs of ram to

00:48:54,640 --> 00:49:00,150
do firefox goes or we die

00:49:05,230 --> 00:49:13,579
GCC breaks it's not GCC's faults icc is

00:49:10,099 --> 00:49:16,339
trying to come in and take over the

00:49:13,579 --> 00:49:21,289
majority of the problems are the CAS

00:49:16,339 --> 00:49:24,680
mbox gas does not Co the piles of gas is

00:49:21,289 --> 00:49:32,750
not always compiled with ICC's compiler

00:49:24,680 --> 00:49:35,299
it just doesn't always happen well it is

00:49:32,750 --> 00:49:36,920
probably because it optimizes to that is

00:49:35,299 --> 00:49:41,020
what I'm guessing they've written it for

00:49:36,920 --> 00:49:44,059
the intrinsic so they know work with GCC

00:49:41,020 --> 00:49:46,339
we haven't really had a chance to get

00:49:44,059 --> 00:49:47,809
into it and figure out why because we we

00:49:46,339 --> 00:49:49,309
haven't really come across a whole lot

00:49:47,809 --> 00:49:53,510
of situations where we've had to change

00:49:49,309 --> 00:49:56,059
that but that is one of the main cases

00:49:53,510 --> 00:50:01,400
that the ASM just breaks doesn't want to

00:49:56,059 --> 00:50:06,160
work three apps remain on teams that

00:50:01,400 --> 00:50:08,809
would be GCC binutils and g g lib see

00:50:06,160 --> 00:50:10,700
you know I don't even know if I want to

00:50:08,809 --> 00:50:12,589
try touching those because I don't want

00:50:10,700 --> 00:50:15,380
a black band coming in my house and

00:50:12,589 --> 00:50:19,010
taking me away for compiling something

00:50:15,380 --> 00:50:21,849
that I shouldn't file but anyway the

00:50:19,010 --> 00:50:25,970
itanium colonel and SG I thought

00:50:21,849 --> 00:50:29,020
situation right now is epic anybody know

00:50:25,970 --> 00:50:31,579
why it's epic because it's the

00:50:29,020 --> 00:50:36,090
explicitly parallel instruction set

00:50:31,579 --> 00:50:40,260
computing platform that bill

00:50:36,090 --> 00:50:41,820
still there the project is it's a

00:50:40,260 --> 00:50:43,530
failure right now we're still trying to

00:50:41,820 --> 00:50:45,360
figure out what's going on we really

00:50:43,530 --> 00:50:47,160
need less than a supercomputer we just

00:50:45,360 --> 00:50:50,580
need the Itanium box that we can sit

00:50:47,160 --> 00:50:52,020
down and compile their on one cpu and

00:50:50,580 --> 00:50:56,940
get some minimal hardware on ginseng

00:50:52,020 --> 00:50:59,820
systems give it up the supercomputer is

00:50:56,940 --> 00:51:01,050
great but we've got celeste that's

00:50:59,820 --> 00:51:04,170
basically what we've been trying to

00:51:01,050 --> 00:51:07,680
build the most on redhat a little bit

00:51:04,170 --> 00:51:10,260
there but it's just breaking and we've

00:51:07,680 --> 00:51:12,540
tried we try to work with woody for

00:51:10,260 --> 00:51:13,920
months on it we just kept on trying

00:51:12,540 --> 00:51:15,510
different things we couldn't get it to

00:51:13,920 --> 00:51:19,590
work so there's a lot of different

00:51:15,510 --> 00:51:25,280
changes in how things are handled versus

00:51:19,590 --> 00:51:25,280
the ICC for itanium versus the x86

00:51:29,780 --> 00:51:35,210
so optimization campaign if this is what

00:51:33,410 --> 00:51:39,230
we could do with the project if we could

00:51:35,210 --> 00:51:40,820
devote the time and energy this is the

00:51:39,230 --> 00:51:46,190
kind of stuff that I'd like to see

00:51:40,820 --> 00:51:49,520
happen IPO and PG Oh Pat sets for the

00:51:46,190 --> 00:51:52,610
latest vanilla kernels out there that

00:51:49,520 --> 00:51:55,070
would be great fully ICC's optimized

00:51:52,610 --> 00:51:56,420
system we can almost do that I mentioned

00:51:55,070 --> 00:51:58,160
that there's some stuff out there that

00:51:56,420 --> 00:51:59,960
we can't quite do but with a little

00:51:58,160 --> 00:52:05,480
tweaking we can get pretty much of that

00:51:59,960 --> 00:52:08,660
done a fully pgo aware system that is

00:52:05,480 --> 00:52:10,010
yeah that's a little bit of a vision

00:52:08,660 --> 00:52:11,630
right there i don't know if that's ever

00:52:10,010 --> 00:52:13,550
going to happen i'd love to see it

00:52:11,630 --> 00:52:17,150
happen but that's a lot of work right

00:52:13,550 --> 00:52:21,230
there pgo is very finicky IPO is very

00:52:17,150 --> 00:52:24,080
finicky so that's that's issues there

00:52:21,230 --> 00:52:25,370
the meego icc repos once again i'd love

00:52:24,080 --> 00:52:26,990
to do that we need to get some more

00:52:25,370 --> 00:52:29,590
people involved we need to get some more

00:52:26,990 --> 00:52:31,880
resources and and have that happen

00:52:29,590 --> 00:52:33,410
there's anybody out there that likes to

00:52:31,880 --> 00:52:35,720
be a maintainer that wants to tinker and

00:52:33,410 --> 00:52:38,690
try it out I mean you know we're looking

00:52:35,720 --> 00:52:40,370
for you know a colonel and maybe Firefox

00:52:38,690 --> 00:52:43,460
something that gets our name out there

00:52:40,370 --> 00:52:44,810
was this lets people know that we're

00:52:43,460 --> 00:52:50,660
still out there trying to get stuff

00:52:44,810 --> 00:52:52,760
compile distro repose for RPM and update

00:52:50,660 --> 00:52:57,560
systems basically that's talking about

00:52:52,760 --> 00:53:00,320
me go it's our fan base and of course

00:52:57,560 --> 00:53:02,210
the thing that would probably piss off

00:53:00,320 --> 00:53:04,460
mr. Solomon the most is the

00:53:02,210 --> 00:53:09,680
diversification of other compilers when

00:53:04,460 --> 00:53:11,720
si Lang and son compilers I think

00:53:09,680 --> 00:53:14,960
competition is good I think that we're

00:53:11,720 --> 00:53:16,970
going to find more bugs if we hit it

00:53:14,960 --> 00:53:18,650
from different angles all of these

00:53:16,970 --> 00:53:20,900
compilers are different they all have

00:53:18,650 --> 00:53:23,390
strengths why don't we take the code

00:53:20,900 --> 00:53:25,970
that is open and find out all that we

00:53:23,390 --> 00:53:29,150
can find find out which one does what

00:53:25,970 --> 00:53:31,820
best with it and I mean I think that's

00:53:29,150 --> 00:53:33,090
that's like cross training for

00:53:31,820 --> 00:53:35,130
basketball I mean

00:53:33,090 --> 00:53:37,350
to do something that's going to do end

00:53:35,130 --> 00:53:39,620
up with a better colonel in that

00:53:37,350 --> 00:53:39,620
situation

00:53:44,670 --> 00:53:52,799
so in closing XE and icc proves the

00:53:49,920 --> 00:53:55,230
power of open source you can't do this

00:53:52,799 --> 00:53:58,500
with closed-source software unless you

00:53:55,230 --> 00:54:00,930
want to go to jail because you don't

00:53:58,500 --> 00:54:02,640
have the ability to look at it so we

00:54:00,930 --> 00:54:04,980
compile it and then customize it for

00:54:02,640 --> 00:54:08,040
yourself it's not going to let you do

00:54:04,980 --> 00:54:10,859
that and in the end this is going to

00:54:08,040 --> 00:54:12,869
give you meaningful holistic results

00:54:10,859 --> 00:54:17,480
it's going to give you a faster system

00:54:12,869 --> 00:54:17,480
and that's just been in game right there

00:54:19,309 --> 00:54:27,089
so in my opinion GPC computing does not

00:54:24,359 --> 00:54:28,890
cut it I hate looking at these gigantic

00:54:27,089 --> 00:54:31,380
systems it's do nothing all day in the

00:54:28,890 --> 00:54:34,260
data center they're wasting electricity

00:54:31,380 --> 00:54:36,329
they're wasting space when we can get

00:54:34,260 --> 00:54:38,490
some kind of infrastructure in there too

00:54:36,329 --> 00:54:41,010
slim streamlines I'd cuts down

00:54:38,490 --> 00:54:45,089
electricity costs gets things running

00:54:41,010 --> 00:54:47,250
the way they should be it's just I don't

00:54:45,089 --> 00:54:50,599
like the idea I think the other one is

00:54:47,250 --> 00:54:50,599
cheaper more capable

00:54:53,339 --> 00:54:59,279
again lu yi he's been one of the biggest

00:54:56,130 --> 00:55:01,979
computer contributors to the project I

00:54:59,279 --> 00:55:04,140
can't do it without him wish I could

00:55:01,979 --> 00:55:07,890
talk to him more but you know being in

00:55:04,140 --> 00:55:09,779
Shanghai does not make it easy fail on

00:55:07,890 --> 00:55:11,400
long he's a guy I work with the most it

00:55:09,779 --> 00:55:13,349
in cell he's been great for giving us

00:55:11,400 --> 00:55:17,269
resources and making sure that we have

00:55:13,349 --> 00:55:17,269
all the questions that we need answered

00:55:19,039 --> 00:55:24,779
and then there's SGI for everything

00:55:22,710 --> 00:55:26,849
they've done she's done a lot of things

00:55:24,779 --> 00:55:28,950
with 32-bit patches if you need 32-bit

00:55:26,849 --> 00:55:30,390
patches he's a guy to talk to and of

00:55:28,950 --> 00:55:32,009
course there's a lot of other guys out

00:55:30,390 --> 00:55:36,420
there in the group that I gotta say hi

00:55:32,009 --> 00:55:39,059
to say hello and thank you too in Red

00:55:36,420 --> 00:55:43,259
Hat also for giving us the new rail six

00:55:39,059 --> 00:55:48,599
that we're starting to work on so so we

00:55:43,259 --> 00:55:51,059
are a very small unpaid project so for

00:55:48,599 --> 00:55:53,670
us to do what we do we need

00:55:51,059 --> 00:55:58,079
contributions we need extra people

00:55:53,670 --> 00:56:00,599
involved please contribute to us if you

00:55:58,079 --> 00:56:03,029
can we'd love to hear what you think we

00:56:00,599 --> 00:56:05,099
can do contribute the contributions

00:56:03,029 --> 00:56:07,259
doesn't mean cash necessarily it means

00:56:05,099 --> 00:56:09,749
your opinion and these what would you do

00:56:07,259 --> 00:56:13,729
it means can I jump in and try this to

00:56:09,749 --> 00:56:13,729
see what people think of a situation

00:56:15,430 --> 00:56:27,280
oh my gosh another blue screen I guess

00:56:18,160 --> 00:56:35,440
it's time to go to the bar any questions

00:56:27,280 --> 00:56:42,970
ah yes it does can I answer that one at

00:56:35,440 --> 00:56:45,849
the bar now to be yes AMD does and Andy

00:56:42,970 --> 00:56:50,589
will create you can you can I CC does

00:56:45,849 --> 00:56:53,559
for Andy it will create good code in its

00:56:50,589 --> 00:56:59,319
original inform probably not the same

00:56:53,559 --> 00:57:03,730
code that you would get out of in Intel

00:56:59,319 --> 00:57:05,950
a genuine intel platform you know being

00:57:03,730 --> 00:57:10,150
in capitalism you've got competition and

00:57:05,950 --> 00:57:13,839
sometimes you pull things that put it in

00:57:10,150 --> 00:57:15,010
favor of you selling Hardware I didn't

00:57:13,839 --> 00:57:16,960
know about that when I first start of

00:57:15,010 --> 00:57:19,420
the project but their situations however

00:57:16,960 --> 00:57:21,250
there's some patches out there I don't

00:57:19,420 --> 00:57:24,490
know where unless they hit me at the bar

00:57:21,250 --> 00:57:26,079
where they get around that they get

00:57:24,490 --> 00:57:28,630
around that legally there's some patches

00:57:26,079 --> 00:57:30,790
out that they don't do it legally and I

00:57:28,630 --> 00:57:35,799
don't suggest those definitely because

00:57:30,790 --> 00:57:39,210
auntie is not a sponsor so anyway but

00:57:35,799 --> 00:57:39,210
yes I hope that answers your question

00:57:43,340 --> 00:57:53,010
to 36 to 37 will compilat still got some

00:57:49,800 --> 00:57:56,550
problems truth be told to 36 is still in

00:57:53,010 --> 00:57:59,520
beta we've got some new rel 6 patches

00:57:56,550 --> 00:58:01,950
that we just added to the to the site

00:57:59,520 --> 00:58:03,210
and I have a lot of hopes for those

00:58:01,950 --> 00:58:04,619
because that's going to have a more

00:58:03,210 --> 00:58:06,300
stable base where we're going to be able

00:58:04,619 --> 00:58:14,670
to try some of those optimizations a

00:58:06,300 --> 00:58:16,920
little bit easier you know I don't try

00:58:14,670 --> 00:58:21,270
to get there's a lot of politics

00:58:16,920 --> 00:58:23,400
upstream right and I try not to get

00:58:21,270 --> 00:58:25,770
involved with that so what I do is I

00:58:23,400 --> 00:58:29,330
give my patches and all our problems

00:58:25,770 --> 00:58:33,180
straight to Intel and intel has OS DC

00:58:29,330 --> 00:58:35,400
and they submit upstream because in cell

00:58:33,180 --> 00:58:38,100
is one of the biggest providers really

00:58:35,400 --> 00:58:40,860
of code for the for the colonel right

00:58:38,100 --> 00:58:41,880
now I don't know I know their top six or

00:58:40,860 --> 00:58:44,190
something like that I don't know how

00:58:41,880 --> 00:58:49,700
much they they produce but it's quite a

00:58:44,190 --> 00:58:49,700
lot a lot of page of the offers for them

00:58:56,290 --> 00:59:01,960
oh yeah yeah I mean we will get new

00:58:58,950 --> 00:59:03,400
versions of ICC and we'll have nothing

00:59:01,960 --> 00:59:05,710
wrong with our patches the same old

00:59:03,400 --> 00:59:07,780
colonel and then we run icc and it

00:59:05,710 --> 00:59:10,450
doesn't work and it's just kind of like

00:59:07,780 --> 00:59:12,700
oh well there was a progression in ICC

00:59:10,450 --> 00:59:16,000
and needs to be fixed and then you know

00:59:12,700 --> 00:59:17,650
next version it's fixed so yeah it's a

00:59:16,000 --> 00:59:24,490
constant cycle of trying to figure out

00:59:17,650 --> 00:59:28,570
what's working what's not it's usually

00:59:24,490 --> 00:59:31,360
very stable yeah I mean it depends there

00:59:28,570 --> 00:59:32,920
are situations where you can compile

00:59:31,360 --> 00:59:34,870
something and all of a sudden it just

00:59:32,920 --> 00:59:37,000
gets quirky and you have to figure out

00:59:34,870 --> 00:59:39,520
what it is a lot of situations you can

00:59:37,000 --> 00:59:42,790
change the build flags to figure out

00:59:39,520 --> 00:59:45,940
what's going on pgo is an example of

00:59:42,790 --> 00:59:49,420
that the original patches will built for

00:59:45,940 --> 00:59:53,020
single core systems and in PG oh you've

00:59:49,420 --> 00:59:55,000
got that first patch that injects

00:59:53,020 --> 00:59:57,190
actually some proprietary information

00:59:55,000 --> 00:59:58,960
from n sell its and not a non

00:59:57,190 --> 01:00:02,440
redistributable colonel at that point

00:59:58,960 --> 01:00:05,530
and you have a module that's the module

01:00:02,440 --> 01:00:07,720
and then you have a demon it's called PG

01:00:05,530 --> 01:00:09,730
ODI call it P God because I think that

01:00:07,720 --> 01:00:12,430
sounds better but anyway that collects

01:00:09,730 --> 01:00:14,740
all the dye nary of the diné files and

01:00:12,430 --> 01:00:16,960
all that kind of stuff that scenario

01:00:14,740 --> 01:00:18,850
works great on a single core system or a

01:00:16,960 --> 01:00:22,150
system where you've got all the other

01:00:18,850 --> 01:00:24,160
cores but the first one turned off so if

01:00:22,150 --> 01:00:26,740
you add more cores you get into a

01:00:24,160 --> 01:00:28,390
problem with cache coherency and those

01:00:26,740 --> 01:00:31,270
dime files get corrupted and then your

01:00:28,390 --> 01:00:35,130
final thing that pops out is like burn

01:00:31,270 --> 01:00:35,130
you know Christmas turkey it's not

01:00:36,959 --> 01:00:44,549
good answer more questions

01:00:53,940 --> 01:01:00,660
uses the what registry I have no idea

01:00:57,680 --> 01:01:05,190
that was something i could ask hey long

01:01:00,660 --> 01:01:07,650
it until the fourth send me a email

01:01:05,190 --> 01:01:09,920
tyler at linux get a calm else in the

01:01:07,650 --> 01:01:09,920
film

01:01:50,339 --> 01:01:54,819
what about this I can help you like it

01:01:52,749 --> 01:01:58,619
we have the same problem for whatever

01:01:54,819 --> 01:01:58,619
level to do here's using the iphone

01:02:00,520 --> 01:02:05,030
let's get the word out

01:02:02,970 --> 01:02:05,030
you

01:03:12,720 --> 01:03:19,570
as a service leader in cloud computing

01:03:16,450 --> 01:03:21,160
all we do is hosted computing to us the

01:03:19,570 --> 01:03:23,110
cloud is just the next generation of

01:03:21,160 --> 01:03:25,060
hosting and if someone who's been in the

01:03:23,110 --> 01:03:27,070
hosting industry for 12 years we feel

01:03:25,060 --> 01:03:28,180
worth in a unique position to really

01:03:27,070 --> 01:03:30,310
help bring these two worlds together

01:03:28,180 --> 01:03:32,650
these different sets of technologies and

01:03:30,310 --> 01:03:34,960
to help companies embrace this new world

01:03:32,650 --> 01:03:36,970
in this great new tool that allows

01:03:34,960 --> 01:03:39,580
faster innovation not only is it about

01:03:36,970 --> 01:03:44,950
us being responsive and accountable but

01:03:39,580 --> 01:03:47,790
it's about us doing more for you webos

01:03:44,950 --> 01:03:51,340
an OS that works the way that you do

01:03:47,790 --> 01:03:55,110
across all your devices HP Slate and

01:03:51,340 --> 01:03:55,110

YouTube URL: https://www.youtube.com/watch?v=186npw4GL10


