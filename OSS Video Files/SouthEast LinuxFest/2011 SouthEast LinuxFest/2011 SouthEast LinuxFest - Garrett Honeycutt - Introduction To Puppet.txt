Title: 2011 SouthEast LinuxFest - Garrett Honeycutt - Introduction To Puppet
Publication date: 2012-02-26
Playlist: 2011 SouthEast LinuxFest
Description: 
	2011 SouthEast LinuxFest - Garrett Honeycutt - Introduction To Puppet

(Apologies for the audio levels.   We think we can fix this, but for now we will leave this video up.  All 2011 SELF video was produced from start to finish by volunteers, and we're still getting the hang of this.)

This video is licensed under Creative Commons Attribution 3.0 Unported License.
Captions: 
	00:00:01,129 --> 00:00:07,290
the following presentation was recorded

00:00:04,200 --> 00:00:09,870
at the 2011 southeast linux fest in

00:00:07,290 --> 00:00:11,370
Spartanburg South Carolina it is

00:00:09,870 --> 00:00:14,190
licensed under a creative commons

00:00:11,370 --> 00:00:18,390
license for more information about the

00:00:14,190 --> 00:00:21,840
southeast linux fest visit www southeast

00:00:18,390 --> 00:00:23,070
linux fest org the southeast linux fest

00:00:21,840 --> 00:00:26,430
would like to thank the following

00:00:23,070 --> 00:00:28,939
diamond and platinum sponsors in 2011

00:00:26,430 --> 00:00:34,770
for helping make these videos possible

00:00:28,939 --> 00:00:37,350
after it fails going to happen but the

00:00:34,770 --> 00:00:39,980
other big reasons are that I don't have

00:00:37,350 --> 00:00:42,360
here on my slide is that we're often as

00:00:39,980 --> 00:00:46,079
assistant men's asked to rush they're

00:00:42,360 --> 00:00:49,649
doing something and we like to tell

00:00:46,079 --> 00:00:52,710
people yes and to build things so often

00:00:49,649 --> 00:00:56,070
I see I see us you know quickly throwing

00:00:52,710 --> 00:00:59,489
something together as a like one off and

00:00:56,070 --> 00:01:01,199
then it not really having the quality

00:00:59,489 --> 00:01:04,559
behind it like that it should which

00:01:01,199 --> 00:01:06,210
really just hurts us because you like

00:01:04,559 --> 00:01:08,010
built this thing there's no good

00:01:06,210 --> 00:01:10,189
documentation or if there is

00:01:08,010 --> 00:01:12,840
documentation on how it was built

00:01:10,189 --> 00:01:14,850
there's no ongoing like documentation

00:01:12,840 --> 00:01:18,240
the machines that really can't be like

00:01:14,850 --> 00:01:21,060
replicated so when they catch on fire of

00:01:18,240 --> 00:01:22,500
course up to you to fix it and you know

00:01:21,060 --> 00:01:24,619
you don't really know what that systems

00:01:22,500 --> 00:01:24,619
like

00:01:26,500 --> 00:01:30,890
why this is my high-tech like cloud

00:01:29,090 --> 00:01:35,600
picture and what I want to get from this

00:01:30,890 --> 00:01:39,950
is that by being able to have tons of

00:01:35,600 --> 00:01:41,780
hosts on on demand okay so you can

00:01:39,950 --> 00:01:44,030
provision you know 10,000 hosts by

00:01:41,780 --> 00:01:46,640
swiping your credit card like they deal

00:01:44,030 --> 00:01:48,740
how do you manage those hosts like how

00:01:46,640 --> 00:01:50,869
do you manage their their system States

00:01:48,740 --> 00:01:52,340
their configurations when you want to

00:01:50,869 --> 00:01:56,000
make a change how do you do that across

00:01:52,340 --> 00:01:59,149
all your systems if your answer is I'll

00:01:56,000 --> 00:02:02,890
just build a new image you'll quickly

00:01:59,149 --> 00:02:02,890
find out that that that doesn't scale

00:02:04,390 --> 00:02:11,090
like you here has built built clusters

00:02:07,880 --> 00:02:13,430
of systems by hand before this man's

00:02:11,090 --> 00:02:14,870
yeah and what you've probably like

00:02:13,430 --> 00:02:17,180
noticed is that if you didn't use

00:02:14,870 --> 00:02:19,910
configuration management that entropy

00:02:17,180 --> 00:02:21,470
started to grow on those systems so you

00:02:19,910 --> 00:02:23,840
started off and they were all the exact

00:02:21,470 --> 00:02:25,850
same mail system but then after time

00:02:23,840 --> 00:02:30,260
they started to develop personalities of

00:02:25,850 --> 00:02:32,030
their own and and that's because you

00:02:30,260 --> 00:02:34,489
know you like you had to fix a problem

00:02:32,030 --> 00:02:36,470
here if you like you updated something

00:02:34,489 --> 00:02:38,209
else there you know maybe that change

00:02:36,470 --> 00:02:40,670
got deployed across the mall but maybe

00:02:38,209 --> 00:02:43,459
not and after a while you know why is

00:02:40,670 --> 00:02:45,410
male 27 White's why is it's like male q

00:02:43,459 --> 00:02:49,070
always way behind you know they start to

00:02:45,410 --> 00:02:51,230
have their own like personalities when

00:02:49,070 --> 00:02:52,910
we were to talk about like disaster

00:02:51,230 --> 00:02:55,630
recovery something is important enough

00:02:52,910 --> 00:02:59,540
to have once you want it to be able to

00:02:55,630 --> 00:03:02,780
have it again I actually got into a

00:02:59,540 --> 00:03:05,359
habit of reprovision a machines like

00:03:02,780 --> 00:03:07,310
whenever I did updates so that we need

00:03:05,359 --> 00:03:09,350
to test a disaster recovery which is

00:03:07,310 --> 00:03:11,660
often the weak link people if they plan

00:03:09,350 --> 00:03:14,150
at all but don't always like follow

00:03:11,660 --> 00:03:16,790
through to see that it works by always

00:03:14,150 --> 00:03:18,290
provisioning new like systems I saw

00:03:16,790 --> 00:03:22,280
every day that our disaster recovery

00:03:18,290 --> 00:03:26,120
program was working didn't like change

00:03:22,280 --> 00:03:28,069
management so once once once you build a

00:03:26,120 --> 00:03:29,900
system okay that's great i've got some

00:03:28,069 --> 00:03:31,819
system but now how do I manage the

00:03:29,900 --> 00:03:34,489
change and how do I manage that in

00:03:31,819 --> 00:03:36,699
pre-production environments like through

00:03:34,489 --> 00:03:36,699
production

00:03:37,470 --> 00:03:47,140
so we're here before I i started with

00:03:41,980 --> 00:03:49,360
puppet thank you i had to go through

00:03:47,140 --> 00:03:51,010
change approval boards for like change

00:03:49,360 --> 00:03:53,440
management is anyone familiar with those

00:03:51,010 --> 00:03:56,140
you get in room and everyone says no we

00:03:53,440 --> 00:03:59,950
don't want you to make any changes and

00:03:56,140 --> 00:04:02,020
so after using puppet for a while my

00:03:59,950 --> 00:04:03,850
maintenance events we're going like

00:04:02,020 --> 00:04:05,650
rather smoothly so suddenly like the

00:04:03,850 --> 00:04:10,320
change of purple process became easier

00:04:05,650 --> 00:04:16,630
and easier within like my organization

00:04:10,320 --> 00:04:19,739
we got a bit of some craziness at the

00:04:16,630 --> 00:04:23,950
beginning I started using puppet in 2007

00:04:19,739 --> 00:04:27,040
to release a nationwide boy platform so

00:04:23,950 --> 00:04:30,030
you know lots of regulation with voice

00:04:27,040 --> 00:04:33,460
and ensuring that stuff works I had to

00:04:30,030 --> 00:04:35,139
release to a bunch of systems all over

00:04:33,460 --> 00:04:37,389
the US and a lot of pre-production

00:04:35,139 --> 00:04:39,790
environments and so I was like I gotta

00:04:37,389 --> 00:04:41,500
have configuration management I went out

00:04:39,790 --> 00:04:44,229
and tried a few the different softwares

00:04:41,500 --> 00:04:46,660
and very quickly I got published to do

00:04:44,229 --> 00:04:50,740
things that were useful which is why I

00:04:46,660 --> 00:04:53,200
started using look like the next reason

00:04:50,740 --> 00:04:56,080
for config management is the idea of

00:04:53,200 --> 00:04:59,080
infrastructure as code and what you get

00:04:56,080 --> 00:05:00,820
from that is that you are building

00:04:59,080 --> 00:05:03,640
systems with code you're managing

00:05:00,820 --> 00:05:05,260
systems programmatically and as such you

00:05:03,640 --> 00:05:08,080
can use the same tools that you might

00:05:05,260 --> 00:05:11,140
use for your other like bits of source

00:05:08,080 --> 00:05:14,160
code so things like version control

00:05:11,140 --> 00:05:17,050
systems to know like what's going on

00:05:14,160 --> 00:05:19,060
simple tools like diff you know to see

00:05:17,050 --> 00:05:21,430
how to my infrastructure change like

00:05:19,060 --> 00:05:23,770
just like your code change continuous

00:05:21,430 --> 00:05:26,800
integration and collaborative tools like

00:05:23,770 --> 00:05:28,450
that I think if you get nothing else

00:05:26,800 --> 00:05:30,789
from my talk I hope that we can all

00:05:28,450 --> 00:05:33,250
strive to write better commit messages

00:05:30,789 --> 00:05:35,350
and talk about why we made changes and

00:05:33,250 --> 00:05:36,910
not what we changed because diff does a

00:05:35,350 --> 00:05:39,330
really good job about telling us what we

00:05:36,910 --> 00:05:39,330
changed

00:05:40,900 --> 00:05:49,270
so puppet itself is open source we're

00:05:45,410 --> 00:05:51,770
packaged with the major like vendors

00:05:49,270 --> 00:05:54,020
these stats are a little old I think our

00:05:51,770 --> 00:05:56,960
mailing list is around 4,000 people at

00:05:54,020 --> 00:06:00,230
about 450 people at all times on powned

00:05:56,960 --> 00:06:03,470
puppet on freenode we've got a lot of

00:06:00,230 --> 00:06:07,570
people contributing code like to us both

00:06:03,470 --> 00:06:10,910
puppet code and actual classes that make

00:06:07,570 --> 00:06:12,500
puppet do things on your systems so we

00:06:10,910 --> 00:06:14,750
are definitely an open source like

00:06:12,500 --> 00:06:17,770
company with the thriving community it's

00:06:14,750 --> 00:06:23,900
not just us pointing direction for

00:06:17,770 --> 00:06:29,990
everything we recently I recently

00:06:23,900 --> 00:06:32,750
released puppet enterprise which runs on

00:06:29,990 --> 00:06:39,710
the systems in blue puppet runs on the

00:06:32,750 --> 00:06:42,230
rest of the systems I promise this isn't

00:06:39,710 --> 00:06:44,450
a sales pitch puppet enterprise is new

00:06:42,230 --> 00:06:46,790
for us and like love like questions for

00:06:44,450 --> 00:06:50,150
that and so like what we do is we we

00:06:46,790 --> 00:06:51,770
packaged puppet and bundle it in a way

00:06:50,150 --> 00:06:54,220
so that you can deploy it with best

00:06:51,770 --> 00:06:57,950
practices for scalability and

00:06:54,220 --> 00:07:00,680
availability pump itself as a web app so

00:06:57,950 --> 00:07:02,660
it's written in Ruby so you could run it

00:07:00,680 --> 00:07:05,870
as just mongrels you could do reverse

00:07:02,660 --> 00:07:07,910
proxy with apache engine X the unicorn

00:07:05,870 --> 00:07:09,470
there's a ton of different ways so we

00:07:07,910 --> 00:07:14,480
picked the way it's going to scale which

00:07:09,470 --> 00:07:16,550
is with passenger we encapsulate the

00:07:14,480 --> 00:07:19,880
installation so all the packages have a

00:07:16,550 --> 00:07:21,980
PE like prefix like to them that way our

00:07:19,880 --> 00:07:23,990
version of Ruby and apache doesn't

00:07:21,980 --> 00:07:26,150
interfere with your version we install

00:07:23,990 --> 00:07:28,880
everything in a puppet so it's totally

00:07:26,150 --> 00:07:31,630
encapsulated and also that way you don't

00:07:28,880 --> 00:07:34,520
have to worry about keeping your app

00:07:31,630 --> 00:07:36,890
that stack in sync with what you need

00:07:34,520 --> 00:07:38,990
for ours so if we're still lagging you

00:07:36,890 --> 00:07:39,580
know and using Ruby 18 and you want to

00:07:38,990 --> 00:07:41,500
use really

00:07:39,580 --> 00:07:48,580
9 like you don't have to figure all that

00:07:41,500 --> 00:07:51,430
out hope it's pervasive so lots of like

00:07:48,580 --> 00:07:53,379
large clients so if you're thinking that

00:07:51,430 --> 00:07:57,159
you know you're going to be the like

00:07:53,379 --> 00:07:58,990
guinea pig like you're not so lots of

00:07:57,159 --> 00:08:00,699
folks like using a sir somebody that's

00:07:58,990 --> 00:08:03,639
not on here that I thought was cool was

00:08:00,699 --> 00:08:05,169
we found out that the German air traffic

00:08:03,639 --> 00:08:07,689
control like uses puppet for their

00:08:05,169 --> 00:08:09,189
systems which it does could meet I'm

00:08:07,689 --> 00:08:12,699
still a little hot in the microphone

00:08:09,189 --> 00:08:16,659
here I think so get into how puppet

00:08:12,699 --> 00:08:20,819
works so like with puppet you're going

00:08:16,659 --> 00:08:23,440
to define the state of your relationship

00:08:20,819 --> 00:08:26,110
with like with the system so you just

00:08:23,440 --> 00:08:30,639
define the system state and you do that

00:08:26,110 --> 00:08:33,789
through like writing code then you can

00:08:30,639 --> 00:08:36,880
simulate those changes on your system

00:08:33,789 --> 00:08:39,279
which is great so you can run puppet and

00:08:36,880 --> 00:08:42,519
run it in a no op mode and it'll

00:08:39,279 --> 00:08:44,440
basically diff what you want your system

00:08:42,519 --> 00:08:46,839
to look like with what the system looks

00:08:44,440 --> 00:08:49,269
like then and tell you what it would do

00:08:46,839 --> 00:08:52,149
without actually doing anything which is

00:08:49,269 --> 00:08:54,010
awesome to be able to have a maintenance

00:08:52,149 --> 00:08:57,970
event where you already know like what's

00:08:54,010 --> 00:09:00,010
going to happen and then it can enforce

00:08:57,970 --> 00:09:02,470
those like changes on to the system and

00:09:00,010 --> 00:09:04,269
any time it does an enforcement it sends

00:09:02,470 --> 00:09:09,160
off a report so you can see like what's

00:09:04,269 --> 00:09:11,290
going on so like we do this by writing a

00:09:09,160 --> 00:09:13,240
puppet code like you don't have to know

00:09:11,290 --> 00:09:16,959
another like language pub that has a

00:09:13,240 --> 00:09:20,620
very simple like dsl that we will like

00:09:16,959 --> 00:09:24,190
it into and you write code in MA and I

00:09:20,620 --> 00:09:26,860
modular like format and then you

00:09:24,190 --> 00:09:29,260
associate that code with the note sir

00:09:26,860 --> 00:09:31,269
like with your systems so that's where

00:09:29,260 --> 00:09:34,420
you have this no decode relationship

00:09:31,269 --> 00:09:37,180
where you say no dub dub dub one is

00:09:34,420 --> 00:09:38,860
going to run my Apache module and my

00:09:37,180 --> 00:09:40,480
database system is going to run my my

00:09:38,860 --> 00:09:43,180
sequel module and they're all going to

00:09:40,480 --> 00:09:45,339
run my security modules and so you write

00:09:43,180 --> 00:09:49,209
these very like modular and reusable

00:09:45,339 --> 00:09:51,490
code and then associate it with like

00:09:49,209 --> 00:09:53,870
with the different notes

00:09:51,490 --> 00:09:56,810
you can also download code at Forge

00:09:53,870 --> 00:10:01,579
puppet labs com and so a lot of that

00:09:56,810 --> 00:10:07,160
works been done for like major

00:10:01,579 --> 00:10:10,190
applications so talk about how how pup

00:10:07,160 --> 00:10:14,240
it works we'll start with blank hardware

00:10:10,190 --> 00:10:16,730
or lack of a vm you go through a

00:10:14,240 --> 00:10:19,670
provisioning like process to a base

00:10:16,730 --> 00:10:22,910
install and then on that puppets going

00:10:19,670 --> 00:10:24,860
to configure the system into the role

00:10:22,910 --> 00:10:28,010
that you want it to be in but then also

00:10:24,860 --> 00:10:30,370
maintain it in that system so as system

00:10:28,010 --> 00:10:34,070
is now without configuration management

00:10:30,370 --> 00:10:35,510
you probably get to like to this far if

00:10:34,070 --> 00:10:37,910
you're using something like kickstart

00:10:35,510 --> 00:10:39,949
you know you would provision the system

00:10:37,910 --> 00:10:42,860
and then you'd have some post section

00:10:39,949 --> 00:10:45,380
that runs you know all your pile of

00:10:42,860 --> 00:10:48,130
pearl and bash and makes the system into

00:10:45,380 --> 00:10:50,600
a system the problem with that is that

00:10:48,130 --> 00:10:52,519
so you've built a system like so what

00:10:50,600 --> 00:10:54,260
there's nothing maintaining it and

00:10:52,519 --> 00:10:55,880
ensuring that it's staying in the state

00:10:54,260 --> 00:10:58,430
that you want it to be in and that's

00:10:55,880 --> 00:11:01,670
where configuration management like

00:10:58,430 --> 00:11:03,620
really helps in terms of best practices

00:11:01,670 --> 00:11:05,839
and this is really configuration

00:11:03,620 --> 00:11:08,870
management tool agnostic is that you

00:11:05,839 --> 00:11:12,500
want this base install to be a minimal

00:11:08,870 --> 00:11:14,269
install and so not a specific one for a

00:11:12,500 --> 00:11:16,339
database server versus a web server

00:11:14,269 --> 00:11:20,029
versus an app server but you want just a

00:11:16,339 --> 00:11:22,910
very simplified base installation and

00:11:20,029 --> 00:11:24,709
then on top of that base install you

00:11:22,910 --> 00:11:26,810
will like model things with the

00:11:24,709 --> 00:11:28,910
configuration management and so that way

00:11:26,810 --> 00:11:33,170
you're capturing like what it is you

00:11:28,910 --> 00:11:36,079
want on your systems let's talk about

00:11:33,170 --> 00:11:38,779
like managing configuration drift so you

00:11:36,079 --> 00:11:40,069
get the state of the system that you

00:11:38,779 --> 00:11:43,089
want it to be in and you're going to

00:11:40,069 --> 00:11:46,190
identify this by writing code that says

00:11:43,089 --> 00:11:49,459
what's what the desired state is so this

00:11:46,190 --> 00:11:51,970
could be as simple as saying i want etsy

00:11:49,459 --> 00:11:55,080
sudo errs to always have permissions

00:11:51,970 --> 00:11:58,140
zero 400

00:11:55,080 --> 00:12:02,010
that that that might drift out of state

00:11:58,140 --> 00:12:04,740
like maybe it's like mode flight changes

00:12:02,010 --> 00:12:07,650
so puppet would run and then bring that

00:12:04,740 --> 00:12:09,390
into the desire state again and actually

00:12:07,650 --> 00:12:12,210
make the change put your system back to

00:12:09,390 --> 00:12:13,920
where it should be like whenever it does

00:12:12,210 --> 00:12:20,970
that it's going to kick off a report and

00:12:13,920 --> 00:12:24,360
send that to the report server so talk

00:12:20,970 --> 00:12:26,430
about like data flow all of the

00:12:24,360 --> 00:12:29,540
communication with puppet between the

00:12:26,430 --> 00:12:32,810
masters and the agents is all via ssl

00:12:29,540 --> 00:12:37,350
and we use certificates for

00:12:32,810 --> 00:12:39,300
authentication by default we're a pull

00:12:37,350 --> 00:12:42,720
based system although we can be pushed

00:12:39,300 --> 00:12:46,260
based which means that the nodes would

00:12:42,720 --> 00:12:48,510
wake up and like phone home and say hey

00:12:46,260 --> 00:12:54,030
what should I look like and then like

00:12:48,510 --> 00:12:56,550
pull that back it starts off where the

00:12:54,030 --> 00:12:59,880
node sends information called facts

00:12:56,550 --> 00:13:01,440
about itself to the puppet master the

00:12:59,880 --> 00:13:04,430
puppet master is able to take that

00:13:01,440 --> 00:13:07,080
information and do that no decode

00:13:04,430 --> 00:13:12,060
relationship work says okay you're no

00:13:07,080 --> 00:13:14,880
dub dub dub 10 an Apache system it

00:13:12,060 --> 00:13:18,000
builds a catalogue of what the system

00:13:14,880 --> 00:13:19,890
should look like and sends it to the

00:13:18,000 --> 00:13:21,840
node and then it's up to the node to

00:13:19,890 --> 00:13:24,150
apply that catalog in the way that makes

00:13:21,840 --> 00:13:28,230
sense and then of course your ports are

00:13:24,150 --> 00:13:30,330
kicked out to a reporting server facts

00:13:28,230 --> 00:13:32,910
are automatically maintained asset

00:13:30,330 --> 00:13:37,290
inventory that's in real time whenever

00:13:32,910 --> 00:13:40,770
you query it so be a little hard to read

00:13:37,290 --> 00:13:43,050
but facts are like key value pairs so we

00:13:40,770 --> 00:13:46,680
have a list of keys and then their

00:13:43,050 --> 00:13:48,840
values over here all the keys are

00:13:46,680 --> 00:13:50,910
available as top scope variables within

00:13:48,840 --> 00:13:53,070
your code so you can make like

00:13:50,910 --> 00:13:56,130
conditional logic based on the

00:13:53,070 --> 00:13:58,830
information on your system so something

00:13:56,130 --> 00:14:01,500
you might do with this is let's say you

00:13:58,830 --> 00:14:04,260
want to key off your heap size that you

00:14:01,500 --> 00:14:06,270
use for tomcat based on the total amount

00:14:04,260 --> 00:14:07,139
of memory on the system instead of

00:14:06,270 --> 00:14:09,629
having to know

00:14:07,139 --> 00:14:11,790
the amount of memory on your individual

00:14:09,629 --> 00:14:14,069
systems and like manage all that you

00:14:11,790 --> 00:14:15,569
could do it like programmatically and

00:14:14,069 --> 00:14:18,989
you know like based on all the like

00:14:15,569 --> 00:14:23,279
total memory or something that how many

00:14:18,989 --> 00:14:26,119
people in the room program and Ruby okay

00:14:23,279 --> 00:14:28,980
a couple of programmers back there I

00:14:26,119 --> 00:14:33,239
don't program in Ruby but I can still

00:14:28,980 --> 00:14:35,759
write custom facts so like you could use

00:14:33,239 --> 00:14:39,149
this code fragment and then put your

00:14:35,759 --> 00:14:41,910
facts in the programming language of

00:14:39,149 --> 00:14:46,410
your of your choice or bash or shell or

00:14:41,910 --> 00:14:49,699
have them executed I think one of the

00:14:46,410 --> 00:14:54,119
first custom facts I wrote dealt with a

00:14:49,699 --> 00:14:57,919
vendor-supplied binary to check the rate

00:14:54,119 --> 00:14:57,919
status and so

00:14:57,920 --> 00:15:06,149
the we had an issue where their program

00:15:02,249 --> 00:15:08,910
was a multi-line text output you know if

00:15:06,149 --> 00:15:10,619
I was running it on the system maybe it

00:15:08,910 --> 00:15:13,800
would look nice but I'm trying to run

00:15:10,619 --> 00:15:16,290
this on tons of systems so I was able to

00:15:13,800 --> 00:15:18,509
take that binary you know do some grep

00:15:16,290 --> 00:15:20,279
walk like magic and then get the one

00:15:18,509 --> 00:15:23,670
field actually cared about which was is

00:15:20,279 --> 00:15:26,610
my raid array okay or degraded you know

00:15:23,670 --> 00:15:28,769
failed make that a custom faq and fact

00:15:26,610 --> 00:15:34,350
and then do conditional logic based on

00:15:28,769 --> 00:15:36,540
that so hugely useful to have these now

00:15:34,350 --> 00:15:39,509
the next part is the catalog so it's a

00:15:36,540 --> 00:15:41,279
comprehensive resource list of the

00:15:39,509 --> 00:15:45,139
desired state that you want the system

00:15:41,279 --> 00:15:47,579
to be in and it's easily like validated

00:15:45,139 --> 00:15:49,529
prior to the client like running it

00:15:47,579 --> 00:15:51,749
which means that you can run in a no op

00:15:49,529 --> 00:15:54,410
mode and see what's going to change on

00:15:51,749 --> 00:15:58,670
your system before you actually do it

00:15:54,410 --> 00:16:01,889
and then reports that get kicked off our

00:15:58,670 --> 00:16:03,869
again comprehensive of every change made

00:16:01,889 --> 00:16:05,759
and we correlate that to the resource

00:16:03,869 --> 00:16:09,600
that we're managing so we might be

00:16:05,759 --> 00:16:12,240
managing a service and so we say the

00:16:09,600 --> 00:16:14,579
service should be on at boot time and it

00:16:12,240 --> 00:16:17,129
should be running and so if the service

00:16:14,579 --> 00:16:18,839
is not you know public can go in there

00:16:17,129 --> 00:16:20,879
change it and then you'll have a report

00:16:18,839 --> 00:16:25,429
that shows what happened and then

00:16:20,879 --> 00:16:25,429
correlated with leg with your code

00:16:26,059 --> 00:16:33,149
methods we have for reporting HTTP

00:16:29,749 --> 00:16:35,779
syslog rd graph we can just store the

00:16:33,149 --> 00:16:39,480
files the catalogs are in yamo format

00:16:35,779 --> 00:16:42,480
and then tag mail tag mail is kind of

00:16:39,480 --> 00:16:45,089
cool because you can tag individual

00:16:42,480 --> 00:16:46,949
parts of your code and resources and

00:16:45,089 --> 00:16:50,220
whenever there's a change you can send a

00:16:46,949 --> 00:16:53,009
report via email so a good example of

00:16:50,220 --> 00:16:55,049
this is let's say you have a security

00:16:53,009 --> 00:16:57,449
team and they have a security policy

00:16:55,049 --> 00:17:00,920
like you can't ssh his route to your

00:16:57,449 --> 00:17:05,270
systems so you manage the sshd config

00:17:00,920 --> 00:17:07,670
you turn off you know like permit route

00:17:05,270 --> 00:17:09,410
then somehow that gets turned back on so

00:17:07,670 --> 00:17:10,880
puppets like going to run its going to

00:17:09,410 --> 00:17:13,310
put your system back in the state you

00:17:10,880 --> 00:17:16,130
want it to be in but now it can send an

00:17:13,310 --> 00:17:18,530
email to the security team to say hey

00:17:16,130 --> 00:17:19,850
there was an incident and if you use you

00:17:18,530 --> 00:17:23,270
know a tool like our tea or something

00:17:19,850 --> 00:17:25,700
where you can take your email and turn

00:17:23,270 --> 00:17:28,280
it into a ticket well now puppets just

00:17:25,700 --> 00:17:30,770
logging tickets like for you the cool

00:17:28,280 --> 00:17:33,170
thing about this is that you know the

00:17:30,770 --> 00:17:35,480
time that you are brought back into

00:17:33,170 --> 00:17:37,910
compliance and if you look at the last

00:17:35,480 --> 00:17:40,790
puppet run you could tell the time that

00:17:37,910 --> 00:17:43,490
you were out of compliance which is huge

00:17:40,790 --> 00:17:44,750
if you have any security or like

00:17:43,490 --> 00:17:46,760
compliance concerns like that cuz you

00:17:44,750 --> 00:17:48,470
know the window that you were out like

00:17:46,760 --> 00:17:51,260
when it was fixed and now there's a

00:17:48,470 --> 00:17:55,630
ticket so the security guys can go over

00:17:51,260 --> 00:17:58,640
and bug the people that run that system

00:17:55,630 --> 00:18:02,090
here's our dashboard which is a

00:17:58,640 --> 00:18:06,410
web-based like gooey to like give you an

00:18:02,090 --> 00:18:10,370
idea into it has simple red green type

00:18:06,410 --> 00:18:12,890
of interface so you can easily see on

00:18:10,370 --> 00:18:15,110
all your nodes are they okay have any

00:18:12,890 --> 00:18:17,420
nodes not checked it recently like

00:18:15,110 --> 00:18:19,310
what's going on from that you can

00:18:17,420 --> 00:18:20,900
actually go in there and see all the

00:18:19,310 --> 00:18:27,020
errors just like you would see them if

00:18:20,900 --> 00:18:29,770
you were consoled into the machine like

00:18:27,020 --> 00:18:32,660
this is actual puppet code itself and

00:18:29,770 --> 00:18:35,540
what I really like about puppet is that

00:18:32,660 --> 00:18:38,210
I talk about what I want the system to

00:18:35,540 --> 00:18:40,490
be we're a declarative language and we

00:18:38,210 --> 00:18:43,520
model things as opposed to how to do

00:18:40,490 --> 00:18:48,320
them and so this code here says I have a

00:18:43,520 --> 00:18:51,410
package resource named ntp and i want to

00:18:48,320 --> 00:18:55,880
ensure that its installed right so

00:18:51,410 --> 00:18:59,060
notice I didn't say use y'all I didn't

00:18:55,880 --> 00:19:01,870
say use apps I just said there's a

00:18:59,060 --> 00:19:04,100
package called ntp and i want it i

00:19:01,870 --> 00:19:06,080
really like that i mean at the end of

00:19:04,100 --> 00:19:09,740
the day i like to build systems I don't

00:19:06,080 --> 00:19:12,320
really care about like by memorizing you

00:19:09,740 --> 00:19:13,940
know is it add user or user add and what

00:19:12,320 --> 00:19:18,280
are all the flags that I make to make it

00:19:13,940 --> 00:19:18,280
happen that's really not important

00:19:18,700 --> 00:19:25,070
so you write this code this is on the

00:19:21,650 --> 00:19:27,380
server and then the individual nodes

00:19:25,070 --> 00:19:28,820
they have what we call providers and

00:19:27,380 --> 00:19:30,560
this is the listing of the package

00:19:28,820 --> 00:19:33,830
provider so you can see there's tons of

00:19:30,560 --> 00:19:37,700
ways to evaluate packages and so the

00:19:33,830 --> 00:19:39,680
nodes themselves take this code and then

00:19:37,700 --> 00:19:41,660
they say oh I'm a debian system so i'm

00:19:39,680 --> 00:19:45,380
going to use app or i'm a central system

00:19:41,660 --> 00:19:47,750
i'll use young and they do that to know

00:19:45,380 --> 00:19:50,320
you know how to evaluate that resource

00:19:47,750 --> 00:19:54,350
it's the same thing with like users

00:19:50,320 --> 00:19:56,360
crontab things like that this lets us

00:19:54,350 --> 00:19:59,150
scale makes everything very like

00:19:56,360 --> 00:20:02,960
pluggable so you can easily write your

00:19:59,150 --> 00:20:05,570
own providers and types some example

00:20:02,960 --> 00:20:09,430
ones ones that are most common would be

00:20:05,570 --> 00:20:11,810
I package service file exact and cron

00:20:09,430 --> 00:20:13,820
lots of different resource types and

00:20:11,810 --> 00:20:20,120
that it's easy to extend these and

00:20:13,820 --> 00:20:25,400
create your own so here's the most

00:20:20,120 --> 00:20:28,190
common design pattern if you can only do

00:20:25,400 --> 00:20:30,650
this with puppet you can do a ton and so

00:20:28,190 --> 00:20:32,750
this like this design pattern is the

00:20:30,650 --> 00:20:35,420
package file service like most of the

00:20:32,750 --> 00:20:37,760
things that we do as admins is get some

00:20:35,420 --> 00:20:40,670
like service running so first we have to

00:20:37,760 --> 00:20:42,620
install some package then we have some

00:20:40,670 --> 00:20:44,690
config file where we like you know twist

00:20:42,620 --> 00:20:47,720
the knobs then we have a service that

00:20:44,690 --> 00:20:51,260
pops out at the end since puppet is

00:20:47,720 --> 00:20:54,380
declarative and non deterministic you

00:20:51,260 --> 00:20:56,780
have to create these relationships

00:20:54,380 --> 00:20:59,300
between resources if you want ordering

00:20:56,780 --> 00:21:02,290
to happen so since we want you know the

00:20:59,300 --> 00:21:05,360
package then the file then the service

00:21:02,290 --> 00:21:07,970
we we do things here like say require

00:21:05,360 --> 00:21:10,790
package ntp that way this will happen

00:21:07,970 --> 00:21:13,070
before the file and then this service is

00:21:10,790 --> 00:21:15,980
going to subscribe to the configuration

00:21:13,070 --> 00:21:19,580
file and what this does is say if that

00:21:15,980 --> 00:21:22,600
file ever changes let's let's also help

00:21:19,580 --> 00:21:24,880
the service and so

00:21:22,600 --> 00:21:28,350
this install on TP on your system and

00:21:24,880 --> 00:21:30,880
then if you ever changed your ntp comp

00:21:28,350 --> 00:21:33,490
the service would get restarted like for

00:21:30,880 --> 00:21:36,580
you so again the most common design

00:21:33,490 --> 00:21:38,770
pattern you can see how we are modeling

00:21:36,580 --> 00:21:40,570
the system we're not telling it to do

00:21:38,770 --> 00:21:42,640
certain things we're saying this is what

00:21:40,570 --> 00:21:49,210
you should look like and then publix

00:21:42,640 --> 00:21:51,910
going to enforce that state if it has

00:21:49,210 --> 00:21:54,789
built-in files serving so you use this

00:21:51,910 --> 00:21:59,230
like you are I and you can serve up

00:21:54,789 --> 00:22:02,320
files and we and we also do like

00:21:59,230 --> 00:22:04,090
templating the templates we didn't

00:22:02,320 --> 00:22:09,059
reinvent the wheel we just used Ruby's

00:22:04,090 --> 00:22:12,330
er be to do for our templating engine

00:22:09,059 --> 00:22:14,559
you see here we have these are variables

00:22:12,330 --> 00:22:17,280
these are actually facts which are

00:22:14,559 --> 00:22:20,559
available is top scoped like variables

00:22:17,280 --> 00:22:22,120
and then this is just an example to show

00:22:20,559 --> 00:22:25,090
you can do a bit more advanced things

00:22:22,120 --> 00:22:28,600
with er be this is basically so this is

00:22:25,090 --> 00:22:31,600
modeling a resolver like you're at sea

00:22:28,600 --> 00:22:33,640
resolve calm so we see where it's you

00:22:31,600 --> 00:22:35,740
know like putting in a search path and

00:22:33,640 --> 00:22:40,419
then this is basically doing a for loop

00:22:35,740 --> 00:22:42,730
over the array you can also do in line

00:22:40,419 --> 00:22:46,809
Ruby and all sorts of like fancy stuff

00:22:42,730 --> 00:22:51,240
with the templates this is a bit hard to

00:22:46,809 --> 00:22:53,350
read but syntax like checking I have

00:22:51,240 --> 00:22:55,990
aliases for my shell that when we do

00:22:53,350 --> 00:22:57,850
like syntax checking when working with

00:22:55,990 --> 00:23:00,190
puppet I would also strongly suggest

00:22:57,850 --> 00:23:02,500
putting in some tax checks in your

00:23:00,190 --> 00:23:04,809
version control systems like pre-commit

00:23:02,500 --> 00:23:06,580
hooks you can definitely write

00:23:04,809 --> 00:23:08,799
syntactically correct code that's still

00:23:06,580 --> 00:23:10,210
bad but uh you know at least don't

00:23:08,799 --> 00:23:13,380
accept coat that's not even going to

00:23:10,210 --> 00:23:13,380
pass the syntax checker

00:23:14,619 --> 00:23:19,969
next we'll get to store configs which

00:23:17,719 --> 00:23:22,369
gives you the ability to pass data

00:23:19,969 --> 00:23:25,639
between nodes so so far we've talked

00:23:22,369 --> 00:23:28,580
about knows interacting with a puppet

00:23:25,639 --> 00:23:31,309
master and so this allows you to pass

00:23:28,580 --> 00:23:33,739
data between light between your nodes

00:23:31,309 --> 00:23:36,649
and without them having to know about

00:23:33,739 --> 00:23:38,929
each other we do that through using a

00:23:36,649 --> 00:23:42,739
proxy and we use a database as a proxy

00:23:38,929 --> 00:23:45,109
system we support the you know main

00:23:42,739 --> 00:23:48,950
databases you'd expect to see my sequel

00:23:45,109 --> 00:23:51,529
sequel I photograph Oracle and how it

00:23:48,950 --> 00:23:53,719
works is we have one node and in this

00:23:51,529 --> 00:23:56,809
instance they're exporting their own

00:23:53,719 --> 00:23:58,999
like hosts entry to the puppet master

00:23:56,809 --> 00:24:01,429
and they're shoving that into the

00:23:58,999 --> 00:24:05,389
database and then these other nodes are

00:24:01,429 --> 00:24:08,950
realizing all the host entries from the

00:24:05,389 --> 00:24:11,690
database and in this way we would have

00:24:08,950 --> 00:24:14,570
systems that always had up to date like

00:24:11,690 --> 00:24:16,999
host entries for everything something a

00:24:14,570 --> 00:24:19,489
bit more useful than host centuries like

00:24:16,999 --> 00:24:22,969
people often use this technique for ssh

00:24:19,489 --> 00:24:25,460
light host keys and that way you can

00:24:22,969 --> 00:24:27,529
enforce like your note doesn't have to

00:24:25,460 --> 00:24:30,499
know about the rest of them but they all

00:24:27,529 --> 00:24:33,919
will have up to date by Coast keys and

00:24:30,499 --> 00:24:37,339
then you can use another resource to say

00:24:33,919 --> 00:24:41,509
I only want entries in my hook it in the

00:24:37,339 --> 00:24:44,179
host keys file that I've explicitly like

00:24:41,509 --> 00:24:47,179
talked about so if somebody tried to add

00:24:44,179 --> 00:24:51,099
some key in here next time puppet ran it

00:24:47,179 --> 00:24:51,099
would remove it and keep it up to date

00:24:54,300 --> 00:25:01,660
next is a TNC external node like

00:24:57,520 --> 00:25:04,390
classifier external no classifiers allow

00:25:01,660 --> 00:25:06,220
you and instead of having that like a

00:25:04,390 --> 00:25:07,510
text file where you basically say this

00:25:06,220 --> 00:25:09,940
is my node and this is the code that

00:25:07,510 --> 00:25:13,890
runs on it you can query some other

00:25:09,940 --> 00:25:17,560
system so if you work at a place or

00:25:13,890 --> 00:25:19,780
already have like an asset inventory so

00:25:17,560 --> 00:25:22,000
you already have a database of all of

00:25:19,780 --> 00:25:23,830
your nodes may be where they are IP

00:25:22,000 --> 00:25:26,050
information stuff like that but you

00:25:23,830 --> 00:25:30,490
don't want to duplicate that data so you

00:25:26,050 --> 00:25:33,580
could write a script to query the system

00:25:30,490 --> 00:25:35,800
you already have and then output at 2 ml

00:25:33,580 --> 00:25:38,440
so this is great if you already have a

00:25:35,800 --> 00:25:40,570
database you know some some big pile of

00:25:38,440 --> 00:25:43,390
pearl and sickle from like 10 years ago

00:25:40,570 --> 00:25:45,580
you can't get rid of you can still use

00:25:43,390 --> 00:25:49,480
what you already have like you can also

00:25:45,580 --> 00:25:50,860
use the puppet dashboard as an e NC to

00:25:49,480 --> 00:25:52,930
do it you just write a script that takes

00:25:50,860 --> 00:25:56,170
the surname as an argument and then it's

00:25:52,930 --> 00:25:59,050
just going to dump the output to

00:25:56,170 --> 00:26:01,330
standard out in the mo so you would take

00:25:59,050 --> 00:26:03,820
what the code would look like for your

00:26:01,330 --> 00:26:06,460
no decode relationship you have the node

00:26:03,820 --> 00:26:09,160
with some name we're setting some

00:26:06,460 --> 00:26:11,650
variables and then we're including these

00:26:09,160 --> 00:26:13,840
classes so we're saying the system is

00:26:11,650 --> 00:26:18,100
going to have a common class puppet dns

00:26:13,840 --> 00:26:21,550
ntp and our script to take this and turn

00:26:18,100 --> 00:26:23,590
it into yamo and output this then I've

00:26:21,550 --> 00:26:26,380
got an external node of classifier so

00:26:23,590 --> 00:26:32,370
it's like pretty easy to write to write

00:26:26,380 --> 00:26:34,660
your own let's hope we get into yqa

00:26:32,370 --> 00:26:37,140
right now I can see everybody out there

00:26:34,660 --> 00:26:41,200
well does anyone have questions about

00:26:37,140 --> 00:26:44,730
puppet all the stories that like they'd

00:26:41,200 --> 00:26:44,730
like to share yeah

00:26:50,950 --> 00:26:55,809
sure so the gentleman asked how do you

00:26:53,380 --> 00:26:58,990
deploy puppet into an existing

00:26:55,809 --> 00:27:03,039
environment and so a way to do that is

00:26:58,990 --> 00:27:06,220
to start small and iterate and increase

00:27:03,039 --> 00:27:07,929
your coverage so start by managing you

00:27:06,220 --> 00:27:10,840
know something small like at CC doors

00:27:07,929 --> 00:27:13,179
and then start like managing like whole

00:27:10,840 --> 00:27:15,820
systems and so you're managing the

00:27:13,179 --> 00:27:17,409
entire system like really the way that

00:27:15,820 --> 00:27:20,139
you test that you've managed this is

00:27:17,409 --> 00:27:23,230
that you're properly managing a system

00:27:20,139 --> 00:27:24,909
is you decommission the old one and you

00:27:23,230 --> 00:27:27,220
build one out entirely from the ground

00:27:24,909 --> 00:27:29,049
up with configuration management and

00:27:27,220 --> 00:27:30,960
you're provisioning system and then you

00:27:29,049 --> 00:27:33,519
prove that your disaster recovery works

00:27:30,960 --> 00:27:35,860
and you prove that you're totally

00:27:33,519 --> 00:27:37,419
managing everything that's important for

00:27:35,860 --> 00:27:40,529
that system because you just

00:27:37,419 --> 00:27:40,529
decommission the old one

00:27:44,600 --> 00:27:57,320
I'm sorry did you speak up sure so like

00:27:54,950 --> 00:27:59,620
the gentleman asked if we work with

00:27:57,320 --> 00:28:03,830
VMware to manage the infrastructure

00:27:59,620 --> 00:28:07,160
we're currently have code out now that

00:28:03,830 --> 00:28:09,800
works with ec2 to provision instances

00:28:07,160 --> 00:28:12,950
there but not specifically with like

00:28:09,800 --> 00:28:15,020
VMware though you could use a puppet

00:28:12,950 --> 00:28:21,320
with something like VI pearl or

00:28:15,020 --> 00:28:24,820
something to manage your VMware so like

00:28:21,320 --> 00:28:27,800
normally the stack like what I see is

00:28:24,820 --> 00:28:30,140
people like writing code that sets up

00:28:27,800 --> 00:28:32,030
their BMS and then does some sort of

00:28:30,140 --> 00:28:34,400
provisioning and then at the end of the

00:28:32,030 --> 00:28:37,960
provisioning puppets called and then

00:28:34,400 --> 00:28:37,960
like manages the system

00:28:41,830 --> 00:28:46,100
yeah so I've like built a clod before

00:28:44,029 --> 00:28:49,340
like that where I used VMware and

00:28:46,100 --> 00:28:51,440
cobbler in conjunction with like with

00:28:49,340 --> 00:28:55,279
puppet couplers a great tool from Red

00:28:51,440 --> 00:29:03,980
Hat and it works on debian windows

00:28:55,279 --> 00:29:09,080
solaris like tons of stuff yeah yeah

00:29:03,980 --> 00:29:13,309
sure so often for the store configs I I

00:29:09,080 --> 00:29:19,840
use my sequel myself and yeah I can just

00:29:13,309 --> 00:29:19,840
query that with like sequel so yeah

00:29:24,300 --> 00:29:29,070
sure so like the gentleman asked me to

00:29:26,250 --> 00:29:33,140
explain the enterprise like version the

00:29:29,070 --> 00:29:36,750
Enterprise version is open source and it

00:29:33,140 --> 00:29:39,240
has a cost associated with it that's

00:29:36,750 --> 00:29:41,910
tiered by node and so that allows you to

00:29:39,240 --> 00:29:45,090
buy support and have a supportable

00:29:41,910 --> 00:29:46,980
system it's also the software is

00:29:45,090 --> 00:29:49,380
encapsulated so it doesn't interfere

00:29:46,980 --> 00:29:51,650
with the software that's already on your

00:29:49,380 --> 00:29:51,650
system

00:30:01,610 --> 00:30:08,540
sure so like gentleman asked to discuss

00:30:04,910 --> 00:30:14,650
rolling back updates that were an issue

00:30:08,540 --> 00:30:16,850
so going back in time is impossible I

00:30:14,650 --> 00:30:21,020
haven't figured out how to build a time

00:30:16,850 --> 00:30:26,120
machine yet you can't really do it with

00:30:21,020 --> 00:30:29,240
systems you can approximate it and so to

00:30:26,120 --> 00:30:31,370
do that you would keep your puppet code

00:30:29,240 --> 00:30:33,410
and a version control system but then

00:30:31,370 --> 00:30:36,880
you also have to have your data version

00:30:33,410 --> 00:30:39,110
as well as well as have all of your

00:30:36,880 --> 00:30:41,270
repositories like versions because if

00:30:39,110 --> 00:30:44,660
you only go back with puppet code but

00:30:41,270 --> 00:30:46,580
all your packages have moved forward you

00:30:44,660 --> 00:30:48,110
know things might not work same with

00:30:46,580 --> 00:30:50,870
okay you can take the state of the

00:30:48,110 --> 00:30:53,990
system back but if your data has gone

00:30:50,870 --> 00:30:55,730
forward how do you deal with that so I

00:30:53,990 --> 00:30:57,500
trying to encourage people instead of

00:30:55,730 --> 00:30:59,630
thinking about rollbacks how to think

00:30:57,500 --> 00:31:03,130
about like rolling forward so like

00:30:59,630 --> 00:31:03,130
fixing the problem and moving on

00:31:13,539 --> 00:31:17,499
so you could do that but you haven't

00:31:15,489 --> 00:31:19,629
actually rolled back anything so he said

00:31:17,499 --> 00:31:21,549
you could uninstall something and then

00:31:19,629 --> 00:31:23,049
reinstall the right version but you

00:31:21,549 --> 00:31:24,669
actually haven't rolled back the system

00:31:23,049 --> 00:31:27,489
you've just changed the state of the

00:31:24,669 --> 00:31:29,350
system into a somewhat broken state to a

00:31:27,489 --> 00:31:30,970
different state but that's that's not

00:31:29,350 --> 00:31:33,369
really rolling back like the end result

00:31:30,970 --> 00:31:36,450
might be that but the system state isn't

00:31:33,369 --> 00:31:36,450
actually like rolling back

00:32:13,100 --> 00:32:19,789
sure so like he's asking about how to

00:32:17,210 --> 00:32:23,600
deal with specific configurations during

00:32:19,789 --> 00:32:27,620
provision time and so you'd have that

00:32:23,600 --> 00:32:29,809
minimal base install and then you would

00:32:27,620 --> 00:32:31,130
manage what you want on on that system

00:32:29,809 --> 00:32:32,870
that you would manage it with your

00:32:31,130 --> 00:32:35,720
configuration like management tool like

00:32:32,870 --> 00:32:39,530
puppet in terms of how you handle the

00:32:35,720 --> 00:32:42,830
packages I would basically version

00:32:39,530 --> 00:32:44,620
control my package repositories I mean

00:32:42,830 --> 00:32:47,690
if there's really like two ways to

00:32:44,620 --> 00:32:50,600
change how systems get packages either

00:32:47,690 --> 00:32:53,030
you update configs on the client let's

00:32:50,600 --> 00:32:55,370
say look in these new like places every

00:32:53,030 --> 00:32:57,559
time you want to change it or you go to

00:32:55,370 --> 00:32:59,900
the place that the packages are and you

00:32:57,559 --> 00:33:01,490
change the like where things are served

00:32:59,900 --> 00:33:03,230
from so it's a lot easier to change

00:33:01,490 --> 00:33:04,789
where things are served from you know

00:33:03,230 --> 00:33:06,950
you some links to where they actually

00:33:04,789 --> 00:33:10,549
aren't things like that to keep your

00:33:06,950 --> 00:33:14,150
data in line in terms of like branching

00:33:10,549 --> 00:33:15,650
and stuff it just say it's it's it's

00:33:14,150 --> 00:33:17,510
important to have your public things

00:33:15,650 --> 00:33:22,690
under version control as well like a

00:33:17,510 --> 00:33:22,690
proper code there yes

00:33:42,860 --> 00:33:47,900
sure so there's order like yes how you

00:33:45,590 --> 00:33:50,330
deal with having multiple repositories

00:33:47,900 --> 00:33:53,179
on the system and multiple package like

00:33:50,330 --> 00:33:54,799
managers I hope you don't have multiple

00:33:53,179 --> 00:33:57,290
package managers on your systems but if

00:33:54,799 --> 00:34:00,110
you do you can specify that so like in

00:33:57,290 --> 00:34:05,660
the code you saw package and TP I could

00:34:00,110 --> 00:34:07,370
tell us explicitly provider is apt and I

00:34:05,660 --> 00:34:09,560
can run apps on my red hat system if

00:34:07,370 --> 00:34:13,070
that's how I roll I'll see like you

00:34:09,560 --> 00:34:15,440
could do that as well as managing your

00:34:13,070 --> 00:34:20,000
repositories you can manage repositories

00:34:15,440 --> 00:34:24,020
there's repo types and pop it too easily

00:34:20,000 --> 00:34:26,649
like manage those as well as doing it at

00:34:24,020 --> 00:34:26,649
provision time

00:34:29,740 --> 00:34:34,770
like any other questions puppets stories

00:34:54,530 --> 00:35:01,390
so as if I keep STM snapshots and I keep

00:34:58,010 --> 00:35:01,390
old versions of systems around

00:35:15,890 --> 00:35:20,480
sure so like won't go totally into

00:35:18,560 --> 00:35:22,310
change like management doesn't have a

00:35:20,480 --> 00:35:23,990
bunch time here today but like what i

00:35:22,310 --> 00:35:25,820
would do is have up these two systems

00:35:23,990 --> 00:35:29,330
like I probably have three or four or

00:35:25,820 --> 00:35:30,980
five where I have like dev QA prod and

00:35:29,330 --> 00:35:34,010
then I would have my own testing area

00:35:30,980 --> 00:35:35,630
around the around the puppet code so I

00:35:34,010 --> 00:35:37,550
mean prod and QA and all those things

00:35:35,630 --> 00:35:42,320
are always going to be lagging behind my

00:35:37,550 --> 00:35:44,540
development area and once I'm confident

00:35:42,320 --> 00:35:46,640
with some code I'm going to tag that and

00:35:44,540 --> 00:35:53,860
then propagate that tag out in my

00:35:46,640 --> 00:35:53,860
environments like any other questions

00:35:56,250 --> 00:36:00,990
alright well like thank you everybody

00:35:58,470 --> 00:36:02,850
for coming out and having me here was

00:36:00,990 --> 00:36:05,460
like great being here my first year

00:36:02,850 --> 00:36:09,420
itself and tomorrow if you're interested

00:36:05,460 --> 00:36:12,300
more in puppet I'm doing a tutorial from

00:36:09,420 --> 00:36:15,330
nine to four and so you'll get the

00:36:12,300 --> 00:36:16,710
training materials that normally cost

00:36:15,330 --> 00:36:18,750
like twenty two hundred dollars for

00:36:16,710 --> 00:36:20,370
three day like trading course and I'll

00:36:18,750 --> 00:36:22,260
be compressing that course into one day

00:36:20,370 --> 00:36:23,840
and will be like going over that

00:36:22,260 --> 00:36:27,110
tomorrow and that's from nine to four

00:36:23,840 --> 00:36:27,110
thanks everybody

00:36:41,220 --> 00:36:45,000
what about this I can help you like it

00:36:43,140 --> 00:36:47,780
we have the same problem what would

00:36:45,000 --> 00:36:47,780
happen if you do

00:36:50,860 --> 00:36:55,440
let's put the word out

00:36:53,380 --> 00:36:55,440
you

00:38:03,209 --> 00:38:09,969
as a service leader in cloud computing

00:38:06,819 --> 00:38:11,529
all we do is hosting computing to us the

00:38:09,969 --> 00:38:13,479
cloud is just the next generation of

00:38:11,529 --> 00:38:15,429
hosting and if someone who's been in the

00:38:13,479 --> 00:38:17,469
hosting industry for 12 years we feel

00:38:15,429 --> 00:38:18,549
we're in a unique position to really

00:38:17,469 --> 00:38:20,679
help bring these two worlds together

00:38:18,549 --> 00:38:23,019
these different sets of technologies and

00:38:20,679 --> 00:38:25,359
to help companies embrace this new world

00:38:23,019 --> 00:38:27,369
in this great new tool that allows

00:38:25,359 --> 00:38:29,949
faster innovation not only is it about

00:38:27,369 --> 00:38:35,519
us being responsive and accountable but

00:38:29,949 --> 00:38:38,160
it's about us doing more for you webos

00:38:35,519 --> 00:38:41,709
nos that works the way that you do

00:38:38,160 --> 00:38:45,869
across all your devices HP Slate and

00:38:41,709 --> 00:38:45,869

YouTube URL: https://www.youtube.com/watch?v=hfIPs2VX-Vk


