Title: 2012 SouthEast LinuxFest - Garrett Honeycutt - Expanded Introduction To Puppet
Publication date: 2014-01-09
Playlist: 2012 SouthEast LinuxFest - Build An Open Source Cloud Day
Description: 
	2012 SouthEast LinuxFest
Garrett Honeycutt
Build An Open Source Cloud Day
Expanded Introduction To Puppet
Captions: 
	00:00:00,480 --> 00:00:03,919
the following presentation was recorded

00:00:02,399 --> 00:00:06,080
at the 2012

00:00:03,919 --> 00:00:07,200
southeast linux fest in charlotte north

00:00:06,080 --> 00:00:09,280
carolina

00:00:07,200 --> 00:00:11,599
it is licensed under a creative commons

00:00:09,280 --> 00:00:13,200
license for more information about the

00:00:11,599 --> 00:00:17,279
southeast linux fest

00:00:13,200 --> 00:00:19,119
visit www.southeast lennoxville

00:00:17,279 --> 00:00:21,119
the southeast linux fest would like to

00:00:19,119 --> 00:00:23,840
thank the following diamond sponsors

00:00:21,119 --> 00:00:25,519
in 2012 for helping make these videos

00:00:23,840 --> 00:00:27,920
possible

00:00:25,519 --> 00:00:29,359
weekend so this is going to be more an

00:00:27,920 --> 00:00:31,199
introductory

00:00:29,359 --> 00:00:32,480
what's puppet all about what can you do

00:00:31,199 --> 00:00:35,680
sort of talk

00:00:32,480 --> 00:00:38,079
uh tomorrow i'm giving a new

00:00:35,680 --> 00:00:40,079
advanced talk so we're gonna dive into

00:00:38,079 --> 00:00:43,040
like m collective hero

00:00:40,079 --> 00:00:43,840
i'm gonna show a lot of code and then

00:00:43,040 --> 00:00:46,719
the other route

00:00:43,840 --> 00:00:47,920
sunday i'm doing a tutorial uh so it's

00:00:46,719 --> 00:00:51,039
gonna be an all-day

00:00:47,920 --> 00:00:52,480
uh tutorial and so if you're uh been

00:00:51,039 --> 00:00:52,800
using puppet want to know what's going

00:00:52,480 --> 00:00:54,719
on

00:00:52,800 --> 00:00:58,480
come to my talk tomorrow if you want to

00:00:54,719 --> 00:01:01,840
learn more come to the tutorial sunday

00:00:58,480 --> 00:01:05,199
right on cool

00:01:01,840 --> 00:01:07,680
so uh give a brief background about

00:01:05,199 --> 00:01:07,680
myself

00:01:08,720 --> 00:01:12,720
my background's mostly in systems

00:01:10,960 --> 00:01:16,720
engineering

00:01:12,720 --> 00:01:20,320
i started using puppet late 2007

00:01:16,720 --> 00:01:23,200
i was deploying a nationwide

00:01:20,320 --> 00:01:24,720
carrier grade voip system and that

00:01:23,200 --> 00:01:28,560
included a lot of kit

00:01:24,720 --> 00:01:31,280
in different cities with pre structured

00:01:28,560 --> 00:01:33,040
pre-production environments and before

00:01:31,280 --> 00:01:35,759
we were you know doing things by hand

00:01:33,040 --> 00:01:37,600
scripts stuff like that and i knew there

00:01:35,759 --> 00:01:38,720
was just no way we were going to be able

00:01:37,600 --> 00:01:41,920
to

00:01:38,720 --> 00:01:44,000
deploy this system and have the

00:01:41,920 --> 00:01:46,399
reliability that you need for a phone

00:01:44,000 --> 00:01:48,399
system without automating it

00:01:46,399 --> 00:01:49,840
so i looked at some tools i started

00:01:48,399 --> 00:01:51,680
using puppet

00:01:49,840 --> 00:01:54,079
within 30 minutes i had it like doing

00:01:51,680 --> 00:01:56,000
things and off i went

00:01:54,079 --> 00:01:58,960
fast forward and i started working there

00:01:56,000 --> 00:01:58,960
a year and a half ago

00:01:59,200 --> 00:02:02,799
for folks that aren't using

00:02:00,320 --> 00:02:06,159
configuration management uh

00:02:02,799 --> 00:02:07,759
have you gotten any uh like pushback or

00:02:06,159 --> 00:02:10,000
folks that are like when you when you

00:02:07,759 --> 00:02:13,280
started implementing it for maybe your

00:02:10,000 --> 00:02:14,400
uh your peers your managers

00:02:13,280 --> 00:02:17,440
you just said we're gonna roll with

00:02:14,400 --> 00:02:17,440
puppet and everything worked

00:02:21,360 --> 00:02:25,920
in my yeah it takes longer to competize

00:02:23,360 --> 00:02:36,879
something or see a vengeance something

00:02:25,920 --> 00:02:40,720
than just doing it takes a little longer

00:02:36,879 --> 00:02:42,959
yep yep that's a common one it takes

00:02:40,720 --> 00:02:46,160
longer the first time so why uh

00:02:42,959 --> 00:02:49,599
why put more into it um

00:02:46,160 --> 00:02:51,280
so i don't believe that uh your systems

00:02:49,599 --> 00:02:53,360
are these unique snowflakes that need to

00:02:51,280 --> 00:02:56,560
be hand crafted

00:02:53,360 --> 00:02:56,560
in some artisanal way

00:02:57,360 --> 00:03:03,200
the first one i hear besides the

00:03:01,120 --> 00:03:04,239
the time thing is that systems are only

00:03:03,200 --> 00:03:07,680
temporary

00:03:04,239 --> 00:03:09,280
uh yeah yeah exactly like we all know

00:03:07,680 --> 00:03:10,800
damn well if you put a system out there

00:03:09,280 --> 00:03:12,400
and someone starts using it you can't

00:03:10,800 --> 00:03:14,000
just take it back the next day people

00:03:12,400 --> 00:03:18,640
are gonna rely on it

00:03:14,000 --> 00:03:21,680
um replicas so uh

00:03:18,640 --> 00:03:24,959
i saw this uh great

00:03:21,680 --> 00:03:26,560
uh poster at a tv station recently i had

00:03:24,959 --> 00:03:29,120
the dos equis guy

00:03:26,560 --> 00:03:29,920
and it's saying uh i don't test often

00:03:29,120 --> 00:03:34,159
but when i do

00:03:29,920 --> 00:03:37,280
i do it in production yeah uh

00:03:34,159 --> 00:03:40,159
uh so so hopefully like

00:03:37,280 --> 00:03:41,920
you don't roll like that and uh you want

00:03:40,159 --> 00:03:44,959
you know this idea of like a dev

00:03:41,920 --> 00:03:46,959
a qa staging etc like you have some

00:03:44,959 --> 00:03:48,400
environments where you actually test

00:03:46,959 --> 00:03:50,000
things before they go to production

00:03:48,400 --> 00:03:51,680
right

00:03:50,000 --> 00:03:53,200
so how many people have had the

00:03:51,680 --> 00:03:55,200
experience where they go

00:03:53,200 --> 00:03:56,799
and they test something and it works it

00:03:55,200 --> 00:03:59,439
goes through qa and it works

00:03:56,799 --> 00:04:00,239
and it gets to production and it blows

00:03:59,439 --> 00:04:03,760
up and you're

00:04:00,239 --> 00:04:05,640
working all night yeah yeah exactly

00:04:03,760 --> 00:04:06,959
and what's it turn out to be

00:04:05,640 --> 00:04:08,879
inconsistencies

00:04:06,959 --> 00:04:10,080
between where you're testing and and

00:04:08,879 --> 00:04:12,879
production right

00:04:10,080 --> 00:04:15,920
so you you see that you know versions of

00:04:12,879 --> 00:04:18,400
software are slightly different

00:04:15,920 --> 00:04:20,320
that caused an issue maybe it worked in

00:04:18,400 --> 00:04:21,120
dev and qa because somebody just put in

00:04:20,320 --> 00:04:22,880
the sim link

00:04:21,120 --> 00:04:25,360
that was obvious so that the thing like

00:04:22,880 --> 00:04:28,320
would work but that wasn't captured

00:04:25,360 --> 00:04:29,680
and so when you went to deploy it it

00:04:28,320 --> 00:04:33,280
blew up right

00:04:29,680 --> 00:04:34,240
um disaster recovery like does anyone

00:04:33,280 --> 00:04:35,600
think about

00:04:34,240 --> 00:04:38,080
when their systems are going to blow up

00:04:35,600 --> 00:04:41,199
or aws is going to go offline again

00:04:38,080 --> 00:04:43,919
like things like this yeah and so

00:04:41,199 --> 00:04:44,720
when you get used to provisioning your

00:04:43,919 --> 00:04:47,120
systems

00:04:44,720 --> 00:04:48,560
and so the thought of oh what if that

00:04:47,120 --> 00:04:51,520
system goes down

00:04:48,560 --> 00:04:53,360
you're not really worried about that i

00:04:51,520 --> 00:04:56,560
think i think this is often overlooked

00:04:53,360 --> 00:04:58,560
i remember working at a a large assembly

00:04:56,560 --> 00:04:59,600
plant and there was a machine that ran

00:04:58,560 --> 00:05:01,759
the plant

00:04:59,600 --> 00:05:03,440
and uh they said if this machine ever

00:05:01,759 --> 00:05:05,280
goes down you know drop everything

00:05:03,440 --> 00:05:07,199
and go there i'm like and then what and

00:05:05,280 --> 00:05:08,720
they're like well you know hope it's not

00:05:07,199 --> 00:05:10,000
you on the shift right

00:05:08,720 --> 00:05:12,080
because no one knew how it actually

00:05:10,000 --> 00:05:14,400
worked so

00:05:12,080 --> 00:05:15,840
their their idea of dr was solely like

00:05:14,400 --> 00:05:18,639
non-existent you definitely don't want

00:05:15,840 --> 00:05:18,639
to be there right

00:05:18,880 --> 00:05:22,720
you really do get into this practice

00:05:20,639 --> 00:05:25,440
though using puppet and config

00:05:22,720 --> 00:05:26,240
management of you have an issue with a

00:05:25,440 --> 00:05:28,320
system

00:05:26,240 --> 00:05:29,759
we'll just blow it away recreate it

00:05:28,320 --> 00:05:31,360
build it up from scratch and it's going

00:05:29,759 --> 00:05:33,199
to come back every time

00:05:31,360 --> 00:05:34,960
and once once you start to get that

00:05:33,199 --> 00:05:36,639
trust

00:05:34,960 --> 00:05:38,080
things like dr are easy because you're

00:05:36,639 --> 00:05:39,600
doing this stuff every day

00:05:38,080 --> 00:05:41,120
like like you don't have to have these

00:05:39,600 --> 00:05:42,800
systems that are

00:05:41,120 --> 00:05:45,360
you know ancient and you hope that they

00:05:42,800 --> 00:05:48,800
just never go down right

00:05:45,360 --> 00:05:52,320
um so why we're all here today

00:05:48,800 --> 00:05:55,280
uh cloud so i can spin up tons of boxes

00:05:52,320 --> 00:05:56,720
who manages their vm's cloudy

00:05:55,280 --> 00:06:00,800
infrastructure now

00:05:56,720 --> 00:06:03,680
with images

00:06:00,800 --> 00:06:06,160
it's okay i'm not going to laugh

00:06:03,680 --> 00:06:07,840
somebody does

00:06:06,160 --> 00:06:10,479
and so what happens like when you do

00:06:07,840 --> 00:06:14,800
that you get

00:06:10,479 --> 00:06:14,800
image sprawl and so you have this

00:06:14,960 --> 00:06:20,560
like the snapshot you make a change

00:06:18,080 --> 00:06:21,680
i'll just snap it again make a change

00:06:20,560 --> 00:06:24,000
snap it again

00:06:21,680 --> 00:06:26,000
and then you don't really know what's

00:06:24,000 --> 00:06:27,919
going on there because like the history

00:06:26,000 --> 00:06:29,280
keeps building up so like croft keeps

00:06:27,919 --> 00:06:31,360
like building up

00:06:29,280 --> 00:06:32,720
uh if you're doing this with multiple

00:06:31,360 --> 00:06:35,520
systems you

00:06:32,720 --> 00:06:37,440
end up with these like matrices of well

00:06:35,520 --> 00:06:39,360
if i have the snapshot of this version

00:06:37,440 --> 00:06:41,520
it'll work with this one at this one

00:06:39,360 --> 00:06:43,039
and it's it's really hard to understand

00:06:41,520 --> 00:06:45,840
what's going on

00:06:43,039 --> 00:06:47,120
also uh you want to be able to build

00:06:45,840 --> 00:06:50,319
your systems

00:06:47,120 --> 00:06:53,360
across multiple platforms and so

00:06:50,319 --> 00:06:56,240
you can use different cloudy solutions

00:06:53,360 --> 00:06:57,759
physical solutions you know things like

00:06:56,240 --> 00:06:58,800
vagrant on your laptop

00:06:57,759 --> 00:07:01,360
because you know they're all being

00:06:58,800 --> 00:07:05,120
provisioned and built the same way

00:07:01,360 --> 00:07:05,120
which gives you a lot of flexibility

00:07:05,599 --> 00:07:09,919
who who here has ever built a cluster by

00:07:07,680 --> 00:07:09,919
hand

00:07:11,680 --> 00:07:17,360
anyone and so what like what happens

00:07:14,800 --> 00:07:19,680
uh at first you build it everything's

00:07:17,360 --> 00:07:21,039
shiny and new they all look the same

00:07:19,680 --> 00:07:22,800
maybe you got your load balancer in

00:07:21,039 --> 00:07:24,800
front everything's cool

00:07:22,800 --> 00:07:26,479
and then like a week goes by and

00:07:24,800 --> 00:07:28,880
probably still mostly cool

00:07:26,479 --> 00:07:30,080
and then a month six months a year and

00:07:28,880 --> 00:07:32,000
what happens is

00:07:30,080 --> 00:07:33,759
the the entropy grows on these systems

00:07:32,000 --> 00:07:35,759
like the croft like builds up

00:07:33,759 --> 00:07:38,160
and suddenly they're not really the same

00:07:35,759 --> 00:07:40,960
and your script in a for loop

00:07:38,160 --> 00:07:42,960
doesn't always work and you start seeing

00:07:40,960 --> 00:07:44,000
systems take on characteristics of their

00:07:42,960 --> 00:07:46,000
own uh

00:07:44,000 --> 00:07:47,280
like you know why is that one mail

00:07:46,000 --> 00:07:50,080
server it's queue

00:07:47,280 --> 00:07:51,520
always longer why is that one web server

00:07:50,080 --> 00:07:55,199
why is it always slower to

00:07:51,520 --> 00:07:55,199
like to respond etc

00:07:56,319 --> 00:08:02,000
so uh like change management um

00:07:59,919 --> 00:08:03,680
how many folks now when they want to go

00:08:02,000 --> 00:08:06,879
change something they just uh

00:08:03,680 --> 00:08:09,599
you know ssh into a box and do some work

00:08:06,879 --> 00:08:11,039
yeah and so that makes it really hard if

00:08:09,599 --> 00:08:14,160
you're working on a team

00:08:11,039 --> 00:08:16,080
to really know what's going on uh so how

00:08:14,160 --> 00:08:18,479
often do you have this conversation

00:08:16,080 --> 00:08:20,400
at work with your teammates hey when was

00:08:18,479 --> 00:08:23,840
the last time you were on

00:08:20,400 --> 00:08:25,360
uh what did you change anything on this

00:08:23,840 --> 00:08:28,720
box

00:08:25,360 --> 00:08:30,080
right well no kind of

00:08:28,720 --> 00:08:31,759
you know i just poked around a little

00:08:30,080 --> 00:08:35,919
bit i don't know right

00:08:31,759 --> 00:08:39,760
um oh like how many folks document

00:08:35,919 --> 00:08:41,919
what they do on a wiki yeah

00:08:39,760 --> 00:08:44,560
and so who's ever documented building a

00:08:41,919 --> 00:08:46,560
system on a wiki before

00:08:44,560 --> 00:08:48,160
yeah so that there's like some useful

00:08:46,560 --> 00:08:49,760
stuff there like maybe you put some

00:08:48,160 --> 00:08:51,519
links where you got the software

00:08:49,760 --> 00:08:53,839
your thoughts behind it like the

00:08:51,519 --> 00:08:55,200
commands but then you go back to that

00:08:53,839 --> 00:08:58,000
wiki a month later

00:08:55,200 --> 00:08:59,760
could you really rebuild that machine a

00:08:58,000 --> 00:09:02,480
year later

00:08:59,760 --> 00:09:03,920
probably not uh usually i would look at

00:09:02,480 --> 00:09:06,160
wiki pages when i started

00:09:03,920 --> 00:09:08,080
a company just to get like a broad

00:09:06,160 --> 00:09:11,920
overview of what folks are doing but all

00:09:08,080 --> 00:09:11,920
the technical information is just trash

00:09:12,240 --> 00:09:15,680
for change management a lot of that's

00:09:14,080 --> 00:09:17,760
really done with puppet

00:09:15,680 --> 00:09:19,279
through the version control system and

00:09:17,760 --> 00:09:23,600
so we don't enforce

00:09:19,279 --> 00:09:25,839
a vcs but we encourage you to use one

00:09:23,600 --> 00:09:26,720
and so that version control system can

00:09:25,839 --> 00:09:29,360
help you with the

00:09:26,720 --> 00:09:30,800
change management in terms of knowing uh

00:09:29,360 --> 00:09:34,080
you know who changed what

00:09:30,800 --> 00:09:34,080
when etc

00:09:34,399 --> 00:09:37,839
like how many people in their commit

00:09:35,680 --> 00:09:41,680
messages write

00:09:37,839 --> 00:09:43,040
updated this change this from x to y

00:09:41,680 --> 00:09:44,880
right like we've all written commit

00:09:43,040 --> 00:09:47,760
messages like that

00:09:44,880 --> 00:09:48,240
yeah those commit messages are useless

00:09:47,760 --> 00:09:50,240
uh

00:09:48,240 --> 00:09:51,760
diff does a really good job of telling

00:09:50,240 --> 00:09:53,279
us what changed

00:09:51,760 --> 00:09:55,040
i'm just hoping people get from my talk

00:09:53,279 --> 00:09:58,000
to put why they change things

00:09:55,040 --> 00:09:58,640
or like what it accomplishes um i know

00:09:58,000 --> 00:10:01,839
i'm really

00:09:58,640 --> 00:10:01,839
bad about doing that so

00:10:02,399 --> 00:10:06,240
this idea of infrastructure is code and

00:10:05,600 --> 00:10:08,240
so

00:10:06,240 --> 00:10:10,079
after i started like by using puppet for

00:10:08,240 --> 00:10:13,839
a while uh

00:10:10,079 --> 00:10:14,640
what happened was anytime we ssh to a

00:10:13,839 --> 00:10:17,279
system

00:10:14,640 --> 00:10:18,959
it became indicative of a failure

00:10:17,279 --> 00:10:20,480
scenario

00:10:18,959 --> 00:10:23,360
and generally i couldn't ssh at that

00:10:20,480 --> 00:10:26,480
point i was doing like console access

00:10:23,360 --> 00:10:27,920
and so really the need for ssh i mean

00:10:26,480 --> 00:10:28,800
the protocol itself and everything is

00:10:27,920 --> 00:10:31,440
fine but how you

00:10:28,800 --> 00:10:32,320
administer systems you're not directly

00:10:31,440 --> 00:10:34,399
connecting

00:10:32,320 --> 00:10:35,839
one-to-one and if if you're already

00:10:34,399 --> 00:10:37,360
building systems in the cloud and

00:10:35,839 --> 00:10:39,680
thinking programmatically

00:10:37,360 --> 00:10:41,440
this idea of a single machine starts to

00:10:39,680 --> 00:10:44,560
become really antiquated

00:10:41,440 --> 00:10:45,519
uh or even knowing like what your

00:10:44,560 --> 00:10:48,800
machines are called

00:10:45,519 --> 00:10:49,760
starts to become antiquated

00:10:48,800 --> 00:10:51,839
a good thing of treating your

00:10:49,760 --> 00:10:53,760
infrastructure as code is you have

00:10:51,839 --> 00:10:54,480
revision history so there's no more

00:10:53,760 --> 00:10:56,880
asking

00:10:54,480 --> 00:10:57,680
hey who changed what when what's going

00:10:56,880 --> 00:11:00,160
on

00:10:57,680 --> 00:11:00,720
you can just look at the log if you want

00:11:00,160 --> 00:11:02,560
to know

00:11:00,720 --> 00:11:05,200
what's changing your infrastructure you

00:11:02,560 --> 00:11:07,519
can use those simple tools like diff

00:11:05,200 --> 00:11:09,200
to see what changed you can start to

00:11:07,519 --> 00:11:11,519
leverage things like continuous

00:11:09,200 --> 00:11:13,360
integration with jenkins to actually

00:11:11,519 --> 00:11:15,839
test your infrastructure

00:11:13,360 --> 00:11:16,720
so uh your like your changes are well

00:11:15,839 --> 00:11:19,920
tested

00:11:16,720 --> 00:11:23,440
and automated ahead of time

00:11:19,920 --> 00:11:25,440
so we're not up at 3am when we should be

00:11:23,440 --> 00:11:28,720
out

00:11:25,440 --> 00:11:31,279
cool puppet uh we have a big community

00:11:28,720 --> 00:11:31,920
ecosystem obviously uh i'm with the

00:11:31,279 --> 00:11:34,560
company

00:11:31,920 --> 00:11:35,519
behind it but it's very much a very open

00:11:34,560 --> 00:11:37,920
uh

00:11:35,519 --> 00:11:39,519
source like company i use the same tools

00:11:37,920 --> 00:11:42,079
that you would

00:11:39,519 --> 00:11:43,600
we have a ton of people on irc at any

00:11:42,079 --> 00:11:45,360
one point in time so that's a great

00:11:43,600 --> 00:11:47,279
place to go to get help

00:11:45,360 --> 00:11:49,839
there's also a mailing list with lots of

00:11:47,279 --> 00:11:49,839
folks on it

00:11:51,120 --> 00:11:57,680
puppets pervasive this is the obligatory

00:11:54,800 --> 00:11:59,279
sales slide i let them put in here which

00:11:57,680 --> 00:12:02,079
is another way of saying that

00:11:59,279 --> 00:12:05,040
you're not the beta user that was us

00:12:02,079 --> 00:12:08,560
back in 2007-2008

00:12:05,040 --> 00:12:08,560
lots of folks are using us now

00:12:08,800 --> 00:12:12,560
i just heard oh and i'm gonna slaughter

00:12:10,720 --> 00:12:15,760
the name that the uh

00:12:12,560 --> 00:12:18,240
uh the private space company in

00:12:15,760 --> 00:12:19,760
la that's putting the rockets up yeah

00:12:18,240 --> 00:12:23,680
yeah that they're using us

00:12:19,760 --> 00:12:24,959
which i thought was kind of fun um

00:12:23,680 --> 00:12:27,760
puppet enterprise

00:12:24,959 --> 00:12:28,639
so open source company we have an

00:12:27,760 --> 00:12:32,000
enterprise

00:12:28,639 --> 00:12:33,760
like product um you're basically like

00:12:32,000 --> 00:12:36,320
getting support and then we're building

00:12:33,760 --> 00:12:37,200
features on top of the open source that

00:12:36,320 --> 00:12:40,320
are

00:12:37,200 --> 00:12:41,920
enterprisey in nature so lots of ui

00:12:40,320 --> 00:12:44,959
stuff for clicking

00:12:41,920 --> 00:12:46,399
and reporting that kind of thing we are

00:12:44,959 --> 00:12:48,880
committed to keeping

00:12:46,399 --> 00:12:50,560
our core functionality open source and

00:12:48,880 --> 00:12:53,279
then building these

00:12:50,560 --> 00:12:54,880
sort of tools that use that uh making

00:12:53,279 --> 00:12:58,959
those

00:12:54,880 --> 00:13:02,079
enterprise and pay for um is the plan

00:12:58,959 --> 00:13:03,519
uh when you run the enterprise version

00:13:02,079 --> 00:13:05,040
and that promise isn't gonna be like a

00:13:03,519 --> 00:13:05,600
sales speech we're gonna move on past

00:13:05,040 --> 00:13:08,720
the slide

00:13:05,600 --> 00:13:11,519
is that uh we encapsulate our software

00:13:08,720 --> 00:13:13,519
so we we vendor our own versions of ruby

00:13:11,519 --> 00:13:15,760
apache openssl etc

00:13:13,519 --> 00:13:17,120
and that way our versions don't conflict

00:13:15,760 --> 00:13:21,360
with your versions

00:13:17,120 --> 00:13:22,480
um i've personally like run into those

00:13:21,360 --> 00:13:24,399
problems where

00:13:22,480 --> 00:13:26,480
i was managing a site that was running

00:13:24,399 --> 00:13:28,240
like mod pearl but then i was also using

00:13:26,480 --> 00:13:29,040
these pearl-based tools to manage the

00:13:28,240 --> 00:13:30,880
system

00:13:29,040 --> 00:13:32,959
and so the whole reason why we're there

00:13:30,880 --> 00:13:34,959
is the website but its version

00:13:32,959 --> 00:13:36,560
needed one that conflicted with my tools

00:13:34,959 --> 00:13:40,079
and that was a big headache

00:13:36,560 --> 00:13:40,079
so we get past that

00:13:40,399 --> 00:13:44,880
like dig into how puppet works and so

00:13:43,519 --> 00:13:48,880
puppet works first by

00:13:44,880 --> 00:13:49,600
defining what you want your systems to

00:13:48,880 --> 00:13:52,880
look like

00:13:49,600 --> 00:13:55,199
and we do that in our own dsl

00:13:52,880 --> 00:13:56,160
it's a puppet domain specific language

00:13:55,199 --> 00:13:58,800
that's really

00:13:56,160 --> 00:14:00,800
built and tailored to describing aspects

00:13:58,800 --> 00:14:03,279
of the system

00:14:00,800 --> 00:14:03,920
as opposed to just uh just a broad like

00:14:03,279 --> 00:14:07,120
language

00:14:03,920 --> 00:14:07,760
um you you can then take this code that

00:14:07,120 --> 00:14:11,040
you've written

00:14:07,760 --> 00:14:13,680
and simulate it against your nodes uh

00:14:11,040 --> 00:14:14,800
so that allows you to run basically in a

00:14:13,680 --> 00:14:16,160
no op mode

00:14:14,800 --> 00:14:18,480
so you could actually see what would

00:14:16,160 --> 00:14:21,760
happen this is

00:14:18,480 --> 00:14:23,120
this is great uh for you know before you

00:14:21,760 --> 00:14:24,480
do some maintenance event or want to

00:14:23,120 --> 00:14:26,480
make some change

00:14:24,480 --> 00:14:28,480
uh you've already tested it out you can

00:14:26,480 --> 00:14:31,920
see what's going on you can show that

00:14:28,480 --> 00:14:35,120
to folks this has really helped me out

00:14:31,920 --> 00:14:35,120
and not getting called in

00:14:35,519 --> 00:14:39,360
then you can run puppet in the regular

00:14:37,279 --> 00:14:40,480
enforcing mode and there it's going to

00:14:39,360 --> 00:14:42,639
take

00:14:40,480 --> 00:14:44,639
the code that you've written that says

00:14:42,639 --> 00:14:46,000
the machine should look like this

00:14:44,639 --> 00:14:48,480
and it's going to diff it against

00:14:46,000 --> 00:14:49,760
reality and make any changes as

00:14:48,480 --> 00:14:52,560
necessary

00:14:49,760 --> 00:14:54,240
and then anytime we make a change or we

00:14:52,560 --> 00:14:56,959
run in simulate mode

00:14:54,240 --> 00:14:59,839
reports get kicked off we'll dive more

00:14:56,959 --> 00:14:59,839
into each of these

00:15:08,000 --> 00:15:11,279
yep so you can either run it in just the

00:15:10,079 --> 00:15:14,880
regular mode

00:15:11,279 --> 00:15:18,560
so the question was uh

00:15:14,880 --> 00:15:18,560
can you enforce the simulation

00:15:18,800 --> 00:15:23,839
yes and so uh you can

00:15:21,839 --> 00:15:24,880
either run in like a no op mode which

00:15:23,839 --> 00:15:26,480
like simulates

00:15:24,880 --> 00:15:41,839
or you can just run in the normal mode

00:15:26,480 --> 00:15:41,839
which would make changes on the system

00:15:52,839 --> 00:15:55,839
um

00:15:58,560 --> 00:16:02,720
yeah yeah thank you so like the new york

00:16:01,759 --> 00:16:04,800
stock exchange

00:16:02,720 --> 00:16:06,000
uh they don't make any changes at all

00:16:04,800 --> 00:16:07,920
like while

00:16:06,000 --> 00:16:09,759
the trading floor is open like nobody's

00:16:07,920 --> 00:16:11,519
supposed to touch things

00:16:09,759 --> 00:16:12,959
but obviously you know things happen and

00:16:11,519 --> 00:16:16,320
some changes have to be made

00:16:12,959 --> 00:16:16,560
and so after the bell rings they run in

00:16:16,320 --> 00:16:19,279
no

00:16:16,560 --> 00:16:21,440
op mode and so that generates reports

00:16:19,279 --> 00:16:22,720
and they can see if anything did change

00:16:21,440 --> 00:16:24,399
and then they have a change approval

00:16:22,720 --> 00:16:25,440
board that you know figures out why

00:16:24,399 --> 00:16:27,519
those changes were made

00:16:25,440 --> 00:16:29,440
approves them or not and if so those

00:16:27,519 --> 00:16:30,800
changes get put into puppet

00:16:29,440 --> 00:16:32,959
and then they can run in the actual

00:16:30,800 --> 00:16:34,240
enforcing mode during a maintenance

00:16:32,959 --> 00:16:35,680
window

00:16:34,240 --> 00:16:37,360
in the evening and then be ready the

00:16:35,680 --> 00:16:39,600
next day

00:16:37,360 --> 00:16:39,600
um

00:16:41,040 --> 00:16:47,040
what's that yeah

00:16:45,680 --> 00:16:48,720
yeah we'll get there in just a minute

00:16:47,040 --> 00:16:53,120
and then we can go on

00:16:48,720 --> 00:16:54,959
so uh uh the code that you write is uh

00:16:53,120 --> 00:16:56,720
comprised of these different modules

00:16:54,959 --> 00:16:58,320
so you can write modules you can get

00:16:56,720 --> 00:17:01,839
modules from our forge

00:16:58,320 --> 00:17:04,079
uh forge.puppetlabs.com um

00:17:01,839 --> 00:17:05,120
and so you would write modules for like

00:17:04,079 --> 00:17:07,360
my sequel

00:17:05,120 --> 00:17:08,480
apache like java you know different

00:17:07,360 --> 00:17:10,000
security things

00:17:08,480 --> 00:17:11,760
you're probably gonna have tons of

00:17:10,000 --> 00:17:14,240
modules to manage different aspects of

00:17:11,760 --> 00:17:17,520
your system from sudo to ntp

00:17:14,240 --> 00:17:19,919
to your resolver etc and then you have

00:17:17,520 --> 00:17:21,600
to have this node decode relationship

00:17:19,919 --> 00:17:24,400
so i built all these small distinct

00:17:21,600 --> 00:17:26,880
modules and then i associate them with

00:17:24,400 --> 00:17:28,720
different types of systems

00:17:26,880 --> 00:17:31,280
and so in that way i'm really building

00:17:28,720 --> 00:17:33,600
out the role of the system

00:17:31,280 --> 00:17:35,440
so you know all systems might have you

00:17:33,600 --> 00:17:36,960
know these different security modules

00:17:35,440 --> 00:17:38,960
you know sort of base modules that are

00:17:36,960 --> 00:17:42,400
common to all of our systems like

00:17:38,960 --> 00:17:45,360
i need like monitoring kernel tuning ntp

00:17:42,400 --> 00:17:46,880
etc and then you start building up the

00:17:45,360 --> 00:17:48,480
app stack and so

00:17:46,880 --> 00:17:50,320
then for your web servers you start

00:17:48,480 --> 00:17:53,440
including your apache

00:17:50,320 --> 00:17:55,600
like module etc and build those up

00:17:53,440 --> 00:17:57,360
and now i have a role defined and i can

00:17:55,600 --> 00:17:59,440
just assign that role

00:17:57,360 --> 00:18:02,400
to a system and that system is going to

00:17:59,440 --> 00:18:02,400
take on that role

00:18:04,799 --> 00:18:09,760
so how we like do this

00:18:07,919 --> 00:18:11,600
i'll talk in terms of best practices

00:18:09,760 --> 00:18:14,160
with any config management

00:18:11,600 --> 00:18:15,520
is we have this blank hardware lack of a

00:18:14,160 --> 00:18:18,400
vm

00:18:15,520 --> 00:18:20,240
then this provisioning process that

00:18:18,400 --> 00:18:23,440
creates a base install

00:18:20,240 --> 00:18:24,160
that base install should be the smallest

00:18:23,440 --> 00:18:26,000
install

00:18:24,160 --> 00:18:27,520
of what it means to be a node on your

00:18:26,000 --> 00:18:28,880
network

00:18:27,520 --> 00:18:30,880
like how many folks are using something

00:18:28,880 --> 00:18:33,600
like kickstarter

00:18:30,880 --> 00:18:34,799
or like something now yeah and so you

00:18:33,600 --> 00:18:36,400
wouldn't want

00:18:34,799 --> 00:18:38,799
different kickstarts for like your

00:18:36,400 --> 00:18:39,600
database system versus your web system

00:18:38,799 --> 00:18:41,360
or something

00:18:39,600 --> 00:18:43,200
you want just one common small

00:18:41,360 --> 00:18:44,480
installation and then all the

00:18:43,200 --> 00:18:47,679
configuration

00:18:44,480 --> 00:18:47,679
to be done with puppet

00:18:48,320 --> 00:18:52,160
like how many folks now get their base

00:18:50,080 --> 00:18:55,520
installed and then they run

00:18:52,160 --> 00:18:58,880
you know like a series of scripts

00:18:55,520 --> 00:19:00,799
and then that turns it into a node or

00:18:58,880 --> 00:19:02,480
a lot of folks at that point like maybe

00:19:00,799 --> 00:19:04,000
uh the first thing you do you provision

00:19:02,480 --> 00:19:07,760
a box in ec2

00:19:04,000 --> 00:19:09,520
you pull down some tarball and you run

00:19:07,760 --> 00:19:12,640
some script against it and then a system

00:19:09,520 --> 00:19:15,440
happens that's pretty common

00:19:12,640 --> 00:19:17,440
what puppet is going to do is not as

00:19:15,440 --> 00:19:18,000
besides building it into the assigned

00:19:17,440 --> 00:19:20,160
role

00:19:18,000 --> 00:19:21,360
is it's going to maintain it and ensure

00:19:20,160 --> 00:19:24,480
that state

00:19:21,360 --> 00:19:24,960
and so most of the scripts that i've

00:19:24,480 --> 00:19:27,520
written

00:19:24,960 --> 00:19:29,200
uh to do this like sort of thing they

00:19:27,520 --> 00:19:30,720
just built out systems and if you ran

00:19:29,200 --> 00:19:32,000
them twice they probably broke the

00:19:30,720 --> 00:19:34,080
system

00:19:32,000 --> 00:19:35,200
and they surely didn't mean maintain it

00:19:34,080 --> 00:19:37,679
they just got it

00:19:35,200 --> 00:19:39,360
to that point whereas puppet's to keep

00:19:37,679 --> 00:19:42,000
like running and ensuring

00:19:39,360 --> 00:19:44,559
that system's the way it was like when

00:19:42,000 --> 00:19:44,559
it was built

00:19:44,640 --> 00:19:53,280
like any questions here okay

00:19:49,760 --> 00:19:54,960
so we talk about state a lot

00:19:53,280 --> 00:19:57,039
these are kind of academic looking

00:19:54,960 --> 00:20:00,160
slides but like desired state

00:19:57,039 --> 00:20:03,840
could be something as simple as i want

00:20:00,160 --> 00:20:04,480
etsy sudoers to be owner group mode root

00:20:03,840 --> 00:20:07,360
root o

00:20:04,480 --> 00:20:08,080
400 and i want it to have a specific

00:20:07,360 --> 00:20:09,679
content

00:20:08,080 --> 00:20:11,360
right of what i want in the pseudoers

00:20:09,679 --> 00:20:12,480
file uh

00:20:11,360 --> 00:20:14,559
you're obviously going to be managing

00:20:12,480 --> 00:20:17,360
more than just one file but that's just

00:20:14,559 --> 00:20:18,400
uh one thing so if any part of that

00:20:17,360 --> 00:20:21,280
drifts

00:20:18,400 --> 00:20:22,080
uh out when puppet runs it's going to

00:20:21,280 --> 00:20:25,120
converge

00:20:22,080 --> 00:20:27,360
just the part that changed so if just

00:20:25,120 --> 00:20:28,559
the contents of the file changed we're

00:20:27,360 --> 00:20:32,000
going to fix that

00:20:28,559 --> 00:20:34,159
if maybe just the mode somebody

00:20:32,000 --> 00:20:35,840
changed the mode on it it would just see

00:20:34,159 --> 00:20:37,840
that one piece

00:20:35,840 --> 00:20:39,120
and if the state was already where you

00:20:37,840 --> 00:20:41,520
wanted it

00:20:39,120 --> 00:20:43,360
then puppet wouldn't need to take any

00:20:41,520 --> 00:20:44,240
actions on the file resource because

00:20:43,360 --> 00:20:46,000
it'd already be

00:20:44,240 --> 00:20:48,000
where you want it to be and that way

00:20:46,000 --> 00:20:49,760
puppet's item potential

00:20:48,000 --> 00:20:51,440
so it means it's safe to run multiple

00:20:49,760 --> 00:20:53,760
times

00:20:51,440 --> 00:20:56,000
unlike most of the bash scripts that i

00:20:53,760 --> 00:20:56,000
wrote

00:20:56,960 --> 00:21:02,320
so talk a bit about data flow with

00:21:00,840 --> 00:21:05,360
puppet so

00:21:02,320 --> 00:21:08,400
we have a node uh that starts off and

00:21:05,360 --> 00:21:10,799
like generally puppets run in a

00:21:08,400 --> 00:21:12,960
pull based configuration and so by

00:21:10,799 --> 00:21:16,159
default your nodes will wake up

00:21:12,960 --> 00:21:17,760
every 30 minutes and check in with the

00:21:16,159 --> 00:21:20,559
master and see if there's anything

00:21:17,760 --> 00:21:22,400
new for it that's all configurable and

00:21:20,559 --> 00:21:24,799
you can even run in a centralized push

00:21:22,400 --> 00:21:25,840
like mechanism where you have the public

00:21:24,799 --> 00:21:27,360
master

00:21:25,840 --> 00:21:30,400
basically go out and kick all the nodes

00:21:27,360 --> 00:21:32,880
and say you know update right now

00:21:30,400 --> 00:21:34,480
so that functionality is there as well

00:21:32,880 --> 00:21:36,240
so the nodes start off

00:21:34,480 --> 00:21:37,679
and they send a bunch of information we

00:21:36,240 --> 00:21:40,880
call facts

00:21:37,679 --> 00:21:44,640
about themselves to the puppet master

00:21:40,880 --> 00:21:47,600
the puppet master then goes and

00:21:44,640 --> 00:21:49,440
sees oh well you're this node uh what

00:21:47,600 --> 00:21:50,640
code do i have associated like with you

00:21:49,440 --> 00:21:52,159
so what's your role

00:21:50,640 --> 00:21:54,159
were you the web server were you the

00:21:52,159 --> 00:21:56,400
database server etc

00:21:54,159 --> 00:21:57,360
and what it does is it compiles a

00:21:56,400 --> 00:21:59,039
catalog

00:21:57,360 --> 00:22:00,720
which we can think of of all the

00:21:59,039 --> 00:22:03,120
resources we care about

00:22:00,720 --> 00:22:04,480
to make that system so like we don't

00:22:03,120 --> 00:22:06,960
have to describe

00:22:04,480 --> 00:22:08,720
every aspect of the systems just the

00:22:06,960 --> 00:22:10,960
parts that we care about that we want to

00:22:08,720 --> 00:22:13,280
manage

00:22:10,960 --> 00:22:14,640
so that catalog is sent back to the node

00:22:13,280 --> 00:22:17,520
and then the node can

00:22:14,640 --> 00:22:19,440
interpret it uh and figure out what it

00:22:17,520 --> 00:22:22,480
wants to do what needs to change

00:22:19,440 --> 00:22:24,559
etc and again at any time there might be

00:22:22,480 --> 00:22:28,720
a change or a puppet run

00:22:24,559 --> 00:22:28,720
a report gets like kicked out

00:22:29,120 --> 00:22:35,760
cool so fax you provide

00:22:32,400 --> 00:22:38,400
asset inventory as well

00:22:35,760 --> 00:22:39,360
and they're just uh key value pairs and

00:22:38,400 --> 00:22:42,480
so

00:22:39,360 --> 00:22:45,840
this is the short list of facts uh

00:22:42,480 --> 00:22:48,799
and then we see we have the values so

00:22:45,840 --> 00:22:50,159
each of these are available uh within

00:22:48,799 --> 00:22:53,440
the puppet language as

00:22:50,159 --> 00:22:56,640
top scoped variables which lets us do

00:22:53,440 --> 00:22:58,880
two things uh uh templates

00:22:56,640 --> 00:23:00,159
so imagine you have a bunch of web

00:22:58,880 --> 00:23:00,880
servers and the only thing that's

00:23:00,159 --> 00:23:04,000
different

00:23:00,880 --> 00:23:07,039
is maybe your uh listen

00:23:04,000 --> 00:23:08,559
uh ip so like where it's like listening

00:23:07,039 --> 00:23:08,960
so you could have a file for each of

00:23:08,559 --> 00:23:10,640
your

00:23:08,960 --> 00:23:12,640
systems or you could just like

00:23:10,640 --> 00:23:13,120
templatize it and put in you know dollar

00:23:12,640 --> 00:23:15,520
sign

00:23:13,120 --> 00:23:17,360
ip address and it would listen on that

00:23:15,520 --> 00:23:19,600
right

00:23:17,360 --> 00:23:21,120
besides doing templates you can also do

00:23:19,600 --> 00:23:23,120
conditional logic

00:23:21,120 --> 00:23:24,559
and so i might have logic in my code

00:23:23,120 --> 00:23:27,919
that says you know

00:23:24,559 --> 00:23:28,480
if you're on a mac then do this sort of

00:23:27,919 --> 00:23:31,440
thing

00:23:28,480 --> 00:23:32,640
or if you're on centos versus ubuntu you

00:23:31,440 --> 00:23:34,799
know you need to do these sorts of

00:23:32,640 --> 00:23:38,400
things

00:23:34,799 --> 00:23:39,200
or i might look at uh total memory in

00:23:38,400 --> 00:23:41,279
the system

00:23:39,200 --> 00:23:43,440
and then based on that total memory i

00:23:41,279 --> 00:23:45,600
might use a template to

00:23:43,440 --> 00:23:46,640
see how much ram i need to give to like

00:23:45,600 --> 00:23:48,799
java for the

00:23:46,640 --> 00:23:50,320
heap size or something but now i can

00:23:48,799 --> 00:23:53,039
start doing all this

00:23:50,320 --> 00:23:53,440
uh within the code and i don't have to

00:23:53,039 --> 00:23:56,080
think

00:23:53,440 --> 00:23:57,760
oh well that class of systems we put

00:23:56,080 --> 00:24:00,159
that much ram in

00:23:57,760 --> 00:24:02,000
so i need to know that and think about

00:24:00,159 --> 00:24:03,600
it and

00:24:02,000 --> 00:24:05,440
sort of code these like one-offs for

00:24:03,600 --> 00:24:09,120
these different sets i can just start

00:24:05,440 --> 00:24:09,120
accessing things programmatically

00:24:10,720 --> 00:24:14,960
like how many folks in here code and

00:24:12,799 --> 00:24:19,120
ruby

00:24:14,960 --> 00:24:22,240
so i got a few a few hands

00:24:19,120 --> 00:24:24,000
even if you don't uh puppets not

00:24:22,240 --> 00:24:27,279
while puppets written in ruby you don't

00:24:24,000 --> 00:24:28,960
need to know ruby to use it

00:24:27,279 --> 00:24:31,679
just like you don't need to know c to

00:24:28,960 --> 00:24:34,240
use a linux box

00:24:31,679 --> 00:24:34,960
so we do have custom facts and if you

00:24:34,240 --> 00:24:37,200
know ruby

00:24:34,960 --> 00:24:38,559
then this looks probably like pretty

00:24:37,200 --> 00:24:40,240
easy for

00:24:38,559 --> 00:24:42,559
everyone else the part that matters is

00:24:40,240 --> 00:24:45,520
we have some fact called roll

00:24:42,559 --> 00:24:46,240
and it's going to exact whatever's in

00:24:45,520 --> 00:24:49,120
there

00:24:46,240 --> 00:24:51,279
and so it makes it really easy to write

00:24:49,120 --> 00:24:52,480
custom facts if you can write a shell

00:24:51,279 --> 00:24:54,880
script

00:24:52,480 --> 00:24:56,640
you can have a custom fact or you could

00:24:54,880 --> 00:24:57,919
write it in a language that you know

00:24:56,640 --> 00:25:00,720
like better and you could have it

00:24:57,919 --> 00:25:02,320
trigger that as well

00:25:00,720 --> 00:25:04,240
i think the first custom fact that i

00:25:02,320 --> 00:25:06,880
wrote was uh

00:25:04,240 --> 00:25:08,080
i had some vendor supplied binary for my

00:25:06,880 --> 00:25:09,919
raid arrays

00:25:08,080 --> 00:25:12,080
and it gave me this huge multi-line

00:25:09,919 --> 00:25:13,760
output and the only part i cared about

00:25:12,080 --> 00:25:16,320
was you know is my array

00:25:13,760 --> 00:25:18,240
okay or failed or degraded and i could

00:25:16,320 --> 00:25:20,799
just do some quick uh

00:25:18,240 --> 00:25:21,600
grep awk like magic and get out that one

00:25:20,799 --> 00:25:24,159
field

00:25:21,600 --> 00:25:25,520
now i have a custom fact and i can query

00:25:24,159 --> 00:25:29,840
all my systems

00:25:25,520 --> 00:25:29,840
and get that information

00:25:30,320 --> 00:25:38,080
where where folks might use custom facts

00:25:34,080 --> 00:25:41,200
on things like ec2 etc is to read

00:25:38,080 --> 00:25:42,960
metadata about that system and then you

00:25:41,200 --> 00:25:46,720
might even inject that

00:25:42,960 --> 00:25:49,679
at boot time so when you create uh

00:25:46,720 --> 00:25:52,480
a new node you might inject different

00:25:49,679 --> 00:25:54,880
bits of information like roll etc

00:25:52,480 --> 00:25:56,000
we know what the box is does and then we

00:25:54,880 --> 00:25:58,720
could query those through

00:25:56,000 --> 00:25:58,720
custom facts

00:26:00,080 --> 00:26:03,520
so the catalog it's a comprehensive

00:26:02,960 --> 00:26:06,000
resource

00:26:03,520 --> 00:26:07,360
list of all the bits that we care about

00:26:06,000 --> 00:26:10,000
on the system

00:26:07,360 --> 00:26:11,039
right so there's lots of things on your

00:26:10,000 --> 00:26:12,720
boxes

00:26:11,039 --> 00:26:14,559
you just kind of expect to work and you

00:26:12,720 --> 00:26:16,640
don't mess with

00:26:14,559 --> 00:26:18,080
this is not a comprehensive list where

00:26:16,640 --> 00:26:20,559
we expect you're going to describe

00:26:18,080 --> 00:26:21,760
every single file in dev and every

00:26:20,559 --> 00:26:25,840
service and process

00:26:21,760 --> 00:26:25,840
this is just the things you care about

00:26:26,799 --> 00:26:30,559
reporting we have different report

00:26:29,840 --> 00:26:33,600
handlers

00:26:30,559 --> 00:26:36,400
so http https

00:26:33,600 --> 00:26:37,440
for sending reports off via the that way

00:26:36,400 --> 00:26:39,760
mechanism

00:26:37,440 --> 00:26:40,480
log is just like syslog so it makes it

00:26:39,760 --> 00:26:42,400
easy to

00:26:40,480 --> 00:26:44,720
set up log you could set setups like

00:26:42,400 --> 00:26:47,039
centralized syslog and use a tool like

00:26:44,720 --> 00:26:48,400
log stash or splunk to look through

00:26:47,039 --> 00:26:51,760
things

00:26:48,400 --> 00:26:54,400
store lets you store the report data

00:26:51,760 --> 00:26:56,320
as a yaml file that way you can write

00:26:54,400 --> 00:26:58,559
your own report processor

00:26:56,320 --> 00:26:59,760
and use that data as opposed to trying

00:26:58,559 --> 00:27:02,799
to

00:26:59,760 --> 00:27:03,120
you know use like syslog and trying to

00:27:02,799 --> 00:27:05,360
get

00:27:03,120 --> 00:27:06,640
unstructured data and do doing something

00:27:05,360 --> 00:27:09,760
with it you could actually just get

00:27:06,640 --> 00:27:09,760
structured like data

00:27:10,080 --> 00:27:14,480
like tag mail is something cool that you

00:27:12,960 --> 00:27:16,880
can tag

00:27:14,480 --> 00:27:18,640
different bits of the code and whenever

00:27:16,880 --> 00:27:22,559
something would change on a system

00:27:18,640 --> 00:27:23,840
an email would go out so maybe your dbas

00:27:22,559 --> 00:27:25,679
you know that they don't care about

00:27:23,840 --> 00:27:26,960
anything else except you know what's

00:27:25,679 --> 00:27:28,080
going on with mysql

00:27:26,960 --> 00:27:30,559
so you could say well if anything

00:27:28,080 --> 00:27:32,240
related to my sql changes on a system

00:27:30,559 --> 00:27:34,080
let's email the dba so they know

00:27:32,240 --> 00:27:37,360
something happened

00:27:34,080 --> 00:27:39,679
you could also use this to fire off a

00:27:37,360 --> 00:27:40,960
email that would be the input for a

00:27:39,679 --> 00:27:42,080
ticketing system

00:27:40,960 --> 00:27:44,720
and so you could use this to

00:27:42,080 --> 00:27:49,600
automatically create tickets for you

00:27:44,720 --> 00:27:51,919
maybe your security team um

00:27:49,600 --> 00:27:53,360
has different uh like policies in place

00:27:51,919 --> 00:27:55,760
and so they want to know

00:27:53,360 --> 00:27:57,840
if some if like suitors has changed or

00:27:55,760 --> 00:27:59,440
pam or sshd or something

00:27:57,840 --> 00:28:03,200
so that could create an incident in

00:27:59,440 --> 00:28:05,520
their like ticketing system

00:28:03,200 --> 00:28:07,520
besides these report handlers there's

00:28:05,520 --> 00:28:10,480
other report handlers on our website

00:28:07,520 --> 00:28:12,960
you could download and install i've seen

00:28:10,480 --> 00:28:16,720
them for irc

00:28:12,960 --> 00:28:19,440
jabber twitter all sorts of things

00:28:16,720 --> 00:28:20,159
and so you can get this reporting data

00:28:19,440 --> 00:28:23,840
to

00:28:20,159 --> 00:28:26,240
wherever you want it um

00:28:23,840 --> 00:28:27,120
here's a graphic of our our enterprise

00:28:26,240 --> 00:28:30,399
console

00:28:27,120 --> 00:28:32,000
and so it just shows uh the different

00:28:30,399 --> 00:28:33,360
systems there and then you could like

00:28:32,000 --> 00:28:36,720
drill down and

00:28:33,360 --> 00:28:38,960
grab reports from a web interface as

00:28:36,720 --> 00:28:38,960
well

00:28:40,159 --> 00:28:46,080
just goes into uh the actual flow

00:28:43,760 --> 00:28:47,760
folks that are curious about that and so

00:28:46,080 --> 00:28:51,039
i'll just run through this quickly of

00:28:47,760 --> 00:28:54,240
what's actually going on between

00:28:51,039 --> 00:28:57,200
the agent and a master and so

00:28:54,240 --> 00:28:58,559
the node makes initial contact with the

00:28:57,200 --> 00:29:00,880
master

00:28:58,559 --> 00:29:02,320
it checks in again all of the

00:29:00,880 --> 00:29:05,679
communication is done over

00:29:02,320 --> 00:29:07,360
ssl so we use that for

00:29:05,679 --> 00:29:09,679
transport as well as the search for

00:29:07,360 --> 00:29:11,600
authentication

00:29:09,679 --> 00:29:13,279
the master is going to sync any custom

00:29:11,600 --> 00:29:17,279
facts and plugins

00:29:13,279 --> 00:29:20,159
to the node which is then going to

00:29:17,279 --> 00:29:22,000
send its fax back to the master and then

00:29:20,159 --> 00:29:25,520
ask for a catalog so that

00:29:22,000 --> 00:29:26,399
that resource list it's going to send

00:29:25,520 --> 00:29:29,279
that catalog

00:29:26,399 --> 00:29:30,720
back to the agent which then is going to

00:29:29,279 --> 00:29:32,640
apply the catalog

00:29:30,720 --> 00:29:34,799
the master at this point also acts as a

00:29:32,640 --> 00:29:37,760
file server so we can request

00:29:34,799 --> 00:29:38,720
files and receive those and then when

00:29:37,760 --> 00:29:39,919
it's done

00:29:38,720 --> 00:29:41,760
the agent agent's going to kick that

00:29:39,919 --> 00:29:44,000
report off to the master

00:29:41,760 --> 00:29:45,200
who then has the different report

00:29:44,000 --> 00:29:47,679
handlers

00:29:45,200 --> 00:29:48,320
enabled so it's then going to put it on

00:29:47,679 --> 00:29:52,000
you know

00:29:48,320 --> 00:29:52,000
syslog irc etc

00:29:52,480 --> 00:29:56,240
from looking at this you can see like

00:29:54,320 --> 00:29:57,279
there's not a whole lot going on on the

00:29:56,240 --> 00:29:59,520
node

00:29:57,279 --> 00:30:00,720
itself and the master is really just

00:29:59,520 --> 00:30:03,120
doing compilation

00:30:00,720 --> 00:30:05,039
and so uh the puppet master is very much

00:30:03,120 --> 00:30:09,840
a cpu-bound

00:30:05,039 --> 00:30:09,840
uh type type workload

00:30:11,360 --> 00:30:15,200
this is uh what what really got me

00:30:13,520 --> 00:30:17,679
interested in

00:30:15,200 --> 00:30:20,159
puppet is that we get to talk about the

00:30:17,679 --> 00:30:23,200
what and not the how

00:30:20,159 --> 00:30:25,200
so notice here i'm saying package ntp

00:30:23,200 --> 00:30:28,000
and sure installed so i've got a

00:30:25,200 --> 00:30:30,960
resource which is some abstraction

00:30:28,000 --> 00:30:31,679
notice i'm not saying use apt or yum or

00:30:30,960 --> 00:30:33,200
package ad

00:30:31,679 --> 00:30:34,960
or something i'm just saying there's

00:30:33,200 --> 00:30:36,399
some abstraction called a package like

00:30:34,960 --> 00:30:38,399
we all know what that is

00:30:36,399 --> 00:30:40,080
it's got a name and i want to ensure

00:30:38,399 --> 00:30:42,640
that it's there

00:30:40,080 --> 00:30:44,159
i really like this approach especially

00:30:42,640 --> 00:30:46,320
from

00:30:44,159 --> 00:30:47,760
administering different types of linux

00:30:46,320 --> 00:30:49,840
and unix systems

00:30:47,760 --> 00:30:51,440
i guess we even have windows support now

00:30:49,840 --> 00:30:53,600
uh

00:30:51,440 --> 00:30:55,679
is that i i i don't have to remember you

00:30:53,600 --> 00:30:58,559
know is it app or yum or

00:30:55,679 --> 00:30:59,360
is it ad user or user ad and what are

00:30:58,559 --> 00:31:01,679
the different

00:30:59,360 --> 00:31:03,360
arguments and flags like that's not

00:31:01,679 --> 00:31:05,360
really the interesting part of building

00:31:03,360 --> 00:31:08,880
systems

00:31:05,360 --> 00:31:10,240
so i can use these abstractions

00:31:08,880 --> 00:31:11,919
so this is what you would this is the

00:31:10,240 --> 00:31:12,960
code you would write this would be on

00:31:11,919 --> 00:31:15,360
the master

00:31:12,960 --> 00:31:17,360
it would turn this into a catalog so

00:31:15,360 --> 00:31:18,960
basically put this in like yaml format

00:31:17,360 --> 00:31:21,200
and send it off

00:31:18,960 --> 00:31:22,880
and then the agent itself has these

00:31:21,200 --> 00:31:25,760
different providers and so

00:31:22,880 --> 00:31:26,960
the agent just gets a copy of this and

00:31:25,760 --> 00:31:29,679
then it says oh

00:31:26,960 --> 00:31:30,720
i'm i'm a centos box so i'm going to use

00:31:29,679 --> 00:31:35,120
yup

00:31:30,720 --> 00:31:35,120
or i'm a uh uh

00:31:37,760 --> 00:31:41,039
os x box i'm gonna use darwin port or

00:31:40,480 --> 00:31:43,200
something

00:31:41,039 --> 00:31:46,480
right and so it decides how it's gonna

00:31:43,200 --> 00:31:48,399
interpret those

00:31:46,480 --> 00:31:50,159
and that way the the master doesn't

00:31:48,399 --> 00:31:53,200
really need to know

00:31:50,159 --> 00:31:55,039
what type of system it is etc

00:31:53,200 --> 00:31:56,880
um so we have a ton of different

00:31:55,039 --> 00:31:58,720
resource types and this is just a

00:31:56,880 --> 00:32:01,120
short list so we have things on here

00:31:58,720 --> 00:32:04,559
besides package like files

00:32:01,120 --> 00:32:08,080
services mounts cron

00:32:04,559 --> 00:32:11,600
exec to run commands zfs

00:32:08,080 --> 00:32:12,799
ssh key etc so different aspects of your

00:32:11,600 --> 00:32:16,559
system

00:32:12,799 --> 00:32:16,559
we can we can abstract out

00:32:17,600 --> 00:32:24,720
host entries user entries etc

00:32:21,519 --> 00:32:26,000
here's some uh actual code and so this

00:32:24,720 --> 00:32:28,559
is our

00:32:26,000 --> 00:32:30,320
very common design pattern called

00:32:28,559 --> 00:32:32,720
package file service

00:32:30,320 --> 00:32:33,360
and so uh like generally like when

00:32:32,720 --> 00:32:35,919
you're

00:32:33,360 --> 00:32:37,840
setting up services you install a

00:32:35,919 --> 00:32:40,399
package or a list of packages

00:32:37,840 --> 00:32:42,240
right and then you go and you modify a

00:32:40,399 --> 00:32:45,200
few config files

00:32:42,240 --> 00:32:46,880
and provided you did that correctly a

00:32:45,200 --> 00:32:49,600
service starts at the end right

00:32:46,880 --> 00:32:51,519
whether it's apache mysql ntp it all

00:32:49,600 --> 00:32:52,880
sort of works like this

00:32:51,519 --> 00:32:55,440
and so i'll go through what this looks

00:32:52,880 --> 00:32:56,640
like so we have our package file and our

00:32:55,440 --> 00:32:59,600
service

00:32:56,640 --> 00:33:00,960
we have the file has a source and so

00:32:59,600 --> 00:33:02,640
it's actually just

00:33:00,960 --> 00:33:05,120
the agents would just pull that file

00:33:02,640 --> 00:33:08,960
over the network

00:33:05,120 --> 00:33:10,799
and the file requires the package

00:33:08,960 --> 00:33:12,399
and here we have the service we want to

00:33:10,799 --> 00:33:14,720
ensure that it's running

00:33:12,399 --> 00:33:16,960
and that enable is true which says it

00:33:14,720 --> 00:33:18,320
says start at boot time

00:33:16,960 --> 00:33:20,240
and then we see the service is

00:33:18,320 --> 00:33:23,120
subscribed to the file

00:33:20,240 --> 00:33:24,880
and so puppet's a declarative language

00:33:23,120 --> 00:33:28,159
we're not really top down

00:33:24,880 --> 00:33:28,799
in the ordering and so we have to

00:33:28,159 --> 00:33:31,519
connect

00:33:28,799 --> 00:33:33,120
these different resources together so

00:33:31,519 --> 00:33:34,799
obviously in this scenario it needs to

00:33:33,120 --> 00:33:36,880
be in the order of package

00:33:34,799 --> 00:33:38,480
then file and service right we can't

00:33:36,880 --> 00:33:40,399
start the service we haven't installed

00:33:38,480 --> 00:33:42,799
the package

00:33:40,399 --> 00:33:43,519
so to track those relationships we use a

00:33:42,799 --> 00:33:46,480
graph

00:33:43,519 --> 00:33:47,039
and so we use a directed acyclical graph

00:33:46,480 --> 00:33:51,200
to map

00:33:47,039 --> 00:33:51,200
out all these entries

00:33:51,679 --> 00:33:57,840
so what this would do is ensure order

00:33:55,039 --> 00:33:58,240
between the three and the subscribe line

00:33:57,840 --> 00:34:01,679
which

00:33:58,240 --> 00:34:04,880
would uh like tell us if the file

00:34:01,679 --> 00:34:08,159
ever changed that we need to restart the

00:34:04,880 --> 00:34:10,480
service so that way you could

00:34:08,159 --> 00:34:12,480
you know update your ntp conf and your

00:34:10,480 --> 00:34:14,480
version control

00:34:12,480 --> 00:34:16,399
a new one gets pushed out and then it

00:34:14,480 --> 00:34:20,159
knows hey i gotta restart the service to

00:34:16,399 --> 00:34:22,480
take control of that

00:34:20,159 --> 00:34:24,720
any questions on package file service

00:34:22,480 --> 00:34:24,720
yep

00:34:28,800 --> 00:34:33,440
yeah so you could you could specify

00:34:30,560 --> 00:34:35,679
those uh so the question was uh

00:34:33,440 --> 00:34:37,280
so some demons don't want to be

00:34:35,679 --> 00:34:38,159
restarted they want to accept like

00:34:37,280 --> 00:34:42,960
signals

00:34:38,159 --> 00:34:42,960
and we can specify those um cool

00:34:43,280 --> 00:34:48,079
we also support file serving and so

00:34:46,560 --> 00:34:50,240
uh here's what that would look like you

00:34:48,079 --> 00:34:52,399
have a puppet uri

00:34:50,240 --> 00:34:53,520
the name of the module and then the file

00:34:52,399 --> 00:34:56,480
you want to serve up

00:34:53,520 --> 00:34:58,240
so we can serve things that way we can

00:34:56,480 --> 00:35:02,160
also do templates

00:34:58,240 --> 00:35:03,119
and so uh again here was here's just a

00:35:02,160 --> 00:35:04,880
message of the day

00:35:03,119 --> 00:35:07,599
file so you log in and you would see

00:35:04,880 --> 00:35:10,480
this and so it's going to

00:35:07,599 --> 00:35:13,280
uh change these and put in these facts

00:35:10,480 --> 00:35:16,079
from factor

00:35:13,280 --> 00:35:16,480
so you could imagine using uh templates

00:35:16,079 --> 00:35:18,720
you know

00:35:16,480 --> 00:35:20,400
and your different config files like

00:35:18,720 --> 00:35:23,200
wherever you have like data

00:35:20,400 --> 00:35:23,760
you know uh like another example might

00:35:23,200 --> 00:35:26,640
be

00:35:23,760 --> 00:35:27,599
your resolve conf your resolve conf is

00:35:26,640 --> 00:35:29,920
just a bunch of data

00:35:27,599 --> 00:35:30,800
like what name servers do you connect to

00:35:29,920 --> 00:35:34,480
things like that

00:35:30,800 --> 00:35:38,000
and so i could specify those as an array

00:35:34,480 --> 00:35:39,760
and then have the system create my name

00:35:38,000 --> 00:35:42,839
servers appropriately because maybe i

00:35:39,760 --> 00:35:45,359
use different ones different locations

00:35:42,839 --> 00:35:46,560
etc uh this is just a bit more advanced

00:35:45,359 --> 00:35:49,599
than that here

00:35:46,560 --> 00:35:52,480
we're doing a for loop basically

00:35:49,599 --> 00:35:53,280
and so here we have a name servers as an

00:35:52,480 --> 00:35:56,320
array

00:35:53,280 --> 00:35:57,839
and for every element in the array it's

00:35:56,320 --> 00:35:59,520
going to print a line that's named

00:35:57,839 --> 00:36:01,599
server and then

00:35:59,520 --> 00:36:03,040
the element of the array so this is so

00:36:01,599 --> 00:36:03,839
that you can do a bit more advanced

00:36:03,040 --> 00:36:07,760
things

00:36:03,839 --> 00:36:07,760
in the templates that's your question

00:36:08,640 --> 00:36:13,839
let's say you wanted to push out

00:36:10,880 --> 00:36:13,839
thousands

00:36:28,240 --> 00:36:32,480
yeah so the question is uh what if your

00:36:31,760 --> 00:36:34,160
files are

00:36:32,480 --> 00:36:35,599
different enough that the template

00:36:34,160 --> 00:36:37,920
doesn't quite make sense

00:36:35,599 --> 00:36:39,440
i'd say that you probably could template

00:36:37,920 --> 00:36:41,359
it with some conditionals

00:36:39,440 --> 00:36:42,880
based inside of the template that might

00:36:41,359 --> 00:36:44,480
help for that

00:36:42,880 --> 00:36:47,200
another thing to do might be maybe you

00:36:44,480 --> 00:36:49,520
just have a few classes of config files

00:36:47,200 --> 00:36:50,560
and so maybe you just choose the right

00:36:49,520 --> 00:36:52,000
template file

00:36:50,560 --> 00:36:54,400
and then you've at least gone from

00:36:52,000 --> 00:36:55,680
thousands to you know a handful

00:36:54,400 --> 00:36:57,680
and then maybe you could use

00:36:55,680 --> 00:36:59,119
conditionals to get it down to one

00:36:57,680 --> 00:37:01,839
depending on how much time you need to

00:36:59,119 --> 00:37:01,839
invest in that

00:37:03,200 --> 00:37:06,560
well it's just uh it's it's not beyond

00:37:05,359 --> 00:37:08,960
capabilities

00:37:06,560 --> 00:37:09,599
or or anything like that it's just bad

00:37:08,960 --> 00:37:12,320
in terms

00:37:09,599 --> 00:37:13,359
of your time and so if you can

00:37:12,320 --> 00:37:15,200
templatize it

00:37:13,359 --> 00:37:16,480
then you don't have to remember to

00:37:15,200 --> 00:37:18,240
update all these files

00:37:16,480 --> 00:37:20,160
and it's going to give you better

00:37:18,240 --> 00:37:24,320
consistency to your

00:37:20,160 --> 00:37:24,320
like to your systems and save you time

00:37:25,040 --> 00:37:29,920
puppet you can do syntax by checking so

00:37:27,920 --> 00:37:32,960
you can use puppet parser validate

00:37:29,920 --> 00:37:34,800
and validate the syntax

00:37:32,960 --> 00:37:36,960
i recommend putting this in a pre-commit

00:37:34,800 --> 00:37:40,160
hook it's really easy to write

00:37:36,960 --> 00:37:41,440
bad code but let's not even accept it

00:37:40,160 --> 00:37:43,599
into version control

00:37:41,440 --> 00:37:45,200
if it's not going to parse and so you

00:37:43,599 --> 00:37:48,320
can set up a pre-commit hook

00:37:45,200 --> 00:37:50,880
and do this there's also a

00:37:48,320 --> 00:37:52,160
puppet and so i would check that out

00:37:50,880 --> 00:37:54,560
puppet lint

00:37:52,160 --> 00:37:57,359
ensures that the code complies with our

00:37:54,560 --> 00:37:57,359
style guide

00:37:58,720 --> 00:38:02,240
plug the style guide here so the style

00:38:00,400 --> 00:38:05,839
guide is more than just

00:38:02,240 --> 00:38:07,200
use two space tabs and no literal tabs

00:38:05,839 --> 00:38:09,200
and that sort of thing

00:38:07,200 --> 00:38:10,720
which is important especially when

00:38:09,200 --> 00:38:11,760
you're coding with a team that

00:38:10,720 --> 00:38:14,079
everybody's

00:38:11,760 --> 00:38:16,480
using that same layout but the style

00:38:14,079 --> 00:38:19,520
guide goes more and it talks a lot about

00:38:16,480 --> 00:38:20,480
best practices and how to do things in

00:38:19,520 --> 00:38:23,760
your code

00:38:20,480 --> 00:38:25,119
and so i recommend folks check that out

00:38:23,760 --> 00:38:27,839
worked hard on the started guide to get

00:38:25,119 --> 00:38:31,440
it versioned and so that way

00:38:27,839 --> 00:38:34,320
you could say you know we conform to

00:38:31,440 --> 00:38:35,680
version 1.2 of the puppet style guide

00:38:34,320 --> 00:38:36,800
and then each of the sections are

00:38:35,680 --> 00:38:38,560
versioned as well

00:38:36,800 --> 00:38:40,160
so you could say we can conform to

00:38:38,560 --> 00:38:43,280
version 1.2

00:38:40,160 --> 00:38:44,240
except for section 4.3.2 because we

00:38:43,280 --> 00:38:46,320
think they're crazy

00:38:44,240 --> 00:38:47,599
and we do it this way right but then at

00:38:46,320 --> 00:38:50,240
least the people on your team

00:38:47,599 --> 00:38:51,760
all know sort of what's expected what

00:38:50,240 --> 00:38:54,800
the code should look like

00:38:51,760 --> 00:38:58,839
what practices you're following

00:38:54,800 --> 00:39:00,720
um getting toward the end here uh store

00:38:58,839 --> 00:39:02,960
configs is

00:39:00,720 --> 00:39:04,079
a functionality that we have that allows

00:39:02,960 --> 00:39:06,960
you to pass

00:39:04,079 --> 00:39:08,320
data between nodes without the nodes

00:39:06,960 --> 00:39:10,720
knowing about each other

00:39:08,320 --> 00:39:11,839
and so to do that it uses a database as

00:39:10,720 --> 00:39:15,839
a proxy

00:39:11,839 --> 00:39:15,839
to store that information

00:39:16,800 --> 00:39:22,079
no just any agents the question was just

00:39:19,760 --> 00:39:25,200
public masters and

00:39:22,079 --> 00:39:26,400
and so how this might look is every node

00:39:25,200 --> 00:39:29,599
could export

00:39:26,400 --> 00:39:32,320
say its own ssh key

00:39:29,599 --> 00:39:33,359
and so we're all exporting our own and

00:39:32,320 --> 00:39:35,680
then

00:39:33,359 --> 00:39:38,480
all the nodes can be importing all of

00:39:35,680 --> 00:39:40,320
the ssh keys that have been exported

00:39:38,480 --> 00:39:42,800
so if you did that on each of your

00:39:40,320 --> 00:39:43,920
systems they would each send theirs out

00:39:42,800 --> 00:39:45,839
and then they would each pull

00:39:43,920 --> 00:39:47,280
all of them in and so you'd have an

00:39:45,839 --> 00:39:49,119
up-to-date uh

00:39:47,280 --> 00:39:51,359
list of like host keys for all your

00:39:49,119 --> 00:39:52,720
systems so now when you ssh you don't

00:39:51,359 --> 00:39:54,320
have to type yes a bunch when you

00:39:52,720 --> 00:39:55,839
like go to the new server right like

00:39:54,320 --> 00:39:59,119
they're already there

00:39:55,839 --> 00:40:01,280
you could also use this um

00:39:59,119 --> 00:40:03,040
let's say with uh you're running like ha

00:40:01,280 --> 00:40:04,480
proxy or something and so you you want

00:40:03,040 --> 00:40:07,520
to list out nodes

00:40:04,480 --> 00:40:08,640
that you should be proxying to so just

00:40:07,520 --> 00:40:11,760
systems that should be

00:40:08,640 --> 00:40:12,640
in that in that load balancer group you

00:40:11,760 --> 00:40:15,440
could export

00:40:12,640 --> 00:40:17,680
hey i should be there and then the the

00:40:15,440 --> 00:40:19,920
system that's acting as the

00:40:17,680 --> 00:40:21,760
the proxy service could just collect

00:40:19,920 --> 00:40:23,920
that list of nodes

00:40:21,760 --> 00:40:25,359
uh another use for this might be with

00:40:23,920 --> 00:40:29,200
like uh bakula

00:40:25,359 --> 00:40:32,240
or some other backup uh like system

00:40:29,200 --> 00:40:33,760
um as so you know the backup server

00:40:32,240 --> 00:40:35,280
knows the systems that are supposed to

00:40:33,760 --> 00:40:36,880
connect to it and you don't have to hard

00:40:35,280 --> 00:40:39,839
code those it just collects them from

00:40:36,880 --> 00:40:39,839
the network

00:40:41,680 --> 00:40:46,079
one last thing is a external node

00:40:43,440 --> 00:40:49,440
classifier so puppet uses

00:40:46,079 --> 00:40:50,720
our dashboard as an enc or external node

00:40:49,440 --> 00:40:53,680
classifier

00:40:50,720 --> 00:40:54,640
node classification is just uh another

00:40:53,680 --> 00:40:57,440
way of saying

00:40:54,640 --> 00:40:59,599
uh what role do my systems have are

00:40:57,440 --> 00:41:01,599
there web servers or the databases etc

00:40:59,599 --> 00:41:03,040
and so it's a way to make that mapping

00:41:01,599 --> 00:41:05,040
so you could use

00:41:03,040 --> 00:41:06,240
our text files you could use our

00:41:05,040 --> 00:41:09,119
dashboard

00:41:06,240 --> 00:41:10,720
or you could write your own uh it's

00:41:09,119 --> 00:41:11,359
wherever you want that source of truth

00:41:10,720 --> 00:41:13,440
to be

00:41:11,359 --> 00:41:15,040
of what your systems are like does

00:41:13,440 --> 00:41:16,640
anyone already have like a source of

00:41:15,040 --> 00:41:17,359
truth of you know what systems are on

00:41:16,640 --> 00:41:20,560
their network

00:41:17,359 --> 00:41:23,200
and what they're supposed to do yeah

00:41:20,560 --> 00:41:24,000
and so instead of uh trying to duplicate

00:41:23,200 --> 00:41:27,599
that data

00:41:24,000 --> 00:41:27,599
we could just query it directly

00:41:28,000 --> 00:41:34,720
yeah so on that note

00:41:31,680 --> 00:41:37,119
uh we'll open it up for q

00:41:34,720 --> 00:41:38,880
a and i think some uh t-shirts just

00:41:37,119 --> 00:41:40,800
showed up

00:41:38,880 --> 00:41:42,560
is what i'm hearing back there so maybe

00:41:40,800 --> 00:41:46,839
we'll bring those up

00:41:42,560 --> 00:41:49,839
yeah right on so uh sort some questions

00:41:46,839 --> 00:41:49,839
yeah

00:41:50,400 --> 00:41:54,000
so the question is how many hosts can

00:41:51,839 --> 00:41:57,040
you manage with a single puppet master

00:41:54,000 --> 00:42:00,400
and that is totally dependent on

00:41:57,040 --> 00:42:01,040
the hardware that you have so do you

00:42:00,400 --> 00:42:04,640
have

00:42:01,040 --> 00:42:06,319
a micro instance of ec2 or do you have

00:42:04,640 --> 00:42:09,839
like a 96 core

00:42:06,319 --> 00:42:13,359
system i don't know so like generally we

00:42:09,839 --> 00:42:16,560
see that like eight core systems

00:42:13,359 --> 00:42:20,240
16 gigs of ram the system like that

00:42:16,560 --> 00:42:23,920
would probably do like 2 500 nodes

00:42:20,240 --> 00:42:26,240
it just depends a lot on how big your

00:42:23,920 --> 00:42:26,960
catalog is how many resources you're

00:42:26,240 --> 00:42:29,119
doing

00:42:26,960 --> 00:42:30,800
are you managing things recursively

00:42:29,119 --> 00:42:31,440
there's like a lot that goes into how

00:42:30,800 --> 00:42:35,599
that works

00:42:31,440 --> 00:42:35,599
how often your systems check in et

00:42:42,839 --> 00:42:45,839
cetera

00:42:49,839 --> 00:42:54,560
uh i'm not quite aware of that but i

00:42:52,800 --> 00:42:55,040
know we have people like using puppet

00:42:54,560 --> 00:42:56,720
with

00:42:55,040 --> 00:42:58,960
you know greater than tens of thousands

00:42:56,720 --> 00:43:02,160
of nodes

00:42:58,960 --> 00:43:04,400
so i i can't see that as an issue

00:43:02,160 --> 00:43:06,720
no you wouldn't want to run on a single

00:43:04,400 --> 00:43:09,359
server regardless because you care about

00:43:06,720 --> 00:43:10,800
reliability hopefully and so you're

00:43:09,359 --> 00:43:13,280
going to expect it to fail

00:43:10,800 --> 00:43:15,520
and so i would load balance the service

00:43:13,280 --> 00:43:15,520
yeah

00:43:17,920 --> 00:43:21,599
so what's the difference between chef

00:43:19,280 --> 00:43:24,560
and puppet uh they're both configuration

00:43:21,599 --> 00:43:24,560
management tools

00:43:25,680 --> 00:43:32,079
that they both functionally do

00:43:28,880 --> 00:43:32,800
this like the same thing as the the end

00:43:32,079 --> 00:43:35,920
goal

00:43:32,800 --> 00:43:39,200
uh but it's it's in how you get there uh

00:43:35,920 --> 00:43:40,880
much like uh uh your ferrari and toyota

00:43:39,200 --> 00:43:42,720
both get you across town

00:43:40,880 --> 00:43:44,480
uh it depends how you want to spend your

00:43:42,720 --> 00:43:46,720
time um

00:43:44,480 --> 00:43:48,800
obviously the one that employs me come

00:43:46,720 --> 00:43:48,800
on

00:43:50,319 --> 00:43:54,319
great thanks another technical

00:43:53,760 --> 00:43:56,400
difference

00:43:54,319 --> 00:43:57,760
uh which comes down to philosophy is the

00:43:56,400 --> 00:44:00,720
use of the graph

00:43:57,760 --> 00:44:01,280
and so puppet's very much about using

00:44:00,720 --> 00:44:02,960
this this

00:44:01,280 --> 00:44:05,119
graph to understand what the

00:44:02,960 --> 00:44:07,920
relationships are between

00:44:05,119 --> 00:44:08,560
different parts of your environment

00:44:07,920 --> 00:44:11,680
whereas

00:44:08,560 --> 00:44:12,800
chef when adam wrote that he wanted to

00:44:11,680 --> 00:44:14,400
get away from the graph because he

00:44:12,800 --> 00:44:17,440
thought it was too complex

00:44:14,400 --> 00:44:19,440
and so there's that difference of

00:44:17,440 --> 00:44:20,800
philosophy there

00:44:19,440 --> 00:44:23,440
we think it's of course superior because

00:44:20,800 --> 00:44:25,599
we're able to leverage that information

00:44:23,440 --> 00:44:27,040
and use it elsewhere which is why people

00:44:25,599 --> 00:44:29,440
are building

00:44:27,040 --> 00:44:31,520
businesses and things on top of like

00:44:29,440 --> 00:44:35,440
puppet also like point out we have

00:44:31,520 --> 00:44:37,760
i think medium and large t-shirts

00:44:35,440 --> 00:44:39,520
and then i hopefully later on in the

00:44:37,760 --> 00:44:40,400
weekend i'm getting a shipment of other

00:44:39,520 --> 00:44:41,599
sizes so

00:44:40,400 --> 00:44:43,920
if we didn't get your size there should

00:44:41,599 --> 00:44:43,920
be more

00:44:48,480 --> 00:44:56,400
right on yep

00:44:52,480 --> 00:45:05,200
great uh

00:44:56,400 --> 00:45:06,720
yep like any other yeah uh

00:45:05,200 --> 00:45:08,720
yeah so the question was do we support

00:45:06,720 --> 00:45:08,960
open and free like bsd like good to see

00:45:08,720 --> 00:45:11,200
you

00:45:08,960 --> 00:45:12,160
again here this year uh and yeah we

00:45:11,200 --> 00:45:16,000
support uh

00:45:12,160 --> 00:45:20,880
like bsds hbox aix

00:45:16,000 --> 00:45:20,880
windows solaris its derivatives linux

00:45:28,800 --> 00:45:34,880
so we so we natively support zfs

00:45:32,160 --> 00:45:36,240
we don't have like native resource types

00:45:34,880 --> 00:45:37,839
for gluster

00:45:36,240 --> 00:45:39,520
which isn't to say that you couldn't

00:45:37,839 --> 00:45:41,280
like use it and model it

00:45:39,520 --> 00:45:43,200
we just don't have native types for it

00:45:41,280 --> 00:45:43,920
so you could use other things around it

00:45:43,200 --> 00:45:46,960
like

00:45:43,920 --> 00:45:47,680
file resource and service etc or you

00:45:46,960 --> 00:45:50,400
could write

00:45:47,680 --> 00:45:51,839
a type in provider to manage it like

00:45:50,400 --> 00:45:53,680
natively

00:45:51,839 --> 00:45:55,119
and the types and providers aren't too

00:45:53,680 --> 00:45:58,000
hard actually

00:45:55,119 --> 00:46:00,240
i don't know any ruby and i've totally

00:45:58,000 --> 00:46:03,200
extended our zfs type in provider

00:46:00,240 --> 00:46:05,119
and i i know nothing about like ruby and

00:46:03,200 --> 00:46:08,400
i was able to build this thing so

00:46:05,119 --> 00:46:08,400
it's totally easy to hack on

00:46:19,839 --> 00:46:24,480
sure so the question was best practices

00:46:22,240 --> 00:46:26,000
for backing up configuration files

00:46:24,480 --> 00:46:27,680
uh for that i would look at using

00:46:26,000 --> 00:46:30,640
version control

00:46:27,680 --> 00:46:32,800
so use a version control system back it

00:46:30,640 --> 00:46:32,800
up

00:46:40,839 --> 00:46:43,839
etcetera

00:46:54,800 --> 00:46:58,000
right and for those we'd want to use a

00:46:56,319 --> 00:47:01,839
version control system

00:46:58,000 --> 00:47:01,839
yeah have any other questions

00:47:08,839 --> 00:47:12,160
yep

00:47:10,960 --> 00:47:14,160
uh so the question was can you use

00:47:12,160 --> 00:47:15,680
windows agent with open source version

00:47:14,160 --> 00:47:17,920
and yes you can we've had that out for a

00:47:15,680 --> 00:47:17,920
while

00:47:22,319 --> 00:47:25,359
so what do you get from going from open

00:47:24,079 --> 00:47:27,119
source to

00:47:25,359 --> 00:47:28,559
enterprise like probably most

00:47:27,119 --> 00:47:29,520
importantly for people that do it is

00:47:28,559 --> 00:47:32,559
support

00:47:29,520 --> 00:47:33,359
uh there's somebody to call or email and

00:47:32,559 --> 00:47:35,760
talk to

00:47:33,359 --> 00:47:36,880
uh to hold your hand that sort of thing

00:47:35,760 --> 00:47:38,240
besides support

00:47:36,880 --> 00:47:40,000
on a more technical level you get

00:47:38,240 --> 00:47:41,920
encapsulation of

00:47:40,000 --> 00:47:43,680
like puppets so we build it out we put

00:47:41,920 --> 00:47:44,800
everything in opt puppet we vendor our

00:47:43,680 --> 00:47:46,400
own packages

00:47:44,800 --> 00:47:49,040
that way our stuff doesn't conflict with

00:47:46,400 --> 00:47:50,160
yours and then we also offer some other

00:47:49,040 --> 00:47:52,640
tools

00:47:50,160 --> 00:47:54,960
so in the enterprise version we offer uh

00:47:52,640 --> 00:47:57,920
provisioning directly in vmware

00:47:54,960 --> 00:47:59,839
uh we also offer some different ui stuff

00:47:57,920 --> 00:48:03,760
around compliance

00:47:59,839 --> 00:48:06,880
for folks that are have the opportunity

00:48:03,760 --> 00:48:10,480
to deal with uh fun compliance stuff

00:48:06,880 --> 00:48:10,800
yeah and that's really where the product

00:48:10,480 --> 00:48:13,359
uh

00:48:10,800 --> 00:48:15,599
roadmap's going in the future as uh we

00:48:13,359 --> 00:48:18,160
build

00:48:15,599 --> 00:48:20,240
we have a multiple teams dedicated to

00:48:18,160 --> 00:48:22,400
just open source like puppet and then uh

00:48:20,240 --> 00:48:24,800
other ones that are building more ui

00:48:22,400 --> 00:48:27,040
enterprise features that would be in the

00:48:24,800 --> 00:48:29,440
enterprise version like any more

00:48:27,040 --> 00:48:29,440
questions

00:48:29,839 --> 00:48:33,359
right on well i appreciate everyone for

00:48:32,000 --> 00:48:36,640
having me out

00:48:33,359 --> 00:48:38,480
feel free to grab t-shirts uh i'm going

00:48:36,640 --> 00:48:39,599
from charlotte to thailand so i'm not

00:48:38,480 --> 00:48:43,200
taking them with me so

00:48:39,599 --> 00:48:49,839
uh please take some right on

00:48:43,200 --> 00:48:49,839
thank you

00:48:53,359 --> 00:48:57,520
when we created asterisk over a decade

00:48:55,359 --> 00:48:59,440
ago we could not have imagined

00:48:57,520 --> 00:49:01,119
that asterisk would not only become the

00:48:59,440 --> 00:49:03,280
most widely adopted open source

00:49:01,119 --> 00:49:05,280
communication software on the planet

00:49:03,280 --> 00:49:06,720
but that it would impact the entire

00:49:05,280 --> 00:49:08,800
industry in the way that it has

00:49:06,720 --> 00:49:11,040
today asterisk has found its way into

00:49:08,800 --> 00:49:12,960
more than 170 countries and virtually

00:49:11,040 --> 00:49:15,119
every fortune 1000 company

00:49:12,960 --> 00:49:16,480
the success of asterisks has enabled a

00:49:15,119 --> 00:49:17,839
transition of power

00:49:16,480 --> 00:49:20,079
from the hands of the traditional

00:49:17,839 --> 00:49:21,920
proprietary phone vendors into the hands

00:49:20,079 --> 00:49:23,040
of the users and administrators of phone

00:49:21,920 --> 00:49:24,880
systems

00:49:23,040 --> 00:49:26,400
using this power our customers have

00:49:24,880 --> 00:49:27,359
created all sorts of business changing

00:49:26,400 --> 00:49:29,040
applications

00:49:27,359 --> 00:49:30,720
from small office phone systems to

00:49:29,040 --> 00:49:32,720
mission critical call centers

00:49:30,720 --> 00:49:34,559
to international carrier networks in

00:49:32,720 --> 00:49:36,160
fact there's even an entire country

00:49:34,559 --> 00:49:38,480
whose communications infrastructure runs

00:49:36,160 --> 00:49:40,640
on asterisk digium has always been

00:49:38,480 --> 00:49:42,480
about creating technology that expands

00:49:40,640 --> 00:49:44,160
communications capabilities in ways that

00:49:42,480 --> 00:49:45,520
we could never have imagined

00:49:44,160 --> 00:49:48,319
and that's part of what's game changing

00:49:45,520 --> 00:49:50,480
about digium today we're doing it again

00:49:48,319 --> 00:49:51,760
this time by introducing a new family of

00:49:50,480 --> 00:49:53,599
hdip phones

00:49:51,760 --> 00:49:54,880
that extends control of the user all the

00:49:53,599 --> 00:49:56,240
way to the desktop

00:49:54,880 --> 00:49:58,079
the launch of these new products

00:49:56,240 --> 00:49:59,440
represents the next phase in digium's

00:49:58,079 --> 00:50:01,680
history of innovation

00:49:59,440 --> 00:50:03,359
these are the first and only iphones

00:50:01,680 --> 00:50:04,880
designed to fully leverage the power of

00:50:03,359 --> 00:50:06,480
asterisk when we first discussed our

00:50:04,880 --> 00:50:08,160
expectations for building a family of

00:50:06,480 --> 00:50:10,240
phones for use with asterisk

00:50:08,160 --> 00:50:12,000
our requirements were pretty simple we

00:50:10,240 --> 00:50:13,440
asked the team to build the phones such

00:50:12,000 --> 00:50:15,599
that they were easy to install

00:50:13,440 --> 00:50:16,640
integrate provision and use i think

00:50:15,599 --> 00:50:18,000
you'll soon agree

00:50:16,640 --> 00:50:20,559
our engineers have delivered on that

00:50:18,000 --> 00:50:22,079
goal user feedback is validating

00:50:20,559 --> 00:50:24,559
that when it comes to operation with

00:50:22,079 --> 00:50:26,640
astro space systems including our own

00:50:24,559 --> 00:50:27,839
switchvox based product these are the

00:50:26,640 --> 00:50:29,839
easiest to use

00:50:27,839 --> 00:50:31,520
best integrated most interoperable

00:50:29,839 --> 00:50:33,040
products on the market today

00:50:31,520 --> 00:50:35,520
the digium family of phones will

00:50:33,040 --> 00:50:37,280
initially include three ip desk phones

00:50:35,520 --> 00:50:39,680
uniquely designed to complement any

00:50:37,280 --> 00:50:40,960
asterisk or switchvox based solution

00:50:39,680 --> 00:50:43,599
these phones are different for a number

00:50:40,960 --> 00:50:44,160
of reasons first they're exclusively

00:50:43,599 --> 00:50:46,480
designed

00:50:44,160 --> 00:50:48,400
for use with asterisks secondly we've

00:50:46,480 --> 00:50:49,920
made it really easy to auto discover and

00:50:48,400 --> 00:50:51,760
provision the phones

00:50:49,920 --> 00:50:54,160
next we've made it easy for the phones

00:50:51,760 --> 00:50:55,680
to access information inside of asterisk

00:50:54,160 --> 00:50:57,760
allowing tight coupling between an

00:50:55,680 --> 00:50:59,359
application and the phone

00:50:57,760 --> 00:51:01,440
additionally we've created an

00:50:59,359 --> 00:51:02,319
applications engine that allows users

00:51:01,440 --> 00:51:04,640
and developers

00:51:02,319 --> 00:51:05,520
to create and run their own apps on the

00:51:04,640 --> 00:51:07,920
phone

00:51:05,520 --> 00:51:09,440
and finally we've done all of this at a

00:51:07,920 --> 00:51:11,440
very compelling price point

00:51:09,440 --> 00:51:13,440
at digium we're always thinking of ways

00:51:11,440 --> 00:51:14,880
to give our customers the best value in

00:51:13,440 --> 00:51:16,880
business phone systems

00:51:14,880 --> 00:51:17,920
and also give them the power to create

00:51:16,880 --> 00:51:20,079
their own solutions

00:51:17,920 --> 00:51:21,599
for any communications challenge we'll

00:51:20,079 --> 00:51:23,119
continue to push the boundaries

00:51:21,599 --> 00:51:24,800
not only to make asterisks cooler and

00:51:23,119 --> 00:51:25,280
faster and more technologically future

00:51:24,800 --> 00:51:26,559
rich

00:51:25,280 --> 00:51:28,400
but to make astros can voip

00:51:26,559 --> 00:51:30,000
communications even easier

00:51:28,400 --> 00:51:37,839
and together we'll change the way the

00:51:30,000 --> 00:51:37,839
world communicates again

00:51:44,720 --> 00:51:50,160
plow stacks are everywhere this is the

00:51:47,520 --> 00:51:52,400
way to better utilize

00:51:50,160 --> 00:51:55,359
all your resources and it makes managing

00:51:52,400 --> 00:51:57,040
all your resources pretty easy

00:51:55,359 --> 00:51:59,599
all of the innovation is happening in

00:51:57,040 --> 00:51:59,599
open source

00:52:00,000 --> 00:52:05,040
the collaborative nature and of the

00:52:03,520 --> 00:52:06,960
you know of the community and and the

00:52:05,040 --> 00:52:08,720
speed at which these uh

00:52:06,960 --> 00:52:10,480
these you know these these deficiencies

00:52:08,720 --> 00:52:10,800
these bugs are getting discovered and

00:52:10,480 --> 00:52:13,520
then

00:52:10,800 --> 00:52:15,520
fixed is a thing that really shows the

00:52:13,520 --> 00:52:17,119
power of the you know of the open source

00:52:15,520 --> 00:52:18,800
community

00:52:17,119 --> 00:52:20,720
it is global and it's definitely because

00:52:18,800 --> 00:52:24,240
of the users

00:52:20,720 --> 00:52:24,800
community people are extremely friendly

00:52:24,240 --> 00:52:27,920
and

00:52:24,800 --> 00:52:27,920
always ready to help

00:52:29,119 --> 00:52:32,800
if you go on entire sea any day you'll

00:52:31,040 --> 00:52:34,480
see these guys helping each other out

00:52:32,800 --> 00:52:36,240
and they're all doing it like in a

00:52:34,480 --> 00:52:38,160
selfless manner

00:52:36,240 --> 00:52:41,680
the product is transparent for everyone

00:52:38,160 --> 00:52:44,000
everyone can look at the code base

00:52:41,680 --> 00:52:45,280
everyone can see how cloud stack is

00:52:44,000 --> 00:52:47,680
being built nothing

00:52:45,280 --> 00:52:49,920
nothing is proprietary everything is

00:52:47,680 --> 00:52:49,920
open

00:52:51,200 --> 00:52:57,599
in many ways it's absolutely vital to

00:52:53,119 --> 00:52:57,599
the to the ongoing health of cloud stack

00:52:58,000 --> 00:53:02,880
the most exciting event uh in recent

00:53:01,520 --> 00:53:05,920
memory for me

00:53:02,880 --> 00:53:08,640
was our first developer boot camp uh

00:53:05,920 --> 00:53:09,440
and our call gave people i think maybe

00:53:08,640 --> 00:53:12,480
two weeks

00:53:09,440 --> 00:53:12,960
notice to come attend i was expecting 25

00:53:12,480 --> 00:53:16,079
or

00:53:12,960 --> 00:53:20,559
30 people so we ended up with

00:53:16,079 --> 00:53:22,800
87 people and had to go get more chairs

00:53:20,559 --> 00:53:24,000
into the room twice everything within

00:53:22,800 --> 00:53:27,200
cloud computing

00:53:24,000 --> 00:53:28,640
is commodity and is open source and so i

00:53:27,200 --> 00:53:31,200
i don't think that you

00:53:28,640 --> 00:53:32,640
will uh you'll see anywhere where open

00:53:31,200 --> 00:53:35,280
source is not pervasive

00:53:32,640 --> 00:53:35,839
in cloud computing and so i i think it's

00:53:35,280 --> 00:53:38,400
uh

00:53:35,839 --> 00:53:39,839
i think it's an assumption i think when

00:53:38,400 --> 00:53:41,359
you talk about cloud computing you're

00:53:39,839 --> 00:53:43,839
really talking about open source cloud

00:53:41,359 --> 00:53:43,839
computing

00:53:44,880 --> 00:53:48,960
cloud stack is a robust solution for

00:53:47,119 --> 00:53:51,040
large deployments

00:53:48,960 --> 00:53:52,960
you have dozens of data centers and

00:53:51,040 --> 00:53:54,400
thousands of servers in each data

00:53:52,960 --> 00:53:57,599
centers

00:53:54,400 --> 00:54:00,720
these hardware is going to fail and

00:53:57,599 --> 00:54:03,839
cloud stack is designed to handle

00:54:00,720 --> 00:54:05,920
number one that mass scale number two

00:54:03,839 --> 00:54:07,839
it's designed to handle the failure that

00:54:05,920 --> 00:54:10,400
inevitably happens

00:54:07,839 --> 00:54:13,280
in large deployments we started working

00:54:10,400 --> 00:54:16,640
on cloud stack over four years ago

00:54:13,280 --> 00:54:18,400
and you know it was the original set of

00:54:16,640 --> 00:54:20,400
people working on it

00:54:18,400 --> 00:54:23,839
had a background of delivering software

00:54:20,400 --> 00:54:26,640
to telcos and service providers

00:54:23,839 --> 00:54:28,480
lots of qa lots of users actually using

00:54:26,640 --> 00:54:32,160
it

00:54:28,480 --> 00:54:35,040
high availability is the key feature

00:54:32,160 --> 00:54:36,160
multiple hypervisor support different

00:54:35,040 --> 00:54:37,599
network models

00:54:36,160 --> 00:54:40,559
you can pick up whatever suits you

00:54:37,599 --> 00:54:42,400
better cloud step management server can

00:54:40,559 --> 00:54:44,799
be deployed in different physical

00:54:42,400 --> 00:54:46,720
machines

00:54:44,799 --> 00:54:48,000
it definitely has a huge footprint it's

00:54:46,720 --> 00:54:52,559
being deployed everywhere

00:54:48,000 --> 00:54:54,799
there's a major movie studio that

00:54:52,559 --> 00:54:56,000
they were using cloud stack they were

00:54:54,799 --> 00:54:58,720
using it to

00:54:56,000 --> 00:55:00,079
transcode video and i thought that was

00:54:58,720 --> 00:55:01,680
terribly fascinating

00:55:00,079 --> 00:55:03,200
what i found more fascinating is what

00:55:01,680 --> 00:55:06,160
they did during lunch

00:55:03,200 --> 00:55:06,799
where they would spin up you know 50 or

00:55:06,160 --> 00:55:08,640
00:55:06,799 --> 00:55:09,760
game servers then as soon as lunch was

00:55:08,640 --> 00:55:10,640
over they would destroy all the

00:55:09,760 --> 00:55:13,440
instances and

00:55:10,640 --> 00:55:13,680
go back to doing real work cloud stack

00:55:13,440 --> 00:55:16,079
is

00:55:13,680 --> 00:55:17,839
vast it touches so many different

00:55:16,079 --> 00:55:18,480
aspects and there's no one person that's

00:55:17,839 --> 00:55:20,480
kind of like

00:55:18,480 --> 00:55:21,920
a master of all those realms i think

00:55:20,480 --> 00:55:25,200
cloud stack

00:55:21,920 --> 00:55:27,359
as a project is going to be

00:55:25,200 --> 00:55:28,240
one of the leaders simply because it's

00:55:27,359 --> 00:55:32,160
some of the most

00:55:28,240 --> 00:55:35,839
featureful and and uh and robust

00:55:32,160 --> 00:55:35,839
platforms out there

00:55:36,559 --> 00:55:49,839
i don't see any limits of the clouds tag

00:56:24,160 --> 00:56:26,240

YouTube URL: https://www.youtube.com/watch?v=Cf1TmVLf4nI


