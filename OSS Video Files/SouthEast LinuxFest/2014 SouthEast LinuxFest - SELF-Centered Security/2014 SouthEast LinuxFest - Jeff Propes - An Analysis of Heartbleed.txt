Title: 2014 SouthEast LinuxFest - Jeff Propes - An Analysis of Heartbleed
Publication date: 2015-05-17
Playlist: 2014 SouthEast LinuxFest - SELF-Centered Security
Description: 
	2014 SouthEast LinuxFest
Jeff Propes
An Analysis of Heartbleed
Captions: 
	00:00:00,000 --> 00:00:05,339
the following presentation was recorded

00:00:02,490 --> 00:00:08,250
the 2014 southeast linux fest in

00:00:05,339 --> 00:00:11,070
charlotte north carolina it is licensed

00:00:08,250 --> 00:00:15,150
under a creative commons license for

00:00:11,070 --> 00:00:18,330
more information visit www.fcn expense

00:00:15,150 --> 00:00:20,310
org the southeast linux fest would like

00:00:18,330 --> 00:00:22,769
to thank the following diamond sponsors

00:00:20,310 --> 00:00:27,750
in 2014 for helping make these videos

00:00:22,769 --> 00:00:30,330
possible howdy folks this is jeff probst

00:00:27,750 --> 00:00:32,730
from mod XCOM he's a senior linux

00:00:30,330 --> 00:00:36,059
administrator there I've known Jeff for

00:00:32,730 --> 00:00:38,190
a long time he's he was Captain Obvious

00:00:36,059 --> 00:00:45,629
man on IRC but he has gotten promoted

00:00:38,190 --> 00:00:51,750
and this is now major obvious man stand

00:00:45,629 --> 00:00:53,340
and salute come on but yeah I've known

00:00:51,750 --> 00:00:55,199
Jeff a long time he's a good fellow and

00:00:53,340 --> 00:00:58,910
he's going to give us a good

00:00:55,199 --> 00:01:02,100
presentation on the recent heartbleed

00:00:58,910 --> 00:01:07,830
SSL vulnerability there you go Jimmy

00:01:02,100 --> 00:01:14,540
very much see if I can do this can you

00:01:07,830 --> 00:01:18,540
guys hear me is this coming through okay

00:01:14,540 --> 00:01:22,140
so thank you very much person who's not

00:01:18,540 --> 00:01:23,790
rob thank you for the introduction today

00:01:22,140 --> 00:01:25,830
we are going to be talking about the

00:01:23,790 --> 00:01:28,560
heartbleed vulnerability that came out

00:01:25,830 --> 00:01:30,630
in early April if you wish to follow

00:01:28,560 --> 00:01:32,100
along with this presentation or want to

00:01:30,630 --> 00:01:34,520
refer back to it I have a permanent copy

00:01:32,100 --> 00:01:39,240
up here the addresses here at the front

00:01:34,520 --> 00:01:40,500
self 2014 grimoire re / Berkeley I also

00:01:39,240 --> 00:01:41,850
have a link to that at the very end in

00:01:40,500 --> 00:01:46,829
case you forget about it for you didn't

00:01:41,850 --> 00:01:54,210
get to it in time so today we're going

00:01:46,829 --> 00:01:56,100
to be going over del hang on it is we

00:01:54,210 --> 00:01:59,840
can't touch this apparently so I'm going

00:01:56,100 --> 00:02:02,869
to dis a little bit here

00:01:59,840 --> 00:02:05,119
that's down okay I think we're good now

00:02:02,869 --> 00:02:07,509
so today we're going to be going over

00:02:05,119 --> 00:02:09,379
what is the heartbleed vulnerability

00:02:07,509 --> 00:02:12,890
we're going to explore it in depth

00:02:09,379 --> 00:02:14,000
probably more than you may want to we're

00:02:12,890 --> 00:02:18,170
going to explore with the impact

00:02:14,000 --> 00:02:19,970
implications of the bug war and discover

00:02:18,170 --> 00:02:23,599
how it was mitigated and how it's been

00:02:19,970 --> 00:02:25,459
fixed in the well so we need to go over

00:02:23,599 --> 00:02:27,290
some definitions so we have a basic

00:02:25,459 --> 00:02:30,319
vocabulary to speak about when we're

00:02:27,290 --> 00:02:32,599
discussing this I'm starting with what

00:02:30,319 --> 00:02:34,459
SSL is it's a protocol that provides a

00:02:32,599 --> 00:02:38,299
secure communications channel for data

00:02:34,459 --> 00:02:40,519
transfer are usually used with HTTP

00:02:38,299 --> 00:02:44,420
which is what everybody's using for web

00:02:40,519 --> 00:02:45,890
content we wrap SSL around HTTP so that

00:02:44,420 --> 00:02:48,590
that content can be delivered securely

00:02:45,890 --> 00:02:51,790
and a lot of these servers are using a

00:02:48,590 --> 00:02:53,780
tool called openssl to do that delivery

00:02:51,790 --> 00:02:56,239
so this is our basic working knowledge

00:02:53,780 --> 00:02:58,670
you there's a lot more that could be

00:02:56,239 --> 00:03:00,319
covered in here in effect tomorrow I

00:02:58,670 --> 00:03:01,849
will be going over to sessions about

00:03:00,319 --> 00:03:04,010
that very thing so if there is some

00:03:01,849 --> 00:03:06,109
questions you have about ssl its

00:03:04,010 --> 00:03:08,420
operation some of the assumptions are

00:03:06,109 --> 00:03:10,069
things that I've said come tomorrow ask

00:03:08,420 --> 00:03:13,370
questions after there's lots of

00:03:10,069 --> 00:03:15,650
opportunities to learn here so let's

00:03:13,370 --> 00:03:17,720
talk about what if it was a

00:03:15,650 --> 00:03:19,609
vulnerability and open SSL is

00:03:17,720 --> 00:03:22,880
implementation of something called the

00:03:19,609 --> 00:03:25,670
heartbeat function the heartbeat is a

00:03:22,880 --> 00:03:28,549
new feature introduced in a recent

00:03:25,670 --> 00:03:31,400
version of openssl are in the excuse me

00:03:28,549 --> 00:03:33,440
in the SSL protocol which is designed to

00:03:31,400 --> 00:03:35,329
just basically be it are you there yes

00:03:33,440 --> 00:03:37,940
I'm there and it keeps the SSL

00:03:35,329 --> 00:03:40,310
communication channel open we want to do

00:03:37,940 --> 00:03:42,889
this because opening a new channel is

00:03:40,310 --> 00:03:45,739
very computationally expensive takes a

00:03:42,889 --> 00:03:48,019
lot of time entropy and randomness to

00:03:45,739 --> 00:03:49,849
calculate all the values needed to

00:03:48,019 --> 00:03:53,450
create a new ssl channel and again we'll

00:03:49,849 --> 00:03:55,880
talk about that tomorrow but just take

00:03:53,450 --> 00:03:57,799
that one to the back what happens is the

00:03:55,880 --> 00:04:00,139
client requests a heartbeat from the

00:03:57,799 --> 00:04:02,569
server and it includes any string at

00:04:00,139 --> 00:04:05,510
once it could be some numbers it could

00:04:02,569 --> 00:04:07,880
be what the data is it could be I really

00:04:05,510 --> 00:04:10,730
like hot dogs doesn't matter

00:04:07,880 --> 00:04:12,650
it's connor the server responds with the

00:04:10,730 --> 00:04:14,600
same straight proving that the

00:04:12,650 --> 00:04:15,830
connection is still open and that

00:04:14,600 --> 00:04:18,380
they're listening and that no one else

00:04:15,830 --> 00:04:20,930
is interfering with their messages the

00:04:18,380 --> 00:04:24,470
problem comes in with this function hear

00:04:20,930 --> 00:04:27,620
the heartbeat process function it

00:04:24,470 --> 00:04:29,330
receives a data structure with two very

00:04:27,620 --> 00:04:32,150
important items first is destroying that

00:04:29,330 --> 00:04:34,340
the client gave it and the second the

00:04:32,150 --> 00:04:38,360
length of the string as stated by the

00:04:34,340 --> 00:04:40,700
remote client it then creates a new data

00:04:38,360 --> 00:04:42,710
structure which it sends back to the

00:04:40,700 --> 00:04:45,440
client it's basically just doing a

00:04:42,710 --> 00:04:47,660
simple copy of RAM the problem is that

00:04:45,440 --> 00:04:49,880
it doesn't do it very well it doesn't

00:04:47,660 --> 00:04:51,800
verify that the length of the string

00:04:49,880 --> 00:04:54,620
that the client gave it is actually with

00:04:51,800 --> 00:04:58,130
the client says it is so I could do I

00:04:54,620 --> 00:04:59,780
don't know classes which is six

00:04:58,130 --> 00:05:02,080
characters long but I could tell it that

00:04:59,780 --> 00:05:05,870
the string is 400 characters long and

00:05:02,080 --> 00:05:07,460
this becomes problem because since it

00:05:05,870 --> 00:05:09,800
doesn't verify that those links match

00:05:07,460 --> 00:05:11,470
this heartbeat process function could

00:05:09,800 --> 00:05:14,720
copy more data than it was supposed to

00:05:11,470 --> 00:05:16,190
it's called a missing bounds check it's

00:05:14,720 --> 00:05:18,080
pretty common in c programming

00:05:16,190 --> 00:05:19,580
especially when you're dealing with

00:05:18,080 --> 00:05:21,650
pointers and slinging them around all

00:05:19,580 --> 00:05:24,350
over the place sometimes you just forget

00:05:21,650 --> 00:05:26,060
to check this bounder that and sometimes

00:05:24,350 --> 00:05:29,570
when you forget that sometimes is in a

00:05:26,060 --> 00:05:31,400
very crucial place so here we have an

00:05:29,570 --> 00:05:32,840
illustration from XKCD a lot of you

00:05:31,400 --> 00:05:35,060
probably have already seen this but this

00:05:32,840 --> 00:05:37,640
is perhaps the best illustration I have

00:05:35,060 --> 00:05:39,800
of what the heartbleed function is here

00:05:37,640 --> 00:05:42,140
our users sending a heartbeat of the

00:05:39,800 --> 00:05:45,680
word potato and there's server at the

00:05:42,140 --> 00:05:47,800
bottom responds with potato she does it

00:05:45,680 --> 00:05:49,730
again this time with the word bird

00:05:47,800 --> 00:05:52,580
noting that they're different characters

00:05:49,730 --> 00:05:56,270
well the server responds with bird so

00:05:52,580 --> 00:05:58,070
then she tries again let's do hat but

00:05:56,270 --> 00:06:00,860
this time we'll use 500 characters and

00:05:58,070 --> 00:06:03,140
the server responds with hat and the

00:06:00,860 --> 00:06:06,140
following 497 characters after that

00:06:03,140 --> 00:06:10,130
which it's not supposed to this in a

00:06:06,140 --> 00:06:11,729
nutshell is the heartbleed bug let's

00:06:10,130 --> 00:06:13,559
dive into some code

00:06:11,729 --> 00:06:19,289
hmm I'm very sorry about this I don't

00:06:13,559 --> 00:06:21,449
know why it's doing this there we go the

00:06:19,289 --> 00:06:23,099
function first appeared in version 10

00:06:21,449 --> 00:06:26,699
dot 1 I believe they were trying to hit

00:06:23,099 --> 00:06:28,469
a 10 release we didn't get it in there's

00:06:26,699 --> 00:06:31,009
the actual code and there's the actual

00:06:28,469 --> 00:06:33,719
file so you could go and download

00:06:31,009 --> 00:06:36,710
openssl is git repository read through

00:06:33,719 --> 00:06:39,150
it find the exact commit where it was

00:06:36,710 --> 00:06:41,550
erroneously include and in fact that's

00:06:39,150 --> 00:06:44,759
happened before this is the actual

00:06:41,550 --> 00:06:47,159
function itself highlighting a couple of

00:06:44,759 --> 00:06:48,870
the important parts the first box at the

00:06:47,159 --> 00:06:50,309
top there designates that's the data

00:06:48,870 --> 00:06:54,479
structure that this function is

00:06:50,309 --> 00:06:56,339
receiving from ssl the second box shows

00:06:54,479 --> 00:06:59,309
that it's picking the payload out of

00:06:56,339 --> 00:07:00,599
that data structure now third box is

00:06:59,309 --> 00:07:03,749
showing that it's getting a count of

00:07:00,599 --> 00:07:11,550
this what the data structure says is

00:07:03,749 --> 00:07:13,830
decide go so then what it does this is a

00:07:11,550 --> 00:07:16,409
second part of the code it calculates

00:07:13,830 --> 00:07:18,569
how big the new data structure needs to

00:07:16,409 --> 00:07:20,729
be based upon the size the reported size

00:07:18,569 --> 00:07:23,279
of the payload from the client and the

00:07:20,729 --> 00:07:25,709
other values it has and then that bottom

00:07:23,279 --> 00:07:27,149
box there it just blindly copies memory

00:07:25,709 --> 00:07:28,469
it doesn't do any bounds checking Lee

00:07:27,149 --> 00:07:35,819
doesn't do any fact check and it just

00:07:28,469 --> 00:07:39,349
copies that's that's painful this is

00:07:35,819 --> 00:07:44,029
what we call in an industry a big oops

00:07:39,349 --> 00:07:44,029
it's a very technical term

00:07:44,490 --> 00:07:49,560
so what we see is that whatever data is

00:07:47,370 --> 00:07:51,599
in RAM immediately after that strength

00:07:49,560 --> 00:07:55,289
gets returned to the client erroneously

00:07:51,599 --> 00:07:58,169
and anything could be there I mean

00:07:55,289 --> 00:08:01,560
honestly anything it could be just zeros

00:07:58,169 --> 00:08:04,500
it could be uninstallation since the

00:08:01,560 --> 00:08:07,530
system booted up it could be junk it

00:08:04,500 --> 00:08:11,099
could be session data of another users

00:08:07,530 --> 00:08:14,340
request it could be cached password data

00:08:11,099 --> 00:08:18,030
yeah that happened it could be ssl

00:08:14,340 --> 00:08:19,830
private keys that happen to any of these

00:08:18,030 --> 00:08:20,819
things it could be operating system data

00:08:19,830 --> 00:08:22,229
structures it could be anything you

00:08:20,819 --> 00:08:24,840
don't know what you get is basically a

00:08:22,229 --> 00:08:27,539
raw copy of whatever was in RAM after

00:08:24,840 --> 00:08:32,190
that point and you get 64 up to 64

00:08:27,539 --> 00:08:35,820
kilobytes of it at a time that's that's

00:08:32,190 --> 00:08:36,930
painful and it gets worse the memory

00:08:35,820 --> 00:08:39,839
address of the main structure is not

00:08:36,930 --> 00:08:42,029
fixed so every time a new data structure

00:08:39,839 --> 00:08:46,140
response is crafted it could be

00:08:42,029 --> 00:08:47,730
somewhere else in RAM this means if you

00:08:46,140 --> 00:08:49,620
do it over and over again you could

00:08:47,730 --> 00:08:53,880
conceivably get different sections of

00:08:49,620 --> 00:08:56,010
RAM all over the place yeah that's even

00:08:53,880 --> 00:09:02,520
worse let's go check out this example

00:08:56,010 --> 00:09:04,200
here this is a proof-of-concept server

00:09:02,520 --> 00:09:06,899
that someone put together which is

00:09:04,200 --> 00:09:09,690
running a vulnerable version of open SSL

00:09:06,899 --> 00:09:12,209
for the purposes of us being able to see

00:09:09,690 --> 00:09:14,040
what's in it's rare there's a lot of

00:09:12,209 --> 00:09:15,510
information here and again this link is

00:09:14,040 --> 00:09:18,120
in the presentation so you can go play

00:09:15,510 --> 00:09:19,800
with it yourself down here simulate the

00:09:18,120 --> 00:09:21,660
attack this is the section of interest

00:09:19,800 --> 00:09:23,670
here we're going to click on this URL

00:09:21,660 --> 00:09:25,410
he's doing us a favor he's actually

00:09:23,670 --> 00:09:33,079
hosting the attack code on the same

00:09:25,410 --> 00:09:33,079
server force let's go poke at this maybe

00:09:34,529 --> 00:09:44,339
what happened jeopardy music Andy all

00:09:39,329 --> 00:09:46,490
right well I I saved a copy of something

00:09:44,339 --> 00:09:48,480
that I found last night yes thank you

00:09:46,490 --> 00:09:50,519
can come up and shout this into the

00:09:48,480 --> 00:09:52,709
microphone if you want this is the

00:09:50,519 --> 00:09:56,459
actual response I got last night when I

00:09:52,709 --> 00:10:01,579
was playing around with this and see

00:09:56,459 --> 00:10:08,550
what I can do here we make everything 20

00:10:01,579 --> 00:10:11,160
that easier to see okay so he hung in

00:10:08,550 --> 00:10:13,829
the attack code he does a favor here you

00:10:11,160 --> 00:10:15,779
set up a random cookie with some funky

00:10:13,829 --> 00:10:17,790
characters for us and that way we can

00:10:15,779 --> 00:10:20,910
kind of search to ram and see if we can

00:10:17,790 --> 00:10:24,120
find it here this up at the top here is

00:10:20,910 --> 00:10:27,689
just some ssl information here we can

00:10:24,120 --> 00:10:29,189
see that he requested several different

00:10:27,689 --> 00:10:32,189
things he requested hear a heartbeat

00:10:29,189 --> 00:10:34,589
length of 16 kb let's go check out what

00:10:32,189 --> 00:10:38,329
he's got see bunch of junk bunch of John

00:10:34,589 --> 00:10:41,910
function that's not jump that looks like

00:10:38,329 --> 00:10:44,129
whoo yes this is a response from a

00:10:41,910 --> 00:10:46,949
recent request to the website oh look

00:10:44,129 --> 00:10:48,480
here's the cookies right here the

00:10:46,949 --> 00:10:50,430
WordPress cookies that are built-in

00:10:48,480 --> 00:10:53,959
allow you to keep your session logged in

00:10:50,430 --> 00:10:56,430
so using this information right here

00:10:53,959 --> 00:10:58,680
from there to here I can pull that out

00:10:56,430 --> 00:11:01,470
of RAM I can master a to somebody else's

00:10:58,680 --> 00:11:03,329
wordpress user what happens if that user

00:11:01,470 --> 00:11:06,120
is an administrator there's no way to

00:11:03,329 --> 00:11:07,740
know without masquerading and seen but

00:11:06,120 --> 00:11:09,689
it was that easy to pick that

00:11:07,740 --> 00:11:11,100
information out I only had to refresh

00:11:09,689 --> 00:11:13,589
this once or twice and it randomly

00:11:11,100 --> 00:11:15,860
assigned somewhere and RAM and I got

00:11:13,589 --> 00:11:19,050
this information who knows what you get

00:11:15,860 --> 00:11:22,230
try it again you can get it just about

00:11:19,050 --> 00:11:24,689
anything if you're patient enough the

00:11:22,230 --> 00:11:26,850
rest of this receives just jog this is

00:11:24,689 --> 00:11:31,259
initialized uninitialized ran here a

00:11:26,850 --> 00:11:33,120
whole lot of it yep a whole lot of it

00:11:31,259 --> 00:11:34,649
okay there we go oh this is this is more

00:11:33,120 --> 00:11:37,220
text from the attacks kept telling us

00:11:34,649 --> 00:11:40,670
hey sure enough the server is vulnerable

00:11:37,220 --> 00:11:40,670
thank you text

00:11:44,250 --> 00:11:51,490
yeah oh look there we go it's finally

00:11:48,370 --> 00:11:52,990
came up let's see what's in this one and

00:11:51,490 --> 00:11:55,060
you notice the data is different here

00:11:52,990 --> 00:11:56,830
again different location in RAM it's a

00:11:55,060 --> 00:12:00,580
different time who knows it's in RAM at

00:11:56,830 --> 00:12:05,500
this time well we can see you this is I

00:12:00,580 --> 00:12:07,300
don't know what 2014 is a name of a

00:12:05,500 --> 00:12:13,600
wordpress theme it looks like we're

00:12:07,300 --> 00:12:17,620
looking into PHP code perhaps yeah it's

00:12:13,600 --> 00:12:20,460
just some code here I don't see a whole

00:12:17,620 --> 00:12:22,990
lot of interesting stuff in this one but

00:12:20,460 --> 00:12:24,700
it's important to recognize are we going

00:12:22,990 --> 00:12:25,990
to get into them this is completely

00:12:24,700 --> 00:12:29,500
different than the data we just looked

00:12:25,990 --> 00:12:31,390
at and if i refresh it we get different

00:12:29,500 --> 00:12:34,420
dated again here we go here's more blank

00:12:31,390 --> 00:12:36,070
ran can refresh it again and again and

00:12:34,420 --> 00:12:37,390
again and every single time I have a

00:12:36,070 --> 00:12:39,610
good likelihood that i'll get different

00:12:37,390 --> 00:12:42,610
data i keep refreshing i keep attacking

00:12:39,610 --> 00:12:45,450
I can particular i can almost canvassed

00:12:42,610 --> 00:12:45,450
the entire ram

00:12:49,670 --> 00:12:56,220
and it's a little bit worse than that

00:12:53,090 --> 00:12:58,710
yes to sell mechanisms as I said we're

00:12:56,220 --> 00:13:02,640
wrapping HTTP we're wrapping SSL around

00:12:58,710 --> 00:13:06,390
it so the ssl layer happens first and

00:13:02,640 --> 00:13:09,120
then after SSL is established the HTTP

00:13:06,390 --> 00:13:10,890
connection happens only problem is

00:13:09,120 --> 00:13:12,990
there's usually no logging done if he

00:13:10,890 --> 00:13:14,940
SSL layer it's just assumed that it'll

00:13:12,990 --> 00:13:18,750
pass through and then you can do your

00:13:14,940 --> 00:13:21,780
login at the HTTP later so that means if

00:13:18,750 --> 00:13:23,430
an attacker knew about this bug and was

00:13:21,780 --> 00:13:25,260
using it on your server they could do it

00:13:23,430 --> 00:13:27,680
over and over and over again and you

00:13:25,260 --> 00:13:30,030
wouldn't know you have no way of knowing

00:13:27,680 --> 00:13:31,650
that the server is being attacked you

00:13:30,030 --> 00:13:33,720
might notice that the load is spiked up

00:13:31,650 --> 00:13:36,180
to 40 because someone keeps causing you

00:13:33,720 --> 00:13:39,030
to do ssl connection computation

00:13:36,180 --> 00:13:40,980
remember we said that SSL connections

00:13:39,030 --> 00:13:43,140
are computationally expensive you might

00:13:40,980 --> 00:13:45,540
have indirect evidence that something

00:13:43,140 --> 00:13:49,260
was going on but you wouldn't know this

00:13:45,540 --> 00:13:54,320
is what was happening it's very not good

00:13:49,260 --> 00:13:56,580
very very not good what happened it was

00:13:54,320 --> 00:13:58,020
reported the vulnerability was reported

00:13:56,580 --> 00:14:01,380
on the eat they knew about it on the

00:13:58,020 --> 00:14:02,940
first but for fear of for l april fools

00:14:01,380 --> 00:14:05,490
they didn't want to release this really

00:14:02,940 --> 00:14:08,460
enormous attack and everybody would just

00:14:05,490 --> 00:14:10,020
say Oh April Fool's know so they waited

00:14:08,460 --> 00:14:14,400
a little bit until they had some more

00:14:10,020 --> 00:14:16,950
verified code but since it was published

00:14:14,400 --> 00:14:20,610
in 2011 that vulnerability could have

00:14:16,950 --> 00:14:23,550
been used for years the version of

00:14:20,610 --> 00:14:25,200
openssl that came out was in October

00:14:23,550 --> 00:14:27,780
together letters you've got almost a

00:14:25,200 --> 00:14:29,880
year and a half where this bug could

00:14:27,780 --> 00:14:31,770
have been discovered by somebody been

00:14:29,880 --> 00:14:34,440
used in the wild and again because no

00:14:31,770 --> 00:14:36,589
one is logging SSL you wouldn't know yes

00:14:34,440 --> 00:14:36,589
sir

00:14:40,120 --> 00:14:51,010
there were able to go back there long to

00:14:44,180 --> 00:14:51,010
find that prior to able that traffic

00:14:54,130 --> 00:15:02,090
later why Spurs hmm probably not at

00:15:00,170 --> 00:15:04,400
least to that server who knows what that

00:15:02,090 --> 00:15:06,320
server was who knows what was on it

00:15:04,400 --> 00:15:07,400
whether it was worthy of attacking it's

00:15:06,320 --> 00:15:09,200
just one of those things about

00:15:07,400 --> 00:15:11,960
information security if you find a

00:15:09,200 --> 00:15:14,720
vulnerability that especially one as big

00:15:11,960 --> 00:15:16,970
as this is easy to use is this you don't

00:15:14,720 --> 00:15:18,290
tell anybody and you save it for the

00:15:16,970 --> 00:15:20,570
times when you need to use it against

00:15:18,290 --> 00:15:21,590
that one really critical target the

00:15:20,570 --> 00:15:24,200
government server that you've worked

00:15:21,590 --> 00:15:26,870
three months to get into something

00:15:24,200 --> 00:15:28,400
anything like that so yes we have data

00:15:26,870 --> 00:15:30,050
points that say it wasn't being used in

00:15:28,400 --> 00:15:33,350
a while but we don't have data points

00:15:30,050 --> 00:15:42,200
for all servers so that is a very valid

00:15:33,350 --> 00:15:44,780
point though on bigger server farms

00:15:42,200 --> 00:15:46,550
that's very true so you have some sort

00:15:44,780 --> 00:15:48,680
of device or devices sitting in front

00:15:46,550 --> 00:15:50,750
again because SSL is computationally

00:15:48,680 --> 00:15:53,960
expensive we don't want that going on on

00:15:50,750 --> 00:15:55,610
the actual web server itself so for some

00:15:53,960 --> 00:15:57,680
of the bigger sites they're doing the

00:15:55,610 --> 00:15:59,840
ssl on a different server entirely so

00:15:57,680 --> 00:16:01,970
you're still getting round pieces out of

00:15:59,840 --> 00:16:04,490
that server you're still information it

00:16:01,970 --> 00:16:06,260
can be harvested but maybe it's not as

00:16:04,490 --> 00:16:09,880
critical as if you were hitting the

00:16:06,260 --> 00:16:12,140
website server itself that's being said

00:16:09,880 --> 00:16:13,670
this is the kind of things that could

00:16:12,140 --> 00:16:16,120
have been stolen and in fact they were

00:16:13,670 --> 00:16:19,250
proof of concepts done but they were so

00:16:16,120 --> 00:16:23,630
if you get the private ski of an SSL

00:16:19,250 --> 00:16:25,570
certificate you can decrypt every bit of

00:16:23,630 --> 00:16:28,550
information that has been sent across

00:16:25,570 --> 00:16:30,650
well you can record so this is this

00:16:28,550 --> 00:16:31,970
worst part you can record a transaction

00:16:30,650 --> 00:16:33,950
that you don't know how to crack that

00:16:31,970 --> 00:16:35,480
you can keep the bites from it and then

00:16:33,950 --> 00:16:38,630
three months later let's say you crack

00:16:35,480 --> 00:16:39,980
the private key for whatever source you

00:16:38,630 --> 00:16:42,350
can then go and use the private key

00:16:39,980 --> 00:16:44,690
start lubing of the transaction and

00:16:42,350 --> 00:16:47,090
replay the entire thing so your

00:16:44,690 --> 00:16:48,880
communications for the past in years

00:16:47,090 --> 00:16:51,710
that private key was active are

00:16:48,880 --> 00:16:53,930
vulnerable so it's not just a moment in

00:16:51,710 --> 00:16:55,370
time it's if someone is recording

00:16:53,930 --> 00:16:56,240
everything and if you're under

00:16:55,370 --> 00:16:57,050
surveillance they're just going to

00:16:56,240 --> 00:17:01,279
record

00:16:57,050 --> 00:17:02,959
as a matter of sort well they can also

00:17:01,279 --> 00:17:06,500
use that private key to create a

00:17:02,959 --> 00:17:10,309
duplicate ssl certificate which matches

00:17:06,500 --> 00:17:12,230
everything it is effect an exact copy of

00:17:10,309 --> 00:17:13,939
the ssl certificate that's and in

00:17:12,230 --> 00:17:15,980
production and then you can do

00:17:13,939 --> 00:17:18,260
man-in-the-middle attacks and no one

00:17:15,980 --> 00:17:20,209
will ever know that they were attacked

00:17:18,260 --> 00:17:22,189
because the ssl certificate is an exact

00:17:20,209 --> 00:17:26,030
match you won't know it's one of the

00:17:22,189 --> 00:17:28,100
reasons why this bug is so scared let's

00:17:26,030 --> 00:17:29,990
talk about who was hacked one of the

00:17:28,100 --> 00:17:31,910
earliest announcements was about yahoo

00:17:29,990 --> 00:17:35,660
mail services and they've been in the

00:17:31,910 --> 00:17:37,640
news before they've been caught leaking

00:17:35,660 --> 00:17:39,380
users and passwords in cookie data

00:17:37,640 --> 00:17:42,410
they've been caught being sloppy with

00:17:39,380 --> 00:17:44,990
credentials and not following modern

00:17:42,410 --> 00:17:48,140
cryptographic methods of salting and

00:17:44,990 --> 00:17:49,520
hashing and yada yada yada so it's one

00:17:48,140 --> 00:17:52,250
of the first things that these security

00:17:49,520 --> 00:17:54,320
researchers targeted and sure enough it

00:17:52,250 --> 00:17:55,700
wasn't too hard for them to pull they

00:17:54,320 --> 00:17:58,070
pulled hundreds of usernames and

00:17:55,700 --> 00:18:01,220
passwords out of ram of the server

00:17:58,070 --> 00:18:02,090
before it turned it off again we're just

00:18:01,220 --> 00:18:03,950
trying to prove it I didn't actually

00:18:02,090 --> 00:18:05,950
want to get into those accounts they

00:18:03,950 --> 00:18:08,570
needed to prove with the code work in

00:18:05,950 --> 00:18:10,280
Canada equivalent to the IRS was

00:18:08,570 --> 00:18:15,440
attacked this was an actual malicious

00:18:10,280 --> 00:18:17,780
attack some genius was able to grab

00:18:15,440 --> 00:18:18,980
enough ID information for nine hundred

00:18:17,780 --> 00:18:20,270
different citizens and then could use

00:18:18,980 --> 00:18:23,090
that to login and download their

00:18:20,270 --> 00:18:25,160
inclination and then you can use that to

00:18:23,090 --> 00:18:27,530
attack their bank accounts and we clean

00:18:25,160 --> 00:18:29,419
those out thankfully he wasn't very good

00:18:27,530 --> 00:18:31,610
at covering his tracks he was caught

00:18:29,419 --> 00:18:35,210
he's currently being prosecuted for some

00:18:31,610 --> 00:18:37,910
ridiculous number of crimes against

00:18:35,210 --> 00:18:39,380
computer security and then we had

00:18:37,910 --> 00:18:41,300
cloudflare who didn't actually believe

00:18:39,380 --> 00:18:44,090
that heartbleed was a really big thing

00:18:41,300 --> 00:18:46,580
so they posted a challenge it said okay

00:18:44,090 --> 00:18:49,040
fine here you go here's a server go at

00:18:46,580 --> 00:18:51,580
it as hard as you want and try and crack

00:18:49,040 --> 00:18:55,100
people it only took them nine hours

00:18:51,580 --> 00:18:58,790
which that seems like a long time but

00:18:55,100 --> 00:19:00,320
when you're dealing with 202 2048 good

00:18:58,790 --> 00:19:02,900
encrypted communications and you can

00:19:00,320 --> 00:19:05,690
crack it nine hours that's that's a holy

00:19:02,900 --> 00:19:07,340
grail later so not only did this guy

00:19:05,690 --> 00:19:08,360
crack it he was able to do what we

00:19:07,340 --> 00:19:10,490
talked about in the lab

00:19:08,360 --> 00:19:12,170
slide he crafted a duplicate ssl

00:19:10,490 --> 00:19:14,900
certificate and then he used that to

00:19:12,170 --> 00:19:16,610
encrypt a payload message saying this is

00:19:14,900 --> 00:19:19,400
my name and I have cracked and patio

00:19:16,610 --> 00:19:20,770
cracked the ssl certificate and then he

00:19:19,400 --> 00:19:22,640
gave that information to cloud player

00:19:20,770 --> 00:19:24,530
once they figured out where they had

00:19:22,640 --> 00:19:26,660
done what he'd done they immediately

00:19:24,530 --> 00:19:29,929
canceled all of their ssl certificates

00:19:26,660 --> 00:19:33,710
and reissued them again so this is real

00:19:29,929 --> 00:19:35,299
it was used it probably still is being

00:19:33,710 --> 00:19:36,620
used against those servers which are

00:19:35,299 --> 00:19:39,140
still vulnerable and yes they're out

00:19:36,620 --> 00:19:41,870
there in fact there was a study done

00:19:39,140 --> 00:19:43,669
about a month ago showing that the

00:19:41,870 --> 00:19:45,410
number of vulnerable servers to part

00:19:43,669 --> 00:19:47,750
fleet has gone up since the announcement

00:19:45,410 --> 00:19:50,750
because people were erroneously updating

00:19:47,750 --> 00:19:53,809
their copies of openssl to the hacked

00:19:50,750 --> 00:19:55,610
version so it got a little bit worse now

00:19:53,809 --> 00:19:57,950
I understand that that is getting better

00:19:55,610 --> 00:20:02,020
over time because this bug is so

00:19:57,950 --> 00:20:05,059
impactful server admins that are running

00:20:02,020 --> 00:20:10,190
open servers are quietly getting emails

00:20:05,059 --> 00:20:12,049
saying hey you got to fix this what

00:20:10,190 --> 00:20:14,419
happened afterwards immediately after

00:20:12,049 --> 00:20:16,280
the bug was announced all the

00:20:14,419 --> 00:20:18,470
distributions posted an updated package

00:20:16,280 --> 00:20:20,540
for openssl they didn't have time to go

00:20:18,470 --> 00:20:23,120
diving in SSL sorts as you saw just

00:20:20,540 --> 00:20:24,770
snippets of it it's quite dense you

00:20:23,120 --> 00:20:27,410
pretty much need a master's degree in

00:20:24,770 --> 00:20:29,720
Austin in order to understand it so what

00:20:27,410 --> 00:20:31,250
they did I did something far simpler at

00:20:29,720 --> 00:20:32,900
the beginning of the snippet let's see

00:20:31,250 --> 00:20:39,380
if I can go back to that you might have

00:20:32,900 --> 00:20:42,140
seen right here at the very top there's

00:20:39,380 --> 00:20:43,640
a little define no heartbeat so they

00:20:42,140 --> 00:20:46,429
took the easy route and I said climb

00:20:43,640 --> 00:20:48,220
will hit that flag will recompile it

00:20:46,429 --> 00:20:50,299
which takes all the heartbeat code out

00:20:48,220 --> 00:20:51,679
yes we know it's a part of the protocol

00:20:50,299 --> 00:20:53,720
yes we know it's useful and it's being

00:20:51,679 --> 00:20:55,700
used for things but it's vulnerable we

00:20:53,720 --> 00:20:57,110
can have that in it so the first thing

00:20:55,700 --> 00:20:59,799
they did was to take the heartbeat

00:20:57,110 --> 00:20:59,799
functionality up

00:21:04,680 --> 00:21:10,630
organizations begin to revoke their ssl

00:21:06,970 --> 00:21:12,490
certificates this is really difficult if

00:21:10,630 --> 00:21:14,680
you played with or issued ssl

00:21:12,490 --> 00:21:16,300
certificates it's annoying to get the

00:21:14,680 --> 00:21:17,950
vendors to play ball with you and the

00:21:16,300 --> 00:21:20,800
vineyards don't want to do this because

00:21:17,950 --> 00:21:22,480
they have 50,000 clients which all want

00:21:20,800 --> 00:21:24,550
to revoke and reissue their certificates

00:21:22,480 --> 00:21:25,930
each one of those revocations and each

00:21:24,550 --> 00:21:29,020
one of those certificates cost to them

00:21:25,930 --> 00:21:31,240
entropy time manpower they don't want to

00:21:29,020 --> 00:21:32,350
do it the guys that have the

00:21:31,240 --> 00:21:34,000
certificates don't want to do it because

00:21:32,350 --> 00:21:35,560
they may have 15 certificates across

00:21:34,000 --> 00:21:37,300
their infrastructure they have to go and

00:21:35,560 --> 00:21:40,090
cancel each one make sure that they're

00:21:37,300 --> 00:21:42,280
on the revocation list yada yada yada it

00:21:40,090 --> 00:21:44,250
was a really enormous pain some

00:21:42,280 --> 00:21:46,510
organizations still haven't done it I

00:21:44,250 --> 00:21:50,980
haven't done it online I'm too small

00:21:46,510 --> 00:21:52,990
time to care but openssl patch the

00:21:50,980 --> 00:21:56,740
vulnerability in a later version of the

00:21:52,990 --> 00:21:59,740
software will look at that patch in a

00:21:56,740 --> 00:22:02,590
second and then once that patch was

00:21:59,740 --> 00:22:04,030
published the distributions and whatever

00:22:02,590 --> 00:22:06,550
version they're distributing in that

00:22:04,030 --> 00:22:08,910
particular instance backported the fix

00:22:06,550 --> 00:22:11,410
and then they recompile it again

00:22:08,910 --> 00:22:15,610
re-enabling heartbeats so now you have

00:22:11,410 --> 00:22:17,860
the fixed heartbeat code here oops that

00:22:15,610 --> 00:22:19,900
one more important one this was me the

00:22:17,860 --> 00:22:22,180
data heart delete landed was a very very

00:22:19,900 --> 00:22:25,570
long day and afterwards about 10pm when

00:22:22,180 --> 00:22:28,450
I finally was cooling off yeah I don't

00:22:25,570 --> 00:22:31,090
really remember that night it was a long

00:22:28,450 --> 00:22:34,080
night the long day here's the actual

00:22:31,090 --> 00:22:36,130
patch and co they added to bounce checks

00:22:34,080 --> 00:22:39,760
there's one wasn't good enough to want

00:22:36,130 --> 00:22:41,170
to make sure this is doubly secure so

00:22:39,760 --> 00:22:44,710
the first one makes sure that it's not

00:22:41,170 --> 00:22:46,480
flat out lying and it's too small the

00:22:44,710 --> 00:22:47,920
cycle and make sure it's not too big the

00:22:46,480 --> 00:22:50,410
second one is the one I was actually the

00:22:47,920 --> 00:22:52,630
vulnerability everybody was using both

00:22:50,410 --> 00:22:55,660
of these down checks work together they

00:22:52,630 --> 00:22:57,640
notice at the bottom here return 0 and

00:22:55,660 --> 00:22:58,870
invalid heartbeat request is now there

00:22:57,640 --> 00:23:01,090
silently thrown away as if it never

00:22:58,870 --> 00:23:05,920
happened which is what should have been

00:23:01,090 --> 00:23:07,540
what happened to begin with so let's

00:23:05,920 --> 00:23:09,670
talk about if you still have a system

00:23:07,540 --> 00:23:10,720
that isn't patched you don't have to

00:23:09,670 --> 00:23:11,570
raise your hand I'm not asking you out

00:23:10,720 --> 00:23:16,049
your cell

00:23:11,570 --> 00:23:17,490
you know who you are here's how you go

00:23:16,049 --> 00:23:18,390
about fixing it and then there are some

00:23:17,490 --> 00:23:20,070
people who think they're patching

00:23:18,390 --> 00:23:21,179
they're not so all these instructions go

00:23:20,070 --> 00:23:25,140
ahead and pay attention even if you

00:23:21,179 --> 00:23:26,460
think your fix make sure you're up with

00:23:25,140 --> 00:23:28,230
the date on the latest version of open

00:23:26,460 --> 00:23:30,690
SSL or if you compile your own code

00:23:28,230 --> 00:23:35,340
you're on at least that version 10 dot

00:23:30,690 --> 00:23:37,980
1g and then after you have done that you

00:23:35,340 --> 00:23:42,270
have to restart your web service this if

00:23:37,980 --> 00:23:43,860
you don't then your web server is still

00:23:42,270 --> 00:23:45,840
the binary for that is still and ran

00:23:43,860 --> 00:23:49,320
it's the limit against the old version

00:23:45,840 --> 00:23:51,390
of openssl which is in RAM and so you

00:23:49,320 --> 00:23:53,640
think you have patched your server ahaha

00:23:51,390 --> 00:23:55,350
we have patched it and you are one of

00:23:53,640 --> 00:23:57,000
the guys like me who value up time you

00:23:55,350 --> 00:23:58,980
haven't restarted your server in six

00:23:57,000 --> 00:24:01,140
months it goes for another four months

00:23:58,980 --> 00:24:03,630
after you patched your server those

00:24:01,140 --> 00:24:04,950
entire four months your server is still

00:24:03,630 --> 00:24:08,280
vulnerable because you haven't restarted

00:24:04,950 --> 00:24:11,100
your web server so when you stop and

00:24:08,280 --> 00:24:12,809
restart your web server when it starts

00:24:11,100 --> 00:24:14,429
up again it goes and finds the new

00:24:12,809 --> 00:24:16,710
version of open SSL and it brings that

00:24:14,429 --> 00:24:18,390
into rant and it links that against it

00:24:16,710 --> 00:24:21,179
get links against that copy and not the

00:24:18,390 --> 00:24:24,720
faulty culture so this also raises the

00:24:21,179 --> 00:24:28,380
question of there we go that's what I

00:24:24,720 --> 00:24:30,179
just discussed there any other tools

00:24:28,380 --> 00:24:33,270
that are also linked against openssl you

00:24:30,179 --> 00:24:35,429
need to apply the same procedure and you

00:24:33,270 --> 00:24:38,940
can do that using this tool called lsof

00:24:35,429 --> 00:24:40,710
list open files now with no arguments

00:24:38,940 --> 00:24:42,500
that literally list every single open

00:24:40,710 --> 00:24:45,330
file on your linux system you have which

00:24:42,500 --> 00:24:47,909
kind of a lot to wade through so use

00:24:45,330 --> 00:24:50,070
grep and trim it down to only instances

00:24:47,909 --> 00:24:52,590
of this library you can use this simple

00:24:50,070 --> 00:24:54,299
little code to make sure that when

00:24:52,590 --> 00:24:56,970
you're doing this restart step you catch

00:24:54,299 --> 00:24:59,309
everything you restart every single

00:24:56,970 --> 00:25:02,250
service that was linked against openssl

00:24:59,309 --> 00:25:06,720
then only then will you be completely

00:25:02,250 --> 00:25:08,370
protected from Hartford and it's one of

00:25:06,720 --> 00:25:10,350
the things that I didn't cover I meant

00:25:08,370 --> 00:25:11,640
to it the very beginning but it's just

00:25:10,350 --> 00:25:14,730
pointed out to me why did they call it

00:25:11,640 --> 00:25:16,640
the heartbleed bug well it's the

00:25:14,730 --> 00:25:20,210
heartbeat function and it's bleeding Ram

00:25:16,640 --> 00:25:24,460
like any number of analogies of it

00:25:20,210 --> 00:25:27,860
that I needed something sexy gravitation

00:25:24,460 --> 00:25:29,300
it's a really unfortunate that doesn't

00:25:27,860 --> 00:25:31,030
matter how big the bug is it doesn't

00:25:29,300 --> 00:25:33,440
matter how big the vulnerability is

00:25:31,030 --> 00:25:35,960
people won't be goaded to move or do

00:25:33,440 --> 00:25:38,300
anything unless it gets wide media

00:25:35,960 --> 00:25:40,580
attention and so they actually spent the

00:25:38,300 --> 00:25:42,380
time between April first when the bug

00:25:40,580 --> 00:25:44,500
was first recorded in april eighth when

00:25:42,380 --> 00:25:47,240
it was actually reported to see meee

00:25:44,500 --> 00:25:49,550
building a website yeah i think it's

00:25:47,240 --> 00:25:53,120
heartbleed that CH or heartbleed com

00:25:49,550 --> 00:25:55,430
they even have decals they have images

00:25:53,120 --> 00:25:58,280
they have all sorts of content this took

00:25:55,430 --> 00:26:00,230
time to prepare so for seven days they

00:25:58,280 --> 00:26:01,580
spent their time making it nice and sexy

00:26:00,230 --> 00:26:02,960
so if you picked up by all the media

00:26:01,580 --> 00:26:05,420
because that's how important it was and

00:26:02,960 --> 00:26:07,520
we could debate the merits of them

00:26:05,420 --> 00:26:10,880
waiting or not considering the bug has

00:26:07,520 --> 00:26:12,410
been out in the wild for two years to

00:26:10,880 --> 00:26:14,330
think another seven days may or may not

00:26:12,410 --> 00:26:18,170
have been a huge deal again we can

00:26:14,330 --> 00:26:20,300
debate that way that comes to the end of

00:26:18,170 --> 00:26:22,270
my presentation here if you have any

00:26:20,300 --> 00:26:24,200
other questions or comments about this

00:26:22,270 --> 00:26:27,730
particular bug I'll be happy to

00:26:24,200 --> 00:26:27,730
entertain them yes sir

00:26:43,100 --> 00:26:50,610
I don't actually know the particulars of

00:26:47,940 --> 00:26:52,320
that little interchange there may have

00:26:50,610 --> 00:26:53,550
been something there that they knew

00:26:52,320 --> 00:26:56,550
about the co and they weren't able to

00:26:53,550 --> 00:26:59,940
get anybody to fix it it's oh I'm sorry

00:26:56,550 --> 00:27:03,060
the question was asking about the bsd

00:26:59,940 --> 00:27:06,090
project wanting to fort openssl into a

00:27:03,060 --> 00:27:08,340
new project called libre SSL and he

00:27:06,090 --> 00:27:11,880
asked for any comments about that

00:27:08,340 --> 00:27:14,700
operation and the timing is suspicious

00:27:11,880 --> 00:27:17,850
on that I don't actually know the

00:27:14,700 --> 00:27:21,260
transaction particulars it does seem

00:27:17,850 --> 00:27:21,260
awfully suspicious to me too

00:27:28,240 --> 00:27:34,059
and it could be that they were tired of

00:27:31,690 --> 00:27:40,660
bugs coming from openssl we can do

00:27:34,059 --> 00:27:42,520
better maybe there's always bugs being

00:27:40,660 --> 00:27:44,620
tricked all the countries usually

00:27:42,520 --> 00:27:48,240
they're not as bad as just a second sir

00:27:44,620 --> 00:27:48,240
I'll get to you yes sir in the back

00:28:09,910 --> 00:28:13,900
the question was for embedded devices

00:28:11,920 --> 00:28:15,940
that are using the openssl library what

00:28:13,900 --> 00:28:19,630
is the impact given that it's difficult

00:28:15,940 --> 00:28:21,760
to update them in place a lot of those

00:28:19,630 --> 00:28:24,490
devices which shipped a vulnerable copy

00:28:21,760 --> 00:28:26,410
of openssl you may just have to write

00:28:24,490 --> 00:28:29,920
them off a lot of their owners may not

00:28:26,410 --> 00:28:31,030
know that their motive rollable they may

00:28:29,920 --> 00:28:32,380
not know the exact software that's

00:28:31,030 --> 00:28:35,350
running on their devices a lot of times

00:28:32,380 --> 00:28:37,060
that's hidden from them so that entire

00:28:35,350 --> 00:28:40,300
class of electronics the last two years

00:28:37,060 --> 00:28:42,520
that may or may not be using the broken

00:28:40,300 --> 00:28:46,480
version of lube SSO you almost have to

00:28:42,520 --> 00:28:48,490
write them off as a responsible business

00:28:46,480 --> 00:28:50,890
owner I might try and reach out to my

00:28:48,490 --> 00:28:53,440
customers and tell them hey we had this

00:28:50,890 --> 00:28:55,690
enormous bug happen your device may be

00:28:53,440 --> 00:28:57,670
vulnerable here's what you can do to try

00:28:55,690 --> 00:28:59,950
and patch it as a responsible business

00:28:57,670 --> 00:29:02,350
owner I may not be able to afford that I

00:28:59,950 --> 00:29:04,390
don't know I'm not in that position that

00:29:02,350 --> 00:29:05,830
is a very good question though and it's

00:29:04,390 --> 00:29:07,240
really unfortunate of those devices will

00:29:05,830 --> 00:29:10,540
have to be looked about looked at with

00:29:07,240 --> 00:29:12,900
suspicion from here on out yes sir your

00:29:10,540 --> 00:29:12,900
question

00:29:56,440 --> 00:30:01,740
trying to solve

00:29:58,630 --> 00:30:01,740
I think this was a way

00:30:03,590 --> 00:30:11,790
yes sir his question and statement was

00:30:07,440 --> 00:30:14,790
about how much this this software is

00:30:11,790 --> 00:30:16,280
used everywhere by tons and tons of

00:30:14,790 --> 00:30:18,150
companies individuals organizations

00:30:16,280 --> 00:30:21,660
people that may or may not know that

00:30:18,150 --> 00:30:24,180
they're using it and it has been in the

00:30:21,660 --> 00:30:26,640
past run by fix four guys total it's

00:30:24,180 --> 00:30:29,340
done almost all the commits and it's

00:30:26,640 --> 00:30:32,040
been a little wayward it's the

00:30:29,340 --> 00:30:34,140
development is slow now cryptography is

00:30:32,040 --> 00:30:36,210
not really advancing we're advancing our

00:30:34,140 --> 00:30:37,590
ciphers we're advancing a better way to

00:30:36,210 --> 00:30:39,240
create a random number we're not really

00:30:37,590 --> 00:30:41,640
advancing how we're doing key exchange

00:30:39,240 --> 00:30:43,290
or how we're doing hand ssl handshaking

00:30:41,640 --> 00:30:45,690
so that code doesn't really need to

00:30:43,290 --> 00:30:48,720
improve much but still it takes forever

00:30:45,690 --> 00:30:51,840
to get a patch in the openssl project

00:30:48,720 --> 00:30:54,960
this statement was that this might

00:30:51,840 --> 00:30:56,400
contribute to some of the worry of her

00:30:54,960 --> 00:31:00,650
companies that they're so dependent upon

00:30:56,400 --> 00:31:03,180
this one piece what has been done a

00:31:00,650 --> 00:31:05,580
consortium has been founded that will

00:31:03,180 --> 00:31:09,120
now lead the openssl project it's

00:31:05,580 --> 00:31:10,650
getting actual funding I can't rember

00:31:09,120 --> 00:31:12,540
the companies that were involved several

00:31:10,650 --> 00:31:16,490
big-name companies have all put up a

00:31:12,540 --> 00:31:16,490
couple million dollars apiece to sound

00:31:17,990 --> 00:31:24,630
the news splashed about three weeks ago

00:31:20,760 --> 00:31:27,030
I think that this was happening so as a

00:31:24,630 --> 00:31:29,930
result of this bug one of the good

00:31:27,030 --> 00:31:33,210
improvements is to the process of the

00:31:29,930 --> 00:31:36,840
development of open SSL itself now will

00:31:33,210 --> 00:31:38,910
be more independently audited in fact

00:31:36,840 --> 00:31:40,290
part of the fundraising for the

00:31:38,910 --> 00:31:42,900
consortium was so that they could pay

00:31:40,290 --> 00:31:45,030
for an organization to go through the

00:31:42,900 --> 00:31:51,380
code line by line and find any other

00:31:45,030 --> 00:31:51,380
bugs like what was in heartbeat yes sir

00:31:52,279 --> 00:31:59,179
question was is a similar thing being

00:31:54,720 --> 00:32:01,769
done for openssh I would imagine that

00:31:59,179 --> 00:32:03,259
companies are starting to look at all

00:32:01,769 --> 00:32:06,299
the projects around them and

00:32:03,259 --> 00:32:08,119
reevaluating their risk and openssh is

00:32:06,299 --> 00:32:10,649
another one that's high on the list

00:32:08,119 --> 00:32:12,029
saying this could use some financial

00:32:10,649 --> 00:32:14,460
support to make sure that it's done

00:32:12,029 --> 00:32:17,399
right we depend upon this for everything

00:32:14,460 --> 00:32:21,799
smart companies with deep pockets that

00:32:17,399 --> 00:32:21,799
would be a wise thing for them to do sir

00:32:29,629 --> 00:32:34,470
not this particular bug we will discuss

00:32:32,700 --> 00:32:36,539
in my presentations tomorrow we'll

00:32:34,470 --> 00:32:38,730
discuss certificate revocation lists

00:32:36,539 --> 00:32:40,679
that was a great lead-in thank you and I

00:32:38,730 --> 00:32:44,090
totally didn't pay him off that was

00:32:40,679 --> 00:32:44,090
organic in the back

00:33:00,120 --> 00:33:02,810
mm-hmm

00:33:23,410 --> 00:33:28,870
now the question was discussing how the

00:33:26,020 --> 00:33:31,270
bug works both ways the same heartbleed

00:33:28,870 --> 00:33:34,780
bug is visible both in servers and in

00:33:31,270 --> 00:33:37,300
client libraries and so the question was

00:33:34,780 --> 00:33:39,370
about what to do about a server a

00:33:37,300 --> 00:33:42,430
malicious server using a heartbeat bug

00:33:39,370 --> 00:33:43,660
on a client once as ssl communication

00:33:42,430 --> 00:33:45,640
channels already open there's nothing to

00:33:43,660 --> 00:33:47,350
stop the server from sending ten

00:33:45,640 --> 00:33:50,470
thousand ten million heartbeats you have

00:33:47,350 --> 00:33:54,610
computation power but it could send

00:33:50,470 --> 00:33:56,470
10,000 heartbeats if it once and I have

00:33:54,610 --> 00:34:00,040
not heard nearly as much press about the

00:33:56,470 --> 00:34:02,380
client side in general because open SSL

00:34:00,040 --> 00:34:05,230
or ssl this treated as a system layer

00:34:02,380 --> 00:34:07,510
thing and I can imagine Microsoft and

00:34:05,230 --> 00:34:09,010
the distributions well the linux

00:34:07,510 --> 00:34:11,470
distributions when you patch you live

00:34:09,010 --> 00:34:12,850
ssl that you know it works for both

00:34:11,470 --> 00:34:16,780
server and client they're using the same

00:34:12,850 --> 00:34:18,730
library OS 10 apple probably had a field

00:34:16,780 --> 00:34:22,650
day all of your little I devices all of

00:34:18,730 --> 00:34:22,650
your cell phones anything like that sir

00:34:26,070 --> 00:34:33,280
okay great okay so in an explorer and

00:34:31,720 --> 00:34:40,020
Apple products no longer use openness

00:34:33,280 --> 00:34:40,020
itself okay so

00:34:45,960 --> 00:34:51,090
hmm

00:34:48,220 --> 00:34:51,090
actually

00:34:53,950 --> 00:34:58,660
okay all right that was a whole lot of

00:34:57,280 --> 00:35:01,990
interchange there I apologize for the

00:34:58,660 --> 00:35:03,430
viewers later on basically confirming

00:35:01,990 --> 00:35:06,040
various devices are or are not

00:35:03,430 --> 00:35:08,140
vulnerable we concluded that a chrome

00:35:06,040 --> 00:35:10,210
doesn't use the openssl library except

00:35:08,140 --> 00:35:13,089
on Linux so any chrome users on non

00:35:10,210 --> 00:35:15,339
Linux platforms are safe android devices

00:35:13,089 --> 00:35:19,740
however cannot be updated and they are

00:35:15,339 --> 00:35:19,740
using openssl that what you're saying

00:35:23,460 --> 00:35:43,510
okay so then right okay so the only

00:35:40,690 --> 00:35:45,040
version of Android that's vulnerable 411

00:35:43,510 --> 00:35:46,210
if you have any of those devices then

00:35:45,040 --> 00:35:48,579
you're going to need to go update them

00:35:46,210 --> 00:35:50,440
but for dot one dot two should be

00:35:48,579 --> 00:35:56,940
delivered over the air if it hasn't

00:35:50,440 --> 00:35:56,940
already probably has in the back

00:35:59,690 --> 00:36:01,690
Oh

00:36:35,670 --> 00:36:40,380
that's correct the question was you

00:36:38,010 --> 00:36:41,880
wanted to confirm that we've discussed

00:36:40,380 --> 00:36:43,710
here that there was a client attacking a

00:36:41,880 --> 00:36:46,890
server but the same vector exists when a

00:36:43,710 --> 00:36:49,200
server a tax client that's exactly what

00:36:46,890 --> 00:36:50,490
we're saying I didn't cover that here

00:36:49,200 --> 00:36:52,680
that was a very good point I thank you

00:36:50,490 --> 00:36:54,660
all guys for bringing it up it's that's

00:36:52,680 --> 00:36:56,490
how big this bug was that's how

00:36:54,660 --> 00:37:04,619
important it was and that's how many

00:36:56,490 --> 00:37:11,540
people were affected by sir mm-hmm mail

00:37:04,619 --> 00:37:13,770
servers well in the process of hitting

00:37:11,540 --> 00:37:17,609
in the process of you could run into the

00:37:13,770 --> 00:37:20,460
mail server ram you could you could if

00:37:17,609 --> 00:37:22,380
you patched just your web server somehow

00:37:20,460 --> 00:37:24,780
let's say you compiled against different

00:37:22,380 --> 00:37:26,069
versions of openssl your mail server

00:37:24,780 --> 00:37:28,770
could still be vulnerable that's why

00:37:26,069 --> 00:37:30,240
that last step there asked you guys to

00:37:28,770 --> 00:37:32,010
check through your open files and make

00:37:30,240 --> 00:37:33,990
sure that anything that has live as a

00:37:32,010 --> 00:37:35,460
cell open and it may not be the best to

00:37:33,990 --> 00:37:39,569
sell on your distribution that's what it

00:37:35,460 --> 00:37:41,940
is on my head think maybe is I don't

00:37:39,569 --> 00:37:44,490
know what it's called on you bunch it

00:37:41,940 --> 00:37:46,559
with the packages the actual file you go

00:37:44,490 --> 00:37:49,859
and find the open files and make sure

00:37:46,559 --> 00:37:54,530
that everything is good do we have any

00:37:49,859 --> 00:37:56,579
other questions comments concerns

00:37:54,530 --> 00:38:00,690
anybody feel like getting up and dancing

00:37:56,579 --> 00:38:02,670
cuz it's the end of the day let's let's

00:38:00,690 --> 00:38:03,990
avoid the rotten tomatoes okay let's all

00:38:02,670 --> 00:38:05,160
get up and dance cuz we are done with

00:38:03,990 --> 00:38:07,369
the presentation thank you guys for

00:38:05,160 --> 00:38:07,369
coming

00:38:16,320 --> 00:38:18,380
you

00:38:45,130 --> 00:38:49,400
your customers rely on your website or

00:38:47,900 --> 00:38:51,769
application if it's slower

00:38:49,400 --> 00:38:54,740
non-responsive it infuriates your users

00:38:51,769 --> 00:38:56,539
and costs you money keeping your

00:38:54,740 --> 00:39:00,049
business critical systems humming along

00:38:56,539 --> 00:39:02,869
requires insight into what they're doing

00:39:00,049 --> 00:39:04,880
your system metrics tell stories stories

00:39:02,869 --> 00:39:07,369
that can reveal performance bottlenecks

00:39:04,880 --> 00:39:09,289
resource limitations and other problems

00:39:07,369 --> 00:39:11,209
but how do you keep an eye on all of

00:39:09,289 --> 00:39:13,819
your systems performance metrics in

00:39:11,209 --> 00:39:16,670
real-time and record this data for later

00:39:13,819 --> 00:39:18,650
analysis enter longview the new way to

00:39:16,670 --> 00:39:20,660
see what's really going on under the

00:39:18,650 --> 00:39:22,789
hood the longview dashboard lets you

00:39:20,660 --> 00:39:24,799
visualize the status of all your systems

00:39:22,789 --> 00:39:27,529
providing you with a bird's-eye view of

00:39:24,799 --> 00:39:30,650
your entire fleet you can sort by cpu

00:39:27,529 --> 00:39:33,109
memory swap processes load and network

00:39:30,650 --> 00:39:35,689
usage click a specific system to access

00:39:33,109 --> 00:39:37,670
its individual dashboard then click and

00:39:35,689 --> 00:39:40,670
drag to zoom in on chokepoints and get

00:39:37,670 --> 00:39:42,679
more detail comprehensive network data

00:39:40,670 --> 00:39:45,380
including inbound and outbound traffic

00:39:42,679 --> 00:39:46,939
is available on the network tab and disk

00:39:45,380 --> 00:39:48,859
rights and free space on the disk

00:39:46,939 --> 00:39:51,709
stabbed while the process Explorer

00:39:48,859 --> 00:39:54,229
displays usage statistics for individual

00:39:51,709 --> 00:39:56,420
processes the system info tab shows

00:39:54,229 --> 00:39:58,640
listening services active connections

00:39:56,420 --> 00:40:00,799
and available updates adding long view

00:39:58,640 --> 00:40:02,479
to a system is easy just click the

00:40:00,799 --> 00:40:04,640
button copy the one line installation

00:40:02,479 --> 00:40:07,069
command then run the command on your

00:40:04,640 --> 00:40:08,779
linux system to complete the process the

00:40:07,069 --> 00:40:10,969
agent will begin collecting data and

00:40:08,779 --> 00:40:12,800
sending it to longview then the graphs

00:40:10,969 --> 00:40:15,350
start rolling

00:40:12,800 --> 00:40:17,750
use longview to gain visibility into

00:40:15,350 --> 00:40:21,460
your servers so when your website or app

00:40:17,750 --> 00:40:21,460

YouTube URL: https://www.youtube.com/watch?v=0l76gcLUxmo


