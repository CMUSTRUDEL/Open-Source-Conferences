Title: Jeff Propes - Push Button, Get Cluster with Salt Cloud & SaltStack Orchestration
Publication date: 2019-06-18
Playlist: 2019 SouthEast LinuxFest
Description: 
	SouthEast Linux Fest 2019
In this talk, we will walk through the steps to craft a VM provisioning pipeline using the SaltStack suite of automation tools. We'll see how Salt-Cloud eliminates the minutaie around VM creation and abstracts away the distinctions between various IaaS vendors, and we'll apply SaltStack's powerful orchestration mechanisms to craft entire clusters, all at the push of a single button.
Captions: 
	00:00:00,000 --> 00:00:04,259
I'm Jeff Probst I work with Texas

00:00:02,820 --> 00:00:05,910
consulting in fact I'm the president of

00:00:04,259 --> 00:00:08,130
the company and you might have heard

00:00:05,910 --> 00:00:13,490
about us from Friday night when we

00:00:08,130 --> 00:00:13,490
sponsored the beer share so thank you

00:00:13,610 --> 00:00:18,210
today we're gonna be talking about

00:00:15,500 --> 00:00:20,310
saltstack specifically a tool built into

00:00:18,210 --> 00:00:22,890
it called salt cloud which lets you

00:00:20,310 --> 00:00:25,289
provision VMs very very rapidly without

00:00:22,890 --> 00:00:27,570
thinking about it we have to go through

00:00:25,289 --> 00:00:29,369
a little bit of introduction about salt

00:00:27,570 --> 00:00:32,899
stack to make sure we're off to speed is

00:00:29,369 --> 00:00:35,640
anybody here not used salt stack before

00:00:32,899 --> 00:00:36,899
ok we have some all right it's we're

00:00:35,640 --> 00:00:39,930
gonna do a very high-level overview

00:00:36,899 --> 00:00:42,840
because salt sac itself is very big and

00:00:39,930 --> 00:00:44,190
we could spend three sessions just on

00:00:42,840 --> 00:00:49,079
salt stack and we're trying to get into

00:00:44,190 --> 00:00:51,719
the deeper stuff so we'll just start off

00:00:49,079 --> 00:00:53,250
with Who I am I have been involved in

00:00:51,719 --> 00:00:55,829
open source for I don't know 20 years

00:00:53,250 --> 00:00:57,570
now like a lot of you I got hooked on

00:00:55,829 --> 00:01:00,120
Linux way back long ago and couldn't

00:00:57,570 --> 00:01:01,379
stop playing with it and when I got the

00:01:00,120 --> 00:01:03,750
opportunity to do it professionally I

00:01:01,379 --> 00:01:06,840
said yes so I've been professionally

00:01:03,750 --> 00:01:09,119
Linux Singh for about 1213 years some

00:01:06,840 --> 00:01:11,310
around there like I said I am the

00:01:09,119 --> 00:01:12,840
president of off-axis consulting I am a

00:01:11,310 --> 00:01:14,640
longtime sysadmin

00:01:12,840 --> 00:01:16,950
more recently they've been calling us

00:01:14,640 --> 00:01:18,960
DevOps I don't know why now because

00:01:16,950 --> 00:01:20,970
forever if you were assistant min you

00:01:18,960 --> 00:01:23,490
kind of had to write scripts just to get

00:01:20,970 --> 00:01:25,049
your job done right so we put a label on

00:01:23,490 --> 00:01:26,820
it now and it's called DevOps and you're

00:01:25,049 --> 00:01:28,770
all familiar with it

00:01:26,820 --> 00:01:29,909
I'm not officially affiliated with

00:01:28,770 --> 00:01:31,290
saltstack I'm just a really big

00:01:29,909 --> 00:01:33,780
enthusiast I've been using it for years

00:01:31,290 --> 00:01:36,630
and I think it's an amazing tool or an

00:01:33,780 --> 00:01:38,040
ecosystem even so the little logo down

00:01:36,630 --> 00:01:40,229
here I actually stole it off of their

00:01:38,040 --> 00:01:41,640
website by steal I'm putting that in

00:01:40,229 --> 00:01:46,619
quotes because they actually allow you

00:01:41,640 --> 00:01:50,460
to do so so does your deployment process

00:01:46,619 --> 00:01:52,290
look anything and I like this mine has

00:01:50,460 --> 00:01:54,960
in several different companies and it's

00:01:52,290 --> 00:01:56,479
terrible so what we're going to do today

00:01:54,960 --> 00:01:58,740
is talk about how to untangle that

00:01:56,479 --> 00:02:00,390
mostly with orchestration and salt cloud

00:01:58,740 --> 00:02:03,030
we're gonna get it weird of this process

00:02:00,390 --> 00:02:04,409
entirely we don't need that we don't

00:02:03,030 --> 00:02:07,649
need the headache that goes along with

00:02:04,409 --> 00:02:08,580
it and there's probably 14 or 15

00:02:07,649 --> 00:02:09,810
different people involved in this

00:02:08,580 --> 00:02:11,039
process too we don't need any of them

00:02:09,810 --> 00:02:13,180
either we're gonna get rid of all of

00:02:11,039 --> 00:02:15,770
that right

00:02:13,180 --> 00:02:17,540
so since we have some people who haven't

00:02:15,770 --> 00:02:19,370
heard about something I'll you've heard

00:02:17,540 --> 00:02:20,960
about it but you don't know mostly about

00:02:19,370 --> 00:02:23,180
it so let's talk briefly about what it

00:02:20,960 --> 00:02:25,460
is it's one of the big four automation

00:02:23,180 --> 00:02:27,050
tools right up there with ansible puppet

00:02:25,460 --> 00:02:29,240
chef and there's others that are showing

00:02:27,050 --> 00:02:32,750
up on scene to like terraform is getting

00:02:29,240 --> 00:02:34,040
beard I still consider it those the big

00:02:32,750 --> 00:02:36,950
four that we've been talking about for

00:02:34,040 --> 00:02:39,500
years here it is written in Python and

00:02:36,950 --> 00:02:44,180
it uses 0nq messaging library which a

00:02:39,500 --> 00:02:45,320
lot of other tools do too it says it

00:02:44,180 --> 00:02:46,400
just makes everything very easy you

00:02:45,320 --> 00:02:47,750
don't ever have to think about how

00:02:46,400 --> 00:02:50,210
things are connected it just kind of

00:02:47,750 --> 00:02:52,640
works so it's a beautiful way to handle

00:02:50,210 --> 00:02:54,650
things it is based upon the master

00:02:52,640 --> 00:02:56,660
minion architecture like puppet and chef

00:02:54,650 --> 00:02:58,790
is unlike ansible

00:02:56,660 --> 00:03:00,760
and you have to run an agent on your

00:02:58,790 --> 00:03:04,040
minion for it to work

00:03:00,760 --> 00:03:06,520
it is extremely modular to a fault

00:03:04,040 --> 00:03:09,230
sometimes which lends itself to

00:03:06,520 --> 00:03:10,880
expansion and extension in wonderful

00:03:09,230 --> 00:03:12,590
ways that are extremely complicated and

00:03:10,880 --> 00:03:15,950
difficult to document some of which we

00:03:12,590 --> 00:03:17,720
might run into today and it is available

00:03:15,950 --> 00:03:19,790
for just about every major operating

00:03:17,720 --> 00:03:21,380
system including all flavors of Windows

00:03:19,790 --> 00:03:23,390
that I think are still in modern

00:03:21,380 --> 00:03:24,860
production you can run saltstack and

00:03:23,390 --> 00:03:27,830
operate a Windows machine using

00:03:24,860 --> 00:03:30,980
saltstack I've never tried it but I

00:03:27,830 --> 00:03:33,760
really try to avoid adjusting or messing

00:03:30,980 --> 00:03:35,870
with Windows wherever possible anyway so

00:03:33,760 --> 00:03:37,910
so what does saltstack

00:03:35,870 --> 00:03:39,890
do you're defining your infrastructure

00:03:37,910 --> 00:03:42,580
and processes with code just like in

00:03:39,890 --> 00:03:45,290
other systems you're declaring States

00:03:42,580 --> 00:03:47,540
you're declaring what thing what do you

00:03:45,290 --> 00:03:50,240
think should be in so a server should

00:03:47,540 --> 00:03:51,650
have Ingenix installed a server should

00:03:50,240 --> 00:03:54,530
have this configuration file in that

00:03:51,650 --> 00:03:56,120
spot owned by this user with these

00:03:54,530 --> 00:03:58,880
permissions you just declare these

00:03:56,120 --> 00:04:00,860
things and you create a procedure by

00:03:58,880 --> 00:04:02,420
chaining these declarations together and

00:04:00,860 --> 00:04:04,550
you can even declare the order you need

00:04:02,420 --> 00:04:07,130
them to be in like it doesn't make sense

00:04:04,550 --> 00:04:09,110
to create an engine X configuration file

00:04:07,130 --> 00:04:10,580
if you don't have nginx installed so

00:04:09,110 --> 00:04:12,709
naturally you want to install engine X

00:04:10,580 --> 00:04:16,730
first and then modify the config that's

00:04:12,709 --> 00:04:18,680
already there so you're running the salt

00:04:16,730 --> 00:04:20,270
come in on the salt master there are

00:04:18,680 --> 00:04:22,820
ways to do an API

00:04:20,270 --> 00:04:23,900
there are antipas our think is something

00:04:22,820 --> 00:04:25,610
people have used a lot there are

00:04:23,900 --> 00:04:26,670
equivalents in salt I haven't used it I

00:04:25,610 --> 00:04:28,110
just always stay in the

00:04:26,670 --> 00:04:31,680
and that's what we're going to do today

00:04:28,110 --> 00:04:33,180
we're going to entirely command line and

00:04:31,680 --> 00:04:35,070
when you run yourself command whatever

00:04:33,180 --> 00:04:39,030
states you've told it to do it makes it

00:04:35,070 --> 00:04:42,570
so we'll look at that in a second so

00:04:39,030 --> 00:04:44,160
let's talk about salt cloud it is a

00:04:42,570 --> 00:04:46,380
separate tool it is technically included

00:04:44,160 --> 00:04:48,150
in the salt stack software but it's a

00:04:46,380 --> 00:04:51,510
separate invocation it has its own

00:04:48,150 --> 00:04:53,940
configuration files it does provision

00:04:51,510 --> 00:04:56,250
VMs on public and private clouds I mean

00:04:53,940 --> 00:04:57,960
any provider you can think of they

00:04:56,250 --> 00:05:01,620
probably have support for it right there

00:04:57,960 --> 00:05:03,150
in salt stack official and there's of

00:05:01,620 --> 00:05:06,060
course because we said it was extendable

00:05:03,150 --> 00:05:08,370
if you have some infrastructure as a

00:05:06,060 --> 00:05:10,320
service vendor that isn't supported well

00:05:08,370 --> 00:05:12,120
you can go copy something from another

00:05:10,320 --> 00:05:14,630
vendor and kind of modify it so it works

00:05:12,120 --> 00:05:17,280
this also means you can do things like

00:05:14,630 --> 00:05:19,290
practice running your salt stack States

00:05:17,280 --> 00:05:21,270
on a local VirtualBox it doesn't matter

00:05:19,290 --> 00:05:22,620
what the vendor is it doesn't need to be

00:05:21,270 --> 00:05:24,690
out of the internet it could be local I

00:05:22,620 --> 00:05:27,330
did a lot of my earthly work with salt

00:05:24,690 --> 00:05:30,060
cloud using a relatively local VMware

00:05:27,330 --> 00:05:33,930
stack so all you have to do is make sure

00:05:30,060 --> 00:05:35,730
that the libraries the Python libraries

00:05:33,930 --> 00:05:37,800
that are required to interact with that

00:05:35,730 --> 00:05:39,390
API are present on the system you're

00:05:37,800 --> 00:05:42,330
running salt cloud on now it's important

00:05:39,390 --> 00:05:45,210
to note you don't need to run salt cloud

00:05:42,330 --> 00:05:47,220
on a salt master you can run it from

00:05:45,210 --> 00:05:49,560
anywhere because it is a separate tool

00:05:47,220 --> 00:05:51,930
entirely and as we'll see it makes the

00:05:49,560 --> 00:05:54,350
most sense to run from a salt master but

00:05:51,930 --> 00:05:56,730
you don't specifically have to do that

00:05:54,350 --> 00:05:58,350
the big thing that we get from using

00:05:56,730 --> 00:06:01,020
salt cloud is that we're abstracting

00:05:58,350 --> 00:06:03,870
away the differences so if I go make a

00:06:01,020 --> 00:06:06,930
call in to Lenovo API to make a new VM

00:06:03,870 --> 00:06:08,460
that's a different API with a different

00:06:06,930 --> 00:06:12,840
invocation and different assumptions

00:06:08,460 --> 00:06:13,950
than Rackspace or AWS or anything like

00:06:12,840 --> 00:06:17,300
that all these little differences they

00:06:13,950 --> 00:06:19,440
add up you know you create a VM in AWS

00:06:17,300 --> 00:06:20,850
most of you probably know it's not

00:06:19,440 --> 00:06:23,130
enough to just create a VM you also have

00:06:20,850 --> 00:06:25,800
to create a you know trope group and you

00:06:23,130 --> 00:06:27,180
know rules because usually everybody has

00:06:25,800 --> 00:06:28,380
they create their first t2 and since

00:06:27,180 --> 00:06:30,420
they're like why can't I reach this I

00:06:28,380 --> 00:06:31,380
can't SSH into it because the network

00:06:30,420 --> 00:06:32,340
isn't hooked up so you've got all these

00:06:31,380 --> 00:06:35,130
are the things that go along with it

00:06:32,340 --> 00:06:37,230
it's use AWS well none of that is

00:06:35,130 --> 00:06:39,360
required in the node none of that is

00:06:37,230 --> 00:06:39,790
required in Rackspace so what salt cloud

00:06:39,360 --> 00:06:41,380
does

00:06:39,790 --> 00:06:42,940
is as long as you've said if your

00:06:41,380 --> 00:06:44,920
configuration properly it just kind of

00:06:42,940 --> 00:06:47,140
makes all that disappear this is why I

00:06:44,920 --> 00:06:49,870
like it so much and as long as you have

00:06:47,140 --> 00:06:51,850
your vendor configuration files set up

00:06:49,870 --> 00:06:54,630
properly you won't ever need to think

00:06:51,850 --> 00:06:57,400
about those things again or very little

00:06:54,630 --> 00:07:00,160
it is very tightly integrated with salt

00:06:57,400 --> 00:07:01,600
but because it's its own tool it has its

00:07:00,160 --> 00:07:02,500
own configuration we're gonna dive into

00:07:01,600 --> 00:07:04,510
some of that in a bit

00:07:02,500 --> 00:07:07,840
but it's it's important to know that

00:07:04,510 --> 00:07:09,970
it's calling into the salt stack objects

00:07:07,840 --> 00:07:13,260
in Python for a large part of its

00:07:09,970 --> 00:07:16,600
operation let's go look at some

00:07:13,260 --> 00:07:18,160
configuration files here it really is

00:07:16,600 --> 00:07:19,840
the hardest part this is the part that

00:07:18,160 --> 00:07:21,550
unfortunately you have to do this first

00:07:19,840 --> 00:07:23,170
before you can start operating it which

00:07:21,550 --> 00:07:24,700
is why it works really well to start

00:07:23,170 --> 00:07:28,180
with their document and configurations

00:07:24,700 --> 00:07:30,160
and modify that's what I usually do you

00:07:28,180 --> 00:07:32,860
have to define a provider that you're

00:07:30,160 --> 00:07:34,720
going to be getting per VM from so this

00:07:32,860 --> 00:07:38,230
is where some of it because specific

00:07:34,720 --> 00:07:39,430
customization things come in so in our

00:07:38,230 --> 00:07:41,020
example later we're going to be using

00:07:39,430 --> 00:07:42,220
Linode as our provider because they

00:07:41,020 --> 00:07:45,070
happen to be a sponsor I figured that

00:07:42,220 --> 00:07:46,540
was very appropriate you also have to

00:07:45,070 --> 00:07:49,990
define what your VM is supposed to look

00:07:46,540 --> 00:07:51,790
like in the form of a profile like with

00:07:49,990 --> 00:07:54,190
lonoa you declare the size of it you

00:07:51,790 --> 00:07:55,630
know they have it named like two

00:07:54,190 --> 00:07:56,830
gigabytes four gigabytes however much

00:07:55,630 --> 00:07:58,840
ram you're getting with it that's how

00:07:56,830 --> 00:07:59,500
they name it so you would declare a

00:07:58,840 --> 00:08:02,880
profile

00:07:59,500 --> 00:08:05,800
I want a machine that is of this kind of

00:08:02,880 --> 00:08:08,020
Linode size I wanted to this location

00:08:05,800 --> 00:08:09,670
and I want all these parameters and then

00:08:08,020 --> 00:08:11,920
I also want to attach some configuration

00:08:09,670 --> 00:08:15,070
onto it that gets included in it when we

00:08:11,920 --> 00:08:17,620
run and there's a third part of this

00:08:15,070 --> 00:08:19,390
that mostly happens automatically but if

00:08:17,620 --> 00:08:22,450
you start getting very deep into cell

00:08:19,390 --> 00:08:25,480
cloud you may start modifying this when

00:08:22,450 --> 00:08:28,210
you create a new VM with salt cloud the

00:08:25,480 --> 00:08:31,120
default is for it to run the salt stack

00:08:28,210 --> 00:08:33,849
bootstrap script which rapidly downloads

00:08:31,120 --> 00:08:35,440
the other things that needs the packages

00:08:33,849 --> 00:08:38,140
configuration to run salt minyan and

00:08:35,440 --> 00:08:39,490
hooks it up to you or salt master but

00:08:38,140 --> 00:08:42,190
you don't have to use that deploy script

00:08:39,490 --> 00:08:43,900
you can write your own and I was first

00:08:42,190 --> 00:08:45,400
starting to use this I didn't really pay

00:08:43,900 --> 00:08:47,110
attention to the existing deploy scripts

00:08:45,400 --> 00:08:49,660
and wrote my own and that took a lot

00:08:47,110 --> 00:08:51,670
longer so I do advise you if you can use

00:08:49,660 --> 00:08:53,769
what's already in there start with a

00:08:51,670 --> 00:08:55,389
salt bootstrap and just piggyback

00:08:53,769 --> 00:08:58,449
onto it if you can but you're not

00:08:55,389 --> 00:09:00,759
required to hopefully you won't need to

00:08:58,449 --> 00:09:02,949
go too deep into that there are I can

00:09:00,759 --> 00:09:04,899
show you later there are example deploy

00:09:02,949 --> 00:09:06,699
scripts for people that don't want to

00:09:04,899 --> 00:09:09,550
use just salt bootstrap and they're

00:09:06,699 --> 00:09:12,309
built into the codebase in a interesting

00:09:09,550 --> 00:09:15,040
location and they discourage people from

00:09:12,309 --> 00:09:16,269
using it but it's good for you to know

00:09:15,040 --> 00:09:20,170
where they are just in case you have to

00:09:16,269 --> 00:09:22,029
go there so this is kind of the overview

00:09:20,170 --> 00:09:24,939
of what a config looks like for Salt

00:09:22,029 --> 00:09:27,220
cloud there is this basic at sea salt

00:09:24,939 --> 00:09:31,149
cloud file and that's the top whatever

00:09:27,220 --> 00:09:33,100
you declare there is present for every

00:09:31,149 --> 00:09:35,079
single invocation every single thing

00:09:33,100 --> 00:09:37,660
you're going to use so you declare I

00:09:35,079 --> 00:09:39,429
should mention this in salt stack you

00:09:37,660 --> 00:09:40,540
configurations aren't broken up into

00:09:39,429 --> 00:09:42,819
little pieces it's basically all

00:09:40,540 --> 00:09:44,889
combined into one massive yeah mole and

00:09:42,819 --> 00:09:46,029
so it means you can throw anything you

00:09:44,889 --> 00:09:47,610
want pretty much anywhere as long as

00:09:46,029 --> 00:09:49,899
you've labeled it properly and you tell

00:09:47,610 --> 00:09:51,160
salt oh this is the label you should go

00:09:49,899 --> 00:09:54,129
look for for that particular

00:09:51,160 --> 00:09:56,769
configuration so in salt cloud what we

00:09:54,129 --> 00:09:58,059
tend to do is break it up into providers

00:09:56,769 --> 00:10:00,970
because we don't want to all cram it

00:09:58,059 --> 00:10:02,829
together and we have individual profiles

00:10:00,970 --> 00:10:05,230
okay there's no reason we couldn't stick

00:10:02,829 --> 00:10:06,449
it all in debt Etsy salt cloud file but

00:10:05,230 --> 00:10:09,639
it makes a lot of sense to break it out

00:10:06,449 --> 00:10:12,029
so we'll go look at those let's go look

00:10:09,639 --> 00:10:12,029
at those right now

00:10:12,089 --> 00:10:17,309
how do I expect me to type in microphone

00:10:15,939 --> 00:10:21,249
at the same time I don't understand

00:10:17,309 --> 00:10:27,579
anyway all right one handedly I'm going

00:10:21,249 --> 00:10:29,769
to show you here is my simple

00:10:27,579 --> 00:10:31,809
configuration for the Linnell provider

00:10:29,769 --> 00:10:33,610
yes that is an active API key please

00:10:31,809 --> 00:10:35,189
don't copy it it'll expire inside of 12

00:10:33,610 --> 00:10:38,079
hours so don't try and look at it later

00:10:35,189 --> 00:10:39,490
but I'm setting up for a couple key

00:10:38,079 --> 00:10:41,079
things here that needs to know what

00:10:39,490 --> 00:10:43,899
driver to use in this case the lono

00:10:41,079 --> 00:10:45,129
driver that makes good sense now I've

00:10:43,899 --> 00:10:46,959
confused the heck out of myself by

00:10:45,129 --> 00:10:49,509
actually naming it wrong if you want to

00:10:46,959 --> 00:10:51,669
confuse your co-workers could name this

00:10:49,509 --> 00:10:54,910
Rackspace and used the lenôtre Iver and

00:10:51,669 --> 00:10:56,739
confused up out of them I've I think of

00:10:54,910 --> 00:10:57,999
devious ways to do this anyway you have

00:10:56,739 --> 00:11:00,129
to declare the driver to use in this

00:10:57,999 --> 00:11:02,649
case we're using the Lindo driver which

00:11:00,129 --> 00:11:05,230
understands the OneNote API you have to

00:11:02,649 --> 00:11:07,070
give it the API key here because

00:11:05,230 --> 00:11:09,020
otherwise it has no idea how

00:11:07,070 --> 00:11:11,180
engage you and at the very least you

00:11:09,020 --> 00:11:12,980
have to tell it a root password that

00:11:11,180 --> 00:11:16,220
it's supposed to give every system now

00:11:12,980 --> 00:11:19,430
there are ways to make it per system

00:11:16,220 --> 00:11:20,390
root password and ways to inject SSH

00:11:19,430 --> 00:11:22,580
keys and all these other things that

00:11:20,390 --> 00:11:24,440
will make good sense as far as

00:11:22,580 --> 00:11:26,210
automation and security go but we're

00:11:24,440 --> 00:11:31,070
just starting high-level we're just

00:11:26,210 --> 00:11:39,140
going to set a default root password and

00:11:31,070 --> 00:11:40,700
let's see look at profiles this is a

00:11:39,140 --> 00:11:43,280
very simple profile for the smallest

00:11:40,700 --> 00:11:44,780
Linode you can get today I'm using the

00:11:43,280 --> 00:11:46,790
provider that I declared in the other

00:11:44,780 --> 00:11:48,350
file that you just saw and that's just a

00:11:46,790 --> 00:11:51,560
label so you can name it whatever you

00:11:48,350 --> 00:11:52,640
need if you have multiple of API keys

00:11:51,560 --> 00:11:54,380
with a node you can create multiple

00:11:52,640 --> 00:11:56,180
providers with different labels all

00:11:54,380 --> 00:11:57,680
using the same driver and depending on

00:11:56,180 --> 00:11:59,060
which one you're supposed to use use

00:11:57,680 --> 00:12:01,520
that one maybe you have multiple

00:11:59,060 --> 00:12:03,380
accounts maybe your company wants to

00:12:01,520 --> 00:12:06,320
create a Leno's account or a Rackspace

00:12:03,380 --> 00:12:07,490
account per division or per software

00:12:06,320 --> 00:12:08,930
team so they can kind of do their

00:12:07,490 --> 00:12:10,580
accounting separately well no problem

00:12:08,930 --> 00:12:13,340
just create multiple providers give them

00:12:10,580 --> 00:12:14,840
different names and specify the right

00:12:13,340 --> 00:12:18,530
provider in the machine profile right

00:12:14,840 --> 00:12:21,230
here we're declaring the size is one

00:12:18,530 --> 00:12:23,180
owed to gigabyte and I'll show you where

00:12:21,230 --> 00:12:24,980
we get that from in a second this is the

00:12:23,180 --> 00:12:27,770
image to use that's that's a name that

00:12:24,980 --> 00:12:28,940
comes from OneNote and the location

00:12:27,770 --> 00:12:31,880
again all these are things that come

00:12:28,940 --> 00:12:33,050
from the note and as a final little

00:12:31,880 --> 00:12:35,540
cherry we're going to tell it exactly

00:12:33,050 --> 00:12:38,660
where to go to connect to its master so

00:12:35,540 --> 00:12:40,040
I've given an IP I probably should stick

00:12:38,660 --> 00:12:41,990
a domain name in there but just for our

00:12:40,040 --> 00:12:43,340
demonstration I spun this new salt

00:12:41,990 --> 00:12:46,160
master up real quick and that's the IP

00:12:43,340 --> 00:12:49,930
of it so that is a provider and the

00:12:46,160 --> 00:12:49,930
profile and very quick nutshell

00:12:56,090 --> 00:13:00,560
all right so we have now hypothetically

00:12:58,610 --> 00:13:03,470
set up cell Claude let's figure out how

00:13:00,560 --> 00:13:07,430
to operate it there are a couple key

00:13:03,470 --> 00:13:08,750
commands there's not matter but provider

00:13:07,430 --> 00:13:10,460
you're working with there are some

00:13:08,750 --> 00:13:12,500
baked-in commands that every provider

00:13:10,460 --> 00:13:16,100
should support one of them is listing

00:13:12,500 --> 00:13:17,630
your existing nodes so you need to know

00:13:16,100 --> 00:13:19,730
I've already spun up this machine before

00:13:17,630 --> 00:13:22,640
am I going to clash well I'll just run

00:13:19,730 --> 00:13:25,160
this command and it will forgot to put

00:13:22,640 --> 00:13:28,820
on the provider whoops you have to tell

00:13:25,160 --> 00:13:30,290
what provider to use sorry but there's a

00:13:28,820 --> 00:13:32,330
couple of these commands that are kind

00:13:30,290 --> 00:13:36,260
of important so you can always tell what

00:13:32,330 --> 00:13:37,340
nodes you have already been up and of

00:13:36,260 --> 00:13:39,020
course if you're trying to create a new

00:13:37,340 --> 00:13:40,280
VM you always use this particular

00:13:39,020 --> 00:13:42,740
invocation you need to tell it the

00:13:40,280 --> 00:13:44,480
profile that you're going to create the

00:13:42,740 --> 00:13:46,850
machine in and remember we saw the

00:13:44,480 --> 00:13:49,250
profile declares its relationship to the

00:13:46,850 --> 00:13:51,800
provider and you have to give it a name

00:13:49,250 --> 00:13:53,890
and that's it that's all there is to it

00:13:51,800 --> 00:13:56,510
now if you want to create multiple VMs

00:13:53,890 --> 00:13:57,650
you just write the extra names with a

00:13:56,510 --> 00:14:00,110
space between them and we'll create as

00:13:57,650 --> 00:14:02,750
many VMs as you tell it or you can

00:14:00,110 --> 00:14:04,490
create a cluster using a map file which

00:14:02,750 --> 00:14:08,060
that's what we'll do towards the end of

00:14:04,490 --> 00:14:09,830
this presentation a map file is yet

00:14:08,060 --> 00:14:12,500
another simple yeah mol file declaring

00:14:09,830 --> 00:14:14,660
using this profile create this system

00:14:12,500 --> 00:14:17,810
and here's some parameters for you we'll

00:14:14,660 --> 00:14:19,910
look at that in a second now since we're

00:14:17,810 --> 00:14:22,100
using the node as our example provider

00:14:19,910 --> 00:14:24,020
there are some well-known specific

00:14:22,100 --> 00:14:25,340
commands that the driver understands and

00:14:24,020 --> 00:14:28,790
these will be different for each

00:14:25,340 --> 00:14:32,060
provider look well we already covered

00:14:28,790 --> 00:14:33,380
this I almost get done here are some

00:14:32,060 --> 00:14:35,270
specific things for the known that

00:14:33,380 --> 00:14:38,980
you'll use in fact let's go check these

00:14:35,270 --> 00:14:38,980
out this is how you know what's a name

00:14:40,090 --> 00:14:44,450
this is how you know what to name the

00:14:42,710 --> 00:14:47,600
instance or what instance you're

00:14:44,450 --> 00:14:50,070
creating I'm gonna put this down just a

00:14:47,600 --> 00:14:52,240
second okay

00:14:50,070 --> 00:14:54,490
[Music]

00:14:52,240 --> 00:14:56,740
I need to ask a favor can someone come

00:14:54,490 --> 00:14:59,939
and hold this microphone for me I don't

00:14:56,740 --> 00:14:59,939
know how they expect this as it is I

00:15:10,230 --> 00:15:15,009
guess I'm needing a microphone stand can

00:15:12,670 --> 00:15:16,240
you be a human microphone Stan okay

00:15:15,009 --> 00:15:18,389
great we have a human microphone Stan

00:15:16,240 --> 00:15:20,369
let's thank our human microphone Stan

00:15:18,389 --> 00:15:24,970
thank you

00:15:20,369 --> 00:15:26,499
let's see so this is the salt master

00:15:24,970 --> 00:15:29,949
that created that is local to the system

00:15:26,499 --> 00:15:31,629
this is on my VMware machine or my

00:15:29,949 --> 00:15:39,610
VirtualBox machine actually it's not

00:15:31,629 --> 00:15:41,589
what I want let's go here like this okay

00:15:39,610 --> 00:15:44,079
so I'm just gonna run some of these

00:15:41,589 --> 00:15:45,730
commands to show what is expected so we

00:15:44,079 --> 00:15:48,819
have I show you that we declared this

00:15:45,730 --> 00:15:50,290
windowed API as a provider this is going

00:15:48,819 --> 00:15:52,720
to tell me all the possible locations

00:15:50,290 --> 00:15:56,110
you can create a VM in and it comes out

00:15:52,720 --> 00:15:58,179
in typical saltstack style with happy

00:15:56,110 --> 00:16:00,490
colors and very difficult to read if

00:15:58,179 --> 00:16:01,720
you've got a small window like this can

00:16:00,490 --> 00:16:04,619
you guys see it all the text do I need

00:16:01,720 --> 00:16:15,309
to make it larger we're good okay great

00:16:04,619 --> 00:16:19,329
so see other commands we have sizes and

00:16:15,309 --> 00:16:22,449
we'll pipe that to us I took my colors

00:16:19,329 --> 00:16:24,399
out oh so there are ways if you want to

00:16:22,449 --> 00:16:26,799
get into it to print it out in different

00:16:24,399 --> 00:16:29,410
formats like if you're trying to consume

00:16:26,799 --> 00:16:31,059
this by a different script and this

00:16:29,410 --> 00:16:32,049
wouldn't be a very friendly format for

00:16:31,059 --> 00:16:33,790
you to consume right

00:16:32,049 --> 00:16:36,339
you can tell salt stack and salt cloud

00:16:33,790 --> 00:16:37,509
don't use the typical output or use the

00:16:36,339 --> 00:16:39,610
JSON output and it would give you

00:16:37,509 --> 00:16:40,360
something a little more digestible so if

00:16:39,610 --> 00:16:42,069
you're starting to change these things

00:16:40,360 --> 00:16:43,269
into automation you'll want to use those

00:16:42,069 --> 00:16:45,610
features right now we're just

00:16:43,269 --> 00:16:48,309
demonstrating what it looks like so we

00:16:45,610 --> 00:16:51,160
have all these different possible Linode

00:16:48,309 --> 00:16:53,529
options here dedicated systems keep

00:16:51,160 --> 00:16:55,660
going down past the dedicated here's the

00:16:53,529 --> 00:16:58,179
regular sized ones line out 16 gigabyte

00:16:55,660 --> 00:16:59,559
RAM and this command it didn't used to

00:16:58,179 --> 00:17:02,019
do this this is nice it's telling me how

00:16:59,559 --> 00:17:03,939
many are available I guess it doesn't

00:17:02,019 --> 00:17:05,589
specify the location if you don't care

00:17:03,939 --> 00:17:06,040
where you're the node is getting created

00:17:05,589 --> 00:17:09,670
there if I

00:17:06,040 --> 00:17:12,130
hundred possible when out 16-gigabyte

00:17:09,670 --> 00:17:13,240
damn machines you can create I'm pretty

00:17:12,130 --> 00:17:14,890
sure it's more than five hundred that

00:17:13,240 --> 00:17:17,320
just probably cap it to make it easier

00:17:14,890 --> 00:17:20,290
to see but you're going to need to copy

00:17:17,320 --> 00:17:21,820
this string out like here this is if I'm

00:17:20,290 --> 00:17:23,800
creating a 16 gigabyte node I want to

00:17:21,820 --> 00:17:26,530
make sure I get it exactly right this is

00:17:23,800 --> 00:17:28,780
the name that the node API uses when I'm

00:17:26,530 --> 00:17:32,070
creating a command or creating a VM so I

00:17:28,780 --> 00:17:40,960
have to copy this into my profile and

00:17:32,070 --> 00:17:43,960
images Joran getting tired oh great

00:17:40,960 --> 00:17:45,460
that's that's fantastic thank you so all

00:17:43,960 --> 00:17:46,810
these possible images you can spin up as

00:17:45,460 --> 00:17:49,480
a VM and if you have self-declared

00:17:46,810 --> 00:17:51,100
images this also gets included cuz I

00:17:49,480 --> 00:17:52,330
know some people they don't like using

00:17:51,100 --> 00:17:54,070
stock images they want to build their

00:17:52,330 --> 00:17:55,870
own thing or they're doing something

00:17:54,070 --> 00:17:57,610
aggressive like a particular build of

00:17:55,870 --> 00:17:58,840
OpenBSD that's very cantankerous but

00:17:57,610 --> 00:18:01,000
that's what they use and so they've

00:17:58,840 --> 00:18:02,620
built the image inland oh yeah sure I

00:18:01,000 --> 00:18:04,720
mean in the notes API it'll show you

00:18:02,620 --> 00:18:06,880
those because you're using the API key

00:18:04,720 --> 00:18:08,830
it knows what images you've created so

00:18:06,880 --> 00:18:11,470
those will get included in here so you

00:18:08,830 --> 00:18:16,330
would grab the name I don't like a news

00:18:11,470 --> 00:18:19,030
out pun let's go look for a bun - there

00:18:16,330 --> 00:18:23,230
we go so wow they're still supporting a

00:18:19,030 --> 00:18:25,120
bun - 14 okay yeah okay well people are

00:18:23,230 --> 00:18:27,400
still making those I guess so you would

00:18:25,120 --> 00:18:29,920
grab this string out any others other

00:18:27,400 --> 00:18:31,690
information in here telling you if you

00:18:29,920 --> 00:18:33,490
were making API calls it may would

00:18:31,690 --> 00:18:37,000
matter to you the distribution has an ID

00:18:33,490 --> 00:18:38,770
of 124 or whatever so all this

00:18:37,000 --> 00:18:39,940
information can be gotten straight from

00:18:38,770 --> 00:18:41,740
this invocation and then you would use

00:18:39,940 --> 00:18:43,120
that and plug it into your profile which

00:18:41,740 --> 00:18:44,980
by the way you don't have to create a

00:18:43,120 --> 00:18:47,260
file to create your profile you can

00:18:44,980 --> 00:18:48,610
actually spit it on standard in so if

00:18:47,260 --> 00:18:50,080
you're doing like this big long

00:18:48,610 --> 00:18:52,450
automation Python you can create a

00:18:50,080 --> 00:18:54,910
profile on the fly using what you found

00:18:52,450 --> 00:18:56,800
from your calls here spit it in the salt

00:18:54,910 --> 00:18:59,160
cloud and it will just run into or you

00:18:56,800 --> 00:19:01,240
could create a map file do that too

00:18:59,160 --> 00:19:04,680
let's look at a map file real quick

00:19:01,240 --> 00:19:04,680
where's my map

00:19:07,960 --> 00:19:12,730
Oh Stan would like to ask a question go

00:19:10,059 --> 00:19:13,840
ahead stand all right so we're looking

00:19:12,730 --> 00:19:15,070
at that and you're saying that you look

00:19:13,840 --> 00:19:16,960
at the nodes and then you can provision

00:19:15,070 --> 00:19:18,549
them but can it see itself and be

00:19:16,960 --> 00:19:20,019
identity' like if it already exists it

00:19:18,549 --> 00:19:21,460
just won't without having to go look it

00:19:20,019 --> 00:19:24,700
up I get an automated system is that

00:19:21,460 --> 00:19:28,499
available as a feature that's a good

00:19:24,700 --> 00:19:30,759
question let's test that shall we okay

00:19:28,499 --> 00:19:31,539
so we're accelerating a little bit into

00:19:30,759 --> 00:19:33,279
our invocation

00:19:31,539 --> 00:19:36,899
I'm let's see I need to make sure I have

00:19:33,279 --> 00:19:42,970
my provider set up how I want my profile

00:19:36,899 --> 00:19:47,470
we do so we're gonna create machine

00:19:42,970 --> 00:19:49,059
let's call it a new one okay this is

00:19:47,470 --> 00:19:50,950
gonna take a minute or so so I'll keep

00:19:49,059 --> 00:19:52,779
talking while it's doing it's it's it's

00:19:50,950 --> 00:19:53,649
a little sluggish I'll give your arm

00:19:52,779 --> 00:19:56,110
arrest thank you

00:19:53,649 --> 00:19:57,340
human mic stand all this is running

00:19:56,110 --> 00:19:59,289
we'll talk roughly what it's doing a

00:19:57,340 --> 00:20:00,610
good portion of this unfortunately is

00:19:59,289 --> 00:20:02,710
just making sure it's got the right

00:20:00,610 --> 00:20:04,779
contact to the API you can be able to be

00:20:02,710 --> 00:20:06,580
sluggish and then you know it's not

00:20:04,779 --> 00:20:07,869
immediate you know they have to go in

00:20:06,580 --> 00:20:09,580
the back and do all this other stuff and

00:20:07,869 --> 00:20:11,950
they're trying to make this a roughly

00:20:09,580 --> 00:20:14,559
asynchronous call sometimes it takes

00:20:11,950 --> 00:20:16,059
longer than others there's no promise in

00:20:14,559 --> 00:20:16,990
the API that when you make the call

00:20:16,059 --> 00:20:19,210
you're going to get it immediately

00:20:16,990 --> 00:20:20,889
there's actually I think they encourage

00:20:19,210 --> 00:20:22,269
you to use a more asynchronous style

00:20:20,889 --> 00:20:23,559
because sometimes it takes a while to

00:20:22,269 --> 00:20:24,940
spin up what you've asked for especially

00:20:23,559 --> 00:20:27,940
if you're asking for something big

00:20:24,940 --> 00:20:30,759
there's lots of storage I got a zero out

00:20:27,940 --> 00:20:33,309
to storage it can take a while so there

00:20:30,759 --> 00:20:35,980
are asynchronous ways to invoke this API

00:20:33,309 --> 00:20:37,659
and Salt cloud does kind of understand

00:20:35,980 --> 00:20:39,759
how to do that there may be some hacking

00:20:37,659 --> 00:20:40,899
in there oh I should also mention if

00:20:39,759 --> 00:20:44,440
you're trying to follow those examples

00:20:40,899 --> 00:20:46,720
later inland node they recently created

00:20:44,440 --> 00:20:47,950
a new cloud interface for their

00:20:46,720 --> 00:20:49,269
management and they're directing

00:20:47,950 --> 00:20:52,600
everybody to use the cloud management

00:20:49,269 --> 00:20:55,330
portal and the API keys you create in

00:20:52,600 --> 00:20:57,700
that portal do not work here with salt

00:20:55,330 --> 00:20:58,659
cloud because salt cloud is still using

00:20:57,700 --> 00:21:01,269
the older-style

00:20:58,659 --> 00:21:04,119
api so don't get hung up on that kind of

00:21:01,269 --> 00:21:06,159
fooled me a couple weeks ago you have to

00:21:04,119 --> 00:21:09,039
log back into the old manager create an

00:21:06,159 --> 00:21:10,929
API key from that interface which is use

00:21:09,039 --> 00:21:13,360
an older-style api key and then use that

00:21:10,929 --> 00:21:16,929
in your provider just make a note of

00:21:13,360 --> 00:21:18,600
that so here we go we've seen it deliver

00:21:16,929 --> 00:21:20,919
the VM already now this is actually

00:21:18,600 --> 00:21:21,640
sending back to us the console of what

00:21:20,919 --> 00:21:24,570
it's doing

00:21:21,640 --> 00:21:27,040
it goes and creates the VM logged-in

00:21:24,570 --> 00:21:28,570
installs everything it needs to get it

00:21:27,040 --> 00:21:31,480
boot strapped up and become a salt

00:21:28,570 --> 00:21:32,620
minion and here we're seeing it just go

00:21:31,480 --> 00:21:35,460
through all the various packages and

00:21:32,620 --> 00:21:38,440
jump jump jump jump here we go

00:21:35,460 --> 00:21:42,250
please go faster because there's a lot

00:21:38,440 --> 00:21:45,250
of people in the network right now going

00:21:42,250 --> 00:21:48,490
going going lots and lots of packages

00:21:45,250 --> 00:21:50,680
for some reason okay

00:21:48,490 --> 00:21:52,390
I should mention when we're spinning up

00:21:50,680 --> 00:21:54,100
a system and it automatically installs

00:21:52,390 --> 00:21:56,500
supplementing configures it for us it

00:21:54,100 --> 00:21:58,630
creates a very very small configuration

00:21:56,500 --> 00:21:59,950
file if you just go and install Salt

00:21:58,630 --> 00:22:02,800
minion on a system we can get this nice

00:21:59,950 --> 00:22:05,080
well-documented configuration file with

00:22:02,800 --> 00:22:06,700
text on what every option does if you

00:22:05,080 --> 00:22:08,380
create a system using salt cloud it

00:22:06,700 --> 00:22:10,570
doesn't do any of that it just creates

00:22:08,380 --> 00:22:14,710
that the minimum required Saltman in

00:22:10,570 --> 00:22:16,480
configuration what happened here go away

00:22:14,710 --> 00:22:19,720
hey it finished okay great

00:22:16,480 --> 00:22:24,210
so now we have a new system and I should

00:22:19,720 --> 00:22:24,210
be able to SSH into it

00:22:29,370 --> 00:22:36,970
what was the password this is really

00:22:34,030 --> 00:22:39,430
hard to do one-handed yay okay so we

00:22:36,970 --> 00:22:41,140
here have a brand new system built by

00:22:39,430 --> 00:22:42,430
salt cloud and we wanted to test what

00:22:41,140 --> 00:22:44,860
happens if we did the exact same thing

00:22:42,430 --> 00:22:50,650
again right Oh question before we go on

00:22:44,860 --> 00:22:53,080
oh absolutely absolutely and I typically

00:22:50,650 --> 00:22:54,070
would do that I just kind of skipped

00:22:53,080 --> 00:22:55,750
over that for this because I'm trying to

00:22:54,070 --> 00:22:57,040
make it this is if you just sort out

00:22:55,750 --> 00:22:59,140
this is what you're going to see and

00:22:57,040 --> 00:23:01,600
you'll evolve very rapidly into using

00:22:59,140 --> 00:23:04,420
keys there are options you can submit to

00:23:01,600 --> 00:23:06,070
the bootstrap script like insert this

00:23:04,420 --> 00:23:08,140
SSH key into the root account it

00:23:06,070 --> 00:23:10,720
supports that or specifically use this

00:23:08,140 --> 00:23:12,400
password or specifically create an

00:23:10,720 --> 00:23:13,600
automation user that's named this with

00:23:12,400 --> 00:23:14,920
this password and put the key into it

00:23:13,600 --> 00:23:17,920
there's all these configuration options

00:23:14,920 --> 00:23:19,150
that's all bootstrap has that again it's

00:23:17,920 --> 00:23:21,550
another rabbit hole we could easily get

00:23:19,150 --> 00:23:24,940
lost in there so I'm trying to skip over

00:23:21,550 --> 00:23:27,280
that some so alright so we have verified

00:23:24,940 --> 00:23:32,530
we have a system and we verified we can

00:23:27,280 --> 00:23:33,970
log into it let's do it again I'm gonna

00:23:32,530 --> 00:23:36,730
do create the same thing again let's see

00:23:33,970 --> 00:23:38,200
what it does Hey look at that okay it

00:23:36,730 --> 00:23:40,390
doesn't let us create it you guys see

00:23:38,200 --> 00:23:41,800
that answers your question it's at least

00:23:40,390 --> 00:23:45,160
intelligent enough to not create the

00:23:41,800 --> 00:23:48,430
next one cool all right well very good

00:23:45,160 --> 00:23:55,540
let's take a look at this new system of

00:23:48,430 --> 00:23:57,490
ours all right back again sorry all

00:23:55,540 --> 00:23:58,780
right this is what the minion

00:23:57,490 --> 00:24:02,260
configuration file looks like it's very

00:23:58,780 --> 00:24:03,700
very small it's defining some metadata

00:24:02,260 --> 00:24:06,610
about where it came from how was it

00:24:03,700 --> 00:24:07,870
invoked that's the default I don't know

00:24:06,610 --> 00:24:10,780
whether that's in there here's the idea

00:24:07,870 --> 00:24:12,910
of the system and the master okay so now

00:24:10,780 --> 00:24:20,530
let's hop over the master and we should

00:24:12,910 --> 00:24:21,970
see a new system requesting ok I

00:24:20,530 --> 00:24:24,130
accepted it that's a nice thing about

00:24:21,970 --> 00:24:25,960
salt cloud one of the things about salt

00:24:24,130 --> 00:24:27,490
stack when you create a new minion and

00:24:25,960 --> 00:24:30,190
you ask it to connect to the master it

00:24:27,490 --> 00:24:31,780
doesn't just work because anybody could

00:24:30,190 --> 00:24:33,550
do that and point their system at your

00:24:31,780 --> 00:24:36,250
master and try and get in there you have

00:24:33,550 --> 00:24:38,290
to accept that this minion is what you

00:24:36,250 --> 00:24:40,120
think it is and it's now accepted to be

00:24:38,290 --> 00:24:41,230
run by the master when you use salt

00:24:40,120 --> 00:24:42,520
cloud it just kind of handles that all

00:24:41,230 --> 00:24:44,050
for you

00:24:42,520 --> 00:24:46,840
so we're saying it's automatically

00:24:44,050 --> 00:24:55,600
accepted our new one key and we can run

00:24:46,840 --> 00:24:58,390
commands against it okay let's just run

00:24:55,600 --> 00:25:00,760
like core applications so I have this

00:24:58,390 --> 00:25:02,230
kind of I turned it up for our example

00:25:00,760 --> 00:25:03,700
but you know the default this is what I

00:25:02,230 --> 00:25:05,410
expect the system to look like every

00:25:03,700 --> 00:25:07,210
time I have I'm very particular about my

00:25:05,410 --> 00:25:09,220
MRC and screen are scenes I want to make

00:25:07,210 --> 00:25:12,100
sure that's on every system so that's in

00:25:09,220 --> 00:25:14,760
our core application and we can set it

00:25:12,100 --> 00:25:16,470
up such that this is automatically run

00:25:14,760 --> 00:25:20,590
okay good

00:25:16,470 --> 00:25:22,980
succeeded succeeded good so now my

00:25:20,590 --> 00:25:25,540
system should behave as I expect it to

00:25:22,980 --> 00:25:27,280
if it does it behave like I expected to

00:25:25,540 --> 00:25:33,809
then this should be with the dark

00:25:27,280 --> 00:25:33,809
background anything else

00:25:38,970 --> 00:25:42,990
okay good there we go and my vim our CI

00:25:41,610 --> 00:25:44,460
I tell it's physically there I'm gonna

00:25:42,990 --> 00:25:46,230
have a bot in black backgrounds but I

00:25:44,460 --> 00:25:47,490
have this nice sleep text and this is

00:25:46,230 --> 00:25:50,520
just a simple way to test it sure enough

00:25:47,490 --> 00:25:54,030
my vim RC is there just because I could

00:25:50,520 --> 00:26:04,909
just look at the file yeah let's go just

00:25:54,030 --> 00:26:07,530
go look at it oh that's why

00:26:04,909 --> 00:26:10,350
yeah so that file didn't exist before we

00:26:07,530 --> 00:26:12,150
ran that core application and you can

00:26:10,350 --> 00:26:14,159
have it automatically run these things

00:26:12,150 --> 00:26:15,690
let's do we'll see that when we do our

00:26:14,159 --> 00:26:17,850
cluster example here in a second I'm

00:26:15,690 --> 00:26:18,590
gonna get out of the system here okay we

00:26:17,850 --> 00:26:20,610
don't need you anymore

00:26:18,590 --> 00:26:23,159
alright I'm gonna hop back over to

00:26:20,610 --> 00:26:26,820
presentation I don't know if I have

00:26:23,159 --> 00:26:29,070
anything on the map or not no I don't

00:26:26,820 --> 00:26:31,320
okay so for those of you who might be

00:26:29,070 --> 00:26:32,730
watching later I just stuck this slide

00:26:31,320 --> 00:26:34,919
in because pretty much the rest of this

00:26:32,730 --> 00:26:37,289
presentation is gonna be on just doing

00:26:34,919 --> 00:26:38,970
things and there's no there's no

00:26:37,289 --> 00:26:40,320
substitute for just jumping on a command

00:26:38,970 --> 00:26:45,030
line showing you how these things work

00:26:40,320 --> 00:26:47,130
so let's jump on and to look at a map

00:26:45,030 --> 00:26:49,260
all right indeed mine like stand back

00:26:47,130 --> 00:26:50,460
again his arms very pretty tight we give

00:26:49,260 --> 00:26:55,289
another round of applause for being a my

00:26:50,460 --> 00:27:00,870
Stan thank you mic stand yes thanks Mike

00:26:55,289 --> 00:27:02,940
that's your new name really well that's

00:27:00,870 --> 00:27:05,669
why that's great we're we're right in

00:27:02,940 --> 00:27:09,960
play okay so I have somewhere in here

00:27:05,669 --> 00:27:12,960
built a map map example here we go so

00:27:09,960 --> 00:27:15,419
this is what a map file looks like so

00:27:12,960 --> 00:27:17,400
I'm just declaring I can declare any

00:27:15,419 --> 00:27:18,780
number of profiles and any number of

00:27:17,400 --> 00:27:20,820
systems based on those profiles it's

00:27:18,780 --> 00:27:22,590
just very simple map literally that's

00:27:20,820 --> 00:27:24,809
all it is and of course some of these

00:27:22,590 --> 00:27:27,090
things are going to be specific to your

00:27:24,809 --> 00:27:28,200
provider when I first started using salt

00:27:27,090 --> 00:27:31,169
cloud a couple years ago I was doing

00:27:28,200 --> 00:27:32,789
almost exclusively calls against VMware

00:27:31,169 --> 00:27:35,190
and so I would need to define things

00:27:32,789 --> 00:27:37,919
like oh I need this system to have four

00:27:35,190 --> 00:27:39,330
cores and eight gigs of RAM and don't

00:27:37,919 --> 00:27:40,679
use the normal storage profile use a

00:27:39,330 --> 00:27:42,480
different one and it needs to be the

00:27:40,679 --> 00:27:46,169
size like this and put on that anyway

00:27:42,480 --> 00:27:48,630
all that would end up in in here so the

00:27:46,169 --> 00:27:49,649
interesting thing is if I am using a

00:27:48,630 --> 00:27:51,870
profile that already has all that

00:27:49,649 --> 00:27:52,710
declared and it's right I don't need to

00:27:51,870 --> 00:27:54,629
specify it in the map

00:27:52,710 --> 00:27:56,789
it just inherits all that fact that

00:27:54,629 --> 00:27:58,440
image we saw before that inheritance

00:27:56,789 --> 00:28:01,139
flows down whatever you've declared in

00:27:58,440 --> 00:28:02,879
an a higher file will show up in a lower

00:28:01,139 --> 00:28:04,769
file and you overwrite only the

00:28:02,879 --> 00:28:05,929
information that's important so it

00:28:04,769 --> 00:28:09,600
allows you to build this very

00:28:05,929 --> 00:28:12,570
hierarchical data structures where you

00:28:09,600 --> 00:28:14,190
don't need to define information so but

00:28:12,570 --> 00:28:16,499
here since you know what everything is

00:28:14,190 --> 00:28:17,789
just kind of baked into its a TV goodbye

00:28:16,499 --> 00:28:19,740
node which means it's going to have this

00:28:17,789 --> 00:28:21,450
much storage and that I think it's just

00:28:19,740 --> 00:28:24,659
one quart we don't need to do anything

00:28:21,450 --> 00:28:27,269
so here we're going to create a cluster

00:28:24,659 --> 00:28:28,679
of two nodes we're going to set it up

00:28:27,269 --> 00:28:30,899
I'm about to run in parallels it'll

00:28:28,679 --> 00:28:34,610
create them at the same time and here I

00:28:30,899 --> 00:28:38,039
have defined oh I should say a grain is

00:28:34,610 --> 00:28:39,749
salt stacks fancy name term for a fact

00:28:38,039 --> 00:28:41,460
like would Suzie and ansible

00:28:39,749 --> 00:28:45,179
they call them grains because they're

00:28:41,460 --> 00:28:47,399
trying to be cute so grain whatever so

00:28:45,179 --> 00:28:49,559
we're declaring an extra grain here in

00:28:47,399 --> 00:28:53,159
this case I've set up I'll show you in a

00:28:49,559 --> 00:28:55,080
second I've set up a selector where it

00:28:53,159 --> 00:28:56,759
looks at this demo role grain and

00:28:55,080 --> 00:28:59,249
depending on the contents of it it will

00:28:56,759 --> 00:29:08,460
run different automation let's go look

00:28:59,249 --> 00:29:11,639
at that real quick States there you go

00:29:08,460 --> 00:29:15,269
so every system that runs when I tell it

00:29:11,639 --> 00:29:17,279
to apply a high State or something it's

00:29:15,269 --> 00:29:20,509
going to run through this file and match

00:29:17,279 --> 00:29:22,590
everything it's gonna run every every

00:29:20,509 --> 00:29:24,869
state file that we tell it to that it

00:29:22,590 --> 00:29:26,369
matches so here every system on the

00:29:24,869 --> 00:29:29,190
planet that is ever connected to salt

00:29:26,369 --> 00:29:31,409
master when I run come up to the high

00:29:29,190 --> 00:29:34,169
state it's always gonna run core every

00:29:31,409 --> 00:29:35,909
single time so we're always know our

00:29:34,169 --> 00:29:37,499
system sort of base level that's a it's

00:29:35,909 --> 00:29:39,269
just a good pattern to get into

00:29:37,499 --> 00:29:41,730
everything that your system should

00:29:39,269 --> 00:29:44,190
always have stick it in core or name

00:29:41,730 --> 00:29:45,899
something similarly and then here I've

00:29:44,190 --> 00:29:47,940
set up for our cluster demonstration

00:29:45,899 --> 00:29:49,950
we're going to do a match against the

00:29:47,940 --> 00:29:52,860
contents of that grain if it is a web

00:29:49,950 --> 00:29:54,809
role we're going to run the engine X

00:29:52,860 --> 00:29:56,759
state if it's a DB role we're going to

00:29:54,809 --> 00:29:57,960
run the MySQL State and right now those

00:29:56,759 --> 00:30:00,149
states are very simple they're just

00:29:57,960 --> 00:30:01,950
install the package not configured

00:30:00,149 --> 00:30:04,080
because that gets really deep into some

00:30:01,950 --> 00:30:05,429
some of the state stuff in the new shell

00:30:04,080 --> 00:30:08,389
we don't want to get there so literally

00:30:05,429 --> 00:30:08,389
these states are just

00:30:09,289 --> 00:30:13,470
package installed that's all it's going

00:30:11,370 --> 00:30:14,640
to do right now for a demonstration but

00:30:13,470 --> 00:30:16,169
it should help illustrate that we're

00:30:14,640 --> 00:30:17,250
going to create this cluster and it's

00:30:16,169 --> 00:30:18,990
going to have these different roles we

00:30:17,250 --> 00:30:20,730
could apply whatever states we want in

00:30:18,990 --> 00:30:24,780
this so we can get as complicated as we

00:30:20,730 --> 00:30:26,910
want we could match against the name so

00:30:24,780 --> 00:30:28,860
if I know I was naming my systems a

00:30:26,910 --> 00:30:32,160
certain way every web system is going to

00:30:28,860 --> 00:30:34,530
be web - something then I could do as my

00:30:32,160 --> 00:30:36,900
selector I could do web - asterisk and

00:30:34,530 --> 00:30:39,960
it would be fine I tend to prefer using

00:30:36,900 --> 00:30:41,789
grains because names change you know

00:30:39,960 --> 00:30:43,980
let's say you're building a QA node and

00:30:41,789 --> 00:30:45,600
you name it QA - web well that's not

00:30:43,980 --> 00:30:47,190
going to match your selector right so

00:30:45,600 --> 00:30:48,630
instead of using names but I find it

00:30:47,190 --> 00:30:50,669
preferable to use grains which you

00:30:48,630 --> 00:30:51,840
declare when you're creating the VM it

00:30:50,669 --> 00:30:56,370
just works a little cleaner in my

00:30:51,840 --> 00:31:04,580
opinion so let's go actually run this

00:30:56,370 --> 00:31:04,580
map oops I hit tab and didn't complete

00:31:07,100 --> 00:31:12,230
anybody I need Mike back thank you Mike

00:31:15,380 --> 00:31:20,580
all right here we go now before I run

00:31:19,169 --> 00:31:22,530
and create a whole bunch of machines

00:31:20,580 --> 00:31:23,970
it's asking me sure I think there's a -

00:31:22,530 --> 00:31:27,240
why option if you want to skip that for

00:31:23,970 --> 00:31:28,260
your automation efforts so again it's

00:31:27,240 --> 00:31:30,090
gonna take a little while to spin up

00:31:28,260 --> 00:31:31,799
because now it's asking a node to make

00:31:30,090 --> 00:31:35,880
it to a p2 machines

00:31:31,799 --> 00:31:37,140
oh I should mention I forgot an option

00:31:35,880 --> 00:31:38,190
that allows you to build in parallel

00:31:37,140 --> 00:31:40,110
because you're building a cluster right

00:31:38,190 --> 00:31:41,520
as long as your order doesn't matter you

00:31:40,110 --> 00:31:42,840
can build them all at the same time and

00:31:41,520 --> 00:31:44,669
in our case it doesn't matter because

00:31:42,840 --> 00:31:45,809
it's not really linked but let's say

00:31:44,669 --> 00:31:48,480
you're spinning up a cluster that you

00:31:45,809 --> 00:31:50,370
need H a proxy out front and three web

00:31:48,480 --> 00:31:51,780
nodes and at least one DB but possibly

00:31:50,370 --> 00:31:52,799
two and you probably want to write a

00:31:51,780 --> 00:31:54,270
sentence in there somewhere because this

00:31:52,799 --> 00:31:56,309
is a really big site so you want to have

00:31:54,270 --> 00:31:58,289
a proxy set up first so you would

00:31:56,309 --> 00:32:01,080
declare that first I need to declare all

00:31:58,289 --> 00:32:02,610
of the web machines next and then the DB

00:32:01,080 --> 00:32:05,370
and then put the software on the way up

00:32:02,610 --> 00:32:11,990
and the order can be defined in the map

00:32:05,370 --> 00:32:15,149
file so alright thank you one point one

00:32:11,990 --> 00:32:15,830
and maybe it's tired it's been busy this

00:32:15,149 --> 00:32:22,320
weekend

00:32:15,830 --> 00:32:23,580
come on the node there we go all right

00:32:22,320 --> 00:32:28,279
anybody got any jokes well we got some

00:32:23,580 --> 00:32:28,279
dead time here Mikey got any jokes

00:32:28,610 --> 00:32:35,639
that's okay we got nothing to do

00:32:31,019 --> 00:32:36,840
come tell your joke okay questions

00:32:35,639 --> 00:32:39,539
questions are better than jokes what's

00:32:36,840 --> 00:32:42,720
your question Mike so my question is

00:32:39,539 --> 00:32:45,240
we're talking about that the salt cloud

00:32:42,720 --> 00:32:46,889
can stand alone from salt so let's

00:32:45,240 --> 00:32:49,230
presume that we have a system that

00:32:46,889 --> 00:32:50,850
exists with a lot of playbooks can you

00:32:49,230 --> 00:32:52,080
salt cloud provision instead of putting

00:32:50,850 --> 00:32:53,850
the minion stuff on there which I

00:32:52,080 --> 00:32:58,860
wouldn't need just throw ansible in

00:32:53,850 --> 00:33:00,809
there yes you can you would create a

00:32:58,860 --> 00:33:03,269
custom deploy script that does not

00:33:00,809 --> 00:33:05,460
create salt boostrap no matter what you

00:33:03,269 --> 00:33:07,679
do the deploy script gets run by a salt

00:33:05,460 --> 00:33:09,059
cloud so if you want to use ansible for

00:33:07,679 --> 00:33:10,260
the rest of it because that's actually a

00:33:09,059 --> 00:33:11,700
use case I'm probably gonna be later

00:33:10,260 --> 00:33:13,470
this year we already have a heavy

00:33:11,700 --> 00:33:16,470
investment ansible but ansible does not

00:33:13,470 --> 00:33:18,659
have a salt cloud equivalent so I would

00:33:16,470 --> 00:33:20,490
use salt cloud to create it and ansible

00:33:18,659 --> 00:33:22,760
to provision it at that point I would

00:33:20,490 --> 00:33:25,549
create a custom deploy script which

00:33:22,760 --> 00:33:28,590
actually I would probably do upload

00:33:25,549 --> 00:33:31,649
mm-hmm I would need to have some way to

00:33:28,590 --> 00:33:34,500
get the answer ball rolls down to it and

00:33:31,649 --> 00:33:35,250
then run it locally basically so that

00:33:34,500 --> 00:33:36,690
would be a way to do it there's no

00:33:35,250 --> 00:33:38,429
reason you can't do that you would just

00:33:36,690 --> 00:33:40,590
need to customize the deploy script and

00:33:38,429 --> 00:33:42,630
in your profile you would specify use

00:33:40,590 --> 00:33:53,820
this dissapoint deploy script not the

00:33:42,630 --> 00:33:55,529
default so by the question Oh even

00:33:53,820 --> 00:33:56,580
better salt has a module to run ansible

00:33:55,529 --> 00:33:57,779
states I haven't looked at that

00:33:56,580 --> 00:33:59,610
thank you that's gonna save me some time

00:33:57,779 --> 00:34:03,320
I don't have to write it up when script

00:33:59,610 --> 00:34:03,320
now no question over comment

00:34:25,149 --> 00:34:30,110
so salt stack itself does have that salt

00:34:28,610 --> 00:34:32,000
cloud I think assumes you're starting

00:34:30,110 --> 00:34:33,889
from zero but I haven't actually tested

00:34:32,000 --> 00:34:35,570
that use case the question was if you

00:34:33,889 --> 00:34:37,280
already have say Buster that's built but

00:34:35,570 --> 00:34:39,080
now you're changing the cluster makeup

00:34:37,280 --> 00:34:40,970
of some kind you're adding a red server

00:34:39,080 --> 00:34:43,520
into it could you just rerun the cluster

00:34:40,970 --> 00:34:44,620
map having added that Redis node and I

00:34:43,520 --> 00:34:48,679
don't actually know the answer to that

00:34:44,620 --> 00:34:54,010
so do you you know the answer sir okay

00:34:48,679 --> 00:34:54,010
another question or comment in okay

00:35:14,520 --> 00:35:18,460
the question is does it create a state

00:35:17,020 --> 00:35:20,620
that you can go back later and modify

00:35:18,460 --> 00:35:22,240
and yes and now it depends on how you're

00:35:20,620 --> 00:35:27,820
calling it the way we have set up our

00:35:22,240 --> 00:35:29,440
map here the come on don't go quiet so

00:35:27,820 --> 00:35:31,120
the way we have set up our map here what

00:35:29,440 --> 00:35:33,790
it's supposed to do and it may or may

00:35:31,120 --> 00:35:36,100
not I'm not sure it's supposed to create

00:35:33,790 --> 00:35:37,570
them note and then go and look does this

00:35:36,100 --> 00:35:39,280
match the high state we expected to be

00:35:37,570 --> 00:35:40,990
and that's when it was run to that top

00:35:39,280 --> 00:35:42,370
at SLS file we looked at earlier and

00:35:40,990 --> 00:35:44,800
then it would run the configuration so

00:35:42,370 --> 00:35:46,750
you would just update the top that SLS

00:35:44,800 --> 00:35:48,790
or the state files and the change would

00:35:46,750 --> 00:35:51,310
be incorporated the next time you run

00:35:48,790 --> 00:35:53,020
high state on that system so I wouldn't

00:35:51,310 --> 00:35:56,680
say specifically salt cloud does that

00:35:53,020 --> 00:35:57,990
but salt stack does so does that answer

00:35:56,680 --> 00:36:02,740
your question okay

00:35:57,990 --> 00:36:07,000
well we're still running goodness okay I

00:36:02,740 --> 00:36:08,410
thought by now we'd be done it's it's

00:36:07,000 --> 00:36:10,330
it's close we'll just say this it's very

00:36:08,410 --> 00:36:12,670
close to this spit up the summary of

00:36:10,330 --> 00:36:15,190
here's your two new systems and it'll

00:36:12,670 --> 00:36:16,990
have the IPS and we'll go check out so

00:36:15,190 --> 00:36:19,090
if it's set up properly if it's actually

00:36:16,990 --> 00:36:20,830
installed the package we expect then

00:36:19,090 --> 00:36:23,110
nginx should be running on the web node

00:36:20,830 --> 00:36:32,400
and MySQL should be running on the DB

00:36:23,110 --> 00:36:32,400
node see maybe I'm say that again please

00:36:33,060 --> 00:36:40,000
I'm sorry can't hear you when she comes

00:36:35,170 --> 00:36:41,770
oh gosh okay okay he did come up with a

00:36:40,000 --> 00:36:43,830
joke it takes a while to saltier thank

00:36:41,770 --> 00:36:46,270
you Mike I appreciate that

00:36:43,830 --> 00:36:52,770
was we maybe we need to collective groan

00:36:46,270 --> 00:36:55,870
to reward that wonderful pun yeah gosh

00:36:52,770 --> 00:36:58,420
this is a family of puns stirs over here

00:36:55,870 --> 00:37:01,330
oh here we go it finished okay so let's

00:36:58,420 --> 00:37:02,680
see here it's telling us well it's an

00:37:01,330 --> 00:37:07,840
awful lot of information it's telling us

00:37:02,680 --> 00:37:09,460
oh it told us for some reason to decided

00:37:07,840 --> 00:37:12,670
to show us the entire deploy script

00:37:09,460 --> 00:37:14,680
that's marvelous Thank You Saul cloud I

00:37:12,670 --> 00:37:17,070
don't know why it's doing that why her

00:37:14,680 --> 00:37:21,730
in the heck is the top of this thing I

00:37:17,070 --> 00:37:23,590
might run out of buffer here okay

00:37:21,730 --> 00:37:27,600
to buffer we can't actually get the ipv4

00:37:23,590 --> 00:37:27,600
systems but we can do it another way

00:37:40,859 --> 00:37:47,310
let's first let's just make sure it's

00:37:42,850 --> 00:37:54,070
connected Mike I may need you again

00:37:47,310 --> 00:37:57,940
you're my hero Mike much easier to type

00:37:54,070 --> 00:38:00,850
with two hands no oh

00:37:57,940 --> 00:38:03,580
21:09 whoops I'm gonna blame that on

00:38:00,850 --> 00:38:05,350
having one hand okay good

00:38:03,580 --> 00:38:08,920
we have our web nodes we have our DB

00:38:05,350 --> 00:38:20,020
node good okay so now we should be able

00:38:08,920 --> 00:38:25,500
to grains okay there we go there's our

00:38:20,020 --> 00:38:25,500
IP let's go see if nginx is active on it

00:38:29,250 --> 00:38:43,480
nope okay let's see I'm on that same

00:38:36,369 --> 00:38:46,540
node oh that's right okay let's just do

00:38:43,480 --> 00:38:48,190
like that and let it do its thing the

00:38:46,540 --> 00:38:51,570
heck you say I literally just ran this

00:38:48,190 --> 00:38:51,570
before we came in here hmm

00:38:55,010 --> 00:39:05,650
okay there's our top file let's make

00:39:02,030 --> 00:39:05,650
sure I didn't overwrite my file routes

00:39:07,090 --> 00:39:16,790
that looks right to me okay let's just

00:39:10,640 --> 00:39:18,140
try to state that apply this is what

00:39:16,790 --> 00:39:20,060
always happens in every presentation

00:39:18,140 --> 00:39:21,500
it looks great works great before you

00:39:20,060 --> 00:39:25,040
walk in and then boom it to stops

00:39:21,500 --> 00:39:34,670
working just directly apply

00:39:25,040 --> 00:39:39,040
I think it's nope let's go that's good

00:39:34,670 --> 00:39:45,890
point let's go see what the grain is one

00:39:39,040 --> 00:39:47,440
grains what was itself demo I think demo

00:39:45,890 --> 00:39:49,970
roll that's what it was

00:39:47,440 --> 00:39:52,400
thank you okay so it doesn't have the

00:39:49,970 --> 00:39:53,600
demo roll I guess it's just maybe the

00:39:52,400 --> 00:39:55,130
reason didn't run is cuz for whatever

00:39:53,600 --> 00:39:56,330
reason they can't find my entire file I

00:39:55,130 --> 00:40:03,170
don't know why I can't type in the top

00:39:56,330 --> 00:40:05,240
file it's right there well not supposed

00:40:03,170 --> 00:40:11,260
to be courted engineers let's do this

00:40:05,240 --> 00:40:11,260
just apply nginx find it no

00:40:12,920 --> 00:40:18,050
yay something I've changed recently

00:40:14,780 --> 00:40:19,790
let's go look at this it says that's not

00:40:18,050 --> 00:40:33,260
a dictionary does that look like a camel

00:40:19,790 --> 00:40:34,760
dictionary to you guys it doesn't yeah

00:40:33,260 --> 00:40:43,990
it says that's it doesn't in ansible

00:40:34,760 --> 00:40:46,430
it's a little different but installed

00:40:43,990 --> 00:40:49,730
which is good look at what it says to do

00:40:46,430 --> 00:40:50,900
and copy it oh there I see I don't like

00:40:49,730 --> 00:40:54,830
this they use these examples I don't

00:40:50,900 --> 00:40:59,000
specify package installed fine

00:40:54,830 --> 00:41:02,060
no we're gonna do it that way we'll just

00:40:59,000 --> 00:41:07,670
do like that wait so it doesn't need

00:41:02,060 --> 00:41:11,240
that first - ok like that and it also

00:41:07,670 --> 00:41:14,720
doesn't need a trailing yeah ok so we'll

00:41:11,240 --> 00:41:18,080
try it now that looks good it didn't

00:41:14,720 --> 00:41:19,310
really respond thank you I was dinking

00:41:18,080 --> 00:41:20,960
around with my trying to create a better

00:41:19,310 --> 00:41:22,250
cluster example before I got in here I

00:41:20,960 --> 00:41:25,370
was actually trying to see it with a

00:41:22,250 --> 00:41:26,810
real working tool okay now it's now it's

00:41:25,370 --> 00:41:31,610
installed engine X we should be able to

00:41:26,810 --> 00:41:34,130
go over here and we should see your

00:41:31,610 --> 00:41:36,380
engine X hey welcome to engine X so

00:41:34,130 --> 00:41:37,760
let's pretend that it ran that properly

00:41:36,380 --> 00:41:39,320
because I had properly formatted the

00:41:37,760 --> 00:41:43,700
file we'll just kind of all one wink

00:41:39,320 --> 00:41:45,140
wink nod nod right yeah okay so pretend

00:41:43,700 --> 00:41:47,420
that it also worked on the database and

00:41:45,140 --> 00:41:48,890
at that point we would probably because

00:41:47,420 --> 00:41:50,750
we're deploying an actual cluster that

00:41:48,890 --> 00:41:52,640
does an actual thing we would have more

00:41:50,750 --> 00:41:54,080
state files that would deploy our

00:41:52,640 --> 00:41:56,780
software check it out from get do

00:41:54,080 --> 00:41:58,760
whatever all the other state file things

00:41:56,780 --> 00:42:01,700
that saltstack does we would include

00:41:58,760 --> 00:42:03,230
that in there and it maybe there was an

00:42:01,700 --> 00:42:05,450
option of bootstrap I missed to tell it

00:42:03,230 --> 00:42:08,210
to explicitly run the high state so one

00:42:05,450 --> 00:42:10,760
of the things I have done when I'm

00:42:08,210 --> 00:42:13,060
provisioning stuff is I would declare an

00:42:10,760 --> 00:42:15,440
extra entry in the sought minion

00:42:13,060 --> 00:42:17,240
configuration that tells it on startup

00:42:15,440 --> 00:42:18,860
run this state and actually had this

00:42:17,240 --> 00:42:21,560
very complicated pipeline with deploy

00:42:18,860 --> 00:42:22,820
steps and so when you first we saw when

00:42:21,560 --> 00:42:24,350
we logged into that system and had all

00:42:22,820 --> 00:42:25,590
these package updates to run the kernels

00:42:24,350 --> 00:42:27,180
probably added

00:42:25,590 --> 00:42:28,530
it's Lindo they do the colonel but like

00:42:27,180 --> 00:42:29,520
on another system if you're managing own

00:42:28,530 --> 00:42:30,870
Colonel the Colonel's out of date

00:42:29,520 --> 00:42:33,570
because you're just coming from the LTS

00:42:30,870 --> 00:42:35,580
so step one would be update all the

00:42:33,570 --> 00:42:38,220
packages that are on a system and reboot

00:42:35,580 --> 00:42:39,690
so that would be step one and I had this

00:42:38,220 --> 00:42:41,850
pipeline that would send an event back

00:42:39,690 --> 00:42:43,950
from the Dominion to the master saying

00:42:41,850 --> 00:42:45,600
okay we've completed step one and the

00:42:43,950 --> 00:42:47,340
master would advance to step two like

00:42:45,600 --> 00:42:49,290
this little ratchet thing I'll just step

00:42:47,340 --> 00:42:50,610
through the deploy process and all the

00:42:49,290 --> 00:42:52,350
different pieces the different pieces of

00:42:50,610 --> 00:42:53,850
the cluster would at the point where

00:42:52,350 --> 00:42:55,410
they diverged they would just run only

00:42:53,850 --> 00:42:58,080
the states that were meaningful for it

00:42:55,410 --> 00:42:59,970
so I didn't want to go too deep into

00:42:58,080 --> 00:43:02,280
this because this is a very very deep

00:42:59,970 --> 00:43:04,020
hole it's a very amazingly powerful tool

00:43:02,280 --> 00:43:05,610
with lots and lots little niches here

00:43:04,020 --> 00:43:08,130
they're everywhere but I didn't want to

00:43:05,610 --> 00:43:09,900
get into too far so it sees everything

00:43:08,130 --> 00:43:14,360
else in here that I was trying to cover

00:43:09,900 --> 00:43:14,360
I think that um question

00:43:26,520 --> 00:43:32,589
the question was he builds images with

00:43:30,640 --> 00:43:33,579
Packer or some other tool and he wants

00:43:32,589 --> 00:43:35,079
to install salt meeting without

00:43:33,579 --> 00:43:37,720
configuring it ahead of time the answer

00:43:35,079 --> 00:43:39,490
is yes if Saltman has salt minion has no

00:43:37,720 --> 00:43:41,200
configuration it will generate its

00:43:39,490 --> 00:43:44,140
default when it runs the first time

00:43:41,200 --> 00:43:46,390
likewise every salt minion has a key

00:43:44,140 --> 00:43:48,040
pair and if it starts up and sees oh I

00:43:46,390 --> 00:43:51,040
don't have a keeper it will generate one

00:43:48,040 --> 00:43:53,829
and it's instructed to either in the

00:43:51,040 --> 00:43:55,240
configuration file or as part of Etsy

00:43:53,829 --> 00:43:57,099
host or something it's going to look for

00:43:55,240 --> 00:44:00,040
the master it's looking for a host name

00:43:57,099 --> 00:44:02,920
and salt so if you were to precede the

00:44:00,040 --> 00:44:04,390
salt masters IP in the host file with

00:44:02,920 --> 00:44:07,119
the tag of salt it would automatically

00:44:04,390 --> 00:44:08,710
connect and at that point because salt

00:44:07,119 --> 00:44:11,470
master doesn't know the system's coming

00:44:08,710 --> 00:44:14,109
ahead of time you would see it show up

00:44:11,470 --> 00:44:16,390
in the salt key and you would have to

00:44:14,109 --> 00:44:18,430
specifically a pro boot I guess promote

00:44:16,390 --> 00:44:20,109
is the right word promote that key to

00:44:18,430 --> 00:44:22,030
okay I understand what you are you're

00:44:20,109 --> 00:44:24,970
allowed at that point it's it's brought

00:44:22,030 --> 00:44:26,950
in so that I've done it that way too I

00:44:24,970 --> 00:44:28,180
actually it's a little faster to do it

00:44:26,950 --> 00:44:31,180
that way because we see salt cod can be

00:44:28,180 --> 00:44:32,710
a bit sluggish right so but there's

00:44:31,180 --> 00:44:34,480
nothing quite like it for just bringing

00:44:32,710 --> 00:44:36,339
it right in and spooling up a cluster I

00:44:34,480 --> 00:44:38,140
mean it doesn't matter where you're

00:44:36,339 --> 00:44:39,280
going to like I was using vagrant to

00:44:38,140 --> 00:44:40,480
produce some of these things and there's

00:44:39,280 --> 00:44:41,710
a couple of providers in vagrant but

00:44:40,480 --> 00:44:43,540
there's nothing like the support that

00:44:41,710 --> 00:44:44,859
salt Claude has and as since I've moved

00:44:43,540 --> 00:44:46,630
over to using salt cloud I've been a lot

00:44:44,859 --> 00:44:48,040
happier I was going to try and actually

00:44:46,630 --> 00:44:50,109
do an example where I put the DB on the

00:44:48,040 --> 00:44:51,250
node and a web over on Rackspace and

00:44:50,109 --> 00:44:52,720
have them talk together but there was

00:44:51,250 --> 00:44:54,430
some firewall problems and I decided

00:44:52,720 --> 00:44:55,809
it's dropped that but it's very possible

00:44:54,430 --> 00:44:57,819
there's no reason you couldn't do that

00:44:55,809 --> 00:45:00,130
there's no reason you can do that in the

00:44:57,819 --> 00:45:02,260
same map file even because you're just

00:45:00,130 --> 00:45:03,940
specifying what profile to use and the

00:45:02,260 --> 00:45:07,750
profile specifies what provider to use

00:45:03,940 --> 00:45:08,640
so all of it is eminently flexible we

00:45:07,750 --> 00:45:11,940
have other questions

00:45:08,640 --> 00:45:11,940
another question

00:45:17,350 --> 00:45:21,980
it was it started the question was is it

00:45:19,760 --> 00:45:24,200
a community project or is it official

00:45:21,980 --> 00:45:26,090
product it started off as a community

00:45:24,200 --> 00:45:28,940
project and then about four years ago I

00:45:26,090 --> 00:45:31,660
moved into saltstack formal so it's now

00:45:28,940 --> 00:45:33,710
versions along with everything else and

00:45:31,660 --> 00:45:35,500
coming from having used this four years

00:45:33,710 --> 00:45:37,550
ago when it was to an independent tool

00:45:35,500 --> 00:45:38,990
sometimes I forget and I go and try and

00:45:37,550 --> 00:45:41,420
stall salt cloud from pip and it just

00:45:38,990 --> 00:45:43,220
doesn't work so you don't need to do

00:45:41,420 --> 00:45:45,080
that it just comes straight with your

00:45:43,220 --> 00:45:46,940
salt stack deployment which by the way

00:45:45,080 --> 00:45:48,770
the best way in my opinion to get cell

00:45:46,940 --> 00:45:50,570
stack is not to use a system package I

00:45:48,770 --> 00:45:51,560
would just go straight from pip because

00:45:50,570 --> 00:45:55,250
it's always gonna have the latest

00:45:51,560 --> 00:45:57,380
versions and one company I was doing

00:45:55,250 --> 00:45:58,940
they were required to use packages from

00:45:57,380 --> 00:46:00,620
a known good packaged source for

00:45:58,940 --> 00:46:02,630
security reasons so we were getting salt

00:46:00,620 --> 00:46:04,130
stack from Apple and that was very long

00:46:02,630 --> 00:46:07,010
and tooth and it was very annoying

00:46:04,130 --> 00:46:09,260
so if it's at all possible best to come

00:46:07,010 --> 00:46:10,520
from pip and try and stay within a

00:46:09,260 --> 00:46:13,010
version of the most recent because

00:46:10,520 --> 00:46:17,630
they're good on stability and it's

00:46:13,010 --> 00:46:19,570
helpful question oh that's right yeah

00:46:17,630 --> 00:46:21,830
they do now I don't never use it but

00:46:19,570 --> 00:46:23,480
there's an installers installations

00:46:21,830 --> 00:46:25,730
instructions for almost every operating

00:46:23,480 --> 00:46:27,320
system out there and a lot of them have

00:46:25,730 --> 00:46:28,580
their own repos already built so they

00:46:27,320 --> 00:46:30,770
didn't used to do that they're doing it

00:46:28,580 --> 00:46:32,170
now so that's good that would have

00:46:30,770 --> 00:46:38,020
solved my problem a couple years ago oh

00:46:32,170 --> 00:46:38,020
there are questions comments in the back

00:46:48,270 --> 00:46:52,180
the question was if there are other

00:46:50,530 --> 00:46:53,799
tools kind of included with saltstack

00:46:52,180 --> 00:46:56,380
that we could try without having to

00:46:53,799 --> 00:46:57,670
bring three kitchen sinks in if I

00:46:56,380 --> 00:47:00,780
understand your question quickly there's

00:46:57,670 --> 00:47:03,640
a couple let's go see in here what else

00:47:00,780 --> 00:47:05,710
my tab completion is not working okay

00:47:03,640 --> 00:47:07,329
here we go so there's other ways to

00:47:05,710 --> 00:47:09,640
invoke salt that don't require setting

00:47:07,329 --> 00:47:12,430
up a master for instance you can have a

00:47:09,640 --> 00:47:15,069
local only instance using salt call and

00:47:12,430 --> 00:47:16,599
salt call is a way of tricking a minion

00:47:15,069 --> 00:47:17,770
into thinking a master is giving it a

00:47:16,599 --> 00:47:20,049
command even though the command is

00:47:17,770 --> 00:47:21,880
coming from the local system so if you

00:47:20,049 --> 00:47:23,140
just want to play with salt just stick

00:47:21,880 --> 00:47:24,670
it on a system and start making salt

00:47:23,140 --> 00:47:25,299
calls and you can apply your state's or

00:47:24,670 --> 00:47:26,859
do whatever you want

00:47:25,299 --> 00:47:29,859
as if it was coming from a master

00:47:26,859 --> 00:47:34,450
without having create two VMs there's

00:47:29,859 --> 00:47:36,970
also other Oh okay excuse me

00:47:34,450 --> 00:47:38,319
you can set local okay I think I have an

00:47:36,970 --> 00:47:42,130
alias that does it because I thought

00:47:38,319 --> 00:47:43,480
about it yeah let's see other tools I

00:47:42,130 --> 00:47:44,980
don't remember what salt CP does do you

00:47:43,480 --> 00:47:47,680
remember what that does I don't ever use

00:47:44,980 --> 00:47:50,829
it oh okay

00:47:47,680 --> 00:47:52,750
so using the salt bus it copies a file

00:47:50,829 --> 00:47:55,630
from wherever you're making the command

00:47:52,750 --> 00:47:57,309
to the minions you specify so like I

00:47:55,630 --> 00:47:58,960
need to update this configuration file

00:47:57,309 --> 00:48:00,849
on this one system and I don't want to

00:47:58,960 --> 00:48:02,819
write a state for it just freakin do it

00:48:00,849 --> 00:48:04,779
just salt CP it okay great

00:48:02,819 --> 00:48:06,220
and there's some other tools in here I

00:48:04,779 --> 00:48:10,960
don't know what salt unity is for I've

00:48:06,220 --> 00:48:12,130
never used it before oh wow it's all

00:48:10,960 --> 00:48:13,240
unity combines all their mate commands

00:48:12,130 --> 00:48:16,420
together I should probably look at that

00:48:13,240 --> 00:48:17,859
sometimes I think is hard so there are

00:48:16,420 --> 00:48:20,349
some other tools kind of floating around

00:48:17,859 --> 00:48:21,579
and there's some other pieces that you

00:48:20,349 --> 00:48:23,109
can bring in we haven't even talked

00:48:21,579 --> 00:48:24,369
about things like the reactor and all

00:48:23,109 --> 00:48:26,859
these other pieces that are built into

00:48:24,369 --> 00:48:28,410
salt that you'll probably run into if

00:48:26,859 --> 00:48:30,460
you start doing complicated pipelines

00:48:28,410 --> 00:48:32,470
that may not have their own specific

00:48:30,460 --> 00:48:34,539
indications like I was talking earlier

00:48:32,470 --> 00:48:36,670
about mine provisioning pipeline from

00:48:34,539 --> 00:48:38,980
before I had these event states so I

00:48:36,670 --> 00:48:40,329
would set up something to listen on the

00:48:38,980 --> 00:48:41,770
master for an event coming from the

00:48:40,329 --> 00:48:43,869
minion that said a certain thing like

00:48:41,770 --> 00:48:45,730
I'm done with this step and then it

00:48:43,869 --> 00:48:47,109
would send the event pack the master

00:48:45,730 --> 00:48:49,539
would pick it up with a little event

00:48:47,109 --> 00:48:50,319
handler and do something get ready for

00:48:49,539 --> 00:48:52,750
the next step

00:48:50,319 --> 00:48:54,640
tell it to reboot any number of things

00:48:52,750 --> 00:48:56,230
that's just baked into salt that you can

00:48:54,640 --> 00:48:58,539
play with without needing to pull down

00:48:56,230 --> 00:49:00,330
another kitchen sink no have I answered

00:48:58,539 --> 00:49:04,640
your question

00:49:00,330 --> 00:49:04,640
okay other questions comments yes sir

00:49:07,820 --> 00:49:16,530
yes the vents are passing over that 0nq

00:49:10,620 --> 00:49:22,730
bus yes you can actually let's do that I

00:49:16,530 --> 00:49:22,730
believe it is so wrong state that event

00:49:24,440 --> 00:49:33,720
thank you Mike I think that's it yeah

00:49:29,040 --> 00:49:36,090
okay so now we're tapped in snaps at the

00:49:33,720 --> 00:49:46,560
top of our screen and let's go test up

00:49:36,090 --> 00:49:49,710
ping something okay so if we go back

00:49:46,560 --> 00:49:51,960
over to our event we'll see two events

00:49:49,710 --> 00:49:56,040
here one is the outgoing that was the

00:49:51,960 --> 00:49:58,320
command out to the system right there

00:49:56,040 --> 00:49:59,910
and then this is the return from the

00:49:58,320 --> 00:50:01,920
menu saying here's the response to the

00:49:59,910 --> 00:50:03,270
job you just created and it's actually

00:50:01,920 --> 00:50:04,290
pretty fun to watch this especially if

00:50:03,270 --> 00:50:06,150
you're trying to troubleshoot your very

00:50:04,290 --> 00:50:08,010
complicated deploy pipeline with lots of

00:50:06,150 --> 00:50:09,120
events you kind of need to do this now

00:50:08,010 --> 00:50:10,980
you don't need to look at every event

00:50:09,120 --> 00:50:12,330
because especially on a busy system with

00:50:10,980 --> 00:50:15,210
lots of minions there's gonna be tons of

00:50:12,330 --> 00:50:16,470
things going across every in hours they

00:50:15,210 --> 00:50:19,170
are rehashing to make sure that their

00:50:16,470 --> 00:50:20,700
security hasn't changed and you probably

00:50:19,170 --> 00:50:22,560
have periodic stuff you're running and

00:50:20,700 --> 00:50:23,760
high states and other stuff so when you

00:50:22,560 --> 00:50:26,400
run this command you probably want to

00:50:23,760 --> 00:50:28,680
filter oh go away there's a way to do a

00:50:26,400 --> 00:50:31,350
tag equals and you can filter on just

00:50:28,680 --> 00:50:33,060
certain event tags so like when you're

00:50:31,350 --> 00:50:34,080
when you're declaring your events thank

00:50:33,060 --> 00:50:35,340
you when you're declaring your events

00:50:34,080 --> 00:50:37,860
for your provisioning pipeline you get

00:50:35,340 --> 00:50:40,620
to name the events so you can name it

00:50:37,860 --> 00:50:42,270
something peculiar like Pelican if you

00:50:40,620 --> 00:50:44,010
want and you can just do a search on

00:50:42,270 --> 00:50:45,840
Pelican and it'll only show you events

00:50:44,010 --> 00:50:48,810
that are named or have Pelican in the

00:50:45,840 --> 00:50:50,130
name of the event stuff like that so you

00:50:48,810 --> 00:50:52,080
can watch this it's actually pretty cool

00:50:50,130 --> 00:50:53,850
to watch what's happening it really

00:50:52,080 --> 00:50:55,920
exposes the internals and you realize

00:50:53,850 --> 00:50:57,690
okay for all its complexity saltstack

00:50:55,920 --> 00:51:00,270
actually doesn't have that much depth

00:50:57,690 --> 00:51:02,340
it's just doing this all it does is it

00:51:00,270 --> 00:51:04,860
puts a command on the bus and the minion

00:51:02,340 --> 00:51:07,370
does everything else so you had a

00:51:04,860 --> 00:51:07,370
question Mike

00:51:23,870 --> 00:51:28,890
okay so the question was discussing the

00:51:27,240 --> 00:51:30,750
differences between salts back and

00:51:28,890 --> 00:51:32,880
ansible knowing that salt stock is that

00:51:30,750 --> 00:51:34,500
master minyan system and ansible is just

00:51:32,880 --> 00:51:37,440
the simple push via SSH

00:51:34,500 --> 00:51:39,510
I actually prefer ansible for small

00:51:37,440 --> 00:51:41,970
things because it's very easy to get in

00:51:39,510 --> 00:51:43,380
and declare but I don't like it anytime

00:51:41,970 --> 00:51:45,420
you have to do anything complicated and

00:51:43,380 --> 00:51:47,340
ansible was designed to be very very

00:51:45,420 --> 00:51:48,840
simple and it's great it means you can

00:51:47,340 --> 00:51:51,180
get in and jump into something fast but

00:51:48,840 --> 00:51:53,040
it means it doesn't support some things

00:51:51,180 --> 00:51:54,810
that I like and it's also more difficult

00:51:53,040 --> 00:51:56,400
to support patterns like don't repeat

00:51:54,810 --> 00:51:57,990
yourself is actually somewhat difficult

00:51:56,400 --> 00:52:00,060
to implement in ansible you have to go

00:51:57,990 --> 00:52:00,900
and call a task in a row and do it

00:52:00,060 --> 00:52:02,340
include and it's actually a little

00:52:00,900 --> 00:52:03,930
cantankerous it stinks

00:52:02,340 --> 00:52:05,940
but in salt stack that's easy it's just

00:52:03,930 --> 00:52:07,590
a simple include so the second I need

00:52:05,940 --> 00:52:09,000
something more complicated than what

00:52:07,590 --> 00:52:10,760
ansible can do easily that's and I

00:52:09,000 --> 00:52:13,920
prefer to hop over to salt stack and

00:52:10,760 --> 00:52:16,890
where ansible has no equivalent like in

00:52:13,920 --> 00:52:19,830
creating and provisioning VMs I use salt

00:52:16,890 --> 00:52:22,290
stack there for sure I have done a lot

00:52:19,830 --> 00:52:23,970
of my personal automation in both mores

00:52:22,290 --> 00:52:26,430
just to make sure I'm keeping my skills

00:52:23,970 --> 00:52:29,850
sharp I tend to use ansible because it's

00:52:26,430 --> 00:52:31,470
easier to do quick stuff but like I'm

00:52:29,850 --> 00:52:33,210
about to build a new pipeline for a

00:52:31,470 --> 00:52:34,680
client now and we're gonna have to use

00:52:33,210 --> 00:52:36,060
salt cloud to do the beginning of it and

00:52:34,680 --> 00:52:37,320
it's up in the air whether we're going

00:52:36,060 --> 00:52:39,990
to use ansible which we've already

00:52:37,320 --> 00:52:43,170
invested in and salt stack which does

00:52:39,990 --> 00:52:45,720
the pieces we can't do yet so I don't

00:52:43,170 --> 00:52:47,760
have a good answer personal preference

00:52:45,720 --> 00:52:49,230
just lays and laying where how

00:52:47,760 --> 00:52:53,270
complicated the thing is I'm trying to

00:52:49,230 --> 00:52:53,270
do question/comment

00:52:57,390 --> 00:53:04,319
ah yes he pointed out that I do not have

00:53:01,890 --> 00:53:07,680
salt SSH and he noticed that because my

00:53:04,319 --> 00:53:09,509
dad completion wasn't working so Saul

00:53:07,680 --> 00:53:10,589
that's this age this goes back to the

00:53:09,509 --> 00:53:12,029
gentleman in the back with the question

00:53:10,589 --> 00:53:14,160
about can I use tools that are

00:53:12,029 --> 00:53:15,630
associated with it without incorporating

00:53:14,160 --> 00:53:18,569
yet another kitchen saying solid SSH

00:53:15,630 --> 00:53:19,920
let's you pretend like you're got a

00:53:18,569 --> 00:53:21,869
minion on a remote system but you're

00:53:19,920 --> 00:53:24,269
really just using SSH exactly what

00:53:21,869 --> 00:53:25,880
ansible does facta code is pretty

00:53:24,269 --> 00:53:28,739
similar to probably using the same

00:53:25,880 --> 00:53:30,869
library calls underneath to do it but

00:53:28,739 --> 00:53:32,099
they're both ansible and saltstack what

00:53:30,869 --> 00:53:34,049
they're doing is they're creating an

00:53:32,099 --> 00:53:36,660
on-the-fly Python script with all the

00:53:34,049 --> 00:53:40,200
things you've told it to do downloading

00:53:36,660 --> 00:53:41,849
it to the system with using 0 mq and

00:53:40,200 --> 00:53:45,239
saltstack and SSH and ansible

00:53:41,849 --> 00:53:46,529
and running it there so that's what's

00:53:45,239 --> 00:53:48,720
happening in the background and the

00:53:46,529 --> 00:53:51,630
vehicle in which the script gets to the

00:53:48,720 --> 00:53:53,099
system kind of doesn't matter as much so

00:53:51,630 --> 00:53:54,390
if you'd want to go a little bit simpler

00:53:53,099 --> 00:53:56,249
you don't have to do all this master of

00:53:54,390 --> 00:53:56,789
a minion crap or key handling and all

00:53:56,249 --> 00:54:01,589
that stuff

00:53:56,789 --> 00:54:04,249
just use all this sh works great any

00:54:01,589 --> 00:54:05,910
other questions or comments

00:54:04,249 --> 00:54:07,560
alright guys thanks for coming

00:54:05,910 --> 00:54:12,739
appreciate it

00:54:07,560 --> 00:54:12,739

YouTube URL: https://www.youtube.com/watch?v=QqvXa3qnyZ8


