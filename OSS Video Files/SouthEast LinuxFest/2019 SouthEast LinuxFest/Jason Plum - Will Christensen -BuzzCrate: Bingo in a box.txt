Title: Jason Plum - Will Christensen -BuzzCrate: Bingo in a box
Publication date: 2019-06-19
Playlist: 2019 SouthEast LinuxFest
Description: 
	SouthEast Linux Fest 2019
Teaser:
 Your managers dream has finally come true: Rancher kubernetes, GitLab CI/CD, configuration management, microservices dev cluster, on demo hardware, all without a single consultant.... in a container the size of two shoes, for less than a few pairs of Air Jordans.

Synopsis:
 Cheap DevOps CI/CD Kubernetes cluster in a box (or two) on your desk. Based on cost effective ARM single board computers that can be easily extended on the cheap. This development cluster allows an organization on a small hardware procurement (cheaper than a laptop) to have their multi-agent cluster without the need of a data center or monthly cloud provider bill.
 Buzz words will abound, but this real world solution will be live and replicable without a PhD in hybrid network convergent clusterological automated cloud development operations with immediate angelic ROI. A manager will now have a real world thing to point to when an organization says DevOps while trying to define it. An engineer can get hands on with bare metal that can help with deploying to local or cloud data centers. A team will actually understand the systems behind the magic of microservice development, deployment, and infrastructure to be developed in a supported air-gap capable environment. 
 For companies with an existing kubernetes deployment, this BuzzCrate can allow benchmarking of solutions to ensure strategies deployed elsewhere perform as expected, and their providers.  Every part of a deployment from development, benchmarking, QA, general architecture, ingress, and security can be done on separately for a cost less than what is required for capital expenditure. Learn how a home lab produces an enterprise worthy turn key proof of concept ... that fits in a shoe box
Captions: 
	00:00:52,690 --> 00:00:57,649
all right hello everyone welcome to the

00:00:55,609 --> 00:01:01,940
talk on bus crate

00:00:57,649 --> 00:01:04,430
bingo in a box my name is William

00:01:01,940 --> 00:01:06,710
Christensen I'm DevOps and automation

00:01:04,430 --> 00:01:09,380
engineer ok

00:01:06,710 --> 00:01:11,659
DevOps an automation engineer working

00:01:09,380 --> 00:01:14,229
with kubernetes at work contractor Jason

00:01:11,659 --> 00:01:16,460
plumb works at get lab he's one of the

00:01:14,229 --> 00:01:18,560
architects for a lot of the helm

00:01:16,460 --> 00:01:21,740
installs for when you get the lab home

00:01:18,560 --> 00:01:25,670
install it's a lot of his doing go enjoy

00:01:21,740 --> 00:01:26,899
his rather large helm chart on that yeah

00:01:25,670 --> 00:01:28,399
aside from that you guys may have seen

00:01:26,899 --> 00:01:30,950
me before other people may know me from

00:01:28,399 --> 00:01:33,590
my work with arch linux arm and other

00:01:30,950 --> 00:01:34,869
things involved with kubernetes dr. or

00:01:33,590 --> 00:01:38,990
some of the kernel bits things like that

00:01:34,869 --> 00:01:39,440
so first off everybody read the little

00:01:38,990 --> 00:01:42,470
pamphlet

00:01:39,440 --> 00:01:44,780
okay so for those of you at home who may

00:01:42,470 --> 00:01:47,119
have not actually seen this we're gonna

00:01:44,780 --> 00:01:49,369
tell you about what we're referring to

00:01:47,119 --> 00:01:50,600
as buzz great right we call it bingo box

00:01:49,369 --> 00:01:52,820
because what we're talking about today

00:01:50,600 --> 00:01:55,280
has a lot of buzzwords and we can manage

00:01:52,820 --> 00:01:56,420
to fit it in a box and we just decided

00:01:55,280 --> 00:01:59,090
to call it crate for the giggles of it

00:01:56,420 --> 00:02:02,180
because everybody has a bleeping great

00:01:59,090 --> 00:02:03,380
thing that you can subscribe to I mean

00:02:02,180 --> 00:02:05,289
if you really want to subscribe to me

00:02:03,380 --> 00:02:10,220
sending you boxes like this every month

00:02:05,289 --> 00:02:12,590
good money yeah okay think of Harvard

00:02:10,220 --> 00:02:13,820
Business Weekly this would probably one

00:02:12,590 --> 00:02:15,980
of the crates that would have for one of

00:02:13,820 --> 00:02:17,269
the CIS OS at some point I could see

00:02:15,980 --> 00:02:19,100
them actually literally sending them an

00:02:17,269 --> 00:02:23,660
entire kubernetes cluster in a box just

00:02:19,100 --> 00:02:26,870
because so we had fun with it alright so

00:02:23,660 --> 00:02:29,150
the why um so a lot of organizations are

00:02:26,870 --> 00:02:32,030
gonna be looking at kubernetes if you

00:02:29,150 --> 00:02:33,590
heard Robert earlier he was talking

00:02:32,030 --> 00:02:35,630
about you know small organizations why

00:02:33,590 --> 00:02:37,730
should they use it or use kubernetes

00:02:35,630 --> 00:02:38,810
there's a lot of learning curve there's

00:02:37,730 --> 00:02:40,870
a lot of infrastructure a lot of

00:02:38,810 --> 00:02:43,280
resources and the biggest thing is

00:02:40,870 --> 00:02:45,019
trying to figure out if you can use it

00:02:43,280 --> 00:02:47,750
to evaluate the tools there's a lot of

00:02:45,019 --> 00:02:49,220
things you need to do if you if you're a

00:02:47,750 --> 00:02:50,959
consult or if you're working at a

00:02:49,220 --> 00:02:52,130
company and you want to ensure you know

00:02:50,959 --> 00:02:53,690
that you're going to be successful

00:02:52,130 --> 00:02:55,790
you're gonna get grabbed consultants for

00:02:53,690 --> 00:02:56,500
hours which are going to be expensive

00:02:55,790 --> 00:02:58,810
sometimes

00:02:56,500 --> 00:03:01,720
range of like $200 an hour for a good

00:02:58,810 --> 00:03:03,250
architect and you don't have to worry

00:03:01,720 --> 00:03:05,470
about cloud hosting nightmares so if

00:03:03,250 --> 00:03:07,450
you're a group that has a lot in a data

00:03:05,470 --> 00:03:09,250
center and you're looking at going you

00:03:07,450 --> 00:03:11,560
know into the cloud there may be some

00:03:09,250 --> 00:03:13,690
expenses that while playing around with

00:03:11,560 --> 00:03:14,830
the inventory that are with the catalog

00:03:13,690 --> 00:03:17,950
that you may end up with a rather large

00:03:14,830 --> 00:03:19,959
AWS bill for absolutely nothing

00:03:17,950 --> 00:03:23,280
mini cube is a good way of getting

00:03:19,959 --> 00:03:25,420
introduced to kubernetes however well

00:03:23,280 --> 00:03:27,910
we're gonna go over mini cube in detail

00:03:25,420 --> 00:03:30,280
later so I'll summarize it as mini cube

00:03:27,910 --> 00:03:31,900
is actually converted A's recommended

00:03:30,280 --> 00:03:33,970
method of getting a toy system to be

00:03:31,900 --> 00:03:36,040
able to play with it has definitive

00:03:33,970 --> 00:03:38,770
upsize but it has a few very definitive

00:03:36,040 --> 00:03:42,220
downsides at the same point however as

00:03:38,770 --> 00:03:43,959
well was mentioning costs on mini cube

00:03:42,220 --> 00:03:46,989
yeah it's free except for the hardware

00:03:43,959 --> 00:03:49,480
you need to actually get it to work but

00:03:46,989 --> 00:03:52,209
the big difference is in three and a

00:03:49,480 --> 00:03:54,550
half months of an AWS bill for the

00:03:52,209 --> 00:03:57,760
minimal configuration to run a Cabernets

00:03:54,550 --> 00:04:00,610
cluster you can actually have one of

00:03:57,760 --> 00:04:02,470
these it's very simple yeah just imagine

00:04:00,610 --> 00:04:06,250
if your windows developer you're running

00:04:02,470 --> 00:04:09,100
a VM to simulate a cluster in a VM plus

00:04:06,250 --> 00:04:11,380
your dev tools on your local system cost

00:04:09,100 --> 00:04:13,120
we found out with the through cost

00:04:11,380 --> 00:04:15,340
analysis of the clusters that we built

00:04:13,120 --> 00:04:17,470
that about three and a half months of

00:04:15,340 --> 00:04:20,530
AWS bill would equal what we have for

00:04:17,470 --> 00:04:22,630
everything on that table for one of the

00:04:20,530 --> 00:04:25,240
clusters the more expensive one

00:04:22,630 --> 00:04:26,979
fishbowl factor so if you ever talk to

00:04:25,240 --> 00:04:29,350
your manager and you want to introduce

00:04:26,979 --> 00:04:30,520
them to a concept if they can't point to

00:04:29,350 --> 00:04:32,290
it touch it see it that kind of stuff

00:04:30,520 --> 00:04:34,060
they're not going to support it air-gap

00:04:32,290 --> 00:04:37,150
doesn't matter if you know what IT says

00:04:34,060 --> 00:04:40,080
and shippable if you have a dev team in

00:04:37,150 --> 00:04:42,850
another country or another state and

00:04:40,080 --> 00:04:44,200
they don't have access to AWS or

00:04:42,850 --> 00:04:45,940
whatever you have for a cloud or your

00:04:44,200 --> 00:04:47,290
on-prem you can actually ship them

00:04:45,940 --> 00:04:48,970
something they can develop locally which

00:04:47,290 --> 00:04:53,160
helps out a lot and saves against

00:04:48,970 --> 00:04:53,160
getting a laptop that can run mini cube

00:04:55,770 --> 00:05:01,840
no all right so cloud providers they're

00:04:59,830 --> 00:05:03,520
great but if you're working in a big

00:05:01,840 --> 00:05:07,030
company there's bureaucracy for you know

00:05:03,520 --> 00:05:08,200
getting the actual cost center to have

00:05:07,030 --> 00:05:10,560
you know the company corporate credit

00:05:08,200 --> 00:05:12,840
card which also affects budgets

00:05:10,560 --> 00:05:14,340
if you were working with sensitive data

00:05:12,840 --> 00:05:15,660
there's questions let's say if it's

00:05:14,340 --> 00:05:17,070
HIPAA if you're working in government

00:05:15,660 --> 00:05:19,770
there might be two other questions on

00:05:17,070 --> 00:05:21,900
how to get a FedRAMP that kind of stuff

00:05:19,770 --> 00:05:24,300
and in the end when you have someone who

00:05:21,900 --> 00:05:25,980
or who actually procures you know

00:05:24,300 --> 00:05:29,060
whatever you need in the cloud the next

00:05:25,980 --> 00:05:32,550
question is how do you distribute access

00:05:29,060 --> 00:05:34,380
so accident ever done anything with the

00:05:32,550 --> 00:05:37,800
federal requirement so in any of their

00:05:34,380 --> 00:05:39,740
code or any of their work anybody yeah

00:05:37,800 --> 00:05:43,620
for those at home that's half the crowd

00:05:39,740 --> 00:05:45,090
okay y'all know my pain now imagine you

00:05:43,620 --> 00:05:49,170
have to do this magically in the cloud

00:05:45,090 --> 00:05:52,200
and if you screw up it's all public mmm

00:05:49,170 --> 00:05:53,700
no okay now we got a bureaucracy because

00:05:52,200 --> 00:05:55,200
you have to convince somebody for you to

00:05:53,700 --> 00:05:56,760
do a pot you have to put it in the cloud

00:05:55,200 --> 00:05:59,250
because that's where the providers

00:05:56,760 --> 00:06:02,220
aren't that ain't gonna happen

00:05:59,250 --> 00:06:04,770
right so especially when it comes to

00:06:02,220 --> 00:06:07,080
cloud providers you may already have an

00:06:04,770 --> 00:06:08,940
access agreement and but to get access

00:06:07,080 --> 00:06:09,960
to that you then have to have budget for

00:06:08,940 --> 00:06:11,430
it which means you have to go through

00:06:09,960 --> 00:06:14,100
five layers of red tape and bureaucracy

00:06:11,430 --> 00:06:15,300
and then even then is it gonna take you

00:06:14,100 --> 00:06:16,940
three months to get through that before

00:06:15,300 --> 00:06:20,400
you can actually do a proof of concept

00:06:16,940 --> 00:06:21,990
well it's gonna be a problem right but

00:06:20,400 --> 00:06:24,740
what if you actually have a time span

00:06:21,990 --> 00:06:27,840
where you need to do something right

00:06:24,740 --> 00:06:29,970
well what if you had one of these

00:06:27,840 --> 00:06:33,180
shoeboxes on your desk where you could

00:06:29,970 --> 00:06:34,980
have everything that you need that fits

00:06:33,180 --> 00:06:37,800
in less than the cost of a pair of

00:06:34,980 --> 00:06:38,730
monitors and you could just get her done

00:06:37,800 --> 00:06:39,960
because you don't have to worry about

00:06:38,730 --> 00:06:41,250
any of those things you can actually

00:06:39,960 --> 00:06:43,410
have a dev environment that you can work

00:06:41,250 --> 00:06:46,110
with in a closed environment air-gapped

00:06:43,410 --> 00:06:48,150
and without dealing with bureaucracy or

00:06:46,110 --> 00:06:50,190
budgets because most places have a

00:06:48,150 --> 00:06:52,470
line-item cost below 500 they don't even

00:06:50,190 --> 00:06:54,120
care agreements you don't have to worry

00:06:52,470 --> 00:06:56,460
about your partners and your consults

00:06:54,120 --> 00:06:57,840
and everything else and the access well

00:06:56,460 --> 00:07:00,170
you're literally the only one who has

00:06:57,840 --> 00:07:03,270
access because it's not on your network

00:07:00,170 --> 00:07:07,950
several pieces solved if you don't use

00:07:03,270 --> 00:07:09,630
the clout but now let's take a very

00:07:07,950 --> 00:07:11,610
quick look at comparison about why we

00:07:09,630 --> 00:07:13,560
chose to do this versus go with some of

00:07:11,610 --> 00:07:15,390
the existing stuff if you're not using a

00:07:13,560 --> 00:07:18,090
cloud provider in some way you have to

00:07:15,390 --> 00:07:19,950
roll your own because everybody's cloud

00:07:18,090 --> 00:07:21,720
is just somebody else the server now you

00:07:19,950 --> 00:07:24,630
get to roll your own cloud on your own

00:07:21,720 --> 00:07:26,880
servers okay should be

00:07:24,630 --> 00:07:30,440
well let's look at the large commercial

00:07:26,880 --> 00:07:34,729
clusters such as open shift from Red Hat

00:07:30,440 --> 00:07:38,789
here's a hint $200 now our contractor

00:07:34,729 --> 00:07:42,570
mm-hmm you're gonna have at least one of

00:07:38,789 --> 00:07:45,900
them if not two and the project manager

00:07:42,570 --> 00:07:48,229
and you get the point right perfect

00:07:45,900 --> 00:07:52,199
concept anybody there went your budget

00:07:48,229 --> 00:07:54,180
all of it right let's look at some

00:07:52,199 --> 00:07:57,300
turnkey solutions you can go with things

00:07:54,180 --> 00:07:59,130
like Cantina Pharaohs which actually is

00:07:57,300 --> 00:08:02,610
a pretty much installable version

00:07:59,130 --> 00:08:03,630
however there is still some consulting

00:08:02,610 --> 00:08:05,520
you're gonna need to get the base

00:08:03,630 --> 00:08:06,690
configuration let's skip the hardware

00:08:05,520 --> 00:08:08,280
requirements that you're going to need

00:08:06,690 --> 00:08:10,259
for this because if you look into it

00:08:08,280 --> 00:08:12,360
you're gonna need several relatively

00:08:10,259 --> 00:08:16,160
beefy servers to make that fully

00:08:12,360 --> 00:08:19,590
function let's look at VMware and their

00:08:16,160 --> 00:08:21,270
pivotal kubernetes pkas is actually very

00:08:19,590 --> 00:08:23,070
very good at what it does and it's

00:08:21,270 --> 00:08:25,889
highly automated so it's very reliable

00:08:23,070 --> 00:08:30,150
the problem is for you to understand how

00:08:25,889 --> 00:08:31,889
it works is going to take you weeks for

00:08:30,150 --> 00:08:35,700
them to install it for you after

00:08:31,889 --> 00:08:38,070
procurement is going to take weeks again

00:08:35,700 --> 00:08:39,419
do you have that kind of time or do you

00:08:38,070 --> 00:08:42,750
even know what the budget constraints

00:08:39,419 --> 00:08:44,159
are how about roll-your-own anybody ever

00:08:42,750 --> 00:08:47,430
tried to roll their own kubernetes

00:08:44,159 --> 00:08:52,080
server from scratch anybody we got one

00:08:47,430 --> 00:08:54,120
two three a sucker and yeah here's a

00:08:52,080 --> 00:08:58,800
hint for anybody who hasn't tried it yet

00:08:54,120 --> 00:09:01,740
don't it's hard right I'm not saying

00:08:58,800 --> 00:09:04,529
don't learn how I'm saying do not do

00:09:01,740 --> 00:09:06,240
this for your pock do it to learn it do

00:09:04,529 --> 00:09:10,170
it to do your in own infrastructure once

00:09:06,240 --> 00:09:11,820
you have proven the technology unless

00:09:10,170 --> 00:09:13,320
you know how to roll your own Linux

00:09:11,820 --> 00:09:15,959
distribution and how to know the

00:09:13,320 --> 00:09:18,120
difference between G live seeds versions

00:09:15,959 --> 00:09:21,750
and why it matters and how you can break

00:09:18,120 --> 00:09:25,050
DNS using muscle and a networking

00:09:21,750 --> 00:09:27,209
certificate or 10 yeah let's just say

00:09:25,050 --> 00:09:27,600
it's really complex and much more than

00:09:27,209 --> 00:09:30,440
you think

00:09:27,600 --> 00:09:34,290
kubernetes is actually a platform not

00:09:30,440 --> 00:09:37,870
just a tool so let's look at the other

00:09:34,290 --> 00:09:40,230
option which is the easy ones these are

00:09:37,870 --> 00:09:43,570
turn-key easy to install easy to deploy

00:09:40,230 --> 00:09:45,640
Rancher actually has two they have our

00:09:43,570 --> 00:09:46,960
ke which is Rancher kubernetes engine

00:09:45,640 --> 00:09:49,360
and they actually make a nice little

00:09:46,960 --> 00:09:51,460
command-line tool where you write a very

00:09:49,360 --> 00:09:55,089
small chunk of the animal and then run

00:09:51,460 --> 00:09:56,800
our ke up and as long as you can manage

00:09:55,089 --> 00:09:58,390
to SSH to all the nodes you told it

00:09:56,800 --> 00:09:59,920
it'll fire them all up and give you

00:09:58,390 --> 00:10:04,839
full-blown caperna T's with all the

00:09:59,920 --> 00:10:08,770
features now again do you know your

00:10:04,839 --> 00:10:14,589
hardware requirements hey anybody here

00:10:08,770 --> 00:10:17,290
know what etcd is what console is okay

00:10:14,589 --> 00:10:19,089
cool how much do you need to keep a

00:10:17,290 --> 00:10:23,940
minimum with a three node cluster online

00:10:19,089 --> 00:10:26,620
with etcd when it's doing nothing right

00:10:23,940 --> 00:10:28,120
you need three to five nodes and those

00:10:26,620 --> 00:10:31,029
nodes should probably have a fast disk

00:10:28,120 --> 00:10:33,100
now imagine that all of the key data

00:10:31,029 --> 00:10:37,620
stores for the entire platform are

00:10:33,100 --> 00:10:42,220
stored in etcd where did your i/o ops go

00:10:37,620 --> 00:10:44,410
funk straight up why because now all of

00:10:42,220 --> 00:10:50,020
your nodes all have to know all the time

00:10:44,410 --> 00:10:52,080
and went consensus breaks yeah so did

00:10:50,020 --> 00:10:57,490
everything else say the least

00:10:52,080 --> 00:10:58,779
now rancher also made k3s now I'll cover

00:10:57,490 --> 00:11:00,610
this in more detail in a minute but

00:10:58,779 --> 00:11:03,970
basically it's a stripped-down version

00:11:00,610 --> 00:11:06,010
fully contained copy of kubernetes that

00:11:03,970 --> 00:11:08,290
you can run on multiple things and it's

00:11:06,010 --> 00:11:09,760
one static binary that can run all the

00:11:08,290 --> 00:11:12,370
services that are needed they

00:11:09,760 --> 00:11:17,830
interchanged a few parts and to drop the

00:11:12,370 --> 00:11:21,400
requirements by up to 70% just for the

00:11:17,830 --> 00:11:22,930
platform operation okay and then you can

00:11:21,400 --> 00:11:26,920
also look at something called micro case

00:11:22,930 --> 00:11:29,380
which is a snap distributed method of

00:11:26,920 --> 00:11:33,490
doing containerized kubernetes on your

00:11:29,380 --> 00:11:35,800
workstation that sounds nifty and if you

00:11:33,490 --> 00:11:39,970
know how it works probably not a bad

00:11:35,800 --> 00:11:41,830
choice if you know how it works you know

00:11:39,970 --> 00:11:44,440
why there's upsides and downsides but

00:11:41,830 --> 00:11:45,940
leave it at that's gonna basically pull

00:11:44,440 --> 00:11:48,670
down everything for you run it locally

00:11:45,940 --> 00:11:50,860
and you better pray your machine can

00:11:48,670 --> 00:11:51,870
hold up because it's heavier than it

00:11:50,860 --> 00:11:54,880
looks

00:11:51,870 --> 00:11:56,320
meaning cube it's easy it's

00:11:54,880 --> 00:11:58,390
straightforward and the nice part is

00:11:56,320 --> 00:12:01,690
it'll actually run from the upstream

00:11:58,390 --> 00:12:05,440
sources and it's solid there's some

00:12:01,690 --> 00:12:08,140
downsides to mini cube though it's a

00:12:05,440 --> 00:12:11,190
very handy behemoth it'll run on Windows

00:12:08,140 --> 00:12:14,020
it'll run on OSX it'll run on Linux

00:12:11,190 --> 00:12:18,399
sorry not run on it'll run in a VM on

00:12:14,020 --> 00:12:21,550
let me be specific so anybody know why

00:12:18,399 --> 00:12:25,720
running VMs on the local machine with a

00:12:21,550 --> 00:12:29,110
network bridge is complex anybody here's

00:12:25,720 --> 00:12:32,970
a hint how do you get dns to work right

00:12:29,110 --> 00:12:36,940
how does example.com work yeah

00:12:32,970 --> 00:12:39,370
but I put it in my hosts file nope that

00:12:36,940 --> 00:12:43,600
ain't gonna work boys now your DNS works

00:12:39,370 --> 00:12:46,240
but the cluster's doesn't oops the

00:12:43,600 --> 00:12:48,550
reasonable based requirements by default

00:12:46,240 --> 00:12:49,779
it wants to CPU and four gigs of RAM

00:12:48,550 --> 00:12:52,029
this should be enough for most things

00:12:49,779 --> 00:12:53,920
right unless you have a large

00:12:52,029 --> 00:12:57,370
application or a memory hungry

00:12:53,920 --> 00:12:59,650
application or a application suite that

00:12:57,370 --> 00:13:03,160
is all of those things and then you just

00:12:59,650 --> 00:13:05,980
kind of watch it go splat anybody got a

00:13:03,160 --> 00:13:10,060
Mac you're not on camera you can wave

00:13:05,980 --> 00:13:13,570
it's okay right when is the last time

00:13:10,060 --> 00:13:15,820
you took a Mac with less than 16 gigs

00:13:13,570 --> 00:13:20,860
and told it to start a VM with 4 gigs

00:13:15,820 --> 00:13:22,650
and didn't melt down in other words I've

00:13:20,860 --> 00:13:26,440
seen a lot of hovering laptops right

00:13:22,650 --> 00:13:28,930
yeah the problem is the way it operates

00:13:26,440 --> 00:13:30,370
makes it actually a Performa tog right

00:13:28,930 --> 00:13:31,930
because you're actually running all of

00:13:30,370 --> 00:13:34,779
kubernetes on top of that so you've got

00:13:31,930 --> 00:13:36,550
a little mini instance of etcd and

00:13:34,779 --> 00:13:38,920
you've got all the networking layers and

00:13:36,550 --> 00:13:40,720
you've got all the orchestration and all

00:13:38,920 --> 00:13:43,180
the memory overhead that four gigs of

00:13:40,720 --> 00:13:46,329
ram you're losing one gig just to the

00:13:43,180 --> 00:13:48,730
platform okay now you have three gigs to

00:13:46,329 --> 00:13:52,570
play with I hope everything you have

00:13:48,730 --> 00:13:53,890
takes that much RAM and don't do

00:13:52,570 --> 00:13:55,329
anything CPU intensive because you've

00:13:53,890 --> 00:13:57,430
only got two and one of them is being

00:13:55,329 --> 00:14:01,690
eaten by the platform when running in

00:13:57,430 --> 00:14:03,970
mini queue if you want to do this with a

00:14:01,690 --> 00:14:05,200
large instance who here knows how to

00:14:03,970 --> 00:14:06,750
actually alter

00:14:05,200 --> 00:14:12,910
the default configurations for

00:14:06,750 --> 00:14:16,089
VirtualBox yeah 1 2 3 4 out of 35 so we

00:14:12,910 --> 00:14:18,519
got maybe 10% okay that's not bad those

00:14:16,089 --> 00:14:24,790
of you at home here's a fun one don't

00:14:18,519 --> 00:14:26,649
try to do that I'll Mack yeah the

00:14:24,790 --> 00:14:28,360
problem still comes down to how do you

00:14:26,649 --> 00:14:29,589
make everything actually work and how do

00:14:28,360 --> 00:14:32,800
you make it bigger when you need to be

00:14:29,589 --> 00:14:35,589
and then if 2 cores with four gigs can

00:14:32,800 --> 00:14:39,630
make a Mack float imagine what four

00:14:35,589 --> 00:14:42,940
cores with eight gigs does here's a hint

00:14:39,630 --> 00:14:44,199
thud it will fall over you will see the

00:14:42,940 --> 00:14:46,839
weirdest hangs you've ever seen on that

00:14:44,199 --> 00:14:48,310
piece of hardware nothing to the guys

00:14:46,839 --> 00:14:49,959
that are doing the work underlying that

00:14:48,310 --> 00:14:53,160
yeah software is good it's just it

00:14:49,959 --> 00:14:55,540
wasn't meant to load it that heavy

00:14:53,160 --> 00:14:58,060
networking headaches as I mentioned DNS

00:14:55,540 --> 00:14:59,500
networking passing does everybody know

00:14:58,060 --> 00:15:01,000
how to do all the magics of getting

00:14:59,500 --> 00:15:03,490
their local network to actually work

00:15:01,000 --> 00:15:06,399
with the internal network and I'm seeing

00:15:03,490 --> 00:15:09,010
like two knots again we're it like one

00:15:06,399 --> 00:15:11,680
and a half percent now all right

00:15:09,010 --> 00:15:16,000
you see it's handy as long as you're not

00:15:11,680 --> 00:15:17,529
doing anything heavy so let's look at a

00:15:16,000 --> 00:15:18,880
different alternative instead of having

00:15:17,529 --> 00:15:20,949
to do a VM on whatever you've already

00:15:18,880 --> 00:15:23,620
got we're gonna look at something with

00:15:20,949 --> 00:15:25,870
open source hardware we're gonna look at

00:15:23,620 --> 00:15:27,070
open source software we're gonna make

00:15:25,870 --> 00:15:29,680
sure that all of the things that you

00:15:27,070 --> 00:15:32,380
need to run these are easy to obtain for

00:15:29,680 --> 00:15:34,329
a low cost and then we're gonna make

00:15:32,380 --> 00:15:37,300
sure that it's easy for you to actually

00:15:34,329 --> 00:15:39,480
maintain with a little bit of knowledge

00:15:37,300 --> 00:15:44,709
you don't have to have a degree in

00:15:39,480 --> 00:15:47,050
criminology well honestly an associate's

00:15:44,709 --> 00:15:51,579
would do some what I mean

00:15:47,050 --> 00:15:52,990
there are turn keys but phd's that's

00:15:51,579 --> 00:15:54,899
what you get when you actually deploy it

00:15:52,990 --> 00:15:56,980
all by hand and know every component

00:15:54,899 --> 00:16:00,550
it's also going to take you that long to

00:15:56,980 --> 00:16:03,699
understand all of them so yeah now the

00:16:00,550 --> 00:16:06,100
nice part about this is if I can fit it

00:16:03,699 --> 00:16:09,490
in this shoe box and I can fit it under

00:16:06,100 --> 00:16:11,319
your low-cost budget line items how many

00:16:09,490 --> 00:16:15,910
of these can begin for a group of

00:16:11,319 --> 00:16:17,920
developers if it costs less to buy for

00:16:15,910 --> 00:16:19,200
developers each one of these than a

00:16:17,920 --> 00:16:25,090
laptop for one of them

00:16:19,200 --> 00:16:26,670
how many can you get so I'll let you

00:16:25,090 --> 00:16:31,150
talk about this one

00:16:26,670 --> 00:16:33,760
so unfortunately I have seen the uglier

00:16:31,150 --> 00:16:35,830
side of the consulting and saying what

00:16:33,760 --> 00:16:37,600
it needs with infrastructure so breaking

00:16:35,830 --> 00:16:40,840
this down based on what my experience

00:16:37,600 --> 00:16:42,670
was before so cloud costs I fit it in my

00:16:40,840 --> 00:16:45,790
backpack and it did fit in my motorcycle

00:16:42,670 --> 00:16:47,950
a server space power rental are so a

00:16:45,790 --> 00:16:51,250
power rental for floor space if it's a

00:16:47,950 --> 00:16:52,810
colocation it fits on your desk so if

00:16:51,250 --> 00:16:54,340
you have a small desk borrow a bigger

00:16:52,810 --> 00:16:57,010
one you could probably be in a

00:16:54,340 --> 00:16:59,680
cooperative working environment and to

00:16:57,010 --> 00:17:02,290
have another shared s section for it and

00:16:59,680 --> 00:17:03,700
work off of that power consumption I'm

00:17:02,290 --> 00:17:05,319
pretty sure if you're really

00:17:03,700 --> 00:17:06,730
eco-friendly you could probably run this

00:17:05,319 --> 00:17:07,959
off of a solar panel and even some of

00:17:06,730 --> 00:17:11,709
the worst conditions with a basic

00:17:07,959 --> 00:17:14,560
battery pack and then a manager yeah

00:17:11,709 --> 00:17:16,270
they're gonna love you it's cheap so

00:17:14,560 --> 00:17:19,540
when he says off the basic battery pack

00:17:16,270 --> 00:17:21,579
we're saying that the power draw is less

00:17:19,540 --> 00:17:25,120
than the supply that we have on this the

00:17:21,579 --> 00:17:29,020
supply is 60 watts I'm loading it with

00:17:25,120 --> 00:17:31,330
about 30 so your desk fan at Charles as

00:17:29,020 --> 00:17:33,280
much power as at the cluster there's a

00:17:31,330 --> 00:17:34,450
big difference they're pretty sure that

00:17:33,280 --> 00:17:36,060
you can safely manage to have this

00:17:34,450 --> 00:17:38,170
plugged into your desk and not have

00:17:36,060 --> 00:17:40,720
building infrastructure come over and go

00:17:38,170 --> 00:17:43,120
would you stop doing that because if you

00:17:40,720 --> 00:17:46,390
plug in about a dozen machines that are

00:17:43,120 --> 00:17:48,250
all x86 with two sockets and 32 gigs of

00:17:46,390 --> 00:17:50,260
ram I mean you can imagine what that

00:17:48,250 --> 00:17:53,200
does and how very pissed off

00:17:50,260 --> 00:17:56,610
infrastructure it will be well those are

00:17:53,200 --> 00:18:02,880
florescent those are way more than those

00:17:56,610 --> 00:18:07,230
yeah so there's two of them up here and

00:18:02,880 --> 00:18:09,430
we've got two of them done up in one set

00:18:07,230 --> 00:18:12,700
which will show you pictures up here in

00:18:09,430 --> 00:18:16,300
a minute we have six boards running Oh

00:18:12,700 --> 00:18:20,770
droids see - this is an arm v8 so we're

00:18:16,300 --> 00:18:24,670
running arm 64 or a art 64 and each one

00:18:20,770 --> 00:18:26,770
limbs got 64 gigs and including the

00:18:24,670 --> 00:18:30,310
switch and the router that they get

00:18:26,770 --> 00:18:31,660
plugged into and the power strip that

00:18:30,310 --> 00:18:32,919
particular one was under five hundred

00:18:31,660 --> 00:18:35,020
and sixty

00:18:32,919 --> 00:18:37,350
the one that I have that's four nodes

00:18:35,020 --> 00:18:40,179
with twice the amount of storage is

00:18:37,350 --> 00:18:43,000
about 430 and my router is actually

00:18:40,179 --> 00:18:44,980
about four times more expensive so you

00:18:43,000 --> 00:18:47,380
can imagine you can play with these

00:18:44,980 --> 00:18:48,730
specs a little bit all of the parts will

00:18:47,380 --> 00:18:52,270
provide in the parts list and they're

00:18:48,730 --> 00:18:54,280
all bought off of Amazon or a particular

00:18:52,270 --> 00:18:58,419
vendor who also can sell from Amazon but

00:18:54,280 --> 00:19:00,730
we ordered directly now we've done this

00:18:58,419 --> 00:19:02,409
in two ways on purpose one we wanted to

00:19:00,730 --> 00:19:04,690
show that you can build the same thing

00:19:02,409 --> 00:19:07,780
from multiple providers with multiple

00:19:04,690 --> 00:19:08,830
sets of open hardware and we wanted to

00:19:07,780 --> 00:19:11,799
show that you can do them at different

00:19:08,830 --> 00:19:14,710
scales in different ways I've got one

00:19:11,799 --> 00:19:17,640
that's in nice pretty cases and he's got

00:19:14,710 --> 00:19:19,809
one that is literally bolted together

00:19:17,640 --> 00:19:21,700
okay so it depends on how you want to

00:19:19,809 --> 00:19:23,200
put it together but all of them will

00:19:21,700 --> 00:19:25,120
actually fit in a shoebox

00:19:23,200 --> 00:19:27,250
my initial rendition actually had the

00:19:25,120 --> 00:19:31,299
power cord running out the hole in the

00:19:27,250 --> 00:19:33,309
side of this shoebox I stopped doing

00:19:31,299 --> 00:19:36,730
that because the power supplies that

00:19:33,309 --> 00:19:39,460
converted from 120 volt AC to five point

00:19:36,730 --> 00:19:53,380
five volts DC made more heat than the

00:19:39,460 --> 00:19:55,900
boards so I stopped doing that um well

00:19:53,380 --> 00:19:58,000
one yeah okay so the question was why SD

00:19:55,900 --> 00:19:59,409
memory cards versus any other storage

00:19:58,000 --> 00:20:02,200
medium really because the write cycles

00:19:59,409 --> 00:20:04,990
truth is the SD memory cards are fairly

00:20:02,200 --> 00:20:06,850
reliable overall it's a proof of concept

00:20:04,990 --> 00:20:08,980
kind of like just one what play with it

00:20:06,850 --> 00:20:11,530
by the time you put that many write

00:20:08,980 --> 00:20:14,169
cycles on it overall you can replace the

00:20:11,530 --> 00:20:15,940
SD memory card or just go on to

00:20:14,169 --> 00:20:17,350
different Hardware change that if you're

00:20:15,940 --> 00:20:19,150
really gonna put the best bit into it

00:20:17,350 --> 00:20:21,970
the biggest thing is we want to do the

00:20:19,150 --> 00:20:25,780
quick is zero to hero least amount of

00:20:21,970 --> 00:20:27,309
time into it and also the USB adapters

00:20:25,780 --> 00:20:29,679
if you have like USB storage on each one

00:20:27,309 --> 00:20:31,330
is a little ugly sticks out a little bit

00:20:29,679 --> 00:20:32,919
more so the SD memory card just makes it

00:20:31,330 --> 00:20:34,390
look nicer easier to transport that kind

00:20:32,919 --> 00:20:36,370
of stuff you have another question or

00:20:34,390 --> 00:20:39,340
okay I thought I saw your hand come up

00:20:36,370 --> 00:20:41,409
and in particular only both of these

00:20:39,340 --> 00:20:45,670
boards we don't have a USB three we only

00:20:41,409 --> 00:20:47,440
have USB two so sdsc running at 300

00:20:45,670 --> 00:20:49,150
Plus megabytes per second is gonna be a

00:20:47,440 --> 00:20:51,940
lot more performed than anything we can

00:20:49,150 --> 00:20:54,640
put over the USB to bus so thanks for

00:20:51,940 --> 00:20:56,320
pointing that out but that's the

00:20:54,640 --> 00:20:57,640
logistics of why we actually get their

00:20:56,320 --> 00:21:00,070
performance even if it doesn't have the

00:20:57,640 --> 00:21:05,380
same lifespan by a long shot but then

00:21:00,070 --> 00:21:14,410
again if you nuke an SD card 25 30 bucks

00:21:05,380 --> 00:21:15,960
oh well yep okay the question is for the

00:21:14,410 --> 00:21:20,530
Odroid why wouldn't we use an emmc

00:21:15,960 --> 00:21:24,280
believe it or not a properly made SDXC

00:21:20,530 --> 00:21:27,010
card on the MMC bus well modern ones key

00:21:24,280 --> 00:21:30,250
word sorry modern ones will actually

00:21:27,010 --> 00:21:32,490
perform nine identically to an emmc but

00:21:30,250 --> 00:21:35,470
the EMM C's are actually twice the cost

00:21:32,490 --> 00:21:37,420
so to keep the cost down we went with XT

00:21:35,470 --> 00:21:40,030
HC they're easier to replace their lower

00:21:37,420 --> 00:21:44,890
cost and initial and they get you 80% of

00:21:40,030 --> 00:21:47,340
the performance okay one more question

00:21:44,890 --> 00:21:47,340
quick

00:21:52,680 --> 00:21:57,750
do we configure the system to use a

00:21:54,900 --> 00:22:02,040
minimal logging I actually have it yet

00:21:57,750 --> 00:22:04,920
I'm using like SD cards made last year

00:22:02,040 --> 00:22:08,670
with write cycles that are 3/4 of an SD

00:22:04,920 --> 00:22:12,030
card or SSD so I'm not as worried about

00:22:08,670 --> 00:22:13,950
it I could I mean it's really just a

00:22:12,030 --> 00:22:16,350
flag to tell Journal deed not to throw

00:22:13,950 --> 00:22:19,670
put it on disk at all but since we were

00:22:16,350 --> 00:22:22,320
still doing the development steps on it

00:22:19,670 --> 00:22:23,760
it's one of those things where again you

00:22:22,320 --> 00:22:25,980
can replace the card for 20 bucks if I

00:22:23,760 --> 00:22:28,890
manage to new Kapoor card I can actually

00:22:25,980 --> 00:22:36,320
replace the card in five minutes so I'm

00:22:28,890 --> 00:22:38,730
not too worried all right okay so so

00:22:36,320 --> 00:22:41,730
about two months ago Jason approached me

00:22:38,730 --> 00:22:43,860
he goes hey check out this k3 thing it's

00:22:41,730 --> 00:22:46,650
a rancher it's still in beta but they've

00:22:43,860 --> 00:22:48,840
got a lot going on for it and he goes it

00:22:46,650 --> 00:22:49,890
works and it's worse for arm and we just

00:22:48,840 --> 00:22:51,929
looked at it going okay let's go check

00:22:49,890 --> 00:22:54,030
it out its first thing is it's

00:22:51,929 --> 00:22:55,890
self-contained so it made installing and

00:22:54,030 --> 00:22:57,809
made the reliability the size of the of

00:22:55,890 --> 00:23:00,480
what you need to work with really nice

00:22:57,809 --> 00:23:01,830
also on top of it being a static binary

00:23:00,480 --> 00:23:04,200
when they went through to make it a

00:23:01,830 --> 00:23:06,929
static binary they threw out a lot of

00:23:04,200 --> 00:23:09,390
alpha features backwards compatibility

00:23:06,929 --> 00:23:11,309
and a lot of like cloud specific stuff

00:23:09,390 --> 00:23:14,000
in order to reduce that binary for it

00:23:11,309 --> 00:23:16,890
and make it a lot easier to work with

00:23:14,000 --> 00:23:19,740
minimal base requirements so the biggest

00:23:16,890 --> 00:23:21,630
thing there is Ram I think on the worker

00:23:19,740 --> 00:23:23,700
nodes I think it needs like 40 megabytes

00:23:21,630 --> 00:23:25,980
of an install base and everything works

00:23:23,700 --> 00:23:29,580
within 512 megabytes of RAM I think even

00:23:25,980 --> 00:23:31,500
on the master yeah much lower the master

00:23:29,580 --> 00:23:32,850
is actually 512 Meg's of RAM you only

00:23:31,500 --> 00:23:34,350
need one of those and it doesn't have to

00:23:32,850 --> 00:23:36,240
be a worker the workers need one hundred

00:23:34,350 --> 00:23:38,220
and twenty eight I say that because a

00:23:36,240 --> 00:23:41,309
worker nodes in regular Bernays can eat

00:23:38,220 --> 00:23:43,320
a gig apiece note the difference in

00:23:41,309 --> 00:23:46,559
downscale and that's before you install

00:23:43,320 --> 00:23:48,780
some contain with Java um and then you

00:23:46,559 --> 00:23:52,410
have across architecture it's really

00:23:48,780 --> 00:23:55,170
nice to have it run on arm cost it

00:23:52,410 --> 00:23:58,470
reduces the cost of entry into a system

00:23:55,170 --> 00:24:00,059
as well as the fact that we just like

00:23:58,470 --> 00:24:02,970
arm so it's nice to be able to play with

00:24:00,059 --> 00:24:04,980
our favorite toys but the nice part is

00:24:02,970 --> 00:24:06,480
because this is actually a fully static

00:24:04,980 --> 00:24:08,250
you don't have to do

00:24:06,480 --> 00:24:09,990
do I do this on the x86 with a ponzu and

00:24:08,250 --> 00:24:13,530
how do I do this on armed with the Dora

00:24:09,990 --> 00:24:15,000
it's a fully contained precompiled go

00:24:13,530 --> 00:24:16,650
binary with everything in it

00:24:15,000 --> 00:24:18,600
all you have to do is download the one

00:24:16,650 --> 00:24:21,630
that runs on your architecture and it's

00:24:18,600 --> 00:24:24,270
the exact inter compatible version from

00:24:21,630 --> 00:24:25,860
every machine that you use and all the

00:24:24,270 --> 00:24:28,049
wonderful tricks that they had on x86

00:24:25,860 --> 00:24:30,510
did not move over so you get a nice

00:24:28,049 --> 00:24:33,090
education in the process of what is

00:24:30,510 --> 00:24:35,130
going on on the cluster this is very

00:24:33,090 --> 00:24:37,260
true and the nice part is most of this

00:24:35,130 --> 00:24:39,450
until you hit a problem which actually

00:24:37,260 --> 00:24:45,240
has been very common is not something

00:24:39,450 --> 00:24:46,590
you're going to have to face so now I

00:24:45,240 --> 00:24:47,220
will put this out there there is a

00:24:46,590 --> 00:24:49,530
caveat

00:24:47,220 --> 00:24:51,900
by default it makes use of flannel

00:24:49,530 --> 00:24:55,559
flannel makes use of VX land does

00:24:51,900 --> 00:24:58,919
anybody know what V X VX lamp is got one

00:24:55,559 --> 00:25:00,980
hand to hand three hand great so what

00:24:58,919 --> 00:25:05,880
port do you not expose to the Internet

00:25:00,980 --> 00:25:07,940
and it's it's UDP packets these nodes

00:25:05,880 --> 00:25:11,130
don't go on the internet if they do

00:25:07,940 --> 00:25:13,580
firewall everything put them in a V PC

00:25:11,130 --> 00:25:16,919
but if you're gonna do them here and

00:25:13,580 --> 00:25:19,049
it's contained behind a router then you

00:25:16,919 --> 00:25:20,850
don't have to worry about that so we've

00:25:19,049 --> 00:25:23,250
actually made it easier to manage

00:25:20,850 --> 00:25:25,470
because you have a cluster that you can

00:25:23,250 --> 00:25:28,169
get to from your laptop over Wi-Fi that

00:25:25,470 --> 00:25:29,730
is actually self-contained and isolated

00:25:28,169 --> 00:25:32,610
from the network so you now don't have

00:25:29,730 --> 00:25:34,500
to go into the idea bus console make a V

00:25:32,610 --> 00:25:37,320
PC make a bunch of nodes add them to

00:25:34,500 --> 00:25:40,080
that and these can do UDP but not that

00:25:37,320 --> 00:25:43,980
port and all of that complexity goes

00:25:40,080 --> 00:25:46,980
away and for the people at home in

00:25:43,980 --> 00:25:50,190
action not exactly that but you know on

00:25:46,980 --> 00:25:51,660
the left is a bus crate the cluster I

00:25:50,190 --> 00:25:54,270
have at home literally just drawn out

00:25:51,660 --> 00:25:56,790
the USB fans are kind of necessary

00:25:54,270 --> 00:26:00,600
that's the really cheap cooling that I

00:25:56,790 --> 00:26:02,760
had to do you packed it so tight that

00:26:00,600 --> 00:26:04,530
you had to put large fans on it that's

00:26:02,760 --> 00:26:08,419
why yeah the hot air had to get out

00:26:04,530 --> 00:26:08,419
period and then we have

00:26:10,049 --> 00:26:14,159
and then Libra crate is on the right

00:26:12,630 --> 00:26:15,690
then then that is using the Libra

00:26:14,159 --> 00:26:17,220
potatoes and you know when I first got

00:26:15,690 --> 00:26:18,630
my cluster it's like you know I'm gonna

00:26:17,220 --> 00:26:22,440
feel cute and gonna run some Danish

00:26:18,630 --> 00:26:24,149
today so I'm gonna take a selfie so now

00:26:22,440 --> 00:26:25,289
comes the fun part we have all this

00:26:24,149 --> 00:26:27,690
hardware up here let's start playing

00:26:25,289 --> 00:26:31,409
with it um which one should we start

00:26:27,690 --> 00:26:32,429
with should we do a deployment that is

00:26:31,409 --> 00:26:33,570
the first thing right do you want to

00:26:32,429 --> 00:26:36,029
show the node so do you want to show an

00:26:33,570 --> 00:26:38,970
actual deployment on it buddy order you

00:26:36,029 --> 00:26:41,610
want to see how it works okay hands up

00:26:38,970 --> 00:26:44,010
now for for deployment first or you got

00:26:41,610 --> 00:26:45,690
one for that two three okay challenge

00:26:44,010 --> 00:26:48,480
accepted because we're doing this all in

00:26:45,690 --> 00:26:52,169
15 minutes so other who wants to see a

00:26:48,480 --> 00:26:56,760
live cluster first all right so look

00:26:52,169 --> 00:26:58,559
I've been doing deployment first so so

00:26:56,760 --> 00:27:00,750
remember we're at a conference the wife

00:26:58,559 --> 00:27:02,460
the network situation was not ironed out

00:27:00,750 --> 00:27:04,799
until this morning

00:27:02,460 --> 00:27:06,659
we have an entire cluster here two

00:27:04,799 --> 00:27:12,270
laptops that were using connect yes sir

00:27:06,659 --> 00:27:14,640
do you have question yeah we will make

00:27:12,270 --> 00:27:16,799
the text much bigger for you we're just

00:27:14,640 --> 00:27:18,419
gonna will hit control or it will do

00:27:16,799 --> 00:27:24,450
keep on adding pluses until you're

00:27:18,419 --> 00:27:26,130
content with it yes I knew about it I

00:27:24,450 --> 00:27:29,159
have to switch the profile that's all

00:27:26,130 --> 00:27:34,950
yeah in the back good

00:27:29,159 --> 00:27:35,220
I got nods back there so one more it'll

00:27:34,950 --> 00:27:38,779
happen

00:27:35,220 --> 00:27:38,779
well wing it okay

00:27:45,450 --> 00:27:51,510
I need to start by assessing into my box

00:27:47,940 --> 00:27:53,640
all right so it's gonna show a working

00:27:51,510 --> 00:27:55,860
cluster first just a basic just say get

00:27:53,640 --> 00:27:58,560
nodes what's alive and also to make sure

00:27:55,860 --> 00:28:00,750
he's got and there we go we have four

00:27:58,560 --> 00:28:02,250
nodes live one of them actually is not

00:28:00,750 --> 00:28:05,460
plugged in and as you can see we've

00:28:02,250 --> 00:28:06,900
worked one out before there's a no droid

00:28:05,460 --> 00:28:12,510
see two that was on a potato cluster

00:28:06,900 --> 00:28:14,670
obviously they're not friends anymore so

00:28:12,510 --> 00:28:17,220
we actually have a very running system

00:28:14,670 --> 00:28:18,780
right now and by the way the name space

00:28:17,220 --> 00:28:20,460
that you see derp this is actually us

00:28:18,780 --> 00:28:24,390
proving out something that was working

00:28:20,460 --> 00:28:27,540
or not working before so it does work we

00:28:24,390 --> 00:28:28,950
swear remember this is all an arm and

00:28:27,540 --> 00:28:30,630
I'm not sure if you've ever tried use

00:28:28,950 --> 00:28:32,220
containers before and pull images now

00:28:30,630 --> 00:28:36,480
try to imagine if you don't know if it's

00:28:32,220 --> 00:28:37,890
grabbing the right binary no we made it

00:28:36,480 --> 00:28:42,590
work and there's a lot of multi our

00:28:37,890 --> 00:28:45,720
support and then also remember about the

00:28:42,590 --> 00:28:49,260
yeah so while we're doing this and he

00:28:45,720 --> 00:28:51,450
gets connected over to his box there is

00:28:49,260 --> 00:28:54,090
a handy-dandy comment that someone once

00:28:51,450 --> 00:28:57,210
made about arm may not work because

00:28:54,090 --> 00:29:05,360
people can't get access to hardware on

00:28:57,210 --> 00:29:05,360
their desktop to develop on it what

00:29:06,900 --> 00:29:15,140
that was a pram that was a primary

00:29:08,760 --> 00:29:15,140
motivator by the way control shift T

00:29:16,790 --> 00:29:25,590
control shifted not function shift T

00:29:19,140 --> 00:29:34,620
control shift sorry as we get the new

00:29:25,590 --> 00:29:36,710
guide to up to speed hard and we try

00:29:34,620 --> 00:29:36,710
again

00:29:38,150 --> 00:29:43,380
now unfortunately his laptop has spun

00:29:41,250 --> 00:29:46,740
will be so convincing it to actually do

00:29:43,380 --> 00:29:47,250
HDMI output was yeah it's not working

00:29:46,740 --> 00:29:52,520
right now

00:29:47,250 --> 00:29:55,590
so we get to go from here to there okay

00:29:52,520 --> 00:30:02,460
as he makes sure that he actually turned

00:29:55,590 --> 00:30:05,250
on his aged server before the talk he

00:30:02,460 --> 00:30:08,070
says it's happened before that you

00:30:05,250 --> 00:30:10,020
forgot or that you did that he did not

00:30:08,070 --> 00:30:16,340
turn it on okay so you'd think there'd

00:30:10,020 --> 00:30:18,390
be a lesson there hey look at that

00:30:16,340 --> 00:30:28,920
ladies and gentlemen we have a working

00:30:18,390 --> 00:30:30,900
ssh server alright alright so the first

00:30:28,920 --> 00:30:34,020
things first is we have a blank cluster

00:30:30,900 --> 00:30:34,440
I did wipe it out just before the the

00:30:34,020 --> 00:30:38,070
talk

00:30:34,440 --> 00:30:42,230
other than derp derp was on your cluster

00:30:38,070 --> 00:30:44,850
oh you're using your question this time

00:30:42,230 --> 00:30:46,080
it's completely the cluster was

00:30:44,850 --> 00:30:48,510
completely wiped there's no more

00:30:46,080 --> 00:30:51,720
kubernetes on it there's uh or ak3 is in

00:30:48,510 --> 00:30:53,520
this case and i have an ant install

00:30:51,720 --> 00:30:57,960
which we will be open sourcing ever get

00:30:53,520 --> 00:30:59,760
done cleaning something up and plastic

00:30:57,960 --> 00:31:02,220
comment right well release as soon as we

00:30:59,760 --> 00:31:03,780
fix the code don't worry I actually am

00:31:02,220 --> 00:31:07,010
coaching him how to fix the code it

00:31:03,780 --> 00:31:07,010
wasn't working until 4 a.m.

00:31:08,390 --> 00:31:15,230
he wrote it I had to use the same kernel

00:31:16,550 --> 00:31:22,500
yeah you know what when you're actually

00:31:19,680 --> 00:31:24,090
working in arm you've built kernels most

00:31:22,500 --> 00:31:27,780
of your life and you have commits and

00:31:24,090 --> 00:31:31,320
doctors since oh five Buster I know what

00:31:27,780 --> 00:31:33,000
a same kernel is there are interesting

00:31:31,320 --> 00:31:35,010
things that magically break when you

00:31:33,000 --> 00:31:36,810
take a go binary compiled for a bone -

00:31:35,010 --> 00:31:40,500
and put it onto an art system even if

00:31:36,810 --> 00:31:42,960
the kernels match we're still not sure

00:31:40,500 --> 00:31:44,310
100% why it's so this particular day I

00:31:42,960 --> 00:31:47,910
was going to be running on a single node

00:31:44,310 --> 00:31:48,390
within that cluster because for whatever

00:31:47,910 --> 00:31:51,180
reason

00:31:48,390 --> 00:31:53,880
flannel won't bring up the CNI interface

00:31:51,180 --> 00:31:56,520
at all we don't really know why

00:31:53,880 --> 00:32:00,530
apparently because it can't Bob probe a

00:31:56,520 --> 00:32:02,820
built-in kernel module not really sure

00:32:00,530 --> 00:32:04,860
all right so what's going on here is

00:32:02,820 --> 00:32:06,290
there's absolutely no folder right now

00:32:04,860 --> 00:32:08,220
with everything that needs I'm actually

00:32:06,290 --> 00:32:11,100
copying over everything in you for the

00:32:08,220 --> 00:32:15,720
pkg built a build which is how we build

00:32:11,100 --> 00:32:17,430
packages and arch and the systemd unit

00:32:15,720 --> 00:32:19,860
files copying that over so I'm building

00:32:17,430 --> 00:32:20,790
all the nodes this is the one part I was

00:32:19,860 --> 00:32:22,530
kind of nervous about

00:32:20,790 --> 00:32:26,250
we're actually downloading on each node

00:32:22,530 --> 00:32:27,630
the kiiis binary and the K feeds binary

00:32:26,250 --> 00:32:29,070
as it gets built into the package I have

00:32:27,630 --> 00:32:33,840
to then go through and install fades

00:32:29,070 --> 00:32:37,760
which you'll see but even here I think

00:32:33,840 --> 00:32:37,760
I'm shooting for sub 5 minutes yes sir

00:32:42,090 --> 00:32:45,360
The Container registries are all run by

00:32:43,560 --> 00:32:50,700
container D based on what kiiis is doing

00:32:45,360 --> 00:32:52,410
there's each one on each node so oh the

00:32:50,700 --> 00:32:53,700
container registries first of all we're

00:32:52,410 --> 00:32:56,070
not doing the container registries right

00:32:53,700 --> 00:32:57,450
now we're doing the base install the

00:32:56,070 --> 00:32:59,490
container registries that I'm using for

00:32:57,450 --> 00:33:01,740
this because I was having issues with

00:32:59,490 --> 00:33:03,780
the setup for with some things with

00:33:01,740 --> 00:33:05,340
container deitrick that guy stuff we're

00:33:03,780 --> 00:33:07,500
just using docker hub those are also

00:33:05,340 --> 00:33:10,080
public - which is also makes it easier

00:33:07,500 --> 00:33:12,780
for everyone else to hop along this

00:33:10,080 --> 00:33:14,850
entire talk quickly also we did not use

00:33:12,780 --> 00:33:17,220
docker at all except for docker hub

00:33:14,850 --> 00:33:20,550
everything was used bilder or container

00:33:17,220 --> 00:33:22,920
d right and to the question of can you

00:33:20,550 --> 00:33:24,420
run your own registries yes like all of

00:33:22,920 --> 00:33:25,860
kubernetes you can actually give it

00:33:24,420 --> 00:33:28,380
credentials to be able to connect to a

00:33:25,860 --> 00:33:30,120
good specific one and yes I take the

00:33:28,380 --> 00:33:32,010
show top for a second say who I work for

00:33:30,120 --> 00:33:34,200
we have a built in container registry so

00:33:32,010 --> 00:33:38,700
if you have a live instance you can

00:33:34,200 --> 00:33:39,960
connect this to it all right so the

00:33:38,700 --> 00:33:42,030
packages install everything's been built

00:33:39,960 --> 00:33:44,100
now we're just seeing some a kernel

00:33:42,030 --> 00:33:47,670
flags and now comes the fun part we're

00:33:44,100 --> 00:33:50,220
launching the master server and as the

00:33:47,670 --> 00:33:51,810
master server it is uh booting up is

00:33:50,220 --> 00:33:54,090
trying to grab the node token so a

00:33:51,810 --> 00:33:55,530
little bit of ansible magic and we'll

00:33:54,090 --> 00:33:57,960
get all the nodes up into a second well

00:33:55,530 --> 00:33:59,670
he talks about node token by the way k3s

00:33:57,960 --> 00:34:01,980
has this documented but when you start

00:33:59,670 --> 00:34:04,200
the master to register further worker

00:34:01,980 --> 00:34:06,690
nodes you actually have to copy a

00:34:04,200 --> 00:34:11,810
registration secret so that's the node

00:34:06,690 --> 00:34:11,810
token that he's talking about okay which

00:34:13,070 --> 00:34:19,980
yes it's not including SED it's actually

00:34:16,110 --> 00:34:21,780
replacing it with sequel light so this

00:34:19,980 --> 00:34:24,570
is no this is not production grade this

00:34:21,780 --> 00:34:26,700
is this is developer toolkit in a box on

00:34:24,570 --> 00:34:30,540
a platform you can get for cheap and

00:34:26,700 --> 00:34:32,790
replace if it ever breaks so yeah k3

00:34:30,540 --> 00:34:33,690
assistant is not production it's edge at

00:34:32,790 --> 00:34:38,639
best

00:34:33,690 --> 00:34:42,440
yeah good concern if you if you want

00:34:38,639 --> 00:34:42,440
production build pressure

00:34:49,629 --> 00:34:56,290
right he says it brings up the point of

00:34:52,310 --> 00:34:56,290
flannel and whether you could replace it

00:34:58,660 --> 00:35:03,020
yeah

00:35:00,319 --> 00:35:04,940
it's specific the flannel problem that

00:35:03,020 --> 00:35:09,500
we had is very specific to the flannel

00:35:04,940 --> 00:35:12,970
bring up on arm in arch okay very

00:35:09,500 --> 00:35:16,819
specific I haven't actually tried k3s on

00:35:12,970 --> 00:35:18,260
x84 on arch yet mostly because I didn't

00:35:16,819 --> 00:35:21,530
want to like brick my laptop before the

00:35:18,260 --> 00:35:23,210
presentation so it's impossible that the

00:35:21,530 --> 00:35:26,810
problem is actually just user land

00:35:23,210 --> 00:35:28,220
issues at compile time but you do bring

00:35:26,810 --> 00:35:31,400
up the point of being able to switch out

00:35:28,220 --> 00:35:34,849
the runtimes with k3s you can actually

00:35:31,400 --> 00:35:36,980
change out into individual components so

00:35:34,849 --> 00:35:38,839
out of the box it comes with this kind

00:35:36,980 --> 00:35:40,819
of it's a little Jang but it uses node

00:35:38,839 --> 00:35:43,220
pores to do a fake load balancer you can

00:35:40,819 --> 00:35:45,079
turn that off it why default we use

00:35:43,220 --> 00:35:47,450
flannel you can tell it not to and then

00:35:45,079 --> 00:35:49,970
provide your own container networking

00:35:47,450 --> 00:35:51,260
interface to replace it with calico you

00:35:49,970 --> 00:35:53,420
can tell it I don't want to use

00:35:51,260 --> 00:35:55,609
container D use my assistant docker and

00:35:53,420 --> 00:35:58,099
use docker if you choose so there's a

00:35:55,609 --> 00:36:01,040
number of things but we went with all

00:35:58,099 --> 00:36:03,050
the out-of-the-box features except for

00:36:01,040 --> 00:36:04,579
that service load balancer in this

00:36:03,050 --> 00:36:06,109
particular case because we have an

00:36:04,579 --> 00:36:07,609
actual router and we have our dedicated

00:36:06,109 --> 00:36:10,430
network space we chose to implement

00:36:07,609 --> 00:36:12,859
metal lb so we're actually using real

00:36:10,430 --> 00:36:14,420
networking addressing that is accessible

00:36:12,859 --> 00:36:20,210
through the ingress with the built-in

00:36:14,420 --> 00:36:23,359
traffic metal lb why I'm using layer 2

00:36:20,210 --> 00:36:24,440
instead of bgp only because I didn't

00:36:23,359 --> 00:36:26,750
really feel like figuring out exactly

00:36:24,440 --> 00:36:29,089
how to install the right version of bgp

00:36:26,750 --> 00:36:33,819
into open wrt and i didn't want to piss

00:36:29,089 --> 00:36:37,430
off Zak and the networks owned bgp so

00:36:33,819 --> 00:36:42,530
let's not make the admins mad at the

00:36:37,430 --> 00:36:44,450
conference network center well of course

00:36:42,530 --> 00:36:45,920
as soon after we moved the physical

00:36:44,450 --> 00:36:47,540
hardware networking we were having a

00:36:45,920 --> 00:36:51,760
small difficulty if not all the slaves

00:36:47,540 --> 00:36:51,760
are coming up but most of them are

00:36:57,600 --> 00:37:03,369
that explains it

00:36:59,830 --> 00:37:07,150
yeah if if he started the nodes before

00:37:03,369 --> 00:37:08,650
they could get a NTP being armed and not

00:37:07,150 --> 00:37:13,450
all of them having real battery backed

00:37:08,650 --> 00:37:16,300
RT C's that can happen so now the beauty

00:37:13,450 --> 00:37:18,220
of it is since it is ansible now all the

00:37:16,300 --> 00:37:20,770
nodes or members anybody know how easy

00:37:18,220 --> 00:37:30,930
that particular one is if not you're

00:37:20,770 --> 00:37:30,930
about to get a demo and bunk

00:37:31,230 --> 00:37:35,130
I'm guessing unreachable is a good thing

00:37:33,600 --> 00:37:38,670
okay

00:37:35,130 --> 00:37:41,140
he says that means it works like okay I

00:37:38,670 --> 00:37:44,609
don't know I'm not the ansible guy he is

00:37:41,140 --> 00:37:44,609
hence all the interval code is

00:37:58,870 --> 00:38:04,240
for giggles once this returns why don't

00:38:01,630 --> 00:38:05,860
you run date then we can least make sure

00:38:04,240 --> 00:38:07,330
that NTP works so that our search works

00:38:05,860 --> 00:38:12,960
so we can actually deploy this thing in

00:38:07,330 --> 00:38:15,010
the 7 minutes we got left ok

00:38:12,960 --> 00:38:17,580
they shouldn't they should work run the

00:38:15,010 --> 00:38:17,580
same thing with date

00:38:26,700 --> 00:38:32,690
and let's see lag

00:38:41,590 --> 00:38:46,790
well you're um just so you know your

00:38:45,050 --> 00:38:52,010
network lights are going bonkers on your

00:38:46,790 --> 00:38:58,400
cluster okay if you say it's normal so

00:38:52,010 --> 00:38:59,600
be you okay well in this case I don't

00:38:58,400 --> 00:39:02,900
know if it's one side or the other

00:38:59,600 --> 00:39:05,000
that's broke mosh motion we're going to

00:39:02,900 --> 00:39:07,790
call it does not work with live SSH as

00:39:05,000 --> 00:39:18,740
far as I know or at least I have not had

00:39:07,790 --> 00:39:22,720
success with ansible yeah if not let's

00:39:18,740 --> 00:39:22,720
go back to your cluster do a deployment

00:39:25,750 --> 00:39:31,940
are you trying to run danceable or what

00:39:28,330 --> 00:39:36,940
go-to buzzing config buzz ansible bus

00:39:31,940 --> 00:39:36,940
great from the home directory

00:39:40,660 --> 00:39:43,520
yeah the date just went through okay

00:39:43,130 --> 00:39:45,680
there we go

00:39:43,520 --> 00:39:53,420
okay so it just went through now we're

00:39:45,680 --> 00:39:54,740
looking all right weird do this again

00:39:53,420 --> 00:39:55,640
because I'm lazy and what we'll go

00:39:54,740 --> 00:39:56,900
through and just make sure all the

00:39:55,640 --> 00:39:58,660
search are up to date and that kind of

00:39:56,900 --> 00:40:01,610
stuff and it will start all into closer

00:39:58,660 --> 00:40:03,680
also there's a fun little thing that

00:40:01,610 --> 00:40:06,080
there's a lot of kernel modules that are

00:40:03,680 --> 00:40:08,420
required that apparently every arm

00:40:06,080 --> 00:40:12,290
distribution doesn't matter if it's arch

00:40:08,420 --> 00:40:13,910
linux ubuntu debian aren't set by

00:40:12,290 --> 00:40:15,740
default and you need to have that sit on

00:40:13,910 --> 00:40:23,119
the fly and some kernels may or may not

00:40:15,740 --> 00:40:26,330
like them yes these are hard float

00:40:23,119 --> 00:40:38,240
kernels because it's a rv-8 mainline

00:40:26,330 --> 00:40:41,270
actually on lines all right so you so

00:40:38,240 --> 00:40:43,490
only two okay all right so let's go over

00:40:41,270 --> 00:40:45,010
to the other one to do the deployment I

00:40:43,490 --> 00:40:48,160
will the deployment stuff don't I

00:40:45,010 --> 00:40:48,160
yes I do

00:40:56,890 --> 00:41:01,420
that happens sometimes it's called a

00:40:59,500 --> 00:41:14,710
demo live anybody ever seen one fail

00:41:01,420 --> 00:41:16,030
yeah now you have hmm right don't don't

00:41:14,710 --> 00:41:19,720
ask me why he particularly named that

00:41:16,030 --> 00:41:21,460
folder dad but it's it's short for it's

00:41:19,720 --> 00:41:28,530
we're doing a flask in the name space

00:41:21,460 --> 00:41:28,530
crud on kubernetes I just use folder

00:41:42,060 --> 00:41:47,530
so when you're using rainy days by the

00:41:45,100 --> 00:41:49,300
way the coop control I know and I didn't

00:41:47,530 --> 00:41:53,140
say cube cuddle

00:41:49,300 --> 00:41:55,810
I said cube control when you're using

00:41:53,140 --> 00:41:58,240
that with k3s you actually need to copy

00:41:55,810 --> 00:42:02,470
out the cube config from it to be able

00:41:58,240 --> 00:42:04,480
to use it you can do that because it's

00:42:02,470 --> 00:42:07,810
readable you just copy it right now that

00:42:04,480 --> 00:42:09,340
etsy on the machine or if you have k3s

00:42:07,810 --> 00:42:11,290
in the local machine there are actually

00:42:09,340 --> 00:42:13,720
coop controls built in all you need to

00:42:11,290 --> 00:42:21,070
do is alias the binary to k3 yes or

00:42:13,720 --> 00:42:24,130
install the same links yeah so it's it's

00:42:21,070 --> 00:42:25,390
there it's reachable I don't think we

00:42:24,130 --> 00:42:30,430
have any of the services running ipv6

00:42:25,390 --> 00:42:33,490
because I have meadow Alby oh yeah the

00:42:30,430 --> 00:42:43,570
the router supports both and his laptop

00:42:33,490 --> 00:42:47,560
is set to ipv6 first yeah my master file

00:42:43,570 --> 00:42:52,390
changed on my particular case config key

00:42:47,560 --> 00:42:54,190
3s config bug kick sometimes I guess

00:42:52,390 --> 00:42:57,550
that happens if I restart the node I'll

00:42:54,190 --> 00:43:00,150
check again but we are running close on

00:42:57,550 --> 00:43:00,150
time at this point

00:43:13,310 --> 00:43:25,390
okay there's the right one okay see now

00:43:22,040 --> 00:43:25,390
we can see my cluster from his laptop

00:43:27,640 --> 00:43:32,810
now basic deployments we have a Postgres

00:43:31,280 --> 00:43:35,720
container just going to bring itself up

00:43:32,810 --> 00:43:37,130
we have the joys of here's a deployment

00:43:35,720 --> 00:43:38,780
here's the service to be able to access

00:43:37,130 --> 00:43:41,600
it and here's an ingress to be able to

00:43:38,780 --> 00:43:43,340
reach it now I already have metal LV

00:43:41,600 --> 00:43:45,950
configured and deployed because I can

00:43:43,340 --> 00:43:49,520
walk you all through that but it's a

00:43:45,950 --> 00:43:51,980
config map and a service daemon set

00:43:49,520 --> 00:43:53,030
deployment you don't go figure that one

00:43:51,980 --> 00:43:57,500
out because the documentation is

00:43:53,030 --> 00:44:03,470
actually really clear okay yeah we got

00:43:57,500 --> 00:44:07,820
database well there's nothing in it it's

00:44:03,470 --> 00:44:10,010
gonna come up stupid FAST well are you

00:44:07,820 --> 00:44:11,750
using like the stable helm chart this

00:44:10,010 --> 00:44:13,340
table hello charts way more complex than

00:44:11,750 --> 00:44:17,750
the janky thing we put together in five

00:44:13,340 --> 00:44:19,370
minutes also if you're having problem

00:44:17,750 --> 00:44:20,870
deploying something fast maybe you

00:44:19,370 --> 00:44:22,160
should build something like bus crate to

00:44:20,870 --> 00:44:23,560
test out your applications because it's

00:44:22,160 --> 00:44:26,450
going to reduce your development cycles

00:44:23,560 --> 00:44:28,190
please talk to us afterwards also it

00:44:26,450 --> 00:44:30,260
will also show you what is actually non

00:44:28,190 --> 00:44:35,990
performant because it's on a much

00:44:30,260 --> 00:44:38,750
smaller CPU node okay so now we have the

00:44:35,990 --> 00:44:41,260
flask application give ourselves a

00:44:38,750 --> 00:44:41,260
service

00:44:46,300 --> 00:44:53,890
service and we got a service in place so

00:44:51,460 --> 00:44:58,050
let's go ahead and what's that yeah

00:44:53,890 --> 00:44:58,050
that's all running on arm all of it

00:44:58,110 --> 00:45:02,530
that's what we were going for thank you

00:45:00,420 --> 00:45:06,010
okay so now that we have the service

00:45:02,530 --> 00:45:09,369
going at the ingress in place whatever

00:45:06,010 --> 00:45:11,440
operations here okay so now we have a

00:45:09,369 --> 00:45:21,670
service we have an ingress do me a favor

00:45:11,440 --> 00:45:23,619
coupe control get SVC kama ing enter now

00:45:21,670 --> 00:45:25,750
so now we actually did a functional

00:45:23,619 --> 00:45:27,310
ingress I have noticed for whatever

00:45:25,750 --> 00:45:29,470
reason that traffic doesn't seem to pick

00:45:27,310 --> 00:45:31,630
up the actual services IP address to

00:45:29,470 --> 00:45:33,810
report it to you so that's kind of

00:45:31,630 --> 00:45:33,810
annoying

00:45:42,109 --> 00:45:46,319
okay so you can see we've actually got

00:45:44,730 --> 00:45:51,440
medal I'll be responding with an a real

00:45:46,319 --> 00:45:57,450
address and we have a cluster there so

00:45:51,440 --> 00:46:00,510
oldest so if anyone has ever tried to do

00:45:57,450 --> 00:46:02,490
this at home it's now 17 minutes at the

00:46:00,510 --> 00:46:05,190
time to start we have deployed a cluster

00:46:02,490 --> 00:46:07,529
and in the midst of during a live

00:46:05,190 --> 00:46:08,970
presentation we have taking a cluster

00:46:07,529 --> 00:46:11,849
that did not completely deploy because

00:46:08,970 --> 00:46:13,260
of networking obviously and then

00:46:11,849 --> 00:46:14,579
switched to another class that we've

00:46:13,260 --> 00:46:15,960
already built and deployed our

00:46:14,579 --> 00:46:19,069
application which we could have done on

00:46:15,960 --> 00:46:22,289
cluster one had all the notes come up

00:46:19,069 --> 00:46:24,839
yeah I think this is awesome and fit in

00:46:22,289 --> 00:46:26,250
to shoeboxes so next time you go if you

00:46:24,839 --> 00:46:28,230
guys were playing with kubernetes at all

00:46:26,250 --> 00:46:29,520
and you guys need and someone talks

00:46:28,230 --> 00:46:30,329
about to have cluster being slow that

00:46:29,520 --> 00:46:32,700
kind of stuff

00:46:30,329 --> 00:46:33,990
maybe you consider you know an increase

00:46:32,700 --> 00:46:37,230
in performance and move it to an arm

00:46:33,990 --> 00:46:39,660
cluster because I know that the same

00:46:37,230 --> 00:46:42,539
thing on AWS that I worked with with one

00:46:39,660 --> 00:46:44,010
of my co-workers for using cube spray

00:46:42,539 --> 00:46:45,420
took about 20 minutes and that was

00:46:44,010 --> 00:46:48,000
considered to be blindingly fast for

00:46:45,420 --> 00:46:48,569
deployment in AWS for a sample

00:46:48,000 --> 00:46:51,450
application

00:46:48,569 --> 00:46:53,369
oh and mind you also the containers that

00:46:51,450 --> 00:46:55,500
we have for this are also built from

00:46:53,369 --> 00:46:57,930
scratch with bilder we will be including

00:46:55,500 --> 00:46:59,579
that each the base containers pretty

00:46:57,930 --> 00:47:01,140
much are three lines so if you have not

00:46:59,579 --> 00:47:03,569
played with build-up please I recommend

00:47:01,140 --> 00:47:10,859
it is a fantastic tool and you don't

00:47:03,569 --> 00:47:18,839
have to be chained to docker odd-man

00:47:10,859 --> 00:47:22,010
does work pretty nice well you know this

00:47:18,839 --> 00:47:24,869
means that we're not lying it does work

00:47:22,010 --> 00:47:27,059
if I get an error from Python sequel

00:47:24,869 --> 00:47:28,920
alchemy library look it actually got

00:47:27,059 --> 00:47:33,559
there and it indeed failed like

00:47:28,920 --> 00:47:33,559
everything else we tried last night I

00:47:34,670 --> 00:47:38,039
must have put in a special character

00:47:36,750 --> 00:47:42,440
because somebody forgot to put in

00:47:38,039 --> 00:47:42,440
escapes you are a special character

00:47:43,779 --> 00:47:58,369
yeah okay so all of this code we will

00:47:55,519 --> 00:47:59,749
actually have on get lab I will actually

00:47:58,369 --> 00:48:00,769
let him talk about it since he's the one

00:47:59,749 --> 00:48:03,589
being doing the pushing

00:48:00,769 --> 00:48:05,179
okay so let's you know the older code

00:48:03,589 --> 00:48:06,679
they had it was pretty much me going

00:48:05,179 --> 00:48:08,329
like oh I know Python I've been doing it

00:48:06,679 --> 00:48:10,489
for like a decade that kind of stuff I

00:48:08,329 --> 00:48:12,609
just don't touch web stuff because it

00:48:10,489 --> 00:48:16,279
was against my religion for a while

00:48:12,609 --> 00:48:17,660
and more or less with you know trying to

00:48:16,279 --> 00:48:19,069
learn I look I do what everyone else

00:48:17,660 --> 00:48:20,779
does okay let me go look at examples

00:48:19,069 --> 00:48:22,669
well then I found out well wow those

00:48:20,779 --> 00:48:25,309
examples don't work surprise surprise

00:48:22,669 --> 00:48:26,390
and oh by the way the container are

00:48:25,309 --> 00:48:29,179
supposed to call up was something

00:48:26,390 --> 00:48:30,679
proprietary and only for x86 so when

00:48:29,179 --> 00:48:32,599
trying to look up and figure out how do

00:48:30,679 --> 00:48:35,380
you build a container from scratch there

00:48:32,599 --> 00:48:37,759
was virtually nothing I could find so I

00:48:35,380 --> 00:48:40,130
had to do everything on the fly by the

00:48:37,759 --> 00:48:41,599
way Jason was kindly to help me out

00:48:40,130 --> 00:48:43,519
unfortunately he was out of the country

00:48:41,599 --> 00:48:48,589
for like six weeks and then came home -

00:48:43,519 --> 00:48:50,299
well more fun and distractions okay so

00:48:48,589 --> 00:48:52,099
we do have ten minutes until the lunch

00:48:50,299 --> 00:48:54,979
break I don't know in the stream cuts

00:48:52,099 --> 00:48:56,749
off but essentially that's it let's ask

00:48:54,979 --> 00:49:02,719
questions if anybody still has some and

00:48:56,749 --> 00:49:05,509
I'm gonna guess there's a few okay can

00:49:02,719 --> 00:49:08,029
we put the contact info uh we will

00:49:05,509 --> 00:49:13,839
actually add that it's not on the slide

00:49:08,029 --> 00:49:13,839
right now oh yeah I can split this up

00:49:15,640 --> 00:49:21,229
right so we will make sure that all the

00:49:19,159 --> 00:49:24,019
notes are in place on the YouTube video

00:49:21,229 --> 00:49:26,779
itself we can make sure that he we send

00:49:24,019 --> 00:49:28,759
out all of this information as a part of

00:49:26,779 --> 00:49:31,429
the information packet that goes out and

00:49:28,759 --> 00:49:34,249
if you go to get lab comm slash buzz

00:49:31,429 --> 00:49:36,979
crate you will find all of the same

00:49:34,249 --> 00:49:40,099
information and I will make sure that

00:49:36,979 --> 00:49:42,769
all the documentation and the slides and

00:49:40,099 --> 00:49:45,819
the link to this video are added to the

00:49:42,769 --> 00:49:45,819
description that you see here

00:50:00,660 --> 00:50:08,470
okay so he says he managed to get the

00:50:03,820 --> 00:50:16,990
Nvidia Nano which Nano specifically oh I

00:50:08,470 --> 00:50:18,850
got an X doing it yeah yeah it's a it is

00:50:16,990 --> 00:50:20,080
a neat thing I will tell you this when

00:50:18,850 --> 00:50:21,130
it comes to every arm board it's

00:50:20,080 --> 00:50:22,780
something that we ran into even with

00:50:21,130 --> 00:50:24,340
this project with one of our you know

00:50:22,780 --> 00:50:27,550
one of my personal favorite Hardware

00:50:24,340 --> 00:50:30,160
pieces the biggest thing is with this

00:50:27,550 --> 00:50:31,780
Hardware yes you can see the specs it's

00:50:30,160 --> 00:50:33,460
gonna seem amazing oh look you can boot

00:50:31,780 --> 00:50:35,350
you know their version Linux run a

00:50:33,460 --> 00:50:37,240
mainline kernel try to change the config

00:50:35,350 --> 00:50:38,890
for it having access like even the

00:50:37,240 --> 00:50:40,480
leaper potatoes like trying to run our

00:50:38,890 --> 00:50:43,000
ceilings arm on it we ran into some

00:50:40,480 --> 00:50:45,250
issues it come down to there's a lot

00:50:43,000 --> 00:50:47,170
going on on that kernel and when you

00:50:45,250 --> 00:50:50,050
don't realize it until you get away from

00:50:47,170 --> 00:50:52,000
x86 and you realize oh my gosh maybe I

00:50:50,050 --> 00:50:54,250
don't know as much Linux as I do or you

00:50:52,000 --> 00:50:57,820
see how big and awesome it really is and

00:50:54,250 --> 00:50:59,710
how did it ever work that well so in a

00:50:57,820 --> 00:51:01,240
nutshell but yes I will be checking it

00:50:59,710 --> 00:51:02,440
out we'll be seeing what's going on and

00:51:01,240 --> 00:51:04,420
I can tell you right now as soon as it's

00:51:02,440 --> 00:51:06,280
main line and we have a solid way to get

00:51:04,420 --> 00:51:07,270
the boot yes we will play with it

00:51:06,280 --> 00:51:11,260
especially if someone provides us

00:51:07,270 --> 00:51:12,280
hardware of course in fact you know if

00:51:11,260 --> 00:51:14,170
you're going to commit that kind of code

00:51:12,280 --> 00:51:16,000
if it's on more on the hardware end to

00:51:14,170 --> 00:51:17,710
try to get it work for the crew for this

00:51:16,000 --> 00:51:19,270
project yes otherwise please consider

00:51:17,710 --> 00:51:20,470
checking out our genetics arm they love

00:51:19,270 --> 00:51:22,960
having some poll requests or anything

00:51:20,470 --> 00:51:24,520
specifically hardware related and any

00:51:22,960 --> 00:51:26,350
better relationship that we can have

00:51:24,520 --> 00:51:28,690
with any more vendors and the more the

00:51:26,350 --> 00:51:32,859
merrier you know what we're easy to get

00:51:28,690 --> 00:51:35,950
working with what arch linux arm yes

00:51:32,859 --> 00:51:38,380
Jason is a core developer I have been a

00:51:35,950 --> 00:51:42,130
contributor and just a little back story

00:51:38,380 --> 00:51:43,600
I was a rather frustrated Debian user

00:51:42,130 --> 00:51:47,070
that Jason's converted me and I haven't

00:51:43,600 --> 00:51:58,390
looked back and approaching a decade now

00:51:47,070 --> 00:51:58,960
yeah time flies doesn't it dirt any more

00:51:58,390 --> 00:52:02,100
questions

00:51:58,960 --> 00:52:02,100
any challenges

00:52:04,460 --> 00:52:07,740
okay so I will tell you right now our

00:52:07,050 --> 00:52:09,450
sling is armed

00:52:07,740 --> 00:52:11,370
I have a Raspberry Pi that I've used

00:52:09,450 --> 00:52:13,440
since I got installed after talking to

00:52:11,370 --> 00:52:14,850
him that has been so reliable if the

00:52:13,440 --> 00:52:16,470
only time it got rebooted was when we

00:52:14,850 --> 00:52:18,240
actually made it a part of my parents

00:52:16,470 --> 00:52:21,180
house so I can go through and fix our

00:52:18,240 --> 00:52:22,890
computer's Arch Linux is so reliable

00:52:21,180 --> 00:52:24,990
that I've gotten my dad to use it and

00:52:22,890 --> 00:52:27,990
he's converted all of his work machines

00:52:24,990 --> 00:52:29,760
at a very important company working on

00:52:27,990 --> 00:52:32,040
computer hardware so he runs all those

00:52:29,760 --> 00:52:33,390
windows stuff for corporate in a VM even

00:52:32,040 --> 00:52:35,130
including on very expensive test

00:52:33,390 --> 00:52:36,480
equipment from Lacroix Tektronix that

00:52:35,130 --> 00:52:40,800
kind of stuff like oscilloscopes that

00:52:36,480 --> 00:52:42,630
goes yeah okay so some the question is

00:52:40,800 --> 00:52:44,730
whether Arch Linux arm is very reliable

00:52:42,630 --> 00:52:46,200
when it comes to upgrades Arch Linux

00:52:44,730 --> 00:52:47,490
itself a lot of people say that it's not

00:52:46,200 --> 00:52:49,590
reliable here's a hint

00:52:47,490 --> 00:52:52,080
don't update every 18 months and you're

00:52:49,590 --> 00:52:54,120
probably fine when it comes to our CH

00:52:52,080 --> 00:52:56,280
Linux arm don't update every 18 months

00:52:54,120 --> 00:52:58,430
and you're probably fine update more

00:52:56,280 --> 00:53:01,920
often than that and you should be ok I

00:52:58,430 --> 00:53:04,860
have a desktop that has the exact same

00:53:01,920 --> 00:53:08,010
install including after a complete

00:53:04,860 --> 00:53:10,170
failure of a SSD disconnecting itself on

00:53:08,010 --> 00:53:11,940
the SATA bus same exact install other

00:53:10,170 --> 00:53:14,910
than literally mounting it and copying

00:53:11,940 --> 00:53:17,640
it off and rerunning pac-man that has

00:53:14,910 --> 00:53:22,170
been installed since 2010 it's still

00:53:17,640 --> 00:53:25,110
running and I have a go FlexNet which is

00:53:22,170 --> 00:53:29,370
running arm v5 that's been running since

00:53:25,110 --> 00:53:31,890
that same time frame also never broke so

00:53:29,370 --> 00:53:37,290
if you keep relatively up-to-date like

00:53:31,890 --> 00:53:41,640
once a month you should be fine anybody

00:53:37,290 --> 00:53:44,490
else anybody else yeah I we are not

00:53:41,640 --> 00:53:46,020
using F 2 FS my cluster the images that

00:53:44,490 --> 00:53:48,330
I'm using from Libra computer is

00:53:46,020 --> 00:53:52,020
actually built on butter FS which I am

00:53:48,330 --> 00:53:53,820
not particularly a fan of it does I

00:53:52,020 --> 00:53:55,290
won't argue with that I just I'm not

00:53:53,820 --> 00:53:56,930
there's things I don't like about it

00:53:55,290 --> 00:53:59,880
personally

00:53:56,930 --> 00:54:05,310
his cluster is currently running EXT i

00:53:59,880 --> 00:54:07,680
think yeah so ext4 I think journaling

00:54:05,310 --> 00:54:11,250
might be disabled and some of the

00:54:07,680 --> 00:54:13,290
metadata's is but it's an SD card if

00:54:11,250 --> 00:54:13,800
it's newer it's actually pretty

00:54:13,290 --> 00:54:16,810
resilient

00:54:13,800 --> 00:54:18,250
if not you can run F 2 FS but be

00:54:16,810 --> 00:54:19,630
we're to not make your partition bigger

00:54:18,250 --> 00:54:21,100
than half your desk because if you beat

00:54:19,630 --> 00:54:22,690
the crap out of it you're gonna eat the

00:54:21,100 --> 00:54:25,960
rest of the disk because of the way ftfs

00:54:22,690 --> 00:54:30,460
works right you just have to know how

00:54:25,960 --> 00:54:31,990
have to if that's works yeah okay so the

00:54:30,460 --> 00:54:33,400
clusters are up here we're at five

00:54:31,990 --> 00:54:35,440
minutes till I'm gonna go ahead and say

00:54:33,400 --> 00:54:37,330
thanks everybody for coming please come

00:54:35,440 --> 00:54:41,280
have a look ask questions poke them but

00:54:37,330 --> 00:54:41,280

YouTube URL: https://www.youtube.com/watch?v=vRqG3NloJ6w


