Title: James Richardson - Application Containerization without Docker
Publication date: 2019-06-19
Playlist: 2019 SouthEast LinuxFest
Description: 
	SouthEast Linux Fest 2019
Application containerization is an important tool for process isolation. I will show how to achieve containerization using guix. These containers have better composability and upgrade characteristics than docker. Security updates are also easier. These containers can also be cast into a docker compatible format to be used with usual docker tools if desired.
Captions: 
	00:05:23,400 --> 00:05:38,880
okay that better all righty

00:05:27,360 --> 00:05:38,880
yeah so um what does this feels weird

00:05:39,150 --> 00:05:49,000
anyway I'll make do so um if we're gonna

00:05:46,270 --> 00:05:52,620
make application containers to deploy

00:05:49,000 --> 00:05:56,140
with docker why do we need to do that

00:05:52,620 --> 00:05:59,290
why can't we just use build packages for

00:05:56,140 --> 00:06:02,050
our operating system and tying to the

00:05:59,290 --> 00:06:05,260
whole distribution network that we that

00:06:02,050 --> 00:06:08,650
we have like satellite pac-man Debian

00:06:05,260 --> 00:06:14,170
packages well building native packages

00:06:08,650 --> 00:06:16,120
is on somewhat difficult and then you

00:06:14,170 --> 00:06:19,420
have version dependencies of various

00:06:16,120 --> 00:06:23,230
libraries and if you want ten different

00:06:19,420 --> 00:06:29,440
versions of nodejs you have issues at

00:06:23,230 --> 00:06:32,260
every arm language runtime has their own

00:06:29,440 --> 00:06:37,090
own little package managers at virtua in

00:06:32,260 --> 00:06:39,640
for for Python rpm for Ruby um Perl has

00:06:37,090 --> 00:06:43,750
a thing I think Haskell people have a

00:06:39,640 --> 00:06:45,490
thing um so it's hard hard to eat all

00:06:43,750 --> 00:06:49,930
that to work out at the operating system

00:06:45,490 --> 00:06:53,010
level so one way to solve that was do

00:06:49,930 --> 00:06:56,010
you have the Universal installer script

00:06:53,010 --> 00:07:00,010
so I don't know if L can see that or not

00:06:56,010 --> 00:07:04,960
but I'm obviously that's not going to

00:07:00,010 --> 00:07:10,300
work either so let's talk about

00:07:04,960 --> 00:07:12,340
application containers application

00:07:10,300 --> 00:07:15,070
container simply is it's a it's a

00:07:12,340 --> 00:07:17,770
thinkin system of applications of timett

00:07:15,070 --> 00:07:20,170
libraries frameworks everything in

00:07:17,770 --> 00:07:23,620
developer needs to work together to run

00:07:20,170 --> 00:07:25,980
the application and I'll call that the

00:07:23,620 --> 00:07:25,980
container

00:07:27,450 --> 00:07:31,740
so um essentially the application

00:07:30,570 --> 00:07:36,150
container should capture the whole

00:07:31,740 --> 00:07:39,150
dependency graph of every team

00:07:36,150 --> 00:07:42,350
application needs all the way from the

00:07:39,150 --> 00:07:48,720
language runtime all the way down to the

00:07:42,350 --> 00:07:53,310
bootstraps and powers on for instance if

00:07:48,720 --> 00:07:55,020
you're building a Python application it

00:07:53,310 --> 00:08:01,710
may be important to know how the Python

00:07:55,020 --> 00:08:04,290
binary was compelled and once you build

00:08:01,710 --> 00:08:08,250
if you build this container anything you

00:08:04,290 --> 00:08:10,110
can basically pick it up and copy it and

00:08:08,250 --> 00:08:13,710
running anywhere and it should run

00:08:10,110 --> 00:08:17,580
exactly like like the developer wants it

00:08:13,710 --> 00:08:21,960
to run um there are various tools that

00:08:17,580 --> 00:08:24,150
can try to solve this problem there snap

00:08:21,960 --> 00:08:26,010
pushes popular for a bun too and flat

00:08:24,150 --> 00:08:29,850
pack which is Red Hat

00:08:26,010 --> 00:08:31,320
um but I don't know a whole lot about

00:08:29,850 --> 00:08:37,680
those so I'm not going to talk about

00:08:31,320 --> 00:08:41,370
them but they are there and then docker

00:08:37,680 --> 00:08:48,690
is the um seems to have the most market

00:08:41,370 --> 00:08:51,000
share or I guess marquees here my share

00:08:48,690 --> 00:08:55,290
at the moment what people are forcing me

00:08:51,000 --> 00:08:56,070
to use so I'm saying they may not be the

00:08:55,290 --> 00:08:58,220
best solution

00:08:56,070 --> 00:08:58,220
Oh

00:09:02,880 --> 00:09:08,290
and there are other people are trying to

00:09:05,350 --> 00:09:11,350
solve this deployment deployment

00:09:08,290 --> 00:09:18,040
situation with operating systems and

00:09:11,350 --> 00:09:20,680
package managers like Nix and geeks and

00:09:18,040 --> 00:09:21,370
um so now I'll spend a few minutes and

00:09:20,680 --> 00:09:25,870
talk about docker

00:09:21,370 --> 00:09:30,670
I guess if you how many people use

00:09:25,870 --> 00:09:31,570
docker how many people use talking

00:09:30,670 --> 00:09:34,420
because they think that's a good

00:09:31,570 --> 00:09:39,970
solution as the poster it was forced on

00:09:34,420 --> 00:09:41,530
them but anyway I'm sure it's just used

00:09:39,970 --> 00:09:45,760
are you familiar with this docker file

00:09:41,530 --> 00:09:49,600
and this is an example I found and it

00:09:45,760 --> 00:09:56,380
builds a simple on flask application in

00:09:49,600 --> 00:09:58,630
this case and you can see at the top it

00:09:56,380 --> 00:10:00,570
says from a bloom to latest that's going

00:09:58,630 --> 00:10:04,720
to pull down the latest Ubuntu image

00:10:00,570 --> 00:10:10,660
whatever that is and do various updates

00:10:04,720 --> 00:10:12,220
and install Python things but with that

00:10:10,660 --> 00:10:16,060
with docker you can't you can build that

00:10:12,220 --> 00:10:20,230
and I'll be pour it into your doctor

00:10:16,060 --> 00:10:23,620
infrastructure so I don't have my notes

00:10:20,230 --> 00:10:27,340
up here on potential engine issues with

00:10:23,620 --> 00:10:29,710
that you may you may not be fully aware

00:10:27,340 --> 00:10:33,610
of all your of your whole dependency

00:10:29,710 --> 00:10:37,900
graph I mean from a bunch of later ok it

00:10:33,610 --> 00:10:42,280
pulls the latest a buncha down what does

00:10:37,900 --> 00:10:45,940
that mean when I did I'm on my laptop it

00:10:42,280 --> 00:10:49,410
pulled on 1804 if I do that two months

00:10:45,940 --> 00:10:53,710
from now it may be a different version

00:10:49,410 --> 00:10:55,870
and you don't really know what is in in

00:10:53,710 --> 00:10:58,390
any of the any of these things unless

00:10:55,870 --> 00:11:00,190
you fixate the if you have your own a

00:10:58,390 --> 00:11:03,450
bunch of distribution and you can

00:11:00,190 --> 00:11:09,030
control everything then you can start

00:11:03,450 --> 00:11:12,360
making this thing more reproducible um

00:11:09,030 --> 00:11:17,040
maybe that's important maybe it's not

00:11:12,360 --> 00:11:18,689
I tend to think it is and once you

00:11:17,040 --> 00:11:21,540
create this docker image it is rather

00:11:18,689 --> 00:11:23,069
opaque you can't reason about it you

00:11:21,540 --> 00:11:30,179
don't retain it it's hard to determine

00:11:23,069 --> 00:11:37,170
exactly what's in it um Keeks is a

00:11:30,179 --> 00:11:38,339
package manager that will that it wasn't

00:11:37,170 --> 00:11:40,350
built this to solve this particular

00:11:38,339 --> 00:11:44,730
problem but as a side effect it kind of

00:11:40,350 --> 00:11:47,579
does what geeks is is a arm essentially

00:11:44,730 --> 00:11:49,920
it's a functional package manager has

00:11:47,579 --> 00:11:52,110
per user profiles in supports

00:11:49,920 --> 00:11:55,860
transaction upgrades and roll backs for

00:11:52,110 --> 00:12:00,660
various packages and it doesn't require

00:11:55,860 --> 00:12:04,230
root once it's installed so if I won't

00:12:00,660 --> 00:12:07,230
have a python 2.5 Python 3 that I said

00:12:04,230 --> 00:12:08,970
within my environment I can do that if a

00:12:07,230 --> 00:12:13,499
fellow developer on the boss wants to

00:12:08,970 --> 00:12:16,799
have 3.5 he is free to do that if I want

00:12:13,499 --> 00:12:20,249
to have both python 3.5 and 3.7 i can

00:12:16,799 --> 00:12:22,679
set up different profiles and do that or

00:12:20,249 --> 00:12:26,220
for some reason i want to compile Python

00:12:22,679 --> 00:12:29,160
with clang and put on 3s deeper debug

00:12:26,220 --> 00:12:33,919
files I can have both exists in my

00:12:29,160 --> 00:12:33,919
profile and switch freely back and forth

00:12:37,250 --> 00:12:43,160
each package is essentially defined by

00:12:39,680 --> 00:12:47,270
alarm and embedded DSL which is built on

00:12:43,160 --> 00:12:49,250
top of scheme in particular gal and the

00:12:47,270 --> 00:12:59,030
package on Bill process is also defined

00:12:49,250 --> 00:13:00,440
by the same on top of DSL and took the

00:12:59,030 --> 00:13:03,140
weight the way the way I'm geeks

00:13:00,440 --> 00:13:07,030
achieves this is that every time it

00:13:03,140 --> 00:13:11,210
builds a package it looks at all the

00:13:07,030 --> 00:13:13,820
basically the 23 the thing you're trying

00:13:11,210 --> 00:13:16,690
to build the runtimes it needs all the

00:13:13,820 --> 00:13:18,380
libraries and the bootstrap empowers and

00:13:16,690 --> 00:13:21,140
encapsulates all that into a

00:13:18,380 --> 00:13:23,840
cryptographic hash and stores that

00:13:21,140 --> 00:13:27,340
particular package you know I mean in an

00:13:23,840 --> 00:13:30,530
immutable store that's tied to the hash

00:13:27,340 --> 00:13:34,610
so that you can support multiple

00:13:30,530 --> 00:13:39,170
versions different people are on

00:13:34,610 --> 00:13:41,870
different um in different profiles and

00:13:39,170 --> 00:13:45,590
another advantage of doing that if I

00:13:41,870 --> 00:13:49,610
need to install some big collect Haskell

00:13:45,590 --> 00:13:52,160
application it pulls on certain

00:13:49,610 --> 00:13:55,520
dependencies and somebody else needs to

00:13:52,160 --> 00:14:01,700
in also in solid per Haskell that has

00:13:55,520 --> 00:14:04,040
the same same libraries it's put in such

00:14:01,700 --> 00:14:06,890
a way that the data shared across users

00:14:04,040 --> 00:14:08,600
so only only need one copy of the

00:14:06,890 --> 00:14:16,120
particular package at this particular

00:14:08,600 --> 00:14:16,120
version so for instance

00:14:18,389 --> 00:14:30,879
yes yes you can get it'll be a separated

00:14:25,959 --> 00:14:34,360
WordPad for instance um I install Python

00:14:30,879 --> 00:14:39,970
on my boss last night and it all landed

00:14:34,360 --> 00:14:44,459
in this directory named almonds this be

00:14:39,970 --> 00:14:49,269
cash at the front i'm captures the

00:14:44,459 --> 00:14:53,139
Python 3.7 armed sources and all its

00:14:49,269 --> 00:14:58,119
dependencies so for instance if I want

00:14:53,139 --> 00:15:02,889
to recompile this Python with different

00:14:58,119 --> 00:15:04,300
compiler flags for whatever reason it

00:15:02,889 --> 00:15:06,639
will build a package but it will have it

00:15:04,300 --> 00:15:11,740
it won't have a different hash although

00:15:06,639 --> 00:15:15,910
it'll still be version 3.7 and I don't

00:15:11,740 --> 00:15:17,679
have my machine to demo this but but

00:15:15,910 --> 00:15:23,079
geek supports profiles so I can switch

00:15:17,679 --> 00:15:25,929
back and forth on fairly easily it does

00:15:23,079 --> 00:15:30,480
this by managing symlinks and into the

00:15:25,929 --> 00:15:30,480
good news store home

00:15:30,540 --> 00:15:35,769
well they cryptographic hash it's based

00:15:34,029 --> 00:15:39,160
on compiler configuration options build

00:15:35,769 --> 00:15:41,910
scripts and all the other inputs needed

00:15:39,160 --> 00:15:41,910
to make the package

00:15:50,950 --> 00:15:53,700
yeah

00:16:03,380 --> 00:16:08,470
your hand should the source of the

00:16:05,900 --> 00:16:08,470
source package

00:16:14,370 --> 00:16:19,379
and I'm the geeks people also built the

00:16:16,620 --> 00:16:22,410
arm Linux distribution based on this

00:16:19,379 --> 00:16:26,189
package manager called geeks SD we

00:16:22,410 --> 00:16:28,350
should get you get the butt roll back

00:16:26,189 --> 00:16:32,490
and roll for stress there's low trades

00:16:28,350 --> 00:16:42,449
put out the system level which is really

00:16:32,490 --> 00:16:44,069
nifty and about a year ago they invented

00:16:42,449 --> 00:16:46,379
this new command for geeks called geeks

00:16:44,069 --> 00:16:49,319
pack and it will actually create a

00:16:46,379 --> 00:16:56,370
bundle are they given packages and all

00:16:49,319 --> 00:16:58,019
of this dependencies I can run if for

00:16:56,370 --> 00:17:01,410
some reason I wanted to give somebody a

00:16:58,019 --> 00:17:06,600
gal SDK and they weren't lucky enough to

00:17:01,410 --> 00:17:10,289
be running geeks like I can run geeks

00:17:06,600 --> 00:17:13,049
pax geek geeks pack and he's package

00:17:10,289 --> 00:17:16,980
names Carl Emacs in Emacs death geyser

00:17:13,049 --> 00:17:18,839
and it will create a carb all of the

00:17:16,980 --> 00:17:24,020
relevant packages I love good new store

00:17:18,839 --> 00:17:30,750
and just harp all can be copied to the

00:17:24,020 --> 00:17:33,740
toolbox and unpacked and route and then

00:17:30,750 --> 00:17:38,850
you just run this big long path you get

00:17:33,740 --> 00:17:41,490
to get the wrong guy that's not exactly

00:17:38,850 --> 00:17:46,080
user-friendly because nobody wants to

00:17:41,490 --> 00:17:48,600
type in that big long path so what we

00:17:46,080 --> 00:17:52,039
can do is when we create the pack we can

00:17:48,600 --> 00:17:55,620
tell it's thin link off the new bin and

00:17:52,039 --> 00:17:59,460
into bin in the good new store and build

00:17:55,620 --> 00:18:02,159
the same and build the same package now

00:17:59,460 --> 00:18:06,450
if I copy that file to another box and

00:18:02,159 --> 00:18:08,220
unpack it in route then I'll be able to

00:18:06,450 --> 00:18:13,880
just run slash out slash good news flash

00:18:08,220 --> 00:18:13,880
bin slash cow and be able to do cow work

00:18:14,390 --> 00:18:20,760
and that's not good enough is you want

00:18:17,880 --> 00:18:24,659
more isolation you can unpack this

00:18:20,760 --> 00:18:26,520
somewhere like under slash temp

00:18:24,659 --> 00:18:28,650
flashback it's what I used

00:18:26,520 --> 00:18:33,960
and once you unpack it there you can run

00:18:28,650 --> 00:18:36,330
this to arm unshare change route and

00:18:33,960 --> 00:18:40,170
then you have a change route this really

00:18:36,330 --> 00:18:44,700
only has access to is the arm gaol

00:18:40,170 --> 00:18:46,230
commands I'm not sure how much sense it

00:18:44,700 --> 00:18:49,740
makes it I forgot but if you wanted to

00:18:46,230 --> 00:18:53,610
put Apache or nginx or your Freight

00:18:49,740 --> 00:18:58,530
favorite class out you can do the same

00:18:53,610 --> 00:19:02,190
thing so know exactly what I have I can

00:18:58,530 --> 00:19:04,530
land it on another box and run the thing

00:19:02,190 --> 00:19:07,710
in the change room that should be fairly

00:19:04,530 --> 00:19:09,450
isolated I'm the only requirement for

00:19:07,710 --> 00:19:13,260
the other box it needs to have a Linux

00:19:09,450 --> 00:19:20,850
kernel three dots up to another to

00:19:13,260 --> 00:19:28,380
support the unshared namespaces um but

00:19:20,850 --> 00:19:30,540
if that's not good enough I can say give

00:19:28,380 --> 00:19:35,220
it our - self docker to the geek pack

00:19:30,540 --> 00:19:40,110
command I guess what it makes it makes a

00:19:35,220 --> 00:19:42,840
trouble all that can be consumed by a

00:19:40,110 --> 00:19:45,420
doctor so yeah actually doctor load this

00:19:42,840 --> 00:19:50,130
trouble and it creates the arm docker

00:19:45,420 --> 00:19:53,360
container that can be run so the

00:19:50,130 --> 00:19:53,360
difference is this yes sir

00:19:56,100 --> 00:20:08,970
I do not know what that means so I do

00:20:04,500 --> 00:20:10,679
not know but it's probably supposedly

00:20:08,970 --> 00:20:20,010
conforms to the to the specs for the

00:20:10,679 --> 00:20:24,750
docker homes and my laptop did blow up I

00:20:20,010 --> 00:20:27,780
could show you the arm differences but

00:20:24,750 --> 00:20:29,340
with this arm building the docker image

00:20:27,780 --> 00:20:32,450
through geeks you know exactly what you

00:20:29,340 --> 00:20:39,450
have and it's really easy to reproduce

00:20:32,450 --> 00:20:42,600
because all the geeks packages are um so

00:20:39,450 --> 00:20:47,700
the whole geek system is it's defined as

00:20:42,600 --> 00:20:49,890
a geek arm it Storting it so I can look

00:20:47,700 --> 00:20:52,049
at the get actual get committed I have

00:20:49,890 --> 00:20:54,120
on the system that the system I used to

00:20:52,049 --> 00:20:59,630
build this you can check out that same

00:20:54,120 --> 00:21:02,820
get commit and briefer just this

00:20:59,630 --> 00:21:08,309
container and if you compare it by four

00:21:02,820 --> 00:21:16,820
byte pushes on I think it's kind of net

00:21:08,309 --> 00:21:16,820
neat and that is a very short talk

00:21:26,320 --> 00:21:29,190
yes

00:21:36,690 --> 00:21:40,679
not and I there the there are some

00:21:39,239 --> 00:21:48,029
source package that won't build

00:21:40,679 --> 00:21:52,229
deterministically yes but I didn't do a

00:21:48,029 --> 00:21:56,609
screen dump I should have but but if you

00:21:52,229 --> 00:22:00,119
look at the arm if you if you're looking

00:21:56,609 --> 00:22:02,700
keek store everything is on by arm root

00:22:00,119 --> 00:22:07,080
root and the timestamp is set did epoch

00:22:02,700 --> 00:22:09,659
so that when you create the tarball if

00:22:07,080 --> 00:22:12,239
the I think the format they call is not

00:22:09,659 --> 00:22:14,340
which is the NYX archive which is

00:22:12,239 --> 00:22:16,440
essentially the same thing as char but

00:22:14,340 --> 00:22:20,549
the all the timestamps timestamps are

00:22:16,440 --> 00:22:23,220
set to the epoch and the user ID and the

00:22:20,549 --> 00:22:25,859
you have the he is at the zero zero so I

00:22:23,220 --> 00:22:27,809
built the thing on my box and build the

00:22:25,859 --> 00:22:33,690
thing on this box they will compare bite

00:22:27,809 --> 00:22:35,070
for bite there's also a self system in

00:22:33,690 --> 00:22:38,489
geek so you can say I can say geeks

00:22:35,070 --> 00:22:40,159
challenge name of package it will build

00:22:38,489 --> 00:22:48,539
it on my box it will look at the

00:22:40,159 --> 00:22:51,629
upstream bill farm and compare and you

00:22:48,539 --> 00:22:54,330
want to really get into it you can do

00:22:51,629 --> 00:22:55,859
through arm cycle I cycle through or

00:22:54,330 --> 00:22:57,299
cycle three you'll be able to package

00:22:55,859 --> 00:22:59,700
three times and see if you get the same

00:22:57,299 --> 00:23:02,509
result that's how you can detect it the

00:22:59,700 --> 00:23:02,509
package yes sir

00:23:06,240 --> 00:23:08,270
Oh

00:23:16,800 --> 00:23:22,080
he was asking about the format of the

00:23:19,200 --> 00:23:31,470
package definition um

00:23:22,080 --> 00:23:36,140
but it's not Amal its scheme yeah I

00:23:31,470 --> 00:23:44,310
don't have a dump here yes it is a lisp

00:23:36,140 --> 00:23:56,330
so it's very concise can't get to the

00:23:44,310 --> 00:23:56,330
web on your box f11 jeez this kte thing

00:24:03,120 --> 00:24:10,009
dude Oh

00:24:06,920 --> 00:24:10,009
[Music]

00:24:15,060 --> 00:24:20,630
ah the keys aren't that right

00:24:28,059 --> 00:24:39,219
oh you don't have geeks on this box

00:24:30,899 --> 00:24:40,809
that's not fortunate cuz they on top

00:24:39,219 --> 00:24:43,619
geeks had a package and it would bring

00:24:40,809 --> 00:24:43,619
one up for me

00:24:49,020 --> 00:24:52,940
oh you don't look at those

00:24:58,070 --> 00:25:10,610
they look it up stream words gonna

00:25:12,260 --> 00:25:17,600
packages let's pick one

00:25:23,400 --> 00:25:28,730
Python I want to be a Python

00:25:34,200 --> 00:25:42,860
control you have plus plus plus plus

00:25:36,690 --> 00:25:42,860
how's that yeah make this fullscreen too

00:25:54,040 --> 00:26:17,950
what Oh bigger bigger bigger here the

00:26:08,530 --> 00:26:21,060
help but this example cheats arm OS

00:26:17,950 --> 00:26:21,060
doing some fancy stuff

00:26:29,150 --> 00:26:40,490
was a simple example yeah well you took

00:26:38,160 --> 00:26:40,490
my picture

00:26:42,370 --> 00:26:58,340
[Music]

00:26:45,080 --> 00:26:58,340
who attr let's see what's in here

00:27:08,630 --> 00:27:12,320
yes LD max

00:27:30,560 --> 00:27:39,350
well here only can a package I wrote

00:27:35,030 --> 00:27:39,350
with me may not be useful

00:27:43,760 --> 00:27:52,630
oh I'll mention this too this is how I

00:27:47,870 --> 00:27:56,150
build the kernel from my box because

00:27:52,630 --> 00:28:00,230
geeks is armed really really care about

00:27:56,150 --> 00:28:04,280
suffer freedom so you have a laptop with

00:28:00,230 --> 00:28:10,150
my father doesn't have um free free free

00:28:04,280 --> 00:28:14,780
from where it's not gonna be happy so I

00:28:10,150 --> 00:28:16,520
needed I I did we all Wi-Fi I need this

00:28:14,780 --> 00:28:24,250
from reply from out from my laptop to

00:28:16,520 --> 00:28:28,370
work so I defined this package yeah um a

00:28:24,250 --> 00:28:33,110
lot of this last version numbers from

00:28:28,370 --> 00:28:35,480
the git checkout so they pulls from from

00:28:33,110 --> 00:28:37,520
this particular get it pulls a

00:28:35,480 --> 00:28:46,280
particular check out from the kernel

00:28:37,520 --> 00:28:51,140
version this arm where's their sha-256

00:28:46,280 --> 00:28:52,700
page 32 that hash there's a macro that

00:28:51,140 --> 00:28:57,470
generates that for you so you don't have

00:28:52,700 --> 00:29:02,600
to key that in my hand and this is sent

00:28:57,470 --> 00:29:08,210
the arm built system you get the trivial

00:29:02,600 --> 00:29:11,330
build system and I take the source Wendy

00:29:08,210 --> 00:29:13,550
where I want won't land it and it pretty

00:29:11,330 --> 00:29:18,110
much they'll go the package with that

00:29:13,550 --> 00:29:22,280
definition but then I also have to use

00:29:18,110 --> 00:29:29,210
the arm mainline kernel version for

00:29:22,280 --> 00:29:32,590
non-free firmware blobs to work and this

00:29:29,210 --> 00:29:34,460
is the package definition from that and

00:29:32,590 --> 00:29:37,880
what that looks like

00:29:34,460 --> 00:29:40,730
I define I define my package me Linux on

00:29:37,880 --> 00:29:44,090
free as the particular version for out

00:29:40,730 --> 00:29:46,940
of leaven of the kernel but I don't have

00:29:44,090 --> 00:29:50,600
to do a lot I say inherit from Linux

00:29:46,940 --> 00:29:55,340
Libre which is the kernel that geeks

00:29:50,600 --> 00:29:57,020
built for the system so in the inherent

00:29:55,340 --> 00:29:59,570
word means I don't

00:29:57,020 --> 00:30:02,810
that package but that will change it and

00:29:59,570 --> 00:30:09,710
the way that's listed here so I'm given

00:30:02,810 --> 00:30:12,160
a different source and um we have all

00:30:09,710 --> 00:30:15,410
your package definitions in our arm

00:30:12,160 --> 00:30:27,350
declarative DSL you can do interesting

00:30:15,410 --> 00:30:31,780
things like that did you just do but

00:30:27,350 --> 00:30:42,500
that's not I guess straightforward um

00:30:31,780 --> 00:30:48,580
Lisp code so that's not if you like this

00:30:42,500 --> 00:30:51,800
idea but don't want to do this the the

00:30:48,580 --> 00:30:55,190
Nick mix package manager has some very

00:30:51,800 --> 00:31:00,050
similar to design goals but they have

00:30:55,190 --> 00:31:02,080
some weird other DSL type thing what was

00:31:00,050 --> 00:31:02,080
that

00:31:05,490 --> 00:31:14,360
yeah yeah I use NYX cool they they are a

00:31:12,240 --> 00:31:26,840
spin down League about not living

00:31:14,360 --> 00:31:26,840
non-tree software so well Wow

00:31:29,020 --> 00:31:31,710
sure

00:31:45,570 --> 00:31:50,150
yes it uses namespaces

00:31:53,440 --> 00:31:59,480
yeah yes yes it requires a minimal

00:31:57,380 --> 00:32:01,930
minimal kernel version to support the

00:31:59,480 --> 00:32:01,930
namespaces

00:32:21,220 --> 00:32:28,330
yeah well yeah well I mean two setups

00:32:26,380 --> 00:32:30,550
change route obviously you have to run

00:32:28,330 --> 00:32:33,700
that as route but that but then it

00:32:30,550 --> 00:32:37,660
dropped Rivlin is with docker you have

00:32:33,700 --> 00:32:45,130
the docker binary on the host and it's

00:32:37,660 --> 00:32:48,690
really trivial to yeah but with with

00:32:45,130 --> 00:32:48,690
docker is kind of easy to get route

00:33:09,100 --> 00:33:16,780
yeah I think yeah I think yes

00:33:29,850 --> 00:33:43,029
yes buddy buddy if you actually yeah

00:33:39,299 --> 00:33:46,600
yeah if you're actually running geeks

00:33:43,029 --> 00:33:48,899
I'm on the system yeah if you actually

00:33:46,600 --> 00:33:53,440
running geeks on the system you have

00:33:48,899 --> 00:33:55,630
more tools you can use theirs arm we can

00:33:53,440 --> 00:33:59,110
create ad hoc environments with with

00:33:55,630 --> 00:34:01,090
geeks geeks environments and hot package

00:33:59,110 --> 00:34:03,340
shorten install and there's a new

00:34:01,090 --> 00:34:05,799
feature in the arm development branches

00:34:03,340 --> 00:34:08,079
breaking a geek environment - that's

00:34:05,799 --> 00:34:11,409
container and do all your packages and

00:34:08,079 --> 00:34:18,849
it isolates the change route using our

00:34:11,409 --> 00:34:22,290
brains faces automatically but that's

00:34:18,849 --> 00:34:22,290
coming attraction

00:34:39,010 --> 00:34:47,750
yeah I don't know anyone well I know the

00:34:45,769 --> 00:34:50,000
people doing like high-performance

00:34:47,750 --> 00:34:51,980
computing in genetic research he isn't

00:34:50,000 --> 00:34:58,730
using geeks but on with their

00:34:51,980 --> 00:35:01,359
public-facing but I have a I converted

00:34:58,730 --> 00:35:05,980
my website to the geeks yes

00:35:01,359 --> 00:35:05,980
so that's production

00:35:18,120 --> 00:35:20,930
but armed

00:35:35,930 --> 00:35:43,520
yes yes all the packages are in good

00:35:41,210 --> 00:35:47,000
news store and that's the immutable

00:35:43,520 --> 00:35:49,270
thing and when you saw a package in your

00:35:47,000 --> 00:35:52,310
profile it creates a symlink

00:35:49,270 --> 00:35:55,900
from a profile to a global profile and

00:35:52,310 --> 00:36:01,130
from that profile into the kidney store

00:35:55,900 --> 00:36:04,940
and the global global profiles are

00:36:01,130 --> 00:36:09,440
essentially GC protected routes so your

00:36:04,940 --> 00:36:11,870
store won't get garbage collected which

00:36:09,440 --> 00:36:14,180
is another feature if there's no active

00:36:11,870 --> 00:36:16,640
profiles pointing to the packages in the

00:36:14,180 --> 00:36:20,620
in the store you can run geese garbage

00:36:16,640 --> 00:36:20,620
collect and it'll clean up your space

00:36:21,700 --> 00:36:24,700
yes

00:36:29,600 --> 00:36:35,990
yes yes yeah

00:36:40,930 --> 00:36:49,160
yeah yeah on the then you contain a part

00:36:45,860 --> 00:36:51,170
of the keikain environment that's what

00:36:49,160 --> 00:36:56,180
they're working on right now he just

00:36:51,170 --> 00:36:59,900
does user username spaces yeah but

00:36:56,180 --> 00:37:03,160
network names faces are are on the are

00:36:59,900 --> 00:37:03,160
on the to-do list

00:37:04,780 --> 00:37:15,250
yes oh wow cool

00:37:21,859 --> 00:37:30,420
the Emacs yes

00:37:27,650 --> 00:37:45,239
yeah there's there is actually a geese

00:37:30,420 --> 00:37:49,549
package mode for it for Emacs so yeah um

00:37:45,239 --> 00:37:49,549
can get a citation on this box oh

00:37:55,309 --> 00:38:06,799
nevermind I'll do this I was gonna show

00:38:02,279 --> 00:38:06,799
you show y'all if y'all were interested

00:38:16,350 --> 00:38:19,190
how are you

00:38:25,930 --> 00:38:36,720
machine definition looks of course this

00:38:29,320 --> 00:38:40,150
is old anyway

00:38:36,720 --> 00:38:45,580
this is an older laptop I had and this

00:38:40,150 --> 00:38:49,180
is its definition for instance I want

00:38:45,580 --> 00:38:51,730
the arm Association I want I want

00:38:49,180 --> 00:38:54,430
everywhere or I need these modules to

00:38:51,730 --> 00:38:57,040
build other other things I defined the

00:38:54,430 --> 00:39:02,920
operating system I give it a host name

00:38:57,040 --> 00:39:06,340
timezone locale I define tell means an

00:39:02,920 --> 00:39:11,710
EFI version of grub on def SDA these are

00:39:06,340 --> 00:39:17,500
my file systems my SWAT device and a few

00:39:11,710 --> 00:39:19,060
user accounts and these globally install

00:39:17,500 --> 00:39:22,570
packages the package that will get

00:39:19,060 --> 00:39:29,260
installed in at the system level which

00:39:22,570 --> 00:39:32,710
those are kind of important to have and

00:39:29,260 --> 00:39:40,180
then here here I'm gone loading genome

00:39:32,710 --> 00:39:44,290
xse and given the SSH server and I don't

00:39:40,180 --> 00:39:50,310
like the Desktop Services by default so

00:39:44,290 --> 00:39:53,920
I'm adding um here I'm adding my arm

00:39:50,310 --> 00:39:54,970
built bill farm to the substitutes so I

00:39:53,920 --> 00:39:59,730
don't have to pull everything from

00:39:54,970 --> 00:39:59,730
upstream and

00:40:07,220 --> 00:40:14,900
you demo the armed geeks I saw an

00:40:10,069 --> 00:40:17,300
installer yes you business hour um do

00:40:14,900 --> 00:40:18,530
you find your yes and we get your files

00:40:17,300 --> 00:40:22,790
when you get when you get your file

00:40:18,530 --> 00:40:28,790
system set up you get you say geek

00:40:22,790 --> 00:40:30,140
system configure um slash about where

00:40:28,790 --> 00:40:37,339
ever you have got your file system on it

00:40:30,140 --> 00:40:38,480
and give it this scheme phone yes yes we

00:40:37,339 --> 00:40:45,680
have to build new partitions ahead of

00:40:38,480 --> 00:40:49,430
town at the moment one thing it doesn't

00:40:45,680 --> 00:40:54,339
support yet it's LV um which is

00:40:49,430 --> 00:40:54,339
unfortunate it doesn't sort of um

00:41:09,480 --> 00:41:17,200
let's haven't figure how to do the

00:41:11,500 --> 00:41:19,330
transnational look bridge yet no if I

00:41:17,200 --> 00:41:21,880
build a system configuration on LEM and

00:41:19,330 --> 00:41:26,380
my next configuration has the fastest

00:41:21,880 --> 00:41:29,760
and called big file system and I roll

00:41:26,380 --> 00:41:44,020
back what does that file system do its

00:41:29,760 --> 00:41:45,640
you no longer exist but if I blew the

00:41:44,020 --> 00:41:47,410
whole configuration on scan of the LVM

00:41:45,640 --> 00:41:51,010
devices that file system will still show

00:41:47,410 --> 00:41:53,860
up on I'm a list where are you these

00:41:51,010 --> 00:41:55,090
partitions not about the partition the

00:41:53,860 --> 00:42:03,150
file system doesn't show up in the

00:41:55,090 --> 00:42:03,150
kernel yeah yeah

00:42:06,050 --> 00:42:19,620
but anyway I had time to solve that

00:42:11,940 --> 00:42:20,220
problem yet um oh good I got three

00:42:19,620 --> 00:42:23,750
minutes left

00:42:20,220 --> 00:42:23,750
any other questions

00:42:32,640 --> 00:42:34,670
a

00:42:35,180 --> 00:42:47,330
yeah the arm they started with Nix yeah

00:42:40,730 --> 00:42:54,310
and then lead oh yeah that guy yes it

00:42:47,330 --> 00:42:54,310
was actually it's been a while

00:43:02,240 --> 00:43:08,560
I thought either PhD thesis I thought

00:43:14,320 --> 00:43:17,320
yeah

00:43:22,690 --> 00:43:29,630
yeah yeah yeah yeah yeah he did

00:43:26,990 --> 00:43:34,759
but I thought geeks was his research

00:43:29,630 --> 00:43:37,250
project but I don't remember I thought I

00:43:34,759 --> 00:43:45,549
discovered it I guess about three years

00:43:37,250 --> 00:43:45,549
ago I think it's a really novel solution

00:43:47,869 --> 00:43:57,690
you hit version one back in me and

00:43:52,499 --> 00:44:07,759
version 1.1 a few weeks later it now has

00:43:57,690 --> 00:44:07,759
the actual text based and solar yes with

00:44:18,190 --> 00:44:33,690
although I think I was looking at a

00:44:22,090 --> 00:44:38,160
fossil Fossum videos yeah we're oh yes

00:44:33,690 --> 00:44:38,160
it is you know it is listed there now

00:44:43,960 --> 00:44:45,990
ah

00:44:53,250 --> 00:44:57,830
yeah app doesn't trust national either

00:45:08,850 --> 00:45:15,350
well that's really all I had especially

00:45:10,530 --> 00:45:15,350
since my laptop won't display things

00:45:17,720 --> 00:45:20,720
alrighty

00:45:21,740 --> 00:45:26,060
[Applause]

00:45:41,009 --> 00:45:44,400
hydrogen it's out now

00:57:33,430 --> 00:57:43,690
greetings users Active Directory no just

00:57:41,570 --> 00:57:43,690
kidding

00:57:44,470 --> 00:57:50,570
Eckerd directory no it's about a Red Hat

00:57:47,600 --> 00:58:01,430
identity management it's a very it's a

00:57:50,570 --> 00:58:21,550
very high level overview nope because

00:58:01,430 --> 00:58:21,550
it's Linux I plead the fifth

00:58:41,460 --> 00:58:44,460

YouTube URL: https://www.youtube.com/watch?v=uDZSHzTFofg


