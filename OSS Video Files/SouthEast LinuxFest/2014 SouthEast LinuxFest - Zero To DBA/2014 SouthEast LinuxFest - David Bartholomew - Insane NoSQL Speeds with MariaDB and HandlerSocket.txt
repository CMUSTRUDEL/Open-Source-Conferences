Title: 2014 SouthEast LinuxFest - David Bartholomew - Insane NoSQL Speeds with MariaDB and HandlerSocket
Publication date: 2015-05-17
Playlist: 2014 SouthEast LinuxFest - Zero To DBA
Description: 
	2014 SouthEast LinuxFest
David Bartholomew
Insane NoSQL Speeds with MariaDB and HandlerSocket
Captions: 
	00:00:00,000 --> 00:00:05,339
the following presentation was recorded

00:00:02,490 --> 00:00:08,189
the 2014 southeast linux fest in

00:00:05,339 --> 00:00:11,070
charlotte north carolina it is licensed

00:00:08,189 --> 00:00:14,880
under a creative commons license for

00:00:11,070 --> 00:00:18,180
more information visit www selfies linux

00:00:14,880 --> 00:00:19,710
pc org the southeast linux fest would

00:00:18,180 --> 00:00:22,740
like to thank the following diamond

00:00:19,710 --> 00:00:26,099
sponsors in 2014 for helping make these

00:00:22,740 --> 00:00:27,869
videos possible alright so let's go

00:00:26,099 --> 00:00:29,849
ahead and get started my name is Daniel

00:00:27,869 --> 00:00:33,360
Bartholomew me talk to you today about

00:00:29,849 --> 00:00:36,480
handler socket just before I begin I am

00:00:33,360 --> 00:00:40,440
NOT a big-time DBA so if you've got some

00:00:36,480 --> 00:00:45,960
crazy question I will probably not be

00:00:40,440 --> 00:00:47,460
able to answer that I do work on the

00:00:45,960 --> 00:00:49,530
Maria TV project my primary

00:00:47,460 --> 00:00:54,960
responsibility is to I'm the release

00:00:49,530 --> 00:00:58,890
manager for Maria DB so you know the

00:00:54,960 --> 00:01:00,770
signing key my name's in it and I create

00:00:58,890 --> 00:01:04,890
the repositories and things like that so

00:01:00,770 --> 00:01:09,780
I also wrote a couple of read EV books

00:01:04,890 --> 00:01:14,790
last year the the content of this talk

00:01:09,780 --> 00:01:17,159
comes from the marie DB cookbook where

00:01:14,790 --> 00:01:22,320
it has it has a chapter on how on how to

00:01:17,159 --> 00:01:24,930
use handler socket so at certain points

00:01:22,320 --> 00:01:26,780
I'm going to sit down just because I'm I

00:01:24,930 --> 00:01:30,119
kind of wanted this to be how to e

00:01:26,780 --> 00:01:32,159
interactive actually show you handler

00:01:30,119 --> 00:01:40,079
socket working in the real world well on

00:01:32,159 --> 00:01:44,250
my laptop so so yeah so with that let's

00:01:40,079 --> 00:01:48,119
begin first up I mean insanity that was

00:01:44,250 --> 00:01:49,680
kind of a you know link bait trying to

00:01:48,119 --> 00:01:51,840
get you here it's not it's not that

00:01:49,680 --> 00:01:58,880
insane it actually is quite a simple

00:01:51,840 --> 00:02:04,049
idea it comes from OOP this guy

00:01:58,880 --> 00:02:08,429
yoshinori mat-su Nobu and it's been

00:02:04,049 --> 00:02:10,960
around for a few years now and just to

00:02:08,429 --> 00:02:12,250
describe it in a nutshell you

00:02:10,960 --> 00:02:15,840
have a database right we're all familiar

00:02:12,250 --> 00:02:18,820
with those you have your data which is

00:02:15,840 --> 00:02:22,090
you know text it could be binary could

00:02:18,820 --> 00:02:24,520
be whatever and then then the data is

00:02:22,090 --> 00:02:26,500
stored in your database in some sort of

00:02:24,520 --> 00:02:28,060
format on the disk and then the

00:02:26,500 --> 00:02:31,750
mechanism by which we go in and out of

00:02:28,060 --> 00:02:35,430
the database is the SQL layer you know

00:02:31,750 --> 00:02:40,150
the layer that where you have the the

00:02:35,430 --> 00:02:41,800
optimizer all of that stuff and so you

00:02:40,150 --> 00:02:46,060
know data goes in data goes out it all

00:02:41,800 --> 00:02:47,530
goes through SQL statements so you know

00:02:46,060 --> 00:02:49,000
that allows you to all sorts of powerful

00:02:47,530 --> 00:02:53,140
things with your data you can do joins

00:02:49,000 --> 00:02:55,000
you can you can do very crazy queries

00:02:53,140 --> 00:02:56,800
that that fetch exactly the data that

00:02:55,000 --> 00:03:00,730
you want or correlated in a certain way

00:02:56,800 --> 00:03:03,160
that's useful to your business but one

00:03:00,730 --> 00:03:06,010
thing in the know askew L world that

00:03:03,160 --> 00:03:09,460
that is really popular is there are some

00:03:06,010 --> 00:03:10,690
kinds of data wouldn't it be nice if you

00:03:09,460 --> 00:03:13,660
could just skip all that what if you

00:03:10,690 --> 00:03:15,280
don't need all that what if you you what

00:03:13,660 --> 00:03:18,820
if you have kind of just a very simple

00:03:15,280 --> 00:03:20,380
flat schema you've got a lot of it and

00:03:18,820 --> 00:03:24,790
you know maybe it's maybe it's time

00:03:20,380 --> 00:03:29,950
series data from from some monitors in

00:03:24,790 --> 00:03:31,990
your business maybe it's just simple key

00:03:29,950 --> 00:03:33,610
value pairs from whatever and you just

00:03:31,990 --> 00:03:38,290
need a way to quickly get the data in

00:03:33,610 --> 00:03:40,560
and out fast in in those sorts of cases

00:03:38,290 --> 00:03:42,460
sometimes the SQL layer becomes a

00:03:40,560 --> 00:03:43,960
bottleneck so it wouldn't be nice if you

00:03:42,460 --> 00:03:47,050
could just skip that when you need to

00:03:43,960 --> 00:03:49,260
and so that is the basic idea behind

00:03:47,050 --> 00:03:51,510
handler socket it's an end run around

00:03:49,260 --> 00:03:54,660
getting data in and out of your database

00:03:51,510 --> 00:03:59,530
it comes with some pretty big caveat

00:03:54,660 --> 00:04:03,460
some pretty big gotchas but we'll get

00:03:59,530 --> 00:04:05,200
into that but it does give you it can

00:04:03,460 --> 00:04:07,270
potentially give you some very great

00:04:05,200 --> 00:04:12,400
performance if your workload matches

00:04:07,270 --> 00:04:14,940
what handler socket can do so in Moorea

00:04:12,400 --> 00:04:17,590
DB enabling handler socket is very easy

00:04:14,940 --> 00:04:20,169
it's just install s own a man there's

00:04:17,590 --> 00:04:22,620
locking you're done well almost done you

00:04:20,169 --> 00:04:25,290
also need to add those three lines to

00:04:22,620 --> 00:04:30,000
mysqld section in your configuration

00:04:25,290 --> 00:04:33,870
file and then restart re DB and it'll be

00:04:30,000 --> 00:04:36,210
enabled if you're not on Rhea DB you

00:04:33,870 --> 00:04:37,650
might have to you know go go get the

00:04:36,210 --> 00:04:38,850
source code for hannahs locket compile

00:04:37,650 --> 00:04:42,360
it and install it like you would a

00:04:38,850 --> 00:04:44,780
another third-party plugin but that's

00:04:42,360 --> 00:04:48,449
that's the basic that's the basic thing

00:04:44,780 --> 00:04:51,060
the you'll see in the in the mysqld

00:04:48,449 --> 00:04:52,190
section you know you handler socket

00:04:51,060 --> 00:04:54,510
could be running on a different server

00:04:52,190 --> 00:04:58,470
and then you all your also do also

00:04:54,510 --> 00:05:05,340
define the port the port you always have

00:04:58,470 --> 00:05:08,220
a read port and a right port and so once

00:05:05,340 --> 00:05:11,130
you have enabled handler socket how do

00:05:08,220 --> 00:05:12,600
you tell you know you you restart maria

00:05:11,130 --> 00:05:15,570
TB or mysql and it's like well is

00:05:12,600 --> 00:05:17,460
anything happening well the way to do

00:05:15,570 --> 00:05:21,330
that is show process list so if we just

00:05:17,460 --> 00:05:27,450
connect to the local server and then

00:05:21,330 --> 00:05:29,250
just do a show process list there you

00:05:27,450 --> 00:05:31,380
see all of the handlers lockets normally

00:05:29,250 --> 00:05:32,610
this server is this server is idle as I

00:05:31,380 --> 00:05:35,099
mean it's just running on my laptop so

00:05:32,610 --> 00:05:36,870
when you do a show process list the only

00:05:35,099 --> 00:05:40,410
one that you're really going to see most

00:05:36,870 --> 00:05:42,780
the time is just just the regular you

00:05:40,410 --> 00:05:44,430
know the the root process but when

00:05:42,780 --> 00:05:46,139
handlers locket is running you're going

00:05:44,430 --> 00:05:50,610
to see a whole bunch of these handler

00:05:46,139 --> 00:05:52,380
socket processes one thing you also

00:05:50,610 --> 00:05:55,380
might notice is there's a whole bunch of

00:05:52,380 --> 00:05:57,720
these rd processes and then there's one

00:05:55,380 --> 00:06:03,889
WR process those are the read processes

00:05:57,720 --> 00:06:07,260
and the right processes so if we go back

00:06:03,889 --> 00:06:08,760
the default is if you haven't configured

00:06:07,260 --> 00:06:12,330
it is there's going to be sixteen read

00:06:08,760 --> 00:06:15,630
threads and one right thread this is of

00:06:12,330 --> 00:06:17,280
course configurable through these two

00:06:15,630 --> 00:06:23,419
variables handlers locket threads and

00:06:17,280 --> 00:06:28,169
handler socket threads WR so the you can

00:06:23,419 --> 00:06:31,580
start there you can go as high as 3000

00:06:28,169 --> 00:06:31,580
but don't do that

00:06:32,580 --> 00:06:39,219
launching six thousand threads with for

00:06:37,119 --> 00:06:41,710
no reason is kind of dumb but um it's

00:06:39,219 --> 00:06:45,249
also recommended if you do want to add

00:06:41,710 --> 00:06:47,529
more threads usually you most workloads

00:06:45,249 --> 00:06:49,779
are you know read heavy so you want to

00:06:47,529 --> 00:06:53,080
add you could add read threads right

00:06:49,779 --> 00:06:56,430
threads you know you're you're very very

00:06:53,080 --> 00:07:00,490
going to need more than just a few so

00:06:56,430 --> 00:07:03,629
the default I you know for me I I never

00:07:00,490 --> 00:07:05,889
need to change it so so there you go so

00:07:03,629 --> 00:07:08,759
how do you communicate with handler

00:07:05,889 --> 00:07:13,180
socket well how many in here have ever

00:07:08,759 --> 00:07:16,930
sent an email using telnet talking

00:07:13,180 --> 00:07:20,319
directly to an SMTP server yes knew this

00:07:16,930 --> 00:07:22,479
was the right crowd for this demo okay

00:07:20,319 --> 00:07:26,830
so so I mean it's running on a port

00:07:22,479 --> 00:07:28,899
right and it's it's plain text there's

00:07:26,830 --> 00:07:30,430
very minimal security and handler socket

00:07:28,899 --> 00:07:32,259
so this is something that often you know

00:07:30,430 --> 00:07:37,020
you just it's a local server talking to

00:07:32,259 --> 00:07:39,339
the local running mysqld process and so

00:07:37,020 --> 00:07:42,639
so what what we can do is we can just

00:07:39,339 --> 00:07:45,180
tell that to the server and then then

00:07:42,639 --> 00:07:47,830
you start sending it you know messages

00:07:45,180 --> 00:07:50,740
as you do with with this sort of thing

00:07:47,830 --> 00:07:52,409
so this is this is what you would use to

00:07:50,740 --> 00:07:55,029
open up the connection to your database

00:07:52,409 --> 00:07:58,449
just to describe those you have you have

00:07:55,029 --> 00:08:00,809
the command P that that tells handler

00:07:58,449 --> 00:08:03,789
socket that you're trying to connect I

00:08:00,809 --> 00:08:06,219
don't know why p was used but it that's

00:08:03,789 --> 00:08:07,870
what it is then use then you specify a

00:08:06,219 --> 00:08:10,240
connection ID it can be any positive

00:08:07,870 --> 00:08:12,969
integer I just using zero here because

00:08:10,240 --> 00:08:15,339
that's where you start and then the

00:08:12,969 --> 00:08:16,659
database here my database is demo then

00:08:15,339 --> 00:08:18,849
the table that you want to connect to

00:08:16,659 --> 00:08:21,219
this is the doctors table then the key

00:08:18,849 --> 00:08:23,289
to search on for here we're just gonna

00:08:21,219 --> 00:08:25,149
use the primary key so we just use the

00:08:23,289 --> 00:08:27,580
keyword primary and then you list the

00:08:25,149 --> 00:08:30,309
columns in a comma-separated format so

00:08:27,580 --> 00:08:34,209
for this simple table it's you know ID

00:08:30,309 --> 00:08:36,490
given name and surname

00:08:34,209 --> 00:08:38,949
and and then then once you've done that

00:08:36,490 --> 00:08:44,709
you're you're take your connection is

00:08:38,949 --> 00:08:46,509
open reading data is another thing so

00:08:44,709 --> 00:08:48,730
with reading data instead of instead of

00:08:46,509 --> 00:08:51,730
starting your command with a letter you

00:08:48,730 --> 00:08:54,999
start it with the connection ID then you

00:08:51,730 --> 00:08:57,009
put in a comparison operator you put in

00:08:54,999 --> 00:09:00,339
the the number of keys to search on we

00:08:57,009 --> 00:09:03,040
only specified when we created our

00:09:00,339 --> 00:09:04,869
connection ID our connection 0 we only

00:09:03,040 --> 00:09:07,689
specified one key so the number would be

00:09:04,869 --> 00:09:08,829
one then we're specifying the value to

00:09:07,689 --> 00:09:11,759
search for say you want to search for

00:09:08,829 --> 00:09:15,550
the first record in the database with

00:09:11,759 --> 00:09:18,279
key ID 1 and then the you know maybe the

00:09:15,550 --> 00:09:21,179
maximum records to to get and so this

00:09:18,279 --> 00:09:23,439
this is a query that searches for every

00:09:21,179 --> 00:09:26,290
record in the database where the key is

00:09:23,439 --> 00:09:28,569
greater than 1 the comparison operators

00:09:26,290 --> 00:09:29,860
you can use would be the you know you

00:09:28,569 --> 00:09:31,269
can do with qualities you can do greater

00:09:29,860 --> 00:09:42,549
than less than greater than equal and

00:09:31,269 --> 00:09:46,839
less than equal so let's demo that so if

00:09:42,549 --> 00:09:51,910
we have our system here now everything

00:09:46,839 --> 00:09:58,209
has to be separated with tabs and if you

00:09:51,910 --> 00:10:02,189
don't do tabs it will just say huh so

00:09:58,209 --> 00:10:07,389
here whoops first thing you tell that

00:10:02,189 --> 00:10:11,860
OOP so that's why I'm pasting because

00:10:07,389 --> 00:10:14,499
it's very fickle so we tell that in and

00:10:11,860 --> 00:10:19,139
then it just says that we're there now

00:10:14,499 --> 00:10:23,170
we'll connect to our doctors table and

00:10:19,139 --> 00:10:25,410
then okay so so what is saying here 0 it

00:10:23,170 --> 00:10:30,100
comes back and says okay your success

00:10:25,410 --> 00:10:32,740
and we are connected so that's all that

00:10:30,100 --> 00:10:34,779
return value is telling us and then

00:10:32,740 --> 00:10:37,749
let's say let's let's let's do a quality

00:10:34,779 --> 00:10:42,040
search where we try to get we're connect

00:10:37,749 --> 00:10:45,220
connection 0 have it equal to ID 1 and

00:10:42,040 --> 00:10:46,829
return 1 record and so there we go there

00:10:45,220 --> 00:10:59,889
is the first doctor

00:10:46,829 --> 00:11:05,470
and so mmm yeah yeah it has to be tabs

00:10:59,889 --> 00:11:09,699
no spaces it's tabs that's one of those

00:11:05,470 --> 00:11:16,810
limitations i was talking about this is

00:11:09,699 --> 00:11:18,730
very simple yeah so so here here's

00:11:16,810 --> 00:11:21,939
here's one where we where we try to

00:11:18,730 --> 00:11:25,930
where we go for all the records in the

00:11:21,939 --> 00:11:29,350
in the database in the table greater

00:11:25,930 --> 00:11:30,879
than or equal to 1 and so then and

00:11:29,350 --> 00:11:34,589
you'll notice it just spits them out

00:11:30,879 --> 00:11:37,509
just one long string tab delimited and

00:11:34,589 --> 00:11:41,949
so so there there's all the people in

00:11:37,509 --> 00:11:44,350
our database and so when whenever

00:11:41,949 --> 00:11:45,759
whatever is consuming this data they you

00:11:44,350 --> 00:11:53,040
know you just you just read the tabs as

00:11:45,759 --> 00:11:53,040
they come come across so let's see

00:11:55,970 --> 00:12:14,149
I do not never try it might just be two

00:12:02,629 --> 00:12:19,250
tabs yeah let's see anything else is

00:12:14,149 --> 00:12:21,199
interesting not really until we get to

00:12:19,250 --> 00:12:22,910
the writing this this is just a query

00:12:21,199 --> 00:12:25,129
that that takes from greater than

00:12:22,910 --> 00:12:27,079
greater than the first ID do a maximum

00:12:25,129 --> 00:12:32,300
of two records and so it just spits out

00:12:27,079 --> 00:12:34,819
too so writing you you can read you can

00:12:32,300 --> 00:12:37,579
read and write on the right port you can

00:12:34,819 --> 00:12:41,329
only read on the report naturally so to

00:12:37,579 --> 00:12:44,540
connect to to write to open up a right

00:12:41,329 --> 00:12:49,149
port we connect to the to the port that

00:12:44,540 --> 00:12:49,149
we specified and then for inserting data

00:12:49,689 --> 00:12:56,480
you have the connection ID an insert

00:12:53,480 --> 00:13:00,050
operator which is a plus the number of

00:12:56,480 --> 00:13:02,600
columns that you specified then than

00:13:00,050 --> 00:13:03,800
just the fields however many fields you

00:13:02,600 --> 00:13:06,559
specified when you opened your

00:13:03,800 --> 00:13:09,589
connection you just you just list you

00:13:06,559 --> 00:13:11,930
just put those in one after another it's

00:13:09,589 --> 00:13:16,759
not going to it's not going to check if

00:13:11,930 --> 00:13:18,470
you have a primary key crash you have

00:13:16,759 --> 00:13:19,790
duplicate primary keys it's not going

00:13:18,470 --> 00:13:23,149
you know you you're going to have to

00:13:19,790 --> 00:13:25,040
handle that on your own because it'll

00:13:23,149 --> 00:13:27,019
just ill just fail and it'll just come

00:13:25,040 --> 00:13:28,790
back and instead of returning one is the

00:13:27,019 --> 00:13:32,800
first field in the return it'll it'll

00:13:28,790 --> 00:13:32,800
return a one saying that it failed

00:13:38,080 --> 00:13:45,520
yes it is I just know that it's required

00:13:42,940 --> 00:13:47,080
you have to put it in just the way the

00:13:45,520 --> 00:13:49,810
handler socket works you have to put it

00:13:47,080 --> 00:13:52,420
in it might be just so that it knows how

00:13:49,810 --> 00:13:54,190
many fields are coming after you know

00:13:52,420 --> 00:13:55,990
how what's so that so that handlers

00:13:54,190 --> 00:14:07,590
locket knows what's coming is basically

00:13:55,990 --> 00:14:10,720
the idea why you put a 3 in there yeah

00:14:07,590 --> 00:14:12,310
yeah so what you would put you would

00:14:10,720 --> 00:14:14,560
probably do if you've got if you got

00:14:12,310 --> 00:14:17,470
something that auto increments and auto

00:14:14,560 --> 00:14:18,910
fills then you when you open the

00:14:17,470 --> 00:14:21,700
connection you would just specify the

00:14:18,910 --> 00:14:25,240
columns that don't that don't worry

00:14:21,700 --> 00:14:28,270
about you know yeah so so it's it's it's

00:14:25,240 --> 00:14:30,700
like when you do an SQL query and you're

00:14:28,270 --> 00:14:32,560
inserting and you just skip the primary

00:14:30,700 --> 00:14:36,190
key field because it's going to be

00:14:32,560 --> 00:14:37,930
filled when you insert the rest of it so

00:14:36,190 --> 00:14:39,940
you just yet when you when you set up

00:14:37,930 --> 00:14:46,630
your when you define your connection you

00:14:39,940 --> 00:14:52,330
would do that so okay so updating

00:14:46,630 --> 00:14:54,760
deleting data it's it's another thing so

00:14:52,330 --> 00:14:56,560
they have some you know their own brand

00:14:54,760 --> 00:14:59,020
of insanity for that so you had the

00:14:56,560 --> 00:15:00,910
canoe have the connection ID and the

00:14:59,020 --> 00:15:03,310
then the comparison operator you know

00:15:00,910 --> 00:15:04,900
you want the field to equal what the

00:15:03,310 --> 00:15:08,110
number of columns that you're actually

00:15:04,900 --> 00:15:10,300
going to be touching when you update the

00:15:08,110 --> 00:15:11,890
the key that you're searching for so in

00:15:10,300 --> 00:15:16,570
this case we're we're searching for the

00:15:11,890 --> 00:15:19,510
id3 and then they they want a limit you

00:15:16,570 --> 00:15:23,320
limit the number of rows that it will

00:15:19,510 --> 00:15:25,950
update before before stopping even if

00:15:23,320 --> 00:15:28,900
there's more in the database that match

00:15:25,950 --> 00:15:30,490
the search offset so you can you can

00:15:28,900 --> 00:15:32,470
skip ahead if you've got if you're

00:15:30,490 --> 00:15:34,900
searching on an ID field and you want to

00:15:32,470 --> 00:15:36,760
skip to the three million mark before

00:15:34,900 --> 00:15:39,940
you start searching you can set that in

00:15:36,760 --> 00:15:42,400
and then you do you do a you if you want

00:15:39,940 --> 00:15:44,050
to update a record you do a d if you

00:15:42,400 --> 00:15:45,920
want to delete if you're updating a

00:15:44,050 --> 00:15:48,709
record and

00:15:45,920 --> 00:15:52,130
and then after the you you would put in

00:15:48,709 --> 00:15:57,050
the updated values tab-delimited so so

00:15:52,130 --> 00:15:59,180
if you so if you notice right here I

00:15:57,050 --> 00:16:03,410
don't know if any of you guys do doctor

00:15:59,180 --> 00:16:07,820
who this guy is an actor who played him

00:16:03,410 --> 00:16:11,180
back in the 70s and his name is jo n so

00:16:07,820 --> 00:16:12,860
let's update his record okay so the

00:16:11,180 --> 00:16:16,630
first thing we need to do is we need to

00:16:12,860 --> 00:16:19,699
break out of our telnet session and

00:16:16,630 --> 00:16:25,399
reconnect to the right port so we

00:16:19,699 --> 00:16:29,680
reconnect to the right board and then we

00:16:25,399 --> 00:16:32,620
open up a connection to our table again

00:16:29,680 --> 00:16:36,050
this time we're going to call it

00:16:32,620 --> 00:16:40,399
connection one just to because we have

00:16:36,050 --> 00:16:42,079
to call it something and then here we'll

00:16:40,399 --> 00:16:47,060
go ahead and insert the rest of the

00:16:42,079 --> 00:16:49,610
actors who have played him on TV and so

00:16:47,060 --> 00:16:51,890
you'll see right there that's one of the

00:16:49,610 --> 00:16:53,240
nice features about handler socket if if

00:16:51,890 --> 00:16:56,269
there's a lot of data coming in and it

00:16:53,240 --> 00:16:59,930
can batch batch them it will so you'll

00:16:56,269 --> 00:17:05,179
notice that when we when we insert of

00:16:59,930 --> 00:17:07,970
them all it it didn't it didn't give us

00:17:05,179 --> 00:17:09,980
a response after each one it batched

00:17:07,970 --> 00:17:14,630
them and then gave us the response codes

00:17:09,980 --> 00:17:18,549
and so it's like its success insert one

00:17:14,630 --> 00:17:18,549
record success so

00:17:22,269 --> 00:17:29,720
it's right here this is handler socket

00:17:25,970 --> 00:17:32,059
it it just it just does it you know it's

00:17:29,720 --> 00:17:33,679
it's the pretty output is not something

00:17:32,059 --> 00:17:36,860
you're going to see it's it's this isn't

00:17:33,679 --> 00:17:39,799
meant really for human consumption you

00:17:36,860 --> 00:17:42,799
know it's like talking to an SMTP server

00:17:39,799 --> 00:17:46,480
it looks strange the output does it's

00:17:42,799 --> 00:17:54,500
for a machine to parse and all that so

00:17:46,480 --> 00:17:59,059
we have done that okay here's my update

00:17:54,500 --> 00:18:01,009
statement so I open up a we we do that

00:17:59,059 --> 00:18:03,529
we're just interested in doing the given

00:18:01,009 --> 00:18:05,720
in updating his given name so when I

00:18:03,529 --> 00:18:08,629
define the connection that's the only

00:18:05,720 --> 00:18:15,889
that's the only column that I specify

00:18:08,629 --> 00:18:18,470
and then when i go to update there we go

00:18:15,889 --> 00:18:23,929
we put in the update his his ID record

00:18:18,470 --> 00:18:33,470
his number three and so that did not

00:18:23,929 --> 00:18:37,149
work I don't know why no doctor it could

00:18:33,470 --> 00:18:41,690
be that there's a missing tab because it

00:18:37,149 --> 00:18:45,529
is very picky but that's the general

00:18:41,690 --> 00:18:48,470
idea you um yeah yeah so that's an error

00:18:45,529 --> 00:18:51,399
right there I don't know why oh well I'm

00:18:48,470 --> 00:18:55,580
not going to worry about it right now

00:18:51,399 --> 00:18:57,889
and we can see if we if we do a search

00:18:55,580 --> 00:19:03,529
on it it's still spelled John so sorry

00:18:57,889 --> 00:19:08,960
about that it worked this morning okay

00:19:03,529 --> 00:19:15,169
so deleting ooh let's open up another

00:19:08,960 --> 00:19:19,940
connection just because we can insert

00:19:15,169 --> 00:19:23,299
some more people if we do a search

00:19:19,940 --> 00:19:29,889
whoops I keep forgetting I can't there's

00:19:23,299 --> 00:19:29,889
no scroll buffer so there we go

00:19:33,490 --> 00:19:37,720
oops alright

00:19:40,280 --> 00:19:46,220
so here to delete these people that we

00:19:42,890 --> 00:19:50,210
just inserted it's one of those things

00:19:46,220 --> 00:19:51,800
where once once you hit the D it doesn't

00:19:50,210 --> 00:19:56,360
care about the columns because all it

00:19:51,800 --> 00:19:58,580
knows that every every record above ID

00:19:56,360 --> 00:19:59,930
100 it's just going to delete it's going

00:19:58,580 --> 00:20:05,660
to lead to delete a maximum of 10 but

00:19:59,930 --> 00:20:07,280
there's only four there so it's just

00:20:05,660 --> 00:20:09,050
going to delete them and it and it comes

00:20:07,280 --> 00:20:17,930
back and it says that it deleted for

00:20:09,050 --> 00:20:21,560
records and so if we do a search on them

00:20:17,930 --> 00:20:31,400
we can see that they're not there so it

00:20:21,560 --> 00:20:37,130
it did take them off mm-hmm as far as i

00:20:31,400 --> 00:20:48,170
know i've never tried it but as far as i

00:20:37,130 --> 00:20:52,070
know okay so they might not fire all

00:20:48,170 --> 00:20:55,090
right let's see okay we've done that

00:20:52,070 --> 00:20:58,460
okay so so that's that's kind of

00:20:55,090 --> 00:21:01,700
interacting through telnet which is

00:20:58,460 --> 00:21:03,980
pretty raw and so most people are going

00:21:01,700 --> 00:21:07,900
to do that I mean you might write your

00:21:03,980 --> 00:21:10,790
own client to talk directly to the port

00:21:07,900 --> 00:21:12,470
but people have already done that so you

00:21:10,790 --> 00:21:18,170
don't necessarily have to write your own

00:21:12,470 --> 00:21:20,960
client but there is a layer that that

00:21:18,170 --> 00:21:25,190
you'd put in between handler socket and

00:21:20,960 --> 00:21:29,300
likes a pearl or Python and so that's

00:21:25,190 --> 00:21:31,820
that's called the live HS client and

00:21:29,300 --> 00:21:37,730
installing that is really easy on a bunt

00:21:31,820 --> 00:21:39,290
0 and Debian it's not as easy on Fedora

00:21:37,730 --> 00:21:42,650
CentOS and rawr hell that's about as

00:21:39,290 --> 00:21:44,110
compact as I could make it I mean it's

00:21:42,650 --> 00:21:47,000
it you're basically you're downloading

00:21:44,110 --> 00:21:48,860
your you're compiling it you and then

00:21:47,000 --> 00:21:52,190
you're installing the files where they

00:21:48,860 --> 00:21:53,690
need to go the reason the reason I'm

00:21:52,190 --> 00:21:55,960
doing it this way where where

00:21:53,690 --> 00:21:59,330
you're installing just specific files

00:21:55,960 --> 00:22:03,320
like like the the HP PS and that da days

00:21:59,330 --> 00:22:06,940
is because when you download the source

00:22:03,320 --> 00:22:10,309
which is right there along the bottom

00:22:06,940 --> 00:22:17,330
that's all of it that's the plug in the

00:22:10,309 --> 00:22:19,820
HS client library and the pearl the

00:22:17,330 --> 00:22:24,470
pearl of whatever you call plugin plugin

00:22:19,820 --> 00:22:26,509
for pearl so see ban module I think

00:22:24,470 --> 00:22:28,549
there is a cpn module but when you

00:22:26,509 --> 00:22:31,009
download the handler socket source from

00:22:28,549 --> 00:22:32,659
github it comes with everything that you

00:22:31,009 --> 00:22:35,690
would need and so I wasn't interested in

00:22:32,659 --> 00:22:38,210
that because i have i have the mice the

00:22:35,690 --> 00:22:43,730
mysql plugin in maria DB already

00:22:38,210 --> 00:22:46,100
installed and so all i need is the the

00:22:43,730 --> 00:22:48,350
HS client library and so just compile

00:22:46,100 --> 00:22:50,149
and install that by itself so these

00:22:48,350 --> 00:22:54,100
slides will be available so you don't

00:22:50,149 --> 00:23:03,799
have to worry about right and Saul down

00:22:54,100 --> 00:23:09,559
this is using a for example it's talking

00:23:03,799 --> 00:23:12,500
directly to nodb mmhmm yeah yeah I'm one

00:23:09,559 --> 00:23:14,240
of one of handler sockets limitations

00:23:12,500 --> 00:23:17,539
though is that it only talks to specific

00:23:14,240 --> 00:23:20,529
storage engines nodb extra dbr that are

00:23:17,539 --> 00:23:23,919
the main ones it also talks with spider

00:23:20,529 --> 00:23:27,620
I'm not sure about other storage engines

00:23:23,919 --> 00:23:29,299
if it can talk to them or not and so so

00:23:27,620 --> 00:23:31,370
you are limited in what storage engines

00:23:29,299 --> 00:23:38,139
you can use but you know DB is the one

00:23:31,370 --> 00:23:43,419
that most people use so yeah okay so

00:23:38,139 --> 00:23:47,320
that's installing it so so python

00:23:43,419 --> 00:23:50,360
installing installing it on Python um

00:23:47,320 --> 00:23:52,340
there there I think there is a module

00:23:50,360 --> 00:23:54,110
that works but when I was setting this

00:23:52,340 --> 00:23:58,279
up there was an issue with you know one

00:23:54,110 --> 00:24:00,350
of the easy install ones that I ran into

00:23:58,279 --> 00:24:02,179
issues so this is the work around that I

00:24:00,350 --> 00:24:03,919
did was to compile it from source and

00:24:02,179 --> 00:24:05,260
install it that way and even then I had

00:24:03,919 --> 00:24:11,220
to edit this

00:24:05,260 --> 00:24:13,960
epi wise so it would actually install so

00:24:11,220 --> 00:24:18,850
so that's what I had to do and but it

00:24:13,960 --> 00:24:20,890
was pretty easy the docs are there and

00:24:18,850 --> 00:24:22,510
there's others there's multiples for

00:24:20,890 --> 00:24:24,220
each language it seems people people

00:24:22,510 --> 00:24:27,070
write their own and some of them have

00:24:24,220 --> 00:24:30,310
friendly or interfaces than others but

00:24:27,070 --> 00:24:32,470
you know they're out there for just

00:24:30,310 --> 00:24:35,170
about well for most of the popular

00:24:32,470 --> 00:24:36,940
languages they're not out for every

00:24:35,170 --> 00:24:39,250
language I'm sure but most of the

00:24:36,940 --> 00:24:41,140
popular languages will have a have

00:24:39,250 --> 00:24:45,580
something that will talk to handler

00:24:41,140 --> 00:24:47,350
socket so the installing it's pretty

00:24:45,580 --> 00:24:50,460
simple I mean it's not as simple as

00:24:47,350 --> 00:24:58,620
other modules but but fairly simple so

00:24:50,460 --> 00:24:58,620
if we quit out of this there we go and

00:24:59,850 --> 00:25:09,970
we're going to go ahead and fire up the

00:25:05,380 --> 00:25:16,060
interactive Python because that's funner

00:25:09,970 --> 00:25:20,410
okay so so the there's actually this

00:25:16,060 --> 00:25:23,080
this particular python library it has

00:25:20,410 --> 00:25:25,360
two two ways of interacting there's

00:25:23,080 --> 00:25:32,680
there's a sockets one and then there's a

00:25:25,360 --> 00:25:34,960
manager so if you import the manager see

00:25:32,680 --> 00:25:37,270
you signed a manager and set up our

00:25:34,960 --> 00:25:40,150
things you'll notice that it's it's

00:25:37,270 --> 00:25:43,060
fairly close to the to the way that you

00:25:40,150 --> 00:25:44,350
would do it Intel net I mean you know

00:25:43,060 --> 00:25:46,870
you're setting up your setting up a

00:25:44,350 --> 00:25:48,340
connection to the to the doctors table

00:25:46,870 --> 00:25:50,230
you're setting up the what the columns

00:25:48,340 --> 00:25:57,610
are you going to use things like that so

00:25:50,230 --> 00:26:02,580
oh there's something I forgot if I am

00:25:57,610 --> 00:26:02,580
going to do this I need to reset my data

00:26:09,350 --> 00:26:14,320
and I don't know why that's freezing

00:26:11,690 --> 00:26:14,320
like that

00:26:18,850 --> 00:26:24,220
yeah there we go on let's see

00:26:26,830 --> 00:26:34,029
there we go okay I'll just paste in

00:26:31,190 --> 00:26:34,029
those others again

00:26:37,529 --> 00:26:45,820
so that the HS get method basically were

00:26:43,740 --> 00:26:47,440
connecting to the demo table you mean

00:26:45,820 --> 00:26:48,730
you don't have to the managers nice

00:26:47,440 --> 00:26:51,429
because you don't have to set up your

00:26:48,730 --> 00:26:54,250
connection ahead of time with with the

00:26:51,429 --> 00:26:56,620
sockets version you have you you set up

00:26:54,250 --> 00:26:58,120
a connection and then you identify that

00:26:56,620 --> 00:27:00,340
connection whenever you're connecting to

00:26:58,120 --> 00:27:02,139
it the manager you just tell it the

00:27:00,340 --> 00:27:06,639
relevant information and it just goes

00:27:02,139 --> 00:27:12,580
and does it and so it's it's done it and

00:27:06,639 --> 00:27:16,690
so we just have to print it out and we

00:27:12,580 --> 00:27:18,760
get it so that that that data equals HS

00:27:16,690 --> 00:27:23,980
get blow of law that was I'm looking for

00:27:18,760 --> 00:27:26,769
ID number five which is Peter Davison so

00:27:23,980 --> 00:27:30,610
the other way like I was saying is is

00:27:26,769 --> 00:27:32,080
this oh I was going to demo inserting so

00:27:30,610 --> 00:27:34,389
the same same thing with like with like

00:27:32,080 --> 00:27:35,710
an insert the manager is nice because

00:27:34,389 --> 00:27:39,250
you don't have to set up you don't have

00:27:35,710 --> 00:27:40,389
to set up that you're connecting you set

00:27:39,250 --> 00:27:42,279
up your connection ahead of time it'll

00:27:40,389 --> 00:27:45,250
just set it it'll just do it for you and

00:27:42,279 --> 00:27:47,289
boom it's it it's set up the handler

00:27:45,250 --> 00:27:51,580
socket talk to the talk to the database

00:27:47,289 --> 00:27:55,840
insert the data and you're done so the

00:27:51,580 --> 00:28:02,380
sockets the socket version is a little

00:27:55,840 --> 00:28:06,370
bit more raw I guess so with this one

00:28:02,380 --> 00:28:08,889
you do have to set up a set up the

00:28:06,370 --> 00:28:15,070
socket connection and then you do have

00:28:08,889 --> 00:28:16,630
to set up connecting to the connecting

00:28:15,070 --> 00:28:19,570
to the database and define that

00:28:16,630 --> 00:28:24,519
connection and so you set that up you

00:28:19,570 --> 00:28:28,720
assign everything and then you know you

00:28:24,519 --> 00:28:35,130
can run run queries and and it'll it'll

00:28:28,720 --> 00:28:38,350
return them and yeah so I mean it's it's

00:28:35,130 --> 00:28:41,650
it's easier than doing telnet but it's

00:28:38,350 --> 00:28:43,750
pretty gets closer to raw telnet then

00:28:41,650 --> 00:28:55,870
then maybe what you're used to with a

00:28:43,750 --> 00:28:57,310
with a full client let's see then for so

00:28:55,870 --> 00:28:59,800
same thing with writing when you're

00:28:57,310 --> 00:29:02,890
setting that up you set up the right

00:28:59,800 --> 00:29:06,670
socket you specify the connection

00:29:02,890 --> 00:29:16,960
specify the table the data and then you

00:29:06,670 --> 00:29:21,250
can insert and then if we do a search we

00:29:16,960 --> 00:29:23,470
can see that it was inserted same thing

00:29:21,250 --> 00:29:26,740
with with updating the table this one

00:29:23,470 --> 00:29:34,570
should work this time because it won't

00:29:26,740 --> 00:29:36,720
have any typos in it or maybe not hey it

00:29:34,570 --> 00:29:40,660
did so there you see that it that it

00:29:36,720 --> 00:29:46,960
updated the updated the updated the

00:29:40,660 --> 00:29:53,890
field that we wanted it to update so so

00:29:46,960 --> 00:29:58,390
and then same thing with the leading set

00:29:53,890 --> 00:30:03,040
up the connection okay there's our data

00:29:58,390 --> 00:30:07,720
before then we go to insert some junk

00:30:03,040 --> 00:30:14,140
entries then locate those then show that

00:30:07,720 --> 00:30:16,840
they're there and then delete them so

00:30:14,140 --> 00:30:18,490
then we've deleted them it's it's it the

00:30:16,840 --> 00:30:20,860
day the entries are there when we did

00:30:18,490 --> 00:30:23,290
that search then we said hey delete

00:30:20,860 --> 00:30:25,180
everything above 100 it deletes them it

00:30:23,290 --> 00:30:31,240
comes back and says hey you deleted 3

00:30:25,180 --> 00:30:35,470
and then we can do another search and it

00:30:31,240 --> 00:30:38,020
shows that that they are gone so I mean

00:30:35,470 --> 00:30:39,640
it's fairly simple um you know once you

00:30:38,020 --> 00:30:43,420
have a set up that you know you're

00:30:39,640 --> 00:30:47,820
shuffling data in and out and it's

00:30:43,420 --> 00:30:50,080
simple it's it's just it's you just

00:30:47,820 --> 00:30:51,760
figure out exactly how to do it and then

00:30:50,080 --> 00:30:54,380
your program takes care of it from there

00:30:51,760 --> 00:30:56,430
so pretty simple

00:30:54,380 --> 00:30:58,260
it's the same it's the same sort of

00:30:56,430 --> 00:30:59,850
thing with Ruby although Ruby does not

00:30:58,260 --> 00:31:03,330
have a manager type interface that I

00:30:59,850 --> 00:31:05,010
know about maybe there's one now it's

00:31:03,330 --> 00:31:07,650
been a while since i since i looked at

00:31:05,010 --> 00:31:10,170
ruby but installing it's really easy I

00:31:07,650 --> 00:31:12,090
mean it's just gem install handler

00:31:10,170 --> 00:31:14,400
socket it's basically all you have to do

00:31:12,090 --> 00:31:17,610
and it'll install the handler socket one

00:31:14,400 --> 00:31:19,800
there's another one called hsh H socket

00:31:17,610 --> 00:31:21,000
or something like that I think but the

00:31:19,800 --> 00:31:25,050
handlers locket one seems to work well

00:31:21,000 --> 00:31:28,910
so that's what I used and then it's it's

00:31:25,050 --> 00:31:28,910
more it's kind of more of the same

00:31:35,130 --> 00:31:44,760
reset my data you know loading the

00:31:39,330 --> 00:31:46,800
interactive Ruby interpreter but it's

00:31:44,760 --> 00:31:49,170
more the same thing I mean I mean you're

00:31:46,800 --> 00:31:52,020
it's using Ruby syntax instead of Python

00:31:49,170 --> 00:31:54,480
syntax but in the end it's it's very

00:31:52,020 --> 00:31:56,000
similar I mean you're you're setting up

00:31:54,480 --> 00:32:02,100
your open your setting up a connection

00:31:56,000 --> 00:32:04,770
you're opening it you you do so you can

00:32:02,100 --> 00:32:06,420
do searches this is this one's

00:32:04,770 --> 00:32:08,250
connecting to them to the read-only port

00:32:06,420 --> 00:32:10,560
here's a connection to the right port

00:32:08,250 --> 00:32:12,000
and it's the same thing it's just it's

00:32:10,560 --> 00:32:14,070
just you know like the method name is

00:32:12,000 --> 00:32:17,160
different your execute you know you use

00:32:14,070 --> 00:32:23,370
use the methods that that this Ruby

00:32:17,160 --> 00:32:28,080
library provides and and it it just you

00:32:23,370 --> 00:32:32,430
know you do it you execute it all of all

00:32:28,080 --> 00:32:38,820
the lots more the same same thing for

00:32:32,430 --> 00:32:41,310
for like inserting and then deleting the

00:32:38,820 --> 00:32:43,440
the syntax is actually quite close to

00:32:41,310 --> 00:32:46,740
what the raw syntax would be it just it

00:32:43,440 --> 00:32:55,680
just does it in a ruby ish way instead

00:32:46,740 --> 00:33:02,390
of just raw raw text and then so kind of

00:32:55,680 --> 00:33:05,850
skip over that demo for Pearl you know

00:33:02,390 --> 00:33:08,220
like do Sipan here i already had the

00:33:05,850 --> 00:33:09,810
handler socket source code so i just

00:33:08,220 --> 00:33:11,040
installed it from the handler socket

00:33:09,810 --> 00:33:13,440
source code i went into the handler

00:33:11,040 --> 00:33:16,710
socket source directory into the pearl

00:33:13,440 --> 00:33:20,250
net handler socket directory and then

00:33:16,710 --> 00:33:23,940
just whoops and then just made it and

00:33:20,250 --> 00:33:26,700
and it very simple to do Sipan would

00:33:23,940 --> 00:33:34,470
probably be even easier but there's the

00:33:26,700 --> 00:33:38,310
there's the website for it and of course

00:33:34,470 --> 00:33:41,240
being pearl you know it has its own own

00:33:38,310 --> 00:33:41,240
loveliness

00:33:41,600 --> 00:33:48,570
because you know it's parole so but

00:33:46,470 --> 00:33:51,660
again it's the same sort of thing

00:33:48,570 --> 00:33:53,700
applies I mean you you you load it you

00:33:51,660 --> 00:33:57,120
load the handler socket library then you

00:33:53,700 --> 00:33:59,520
specify your connection you specify your

00:33:57,120 --> 00:34:07,620
connection to your database and then

00:33:59,520 --> 00:34:09,090
here you are what I did what I did here

00:34:07,620 --> 00:34:10,830
since I was writing a full script this

00:34:09,090 --> 00:34:14,760
time instead of instead of just doing it

00:34:10,830 --> 00:34:16,230
interactively is I I just did a while

00:34:14,760 --> 00:34:18,360
loop that loops through and prints them

00:34:16,230 --> 00:34:29,550
out so this one actually has has

00:34:18,360 --> 00:34:31,619
prettier output so if we let's see so if

00:34:29,550 --> 00:34:33,960
we do a read it reads the mountain and

00:34:31,619 --> 00:34:37,710
prints them out which is kind of cool

00:34:33,960 --> 00:34:40,080
and same thing for the for the insert

00:34:37,710 --> 00:34:45,869
test you know you set up you set up your

00:34:40,080 --> 00:34:48,990
connection you tell it to execute an

00:34:45,869 --> 00:34:51,899
insert using the same sorts of things

00:34:48,990 --> 00:34:54,450
that that all of the clients seem to

00:34:51,899 --> 00:34:57,109
seem to do their all and in in their

00:34:54,450 --> 00:35:00,660
core there they're pretty similar so

00:34:57,109 --> 00:35:03,240
same thing with updates open the

00:35:00,660 --> 00:35:08,060
connection tell it what to tell it what

00:35:03,240 --> 00:35:13,830
to do and so on and delete as well so

00:35:08,060 --> 00:35:15,510
just as a quick demo of these so do some

00:35:13,830 --> 00:35:21,900
inserts if I do a read again you'll see

00:35:15,510 --> 00:35:26,880
the inserts were successful do some do

00:35:21,900 --> 00:35:28,950
that well do the update I I decided to

00:35:26,880 --> 00:35:31,680
be nice and have it spit out how many

00:35:28,950 --> 00:35:33,780
rows it updated whereas handler socket

00:35:31,680 --> 00:35:35,850
normally just doesn't doesn't care about

00:35:33,780 --> 00:35:38,369
informing you of things I mean it's in

00:35:35,850 --> 00:35:40,740
forms you but in a very basic way so I

00:35:38,369 --> 00:35:42,990
did it in a nice way and then you read

00:35:40,740 --> 00:35:46,950
again it the update was successful and

00:35:42,990 --> 00:35:49,650
then last one I just insert and then

00:35:46,950 --> 00:35:51,420
delete that at the same time and so I

00:35:49,650 --> 00:35:52,860
told it to tell me how many rows were

00:35:51,420 --> 00:35:55,570
deleted and so

00:35:52,860 --> 00:35:56,860
still the same so all of this all of

00:35:55,570 --> 00:35:58,390
this will be available i'm going to

00:35:56,860 --> 00:36:02,800
upload a little tarball of all this

00:35:58,390 --> 00:36:04,480
example code so you can you can look

00:36:02,800 --> 00:36:08,830
through it at your leisure whichever

00:36:04,480 --> 00:36:11,080
language you like there are also see

00:36:08,830 --> 00:36:13,480
libraries and other libraries you know

00:36:11,080 --> 00:36:18,030
non scripting language libraries that

00:36:13,480 --> 00:36:20,320
you can use with handler socket to

00:36:18,030 --> 00:36:23,530
incorporate in just about any any type

00:36:20,320 --> 00:36:27,910
of things so what are the limitations

00:36:23,530 --> 00:36:31,020
well as you probably got from the demos

00:36:27,910 --> 00:36:34,210
I mean you're talking about basic crud

00:36:31,020 --> 00:36:35,770
you know create read update delete if

00:36:34,210 --> 00:36:37,990
it's anything more complicated than that

00:36:35,770 --> 00:36:39,250
it's not going to work for you you know

00:36:37,990 --> 00:36:42,970
you're not going to do joins you're not

00:36:39,250 --> 00:36:46,090
going to do any sort of conditional

00:36:42,970 --> 00:36:49,030
anything you know you can you can insert

00:36:46,090 --> 00:36:50,020
something you can read something you can

00:36:49,030 --> 00:36:53,440
update something you can delete

00:36:50,020 --> 00:36:56,260
something that's it all the searches are

00:36:53,440 --> 00:36:58,810
on keys so if there's an isn't isn't a

00:36:56,260 --> 00:37:00,430
key to find you can't search on it if

00:36:58,810 --> 00:37:02,140
it's not if it's not a key you can't

00:37:00,430 --> 00:37:05,520
it's not it's not searchable by handler

00:37:02,140 --> 00:37:08,620
socket and then as I mentioned before

00:37:05,520 --> 00:37:12,070
only some storage engines are are

00:37:08,620 --> 00:37:14,590
supported in ODB extra DB of course and

00:37:12,070 --> 00:37:19,030
then spider other storage engines you

00:37:14,590 --> 00:37:23,080
can't use with it yeah multi cult yes

00:37:19,030 --> 00:37:24,190
you can specify multi-column keys yeah

00:37:23,080 --> 00:37:25,420
there was actually there was actually a

00:37:24,190 --> 00:37:27,820
field on one of the one of the previous

00:37:25,420 --> 00:37:30,880
slides where it's where you specify then

00:37:27,820 --> 00:37:33,130
the number of columns of the key to

00:37:30,880 --> 00:37:36,060
search on so yeah you can specify

00:37:33,130 --> 00:37:36,060
multi-column key

00:37:41,030 --> 00:37:50,730
it will simply it will just it basically

00:37:46,200 --> 00:37:53,339
know it you'll just you'll just get a

00:37:50,730 --> 00:38:05,130
failure back you know if there's some

00:37:53,339 --> 00:38:06,569
sort of constraint or whatnot so it's

00:38:05,130 --> 00:38:10,410
just going to fail and it's going to

00:38:06,569 --> 00:38:12,170
fail ugly ugly and so it's not going to

00:38:10,410 --> 00:38:14,040
help you try to figure out why it failed

00:38:12,170 --> 00:38:18,450
you know it's not like it's going to be

00:38:14,040 --> 00:38:20,130
any sort of any sort of yeah yeah all

00:38:18,450 --> 00:38:22,890
that's in the sequel layer but the

00:38:20,130 --> 00:38:27,750
benefits are very big I mean you have

00:38:22,890 --> 00:38:29,730
lower cpu usage there's no parsing it

00:38:27,750 --> 00:38:31,619
also batch processes whatever possible

00:38:29,730 --> 00:38:33,390
so it lowers your cpu usage but also

00:38:31,619 --> 00:38:36,630
lowers your network usage if network is

00:38:33,390 --> 00:38:38,549
if network throughput is a problem to

00:38:36,630 --> 00:38:42,329
you because it I mean you saw you saw

00:38:38,549 --> 00:38:45,750
the the syntax it's extremely compact

00:38:42,329 --> 00:38:48,299
compared to SQL right so so your network

00:38:45,750 --> 00:38:53,339
bandwidth is going to be quite quite a

00:38:48,299 --> 00:38:54,990
bit lower so so if you can live with the

00:38:53,339 --> 00:39:01,799
constraints of handler socket the

00:38:54,990 --> 00:39:06,150
benefits can be quite big just to show

00:39:01,799 --> 00:39:07,710
you in this blog post if you just if you

00:39:06,150 --> 00:39:09,150
just search for handler socket benchmark

00:39:07,710 --> 00:39:11,670
you'll you'll get this blog post but

00:39:09,150 --> 00:39:15,900
this other guy summarized the benefits

00:39:11,670 --> 00:39:19,819
he did a test so MySQL or Maria DB with

00:39:15,900 --> 00:39:23,630
SQL on this particular server is getting

00:39:19,819 --> 00:39:26,720
105,000 I yeah hunt no one hundred and

00:39:23,630 --> 00:39:28,740
hundred thousand yeah queries per second

00:39:26,720 --> 00:39:32,160
with memcache you get four hundred

00:39:28,740 --> 00:39:39,490
twenty thousand but with handler saucony

00:39:32,160 --> 00:39:46,960
could 750,000 so hmm

00:39:39,490 --> 00:39:50,350
I would guess not this the this this is

00:39:46,960 --> 00:39:52,840
optimized for simple text based data and

00:39:50,350 --> 00:39:56,200
but you know and then you also notice

00:39:52,840 --> 00:39:59,380
the server the CPUC with with with

00:39:56,200 --> 00:40:02,020
regular mysql the cpu the user and the

00:39:59,380 --> 00:40:04,300
system you know and then with mem cast

00:40:02,020 --> 00:40:07,900
that flips but then with handler socket

00:40:04,300 --> 00:40:09,280
is more balanced so you're more you know

00:40:07,900 --> 00:40:12,160
it's just i just found that interesting

00:40:09,280 --> 00:40:13,330
but the main number that that that you

00:40:12,160 --> 00:40:14,920
know people seem to care about you i

00:40:13,330 --> 00:40:18,820
mean on a server that could get a

00:40:14,920 --> 00:40:20,920
hundred thousand queries per second we

00:40:18,820 --> 00:40:24,070
using handler socket if the sense if

00:40:20,920 --> 00:40:26,290
your workload supports it you can you

00:40:24,070 --> 00:40:30,070
know seven times as much so so that's

00:40:26,290 --> 00:40:32,740
the benefit so some resources the maria

00:40:30,070 --> 00:40:34,510
DB knowledge base has a section on

00:40:32,740 --> 00:40:37,180
handler socket using it enabling it

00:40:34,510 --> 00:40:38,980
things like that example the maria DB

00:40:37,180 --> 00:40:42,040
cookbook has a whole chapter on it and

00:40:38,980 --> 00:40:43,480
if you leave your card on the table i'm

00:40:42,040 --> 00:40:45,640
going to be giving away 10 of them

00:40:43,480 --> 00:40:47,109
tomorrow all i need is a name and an

00:40:45,640 --> 00:40:49,090
email address because that's what the

00:40:47,109 --> 00:40:53,560
publisher wants so they can email you

00:40:49,090 --> 00:40:57,820
the link there drm-free so just so you

00:40:53,560 --> 00:41:00,640
know it's it's it's from packed and so

00:40:57,820 --> 00:41:02,500
they so yeah if you leave leave a name

00:41:00,640 --> 00:41:05,770
I'll be I'll be drawing 10 of those and

00:41:02,500 --> 00:41:09,130
and giving those away tomorrow so any

00:41:05,770 --> 00:41:11,290
other any questions I think we handle a

00:41:09,130 --> 00:41:12,550
lot of them just during but isn't any

00:41:11,290 --> 00:41:14,560
other questions I mean it's it's a

00:41:12,550 --> 00:41:22,440
limited thing but it can be very

00:41:14,560 --> 00:41:22,440
beneficial yeah basically

00:41:25,579 --> 00:41:30,930
it probably stops at the first failure

00:41:27,779 --> 00:41:34,140
knowing handler socket you know it tries

00:41:30,930 --> 00:41:35,640
to batch them where it can but it's um

00:41:34,140 --> 00:41:38,039
it's something where you know you'll

00:41:35,640 --> 00:41:41,190
know that the batch failed and so then

00:41:38,039 --> 00:41:45,150
it's just a matter of you know figure

00:41:41,190 --> 00:41:46,440
out yeah yeah I mean I mean a lot of

00:41:45,150 --> 00:41:48,119
this a lot of this you'll be setting up

00:41:46,440 --> 00:41:51,500
so it's an automated system where you

00:41:48,119 --> 00:41:51,500
know you won't don't be having that

00:41:57,109 --> 00:42:03,510
you're skipping the sequel there so so

00:42:01,559 --> 00:42:05,910
you're skipping all of that stuff we

00:42:03,510 --> 00:42:17,579
love about SQL we're sifting all that

00:42:05,910 --> 00:42:23,210
stuff we love about hmm well yeah but

00:42:17,579 --> 00:42:23,210
not handle but not handler shocking

00:42:29,100 --> 00:42:38,520
I haven't done extensive testing to see

00:42:32,460 --> 00:42:41,990
how when it fails how ugly it is so yeah

00:42:38,520 --> 00:42:44,940
welcome welcome to the no SQL world I

00:42:41,990 --> 00:42:48,390
mean this this this is this it's al it's

00:42:44,940 --> 00:42:50,880
it's limited it has limited use but in

00:42:48,390 --> 00:42:55,860
those instances where it can be used it

00:42:50,880 --> 00:42:57,480
can be very useful so it's all about

00:42:55,860 --> 00:43:08,960
living you know if you can live within

00:42:57,480 --> 00:43:08,960
that usefulness so all right thank you

00:43:14,870 --> 00:43:19,170
your customers rely on your website or

00:43:17,670 --> 00:43:21,540
application if it's slower

00:43:19,170 --> 00:43:24,450
non-responsive it infuriates your users

00:43:21,540 --> 00:43:26,310
and costs you money keeping your

00:43:24,450 --> 00:43:29,800
business critical systems humming along

00:43:26,310 --> 00:43:32,110
requires insight into what they're doing

00:43:29,800 --> 00:43:34,090
your system metrics tells stories

00:43:32,110 --> 00:43:36,070
stories that can reveal performance

00:43:34,090 --> 00:43:38,410
bottlenecks resource limitations and

00:43:36,070 --> 00:43:39,970
other problems but how do you keep an

00:43:38,410 --> 00:43:42,640
eye on all of your systems performance

00:43:39,970 --> 00:43:45,640
metrics in real-time and record this

00:43:42,640 --> 00:43:47,410
data for later analysis enter longview

00:43:45,640 --> 00:43:49,450
the new way to see what's really going

00:43:47,410 --> 00:43:51,580
on under the hood the long view

00:43:49,450 --> 00:43:53,650
dashboard lets you visualize the status

00:43:51,580 --> 00:43:56,110
of all your systems providing you with a

00:43:53,650 --> 00:43:59,500
bird's-eye view of your entire fleet you

00:43:56,110 --> 00:44:02,080
can sort by cpu memory swap processes

00:43:59,500 --> 00:44:03,820
load and network usage click a specific

00:44:02,080 --> 00:44:06,220
system to access its individual

00:44:03,820 --> 00:44:08,730
dashboard then click and drag to zoom in

00:44:06,220 --> 00:44:11,140
on chokepoints and get more detail

00:44:08,730 --> 00:44:12,820
comprehensive network data including

00:44:11,140 --> 00:44:15,130
inbound and outbound traffic is

00:44:12,820 --> 00:44:16,690
available on the network tab and disk

00:44:15,130 --> 00:44:18,610
rights and free space on the disk

00:44:16,690 --> 00:44:21,460
stabbed while the process Explorer

00:44:18,610 --> 00:44:23,980
displays usage statistics for individual

00:44:21,460 --> 00:44:26,170
processes the system info tab shows

00:44:23,980 --> 00:44:28,390
listening services active connections

00:44:26,170 --> 00:44:30,550
and available updates adding long view

00:44:28,390 --> 00:44:32,230
to a system is easy just click the

00:44:30,550 --> 00:44:34,390
button copy the one line installation

00:44:32,230 --> 00:44:36,820
command then run the command on your

00:44:34,390 --> 00:44:38,530
linux system to complete the process the

00:44:36,820 --> 00:44:40,720
agent will begin collecting data and

00:44:38,530 --> 00:44:42,570
sending it to longview then the graphs

00:44:40,720 --> 00:44:45,120
start rolling

00:44:42,570 --> 00:44:47,490
use longview to gain visibility into

00:44:45,120 --> 00:44:51,230
your servers so when your website or app

00:44:47,490 --> 00:44:51,230

YouTube URL: https://www.youtube.com/watch?v=ki6b1KjK7Lo


