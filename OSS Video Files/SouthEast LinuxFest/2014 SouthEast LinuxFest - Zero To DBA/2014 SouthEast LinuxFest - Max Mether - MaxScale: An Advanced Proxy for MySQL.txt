Title: 2014 SouthEast LinuxFest - Max Mether - MaxScale: An Advanced Proxy for MySQL
Publication date: 2015-05-19
Playlist: 2014 SouthEast LinuxFest - Zero To DBA
Description: 
	2014 SouthEast LinuxFest
Max Mether
MaxScale: An Advanced Proxy for MySQL
Captions: 
	00:00:00,000 --> 00:00:05,339
the following presentation was recorded

00:00:02,490 --> 00:00:08,189
the 2014 southeast linux fest in

00:00:05,339 --> 00:00:11,070
charlotte north carolina it is licensed

00:00:08,189 --> 00:00:14,880
under a creative commons license for

00:00:11,070 --> 00:00:18,180
more information visit www selfies linux

00:00:14,880 --> 00:00:19,710
pc org the southeast linux fest would

00:00:18,180 --> 00:00:22,740
like to thank the following diamond

00:00:19,710 --> 00:00:27,449
sponsors in 2014 for helping make these

00:00:22,740 --> 00:00:30,420
videos possible let's get started so

00:00:27,449 --> 00:00:35,280
this talk is about mac skin does anyone

00:00:30,420 --> 00:00:39,239
here know what max kelly is good okay

00:00:35,280 --> 00:00:40,890
that's a good start well then you're at

00:00:39,239 --> 00:00:44,760
the right place because i'm going to

00:00:40,890 --> 00:00:48,649
explain what it is so first of all a few

00:00:44,760 --> 00:00:51,030
words about me some my name is Max our

00:00:48,649 --> 00:00:59,460
marketing team likes this picture I

00:00:51,030 --> 00:01:02,309
actually don't exactly I used to work

00:00:59,460 --> 00:01:03,870
for a calm place called MySQL a be back

00:01:02,309 --> 00:01:05,850
in the days when Peter was also working

00:01:03,870 --> 00:01:09,689
there before Peter actually but that's

00:01:05,850 --> 00:01:16,650
besides the point and I now work for Sky

00:01:09,689 --> 00:01:18,240
SQL / Marie ADB and yeah I've been doing

00:01:16,650 --> 00:01:24,689
this for quite a while actually too long

00:01:18,240 --> 00:01:27,270
probably but yeah and at what they do at

00:01:24,689 --> 00:01:29,579
guys go to run our services organization

00:01:27,270 --> 00:01:31,530
consulting training remote DBA and I

00:01:29,579 --> 00:01:34,470
also do stuff like this so I talk at at

00:01:31,530 --> 00:01:39,360
conferences and i'm originally from

00:01:34,470 --> 00:01:42,299
Finland where mysql kind of was created

00:01:39,360 --> 00:01:44,159
the company wasn't the company was in

00:01:42,299 --> 00:01:48,619
sweden but the founder was from finland

00:01:44,159 --> 00:01:52,890
and same with maria DBN skies girl

00:01:48,619 --> 00:01:58,979
alright so the topic of today is is max

00:01:52,890 --> 00:02:02,820
scale so what is max scale it's it's a

00:01:58,979 --> 00:02:05,549
queer a query routing layer basically a

00:02:02,820 --> 00:02:07,649
proxy we call it an intelligent proxy

00:02:05,549 --> 00:02:10,519
because it's a bit more intelligent than

00:02:07,649 --> 00:02:13,500
your average proxy server

00:02:10,519 --> 00:02:15,390
meaning that you can do more things that

00:02:13,500 --> 00:02:17,280
are normal proxy can do and in

00:02:15,390 --> 00:02:20,280
particular because this is a proxy

00:02:17,280 --> 00:02:23,879
that's very specific to MySQL or or

00:02:20,280 --> 00:02:25,890
marine DB which you know has pros and

00:02:23,879 --> 00:02:27,599
cons the pros being that we can do a lot

00:02:25,890 --> 00:02:32,040
of things that most proxies can't do

00:02:27,599 --> 00:02:34,950
because we're we're focusing on a

00:02:32,040 --> 00:02:36,959
specific type of traffic however of

00:02:34,950 --> 00:02:40,560
course you can't use this proxy for much

00:02:36,959 --> 00:02:44,760
else than my SQL queries at least at the

00:02:40,560 --> 00:02:48,450
moment it's completely open source it's

00:02:44,760 --> 00:02:50,489
on github the address is over there it's

00:02:48,450 --> 00:02:54,030
currently in alpha we've been working on

00:02:50,489 --> 00:02:55,769
this for a couple of years I actually

00:02:54,030 --> 00:02:57,989
don't know it I don't remember how long

00:02:55,769 --> 00:02:59,790
but quite a while it's currently in

00:02:57,989 --> 00:03:04,470
alpha but we're actually getting to

00:02:59,790 --> 00:03:06,720
something called called a beta soon most

00:03:04,470 --> 00:03:09,000
likely next month in july and we're

00:03:06,720 --> 00:03:10,709
actually looking for 4 beta testers so

00:03:09,000 --> 00:03:15,030
if someone is interested in actually

00:03:10,709 --> 00:03:18,930
trying this out in sem semi production

00:03:15,030 --> 00:03:22,199
will be very interested to to find out

00:03:18,930 --> 00:03:24,480
the current version is called 0.7 which

00:03:22,199 --> 00:03:27,000
is the one I'm gonna well I'm going to

00:03:24,480 --> 00:03:28,799
try to do a demo but it's running on

00:03:27,000 --> 00:03:31,260
amazon so I need the network to work

00:03:28,799 --> 00:03:35,519
which hasn't always been the case here

00:03:31,260 --> 00:03:38,040
so we'll see about the demo right and

00:03:35,519 --> 00:03:41,699
you know betta this summer we're

00:03:38,040 --> 00:03:43,260
planning to hopefully have a ga sometime

00:03:41,699 --> 00:03:49,500
this fall but it of course depends on

00:03:43,260 --> 00:03:50,930
how the beta goes in and so forth so

00:03:49,500 --> 00:03:53,010
what are the benefits of Mac scale

00:03:50,930 --> 00:03:55,769
especially if you if you think what

00:03:53,010 --> 00:03:58,709
other proxies so there's a few things

00:03:55,769 --> 00:04:03,150
max scale as well I said that max scale

00:03:58,709 --> 00:04:04,530
is is made for mysql DB which means it

00:04:03,150 --> 00:04:07,260
can do a few things that most other

00:04:04,530 --> 00:04:10,139
proxies can't for example authentication

00:04:07,260 --> 00:04:13,470
layer so max scale has an authentication

00:04:10,139 --> 00:04:14,760
layer which means that the queries don't

00:04:13,470 --> 00:04:16,739
have to go all the way through my escrow

00:04:14,760 --> 00:04:18,190
server for other indication you can do

00:04:16,739 --> 00:04:19,959
it already at the proxy level

00:04:18,190 --> 00:04:23,560
and this of course most brakesh can do

00:04:19,959 --> 00:04:25,690
because they don't have a mysql user

00:04:23,560 --> 00:04:31,030
authentication built into them which mac

00:04:25,690 --> 00:04:33,610
scale does it has a flexible flexible

00:04:31,030 --> 00:04:34,780
architecture so it's extendable we look

00:04:33,610 --> 00:04:38,560
at the architecture in the moment so you

00:04:34,780 --> 00:04:40,840
see what I mean by that of course as a

00:04:38,560 --> 00:04:43,240
proxy it has its transparent so you can

00:04:40,840 --> 00:04:45,730
have a complex a che architecture behind

00:04:43,240 --> 00:04:48,670
the proxy and the client applications

00:04:45,730 --> 00:04:49,810
don't know they just connect to max

00:04:48,670 --> 00:04:52,090
scale and they don't just worry about

00:04:49,810 --> 00:04:53,560
failures didn't s worry about if your

00:04:52,090 --> 00:04:56,140
architecture changes you add slaves

00:04:53,560 --> 00:04:58,360
remove slaves you completely change or

00:04:56,140 --> 00:05:03,700
architecture it's all hidden behind the

00:04:58,360 --> 00:05:06,280
mac scale proxy and you can also do

00:05:03,700 --> 00:05:07,930
scaling with max scale in theory because

00:05:06,280 --> 00:05:12,940
you can partition load so you can read

00:05:07,930 --> 00:05:14,530
scaling out of the box you could develop

00:05:12,940 --> 00:05:16,000
max skill to have some kind of Chardon

00:05:14,530 --> 00:05:18,690
functional level there is no sharding

00:05:16,000 --> 00:05:23,350
functionality at the moment at max girl

00:05:18,690 --> 00:05:26,260
only read read scaling you can also do

00:05:23,350 --> 00:05:31,360
some filtering and logging capability at

00:05:26,260 --> 00:05:33,820
max scale the basics basics of this was

00:05:31,360 --> 00:05:37,480
added in the most recent version 0.7 so

00:05:33,820 --> 00:05:39,100
it's fairly new but so there's like

00:05:37,480 --> 00:05:40,720
three different modules for doing that

00:05:39,100 --> 00:05:42,100
but but you can do quite a lot already

00:05:40,720 --> 00:05:47,680
with these and you can extend this

00:05:42,100 --> 00:05:50,020
further as well so max scales is a proxy

00:05:47,680 --> 00:05:52,120
layer meaning that your clients connect

00:05:50,020 --> 00:05:55,690
max Gail and Max scale is then connected

00:05:52,120 --> 00:05:57,310
to your underlying servers now in a

00:05:55,690 --> 00:05:59,860
sense this could be a single point of

00:05:57,310 --> 00:06:01,390
failure evening from an H a perspective

00:05:59,860 --> 00:06:03,880
but you can of course have multiple max

00:06:01,390 --> 00:06:06,700
scale proxies attached to the same

00:06:03,880 --> 00:06:08,350
cluster and you can have a here are key

00:06:06,700 --> 00:06:09,490
of max get servers if you wanted to as

00:06:08,350 --> 00:06:11,370
well you can have a Mexican server

00:06:09,490 --> 00:06:14,890
connected to Mexico servers and so forth

00:06:11,370 --> 00:06:18,880
but whatever you do you always have you

00:06:14,890 --> 00:06:20,950
need to have some kind of redundancy not

00:06:18,880 --> 00:06:23,140
only behind the database but also in the

00:06:20,950 --> 00:06:24,780
front end or on a client level to be

00:06:23,140 --> 00:06:30,040
able to connect

00:06:24,780 --> 00:06:33,520
but mark scale itself does not handle

00:06:30,040 --> 00:06:35,380
failover of the databases so max scale

00:06:33,520 --> 00:06:36,970
is a proxy there's a lot of things but

00:06:35,380 --> 00:06:39,940
the failure where will the behind will

00:06:36,970 --> 00:06:43,450
be handled by the database so it will

00:06:39,940 --> 00:06:45,130
Mexico will detect failures it will

00:06:43,450 --> 00:06:46,200
detect master-slave relationships and

00:06:45,130 --> 00:06:48,940
things like that but it won't actually

00:06:46,200 --> 00:06:51,670
at least at the moment it does not do

00:06:48,940 --> 00:06:53,380
any kind of automation for that so if

00:06:51,670 --> 00:06:57,520
you use max carriage replicate

00:06:53,380 --> 00:06:59,530
replication you will need mha or PRM or

00:06:57,520 --> 00:07:00,970
something to to do the failover behind

00:06:59,530 --> 00:07:02,410
the scenes of course if you something

00:07:00,970 --> 00:07:05,290
like galera but you don't really need

00:07:02,410 --> 00:07:17,140
failover it works out of the box because

00:07:05,290 --> 00:07:18,820
it's built into galera the failover it

00:07:17,140 --> 00:07:22,800
will know not to send queries to felt

00:07:18,820 --> 00:07:25,660
notice so here the question was whether

00:07:22,800 --> 00:07:27,640
for a galera cluster whether even though

00:07:25,660 --> 00:07:29,380
it fails but a max k will know not to

00:07:27,640 --> 00:07:32,470
send queries to fail known answer is yes

00:07:29,380 --> 00:07:35,350
Mexico has a monitoring a module that

00:07:32,470 --> 00:07:37,840
will make connect to the to the nodes

00:07:35,350 --> 00:07:39,730
and see if they're up or not so max

00:07:37,840 --> 00:07:45,280
scale does monitoring it doesn't it just

00:07:39,730 --> 00:07:48,090
doesn't do failover itself so if you

00:07:45,280 --> 00:07:52,960
look at the architecture of max scale so

00:07:48,090 --> 00:07:56,260
this is kind of I guess the beauty of

00:07:52,960 --> 00:07:57,910
max scale Peter thought what not over

00:07:56,260 --> 00:07:59,460
engineering and in a sense max scale

00:07:57,910 --> 00:08:03,790
might be a bit over engineered because

00:07:59,460 --> 00:08:06,330
it is the idea is very extendable so you

00:08:03,790 --> 00:08:08,950
can extend max cut to do lots of things

00:08:06,330 --> 00:08:11,710
and it's built in a very modular fashion

00:08:08,950 --> 00:08:14,530
so there's a max scale core which is

00:08:11,710 --> 00:08:17,860
basically a message which using Linux

00:08:14,530 --> 00:08:19,750
eep also it basically sends messages

00:08:17,860 --> 00:08:22,440
between these different modules that's

00:08:19,750 --> 00:08:25,480
basically the core of max scale and then

00:08:22,440 --> 00:08:29,460
the modules are five different

00:08:25,480 --> 00:08:32,680
categories and you can have multiple

00:08:29,460 --> 00:08:35,500
instances i guess or modules running of

00:08:32,680 --> 00:08:37,690
each category so for example you could

00:08:35,500 --> 00:08:37,950
in theory have multiple routing or you

00:08:37,690 --> 00:08:40,290
can

00:08:37,950 --> 00:08:41,430
multiple routers running in the same max

00:08:40,290 --> 00:08:44,040
Carey instance you could have multiple

00:08:41,430 --> 00:08:48,840
protocols and so forth so it's very

00:08:44,040 --> 00:08:51,120
flexible architecture itself and the

00:08:48,840 --> 00:08:53,520
modules inside here can be client-facing

00:08:51,120 --> 00:08:55,890
they can be back in facing this can be

00:08:53,520 --> 00:09:02,550
internal it could in theory connect to

00:08:55,890 --> 00:09:04,200
anything in theory so far we are the

00:09:02,550 --> 00:09:05,600
only ones who have been coding modules

00:09:04,200 --> 00:09:08,250
but in theory because it's open source

00:09:05,600 --> 00:09:10,770
you can you could create your own

00:09:08,250 --> 00:09:12,930
modules so if you wanted to have add a

00:09:10,770 --> 00:09:15,930
protocol to max scale because there is

00:09:12,930 --> 00:09:17,400
an API for it you could do so that's

00:09:15,930 --> 00:09:22,710
very flexible architecture same with the

00:09:17,400 --> 00:09:24,840
monitor or a router okay so let's look

00:09:22,710 --> 00:09:28,050
at each of these pieces a bit what what

00:09:24,840 --> 00:09:30,570
do they mean so the first thing is the

00:09:28,050 --> 00:09:35,280
protocol and that defines how the

00:09:30,570 --> 00:09:36,720
applications connect to max Gail well in

00:09:35,280 --> 00:09:38,610
the initial release of max scale there

00:09:36,720 --> 00:09:43,770
is only one protocol and that's the

00:09:38,610 --> 00:09:46,320
MySQL protocol so you can connect using

00:09:43,770 --> 00:09:49,440
max care mysql connection and that's

00:09:46,320 --> 00:09:52,740
about it but because there is a protocol

00:09:49,440 --> 00:09:54,240
module you can add later on different

00:09:52,740 --> 00:09:56,700
modules which we have on our roadmap to

00:09:54,240 --> 00:10:01,290
do but it could be done by someone else

00:09:56,700 --> 00:10:02,940
as well so basically it looks like using

00:10:01,290 --> 00:10:04,530
this protocol you can connect to max

00:10:02,940 --> 00:10:06,450
scale and it looks like a micro server

00:10:04,530 --> 00:10:08,610
because it reads to my little protocol

00:10:06,450 --> 00:10:12,120
so any my name is cool client can

00:10:08,610 --> 00:10:14,130
connect the mac scale and those are back

00:10:12,120 --> 00:10:17,880
end protocol which defines how max

00:10:14,130 --> 00:10:20,520
connects to the servers again at the

00:10:17,880 --> 00:10:22,770
moment there's only one which is mysql

00:10:20,520 --> 00:10:25,530
DB but in theory you could connect it to

00:10:22,770 --> 00:10:27,450
other database service as well using the

00:10:25,530 --> 00:10:30,200
using a product by creating a protocol

00:10:27,450 --> 00:10:30,200
module

00:10:33,510 --> 00:10:42,510
then you do that magical protocol right

00:10:37,740 --> 00:10:46,149
what about the ssl prepared statements

00:10:42,510 --> 00:10:48,670
slm prepared statements I don't the

00:10:46,149 --> 00:10:53,410
prepared statements that's a good

00:10:48,670 --> 00:10:55,120
question I don't think we support ssl at

00:10:53,410 --> 00:10:57,790
the mumbai actually don't know and

00:10:55,120 --> 00:10:59,860
prepared statements I think we support

00:10:57,790 --> 00:11:02,019
statement well I'm not trying to ensure

00:10:59,860 --> 00:11:04,630
but pretty sure that we support the pier

00:11:02,019 --> 00:11:06,850
statement they stored in the max care

00:11:04,630 --> 00:11:08,290
level repair statements same like user

00:11:06,850 --> 00:11:10,839
defined variables and things like that

00:11:08,290 --> 00:11:13,630
we support them as well max scale stores

00:11:10,839 --> 00:11:15,639
them and then sends them to the actual

00:11:13,630 --> 00:11:18,310
server so each server if you use a user

00:11:15,639 --> 00:11:19,449
defined variable you create one max

00:11:18,310 --> 00:11:21,579
scale will actually make sure that every

00:11:19,449 --> 00:11:23,500
server has the same so if you didn't

00:11:21,579 --> 00:11:26,850
Aquarius rerouted to another server they

00:11:23,500 --> 00:11:26,850
will actually get the same value

00:11:40,440 --> 00:11:45,930
I mean technically a good yin and so

00:11:44,730 --> 00:11:47,220
yeah the course of the question was if

00:11:45,930 --> 00:11:49,500
some would create a module for

00:11:47,220 --> 00:11:50,820
connecting to Oracle or sequel server

00:11:49,500 --> 00:11:54,000
some other database could you then

00:11:50,820 --> 00:11:56,910
somehow use this to connect both and the

00:11:54,000 --> 00:11:58,350
answer is yes and how exactly how it

00:11:56,910 --> 00:12:01,380
depends on how you want to do it so you

00:11:58,350 --> 00:12:02,790
could we talk about filters in the

00:12:01,380 --> 00:12:05,760
moment but there's routing in this

00:12:02,790 --> 00:12:08,190
filter routing depende de sides how how

00:12:05,760 --> 00:12:09,660
the query gets routed to servers so you

00:12:08,190 --> 00:12:12,900
can use that and then filters you can

00:12:09,660 --> 00:12:15,120
actually not change the query coming in

00:12:12,900 --> 00:12:16,440
and change where it connects you can

00:12:15,120 --> 00:12:19,620
actually connect to both you get a

00:12:16,440 --> 00:12:21,060
filter you get a query going to either

00:12:19,620 --> 00:12:22,530
or and you can say okay this should

00:12:21,060 --> 00:12:24,090
actually go to both so the right we'll

00:12:22,530 --> 00:12:27,780
go to both or something like that so you

00:12:24,090 --> 00:12:37,020
could definitely do it yes but there's

00:12:27,780 --> 00:12:41,760
multiple ways of doing it right those

00:12:37,020 --> 00:12:47,160
protocols then we have the routing which

00:12:41,760 --> 00:12:50,490
is very important for for scaling and

00:12:47,160 --> 00:12:53,460
for a che so that basically defines the

00:12:50,490 --> 00:12:55,050
rules for how to route queries to the

00:12:53,460 --> 00:13:00,450
actual servers so the database service

00:12:55,050 --> 00:13:02,490
behind we currently have so when you

00:13:00,450 --> 00:13:06,000
download mac scale dis currently two

00:13:02,490 --> 00:13:10,170
routers available there's a connection

00:13:06,000 --> 00:13:12,450
based routing and we invite splitter of

00:13:10,170 --> 00:13:17,430
routing so the connection based routing

00:13:12,450 --> 00:13:19,140
will basically establish a route when

00:13:17,430 --> 00:13:20,580
you connect so you will be connected to

00:13:19,140 --> 00:13:22,850
server and then as long as your

00:13:20,580 --> 00:13:24,839
connection is open you will use the same

00:13:22,850 --> 00:13:28,500
connection all the times you always go

00:13:24,839 --> 00:13:30,240
to the same server and if you statement

00:13:28,500 --> 00:13:32,580
based routing then you can dynamically

00:13:30,240 --> 00:13:35,130
change which server it goes to and we

00:13:32,580 --> 00:13:39,510
have a rewrite split router available

00:13:35,130 --> 00:13:41,280
basically which will then depending on

00:13:39,510 --> 00:13:44,730
what kind of query get it will change

00:13:41,280 --> 00:13:46,890
where it routes the query so all in a

00:13:44,730 --> 00:13:49,520
master-slave environment all rights will

00:13:46,890 --> 00:13:53,240
go to the master and slave from goat

00:13:49,520 --> 00:13:56,690
so Reed would go to the slags in a load

00:13:53,240 --> 00:13:59,180
balanced way and this this is this

00:13:56,690 --> 00:14:05,570
exists 9 in in Moscow there's of course

00:13:59,180 --> 00:14:07,580
things to consider like if you use multi

00:14:05,570 --> 00:14:09,410
statement transactions of course if we

00:14:07,580 --> 00:14:11,270
invite spitting won't work if if you

00:14:09,410 --> 00:14:12,710
have multi statement transactions it

00:14:11,270 --> 00:14:14,120
automatically goes to the master so

00:14:12,710 --> 00:14:17,780
basically we invite spitting doesn't

00:14:14,120 --> 00:14:18,920
work anymore if you do that so there are

00:14:17,780 --> 00:14:24,550
certain cabbage for using READ&WRITE

00:14:18,920 --> 00:14:27,560
spitter but for example if you already

00:14:24,550 --> 00:14:29,120
if your application is already built for

00:14:27,560 --> 00:14:30,980
replication you might already do read

00:14:29,120 --> 00:14:32,480
write splitting at the application layer

00:14:30,980 --> 00:14:35,210
you might have separate functions for

00:14:32,480 --> 00:14:37,010
writing and reading queries in which

00:14:35,210 --> 00:14:38,480
case you can use connection based

00:14:37,010 --> 00:14:42,800
routing because the application would

00:14:38,480 --> 00:14:44,180
automatically know whether whether the

00:14:42,800 --> 00:14:45,920
connection should go to the master or to

00:14:44,180 --> 00:14:48,110
the slave and then you can let max scale

00:14:45,920 --> 00:14:51,790
just load balance it on the slaves for

00:14:48,110 --> 00:14:51,790
the reads or something like that right

00:14:57,500 --> 00:15:03,620
then there's the filters and the

00:14:59,180 --> 00:15:06,080
Logging's and that's the last of the of

00:15:03,620 --> 00:15:08,360
the kind of modules where we did some

00:15:06,080 --> 00:15:10,700
work so before the latest version mac

00:15:08,360 --> 00:15:12,500
said there was nothing there in theory

00:15:10,700 --> 00:15:15,770
you can do a lot of lots of cool things

00:15:12,500 --> 00:15:17,960
with filter and logging you could well

00:15:15,770 --> 00:15:19,250
you can log stuff because every query

00:15:17,960 --> 00:15:21,350
goes through Mac scale so you can

00:15:19,250 --> 00:15:22,730
basically log based on rules based on

00:15:21,350 --> 00:15:25,670
anything you can do whatever you wanted

00:15:22,730 --> 00:15:27,500
the queries you could also use this as a

00:15:25,670 --> 00:15:29,120
fireball fireball you could have black

00:15:27,500 --> 00:15:30,830
list of queries as some certain queries

00:15:29,120 --> 00:15:32,570
just doesn't go through a certain

00:15:30,830 --> 00:15:34,550
queries goes to certain servers you can

00:15:32,570 --> 00:15:39,110
make rules rules based on the query

00:15:34,550 --> 00:15:41,180
contents on where the quasar sent you

00:15:39,110 --> 00:15:43,340
could have rules some queries always go

00:15:41,180 --> 00:15:45,800
to the master some queries will never go

00:15:43,340 --> 00:15:48,800
anywhere they get an error some queries

00:15:45,800 --> 00:15:52,180
do something you can filter required you

00:15:48,800 --> 00:15:57,350
can transfer the query transformation

00:15:52,180 --> 00:15:58,580
for various reasons well you can think

00:15:57,350 --> 00:16:00,800
of a lot of things you can do it you can

00:15:58,580 --> 00:16:02,450
have you can using filters you can

00:16:00,800 --> 00:16:05,630
create part of the streams so you have a

00:16:02,450 --> 00:16:06,830
query coming in and you it's a certain

00:16:05,630 --> 00:16:08,030
type of query you say well this you

00:16:06,830 --> 00:16:11,000
actually go to two different locations

00:16:08,030 --> 00:16:12,380
so you actually create another back-end

00:16:11,000 --> 00:16:14,210
stream so you send it to two databases

00:16:12,380 --> 00:16:16,750
or four or whatever so you can do very

00:16:14,210 --> 00:16:19,640
very complex things with these filters

00:16:16,750 --> 00:16:22,610
at the moment you can only do

00:16:19,640 --> 00:16:24,470
transformations on on request there's

00:16:22,610 --> 00:16:26,420
nothing on the there's nothing you can't

00:16:24,470 --> 00:16:29,330
there's no there's no hooks for doing it

00:16:26,420 --> 00:16:30,710
on data return but it's actually it's on

00:16:29,330 --> 00:16:31,940
the road map for the next version

00:16:30,710 --> 00:16:35,140
actually show it should be there already

00:16:31,940 --> 00:16:35,140
adding the beta

00:16:35,439 --> 00:16:39,410
parallel streams concept if you've got

00:16:37,759 --> 00:16:42,079
your data like started out and for

00:16:39,410 --> 00:16:44,440
whatever reason you need to say pulling

00:16:42,079 --> 00:16:46,620
from both sides of the

00:16:44,440 --> 00:16:49,210
you know from both pieces ya to pieces

00:16:46,620 --> 00:16:52,720
you could potentially maybe rewrite

00:16:49,210 --> 00:16:54,640
inquiry to pull in from both sides yeah

00:16:52,720 --> 00:16:58,270
so you could basically with this you

00:16:54,640 --> 00:17:00,580
could you could do sharding in max scale

00:16:58,270 --> 00:17:02,290
but there's no built-in functionality

00:17:00,580 --> 00:17:04,089
but you would have to build it yes but

00:17:02,290 --> 00:17:06,790
you're using a filter you could do

00:17:04,089 --> 00:17:08,500
automatic shouting with max cares we

00:17:06,790 --> 00:17:12,220
just haven't done it anything about it

00:17:08,500 --> 00:17:13,660
yet you would you would get two

00:17:12,220 --> 00:17:16,500
different data sets notice because

00:17:13,660 --> 00:17:19,300
there's no there's no filter on data

00:17:16,500 --> 00:17:20,709
return data yet but that should be in

00:17:19,300 --> 00:17:22,689
the beta which should be out in a month

00:17:20,709 --> 00:17:24,670
so after that you could really do the

00:17:22,689 --> 00:17:27,069
charlene you send one you get one query

00:17:24,670 --> 00:17:28,810
it's brilliant to anders will you get

00:17:27,069 --> 00:17:31,390
one results of that back so it looks

00:17:28,810 --> 00:17:35,260
like it's all the same place for the

00:17:31,390 --> 00:17:37,200
client so currently we have we have

00:17:35,260 --> 00:17:40,420
these filters available so we have a

00:17:37,200 --> 00:17:42,400
simple statement counting filter so it

00:17:40,420 --> 00:17:46,900
counts the number of statements in a

00:17:42,400 --> 00:17:48,820
session perhaps not very useful but it's

00:17:46,900 --> 00:17:51,910
there there's a query logging filter so

00:17:48,820 --> 00:17:54,850
you can log everything that happens in a

00:17:51,910 --> 00:17:57,430
session into a log file and there's a

00:17:54,850 --> 00:18:01,570
query rewrite filter using regular

00:17:57,430 --> 00:18:02,860
expressions you can rewrite queries and

00:18:01,570 --> 00:18:06,460
these are the filters that are there out

00:18:02,860 --> 00:18:08,290
of the box and of course so these they

00:18:06,460 --> 00:18:11,560
allow you're allowed to create filters

00:18:08,290 --> 00:18:13,810
based on these modules so you can of

00:18:11,560 --> 00:18:21,060
course regular expression can be any you

00:18:13,810 --> 00:18:21,060
can have multiple and so forth right

00:18:21,090 --> 00:18:27,150
and I when I show my demo i actually

00:18:25,020 --> 00:18:29,690
have I have a few examples of during

00:18:27,150 --> 00:18:32,820
doing a query rewrite filter example

00:18:29,690 --> 00:18:37,980
which is the easiest to see to see a

00:18:32,820 --> 00:18:39,870
result and but as I said we're planning

00:18:37,980 --> 00:18:43,650
more and we especially the data return

00:18:39,870 --> 00:18:46,370
set transformations are coming then

00:18:43,650 --> 00:18:49,710
you're awesome vacation I mean this is a

00:18:46,370 --> 00:18:51,720
module max scale again we currently only

00:18:49,710 --> 00:18:56,250
support one type of authentication which

00:18:51,720 --> 00:18:58,620
is the same as in MySQL my ad be the way

00:18:56,250 --> 00:19:01,020
it works in max scale is that the user

00:18:58,620 --> 00:19:02,550
guns are loaded on startup so when Max

00:19:01,020 --> 00:19:05,340
car starts up it assumes that all

00:19:02,550 --> 00:19:07,110
servers have the same user accounts it

00:19:05,340 --> 00:19:11,520
for some reason this is not the case

00:19:07,110 --> 00:19:13,320
well currently max Kelly is set to work

00:19:11,520 --> 00:19:15,240
with with the same one set of user

00:19:13,320 --> 00:19:19,290
accounts for for all the service in the

00:19:15,240 --> 00:19:20,790
cluster so it basically loads when Max

00:19:19,290 --> 00:19:27,780
gets started Louis user accounts into

00:19:20,790 --> 00:19:29,820
max scale and every time you send you

00:19:27,780 --> 00:19:32,160
connect that's in the query the user

00:19:29,820 --> 00:19:34,020
gets authenticated at max scale and then

00:19:32,160 --> 00:19:36,330
the query gets sent to the to the

00:19:34,020 --> 00:19:40,170
underlying server if for some reason the

00:19:36,330 --> 00:19:42,060
authentication works in max Cabot fails

00:19:40,170 --> 00:19:45,560
on the server level then max scale will

00:19:42,060 --> 00:19:45,560
refresh the user account

00:19:55,299 --> 00:20:01,429
support and tell some plugins or this

00:19:59,509 --> 00:20:03,620
only the built-in at the moment you can

00:20:01,429 --> 00:20:06,440
you can't add up so the question was

00:20:03,620 --> 00:20:08,509
whether whether you can use

00:20:06,440 --> 00:20:10,909
authentication plugins in max scale and

00:20:08,509 --> 00:20:12,500
the answer is no not at the moment it's

00:20:10,909 --> 00:20:16,009
only the built-in user accounts from

00:20:12,500 --> 00:20:18,919
mysql and and Marilla be so you would

00:20:16,009 --> 00:20:22,820
have to change or you could have to add

00:20:18,919 --> 00:20:30,259
north negation module that does it to

00:20:22,820 --> 00:20:31,759
write C code basically to do it then we

00:20:30,259 --> 00:20:35,389
have another important piece of the

00:20:31,759 --> 00:20:36,889
puzzle is the monitors and what do the

00:20:35,389 --> 00:20:38,899
monitors do well they monitor the

00:20:36,889 --> 00:20:41,419
underlying servers so they are the ones

00:20:38,899 --> 00:20:44,059
that make sure that the max scale gets

00:20:41,419 --> 00:20:50,389
an up-to-date picture of off the servers

00:20:44,059 --> 00:20:51,980
like underlying servers and of course

00:20:50,389 --> 00:20:55,940
this is the information the Reuters

00:20:51,980 --> 00:20:59,379
ruder modules use in order to route the

00:20:55,940 --> 00:21:02,389
queries to the correct database servers

00:20:59,379 --> 00:21:05,750
we currently have two modules for

00:21:02,389 --> 00:21:08,090
monitoring one for doing standard MySQL

00:21:05,750 --> 00:21:12,350
amurri to be monitoring and well include

00:21:08,090 --> 00:21:15,940
replication status and then there's a

00:21:12,350 --> 00:21:18,169
galera cluster node monitoring and the

00:21:15,940 --> 00:21:21,019
declarer cluster node monitoring is

00:21:18,169 --> 00:21:23,570
aware of the states of Guerrero cluster

00:21:21,019 --> 00:21:27,740
nodes so who here has used Aguilera

00:21:23,570 --> 00:21:29,929
cluster two guys so in a greater cluster

00:21:27,740 --> 00:21:31,759
you might tell my SQL server that's

00:21:29,929 --> 00:21:33,679
running but it's not in a synchronized

00:21:31,759 --> 00:21:35,929
state and of course you don't want to

00:21:33,679 --> 00:21:37,669
access that server and this monitor is

00:21:35,929 --> 00:21:40,399
of course aware of that so it checks the

00:21:37,669 --> 00:21:41,990
glare state of your nodes not only that

00:21:40,399 --> 00:21:47,000
the mice get service so typically if you

00:21:41,990 --> 00:21:49,279
use a normal let's say a random proxy

00:21:47,000 --> 00:21:50,629
out of the box it will just just test

00:21:49,279 --> 00:21:51,919
that the service is running not that is

00:21:50,629 --> 00:21:55,279
actually a synchronized so it wouldn't

00:21:51,919 --> 00:21:56,929
work with Guerrera but this does because

00:21:55,279 --> 00:21:58,279
it actually takes the state of color

00:21:56,929 --> 00:21:59,929
make sure the glare knows is

00:21:58,279 --> 00:22:02,450
synchronized if the glare node is not

00:21:59,929 --> 00:22:04,680
synchronized it won't be used for any

00:22:02,450 --> 00:22:10,180
query routing

00:22:04,680 --> 00:22:12,640
and the standard mysql DB monitor so

00:22:10,180 --> 00:22:16,510
it's that it monitors that the server is

00:22:12,640 --> 00:22:18,550
up and the status of off the replication

00:22:16,510 --> 00:22:22,000
so for example if your application would

00:22:18,550 --> 00:22:23,980
stop it wouldn't drought queries to that

00:22:22,000 --> 00:22:27,640
server anymore so if it's a slave the

00:22:23,980 --> 00:22:29,020
slave stops the water won't route queer

00:22:27,640 --> 00:22:36,670
students live anymore because it's no

00:22:29,020 --> 00:22:39,340
longer there it monitors it monitors

00:22:36,670 --> 00:22:40,780
application lag actually I think the 0.7

00:22:39,340 --> 00:22:43,120
release already in dust is so this

00:22:40,780 --> 00:22:45,010
actually is wrong with texture but and

00:22:43,120 --> 00:22:46,870
you can actually use this as a rule in

00:22:45,010 --> 00:22:50,170
that's coming in the better version but

00:22:46,870 --> 00:22:55,030
you could use replication lag as a rule

00:22:50,170 --> 00:22:57,280
whether to to use to include a slave on

00:22:55,030 --> 00:23:01,210
red queries this layer or not depending

00:22:57,280 --> 00:23:03,190
on how much it lags there is no table

00:23:01,210 --> 00:23:04,930
consistently checks or anything like

00:23:03,190 --> 00:23:07,780
that but you can still use replication

00:23:04,930 --> 00:23:10,530
lag to some extent to see if its life

00:23:07,780 --> 00:23:10,530
should be included or not

00:23:23,269 --> 00:23:34,739
yeah okay what was the question okay so

00:23:30,989 --> 00:23:36,809
uh eventually it doesn't support

00:23:34,739 --> 00:23:38,549
verification verification a lot right

00:23:36,809 --> 00:23:40,470
because you feel good Rick and the team

00:23:38,549 --> 00:23:44,309
is like Eric's Britain is hoping to

00:23:40,470 --> 00:23:47,190
arrive you you supposed to need a slave

00:23:44,309 --> 00:23:49,230
only then that very was propagated right

00:23:47,190 --> 00:23:53,009
which you can that you can figure out by

00:23:49,230 --> 00:23:55,679
using the ordinance but yeah so the

00:23:53,009 --> 00:23:58,019
question was whether we if you do and if

00:23:55,679 --> 00:23:59,820
you do a right on a master if we

00:23:58,019 --> 00:24:01,559
validate this right has propagated to

00:23:59,820 --> 00:24:03,409
display before we read from that slave

00:24:01,559 --> 00:24:05,369
and the answer's no we don't do that yet

00:24:03,409 --> 00:24:06,809
and it's something I mean that's

00:24:05,369 --> 00:24:10,049
something that will come in a later

00:24:06,809 --> 00:24:12,109
version as well but it's not there it's

00:24:10,049 --> 00:24:18,539
very easy to do with GT IDs yes wish

00:24:12,109 --> 00:24:20,399
someone there so let's look at some use

00:24:18,539 --> 00:24:24,239
cases with the current functionality so

00:24:20,399 --> 00:24:26,460
one is simple rescale ability the easy

00:24:24,239 --> 00:24:31,529
easiest solutions of course if if you're

00:24:26,460 --> 00:24:34,350
as I mentioned if your your applications

00:24:31,529 --> 00:24:36,359
are replication aware that they already

00:24:34,350 --> 00:24:39,450
have different functions for reading and

00:24:36,359 --> 00:24:42,179
writing which is the case already with

00:24:39,450 --> 00:24:43,980
some applications in that case this

00:24:42,179 --> 00:24:45,659
means every client on every client you

00:24:43,980 --> 00:24:49,470
have two functions one for writing

00:24:45,659 --> 00:24:51,659
Timaeus colon for reading from MySQL you

00:24:49,470 --> 00:24:53,340
can instead of sending those to directly

00:24:51,659 --> 00:24:55,769
to the master or slaves you send them to

00:24:53,340 --> 00:24:59,789
max Gail and Max scale will then send

00:24:55,769 --> 00:25:03,259
all rights to the master and load

00:24:59,789 --> 00:25:05,940
balance all the reads to all the slaves

00:25:03,259 --> 00:25:07,470
and this is fairly easy so you would

00:25:05,940 --> 00:25:09,090
have two different connections basically

00:25:07,470 --> 00:25:11,309
max care what you would have is you

00:25:09,090 --> 00:25:13,289
would have two different listeners on

00:25:11,309 --> 00:25:18,480
different ports one will be for reads

00:25:13,289 --> 00:25:20,639
one would be free divides and it is

00:25:18,480 --> 00:25:22,230
fairly easy and this is Boost of course

00:25:20,639 --> 00:25:25,470
using collect connection load bars and

00:25:22,230 --> 00:25:27,359
so once you open a connection it will go

00:25:25,470 --> 00:25:29,600
to the same machine all queries in that

00:25:27,359 --> 00:25:29,600
connection

00:25:31,409 --> 00:25:38,259
if use the rewrites a split router you

00:25:35,859 --> 00:25:41,049
can use that as well it's already there

00:25:38,259 --> 00:25:42,609
so now the application only needs one

00:25:41,049 --> 00:25:44,529
connection instead of connection

00:25:42,609 --> 00:25:50,190
connecting to my SQL server it connects

00:25:44,529 --> 00:25:53,619
to max scale and using the read/write

00:25:50,190 --> 00:25:55,179
splitter router the max scale will free

00:25:53,619 --> 00:26:01,269
each query decide where it has to go to

00:25:55,179 --> 00:26:02,979
the master or to the slave so max k will

00:26:01,269 --> 00:26:07,149
have two connections open one for the

00:26:02,979 --> 00:26:08,639
master and one for a slave and depending

00:26:07,149 --> 00:26:13,319
on what queer you get it full

00:26:08,639 --> 00:26:15,849
intelligently decide where it goes and

00:26:13,319 --> 00:26:21,549
as I said this works well if you use if

00:26:15,849 --> 00:26:24,690
you use all you have to use we have to

00:26:21,549 --> 00:26:28,239
have been autocommit mode use single

00:26:24,690 --> 00:26:30,999
operation transactions but also things

00:26:28,239 --> 00:26:32,709
like store procedures we don't yet or

00:26:30,999 --> 00:26:34,479
would I don't know if we have a will but

00:26:32,709 --> 00:26:36,099
at the moment there's no logic in trying

00:26:34,479 --> 00:26:38,259
to see whether it's all procedures

00:26:36,099 --> 00:26:40,149
actually changing data all stored

00:26:38,259 --> 00:26:44,559
procedure calls will go to the master by

00:26:40,149 --> 00:26:46,179
default and things like that user

00:26:44,559 --> 00:26:48,249
defined variables already mentioned that

00:26:46,179 --> 00:26:50,919
mentioned that so we do deal with it if

00:26:48,249 --> 00:26:52,779
if you set a user defined variable max

00:26:50,919 --> 00:26:56,469
care will actually set this usually find

00:26:52,779 --> 00:26:58,869
variable on all the servers in this

00:26:56,469 --> 00:27:01,059
cluster so that you could actually use

00:26:58,869 --> 00:27:03,459
this if you do read later on you will

00:27:01,059 --> 00:27:06,539
actually read the same same value as you

00:27:03,459 --> 00:27:06,539
would read on the master

00:27:08,529 --> 00:27:15,409
so those two cases work with replication

00:27:11,059 --> 00:27:18,769
if you use a Guerrero cluster there's

00:27:15,409 --> 00:27:22,369
also two possibilities one is using

00:27:18,769 --> 00:27:23,749
connection based routing of course for

00:27:22,369 --> 00:27:26,929
those of you who don't know galere so in

00:27:23,749 --> 00:27:28,999
galera basically all nodes are

00:27:26,929 --> 00:27:34,609
synchronized so when you committed

00:27:28,999 --> 00:27:36,529
transaction the transaction will be you

00:27:34,609 --> 00:27:38,719
do all operations on one node and as you

00:27:36,529 --> 00:27:41,209
committed transaction the connection

00:27:38,719 --> 00:27:44,029
will be validated by all nodes in the

00:27:41,209 --> 00:27:45,469
cluster which basically means that all

00:27:44,029 --> 00:27:49,549
nodes in the cluster will always be in

00:27:45,469 --> 00:27:51,019
the same state so it doesn't matter

00:27:49,549 --> 00:27:52,309
where you're right and it doesn't matter

00:27:51,019 --> 00:27:58,789
where you read you always see the same

00:27:52,309 --> 00:28:00,499
data of course the one difference from

00:27:58,789 --> 00:28:01,759
this is when you put in the transaction

00:28:00,499 --> 00:28:03,619
you of course see the results of that

00:28:01,759 --> 00:28:07,219
transaction but that's the same already

00:28:03,619 --> 00:28:09,409
also with one note that makes it very

00:28:07,219 --> 00:28:12,079
easy for the routing because basically

00:28:09,409 --> 00:28:13,429
you can use connection based routing it

00:28:12,079 --> 00:28:15,709
doesn't matter where they read where

00:28:13,429 --> 00:28:17,059
they write you connect to Mexico Mexico

00:28:15,709 --> 00:28:18,799
we give a connection to one of the

00:28:17,059 --> 00:28:25,279
gallery nodes and you will use that

00:28:18,799 --> 00:28:27,019
color node now there is a potential

00:28:25,279 --> 00:28:31,069
slight problem with using clara in this

00:28:27,019 --> 00:28:33,229
way the regular does it is that it

00:28:31,069 --> 00:28:36,199
doesn't communicate the governor notes

00:28:33,229 --> 00:28:38,239
don't communicate until you commit right

00:28:36,199 --> 00:28:40,099
which is very good because it means that

00:28:38,239 --> 00:28:42,859
there's not a lot of network traffic you

00:28:40,099 --> 00:28:45,049
not bound by network latency is not a

00:28:42,859 --> 00:28:48,019
huge problem because you only have to do

00:28:45,049 --> 00:28:50,449
one communication across the nodes I'd

00:28:48,019 --> 00:28:55,190
commit the potential problem with this

00:28:50,449 --> 00:28:57,379
is that if you do use the same rows all

00:28:55,190 --> 00:28:59,809
the time you update the same rows all

00:28:57,379 --> 00:29:01,279
the time for some reason this means you

00:28:59,809 --> 00:29:03,619
can actually have conflicts you can be

00:29:01,279 --> 00:29:05,359
updating a row in this node and in this

00:29:03,619 --> 00:29:09,409
node and you won't know that until you

00:29:05,359 --> 00:29:11,169
commit and how the way Gaillard deals

00:29:09,409 --> 00:29:14,209
with this is that when you commit if

00:29:11,169 --> 00:29:16,399
this node was locked if the row is

00:29:14,209 --> 00:29:18,319
locked on another note transaction will

00:29:16,399 --> 00:29:20,090
be aborted so you get a transaction

00:29:18,319 --> 00:29:23,990
abort

00:29:20,090 --> 00:29:25,610
and well I mean in theory or application

00:29:23,990 --> 00:29:28,279
should deal with it and we'll redo the

00:29:25,610 --> 00:29:30,020
transaction or something but in some

00:29:28,279 --> 00:29:31,880
cases you might not want to have

00:29:30,020 --> 00:29:33,140
transactional boards I mean if this if

00:29:31,880 --> 00:29:34,220
you get a lot of these you probably

00:29:33,140 --> 00:29:36,890
don't want to have you want to do it

00:29:34,220 --> 00:29:38,029
somehow differently and you can with max

00:29:36,890 --> 00:29:41,659
scale so you can actually use the

00:29:38,029 --> 00:29:44,990
rewrites split router with with galera

00:29:41,659 --> 00:29:46,940
in which case max cable arbitrarily

00:29:44,990 --> 00:29:49,370
choose one of these galera notes as the

00:29:46,940 --> 00:29:52,429
master and all rights will go to this

00:29:49,370 --> 00:29:54,740
master and then the other two machines

00:29:52,429 --> 00:29:56,480
will be will be used for reads only this

00:29:54,740 --> 00:30:08,360
way you come you completely avoid the

00:29:56,480 --> 00:30:11,929
conflict problem because you only yes

00:30:08,360 --> 00:30:16,159
you can it right so the question was

00:30:11,929 --> 00:30:17,659
whether whether you can make all notes

00:30:16,159 --> 00:30:19,460
available for reads and not only the

00:30:17,659 --> 00:30:21,169
so-called slave nodes and the answer is

00:30:19,460 --> 00:30:24,230
yes you can have all nodes available for

00:30:21,169 --> 00:30:27,630
reads can you have like a standby no

00:30:24,230 --> 00:30:29,910
it's not dating traffic unless

00:30:27,630 --> 00:30:31,950
for instance like with clarity I want to

00:30:29,910 --> 00:30:33,360
know that we're going to put 500 miles

00:30:31,950 --> 00:30:36,330
away we don't want to send all the

00:30:33,360 --> 00:30:37,430
traffic there all the time but if the

00:30:36,330 --> 00:30:38,930
other notes going down

00:30:37,430 --> 00:30:40,760
so the question was where you can have

00:30:38,930 --> 00:30:43,580
one note as a standby node I mean the

00:30:40,760 --> 00:30:45,200
answer is yes you can because you when

00:30:43,580 --> 00:30:47,510
you set up the router you you choose

00:30:45,200 --> 00:30:49,700
which servers should be included in the

00:30:47,510 --> 00:30:51,800
routing so you can have not just not

00:30:49,700 --> 00:30:53,780
include a note in rudder the problem is

00:30:51,800 --> 00:30:55,220
that of course if it's part of glitter

00:30:53,780 --> 00:30:59,720
cluster all the rights will have to go

00:30:55,220 --> 00:31:02,120
there anyway so it does you know right

00:30:59,720 --> 00:31:03,620
so yeah so you can do that yes you can

00:31:02,120 --> 00:31:04,940
you can have a no that's in the

00:31:03,620 --> 00:31:14,360
classroom but you never use it for

00:31:04,940 --> 00:31:16,310
reading at all and these are kind of the

00:31:14,360 --> 00:31:18,920
four main use cases at the moment with

00:31:16,310 --> 00:31:21,620
the current features of max scale that

00:31:18,920 --> 00:31:25,190
you can have so using using the 2h a

00:31:21,620 --> 00:31:26,810
solution we support technically my max

00:31:25,190 --> 00:31:29,180
there can be using mysql cluster as well

00:31:26,810 --> 00:31:32,090
we only support collections through data

00:31:29,180 --> 00:31:33,890
nodes but as peter already said not a

00:31:32,090 --> 00:31:35,240
lot of people use my school clusters so

00:31:33,890 --> 00:31:37,550
i don't think that's going to be a lot

00:31:35,240 --> 00:31:41,140
of use case for that but technically it

00:31:37,550 --> 00:31:41,140
can be used with mysql cluster as well

00:31:42,970 --> 00:31:51,680
so how do you use how do you actually

00:31:45,740 --> 00:31:54,410
start using Mac scale so it's not the

00:31:51,680 --> 00:31:58,280
easiest thing to use actually to set up

00:31:54,410 --> 00:31:59,690
well you need to download it you untie

00:31:58,280 --> 00:32:03,500
it it's a tarball you can get it from

00:31:59,690 --> 00:32:07,010
our website it's a tarball you

00:32:03,500 --> 00:32:09,560
downloaded you untie it you get a

00:32:07,010 --> 00:32:11,960
director called max scale there's a Lib

00:32:09,560 --> 00:32:15,230
directory there's a max scale directory

00:32:11,960 --> 00:32:17,030
and these are actually important because

00:32:15,230 --> 00:32:20,750
you have to tell max scale where they

00:32:17,030 --> 00:32:24,680
are unfortunately so it's not usability

00:32:20,750 --> 00:32:26,270
it's not there yet it's an alpha so when

00:32:24,680 --> 00:32:28,490
you start max scale you have to give it

00:32:26,270 --> 00:32:31,130
the home directory max scale home and

00:32:28,490 --> 00:32:34,900
the lib direction which can be done with

00:32:31,130 --> 00:32:37,670
either variables or at the command line

00:32:34,900 --> 00:32:38,509
so you can have a set of max care home

00:32:37,670 --> 00:32:42,049
and

00:32:38,509 --> 00:32:43,729
LD library path typically if you don't

00:32:42,049 --> 00:32:51,440
set this you will have some errors when

00:32:43,729 --> 00:32:52,789
you start try starting it up after that

00:32:51,440 --> 00:32:55,190
max scale is running it's a demon

00:32:52,789 --> 00:32:58,909
process you don't need to interact with

00:32:55,190 --> 00:33:02,440
but the reason admin interface which is

00:32:58,909 --> 00:33:04,489
currently using telnet so perhaps not

00:33:02,440 --> 00:33:06,799
well that's what it is at the moment

00:33:04,489 --> 00:33:08,959
there's also an error log message log

00:33:06,799 --> 00:33:24,079
trace log and debug log you can look at

00:33:08,959 --> 00:33:26,239
when using max go so the question was

00:33:24,079 --> 00:33:29,419
whether there's any monitoring up like

00:33:26,239 --> 00:33:30,859
mysqld safe from max scale and no no

00:33:29,419 --> 00:33:33,440
there's nothing like that at the moment

00:33:30,859 --> 00:33:34,969
that's probably we should have something

00:33:33,440 --> 00:33:39,529
like that once we start getting it ready

00:33:34,969 --> 00:33:41,629
for GA it's a very good add-on but at

00:33:39,529 --> 00:33:49,669
the moment no if it crashes it crashes

00:33:41,629 --> 00:33:52,999
and you have to restart it right i mean

00:33:49,669 --> 00:33:56,299
yeah so the admin interface you get get

00:33:52,999 --> 00:34:01,549
through to telnet default port is no

00:33:56,299 --> 00:34:03,949
longer 444 how old is this Oh 0.4 so

00:34:01,549 --> 00:34:06,669
this is actually quite old but the

00:34:03,949 --> 00:34:11,210
default port is now four four four two

00:34:06,669 --> 00:34:13,129
so you turn it into into max scale you

00:34:11,210 --> 00:34:15,409
login as admin you get you have a set of

00:34:13,129 --> 00:34:16,759
commands and these have actually been

00:34:15,409 --> 00:34:21,589
consolidated a bit for the latest

00:34:16,759 --> 00:34:24,829
version but it's more fun if I share it

00:34:21,589 --> 00:34:26,359
to live which I will in a moment so

00:34:24,829 --> 00:34:31,159
let's look at the configuration of bits

00:34:26,359 --> 00:34:33,109
because that will give a I guess a

00:34:31,159 --> 00:34:36,980
better view of what you do how you set

00:34:33,109 --> 00:34:38,389
it up so I'm going to start in the

00:34:36,980 --> 00:34:41,119
backwards order because it makes more

00:34:38,389 --> 00:34:42,589
sense to me so what you need to set up

00:34:41,119 --> 00:34:44,210
in your configuration file is the

00:34:42,589 --> 00:34:49,250
servers right so we are in my escrow

00:34:44,210 --> 00:34:51,010
service here in this example they have

00:34:49,250 --> 00:34:54,070
five MySQL servers

00:34:51,010 --> 00:34:55,450
right type server the address to how to

00:34:54,070 --> 00:34:57,550
get to them which port they're running

00:34:55,450 --> 00:34:58,960
on protocol will be my escort for all of

00:34:57,550 --> 00:35:05,350
them which is the only protocol we have

00:34:58,960 --> 00:35:10,690
so you cannot skip the protocol you have

00:35:05,350 --> 00:35:12,900
to set it yeah again usability it's not

00:35:10,690 --> 00:35:16,720
been number one thing when doing this

00:35:12,900 --> 00:35:18,340
not yet at least so we have five servers

00:35:16,720 --> 00:35:23,350
you don't have to say whether you're a

00:35:18,340 --> 00:35:24,790
galera or or replication or anything

00:35:23,350 --> 00:35:27,580
like that here we just define the

00:35:24,790 --> 00:35:28,900
servers and later when you do the

00:35:27,580 --> 00:35:30,790
monitors and stuff that's when you

00:35:28,900 --> 00:35:37,930
define how if they're a galera or

00:35:30,790 --> 00:35:41,170
replication so that's the servers then

00:35:37,930 --> 00:35:42,460
you define monitors if you if you need

00:35:41,170 --> 00:35:45,610
want to monitor name which you typically

00:35:42,460 --> 00:35:49,330
do so you say the monitor here it's

00:35:45,610 --> 00:35:51,820
using my s cumin which is for mysql and

00:35:49,330 --> 00:35:53,830
replication so it doesn't rip a money

00:35:51,820 --> 00:35:58,420
for gallery as a separate monitor for

00:35:53,830 --> 00:36:00,100
Garko galera mon as you use all five

00:35:58,420 --> 00:36:02,110
servers are included here so all five

00:36:00,100 --> 00:36:06,220
service will be monitored by this module

00:36:02,110 --> 00:36:07,600
and you give give it a user ID and

00:36:06,220 --> 00:36:09,970
password so this is a user ID and

00:36:07,600 --> 00:36:12,370
password in the server so i can connect

00:36:09,970 --> 00:36:15,720
to the servers and undo show variables

00:36:12,370 --> 00:36:15,720
I've seen that certification

00:36:16,940 --> 00:36:23,160
it the same one checks both so he checks

00:36:21,570 --> 00:36:25,230
it checks whether the server is alive

00:36:23,160 --> 00:36:27,720
and if it's a sleigh it will also check

00:36:25,230 --> 00:36:38,040
whether it's a master or a slave and the

00:36:27,720 --> 00:36:49,560
slave lag so what to do if something is

00:36:38,040 --> 00:36:51,750
repped it does what what to do in case

00:36:49,560 --> 00:36:55,490
the replication lags is not defined in a

00:36:51,750 --> 00:36:58,470
monitor its defining the in the router

00:36:55,490 --> 00:37:00,540
so the monitor just monitors things in

00:36:58,470 --> 00:37:06,960
the router is where you decide what to

00:37:00,540 --> 00:37:09,020
do exactly so then you have the

00:37:06,960 --> 00:37:12,120
different routers that can be configured

00:37:09,020 --> 00:37:19,800
he's here's one readwrite split router

00:37:12,120 --> 00:37:22,050
for all servers there is an HTTP routers

00:37:19,800 --> 00:37:25,830
which is for testing there's the debug

00:37:22,050 --> 00:37:28,050
interface and that's it there's only

00:37:25,830 --> 00:37:29,700
basically only one real router it's a

00:37:28,050 --> 00:37:31,530
rate of a spirit router here in this

00:37:29,700 --> 00:37:35,220
configuration file but then you have to

00:37:31,530 --> 00:37:38,760
set up a listener as well which is the

00:37:35,220 --> 00:37:41,130
way in to connect to my mac scale so

00:37:38,760 --> 00:37:43,380
here we set up a listener which means

00:37:41,130 --> 00:37:45,240
that the clients can now connect to mac

00:37:43,380 --> 00:37:50,220
scale and when they connect the mac

00:37:45,240 --> 00:37:54,570
scale on port 40 for all the queries

00:37:50,220 --> 00:37:56,670
that come in here we will use the read

00:37:54,570 --> 00:38:00,080
write speed router to get routed to the

00:37:56,670 --> 00:38:00,080
actual servers

00:38:00,740 --> 00:38:06,800
and the other slide is that like the

00:38:03,410 --> 00:38:10,390
monomers username password or when what

00:38:06,800 --> 00:38:10,390
a client connects and they use their own

00:38:16,240 --> 00:38:21,200
so there's the question was about user

00:38:18,620 --> 00:38:23,210
username and password so the one I had

00:38:21,200 --> 00:38:25,640
here is solely for the monitor so you

00:38:23,210 --> 00:38:27,020
only need to give it whatever you need

00:38:25,640 --> 00:38:29,810
to monitor so it needs to be able to

00:38:27,020 --> 00:38:34,070
read the variables the status variables

00:38:29,810 --> 00:38:35,480
and when you connect the mac scale you

00:38:34,070 --> 00:38:39,350
have a username and a password and

00:38:35,480 --> 00:38:40,430
that's what get goes to the that's what

00:38:39,350 --> 00:38:42,500
goes to the backend server as well

00:38:40,430 --> 00:38:44,750
unless you do transformations with it

00:38:42,500 --> 00:38:46,370
which route through filters but

00:38:44,750 --> 00:38:49,100
typically you don't so basically if you

00:38:46,370 --> 00:38:52,670
log in as as as max you will log in as

00:38:49,100 --> 00:38:55,670
max to the to the underlying database as

00:38:52,670 --> 00:38:58,300
well and then what's used here give me

00:38:55,670 --> 00:38:58,300
something different

00:39:01,090 --> 00:39:07,300
and this is just what this is what the

00:39:03,100 --> 00:39:09,010
router uses to get the information and

00:39:07,300 --> 00:39:10,660
send information so again when you

00:39:09,010 --> 00:39:15,730
actually execute the query it won't be

00:39:10,660 --> 00:39:24,250
using this it will be using whatever you

00:39:15,730 --> 00:39:28,300
were using when you logged in right does

00:39:24,250 --> 00:39:32,770
it make sense all is clear you know how

00:39:28,300 --> 00:39:35,080
to use max kill all right so it's

00:39:32,770 --> 00:39:38,290
probably time for a demo and let's see

00:39:35,080 --> 00:39:39,730
how well this works fortunately there is

00:39:38,290 --> 00:39:50,290
a network cable here which helps me a

00:39:39,730 --> 00:39:53,950
lot I hope so what I have here is so I

00:39:50,290 --> 00:39:57,610
have a few servers running on on amazon

00:39:53,950 --> 00:39:59,640
can you see this or is it too small too

00:39:57,610 --> 00:39:59,640
small

00:40:04,720 --> 00:40:07,500
appearance

00:40:16,849 --> 00:40:21,039
I'll change the font some some of this

00:40:22,030 --> 00:40:27,570
better or you want us bigger

00:40:30,270 --> 00:40:41,100
ok I'll do it once more but then after

00:40:32,460 --> 00:40:44,000
that nothing will fit 14 right so

00:40:41,100 --> 00:40:47,550
basically what I have here is I have a

00:40:44,000 --> 00:40:51,720
running on a double yes i have three my

00:40:47,550 --> 00:40:54,320
echo servers let's just connect to them

00:40:51,720 --> 00:40:54,320
so you can

00:40:58,440 --> 00:41:00,500
uh

00:41:04,839 --> 00:41:17,309
yes and a very good root password so

00:41:10,539 --> 00:41:23,579
it's really be Timmy DB server it's a

00:41:17,309 --> 00:41:26,109
10-0 something 10 0 12 maria b 10 0 12

00:41:23,579 --> 00:41:27,849
so one of them is a master and to our

00:41:26,109 --> 00:41:35,410
slaves running replication so if you

00:41:27,849 --> 00:41:43,299
look at show slave status this guy's

00:41:35,410 --> 00:41:47,019
running as a slave he is up to date he's

00:41:43,299 --> 00:41:48,579
waiting for the master to send event you

00:41:47,019 --> 00:41:50,559
see everything you want to see about

00:41:48,579 --> 00:41:53,680
replication there's no active traffic

00:41:50,559 --> 00:41:56,529
going on here so you this won't move

00:41:53,680 --> 00:42:00,609
unless I do something from here so we

00:41:56,529 --> 00:42:06,059
have replication setup master server ID

00:42:00,609 --> 00:42:06,059
is one this guy has another server ID

00:42:09,539 --> 00:42:15,009
which is 11 and the other the other

00:42:13,479 --> 00:42:19,180
slave has 21 so there are different

00:42:15,009 --> 00:42:24,489
server IDs it's Maria db10 so there's

00:42:19,180 --> 00:42:29,710
this global transaction ID you can get

00:42:24,489 --> 00:42:31,210
status about from that here so they're

00:42:29,710 --> 00:42:34,930
all in the same domain which is the main

00:42:31,210 --> 00:42:37,359
0 you see the pin lock position on hand

00:42:34,930 --> 00:42:45,839
and where they are with the GTI DS as

00:42:37,359 --> 00:42:48,180
well where

00:42:45,839 --> 00:42:49,400
an output of Christmas no status their

00:42:48,180 --> 00:42:53,710
last time

00:42:49,400 --> 00:42:56,510
oh because it's not turned on its use it

00:42:53,710 --> 00:42:59,240
it's not using it for the slaves it's

00:42:56,510 --> 00:43:01,070
actually just G JD's are incrementing

00:42:59,240 --> 00:43:04,330
but it's actually not using it because I

00:43:01,070 --> 00:43:04,330
haven't spilled on

00:43:10,540 --> 00:43:14,200
but there are enrolled because they're

00:43:12,430 --> 00:43:18,040
on the same domain so they all have the

00:43:14,200 --> 00:43:19,060
same GID domain ID so if I would insert

00:43:18,040 --> 00:43:21,520
anything on the sleigh which will

00:43:19,060 --> 00:43:25,180
actually use the same increment

00:43:21,520 --> 00:43:30,990
increment the same number but what I

00:43:25,180 --> 00:43:35,710
wanted to show you was the variables

00:43:30,990 --> 00:43:36,940
like server the server audit plugin

00:43:35,710 --> 00:43:40,750
because that's what I'm going to use to

00:43:36,940 --> 00:43:44,860
share it traffic so I do all have this

00:43:40,750 --> 00:43:46,840
the more you DB audit plug-in on well

00:43:44,860 --> 00:43:47,710
it's install and it's on because this is

00:43:46,840 --> 00:43:49,630
what i'm going to use just to show you

00:43:47,710 --> 00:43:54,010
this what goes on on the machines right

00:43:49,630 --> 00:43:55,930
so there's the audit plugin table all

00:43:54,010 --> 00:43:57,580
queries and old table traffic i'm being

00:43:55,930 --> 00:43:59,010
monitored it goes to a file and that's

00:43:57,580 --> 00:44:06,070
what that's the file I'm going to tail

00:43:59,010 --> 00:44:08,470
in a moment I've excluded so so the max

00:44:06,070 --> 00:44:10,660
cam monitor monitors all the servers

00:44:08,470 --> 00:44:13,000
continuously since it sends queries to

00:44:10,660 --> 00:44:15,040
the monitor all the time and I've

00:44:13,000 --> 00:44:16,480
excluded the monitor from the query

00:44:15,040 --> 00:44:19,090
logging because otherwise you would you

00:44:16,480 --> 00:44:21,580
would get that in the in the audit file

00:44:19,090 --> 00:44:27,100
all the time so just to give you an idea

00:44:21,580 --> 00:44:35,110
what I'm doing right so that that's the

00:44:27,100 --> 00:44:37,500
servers then we have the mac scale

00:44:35,110 --> 00:44:37,500
server

00:44:39,720 --> 00:44:46,460
which is running also an Amazon of

00:44:41,640 --> 00:44:46,460
course I'll change the font on this too

00:44:53,080 --> 00:44:57,580
can actually see it yeah you can so here

00:44:56,380 --> 00:44:59,320
we have max scale running it's in a

00:44:57,580 --> 00:45:02,740
different service I've for for Amazon

00:44:59,320 --> 00:45:04,800
servers Mike skill is already running

00:45:02,740 --> 00:45:08,040
side I'm going to tell it into the

00:45:04,800 --> 00:45:08,040
Mexico server

00:45:13,950 --> 00:45:19,470
admin and the very secret password now

00:45:17,339 --> 00:45:21,900
min to max scale so now first thing to

00:45:19,470 --> 00:45:23,940
see is okay so are the servers there I

00:45:21,900 --> 00:45:28,109
do well we can do a help you get to see

00:45:23,940 --> 00:45:30,359
all the commands in max scale so the

00:45:28,109 --> 00:45:32,280
main commands for finding out stuff but

00:45:30,359 --> 00:45:34,470
what we have in here it's the least

00:45:32,280 --> 00:45:35,820
commands and the show commands right so

00:45:34,470 --> 00:45:37,440
with the least I get a list of the

00:45:35,820 --> 00:45:38,940
filters I can list the listeners the

00:45:37,440 --> 00:45:42,150
modules all different things that I have

00:45:38,940 --> 00:45:45,150
in my max scale and we'd sure I see the

00:45:42,150 --> 00:45:48,630
active thing so for example I'm going to

00:45:45,150 --> 00:45:50,609
start by doing show servers so I get a

00:45:48,630 --> 00:45:54,630
list of these three servers that are

00:45:50,609 --> 00:45:56,760
running so we have at this max scale

00:45:54,630 --> 00:45:58,200
figure out you don't set one is master

00:45:56,760 --> 00:46:00,510
this is slave market looks at them it's

00:45:58,200 --> 00:46:02,480
okay this is master this is the slave so

00:46:00,510 --> 00:46:05,369
we see the master is here it's running

00:46:02,480 --> 00:46:07,829
we get the node ID and how many

00:46:05,369 --> 00:46:09,150
connections and so forth we have a slave

00:46:07,829 --> 00:46:11,310
that's running and we have another slave

00:46:09,150 --> 00:46:17,070
that's running so three servers all

00:46:11,310 --> 00:46:18,660
right so all is good then to see how I

00:46:17,070 --> 00:46:24,290
configure my mac scale so these are the

00:46:18,660 --> 00:46:27,290
servers let's look at the the other

00:46:24,290 --> 00:46:27,290
routers

00:46:29,500 --> 00:46:32,500
show

00:46:35,610 --> 00:46:43,290
why can't I see them oh yeah because

00:46:37,440 --> 00:46:44,790
it's called it's called listeners so

00:46:43,290 --> 00:46:49,950
here we see the listeners that i have

00:46:44,790 --> 00:46:53,190
installed here so i have a read white

00:46:49,950 --> 00:46:56,760
spirit router which is running on port

00:46:53,190 --> 00:46:59,640
406 and on a socket file i have a read

00:46:56,760 --> 00:47:05,400
connection router running on port 408

00:46:59,640 --> 00:47:07,620
and in a socket file then i have a

00:47:05,400 --> 00:47:11,370
another read right router where I've

00:47:07,620 --> 00:47:14,520
added a filter to filters actually and

00:47:11,370 --> 00:47:18,000
then the debug interface and HTTP router

00:47:14,520 --> 00:47:22,470
which I want to use so basically if I

00:47:18,000 --> 00:47:25,020
connect now 22 port 406 I will use the

00:47:22,470 --> 00:47:27,620
read/write spit router right and it

00:47:25,020 --> 00:47:29,580
should direct my queries according to

00:47:27,620 --> 00:47:34,590
according to this that's what I'm going

00:47:29,580 --> 00:47:38,730
to do in my first first demo so I'm

00:47:34,590 --> 00:47:40,230
going to start by putting these up okay

00:47:38,730 --> 00:47:45,120
well you won't be able to see the

00:47:40,230 --> 00:47:46,170
details but I actually don't care it

00:47:45,120 --> 00:47:48,420
doesn't matter that you don't see the

00:47:46,170 --> 00:47:53,220
details here so this is basically I'm

00:47:48,420 --> 00:47:55,620
tailing the the audit logging logs here

00:47:53,220 --> 00:47:59,220
so this up here is the master and these

00:47:55,620 --> 00:48:00,660
are two slaves and nothing is being

00:47:59,220 --> 00:48:03,570
added because nothing is happening on

00:48:00,660 --> 00:48:09,780
the machines right so it's just a tale

00:48:03,570 --> 00:48:16,640
of the three then if I open this let's

00:48:09,780 --> 00:48:16,640
open the window I open this window

00:48:18,400 --> 00:48:29,559
I have a mysql slap come on here I'm

00:48:27,099 --> 00:48:31,799
login as a test users repeat I mean you

00:48:29,559 --> 00:48:34,270
can see what i'm logging in as a using a

00:48:31,799 --> 00:48:35,950
test account which has full access to

00:48:34,270 --> 00:48:38,260
everything so I'm running my let's go

00:48:35,950 --> 00:48:40,450
slap auto generate SQL so it will it

00:48:38,260 --> 00:48:42,279
will create queries insert queries it

00:48:40,450 --> 00:48:44,799
will create select queries and so forth

00:48:42,279 --> 00:48:49,299
and this should start generating traffic

00:48:44,799 --> 00:48:52,660
on on the master all the right question

00:48:49,299 --> 00:48:58,799
go to master and the requires to a slave

00:48:52,660 --> 00:49:00,970
so let's see how that works ready go

00:48:58,799 --> 00:49:06,250
okay we see a lot of traffic on the

00:49:00,970 --> 00:49:08,529
master if you look closer yeah it's only

00:49:06,250 --> 00:49:10,690
inserts well I don't know if you could

00:49:08,529 --> 00:49:16,329
see that but it's basically all of these

00:49:10,690 --> 00:49:20,200
queries are inserts or or updates it

00:49:16,329 --> 00:49:24,069
looks like the slave only got weed

00:49:20,200 --> 00:49:26,109
queries kind of series or not the thing

00:49:24,069 --> 00:49:27,849
here is it it says read it says query

00:49:26,109 --> 00:49:32,170
and select so it's only read stuff would

00:49:27,849 --> 00:49:34,779
go to the slave I might have done a

00:49:32,170 --> 00:49:36,549
rotation actually it stopped it stopped

00:49:34,779 --> 00:49:39,789
producing stuff so I think the law got

00:49:36,549 --> 00:49:44,619
rotate rotate it but here we see the

00:49:39,789 --> 00:49:46,680
result was that proof do you all believe

00:49:44,619 --> 00:49:46,680
that

00:49:47,520 --> 00:49:52,510
so the read/write splitter works in that

00:49:50,890 --> 00:49:55,540
innocence okay here of course I'm doing

00:49:52,510 --> 00:49:57,220
very simple queries by mysql slap but

00:49:55,540 --> 00:49:59,980
but if your course Ted if you should

00:49:57,220 --> 00:50:01,330
test it with something else I get some

00:49:59,980 --> 00:50:03,040
statistics here but you know you don't

00:50:01,330 --> 00:50:07,680
care about these statistics running on

00:50:03,040 --> 00:50:12,400
amazon and all that stuff but it works

00:50:07,680 --> 00:50:23,140
so let's do something different i also

00:50:12,400 --> 00:50:25,690
have a read i have a read connector here

00:50:23,140 --> 00:50:30,400
so let's use that and see just single

00:50:25,690 --> 00:50:38,650
query so user local mysql been my ass

00:50:30,400 --> 00:50:42,120
crown this user big test I let's do some

00:50:38,650 --> 00:50:42,120
oh yeah what was the host

00:50:47,820 --> 00:50:51,510
so now the reed slab is using the

00:50:50,010 --> 00:50:54,630
read/write spitter now if I'm go to the

00:50:51,510 --> 00:50:57,420
read the connection query it's on four

00:50:54,630 --> 00:51:05,190
thousand eight and I'll just do some

00:50:57,420 --> 00:51:11,880
silly query like select star from world

00:51:05,190 --> 00:51:16,110
the test ok so this query should go to

00:51:11,880 --> 00:51:18,290
one of the slaves right and you can see

00:51:16,110 --> 00:51:19,920
it went to this slide behind here I

00:51:18,290 --> 00:51:22,560
don't know if you can see the actual

00:51:19,920 --> 00:51:24,900
query but it's actually there and if I

00:51:22,560 --> 00:51:28,860
run it again well it should go to one of

00:51:24,900 --> 00:51:31,620
the slaves it went the same style a nice

00:51:28,860 --> 00:51:34,020
went to the other slave so basically the

00:51:31,620 --> 00:51:35,550
load balancer here actually uses a

00:51:34,020 --> 00:51:37,680
connection count when you use a

00:51:35,550 --> 00:51:38,970
connection load balancer so it actually

00:51:37,680 --> 00:51:43,250
keeps track of how many connections

00:51:38,970 --> 00:51:48,030
we've had to each slave and basically

00:51:43,250 --> 00:51:49,830
keeps them even so you can see every

00:51:48,030 --> 00:51:51,360
second should approximately go to one

00:51:49,830 --> 00:51:55,620
and every second should go to the other

00:51:51,360 --> 00:51:58,620
which is what you can see here and this

00:51:55,620 --> 00:52:00,900
is if you look at the status here in

00:51:58,620 --> 00:52:03,660
this in Mac scale when it did show

00:52:00,900 --> 00:52:05,160
servers you can see that it keeps track

00:52:03,660 --> 00:52:08,070
of the connections you had to each

00:52:05,160 --> 00:52:10,800
machine so you have 1662 connections to

00:52:08,070 --> 00:52:12,240
the master and you have 88 and 89 to the

00:52:10,800 --> 00:52:16,530
two slaves so that's what I think about

00:52:12,240 --> 00:52:17,970
it uses for load balancing this is the

00:52:16,530 --> 00:52:21,230
read/write splitting with statement and

00:52:17,970 --> 00:52:21,230
this one is connection writing

00:52:24,890 --> 00:52:31,790
when you have say an application that

00:52:27,420 --> 00:52:31,790
isn't very nice nice

00:52:34,750 --> 00:52:39,650
so

00:52:37,150 --> 00:52:41,630
Red's I guess

00:52:39,650 --> 00:52:46,299
share the

00:52:41,630 --> 00:52:46,299
listen or compaq scale and Max Kellerman

00:52:47,380 --> 00:52:54,309
that's not done currently no so the

00:52:51,099 --> 00:52:56,259
question is whether whether when you

00:52:54,309 --> 00:52:57,369
have an application that opens lots of

00:52:56,259 --> 00:52:59,529
connections whether there's some kind of

00:52:57,369 --> 00:53:02,440
connection pooling inside Mac scale to

00:52:59,529 --> 00:53:04,720
to not open connections so the answer is

00:53:02,440 --> 00:53:12,250
no there's no at the moment there's

00:53:04,720 --> 00:53:13,420
nothing Yeah right actually I can show

00:53:12,250 --> 00:53:20,049
you one more example I forgot to hide

00:53:13,420 --> 00:53:26,589
the filters here as well so so let's log

00:53:20,049 --> 00:53:28,269
into mysql so i had the the read/write

00:53:26,589 --> 00:53:31,569
splitting with filters is running on

00:53:28,269 --> 00:53:33,849
port for 10 so i'll look into mysql can

00:53:31,569 --> 00:53:41,579
you see this actually i forgot the

00:53:33,849 --> 00:53:41,579
changes i'll make this bigger

00:53:45,230 --> 00:53:53,900
so okay this window away so now i'm

00:53:49,430 --> 00:53:57,140
logged in I'm log into mysql but i'm

00:53:53,900 --> 00:53:59,420
actually logged to max scale and not to

00:53:57,140 --> 00:54:01,190
not to mysql server so the client thinks

00:53:59,420 --> 00:54:04,070
it's logged into to mysql but it's

00:54:01,190 --> 00:54:06,619
logged into Mexico right so if s in the

00:54:04,070 --> 00:54:13,630
query where it goes well depends on what

00:54:06,619 --> 00:54:18,770
type of query I send so if i do show a

00:54:13,630 --> 00:54:25,160
variables like server ID which will tell

00:54:18,770 --> 00:54:29,050
me which server i'm actually on a Hoopoe

00:54:25,160 --> 00:54:29,050
change the course is good

00:54:48,380 --> 00:54:51,250
there we go

00:54:56,700 --> 00:55:05,190
I get a 120 121 one so depending on

00:55:03,599 --> 00:55:08,490
where it sends a query I'll get

00:55:05,190 --> 00:55:12,170
different answers right because i'm

00:55:08,490 --> 00:55:20,460
using the read/write splitter if you

00:55:12,170 --> 00:55:22,050
randomly put them different there what

00:55:20,460 --> 00:55:23,730
they want oh yeah so here i'm actually

00:55:22,050 --> 00:55:25,880
using a filter we haven't seen it yet

00:55:23,730 --> 00:55:29,010
because I haven't actually I have a reg

00:55:25,880 --> 00:55:30,060
filter running here we haven't seen it

00:55:29,010 --> 00:55:36,710
because I haven't done a queer that

00:55:30,060 --> 00:55:48,589
would use it so let's I do this select

00:55:36,710 --> 00:55:52,230
star from test who noticed anything

00:55:48,589 --> 00:55:54,720
that's my reg ex filter so I have a

00:55:52,230 --> 00:55:56,849
regular if i misspell from it actually

00:55:54,720 --> 00:56:05,339
to form will actually change it back to

00:55:56,849 --> 00:56:07,589
front so it actually here you can see

00:56:05,339 --> 00:56:11,130
the actual query is changed from test

00:56:07,589 --> 00:56:12,420
here but actually I have two filters

00:56:11,130 --> 00:56:15,920
here so actually have another one so if

00:56:12,420 --> 00:56:15,920
you do a crate table

00:56:20,640 --> 00:56:31,559
something like this and i say type

00:56:24,980 --> 00:56:35,490
equals my eyes are no it won't change

00:56:31,559 --> 00:56:38,099
IMDb i could do that but actually type

00:56:35,490 --> 00:56:43,980
type is no longer valid syntax starting

00:56:38,099 --> 00:56:45,299
with 555 site has to the engine and I

00:56:43,980 --> 00:56:52,410
don't have that filter running

00:56:45,299 --> 00:56:54,269
apparently oh so I can't use it I have

00:56:52,410 --> 00:56:56,519
the filter loaded but I probably didn't

00:56:54,269 --> 00:56:57,809
I could have to reload the configuration

00:56:56,519 --> 00:57:05,519
and I get running so I can't show this

00:56:57,809 --> 00:57:09,319
to so if you used so we have three

00:57:05,519 --> 00:57:11,369
filters that are included so we have the

00:57:09,319 --> 00:57:13,049
connection counting filter statement

00:57:11,369 --> 00:57:14,910
segment coming filter the logging filter

00:57:13,049 --> 00:57:17,250
and a reg ex filter so if you use these

00:57:14,910 --> 00:57:20,720
three it's not see I can actually show

00:57:17,250 --> 00:57:20,720
it to have my configuration file here

00:57:20,960 --> 00:57:28,559
it's yeah it's you can use a reg ex and

00:57:24,480 --> 00:57:30,390
it's very very simple I mean fritos very

00:57:28,559 --> 00:57:32,099
simple because it's one word but but you

00:57:30,390 --> 00:57:35,160
can actually have a reg ex you say much

00:57:32,099 --> 00:57:39,750
and what you would replace it with and

00:57:35,160 --> 00:57:44,410
that's very very easy to do no I'm lost

00:57:39,750 --> 00:57:46,920
here too many windows

00:57:44,410 --> 00:57:46,920
hey

00:57:50,730 --> 00:57:54,980
okay here let's do a

00:58:06,480 --> 00:58:14,960
of this their own machine to win too

00:58:09,750 --> 00:58:14,960
many windows where's my mask a machine

00:58:19,520 --> 00:58:25,510
this one

00:58:21,140 --> 00:58:28,010
yes this is the Mexico machine so here

00:58:25,510 --> 00:58:30,250
if I look at the my max go configuration

00:58:28,010 --> 00:58:30,250
file

00:58:41,850 --> 00:58:48,120
chin here are my two filters leggies

00:58:44,460 --> 00:58:50,850
filters type much type change engine max

00:58:48,120 --> 00:58:55,220
much form-change to from so it's

00:58:50,850 --> 00:58:55,220
extremely simple to use records filters

00:58:56,240 --> 00:59:01,590
it will know form everywhere yes so so

00:59:00,420 --> 00:59:03,060
everywhere time we have for me if you

00:59:01,590 --> 00:59:05,250
change it from so you might not want to

00:59:03,060 --> 00:59:07,110
use the filter this simple normally but

00:59:05,250 --> 00:59:12,780
this is just for demonstration purposes

00:59:07,110 --> 00:59:19,730
everything it just does reg ex much yes

00:59:12,780 --> 00:59:19,730
so anywhere its case insensitive yes

00:59:23,150 --> 00:59:26,520
yeah and you would if you really want to

00:59:25,290 --> 00:59:28,170
do this properly you would need to you

00:59:26,520 --> 00:59:29,430
will not want to have spaces there and

00:59:28,170 --> 00:59:30,990
you cannot you can say that it has to be

00:59:29,430 --> 00:59:37,680
in a select and I mean you can you can

00:59:30,990 --> 00:59:39,240
make a proper reg xsplit you know yes we

00:59:37,680 --> 00:59:42,000
have a parser so the question is whether

00:59:39,240 --> 00:59:46,370
we have a parson and we do have a parser

00:59:42,000 --> 00:59:50,370
the kind of the mysql parser since cases

00:59:46,370 --> 00:59:53,190
getting in your art say i want to change

00:59:50,370 --> 00:59:56,810
they both

00:59:53,190 --> 00:59:56,810
you know that's the table ass

00:59:57,620 --> 01:00:02,460
you can do it but not with you probably

01:00:01,140 --> 01:00:04,230
one you want to if you want to do

01:00:02,460 --> 01:00:05,730
something like this you probably want to

01:00:04,230 --> 01:00:07,230
have a more complex filter which you

01:00:05,730 --> 01:00:09,390
don't have yet you would have to wait

01:00:07,230 --> 01:00:11,820
until I drove right see or wait until we

01:00:09,390 --> 01:00:14,400
produce it so we only have these three

01:00:11,820 --> 01:00:16,110
at the moments of you know youporn I'm

01:00:14,400 --> 01:00:28,680
gonna use a regular filter for that but

01:00:16,110 --> 01:00:29,670
you can do it yes no so the question was

01:00:28,680 --> 01:00:31,830
whether you want to change the

01:00:29,670 --> 01:00:33,600
configuration do you have to restart Mac

01:00:31,830 --> 01:00:37,650
scale the answer is no you can

01:00:33,600 --> 01:00:39,600
dynamically if you look at help there's

01:00:37,650 --> 01:00:40,920
a command for reload configuration you

01:00:39,600 --> 01:00:46,320
change the configuration file and then

01:00:40,920 --> 01:00:54,530
you do reload config and it dynamically

01:00:46,320 --> 01:00:57,720
reloads the configuration file so

01:00:54,530 --> 01:00:59,790
whether it is the syntax syntax check

01:00:57,720 --> 01:01:01,560
knows a Mac scale actually if you have a

01:00:59,790 --> 01:01:04,920
syntax error in your configuration file

01:01:01,560 --> 01:01:07,650
Mexico just ignores it so so it doesn't

01:01:04,920 --> 01:01:08,820
I used to work with my scope cluster in

01:01:07,650 --> 01:01:11,550
the early days you had a syntax error

01:01:08,820 --> 01:01:13,680
your cluster wouldn't run I mean the

01:01:11,550 --> 01:01:15,420
different startup and here he just

01:01:13,680 --> 01:01:20,130
ignores it the syndicate or just ignores

01:01:15,420 --> 01:01:24,540
it so it's all better in the error log

01:01:20,130 --> 01:01:25,980
yeah I think I'm running out of time so

01:01:24,540 --> 01:01:28,650
I'm going to switch back to my slides

01:01:25,980 --> 01:01:31,940
and say that it's time for questions but

01:01:28,650 --> 01:01:31,940
we don't have time for them

01:01:32,400 --> 01:01:36,210
right so I just want to show you this

01:01:34,140 --> 01:01:37,740
slide so if you want to get involved max

01:01:36,210 --> 01:01:42,870
carries a github you can download from

01:01:37,740 --> 01:01:45,600
our website there's a source code you

01:01:42,870 --> 01:01:50,000
can report bugs I just reported one this

01:01:45,600 --> 01:01:53,760
morning and that's a Google Group and

01:01:50,000 --> 01:01:55,170
that's about it all right now we have

01:01:53,760 --> 01:01:57,470
time for questions if you still have any

01:01:55,170 --> 01:01:57,470
more questions

01:02:09,910 --> 01:02:13,610
yeah so the question is where we can

01:02:11,960 --> 01:02:17,000
remote from max gasps and there's two

01:02:13,610 --> 01:02:18,950
answers one is you can already do it but

01:02:17,000 --> 01:02:21,770
there's no communication between them

01:02:18,950 --> 01:02:23,300
and we're definitely looking at looking

01:02:21,770 --> 01:02:24,050
at doing that that's what you would like

01:02:23,300 --> 01:02:25,310
to have is you won't have a

01:02:24,050 --> 01:02:26,960
communication between the max keiser

01:02:25,310 --> 01:02:28,280
this state you can have a state

01:02:26,960 --> 01:02:30,050
transfers between the max gasps that's

01:02:28,280 --> 01:02:32,060
and that's what there isn't yet and you

01:02:30,050 --> 01:02:35,060
could have to max scales and it would

01:02:32,060 --> 01:02:37,550
work but there wouldn't be any you know

01:02:35,060 --> 01:02:39,050
if you have some state something going

01:02:37,550 --> 01:02:42,170
on in 1 mux Kelly's wouldn't show in the

01:02:39,050 --> 01:02:47,230
other but we're definitely looking at

01:02:42,170 --> 01:02:47,230
that yes any other questions

01:02:51,869 --> 01:02:55,109
what's the benefit of using max scale

01:02:53,490 --> 01:02:56,559
versus a hardware little valves are like

01:02:55,109 --> 01:03:00,109
an f5

01:02:56,559 --> 01:03:05,119
well the one is the filters and then so

01:03:00,109 --> 01:03:07,700
the intelligence in in in the routing I

01:03:05,119 --> 01:03:09,289
mean max scale is specifically both from

01:03:07,700 --> 01:03:12,769
MySQL right but they might be smarter is

01:03:09,289 --> 01:03:14,329
out there are as well but yeah that's

01:03:12,769 --> 01:03:18,049
that's one thing we specifically built

01:03:14,329 --> 01:03:19,970
for mysql so so the monitors are built

01:03:18,049 --> 01:03:22,099
from mysql replication galera we do the

01:03:19,970 --> 01:03:24,589
check that it's actually synced & stuff

01:03:22,099 --> 01:03:27,470
we have the authentication which perhaps

01:03:24,589 --> 01:03:29,750
is not so useful yet but as we add

01:03:27,470 --> 01:03:32,150
features about that so we have the you

01:03:29,750 --> 01:03:33,470
know we using the mysql parser which

01:03:32,150 --> 01:03:35,960
with filtering that to be very useful

01:03:33,470 --> 01:03:38,630
when we start when we expand the

01:03:35,960 --> 01:03:39,859
filtering more because we do we can

01:03:38,630 --> 01:03:41,539
actually pass the query so you can

01:03:39,859 --> 01:03:43,940
actually use that when you filtered

01:03:41,539 --> 01:03:47,119
stuff so for example i mean here we used

01:03:43,940 --> 01:03:48,829
to reg ex but for example Peter had an

01:03:47,119 --> 01:03:49,819
example about changing table names or

01:03:48,829 --> 01:03:51,829
something like that so you can actually

01:03:49,819 --> 01:03:53,240
say okay I want the thing that's been

01:03:51,829 --> 01:03:55,339
parts as tables and I want to do

01:03:53,240 --> 01:03:59,869
something with that sand again and that

01:03:55,339 --> 01:04:03,410
you can use so it will be a much more

01:03:59,869 --> 01:04:07,339
intelligent greater than most and it is

01:04:03,410 --> 01:04:10,220
already I mean we use use H a proxy a

01:04:07,339 --> 01:04:11,900
lot for example and HR proxy would glare

01:04:10,220 --> 01:04:13,250
you have to patch it because it doesn't

01:04:11,900 --> 01:04:14,930
check that there actually sink to know

01:04:13,250 --> 01:04:17,529
so that always very small thing like

01:04:14,930 --> 01:04:17,529
that

01:04:21,930 --> 01:04:26,799
what was your primary objective when we

01:04:25,539 --> 01:04:28,599
started out like what was the one thing

01:04:26,799 --> 01:04:33,009
says we need something there's little

01:04:28,599 --> 01:04:34,959
boys I mean it's so why did we start

01:04:33,009 --> 01:04:37,719
doing this I mean it was customer needs

01:04:34,959 --> 01:04:40,569
yes we had so many multiple customers

01:04:37,719 --> 01:04:43,359
kind of having very similar needs so we

01:04:40,569 --> 01:04:45,459
started building it and you know it

01:04:43,359 --> 01:04:47,469
started going one direction we change

01:04:45,459 --> 01:04:49,029
the bit so it's you know it's taken

01:04:47,469 --> 01:04:51,009
longer than we wanted we thought would

01:04:49,029 --> 01:04:53,109
have more features done let me want and

01:04:51,009 --> 01:05:00,219
all that stuff but customer needs is

01:04:53,109 --> 01:05:02,619
basically where it came from number one

01:05:00,219 --> 01:05:04,900
was the transparent handle handling of

01:05:02,619 --> 01:05:07,029
failures and things like that so you

01:05:04,900 --> 01:05:08,709
have a replication here you don't want

01:05:07,029 --> 01:05:11,130
to have your you don't want to have your

01:05:08,709 --> 01:05:13,779
applications ever application-aware or

01:05:11,130 --> 01:05:17,170
you know if you do take things out of

01:05:13,779 --> 01:05:18,969
the class two runs things I mean and

01:05:17,170 --> 01:05:20,289
especially with Clara and with other

01:05:18,969 --> 01:05:22,180
features every time we talked about a

01:05:20,289 --> 01:05:24,489
devil acts and what about customers be

01:05:22,180 --> 01:05:28,029
okay great then how do you load barnwell

01:05:24,489 --> 01:05:30,249
well you put a VIP in play you do

01:05:28,029 --> 01:05:32,789
something else and do so there's clearly

01:05:30,249 --> 01:05:32,789
Aeneas

01:05:36,040 --> 01:05:41,910
I guess we're done well if you're

01:05:38,440 --> 01:05:45,070
interested in knowing more about this or

01:05:41,910 --> 01:05:47,410
becoming beta testers we have a booth

01:05:45,070 --> 01:05:58,960
you can ask me or Craig or anyone else

01:05:47,410 --> 01:06:01,240
about it thank you your customers rely

01:05:58,960 --> 01:06:03,460
on your website or application if it's

01:06:01,240 --> 01:06:06,820
slower non-responsive it infuriates your

01:06:03,460 --> 01:06:08,620
users and costs you money keeping your

01:06:06,820 --> 01:06:12,140
business critical systems humming along

01:06:08,620 --> 01:06:14,450
requires insight into what they're doing

01:06:12,140 --> 01:06:16,400
your system metrics tells stories

01:06:14,450 --> 01:06:18,410
stories that can reveal performance

01:06:16,400 --> 01:06:20,750
bottlenecks resource limitations and

01:06:18,410 --> 01:06:22,310
other problems but how do you keep an

01:06:20,750 --> 01:06:24,950
eye on all of your systems performance

01:06:22,310 --> 01:06:28,010
metrics in real-time and record this

01:06:24,950 --> 01:06:29,750
data for later analysis enter longview

01:06:28,010 --> 01:06:31,760
the new way to see what's really going

01:06:29,750 --> 01:06:33,920
on under the hood the long view

01:06:31,760 --> 01:06:35,990
dashboard lets you visualize the status

01:06:33,920 --> 01:06:38,450
of all your systems providing you with a

01:06:35,990 --> 01:06:41,810
bird's-eye view of your entire fleet you

01:06:38,450 --> 01:06:44,390
can sort by cpu memory swap processes

01:06:41,810 --> 01:06:46,160
load and network usage click a specific

01:06:44,390 --> 01:06:48,560
system to access its individual

01:06:46,160 --> 01:06:51,070
dashboard then click and drag to zoom in

01:06:48,560 --> 01:06:53,480
on chokepoints and get more detail

01:06:51,070 --> 01:06:55,160
comprehensive network data including

01:06:53,480 --> 01:06:57,470
inbound and outbound traffic is

01:06:55,160 --> 01:06:59,030
available on the network tab and disk

01:06:57,470 --> 01:07:00,950
rights and free space on the disk

01:06:59,030 --> 01:07:03,800
stabbed while the process Explorer

01:07:00,950 --> 01:07:06,320
displays usage statistics for individual

01:07:03,800 --> 01:07:08,510
processes the system info tab shows

01:07:06,320 --> 01:07:10,730
listening services active connections

01:07:08,510 --> 01:07:12,860
and available updates adding long view

01:07:10,730 --> 01:07:14,570
to a system is easy just click the

01:07:12,860 --> 01:07:16,700
button copy the one line installation

01:07:14,570 --> 01:07:19,160
command then run the command on your

01:07:16,700 --> 01:07:20,870
linux system to complete the process the

01:07:19,160 --> 01:07:23,030
agent will begin collecting data and

01:07:20,870 --> 01:07:24,890
sending it to longview then the graph

01:07:23,030 --> 01:07:27,440
start rolling

01:07:24,890 --> 01:07:29,810
use longview to gain visibility into

01:07:27,440 --> 01:07:33,550
your servers so when your website or app

01:07:29,810 --> 01:07:33,550

YouTube URL: https://www.youtube.com/watch?v=b095eZE0gwY


