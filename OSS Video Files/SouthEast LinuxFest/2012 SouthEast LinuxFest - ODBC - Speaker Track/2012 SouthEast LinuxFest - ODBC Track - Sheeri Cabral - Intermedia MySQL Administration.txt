Title: 2012 SouthEast LinuxFest - ODBC Track - Sheeri Cabral - Intermedia MySQL Administration
Publication date: 2013-04-08
Playlist: 2012 SouthEast LinuxFest - ODBC - Speaker Track
Description: 
	2012 SouthEast LinuxFest
Open Database Camp Speaker Track
Sheeri Cabral
Intermedia MySQL Administration
Captions: 
	00:00:00,000 --> 00:00:05,279
the following presentation was recorded

00:00:02,490 --> 00:00:08,040
the 2012 southeast linux fest in

00:00:05,279 --> 00:00:10,410
charlotte north carolina it is licensed

00:00:08,040 --> 00:00:12,090
under a creative commons license for

00:00:10,410 --> 00:00:16,859
more information about the southeast

00:00:12,090 --> 00:00:19,230
linux fest visit www.lend expense org

00:00:16,859 --> 00:00:21,320
the southeast linux fest would like to

00:00:19,230 --> 00:00:23,279
thank the following diamond sponsors in

00:00:21,320 --> 00:00:28,890
2012 for helping make these videos

00:00:23,279 --> 00:00:40,140
possible for the addition to sharing the

00:00:28,890 --> 00:00:42,809
rough and she stood hello if you want to

00:00:40,140 --> 00:00:45,000
you know download the slides they're

00:00:42,809 --> 00:00:47,160
here it's the QR code will download the

00:00:45,000 --> 00:00:51,480
slides and also they're on a have a

00:00:47,160 --> 00:00:53,760
short bit ly link as I was introduced I

00:00:51,480 --> 00:00:55,860
work for Mozilla I have sheer com is

00:00:53,760 --> 00:00:58,469
where I keep my blogs and my thoughts at

00:00:55,860 --> 00:01:01,050
shiri if you want to tweet about me so

00:00:58,469 --> 00:01:02,510
that's really all of an intro I need so

00:01:01,050 --> 00:01:04,290
one thing about intermediate

00:01:02,510 --> 00:01:05,640
administration you know I figure you

00:01:04,290 --> 00:01:08,580
kind of know the basics how are you all

00:01:05,640 --> 00:01:10,170
here actually use MySQL right now most

00:01:08,580 --> 00:01:13,470
of you okay and how many are just

00:01:10,170 --> 00:01:16,680
thinking about using it but don't okay

00:01:13,470 --> 00:01:19,200
hmm just personal use okay you're still

00:01:16,680 --> 00:01:20,670
using it so one of the most important

00:01:19,200 --> 00:01:22,290
tenants is if you don't plan to fail you

00:01:20,670 --> 00:01:25,710
fail to plan and hunts a great cliquish

00:01:22,290 --> 00:01:28,290
a ball basically in the content in this

00:01:25,710 --> 00:01:30,000
context what I mean is plan that

00:01:28,290 --> 00:01:31,409
everything is going to fail what happens

00:01:30,000 --> 00:01:32,729
if a machine fails because you say well

00:01:31,409 --> 00:01:34,950
let's let's do the best high

00:01:32,729 --> 00:01:37,290
availability architecture whatever but

00:01:34,950 --> 00:01:39,329
like you know at some point in time that

00:01:37,290 --> 00:01:41,040
one machine is going to fail so how are

00:01:39,329 --> 00:01:43,409
you going to plan your your architecture

00:01:41,040 --> 00:01:44,820
around that practice failover and switch

00:01:43,409 --> 00:01:46,799
over there's a lot of really cool new

00:01:44,820 --> 00:01:49,500
tools coming out for like online alter

00:01:46,799 --> 00:01:52,200
table in mysql but i've been in my SQL

00:01:49,500 --> 00:01:54,720
DBA for many many years and one of the

00:01:52,200 --> 00:01:56,369
cool things the benefits of having the

00:01:54,720 --> 00:01:58,079
the offline alter table when you add a

00:01:56,369 --> 00:01:59,460
column you need to take it offline or

00:01:58,079 --> 00:02:01,079
whatever is that you come up with these

00:01:59,460 --> 00:02:02,399
great we're done in architectures you

00:02:01,079 --> 00:02:04,259
can do these rolling upgrades because we

00:02:02,399 --> 00:02:05,909
had to so you come up okay you do a

00:02:04,259 --> 00:02:07,350
slave and then you upgrade this slave

00:02:05,909 --> 00:02:08,580
and then you put it back in the mix and

00:02:07,350 --> 00:02:10,530
then take another slave and then all

00:02:08,580 --> 00:02:11,580
your slaves are done and you promote one

00:02:10,530 --> 00:02:13,500
slave to a master and you do

00:02:11,580 --> 00:02:14,760
that and that's a great fire drill

00:02:13,500 --> 00:02:16,590
because if you keep doing that if you do

00:02:14,760 --> 00:02:17,700
that once every month or two because

00:02:16,590 --> 00:02:19,260
you're you're doing some maintenance

00:02:17,700 --> 00:02:21,360
when you have to do at three in the

00:02:19,260 --> 00:02:23,490
morning once a year you've already done

00:02:21,360 --> 00:02:25,110
it because you had your fire drill so

00:02:23,490 --> 00:02:26,520
offline maintenance while you know it's

00:02:25,110 --> 00:02:28,200
kind of a bad thing and we're kind of

00:02:26,520 --> 00:02:29,780
getting away from that which is actually

00:02:28,200 --> 00:02:32,010
good they were getting away from it

00:02:29,780 --> 00:02:34,290
don't forget to do your fire drills and

00:02:32,010 --> 00:02:35,910
that's really important so get

00:02:34,290 --> 00:02:37,620
ridiculous when you're talking about

00:02:35,910 --> 00:02:39,960
failover right you're even what happens

00:02:37,620 --> 00:02:41,730
if the machine fails and what happens if

00:02:39,960 --> 00:02:42,870
the switch fails the switch failing is

00:02:41,730 --> 00:02:44,640
actually really important people don't

00:02:42,870 --> 00:02:46,680
think about like in that one rack what

00:02:44,640 --> 00:02:48,060
about that switch failing he they put

00:02:46,680 --> 00:02:49,290
their two machines in the same rack and

00:02:48,060 --> 00:02:51,150
the switch fails and they don't know

00:02:49,290 --> 00:02:53,070
what to do what happens if dns fails

00:02:51,150 --> 00:02:55,110
what happens if the whole data center

00:02:53,070 --> 00:02:56,940
fails okay you have to data center the

00:02:55,110 --> 00:02:58,440
two data centers fail what happens if

00:02:56,940 --> 00:03:00,420
aliens come out like they do an

00:02:58,440 --> 00:03:02,280
Independence Day and they like shoot

00:03:00,420 --> 00:03:04,230
down New York and LA and that happens to

00:03:02,280 --> 00:03:05,550
be where your data centers are and let

00:03:04,230 --> 00:03:06,900
the title of the slightest get

00:03:05,550 --> 00:03:09,000
ridiculous because the point is it's

00:03:06,900 --> 00:03:10,320
like load testing right somewhere in low

00:03:09,000 --> 00:03:13,230
tell you don't load test to be like well

00:03:10,320 --> 00:03:14,700
can we handle 10,000 users no you load

00:03:13,230 --> 00:03:16,830
test you're like when does this fall

00:03:14,700 --> 00:03:18,750
over I want to make it fall over is it

00:03:16,830 --> 00:03:20,430
10,000 is a hundred thousand you don't

00:03:18,750 --> 00:03:23,040
just stop at 10,000 you look to see when

00:03:20,430 --> 00:03:25,230
it falls over the same thing with high

00:03:23,040 --> 00:03:26,430
availability at some point your boss can

00:03:25,230 --> 00:03:28,980
look at you like that's just ridiculous

00:03:26,430 --> 00:03:31,350
we just have to take that risk you know

00:03:28,980 --> 00:03:33,690
if your amazon.com and you lose all the

00:03:31,350 --> 00:03:35,130
orders for a whole day you're going to

00:03:33,690 --> 00:03:36,450
think we can't do that lose all the

00:03:35,130 --> 00:03:38,250
orders for a whole day that's a lot of

00:03:36,450 --> 00:03:39,510
people mad at us but you know what if

00:03:38,250 --> 00:03:41,880
that day was September eleventh two

00:03:39,510 --> 00:03:44,550
thousand eleven 2001 people are going to

00:03:41,880 --> 00:03:46,110
forgive you one of the one of the weird

00:03:44,550 --> 00:03:47,940
things about being in the cloud is

00:03:46,110 --> 00:03:50,070
whenever like amazon's cloud has an

00:03:47,940 --> 00:03:52,440
outage everybody kind of understands

00:03:50,070 --> 00:03:54,090
like oh your website was down and no no

00:03:52,440 --> 00:03:56,310
wonder it was the amazon cloud outage

00:03:54,090 --> 00:03:57,959
okay lots of websites were down but if

00:03:56,310 --> 00:03:59,310
you're just down and like there's

00:03:57,959 --> 00:04:01,980
nothing else related people like why's

00:03:59,310 --> 00:04:04,170
your website down so it's kind of funny

00:04:01,980 --> 00:04:05,790
that that you could even go I would

00:04:04,170 --> 00:04:07,380
actually venture to say you actually

00:04:05,790 --> 00:04:09,810
would get more forgiveness going to a

00:04:07,380 --> 00:04:11,370
less reliable service let's say you had

00:04:09,810 --> 00:04:12,570
metrics that said amazon was less

00:04:11,370 --> 00:04:14,519
reliable and something you could build

00:04:12,570 --> 00:04:16,140
you actually get more forgiveness from

00:04:14,519 --> 00:04:17,640
users because they understand it's it's

00:04:16,140 --> 00:04:20,220
a context and it's an event that they

00:04:17,640 --> 00:04:21,630
understand more so anyway what happens

00:04:20,220 --> 00:04:23,789
if the entire back in network fails

00:04:21,630 --> 00:04:25,500
again some at some point your boss to be

00:04:23,789 --> 00:04:27,000
like that's ridiculous well that's the

00:04:25,500 --> 00:04:30,930
you're going to take and you have to

00:04:27,000 --> 00:04:32,550
take those risks knowingly so let's talk

00:04:30,930 --> 00:04:34,530
a little about hardware what's what

00:04:32,550 --> 00:04:38,580
heart what should i buy to put my MySQL

00:04:34,530 --> 00:04:40,860
on well basically i would say 64-bit

00:04:38,580 --> 00:04:43,500
hardware one thing about mysql is that

00:04:40,860 --> 00:04:46,290
is a single threaded process and that's

00:04:43,500 --> 00:04:48,330
the mysql demon the server itself now

00:04:46,290 --> 00:04:51,000
that means is that if you're on a 32-bit

00:04:48,330 --> 00:04:54,150
architecture you can use about two point

00:04:51,000 --> 00:04:55,710
four gigs of ram before mysql can't use

00:04:54,150 --> 00:04:58,560
any more ram so you could have like a

00:04:55,710 --> 00:05:00,300
32-bit system with 64 gigabytes of ram

00:04:58,560 --> 00:05:04,230
and my skills only gonna use about 2.4

00:05:00,300 --> 00:05:06,510
of it so use 30 64-bit ram you'll get

00:05:04,230 --> 00:05:09,180
you use the 64-bit architecture and

00:05:06,510 --> 00:05:11,160
you'll end hopefully a 64-bit mysql

00:05:09,180 --> 00:05:14,669
package and you'll actually get the most

00:05:11,160 --> 00:05:16,710
out of your machine the you want to use

00:05:14,669 --> 00:05:19,140
as much ram as you can as much memory

00:05:16,710 --> 00:05:21,030
because my skill is heavily uses memory

00:05:19,140 --> 00:05:23,190
if it can't use the memory it has to go

00:05:21,030 --> 00:05:27,240
to disk and disk is slower than memory

00:05:23,190 --> 00:05:28,919
for the most part so I advise getting as

00:05:27,240 --> 00:05:30,780
much RAM as possible how much ram do you

00:05:28,919 --> 00:05:32,850
want what's your working data set your

00:05:30,780 --> 00:05:34,710
entire database might be 500 gigabytes

00:05:32,850 --> 00:05:37,110
but how much is being used at one point

00:05:34,710 --> 00:05:39,030
in time is it a hundred Meg's is it 50

00:05:37,110 --> 00:05:41,820
gigs you know you want to get as much

00:05:39,030 --> 00:05:44,640
RAM as possible if you have a 10k

00:05:41,820 --> 00:05:46,470
database you don't need a lot of RAM or

00:05:44,640 --> 00:05:47,970
you know even you know a lot of people

00:05:46,470 --> 00:05:50,430
have something like a 40 gigabyte

00:05:47,970 --> 00:05:53,040
database that's great but you're working

00:05:50,430 --> 00:05:55,229
data set is probably about maybe 10 gigs

00:05:53,040 --> 00:05:56,490
right how much is really active and

00:05:55,229 --> 00:06:00,210
coming in and out of the buffers at all

00:05:56,490 --> 00:06:02,070
times and I o disk i/o this is usually

00:06:00,210 --> 00:06:04,350
the bottleneck is some kind of either

00:06:02,070 --> 00:06:06,540
network latency or disk i/o with MySQL

00:06:04,350 --> 00:06:09,270
so you want to think about what's going

00:06:06,540 --> 00:06:11,160
to get you the fastest I oh and how

00:06:09,270 --> 00:06:13,680
you're really going to manage that

00:06:11,160 --> 00:06:15,510
effectively so I have a little thing but

00:06:13,680 --> 00:06:18,360
right here has everyone seen this by the

00:06:15,510 --> 00:06:19,650
way this is kind of awesome it's all

00:06:18,360 --> 00:06:21,479
rights reserved so I'm probably not

00:06:19,650 --> 00:06:23,250
actually allowed to show it and its URL

00:06:21,479 --> 00:06:25,320
is down there but it's what rate is

00:06:23,250 --> 00:06:26,729
explained by water cooler so the one all

00:06:25,320 --> 00:06:28,500
the way left to stand alone that's not

00:06:26,729 --> 00:06:30,210
no right at all the second one is

00:06:28,500 --> 00:06:31,229
cluster the third one is hot swap so you

00:06:30,210 --> 00:06:32,550
can see like the water then they

00:06:31,229 --> 00:06:33,630
actually just change the water bottle

00:06:32,550 --> 00:06:36,240
here so that was kind of funny but

00:06:33,630 --> 00:06:38,250
anyway so raid 0 over here is actually

00:06:36,240 --> 00:06:38,610
pretty cool it's it's two bottles on top

00:06:38,250 --> 00:06:41,009
of each

00:06:38,610 --> 00:06:43,650
as you can see that that is striped not

00:06:41,009 --> 00:06:45,120
mirrored you guys are all Linux people

00:06:43,650 --> 00:06:47,520
so I'm assuming that most of you are

00:06:45,120 --> 00:06:49,080
most of your system administrators yeah

00:06:47,520 --> 00:06:50,759
so i probably don't display this too

00:06:49,080 --> 00:06:52,560
much but for me I'm like I don't know

00:06:50,759 --> 00:06:55,919
what they say with our raid 0 or raid 10

00:06:52,560 --> 00:06:58,020
what's that so that's striped you could

00:06:55,919 --> 00:07:00,330
see the raid 1 is mirrored raid 5 you

00:06:58,020 --> 00:07:02,009
take three or three or more disks and

00:07:00,330 --> 00:07:04,020
you combine them together and then raid

00:07:02,009 --> 00:07:05,819
0+1 as you get fifty percent of your

00:07:04,020 --> 00:07:08,250
capacity but you get the striping in the

00:07:05,819 --> 00:07:13,020
mirror and and it's just a really good

00:07:08,250 --> 00:07:15,990
diagram and so MySQL the company used to

00:07:13,020 --> 00:07:18,569
recommend raid 5 I think they still do I

00:07:15,990 --> 00:07:21,020
think you can get away with raid one if

00:07:18,569 --> 00:07:23,879
you really wanted two disks just a cheap

00:07:21,020 --> 00:07:25,340
servers are cheap with things like the

00:07:23,879 --> 00:07:27,930
cloud you can spin up another server

00:07:25,340 --> 00:07:29,639
disks are pretty reliable these days

00:07:27,930 --> 00:07:31,409
unless you're using you know a non

00:07:29,639 --> 00:07:34,770
journal file system like if you want to

00:07:31,409 --> 00:07:35,969
use ext4 I've seen a lot of corruption

00:07:34,770 --> 00:07:37,349
on that like use it for like a day and

00:07:35,969 --> 00:07:39,870
it gets corrupted but if you're using

00:07:37,349 --> 00:07:41,550
ext3 or some kind of journal file system

00:07:39,870 --> 00:07:43,979
they're pretty reliable they're not

00:07:41,550 --> 00:07:46,199
going to fail it often and so I would

00:07:43,979 --> 00:07:47,819
say you know use whatever you want but

00:07:46,199 --> 00:07:50,250
remember like if you're if you're

00:07:47,819 --> 00:07:52,349
thinking okay this is going to die let's

00:07:50,250 --> 00:07:54,300
say once a year your your disk is going

00:07:52,349 --> 00:07:56,250
to have a data corruption once a year

00:07:54,300 --> 00:07:57,930
well is it a big deal once a year to add

00:07:56,250 --> 00:08:01,020
another slave and take that disk out and

00:07:57,930 --> 00:08:02,789
reformat it not really and when you make

00:08:01,020 --> 00:08:04,770
that new slave and you reformat the old

00:08:02,789 --> 00:08:06,000
hard drive make a new slave you get to

00:08:04,770 --> 00:08:09,319
test your backups because you're

00:08:06,000 --> 00:08:11,729
restoring it so it's a good exercise a

00:08:09,319 --> 00:08:13,789
raid note you want if you are going to

00:08:11,729 --> 00:08:16,139
use a raid controller you want to get a

00:08:13,789 --> 00:08:17,759
grade control that has a battery back to

00:08:16,139 --> 00:08:20,279
write cache for both performance and

00:08:17,759 --> 00:08:21,810
safety so if the power gets shut down

00:08:20,279 --> 00:08:24,180
it's going to have that battery back to

00:08:21,810 --> 00:08:26,219
write cache to still finish writing that

00:08:24,180 --> 00:08:28,110
transaction and in fact my spell is not

00:08:26,219 --> 00:08:30,750
going to be fully transactional unless

00:08:28,110 --> 00:08:32,310
you have your disk has battery back to

00:08:30,750 --> 00:08:34,769
write cache another note about raid

00:08:32,310 --> 00:08:38,190
don't have that on next slide I don't I

00:08:34,769 --> 00:08:39,659
don't know about rate is that your raid

00:08:38,190 --> 00:08:42,779
controller is still your single point of

00:08:39,659 --> 00:08:44,190
failure so as far as I know correct me

00:08:42,779 --> 00:08:46,649
from wrong raise your hand and tell me

00:08:44,190 --> 00:08:48,329
as far as I know raid control are still

00:08:46,649 --> 00:08:50,290
single point of failure is there a way

00:08:48,329 --> 00:09:01,089
to get redundant raid controllers

00:08:50,290 --> 00:09:04,029
no yeah so the common is you can get

00:09:01,089 --> 00:09:05,350
basically mirrored raid controllers but

00:09:04,029 --> 00:09:06,730
is that is that easy to do or is that

00:09:05,350 --> 00:09:12,190
like you have something sticking out of

00:09:06,730 --> 00:09:13,329
hardware kind of thing or okay you got

00:09:12,190 --> 00:09:15,819
to throw money at it's kind of expensive

00:09:13,329 --> 00:09:17,139
okay so yeah it's not a standard feature

00:09:15,819 --> 00:09:18,759
but you but it can be done so that's

00:09:17,139 --> 00:09:20,800
good so yeah if you're getting a if

00:09:18,759 --> 00:09:22,870
you're getting raid get the expensive

00:09:20,800 --> 00:09:25,149
not single point of failure get your

00:09:22,870 --> 00:09:27,880
mirrored of caches what about SSDs

00:09:25,149 --> 00:09:29,560
they're definitely a valid choice people

00:09:27,880 --> 00:09:31,180
like well they were liable with all the

00:09:29,560 --> 00:09:32,290
rights and everything because I heard

00:09:31,180 --> 00:09:34,240
that you can't write to it too many

00:09:32,290 --> 00:09:36,550
times these days SSDs are pretty

00:09:34,240 --> 00:09:39,100
reliable assuming of course you have

00:09:36,550 --> 00:09:40,720
power loss data protection so that it

00:09:39,100 --> 00:09:43,899
will again it's kind of like your

00:09:40,720 --> 00:09:45,940
battery back droid cash on your disk but

00:09:43,899 --> 00:09:47,560
one of the things is you know I don't

00:09:45,940 --> 00:09:49,329
know about you guys apparently I'm kind

00:09:47,560 --> 00:09:50,949
of old school I didn't think I was that

00:09:49,329 --> 00:09:53,470
old school but apparently I am since I

00:09:50,949 --> 00:09:56,980
given hips talk I was one of the only

00:09:53,470 --> 00:09:59,470
few people who knew how to use ed we

00:09:56,980 --> 00:10:01,000
kind of grew up on you know you want to

00:09:59,470 --> 00:10:02,589
you want sequential write sequential

00:10:01,000 --> 00:10:04,089
writes really good because the disk head

00:10:02,589 --> 00:10:05,529
is spinning and so you don't want it to

00:10:04,089 --> 00:10:07,750
spin to you don't want to have to travel

00:10:05,529 --> 00:10:09,550
too far you know what the head of the

00:10:07,750 --> 00:10:11,620
platter I guess what it is spinning too

00:10:09,550 --> 00:10:13,180
far so if you have like a sequential log

00:10:11,620 --> 00:10:15,970
file you want to put that on like a

00:10:13,180 --> 00:10:17,350
separate disk than your data because you

00:10:15,970 --> 00:10:18,730
know this will just right here and your

00:10:17,350 --> 00:10:20,980
data your head is going back and forth

00:10:18,730 --> 00:10:21,819
and back and forth that's not going to

00:10:20,980 --> 00:10:24,569
be something you have to worry about

00:10:21,819 --> 00:10:27,160
with solid state disks because they are

00:10:24,569 --> 00:10:29,470
you know memory base hatch base so it

00:10:27,160 --> 00:10:31,329
takes just as long you know it's still

00:10:29,470 --> 00:10:32,740
owe event to retrieve one record in one

00:10:31,329 --> 00:10:33,880
record it doesn't matter if they're

00:10:32,740 --> 00:10:37,060
sequential because they're not actually

00:10:33,880 --> 00:10:38,410
spent shell on disk so just think about

00:10:37,060 --> 00:10:41,019
what you're doing and I would say

00:10:38,410 --> 00:10:44,100
benchmark your application because minus

00:10:41,019 --> 00:10:46,689
kill uses be trees for for internal

00:10:44,100 --> 00:10:49,720
structures for the most part for default

00:10:46,689 --> 00:10:51,519
tables both my I so many no debe use it

00:10:49,720 --> 00:10:54,970
as default for their tables and for

00:10:51,519 --> 00:10:56,350
their indexes so be trees work really

00:10:54,970 --> 00:10:57,730
well with range queries and all that

00:10:56,350 --> 00:11:00,459
kind of stuff works really really well

00:10:57,730 --> 00:11:01,470
with spinning disks so just check your

00:11:00,459 --> 00:11:03,600
assumptions and kind

00:11:01,470 --> 00:11:06,060
think about like lower level all the way

00:11:03,600 --> 00:11:07,980
down what's going what's happening and

00:11:06,060 --> 00:11:09,300
really or don't think about it and just

00:11:07,980 --> 00:11:11,160
benchmark and say does it work better

00:11:09,300 --> 00:11:16,280
for my application it either does or

00:11:11,160 --> 00:11:19,140
doesn't sorry my husband is texting me

00:11:16,280 --> 00:11:21,090
so I just well it's it will keep going

00:11:19,140 --> 00:11:25,700
if I if I don't actually look at it so

00:11:21,090 --> 00:11:29,520
anyway partitions so file partitioning

00:11:25,700 --> 00:11:33,530
temp and RAM disk if by default mysql

00:11:29,520 --> 00:11:36,450
uses / temp as its temporary file holder

00:11:33,530 --> 00:11:39,360
you should change that or if it's a ram

00:11:36,450 --> 00:11:40,380
disk or not use you can change the

00:11:39,360 --> 00:11:42,390
parameter late i'll show you how to

00:11:40,380 --> 00:11:45,810
change the parameter later because what

00:11:42,390 --> 00:11:48,180
happens is it you know it can be removed

00:11:45,810 --> 00:11:50,400
any time so you don't want to have the

00:11:48,180 --> 00:11:51,930
problem where replications going and

00:11:50,400 --> 00:11:54,480
it's loading in a big file and it's

00:11:51,930 --> 00:11:56,760
using the temporary files and then you

00:11:54,480 --> 00:11:58,830
know just dies because the file was

00:11:56,760 --> 00:12:00,570
removed by the file system and what

00:11:58,830 --> 00:12:02,070
happens if your partition fills look at

00:12:00,570 --> 00:12:04,080
all your partitions if this provision

00:12:02,070 --> 00:12:06,090
feels what happens if your logs

00:12:04,080 --> 00:12:07,560
partition if you do separate your data

00:12:06,090 --> 00:12:10,320
and your logs or wherever your data are

00:12:07,560 --> 00:12:13,110
and your logs are if those partitions

00:12:10,320 --> 00:12:14,760
fill or if it's one partition my school

00:12:13,110 --> 00:12:17,250
just sits there Hanks it's just gonna

00:12:14,760 --> 00:12:20,220
hang it doesn't oh I can't can't write

00:12:17,250 --> 00:12:22,620
that log okay I'll wait till I can okay

00:12:20,220 --> 00:12:24,360
i still can't write that log okay but my

00:12:22,620 --> 00:12:26,100
skills still kind of like active and you

00:12:24,360 --> 00:12:28,230
might you may be able to still make like

00:12:26,100 --> 00:12:30,420
a connection to mysql but you'll never

00:12:28,230 --> 00:12:31,590
leave your connection because you'll try

00:12:30,420 --> 00:12:33,930
to do something you'll just sit there

00:12:31,590 --> 00:12:35,070
and hang so you know be very careful

00:12:33,930 --> 00:12:36,990
make sure you're monitoring your disk

00:12:35,070 --> 00:12:38,700
and all that kind of stuff where do you

00:12:36,990 --> 00:12:40,710
put your data versus your logs versus

00:12:38,700 --> 00:12:42,240
your backups your logs are actually your

00:12:40,710 --> 00:12:44,580
incremental backups so if you have some

00:12:42,240 --> 00:12:46,100
kind of policy where your data is in one

00:12:44,580 --> 00:12:48,540
place and your backups are in another

00:12:46,100 --> 00:12:49,830
you know for just safety if they're on

00:12:48,540 --> 00:12:51,480
different disks or something so if one

00:12:49,830 --> 00:12:53,130
disc dies you still have your backups I

00:12:51,480 --> 00:12:54,750
know we're talking about local disk so

00:12:53,130 --> 00:12:56,280
backups don't necessarily go there but

00:12:54,750 --> 00:12:58,470
some people have these kind of policies

00:12:56,280 --> 00:13:00,570
in place think about where they're going

00:12:58,470 --> 00:13:03,480
and just note that if you are backing up

00:13:00,570 --> 00:13:07,380
by doing an lvm snapshot it doesn't work

00:13:03,480 --> 00:13:09,990
across more than one partition so if you

00:13:07,380 --> 00:13:10,960
had say your logs and your data and you

00:13:09,990 --> 00:13:12,280
want it and they weren't

00:13:10,960 --> 00:13:14,290
partitions you are the snapshot them

00:13:12,280 --> 00:13:16,240
together you know there's going to be a

00:13:14,290 --> 00:13:18,400
split second actually actual difference

00:13:16,240 --> 00:13:19,810
I don't know if that's does that how is

00:13:18,400 --> 00:13:22,630
that how most snapshotting works with

00:13:19,810 --> 00:13:24,910
ZFS also and Amazon ec2 does anyone know

00:13:22,630 --> 00:13:26,710
I don't know if it's a property of

00:13:24,910 --> 00:13:46,450
snapshotting in general or lvm and

00:13:26,710 --> 00:13:48,100
specific so the answer is maybe right so

00:13:46,450 --> 00:13:51,610
Z so so it does seem like that

00:13:48,100 --> 00:13:53,800
specifically as an lvm limitation it's

00:13:51,610 --> 00:13:55,510
not necessarily a ZFS limitation but it

00:13:53,800 --> 00:13:57,700
could be depending on how you set up ZFS

00:13:55,510 --> 00:13:59,140
okay so let's talk about some linux

00:13:57,700 --> 00:14:01,690
operating system tuning I'm only talk

00:13:59,140 --> 00:14:03,820
about linux since it's linux fest sois

00:14:01,690 --> 00:14:06,010
penis so sloppiness is like gas in your

00:14:03,820 --> 00:14:07,810
car when do you fill up gas in your car

00:14:06,010 --> 00:14:09,700
do you fill up gas in your car when it

00:14:07,810 --> 00:14:11,410
gets to a quarter tank when it gets to

00:14:09,700 --> 00:14:13,930
like an eighth of a tank when the light

00:14:11,410 --> 00:14:15,760
goes on like five minutes after you've

00:14:13,930 --> 00:14:17,470
ran out of gas you call triple-a that's

00:14:15,760 --> 00:14:19,840
what sloppiness is swapping this is when

00:14:17,470 --> 00:14:21,160
should I swap my files should I swap it

00:14:19,840 --> 00:14:23,410
when I'm like starting to get low on

00:14:21,160 --> 00:14:24,880
available memory or sure like like do it

00:14:23,410 --> 00:14:26,950
like when I've run out of available

00:14:24,880 --> 00:14:28,510
memory so a swap eNOS of zero is like

00:14:26,950 --> 00:14:31,500
when you have no more is more memory

00:14:28,510 --> 00:14:33,430
then swap swapping is a lot of overhead

00:14:31,500 --> 00:14:35,050
hopefully you're not running anything

00:14:33,430 --> 00:14:37,300
else on your mysql server like you're

00:14:35,050 --> 00:14:39,250
not running java or something on your

00:14:37,300 --> 00:14:41,410
mysql server you're separating those

00:14:39,250 --> 00:14:42,970
services out so assuming that's the case

00:14:41,410 --> 00:14:44,800
you know you want to set sloppiness as

00:14:42,970 --> 00:14:46,300
low as possible because you only want

00:14:44,800 --> 00:14:51,910
swapping to happen if it's actually

00:14:46,300 --> 00:14:52,930
needed so so yeah as for open files you

00:14:51,910 --> 00:14:55,060
know you want to make sure you have you

00:14:52,930 --> 00:14:58,030
have open files limit is unlimited as

00:14:55,060 --> 00:15:00,040
the root user the reason and that's

00:14:58,030 --> 00:15:02,290
usually by default the reason for this

00:15:00,040 --> 00:15:04,450
is that you don't run mysql demon is

00:15:02,290 --> 00:15:06,730
root but you run the rapper demon called

00:15:04,450 --> 00:15:09,010
mysqld safe as root and what that does

00:15:06,730 --> 00:15:11,230
is it checks like every so often make

00:15:09,010 --> 00:15:13,510
sure my SQL running if mysql demons not

00:15:11,230 --> 00:15:15,820
running it starts again so what it does

00:15:13,510 --> 00:15:18,250
is it Forks off and it actually runs the

00:15:15,820 --> 00:15:20,610
MySQL demon as the mysql user but

00:15:18,250 --> 00:15:22,889
because it forked it off the minus field

00:15:20,610 --> 00:15:25,049
process inherits the

00:15:22,889 --> 00:15:27,779
limit from the parents so that's how you

00:15:25,049 --> 00:15:29,309
kind of get the unlimited you limit but

00:15:27,779 --> 00:15:32,579
also have the security of not running

00:15:29,309 --> 00:15:34,949
his route in the linux 2.6 Colonel you

00:15:32,579 --> 00:15:36,389
have an io scheduler choice it's not

00:15:34,949 --> 00:15:37,589
just the elevator scheduler I think

00:15:36,389 --> 00:15:39,869
that's sort of a call before and like

00:15:37,589 --> 00:15:41,879
2.4 and below there are a bunch of

00:15:39,869 --> 00:15:43,769
different i/o schedulers there isn't

00:15:41,879 --> 00:15:46,439
like one recommendation like oh this one

00:15:43,769 --> 00:15:48,169
will always be the best but if you want

00:15:46,439 --> 00:15:52,589
to play with that kind of level of i/o

00:15:48,169 --> 00:15:54,419
you know I Oh working with IO then just

00:15:52,589 --> 00:15:55,679
test it because there's you know

00:15:54,419 --> 00:15:58,619
different workloads will have a

00:15:55,679 --> 00:16:01,230
different best io scheduler under linux

00:15:58,619 --> 00:16:02,399
and just other damon's that's just a

00:16:01,230 --> 00:16:03,660
note to be like are you running

00:16:02,399 --> 00:16:06,540
something else are you running like your

00:16:03,660 --> 00:16:08,160
web server on your mysql server if you

00:16:06,540 --> 00:16:09,540
are then some of these tuning variables

00:16:08,160 --> 00:16:11,459
might be a little different and usually

00:16:09,540 --> 00:16:12,569
that's not recommended there are some

00:16:11,459 --> 00:16:14,579
cases in which you would do it for

00:16:12,569 --> 00:16:15,929
example for security reasons if you

00:16:14,579 --> 00:16:17,160
wanted your database on the same machine

00:16:15,929 --> 00:16:19,079
as the web server because you didn't

00:16:17,160 --> 00:16:20,639
want your database to be exposed you

00:16:19,079 --> 00:16:22,679
didn't want it to even listen on TCP at

00:16:20,639 --> 00:16:26,389
all for example you might do that so

00:16:22,679 --> 00:16:26,389
it's a valid reason for doing that yep

00:16:36,120 --> 00:16:40,200
guess wat een is set above zero you're

00:16:38,430 --> 00:16:42,330
over commits nothing actually gets

00:16:40,200 --> 00:16:44,339
written to swap but it can convince the

00:16:42,330 --> 00:16:47,570
car would commit the swap instead of

00:16:44,339 --> 00:16:51,150
pushing I own cash out of swabia 70

00:16:47,570 --> 00:16:53,730
right so the comment was if you have

00:16:51,150 --> 00:16:55,230
several demons running on the machine

00:16:53,730 --> 00:16:57,600
you don't want to set swapping a solo

00:16:55,230 --> 00:17:02,730
because that will give you a lot more

00:16:57,600 --> 00:17:04,740
overhead so mysql replication a mysql

00:17:02,730 --> 00:17:06,870
replication is a two threaded process

00:17:04,740 --> 00:17:09,600
what happens is you have the master it's

00:17:06,870 --> 00:17:11,189
a pulled from slave so when you have a

00:17:09,600 --> 00:17:12,569
master it's not like i'm the master i'm

00:17:11,189 --> 00:17:15,750
going to tell you the slave what to do

00:17:12,569 --> 00:17:17,309
now the master logs it's changelog to

00:17:15,750 --> 00:17:19,679
the binary log so any inserts updates

00:17:17,309 --> 00:17:21,240
leads many transactions that might

00:17:19,679 --> 00:17:23,790
contain any that kind of stuff are

00:17:21,240 --> 00:17:26,160
logged to the binary log binary meaning

00:17:23,790 --> 00:17:27,390
having a change there's a lot of

00:17:26,160 --> 00:17:30,750
different meanings of the word binary in

00:17:27,390 --> 00:17:32,850
MySQL anyway so it's a binary log it's a

00:17:30,750 --> 00:17:34,830
changelog so the master logs the binary

00:17:32,850 --> 00:17:36,920
log which are also your incremental

00:17:34,830 --> 00:17:39,690
backups because they're your changelog

00:17:36,920 --> 00:17:41,670
the slit as slave comes around how do

00:17:39,690 --> 00:17:43,790
you say something as master slave you go

00:17:41,670 --> 00:17:47,730
on another mysql server and you say you

00:17:43,790 --> 00:17:49,620
you go look at this person this server

00:17:47,730 --> 00:17:50,850
over here and get their binary logs and

00:17:49,620 --> 00:17:53,640
you're going to so it's pull from slave

00:17:50,850 --> 00:17:55,770
you can figure it on the slave the

00:17:53,640 --> 00:17:56,940
master doesn't you know it doesn't have

00:17:55,770 --> 00:17:58,830
to be aware at all there are ways you

00:17:56,940 --> 00:18:00,240
can make master aware but there's really

00:17:58,830 --> 00:18:02,190
no awareness of the master so it's a

00:18:00,240 --> 00:18:04,650
pull from slave and there's two threads

00:18:02,190 --> 00:18:07,860
on the slave one thread connects from

00:18:04,650 --> 00:18:09,900
the slave to the master on port 3306 so

00:18:07,860 --> 00:18:12,480
using a mysql user and all that kind of

00:18:09,900 --> 00:18:14,400
stuff on port 3306 and says you know are

00:18:12,480 --> 00:18:16,110
on tcp anyway because you can change the

00:18:14,400 --> 00:18:17,760
port and says give me your binary locks

00:18:16,110 --> 00:18:19,470
and that's called the io thread so what

00:18:17,760 --> 00:18:22,290
that does is it reads the binary logs

00:18:19,470 --> 00:18:24,360
from the master and saves it on a to log

00:18:22,290 --> 00:18:26,520
on a slave called the relay log because

00:18:24,360 --> 00:18:29,850
it's relaying the binary log changes

00:18:26,520 --> 00:18:32,850
from the master and slave then an SQL

00:18:29,850 --> 00:18:34,740
thread comes along on the slave and says

00:18:32,850 --> 00:18:36,630
reads that relay logins is ok now I'm

00:18:34,740 --> 00:18:38,309
going to apply those statements so

00:18:36,630 --> 00:18:41,040
that's really important because a lot of

00:18:38,309 --> 00:18:42,780
the ways in which minus QL replication

00:18:41,040 --> 00:18:45,980
works and does not work depends on you

00:18:42,780 --> 00:18:48,890
understanding how that is this is why my

00:18:45,980 --> 00:18:51,470
scantily have two masters because how

00:18:48,890 --> 00:18:53,120
would you like interleave the binary log

00:18:51,470 --> 00:18:54,919
that would be kind of weird and how

00:18:53,120 --> 00:18:58,700
would you know which came from from

00:18:54,919 --> 00:19:00,230
where let's see ignore so in MySQL

00:18:58,700 --> 00:19:01,400
there's a bunch of ways that you can say

00:19:00,230 --> 00:19:02,799
you know this stuff on the master I

00:19:01,400 --> 00:19:05,390
don't want it to appear on the slave

00:19:02,799 --> 00:19:06,830
it's usually not the greatest idea in

00:19:05,390 --> 00:19:08,330
the world to do that but there are use

00:19:06,830 --> 00:19:11,210
cases for it so I'm going to talk about

00:19:08,330 --> 00:19:13,070
it when you're ignoring stuff you can

00:19:11,210 --> 00:19:14,809
ignore it in the binary log you can say

00:19:13,070 --> 00:19:17,480
master don't even log this in your

00:19:14,809 --> 00:19:19,850
change log which is usually a pretty bad

00:19:17,480 --> 00:19:21,919
idea because then you don't have that in

00:19:19,850 --> 00:19:24,169
your incremental backups right all

00:19:21,919 --> 00:19:26,809
record or that change happening it never

00:19:24,169 --> 00:19:28,220
gets recorded so you've just lost some

00:19:26,809 --> 00:19:32,000
auditing capabilities and that can be a

00:19:28,220 --> 00:19:34,100
pretty bad thing now I have had a case

00:19:32,000 --> 00:19:36,049
whether the master was logging so much

00:19:34,100 --> 00:19:37,700
information that even then we didn't

00:19:36,049 --> 00:19:42,169
need it on the slave that even though

00:19:37,700 --> 00:19:43,820
the slave had the table set to be a

00:19:42,169 --> 00:19:45,470
black hole table which is pretty cool

00:19:43,820 --> 00:19:48,620
it's like the all the information goes

00:19:45,470 --> 00:19:50,090
to Devon all what happened was the

00:19:48,620 --> 00:19:51,530
bandwidth you're so much bandwidth is

00:19:50,090 --> 00:19:53,210
being used the slave was always behind

00:19:51,530 --> 00:19:55,790
it was just a bandwidth it wasn't even

00:19:53,210 --> 00:19:57,679
the queries themselves but there's also

00:19:55,790 --> 00:19:59,990
a way to ignore things from the

00:19:57,679 --> 00:20:01,669
replication side of it so the slave

00:19:59,990 --> 00:20:04,460
would go read the binary log and master

00:20:01,669 --> 00:20:06,290
and then not save that to the relay log

00:20:04,460 --> 00:20:08,270
so that would be the preferred way of

00:20:06,290 --> 00:20:10,540
doing it although the preferred way of

00:20:08,270 --> 00:20:13,460
doing it is not doing it at all

00:20:10,540 --> 00:20:15,590
monitoring I happen to use not use

00:20:13,460 --> 00:20:17,000
there's a plugin i wrote for nagios that

00:20:15,590 --> 00:20:20,750
i think is pretty good there's some pro

00:20:17,000 --> 00:20:22,400
cronin in nagios and there's a that's

00:20:20,750 --> 00:20:24,530
for alerting there's some cacti

00:20:22,400 --> 00:20:25,910
templates I think there's some zabbix

00:20:24,530 --> 00:20:28,910
templates as well I know there are

00:20:25,910 --> 00:20:30,470
actually so monitoring kind of

00:20:28,910 --> 00:20:32,960
encompasses two things alerts and

00:20:30,470 --> 00:20:34,910
graphing only alert of what you can fix

00:20:32,960 --> 00:20:37,010
if you alert on the fact that there's a

00:20:34,910 --> 00:20:39,410
lot of slow queries how are you going to

00:20:37,010 --> 00:20:40,640
fix that why should you get paged at

00:20:39,410 --> 00:20:42,410
midnight that there's a lot of slow

00:20:40,640 --> 00:20:44,450
queries what are you going to do about

00:20:42,410 --> 00:20:45,710
it going to kill the slow queries you

00:20:44,450 --> 00:20:48,980
can make something that will kill you

00:20:45,710 --> 00:20:50,840
know long running slow queries are you

00:20:48,980 --> 00:20:53,330
going to monitor when things start to

00:20:50,840 --> 00:20:54,799
get up towards max connections that's a

00:20:53,330 --> 00:20:56,580
great idea you can fix that when things

00:20:54,799 --> 00:20:57,960
start to get about eighty percent of max

00:20:56,580 --> 00:20:59,279
shins you can log in and be like what's

00:20:57,960 --> 00:21:01,110
using all these connections I want to

00:20:59,279 --> 00:21:02,840
make sure i'm not going to go up to my

00:21:01,110 --> 00:21:05,429
maximum number of connections before

00:21:02,840 --> 00:21:07,529
because then mysql won't accept any more

00:21:05,429 --> 00:21:10,380
and you'll you'll not be able to use

00:21:07,529 --> 00:21:11,549
mysql graph the important stuff and when

00:21:10,380 --> 00:21:13,950
I say the important stuff I mean

00:21:11,549 --> 00:21:15,570
anything you might I tend to just graph

00:21:13,950 --> 00:21:17,010
everything I can i take the cacti

00:21:15,570 --> 00:21:19,380
templates to the zabbix templates and

00:21:17,010 --> 00:21:21,029
just say yes graph all of them because

00:21:19,380 --> 00:21:22,500
you kind of never know what you might

00:21:21,029 --> 00:21:24,179
need I mean if you're not using the

00:21:22,500 --> 00:21:26,880
MySQL query cache then don't bother

00:21:24,179 --> 00:21:28,980
graphing it I tend to like to graph it

00:21:26,880 --> 00:21:30,659
anyway because sometimes some setting

00:21:28,980 --> 00:21:31,919
gets reset and you never know and we

00:21:30,659 --> 00:21:33,539
start saying hey how come how come

00:21:31,919 --> 00:21:35,460
there's your query cache being used that

00:21:33,539 --> 00:21:36,539
shouldn't be on at all so I think it's

00:21:35,460 --> 00:21:38,549
pretty useful even though sometimes

00:21:36,539 --> 00:21:40,200
you'll get blank graphs that's as it

00:21:38,549 --> 00:21:42,630
should be and you want to make sure that

00:21:40,200 --> 00:21:44,880
says it should be when you monitor

00:21:42,630 --> 00:21:46,679
things whether it's graphing or alerting

00:21:44,880 --> 00:21:48,539
you want to get as close to the user

00:21:46,679 --> 00:21:50,820
experience as possible do you really

00:21:48,539 --> 00:21:53,159
care that your web server is or your

00:21:50,820 --> 00:21:55,260
database server for example is sending

00:21:53,159 --> 00:21:57,450
back the fact that yes you can connect

00:21:55,260 --> 00:21:59,250
or do you want it to like run a query

00:21:57,450 --> 00:22:00,779
and make sure that something in a queue

00:21:59,250 --> 00:22:02,639
is you know there's a queue being

00:22:00,779 --> 00:22:04,080
processed you know that's really

00:22:02,639 --> 00:22:05,340
important again it's like you know your

00:22:04,080 --> 00:22:07,679
web server do you really want to know

00:22:05,340 --> 00:22:08,490
that you're getting a 500 okay or would

00:22:07,679 --> 00:22:10,580
you like to know that you're actually

00:22:08,490 --> 00:22:13,320
like rendering a real web page

00:22:10,580 --> 00:22:15,269
preferably the latter because you can

00:22:13,320 --> 00:22:17,789
actually have problems and get a false

00:22:15,269 --> 00:22:20,850
positive even though you're submitting a

00:22:17,789 --> 00:22:22,260
500 okay so try to monitor is close to

00:22:20,850 --> 00:22:24,059
these your experience if possible I

00:22:22,260 --> 00:22:25,409
could go on and on about monitoring but

00:22:24,059 --> 00:22:27,470
this is an hour long talk and I could do

00:22:25,409 --> 00:22:31,350
an hour-long talk just on monitoring so

00:22:27,470 --> 00:22:33,570
there you go backups have them who here

00:22:31,350 --> 00:22:37,350
has backups who here doesn't have

00:22:33,570 --> 00:22:38,760
backups don't be shy okay who here who

00:22:37,350 --> 00:22:42,450
what do you guys use to her backups just

00:22:38,760 --> 00:22:48,570
call it out my sequel dump anybody's

00:22:42,450 --> 00:22:51,559
anything else RBS snapshot RDS Oh Amazon

00:22:48,570 --> 00:22:53,749
RDS snapshots anything else

00:22:51,559 --> 00:22:56,360
it'll be snapshots in our sink okay so

00:22:53,749 --> 00:22:58,340
we've got some file backups of physical

00:22:56,360 --> 00:23:00,169
backups you know with the snapshotting

00:22:58,340 --> 00:23:02,149
and then you've got logical backups with

00:23:00,169 --> 00:23:04,159
my SQL dump what a logical backup is is

00:23:02,149 --> 00:23:06,710
it gives you a series of statements it's

00:23:04,159 --> 00:23:08,539
like you know insert into this thing so

00:23:06,710 --> 00:23:11,419
when you're restoring it usually takes

00:23:08,539 --> 00:23:12,919
longer to import the MySQL dump one of

00:23:11,419 --> 00:23:15,529
the things I like to do is mix and match

00:23:12,919 --> 00:23:19,220
so i'll do a mysql dump and i'll use the

00:23:15,529 --> 00:23:21,080
dash dash skip extended insert parameter

00:23:19,220 --> 00:23:23,240
and what that does is it gives you one

00:23:21,080 --> 00:23:24,980
row per line and so if you're doing

00:23:23,240 --> 00:23:26,600
something like oh my god we dropped this

00:23:24,980 --> 00:23:28,460
user because you didn't pay but he's

00:23:26,600 --> 00:23:29,929
like you know the brother of the owner

00:23:28,460 --> 00:23:32,389
and we got to restore his account

00:23:29,929 --> 00:23:34,429
instead of having to take let's say a

00:23:32,389 --> 00:23:35,749
physical backup restore all the files or

00:23:34,429 --> 00:23:37,940
a regular Maya squeal dump restore

00:23:35,749 --> 00:23:40,039
everything and then you know select his

00:23:37,940 --> 00:23:42,139
entries what you can do is you just grep

00:23:40,039 --> 00:23:44,330
for that user ID in the thing because

00:23:42,139 --> 00:23:46,519
it's one per line and just restore that

00:23:44,330 --> 00:23:48,590
so there are so the question is what's

00:23:46,519 --> 00:23:50,720
your disaster is your disaster someone

00:23:48,590 --> 00:23:52,129
dropped a table if it is do you really

00:23:50,720 --> 00:23:53,960
want to have to like restore the whole

00:23:52,129 --> 00:23:55,429
back up just to get that one table or is

00:23:53,960 --> 00:23:57,110
the disaster like the whole machine died

00:23:55,429 --> 00:23:58,879
usually when we think of disaster we

00:23:57,110 --> 00:24:00,259
think of the worst disaster but you also

00:23:58,879 --> 00:24:02,659
need to think of you know kind of what

00:24:00,259 --> 00:24:05,330
have what might happen to some people do

00:24:02,659 --> 00:24:07,970
things like have a delayed slave that

00:24:05,330 --> 00:24:09,350
can be useful maybe in a development

00:24:07,970 --> 00:24:11,269
environment if you really think you need

00:24:09,350 --> 00:24:14,299
to delayed slaves so delayed slave is a

00:24:11,269 --> 00:24:15,379
slave that is not exactly current with

00:24:14,299 --> 00:24:17,480
the master but you might say well I want

00:24:15,379 --> 00:24:20,990
to slay that's four hours delayed and

00:24:17,480 --> 00:24:23,029
will happen is the io thread will save

00:24:20,990 --> 00:24:25,730
the logs but the SQL thread won't apply

00:24:23,029 --> 00:24:27,919
the logs until the time in the log so

00:24:25,730 --> 00:24:29,960
the time is recorded from the master so

00:24:27,919 --> 00:24:32,470
the time the log says four hours ago or

00:24:29,960 --> 00:24:35,480
let's say okay now I'll apply the logs

00:24:32,470 --> 00:24:37,759
so you the other copy of that is make

00:24:35,480 --> 00:24:40,490
sure your servers at the same time maybe

00:24:37,759 --> 00:24:42,259
ntp server check them make sure that

00:24:40,490 --> 00:24:43,730
works because that can be fun too and

00:24:42,259 --> 00:24:44,899
your rate some people say well you know

00:24:43,730 --> 00:24:46,820
we'll do that that way if someone does a

00:24:44,899 --> 00:24:48,529
drop table you know what if someone does

00:24:46,820 --> 00:24:49,970
a drop table I want them to have pain

00:24:48,529 --> 00:24:51,649
have to restore it cuz they shouldn't be

00:24:49,970 --> 00:24:53,840
doing that but some people have

00:24:51,649 --> 00:24:54,860
different needs my thing is what happens

00:24:53,840 --> 00:24:56,809
if somebody does a jock table on a

00:24:54,860 --> 00:24:58,879
Friday you don't noticeable Monday

00:24:56,809 --> 00:25:00,919
how long should your Glade slave be

00:24:58,879 --> 00:25:03,289
that's my problem with delayed slave the

00:25:00,919 --> 00:25:05,570
concept is great but like what what's

00:25:03,289 --> 00:25:07,190
the limit and if you're past that limit

00:25:05,570 --> 00:25:09,889
then why bother having a delayed slave

00:25:07,190 --> 00:25:12,200
so anyway test your test your restores

00:25:09,889 --> 00:25:13,700
maybe once a quarter again I like this

00:25:12,200 --> 00:25:16,009
whole you know having the offline

00:25:13,700 --> 00:25:17,659
maintenance thing because I can go and

00:25:16,009 --> 00:25:19,610
you know make a backup server I can go

00:25:17,659 --> 00:25:21,080
and restore something I'm doing a fire

00:25:19,610 --> 00:25:23,450
drill i'm testing their store to make

00:25:21,080 --> 00:25:24,919
sure that i know before the critical

00:25:23,450 --> 00:25:26,210
time period if i'm building a new slave

00:25:24,919 --> 00:25:28,249
and I'm like wait this backup doesn't

00:25:26,210 --> 00:25:29,720
work I have a couple of days like it's

00:25:28,249 --> 00:25:31,399
not like okay we need you to sleep now

00:25:29,720 --> 00:25:32,690
cuz something died you don't want to

00:25:31,399 --> 00:25:36,110
find out then that your backups haven't

00:25:32,690 --> 00:25:37,809
been good for six months pro tips if

00:25:36,110 --> 00:25:40,600
you're using the mysql command line

00:25:37,809 --> 00:25:43,999
backslash capital g who knows about that

00:25:40,600 --> 00:25:45,590
awesome ok backslash capital D G gives

00:25:43,999 --> 00:25:47,330
you the output in vertical output by

00:25:45,590 --> 00:25:48,769
default when you do a command on my

00:25:47,330 --> 00:25:50,600
skill command line you get a horizontal

00:25:48,769 --> 00:25:52,730
output so if you do like select star

00:25:50,600 --> 00:25:53,960
from table and there's a lot you know

00:25:52,730 --> 00:25:55,970
it's longer than your thing it wraps

00:25:53,960 --> 00:25:57,889
around it's very hard to read backslash

00:25:55,970 --> 00:26:01,009
capital G gives you a vertical output

00:25:57,889 --> 00:26:02,480
which does one actually let me show I

00:26:01,009 --> 00:26:05,450
can probably show you something like

00:26:02,480 --> 00:26:08,210
this am I still connected to the

00:26:05,450 --> 00:26:10,610
interwebs yes use bugs this is our

00:26:08,210 --> 00:26:13,720
bugzilla instance and that I'm connected

00:26:10,610 --> 00:26:18,080
to so if we do select star from bugs

00:26:13,720 --> 00:26:23,960
limit 1 see how annoying that is because

00:26:18,080 --> 00:26:25,789
that tables so very long right ok I take

00:26:23,960 --> 00:26:32,600
the semicolon away and I put a backslash

00:26:25,789 --> 00:26:34,299
capital G and look at that exactly you

00:26:32,600 --> 00:26:36,740
can leave now you've learned enough now

00:26:34,299 --> 00:26:38,720
it's actually really cool another cool

00:26:36,740 --> 00:26:42,440
thing is when you have a big table like

00:26:38,720 --> 00:26:44,090
that backslash capital P is your pager

00:26:42,440 --> 00:26:46,279
that means like how do you want to page

00:26:44,090 --> 00:26:48,710
you do more you can do less you can do

00:26:46,279 --> 00:26:51,230
so more gives you select star for bugs

00:26:48,710 --> 00:26:53,749
limit 1 I hit the spacebar I get more

00:26:51,230 --> 00:26:55,519
yeah very very nice I can hit Q and I'm

00:26:53,749 --> 00:26:56,539
done and it still gives you one row and

00:26:55,519 --> 00:26:59,090
set so still gives you the number of

00:26:56,539 --> 00:27:00,679
rows and set so if you have a lot of

00:26:59,090 --> 00:27:03,409
things in your process list you might do

00:27:00,679 --> 00:27:05,029
a show process list like that I was only

00:27:03,409 --> 00:27:06,529
3 this is a slave that's out of the loop

00:27:05,029 --> 00:27:08,490
but if there was a whole lot you can

00:27:06,529 --> 00:27:11,040
hate Q to be like 87

00:27:08,490 --> 00:27:12,870
things in the list which is really very

00:27:11,040 --> 00:27:16,500
nice the other thing you do is like

00:27:12,870 --> 00:27:21,450
backslash capital B P grip if I could

00:27:16,500 --> 00:27:23,429
actually type grep for seconds okay so

00:27:21,450 --> 00:27:27,330
now the pager is set to grab seconds and

00:27:23,429 --> 00:27:29,520
I can do a show slave status which by

00:27:27,330 --> 00:27:31,170
the way i always use catbox capital g 4n

00:27:29,520 --> 00:27:32,760
seconds behind master without all the

00:27:31,170 --> 00:27:34,679
stuff so i'll do something like this

00:27:32,760 --> 00:27:37,800
another one actually that's not even on

00:27:34,679 --> 00:27:40,140
this is the du command and what the du

00:27:37,800 --> 00:27:41,400
command does is it does the same thing a

00:27:40,140 --> 00:27:43,800
select command module but it doesn't

00:27:41,400 --> 00:27:46,800
give you the results why would you want

00:27:43,800 --> 00:27:49,440
that well there's this really cool

00:27:46,800 --> 00:27:51,030
function called sleep you select sleep

00:27:49,440 --> 00:27:54,170
one it sleeps for one second and then

00:27:51,030 --> 00:27:57,390
gives you stuff back up I'm still on I

00:27:54,170 --> 00:27:59,640
was still on the grep pager so but it

00:27:57,390 --> 00:28:04,320
gives you this output so if you use the

00:27:59,640 --> 00:28:07,050
du command I end up doing something like

00:28:04,320 --> 00:28:08,910
this a lot where I want to like kind of

00:28:07,050 --> 00:28:10,679
follow the show slave status so I'll

00:28:08,910 --> 00:28:13,440
look and I'll look and i'll look except

00:28:10,679 --> 00:28:17,250
i would have the backslash p grip for

00:28:13,440 --> 00:28:19,490
seconds and then do that again and then

00:28:17,250 --> 00:28:21,540
you get this little nice little kind of

00:28:19,490 --> 00:28:22,740
thing so you don't have to remember when

00:28:21,540 --> 00:28:24,780
it was the whole screen didn't go by

00:28:22,740 --> 00:28:26,250
it's a lot more effective when the slave

00:28:24,780 --> 00:28:28,020
is lagging behind and catching up but

00:28:26,250 --> 00:28:29,460
you get the idea the other cool thing is

00:28:28,020 --> 00:28:33,120
if you make a lot of typos like I do

00:28:29,460 --> 00:28:34,290
like you do like delete from foo and

00:28:33,120 --> 00:28:36,480
you're like oh and I wanted to type

00:28:34,290 --> 00:28:37,950
select from food but you're way too lazy

00:28:36,480 --> 00:28:39,960
to do like control a to go to the

00:28:37,950 --> 00:28:41,220
beating a line or something like that if

00:28:39,960 --> 00:28:43,679
you just want to cancel it you do

00:28:41,220 --> 00:28:46,590
backslash lowercase C and that just

00:28:43,679 --> 00:28:48,090
cancels a statement it doesn't run it so

00:28:46,590 --> 00:28:50,040
then you can kind of go up you can hit

00:28:48,090 --> 00:28:52,110
the UP button and go left and be like oh

00:28:50,040 --> 00:28:57,030
no I wanted to do oops i wanted to do

00:28:52,110 --> 00:29:00,000
select from foo things like that so

00:28:57,030 --> 00:29:02,160
those are my pro tips the other thing i

00:29:00,000 --> 00:29:03,630
figured i should mention is I think

00:29:02,160 --> 00:29:04,679
we're all pretty comfortable to command

00:29:03,630 --> 00:29:07,080
line but if you did want like a

00:29:04,679 --> 00:29:09,570
centralized GUI tool mysql workbench is

00:29:07,080 --> 00:29:11,220
free and can do a lot of stuff there is

00:29:09,570 --> 00:29:13,080
a paid version i haven't felt the need

00:29:11,220 --> 00:29:15,059
to use the paid version it does a lot of

00:29:13,080 --> 00:29:17,400
cool stuff it does also diagramming and

00:29:15,059 --> 00:29:18,750
modeling so if you want an entity

00:29:17,400 --> 00:29:20,100
relationship diagram and my

00:29:18,750 --> 00:29:21,570
UL or you just want pretty pictures to

00:29:20,100 --> 00:29:24,390
be like this table refers to that table

00:29:21,570 --> 00:29:26,340
you can do that in workbench and it does

00:29:24,390 --> 00:29:28,740
things like you can reverse-engineer a

00:29:26,340 --> 00:29:30,420
schema into an entity relationship

00:29:28,740 --> 00:29:32,340
diagram you can also do something like

00:29:30,420 --> 00:29:34,350
take two schemas and compare them and be

00:29:32,340 --> 00:29:36,120
like oh how would I alter my production

00:29:34,350 --> 00:29:38,460
schema to look like my development

00:29:36,120 --> 00:29:41,100
schema I use that a lot so that's

00:29:38,460 --> 00:29:42,180
actually a lot easier than diff because

00:29:41,100 --> 00:29:43,650
diff will show you some other things

00:29:42,180 --> 00:29:45,600
like if your indexes have different

00:29:43,650 --> 00:29:48,570
names or something diff doesn't catch

00:29:45,600 --> 00:29:51,000
that but workbench does so how about

00:29:48,570 --> 00:29:53,340
some built-in tools in MySQL what can we

00:29:51,000 --> 00:29:55,830
use that can help us administer MySQL

00:29:53,340 --> 00:29:57,750
make it run more smoothly store

00:29:55,830 --> 00:29:59,790
procedures and functions MySQL does have

00:29:57,750 --> 00:30:03,510
stored procedures and functions up sorry

00:29:59,790 --> 00:30:05,640
about that gravity really works today by

00:30:03,510 --> 00:30:09,140
the way just lettin know my school does

00:30:05,640 --> 00:30:12,930
have stored procedures and functions and

00:30:09,140 --> 00:30:14,670
they can be used to be you might have

00:30:12,930 --> 00:30:17,490
heard that oh but the implementations

00:30:14,670 --> 00:30:19,710
not so great of the functions it's not

00:30:17,490 --> 00:30:22,230
but what it does have is it has regular

00:30:19,710 --> 00:30:26,370
SQL but it also has some conditionals

00:30:22,230 --> 00:30:28,530
and loops and things like that so what

00:30:26,370 --> 00:30:30,690
it does let you do an immensely it'll

00:30:28,530 --> 00:30:33,120
search and you'll find it again there

00:30:30,690 --> 00:30:35,280
are conditionals and cursors in MySQL

00:30:33,120 --> 00:30:36,300
stored procedures and functions so I

00:30:35,280 --> 00:30:37,500
know I've talked to a bunch of people

00:30:36,300 --> 00:30:39,120
and they're like yeah but store

00:30:37,500 --> 00:30:40,440
procedures aren't good in my school I'm

00:30:39,120 --> 00:30:42,030
like well what more do you need other

00:30:40,440 --> 00:30:43,350
than loops and conditionals and cursors

00:30:42,030 --> 00:30:45,150
they're like oh no that's pretty much

00:30:43,350 --> 00:30:47,520
all I need I just need to like go

00:30:45,150 --> 00:30:50,160
through a list of you know rows in a

00:30:47,520 --> 00:30:52,830
table and you know do something do some

00:30:50,160 --> 00:30:54,420
variable you know do some calculations

00:30:52,830 --> 00:30:56,310
if something matches something that's

00:30:54,420 --> 00:30:58,380
pretty much what a lot of store

00:30:56,310 --> 00:30:59,490
procedures are what they allow you to do

00:30:58,380 --> 00:31:01,710
is they allow you to have a certain

00:30:59,490 --> 00:31:03,360
functionality and all you have the only

00:31:01,710 --> 00:31:06,120
power you have to give the user is an

00:31:03,360 --> 00:31:07,980
execute of that store procedure so you

00:31:06,120 --> 00:31:10,230
can put some business logic to the

00:31:07,980 --> 00:31:11,610
database if you really want to you know

00:31:10,230 --> 00:31:13,830
there's different camps of whether or

00:31:11,610 --> 00:31:16,140
not you should do that views are also

00:31:13,830 --> 00:31:17,970
good for security there you can think of

00:31:16,140 --> 00:31:19,440
them as virtual tables and by virtual I

00:31:17,970 --> 00:31:21,270
mean they're not materialized at all

00:31:19,440 --> 00:31:23,610
they're not physical there's just a view

00:31:21,270 --> 00:31:27,330
into it the way that you define of you

00:31:23,610 --> 00:31:29,100
is you do like create view foo as select

00:31:27,330 --> 00:31:30,810
whatever so it's some kind of select

00:31:29,100 --> 00:31:31,600
query you can do joins you can do

00:31:30,810 --> 00:31:33,880
whatever

00:31:31,600 --> 00:31:35,620
you just have to be careful because if

00:31:33,880 --> 00:31:37,929
you're making like a really complex view

00:31:35,620 --> 00:31:39,309
or using a view on a couple of tables to

00:31:37,929 --> 00:31:40,780
your developers that view might look

00:31:39,309 --> 00:31:43,690
like a table and so they might do some

00:31:40,780 --> 00:31:45,010
kind of query that looks right and looks

00:31:43,690 --> 00:31:46,539
like it should be really simple but then

00:31:45,010 --> 00:31:49,289
it ends up now using any indexes or

00:31:46,539 --> 00:31:52,929
whatever when you're actually you know

00:31:49,289 --> 00:31:56,590
looking at it events does anyone here

00:31:52,929 --> 00:31:59,590
know about MySQL events who here runs a

00:31:56,590 --> 00:32:01,419
cron script with MySQL like some chron

00:31:59,590 --> 00:32:04,120
script that connects to mysql and does

00:32:01,419 --> 00:32:06,429
some functionality like maybe caches

00:32:04,120 --> 00:32:08,289
some stuff into a table every five

00:32:06,429 --> 00:32:11,440
minutes or something like that nobody

00:32:08,289 --> 00:32:13,330
well if you did mysql events would be

00:32:11,440 --> 00:32:17,350
for you because what mysql events does

00:32:13,330 --> 00:32:18,669
is it runs SQL code stored SQL code and

00:32:17,350 --> 00:32:22,150
it can even run stored procedures and

00:32:18,669 --> 00:32:24,280
functions inside a cron or at like kind

00:32:22,150 --> 00:32:25,960
of environment but it's inside MySQL so

00:32:24,280 --> 00:32:29,320
one of the cool things about it is that

00:32:25,960 --> 00:32:31,030
it it does it because it's inside mysql

00:32:29,320 --> 00:32:33,309
and you can say ok you should run this

00:32:31,030 --> 00:32:34,870
as the x user you don't have to actually

00:32:33,309 --> 00:32:37,510
store password anywhere because it's

00:32:34,870 --> 00:32:39,100
already in mysql so if you had like a

00:32:37,510 --> 00:32:40,600
cron job that will connect to mysql

00:32:39,100 --> 00:32:42,340
every five minutes an update a table

00:32:40,600 --> 00:32:44,710
with let's say a count star of who's

00:32:42,340 --> 00:32:47,080
logged in you would have to put the

00:32:44,710 --> 00:32:48,610
password somewhere on the in log file

00:32:47,080 --> 00:32:52,990
system with events you don't have to do

00:32:48,610 --> 00:32:55,390
that and then another tool MySQL gives

00:32:52,990 --> 00:32:57,549
you is partitioning and I specifically

00:32:55,390 --> 00:32:59,080
said for defragmentation because one of

00:32:57,549 --> 00:33:01,030
the cool things about my school

00:32:59,080 --> 00:33:04,330
partitioning is that underneath it's

00:33:01,030 --> 00:33:06,760
just an extra file so by default my

00:33:04,330 --> 00:33:09,309
skill will have like a structure file

00:33:06,760 --> 00:33:11,200
and then assuming you use certain

00:33:09,309 --> 00:33:12,909
commands and whatnot you know DB file

00:33:11,200 --> 00:33:14,890
per table for example we have one file

00:33:12,909 --> 00:33:16,179
with the data for that table if you use

00:33:14,890 --> 00:33:19,480
partitioning you'll actually have one

00:33:16,179 --> 00:33:22,030
file per partition now in MySQL if you

00:33:19,480 --> 00:33:23,890
delete rows you're just leading them

00:33:22,030 --> 00:33:25,600
you're not actually defragmenting the

00:33:23,890 --> 00:33:27,220
table so if you have a thousand rows in

00:33:25,600 --> 00:33:29,950
a table on they're all the same size and

00:33:27,220 --> 00:33:31,900
you delete a hundred of them the file is

00:33:29,950 --> 00:33:34,900
going to be just as big but it's going

00:33:31,900 --> 00:33:36,549
to be ten percent fragmented and so you

00:33:34,900 --> 00:33:38,650
would have to rebuild the table either

00:33:36,549 --> 00:33:41,020
doing some kind of alter table or by

00:33:38,650 --> 00:33:43,840
doing an optimized table to reclaim that

00:33:41,020 --> 00:33:45,170
disk space with partitioning what you do

00:33:43,840 --> 00:33:47,120
is you can drop the partition

00:33:45,170 --> 00:33:49,100
and in the time it takes to basically

00:33:47,120 --> 00:33:51,620
delete the file on the underlying file

00:33:49,100 --> 00:33:54,320
system that date is gone and there's no

00:33:51,620 --> 00:33:56,600
fragmentation that's happening at least

00:33:54,320 --> 00:33:58,280
not with in MySQL so that's something

00:33:56,600 --> 00:34:00,560
that's really really useful a lot of

00:33:58,280 --> 00:34:01,970
people have kind of windows onto data

00:34:00,560 --> 00:34:03,590
like oh we only need to see the last

00:34:01,970 --> 00:34:05,330
ones data and they know they don't

00:34:03,590 --> 00:34:07,130
understand why after like six months

00:34:05,330 --> 00:34:08,960
their application is so slow it's like

00:34:07,130 --> 00:34:09,919
well you deleted the data from two

00:34:08,960 --> 00:34:12,080
months ago but you never really

00:34:09,919 --> 00:34:13,580
defragment to the table by the time

00:34:12,080 --> 00:34:14,960
you've deleted six months worth of data

00:34:13,580 --> 00:34:17,350
you slowly have one month in the table

00:34:14,960 --> 00:34:19,970
but it's now seven times the size

00:34:17,350 --> 00:34:21,740
there's a procore no toolkit it's

00:34:19,970 --> 00:34:22,940
actually pretty good there's a lot of

00:34:21,740 --> 00:34:25,970
tools for things like data integrity

00:34:22,940 --> 00:34:28,100
with PT table check some PT table sync

00:34:25,970 --> 00:34:30,260
this is a way to check if your master

00:34:28,100 --> 00:34:31,669
and slave or have the same data which

00:34:30,260 --> 00:34:35,120
they don't always they don't have to

00:34:31,669 --> 00:34:36,710
because again replication is just the

00:34:35,120 --> 00:34:38,540
slave going to the master taking the

00:34:36,710 --> 00:34:40,370
commands and applying them and you can

00:34:38,540 --> 00:34:41,750
have either doing the SQL commands

00:34:40,370 --> 00:34:44,840
themselves you can have row based

00:34:41,750 --> 00:34:47,360
replication which just takes the changed

00:34:44,840 --> 00:34:50,030
rose and applies that however there's no

00:34:47,360 --> 00:34:52,160
checks and balances to say like hey you

00:34:50,030 --> 00:34:54,169
know it did this happen correctly for

00:34:52,160 --> 00:34:57,140
example especially in statement based

00:34:54,169 --> 00:34:59,030
replication if you do an update and you

00:34:57,140 --> 00:35:02,360
say update table set through equal to

00:34:59,030 --> 00:35:05,780
bar where you know this field is less

00:35:02,360 --> 00:35:07,250
than one if the those tables are

00:35:05,780 --> 00:35:09,080
different on the master and slave maybe

00:35:07,250 --> 00:35:10,310
it's there's ten rows that match on the

00:35:09,080 --> 00:35:12,290
master a nine or is the match on the

00:35:10,310 --> 00:35:14,600
slave now your data gets even more out

00:35:12,290 --> 00:35:16,280
of sync so there's ways to actually

00:35:14,600 --> 00:35:18,680
check that with the per conto toolkit

00:35:16,280 --> 00:35:20,270
there they have tools for there's like

00:35:18,680 --> 00:35:23,270
there's a couple dozen tools it's

00:35:20,270 --> 00:35:24,770
there's really a lot there and there's

00:35:23,270 --> 00:35:26,990
ease of finding information there's a

00:35:24,770 --> 00:35:29,060
there's a tool called PT show grants and

00:35:26,990 --> 00:35:31,190
that will show you the grand statements

00:35:29,060 --> 00:35:33,230
for everyone on the machine or you can

00:35:31,190 --> 00:35:34,670
specify only certain users which is

00:35:33,230 --> 00:35:36,560
really useful when you want to find like

00:35:34,670 --> 00:35:38,750
oh well show me everyone who's in the 10

00:35:36,560 --> 00:35:40,640
dot to subnet or you know show me

00:35:38,750 --> 00:35:42,560
everyone who has the super privilege you

00:35:40,640 --> 00:35:44,540
can do that with a query but you could

00:35:42,560 --> 00:35:47,270
also do that with PG show grants if you

00:35:44,540 --> 00:35:49,520
wanted to for example actually a better

00:35:47,270 --> 00:35:50,990
a better example would be I want to copy

00:35:49,520 --> 00:35:54,100
all the grants on this machine to

00:35:50,990 --> 00:35:58,350
another machine you probably could like

00:35:54,100 --> 00:36:00,120
export the MySQL system database but it

00:35:58,350 --> 00:36:02,130
a lot easier to run PT show grants you

00:36:00,120 --> 00:36:05,040
get the text file then you run that file

00:36:02,130 --> 00:36:06,840
on the other machine there's a query

00:36:05,040 --> 00:36:08,940
digest and review tool and so it can

00:36:06,840 --> 00:36:11,250
take any kind of log whether it's logged

00:36:08,940 --> 00:36:13,410
from TCP dump hora log from the general

00:36:11,250 --> 00:36:15,180
log or the slope area log and you can

00:36:13,410 --> 00:36:16,920
actually get like a fingerprint of the

00:36:15,180 --> 00:36:19,050
query so you can actually say what are

00:36:16,920 --> 00:36:21,840
the queries my system does like what

00:36:19,050 --> 00:36:24,090
types of queries you know it kind of it

00:36:21,840 --> 00:36:25,830
digests it up so that different values

00:36:24,090 --> 00:36:28,560
aren't represented but just as ok

00:36:25,830 --> 00:36:30,750
there's a number here right but one of

00:36:28,560 --> 00:36:34,320
the queries that you do is select name

00:36:30,750 --> 00:36:35,850
from user where user ID equals x that's

00:36:34,320 --> 00:36:37,050
a fingerprinted query and so it's

00:36:35,850 --> 00:36:41,910
actually pretty cool to be able to go

00:36:37,050 --> 00:36:43,890
through and and review all your queries

00:36:41,910 --> 00:36:46,050
so I do this thing I call a query review

00:36:43,890 --> 00:36:47,640
so when you first do it there's a lot of

00:36:46,050 --> 00:36:48,990
queries to review but then you can kind

00:36:47,640 --> 00:36:51,780
of see like oh there's a new query that

00:36:48,990 --> 00:36:53,790
came in right and last week's release I

00:36:51,780 --> 00:36:55,470
see there's new query and there's other

00:36:53,790 --> 00:36:57,030
tools some of them works and then don't

00:36:55,470 --> 00:37:00,090
I feel like every time I use a new per

00:36:57,030 --> 00:37:01,710
quanto to life I'll a couple bugs but

00:37:00,090 --> 00:37:04,530
there's kind of no alternative in a lot

00:37:01,710 --> 00:37:06,180
of cases so you know it's a love-hate

00:37:04,530 --> 00:37:07,500
relationship kind of thing and there's

00:37:06,180 --> 00:37:10,110
not some of the documentation is really

00:37:07,500 --> 00:37:11,810
good some of documentation is less good

00:37:10,110 --> 00:37:15,060
that sometimes it's hard to find

00:37:11,810 --> 00:37:17,010
examples of how to use stuff so you know

00:37:15,060 --> 00:37:18,330
but it does a lot of really cool stuff

00:37:17,010 --> 00:37:21,900
that you wouldn't otherwise be able to

00:37:18,330 --> 00:37:24,120
do so there's also the open arc tool kit

00:37:21,900 --> 00:37:25,350
which is by another like community

00:37:24,120 --> 00:37:26,730
member it's not as like widely

00:37:25,350 --> 00:37:28,470
popularized because it's written by one

00:37:26,730 --> 00:37:31,410
guy as opposed to like a company that

00:37:28,470 --> 00:37:33,630
has a lot of buying power but there is

00:37:31,410 --> 00:37:35,940
an online schema change you can block

00:37:33,630 --> 00:37:38,370
accounts you can kill slow queries you

00:37:35,940 --> 00:37:39,360
can repeat a query execution these are

00:37:38,370 --> 00:37:40,860
some of the things that you can do in

00:37:39,360 --> 00:37:43,130
other tools although you can do online

00:37:40,860 --> 00:37:46,830
schema change in the procore no tool kit

00:37:43,130 --> 00:37:48,720
it seems like it's kind of it's not the

00:37:46,830 --> 00:37:49,680
production quality yet like behringer

00:37:48,720 --> 00:37:51,150
supposed to the other day and he's like

00:37:49,680 --> 00:37:53,220
well if you're using it let me know if

00:37:51,150 --> 00:37:55,500
it corrupted your data or not and I'm

00:37:53,220 --> 00:37:59,760
like hmm he's like well I tested it on

00:37:55,500 --> 00:38:01,170
to my stuff and I'm like hmm like I know

00:37:59,760 --> 00:38:02,850
you're coming from a place we like it

00:38:01,170 --> 00:38:04,230
didn't do it on mine so let me know if

00:38:02,850 --> 00:38:08,290
it did it on yours but it's not kind of

00:38:04,230 --> 00:38:10,630
like no just keeps me up at night

00:38:08,290 --> 00:38:12,970
so yeah there's also things like success

00:38:10,630 --> 00:38:14,590
tool to do security audit on accounts of

00:38:12,970 --> 00:38:16,000
privileges and a lot more stuff so

00:38:14,590 --> 00:38:17,890
that's actually and also I mean these

00:38:16,000 --> 00:38:19,480
are all open source stuff like I think

00:38:17,890 --> 00:38:21,610
they're all written in perl there's also

00:38:19,480 --> 00:38:23,650
security which is by darren Cassar

00:38:21,610 --> 00:38:26,530
actually open our kiss by shlomi know

00:38:23,650 --> 00:38:28,450
who's over in Israel securities by

00:38:26,530 --> 00:38:30,310
Darren Cassar who is I think in Silicon

00:38:28,450 --> 00:38:32,500
Valley but it's another community

00:38:30,310 --> 00:38:35,410
written community you know open source

00:38:32,500 --> 00:38:37,600
kind of tool kit and basically it's for

00:38:35,410 --> 00:38:39,940
ease of user administration it's a bunch

00:38:37,600 --> 00:38:41,290
of store procedures and you know a table

00:38:39,940 --> 00:38:43,030
or two to store things and you can do

00:38:41,290 --> 00:38:45,430
things like clone users block users and

00:38:43,030 --> 00:38:48,520
user roles so those three tool kits are

00:38:45,430 --> 00:38:50,080
actually pretty pretty good good swiss

00:38:48,520 --> 00:38:53,590
army knives for what you need to do with

00:38:50,080 --> 00:38:55,870
mysql speaking of users here's something

00:38:53,590 --> 00:38:57,130
interesting about mysql users names are

00:38:55,870 --> 00:38:59,470
not unique if you have the username

00:38:57,130 --> 00:39:01,510
shiri or the username nagios that's not

00:38:59,470 --> 00:39:05,830
unique what's unique is the username at

00:39:01,510 --> 00:39:08,650
the host so sure yet 1270 201 or nagios

00:39:05,830 --> 00:39:10,810
at monitoring mozilla com those are

00:39:08,650 --> 00:39:13,990
unique what does that mean well that

00:39:10,810 --> 00:39:16,210
means you could have two users with the

00:39:13,990 --> 00:39:16,960
same username different hosts and I

00:39:16,210 --> 00:39:19,510
don't know different privileges

00:39:16,960 --> 00:39:21,400
different passwords that's always a lot

00:39:19,510 --> 00:39:22,570
of fun when you find that for example I

00:39:21,400 --> 00:39:25,570
just found something we're moving data

00:39:22,570 --> 00:39:27,400
centers and we had three we had two data

00:39:25,570 --> 00:39:29,200
centers like we this one in this one and

00:39:27,400 --> 00:39:31,030
we were moving from here to here and so

00:39:29,200 --> 00:39:33,280
I buta was moving databases and

00:39:31,030 --> 00:39:36,370
everything that had a subnet here I

00:39:33,280 --> 00:39:37,840
changes the subnet there but what

00:39:36,370 --> 00:39:40,000
happened was they had changed the

00:39:37,840 --> 00:39:41,410
password here so i've been using an old

00:39:40,000 --> 00:39:42,670
pass and I'm like okay your new server

00:39:41,410 --> 00:39:44,500
is ready and they're like no it doesn't

00:39:42,670 --> 00:39:45,550
work and I realized I went on this

00:39:44,500 --> 00:39:48,010
server I'm like oh it's a different

00:39:45,550 --> 00:39:49,720
password okay so be careful of that and

00:39:48,010 --> 00:39:51,880
if you do change a password you know

00:39:49,720 --> 00:39:53,650
make sure there's no other user on that

00:39:51,880 --> 00:39:55,840
system or you change that other user

00:39:53,650 --> 00:39:58,540
same username different host to that

00:39:55,840 --> 00:40:00,850
password as well I note about the super

00:39:58,540 --> 00:40:02,950
privilege the super privilege is what

00:40:00,850 --> 00:40:05,860
makes something you know kind of the

00:40:02,950 --> 00:40:08,260
root user the user root is not special

00:40:05,860 --> 00:40:09,700
in mysql anybody with a super privilege

00:40:08,260 --> 00:40:11,470
has the same powers as root it's not

00:40:09,700 --> 00:40:12,850
like you know the Linux kernel you know

00:40:11,470 --> 00:40:14,530
where you have you IDs and anything

00:40:12,850 --> 00:40:16,330
under a certain amount no not like that

00:40:14,530 --> 00:40:19,870
at all if you have a super prove that's

00:40:16,330 --> 00:40:21,130
enough so what what does the super proof

00:40:19,870 --> 00:40:23,160
do why is it such a

00:40:21,130 --> 00:40:25,750
powerful thing why should you not have

00:40:23,160 --> 00:40:28,210
people who have the super prive why

00:40:25,750 --> 00:40:29,349
should they not why should that not be

00:40:28,210 --> 00:40:31,029
given out liberally why shouldn't

00:40:29,349 --> 00:40:32,230
everyone just have a super prep well the

00:40:31,029 --> 00:40:33,970
least of your worries is that they can

00:40:32,230 --> 00:40:35,410
shut down mysql and they can do a

00:40:33,970 --> 00:40:37,259
myschool I've been shut down and shut it

00:40:35,410 --> 00:40:39,430
down that's the least of your worries

00:40:37,259 --> 00:40:40,869
one thing that you can set on a slave

00:40:39,430 --> 00:40:43,299
servers you can set a variable called

00:40:40,869 --> 00:40:45,640
read only by default that's off so by

00:40:43,299 --> 00:40:46,869
default is not read only that's good but

00:40:45,640 --> 00:40:47,920
on a slave server you might want to say

00:40:46,869 --> 00:40:51,099
I don't want anything to write to this

00:40:47,920 --> 00:40:52,180
server well somebody has to write to it

00:40:51,099 --> 00:40:53,769
right because the replication has to

00:40:52,180 --> 00:40:56,289
write to it so replications the system

00:40:53,769 --> 00:40:58,720
user and anyone who has the super Priven

00:40:56,289 --> 00:41:01,329
I'll so right to that database the

00:40:58,720 --> 00:41:02,829
awesome part is and I say that so tastic

00:41:01,329 --> 00:41:05,109
Lee is that my skill doesn't even give

00:41:02,829 --> 00:41:06,519
you a warning so if you just log on and

00:41:05,109 --> 00:41:07,960
you're always logging on is rude you

00:41:06,519 --> 00:41:08,920
like write to the database and you

00:41:07,960 --> 00:41:10,630
didn't realize you were on the wrong

00:41:08,920 --> 00:41:11,799
system you don't even get a warning it

00:41:10,630 --> 00:41:13,390
doesn't even say like hey by the way

00:41:11,799 --> 00:41:14,859
this is a read-only system and you're

00:41:13,390 --> 00:41:16,809
about to write to it notjust rights to

00:41:14,859 --> 00:41:18,279
it no problem so that's the second

00:41:16,809 --> 00:41:20,109
reason not to use the super over the

00:41:18,279 --> 00:41:21,819
third reason not to use the super

00:41:20,109 --> 00:41:24,579
previous I referenced a variable called

00:41:21,819 --> 00:41:28,359
max connections earlier by default max

00:41:24,579 --> 00:41:30,279
connections is 151 why 151 well it's one

00:41:28,359 --> 00:41:32,440
more than the amount of max clients that

00:41:30,279 --> 00:41:34,660
you get with Apache anyway let's say you

00:41:32,440 --> 00:41:37,450
set it to let's say 2000 what happens

00:41:34,660 --> 00:41:39,910
when you hit 2000 mysql says up no more

00:41:37,450 --> 00:41:42,549
TCP connections allowed to me sorry go

00:41:39,910 --> 00:41:43,990
home well that's not exactly true my

00:41:42,549 --> 00:41:45,309
school does give you one extra

00:41:43,990 --> 00:41:47,470
connection to somebody with a super

00:41:45,309 --> 00:41:49,390
proof so if your max connections is set

00:41:47,470 --> 00:41:51,910
to 2,000 you can actually have 2001

00:41:49,390 --> 00:41:53,440
people connected that way you can

00:41:51,910 --> 00:41:54,519
actually like login and debug what's

00:41:53,440 --> 00:41:56,230
going on because if you have just

00:41:54,519 --> 00:41:58,480
something that's slamming my SQL queries

00:41:56,230 --> 00:42:01,240
if you restart mysql you'll just be

00:41:58,480 --> 00:42:02,319
slammed with queries again so that's one

00:42:01,240 --> 00:42:04,059
reason not so you don't want to

00:42:02,319 --> 00:42:06,190
necessarily give your say application

00:42:04,059 --> 00:42:08,410
user super proof or you're monitoring

00:42:06,190 --> 00:42:09,490
these are super probe sometimes you need

00:42:08,410 --> 00:42:12,119
to give your monitoring these are super

00:42:09,490 --> 00:42:16,500
pro foot all right what about locking

00:42:12,119 --> 00:42:18,549
table versus row so MySQL has

00:42:16,500 --> 00:42:21,130
specification to you table level locking

00:42:18,549 --> 00:42:23,230
in the server itself any other kind of

00:42:21,130 --> 00:42:25,539
locking whether it's page level locking

00:42:23,230 --> 00:42:27,579
which used to be in bdb but BVB doesn't

00:42:25,539 --> 00:42:30,549
exist anymore or row level locking which

00:42:27,579 --> 00:42:31,380
is uni no TV extra TV or whatever you

00:42:30,549 --> 00:42:33,599
use

00:42:31,380 --> 00:42:35,609
that's in the storage engine itself so

00:42:33,599 --> 00:42:37,170
any storage engine mysql will be able to

00:42:35,609 --> 00:42:38,759
do table level locking anything more

00:42:37,170 --> 00:42:41,640
granular has to be defined in the

00:42:38,759 --> 00:42:43,859
storage engine itself my Isom does table

00:42:41,640 --> 00:42:49,589
level walking this means if you want to

00:42:43,859 --> 00:42:50,970
write to mysql you you have to lock the

00:42:49,589 --> 00:42:53,190
entire table nobody else can read from

00:42:50,970 --> 00:42:56,220
it so that is a really really really

00:42:53,190 --> 00:42:58,920
mutually exclusive lock with a you know

00:42:56,220 --> 00:43:01,289
DB you know you lock the row that you're

00:42:58,920 --> 00:43:03,420
writing to and nothing else if you're

00:43:01,289 --> 00:43:05,339
inserting you might kind of lock that in

00:43:03,420 --> 00:43:08,190
the next row but you know pretty much

00:43:05,339 --> 00:43:11,119
its row level did somebody here no does

00:43:08,190 --> 00:43:14,579
anyone here not know what a deadlock is

00:43:11,119 --> 00:43:15,990
okay a deadlock is let's say you have

00:43:14,579 --> 00:43:19,019
two transactions going on so this

00:43:15,990 --> 00:43:21,630
transaction says I want to write to

00:43:19,019 --> 00:43:22,680
these two rows so it locks those two

00:43:21,630 --> 00:43:24,990
rows but it's not done with the

00:43:22,680 --> 00:43:27,359
transaction so this one says I want to

00:43:24,990 --> 00:43:28,619
write I want to lock this row here so

00:43:27,359 --> 00:43:30,150
this one blocking Easter rose this one's

00:43:28,619 --> 00:43:31,410
locked in this room now this one needs

00:43:30,150 --> 00:43:33,480
to finish the transaction so wants to

00:43:31,410 --> 00:43:34,859
lock this row and this transaction wants

00:43:33,480 --> 00:43:36,420
to lock these rows well neither

00:43:34,859 --> 00:43:38,910
transaction is going to give up blocks

00:43:36,420 --> 00:43:42,240
they already have because they're

00:43:38,910 --> 00:43:44,339
they're not done yet but so it's just a

00:43:42,240 --> 00:43:46,769
stalemate right it's a deadlock that's

00:43:44,339 --> 00:43:48,269
what it is a stalemate so my skill

00:43:46,769 --> 00:43:49,710
actually can recognize when this happens

00:43:48,269 --> 00:43:51,509
and there's a certain time out after

00:43:49,710 --> 00:43:53,849
which it will say okay I'm rolling back

00:43:51,509 --> 00:43:57,119
one of these transactions because it's a

00:43:53,849 --> 00:43:59,940
deadlock scenario buffering wheel of

00:43:57,119 --> 00:44:02,490
memory memories great passions or great

00:43:59,940 --> 00:44:05,400
buffers are great filesystem buffer so

00:44:02,490 --> 00:44:07,740
my Isom by default doesn't it has an

00:44:05,400 --> 00:44:10,559
index buffer but not a data buffer by

00:44:07,740 --> 00:44:12,829
default nodb has and I say to buy

00:44:10,559 --> 00:44:16,170
defaults you can't really change that

00:44:12,829 --> 00:44:18,839
you know DB has one buffer for data and

00:44:16,170 --> 00:44:21,480
indexes so my Isom does not use a data

00:44:18,839 --> 00:44:24,839
index it relies on the file system to

00:44:21,480 --> 00:44:28,230
use data indexes indexes for the data

00:44:24,839 --> 00:44:30,569
files so that could be if you're using

00:44:28,230 --> 00:44:33,599
my Isom which I don't recommend for

00:44:30,569 --> 00:44:36,420
transactions just saying it is good for

00:44:33,599 --> 00:44:37,769
data warehousing so but most people are

00:44:36,420 --> 00:44:38,880
not using data warehousing most people

00:44:37,769 --> 00:44:41,700
are using it for like their you know

00:44:38,880 --> 00:44:44,020
their websites or web applications so

00:44:41,700 --> 00:44:46,660
the file system buffer

00:44:44,020 --> 00:44:49,060
you might want to use direct io4 better

00:44:46,660 --> 00:44:51,100
for not for having to for being able to

00:44:49,060 --> 00:44:52,540
bypass the filesystem buffer that would

00:44:51,100 --> 00:44:54,580
be for you know DB because you know DB

00:44:52,540 --> 00:44:56,620
has its own index and data buffer so why

00:44:54,580 --> 00:44:58,930
would you need extra buffering from the

00:44:56,620 --> 00:45:00,850
file system as well that would rely the

00:44:58,930 --> 00:45:03,550
demon to provide the buffering so you

00:45:00,850 --> 00:45:05,350
might want to think about how your how

00:45:03,550 --> 00:45:06,520
your i/o is happening if you're using

00:45:05,350 --> 00:45:09,310
you know to be you I want to do that and

00:45:06,520 --> 00:45:10,720
again test it because i can tell you six

00:45:09,310 --> 00:45:12,130
ways till Sunday that direct dial will

00:45:10,720 --> 00:45:13,420
be faster on you know TV and you could

00:45:12,130 --> 00:45:15,550
have the one application in the world

00:45:13,420 --> 00:45:18,040
where that's not true so it doesn't

00:45:15,550 --> 00:45:20,860
really matter if 99% of the applications

00:45:18,040 --> 00:45:23,470
out there follow a rule if yours is the

00:45:20,860 --> 00:45:24,910
one percent that doesn't so that's just

00:45:23,470 --> 00:45:28,680
a note in general so now I'm going to

00:45:24,910 --> 00:45:31,720
talk about some configuration options

00:45:28,680 --> 00:45:34,240
the top says a note under score vs dash

00:45:31,720 --> 00:45:35,770
you might see something like a variable

00:45:34,240 --> 00:45:37,240
with more than one word separated by

00:45:35,770 --> 00:45:39,610
dashes or separate about underscores

00:45:37,240 --> 00:45:41,800
here's the deal in the MySQL

00:45:39,610 --> 00:45:44,380
configuration file let my doubts enf

00:45:41,800 --> 00:45:47,530
file that you might have seen around you

00:45:44,380 --> 00:45:49,690
can use either the the hyphens or the

00:45:47,530 --> 00:45:52,150
underscores if you're setting variables

00:45:49,690 --> 00:45:54,190
on the mysql command line it thinks the

00:45:52,150 --> 00:45:56,620
dashes our subtraction unless you like

00:45:54,190 --> 00:45:58,540
escape things so you can escape the

00:45:56,620 --> 00:45:59,770
whole word but I don't like escaping

00:45:58,540 --> 00:46:01,930
things the quotes are like where my

00:45:59,770 --> 00:46:04,360
pinkies are that I never use my pinkies

00:46:01,930 --> 00:46:05,740
right so I always always always use

00:46:04,360 --> 00:46:07,780
underscores because it's just easier

00:46:05,740 --> 00:46:08,890
that way so that I'm never like copying

00:46:07,780 --> 00:46:11,320
and pasting something and accidentally

00:46:08,890 --> 00:46:12,700
doing subtraction and whatever mysql

00:46:11,320 --> 00:46:14,260
tries to be really helpful so it might

00:46:12,700 --> 00:46:15,880
be like oh you want something to be 0

00:46:14,260 --> 00:46:18,670
okay you know you're subtracting

00:46:15,880 --> 00:46:20,860
something and you know the word is 0 I

00:46:18,670 --> 00:46:23,020
don't know my see also tries to be

00:46:20,860 --> 00:46:24,640
helpful I found this out the hard way so

00:46:23,020 --> 00:46:27,070
there's a parameter that you can use in

00:46:24,640 --> 00:46:28,690
certain directives under my and then my

00:46:27,070 --> 00:46:29,950
doubts enf and if you use the might not

00:46:28,690 --> 00:46:31,570
see now if you've seen directives the

00:46:29,950 --> 00:46:34,150
directive is just the little thing in

00:46:31,570 --> 00:46:37,840
brackets and says my SQL or mysql d or

00:46:34,150 --> 00:46:41,920
client or mysql dump well mysqld mysqld

00:46:37,840 --> 00:46:43,960
safe can use the group the group option

00:46:41,920 --> 00:46:46,060
which sets the groups of the files but

00:46:43,960 --> 00:46:47,950
not the mysqld itself I think I'm gonna

00:46:46,060 --> 00:46:50,050
smoke there mysqld safe will use it

00:46:47,950 --> 00:46:53,620
which is the rapper but not mysqld

00:46:50,050 --> 00:46:55,579
however mysqld thinks when you say group

00:46:53,620 --> 00:46:57,650
well you mean group

00:46:55,579 --> 00:46:59,869
cat maxlen which is the maximum length

00:46:57,650 --> 00:47:02,299
for a group concat which is a certain

00:46:59,869 --> 00:47:04,130
function in mysql so i'll say oh you

00:47:02,299 --> 00:47:07,039
know it basically will try to expand it

00:47:04,130 --> 00:47:09,440
if it's a unique kind of prefix and so

00:47:07,039 --> 00:47:12,170
it tries to set it to mysql but that's

00:47:09,440 --> 00:47:14,420
not a valid number but you know it's

00:47:12,170 --> 00:47:15,589
when i convert that to a number 20 so

00:47:14,420 --> 00:47:17,630
what I'll try to do is you'll get these

00:47:15,589 --> 00:47:19,700
like mornings like setting group to cap

00:47:17,630 --> 00:47:21,529
max Len to I don't know I'm truncating

00:47:19,700 --> 00:47:23,180
it it's zero but I can't set it to zero

00:47:21,529 --> 00:47:24,979
because the lowest number i can set it

00:47:23,180 --> 00:47:26,209
to is for because that's the range so

00:47:24,979 --> 00:47:27,589
you see these like weird errors and

00:47:26,209 --> 00:47:29,269
stuff that's because my school will

00:47:27,589 --> 00:47:31,039
actually expand something so if you

00:47:29,269 --> 00:47:32,900
actually type like a variable it would

00:47:31,039 --> 00:47:34,459
expand to a variable with more than one

00:47:32,900 --> 00:47:36,469
word assuming there was only one

00:47:34,459 --> 00:47:38,499
variable it starts like that so if you

00:47:36,469 --> 00:47:40,759
start to see weird errors in your log

00:47:38,499 --> 00:47:42,319
you know check your variables it might

00:47:40,759 --> 00:47:43,670
be that might be why so some

00:47:42,319 --> 00:47:45,410
configuration variables you might want

00:47:43,670 --> 00:47:46,819
to look at and or change this is kind of

00:47:45,410 --> 00:47:48,019
like your this is what I learned this

00:47:46,819 --> 00:47:50,089
weekend itself and I'm going to look

00:47:48,019 --> 00:47:51,529
right now and see what would happen your

00:47:50,089 --> 00:47:52,670
data directory where he's sorting your

00:47:51,529 --> 00:47:55,849
data directory or you're going to run

00:47:52,670 --> 00:47:57,979
out of filesystem space somewhere some

00:47:55,849 --> 00:47:59,749
VAR lib my sequel is the default space

00:47:57,979 --> 00:48:01,400
that things are stored in some people

00:47:59,749 --> 00:48:03,049
like to have you no additional space on

00:48:01,400 --> 00:48:05,499
like you know a net app or something

00:48:03,049 --> 00:48:08,059
they'll use tempter I already said don't

00:48:05,499 --> 00:48:10,729
don't point it to a temporary directory

00:48:08,059 --> 00:48:11,719
or to a battery back right cash some

00:48:10,729 --> 00:48:13,519
people like to put their temporary

00:48:11,719 --> 00:48:16,459
directory in their data directory that

00:48:13,519 --> 00:48:19,459
can work you might also fill up your

00:48:16,459 --> 00:48:21,319
data directory partition if you do that

00:48:19,459 --> 00:48:23,959
so some anything about default storage

00:48:21,319 --> 00:48:27,019
engine equals nodb again if that is

00:48:23,959 --> 00:48:28,819
what's good for you most people though

00:48:27,019 --> 00:48:31,789
I'd say ninety five percent of time what

00:48:28,819 --> 00:48:34,910
you want is a no DB by default mysql is

00:48:31,789 --> 00:48:36,859
my Isom until mysql 55 now i would

00:48:34,910 --> 00:48:38,539
recommend that everyone get on mysql 55

00:48:36,859 --> 00:48:40,880
it's been generally available since

00:48:38,539 --> 00:48:42,380
december of two thousand and what are we

00:48:40,880 --> 00:48:44,299
in 12 now so it was december two

00:48:42,380 --> 00:48:46,430
thousand ten so it's been a year and a

00:48:44,299 --> 00:48:48,729
half that has been GA it's all it's

00:48:46,430 --> 00:48:51,440
stable I'm moving my stuff over from

00:48:48,729 --> 00:48:52,609
Mozilla moving stuff over there I only

00:48:51,440 --> 00:48:54,739
started working ammo still about six

00:48:52,609 --> 00:48:56,690
months ago so we have some things on 50

00:48:54,739 --> 00:48:58,969
and some things on 51 most of the

00:48:56,690 --> 00:49:01,670
stuff's on 50 and we're moving or

00:48:58,969 --> 00:49:03,890
changing to 55 so I would definitely

00:49:01,670 --> 00:49:05,209
recommend that and not only am I

00:49:03,890 --> 00:49:07,369
recommending and I'm practicing what I

00:49:05,209 --> 00:49:07,890
preach concurrent insider' equals 2 I

00:49:07,369 --> 00:49:09,299
did

00:49:07,890 --> 00:49:10,920
kind of lie to you before when I said if

00:49:09,299 --> 00:49:13,769
you wanted to write to mysql you had to

00:49:10,920 --> 00:49:16,260
lock a whole table if you want to insert

00:49:13,769 --> 00:49:18,720
because mysql my Isom will actually

00:49:16,260 --> 00:49:20,250
insert concurrently so it inserts not

00:49:18,720 --> 00:49:21,930
currently insert sequentially so it

00:49:20,250 --> 00:49:24,000
inserts the next row and the next row in

00:49:21,930 --> 00:49:26,579
the next row what you can set is you can

00:49:24,000 --> 00:49:30,359
set current insert equals 1 and what

00:49:26,579 --> 00:49:32,760
that will do is it will allow more than

00:49:30,359 --> 00:49:34,500
one insert to happen at a time if you

00:49:32,760 --> 00:49:37,099
are just inserting to the end of the

00:49:34,500 --> 00:49:39,930
table and if there's no fragmentation in

00:49:37,099 --> 00:49:41,609
the file itself concurrent insert equals

00:49:39,930 --> 00:49:43,140
to 2 and that what that means is it'll

00:49:41,609 --> 00:49:45,599
actually try to go back and like fill in

00:49:43,140 --> 00:49:47,400
the fragmentation if it's there that's

00:49:45,599 --> 00:49:49,049
why you can't do it concurrently it's

00:49:47,400 --> 00:49:51,089
like that fiends recurrent insert equals

00:49:49,049 --> 00:49:52,680
to two it doesn't care if it's

00:49:51,089 --> 00:49:54,299
fragmented will actually just you know

00:49:52,680 --> 00:49:56,119
append things to the end but your

00:49:54,299 --> 00:49:58,500
fragmentation does get a little worse

00:49:56,119 --> 00:49:59,670
now again if you're not using my isomer

00:49:58,500 --> 00:50:01,039
probably doesn't matter but you know

00:49:59,670 --> 00:50:05,220
doesn't cost anything to set this

00:50:01,039 --> 00:50:07,619
character set server equals utf-8 by

00:50:05,220 --> 00:50:10,559
default mysql is character said is latin

00:50:07,619 --> 00:50:12,210
one mysql escalation is swedish know of

00:50:10,559 --> 00:50:15,240
this collation it's the way you order

00:50:12,210 --> 00:50:16,890
things so you know a comes before B or

00:50:15,240 --> 00:50:18,809
capital Abe comes before lowercase a

00:50:16,890 --> 00:50:22,380
however that happens that's that's your

00:50:18,809 --> 00:50:25,849
collation Latin one Swedish because you

00:50:22,380 --> 00:50:30,240
know that's Monty Monty denius who wrote

00:50:25,849 --> 00:50:32,430
mom mysql the software that we use so

00:50:30,240 --> 00:50:34,019
character set server equals utf-8 will

00:50:32,430 --> 00:50:37,650
save you a lot of hassle in the long run

00:50:34,019 --> 00:50:40,349
because if you're storing non-latin one

00:50:37,650 --> 00:50:43,440
characters into a latin one table you

00:50:40,349 --> 00:50:45,089
can actually do that but if you try to

00:50:43,440 --> 00:50:48,900
actually convert the table to utf-8 then

00:50:45,089 --> 00:50:51,269
you get gibberish some more gotchas skip

00:50:48,900 --> 00:50:54,359
name resolve so by default my school

00:50:51,269 --> 00:50:56,549
does a 55 Way handshake when you

00:50:54,359 --> 00:50:58,109
authenticate so you say ok I'm going to

00:50:56,549 --> 00:50:59,579
here's this user at the hostname and

00:50:58,109 --> 00:51:00,630
here's my salted password and I'm

00:50:59,579 --> 00:51:02,789
sending it to you whatever and I'm

00:51:00,630 --> 00:51:04,230
coming back well one of the things my

00:51:02,789 --> 00:51:08,549
skill does is if you're using host names

00:51:04,230 --> 00:51:11,250
like monitoring mozilla com it will try

00:51:08,549 --> 00:51:15,390
to do a dns resolution so if your dns is

00:51:11,250 --> 00:51:16,769
slow then you will see in your when you

00:51:15,390 --> 00:51:18,089
do a show process you'll actually see

00:51:16,769 --> 00:51:20,009
these things called on authenticated

00:51:18,089 --> 00:51:20,810
user which might be really scary but

00:51:20,009 --> 00:51:22,100
that means is it has

00:51:20,810 --> 00:51:23,840
finish doing that handshake yet so it's

00:51:22,100 --> 00:51:25,880
not authenticated it's not going to run

00:51:23,840 --> 00:51:28,100
any queries but it's not authenticated

00:51:25,880 --> 00:51:29,540
yet if when DNS is slow those can kind

00:51:28,100 --> 00:51:31,520
of start to pile up you might run out of

00:51:29,540 --> 00:51:33,560
max connections whatever so a lot of

00:51:31,520 --> 00:51:35,960
people just do skip named resolve if you

00:51:33,560 --> 00:51:37,880
do that then your user definitions your

00:51:35,960 --> 00:51:40,370
hosts can't be host names they have to

00:51:37,880 --> 00:51:42,230
be IP addresses and we say can't my

00:51:40,370 --> 00:51:43,550
skills very user friendly what will

00:51:42,230 --> 00:51:46,010
happen is you'll get when you start

00:51:43,550 --> 00:51:47,870
mysql you get a little error a little

00:51:46,010 --> 00:51:49,490
warning in your arrow log and says hey

00:51:47,870 --> 00:51:51,020
by the way i'm throwing out these host

00:51:49,490 --> 00:51:51,890
names I'd I can't I don't know what

00:51:51,020 --> 00:51:53,150
these are because I won't be able to

00:51:51,890 --> 00:51:55,430
resolve them so I'm not really using

00:51:53,150 --> 00:51:56,930
them so when I say can't well that's not

00:51:55,430 --> 00:51:57,740
really true but you shouldn't have it

00:51:56,930 --> 00:51:58,910
because you won't be able to

00:51:57,740 --> 00:52:01,490
authenticate you'll figure that out

00:51:58,910 --> 00:52:04,760
pretty quickly you know DB file / table

00:52:01,490 --> 00:52:07,010
by default this is set to 0 it's not set

00:52:04,760 --> 00:52:09,350
at all you want to set it to one or if

00:52:07,010 --> 00:52:10,880
you just put the phrase you need to be

00:52:09,350 --> 00:52:13,340
fallible table in your config file it'll

00:52:10,880 --> 00:52:15,080
set it to one for you what this does is

00:52:13,340 --> 00:52:17,360
it means for every you know DB table it

00:52:15,080 --> 00:52:18,800
has a separate file for data and indexes

00:52:17,360 --> 00:52:20,870
as opposed to the centralized data

00:52:18,800 --> 00:52:22,250
dictionary the problem with that is that

00:52:20,870 --> 00:52:25,120
if you have a centralized data

00:52:22,250 --> 00:52:27,410
dictionary and you defragment a table

00:52:25,120 --> 00:52:28,940
you know you here here's your data

00:52:27,410 --> 00:52:30,740
dictionary or defragmenting table the

00:52:28,940 --> 00:52:32,480
lives here well now you've reclaimed

00:52:30,740 --> 00:52:34,580
this space here but it can only be used

00:52:32,480 --> 00:52:36,410
for this table the other difficult thing

00:52:34,580 --> 00:52:38,330
is it's hard to see how big each table

00:52:36,410 --> 00:52:40,520
is if you're using unity befoul per

00:52:38,330 --> 00:52:42,860
table you can easily see how big each

00:52:40,520 --> 00:52:45,260
table is because you can LS the files

00:52:42,860 --> 00:52:47,780
and look at them temp table size versus

00:52:45,260 --> 00:52:50,320
max-heap table size mysql rights to

00:52:47,780 --> 00:52:52,700
temporary tables things like that if

00:52:50,320 --> 00:52:54,320
there's a maximum size that will write

00:52:52,700 --> 00:52:55,550
to a temporary table before it starts to

00:52:54,320 --> 00:52:57,590
write to disk so if you have a lot of

00:52:55,550 --> 00:52:59,810
intermediate results it'll right into a

00:52:57,590 --> 00:53:01,040
temporary table in memory but then it

00:52:59,810 --> 00:53:03,350
will have to save it to a disk if it

00:53:01,040 --> 00:53:05,300
gets too big well that size is

00:53:03,350 --> 00:53:07,430
determined by both these parameters so

00:53:05,300 --> 00:53:09,830
if and it's the lower of both of them so

00:53:07,430 --> 00:53:11,570
i think in one version by default one

00:53:09,830 --> 00:53:13,670
was set to 16 megabytes and run a set of

00:53:11,570 --> 00:53:15,140
32 megabytes which is ridiculous which

00:53:13,670 --> 00:53:17,180
means that your temporary table size can

00:53:15,140 --> 00:53:20,150
be 16 megabytes I think they changed it

00:53:17,180 --> 00:53:21,770
to be either 16 for both 32 for both but

00:53:20,150 --> 00:53:24,170
just if you realize you want to change

00:53:21,770 --> 00:53:25,370
that setting for temporary table size

00:53:24,170 --> 00:53:26,540
you have to change both those variables

00:53:25,370 --> 00:53:29,120
so that's something that's kind of a

00:53:26,540 --> 00:53:31,160
gotcha you know DB parameters you want

00:53:29,120 --> 00:53:33,560
to make sure these set the Eno DB buffer

00:53:31,160 --> 00:53:35,600
pool size some people say eighty percent

00:53:33,560 --> 00:53:38,330
of your total memory if you're using you

00:53:35,600 --> 00:53:40,490
know DB is your main storage engine if

00:53:38,330 --> 00:53:44,690
you're starting to get like 64 gigs of

00:53:40,490 --> 00:53:45,980
RAM that might be a lot in one go so

00:53:44,690 --> 00:53:47,330
yeah it's something to think about like

00:53:45,980 --> 00:53:49,280
what's your again what's your active

00:53:47,330 --> 00:53:52,040
working set how big do you want your

00:53:49,280 --> 00:53:54,470
your buffer pool to be you know to be

00:53:52,040 --> 00:53:55,970
flush method so you can actually in some

00:53:54,470 --> 00:53:59,360
like version Solaris or whatever you can

00:53:55,970 --> 00:54:01,280
actually use different flush methods to

00:53:59,360 --> 00:54:03,800
flush your logs to disk and it can be

00:54:01,280 --> 00:54:05,240
faster or slower again some people say

00:54:03,800 --> 00:54:07,820
well if you're using phalaris do this if

00:54:05,240 --> 00:54:10,700
yours in Linux do that test benchmark

00:54:07,820 --> 00:54:12,950
have fun you know to be flush logs at

00:54:10,700 --> 00:54:15,380
transaction commits by default when you

00:54:12,950 --> 00:54:17,540
commit a transaction and if you're not

00:54:15,380 --> 00:54:21,230
using transactions just when you enter

00:54:17,540 --> 00:54:24,020
in a statement mysql flushes the logs to

00:54:21,230 --> 00:54:25,700
the disk and waits for it to flush to

00:54:24,020 --> 00:54:29,150
the disk it flushes the log to memory

00:54:25,700 --> 00:54:30,860
and the memory logs flushed to disk if

00:54:29,150 --> 00:54:33,200
you set and that's the default which is

00:54:30,860 --> 00:54:35,360
one if you set it to zero it just

00:54:33,200 --> 00:54:37,610
doesn't worry about committing into the

00:54:35,360 --> 00:54:39,140
to the log or the disk if you set it to

00:54:37,610 --> 00:54:41,030
two you know to be flush logs a

00:54:39,140 --> 00:54:42,170
transaction commits equals to two what

00:54:41,030 --> 00:54:44,240
it will do is it will flush it to the

00:54:42,170 --> 00:54:47,090
memory but it won't bother to wait to

00:54:44,240 --> 00:54:49,070
flush it to the disks so you might have

00:54:47,090 --> 00:54:50,690
like a second of transactions that are

00:54:49,070 --> 00:54:53,380
lost if you do that but you don't have

00:54:50,690 --> 00:54:56,210
to wait for that I owe to happen so on

00:54:53,380 --> 00:54:57,710
large systems where it's okay to lose

00:54:56,210 --> 00:55:00,100
like half a second of data or a second

00:54:57,710 --> 00:55:03,770
of data usually you set that to to

00:55:00,100 --> 00:55:05,510
logging so there's a lot of logging in

00:55:03,770 --> 00:55:07,070
minus QL you want to make sure that your

00:55:05,510 --> 00:55:09,170
error logging it doesn't error log by

00:55:07,070 --> 00:55:12,380
default you want to turn it on make sure

00:55:09,170 --> 00:55:15,470
you specify the file and do that because

00:55:12,380 --> 00:55:17,930
sometimes you sometimes the the default

00:55:15,470 --> 00:55:19,580
place it logs to is as al obscure so I

00:55:17,930 --> 00:55:22,790
think it does actually log 2 VAR lib my

00:55:19,580 --> 00:55:24,080
sequel hostname BRR but sometimes it

00:55:22,790 --> 00:55:27,020
doesn't log I'm not quite sure exactly

00:55:24,080 --> 00:55:28,730
when it does one doesn't I would always

00:55:27,020 --> 00:55:31,790
put log warnings because the warnings

00:55:28,730 --> 00:55:35,600
are usually not noise in MySQL expire

00:55:31,790 --> 00:55:38,270
logs days yep this is in mysql when you

00:55:35,600 --> 00:55:40,580
have binary logs they can just keep

00:55:38,270 --> 00:55:42,950
filling the database after expired logs

00:55:40,580 --> 00:55:43,800
days every time mysql flushes the binary

00:55:42,950 --> 00:55:46,860
log it will look

00:55:43,800 --> 00:55:48,180
see how old the the oldest binary log is

00:55:46,860 --> 00:55:49,740
and it will actually purge up to that

00:55:48,180 --> 00:55:51,600
number of days so if you're doing like

00:55:49,740 --> 00:55:53,790
daily backups you can probably set

00:55:51,600 --> 00:55:54,990
expire logs days 27 because you know

00:55:53,790 --> 00:55:56,640
when you're gonna have to go to pass the

00:55:54,990 --> 00:55:58,080
last seven days but if you're like

00:55:56,640 --> 00:55:59,460
taking a backup of something over a

00:55:58,080 --> 00:56:01,670
weekend just like that you might want

00:55:59,460 --> 00:56:04,350
like three or four days vlogs at least

00:56:01,670 --> 00:56:06,630
more logging log slave updates so I was

00:56:04,350 --> 00:56:08,880
telling you about replication and how

00:56:06,630 --> 00:56:10,350
replication from the slave goes to the

00:56:08,880 --> 00:56:12,600
master takes the binary log saves the

00:56:10,350 --> 00:56:15,540
relay logs well by default mysql does

00:56:12,600 --> 00:56:17,760
not log in its own binary log on the

00:56:15,540 --> 00:56:19,980
slave any transactions that come through

00:56:17,760 --> 00:56:21,720
the master it only logs what happens on

00:56:19,980 --> 00:56:24,720
the server what happens on the server

00:56:21,720 --> 00:56:26,070
stays on the server right but so usually

00:56:24,720 --> 00:56:28,080
what you would want is log slave updates

00:56:26,070 --> 00:56:29,880
because if you have to play detective

00:56:28,080 --> 00:56:31,380
you want to know what happened on that

00:56:29,880 --> 00:56:33,270
server you don't just want to know what

00:56:31,380 --> 00:56:35,610
initiated server you want to know

00:56:33,270 --> 00:56:38,130
everything to happen so you want to hit

00:56:35,610 --> 00:56:41,280
log slave updates similarly if you have

00:56:38,130 --> 00:56:43,260
a slow query log on if there are slow

00:56:41,280 --> 00:56:44,430
queries that are coming from the master

00:56:43,260 --> 00:56:46,050
to the slave they're not logged by

00:56:44,430 --> 00:56:50,190
default you want logs low slave

00:56:46,050 --> 00:56:51,690
statements similarly if you're if you

00:56:50,190 --> 00:56:54,150
want administrative statements like

00:56:51,690 --> 00:56:56,010
optimize table to be logged you want to

00:56:54,150 --> 00:56:59,520
make sure that this log slow admin

00:56:56,010 --> 00:57:01,980
statements is set long query time so by

00:56:59,520 --> 00:57:03,150
default so cray logs not on you want to

00:57:01,980 --> 00:57:05,460
turn it on and I think I have a slide

00:57:03,150 --> 00:57:07,590
later with some of those parameters I

00:57:05,460 --> 00:57:09,750
may not but anyway it's like slow query

00:57:07,590 --> 00:57:13,170
log equals on and log output equals file

00:57:09,750 --> 00:57:16,110
and slow query log file equals path to

00:57:13,170 --> 00:57:18,480
file so long query time by default is 10

00:57:16,110 --> 00:57:21,540
which means that anything over 10

00:57:18,480 --> 00:57:24,000
seconds you'll see that's really long

00:57:21,540 --> 00:57:25,380
your your users are wig on if your

00:57:24,000 --> 00:57:27,840
website takes more than 10 seconds to

00:57:25,380 --> 00:57:29,400
load so some people set this to 0 to

00:57:27,840 --> 00:57:31,230
show everything some people set it to

00:57:29,400 --> 00:57:32,490
two you know aylin would see things of

00:57:31,230 --> 00:57:35,160
two seconds but you probably don't want

00:57:32,490 --> 00:57:37,340
the default of 10 log queries not using

00:57:35,160 --> 00:57:41,210
indexes can anyone guess what that does

00:57:37,340 --> 00:57:43,500
it logs queries that don't use indexes

00:57:41,210 --> 00:57:45,030
right which is great except when you

00:57:43,500 --> 00:57:47,880
have a row of when you have a table of

00:57:45,030 --> 00:57:49,260
like 10 rows that's probably never gonna

00:57:47,880 --> 00:57:50,670
use an index like if it's like 10 rows

00:57:49,260 --> 00:57:53,390
and 2 columns you probably wouldn't have

00:57:50,670 --> 00:57:55,490
an index to use so there's another

00:57:53,390 --> 00:57:57,920
parameter called min examined row limit

00:57:55,490 --> 00:58:00,320
which makes the minimum examined row

00:57:57,920 --> 00:58:01,880
limit of files that show up in the query

00:58:00,320 --> 00:58:04,220
something so you might want to say show

00:58:01,880 --> 00:58:05,750
me the queries not using indexes but

00:58:04,220 --> 00:58:07,100
only if they're like a thousand rows or

00:58:05,750 --> 00:58:08,660
more because if they're less than a

00:58:07,100 --> 00:58:11,570
thousand rows and I using index I don't

00:58:08,660 --> 00:58:13,700
care max max connections where you

00:58:11,570 --> 00:58:15,470
talked about Max connect errors so

00:58:13,700 --> 00:58:17,990
here's something interesting by default

00:58:15,470 --> 00:58:21,800
max connect errors in mysql is 10 what

00:58:17,990 --> 00:58:23,540
that means is there are 10 tries that

00:58:21,800 --> 00:58:24,710
you get to log in with a correct like

00:58:23,540 --> 00:58:28,520
username and password before you're

00:58:24,710 --> 00:58:30,050
locked out so if you log in three times

00:58:28,520 --> 00:58:31,400
with the wrong password and then one

00:58:30,050 --> 00:58:33,770
time with the right password the counter

00:58:31,400 --> 00:58:34,850
is reset by default it's 10 you log in

00:58:33,770 --> 00:58:38,300
10 times in a row with the wrong

00:58:34,850 --> 00:58:40,640
password and and your account is locked

00:58:38,300 --> 00:58:41,810
that's pretty cool right and you

00:58:40,640 --> 00:58:43,130
probably didn't know about it so 10 is

00:58:41,810 --> 00:58:44,810
probably pretty good default because you

00:58:43,130 --> 00:58:47,360
didn't even know about it right well

00:58:44,810 --> 00:58:48,860
what happens if you want so first of all

00:58:47,360 --> 00:58:50,780
this is a global parameter which means

00:58:48,860 --> 00:58:53,000
that you could say shiri is allowed to

00:58:50,780 --> 00:58:54,410
have ten errors before she connects with

00:58:53,000 --> 00:58:56,360
John you can only connect three times

00:58:54,410 --> 00:58:57,590
before we lock his account nope you

00:58:56,360 --> 00:59:00,380
can't do that you can there's only one

00:58:57,590 --> 00:59:02,390
global setting for that the other thing

00:59:00,380 --> 00:59:05,360
is when you unlock to how do you unlock

00:59:02,390 --> 00:59:08,150
the users you do a flush hosts or when

00:59:05,360 --> 00:59:10,280
you restart mysql things go away so you

00:59:08,150 --> 00:59:11,990
can't unlock shiryu but not unlock John

00:59:10,280 --> 00:59:14,690
so it's a pretty cool feature to have

00:59:11,990 --> 00:59:16,940
but it's kind of sucking its global max

00:59:14,690 --> 00:59:20,390
allowed packet basically is the maximum

00:59:16,940 --> 00:59:23,690
allowed pakka the MySQL allows to read

00:59:20,390 --> 00:59:26,690
or write when this is a problem it will

00:59:23,690 --> 00:59:28,430
be really obvious it will say can't do

00:59:26,690 --> 00:59:30,260
this because max allowed packet isn't

00:59:28,430 --> 00:59:32,360
big enough increase the size of max loud

00:59:30,260 --> 00:59:33,590
packet that's the error message so you

00:59:32,360 --> 00:59:34,970
don't have to worry too much about it

00:59:33,590 --> 00:59:38,510
but you probably will see it in your

00:59:34,970 --> 00:59:40,580
travels mysql query cache i have a query

00:59:38,510 --> 00:59:43,070
cache assistant here which is actually

00:59:40,580 --> 00:59:45,940
really really really very useful let me

00:59:43,070 --> 00:59:48,740
go to the tab group that has it slides

00:59:45,940 --> 00:59:50,990
here is this query cache tuning so by

00:59:48,740 --> 00:59:52,610
default mysql has a really crappy query

00:59:50,990 --> 00:59:54,670
cache i would go into exactly how it

00:59:52,610 --> 00:59:57,110
works so you can see how crappy it is

00:59:54,670 --> 00:59:59,180
but this is a very simple query cache

00:59:57,110 --> 01:00:00,620
tuner you don't even need to write it

00:59:59,180 --> 01:00:03,350
down because the optimal size for your

01:00:00,620 --> 01:00:05,349
query cache is 0 don't use MySQL query

01:00:03,350 --> 01:00:08,130
cache you can use it

01:00:05,349 --> 01:00:10,420
you have a specific implementation of it

01:00:08,130 --> 01:00:12,220
but I'm going to run out of time so Mike

01:00:10,420 --> 01:00:15,130
explain how it works there may be a use

01:00:12,220 --> 01:00:17,109
case for it but 99.999 percent of the

01:00:15,130 --> 01:00:18,160
time you don't need it there are some

01:00:17,109 --> 01:00:19,660
other caches that you're going to want

01:00:18,160 --> 01:00:21,430
to set I think I'm running out of time

01:00:19,660 --> 01:00:22,809
there's some time outs the difference

01:00:21,430 --> 01:00:25,660
between wait time out an interactive

01:00:22,809 --> 01:00:28,630
time out is that wait time out is the

01:00:25,660 --> 01:00:30,460
time out for when you have a

01:00:28,630 --> 01:00:31,749
non-interactive session so like if PHP

01:00:30,460 --> 01:00:33,279
is connecting or whatever if you

01:00:31,749 --> 01:00:34,150
actually log into mysql you have a

01:00:33,279 --> 01:00:36,249
command prompt and you're sitting

01:00:34,150 --> 01:00:37,180
waiting that's an interactive timeout so

01:00:36,249 --> 01:00:38,680
you can see how you might want to set

01:00:37,180 --> 01:00:40,269
those values differently oh and now at

01:00:38,680 --> 01:00:41,529
the end are there any questions or

01:00:40,269 --> 01:00:43,420
comments I wrote a book called the my

01:00:41,529 --> 01:00:45,009
school administrators Bible you might be

01:00:43,420 --> 01:00:46,479
interested in its it's about it's a

01:00:45,009 --> 01:00:47,650
couple years old at this point but most

01:00:46,479 --> 01:00:50,229
of the information is still pretty valid

01:00:47,650 --> 01:00:51,849
you can ignore anything about Falcon in

01:00:50,229 --> 01:00:54,039
there because that's no longer a viable

01:00:51,849 --> 01:00:57,640
storage engine and there's a lot more

01:00:54,039 --> 01:01:03,430
new in the pro conan maria DB patches

01:00:57,640 --> 01:01:07,539
and forks any questions comments

01:01:03,430 --> 01:01:09,009
feedback anything want to know about let

01:01:07,539 --> 01:01:12,249
me explain you what the query cache does

01:01:09,009 --> 01:01:15,190
then very quickly so query cache stores

01:01:12,249 --> 01:01:17,229
a couple things in stores the hash of

01:01:15,190 --> 01:01:18,999
the query so takes the query it makes a

01:01:17,229 --> 01:01:21,130
hash of it and stores that and then it

01:01:18,999 --> 01:01:23,079
gets the results and it stores those and

01:01:21,130 --> 01:01:24,910
then it also has like the list of tables

01:01:23,079 --> 01:01:27,069
that are affected so it stores those

01:01:24,910 --> 01:01:28,869
then if you run the same query again it

01:01:27,069 --> 01:01:31,029
will say oh that's it checks this little

01:01:28,869 --> 01:01:32,619
hash table so I've seen that that query

01:01:31,029 --> 01:01:34,630
hash before so let me give you the

01:01:32,619 --> 01:01:37,719
results that sounds great problem is if

01:01:34,630 --> 01:01:39,309
you change a value so it's not going to

01:01:37,719 --> 01:01:41,349
actually compile a query and do it that

01:01:39,309 --> 01:01:44,049
way so if you have like select star from

01:01:41,349 --> 01:01:45,549
user where user ID equals one that's a

01:01:44,049 --> 01:01:48,009
different query from where I user ID

01:01:45,549 --> 01:01:49,420
equals two so you can't use the cash in

01:01:48,009 --> 01:01:51,400
that scenario if you change

01:01:49,420 --> 01:01:53,589
capitalization or you change white space

01:01:51,400 --> 01:01:55,450
it's not the same query is the hash of

01:01:53,589 --> 01:01:57,640
the query itself this is not very useful

01:01:55,450 --> 01:01:59,589
in that situation the other thing is I

01:01:57,640 --> 01:02:01,119
said it stores results it also stores a

01:01:59,589 --> 01:02:05,109
list of tables there that are in that

01:02:01,119 --> 01:02:07,859
query if you change the data in any of

01:02:05,109 --> 01:02:10,359
the tables that a query uses mysql

01:02:07,859 --> 01:02:12,789
invalidates it because it has no it's a

01:02:10,359 --> 01:02:14,499
very kind of dumb kind of query cache it

01:02:12,789 --> 01:02:16,420
has no idea to knowing whether or not

01:02:14,499 --> 01:02:18,070
you actually changed any of the rose

01:02:16,420 --> 01:02:19,480
results it may be you added rose that

01:02:18,070 --> 01:02:21,790
would show up in that results it doesn't

01:02:19,480 --> 01:02:23,380
know so you might think well we'll take

01:02:21,790 --> 01:02:25,480
our sessions table we'll put a query

01:02:23,380 --> 01:02:26,740
cache on so that all is all cached but

01:02:25,480 --> 01:02:28,840
your sessions tables be written to all

01:02:26,740 --> 01:02:30,310
the time so it's just going to be put in

01:02:28,840 --> 01:02:32,410
the cash into validating put in the cash

01:02:30,310 --> 01:02:34,570
and validated so there are use cases for

01:02:32,410 --> 01:02:38,500
it there's three different kinds of

01:02:34,570 --> 01:02:40,750
query cash types 0 1 and 2 so 0 is off

01:02:38,500 --> 01:02:42,520
one is on which means every query by

01:02:40,750 --> 01:02:44,770
default when we tried to be put in the

01:02:42,520 --> 01:02:47,080
query cache and then the third type is

01:02:44,770 --> 01:02:48,700
you know to which is on demand and the

01:02:47,080 --> 01:02:50,860
only reason that I would ever recommend

01:02:48,700 --> 01:02:52,600
somebody using it is if you specifically

01:02:50,860 --> 01:02:54,700
have like you know there's a prey that's

01:02:52,600 --> 01:02:56,980
run all the time and that table doesn't

01:02:54,700 --> 01:02:58,480
change a lot so it falls exactly into

01:02:56,980 --> 01:03:00,670
the use case for query cache then you

01:02:58,480 --> 01:03:02,380
can actually do an on-demand kind of

01:03:00,670 --> 01:03:05,020
thing you've set the query cache type to

01:03:02,380 --> 01:03:06,790
on demand which is two and then when you

01:03:05,020 --> 01:03:08,320
run your select statement that for the

01:03:06,790 --> 01:03:10,450
one query that is good for you type

01:03:08,320 --> 01:03:13,900
instead of select star for example it be

01:03:10,450 --> 01:03:15,010
select SQL underscore cash star so you

01:03:13,900 --> 01:03:17,040
put that little keyword that it says

01:03:15,010 --> 01:03:19,270
cash this query youth query cache board

01:03:17,040 --> 01:03:23,110
okay that's how the query cache works

01:03:19,270 --> 01:03:25,480
any questions comments feedback don't

01:03:23,110 --> 01:03:27,900
you to wake anyone up all right thank

01:03:25,480 --> 01:03:27,900
you so much

01:04:03,720 --> 01:04:05,780
you

01:04:09,020 --> 01:04:14,069
when we created asterisk over a decade

01:04:11,730 --> 01:04:16,049
ago we could not have imagined that

01:04:14,069 --> 01:04:18,240
asterisk would not only become the most

01:04:16,049 --> 01:04:20,369
widely adopted open source communication

01:04:18,240 --> 01:04:22,410
software on the planet but that it would

01:04:20,369 --> 01:04:24,930
impact the entire industry in the way

01:04:22,410 --> 01:04:26,910
that it has today asterisk has found its

01:04:24,930 --> 01:04:29,549
way in the more than 170 countries and

01:04:26,910 --> 01:04:31,500
virtually every fortune 1000 company the

01:04:29,549 --> 01:04:33,569
success of asterisk has enabled a

01:04:31,500 --> 01:04:35,010
transition of power from the hands of

01:04:33,569 --> 01:04:37,260
the traditional proprietary phone

01:04:35,010 --> 01:04:39,660
vendors into the hands of the users and

01:04:37,260 --> 01:04:41,609
administrators of phone systems using

01:04:39,660 --> 01:04:42,839
this power our customers have created

01:04:41,609 --> 01:04:44,789
all sorts of business changing

01:04:42,839 --> 01:04:46,619
applications from small office phone

01:04:44,789 --> 01:04:49,140
systems to mission-critical call centers

01:04:46,619 --> 01:04:50,760
the international carrier networks in

01:04:49,140 --> 01:04:52,530
fact there's even an entire country

01:04:50,760 --> 01:04:55,140
those communications of a structure runs

01:04:52,530 --> 01:04:57,059
on esters the gym has always been about

01:04:55,140 --> 01:04:58,770
creating technology that expands

01:04:57,059 --> 01:05:00,930
communications capabilities in ways that

01:04:58,770 --> 01:05:02,130
we could never have imagined and that's

01:05:00,930 --> 01:05:04,890
part of what's game-changing about

01:05:02,130 --> 01:05:07,230
Digium today we're doing it again this

01:05:04,890 --> 01:05:09,329
time by introducing a new family of HD

01:05:07,230 --> 01:05:11,430
IP phones that extends control of the

01:05:09,329 --> 01:05:13,200
user all the way to the desktop the

01:05:11,430 --> 01:05:14,910
launch of these new products represents

01:05:13,200 --> 01:05:16,980
the next phase in de jambes history of

01:05:14,910 --> 01:05:19,410
innovation these are the first and only

01:05:16,980 --> 01:05:21,119
IP phones designed to fully leverage the

01:05:19,410 --> 01:05:22,650
power of estrus when we first discussed

01:05:21,119 --> 01:05:24,690
our expectations for building a family

01:05:22,650 --> 01:05:26,849
of phones for use with asterisk our

01:05:24,690 --> 01:05:28,589
requirements were pretty simple we asked

01:05:26,849 --> 01:05:30,210
the team to build the phones such that

01:05:28,589 --> 01:05:32,430
they were easy to install integrate

01:05:30,210 --> 01:05:34,260
provision in use I think you'll soon

01:05:32,430 --> 01:05:36,839
agree our engineers have delivered on

01:05:34,260 --> 01:05:38,460
that goal user feedback is validating

01:05:36,839 --> 01:05:40,589
that when it comes to operation with

01:05:38,460 --> 01:05:42,990
astro space systems including our own

01:05:40,589 --> 01:05:45,569
Switchvox based product these are the

01:05:42,990 --> 01:05:46,890
easiest to use best integrated most

01:05:45,569 --> 01:05:49,470
interoperable products on the market

01:05:46,890 --> 01:05:51,470
today the digitally phones will

01:05:49,470 --> 01:05:53,520
initially include three IP des hommes

01:05:51,470 --> 01:05:55,470
uniquely designed to complement any

01:05:53,520 --> 01:05:57,329
asterisk or switchvox based solution

01:05:55,470 --> 01:06:00,000
these phones are different for a number

01:05:57,329 --> 01:06:02,640
of reasons first there is clue sively

01:06:00,000 --> 01:06:04,079
designed for use with esters secondly

01:06:02,640 --> 01:06:05,690
we've made it really easy to

01:06:04,079 --> 01:06:08,069
autodiscover and provision the phones

01:06:05,690 --> 01:06:09,779
next we've made it easy for the phones

01:06:08,069 --> 01:06:11,700
to access information inside of

01:06:09,779 --> 01:06:13,730
asterisks allowing tight coupling

01:06:11,700 --> 01:06:15,690
between an application and the phone

01:06:13,730 --> 01:06:17,849
additionally we've created an

01:06:15,690 --> 01:06:19,980
applications engine that allows users

01:06:17,849 --> 01:06:23,220
and developers to create and run their

01:06:19,980 --> 01:06:24,990
own apps on the phone and finally we've

01:06:23,220 --> 01:06:26,940
done all of this at a very compelling

01:06:24,990 --> 01:06:28,619
price point at Digium we're always

01:06:26,940 --> 01:06:30,720
thinking of ways to give our customers

01:06:28,619 --> 01:06:33,300
the best value in business phone systems

01:06:30,720 --> 01:06:34,950
and also give them the power to create

01:06:33,300 --> 01:06:36,990
their own solutions or eating

01:06:34,950 --> 01:06:38,700
communications challenge will continue

01:06:36,990 --> 01:06:40,109
to push the boundaries not only to make

01:06:38,700 --> 01:06:42,180
Astra's cooler faster and more

01:06:40,109 --> 01:06:43,800
technologically feature-rich but to make

01:06:42,180 --> 01:06:46,290
asterisk and what communications even

01:06:43,800 --> 01:06:50,000
easier and together we'll change the way

01:06:46,290 --> 01:06:50,000
the world communicates again

01:07:00,390 --> 01:07:07,210
how's that sigh every way this is the

01:07:03,910 --> 01:07:09,370
way to better utilize all your resources

01:07:07,210 --> 01:07:12,820
and it makes managing all your resources

01:07:09,370 --> 01:07:16,680
pretty easy all of the innovation is

01:07:12,820 --> 01:07:20,140
happening in open source the

01:07:16,680 --> 01:07:22,000
collaborative nature and of the you know

01:07:20,140 --> 01:07:24,100
of the community and the speed at which

01:07:22,000 --> 01:07:26,080
these are these you know these these

01:07:24,100 --> 01:07:28,390
deficiencies these bugs are getting

01:07:26,080 --> 01:07:31,000
discovered and then fixed is the thing

01:07:28,390 --> 01:07:33,700
that really shows the power of the you

01:07:31,000 --> 01:07:35,320
know of the open source community it is

01:07:33,700 --> 01:07:39,550
global and it's definitely because of

01:07:35,320 --> 01:07:45,880
the users community people are extremely

01:07:39,550 --> 01:07:47,620
friendly and almost ready to help if you

01:07:45,880 --> 01:07:49,300
go an entire see any day you'll see

01:07:47,620 --> 01:07:51,190
these guys helping each other out and

01:07:49,300 --> 01:07:54,070
they're all doing it like in a selfless

01:07:51,190 --> 01:07:55,900
manner the product is transparent for

01:07:54,070 --> 01:08:00,100
everyone everyone can look at the code

01:07:55,900 --> 01:08:02,140
base everyone can see how CloudStack is

01:08:00,100 --> 01:08:08,020
being built nothing nothing is

01:08:02,140 --> 01:08:10,660
proprietary everything is open in many

01:08:08,020 --> 01:08:14,860
ways it's absolutely vital to the the

01:08:10,660 --> 01:08:18,610
unborn health I'll stack the most

01:08:14,860 --> 01:08:22,430
exciting event in recent memory for me

01:08:18,610 --> 01:08:25,160
was our first developer boot camp

01:08:22,430 --> 01:08:27,830
and our call gave people I gave you two

01:08:25,160 --> 01:08:31,790
weeks notice to come attend I was

01:08:27,830 --> 01:08:36,020
expecting 25 or 30 people so we ended up

01:08:31,790 --> 01:08:38,780
with 87 people and had to go get board

01:08:36,020 --> 01:08:41,330
chairs in the room twice everything

01:08:38,780 --> 01:08:44,570
within cloud computing is commodity and

01:08:41,330 --> 01:08:47,630
is open source and so I don't think that

01:08:44,570 --> 01:08:49,400
you will you'll see anywhere where open

01:08:47,630 --> 01:08:52,430
source is not pervasive in cloud

01:08:49,400 --> 01:08:54,980
computing and so i think it's i think

01:08:52,430 --> 01:08:56,480
it's an assumption i think when you talk

01:08:54,980 --> 01:08:57,620
about cloud computing you're really

01:08:56,480 --> 01:09:03,170
talking about open source cloud

01:08:57,620 --> 01:09:06,200
computing cloud zac is a robust solution

01:09:03,170 --> 01:09:08,330
for large deployments you'll have dozens

01:09:06,200 --> 01:09:12,590
of data centers and thousands of servers

01:09:08,330 --> 01:09:15,290
in each data centers these Hardware is

01:09:12,590 --> 01:09:18,770
going to fail and CloudStack is designed

01:09:15,290 --> 01:09:21,470
to handle number one that mass scale

01:09:18,770 --> 01:09:24,650
number two it's designed to handle the

01:09:21,470 --> 01:09:26,900
failure that inevitably happens in large

01:09:24,650 --> 01:09:30,180
deployments we started working on

01:09:26,900 --> 01:09:33,240
contact over four years ago

01:09:30,180 --> 01:09:35,850
it was the original set of people

01:09:33,240 --> 01:09:38,040
working on it had a background of

01:09:35,850 --> 01:09:41,850
delivering software telcos and service

01:09:38,040 --> 01:09:46,350
providers lots of QA lots of users

01:09:41,850 --> 01:09:50,480
actually using it high availability is a

01:09:46,350 --> 01:09:53,250
key feature multiple hypervisors support

01:09:50,480 --> 01:09:55,680
different network models you can pick up

01:09:53,250 --> 01:09:57,810
whatever suits you better while step

01:09:55,680 --> 01:10:01,320
management server can be deployed in

01:09:57,810 --> 01:10:03,120
different physical machines it

01:10:01,320 --> 01:10:04,770
definitely has a huge footprint it's

01:10:03,120 --> 01:10:10,170
being deployed everywhere there's a

01:10:04,770 --> 01:10:11,900
major movie studio that they were using

01:10:10,170 --> 01:10:15,090
CloudStack they were using it to

01:10:11,900 --> 01:10:17,280
transcode video and I thought that was

01:10:15,090 --> 01:10:18,600
terribly fascinating what I found more

01:10:17,280 --> 01:10:21,870
fascinating is what they did during

01:10:18,600 --> 01:10:24,630
lunch where they would spin up you know

01:10:21,870 --> 01:10:26,010
50 or 60 game servers then as soon as

01:10:24,630 --> 01:10:27,930
lunch was over they would destroy all

01:10:26,010 --> 01:10:32,070
the instances and get back to doing real

01:10:27,930 --> 01:10:33,390
work cloudstack is vast it touches so

01:10:32,070 --> 01:10:35,490
many different aspects and there's no

01:10:33,390 --> 01:10:37,860
one person that's kind of like a master

01:10:35,490 --> 01:10:41,970
of all those realms I think clouds stack

01:10:37,860 --> 01:10:44,190
as a project is going to be one of the

01:10:41,970 --> 01:10:48,240
leaders simply because it's some of the

01:10:44,190 --> 01:10:53,670
most feature fallen and and robust

01:10:48,240 --> 01:10:56,600
platforms out they were I don't see your

01:10:53,670 --> 01:10:56,600

YouTube URL: https://www.youtube.com/watch?v=w0oWDhrIzzo


