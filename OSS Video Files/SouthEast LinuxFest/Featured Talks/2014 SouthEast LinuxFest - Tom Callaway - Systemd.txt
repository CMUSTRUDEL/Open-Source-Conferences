Title: 2014 SouthEast LinuxFest - Tom Callaway - Systemd
Publication date: 2015-05-02
Playlist: Featured Talks
Description: 
	2014 SouthEast LinuxFest
Tom Callaway
Systemd
Captions: 
	00:00:00,000 --> 00:00:05,339
the following presentation was recorded

00:00:02,490 --> 00:00:08,189
the 2014 southeast linux fest in

00:00:05,339 --> 00:00:11,070
charlotte north carolina it is licensed

00:00:08,189 --> 00:00:14,880
under a creative commons license for

00:00:11,070 --> 00:00:18,180
more information visit www selfies linux

00:00:14,880 --> 00:00:19,710
pc org the southeast linux fest would

00:00:18,180 --> 00:00:22,740
like to thank the following diamond

00:00:19,710 --> 00:00:26,640
sponsors in 2014 for helping make these

00:00:22,740 --> 00:00:29,550
videos possible clue my name is Tom

00:00:26,640 --> 00:00:33,780
Calloway please note is not Leonard pet

00:00:29,550 --> 00:00:36,600
ring if you have a beef with Leonard or

00:00:33,780 --> 00:00:39,059
K or any of the other systemd people now

00:00:36,600 --> 00:00:41,670
is a fantastic time to exit through

00:00:39,059 --> 00:00:43,739
those doors right there sit down at your

00:00:41,670 --> 00:00:45,780
computer and write them the loveliest

00:00:43,739 --> 00:00:48,030
email you can think of using all of your

00:00:45,780 --> 00:00:49,079
favorite expletives don't care I don't

00:00:48,030 --> 00:00:51,270
want to hear it if you have a beef with

00:00:49,079 --> 00:00:53,010
one of them take it up with them I am

00:00:51,270 --> 00:00:56,550
NOT your telephone to communicate beasts

00:00:53,010 --> 00:00:58,230
the red okay just out of the way Who I

00:00:56,550 --> 00:00:59,609
am is I am in the open source and

00:00:58,230 --> 00:01:01,829
standards group at Red Hat I'm in the

00:00:59,609 --> 00:01:03,660
CTOs office my primary job

00:01:01,829 --> 00:01:05,280
responsibilities are with university

00:01:03,660 --> 00:01:06,960
outreach fedora special projects

00:01:05,280 --> 00:01:09,270
relating to open hardware and 3d

00:01:06,960 --> 00:01:11,400
printing none of which have absolutely

00:01:09,270 --> 00:01:14,100
anything to do with systemd however

00:01:11,400 --> 00:01:16,229
Jeremy asked me very nicely if I would

00:01:14,100 --> 00:01:18,570
come out to southeast linux fest 2014

00:01:16,229 --> 00:01:20,130
charlotte and present on the topic of

00:01:18,570 --> 00:01:23,610
system d because he could find no other

00:01:20,130 --> 00:01:25,409
sucker who was willing to do it and I'm

00:01:23,610 --> 00:01:27,000
a willing sucker and I can't fake my way

00:01:25,409 --> 00:01:28,170
through most material and so we will

00:01:27,000 --> 00:01:29,670
attempt to fake our way through the

00:01:28,170 --> 00:01:32,189
material now if any of you are like

00:01:29,670 --> 00:01:34,020
hardcore systemd gurus and experts and

00:01:32,189 --> 00:01:35,700
you already you're like ready with your

00:01:34,020 --> 00:01:37,350
list of twenty seven errors in the man

00:01:35,700 --> 00:01:38,549
page that you want to tear through this

00:01:37,350 --> 00:01:41,040
is not going to be the talk for you I

00:01:38,549 --> 00:01:43,710
apologize I will happily try and solve

00:01:41,040 --> 00:01:46,649
those problems for you later what I am

00:01:43,710 --> 00:01:49,079
going to talk about is what is system d

00:01:46,649 --> 00:01:50,549
how does it work and how you use it

00:01:49,079 --> 00:01:52,229
which are the three big commands that I

00:01:50,549 --> 00:01:55,770
think most people want to understand

00:01:52,229 --> 00:01:59,130
about the new environment so let's get

00:01:55,770 --> 00:02:01,439
down to what is systemd system d is a

00:01:59,130 --> 00:02:04,020
system in session manager for linux it

00:02:01,439 --> 00:02:07,560
is a replacement for the thing that runs

00:02:04,020 --> 00:02:09,239
with PID ones so the very first process

00:02:07,560 --> 00:02:09,580
that starts on your running system after

00:02:09,239 --> 00:02:12,130
the

00:02:09,580 --> 00:02:15,940
Colonel boots in user space is system d

00:02:12,130 --> 00:02:18,010
it is compatible with sis V and Alice B

00:02:15,940 --> 00:02:19,600
salonen scripts so if you have one of

00:02:18,010 --> 00:02:21,340
these things that you've been cargo

00:02:19,600 --> 00:02:23,140
Colton around for the last 20 years and

00:02:21,340 --> 00:02:26,050
you want to continue using it systemd

00:02:23,140 --> 00:02:28,240
will let you do that it is aggressively

00:02:26,050 --> 00:02:30,010
paralyzed and we'll talk about what that

00:02:28,240 --> 00:02:32,020
means a little bit later it is capable

00:02:30,010 --> 00:02:34,840
of activating services from socket

00:02:32,020 --> 00:02:37,240
requests and from d bus triggers so that

00:02:34,840 --> 00:02:39,250
if you want to start something as

00:02:37,240 --> 00:02:40,780
service dependent on something else

00:02:39,250 --> 00:02:42,400
happening in your environment system d

00:02:40,780 --> 00:02:45,730
is able to listen and grab that data and

00:02:42,400 --> 00:02:48,190
start things dynamically it's able to

00:02:45,730 --> 00:02:50,200
start damon's on demand so that when a

00:02:48,190 --> 00:02:52,810
resource is needed it's runs when it's

00:02:50,200 --> 00:02:57,580
not it doesn't and it also is able to

00:02:52,810 --> 00:03:01,090
track processes now how does it do all

00:02:57,580 --> 00:03:05,080
of those things so here's the high level

00:03:01,090 --> 00:03:07,750
details systemd is fast not because it

00:03:05,080 --> 00:03:10,630
was written to be fast but because it

00:03:07,750 --> 00:03:12,700
was written to be parallel it wants to

00:03:10,630 --> 00:03:15,250
start as many services as they can in

00:03:12,700 --> 00:03:16,870
parallel at the same time the logic

00:03:15,250 --> 00:03:19,420
process that goes into the design of

00:03:16,870 --> 00:03:21,160
system d states that when you are

00:03:19,420 --> 00:03:22,870
booting your computer you are not using

00:03:21,160 --> 00:03:26,470
your computer you are waiting for it to

00:03:22,870 --> 00:03:28,959
finish booting and thus utilization of

00:03:26,470 --> 00:03:31,420
your system is irrelevant in that use

00:03:28,959 --> 00:03:34,150
case you are not concerned that your CPU

00:03:31,420 --> 00:03:35,920
and memory are maxed out so why not max

00:03:34,150 --> 00:03:37,660
out your CPU and memory during that

00:03:35,920 --> 00:03:40,090
process in which services are starting

00:03:37,660 --> 00:03:42,580
so that's the model that it uses is it

00:03:40,090 --> 00:03:44,500
an intentionally tries to run as many

00:03:42,580 --> 00:03:46,780
things at the same possible time as they

00:03:44,500 --> 00:03:49,630
can to max out your resources so that

00:03:46,780 --> 00:03:52,810
you boot cleaner faster in parallel it

00:03:49,630 --> 00:03:54,190
also starts less it doesn't start every

00:03:52,810 --> 00:03:56,530
service that you could possibly ever

00:03:54,190 --> 00:03:59,560
need later cups is a great example of

00:03:56,530 --> 00:04:01,420
this traditional and it models start

00:03:59,560 --> 00:04:04,269
cups as a service as you're booting

00:04:01,420 --> 00:04:06,590
other things up but no one is trying to

00:04:04,269 --> 00:04:09,209
print during boot I hope

00:04:06,590 --> 00:04:11,370
you are trying to print later at some

00:04:09,209 --> 00:04:13,049
point when you have a GUI up and you are

00:04:11,370 --> 00:04:14,430
open something and you say okay I would

00:04:13,049 --> 00:04:15,870
like to print this document i would like

00:04:14,430 --> 00:04:17,070
to print these slides i would like this

00:04:15,870 --> 00:04:20,130
print this picture i found on the

00:04:17,070 --> 00:04:22,079
internet that's when you want cups to

00:04:20,130 --> 00:04:24,389
come up and so what you can set up a

00:04:22,079 --> 00:04:25,919
system d will configure cups so that

00:04:24,389 --> 00:04:29,070
it's waiting for a request to come

00:04:25,919 --> 00:04:30,660
across come across the printer port and

00:04:29,070 --> 00:04:32,070
when it sees that request it says hey

00:04:30,660 --> 00:04:34,680
cops you probably should you know start

00:04:32,070 --> 00:04:36,600
or when a prayer list of printers is

00:04:34,680 --> 00:04:37,919
queried it will start cups now depending

00:04:36,600 --> 00:04:40,050
on how your distribution has configured

00:04:37,919 --> 00:04:41,910
this cups may not be actually operating

00:04:40,050 --> 00:04:44,370
in that way but system d is capable of

00:04:41,910 --> 00:04:46,199
doing that other services you probably

00:04:44,370 --> 00:04:48,090
don't need to start on bluetooth d i

00:04:46,199 --> 00:04:49,380
really hope that bluetooth is something

00:04:48,090 --> 00:04:51,210
you can wait for the GUI to start on

00:04:49,380 --> 00:04:53,070
before you before you need to do it and

00:04:51,210 --> 00:04:55,500
you can turn on that Damon when you try

00:04:53,070 --> 00:04:58,289
to make a bluetooth request and

00:04:55,500 --> 00:05:00,449
obviously the parallelization model is

00:04:58,289 --> 00:05:02,310
interesting because the the line on the

00:05:00,449 --> 00:05:04,080
left is how a traditional system a

00:05:02,310 --> 00:05:07,289
parallel Liza's which is not at all it

00:05:04,080 --> 00:05:08,880
says a and then B and then see and then

00:05:07,289 --> 00:05:10,620
D and you can have some crude ordering

00:05:08,880 --> 00:05:12,150
in that based on the numerical system

00:05:10,620 --> 00:05:14,070
and that it will iterate through a set

00:05:12,150 --> 00:05:16,560
of numbers but to be fair most of the

00:05:14,070 --> 00:05:18,630
people I have known that writes this V

00:05:16,560 --> 00:05:19,830
scripts have no idea what that numbering

00:05:18,630 --> 00:05:21,539
system is supposed to be what the

00:05:19,830 --> 00:05:23,580
ordering means on any of that they

00:05:21,539 --> 00:05:25,080
usually end up writing either 0 or 99

00:05:23,580 --> 00:05:27,120
depending on what they think it should

00:05:25,080 --> 00:05:28,710
be and so that it really doesn't have

00:05:27,120 --> 00:05:30,930
any sort of logical sense on what the

00:05:28,710 --> 00:05:32,849
parallelism should be there these even

00:05:30,930 --> 00:05:34,800
the order and then we look at what Susan

00:05:32,849 --> 00:05:36,960
Ubuntu had traditionally done in this

00:05:34,800 --> 00:05:38,700
model this is very much what upstart

00:05:36,960 --> 00:05:39,990
does upstart says hey we're going to go

00:05:38,700 --> 00:05:41,970
through all of the things we're going to

00:05:39,990 --> 00:05:43,410
start d bus oh and then the desktop

00:05:41,970 --> 00:05:45,210
related things will just start those at

00:05:43,410 --> 00:05:46,680
the same time and so all this ended up

00:05:45,210 --> 00:05:48,180
resulting in was you slowing down your

00:05:46,680 --> 00:05:51,360
time to log it on the desktop on these

00:05:48,180 --> 00:05:52,530
platforms Wigan what system d does is

00:05:51,360 --> 00:05:54,990
what's on the right is he starts

00:05:52,530 --> 00:05:56,970
everything at once like there are some

00:05:54,990 --> 00:05:58,919
things that are done before other things

00:05:56,970 --> 00:06:00,990
in a dependency chain because they have

00:05:58,919 --> 00:06:03,419
to be done that way you do want your

00:06:00,990 --> 00:06:04,889
disks to be mounted before you start to

00:06:03,419 --> 00:06:07,199
run things on them it's a little you

00:06:04,889 --> 00:06:09,180
know so it's not a pure parallelization

00:06:07,199 --> 00:06:10,740
model like that but every single thing

00:06:09,180 --> 00:06:13,199
is starting at the same time that

00:06:10,740 --> 00:06:14,669
possibly can be done within the reason

00:06:13,199 --> 00:06:16,650
and again they minimize the number of

00:06:14,669 --> 00:06:19,000
services that have to start first and

00:06:16,650 --> 00:06:22,150
those are written in special targets

00:06:19,000 --> 00:06:24,700
now some more low-level details about

00:06:22,150 --> 00:06:26,500
system d shell is evil now I've written

00:06:24,700 --> 00:06:28,180
some really disgusting shell in my day

00:06:26,500 --> 00:06:31,420
and I'm sure a lot of you have as well

00:06:28,180 --> 00:06:34,450
shell is fast a hack and slow to run

00:06:31,420 --> 00:06:35,860
it's the rule and the existence of every

00:06:34,450 --> 00:06:38,140
single shell interpreter that is out

00:06:35,860 --> 00:06:40,060
there is all to try to speed up shell so

00:06:38,140 --> 00:06:41,680
that it runs faster that's why we have

00:06:40,060 --> 00:06:43,090
bash that's why we have K shell that's

00:06:41,680 --> 00:06:44,800
why we have Z show all these things are

00:06:43,090 --> 00:06:45,970
they have other features too i'm not

00:06:44,800 --> 00:06:49,300
trying to belittle them but they're all

00:06:45,970 --> 00:06:52,720
trying to execute shell faster but shell

00:06:49,300 --> 00:06:54,850
is really really slow to run and it's

00:06:52,720 --> 00:06:56,770
also pretty nasty to maintain over time

00:06:54,850 --> 00:06:58,000
because what will happen is that someone

00:06:56,770 --> 00:07:00,130
will come along and they will say well

00:06:58,000 --> 00:07:01,960
you know this problem you know could be

00:07:00,130 --> 00:07:03,340
solved by adding 13 new functions in

00:07:01,960 --> 00:07:05,110
here that you know other things could

00:07:03,340 --> 00:07:08,710
use and then you have 13 more problems

00:07:05,110 --> 00:07:12,040
later so by moving away from a shell

00:07:08,710 --> 00:07:13,270
model for everything that you can you're

00:07:12,040 --> 00:07:15,430
going to be in a much better place

00:07:13,270 --> 00:07:17,230
there's no reason that the thing that

00:07:15,430 --> 00:07:18,880
controls and monitors and launches

00:07:17,230 --> 00:07:21,280
processes needs to be based in shell

00:07:18,880 --> 00:07:23,830
it's just somebody thought it was clever

00:07:21,280 --> 00:07:26,830
to do it that way literally 30 years ago

00:07:23,830 --> 00:07:29,140
and everybody continue doing it and also

00:07:26,830 --> 00:07:31,570
because it gave you the freedom to write

00:07:29,140 --> 00:07:33,220
some really nasty custom hacks when you

00:07:31,570 --> 00:07:36,070
didn't understand what was going on if

00:07:33,220 --> 00:07:37,870
you pull any Sisyphean it script for

00:07:36,070 --> 00:07:42,700
anything of consequence anything more

00:07:37,870 --> 00:07:45,460
complicated than cups you will discover

00:07:42,700 --> 00:07:47,320
just horrifying things inside of there

00:07:45,460 --> 00:07:48,880
that stuff that has comments that say

00:07:47,320 --> 00:07:52,540
things like I don't know why this works

00:07:48,880 --> 00:07:55,030
but it does you know timing issues

00:07:52,540 --> 00:07:57,610
related to you know components inside of

00:07:55,030 --> 00:07:59,620
it routines that detect which format of

00:07:57,610 --> 00:08:02,530
config file you are using across the 20

00:07:59,620 --> 00:08:06,490
year span of the evolution of the daemon

00:08:02,530 --> 00:08:08,830
and again all of this is because you are

00:08:06,490 --> 00:08:10,690
having to write everything to run from

00:08:08,830 --> 00:08:13,419
the ground up because sister unit is

00:08:10,690 --> 00:08:15,100
dumb as rocks it goes over there some

00:08:13,419 --> 00:08:16,300
shell scripts I'm kicking them they run

00:08:15,100 --> 00:08:19,930
I don't know what's happening but they

00:08:16,300 --> 00:08:21,250
run second thing pig files if you've

00:08:19,930 --> 00:08:22,630
ever done in it script you probably

00:08:21,250 --> 00:08:24,669
noted the first thing I did was I

00:08:22,630 --> 00:08:27,310
dropped a pig file in to tell some tell

00:08:24,669 --> 00:08:29,140
things later what I launched as but very

00:08:27,310 --> 00:08:31,000
few demons are nice enough in modern era

00:08:29,140 --> 00:08:31,650
to simply run on a single pit forever

00:08:31,000 --> 00:08:33,150
they

00:08:31,650 --> 00:08:34,740
look I have children everywhere I've had

00:08:33,150 --> 00:08:36,060
babies everywhere and then you're like

00:08:34,740 --> 00:08:37,409
but that was the only pet file I knew

00:08:36,060 --> 00:08:40,770
about why didn't you write the pit file

00:08:37,409 --> 00:08:42,630
oh damn it's like babies so and again

00:08:40,770 --> 00:08:44,640
some of that is because multithreaded is

00:08:42,630 --> 00:08:46,380
a good model in modern computing but

00:08:44,640 --> 00:08:47,820
when sis pian it was built they said

00:08:46,380 --> 00:08:48,960
well no one will need more than one PID

00:08:47,820 --> 00:08:50,850
what are you talking about this is

00:08:48,960 --> 00:08:52,620
perfectly acceptable so you've had this

00:08:50,850 --> 00:08:54,180
hack we're literally in every single

00:08:52,620 --> 00:08:55,770
shell script you write for Sisyphean it

00:08:54,180 --> 00:08:57,330
you are hacking around the model that

00:08:55,770 --> 00:08:58,860
you wrote out a file that had a number

00:08:57,330 --> 00:09:00,210
that had the process that you launched

00:08:58,860 --> 00:09:02,370
it at and it may not be running anymore

00:09:00,210 --> 00:09:04,080
so when you go to check status on a

00:09:02,370 --> 00:09:05,310
single Pig file with a pit number in

00:09:04,080 --> 00:09:06,630
there that may not be running is so

00:09:05,310 --> 00:09:08,220
system were say I think you're dead I

00:09:06,630 --> 00:09:10,230
think you the server's is dead and it's

00:09:08,220 --> 00:09:11,250
not that it just spawn off a whole bunch

00:09:10,230 --> 00:09:12,089
of children that had children in the

00:09:11,250 --> 00:09:13,440
head children they killed their parents

00:09:12,089 --> 00:09:15,810
and everything is good and you're still

00:09:13,440 --> 00:09:17,550
running but but Sisyphean it knows

00:09:15,810 --> 00:09:19,860
nothing about this and so half of

00:09:17,550 --> 00:09:22,290
Sisyphean niche scripts are custom hacks

00:09:19,860 --> 00:09:24,360
to detect Damon behavior when they spawn

00:09:22,290 --> 00:09:26,250
children and to keep to try and keep

00:09:24,360 --> 00:09:29,550
logging I saw one sister unit script

00:09:26,250 --> 00:09:31,920
once that had about three thousand lines

00:09:29,550 --> 00:09:34,589
of shell code that was doing nothing but

00:09:31,920 --> 00:09:36,779
trying to detect I notify events from

00:09:34,589 --> 00:09:39,630
the disk to try to figure out when the

00:09:36,779 --> 00:09:41,190
daemon had spawned more children because

00:09:39,630 --> 00:09:42,870
it was a proprietary Damon they didn't

00:09:41,190 --> 00:09:44,670
have the source code for but it would

00:09:42,870 --> 00:09:45,959
randomly depending on operation of the

00:09:44,670 --> 00:09:47,459
service would spawn more children off

00:09:45,959 --> 00:09:49,200
and then the parent would disappear and

00:09:47,459 --> 00:09:50,640
they were trying to turn based on disk

00:09:49,200 --> 00:09:52,320
operations with the new pig files were

00:09:50,640 --> 00:09:53,880
so they could do pig tracking so that

00:09:52,320 --> 00:09:55,770
you can rest single command and tell sis

00:09:53,880 --> 00:09:57,930
you in it are any of these pins still

00:09:55,770 --> 00:10:00,450
alive maybe some of them my serve is

00:09:57,930 --> 00:10:03,029
still running and that's a really really

00:10:00,450 --> 00:10:06,450
functionally broken way to try and track

00:10:03,029 --> 00:10:08,190
your status of your service so what

00:10:06,450 --> 00:10:10,440
systemd does for these two problems I'll

00:10:08,190 --> 00:10:13,500
spin back to the shell is evil problem

00:10:10,440 --> 00:10:16,260
the core functions of system dieron see

00:10:13,500 --> 00:10:17,880
their compiled C code they're written to

00:10:16,260 --> 00:10:19,709
be reasonably clean so that if you look

00:10:17,880 --> 00:10:21,480
at the shell you are the code rather you

00:10:19,709 --> 00:10:23,430
can understand why it does the things

00:10:21,480 --> 00:10:24,690
that does and again if you're not

00:10:23,430 --> 00:10:25,860
comfortable looking at C code and you

00:10:24,690 --> 00:10:27,089
are comfortable looking at shell this

00:10:25,860 --> 00:10:28,680
may not be the best thing for you but

00:10:27,089 --> 00:10:30,180
for most people see is reasonably a

00:10:28,680 --> 00:10:31,290
universal programming language at this

00:10:30,180 --> 00:10:33,900
point there is a general understanding

00:10:31,290 --> 00:10:36,089
of how C works this is not going to win

00:10:33,900 --> 00:10:37,620
any obfuscated in C code competitions is

00:10:36,089 --> 00:10:39,540
not intentionally meant to be confusing

00:10:37,620 --> 00:10:40,690
it is very straight forward and says

00:10:39,540 --> 00:10:44,980
these are the things I do

00:10:40,690 --> 00:10:47,680
to start stop monitor a service now for

00:10:44,980 --> 00:10:49,240
tracking what systemd does in this is a

00:10:47,680 --> 00:10:51,340
design decision is to take advantage of

00:10:49,240 --> 00:10:53,110
a piece of code called see groups now if

00:10:51,340 --> 00:10:55,300
you were in Andy's talk this morning

00:10:53,110 --> 00:10:56,650
very first thing I apologize again

00:10:55,300 --> 00:10:58,330
because that was early talk he gave an

00:10:56,650 --> 00:10:59,590
excellent talk from what I hear on see

00:10:58,330 --> 00:11:01,240
groups and how that actually works in

00:10:59,590 --> 00:11:02,740
the linux kernel all the things you can

00:11:01,240 --> 00:11:04,630
do with it i'm not going to go into any

00:11:02,740 --> 00:11:06,190
of those details here today if you want

00:11:04,630 --> 00:11:07,690
that you should corner Andy he have an

00:11:06,190 --> 00:11:10,360
excellent version of that but

00:11:07,690 --> 00:11:13,450
essentially what a see group is is it is

00:11:10,360 --> 00:11:15,910
a model that allows you to tell the

00:11:13,450 --> 00:11:17,680
colonel this process and/or set of

00:11:15,910 --> 00:11:20,110
processes and anything that comes out of

00:11:17,680 --> 00:11:22,540
it are constrained by the size of limits

00:11:20,110 --> 00:11:24,730
and controls and monitors that I define

00:11:22,540 --> 00:11:27,190
for it so you can basically say okay

00:11:24,730 --> 00:11:28,990
we're going to run sun male and we're

00:11:27,190 --> 00:11:31,660
going to create a sea group for sun male

00:11:28,990 --> 00:11:33,610
in the domain that we define and we set

00:11:31,660 --> 00:11:35,710
the limits we set the scope of it and we

00:11:33,610 --> 00:11:38,100
launch and then the colonel SI group

00:11:35,710 --> 00:11:41,710
will actually tell us any time that

00:11:38,100 --> 00:11:43,810
process spawns children dies off makes

00:11:41,710 --> 00:11:45,430
changes what is it currently running out

00:11:43,810 --> 00:11:46,720
what are its utilizations how many

00:11:45,430 --> 00:11:48,550
children are there what are the PID

00:11:46,720 --> 00:11:50,830
numbers all of this is being provided by

00:11:48,550 --> 00:11:52,300
the Linux kernel so we don't need to do

00:11:50,830 --> 00:11:53,620
any custom hacking to figure out what's

00:11:52,300 --> 00:11:55,570
going on with the service the colonel is

00:11:53,620 --> 00:11:57,160
telling us based on the c group so what

00:11:55,570 --> 00:11:59,110
system d does is it launches every

00:11:57,160 --> 00:12:01,420
single service that it runs in its own

00:11:59,110 --> 00:12:03,760
see group this also allows you to do all

00:12:01,420 --> 00:12:06,310
sorts of really cool things like limit

00:12:03,760 --> 00:12:09,040
prop limit resources / service so you

00:12:06,310 --> 00:12:11,350
can say to a service in system d by just

00:12:09,040 --> 00:12:13,120
amending the service file say this is

00:12:11,350 --> 00:12:14,770
the amount of CPU can hit it max this is

00:12:13,120 --> 00:12:16,120
amount of CPU memory you can hit it max

00:12:14,770 --> 00:12:17,980
this is the amount of disk i/o you can

00:12:16,120 --> 00:12:19,660
do it max you can set these limits and

00:12:17,980 --> 00:12:21,850
constrain your services without having

00:12:19,660 --> 00:12:23,170
to write your own custom hacks into the

00:12:21,850 --> 00:12:27,310
city and its grip to do all these things

00:12:23,170 --> 00:12:28,810
it's all built into system d now I want

00:12:27,310 --> 00:12:31,320
to address this upfront because I know

00:12:28,810 --> 00:12:34,150
this is a common concern about systemd

00:12:31,320 --> 00:12:35,830
sometimes systemd eats other components

00:12:34,150 --> 00:12:38,140
it's kind of like pac-man in this way

00:12:35,830 --> 00:12:39,400
and that's a Leonard and a que thing and

00:12:38,140 --> 00:12:41,020
I'm not even going to start to explain

00:12:39,400 --> 00:12:43,330
why that's good or bad and you can take

00:12:41,020 --> 00:12:45,370
that up with them but systemd did eat

00:12:43,330 --> 00:12:46,990
you dev which was a separate component

00:12:45,370 --> 00:12:48,280
written by the same people and they

00:12:46,990 --> 00:12:50,170
decided that it makes sense to live

00:12:48,280 --> 00:12:52,120
inside of system d u-dub does device

00:12:50,170 --> 00:12:53,470
management it creates all of the / dev

00:12:52,120 --> 00:12:54,430
and if you've been doing linux as long

00:12:53,470 --> 00:12:56,050
as i have to remember

00:12:54,430 --> 00:12:57,610
for how we used to do this which was

00:12:56,050 --> 00:13:00,310
with a giant shell script called Mick

00:12:57,610 --> 00:13:01,930
Devon iterating through that you know a

00:13:00,310 --> 00:13:03,580
thousand times to create the dev

00:13:01,930 --> 00:13:05,380
structure thankfully we don't have to do

00:13:03,580 --> 00:13:08,050
that anymore we have you dev it attacks

00:13:05,380 --> 00:13:09,640
dynamic device presence and adding and

00:13:08,050 --> 00:13:12,550
will create the correct device nodes as

00:13:09,640 --> 00:13:15,220
needed sometimes systemd replaces

00:13:12,550 --> 00:13:16,630
components there's a journal component

00:13:15,220 --> 00:13:18,040
inside systemd that does event logging

00:13:16,630 --> 00:13:20,350
and we'll talk about how that works a

00:13:18,040 --> 00:13:22,149
little bit later it has a timers model

00:13:20,350 --> 00:13:23,740
that does cron like event scheduling so

00:13:22,149 --> 00:13:25,420
that you don't have to use cron if you

00:13:23,740 --> 00:13:27,279
don't want to you still can but you

00:13:25,420 --> 00:13:28,899
don't have to and then there's login d

00:13:27,279 --> 00:13:30,760
which is a console kit replacement and

00:13:28,899 --> 00:13:32,950
so if you've ever seen console kit and

00:13:30,760 --> 00:13:34,839
go I have no idea why that is there then

00:13:32,950 --> 00:13:36,970
login d is here for you and we'll talk a

00:13:34,839 --> 00:13:40,899
little bit about what login d is good

00:13:36,970 --> 00:13:42,370
for later now systemd also does have

00:13:40,899 --> 00:13:44,290
some genome integration so if you're not

00:13:42,370 --> 00:13:46,089
a genome fan then you probably don't

00:13:44,290 --> 00:13:48,910
care about any of this but genome

00:13:46,089 --> 00:13:50,290
leverages system these capabilities so

00:13:48,910 --> 00:13:52,240
that the behaviors of system DS

00:13:50,290 --> 00:13:54,220
operation are better supported inside of

00:13:52,240 --> 00:13:55,570
genome some of the other distribution of

00:13:54,220 --> 00:13:58,510
the window managers are working on

00:13:55,570 --> 00:14:00,010
adding the support for systemd but you

00:13:58,510 --> 00:14:01,810
know I'm actually really doesn't run on

00:14:00,010 --> 00:14:05,790
any systems anymore on Linux that don't

00:14:01,810 --> 00:14:10,180
have system d in play the folks at I

00:14:05,790 --> 00:14:11,920
want to say arch tried to pull it out

00:14:10,180 --> 00:14:13,000
systemd out and replace it with

00:14:11,920 --> 00:14:14,589
something else and they were not

00:14:13,000 --> 00:14:16,150
successful with modern genome so they

00:14:14,589 --> 00:14:18,480
and then eventually ended up marking

00:14:16,150 --> 00:14:20,440
system d as a dependency of you know

00:14:18,480 --> 00:14:22,060
some of the applications have hard code

00:14:20,440 --> 00:14:23,860
is support for systemd mutter for

00:14:22,060 --> 00:14:27,240
example is one of the applications not a

00:14:23,860 --> 00:14:29,680
ton of them but there are some now myths

00:14:27,240 --> 00:14:31,450
the mid the system d is only about speed

00:14:29,680 --> 00:14:33,250
is false we talked about this earlier it

00:14:31,450 --> 00:14:35,080
is fast but that's a byproduct of the

00:14:33,250 --> 00:14:36,700
way that was designed they think they

00:14:35,080 --> 00:14:38,350
could make it a lot faster by making the

00:14:36,700 --> 00:14:40,570
code a lot less readable and disgusting

00:14:38,350 --> 00:14:42,010
and they I've opted not to do that so

00:14:40,570 --> 00:14:43,450
that if you open the C code for systemd

00:14:42,010 --> 00:14:45,459
it's all reasonably understandable and

00:14:43,450 --> 00:14:48,070
parsable by someone with a low to medium

00:14:45,459 --> 00:14:50,170
level of programming experience system d

00:14:48,070 --> 00:14:51,850
is not only for desktops it is used as

00:14:50,170 --> 00:14:53,140
the init system for rel seven and you

00:14:51,850 --> 00:14:54,520
better believe that red hat wasn't going

00:14:53,140 --> 00:14:55,720
to shove that into r l seven if they did

00:14:54,520 --> 00:14:57,390
not feel that it was going to be

00:14:55,720 --> 00:15:01,029
comfortable for server cat class

00:14:57,390 --> 00:15:02,170
deployments assistant ii is not portable

00:15:01,029 --> 00:15:03,110
to other operating systems that's

00:15:02,170 --> 00:15:05,300
actually true it's

00:15:03,110 --> 00:15:07,880
this isn't another intentional design

00:15:05,300 --> 00:15:09,560
they felt that it was more important to

00:15:07,880 --> 00:15:10,970
build something that took advantage of

00:15:09,560 --> 00:15:12,680
the Linux kernels capabilities and

00:15:10,970 --> 00:15:14,329
strengths rather than have something

00:15:12,680 --> 00:15:17,240
that was broadly portable and just

00:15:14,329 --> 00:15:19,430
terrible everywhere so Sisyphean it is

00:15:17,240 --> 00:15:22,279
functional but terrible everywhere

00:15:19,430 --> 00:15:24,260
systemd is fantastic on Linux and their

00:15:22,279 --> 00:15:26,690
cues came directly from Mac OS X on this

00:15:24,260 --> 00:15:28,399
mac OS x does not use this V in it it

00:15:26,690 --> 00:15:30,740
uses its own custom in its system that

00:15:28,399 --> 00:15:32,209
takes advantage of the OS X kernel and

00:15:30,740 --> 00:15:34,640
the functionalities of it and as a

00:15:32,209 --> 00:15:45,380
result of it it boots much much faster

00:15:34,640 --> 00:15:48,140
than a traditional model yes so open RC

00:15:45,380 --> 00:15:49,880
is more in a traditional system v model

00:15:48,140 --> 00:15:51,110
it doesn't paralyze as aggressively it's

00:15:49,880 --> 00:15:52,310
sort of in the middle point when we were

00:15:51,110 --> 00:15:55,579
talking about those parallelization

00:15:52,310 --> 00:15:58,760
things it doesn't have the instinctual

00:15:55,579 --> 00:16:00,800
socket awareness that system d does it's

00:15:58,760 --> 00:16:03,200
an interesting deployment it's not a bad

00:16:00,800 --> 00:16:05,450
sis via net system if you're comparing

00:16:03,200 --> 00:16:07,820
it to other assisting in it style system

00:16:05,450 --> 00:16:11,570
system d is not a true sis via net style

00:16:07,820 --> 00:16:14,630
system so it's far better and far

00:16:11,570 --> 00:16:17,180
smarter than system d but it is still

00:16:14,630 --> 00:16:18,800
clever hacks on the system model system

00:16:17,180 --> 00:16:20,449
d is more revolutionary and more

00:16:18,800 --> 00:16:22,730
compelling in that if you're benching

00:16:20,449 --> 00:16:23,990
them for speed it really depends on your

00:16:22,730 --> 00:16:25,490
services as to which one is going to

00:16:23,990 --> 00:16:27,829
come out on top but in most of the cases

00:16:25,490 --> 00:16:29,690
system d is going to out bench it if you

00:16:27,829 --> 00:16:31,370
go to the system d website they have a

00:16:29,690 --> 00:16:34,070
comparison breakdown on features between

00:16:31,370 --> 00:16:35,959
it and every single other net model out

00:16:34,070 --> 00:16:38,630
there so you can compare between open RC

00:16:35,959 --> 00:16:40,010
you can compare it to upstart you can

00:16:38,630 --> 00:16:41,269
compare it to all of the various other

00:16:40,010 --> 00:16:46,370
implementations that have been half

00:16:41,269 --> 00:16:48,350
started and abandoned but again the big

00:16:46,370 --> 00:16:49,610
concern about portability is really was

00:16:48,350 --> 00:16:51,560
a point for Debian when they were having

00:16:49,610 --> 00:16:53,660
their discussion about which init system

00:16:51,560 --> 00:16:55,880
they were going to choose because Debian

00:16:53,660 --> 00:16:58,399
has had a history of supporting all

00:16:55,880 --> 00:17:00,350
sorts of other non linux kernel's like

00:16:58,399 --> 00:17:02,029
the herd and the bsd kernels in their

00:17:00,350 --> 00:17:04,280
environment and system d doesn't support

00:17:02,029 --> 00:17:06,169
those nor has it any plans to anytime

00:17:04,280 --> 00:17:07,280
soon so it was one of those design

00:17:06,169 --> 00:17:09,319
decisions where they said look let's be

00:17:07,280 --> 00:17:10,730
awesome on Linux and let all the other

00:17:09,319 --> 00:17:12,230
environments choose their own init

00:17:10,730 --> 00:17:14,700
system and be awesome in their own space

00:17:12,230 --> 00:17:16,650
and that system d is not intended to be

00:17:14,700 --> 00:17:19,230
one in it system for all possible

00:17:16,650 --> 00:17:20,130
platforms because it adds complexity to

00:17:19,230 --> 00:17:22,050
the code that they don't feel is

00:17:20,130 --> 00:17:23,370
necessary the Makana system is not

00:17:22,050 --> 00:17:27,900
designed to run anywhere besides the Mac

00:17:23,370 --> 00:17:29,940
model so that was a choice now how do I

00:17:27,900 --> 00:17:31,620
use it well the first step is to pick a

00:17:29,940 --> 00:17:33,600
linux distro that already has system d

00:17:31,620 --> 00:17:35,610
integrated into it if your distribution

00:17:33,600 --> 00:17:37,980
of choices on this list the mat work has

00:17:35,610 --> 00:17:39,960
already been done debian is in the

00:17:37,980 --> 00:17:41,640
process of incorporating system being to

00:17:39,960 --> 00:17:43,170
the next stable release you can get

00:17:41,640 --> 00:17:46,590
Debbie and builds that have system d

00:17:43,170 --> 00:17:48,420
included into it Ubuntu has announced

00:17:46,590 --> 00:17:50,220
that they will support it when Debian

00:17:48,420 --> 00:17:51,780
does so that will show up at some point

00:17:50,220 --> 00:17:53,340
and there are experimental builds of

00:17:51,780 --> 00:17:54,870
ubuntu that have system d inside of it

00:17:53,340 --> 00:17:58,350
so that you can test it out and play

00:17:54,870 --> 00:18:00,600
around gentoo is not on this list gen 2

00:17:58,350 --> 00:18:03,360
has some e build targets that support

00:18:00,600 --> 00:18:05,010
system d but they don't work so well

00:18:03,360 --> 00:18:06,600
from what I'm told and they officially

00:18:05,010 --> 00:18:09,330
have said they don't plan on ever going

00:18:06,600 --> 00:18:13,050
to system d so if gen 2 is your thing

00:18:09,330 --> 00:18:14,400
then best of luck to you but all these

00:18:13,050 --> 00:18:16,140
other guys have already switched have

00:18:14,400 --> 00:18:17,430
already made the switch fedora was one

00:18:16,140 --> 00:18:19,470
of the first ones that made the switch

00:18:17,430 --> 00:18:22,140
and we hit a lot of the early bugs in it

00:18:19,470 --> 00:18:24,270
and we like we do and we got those fixed

00:18:22,140 --> 00:18:26,520
for the most part to the certain extent

00:18:24,270 --> 00:18:28,410
that now system d in federal 1920 or

00:18:26,520 --> 00:18:29,610
reasonably rock solid there's not a lot

00:18:28,410 --> 00:18:34,340
of bugs inside of the system d

00:18:29,610 --> 00:18:36,870
implementation now adding a new service

00:18:34,340 --> 00:18:39,120
every service needs what's called a unit

00:18:36,870 --> 00:18:41,670
file this is a file that's called food

00:18:39,120 --> 00:18:43,260
service you want to try and named it

00:18:41,670 --> 00:18:45,120
after the software implementation that

00:18:43,260 --> 00:18:46,500
you're using specifically and not the

00:18:45,120 --> 00:18:48,510
type of service it is there is a

00:18:46,500 --> 00:18:50,810
tradition in sicily init script naming

00:18:48,510 --> 00:18:55,200
to name things things like mail server

00:18:50,810 --> 00:18:58,740
you know and not send mail so good name

00:18:55,200 --> 00:19:01,440
apache httpd service bad name httpd not

00:18:58,740 --> 00:19:03,270
service because system d is pretty smart

00:19:01,440 --> 00:19:04,830
and that these are designed to all

00:19:03,270 --> 00:19:06,480
coexist with each other in the same

00:19:04,830 --> 00:19:08,730
directory so that if you have 14

00:19:06,480 --> 00:19:09,990
different web servers and you want to

00:19:08,730 --> 00:19:11,280
switch which one you're running

00:19:09,990 --> 00:19:15,930
depending on your use case you can do

00:19:11,280 --> 00:19:17,370
that so inside of this unit file we have

00:19:15,930 --> 00:19:19,080
three different sections the first is

00:19:17,370 --> 00:19:22,140
the unit section I'm doing a very

00:19:19,080 --> 00:19:23,670
minimal service to get across the point

00:19:22,140 --> 00:19:25,470
how simple this is to make this is a

00:19:23,670 --> 00:19:28,220
fully functional for a general case

00:19:25,470 --> 00:19:30,169
service you start by using your unit

00:19:28,220 --> 00:19:31,909
it and then you give a description which

00:19:30,169 --> 00:19:34,039
is a human readable string max ad cares

00:19:31,909 --> 00:19:35,570
that describes the service this is

00:19:34,039 --> 00:19:36,740
something you will see if you query it

00:19:35,570 --> 00:19:38,870
and say what the heck is that thing

00:19:36,740 --> 00:19:40,520
that's running and then you have a

00:19:38,870 --> 00:19:42,470
documentation string and this is where

00:19:40,520 --> 00:19:44,600
you specified links to the documentation

00:19:42,470 --> 00:19:46,130
and this is a URI so you can specify in

00:19:44,600 --> 00:19:48,289
any format you can point to man pages

00:19:46,130 --> 00:19:49,580
you can point to web docks you can point

00:19:48,289 --> 00:19:51,830
to all sorts of things there's a whole

00:19:49,580 --> 00:19:55,820
long list of you know standardized way

00:19:51,830 --> 00:19:58,940
you can set up a URI second section

00:19:55,820 --> 00:20:00,470
service this is where you say type exact

00:19:58,940 --> 00:20:01,820
start and exact reload these are the

00:20:00,470 --> 00:20:03,830
three minimum things you need for a

00:20:01,820 --> 00:20:06,260
system d service type is going to be

00:20:03,830 --> 00:20:08,330
forking for pretty much every unix style

00:20:06,260 --> 00:20:09,980
traditional Damon if you want to do

00:20:08,330 --> 00:20:11,960
something that's called a one-shot which

00:20:09,980 --> 00:20:13,850
is where Sisyphean it scripts are

00:20:11,960 --> 00:20:15,289
especially ugly where you would run

00:20:13,850 --> 00:20:17,179
something once and then never do it

00:20:15,289 --> 00:20:18,919
again like i know i need to change the

00:20:17,179 --> 00:20:20,270
permissions on these 22 files every time

00:20:18,919 --> 00:20:22,669
i boot because they get screwed up and

00:20:20,270 --> 00:20:24,020
it just was running chmod across all

00:20:22,669 --> 00:20:25,580
these files that would be called a

00:20:24,020 --> 00:20:26,960
one-shot service it does its thing and

00:20:25,580 --> 00:20:29,210
it's gone it doesn't need to persist

00:20:26,960 --> 00:20:30,860
systemd knows it's just running and then

00:20:29,210 --> 00:20:32,510
when it stops it makes no attempt to

00:20:30,860 --> 00:20:34,640
recover to do anything it just lets the

00:20:32,510 --> 00:20:35,659
resources go and closes the sea group so

00:20:34,640 --> 00:20:37,700
if you have one of those type of

00:20:35,659 --> 00:20:39,230
services that's a one-shot so there's

00:20:37,700 --> 00:20:41,030
all sorts of this like six different

00:20:39,230 --> 00:20:43,190
types of services but the rest of them

00:20:41,030 --> 00:20:45,049
get even more esoteric so the second you

00:20:43,190 --> 00:20:46,640
start getting into well this isn't

00:20:45,049 --> 00:20:48,830
working on for King this isn't working

00:20:46,640 --> 00:20:50,179
on one shot what do I do now that's when

00:20:48,830 --> 00:20:51,620
you start to get into the excellent

00:20:50,179 --> 00:20:54,200
documentation that's been written by the

00:20:51,620 --> 00:20:56,360
systemd folks they literally have pages

00:20:54,200 --> 00:20:58,460
and pages and pages and pages of

00:20:56,360 --> 00:21:00,620
documentation about every single command

00:20:58,460 --> 00:21:02,330
line option explaining in absurd levels

00:21:00,620 --> 00:21:04,070
of detail what it's doing it's perhaps

00:21:02,330 --> 00:21:06,710
the most well-documented project I've

00:21:04,070 --> 00:21:08,120
ever seen exec start is where you tell

00:21:06,710 --> 00:21:10,100
it what to run this is where you say

00:21:08,120 --> 00:21:11,740
when you start run this command so you

00:21:10,100 --> 00:21:13,820
put your daemon you put your options

00:21:11,740 --> 00:21:15,860
that's what I want to run when you start

00:21:13,820 --> 00:21:18,650
the service exactly reload is what you

00:21:15,860 --> 00:21:19,820
tell it when you want to basically rehab

00:21:18,650 --> 00:21:21,650
their config file back through the

00:21:19,820 --> 00:21:23,390
daemon so i made a config file change i

00:21:21,650 --> 00:21:27,470
want to reload the daemon what do i need

00:21:23,390 --> 00:21:28,669
to tell it to do that and then you have

00:21:27,470 --> 00:21:30,169
an install section and the install

00:21:28,669 --> 00:21:32,750
section only has one required which is

00:21:30,169 --> 00:21:35,030
wanted by and this tells it what level

00:21:32,750 --> 00:21:36,289
of target this is required for then

00:21:35,030 --> 00:21:38,330
normally there's only two targets that

00:21:36,289 --> 00:21:40,399
you care about one is graphical target

00:21:38,330 --> 00:21:42,080
which means this is for a desktop case

00:21:40,399 --> 00:21:43,610
systemd will prioritize

00:21:42,080 --> 00:21:45,740
and run it accordingly for the desktop

00:21:43,610 --> 00:21:47,419
case or if it's for everything else you

00:21:45,740 --> 00:21:49,070
say multi-user target and this is where

00:21:47,419 --> 00:21:54,409
we target services that need to be run

00:21:49,070 --> 00:21:56,450
before you login and that's it that is a

00:21:54,409 --> 00:22:00,080
whole unit file for a service you would

00:21:56,450 --> 00:22:03,140
be hard-pressed to find a 8 line sis via

00:22:00,080 --> 00:22:07,490
net script that worked it's not

00:22:03,140 --> 00:22:10,880
impossible but you'd be hard-pressed yes

00:22:07,490 --> 00:22:12,890
the default for he says he said so you

00:22:10,880 --> 00:22:14,269
would assume the default for stop is to

00:22:12,890 --> 00:22:16,190
shoot it in the head and that is correct

00:22:14,269 --> 00:22:17,750
is to send their appropriate kill signal

00:22:16,190 --> 00:22:23,510
to the process in the sea group until

00:22:17,750 --> 00:22:24,950
the sea group to collapse there are a

00:22:23,510 --> 00:22:27,019
lot of other settings and fields for a

00:22:24,950 --> 00:22:28,880
system to unit file there's so many

00:22:27,019 --> 00:22:30,230
settings and fields for system to unit

00:22:28,880 --> 00:22:31,639
file that I could give an entirely

00:22:30,230 --> 00:22:33,350
separate talk just on additional

00:22:31,639 --> 00:22:36,409
settings and feel dozen system to unit

00:22:33,350 --> 00:22:38,690
file we're not going to do that but

00:22:36,409 --> 00:22:40,039
they're really really well documented so

00:22:38,690 --> 00:22:42,019
the two links that you need to know are

00:22:40,039 --> 00:22:43,010
those two down here and i'll put my

00:22:42,019 --> 00:22:44,679
slides up so you don't have to worry

00:22:43,010 --> 00:22:47,210
about forensically copying them down but

00:22:44,679 --> 00:22:48,889
basically what they've done is they

00:22:47,210 --> 00:22:52,309
documented every single section inside

00:22:48,889 --> 00:22:55,519
of the what can go into the unit file

00:22:52,309 --> 00:22:57,409
and it covers every single corner case

00:22:55,519 --> 00:22:58,970
they were able to identify in every

00:22:57,409 --> 00:23:01,279
single sis fee file that they were ever

00:22:58,970 --> 00:23:03,440
handed so they basically said okay

00:23:01,279 --> 00:23:05,029
people have written this three thousand

00:23:03,440 --> 00:23:06,409
lines of functions to do this handle

00:23:05,029 --> 00:23:08,059
this corner case how would we

00:23:06,409 --> 00:23:10,639
incorporate support for that into the

00:23:08,059 --> 00:23:14,059
native system dn8 process so that you

00:23:10,639 --> 00:23:16,039
can just say you know you only need to

00:23:14,059 --> 00:23:18,019
run in the specific scenario you need to

00:23:16,039 --> 00:23:19,580
stop in this specific scenario you have

00:23:18,019 --> 00:23:21,950
a config file that's in a weird place

00:23:19,580 --> 00:23:23,630
you need to know what the disk operation

00:23:21,950 --> 00:23:24,830
is you want to trigger in certain events

00:23:23,630 --> 00:23:27,169
you want to track for d-bus

00:23:24,830 --> 00:23:29,090
notifications all of those things are

00:23:27,169 --> 00:23:31,039
different options inside of the in it so

00:23:29,090 --> 00:23:33,049
you will not have to write any new

00:23:31,039 --> 00:23:34,700
custom functions to add it should you

00:23:33,049 --> 00:23:36,889
find yourself in the incredibly unlikely

00:23:34,700 --> 00:23:38,389
scenario of needing something in system

00:23:36,889 --> 00:23:40,399
d that is not supported that you have

00:23:38,389 --> 00:23:41,720
working in ssv and in script the system

00:23:40,399 --> 00:23:43,490
d people are generally pretty good about

00:23:41,720 --> 00:23:45,110
taking this espina script and telling

00:23:43,490 --> 00:23:46,789
you what the matching set of functions

00:23:45,110 --> 00:23:48,529
are to go back to it they're pretty

00:23:46,789 --> 00:23:50,389
interested in getting anything that is

00:23:48,529 --> 00:23:51,920
missing added and as far as i know they

00:23:50,389 --> 00:23:55,550
haven't had to add any net new phone

00:23:51,920 --> 00:23:58,310
in a really long time now file system

00:23:55,550 --> 00:24:00,770
placement traditional a nip model uses

00:23:58,310 --> 00:24:02,450
the etsy rcd structure with varying

00:24:00,770 --> 00:24:04,090
degrees of directories hanging off of

00:24:02,450 --> 00:24:06,440
that depending on your flavor of linux

00:24:04,090 --> 00:24:08,300
system she doesn't use that model it's

00:24:06,440 --> 00:24:10,250
aware of it so if you shove a sister

00:24:08,300 --> 00:24:12,380
unit script or an LSP file in that

00:24:10,250 --> 00:24:15,070
hierarchy it will still run it and try

00:24:12,380 --> 00:24:17,540
and follow the rules for that old model

00:24:15,070 --> 00:24:18,800
it's not the best way to do system d but

00:24:17,540 --> 00:24:20,900
you can do it that way so if you're just

00:24:18,800 --> 00:24:22,010
really in love with your bash script and

00:24:20,900 --> 00:24:23,690
you want to run it for the rest of time

00:24:22,010 --> 00:24:29,720
you can continue to do so by still

00:24:23,690 --> 00:24:32,420
shoving it in at CRC dnad but libsystem

00:24:29,720 --> 00:24:35,110
d system and this is lib not lib 64 this

00:24:32,420 --> 00:24:37,340
is one of the things they really like

00:24:35,110 --> 00:24:38,930
this is where packages store them you

00:24:37,340 --> 00:24:40,460
know files this is where as the vendor

00:24:38,930 --> 00:24:42,410
provides you software whether that's

00:24:40,460 --> 00:24:44,450
your linux distribution or oracle or

00:24:42,410 --> 00:24:45,620
whomever this is where they would put

00:24:44,450 --> 00:24:46,880
their unit files and this is done

00:24:45,620 --> 00:24:49,340
because there's the backup directory and

00:24:46,880 --> 00:24:50,870
etsy etsy systemd system where users can

00:24:49,340 --> 00:24:52,550
place unit files with the exact same

00:24:50,870 --> 00:24:54,740
name that will override the system copy

00:24:52,550 --> 00:24:56,120
so if you say look I know this says it's

00:24:54,740 --> 00:24:57,830
supposed to be forking and read this

00:24:56,120 --> 00:25:00,020
config file but I really don't want to

00:24:57,830 --> 00:25:01,580
do that but I want to leave that file

00:25:00,020 --> 00:25:03,140
intact in case I want to go back to the

00:25:01,580 --> 00:25:05,630
default behavior I can override that by

00:25:03,140 --> 00:25:07,910
creating food rot service with the exact

00:25:05,630 --> 00:25:09,170
same name in this directory and system d

00:25:07,910 --> 00:25:13,550
will override and run yours and not

00:25:09,170 --> 00:25:15,650
theirs now the tool the system d uses to

00:25:13,550 --> 00:25:18,230
control system to unit services is a

00:25:15,650 --> 00:25:19,820
tool called systemctl this is some CTL

00:25:18,230 --> 00:25:21,530
invoke but no options will give you a

00:25:19,820 --> 00:25:23,360
full report of all the known services

00:25:21,530 --> 00:25:25,190
that it is aware of it will tell you

00:25:23,360 --> 00:25:28,850
whether they're on they're off they're

00:25:25,190 --> 00:25:32,090
they're short status is it running is it

00:25:28,850 --> 00:25:35,270
dead is it disabled what p IDs are

00:25:32,090 --> 00:25:38,300
running for it and then you can specify

00:25:35,270 --> 00:25:43,310
by the unit filename tell me more about

00:25:38,300 --> 00:25:45,140
this start/stop an able disabled if you

00:25:43,310 --> 00:25:46,910
really like the old Red Hat service

00:25:45,140 --> 00:25:49,460
command you can continue to use it it's

00:25:46,910 --> 00:25:52,130
aliased in this exact same way back to

00:25:49,460 --> 00:25:54,170
all o system d so if you want to say

00:25:52,130 --> 00:25:55,700
service foo start you can still do that

00:25:54,170 --> 00:25:57,020
that still absolutely works for the

00:25:55,700 --> 00:25:59,500
range of commands and will probably

00:25:57,020 --> 00:26:02,270
continue to work for the rest of time

00:25:59,500 --> 00:26:04,010
it's not actually doing and knit

00:26:02,270 --> 00:26:04,650
Sisyphean it model it's just translating

00:26:04,010 --> 00:26:06,120
it into these

00:26:04,650 --> 00:26:07,680
man's the key difference here to

00:26:06,120 --> 00:26:09,270
remember when you're using systemctl if

00:26:07,680 --> 00:26:10,830
you've used the old service commands and

00:26:09,270 --> 00:26:12,690
we used to operating on them is that you

00:26:10,830 --> 00:26:14,820
have to pass the full file name into it

00:26:12,690 --> 00:26:16,170
and not just the service name so the

00:26:14,820 --> 00:26:18,840
service command operated on foo

00:26:16,170 --> 00:26:20,780
systemctl operates on food service it

00:26:18,840 --> 00:26:26,370
also swaps the order so it's systemctl

00:26:20,780 --> 00:26:28,620
command service name and we talked

00:26:26,370 --> 00:26:31,440
earlier about journaling and so if you

00:26:28,620 --> 00:26:34,950
decide that you still want to run your

00:26:31,440 --> 00:26:36,540
own logger whatever logger you choose to

00:26:34,950 --> 00:26:38,790
do blogging you can continue to do so

00:26:36,540 --> 00:26:40,410
systemd will fully support that but a

00:26:38,790 --> 00:26:41,820
lot of the distributions that are using

00:26:40,410 --> 00:26:43,440
the current system d have switched over

00:26:41,820 --> 00:26:44,790
to using system DS logging support

00:26:43,440 --> 00:26:46,860
because system d already knows

00:26:44,790 --> 00:26:48,390
everything that's running and it's able

00:26:46,860 --> 00:26:49,920
to grab everything from the sea groups

00:26:48,390 --> 00:26:51,390
of every process that's running and

00:26:49,920 --> 00:26:53,370
shove them all into the log file for you

00:26:51,390 --> 00:26:55,620
so there's no need to have a separate

00:26:53,370 --> 00:26:57,510
logger running you can let system d take

00:26:55,620 --> 00:26:59,850
care of that for you the journal CTL

00:26:57,510 --> 00:27:02,400
command is the way to view those logs so

00:26:59,850 --> 00:27:04,920
if you want to do the equivalent of tail

00:27:02,400 --> 00:27:06,630
dash f VAR log syslog than just journals

00:27:04,920 --> 00:27:08,070
detailed a chef and that will give you a

00:27:06,630 --> 00:27:09,540
flowing log what would normally go into

00:27:08,070 --> 00:27:11,940
syslog if you just want to see the

00:27:09,540 --> 00:27:15,780
newest entries first because by default

00:27:11,940 --> 00:27:17,280
journals etl outputs old to new then you

00:27:15,780 --> 00:27:18,960
can reverse that by adding dash reverse

00:27:17,280 --> 00:27:20,730
if you just want to see Colonel d

00:27:18,960 --> 00:27:21,840
message entries you can pass k for

00:27:20,730 --> 00:27:23,730
colonel and you will just see Colonel

00:27:21,840 --> 00:27:25,890
related entries if you just want to see

00:27:23,730 --> 00:27:28,230
the logs for a specific service you just

00:27:25,890 --> 00:27:29,610
passed dash you to the to the unit file

00:27:28,230 --> 00:27:34,140
and it will only show you the logs that

00:27:29,610 --> 00:27:36,060
are related to that servants yes ed

00:27:34,140 --> 00:27:38,460
depending on how does that play with

00:27:36,060 --> 00:27:40,200
remote logging so journal TTL has an

00:27:38,460 --> 00:27:42,840
advanced configuration that tells it

00:27:40,200 --> 00:27:44,820
where the logs are being kept so this

00:27:42,840 --> 00:27:46,140
command you know is depending on your

00:27:44,820 --> 00:27:47,430
system configuration where it's at

00:27:46,140 --> 00:27:48,780
polling for that whether it's pulling

00:27:47,430 --> 00:27:50,700
the local system d instance or it's

00:27:48,780 --> 00:27:52,440
bowling a remote logging instance more

00:27:50,700 --> 00:27:53,940
advanced remote logging generally still

00:27:52,440 --> 00:27:57,450
requires you to have some sort of

00:27:53,940 --> 00:27:59,550
independent logger for that you want to

00:27:57,450 --> 00:28:01,170
know more about the many many many other

00:27:59,550 --> 00:28:03,660
options for journal CTL that are not

00:28:01,170 --> 00:28:07,440
these common use cases again very well

00:28:03,660 --> 00:28:08,490
documented page the last thing I don't

00:28:07,440 --> 00:28:11,070
have slide on but I wanted to talk about

00:28:08,490 --> 00:28:13,200
was the log in management system d has

00:28:11,070 --> 00:28:14,640
base login management to handle the fact

00:28:13,200 --> 00:28:15,870
that normally you were having to do all

00:28:14,640 --> 00:28:17,309
sorts of really real

00:28:15,870 --> 00:28:18,840
crafty hacks I don't know if anyone has

00:28:17,309 --> 00:28:20,610
had the misfortune of having to look at

00:28:18,840 --> 00:28:22,800
how linux used to do log and management

00:28:20,610 --> 00:28:24,270
on the console it was not pretty and

00:28:22,800 --> 00:28:25,500
nobody really was very pleased with it

00:28:24,270 --> 00:28:27,660
it was one of those things that everyone

00:28:25,500 --> 00:28:29,130
knew was a massive bug and security hole

00:28:27,660 --> 00:28:31,830
waiting to happen that everybody wanted

00:28:29,130 --> 00:28:34,200
to sort of pencil that over because that

00:28:31,830 --> 00:28:36,000
code was disgusting so systemd replaced

00:28:34,200 --> 00:28:37,410
that with the login management so it can

00:28:36,000 --> 00:28:39,120
do the console login for you the

00:28:37,410 --> 00:28:42,180
management of that and it can also do

00:28:39,120 --> 00:28:43,650
the login pass through to to your window

00:28:42,180 --> 00:28:45,330
management system so you still have a

00:28:43,650 --> 00:28:47,520
window management login manager but it's

00:28:45,330 --> 00:28:49,740
queuing to systemd to tell it when to

00:28:47,520 --> 00:28:51,660
start and when to run now the nice thing

00:28:49,740 --> 00:28:54,510
about having this login management is

00:28:51,660 --> 00:28:56,940
that it also ate at the same time all

00:28:54,510 --> 00:28:58,770
the code that does the AC PID stuff so

00:28:56,940 --> 00:29:02,309
if you remember how few years ago having

00:28:58,770 --> 00:29:04,500
to set up a CP I tweaks and you know

00:29:02,309 --> 00:29:06,929
tricks to get your system to suspend in

00:29:04,500 --> 00:29:09,720
the proper setting to detect lid detect

00:29:06,929 --> 00:29:12,090
operations systemd is eaten all of that

00:29:09,720 --> 00:29:14,910
code inside of itself so now it's much

00:29:12,090 --> 00:29:17,160
much easier it is literally one plain

00:29:14,910 --> 00:29:18,750
text config file setting an option to

00:29:17,160 --> 00:29:21,179
tell it what you want the behavior to be

00:29:18,750 --> 00:29:22,890
when a lid operation is detected so when

00:29:21,179 --> 00:29:24,540
I shut my laptop I can tell it i want it

00:29:22,890 --> 00:29:26,309
to suspend I want it to hibernate I

00:29:24,540 --> 00:29:28,140
wanted to do nothing these are all

00:29:26,309 --> 00:29:30,450
options and I just change that option on

00:29:28,140 --> 00:29:32,280
that one line and then laptop e Hayes no

00:29:30,450 --> 00:29:33,990
again you find some fun hardware where

00:29:32,280 --> 00:29:35,670
we have no idea what the acpi event is

00:29:33,990 --> 00:29:37,920
triggered by or how to detect it in the

00:29:35,670 --> 00:29:40,410
colonel that's a problem but it's not

00:29:37,920 --> 00:29:41,970
system DS fault anymore it's it's all

00:29:40,410 --> 00:29:43,380
stuff that we fix in the kernel and not

00:29:41,970 --> 00:29:45,360
in user space so we're pushing this

00:29:43,380 --> 00:29:48,540
problem out of a giant user space

00:29:45,360 --> 00:29:50,130
whitelist and into the Linux kernel so

00:29:48,540 --> 00:29:54,179
log in d handles all of that very

00:29:50,130 --> 00:29:57,150
cleanly for you d bus initiated services

00:29:54,179 --> 00:29:59,130
the nice thing about that is as even KDE

00:29:57,150 --> 00:30:00,630
and gnome are all based around the free

00:29:59,130 --> 00:30:03,090
desktop standard for d bus at this point

00:30:00,630 --> 00:30:04,860
so when an op d-bus basically is a

00:30:03,090 --> 00:30:06,270
listening bus and I'm vastly

00:30:04,860 --> 00:30:08,760
oversimplifying it and I apologize but

00:30:06,270 --> 00:30:10,860
basically what it is is when an event

00:30:08,760 --> 00:30:13,050
occurs that is sent across the d-bus

00:30:10,860 --> 00:30:15,000
then other events can be triggered as a

00:30:13,050 --> 00:30:16,500
result so system d is listening on and

00:30:15,000 --> 00:30:18,420
it's isn't he actually launches the

00:30:16,500 --> 00:30:19,860
deepest and have special knowledge about

00:30:18,420 --> 00:30:21,900
it so it's actually a participant on the

00:30:19,860 --> 00:30:24,000
d-bus so when it sees d bus operations

00:30:21,900 --> 00:30:26,340
you can write a service that says when I

00:30:24,000 --> 00:30:29,520
see this d bus event I know I need to do

00:30:26,340 --> 00:30:31,350
this and usually it's start but you have

00:30:29,520 --> 00:30:32,670
model where systemd is participating in

00:30:31,350 --> 00:30:34,650
the d-bus model so as your window

00:30:32,670 --> 00:30:36,420
management system is sending out event

00:30:34,650 --> 00:30:40,770
operation system d can be acting

00:30:36,420 --> 00:30:42,750
accordingly to trigger other events yeah

00:30:40,770 --> 00:30:46,800
Katie buses the is the kiddie

00:30:42,750 --> 00:30:48,120
implementation of d bus oh no so colonel

00:30:46,800 --> 00:30:49,230
d bus is just just a different place we

00:30:48,120 --> 00:30:50,280
were living it whether it lives in the

00:30:49,230 --> 00:30:51,570
colonel whether it lives in user land

00:30:50,280 --> 00:30:58,350
doesn't matter it's the same bus is just

00:30:51,570 --> 00:31:00,600
how it started and that in a nutshell is

00:30:58,350 --> 00:31:02,820
how system d works i mean we could go

00:31:00,600 --> 00:31:04,380
real deep into the nitty-gritty about n

00:31:02,820 --> 00:31:06,210
it systems and start having really

00:31:04,380 --> 00:31:08,340
violent flame wars about the specific

00:31:06,210 --> 00:31:11,970
design decisions that are made but for

00:31:08,340 --> 00:31:14,640
most people using a service or having to

00:31:11,970 --> 00:31:16,440
deploy on new service system d is going

00:31:14,640 --> 00:31:18,420
to be a vast improvement on your life it

00:31:16,440 --> 00:31:20,670
makes it much easier to set up a new

00:31:18,420 --> 00:31:22,800
service much easier to set limits on

00:31:20,670 --> 00:31:24,840
that service and much easier to monitor

00:31:22,800 --> 00:31:27,260
what that service is actually doing and

00:31:24,840 --> 00:31:29,850
pull the logs for just that service out

00:31:27,260 --> 00:31:35,790
and i will take as many questions as I'm

00:31:29,850 --> 00:31:37,820
capable of at this point yes so you're

00:31:35,790 --> 00:31:37,820
saying

00:31:40,270 --> 00:31:47,570
Cody juice sorry when you say that

00:31:44,720 --> 00:31:49,640
there's some programs that are actually

00:31:47,570 --> 00:31:51,500
coded up to leverage systemd

00:31:49,640 --> 00:31:55,130
specifically can you give an example

00:31:51,500 --> 00:31:58,730
what that means beyond I guess the login

00:31:55,130 --> 00:32:01,580
and the acpi and the d-bus initiation

00:31:58,730 --> 00:32:02,900
stuff like what I mean sure so most of

00:32:01,580 --> 00:32:05,000
the examples today we're system the

00:32:02,900 --> 00:32:07,820
behaviors are coded into an application

00:32:05,000 --> 00:32:11,440
or understanding that a system d is

00:32:07,820 --> 00:32:14,510
massively parallel and be dynamic so

00:32:11,440 --> 00:32:16,160
traditionally for let's say it take a ba

00:32:14,510 --> 00:32:19,360
he for example if you were running a ba

00:32:16,160 --> 00:32:22,370
he on to network detection and behavior

00:32:19,360 --> 00:32:24,650
you would have to start a ba he early

00:32:22,370 --> 00:32:26,480
and always make sure that a ba he was

00:32:24,650 --> 00:32:27,860
running and run checks to make sure of I

00:32:26,480 --> 00:32:30,010
he was running before you're a user

00:32:27,860 --> 00:32:32,270
space app was actually using a ba he

00:32:30,010 --> 00:32:34,010
some of the avahi tools in genome have

00:32:32,270 --> 00:32:35,810
stopped doing that have ripped out the

00:32:34,010 --> 00:32:37,520
code to do that detection because they

00:32:35,810 --> 00:32:40,550
know that system d is running avahi

00:32:37,520 --> 00:32:42,140
dynamically and don't have to check they

00:32:40,550 --> 00:32:43,130
just go okay so some D's got avahi we're

00:32:42,140 --> 00:32:46,040
just going to start sending a request

00:32:43,130 --> 00:32:47,150
across the bus so that's the cases that

00:32:46,040 --> 00:32:48,770
are most common for those sorts of

00:32:47,150 --> 00:32:50,780
scenarios where they're dependent on the

00:32:48,770 --> 00:32:52,820
behavior of system d as opposed to

00:32:50,780 --> 00:32:54,440
system d itself so if you had something

00:32:52,820 --> 00:32:56,060
like open RC and you could make those

00:32:54,440 --> 00:32:57,760
same assumptions about dynamic services

00:32:56,060 --> 00:33:00,170
then it would work just as well it's not

00:32:57,760 --> 00:33:02,350
linked to system d libraries or anything

00:33:00,170 --> 00:33:02,350
like that

00:33:04,429 --> 00:33:12,149
yeah you okay I know for lazy scripts

00:33:09,899 --> 00:33:14,220
it's not necessarily recommended but for

00:33:12,149 --> 00:33:16,049
launching legacy scripts with system d

00:33:14,220 --> 00:33:19,470
do you just basically use your shell

00:33:16,049 --> 00:33:21,210
file in your unit for the exact or is

00:33:19,470 --> 00:33:23,730
there some other way to use system T to

00:33:21,210 --> 00:33:26,250
execute a legacy show like the answer to

00:33:23,730 --> 00:33:28,980
all good questions it depends now ease

00:33:26,250 --> 00:33:31,409
your shell script standalone does it run

00:33:28,980 --> 00:33:32,880
without importing imports not the right

00:33:31,409 --> 00:33:35,340
word but you can hit yet is it pulling

00:33:32,880 --> 00:33:37,620
functions from other components of

00:33:35,340 --> 00:33:38,850
in it if it is and they're non-standard

00:33:37,620 --> 00:33:41,250
because you wrote them yourself you

00:33:38,850 --> 00:33:42,720
could bring the whole spy lichelle along

00:33:41,250 --> 00:33:44,880
with you and put it inside the RC

00:33:42,720 --> 00:33:46,799
structure systemd retains the

00:33:44,880 --> 00:33:48,510
standardized to speed functions that are

00:33:46,799 --> 00:33:50,010
included by the spec standard so

00:33:48,510 --> 00:33:52,230
anything that you wrote to the standard

00:33:50,010 --> 00:33:53,639
is working but what most people who have

00:33:52,230 --> 00:33:55,260
these disgusting scripts did was they

00:33:53,639 --> 00:33:57,029
wrote additional add-on functions or

00:33:55,260 --> 00:33:59,789
they used red hat custom functions or

00:33:57,029 --> 00:34:01,169
souza cific functions that made it work

00:33:59,789 --> 00:34:02,460
for their environment you need make sure

00:34:01,169 --> 00:34:04,289
you bring all of that baggage along with

00:34:02,460 --> 00:34:05,909
you because system d is not going to

00:34:04,289 --> 00:34:07,230
magically know what show functions are

00:34:05,909 --> 00:34:08,790
not there so you have to be careful that

00:34:07,230 --> 00:34:09,929
you bring the whole package but if you

00:34:08,790 --> 00:34:12,169
bring everything across it will work

00:34:09,929 --> 00:34:12,169
just fine

00:34:13,200 --> 00:34:20,020
all right coming up so you were saying

00:34:18,100 --> 00:34:22,179
that the at the system level for the

00:34:20,020 --> 00:34:24,010
suspend and hibernian things that's as a

00:34:22,179 --> 00:34:27,159
text file but you know say the system

00:34:24,010 --> 00:34:28,450
level says do nothing on lid closed but

00:34:27,159 --> 00:34:30,639
then you log in and there's that gooey

00:34:28,450 --> 00:34:32,230
option that says I want to suspend on

00:34:30,639 --> 00:34:34,270
lid closed is that something it would

00:34:32,230 --> 00:34:35,860
notify over d-bus i'm assuming that used

00:34:34,270 --> 00:34:37,120
to be done like with a CPI stuff yeah it

00:34:35,860 --> 00:34:38,470
depends on the it depends on the window

00:34:37,120 --> 00:34:40,750
management and what they were set up for

00:34:38,470 --> 00:34:42,100
genome his whole all that has got it all

00:34:40,750 --> 00:34:43,929
that code out so it doesn't have that

00:34:42,100 --> 00:34:45,820
option anymore like you can't set a G

00:34:43,929 --> 00:34:48,010
settings anymore cassette lid operations

00:34:45,820 --> 00:34:49,810
they pulled all of that out and it is

00:34:48,010 --> 00:34:50,740
all controlled by system d in the genome

00:34:49,810 --> 00:34:52,270
environment they don't they don't

00:34:50,740 --> 00:34:54,040
attempt to do it at all because it was a

00:34:52,270 --> 00:34:55,780
giant pile of white list cases

00:34:54,040 --> 00:34:57,910
hard-coded into users they software it

00:34:55,780 --> 00:35:00,010
was a giant mess so all of that is now

00:34:57,910 --> 00:35:01,660
in kernel space and so all system d does

00:35:00,010 --> 00:35:09,850
is tell it what operation we want to do

00:35:01,660 --> 00:35:13,390
when we detect that specific event on

00:35:09,850 --> 00:35:16,630
the command line do you have service

00:35:13,390 --> 00:35:18,670
name completion yeah it does yeah

00:35:16,630 --> 00:35:21,880
there's this is the alt of all depends

00:35:18,670 --> 00:35:23,350
again depends on your shelf but in bash

00:35:21,880 --> 00:35:25,690
specifically it does have service name

00:35:23,350 --> 00:35:27,550
completion so if you type food tab tab

00:35:25,690 --> 00:35:28,930
tab tab tab it will list all the valid

00:35:27,550 --> 00:35:29,980
services that are at that is through the

00:35:28,930 --> 00:35:32,310
two directories that it knows how to

00:35:29,980 --> 00:35:32,310
look for

00:35:36,410 --> 00:35:44,130
pass it down so this is sort of more

00:35:42,420 --> 00:35:47,520
comment question but maybe you can add

00:35:44,130 --> 00:35:49,740
some more detail so I found in fedora

00:35:47,520 --> 00:35:51,829
and especially moving older systems to

00:35:49,740 --> 00:35:53,940
it the network manager wait online

00:35:51,829 --> 00:35:55,319
service which is sort of something you

00:35:53,940 --> 00:35:57,630
can turn on it's like the answer to a

00:35:55,319 --> 00:35:59,910
bunch of things in bugzilla it's kind of

00:35:57,630 --> 00:36:01,410
a not in the spirit but what it does is

00:35:59,910 --> 00:36:02,940
it just waits until you actually have a

00:36:01,410 --> 00:36:05,220
functional network connection and then

00:36:02,940 --> 00:36:07,740
keeps going that makes lots of legacy

00:36:05,220 --> 00:36:09,690
things much more happy sound true yeah

00:36:07,740 --> 00:36:12,210
so if you if you're hacking around the

00:36:09,690 --> 00:36:13,710
old city behavior of having your script

00:36:12,210 --> 00:36:15,150
numbered after the network number

00:36:13,710 --> 00:36:17,819
because this see it's very much not

00:36:15,150 --> 00:36:18,900
paralyzed and you really just want to

00:36:17,819 --> 00:36:20,369
make sure that your script doesn't even

00:36:18,900 --> 00:36:23,010
try to start before a network is

00:36:20,369 --> 00:36:24,270
established then you have to do some

00:36:23,010 --> 00:36:26,069
sort of a manual weight like he's

00:36:24,270 --> 00:36:27,599
talking about where you wait you enable

00:36:26,069 --> 00:36:30,240
the network manager wait service and you

00:36:27,599 --> 00:36:32,099
say nobody else goes have till I go and

00:36:30,240 --> 00:36:33,630
then you force that target in and you

00:36:32,099 --> 00:36:35,609
change the order you slow everything

00:36:33,630 --> 00:36:37,290
down as a result but if that's the way

00:36:35,609 --> 00:36:42,839
your services have to operate then

00:36:37,290 --> 00:36:45,809
that's what you can do you mentioned

00:36:42,839 --> 00:36:47,099
that it used see groups and I was

00:36:45,809 --> 00:36:48,780
wondering how does it actually leverage

00:36:47,099 --> 00:36:51,750
that are you able to actually set the

00:36:48,780 --> 00:36:53,490
resources in so what you can do on a per

00:36:51,750 --> 00:36:55,109
service file basis is this two places

00:36:53,490 --> 00:36:56,609
you can set it you can set a system wide

00:36:55,109 --> 00:36:58,020
and say every time you start a service

00:36:56,609 --> 00:36:59,790
this is the resources i want to give it

00:36:58,020 --> 00:37:01,410
for your whole system you can set a rule

00:36:59,790 --> 00:37:02,970
for every single service and then you

00:37:01,410 --> 00:37:05,250
can override that on a per unit file

00:37:02,970 --> 00:37:07,619
basis and you just add lines into the

00:37:05,250 --> 00:37:09,809
service section where you say max CPU

00:37:07,619 --> 00:37:11,880
allocation max disk i/o allocation and

00:37:09,809 --> 00:37:13,530
there's literally 25 different variables

00:37:11,880 --> 00:37:15,180
you can tweak on that and you can set

00:37:13,530 --> 00:37:16,589
those prayer service so that you can

00:37:15,180 --> 00:37:18,089
have it so that I say well you know I

00:37:16,589 --> 00:37:19,650
really just don't want my web server to

00:37:18,089 --> 00:37:21,000
go and eat all of my traffic in case we

00:37:19,650 --> 00:37:22,230
get slashed out as and I really

00:37:21,000 --> 00:37:31,980
want to make sure we never go past this

00:37:22,230 --> 00:37:34,050
line yes so is there still a single user

00:37:31,980 --> 00:37:35,610
mode or these alternative run level

00:37:34,050 --> 00:37:38,160
concepts that you used to have where

00:37:35,610 --> 00:37:39,810
does that still exist sir the concept of

00:37:38,160 --> 00:37:42,810
runlevels is gone in system d it

00:37:39,810 --> 00:37:46,080
emulates them so if you go and you look

00:37:42,810 --> 00:37:47,460
at if you look in and you look at the

00:37:46,080 --> 00:37:49,140
place where you use to set run level

00:37:47,460 --> 00:37:51,540
it's now a text file that says haha

00:37:49,140 --> 00:37:53,130
there's nothing here for you now but it

00:37:51,540 --> 00:37:57,170
talks about the way talks about what the

00:37:53,130 --> 00:37:59,610
equivalence is so if you pass s or 12

00:37:57,170 --> 00:38:00,990
the colonel command line option string

00:37:59,610 --> 00:38:03,060
it will still boot you into single user

00:38:00,990 --> 00:38:04,230
it will still boot you into an N equals

00:38:03,060 --> 00:38:05,850
bin bash if you stuff these sorts of

00:38:04,230 --> 00:38:07,710
things that you override the ID one all

00:38:05,850 --> 00:38:09,540
those behaviors continue to work because

00:38:07,710 --> 00:38:11,490
system d is just replacing the binary

00:38:09,540 --> 00:38:12,960
that was at and it won and it does have

00:38:11,490 --> 00:38:14,610
the proper handling for emulating the

00:38:12,960 --> 00:38:16,740
run level the only run levels that

00:38:14,610 --> 00:38:17,940
emulates are three and five it doesn't

00:38:16,740 --> 00:38:19,230
emulate any of the other run levels

00:38:17,940 --> 00:38:20,820
because let's be honest you never use

00:38:19,230 --> 00:38:24,300
them properly anyways and nobody else

00:38:20,820 --> 00:38:25,530
did the only ones that ever anyone ever

00:38:24,300 --> 00:38:27,150
got right in the winnings world war

00:38:25,530 --> 00:38:29,430
three and five and those are emulated to

00:38:27,150 --> 00:38:30,540
graphical at five and multi-user at

00:38:29,430 --> 00:38:32,130
three and so those are what it's

00:38:30,540 --> 00:38:34,470
emulated to so when it gets to

00:38:32,130 --> 00:38:36,720
multi-user it stops instantiates login d

00:38:34,470 --> 00:38:38,490
pulls up the console log in if you such

00:38:36,720 --> 00:38:40,050
a graphical or five it runs all the way

00:38:38,490 --> 00:38:43,430
through and watches the graphical login

00:38:40,050 --> 00:38:43,430
manager for morgan dates

00:38:44,470 --> 00:38:51,829
building up on that where is this file

00:38:47,779 --> 00:38:54,049
where you can just say just list if i

00:38:51,829 --> 00:38:55,130
type in three the command prompts start

00:38:54,049 --> 00:38:56,630
multi-user because I've noticed for

00:38:55,130 --> 00:38:58,339
example that if you do this in fedora

00:38:56,630 --> 00:39:00,440
right on the box it will work but if you

00:38:58,339 --> 00:39:01,910
do the same an arch arch will just laugh

00:39:00,440 --> 00:39:05,210
at you and start the graphical login

00:39:01,910 --> 00:39:07,210
anyway so I don't know the answer for

00:39:05,210 --> 00:39:09,079
arch off the top of my head

00:39:07,210 --> 00:39:10,460
traditionally if you want to do this is

00:39:09,079 --> 00:39:11,869
a one time off you stopped at the boot

00:39:10,460 --> 00:39:13,369
loader and you override the crims the

00:39:11,869 --> 00:39:14,359
string at the promoter and no matter

00:39:13,369 --> 00:39:15,680
what you've written to your file you've

00:39:14,359 --> 00:39:17,690
already passed that to the colonel and

00:39:15,680 --> 00:39:19,279
that's magic if for arch I think you

00:39:17,690 --> 00:39:21,950
would have to figure out what he's

00:39:19,279 --> 00:39:23,690
getting passed to the Colonel's to get

00:39:21,950 --> 00:39:25,460
your magic which file is actually being

00:39:23,690 --> 00:39:26,720
read in by the boot loader and that's

00:39:25,460 --> 00:39:28,190
going to depend on how your bootloader

00:39:26,720 --> 00:39:29,720
is set up an arch and I don't have the

00:39:28,190 --> 00:39:31,220
answer to that so that's even at a

00:39:29,720 --> 00:39:35,480
higher level than system d it's not

00:39:31,220 --> 00:39:36,829
that's happening well before that now

00:39:35,480 --> 00:39:38,450
one thing is worth mentioning here that

00:39:36,829 --> 00:39:41,720
you're going to come across is the lack

00:39:38,450 --> 00:39:43,609
of a dot RC RC local file which was sort

00:39:41,720 --> 00:39:45,680
of the catch-all of I just need to run

00:39:43,609 --> 00:39:47,839
this one thing on this system when i

00:39:45,680 --> 00:39:49,490
boot that falls gone systemd has no

00:39:47,839 --> 00:39:50,960
comprehension of RC local if you throw

00:39:49,490 --> 00:39:53,029
an RC local file in there it won't do

00:39:50,960 --> 00:39:54,890
anything with it you need to write a

00:39:53,029 --> 00:39:56,630
service for that thing and you probably

00:39:54,890 --> 00:39:57,650
writing a one-shot service for it and

00:39:56,630 --> 00:39:58,819
that's what they want you to do and

00:39:57,650 --> 00:40:00,079
that's why they have no intention of

00:39:58,819 --> 00:40:01,579
supporting our see local it make that

00:40:00,079 --> 00:40:04,519
artsy local is a war crime and they

00:40:01,579 --> 00:40:06,170
don't want to support that anymore so so

00:40:04,519 --> 00:40:07,490
this is so that that will be probably

00:40:06,170 --> 00:40:09,170
the first thing you do is you will

00:40:07,490 --> 00:40:10,910
instinctively go to write your arse eat

00:40:09,170 --> 00:40:12,500
local and just add that one file and

00:40:10,910 --> 00:40:13,789
will be frustrated this to know why that

00:40:12,500 --> 00:40:14,960
didn't work and that will be the first

00:40:13,789 --> 00:40:18,589
time you write your first one shot

00:40:14,960 --> 00:40:20,329
service you can and there's and there's

00:40:18,589 --> 00:40:22,130
actually a lot of people that have done

00:40:20,329 --> 00:40:23,900
that that have been written they have

00:40:22,130 --> 00:40:27,440
written one shot services that read in

00:40:23,900 --> 00:40:29,089
an execute RC local so I believe I

00:40:27,440 --> 00:40:30,680
believe a boob arch actually includes

00:40:29,089 --> 00:40:32,240
that by default so they hack in support

00:40:30,680 --> 00:40:38,870
for RC local and this isn't a on the

00:40:32,240 --> 00:40:39,830
department so the other thing I just

00:40:38,870 --> 00:40:44,690
heard about for the first time and this

00:40:39,830 --> 00:40:45,920
was the the cron replacement is that how

00:40:44,690 --> 00:40:47,330
good is that can we just can forget

00:40:45,920 --> 00:40:49,940
about coronal together and just use this

00:40:47,330 --> 00:40:52,610
now or again if you are a power user of

00:40:49,940 --> 00:40:53,930
chron know if you were just turning on a

00:40:52,610 --> 00:40:55,790
service when the time event hits

00:40:53,930 --> 00:40:57,590
absolutely you just write a time or file

00:40:55,790 --> 00:40:59,150
out and again the timer file is

00:40:57,590 --> 00:41:00,650
documented you included along with the

00:40:59,150 --> 00:41:02,750
service it's the same name as the

00:41:00,650 --> 00:41:05,030
services that is dot timer and then you

00:41:02,750 --> 00:41:07,310
tell it in these time conditions in this

00:41:05,030 --> 00:41:08,870
cron syntax launched and it goes and it

00:41:07,310 --> 00:41:10,880
does the same thing it inherited the

00:41:08,870 --> 00:41:12,590
same syntactical model from a basic cron

00:41:10,880 --> 00:41:14,060
file you just don't have to put it in

00:41:12,590 --> 00:41:15,470
crime body anymore it's just system d

00:41:14,060 --> 00:41:19,760
say hey when this timer event occurs

00:41:15,470 --> 00:41:24,860
then we launched no no it's not it's for

00:41:19,760 --> 00:41:26,960
service um can I trigger Apache to start

00:41:24,860 --> 00:41:30,430
when it gets a network connection on

00:41:26,960 --> 00:41:32,240
board ad yes and can I shut it down

00:41:30,430 --> 00:41:33,680
automatically after us at length the

00:41:32,240 --> 00:41:40,220
time when no activity has been happening

00:41:33,680 --> 00:41:42,710
yes yes anything that is socket based

00:41:40,220 --> 00:41:44,540
behavior or traffic based behavior or

00:41:42,710 --> 00:41:46,400
dismissed behavior you can set the rules

00:41:44,540 --> 00:41:48,170
either in the sea group or for the

00:41:46,400 --> 00:41:49,460
socket you specify the socket file that

00:41:48,170 --> 00:41:51,140
you're tracking it gets more complicated

00:41:49,460 --> 00:41:52,490
writing the script but it is documented

00:41:51,140 --> 00:41:54,080
there are examples on how to do it

00:41:52,490 --> 00:41:55,160
looking at your linux distribution for

00:41:54,080 --> 00:41:56,750
things that are already configured to be

00:41:55,160 --> 00:41:57,920
socket activated are going to be a great

00:41:56,750 --> 00:42:01,880
first start to figuring out what you

00:41:57,920 --> 00:42:04,030
want to put in there ina d is finally

00:42:01,880 --> 00:42:04,030
dead

00:42:04,700 --> 00:42:10,010
all right I think that's it thank you

00:42:07,109 --> 00:42:10,010
guys very much for your time

00:42:23,400 --> 00:42:25,460
you

00:42:48,530 --> 00:42:52,800
your customers rely on your website or

00:42:51,300 --> 00:42:55,170
application if it's slower

00:42:52,800 --> 00:42:58,110
non-responsive it infuriates your users

00:42:55,170 --> 00:42:59,940
and costs you money keeping your

00:42:58,110 --> 00:43:03,430
business critical systems humming along

00:42:59,940 --> 00:43:05,770
requires insight into what they're doing

00:43:03,430 --> 00:43:07,720
your system metrics tells stories

00:43:05,770 --> 00:43:09,730
stories that can reveal performance

00:43:07,720 --> 00:43:12,069
bottlenecks resource limitations and

00:43:09,730 --> 00:43:13,630
other problems but how do you keep an

00:43:12,069 --> 00:43:16,270
eye on all of your systems performance

00:43:13,630 --> 00:43:19,300
metrics in real-time and record this

00:43:16,270 --> 00:43:21,280
data for later analysis enter longview

00:43:19,300 --> 00:43:23,079
the new way to see what's really going

00:43:21,280 --> 00:43:25,240
on under the hood the long view

00:43:23,079 --> 00:43:27,309
dashboard lets you visualize the status

00:43:25,240 --> 00:43:29,740
of all your systems providing you with a

00:43:27,309 --> 00:43:33,130
bird's-eye view of your entire fleet you

00:43:29,740 --> 00:43:35,710
can sort by cpu memory swap processes

00:43:33,130 --> 00:43:37,480
load and network usage click a specific

00:43:35,710 --> 00:43:39,880
system to access its individual

00:43:37,480 --> 00:43:42,390
dashboard then click and drag to zoom in

00:43:39,880 --> 00:43:44,770
on chokepoints and get more detail

00:43:42,390 --> 00:43:46,450
comprehensive network data including

00:43:44,770 --> 00:43:48,760
inbound and outbound traffic is

00:43:46,450 --> 00:43:50,349
available on the network tab and disk

00:43:48,760 --> 00:43:52,270
rights and free space on the disk

00:43:50,349 --> 00:43:55,089
stabbed while the process Explorer

00:43:52,270 --> 00:43:57,640
displays usage statistics for individual

00:43:55,089 --> 00:43:59,800
processes the system info tab shows

00:43:57,640 --> 00:44:02,050
listening services active connections

00:43:59,800 --> 00:44:04,180
and available updates adding long view

00:44:02,050 --> 00:44:05,890
to a system is easy just click the

00:44:04,180 --> 00:44:08,020
button copy the one line installation

00:44:05,890 --> 00:44:10,480
command then run the command on your

00:44:08,020 --> 00:44:12,160
linux system to complete the process the

00:44:10,480 --> 00:44:14,349
agent will begin collecting data and

00:44:12,160 --> 00:44:16,190
sending it to longview then the graph

00:44:14,349 --> 00:44:18,770
start rolling

00:44:16,190 --> 00:44:21,140
use longview to gain visibility into

00:44:18,770 --> 00:44:24,880
your servers so when your website or app

00:44:21,140 --> 00:44:24,880

YouTube URL: https://www.youtube.com/watch?v=aXbmqVKbdOU


