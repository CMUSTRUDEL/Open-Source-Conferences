Title: David Beauchamp - All Data Is Local Data with PostgreSQL's Foreign Data Wrappers
Publication date: 2018-04-23
Playlist: 2017 SouthEast LinuxFest
Description: 
	2017 SouthEast LinuxFest
Zero To DBA Track
David Beauchamp
All Data Is Local Data with PostgreSQL's Foreign Data Wrappers
Captions: 
	00:00:00,020 --> 00:00:05,190
the following presentation was recorded

00:00:03,000 --> 00:00:07,980
at the southeast linux fest in charlotte

00:00:05,190 --> 00:00:10,650
north carolina it is licensed under a

00:00:07,980 --> 00:00:12,570
Creative Commons license for more

00:00:10,650 --> 00:00:18,449
information about the south east linux

00:00:12,570 --> 00:00:20,189
fest please visit www.ccltss.org the

00:00:18,449 --> 00:00:22,470
south east linux fest would like to

00:00:20,189 --> 00:00:25,619
thank the following diamond sponsors for

00:00:22,470 --> 00:00:28,740
helping make these videos possible and

00:00:25,619 --> 00:00:29,460
it kind of talks with me basically why

00:00:28,740 --> 00:00:31,380
do you wanna listen to me

00:00:29,460 --> 00:00:33,149
who I am my name is David Beauchamp I

00:00:31,380 --> 00:00:34,829
work for a company called X tuple we

00:00:33,149 --> 00:00:38,070
produce an enterprise resource planning

00:00:34,829 --> 00:00:40,079
product called X people year this is a

00:00:38,070 --> 00:00:43,530
completely open source stack built on

00:00:40,079 --> 00:00:44,940
cute the back end is PostgreSQL so hence

00:00:43,530 --> 00:00:47,160
you wanted to give the top today on

00:00:44,940 --> 00:00:48,870
PostgreSQL and everything even our

00:00:47,160 --> 00:00:50,940
commercial sides of this everything is

00:00:48,870 --> 00:00:52,680
open source so if you give us some money

00:00:50,940 --> 00:00:54,329
all the commercial stuff you'll get

00:00:52,680 --> 00:00:56,520
every piece of source code whether you

00:00:54,329 --> 00:00:59,489
want it or not kind of a next thing a

00:00:56,520 --> 00:01:01,379
little bit overwhelming sometimes on the

00:00:59,489 --> 00:01:02,969
hobbyist side I help contribute to our

00:01:01,379 --> 00:01:05,040
clinics arm primarily keeping the

00:01:02,969 --> 00:01:07,140
packages updated every single time main

00:01:05,040 --> 00:01:09,150
line arch up is packaged we have two as

00:01:07,140 --> 00:01:11,340
well most of the stuff and that's kind

00:01:09,150 --> 00:01:13,680
of where I come in I am a developer

00:01:11,340 --> 00:01:15,630
within the company one other title I

00:01:13,680 --> 00:01:17,220
hold is implementation engineer this

00:01:15,630 --> 00:01:19,560
primarily means getting people to use

00:01:17,220 --> 00:01:21,689
our software properly implementing it

00:01:19,560 --> 00:01:23,759
right but coming along with that helps

00:01:21,689 --> 00:01:25,590
if you actually know the backend so

00:01:23,759 --> 00:01:28,049
primarily what I do is PostgreSQL

00:01:25,590 --> 00:01:30,240
administration and architecture and I

00:01:28,049 --> 00:01:31,799
like to break things a lot but if you

00:01:30,240 --> 00:01:34,020
don't break things then you never get to

00:01:31,799 --> 00:01:37,049
figure out how to fix them it's the fun

00:01:34,020 --> 00:01:38,880
side of things I have given this talk to

00:01:37,049 --> 00:01:40,259
two people prior to coming down here the

00:01:38,880 --> 00:01:41,430
first time I gave it it was 30 minutes

00:01:40,259 --> 00:01:43,110
the second time I gave it was an hour

00:01:41,430 --> 00:01:44,670
and a half so let's see if we can kind

00:01:43,110 --> 00:01:46,409
of condense it and meet somewhere in the

00:01:44,670 --> 00:01:47,939
middle but if you guys have questions

00:01:46,409 --> 00:01:48,990
about any of this stuff I'm not the kind

00:01:47,939 --> 00:01:50,729
of person who wants to wait to the end

00:01:48,990 --> 00:01:52,470
just go ahead and raise your hand let's

00:01:50,729 --> 00:01:55,619
get a question get the answer while

00:01:52,470 --> 00:01:56,180
we're talking about the subjects so we

00:01:55,619 --> 00:01:59,549
ready begin

00:01:56,180 --> 00:02:00,750
what is PostgreSQL assuming well given

00:01:59,549 --> 00:02:02,729
this room actually have an idea but

00:02:00,750 --> 00:02:05,070
we'll go over some of this what our horn

00:02:02,729 --> 00:02:06,869
data wrappers why you may care about the

00:02:05,070 --> 00:02:08,429
combination of PostgreSQL and foreign

00:02:06,869 --> 00:02:10,289
data wrappers and then going ahead and

00:02:08,429 --> 00:02:12,390
taking a dive in to the subject at hand

00:02:10,289 --> 00:02:13,390
to the different kinds of horned a

00:02:12,390 --> 00:02:16,330
trappers there are

00:02:13,390 --> 00:02:18,640
now post Christ QL itself it's a

00:02:16,330 --> 00:02:20,680
database system it's primarily known for

00:02:18,640 --> 00:02:22,810
being an open source object relational

00:02:20,680 --> 00:02:24,670
database system one of the nicest parts

00:02:22,810 --> 00:02:26,980
about PostgreSQL is it's not controlled

00:02:24,670 --> 00:02:29,230
by a single corporation it was started

00:02:26,980 --> 00:02:31,810
by Great Bridge since that time however

00:02:29,230 --> 00:02:33,850
it has been handed down to a committee

00:02:31,810 --> 00:02:36,840
and it's controlled by a committee not a

00:02:33,850 --> 00:02:39,490
single corporation thank you for joining

00:02:36,840 --> 00:02:41,470
it's multi-platform that runs on most

00:02:39,490 --> 00:02:43,480
UNIX compatible operating systems and

00:02:41,470 --> 00:02:45,940
when I say most I have yet to find one

00:02:43,480 --> 00:02:48,100
that I wasn't able to build a port we

00:02:45,940 --> 00:02:49,870
primarily run it on Linux but we do also

00:02:48,100 --> 00:02:52,239
have people who insist on using Mac Mini

00:02:49,870 --> 00:02:53,500
servers so it runs on the Mac Mini or

00:02:52,239 --> 00:02:57,430
any other operating system you tend to

00:02:53,500 --> 00:02:59,800
have fun with foreign data wrappers

00:02:57,430 --> 00:03:02,290
themselves it's a fun name for an

00:02:59,800 --> 00:03:04,120
implementation of sequel mid sequel med

00:03:02,290 --> 00:03:06,070
is a sequel standard its management of

00:03:04,120 --> 00:03:08,470
external data and it provides a way to

00:03:06,070 --> 00:03:10,090
let end users and end developers connect

00:03:08,470 --> 00:03:12,520
to external or arbitrary data sources

00:03:10,090 --> 00:03:15,940
now this sounds like a whole lot of

00:03:12,520 --> 00:03:17,739
gobbly but we basically if you're

00:03:15,940 --> 00:03:19,200
working in a database you don't have to

00:03:17,739 --> 00:03:21,910
leave that database connection to access

00:03:19,200 --> 00:03:23,260
external data this becomes really

00:03:21,910 --> 00:03:25,510
powerful in the context of something

00:03:23,260 --> 00:03:26,890
like my software company which provides

00:03:25,510 --> 00:03:29,110
enterprise resource planning the whole

00:03:26,890 --> 00:03:31,780
idea of putting everything in one view

00:03:29,110 --> 00:03:34,269
this enables connectivity to all this

00:03:31,780 --> 00:03:36,130
stuff that people used to have this

00:03:34,269 --> 00:03:36,610
allows us to replace software more than

00:03:36,130 --> 00:03:39,610
ever before

00:03:36,610 --> 00:03:41,049
put that way and then this is my little

00:03:39,610 --> 00:03:42,610
end there's a harbinger of doom for

00:03:41,049 --> 00:03:45,310
middleware I don't know how many of you

00:03:42,610 --> 00:03:46,720
have had exposure to things like BizTalk

00:03:45,310 --> 00:03:48,670
or some of the other pieces of software

00:03:46,720 --> 00:03:50,890
that intend to connect one software to

00:03:48,670 --> 00:03:53,560
another without having to leave Postgres

00:03:50,890 --> 00:03:55,030
now we can stay inside the ecosphere and

00:03:53,560 --> 00:03:56,650
connect to these sources without needing

00:03:55,030 --> 00:04:01,600
something like this talk and do the eto

00:03:56,650 --> 00:04:03,370
or ETL for us why you should care I

00:04:01,600 --> 00:04:04,810
don't know what your guys positions are

00:04:03,370 --> 00:04:07,510
within the company or what your roles

00:04:04,810 --> 00:04:11,320
are within your industry or your hobby

00:04:07,510 --> 00:04:13,780
but the idea here is we have a back-end

00:04:11,320 --> 00:04:15,820
it's a database server we have another

00:04:13,780 --> 00:04:18,549
back-end or a front-end such as a web

00:04:15,820 --> 00:04:19,750
service or we have a file on disk or we

00:04:18,549 --> 00:04:21,430
have a sales and marketing department

00:04:19,750 --> 00:04:23,530
who decides they want to dump everything

00:04:21,430 --> 00:04:26,560
into the Dropbox folder and hope people

00:04:23,530 --> 00:04:28,630
can find it this way we can take

00:04:26,560 --> 00:04:30,250
these places and actually test out and

00:04:28,630 --> 00:04:32,680
do an integration directly in the

00:04:30,250 --> 00:04:34,150
database server database server sorry to

00:04:32,680 --> 00:04:35,980
actually pull this data in and retrieve

00:04:34,150 --> 00:04:38,650
it and I'm not discussing things like

00:04:35,980 --> 00:04:39,880
retrieving file names some of these will

00:04:38,650 --> 00:04:42,550
actually allow us to grab the bite

00:04:39,880 --> 00:04:43,720
contents of these files from disk so if

00:04:42,550 --> 00:04:45,340
you think of some of these engineering

00:04:43,720 --> 00:04:46,870
repositories that have existed in these

00:04:45,340 --> 00:04:48,669
companies for I don't know how many

00:04:46,870 --> 00:04:50,440
decades now you don't actually have to

00:04:48,669 --> 00:04:52,000
have someone sit there and write all the

00:04:50,440 --> 00:04:54,180
metadata for it we can just pull it all

00:04:52,000 --> 00:04:56,380
the file pull it off of the file system

00:04:54,180 --> 00:04:59,050
the primary point of these and the

00:04:56,380 --> 00:05:01,690
primary usage of foreign data occurs for

00:04:59,050 --> 00:05:03,070
me has been aggregating data I don't

00:05:01,690 --> 00:05:04,630
know how many different places your

00:05:03,070 --> 00:05:06,760
enterprise may collect things such as

00:05:04,630 --> 00:05:08,229
time clock information which is always

00:05:06,760 --> 00:05:10,270
separate quality control information

00:05:08,229 --> 00:05:12,580
which is always something else they have

00:05:10,270 --> 00:05:14,020
some fancy sort of aggregator where they

00:05:12,580 --> 00:05:15,639
write all these charts and graphs that

00:05:14,020 --> 00:05:17,200
they put everything into and all of

00:05:15,639 --> 00:05:19,479
these are usually a silo in an

00:05:17,200 --> 00:05:21,160
individual department when it comes time

00:05:19,479 --> 00:05:22,930
for people who are DBA is to pull all

00:05:21,160 --> 00:05:24,550
this information together it's usually

00:05:22,930 --> 00:05:27,130
your responsibility to make sure it all

00:05:24,550 --> 00:05:29,950
lines up or to keep some offline copy or

00:05:27,130 --> 00:05:32,020
to keep a cache copy or some way to let

00:05:29,950 --> 00:05:34,180
the higher-ups analyze and aggregate

00:05:32,020 --> 00:05:36,010
over this and using something like a

00:05:34,180 --> 00:05:38,260
foreign data wrapper we can basically

00:05:36,010 --> 00:05:40,330
give them one database connection into

00:05:38,260 --> 00:05:42,400
PO spreads build the logic all around

00:05:40,330 --> 00:05:44,470
this connection and not have to worry

00:05:42,400 --> 00:05:45,910
about all these others they still may

00:05:44,470 --> 00:05:47,740
exist because that's where the end users

00:05:45,910 --> 00:05:48,970
are putting in data but the person who's

00:05:47,740 --> 00:05:50,890
looking at it doesn't need to care

00:05:48,970 --> 00:05:53,350
anymore this takes a lot of load off of

00:05:50,890 --> 00:05:54,970
IT departments and of course just like

00:05:53,350 --> 00:05:56,410
my Harbinger comment on the last one we

00:05:54,970 --> 00:05:58,030
get to replace closely proprietary

00:05:56,410 --> 00:05:59,530
solutions and this is the thing that

00:05:58,030 --> 00:06:01,360
almost everybody I've shown these two

00:05:59,530 --> 00:06:03,220
really cares about the most their

00:06:01,360 --> 00:06:04,389
pension fees they're using something

00:06:03,220 --> 00:06:06,430
like jitter bit where it cost them

00:06:04,389 --> 00:06:08,039
picking brand a year to write a script

00:06:06,430 --> 00:06:10,090
to push data from one column to another

00:06:08,039 --> 00:06:14,620
versus what I'm about to show you is

00:06:10,090 --> 00:06:16,419
free and it's free as in gear great I'm

00:06:14,620 --> 00:06:17,530
gonna say it's great like it doesn't

00:06:16,419 --> 00:06:19,389
time to this because there's nothing

00:06:17,530 --> 00:06:21,130
when I first discovered more and ADA

00:06:19,389 --> 00:06:23,050
wrappers one of my primary goals at the

00:06:21,130 --> 00:06:24,940
company or tests I should say is to

00:06:23,050 --> 00:06:26,530
connect these systems and when I found

00:06:24,940 --> 00:06:27,400
this I stayed awake for about three days

00:06:26,530 --> 00:06:30,419
fiddling with it

00:06:27,400 --> 00:06:33,400
because it was aw I'm happy I'm good

00:06:30,419 --> 00:06:34,900
alright let's go ahead and dive in now

00:06:33,400 --> 00:06:36,430
this is where things start to get fun

00:06:34,900 --> 00:06:38,950
because we'll go over some examples and

00:06:36,430 --> 00:06:40,540
some real-world real-world cases where

00:06:38,950 --> 00:06:45,730
I've used this that

00:06:40,540 --> 00:06:46,900
we enhance our software there are a

00:06:45,730 --> 00:06:48,670
couple different types of foreign data

00:06:46,900 --> 00:06:50,920
wrappers this means a few different

00:06:48,670 --> 00:06:52,390
things but when I primarily say this I'm

00:06:50,920 --> 00:06:54,640
talking about what language they were in

00:06:52,390 --> 00:06:56,860
in basically every foreign data wrapper

00:06:54,640 --> 00:06:58,030
starts as a see model some sort of

00:06:56,860 --> 00:07:00,160
extension for postcards and they're

00:06:58,030 --> 00:07:02,200
almost always written in C I think there

00:07:00,160 --> 00:07:03,280
may be some C++ bindings for them but I

00:07:02,200 --> 00:07:05,580
don't think they're actually supported

00:07:03,280 --> 00:07:09,280
officially but I almost always see based

00:07:05,580 --> 00:07:11,770
that being said there is a native

00:07:09,280 --> 00:07:14,440
extension called multi corn which itself

00:07:11,770 --> 00:07:17,290
is AC extension however it provides a

00:07:14,440 --> 00:07:20,800
host for you to run Python code as a

00:07:17,290 --> 00:07:22,570
foreign data wrapper now the actual C

00:07:20,800 --> 00:07:24,610
native foreign data wrappers of course

00:07:22,570 --> 00:07:26,790
have the advantage of being fast they

00:07:24,610 --> 00:07:29,320
have all that fun C managed however

00:07:26,790 --> 00:07:30,430
rapid prototyping and for whipping out

00:07:29,320 --> 00:07:31,810
something that you want to show someone

00:07:30,430 --> 00:07:35,050
really quickly you can't beat the

00:07:31,810 --> 00:07:37,000
multi-core inside of this now I have no

00:07:35,050 --> 00:07:38,920
idea where the name comes from I'll be

00:07:37,000 --> 00:07:40,110
perfectly honest I've read their site 20

00:07:38,920 --> 00:07:43,270
times I have no idea where it come from

00:07:40,110 --> 00:07:44,590
but it nobody else has used this it's

00:07:43,270 --> 00:07:49,390
actually quite a unique name we'll be

00:07:44,590 --> 00:07:51,280
going now some examples of foreign aid

00:07:49,390 --> 00:07:54,100
wrappers there are of course as I said

00:07:51,280 --> 00:07:55,870
native versus multi corn the big three

00:07:54,100 --> 00:07:57,070
that I primarily work with the post

00:07:55,870 --> 00:08:00,190
press the poster is for native wrapper

00:07:57,070 --> 00:08:02,920
now there used to be an extension called

00:08:00,190 --> 00:08:04,570
DB link which basically was the most

00:08:02,920 --> 00:08:05,920
residential were in and see that had a

00:08:04,570 --> 00:08:08,440
series of functions to go along with it

00:08:05,920 --> 00:08:10,450
to allow you to kind of alias a remote

00:08:08,440 --> 00:08:12,070
table to the local connection every

00:08:10,450 --> 00:08:13,720
single time you connected to this you

00:08:12,070 --> 00:08:15,160
basically had to define what you're

00:08:13,720 --> 00:08:18,100
expecting as a result set it was a

00:08:15,160 --> 00:08:20,200
little messy that comes post res foreign

00:08:18,100 --> 00:08:21,820
data wrapper here and we can make a

00:08:20,200 --> 00:08:23,680
native candidate of connection either

00:08:21,820 --> 00:08:26,980
from the same server a remote server a

00:08:23,680 --> 00:08:28,750
hosted AWS RDS instance doesn't matter

00:08:26,980 --> 00:08:30,970
where push pres is but if you're doing

00:08:28,750 --> 00:08:33,280
things like developing on one instance

00:08:30,970 --> 00:08:34,780
and production on another instance you

00:08:33,280 --> 00:08:36,400
can link the back end tables together

00:08:34,780 --> 00:08:38,110
and push changes between the database

00:08:36,400 --> 00:08:40,030
servers and by changes I don't mean

00:08:38,110 --> 00:08:41,740
schema change is not vml I mean the

00:08:40,030 --> 00:08:45,370
actual are sorry not DD I mean actual do

00:08:41,740 --> 00:08:46,510
you know next of course my sequel and

00:08:45,370 --> 00:08:48,190
I'm sure you guys are familiar with my

00:08:46,510 --> 00:08:49,870
sequel and were cool these are native

00:08:48,190 --> 00:08:52,540
form data wrappers to connect to these

00:08:49,870 --> 00:08:53,680
services more often than not basically

00:08:52,540 --> 00:08:55,720
what they involved is

00:08:53,680 --> 00:08:57,820
building the client library for that so

00:08:55,720 --> 00:08:59,589
if you want to use my sequel form data

00:08:57,820 --> 00:09:01,720
wrapper you need to have the client

00:08:59,589 --> 00:09:03,430
library locally of course for this and

00:09:01,720 --> 00:09:04,750
then you build the FTW install it just

00:09:03,430 --> 00:09:07,930
like every other posterizing extension

00:09:04,750 --> 00:09:09,430
now one of the benefits of using the

00:09:07,930 --> 00:09:11,830
Postgres for new drivers that's included

00:09:09,430 --> 00:09:13,360
in their contribute so basically every

00:09:11,830 --> 00:09:15,610
operating system and every distro that

00:09:13,360 --> 00:09:17,920
provides binary packages will provide a

00:09:15,610 --> 00:09:19,149
binary version of the post res fpw you

00:09:17,920 --> 00:09:21,279
have the ones you end up building from

00:09:19,149 --> 00:09:23,110
source yourself which means that during

00:09:21,279 --> 00:09:24,399
in a post-credits upgrade you need to

00:09:23,110 --> 00:09:26,320
pay attention to also upgrading your

00:09:24,399 --> 00:09:28,990
custom extensions as a little bit of

00:09:26,320 --> 00:09:32,560
complexity but it still possible sorry

00:09:28,990 --> 00:09:34,630
yeah yeah let's get back here as far as

00:09:32,560 --> 00:09:36,160
the multi cooling side goes these gets a

00:09:34,630 --> 00:09:38,350
little bit more elaborate and a little

00:09:36,160 --> 00:09:41,320
bit more esoteric we of course have

00:09:38,350 --> 00:09:44,320
things like RSS the file system Postgres

00:09:41,320 --> 00:09:45,880
itself has nated handling of CSVs but

00:09:44,320 --> 00:09:48,070
this is typically done in copy

00:09:45,880 --> 00:09:50,800
statements or kind of one-time access

00:09:48,070 --> 00:09:52,899
versus if you have some sort of quality

00:09:50,800 --> 00:09:54,970
system which insists on outputting rows

00:09:52,899 --> 00:09:56,800
to a CSV on disk and you want to

00:09:54,970 --> 00:10:00,339
continually access that CSV there is of

00:09:56,800 --> 00:10:01,420
course a CSV a formdata wrapper for this

00:10:00,339 --> 00:10:03,220
and there's actually probably five or

00:10:01,420 --> 00:10:05,589
six of them some of them that expect

00:10:03,220 --> 00:10:08,220
with some should expect delimited text

00:10:05,589 --> 00:10:12,220
some that are encoded properly this

00:10:08,220 --> 00:10:14,140
doesn't know I kept fed the presentation

00:10:12,220 --> 00:10:15,700
I kept a kind of a webpage up so we can

00:10:14,140 --> 00:10:17,380
go through some of these if you want to

00:10:15,700 --> 00:10:18,850
see some of the individual ones but of

00:10:17,380 --> 00:10:20,200
course there's there's no sequel

00:10:18,850 --> 00:10:22,870
database wrappers there's stuff for

00:10:20,200 --> 00:10:25,390
files stuff for JSON some of the jist

00:10:22,870 --> 00:10:26,380
data you can kind of go overboard with

00:10:25,390 --> 00:10:28,390
the things you're connecting to but

00:10:26,380 --> 00:10:29,830
again a lot of these actually not sure

00:10:28,390 --> 00:10:31,770
if some of those are native but when you

00:10:29,830 --> 00:10:33,760
get into the multi corn side of this

00:10:31,770 --> 00:10:35,020
anything Python I don't know if you guys

00:10:33,760 --> 00:10:36,940
are how familiar guys are with Python

00:10:35,020 --> 00:10:39,060
but anything python can access you can

00:10:36,940 --> 00:10:42,040
return so I mean if you have things like

00:10:39,060 --> 00:10:43,990
the MailChimp interface you can connect

00:10:42,040 --> 00:10:46,750
to your lists and your subscribers using

00:10:43,990 --> 00:10:49,089
Python using their provided API

00:10:46,750 --> 00:10:50,560
their SDK actually the Python module

00:10:49,089 --> 00:11:01,750
they provide just loads in as a

00:10:50,560 --> 00:11:03,160
foreigner ever and we start always right

00:11:01,750 --> 00:11:05,620
we do things like IMAP because the

00:11:03,160 --> 00:11:07,780
internet access protocol this can be fun

00:11:05,620 --> 00:11:09,670
I don't know how well the handling of

00:11:07,780 --> 00:11:11,230
attachments has been improved but you

00:11:09,670 --> 00:11:12,490
can basically get the entire payload of

00:11:11,230 --> 00:11:16,510
the message and then do the base64

00:11:12,490 --> 00:11:17,920
decoding yourself if you want to so some

00:11:16,510 --> 00:11:19,900
mail servers like Exchange provide

00:11:17,920 --> 00:11:22,270
built-in ability to do things like

00:11:19,900 --> 00:11:24,730
archive mail or auto BCC some others

00:11:22,270 --> 00:11:25,990
some don't do this some things like

00:11:24,730 --> 00:11:28,060
Gmail don't give you any connectivity

00:11:25,990 --> 00:11:30,070
over a lot of this but you can access it

00:11:28,060 --> 00:11:31,900
via IMAP in a database server and do

00:11:30,070 --> 00:11:33,460
your own archiving you're selecting from

00:11:31,900 --> 00:11:34,900
a remote server I'm going to pull in the

00:11:33,460 --> 00:11:36,460
information and either stick it locally

00:11:34,900 --> 00:11:38,290
so it doesn't worry about getting

00:11:36,460 --> 00:11:40,420
deleted or you can leave it out if you

00:11:38,290 --> 00:11:42,040
want now I've used the IMAP one

00:11:40,420 --> 00:11:44,560
specifically for things like tickets

00:11:42,040 --> 00:11:46,480
every company has support at their

00:11:44,560 --> 00:11:48,880
domain this usually goes to a mailbox

00:11:46,480 --> 00:11:51,100
that somebody monitors I took it upon

00:11:48,880 --> 00:11:53,470
myself to use this IMAP extension to

00:11:51,100 --> 00:11:54,460
actually read this foreign table when

00:11:53,470 --> 00:11:55,810
new messages come in

00:11:54,460 --> 00:11:58,390
I created a support ticket within our

00:11:55,810 --> 00:12:00,190
cards in a tracker so now you don't have

00:11:58,390 --> 00:12:02,710
that delay between when the person sees

00:12:00,190 --> 00:12:04,720
it or they don't see it and the same

00:12:02,710 --> 00:12:06,760
thing without that and PostgreSQL itself

00:12:04,720 --> 00:12:08,410
can authenticate to LDAP but if you want

00:12:06,760 --> 00:12:10,270
within your application to provide

00:12:08,410 --> 00:12:12,339
anything from lightweight directory

00:12:10,270 --> 00:12:14,200
access protocol either is the foreign

00:12:12,339 --> 00:12:15,190
aid wrapper for this and it seems why do

00:12:14,200 --> 00:12:17,800
I need this in my database

00:12:15,190 --> 00:12:19,870
well now you can use LDAP to provide

00:12:17,800 --> 00:12:21,850
authentication to read the directory

00:12:19,870 --> 00:12:28,930
tree without actually having to talk

00:12:21,850 --> 00:12:32,020
directly to LDAP the structure of a

00:12:28,930 --> 00:12:34,810
foreign data Recker now there are of

00:12:32,020 --> 00:12:37,330
course the extension this is the code

00:12:34,810 --> 00:12:39,910
that PostgreSQL is uploads and that you

00:12:37,330 --> 00:12:42,070
interact with as I said before almost

00:12:39,910 --> 00:12:44,740
all the extensions themselves are in and

00:12:42,070 --> 00:12:47,530
see what they do from that point on is

00:12:44,740 --> 00:12:50,170
really up to the extension host price is

00:12:47,530 --> 00:12:54,010
very flexible in that regard and I think

00:12:50,170 --> 00:12:56,050
I think just recently with 96 or version

00:12:54,010 --> 00:12:57,670
10 either the version was just released

00:12:56,050 --> 00:12:59,740
the next one coming out they've actually

00:12:57,670 --> 00:13:02,050
moved to the second generation of the C

00:12:59,740 --> 00:13:03,550
extensions API that they're mandating

00:13:02,050 --> 00:13:05,920
there was an earlier version in a

00:13:03,550 --> 00:13:07,089
nanosecond somebody not as easy I'm not

00:13:05,920 --> 00:13:10,839
explaining this properly but that's all

00:13:07,089 --> 00:13:12,160
see so have fun sorry about that so from

00:13:10,839 --> 00:13:13,990
the extension itself we have the core

00:13:12,160 --> 00:13:15,490
code the command to create it is create

00:13:13,990 --> 00:13:16,959
extension the extension name

00:13:15,490 --> 00:13:18,310
I'm going to go over each of these in

00:13:16,959 --> 00:13:19,240
detail except for create extension

00:13:18,310 --> 00:13:20,770
because there's only one other option

00:13:19,240 --> 00:13:22,930
and that's basically to provide the name

00:13:20,770 --> 00:13:24,670
of the extension so for things that are

00:13:22,930 --> 00:13:27,760
in on the database server such as the

00:13:24,670 --> 00:13:29,380
contribs is the actual installation of

00:13:27,760 --> 00:13:33,190
those is a sequel command within a

00:13:29,380 --> 00:13:34,990
database server the other parts of this

00:13:33,190 --> 00:13:36,490
are the foreign server this is what

00:13:34,990 --> 00:13:38,080
you're connecting to the foreign user

00:13:36,490 --> 00:13:40,540
how are you're actually accessing this

00:13:38,080 --> 00:13:41,730
data and what the data is within that

00:13:40,540 --> 00:13:44,529
foreign server that you want to access

00:13:41,730 --> 00:13:46,089
each of these three parts have their own

00:13:44,529 --> 00:13:48,190
create statements to go along with it

00:13:46,089 --> 00:13:50,830
great corn server create foreign user

00:13:48,190 --> 00:13:52,810
and of course create foreign table now

00:13:50,830 --> 00:13:53,890
the foreign use a little bit of extra

00:13:52,810 --> 00:13:55,120
information that we'll go through but

00:13:53,890 --> 00:13:58,330
we'll start with of course the foreign

00:13:55,120 --> 00:14:00,070
server this command just like all other

00:13:58,330 --> 00:14:02,709
signal statements is a declaration I

00:14:00,070 --> 00:14:05,170
want to create the server name give it a

00:14:02,709 --> 00:14:07,870
name what foreign data wrapper am I

00:14:05,170 --> 00:14:09,910
using so this could be the name of a

00:14:07,870 --> 00:14:11,890
multi corn one it could be post presence

00:14:09,910 --> 00:14:13,990
for ftw could be the my sequel one

00:14:11,890 --> 00:14:15,820
styling up to you that you'd have to

00:14:13,990 --> 00:14:18,700
have installed of course and then the

00:14:15,820 --> 00:14:20,680
options now for this one is really

00:14:18,700 --> 00:14:22,300
straightforward where you know DB name

00:14:20,680 --> 00:14:25,029
is this the host is this and the port is

00:14:22,300 --> 00:14:26,740
this but primarily these options are the

00:14:25,029 --> 00:14:28,420
things that are exposed by whatever

00:14:26,740 --> 00:14:31,000
you're connecting to such as if you're

00:14:28,420 --> 00:14:32,829
using the my sequel coordinator wrapper

00:14:31,000 --> 00:14:34,420
you're gonna have one for the host the

00:14:32,829 --> 00:14:36,459
password yeah the host the username the

00:14:34,420 --> 00:14:38,589
password the poor etc but for things

00:14:36,459 --> 00:14:40,089
like the file data wrapper this is going

00:14:38,589 --> 00:14:41,800
to be the path for the file on disk

00:14:40,089 --> 00:14:43,560
these are basically your connection

00:14:41,800 --> 00:14:47,980
options like any other connection string

00:14:43,560 --> 00:14:51,130
except in this one force the user your

00:14:47,980 --> 00:14:52,690
connect as so you have the option when

00:14:51,130 --> 00:14:54,790
creating a user mapping of either

00:14:52,690 --> 00:14:57,430
letting anybody who tries to access this

00:14:54,790 --> 00:15:00,070
data source connect as one user and post

00:14:57,430 --> 00:15:01,500
where is the primary way I only call it

00:15:00,070 --> 00:15:05,350
anonymous but an authenticated user

00:15:01,500 --> 00:15:06,910
basically has a role of public public is

00:15:05,350 --> 00:15:09,940
assigned by default almost every object

00:15:06,910 --> 00:15:11,680
to allow you to read it oh you can say

00:15:09,940 --> 00:15:13,360
if I'm logged in I'm going to create a

00:15:11,680 --> 00:15:15,730
user mapping for anybody who's logged in

00:15:13,360 --> 00:15:17,440
to go in and access this source now this

00:15:15,730 --> 00:15:19,329
is great for people who have view access

00:15:17,440 --> 00:15:20,860
to the remote stuff but what if you want

00:15:19,329 --> 00:15:22,630
to use this same connection to provide

00:15:20,860 --> 00:15:23,949
someone to be able to modify that remote

00:15:22,630 --> 00:15:25,959
data because these are not

00:15:23,949 --> 00:15:27,430
unidirectional or is it yeah these are

00:15:25,959 --> 00:15:28,870
bi-directional connections you can

00:15:27,430 --> 00:15:31,000
connect and modify

00:15:28,870 --> 00:15:33,520
remotely maybe you want to use a user

00:15:31,000 --> 00:15:35,470
that has such permission and in this

00:15:33,520 --> 00:15:36,940
case you can override not say public

00:15:35,470 --> 00:15:38,920
we're gonna go ahead and say for to user

00:15:36,940 --> 00:15:42,130
when we connect to this server we're

00:15:38,920 --> 00:15:43,630
using this username password this is a

00:15:42,130 --> 00:15:44,980
little inflexible in the way that you

00:15:43,630 --> 00:15:46,990
have to declare or user name and

00:15:44,980 --> 00:15:48,670
password to connect to them but it's no

00:15:46,990 --> 00:15:49,900
different really than any other instance

00:15:48,670 --> 00:15:50,410
where you have to connect one system to

00:15:49,900 --> 00:15:53,950
another

00:15:50,410 --> 00:15:56,080
you have to authenticate somehow I don't

00:15:53,950 --> 00:15:58,000
believe this supports kpi quite yet so

00:15:56,080 --> 00:16:00,400
you're going to be defining things like

00:15:58,000 --> 00:16:02,529
a user mapping the password policies

00:16:00,400 --> 00:16:04,990
that force their users to change don't

00:16:02,529 --> 00:16:06,460
use a regular user for this create some

00:16:04,990 --> 00:16:10,870
sort of service account to use for your

00:16:06,460 --> 00:16:12,490
connections between your servers the

00:16:10,870 --> 00:16:15,220
foreign table there's a couple ways to

00:16:12,490 --> 00:16:16,839
import our foreign table information so

00:16:15,220 --> 00:16:18,640
this is where we define what the remote

00:16:16,839 --> 00:16:19,480
schema is and how we're going to access

00:16:18,640 --> 00:16:21,790
it locally

00:16:19,480 --> 00:16:23,860
now the create foreign table options

00:16:21,790 --> 00:16:26,589
basically are saying I want to create a

00:16:23,860 --> 00:16:28,930
table locally in our public schema

00:16:26,589 --> 00:16:31,210
called local table I have three columns

00:16:28,930 --> 00:16:34,180
in this case it happens to be ID a pay

00:16:31,210 --> 00:16:35,529
period ID and a user we're going to be

00:16:34,180 --> 00:16:38,230
using the server we defined previously

00:16:35,529 --> 00:16:40,029
and the options in this game case are

00:16:38,230 --> 00:16:42,010
going to be the table name that we're

00:16:40,029 --> 00:16:43,990
connecting to now this is what I call

00:16:42,010 --> 00:16:45,730
the hard way we're defining the schema

00:16:43,990 --> 00:16:47,260
of remote we're going through every

00:16:45,730 --> 00:16:48,730
single table we're making a local

00:16:47,260 --> 00:16:50,230
mapping to say this is what it looks

00:16:48,730 --> 00:16:52,029
like here this is what it looks like

00:16:50,230 --> 00:16:53,770
there now they don't exactly have to

00:16:52,029 --> 00:16:54,610
match you can take in a subset of column

00:16:53,770 --> 00:16:58,630
so you don't have to pull in the whole

00:16:54,610 --> 00:17:01,990
table if you want but of I think

00:16:58,630 --> 00:17:04,510
postgrads 9-3 might be 92 they added

00:17:01,990 --> 00:17:05,650
import foreign schema and this is the

00:17:04,510 --> 00:17:07,150
bee's knees when it involves this

00:17:05,650 --> 00:17:09,520
because you literally can type the

00:17:07,150 --> 00:17:11,860
statement import foreign schema remote

00:17:09,520 --> 00:17:15,160
schema now in the PostgreSQL and a

00:17:11,860 --> 00:17:15,780
schema is sort of a partition get out of

00:17:15,160 --> 00:17:18,250
here

00:17:15,780 --> 00:17:21,490
within the database server so you have a

00:17:18,250 --> 00:17:23,140
database and within that database you

00:17:21,490 --> 00:17:25,030
sort of have a partition where you can

00:17:23,140 --> 00:17:27,280
keep things like tables and functions

00:17:25,030 --> 00:17:29,679
and sequences kind of isolated together

00:17:27,280 --> 00:17:31,030
so within the Postgres land you have a

00:17:29,679 --> 00:17:33,850
database server and then a schema

00:17:31,030 --> 00:17:35,500
underneath it and some remote instances

00:17:33,850 --> 00:17:37,270
like my sequel you're going to have a

00:17:35,500 --> 00:17:39,100
schema which is the only place that you

00:17:37,270 --> 00:17:40,330
can store data in my sequel so when you

00:17:39,100 --> 00:17:42,820
say that you're basically pulling in

00:17:40,330 --> 00:17:45,009
from one place now with postcards you

00:17:42,820 --> 00:17:46,870
individually select these schemas some

00:17:45,009 --> 00:17:49,720
database where you can but again this is

00:17:46,870 --> 00:17:51,580
using verbage from PostgreSQL itself to

00:17:49,720 --> 00:17:54,490
kind of describe everything and in this

00:17:51,580 --> 00:17:56,740
8 in this case we don't necessarily do

00:17:54,490 --> 00:17:58,269
that we don't have a direct mapping

00:17:56,740 --> 00:18:03,039
between the foreign word so we use

00:17:58,269 --> 00:18:06,039
schema now I yeah so we're importing

00:18:03,039 --> 00:18:08,380
foreign schema schema from server our

00:18:06,039 --> 00:18:10,960
server we defined before into the local

00:18:08,380 --> 00:18:12,580
schema so we're taking remote

00:18:10,960 --> 00:18:13,960
information and we're creating a

00:18:12,580 --> 00:18:18,039
one-to-one mappings that information

00:18:13,960 --> 00:18:20,289
locally you have the ability to limit

00:18:18,039 --> 00:18:22,389
this command to only include certain

00:18:20,289 --> 00:18:24,549
tables or alternatively we're going to

00:18:22,389 --> 00:18:26,440
only include everything and exclude

00:18:24,549 --> 00:18:28,779
these certain tables so either limit to

00:18:26,440 --> 00:18:34,690
or accept and this is the same command

00:18:28,779 --> 00:18:37,960
from remote server into local schema now

00:18:34,690 --> 00:18:39,399
we get to go and tell oh I have

00:18:37,960 --> 00:18:42,519
PostgreSQL installed locally

00:18:39,399 --> 00:18:47,830
we'll go escape and we'll drop down into

00:18:42,519 --> 00:18:49,480
fun alright so I kind of way into this

00:18:47,830 --> 00:18:51,730
before became in I have fun with high

00:18:49,480 --> 00:18:54,879
DPI on the screen and the older version

00:18:51,730 --> 00:18:57,100
of pg-13 was built on wxwidgets does not

00:18:54,879 --> 00:18:58,990
care for high DPI so a lot of the things

00:18:57,100 --> 00:19:03,460
that you can see will work beautifully

00:18:58,990 --> 00:19:04,960
but if you try and do things like you

00:19:03,460 --> 00:19:06,340
can't really see the text that's

00:19:04,960 --> 00:19:07,990
returned so I'm going to kind of flop

00:19:06,340 --> 00:19:09,639
back and forth between the two database

00:19:07,990 --> 00:19:12,039
management tools they're both called PG

00:19:09,639 --> 00:19:14,049
admin one is three the one that's on a

00:19:12,039 --> 00:19:15,940
playout written with wxwidgets and of

00:19:14,049 --> 00:19:18,940
course i noted one written on python and

00:19:15,940 --> 00:19:20,940
flask which has some fun but I'm not

00:19:18,940 --> 00:19:23,289
quite used to it yet so I felt bold it

00:19:20,940 --> 00:19:27,309
so here we are alright so we'll go ahead

00:19:23,289 --> 00:19:29,350
and define one using RSS now I'm sure

00:19:27,309 --> 00:19:31,000
you guys all know what RSS is Simple

00:19:29,350 --> 00:19:32,799
Syndication so I went out and just

00:19:31,000 --> 00:19:34,269
grabbed if you go to southeast Sun

00:19:32,799 --> 00:19:35,710
infested or give you the source there's

00:19:34,269 --> 00:19:36,879
the of course alternates that I'll show

00:19:35,710 --> 00:19:38,830
you link on the top that you can grab

00:19:36,879 --> 00:19:41,440
the RSS from and we can go ahead and

00:19:38,830 --> 00:19:42,789
create a data source for this now the

00:19:41,440 --> 00:19:46,419
first instance of course is to create

00:19:42,789 --> 00:19:48,610
the server that is to create the server

00:19:46,419 --> 00:19:51,610
we need to give it a name we're saying

00:19:48,610 --> 00:19:53,200
what chlorinator wrapper using and with

00:19:51,610 --> 00:19:55,750
the multi corn option you have to

00:19:53,200 --> 00:19:56,440
provide a sub wrapper option with saying

00:19:55,750 --> 00:19:58,690
what

00:19:56,440 --> 00:20:02,560
on module am I actually using inside of

00:19:58,690 --> 00:20:04,480
multi horn basically for this particular

00:20:02,560 --> 00:20:06,310
instance we don't need an intern a

00:20:04,480 --> 00:20:09,910
mapping there is no authentication the

00:20:06,310 --> 00:20:12,010
rssss we do however need a foreign table

00:20:09,910 --> 00:20:14,170
mapping we need some way to say this is

00:20:12,010 --> 00:20:16,990
the information that we have locally now

00:20:14,170 --> 00:20:19,180
we're pointing to this schema externally

00:20:16,990 --> 00:20:20,650
now this is going to pull in parse of

00:20:19,180 --> 00:20:23,200
course the XML and put things in there

00:20:20,650 --> 00:20:25,330
right places now we need to basically

00:20:23,200 --> 00:20:27,880
say this is going to be the name of the

00:20:25,330 --> 00:20:29,530
column PostgreSQL does not expect

00:20:27,880 --> 00:20:31,120
uppercase for column names or for any

00:20:29,530 --> 00:20:32,530
identifier if you do provide an

00:20:31,120 --> 00:20:34,690
uppercase character within it you now

00:20:32,530 --> 00:20:36,280
have to quote that character so we can

00:20:34,690 --> 00:20:38,380
see pub date is quoted versus

00:20:36,280 --> 00:20:41,110
description title and length or not and

00:20:38,380 --> 00:20:44,860
that is why so this actually creates our

00:20:41,110 --> 00:20:46,330
foreign table and then from underneath

00:20:44,860 --> 00:20:47,860
our foreign table we now have a

00:20:46,330 --> 00:20:49,990
definition that says we can do things

00:20:47,860 --> 00:20:53,770
like select statements from it so if we

00:20:49,990 --> 00:20:57,460
go back to here we go into our public

00:20:53,770 --> 00:21:00,460
schema or I've created most of this we

00:20:57,460 --> 00:21:02,770
should have foreign tables and we have

00:21:00,460 --> 00:21:05,710
self RSS which has our definition as

00:21:02,770 --> 00:21:07,390
defined in the previous screen now once

00:21:05,710 --> 00:21:09,550
we have this we can do select statements

00:21:07,390 --> 00:21:11,830
against it so we wanted actually run

00:21:09,550 --> 00:21:13,600
things like select star from star or

00:21:11,830 --> 00:21:15,760
where we're going to get from we can

00:21:13,600 --> 00:21:17,860
have this now so by executing a select

00:21:15,760 --> 00:21:19,450
statement from this warn table Python of

00:21:17,860 --> 00:21:21,730
course went out made its web request

00:21:19,450 --> 00:21:24,370
parse the XML and returned what it

00:21:21,730 --> 00:21:27,220
retrieved for us as an individual tuple

00:21:24,370 --> 00:21:29,440
now this is just of course the

00:21:27,220 --> 00:21:32,380
publication date and the title but this

00:21:29,440 --> 00:21:36,540
also does have we start to get a little

00:21:32,380 --> 00:21:36,540
fun link

00:21:41,720 --> 00:21:50,539
sometimes the easy things so uh how much

00:21:49,070 --> 00:21:50,870
fun you guys want to make of me here we

00:21:50,539 --> 00:21:56,600
go

00:21:50,870 --> 00:21:58,279
I am failing at GBA alright so this will

00:21:56,600 --> 00:21:59,330
actually go out and grab the link in the

00:21:58,279 --> 00:22:00,440
description for everything which of

00:21:59,330 --> 00:22:02,269
course is too much text for what we're

00:22:00,440 --> 00:22:04,730
displaying here but if for some reason

00:22:02,269 --> 00:22:06,259
you want to build an RSS reader at a

00:22:04,730 --> 00:22:09,139
post grace do all you have everything

00:22:06,259 --> 00:22:12,679
you need now this is just one side of it

00:22:09,139 --> 00:22:14,299
for the RSS stuff we can go in of course

00:22:12,679 --> 00:22:16,399
as well and do something a little bit

00:22:14,299 --> 00:22:18,500
more useful as I mentioned earlier so

00:22:16,399 --> 00:22:20,809
one of the ones that I use most often

00:22:18,500 --> 00:22:23,750
besides the postgrads FTW one is the

00:22:20,809 --> 00:22:26,269
file system that I as an implementer go

00:22:23,750 --> 00:22:27,919
in to customer sites constantly and am

00:22:26,269 --> 00:22:30,230
presented with folders full of files

00:22:27,919 --> 00:22:31,610
that nobody has an index for nobody

00:22:30,230 --> 00:22:33,889
knows what's in them nobody knows

00:22:31,610 --> 00:22:35,269
anything about them other than here's

00:22:33,889 --> 00:22:37,700
the last ten years of stuff that we've

00:22:35,269 --> 00:22:40,669
collected and so we need to somehow

00:22:37,700 --> 00:22:43,759
iterate over them programmatically now

00:22:40,669 --> 00:22:45,049
this file can get quite elaborate and

00:22:43,759 --> 00:22:46,570
I'm going to go over the definition of

00:22:45,049 --> 00:22:49,220
this one best of my understanding

00:22:46,570 --> 00:22:51,799
because this can get fun as far as

00:22:49,220 --> 00:22:53,570
parsing out segments of a file name if

00:22:51,799 --> 00:22:57,590
you actually have structured data such

00:22:53,570 --> 00:22:59,870
as you know music / artists / album /

00:22:57,590 --> 00:23:01,789
title track title etc you can actually

00:22:59,870 --> 00:23:03,409
parse out each of those segments of the

00:23:01,789 --> 00:23:05,929
file name and path into its own column

00:23:03,409 --> 00:23:07,340
within the result set you don't have to

00:23:05,929 --> 00:23:09,740
get that elaborate you can just do what

00:23:07,340 --> 00:23:11,570
I did and just said file so it's going

00:23:09,740 --> 00:23:13,909
to be one element with the entire

00:23:11,570 --> 00:23:16,009
pestering in it it's really up to you

00:23:13,909 --> 00:23:17,720
how deep you want to go into this so

00:23:16,009 --> 00:23:21,230
just like our previous definitions we

00:23:17,720 --> 00:23:23,269
have the server itself the server

00:23:21,230 --> 00:23:25,190
defines what rapper it's using and in

00:23:23,269 --> 00:23:27,110
this case we're going to be using the

00:23:25,190 --> 00:23:31,159
files link born data wrapper

00:23:27,110 --> 00:23:32,570
I'm creating my table which has the the

00:23:31,159 --> 00:23:34,429
stock one file which is what I've

00:23:32,570 --> 00:23:36,740
created and I'll go over this normally

00:23:34,429 --> 00:23:39,139
have a pointer but I'll try not to fall

00:23:36,740 --> 00:23:41,149
off the table at the same time so we

00:23:39,139 --> 00:23:42,769
have record our file querida burying the

00:23:41,149 --> 00:23:45,110
content a byte column and in the file

00:23:42,769 --> 00:23:46,490
name those are the two that come with

00:23:45,110 --> 00:23:49,580
this fluorinated wrapper at the bottom -

00:23:46,490 --> 00:23:51,649
now if you define on your own different

00:23:49,580 --> 00:23:53,600
segments down below things like the

00:23:51,649 --> 00:23:55,640
pattern within here each of the things

00:23:53,600 --> 00:23:57,590
you define can become its own

00:23:55,640 --> 00:23:59,000
and you can select from this and this is

00:23:57,590 --> 00:24:00,260
roasting you can start getting kind of

00:23:59,000 --> 00:24:02,270
elaborate here if you have a structured

00:24:00,260 --> 00:24:03,770
data if you don't using this pattern

00:24:02,270 --> 00:24:05,360
might not return things that you expect

00:24:03,770 --> 00:24:06,200
to see because if it doesn't match that

00:24:05,360 --> 00:24:09,290
pattern you're not going to see it

00:24:06,200 --> 00:24:11,450
basically from this you're gonna say of

00:24:09,290 --> 00:24:14,840
course we're achieving this information

00:24:11,450 --> 00:24:17,270
on UNIX systems and I think Windows

00:24:14,840 --> 00:24:19,070
these days those for SQL runs as the

00:24:17,270 --> 00:24:21,350
user Postgres almost always unless you

00:24:19,070 --> 00:24:23,030
specify something else and that user has

00:24:21,350 --> 00:24:25,880
access to very little on the file system

00:24:23,030 --> 00:24:27,170
so if you intend to let PostgreSQL

00:24:25,880 --> 00:24:29,780
connect to things on the file system

00:24:27,170 --> 00:24:32,030
that user needs to read access to that

00:24:29,780 --> 00:24:33,530
well it seems basic but you got to

00:24:32,030 --> 00:24:34,760
remember + resident good user you're

00:24:33,530 --> 00:24:38,480
gonna have to be explicit of what you

00:24:34,760 --> 00:24:40,070
give it access to the last two options

00:24:38,480 --> 00:24:41,870
within the server definition are the

00:24:40,070 --> 00:24:43,970
content column and the file name column

00:24:41,870 --> 00:24:46,100
and these are that are provided by this

00:24:43,970 --> 00:24:47,870
foreign data wrapper you can give them

00:24:46,100 --> 00:24:48,980
an alternate name here if you wanted it

00:24:47,870 --> 00:24:50,750
something other than content and file

00:24:48,980 --> 00:24:52,220
name however those are the two that I

00:24:50,750 --> 00:24:53,960
add up just in the most and actually

00:24:52,220 --> 00:24:55,370
sometimes aren't even touch file because

00:24:53,960 --> 00:25:03,470
that's basically going to be the same as

00:24:55,370 --> 00:25:04,700
spelling column no this is it's

00:25:03,470 --> 00:25:10,070
accessing it as the post read binary

00:25:04,700 --> 00:25:11,720
which runs as that user it's decently

00:25:10,070 --> 00:25:13,970
easy enough to just say we're going to

00:25:11,720 --> 00:25:15,890
allow this user yeah read to just this

00:25:13,970 --> 00:25:17,360
folder or something with him just don't

00:25:15,890 --> 00:25:19,850
just don't you know make it run as root

00:25:17,360 --> 00:25:21,169
yes I mean you're next we'll let you

00:25:19,850 --> 00:25:22,820
write that's the unit philosophy have

00:25:21,169 --> 00:25:25,970
fun shoot yourself in the foot but I

00:25:22,820 --> 00:25:27,350
don't recommend it that's it so when we

00:25:25,970 --> 00:25:28,700
do this when we create this definition

00:25:27,350 --> 00:25:30,590
we can actually do things like you know

00:25:28,700 --> 00:25:31,370
select star from files but we'll go in

00:25:30,590 --> 00:25:32,750
here and I'm not sure if you can

00:25:31,370 --> 00:25:40,070
actually see this result set down there

00:25:32,750 --> 00:25:41,929
but we'll pop into this one and then

00:25:40,070 --> 00:25:43,190
this is of course just a push press call

00:25:41,929 --> 00:25:44,809
data directory there's very little in

00:25:43,190 --> 00:25:46,520
this directory but we have the

00:25:44,809 --> 00:25:49,340
Federation file that postmaster options

00:25:46,520 --> 00:25:52,160
within PostgreSQL itself you can control

00:25:49,340 --> 00:25:53,960
access to host bus interfaces like

00:25:52,160 --> 00:25:55,850
network interfaces individually so of

00:25:53,960 --> 00:25:57,590
course we have that configuration we

00:25:55,850 --> 00:25:59,900
have the paid that it's running is now

00:25:57,590 --> 00:26:01,669
this just gave us the file name as we

00:25:59,900 --> 00:26:03,770
saw before we can actually do things

00:26:01,669 --> 00:26:06,440
like content alright we want we want the

00:26:03,770 --> 00:26:09,140
byte value we can specify the column

00:26:06,440 --> 00:26:20,710
content which looks funny in terminal

00:26:09,140 --> 00:26:22,700
it looks a little bit better oh yeah

00:26:20,710 --> 00:26:24,800
this gets me every time

00:26:22,700 --> 00:26:25,940
you can fill the entire query window but

00:26:24,800 --> 00:26:28,340
it'll try and run them all if you don't

00:26:25,940 --> 00:26:30,170
have to select one so this will retrieve

00:26:28,340 --> 00:26:32,750
our file name as the and it will

00:26:30,170 --> 00:26:35,630
retrieve a byte array home of the actual

00:26:32,750 --> 00:26:37,310
bytes from the disk this looking at it

00:26:35,630 --> 00:26:39,380
in Fiji admin isn't gonna do a lot for

00:26:37,310 --> 00:26:40,640
you of course if you not cuz these are

00:26:39,380 --> 00:26:42,200
text files there it's a little easier to

00:26:40,640 --> 00:26:44,840
read but if these were actually bytes

00:26:42,200 --> 00:26:45,440
then all you'd be seeing a byte not

00:26:44,840 --> 00:26:47,750
getting much good

00:26:45,440 --> 00:26:50,120
however this now gives you direct byte

00:26:47,750 --> 00:26:51,590
access to all the files on disk so I

00:26:50,120 --> 00:26:54,350
don't know if any of you have ever run

00:26:51,590 --> 00:26:56,090
anything like a SolidWorks EPDM which is

00:26:54,350 --> 00:26:58,400
a sort of engineering workflow

00:26:56,090 --> 00:27:00,380
management and you this gated management

00:26:58,400 --> 00:27:03,170
stuff they all love to write out files

00:27:00,380 --> 00:27:05,030
to disk what good is that to anybody who

00:27:03,170 --> 00:27:06,800
has access to that file system well now

00:27:05,030 --> 00:27:08,330
we can provide things like the

00:27:06,800 --> 00:27:09,980
engineering and a support staff direct

00:27:08,330 --> 00:27:11,900
access to these files these support

00:27:09,980 --> 00:27:13,730
drawings these renderings these whatever

00:27:11,900 --> 00:27:16,280
I'm with in there ERP without them ever

00:27:13,730 --> 00:27:18,200
having to end it was all worth it's this

00:27:16,280 --> 00:27:19,940
is more powerful than it seems it's a

00:27:18,200 --> 00:27:21,830
directory listing but this is our

00:27:19,940 --> 00:27:23,750
database server listing these files and

00:27:21,830 --> 00:27:25,370
retrieving the bytes for us we can now

00:27:23,750 --> 00:27:29,710
get this stuff from anywhere we have a

00:27:25,370 --> 00:27:31,670
database connection this this to me is

00:27:29,710 --> 00:27:33,560
possibly one of the more powerful things

00:27:31,670 --> 00:27:35,870
that we deal with well you have access

00:27:33,560 --> 00:27:37,100
to file but at the same time you now

00:27:35,870 --> 00:27:38,390
have a database server that has access

00:27:37,100 --> 00:27:39,770
to files and that should be terrifying

00:27:38,390 --> 00:27:46,880
as well so make sure that you keep

00:27:39,770 --> 00:27:49,270
things nice and clean all right all

00:27:46,880 --> 00:27:53,090
right so on to a practical example I

00:27:49,270 --> 00:27:55,070
have done most recently an integration

00:27:53,090 --> 00:27:57,470
between a payroll software and our ERP

00:27:55,070 --> 00:27:59,120
now a lot of people will think of well

00:27:57,470 --> 00:28:01,160
why don't you do the European or self or

00:27:59,120 --> 00:28:04,880
why don't you do payroll yourself it's

00:28:01,160 --> 00:28:06,560
way too way too involved there's way too

00:28:04,880 --> 00:28:08,840
much regulation there's way too much tax

00:28:06,560 --> 00:28:10,580
and stuff changing we need a company

00:28:08,840 --> 00:28:11,930
twice our size to manage just the tax

00:28:10,580 --> 00:28:13,610
structure changes every year so we don't

00:28:11,930 --> 00:28:15,440
we do everything else for the companies

00:28:13,610 --> 00:28:16,790
have a payroll but it's probably one of

00:28:15,440 --> 00:28:19,070
the first things that people ask us

00:28:16,790 --> 00:28:20,210
what's your payroll solution well now we

00:28:19,070 --> 00:28:21,410
don't have to carry what your solution

00:28:20,210 --> 00:28:22,110
is because as long as I can get some

00:28:21,410 --> 00:28:24,030
sort of connectivity

00:28:22,110 --> 00:28:25,799
that I can go in and pull in things like

00:28:24,030 --> 00:28:27,690
your payroll information directly into

00:28:25,799 --> 00:28:29,250
my database server I don't need to care

00:28:27,690 --> 00:28:30,480
about your payroll service now everybody

00:28:29,250 --> 00:28:32,460
can push flat files back and forth

00:28:30,480 --> 00:28:34,500
that's probably the thing that people do

00:28:32,460 --> 00:28:36,150
the most and it should terrify you that

00:28:34,500 --> 00:28:39,360
they banks and stuff still use FTP

00:28:36,150 --> 00:28:41,429
primarily for this this is something

00:28:39,360 --> 00:28:45,720
that I deal with constantly how do we

00:28:41,429 --> 00:28:48,120
get this ACH information over FUP yeah

00:28:45,720 --> 00:28:52,470
well that would have a tunnel just send

00:28:48,120 --> 00:28:54,960
it yeah regulations on everything else

00:28:52,470 --> 00:28:56,490
except for this kind of stuff but one of

00:28:54,960 --> 00:28:58,320
the prime ones that we connect with is

00:28:56,490 --> 00:28:59,940
another open source payroll software

00:28:58,320 --> 00:29:02,660
called PEM tricks now this is based

00:28:59,940 --> 00:29:05,340
either on my sequel or MySQL sorry or

00:29:02,660 --> 00:29:07,320
PostgreSQL and we deal directly with the

00:29:05,340 --> 00:29:08,190
PostgreSQL instance as far as time track

00:29:07,320 --> 00:29:10,890
Skerritt it doesn't care what the

00:29:08,190 --> 00:29:11,940
backend is running on as far as us we

00:29:10,890 --> 00:29:17,669
prefer postscript

00:29:11,940 --> 00:29:20,630
right so on our database server we can

00:29:17,669 --> 00:29:24,330
have some fun will happen the PGI before

00:29:20,630 --> 00:29:26,370
so just like before I have a foreign

00:29:24,330 --> 00:29:28,679
server define name tt just short for

00:29:26,370 --> 00:29:31,010
contracts and I have a local schema that

00:29:28,679 --> 00:29:33,570
I created also called PP Kurt Hendricks

00:29:31,010 --> 00:29:35,429
now this statement import foreign schema

00:29:33,570 --> 00:29:37,410
public will connect to my remote server

00:29:35,429 --> 00:29:39,780
TT which happens to be a PostgreSQL

00:29:37,410 --> 00:29:41,190
server it will iterate over all the

00:29:39,780 --> 00:29:43,080
instances and the tables and stuff that

00:29:41,190 --> 00:29:45,150
are in that public schema and it will go

00:29:43,080 --> 00:29:49,530
and create a mapping locally in my

00:29:45,150 --> 00:29:54,150
schema called TT so this execute faster

00:29:49,530 --> 00:30:00,299
than it should really and now we go back

00:29:54,150 --> 00:30:01,679
to the easy one that's easy to browse so

00:30:00,299 --> 00:30:03,600
as we can see there are no foreign

00:30:01,679 --> 00:30:06,570
tables I click on it refreshes now those

00:30:03,600 --> 00:30:09,570
123 form tables within here now every

00:30:06,570 --> 00:30:13,590
single one of these is a link now to a

00:30:09,570 --> 00:30:15,150
table on the remote instance any query

00:30:13,590 --> 00:30:17,610
that you could have run on that side you

00:30:15,150 --> 00:30:19,140
can now run locally one of the things

00:30:17,610 --> 00:30:21,179
that I did not touch on when I started

00:30:19,140 --> 00:30:22,410
talking about the foreign tables is that

00:30:21,179 --> 00:30:24,960
not only do you have write access to

00:30:22,410 --> 00:30:26,610
this but you also have trigger access to

00:30:24,960 --> 00:30:28,290
some of the remote data sources and all

00:30:26,610 --> 00:30:30,030
the support remote triggers but the

00:30:28,290 --> 00:30:31,710
postgrads coordinator ever does so you

00:30:30,030 --> 00:30:33,330
can create a trigger that will run on

00:30:31,710 --> 00:30:35,640
your local server when something happens

00:30:33,330 --> 00:30:36,000
on the remote data source so one of the

00:30:35,640 --> 00:30:38,010
things

00:30:36,000 --> 00:30:39,480
like to worry about is I had these two

00:30:38,010 --> 00:30:41,370
data sources how do I move data from one

00:30:39,480 --> 00:30:42,540
to another does someone have to go and

00:30:41,370 --> 00:30:44,340
click a button or what do I have to do

00:30:42,540 --> 00:30:45,810
well if you have a remote trigger

00:30:44,340 --> 00:30:47,880
nobody has to do anything because your

00:30:45,810 --> 00:30:49,200
trigger took care of it it does not

00:30:47,880 --> 00:30:50,910
import triggers automatically of course

00:30:49,200 --> 00:30:54,450
you have to create those yourself but

00:30:50,910 --> 00:30:57,720
they are supported now this pulled in a

00:30:54,450 --> 00:30:59,100
lot of tables now unless you're familiar

00:30:57,720 --> 00:31:00,900
with the remote schema that you're

00:30:59,100 --> 00:31:02,250
dealing with this is not going to help

00:31:00,900 --> 00:31:04,320
you understand that remote software

00:31:02,250 --> 00:31:05,880
better or worse this is just giving you

00:31:04,320 --> 00:31:08,040
a connectivity to this what you do with

00:31:05,880 --> 00:31:10,110
it is still up to you but just the fact

00:31:08,040 --> 00:31:13,230
that we now have a link from here to

00:31:10,110 --> 00:31:14,790
another database on another server we

00:31:13,230 --> 00:31:16,590
don't we no longer have this talk in the

00:31:14,790 --> 00:31:18,180
middle we have this piece of software

00:31:16,590 --> 00:31:20,400
right here with our tables that will let

00:31:18,180 --> 00:31:23,040
us pull in whatever we want and we can

00:31:20,400 --> 00:31:25,770
start going over how I've used this now

00:31:23,040 --> 00:31:28,980
we're going to dump in briefly to my

00:31:25,770 --> 00:31:30,000
company software vector pool because

00:31:28,980 --> 00:31:33,480
this is pretty much where I've set

00:31:30,000 --> 00:31:35,670
basically everything up underneath our

00:31:33,480 --> 00:31:38,550
accounting menu I drop in a new menu

00:31:35,670 --> 00:31:39,990
called payroll where we can go in and of

00:31:38,550 --> 00:31:42,480
course setup payroll which I already did

00:31:39,990 --> 00:31:43,460
this is just a walk through of creating

00:31:42,480 --> 00:31:46,110
the foreign server

00:31:43,460 --> 00:31:47,580
none of our end users know what PG admin

00:31:46,110 --> 00:31:48,930
is I wouldn't say none but most of our

00:31:47,580 --> 00:31:51,090
end users don't know what PG admin is

00:31:48,930 --> 00:31:52,500
and it's poor to tell them that they

00:31:51,090 --> 00:31:55,200
have to go in there to set things up so

00:31:52,500 --> 00:31:56,520
we of course will create a payroll

00:31:55,200 --> 00:31:58,140
import wizard to have them go through

00:31:56,520 --> 00:32:01,080
and set up the host and all this fun

00:31:58,140 --> 00:32:04,410
stuff and HiDPI does not like some of

00:32:01,080 --> 00:32:06,270
those labels however once this is

00:32:04,410 --> 00:32:09,390
defined we actually now have access to

00:32:06,270 --> 00:32:11,190
that payroll data so from within our erp

00:32:09,390 --> 00:32:14,040
we can go into accounting we can go into

00:32:11,190 --> 00:32:16,320
payroll and import payroll when we query

00:32:14,040 --> 00:32:18,180
on this screen this is using Postgres

00:32:16,320 --> 00:32:19,950
foreign data wrapper to connect to a

00:32:18,180 --> 00:32:21,240
remote database server and i'm actually

00:32:19,950 --> 00:32:22,530
trusting that the internet will stay up

00:32:21,240 --> 00:32:25,770
right now because this is hosted at my

00:32:22,530 --> 00:32:27,000
house and these the only payable runs

00:32:25,770 --> 00:32:29,730
that I have from when I first set this

00:32:27,000 --> 00:32:31,500
up basically within time tracks of

00:32:29,730 --> 00:32:33,390
course when you're defining a pay period

00:32:31,500 --> 00:32:34,470
you have the time of one that people are

00:32:33,390 --> 00:32:36,870
getting paid from the beginning at the

00:32:34,470 --> 00:32:38,850
end of two weeks maybe one week maybe a

00:32:36,870 --> 00:32:40,620
day who knows but at the end of this we

00:32:38,850 --> 00:32:42,030
have the start date end date and

00:32:40,620 --> 00:32:44,040
transaction date when your transactions

00:32:42,030 --> 00:32:45,179
are going to hit your ledger I don't

00:32:44,040 --> 00:32:47,340
know how familiar you guys are with the

00:32:45,179 --> 00:32:49,710
whole accounting side of things but the

00:32:47,340 --> 00:32:52,409
only thing that a software cares about

00:32:49,710 --> 00:32:54,630
our about payroll is what happened to

00:32:52,409 --> 00:32:57,120
your books it's not really all it cares

00:32:54,630 --> 00:32:57,570
about what was my accounts were affected

00:32:57,120 --> 00:33:00,480
by this

00:32:57,570 --> 00:33:02,130
and for some reason typing it in becomes

00:33:00,480 --> 00:33:03,539
too much so we end up providing a

00:33:02,130 --> 00:33:06,419
solution to right-click on it

00:33:03,539 --> 00:33:08,940
we go ahead and import that ledger that

00:33:06,419 --> 00:33:11,070
went out did all the query on the remote

00:33:08,940 --> 00:33:13,710
server aggregated the data that I wanted

00:33:11,070 --> 00:33:15,659
and was done within seconds and now we

00:33:13,710 --> 00:33:17,669
have within our software here an actual

00:33:15,659 --> 00:33:20,820
ledger that we can go in and say all

00:33:17,669 --> 00:33:24,240
right you know double entry bookkeeping

00:33:20,820 --> 00:33:25,799
staff to have two sides that balance so

00:33:24,240 --> 00:33:28,620
we no longer have four to three hundred

00:33:25,799 --> 00:33:30,720
bucks in cash we gave it all to this

00:33:28,620 --> 00:33:33,120
employee we pay this by ket we paid his

00:33:30,720 --> 00:33:34,770
Medicare on his side of his liabilities

00:33:33,120 --> 00:33:37,169
and now within our database software

00:33:34,770 --> 00:33:38,730
within our ERP software we can pull in

00:33:37,169 --> 00:33:40,289
these live transactions without

00:33:38,730 --> 00:33:42,179
something having to go in and key in

00:33:40,289 --> 00:33:43,740
every count without having to fed figure

00:33:42,179 --> 00:33:44,909
in the amounts and then go back and try

00:33:43,740 --> 00:33:47,549
and figure out why things off balance

00:33:44,909 --> 00:33:50,100
anymore so this is a really

00:33:47,549 --> 00:33:52,440
straightforward and simple I say simple

00:33:50,100 --> 00:33:54,720
in that it seems simple from the

00:33:52,440 --> 00:33:56,190
end-user but all they had to do the

00:33:54,720 --> 00:33:57,720
accountant can go in and import this

00:33:56,190 --> 00:33:58,890
ledger and be done with it

00:33:57,720 --> 00:34:01,529
and now the thing that used to take her

00:33:58,890 --> 00:34:03,929
for hours every week on Thursday she did

00:34:01,529 --> 00:34:06,480
in one click these are the kinds of

00:34:03,929 --> 00:34:08,419
things when you're going in from a

00:34:06,480 --> 00:34:11,700
company from a position like mine is

00:34:08,419 --> 00:34:13,470
don't ask people what they do just watch

00:34:11,700 --> 00:34:14,700
what they do because they don't know

00:34:13,470 --> 00:34:16,530
that the thing that's taking them for

00:34:14,700 --> 00:34:17,520
hours can be done in a couple clicks so

00:34:16,530 --> 00:34:19,950
you don't you don't ask those questions

00:34:17,520 --> 00:34:21,389
you just you just watch and people like

00:34:19,950 --> 00:34:22,980
me can come in and say all right here we

00:34:21,389 --> 00:34:24,300
go we're done we have our ledger

00:34:22,980 --> 00:34:25,679
transactions we can go through and

00:34:24,300 --> 00:34:27,510
import our paper you'd be done with this

00:34:25,679 --> 00:34:28,859
now once you get someone in the

00:34:27,510 --> 00:34:31,440
accounting department or someone on that

00:34:28,859 --> 00:34:33,750
side on your side now they're gonna

00:34:31,440 --> 00:34:35,280
start wanting all kinds of stuff it

00:34:33,750 --> 00:34:37,470
which is great as a consultant what you

00:34:35,280 --> 00:34:39,300
want right I want more work to come in

00:34:37,470 --> 00:34:40,349
and not only that but I want them to be

00:34:39,300 --> 00:34:43,919
happy with the stuff that I make for

00:34:40,349 --> 00:34:45,359
them when a RP everybody adheres of you

00:34:43,919 --> 00:34:47,190
know the horror implementation that

00:34:45,359 --> 00:34:49,260
fails and I spent six million dollars

00:34:47,190 --> 00:34:51,990
trying to implement Oracle we avoid this

00:34:49,260 --> 00:34:53,099
we try our hardest not if you're not

00:34:51,990 --> 00:34:54,179
gonna like our software we don't

00:34:53,099 --> 00:34:55,619
necessarily think you're gonna be a good

00:34:54,179 --> 00:34:57,690
fit for it so why are you necessarily

00:34:55,619 --> 00:34:59,580
pushing for it but for things like this

00:34:57,690 --> 00:35:01,619
you know a couple hours of work we can

00:34:59,580 --> 00:35:04,460
save someone four hours every week check

00:35:01,619 --> 00:35:04,460
the add up for company

00:35:04,550 --> 00:35:10,470
now within the software here even though

00:35:08,880 --> 00:35:12,390
we've connected using a tool other than

00:35:10,470 --> 00:35:15,720
PG admin we of course have database

00:35:12,390 --> 00:35:19,310
access we're within an instance that has

00:35:15,720 --> 00:35:29,700
an open database server I can't I let up

00:35:19,310 --> 00:35:32,130
so even even from within the GUI we have

00:35:29,700 --> 00:35:34,920
access to all of this I mean it's it's

00:35:32,130 --> 00:35:36,360
just a simple database connection inside

00:35:34,920 --> 00:35:38,130
the database connection that's now

00:35:36,360 --> 00:35:42,390
making an HTTP request on your behalf

00:35:38,130 --> 00:35:45,180
this is the the basis of a foreign data

00:35:42,390 --> 00:35:47,820
wrapper our thing is just like that now

00:35:45,180 --> 00:35:49,920
I don't know what uses you guys have

00:35:47,820 --> 00:35:51,990
database backends or what your primary

00:35:49,920 --> 00:35:53,370
tests are to use this kind of thing but

00:35:51,990 --> 00:35:55,470
I hope I've given you some idea of the

00:35:53,370 --> 00:35:57,930
things that you can do with this now

00:35:55,470 --> 00:36:00,690
I've really scratched the surface the

00:35:57,930 --> 00:36:02,130
docs documentation from PostgreSQL is is

00:36:00,690 --> 00:36:03,810
some of the best for any open source

00:36:02,130 --> 00:36:06,060
project the only thing I think I'd

00:36:03,810 --> 00:36:09,030
better maybe be a Archie wiki but I

00:36:06,060 --> 00:36:10,680
might be biased on that one but you go

00:36:09,030 --> 00:36:12,720
in there you're gonna get answers you

00:36:10,680 --> 00:36:15,420
need and it's not free no Channel

00:36:12,720 --> 00:36:17,700
that'll answer everything else I didn't

00:36:15,420 --> 00:36:19,380
prepare to go further into depth into

00:36:17,700 --> 00:36:21,780
any of the other foreign aid wrappers

00:36:19,380 --> 00:36:24,600
but we have things like get you want to

00:36:21,780 --> 00:36:26,250
pull in blog you want to go in and see

00:36:24,600 --> 00:36:27,920
who committed what recently we can

00:36:26,250 --> 00:36:30,240
actually read get from the file system I

00:36:27,920 --> 00:36:31,770
don't know if you guys have any examples

00:36:30,240 --> 00:36:40,350
of stuff that you want to talk about for

00:36:31,770 --> 00:36:42,240
this sure I do don't know if there's an

00:36:40,350 --> 00:36:51,300
Excel yeah let's take a look we're here

00:36:42,240 --> 00:36:52,380
oh it's always Excel actually I don't

00:36:51,300 --> 00:36:55,320
know why I'm not using the ability to

00:36:52,380 --> 00:37:01,320
just type in C so itself however my

00:36:55,320 --> 00:37:05,670
answer in there save s right yeah so you

00:37:01,320 --> 00:37:08,040
and that's everybody wants us you're not

00:37:05,670 --> 00:37:09,330
wrong we are in almost our special open

00:37:08,040 --> 00:37:12,570
source software based on cute-cute

00:37:09,330 --> 00:37:13,830
doesn't handle Excel directly so we need

00:37:12,570 --> 00:37:15,840
to need to use a library or write our

00:37:13,830 --> 00:37:16,980
own parser nobody really wants to do

00:37:15,840 --> 00:37:18,630
this when all they have to do is say

00:37:16,980 --> 00:37:21,770
as to a CSV and then we don't have to

00:37:18,630 --> 00:37:21,770
worry about some proprietary format

00:37:25,040 --> 00:37:47,040
especially a third-party library yes

00:37:29,869 --> 00:37:48,630
you're absolutely right I would as well

00:37:47,040 --> 00:37:50,250
most of the time I don't necessarily get

00:37:48,630 --> 00:37:53,130
to dictate that but yeah this there

00:37:50,250 --> 00:37:54,660
there is there's no active some CSV

00:37:53,130 --> 00:38:00,540
files no there's no interpreting there's

00:37:54,660 --> 00:38:03,869
no VBA yeah you're absolutely right

00:38:00,540 --> 00:38:06,420
yes right but there's um yeah excels

00:38:03,869 --> 00:38:08,190
never gonna go away as much as

00:38:06,420 --> 00:38:09,810
especially someone who loves postcards

00:38:08,190 --> 00:38:11,220
so much I have no idea why people would

00:38:09,810 --> 00:38:13,470
use itself for any this stuff I mean I

00:38:11,220 --> 00:38:16,590
do I say this but I absolutely do that's

00:38:13,470 --> 00:38:18,570
familiarity they even we can provide

00:38:16,590 --> 00:38:21,270
within our comedy's application detailed

00:38:18,570 --> 00:38:22,920
financial information this is for

00:38:21,270 --> 00:38:25,320
decades we can pretty much go back we

00:38:22,920 --> 00:38:27,359
can give you insights into your material

00:38:25,320 --> 00:38:28,560
costs and pretty much all this stuff but

00:38:27,359 --> 00:38:30,510
it doesn't matter if it's in the

00:38:28,560 --> 00:38:31,650
application or not what they want is

00:38:30,510 --> 00:38:33,450
they want a screen where they can

00:38:31,650 --> 00:38:35,070
right-click on it they can go ahead and

00:38:33,450 --> 00:38:36,630
export it and they can get a dump of

00:38:35,070 --> 00:38:38,010
everything they see that they can go and

00:38:36,630 --> 00:38:40,590
bring into Excel and manipulate that way

00:38:38,010 --> 00:38:42,390
and I find this most awesome Union

00:38:40,590 --> 00:38:44,190
County Department and what they want to

00:38:42,390 --> 00:38:45,840
do is to be able to take those columns

00:38:44,190 --> 00:38:48,300
and do funny things with the numbers

00:38:45,840 --> 00:38:49,290
it's almost always and I say funny

00:38:48,300 --> 00:38:50,460
things now I'm necessarily I mean

00:38:49,290 --> 00:38:52,500
illegal funny things

00:38:50,460 --> 00:38:54,090
I just mean they have some way in their

00:38:52,500 --> 00:38:56,520
head that they want to aggregate and see

00:38:54,090 --> 00:39:00,359
this or some metric or some KPI they

00:38:56,520 --> 00:39:02,400
want to see right and they want to do

00:39:00,359 --> 00:39:04,560
this and they can either have someone

00:39:02,400 --> 00:39:06,150
like me write some sort of code to allow

00:39:04,560 --> 00:39:08,609
them to dump in the data and parcel for

00:39:06,150 --> 00:39:10,470
them which very well may be an extremely

00:39:08,609 --> 00:39:12,630
expensive proposition or they're gonna

00:39:10,470 --> 00:39:15,300
go in and take that data and you know

00:39:12,630 --> 00:39:17,190
ruin it somehow but I don't mind people

00:39:15,300 --> 00:39:18,630
getting stuff out it's when they want to

00:39:17,190 --> 00:39:20,820
then take what they changed and put it

00:39:18,630 --> 00:39:23,130
back because a lot of times people who

00:39:20,820 --> 00:39:25,320
are coming from yeah I still have a it

00:39:23,130 --> 00:39:26,880
so we provide an open-source version of

00:39:25,320 --> 00:39:28,920
the software a free open-source version

00:39:26,880 --> 00:39:30,450
of software called post books and if the

00:39:28,920 --> 00:39:31,920
name is not chosen

00:39:30,450 --> 00:39:33,480
for no reason well one of the things

00:39:31,920 --> 00:39:35,700
that we convert getting from a lot is

00:39:33,480 --> 00:39:37,200
QuickBooks and in QuickBooks you can do

00:39:35,700 --> 00:39:38,910
pretty much whatever you want to your

00:39:37,200 --> 00:39:40,770
financial numbers and that's not of

00:39:38,910 --> 00:39:42,089
course normal like when you have a

00:39:40,770 --> 00:39:43,530
transaction that hits our ledger you're

00:39:42,089 --> 00:39:45,480
not allowed to touch that that

00:39:43,530 --> 00:39:47,369
transaction is there from that point on

00:39:45,480 --> 00:39:49,079
you can make another one which corrects

00:39:47,369 --> 00:39:51,240
the previous one but you can't just go

00:39:49,079 --> 00:39:52,410
in and edit your litter you can't go in

00:39:51,240 --> 00:39:53,849
and say oh I didn't pay that guy a

00:39:52,410 --> 00:39:56,609
thousand bucks I only paid an 800 it

00:39:53,849 --> 00:39:58,260
doesn't work that way and write anything

00:39:56,609 --> 00:40:00,089
that's exactly the thing we'll get split

00:39:58,260 --> 00:40:01,619
is enough you know we want to be

00:40:00,089 --> 00:40:03,000
compliant with transactional history we

00:40:01,619 --> 00:40:05,609
want to be able to be compliant with any

00:40:03,000 --> 00:40:08,070
kind of CIO or not say any kind of tax

00:40:05,609 --> 00:40:10,170
audit or any of this stuff and we have

00:40:08,070 --> 00:40:11,640
to provide transactional integrity so

00:40:10,170 --> 00:40:12,869
that's then that's what we give them a

00:40:11,640 --> 00:40:15,570
spreadsheet they do what they want and I

00:40:12,869 --> 00:40:16,950
say these are the numbers they want what

00:40:15,570 --> 00:40:18,270
do you want me to do with this like I'm

00:40:16,950 --> 00:40:21,180
not going to jail for funny numbers

00:40:18,270 --> 00:40:23,250
right but it's not it's people have

00:40:21,180 --> 00:40:25,200
asked and that's all it's almost always

00:40:23,250 --> 00:40:26,490
financial the other side of this the one

00:40:25,200 --> 00:40:28,380
thing don't get me wrong

00:40:26,490 --> 00:40:30,750
we provide numerous abilities to bring

00:40:28,380 --> 00:40:32,460
in and import data now everybody takes a

00:40:30,750 --> 00:40:34,589
vendor lock-in especially you hear

00:40:32,460 --> 00:40:36,810
things like Oracle your data is in there

00:40:34,589 --> 00:40:38,460
clay if you go into si p1 and their web

00:40:36,810 --> 00:40:40,230
stop your data is basically their sales

00:40:38,460 --> 00:40:41,160
force your data is in their instance you

00:40:40,230 --> 00:40:42,390
aren't getting it out unless you're

00:40:41,160 --> 00:40:44,160
gonna be paying in multiple thousands of

00:40:42,390 --> 00:40:46,619
dollars to get it out we're the complete

00:40:44,160 --> 00:40:48,930
opposite it's odd being an ERP system

00:40:46,619 --> 00:40:50,700
where not only do we provide direct

00:40:48,930 --> 00:40:51,839
connectivity and we allow people to go

00:40:50,700 --> 00:40:54,720
in and do whatever you want to our

00:40:51,839 --> 00:40:56,550
back-end but we actually provide what we

00:40:54,720 --> 00:40:58,560
call API views but are really just

00:40:56,550 --> 00:41:00,390
database views and the software that

00:40:58,560 --> 00:41:02,430
normalize things for you and for

00:41:00,390 --> 00:41:03,930
everything in our database we of course

00:41:02,430 --> 00:41:06,060
use primary keys we of course use

00:41:03,930 --> 00:41:08,220
foreign keys we have things which are

00:41:06,060 --> 00:41:08,640
named properly so if we have a table

00:41:08,220 --> 00:41:12,210
called

00:41:08,640 --> 00:41:14,160
item then within that item table the

00:41:12,210 --> 00:41:15,450
column names are item underscore so if

00:41:14,160 --> 00:41:17,400
we have a foreign key in another table

00:41:15,450 --> 00:41:18,930
we know about that foreign key name that

00:41:17,400 --> 00:41:20,280
it's in this table we can build rest to

00:41:18,930 --> 00:41:21,960
it regardless of the foreign key actual

00:41:20,280 --> 00:41:23,579
link pointing us there so we're

00:41:21,960 --> 00:41:24,900
extremely normalized however getting

00:41:23,579 --> 00:41:27,000
data in and out of our software is

00:41:24,900 --> 00:41:28,650
really as simple as browsing and viewing

00:41:27,000 --> 00:41:31,770
these views because we do all the work

00:41:28,650 --> 00:41:32,940
for you PostgreSQL it's called a view

00:41:31,770 --> 00:41:34,829
but it's a little bit of a misnomer

00:41:32,940 --> 00:41:35,970
because they're writable and I Mele

00:41:34,829 --> 00:41:37,680
they're writable you can do update

00:41:35,970 --> 00:41:39,599
statements and insert statements but

00:41:37,680 --> 00:41:42,089
they're basically handled by rules if

00:41:39,599 --> 00:41:43,800
you do things like when I delete a row

00:41:42,089 --> 00:41:45,600
on this view don't delete

00:41:43,800 --> 00:41:48,060
go ahead and call this function with the

00:41:45,600 --> 00:41:49,650
value in there is excellent for cleanup

00:41:48,060 --> 00:41:52,020
when people are migrating through our

00:41:49,650 --> 00:41:53,070
software importing data right into here

00:41:52,020 --> 00:42:00,480
we don't they don't need to care about

00:41:53,070 --> 00:42:03,720
the backend we do both and in different

00:42:00,480 --> 00:42:06,450
instances so us ourselves internally

00:42:03,720 --> 00:42:08,520
never touch these they're fine because

00:42:06,450 --> 00:42:10,050
so nice these will get stale and I mean

00:42:08,520 --> 00:42:11,430
to say like it's funny but we'll add

00:42:10,050 --> 00:42:13,230
data to these but because we almost

00:42:11,430 --> 00:42:14,430
never use them internally we'll add a

00:42:13,230 --> 00:42:15,540
column that won't appear in the view and

00:42:14,430 --> 00:42:17,250
we'll have to bump it in the next row

00:42:15,540 --> 00:42:18,600
right but yeah a lot of the

00:42:17,250 --> 00:42:20,880
transformation and things are done using

00:42:18,600 --> 00:42:23,550
triggers especially we provide a tool

00:42:20,880 --> 00:42:25,710
called CSV amp it's written for our

00:42:23,550 --> 00:42:27,090
software but it's generic in the sense

00:42:25,710 --> 00:42:29,430
that it will import data into any

00:42:27,090 --> 00:42:30,540
Postgres database any CSV file you can

00:42:29,430 --> 00:42:32,160
go ahead and create a mapping and import

00:42:30,540 --> 00:42:33,510
the data in and what we end up doing

00:42:32,160 --> 00:42:35,400
with this is create a temporary table

00:42:33,510 --> 00:42:38,400
dump everything in there and then use a

00:42:35,400 --> 00:42:40,890
trigger or import tool has the ability

00:42:38,400 --> 00:42:44,540
when you're done to actually run code

00:42:40,890 --> 00:42:44,540
that you specify so you can develop

00:42:44,690 --> 00:42:50,610
sorry so we can otherwise yeah you did

00:42:49,140 --> 00:42:53,370
exactly that now and you'll see when

00:42:50,610 --> 00:42:56,040
this one this is a something that we do

00:42:53,370 --> 00:42:58,320
a lot of time I don't know if we can do

00:42:56,040 --> 00:42:59,280
sales line here because when you're

00:42:58,320 --> 00:43:01,860
doing a lot of things within the

00:42:59,280 --> 00:43:03,540
application and this is more unrelated

00:43:01,860 --> 00:43:05,460
to foreign aid wrappers in any way this

00:43:03,540 --> 00:43:07,190
is just more post red stuff when you're

00:43:05,460 --> 00:43:09,300
actually inserting a line a lot of times

00:43:07,190 --> 00:43:11,460
when you're doing this there's a lot of

00:43:09,300 --> 00:43:12,870
extra functionality that happens so

00:43:11,460 --> 00:43:14,460
we're not going to calculate that in the

00:43:12,870 --> 00:43:16,680
view we're going to extract that into a

00:43:14,460 --> 00:43:19,140
function that we can reuse 1,000 places

00:43:16,680 --> 00:43:20,910
of this view just happens at all so we

00:43:19,140 --> 00:43:23,010
use these again again data incoming

00:43:20,910 --> 00:43:25,020
outgoing guardia drivers in this sense

00:43:23,010 --> 00:43:26,610
you're creating a view into your

00:43:25,020 --> 00:43:29,040
structure so your end user doesn't have

00:43:26,610 --> 00:43:30,510
to care what your schema is they have an

00:43:29,040 --> 00:43:32,730
item number they don't need to carry

00:43:30,510 --> 00:43:34,200
that's that's based on an item ID that

00:43:32,730 --> 00:43:35,390
points to another table for the class of

00:43:34,200 --> 00:43:37,410
item you only care about any of that

00:43:35,390 --> 00:43:39,120
when you just need to base this way

00:43:37,410 --> 00:43:41,040
doing things like form data wrappers to

00:43:39,120 --> 00:43:42,090
connect that external day that becomes a

00:43:41,040 --> 00:43:44,040
million times easier

00:43:42,090 --> 00:43:45,780
I don't know how many of you who have

00:43:44,040 --> 00:43:47,610
worked with software's like Microsoft

00:43:45,780 --> 00:43:49,590
Dynamics scrape planes or any of their

00:43:47,610 --> 00:43:51,780
Suites they have table names that are

00:43:49,590 --> 00:43:53,190
three digits and three numbers that they

00:43:51,780 --> 00:43:54,660
incremented sequentially as they went

00:43:53,190 --> 00:43:57,200
through modules like inv they're zero

00:43:54,660 --> 00:43:59,750
one zero two zero three that their name

00:43:57,200 --> 00:44:02,210
the table does gives you no idea what's

00:43:59,750 --> 00:44:03,410
actually in it and then they charge you

00:44:02,210 --> 00:44:04,700
about twenty five hundred bucks a year

00:44:03,410 --> 00:44:07,400
to get access to the dead box

00:44:04,700 --> 00:44:09,230
tell you what's that now we're not the

00:44:07,400 --> 00:44:11,750
holy grail of commenting things but we

00:44:09,230 --> 00:44:13,250
do try on the tables to at least say

00:44:11,750 --> 00:44:15,079
what the table is what the hell is a

00:44:13,250 --> 00:44:16,430
table poor but not only that as I

00:44:15,079 --> 00:44:18,650
mentioned before we normalize everything

00:44:16,430 --> 00:44:20,750
you know they're not crazy we have AP

00:44:18,650 --> 00:44:22,010
select is what baby select is the column

00:44:20,750 --> 00:44:24,349
names when it has a foreign key

00:44:22,010 --> 00:44:26,540
somewhere else for the currency table

00:44:24,349 --> 00:44:28,940
it's going to ap selector ID eight

00:44:26,540 --> 00:44:30,020
points occur ID so I mean when you

00:44:28,940 --> 00:44:31,579
actually think I have a database server

00:44:30,020 --> 00:44:33,920
that schema will tell you where you need

00:44:31,579 --> 00:44:35,150
to go again completely unrelated

00:44:33,920 --> 00:44:36,680
deformed into rappers but while we're on

00:44:35,150 --> 00:44:38,480
the topic of integrating servers and

00:44:36,680 --> 00:44:39,470
services together these are the kind of

00:44:38,480 --> 00:44:40,520
things when you're structuring me is

00:44:39,470 --> 00:44:42,470
that it will help you in a long run I

00:44:40,520 --> 00:44:44,359
mean we can get hit by a bus the next

00:44:42,470 --> 00:44:46,069
guy who comes in goes where is this key

00:44:44,359 --> 00:44:48,049
pointing to oh it has the exact name

00:44:46,069 --> 00:44:49,490
this is one of the things that we hear

00:44:48,049 --> 00:44:50,780
feedback from our customers a lot they

00:44:49,490 --> 00:44:53,000
just love it you're coming from

00:44:50,780 --> 00:44:55,099
software's which are not be normalized

00:44:53,000 --> 00:44:56,540
in two hours which are nice and

00:44:55,099 --> 00:44:58,430
organized the structure and we use the

00:44:56,540 --> 00:45:00,829
PostgreSQL schemas it's a refreshing to

00:44:58,430 --> 00:45:02,480
work with and I myself came from a

00:45:00,829 --> 00:45:04,970
customer I worked for a multinational

00:45:02,480 --> 00:45:07,190
manufacturer who implemented ERP and you

00:45:04,970 --> 00:45:08,540
can guess what ERP we implemented and

00:45:07,190 --> 00:45:10,280
after four years of using and I now work

00:45:08,540 --> 00:45:16,099
for the European under it's kind of a

00:45:10,280 --> 00:45:17,599
natural question so I did the exact same

00:45:16,099 --> 00:45:19,280
thing I did it every other time but

00:45:17,599 --> 00:45:23,119
think of this time I'm kind of going

00:45:19,280 --> 00:45:25,460
right to the end thank you

00:45:23,119 --> 00:45:26,960
so I managed to fifty minutes this time

00:45:25,460 --> 00:45:28,190
instead of an hour and a half you guys

00:45:26,960 --> 00:45:29,299
every goes for the questions we want to

00:45:28,190 --> 00:45:32,030
know anything else about postcards I'm

00:45:29,299 --> 00:45:33,380
not a wizard necessarily in the whole

00:45:32,030 --> 00:45:35,000
history and knowledge of the software

00:45:33,380 --> 00:45:36,589
but I lived in it basically every day so

00:45:35,000 --> 00:45:39,010
if you have any questions you look for

00:45:36,589 --> 00:45:39,010
your fire law

00:45:49,940 --> 00:46:13,730
No yeah not an ounce either myself now

00:46:09,720 --> 00:46:13,730
and I'm six everybody

00:46:29,820 --> 00:46:41,440
963 is ours I don't know how difficult a

00:46:39,330 --> 00:46:44,170
actually I built the arch packages for

00:46:41,440 --> 00:46:46,780
the beta yeah but I when I was coming

00:46:44,170 --> 00:46:48,100
here for the for the show I was like I

00:46:46,780 --> 00:46:49,540
better be running stable software so I

00:46:48,100 --> 00:46:53,620
switched the actual database back into

00:46:49,540 --> 00:46:55,240
stable yeah but I'm yeah I do within the

00:46:53,620 --> 00:46:57,430
company because I do DBA work inside the

00:46:55,240 --> 00:46:59,110
company and I know typically with

00:46:57,430 --> 00:47:00,850
something like an ERP software it has to

00:46:59,110 --> 00:47:01,390
be stable and not broken I don't know if

00:47:00,850 --> 00:47:02,740
you know this but

00:47:01,390 --> 00:47:03,670
ludgar prizes when they come in their

00:47:02,740 --> 00:47:07,360
software doesn't work they tend to get

00:47:03,670 --> 00:47:09,250
really upset so I am I had one version

00:47:07,360 --> 00:47:11,080
from our development pipe warm because

00:47:09,250 --> 00:47:13,000
if somebody in the company doesn't do

00:47:11,080 --> 00:47:18,850
this we're gonna get blindsided one they

00:47:13,000 --> 00:47:21,430
comes up so some of us do between nine

00:47:18,850 --> 00:47:23,410
and ten yeah yeah then there was there

00:47:21,430 --> 00:47:25,480
was you know where all of our

00:47:23,410 --> 00:47:27,670
information all of our logic is all in

00:47:25,480 --> 00:47:29,290
PostgreSQL functions and we do this

00:47:27,670 --> 00:47:30,910
explicitly because we don't want to have

00:47:29,290 --> 00:47:33,010
to worry about what the client is we're

00:47:30,910 --> 00:47:34,390
on cute right now but there was a time

00:47:33,010 --> 00:47:36,310
where cute may have died and going away

00:47:34,390 --> 00:47:38,020
so we started to panic and tried doing

00:47:36,310 --> 00:47:40,480
some JavaScript framework stuff and said

00:47:38,020 --> 00:47:42,550
no cuties back in force because it was

00:47:40,480 --> 00:47:45,130
picked back up again and we kind of are

00:47:42,550 --> 00:47:46,780
back dedicated to this but you need to

00:47:45,130 --> 00:47:48,040
be able to connect from anything and

00:47:46,780 --> 00:47:51,070
putting all your logic in the database

00:47:48,040 --> 00:47:53,950
so this is one of those views that's

00:47:51,070 --> 00:47:55,660
kind of not easiest to see and the

00:47:53,950 --> 00:47:58,540
database side here but let's go up yeah

00:47:55,660 --> 00:48:00,340
functions 1494 day of these functions we

00:47:58,540 --> 00:48:02,020
do almost everything within database

00:48:00,340 --> 00:48:07,210
functions we use plenty of composite

00:48:02,020 --> 00:48:10,150
types I think we also use P lb8 familiar

00:48:07,210 --> 00:48:12,070
with PL b8 but Google v8 engine there is

00:48:10,150 --> 00:48:13,870
a PostgreSQL extension which will allow

00:48:12,070 --> 00:48:15,700
you to write database functions in v8

00:48:13,870 --> 00:48:17,350
JavaScript so you can actually

00:48:15,700 --> 00:48:19,900
manipulate everything in a database

00:48:17,350 --> 00:48:22,270
server using v8 now it's v8 safe so they

00:48:19,900 --> 00:48:23,830
neutered things like the web calls HTTP

00:48:22,270 --> 00:48:24,970
calls in that kind of stuff because you

00:48:23,830 --> 00:48:26,020
don't necessarily want people to code

00:48:24,970 --> 00:48:27,760
and just direct from your database

00:48:26,020 --> 00:48:29,740
server make calls but they need or that

00:48:27,760 --> 00:48:34,170
kind of stuff but yet everything within

00:48:29,740 --> 00:48:34,170
our application is heavy post res no

00:48:34,710 --> 00:48:41,890
primarily the pl/sql with the addition

00:48:39,490 --> 00:48:43,090
of PL v8 and here we actually started to

00:48:41,890 --> 00:48:43,590
isolate some of that stuff into their

00:48:43,090 --> 00:48:50,860
own

00:48:43,590 --> 00:48:52,990
just the kind of keeps of it um it was a

00:48:50,860 --> 00:48:54,370
way to keep up front-end and back-end on

00:48:52,990 --> 00:48:56,800
the same language and sharing some of

00:48:54,370 --> 00:48:58,870
the same modules we don't use it you

00:48:56,800 --> 00:49:00,550
know PL PG SQL is the primer if we're

00:48:58,870 --> 00:49:02,710
making fun before we're going there

00:49:00,550 --> 00:49:05,050
unless there's some reason that we want

00:49:02,710 --> 00:49:07,840
to do PL d8 now we make an e-commerce

00:49:05,050 --> 00:49:10,840
product on top of our own stack which

00:49:07,840 --> 00:49:12,700
uses a lot of PHP and of course JSON and

00:49:10,840 --> 00:49:15,310
pushing data back and forth between PPA

00:49:12,700 --> 00:49:17,350
and JSON between JavaScript is here's

00:49:15,310 --> 00:49:18,820
your object type on and that's nice when

00:49:17,350 --> 00:49:20,530
you could just accept that object in the

00:49:18,820 --> 00:49:23,320
function now you can with the PostgreSQL

00:49:20,530 --> 00:49:25,060
column json of course these days but now

00:49:23,320 --> 00:49:27,190
you have parsing abilities and

00:49:25,060 --> 00:49:28,570
everything else to go with it and it may

00:49:27,190 --> 00:49:30,310
look you know they look very similar but

00:49:28,570 --> 00:49:32,200
the thing is is that you're not making

00:49:30,310 --> 00:49:34,120
direct database calls in here you're

00:49:32,200 --> 00:49:38,080
calling something like you know plv

00:49:34,120 --> 00:49:44,050
execute that looks like a PPG SQL

00:49:38,080 --> 00:49:46,300
function just trying to find one in here

00:49:44,050 --> 00:49:48,790
yeah there you go here's bill gate so

00:49:46,300 --> 00:49:50,860
there define a lot like the PL PG SQL

00:49:48,790 --> 00:49:55,960
functions but within the body of itself

00:49:50,860 --> 00:49:58,930
is v8 jump script and we have to we

00:49:55,960 --> 00:50:02,080
actually maintain our own compiled

00:49:58,930 --> 00:50:04,960
binaries for PL v8 because we support

00:50:02,080 --> 00:50:06,880
plus 4 is 9 3 up to 96 and we need to be

00:50:04,960 --> 00:50:08,320
able to provide for Windows Mac and

00:50:06,880 --> 00:50:09,820
Linux the three binaries that we provide

00:50:08,320 --> 00:50:11,530
we need to go provide peel v8 for them

00:50:09,820 --> 00:50:12,640
as well which means that we had to

00:50:11,530 --> 00:50:20,190
modify their build to the static

00:50:12,640 --> 00:50:23,800
billable for the actual code itself

00:50:20,190 --> 00:50:26,700
github yeah everything so everything we

00:50:23,800 --> 00:50:30,010
do is on github so there's a one main

00:50:26,700 --> 00:50:31,660
organization of course you'd like to get

00:50:30,010 --> 00:50:34,020
to it easily with up make it a dummy and

00:50:31,660 --> 00:50:34,020
myself

00:50:41,890 --> 00:50:47,720
yeah it can be but we we keep everything

00:50:45,160 --> 00:50:57,680
with him get of course so here's our

00:50:47,720 --> 00:51:00,079
main the database itself has one

00:50:57,680 --> 00:51:06,680
revision one version so right now we're

00:51:00,079 --> 00:51:08,210
at for 1100 beta and we MIT so we

00:51:06,680 --> 00:51:10,130
provide our own updater mechanism and

00:51:08,210 --> 00:51:12,800
that's partly what we were looking at

00:51:10,130 --> 00:51:15,589
here when we're browsing some of these

00:51:12,800 --> 00:51:17,569
functions things like add column stuff

00:51:15,589 --> 00:51:20,240
because we needed some way to provide

00:51:17,569 --> 00:51:22,310
idempotent ways to say I'm executing

00:51:20,240 --> 00:51:23,930
this cumulative update from version 4 to

00:51:22,310 --> 00:51:25,579
version 5 here's all the columns that I

00:51:23,930 --> 00:51:27,440
added I don't want to check if they're

00:51:25,579 --> 00:51:29,000
on your database server or not so we

00:51:27,440 --> 00:51:31,010
create an item potent way to go do this

00:51:29,000 --> 00:51:33,440
now there's pretty much for all of these

00:51:31,010 --> 00:51:34,880
we do this now we ourselves like I said

00:51:33,440 --> 00:51:37,160
we created an update or application

00:51:34,880 --> 00:51:39,470
which is basically it's just XML an ATAR

00:51:37,160 --> 00:51:41,329
that's all it is you define the XML as

00:51:39,470 --> 00:51:43,790
here's the files I'm about to import and

00:51:41,329 --> 00:51:45,170
it will go in and update all this is a

00:51:43,790 --> 00:51:50,839
recent version in that package those

00:51:45,170 --> 00:51:53,119
packages are burdened oh yeah so they're

00:51:50,839 --> 00:51:54,530
they're either sequel or like for our

00:51:53,119 --> 00:51:57,800
development environment within our

00:51:54,530 --> 00:52:00,410
application we're heavy on cute script

00:51:57,800 --> 00:52:03,560
so within our application we actually

00:52:00,410 --> 00:52:05,720
embed a lot of the QT development tools

00:52:03,560 --> 00:52:07,520
and a lot of things like acute script

00:52:05,720 --> 00:52:09,530
directly in the application so those are

00:52:07,520 --> 00:52:11,420
text files that get inserted as a column

00:52:09,530 --> 00:52:14,260
in a row so all of the scripts are just

00:52:11,420 --> 00:52:17,119
saved in there we have an abstracted

00:52:14,260 --> 00:52:19,760
sequel language that we call meta sequel

00:52:17,119 --> 00:52:22,579
home handy and this allows us to do

00:52:19,760 --> 00:52:24,920
things like provide parameterised sequel

00:52:22,579 --> 00:52:27,740
queries sequel being decorative

00:52:24,920 --> 00:52:28,819
decorative in nature there are some

00:52:27,740 --> 00:52:32,750
things where we want to be able to

00:52:28,819 --> 00:52:35,329
provide options so we have a separate

00:52:32,750 --> 00:52:37,910
engine which will read this and fill in

00:52:35,329 --> 00:52:39,020
the tokens you know if we have a token

00:52:37,910 --> 00:52:40,520
called account type we're going to

00:52:39,020 --> 00:52:42,410
include this in the generated statement

00:52:40,520 --> 00:52:44,329
so it's a way to dynamically generate

00:52:42,410 --> 00:52:45,859
sequel statements so we load these in

00:52:44,329 --> 00:52:48,109
again all these are just columns in a

00:52:45,859 --> 00:52:50,960
database and pretty much I guess I can

00:52:48,109 --> 00:52:53,390
show you on disk I'll be hopping to one

00:52:50,960 --> 00:52:59,270
that's unused

00:52:53,390 --> 00:53:01,220
I can show you on disk with some of that

00:52:59,270 --> 00:53:02,990
structure looks like alright I killed

00:53:01,220 --> 00:53:10,790
bluffin earlier it does not like being

00:53:02,990 --> 00:53:23,360
killed I don't know if I'm familiar with

00:53:10,790 --> 00:53:24,830
a little bit yeah we we one of our

00:53:23,360 --> 00:53:27,110
employees drew out a utility

00:53:24,830 --> 00:53:28,940
it's called WTF did you do and it'll

00:53:27,110 --> 00:53:30,680
allow you to take a base database and

00:53:28,940 --> 00:53:32,390
compare another one and to see what

00:53:30,680 --> 00:53:34,730
people did because because we have so

00:53:32,390 --> 00:53:35,690
much extensibility app when people go to

00:53:34,730 --> 00:53:37,070
upgrade they may have destroyed

00:53:35,690 --> 00:53:38,720
themselves that we need to know to fix

00:53:37,070 --> 00:53:40,790
so that provides us an ability to do

00:53:38,720 --> 00:53:41,960
this but that's not something we use we

00:53:40,790 --> 00:53:43,520
don't nobody knows that we had let me

00:53:41,960 --> 00:53:45,680
use it when they say what's wrong and we

00:53:43,520 --> 00:53:47,300
can go tell them what they did wrong um

00:53:45,680 --> 00:53:49,970
yeah it's suggesting that this is the

00:53:47,300 --> 00:53:51,440
package time Trax is the one I showed

00:53:49,970 --> 00:53:53,090
earlier that's really a folder full of

00:53:51,440 --> 00:53:54,920
files we separate them the actual

00:53:53,090 --> 00:53:57,050
organization doesn't matter itself it's

00:53:54,920 --> 00:54:01,970
just a folder that we really organized

00:53:57,050 --> 00:54:04,490
here's JavaScript willow stick that's

00:54:01,970 --> 00:54:06,260
within cute skirt so we load those files

00:54:04,490 --> 00:54:08,570
in the database and then we have the

00:54:06,260 --> 00:54:10,220
script parser or the cute app which will

00:54:08,570 --> 00:54:13,610
read those files in database and execute

00:54:10,220 --> 00:54:15,020
them using queue trip if we're going to

00:54:13,610 --> 00:54:16,760
end up keeping queue script alive it's

00:54:15,020 --> 00:54:18,260
been deprecated since 5/7 they're still

00:54:16,760 --> 00:54:19,940
including it in most recent versions but

00:54:18,260 --> 00:54:22,610
we're so heavy on it that we may keep it

00:54:19,940 --> 00:54:24,020
alive if they decide to kill it but you

00:54:22,610 --> 00:54:25,520
know so basically things like the table

00:54:24,020 --> 00:54:27,980
definitions either just create table

00:54:25,520 --> 00:54:29,750
statements you can import into but the

00:54:27,980 --> 00:54:35,330
the base of this is the package

00:54:29,750 --> 00:54:38,660
definition and this itself supply in

00:54:35,330 --> 00:54:40,670
here just XML we're defining what the

00:54:38,660 --> 00:54:41,960
packages the name of it if there's any

00:54:40,670 --> 00:54:43,580
pre weapons it checks go and make sure

00:54:41,960 --> 00:54:45,620
we're on a certain version you want to

00:54:43,580 --> 00:54:46,850
make sure people can confirm a license

00:54:45,620 --> 00:54:49,250
or something and then here's the

00:54:46,850 --> 00:54:51,110
statements you know we're loading in a

00:54:49,250 --> 00:54:54,050
UI file from cute we're loading in

00:54:51,110 --> 00:54:56,360
scripts or we're going to be executing a

00:54:54,050 --> 00:54:58,820
table when I import the table this is

00:54:56,360 --> 00:55:01,460
the way that we kind of keep our

00:54:58,820 --> 00:55:04,910
database consistent up to about two

00:55:01,460 --> 00:55:06,630
years ago they were iterative updates so

00:55:04,910 --> 00:55:09,299
you went from 400 to four one four

00:55:06,630 --> 00:55:11,640
- as a version for for everything is

00:55:09,299 --> 00:55:13,500
cumulative you from wherever you are to

00:55:11,640 --> 00:55:15,240
where we are with one up a pile and a

00:55:13,500 --> 00:55:15,920
lot of that was changed because of the

00:55:15,240 --> 00:55:17,880
structure in here

00:55:15,920 --> 00:55:20,190
okay and that necessarily afford a

00:55:17,880 --> 00:55:23,819
driver related the poster is related but

00:55:20,190 --> 00:55:25,589
this kind of maintaining a poster has

00:55:23,819 --> 00:55:27,480
database once you have it up can always

00:55:25,589 --> 00:55:29,339
be the tricky side I mean there's the

00:55:27,480 --> 00:55:31,319
people there room who make sure and you

00:55:29,339 --> 00:55:33,420
do run into issues even we build when we

00:55:31,319 --> 00:55:34,589
distribute databases we build them from

00:55:33,420 --> 00:55:36,329
source you want to be able to have a

00:55:34,589 --> 00:55:37,740
recreate of a way to say here's my

00:55:36,329 --> 00:55:39,990
source files I'm going to wind up with

00:55:37,740 --> 00:55:41,460
the schema and our proper database but

00:55:39,990 --> 00:56:00,150
we of course had all our internal tools

00:55:41,460 --> 00:56:01,589
to do this so you can go up the I mean a

00:56:00,150 --> 00:56:03,569
little that's just an XML definition

00:56:01,589 --> 00:56:05,309
it's calling a bunch of functions that

00:56:03,569 --> 00:56:06,660
exist within our stock database so you

00:56:05,309 --> 00:56:07,829
may have to have fun with that but a lot

00:56:06,660 --> 00:56:09,630
of them are just those item potent

00:56:07,829 --> 00:56:11,039
functions that create objects in the

00:56:09,630 --> 00:56:12,440
database that add column as the tables

00:56:11,039 --> 00:56:15,420
that may not exist

00:56:12,440 --> 00:56:16,890
so our repos are split of course /x

00:56:15,420 --> 00:56:19,859
tuple is the main company organization

00:56:16,890 --> 00:56:21,119
QT client is the full client and next

00:56:19,859 --> 00:56:22,109
people with database back-end so if

00:56:21,119 --> 00:56:24,660
you're gonna go in there and start

00:56:22,109 --> 00:56:26,309
having fun everything's open source the

00:56:24,660 --> 00:56:28,109
GUI client is cue client and then the

00:56:26,309 --> 00:56:30,900
other one with slashes people do polish

00:56:28,109 --> 00:56:32,970
is all the database source I use

00:56:30,900 --> 00:56:34,859
decisions that we've made in structure

00:56:32,970 --> 00:56:35,819
of the software all over the place when

00:56:34,859 --> 00:56:37,500
I'm doing projects that aren't related

00:56:35,819 --> 00:56:38,700
at the company we've already put in all

00:56:37,500 --> 00:56:40,829
the effort to figure out how to do all

00:56:38,700 --> 00:56:43,230
this stuff properly things like queue

00:56:40,829 --> 00:56:47,210
script exposure or we have a package

00:56:43,230 --> 00:56:51,720
which Ben Thompson one of my co-workers

00:56:47,210 --> 00:56:54,089
huge script is techni script for also

00:56:51,720 --> 00:56:56,009
known as agent and a lot of the newer

00:56:54,089 --> 00:56:58,529
Java scripts provide things for you that

00:56:56,009 --> 00:56:59,819
are quite a bit better so we actually he

00:56:58,529 --> 00:57:01,650
actually I should say because he did

00:56:59,819 --> 00:57:02,910
almost all the work created a shim you

00:57:01,650 --> 00:57:04,109
load this within the q-tip environment

00:57:02,910 --> 00:57:06,180
and it gives you all the polyfills for

00:57:04,109 --> 00:57:07,920
things like an OGS buffer and all the

00:57:06,180 --> 00:57:09,599
other fun stuff it does so this is

00:57:07,920 --> 00:57:12,269
another open source thing that you could

00:57:09,599 --> 00:57:13,859
just go and take I point people to our

00:57:12,269 --> 00:57:17,029
own code base all the time you want

00:57:13,859 --> 00:57:19,820
example on how to do something go ahead

00:57:17,029 --> 00:57:20,840
yeah because of this Soter knows you

00:57:19,820 --> 00:57:22,400
any further questions on form day

00:57:20,840 --> 00:57:24,950
drivers themselves I thank you for your

00:57:22,400 --> 00:57:27,440
time I hope I've given you some sort of

00:57:24,950 --> 00:57:28,850
idea of how easy it is to take stuff

00:57:27,440 --> 00:57:31,700
that's not in Postgres and put it in

00:57:28,850 --> 00:57:33,770
Postgres the only thing that I have to

00:57:31,700 --> 00:57:36,230
say about this is if it's some sort of

00:57:33,770 --> 00:57:39,320
transient remote source like an RSS feed

00:57:36,230 --> 00:57:40,970
as we can see on some of these I guess I

00:57:39,320 --> 00:57:43,220
cleared it already it only returned ten

00:57:40,970 --> 00:57:44,360
rows so if he has a new post one of

00:57:43,220 --> 00:57:45,830
those rows is gonna disappear never

00:57:44,360 --> 00:57:47,810
gonna see it again so it's going to be

00:57:45,830 --> 00:57:49,790
your decision to either use that as your

00:57:47,810 --> 00:57:52,040
source to archive locally or to view

00:57:49,790 --> 00:57:53,480
from that live source all the time as

00:57:52,040 --> 00:57:55,850
you're going through architecture now

00:57:53,480 --> 00:57:57,410
one thing to keep in mind I don't know

00:57:55,850 --> 00:58:00,410
if this has changed in a recent version

00:57:57,410 --> 00:58:02,510
but anybody who had super user access to

00:58:00,410 --> 00:58:04,400
the database server can access the store

00:58:02,510 --> 00:58:07,130
usernames and passwords from those user

00:58:04,400 --> 00:58:13,520
mappings I'm assuming that's going to be

00:58:07,130 --> 00:58:15,770
changed at some point yeah yeah I mean

00:58:13,520 --> 00:58:17,330
it's it is a limited risk because you do

00:58:15,770 --> 00:58:18,500
need to be a super user but if you're

00:58:17,330 --> 00:58:20,630
trying to hide something from a remote

00:58:18,500 --> 00:58:21,890
accounting software it will help so

00:58:20,630 --> 00:58:23,540
that's that's really the only catcher

00:58:21,890 --> 00:58:24,740
that I have at the moment with any of

00:58:23,540 --> 00:58:25,970
this and it hasn't actually been I got

00:58:24,740 --> 00:58:29,960
to in practice it's just something to

00:58:25,970 --> 00:58:32,090
keep an eye out for otherwise you're

00:58:29,960 --> 00:58:32,630
getting yourself a connection from one

00:58:32,090 --> 00:58:37,480
to another

00:58:32,630 --> 00:58:37,480

YouTube URL: https://www.youtube.com/watch?v=a45h1ssjLLE


