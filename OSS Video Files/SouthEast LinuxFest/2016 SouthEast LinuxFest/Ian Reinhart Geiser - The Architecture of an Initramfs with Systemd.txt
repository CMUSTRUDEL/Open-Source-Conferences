Title: Ian Reinhart Geiser - The Architecture of an Initramfs with Systemd
Publication date: 2017-02-10
Playlist: 2016 SouthEast LinuxFest
Description: 
	2016 SouthEast LinuxFest
Ian Reinhart Geiser
The Architecture of an Initramfs with Systemd

(Apologies for quality, OBS kicked our butts in '16.  Any spots where audio is silenced is deliberate to remove audio of our staff/volunteers troubleshooting during the presentation.  Our mic input failed over to a shotgun mic which was unfortunately at point blank for those discussions.)
Captions: 
	00:00:00,030 --> 00:00:04,890
the following presentation were

00:00:01,949 --> 00:00:07,890
supported at the 2016 southeast linux

00:00:04,890 --> 00:00:09,420
fest in Charlotte North Carolina it is

00:00:07,890 --> 00:00:12,509
licensed under a Creative Commons

00:00:09,420 --> 00:00:15,830
license for more information about the

00:00:12,509 --> 00:00:26,070
south east linux fest please visit

00:00:15,830 --> 00:00:28,820
www.flexsim.com ake these videos

00:00:26,070 --> 00:00:28,820
possible

00:00:28,900 --> 00:00:35,340
to be doing a overview of an

00:00:32,110 --> 00:00:37,870
architecture of system debased and FS I

00:00:35,340 --> 00:00:41,010
will admit that this is probably

00:00:37,870 --> 00:00:44,890
hopefully incomplete but I get as all

00:00:41,010 --> 00:00:46,720
good Tech Talks at my company are I do

00:00:44,890 --> 00:00:50,350
nothing about this when I started that I

00:00:46,720 --> 00:00:54,699
know a lot more and now I know I need to

00:00:50,350 --> 00:00:57,280
know even one so let's get started with

00:00:54,699 --> 00:00:59,710
an agenda here most importantly we have

00:00:57,280 --> 00:01:01,750
a rationale why you do and don't want to

00:00:59,710 --> 00:01:04,360
actually use this to be inside of your

00:01:01,750 --> 00:01:06,130
dick we have a best for those of you who

00:01:04,360 --> 00:01:10,330
are uninitiated I'm going to go through

00:01:06,130 --> 00:01:13,119
a little bit overview of us the basics

00:01:10,330 --> 00:01:17,610
there then I'm going to get into some of

00:01:13,119 --> 00:01:17,610
the system deep key systems that are

00:01:26,500 --> 00:01:31,950
[Music]

00:01:28,110 --> 00:01:34,930
like to win a $2,600 high-end

00:01:31,950 --> 00:01:38,410
water-cooled an experience someone with

00:01:34,930 --> 00:01:40,360
Linux of all patient this is the final

00:01:38,410 --> 00:01:42,910
couple of the rattle-rattle moon after

00:01:40,360 --> 00:01:58,920
the keynote in the room that I'm in it

00:01:42,910 --> 00:02:07,350
was in the disembodied like a babbling I

00:01:58,920 --> 00:02:07,350
think you can go ahead I'll turn him off

00:02:13,769 --> 00:02:24,819
your mic on yes maybe yeah like you have

00:02:19,780 --> 00:02:26,650
turned the wrong one off right now we're

00:02:24,819 --> 00:02:29,379
gonna lose the architectural components

00:02:26,650 --> 00:02:31,769
and then I'm going to go through it very

00:02:29,379 --> 00:02:34,360
simple direct movie implementation on

00:02:31,769 --> 00:02:36,370
live glue the implementation and I'll

00:02:34,360 --> 00:02:38,670
open it up for questions and guys can

00:02:36,370 --> 00:02:38,670
stop me

00:02:39,569 --> 00:02:45,849
rationale why would you want to do this

00:02:42,879 --> 00:02:47,769
for our abetted product we were actually

00:02:45,849 --> 00:02:50,409
running into some bottlenecks in the

00:02:47,769 --> 00:02:53,469
Atlanta fest we have a complex startup

00:02:50,409 --> 00:02:56,439
involving a read-only encrypted file

00:02:53,469 --> 00:02:58,599
system that you put a ram overlay on and

00:02:56,439 --> 00:03:02,560
then run that with your root quad system

00:02:58,599 --> 00:03:05,139
so we've had a busy box and larger than

00:03:02,560 --> 00:03:06,959
on the nation of shell scripts that

00:03:05,139 --> 00:03:09,489
we're starting to get a little unwieldy

00:03:06,959 --> 00:03:12,249
we also ran into the problem as

00:03:09,489 --> 00:03:15,969
multi-core got more pervasive on our

00:03:12,249 --> 00:03:19,139
platform we were not able to speed up at

00:03:15,969 --> 00:03:22,389
all we still have the same one gigahertz

00:03:19,139 --> 00:03:24,730
core we just had more of them we weren't

00:03:22,389 --> 00:03:26,819
able to paralyze things as much as we

00:03:24,730 --> 00:03:29,799
could with something like system need

00:03:26,819 --> 00:03:32,139
one of the other things that helps also

00:03:29,799 --> 00:03:34,290
is if you're running the traditional

00:03:32,139 --> 00:03:36,760
anagram of s you may end up with

00:03:34,290 --> 00:03:39,219
duplication of starting services

00:03:36,760 --> 00:03:42,310
stopping services running you get

00:03:39,219 --> 00:03:44,680
trigger those things to be duplicated

00:03:42,310 --> 00:03:46,629
because this is the way that system B

00:03:44,680 --> 00:03:49,389
lifts its lifetime is a lot different

00:03:46,629 --> 00:03:51,370
than the traditional the NIC that the

00:03:49,389 --> 00:03:53,590
kernel starts and then you do is switch

00:03:51,370 --> 00:03:57,040
route or bigger group into your next in

00:03:53,590 --> 00:04:00,099
it so it actually didn't help us quite a

00:03:57,040 --> 00:04:02,229
bit and actually took our boot time from

00:04:00,099 --> 00:04:05,349
around 30 seconds down to a little over

00:04:02,229 --> 00:04:07,900
12 seconds that was a substantial

00:04:05,349 --> 00:04:10,209
improvement in that 11 was just by

00:04:07,900 --> 00:04:11,739
taking our current approach and

00:04:10,209 --> 00:04:19,840
converting that to assist of the

00:04:11,739 --> 00:04:21,609
approach now there's some gotchas and

00:04:19,840 --> 00:04:25,120
these are going to be why you probably

00:04:21,609 --> 00:04:28,030
don't want to be losing system period of

00:04:25,120 --> 00:04:29,139
s the big thing is larger size if you're

00:04:28,030 --> 00:04:31,870
using busybox

00:04:29,139 --> 00:04:33,639
successfully with a few shell scripts

00:04:31,870 --> 00:04:36,370
and getting what you need done and

00:04:33,639 --> 00:04:37,960
giving you their space you're probably

00:04:36,370 --> 00:04:40,060
not going to see a lot of gain from

00:04:37,960 --> 00:04:43,090
system D because it doesn't even pull in

00:04:40,060 --> 00:04:45,219
a lot of ancillary libraries with those

00:04:43,090 --> 00:04:47,620
ancillary libraries you are going to get

00:04:45,219 --> 00:04:50,530
more infrastructure that's needed you

00:04:47,620 --> 00:04:54,940
need to have more things in your EPC

00:04:50,530 --> 00:04:58,480
directory Mar on this card having suit

00:04:54,940 --> 00:05:00,760
users and d-bus so it gets complex and

00:04:58,480 --> 00:05:04,360
the last reason is it's different if

00:05:00,760 --> 00:05:06,550
what you have works now don't throw it

00:05:04,360 --> 00:05:11,440
out turtle you have to have a compelling

00:05:06,550 --> 00:05:13,300
reason so now I'm going to get into a

00:05:11,440 --> 00:05:14,950
little bit about the manifest

00:05:13,300 --> 00:05:17,410
I'm not sure how many people have

00:05:14,950 --> 00:05:20,380
actually ever read the kernel made-up

00:05:17,410 --> 00:05:25,090
the kernel documentation on what and why

00:05:20,380 --> 00:05:27,550
the unit ran with us exists sparing the

00:05:25,090 --> 00:05:29,290
the detail is very interesting read that

00:05:27,550 --> 00:05:31,030
would recommend those who have not read

00:05:29,290 --> 00:05:33,610
it or interested it should go ahead and

00:05:31,030 --> 00:05:36,220
view the kernel documentation but

00:05:33,610 --> 00:05:39,370
basically what it is is it's a CD audio

00:05:36,220 --> 00:05:41,800
archive of a root file system so it

00:05:39,370 --> 00:05:44,110
takes a file system hierarchy squashes

00:05:41,800 --> 00:05:47,530
it up in a single file it will then

00:05:44,110 --> 00:05:50,260
unpack that into RAM immediately after

00:05:47,530 --> 00:05:53,590
boot so the kernel comes up initializes

00:05:50,260 --> 00:05:56,650
everything finds this file unpacks it

00:05:53,590 --> 00:05:59,920
into memory and then it's in a run /s

00:05:56,650 --> 00:06:03,130
bin slash in it and what that's going to

00:05:59,920 --> 00:06:06,220
do is actually start up basically

00:06:03,130 --> 00:06:08,830
whatever that program is it will start

00:06:06,220 --> 00:06:10,900
running them in some cases people have

00:06:08,830 --> 00:06:13,480
the C binary other times they have a

00:06:10,900 --> 00:06:17,800
chakra in our case we're going to have

00:06:13,480 --> 00:06:19,900
system D itself mean that emit it will

00:06:17,800 --> 00:06:22,450
then usually the reason why you have

00:06:19,900 --> 00:06:25,450
them in the AFS is because you need

00:06:22,450 --> 00:06:28,690
something pump some functionality that

00:06:25,450 --> 00:06:30,700
is not usually included by the kernel

00:06:28,690 --> 00:06:33,280
before you start using the root

00:06:30,700 --> 00:06:36,460
filesystem an example of this could be

00:06:33,280 --> 00:06:40,000
an encrypted file system network loop

00:06:36,460 --> 00:06:43,000
being able to configure different volume

00:06:40,000 --> 00:06:45,580
structure but remember before you

00:06:43,000 --> 00:06:48,669
actually start running in the normal

00:06:45,580 --> 00:06:50,950
user land file system the last step

00:06:48,669 --> 00:06:54,400
after all of these things does happen is

00:06:50,950 --> 00:06:57,010
switch route is going to be run to get

00:06:54,400 --> 00:06:59,950
into the main file system switch room is

00:06:57,010 --> 00:07:01,750
really a term and there used to be

00:06:59,950 --> 00:07:04,660
something called pivot root which would

00:07:01,750 --> 00:07:05,220
allow you to run basically switch your

00:07:04,660 --> 00:07:08,640
running

00:07:05,220 --> 00:07:11,070
system into a new running system switch

00:07:08,640 --> 00:07:14,670
route does about the same big

00:07:11,070 --> 00:07:17,970
differences it will actually clean up a

00:07:14,670 --> 00:07:21,120
lot more for you system Guinea does even

00:07:17,970 --> 00:07:23,550
more where you can actually go into your

00:07:21,120 --> 00:07:25,560
root file system start using it and I

00:07:23,550 --> 00:07:29,460
shoved out and actually enter back into

00:07:25,560 --> 00:07:31,290
the EMFs environment this is actually

00:07:29,460 --> 00:07:34,980
very powerful because you can actually

00:07:31,290 --> 00:07:37,200
clean up things that means if you took

00:07:34,980 --> 00:07:40,080
complicated measures to initialize

00:07:37,200 --> 00:07:42,180
something most of the time it needs to

00:07:40,080 --> 00:07:45,240
complicated measure done configure it

00:07:42,180 --> 00:07:47,190
and gracefully shove it down so that

00:07:45,240 --> 00:07:52,590
that's one of the advantages of the

00:07:47,190 --> 00:07:54,120
system being in it can give you next

00:07:52,590 --> 00:07:57,720
we're going to get into the system D

00:07:54,120 --> 00:08:00,810
internals system beam for those of you

00:07:57,720 --> 00:08:03,330
don't know replaces a lot of the

00:08:00,810 --> 00:08:05,880
functionality of the it script and

00:08:03,330 --> 00:08:09,419
it scripts with these metadata files

00:08:05,880 --> 00:08:12,780
called mutants these units contain us a

00:08:09,419 --> 00:08:15,650
very great in structure of all the

00:08:12,780 --> 00:08:19,500
information necessary to start a process

00:08:15,650 --> 00:08:22,410
create a model created a target of the

00:08:19,500 --> 00:08:24,270
system the most common one that's used

00:08:22,410 --> 00:08:26,040
is something called the service this is

00:08:24,270 --> 00:08:29,370
basically anything that would be

00:08:26,040 --> 00:08:31,650
indignant anything that would start up a

00:08:29,370 --> 00:08:35,099
fork process and needs to be man that a

00:08:31,650 --> 00:08:38,310
lifetime needs to be managed and shut

00:08:35,099 --> 00:08:40,589
down at a certain point or restarted all

00:08:38,310 --> 00:08:42,539
units really come with the same

00:08:40,589 --> 00:08:44,690
structure there's going to be the first

00:08:42,539 --> 00:08:48,330
part which is generic called the unit

00:08:44,690 --> 00:08:50,280
this has a clear clear text description

00:08:48,330 --> 00:08:52,320
so that when you run the system tools

00:08:50,280 --> 00:08:57,960
you can get a human readable description

00:08:52,320 --> 00:09:00,660
of what the actual services is it also

00:08:57,960 --> 00:09:04,080
has this notion of scheduling of before

00:09:00,660 --> 00:09:06,600
and after so you can say things like I

00:09:04,080 --> 00:09:10,550
don't want to start lying virtualization

00:09:06,600 --> 00:09:13,790
demon until after the remote FS is up

00:09:10,550 --> 00:09:17,210
that allows you to actually

00:09:13,790 --> 00:09:19,790
our service as soon as possible as all

00:09:17,210 --> 00:09:21,710
and once all the dependencies are met

00:09:19,790 --> 00:09:24,380
you can also say that

00:09:21,710 --> 00:09:26,750
hey before the liver guests starts I

00:09:24,380 --> 00:09:30,410
need to be running or else that service

00:09:26,750 --> 00:09:33,140
will fail this is an advantage over the

00:09:30,410 --> 00:09:35,540
traditional system in that it gives you

00:09:33,140 --> 00:09:37,460
the ability to schedule things and make

00:09:35,540 --> 00:09:40,220
sure the environment is what it is

00:09:37,460 --> 00:09:42,830
before you get there nothing's worse

00:09:40,220 --> 00:09:45,410
than having a shell script fail and then

00:09:42,830 --> 00:09:48,230
having a litany of 200 lines of errors

00:09:45,410 --> 00:09:53,690
that follow because of blood missing

00:09:48,230 --> 00:09:55,940
comma or newline in a shell script the

00:09:53,690 --> 00:09:59,180
last part is during the unit is

00:09:55,940 --> 00:10:01,940
documentation which is handy for the

00:09:59,180 --> 00:10:04,240
from the human basically just gives a

00:10:01,940 --> 00:10:08,030
link to a website or the man page

00:10:04,240 --> 00:10:09,680
there's a few others in here you can

00:10:08,030 --> 00:10:13,130
find more information on the free

00:10:09,680 --> 00:10:15,170
desktop Network website there one thing

00:10:13,130 --> 00:10:18,350
that is nice about Sisyphean is there is

00:10:15,170 --> 00:10:22,610
copious amounts of documentation on the

00:10:18,350 --> 00:10:25,100
various syntax involved the real need of

00:10:22,610 --> 00:10:27,830
a service is unique is the serve is a

00:10:25,100 --> 00:10:29,570
section called service in this case we

00:10:27,830 --> 00:10:32,210
have something which is a tight symbol

00:10:29,570 --> 00:10:33,800
you can have various types of service

00:10:32,210 --> 00:10:36,620
and depending on if it's a game even

00:10:33,800 --> 00:10:39,740
depending if it's just a process that

00:10:36,620 --> 00:10:41,750
needs to run and then exit right away or

00:10:39,740 --> 00:10:43,790
if you need to actually have something

00:10:41,750 --> 00:10:46,520
that you need to manage the lifetime of

00:10:43,790 --> 00:10:50,450
because it's not a traditional pork in

00:10:46,520 --> 00:10:52,250
gaming one other advantage that system

00:10:50,450 --> 00:10:55,040
he offers is the ability to use

00:10:52,250 --> 00:10:58,670
environment files you can actually pull

00:10:55,040 --> 00:11:00,740
in a file full of key value pairs to

00:10:58,670 --> 00:11:03,470
import an environment environment

00:11:00,740 --> 00:11:05,510
variables special to your service this

00:11:03,470 --> 00:11:07,630
can be very useful because system being

00:11:05,510 --> 00:11:12,170
inherently has a very clean environment

00:11:07,630 --> 00:11:14,240
so things like path is not really set so

00:11:12,170 --> 00:11:17,260
you have to assemble some of that

00:11:14,240 --> 00:11:19,250
yourself advantage mean that a clean

00:11:17,260 --> 00:11:20,930
disadvantage you have to know what

00:11:19,250 --> 00:11:26,710
you're doing and what you mean for extra

00:11:20,930 --> 00:11:26,710
dependencies then there's the

00:11:27,100 --> 00:11:34,840
exact start stop and reload these allow

00:11:30,730 --> 00:11:38,050
you to give these are the analog starts

00:11:34,840 --> 00:11:41,650
up at restart in the LSB compliance is

00:11:38,050 --> 00:11:44,020
the init scripts there's also kill them

00:11:41,650 --> 00:11:46,360
kill them is very important because

00:11:44,020 --> 00:11:49,930
there are different ways to terminate a

00:11:46,360 --> 00:11:52,180
process especially if the process does

00:11:49,930 --> 00:11:55,480
shut them like when you terminate a

00:11:52,180 --> 00:11:57,730
process it may need to do cleanup stuff

00:11:55,480 --> 00:11:59,950
you can't just kill line and move on

00:11:57,730 --> 00:12:03,400
with your life you actually have to tell

00:11:59,950 --> 00:12:06,360
the different modes of shutdown by

00:12:03,400 --> 00:12:09,610
default they have a symbol which just

00:12:06,360 --> 00:12:11,710
gives a security if you need something

00:12:09,610 --> 00:12:14,170
more special you can actually send it at

00:12:11,710 --> 00:12:17,260
singles and then in this case is a

00:12:14,170 --> 00:12:19,660
restart failure which means that the

00:12:17,260 --> 00:12:23,320
service goes into a failure state if the

00:12:19,660 --> 00:12:26,020
process crashes or something went wrong

00:12:23,320 --> 00:12:28,930
on Serna it will try to restart the

00:12:26,020 --> 00:12:30,820
process automatically luckily they have

00:12:28,930 --> 00:12:34,900
a limiter in there so if you have

00:12:30,820 --> 00:12:37,330
something like X crashing six times in a

00:12:34,900 --> 00:12:41,170
row a lot start it says yeah it's not

00:12:37,330 --> 00:12:45,040
going to happen so it gives up the last

00:12:41,170 --> 00:12:48,250
part is the install install is very

00:12:45,040 --> 00:12:50,020
interesting because it says P and if you

00:12:48,250 --> 00:12:52,570
have their different run levels and

00:12:50,020 --> 00:12:56,230
that's about it it's system B there's no

00:12:52,570 --> 00:13:00,040
real run level per se is a series of

00:12:56,230 --> 00:13:02,440
dependencies so if you think about your

00:13:00,040 --> 00:13:04,780
system all your services and things that

00:13:02,440 --> 00:13:06,790
are needed to start up your OS and get

00:13:04,780 --> 00:13:09,280
you and where you want to be in your

00:13:06,790 --> 00:13:11,890
operating system environment think of it

00:13:09,280 --> 00:13:14,860
as a fishing net on the ground and the

00:13:11,890 --> 00:13:17,800
service you want to get you is a point

00:13:14,860 --> 00:13:19,900
on that net you're picking it up all the

00:13:17,800 --> 00:13:22,840
dependencies that are necessary that are

00:13:19,900 --> 00:13:26,200
tied to that service are then started in

00:13:22,840 --> 00:13:28,240
order to get you to that point so what

00:13:26,200 --> 00:13:30,070
it's more of a hoist method versus

00:13:28,240 --> 00:13:32,890
Ischia net where you just start firing

00:13:30,070 --> 00:13:35,950
off shell scripts until you get to the

00:13:32,890 --> 00:13:38,560
last script and that's your system this

00:13:35,950 --> 00:13:40,030
is more so saying hey I want to go here

00:13:38,560 --> 00:13:42,760
and to get

00:13:40,030 --> 00:13:46,830
I'm going to need this this is this as

00:13:42,760 --> 00:13:49,810
we started mounted before they hit their

00:13:46,830 --> 00:13:52,690
this is done through something called a

00:13:49,810 --> 00:13:55,540
target targets are another special kind

00:13:52,690 --> 00:13:57,970
of unit they don't really have a notion

00:13:55,540 --> 00:14:00,880
of a process of these start they're more

00:13:57,970 --> 00:14:04,030
like a joint point inside of the

00:14:00,880 --> 00:14:07,180
initialization process so again it has

00:14:04,030 --> 00:14:10,120
the the standard unit but it has stuff

00:14:07,180 --> 00:14:14,140
of requires what this means is when this

00:14:10,120 --> 00:14:16,600
target starts it requires another unit

00:14:14,140 --> 00:14:21,630
to be present before it's considered

00:14:16,600 --> 00:14:25,540
starting so in this case this target

00:14:21,630 --> 00:14:28,060
requires system the reboot service be

00:14:25,540 --> 00:14:31,150
started this is how it reboots it says

00:14:28,060 --> 00:14:33,910
hey the user told me to go to this

00:14:31,150 --> 00:14:36,160
target now I'm going to start up these

00:14:33,910 --> 00:14:39,870
services that actually clean the system

00:14:36,160 --> 00:14:41,080
up and reboot it has the notion of

00:14:39,870 --> 00:14:43,930
isolation

00:14:41,080 --> 00:14:46,330
what isolate does is you have things

00:14:43,930 --> 00:14:48,190
like a printer target where you plug in

00:14:46,330 --> 00:14:50,080
a printer and the printer target service

00:14:48,190 --> 00:14:52,090
or bluetooth if you have a Bluetooth

00:14:50,080 --> 00:14:54,610
chip that it will start the Bluetooth

00:14:52,090 --> 00:14:56,590
service if you have a target that is

00:14:54,610 --> 00:14:59,920
isolated what that means is it will

00:14:56,590 --> 00:15:02,710
Germany everything that is not part of

00:14:59,920 --> 00:15:06,450
that target so if you have ancillary

00:15:02,710 --> 00:15:09,640
process that are no longer needed to to

00:15:06,450 --> 00:15:13,440
satisfy a new target they will be

00:15:09,640 --> 00:15:17,220
terminated and that's really how the

00:15:13,440 --> 00:15:20,380
EMFs process becomes very powerful

00:15:17,220 --> 00:15:23,410
because you can actually go in and make

00:15:20,380 --> 00:15:25,930
sure that things are cleaned up but

00:15:23,410 --> 00:15:28,540
you're not killing what you need so you

00:15:25,930 --> 00:15:30,700
can keep track of what you need and know

00:15:28,540 --> 00:15:33,970
that what you don't need is being purged

00:15:30,700 --> 00:15:35,770
in the background for you this does take

00:15:33,970 --> 00:15:38,200
a little more diligence you need to know

00:15:35,770 --> 00:15:40,830
what's going on in your boot process but

00:15:38,200 --> 00:15:44,200
if you're designing it in a dram fs

00:15:40,830 --> 00:15:47,200
ideally you are be very sensitive to

00:15:44,200 --> 00:15:49,210
those states and then of course you have

00:15:47,200 --> 00:15:53,020
the notion of job time out in this case

00:15:49,210 --> 00:15:53,529
and the action will appear so in this

00:15:53,020 --> 00:15:56,949
case

00:15:53,529 --> 00:15:58,930
there's 30 minutes if the target has not

00:15:56,949 --> 00:16:02,470
been reached it's going to force a

00:15:58,930 --> 00:16:05,529
reboot and then in this case you can

00:16:02,470 --> 00:16:07,959
actually put this - enough aliases to

00:16:05,529 --> 00:16:09,970
another target so that when you hit

00:16:07,959 --> 00:16:13,269
control-alt-delete when that target

00:16:09,970 --> 00:16:20,529
starts it will make this party going the

00:16:13,269 --> 00:16:22,300
isolation the last type of unit that you

00:16:20,529 --> 00:16:27,249
dealing with in the Ania grandma fest

00:16:22,300 --> 00:16:30,939
here is all about traditionally and sis

00:16:27,249 --> 00:16:32,949
B you have this notion of an FS tab in

00:16:30,939 --> 00:16:36,069
system mean world is still there but

00:16:32,949 --> 00:16:39,459
they have a notion of scheduling between

00:16:36,069 --> 00:16:42,399
the different points so you may want to

00:16:39,459 --> 00:16:45,670
have certain things initialize before

00:16:42,399 --> 00:16:49,360
you try to mop your room FS in the case

00:16:45,670 --> 00:16:51,519
of our system we have to have the

00:16:49,360 --> 00:16:53,769
backing store mountain before we can

00:16:51,519 --> 00:16:57,850
actually go looking for the operating

00:16:53,769 --> 00:17:00,879
systems slush effects so we need to have

00:16:57,850 --> 00:17:02,379
a definitive order to the mouse but at

00:17:00,879 --> 00:17:04,720
the same time we don't want to block

00:17:02,379 --> 00:17:06,880
other things from starting so it gives

00:17:04,720 --> 00:17:10,569
you the ability to do parallel mounting

00:17:06,880 --> 00:17:13,569
but still have dependencies you can also

00:17:10,569 --> 00:17:16,720
use things such as make sure that it

00:17:13,569 --> 00:17:19,179
starts before a certain target so you

00:17:16,720 --> 00:17:21,520
can ensure that by the time you get to a

00:17:19,179 --> 00:17:24,010
certain checkpoint in the system that

00:17:21,520 --> 00:17:27,730
that file system is mounted and ready to

00:17:24,010 --> 00:17:30,010
go there's also in all of the units is

00:17:27,730 --> 00:17:33,190
enough of these things conditionals

00:17:30,010 --> 00:17:36,549
where in this case it was certain paths

00:17:33,190 --> 00:17:40,330
exist that means that the MQ modular MQ

00:17:36,549 --> 00:17:45,390
kernel support is present and if we have

00:17:40,330 --> 00:17:47,950
capability of CAP sysadmin we can start

00:17:45,390 --> 00:17:52,030
capabilities are important in case of

00:17:47,950 --> 00:17:55,390
running within an S is like a doctor or

00:17:52,030 --> 00:17:58,200
some other container Isis so depending

00:17:55,390 --> 00:18:01,630
on what your selinux properties are also

00:17:58,200 --> 00:18:03,580
certain services may or may not run and

00:18:01,630 --> 00:18:07,350
having all the permissions of except on

00:18:03,580 --> 00:18:07,350
the other line operates

00:18:07,720 --> 00:18:13,640
the important part of about this last

00:18:10,400 --> 00:18:17,210
part basically it's very simple we say

00:18:13,640 --> 00:18:19,640
weapon one amount and where we want to

00:18:17,210 --> 00:18:22,370
mounted you and the time of the box is

00:18:19,640 --> 00:18:29,990
if the boxes and type is not actually

00:18:22,370 --> 00:18:32,420
applying it will just Auto one of the

00:18:29,990 --> 00:18:35,450
other interesting things about mouth

00:18:32,420 --> 00:18:36,890
units is making depend on the you can

00:18:35,450 --> 00:18:40,610
have a dependency on the other line

00:18:36,890 --> 00:18:43,370
device so if you have a case of a USB or

00:18:40,610 --> 00:18:46,010
an SOC or very slow media that comes up

00:18:43,370 --> 00:18:48,710
you can start watching the faster media

00:18:46,010 --> 00:18:51,650
or starting other services and as soon

00:18:48,710 --> 00:18:55,130
as that vacuum so that physical device

00:18:51,650 --> 00:18:58,130
becomes ready according to you know that

00:18:55,130 --> 00:19:00,260
mount can start and we're going to talk

00:18:58,130 --> 00:19:04,580
a little bit more about this during the

00:19:00,260 --> 00:19:06,440
initialization process this is a very

00:19:04,580 --> 00:19:09,230
important thing because this is actually

00:19:06,440 --> 00:19:11,450
what got us a lot of our speed because

00:19:09,230 --> 00:19:14,240
we were starting things as soon as you

00:19:11,450 --> 00:19:17,480
have came up vs. there were some cases

00:19:14,240 --> 00:19:19,820
where we were have a loop say are you

00:19:17,480 --> 00:19:23,840
there yet nope okay sleep one are you

00:19:19,820 --> 00:19:26,150
there yet nope okay to sleep on not

00:19:23,840 --> 00:19:30,910
ideal but you don't really have other

00:19:26,150 --> 00:19:30,910
options what you're dealing the shelter

00:19:31,510 --> 00:19:39,980
templates are another kind of unit that

00:19:35,690 --> 00:19:44,170
we can leverage what those do is they're

00:19:39,980 --> 00:19:46,760
just like any other unit about a service

00:19:44,170 --> 00:19:51,280
what they give you is the ability to

00:19:46,760 --> 00:19:54,620
expand internal arguments in this case

00:19:51,280 --> 00:19:58,340
this is starting of the network a

00:19:54,620 --> 00:20:02,690
network service on an Ethernet card so

00:19:58,340 --> 00:20:06,620
you would actually say service name at F

00:20:02,690 --> 00:20:08,810
0 dot service and what that would use

00:20:06,620 --> 00:20:11,420
you make a sim link to that to the

00:20:08,810 --> 00:20:13,820
template and that will automatically

00:20:11,420 --> 00:20:18,669
fill in these variables in this case I

00:20:13,820 --> 00:20:20,529
with the literal group text

00:20:18,669 --> 00:20:23,529
is after the outside and before the

00:20:20,529 --> 00:20:26,139
period this is very useful especially

00:20:23,529 --> 00:20:28,809
when you don't want to have 30 different

00:20:26,139 --> 00:20:30,940
services for 30 different physical

00:20:28,809 --> 00:20:33,730
devices but they all do the same thing

00:20:30,940 --> 00:20:35,889
so if you have a situation where I need

00:20:33,730 --> 00:20:37,989
to make sure that all three of my

00:20:35,889 --> 00:20:40,749
network cards are running before I can

00:20:37,989 --> 00:20:46,230
move on I can write one service and

00:20:40,749 --> 00:20:53,460
simply through next the generator into

00:20:46,230 --> 00:20:56,139
the single unit generators are basically

00:20:53,460 --> 00:20:59,980
there if there's something that can

00:20:56,139 --> 00:21:03,039
generate units on the fly sometimes you

00:20:59,980 --> 00:21:05,289
don't know exactly what's going on

00:21:03,039 --> 00:21:07,629
before like when you're building a

00:21:05,289 --> 00:21:10,480
system you don't know what the model is

00:21:07,629 --> 00:21:13,869
of the path depth path is or the hard

00:21:10,480 --> 00:21:18,309
drive we can assume that it probably is

00:21:13,869 --> 00:21:19,840
def SDA but that may change if you're on

00:21:18,309 --> 00:21:23,080
a different SS if you're on a different

00:21:19,840 --> 00:21:25,450
SSD media or the mob order is different

00:21:23,080 --> 00:21:28,149
you can get into trouble so what

00:21:25,450 --> 00:21:31,299
generators allow you to do is intercept

00:21:28,149 --> 00:21:33,730
the system to internal command lines it

00:21:31,299 --> 00:21:35,830
can happen through meta files are

00:21:33,730 --> 00:21:39,100
repetitive the system or other

00:21:35,830 --> 00:21:41,679
properties this happens before anything

00:21:39,100 --> 00:21:44,559
else happens with system need so you

00:21:41,679 --> 00:21:47,529
really can't call IPC or depend on other

00:21:44,559 --> 00:21:50,590
units your your are literally

00:21:47,529 --> 00:21:52,539
constructing these unit files on the

00:21:50,590 --> 00:21:55,450
file system which is just a needle that

00:21:52,539 --> 00:21:57,789
parse that move forward with when you

00:21:55,450 --> 00:22:00,070
combine this with templates you can

00:21:57,789 --> 00:22:03,309
actually through siblings versus

00:22:00,070 --> 00:22:05,619
generating extra files do more

00:22:03,309 --> 00:22:08,700
complicated initializations without

00:22:05,619 --> 00:22:10,989
introducing a lot of ancillary code

00:22:08,700 --> 00:22:14,049
generators are meant to be very small

00:22:10,989 --> 00:22:17,230
very simple they recommend writing them

00:22:14,049 --> 00:22:21,249
and see so once you start parsing

00:22:17,230 --> 00:22:24,669
strings lists and writing out text files

00:22:21,249 --> 00:22:27,309
and see it gets cumbersome so if you can

00:22:24,669 --> 00:22:29,980
do as little as possible in the code can

00:22:27,309 --> 00:22:32,730
get creative sibling that can get you a

00:22:29,980 --> 00:22:32,730
lot more mileage

00:22:33,149 --> 00:22:38,610
the last part that system P offers us is

00:22:36,369 --> 00:22:41,980
the omit Rd interface

00:22:38,610 --> 00:22:44,799
one thing about system be like it or in

00:22:41,980 --> 00:22:48,039
is it does give us the a very rigid API

00:22:44,799 --> 00:22:51,039
to follow course for standardized

00:22:48,039 --> 00:22:53,710
starting and stopping of services what

00:22:51,039 --> 00:22:58,450
they offer in the init Rd is the ability

00:22:53,710 --> 00:23:01,330
to know that you're in it Rd if you have

00:22:58,450 --> 00:23:04,299
a cpio file system you just want to move

00:23:01,330 --> 00:23:07,090
in the user space you don't want to be

00:23:04,299 --> 00:23:08,679
you don't want the system need to think

00:23:07,090 --> 00:23:12,220
you're giving are needed go into the

00:23:08,679 --> 00:23:14,409
bigger group or switcheroo so what they

00:23:12,220 --> 00:23:17,190
do is they use a special meta file the

00:23:14,409 --> 00:23:20,350
ECC directory called an it Rd release

00:23:17,190 --> 00:23:22,509
what this does is tell system me that

00:23:20,350 --> 00:23:28,059
the current root file system is running

00:23:22,509 --> 00:23:30,159
is actually in an in RAM FX there's also

00:23:28,059 --> 00:23:34,119
a special directory that needs to be

00:23:30,159 --> 00:23:36,519
created called sis root system is where

00:23:34,119 --> 00:23:38,499
your final root file system will be

00:23:36,519 --> 00:23:42,669
constructed that you will switch room

00:23:38,499 --> 00:23:45,460
into at the end this is again a static

00:23:42,669 --> 00:23:48,970
known file system means so you have it

00:23:45,460 --> 00:23:50,679
has to be there the other directory

00:23:48,970 --> 00:23:54,059
that's going to be important to us is

00:23:50,679 --> 00:23:57,309
run and it ran FS what that directory is

00:23:54,059 --> 00:23:59,950
is a BIOS is pieces of the file system

00:23:57,309 --> 00:24:03,279
that you want transported from the

00:23:59,950 --> 00:24:07,029
enigma at best stage into weave it into

00:24:03,279 --> 00:24:09,460
the final root filesystem so if you have

00:24:07,029 --> 00:24:13,330
a directory structure in there you don't

00:24:09,460 --> 00:24:16,749
have this traditional in a shell based

00:24:13,330 --> 00:24:19,419
in argue of having you move mounted by

00:24:16,749 --> 00:24:21,669
mounts all over the place you put your

00:24:19,419 --> 00:24:25,690
things you want to preserve into that

00:24:21,669 --> 00:24:27,669
runs the around the best the last thing

00:24:25,690 --> 00:24:30,190
that is very important is crop command

00:24:27,669 --> 00:24:32,649
line these are the command lines of the

00:24:30,190 --> 00:24:35,799
bootloader passes the kernel for startup

00:24:32,649 --> 00:24:38,409
a lot of generators are going to read

00:24:35,799 --> 00:24:41,619
this and be able to use this to

00:24:38,409 --> 00:24:42,900
configure the system accordingly it's

00:24:41,619 --> 00:24:45,360
not a dependency

00:24:42,900 --> 00:24:48,660
but it is very powerful thing to be

00:24:45,360 --> 00:24:51,290
aware of when you are building their

00:24:48,660 --> 00:24:51,290
EMFs

00:24:52,040 --> 00:24:58,530
so now that I've looked through all of

00:24:54,840 --> 00:24:59,790
the the components are going to talk

00:24:58,530 --> 00:25:01,950
about I'm going to talk about the

00:24:59,790 --> 00:25:06,270
architecture of how this thing moves up

00:25:01,950 --> 00:25:16,040
and it comes together I apologize and

00:25:06,270 --> 00:25:16,040
everybody read these yeah resolution I

00:25:16,280 --> 00:25:24,900
guess I'll talk through these in a

00:25:19,590 --> 00:25:28,740
little bit more detail ah yeah sorry

00:25:24,900 --> 00:25:31,050
mate like I said Susan he uses this

00:25:28,740 --> 00:25:34,560
poisoning method so you have a target

00:25:31,050 --> 00:25:37,440
that basically is desired budget system

00:25:34,560 --> 00:25:41,610
in this case the first one is the system

00:25:37,440 --> 00:25:44,250
it targeted once you tell the system B

00:25:41,610 --> 00:25:46,410
that you want to start that target it's

00:25:44,250 --> 00:25:48,810
going to start working its way backwards

00:25:46,410 --> 00:25:51,450
figuring out what it needs to actually

00:25:48,810 --> 00:25:53,730
start out the system in this case you're

00:25:51,450 --> 00:25:55,680
going to go system and hit target it's

00:25:53,730 --> 00:25:57,540
going to look for local that best target

00:25:55,680 --> 00:25:59,790
well this is going to do is make sure

00:25:57,540 --> 00:26:02,820
that you have a local file system to

00:25:59,790 --> 00:26:06,990
deal with before it starts to initialize

00:26:02,820 --> 00:26:10,260
the system that it's also going to need

00:26:06,990 --> 00:26:12,960
a swab target which is the second one

00:26:10,260 --> 00:26:16,410
over a cryptographic target and a

00:26:12,960 --> 00:26:20,010
cryptographic target these will these in

00:26:16,410 --> 00:26:22,530
turn pull in other services and you can

00:26:20,010 --> 00:26:26,070
have various swap devices if you have

00:26:22,530 --> 00:26:28,890
multiple saw partitions or zebra that

00:26:26,070 --> 00:26:31,770
you're using for swap you also could

00:26:28,890 --> 00:26:35,310
have crypto set up devices you need to

00:26:31,770 --> 00:26:38,070
make sure that you have a cryptographic

00:26:35,310 --> 00:26:40,550
file system that you have the underlying

00:26:38,070 --> 00:26:43,410
off system is there that you can mouth

00:26:40,550 --> 00:26:46,830
there's also very small level services

00:26:43,410 --> 00:26:51,240
and be the best on some stuff like crock

00:26:46,830 --> 00:26:54,450
Yvonne FS since those all get started up

00:26:51,240 --> 00:26:55,650
as they're pulled up by the sistine

00:26:54,450 --> 00:26:59,010
system

00:26:55,650 --> 00:27:00,930
target in this case local FS is going to

00:26:59,010 --> 00:27:03,920
go through your file systems it also

00:27:00,930 --> 00:27:06,330
will do process and check on the device

00:27:03,920 --> 00:27:08,670
this is very handy because you can

00:27:06,330 --> 00:27:13,470
ensure consistency across all of your

00:27:08,670 --> 00:27:16,440
mouths and at the end this also will

00:27:13,470 --> 00:27:19,470
cause the local FS pre target which can

00:27:16,440 --> 00:27:22,830
pull it up that you may not want to do

00:27:19,470 --> 00:27:25,590
even before the file system most of the

00:27:22,830 --> 00:27:29,070
time is just generators and nothing else

00:27:25,590 --> 00:27:38,700
is running there does that kind of make

00:27:29,070 --> 00:27:40,970
sense from the chart there is this one a

00:27:38,700 --> 00:27:43,560
little bit easier

00:27:40,970 --> 00:27:45,600
there's a little less going on in here

00:27:43,560 --> 00:27:48,780
we start with the system and target

00:27:45,600 --> 00:27:52,020
system it is going to basically invoke

00:27:48,780 --> 00:27:53,790
the basic target again basic target is

00:27:52,020 --> 00:27:56,600
going to require a bunch of other

00:27:53,790 --> 00:27:59,880
targets in this case timers paths

00:27:56,600 --> 00:28:03,780
sockets and then those are going to

00:27:59,880 --> 00:28:05,760
actually require the various timers

00:28:03,780 --> 00:28:09,360
they're coming from that various paths

00:28:05,760 --> 00:28:11,490
that may be necessary pass our ass

00:28:09,360 --> 00:28:15,270
targets are basically make sure this

00:28:11,490 --> 00:28:18,930
path exists and if it does exist use of

00:28:15,270 --> 00:28:21,330
stuff when it's their sockets one of the

00:28:18,930 --> 00:28:24,480
things in system D is very good often

00:28:21,330 --> 00:28:26,790
good at is socket activation actually

00:28:24,480 --> 00:28:30,000
activation in general so you don't

00:28:26,790 --> 00:28:32,520
necessarily run the sshd process you

00:28:30,000 --> 00:28:35,220
just run a listener or that and it will

00:28:32,520 --> 00:28:36,020
start as as each team went elizabeth is

00:28:35,220 --> 00:28:39,540
too

00:28:36,020 --> 00:28:42,390
there's a special target and here called

00:28:39,540 --> 00:28:45,420
rescue this is when you get the infamous

00:28:42,390 --> 00:28:49,470
press ctrl-v and end your group password

00:28:45,420 --> 00:28:52,230
or Enter key in ginger enter root

00:28:49,470 --> 00:28:55,980
password to debug or control-d to

00:28:52,230 --> 00:28:58,320
continue and endeavour continues this

00:28:55,980 --> 00:29:01,080
rescue target you can get a shell you

00:28:58,320 --> 00:29:05,340
can actually put multiple services in

00:29:01,080 --> 00:29:08,720
here this is handy if you get a bad spot

00:29:05,340 --> 00:29:10,850
you still want to make sure your USB HID

00:29:08,720 --> 00:29:18,590
is initialized before you start trying

00:29:10,850 --> 00:29:19,940
to tie some it little USB keyboard this

00:29:18,590 --> 00:29:22,510
one's going to be a little harder to

00:29:19,940 --> 00:29:26,600
read that again this is the last step

00:29:22,510 --> 00:29:30,830
this is basically where we start putting

00:29:26,600 --> 00:29:34,610
our stuff in and if the basic target is

00:29:30,830 --> 00:29:37,490
going to hit book a bunch of the knit Rd

00:29:34,610 --> 00:29:41,179
services as well as over custom glue in

00:29:37,490 --> 00:29:45,409
this case right explain this for the

00:29:41,179 --> 00:29:50,090
Hitman that's for the new investment

00:29:45,409 --> 00:29:53,450
team for the live system basically your

00:29:50,090 --> 00:29:56,299
Indian Rd target is going to call it in

00:29:53,450 --> 00:30:00,500
our DFS which is going to go through and

00:29:56,299 --> 00:30:03,140
parse your etcc directory look for any

00:30:00,500 --> 00:30:06,799
file systems or components that are

00:30:03,140 --> 00:30:09,110
needed before that parsing inhabit it

00:30:06,799 --> 00:30:13,460
needs to make sure that the root target

00:30:09,110 --> 00:30:16,490
is satisfied which to satisfy that the

00:30:13,460 --> 00:30:18,440
system alpha must be invoked and then to

00:30:16,490 --> 00:30:20,510
get that it needs to make sure that the

00:30:18,440 --> 00:30:24,200
sis routes backing device is even

00:30:20,510 --> 00:30:26,929
present so what this allows you to do is

00:30:24,200 --> 00:30:29,900
as soon as that device becomes present

00:30:26,929 --> 00:30:32,990
all of the floodgates open and all of

00:30:29,900 --> 00:30:41,240
those processes can happen in parallel

00:30:32,990 --> 00:30:43,760
to your event custom init scripts this

00:30:41,240 --> 00:30:46,130
is where all the magic happens when

00:30:43,760 --> 00:30:50,240
you're going from the anagram of s in

00:30:46,130 --> 00:30:52,820
the user space basically you're going to

00:30:50,240 --> 00:30:54,880
live in Rd target its first thing it

00:30:52,820 --> 00:30:57,320
does is cause the cleanup service

00:30:54,880 --> 00:31:02,510
cleanup service does nothing more than

00:30:57,320 --> 00:31:04,610
Eisley into being in our neat art the

00:31:02,510 --> 00:31:07,280
switcher target which will actually

00:31:04,610 --> 00:31:10,940
switch you into root user space this

00:31:07,280 --> 00:31:14,480
isolation will basically when this this

00:31:10,940 --> 00:31:17,149
force the start will cause any in this

00:31:14,480 --> 00:31:18,370
case you have cleanup plus our custom

00:31:17,149 --> 00:31:20,490
cleanup to happen

00:31:18,370 --> 00:31:23,140
before we actually get in userspace

00:31:20,490 --> 00:31:26,020
again things that we have and Ronna

00:31:23,140 --> 00:31:29,740
different that's moving copy files in

00:31:26,020 --> 00:31:32,049
there for debug you can move mouse point

00:31:29,740 --> 00:31:34,240
sit in there and reserve those so that

00:31:32,049 --> 00:31:42,130
that's really where all that action is

00:31:34,240 --> 00:31:43,960
going to happen so now we're about

00:31:42,130 --> 00:31:46,090
halfway through so we can start talking

00:31:43,960 --> 00:31:50,320
about actually implementing some of

00:31:46,090 --> 00:31:52,720
these six the first part is a direct

00:31:50,320 --> 00:31:57,669
route implementation this is very simple

00:31:52,720 --> 00:32:02,830
we have a volume of ice and we are going

00:31:57,669 --> 00:32:05,950
to move into it with system feet this is

00:32:02,830 --> 00:32:08,740
kind of the default behavior for an

00:32:05,950 --> 00:32:11,289
intranet vessel assistant mean if you

00:32:08,740 --> 00:32:14,860
did nothing more than just install baker

00:32:11,289 --> 00:32:19,000
ram FS who assisted in salsas and Beyond

00:32:14,860 --> 00:32:23,380
it it would go through this step so this

00:32:19,000 --> 00:32:25,720
is kind of superfluous in a way if

00:32:23,380 --> 00:32:28,330
you're just moving them sta you don't

00:32:25,720 --> 00:32:30,159
really need an anagram of s if you have

00:32:28,330 --> 00:32:32,770
special drivers that need to be loaded

00:32:30,159 --> 00:32:37,630
beforehand then you start getting into

00:32:32,770 --> 00:32:39,909
the net investment and this is where sis

00:32:37,630 --> 00:32:42,970
need can also help because if you have

00:32:39,909 --> 00:32:45,130
def mapper or greater rainy or start

00:32:42,970 --> 00:32:48,130
getting more complex assembly on file

00:32:45,130 --> 00:32:50,460
system you're going to want something

00:32:48,130 --> 00:32:56,710
that knows about the devices it can

00:32:50,460 --> 00:32:58,899
configure as fast as possible is this

00:32:56,710 --> 00:33:02,710
how much of this is readable to people

00:32:58,899 --> 00:33:07,149
who have okay this is the real neat

00:33:02,710 --> 00:33:09,429
looks like all the other parts are kind

00:33:07,149 --> 00:33:13,899
of low-level so this is simplified than

00:33:09,429 --> 00:33:16,960
the things we care about really we are

00:33:13,899 --> 00:33:20,399
going to have our kernel we're going to

00:33:16,960 --> 00:33:22,929
have system being interacting with that

00:33:20,399 --> 00:33:25,330
we're going to have our switch retarget

00:33:22,929 --> 00:33:28,330
we talked about earlier our sister

00:33:25,330 --> 00:33:30,280
amount which is the route biases and

00:33:28,330 --> 00:33:33,300
we're going to be running the route

00:33:30,280 --> 00:33:38,400
device that underlies the whole thing

00:33:33,300 --> 00:33:41,410
hardware services such as opera yuca and

00:33:38,400 --> 00:33:46,300
then we're going to have the last part

00:33:41,410 --> 00:33:47,710
is our user space and default target now

00:33:46,300 --> 00:33:50,500
the first thing that's going to happen

00:33:47,710 --> 00:33:52,420
here is the kernel is going to start up

00:33:50,500 --> 00:33:56,800
system need because that's what we are

00:33:52,420 --> 00:33:59,620
asked in it once that starts its first

00:33:56,800 --> 00:34:02,710
thing that he wants to do is invoke the

00:33:59,620 --> 00:34:06,540
default target for the in Breanna best

00:34:02,710 --> 00:34:09,700
the default target is switch rooted so

00:34:06,540 --> 00:34:13,990
immediately it's going to go in and say

00:34:09,700 --> 00:34:17,320
I want you to activate so richard has a

00:34:13,990 --> 00:34:19,330
lot of dependencies before I did say the

00:34:17,320 --> 00:34:22,540
first one is is probably going to need

00:34:19,330 --> 00:34:26,800
to run hot chrome to kick things off so

00:34:22,540 --> 00:34:31,090
it starts up bro you have those start

00:34:26,800 --> 00:34:33,190
discovering devices it's then after

00:34:31,090 --> 00:34:37,600
those are running in parallel it's going

00:34:33,190 --> 00:34:40,210
to say hey I need this room to my sis

00:34:37,600 --> 00:34:43,270
route in turn is going to say hey I need

00:34:40,210 --> 00:34:45,429
a route to that device before I can

00:34:43,270 --> 00:34:48,520
mount that device so your mouth unit is

00:34:45,429 --> 00:34:51,130
going out slash this route as you're

00:34:48,520 --> 00:34:56,260
aware and your what is going to be deaf

00:34:51,130 --> 00:35:00,220
- route desh down the slash whatever

00:34:56,260 --> 00:35:04,270
route is could mean s/he ASDB no sort of

00:35:00,220 --> 00:35:07,780
thing so what does that happen here is

00:35:04,270 --> 00:35:10,420
it's after X amount that wealth

00:35:07,780 --> 00:35:13,240
service is going to that mop unit is

00:35:10,420 --> 00:35:16,480
going to wait until that device appears

00:35:13,240 --> 00:35:18,850
now that device will appear as soon as

00:35:16,480 --> 00:35:23,680
you def trigger comes back and that

00:35:18,850 --> 00:35:25,930
Death Note is created this FS so once

00:35:23,680 --> 00:35:29,230
that's there immediately it will return

00:35:25,930 --> 00:35:32,860
and initialize the note has been created

00:35:29,230 --> 00:35:36,040
in data so that immediately the sister

00:35:32,860 --> 00:35:38,110
about Mouse the device and then it will

00:35:36,040 --> 00:35:41,920
come back to switcher and target where

00:35:38,110 --> 00:35:45,390
it says okay I have Asus if s where

00:35:41,920 --> 00:35:48,790
this room now I can go back in a note

00:35:45,390 --> 00:35:53,710
notify system mean that it can actually

00:35:48,790 --> 00:35:54,910
run system switcher and target and start

00:35:53,710 --> 00:36:00,250
when users face

00:35:54,910 --> 00:36:02,920
it's his system me in it the difference

00:36:00,250 --> 00:36:05,049
or the difference is system being at

00:36:02,920 --> 00:36:10,450
once here in here who FS is going to

00:36:05,049 --> 00:36:13,750
have a /e PC OS - release instead of an

00:36:10,450 --> 00:36:17,619
in our game that lets a differentiate

00:36:13,750 --> 00:36:20,650
that it's in the user space system one

00:36:17,619 --> 00:36:24,010
very cool thing is at this point system

00:36:20,650 --> 00:36:26,890
team does not actually exit sure

00:36:24,010 --> 00:36:30,880
traditionally with an Abrahamic fest

00:36:26,890 --> 00:36:33,750
you're an it little exit we cleaned up

00:36:30,880 --> 00:36:36,819
after you the switch route in this case

00:36:33,750 --> 00:36:39,099
system D stays running and just takes

00:36:36,819 --> 00:36:41,859
care of the housekeeping and puts you

00:36:39,099 --> 00:36:43,990
into your new group space that's what

00:36:41,859 --> 00:36:47,859
they deduct so instead of starting a new

00:36:43,990 --> 00:36:50,380
one it keeps itself sees the EGC OS

00:36:47,859 --> 00:36:54,130
release it says okay i'm now at user

00:36:50,380 --> 00:36:58,030
space this allows you to deduplicating

00:36:54,130 --> 00:37:01,510
things such as you know especially

00:36:58,030 --> 00:37:04,089
something more expensive mod probes you

00:37:01,510 --> 00:37:06,190
know that they've been run the nose are

00:37:04,089 --> 00:37:08,559
already there you can preserve that

00:37:06,190 --> 00:37:11,290
information across that that switch

00:37:08,559 --> 00:37:15,119
routes boundary so that's going to give

00:37:11,290 --> 00:37:19,900
you a lot of space for optimization and

00:37:15,119 --> 00:37:22,630
clean up your move process in this like

00:37:19,900 --> 00:37:26,230
I said it's the default operation there

00:37:22,630 --> 00:37:28,660
the device units and the mount device

00:37:26,230 --> 00:37:31,150
unit is actually created by a generator

00:37:28,660 --> 00:37:34,450
and the mountain unit is bundled the

00:37:31,150 --> 00:37:41,770
system feet so this is kind of as

00:37:34,450 --> 00:37:43,690
advertised the next one is more

00:37:41,770 --> 00:37:47,530
complicated this is going to be a live

00:37:43,690 --> 00:37:52,660
food implementation this is going to

00:37:47,530 --> 00:37:54,810
basically take a slush of s file off of

00:37:52,660 --> 00:37:58,200
a physical disk and then

00:37:54,810 --> 00:38:01,230
build up Rama these'll take the brand

00:37:58,200 --> 00:38:03,360
that's overlaid and merge that will be

00:38:01,230 --> 00:38:06,300
the best so you can have a read only

00:38:03,360 --> 00:38:09,180
later and you have a rewrite layer this

00:38:06,300 --> 00:38:12,900
is pretty much how every live USB system

00:38:09,180 --> 00:38:15,570
works they will do some sort of backings

00:38:12,900 --> 00:38:18,570
like physical disk and then they will

00:38:15,570 --> 00:38:20,730
have a rate of back virtual disks that

00:38:18,570 --> 00:38:25,200
they will either use dev mapper to merge

00:38:20,730 --> 00:38:28,890
together Union FS views straight up

00:38:25,200 --> 00:38:33,360
Union FS or in u.s. or now we have

00:38:28,890 --> 00:38:36,140
overlay FS so basically it all

00:38:33,360 --> 00:38:42,870
degenerates into this idea of read-only

00:38:36,140 --> 00:38:44,790
RAM merge together the key tenets that

00:38:42,870 --> 00:38:47,520
we're going to need here are going to be

00:38:44,790 --> 00:38:50,880
the backing store to actually mount your

00:38:47,520 --> 00:38:52,800
physical unit which is what that's going

00:38:50,880 --> 00:38:56,160
to actually be created by the system

00:38:52,800 --> 00:39:01,080
agent filled in generator we will also

00:38:56,160 --> 00:39:04,410
have this live live generator for the

00:39:01,080 --> 00:39:07,170
image model what this live generator is

00:39:04,410 --> 00:39:09,750
going to do is this is going to

00:39:07,170 --> 00:39:12,360
basically parse the command line it's

00:39:09,750 --> 00:39:14,460
going to say hey this is what your

00:39:12,360 --> 00:39:16,590
mapping store is and this is the file

00:39:14,460 --> 00:39:19,260
I'm looking for and it will actually

00:39:16,590 --> 00:39:23,520
create the mount unit and the service

00:39:19,260 --> 00:39:27,330
unit underneath the hood so that you can

00:39:23,520 --> 00:39:29,040
just is just an evil deal about it as it

00:39:27,330 --> 00:39:32,340
goes through normally so you don't have

00:39:29,040 --> 00:39:34,920
the pre program these ahead of time and

00:39:32,340 --> 00:39:37,650
then we'll have a service file that will

00:39:34,920 --> 00:39:44,130
actually perform the merging of the RAM

00:39:37,650 --> 00:39:51,480
FS and the the president read-only lock

00:39:44,130 --> 00:39:53,430
system underneath the hood so this one

00:39:51,480 --> 00:39:59,850
is probably a little bit harder to read

00:39:53,430 --> 00:40:03,770
or is it ok still this is what I get for

00:39:59,850 --> 00:40:03,770
editing this on a 1080p monitor

00:40:04,720 --> 00:40:11,090
so again we start with the card on the F

00:40:07,670 --> 00:40:14,540
system P in here we now have a lot of

00:40:11,090 --> 00:40:18,109
generator we also have our swisherd

00:40:14,540 --> 00:40:20,780
target for me for Cicero Bob but now

00:40:18,109 --> 00:40:25,400
we've introduced three other components

00:40:20,780 --> 00:40:30,770
the EFS mount the u.s. image and the

00:40:25,400 --> 00:40:32,240
notion of a backing store device the

00:40:30,770 --> 00:40:34,220
first thing that's going to happen as

00:40:32,240 --> 00:40:38,720
soon as the kernel invokes that's been

00:40:34,220 --> 00:40:41,869
in it is that the in ufs generator is

00:40:38,720 --> 00:40:45,590
going to go through and scan the command

00:40:41,869 --> 00:40:49,580
line and in my case for our product we

00:40:45,590 --> 00:40:50,570
actually look for the backing store as a

00:40:49,580 --> 00:40:53,599
UUID

00:40:50,570 --> 00:40:56,330
and then we also have a file name which

00:40:53,599 --> 00:40:59,660
is a path to be image relative to

00:40:56,330 --> 00:41:02,119
wherever it's mountain in our case since

00:40:59,660 --> 00:41:04,609
we have to keep it around we put it in

00:41:02,119 --> 00:41:07,369
run in our Eenie

00:41:04,609 --> 00:41:10,010
so the generator will create those

00:41:07,369 --> 00:41:13,010
points it will create the service that

00:41:10,010 --> 00:41:16,640
will actually invoke a ufs with the

00:41:13,010 --> 00:41:19,760
merge drop of merge point and those

00:41:16,640 --> 00:41:22,760
units will be placed in the random file

00:41:19,760 --> 00:41:24,710
system then system B is going to

00:41:22,760 --> 00:41:28,580
actually go through and parse everything

00:41:24,710 --> 00:41:31,190
figure out the dependencies and carry on

00:41:28,580 --> 00:41:33,910
with the loop process to the default

00:41:31,190 --> 00:41:37,660
target which is the switcher target and

00:41:33,910 --> 00:41:41,810
again that's going to do the micro the

00:41:37,660 --> 00:41:44,690
unive trigger and it's that process will

00:41:41,810 --> 00:41:47,300
start just as before now where things

00:41:44,690 --> 00:41:52,970
start to deviate is what switch root

00:41:47,300 --> 00:41:56,030
target tasks or the SIS root amount it's

00:41:52,970 --> 00:41:59,359
going to need to do some more stuff such

00:41:56,030 --> 00:42:01,820
as create the in ufs amounts so that is

00:41:59,359 --> 00:42:05,150
going to be playing at NFS creator

00:42:01,820 --> 00:42:07,010
template us be able to put that at a

00:42:05,150 --> 00:42:08,900
different power point again in the run

00:42:07,010 --> 00:42:12,980
and it ran with us because it needs to

00:42:08,900 --> 00:42:15,850
stay around and in parallel it also says

00:42:12,980 --> 00:42:18,240
it needs to mount us image which is

00:42:15,850 --> 00:42:21,880
read-only image that's going to be

00:42:18,240 --> 00:42:25,240
provided providing to a defense for the

00:42:21,880 --> 00:42:28,690
room file system but to do that it needs

00:42:25,240 --> 00:42:31,090
to be sure that the vacuum device exists

00:42:28,690 --> 00:42:33,130
so that it can actually mount the vacuum

00:42:31,090 --> 00:42:40,000
device where it can then mount the

00:42:33,130 --> 00:42:43,950
actual /fs operating system by now that

00:42:40,000 --> 00:42:43,950
device easily for you two

00:42:44,370 --> 00:42:48,910
you have device to appear in that

00:42:48,040 --> 00:42:51,340
directory

00:42:48,910 --> 00:42:55,300
once that's done again we have

00:42:51,340 --> 00:42:59,430
initialized it mouths pls image once

00:42:55,300 --> 00:43:03,040
that's created both the in UF s and the

00:42:59,430 --> 00:43:06,820
OS image those actually can come back in

00:43:03,040 --> 00:43:09,700
parallel asynchronously so until both of

00:43:06,820 --> 00:43:12,970
them come back and a new FS is done the

00:43:09,700 --> 00:43:13,870
filesystem merge this is route target is

00:43:12,970 --> 00:43:17,350
not ready

00:43:13,870 --> 00:43:20,020
this allows things where anyone s on the

00:43:17,350 --> 00:43:23,700
ramp is going very very quick but if

00:43:20,020 --> 00:43:28,180
you're running on in our case an emmc

00:43:23,700 --> 00:43:29,800
not so quick so those things get

00:43:28,180 --> 00:43:32,080
returned in different points but once

00:43:29,800 --> 00:43:36,940
they're joined the file systems are

00:43:32,080 --> 00:43:38,800
verge and the best system D is notified

00:43:36,940 --> 00:43:42,300
that the abrahamic fest

00:43:38,800 --> 00:43:44,260
has set up the routes file system and

00:43:42,300 --> 00:43:46,030
traditionally you're going to have

00:43:44,260 --> 00:43:49,360
traditionally you would have to do

00:43:46,030 --> 00:43:51,100
something as any mob move here at this

00:43:49,360 --> 00:43:53,560
point you would have to move everything

00:43:51,100 --> 00:43:54,850
into the directory structure to be

00:43:53,560 --> 00:43:58,510
preserved

00:43:54,850 --> 00:44:01,960
you have to use mouth to keep proper F

00:43:58,510 --> 00:44:05,650
tab happy system Guinea will actually

00:44:01,960 --> 00:44:07,780
take care of a lot of that for us by

00:44:05,650 --> 00:44:11,890
putting things in the--in it manifests

00:44:07,780 --> 00:44:14,020
directory by default and again once this

00:44:11,890 --> 00:44:16,720
route is ready and their manifest can

00:44:14,020 --> 00:44:25,590
start and move on is your user space

00:44:16,720 --> 00:44:29,320
system so now I have open for questions

00:44:25,590 --> 00:44:33,340
I apologize there are probably a lot

00:44:29,320 --> 00:44:36,550
more details in here I do have some I'm

00:44:33,340 --> 00:44:39,100
working on a more complete fever because

00:44:36,550 --> 00:44:41,920
I didn't learn a lot in the process of

00:44:39,100 --> 00:44:45,460
this so I'm writing money with my

00:44:41,920 --> 00:44:47,260
cohorts at my company so people have

00:44:45,460 --> 00:44:51,130
questions that were not things that were

00:44:47,260 --> 00:44:53,329
not clear feel free and ask ask them now

00:44:51,130 --> 00:44:57,910
and tell me what sliding

00:44:53,329 --> 00:44:57,910
revisit yes sir

00:45:09,069 --> 00:45:15,440
originally it was noticing that going

00:45:12,589 --> 00:45:18,069
from system if the system didn't give us

00:45:15,440 --> 00:45:21,229
the speed booths and user space

00:45:18,069 --> 00:45:23,420
especially around things like printer

00:45:21,229 --> 00:45:26,089
initialization we're on an embedded

00:45:23,420 --> 00:45:29,299
system but we have to provide a desktop

00:45:26,089 --> 00:45:32,079
persona that's how peripherals so we

00:45:29,299 --> 00:45:35,509
have things like initializing the frame

00:45:32,079 --> 00:45:37,910
fb0 you have to visualize cups those

00:45:35,509 --> 00:45:41,029
things can be slow X startup to be slow

00:45:37,910 --> 00:45:44,989
so we saw complement the parallelization

00:45:41,029 --> 00:45:46,910
gave us a lot of advantage read an

00:45:44,989 --> 00:45:51,979
article that said system beam can be

00:45:46,910 --> 00:45:55,579
used it as inside of the different FS in

00:45:51,979 --> 00:45:58,039
fact Red Hat and Arch Linux offer there

00:45:55,579 --> 00:46:03,769
in the Arab invest generation future cut

00:45:58,039 --> 00:46:06,410
or the CPI than in cpio under arch you

00:46:03,769 --> 00:46:09,709
can make system be versions of that that

00:46:06,410 --> 00:46:12,499
kind of got us started out after this so

00:46:09,709 --> 00:46:21,069
it was kind of we saw smoke and we went

00:46:12,499 --> 00:46:21,069
looking for fire anybody else

00:46:25,430 --> 00:46:32,030
all right look well thank you very much

00:46:28,550 --> 00:46:35,170
everybody for attending and I hope hope

00:46:32,030 --> 00:46:35,170
somebody got something

00:46:48,380 --> 00:46:50,440
you

00:48:44,540 --> 00:48:47,699
[Music]

00:48:53,270 --> 00:49:15,360
[Music]

00:49:20,390 --> 00:49:22,450

YouTube URL: https://www.youtube.com/watch?v=dGqvAk_SLZw


