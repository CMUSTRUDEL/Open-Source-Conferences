Title: 2012 SouthEast LinuxFest - ODBC - Bruce Momjian - Database Hardware Selection Guidelines
Publication date: 2014-06-30
Playlist: 2012 SouthEast LinuxFest - ODBC Un-Conference
Description: 
	2012 SouthEast LinuxFest
Open Database Camp (ODBC)

Bruce Momjian - Database Hardware Selection Guidelines
Captions: 
	00:00:00,000 --> 00:00:05,279
the following presentation was recorded

00:00:02,490 --> 00:00:08,040
the 2012 southeast linux fest in

00:00:05,279 --> 00:00:10,410
charlotte north carolina it is licensed

00:00:08,040 --> 00:00:12,090
under a creative commons license for

00:00:10,410 --> 00:00:16,859
more information about the southeast

00:00:12,090 --> 00:00:19,230
linux fest visit www.lend expense org

00:00:16,859 --> 00:00:21,320
the southeast linux fest would like to

00:00:19,230 --> 00:00:23,279
thank the following diamond sponsors in

00:00:21,320 --> 00:00:29,010
2012 for helping make these videos

00:00:23,279 --> 00:00:30,840
possible remember i wrote the optimizer

00:00:29,010 --> 00:00:34,079
talk that i just i gave a little earlier

00:00:30,840 --> 00:00:36,989
because i as a trainer i needed to

00:00:34,079 --> 00:00:38,579
illustrate how the optimizer was doing

00:00:36,989 --> 00:00:40,110
things and although i could show

00:00:38,579 --> 00:00:41,879
specific queries that really gave me

00:00:40,110 --> 00:00:44,550
sort of an overarching view of what was

00:00:41,879 --> 00:00:48,510
going on this presentation has a similar

00:00:44,550 --> 00:00:52,739
history as a trainer for enterprisedb i

00:00:48,510 --> 00:00:54,989
often have to explain you know how to do

00:00:52,739 --> 00:00:57,059
performance tuning and as i'm talking at

00:00:54,989 --> 00:01:00,090
different levels the query level the

00:00:57,059 --> 00:01:02,850
explain plan looking explain plans and

00:01:00,090 --> 00:01:05,400
looking at settings at the end

00:01:02,850 --> 00:01:06,659
configuration files which i know is

00:01:05,400 --> 00:01:09,390
something that a lot of people talked

00:01:06,659 --> 00:01:12,290
about one of the areas i found really

00:01:09,390 --> 00:01:16,259
was not very covered very well was the

00:01:12,290 --> 00:01:18,420
hardware level and and although you can

00:01:16,259 --> 00:01:20,189
as a sulfur developer you can kind of

00:01:18,420 --> 00:01:22,170
not worry about that and just write your

00:01:20,189 --> 00:01:24,330
queries or write your job or Python or

00:01:22,170 --> 00:01:26,720
whatever and then not really get

00:01:24,330 --> 00:01:29,270
involved in what's happening underneath

00:01:26,720 --> 00:01:32,460
when you start to look at performance

00:01:29,270 --> 00:01:34,979
particularly for databases it's really

00:01:32,460 --> 00:01:38,880
important that you understand that level

00:01:34,979 --> 00:01:40,229
of what's going on frankly I was always

00:01:38,880 --> 00:01:42,780
somebody who always loved that lower

00:01:40,229 --> 00:01:44,850
level stuff so that was just a natural I

00:01:42,780 --> 00:01:46,619
know we had a lot of guys when I was a

00:01:44,850 --> 00:01:50,040
consultant who really only understood

00:01:46,619 --> 00:01:52,079
the top part and what would happen would

00:01:50,040 --> 00:01:54,360
be they understood the top part okay but

00:01:52,079 --> 00:01:56,369
any time there was a problem every time

00:01:54,360 --> 00:01:57,540
something wasn't working right they were

00:01:56,369 --> 00:01:59,969
kind of clueless in terms of

00:01:57,540 --> 00:02:03,119
understanding what was going on down at

00:01:59,969 --> 00:02:04,890
the bottom and for me it was very easy

00:02:03,119 --> 00:02:07,590
because I can understand how that was

00:02:04,890 --> 00:02:09,929
all interacting with with the lower

00:02:07,590 --> 00:02:12,120
level so this talk is really about

00:02:09,929 --> 00:02:12,510
talking about hardware again something

00:02:12,120 --> 00:02:14,939
you

00:02:12,510 --> 00:02:18,420
we may be naturally would rather not

00:02:14,939 --> 00:02:20,730
want to deal with as administrator is a

00:02:18,420 --> 00:02:24,090
developer but honestly there's gold in

00:02:20,730 --> 00:02:27,120
them there hills there are so many areas

00:02:24,090 --> 00:02:31,200
where we're leaving money on the table

00:02:27,120 --> 00:02:33,329
in terms of performance by not really

00:02:31,200 --> 00:02:35,730
focusing on hardware and I'm really

00:02:33,329 --> 00:02:37,260
going to basically present that and try

00:02:35,730 --> 00:02:40,859
and highlight a lot of these areas that

00:02:37,260 --> 00:02:43,010
where we do where people habitually are

00:02:40,859 --> 00:02:45,150
leaving money on the table and leaving

00:02:43,010 --> 00:02:47,280
optimization on the table that's really

00:02:45,150 --> 00:02:49,310
easy to get its and that's why i wrote

00:02:47,280 --> 00:02:54,120
the presentation to really basically

00:02:49,310 --> 00:02:55,409
underscore the importance of being clear

00:02:54,120 --> 00:02:57,810
to people that you know there's a lot of

00:02:55,409 --> 00:02:59,940
benefit here at the hardware level with

00:02:57,810 --> 00:03:02,000
if you just take the just the just list

00:02:59,940 --> 00:03:04,049
of the tall can't just take the minimal

00:03:02,000 --> 00:03:07,440
understanding so let's actually talk

00:03:04,049 --> 00:03:09,989
about this these are typically terms

00:03:07,440 --> 00:03:13,879
that people are concerned about when

00:03:09,989 --> 00:03:15,750
they're dealing with with optimization

00:03:13,879 --> 00:03:17,310
performance there's a whole bunch of

00:03:15,750 --> 00:03:19,829
sort of studies about all these things

00:03:17,310 --> 00:03:21,410
and when they're specking out hardware

00:03:19,829 --> 00:03:26,579
these are the things they're looking at

00:03:21,410 --> 00:03:28,949
I don't mean to be contrary but I don't

00:03:26,579 --> 00:03:31,859
really care about these things as a

00:03:28,949 --> 00:03:34,230
database person okay yeah I'm not that's

00:03:31,859 --> 00:03:37,530
a little facetious I mean I do care that

00:03:34,230 --> 00:03:39,810
your cps aren't 46s and you know that

00:03:37,530 --> 00:03:42,389
you're not running some very archaic

00:03:39,810 --> 00:03:46,560
operating system or so forth but you're

00:03:42,389 --> 00:03:48,030
not going to find gold here okay you

00:03:46,560 --> 00:03:50,780
might find gold you're going to find

00:03:48,030 --> 00:03:53,069
gold here if you're doing rendering of

00:03:50,780 --> 00:03:54,030
graphic images okay you're going to find

00:03:53,069 --> 00:03:56,430
gold here if you're doing a lot of

00:03:54,030 --> 00:04:00,810
network processing maybe or maybe a lot

00:03:56,430 --> 00:04:03,209
of text processing a lot of you know GIS

00:04:00,810 --> 00:04:05,220
stuff or just really very compute

00:04:03,209 --> 00:04:09,060
intensive stuff but that's not usually

00:04:05,220 --> 00:04:11,669
databases and a lot of the learning that

00:04:09,060 --> 00:04:14,099
we have to do as as database

00:04:11,669 --> 00:04:16,820
administrators is to basically go away

00:04:14,099 --> 00:04:20,940
from the focus on these specific issues

00:04:16,820 --> 00:04:22,919
and start to focus not this way where we

00:04:20,940 --> 00:04:25,020
think of the CPU as the most important

00:04:22,919 --> 00:04:25,930
aspect of our system and then we then

00:04:25,020 --> 00:04:27,669
think of memory

00:04:25,930 --> 00:04:29,050
which happened which has to it just has

00:04:27,669 --> 00:04:31,960
to be there we don't really think about

00:04:29,050 --> 00:04:34,330
it okay and then finally we think of the

00:04:31,960 --> 00:04:36,280
io layer which is really kind of tragic

00:04:34,330 --> 00:04:39,430
because in fact this is how we should

00:04:36,280 --> 00:04:43,720
think of our systems okay cpu still at

00:04:39,430 --> 00:04:46,449
the top but it's not really the focus of

00:04:43,720 --> 00:04:48,340
what we're doing focus what we're doing

00:04:46,449 --> 00:04:49,870
really is down the i/o level and I'm

00:04:48,340 --> 00:04:52,690
sorry the Browns a little off but it's

00:04:49,870 --> 00:04:54,490
you can still see it okay and then the

00:04:52,690 --> 00:04:57,430
memory and then the cpu kind of comes in

00:04:54,490 --> 00:04:59,949
is the cherry on top ok and a lot of

00:04:57,430 --> 00:05:01,690
there's just a lot of experience that

00:04:59,949 --> 00:05:03,759
shows that when you're thinking about

00:05:01,690 --> 00:05:06,160
your database not you're not you're

00:05:03,759 --> 00:05:08,139
fostering putting about your database

00:05:06,160 --> 00:05:10,539
system this is what you should be how

00:05:08,139 --> 00:05:12,280
you should be viewing that system and we

00:05:10,539 --> 00:05:14,139
habitually get people coming to the

00:05:12,280 --> 00:05:16,870
postgres Gliss on particularly that of

00:05:14,139 --> 00:05:19,240
the performance list so here's a server

00:05:16,870 --> 00:05:24,550
I'm thinking of getting and here's the

00:05:19,240 --> 00:05:27,970
specs I'm looking at and you know I see

00:05:24,550 --> 00:05:29,229
it over and over again yeah okay we're

00:05:27,970 --> 00:05:30,699
going to be there's going to be eight

00:05:29,229 --> 00:05:34,449
cores they're going to be running at

00:05:30,699 --> 00:05:36,010
this speed they might mention the memory

00:05:34,449 --> 00:05:37,780
we're going to mention how much memory

00:05:36,010 --> 00:05:40,210
is in the system usually and then the I

00:05:37,780 --> 00:05:41,409
always like well I plan to have 10

00:05:40,210 --> 00:05:43,840
drives they're going to be looking like

00:05:41,409 --> 00:05:46,570
this or I'm kind of you know and there's

00:05:43,840 --> 00:05:48,070
it's sort of just thrown in there as an

00:05:46,570 --> 00:05:49,990
afterthought and when they're asking

00:05:48,070 --> 00:05:51,099
they're not asking about what I want how

00:05:49,990 --> 00:05:52,330
much memory they should get their not

00:05:51,099 --> 00:05:54,159
usually asking about how what I owe

00:05:52,330 --> 00:05:56,229
subsystem are getting they want to know

00:05:54,159 --> 00:05:58,300
should I get this faster cpu or these

00:05:56,229 --> 00:05:59,680
slightly seller cpu's with more cores we

00:05:58,300 --> 00:06:02,800
don't you know I'm saying and you're

00:05:59,680 --> 00:06:06,610
like wake up this is not you're not even

00:06:02,800 --> 00:06:09,940
in the ballpark here and again we'll

00:06:06,610 --> 00:06:12,460
gently tell them no tell me about you

00:06:09,940 --> 00:06:13,900
tell me about your i/o subsystem tell me

00:06:12,460 --> 00:06:15,370
about you then we're worrying about and

00:06:13,900 --> 00:06:16,810
the problem is most of the people

00:06:15,370 --> 00:06:19,659
respecting the systems that are spending

00:06:16,810 --> 00:06:22,770
way too much money to get the fastest

00:06:19,659 --> 00:06:25,900
cpus and way too little money down here

00:06:22,770 --> 00:06:29,560
and you might think down here is just

00:06:25,900 --> 00:06:31,449
well do I get a 57 you know what was it

00:06:29,560 --> 00:06:33,639
just a hard drive type i get is it how

00:06:31,449 --> 00:06:35,560
many hard drives in raid and is your 85

00:06:33,639 --> 00:06:36,340
what is that although there's there's a

00:06:35,560 --> 00:06:38,889
there's me

00:06:36,340 --> 00:06:42,580
any many things down here that are not

00:06:38,889 --> 00:06:46,510
obvious to non database people okay that

00:06:42,580 --> 00:06:48,430
really will make i'm not saying 5 10 20

00:06:46,510 --> 00:06:50,889
I'm saying like they're going to make 10

00:06:48,430 --> 00:06:53,290
times 100 times for fruit performance

00:06:50,889 --> 00:06:55,680
improvements in some cases okay when he

00:06:53,290 --> 00:06:58,120
can plop down three hundred dollars and

00:06:55,680 --> 00:07:01,470
get a hundred x improvement on some

00:06:58,120 --> 00:07:03,940
operation I'll take that every day right

00:07:01,470 --> 00:07:05,500
and what you don't want to do is be

00:07:03,940 --> 00:07:08,530
spending that three hundred dollars up

00:07:05,500 --> 00:07:09,790
in that red area and then leaving that

00:07:08,530 --> 00:07:11,979
three hundred dollars out of the i/o

00:07:09,790 --> 00:07:14,500
subsystem and that happens over and over

00:07:11,979 --> 00:07:17,320
again so in fact I think the last time I

00:07:14,500 --> 00:07:22,030
presented this somebody basically said

00:07:17,320 --> 00:07:23,770
can I take this and show it to my the

00:07:22,030 --> 00:07:25,960
people who buy our hardware because I

00:07:23,770 --> 00:07:29,410
can't communicate to them that they're

00:07:25,960 --> 00:07:31,300
doing it wrong right and again this Web

00:07:29,410 --> 00:07:33,880
this as long as well as all my other

00:07:31,300 --> 00:07:36,010
presentations are on or on my website

00:07:33,880 --> 00:07:38,050
here so i just told me i download it

00:07:36,010 --> 00:07:40,660
Creative Commons license go present you

00:07:38,050 --> 00:07:43,750
know go go wild alright so hopefully

00:07:40,660 --> 00:07:45,430
it's helping people I don't know how

00:07:43,750 --> 00:07:49,210
much help people I hope it's all people

00:07:45,430 --> 00:07:52,539
so why is why is this why is it this

00:07:49,210 --> 00:07:56,260
mismatch what is it about databases that

00:07:52,539 --> 00:07:59,050
that we really don't get okay and that

00:07:56,260 --> 00:08:02,880
is that traditional servers are are

00:07:59,050 --> 00:08:05,590
normally cpu constraint okay you know

00:08:02,880 --> 00:08:06,880
HTTP email application servers

00:08:05,590 --> 00:08:09,760
application code obviously these are

00:08:06,880 --> 00:08:11,979
these are often bottleneck by cpu let me

00:08:09,760 --> 00:08:15,039
have nice graphs you know where we can

00:08:11,979 --> 00:08:16,900
basically you know go into our systems

00:08:15,039 --> 00:08:19,660
here and let me see if I can kind of

00:08:16,900 --> 00:08:22,210
pull it up maybe I can but you know nice

00:08:19,660 --> 00:08:24,430
graphs that show okay you know these

00:08:22,210 --> 00:08:27,280
CPUs are doing this and these CPUs are

00:08:24,430 --> 00:08:29,590
doing that well okay you know that's

00:08:27,280 --> 00:08:31,539
that's interesting but but again most

00:08:29,590 --> 00:08:35,979
systems aren't sleepy you constraint

00:08:31,539 --> 00:08:37,719
okay lose database systems I don't know

00:08:35,979 --> 00:08:39,010
about you but a lot of times when I'm

00:08:37,719 --> 00:08:43,180
going to go and look at a database

00:08:39,010 --> 00:08:44,890
system in the classic case is that the

00:08:43,180 --> 00:08:46,839
customer saying the system's too slow

00:08:44,890 --> 00:08:49,690
and you get on their system and you look

00:08:46,839 --> 00:08:52,000
at the CPUs and they're all idle

00:08:49,690 --> 00:08:55,390
like well you know the customers like

00:08:52,000 --> 00:09:00,730
why is my system slow when we CPUs are

00:08:55,390 --> 00:09:02,560
the idol well could be you know is the

00:09:00,730 --> 00:09:04,510
display is working right i mean those

00:09:02,560 --> 00:09:06,550
cpus are really idle what could it be

00:09:04,510 --> 00:09:07,840
right and then and then you have to

00:09:06,550 --> 00:09:11,620
basically walk them through the process

00:09:07,840 --> 00:09:14,620
and and and you start to look now at you

00:09:11,620 --> 00:09:16,390
know okay is io the bottleneck is it is

00:09:14,620 --> 00:09:17,770
it lack of memory is it configuring it

00:09:16,390 --> 00:09:20,740
could be a whole bunch of things in that

00:09:17,770 --> 00:09:23,140
stack but often it's shocking to them

00:09:20,740 --> 00:09:24,790
that they've got a CP they've got CPUs

00:09:23,140 --> 00:09:27,330
that are doing nothing and you know

00:09:24,790 --> 00:09:29,920
systems that are really slow so

00:09:27,330 --> 00:09:32,170
basically what database servers do that

00:09:29,920 --> 00:09:34,840
are not a lot of other applications due

00:09:32,170 --> 00:09:37,240
on computers is a lot of sequential

00:09:34,840 --> 00:09:40,080
scans of a lot of large data which again

00:09:37,240 --> 00:09:43,420
is not typical a lot of random IL

00:09:40,080 --> 00:09:46,600
particularly for index access again not

00:09:43,420 --> 00:09:48,760
a typical thing application would do it

00:09:46,600 --> 00:09:50,590
has unpredictable requirements because

00:09:48,760 --> 00:09:52,780
again you can throw almost anything at

00:09:50,590 --> 00:09:55,030
it and you have a lot of reporting

00:09:52,780 --> 00:09:57,550
requirements that again give you a very

00:09:55,030 --> 00:10:00,040
sort of asymmetric load balanced it's

00:09:57,550 --> 00:10:02,050
not like okay you know i get a thousand

00:10:00,040 --> 00:10:04,230
hits a minute I get you know thousand

00:10:02,050 --> 00:10:07,300
hits an hour or whatever my load is

00:10:04,230 --> 00:10:09,930
these databases often you know I go from

00:10:07,300 --> 00:10:13,270
very idle to very busy back and forth

00:10:09,930 --> 00:10:17,350
and again that that kind of throws havoc

00:10:13,270 --> 00:10:23,170
on on requirements as well so any

00:10:17,350 --> 00:10:25,000
questions so far good okay so I'm going

00:10:23,170 --> 00:10:27,910
to talk about this slide for a little

00:10:25,000 --> 00:10:31,150
bit it's really necessary to kind of

00:10:27,910 --> 00:10:33,760
understand where that gold is as I said

00:10:31,150 --> 00:10:36,460
before what is it about the i/o system

00:10:33,760 --> 00:10:38,670
that post chris is doing what is it that

00:10:36,460 --> 00:10:41,170
is making your system often go slow well

00:10:38,670 --> 00:10:42,610
this slide which actually appears in a

00:10:41,170 --> 00:10:45,520
bunch of my presentations actually has

00:10:42,610 --> 00:10:48,610
two parts the part on the left is

00:10:45,520 --> 00:10:51,640
basically what we call the query or

00:10:48,610 --> 00:10:53,110
checkpoint operation and normally

00:10:51,640 --> 00:10:55,150
effectively what happens is you've got

00:10:53,110 --> 00:10:58,270
three postgres sessions running here and

00:10:55,150 --> 00:11:00,339
there just reading and writing to this

00:10:58,270 --> 00:11:02,750
shared buffer cache so anything you need

00:11:00,339 --> 00:11:04,550
to read or write is going to happen

00:11:02,750 --> 00:11:06,620
in that shared buffer cache we can't use

00:11:04,550 --> 00:11:08,600
the memory the local memory in these

00:11:06,620 --> 00:11:09,920
sessions because of course if you change

00:11:08,600 --> 00:11:11,780
something your local memory nobody else

00:11:09,920 --> 00:11:14,360
can see it right so we got you use this

00:11:11,780 --> 00:11:17,630
shared buffer shared memory area to do

00:11:14,360 --> 00:11:18,650
all of our reading and writing okay and

00:11:17,630 --> 00:11:20,450
this is typically going to be about

00:11:18,650 --> 00:11:22,490
twenty five percent of your RAM and and

00:11:20,450 --> 00:11:28,070
you know there's a whole you know

00:11:22,490 --> 00:11:31,460
wizardly process of sizing that but

00:11:28,070 --> 00:11:33,020
effectively if a back-end need some data

00:11:31,460 --> 00:11:35,270
its first going to ask for it in the

00:11:33,020 --> 00:11:36,830
shared buffer cache if it isn't in the

00:11:35,270 --> 00:11:39,680
shared buffer cache it's then going to

00:11:36,830 --> 00:11:41,210
ask for in the kernel cash if it can't

00:11:39,680 --> 00:11:43,310
find it in the kernel cash it's then

00:11:41,210 --> 00:11:45,410
going to go to the disk okay and then

00:11:43,310 --> 00:11:46,790
read it up into the shared buffer cache

00:11:45,410 --> 00:11:49,010
it's going to stay in that chair buffer

00:11:46,790 --> 00:11:51,800
cache for some period of time okay and

00:11:49,010 --> 00:11:53,600
then be reused by other sessions the

00:11:51,800 --> 00:11:55,430
right hand side actually talks about

00:11:53,600 --> 00:11:57,050
another area that you might not be as

00:11:55,430 --> 00:11:59,840
familiar with mets the area really

00:11:57,050 --> 00:12:02,900
related to transaction durability so

00:11:59,840 --> 00:12:05,390
effectively every time we change some

00:12:02,900 --> 00:12:07,970
data in the shared buffer cache we also

00:12:05,390 --> 00:12:10,280
have to write something to this area

00:12:07,970 --> 00:12:12,560
called the right ahead log and the right

00:12:10,280 --> 00:12:15,110
ahead log effectively represents a sort

00:12:12,560 --> 00:12:16,670
of a change set or a change log of

00:12:15,110 --> 00:12:19,310
everything we've changed in the database

00:12:16,670 --> 00:12:21,410
now of course it sounds like it's double

00:12:19,310 --> 00:12:23,839
writing and in fact it is but there's

00:12:21,410 --> 00:12:26,110
some real historical reasons why we have

00:12:23,839 --> 00:12:30,020
to write this right ahead long because

00:12:26,110 --> 00:12:32,240
databases as postgres enterprises

00:12:30,020 --> 00:12:33,800
databases postgres is one has a

00:12:32,240 --> 00:12:36,050
requirement for durability and

00:12:33,800 --> 00:12:38,450
effectively that means that if a

00:12:36,050 --> 00:12:40,220
committed transaction is if a

00:12:38,450 --> 00:12:43,100
transaction is committed it's committed

00:12:40,220 --> 00:12:45,560
permanently if the system loses power or

00:12:43,100 --> 00:12:47,210
the operating system it crashes we will

00:12:45,560 --> 00:12:50,540
be able to recover that committed

00:12:47,210 --> 00:12:52,700
transaction and restore it fully and

00:12:50,540 --> 00:12:54,920
because of that requirement effectively

00:12:52,700 --> 00:12:56,870
every time we change something here we

00:12:54,920 --> 00:12:58,520
write it to the right ahead log and then

00:12:56,870 --> 00:13:01,330
we all have to write that right ahead

00:12:58,520 --> 00:13:04,640
log not only to the colonel but to some

00:13:01,330 --> 00:13:07,580
durable storage so that again if we lose

00:13:04,640 --> 00:13:09,860
power we can restore that transaction

00:13:07,580 --> 00:13:12,320
this is an operation called F sync you

00:13:09,860 --> 00:13:13,850
can actually see if the config file you

00:13:12,320 --> 00:13:15,680
can control the method we use the

00:13:13,850 --> 00:13:16,480
colonel call we use for everything but

00:13:15,680 --> 00:13:20,290
you gotta

00:13:16,480 --> 00:13:21,639
right it to some durable storage or

00:13:20,290 --> 00:13:23,470
you're really not in their price

00:13:21,639 --> 00:13:28,899
database because you're not acid

00:13:23,470 --> 00:13:32,230
compliant okay so there's some other

00:13:28,899 --> 00:13:33,940
stuff here recovery for example means

00:13:32,230 --> 00:13:36,459
rereading the right ad log and

00:13:33,940 --> 00:13:38,199
reapplying the changes checkpoint

00:13:36,459 --> 00:13:40,209
happens when we actually write all these

00:13:38,199 --> 00:13:41,800
shared buffers down to disk and then we

00:13:40,209 --> 00:13:44,350
can recycle the right ahead logs but

00:13:41,800 --> 00:13:46,149
again it that doesn't really apply in in

00:13:44,350 --> 00:13:47,620
the in the hall in the in the actual

00:13:46,149 --> 00:13:49,540
context that we're talking about it

00:13:47,620 --> 00:13:51,190
we're really talking about is this is

00:13:49,540 --> 00:13:53,529
this traditional F saying and this is

00:13:51,190 --> 00:13:56,350
this is one area where we really can get

00:13:53,529 --> 00:13:58,209
really slow and and you might well you

00:13:56,350 --> 00:14:00,820
might say why well okay so let's suppose

00:13:58,209 --> 00:14:03,750
you have to a traditional you know you

00:14:00,820 --> 00:14:07,510
know or even a high-end $15,000 says

00:14:03,750 --> 00:14:10,060
15,000 rpm SAS drive so you know kind of

00:14:07,510 --> 00:14:13,839
high-end at least in terms of magnetic

00:14:10,060 --> 00:14:18,040
drives go how many F sink operations can

00:14:13,839 --> 00:14:19,649
we perform on a 15,000 RPM drive well if

00:14:18,040 --> 00:14:23,740
you do the math again you're talking

00:14:19,649 --> 00:14:25,750
15,000 psych circles a second and of

00:14:23,740 --> 00:14:27,040
course you have to wait for the head to

00:14:25,750 --> 00:14:29,019
get that you have to wait through the

00:14:27,040 --> 00:14:32,589
data to get under the head so you can

00:14:29,019 --> 00:14:35,170
get it onto the drive so even in this

00:14:32,589 --> 00:14:39,819
fairly high end magnetic drive you're

00:14:35,170 --> 00:14:46,480
still looking at about only 250 F sinks

00:14:39,819 --> 00:14:49,500
a second yes you know an F sink is

00:14:46,480 --> 00:14:53,170
basically the ability to write some data

00:14:49,500 --> 00:14:56,170
permanently to some permanent storage so

00:14:53,170 --> 00:14:58,810
it's basically a kernel call that forces

00:14:56,170 --> 00:15:00,279
the normally when you issue a right the

00:14:58,810 --> 00:15:01,990
right just goes to the colonel and sits

00:15:00,279 --> 00:15:05,069
there and then within the next 30

00:15:01,990 --> 00:15:05,069
seconds it gets written to disk

00:15:06,720 --> 00:15:10,470
world of hard work

00:16:11,190 --> 00:16:14,760
you

00:16:12,760 --> 00:16:14,760
Oh

00:16:35,949 --> 00:16:42,910
you know where you know

00:18:30,220 --> 00:18:46,510
oh the minimum size no it could be it

00:18:44,830 --> 00:18:48,850
could be just the transaction commits

00:18:46,510 --> 00:18:50,440
number so it could have already whatever

00:18:48,850 --> 00:18:51,789
David change you made could be already

00:18:50,440 --> 00:18:54,130
there and it's just basically you're

00:18:51,789 --> 00:19:05,860
setting transaction committed it could

00:18:54,130 --> 00:19:07,330
be you know 16 bytes but it's really lit

00:19:05,860 --> 00:19:09,100
as you said it's really latency that

00:19:07,330 --> 00:19:12,070
we're looking at here so it's the

00:19:09,100 --> 00:19:14,080
requirement is we don't really I mean we

00:19:12,070 --> 00:19:16,750
rarely well in this particular example

00:19:14,080 --> 00:19:19,630
I'm I'm assuming that whatever data

00:19:16,750 --> 00:19:21,220
we're writing is so small that how much

00:19:19,630 --> 00:19:26,890
data i can push through there is really

00:19:21,220 --> 00:19:29,350
not my concern my concern is that my

00:19:26,890 --> 00:19:33,909
concern is that effectively i have to

00:19:29,350 --> 00:19:35,590
wait for this data to get down to some

00:19:33,909 --> 00:19:38,230
permanent storage and then back up again

00:19:35,590 --> 00:19:40,799
before I can consider my transaction

00:19:38,230 --> 00:19:40,799
committed

00:19:48,200 --> 00:19:52,789
thank you for tribe so we're basically

00:19:51,139 --> 00:19:54,350
going to we're not going to commit this

00:19:52,789 --> 00:19:56,750
we're not going to we're going to tell

00:19:54,350 --> 00:19:59,510
the client were committed until we've

00:19:56,750 --> 00:20:01,130
acknowledged that that data that right

00:19:59,510 --> 00:20:04,190
at log data has caught in some permanent

00:20:01,130 --> 00:20:06,289
storage okay and it's really that late

00:20:04,190 --> 00:20:08,659
and see how long it actually takes vs

00:20:06,289 --> 00:20:10,669
eight capers a 16k probably not

00:20:08,659 --> 00:20:14,380
significant considering the latency of

00:20:10,669 --> 00:20:16,340
magnetic job which is like huge right

00:20:14,380 --> 00:20:18,559
yeah it would have some effect but

00:20:16,340 --> 00:20:22,940
probably minimal it's not really a

00:20:18,559 --> 00:20:26,659
concern so this is really the way the

00:20:22,940 --> 00:20:29,179
magnetic disk stack works effect they

00:20:26,659 --> 00:20:30,799
have broken it out a little bit so we

00:20:29,179 --> 00:20:32,269
solve the right ahead law we still have

00:20:30,799 --> 00:20:33,799
the kernel buffer cache we still have

00:20:32,269 --> 00:20:36,860
the magnetic disk but I basically kind

00:20:33,799 --> 00:20:39,440
of split it out so what we have kind of

00:20:36,860 --> 00:20:42,519
under the colonel is typically an HBA

00:20:39,440 --> 00:20:45,049
controller host bus adapter basically

00:20:42,519 --> 00:20:49,190
could be a raid controller which is

00:20:45,049 --> 00:20:50,750
typical in enterprise machines and then

00:20:49,190 --> 00:20:52,610
underneath that you're going to have a

00:20:50,750 --> 00:20:57,230
disk cache which is going to be on the

00:20:52,610 --> 00:20:59,809
same devices the disk drive but again it

00:20:57,230 --> 00:21:01,340
is it is a cash right so it's some

00:20:59,809 --> 00:21:03,440
memory that's sitting on the drive it

00:21:01,340 --> 00:21:04,610
could be some of them is like a gig I

00:21:03,440 --> 00:21:07,399
mean they some of them are pretty big

00:21:04,610 --> 00:21:12,169
right i mean they're actually kind of

00:21:07,399 --> 00:21:14,630
sighs II for the larger drives so

00:21:12,169 --> 00:21:16,490
effectively when you're writing down you

00:21:14,630 --> 00:21:19,730
have to decide okay when when do I get

00:21:16,490 --> 00:21:21,980
my acknowledgement right so on this

00:21:19,730 --> 00:21:23,029
particular case we're going to the eff

00:21:21,980 --> 00:21:25,460
think is going to be passed in the

00:21:23,029 --> 00:21:27,200
kernel to the raid controller raid

00:21:25,460 --> 00:21:30,019
controllers going to pass it down to the

00:21:27,200 --> 00:21:31,970
disk cache if the disk cache is called

00:21:30,019 --> 00:21:33,289
right is right through that means we're

00:21:31,970 --> 00:21:35,029
going to write it all the way down to

00:21:33,289 --> 00:21:37,039
the disk we're going to wait for that

00:21:35,029 --> 00:21:38,960
head to platter to get to the right spot

00:21:37,039 --> 00:21:40,610
under the head and then we're going to

00:21:38,960 --> 00:21:43,909
acknowledge it and send it all the way

00:21:40,610 --> 00:21:45,889
back if it's right back that means that

00:21:43,909 --> 00:21:47,450
as soon as it gets the soon as it gets

00:21:45,889 --> 00:21:50,450
the data it acknowledges it right away

00:21:47,450 --> 00:21:53,330
even though in this case it there may be

00:21:50,450 --> 00:21:55,279
no guarantee that this is actually door

00:21:53,330 --> 00:21:57,860
we stored and of course this is a

00:21:55,279 --> 00:22:00,400
concern for database people not so much

00:21:57,860 --> 00:22:01,810
for other people but for database people

00:22:00,400 --> 00:22:03,760
is what we care about and of course this

00:22:01,810 --> 00:22:05,590
is some of the things that you have to

00:22:03,760 --> 00:22:11,290
care about to have a reliable system

00:22:05,590 --> 00:22:14,260
okay so let's kind of let's kind of

00:22:11,290 --> 00:22:16,360
break this open a little bit we got this

00:22:14,260 --> 00:22:18,520
problem here as i showed before where

00:22:16,360 --> 00:22:20,260
we're going all the way down the layers

00:22:18,520 --> 00:22:21,760
and we might have a disk cache that's

00:22:20,260 --> 00:22:24,310
right through it might be right back

00:22:21,760 --> 00:22:26,260
frankly in this case if this disk cache

00:22:24,310 --> 00:22:29,200
is right back and there's no battery on

00:22:26,260 --> 00:22:31,630
this thing we're in we're not safe we

00:22:29,200 --> 00:22:33,700
might be flying we might be going really

00:22:31,630 --> 00:22:35,920
fast and your f sinks might be super

00:22:33,700 --> 00:22:38,860
super duper fast in fact we have a tool

00:22:35,920 --> 00:22:40,810
called PG test f sink and contribute

00:22:38,860 --> 00:22:42,280
essed how quickly you f sink and if

00:22:40,810 --> 00:22:44,620
you're after sinking to a magnetic drive

00:22:42,280 --> 00:22:46,480
and you're doing it more than 250 times

00:22:44,620 --> 00:22:48,460
a second and it'll tell you per second

00:22:46,480 --> 00:22:50,620
with your number is the nods all your

00:22:48,460 --> 00:22:52,810
disk cache is lying to you and you're

00:22:50,620 --> 00:22:54,870
potentially open to lose data or corrupt

00:22:52,810 --> 00:22:58,980
data in the event of a power failure

00:22:54,870 --> 00:22:58,980
okay yes sir

00:23:36,130 --> 00:23:42,310
if your honor here no macros 10 system

00:23:38,740 --> 00:23:42,310
that doesn't

00:23:53,460 --> 00:23:56,120
yes

00:24:02,140 --> 00:24:06,440
yeah that's not you something we've been

00:24:04,400 --> 00:24:08,780
kind of working on the PG test deficit

00:24:06,440 --> 00:24:11,450
kind of helps you pretty much to kind of

00:24:08,780 --> 00:24:15,470
know what your number is and then we

00:24:11,450 --> 00:24:17,300
also have some documentation so there's

00:24:15,470 --> 00:24:21,350
actually a tool that we have a link that

00:24:17,300 --> 00:24:23,360
we have to a tool which will you run the

00:24:21,350 --> 00:24:26,600
tool on another machine and you let it

00:24:23,360 --> 00:24:29,240
continually right to your other machine

00:24:26,600 --> 00:24:30,710
over a network I think and then you shut

00:24:29,240 --> 00:24:33,140
down the machine and you bring it up

00:24:30,710 --> 00:24:35,360
again and then it'll it'll recently

00:24:33,140 --> 00:24:39,730
it'll basically reconnect and check to

00:24:35,360 --> 00:24:41,930
see if the data has been lost between so

00:24:39,730 --> 00:24:43,910
that's actually a pretty cool tool I was

00:24:41,930 --> 00:24:45,140
coming to eat how they did that but you

00:24:43,910 --> 00:24:47,510
run it on another machine and it

00:24:45,140 --> 00:24:49,010
connects it and then runs and then you

00:24:47,510 --> 00:24:50,990
can basically you know a couple power

00:24:49,010 --> 00:24:52,460
failures to tell you right away and the

00:24:50,990 --> 00:24:55,460
nice thing about that is checking your

00:24:52,460 --> 00:24:57,200
entire stack you know and making sure

00:24:55,460 --> 00:24:58,340
that that stack is durable again most

00:24:57,200 --> 00:25:02,090
people don't care about this but

00:24:58,340 --> 00:25:04,190
databases people have to okay now one

00:25:02,090 --> 00:25:07,430
thing that really here's a piece of gold

00:25:04,190 --> 00:25:10,940
right here and again something a lot of

00:25:07,430 --> 00:25:14,210
people don't really realize again this F

00:25:10,940 --> 00:25:15,980
sync date is not super huge yeah it's

00:25:14,210 --> 00:25:18,980
going to be you know a couple k or maybe

00:25:15,980 --> 00:25:21,740
a meg or something but again not really

00:25:18,980 --> 00:25:24,590
large in terms of in terms of modern

00:25:21,740 --> 00:25:26,570
hardware so one of the things that can

00:25:24,590 --> 00:25:30,320
really give you a huge benefit is to get

00:25:26,570 --> 00:25:32,810
a battery on your raid controller again

00:25:30,320 --> 00:25:35,350
I'm ballpark and a 300 our figure here

00:25:32,810 --> 00:25:38,000
but it's probably less than that now

00:25:35,350 --> 00:25:41,540
post-crisis always wanted the ability to

00:25:38,000 --> 00:25:44,960
have some small amount of static memory

00:25:41,540 --> 00:25:47,120
that was a non-volatile you know and we

00:25:44,960 --> 00:25:48,830
wanted this for 15 years in the first

00:25:47,120 --> 00:25:53,590
five seven years it just wasn't

00:25:48,830 --> 00:25:56,510
available and about you know 2004 2003

00:25:53,590 --> 00:25:57,950
some of these sort of batteries became

00:25:56,510 --> 00:26:00,350
available in the raid controllers again

00:25:57,950 --> 00:26:02,450
normally only at the high end and this

00:26:00,350 --> 00:26:05,540
is basically now move down into more of

00:26:02,450 --> 00:26:08,570
the commodity stuff but basically by

00:26:05,540 --> 00:26:11,300
having that battery there an f st. can

00:26:08,570 --> 00:26:13,250
now be acknowledged right away so I'm

00:26:11,300 --> 00:26:13,860
not waiting for that magnetic disk to

00:26:13,250 --> 00:26:15,809
spin around

00:26:13,860 --> 00:26:17,850
anymore I'm basically saying okay I got

00:26:15,809 --> 00:26:20,100
your data boom I'm done so instead of

00:26:17,850 --> 00:26:23,130
getting 250f sinks a second i'm getting

00:26:20,100 --> 00:26:25,110
10,000 def sinks a second as you can

00:26:23,130 --> 00:26:28,080
imagine that improves throughput quite a

00:26:25,110 --> 00:26:30,030
bit right particularly for right heavy

00:26:28,080 --> 00:26:31,500
workloads it doesn't do a whole lot for

00:26:30,030 --> 00:26:33,510
reads but for right heavy workloads

00:26:31,500 --> 00:26:35,460
again it's giving me the same durability

00:26:33,510 --> 00:26:37,770
but again I'm getting that I'm getting

00:26:35,460 --> 00:26:41,720
that stuff through so much faster now

00:26:37,770 --> 00:26:41,720
because I'm no longer throttle yes

00:26:49,180 --> 00:26:54,670
no the the battery is basically going to

00:26:52,960 --> 00:26:58,390
be on the raid card I do have a picture

00:26:54,670 --> 00:27:00,880
of one a little farther along and the

00:26:58,390 --> 00:27:06,250
raid controller is often going to turn

00:27:00,880 --> 00:27:09,730
off the write-back cache that might

00:27:06,250 --> 00:27:11,680
exist on the drives because of course as

00:27:09,730 --> 00:27:14,290
soon as we're because we're doing right

00:27:11,680 --> 00:27:16,900
back up here we're willing to wait as

00:27:14,290 --> 00:27:18,940
long as necessary now to get this data

00:27:16,900 --> 00:27:20,740
to permanent storage the good raid

00:27:18,940 --> 00:27:24,370
controllers will effectively allow you

00:27:20,740 --> 00:27:26,140
to go in set that cash because the

00:27:24,370 --> 00:27:28,300
battery is there to write back and now

00:27:26,140 --> 00:27:30,040
allow and then it will also all the

00:27:28,300 --> 00:27:32,830
drives it connects to will make sure it

00:27:30,040 --> 00:27:34,750
turns off the write-back cache on the

00:27:32,830 --> 00:27:44,290
control of the drives and make sure the

00:27:34,750 --> 00:27:46,660
data right straight through ok ok so

00:27:44,290 --> 00:27:49,920
there that's with the battery so the

00:27:46,660 --> 00:27:52,320
battery basically maintains the memory

00:27:49,920 --> 00:27:54,220
until the system comes the backup which

00:27:52,320 --> 00:27:57,460
typically it's going to maintain the

00:27:54,220 --> 00:27:59,740
memory for like 48 hours or 72 hours or

00:27:57,460 --> 00:28:02,260
the newer controllers will basically

00:27:59,740 --> 00:28:05,170
have some flash memory on the controller

00:28:02,260 --> 00:28:07,660
card and the battery as soon as it loses

00:28:05,170 --> 00:28:09,340
power will use the battery not to

00:28:07,660 --> 00:28:12,450
maintain the member the volatile memory

00:28:09,340 --> 00:28:15,040
but to write the memory to the

00:28:12,450 --> 00:28:16,750
non-volatile flash then when it comes

00:28:15,040 --> 00:28:18,850
back up that way you can be down for a

00:28:16,750 --> 00:28:20,440
long period of time then when it company

00:28:18,850 --> 00:28:23,350
gets power again it will first thing

00:28:20,440 --> 00:28:25,300
we'll do is read off the flash read it

00:28:23,350 --> 00:28:30,130
back into memory I'm going to force that

00:28:25,300 --> 00:28:33,430
down to disk right so it's really quite

00:28:30,130 --> 00:28:35,290
you know that's a tremendous thing in

00:28:33,430 --> 00:28:37,270
terms of allowing you to do and again

00:28:35,290 --> 00:28:39,010
you can see people who were up in this

00:28:37,270 --> 00:28:41,560
worried about the number of CPUs and the

00:28:39,010 --> 00:28:43,600
speed of the CPUs are missing a lot of

00:28:41,560 --> 00:28:46,300
this real you know really tremendous

00:28:43,600 --> 00:28:48,820
stuff particularly again for all TP

00:28:46,300 --> 00:28:52,060
right load stuff they did just you know

00:28:48,820 --> 00:28:54,190
if you can basically do it you can you

00:28:52,060 --> 00:28:57,340
can throw away durability and do it fast

00:28:54,190 --> 00:28:59,530
which people don't really want to do you

00:28:57,340 --> 00:29:01,300
can have durability and do it slow which

00:28:59,530 --> 00:29:01,960
people don't want to do where you can

00:29:01,300 --> 00:29:06,600
have durable

00:29:01,960 --> 00:29:09,429
and fast if you get something like this

00:29:06,600 --> 00:29:11,020
another way of doing it is and this is

00:29:09,429 --> 00:29:16,179
the way I personally did it for my home

00:29:11,020 --> 00:29:18,610
server is to get a drive with a battery

00:29:16,179 --> 00:29:20,679
on it and again this is typically not a

00:29:18,610 --> 00:29:24,700
magnetic drive for reasons I'm not going

00:29:20,679 --> 00:29:28,169
to go into but some of the nicer SSDs

00:29:24,700 --> 00:29:31,029
will basically have a battery on them

00:29:28,169 --> 00:29:33,399
the particular blow out that we like the

00:29:31,029 --> 00:29:35,559
best is the Intel 320s some of the

00:29:33,399 --> 00:29:38,350
earlier drives had without batteries

00:29:35,559 --> 00:29:41,679
really had problems you might think oh

00:29:38,350 --> 00:29:47,980
well it's an SSD I don't need a battery

00:29:41,679 --> 00:29:50,140
I wish that was true but we learned very

00:29:47,980 --> 00:29:52,870
early on of course you know SSDs

00:29:50,140 --> 00:29:55,179
everyone said oh wow great random i/o

00:29:52,870 --> 00:29:57,220
you know it's going to revolutionize the

00:29:55,179 --> 00:29:59,679
database market and you know people sort

00:29:57,220 --> 00:30:02,440
of ran to them of course many of the

00:29:59,679 --> 00:30:04,600
early SSDs had serious problems

00:30:02,440 --> 00:30:08,620
particularly in their microcontrollers

00:30:04,600 --> 00:30:11,559
in the way they they manage the the NAND

00:30:08,620 --> 00:30:12,580
memory that was inside of them but a

00:30:11,559 --> 00:30:14,500
bigger problem from the database

00:30:12,580 --> 00:30:17,649
perspective was something that really

00:30:14,500 --> 00:30:21,580
wasn't clear in the early years then

00:30:17,649 --> 00:30:24,429
again i'm thinking 2008 2007 some some

00:30:21,580 --> 00:30:29,350
since 2000 early two thousand nine where

00:30:24,429 --> 00:30:33,250
it really wasn't clear that this drive

00:30:29,350 --> 00:30:35,320
was not just nand and i think that that

00:30:33,250 --> 00:30:39,070
was really a shock because you can see

00:30:35,320 --> 00:30:41,830
right here i have the same level as I

00:30:39,070 --> 00:30:44,890
did for a disk to disk ashes I still

00:30:41,830 --> 00:30:47,260
have a cache and you're like well why is

00:30:44,890 --> 00:30:49,090
the cash there right because because i'm

00:30:47,260 --> 00:30:51,850
writing to an and now I shouldn't need

00:30:49,090 --> 00:30:56,169
to cash well you actually do need a cash

00:30:51,850 --> 00:30:59,169
because unlike what we think of these

00:30:56,169 --> 00:31:01,960
this NAND memory is not sort of like Ram

00:30:59,169 --> 00:31:03,730
it's not like you know dram or you just

00:31:01,960 --> 00:31:06,190
randomly access and just store wherever

00:31:03,730 --> 00:31:10,419
you want and you know you basically the

00:31:06,190 --> 00:31:13,090
nand two to function properly and to

00:31:10,419 --> 00:31:14,350
have a long durability basically wants

00:31:13,090 --> 00:31:17,860
to write in big

00:31:14,350 --> 00:31:22,690
chunks and the chunks are big like 128k

00:31:17,860 --> 00:31:25,419
big right so to do that effectively this

00:31:22,690 --> 00:31:27,070
this Davis you know what I said disk

00:31:25,419 --> 00:31:30,789
cache here it's not really it's a

00:31:27,070 --> 00:31:33,100
staging area because the the the DRAM

00:31:30,789 --> 00:31:35,980
the SSD manufacturers effectively want

00:31:33,100 --> 00:31:38,890
to bundle a bunch of Rights into this

00:31:35,980 --> 00:31:42,220
staging area and then only occasionally

00:31:38,890 --> 00:31:43,990
wipe out an area of of NAND and then

00:31:42,220 --> 00:32:10,210
write those into the block Josh you want

00:31:43,990 --> 00:32:14,110
to say something well yeah the next

00:32:10,210 --> 00:32:16,150
slide is the is the is the is the D Ram

00:32:14,110 --> 00:32:20,169
so let me we're going to get to that so

00:32:16,150 --> 00:32:23,100
so one of the things that um that people

00:32:20,169 --> 00:32:25,330
need to remember here and again this is

00:32:23,100 --> 00:32:27,240
for some reason it took us a long time

00:32:25,330 --> 00:32:29,650
to figure this out it just wasn't

00:32:27,240 --> 00:32:31,679
manufacturers really clear what was

00:32:29,650 --> 00:32:33,610
inside of the thing and some of the

00:32:31,679 --> 00:32:35,860
volatility that we didn't really

00:32:33,610 --> 00:32:37,450
understand I know Greg Smith did a lot

00:32:35,860 --> 00:32:39,100
of work on this a lot of research and

00:32:37,450 --> 00:32:42,610
actually went to a lot of customers that

00:32:39,100 --> 00:32:46,059
had early SSDs and was seeing regularly

00:32:42,610 --> 00:32:48,039
data loss from power failures but then

00:32:46,059 --> 00:32:49,990
sort of had to really dig in to find out

00:32:48,039 --> 00:32:51,520
exactly what was going on because they

00:32:49,990 --> 00:32:53,890
just don't really want to tell you

00:32:51,520 --> 00:32:55,090
they'll tell you that we're non-volatile

00:32:53,890 --> 00:32:56,890
but they don't really want to tell you

00:32:55,090 --> 00:32:59,280
that they're volatile right mean they

00:32:56,890 --> 00:33:01,480
don't really want to tell you that so

00:32:59,280 --> 00:33:05,200
one of the things that you have to

00:33:01,480 --> 00:33:08,530
realize is if you're using an SSD that

00:33:05,200 --> 00:33:10,539
doesn't have a battery here okay you

00:33:08,530 --> 00:33:14,830
still need a battery on the raid

00:33:10,539 --> 00:33:17,770
controller in fact you could argue that

00:33:14,830 --> 00:33:20,679
in some ways in SSD is worse than the

00:33:17,770 --> 00:33:24,010
magnetic case because in the magnetic

00:33:20,679 --> 00:33:25,190
case you can set the disk cache to be

00:33:24,010 --> 00:33:28,910
right through

00:33:25,190 --> 00:33:30,980
and go right to the drive from the raid

00:33:28,910 --> 00:33:34,910
controller without adversely affecting

00:33:30,980 --> 00:33:38,720
the life of the drive okay in this case

00:33:34,910 --> 00:33:40,940
if you have an SSD that does not have a

00:33:38,720 --> 00:33:43,010
battery and you have a raid control you

00:33:40,940 --> 00:33:45,050
put a battery on it and you tell the

00:33:43,010 --> 00:33:47,960
rate and the raid controller will say I

00:33:45,050 --> 00:33:49,790
don't want any cash in here because I

00:33:47,960 --> 00:33:52,370
don't believe I don't believe this level

00:33:49,790 --> 00:33:53,960
because it has no battery all of a

00:33:52,370 --> 00:33:57,410
sudden you're doing a lot of these

00:33:53,960 --> 00:33:59,380
little tiny rights to the SSD and your

00:33:57,410 --> 00:34:01,580
destiny is not going to last as long

00:33:59,380 --> 00:34:03,680
because again the mean time between

00:34:01,580 --> 00:34:05,930
failure and the longevity of these

00:34:03,680 --> 00:34:08,030
drives unlike a magnetic drive which

00:34:05,930 --> 00:34:10,850
will basically write as many times as

00:34:08,030 --> 00:34:13,550
you want effectively and keep spinning

00:34:10,850 --> 00:34:15,170
effectively there's not a known limit of

00:34:13,550 --> 00:34:17,690
course they won't spin forever but

00:34:15,170 --> 00:34:21,410
there's not a no limit the SSDs actually

00:34:17,690 --> 00:34:25,220
have a known life cycle for those read

00:34:21,410 --> 00:34:28,240
write cycles and by disabling the right

00:34:25,220 --> 00:34:30,920
by making this a right through cash and

00:34:28,240 --> 00:34:34,430
effectively disabling the staging

00:34:30,920 --> 00:34:37,130
ability you are really diminishing the

00:34:34,430 --> 00:34:40,760
life of the drive and if you run a smart

00:34:37,130 --> 00:34:47,510
CTL you can see the life of the drive

00:34:40,760 --> 00:34:50,030
going down yes sir so what is the right

00:34:47,510 --> 00:34:52,120
cycle limit for NAND flash um you know

00:34:50,030 --> 00:34:56,210
we've had a lot of discussion about that

00:34:52,120 --> 00:34:58,610
um you know if you're using if that

00:34:56,210 --> 00:35:02,390
drive is you know fifty percent

00:34:58,610 --> 00:35:04,520
saturated effectively forever right

00:35:02,390 --> 00:35:08,270
you're looking at about you know three

00:35:04,520 --> 00:35:12,610
four years for that drive to you know to

00:35:08,270 --> 00:35:12,610
get what would you say jobs

00:35:37,040 --> 00:35:42,600
yeah well I mean I I'm looking the

00:35:41,250 --> 00:35:47,250
basically I'm give the number i'm giving

00:35:42,600 --> 00:35:49,860
use for the intel 320 SSD which is right

00:35:47,250 --> 00:35:53,160
the last generation the 700 series the

00:35:49,860 --> 00:35:56,850
720 s from intel i think they have like

00:35:53,160 --> 00:35:59,880
what is it at 5x longer or they're much

00:35:56,850 --> 00:36:02,460
more durable in terms of write cycles so

00:35:59,880 --> 00:36:10,650
that the enterprise-e version of the

00:36:02,460 --> 00:36:15,440
intel SSD is the 770 plunder yeah to be

00:36:10,650 --> 00:36:15,440
reused yeah yeah

00:36:29,030 --> 00:36:32,030
right

00:37:31,740 --> 00:37:34,740
there

00:38:19,800 --> 00:38:24,880
especially if they're in a cabinet with

00:38:21,910 --> 00:38:28,240
other drives which are all vibrating at

00:38:24,880 --> 00:38:30,220
the same time and then heating as well

00:38:28,240 --> 00:38:32,230
and yeah there's a lot of reasons why

00:38:30,220 --> 00:38:34,930
drive should fail you know but I think

00:38:32,230 --> 00:38:39,310
the real takeaway is that the flash has

00:38:34,930 --> 00:38:41,080
an observable failure a time limit

00:38:39,310 --> 00:38:43,300
whereas magnetic really doesn't have the

00:38:41,080 --> 00:38:45,910
same observable so pretty much I would

00:38:43,300 --> 00:38:48,580
say anybody running an SSD should

00:38:45,910 --> 00:38:50,830
probably be running the smart CTL demon

00:38:48,580 --> 00:38:52,480
which will basically always be land i

00:38:50,830 --> 00:38:55,210
have a blog entry about it on the

00:38:52,480 --> 00:38:58,450
website but it'll always be looking for

00:38:55,210 --> 00:39:00,570
um you know at the health of the drive

00:38:58,450 --> 00:39:03,100
and reporting when the health changes

00:39:00,570 --> 00:39:05,710
and of course you know it's not a

00:39:03,100 --> 00:39:07,630
guarantee but as you know running any

00:39:05,710 --> 00:39:09,520
kind of enterprise workload anytime

00:39:07,630 --> 00:39:11,770
somebody can give me report about how

00:39:09,520 --> 00:39:14,770
healthy my hardware is i'll take it

00:39:11,770 --> 00:39:16,930
right so in every case you're basically

00:39:14,770 --> 00:39:18,370
going to be able to see how that drives

00:39:16,930 --> 00:39:21,010
doing and you're gonna get a report long

00:39:18,370 --> 00:39:22,390
before there's any problem again not

00:39:21,010 --> 00:39:23,740
something you would normally do with

00:39:22,390 --> 00:39:25,120
well you should probably do if your

00:39:23,740 --> 00:39:27,910
magnetic drives as well because they

00:39:25,120 --> 00:39:30,970
will they can start to tell you when it

00:39:27,910 --> 00:39:33,070
has a lot of rereads that it wouldn't

00:39:30,970 --> 00:39:35,170
normally be doing so you should probably

00:39:33,070 --> 00:39:38,410
running that anyway and get reports

00:39:35,170 --> 00:39:41,070
about it you know I have a I have an SSD

00:39:38,410 --> 00:39:44,440
here that I've had for six months and

00:39:41,070 --> 00:39:46,540
you know if I do if I just look at it

00:39:44,440 --> 00:39:50,170
and again this is part of my i have a

00:39:46,540 --> 00:39:51,400
blog entry but actually i should

00:39:50,170 --> 00:39:52,930
probably just pulled the blog edge

00:39:51,400 --> 00:39:55,210
because it would probably give you a

00:39:52,930 --> 00:39:59,350
better a better view of what's going on

00:39:55,210 --> 00:40:04,000
here i believe it's down at the bottom

00:39:59,350 --> 00:40:08,100
here yeah here it is so this is this is

00:40:04,000 --> 00:40:11,260
the smart CTL output for linux ubuntu

00:40:08,100 --> 00:40:15,370
and you can see uh right here it's

00:40:11,260 --> 00:40:19,510
showing yeah i'm sorry my blog is too

00:40:15,370 --> 00:40:23,410
large too yeah i know i'm guilty of that

00:40:19,510 --> 00:40:26,860
there come on where am I yeah so here it

00:40:23,410 --> 00:40:29,490
is so here it's reporting like the

00:40:26,860 --> 00:40:29,490
temperature

00:40:30,050 --> 00:40:34,640
and down here yeah media we're out in

00:40:33,050 --> 00:40:37,280
Decatur and this is actually something

00:40:34,640 --> 00:40:40,130
you see on an SSD that you would not

00:40:37,280 --> 00:40:43,280
normally see in another device in a non

00:40:40,130 --> 00:40:46,220
SSD device and it's basically indicating

00:40:43,280 --> 00:40:48,100
that that the drive is fine you know it

00:40:46,220 --> 00:40:50,870
goes from 0 to 100 and it's currently 0

00:40:48,100 --> 00:40:52,790
so I guess when that gets to be 80 or 90

00:40:50,870 --> 00:40:54,890
you know okay I maybe I need to do

00:40:52,790 --> 00:40:58,040
something but again this has been

00:40:54,890 --> 00:41:00,500
running 24 hours for you know six months

00:40:58,040 --> 00:41:02,630
and it doesn't show anything so I think

00:41:00,500 --> 00:41:05,120
I you know I think you really have to be

00:41:02,630 --> 00:41:08,720
you really have to be cranking on the

00:41:05,120 --> 00:41:10,910
thing you know but again I think I think

00:41:08,720 --> 00:41:13,000
if you think of SSDs and you look at the

00:41:10,910 --> 00:41:15,260
benefits you get in terms of random i/o

00:41:13,000 --> 00:41:18,260
you know it's such a win that it's

00:41:15,260 --> 00:41:20,450
unwilling to take that I think there's

00:41:18,260 --> 00:41:23,120
also a sense that that we might be

00:41:20,450 --> 00:41:24,860
replacing SSDs a little more frequently

00:41:23,120 --> 00:41:27,050
than we would the magnetic drawers but

00:41:24,860 --> 00:41:28,580
not because it's going to fail but

00:41:27,050 --> 00:41:31,400
because the technology is going to be

00:41:28,580 --> 00:41:33,170
improving so rapidly that again you know

00:41:31,400 --> 00:41:36,020
I bought this six or nine months ago I

00:41:33,170 --> 00:41:38,050
would expect within a couple years that

00:41:36,020 --> 00:41:40,700
there'd be even much better stuff out

00:41:38,050 --> 00:41:43,100
and because the speed so good even

00:41:40,700 --> 00:41:45,740
copying from one SSD to another this is

00:41:43,100 --> 00:41:48,860
even faster than I can see I actually

00:41:45,740 --> 00:41:52,430
have you know you can see here I have

00:41:48,860 --> 00:41:55,190
this is an SSD and this is this one down

00:41:52,430 --> 00:41:58,550
here is a is a just a standard you know

00:41:55,190 --> 00:42:02,390
Western Digital 6200 RPM drive and that

00:41:58,550 --> 00:42:04,250
things like a dog compared you know so I

00:42:02,390 --> 00:42:08,150
think this is kind of important again

00:42:04,250 --> 00:42:09,770
not something you know get paid how hard

00:42:08,150 --> 00:42:12,350
it was to really figure all this out

00:42:09,770 --> 00:42:15,080
right but the post Chris people really

00:42:12,350 --> 00:42:18,080
being somebody who group who really care

00:42:15,080 --> 00:42:20,320
about this stuff you know really you're

00:42:18,080 --> 00:42:23,360
working on it I often recommend if your

00:42:20,320 --> 00:42:25,970
specking out hardware please spec it out

00:42:23,360 --> 00:42:29,240
from a vendor who understands database

00:42:25,970 --> 00:42:31,670
workloads you're good people are going

00:42:29,240 --> 00:42:33,020
to understand this you're bad people are

00:42:31,670 --> 00:42:35,270
just going to throw you whatever they

00:42:33,020 --> 00:42:37,400
normally would give you any application

00:42:35,270 --> 00:42:40,600
and that's obviously going to be some

00:42:37,400 --> 00:42:40,600
optimizing yes

00:42:55,650 --> 00:43:01,980
okay so the question is is this normal

00:42:58,320 --> 00:43:04,200
for a failure or would it be what a UPS

00:43:01,980 --> 00:43:06,540
handle this would be the question so a

00:43:04,200 --> 00:43:09,590
UPS in a normal system would handle this

00:43:06,540 --> 00:43:14,660
now of course if the power supply fails

00:43:09,590 --> 00:43:14,660
then the UPS is not going to help me

00:43:18,080 --> 00:43:23,370
right so with the operating system

00:43:20,520 --> 00:43:26,070
kernel crash we might we might be able

00:43:23,370 --> 00:43:29,400
to get by because we might if we can

00:43:26,070 --> 00:43:32,970
reset the system without powering off

00:43:29,400 --> 00:43:35,370
the device like if we have to if we have

00:43:32,970 --> 00:43:37,020
too hard shut it and turn it on to get

00:43:35,370 --> 00:43:38,670
it back up then we're gonna have a

00:43:37,020 --> 00:43:40,980
problem if we're still powering all this

00:43:38,670 --> 00:43:42,570
stuff we just hit the reset button then

00:43:40,980 --> 00:43:45,480
this data is still going to be in the

00:43:42,570 --> 00:43:47,520
caches I think in the stack so you're

00:43:45,480 --> 00:43:50,790
kind of right I mean I'm really talking

00:43:47,520 --> 00:43:52,890
worst case for something like an

00:43:50,790 --> 00:43:56,060
operating like a power supply failure or

00:43:52,890 --> 00:43:59,910
a case where you don't have a UPS uh

00:43:56,060 --> 00:44:03,270
working on you know I personally you

00:43:59,910 --> 00:44:06,960
know as my home system I have a UPS but

00:44:03,270 --> 00:44:08,670
again I'm not guaranteed that the UPS is

00:44:06,960 --> 00:44:10,890
going to get the machine down and enough

00:44:08,670 --> 00:44:12,240
time to for the that it's going to last

00:44:10,890 --> 00:44:15,920
for the duration because if you've ever

00:44:12,240 --> 00:44:20,600
seen cases where the classic the classic

00:44:15,920 --> 00:44:23,820
as much as I love my UPS the classic

00:44:20,600 --> 00:44:26,580
pathological case is that you lose power

00:44:23,820 --> 00:44:29,610
the UPS waits for the power to be down

00:44:26,580 --> 00:44:31,470
for a certain amount of time before

00:44:29,610 --> 00:44:33,450
shutting your system down the power

00:44:31,470 --> 00:44:36,780
comes back on that happens a couple

00:44:33,450 --> 00:44:39,060
times your UPS each time lowers its

00:44:36,780 --> 00:44:41,070
battery and then the whole thing yeah so

00:44:39,060 --> 00:44:42,420
there's all sorts of weird things and

00:44:41,070 --> 00:44:45,600
then there's easier than the problem

00:44:42,420 --> 00:44:48,540
where I've seen cases where you lose

00:44:45,600 --> 00:44:50,130
power it brings the system down but the

00:44:48,540 --> 00:44:53,190
power comes back on the UPS doesn't

00:44:50,130 --> 00:44:56,250
realize that the powers also there's no

00:44:53,190 --> 00:44:57,660
way to restart the server like there's

00:44:56,250 --> 00:45:01,070
like a chicken and egg thing there which

00:44:57,660 --> 00:45:01,070
also is kind of pathological

00:45:06,120 --> 00:45:12,670
right right and and you know it's well

00:45:10,510 --> 00:45:14,170
again you you can get into this chicken

00:45:12,670 --> 00:45:16,090
and egg thing where sometimes you want

00:45:14,170 --> 00:45:17,140
it to go down so that when the power

00:45:16,090 --> 00:45:19,270
comes on you know it's going to come

00:45:17,140 --> 00:45:20,590
back up because as I remember there was

00:45:19,270 --> 00:45:23,730
some and I can't remember the details

00:45:20,590 --> 00:45:29,230
but there was some problem where you

00:45:23,730 --> 00:45:32,170
your UPS shuts the system down but the

00:45:29,230 --> 00:45:33,850
power comes back on and then you you pee

00:45:32,170 --> 00:45:35,830
and then your systems down and it

00:45:33,850 --> 00:45:38,020
doesn't realize it has to actually shut

00:45:35,830 --> 00:45:39,820
off the power to the device and then

00:45:38,020 --> 00:45:41,500
bring it back up again now the power's

00:45:39,820 --> 00:45:44,860
back because it doesn't realize that the

00:45:41,500 --> 00:45:46,120
system is down and i can't remember i

00:45:44,860 --> 00:45:49,060
remember talking to somebody about it

00:45:46,120 --> 00:45:50,980
they're like yeah i guess that would be

00:45:49,060 --> 00:45:53,290
a problem so i I've never been

00:45:50,980 --> 00:45:55,480
completely even happy with an auto

00:45:53,290 --> 00:45:57,700
shutdown because the auto shutdown can

00:45:55,480 --> 00:45:59,650
sometimes be worse than and maybe

00:45:57,700 --> 00:46:01,650
somebody aleni only tell me oh that's

00:45:59,650 --> 00:46:04,300
not true anymore but I remember being

00:46:01,650 --> 00:46:08,980
confused that if the power came back on

00:46:04,300 --> 00:46:10,810
while the wallet was shutting down that

00:46:08,980 --> 00:46:14,950
it wasn't clear the UPS would understand

00:46:10,810 --> 00:46:16,720
that it needs to shut off the power to

00:46:14,950 --> 00:46:19,180
the Machine and then bring it back up

00:46:16,720 --> 00:46:22,000
again I don't I don't really know how

00:46:19,180 --> 00:46:23,890
that's been fixed but you're right I'm

00:46:22,000 --> 00:46:28,450
think I'm always talking pathological

00:46:23,890 --> 00:46:30,310
case yeah so anyway it's kind of

00:46:28,450 --> 00:46:32,740
interesting how that all kind of works

00:46:30,310 --> 00:46:33,850
and and and sort of that staging area

00:46:32,740 --> 00:46:37,680
that's why we're recommending the

00:46:33,850 --> 00:46:37,680
battery back SSDs

00:46:53,920 --> 00:46:58,089
okay so the question is what do we do

00:46:55,660 --> 00:47:02,799
about it do file systems that understand

00:46:58,089 --> 00:47:05,530
flash helped us the only area I've seen

00:47:02,799 --> 00:47:11,260
where file systems are optimized for

00:47:05,530 --> 00:47:12,520
flash is really an operation called and

00:47:11,260 --> 00:47:15,760
Josh you might be able to help me with

00:47:12,520 --> 00:47:18,510
this trim thank you and can you explain

00:47:15,760 --> 00:47:18,510
that to the gentleman

00:48:27,840 --> 00:48:37,279
yeah the new generation of the best

00:48:35,380 --> 00:48:40,390
right right right though the

00:48:37,279 --> 00:48:40,390
microcontroller soon

00:50:27,369 --> 00:50:34,250
yeah i mean basically the right now josh

00:50:31,940 --> 00:50:37,250
is this is this with battery back great

00:50:34,250 --> 00:50:39,079
SSDs or normalizer to you this is with

00:50:37,250 --> 00:50:49,309
battery backup systems or normal STG

00:50:39,079 --> 00:50:52,329
solace but not battery ones because i'm

00:50:49,309 --> 00:50:52,329
saying i would think that

00:51:02,320 --> 00:51:07,610
right no but I was saying that the

00:51:04,520 --> 00:51:08,720
staging area is is battery back so I

00:51:07,610 --> 00:51:10,550
would assume that it would acknowledge

00:51:08,720 --> 00:51:14,030
it very quickly as soon as it gets to

00:51:10,550 --> 00:51:16,250
the staging area right so I guess I'm

00:51:14,030 --> 00:51:18,260
confused you're saying you're saying you

00:51:16,250 --> 00:51:21,890
didn't see a right improvement going to

00:51:18,260 --> 00:51:24,020
an SSD compared to were you comparing it

00:51:21,890 --> 00:51:40,870
to get onto the cache of the of this of

00:51:24,020 --> 00:51:40,870
the magnetic drive yes yes yes yeah I

00:51:43,900 --> 00:51:49,280
have I can run actually the test F sink

00:51:47,780 --> 00:51:51,980
and we do have performance numbers on

00:51:49,280 --> 00:51:53,750
between the two and I did see a pretty

00:51:51,980 --> 00:51:55,640
big difference but a big part of the

00:51:53,750 --> 00:51:57,770
problem is that sometimes we're

00:51:55,640 --> 00:52:00,800
measuring just the time to hear on these

00:51:57,770 --> 00:52:02,570
magnetic drives right which of course is

00:52:00,800 --> 00:52:07,220
going to be about the same as this one

00:52:02,570 --> 00:52:10,010
right but time to hear compared to this

00:52:07,220 --> 00:52:17,630
is is going to be staggering or so I'm

00:52:10,010 --> 00:52:21,080
not pleased excellent good we're going

00:52:17,630 --> 00:52:23,480
to report back in a minute so yeah so

00:52:21,080 --> 00:52:26,330
it's kind of interesting the basic what

00:52:23,480 --> 00:52:27,950
we have found is that it's kind of

00:52:26,330 --> 00:52:29,930
related to what Josh said if you're

00:52:27,950 --> 00:52:32,720
doing sequential reads or sequential

00:52:29,930 --> 00:52:35,320
writes to these things in big chunks

00:52:32,720 --> 00:52:39,500
it's about the same so if you're doing a

00:52:35,320 --> 00:52:41,390
long right to a magnetic disk again it's

00:52:39,500 --> 00:52:44,390
going to just spew it all across that

00:52:41,390 --> 00:52:46,730
track and and and and that's pretty much

00:52:44,390 --> 00:52:51,560
as fast as it says d is going to do it

00:52:46,730 --> 00:52:53,510
all right we're and the same thing with

00:52:51,560 --> 00:52:55,610
reading again if you're reading a whole

00:52:53,510 --> 00:52:58,340
bunch of sequential data think think

00:52:55,610 --> 00:53:01,370
video streaming okay thinking of

00:52:58,340 --> 00:53:04,700
streaming like stick with the magnetic

00:53:01,370 --> 00:53:06,110
disk you need big ones and you're not

00:53:04,700 --> 00:53:08,270
doing a lot of random i/o and you're

00:53:06,110 --> 00:53:10,370
just like saying go write this one gig

00:53:08,270 --> 00:53:10,670
onto this Drive will go right this one

00:53:10,370 --> 00:53:13,250
gate

00:53:10,670 --> 00:53:15,080
misty or read one gig from you it's just

00:53:13,250 --> 00:53:17,300
it's not that big a difference yeah it's

00:53:15,080 --> 00:53:19,220
slightly different but it said it's not

00:53:17,300 --> 00:53:21,350
going to knock your socks off right

00:53:19,220 --> 00:53:26,030
where you really see a difference is

00:53:21,350 --> 00:53:28,010
things like random reads okay where

00:53:26,030 --> 00:53:30,740
you're basically randomly pulling stuff

00:53:28,010 --> 00:53:31,970
off the SSD vs a magnetic disk that's

00:53:30,740 --> 00:53:38,300
where you're going to see your big

00:53:31,970 --> 00:53:43,340
you're big with numbers yet no okay okay

00:53:38,300 --> 00:53:47,990
so it could be let me see if I'm still

00:53:43,340 --> 00:53:54,440
here hold on i'm still on like I'm on

00:53:47,990 --> 00:53:57,190
the i'm on the hotel wireless yes okay

00:53:54,440 --> 00:54:01,220
so um one more thing we should so again

00:53:57,190 --> 00:54:04,220
SSDs are great for random read random

00:54:01,220 --> 00:54:20,030
writes and primarily random reads I've

00:54:04,220 --> 00:54:21,830
heard not as much random writes right so

00:54:20,030 --> 00:54:24,770
I mean the ideal case would be to have

00:54:21,830 --> 00:54:25,850
your heap tables well i'm not sure if

00:54:24,770 --> 00:54:28,850
ideal case because you're going to do a

00:54:25,850 --> 00:54:30,250
lot of random reads to your heaps okay

00:54:28,850 --> 00:54:33,080
but if you're doing a lot of sequential

00:54:30,250 --> 00:54:34,220
reads from tables put them on magnetic

00:54:33,080 --> 00:54:35,990
and then when you're doing random stuff

00:54:34,220 --> 00:54:39,260
it's going to do a lot of index access

00:54:35,990 --> 00:54:41,570
put it on the SSDs ideally I'd love to

00:54:39,260 --> 00:54:44,300
say put your tables on the magnetic and

00:54:41,570 --> 00:54:45,890
your and your indexes when SSDs but the

00:54:44,300 --> 00:54:47,570
problem is your indexes are going to do

00:54:45,890 --> 00:54:50,030
a whole lot of random lookups into the

00:54:47,570 --> 00:54:52,640
heap and your tables and that's going to

00:54:50,030 --> 00:54:54,200
generate a lot of random i/o so yeah it

00:54:52,640 --> 00:54:57,040
would be I wish I had a better answer

00:54:54,200 --> 00:54:57,040
for that one yeah

00:55:00,730 --> 00:55:03,730
exactly

00:55:50,990 --> 00:55:55,549
yeah instead of four or higher

00:56:16,960 --> 00:56:23,900
yep and we do allow you to specify the

00:56:20,690 --> 00:56:26,990
random page cost per table space so a

00:56:23,900 --> 00:56:28,640
lot of people are now if they've got if

00:56:26,990 --> 00:56:31,099
they got their data directory spread

00:56:28,640 --> 00:56:33,680
across multiple tablespaces they can now

00:56:31,099 --> 00:56:35,540
put that I mean you know you sort of

00:56:33,680 --> 00:56:39,890
talked about what people did in the file

00:56:35,540 --> 00:56:42,080
system for ssds the only thing we had to

00:56:39,890 --> 00:56:44,720
do for ssds which is pretty astonishing

00:56:42,080 --> 00:56:46,880
was to allow random page costs to be set

00:56:44,720 --> 00:56:48,680
per table space that's it we don't have

00:56:46,880 --> 00:56:51,070
anything else we don't we can't think of

00:56:48,680 --> 00:56:53,330
anything else at least that would really

00:56:51,070 --> 00:56:56,090
materially impact what's going on we

00:56:53,330 --> 00:56:58,670
already had random page costs we we did

00:56:56,090 --> 00:57:01,940
not have a mechanism to set to have

00:56:58,670 --> 00:57:05,359
settings / tablespace we added that a

00:57:01,940 --> 00:57:07,780
couple years ago boom we're done so it's

00:57:05,359 --> 00:57:11,270
kind of neat how that really worked out

00:57:07,780 --> 00:57:12,380
and yeah we've been we've been really

00:57:11,270 --> 00:57:14,750
kind of happy with it that's a great

00:57:12,380 --> 00:57:16,730
example where you're talking your number

00:57:14,750 --> 00:57:19,640
your your random page course is going to

00:57:16,730 --> 00:57:25,640
go down and therefore that that that

00:57:19,640 --> 00:57:27,230
query or that list that you saw in the

00:57:25,640 --> 00:57:28,849
previous presentation that have the

00:57:27,230 --> 00:57:31,220
colors and talked about the breaking

00:57:28,849 --> 00:57:33,530
point for various things is going to

00:57:31,220 --> 00:57:35,359
change as you change random page costs

00:57:33,530 --> 00:57:36,980
yeah I didn't cover that in that

00:57:35,359 --> 00:57:38,570
presentation it's just sort of out of

00:57:36,980 --> 00:57:41,030
the genre of what we're talking about

00:57:38,570 --> 00:57:43,280
but of course yeah that those color bars

00:57:41,030 --> 00:57:48,440
are going to move around as you change

00:57:43,280 --> 00:57:53,119
those numbers other questions we're good

00:57:48,440 --> 00:57:56,900
good um the final one which is I think

00:57:53,119 --> 00:57:59,690
Josh's favorite d RAM storage this is

00:57:56,900 --> 00:58:03,510
fusion-io basically fusion I was kind of

00:57:59,690 --> 00:58:05,400
a mixture of DRAM and

00:58:03,510 --> 00:58:09,090
and and a whole bunch of other things so

00:58:05,400 --> 00:58:12,270
it's not all dear am but the point is

00:58:09,090 --> 00:58:16,890
that it has a large component that is

00:58:12,270 --> 00:58:29,370
effectively just dram or just very fast

00:58:16,890 --> 00:58:30,900
rate yes that's surprising I guess we're

00:58:29,370 --> 00:58:32,610
working on I know the commit fest is on

00:58:30,900 --> 00:58:36,210
the 15 so i guess they wanted to put it

00:58:32,610 --> 00:58:37,950
out oooo i remember because i couldn't

00:58:36,210 --> 00:58:40,200
get I was going to put something in

00:58:37,950 --> 00:58:42,300
where's that that was beta 1 no never

00:58:40,200 --> 00:58:44,850
mind everyone I was going to do some

00:58:42,300 --> 00:58:48,180
with PG upgrade but I did it so it's

00:58:44,850 --> 00:58:50,340
something else interesting ok so um the

00:58:48,180 --> 00:58:52,230
important thing here is that you have

00:58:50,340 --> 00:58:54,960
basically DRAM which of course is very

00:58:52,230 --> 00:58:57,810
fast doesn't have the staging

00:58:54,960 --> 00:59:00,420
requirements right 128k block

00:58:57,810 --> 00:59:01,680
requirement it's very fast but

00:59:00,420 --> 00:59:03,960
effectively you have to have a battery

00:59:01,680 --> 00:59:05,730
on it right just you're not going to get

00:59:03,960 --> 00:59:07,230
one without a battery whereas with SSD

00:59:05,730 --> 00:59:10,410
some of them have battery some of them

00:59:07,230 --> 00:59:12,210
don't in fact you have to make sure you

00:59:10,410 --> 00:59:14,280
see the battery if you're running an SSD

00:59:12,210 --> 00:59:16,770
here you have to have the battery just

00:59:14,280 --> 00:59:18,540
has to be there it would be useless so

00:59:16,770 --> 00:59:20,940
effectively you got the battery here

00:59:18,540 --> 00:59:22,410
whether you need a battery it doesn't

00:59:20,940 --> 00:59:25,770
really have a staging area in the same

00:59:22,410 --> 00:59:28,140
way do you need a battery on your raid

00:59:25,770 --> 00:59:30,690
controller if you have this I don't know

00:59:28,140 --> 00:59:33,720
I'm really I'm kind of unclear on that

00:59:30,690 --> 00:59:38,370
one whether it's worth having you know

00:59:33,720 --> 00:59:43,350
additional battery up there I I can go

00:59:38,370 --> 00:59:46,470
either way basically so let's get into

00:59:43,350 --> 00:59:47,880
some details I just to kind of solidify

00:59:46,470 --> 00:59:49,620
what we've talked about again is a

00:59:47,880 --> 00:59:52,110
little bit that's going to be you know

00:59:49,620 --> 00:59:54,720
going to be really hashing some of the

00:59:52,110 --> 00:59:57,150
stuff we've done and again I wrote this

00:59:54,720 --> 00:59:58,560
presentation because I just I needed to

00:59:57,150 --> 01:00:00,540
communicate this to people and it was

00:59:58,560 --> 01:00:02,130
not clear unless I had diagrams and

01:00:00,540 --> 01:00:03,990
really clear stuff so I'm trying to be

01:00:02,130 --> 01:00:05,970
really clear about what we're doing um

01:00:03,990 --> 01:00:07,350
and there's a lot of text on here again

01:00:05,970 --> 01:00:09,870
so you can show it to people and you can

01:00:07,350 --> 01:00:11,940
say here this is what I want so right

01:00:09,870 --> 01:00:14,190
back verse right through cash again a

01:00:11,940 --> 01:00:15,650
right back would be its acknowledging it

01:00:14,190 --> 01:00:19,250
right away right through cash is good

01:00:15,650 --> 01:00:21,080
send it down to lower layers caching

01:00:19,250 --> 01:00:25,190
layers again you can have it on the raid

01:00:21,080 --> 01:00:27,800
controller you can control the draw the

01:00:25,190 --> 01:00:30,980
continued can control the cache behavior

01:00:27,800 --> 01:00:32,480
of the storage there's actually some

01:00:30,980 --> 01:00:34,280
operating system commands that we

01:00:32,480 --> 01:00:36,380
actually do have in the postgres docks

01:00:34,280 --> 01:00:38,780
which tells you under linux under

01:00:36,380 --> 01:00:42,200
windows under freebsd how do i turn off

01:00:38,780 --> 01:00:43,850
the drive cash how do i make it right

01:00:42,200 --> 01:00:46,660
through instead of right back and we

01:00:43,850 --> 01:00:50,120
actually have those commands for you

01:00:46,660 --> 01:00:51,590
typically enterprise or SAS storage is

01:00:50,120 --> 01:00:53,810
going to default to right through when

01:00:51,590 --> 01:00:56,090
you get it from the manufacturer SATA

01:00:53,810 --> 01:00:58,780
consumer is going to be right back

01:00:56,090 --> 01:01:03,170
because again they're not as concerned

01:00:58,780 --> 01:01:05,480
you know about about data volatility

01:01:03,170 --> 01:01:10,640
because again they're just there were

01:01:05,480 --> 01:01:13,490
more worried about throughput right HB

01:01:10,640 --> 01:01:15,020
raid caching again you can usually go

01:01:13,490 --> 01:01:19,070
into the firmware of the raid controller

01:01:15,020 --> 01:01:21,440
and can set this up you know you can

01:01:19,070 --> 01:01:25,160
make it Mon volatile if you want and

01:01:21,440 --> 01:01:27,230
then you know it will work fine in terms

01:01:25,160 --> 01:01:29,840
of magnetic disks the more spindles the

01:01:27,230 --> 01:01:32,030
better again when we used to do in the

01:01:29,840 --> 01:01:34,250
90s we get a lot of really tiny drives

01:01:32,030 --> 01:01:36,350
like it would be smaller than the drives

01:01:34,250 --> 01:01:37,850
that we'd use on the desktops because we

01:01:36,350 --> 01:01:40,640
wanted all these spindles to really

01:01:37,850 --> 01:01:44,240
allow us to parallel a lot of the

01:01:40,640 --> 01:01:46,640
operations that's going on I'm sorry I

01:01:44,240 --> 01:01:48,770
actually hit the wrong button please

01:01:46,640 --> 01:01:51,080
don't use raid 5 6 it's way too slow for

01:01:48,770 --> 01:01:53,030
rights works wonderful for a file system

01:01:51,080 --> 01:01:55,520
but we're not running a fall system here

01:01:53,030 --> 01:01:57,590
okay you really want to unless you're

01:01:55,520 --> 01:02:00,740
doing a lot of read a lot of reeds and

01:01:57,590 --> 01:02:05,090
your cash constrained please use raid 10

01:02:00,740 --> 01:02:09,200
or or at least raid 1 so that you're

01:02:05,090 --> 01:02:10,970
effectively not doing double writes

01:02:09,200 --> 01:02:12,500
every time because normally with raid 5

01:02:10,970 --> 01:02:14,240
6 you've got to actually write the two

01:02:12,500 --> 01:02:18,160
drives before you can acknowledge it

01:02:14,240 --> 01:02:18,160
this is what we don't want to do right

01:02:19,420 --> 01:02:26,120
usually SAS is designed for enterprise

01:02:22,910 --> 01:02:27,980
workloads again for these reasons I used

01:02:26,120 --> 01:02:29,140
to think it was kind of hooey but I've

01:02:27,980 --> 01:02:30,760
read some interesting thing

01:02:29,140 --> 01:02:33,190
from seagate and Intel some of the white

01:02:30,760 --> 01:02:35,980
papers that talk about what they have to

01:02:33,190 --> 01:02:38,470
do to make an enterprise dr nano prize

01:02:35,980 --> 01:02:40,170
drive and effectively they're dealing

01:02:38,470 --> 01:02:43,420
with the kind of things we talked about

01:02:40,170 --> 01:02:45,339
24-hour operation heat vibration again

01:02:43,420 --> 01:02:46,450
very common in enterprise workloads not

01:02:45,339 --> 01:02:49,119
common when it's sitting under

01:02:46,450 --> 01:02:51,849
somebody's desk the big takeaway I got

01:02:49,119 --> 01:02:56,500
from this and again it's really up to

01:02:51,849 --> 01:02:58,960
you but the this the consumer drives are

01:02:56,500 --> 01:03:01,029
really designed to hit a price point you

01:02:58,960 --> 01:03:04,619
know you go on Amazon you see how much

01:03:01,029 --> 01:03:07,539
the drives cost and you buy one honestly

01:03:04,619 --> 01:03:09,339
usually the enterprise-e drives are

01:03:07,539 --> 01:03:19,210
really designed for reliability and they

01:03:09,339 --> 01:03:22,269
put a lot of money into that contribute

01:03:19,210 --> 01:03:24,519
yes the doubts over there but I think it

01:03:22,269 --> 01:03:29,500
wasn't it wasn't this release we did it

01:03:24,519 --> 01:03:32,440
with some really oh ok so again the

01:03:29,500 --> 01:03:34,059
enterprise stuff is much more put a lot

01:03:32,440 --> 01:03:37,329
of money into it in terms of like what

01:03:34,059 --> 01:03:39,339
what they use to make the servers and

01:03:37,329 --> 01:03:45,160
the bearings and there's a lot of crazy

01:03:39,339 --> 01:03:48,700
stuff there SSDs again nan versus flash

01:03:45,160 --> 01:03:50,589
staging area such as the cash be careful

01:03:48,700 --> 01:03:52,539
of running the SSD in right through mode

01:03:50,589 --> 01:03:56,109
because it can cause a problem and

01:03:52,539 --> 01:03:59,259
here's a really good blog entry again by

01:03:56,109 --> 01:04:02,440
Greg Smith talking about the use of

01:03:59,259 --> 01:04:06,490
until 320 SSDs and well it was the first

01:04:02,440 --> 01:04:09,460
sort of affordable SSD that we were

01:04:06,490 --> 01:04:11,289
ready to recommend again because it is a

01:04:09,460 --> 01:04:14,069
battery back one and actually is the one

01:04:11,289 --> 01:04:14,069
that I use as well

01:04:19,470 --> 01:04:32,140
um yeah that's exactly right because I

01:04:27,420 --> 01:04:34,930
assume yes because for a magnetic disk

01:04:32,140 --> 01:04:38,740
it has to be right through and there's

01:04:34,930 --> 01:04:41,050
no disadvantage in terms of dr lifetime

01:04:38,740 --> 01:04:44,470
having it right through and i assume

01:04:41,050 --> 01:04:50,170
there is no battery on the magnetic okay

01:04:44,470 --> 01:04:54,340
for a SSD it I assume there's a battery

01:04:50,170 --> 01:04:56,080
and I assume it's right back ok so the

01:04:54,340 --> 01:04:58,900
pathological case the cases you don't

01:04:56,080 --> 01:05:03,580
want or a magnetic without a battery

01:04:58,900 --> 01:05:06,790
that's right back and an SSD that's

01:05:03,580 --> 01:05:07,870
right through in any case because you're

01:05:06,790 --> 01:05:10,090
going to you're going to wear out that

01:05:07,870 --> 01:05:12,790
SSD much quicker as this gentleman was

01:05:10,090 --> 01:05:14,770
mentioning right so again it's kind of a

01:05:12,790 --> 01:05:16,420
weird case we're turning where you're

01:05:14,770 --> 01:05:17,650
you're actually doing ops of things

01:05:16,420 --> 01:05:20,350
that's great point I hadn't really

01:05:17,650 --> 01:05:22,570
thought of that but it's definitely a

01:05:20,350 --> 01:05:24,310
problem yeah and I don't think it's

01:05:22,570 --> 01:05:28,330
clear in this presentation is it should

01:05:24,310 --> 01:05:30,700
be so i'll try and improve that XFS or

01:05:28,330 --> 01:05:33,580
ext4 we really like those we don't like

01:05:30,700 --> 01:05:35,890
a xt3 very much it has to do with the

01:05:33,580 --> 01:05:37,660
way it does F sink and basically orders

01:05:35,890 --> 01:05:41,550
the F sinks every ext3 doesn't do it too

01:05:37,660 --> 01:05:46,600
well will even take ext2 / txt 3 so

01:05:41,550 --> 01:05:47,950
what's this oh we have we do not have

01:05:46,600 --> 01:05:50,320
enough people running that to know I

01:05:47,950 --> 01:05:52,180
haven't I haven't seen yeah I haven't

01:05:50,320 --> 01:05:54,700
seen yeah I haven't seen enough enough

01:05:52,180 --> 01:05:56,980
stuff there some people move the X log

01:05:54,700 --> 01:05:58,450
directory to another Drive you can try

01:05:56,980 --> 01:06:01,090
turning off a time if you think that's

01:05:58,450 --> 01:06:04,540
going to help I haven't actually tested

01:06:01,090 --> 01:06:06,550
that one recently as years ago I battery

01:06:04,540 --> 01:06:08,920
back unit just to kind of redo that

01:06:06,550 --> 01:06:11,560
again verify that the batter you also

01:06:08,920 --> 01:06:13,750
called a supercapacitor physically there

01:06:11,560 --> 01:06:17,350
on the drives you should see it when you

01:06:13,750 --> 01:06:19,540
get it if you can't see it look at the

01:06:17,350 --> 01:06:21,670
manufacturer's specs if they don't

01:06:19,540 --> 01:06:23,260
mention it it isn't there if they have

01:06:21,670 --> 01:06:24,670
it they're going to be touting it it's

01:06:23,260 --> 01:06:27,700
not there they're not going to mention

01:06:24,670 --> 01:06:29,170
it be careful they just make our job

01:06:27,700 --> 01:06:30,960
really hard I mean it's just really not

01:06:29,170 --> 01:06:32,940
easy to do what we're doing here

01:06:30,960 --> 01:06:34,590
again the battery might only last for a

01:06:32,940 --> 01:06:36,330
limited amount of time although some of

01:06:34,590 --> 01:06:40,920
the newer ones have a flash little right

01:06:36,330 --> 01:06:44,460
to if the battery goes dead it will fall

01:06:40,920 --> 01:06:46,950
back to right through mode now right

01:06:44,460 --> 01:06:48,750
back right through mode so one of the

01:06:46,950 --> 01:06:50,640
interesting things about the battery

01:06:48,750 --> 01:06:52,860
ones if the battery goes bad it'll

01:06:50,640 --> 01:06:55,050
actually change the mode of the cash

01:06:52,860 --> 01:06:57,120
because it no longer realizes it's

01:06:55,050 --> 01:06:58,290
durable and it will then fall back to

01:06:57,120 --> 01:07:00,780
right through so if your system over

01:06:58,290 --> 01:07:02,280
gets slow all of a sudden it might not

01:07:00,780 --> 01:07:04,430
be obvious look at your kernel it's

01:07:02,280 --> 01:07:06,630
going to tell you hey something's wrong

01:07:04,430 --> 01:07:08,610
you should be monitoring it and you

01:07:06,630 --> 01:07:10,080
should have replacements on hand because

01:07:08,610 --> 01:07:12,060
you don't want to wait a day while your

01:07:10,080 --> 01:07:15,900
system is crawling to put a battery in

01:07:12,060 --> 01:07:19,500
there or considerably more than the day

01:07:15,900 --> 01:07:21,780
particularly it's a weekend right so

01:07:19,500 --> 01:07:24,180
that's actually an older adaptec

01:07:21,780 --> 01:07:27,240
controller you can see the battery down

01:07:24,180 --> 01:07:28,830
here in fact that is the battery you can

01:07:27,240 --> 01:07:30,870
even see the wires and it's just

01:07:28,830 --> 01:07:35,180
basically some you know some lithium ion

01:07:30,870 --> 01:07:35,180
battery steve says right there

01:07:44,589 --> 01:07:49,819
well particularly because I think you

01:07:46,549 --> 01:07:51,530
have to get into bios and put the cash

01:07:49,819 --> 01:07:53,990
back I don't really even know if the

01:07:51,530 --> 01:07:55,730
bios is smart enough to you know what I

01:07:53,990 --> 01:07:57,260
mean like once it falls back I'm not

01:07:55,730 --> 01:07:59,119
sure how you get it back if you have to

01:07:57,260 --> 01:08:01,339
actually go in and change it or does it

01:07:59,119 --> 01:08:05,349
know hey I have a battery now it will

01:08:01,339 --> 01:08:07,609
flip back to the right back mode I don't

01:08:05,349 --> 01:08:12,980
you would yeah well there is oh actually

01:08:07,609 --> 01:08:14,510
you're right there is the lsi there's

01:08:12,980 --> 01:08:17,810
little yeah there's little command

01:08:14,510 --> 01:08:19,699
controller you know megaraid control or

01:08:17,810 --> 01:08:28,370
measured control something that will go

01:08:19,699 --> 01:08:31,100
in and let's change it okay thank you so

01:08:28,370 --> 01:08:33,920
network network attached storage again

01:08:31,100 --> 01:08:35,390
nothing matter with this works fine just

01:08:33,920 --> 01:08:39,140
be aware that you're using a shared

01:08:35,390 --> 01:08:41,179
resource here okay shared resource again

01:08:39,140 --> 01:08:42,710
you're going to have contention again

01:08:41,179 --> 01:08:44,810
nothing I matter with it just you know

01:08:42,710 --> 01:08:47,600
wonderful for administration and so

01:08:44,810 --> 01:08:50,960
forth but but it is can it is you are

01:08:47,600 --> 01:08:52,850
contending together so don't be

01:08:50,960 --> 01:08:54,380
surprised if that's a problem again for

01:08:52,850 --> 01:08:56,960
most systems they're probably not high

01:08:54,380 --> 01:08:58,640
volume network attached storage is fine

01:08:56,960 --> 01:09:01,009
but if you are really concerned about

01:08:58,640 --> 01:09:02,179
performance most people using direct

01:09:01,009 --> 01:09:04,279
attached storage because again it

01:09:02,179 --> 01:09:05,810
eliminates that possible contention not

01:09:04,279 --> 01:09:10,910
only in a network but in the network

01:09:05,810 --> 01:09:13,250
attached storage device Ram the more the

01:09:10,910 --> 01:09:15,949
better right again this is our second

01:09:13,250 --> 01:09:17,480
part of the triangle here if you can get

01:09:15,949 --> 01:09:20,690
five minutes you're working set in there

01:09:17,480 --> 01:09:23,569
that would be wonderful always use our

01:09:20,690 --> 01:09:25,520
ECC ram there's no reason not to the

01:09:23,569 --> 01:09:27,460
larger ram the more RAM you have your

01:09:25,520 --> 01:09:29,870
system the more problem for failures

01:09:27,460 --> 01:09:31,759
there's all sorts of ways it can get

01:09:29,870 --> 01:09:33,199
corrupted the more reliable your

01:09:31,759 --> 01:09:37,460
hardware is obviously the more reliable

01:09:33,199 --> 01:09:39,980
your database is cpus yes they're

01:09:37,460 --> 01:09:42,620
important postgres does not allow for

01:09:39,980 --> 01:09:45,770
parallel query at least not yet I know

01:09:42,620 --> 01:09:47,660
we have to work on that there are some

01:09:45,770 --> 01:09:48,949
cases where you will use a lot of cpu

01:09:47,660 --> 01:09:51,949
for particularly if you're using a lot

01:09:48,949 --> 01:09:53,630
of server-side functions G is processing

01:09:51,949 --> 01:09:55,699
a lot of very complex index lookups

01:09:53,630 --> 01:09:56,000
those are going to use a lot of CPU but

01:09:55,699 --> 01:09:59,450
the

01:09:56,000 --> 01:10:02,060
animal workload is not and again the

01:09:59,450 --> 01:10:04,340
only case where you with the CPU becomes

01:10:02,060 --> 01:10:07,790
a bottleneck consider it a win I know it

01:10:04,340 --> 01:10:09,920
sounds insane but my CPUs are fully busy

01:10:07,790 --> 01:10:11,720
I am happy what that means is I'm not

01:10:09,920 --> 01:10:14,240
waiting on Io it means probably

01:10:11,720 --> 01:10:16,040
everything's in memory I'm now cooking

01:10:14,240 --> 01:10:17,990
as fast as i can and then you start to

01:10:16,040 --> 01:10:19,730
worry about getting faster CPUs because

01:10:17,990 --> 01:10:22,280
you've done your homework under that

01:10:19,730 --> 01:10:27,590
stack to get yourself to that point so

01:10:22,280 --> 01:10:30,140
that's that's a win and finally when

01:10:27,590 --> 01:10:31,580
selecting hardware these just because

01:10:30,140 --> 01:10:33,860
something has the same interface doesn't

01:10:31,580 --> 01:10:35,450
make it the same I know it's really hard

01:10:33,860 --> 01:10:37,370
to tell you look at two drives they look

01:10:35,450 --> 01:10:39,530
the same took the two memory chips you

01:10:37,370 --> 01:10:41,840
look the same but you gotta really do

01:10:39,530 --> 01:10:43,090
your homework because again just because

01:10:41,840 --> 01:10:46,820
something has the same interface

01:10:43,090 --> 01:10:49,190
steering wheel and a pedal and a quitar

01:10:46,820 --> 01:10:51,260
started doesn't mean they're exactly the

01:10:49,190 --> 01:10:53,600
same and it's really hard sometimes to

01:10:51,260 --> 01:10:55,520
figure quality stuff versus stuff that's

01:10:53,600 --> 01:10:57,410
just thrown together but if you want to

01:10:55,520 --> 01:10:59,660
reliable database you have to have

01:10:57,410 --> 01:11:03,050
reliable hardware as simple as that and

01:10:59,660 --> 01:11:05,780
that's it so thanks very much I know you

01:11:03,050 --> 01:11:08,050
got to go I appreciate the questions

01:11:05,780 --> 01:11:14,540
that we had some good discussions sure

01:11:08,050 --> 01:11:17,020
any other questions all right we're good

01:11:14,540 --> 01:11:17,020
thanks guys

01:11:21,850 --> 01:11:29,020
past thats everywhere this is the way to

01:11:25,330 --> 01:11:30,940
better utilize all your resources and it

01:11:29,020 --> 01:11:34,000
makes managing all your resources pretty

01:11:30,940 --> 01:11:38,860
easy all of the innovation is happening

01:11:34,000 --> 01:11:42,220
in open source the collaborative nature

01:11:38,860 --> 01:11:44,890
and of the you know of the community and

01:11:42,220 --> 01:11:46,780
the speed at which these are these you

01:11:44,890 --> 01:11:48,880
know these these deficiencies these bugs

01:11:46,780 --> 01:11:51,220
are getting discovered and then fixed is

01:11:48,880 --> 01:11:52,930
it I think that really shows the power

01:11:51,220 --> 01:11:55,690
of the you know of the open source

01:11:52,930 --> 01:11:57,840
community it is global and it's

01:11:55,690 --> 01:12:01,390
definitely because of the users

01:11:57,840 --> 01:12:07,270
community people are extremely friendly

01:12:01,390 --> 01:12:09,070
and always ready to help if you go on

01:12:07,270 --> 01:12:11,260
tire see any day you'll see these guys

01:12:09,070 --> 01:12:13,930
helping each other out and they're all

01:12:11,260 --> 01:12:15,610
doing it like in a selfless manner the

01:12:13,930 --> 01:12:18,600
product is transparent for everyone

01:12:15,610 --> 01:12:21,550
everyone can look at the code base

01:12:18,600 --> 01:12:23,290
everyone can see how close darkest is

01:12:21,550 --> 01:12:29,140
being built nothing nothing is

01:12:23,290 --> 01:12:31,810
proprietary everything is open in many

01:12:29,140 --> 01:12:36,010
ways it's absolutely vital to the the

01:12:31,810 --> 01:12:39,760
unborn health cloudstack the most

01:12:36,010 --> 01:12:43,590
exciting event in recent memory for me

01:12:39,760 --> 01:12:46,320
was our first developer boot camp

01:12:43,590 --> 01:12:48,960
and our call gave people like maybe two

01:12:46,320 --> 01:12:52,920
weeks notice to come attend I was

01:12:48,960 --> 01:12:57,090
expecting 25 or 30 people so we ended up

01:12:52,920 --> 01:12:59,940
with 87 people and had to go get more

01:12:57,090 --> 01:13:02,460
chairs into the room twice everything

01:12:59,940 --> 01:13:05,700
within cloud computing is commodity and

01:13:02,460 --> 01:13:08,790
is open source and so I don't think that

01:13:05,700 --> 01:13:10,530
you will you'll see anywhere where open

01:13:08,790 --> 01:13:13,560
source is not pervasive in cloud

01:13:10,530 --> 01:13:16,290
computing and so i think it's i think

01:13:13,560 --> 01:13:17,640
it's an assumption i think when you talk

01:13:16,290 --> 01:13:18,750
about cloud computing you're really

01:13:17,640 --> 01:13:24,300
talking about open source cloud

01:13:18,750 --> 01:13:27,450
computing cloud sac is a robust solution

01:13:24,300 --> 01:13:29,850
for large deployments you have dozens of

01:13:27,450 --> 01:13:33,750
data centers and thousands of servers in

01:13:29,850 --> 01:13:36,420
each data centers these hardware is

01:13:33,750 --> 01:13:39,900
going to fail and CloudStack is designed

01:13:36,420 --> 01:13:42,630
to handle number one that mass scale

01:13:39,900 --> 01:13:45,780
number two it's designed to handle the

01:13:42,630 --> 01:13:48,330
failure that inevitably happens in large

01:13:45,780 --> 01:13:51,870
deployments started working on college

01:13:48,330 --> 01:13:55,230
attack over four years ago and it was

01:13:51,870 --> 01:13:57,900
the original set of people working on it

01:13:55,230 --> 01:14:02,010
and a background of delivering software

01:13:57,900 --> 01:14:06,240
telcos and service providers lots of QA

01:14:02,010 --> 01:14:09,870
lots of users actually using it high

01:14:06,240 --> 01:14:12,930
availability is a key feature multiple

01:14:09,870 --> 01:14:15,120
hypervisors support different network

01:14:12,930 --> 01:14:18,120
models you can pick up what I was to see

01:14:15,120 --> 01:14:19,890
better while step management server can

01:14:18,120 --> 01:14:23,580
be deployed in different physical

01:14:19,890 --> 01:14:25,230
machines it definitely has a huge

01:14:23,580 --> 01:14:30,240
footprint it's being deployed everywhere

01:14:25,230 --> 01:14:32,820
there's a major movie studio that they

01:14:30,240 --> 01:14:36,120
were using cloudstack they were using it

01:14:32,820 --> 01:14:38,100
to transcode video and i thought that

01:14:36,120 --> 01:14:39,720
was terribly fascinating what i found

01:14:38,100 --> 01:14:42,990
more fascinating is what they did during

01:14:39,720 --> 01:14:45,780
lunch where they would spin up you know

01:14:42,990 --> 01:14:47,160
50 or 60 game servers then as soon as

01:14:45,780 --> 01:14:47,690
lunch was over they would destroy all

01:14:47,160 --> 01:14:49,870
fiesta

01:14:47,690 --> 01:14:53,270
sis and go back to doing real work

01:14:49,870 --> 01:14:54,770
cloudstack is vast it touches so many

01:14:53,270 --> 01:14:56,660
different aspects and there's no one

01:14:54,770 --> 01:14:59,330
person that's kind of like a master of

01:14:56,660 --> 01:15:03,080
all those realms I think clouds stack as

01:14:59,330 --> 01:15:05,330
a project is going to be one of the

01:15:03,080 --> 01:15:09,380
leaders simply because it's some of the

01:15:05,330 --> 01:15:14,840
most feature folan and and robust

01:15:09,380 --> 01:15:17,740
platforms out they were I don't senior

01:15:14,840 --> 01:15:17,740
living for the clouds dag

01:16:01,320 --> 01:16:03,380
you

01:16:06,600 --> 01:16:11,380
when we created asterisk over a decade

01:16:09,310 --> 01:16:13,630
ago we could not have imagined that

01:16:11,380 --> 01:16:15,820
asterisk would not only become the most

01:16:13,630 --> 01:16:17,980
widely adopted open source communication

01:16:15,820 --> 01:16:19,990
software on the planet but that it would

01:16:17,980 --> 01:16:22,510
impact the entire industry in the way

01:16:19,990 --> 01:16:24,490
that it has today asterisk has found its

01:16:22,510 --> 01:16:27,130
way into more than 170 countries and

01:16:24,490 --> 01:16:29,080
virtually every fortune 1000 company the

01:16:27,130 --> 01:16:31,150
success of asterisk has enabled a

01:16:29,080 --> 01:16:32,590
transition of power from the hands of

01:16:31,150 --> 01:16:34,870
the traditional proprietary phone

01:16:32,590 --> 01:16:37,270
vendors into the hands of the users and

01:16:34,870 --> 01:16:39,190
administrators of phone systems using

01:16:37,270 --> 01:16:40,420
this power our customers have created

01:16:39,190 --> 01:16:42,370
all sorts of business changing

01:16:40,420 --> 01:16:44,230
applications from small office phone

01:16:42,370 --> 01:16:46,750
systems to mission-critical call centres

01:16:44,230 --> 01:16:48,340
the international carrier networks in

01:16:46,750 --> 01:16:50,110
fact there's even an entire country

01:16:48,340 --> 01:16:52,510
those communications infrastructure runs

01:16:50,110 --> 01:16:54,640
on esters the gym has always been about

01:16:52,510 --> 01:16:56,350
creating technology that expands

01:16:54,640 --> 01:16:58,540
communications capabilities in ways that

01:16:56,350 --> 01:16:59,710
we could never have imagined and that's

01:16:58,540 --> 01:17:02,470
part of what's game-changing about

01:16:59,710 --> 01:17:04,810
Digium today we're doing it again this

01:17:02,470 --> 01:17:06,910
time by introducing a new family of HD

01:17:04,810 --> 01:17:09,010
IP phones that extends control of the

01:17:06,910 --> 01:17:10,780
user all the way to the desktop the

01:17:09,010 --> 01:17:12,490
launch of these new products represents

01:17:10,780 --> 01:17:14,590
the next phase indigenous history of

01:17:12,490 --> 01:17:16,990
innovation these are the first and only

01:17:14,590 --> 01:17:18,700
IP phones designed to fully leverage the

01:17:16,990 --> 01:17:20,260
power of Astra's when we first discussed

01:17:18,700 --> 01:17:22,270
our expectations for building a family

01:17:20,260 --> 01:17:24,430
of phones for use with asterisk our

01:17:22,270 --> 01:17:26,170
requirements were pretty simple we asked

01:17:24,430 --> 01:17:27,820
the team to build the phones such that

01:17:26,170 --> 01:17:30,010
they were easy to install integrate

01:17:27,820 --> 01:17:31,870
provision and use I think you'll soon

01:17:30,010 --> 01:17:34,420
agree our engineers have delivered on

01:17:31,870 --> 01:17:36,040
that goal user feedback is validating

01:17:34,420 --> 01:17:38,170
that when it comes to operation with

01:17:36,040 --> 01:17:40,600
Astra space systems including our own

01:17:38,170 --> 01:17:43,180
switchvox based product these are the

01:17:40,600 --> 01:17:44,470
easiest to use best integrated most

01:17:43,180 --> 01:17:47,050
interoperable products on the market

01:17:44,470 --> 01:17:49,050
today the digitally phones will

01:17:47,050 --> 01:17:51,100
initially include three IP des hommes

01:17:49,050 --> 01:17:53,050
uniquely designed to complement any

01:17:51,100 --> 01:17:54,910
asterisks or switch box based solution

01:17:53,050 --> 01:17:57,580
these phones are different for a number

01:17:54,910 --> 01:18:00,250
of reasons first there is clue sively

01:17:57,580 --> 01:18:01,660
designed for use with esters secondly

01:18:00,250 --> 01:18:03,270
we've made it really easy to

01:18:01,660 --> 01:18:05,680
autodiscover and provision the phones

01:18:03,270 --> 01:18:07,360
next we've made it easy for the phones

01:18:05,680 --> 01:18:09,070
to access information inside of

01:18:07,360 --> 01:18:09,810
asterisks allowing tight coupling

01:18:09,070 --> 01:18:12,300
between

01:18:09,810 --> 01:18:14,010
application and the phone additionally

01:18:12,300 --> 01:18:16,500
we've created an applications engineer

01:18:14,010 --> 01:18:18,690
that allows users and developers to

01:18:16,500 --> 01:18:21,450
create and run their own apps on the

01:18:18,690 --> 01:18:23,520
phone and finally we've done all of this

01:18:21,450 --> 01:18:25,260
at a very compelling price point at

01:18:23,520 --> 01:18:27,450
Digium we're always thinking of ways to

01:18:25,260 --> 01:18:29,820
give our customers the best value in

01:18:27,450 --> 01:18:31,110
business phone systems and also give

01:18:29,820 --> 01:18:33,210
them the power to create their own

01:18:31,110 --> 01:18:35,010
solutions or any communications

01:18:33,210 --> 01:18:36,690
challenge well continue to push the

01:18:35,010 --> 01:18:38,460
boundaries not only to make Astra's

01:18:36,690 --> 01:18:40,230
cooler bastard more technologically

01:18:38,460 --> 01:18:41,880
feature-rich but to make asterisk

01:18:40,230 --> 01:18:44,100
employed communications even easier and

01:18:41,880 --> 01:18:47,000
together we'll change the way the world

01:18:44,100 --> 01:18:47,000

YouTube URL: https://www.youtube.com/watch?v=0fcb-Apv9gM


