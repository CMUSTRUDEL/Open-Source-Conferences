Title: 2012 SouthEast LinuxFest - ODBC - Josh Berkus - 10 Ways To Wreck Your Database
Publication date: 2014-06-30
Playlist: 2012 SouthEast LinuxFest - ODBC Un-Conference
Description: 
	2012 SouthEast LinuxFest
Open Database Camp (ODBC)

Josh Berkus - 10 Ways To Wreck Your Database
Captions: 
	00:00:00,000 --> 00:00:05,279
the following presentation was recorded

00:00:02,490 --> 00:00:08,040
the 2012 southeast linux fest in

00:00:05,279 --> 00:00:10,410
charlotte north carolina it is licensed

00:00:08,040 --> 00:00:12,090
under a creative commons license for

00:00:10,410 --> 00:00:16,859
more information about the southeast

00:00:12,090 --> 00:00:19,230
linux fest visit www.lend expense org

00:00:16,859 --> 00:00:21,320
the southeast linux fest would like to

00:00:19,230 --> 00:00:23,279
thank the following diamond sponsors in

00:00:21,320 --> 00:00:27,330
2012 for helping make these videos

00:00:23,279 --> 00:00:29,970
possible my name is josh purchase i'm

00:00:27,330 --> 00:00:34,559
going to talk about ways to wreck your

00:00:29,970 --> 00:00:37,950
database the how do how to wreck your

00:00:34,559 --> 00:00:41,070
relational database now you may ask why

00:00:37,950 --> 00:00:43,890
would I want to destroy my database it's

00:00:41,070 --> 00:00:45,690
a variety of reasons for that yes like

00:00:43,890 --> 00:00:48,870
for example you might want revenge

00:00:45,690 --> 00:00:51,090
against your boss or you might want to

00:00:48,870 --> 00:00:52,530
guarantee yourself job security because

00:00:51,090 --> 00:00:55,230
nobody else knows how the database works

00:00:52,530 --> 00:00:57,239
or maybe you hate the project you're on

00:00:55,230 --> 00:01:00,420
and you want to ensure that it fails or

00:00:57,239 --> 00:01:03,180
maybe you just want to hide all the

00:01:00,420 --> 00:01:05,339
bodies by making the data inaccessible

00:01:03,180 --> 00:01:07,080
or maybe you want to make sure that you

00:01:05,339 --> 00:01:09,920
can come back later and get back into

00:01:07,080 --> 00:01:12,330
the database whenever you want to or

00:01:09,920 --> 00:01:13,799
maybe you think it's time for a

00:01:12,330 --> 00:01:17,880
refactoring you want to make sure that

00:01:13,799 --> 00:01:20,070
it happens or maybe you feel like the

00:01:17,880 --> 00:01:23,509
application is just too darn fast and

00:01:20,070 --> 00:01:25,740
you want it to be a little bit slower or

00:01:23,509 --> 00:01:28,320
maybe you just want to get your revenge

00:01:25,740 --> 00:01:33,240
on those stupid developers who keep

00:01:28,320 --> 00:01:35,820
asking you for things so give you ten

00:01:33,240 --> 00:01:38,070
methods to lose that I be insecure

00:01:35,820 --> 00:01:40,650
become unmaintained able stifle changes

00:01:38,070 --> 00:01:43,100
and make everyone miserable that's going

00:01:40,650 --> 00:01:43,100
to interesting

00:01:47,360 --> 00:01:52,910
huh let's not worry about it it's not

00:01:51,470 --> 00:01:56,090
worry about it i use lots of big text

00:01:52,910 --> 00:01:59,750
and make everyone miserable so method

00:01:56,090 --> 00:02:01,880
number one number one is what i call the

00:01:59,750 --> 00:02:05,479
one big spreadsheet method of database

00:02:01,880 --> 00:02:08,770
design this is where all of the data in

00:02:05,479 --> 00:02:10,880
your database is in a single table with

00:02:08,770 --> 00:02:13,459
1,800 different nullable fields

00:02:10,880 --> 00:02:26,980
completely denormalized this is also

00:02:13,459 --> 00:02:26,980
known as zero normal form yes yep yep

00:02:27,970 --> 00:02:34,040
yep thanks thanks to the popularity of

00:02:31,489 --> 00:02:35,900
Excel and in this by the way actually is

00:02:34,040 --> 00:02:40,400
in fact a real table design from real

00:02:35,900 --> 00:02:46,970
application the including a column

00:02:40,400 --> 00:02:48,500
called ? ? ? the so mom this is

00:02:46,970 --> 00:02:50,120
generally the result of taking an Excel

00:02:48,500 --> 00:02:52,310
spreadsheet and converting it directly

00:02:50,120 --> 00:02:53,570
into a database so that you can harness

00:02:52,310 --> 00:02:56,870
the power of the database in order to

00:02:53,570 --> 00:02:58,910
produce Excel spreadsheets our second

00:02:56,870 --> 00:03:00,470
one that's a big that's a big favorite

00:02:58,910 --> 00:03:04,700
of mine from maintainability perspective

00:03:00,470 --> 00:03:07,100
is random naming because one of the big

00:03:04,700 --> 00:03:10,549
debates in the database world is should

00:03:07,100 --> 00:03:13,519
table names be plural or singular I say

00:03:10,549 --> 00:03:16,160
use a mix some table should be plural

00:03:13,519 --> 00:03:19,610
and some tables should be singular that

00:03:16,160 --> 00:03:21,200
way you have to check every time but but

00:03:19,610 --> 00:03:23,269
plural and singular isn't quite enough

00:03:21,200 --> 00:03:26,959
to really obfuscate your database design

00:03:23,269 --> 00:03:29,620
you need to also randomly mix underscore

00:03:26,959 --> 00:03:29,620
in camel case

00:03:33,650 --> 00:03:42,300
that's pretty good okay yep yeah user

00:03:40,050 --> 00:03:47,580
profile and and and also have user

00:03:42,300 --> 00:03:49,560
underscore profile yes so let's mix our

00:03:47,580 --> 00:03:52,200
camel cases and underscores but we're

00:03:49,560 --> 00:04:01,680
not limited to messing with table names

00:03:52,200 --> 00:04:16,440
yeah yeah i thought i had a misspelling

00:04:01,680 --> 00:04:17,910
on here oh well yes yep yeah yes yep one

00:04:16,440 --> 00:04:22,590
and also you're not limited to table

00:04:17,910 --> 00:04:23,910
names we can also do field names so you

00:04:22,590 --> 00:04:26,310
know you can apply the same principles

00:04:23,910 --> 00:04:28,919
we can mix camelcase and underscores I

00:04:26,310 --> 00:04:30,930
like actually putting in some

00:04:28,919 --> 00:04:36,360
abbreviations a little bit of hungarian

00:04:30,930 --> 00:04:39,690
notation the and you know and other

00:04:36,360 --> 00:04:41,520
things I random sort of acronyms that

00:04:39,690 --> 00:04:44,550
have been capitalized in the table name

00:04:41,520 --> 00:04:46,710
so they have to be quoted you know these

00:04:44,550 --> 00:04:48,720
these are all fun of course the the

00:04:46,710 --> 00:04:51,630
ultimate random naming technique is of

00:04:48,720 --> 00:04:54,720
course as perpetuated by Microsoft

00:04:51,630 --> 00:04:56,550
Hungarian notation nothing like having

00:04:54,720 --> 00:04:59,030
every field in the database begin

00:04:56,550 --> 00:05:00,570
something with with a data type

00:04:59,030 --> 00:05:01,710
annotation because of course you

00:05:00,570 --> 00:05:07,250
couldn't look that up in the system

00:05:01,710 --> 00:05:07,250
tables yeah

00:05:10,989 --> 00:05:19,039
well that makes an alpha sort release

00:05:13,339 --> 00:05:20,360
right and and actually and and 4 for 4

00:05:19,039 --> 00:05:22,039
i'll give the bonus points in this for

00:05:20,360 --> 00:05:23,929
the bonus puts in this use hungarian

00:05:22,039 --> 00:05:28,580
notation but don't be consistent about

00:05:23,929 --> 00:05:42,649
it so for example on some fields use use

00:05:28,580 --> 00:05:46,099
str and then others use txt yes yep yep

00:05:42,649 --> 00:05:50,300
so techniques three and four are sort of

00:05:46,099 --> 00:05:56,119
a pair these go together under the title

00:05:50,300 --> 00:05:58,939
we don't need no stinking keys the first

00:05:56,119 --> 00:06:02,949
one is first of all your table should

00:05:58,939 --> 00:06:05,809
have no real keys just an auto number

00:06:02,949 --> 00:06:07,159
everything else should be completely you

00:06:05,809 --> 00:06:10,759
know unsorted because you know you don't

00:06:07,159 --> 00:06:14,889
really want inner authenticating key and

00:06:10,759 --> 00:06:17,959
that way you can get fun stuff like this

00:06:14,889 --> 00:06:20,389
you know we got I let's see I mean here

00:06:17,959 --> 00:06:22,519
is Josh burkas and Joshua burkas and

00:06:20,389 --> 00:06:23,779
Josh burkas and Josh burkas and a

00:06:22,519 --> 00:06:24,829
variety of an email name is we don't

00:06:23,779 --> 00:06:26,869
really need any sort of uniqueness

00:06:24,829 --> 00:06:34,459
constraints across any of this the users

00:06:26,869 --> 00:06:37,219
will sort it out eventually uh-huh the

00:06:34,459 --> 00:06:41,479
yeah well this is this is the bona this

00:06:37,219 --> 00:06:45,519
is the bonus linkedin technique yeah yep

00:06:41,479 --> 00:06:45,519
this is the bonus linkedin technique

00:06:47,110 --> 00:06:52,520
yep our second key technique is of

00:06:50,629 --> 00:06:54,469
course since we're not going to have any

00:06:52,520 --> 00:07:01,310
real unique keys we're not gonna have

00:06:54,469 --> 00:07:04,189
any foreign keys either the um so you

00:07:01,310 --> 00:07:05,419
know with our usual wow that's that's

00:07:04,189 --> 00:07:08,650
actually sort of an interesting color

00:07:05,419 --> 00:07:14,779
effect here there's actually text here

00:07:08,650 --> 00:07:17,120
the so you know this way one of the nice

00:07:14,779 --> 00:07:19,909
things about having no foreign keys is

00:07:17,120 --> 00:07:23,270
that we can then have fun with orphan

00:07:19,909 --> 00:07:24,620
rows where where things can become

00:07:23,270 --> 00:07:26,210
completely orphaned in that way they

00:07:24,620 --> 00:07:31,879
show up on one count and not on the

00:07:26,210 --> 00:07:33,169
others the the other really fun thing

00:07:31,879 --> 00:07:35,599
about not having a foreign keys in the

00:07:33,169 --> 00:07:37,069
database is then developers feel

00:07:35,599 --> 00:07:41,560
compelled to implement them in the

00:07:37,069 --> 00:07:41,560
application which of course works great

00:07:47,720 --> 00:07:54,290
oh that's always fun that's that's

00:07:52,670 --> 00:07:58,490
called overloading a field which I'll

00:07:54,290 --> 00:08:00,260
get into the yes implementing your own

00:07:58,490 --> 00:08:03,650
auto number primary key and application

00:08:00,260 --> 00:08:05,300
code that's always fun to the but you

00:08:03,650 --> 00:08:07,640
know you look at this sort of thing and

00:08:05,300 --> 00:08:09,500
if you insert and there and that sort of

00:08:07,640 --> 00:08:14,900
thing update what could possibly go

00:08:09,500 --> 00:08:17,060
wrong technique number five no no

00:08:14,900 --> 00:08:19,520
constraints of course either you know

00:08:17,060 --> 00:08:22,010
everything should be an unlimited length

00:08:19,520 --> 00:08:23,810
text field you shouldn't have any

00:08:22,010 --> 00:08:26,090
constraints and requiring things to be

00:08:23,810 --> 00:08:27,530
null or not know these are all confusing

00:08:26,090 --> 00:08:37,090
and you'll have to change them later now

00:08:27,530 --> 00:08:44,240
a lot of people say yes yeah yeah yeah

00:08:37,090 --> 00:08:45,800
but he's not here you notice yep the now

00:08:44,240 --> 00:08:47,060
a lot of people say oh okay well you

00:08:45,800 --> 00:08:48,710
know I need some constraints on this so

00:08:47,060 --> 00:08:50,570
I'll just do stuff is ver Cara with a

00:08:48,710 --> 00:08:53,000
length limit well length limit is not

00:08:50,570 --> 00:08:54,830
terrifically useful because you know we

00:08:53,000 --> 00:08:57,170
put this in here and we sort of fit this

00:08:54,830 --> 00:08:59,990
in and then we can have fun stuff in

00:08:57,170 --> 00:09:02,150
here like this where we have you know

00:08:59,990 --> 00:09:09,560
first name and last name or no we have

00:09:02,150 --> 00:09:14,150
sort of random values and some fields he

00:09:09,560 --> 00:09:17,330
just noticed the third row the you know

00:09:14,150 --> 00:09:18,589
I you know and you have all kinds of

00:09:17,330 --> 00:09:20,660
garbage in the database in that way you

00:09:18,589 --> 00:09:22,610
have to check every row for garbage when

00:09:20,660 --> 00:09:24,380
you're in your application code this

00:09:22,610 --> 00:09:29,660
adds lots of extra code to the

00:09:24,380 --> 00:09:33,050
application and makes everything fun yes

00:09:29,660 --> 00:09:34,550
exactly and that means you're going to

00:09:33,050 --> 00:09:37,790
sign somebody full time to cleaning up

00:09:34,550 --> 00:09:42,740
the data continuously full employment

00:09:37,790 --> 00:09:45,430
plan so now no constraints is relatively

00:09:42,740 --> 00:09:47,900
easy what's a lot more fun because

00:09:45,430 --> 00:09:50,120
people often think things are okay until

00:09:47,900 --> 00:09:52,550
they learn they're not okay is to use

00:09:50,120 --> 00:09:55,610
more subtle techniques like non-atomic

00:09:52,550 --> 00:09:57,050
fields you know this is always fun like

00:09:55,610 --> 00:09:58,970
for example a name field that has

00:09:57,050 --> 00:10:00,779
somebody's complete name so you have to

00:09:58,970 --> 00:10:03,760
actually parse it

00:10:00,779 --> 00:10:06,070
every time you want to read a portion

00:10:03,760 --> 00:10:07,570
out of it like like alphabetizing a list

00:10:06,070 --> 00:10:10,839
of people where the name is in one field

00:10:07,570 --> 00:10:14,740
that's always a lot of fun now that's

00:10:10,839 --> 00:10:17,680
the obvious kind of non-atomic field but

00:10:14,740 --> 00:10:19,839
the non-obvious kind of non-atomic field

00:10:17,680 --> 00:10:22,089
is actually different and this is a lot

00:10:19,839 --> 00:10:24,430
more fun which is where you have

00:10:22,089 --> 00:10:26,320
something a status column and the status

00:10:24,430 --> 00:10:30,149
actually represents two or three

00:10:26,320 --> 00:10:32,920
independent variables so for example

00:10:30,149 --> 00:10:35,860
this is a status column from again a

00:10:32,920 --> 00:10:38,430
real database I worked on where where we

00:10:35,860 --> 00:10:43,720
have a status column and a was active

00:10:38,430 --> 00:10:47,050
and I was inactive well actually a was

00:10:43,720 --> 00:10:50,709
administrator you was user and I was

00:10:47,050 --> 00:10:53,550
inactive so it's always fun for example

00:10:50,709 --> 00:10:58,029
with that thing right active I

00:10:53,550 --> 00:10:59,410
administrator user inactive what if I

00:10:58,029 --> 00:11:01,389
wanted to look up all the inactive

00:10:59,410 --> 00:11:08,260
administrators what would I do there

00:11:01,389 --> 00:11:10,839
exactly of course the best non-atomic

00:11:08,260 --> 00:11:14,260
fields are the ones that are encoded in

00:11:10,839 --> 00:11:17,050
standard so you can defend them as a way

00:11:14,260 --> 00:11:19,569
of supporting you know the standard way

00:11:17,050 --> 00:11:22,470
of doing things for example charts of

00:11:19,569 --> 00:11:25,000
accounts ultimate non-atomic field

00:11:22,470 --> 00:11:26,980
frequently your chart of account will

00:11:25,000 --> 00:11:29,019
represent six or seven independent

00:11:26,980 --> 00:11:31,870
variables in the corporation's

00:11:29,019 --> 00:11:33,670
accounting and you know what very

00:11:31,870 --> 00:11:35,920
important make this part of the unique

00:11:33,670 --> 00:11:38,380
key to various tables so you can be

00:11:35,920 --> 00:11:43,209
changing it all the time as stuff gets

00:11:38,380 --> 00:11:44,649
allocated between accounts so non-atomic

00:11:43,209 --> 00:11:46,000
fields are fun the other thing that's

00:11:44,649 --> 00:11:48,010
fun which is actually sort of a

00:11:46,000 --> 00:11:52,449
specialty version of non-atomic fields

00:11:48,010 --> 00:11:57,610
are what are known as magic numbers this

00:11:52,449 --> 00:11:58,990
is a very popular one right yeah you

00:11:57,610 --> 00:12:01,000
know when you want to actually like

00:11:58,990 --> 00:12:02,680
you've got a foreign key to another

00:12:01,000 --> 00:12:06,339
table like this is always fun you have a

00:12:02,680 --> 00:12:08,230
foreign key to another table and I for

00:12:06,339 --> 00:12:10,120
example another database right voter

00:12:08,230 --> 00:12:12,670
database they wanted to indicate people

00:12:10,120 --> 00:12:13,050
that were no longer voters and they

00:12:12,670 --> 00:12:15,630
didn't

00:12:13,050 --> 00:12:19,529
have useful demographic information on

00:12:15,630 --> 00:12:21,300
so every all of the records from these

00:12:19,529 --> 00:12:26,370
unknown voters got associated with a

00:12:21,300 --> 00:12:28,500
single voter whose ID was zero so then

00:12:26,370 --> 00:12:31,200
pretty soon you do something like you

00:12:28,500 --> 00:12:34,019
know non knowledgeably you go into the

00:12:31,200 --> 00:12:37,860
table and you attempt to do say an

00:12:34,019 --> 00:12:39,240
average of the number of voters per

00:12:37,860 --> 00:12:40,440
household over the table and you

00:12:39,240 --> 00:12:43,110
discover the average of something like

00:12:40,440 --> 00:12:47,970
67 and you're like what the hell is that

00:12:43,110 --> 00:12:51,690
one id0 voter who has 3,000 people in

00:12:47,970 --> 00:12:56,250
their household and so then you have to

00:12:51,690 --> 00:12:59,279
remember to exempt that id0 voter from

00:12:56,250 --> 00:13:01,529
every single query now the next magic

00:12:59,279 --> 00:13:07,769
number is for your month for the the my

00:13:01,529 --> 00:13:09,480
sequel folks here that's always fun that

00:13:07,769 --> 00:13:13,019
makes it really fun to do any date

00:13:09,480 --> 00:13:14,970
calculations you know you have to

00:13:13,019 --> 00:13:19,709
remember oh yeah we're really losing

00:13:14,970 --> 00:13:21,540
stuff off the bottom aren't we the yep

00:13:19,709 --> 00:13:23,070
so this makes it always really fun

00:13:21,540 --> 00:13:26,910
because you have to do this fun date

00:13:23,070 --> 00:13:29,610
calculation to exempt I to exempt the

00:13:26,910 --> 00:13:31,950
the februari 30th this is very popular

00:13:29,610 --> 00:13:33,870
in and I've seen in my sequel

00:13:31,950 --> 00:13:38,010
applications to be a zero date for the

00:13:33,870 --> 00:13:42,029
year at least in some of the ones that

00:13:38,010 --> 00:13:45,200
I've had to troubleshoot now no the

00:13:42,029 --> 00:13:45,200
problem is that it's just not displaying

00:13:46,200 --> 00:13:58,030
no it's a defective projector yep so um

00:13:55,960 --> 00:14:00,460
now there's other things you do magic

00:13:58,030 --> 00:14:01,810
numbers for example again working with

00:14:00,460 --> 00:14:03,520
demographic information will from the

00:14:01,810 --> 00:14:05,410
city of San Francisco actually at the

00:14:03,520 --> 00:14:07,690
time this project is long dead so I can

00:14:05,410 --> 00:14:09,460
actually talk about it they want to do

00:14:07,690 --> 00:14:12,160
something like for example the number of

00:14:09,460 --> 00:14:14,530
people in a household for this household

00:14:12,160 --> 00:14:18,300
survey but they wanted to represent some

00:14:14,530 --> 00:14:20,830
special values like for example people

00:14:18,300 --> 00:14:22,570
they wanted to represent people that

00:14:20,830 --> 00:14:25,270
hadn't been surveyed yet and people who

00:14:22,570 --> 00:14:29,350
chose declined to state so we added some

00:14:25,270 --> 00:14:33,250
magic numbers to indicate that because

00:14:29,350 --> 00:14:35,410
like one of them I you know declined to

00:14:33,250 --> 00:14:38,530
state was you know negative one and

00:14:35,410 --> 00:14:39,910
could not estimate was a hundred because

00:14:38,530 --> 00:14:42,670
you know nobody would ever have a

00:14:39,910 --> 00:14:44,080
hundred people in their household up

00:14:42,670 --> 00:14:47,080
until you know you get to a Berkeley

00:14:44,080 --> 00:14:48,940
calm yet but the and of course this was

00:14:47,080 --> 00:14:51,700
lots of fun when it came time to write

00:14:48,940 --> 00:14:53,200
queries to do statistics on households

00:14:51,700 --> 00:14:55,720
which was the purpose of this database

00:14:53,200 --> 00:14:58,420
so he had to remember to add this clause

00:14:55,720 --> 00:15:00,250
to every single freaking query so that

00:14:58,420 --> 00:15:01,990
made things lots of fun and you see

00:15:00,250 --> 00:15:04,870
other magic numbers this one's popular

00:15:01,990 --> 00:15:06,850
in accounting stuff you know this was

00:15:04,870 --> 00:15:09,400
the most fun thing at all because this

00:15:06,850 --> 00:15:12,190
was in another database you go in the

00:15:09,400 --> 00:15:13,900
invoice negative 1 cent was to indicate

00:15:12,190 --> 00:15:16,510
an invoice that you weren't supposed to

00:15:13,900 --> 00:15:18,220
send because it was a no op invoice well

00:15:16,510 --> 00:15:20,260
of course somebody goes into the system

00:15:18,220 --> 00:15:22,750
new bookkeepers hired there that says

00:15:20,260 --> 00:15:24,490
look hey we've got all of these invoices

00:15:22,750 --> 00:15:25,810
that haven't gone out for months and

00:15:24,490 --> 00:15:28,150
months so i'm just going to print them

00:15:25,810 --> 00:15:30,430
all and send them out so 18,000

00:15:28,150 --> 00:15:35,170
customers got invoices for negative 1

00:15:30,430 --> 00:15:36,550
cent so the most important thing about

00:15:35,170 --> 00:15:38,680
magic numbers though if you really want

00:15:36,550 --> 00:15:41,950
to have fun with magic numbers document

00:15:38,680 --> 00:15:44,760
them only in the application code they

00:15:41,950 --> 00:15:47,140
should not be annotated anywhere else

00:15:44,760 --> 00:15:52,930
preferably don't even document them in

00:15:47,140 --> 00:15:54,280
the application code yeah well sometimes

00:15:52,930 --> 00:15:58,780
you have to actually figure out what

00:15:54,280 --> 00:15:59,860
you're doing the so now even more

00:15:58,780 --> 00:16:01,870
advanced technique

00:15:59,860 --> 00:16:03,010
again in the non-atomic field realm

00:16:01,870 --> 00:16:05,200
because that's where we can have the

00:16:03,010 --> 00:16:09,310
most fun is what we call polymorphic

00:16:05,200 --> 00:16:16,360
fields this was from a fundraising

00:16:09,310 --> 00:16:19,390
database where the contents of preferred

00:16:16,360 --> 00:16:20,769
contact the valid range of values for

00:16:19,390 --> 00:16:23,500
preferred contact was dependent on what

00:16:20,769 --> 00:16:25,779
was in the account type of field and the

00:16:23,500 --> 00:16:31,620
contact info field was dependent on what

00:16:25,779 --> 00:16:34,570
was in the preferred contact field yeah

00:16:31,620 --> 00:16:40,029
so for example trying to assemble an

00:16:34,570 --> 00:16:43,240
email list out of this yes this was a

00:16:40,029 --> 00:16:44,800
real database that was in production the

00:16:43,240 --> 00:16:45,640
up I mean it's pretty clear what

00:16:44,800 --> 00:16:46,930
happened here they started with a

00:16:45,640 --> 00:16:48,850
spreadsheet and they just put the

00:16:46,930 --> 00:16:50,170
spreadsheet straight in the database the

00:16:48,850 --> 00:16:51,550
it would be it would have been a

00:16:50,170 --> 00:16:55,200
nightmare even as a spreadsheet though

00:16:51,550 --> 00:16:57,519
so that's really fun because nobody

00:16:55,200 --> 00:17:00,579
nobody other than you can friggin figure

00:16:57,519 --> 00:17:05,439
out what's going on here now the much

00:17:00,579 --> 00:17:06,850
more common technique for for making

00:17:05,439 --> 00:17:09,819
your database on maintainable and

00:17:06,850 --> 00:17:12,429
showing performance to a crawl is taking

00:17:09,819 --> 00:17:15,549
a relational database and implementing

00:17:12,429 --> 00:17:17,980
entity attribute value on it and I'm not

00:17:15,549 --> 00:17:20,260
talking about for extended options I

00:17:17,980 --> 00:17:23,230
mean everybody is eav for oh you know I

00:17:20,260 --> 00:17:24,760
want to allow you know users to add

00:17:23,230 --> 00:17:27,250
preferences and that sort of thing no

00:17:24,760 --> 00:17:28,569
now put your core data the stuff you're

00:17:27,250 --> 00:17:30,040
going to be running aggregation on the

00:17:28,569 --> 00:17:33,669
stuff that should be part of your unique

00:17:30,040 --> 00:17:35,140
keys and put that all in eav because of

00:17:33,669 --> 00:17:37,540
course your row based relational

00:17:35,140 --> 00:17:40,450
database performs great when the entire

00:17:37,540 --> 00:17:43,830
database is reduced to a surrogate key a

00:17:40,450 --> 00:17:43,830
category in the value

00:17:47,300 --> 00:17:54,420
yes well and of course there's no limit

00:17:51,210 --> 00:18:05,850
on this category you know make up your

00:17:54,420 --> 00:18:09,290
own mm-hmm yes whoa hey you can be very

00:18:05,850 --> 00:18:09,290
tall and short of it all

00:18:19,460 --> 00:18:22,920
no no see that would be an improvement

00:18:21,570 --> 00:18:24,809
that would be an improvement over this

00:18:22,920 --> 00:18:26,340
model actually that would be an

00:18:24,809 --> 00:18:29,760
improvement of this model because right

00:18:26,340 --> 00:18:31,679
now right now for this the application

00:18:29,760 --> 00:18:34,740
can legitimately insert something like

00:18:31,679 --> 00:18:36,720
blue for height and the database will

00:18:34,740 --> 00:18:38,400
accept it and then later on you have to

00:18:36,720 --> 00:18:41,280
figure out what height blue means of

00:18:38,400 --> 00:18:44,910
course of course now that we're living

00:18:41,280 --> 00:18:47,490
in the era of document databases you can

00:18:44,910 --> 00:18:52,590
of court whoops what happened to that

00:18:47,490 --> 00:18:54,179
hold on oh right so for example here's

00:18:52,590 --> 00:18:56,520
some fun things to do with the AV

00:18:54,179 --> 00:18:59,190
databases that have been de normalized

00:18:56,520 --> 00:19:00,660
in 6th nth say right according to say

00:18:59,190 --> 00:19:04,710
how many men have brown hair and are

00:19:00,660 --> 00:19:08,790
over 6 feet or make marital status and

00:19:04,710 --> 00:19:11,309
age required but not other things or

00:19:08,790 --> 00:19:13,770
apply constraints to field values these

00:19:11,309 --> 00:19:16,429
are all fun things to do and this

00:19:13,770 --> 00:19:21,510
actually this design was a complete eav

00:19:16,429 --> 00:19:22,950
i dating site design where they were in

00:19:21,510 --> 00:19:24,150
fact trying to answer these questions

00:19:22,950 --> 00:19:27,929
and trying to answer them thousands of

00:19:24,150 --> 00:19:31,440
times per second now of course in the

00:19:27,929 --> 00:19:33,660
age of document databases and scripting

00:19:31,440 --> 00:19:37,350
and all kinds of other technology we

00:19:33,660 --> 00:19:40,530
have a more modern version of eav which

00:19:37,350 --> 00:19:42,480
is e blah and that's where you take all

00:19:40,530 --> 00:19:44,820
of your data and put it in a big

00:19:42,480 --> 00:19:47,100
delimited text field of some kind xml

00:19:44,820 --> 00:19:50,010
json whatever put all of your core data

00:19:47,100 --> 00:19:54,299
in there that way there's no constraints

00:19:50,010 --> 00:19:56,480
at all there's no way to enforce any

00:19:54,299 --> 00:20:00,299
kind of data types or any requirements

00:19:56,480 --> 00:20:02,600
and you know at that point your work as

00:20:00,299 --> 00:20:05,370
a database designer is pretty much done

00:20:02,600 --> 00:20:07,760
you have table which is called table and

00:20:05,370 --> 00:20:11,160
just put whatever you want to into it

00:20:07,760 --> 00:20:13,860
now on the opposite side of this there's

00:20:11,160 --> 00:20:17,220
another lazy man's technique to wrecking

00:20:13,860 --> 00:20:19,860
your database which is give complete

00:20:17,220 --> 00:20:23,660
control of database design and

00:20:19,860 --> 00:20:23,660
construction to the ORM

00:20:24,690 --> 00:20:36,610
those over ms were written yep right

00:20:34,539 --> 00:20:38,320
those are my smart people they can

00:20:36,610 --> 00:20:40,150
design a database from scratch with no

00:20:38,320 --> 00:20:42,039
problems particularly over several

00:20:40,150 --> 00:20:49,240
generations of application code

00:20:42,039 --> 00:20:50,530
iteration yes yep so and the lovely

00:20:49,240 --> 00:20:53,260
thing about this is this will give you a

00:20:50,530 --> 00:20:58,750
nice complicated database again full

00:20:53,260 --> 00:21:01,299
employment guarantee so ten ways one big

00:20:58,750 --> 00:21:03,490
spreadsheet random naming no keys no

00:21:01,299 --> 00:21:05,200
foreign keys no constraints non-atomic

00:21:03,490 --> 00:21:08,890
fields magic numbers polymorphic feels

00:21:05,200 --> 00:21:13,450
eav and e blob and of course relying

00:21:08,890 --> 00:21:15,070
heavily on the ORM you know there's you

00:21:13,450 --> 00:21:18,130
can always take the opposite techniques

00:21:15,070 --> 00:21:19,690
if you want a database that actually war

00:21:18,130 --> 00:21:26,710
if you want a database that actually

00:21:19,690 --> 00:21:28,450
works but that's no fun at all but well

00:21:26,710 --> 00:21:30,130
it's because that's the answer that's

00:21:28,450 --> 00:21:37,330
the answer to all of these things is

00:21:30,130 --> 00:21:39,850
atomic Phoenix yes atomic fields atomic

00:21:37,330 --> 00:21:43,500
fields atomic fields it's like location

00:21:39,850 --> 00:21:43,500
it's like location location location

00:21:56,409 --> 00:22:06,460
yeah thanks

00:22:28,710 --> 00:22:33,790
when we created asterisk over a decade

00:22:31,450 --> 00:22:35,740
ago we could not have imagined that

00:22:33,790 --> 00:22:37,960
asterisk would not only become the most

00:22:35,740 --> 00:22:40,090
widely adopted open source communication

00:22:37,960 --> 00:22:42,130
software on the planet but that it would

00:22:40,090 --> 00:22:44,650
impact the entire industry in the way

00:22:42,130 --> 00:22:46,630
that it has today asterisk has found its

00:22:44,650 --> 00:22:49,270
way in the more than 170 countries and

00:22:46,630 --> 00:22:51,220
virtually every fortune 1000 company the

00:22:49,270 --> 00:22:53,290
success of asterisk has enabled a

00:22:51,220 --> 00:22:54,730
transition of power from the hands of

00:22:53,290 --> 00:22:56,980
the traditional proprietary phone

00:22:54,730 --> 00:22:59,380
vendors into the hands of the users and

00:22:56,980 --> 00:23:01,450
administrators of phone systems using

00:22:59,380 --> 00:23:03,100
this power our customers have traded all

00:23:01,450 --> 00:23:05,200
sorts of business changing applications

00:23:03,100 --> 00:23:07,000
from small office phone systems to

00:23:05,200 --> 00:23:09,100
mission-critical call centers to

00:23:07,000 --> 00:23:10,930
international carrier networks in fact

00:23:09,100 --> 00:23:12,400
there's even an entire country those

00:23:10,930 --> 00:23:14,860
communications infrastructure runs on

00:23:12,400 --> 00:23:16,780
esters the gym has always been about

00:23:14,860 --> 00:23:18,490
creating technology that expands

00:23:16,780 --> 00:23:20,650
communications capabilities in ways that

00:23:18,490 --> 00:23:22,030
we could never have imagined and that's

00:23:20,650 --> 00:23:24,670
part of what's game-changing about the

00:23:22,030 --> 00:23:27,130
gym today we're doing it again this time

00:23:24,670 --> 00:23:29,230
by introducing a new family of HD IP

00:23:27,130 --> 00:23:31,510
phones that extends control of the user

00:23:29,230 --> 00:23:33,280
all the way to the desktop the launch of

00:23:31,510 --> 00:23:34,800
these new products represents the next

00:23:33,280 --> 00:23:37,420
phase indigenous history of innovation

00:23:34,800 --> 00:23:39,490
these are the first and only IP phones

00:23:37,420 --> 00:23:40,990
designed to fully leverage the power of

00:23:39,490 --> 00:23:42,610
estrus when we first discussed our

00:23:40,990 --> 00:23:44,410
expectations for building a family of

00:23:42,610 --> 00:23:46,570
phones for use with asterisk our

00:23:44,410 --> 00:23:48,310
requirements were pretty simple we asked

00:23:46,570 --> 00:23:49,930
the team to build the phones such that

00:23:48,310 --> 00:23:52,150
they were easy to install integrate

00:23:49,930 --> 00:23:53,980
provision and use I think you'll soon

00:23:52,150 --> 00:23:56,560
agree our engineers have delivered on

00:23:53,980 --> 00:23:58,180
that goal user feedback is validating

00:23:56,560 --> 00:24:00,310
that when it comes to operation with

00:23:58,180 --> 00:24:02,710
astro space systems including our own

00:24:00,310 --> 00:24:05,290
switchvox based product these are the

00:24:02,710 --> 00:24:06,610
easiest to use best integrated most

00:24:05,290 --> 00:24:09,190
interoperable products on the market

00:24:06,610 --> 00:24:11,190
today the digital family phones will

00:24:09,190 --> 00:24:13,240
initially include three IP des hommes

00:24:11,190 --> 00:24:15,190
uniquely designed to complement any

00:24:13,240 --> 00:24:17,050
asterisk or Switchvox based solution

00:24:15,190 --> 00:24:19,720
these phones are different for a number

00:24:17,050 --> 00:24:22,390
of reasons first there is clue sively

00:24:19,720 --> 00:24:23,800
designed for use with esters secondly

00:24:22,390 --> 00:24:25,410
we've made it really easy to

00:24:23,800 --> 00:24:27,820
autodiscover and provision the phones

00:24:25,410 --> 00:24:29,890
next we've made it easy for the phones

00:24:27,820 --> 00:24:31,950
to access information inside of asterisk

00:24:29,890 --> 00:24:34,440
allowing tight coupling

00:24:31,950 --> 00:24:36,330
application and the phone additionally

00:24:34,440 --> 00:24:38,639
we've created an applications engine

00:24:36,330 --> 00:24:40,830
that allows users and developers to

00:24:38,639 --> 00:24:43,679
create and run their own apps on the

00:24:40,830 --> 00:24:45,630
phone and finally we've done all of this

00:24:43,679 --> 00:24:47,370
at a very compelling price point at

00:24:45,630 --> 00:24:49,590
digium we're always thinking of ways to

00:24:47,370 --> 00:24:51,960
give our customers the best value in

00:24:49,590 --> 00:24:53,340
business phone systems and also give

00:24:51,960 --> 00:24:55,320
them the power to create their own

00:24:53,340 --> 00:24:57,149
solutions or any communications

00:24:55,320 --> 00:24:58,799
challenge well continue to push the

00:24:57,149 --> 00:25:00,600
boundaries not only to make astros

00:24:58,799 --> 00:25:02,460
cooler bastard more technologically

00:25:00,600 --> 00:25:04,889
feature-rich but to make asterisk and

00:25:02,460 --> 00:25:06,210
communications even easier and together

00:25:04,889 --> 00:25:09,710
we'll change the way the world

00:25:06,210 --> 00:25:09,710
communicates again

00:25:14,919 --> 00:25:16,980
you

00:25:20,129 --> 00:25:26,950
how's that sigh every way this is the

00:25:23,649 --> 00:25:29,110
way to better utilize all your resources

00:25:26,950 --> 00:25:32,559
and it makes managing all your resources

00:25:29,110 --> 00:25:36,389
pretty easy all of the innovation is

00:25:32,559 --> 00:25:39,909
happening in open source the

00:25:36,389 --> 00:25:41,710
collaborative nature and of the you know

00:25:39,909 --> 00:25:43,629
of the community and the speed at which

00:25:41,710 --> 00:25:45,820
these are these you know these

00:25:43,629 --> 00:25:48,129
deficiencies these bugs are getting

00:25:45,820 --> 00:25:50,710
discovered and then fixed is it like

00:25:48,129 --> 00:25:53,440
that really shows the power of the you

00:25:50,710 --> 00:25:55,059
know of the open source community it is

00:25:53,440 --> 00:25:59,259
global and it's definitely because of

00:25:55,059 --> 00:26:05,590
the users community people are extremely

00:25:59,259 --> 00:26:07,480
friendly and almost ready to help if you

00:26:05,590 --> 00:26:09,759
go on tire see any day you'll see these

00:26:07,480 --> 00:26:11,519
guys helping each other out and they're

00:26:09,759 --> 00:26:14,200
all doing it like in a selfless manner

00:26:11,519 --> 00:26:17,190
the product is transparent for everyone

00:26:14,200 --> 00:26:20,350
everyone can look at the code base

00:26:17,190 --> 00:26:22,620
everyone can see how close that is being

00:26:20,350 --> 00:26:28,120
built nothing nothing is proprietary

00:26:22,620 --> 00:26:30,789
everything is open in many ways it's

00:26:28,120 --> 00:26:35,200
absolutely vital to the the ongoing

00:26:30,789 --> 00:26:39,399
health cloudstack the most exciting

00:26:35,200 --> 00:26:42,240
event in recent memory for me was our

00:26:39,399 --> 00:26:44,910
first developer boot camp

00:26:42,240 --> 00:26:47,550
and our call gay people adding maybe two

00:26:44,910 --> 00:26:51,510
weeks notice to come attend I was

00:26:47,550 --> 00:26:55,679
expecting 25 or 30 people so we ended up

00:26:51,510 --> 00:26:58,530
with 87 people and had to go get more

00:26:55,679 --> 00:27:01,050
chairs in the room twice everything

00:26:58,530 --> 00:27:04,290
within cloud computing is commodity and

00:27:01,050 --> 00:27:07,350
is open source and so I don't think that

00:27:04,290 --> 00:27:09,120
you will you'll see anywhere where open

00:27:07,350 --> 00:27:12,150
source is not pervasive in cloud

00:27:09,120 --> 00:27:14,880
computing and so i think it's i think

00:27:12,150 --> 00:27:16,230
it's an assumption i think when you talk

00:27:14,880 --> 00:27:19,940
about cloud computing you're really

00:27:16,230 --> 00:27:19,940
talking about a source cloud computing

00:27:20,240 --> 00:27:26,280
cloud sac is a robust solution for large

00:27:23,520 --> 00:27:28,679
deployments you'll have dozens of data

00:27:26,280 --> 00:27:32,700
centers and thousands of servers in each

00:27:28,679 --> 00:27:35,970
data centers these hardware is going to

00:27:32,700 --> 00:27:39,179
fail and CloudStack is designed to

00:27:35,970 --> 00:27:41,640
handle number one that mass scale number

00:27:39,179 --> 00:27:44,370
two it's designed to handle the failure

00:27:41,640 --> 00:27:46,920
that inevitably happens in large

00:27:44,370 --> 00:27:50,460
deployments started working on college

00:27:46,920 --> 00:27:53,790
attack over four years ago and it was

00:27:50,460 --> 00:27:56,490
the original set of people working on it

00:27:53,790 --> 00:28:00,600
had a background of delivering software

00:27:56,490 --> 00:28:04,830
telcos and service providers lots of QA

00:28:00,600 --> 00:28:08,429
lots of users actually using it high

00:28:04,830 --> 00:28:11,520
availability is a key feature multiple

00:28:08,429 --> 00:28:13,530
hypervisors support of different network

00:28:11,520 --> 00:28:16,230
models you can pick up whatever suits

00:28:13,530 --> 00:28:18,480
you better while step management server

00:28:16,230 --> 00:28:22,170
can be deployed in different physical

00:28:18,480 --> 00:28:23,820
machines it definitely has a huge

00:28:22,170 --> 00:28:28,800
footprint it's being deployed everywhere

00:28:23,820 --> 00:28:31,410
there's a major movie studio that they

00:28:28,800 --> 00:28:34,590
were using cloudstack they were using it

00:28:31,410 --> 00:28:36,660
to transcode video and i thought that

00:28:34,590 --> 00:28:38,309
was terribly fascinating what i found

00:28:36,660 --> 00:28:41,580
more fascinating is what they did during

00:28:38,309 --> 00:28:44,370
lunch where they would spin up you know

00:28:41,580 --> 00:28:45,750
50 or 60 game servers then as soon as

00:28:44,370 --> 00:28:48,450
lunch was over they would destroy all

00:28:45,750 --> 00:28:51,850
the instances and go back to doing

00:28:48,450 --> 00:28:53,380
CloudStack is vast it touches so many

00:28:51,850 --> 00:28:55,240
different aspects and there's no one

00:28:53,380 --> 00:28:58,470
person that's kind of like a master of

00:28:55,240 --> 00:29:01,660
all those realms I think CloudStack as a

00:28:58,470 --> 00:29:03,910
project is going to be one of the

00:29:01,660 --> 00:29:07,990
leaders simply because it's some of the

00:29:03,910 --> 00:29:13,420
most feature fallen and and robust

00:29:07,990 --> 00:29:16,320
platforms out they were Adam senior

00:29:13,420 --> 00:29:16,320

YouTube URL: https://www.youtube.com/watch?v=Qw313OsFpqA


