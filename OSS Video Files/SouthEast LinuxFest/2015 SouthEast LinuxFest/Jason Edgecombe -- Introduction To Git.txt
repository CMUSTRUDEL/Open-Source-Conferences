Title: Jason Edgecombe -- Introduction To Git
Publication date: 2017-01-25
Playlist: 2015 SouthEast LinuxFest
Description: 
	
Captions: 
	00:00:05,069 --> 00:00:15,129
also thank you everybody welcome to

00:00:10,269 --> 00:00:17,050
introduction to get and I'm let's try to

00:00:15,129 --> 00:00:24,940
I'll try to keep you awake from the post

00:00:17,050 --> 00:00:29,800
lunch nap oh my name is Jason edgecombe

00:00:24,940 --> 00:00:31,539
I'm a linux admin or the UNC Charlotte

00:00:29,800 --> 00:00:33,070
College of Engineering excuse me the

00:00:31,539 --> 00:00:36,219
Williams States League college of

00:00:33,070 --> 00:00:39,489
engineering I do have to make a small

00:00:36,219 --> 00:00:41,469
disclaimer disclaimer my opinions are my

00:00:39,489 --> 00:00:45,249
own they do not represent that of my

00:00:41,469 --> 00:00:48,129
employer now that that's over with hi my

00:00:45,249 --> 00:00:51,639
name is Jason I have an open-source

00:00:48,129 --> 00:00:53,979
pedigree I am the open AFS buildbot

00:00:51,639 --> 00:00:58,569
maintainer if you go look on github I've

00:00:53,979 --> 00:01:00,609
got some random repos out there I've

00:00:58,569 --> 00:01:02,649
also can written documentation if you

00:01:00,609 --> 00:01:05,410
have open AFS installed and you do man's

00:01:02,649 --> 00:01:07,750
f FS set crypt and various other

00:01:05,410 --> 00:01:10,150
commands I'll have a my email address

00:01:07,750 --> 00:01:14,290
and name or at the bottom of those so

00:01:10,150 --> 00:01:18,550
first off you got URLs or work and my

00:01:14,290 --> 00:01:21,880
personal sites all good so first off

00:01:18,550 --> 00:01:23,860
what is get now you may hear the get is

00:01:21,880 --> 00:01:27,040
a distributed version control system so

00:01:23,860 --> 00:01:30,070
what does that mean first off version

00:01:27,040 --> 00:01:32,860
control system it keeps snapshots of a

00:01:30,070 --> 00:01:34,510
set of fault folders and files so it's a

00:01:32,860 --> 00:01:37,720
time machine for your files it lets you

00:01:34,510 --> 00:01:41,500
go back in time any of the snapshots it

00:01:37,720 --> 00:01:42,670
saves your bacon distributed this is

00:01:41,500 --> 00:01:46,930
where you start getting with a little

00:01:42,670 --> 00:01:49,390
weird all repositories are peers each

00:01:46,930 --> 00:01:51,370
repository has a full history since the

00:01:49,390 --> 00:01:54,070
last sink so they're all equivalent

00:01:51,370 --> 00:01:55,180
essentially what this means is that you

00:01:54,070 --> 00:01:56,830
can actually work without a network

00:01:55,180 --> 00:01:59,020
connection if you're on a flight or

00:01:56,830 --> 00:02:01,420
going through a Tron train in a tunnel

00:01:59,020 --> 00:02:03,820
doesn't matter you got your repo on your

00:02:01,420 --> 00:02:06,450
laptop you're good you can keep working

00:02:03,820 --> 00:02:08,740
committing doing whatever you need to

00:02:06,450 --> 00:02:10,600
now one of the things it's a little

00:02:08,740 --> 00:02:12,280
weird and people have trouble getting

00:02:10,600 --> 00:02:13,870
used to as where is the central server

00:02:12,280 --> 00:02:15,640
well

00:02:13,870 --> 00:02:18,940
the authority in get or the

00:02:15,640 --> 00:02:23,110
authoritative repository is determined

00:02:18,940 --> 00:02:26,620
by whatever you want it to be know if we

00:02:23,110 --> 00:02:28,299
just say that you know Joe's repository

00:02:26,620 --> 00:02:31,739
is you know the main one that everybody

00:02:28,299 --> 00:02:34,989
talks to then Jose is now the authority

00:02:31,739 --> 00:02:37,299
I'll get into that in a little bit so

00:02:34,989 --> 00:02:41,260
first off why should you why you should

00:02:37,299 --> 00:02:44,409
use get because CP doesn't scale raise

00:02:41,260 --> 00:02:47,819
your hand if you've done CP file to file

00:02:44,409 --> 00:02:52,599
dot back five dot works dot second try

00:02:47,819 --> 00:02:54,430
that I thought all right CPR sorry it

00:02:52,599 --> 00:02:56,620
allows for better metadata on snapshot

00:02:54,430 --> 00:02:59,379
so when you do a snapshot you know who

00:02:56,620 --> 00:03:02,859
did it when they did it you can add some

00:02:59,379 --> 00:03:05,079
text describing what you did so it's

00:03:02,859 --> 00:03:07,150
really helpful that way you can have a

00:03:05,079 --> 00:03:10,420
difference between an author and again a

00:03:07,150 --> 00:03:12,760
committer other good things it doesn't

00:03:10,420 --> 00:03:14,409
copy it doesn't clutter your folder with

00:03:12,760 --> 00:03:16,239
copies so you're not sitting there with

00:03:14,409 --> 00:03:19,090
you know back to back three back for

00:03:16,239 --> 00:03:20,260
back five all those you know fun copies

00:03:19,090 --> 00:03:23,680
that you made you can't remember which

00:03:20,260 --> 00:03:26,919
one was where it's also very space

00:03:23,680 --> 00:03:29,200
efficient so when get is storing all

00:03:26,919 --> 00:03:31,419
these copies it doesn't store if you're

00:03:29,200 --> 00:03:34,599
storing three copies of the same file it

00:03:31,419 --> 00:03:37,540
doesn't store three times the space it

00:03:34,599 --> 00:03:39,310
only takes maybe ten or twenty percent

00:03:37,540 --> 00:03:42,639
if that it's only storing the

00:03:39,310 --> 00:03:44,620
differences and one of the really nice

00:03:42,639 --> 00:03:47,620
things that I like about it is you don't

00:03:44,620 --> 00:03:52,690
need to use a server you can use get on

00:03:47,620 --> 00:03:54,669
your local machine on a solo project in

00:03:52,690 --> 00:03:57,190
fact that makes it really easy to start

00:03:54,669 --> 00:03:59,530
sharing with someone else and things

00:03:57,190 --> 00:04:01,660
like that I have tons of projects or

00:03:59,530 --> 00:04:04,930
little mini projects or scripts or

00:04:01,660 --> 00:04:07,299
whatever I'm doing that I run and get

00:04:04,930 --> 00:04:08,829
locally and I don't mean to share it out

00:04:07,299 --> 00:04:11,769
with anybody i'm just using it to keep

00:04:08,829 --> 00:04:13,810
track of a folder of files and it may

00:04:11,769 --> 00:04:17,280
only be like five files in the folder

00:04:13,810 --> 00:04:17,280
but that's good

00:04:19,840 --> 00:04:26,470
so let me give you some common concepts

00:04:22,730 --> 00:04:29,420
a commit and get is a snapshot in time

00:04:26,470 --> 00:04:31,340
so what that means is it's you know we

00:04:29,420 --> 00:04:33,560
take everything that's being managed by

00:04:31,340 --> 00:04:35,090
get all the files all the folders and

00:04:33,560 --> 00:04:38,900
when you say I want to save a snapshot

00:04:35,090 --> 00:04:42,140
boom that is a commit a commit is

00:04:38,900 --> 00:04:44,300
referenced by a sha-1 hash and that hash

00:04:42,140 --> 00:04:48,410
is actually determined by the contents

00:04:44,300 --> 00:04:51,140
of the snapshot and other things other

00:04:48,410 --> 00:04:53,510
notable things is a commit when you make

00:04:51,140 --> 00:04:55,310
a commit it refers to the previous

00:04:53,510 --> 00:04:57,950
commit that was that it's called its

00:04:55,310 --> 00:05:00,650
parent so what you end up having is you

00:04:57,950 --> 00:05:02,570
have a series or an ancestry of commits

00:05:00,650 --> 00:05:07,010
that goes all the way back to the origin

00:05:02,570 --> 00:05:08,900
to the first commit something that tends

00:05:07,010 --> 00:05:11,180
to kind of confuse people is commits or

00:05:08,900 --> 00:05:13,370
immutable means you can't change them

00:05:11,180 --> 00:05:16,610
you can't write to them you met you save

00:05:13,370 --> 00:05:18,710
it and if you want to try to change that

00:05:16,610 --> 00:05:23,390
you're actually making a new commit in

00:05:18,710 --> 00:05:26,570
that new commit since the sha-1 you hash

00:05:23,390 --> 00:05:28,910
or checksum is based on the contents

00:05:26,570 --> 00:05:32,990
that new commit will have a completely

00:05:28,910 --> 00:05:34,700
separate and different chawan hash so

00:05:32,990 --> 00:05:36,710
when your manager comes do you say I

00:05:34,700 --> 00:05:39,650
need you to change this commit with this

00:05:36,710 --> 00:05:41,750
ID you can't and when you make the

00:05:39,650 --> 00:05:44,000
change it says wait no you I didn't want

00:05:41,750 --> 00:05:48,200
you to change the hash ID you can't you

00:05:44,000 --> 00:05:59,870
can't avoid that that's a good thing yes

00:05:48,200 --> 00:06:02,260
I got some thank you so other two other

00:05:59,870 --> 00:06:05,180
big important concepts a branch is

00:06:02,260 --> 00:06:08,630
simply a writable variable or reference

00:06:05,180 --> 00:06:10,760
that refers to commit it's rideable and

00:06:08,630 --> 00:06:12,440
that you can basically change the you

00:06:10,760 --> 00:06:15,710
can change which commits a branch points

00:06:12,440 --> 00:06:18,800
too so a branch is where your to where

00:06:15,710 --> 00:06:20,420
you typically do your work a tag is a

00:06:18,800 --> 00:06:22,730
read only variable it simply it's a

00:06:20,420 --> 00:06:25,820
read-only branch you can only create a

00:06:22,730 --> 00:06:28,040
tag and delete attack it is also mutable

00:06:25,820 --> 00:06:30,020
and this the tags are meant for when

00:06:28,040 --> 00:06:32,840
you're releasing a software version so

00:06:30,020 --> 00:06:33,689
yeah I want this is version 10 of the

00:06:32,840 --> 00:06:36,899
software

00:06:33,689 --> 00:06:40,019
okay you don't necessarily want to

00:06:36,899 --> 00:06:41,369
change what you called version 10 of the

00:06:40,019 --> 00:06:43,769
software if you're changing it you need

00:06:41,369 --> 00:06:49,709
to call it version you know 101 or

00:06:43,769 --> 00:06:51,689
whatever so other concepts the

00:06:49,709 --> 00:06:53,789
repository perhaps I should have led

00:06:51,689 --> 00:06:55,769
with this it's just simply a set of

00:06:53,789 --> 00:06:59,459
folders that contains the git commit

00:06:55,769 --> 00:07:01,889
history and optionally it contained can

00:06:59,459 --> 00:07:04,199
have a working folder I'll get into the

00:07:01,889 --> 00:07:06,419
difference in a moment but this also

00:07:04,199 --> 00:07:08,639
includes the branches the tags all the

00:07:06,419 --> 00:07:13,739
commits so the repository contains all

00:07:08,639 --> 00:07:16,199
the stuff that get manages now a remote

00:07:13,739 --> 00:07:19,349
and you can access this with the git

00:07:16,199 --> 00:07:23,039
remote command that is simply a link or

00:07:19,349 --> 00:07:25,739
a reference to appear git repo that has

00:07:23,039 --> 00:07:28,739
the same contents or should have similar

00:07:25,739 --> 00:07:30,239
contents to what you're managing there's

00:07:28,739 --> 00:07:33,299
also something called a tracking branch

00:07:30,239 --> 00:07:36,599
and a tracking branch or a branch that

00:07:33,299 --> 00:07:40,409
is tracking a remote repo is simply just

00:07:36,599 --> 00:07:42,779
a link says the branch foo and my github

00:07:40,409 --> 00:07:46,619
reit and my get repo is tracking wrench

00:07:42,779 --> 00:07:48,409
bar in someone else's repo so when you

00:07:46,619 --> 00:07:51,269
do start doing these synchronizations

00:07:48,409 --> 00:07:53,069
get knows okay these two are length I

00:07:51,269 --> 00:07:55,619
need to you know update these kind of in

00:07:53,069 --> 00:07:59,300
parallel so when you say do a sink this

00:07:55,619 --> 00:07:59,300
is how it knows which one's talked to

00:07:59,749 --> 00:08:07,409
all right concept hierarchy so a

00:08:04,499 --> 00:08:12,719
repository contains remotes branches and

00:08:07,409 --> 00:08:17,550
tags a remotes can link to tags or

00:08:12,719 --> 00:08:19,559
branches and then commits refer us and

00:08:17,550 --> 00:08:22,499
branches and tags refer to two commits

00:08:19,559 --> 00:08:26,849
and then commits refer to files folders

00:08:22,499 --> 00:08:28,019
and parent commits so to summarize got

00:08:26,849 --> 00:08:29,629
this wonderful little thing at the

00:08:28,019 --> 00:08:33,000
bottom this is the hierarchy from

00:08:29,629 --> 00:08:36,509
repository high level a repository to

00:08:33,000 --> 00:08:41,750
remote the branch / tag to commit the

00:08:36,509 --> 00:08:41,750
files and folders any questions so far

00:08:42,380 --> 00:08:45,380
okay

00:08:45,589 --> 00:08:51,329
I don't know if that's good or bad so

00:08:48,600 --> 00:08:52,589
when you're starting with get the first

00:08:51,329 --> 00:08:54,600
thing you have to do is you have to

00:08:52,589 --> 00:08:57,180
introduce yourself so you do a one-time

00:08:54,600 --> 00:08:59,730
setup you do a git config that's global

00:08:57,180 --> 00:09:01,110
you say you get you give your username

00:08:59,730 --> 00:09:04,199
you give your email address typically

00:09:01,110 --> 00:09:07,560
and then when you're setting up a

00:09:04,199 --> 00:09:10,350
repository you'll run get in it you just

00:09:07,560 --> 00:09:12,600
do this in a folder it any folder doing

00:09:10,350 --> 00:09:14,160
an empty folder actually preferably but

00:09:12,600 --> 00:09:15,720
you can do it even in a folder that

00:09:14,160 --> 00:09:18,899
you've got files in and then all of a

00:09:15,720 --> 00:09:20,250
sudden that is now a git repository so

00:09:18,899 --> 00:09:23,670
getting it that creates a git repository

00:09:20,250 --> 00:09:26,610
an empty one it doesn't delete any files

00:09:23,670 --> 00:09:28,050
though so that's good other things for

00:09:26,610 --> 00:09:32,610
working with files if you want to modify

00:09:28,050 --> 00:09:36,180
files you do a git add get remove get

00:09:32,610 --> 00:09:39,180
move for rename or to move a file around

00:09:36,180 --> 00:09:42,240
those kind of match to the linux or by

00:09:39,180 --> 00:09:44,430
equivalents if you want to manage the

00:09:42,240 --> 00:09:46,709
snapshots so when you want to save a

00:09:44,430 --> 00:09:49,100
snapshot you'll run git commit when

00:09:46,709 --> 00:09:52,230
you're doing querying you'll run git log

00:09:49,100 --> 00:09:54,959
another fun one let's get blame which

00:09:52,230 --> 00:09:56,819
has a very appropriate name and if

00:09:54,959 --> 00:09:58,380
you're doing if you happen to mess up

00:09:56,819 --> 00:10:01,769
and you want to discard changes you can

00:09:58,380 --> 00:10:04,199
run git reset or get check out depending

00:10:01,769 --> 00:10:07,339
on your circumstances I'm going to give

00:10:04,199 --> 00:10:10,470
you a live demo in a little bit and

00:10:07,339 --> 00:10:12,959
dealing with common remote commands so

00:10:10,470 --> 00:10:15,660
if you want to copy a remote repo you

00:10:12,959 --> 00:10:18,540
just do a git clone and the address of

00:10:15,660 --> 00:10:21,060
the repo that can be a local repo that

00:10:18,540 --> 00:10:25,050
can be an SSH URL that can be an HTTP

00:10:21,060 --> 00:10:26,430
URL it can be a get URL and then once

00:10:25,050 --> 00:10:28,800
you're done with that you do get check

00:10:26,430 --> 00:10:31,259
out origin master typically sometimes

00:10:28,800 --> 00:10:36,480
that's done for you automatically by the

00:10:31,259 --> 00:10:38,639
way master is the primary development

00:10:36,480 --> 00:10:41,639
head it's a very tip of development for

00:10:38,639 --> 00:10:43,949
when you're using a get it get repo so

00:10:41,639 --> 00:10:48,630
the very tip of your development is

00:10:43,949 --> 00:10:50,399
typically going to be master with some

00:10:48,630 --> 00:10:51,870
caveats that depending on how you how

00:10:50,399 --> 00:10:53,490
you develop if you're downloading

00:10:51,870 --> 00:10:55,709
changes so when you're talking between

00:10:53,490 --> 00:10:57,910
two different get repos you'll do a git

00:10:55,709 --> 00:11:02,410
pull or get pulled our ebay

00:10:57,910 --> 00:11:04,390
and you can also do a git fetch it's

00:11:02,410 --> 00:11:07,870
ironic a poll is actually a combination

00:11:04,390 --> 00:11:09,760
of a fetch and emerge and they get

00:11:07,870 --> 00:11:13,900
pulled a sherry base is a combination of

00:11:09,760 --> 00:11:15,130
a git fetch and they get rebase and if

00:11:13,900 --> 00:11:17,980
you want to upload your changes you've

00:11:15,130 --> 00:11:20,230
done all your your work say you were on

00:11:17,980 --> 00:11:22,750
the train and the tunnel under water

00:11:20,230 --> 00:11:25,420
somewhere you know you're in the end the

00:11:22,750 --> 00:11:27,430
end Arctic without internet and you did

00:11:25,420 --> 00:11:29,890
all your changes you want to save them

00:11:27,430 --> 00:11:32,560
you've done your commits you do get push

00:11:29,890 --> 00:11:34,510
and it sends them to the upstream server

00:11:32,560 --> 00:11:40,870
or whoever your you consider to be

00:11:34,510 --> 00:11:43,360
authoritative so here is my sample

00:11:40,870 --> 00:11:45,010
workflow this is what I recommend for

00:11:43,360 --> 00:11:48,250
people who are just getting started with

00:11:45,010 --> 00:11:52,270
get so first time you're going to do a

00:11:48,250 --> 00:11:53,920
get in it or a git clone so getting it

00:11:52,270 --> 00:11:56,050
is if you're starting a new project git

00:11:53,920 --> 00:12:00,430
clone is if you're copying an existing

00:11:56,050 --> 00:12:03,670
project you'll do get checked out of the

00:12:00,430 --> 00:12:06,760
master branch and the dash B says create

00:12:03,670 --> 00:12:09,970
a branch for me origin / master is the

00:12:06,760 --> 00:12:13,300
reference to the remote repository

00:12:09,970 --> 00:12:16,150
origin is considered your parent or your

00:12:13,300 --> 00:12:19,210
default here when you do get pull and

00:12:16,150 --> 00:12:23,050
get push and origin / master is the

00:12:19,210 --> 00:12:26,590
master branch of the remote peer origin

00:12:23,050 --> 00:12:28,630
as your default peer and then what

00:12:26,590 --> 00:12:29,860
you're doing is if you're a program are

00:12:28,630 --> 00:12:32,020
you going to sit down you say alright

00:12:29,860 --> 00:12:35,500
begin the day I'm going to do a get

00:12:32,020 --> 00:12:37,360
pulled ivory base pull it so that makes

00:12:35,500 --> 00:12:40,240
first off you want to have a clean

00:12:37,360 --> 00:12:42,190
repository nitto uncommitted files you

00:12:40,240 --> 00:12:44,500
come in you do a git pull dietary base

00:12:42,190 --> 00:12:48,040
so what that does is that downloads all

00:12:44,500 --> 00:12:50,260
the latest changes from your you your

00:12:48,040 --> 00:12:52,200
central repository or your friend or

00:12:50,260 --> 00:12:54,700
however you want to do development and

00:12:52,200 --> 00:12:57,370
then while you're working here edit your

00:12:54,700 --> 00:12:59,560
files you get add period which adds all

00:12:57,370 --> 00:13:01,600
the files in the current directory you

00:12:59,560 --> 00:13:05,440
do a git commit you can also do a git

00:13:01,600 --> 00:13:08,440
commit dot which is slightly electric

00:13:05,440 --> 00:13:11,140
redundant with get add git commit dot

00:13:08,440 --> 00:13:11,889
will actually commit any file any

00:13:11,140 --> 00:13:14,350
modified file

00:13:11,889 --> 00:13:18,129
that get already knows about but if you

00:13:14,350 --> 00:13:19,809
had a new file you need to get ad so you

00:13:18,129 --> 00:13:22,689
need both of those depending on how what

00:13:19,809 --> 00:13:24,999
you're doing then once you're done if

00:13:22,689 --> 00:13:26,589
you went through and you did some work

00:13:24,999 --> 00:13:28,809
you did it commits you did some work you

00:13:26,589 --> 00:13:30,399
did a commit and then when you're to a

00:13:28,809 --> 00:13:35,589
good stopping point you want to say all

00:13:30,399 --> 00:13:37,720
right I want to do get push and then you

00:13:35,589 --> 00:13:39,519
should be doing a git push and get pull

00:13:37,720 --> 00:13:42,519
fairly frequently possibly multiple

00:13:39,519 --> 00:13:43,899
times a day because that's how you're

00:13:42,519 --> 00:13:46,329
going to be collaborating with

00:13:43,899 --> 00:13:48,609
colleagues and if you have colleagues

00:13:46,329 --> 00:13:50,679
working on the same project on the same

00:13:48,609 --> 00:13:52,480
day you probably want to be integrating

00:13:50,679 --> 00:13:54,819
fairly often you want to be make sure

00:13:52,480 --> 00:13:57,879
that your have his latest copy of code

00:13:54,819 --> 00:14:01,529
and you have his latest copy if you

00:13:57,879 --> 00:14:04,389
don't synchronize fairly frequently and

00:14:01,529 --> 00:14:07,059
your colleague happens to touch a file

00:14:04,389 --> 00:14:10,059
that you've modified while you were

00:14:07,059 --> 00:14:11,679
working then you may or may not have a

00:14:10,059 --> 00:14:15,279
conflict and then you have to go resolve

00:14:11,679 --> 00:14:16,989
that so another reason to commit

00:14:15,279 --> 00:14:21,519
frequently is the first one to commit

00:14:16,989 --> 00:14:22,839
wins not the last one so if someone is

00:14:21,519 --> 00:14:24,759
playing by the rules and they're

00:14:22,839 --> 00:14:27,429
actually committing frequently and your

00:14:24,759 --> 00:14:28,809
kind of you know being a laggard and

00:14:27,429 --> 00:14:31,720
slowing down and not doing it very

00:14:28,809 --> 00:14:43,179
frequently it's on you to catch up not

00:14:31,720 --> 00:14:45,970
the other person yes the rebase yes is

00:14:43,179 --> 00:14:47,499
sorry thank you the question is what

00:14:45,970 --> 00:14:51,339
does it get what does get pulled SS

00:14:47,499 --> 00:14:53,829
rebase do or what is a rebase do in get

00:14:51,339 --> 00:14:58,269
parlance like I said your commits are

00:14:53,829 --> 00:15:00,639
simply a line of commits a branch or you

00:14:58,269 --> 00:15:04,860
have your get you get commit history you

00:15:00,639 --> 00:15:07,449
have commit the first commit ABCDEF ok

00:15:04,860 --> 00:15:09,220
get can get really interesting when you

00:15:07,449 --> 00:15:10,989
get into parallel lines of development

00:15:09,220 --> 00:15:14,039
you start doing merges when you have

00:15:10,989 --> 00:15:15,879
emerged you have two parallel lines of

00:15:14,039 --> 00:15:20,799
development you actually have a commit

00:15:15,879 --> 00:15:22,660
with two parents instead of one now when

00:15:20,799 --> 00:15:25,720
you do get pull you're doing actually

00:15:22,660 --> 00:15:27,430
doing a fetch which pulls that the

00:15:25,720 --> 00:15:29,860
data into your repository but doesn't

00:15:27,430 --> 00:15:33,279
update your branches yet and then you

00:15:29,860 --> 00:15:36,759
would get merge which is ok I want to

00:15:33,279 --> 00:15:39,220
take my friends remote branch master

00:15:36,759 --> 00:15:41,949
branch or whatever and then merge that

00:15:39,220 --> 00:15:45,430
into mine what that does that says all

00:15:41,949 --> 00:15:48,160
right my the latest commit on my master

00:15:45,430 --> 00:15:51,610
and the latest commit on his master it

00:15:48,160 --> 00:15:53,500
does some comparisons now if he hasn't

00:15:51,610 --> 00:15:55,480
updated his since the last time you did

00:15:53,500 --> 00:15:57,279
a git pull it does what's called a fast

00:15:55,480 --> 00:15:59,949
forward so your commit history is linear

00:15:57,279 --> 00:16:02,470
if you both been working at the same

00:15:59,949 --> 00:16:04,060
time then it doesn't merge it says okay

00:16:02,470 --> 00:16:05,410
I can't fast forward it I'm going to

00:16:04,060 --> 00:16:08,529
have to have a parent to commit with two

00:16:05,410 --> 00:16:11,730
parents if you do a rebase what that

00:16:08,529 --> 00:16:14,529
does that says okay take what he did and

00:16:11,730 --> 00:16:19,600
take what I did take where we branched

00:16:14,529 --> 00:16:22,360
off where we you we diverged uncouple my

00:16:19,600 --> 00:16:24,970
commit history from that point and then

00:16:22,360 --> 00:16:27,399
append it to the end of his so you can

00:16:24,970 --> 00:16:29,230
think of this raise your hand if you

00:16:27,399 --> 00:16:33,519
remember the old kids game with barrel

00:16:29,230 --> 00:16:35,350
of monkeys got a couple of hands you

00:16:33,519 --> 00:16:38,019
have all these little monkeys that are

00:16:35,350 --> 00:16:42,399
you or s hooks that are just hanging off

00:16:38,019 --> 00:16:45,370
one another now if you've got the merge

00:16:42,399 --> 00:16:47,680
you've got one that then becomes too and

00:16:45,370 --> 00:16:48,879
then comes back to one if you've got a

00:16:47,680 --> 00:16:52,389
rebase what you're doing is you're

00:16:48,879 --> 00:16:54,189
uncoupling those parallel the extra

00:16:52,389 --> 00:16:57,100
parallel branch and putting it down at

00:16:54,189 --> 00:17:00,160
the bottom that's what a rebase does I

00:16:57,100 --> 00:17:02,559
personally recommend rebase is this is

00:17:00,160 --> 00:17:06,069
just my personal opinion it keeps things

00:17:02,559 --> 00:17:08,409
linear it helps you avoid these really

00:17:06,069 --> 00:17:13,120
crazy commit histories that look like

00:17:08,409 --> 00:17:20,589
you know you know a subway map or a you

00:17:13,120 --> 00:17:27,390
a road map of Charlotte and this is like

00:17:20,589 --> 00:17:30,780
I said yes that

00:17:27,390 --> 00:17:32,430
correct the question was when you when

00:17:30,780 --> 00:17:34,290
you do a rebase is that changing the

00:17:32,430 --> 00:17:36,900
commits yes when you check when you

00:17:34,290 --> 00:17:38,670
rebase you get the different commits you

00:17:36,900 --> 00:17:43,890
get the different hats on hashes so you

00:17:38,670 --> 00:17:46,260
are changing the commit history what

00:17:43,890 --> 00:17:48,690
happens to the old ones the old ones

00:17:46,260 --> 00:17:50,670
actually stick around unless there is a

00:17:48,690 --> 00:17:52,500
reference to them otherwise they will

00:17:50,670 --> 00:17:57,060
gradually be garbage collected after

00:17:52,500 --> 00:17:59,160
many days so that's something to bear in

00:17:57,060 --> 00:18:01,080
mind actually do reading something and

00:17:59,160 --> 00:18:04,770
get and making it currently go away is

00:18:01,080 --> 00:18:08,780
quite difficult actually in a good way

00:18:04,770 --> 00:18:12,290
and actually get to that point so

00:18:08,780 --> 00:18:15,270
basically you get pulled a Jerry base

00:18:12,290 --> 00:18:16,830
unless there's a reason not to unless

00:18:15,270 --> 00:18:19,800
you know what you're doing there are

00:18:16,830 --> 00:18:22,170
more than one git repo or one more than

00:18:19,800 --> 00:18:23,730
one get workflow that's one of the

00:18:22,170 --> 00:18:25,910
things is confusing about people how do

00:18:23,730 --> 00:18:28,680
I do it well how do you want to do it

00:18:25,910 --> 00:18:31,470
get is not opinionated about how you're

00:18:28,680 --> 00:18:33,450
going to use git unlike CVS or

00:18:31,470 --> 00:18:36,510
subversion where you you have to use

00:18:33,450 --> 00:18:39,990
this exact workflow now get will let you

00:18:36,510 --> 00:18:45,900
pretty much merge pull whatever you want

00:18:39,990 --> 00:18:48,570
to do so couple best practices please

00:18:45,900 --> 00:18:51,360
don't store configuration along with

00:18:48,570 --> 00:18:54,560
your code in the same repo you can use

00:18:51,360 --> 00:18:57,180
git ignore files to help avoid that and

00:18:54,560 --> 00:18:59,700
please don't store secrets and get don't

00:18:57,180 --> 00:19:03,080
put passwords and get don't put SSH keys

00:18:59,700 --> 00:19:06,960
or crypto keys or anything else and get

00:19:03,080 --> 00:19:09,510
for several reasons first off is you

00:19:06,960 --> 00:19:11,700
know well ok you could look on github

00:19:09,510 --> 00:19:16,290
you'll see there's plenty of people who

00:19:11,700 --> 00:19:19,200
apparently got keys out there there I

00:19:16,290 --> 00:19:21,600
almost make an exception for if you've

00:19:19,200 --> 00:19:24,600
got an encrypted secret in there but

00:19:21,600 --> 00:19:26,970
still it's not so great the other thing

00:19:24,600 --> 00:19:30,150
is what you'll notice is if you are

00:19:26,970 --> 00:19:32,940
using get to manage your deployment

00:19:30,150 --> 00:19:36,000
workflow and you put something like say

00:19:32,940 --> 00:19:38,640
a database password in your commit

00:19:36,000 --> 00:19:40,170
history or in your your commits now

00:19:38,640 --> 00:19:41,250
suddenly when you thought you were doing

00:19:40,170 --> 00:19:43,080
development against

00:19:41,250 --> 00:19:45,330
the development my sequel server and

00:19:43,080 --> 00:19:46,710
then you go push to production and why

00:19:45,330 --> 00:19:48,390
did it suddenly switch to the production

00:19:46,710 --> 00:19:52,140
you know your production is now pointing

00:19:48,390 --> 00:19:53,880
out the development server so don't

00:19:52,140 --> 00:19:57,270
store your secrets and your

00:19:53,880 --> 00:20:00,060
configuration in the same git repo with

00:19:57,270 --> 00:20:02,100
your config if you want to put it in a

00:20:00,060 --> 00:20:04,560
separate repo split it up put it and pop

00:20:02,100 --> 00:20:11,010
it some other kind of config management

00:20:04,560 --> 00:20:15,240
tool so let's talk about cage match we

00:20:11,010 --> 00:20:19,260
put get versus subversion it has a full

00:20:15,240 --> 00:20:21,780
history in all the repositories so if

00:20:19,260 --> 00:20:24,900
you manage to lose one like you know

00:20:21,780 --> 00:20:26,730
someone you know if your server blows up

00:20:24,900 --> 00:20:29,970
you can take one of the development

00:20:26,730 --> 00:20:32,420
teams get repos and say you know fine

00:20:29,970 --> 00:20:35,790
we'll just you know stand up the server

00:20:32,420 --> 00:20:37,500
link them up you would get push your

00:20:35,790 --> 00:20:40,440
rockin and rollin that's everybody's

00:20:37,500 --> 00:20:41,940
kind of backing up everybody else for

00:20:40,440 --> 00:20:44,400
subversion you only have the latest

00:20:41,940 --> 00:20:47,670
check out now for some people this may

00:20:44,400 --> 00:20:49,380
be a benefit so that you know if some

00:20:47,670 --> 00:20:51,660
developers works diction or gets

00:20:49,380 --> 00:20:54,330
compromised you're only losing you know

00:20:51,660 --> 00:20:58,080
the latest copy the code not the entire

00:20:54,330 --> 00:21:00,390
history and get branching is fairly easy

00:20:58,080 --> 00:21:03,870
and subversion it's a little more

00:21:00,390 --> 00:21:05,730
difficult it's not as encouraged get has

00:21:03,870 --> 00:21:07,890
offline commits so you know like I said

00:21:05,730 --> 00:21:10,590
here in the on the train and the tunnel

00:21:07,890 --> 00:21:15,000
no net subversion you have to be online

00:21:10,590 --> 00:21:19,110
to do commits other big differences and

00:21:15,000 --> 00:21:21,300
get your commit ID as a sha-1 hash that

00:21:19,110 --> 00:21:24,570
really long obscure thing in subversion

00:21:21,300 --> 00:21:26,400
it's a nice increasing integer which

00:21:24,570 --> 00:21:31,010
people tend to like and miss when they

00:21:26,400 --> 00:21:35,270
go to from subversion to get okay

00:21:31,010 --> 00:21:37,710
various sources of confusion there is no

00:21:35,270 --> 00:21:41,220
like I said there's no predefined source

00:21:37,710 --> 00:21:44,310
of truth and when dealing with multiple

00:21:41,220 --> 00:21:46,380
git repositories you know which one is

00:21:44,310 --> 00:21:48,900
the master which one is the the

00:21:46,380 --> 00:21:51,600
authority any of them whichever which

00:21:48,900 --> 00:21:52,900
one do you want it to be you know I mean

00:21:51,600 --> 00:21:56,110
I can

00:21:52,900 --> 00:21:58,660
I've done interesting things we're okay

00:21:56,110 --> 00:22:01,330
you know we're pushing to a shared

00:21:58,660 --> 00:22:02,740
repository and someone says hey I've got

00:22:01,330 --> 00:22:04,420
to change over here and I want you to

00:22:02,740 --> 00:22:06,460
look at it well I don't that's not quite

00:22:04,420 --> 00:22:08,200
ready to go into the shared repository

00:22:06,460 --> 00:22:10,570
yet I'm just going to pull it directly

00:22:08,200 --> 00:22:13,600
from your repo give it and then I can

00:22:10,570 --> 00:22:16,870
push it into the shared and it's just as

00:22:13,600 --> 00:22:19,660
if he had a you know he had pushed it

00:22:16,870 --> 00:22:22,990
directly it doesn't really matter like I

00:22:19,660 --> 00:22:27,250
said there's no one true workflow I know

00:22:22,990 --> 00:22:29,020
I said use fetch and rebase there are

00:22:27,250 --> 00:22:32,440
plenty of workflows you know there's

00:22:29,020 --> 00:22:33,730
it's just how you want to work and it's

00:22:32,440 --> 00:22:36,070
one of the confusing things as you know

00:22:33,730 --> 00:22:45,490
what's the right way there is no right

00:22:36,070 --> 00:22:47,500
way yes have I tried setting up a repo

00:22:45,490 --> 00:22:50,020
on google drive space no I wouldn't

00:22:47,500 --> 00:22:52,540
recommend that i would just recommend

00:22:50,020 --> 00:22:56,470
anything that looks like a POSIX ish

00:22:52,540 --> 00:22:59,650
file system I've had it on like an SMB

00:22:56,470 --> 00:23:03,090
share you know anything you'd amount as

00:22:59,650 --> 00:23:05,200
a file system that's the big thing I

00:23:03,090 --> 00:23:08,350
would not recommend doing it in

00:23:05,200 --> 00:23:10,360
something like Dropbox it because if you

00:23:08,350 --> 00:23:12,990
did sit in something like Dropbox then

00:23:10,360 --> 00:23:15,760
you'd have to start you'd almost have to

00:23:12,990 --> 00:23:17,350
call each other email each other or text

00:23:15,760 --> 00:23:18,430
each other saying all right are you done

00:23:17,350 --> 00:23:20,650
with it yet because I need to do a

00:23:18,430 --> 00:23:23,440
commit because when you start making

00:23:20,650 --> 00:23:26,590
these modifications get can no longer

00:23:23,440 --> 00:23:29,440
control you know what the container

00:23:26,590 --> 00:23:31,960
consistency is so you may lose some data

00:23:29,440 --> 00:23:34,360
in those kinds of situations i've had

00:23:31,960 --> 00:23:38,890
people i've seen people tend to use

00:23:34,360 --> 00:23:41,890
dropbox as a shared network share and

00:23:38,890 --> 00:23:44,350
try to use it to share files and i've

00:23:41,890 --> 00:23:50,410
seen them lose data it's not meant for

00:23:44,350 --> 00:23:53,080
that there is no locking so other things

00:23:50,410 --> 00:23:55,030
deleted things and get are still in the

00:23:53,080 --> 00:23:58,330
archive so when you delete a file you're

00:23:55,030 --> 00:24:00,370
only deleting it from the latest view or

00:23:58,330 --> 00:24:02,770
the latest snapshot you can go back in

00:24:00,370 --> 00:24:05,830
time and find that snapshot it's not a

00:24:02,770 --> 00:24:06,700
big deal it's not lost and like I said

00:24:05,830 --> 00:24:09,280
try and act

00:24:06,700 --> 00:24:11,470
she delete something at like going back

00:24:09,280 --> 00:24:13,630
to the password thing don't commit your

00:24:11,470 --> 00:24:16,570
passwords if you accidentally commit a

00:24:13,630 --> 00:24:19,510
password it's a pain to actually really

00:24:16,570 --> 00:24:20,860
get it out of there you made it first

00:24:19,510 --> 00:24:23,260
off you might as well write it off and

00:24:20,860 --> 00:24:25,750
change it everywhere anyway the second

00:24:23,260 --> 00:24:28,060
thing is trying to go back and now you

00:24:25,750 --> 00:24:30,700
say all right who has the copy of that

00:24:28,060 --> 00:24:33,010
git repo we have to go change the git

00:24:30,700 --> 00:24:37,510
repo and then get all the developers to

00:24:33,010 --> 00:24:39,610
now reset their repos to the new history

00:24:37,510 --> 00:24:42,090
you're rewriting history you have to get

00:24:39,610 --> 00:24:45,400
everybody to kind of agree to go by that

00:24:42,090 --> 00:24:46,990
and it takes me to my third or fourth

00:24:45,400 --> 00:24:50,410
bullet point history is not easily

00:24:46,990 --> 00:24:54,310
rewritten you can do it it's an advanced

00:24:50,410 --> 00:24:56,230
topic like I said you may end up having

00:24:54,310 --> 00:24:58,450
to find that out the hard way and learn

00:24:56,230 --> 00:25:01,360
how to do it because like I said someone

00:24:58,450 --> 00:25:06,340
to the password but removed objects

00:25:01,360 --> 00:25:08,170
actually still persist and rewrites if

00:25:06,340 --> 00:25:11,170
you don't want people to rewrite history

00:25:08,170 --> 00:25:14,230
you can actually set your receiving your

00:25:11,170 --> 00:25:17,500
remote repo to reject these rewrite

00:25:14,230 --> 00:25:20,110
attempts so if you want to actually have

00:25:17,500 --> 00:25:21,490
a you know if people your manager says I

00:25:20,110 --> 00:25:23,560
want an audit trail and I don't want

00:25:21,490 --> 00:25:28,180
anyone to go back and change you know

00:25:23,560 --> 00:25:29,680
what version 10 says then yeah the

00:25:28,180 --> 00:25:31,960
developer can do it on his workstation

00:25:29,680 --> 00:25:35,740
but when he tries to push to the shared

00:25:31,960 --> 00:25:37,540
you know source the authority you have a

00:25:35,740 --> 00:25:39,970
setting it says nope I'm not going to

00:25:37,540 --> 00:25:41,950
accept that that's not a standard

00:25:39,970 --> 00:25:47,080
forward progression what's called a fast

00:25:41,950 --> 00:25:49,480
forward and other things when you delete

00:25:47,080 --> 00:25:53,470
something our window as Richard said

00:25:49,480 --> 00:25:55,090
when you re base or when you do the all

00:25:53,470 --> 00:25:58,840
these various rewriting things of

00:25:55,090 --> 00:26:01,630
history the commits actually sticks

00:25:58,840 --> 00:26:03,730
around it it's actually a garbage

00:26:01,630 --> 00:26:06,430
collected many days later I think by

00:26:03,730 --> 00:26:09,640
default it's 30 days so for some reason

00:26:06,430 --> 00:26:12,220
you manage have somehow managed to screw

00:26:09,640 --> 00:26:13,960
up a branch and delete it a couple times

00:26:12,220 --> 00:26:15,460
I've gone back in my shell history it's

00:26:13,960 --> 00:26:17,770
like oh wait I've didn't mean to delete

00:26:15,460 --> 00:26:19,730
that I'll go back in my shell history

00:26:17,770 --> 00:26:22,070
find the commit ID

00:26:19,730 --> 00:26:25,220
and just check that out or reset to that

00:26:22,070 --> 00:26:27,890
and it's there it never actually got

00:26:25,220 --> 00:26:34,010
lost it just lost the reference to that

00:26:27,890 --> 00:26:35,210
commit so get clients of I like I

00:26:34,010 --> 00:26:37,570
personally prefer the command line

00:26:35,210 --> 00:26:40,580
that's included in all the links distros

00:26:37,570 --> 00:26:43,820
burgoo ease you have several options of

00:26:40,580 --> 00:26:45,830
the default is get k that's a visualizer

00:26:43,820 --> 00:26:48,830
that tends to come with get and all the

00:26:45,830 --> 00:26:52,040
repos you typically have get support in

00:26:48,830 --> 00:26:55,010
most of the ides eclipse Emacs them they

00:26:52,040 --> 00:26:57,800
all support get if you're using Windows

00:26:55,010 --> 00:26:59,810
you can use tortoise kid that's what

00:26:57,800 --> 00:27:02,210
we're using at work although just be

00:26:59,810 --> 00:27:04,460
careful tortoise get comes from

00:27:02,210 --> 00:27:06,620
subversion land so some of the

00:27:04,460 --> 00:27:09,860
terminology doesn't match the command

00:27:06,620 --> 00:27:13,430
line get client specifically your get

00:27:09,860 --> 00:27:16,460
reset and get revert don't do exactly

00:27:13,430 --> 00:27:23,390
what you might think they do so just be

00:27:16,460 --> 00:27:28,430
aware and now we have the demo wonderful

00:27:23,390 --> 00:27:31,790
demos alright so here I just have a

00:27:28,430 --> 00:27:36,110
folder called get I have an empty folder

00:27:31,790 --> 00:27:41,900
it doesn't really matter I can actually

00:27:36,110 --> 00:27:45,200
just go ahead and create a file alright

00:27:41,900 --> 00:27:48,590
so now my folder has one file I've not

00:27:45,200 --> 00:27:55,060
done anything with get yet do I need to

00:27:48,590 --> 00:27:55,060
introduce myself to get

00:28:01,940 --> 00:28:07,509
ok so that's my name throw in my email

00:28:12,100 --> 00:28:23,750
all right I do you get config that

00:28:20,600 --> 00:28:29,690
she'll ok so it remembers me but do get

00:28:23,750 --> 00:28:31,490
a net ok I got an empty repo so here is

00:28:29,690 --> 00:28:34,179
where you actually have your get file

00:28:31,490 --> 00:28:38,149
stored it's stored in the dot git folder

00:28:34,179 --> 00:28:44,649
and you'll see a lots of stuff under

00:28:38,149 --> 00:28:44,649
there yes

00:28:49,220 --> 00:28:52,539
yeah we do that

00:29:01,789 --> 00:29:06,200
you

00:29:03,810 --> 00:29:06,200
the better

00:29:09,030 --> 00:29:20,090
oh that yeah the Ale yeah okay

00:29:26,190 --> 00:29:35,600
there we go how's that okay

00:29:47,380 --> 00:29:49,590
ok

00:29:51,049 --> 00:29:56,789
so now we have my far folder and we have

00:29:54,840 --> 00:29:59,940
a dot get folder God get is where all

00:29:56,789 --> 00:30:01,230
the get stuff is stored so you don't

00:29:59,940 --> 00:30:03,870
really want to be messing with the dot

00:30:01,230 --> 00:30:05,190
get folder there's one folder and get

00:30:03,870 --> 00:30:06,720
that you can actually play around with

00:30:05,190 --> 00:30:12,659
that's the hooks folder everything else

00:30:06,720 --> 00:30:15,090
is off limits so now if I do get log it

00:30:12,659 --> 00:30:20,549
says hey there's nothing here so I'm

00:30:15,090 --> 00:30:23,039
going to go ahead and add my files let's

00:30:20,549 --> 00:30:24,720
run git status i could get add period

00:30:23,039 --> 00:30:26,669
which i will add the current folder and

00:30:24,720 --> 00:30:29,610
everything under it so that adds the

00:30:26,669 --> 00:30:32,039
file called bar I want to do get status

00:30:29,610 --> 00:30:37,049
it says okay when you commit I'm going

00:30:32,039 --> 00:30:41,809
to commit new file bar I do git commit

00:30:37,049 --> 00:30:41,809
it asked me for a description

00:30:50,250 --> 00:30:56,400
okay so now if I do get log it says okay

00:30:54,300 --> 00:30:58,950
I added bar and you'll notice here's

00:30:56,400 --> 00:31:01,560
your commit ID you know that's sha-1

00:30:58,950 --> 00:31:03,330
hash you can use the whole thing or you

00:31:01,560 --> 00:31:05,550
know some part of it the prefix you

00:31:03,330 --> 00:31:08,400
usually five to eight characters is good

00:31:05,550 --> 00:31:10,290
enough to reference a hash it says who

00:31:08,400 --> 00:31:12,570
did it you know okay John Doe did it

00:31:10,290 --> 00:31:15,360
when was it done what was the

00:31:12,570 --> 00:31:18,330
description when you do your get commit

00:31:15,360 --> 00:31:20,250
it is best practice to add a very good

00:31:18,330 --> 00:31:23,130
description don't say that I you know

00:31:20,250 --> 00:31:25,620
tweak the file or I added a new line kit

00:31:23,130 --> 00:31:29,850
will tell you get diff will show me that

00:31:25,620 --> 00:31:34,650
tell me the business logic I fixed issue

00:31:29,850 --> 00:31:36,900
number three four five or you know I you

00:31:34,650 --> 00:31:40,050
know change the background color to bada

00:31:36,900 --> 00:31:43,050
compliant or I fixed the bug you know

00:31:40,050 --> 00:31:46,500
where you know the private customers

00:31:43,050 --> 00:31:53,370
were not receiving orders something that

00:31:46,500 --> 00:31:57,360
actually makes sense if I do get show it

00:31:53,370 --> 00:31:59,850
says okay it says here's a commit here's

00:31:57,360 --> 00:32:05,100
the author here's the description and

00:31:59,850 --> 00:32:07,260
then here's the diff and it says that i

00:32:05,100 --> 00:32:10,380
went from dev null which was i didn't

00:32:07,260 --> 00:32:18,710
went from nothing and i added the line

00:32:10,380 --> 00:32:21,270
foo and if i add change the file again I

00:32:18,710 --> 00:32:28,500
can do get status as hey the files

00:32:21,270 --> 00:32:31,410
modified can also do a git diff it says

00:32:28,500 --> 00:32:33,810
okay you standard if output lines are

00:32:31,410 --> 00:32:38,000
moved lines replaced or lines added I

00:32:33,810 --> 00:32:38,000
can do another gimmick commit

00:32:48,110 --> 00:32:53,460
other things and this is basically the

00:32:51,300 --> 00:32:55,680
way you're going to go doing your

00:32:53,460 --> 00:32:58,620
development you make changes you commit

00:32:55,680 --> 00:33:01,380
so you make changes you get ad you get

00:32:58,620 --> 00:33:04,940
removed you get move then you commit you

00:33:01,380 --> 00:33:04,940
keep doing this over and over and over

00:33:05,300 --> 00:33:12,690
now let's say that I'm doing development

00:33:08,100 --> 00:33:16,890
someone else I want to clone so I'm

00:33:12,690 --> 00:33:20,910
going to do git clone my source to my

00:33:16,890 --> 00:33:22,860
destination now it doesn't matter that

00:33:20,910 --> 00:33:28,950
I'm local this could be done from github

00:33:22,860 --> 00:33:31,950
or an HTTP site in fact if you just take

00:33:28,950 --> 00:33:34,740
a git repo and copy it into a

00:33:31,950 --> 00:33:37,830
web-accessible folder you can then do a

00:33:34,740 --> 00:33:40,380
get check out from that folder so if

00:33:37,830 --> 00:33:42,570
you're running Apache stuff with public

00:33:40,380 --> 00:33:45,780
underscore HTML user directories be

00:33:42,570 --> 00:33:48,110
careful you may or may not want to you

00:33:45,780 --> 00:33:51,030
know blacklist the dot git folder

00:33:48,110 --> 00:33:52,860
because you may think you know oh hey

00:33:51,030 --> 00:33:56,160
I've got my PHP code no one can get to

00:33:52,860 --> 00:33:57,300
that yeah if you've got your application

00:33:56,160 --> 00:33:59,190
sitting out there and you have the duck

00:33:57,300 --> 00:34:01,830
get folder and it's sitting in the web

00:33:59,190 --> 00:34:03,750
accessible folder and readable then

00:34:01,830 --> 00:34:07,220
someone can just go oh I'm going to do a

00:34:03,750 --> 00:34:10,560
git checkout pull the entire history and

00:34:07,220 --> 00:34:12,600
if you were a bad boy and committed your

00:34:10,560 --> 00:34:19,740
passwords they just got your database

00:34:12,600 --> 00:34:23,880
password so other fun stuff so now can

00:34:19,740 --> 00:34:29,520
go to get to and if I do get remote it

00:34:23,880 --> 00:34:34,500
says okay there's the origin I can say

00:34:29,520 --> 00:34:40,410
well where did or sorry good where did

00:34:34,500 --> 00:34:43,869
the origin come from it says okay what

00:34:40,410 --> 00:34:49,539
did i do there

00:34:43,869 --> 00:34:51,700
repo is from that path no problem and

00:34:49,539 --> 00:34:53,829
you can have a different fetch and push

00:34:51,700 --> 00:34:56,259
your else so that's kind of cool you can

00:34:53,829 --> 00:34:58,990
also have multiple remotes so for

00:34:56,259 --> 00:35:01,509
example I sometimes have an what I call

00:34:58,990 --> 00:35:04,749
an upstream remote so maybe i'm doing

00:35:01,509 --> 00:35:07,900
i'm working on github I'll have push and

00:35:04,749 --> 00:35:09,880
pull to my personal repo then I have an

00:35:07,900 --> 00:35:12,220
upstream so then I can incorporate their

00:35:09,880 --> 00:35:15,190
changes into mine make sure it works

00:35:12,220 --> 00:35:18,279
push to my remote repo and then request

00:35:15,190 --> 00:35:20,470
that they pull up to theirs so like I

00:35:18,279 --> 00:35:24,910
said I'll repose our peers you can have

00:35:20,470 --> 00:35:26,499
this very organic workflow of the

00:35:24,910 --> 00:35:30,059
sinking going between them with the push

00:35:26,499 --> 00:35:33,999
in the pole now let's say that I've done

00:35:30,059 --> 00:35:36,450
my changes I want to now add more

00:35:33,999 --> 00:35:36,450
changes

00:35:44,890 --> 00:36:01,810
committing all right so now wow that's

00:35:59,300 --> 00:36:01,810


00:36:06,099 --> 00:36:08,729
really

00:36:29,100 --> 00:36:32,000
aqua

00:36:46,309 --> 00:36:48,309
ah

00:36:58,190 --> 00:37:01,670
the best plans

00:37:10,310 --> 00:37:13,640
yes it is

00:37:18,470 --> 00:37:27,480
or or configure or configured to forward

00:37:21,780 --> 00:37:30,500
x11 by default yes there is I was

00:37:27,480 --> 00:37:30,500
hitting function key instead

00:37:40,610 --> 00:37:43,630
I swear

00:37:47,660 --> 00:37:51,039
oh come on really

00:37:55,920 --> 00:38:05,170
okay so I seem to be thwarted by my own

00:38:00,010 --> 00:38:07,180
password so the key thing is that you

00:38:05,170 --> 00:38:11,740
can you basically run through you to get

00:38:07,180 --> 00:38:17,460
ad get removed get pull it push it's all

00:38:11,740 --> 00:38:17,460
good let me go to the non demo portion

00:38:19,080 --> 00:38:25,540
so get hosting if you want to have your

00:38:22,570 --> 00:38:28,930
get repo hosted you can do it big

00:38:25,540 --> 00:38:30,670
they're going to go to its github it has

00:38:28,930 --> 00:38:34,000
free and unlimited repose for open

00:38:30,670 --> 00:38:35,950
source projects you can pay if you want

00:38:34,000 --> 00:38:37,990
to have a closed project so if you don't

00:38:35,950 --> 00:38:39,850
want to be sharing if you wanna use it

00:38:37,990 --> 00:38:42,730
for commercial development you need to

00:38:39,850 --> 00:38:44,410
pay to do that and it's pretty much the

00:38:42,730 --> 00:38:47,980
de facto standard for open source

00:38:44,410 --> 00:38:49,530
collaboration so by that you everybody's

00:38:47,980 --> 00:38:52,200
just throwing a code up on github

00:38:49,530 --> 00:38:54,550
another option is atlassian bitbucket

00:38:52,200 --> 00:38:56,860
you can have a free project for up to

00:38:54,550 --> 00:39:00,010
five collaborators I believe they also

00:38:56,860 --> 00:39:01,660
have the free you know open source model

00:39:00,010 --> 00:39:04,810
but you still have the collaborator

00:39:01,660 --> 00:39:08,400
limit so you can have a closed repo in

00:39:04,810 --> 00:39:12,640
bitbucket if you want to go that route

00:39:08,400 --> 00:39:14,110
self-hosted get you can have the

00:39:12,640 --> 00:39:16,900
interesting thing is if you want how to

00:39:14,110 --> 00:39:19,060
get repo or get server all you really

00:39:16,900 --> 00:39:20,860
need is to have a folder that's head get

00:39:19,060 --> 00:39:23,080
and it run on it sitting on an ssh

00:39:20,860 --> 00:39:25,600
server somewhere and then you just have

00:39:23,080 --> 00:39:28,510
an SSH account you give it the server

00:39:25,600 --> 00:39:30,730
name the path to the git folder and you

00:39:28,510 --> 00:39:34,030
do get check out and clone that way

00:39:30,730 --> 00:39:36,730
that's all you need granted you're

00:39:34,030 --> 00:39:38,770
you're you get user at that point has

00:39:36,730 --> 00:39:43,210
login privileges but that's the minimum

00:39:38,770 --> 00:39:44,830
needed for doing yes you can push that

00:39:43,210 --> 00:39:48,460
way if you're doing a push to a git

00:39:44,830 --> 00:39:51,100
folder and remote there's two types of

00:39:48,460 --> 00:39:53,020
get folders you can have a bear repo or

00:39:51,100 --> 00:39:55,870
what's what I've been showing you is

00:39:53,020 --> 00:39:58,930
just a normal get an it repo it's called

00:39:55,870 --> 00:40:01,180
non bear and what that means is a bear

00:39:58,930 --> 00:40:04,210
repo does not have a dot git folder that

00:40:01,180 --> 00:40:07,360
get folder is the root folder of the

00:40:04,210 --> 00:40:09,310
project it has no working folder so you

00:40:07,360 --> 00:40:11,740
can't sit there and do a get and

00:40:09,310 --> 00:40:13,540
remove you have to do that from some

00:40:11,740 --> 00:40:16,810
what you have to do git clone of the

00:40:13,540 --> 00:40:19,270
bear repo and then do all your work in

00:40:16,810 --> 00:40:21,250
the clone get a hag here remove git

00:40:19,270 --> 00:40:26,430
commit get push and then it comes back

00:40:21,250 --> 00:40:30,310
into their word of caution by default

00:40:26,430 --> 00:40:33,010
when you push into a repo the working

00:40:30,310 --> 00:40:34,390
folder does not get updated so if you

00:40:33,010 --> 00:40:35,770
push to someone else's replay you're

00:40:34,390 --> 00:40:37,870
wondering hey where are the changes i do

00:40:35,770 --> 00:40:39,820
get longer there there but i do get

00:40:37,870 --> 00:40:42,730
status and it has all these weird

00:40:39,820 --> 00:40:44,530
differences there are some hooks some

00:40:42,730 --> 00:40:47,170
get hook scripts that are triggers that

00:40:44,530 --> 00:40:51,270
are run on certain events it's the dot

00:40:47,170 --> 00:40:53,620
get / hooks folder and there are various

00:40:51,270 --> 00:40:56,260
hook scripts out there you can have it

00:40:53,620 --> 00:40:58,300
set to email you you know when changes

00:40:56,260 --> 00:41:00,760
are pushed or automatically check out

00:40:58,300 --> 00:41:02,650
the working folder when changes are

00:41:00,760 --> 00:41:08,370
pushed we actually use that workflow at

00:41:02,650 --> 00:41:08,370
work that answer your question okay

00:41:09,060 --> 00:41:13,840
stealth has to get if you actually don't

00:41:12,190 --> 00:41:16,510
want to use a hosted service like I said

00:41:13,840 --> 00:41:19,270
the ssh server you can also use get a

00:41:16,510 --> 00:41:21,880
light get lab has a community edition if

00:41:19,270 --> 00:41:28,810
you want non-free get lab has pay you

00:41:21,880 --> 00:41:31,270
have at lysine slot atlassian stash more

00:41:28,810 --> 00:41:33,820
reading if you want to get help do you

00:41:31,270 --> 00:41:35,830
man get or man get dash command for

00:41:33,820 --> 00:41:38,020
example if you want to understand what

00:41:35,830 --> 00:41:42,160
are the options to get commit you do man

00:41:38,020 --> 00:41:45,460
space get dash commit or man get man

00:41:42,160 --> 00:41:47,320
space get dash add that's how all the

00:41:45,460 --> 00:41:50,320
git commands are documented on your

00:41:47,320 --> 00:41:53,380
local linux system the get website is

00:41:50,320 --> 00:41:56,650
get dash sem calm and the pro get book

00:41:53,380 --> 00:42:03,850
which is available for free online is on

00:41:56,650 --> 00:42:11,650
also on the get website and i believe

00:42:03,850 --> 00:42:14,640
that is it any questions i do apologize

00:42:11,650 --> 00:42:14,640
for the aborted demo

00:42:27,220 --> 00:42:32,050
okay the question is can I talk a little

00:42:29,710 --> 00:42:34,330
bit about more about hooks and what they

00:42:32,050 --> 00:42:37,270
can do and how they can do it I'm a

00:42:34,330 --> 00:42:39,190
little unfamiliar with hooks the ones

00:42:37,270 --> 00:42:41,770
we've overloaded our post receive and

00:42:39,190 --> 00:42:43,780
post update if you go in your dot get

00:42:41,770 --> 00:42:47,230
you do get in that in a folder and you

00:42:43,780 --> 00:42:49,990
go into dot get / hooks there are eight

00:42:47,230 --> 00:42:51,430
different sample get hook scripts you

00:42:49,990 --> 00:42:56,080
can go on the internet and find plenty

00:42:51,430 --> 00:42:58,090
of them but basically there are about

00:42:56,080 --> 00:43:00,070
eight different actions you can have a

00:42:58,090 --> 00:43:03,900
script run it says all right when this

00:43:00,070 --> 00:43:07,150
action happens you will do something and

00:43:03,900 --> 00:43:10,359
in your specific example you're

00:43:07,150 --> 00:43:11,950
wondering all can I do something on mass

00:43:10,359 --> 00:43:13,750
you know when someone pushes the master

00:43:11,950 --> 00:43:16,690
or when someone pushes to a certain

00:43:13,750 --> 00:43:18,670
branch I'm pretty sure that's doable in

00:43:16,690 --> 00:43:23,020
fact what you can do is you can say on

00:43:18,670 --> 00:43:25,270
update when someone does a push to the

00:43:23,020 --> 00:43:27,550
remote repo in the remote repo you have

00:43:25,270 --> 00:43:30,160
a hook that says all right before I

00:43:27,550 --> 00:43:32,140
actually receive it and save it I'm

00:43:30,160 --> 00:43:35,740
going to do some operations I'm going to

00:43:32,140 --> 00:43:37,030
run it through a syntax scanner or I'm

00:43:35,740 --> 00:43:41,410
going to make sure that came from the

00:43:37,030 --> 00:43:42,849
right person that type of thing you have

00:43:41,410 --> 00:43:44,050
a full environment a full shell

00:43:42,849 --> 00:43:49,510
environment you can do pretty much

00:43:44,050 --> 00:43:51,640
whatever you want things we're doing it

00:43:49,510 --> 00:43:54,250
for as we will do a git checkout in the

00:43:51,640 --> 00:43:56,320
working directory so when you push the

00:43:54,250 --> 00:44:00,430
master isn't so he doesn't get check out

00:43:56,320 --> 00:44:03,460
in the working directory on receive we

00:44:00,430 --> 00:44:07,030
do a send an email to a configured list

00:44:03,460 --> 00:44:09,070
of people something else there's a

00:44:07,030 --> 00:44:12,099
pre-commit hook which is fairly common

00:44:09,070 --> 00:44:14,800
I've used that and things like making

00:44:12,099 --> 00:44:17,380
sure that you have a license file or a

00:44:14,800 --> 00:44:20,170
license declaration in each commit or in

00:44:17,380 --> 00:44:22,750
the repo that's where you could also do

00:44:20,170 --> 00:44:23,920
now that happens in your local repo so

00:44:22,750 --> 00:44:25,930
you can do things like all right make

00:44:23,920 --> 00:44:28,080
sure that we run the style checker the

00:44:25,930 --> 00:44:30,339
syntax checker make sure it matches that

00:44:28,080 --> 00:44:32,230
you're doing puppet that would be a good

00:44:30,339 --> 00:44:35,530
thing to do just have it run through

00:44:32,230 --> 00:44:38,380
that pretty much you can do whatever you

00:44:35,530 --> 00:44:41,640
want through a hook so long as you can

00:44:38,380 --> 00:44:41,640
write a script to do it

00:44:41,750 --> 00:44:44,750
yes

00:45:01,260 --> 00:45:05,830
okay so what happens the question is

00:45:03,520 --> 00:45:08,530
what happen you are in a team

00:45:05,830 --> 00:45:11,530
environment and your coworker commits

00:45:08,530 --> 00:45:13,720
and you or put already pushed and then

00:45:11,530 --> 00:45:17,250
you're trying to push after him what

00:45:13,720 --> 00:45:19,690
happens is when you push it will reject

00:45:17,250 --> 00:45:23,440
the commits you'll say that is not a

00:45:19,690 --> 00:45:25,510
fast forward that is not acceptable so

00:45:23,440 --> 00:45:27,520
it when you you get you can still

00:45:25,510 --> 00:45:28,810
continue to commit it's not going to

00:45:27,520 --> 00:45:30,010
prevent you from doing that what it's

00:45:28,810 --> 00:45:32,470
going to do is it's going to throw you

00:45:30,010 --> 00:45:34,990
an error when you push thing all right

00:45:32,470 --> 00:45:37,750
I'm not going to take these changes so

00:45:34,990 --> 00:45:40,150
now it's upon you this the guy that

00:45:37,750 --> 00:45:42,490
comes after say all right I'm going now

00:45:40,150 --> 00:45:46,000
going to do a get pull rebase or get

00:45:42,490 --> 00:45:47,680
pull and you emerge and then after

00:45:46,000 --> 00:45:50,110
you've done that step assuming no

00:45:47,680 --> 00:45:54,030
conflicts then you can do another get

00:45:50,110 --> 00:45:54,030
push and behave it be accepted

00:46:16,010 --> 00:46:21,420
how do you avoid conflict um so the

00:46:18,990 --> 00:46:23,130
question is when your coworker and you

00:46:21,420 --> 00:46:26,339
change the same line and the same file

00:46:23,130 --> 00:46:28,859
how our conflicts avoided get is very

00:46:26,339 --> 00:46:32,400
smart and that when you do first off

00:46:28,859 --> 00:46:36,240
someone had to push first so when they

00:46:32,400 --> 00:46:39,150
push then they will do their changes

00:46:36,240 --> 00:46:41,520
were accepted now if you make the change

00:46:39,150 --> 00:46:43,470
after him if you do get if you he pushed

00:46:41,520 --> 00:46:45,000
and then you pulled and you did the

00:46:43,470 --> 00:46:48,480
change in push that's fine those are

00:46:45,000 --> 00:46:51,570
that's in order but if you had both had

00:46:48,480 --> 00:46:53,940
done a pole at one point in time he does

00:46:51,570 --> 00:46:56,339
changes you do changes on the same line

00:46:53,940 --> 00:46:58,230
of the same file and then after you

00:46:56,339 --> 00:47:01,080
words you commit and try to push you'll

00:46:58,230 --> 00:47:03,270
get a rejection and then when you try to

00:47:01,080 --> 00:47:05,490
put when you try to pull you'll get a

00:47:03,270 --> 00:47:08,400
conflict it will warn you about that

00:47:05,490 --> 00:47:11,250
says hey stupid you know this same felt

00:47:08,400 --> 00:47:13,830
line the same file changed I don't know

00:47:11,250 --> 00:47:15,210
how to resolve this you do it and what

00:47:13,830 --> 00:47:17,849
happens is when you look at that file

00:47:15,210 --> 00:47:20,190
now we need to get statuses conflicts

00:47:17,849 --> 00:47:22,920
these list of files when you open those

00:47:20,190 --> 00:47:24,990
files you'll have a essentially the

00:47:22,920 --> 00:47:26,820
old-style RCS markers with a bunch of

00:47:24,990 --> 00:47:29,790
greater than to less than say this is

00:47:26,820 --> 00:47:31,650
where the branch if this this region of

00:47:29,790 --> 00:47:34,220
the file is where things got messed up

00:47:31,650 --> 00:47:37,650
here's your version here's his version

00:47:34,220 --> 00:47:40,710
fix it and it's up to you to go edit it

00:47:37,650 --> 00:47:44,220
and then remove all the conflict markers

00:47:40,710 --> 00:47:50,300
say or save it get add git commit get

00:47:44,220 --> 00:47:50,300
push then you're fine yes

00:48:02,850 --> 00:48:08,110
okay so the question is when does it get

00:48:05,200 --> 00:48:11,170
conflict happen the get conflict happens

00:48:08,110 --> 00:48:14,740
when two developers try to change the

00:48:11,170 --> 00:48:17,710
same region of the same file and their

00:48:14,740 --> 00:48:20,770
commits are in parallel they're not one

00:48:17,710 --> 00:48:23,590
after the other so that's what happens

00:48:20,770 --> 00:48:25,870
you know this what the sequence is when

00:48:23,590 --> 00:48:28,450
this has to happen is you both got in

00:48:25,870 --> 00:48:30,610
the morning you did a poll you will both

00:48:28,450 --> 00:48:33,700
have your copies you update the same

00:48:30,610 --> 00:48:36,240
file you do a commit one of you pushes

00:48:33,700 --> 00:48:38,770
the other pushes the other will get

00:48:36,240 --> 00:48:40,540
first off we'll have to go Repole

00:48:38,770 --> 00:48:42,430
because they won't the push won't be

00:48:40,540 --> 00:48:44,200
accepted because it's not the latest or

00:48:42,430 --> 00:48:46,240
it's not based off the latest history

00:48:44,200 --> 00:48:48,900
and then when he does a poll he's going

00:48:46,240 --> 00:48:48,900
to get a conflict

00:48:59,760 --> 00:49:04,030
when you do that when you do the push

00:49:02,050 --> 00:49:06,250
you'll get the you're not up to date

00:49:04,030 --> 00:49:07,630
message but when you do the pole sorry

00:49:06,250 --> 00:49:10,330
let me back up let me repeat the

00:49:07,630 --> 00:49:12,610
question when you modify different lines

00:49:10,330 --> 00:49:14,800
of the file and the get is really smart

00:49:12,610 --> 00:49:18,340
about conflicts I mean it is amazing and

00:49:14,800 --> 00:49:20,530
how well it avoids conflicts if you I

00:49:18,340 --> 00:49:23,470
think the threshold is about five or six

00:49:20,530 --> 00:49:25,720
lines if the two lines you modify in the

00:49:23,470 --> 00:49:27,850
same file are like five or six lines

00:49:25,720 --> 00:49:32,020
apart it's no longer considered a

00:49:27,850 --> 00:49:34,390
conflict and what happens is when you

00:49:32,020 --> 00:49:36,430
both do that update you know developer a

00:49:34,390 --> 00:49:39,040
you both polled developer a does the

00:49:36,430 --> 00:49:41,680
update updates the file developer be

00:49:39,040 --> 00:49:45,040
does it update up late does the update

00:49:41,680 --> 00:49:47,250
commit upload and commits or updates the

00:49:45,040 --> 00:49:50,500
different line of the fire the same file

00:49:47,250 --> 00:49:52,870
now developer ray is pushed that's

00:49:50,500 --> 00:49:55,240
accepted developer v pushes not up to

00:49:52,870 --> 00:49:57,340
date you would get pull it says no

00:49:55,240 --> 00:50:00,130
problem I know how to deal with this it

00:49:57,340 --> 00:50:02,680
does it merges everything together the

00:50:00,130 --> 00:50:04,120
lines are different enough for separate

00:50:02,680 --> 00:50:06,640
enough that says up I'm going to accept

00:50:04,120 --> 00:50:10,030
both because I know that they're

00:50:06,640 --> 00:50:14,580
isolated there's you know I can reliably

00:50:10,030 --> 00:50:17,860
say I know how to handle this it is I've

00:50:14,580 --> 00:50:20,230
seen some really crazy commit histories

00:50:17,860 --> 00:50:25,090
that I'm like it actually didn't throw

00:50:20,230 --> 00:50:27,250
up a conflict I'm surprised and then you

00:50:25,090 --> 00:50:29,350
recommit so you always have the

00:50:27,250 --> 00:50:31,720
situation when you have a conflict is

00:50:29,350 --> 00:50:33,490
all right you did a push it wasn't

00:50:31,720 --> 00:50:36,400
accepted you do a poll it screams about

00:50:33,490 --> 00:50:39,730
the commit it stops right there says hey

00:50:36,400 --> 00:50:42,600
I need you to fix this right now in fact

00:50:39,730 --> 00:50:46,150
it's usually mid merge when that happens

00:50:42,600 --> 00:50:49,090
so we actually do the fix you edit the

00:50:46,150 --> 00:50:51,640
file do we get ad say that this is done

00:50:49,090 --> 00:50:55,170
get a commit and then you do a usually

00:50:51,640 --> 00:50:57,520
like I get continue I think git rebase

00:50:55,170 --> 00:51:05,680
continue or get just get ad and get

00:50:57,520 --> 00:51:08,130
commit and that usually fixes it up any

00:51:05,680 --> 00:51:08,130
other question

00:51:09,960 --> 00:51:13,470
Richard do you have any

00:51:23,240 --> 00:51:25,270
e

00:51:29,880 --> 00:51:40,260
that is correct so yes yes thank you

00:51:38,100 --> 00:51:41,940
thank you Richard his point Richard was

00:51:40,260 --> 00:51:45,020
saying that even though you would do a

00:51:41,940 --> 00:51:47,310
git merge of two files and some code and

00:51:45,020 --> 00:51:50,370
there were no conflicts that does not

00:51:47,310 --> 00:51:52,470
mean you actually have valid code so

00:51:50,370 --> 00:51:54,870
this is why you would want to do things

00:51:52,470 --> 00:51:57,020
like continuous integration make sure

00:51:54,870 --> 00:51:59,160
you're compiling doing unit testing

00:51:57,020 --> 00:52:01,260
automated testing those kind of things

00:51:59,160 --> 00:52:06,980
make sure that your code stays in a

00:52:01,260 --> 00:52:09,980
known working state any other questions

00:52:06,980 --> 00:52:09,980
yes

00:52:44,670 --> 00:52:48,299
okay so are the question is are there

00:52:46,470 --> 00:52:51,839
cutting practices or best practices that

00:52:48,299 --> 00:52:55,079
reduce the amount of conflicts and the

00:52:51,839 --> 00:52:56,849
answer is yes basically if you have two

00:52:55,079 --> 00:52:59,160
developers that are working on the same

00:52:56,849 --> 00:53:02,309
file or the same area of code they need

00:52:59,160 --> 00:53:04,290
to be talking to one another that's what

00:53:02,309 --> 00:53:06,210
it boils down to so if you have

00:53:04,290 --> 00:53:08,040
developers that have kind of you you

00:53:06,210 --> 00:53:12,270
have the code base and you split them

00:53:08,040 --> 00:53:15,210
into if you're doing it most of the best

00:53:12,270 --> 00:53:16,740
practice i believe is you know developer

00:53:15,210 --> 00:53:19,260
you know developer a is working on you

00:53:16,740 --> 00:53:20,309
know kind of this component over here

00:53:19,260 --> 00:53:22,290
and you're working on this component

00:53:20,309 --> 00:53:23,819
over here so long as you're working in

00:53:22,290 --> 00:53:25,890
different components in different areas

00:53:23,819 --> 00:53:28,020
that's going to reduce your not you're

00:53:25,890 --> 00:53:29,130
very unlikely to have conflicts you're

00:53:28,020 --> 00:53:32,099
only going to have conflicts and the

00:53:29,130 --> 00:53:33,450
stuff that everybody kind of you know

00:53:32,099 --> 00:53:36,210
these central things that kind of

00:53:33,450 --> 00:53:37,920
everything hooks into so this is

00:53:36,210 --> 00:53:39,869
actually where proper design and

00:53:37,920 --> 00:53:42,650
architecture comes into play so you want

00:53:39,869 --> 00:53:46,109
to reduce the linkages between your code

00:53:42,650 --> 00:53:48,809
so if you have that you know one config

00:53:46,109 --> 00:53:51,240
class that everybody has to touch that's

00:53:48,809 --> 00:53:54,839
the thing where the the conflicts are

00:53:51,240 --> 00:53:56,940
going to happen so this is pardon or

00:53:54,839 --> 00:53:58,890
your make file yes your make file is

00:53:56,940 --> 00:54:00,869
going to be a you know your make file

00:53:58,890 --> 00:54:03,089
your ant build file those are going to

00:54:00,869 --> 00:54:10,339
be big cases where you're probably going

00:54:03,089 --> 00:54:10,339
to have conflicts any other questions

00:54:11,750 --> 00:54:17,030
well I hope this has been helpful I hope

00:54:14,430 --> 00:54:17,030
you enjoyed it

00:54:27,150 --> 00:54:29,210
you

00:54:43,320 --> 00:54:45,380
you

00:54:48,839 --> 00:54:50,900
you

00:54:54,700 --> 00:54:58,089
your customers rely on your website or

00:54:56,619 --> 00:55:00,490
application if it's slower

00:54:58,089 --> 00:55:03,430
non-responsive it infuriates your users

00:55:00,490 --> 00:55:05,230
and costs you money keeping your

00:55:03,430 --> 00:55:08,430
business critical systems humming along

00:55:05,230 --> 00:55:11,050
requires insight into what they're doing

00:55:08,430 --> 00:55:13,030
your system metrics tells stories

00:55:11,050 --> 00:55:15,040
stories that can reveal performance

00:55:13,030 --> 00:55:17,349
bottlenecks resource limitations and

00:55:15,040 --> 00:55:18,910
other problems but how do you keep an

00:55:17,349 --> 00:55:21,579
eye on all of your systems performance

00:55:18,910 --> 00:55:24,579
metrics in real-time and record this

00:55:21,579 --> 00:55:26,320
data for later analysis enter longview

00:55:24,579 --> 00:55:28,300
the new way to see what's really going

00:55:26,320 --> 00:55:30,460
on under the hood the long view

00:55:28,300 --> 00:55:32,530
dashboard lets you visualize the status

00:55:30,460 --> 00:55:34,990
of all your systems providing you with a

00:55:32,530 --> 00:55:38,349
bird's-eye view of your entire fleet you

00:55:34,990 --> 00:55:40,930
can sort by cpu memory swap processes

00:55:38,349 --> 00:55:42,700
load and network usage click a specific

00:55:40,930 --> 00:55:45,099
system to access its individual

00:55:42,700 --> 00:55:47,609
dashboard then click and drag to zoom in

00:55:45,099 --> 00:55:50,020
on chokepoints and get more detail

00:55:47,609 --> 00:55:51,700
comprehensive network data including

00:55:50,020 --> 00:55:54,010
inbound and outbound traffic is

00:55:51,700 --> 00:55:55,960
available on the network tab and disk

00:55:54,010 --> 00:55:58,119
rights and free space on the disks tab

00:55:55,960 --> 00:56:00,339
while the process Explorer displays

00:55:58,119 --> 00:56:02,890
usage statistics for individual

00:56:00,339 --> 00:56:05,050
processes the system info tab shows

00:56:02,890 --> 00:56:07,300
listening services active connections

00:56:05,050 --> 00:56:09,430
and available updates adding long view

00:56:07,300 --> 00:56:11,109
to a system is easy just click the

00:56:09,430 --> 00:56:13,270
button copy the one line installation

00:56:11,109 --> 00:56:15,700
command then run the command on your

00:56:13,270 --> 00:56:17,410
linux system to complete the process the

00:56:15,700 --> 00:56:19,599
agent will begin collecting data and

00:56:17,410 --> 00:56:21,430
sending it to longview then the graphs

00:56:19,599 --> 00:56:23,980
start rolling

00:56:21,430 --> 00:56:26,380
use longview to gain visibility into

00:56:23,980 --> 00:56:30,089
your servers so when your website or app

00:56:26,380 --> 00:56:30,089
heats up it stays up

00:56:58,589 --> 00:57:00,650
you

00:57:47,510 --> 00:57:51,650
Citrix XenServer gives you everything

00:57:49,520 --> 00:57:54,620
you need to integrate manage and

00:57:51,650 --> 00:57:56,750
automate a virtual data center all on an

00:57:54,620 --> 00:57:59,150
enterprise-class cloud proven virtual

00:57:56,750 --> 00:58:01,910
platform and at a third of the cost of

00:57:59,150 --> 00:58:03,590
other solutions but why even bother with

00:58:01,910 --> 00:58:05,780
virtualizing your server infrastructure

00:58:03,590 --> 00:58:07,730
in the first place well let's say you

00:58:05,780 --> 00:58:10,010
have a traditional one server to one

00:58:07,730 --> 00:58:12,050
application architecture but you're

00:58:10,010 --> 00:58:14,600
running out of resources and performance

00:58:12,050 --> 00:58:16,900
is suffering once you order new server

00:58:14,600 --> 00:58:19,790
hardware you'll wait for delivery

00:58:16,900 --> 00:58:22,670
configure it install your business

00:58:19,790 --> 00:58:25,430
application stage and test the server

00:58:22,670 --> 00:58:27,650
and finally add it to your production

00:58:25,430 --> 00:58:29,840
farm if you've been through this process

00:58:27,650 --> 00:58:32,360
before you know it can take weeks or

00:58:29,840 --> 00:58:34,190
even months you also know it's a

00:58:32,360 --> 00:58:36,170
manually intensive process that will

00:58:34,190 --> 00:58:39,500
burden your team every time you outgrow

00:58:36,170 --> 00:58:41,270
your current setup with a virtual server

00:58:39,500 --> 00:58:44,030
solution you could accomplish all of

00:58:41,270 --> 00:58:46,610
that in less than half a day server

00:58:44,030 --> 00:58:48,440
virtualization software separates the OS

00:58:46,610 --> 00:58:50,870
and application from the underlying

00:58:48,440 --> 00:58:53,030
server hardware and with multiple

00:58:50,870 --> 00:58:54,740
virtual machines on a single server you

00:58:53,030 --> 00:58:57,680
can use each of them to run different

00:58:54,740 --> 00:58:59,480
os's and applications this makes it

00:58:57,680 --> 00:59:01,250
possible to move your virtual machines

00:58:59,480 --> 00:59:03,350
from one piece of hardware to another

00:59:01,250 --> 00:59:05,600
whenever you want to maximize

00:59:03,350 --> 00:59:07,550
utilization simplify maintenance or

00:59:05,600 --> 00:59:09,860
recover from a hardware failure and

00:59:07,550 --> 00:59:13,220
without slowing down your applications

00:59:09,860 --> 00:59:15,890
or users clearly server virtualization

00:59:13,220 --> 00:59:18,890
provides big benefits and Citrix

00:59:15,890 --> 00:59:21,110
XenServer provides even more since it's

00:59:18,890 --> 00:59:22,970
built on an open platform xenserver

00:59:21,110 --> 00:59:25,250
plays well with your existing hardware

00:59:22,970 --> 00:59:27,560
storage systems and IT management

00:59:25,250 --> 00:59:30,290
software as well as with the industry's

00:59:27,560 --> 00:59:32,330
leading cloud service providers best of

00:59:30,290 --> 00:59:34,010
all you can get started by downloading a

00:59:32,330 --> 00:59:37,280
fully functional production-ready

00:59:34,010 --> 00:59:39,470
version of xenserver for free after a

00:59:37,280 --> 00:59:41,600
10-minute installation process you'll

00:59:39,470 --> 00:59:43,640
see how easy it is to start virtualizing

00:59:41,600 --> 00:59:46,100
your workloads and automating your IT

00:59:43,640 --> 00:59:47,690
management processes and when you're

00:59:46,100 --> 00:59:49,610
ready for a richer set of management

00:59:47,690 --> 00:59:52,100
tools just upgrade to one of the premium

00:59:49,610 --> 00:59:53,930
editions of xenserver so whether you're

00:59:52,100 --> 00:59:55,880
interested in virtualizing servers for

00:59:53,930 --> 00:59:58,160
the first time expanding your server

00:59:55,880 --> 01:00:00,710
virtualization footprint or moving

00:59:58,160 --> 01:00:01,400
server workloads to the cloud download

01:00:00,710 --> 01:00:03,590
and install

01:00:01,400 --> 01:00:06,620
xenserver today and see how it can help

01:00:03,590 --> 01:00:11,980
you simplify your IT environment citrix

01:00:06,620 --> 01:00:11,980
xenserver do more don't spend more

01:01:28,950 --> 01:01:31,010

YouTube URL: https://www.youtube.com/watch?v=yF-5kGIQTco


