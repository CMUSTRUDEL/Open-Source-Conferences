Title: Peter Zaitsev - Practical MySQL Performance Optimization
Publication date: 2017-01-25
Playlist: 2015 SouthEast LinuxFest
Description: 
	
Captions: 
	00:00:13,099 --> 00:00:20,160
okay going twice right okay guys so I

00:00:18,240 --> 00:00:24,869
hope you are here to come to learn

00:00:20,160 --> 00:00:28,380
something about my squirrel performance

00:00:24,869 --> 00:00:30,439
optimization I don't see any yes yeah

00:00:28,380 --> 00:00:33,900
okay that's what you need to do right

00:00:30,439 --> 00:00:36,960
okay and there is one more bonus I want

00:00:33,900 --> 00:00:39,239
you guys to like me so I brought you two

00:00:36,960 --> 00:00:40,890
things first there are some t-shirts you

00:00:39,239 --> 00:00:43,110
can take after tone which look exactly

00:00:40,890 --> 00:00:47,190
like this right and by the way this is

00:00:43,110 --> 00:00:50,519
not a squirrel this is Mongoose you know

00:00:47,190 --> 00:00:53,250
why it's Mongoose because the tokyo MX

00:00:50,519 --> 00:00:56,010
is our replacement from one good you

00:00:53,250 --> 00:00:59,369
mean right one could even goes without

00:00:56,010 --> 00:01:02,519
sounds good okay but that's not what

00:00:59,369 --> 00:01:04,559
you're going to talk about right yes and

00:01:02,519 --> 00:01:05,700
besides t-shirts i also got some your

00:01:04,559 --> 00:01:07,860
phone are seekers if somebody is

00:01:05,700 --> 00:01:11,670
interesting to waste your laptop's it's

00:01:07,860 --> 00:01:14,100
a bit more so in this presentation we

00:01:11,670 --> 00:01:15,750
are going to talk about the practical

00:01:14,100 --> 00:01:17,610
approach for performance of Jenna's

00:01:15,750 --> 00:01:18,930
ation we're going to talk about to mine

00:01:17,610 --> 00:01:22,500
school but a lot of these will actually

00:01:18,930 --> 00:01:25,710
apply to some other database systems are

00:01:22,500 --> 00:01:27,720
too we will discuss the practical

00:01:25,710 --> 00:01:31,380
performance optimization tips and then

00:01:27,720 --> 00:01:33,330
tools how to approach our the first

00:01:31,380 --> 00:01:35,400
thing to know is that the my school

00:01:33,330 --> 00:01:37,980
performance doesn't matter as really any

00:01:35,400 --> 00:01:41,040
database performance right because what

00:01:37,980 --> 00:01:46,130
we really care is the application

00:01:41,040 --> 00:01:49,979
performance which is using that database

00:01:46,130 --> 00:01:52,909
right in this case that is what you both

00:01:49,979 --> 00:01:55,920
cares about you users care about the

00:01:52,909 --> 00:01:58,530
application performance which we a very

00:01:55,920 --> 00:02:01,080
using and what is important this case is

00:01:58,530 --> 00:02:04,500
the application performance are always

00:02:01,080 --> 00:02:06,510
matters in so many cases I would come to

00:02:04,500 --> 00:02:08,989
people and we talked in the ACE all this

00:02:06,510 --> 00:02:11,670
application functions doesn't really

00:02:08,989 --> 00:02:13,170
doesn't really matter and I would ask

00:02:11,670 --> 00:02:15,030
them okay so you wouldn't mind if it

00:02:13,170 --> 00:02:17,970
transfer free wats oh of course I will

00:02:15,030 --> 00:02:21,930
aha so performance doesn't matter for

00:02:17,970 --> 00:02:23,480
you right you just think what if it's if

00:02:21,930 --> 00:02:26,159
it's not something which have to be

00:02:23,480 --> 00:02:26,760
running sub-millisecond right or sub

00:02:26,159 --> 00:02:28,140
second

00:02:26,760 --> 00:02:30,810
it's not performance-critical which is a

00:02:28,140 --> 00:02:34,049
very wrong way to think about that

00:02:30,810 --> 00:02:36,689
because as application grows Lord grows

00:02:34,049 --> 00:02:39,209
data size grows it's very typical for

00:02:36,689 --> 00:02:43,010
your vintage have been taken a second to

00:02:39,209 --> 00:02:46,170
take a lot longer time right and kind of

00:02:43,010 --> 00:02:49,890
became performance critical in Europe

00:02:46,170 --> 00:02:53,220
just be understanding so we take away

00:02:49,890 --> 00:02:54,959
here is simple right first type of every

00:02:53,220 --> 00:02:58,530
problem performance problems you have

00:02:54,959 --> 00:03:02,069
with your application it may not be my

00:02:58,530 --> 00:03:04,799
square right in number of cases or i

00:03:02,069 --> 00:03:09,209
would say in many cases i see developers

00:03:04,799 --> 00:03:12,659
they like to blame the database that is

00:03:09,209 --> 00:03:15,389
a very big thing that developers like to

00:03:12,659 --> 00:03:17,579
do and i would often ask okey guys so

00:03:15,389 --> 00:03:19,889
you are telling me that the database why

00:03:17,579 --> 00:03:21,870
do you think so well because it was

00:03:19,889 --> 00:03:27,150
database last time we had performance

00:03:21,870 --> 00:03:29,220
problem well not very import right thing

00:03:27,150 --> 00:03:32,340
right and especially in the modern world

00:03:29,220 --> 00:03:34,560
when they often write an application as

00:03:32,340 --> 00:03:37,139
a set of a micro servers which talk to

00:03:34,560 --> 00:03:39,180
each other when they use an external API

00:03:37,139 --> 00:03:40,739
is aggressively there are much more

00:03:39,180 --> 00:03:42,870
things than a database which can go

00:03:40,739 --> 00:03:44,940
wrong right I remember one of the cases

00:03:42,870 --> 00:03:48,989
when they had a huge spike of the

00:03:44,940 --> 00:03:51,269
customers which are getting a lot of

00:03:48,989 --> 00:03:54,419
problems and it would the same day and

00:03:51,269 --> 00:03:56,549
they would think that as a mysql problem

00:03:54,419 --> 00:03:58,769
what that actually was a case there was

00:03:56,549 --> 00:04:00,629
a facebook api was having some problems

00:03:58,769 --> 00:04:03,329
right and they use it aggressively in

00:04:00,629 --> 00:04:06,060
the application now another important

00:04:03,329 --> 00:04:08,489
thing to know is even if a mysql is

00:04:06,060 --> 00:04:11,609
really a problem and there is a bottom

00:04:08,489 --> 00:04:15,569
like out there your solution may not be

00:04:11,609 --> 00:04:18,449
are just fixing a my squirrel it may be

00:04:15,569 --> 00:04:21,479
something else using some other tools

00:04:18,449 --> 00:04:24,389
right and i think what is amazing and

00:04:21,479 --> 00:04:27,320
wonderful in an open source community is

00:04:24,389 --> 00:04:29,310
what true here there is a lot of a great

00:04:27,320 --> 00:04:32,010
tools to work if your data have been

00:04:29,310 --> 00:04:36,570
created it is not like let's say this

00:04:32,010 --> 00:04:39,180
narrow Oracle approach right then if you

00:04:36,570 --> 00:04:40,500
have a data you store it in an Oracle

00:04:39,180 --> 00:04:42,450
database server right or

00:04:40,500 --> 00:04:45,270
Microsoft's equals zero same approach

00:04:42,450 --> 00:04:46,410
right if its data it goes to Microsoft

00:04:45,270 --> 00:04:49,500
sequel server because that is

00:04:46,410 --> 00:04:52,140
essentially our only data store right we

00:04:49,500 --> 00:04:55,650
have a lot of choices days and my school

00:04:52,140 --> 00:04:58,160
is good for certain things not for

00:04:55,650 --> 00:05:02,280
others some other technologies maybe

00:04:58,160 --> 00:05:04,680
maybe more interesting maybe better and

00:05:02,280 --> 00:05:08,370
you should be using right to the right

00:05:04,680 --> 00:05:10,440
job for example for years right even

00:05:08,370 --> 00:05:14,940
kind of goes going back like 10 years

00:05:10,440 --> 00:05:20,180
now memcache has been used to supplement

00:05:14,940 --> 00:05:23,190
mysql right by Afghans the data cache

00:05:20,180 --> 00:05:26,300
the next thing I want to talk is what do

00:05:23,190 --> 00:05:28,830
you mean by repeat performance right

00:05:26,300 --> 00:05:30,930
well then in save your formats what most

00:05:28,830 --> 00:05:33,300
of us means is exactly response time

00:05:30,930 --> 00:05:35,790
right because that is again what our

00:05:33,300 --> 00:05:37,830
boss and our users care how does

00:05:35,790 --> 00:05:40,350
application response to us we are all

00:05:37,830 --> 00:05:43,800
pretty much egg eccentric right if

00:05:40,350 --> 00:05:45,990
things are fast for me I'm happy and I

00:05:43,800 --> 00:05:50,040
think application works for quiet fast

00:05:45,990 --> 00:05:53,790
right if not when I don't hear right I

00:05:50,040 --> 00:05:56,130
think it's interesting story in this

00:05:53,790 --> 00:05:57,960
case was actually brought to oracle one

00:05:56,130 --> 00:05:59,910
of her and you know like an oracle is

00:05:57,960 --> 00:06:04,830
much more kind of centralized oracle

00:05:59,910 --> 00:06:06,630
kind of office structure and my school

00:06:04,830 --> 00:06:09,360
organization was likely redistributed

00:06:06,630 --> 00:06:11,370
fun they would move to oracle support

00:06:09,360 --> 00:06:13,800
interface right and some two guys

00:06:11,370 --> 00:06:15,780
working out of china right to choke you

00:06:13,800 --> 00:06:18,720
know sometimes hey you know what your

00:06:15,780 --> 00:06:21,300
your web interface is horrendous right

00:06:18,720 --> 00:06:24,720
it sucks it's so slow it takes me 30

00:06:21,300 --> 00:06:26,970
seconds actually to do stuff i typically

00:06:24,720 --> 00:06:29,060
taken 43 seconds and say hey they

00:06:26,970 --> 00:06:32,100
sitting out there in our office in

00:06:29,060 --> 00:06:33,780
redwood shores and from our offer to

00:06:32,100 --> 00:06:36,270
total response in microseconds right i

00:06:33,780 --> 00:06:40,530
mean we don't see whatever problem is

00:06:36,270 --> 00:06:42,360
right so I was just wanting to

00:06:40,530 --> 00:06:44,640
illustrate that what we need to be

00:06:42,360 --> 00:06:48,090
really looking at our experience when I

00:06:44,640 --> 00:06:50,430
talk about and performance anyway so it

00:06:48,090 --> 00:06:52,349
is a response time application a

00:06:50,430 --> 00:06:54,020
response time for specific users what

00:06:52,349 --> 00:06:58,160
kind of other issues you

00:06:54,020 --> 00:07:01,150
have to be so I thinking about the India

00:06:58,160 --> 00:07:05,409
looking as if your whole performance as

00:07:01,150 --> 00:07:09,729
as kind of a larger area one is

00:07:05,409 --> 00:07:13,940
stability right we want the systems to

00:07:09,729 --> 00:07:17,659
be behaving in a decent performance all

00:07:13,940 --> 00:07:19,789
the time night and day for different

00:07:17,659 --> 00:07:22,520
users right sometimes you may have a

00:07:19,789 --> 00:07:25,190
good performance during the day but then

00:07:22,520 --> 00:07:29,659
during the night for example you have a

00:07:25,190 --> 00:07:31,909
backup job right and during backup job

00:07:29,659 --> 00:07:34,159
things may go wrong so you may have

00:07:31,909 --> 00:07:37,699
performance decent and some keys but

00:07:34,159 --> 00:07:40,699
pretty unstable scalability there is

00:07:37,699 --> 00:07:44,210
another factor typically for a lot of

00:07:40,699 --> 00:07:46,159
applications we see them grow we want

00:07:44,210 --> 00:07:48,349
them grow right we want want our

00:07:46,159 --> 00:07:50,090
application to grow from 10,000 users of

00:07:48,349 --> 00:07:52,699
10 million users right and then go from

00:07:50,090 --> 00:07:55,340
there so that means we have to have an

00:07:52,699 --> 00:07:57,740
application skalian that means you have

00:07:55,340 --> 00:08:02,210
to look not on the application at how it

00:07:57,740 --> 00:08:04,310
behaves today right but also how things

00:08:02,210 --> 00:08:06,289
go into scale in the future if larger

00:08:04,310 --> 00:08:10,250
database more concurrent users and so on

00:08:06,289 --> 00:08:12,680
and so forth another one is is

00:08:10,250 --> 00:08:15,949
efficiency which is also quite important

00:08:12,680 --> 00:08:17,900
right because certain solutions allow us

00:08:15,949 --> 00:08:19,699
to reach pretty good performance but

00:08:17,900 --> 00:08:23,029
that can be not very efficient at the

00:08:19,699 --> 00:08:25,190
high cost like Hadoop ecosystem for

00:08:23,029 --> 00:08:28,000
example for years have been known is

00:08:25,190 --> 00:08:30,409
being able to achieve you very good

00:08:28,000 --> 00:08:33,169
performance right you want to organize

00:08:30,409 --> 00:08:35,750
us to process so many petabytes of data

00:08:33,169 --> 00:08:38,419
well just spin up 10,000 service right

00:08:35,750 --> 00:08:41,029
and until work pretty well for you right

00:08:38,419 --> 00:08:44,720
but it won't be very efficient in terms

00:08:41,029 --> 00:08:49,399
of data algorithm by scanning a lot of

00:08:44,720 --> 00:08:51,339
us the alot of this data right not being

00:08:49,399 --> 00:08:55,130
efficient and we're weak or about the

00:08:51,339 --> 00:08:58,970
kind of money right or being green and

00:08:55,130 --> 00:09:02,060
not use not a power it still goes to

00:08:58,970 --> 00:09:04,010
approximately the same stuff now that I

00:09:02,060 --> 00:09:06,410
speak about the scalability we have to

00:09:04,010 --> 00:09:07,699
thinking about a couple of things right

00:09:06,410 --> 00:09:10,279
you have to be thinking

00:09:07,699 --> 00:09:14,139
how it scales about the Lord they may be

00:09:10,279 --> 00:09:18,579
getting more users data size as well as

00:09:14,139 --> 00:09:22,489
what I'll call the infrastructure right

00:09:18,579 --> 00:09:24,379
the in our case we may have a different

00:09:22,489 --> 00:09:26,239
choices in terms of what kind of

00:09:24,379 --> 00:09:27,799
infrastructure going to use for our

00:09:26,239 --> 00:09:31,549
systems we made me go into what's called

00:09:27,799 --> 00:09:34,489
scaling up now I run my application on

00:09:31,549 --> 00:09:36,079
the some micro instance on amazon but

00:09:34,489 --> 00:09:38,989
then I'm going to take it and have it

00:09:36,079 --> 00:09:41,239
Sarah with 64 cores half a terabyte of

00:09:38,989 --> 00:09:44,540
memory and flash right that's getting up

00:09:41,239 --> 00:09:46,069
gauging is some really big o RM and for

00:09:44,540 --> 00:09:48,139
mine amplifications that's can be quite

00:09:46,069 --> 00:09:50,179
different quite decent solution right

00:09:48,139 --> 00:09:53,929
for average we can say no I actually

00:09:50,179 --> 00:09:56,749
don't want to do that I want to what's

00:09:53,929 --> 00:10:01,929
called kind of skill skill outright keep

00:09:56,749 --> 00:10:05,419
maybe a number of boxes of kind of not

00:10:01,929 --> 00:10:08,119
so powerful but many of em right organic

00:10:05,419 --> 00:10:10,549
combination of or wear off now it is

00:10:08,119 --> 00:10:14,529
interesting in terms of the talking

00:10:10,549 --> 00:10:17,239
about scalability in terms of data and

00:10:14,529 --> 00:10:19,819
load is what in a lot of kids you have

00:10:17,239 --> 00:10:22,279
to scale for both right as our

00:10:19,819 --> 00:10:25,189
applications growth or gross often

00:10:22,279 --> 00:10:31,039
you'll have to process much large amount

00:10:25,189 --> 00:10:34,369
of queries on the larger data sets so

00:10:31,039 --> 00:10:37,879
when we talk about performance right if

00:10:34,369 --> 00:10:40,069
you would get some people who only focus

00:10:37,879 --> 00:10:43,699
about performance will provide you

00:10:40,069 --> 00:10:46,579
solutions which may not be our practical

00:10:43,699 --> 00:10:50,149
based on some other dimensions right one

00:10:46,579 --> 00:10:52,069
is security right security often

00:10:50,149 --> 00:10:55,009
acquires like an extra code extra

00:10:52,069 --> 00:10:57,169
process we generally are slow things

00:10:55,009 --> 00:10:58,789
down right I haven't seen anybody tell

00:10:57,169 --> 00:11:00,379
me oh you know we'll get it more secure

00:10:58,789 --> 00:11:03,319
because if a turtle run 10 times faster

00:11:00,379 --> 00:11:06,079
right probably two going to me are we

00:11:03,319 --> 00:11:08,720
round manageability as well right have

00:11:06,079 --> 00:11:09,980
you guys seen the most optimal code that

00:11:08,720 --> 00:11:12,429
prolly would be something you know like

00:11:09,980 --> 00:11:15,709
a assembly hacks right which would be

00:11:12,429 --> 00:11:18,499
impossible to to maintain right and the

00:11:15,709 --> 00:11:21,409
same applies to the database as well it

00:11:18,499 --> 00:11:21,889
could be like SQL magic impossible

00:11:21,409 --> 00:11:26,299
support

00:11:21,889 --> 00:11:27,949
some other tricks if you want to and

00:11:26,299 --> 00:11:29,809
that's what we want to balance because

00:11:27,949 --> 00:11:32,600
we want our core to be maintainable you

00:11:29,809 --> 00:11:35,389
often want to be compatible if different

00:11:32,600 --> 00:11:39,139
versions right to our versions compliant

00:11:35,389 --> 00:11:41,660
in a lot of cases we find a number of

00:11:39,139 --> 00:11:43,850
industries like HIPAA or PCI compliance

00:11:41,660 --> 00:11:47,689
again so that all requires asked like to

00:11:43,850 --> 00:11:51,169
log all kind of crap right or things

00:11:47,689 --> 00:11:53,809
right and also ease of use by developers

00:11:51,169 --> 00:11:56,329
right because often they can say hey to

00:11:53,809 --> 00:11:59,989
scale this feature we want you to do XY

00:11:56,329 --> 00:12:02,749
and Z but developers may not may not

00:11:59,989 --> 00:12:11,299
really want it and as I talk about some

00:12:02,749 --> 00:12:12,790
pictures are those concert they do now

00:12:11,299 --> 00:12:15,759
in everything about the performance

00:12:12,790 --> 00:12:18,019
optimization is I think it's very

00:12:15,759 --> 00:12:20,480
important to know where to stop right

00:12:18,019 --> 00:12:24,230
there is no system out there you can say

00:12:20,480 --> 00:12:27,769
that's it it is the most optimal out

00:12:24,230 --> 00:12:30,559
where there is nothing else you can do

00:12:27,769 --> 00:12:34,069
right there is always yet and I think

00:12:30,559 --> 00:12:36,110
you could optimize but the thing is and

00:12:34,069 --> 00:12:39,350
the certain point there is no really

00:12:36,110 --> 00:12:42,980
value for user right or business Donette

00:12:39,350 --> 00:12:45,199
optimizes and also every kind of next

00:12:42,980 --> 00:12:48,139
several percent becomes increasingly

00:12:45,199 --> 00:12:50,199
more more expensive right first you can

00:12:48,139 --> 00:12:53,540
just grab yours loca low-hanging fruits

00:12:50,199 --> 00:13:02,989
easy but then you have to do something

00:12:53,540 --> 00:13:05,799
more expensive so a lot of what they

00:13:02,989 --> 00:13:08,329
spoke before was kind of about there i

00:13:05,799 --> 00:13:10,850
would say how to think about performance

00:13:08,329 --> 00:13:12,799
right and what kind of things to

00:13:10,850 --> 00:13:14,809
consider but now let's talk about our

00:13:12,799 --> 00:13:16,910
database my school in this example and

00:13:14,809 --> 00:13:19,759
think what exactly what database does

00:13:16,910 --> 00:13:22,549
and it does quite simple things right it

00:13:19,759 --> 00:13:25,189
runs selects installed updates all kind

00:13:22,549 --> 00:13:29,929
of query and really what we care about

00:13:25,189 --> 00:13:32,360
is how quickly my school is being to

00:13:29,929 --> 00:13:34,429
respond to those kind of query in

00:13:32,360 --> 00:13:35,450
florida if you look at that as a black

00:13:34,429 --> 00:13:36,890
box

00:13:35,450 --> 00:13:41,330
but essentially it right there is

00:13:36,890 --> 00:13:43,370
nothing more to add now if you think

00:13:41,330 --> 00:13:47,660
about the performance optimization what

00:13:43,370 --> 00:13:51,650
we often look at my school is a we want

00:13:47,660 --> 00:13:55,040
to make queries run faster as a primary

00:13:51,650 --> 00:13:57,410
goal right then you also would able to

00:13:55,040 --> 00:13:59,680
say often to have some like a secondary

00:13:57,410 --> 00:14:04,720
goals how we can do it while using less

00:13:59,680 --> 00:14:10,930
resources right and are scaling better

00:14:04,720 --> 00:14:16,270
now if you think about that there are a

00:14:10,930 --> 00:14:19,610
couple of approaches we would use for

00:14:16,270 --> 00:14:21,920
optimization one is which I would say

00:14:19,610 --> 00:14:25,100
the transaction focused let's say you

00:14:21,920 --> 00:14:26,780
have an application and somebody calls

00:14:25,100 --> 00:14:29,060
you to hey get on what we we have this

00:14:26,780 --> 00:14:30,350
kind of let's say payroll which has been

00:14:29,060 --> 00:14:32,510
running for a week and it didn't

00:14:30,350 --> 00:14:35,890
complete yet still that's not good can

00:14:32,510 --> 00:14:38,000
you help us an optimized that specific

00:14:35,890 --> 00:14:40,850
application transaction everything else

00:14:38,000 --> 00:14:43,820
maybe Ryan well right or we may not care

00:14:40,850 --> 00:14:46,400
about and in this case what you would do

00:14:43,820 --> 00:14:49,760
well we'll go to that process or figure

00:14:46,400 --> 00:14:52,310
out what queries it runs and why we're

00:14:49,760 --> 00:14:55,310
running slow optimize them or maybe

00:14:52,310 --> 00:14:58,130
something else is kind of working right

00:14:55,310 --> 00:15:02,030
or prevent them from practice and faster

00:14:58,130 --> 00:15:03,920
for due to other reason right and the

00:15:02,030 --> 00:15:06,860
deal with that but it becomes kind of

00:15:03,920 --> 00:15:10,310
very very focused on the or own those

00:15:06,860 --> 00:15:11,750
queries another approach is we can say

00:15:10,310 --> 00:15:14,210
hey you know what we have a server which

00:15:11,750 --> 00:15:16,580
is kind of loaded pretty high and

00:15:14,210 --> 00:15:19,250
everything is kind of become sluggish at

00:15:16,580 --> 00:15:22,160
the time of the peaks be clawed what you

00:15:19,250 --> 00:15:24,650
can do well in this case we can take a

00:15:22,160 --> 00:15:26,390
look at the queries which server is Ryan

00:15:24,650 --> 00:15:28,580
each of the most frequent which of

00:15:26,390 --> 00:15:31,510
running the most resources and they

00:15:28,580 --> 00:15:35,810
prioritize them and optimize them right

00:15:31,510 --> 00:15:37,550
now that's how you do but before you can

00:15:35,810 --> 00:15:39,350
have really become obsessed about the

00:15:37,550 --> 00:15:41,150
queries and trying to optimize them I

00:15:39,350 --> 00:15:43,840
think you should ask a question are

00:15:41,150 --> 00:15:46,850
those right for us to begin dev right

00:15:43,840 --> 00:15:48,620
because I would tell you my Georgie

00:15:46,850 --> 00:15:51,230
applications

00:15:48,620 --> 00:15:54,590
I'm to the customer and ask them let's

00:15:51,230 --> 00:15:57,020
enable the query log file and then let's

00:15:54,590 --> 00:15:58,850
go hit the page see what queries are

00:15:57,020 --> 00:16:02,480
right and then I'll going to ask you why

00:15:58,850 --> 00:16:04,460
I awry in this query in almost all cases

00:16:02,480 --> 00:16:07,670
we are going to find the queries which

00:16:04,460 --> 00:16:09,260
adjust the waist somebody say oh we are

00:16:07,670 --> 00:16:10,700
just initializing this object but you

00:16:09,260 --> 00:16:13,250
know this feature is not really used in

00:16:10,700 --> 00:16:15,830
this case so it's kind of random right

00:16:13,250 --> 00:16:17,960
Oh via Ryan desk without 35 times for

00:16:15,830 --> 00:16:19,160
the same page oh just because I well we

00:16:17,960 --> 00:16:21,140
didn't think about the cash on that

00:16:19,160 --> 00:16:24,700
right there is going to be a lot of

00:16:21,140 --> 00:16:28,010
waste most likely and it is a very good

00:16:24,700 --> 00:16:32,570
idea to get three the first queries

00:16:28,010 --> 00:16:34,550
right or maybe I'll get it by

00:16:32,570 --> 00:16:36,590
eliminating them completely fair ways to

00:16:34,550 --> 00:16:38,930
maybe moving into something else for

00:16:36,590 --> 00:16:41,600
example weication results and memcache

00:16:38,930 --> 00:16:44,240
already saw something what you can also

00:16:41,600 --> 00:16:49,760
do is think how we can make those

00:16:44,240 --> 00:16:56,630
queries to do lam a less less work right

00:16:49,760 --> 00:17:00,020
and by less work what I mean is oh just

00:16:56,630 --> 00:17:02,780
run queries which don't have to return

00:17:00,020 --> 00:17:06,200
as much data right or do as heavy

00:17:02,780 --> 00:17:07,640
aggregations of stuff like that so when

00:17:06,200 --> 00:17:10,970
they look at the queries where a few

00:17:07,640 --> 00:17:13,100
things you want to consider first is do

00:17:10,970 --> 00:17:15,500
not look at the average only right

00:17:13,100 --> 00:17:18,200
because average is kind of very

00:17:15,500 --> 00:17:21,530
misleading problems almost never happen

00:17:18,200 --> 00:17:26,590
at the average but you also don't want

00:17:21,530 --> 00:17:29,600
to look at complete outliers because

00:17:26,590 --> 00:17:31,820
database is most of them what they wanna

00:17:29,600 --> 00:17:34,400
use better design as we can a really

00:17:31,820 --> 00:17:37,400
hard real-time system and they're going

00:17:34,400 --> 00:17:39,380
to be some outliers over ever reason

00:17:37,400 --> 00:17:44,060
right and charge them to say why is that

00:17:39,380 --> 00:17:45,860
primary key update took five seconds one

00:17:44,060 --> 00:17:48,020
of the 10 million executions right you

00:17:45,860 --> 00:17:50,150
can spend a lot of time trying to catch

00:17:48,020 --> 00:17:54,500
that and it's actually quite relevant

00:17:50,150 --> 00:17:56,630
right because it's so rare it doesn't it

00:17:54,500 --> 00:18:00,290
doesn't matter what you want to focus

00:17:56,630 --> 00:18:01,970
oil on something like 99 percentile

00:18:00,290 --> 00:18:02,269
response time right or something then

00:18:01,970 --> 00:18:08,619
you

00:18:02,269 --> 00:18:08,619
you look at that at the heavy you there

00:18:08,799 --> 00:18:16,159
kind of not quite worst scenario but bad

00:18:12,019 --> 00:18:17,570
enough scenario right so you that you

00:18:16,159 --> 00:18:19,999
want to look at the 10 to the time

00:18:17,570 --> 00:18:22,849
weekly daily monthly cycles right i

00:18:19,999 --> 00:18:25,219
mentioned backups as a very common issue

00:18:22,849 --> 00:18:27,739
right o brien backups and everything

00:18:25,219 --> 00:18:30,830
grinds to hope to during the night or it

00:18:27,739 --> 00:18:33,499
could be some weekly cycle sir we do

00:18:30,830 --> 00:18:35,989
some bad jokes to arouse a delete the

00:18:33,499 --> 00:18:38,509
old data which again slows down from

00:18:35,989 --> 00:18:40,450
clear completely and then you also want

00:18:38,509 --> 00:18:44,690
to think about the future performance

00:18:40,450 --> 00:18:46,219
how is your data size it change

00:18:44,690 --> 00:18:49,070
happening and how it's going to impact

00:18:46,219 --> 00:18:51,469
the performance or cardinality right

00:18:49,070 --> 00:18:57,009
because as a cardinality between data

00:18:51,469 --> 00:19:00,529
change queries may be taken much more

00:18:57,009 --> 00:19:04,729
everything much more work to run so a

00:19:00,529 --> 00:19:09,529
few tips about queries first is do less

00:19:04,729 --> 00:19:12,169
less queries right because latency is

00:19:09,529 --> 00:19:15,679
overhead and because for each query very

00:19:12,169 --> 00:19:19,129
is some protests in time involved and i

00:19:15,679 --> 00:19:21,379
would say especially some are me and new

00:19:19,129 --> 00:19:23,450
developers can only do ridiculous things

00:19:21,379 --> 00:19:25,789
I've seen for example people to draw a

00:19:23,450 --> 00:19:27,379
table we would essentially run the query

00:19:25,789 --> 00:19:31,570
for each freaking cell on the table

00:19:27,379 --> 00:19:37,579
instead of just doing one select right

00:19:31,570 --> 00:19:41,179
bad idea now somebody wanted to want to

00:19:37,579 --> 00:19:44,169
guess how many queries I've seen max

00:19:41,179 --> 00:19:50,149
your page single page how many queries

00:19:44,169 --> 00:19:52,759
anybody wants to guess come on guys wake

00:19:50,149 --> 00:19:59,659
up it's it if the lunch was kind of two

00:19:52,759 --> 00:20:02,749
hours ago a hundred oh come on honey

00:19:59,659 --> 00:20:06,739
it's actually is a decent average well I

00:20:02,749 --> 00:20:09,919
was at the I saw about the 60,000

00:20:06,739 --> 00:20:12,379
queries right for single phase right

00:20:09,919 --> 00:20:15,740
yeah and that's kind of like some for

00:20:12,379 --> 00:20:18,440
some insurance company well and then my

00:20:15,740 --> 00:20:20,630
a friend of mine he will walk to another

00:20:18,440 --> 00:20:25,550
customer and he saw more than 100,000

00:20:20,630 --> 00:20:27,500
pursue the page right well so I mean in

00:20:25,550 --> 00:20:28,880
certain keys those numbers can be truly

00:20:27,500 --> 00:20:31,370
ridiculous rights and people do

00:20:28,880 --> 00:20:34,400
absolutely stupid things we want to read

00:20:31,370 --> 00:20:37,960
a modify less data like let's roll

00:20:34,400 --> 00:20:40,610
through touch less columns is is better

00:20:37,960 --> 00:20:42,800
if you want to protest less data on the

00:20:40,610 --> 00:20:46,160
fly because protest and data on the fly

00:20:42,800 --> 00:20:48,830
over and over again it is expensive like

00:20:46,160 --> 00:20:51,530
Ryan large aggregates having something

00:20:48,830 --> 00:20:54,050
like a summary or cash tables right or

00:20:51,530 --> 00:20:58,370
which have data pre-baked and ready to

00:20:54,050 --> 00:21:00,920
use can be much yeah are too much more

00:20:58,370 --> 00:21:03,559
efficient another thing I like to look

00:21:00,920 --> 00:21:05,840
at is how much data is being traversed

00:21:03,559 --> 00:21:08,420
kind of touched and database versus

00:21:05,840 --> 00:21:12,200
actually centered lined right so how

00:21:08,420 --> 00:21:13,880
much data vet blind used in my school we

00:21:12,200 --> 00:21:17,809
can essentially look at your roast

00:21:13,880 --> 00:21:20,720
examined and Rose scent which is a kind

00:21:17,809 --> 00:21:23,420
of two or two things which are pretty

00:21:20,720 --> 00:21:26,030
tenders in the slope for a lot and if

00:21:23,420 --> 00:21:28,460
you have a number you know less than 10

00:21:26,030 --> 00:21:30,320
then that's pretty cool right if you are

00:21:28,460 --> 00:21:32,570
having a number like a hundred a

00:21:30,320 --> 00:21:34,900
thousand then chances i acquire is not

00:21:32,570 --> 00:21:37,250
using indexes well rather doing some

00:21:34,900 --> 00:21:39,890
massive ways to aggregate and so on and

00:21:37,250 --> 00:21:42,500
so forth another thing to think about is

00:21:39,890 --> 00:21:44,630
how much data is sent verse has been

00:21:42,500 --> 00:21:47,000
actually used for an app to the wherever

00:21:44,630 --> 00:21:50,210
it has to do in so many cases you are

00:21:47,000 --> 00:21:52,850
fetching much more columns when you need

00:21:50,210 --> 00:21:55,280
or you even add more tables to be joined

00:21:52,850 --> 00:21:57,590
which when you end up not touching any

00:21:55,280 --> 00:22:00,770
column stroll right oh I've seen people

00:21:57,590 --> 00:22:03,290
just right in select fiction all of the

00:22:00,770 --> 00:22:06,350
data from from the table right and then

00:22:03,290 --> 00:22:08,179
using first five rows and then thrown

00:22:06,350 --> 00:22:10,570
away the rest that is not a good idea

00:22:08,179 --> 00:22:13,550
and frankly this is a challenge because

00:22:10,570 --> 00:22:19,309
we can look at the after mated tools to

00:22:13,550 --> 00:22:22,160
see how many data was traversed vs we

00:22:19,309 --> 00:22:24,590
also sent but we cannot automatically

00:22:22,160 --> 00:22:27,640
see how much data was actually used by

00:22:24,590 --> 00:22:27,640
the application

00:22:27,669 --> 00:22:36,200
schema now scheme really is a very key

00:22:32,780 --> 00:22:40,730
thing for for performance and I think

00:22:36,200 --> 00:22:43,100
what is important to do is to look at

00:22:40,730 --> 00:22:46,370
the schema and Aquarius clearance

00:22:43,100 --> 00:22:50,539
together right because really in the

00:22:46,370 --> 00:22:52,730
practice often amount of what kind of

00:22:50,539 --> 00:22:55,190
access and operations you're going to do

00:22:52,730 --> 00:22:59,960
often would impact how your schema is

00:22:55,190 --> 00:23:02,240
going to look like right now when you

00:22:59,960 --> 00:23:03,890
have a optimizing the system and we are

00:23:02,240 --> 00:23:07,669
looking at the schema improvements here

00:23:03,890 --> 00:23:11,539
are essentially two or two things which

00:23:07,669 --> 00:23:13,700
you can you can do one is a minor schema

00:23:11,539 --> 00:23:15,919
changes something like hey why don't we

00:23:13,700 --> 00:23:18,980
changing index structure which you're

00:23:15,919 --> 00:23:20,570
pretty cheap pretty simple in other

00:23:18,980 --> 00:23:22,940
words i would call data architecture

00:23:20,570 --> 00:23:24,919
often you'll save and say oh my gosh

00:23:22,940 --> 00:23:27,020
what hell are you doing for your

00:23:24,919 --> 00:23:30,020
application you should have structure to

00:23:27,020 --> 00:23:32,980
data completely different ways right and

00:23:30,020 --> 00:23:36,770
now it is going to make it quite

00:23:32,980 --> 00:23:39,230
expensive to to change that right so

00:23:36,770 --> 00:23:42,650
when it comes to a data architecture the

00:23:39,230 --> 00:23:45,620
best way to to identify that and making

00:23:42,650 --> 00:23:47,030
decisions is probably six months ago

00:23:45,620 --> 00:23:51,169
right when you just started to fly on

00:23:47,030 --> 00:23:54,710
this application a few things about the

00:23:51,169 --> 00:23:57,230
schema index Android and your ass the

00:23:54,710 --> 00:23:58,909
suddenlink software which I i will show

00:23:57,230 --> 00:24:02,000
which I gave a much more in depth

00:23:58,909 --> 00:24:05,330
presentation of the topics design scheme

00:24:02,000 --> 00:24:08,870
which is focused on your data access and

00:24:05,330 --> 00:24:11,990
queries right do not know I mean if you

00:24:08,870 --> 00:24:14,240
just take it textbook schema based on ER

00:24:11,990 --> 00:24:16,210
diagram or whatever it's unlikely

00:24:14,240 --> 00:24:19,220
they'll perform very well at the scale

00:24:16,210 --> 00:24:20,780
also think about what virus techniques

00:24:19,220 --> 00:24:22,850
which database provide for kind of

00:24:20,780 --> 00:24:25,760
physical performance optimization

00:24:22,850 --> 00:24:27,110
partitioning chardon normalizing onda

00:24:25,760 --> 00:24:29,210
normalizing data are depending on

00:24:27,110 --> 00:24:32,030
whatever you need use current index and

00:24:29,210 --> 00:24:33,490
stuff like that okay if you are things

00:24:32,030 --> 00:24:35,679
which

00:24:33,490 --> 00:24:38,230
matter we spoke about the infrastructure

00:24:35,679 --> 00:24:41,620
where are you exactly run in that in

00:24:38,230 --> 00:24:43,780
other cases going from a very small box

00:24:41,620 --> 00:24:46,270
to just something a lot more powerful

00:24:43,780 --> 00:24:48,429
maybe the best return on investment

00:24:46,270 --> 00:24:52,080
doesn't require a lot of time of

00:24:48,429 --> 00:24:56,410
development team operating system

00:24:52,080 --> 00:24:58,000
configuration right if you're using a

00:24:56,410 --> 00:25:00,280
decent operating system properly

00:24:58,000 --> 00:25:03,910
configured shots would be good my school

00:25:00,280 --> 00:25:07,090
version my school configuration now in

00:25:03,910 --> 00:25:09,490
terms of a process what we try top sure

00:25:07,090 --> 00:25:11,770
is I put it in essentially free buckets

00:25:09,490 --> 00:25:14,530
right one is low-hanging fruit something

00:25:11,770 --> 00:25:17,520
we can do in hours or maybe days right

00:25:14,530 --> 00:25:21,280
my school configuration of pure agency

00:25:17,520 --> 00:25:23,470
system settings indexing maybe introduce

00:25:21,280 --> 00:25:26,650
some cash and these are all very easy

00:25:23,470 --> 00:25:29,920
right medium level is something of a

00:25:26,650 --> 00:25:33,820
more big infrastructure piece right like

00:25:29,920 --> 00:25:36,580
hardware moving to the cloud or from a

00:25:33,820 --> 00:25:39,370
cloud upgrade doing a major operation

00:25:36,580 --> 00:25:41,260
system upgrade or upgraded my explosion

00:25:39,370 --> 00:25:43,090
these are much more involved right

00:25:41,260 --> 00:25:45,309
typically some testing involves and

00:25:43,090 --> 00:25:47,440
planning so i would say that goes kind

00:25:45,309 --> 00:25:49,630
of days maybe two weeks right and then

00:25:47,440 --> 00:25:51,940
these the hardest changes with your most

00:25:49,630 --> 00:25:55,000
expensive ones which is a major schema

00:25:51,940 --> 00:25:56,410
changes right because if you rewrite the

00:25:55,000 --> 00:25:58,110
schema completely you'll have to do a

00:25:56,410 --> 00:26:00,130
lot of application changes as well an

00:25:58,110 --> 00:26:01,570
application architecture changes in

00:26:00,130 --> 00:26:04,480
general right if you have to go ahead

00:26:01,570 --> 00:26:06,190
and here at it right all the way how

00:26:04,480 --> 00:26:08,890
your application works of data that's

00:26:06,190 --> 00:26:11,470
also going to do most most offensive

00:26:08,890 --> 00:26:14,350
right and what you want to look in this

00:26:11,470 --> 00:26:16,600
case is generally to see what reach of

00:26:14,350 --> 00:26:18,130
Rosa produce really are really want in

00:26:16,600 --> 00:26:24,520
your case right and maybe you just can

00:26:18,130 --> 00:26:28,330
do it a minor changes infrastructure

00:26:24,520 --> 00:26:32,260
scaling up scaling out I mentioned that

00:26:28,330 --> 00:26:39,950
in terms of or ujin okay anybody runs in

00:26:32,260 --> 00:26:43,590
the cloud those days okay anybody

00:26:39,950 --> 00:26:47,550
ranson private cloud virtualized

00:26:43,590 --> 00:26:53,820
environment okay anybody around some

00:26:47,550 --> 00:26:55,860
bare metal okay hardware right so if you

00:26:53,820 --> 00:26:58,080
look at the hardware for y square these

00:26:55,860 --> 00:27:01,470
are for most important things you want

00:26:58,080 --> 00:27:05,100
to focus CPU memory disk network right

00:27:01,470 --> 00:27:06,900
for CPU I think those days intel

00:27:05,100 --> 00:27:09,330
essential or on the market right there

00:27:06,900 --> 00:27:12,780
no more speaking about what cpu vendor

00:27:09,330 --> 00:27:16,230
to sit to pee cry what which way CPUs to

00:27:12,780 --> 00:27:19,020
use if mysql two sockets for a pretty

00:27:16,230 --> 00:27:21,960
powerful service is what it's used right

00:27:19,020 --> 00:27:24,000
and that's kind of get can get us pretty

00:27:21,960 --> 00:27:28,460
good amount of course and Fred's those

00:27:24,000 --> 00:27:33,570
day so you really need to do are more

00:27:28,460 --> 00:27:35,880
gently mysql runs south operation steal

00:27:33,570 --> 00:27:38,460
in a single thread right like if you run

00:27:35,880 --> 00:27:42,030
some complicated query it will use only

00:27:38,460 --> 00:27:45,120
one cpu for one thread and once if you

00:27:42,030 --> 00:27:49,050
core only so from mysql in many

00:27:45,120 --> 00:27:51,690
applications faster cores are more

00:27:49,050 --> 00:27:53,850
important than many cores right it's

00:27:51,690 --> 00:27:55,740
kind of at least more sure bet I mean I

00:27:53,850 --> 00:27:59,610
know many vendors try to sell you oh why

00:27:55,740 --> 00:28:01,880
don't you buy this CP which has half a

00:27:59,610 --> 00:28:05,460
frequency but has twice as much course

00:28:01,880 --> 00:28:08,340
not a good choice for my squirrel memory

00:28:05,460 --> 00:28:10,950
main purpose of a memory in my school is

00:28:08,340 --> 00:28:14,040
a cash right and assume your database is

00:28:10,950 --> 00:28:16,410
large you want to really get a lot of

00:28:14,040 --> 00:28:18,990
memory at the same time if the database

00:28:16,410 --> 00:28:21,060
is small then getting memory much much

00:28:18,990 --> 00:28:23,550
more than your database size doesn't

00:28:21,060 --> 00:28:26,700
really help besides kind of future proof

00:28:23,550 --> 00:28:29,250
in your our environment and what you

00:28:26,700 --> 00:28:33,270
often want to look at the memory to give

00:28:29,250 --> 00:28:35,970
if a storage now for you know to see

00:28:33,270 --> 00:28:37,610
what is a more optimal this kind of an

00:28:35,970 --> 00:28:40,350
interesting graph right which shows

00:28:37,610 --> 00:28:43,250
different kind of storage and here we

00:28:40,350 --> 00:28:46,020
are look at the slow storage kind of

00:28:43,250 --> 00:28:48,690
midgrade SSD and pretty high performance

00:28:46,020 --> 00:28:51,090
SSD fusion-io right a new case kind of

00:28:48,690 --> 00:28:52,679
thing you can see if your database

00:28:51,090 --> 00:28:54,659
doesn't fit the memory well

00:28:52,679 --> 00:28:57,840
at all right there is a very very heavy

00:28:54,659 --> 00:29:00,570
I oh then II then invest in kind of in

00:28:57,840 --> 00:29:02,549
the storage make sense right because you

00:29:00,570 --> 00:29:05,309
can in this case like like here for

00:29:02,549 --> 00:29:08,039
example you can get let's say go in from

00:29:05,309 --> 00:29:12,350
two gigabytes 26 you get it would get

00:29:08,039 --> 00:29:15,720
much more from using the

00:29:12,350 --> 00:29:17,730
high-performance storage then from tree

00:29:15,720 --> 00:29:20,990
peony amount of memory right in there

00:29:17,730 --> 00:29:23,249
are cases like that obviously on the mmm

00:29:20,990 --> 00:29:25,950
lighter side as well right there are

00:29:23,249 --> 00:29:29,639
some workloads where you may do much

00:29:25,950 --> 00:29:31,470
better that in having high performance

00:29:29,639 --> 00:29:33,840
storage when having half a terabyte of

00:29:31,470 --> 00:29:36,899
memory instead of for example 128 gigs

00:29:33,840 --> 00:29:39,119
right while if you data fits in memory

00:29:36,899 --> 00:29:40,830
well then you can see all those kind of

00:29:39,119 --> 00:29:43,559
storage type of a sort of collies

00:29:40,830 --> 00:29:47,659
together right if a data fits in every

00:29:43,559 --> 00:29:51,389
completely then there are almost no

00:29:47,659 --> 00:29:54,299
difference in performance right so it's

00:29:51,389 --> 00:29:57,320
good to understand that and to use that

00:29:54,299 --> 00:30:02,039
as a guide applying what is better to

00:29:57,320 --> 00:30:04,080
invest storage and memory right unless

00:30:02,039 --> 00:30:07,529
you obviously can have it both right in

00:30:04,080 --> 00:30:10,289
this case just you know get it off in

00:30:07,529 --> 00:30:15,840
terms of storage we're essentially a few

00:30:10,289 --> 00:30:19,619
times of us storage you would have in my

00:30:15,840 --> 00:30:21,749
opinion for oltp workload the disk is

00:30:19,619 --> 00:30:25,049
dead you want to be engine flash and

00:30:21,749 --> 00:30:29,820
just depends what kind of flash you want

00:30:25,049 --> 00:30:33,119
to be are using right in there are there

00:30:29,820 --> 00:30:35,690
are a few times there are also number of

00:30:33,119 --> 00:30:38,999
ways how you want to you may be able to

00:30:35,690 --> 00:30:42,269
think about the a higher ability for add

00:30:38,999 --> 00:30:45,210
storage which may be using hardware RAID

00:30:42,269 --> 00:30:47,669
software raid on file system like ZFS

00:30:45,210 --> 00:30:50,159
and also note or diffusion how high

00:30:47,669 --> 00:30:52,619
performance or enterprise solid-state

00:30:50,159 --> 00:30:56,249
storage when it essentially has arrived

00:30:52,619 --> 00:31:02,549
internal in the card right so you may

00:30:56,249 --> 00:31:06,090
not really need that network now a in

00:31:02,549 --> 00:31:08,700
terms of network think about the

00:31:06,090 --> 00:31:10,860
distance and number of hopes right is

00:31:08,700 --> 00:31:12,600
the biggest contributors to latency you

00:31:10,860 --> 00:31:15,090
know I've remember somebody saying oh

00:31:12,600 --> 00:31:17,640
why is this so slow have a gigabit

00:31:15,090 --> 00:31:19,500
connection here ok give me connection

00:31:17,640 --> 00:31:21,090
between what well we have a to data

00:31:19,500 --> 00:31:25,380
center on the East Coast and on the west

00:31:21,090 --> 00:31:29,429
coast right hey you know what simply the

00:31:25,380 --> 00:31:31,320
distance in this case it is what going

00:31:29,429 --> 00:31:33,360
to the Dominican factory latency right

00:31:31,320 --> 00:31:35,880
so the last hopes you have between your

00:31:33,360 --> 00:31:39,559
application server and database servers

00:31:35,880 --> 00:31:42,690
low latency that is going to be a

00:31:39,559 --> 00:31:45,980
critical one gigabit is pretty much a

00:31:42,690 --> 00:31:48,059
mast right if you can get 10 give it

00:31:45,980 --> 00:31:52,350
that's good right especially if you use

00:31:48,059 --> 00:31:55,049
some need of backup so you need to do a

00:31:52,350 --> 00:31:58,350
quick wrist or at least very heavy on

00:31:55,049 --> 00:32:01,740
network and bond in a multi-part for her

00:31:58,350 --> 00:32:05,789
ability can give you choices for grading

00:32:01,740 --> 00:32:09,809
system in mysql linux is more on you

00:32:05,789 --> 00:32:12,779
used by far most commonly sarah great AP

00:32:09,809 --> 00:32:15,840
rating system right so i mean i would

00:32:12,779 --> 00:32:19,230
not like for example to run my school in

00:32:15,840 --> 00:32:25,409
production on on fedora right this is no

00:32:19,230 --> 00:32:27,570
disrespect right because i think because

00:32:25,409 --> 00:32:31,200
you you really really care about your

00:32:27,570 --> 00:32:33,659
database and often you are don't want a

00:32:31,200 --> 00:32:36,090
quick change right in the operating

00:32:33,659 --> 00:32:37,169
system you want to eat relatively recent

00:32:36,090 --> 00:32:39,450
decision especially if you're running

00:32:37,169 --> 00:32:42,270
the recent hardware for example there is

00:32:39,450 --> 00:32:44,760
a lot of great improvement for

00:32:42,270 --> 00:32:48,390
solid-state storage support alright and

00:32:44,760 --> 00:32:51,000
well it's about mysql operation tuning

00:32:48,390 --> 00:32:55,380
system tunings now i would say linux is

00:32:51,000 --> 00:32:57,870
pretty good by default for majority

00:32:55,380 --> 00:32:59,460
workloads right so if you take the linux

00:32:57,870 --> 00:33:02,399
with no kind of tree and put my school

00:32:59,460 --> 00:33:04,289
next you will get quite decent of course

00:33:02,399 --> 00:33:06,899
you guys like you know facebook who has

00:33:04,289 --> 00:33:08,789
it i need to squeeze like last two

00:33:06,899 --> 00:33:11,490
percent right and operate like who scale

00:33:08,789 --> 00:33:15,149
they tuned certain things but it's not

00:33:11,490 --> 00:33:19,590
as needed file system i would say xt4

00:33:15,149 --> 00:33:23,760
and XFS are good for my school are in

00:33:19,590 --> 00:33:27,120
inex and it was also i did in a

00:33:23,760 --> 00:33:30,350
presentation of this my school versions

00:33:27,120 --> 00:33:33,510
a new versions typically have a better

00:33:30,350 --> 00:33:36,419
better performance or we often scale

00:33:33,510 --> 00:33:39,720
better have a better optimizer right as

00:33:36,419 --> 00:33:43,110
well but do expect some some regressions

00:33:39,720 --> 00:33:46,710
so every new version comes out at least

00:33:43,110 --> 00:33:48,750
a few first two months and often kind of

00:33:46,710 --> 00:33:52,409
fur everywhere are certain things which

00:33:48,750 --> 00:33:56,610
run slower on the new version event on

00:33:52,409 --> 00:34:00,750
the old one that's just life something

00:33:56,610 --> 00:34:02,580
20 to deal with that my skill

00:34:00,750 --> 00:34:04,320
configuration now for my school

00:34:02,580 --> 00:34:06,600
configuration I will say completely

00:34:04,320 --> 00:34:09,510
opposite you do not want to run the

00:34:06,600 --> 00:34:12,149
default because my school defaults are

00:34:09,510 --> 00:34:14,940
bad right there are more details here

00:34:12,149 --> 00:34:17,609
but also do not obsessive tunings one

00:34:14,940 --> 00:34:20,990
thing I know if some people we see oh my

00:34:17,609 --> 00:34:23,310
gosh my school has more than 400

00:34:20,990 --> 00:34:26,060
variable tunable so you can play with

00:34:23,310 --> 00:34:28,320
fright and then you can spend probably

00:34:26,060 --> 00:34:29,669
here experiment to the various

00:34:28,320 --> 00:34:32,659
combinations and so on and so forth

00:34:29,669 --> 00:34:37,649
right well don't do that if you have

00:34:32,659 --> 00:34:39,480
probably 10 of em right that will get it

00:34:37,649 --> 00:34:42,119
get you almost all the way here for

00:34:39,480 --> 00:34:46,859
majority of workloads right and that is

00:34:42,119 --> 00:34:48,659
kind of the IE j wanted to kind of put

00:34:46,859 --> 00:34:51,960
the most important variables you want to

00:34:48,659 --> 00:34:54,839
examine on a single slide right you can

00:34:51,960 --> 00:35:00,330
just enter them in google and find stuff

00:34:54,839 --> 00:35:02,849
how to tune it okay now let me talk a

00:35:00,330 --> 00:35:05,810
bit about with tools and the process

00:35:02,849 --> 00:35:08,640
right so then we talked about that

00:35:05,810 --> 00:35:10,380
they're working the database and

00:35:08,640 --> 00:35:12,570
optimized right kind of two parts right

00:35:10,380 --> 00:35:18,270
one is here is developers who needs to

00:35:12,570 --> 00:35:20,130
be trained not to be thoughtless about

00:35:18,270 --> 00:35:23,580
performance and then there is also

00:35:20,130 --> 00:35:26,040
developers who operates guys who need to

00:35:23,580 --> 00:35:32,630
be able to cash your problems right and

00:35:26,040 --> 00:35:32,630
go and educate developers about

00:35:33,130 --> 00:35:39,140
you know catching those things as well

00:35:35,089 --> 00:35:41,180
as making sure what they in a sense

00:35:39,140 --> 00:35:44,089
validated changes to implement because

00:35:41,180 --> 00:35:46,640
hardware changes configuration different

00:35:44,089 --> 00:35:49,819
versions of operating system mysql can

00:35:46,640 --> 00:35:52,099
cause problems and sometimes in in a

00:35:49,819 --> 00:35:54,499
particular ways i've seen so many times

00:35:52,099 --> 00:35:56,900
when when operations would think with

00:35:54,499 --> 00:35:58,700
the upgrade in hardware for example but

00:35:56,900 --> 00:36:00,380
there is something like little thing the

00:35:58,700 --> 00:36:03,739
change in configuration actually new

00:36:00,380 --> 00:36:08,630
hardware works slovan all the one right

00:36:03,739 --> 00:36:10,099
I had to validated now interested in

00:36:08,630 --> 00:36:13,640
this case is what to say what with

00:36:10,099 --> 00:36:15,710
database run queries right and whatever

00:36:13,640 --> 00:36:17,930
changes you do my school doors and

00:36:15,710 --> 00:36:21,799
hardware change configuration if

00:36:17,930 --> 00:36:25,039
something is going that then you will

00:36:21,799 --> 00:36:28,160
see that in the queries and so what that

00:36:25,039 --> 00:36:29,989
means is from best for operations guys

00:36:28,160 --> 00:36:32,630
both rock action battlers from

00:36:29,989 --> 00:36:35,779
development or too many change control

00:36:32,630 --> 00:36:38,089
is to look at the query performance over

00:36:35,779 --> 00:36:39,799
time we are a number of tools right out

00:36:38,089 --> 00:36:41,749
here like Fiji query digest from

00:36:39,799 --> 00:36:43,819
performance to Turkana toolkit is an

00:36:41,749 --> 00:36:46,789
open source command line tool you can

00:36:43,819 --> 00:36:48,799
use you can use my screen surprised one

00:36:46,789 --> 00:36:51,890
term on your credit cortex percona cloud

00:36:48,799 --> 00:36:53,569
tools these are not open source some of

00:36:51,890 --> 00:36:57,200
them like Turkana cloud tools are free

00:36:53,569 --> 00:37:01,940
are you have to our i will have to pay

00:36:57,200 --> 00:37:05,210
for so so what do you have for here for

00:37:01,940 --> 00:37:08,839
if you're on a cloud tools is a hosted

00:37:05,210 --> 00:37:12,230
solution so you can analyze your query

00:37:08,839 --> 00:37:14,480
performance over time we would gather

00:37:12,230 --> 00:37:16,579
information from queries from a virus

00:37:14,480 --> 00:37:20,569
servers and it rating system matrix as

00:37:16,579 --> 00:37:23,150
well as configuration and plot it or no

00:37:20,569 --> 00:37:27,079
overtime we capture with one second

00:37:23,150 --> 00:37:31,700
resolution right so it becomes pretty a

00:37:27,079 --> 00:37:33,739
pretty helpful or item can you know go

00:37:31,700 --> 00:37:35,809
beyond just measuring their averages

00:37:33,739 --> 00:37:39,289
right which I mentioned may not be good

00:37:35,809 --> 00:37:43,670
idea so this is for example what you get

00:37:39,289 --> 00:37:45,530
as a as a query profile and in this case

00:37:43,670 --> 00:37:50,300
you can see hey what this

00:37:45,530 --> 00:37:51,980
select was done so many times are right

00:37:50,300 --> 00:37:54,500
and contribute so much lower than the

00:37:51,980 --> 00:37:56,840
system varies so much total time and so

00:37:54,500 --> 00:37:59,270
on and so forth you can pick where

00:37:56,840 --> 00:38:03,380
queries you're interested and end range

00:37:59,270 --> 00:38:07,130
and then look at more details this page

00:38:03,380 --> 00:38:09,560
is a summary right which looks at all

00:38:07,130 --> 00:38:12,080
the queries on the server which i think

00:38:09,560 --> 00:38:14,630
is quite handy in the in which case like

00:38:12,080 --> 00:38:16,760
one is I like look at this stuff right

00:38:14,630 --> 00:38:19,280
the ninety-five percent query response

00:38:16,760 --> 00:38:21,500
time was half a millisecond this means

00:38:19,280 --> 00:38:23,990
so in general this creature is

00:38:21,500 --> 00:38:25,970
preferring quite well right there may be

00:38:23,990 --> 00:38:30,080
some of an outlier square we just slow

00:38:25,970 --> 00:38:32,660
but overall it's not bad and now I think

00:38:30,080 --> 00:38:35,330
interesting thing is Rho sent Andros

00:38:32,660 --> 00:38:38,380
examines remember I was mentioned to

00:38:35,330 --> 00:38:41,180
look at that in this case here is just

00:38:38,380 --> 00:38:43,790
1.5 times difference between queries

00:38:41,180 --> 00:38:48,580
sent and first examined that means what

00:38:43,790 --> 00:38:51,650
from this standpoint the system is 0 is

00:38:48,580 --> 00:38:54,050
optimized reasonably well right and I

00:38:51,650 --> 00:38:55,550
can actually like spend the twenty

00:38:54,050 --> 00:38:57,830
minutes just talking to how much stuff

00:38:55,550 --> 00:39:01,400
you can get from this this page a lot

00:38:57,830 --> 00:39:03,350
but I don't have a lot of time now we

00:39:01,400 --> 00:39:04,820
can deal down in the graph of different

00:39:03,350 --> 00:39:08,270
things like for example what do you guys

00:39:04,820 --> 00:39:11,000
think he write this is amount of reads

00:39:08,270 --> 00:39:15,230
which have been happening on the disk

00:39:11,000 --> 00:39:17,090
right by the buyer on the server well

00:39:15,230 --> 00:39:19,220
these are actual spikes which have been

00:39:17,090 --> 00:39:21,620
back up right I mean it's almost always

00:39:19,220 --> 00:39:24,440
space in memory but then back up for

00:39:21,620 --> 00:39:27,770
logical black ops comes and does a lot

00:39:24,440 --> 00:39:29,810
of higher right response time stability

00:39:27,770 --> 00:39:32,480
firstly remember guys I mentioned you

00:39:29,810 --> 00:39:34,990
what backups may impact response time

00:39:32,480 --> 00:39:40,810
and they do here right so we can see

00:39:34,990 --> 00:39:40,810
what those backups actually increase our

00:39:40,840 --> 00:39:47,500
average response time in this case in

00:39:43,640 --> 00:39:49,610
this case it's not related to really

00:39:47,500 --> 00:39:52,820
dramatically right but in some other

00:39:49,610 --> 00:39:57,380
cases you can would see much more severe

00:39:52,820 --> 00:39:59,540
spikes so you know so the clear

00:39:57,380 --> 00:40:02,870
information yes this isn't

00:39:59,540 --> 00:40:05,060
thing right is graphing the change and i

00:40:02,870 --> 00:40:08,180
think that's can be very valuable to

00:40:05,060 --> 00:40:10,730
show whatever thats developers boss how

00:40:08,180 --> 00:40:12,620
changes can impact something right so in

00:40:10,730 --> 00:40:14,270
this case you actually had a table we

00:40:12,620 --> 00:40:15,710
didn't have proper index and it was

00:40:14,270 --> 00:40:20,510
getting larger and larger right so you

00:40:15,710 --> 00:40:22,430
see so all the time we have query was

00:40:20,510 --> 00:40:24,920
taken more and more time to run right

00:40:22,430 --> 00:40:30,200
then finally somebody noticed slide and

00:40:24,920 --> 00:40:32,570
then I etre index right and we get the

00:40:30,200 --> 00:40:36,250
query performance dramatically improved

00:40:32,570 --> 00:40:39,260
and I think what they focused on is

00:40:36,250 --> 00:40:41,600
things how we can tag review and comment

00:40:39,260 --> 00:40:44,120
for queries right so one thing what they

00:40:41,600 --> 00:40:46,310
found is what kind of work low flow

00:40:44,120 --> 00:40:48,830
right as an Operations guys we often

00:40:46,310 --> 00:40:50,930
would notice victories and you need to

00:40:48,830 --> 00:40:54,650
put a comment and say hey these queries

00:40:50,930 --> 00:41:00,340
or is bad right and then making sure

00:40:54,650 --> 00:41:03,140
what developers actually fix that and AH

00:41:00,340 --> 00:41:04,430
right and then it's going to resolve

00:41:03,140 --> 00:41:06,890
it's good if your system support

00:41:04,430 --> 00:41:09,440
something like that so you don't well

00:41:06,890 --> 00:41:12,380
have to just maintain that sameera

00:41:09,440 --> 00:41:14,660
outside right or you may mark of this

00:41:12,380 --> 00:41:15,890
query needs to be eliminated and you

00:41:14,660 --> 00:41:18,530
want to make sure what it's actually

00:41:15,890 --> 00:41:20,840
going on it's not pop-ups 33 months

00:41:18,530 --> 00:41:22,850
later because somebody you know

00:41:20,840 --> 00:41:27,170
uncommanded iran khodro it something

00:41:22,850 --> 00:41:30,470
like that oh yes live explain i will

00:41:27,170 --> 00:41:31,580
skip that for a second Oh other stuff

00:41:30,470 --> 00:41:35,060
what we have connected to a tape

00:41:31,580 --> 00:41:36,970
recorder corner Sarah summary and my

00:41:35,060 --> 00:41:40,820
school summer so we can actually see

00:41:36,970 --> 00:41:42,410
from a web interface Sarah statistics we

00:41:40,820 --> 00:41:45,460
use that in a consultant allowed because

00:41:42,410 --> 00:41:52,690
that's very helpful to get there

00:41:45,460 --> 00:41:55,750
overview of what the words on the server

00:41:52,690 --> 00:41:58,070
addition to his to a query information

00:41:55,750 --> 00:42:00,830
we have information about the metrics

00:41:58,070 --> 00:42:03,580
like in this case there is a mysql throw

00:42:00,830 --> 00:42:07,310
food right for the second and there are

00:42:03,580 --> 00:42:10,970
much more things you can look good

00:42:07,310 --> 00:42:12,110
something's like IO time number of mysql

00:42:10,970 --> 00:42:12,890
threads running that is very good

00:42:12,110 --> 00:42:16,000
indicator

00:42:12,890 --> 00:42:18,890
for your database load you can sort of

00:42:16,000 --> 00:42:22,310
zoom in and zoom out right in this case

00:42:18,890 --> 00:42:26,570
as I'm shorten and one of those spikes

00:42:22,310 --> 00:42:31,270
and what I also mentioned really want to

00:42:26,570 --> 00:42:34,070
provide information war in addition to

00:42:31,270 --> 00:42:35,390
the averages so for example in this case

00:42:34,070 --> 00:42:37,280
you're looking into the throat foot

00:42:35,390 --> 00:42:39,320
right and what is it and this

00:42:37,280 --> 00:42:42,260
essentially shows us the range between 5

00:42:39,320 --> 00:42:43,790
and 95 percentile in the normal case

00:42:42,260 --> 00:42:47,440
when the system is not loaded every

00:42:43,790 --> 00:42:50,420
second it has approximately the same

00:42:47,440 --> 00:42:52,850
value where is the process right it's

00:42:50,420 --> 00:42:55,400
pretty pretty narrow in this case as

00:42:52,850 --> 00:42:57,440
something happens right database

00:42:55,400 --> 00:42:58,790
overloads or something like that we can

00:42:57,440 --> 00:43:01,370
see whether it's not only the fro

00:42:58,790 --> 00:43:04,700
pitfalls and then kind of recovers but

00:43:01,370 --> 00:43:06,620
you can also see what there seems to be

00:43:04,700 --> 00:43:10,100
some stalls happening because there are

00:43:06,620 --> 00:43:11,840
some seconds then there is a very narrow

00:43:10,100 --> 00:43:18,260
a very small number of queries you

00:43:11,840 --> 00:43:20,410
actually have been completed ok to sum

00:43:18,260 --> 00:43:23,540
it up right if you look at their

00:43:20,410 --> 00:43:25,640
performance of the optimization a its

00:43:23,540 --> 00:43:28,910
application for comments both matters

00:43:25,640 --> 00:43:31,400
focus on that be right to throw a for I

00:43:28,910 --> 00:43:35,330
job I mean my school is only one of the

00:43:31,400 --> 00:43:37,010
database out there CAC right you want to

00:43:35,330 --> 00:43:39,380
see what queries on my squirrel is

00:43:37,010 --> 00:43:41,390
running and that is what you is really

00:43:39,380 --> 00:43:44,330
great indicator what you want to

00:43:41,390 --> 00:43:46,880
optimize for and if your square is you

00:43:44,330 --> 00:43:49,790
want to reduce number of queries reduce

00:43:46,880 --> 00:43:54,020
number of data a very turn right to

00:43:49,790 --> 00:43:56,630
optimize them see how you can tune them

00:43:54,020 --> 00:43:58,580
so they can do less work and do that

00:43:56,630 --> 00:44:01,850
work more effectively right this is kind

00:43:58,580 --> 00:44:03,970
of from build I you how you can approach

00:44:01,850 --> 00:44:09,340
my school performance optimization and

00:44:03,970 --> 00:44:09,340
that's eight thank you

00:44:13,860 --> 00:44:24,660
ok any questions yes oh ok you want to

00:44:44,130 --> 00:45:06,030
oh yeah okay you know that's my take two

00:44:59,610 --> 00:45:09,480
or general just a face like a nurse a

00:45:06,030 --> 00:45:11,730
way you're fine it's not like what I

00:45:09,480 --> 00:45:14,340
don't like fedora I specifically built

00:45:11,730 --> 00:45:17,910
for a lot of fur case you are looking

00:45:14,340 --> 00:45:22,740
for my true server the side of aeration

00:45:17,910 --> 00:45:26,130
systems not a lot of change yes there is

00:45:22,740 --> 00:45:27,900
a personal note for my personal use but

00:45:26,130 --> 00:45:31,950
if I hadn't run a company with it I

00:45:27,900 --> 00:45:42,540
would not hold it in ok any other

00:45:31,950 --> 00:45:50,130
questions ok no questions we're still

00:45:42,540 --> 00:45:52,790
we're still okay well okay okay guys

00:45:50,130 --> 00:45:52,790
spend anyway

00:45:57,340 --> 00:46:01,640
your customers rely on your website or

00:46:00,140 --> 00:46:04,010
application if it's slower

00:46:01,640 --> 00:46:06,770
non-responsive it infuriates your users

00:46:04,010 --> 00:46:08,540
and costs you money keeping your

00:46:06,770 --> 00:46:12,150
business critical systems humming along

00:46:08,540 --> 00:46:14,520
requires insight into what they're doing

00:46:12,150 --> 00:46:16,500
your system metrics tells stories

00:46:14,520 --> 00:46:18,480
stories that can reveal performance

00:46:16,500 --> 00:46:20,819
bottlenecks resource limitations and

00:46:18,480 --> 00:46:22,380
other problems but how do you keep an

00:46:20,819 --> 00:46:25,049
eye on all of your systems performance

00:46:22,380 --> 00:46:28,020
metrics in real-time and record this

00:46:25,049 --> 00:46:29,760
data for later analysis enter longview

00:46:28,020 --> 00:46:31,799
the new way to see what's really going

00:46:29,760 --> 00:46:33,960
on under the hood the long view

00:46:31,799 --> 00:46:36,000
dashboard lets you visualize the status

00:46:33,960 --> 00:46:38,460
of all your systems providing you with a

00:46:36,000 --> 00:46:41,849
bird's-eye view of your entire fleet you

00:46:38,460 --> 00:46:44,430
can sort by cpu memory swap processes

00:46:41,849 --> 00:46:46,170
load and network usage click a specific

00:46:44,430 --> 00:46:48,599
system to access its individual

00:46:46,170 --> 00:46:51,109
dashboard then click and drag to zoom in

00:46:48,599 --> 00:46:53,490
on chokepoints and get more detail

00:46:51,109 --> 00:46:55,170
comprehensive network data including

00:46:53,490 --> 00:46:57,480
inbound and outbound traffic is

00:46:55,170 --> 00:46:59,490
available on the network tab and disk

00:46:57,480 --> 00:47:01,619
rights and free space on a disk stabbed

00:46:59,490 --> 00:47:03,690
while the process explorer displays

00:47:01,619 --> 00:47:06,240
usage statistics for individual

00:47:03,690 --> 00:47:08,460
processes the system info tab shows

00:47:06,240 --> 00:47:10,740
listening services active connections

00:47:08,460 --> 00:47:12,900
and available updates adding long view

00:47:10,740 --> 00:47:14,609
to a system is easy just click the

00:47:12,900 --> 00:47:16,740
button copy the one line installation

00:47:14,609 --> 00:47:19,170
command then run the command on your

00:47:16,740 --> 00:47:20,880
linux system to complete the process the

00:47:19,170 --> 00:47:23,069
agent will begin collecting data and

00:47:20,880 --> 00:47:26,579
sending it to longview then the graphs

00:47:23,069 --> 00:47:28,829
start rolling use long view to gain

00:47:26,579 --> 00:47:33,589
visibility into your servers so when

00:47:28,829 --> 00:47:33,589
your website or app heats up it stays up

00:49:26,250 --> 00:49:30,600
citrix xenserver gives you everything

00:49:28,380 --> 00:49:33,570
you need to integrate manage and

00:49:30,600 --> 00:49:35,700
automate a virtual data center all on an

00:49:33,570 --> 00:49:38,100
enterprise-class cloud proven virtual

00:49:35,700 --> 00:49:40,860
platform and at a third of the cost of

00:49:38,100 --> 00:49:42,570
other solutions but why even bother with

00:49:40,860 --> 00:49:44,730
virtualizing your server infrastructure

00:49:42,570 --> 00:49:46,680
in the first place well let's say you

00:49:44,730 --> 00:49:48,990
have a traditional one server to one

00:49:46,680 --> 00:49:51,000
application architecture but you're

00:49:48,990 --> 00:49:53,490
running out of resources and performance

00:49:51,000 --> 00:49:55,790
is suffering once you order new server

00:49:53,490 --> 00:49:58,620
hardware you'll wait for delivery

00:49:55,790 --> 00:50:01,650
configure it install your business

00:49:58,620 --> 00:50:04,440
application stage and test the server

00:50:01,650 --> 00:50:06,630
and finally add it to your production

00:50:04,440 --> 00:50:08,820
farm if you've been through this process

00:50:06,630 --> 00:50:11,370
before you know it can take weeks or

00:50:08,820 --> 00:50:13,230
even months you also know it's a

00:50:11,370 --> 00:50:15,150
manually intensive process that will

00:50:13,230 --> 00:50:18,210
burden your team every time you outgrow

00:50:15,150 --> 00:50:19,800
your current setup with a virtual

00:50:18,210 --> 00:50:22,040
service solution you could accomplish

00:50:19,800 --> 00:50:25,020
all of that in less than half a day

00:50:22,040 --> 00:50:27,000
server virtualization software separates

00:50:25,020 --> 00:50:29,370
the OS and application from the

00:50:27,000 --> 00:50:31,260
underlying server hardware and with

00:50:29,370 --> 00:50:33,330
multiple virtual machines on a single

00:50:31,260 --> 00:50:36,360
server you can use each of them to run

00:50:33,330 --> 00:50:38,130
different os's and applications this

00:50:36,360 --> 00:50:39,990
makes it possible to move your virtual

00:50:38,130 --> 00:50:42,330
machines from one piece of hardware to

00:50:39,990 --> 00:50:44,640
another whenever you want to maximize

00:50:42,330 --> 00:50:46,620
utilization simplify maintenance or

00:50:44,640 --> 00:50:48,960
recover from a hardware failure and

00:50:46,620 --> 00:50:51,870
without slowing down your applications

00:50:48,960 --> 00:50:54,960
or users clearly server virtualization

00:50:51,870 --> 00:50:57,960
provides big benefits and Citrix

00:50:54,960 --> 00:51:00,180
XenServer provides even more since it's

00:50:57,960 --> 00:51:01,980
built on an open platform xenserver

00:51:00,180 --> 00:51:04,200
plays well with your existing hardware

00:51:01,980 --> 00:51:06,510
storage systems and IT management

00:51:04,200 --> 00:51:09,300
software as well as with the industry's

00:51:06,510 --> 00:51:11,310
leading cloud service providers best of

00:51:09,300 --> 00:51:13,080
all you can get started by downloading a

00:51:11,310 --> 00:51:16,350
fully functional production ready

00:51:13,080 --> 00:51:18,600
version of xenserver for free after a

00:51:16,350 --> 00:51:20,610
10-minute installation process you'll

00:51:18,600 --> 00:51:22,620
see how easy it is to start virtualizing

00:51:20,610 --> 00:51:25,080
your workloads and automating your IT

00:51:22,620 --> 00:51:26,670
management processes and when you're

00:51:25,080 --> 00:51:28,590
ready for a richer set of management

00:51:26,670 --> 00:51:31,110
tools just upgrade to one of the premium

00:51:28,590 --> 00:51:32,940
editions of xenserver so whether you're

00:51:31,110 --> 00:51:34,890
interested in virtualizing servers for

00:51:32,940 --> 00:51:37,170
the first time expanding your server

00:51:34,890 --> 00:51:39,690
virtualization footprint or moving

00:51:37,170 --> 00:51:40,230
server workloads to the cloud download

00:51:39,690 --> 00:51:42,450
and install

00:51:40,230 --> 00:51:44,700
all xenserver today and see how it can

00:51:42,450 --> 00:51:48,630
help you simplify your IT environment

00:51:44,700 --> 00:51:50,900
citrix xenserver do more don't spend

00:51:48,630 --> 00:51:50,900
more

00:52:31,960 --> 00:52:34,020
you

01:03:07,410 --> 01:03:09,470

YouTube URL: https://www.youtube.com/watch?v=SCoJID7TeDg


