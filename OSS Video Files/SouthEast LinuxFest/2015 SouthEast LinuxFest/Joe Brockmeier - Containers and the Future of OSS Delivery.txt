Title: Joe Brockmeier - Containers and the Future of OSS Delivery
Publication date: 2017-01-25
Playlist: 2015 SouthEast LinuxFest
Description: 
	
Captions: 
	00:00:00,000 --> 00:00:07,410
let's just play along and act like

00:00:03,080 --> 00:00:11,070
everything is very clear and if you see

00:00:07,410 --> 00:00:15,150
me leave suddenly you all know why it's

00:00:11,070 --> 00:00:17,850
not you it's definitely me so I want to

00:00:15,150 --> 00:00:19,800
talk today about containers Linux

00:00:17,850 --> 00:00:22,380
containers not you know shipping

00:00:19,800 --> 00:00:24,390
containers or things like that and the

00:00:22,380 --> 00:00:26,250
future of open source software delivery

00:00:24,390 --> 00:00:28,670
and the reason i specify open source of

00:00:26,250 --> 00:00:30,900
course is because things like docker

00:00:28,670 --> 00:00:33,210
despite the deal with Microsoft those

00:00:30,900 --> 00:00:35,460
are really open source innovations and

00:00:33,210 --> 00:00:38,520
they're really things that work best

00:00:35,460 --> 00:00:41,100
with linux not with say windows or max

00:00:38,520 --> 00:00:43,110
things like that my name is joe

00:00:41,100 --> 00:00:45,270
brockmeyer I work on the open source and

00:00:43,110 --> 00:00:47,969
standards team at Red Hat it's a

00:00:45,270 --> 00:00:50,489
wonderful job I am the community team

00:00:47,969 --> 00:00:53,399
manager so I manage folks who work with

00:00:50,489 --> 00:00:55,350
communities previously I was mostly

00:00:53,399 --> 00:00:59,430
focused on project atomic which is why I

00:00:55,350 --> 00:01:01,140
am here today if you would like to get

00:00:59,430 --> 00:01:03,809
in touch or ask questions after this

00:01:01,140 --> 00:01:05,420
talk by email in a venue where I can

00:01:03,809 --> 00:01:07,590
deal with throwing up or other things

00:01:05,420 --> 00:01:11,460
I'm leisure and then answer your

00:01:07,590 --> 00:01:15,720
question that's my email and my twitter

00:01:11,460 --> 00:01:18,960
address is just jzb so that answers that

00:01:15,720 --> 00:01:21,630
question what I want to thought out is

00:01:18,960 --> 00:01:23,610
the problems that we face as a community

00:01:21,630 --> 00:01:26,340
and deploying software I want to talk

00:01:23,610 --> 00:01:28,860
about the very brief history of free and

00:01:26,340 --> 00:01:30,750
open source software delivery I want to

00:01:28,860 --> 00:01:32,670
talk about the promise of containers

00:01:30,750 --> 00:01:35,990
there is a lot of promise is anybody in

00:01:32,670 --> 00:01:40,950
the room not familiar with docker okay

00:01:35,990 --> 00:01:44,430
seriously okay all right all right I'll

00:01:40,950 --> 00:01:46,140
believe you I'll also mention briefly a

00:01:44,430 --> 00:01:48,600
couple of other container technologies

00:01:46,140 --> 00:01:50,240
but really docker is far and away the

00:01:48,600 --> 00:01:53,090
one that is getting the most attention

00:01:50,240 --> 00:01:55,049
developer time and so forth right now

00:01:53,090 --> 00:01:56,939
I'm also going to talk about the

00:01:55,049 --> 00:01:59,430
problems we need to solve docker was

00:01:56,939 --> 00:02:01,740
invented or at least it was first

00:01:59,430 --> 00:02:06,710
unveiled in march two thousand thirteen

00:02:01,740 --> 00:02:09,989
i have been in a previous life i am a

00:02:06,710 --> 00:02:11,879
recovering tech journalist I was the

00:02:09,989 --> 00:02:13,380
opensuse community manager for two years

00:02:11,879 --> 00:02:17,130
I worked for citrix for a year

00:02:13,380 --> 00:02:19,110
doing cloudstack work and I've never

00:02:17,130 --> 00:02:21,980
seen a technology take off like this it

00:02:19,110 --> 00:02:27,060
took years you know virtualization was

00:02:21,980 --> 00:02:28,740
immediately very popular but it you know

00:02:27,060 --> 00:02:30,360
it it didn't take off this quickly

00:02:28,740 --> 00:02:34,830
people weren't struggling to adopt

00:02:30,360 --> 00:02:36,380
virtualization this quickly try to think

00:02:34,830 --> 00:02:39,210
of other technologies you know

00:02:36,380 --> 00:02:41,340
infrastructure-as-a-service very very

00:02:39,210 --> 00:02:44,220
popular people were very excited about

00:02:41,340 --> 00:02:46,920
it but again people were not trying to

00:02:44,220 --> 00:02:48,900
adopt it back so I'm going to talk about

00:02:46,920 --> 00:02:51,210
problems we need to solve that are yet

00:02:48,900 --> 00:02:53,670
unsolved with docker I want to talk

00:02:51,210 --> 00:02:56,370
about project atomic which is a project

00:02:53,670 --> 00:02:57,900
that I work on and then I will talk

00:02:56,370 --> 00:03:05,040
about some of the sub projects there

00:02:57,900 --> 00:03:06,360
Thank You Julie aha thank you and if I

00:03:05,040 --> 00:03:07,980
am still standing I may entertain

00:03:06,360 --> 00:03:10,470
questions or I may run out of the room

00:03:07,980 --> 00:03:11,730
we'll see what happens all right so

00:03:10,470 --> 00:03:13,410
let's talk a little bit about the

00:03:11,730 --> 00:03:15,690
problems that we face and when I talk

00:03:13,410 --> 00:03:18,390
about the problems we face I mean as

00:03:15,690 --> 00:03:20,280
people who are deploying software my

00:03:18,390 --> 00:03:23,580
folks have been using linux since the

00:03:20,280 --> 00:03:25,290
90s okay how many of you and I'm

00:03:23,580 --> 00:03:27,360
assuming it's almost all of you have

00:03:25,290 --> 00:03:32,070
done the make configure configure

00:03:27,360 --> 00:03:34,770
install dance right ok and then how many

00:03:32,070 --> 00:03:38,430
people actually predate things like RPM

00:03:34,770 --> 00:03:42,180
and Debian packages okay so you remember

00:03:38,430 --> 00:03:45,570
the wonder that came along with like

00:03:42,180 --> 00:03:47,490
someone compiled this for me and I can

00:03:45,570 --> 00:03:48,900
just install it on my system and then we

00:03:47,490 --> 00:03:55,320
all learned about a wonderful thing

00:03:48,900 --> 00:03:58,530
called dependency hell right and I

00:03:55,320 --> 00:04:01,770
should also note that at that time open

00:03:58,530 --> 00:04:03,720
source really accelerated and the

00:04:01,770 --> 00:04:05,940
internet really accelerated software

00:04:03,720 --> 00:04:08,730
development but it was still at a

00:04:05,940 --> 00:04:11,070
reasonably manageable pace right you got

00:04:08,730 --> 00:04:13,410
your slackware updates once a year or so

00:04:11,070 --> 00:04:15,360
Red Hat and debian well I mean if you

00:04:13,410 --> 00:04:20,489
can't keep up with debian stable updates

00:04:15,360 --> 00:04:22,740
i just don't even know but basically the

00:04:20,489 --> 00:04:24,900
case of software development was much

00:04:22,740 --> 00:04:26,760
slower and much less attention was

00:04:24,900 --> 00:04:27,280
focused on open source there's much less

00:04:26,760 --> 00:04:31,120
exciting

00:04:27,280 --> 00:04:34,510
stuff going on so in the beginning we

00:04:31,120 --> 00:04:37,210
had tar ball and then we had packages

00:04:34,510 --> 00:04:38,860
and then we had Yemen apt-get which was

00:04:37,210 --> 00:04:41,740
amazing we had something that did

00:04:38,860 --> 00:04:44,380
dependency resolution you could say yum

00:04:41,740 --> 00:04:46,330
install foo or apt-get install foo and

00:04:44,380 --> 00:04:48,310
it would go well if you want food you

00:04:46,330 --> 00:04:50,080
need these 20 other packages and I shall

00:04:48,310 --> 00:04:54,000
get them for you and it was wonderful

00:04:50,080 --> 00:04:56,560
right so what happened then was that

00:04:54,000 --> 00:04:58,150
Linux distributions sort of became the

00:04:56,560 --> 00:05:00,610
center of the universe for a while for

00:04:58,150 --> 00:05:03,190
software development if you wanted

00:05:00,610 --> 00:05:06,430
people to get hands-on Apache if you

00:05:03,190 --> 00:05:08,260
wanted people to get hands-on pearl or a

00:05:06,430 --> 00:05:12,880
higher level application you really

00:05:08,260 --> 00:05:16,330
wanted debian and fedora or red hat or

00:05:12,880 --> 00:05:18,250
whoever susa to pick up your your stuff

00:05:16,330 --> 00:05:20,470
and package it and ship it with their

00:05:18,250 --> 00:05:24,520
system to make it easy for their users

00:05:20,470 --> 00:05:26,380
right now of course I say that is a

00:05:24,520 --> 00:05:28,330
generality there were always people of

00:05:26,380 --> 00:05:30,400
course who were little cranky about the

00:05:28,330 --> 00:05:31,810
changes distributions made to tame their

00:05:30,400 --> 00:05:34,330
software for the packaging but in

00:05:31,810 --> 00:05:36,250
general projects would spend a lot of

00:05:34,330 --> 00:05:39,100
effort getting into distributions and

00:05:36,250 --> 00:05:41,320
then something happened we started

00:05:39,100 --> 00:05:43,270
seeing six-month updates for genome we

00:05:41,320 --> 00:05:45,520
started seeing things moving very very

00:05:43,270 --> 00:05:48,250
fast we start seeing developers wanting

00:05:45,520 --> 00:05:50,470
the latest and greatest PHP but the

00:05:48,250 --> 00:05:52,660
installed systems you didn't want to

00:05:50,470 --> 00:05:55,510
update the entire installed system just

00:05:52,660 --> 00:05:57,550
to get the latest PHP and so we started

00:05:55,510 --> 00:05:58,960
having language specific delivery

00:05:57,550 --> 00:06:00,610
vehicles which are a nightmare for

00:05:58,960 --> 00:06:04,360
system administrators but make

00:06:00,610 --> 00:06:08,260
developers very happy okay and we have

00:06:04,360 --> 00:06:12,280
things and fairly new anybody heard of

00:06:08,260 --> 00:06:13,930
Colin Walters nobody he developed

00:06:12,280 --> 00:06:15,729
something several years ago called

00:06:13,930 --> 00:06:18,610
genome continuous which if you're a

00:06:15,729 --> 00:06:20,380
genome developer or if you've ever tried

00:06:18,610 --> 00:06:22,600
to compile genome especially a

00:06:20,380 --> 00:06:25,630
development branch of genome you know

00:06:22,600 --> 00:06:27,340
what the word pain means I hear that

00:06:25,630 --> 00:06:29,350
they are actually talking about updating

00:06:27,340 --> 00:06:32,650
the dictionary for this specific you

00:06:29,350 --> 00:06:34,060
know use case um it's not fun so he

00:06:32,650 --> 00:06:36,220
developed a system that would allow you

00:06:34,060 --> 00:06:38,919
it would do continuous builds of genome

00:06:36,220 --> 00:06:41,400
hence genome continuous he's a brilliant

00:06:38,919 --> 00:06:43,930
guy naming things in

00:06:41,400 --> 00:06:45,730
but he did he did you know I'm

00:06:43,930 --> 00:06:48,250
continuous as sort of a gift for

00:06:45,730 --> 00:06:51,280
operating systems so you could check out

00:06:48,250 --> 00:06:53,440
a branch and boot into it and then

00:06:51,280 --> 00:06:56,139
revert back to your stable known good

00:06:53,440 --> 00:06:57,850
system and that's what OS tree and our

00:06:56,139 --> 00:06:59,919
pmos tree providing I'll talk a little

00:06:57,850 --> 00:07:01,600
bit more about them later so we're

00:06:59,919 --> 00:07:04,360
getting into ways of figuring out how do

00:07:01,600 --> 00:07:06,880
we deploy robust sins with atomic

00:07:04,360 --> 00:07:09,970
updates there's that word atomic there's

00:07:06,880 --> 00:07:13,330
reason why we call it project atomic and

00:07:09,970 --> 00:07:16,090
then finally containers okay we start

00:07:13,330 --> 00:07:19,200
seeing people deploying things in dr.

00:07:16,090 --> 00:07:21,580
and I put the question mark here because

00:07:19,200 --> 00:07:23,770
who knows what's going to come next I

00:07:21,580 --> 00:07:25,690
I'm you know everybody likes to you know

00:07:23,770 --> 00:07:28,120
I'm saying that containers and the

00:07:25,690 --> 00:07:31,930
future software delivery or it's going

00:07:28,120 --> 00:07:33,760
to be important but I would be remiss to

00:07:31,930 --> 00:07:35,380
say this is it this is the end of the

00:07:33,760 --> 00:07:36,720
line this will be the last technology

00:07:35,380 --> 00:07:38,650
because we all know better right

00:07:36,720 --> 00:07:41,080
something else better will come along

00:07:38,650 --> 00:07:45,810
but until we get there this is what we

00:07:41,080 --> 00:07:49,690
got so what it containers offer that

00:07:45,810 --> 00:07:51,550
rpms don't or things like that how many

00:07:49,690 --> 00:07:52,630
people remember when virtual appliances

00:07:51,550 --> 00:07:55,630
were going to solve all of our

00:07:52,630 --> 00:08:00,190
deployment problems if they solved all

00:07:55,630 --> 00:08:04,120
of our deployment problems no okay I'm

00:08:00,190 --> 00:08:07,050
sorry they are they are great for demos

00:08:04,120 --> 00:08:10,479
or containers depending on the software

00:08:07,050 --> 00:08:13,030
now containers are not new I remember I

00:08:10,479 --> 00:08:15,570
said the docker was launched in march

00:08:13,030 --> 00:08:18,520
two thousand thirteen but actually

00:08:15,570 --> 00:08:21,370
containers in a primitive form started

00:08:18,520 --> 00:08:23,680
in the 80s with truths and then you had

00:08:21,370 --> 00:08:26,919
Linux containers and Linux vserver and

00:08:23,680 --> 00:08:29,590
you have Solaris zones and you have

00:08:26,919 --> 00:08:31,930
freebsd jails so there are a lot of

00:08:29,590 --> 00:08:35,140
things that have offered that kind of

00:08:31,930 --> 00:08:41,099
technology dr itself was initially based

00:08:35,140 --> 00:08:43,630
on linux containers lxc but docker

00:08:41,099 --> 00:08:45,370
refined the process a lot to make it

00:08:43,630 --> 00:08:48,040
very friendly for the end user and not

00:08:45,370 --> 00:08:50,980
only a technology to run the containers

00:08:48,040 --> 00:08:53,720
but an easy format to share an easy way

00:08:50,980 --> 00:08:57,709
to make a container file and so forth

00:08:53,720 --> 00:09:01,339
um they're very easy to automate it's

00:08:57,709 --> 00:09:03,199
easy a lot of people are using docker

00:09:01,339 --> 00:09:05,449
containers as a step in their workflow

00:09:03,199 --> 00:09:07,370
where the developer checks in code the

00:09:05,449 --> 00:09:09,949
code goes through CI continuous

00:09:07,370 --> 00:09:11,540
integration continuous delivery that

00:09:09,949 --> 00:09:13,550
goes through all the tests whatever

00:09:11,540 --> 00:09:15,709
Jenkins yadda yadda yadda comes out the

00:09:13,550 --> 00:09:17,720
other side and eventually is built into

00:09:15,709 --> 00:09:20,930
a container that is deployed and that

00:09:17,720 --> 00:09:24,079
entire chain can be automated it is not

00:09:20,930 --> 00:09:27,290
easy to do that it's possible but it's

00:09:24,079 --> 00:09:31,360
not easy to do that with say virtual

00:09:27,290 --> 00:09:33,949
appliances and there's also a lot of

00:09:31,360 --> 00:09:35,810
benefits in terms of resources where you

00:09:33,949 --> 00:09:38,139
can stack a lot more containers

00:09:35,810 --> 00:09:40,160
unfortunately it didn't put the

00:09:38,139 --> 00:09:42,259
statistics in this slide but we had

00:09:40,160 --> 00:09:44,689
someone internally spend a little while

00:09:42,259 --> 00:09:46,850
banging on you know how many containers

00:09:44,689 --> 00:09:49,610
can I spin up on an average machine and

00:09:46,850 --> 00:09:51,949
you know versus kvm machines and if you

00:09:49,610 --> 00:09:53,060
you go google it or when I feel better i

00:09:51,949 --> 00:09:56,800
will share it on my twitter account

00:09:53,060 --> 00:09:59,209
again you know with something like 4,000

00:09:56,800 --> 00:10:02,899
containers running on one host before

00:09:59,209 --> 00:10:05,149
things slowed down significantly the use

00:10:02,899 --> 00:10:07,459
of a container which uses a system

00:10:05,149 --> 00:10:12,019
kernel and so forth and doesn't require

00:10:07,459 --> 00:10:15,439
a full vm is a lot less resource hungry

00:10:12,019 --> 00:10:17,600
than a virtual machine the other promise

00:10:15,439 --> 00:10:19,009
of containers is because dr. is open

00:10:17,600 --> 00:10:23,000
source and because these other things

00:10:19,009 --> 00:10:25,850
are open source like a rocket from the

00:10:23,000 --> 00:10:29,750
core OS folks and system DN spawn from

00:10:25,850 --> 00:10:31,970
the system d folks or whatever comes

00:10:29,750 --> 00:10:34,279
next we can all work together to solve

00:10:31,970 --> 00:10:36,350
these problems which is better than you

00:10:34,279 --> 00:10:38,300
know say trying to adopt VMware and

00:10:36,350 --> 00:10:41,149
whatever whatever it is they hand to you

00:10:38,300 --> 00:10:44,569
right obviously we have that benefit

00:10:41,149 --> 00:10:47,209
with things like kvm and Zen but overall

00:10:44,569 --> 00:10:50,029
containers are technology that was

00:10:47,209 --> 00:10:54,649
basically especially dr. kind of born of

00:10:50,029 --> 00:10:56,120
open source and guided by open sores so

00:10:54,649 --> 00:10:59,209
for the one or two people who don't know

00:10:56,120 --> 00:11:01,370
what docker is it is a platform for

00:10:59,209 --> 00:11:04,970
distributed applications for developers

00:11:01,370 --> 00:11:06,649
and admins it makes it easy to get out

00:11:04,970 --> 00:11:07,400
of the problem of well at work on my

00:11:06,649 --> 00:11:09,230
machine

00:11:07,400 --> 00:11:11,180
because you're basically packaging up

00:11:09,230 --> 00:11:14,570
the runtime environment in total and

00:11:11,180 --> 00:11:15,980
shipping that as opposed to scripts that

00:11:14,570 --> 00:11:17,420
may or may not work because the

00:11:15,980 --> 00:11:20,440
libraries that are running on a certain

00:11:17,420 --> 00:11:25,310
system things like that there are I

00:11:20,440 --> 00:11:27,590
don't want to say that this is a hundred

00:11:25,310 --> 00:11:29,810
percent there are corner cases where you

00:11:27,590 --> 00:11:31,520
can have one container like you can do

00:11:29,810 --> 00:11:33,710
fun things like let's say your

00:11:31,520 --> 00:11:36,080
application is only package for fedora

00:11:33,710 --> 00:11:38,480
but what you have in production it's

00:11:36,080 --> 00:11:41,060
only package for fedora 22 but what you

00:11:38,480 --> 00:11:42,830
have in production is cintas six you can

00:11:41,060 --> 00:11:46,130
run docker containers that are the

00:11:42,830 --> 00:11:47,630
Fedora 22 runtime and run that on top of

00:11:46,130 --> 00:11:48,950
your servers that are already in

00:11:47,630 --> 00:11:51,050
production without having to change

00:11:48,950 --> 00:11:54,080
anything except putting doctor on those

00:11:51,050 --> 00:11:57,050
systems but there are corner cases where

00:11:54,080 --> 00:11:59,990
for example you get into things like the

00:11:57,050 --> 00:12:03,440
container expects a mounted volume to

00:11:59,990 --> 00:12:04,760
have selinux permissions set in one way

00:12:03,440 --> 00:12:07,310
and they're actually setting another way

00:12:04,760 --> 00:12:10,550
in the container won't quite work there

00:12:07,310 --> 00:12:13,550
are some corner cases where things will

00:12:10,550 --> 00:12:18,950
actually not just work a hundred percent

00:12:13,550 --> 00:12:21,590
of the time but those are rare docker is

00:12:18,950 --> 00:12:23,450
both one of the confusing things about

00:12:21,590 --> 00:12:25,040
docker is they've used the name to

00:12:23,450 --> 00:12:27,410
describe the engine that runs the

00:12:25,040 --> 00:12:30,050
containers the CLI for managing the

00:12:27,410 --> 00:12:34,070
containers and the format of the images

00:12:30,050 --> 00:12:36,920
so it's a little bit confusing unless

00:12:34,070 --> 00:12:38,660
you just sort of go with it it's you can

00:12:36,920 --> 00:12:40,730
call it very lightweight virtualization

00:12:38,660 --> 00:12:45,830
but it's not real full virtualization

00:12:40,730 --> 00:12:48,140
and it is buzzword compliant so why

00:12:45,830 --> 00:12:51,050
docker it is for again with the caveat

00:12:48,140 --> 00:12:55,210
side listed before very real write once

00:12:51,050 --> 00:12:57,500
run anywhere packaging you don't need it

00:12:55,210 --> 00:12:58,940
what I mean by that is let's say you

00:12:57,500 --> 00:13:02,870
have an application that's going to be

00:12:58,940 --> 00:13:05,330
based on fedora 22 has anybody read the

00:13:02,870 --> 00:13:10,460
Fedora packaging guidelines or looked at

00:13:05,330 --> 00:13:12,860
them they're a little complex now

00:13:10,460 --> 00:13:14,390
there's a reason for that because the

00:13:12,860 --> 00:13:16,070
folks that package Fedora want

00:13:14,390 --> 00:13:18,890
everything to work in all these

00:13:16,070 --> 00:13:20,090
different use cases but for developers

00:13:18,890 --> 00:13:21,290
who just want to ship something

00:13:20,090 --> 00:13:23,509
especially as an intern

00:13:21,290 --> 00:13:25,730
app they don't want to have to deal with

00:13:23,509 --> 00:13:28,670
packaging things as rpms they just want

00:13:25,730 --> 00:13:31,940
to layer it java apps how many people

00:13:28,670 --> 00:13:34,579
work with java ok java does not

00:13:31,940 --> 00:13:38,149
necessarily play well with debian or RPM

00:13:34,579 --> 00:13:41,209
packaging right so you can just put your

00:13:38,149 --> 00:13:43,610
jars in the container rather than having

00:13:41,209 --> 00:13:47,300
to package them up as our pms and then

00:13:43,610 --> 00:13:49,490
ship something you get consistency the

00:13:47,300 --> 00:13:51,410
same container that I'm running here for

00:13:49,490 --> 00:13:53,480
the same image that I run and turn into

00:13:51,410 --> 00:13:55,310
a container is the same one that I will

00:13:53,480 --> 00:13:57,699
give to my admin is the same one that I

00:13:55,310 --> 00:14:00,139
will give to a customer and so forth

00:13:57,699 --> 00:14:03,470
they're layered you can build on other

00:14:00,139 --> 00:14:05,269
people's work at the flock last year we

00:14:03,470 --> 00:14:07,069
had some folks from Yahoo come out and

00:14:05,269 --> 00:14:09,529
they have teams I don't think they're

00:14:07,069 --> 00:14:11,300
actually using docker they're using a

00:14:09,529 --> 00:14:13,880
different container technology but it

00:14:11,300 --> 00:14:17,209
works in a similar way where one team

00:14:13,880 --> 00:14:20,899
prepares the base fedora image another

00:14:17,209 --> 00:14:23,810
team layers Apache on top of that with

00:14:20,899 --> 00:14:26,600
all of with all of Yahoo's special

00:14:23,810 --> 00:14:28,399
configuration and whatever and then that

00:14:26,600 --> 00:14:31,519
is shipped to all the different teams

00:14:28,399 --> 00:14:34,720
that need to use that container for an

00:14:31,519 --> 00:14:37,069
Apache based application so if you're a

00:14:34,720 --> 00:14:39,110
downstream team and you're supporting an

00:14:37,069 --> 00:14:41,000
application say flickr and it's using

00:14:39,110 --> 00:14:43,569
containers you don't have to worry about

00:14:41,000 --> 00:14:46,190
all the layers accept your application

00:14:43,569 --> 00:14:49,130
so that makes it much much easier than

00:14:46,190 --> 00:14:53,060
having to worry about the entire virtual

00:14:49,130 --> 00:14:54,260
appliance ok docker is as I've already

00:14:53,060 --> 00:14:56,329
said it's kind of the leader of

00:14:54,260 --> 00:14:58,040
container innovation and it makes

00:14:56,329 --> 00:15:00,680
dealing with legacy much easier what I

00:14:58,040 --> 00:15:03,620
mean by that is as a you know so that

00:15:00,680 --> 00:15:06,110
examples I've already given people are

00:15:03,620 --> 00:15:08,810
taking for example rell six applications

00:15:06,110 --> 00:15:10,880
putting them in containers based on rail

00:15:08,810 --> 00:15:12,620
six and then deploying them on rail

00:15:10,880 --> 00:15:15,740
seven so they can get the benefit of

00:15:12,620 --> 00:15:17,870
things like the hardware support and you

00:15:15,740 --> 00:15:19,459
know new drivers for new systems that

00:15:17,870 --> 00:15:21,680
are coming out and things like that or

00:15:19,459 --> 00:15:24,769
just new memory management and all the

00:15:21,680 --> 00:15:26,720
other wonderful goodies and vice versa

00:15:24,769 --> 00:15:29,480
if you have an application that needs

00:15:26,720 --> 00:15:32,029
runtimes room r l seven you don't want

00:15:29,480 --> 00:15:34,130
to package them and try to deal with all

00:15:32,029 --> 00:15:34,940
that on rail six or sent ah six if

00:15:34,130 --> 00:15:39,050
you're you

00:15:34,940 --> 00:15:42,320
that then you can run that on top of the

00:15:39,050 --> 00:15:44,060
other one there are some problems we

00:15:42,320 --> 00:15:46,460
need to solve one of them is security

00:15:44,060 --> 00:15:50,930
dan walsh everybody familiar with mr.

00:15:46,460 --> 00:15:53,060
selinux dan walsh okay well he is on our

00:15:50,930 --> 00:15:54,650
doctor team at Red Hat and he has

00:15:53,060 --> 00:15:58,190
written a great deal about some of the

00:15:54,650 --> 00:16:01,730
security problems both excuse me social

00:15:58,190 --> 00:16:04,280
problems and actual physical problems

00:16:01,730 --> 00:16:06,080
with docker security there is still a

00:16:04,280 --> 00:16:08,540
good way to route a machine if you can

00:16:06,080 --> 00:16:09,710
get root in a container okay there are a

00:16:08,540 --> 00:16:11,450
number of things that we're tightening

00:16:09,710 --> 00:16:13,550
up they're doing a great deal of work on

00:16:11,450 --> 00:16:15,470
it but right now security is not a

00:16:13,550 --> 00:16:19,490
hundred percent it's not as isolated as

00:16:15,470 --> 00:16:21,050
a vm so that's a downside provenance of

00:16:19,490 --> 00:16:24,170
containers how many people have pulled a

00:16:21,050 --> 00:16:27,380
docker image from the docker hub so far

00:16:24,170 --> 00:16:32,240
okay how do you know that that's not

00:16:27,380 --> 00:16:35,690
malware you don't you have a little bit

00:16:32,240 --> 00:16:37,790
of assurance from docker Jerome paddle

00:16:35,690 --> 00:16:39,470
uzi i think it was wrote recently about

00:16:37,790 --> 00:16:42,400
all the checks that they do so there are

00:16:39,470 --> 00:16:45,470
some checks and balances but really

00:16:42,400 --> 00:16:48,140
there's not signing and perfect security

00:16:45,470 --> 00:16:49,880
there yet I shouldn't say perfect

00:16:48,140 --> 00:16:52,850
security there's not as good as security

00:16:49,880 --> 00:16:56,380
as it could be I'm going to ask you to

00:16:52,850 --> 00:16:56,380
hold that for the for the end thank you

00:16:56,950 --> 00:17:02,060
it reduces come to reduce the complexity

00:17:00,590 --> 00:17:04,189
if you have and this is one of the

00:17:02,060 --> 00:17:06,290
technologies we're working on if you

00:17:04,189 --> 00:17:07,880
have a multi container application with

00:17:06,290 --> 00:17:10,459
goober Nettie's everybody heard of

00:17:07,880 --> 00:17:12,230
cougar at ease with Cooper Nettie's as

00:17:10,459 --> 00:17:14,390
an orchestration layer was developed

00:17:12,230 --> 00:17:16,160
initially by Google and they have open

00:17:14,390 --> 00:17:18,319
sourced it and basically said this would

00:17:16,160 --> 00:17:19,910
work great with docker we use it with

00:17:18,319 --> 00:17:22,069
our own internal technology we've had

00:17:19,910 --> 00:17:23,390
for like ten years and now that the rest

00:17:22,069 --> 00:17:28,150
of the world has caught up with you with

00:17:23,390 --> 00:17:30,950
us we'd like to share it so anyway

00:17:28,150 --> 00:17:33,590
there's some complexity in deploying an

00:17:30,950 --> 00:17:37,880
application I've talked to the guys who

00:17:33,590 --> 00:17:42,350
do the colab office where suite or the

00:17:37,880 --> 00:17:44,960
group where sweet and they have packaged

00:17:42,350 --> 00:17:47,900
their application and I think they said

00:17:44,960 --> 00:17:48,470
21 separate containers and there's a

00:17:47,900 --> 00:17:50,659
very

00:17:48,470 --> 00:17:52,460
Plex dependency chain between those

00:17:50,659 --> 00:17:55,250
which if you're the admin you really

00:17:52,460 --> 00:17:56,720
don't want to have to figure out so we

00:17:55,250 --> 00:17:59,179
need a way to install an application

00:17:56,720 --> 00:18:00,679
that that's that's that complex with the

00:17:59,179 --> 00:18:02,770
orchestration information and the

00:18:00,679 --> 00:18:07,100
information about its data and so forth

00:18:02,770 --> 00:18:09,169
as easily as we can install an RPM we

00:18:07,100 --> 00:18:11,480
also need we really really need

00:18:09,169 --> 00:18:13,760
container introspection we need to be

00:18:11,480 --> 00:18:16,520
able to peek into a container and say is

00:18:13,760 --> 00:18:19,250
this the latest and greatest is it

00:18:16,520 --> 00:18:21,590
patched do we you know have we is this

00:18:19,250 --> 00:18:24,620
thing got heart bleed or whatever you

00:18:21,590 --> 00:18:26,179
know are we up to date with this do we

00:18:24,620 --> 00:18:29,480
know all of the things that are in this

00:18:26,179 --> 00:18:31,640
container so now let's talk about

00:18:29,480 --> 00:18:34,010
project atomic we had launched this last

00:18:31,640 --> 00:18:36,110
year at Summit and it's a little bit of

00:18:34,010 --> 00:18:38,840
an oddball as far as open source

00:18:36,110 --> 00:18:41,350
projects go typically an open source

00:18:38,840 --> 00:18:45,610
project is something like fedora or

00:18:41,350 --> 00:18:47,690
opensuse or apache httpd where they ship

00:18:45,610 --> 00:18:50,450
basically one thing are they show up a

00:18:47,690 --> 00:18:53,510
couple of things and it's all based on

00:18:50,450 --> 00:18:56,240
that project atomic is dedicated to

00:18:53,510 --> 00:19:00,409
finding patterns for creating minimal

00:18:56,240 --> 00:19:02,570
hosts to run docker containers and we

00:19:00,409 --> 00:19:04,610
did not want to rewrite we did not want

00:19:02,570 --> 00:19:06,740
to recreate the wheel and create yet

00:19:04,610 --> 00:19:08,929
another distribution so what we did was

00:19:06,740 --> 00:19:11,870
we decided to work on patterns and tools

00:19:08,929 --> 00:19:14,870
that would then be used in Fedora CentOS

00:19:11,870 --> 00:19:17,390
and rel and other in other communities

00:19:14,870 --> 00:19:19,490
if they want to pick them up to create

00:19:17,390 --> 00:19:21,230
minimal containers and also the work

00:19:19,490 --> 00:19:26,360
that we're doing around orchestration

00:19:21,230 --> 00:19:29,179
management security and so forth so it

00:19:26,360 --> 00:19:30,650
encompasses our pmos tree cockpit which

00:19:29,179 --> 00:19:33,650
I'm not going to talk a lot about here

00:19:30,650 --> 00:19:37,220
the atomic command or user been atomic

00:19:33,650 --> 00:19:40,220
to prevent confusion Nuala Kuehl which

00:19:37,220 --> 00:19:42,710
is a specification for complex

00:19:40,220 --> 00:19:44,330
containerized applications and then the

00:19:42,710 --> 00:19:48,020
atomic app which is a way of deploying

00:19:44,330 --> 00:19:49,640
them and I'll explain all these not

00:19:48,020 --> 00:19:53,780
going to go too deep into this but

00:19:49,640 --> 00:19:56,210
basically we thought that you know

00:19:53,780 --> 00:19:59,120
running containers on a full rel host is

00:19:56,210 --> 00:20:01,440
sort of overkill okay you really only

00:19:59,120 --> 00:20:03,629
need the bare minimum and

00:20:01,440 --> 00:20:06,899
we don't want you to install anything

00:20:03,629 --> 00:20:10,529
via rpm running on that system we want

00:20:06,899 --> 00:20:12,620
everything to run as a container so

00:20:10,529 --> 00:20:16,799
basically what you get with atomic is

00:20:12,620 --> 00:20:18,570
just the stuff that you need we build

00:20:16,799 --> 00:20:22,259
truck we build the host from a trusted

00:20:18,570 --> 00:20:26,100
distribution like centos fedora or l and

00:20:22,259 --> 00:20:27,779
we provide nothing else this is a point

00:20:26,100 --> 00:20:29,639
of contention for example in the cloud

00:20:27,779 --> 00:20:31,169
work group for fedora where people who

00:20:29,639 --> 00:20:34,799
are doing development on those things

00:20:31,169 --> 00:20:36,570
want like well I want t Moxon screen

00:20:34,799 --> 00:20:38,009
because some people like screen and some

00:20:36,570 --> 00:20:39,600
people like team ox it's like well that

00:20:38,009 --> 00:20:40,830
pills in a whole bunch of dependencies

00:20:39,600 --> 00:20:43,200
that we don't really want on that hose

00:20:40,830 --> 00:20:45,750
well I want get on the thing so I can do

00:20:43,200 --> 00:20:47,460
my work in there it's like yeah but you

00:20:45,750 --> 00:20:48,870
don't want get when you deploy this so

00:20:47,460 --> 00:20:51,600
we don't want to put that on there you

00:20:48,870 --> 00:20:53,929
need to figure out a way to use git and

00:20:51,600 --> 00:20:56,490
do your debugging on the systems without

00:20:53,929 --> 00:20:57,779
inflicting it on people who are running

00:20:56,490 --> 00:20:59,159
a hundred or two hundred or three

00:20:57,779 --> 00:21:00,960
hundred or a thousand of these and

00:20:59,159 --> 00:21:06,330
pushing these images across their

00:21:00,960 --> 00:21:08,340
network right i also want to mention we

00:21:06,330 --> 00:21:10,860
have made some changes to docker

00:21:08,340 --> 00:21:13,289
upstream docker which has been a little

00:21:10,860 --> 00:21:15,090
bit of a point of contention but we've

00:21:13,289 --> 00:21:17,340
made a couple of changes to dr. search

00:21:15,090 --> 00:21:20,070
and dr. pol dr. search is what you use

00:21:17,340 --> 00:21:21,809
to basically talk to the docker hub or

00:21:20,070 --> 00:21:23,399
your registry and say what images do you

00:21:21,809 --> 00:21:26,100
have for me that match this string and

00:21:23,399 --> 00:21:29,159
dr. pol of course is just like git pull

00:21:26,100 --> 00:21:32,690
it's like hey bring this bring this to

00:21:29,159 --> 00:21:35,460
me show me your show me your containers

00:21:32,690 --> 00:21:37,799
what we did was we added additional

00:21:35,460 --> 00:21:40,529
registries in other words the official

00:21:37,799 --> 00:21:43,679
rel registries that are not available on

00:21:40,529 --> 00:21:45,419
docker hub so that people could search

00:21:43,679 --> 00:21:47,220
those if they're if they have rel

00:21:45,419 --> 00:21:49,289
entitlements they can get those and

00:21:47,220 --> 00:21:52,289
someday maybe we'll have an

00:21:49,289 --> 00:21:54,809
authenticated registry for fedora and

00:21:52,289 --> 00:21:57,870
centos where you you know you get the I

00:21:54,809 --> 00:22:02,789
know that I'm getting it direct from the

00:21:57,870 --> 00:22:04,679
from the project dr. search instead of

00:22:02,789 --> 00:22:08,070
just listing a short name like typically

00:22:04,679 --> 00:22:10,139
if I search for fedora the the official

00:22:08,070 --> 00:22:13,169
Fedora project stuff will show up first

00:22:10,139 --> 00:22:14,690
and you'll see things like Fedora 21 and

00:22:13,169 --> 00:22:17,420
Fedora 22

00:22:14,690 --> 00:22:18,650
this will list the full URL where you're

00:22:17,420 --> 00:22:22,070
getting that image from so you know

00:22:18,650 --> 00:22:24,410
exactly where it's coming from we have

00:22:22,070 --> 00:22:26,150
the ability to block registries which is

00:22:24,410 --> 00:22:28,460
important because if you're deploying

00:22:26,150 --> 00:22:30,320
this in a secure environment or a

00:22:28,460 --> 00:22:31,940
company where you don't want people

00:22:30,320 --> 00:22:33,500
grabbing things from docker hub or

00:22:31,940 --> 00:22:37,070
somewhere else you can basically say

00:22:33,500 --> 00:22:41,360
nope you know do not let my admins grab

00:22:37,070 --> 00:22:42,980
just anything um now it's the ability to

00:22:41,360 --> 00:22:45,740
block registries out of the box we don't

00:22:42,980 --> 00:22:48,170
do that but you have the ability and we

00:22:45,740 --> 00:22:49,040
also can warn on push which is important

00:22:48,170 --> 00:22:50,870
because we don't want people

00:22:49,040 --> 00:22:52,760
accidentally uploading things that might

00:22:50,870 --> 00:22:56,060
have corporate secrets or organization

00:22:52,760 --> 00:22:58,040
secret send them to the doctor out these

00:22:56,060 --> 00:23:00,050
are by the way all things that are open

00:22:58,040 --> 00:23:02,810
source these are all available on Dan

00:23:00,050 --> 00:23:06,800
Walsh or ma or either project atomic or

00:23:02,810 --> 00:23:08,420
Dan Walsh's get on github and we have

00:23:06,800 --> 00:23:10,370
tried to upstream them but we have not

00:23:08,420 --> 00:23:12,020
yet come to agreement with dr. on how

00:23:10,370 --> 00:23:14,330
these should look or be implemented so

00:23:12,020 --> 00:23:16,490
until we do so we're going to you know

00:23:14,330 --> 00:23:19,130
carry a patch set we don't like to do

00:23:16,490 --> 00:23:23,540
that we don't really want to do that but

00:23:19,130 --> 00:23:25,790
sometimes you have to so so I've already

00:23:23,540 --> 00:23:27,280
talked about our pmos tree and os tree

00:23:25,790 --> 00:23:29,570
so I'm going to skip through this here

00:23:27,280 --> 00:23:31,250
but if you ever meet Colin Walters

00:23:29,570 --> 00:23:35,150
buying the beer or coffee or something

00:23:31,250 --> 00:23:37,010
because he's done some amazing work the

00:23:35,150 --> 00:23:39,320
reason you want our pmos tree though is

00:23:37,010 --> 00:23:41,060
RPM basically goes one way and that's

00:23:39,320 --> 00:23:43,850
forward it's not really designed for

00:23:41,060 --> 00:23:46,640
rolling things back you can do that with

00:23:43,850 --> 00:23:49,940
yum a little bit but if you break your

00:23:46,640 --> 00:23:52,330
system rpm OS tree makes it real easy to

00:23:49,940 --> 00:23:54,980
just revert to the previous known tree

00:23:52,330 --> 00:23:57,620
it creates an installable tree from the

00:23:54,980 --> 00:24:01,430
RPM sort of like a git tree and it's a

00:23:57,620 --> 00:24:03,560
atomic update so basically I do atomic

00:24:01,430 --> 00:24:05,390
host upgrade it checks and sees if

00:24:03,560 --> 00:24:08,180
there's an update if there is it brings

00:24:05,390 --> 00:24:10,790
it down it tells me all the RPMs that

00:24:08,180 --> 00:24:13,040
have changed and then when i reboot i'll

00:24:10,790 --> 00:24:16,580
be in that new tree if something breaks

00:24:13,040 --> 00:24:22,280
i can do atomic host revert or rollback

00:24:16,580 --> 00:24:24,140
and i will get the previous system the

00:24:22,280 --> 00:24:25,970
atomic command I've already described a

00:24:24,140 --> 00:24:28,310
little bit it's the coherent entry point

00:24:25,970 --> 00:24:29,720
to the system it base

00:24:28,310 --> 00:24:33,620
Lee allows you to manage docker

00:24:29,720 --> 00:24:38,930
containers atomic apps and it allows you

00:24:33,620 --> 00:24:41,210
to manage the host itself it uses the

00:24:38,930 --> 00:24:43,520
label patch that was added to dr. a few

00:24:41,210 --> 00:24:46,100
months ago to hold the information about

00:24:43,520 --> 00:24:47,600
how a container should be run if you've

00:24:46,100 --> 00:24:49,670
done much work with docker you know that

00:24:47,600 --> 00:24:51,650
docker commands can get silly long once

00:24:49,670 --> 00:24:53,840
you're doing things like saying okay I

00:24:51,650 --> 00:24:56,930
want to start up this container with

00:24:53,840 --> 00:24:58,730
this port exposed and me r you know and

00:24:56,930 --> 00:25:01,580
matching this port on the host system

00:24:58,730 --> 00:25:04,190
and I want to mount this volume and I

00:25:01,580 --> 00:25:05,630
want to do this that in the other you

00:25:04,190 --> 00:25:07,460
know the commands can get silly long I

00:25:05,630 --> 00:25:11,480
want to give this thing privileges or

00:25:07,460 --> 00:25:13,220
whatever instead if the developer knows

00:25:11,480 --> 00:25:15,500
how it should be run they put that in

00:25:13,220 --> 00:25:17,090
the dockerfile label and then all you

00:25:15,500 --> 00:25:20,470
have to do is atomic run and that will

00:25:17,090 --> 00:25:23,960
automatically see that and do it okay

00:25:20,470 --> 00:25:27,290
you can find the source on github there

00:25:23,960 --> 00:25:30,950
and then developer blog dan walsh has a

00:25:27,290 --> 00:25:34,700
really good post about about the atomic

00:25:30,950 --> 00:25:36,830
command atomic command enables what's

00:25:34,700 --> 00:25:38,900
called super privileged containers as I

00:25:36,830 --> 00:25:41,630
mentioned we don't want to run anything

00:25:38,900 --> 00:25:43,070
we don't want to install anything on the

00:25:41,630 --> 00:25:45,410
system we want to run everything as a

00:25:43,070 --> 00:25:48,530
container so what's super privileged

00:25:45,410 --> 00:25:50,360
containers let us do typically you want

00:25:48,530 --> 00:25:51,680
the container to be isolated and not be

00:25:50,360 --> 00:25:54,530
able to operate on the host but

00:25:51,680 --> 00:25:56,480
sometimes you actually want to say run

00:25:54,530 --> 00:25:58,340
logging which needs to see the host or

00:25:56,480 --> 00:26:01,340
you want to do something really silly

00:25:58,340 --> 00:26:03,890
Jim Perrin from the centos team has

00:26:01,340 --> 00:26:05,780
actually done what I guess you would

00:26:03,890 --> 00:26:10,970
term sort of a stupid stupid docker

00:26:05,780 --> 00:26:12,980
trick and packaged in gotten Internet

00:26:10,970 --> 00:26:14,990
Explorer running and wine in a container

00:26:12,980 --> 00:26:17,720
that you could ship and run which is

00:26:14,990 --> 00:26:22,070
just ridiculous and and beautiful and

00:26:17,720 --> 00:26:23,660
rare in a very hideous way but basically

00:26:22,070 --> 00:26:26,360
a super privileged containers have

00:26:23,660 --> 00:26:28,400
greater access to the hose and it allows

00:26:26,360 --> 00:26:32,630
developers to package and ship complex

00:26:28,400 --> 00:26:34,520
toolkits and end software these are some

00:26:32,630 --> 00:26:36,460
examples of some of the things that

00:26:34,520 --> 00:26:39,230
we're shipping now that we're offering

00:26:36,460 --> 00:26:41,210
basically tools container image so if

00:26:39,230 --> 00:26:42,140
you need to do debugging or whatever you

00:26:41,210 --> 00:26:43,430
can run a super

00:26:42,140 --> 00:26:46,790
privileged container and the nice thing

00:26:43,430 --> 00:26:48,710
about this too is a containers can be

00:26:46,790 --> 00:26:50,660
like a nice little admin tool kit that

00:26:48,710 --> 00:26:53,180
you carry around and install on a system

00:26:50,660 --> 00:26:54,590
do your work and then remove it and it's

00:26:53,180 --> 00:26:57,230
not you don't have to worry about what

00:26:54,590 --> 00:26:59,090
you're leaving behind there's a

00:26:57,230 --> 00:27:02,990
narcissist log container image and an

00:26:59,090 --> 00:27:05,360
SADC container image depending on what

00:27:02,990 --> 00:27:06,650
we're logging and and so forth you want

00:27:05,360 --> 00:27:08,720
to do and eventually there will be more

00:27:06,650 --> 00:27:11,360
and will also be shipping some of these

00:27:08,720 --> 00:27:15,890
types of containers in the community as

00:27:11,360 --> 00:27:20,750
well so Nuala Kuehl anybody familiar

00:27:15,890 --> 00:27:23,270
with his word any Simpsons fans no we

00:27:20,750 --> 00:27:27,530
naming things is one of the hard things

00:27:23,270 --> 00:27:30,040
in nit and we decided to come up with a

00:27:27,530 --> 00:27:32,600
unique name for this we wanted a

00:27:30,040 --> 00:27:35,780
specification for containerized

00:27:32,600 --> 00:27:38,090
applications and one of the folks in the

00:27:35,780 --> 00:27:39,710
cloud basically was like well what about

00:27:38,090 --> 00:27:41,930
new look you'll he has a comprehensive

00:27:39,710 --> 00:27:44,150
memory of like all the 80s and early 90s

00:27:41,930 --> 00:27:48,620
Simpsons episodes which comes in

00:27:44,150 --> 00:27:52,610
surprisingly handy so basically you can

00:27:48,620 --> 00:27:56,450
define a complex application in a single

00:27:52,610 --> 00:27:58,520
standards-based portable format when I I

00:27:56,450 --> 00:28:01,310
do want to stress that right now this is

00:27:58,520 --> 00:28:03,290
focusing the work is focusing on Cooper

00:28:01,310 --> 00:28:05,690
Nettie's and docker but we want it to

00:28:03,290 --> 00:28:07,640
encompass rocket we want it to encompass

00:28:05,690 --> 00:28:10,580
may sews we want it to encompass stuff

00:28:07,640 --> 00:28:12,830
that comes after those we really really

00:28:10,580 --> 00:28:14,480
really really want we've gone through

00:28:12,830 --> 00:28:15,830
our p.m. and Debian packages and

00:28:14,480 --> 00:28:17,960
couldn't get the industry to agree on

00:28:15,830 --> 00:28:20,300
one format we've gone through yum and

00:28:17,960 --> 00:28:21,650
apt to get and zipper and things like

00:28:20,300 --> 00:28:23,300
that we couldn't get the industry to

00:28:21,650 --> 00:28:25,130
agree on one thing there we're going to

00:28:23,300 --> 00:28:28,460
take another crack at it try to get

00:28:25,130 --> 00:28:30,370
people to just adopt one way to work

00:28:28,460 --> 00:28:33,320
with containers even if you're using

00:28:30,370 --> 00:28:36,230
system DN spawn and Cooper Nettie's

00:28:33,320 --> 00:28:39,140
instead of docker okay we want that

00:28:36,230 --> 00:28:40,580
abstraction layer to be across the board

00:28:39,140 --> 00:28:44,360
and we hope people who will come along

00:28:40,580 --> 00:28:46,250
with us so atomic app this is an app

00:28:44,360 --> 00:28:48,080
that's packages the container what we do

00:28:46,250 --> 00:28:50,090
is we use a container format to ship

00:28:48,080 --> 00:28:53,780
metadata about all the other containers

00:28:50,090 --> 00:28:55,520
data volumes and communities or whatever

00:28:53,780 --> 00:28:55,940
we package all that up and basically an

00:28:55,520 --> 00:28:58,700
empty

00:28:55,940 --> 00:29:01,070
taner it's not going to be run in and of

00:28:58,700 --> 00:29:02,899
itself but is going to provide the

00:29:01,070 --> 00:29:05,899
information for the atomic command to

00:29:02,899 --> 00:29:07,909
unpack and run those things so it's used

00:29:05,899 --> 00:29:10,220
to bootstrap containerized apps and run

00:29:07,909 --> 00:29:13,490
them it's designed to be run in a

00:29:10,220 --> 00:29:15,590
container context and an example here if

00:29:13,490 --> 00:29:18,740
you wanted to just run zoo zoo keeper

00:29:15,590 --> 00:29:21,860
easily atomic installed V pavlin /

00:29:18,740 --> 00:29:23,210
zookeeper atomic app would grab that and

00:29:21,860 --> 00:29:24,769
start it up for you well actually I'm

00:29:23,210 --> 00:29:26,559
sorry would it would grab that install

00:29:24,769 --> 00:29:31,519
it for you and then you would need to do

00:29:26,559 --> 00:29:33,200
atomic run this container name okay so

00:29:31,519 --> 00:29:35,929
basically what we're trying to do is

00:29:33,200 --> 00:29:37,909
make containerized applications is easy

00:29:35,929 --> 00:29:43,100
to install and run as rpm eyes

00:29:37,909 --> 00:29:45,049
applications or using yum okay so this

00:29:43,100 --> 00:29:47,539
is where you would find the website our

00:29:45,049 --> 00:29:49,669
github we are an open project I welcome

00:29:47,539 --> 00:29:51,980
and love when people want to contribute

00:29:49,669 --> 00:29:54,230
or if you have questions you need help I

00:29:51,980 --> 00:29:56,450
want to again if I haven't emphasize

00:29:54,230 --> 00:29:58,700
this enough we work very closely with

00:29:56,450 --> 00:30:02,450
centos and fedora to produce these so

00:29:58,700 --> 00:30:04,940
you can now get an atomic host on based

00:30:02,450 --> 00:30:07,610
on the Fedora 22 cloud image and you can

00:30:04,940 --> 00:30:12,320
get probably in the next week or so a

00:30:07,610 --> 00:30:15,110
centos rebuild of the relative host and

00:30:12,320 --> 00:30:18,230
we are also working on having a more

00:30:15,110 --> 00:30:21,500
frequent sort of you know testing image

00:30:18,230 --> 00:30:22,820
from the centos builds that people can

00:30:21,500 --> 00:30:27,679
follow along if they want to see how

00:30:22,820 --> 00:30:30,080
things working okay I am feeling rough

00:30:27,679 --> 00:30:32,389
I'm going to take like maybe one

00:30:30,080 --> 00:30:35,539
question and then I thank you for your

00:30:32,389 --> 00:30:39,070
indulgence you guys been so nice anybody

00:30:35,539 --> 00:30:46,269
have just one easy question Go Go nice

00:30:39,070 --> 00:30:50,629
Wow okay uh I'm not really sure either

00:30:46,269 --> 00:30:53,570
bojangles or we went to a whiskey in

00:30:50,629 --> 00:30:56,659
burger place downtown I don't remember

00:30:53,570 --> 00:30:58,340
the name of but I know that it was not

00:30:56,659 --> 00:31:00,710
just a fun night out because another

00:30:58,340 --> 00:31:04,129
member my party also has this sickness

00:31:00,710 --> 00:31:07,100
so it's definitely we caught something I

00:31:04,129 --> 00:31:08,750
don't know but for those of you at home

00:31:07,100 --> 00:31:09,799
this is probably completely irrelevant

00:31:08,750 --> 00:31:13,489
but

00:31:09,799 --> 00:31:15,409
anyway any all right I'm gonna shut it

00:31:13,489 --> 00:31:17,539
down uh if you have questions please

00:31:15,409 --> 00:31:20,470
email me or hit me up on Twitter and

00:31:17,539 --> 00:31:20,470
thanks again very much

00:31:33,020 --> 00:31:35,080
you

00:31:38,650 --> 00:31:40,710
you

00:31:46,410 --> 00:31:48,470
you

00:32:25,980 --> 00:32:31,179
citrix xenserver gives you everything

00:32:28,179 --> 00:32:33,340
you need to integrate man and automate a

00:32:31,179 --> 00:32:35,470
virtual data center all on an

00:32:33,340 --> 00:32:37,870
enterprise-class cloud proven virtual

00:32:35,470 --> 00:32:40,630
platform and at a third of the cost of

00:32:37,870 --> 00:32:42,340
other solutions but why even bother with

00:32:40,630 --> 00:32:44,500
virtualizing your server infrastructure

00:32:42,340 --> 00:32:46,450
in the first place well let's say you

00:32:44,500 --> 00:32:48,730
have a traditional one server to one

00:32:46,450 --> 00:32:50,710
application architecture but you're

00:32:48,730 --> 00:32:53,230
running out of resources and performance

00:32:50,710 --> 00:32:55,590
is suffering once you order new server

00:32:53,230 --> 00:32:58,450
hardware you'll wait for delivery

00:32:55,590 --> 00:33:01,330
configure it install your business

00:32:58,450 --> 00:33:04,090
application stage and test the server

00:33:01,330 --> 00:33:06,280
and finally add it to your production

00:33:04,090 --> 00:33:08,470
farm if you've been through this process

00:33:06,280 --> 00:33:10,990
before you know it can take weeks or

00:33:08,470 --> 00:33:12,820
even months you also know it's a

00:33:10,990 --> 00:33:14,830
manually intensive process that will

00:33:12,820 --> 00:33:18,130
burden your team every time you outgrow

00:33:14,830 --> 00:33:19,900
your current setup with a virtual server

00:33:18,130 --> 00:33:22,690
solution you could accomplish all of

00:33:19,900 --> 00:33:25,270
that in less than half a day server

00:33:22,690 --> 00:33:27,100
virtualization software separates the OS

00:33:25,270 --> 00:33:29,500
and application from the underlying

00:33:27,100 --> 00:33:31,660
server hardware and with multiple

00:33:29,500 --> 00:33:33,370
virtual machines on a single server you

00:33:31,660 --> 00:33:36,340
can use each of them to run different

00:33:33,370 --> 00:33:38,140
os's and applications this makes it

00:33:36,340 --> 00:33:39,910
possible to move your virtual machines

00:33:38,140 --> 00:33:41,980
from one piece of hardware to another

00:33:39,910 --> 00:33:44,260
whenever you want to maximize

00:33:41,980 --> 00:33:46,179
utilization simplify maintenance or

00:33:44,260 --> 00:33:48,520
recover from a hardware failure and

00:33:46,179 --> 00:33:51,850
without slowing down your applications

00:33:48,520 --> 00:33:54,520
or users clearly server virtualization

00:33:51,850 --> 00:33:57,550
provides big benefits and Citrix

00:33:54,520 --> 00:33:59,770
XenServer provides even more since it's

00:33:57,550 --> 00:34:01,630
built on an open platform xenserver

00:33:59,770 --> 00:34:03,910
plays well with your existing hardware

00:34:01,630 --> 00:34:06,190
storage systems and IT management

00:34:03,910 --> 00:34:08,950
software as well as with the industry's

00:34:06,190 --> 00:34:10,990
leading cloud service providers best of

00:34:08,950 --> 00:34:12,730
all you can get started by downloading a

00:34:10,990 --> 00:34:15,940
fully functional production ready

00:34:12,730 --> 00:34:18,129
version of xenserver for free after a

00:34:15,940 --> 00:34:20,260
10-minute installation process you'll

00:34:18,129 --> 00:34:22,300
see how easy it is to start virtualizing

00:34:20,260 --> 00:34:24,760
your workloads and automating your IT

00:34:22,300 --> 00:34:26,350
management processes and when you're

00:34:24,760 --> 00:34:28,330
ready for a richer set of management

00:34:26,350 --> 00:34:30,820
tools just upgrade to one of the premium

00:34:28,330 --> 00:34:32,649
editions of xenserver so whether you're

00:34:30,820 --> 00:34:33,080
interested in virtualizing servers for

00:34:32,649 --> 00:34:35,060
the first

00:34:33,080 --> 00:34:37,850
I'm expanding your server virtualization

00:34:35,060 --> 00:34:40,580
footprint or moving server workloads to

00:34:37,850 --> 00:34:42,440
the cloud download and install xenserver

00:34:40,580 --> 00:34:45,350
today and see how it can help you

00:34:42,440 --> 00:34:50,620
simplify your IT environment citrix

00:34:45,350 --> 00:34:50,620
xenserver do more don't spend more

00:34:56,370 --> 00:34:59,370
the

00:36:49,349 --> 00:36:53,650
your customers rely on your website or

00:36:52,150 --> 00:36:56,019
application if it's slower

00:36:53,650 --> 00:36:58,960
non-responsive it infuriates your users

00:36:56,019 --> 00:37:00,819
and costs you money keeping your

00:36:58,960 --> 00:37:04,320
business critical systems humming along

00:37:00,819 --> 00:37:06,690
requires insight into what they're doing

00:37:04,320 --> 00:37:08,760
your system metrics tells stories

00:37:06,690 --> 00:37:10,650
stories that can reveal performance

00:37:08,760 --> 00:37:12,900
bottlenecks resource limitations and

00:37:10,650 --> 00:37:14,460
other problems but how do you keep an

00:37:12,900 --> 00:37:17,100
eye on all of your systems performance

00:37:14,460 --> 00:37:20,160
metrics in real-time and record this

00:37:17,100 --> 00:37:22,110
data for later analysis enter longview

00:37:20,160 --> 00:37:23,910
the new way to see what's really going

00:37:22,110 --> 00:37:26,070
on under the hood the long view

00:37:23,910 --> 00:37:28,200
dashboard lets you visualize the status

00:37:26,070 --> 00:37:30,600
of all your systems providing you with a

00:37:28,200 --> 00:37:33,990
bird's-eye view of your entire fleet you

00:37:30,600 --> 00:37:36,540
can sort by cpu memory swap processes

00:37:33,990 --> 00:37:38,310
load and network usage click a specific

00:37:36,540 --> 00:37:40,710
system to access its individual

00:37:38,310 --> 00:37:43,220
dashboard then click and drag to zoom in

00:37:40,710 --> 00:37:45,660
on chokepoints and get more detail

00:37:43,220 --> 00:37:47,370
comprehensive network data including

00:37:45,660 --> 00:37:49,710
inbound and outbound traffic is

00:37:47,370 --> 00:37:51,240
available on the network tab and disk

00:37:49,710 --> 00:37:53,130
rights and free space on the disk

00:37:51,240 --> 00:37:55,950
stabbed while the process Explorer

00:37:53,130 --> 00:37:58,470
displays usage statistics for individual

00:37:55,950 --> 00:38:00,660
processes the system info tab shows

00:37:58,470 --> 00:38:02,880
listening services active connections

00:38:00,660 --> 00:38:05,010
and available updates adding long view

00:38:02,880 --> 00:38:06,720
to a system is easy just click the

00:38:05,010 --> 00:38:08,880
button copy the one line installation

00:38:06,720 --> 00:38:11,310
command then run the command on your

00:38:08,880 --> 00:38:13,020
linux system to complete the process the

00:38:11,310 --> 00:38:15,210
agent will begin collecting data and

00:38:13,020 --> 00:38:18,720
sending it to longview then the graphs

00:38:15,210 --> 00:38:20,970
start rolling use long view to gain

00:38:18,720 --> 00:38:25,760
visibility into your servers so when

00:38:20,970 --> 00:38:25,760
your website or app heats up it stays up

00:38:29,960 --> 00:38:33,790
you

00:38:31,730 --> 00:38:33,790

YouTube URL: https://www.youtube.com/watch?v=4ESN83TRayA


