Title: Garrett Honeycutt - Puppet v4: How to upgrade and avoid Dragons
Publication date: 2017-01-25
Playlist: 2015 SouthEast LinuxFest
Description: 
	
Captions: 
	00:00:36,010 --> 00:00:42,550
I love coming here every year and I'm

00:00:39,190 --> 00:00:44,800
glad glided me back my see familiar

00:00:42,550 --> 00:00:50,620
faces in the crowd that can come back

00:00:44,800 --> 00:00:53,039
and being a part of all this quick quick

00:00:50,620 --> 00:00:58,269
by about myself i started with puppet in

00:00:53,039 --> 00:01:02,640
2007 I was working for isp speakeasy and

00:00:58,269 --> 00:01:04,479
we were deploying a national VoIP system

00:01:02,640 --> 00:01:08,140
we didn't have any configuration

00:01:04,479 --> 00:01:10,149
management we had deadlines and kept

00:01:08,140 --> 00:01:13,270
getting moved odd way like that never

00:01:10,149 --> 00:01:15,580
happens to you all and we know few tools

00:01:13,270 --> 00:01:17,759
or the experience we started using

00:01:15,580 --> 00:01:20,380
puppet and we were able to quickly

00:01:17,759 --> 00:01:23,110
manage Norton different environments and

00:01:20,380 --> 00:01:24,280
actually get things done which we would

00:01:23,110 --> 00:01:27,039
have been able to do without the

00:01:24,280 --> 00:01:29,560
information engine so that's how I got

00:01:27,039 --> 00:01:32,979
started it was actually solving real

00:01:29,560 --> 00:01:36,369
problems that we had after that I was an

00:01:32,979 --> 00:01:38,350
early employee at Pella miles then I

00:01:36,369 --> 00:01:42,550
moved on to creating my own company were

00:01:38,350 --> 00:01:48,459
a new consulting trading I knew two

00:01:42,550 --> 00:01:53,410
forces in intro and horse new audits as

00:01:48,459 --> 00:01:55,239
well as code reviews enough about me how

00:01:53,410 --> 00:01:58,869
many folks in here are using some sort

00:01:55,239 --> 00:02:01,840
of configuration management out and how

00:01:58,869 --> 00:02:05,950
many of those using public is anyone

00:02:01,840 --> 00:02:11,410
using anything else here here nah you

00:02:05,950 --> 00:02:15,670
ate a bunch of different tools here is

00:02:11,410 --> 00:02:17,110
using a version 3 of puppet so the most

00:02:15,670 --> 00:02:21,430
folks who's already made the jump to

00:02:17,110 --> 00:02:24,310
Herschel fork when it gets this dry

00:02:21,430 --> 00:02:31,770
talking okay not too late who here is

00:02:24,310 --> 00:02:34,870
using a fee to open yes we just think

00:02:31,770 --> 00:02:41,590
that's okay you are not a lot of working

00:02:34,870 --> 00:02:44,410
somebody else that's doing that so when

00:02:41,590 --> 00:02:47,800
I started this migration this is this is

00:02:44,410 --> 00:02:51,700
really a story of how I wanted to start

00:02:47,800 --> 00:02:54,670
supporting pump it forward and all the

00:02:51,700 --> 00:02:57,970
frustrations problems that i had making

00:02:54,670 --> 00:02:59,980
the jump since before polar bears the

00:02:57,970 --> 00:03:02,370
semantic versioning when you have a

00:02:59,980 --> 00:03:06,220
major version change that's when you can

00:03:02,370 --> 00:03:07,990
break functionality and so you know this

00:03:06,220 --> 00:03:12,550
is where you know there's major changes

00:03:07,990 --> 00:03:15,880
that can group the very first thing that

00:03:12,550 --> 00:03:19,120
I noticed was this term and e io like

00:03:15,880 --> 00:03:21,270
what is that keep talking about it

00:03:19,120 --> 00:03:25,450
everywhere that's the all-in-one

00:03:21,270 --> 00:03:27,640
installer so if you've used public

00:03:25,450 --> 00:03:29,200
enterprise to try that out that's the

00:03:27,640 --> 00:03:33,060
tactic that they've been using for years

00:03:29,200 --> 00:03:36,040
and so now those horses is amongst know

00:03:33,060 --> 00:03:38,680
what that does is instead of multiple

00:03:36,040 --> 00:03:41,290
packages in a repository and you get

00:03:38,680 --> 00:03:45,550
this one sort of meta package it has a

00:03:41,290 --> 00:03:47,800
bunch of software so it's called public

00:03:45,550 --> 00:03:49,660
collections and you'll see it's

00:03:47,800 --> 00:03:51,250
numbering starts with wanted that just

00:03:49,660 --> 00:03:56,530
increment so it's not semantic

00:03:51,250 --> 00:03:58,780
versioning super confusing the man agent

00:03:56,530 --> 00:04:00,880
package is the only package that you

00:03:58,780 --> 00:04:03,760
would install you can see it has all of

00:04:00,880 --> 00:04:06,940
this software excited we are familiar

00:04:03,760 --> 00:04:12,130
with the new software collections from

00:04:06,940 --> 00:04:13,900
sometimes yeah so you might be familiar

00:04:12,130 --> 00:04:16,870
with this with the package does is it's

00:04:13,900 --> 00:04:19,570
going to install on everything under its

00:04:16,870 --> 00:04:24,990
own directory structure so all this

00:04:19,570 --> 00:04:27,850
stuff is there one advantage is that

00:04:24,990 --> 00:04:29,919
change on the OS such as a different

00:04:27,850 --> 00:04:31,960
version of Ruby isn't going to rip your

00:04:29,919 --> 00:04:35,950
pump installation because now everything

00:04:31,960 --> 00:04:38,440
is going to all these self-contained one

00:04:35,950 --> 00:04:41,560
disadvantage is that if your OS is

00:04:38,440 --> 00:04:43,240
faster to security updates and the

00:04:41,560 --> 00:04:46,120
public loves teammates in

00:04:43,240 --> 00:04:49,530
that can be a risk for you I'll loads of

00:04:46,120 --> 00:04:49,530
their credit they're really excellent

00:04:51,389 --> 00:04:58,710
the other thing i noticed starting the

00:04:53,949 --> 00:05:02,110
server is no more apache and passenger

00:04:58,710 --> 00:05:04,599
here is using the passenger and cashing

00:05:02,110 --> 00:05:08,380
out right we're using something else

00:05:04,599 --> 00:05:15,190
he's like engine axor uses like web

00:05:08,380 --> 00:05:18,360
brick so this could be an issue if

00:05:15,190 --> 00:05:21,669
you're using things like mod proxy to

00:05:18,360 --> 00:05:24,280
route requests based on the URL does

00:05:21,669 --> 00:05:26,560
anyone do anything funky like that yeah

00:05:24,280 --> 00:05:29,979
so you know that's that's not really

00:05:26,560 --> 00:05:31,690
don't work kmart not entirely bad i'm

00:05:29,979 --> 00:05:37,810
just going to force you to a simpler in

00:05:31,690 --> 00:05:40,419
the charger so now it's all JVM closure

00:05:37,810 --> 00:05:44,580
and JRuby how many folks here just love

00:05:40,419 --> 00:05:44,580
working with java that's an adamite

00:05:45,780 --> 00:05:51,370
those I new account for those at home

00:05:49,270 --> 00:05:59,110
but the record state only one hand went

00:05:51,370 --> 00:06:02,680
up in this for them youngins oh and yeah

00:05:59,110 --> 00:06:05,830
and so I thought the same thing puppet

00:06:02,680 --> 00:06:09,759
DB and has already gone and gone to this

00:06:05,830 --> 00:06:11,830
model and on Ken barbara Lee developer

00:06:09,759 --> 00:06:15,729
their set up a mailing list it's really

00:06:11,830 --> 00:06:18,789
helped him be able to quickly deep out

00:06:15,729 --> 00:06:24,599
of problems that would be awesome

00:06:18,789 --> 00:06:27,190
possible to find it fix it soon and so

00:06:24,599 --> 00:06:30,370
they've seen deficits it's allowed for a

00:06:27,190 --> 00:06:32,919
much faster development this being

00:06:30,370 --> 00:06:37,240
Ruby's going away thurs can rewrite all

00:06:32,919 --> 00:06:40,419
of that code no I mean it's really just

00:06:37,240 --> 00:06:42,780
the JVM as a container and then it's

00:06:40,419 --> 00:06:47,440
using jewelry beings you can interpret

00:06:42,780 --> 00:06:48,849
Liberty sir don't worry you you you

00:06:47,440 --> 00:06:49,650
probably won't actually have to touch

00:06:48,849 --> 00:06:58,199
you

00:06:49,650 --> 00:07:02,669
close your job so now we're using Ruby

00:06:58,199 --> 00:07:06,889
to dot1x is anyone in here managing a

00:07:02,669 --> 00:07:11,789
system that uses Ruby 187 likes a 206

00:07:06,889 --> 00:07:13,710
yeah so almost everybody that's okay

00:07:11,789 --> 00:07:16,470
since the all-in-one installer has its

00:07:13,710 --> 00:07:18,479
own Ruby like packaged that's going to

00:07:16,470 --> 00:07:20,729
allow you to have whatever your whole

00:07:18,479 --> 00:07:26,940
system one is but that puppets going to

00:07:20,729 --> 00:07:32,370
use it so it's still working is anyone

00:07:26,940 --> 00:07:36,210
here managing a mac but yeah so snow

00:07:32,370 --> 00:07:38,699
leopard was released in 2009 and they

00:07:36,210 --> 00:07:42,510
drop support for it that was 10 not six

00:07:38,699 --> 00:07:44,789
and everything before that really what

00:07:42,510 --> 00:07:46,710
the drop support for was there was a

00:07:44,789 --> 00:07:49,680
bunch of different ways than passwords

00:07:46,710 --> 00:07:51,840
were handled and so they ought to

00:07:49,680 --> 00:07:55,080
maintain all that code as well as though

00:07:51,840 --> 00:08:01,260
some changes and have services that

00:07:55,080 --> 00:08:03,840
stuff got your own so after I got it

00:08:01,260 --> 00:08:06,570
installed my next question is like where

00:08:03,840 --> 00:08:12,960
is everything it's not where I expected

00:08:06,570 --> 00:08:16,970
at all so cutting around and things are

00:08:12,960 --> 00:08:16,970
mostly installed under aunt puppet labs

00:08:17,810 --> 00:08:23,340
then you have an office puppet labs bin

00:08:20,520 --> 00:08:25,979
which you need to add to your path so

00:08:23,340 --> 00:08:32,370
that you can officially run puppet or

00:08:25,979 --> 00:08:34,860
gender they didn't think that's a quite

00:08:32,370 --> 00:08:38,550
clever and that have opted puppet labs

00:08:34,860 --> 00:08:41,310
puppet bin and this is meant to not be

00:08:38,550 --> 00:08:44,400
in your path statement and so this has

00:08:41,310 --> 00:08:47,190
programs like Ruby and gem that are

00:08:44,400 --> 00:08:49,950
supporting things like pump it factor so

00:08:47,190 --> 00:08:52,620
if you want to run a version of Jabbar

00:08:49,950 --> 00:08:55,260
or something to see you know that's

00:08:52,620 --> 00:08:57,770
specific to your compensation you put

00:08:55,260 --> 00:09:02,870
the path my hands

00:08:57,770 --> 00:09:02,870
yep and it doesn't cover your OS tools

00:09:03,320 --> 00:09:11,610
the configuration is in at sea pilot

00:09:07,830 --> 00:09:15,839
labs pundit which I thought was a long

00:09:11,610 --> 00:09:19,890
and weird place to put things that's

00:09:15,839 --> 00:09:23,070
because each public related program has

00:09:19,890 --> 00:09:25,560
its configuration under SC Punk laps so

00:09:23,070 --> 00:09:33,450
you'll see like em collected publisher

00:09:25,560 --> 00:09:37,290
mother if you are running on most as

00:09:33,450 --> 00:09:40,680
well most of Oh like distributions we're

00:09:37,290 --> 00:09:44,190
putting the SS elder for puppet and our

00:09:40,680 --> 00:09:47,399
little bit ssl you probably did we did

00:09:44,190 --> 00:09:49,560
not directly directory a lot when you've

00:09:47,399 --> 00:09:52,290
screwed up the certificates always doing

00:09:49,560 --> 00:09:55,260
that didn't know and so that that moved

00:09:52,290 --> 00:09:59,250
under etsy so that definitely threw me

00:09:55,260 --> 00:10:08,579
for a loop so x epub labs puppet

00:09:59,250 --> 00:10:11,700
necessary all of that lives so under the

00:10:08,579 --> 00:10:13,740
FC puppet labs besides the application

00:10:11,700 --> 00:10:19,230
specific configuration there's a code

00:10:13,740 --> 00:10:24,390
directory seems to me like we're really

00:10:19,230 --> 00:10:27,060
including and see yep that's that's

00:10:24,390 --> 00:10:29,610
that's where it's living at today we

00:10:27,060 --> 00:10:33,420
have higher configuration as well as

00:10:29,610 --> 00:10:35,399
hybrid data so before you might have had

00:10:33,420 --> 00:10:38,640
things that are far let para now let's

00:10:35,399 --> 00:10:42,649
all see pull-ups code there static

00:10:38,640 --> 00:10:42,649
modules as well as your environments

00:10:43,490 --> 00:10:49,470
we're is using the directory-based

00:10:46,010 --> 00:10:51,750
environments and one two three we have

00:10:49,470 --> 00:10:55,350
like an etsy pump mr ms production and

00:10:51,750 --> 00:10:58,320
does the like that come so it just

00:10:55,350 --> 00:11:01,410
changed the directory path that still

00:10:58,320 --> 00:11:03,180
works the same here was using static

00:11:01,410 --> 00:11:05,870
environments and in their puppet comp

00:11:03,180 --> 00:11:07,410
they have like an environment block

00:11:05,870 --> 00:11:10,730
environment dead

00:11:07,410 --> 00:11:17,069
here's some path was anyone doing that

00:11:10,730 --> 00:11:20,459
great that's not good so with these

00:11:17,069 --> 00:11:22,560
environments off they are always

00:11:20,459 --> 00:11:25,560
accessible the directory comes

00:11:22,560 --> 00:11:27,180
integration you can access it you know

00:11:25,560 --> 00:11:30,660
after we start the master or add any

00:11:27,180 --> 00:11:34,319
configuration it plays really well with

00:11:30,660 --> 00:11:37,319
marked ham ke ha how many folks here are

00:11:34,319 --> 00:11:41,759
using art art mkay now maybe still good

00:11:37,319 --> 00:11:44,129
really yeah so for everyone that's not I

00:11:41,759 --> 00:11:46,680
think to check out my slides from last

00:11:44,129 --> 00:11:49,620
year about managing modules and you know

00:11:46,680 --> 00:11:56,430
the art mva of a wagon here it's really

00:11:49,620 --> 00:11:59,579
gonna make your life once over there is

00:11:56,430 --> 00:12:02,879
many type and provider improvements a

00:11:59,579 --> 00:12:07,079
very short list is just the huge

00:12:02,879 --> 00:12:11,399
improvements to Windows seuss freebsd

00:12:07,079 --> 00:12:15,540
openbsd mins young systemd kezia fast

00:12:11,399 --> 00:12:19,189
pacman jad think music probably

00:12:15,540 --> 00:12:25,980
something in that list they got

00:12:19,189 --> 00:12:30,750
marginally better so facts have always

00:12:25,980 --> 00:12:35,009
been strings so you run factor wherever

00:12:30,750 --> 00:12:37,829
that output is always later versions of

00:12:35,009 --> 00:12:41,220
up a three they introduced if nobody to

00:12:37,829 --> 00:12:45,420
set string of five facts to false does

00:12:41,220 --> 00:12:47,850
anyone play with that and by setting the

00:12:45,420 --> 00:12:50,399
screen if i have the facts to false what

00:12:47,850 --> 00:12:53,459
it did was give you structured data so

00:12:50,399 --> 00:12:57,689
you could have an actual ray instead of

00:12:53,459 --> 00:13:02,970
just a strainer you could have a hash or

00:12:57,689 --> 00:13:07,079
bleed here had to take facts and that

00:13:02,970 --> 00:13:12,870
was like parsing them in your templates

00:13:07,079 --> 00:13:15,050
or something yeah so now this is the

00:13:12,870 --> 00:13:19,760
default with public or is that

00:13:15,050 --> 00:13:24,110
facts are structured data so here's an

00:13:19,760 --> 00:13:26,570
example the OS fact I've given it that

00:13:24,110 --> 00:13:29,180
josh campbell outputs just to make it a

00:13:26,570 --> 00:13:33,620
little easier to see the data type we

00:13:29,180 --> 00:13:36,560
see that OS is de hash it has keys named

00:13:33,620 --> 00:13:40,790
family and that are obese as a sub

00:13:36,560 --> 00:13:45,740
passion and so the one this just shows

00:13:40,790 --> 00:13:49,040
the structure data approach and then you

00:13:45,740 --> 00:13:51,290
can access individual pieces of this as

00:13:49,040 --> 00:13:54,050
the phone as opposed to before there's

00:13:51,290 --> 00:14:01,700
just a ton of different mac names and

00:13:54,050 --> 00:14:05,000
they won't stream different types get a

00:14:01,700 --> 00:14:11,089
moment to check out this code so here i

00:14:05,000 --> 00:14:13,880
have a class and I've gotten a classic

00:14:11,089 --> 00:14:18,920
ramener bar and the default values true

00:14:13,880 --> 00:14:21,320
and I've got all this other code to deal

00:14:18,920 --> 00:14:24,079
with type conversion right because what

00:14:21,320 --> 00:14:28,029
if you pass me true as a string because

00:14:24,079 --> 00:14:28,029
you got it from factor an agenda strings

00:14:28,060 --> 00:14:32,899
so here I'm saying if R is the strength

00:14:30,890 --> 00:14:36,170
that I'm going to run string to pull

00:14:32,899 --> 00:14:38,270
turn it back into a boolean else I'm

00:14:36,170 --> 00:14:40,480
just going to leave it alone and then

00:14:38,270 --> 00:14:44,540
just to be sure i'm going to validate it

00:14:40,480 --> 00:14:48,200
all right so now I've got all this code

00:14:44,540 --> 00:14:49,820
to handle that Mike Pettine have people

00:14:48,200 --> 00:14:53,329
seen this pattern before where Jesus

00:14:49,820 --> 00:14:55,160
pattern what you saw that true wasn't

00:14:53,329 --> 00:15:00,110
actually a bully ended in the evening

00:14:55,160 --> 00:15:02,110
yeah like we the new all sorts of type

00:15:00,110 --> 00:15:04,399
conversions in the street and the

00:15:02,110 --> 00:15:11,110
structured facts are going to help us

00:15:04,399 --> 00:15:17,660
with that something else that's new our

00:15:11,110 --> 00:15:21,320
templates with EPP so we used to use er

00:15:17,660 --> 00:15:24,000
me to process templates puppet variables

00:15:21,320 --> 00:15:29,430
were based as Ruby variables with it

00:15:24,000 --> 00:15:33,720
er be that was EPP you can use the new

00:15:29,430 --> 00:15:36,840
but I guess familiar puppet language to

00:15:33,720 --> 00:15:39,810
handle it your templates eerie still

00:15:36,840 --> 00:15:42,060
exists template function still uses your

00:15:39,810 --> 00:15:44,100
be so you're getting keep you know when

00:15:42,060 --> 00:15:49,410
you were done if you want to use the new

00:15:44,100 --> 00:15:53,700
way it use the EPP function Oh parse can

00:15:49,410 --> 00:15:57,120
be fun I'm hoping that other labs will

00:15:53,700 --> 00:15:59,700
add more documentation for EPP which

00:15:57,120 --> 00:16:11,750
appears sadly to be the same for the

00:15:59,700 --> 00:16:17,130
docks a big change with the language is

00:16:11,750 --> 00:16:24,750
it it iteration which is accomplished

00:16:17,130 --> 00:16:29,160
with llantas which are just ah its

00:16:24,750 --> 00:16:32,790
function based so now we have each right

00:16:29,160 --> 00:16:34,890
so who here has ever SAT with the public

00:16:32,790 --> 00:16:39,930
hood you're like how do I go through a

00:16:34,890 --> 00:16:43,860
list of things you don't so now we have

00:16:39,930 --> 00:16:47,820
got each when puppet started there was

00:16:43,860 --> 00:16:51,089
this idea that every resource in your

00:16:47,820 --> 00:16:53,490
code could then be translated to a

00:16:51,089 --> 00:16:56,850
resource in the catalog that was going

00:16:53,490 --> 00:17:00,570
to be applied to your system but really

00:16:56,850 --> 00:17:03,540
that's that idea has been gone for years

00:17:00,570 --> 00:17:06,270
now as we kind of create resources all

00:17:03,540 --> 00:17:09,180
when to find types so for years you've

00:17:06,270 --> 00:17:12,720
been able to use create resources call

00:17:09,180 --> 00:17:19,079
it define type and have it read data now

00:17:12,720 --> 00:17:21,990
it's a bit easier to use on each here's

00:17:19,079 --> 00:17:26,160
an example of it in action here I've got

00:17:21,990 --> 00:17:29,520
a list and using the each function on

00:17:26,160 --> 00:17:34,290
the list the other syntax probably looks

00:17:29,520 --> 00:17:36,030
similar to Ruby see I've got a index

00:17:34,290 --> 00:17:41,040
it's going to be incremented and then

00:17:36,030 --> 00:17:46,080
you so this code would produce this

00:17:41,040 --> 00:17:50,480
result take make sense what's going on

00:17:46,080 --> 00:17:53,250
here you can also instead of using it

00:17:50,480 --> 00:17:58,980
like the classical function with each

00:17:53,250 --> 00:18:01,140
and parenthesis and your arguments you

00:17:58,980 --> 00:18:04,260
can use it more similar to repeat with

00:18:01,140 --> 00:18:07,470
each so this is actually calling Don and

00:18:04,260 --> 00:18:10,080
the function on that piece of data so

00:18:07,470 --> 00:18:12,690
here notice I didn't have to say dollar

00:18:10,080 --> 00:18:15,240
sign and list equals i'm going to say

00:18:12,690 --> 00:18:20,520
here's some data which is new and then

00:18:15,240 --> 00:18:30,330
not each and again it's going to have

00:18:20,520 --> 00:18:33,030
the same output so in the past data

00:18:30,330 --> 00:18:36,110
transformation you probably did it with

00:18:33,030 --> 00:18:41,390
custom Ruby functions has anyone ever

00:18:36,110 --> 00:18:44,610
done that before yep or who's created a

00:18:41,390 --> 00:18:47,130
template so that they can lunge data do

00:18:44,610 --> 00:18:50,700
transformations in template right and

00:18:47,130 --> 00:18:53,160
that's super fun right and so now

00:18:50,700 --> 00:18:55,410
there's other lambdas to help with the

00:18:53,160 --> 00:18:58,140
data transformation so you can do it

00:18:55,410 --> 00:19:00,110
directly in the language as opposed to

00:18:58,140 --> 00:19:04,050
having to you know go to these other

00:19:00,110 --> 00:19:06,350
mechanisms that look like magic to the

00:19:04,050 --> 00:19:06,350
users

00:19:10,580 --> 00:19:18,270
the next thing that got me was

00:19:12,510 --> 00:19:22,080
typecasting so you can specify the type

00:19:18,270 --> 00:19:23,880
for your perimeters and if the data

00:19:22,080 --> 00:19:27,750
isn't in that type that you get a

00:19:23,880 --> 00:19:30,210
compilation error and so we're back to

00:19:27,750 --> 00:19:33,660
this piece of code again so this was

00:19:30,210 --> 00:19:36,840
like really standard bar it's true and

00:19:33,660 --> 00:19:39,840
then somebody throws me a string I'm

00:19:36,840 --> 00:19:43,230
going to make it true are you make it a

00:19:39,840 --> 00:19:46,799
boolean I have to validate everything so

00:19:43,230 --> 00:19:51,450
I found that a huge section of my code

00:19:46,799 --> 00:19:53,700
it's just this I'm I'm validating all of

00:19:51,450 --> 00:19:55,950
my inputs right we never want to trust

00:19:53,700 --> 00:19:58,289
with people give us we want to validate

00:19:55,950 --> 00:20:01,559
and then I'm possibly do eaten time new

00:19:58,289 --> 00:20:04,049
versions and so for classes that have a

00:20:01,559 --> 00:20:07,409
lot of parameters you know this is a

00:20:04,049 --> 00:20:13,049
considerable amount of code you have to

00:20:07,409 --> 00:20:16,200
keep up with now I can and this is

00:20:13,049 --> 00:20:18,000
optional so your code that doesn't

00:20:16,200 --> 00:20:21,539
specify this like this code still works

00:20:18,000 --> 00:20:23,610
and public for but now I can put in

00:20:21,539 --> 00:20:27,659
front of the variable I can type cast it

00:20:23,610 --> 00:20:30,179
so here I'm saying boolean bar equals

00:20:27,659 --> 00:20:32,520
true and so now puppet is going to

00:20:30,179 --> 00:20:34,679
enforce the bars of millions so if you

00:20:32,520 --> 00:20:36,360
pass bar or something else you know it's

00:20:34,679 --> 00:20:39,780
going to fail with the compilation error

00:20:36,360 --> 00:20:43,230
so all of this code now I can just get

00:20:39,780 --> 00:20:45,960
rid of and replace by just saying I want

00:20:43,230 --> 00:20:50,880
to borrow the ebullient all along right

00:20:45,960 --> 00:20:54,960
I think this is is huge for code

00:20:50,880 --> 00:20:56,669
simplification and reduction I think

00:20:54,960 --> 00:20:59,580
they did a really good job at this one

00:20:56,669 --> 00:21:01,590
when I first saw it I thought they're

00:20:59,580 --> 00:21:04,080
really making things complicated and

00:21:01,590 --> 00:21:06,539
I've got to do all this time casting but

00:21:04,080 --> 00:21:08,490
what I found through practice is that it

00:21:06,539 --> 00:21:12,210
really is going to allow me to eliminate

00:21:08,490 --> 00:21:13,830
a bunch of CO and bunch of checks I can

00:21:12,210 --> 00:21:16,490
just save the beginning here's what i

00:21:13,830 --> 00:21:16,490
wanted to me

00:21:18,090 --> 00:21:25,029
here are the coordinated types so the

00:21:22,690 --> 00:21:26,889
solution should look pretty familiar as

00:21:25,029 --> 00:21:32,649
we have things like how projects on

00:21:26,889 --> 00:21:35,200
there they also introduced this idea of

00:21:32,649 --> 00:21:38,500
an abstract data types which provide

00:21:35,200 --> 00:21:48,779
more flexibility with matching as well

00:21:38,500 --> 00:21:53,139
as restricting data so upgrading your

00:21:48,779 --> 00:21:56,139
running puppet 3 or person to not at all

00:21:53,139 --> 00:21:59,110
unlike how do you get from their form so

00:21:56,139 --> 00:22:03,879
i'm a big proponent of never upgrading

00:21:59,110 --> 00:22:06,909
in place by doing so you can cause

00:22:03,879 --> 00:22:09,309
downtime if it doesn't work right and

00:22:06,909 --> 00:22:11,799
then you have this mad scramble of well

00:22:09,309 --> 00:22:15,309
i upgraded my thing and now i have to

00:22:11,799 --> 00:22:18,419
get all my agents to work and you you're

00:22:15,309 --> 00:22:21,149
imposing this window and yourself I'm

00:22:18,419 --> 00:22:23,710
offended this idea of immutable

00:22:21,149 --> 00:22:25,690
infrastructure and so the idea is you

00:22:23,710 --> 00:22:30,639
don't make the changes instead you just

00:22:25,690 --> 00:22:33,700
deploy a new service and that's what I

00:22:30,639 --> 00:22:36,970
would suggest that everyone do leave

00:22:33,700 --> 00:22:41,080
your current systems intact create new

00:22:36,970 --> 00:22:44,049
puppet masters and then you can install

00:22:41,080 --> 00:22:47,110
the new installer on your systems port

00:22:44,049 --> 00:22:49,059
them to the new of the Masters you know

00:22:47,110 --> 00:22:52,029
on a timeframe that makes sense for you

00:22:49,059 --> 00:22:54,669
as opposed to line is upgraded

00:22:52,029 --> 00:22:56,259
everything to puppet for so now we're

00:22:54,669 --> 00:22:59,470
going to go hit all the agents and hope

00:22:56,259 --> 00:23:07,929
it all works today give yourself another

00:22:59,470 --> 00:23:11,559
a better schedule that way so I manage a

00:23:07,929 --> 00:23:16,659
bunch of very common modules that you

00:23:11,559 --> 00:23:19,990
would use on you know all like a lot of

00:23:16,659 --> 00:23:24,100
systems I found that after doing

00:23:19,990 --> 00:23:26,169
consulting I was a lot of time you know

00:23:24,100 --> 00:23:28,360
just doing these basics everywhere

00:23:26,169 --> 00:23:29,270
before we could actually get into your

00:23:28,360 --> 00:23:31,700
application

00:23:29,270 --> 00:23:35,570
and so now I just maintain a bunch of

00:23:31,700 --> 00:23:38,450
these core modules so that when I go

00:23:35,570 --> 00:23:40,340
into an environment like the base system

00:23:38,450 --> 00:23:43,090
it's just done and that we can focus on

00:23:40,340 --> 00:23:45,530
the thing that makes it useful for you

00:23:43,090 --> 00:23:48,980
so I've got all these things that I

00:23:45,530 --> 00:23:51,890
might committed to and this is really

00:23:48,980 --> 00:23:53,920
just again my my story if I don't get

00:23:51,890 --> 00:23:57,080
all this stuff to work with puppet for

00:23:53,920 --> 00:23:59,720
its here and you know I want to be

00:23:57,080 --> 00:24:02,210
compatible and I want to keep

00:23:59,720 --> 00:24:04,700
compatibility with version 3 as well

00:24:02,210 --> 00:24:10,010
because it'll be I think well as people

00:24:04,700 --> 00:24:14,980
make the switch how many people will

00:24:10,010 --> 00:24:14,980
have their code public on github

00:24:16,420 --> 00:24:26,930
seriously how about another public

00:24:19,490 --> 00:24:31,810
service people afraid to have their code

00:24:26,930 --> 00:24:38,240
in public it might not be awesome yeah

00:24:31,810 --> 00:24:40,250
yeah well there's this idea that if

00:24:38,240 --> 00:24:42,620
you're not embarrassed of your first

00:24:40,250 --> 00:24:47,300
release you waited too long to release

00:24:42,620 --> 00:24:49,190
it so it's better to get in the practice

00:24:47,300 --> 00:24:51,680
of just getting your code out there and

00:24:49,190 --> 00:24:54,320
making the changes and then it's just

00:24:51,680 --> 00:24:57,920
the way you work as opposed to saying I

00:24:54,320 --> 00:25:00,170
don't want people to see that even your

00:24:57,920 --> 00:25:04,100
super bad code is going to help other

00:25:00,170 --> 00:25:05,840
people as well as help yourself so since

00:25:04,100 --> 00:25:08,420
not that many folks raised their hands I

00:25:05,840 --> 00:25:10,730
totally encourage you to do that if it's

00:25:08,420 --> 00:25:13,940
because you're not familiar with newer

00:25:10,730 --> 00:25:16,070
tools like get theirs theirs get talks

00:25:13,940 --> 00:25:18,140
going on here somebody wants to learn

00:25:16,070 --> 00:25:21,710
about get I'll teach them after the

00:25:18,140 --> 00:25:24,680
class but definitely your code needs to

00:25:21,710 --> 00:25:28,090
be what people can use it how many

00:25:24,680 --> 00:25:33,170
people are using other people's modules

00:25:28,090 --> 00:25:35,090
okay that's that's good developer like

00:25:33,170 --> 00:25:36,220
you want actually develop as little as

00:25:35,090 --> 00:25:38,590
possible

00:25:36,220 --> 00:25:43,559
use other people's code so encourage you

00:25:38,590 --> 00:25:43,559
to do that I'm a folks

00:26:31,539 --> 00:26:39,009
I wanted to see that they would all work

00:26:33,850 --> 00:26:42,999
I thought that if I was lucky you know

00:26:39,009 --> 00:26:44,470
iodide which is an ad puppet for it III

00:26:42,999 --> 00:26:49,059
with the future parser to my code and

00:26:44,470 --> 00:26:53,320
everything would just work yeah I'm

00:26:49,059 --> 00:26:55,299
quite the case trebas for me is testing

00:26:53,320 --> 00:26:57,789
a few things it's testing the metadata

00:26:55,299 --> 00:27:00,509
as performant it's properly formatted

00:26:57,789 --> 00:27:04,359
it's testing the style with puppet Lant

00:27:00,509 --> 00:27:06,729
its testing syntax validation so will

00:27:04,359 --> 00:27:13,509
this work on pub before and it's also

00:27:06,729 --> 00:27:16,210
writing my horse Peck Texas so I had to

00:27:13,509 --> 00:27:19,330
modify the comfort and put in this

00:27:16,210 --> 00:27:24,190
little chunk of code what this is doing

00:27:19,330 --> 00:27:27,129
is configuring the puff master to use

00:27:24,190 --> 00:27:31,529
the future purser an environment

00:27:27,129 --> 00:27:31,529
variables found so if I said

00:27:33,370 --> 00:27:40,840
our spec is going to tell puppet to use

00:27:35,200 --> 00:27:42,490
the future mercer with travis i can set

00:27:40,840 --> 00:27:47,170
environment variables and that gets

00:27:42,490 --> 00:27:48,940
passed on so for my matrix I tests every

00:27:47,170 --> 00:27:52,300
version of public three and four

00:27:48,940 --> 00:27:55,150
explicitly that I'm supporting as well

00:27:52,300 --> 00:27:57,040
as see the bottom line is just for so

00:27:55,150 --> 00:27:59,590
it's going to use the newest version of

00:27:57,040 --> 00:28:02,980
four so four dot 2 gets released

00:27:59,590 --> 00:28:06,220
tomorrow then Travis will start testing

00:28:02,980 --> 00:28:08,290
in and then we see parser equals future

00:28:06,220 --> 00:28:14,890
I'm testing the latest version of

00:28:08,290 --> 00:28:18,070
version 3 with the future person so this

00:28:14,890 --> 00:28:21,640
is going to create a matrix or made with

00:28:18,070 --> 00:28:23,950
Travis CI to test multiple versions

00:28:21,640 --> 00:28:26,770
groovy against these multiple versions

00:28:23,950 --> 00:28:28,929
of puppet and make sure my code is

00:28:26,770 --> 00:28:32,050
actually it's operable between all of

00:28:28,929 --> 00:28:34,480
those I personally still support Ruby

00:28:32,050 --> 00:28:41,679
187 so I have a bunch of folks keys out

00:28:34,480 --> 00:28:49,030
like sum total of six as holes 193 200

00:28:41,679 --> 00:28:55,120
and 201 devil how many people have spec

00:28:49,030 --> 00:29:00,160
test oh no as a few of you were in my

00:28:55,120 --> 00:29:02,980
class about spending all right so even

00:29:00,160 --> 00:29:05,590
if you don't have spec tests setting up

00:29:02,980 --> 00:29:08,440
this Travis or private like Jenkins

00:29:05,590 --> 00:29:11,140
instance is super useful because you can

00:29:08,440 --> 00:29:13,950
still do the syntax validation as well

00:29:11,140 --> 00:29:16,690
as the style validation so even without

00:29:13,950 --> 00:29:18,850
our spec test to test what your code is

00:29:16,690 --> 00:29:22,960
supposed to do you can at least just see

00:29:18,850 --> 00:29:29,920
will my code compile under before or is

00:29:22,960 --> 00:29:31,630
it going to fail so I sort of do that

00:29:29,920 --> 00:29:33,550
after I banged my head on the keyboard

00:29:31,630 --> 00:29:38,170
for a while to get Travis to actually

00:29:33,550 --> 00:29:40,620
work I started testing some code and I

00:29:38,170 --> 00:29:44,140
know this first off resource overrides

00:29:40,620 --> 00:29:45,280
so does anyone see anything wrong with

00:29:44,140 --> 00:29:54,280
this code

00:29:45,280 --> 00:30:00,400
I hope not because in version 3 this is

00:29:54,280 --> 00:30:03,910
totally legit version for this is not so

00:30:00,400 --> 00:30:10,420
this is what works in version four did

00:30:03,910 --> 00:30:15,210
anyone catch that yeah so that space

00:30:10,420 --> 00:30:19,600
there it's not happy with so and before

00:30:15,210 --> 00:30:22,930
that's the way the language works now so

00:30:19,600 --> 00:30:25,330
okay okay so that you know re pushed my

00:30:22,930 --> 00:30:30,580
code see what Travis is going to fail on

00:30:25,330 --> 00:30:32,740
next film is next which is the type

00:30:30,580 --> 00:30:36,490
function we're uses the type function

00:30:32,740 --> 00:30:39,490
now in their code from standard web so

00:30:36,490 --> 00:30:42,420
tonight just tells you the type variable

00:30:39,490 --> 00:30:48,880
so to tell you like stray ash or a

00:30:42,420 --> 00:30:52,270
boolean so I use it all over the show

00:30:48,880 --> 00:30:56,830
and now I get the this problem type is

00:30:52,270 --> 00:30:58,960
now a reserved word but you put it in

00:30:56,830 --> 00:31:03,040
standard lip puppet why is it now

00:30:58,960 --> 00:31:06,790
reserved okay all right so they just did

00:31:03,040 --> 00:31:10,830
the clever approach of well let's just

00:31:06,790 --> 00:31:16,930
rename the function to type programs

00:31:10,830 --> 00:31:19,930
same code a different name so for

00:31:16,930 --> 00:31:24,270
statement live how many folks are using

00:31:19,930 --> 00:31:24,270
like version 3 something at standard the

00:31:24,330 --> 00:31:34,900
person for who knows the tool installs

00:31:29,710 --> 00:31:37,210
like whatever version so you're ready to

00:31:34,900 --> 00:31:41,560
start using public laughs Tanner live

00:31:37,210 --> 00:31:48,130
version 6 04 06 photo that's where type

00:31:41,560 --> 00:31:49,510
3 X was introduced yeah and you want to

00:31:48,130 --> 00:31:51,730
make sure if you're doing that respect

00:31:49,510 --> 00:31:54,400
has to update your fixtures email as

00:31:51,730 --> 00:31:57,809
well so that the tests actually pull in

00:31:54,400 --> 00:32:00,160
the right version of Sarila

00:31:57,809 --> 00:32:02,799
other things that threw me for a loop

00:32:00,160 --> 00:32:06,429
when upgrading my Center blood is that

00:32:02,799 --> 00:32:09,640
validate absolute path here let's use

00:32:06,429 --> 00:32:13,720
that function where's Ben validating

00:32:09,640 --> 00:32:15,580
their inputs no you can't trust with

00:32:13,720 --> 00:32:17,530
those users and you I'll send you all

00:32:15,580 --> 00:32:21,880
sorts of garbage so we always want to

00:32:17,530 --> 00:32:25,030
validate the input felidae absolute path

00:32:21,880 --> 00:32:28,600
now accepts or raise instead of just

00:32:25,030 --> 00:32:31,450
strings which is very cool but also

00:32:28,600 --> 00:32:34,570
broke all my sins protocol respect tests

00:32:31,450 --> 00:32:36,160
where I was passing in arrays and hoping

00:32:34,570 --> 00:32:40,150
that it would fail and then suddenly

00:32:36,160 --> 00:32:47,049
they weren't awesome but I didn't go

00:32:40,150 --> 00:32:51,070
back to change my code the error codes

00:32:47,049 --> 00:32:54,669
changed ever so slightly which again

00:32:51,070 --> 00:32:57,220
broke a ton of my spec test when you're

00:32:54,669 --> 00:33:01,419
writing your spec test you also want if

00:32:57,220 --> 00:33:04,059
if you are manifest is supposed to fail

00:33:01,419 --> 00:33:07,840
like for instance if you only support

00:33:04,059 --> 00:33:10,210
version 6 and 7 of sent OS and you fail

00:33:07,840 --> 00:33:13,140
if it's not six or seven or eight if I

00:33:10,210 --> 00:33:15,429
say I'm such a wuss five it should bail

00:33:13,140 --> 00:33:22,030
you want to check that those errors

00:33:15,429 --> 00:33:24,400
actually happen stay with your types so

00:33:22,030 --> 00:33:27,910
here we got this error which you can

00:33:24,400 --> 00:33:31,419
read on the screen here at the room I'm

00:33:27,910 --> 00:33:34,450
guessing but saying my reg ex that

00:33:31,419 --> 00:33:38,530
starts with carrots be getting enough

00:33:34,450 --> 00:33:40,510
they line true is not a string and it

00:33:38,530 --> 00:33:42,429
fails because the error message changes

00:33:40,510 --> 00:33:46,200
and now it tells you a bunch of other

00:33:42,429 --> 00:33:48,820
junk and then it says crews not strength

00:33:46,200 --> 00:33:51,250
so the fix was simple i decided get rid

00:33:48,820 --> 00:33:53,710
of that carrot but if you were being

00:33:51,250 --> 00:33:55,720
very explicit in your red x's about what

00:33:53,710 --> 00:33:58,179
the messages you're saying it needs to

00:33:55,720 --> 00:34:04,750
begin with this and that with this that

00:33:58,179 --> 00:34:07,480
can also cause errors for you for me it

00:34:04,750 --> 00:34:09,659
was an easy fix but fix i have two

00:34:07,480 --> 00:34:09,659
antennae

00:34:10,350 --> 00:34:17,020
x is tumblin this this is dreamy off who

00:34:16,030 --> 00:34:19,810
here has been seeing all those

00:34:17,020 --> 00:34:21,909
deprecation warnings but say you know

00:34:19,810 --> 00:34:24,970
you need to start putting the outside in

00:34:21,909 --> 00:34:28,240
front of your variable well version for

00:34:24,970 --> 00:34:29,890
those are actually deprecated now so if

00:34:28,240 --> 00:34:31,750
you didn't if you haven't gone back and

00:34:29,890 --> 00:34:34,840
cleaned up that code it's going to break

00:34:31,750 --> 00:34:37,480
so make sure you do that so in your ear

00:34:34,840 --> 00:34:39,760
eat files when you're using a public

00:34:37,480 --> 00:34:42,730
variable you just put the at sign in

00:34:39,760 --> 00:34:47,110
front of it so make sure you have your

00:34:42,730 --> 00:34:50,440
hat more instead of park I had one

00:34:47,110 --> 00:34:55,080
module that used in inline templates so

00:34:50,440 --> 00:34:58,030
anyone use any inline templates and so

00:34:55,080 --> 00:34:59,920
my syntax validation didn't check that

00:34:58,030 --> 00:35:02,440
because it's in line it's in the

00:34:59,920 --> 00:35:06,640
manifest citing go back and change those

00:35:02,440 --> 00:35:08,200
as well which was a wake-up call for me

00:35:06,640 --> 00:35:10,090
I didn't realize I had that in one of

00:35:08,200 --> 00:35:12,760
the modules and you know stop using

00:35:10,090 --> 00:35:14,890
inline template it's better to always

00:35:12,760 --> 00:35:18,220
use a file because your syntax

00:35:14,890 --> 00:35:20,170
validation knows oh there's a dot e or

00:35:18,220 --> 00:35:22,360
me I'm going to parse that correctly

00:35:20,170 --> 00:35:24,730
whereas if it's just mixed in with your

00:35:22,360 --> 00:35:30,100
code then it's not getting the same

00:35:24,730 --> 00:35:37,780
syntax validation who here uses note

00:35:30,100 --> 00:35:40,060
inheritance yeah cut that out it's been

00:35:37,780 --> 00:35:42,520
a bad idea for years and now it's

00:35:40,060 --> 00:35:45,310
finally officially than that idea and

00:35:42,520 --> 00:35:48,790
it's no longer so Morgan so for those

00:35:45,310 --> 00:35:51,940
not familiar note inheritance I could

00:35:48,790 --> 00:35:55,170
have a notes just note comment and then

00:35:51,940 --> 00:35:58,540
I have another note that inherits that

00:35:55,170 --> 00:36:01,510
node so just like inherited classes I

00:35:58,540 --> 00:36:04,450
can do this this was really used and

00:36:01,510 --> 00:36:07,630
abuse especially early on with a bit and

00:36:04,450 --> 00:36:09,220
what it led to was this rat's nest of

00:36:07,630 --> 00:36:12,010
dependencies where you really couldn't

00:36:09,220 --> 00:36:16,150
tell what classes were being applied

00:36:12,010 --> 00:36:19,150
knows who here uses the roles and

00:36:16,150 --> 00:36:21,090
profiles type approach to their code yep

00:36:19,150 --> 00:36:24,360
and so

00:36:21,090 --> 00:36:27,300
if you're using this I highly recommend

00:36:24,360 --> 00:36:33,560
checking out Craig Dunn's rolls and

00:36:27,300 --> 00:36:36,450
profiles that will really help you out

00:36:33,560 --> 00:36:39,210
speaking of a note classification who

00:36:36,450 --> 00:36:45,030
here uses gay a sighting in effect so

00:36:39,210 --> 00:36:48,810
must alternate statically who uses an e

00:36:45,030 --> 00:36:50,220
NC such as a foreman or the old

00:36:48,810 --> 00:36:54,810
dashboard or they've written around

00:36:50,220 --> 00:36:57,480
coming folks are doing that how many

00:36:54,810 --> 00:36:59,970
folks are classifying data within hybrid

00:36:57,480 --> 00:37:03,300
using high rate include classified data

00:36:59,970 --> 00:37:06,690
yeah so few folks there that's really

00:37:03,300 --> 00:37:11,580
the way to go I'm a big advocate of when

00:37:06,690 --> 00:37:14,070
you create the system to tag it with

00:37:11,580 --> 00:37:18,390
certain bits of data such as a role and

00:37:14,070 --> 00:37:20,160
then when it comes into existence we

00:37:18,390 --> 00:37:23,730
can't based on that data use higher rate

00:37:20,160 --> 00:37:25,530
include to associate classes with it so

00:37:23,730 --> 00:37:29,640
whether you're doing physical systems

00:37:25,530 --> 00:37:32,430
and putting data on there or VMs you can

00:37:29,640 --> 00:37:35,370
inject that data and then when it comes

00:37:32,430 --> 00:37:37,860
up it's just in that role if you're

00:37:35,370 --> 00:37:39,990
using it enc or the old static based

00:37:37,860 --> 00:37:42,270
systems than what you're doing is you

00:37:39,990 --> 00:37:44,850
have to know the name of the node and in

00:37:42,270 --> 00:37:48,150
without in before it can really be

00:37:44,850 --> 00:37:49,680
useful and that's not really a scalable

00:37:48,150 --> 00:37:55,830
approach to know what all your systems

00:37:49,680 --> 00:37:59,400
are before you have them so a quick

00:37:55,830 --> 00:38:01,290
upgrade checklist you need to set up

00:37:59,400 --> 00:38:05,220
some sort of testing environment and

00:38:01,290 --> 00:38:08,820
just keep testing my approach is to go

00:38:05,220 --> 00:38:10,200
on a roll at a time our folks familiar

00:38:08,820 --> 00:38:14,070
with like the rules and profiles

00:38:10,200 --> 00:38:19,650
approach it so let me out I talk about

00:38:14,070 --> 00:38:23,400
that briefly so the roll is the every

00:38:19,650 --> 00:38:25,050
system has exactly one a roll and so

00:38:23,400 --> 00:38:28,050
that is that is how you would classify

00:38:25,050 --> 00:38:29,850
the system and sort of the business use

00:38:28,050 --> 00:38:32,040
case like this

00:38:29,850 --> 00:38:36,180
is a mail server this is a web service

00:38:32,040 --> 00:38:38,070
has been database server right your

00:38:36,180 --> 00:38:39,630
profile is that our collection of the

00:38:38,070 --> 00:38:43,650
classes that you know make that

00:38:39,630 --> 00:38:46,010
technology work so every system has

00:38:43,650 --> 00:38:49,350
exactly what role that's what it does

00:38:46,010 --> 00:38:51,480
and then I would advocate that you go

00:38:49,350 --> 00:38:56,880
one a role at a time when you're doing

00:38:51,480 --> 00:38:58,830
your upgrades and pick pick what's

00:38:56,880 --> 00:39:01,470
simple all right don't pick a role

00:38:58,830 --> 00:39:03,390
because well eighty percent of my

00:39:01,470 --> 00:39:07,800
systems are web server so let's put that

00:39:03,390 --> 00:39:11,640
over start with not what's the most

00:39:07,800 --> 00:39:13,200
important of what's are the most and in

00:39:11,640 --> 00:39:15,270
numbers let's start with the simplest

00:39:13,200 --> 00:39:17,100
role that you have right we want to

00:39:15,270 --> 00:39:19,430
start a simple and have small successes

00:39:17,100 --> 00:39:21,570
and build up so start with a simple role

00:39:19,430 --> 00:39:24,330
Stephens see what all the classes are

00:39:21,570 --> 00:39:26,520
that make up that role and then again

00:39:24,330 --> 00:39:28,080
start with the simplest modules and work

00:39:26,520 --> 00:39:30,030
your way through it and then you're

00:39:28,080 --> 00:39:32,250
going to get a whole roll transferred to

00:39:30,030 --> 00:39:34,620
the new puppet for and then go to the

00:39:32,250 --> 00:39:35,880
next role and so on and then hopefully

00:39:34,620 --> 00:39:37,590
by the time you get to the more

00:39:35,880 --> 00:39:40,620
complicated rules you've already

00:39:37,590 --> 00:39:44,190
reported most of their code so it

00:39:40,620 --> 00:39:45,750
becomes easier easier to make those you

00:39:44,190 --> 00:39:49,080
also don't want to probably use the most

00:39:45,750 --> 00:39:51,120
profile our high profile systems on your

00:39:49,080 --> 00:39:52,770
network till I go first right like

00:39:51,120 --> 00:39:59,820
that's not where you want to make your

00:39:52,770 --> 00:40:02,940
mistakes so I hope this helps you

00:39:59,820 --> 00:40:05,310
embrace the changes in puppet version 4

00:40:02,940 --> 00:40:10,170
without getting burned up by dragons and

00:40:05,310 --> 00:40:13,410
frustrations like I did thanks for

00:40:10,170 --> 00:40:16,110
having me open for questions against the

00:40:13,410 --> 00:40:23,280
extremes so if you just raise your hand

00:40:16,110 --> 00:40:26,610
and pass it my current sure someone has

00:40:23,280 --> 00:40:30,120
a question no everyone is ready to go

00:40:26,610 --> 00:40:32,370
rock out puppet v4 something that's

00:40:30,120 --> 00:40:36,450
really helped me is I use the vagrant

00:40:32,370 --> 00:40:38,250
and I personally got sent to us like

00:40:36,450 --> 00:40:39,810
southern system because that's what i

00:40:38,250 --> 00:40:42,540
like to use but

00:40:39,810 --> 00:40:44,790
I encourage you to get vagrant play with

00:40:42,540 --> 00:40:50,270
a public for their it's a really simple

00:40:44,790 --> 00:40:50,270
way to get going test your code locally

00:40:50,960 --> 00:41:00,660
Maria so just looking good for packaging

00:40:57,660 --> 00:41:04,550
Gordon looking for as mats that are not

00:41:00,660 --> 00:41:08,130
as you described Hollywood installer oh

00:41:04,550 --> 00:41:11,250
that's interesting that or we do that so

00:41:08,130 --> 00:41:16,440
I always recommended don't get your

00:41:11,250 --> 00:41:18,420
packages from the OS distribution get

00:41:16,440 --> 00:41:20,160
them straight from puppet labs so that's

00:41:18,420 --> 00:41:24,540
great that you pre cut up so puppet has

00:41:20,160 --> 00:41:28,080
young and act not puppet labs com that

00:41:24,540 --> 00:41:30,000
you can or sink so if you don't have web

00:41:28,080 --> 00:41:32,520
access you know from your networks you

00:41:30,000 --> 00:41:35,310
can pull that it like locally and then

00:41:32,520 --> 00:41:38,280
that has little packages this definitely

00:41:35,310 --> 00:41:39,780
use that one and not at night mr. sort

00:41:38,280 --> 00:41:42,780
of follow up with this committee or the

00:41:39,780 --> 00:41:44,880
quicker you about the am sorry I get

00:41:42,780 --> 00:41:47,460
your time yeah actually eat the mango

00:41:44,880 --> 00:41:57,420
you know what I need that support its

00:41:47,460 --> 00:41:59,700
Kiana's Young's bye-bye yeah the

00:41:57,420 --> 00:42:00,540
misleading electric feel like I profess

00:41:59,700 --> 00:42:03,120
i'm using a different configuration

00:42:00,540 --> 00:42:06,720
management system for a lot of things in

00:42:03,120 --> 00:42:09,420
store and unity even though it's still

00:42:06,720 --> 00:42:15,240
two packages two mechanisms or not it's

00:42:09,420 --> 00:42:24,660
not great yes yeah I think yeah

00:42:15,240 --> 00:42:30,600
gets it probably just ears can have our

00:42:24,660 --> 00:42:34,380
questions alright well thanks thanks for

00:42:30,600 --> 00:42:36,240
having me then again if anyone wants to

00:42:34,380 --> 00:42:40,650
chat afterwards I'll meet around and a

00:42:36,240 --> 00:42:43,230
quick plug for my conference is false

00:42:40,650 --> 00:42:45,120
icon and so pasa con happened last year

00:42:43,230 --> 00:42:46,860
in orlando it's going to be happening

00:42:45,120 --> 00:42:49,140
again november nineteenth through the

00:42:46,860 --> 00:42:52,170
21st so

00:42:49,140 --> 00:42:54,950
hope to see you there in Orlando no

00:42:52,170 --> 00:43:07,079
covers are great time to be down there

00:42:54,950 --> 00:43:34,400
thank you come by the booth say hi to

00:43:07,079 --> 00:43:34,400
cry out myself yes but is this necklace

00:43:39,620 --> 00:43:43,880
Citrix XenServer gives you everything

00:43:41,720 --> 00:43:46,880
you need to integrate manage and

00:43:43,880 --> 00:43:49,010
automate a virtual data center all on an

00:43:46,880 --> 00:43:51,410
enterprise-class cloud proven virtual

00:43:49,010 --> 00:43:54,140
platform and at a third of the cost of

00:43:51,410 --> 00:43:55,850
other solutions but why even bother with

00:43:54,140 --> 00:43:58,010
virtualizing your server infrastructure

00:43:55,850 --> 00:43:59,960
in the first place well let's say you

00:43:58,010 --> 00:44:02,240
have a traditional one server to one

00:43:59,960 --> 00:44:04,280
application architecture but you're

00:44:02,240 --> 00:44:06,830
running out of resources and performance

00:44:04,280 --> 00:44:09,160
is suffering once you order new server

00:44:06,830 --> 00:44:12,020
hardware you'll wait for delivery

00:44:09,160 --> 00:44:14,900
configure it install your business

00:44:12,020 --> 00:44:17,660
application stage and test the server

00:44:14,900 --> 00:44:19,850
and finally add it to your production

00:44:17,660 --> 00:44:22,040
farm if you've been through this process

00:44:19,850 --> 00:44:24,560
before you know it can take weeks or

00:44:22,040 --> 00:44:26,390
even months you also know it's a

00:44:24,560 --> 00:44:28,370
manually intensive process that will

00:44:26,390 --> 00:44:31,700
burden your team every time you outgrow

00:44:28,370 --> 00:44:33,470
your current setup with a virtual server

00:44:31,700 --> 00:44:36,260
solution you could accomplish all of

00:44:33,470 --> 00:44:38,810
that in less than half a day server

00:44:36,260 --> 00:44:40,640
virtualization software separates the OS

00:44:38,810 --> 00:44:43,040
and application from the underlying

00:44:40,640 --> 00:44:45,200
server hardware and with multiple

00:44:43,040 --> 00:44:46,910
virtual machines on a single server you

00:44:45,200 --> 00:44:49,880
can use each of them to run different

00:44:46,910 --> 00:44:51,650
os's and applications this makes it

00:44:49,880 --> 00:44:53,450
possible to move your virtual machines

00:44:51,650 --> 00:44:55,520
from one piece of hardware to another

00:44:53,450 --> 00:44:57,770
whenever you want to maximize

00:44:55,520 --> 00:44:59,750
utilization simplify maintenance or

00:44:57,770 --> 00:45:02,060
recover from a hardware failure and

00:44:59,750 --> 00:45:05,000
without slowing down your applications

00:45:02,060 --> 00:45:08,090
or users clearly server virtualization

00:45:05,000 --> 00:45:11,090
provides big benefits and Citrix

00:45:08,090 --> 00:45:13,310
XenServer provides even more since it's

00:45:11,090 --> 00:45:15,200
built on an open platform xenserver

00:45:13,310 --> 00:45:17,480
plays well with your existing hardware

00:45:15,200 --> 00:45:19,790
storage systems and IT management

00:45:17,480 --> 00:45:22,520
software as well as with the industry's

00:45:19,790 --> 00:45:24,560
leading cloud service providers best of

00:45:22,520 --> 00:45:26,240
all you can get started by downloading a

00:45:24,560 --> 00:45:29,510
fully functional production-ready

00:45:26,240 --> 00:45:31,700
version of xenserver for free after a

00:45:29,510 --> 00:45:33,830
10-minute installation process you'll

00:45:31,700 --> 00:45:35,870
see how easy it is to start virtualizing

00:45:33,830 --> 00:45:38,300
your workloads and automating your IT

00:45:35,870 --> 00:45:39,920
management processes and when you're

00:45:38,300 --> 00:45:41,840
ready for a richer set of management

00:45:39,920 --> 00:45:44,330
tools just upgrade to one of the premium

00:45:41,840 --> 00:45:46,160
editions of xenserver so whether you're

00:45:44,330 --> 00:45:48,110
interested in virtualizing servers for

00:45:46,160 --> 00:45:50,390
the first time expanding your server

00:45:48,110 --> 00:45:52,940
virtualization footprint or moving

00:45:50,390 --> 00:45:53,540
server workloads to the cloud download

00:45:52,940 --> 00:45:55,790
and install

00:45:53,540 --> 00:45:58,820
xenserver today and see how it can help

00:45:55,790 --> 00:46:04,180
you simplify your IT environment citrix

00:45:58,820 --> 00:46:04,180
xenserver do more don't spend more

00:48:02,910 --> 00:48:07,150
your customers rely on your website or

00:48:05,650 --> 00:48:09,520
application if it's slower

00:48:07,150 --> 00:48:12,430
non-responsive it infuriates your users

00:48:09,520 --> 00:48:14,260
and costs you money keeping your

00:48:12,430 --> 00:48:17,750
business critical systems humming along

00:48:14,260 --> 00:48:20,630
requires insight into what they're doing

00:48:17,750 --> 00:48:22,610
your system metrics tell stories stories

00:48:20,630 --> 00:48:24,860
that can reveal performance bottlenecks

00:48:22,610 --> 00:48:27,020
resource limitations and other problems

00:48:24,860 --> 00:48:28,940
but how do you keep an eye on all of

00:48:27,020 --> 00:48:31,550
your systems performance metrics in

00:48:28,940 --> 00:48:34,400
real-time and record this data for later

00:48:31,550 --> 00:48:36,380
analysis enter longview the new way to

00:48:34,400 --> 00:48:38,420
see what's really going on under the

00:48:36,380 --> 00:48:40,520
hood the longview dashboard lets you

00:48:38,420 --> 00:48:42,530
visualize the status of all your systems

00:48:40,520 --> 00:48:45,260
providing you with a bird's-eye view of

00:48:42,530 --> 00:48:48,380
your entire fleet you can sort by cpu

00:48:45,260 --> 00:48:50,840
memory swap processes load and network

00:48:48,380 --> 00:48:53,420
usage click a specific system to access

00:48:50,840 --> 00:48:55,400
its individual dashboard then click and

00:48:53,420 --> 00:48:58,400
drag to zoom in on chokepoints and get

00:48:55,400 --> 00:49:00,410
more detail comprehensive network data

00:48:58,400 --> 00:49:03,140
including inbound and outbound traffic

00:49:00,410 --> 00:49:05,090
is available on the network tab and disk

00:49:03,140 --> 00:49:07,250
rights and free space on the discs tab

00:49:05,090 --> 00:49:09,440
while the process Explorer displays

00:49:07,250 --> 00:49:11,990
usage statistics for individual

00:49:09,440 --> 00:49:14,150
processes the system info tab shows

00:49:11,990 --> 00:49:16,400
listening services active connections

00:49:14,150 --> 00:49:18,530
and available updates adding long view

00:49:16,400 --> 00:49:20,210
to a system is easy just click the

00:49:18,530 --> 00:49:22,370
button copy the one line installation

00:49:20,210 --> 00:49:24,800
command then run the command on your

00:49:22,370 --> 00:49:26,510
linux system to complete the process the

00:49:24,800 --> 00:49:28,700
agent will begin collecting data and

00:49:26,510 --> 00:49:32,210
sending it to longview then the graphs

00:49:28,700 --> 00:49:34,460
start rolling use long view to gain

00:49:32,210 --> 00:49:39,220
visibility into your servers so when

00:49:34,460 --> 00:49:39,220
your website or app heats up it stays up

00:50:15,569 --> 00:50:17,630

YouTube URL: https://www.youtube.com/watch?v=jSdYXeseT9k


