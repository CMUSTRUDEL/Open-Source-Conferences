Title: Joe Brockmeier -- All You Wanted to Know About Linux Containers
Publication date: 2017-01-25
Playlist: 2015 SouthEast LinuxFest
Description: 
	
Captions: 
	00:00:00,560 --> 00:00:12,509
ready all right introduction okay all

00:00:09,179 --> 00:00:17,789
right all right I don't know why you

00:00:12,509 --> 00:00:21,779
should care okay hey there welcome to

00:00:17,789 --> 00:00:27,150
self and might somebody turn this up and

00:00:21,779 --> 00:00:29,789
I'm echoing back at myself a moment okay

00:00:27,150 --> 00:00:31,859
that's a lot better my name is Joe

00:00:29,789 --> 00:00:33,390
brockmeier and thank you all for showing

00:00:31,859 --> 00:00:36,270
up for my talk I'm going to talk about

00:00:33,390 --> 00:00:39,000
Linux containers today I work for red

00:00:36,270 --> 00:00:43,020
hat which is not obvious on the slide

00:00:39,000 --> 00:00:45,960
except from my email address my Twitter

00:00:43,020 --> 00:00:48,719
user name is j ZB I like it when people

00:00:45,960 --> 00:00:51,750
ask questions and interact on Twitter

00:00:48,719 --> 00:00:53,579
and I know the self folks really like it

00:00:51,750 --> 00:00:55,770
when people interact on Twitter and make

00:00:53,579 --> 00:00:58,530
people aware of self and if I understand

00:00:55,770 --> 00:01:01,020
we're sort of competing with a leather

00:00:58,530 --> 00:01:05,540
festival or something for the same

00:01:01,020 --> 00:01:08,760
hashtag so our hashtag is hash self 2015

00:01:05,540 --> 00:01:10,650
so one thing I would like to incite or

00:01:08,760 --> 00:01:12,930
encourage the audience to do is thank

00:01:10,650 --> 00:01:15,270
one of the sponsors of self on Twitter

00:01:12,930 --> 00:01:18,420
or some other social network of your

00:01:15,270 --> 00:01:20,820
choice some of the sponsors today I will

00:01:18,420 --> 00:01:23,729
not remember them all but open at citrix

00:01:20,820 --> 00:01:49,880
red hat fedora believe a bun to is a

00:01:23,729 --> 00:01:53,729
sponsor Jeremy help me out okay I do

00:01:49,880 --> 00:01:56,310
thank you all right so please thank the

00:01:53,729 --> 00:02:01,290
sponsors and be very nice to the moon

00:01:56,310 --> 00:02:03,600
and volunteers all right so I work on a

00:02:01,290 --> 00:02:05,280
project currently called Project atomic

00:02:03,600 --> 00:02:07,590
I work in the open source and standards

00:02:05,280 --> 00:02:10,229
team and the goal of atomic is to run

00:02:07,590 --> 00:02:13,500
Linux containers more specifically right

00:02:10,229 --> 00:02:15,930
now docker containers uh very well

00:02:13,500 --> 00:02:18,720
do nothing else that's basically the job

00:02:15,930 --> 00:02:21,750
of those of the atomic host is to run

00:02:18,720 --> 00:02:24,870
Linux containers and get out of the way

00:02:21,750 --> 00:02:26,850
okay so what I want to talk about today

00:02:24,870 --> 00:02:28,800
I want to talk about what

00:02:26,850 --> 00:02:31,080
containerization is I want to talk about

00:02:28,800 --> 00:02:33,270
docker I want to talk about container

00:02:31,080 --> 00:02:35,370
history a little bit I want to talk

00:02:33,270 --> 00:02:37,260
about basics of docker this most this

00:02:35,370 --> 00:02:40,680
talk is going to be focused on on docker

00:02:37,260 --> 00:02:42,750
and I realize that I may have misled

00:02:40,680 --> 00:02:45,150
some folks with the title of the talk

00:02:42,750 --> 00:02:47,330
because there is a project called lxc

00:02:45,150 --> 00:02:50,760
which bills itself as Linux containers

00:02:47,330 --> 00:02:52,890
but that's just one flavor of container

00:02:50,760 --> 00:02:55,500
and obviously docker is currently sort

00:02:52,890 --> 00:02:56,850
of the most popular container so that's

00:02:55,500 --> 00:02:59,670
what I'm going to spend most of time

00:02:56,850 --> 00:03:01,320
talking about is actually docker how

00:02:59,670 --> 00:03:04,620
many folks are actually using containers

00:03:01,320 --> 00:03:07,590
of some form right now ok how many folks

00:03:04,620 --> 00:03:09,150
are using docker pretty much the same

00:03:07,590 --> 00:03:11,640
hands who are using non docker

00:03:09,150 --> 00:03:13,920
containers couple folks what do you use

00:03:11,640 --> 00:03:16,500
them Alex see who else raised a hand for

00:03:13,920 --> 00:03:19,860
that what do you use it Alex see anybody

00:03:16,500 --> 00:03:24,720
using something not a LXE anybody played

00:03:19,860 --> 00:03:27,150
with system DN spot couple folks 12 okay

00:03:24,720 --> 00:03:29,780
has anybody played with the Intel stuff

00:03:27,150 --> 00:03:33,049
that recently came out to clear OS stuff

00:03:29,780 --> 00:03:36,480
ok that's a kind of trying to meld

00:03:33,049 --> 00:03:37,950
virtualization and containers so anyway

00:03:36,480 --> 00:03:40,350
I'm also going to talk about deploying

00:03:37,950 --> 00:03:42,630
docker containers and then we will take

00:03:40,350 --> 00:03:44,280
questions I like when people ask

00:03:42,630 --> 00:03:47,820
questions feel free to raise a hand

00:03:44,280 --> 00:03:49,799
during the talk but if you come up to me

00:03:47,820 --> 00:03:52,380
after the talk with a question that is a

00:03:49,799 --> 00:03:54,810
broad interest i will mock you so don't

00:03:52,380 --> 00:03:57,060
make other people suffer go ahead don't

00:03:54,810 --> 00:04:00,540
be shy ask your questions so we can all

00:03:57,060 --> 00:04:03,380
benefit ok so what is containerization

00:04:00,540 --> 00:04:06,959
it is often described is lightweight

00:04:03,380 --> 00:04:10,049
virtualization it is an operating system

00:04:06,959 --> 00:04:11,850
method for isolating processes linux

00:04:10,049 --> 00:04:14,310
systems basically it lets you have a

00:04:11,850 --> 00:04:17,700
virtual environment for a process or an

00:04:14,310 --> 00:04:19,820
application so that it's isolated it has

00:04:17,700 --> 00:04:22,680
its application and dependencies and

00:04:19,820 --> 00:04:24,150
doesn't have a full copy of the

00:04:22,680 --> 00:04:27,360
operating system running so in other

00:04:24,150 --> 00:04:27,820
words using Linux containers especially

00:04:27,360 --> 00:04:30,760
things like

00:04:27,820 --> 00:04:32,680
docker i can run something that looks

00:04:30,760 --> 00:04:34,090
like a bun to on a fedora machine I can

00:04:32,680 --> 00:04:36,190
run something looks like the door on a

00:04:34,090 --> 00:04:40,090
bun to machine all that sort of stuff I

00:04:36,190 --> 00:04:41,770
can't run freebsd in a linux container

00:04:40,090 --> 00:04:43,810
on one of these systems i can't run

00:04:41,770 --> 00:04:45,370
windows under a container if you want to

00:04:43,810 --> 00:04:48,880
do that sort of thing you still need to

00:04:45,370 --> 00:04:51,100
run a full hypervisor that's going to

00:04:48,880 --> 00:04:54,310
provide virtualization for hardware the

00:04:51,100 --> 00:04:57,430
end everything ok anybody not clear on

00:04:54,310 --> 00:05:00,100
that distinction so the advantage for

00:04:57,430 --> 00:05:03,730
containers is basically that because you

00:05:00,100 --> 00:05:07,600
don't need all of the resources that you

00:05:03,730 --> 00:05:09,520
would need for virtualization it is much

00:05:07,600 --> 00:05:11,590
more lightweight you can get a lot more

00:05:09,520 --> 00:05:14,050
density on a host running docker

00:05:11,590 --> 00:05:16,420
containers than you can on a system

00:05:14,050 --> 00:05:22,930
running the same applications under kvm

00:05:16,420 --> 00:05:24,790
for example it's not as robust isolation

00:05:22,930 --> 00:05:27,370
as you would get with virtualization

00:05:24,790 --> 00:05:29,080
there's still some security concerns how

00:05:27,370 --> 00:05:32,760
many folks have read any a Dan Walsh's

00:05:29,080 --> 00:05:36,070
stuff about containers don't contain ok

00:05:32,760 --> 00:05:40,810
Dan Walsh otherwise known as mr. selinux

00:05:36,070 --> 00:05:43,090
we all know and love selinux right that

00:05:40,810 --> 00:05:46,750
was that was not a lot of enthusiasm for

00:05:43,090 --> 00:05:48,460
selinux there dan has spent a lot of

00:05:46,750 --> 00:05:50,140
time working on docker and sending

00:05:48,460 --> 00:05:51,810
patches upstream and working with the

00:05:50,140 --> 00:05:55,680
docker community trying to make

00:05:51,810 --> 00:05:58,510
containers a lot more a lot more secure

00:05:55,680 --> 00:06:00,850
and I'm going to talk a little bit more

00:05:58,510 --> 00:06:02,710
about docker security and also just the

00:06:00,850 --> 00:06:04,510
concept of for the love of God don't

00:06:02,710 --> 00:06:07,860
just download something from docker hub

00:06:04,510 --> 00:06:09,520
that you don't know where it came from

00:06:07,860 --> 00:06:12,130
unfortunately I think that they've

00:06:09,520 --> 00:06:13,630
really encouraged this behavior of I'm

00:06:12,130 --> 00:06:15,910
just going to do a docker pull somebody

00:06:13,630 --> 00:06:17,560
has packaged this application and I've

00:06:15,910 --> 00:06:19,300
never heard of this person and I have no

00:06:17,560 --> 00:06:20,530
way of verifying this images from them

00:06:19,300 --> 00:06:22,150
but I'm going to go ahead and put it on

00:06:20,530 --> 00:06:26,260
my machine and run it and then be

00:06:22,150 --> 00:06:28,450
shocked when it routes me so if you

00:06:26,260 --> 00:06:30,160
wouldn't install an RPM or a Debian

00:06:28,450 --> 00:06:32,350
package and give it root access to your

00:06:30,160 --> 00:06:34,330
system without knowing where that came

00:06:32,350 --> 00:06:35,770
from don't do it with a docker container

00:06:34,330 --> 00:06:38,830
don't do it with an Alex sea container

00:06:35,770 --> 00:06:41,130
anything else so anybody not familiar

00:06:38,830 --> 00:06:41,130
with docker

00:06:41,350 --> 00:06:46,010
good all right so I don't have to spend

00:06:43,700 --> 00:06:47,480
a lot of time explaining that it is

00:06:46,010 --> 00:06:51,710
buzzword compliant which is the

00:06:47,480 --> 00:06:53,930
important thing right so why docker it

00:06:51,710 --> 00:06:56,720
is the closest thing we have to write

00:06:53,930 --> 00:06:58,880
once run anywhere currently it's one of

00:06:56,720 --> 00:07:02,720
the easiest ways to deploy applications

00:06:58,880 --> 00:07:04,460
and have the you know environment where

00:07:02,720 --> 00:07:05,990
it's deployed look like the environment

00:07:04,460 --> 00:07:08,570
where it was developed and get rid of

00:07:05,990 --> 00:07:12,740
the it worked on my machine it worked in

00:07:08,570 --> 00:07:14,720
test you know packaging you don't have

00:07:12,740 --> 00:07:16,610
to package things one of the things I'm

00:07:14,720 --> 00:07:18,650
going to talk tomorrow about the future

00:07:16,610 --> 00:07:21,590
of software deployment and I'm going to

00:07:18,650 --> 00:07:24,620
talk about packaging like rpms and

00:07:21,590 --> 00:07:27,110
things like that and you know people who

00:07:24,620 --> 00:07:28,760
are writing Java Java applications don't

00:07:27,110 --> 00:07:31,729
really like trying to tame them into

00:07:28,760 --> 00:07:34,160
rpms for if you want to deploy something

00:07:31,729 --> 00:07:37,160
in a container you don't have to you

00:07:34,160 --> 00:07:40,010
don't have to package rubygems as it can

00:07:37,160 --> 00:07:41,780
as a as an RPM or a Debian package you

00:07:40,010 --> 00:07:43,160
can simply put all those things into

00:07:41,780 --> 00:07:46,520
your container and ship the entire

00:07:43,160 --> 00:07:49,450
container uh it's much faster as less

00:07:46,520 --> 00:07:49,450
overhead yes sir

00:08:03,920 --> 00:08:08,850
that depends on your environment right

00:08:07,410 --> 00:08:10,740
and where you're getting it from it

00:08:08,850 --> 00:08:13,770
depends a lot on the vendor and where

00:08:10,740 --> 00:08:16,890
your stuff is coming from all right

00:08:13,770 --> 00:08:19,290
sorry yes this is one of the fun things

00:08:16,890 --> 00:08:21,450
of videotaping the talk for everybody

00:08:19,290 --> 00:08:24,000
remotely as it slows down the actual

00:08:21,450 --> 00:08:26,360
interaction with the audience for those

00:08:24,000 --> 00:08:29,100
at home basically the question was

00:08:26,360 --> 00:08:30,900
talked about patching and how do you

00:08:29,100 --> 00:08:33,240
recommend dealing with patching in a

00:08:30,900 --> 00:08:35,340
container and unfortunately the short

00:08:33,240 --> 00:08:38,039
answer is I don't have a good short

00:08:35,340 --> 00:08:39,390
answer for you right now it really

00:08:38,039 --> 00:08:40,770
depends on the vendor where you're

00:08:39,390 --> 00:08:43,530
getting your application whether it's

00:08:40,770 --> 00:08:45,000
homegrown things like that red hat is

00:08:43,530 --> 00:08:48,060
working really hard to try to come up

00:08:45,000 --> 00:08:52,230
with coherent ways to ship updated

00:08:48,060 --> 00:08:54,510
containers my I guess the the most basic

00:08:52,230 --> 00:08:55,920
answer would be I wouldn't patch a

00:08:54,510 --> 00:08:57,720
running container i would have your

00:08:55,920 --> 00:09:00,030
application written in such a way where

00:08:57,720 --> 00:09:02,430
you basically move the workload over to

00:09:00,030 --> 00:09:04,380
new containers with the new you know you

00:09:02,430 --> 00:09:05,940
basically take those containers down and

00:09:04,380 --> 00:09:07,860
spin up new containers that have the

00:09:05,940 --> 00:09:10,410
patch version and you build that in

00:09:07,860 --> 00:09:12,120
whatever way you deal with but we're

00:09:10,410 --> 00:09:13,890
also working on ways to do container

00:09:12,120 --> 00:09:16,050
introspection so that you know for

00:09:13,890 --> 00:09:17,480
example you have containers running in

00:09:16,050 --> 00:09:19,440
production what's in those containers

00:09:17,480 --> 00:09:21,450
whether or not they're vulnerable to

00:09:19,440 --> 00:09:24,390
something like heartbleed or whatever

00:09:21,450 --> 00:09:26,790
the heck is going around is that kind of

00:09:24,390 --> 00:09:28,950
answer your question for the record for

00:09:26,790 --> 00:09:32,040
those playing at home he nodded yes so

00:09:28,950 --> 00:09:33,690
all right thank you another nice thing

00:09:32,040 --> 00:09:35,550
about containers is that they're layered

00:09:33,690 --> 00:09:37,410
and what I mean by this you get to build

00:09:35,550 --> 00:09:40,740
on other people's work last year went to

00:09:37,410 --> 00:09:42,330
flock in Prague and we had some folks

00:09:40,740 --> 00:09:43,980
from yahoo and they they were using

00:09:42,330 --> 00:09:46,920
containers in production they had one

00:09:43,980 --> 00:09:48,840
team that did the base container then

00:09:46,920 --> 00:09:51,420
they had another team that did a

00:09:48,840 --> 00:09:53,640
customized build of apache and layered

00:09:51,420 --> 00:09:55,710
that on the container that the other

00:09:53,640 --> 00:09:57,600
team was maintaining so one team is just

00:09:55,710 --> 00:10:00,150
worrying about what's you know sort of

00:09:57,600 --> 00:10:02,190
the base OS and libraries then somebody

00:10:00,150 --> 00:10:04,710
else comes along and a layer apache on

00:10:02,190 --> 00:10:08,040
top of that and whatever you know magic

00:10:04,710 --> 00:10:09,870
dust uh yahoo applies when they compile

00:10:08,040 --> 00:10:12,330
and patch apache for their environment

00:10:09,870 --> 00:10:13,800
and then that goes on to people who are

00:10:12,330 --> 00:10:16,019
writing applications that

00:10:13,800 --> 00:10:19,350
on those so they get to layer on top of

00:10:16,019 --> 00:10:21,810
that and all of the teams at Yahoo that

00:10:19,350 --> 00:10:24,959
depend on the base container and the

00:10:21,810 --> 00:10:26,610
Apache container or Apache layer they

00:10:24,959 --> 00:10:29,190
don't have to worry about those parts so

00:10:26,610 --> 00:10:31,829
one team can focus on that and then say

00:10:29,190 --> 00:10:36,060
20 teams downstream of them can leverage

00:10:31,829 --> 00:10:38,220
on top of that it's modular and it makes

00:10:36,060 --> 00:10:40,550
dealing with legacy much much easier and

00:10:38,220 --> 00:10:43,350
what I mean by that is that for example

00:10:40,550 --> 00:10:45,420
right now we have a lot of customers Red

00:10:43,350 --> 00:10:47,640
Hat has a lot of customers and cintas

00:10:45,420 --> 00:10:50,940
has a lot of users that are going from

00:10:47,640 --> 00:10:52,589
you know six to seven and you can do a

00:10:50,940 --> 00:10:54,149
couple of things if you need stuff

00:10:52,589 --> 00:10:56,190
that's in seven but you don't want to

00:10:54,149 --> 00:10:59,700
touch the running up the running systems

00:10:56,190 --> 00:11:02,070
you can run docker on rel 6 or centos 6

00:10:59,700 --> 00:11:04,050
and then run something on top of that or

00:11:02,070 --> 00:11:06,420
vice versa you can package up your

00:11:04,050 --> 00:11:09,660
application in a container based on

00:11:06,420 --> 00:11:12,959
centos 6 or l 6 and then run that on top

00:11:09,660 --> 00:11:14,850
of seven so that makes deploying legacy

00:11:12,959 --> 00:11:17,010
applications if they are favorable to a

00:11:14,850 --> 00:11:19,800
containerized environment makes it much

00:11:17,010 --> 00:11:43,290
easier to put out into production you

00:11:19,800 --> 00:11:47,160
had a question sir sure so the question

00:11:43,290 --> 00:11:50,250
was basically so I did mention you can

00:11:47,160 --> 00:11:53,100
use layered images and I've also

00:11:50,250 --> 00:11:57,060
recommended against just grabbing random

00:11:53,100 --> 00:11:59,190
images so is it foolish to use something

00:11:57,060 --> 00:12:01,890
like the cintas base image that's that's

00:11:59,190 --> 00:12:03,660
a good question no because you can go to

00:12:01,890 --> 00:12:05,579
fedora you can go to send toss you don't

00:12:03,660 --> 00:12:07,800
actually have to go to docker hub you

00:12:05,579 --> 00:12:10,170
can grab the tarp sign tar balls from

00:12:07,800 --> 00:12:11,910
the projects and grab those so that you

00:12:10,170 --> 00:12:14,550
know it came directly from then so if

00:12:11,910 --> 00:12:16,620
you trust sent us or fedora and I would

00:12:14,550 --> 00:12:18,899
imagine but don't quote me on this I

00:12:16,620 --> 00:12:21,269
would imagine debian and ubuntu and

00:12:18,899 --> 00:12:23,010
other projects do similar things you can

00:12:21,269 --> 00:12:25,829
go to docker hub and they have what they

00:12:23,010 --> 00:12:27,450
call verified projects but currently if

00:12:25,829 --> 00:12:30,990
i'm not mistaken they don't

00:12:27,450 --> 00:12:32,820
signing and things in place yet but

00:12:30,990 --> 00:12:36,420
eventually signing is going to be part

00:12:32,820 --> 00:12:38,370
of that chain so yes I wouldn't just run

00:12:36,420 --> 00:12:41,820
any random thing so somebody has

00:12:38,370 --> 00:12:43,260
packaged up some openssl thing and

00:12:41,820 --> 00:12:45,990
they're not from a trusted vendor I

00:12:43,260 --> 00:12:48,630
wouldn't use that but if you know there

00:12:45,990 --> 00:12:51,030
are certainly ways today to go and get a

00:12:48,630 --> 00:12:52,740
verified rel image or Fodor amager or

00:12:51,030 --> 00:12:56,730
other things so that's a good question

00:12:52,740 --> 00:12:59,340
thank you so container container history

00:12:56,730 --> 00:13:01,500
this is not new stuff even though docker

00:12:59,340 --> 00:13:03,450
kind of hit the scene two years ago and

00:13:01,500 --> 00:13:05,930
everybody is like Linux containers

00:13:03,450 --> 00:13:08,180
that's amazing we want to do this

00:13:05,930 --> 00:13:09,960
actually the concepts behind

00:13:08,180 --> 00:13:13,920
containerization have been around for a

00:13:09,960 --> 00:13:16,920
long time you know the chroot stuff goes

00:13:13,920 --> 00:13:20,610
back to nineteen eighty-two freebsd

00:13:16,920 --> 00:13:22,620
jails became a thing and I think 1998

00:13:20,610 --> 00:13:25,080
this is by the way based on about 20

00:13:22,620 --> 00:13:27,600
minutes of research on Wikipedia and

00:13:25,080 --> 00:13:31,050
elsewhere so if I have a date off by

00:13:27,600 --> 00:13:34,170
like a year I'm sorry linux beat server

00:13:31,050 --> 00:13:37,740
does anybody remember that one that was

00:13:34,170 --> 00:13:41,070
a thing in 2001 i actually used to work

00:13:37,740 --> 00:13:43,860
with openvz / virtuozzo in a hosting

00:13:41,070 --> 00:13:47,670
environment 2004-2005 it was great stuff

00:13:43,860 --> 00:13:49,200
but it was not as simple or as elegant

00:13:47,670 --> 00:13:52,170
is what they've come up with with docker

00:13:49,200 --> 00:13:56,760
same concept but it wasn't as easy to

00:13:52,170 --> 00:13:58,290
use or to work with lxc kind of came on

00:13:56,760 --> 00:14:00,720
a scene around two thousand eight and

00:13:58,290 --> 00:14:03,720
that's what dr. built on initially

00:14:00,720 --> 00:14:05,730
docker is only two years old which is

00:14:03,720 --> 00:14:08,310
you know kind of amazing to consider the

00:14:05,730 --> 00:14:11,550
impact that's had but that's open source

00:14:08,310 --> 00:14:14,610
for you right you can go from basically

00:14:11,550 --> 00:14:17,220
a concept that people haven't really

00:14:14,610 --> 00:14:18,960
worked with to something the entire

00:14:17,220 --> 00:14:22,080
industry is talking about in two years

00:14:18,960 --> 00:14:24,630
so right now I want to go through some

00:14:22,080 --> 00:14:25,950
docker basics so for anybody here here

00:14:24,630 --> 00:14:27,990
who's been doing a lot of work with

00:14:25,950 --> 00:14:30,540
docker this is going to be very kind of

00:14:27,990 --> 00:14:32,880
you know old news to you and I apologize

00:14:30,540 --> 00:14:34,290
for that for those of you who haven't

00:14:32,880 --> 00:14:36,150
worked with docker I hope that you'll

00:14:34,290 --> 00:14:38,790
walk out of the room with some

00:14:36,150 --> 00:14:40,020
operational knowledge of docker and go

00:14:38,790 --> 00:14:41,260
home and play with it because it's

00:14:40,020 --> 00:14:43,060
really

00:14:41,260 --> 00:14:45,730
if you just read about it and you

00:14:43,060 --> 00:14:47,680
haven't touched it yet it's going to

00:14:45,730 --> 00:14:52,120
seem a lot more complicated than it

00:14:47,680 --> 00:14:54,640
really is okay so pulling an image you

00:14:52,120 --> 00:14:57,490
can automatically pull any image from

00:14:54,640 --> 00:14:59,800
the docker hub again no verification use

00:14:57,490 --> 00:15:01,990
at your own risk you also have to

00:14:59,800 --> 00:15:05,020
specify a version and you see up here on

00:15:01,990 --> 00:15:06,730
the slides it's a little might be a

00:15:05,020 --> 00:15:09,340
little hard to see but there's a colon

00:15:06,730 --> 00:15:12,760
between like sent us and sent 07 and

00:15:09,340 --> 00:15:16,840
fedora and 21 unfortunately there is not

00:15:12,760 --> 00:15:20,440
a universal versioning that is you know

00:15:16,840 --> 00:15:22,990
across all images so Fedora does fedora

00:15:20,440 --> 00:15:25,420
and then 21 or latest or whatever

00:15:22,990 --> 00:15:27,880
whereas cintas besides to do cintas

00:15:25,420 --> 00:15:30,730
seven or I don't know what the

00:15:27,880 --> 00:15:33,850
convention is force a busy box or or a

00:15:30,730 --> 00:15:35,650
bun to but you want to be specific

00:15:33,850 --> 00:15:37,870
unless you want to download all of the

00:15:35,650 --> 00:15:40,360
images because you if you just leave off

00:15:37,870 --> 00:15:42,580
the trailing bit there docker will

00:15:40,360 --> 00:15:47,470
happily just grab all of those images so

00:15:42,580 --> 00:15:49,720
you have them available okay once the

00:15:47,470 --> 00:15:52,960
image is on the system it's very easy to

00:15:49,720 --> 00:15:55,870
run basically you can run multiple

00:15:52,960 --> 00:15:58,210
images simultaneous simultaneously you

00:15:55,870 --> 00:16:01,690
can run multiple versions you can run

00:15:58,210 --> 00:16:04,240
the same image 20 times we're doing this

00:16:01,690 --> 00:16:06,430
off of a central laptop all the speakers

00:16:04,240 --> 00:16:08,440
get the same laptop so i can't i had a

00:16:06,430 --> 00:16:10,870
demo when i first did this talk and a

00:16:08,440 --> 00:16:14,260
badge egon where I spun up like 20

00:16:10,870 --> 00:16:16,360
Fedora 21 instances running Apache so

00:16:14,260 --> 00:16:21,670
you can see them all spawn in about a

00:16:16,360 --> 00:16:25,870
minute and start running but docker run

00:16:21,670 --> 00:16:28,210
TI you get a interactive version most

00:16:25,870 --> 00:16:29,440
docker images are meant to be spun up in

00:16:28,210 --> 00:16:31,720
such a way where they run an application

00:16:29,440 --> 00:16:33,490
and you don't get a shell to them they

00:16:31,720 --> 00:16:35,650
just start up apache or they just start

00:16:33,490 --> 00:16:37,870
up my sequel or whatever the heck it is

00:16:35,650 --> 00:16:39,940
they're running but you can also spin up

00:16:37,870 --> 00:16:42,100
an interactive version and I'll talk

00:16:39,940 --> 00:16:44,950
about that a little bit that you can use

00:16:42,100 --> 00:16:47,650
to create new layers on the image and

00:16:44,950 --> 00:16:50,050
then ship later and then you can also

00:16:47,650 --> 00:16:52,960
once an image has been started docker

00:16:50,050 --> 00:16:54,700
will give it a name just like two random

00:16:52,960 --> 00:16:58,060
phrases stuck together

00:16:54,700 --> 00:17:00,390
with a underscore so for example if I

00:16:58,060 --> 00:17:03,730
kick off a version of fedora and I don't

00:17:00,390 --> 00:17:06,790
specify a name for it the one when I was

00:17:03,730 --> 00:17:08,199
doing the slide was pensive Stallman and

00:17:06,790 --> 00:17:12,730
you know so it might come up with

00:17:08,199 --> 00:17:15,400
something like unhappy you know Raymond

00:17:12,730 --> 00:17:31,410
or something any questions on that yeah

00:17:15,400 --> 00:17:34,120
we in the back for for for those at home

00:17:31,410 --> 00:17:35,920
those in the home game the comment of

00:17:34,120 --> 00:17:40,830
the back was that they blacklist the

00:17:35,920 --> 00:17:43,360
phrase boring Wozniak with the with the

00:17:40,830 --> 00:17:45,670
justification that steve wozniak is not

00:17:43,360 --> 00:17:47,560
boring which I would agree with he's not

00:17:45,670 --> 00:17:49,090
I've never met the guy but I hear he's

00:17:47,560 --> 00:17:53,200
he's entertaining i would have a beer

00:17:49,090 --> 00:17:54,580
with him depending on the quality of the

00:17:53,200 --> 00:17:58,360
beer there aren't many people i wouldn't

00:17:54,580 --> 00:17:59,920
have a beer with though so so containers

00:17:58,360 --> 00:18:01,930
versus images this is something that

00:17:59,920 --> 00:18:03,100
stumps a lot of people early on is

00:18:01,930 --> 00:18:05,860
what's the difference between a

00:18:03,100 --> 00:18:12,100
container and an image is this clear to

00:18:05,860 --> 00:18:13,890
most folks in the room so a an image is

00:18:12,100 --> 00:18:18,190
a file system and everything at rest

00:18:13,890 --> 00:18:20,770
it's basically like an iso before it's

00:18:18,190 --> 00:18:23,110
installed on a system an image is the

00:18:20,770 --> 00:18:25,720
software at rest a container is the

00:18:23,110 --> 00:18:27,640
running instance with all of its file

00:18:25,720 --> 00:18:31,000
system namespace and networking

00:18:27,640 --> 00:18:32,800
information and all that the interesting

00:18:31,000 --> 00:18:35,140
thing is it remains a container once it

00:18:32,800 --> 00:18:36,700
stopped does that make sense so

00:18:35,140 --> 00:18:38,770
basically it's an image until you

00:18:36,700 --> 00:18:41,380
actually spin it up and put it into use

00:18:38,770 --> 00:18:43,660
it is a container after it has been spun

00:18:41,380 --> 00:18:48,220
up and given a name and all the

00:18:43,660 --> 00:18:49,480
resources that make sense okay image

00:18:48,220 --> 00:18:51,400
history one of the nice things about

00:18:49,480 --> 00:18:53,650
docker is you can actually see the

00:18:51,400 --> 00:18:56,200
history of the image so that when you

00:18:53,650 --> 00:18:58,000
download something depending on how

00:18:56,200 --> 00:18:59,920
they've generated that image you should

00:18:58,000 --> 00:19:02,620
be able to maybe look at the history of

00:18:59,920 --> 00:19:05,440
how those layers were added on and what

00:19:02,620 --> 00:19:08,440
was done to that image so you can see uh

00:19:05,440 --> 00:19:10,300
commits to the image uh it

00:19:08,440 --> 00:19:11,800
won't show you the container history so

00:19:10,300 --> 00:19:13,330
you can't go and look at the history of

00:19:11,800 --> 00:19:15,610
a container once it's been started up

00:19:13,330 --> 00:19:18,730
but you should see the history of an

00:19:15,610 --> 00:19:21,220
image and you can also inspect the image

00:19:18,730 --> 00:19:25,360
and look at low level information about

00:19:21,220 --> 00:19:27,070
it you can also build images yourself

00:19:25,360 --> 00:19:28,420
and it's actually pretty easy there are

00:19:27,070 --> 00:19:30,610
a couple of ways you can do this you can

00:19:28,420 --> 00:19:32,740
do it interactively in other words you

00:19:30,610 --> 00:19:34,510
can have a base image you can spin it up

00:19:32,740 --> 00:19:36,640
you can make changes you can save and

00:19:34,510 --> 00:19:39,040
commit those changes and you can work

00:19:36,640 --> 00:19:40,600
with it that way or you can specify the

00:19:39,040 --> 00:19:42,850
stuff that you want to do to the image

00:19:40,600 --> 00:19:45,160
in a docker file and have it be a

00:19:42,850 --> 00:19:48,730
repeatable process that anybody can use

00:19:45,160 --> 00:19:51,970
to build that image so the assumption is

00:19:48,730 --> 00:19:54,190
as we were talking about earlier using a

00:19:51,970 --> 00:19:57,370
base image like cintas fedora whatever

00:19:54,190 --> 00:20:00,370
from scratch and you want to automate as

00:19:57,370 --> 00:20:03,310
much as possible so interactively you

00:20:00,370 --> 00:20:07,180
start with the base image run docker run

00:20:03,310 --> 00:20:10,660
ti etc do whatever stuff that you want

00:20:07,180 --> 00:20:13,240
for example if I wanted to do a centos

00:20:10,660 --> 00:20:15,730
image I might spin up that image log

00:20:13,240 --> 00:20:17,830
into it and do an update so that I have

00:20:15,730 --> 00:20:19,900
the latest software so maybe the the

00:20:17,830 --> 00:20:22,420
image on docker hub or wherever you get

00:20:19,900 --> 00:20:25,450
it from hasn't applied the most recent

00:20:22,420 --> 00:20:29,050
updates so you can do an update and then

00:20:25,450 --> 00:20:31,360
go ahead and commit it and then you have

00:20:29,050 --> 00:20:34,240
an image with the latest updates to put

00:20:31,360 --> 00:20:36,700
out in production and you can rinse and

00:20:34,240 --> 00:20:40,900
repeat that as necessary is that any

00:20:36,700 --> 00:20:44,260
questions on that ok you can save or

00:20:40,900 --> 00:20:46,660
export the image there are two different

00:20:44,260 --> 00:20:49,240
things export flattens the image into a

00:20:46,660 --> 00:20:52,900
tarball and it doesn't provide the

00:20:49,240 --> 00:20:54,760
history saving will export the image to

00:20:52,900 --> 00:20:56,860
a tarball but you will keep the history

00:20:54,760 --> 00:20:58,720
so if you want to preserve the history

00:20:56,860 --> 00:21:04,990
for other people to see one of you save

00:20:58,720 --> 00:21:07,090
rather than export obviously if you can

00:21:04,990 --> 00:21:10,330
export you want to also be able to load

00:21:07,090 --> 00:21:12,100
the image so there's the load or import

00:21:10,330 --> 00:21:15,100
commands docker load will take your

00:21:12,100 --> 00:21:19,600
tarball restore all of the images and

00:21:15,100 --> 00:21:22,390
tags where is dr. import will give you a

00:21:19,600 --> 00:21:34,330
new and untagged image that make sense

00:21:22,390 --> 00:21:41,530
all clear yes sir I'm sorry could you

00:21:34,330 --> 00:21:51,730
say again no it just it's one tarball I

00:21:41,530 --> 00:21:53,200
believe yeah so you can also export

00:21:51,730 --> 00:21:56,020
these to a registry so you're not

00:21:53,200 --> 00:21:57,790
pushing around to our balls you can use

00:21:56,020 --> 00:22:01,780
the docker hub or you can use a local

00:21:57,790 --> 00:22:04,090
registry my understanding from talking

00:22:01,780 --> 00:22:07,330
to people who are working with customers

00:22:04,090 --> 00:22:09,460
at Red Hat and people who are talking to

00:22:07,330 --> 00:22:12,040
more folks who are using like CentOS and

00:22:09,460 --> 00:22:14,350
whatever with containers is that very

00:22:12,040 --> 00:22:16,540
few businesses are using docker hub to

00:22:14,350 --> 00:22:18,610
get their containers most most

00:22:16,540 --> 00:22:20,980
businesses are using most organizations

00:22:18,610 --> 00:22:24,160
are using a local registry which is

00:22:20,980 --> 00:22:25,690
fairly trivial to stand up if you have

00:22:24,160 --> 00:22:27,310
an environment in which you are running

00:22:25,690 --> 00:22:30,670
many docker containers it's fairly

00:22:27,310 --> 00:22:34,660
trivial to stand up a registry of your

00:22:30,670 --> 00:22:36,970
own so like get you just use push and

00:22:34,660 --> 00:22:42,460
pull to move content to the rip to the

00:22:36,970 --> 00:22:45,250
repo I should have revised this but this

00:22:42,460 --> 00:22:47,620
was originally given at Apache Khan and

00:22:45,250 --> 00:22:50,110
I was raising the discussion whether

00:22:47,620 --> 00:22:53,770
Apache should have its own registry for

00:22:50,110 --> 00:22:55,570
Apache applications anybody think Apache

00:22:53,770 --> 00:22:59,680
should have its own registry they may

00:22:55,570 --> 00:23:00,940
care okay so I also want to note

00:22:59,680 --> 00:23:03,060
something how many people have heard

00:23:00,940 --> 00:23:07,390
about patches that redhead is added to

00:23:03,060 --> 00:23:10,600
to docker that differ from upstream one

00:23:07,390 --> 00:23:11,980
person really okay it made a couple of

00:23:10,600 --> 00:23:14,170
folks that knock her a little bit cranky

00:23:11,980 --> 00:23:17,830
because it changes the behavior slightly

00:23:14,170 --> 00:23:19,810
so the behavior for red hat and fedora

00:23:17,830 --> 00:23:21,220
and centos soccer is slightly different

00:23:19,810 --> 00:23:24,880
than the behavior you would get from

00:23:21,220 --> 00:23:26,740
upstream and here's why we have tried to

00:23:24,880 --> 00:23:28,510
ship vanilla docker as much as possible

00:23:26,740 --> 00:23:31,030
we have tried to get these things

00:23:28,510 --> 00:23:32,500
upstream but there is some disagreement

00:23:31,030 --> 00:23:34,240
in how these things should be

00:23:32,500 --> 00:23:36,250
implemented or how they should look and

00:23:34,240 --> 00:23:38,260
we were not able to get the

00:23:36,250 --> 00:23:41,200
matches upstream in time for shipping

00:23:38,260 --> 00:23:43,390
with rel so basically we have added a

00:23:41,200 --> 00:23:45,490
couple of things number one we point to

00:23:43,390 --> 00:23:47,620
the official rel registry for people to

00:23:45,490 --> 00:23:50,950
get things we want people to be able to

00:23:47,620 --> 00:23:53,920
who on the Red Hat side people who have

00:23:50,950 --> 00:23:57,190
rel subscriptions to be able to get rel

00:23:53,920 --> 00:23:59,560
and we don't put rel up on the docker

00:23:57,190 --> 00:24:01,960
hub so we point them to our registry and

00:23:59,560 --> 00:24:06,610
there's the added benefit that they know

00:24:01,960 --> 00:24:09,060
the provenance of those images ok docker

00:24:06,610 --> 00:24:11,380
search we list the fully qualified name

00:24:09,060 --> 00:24:13,630
that comes with those images and what I

00:24:11,380 --> 00:24:16,780
mean by that when you do a docker pull

00:24:13,630 --> 00:24:18,190
fedora the default behavior of docker is

00:24:16,780 --> 00:24:20,100
I'm going to look at the docker hub and

00:24:18,190 --> 00:24:23,680
I'm going to grab an image name fedora

00:24:20,100 --> 00:24:27,280
okay it doesn't show you the actual URL

00:24:23,680 --> 00:24:29,580
of the registry and we want to make sure

00:24:27,280 --> 00:24:32,080
that people know it's a little more

00:24:29,580 --> 00:24:34,300
complex but we want to make sure that in

00:24:32,080 --> 00:24:35,500
the enterprise people know what registry

00:24:34,300 --> 00:24:49,900
they're bouncing off of yet another

00:24:35,500 --> 00:24:52,900
question sir yes it is configurable and

00:24:49,900 --> 00:24:54,430
so the question for those at home do we

00:24:52,900 --> 00:24:55,960
provide a way to configure the default

00:24:54,430 --> 00:24:59,230
registry and the answer to that is yes

00:24:55,960 --> 00:25:02,320
it is configurable we want it to be we

00:24:59,230 --> 00:25:04,090
want you know if you want to point to

00:25:02,320 --> 00:25:05,470
the duct to the docker hub then you

00:25:04,090 --> 00:25:07,630
should be able to do that if you want to

00:25:05,470 --> 00:25:10,810
point to your private registry first you

00:25:07,630 --> 00:25:13,510
should be able to do that we also have

00:25:10,810 --> 00:25:16,390
the ability to block registries so so

00:25:13,510 --> 00:25:19,150
for example if you're in the DoD and you

00:25:16,390 --> 00:25:20,590
are deploying docker containers I'm

00:25:19,150 --> 00:25:22,240
pretty sure they don't want you to

00:25:20,590 --> 00:25:24,640
download anything from docker hub they

00:25:22,240 --> 00:25:26,650
want stuff that they have looked over

00:25:24,640 --> 00:25:28,990
every piece of every bit before it's

00:25:26,650 --> 00:25:32,110
deployed anywhere so they can block all

00:25:28,990 --> 00:25:35,740
registries except they're officially

00:25:32,110 --> 00:25:38,290
approved ones so also nice little

00:25:35,740 --> 00:25:41,050
feature we warned on push we don't not

00:25:38,290 --> 00:25:42,370
let you do it but we warn you when

00:25:41,050 --> 00:25:44,620
you're going to push to a public

00:25:42,370 --> 00:25:47,470
registry because there is a very nice

00:25:44,620 --> 00:25:49,480
chance that somebody could put you know

00:25:47,470 --> 00:25:51,850
confident confidential info

00:25:49,480 --> 00:25:53,710
in a container and accidentally pull it

00:25:51,850 --> 00:25:55,960
up to the doctor registry where anybody

00:25:53,710 --> 00:25:58,360
could download it that's generally

00:25:55,960 --> 00:26:00,340
considered bad right so we don't want

00:25:58,360 --> 00:26:03,370
people to do that at least we don't want

00:26:00,340 --> 00:26:05,140
people to do that accidentally if you

00:26:03,370 --> 00:26:06,880
want to push to the public hub then you

00:26:05,140 --> 00:26:10,510
should be able to do that to any

00:26:06,880 --> 00:26:12,130
questions on that all right getting

00:26:10,510 --> 00:26:14,080
started with docker files the great

00:26:12,130 --> 00:26:16,690
thing about this is that there are

00:26:14,080 --> 00:26:18,400
hundreds of thousands of dr. files in

00:26:16,690 --> 00:26:22,929
the wild that you can look at love and

00:26:18,400 --> 00:26:25,990
learn off of we have two repositories

00:26:22,929 --> 00:26:27,600
for CentOS and Fedora docker files all

00:26:25,990 --> 00:26:30,010
you have to do is go there and look

00:26:27,600 --> 00:26:31,929
these aren't just the base docker files

00:26:30,010 --> 00:26:34,720
these are docker files for applications

00:26:31,929 --> 00:26:37,270
like engine X or own cloud and things

00:26:34,720 --> 00:26:40,260
like that so for example how many people

00:26:37,270 --> 00:26:42,429
have ever tried to install own cloud

00:26:40,260 --> 00:26:47,679
okay how many people found that a fun

00:26:42,429 --> 00:26:50,380
experience very lot fewer hands we have

00:26:47,679 --> 00:26:52,090
own cloud packaged as a docker image

00:26:50,380 --> 00:26:54,429
that you can basically grab the docker

00:26:52,090 --> 00:26:57,400
file build it and be running own cloud

00:26:54,429 --> 00:27:05,470
in about five minutes depending on your

00:26:57,400 --> 00:27:07,870
network speed maybe ten hotel 15 so but

00:27:05,470 --> 00:27:11,770
building an image is also fairly easy

00:27:07,870 --> 00:27:16,390
it's a one liner and it's just boom you

00:27:11,770 --> 00:27:19,090
run build RM t user app name and

00:27:16,390 --> 00:27:21,309
everything and you're good the dot the

00:27:19,090 --> 00:27:22,780
trailing dot at the end is to say that

00:27:21,309 --> 00:27:24,669
the docker file is in the current

00:27:22,780 --> 00:27:27,510
directory by the way so you could also

00:27:24,669 --> 00:27:29,980
point to a docker file somewhere else

00:27:27,510 --> 00:27:32,020
creating docker files they're very

00:27:29,980 --> 00:27:35,380
simple we're fairly complex depending on

00:27:32,020 --> 00:27:36,730
what you're going to do my suggestion

00:27:35,380 --> 00:27:38,980
this isn't a requirement but my

00:27:36,730 --> 00:27:41,650
suggestion is you do one service /

00:27:38,980 --> 00:27:44,140
dockerfile don't like take an

00:27:41,650 --> 00:27:45,490
application like WordPress that you're

00:27:44,140 --> 00:27:47,710
going to put out in production and put

00:27:45,490 --> 00:27:49,540
everything into one container the whole

00:27:47,710 --> 00:27:51,299
idea is microservices so you want to

00:27:49,540 --> 00:27:54,970
abstract things out to where you have

00:27:51,299 --> 00:27:56,890
engine X or httpd and one you have

00:27:54,970 --> 00:27:58,960
postgres or your database and another

00:27:56,890 --> 00:28:03,059
one that also makes it easier to stand

00:27:58,960 --> 00:28:07,630
up and take down things for updates ok

00:28:03,059 --> 00:28:11,169
basic format for a docker container you

00:28:07,630 --> 00:28:14,049
can basically add the from maintainer

00:28:11,169 --> 00:28:15,429
these are freeform run commands are

00:28:14,049 --> 00:28:18,460
things that you're going to run in the

00:28:15,429 --> 00:28:22,059
container you can add files into the

00:28:18,460 --> 00:28:24,279
container from your local machine decide

00:28:22,059 --> 00:28:26,260
what directories or I'm sorry what ports

00:28:24,279 --> 00:28:28,419
you're going to expose the outside world

00:28:26,260 --> 00:28:31,659
by default these ports are not exposed

00:28:28,419 --> 00:28:35,500
ok and then commands you run once the

00:28:31,659 --> 00:28:37,960
container is spun up ok so difference

00:28:35,500 --> 00:28:39,429
between run and command for example run

00:28:37,960 --> 00:28:42,190
is something that I'm built I'm running

00:28:39,429 --> 00:28:44,140
as i'm building the container command is

00:28:42,190 --> 00:28:47,799
what i want to run after the container

00:28:44,140 --> 00:29:03,159
is starter ok their hand back there yes

00:28:47,799 --> 00:29:05,080
sir question is is the CMD run inside

00:29:03,159 --> 00:29:20,080
the container inside the host the CMD is

00:29:05,080 --> 00:29:22,120
run in the container yes sir yes that's

00:29:20,080 --> 00:29:34,450
port 80 and that's going to expose that

00:29:22,120 --> 00:29:35,830
to the local machine yes no if I

00:29:34,450 --> 00:29:39,490
understand your question correctly

00:29:35,830 --> 00:29:41,289
you're asking if I expose port 80 is

00:29:39,490 --> 00:29:52,600
that going to make it the default port

00:29:41,289 --> 00:29:55,000
80 for the machine it is so it is not

00:29:52,600 --> 00:29:57,399
exposing it on the host yeah it's only

00:29:55,000 --> 00:29:59,320
exposing it's basically saying that the

00:29:57,399 --> 00:30:01,149
host can point a port to talk to this

00:29:59,320 --> 00:30:03,490
but it does not automatically do that

00:30:01,149 --> 00:30:05,919
until you run the container and there's

00:30:03,490 --> 00:30:12,220
a separate pork command to say for

00:30:05,919 --> 00:30:14,409
example you might map for 5024 to the

00:30:12,220 --> 00:30:15,580
container in port 80 but that is

00:30:14,409 --> 00:30:28,480
something you do when you

00:30:15,580 --> 00:30:30,400
the container yes sir yeah you can the

00:30:28,480 --> 00:30:32,350
question was can you bridge static ip's

00:30:30,400 --> 00:30:36,040
two containers and yeah there are ways

00:30:32,350 --> 00:30:39,790
to do that so docker out of the box

00:30:36,040 --> 00:30:42,010
networking is a little basic but there

00:30:39,790 --> 00:30:44,650
are things like we've and flannel and

00:30:42,010 --> 00:30:47,050
other solutions that are trying to make

00:30:44,650 --> 00:30:49,120
you know basically sdn for containers

00:30:47,050 --> 00:30:52,810
that are making it much much more robust

00:30:49,120 --> 00:30:54,970
and so the real question is what is your

00:30:52,810 --> 00:30:56,710
environment and are you using one of

00:30:54,970 --> 00:30:58,830
these things are you just using straight

00:30:56,710 --> 00:31:01,570
docker and things like that networking

00:30:58,830 --> 00:31:03,460
isn't my strongest area but it's it's

00:31:01,570 --> 00:31:14,890
definitely something that's that's

00:31:03,460 --> 00:31:16,600
doable yeah yes sir oh why I have the

00:31:14,890 --> 00:31:23,260
ampersand on the run command or why am i

00:31:16,600 --> 00:31:25,870
doing the unclean wall basically so you

00:31:23,260 --> 00:31:27,880
don't come up with two layers yeah sorry

00:31:25,870 --> 00:31:31,570
so the question was why do I have why am

00:31:27,880 --> 00:31:33,570
i running several commands everybody is

00:31:31,570 --> 00:31:36,480
familiar with the double ampersand

00:31:33,570 --> 00:31:39,310
convention okay so why am i doing that

00:31:36,480 --> 00:31:41,800
with one run command instead of a run

00:31:39,310 --> 00:31:43,930
yum update and then a run yum clean all

00:31:41,800 --> 00:31:46,390
the reason is each run command will

00:31:43,930 --> 00:31:48,190
generate its own layer and so the reason

00:31:46,390 --> 00:31:50,500
I'm doing the unclean all here is

00:31:48,190 --> 00:31:52,210
because I don't want to carry that cash

00:31:50,500 --> 00:31:54,640
in the image because that's going to

00:31:52,210 --> 00:31:56,620
bloat the image and if I do it in a

00:31:54,640 --> 00:32:03,100
separate run command I'm still going to

00:31:56,620 --> 00:32:04,630
have that layer so yes sir the question

00:32:03,100 --> 00:32:06,760
is is there a limit to the number of

00:32:04,630 --> 00:32:11,440
layers you can have the answer is yes

00:32:06,760 --> 00:32:13,720
and I think that it's currently 1024 but

00:32:11,440 --> 00:32:16,830
I could be lying depending on what

00:32:13,720 --> 00:32:22,330
changes they made recently but as if I

00:32:16,830 --> 00:32:24,610
my latest reasonable information and my

00:32:22,330 --> 00:32:27,910
memory which is you know I'm not a young

00:32:24,610 --> 00:32:29,580
person anymore 1024 is what my brain

00:32:27,910 --> 00:32:31,600
tells me is the limit

00:32:29,580 --> 00:32:40,680
you've had a lot of questions I'm going

00:32:31,600 --> 00:32:43,300
to go to the green shirt pillow first I

00:32:40,680 --> 00:32:48,550
would be the wrong person to do that I'm

00:32:43,300 --> 00:32:49,600
sorry yeah it's been it's been a long

00:32:48,550 --> 00:32:51,790
time since i put this presentation

00:32:49,600 --> 00:32:56,220
together and i do not remember this the

00:32:51,790 --> 00:32:56,220
difference i'm sorry you had a question

00:33:03,750 --> 00:33:09,070
no but the run command and things like

00:33:06,580 --> 00:33:11,670
that do I'm sorry there's every line add

00:33:09,070 --> 00:33:19,210
a new layer no not necessarily but the

00:33:11,670 --> 00:33:22,660
the run commands do I don't lhasa it I

00:33:19,210 --> 00:33:26,880
don't think so another question

00:33:22,660 --> 00:33:26,880
somewhere or are we good yes sir

00:33:45,160 --> 00:33:49,310
the files persistent sorry the question

00:33:47,690 --> 00:33:51,470
is how do you make the files persistent

00:33:49,310 --> 00:33:53,660
on the host but do you mean the files to

00:33:51,470 --> 00:34:07,850
be persistent on the host or the in the

00:33:53,660 --> 00:34:09,530
container yeah ok so can ok so the

00:34:07,850 --> 00:34:12,770
question is how do you keep the data on

00:34:09,530 --> 00:34:14,150
on the host even if you remove the

00:34:12,770 --> 00:34:16,100
container the way you would do that is

00:34:14,150 --> 00:34:18,710
mount a directory on the host as a

00:34:16,100 --> 00:34:20,480
volume and so then it will just treat

00:34:18,710 --> 00:34:22,610
remember this is all running on the host

00:34:20,480 --> 00:34:25,660
as a process anyway so you can basically

00:34:22,610 --> 00:34:28,400
point it to a directory on the host as

00:34:25,660 --> 00:34:30,560
one of the volumes so you could you

00:34:28,400 --> 00:34:33,530
could for example point like VAR lib my

00:34:30,560 --> 00:34:35,750
sequel added directory on the host and

00:34:33,530 --> 00:34:38,180
leave those on the host so when that

00:34:35,750 --> 00:34:40,010
container is removed or even destroyed

00:34:38,180 --> 00:34:44,080
those files will still be on your system

00:34:40,010 --> 00:35:02,930
they won't be removed so other questions

00:34:44,080 --> 00:35:07,910
yes sir mm-hm so the question is how do

00:35:02,930 --> 00:35:11,360
you get microservices so the question

00:35:07,910 --> 00:35:13,070
was how do you get containers to talk if

00:35:11,360 --> 00:35:15,110
you're running microservices and

00:35:13,070 --> 00:35:17,390
basically you tell them that on the

00:35:15,110 --> 00:35:21,230
command line you basically bridge them

00:35:17,390 --> 00:35:23,210
through dr. itself or use services like

00:35:21,230 --> 00:35:25,730
uber Nettie's which is definitely

00:35:23,210 --> 00:35:27,880
outside the scope of the talk but yes

00:35:25,730 --> 00:35:27,880
sir

00:35:41,980 --> 00:35:46,480
so the question is can you take a

00:35:44,440 --> 00:35:50,830
running server or virtual machine and

00:35:46,480 --> 00:35:54,670
put it into a container and the answer

00:35:50,830 --> 00:36:04,630
to that is I'm sorry just the

00:35:54,670 --> 00:36:06,310
application right so so the question was

00:36:04,630 --> 00:36:08,080
is there a process to just take an

00:36:06,310 --> 00:36:10,630
application from a server and put it

00:36:08,080 --> 00:36:13,000
into a container the answer is they're

00:36:10,630 --> 00:36:16,480
probably our tools to do that that is

00:36:13,000 --> 00:36:17,950
not supported directly by docker I think

00:36:16,480 --> 00:36:20,109
that there are folks at Red Hat for

00:36:17,950 --> 00:36:22,510
example who are working on this who are

00:36:20,109 --> 00:36:25,150
banging on that problem I think it's I

00:36:22,510 --> 00:36:28,180
think I think it may be a feature for

00:36:25,150 --> 00:36:33,010
fedora 23 a proposed feature to do

00:36:28,180 --> 00:36:34,840
server 22 container uh but it's not it's

00:36:33,010 --> 00:36:38,020
not part of docker it's something that

00:36:34,840 --> 00:36:48,000
other people would have to ship tools

00:36:38,020 --> 00:36:48,000
for follow question yeah

00:37:10,779 --> 00:37:20,499
a question well I just want to point out

00:37:16,929 --> 00:37:24,909
that i now hate the people at home no so

00:37:20,499 --> 00:37:26,739
the the the let me try to summarize that

00:37:24,909 --> 00:37:28,509
basically he's wanting to show he has a

00:37:26,739 --> 00:37:30,009
process for showing that he is patched

00:37:28,509 --> 00:37:33,729
something that's running in a virtual

00:37:30,009 --> 00:37:35,829
machine which does not necessarily move

00:37:33,729 --> 00:37:37,809
over to containers right now and he

00:37:35,829 --> 00:37:39,429
wants to be able to use containers would

00:37:37,809 --> 00:37:40,900
be able to show and verify that he's

00:37:39,429 --> 00:37:42,699
patched the images that are running in

00:37:40,900 --> 00:37:46,269
production is that a fair summary yes

00:37:42,699 --> 00:37:49,449
pci DSS is what you said yes pci DSS and

00:37:46,269 --> 00:37:51,069
specifically that you know the virtual

00:37:49,449 --> 00:37:53,709
machine running the application is fully

00:37:51,069 --> 00:37:55,809
patched at this time i can drop out doc

00:37:53,709 --> 00:37:57,339
or files and drop in images and out and

00:37:55,809 --> 00:37:59,349
bring the applications and pieces parts

00:37:57,339 --> 00:38:00,549
in and out but as i drop them out and

00:37:59,349 --> 00:38:02,319
drop the men i have to show that the

00:38:00,549 --> 00:38:06,099
ones i dropped in our from sources that

00:38:02,319 --> 00:38:07,959
have been fully badge so the answer to

00:38:06,099 --> 00:38:09,429
that is I am not aware of a way that you

00:38:07,959 --> 00:38:11,409
would do that by the way I want to take

00:38:09,429 --> 00:38:13,630
a picture of the audience before the

00:38:11,409 --> 00:38:21,009
talk is over so everybody say containers

00:38:13,630 --> 00:38:22,269
containers that was pitiful okay so i am

00:38:21,009 --> 00:38:24,369
not aware of something that would solve

00:38:22,269 --> 00:38:26,829
that problem right now i think that that

00:38:24,369 --> 00:38:28,779
is at the point where you probably get a

00:38:26,829 --> 00:38:30,219
vendor involved of some sort and talk to

00:38:28,779 --> 00:38:32,380
them about it I don't know that your

00:38:30,219 --> 00:38:36,039
tools wouldn't work with containers

00:38:32,380 --> 00:38:38,109
themselves but yeah I don't off the top

00:38:36,039 --> 00:38:40,390
of my head I work in community land so I

00:38:38,109 --> 00:38:43,599
don't necessarily have a drop in answer

00:38:40,390 --> 00:38:46,059
for that one a question back there in

00:38:43,599 --> 00:38:49,599
the agreement oh you have an answer

00:38:46,059 --> 00:38:50,979
alright alright I have an answer or

00:38:49,599 --> 00:38:53,739
suggestion for the gentleman who's

00:38:50,979 --> 00:38:56,799
wondering how to to show the proof of

00:38:53,739 --> 00:38:59,169
patching of a container your if you're

00:38:56,799 --> 00:39:01,209
running a very bad container when it has

00:38:59,169 --> 00:39:03,759
actually as rpm or advocate in it you

00:39:01,209 --> 00:39:05,979
can do a query of the containers hang

00:39:03,759 --> 00:39:07,269
all right what versions of rpms what

00:39:05,979 --> 00:39:10,269
versions of Apache that I'm running

00:39:07,269 --> 00:39:12,279
prove that you know that I did pageant

00:39:10,269 --> 00:39:14,169
you I don't know if you'd want to but

00:39:12,279 --> 00:39:16,869
you could do you may go so far as to

00:39:14,169 --> 00:39:19,779
running some type of vulnerability

00:39:16,869 --> 00:39:23,380
scanner within the container but another

00:39:19,779 --> 00:39:24,549
way to do that is if you you do some

00:39:23,380 --> 00:39:28,689
extra work you have a

00:39:24,549 --> 00:39:32,199
known good image on a host you stin

00:39:28,689 --> 00:39:35,019
start doing like md5 sums or sha256 sums

00:39:32,199 --> 00:39:37,359
of the files and then you simplicity

00:39:35,019 --> 00:39:40,269
Iseman this is what a patch system looks

00:39:37,359 --> 00:39:43,479
like compare that to the container and

00:39:40,269 --> 00:39:46,269
you binary I'm sorry you crypto checks

00:39:43,479 --> 00:39:48,819
and files that's that should be good so

00:39:46,269 --> 00:39:53,549
that's one option it's not clean it's

00:39:48,819 --> 00:39:53,549
not necessarily easy but it's workable

00:39:53,969 --> 00:40:03,009
any other questions project atomic thank

00:39:59,650 --> 00:40:04,209
you for asking project atomic I meant to

00:40:03,009 --> 00:40:05,920
talk about this at the beginning but I

00:40:04,209 --> 00:40:09,039
was so excited to talk about containers

00:40:05,920 --> 00:40:12,759
I didn't get into it project atomic is

00:40:09,039 --> 00:40:16,179
the umbrella upstream project for Red

00:40:12,759 --> 00:40:18,189
Hat's work around containers so it's a

00:40:16,179 --> 00:40:19,749
bit of an oddity as an open source

00:40:18,189 --> 00:40:22,749
project because usually you have a

00:40:19,749 --> 00:40:25,660
project like fedora and Fedora produces

00:40:22,749 --> 00:40:28,299
the Fedora images and so forth and you

00:40:25,660 --> 00:40:29,979
have like kind of one goal and you

00:40:28,299 --> 00:40:32,380
produce one thing at the end project

00:40:29,979 --> 00:40:33,880
atomic is an umbrella project for all

00:40:32,380 --> 00:40:36,729
the work we're doing around containers

00:40:33,880 --> 00:40:39,400
and so right now we produce patterns and

00:40:36,729 --> 00:40:42,489
software for working with atomic hosts

00:40:39,400 --> 00:40:44,769
which are basically a streamlined host

00:40:42,489 --> 00:40:47,109
for running Linux containers Fedora

00:40:44,769 --> 00:40:49,749
CentOS and red hat enterprise linux all

00:40:47,109 --> 00:40:52,089
produce atomic hosts which are basically

00:40:49,749 --> 00:40:54,549
minimal images that run docker

00:40:52,089 --> 00:40:56,529
containers and they provide a couple of

00:40:54,549 --> 00:40:58,660
utilities that are necessary for running

00:40:56,529 --> 00:41:01,269
those containers like uber Nettie's and

00:40:58,660 --> 00:41:03,459
flannel and at CD and that's it

00:41:01,269 --> 00:41:05,890
everything else should be run as a

00:41:03,459 --> 00:41:08,890
container my talk tomorrow I'll talk

00:41:05,890 --> 00:41:11,319
about some of the ways that you deliver

00:41:08,890 --> 00:41:13,839
software for that including things like

00:41:11,319 --> 00:41:16,839
super privileged containers and atomic

00:41:13,839 --> 00:41:20,109
apps but project atomic also encompasses

00:41:16,839 --> 00:41:22,390
things like user been atomic which is a

00:41:20,109 --> 00:41:26,249
command that is used update the host and

00:41:22,390 --> 00:41:30,549
to work with and install containers

00:41:26,249 --> 00:41:32,969
there's also a newly kyoool which is a

00:41:30,549 --> 00:41:36,189
specification for installing complex

00:41:32,969 --> 00:41:37,720
containerized applications which

00:41:36,189 --> 00:41:39,790
includes in

00:41:37,720 --> 00:41:41,980
Nation about how to run them with things

00:41:39,790 --> 00:41:44,410
like goober Nettie's so basically it's

00:41:41,980 --> 00:41:46,359
almost like rpm are young for

00:41:44,410 --> 00:41:50,290
containerized applications so you can

00:41:46,359 --> 00:41:52,480
run atomic install foo and you know get

00:41:50,290 --> 00:41:55,090
a running application that consists of

00:41:52,480 --> 00:41:57,310
several containers and kuber Nettie's

00:41:55,090 --> 00:41:59,230
orchestration information it'll tell you

00:41:57,310 --> 00:42:01,480
how to set up your volley volumes and

00:41:59,230 --> 00:42:03,820
networking all this stuff is things that

00:42:01,480 --> 00:42:05,470
you don't have to do manually we also

00:42:03,820 --> 00:42:07,869
have atomic app which is the

00:42:05,470 --> 00:42:10,240
implementation of Nuala Kuehl and we

00:42:07,869 --> 00:42:13,740
have our pmos tree which is how you

00:42:10,240 --> 00:42:15,970
update atomic hosts are pmos tree takes

00:42:13,740 --> 00:42:18,700
you know right now when you install

00:42:15,970 --> 00:42:20,950
fedora or santos or whatever you're

00:42:18,700 --> 00:42:23,140
installing something built from a bunch

00:42:20,950 --> 00:42:26,740
of rpms and then you continually update

00:42:23,140 --> 00:42:29,290
it as new rpms our pmos tree is like get

00:42:26,740 --> 00:42:33,849
for operating systems basically it lets

00:42:29,290 --> 00:42:35,890
you update 8a to be you install a new

00:42:33,849 --> 00:42:38,290
tree reboot and you're into the new tree

00:42:35,890 --> 00:42:41,170
and you can revert to the old tree if

00:42:38,290 --> 00:42:44,589
something goes wrong does that kind of

00:42:41,170 --> 00:42:51,630
cover your question any questions about

00:42:44,589 --> 00:42:54,070
that by the way that also reminds me I

00:42:51,630 --> 00:42:57,910
have some shirts that I would like to

00:42:54,070 --> 00:43:02,349
throw it the audience so let's see here

00:42:57,910 --> 00:43:04,000
who's a large who's who's a XL first

00:43:02,349 --> 00:43:10,480
actually who's an XL who would like a

00:43:04,000 --> 00:43:16,660
shirt all right no problem another XL

00:43:10,480 --> 00:43:18,790
another XL there we go I meant to throw

00:43:16,660 --> 00:43:20,560
these out for questions but the

00:43:18,790 --> 00:43:25,500
questions were just so enrapturing i

00:43:20,560 --> 00:43:25,500
completely forgot large shoes a large

00:43:27,900 --> 00:43:36,190
rubber band probably would have helped

00:43:29,950 --> 00:43:37,990
one more XL alright we have a couple at

00:43:36,190 --> 00:43:41,580
the Red Hat booth by the way to sew

00:43:37,990 --> 00:43:41,580
another XL ah

00:43:44,829 --> 00:43:50,119
all right throw it on back there there

00:43:48,319 --> 00:43:51,920
we go all right if you did not get a

00:43:50,119 --> 00:43:53,839
shirt but you want a shirt we have some

00:43:51,920 --> 00:43:56,210
more at the Red Hat booth and I do not

00:43:53,839 --> 00:43:59,180
want to take any of them back so please

00:43:56,210 --> 00:44:01,160
stop by we also have a lot of atomic

00:43:59,180 --> 00:44:05,089
stickers so if you would like an atomic

00:44:01,160 --> 00:44:07,069
sticker for your laptop but if you are

00:44:05,089 --> 00:44:11,329
interested in containers i really

00:44:07,069 --> 00:44:14,029
encourage you run Fedora 22 or cintas 7

00:44:11,329 --> 00:44:15,950
or a rel if you were a rel customer give

00:44:14,029 --> 00:44:17,539
them a shot if you are interested in

00:44:15,950 --> 00:44:19,549
putting them in production and actually

00:44:17,539 --> 00:44:22,010
doing serious work with containerized

00:44:19,549 --> 00:44:23,990
apps I would really strongly encourage

00:44:22,010 --> 00:44:26,809
you to look at fedora 20 to atomic host

00:44:23,990 --> 00:44:28,849
or look at the cintas rebuild we'll be

00:44:26,809 --> 00:44:31,930
putting out soon or again if you're a

00:44:28,849 --> 00:44:36,260
Red Hat customer the rel 7 atomic host

00:44:31,930 --> 00:44:37,819
how much time have I got left 15 minutes

00:44:36,260 --> 00:44:41,180
so I have time for another question or

00:44:37,819 --> 00:44:43,760
we can all go grab beers yes sir way in

00:44:41,180 --> 00:44:52,039
the back this guy is anti beer I just

00:44:43,760 --> 00:44:55,940
want to point out ooh so the question is

00:44:52,039 --> 00:44:58,039
and I hate these many questions because

00:44:55,940 --> 00:45:00,440
they're very reductive the question is

00:44:58,039 --> 00:45:05,119
how does it compare to core OS they're

00:45:00,440 --> 00:45:06,980
both operating systems so how it

00:45:05,119 --> 00:45:08,720
compares to cross I honestly don't spend

00:45:06,980 --> 00:45:12,769
very much time looking at core OS I

00:45:08,720 --> 00:45:16,220
can't really say exactly feature parity

00:45:12,769 --> 00:45:19,880
here and there so broadly speaking core

00:45:16,220 --> 00:45:22,069
OS anatomic have very similar goals we

00:45:19,880 --> 00:45:23,779
want to be operating systems that are

00:45:22,069 --> 00:45:25,940
minimal for running containers so we're

00:45:23,779 --> 00:45:28,400
not wasting any resources on anything

00:45:25,940 --> 00:45:30,410
unnecessary to run in containers we

00:45:28,400 --> 00:45:32,359
share a couple of things we use at CD

00:45:30,410 --> 00:45:34,670
for example which the core OS folks have

00:45:32,359 --> 00:45:36,950
developed array open source they do work

00:45:34,670 --> 00:45:39,349
we get to have that we do work they get

00:45:36,950 --> 00:45:42,859
to you know take some of that it's all

00:45:39,349 --> 00:45:45,619
great clustering is not something that

00:45:42,859 --> 00:45:48,049
is currently part of atomic but that's

00:45:45,619 --> 00:45:53,569
something that probably will appear at

00:45:48,049 --> 00:45:56,059
some point any other questions oh sorry

00:45:53,569 --> 00:45:58,430
i did want to add this part so the other

00:45:56,059 --> 00:46:02,089
thing about atomic and a town

00:45:58,430 --> 00:46:04,430
it's important to understand is that we

00:46:02,089 --> 00:46:07,760
could have gone and reinvented the wheel

00:46:04,430 --> 00:46:10,339
and started with brand new from scratch

00:46:07,760 --> 00:46:12,380
operating system but a lot of people

00:46:10,339 --> 00:46:14,270
happen to be running rail or fedora or

00:46:12,380 --> 00:46:16,460
Santos in their environment already and

00:46:14,270 --> 00:46:19,490
we kind of figure that people don't want

00:46:16,460 --> 00:46:21,500
their you know a lot of people for

00:46:19,490 --> 00:46:24,500
example run core OS or atomic and

00:46:21,500 --> 00:46:26,300
virtualization right so you've got to

00:46:24,500 --> 00:46:28,280
have an operating system down here to

00:46:26,300 --> 00:46:30,079
run that and then you're going to be

00:46:28,280 --> 00:46:32,089
running containers which are comprised

00:46:30,079 --> 00:46:34,880
of a different operating system which is

00:46:32,089 --> 00:46:36,260
a layer that core OS doesn't provide we

00:46:34,880 --> 00:46:39,380
are trying to provide the entire

00:46:36,260 --> 00:46:42,319
sandwich whereas core OS is sort of this

00:46:39,380 --> 00:46:45,680
layer and we are providing you know from

00:46:42,319 --> 00:46:49,099
the bare metal to the layer running the

00:46:45,680 --> 00:47:01,490
docker to the docker filling basically

00:46:49,099 --> 00:47:03,890
okay other questions yes sir so

00:47:01,490 --> 00:47:08,540
difference between docker and Alexei and

00:47:03,890 --> 00:47:11,839
doctor and rocket so docker started out

00:47:08,540 --> 00:47:14,119
basic based on lxiii it just simplified

00:47:11,839 --> 00:47:15,829
the way that you deploy images and work

00:47:14,119 --> 00:47:17,809
with them it's not only the engine to

00:47:15,829 --> 00:47:20,390
run the containers but it's also an

00:47:17,809 --> 00:47:23,059
image format and a way of working with

00:47:20,390 --> 00:47:26,299
containers it's much more simple now I

00:47:23,059 --> 00:47:28,460
haven't looked at lxc since contained

00:47:26,299 --> 00:47:31,430
docker containers became a big deal and

00:47:28,460 --> 00:47:33,260
so the LXE project may have moved

00:47:31,430 --> 00:47:37,309
farther than my understanding of it is

00:47:33,260 --> 00:47:39,710
currently rocket is an effort by the

00:47:37,309 --> 00:47:41,420
core OS folks and we're trying to get a

00:47:39,710 --> 00:47:46,250
packaged in fedora they do some

00:47:41,420 --> 00:47:49,130
interesting things with repackaging base

00:47:46,250 --> 00:47:50,930
image and systemd that we're trying to

00:47:49,130 --> 00:47:55,069
get worked out in our packaging

00:47:50,930 --> 00:47:57,170
guidelines but it solves or tries to

00:47:55,069 --> 00:48:02,920
solve some of the perceived security

00:47:57,170 --> 00:48:05,510
issues with docker so there it's

00:48:02,920 --> 00:48:07,910
basically it's it's very much like

00:48:05,510 --> 00:48:09,829
docker they're just trying to solve some

00:48:07,910 --> 00:48:12,500
of the things that they perceive as

00:48:09,829 --> 00:48:14,720
insecure with docker which

00:48:12,500 --> 00:48:16,820
I think some of our engineers tend to

00:48:14,720 --> 00:48:18,770
agree with the problem is that docker

00:48:16,820 --> 00:48:20,270
already has run away adoption and we

00:48:18,770 --> 00:48:24,340
want to kind of solve the problems in

00:48:20,270 --> 00:48:26,660
docker before moving over to rocket so

00:48:24,340 --> 00:48:28,730
noticing i'm talking with my hands a lot

00:48:26,660 --> 00:48:31,130
that's weird but anyway i think i think

00:48:28,730 --> 00:48:34,460
i'm brian profit is rubbed off on me

00:48:31,130 --> 00:48:37,010
it's be sure to tell him that do the

00:48:34,460 --> 00:48:39,170
jazz hands all right i'll take one more

00:48:37,010 --> 00:48:41,870
question one more who's got a really

00:48:39,170 --> 00:48:43,370
good question this guy you don't look

00:48:41,870 --> 00:48:46,690
very confident about it by the way your

00:48:43,370 --> 00:48:46,690
can't like i might have a good question

00:48:50,770 --> 00:48:56,210
the question is is atomic good for

00:48:53,180 --> 00:48:59,960
running kvm or just containers so you

00:48:56,210 --> 00:49:02,210
could run kvm if you use a super

00:48:59,960 --> 00:49:04,250
privileged container to bring in libvirt

00:49:02,210 --> 00:49:07,460
and all those things it's not really

00:49:04,250 --> 00:49:11,120
designed for running kvm if you want to

00:49:07,460 --> 00:49:13,160
run kvm i would take a look at over and

00:49:11,120 --> 00:49:14,900
we happen to have brian profit out at

00:49:13,160 --> 00:49:16,790
the Red Hat booth that he can talk to

00:49:14,900 --> 00:49:19,460
you about that there's also some

00:49:16,790 --> 00:49:20,630
discussion I think about for those of

00:49:19,460 --> 00:49:25,360
you who aren't familiar with the overt

00:49:20,630 --> 00:49:27,350
project it's basically a master and node

00:49:25,360 --> 00:49:29,600
configuration where basically you have

00:49:27,350 --> 00:49:32,450
one controller and then you have over

00:49:29,600 --> 00:49:34,250
nodes that are basically similar concept

00:49:32,450 --> 00:49:35,390
to atomic there's slim down nodes and

00:49:34,250 --> 00:49:37,790
the only thing they're really meant to

00:49:35,390 --> 00:49:39,620
do is run kvm containers you're not

00:49:37,790 --> 00:49:41,540
meant to run anything on those hosts

00:49:39,620 --> 00:49:43,730
directly on the host you're meant to run

00:49:41,540 --> 00:49:46,670
everything in containers but that

00:49:43,730 --> 00:49:49,760
project brian profit can talk to you a

00:49:46,670 --> 00:49:52,550
lot more about so we are talking with

00:49:49,760 --> 00:49:54,410
them about possibly using our p MOS tree

00:49:52,550 --> 00:49:57,530
for the overt nodes so that you would

00:49:54,410 --> 00:50:00,590
update those nodes and over it may

00:49:57,530 --> 00:50:04,220
eventually expand to to managing

00:50:00,590 --> 00:50:07,700
containers and kvm but thats future

00:50:04,220 --> 00:50:09,170
stuff that may or may not happen so all

00:50:07,700 --> 00:50:12,790
right i'd like to thank everybody very

00:50:09,170 --> 00:50:12,790
much for your attention have a good rest

00:50:46,270 --> 00:50:48,330
you

00:53:17,460 --> 00:53:21,630
Citrix XenServer gives you everything

00:53:19,650 --> 00:53:24,599
you need to integrate manage and

00:53:21,630 --> 00:53:26,700
automate a virtual data center all on an

00:53:24,599 --> 00:53:29,130
enterprise-class cloud proven virtual

00:53:26,700 --> 00:53:31,859
platform and at a third of the cost of

00:53:29,130 --> 00:53:33,570
other solutions but why even bother with

00:53:31,859 --> 00:53:35,730
virtualizing your server infrastructure

00:53:33,570 --> 00:53:37,710
in the first place well let's say you

00:53:35,730 --> 00:53:39,990
have a traditional one server to one

00:53:37,710 --> 00:53:42,030
application architecture but you're

00:53:39,990 --> 00:53:44,580
running out of resources and performance

00:53:42,030 --> 00:53:46,880
is suffering once you order new server

00:53:44,580 --> 00:53:49,770
hardware you'll wait for delivery

00:53:46,880 --> 00:53:52,619
configure it install your business

00:53:49,770 --> 00:53:55,349
application stage and test the server

00:53:52,619 --> 00:53:57,540
and finally add it to your production

00:53:55,349 --> 00:53:59,730
farm if you've been through this process

00:53:57,540 --> 00:54:02,280
before you know it can take weeks or

00:53:59,730 --> 00:54:04,109
even months you also know it's a

00:54:02,280 --> 00:54:06,060
manually intensive process that will

00:54:04,109 --> 00:54:09,390
burden your team every time you outgrow

00:54:06,060 --> 00:54:11,160
your current setup with a virtual server

00:54:09,390 --> 00:54:13,950
solution you could accomplish all of

00:54:11,160 --> 00:54:16,530
that in less than half a day server

00:54:13,950 --> 00:54:18,330
virtualization software separates the OS

00:54:16,530 --> 00:54:20,820
and application from the underlying

00:54:18,330 --> 00:54:23,010
server hardware and with multiple

00:54:20,820 --> 00:54:24,750
virtual machines on a single server you

00:54:23,010 --> 00:54:27,720
can use each of them to run different

00:54:24,750 --> 00:54:29,400
os's and applications this makes it

00:54:27,720 --> 00:54:31,140
possible to move your virtual machines

00:54:29,400 --> 00:54:33,240
from one piece of hardware to another

00:54:31,140 --> 00:54:35,520
whenever you want to maximize

00:54:33,240 --> 00:54:37,470
utilization simplify maintenance or

00:54:35,520 --> 00:54:39,780
recover from a hardware failure and

00:54:37,470 --> 00:54:42,720
without slowing down your applications

00:54:39,780 --> 00:54:45,780
or users clearly server virtualization

00:54:42,720 --> 00:54:48,810
provides big benefits and Citrix

00:54:45,780 --> 00:54:51,030
XenServer provides even more since it's

00:54:48,810 --> 00:54:52,859
built on an open platform xenserver

00:54:51,030 --> 00:54:55,170
plays well with your existing hardware

00:54:52,859 --> 00:54:57,480
storage systems and IT management

00:54:55,170 --> 00:55:00,270
software as well as with the industry's

00:54:57,480 --> 00:55:02,339
leading cloud service providers best of

00:55:00,270 --> 00:55:04,050
all you can get started by downloading a

00:55:02,339 --> 00:55:07,290
fully functional production-ready

00:55:04,050 --> 00:55:09,510
version of xenserver for free after a

00:55:07,290 --> 00:55:11,640
10-minute installation process you'll

00:55:09,510 --> 00:55:13,650
see how easy it is to start virtualizing

00:55:11,640 --> 00:55:16,109
your workloads and automating your IT

00:55:13,650 --> 00:55:17,700
management processes and when you're

00:55:16,109 --> 00:55:19,619
ready for a richer set of management

00:55:17,700 --> 00:55:22,140
tools just upgrade to one of the premium

00:55:19,619 --> 00:55:23,970
editions of xenserver so whether you're

00:55:22,140 --> 00:55:25,890
interested in virtualizing servers for

00:55:23,970 --> 00:55:28,200
the first time expanding your server

00:55:25,890 --> 00:55:30,720
virtualization footprint or moving

00:55:28,200 --> 00:55:31,410
server workloads to the cloud download

00:55:30,720 --> 00:55:33,660
and install

00:55:31,410 --> 00:55:36,690
xenserver today and see how it can help

00:55:33,660 --> 00:55:42,079
you simplify your IT environment citrix

00:55:36,690 --> 00:55:42,079
xenserver do more don't spend more

00:55:47,070 --> 00:55:51,370
your customers rely on your website or

00:55:49,870 --> 00:55:53,740
application if it's slower

00:55:51,370 --> 00:55:56,680
non-responsive it infuriates your users

00:55:53,740 --> 00:55:58,510
and costs you money keeping your

00:55:56,680 --> 00:56:01,900
business critical systems humming along

00:55:58,510 --> 00:56:04,270
requires insight into what they're doing

00:56:01,900 --> 00:56:06,220
your system metrics tells stories

00:56:04,270 --> 00:56:08,170
stories that can reveal performance

00:56:06,220 --> 00:56:10,569
bottlenecks resource limitations and

00:56:08,170 --> 00:56:12,190
other problems but how do you keep an

00:56:10,569 --> 00:56:14,829
eye on all of your systems performance

00:56:12,190 --> 00:56:17,859
metrics in real-time and record this

00:56:14,829 --> 00:56:19,630
data for later analysis enter longview

00:56:17,859 --> 00:56:21,640
the new way to see what's really going

00:56:19,630 --> 00:56:23,799
on under the hood the long view

00:56:21,640 --> 00:56:25,839
dashboard lets you visualize the status

00:56:23,799 --> 00:56:28,299
of all your systems providing you with a

00:56:25,839 --> 00:56:31,720
bird's-eye view of your entire fleet you

00:56:28,299 --> 00:56:34,270
can sort by cpu memory swap processes

00:56:31,720 --> 00:56:36,039
load and network usage click a specific

00:56:34,270 --> 00:56:38,440
system to access its individual

00:56:36,039 --> 00:56:40,950
dashboard then click and drag to zoom in

00:56:38,440 --> 00:56:43,359
on chokepoints and get more detail

00:56:40,950 --> 00:56:44,980
comprehensive network data including

00:56:43,359 --> 00:56:47,289
inbound and outbound traffic is

00:56:44,980 --> 00:56:48,849
available on the network tab and disk

00:56:47,289 --> 00:56:50,799
rights and free space on the disk

00:56:48,849 --> 00:56:53,650
stabbed while the process Explorer

00:56:50,799 --> 00:56:56,200
displays usage statistics for individual

00:56:53,650 --> 00:56:58,390
processes the system info tab shows

00:56:56,200 --> 00:57:00,670
listening services active connections

00:56:58,390 --> 00:57:02,829
and available updates adding long view

00:57:00,670 --> 00:57:04,510
to a system is easy just click the

00:57:02,829 --> 00:57:06,670
button copy the one line installation

00:57:04,510 --> 00:57:09,069
command then run the command on your

00:57:06,670 --> 00:57:10,809
linux system to complete the process the

00:57:09,069 --> 00:57:13,000
agent will begin collecting data and

00:57:10,809 --> 00:57:16,510
sending it to longview then the graphs

00:57:13,000 --> 00:57:18,730
start rolling use long view to gain

00:57:16,510 --> 00:57:23,430
visibility into your servers so when

00:57:18,730 --> 00:57:23,430
your website or app heats up it stays up

00:57:29,190 --> 00:57:31,250

YouTube URL: https://www.youtube.com/watch?v=qx3DzLFSps0


