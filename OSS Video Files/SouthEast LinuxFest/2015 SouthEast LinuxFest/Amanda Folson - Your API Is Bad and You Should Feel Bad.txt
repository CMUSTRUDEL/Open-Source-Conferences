Title: Amanda Folson - Your API Is Bad and You Should Feel Bad
Publication date: 2017-01-25
Playlist: 2015 SouthEast LinuxFest
Description: 
	
Captions: 
	00:00:03,110 --> 00:00:07,919
hey everyone so my name is Amanda and

00:00:06,779 --> 00:00:10,440
today I'm going to be talking to you a

00:00:07,919 --> 00:00:13,530
little bit about why your API is bad and

00:00:10,440 --> 00:00:15,450
why you should feel bad so Who am I to

00:00:13,530 --> 00:00:18,870
be judging you I've been doing this for

00:00:15,450 --> 00:00:21,510
a while over 10 years now building API

00:00:18,870 --> 00:00:24,330
is using api's started with the things

00:00:21,510 --> 00:00:26,700
that were in libraries and kind of

00:00:24,330 --> 00:00:28,860
learned what an API was from that and

00:00:26,700 --> 00:00:30,240
then gradually got into web development

00:00:28,860 --> 00:00:35,070
and started to learn more about web

00:00:30,240 --> 00:00:37,640
api's so why should you care about api's

00:00:35,070 --> 00:00:42,469
they're everywhere literally everywhere

00:00:37,640 --> 00:00:44,370
so with this whole Internet of Things

00:00:42,469 --> 00:00:47,039
terminology being thrown around I mean

00:00:44,370 --> 00:00:49,710
everybody is basically racing to set up

00:00:47,039 --> 00:00:51,539
an API for one thing or another so

00:00:49,710 --> 00:00:55,260
they're they're becoming really really

00:00:51,539 --> 00:00:58,890
common and they have been for a while so

00:00:55,260 --> 00:01:00,690
why do you care about having an API in

00:00:58,890 --> 00:01:02,640
the first place and the whole idea is

00:01:00,690 --> 00:01:05,010
basically to provide a uniform interface

00:01:02,640 --> 00:01:09,120
for your users to interact with whatever

00:01:05,010 --> 00:01:11,610
service your schlepping so and it also

00:01:09,120 --> 00:01:13,950
lends itself to a service-oriented

00:01:11,610 --> 00:01:15,630
architecture which I'm totally into so

00:01:13,950 --> 00:01:18,630
it allows you to decouple surfaces and

00:01:15,630 --> 00:01:21,870
basically things can go down and you

00:01:18,630 --> 00:01:24,120
don't really have to care about it so

00:01:21,870 --> 00:01:25,410
that that's great and that's one of the

00:01:24,120 --> 00:01:27,180
reasons why people are spending this up

00:01:25,410 --> 00:01:31,230
instead of having like monolithic

00:01:27,180 --> 00:01:35,490
applications that are tightly coupled so

00:01:31,230 --> 00:01:37,230
like I said types of api's there are

00:01:35,490 --> 00:01:38,640
language and platform specific ones

00:01:37,230 --> 00:01:40,710
today we're going to be talking about

00:01:38,640 --> 00:01:43,560
Web API is because that's kind of the

00:01:40,710 --> 00:01:44,910
direction that everything is headed like

00:01:43,560 --> 00:01:46,230
I said with this internet of things

00:01:44,910 --> 00:01:47,700
which I don't know how that got more

00:01:46,230 --> 00:01:49,890
popular than cloud by the way but

00:01:47,700 --> 00:01:54,540
everybody is like super excited about

00:01:49,890 --> 00:01:57,780
Internet of Things so this is one of the

00:01:54,540 --> 00:01:59,610
common ones soap I see some head shaking

00:01:57,780 --> 00:02:04,320
any audience i'm sure you're familiar

00:01:59,610 --> 00:02:06,030
yes exactly so so actually does have its

00:02:04,320 --> 00:02:07,680
uses we're not really going to talk

00:02:06,030 --> 00:02:10,079
about soap today because really nobody

00:02:07,680 --> 00:02:11,489
nobody enjoys using soap it's just one

00:02:10,079 --> 00:02:13,610
of those things that you have to suffer

00:02:11,489 --> 00:02:16,610
through right so

00:02:13,610 --> 00:02:21,070
it's great because the procedures are

00:02:16,610 --> 00:02:25,520
mostly obvious but also sucks because

00:02:21,070 --> 00:02:26,930
well you can read this life so we're

00:02:25,520 --> 00:02:29,090
going to talk about rest it's gaining

00:02:26,930 --> 00:02:30,920
adoption it's becoming super common it's

00:02:29,090 --> 00:02:32,570
been around for a while but people for

00:02:30,920 --> 00:02:34,520
whatever reason have just started within

00:02:32,570 --> 00:02:37,580
the last few years to pick up on it but

00:02:34,520 --> 00:02:39,470
it's actually a thing so it's usually

00:02:37,580 --> 00:02:41,810
http-based which is great because

00:02:39,470 --> 00:02:43,750
anything that speaks HTTP and pretty

00:02:41,810 --> 00:02:48,380
much every language has some sort of

00:02:43,750 --> 00:02:50,090
HTTP speaking thing can talk to a REST

00:02:48,380 --> 00:02:51,800
API and there's really no need to know

00:02:50,090 --> 00:02:53,959
the order of the parameters like you do

00:02:51,800 --> 00:02:55,310
with soap and it can return all sorts of

00:02:53,959 --> 00:02:57,230
formats there are people that are

00:02:55,310 --> 00:02:59,120
returning like custom formats and then

00:02:57,230 --> 00:03:02,959
the standards like XML JSON ya moul

00:02:59,120 --> 00:03:05,420
things like that so you're probably

00:03:02,959 --> 00:03:06,920
thinking like okay well that that sounds

00:03:05,420 --> 00:03:08,300
great that sounds easy enough you know

00:03:06,920 --> 00:03:10,670
there's all these these things out there

00:03:08,300 --> 00:03:12,440
that will help me do this and well no

00:03:10,670 --> 00:03:16,010
this is the first mistake that people

00:03:12,440 --> 00:03:17,810
make when it comes to them trying to get

00:03:16,010 --> 00:03:20,870
an api out the door they rush into it

00:03:17,810 --> 00:03:22,940
they rush to get v1 released and it's a

00:03:20,870 --> 00:03:25,400
terrible experience and then v2 is

00:03:22,940 --> 00:03:27,350
usually not too far around the corner

00:03:25,400 --> 00:03:30,230
and then usually v2 since there's been

00:03:27,350 --> 00:03:31,670
such a hurry to fix v1 v2 also gets

00:03:30,230 --> 00:03:35,239
rushed and we're going to talk about

00:03:31,670 --> 00:03:37,489
that so the best design is the simplest

00:03:35,239 --> 00:03:40,970
one that works and that's kind of the

00:03:37,489 --> 00:03:44,090
idea behind API design so you want a

00:03:40,970 --> 00:03:45,980
design for simplicity but whatever is

00:03:44,090 --> 00:03:49,040
going to work for you so you want the

00:03:45,980 --> 00:03:50,989
the shortest path with but also the most

00:03:49,040 --> 00:03:55,880
well thought out path and it's very

00:03:50,989 --> 00:03:59,030
difficult to do so slow down don't rush

00:03:55,880 --> 00:04:00,200
into v1 make sure your you're meeting

00:03:59,030 --> 00:04:02,540
your goals you really need to put a lot

00:04:00,200 --> 00:04:05,450
of time into designing your API so that

00:04:02,540 --> 00:04:06,830
people you know they they will be able

00:04:05,450 --> 00:04:08,570
to interact with your service in a way

00:04:06,830 --> 00:04:09,709
that they expect so there are a lot of

00:04:08,570 --> 00:04:12,860
people that are putting out completely

00:04:09,709 --> 00:04:14,180
useless ap is based on things that they

00:04:12,860 --> 00:04:16,130
think are useful and they're not

00:04:14,180 --> 00:04:17,540
actually talking to the people who are

00:04:16,130 --> 00:04:18,859
going to be consuming the service to

00:04:17,540 --> 00:04:21,079
find out what they want in the first

00:04:18,859 --> 00:04:23,150
place on so I always advise people to

00:04:21,079 --> 00:04:24,710
involve engineers from the start they're

00:04:23,150 --> 00:04:28,160
usually pretty judgmental and will tell

00:04:24,710 --> 00:04:30,780
you that your your crap sucks

00:04:28,160 --> 00:04:33,120
like I said this is very hard to do

00:04:30,780 --> 00:04:34,590
there are a lot of people who don't like

00:04:33,120 --> 00:04:37,650
hearing that something that they've

00:04:34,590 --> 00:04:39,030
designed is crap so they hesitate to

00:04:37,650 --> 00:04:41,010
share it with people even though that's

00:04:39,030 --> 00:04:46,920
that's the most valuable thing that you

00:04:41,010 --> 00:04:49,290
can do so just to put some context for a

00:04:46,920 --> 00:04:51,180
that I'm going to show it's part of a

00:04:49,290 --> 00:04:54,090
DNS BL project that's why I make

00:04:51,180 --> 00:04:57,900
references to api's and reports things

00:04:54,090 --> 00:04:59,970
like that not super interesting so

00:04:57,900 --> 00:05:01,950
you're this is part of the design

00:04:59,970 --> 00:05:04,950
process and people think all you know we

00:05:01,950 --> 00:05:07,380
need to do this all in a Google Doc

00:05:04,950 --> 00:05:09,510
course like some huge thing really like

00:05:07,380 --> 00:05:12,720
I just wrote crap down in a notebook and

00:05:09,510 --> 00:05:14,880
it works pretty well so it's this is

00:05:12,720 --> 00:05:17,250
designed to be a blueprint between you

00:05:14,880 --> 00:05:21,210
and you know your engineering team or

00:05:17,250 --> 00:05:23,010
your users it's immutable you know the

00:05:21,210 --> 00:05:24,420
worst feedback like I said the worst

00:05:23,010 --> 00:05:25,710
feedback is the feedback you don't hear

00:05:24,420 --> 00:05:27,000
like you really do need to share this

00:05:25,710 --> 00:05:28,530
even if it's just scribbling in a

00:05:27,000 --> 00:05:30,390
notebook like I'm not afraid to show

00:05:28,530 --> 00:05:32,970
this to people and say hey you know does

00:05:30,390 --> 00:05:35,190
this meet your needs and nine times out

00:05:32,970 --> 00:05:36,660
of ten people are like actually no that

00:05:35,190 --> 00:05:38,310
really doesn't want you try adding

00:05:36,660 --> 00:05:40,080
something like this and then you know

00:05:38,310 --> 00:05:41,820
you just iterate over this design before

00:05:40,080 --> 00:05:44,280
you actually even get to building

00:05:41,820 --> 00:05:46,230
anything and you'd be amazed at how many

00:05:44,280 --> 00:05:47,850
people don't actually do this step they

00:05:46,230 --> 00:05:49,020
just start hacking on something they get

00:05:47,850 --> 00:05:56,310
really excited about it and then they

00:05:49,020 --> 00:05:58,530
just release crap into the wild really

00:05:56,310 --> 00:06:00,990
important to know your audience you know

00:05:58,530 --> 00:06:03,660
know who you're making this for whether

00:06:00,990 --> 00:06:04,860
it's an internal stakeholder or you know

00:06:03,660 --> 00:06:06,360
third parties if you have

00:06:04,860 --> 00:06:07,890
platform-as-a-service it's really

00:06:06,360 --> 00:06:08,940
important that you know you talk to the

00:06:07,890 --> 00:06:10,530
people who are going to be building on

00:06:08,940 --> 00:06:13,290
top of your platform to really get them

00:06:10,530 --> 00:06:15,990
immersed into this you know they need to

00:06:13,290 --> 00:06:18,390
have an incentive to use it so a lot of

00:06:15,990 --> 00:06:20,430
people who don't make an API for people

00:06:18,390 --> 00:06:21,720
to use you know they they have some

00:06:20,430 --> 00:06:23,880
scaling issues because people are

00:06:21,720 --> 00:06:25,590
perpetually crawling their website to

00:06:23,880 --> 00:06:27,780
get the data that they need and parsing

00:06:25,590 --> 00:06:29,760
HTML and it's it's a terrible experience

00:06:27,780 --> 00:06:31,410
for them it's a terrible experience for

00:06:29,760 --> 00:06:34,500
you if you have to deal with that

00:06:31,410 --> 00:06:37,169
traffic so there needs to be some sort

00:06:34,500 --> 00:06:39,330
of incentive and the only real way to

00:06:37,169 --> 00:06:40,740
find out what is going to provide value

00:06:39,330 --> 00:06:41,819
to these people is to actual

00:06:40,740 --> 00:06:43,680
talk to them so I can't stress that

00:06:41,819 --> 00:06:50,099
enough you need to be talking to these

00:06:43,680 --> 00:06:51,720
people um ask you know ask what people

00:06:50,099 --> 00:06:54,060
are going to need it's sort of like old

00:06:51,720 --> 00:06:55,830
schools software architecture where you

00:06:54,060 --> 00:06:57,090
get everybody in a room you get a bunch

00:06:55,830 --> 00:07:00,360
of stakeholders together and you're like

00:06:57,090 --> 00:07:02,220
okay what do you need from me and you

00:07:00,360 --> 00:07:03,990
know the process like I'm not going to

00:07:02,220 --> 00:07:05,370
lie to you it sucks it sucks to bring

00:07:03,990 --> 00:07:08,940
everybody into room and be like okay

00:07:05,370 --> 00:07:10,770
well what do you need from me and you

00:07:08,940 --> 00:07:12,509
know usually I call them rage domes

00:07:10,770 --> 00:07:14,069
because it's usually a bunch of people

00:07:12,509 --> 00:07:16,319
that get in a room and get like very

00:07:14,069 --> 00:07:18,030
heated about this sort of thing about

00:07:16,319 --> 00:07:22,319
what they need versus you know what

00:07:18,030 --> 00:07:23,460
marketing can sell so there are a whole

00:07:22,319 --> 00:07:25,110
bunch of tools that'll help you do this

00:07:23,460 --> 00:07:27,210
like I said you can write this down on

00:07:25,110 --> 00:07:29,099
paper if you want to get a little bit

00:07:27,210 --> 00:07:32,130
more complicated there are tools like

00:07:29,099 --> 00:07:34,500
apiary swagger and ramble better either

00:07:32,130 --> 00:07:36,060
markdown based or yellow base that'll

00:07:34,500 --> 00:07:37,740
allow you to really blue print this out

00:07:36,060 --> 00:07:40,500
and that lends itself to using tools

00:07:37,740 --> 00:07:43,949
that will kind of automatically either

00:07:40,500 --> 00:07:46,710
generate SDKs for you or allow you to

00:07:43,949 --> 00:07:48,539
have like an interactive experience so

00:07:46,710 --> 00:07:50,039
they set up like a dummy endpoint for

00:07:48,539 --> 00:07:52,409
you so that you can test these things

00:07:50,039 --> 00:07:54,630
which is actually really cool and I

00:07:52,409 --> 00:07:55,979
highly recommend that people go that

00:07:54,630 --> 00:07:57,659
route after you've done your you're

00:07:55,979 --> 00:07:59,639
scribbling in your notebook because it

00:07:57,659 --> 00:08:02,520
makes it super easy for you to hand

00:07:59,639 --> 00:08:04,440
someone a link to like an apiary thing

00:08:02,520 --> 00:08:09,300
and be like hey go test this out see if

00:08:04,440 --> 00:08:11,069
this is what you're looking for so what

00:08:09,300 --> 00:08:12,419
is rest that's the thing that we're

00:08:11,069 --> 00:08:15,180
actually going to be talking about today

00:08:12,419 --> 00:08:17,630
it's represents representational state

00:08:15,180 --> 00:08:19,889
transfer so like I said usually

00:08:17,630 --> 00:08:22,080
http-based doesn't necessarily have to

00:08:19,889 --> 00:08:25,639
be rest as more of a methodology for

00:08:22,080 --> 00:08:29,130
navigating things and not necessarily a

00:08:25,639 --> 00:08:30,900
protocol specific and it's stateless so

00:08:29,130 --> 00:08:33,479
there are no sessions whereas with soap

00:08:30,900 --> 00:08:37,380
there can be and the server is storing a

00:08:33,479 --> 00:08:39,839
lot of that session data so that and

00:08:37,380 --> 00:08:42,690
that's a lot of people really don't like

00:08:39,839 --> 00:08:44,399
that facet of it for some reason but

00:08:42,690 --> 00:08:45,990
it's actually really one of the benefits

00:08:44,399 --> 00:08:47,310
because the server doesn't have to do a

00:08:45,990 --> 00:08:48,959
whole bunch of processing to figure out

00:08:47,310 --> 00:08:52,130
the state it's kind of a cheese your own

00:08:48,959 --> 00:08:56,090
adventure sort of system

00:08:52,130 --> 00:08:57,410
so just to recap resources pretty pretty

00:08:56,090 --> 00:08:59,060
simple it's a gateway to an area of the

00:08:57,410 --> 00:09:00,890
application it's an end point to

00:08:59,060 --> 00:09:02,630
something so cred actions can be

00:09:00,890 --> 00:09:06,190
performed so you can create things

00:09:02,630 --> 00:09:08,390
delete things update things whatever

00:09:06,190 --> 00:09:13,400
won't get too far into that I assume

00:09:08,390 --> 00:09:15,470
most of you know so now we get into

00:09:13,400 --> 00:09:16,820
action verbs and this is where this is

00:09:15,470 --> 00:09:19,580
another area where things start to fall

00:09:16,820 --> 00:09:22,100
apart is that people make assumptions

00:09:19,580 --> 00:09:24,800
about these action verbs you know put

00:09:22,100 --> 00:09:27,320
and posts and things they they kind of

00:09:24,800 --> 00:09:28,580
shouldn't and they're really obvious

00:09:27,320 --> 00:09:30,860
once you hear about them but as you're

00:09:28,580 --> 00:09:33,520
designing an API it's it's kind of

00:09:30,860 --> 00:09:35,930
incredible to me how many people don't

00:09:33,520 --> 00:09:37,190
take this into consideration they don't

00:09:35,930 --> 00:09:42,230
do their research for these sorts of

00:09:37,190 --> 00:09:44,420
things so getting data obviously gets

00:09:42,230 --> 00:09:45,890
data from a resource you do this daily

00:09:44,420 --> 00:09:47,840
by browsing the web if you're not

00:09:45,890 --> 00:09:50,600
familiar that is they get requests to

00:09:47,840 --> 00:09:52,370
fetch that website for you uses query

00:09:50,600 --> 00:09:55,460
strings to tell the API what to retrieve

00:09:52,370 --> 00:09:58,040
returns 200 if everything's okay and

00:09:55,460 --> 00:10:02,300
I'll get back to that in a second posts

00:09:58,040 --> 00:10:04,640
obviously use to post data and people

00:10:02,300 --> 00:10:06,380
forget that 201 created is actually a

00:10:04,640 --> 00:10:08,180
thing I can't tell you how many api's

00:10:06,380 --> 00:10:10,490
I've seen that actually return 200

00:10:08,180 --> 00:10:13,880
everything's okay or 20 for you know no

00:10:10,490 --> 00:10:16,100
body for creating something and that's

00:10:13,880 --> 00:10:18,200
that's really bad and actually not all

00:10:16,100 --> 00:10:21,830
that useful to someone who's trying to

00:10:18,200 --> 00:10:23,900
consume your API like a large majority

00:10:21,830 --> 00:10:27,260
of people forget about this for some

00:10:23,900 --> 00:10:29,570
reason so HTTP codes they're kind of an

00:10:27,260 --> 00:10:32,120
awesome thing and you should really be

00:10:29,570 --> 00:10:34,370
looking at them all so people forget to

00:10:32,120 --> 00:10:36,410
leave the forget to return the URI to

00:10:34,370 --> 00:10:38,000
the thing that they created so people

00:10:36,410 --> 00:10:40,010
end up having to do more calls in order

00:10:38,000 --> 00:10:41,720
to figure out what the ID of the thing

00:10:40,010 --> 00:10:43,220
that they just created is and it's it's

00:10:41,720 --> 00:10:48,080
a really terrible experience for them

00:10:43,220 --> 00:10:51,050
right um put same sort of deal people

00:10:48,080 --> 00:10:52,730
confuse put and patch which will get the

00:10:51,050 --> 00:10:54,440
patch in a second put actually over

00:10:52,730 --> 00:10:57,950
rights the existing object with a new

00:10:54,440 --> 00:10:59,840
one and should return to a one people if

00:10:57,950 --> 00:11:02,060
you you do this right lots of people

00:10:59,840 --> 00:11:05,370
return two hundred or nothing at all

00:11:02,060 --> 00:11:08,850
after after a put request

00:11:05,370 --> 00:11:12,330
you you don't necessarily have to allow

00:11:08,850 --> 00:11:13,980
it to overwrite the object you can say

00:11:12,330 --> 00:11:16,050
no we're not going to lie it over right

00:11:13,980 --> 00:11:19,470
that like you need to be using patch to

00:11:16,050 --> 00:11:20,880
do that then kind of sucks because it's

00:11:19,470 --> 00:11:22,800
inconsistent people do different things

00:11:20,880 --> 00:11:27,839
so it's not a standardized behavior

00:11:22,800 --> 00:11:29,670
across AP is there are people that are

00:11:27,839 --> 00:11:34,320
working to change that unfortunately

00:11:29,670 --> 00:11:36,270
it's not happening quick enough patch

00:11:34,320 --> 00:11:40,589
update some of the properties provided

00:11:36,270 --> 00:11:42,089
in the call people again like 200 on

00:11:40,589 --> 00:11:44,490
successful update that's pretty common

00:11:42,089 --> 00:11:46,140
but people will 200 if nothing has

00:11:44,490 --> 00:11:47,760
changed so you don't actually know the

00:11:46,140 --> 00:11:50,640
state and the whole the whole point of

00:11:47,760 --> 00:11:52,230
rest is so that the server is not

00:11:50,640 --> 00:11:53,550
keeping track of state you're keeping

00:11:52,230 --> 00:11:55,350
track of state so how are you going to

00:11:53,550 --> 00:11:57,210
keep track of state of things if you

00:11:55,350 --> 00:12:01,040
don't actually get information about

00:11:57,210 --> 00:12:04,410
what the state of that is lots of people

00:12:01,040 --> 00:12:07,920
not doing this for some reason unknown

00:12:04,410 --> 00:12:10,589
to me delete this one is pretty

00:12:07,920 --> 00:12:12,540
dangerous people actually allow you to

00:12:10,589 --> 00:12:15,510
delete an entire collection of thing so

00:12:12,540 --> 00:12:19,170
you you can realistically delete all of

00:12:15,510 --> 00:12:21,000
your users and people don't they don't

00:12:19,170 --> 00:12:23,550
cover that for some reason they just

00:12:21,000 --> 00:12:28,230
okay you know delete whatever you want

00:12:23,550 --> 00:12:31,260
so that's really dangerous HTTP codes

00:12:28,230 --> 00:12:33,240
200 if it was deleted to a 4 if there's

00:12:31,260 --> 00:12:36,029
no body to return which is pretty

00:12:33,240 --> 00:12:39,270
standard people do tend to return to a 4

00:12:36,029 --> 00:12:41,100
if something was deleted and four cases

00:12:39,270 --> 00:12:43,560
of CDNs you can return to a 2 if the

00:12:41,100 --> 00:12:45,240
cache is going to be deleted after a

00:12:43,560 --> 00:12:49,279
certain period of time or whatever so

00:12:45,240 --> 00:12:52,950
you can queue it is there a question ok

00:12:49,279 --> 00:12:55,140
and this is one that I don't see an

00:12:52,950 --> 00:12:56,540
awful lot on the options header so it's

00:12:55,140 --> 00:12:59,880
not for interacting with data it's

00:12:56,540 --> 00:13:02,190
purely informational it allows you to

00:12:59,880 --> 00:13:04,890
tell your users what methods they can

00:13:02,190 --> 00:13:06,600
perform super helpful if you're trying

00:13:04,890 --> 00:13:11,040
to keep track of the state of something

00:13:06,600 --> 00:13:14,640
so you know you can set this up so that

00:13:11,040 --> 00:13:17,640
you certain resources only have certain

00:13:14,640 --> 00:13:19,250
methods and that's that's an ideal way

00:13:17,640 --> 00:13:21,140
but a lot of people

00:13:19,250 --> 00:13:23,030
they just don't return this at all or

00:13:21,140 --> 00:13:24,890
they return four or five method not

00:13:23,030 --> 00:13:26,480
allowed which like if you're you're

00:13:24,890 --> 00:13:28,880
going to the effort of responding to

00:13:26,480 --> 00:13:34,280
that you you may as well just allow

00:13:28,880 --> 00:13:36,320
options so content types the thing that

00:13:34,280 --> 00:13:39,320
sucks is been using API and it doesn't

00:13:36,320 --> 00:13:41,390
return what you want so lots of people

00:13:39,320 --> 00:13:43,130
are using JSON some people need XML I

00:13:41,390 --> 00:13:46,700
actually had a guy email me because

00:13:43,130 --> 00:13:49,510
Pedro duties API is only Jason and we

00:13:46,700 --> 00:13:52,280
don't send XML he was trying to use the

00:13:49,510 --> 00:13:54,710
page duty API to send alerts from a

00:13:52,280 --> 00:13:57,260
cisco router which speaks XML natively

00:13:54,710 --> 00:13:59,990
so he's gonna have to do some hackery to

00:13:57,260 --> 00:14:02,390
get the json into XML in order to

00:13:59,990 --> 00:14:05,870
basically use our API to be useful for

00:14:02,390 --> 00:14:08,420
him which sucks I mean he was actually

00:14:05,870 --> 00:14:10,940
kind of mad and I don't really blame him

00:14:08,420 --> 00:14:13,640
so that's something that I feel bad

00:14:10,940 --> 00:14:17,600
about for our API because it is bad for

00:14:13,640 --> 00:14:19,040
him a few if you only allow one type and

00:14:17,600 --> 00:14:21,830
form people that others aren't allowed

00:14:19,040 --> 00:14:23,120
there are api's that don't do this and

00:14:21,830 --> 00:14:24,560
you don't they have terrible

00:14:23,120 --> 00:14:29,990
documentation so you don't actually know

00:14:24,560 --> 00:14:32,540
what they accept not all that useful you

00:14:29,990 --> 00:14:34,250
can use content type to receive in parse

00:14:32,540 --> 00:14:36,230
client data you can get a little crazy

00:14:34,250 --> 00:14:38,150
with this so you can have people send

00:14:36,230 --> 00:14:40,490
you XML and receive JSON which is cool

00:14:38,150 --> 00:14:42,530
um you're just getting started I don't

00:14:40,490 --> 00:14:44,360
recommend that you do that because it's

00:14:42,530 --> 00:14:48,100
kind of an architectural nightmare if

00:14:44,360 --> 00:14:48,100
you don't really know what you're doing

00:14:49,420 --> 00:14:55,430
for replying um this is probably one of

00:14:53,750 --> 00:14:58,910
those things that pisses me off the most

00:14:55,430 --> 00:15:02,360
is people who either just send HTTP

00:14:58,910 --> 00:15:05,990
codes and expect you to guess what the

00:15:02,360 --> 00:15:07,670
problem is if it's not 200 ok and they

00:15:05,990 --> 00:15:09,410
don't send any sort of error message

00:15:07,670 --> 00:15:11,870
with it and that that to me is one of

00:15:09,410 --> 00:15:15,560
the absolute worst things that you can

00:15:11,870 --> 00:15:18,200
do or not do as it were so I tell people

00:15:15,560 --> 00:15:19,700
like okay if if you're going to send 403

00:15:18,200 --> 00:15:22,370
forbidden you know at least tell them

00:15:19,700 --> 00:15:24,830
why that request didn't work you know

00:15:22,370 --> 00:15:26,210
give them something even even if you

00:15:24,830 --> 00:15:28,820
don't want to be specific about the API

00:15:26,210 --> 00:15:32,150
key you know your your user doesn't have

00:15:28,820 --> 00:15:33,020
access to this something other than just

00:15:32,150 --> 00:15:37,070
an HT

00:15:33,020 --> 00:15:39,230
decode um and it's great because you

00:15:37,070 --> 00:15:41,870
know then the API client can decide hey

00:15:39,230 --> 00:15:43,610
well I got this I got this error which

00:15:41,870 --> 00:15:45,980
was well documented why don't I try

00:15:43,610 --> 00:15:47,690
doing something else instead and you can

00:15:45,980 --> 00:15:51,740
really let the client make those

00:15:47,690 --> 00:15:53,030
judgment calls the the crappy part is

00:15:51,740 --> 00:15:55,160
that there's no standardization for

00:15:53,030 --> 00:15:57,620
error messages so you can make these up

00:15:55,160 --> 00:16:00,770
make them as great or as terrible as you

00:15:57,620 --> 00:16:04,310
want them to be so Google errors in JSON

00:16:00,770 --> 00:16:06,950
API they're trying um adoption has been

00:16:04,310 --> 00:16:08,090
kind of wishy-washy but if you're you're

00:16:06,950 --> 00:16:09,530
going to get into making an API that's

00:16:08,090 --> 00:16:12,560
definitely something to take a look at

00:16:09,530 --> 00:16:15,050
because they're really trying to push

00:16:12,560 --> 00:16:16,820
people to provide error messages that

00:16:15,050 --> 00:16:20,900
are consistent across different

00:16:16,820 --> 00:16:22,550
experiences Haiti us and there's some

00:16:20,900 --> 00:16:24,410
arguments as to how this is actually

00:16:22,550 --> 00:16:26,120
pronounced doesn't matter it's

00:16:24,410 --> 00:16:29,000
hypermedia as the engine of application

00:16:26,120 --> 00:16:30,740
state so like I was saying rest is

00:16:29,000 --> 00:16:32,570
stateless so it's up to the API client

00:16:30,740 --> 00:16:35,750
to decide you know what the state of

00:16:32,570 --> 00:16:37,430
things is and it's choose your own

00:16:35,750 --> 00:16:38,840
adventure for navigation so you can

00:16:37,430 --> 00:16:41,960
provide the client with a list of

00:16:38,840 --> 00:16:45,950
endpoints that they can hit so if you

00:16:41,960 --> 00:16:47,300
know if you have like a an IP object and

00:16:45,950 --> 00:16:49,430
you're trying to manipulate that you

00:16:47,300 --> 00:16:53,030
know you might provide them with update

00:16:49,430 --> 00:16:55,190
this entry or delete this entry or you

00:16:53,030 --> 00:16:56,720
know make a new entry if you want and

00:16:55,190 --> 00:16:59,930
kind of you can let the API client

00:16:56,720 --> 00:17:01,490
really navigate that so that you know

00:16:59,930 --> 00:17:04,940
they're not forced to hard code things

00:17:01,490 --> 00:17:07,070
within the SDK they're going to do it

00:17:04,940 --> 00:17:09,980
anyway people like the hard code things

00:17:07,070 --> 00:17:11,750
so you can't really prevent that from

00:17:09,980 --> 00:17:13,760
happening but you can at least provide

00:17:11,750 --> 00:17:21,140
them an alternative that is hopefully a

00:17:13,760 --> 00:17:23,240
little bit better for them so downside

00:17:21,140 --> 00:17:24,920
there are no hypermedia specs there are

00:17:23,240 --> 00:17:27,220
people who are trying but again there's

00:17:24,920 --> 00:17:30,380
no no consistent way to handle this

00:17:27,220 --> 00:17:33,260
people can kind of make up their own URL

00:17:30,380 --> 00:17:35,330
structure I've seen people you know

00:17:33,260 --> 00:17:37,910
insert like random gibberish into the

00:17:35,330 --> 00:17:38,960
URL because it's obscure and you know

00:17:37,910 --> 00:17:42,710
that's how they're hiding their

00:17:38,960 --> 00:17:45,350
endpoints and it's just bad it's it's

00:17:42,710 --> 00:17:48,500
all kinds of sad

00:17:45,350 --> 00:17:51,679
so you can use a JSON API you can make

00:17:48,500 --> 00:17:53,390
up your own like I said how they're good

00:17:51,679 --> 00:17:55,100
starting points Holland Jason API are

00:17:53,390 --> 00:17:58,700
good starting points for or at least

00:17:55,100 --> 00:18:00,950
trying to get some standardization so if

00:17:58,700 --> 00:18:03,260
you're you're looking to dabble in

00:18:00,950 --> 00:18:05,900
hypermedia you don't necessarily have to

00:18:03,260 --> 00:18:07,039
do this with rest you can be looking to

00:18:05,900 --> 00:18:10,820
dabble those are those are definitely

00:18:07,039 --> 00:18:13,390
good places to start and now the thing

00:18:10,820 --> 00:18:18,919
that everybody hates about API is

00:18:13,390 --> 00:18:21,470
versioning and yeah so I see a lot of

00:18:18,919 --> 00:18:23,750
people cowboy through this so they they

00:18:21,470 --> 00:18:25,730
released V 1 and V 1 is just terrible

00:18:23,750 --> 00:18:28,250
it's the biggest pile of crap they get

00:18:25,730 --> 00:18:29,809
all this negative feedback and they're

00:18:28,250 --> 00:18:30,919
like okay well we're just going to

00:18:29,809 --> 00:18:32,419
iterate on this and we're going to

00:18:30,919 --> 00:18:34,970
release as many versions of this as

00:18:32,419 --> 00:18:36,470
possible well that's great and it's nice

00:18:34,970 --> 00:18:38,659
that people want to provide for their

00:18:36,470 --> 00:18:40,159
users but ultimately you're stuck

00:18:38,659 --> 00:18:42,530
maintaining all of those because people

00:18:40,159 --> 00:18:44,570
rely on this you know a version of an

00:18:42,530 --> 00:18:47,659
API is a contract between you and your

00:18:44,570 --> 00:18:49,070
users so you know you really you don't

00:18:47,659 --> 00:18:50,960
want to have a ton of different API

00:18:49,070 --> 00:18:52,190
versions for them to get confused about

00:18:50,960 --> 00:18:55,159
and especially like trying to document

00:18:52,190 --> 00:18:58,730
that is just ridiculous like you're

00:18:55,159 --> 00:19:01,640
you're going to sink and yeah having to

00:18:58,730 --> 00:19:03,760
maintain all the SDKs and you know the

00:19:01,640 --> 00:19:06,289
documentation for that is just it's hard

00:19:03,760 --> 00:19:07,940
and you should always deprecated

00:19:06,289 --> 00:19:09,530
carefully so once it's out there it's

00:19:07,940 --> 00:19:12,830
out there you know you can't take it

00:19:09,530 --> 00:19:14,330
back so you really need to give people

00:19:12,830 --> 00:19:15,380
time like if you're going to cowboy

00:19:14,330 --> 00:19:17,539
through release or even if you're just

00:19:15,380 --> 00:19:19,580
releasing v2 and it's like the the great

00:19:17,539 --> 00:19:22,010
the latest and greatest thing and angels

00:19:19,580 --> 00:19:24,799
cry tears of joy at v2 of your API you

00:19:22,010 --> 00:19:27,650
can't just get rid of v1 v1 is going to

00:19:24,799 --> 00:19:28,820
be around for a while developers like if

00:19:27,650 --> 00:19:32,090
it's working they're not going to touch

00:19:28,820 --> 00:19:33,260
it it's yeah so you know you're not

00:19:32,090 --> 00:19:35,809
going to get them to move off of your

00:19:33,260 --> 00:19:39,559
API without some sort of incentive to do

00:19:35,809 --> 00:19:42,350
so and you know often times v2 is better

00:19:39,559 --> 00:19:47,360
is not good enough for these people you

00:19:42,350 --> 00:19:49,700
know they don't want to hear it so when

00:19:47,360 --> 00:19:51,260
diversion backwards and compatible

00:19:49,700 --> 00:19:53,470
changes and people get confused about

00:19:51,260 --> 00:19:56,630
this you don't need to version your API

00:19:53,470 --> 00:19:58,950
if you add new resources or data fields

00:19:56,630 --> 00:20:01,200
in theory the SDK

00:19:58,950 --> 00:20:03,390
would be able to handle that or people

00:20:01,200 --> 00:20:05,610
should be designing their communication

00:20:03,390 --> 00:20:07,350
methods with your API in a way that it

00:20:05,610 --> 00:20:11,460
doesn't barf if you do something like

00:20:07,350 --> 00:20:12,990
this people tend to you know bump the

00:20:11,460 --> 00:20:14,850
version of their API even if it's like a

00:20:12,990 --> 00:20:16,410
minor revision when they add new

00:20:14,850 --> 00:20:20,130
resources and you don't necessarily have

00:20:16,410 --> 00:20:22,770
to do that like I said architect things

00:20:20,130 --> 00:20:23,700
so that you don't necessarily care you

00:20:22,770 --> 00:20:25,200
don't care about the order the

00:20:23,700 --> 00:20:27,840
parameters so if you're getting if

00:20:25,200 --> 00:20:29,250
you're getting data back from the API

00:20:27,840 --> 00:20:32,040
that you don't know what to do with just

00:20:29,250 --> 00:20:36,210
you can ignore it that's one of the one

00:20:32,040 --> 00:20:39,150
of the really great things um so there

00:20:36,210 --> 00:20:41,520
are few ways that people do this putting

00:20:39,150 --> 00:20:43,770
it in the URL is super common it's great

00:20:41,520 --> 00:20:45,630
for people who are just getting into

00:20:43,770 --> 00:20:48,870
consuming api's because it's very

00:20:45,630 --> 00:20:50,910
obvious what version they're using the

00:20:48,870 --> 00:20:52,350
downside is that your relative paths can

00:20:50,910 --> 00:20:53,640
get kind of screwed up and especially if

00:20:52,350 --> 00:20:55,500
you've got different versions of the API

00:20:53,640 --> 00:20:58,020
and people are trying to consume both at

00:20:55,500 --> 00:21:04,110
the same time like it it doesn't work at

00:20:58,020 --> 00:21:06,810
all and this is my favorite putting the

00:21:04,110 --> 00:21:09,690
version in the content type it's cleaner

00:21:06,810 --> 00:21:11,280
it's not as obvious and I like it

00:21:09,690 --> 00:21:12,750
because you can default to version if

00:21:11,280 --> 00:21:15,930
none is specified you know there's

00:21:12,750 --> 00:21:18,630
nothing you don't need to edit a URL you

00:21:15,930 --> 00:21:20,730
know they it can be mostly invisible to

00:21:18,630 --> 00:21:23,790
people who don't necessarily know what

00:21:20,730 --> 00:21:25,800
they're doing so it's kind of in a way

00:21:23,790 --> 00:21:27,540
it's beginner friendly but also cool for

00:21:25,800 --> 00:21:30,570
people who know who have experience with

00:21:27,540 --> 00:21:32,130
things like this the crappy part is that

00:21:30,570 --> 00:21:33,930
devs need to know that they need to send

00:21:32,130 --> 00:21:36,270
this and it's one of those things that's

00:21:33,930 --> 00:21:37,950
missing from a large percentage of

00:21:36,270 --> 00:21:39,360
documentation that I see people are just

00:21:37,950 --> 00:21:40,620
like oh well you know don't worry about

00:21:39,360 --> 00:21:42,780
it because we're going to default to

00:21:40,620 --> 00:21:44,520
version but just cuz you're defaulting

00:21:42,780 --> 00:21:46,350
to a version doesn't mean you can't

00:21:44,520 --> 00:21:51,960
document it that's not how the world

00:21:46,350 --> 00:21:55,460
works and this one I I really kind of

00:21:51,960 --> 00:21:57,810
loathe this so there's minimal

00:21:55,460 --> 00:21:59,730
standardization around this so people

00:21:57,810 --> 00:22:02,940
create their own custom header with the

00:21:59,730 --> 00:22:06,780
version in it and it's like that's not

00:22:02,940 --> 00:22:08,430
consistent at all across AP is so people

00:22:06,780 --> 00:22:11,310
have called it version people call it my

00:22:08,430 --> 00:22:11,970
app I've seen like random words like

00:22:11,310 --> 00:22:15,630
kitten

00:22:11,970 --> 00:22:18,060
for for an API which doesn't I mean

00:22:15,630 --> 00:22:20,370
that's that's useless so it requires

00:22:18,060 --> 00:22:23,220
great documentation and unfortunately

00:22:20,370 --> 00:22:24,900
most api's have terrible documentation

00:22:23,220 --> 00:22:27,540
you know there's not a whole lot of

00:22:24,900 --> 00:22:29,700
examples of great API documentation out

00:22:27,540 --> 00:22:31,740
there and it's confusing to users who

00:22:29,700 --> 00:22:33,300
aren't expecting it you know my my first

00:22:31,740 --> 00:22:34,890
thought when i'm looking to consume

00:22:33,300 --> 00:22:37,290
something is not oh well you know what

00:22:34,890 --> 00:22:40,730
crazy custom version header do i need to

00:22:37,290 --> 00:22:43,110
send in order to get this to work and

00:22:40,730 --> 00:22:44,340
usually the examples that I've seen

00:22:43,110 --> 00:22:45,660
people don't default to a specific

00:22:44,340 --> 00:22:47,550
versions like if you don't send that

00:22:45,660 --> 00:22:49,490
header you're not going to get your you

00:22:47,550 --> 00:22:55,370
don't get be to you just get nothing

00:22:49,490 --> 00:22:57,900
which is also a terrible experience also

00:22:55,370 --> 00:23:00,120
everyone's favorite next to versioning

00:22:57,900 --> 00:23:01,890
so caching a lot of people leave this

00:23:00,120 --> 00:23:03,720
out of their SDKs for some reason it's

00:23:01,890 --> 00:23:05,970
one of the great things is that if

00:23:03,720 --> 00:23:08,340
you're if you're making calls that

00:23:05,970 --> 00:23:12,270
really aren't necessarily changing a

00:23:08,340 --> 00:23:14,220
whole lot cash it on the client end you

00:23:12,270 --> 00:23:16,950
know make that available there's a cache

00:23:14,220 --> 00:23:20,550
control header and it you know it'll

00:23:16,950 --> 00:23:22,470
save you some scaling pains as people

00:23:20,550 --> 00:23:24,750
try to get data you know they're not

00:23:22,470 --> 00:23:27,300
necessarily hating your API if the data

00:23:24,750 --> 00:23:29,640
that they have really hasn't changed and

00:23:27,300 --> 00:23:31,320
is readily available to them really

00:23:29,640 --> 00:23:34,500
super important that this end up in the

00:23:31,320 --> 00:23:36,540
documentation there are a few cases that

00:23:34,500 --> 00:23:39,000
i have seen where people they just they

00:23:36,540 --> 00:23:40,350
they have it in their sdk but they leave

00:23:39,000 --> 00:23:42,660
it out of their documentation for

00:23:40,350 --> 00:23:45,810
whatever reason and people they kind of

00:23:42,660 --> 00:23:50,280
roll their own solutions for caching

00:23:45,810 --> 00:23:52,920
which which really kind of sucks and

00:23:50,280 --> 00:23:56,760
this is probably the worst part of every

00:23:52,920 --> 00:23:59,130
API dealing with authentication and I I

00:23:56,760 --> 00:24:00,540
really have a thing against basic auth

00:23:59,130 --> 00:24:03,090
because I've seen a lot of people get

00:24:00,540 --> 00:24:05,970
bitten by their credentials either being

00:24:03,090 --> 00:24:07,890
stored in a browser or you know being in

00:24:05,970 --> 00:24:10,980
their bash history or something you know

00:24:07,890 --> 00:24:14,430
there are so many ways that that just

00:24:10,980 --> 00:24:16,650
can bite you in the ass so bad um so

00:24:14,430 --> 00:24:19,020
these days I tend to recommend that

00:24:16,650 --> 00:24:22,320
people use like Oh author or something

00:24:19,020 --> 00:24:24,600
like that so requiring users to

00:24:22,320 --> 00:24:25,380
explicitly authorize the application so

00:24:24,600 --> 00:24:27,240
that they're aware

00:24:25,380 --> 00:24:32,550
of you know what they do and do not have

00:24:27,240 --> 00:24:35,730
access to how they are going to be are

00:24:32,550 --> 00:24:39,510
going to allow interaction between

00:24:35,730 --> 00:24:40,980
whatever app and the API I can't stress

00:24:39,510 --> 00:24:43,320
enough you need to restrict this to

00:24:40,980 --> 00:24:45,960
https even if you're going to use basic

00:24:43,320 --> 00:24:50,040
off like absolutely https but oh ah

00:24:45,960 --> 00:24:51,540
actually requires it I i like to

00:24:50,040 --> 00:24:53,520
restrict the domains that are allowed to

00:24:51,540 --> 00:24:56,880
authenticate as well so you know people

00:24:53,520 --> 00:24:58,650
I've seen people who don't necessarily

00:24:56,880 --> 00:25:01,230
know what they're doing they put their

00:24:58,650 --> 00:25:05,300
their tokens or their keys in JavaScript

00:25:01,230 --> 00:25:09,540
and then serve that to somebody so then

00:25:05,300 --> 00:25:12,240
yeah yeah it happens a lot if you go and

00:25:09,540 --> 00:25:14,700
github and search for like twilio keys

00:25:12,240 --> 00:25:17,420
are like linode api keys there are a lot

00:25:14,700 --> 00:25:22,770
of results and it's it's really scary um

00:25:17,420 --> 00:25:25,680
yeah so if you have an API like and it's

00:25:22,770 --> 00:25:28,410
it's public like do yourself a favor and

00:25:25,680 --> 00:25:30,780
like be proactive about finding things

00:25:28,410 --> 00:25:34,850
like that you know look on github for

00:25:30,780 --> 00:25:38,460
four keys for your service and

00:25:34,850 --> 00:25:41,160
deactivate them immediately because I

00:25:38,460 --> 00:25:44,100
mean that that's probably one of the the

00:25:41,160 --> 00:25:46,170
biggest routes of abuse is just people

00:25:44,100 --> 00:25:52,920
committing that crap to github and it

00:25:46,170 --> 00:25:56,550
getting stored in Google forever so

00:25:52,920 --> 00:25:58,950
security up don't rely on a single

00:25:56,550 --> 00:26:01,500
method see a lot of that people like oh

00:25:58,950 --> 00:26:04,440
I got tokens that's fine well no not

00:26:01,500 --> 00:26:06,060
really so I I treat all users as if

00:26:04,440 --> 00:26:10,380
they're hostile and nine times out of

00:26:06,060 --> 00:26:12,150
ten they are so I you know you really

00:26:10,380 --> 00:26:14,490
have to apply layers of security so

00:26:12,150 --> 00:26:17,490
you've got your permission based API

00:26:14,490 --> 00:26:19,590
keys your tokens or whatever i use the

00:26:17,490 --> 00:26:22,710
dns PL as well to prevent people from

00:26:19,590 --> 00:26:26,160
you know using tor to load up a bunch of

00:26:22,710 --> 00:26:28,680
crap i wouldn't rely on a dns PL alone

00:26:26,160 --> 00:26:32,730
there are people who do with mixed

00:26:28,680 --> 00:26:34,410
results I wouldn't another thing that

00:26:32,730 --> 00:26:36,720
people don't necessarily think of is a

00:26:34,410 --> 00:26:39,410
content length and depth limits so they

00:26:36,720 --> 00:26:42,030
get into these recursive JSON

00:26:39,410 --> 00:26:44,010
replies that can basically exhaust the

00:26:42,030 --> 00:26:46,350
resources on your server a lot of people

00:26:44,010 --> 00:26:48,000
don't know to think about that so you

00:26:46,350 --> 00:26:51,150
know you can limit the content length

00:26:48,000 --> 00:26:53,910
that you're being sent and that you're

00:26:51,150 --> 00:26:56,070
sending back and also depth limits so

00:26:53,910 --> 00:26:58,320
people can't do recursive requests like

00:26:56,070 --> 00:27:00,750
that still need to worry about sequel

00:26:58,320 --> 00:27:03,030
injection and I speak to a lot of people

00:27:00,750 --> 00:27:05,160
who don't think that this is an issue

00:27:03,030 --> 00:27:10,830
because it's not a traditional website

00:27:05,160 --> 00:27:13,470
but it kind of is see ya yeah it's it's

00:27:10,830 --> 00:27:14,550
bad so you do still need to be worried

00:27:13,470 --> 00:27:17,490
about that you need to be worried about

00:27:14,550 --> 00:27:18,840
that the typical things as I mean treat

00:27:17,490 --> 00:27:22,620
it as if it was a website that was

00:27:18,840 --> 00:27:25,470
basically just returning plain text and

00:27:22,620 --> 00:27:28,350
also rate-limiting and throttling those

00:27:25,470 --> 00:27:29,520
are generally a good idea there are

00:27:28,350 --> 00:27:31,140
different approaches to that and

00:27:29,520 --> 00:27:33,300
honestly like that could be an entire

00:27:31,140 --> 00:27:36,510
talk on its own so i'm not going to i'm

00:27:33,300 --> 00:27:39,660
not going to dive too far into that um

00:27:36,510 --> 00:27:42,540
so now that you know a little bit about

00:27:39,660 --> 00:27:44,940
what you're doing there are so many ways

00:27:42,540 --> 00:27:46,680
to prototype these things quickly so

00:27:44,940 --> 00:27:50,250
once you've got your design figured out

00:27:46,680 --> 00:27:51,840
and you you know sat down with engineers

00:27:50,250 --> 00:27:53,730
and you've put some thought into this

00:27:51,840 --> 00:27:56,150
you know what what methods you're going

00:27:53,730 --> 00:27:59,850
to allow for different resources um

00:27:56,150 --> 00:28:02,790
prototyping these days is super quick I

00:27:59,850 --> 00:28:04,440
I tend to stick the laravel just because

00:28:02,790 --> 00:28:06,870
I'm a PHP person but there I mean there

00:28:04,440 --> 00:28:09,630
are frameworks for every language that

00:28:06,870 --> 00:28:13,500
have restful HTTP routing makes it super

00:28:09,630 --> 00:28:15,660
easy to get started so I i use laravel

00:28:13,500 --> 00:28:18,900
zeroed api and like an hour worth of

00:28:15,660 --> 00:28:21,060
work I mean it's pretty painless and

00:28:18,900 --> 00:28:22,800
then for like I mentioned earlier

00:28:21,060 --> 00:28:24,990
there's there's different specs and

00:28:22,800 --> 00:28:26,400
things some frameworks allow importing

00:28:24,990 --> 00:28:28,430
of specs there's actually like a mo

00:28:26,400 --> 00:28:31,350
delicious thing that will read apiary

00:28:28,430 --> 00:28:34,470
specs so it's like markdown formatted

00:28:31,350 --> 00:28:39,420
and it'll pretty much spin up an API for

00:28:34,470 --> 00:28:41,280
you yes it's great so and then there are

00:28:39,420 --> 00:28:43,380
also tools that will generate an SDK for

00:28:41,280 --> 00:28:44,520
you so that you don't even have to you

00:28:43,380 --> 00:28:47,190
know spend engineering resources

00:28:44,520 --> 00:28:48,450
generating an SDK for those things I

00:28:47,190 --> 00:28:50,940
mean they're they're kind of hit or miss

00:28:48,450 --> 00:28:52,540
so definitely don't just say okay you

00:28:50,940 --> 00:28:54,760
know give me a ruby

00:28:52,540 --> 00:28:56,020
sdk and then call it good and then start

00:28:54,760 --> 00:28:57,910
releasing that like you really do need

00:28:56,020 --> 00:29:00,640
to look into the code behind it because

00:28:57,910 --> 00:29:04,030
sometimes they're they're not they're

00:29:00,640 --> 00:29:07,660
not good well then there are also trick

00:29:04,030 --> 00:29:09,880
tools to help you debug I actually send

00:29:07,660 --> 00:29:12,130
jsfiddle to people when i'm testing api

00:29:09,880 --> 00:29:14,350
things and it's super easy for them to

00:29:12,130 --> 00:29:15,670
see like oh yeah you know this this is

00:29:14,350 --> 00:29:18,250
giving me the information I need you

00:29:15,670 --> 00:29:23,980
know and they can see how to to interact

00:29:18,250 --> 00:29:30,840
with the API like super quickly so now

00:29:23,980 --> 00:29:33,700
what here is where things just

00:29:30,840 --> 00:29:35,800
completely go off the rails people are

00:29:33,700 --> 00:29:38,590
like oh I released an API I've got some

00:29:35,800 --> 00:29:40,720
really Jenky documentation like calling

00:29:38,590 --> 00:29:44,410
it good and they they don't think ahead

00:29:40,720 --> 00:29:46,840
long term about the maintenance so you

00:29:44,410 --> 00:29:49,300
know plan to maintain your API your SDK

00:29:46,840 --> 00:29:51,460
and your documentation in parallel if

00:29:49,300 --> 00:29:52,630
you can auto generate it definitely do

00:29:51,460 --> 00:29:55,960
that because it'll make your life a lot

00:29:52,630 --> 00:29:58,420
easier if you use like a speck tool so

00:29:55,960 --> 00:30:02,500
like a PA or something then it'll be a

00:29:58,420 --> 00:30:04,450
lot easier for you to to kind of keep

00:30:02,500 --> 00:30:06,310
everything in sync so everything is

00:30:04,450 --> 00:30:09,040
written to that spec you know your SDKs

00:30:06,310 --> 00:30:12,000
will always follow that spec so it'll

00:30:09,040 --> 00:30:14,590
make life a little bit easier on you

00:30:12,000 --> 00:30:16,600
thing that people do is they they launch

00:30:14,590 --> 00:30:18,250
it and then they leave it alone and they

00:30:16,600 --> 00:30:21,430
don't even provide avenues really to get

00:30:18,250 --> 00:30:23,620
support beyond like submit a ticket and

00:30:21,430 --> 00:30:25,720
maybe we'll get back to you or or worse

00:30:23,620 --> 00:30:27,880
they do something like this is a paid

00:30:25,720 --> 00:30:29,380
service so our API is free but if you

00:30:27,880 --> 00:30:30,630
want help with it then you know that's

00:30:29,380 --> 00:30:34,480
going to be a thousand dollars a month

00:30:30,630 --> 00:30:35,950
sorry I I tend to like the community

00:30:34,480 --> 00:30:37,390
approach so it's great if you're

00:30:35,950 --> 00:30:39,340
offering an API you should have a way to

00:30:37,390 --> 00:30:42,070
support it and if it's that's paid like

00:30:39,340 --> 00:30:43,690
whatever just have some way for people

00:30:42,070 --> 00:30:46,680
to get help I like the community

00:30:43,690 --> 00:30:49,390
approach in my experience communities

00:30:46,680 --> 00:30:53,050
sometimes can be better at supporting a

00:30:49,390 --> 00:30:55,210
product than you can so I usually like

00:30:53,050 --> 00:30:56,860
to rally some people to help other

00:30:55,210 --> 00:31:00,120
people out and that's an approach that's

00:30:56,860 --> 00:31:00,120
worked pretty well for me

00:31:00,190 --> 00:31:04,590
and this is things that bad people do if

00:31:02,500 --> 00:31:08,019
you're doing this like we need to talk

00:31:04,590 --> 00:31:11,379
because this is not okay logging into

00:31:08,019 --> 00:31:14,470
view API Doc's like why why would you do

00:31:11,379 --> 00:31:16,899
that and it's also countered to open

00:31:14,470 --> 00:31:18,759
source to use documentation as a lead

00:31:16,899 --> 00:31:20,710
generation tool like that's awful if you

00:31:18,759 --> 00:31:22,120
were making people create accounts to

00:31:20,710 --> 00:31:23,769
view your documentation to see if

00:31:22,120 --> 00:31:25,330
something will work for them in order to

00:31:23,769 --> 00:31:30,909
try and sell them on something that's

00:31:25,330 --> 00:31:33,429
bad don't do that people using HTTP see

00:31:30,909 --> 00:31:35,889
that a lot or you know not defaulting

00:31:33,429 --> 00:31:38,200
you know they offer HTTP and HTTPS and

00:31:35,889 --> 00:31:40,720
parallel but they don't default or force

00:31:38,200 --> 00:31:44,190
https so people can use their API over

00:31:40,720 --> 00:31:46,149
HTTP and that's that's not good either

00:31:44,190 --> 00:31:49,019
the worst thing you can do is no

00:31:46,149 --> 00:31:51,220
documentation at all on the API is

00:31:49,019 --> 00:31:52,389
completely useless if people don't know

00:31:51,220 --> 00:31:55,240
how to use it if you were the only

00:31:52,389 --> 00:31:58,629
people that know how to use your API

00:31:55,240 --> 00:32:00,850
then you know it's only useful for you

00:31:58,629 --> 00:32:03,070
if you're building an API for yourself

00:32:00,850 --> 00:32:04,750
that's great um but you know if you get

00:32:03,070 --> 00:32:06,669
hit by a bus and someone else depends on

00:32:04,750 --> 00:32:08,409
it then you should maybe have some

00:32:06,669 --> 00:32:11,799
documentation zaz someone else can take

00:32:08,409 --> 00:32:13,480
over and you know basic auth or

00:32:11,799 --> 00:32:15,039
requiring these name and password in the

00:32:13,480 --> 00:32:19,330
URL structure people do that a lot too

00:32:15,039 --> 00:32:20,649
and that's that's bad like I said that

00:32:19,330 --> 00:32:24,039
can be saved in your browser i can say

00:32:20,649 --> 00:32:30,190
be saved via CLI in your bash history so

00:32:24,039 --> 00:32:33,580
just try not to do that if you can ness

00:32:30,190 --> 00:32:35,169
DK is on so these are semi optional like

00:32:33,580 --> 00:32:37,299
it's nice when you provide them to your

00:32:35,169 --> 00:32:38,500
users but if your users really like your

00:32:37,299 --> 00:32:41,799
product they're just going to make their

00:32:38,500 --> 00:32:43,210
own anyway so and sometimes you know

00:32:41,799 --> 00:32:45,570
that meets their needs better than

00:32:43,210 --> 00:32:48,460
whatever you're putting out so I

00:32:45,570 --> 00:32:51,009
encourage people to do this you don't

00:32:48,460 --> 00:32:52,389
necessarily have to do this but it

00:32:51,009 --> 00:32:54,789
should have a man's plan like your API

00:32:52,389 --> 00:32:56,169
so anytime you make changes to your API

00:32:54,789 --> 00:32:59,080
you need to make sure that your SDKs are

00:32:56,169 --> 00:33:01,210
up to date and that I see a lot of is

00:32:59,080 --> 00:33:03,309
you know people released version 2 and

00:33:01,210 --> 00:33:08,710
their sdk will be several revisions

00:33:03,309 --> 00:33:12,559
behind and these really need to be made

00:33:08,710 --> 00:33:15,110
by language experts you know I

00:33:12,559 --> 00:33:16,759
I'm a PHP person so I do PHP stuff if

00:33:15,110 --> 00:33:18,860
you try to have me do like Ruby stuff

00:33:16,759 --> 00:33:20,330
like I can wade through it but I'm not

00:33:18,860 --> 00:33:22,970
going to be as good at it as a ruby

00:33:20,330 --> 00:33:24,499
person on or you know have pearl people

00:33:22,970 --> 00:33:27,129
maybe the Pearl things and Python people

00:33:24,499 --> 00:33:30,710
make the Python things there's no

00:33:27,129 --> 00:33:34,789
one-size-fits-all sort of thing when it

00:33:30,710 --> 00:33:35,990
comes to this and they're like I said

00:33:34,789 --> 00:33:37,309
there are tools that will generate these

00:33:35,990 --> 00:33:38,149
for you but you really need to have

00:33:37,309 --> 00:33:40,190
someone who knows what they're doing

00:33:38,149 --> 00:33:41,570
like go through that and make sure that

00:33:40,190 --> 00:33:43,220
that's the best way to do it make sure

00:33:41,570 --> 00:33:49,999
that you know there there's not

00:33:43,220 --> 00:33:53,059
something glaringly wrong with it and I

00:33:49,999 --> 00:33:54,440
can't stress enough the documentation it

00:33:53,059 --> 00:33:55,940
needs to be a part of your design

00:33:54,440 --> 00:33:57,320
process like as you're designing this

00:33:55,940 --> 00:34:00,619
thing you need to be thinking okay how

00:33:57,320 --> 00:34:02,629
am I documenting this so ideally auto

00:34:00,619 --> 00:34:04,490
generation if you don't have the

00:34:02,629 --> 00:34:06,529
resources to make that happen because it

00:34:04,490 --> 00:34:10,060
can be a little involved then you know

00:34:06,529 --> 00:34:12,379
just something is better than nothing

00:34:10,060 --> 00:34:13,790
ideally it's all-inclusive you know

00:34:12,379 --> 00:34:17,770
people will be able to go there and use

00:34:13,790 --> 00:34:23,300
it as a tutorial or also a reference so

00:34:17,770 --> 00:34:24,649
you you really need to provide as much

00:34:23,300 --> 00:34:26,060
information to these people as possible

00:34:24,649 --> 00:34:27,859
because you never know who's going to be

00:34:26,060 --> 00:34:29,300
consuming your API sometimes it's

00:34:27,859 --> 00:34:30,710
experienced users and they just need to

00:34:29,300 --> 00:34:32,240
look up a few things and they're good to

00:34:30,710 --> 00:34:34,159
go sometimes it's someone who's

00:34:32,240 --> 00:34:36,349
completely new to programming in general

00:34:34,159 --> 00:34:39,109
and just like they need to see that curl

00:34:36,349 --> 00:34:40,460
example to understand like hey I need to

00:34:39,109 --> 00:34:43,490
paste this thing and then I'm going to

00:34:40,460 --> 00:34:44,750
get this thing back and you know kind of

00:34:43,490 --> 00:34:48,500
helps their learning process a little

00:34:44,750 --> 00:34:49,940
bit include how to get help and I'm also

00:34:48,500 --> 00:34:51,649
a huge fan of open source of your

00:34:49,940 --> 00:34:54,950
documentation so it's one of the things

00:34:51,649 --> 00:34:57,020
that I do pretty frequently and even if

00:34:54,950 --> 00:34:58,369
your your formatting is crap on your

00:34:57,020 --> 00:34:59,810
documentation like there's still an

00:34:58,369 --> 00:35:01,700
opportunity for the community to get

00:34:59,810 --> 00:35:03,740
involved and help you out with some of

00:35:01,700 --> 00:35:05,150
this documentation stuff so that's one

00:35:03,740 --> 00:35:08,150
of the things I've seen on a few of my

00:35:05,150 --> 00:35:12,710
projects is like my documentation gets

00:35:08,150 --> 00:35:14,599
out of date I I fall victim to this as

00:35:12,710 --> 00:35:17,150
well and you know people people help me

00:35:14,599 --> 00:35:18,770
out they they're happy to be like oh

00:35:17,150 --> 00:35:20,540
well you know I noticed this thing and

00:35:18,770 --> 00:35:22,849
I'm getting this response but this

00:35:20,540 --> 00:35:25,040
example says this and you know they

00:35:22,849 --> 00:35:26,420
submit a pull request and it's super

00:35:25,040 --> 00:35:28,970
easy and people

00:35:26,420 --> 00:35:30,650
kind of our fridge that they're going to

00:35:28,970 --> 00:35:31,670
get judged for the documentation and you

00:35:30,650 --> 00:35:32,990
know there are people that are going to

00:35:31,670 --> 00:35:34,700
judge you but more often than not people

00:35:32,990 --> 00:35:36,380
they really want to help you with this

00:35:34,700 --> 00:35:41,990
they really want to help make the

00:35:36,380 --> 00:35:44,480
project better um and above all else the

00:35:41,990 --> 00:35:46,819
best API is the one that exists I'm

00:35:44,480 --> 00:35:47,869
really a huge fan of providing an

00:35:46,819 --> 00:35:50,240
interface for people to get the

00:35:47,869 --> 00:35:51,770
information that they need you know

00:35:50,240 --> 00:35:54,020
there's this day and age there's really

00:35:51,770 --> 00:35:55,609
no reason someone to have to scrape your

00:35:54,020 --> 00:35:57,680
site to get the information that they

00:35:55,609 --> 00:36:02,480
need it's it's a terrible terrible

00:35:57,680 --> 00:36:06,410
experience for them so you know go forth

00:36:02,480 --> 00:36:09,200
and prosper make your API is awesome um

00:36:06,410 --> 00:36:11,119
it's just a few resources uh build api's

00:36:09,200 --> 00:36:13,640
you won't hate and undisturbed rest or

00:36:11,119 --> 00:36:18,380
two pretty some books on they get more

00:36:13,640 --> 00:36:20,569
in-depth than to like the rest itself so

00:36:18,380 --> 00:36:22,640
there's there's more theory few code

00:36:20,569 --> 00:36:25,339
examples build ap as you won't hate

00:36:22,640 --> 00:36:28,880
actually uses laravel PHP framework so

00:36:25,339 --> 00:36:31,609
you can copy the code from github and

00:36:28,880 --> 00:36:35,000
stand up a basic API he makes like a

00:36:31,609 --> 00:36:37,010
fake foursquare sort of thing and it'll

00:36:35,000 --> 00:36:40,540
take you 10 minutes of work to get that

00:36:37,010 --> 00:36:42,500
stood up and get you kind of ready to go

00:36:40,540 --> 00:36:44,990
apiary is the tool that I use to

00:36:42,500 --> 00:36:47,780
actually blueprint the API is that I

00:36:44,990 --> 00:36:50,000
design restful Web API is is a book

00:36:47,780 --> 00:36:52,430
printed by o'reilly that's really good

00:36:50,000 --> 00:36:54,410
as released two years ago or so so it's

00:36:52,430 --> 00:36:56,180
actually still pretty current things

00:36:54,410 --> 00:36:57,829
haven't changed too much a few of the

00:36:56,180 --> 00:37:00,319
code samples or a little out of date but

00:36:57,829 --> 00:37:03,260
other than that it's a fantastic book

00:37:00,319 --> 00:37:07,460
it's only a few hundred pages which from

00:37:03,260 --> 00:37:11,740
a Riley book is actually pretty good so

00:37:07,460 --> 00:37:11,740
thank you many questions

00:37:31,260 --> 00:37:38,290
for me so the question was encapsulation

00:37:34,900 --> 00:37:41,770
and standardization of formatting so for

00:37:38,290 --> 00:37:43,690
me it's kind of varied by project so

00:37:41,770 --> 00:37:45,190
that's kind of why there really isn't a

00:37:43,690 --> 00:37:47,830
standardization of that that's why I

00:37:45,190 --> 00:37:49,750
like you you return JSON or XML and

00:37:47,830 --> 00:37:51,580
that's pretty much as good as that gets

00:37:49,750 --> 00:37:53,110
so there are people who are trying to

00:37:51,580 --> 00:37:56,590
standardize those replies a little bit

00:37:53,110 --> 00:37:58,780
better but I mean there's there's some

00:37:56,590 --> 00:38:01,000
traction for some like traction for

00:37:58,780 --> 00:38:04,600
another it's it's kind of chaotic since

00:38:01,000 --> 00:38:05,980
this is relatively new still so

00:38:04,600 --> 00:38:20,800
unfortunately I don't really have an

00:38:05,980 --> 00:38:22,270
answer for you good question um so for

00:38:20,800 --> 00:38:24,850
an example an API I really like to look

00:38:22,270 --> 00:38:27,280
to twilio and their API is not entirely

00:38:24,850 --> 00:38:29,830
perfect but it's pretty good and their

00:38:27,280 --> 00:38:31,660
ecosystem around their API is fantastic

00:38:29,830 --> 00:38:33,250
so they have code samples in like eight

00:38:31,660 --> 00:38:38,440
different languages including cold

00:38:33,250 --> 00:38:41,290
fusion and yeah so and their their SDKs

00:38:38,440 --> 00:38:44,230
are always up to date so just overall

00:38:41,290 --> 00:38:46,600
really good user experience from them so

00:38:44,230 --> 00:38:48,160
I would look to them even if what

00:38:46,600 --> 00:39:06,810
they're doing is not completely like

00:38:48,160 --> 00:39:15,550
restful anyone else okay yeah mm-hmm

00:39:06,810 --> 00:39:18,370
this that a question yeah so I hear that

00:39:15,550 --> 00:39:22,560
a lot people you know people like to

00:39:18,370 --> 00:39:22,560
know that a resource is created

00:39:23,430 --> 00:39:29,400
that's well it depends on how you set up

00:39:27,599 --> 00:39:31,109
the API so sometimes it's a replacement

00:39:29,400 --> 00:39:33,150
sometimes you you can set it up to

00:39:31,109 --> 00:39:36,930
create so different api's will have

00:39:33,150 --> 00:39:38,849
different behavior for that yeah but

00:39:36,930 --> 00:39:40,440
some people are using put for create I

00:39:38,849 --> 00:39:48,300
think there's a note in the slide about

00:39:40,440 --> 00:40:01,650
that yeah so that that's yeah well yeah

00:39:48,300 --> 00:40:05,550
i agree but not everybody does that for

00:40:01,650 --> 00:40:07,230
put yeah i mean if you're if a resource

00:40:05,550 --> 00:40:10,349
is getting created on a put and you're

00:40:07,230 --> 00:40:14,640
replying 200 ok and not actually like

00:40:10,349 --> 00:40:15,750
either giving them an updated uri or you

00:40:14,640 --> 00:40:17,700
know telling them that something has

00:40:15,750 --> 00:40:20,550
changed that's that you know if you if

00:40:17,700 --> 00:40:22,680
you submit a put and everything gets

00:40:20,550 --> 00:40:24,270
replaced and that's you know you're not

00:40:22,680 --> 00:40:27,030
expecting that and you just get 200 ok

00:40:24,270 --> 00:40:28,559
it's like okay what if the resource card

00:40:27,030 --> 00:40:30,210
existed you know there's so many other

00:40:28,559 --> 00:40:31,440
things that come into play there so you

00:40:30,210 --> 00:40:33,530
just really need to be careful about

00:40:31,440 --> 00:40:33,530
that

00:41:00,869 --> 00:41:18,369
you asking like what the best method of

00:41:03,579 --> 00:41:22,390
authentication would be mm-hmm I am a

00:41:18,369 --> 00:41:24,010
fan of OAuth but I mean honestly I I

00:41:22,390 --> 00:41:27,069
really don't have a preference as long

00:41:24,010 --> 00:41:28,630
as it's not basic off that's that's

00:41:27,069 --> 00:41:30,640
pretty much my answer so I've seen a lot

00:41:28,630 --> 00:41:43,359
of different ways to tackle that problem

00:41:30,640 --> 00:41:45,339
um use the one that works for you um I

00:41:43,359 --> 00:41:47,260
actually don't have much experience with

00:41:45,339 --> 00:41:49,329
that I've seen it and I've been seeing

00:41:47,260 --> 00:41:58,140
more and more about it but it's just not

00:41:49,329 --> 00:41:58,140
something that I'm familiar with okay

00:42:23,850 --> 00:42:26,150
ha

00:42:32,040 --> 00:42:36,960
yeah I absolutely agree with that um

00:42:35,100 --> 00:42:42,660
it's like rolling your own crypto just

00:42:36,960 --> 00:42:48,170
don't do it anything else if not i will

00:42:42,660 --> 00:42:48,170
stop talking at you all right thank you

00:43:27,559 --> 00:43:29,619
you

00:43:33,850 --> 00:43:35,910
you

00:46:02,770 --> 00:46:07,010
citrix xenserver gives you everything

00:46:04,910 --> 00:46:10,010
you need to integrate manage and

00:46:07,010 --> 00:46:12,110
automate a virtual data center all on an

00:46:10,010 --> 00:46:14,540
enterprise-class cloud proven virtual

00:46:12,110 --> 00:46:17,150
platform and at a third of the cost of

00:46:14,540 --> 00:46:19,010
other solutions but why even bother with

00:46:17,150 --> 00:46:21,170
virtualizing your server infrastructure

00:46:19,010 --> 00:46:23,120
in the first place well let's say you

00:46:21,170 --> 00:46:25,400
have a traditional one server to one

00:46:23,120 --> 00:46:27,410
application architecture but you're

00:46:25,400 --> 00:46:29,990
running out of resources and performance

00:46:27,410 --> 00:46:32,290
is suffering once you order new server

00:46:29,990 --> 00:46:35,180
hardware you'll wait for delivery

00:46:32,290 --> 00:46:38,030
configure it install your business

00:46:35,180 --> 00:46:40,820
application stage and test the server

00:46:38,030 --> 00:46:43,010
and finally add it to your production

00:46:40,820 --> 00:46:45,260
farm if you've been through this process

00:46:43,010 --> 00:46:47,720
before you know it can take weeks or

00:46:45,260 --> 00:46:49,610
even months you also know it's a

00:46:47,720 --> 00:46:51,560
manually intensive process that will

00:46:49,610 --> 00:46:54,860
burden your team every time you outgrow

00:46:51,560 --> 00:46:56,660
your current setup with a virtual server

00:46:54,860 --> 00:46:59,420
solution you could accomplish all of

00:46:56,660 --> 00:47:02,060
that in less than half a day server

00:46:59,420 --> 00:47:03,890
virtualization software separates the OS

00:47:02,060 --> 00:47:06,320
and application from the underlying

00:47:03,890 --> 00:47:08,450
server hardware and with multiple

00:47:06,320 --> 00:47:10,190
virtual machines on a single server you

00:47:08,450 --> 00:47:13,130
can use each of them to run different

00:47:10,190 --> 00:47:14,930
os's and applications this makes it

00:47:13,130 --> 00:47:16,700
possible to move your virtual machines

00:47:14,930 --> 00:47:18,770
from one piece of hardware to another

00:47:16,700 --> 00:47:21,050
whenever you want to maximize

00:47:18,770 --> 00:47:23,000
utilization simplify maintenance or

00:47:21,050 --> 00:47:25,310
recover from a hardware failure and

00:47:23,000 --> 00:47:28,280
without slowing down your applications

00:47:25,310 --> 00:47:31,310
or users clearly server virtualization

00:47:28,280 --> 00:47:34,280
provides big benefits and Citrix

00:47:31,310 --> 00:47:36,500
XenServer provides even more since it's

00:47:34,280 --> 00:47:38,450
built on an open platform xenserver

00:47:36,500 --> 00:47:40,730
plays well with your existing hardware

00:47:38,450 --> 00:47:43,010
storage systems and IT management

00:47:40,730 --> 00:47:45,800
software as well as with the industry's

00:47:43,010 --> 00:47:47,810
leading cloud service providers best of

00:47:45,800 --> 00:47:49,520
all you can get started by downloading a

00:47:47,810 --> 00:47:52,850
fully functional production ready

00:47:49,520 --> 00:47:55,070
version of xenserver for free after a

00:47:52,850 --> 00:47:57,080
10-minute installation process you'll

00:47:55,070 --> 00:47:59,090
see how easy it is to start virtualizing

00:47:57,080 --> 00:48:01,490
your workloads and automating your IT

00:47:59,090 --> 00:48:03,080
management processes and when you're

00:48:01,490 --> 00:48:05,029
ready for a richer set of management

00:48:03,080 --> 00:48:07,549
tools just upgrade to one of the pre me

00:48:05,029 --> 00:48:09,380
of xenserver so whether you're

00:48:07,549 --> 00:48:11,329
interested in virtualizing servers for

00:48:09,380 --> 00:48:13,609
the first time expanding your server

00:48:11,329 --> 00:48:16,159
virtualization footprint or moving

00:48:13,609 --> 00:48:18,499
server workloads to the cloud download

00:48:16,159 --> 00:48:20,449
and install zend server today and see

00:48:18,499 --> 00:48:23,929
how it can help you simplify your IT

00:48:20,449 --> 00:48:27,339
environment citrix xenserver do more

00:48:23,929 --> 00:48:27,339
don't spend more

00:48:32,610 --> 00:48:36,760
your customers rely on your website or

00:48:35,350 --> 00:48:39,130
application if it's slower

00:48:36,760 --> 00:48:42,070
non-responsive it infuriates your users

00:48:39,130 --> 00:48:43,840
and costs you money keeping your

00:48:42,070 --> 00:48:47,340
business critical systems humming along

00:48:43,840 --> 00:48:49,740
requires insight into what they're doing

00:48:47,340 --> 00:48:51,690
your system metrics tells stories

00:48:49,740 --> 00:48:53,700
stories that can reveal performance

00:48:51,690 --> 00:48:55,950
bottlenecks resource limitations and

00:48:53,700 --> 00:48:57,510
other problems but how do you keep an

00:48:55,950 --> 00:49:00,180
eye on all of your systems performance

00:48:57,510 --> 00:49:03,180
metrics in real-time and record this

00:49:00,180 --> 00:49:05,190
data for later analysis enter longview

00:49:03,180 --> 00:49:06,990
the new way to see what's really going

00:49:05,190 --> 00:49:09,150
on under the hood the long view

00:49:06,990 --> 00:49:11,190
dashboard lets you visualize the status

00:49:09,150 --> 00:49:13,650
of all your systems providing you with a

00:49:11,190 --> 00:49:17,040
bird's-eye view of your entire fleet you

00:49:13,650 --> 00:49:19,620
can sort by cpu memory swap processes

00:49:17,040 --> 00:49:21,360
load and network usage click a specific

00:49:19,620 --> 00:49:23,760
system to access its individual

00:49:21,360 --> 00:49:26,270
dashboard then click and drag to zoom in

00:49:23,760 --> 00:49:28,680
on chokepoints and get more detail

00:49:26,270 --> 00:49:30,360
comprehensive network data including

00:49:28,680 --> 00:49:32,670
inbound and outbound traffic is

00:49:30,360 --> 00:49:34,260
available on the network tab and disk

00:49:32,670 --> 00:49:36,150
rights and free space on the disk

00:49:34,260 --> 00:49:39,000
stabbed while the process Explorer

00:49:36,150 --> 00:49:41,520
displays usage statistics for individual

00:49:39,000 --> 00:49:43,710
processes the system info tab shows

00:49:41,520 --> 00:49:45,960
listening services active connections

00:49:43,710 --> 00:49:48,090
and available updates adding long view

00:49:45,960 --> 00:49:49,770
to a system is easy just click the

00:49:48,090 --> 00:49:51,900
button copy the one line installation

00:49:49,770 --> 00:49:54,360
command then run the command on your

00:49:51,900 --> 00:49:56,070
linux system to complete the process the

00:49:54,360 --> 00:49:58,260
agent will begin collecting data and

00:49:56,070 --> 00:50:01,770
sending it to longview then the graphs

00:49:58,260 --> 00:50:03,990
start rolling use long view to gain

00:50:01,770 --> 00:50:08,750
visibility into your servers so when

00:50:03,990 --> 00:50:08,750
your website or app heats up it stays up

00:50:14,570 --> 00:50:16,630

YouTube URL: https://www.youtube.com/watch?v=n6gcFUHh35Q


