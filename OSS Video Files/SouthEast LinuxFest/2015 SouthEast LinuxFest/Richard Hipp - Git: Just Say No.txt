Title: Richard Hipp - Git: Just Say No
Publication date: 2017-01-25
Playlist: 2015 SouthEast LinuxFest
Description: 
	
Captions: 
	00:00:31,500 --> 00:00:38,100
yes can you hear me okay we are on now

00:00:36,270 --> 00:00:41,340
do I have a Jeremy do I have a clicker

00:00:38,100 --> 00:01:02,159
do I have to go up here I have my own

00:00:41,340 --> 00:01:05,640
clicker can i plug it in yes this is an

00:01:02,159 --> 00:01:10,140
SQLite clicker module it is not just

00:01:05,640 --> 00:01:18,000
your average clicker yeah no I can't I

00:01:10,140 --> 00:01:26,479
can't talk without moving my arms right

00:01:18,000 --> 00:01:26,479
I can't do that I'm already live

00:01:31,970 --> 00:02:01,830
unfortunately I think we only have a

00:01:34,979 --> 00:02:03,479
single USB port on this machine oh it's

00:02:01,830 --> 00:02:18,620
just slow to respond thanks everybody

00:02:03,479 --> 00:02:21,180
for coming my name is Richard yep okay

00:02:18,620 --> 00:02:24,120
okay thank you for being here my name is

00:02:21,180 --> 00:02:26,370
Richard yep this is a talk on yet and

00:02:24,120 --> 00:02:27,930
why you shouldn't be using it in its

00:02:26,370 --> 00:02:29,700
current form really this is going to be

00:02:27,930 --> 00:02:34,349
a talk about what we can do to make get

00:02:29,700 --> 00:02:36,030
better here the complete copy of the

00:02:34,349 --> 00:02:37,739
slides and the original OpenOffice

00:02:36,030 --> 00:02:41,550
format there if you want to download

00:02:37,739 --> 00:02:45,290
them I'm getting a little bit of

00:02:41,550 --> 00:02:47,620
feedback do I need to be somewhere else

00:02:45,290 --> 00:02:52,549
do I need to stand on the stage maybe

00:02:47,620 --> 00:02:56,629
it's buzzing don't worry about the

00:02:52,549 --> 00:03:00,260
buzzing okay so this talk is about yet

00:02:56,629 --> 00:03:02,690
now just to be upfront with you I am the

00:03:00,260 --> 00:03:05,060
creator and premiere developer for a

00:03:02,690 --> 00:03:07,819
competing version control system but I'm

00:03:05,060 --> 00:03:09,860
not here to push my system this is about

00:03:07,819 --> 00:03:13,040
because really they're both about ten

00:03:09,860 --> 00:03:15,500
years old and get has clearly won mine

00:03:13,040 --> 00:03:18,620
share everybody used to get raise your

00:03:15,500 --> 00:03:21,049
hand if you are using it raise your hair

00:03:18,620 --> 00:03:23,389
if you want to be using it raising here

00:03:21,049 --> 00:03:25,870
in your hand if you want to be using if

00:03:23,389 --> 00:03:29,510
you are using it but wish you were not

00:03:25,870 --> 00:03:31,819
yes okay so it is the software that

00:03:29,510 --> 00:03:33,379
everybody seems to love to hate and I'm

00:03:31,819 --> 00:03:36,319
going to talk a little bit about what

00:03:33,379 --> 00:03:38,810
some of its problems are and what we can

00:03:36,319 --> 00:03:41,450
do to fix them now as I said I'm I'm

00:03:38,810 --> 00:03:44,420
wrote I'm alright a competing system I'm

00:03:41,450 --> 00:03:45,950
not pushing that today but my decade of

00:03:44,420 --> 00:03:48,200
experience riding and maintaining the

00:03:45,950 --> 00:03:52,579
system informs my criticism of yet

00:03:48,200 --> 00:03:56,870
before we start gig before we get going

00:03:52,579 --> 00:03:59,510
I have a collection of quotes about yet

00:03:56,870 --> 00:04:01,069
and I'd love to collect these if you see

00:03:59,510 --> 00:04:02,540
any letting you know I brought along a

00:04:01,069 --> 00:04:05,030
few of my favorites here this is a

00:04:02,540 --> 00:04:07,790
recent one from Benjamin

00:04:05,030 --> 00:04:09,859
it is so amazingly simple to use that a

00:04:07,790 --> 00:04:13,250
press a single publisher needs three

00:04:09,859 --> 00:04:15,709
different books on how to use it it's so

00:04:13,250 --> 00:04:17,510
simple that it's lycian and get her both

00:04:15,709 --> 00:04:19,760
neat feel free to write through an

00:04:17,510 --> 00:04:22,250
online tutorial to clarify the main get

00:04:19,760 --> 00:04:24,440
tutorial on the actual get website it's

00:04:22,250 --> 00:04:26,270
so transparent that developers routinely

00:04:24,440 --> 00:04:28,550
tell me that the easiest way to learn

00:04:26,270 --> 00:04:34,460
yet is to start with the file formats

00:04:28,550 --> 00:04:36,770
and work up to the commands so here's I

00:04:34,460 --> 00:04:39,440
love this one this was Jonathan Hartley

00:04:36,770 --> 00:04:42,050
it's simplest to think of the state of

00:04:39,440 --> 00:04:44,570
your git repository as a point in high

00:04:42,050 --> 00:04:46,099
dimensional code space in which branches

00:04:44,570 --> 00:04:48,229
are represented as the in dimensional

00:04:46,099 --> 00:04:50,479
membranes mapping spatial loci of

00:04:48,229 --> 00:04:53,780
successive commits on to the projected

00:04:50,479 --> 00:04:56,390
manifold of each clone the repository

00:04:53,780 --> 00:05:01,250
and if you understand what that means

00:04:56,390 --> 00:05:03,410
you should probably be using it this is

00:05:01,250 --> 00:05:05,150
from Nick Farina co-founder of Meridian

00:05:03,410 --> 00:05:06,380
Murray this is a different Meridian from

00:05:05,150 --> 00:05:08,120
the people who are right outside that

00:05:06,380 --> 00:05:10,610
door showing this is a different company

00:05:08,120 --> 00:05:12,950
but he wrote yet is not a Prius

00:05:10,610 --> 00:05:14,660
yet is a Model T it's plumbing and

00:05:12,950 --> 00:05:16,550
wiring to stick out all over the place

00:05:14,660 --> 00:05:18,680
you have to be a mechanic to operate it

00:05:16,550 --> 00:05:20,330
successfully or you'll be stuck on the

00:05:18,680 --> 00:05:23,870
side of the road when it breaks down and

00:05:20,330 --> 00:05:26,450
it will break down emphases as in the

00:05:23,870 --> 00:05:28,130
original so in this and this was in an

00:05:26,450 --> 00:05:29,630
article really pushing him it's the

00:05:28,130 --> 00:05:31,480
greatest thing in the world but he he's

00:05:29,630 --> 00:05:35,030
really up thrown about its limitations

00:05:31,480 --> 00:05:36,800
I've got a ton of these but my favorite

00:05:35,030 --> 00:05:38,990
is the next one this is this is my

00:05:36,800 --> 00:05:42,500
all-time favorite from a guy named T

00:05:38,990 --> 00:05:46,010
stain on reddit Klingon code warriors

00:05:42,500 --> 00:05:48,680
embrace get we enjoy arbitrary conflicts

00:05:46,010 --> 00:05:55,040
get is not for the weak and feeble today

00:05:48,680 --> 00:05:56,510
is a good day to code so you know you're

00:05:55,040 --> 00:05:57,740
all getting users you're laughing at

00:05:56,510 --> 00:06:02,300
this and so the reason you're laughing

00:05:57,740 --> 00:06:06,350
is because you know it's true so here

00:06:02,300 --> 00:06:09,680
are my top 10 things that I think top 10

00:06:06,350 --> 00:06:11,690
needed enhancements needed forgetting

00:06:09,680 --> 00:06:15,169
I've got a longer list I tried to limit

00:06:11,690 --> 00:06:17,600
it to 10 and I tried to order them I

00:06:15,169 --> 00:06:19,070
think an order of importance so I'm

00:06:17,600 --> 00:06:24,350
going to start with the first one appear

00:06:19,070 --> 00:06:27,530
show the descendants of a check-in this

00:06:24,350 --> 00:06:31,160
is a showstopper for me because git does

00:06:27,530 --> 00:06:33,290
not do this well is I can't use git I

00:06:31,160 --> 00:06:34,280
have to use a different system what do I

00:06:33,290 --> 00:06:38,689
mean by that

00:06:34,280 --> 00:06:40,219
you know if

00:06:38,689 --> 00:06:42,469
you think to the if you think back to

00:06:40,219 --> 00:06:44,149
how git is implemented and apparently in

00:06:42,469 --> 00:06:45,229
order to use get successful you kind of

00:06:44,149 --> 00:06:48,409
have to know the low-level David

00:06:45,229 --> 00:06:51,019
structures you've got this this length

00:06:48,409 --> 00:06:52,429
list of commit objects now there's four

00:06:51,019 --> 00:06:54,289
different types of objects in the file

00:06:52,429 --> 00:06:58,039
format there's commit objects tree

00:06:54,289 --> 00:06:59,899
objects blob objects and tagged objects

00:06:58,039 --> 00:07:01,819
we're only dealing with commit objects

00:06:59,899 --> 00:07:04,879
here and and the course they have off

00:07:01,819 --> 00:07:08,059
each one has a complete sha-1 hash label

00:07:04,879 --> 00:07:12,139
I have shortened the label on these to a

00:07:08,059 --> 00:07:14,300
single hex digit just for readability so

00:07:12,139 --> 00:07:17,959
you're the first check in was committed

00:07:14,300 --> 00:07:19,399
number nine and and so that blob goes in

00:07:17,959 --> 00:07:21,139
there that's great and then there were

00:07:19,399 --> 00:07:24,409
some additional check-ins after that

00:07:21,139 --> 00:07:26,719
which were a and F and it was a at fork

00:07:24,409 --> 00:07:28,699
there was a branch there and the F

00:07:26,719 --> 00:07:30,589
branch went it to D and the e branch

00:07:28,699 --> 00:07:34,069
went up to C and then then there was a

00:07:30,589 --> 00:07:38,209
merge operation at B and then a is the

00:07:34,069 --> 00:07:40,159
latest a is head and each one of these

00:07:38,209 --> 00:07:42,889
commit objects has a pointer to its

00:07:40,159 --> 00:07:44,719
parents so it forms a graph just like

00:07:42,889 --> 00:07:46,759
this and in the get documentation it

00:07:44,719 --> 00:07:48,499
does show the graphs going this way so

00:07:46,759 --> 00:07:52,639
the arrows are pointing backwards in

00:07:48,499 --> 00:07:55,339
time which is kind of counterintuitive I

00:07:52,639 --> 00:07:57,469
mean yeah this is the way you need to

00:07:55,339 --> 00:07:59,809
implement it under the covers definitely

00:07:57,469 --> 00:08:01,879
but you know users ought to see the

00:07:59,809 --> 00:08:04,279
graphs going forward and or the arrows

00:08:01,879 --> 00:08:06,889
going forward in time but the thing is

00:08:04,279 --> 00:08:09,769
you know if you're if you're sitting at

00:08:06,889 --> 00:08:11,419
E and you want to what wonder what comes

00:08:09,769 --> 00:08:13,189
next there's nothing here to tell you

00:08:11,419 --> 00:08:15,709
you can follow the arrow and find its

00:08:13,189 --> 00:08:19,550
parents but you can't find its children

00:08:15,709 --> 00:08:23,269
and there's no way to go in you know

00:08:19,550 --> 00:08:26,239
after somebody commits C you can't look

00:08:23,269 --> 00:08:28,009
at E and you can't modify e to add a

00:08:26,239 --> 00:08:30,559
list of parents because if you were to

00:08:28,009 --> 00:08:32,990
modify E that would change its hash it

00:08:30,559 --> 00:08:34,370
would become a different check-in it

00:08:32,990 --> 00:08:37,579
would become a different commit so

00:08:34,370 --> 00:08:39,379
there's no way to do that and this is a

00:08:37,579 --> 00:08:41,449
big end and for that reason if you if

00:08:39,379 --> 00:08:45,860
you look at any of the user interfaces

00:08:41,449 --> 00:08:48,780
it's very very difficult to find the

00:08:45,860 --> 00:08:54,040
descendants of a check-in

00:08:48,780 --> 00:08:56,140
how do we solve this I propose solving

00:08:54,040 --> 00:08:58,210
it by having a shadow table off the side

00:08:56,140 --> 00:08:59,620
you keep and keep the same internal data

00:08:58,210 --> 00:09:01,810
structure because that that's the way

00:08:59,620 --> 00:09:03,760
you need to do this but we could you

00:09:01,810 --> 00:09:07,420
could make a table in a relational

00:09:03,760 --> 00:09:09,310
database that keeps track of the

00:09:07,420 --> 00:09:11,440
parent-child relationship and so I've

00:09:09,310 --> 00:09:13,240
got a little simple table here and it's

00:09:11,440 --> 00:09:16,030
got the parent hash the child hash and

00:09:13,240 --> 00:09:19,480
then rank is a field that says whether

00:09:16,030 --> 00:09:21,520
or not this is a merge check in or if

00:09:19,480 --> 00:09:23,650
it's the primary that the merge parent

00:09:21,520 --> 00:09:25,020
or primary parent so let's look at how

00:09:23,650 --> 00:09:30,070
this goes

00:09:25,020 --> 00:09:34,840
we see that a has a parent which is B on

00:09:30,070 --> 00:09:37,960
the first entry here so B is the parent

00:09:34,840 --> 00:09:40,300
a is the child and the rank is zero

00:09:37,960 --> 00:09:46,930
because it's the prime your parents it's

00:09:40,300 --> 00:09:50,920
not emerge B is a child of two different

00:09:46,930 --> 00:09:54,520
check-ins both C and D C is its primary

00:09:50,920 --> 00:09:56,530
parent and D is its merge parent and you

00:09:54,520 --> 00:09:59,020
can have a three-way merge too and then

00:09:56,530 --> 00:10:02,020
you number that way and and you can see

00:09:59,020 --> 00:10:05,410
how this table very succinctly

00:10:02,020 --> 00:10:08,050
represents this graph in fact you could

00:10:05,410 --> 00:10:09,580
this is not like a primary data

00:10:08,050 --> 00:10:11,980
structure you could build this table

00:10:09,580 --> 00:10:14,320
just by looking at the get log you could

00:10:11,980 --> 00:10:17,590
build this table very quickly and then

00:10:14,320 --> 00:10:20,920
once you have this table um it becomes

00:10:17,590 --> 00:10:22,420
very simple to do a query to get the

00:10:20,920 --> 00:10:25,540
children or the parents of a particular

00:10:22,420 --> 00:10:27,040
check-in and if you have an index on

00:10:25,540 --> 00:10:28,450
this table or appropriate indices on

00:10:27,040 --> 00:10:34,570
this table then that query becomes very

00:10:28,450 --> 00:10:36,760
very fast and this allows you to to find

00:10:34,570 --> 00:10:39,130
the ancestors so and if you want to get

00:10:36,760 --> 00:10:40,750
and of course you can you can do more

00:10:39,130 --> 00:10:42,700
complicated things with this so for

00:10:40,750 --> 00:10:44,170
example usually what you want to do is

00:10:42,700 --> 00:10:45,850
you've got to check-in you want say what

00:10:44,170 --> 00:10:49,660
came afterward you want to say fund the

00:10:45,850 --> 00:10:51,820
50 most recent descendants in time of a

00:10:49,660 --> 00:10:54,010
particular check-in to see what was

00:10:51,820 --> 00:10:55,420
happening so somebody checks in a bug

00:10:54,010 --> 00:10:56,350
you find out about it two years later

00:10:55,420 --> 00:11:00,040
okay

00:10:56,350 --> 00:11:01,540
what was the follow-on to this and for

00:11:00,040 --> 00:11:04,779
this example I've added another

00:11:01,540 --> 00:11:07,870
to the table called in time which is

00:11:04,779 --> 00:11:11,019
just a timestamp and then I just and

00:11:07,870 --> 00:11:13,060
then using a simple recursive common

00:11:11,019 --> 00:11:17,790
table expression I can immediately get

00:11:13,060 --> 00:11:22,209
the 50 most recent and descendants of

00:11:17,790 --> 00:11:26,440
that check in now this is just a single

00:11:22,209 --> 00:11:27,819
simple SQL query it's a not a common

00:11:26,440 --> 00:11:30,130
thing it's uses a common table

00:11:27,819 --> 00:11:32,380
expression and if you don't know what

00:11:30,130 --> 00:11:34,000
that is there's actually a talk by me

00:11:32,380 --> 00:11:36,670
right after lunch and you can come and I

00:11:34,000 --> 00:11:38,350
will explain how this works to you but

00:11:36,670 --> 00:11:40,240
the point is it's just a simple query

00:11:38,350 --> 00:11:42,160
gives you this now you could do this by

00:11:40,240 --> 00:11:43,480
you could do the same thing by looking

00:11:42,160 --> 00:11:45,519
through the git log and doing lots of

00:11:43,480 --> 00:11:47,470
complete table scans it would be a lot

00:11:45,519 --> 00:11:50,949
of code it would take a lot of it would

00:11:47,470 --> 00:11:52,750
be slow and I note after 10 years of

00:11:50,949 --> 00:11:56,410
intensive use with lots of user

00:11:52,750 --> 00:11:58,690
interfaces nobody does it and so this

00:11:56,410 --> 00:12:00,310
information is just not available to

00:11:58,690 --> 00:12:01,899
people who want it you could do all

00:12:00,310 --> 00:12:04,720
sorts of other instruments if you had

00:12:01,899 --> 00:12:06,399
this table so for example you could find

00:12:04,720 --> 00:12:10,149
all of the check-ins that occurred

00:12:06,399 --> 00:12:12,670
during some interval of time and that's

00:12:10,149 --> 00:12:15,720
just by selecting doing a select on the

00:12:12,670 --> 00:12:18,760
table with the in time between two

00:12:15,720 --> 00:12:21,220
values that you've selected I do this

00:12:18,760 --> 00:12:26,639
kind of thing all the time because in my

00:12:21,220 --> 00:12:28,630
repositories I keep I keep separate

00:12:26,639 --> 00:12:30,399
components of a project in separate

00:12:28,630 --> 00:12:32,980
repositories so the SQLite source code

00:12:30,399 --> 00:12:35,769
is in one repository the documentation

00:12:32,980 --> 00:12:37,720
is in another repository some of this

00:12:35,769 --> 00:12:40,420
test cases are when the original source

00:12:37,720 --> 00:12:41,949
repository but I have other several

00:12:40,420 --> 00:12:46,180
other repositories that contain

00:12:41,949 --> 00:12:48,730
additional test cases so I get an email

00:12:46,180 --> 00:12:50,829
or a phone call from a client and says

00:12:48,730 --> 00:12:53,709
we've got a problem with this version

00:12:50,829 --> 00:12:55,990
SQLite is three years old and we go back

00:12:53,709 --> 00:12:57,130
and we we we buy say to trace it a

00:12:55,990 --> 00:13:00,189
particular check in and we're turning

00:12:57,130 --> 00:13:02,019
well why do we make this change what we

00:13:00,189 --> 00:13:04,269
want to see what's happening in the

00:13:02,019 --> 00:13:06,069
other related repositories at the same

00:13:04,269 --> 00:13:07,810
time so we can kind of go back and

00:13:06,069 --> 00:13:10,029
remember what we were thinking three

00:13:07,810 --> 00:13:13,870
years ago I don't know about you but I

00:13:10,029 --> 00:13:17,350
cannot remember what I was thinking

00:13:13,870 --> 00:13:19,570
two years ago this week do you even know

00:13:17,350 --> 00:13:22,180
where you were two years ago this way I

00:13:19,570 --> 00:13:25,980
don't so but but by doing this query I

00:13:22,180 --> 00:13:28,750
can I can get a complete listing taken

00:13:25,980 --> 00:13:31,870
yeah the answer is that we were probably

00:13:28,750 --> 00:13:33,130
here two years ago this week but by

00:13:31,870 --> 00:13:34,510
doing a career like this I can go back

00:13:33,130 --> 00:13:36,279
and give you a complete listing of what

00:13:34,510 --> 00:13:39,190
was happening all of the relevant

00:13:36,279 --> 00:13:40,660
repositories and oh yeah that's when we

00:13:39,190 --> 00:13:44,610
were working on such-and-such a feature

00:13:40,660 --> 00:13:47,260
and now I see why we made this change

00:13:44,610 --> 00:13:50,410
this happens on a daily basis for me

00:13:47,260 --> 00:13:54,640
it's not easy to do with the current yet

00:13:50,410 --> 00:13:56,140
structure what are the thirty closest

00:13:54,640 --> 00:13:59,170
check-ins to a particular point in time

00:13:56,140 --> 00:14:02,440
same kind of thing where you know we've

00:13:59,170 --> 00:14:03,700
got a change that we're investigating we

00:14:02,440 --> 00:14:07,120
know that this change introduced about

00:14:03,700 --> 00:14:09,160
what was happening around that point in

00:14:07,120 --> 00:14:11,440
time not necessarily on that same branch

00:14:09,160 --> 00:14:13,570
maybe on parallel branches what were we

00:14:11,440 --> 00:14:15,430
doing at the same time this is a very

00:14:13,570 --> 00:14:19,570
important thing when you're tracking

00:14:15,430 --> 00:14:21,490
boats and and a system like this allows

00:14:19,570 --> 00:14:22,420
you to do it you know I forgot to

00:14:21,490 --> 00:14:24,220
mention when I'm showing you the

00:14:22,420 --> 00:14:26,680
original chart that this table that

00:14:24,220 --> 00:14:29,620
we've got here this lineage table it's

00:14:26,680 --> 00:14:33,250
not really a primary data structure in

00:14:29,620 --> 00:14:34,839
the sense that it's not holding any new

00:14:33,250 --> 00:14:37,750
information all the information that's

00:14:34,839 --> 00:14:42,910
in this table is in the original get

00:14:37,750 --> 00:14:45,490
objects and if the this table been out

00:14:42,910 --> 00:14:47,140
of date for some reason some software

00:14:45,490 --> 00:14:49,959
bug or something you could just delete

00:14:47,140 --> 00:14:53,160
the whole thing rescan yet log and

00:14:49,959 --> 00:14:56,410
rebuild the table anytime you want and

00:14:53,160 --> 00:14:58,330
you know my particular version control

00:14:56,410 --> 00:15:00,160
system does you know has the same kind

00:14:58,330 --> 00:15:02,680
of situation and there's a rebuild

00:15:00,160 --> 00:15:05,170
command just you know type rebuild and

00:15:02,680 --> 00:15:08,620
it actually rebuilds this table from

00:15:05,170 --> 00:15:10,779
primary sources so here's an example of

00:15:08,620 --> 00:15:15,459
doing 30 the 30 nears check-ins in time

00:15:10,779 --> 00:15:18,880
and it's just a couple of selects with a

00:15:15,459 --> 00:15:20,780
union and ordered by time differences

00:15:18,880 --> 00:15:24,860
and limit

00:15:20,780 --> 00:15:26,630
to the first 30 and that's very fast so

00:15:24,860 --> 00:15:31,520
and you could do something like this and

00:15:26,630 --> 00:15:34,010
so I imported the complete git

00:15:31,520 --> 00:15:35,750
repository for get itself into a

00:15:34,010 --> 00:15:37,100
different version control system and

00:15:35,750 --> 00:15:38,960
then ran this query on it just to find

00:15:37,100 --> 00:15:42,890
out what was the old what were the

00:15:38,960 --> 00:15:44,720
oldest commits and get itself and so

00:15:42,890 --> 00:15:47,300
these were the first five commits to get

00:15:44,720 --> 00:15:49,370
itself and I was amused by the very

00:15:47,300 --> 00:15:51,920
first one where Lin is checked in the

00:15:49,370 --> 00:15:54,200
very first code to get and he says his

00:15:51,920 --> 00:15:56,000
own words the initial revision of git

00:15:54,200 --> 00:16:05,300
I don't know if you can see this the

00:15:56,000 --> 00:16:06,620
information manager from hell so you can

00:16:05,300 --> 00:16:07,700
you can actually see this in the git

00:16:06,620 --> 00:16:10,670
repo it's right in here at the bottom

00:16:07,700 --> 00:16:13,430
that's a very first check-in notice in

00:16:10,670 --> 00:16:15,890
this particular rendition the errors

00:16:13,430 --> 00:16:17,780
point forward in time rather than

00:16:15,890 --> 00:16:22,070
backward in time which I personally find

00:16:17,780 --> 00:16:24,440
more intuitive but you can you can get

00:16:22,070 --> 00:16:29,090
the same information by doing git log

00:16:24,440 --> 00:16:33,400
and then piping it through tail and in

00:16:29,090 --> 00:16:33,400
just see the last few entries yes

00:16:34,960 --> 00:16:40,010
there's also a git log reverse that

00:16:37,580 --> 00:16:43,760
Princeton in in reverse order I did not

00:16:40,010 --> 00:16:46,910
know about that one I did time it this

00:16:43,760 --> 00:16:49,490
took three milliseconds when I did get

00:16:46,910 --> 00:16:51,260
log and piped it retail that took the

00:16:49,490 --> 00:16:56,630
better part of a second so this is

00:16:51,260 --> 00:17:00,590
faster okay so that's that's that's

00:16:56,630 --> 00:17:02,840
that's the big complaint I have I can't

00:17:00,590 --> 00:17:07,100
go back and explore the history it's

00:17:02,840 --> 00:17:08,870
just this this this length list what the

00:17:07,100 --> 00:17:11,900
air is going the opposite direction that

00:17:08,870 --> 00:17:14,660
I normally want to go the next big

00:17:11,900 --> 00:17:18,189
problem I have with yet is it has an

00:17:14,660 --> 00:17:20,480
overly complex mental model

00:17:18,189 --> 00:17:23,449
in particular if you're working in get

00:17:20,480 --> 00:17:25,760
you need to keep in your mind five

00:17:23,449 --> 00:17:28,159
different snapshots or five different

00:17:25,760 --> 00:17:29,870
commits you need to remember what's in

00:17:28,159 --> 00:17:32,899
your working directory the the files

00:17:29,870 --> 00:17:35,450
that you're editing right now you need

00:17:32,899 --> 00:17:39,409
to remember what is in the index or

00:17:35,450 --> 00:17:42,590
staging area you need to be mindful of

00:17:39,409 --> 00:17:44,899
your local head the branch that you're

00:17:42,590 --> 00:17:49,340
working on you need to be aware of the

00:17:44,899 --> 00:17:50,720
local copy of the remote head that is

00:17:49,340 --> 00:17:52,429
your copy of what's going to be on the

00:17:50,720 --> 00:17:54,260
server and then also you need to be

00:17:52,429 --> 00:17:58,220
aware of what is actually the remote

00:17:54,260 --> 00:18:00,500
head and there are commands and get to

00:17:58,220 --> 00:18:04,250
move information between all five of

00:18:00,500 --> 00:18:06,590
these things really if you're a

00:18:04,250 --> 00:18:08,899
developer you really only need to be

00:18:06,590 --> 00:18:10,130
concerned with two of these which is the

00:18:08,899 --> 00:18:12,919
first one in the last when you're

00:18:10,130 --> 00:18:15,740
working directory and what's actually on

00:18:12,919 --> 00:18:18,380
the server what everybody else sees all

00:18:15,740 --> 00:18:22,159
this other stuff in the middle B C and D

00:18:18,380 --> 00:18:24,950
is just complication it forces you to

00:18:22,159 --> 00:18:26,659
keep in your mind two and a half times

00:18:24,950 --> 00:18:30,889
more information than you really need

00:18:26,659 --> 00:18:33,710
and you know every one of us has a

00:18:30,889 --> 00:18:37,029
finite number of brain cycles you can

00:18:33,710 --> 00:18:39,710
only think about so much at a time and

00:18:37,029 --> 00:18:41,450
my view is the version control system

00:18:39,710 --> 00:18:44,630
should get out of your way and use as

00:18:41,450 --> 00:18:47,090
few brain cycles as possible so that you

00:18:44,630 --> 00:18:47,779
can devote as many brain cycles as

00:18:47,090 --> 00:18:49,820
possible

00:18:47,779 --> 00:18:57,380
whatever project it is you're working on

00:18:49,820 --> 00:19:00,230
and having to keep in mind B C and D she

00:18:57,380 --> 00:19:02,659
seems to just be stealing cycles from

00:19:00,230 --> 00:19:05,090
from your normal thinking activity so

00:19:02,659 --> 00:19:06,919
one of the first things that I think

00:19:05,090 --> 00:19:10,220
really ought to go is and of course

00:19:06,919 --> 00:19:12,279
these things to be available in in the

00:19:10,220 --> 00:19:14,539
rare cases where they're actually needed

00:19:12,279 --> 00:19:17,120
one of the first things I think needs to

00:19:14,539 --> 00:19:18,559
go is the staging area I mean I talk to

00:19:17,120 --> 00:19:19,880
a lot of people about this and if you

00:19:18,559 --> 00:19:20,870
have any views I'd really like you to

00:19:19,880 --> 00:19:23,360
share them

00:19:20,870 --> 00:19:25,549
some people are fanatical about the get

00:19:23,360 --> 00:19:29,210
index is a great thing and ask them why

00:19:25,549 --> 00:19:32,679
and the usual answer is I get is that

00:19:29,210 --> 00:19:32,679
well it allows you to do a partial

00:19:32,970 --> 00:19:37,090
every other version control system in

00:19:35,710 --> 00:19:39,039
the world allows you to do a partial

00:19:37,090 --> 00:19:41,739
commit to and they don't have a staging

00:19:39,039 --> 00:19:46,809
area so I'm not sure why that's the

00:19:41,739 --> 00:19:49,419
advantage the the fact that you've got

00:19:46,809 --> 00:19:51,700
the differences between what you're

00:19:49,419 --> 00:19:52,659
committing to and the local and the

00:19:51,700 --> 00:19:57,190
remote head that these don't

00:19:52,659 --> 00:19:59,350
automatically stay in sync there may be

00:19:57,190 --> 00:20:01,539
cases where that would be a desirable

00:19:59,350 --> 00:20:04,090
thing but those are the exceptions not

00:20:01,539 --> 00:20:06,789
the rule usually when you want when you

00:20:04,090 --> 00:20:09,549
do a commit you'd like it to immediately

00:20:06,789 --> 00:20:10,929
yeah you keep it on your machine but

00:20:09,549 --> 00:20:13,269
you'd like it to immediately go out to

00:20:10,929 --> 00:20:15,789
the server so that everybody else can

00:20:13,269 --> 00:20:17,350
see it too now if sometimes you're off

00:20:15,789 --> 00:20:18,580
networking that doesn't work and so you

00:20:17,350 --> 00:20:20,049
have to be aware of these things but

00:20:18,580 --> 00:20:21,940
that's the exception not the rule the

00:20:20,049 --> 00:20:25,799
usual case is that you want to go

00:20:21,940 --> 00:20:28,029
immediately and automatically yes

00:20:25,799 --> 00:20:33,039
some people say that's not their usual

00:20:28,029 --> 00:20:34,840
case but you know the people the

00:20:33,039 --> 00:20:36,759
experience I have and you know when I

00:20:34,840 --> 00:20:39,429
was originally doing the distributed

00:20:36,759 --> 00:20:40,840
version control system doing my own work

00:20:39,429 --> 00:20:44,879
the same way where you would have to

00:20:40,840 --> 00:20:47,649
explicitly push as a separate step and

00:20:44,879 --> 00:20:49,690
we developed some experience with that

00:20:47,649 --> 00:20:52,109
after a while and we eventually found

00:20:49,690 --> 00:20:54,429
out that it works a whole lot better to

00:20:52,109 --> 00:20:58,450
automatically push so every time you

00:20:54,429 --> 00:21:00,999
commit it automatically pushes and this

00:20:58,450 --> 00:21:07,450
really solves a lot of problems in fact

00:21:00,999 --> 00:21:10,019
there were some some users on on the

00:21:07,450 --> 00:21:11,769
mailing list of my system recently and

00:21:10,019 --> 00:21:13,509
sometimes you can get in a race

00:21:11,769 --> 00:21:15,940
condition where two people commit at the

00:21:13,509 --> 00:21:19,450
same time are nearly at the same time

00:21:15,940 --> 00:21:21,909
and and there's a race to see who pushes

00:21:19,450 --> 00:21:24,489
first and it would automatically create

00:21:21,909 --> 00:21:26,230
a branch and everything and and they

00:21:24,489 --> 00:21:27,639
were upset about that that that they

00:21:26,230 --> 00:21:28,779
weren't getting in a feedback that there

00:21:27,639 --> 00:21:34,210
were two people committing at the same

00:21:28,779 --> 00:21:35,559
time and it goes beyond just automatic

00:21:34,210 --> 00:21:37,090
they want not only automatic but they

00:21:35,559 --> 00:21:39,159
want automatic notification that other

00:21:37,090 --> 00:21:40,419
people have committed as well and all

00:21:39,159 --> 00:21:43,619
this other thing this is what people

00:21:40,419 --> 00:21:43,619
really want in right

00:21:43,659 --> 00:21:50,769
number three it doesn't really store

00:21:47,049 --> 00:21:56,559
your branch history in the get world a

00:21:50,769 --> 00:22:01,119
branch is just a symbolic name for the

00:21:56,559 --> 00:22:04,299
most recent commit on the end of one of

00:22:01,119 --> 00:22:05,649
these commit chains and as you commit

00:22:04,299 --> 00:22:09,070
new things on there that that pointer

00:22:05,649 --> 00:22:10,779
moves so it doesn't really remember the

00:22:09,070 --> 00:22:13,330
name of the branch where it originally

00:22:10,779 --> 00:22:15,549
got committed now you can kind of use

00:22:13,330 --> 00:22:17,649
some inference and figure it out some of

00:22:15,549 --> 00:22:22,109
the tools will show you this but it's

00:22:17,649 --> 00:22:25,029
not really first client's branch history

00:22:22,109 --> 00:22:26,889
when you're doing analysis of foe and

00:22:25,029 --> 00:22:28,090
people come back to you and you need to

00:22:26,889 --> 00:22:29,950
go back and look at what was having two

00:22:28,090 --> 00:22:32,980
or three years ago you often want to

00:22:29,950 --> 00:22:35,830
know what branch was this chicken

00:22:32,980 --> 00:22:37,359
originally checked in on where was this

00:22:35,830 --> 00:22:40,029
originally what was the original name of

00:22:37,359 --> 00:22:42,070
the branch or what are all the

00:22:40,029 --> 00:22:44,080
historical branches that we'd handle in

00:22:42,070 --> 00:22:46,029
this project where they're starting and

00:22:44,080 --> 00:22:49,149
ending dates and how were they finally

00:22:46,029 --> 00:22:52,059
resolved where they merged are they

00:22:49,149 --> 00:22:56,200
still active were they abandoned what

00:22:52,059 --> 00:22:58,450
was the what was the solution ear list

00:22:56,200 --> 00:23:00,759
all the historical branches I want to do

00:22:58,450 --> 00:23:05,049
a bisect only over this particular

00:23:00,759 --> 00:23:10,029
branch so a lot of times what we do is

00:23:05,049 --> 00:23:12,519
by six very important to us so what will

00:23:10,029 --> 00:23:14,559
be somebody will want to implement a new

00:23:12,519 --> 00:23:16,720
feature and they'll do a sequence of

00:23:14,559 --> 00:23:20,519
check-ins in a branch and then they'll

00:23:16,720 --> 00:23:22,539
merge that branch on to the trunk and

00:23:20,519 --> 00:23:24,159
but then later on when we're doing a

00:23:22,539 --> 00:23:25,570
bisect we don't want to bisect into all

00:23:24,159 --> 00:23:27,519
these little incremental changes whether

00:23:25,570 --> 00:23:30,639
they're adding the feature we want just

00:23:27,519 --> 00:23:32,440
that one case where they added it but

00:23:30,639 --> 00:23:37,690
because there's no branch history and

00:23:32,440 --> 00:23:38,950
yet they there's there's no way to keep

00:23:37,690 --> 00:23:44,799
up with this you can have them make

00:23:38,950 --> 00:23:47,260
inferences based on on on on the commit

00:23:44,799 --> 00:23:49,150
logs but it's

00:23:47,260 --> 00:23:50,440
it there there's there's no permanent

00:23:49,150 --> 00:23:52,540
record of the name of the branch where

00:23:50,440 --> 00:23:54,070
things were committed I didn't think

00:23:52,540 --> 00:23:56,290
this is real important I asked for

00:23:54,070 --> 00:23:57,700
feedback from the user community a lot

00:23:56,290 --> 00:24:00,640
of people are saying this is my number

00:23:57,700 --> 00:24:07,930
one complaint and get if it forgets the

00:24:00,640 --> 00:24:10,780
name of my branch's number for multiple

00:24:07,930 --> 00:24:15,040
check outs from the same repository

00:24:10,780 --> 00:24:16,930
right now with get the working area is

00:24:15,040 --> 00:24:19,150
part of the repository you can only have

00:24:16,930 --> 00:24:21,070
one working area per repository if

00:24:19,150 --> 00:24:22,690
you're working on something you've got

00:24:21,070 --> 00:24:24,760
your project all taken apart you're in

00:24:22,690 --> 00:24:26,650
the middle of editing an email or phone

00:24:24,760 --> 00:24:29,110
call comes in it requires you to go back

00:24:26,650 --> 00:24:31,510
and look at something historical well

00:24:29,110 --> 00:24:33,970
you've got you can stash your work but

00:24:31,510 --> 00:24:35,680
that's that's kind of bad because you

00:24:33,970 --> 00:24:40,240
can only even even with the stash you're

00:24:35,680 --> 00:24:42,250
gonna lose context you can clone your

00:24:40,240 --> 00:24:43,450
repository to a new repository and then

00:24:42,250 --> 00:24:46,810
go back and look at the historical

00:24:43,450 --> 00:24:48,390
version in the plume but that's just any

00:24:46,810 --> 00:24:53,260
aim can work around it that way but it's

00:24:48,390 --> 00:24:56,050
unsatisfying it would be so much nicer

00:24:53,260 --> 00:24:57,460
if you just had a repository and then

00:24:56,050 --> 00:24:59,440
you can have multiple working

00:24:57,460 --> 00:25:03,030
directories sitting on different

00:24:59,440 --> 00:25:03,030
checkouts from that one repository

00:25:03,690 --> 00:25:08,350
people who have worked in both systems

00:25:06,220 --> 00:25:10,630
tell me repeatedly this is a very

00:25:08,350 --> 00:25:12,900
important thing to them multiple

00:25:10,630 --> 00:25:18,510
checkouts from the same repository

00:25:12,900 --> 00:25:18,510
sliced and cloned checkouts

00:25:19,680 --> 00:25:29,800
are sliced checkouts and clones excuse

00:25:22,690 --> 00:25:31,300
me so a slice would be this is this is

00:25:29,800 --> 00:25:35,350
kind of a feature that you had with

00:25:31,300 --> 00:25:39,790
subversion and CVS where you've got like

00:25:35,350 --> 00:25:41,620
a massively wide project like net bsd if

00:25:39,790 --> 00:25:46,630
you ever look at their repository they

00:25:41,620 --> 00:25:49,390
have the entire user space with 60,000

00:25:46,630 --> 00:25:51,670
different files all in one repository

00:25:49,390 --> 00:25:54,520
it's massive and most people don't want

00:25:51,670 --> 00:25:58,450
all 60,000 files they only want to look

00:25:54,520 --> 00:26:00,820
at one subdirectory the only one working

00:25:58,450 --> 00:26:02,830
on one side directory and so a slice

00:26:00,820 --> 00:26:04,509
check out me I want to check out or

00:26:02,830 --> 00:26:06,940
clone something but I don't want the

00:26:04,509 --> 00:26:11,799
entire repository I just want this one

00:26:06,940 --> 00:26:12,789
subdirectory wouldn't it be great if you

00:26:11,799 --> 00:26:15,639
could do that there's really no

00:26:12,789 --> 00:26:23,289
technical reason why you can't it's just

00:26:15,639 --> 00:26:25,750
that it isn't supported yes what is a so

00:26:23,289 --> 00:26:27,759
a shallow clone is where you clone a

00:26:25,750 --> 00:26:31,419
repository but you don't get all of its

00:26:27,759 --> 00:26:33,309
history um yeah that's that's another

00:26:31,419 --> 00:26:35,769
thing that's nice to have and that is a

00:26:33,309 --> 00:26:37,210
new feature hello fellow clansmen around

00:26:35,769 --> 00:26:40,929
it's just been like a year or two and

00:26:37,210 --> 00:26:42,820
then so um the other thing a lot of

00:26:40,929 --> 00:26:45,100
people request and it does support this

00:26:42,820 --> 00:26:48,100
now is that you've got a project that

00:26:45,100 --> 00:26:49,929
goes back ten years if I want to access

00:26:48,100 --> 00:26:51,519
this project why do I have to go to ten

00:26:49,929 --> 00:26:54,399
years of history can I get by with just

00:26:51,519 --> 00:26:56,860
loading two months of history and save

00:26:54,399 --> 00:26:58,600
bandwidth that's a shallow climb and

00:26:56,860 --> 00:27:00,220
they've got that but where else we're

00:26:58,600 --> 00:27:03,179
doing that a slice clone we're so

00:27:00,220 --> 00:27:06,639
shallow clone is slicing it this way a

00:27:03,179 --> 00:27:08,440
slice is doing it this way and so it

00:27:06,639 --> 00:27:18,460
would be nice to be able to do a slice

00:27:08,440 --> 00:27:20,740
and a shallow clone yes question so the

00:27:18,460 --> 00:27:22,419
the comment is that on some projects the

00:27:20,740 --> 00:27:24,190
directories move around and things

00:27:22,419 --> 00:27:27,009
change and so that slicing doesn't work

00:27:24,190 --> 00:27:29,919
as well there so don't slice on that

00:27:27,009 --> 00:27:31,840
project but on some projects like net

00:27:29,919 --> 00:27:35,590
bsd the directory structure stays the

00:27:31,840 --> 00:27:39,299
same for like 25 years and and and they

00:27:35,590 --> 00:27:50,380
want to do this sort of thing and and so

00:27:39,299 --> 00:27:53,050
yeah yes question the

00:27:50,380 --> 00:27:55,900
pointed point was raised the get

00:27:53,050 --> 00:27:57,940
solution are the district I'm gonna go

00:27:55,900 --> 00:27:59,410
beyond yet and just say the distributed

00:27:57,940 --> 00:28:01,120
version control solution because they

00:27:59,410 --> 00:28:04,690
all have this problem including when I

00:28:01,120 --> 00:28:06,310
read the the the distributed version

00:28:04,690 --> 00:28:08,500
control solution for this problem is to

00:28:06,310 --> 00:28:10,720
have separate repositories for each one

00:28:08,500 --> 00:28:12,610
of your little components that you might

00:28:10,720 --> 00:28:14,410
want to load yeah this kind of a

00:28:12,610 --> 00:28:15,640
workaround though isn't it because

00:28:14,410 --> 00:28:19,900
you've got that means you have to

00:28:15,640 --> 00:28:21,610
predict in advance which directors are

00:28:19,900 --> 00:28:25,300
going to be in interest as a separate

00:28:21,610 --> 00:28:28,000
piece and historically we've not been

00:28:25,300 --> 00:28:29,980
really good at predicting that so that's

00:28:28,000 --> 00:28:31,870
not it would be much better and the

00:28:29,980 --> 00:28:34,390
software could in theory do it it's just

00:28:31,870 --> 00:28:38,710
to be able to clone or check out a slice

00:28:34,390 --> 00:28:41,020
that would work check outs and commits

00:28:38,710 --> 00:28:42,790
against a remote repository right now in

00:28:41,020 --> 00:28:44,260
order to work and yet you have to make a

00:28:42,790 --> 00:28:46,320
clone and has to be on your local

00:28:44,260 --> 00:28:50,290
machine everything has to be local and

00:28:46,320 --> 00:28:53,020
I'm asking why is that well I know the

00:28:50,290 --> 00:28:54,970
technical reasons why but from a user's

00:28:53,020 --> 00:28:57,040
perspective that seems like an

00:28:54,970 --> 00:28:58,990
unnecessary burden now if you're an

00:28:57,040 --> 00:29:01,360
active developer yeah you do want your

00:28:58,990 --> 00:29:03,550
local copy and if you if you're going to

00:29:01,360 --> 00:29:04,840
be working off network definitely you

00:29:03,550 --> 00:29:07,270
want a local copy and that should

00:29:04,840 --> 00:29:08,980
probably be the default but if I'm just

00:29:07,270 --> 00:29:10,330
a low git hub somewhere and I see some

00:29:08,980 --> 00:29:12,400
interesting project and I want to look

00:29:10,330 --> 00:29:14,740
at it and look at the source code why do

00:29:12,400 --> 00:29:16,210
I have to include the entire 15-year

00:29:14,740 --> 00:29:18,010
history just to look at the latest

00:29:16,210 --> 00:29:21,510
version one can't I just check out

00:29:18,010 --> 00:29:23,650
directly from get up without cloning

00:29:21,510 --> 00:29:25,960
that seems like it's something to be

00:29:23,650 --> 00:29:28,570
really easy to do for that matter if I

00:29:25,960 --> 00:29:31,030
make a change why can't I one can I

00:29:28,570 --> 00:29:32,530
commit it back why do I yeah there are

00:29:31,030 --> 00:29:34,390
there advantages if you're doing a lot

00:29:32,530 --> 00:29:36,310
of work on a project it's certainly

00:29:34,390 --> 00:29:38,470
better to have it local but if it's just

00:29:36,310 --> 00:29:41,650
an occasional thing why why do I have to

00:29:38,470 --> 00:29:44,710
do that why can't I commit and go over a

00:29:41,650 --> 00:29:46,540
network okay the next one is a busybox

00:29:44,710 --> 00:29:50,020
version of good you know what busybox is

00:29:46,540 --> 00:29:54,190
who knows what busybox is busybox is of

00:29:50,020 --> 00:29:56,080
course the that single program that has

00:29:54,190 --> 00:29:58,570
all of the unit standard UNIX

00:29:56,080 --> 00:30:00,730
command-line utilities built-in now this

00:29:58,570 --> 00:30:02,530
is not a perfect analogy because busybox

00:30:00,730 --> 00:30:03,430
also has limitations it doesn't do the

00:30:02,530 --> 00:30:05,410
full thing

00:30:03,430 --> 00:30:10,090
but right now when you install get and

00:30:05,410 --> 00:30:14,380
installs what is it 134 different

00:30:10,090 --> 00:30:16,360
programs you know because each command

00:30:14,380 --> 00:30:18,910
is implemented by different executable

00:30:16,360 --> 00:30:20,440
and all of these little programs get put

00:30:18,910 --> 00:30:22,660
in a special directory somewhere and

00:30:20,440 --> 00:30:24,780
then the one get program looks at the

00:30:22,660 --> 00:30:27,820
arguments all I want to run this one

00:30:24,780 --> 00:30:35,080
it's got a huge number of dependencies

00:30:27,820 --> 00:30:36,730
it's this big pile of stuff and a lot of

00:30:35,080 --> 00:30:38,890
people tell me that they really want a

00:30:36,730 --> 00:30:42,250
version control system it's just an

00:30:38,890 --> 00:30:45,820
executable they download an executable

00:30:42,250 --> 00:30:48,240
yet sexy or yet if you're on Linux and

00:30:45,820 --> 00:30:50,350
you put it on your path and it works

00:30:48,240 --> 00:30:52,180
there's nothing's installed you don't

00:30:50,350 --> 00:30:54,310
have to have app yet if you want to

00:30:52,180 --> 00:30:56,820
upgrade you can put it in a changer jail

00:30:54,310 --> 00:30:58,780
if you want to upgrade you just

00:30:56,820 --> 00:31:00,730
overwrite the old one with the new one

00:30:58,780 --> 00:31:02,850
if you want to uninstall it you just

00:31:00,730 --> 00:31:05,170
delete the binary very simple

00:31:02,850 --> 00:31:09,040
whereas yet you really have something

00:31:05,170 --> 00:31:11,350
like app yet just to manage it this is

00:31:09,040 --> 00:31:14,200
you know you know a big pile of programs

00:31:11,350 --> 00:31:17,110
like that that's great for development

00:31:14,200 --> 00:31:18,700
it's great for an application it's works

00:31:17,110 --> 00:31:23,530
fine for development work ruin your

00:31:18,700 --> 00:31:25,240
prototyping but for a mature product

00:31:23,530 --> 00:31:26,980
that's 10 years old that everybody's

00:31:25,240 --> 00:31:29,680
using you'd think that there would be

00:31:26,980 --> 00:31:30,910
some better packaging for it you know so

00:31:29,680 --> 00:31:32,650
the pink ones just download it really

00:31:30,910 --> 00:31:34,210
quickly I hear a lot of people they work

00:31:32,650 --> 00:31:35,530
in companies where they're going on a

00:31:34,210 --> 00:31:37,810
trip they have to check out a laptop

00:31:35,530 --> 00:31:39,160
they don't have their own laptops you

00:31:37,810 --> 00:31:42,070
check out a laptop and it comes

00:31:39,160 --> 00:31:45,760
pre-configured and it doesn't have the

00:31:42,070 --> 00:31:48,130
version control system you want so for

00:31:45,760 --> 00:31:49,690
them they have to go and install yet

00:31:48,130 --> 00:31:51,040
wouldn't be better just to have a single

00:31:49,690 --> 00:31:59,680
binary they could just plot their on the

00:31:51,040 --> 00:32:03,250
machine all comes via HTTP or HTTPS so

00:31:59,680 --> 00:32:05,860
my wife is a faculty member at UNCC the

00:32:03,250 --> 00:32:08,290
local university and I go over on campus

00:32:05,860 --> 00:32:12,110
a lot and over there they have guest

00:32:08,290 --> 00:32:13,250
Wi-Fi niner-niner guest this man

00:32:12,110 --> 00:32:18,530
right here is probably in charge of

00:32:13,250 --> 00:32:21,260
known and yes so I am I am grateful I am

00:32:18,530 --> 00:32:25,700
great I am grateful for you know having

00:32:21,260 --> 00:32:30,049
the free Wi-Fi access but you know like

00:32:25,700 --> 00:32:31,670
so much of the world they confuse they

00:32:30,049 --> 00:32:35,809
think that the internet and the world

00:32:31,670 --> 00:32:38,330
wide web are the same thing that means

00:32:35,809 --> 00:32:43,549
that nine or guest only allows you to

00:32:38,330 --> 00:32:46,970
use TCP port 80 and 443 those are the

00:32:43,549 --> 00:32:49,669
only two options okay so you cannot

00:32:46,970 --> 00:32:52,490
secure shell into your back into your

00:32:49,669 --> 00:32:53,870
server and and furthermore you can't run

00:32:52,490 --> 00:32:56,650
any other protocols that don't learn

00:32:53,870 --> 00:32:59,510
every port 80 and don't look like HEV

00:32:56,650 --> 00:33:01,429
when you're online or guest and it's not

00:32:59,510 --> 00:33:04,100
just UNCC that does this there's a lot

00:33:01,429 --> 00:33:07,850
of places to do this I hear a lot of

00:33:04,100 --> 00:33:09,440
people they they they use my alternative

00:33:07,850 --> 00:33:12,140
version control system because it does

00:33:09,440 --> 00:33:14,000
just use HTTP and then we use it because

00:33:12,140 --> 00:33:20,960
it's the only one that will penetrate

00:33:14,000 --> 00:33:23,679
our corporate firewall you know there's

00:33:20,960 --> 00:33:26,419
nothing about yet they couldn't be

00:33:23,679 --> 00:33:31,010
finagled to work over HTTP it's just

00:33:26,419 --> 00:33:34,460
that they don't so I I think that's

00:33:31,010 --> 00:33:36,650
something to be very important may

00:33:34,460 --> 00:33:40,370
greatly improve their usability I think

00:33:36,650 --> 00:33:42,290
there needs to be a get all command this

00:33:40,370 --> 00:33:44,030
is the thing we did where it all means

00:33:42,290 --> 00:33:47,870
it works on all I keep track of all of

00:33:44,030 --> 00:33:50,419
your repositories as I said we have I

00:33:47,870 --> 00:33:52,820
have dozens of repositories open on my

00:33:50,419 --> 00:33:56,179
desktop in any particular point in time

00:33:52,820 --> 00:33:58,580
and I lose track of them I can't

00:33:56,179 --> 00:34:00,440
remember them all so I'm working all day

00:33:58,580 --> 00:34:02,059
and working on all these different

00:34:00,440 --> 00:34:05,480
projects on different repositories and

00:34:02,059 --> 00:34:08,540
get to the end of the day and I'd like

00:34:05,480 --> 00:34:09,859
to be able say get all status and it's

00:34:08,540 --> 00:34:11,780
gonna go around and it's gonna find all

00:34:09,859 --> 00:34:14,419
my repositories and it's gonna do a

00:34:11,780 --> 00:34:17,859
status on them to show me what I have it

00:34:14,419 --> 00:34:17,859
what I forgot to commit

00:34:18,660 --> 00:34:23,280
the way it would do this of course is

00:34:20,580 --> 00:34:24,780
there's already a dot get file in your

00:34:23,280 --> 00:34:29,310
home directory that keeps track isn't it

00:34:24,780 --> 00:34:30,720
called dot get they well in no in your

00:34:29,310 --> 00:34:33,690
in your home directory that keeps track

00:34:30,720 --> 00:34:34,760
of the your username and and all that

00:34:33,690 --> 00:34:37,230
stuff

00:34:34,760 --> 00:34:39,300
dot yet config ok so there's already

00:34:37,230 --> 00:34:41,100
that file and every time you run a git

00:34:39,300 --> 00:34:44,370
command it's going to consult that file

00:34:41,100 --> 00:34:45,840
it's gonna read it so and and people

00:34:44,370 --> 00:34:47,460
complain what you can't keep track of

00:34:45,840 --> 00:34:49,560
all other repositories because you can

00:34:47,460 --> 00:34:50,640
freely move them around so buddy just do

00:34:49,560 --> 00:34:53,280
a move man and move it to a different

00:34:50,640 --> 00:34:55,320
place and that's fine so this the dot

00:34:53,280 --> 00:34:56,580
git config keeps track of the last known

00:34:55,320 --> 00:34:59,370
position of a man

00:34:56,580 --> 00:35:02,430
so every time you run a git command it

00:34:59,370 --> 00:35:04,740
says ok this repository I just read git

00:35:02,430 --> 00:35:06,600
config is my repository that I'm working

00:35:04,740 --> 00:35:09,090
on is it listed and they get config

00:35:06,600 --> 00:35:11,430
usually it will be if it's not let's add

00:35:09,090 --> 00:35:12,990
it and then when you run again all

00:35:11,430 --> 00:35:16,680
command it actually goes down the list

00:35:12,990 --> 00:35:17,970
of possible git repositories but then it

00:35:16,680 --> 00:35:20,040
checked each one to see if it still is

00:35:17,970 --> 00:35:21,930
because you might have moved it away so

00:35:20,040 --> 00:35:25,470
this is easy to implement and it's not

00:35:21,930 --> 00:35:28,200
so it's not a 100% but in practice it

00:35:25,470 --> 00:35:30,840
works well enough so like I'm working on

00:35:28,200 --> 00:35:32,730
my desktop and of course I don't use yep

00:35:30,840 --> 00:35:34,530
I use a different system but if I were

00:35:32,730 --> 00:35:36,030
using hit and we're going on my desktop

00:35:34,530 --> 00:35:39,000
and I'm getting ready to go on the road

00:35:36,030 --> 00:35:42,900
and I got all these things here I can do

00:35:39,000 --> 00:35:44,070
get all push it pushes everything out to

00:35:42,900 --> 00:35:48,270
the server and then I go over to my

00:35:44,070 --> 00:35:50,520
laptop and to get all pull and to make

00:35:48,270 --> 00:35:52,830
sure that everything is synced and then

00:35:50,520 --> 00:35:55,650
I can go off network on my laptop and I

00:35:52,830 --> 00:35:57,660
don't have to worry that I forgot about

00:35:55,650 --> 00:36:01,500
one of the critical projects one of my

00:35:57,660 --> 00:36:05,760
critical repos it's a very important

00:36:01,500 --> 00:36:06,870
thing and finally get serve no that's

00:36:05,760 --> 00:36:12,020
not finally there's a bonus question

00:36:06,870 --> 00:36:14,220
again get sir this anybody use mercurial

00:36:12,020 --> 00:36:19,770
you know about the serve command do you

00:36:14,220 --> 00:36:21,750
use HG serve ok and the comment from the

00:36:19,770 --> 00:36:24,750
from the audience was this is exactly

00:36:21,750 --> 00:36:27,090
why we use mercurial rather than he is

00:36:24,750 --> 00:36:30,660
because it has a serve command so what

00:36:27,090 --> 00:36:32,069
this does is it kicks up a

00:36:30,660 --> 00:36:35,339
you know mercurial doesn't really go far

00:36:32,069 --> 00:36:38,700
enough in my view let me tell you so so

00:36:35,339 --> 00:36:41,009
if you do hg sir it starts up a a web

00:36:38,700 --> 00:36:42,660
server a little web server running there

00:36:41,009 --> 00:36:46,440
and then you can point your web browser

00:36:42,660 --> 00:36:50,700
at it and lots of really useful

00:36:46,440 --> 00:36:52,440
informations about your repository but

00:36:50,700 --> 00:36:55,769
one I implement for my system goes one

00:36:52,440 --> 00:36:59,069
step further when you type fossil UI it

00:36:55,769 --> 00:37:01,380
starts up the server and it also causes

00:36:59,069 --> 00:37:04,979
your favorite web browser to pop up on

00:37:01,380 --> 00:37:06,809
that page okay so there's so when

00:37:04,979 --> 00:37:08,039
mercurial is a two-step process you have

00:37:06,809 --> 00:37:10,380
to start the server and then you have to

00:37:08,039 --> 00:37:12,210
type the URL into the web browser mind

00:37:10,380 --> 00:37:13,710
does them both in one step but the point

00:37:12,210 --> 00:37:15,869
is there's this very rich environment

00:37:13,710 --> 00:37:18,539
you know I know that you there are lots

00:37:15,869 --> 00:37:22,109
of tools out there for giving you a web

00:37:18,539 --> 00:37:23,779
interface to your git repository and but

00:37:22,109 --> 00:37:26,220
you know what their separate install

00:37:23,779 --> 00:37:28,470
they usually required that you also have

00:37:26,220 --> 00:37:30,239
a patchy there too and there's lots of

00:37:28,470 --> 00:37:34,049
requirements and there's a big set up

00:37:30,239 --> 00:37:35,779
and it's you know and you and people do

00:37:34,049 --> 00:37:37,710
it on a server or something like that

00:37:35,779 --> 00:37:39,839
because you know that you've taken the

00:37:37,710 --> 00:37:42,299
time to set it up but wouldn't it be

00:37:39,839 --> 00:37:44,009
really cool if every time you had a

00:37:42,299 --> 00:37:45,569
repository you automatically had a

00:37:44,009 --> 00:37:47,519
server you could just say git serve

00:37:45,569 --> 00:37:49,799
immediately your web browser pops up and

00:37:47,519 --> 00:37:51,150
you got all this graphical historical

00:37:49,799 --> 00:37:54,869
information that you just click around

00:37:51,150 --> 00:37:56,849
and find if you had that if you have

00:37:54,869 --> 00:38:00,210
been using this for a couple of weeks I

00:37:56,849 --> 00:38:01,710
promise that you would never you you

00:38:00,210 --> 00:38:05,180
would never believe that you've got one

00:38:01,710 --> 00:38:08,039
without it this is a very amazing thing

00:38:05,180 --> 00:38:09,869
I'm probably blazing through these lines

00:38:08,039 --> 00:38:13,680
way faster than how much more time do I

00:38:09,869 --> 00:38:15,779
have ninety minutes a lot of answered

00:38:13,680 --> 00:38:20,519
questions and answers but I do have one

00:38:15,779 --> 00:38:22,200
bonus feature this is a thing that I

00:38:20,519 --> 00:38:23,940
never personally needed but I hear from

00:38:22,200 --> 00:38:28,440
a lot of people they would really like

00:38:23,940 --> 00:38:29,999
to have advisory logs what do I mean by

00:38:28,440 --> 00:38:32,759
this this is coming from the game

00:38:29,999 --> 00:38:36,499
development community when you're

00:38:32,759 --> 00:38:41,950
developing with ASCII text files the

00:38:36,499 --> 00:38:44,349
they let me take you back

00:38:41,950 --> 00:38:47,290
to some of the older version control

00:38:44,349 --> 00:38:49,000
systems and this if if you're if you're

00:38:47,290 --> 00:38:53,079
younger than me you may not remember

00:38:49,000 --> 00:38:56,349
some of these so those things like SCC s

00:38:53,079 --> 00:38:58,839
an RCS and the way these things worked

00:38:56,349 --> 00:39:01,329
is that when you would do a check out

00:38:58,839 --> 00:39:04,390
all your files would come out read-only

00:39:01,329 --> 00:39:07,030
you couldn't edit them and if you wanted

00:39:04,390 --> 00:39:09,910
to change a file you had to do a special

00:39:07,030 --> 00:39:12,250
check out for editing which would then

00:39:09,910 --> 00:39:13,450
lock the file so that nobody else only

00:39:12,250 --> 00:39:16,480
one person could have a check out for

00:39:13,450 --> 00:39:18,579
editing in return and that way you would

00:39:16,480 --> 00:39:20,020
never get a conflict of any kind because

00:39:18,579 --> 00:39:23,290
only one person would be editing a file

00:39:20,020 --> 00:39:25,030
at a time of course the big downfall of

00:39:23,290 --> 00:39:27,940
that approach is that somebody would

00:39:25,030 --> 00:39:29,829
check something out for editing and then

00:39:27,940 --> 00:39:33,069
immediately leave for two-week vacation

00:39:29,829 --> 00:39:34,660
and and so we then we'd have to go

00:39:33,069 --> 00:39:40,329
running around finding an administrator

00:39:34,660 --> 00:39:42,730
to unlock it and so forth but and so CVS

00:39:40,329 --> 00:39:44,770
came along and it gave you the ability

00:39:42,730 --> 00:39:47,380
to just edit without anything to check

00:39:44,770 --> 00:39:50,079
out for editing and that was the coolest

00:39:47,380 --> 00:39:52,839
teacher in the world that was just

00:39:50,079 --> 00:39:55,390
amazing I know that it's very popular

00:39:52,839 --> 00:39:58,450
these days for people be bad-mouthing

00:39:55,390 --> 00:40:00,160
CVS and I recognize that CVS has

00:39:58,450 --> 00:40:03,400
limitations and it is an older

00:40:00,160 --> 00:40:04,780
technology but if you've ever you know

00:40:03,400 --> 00:40:07,299
those of us who have had to use what

00:40:04,780 --> 00:40:13,839
came before CVS will never speak ill of

00:40:07,299 --> 00:40:16,059
CVS so but and but so now we have all

00:40:13,839 --> 00:40:18,250
this really cool merging stuff so that

00:40:16,059 --> 00:40:19,780
you you you know when two people make

00:40:18,250 --> 00:40:22,000
simultaneous changes they get merged

00:40:19,780 --> 00:40:24,369
together that works great for text files

00:40:22,000 --> 00:40:27,010
it does not work for JPEGs it does not

00:40:24,369 --> 00:40:30,280
work for EM pegs it does not work for

00:40:27,010 --> 00:40:32,140
these binary resources that are a big

00:40:30,280 --> 00:40:34,660
part of game development for example but

00:40:32,140 --> 00:40:38,349
also other things and so a lot of people

00:40:34,660 --> 00:40:39,730
would love to have the ability to in in

00:40:38,349 --> 00:40:42,790
in the main server

00:40:39,730 --> 00:40:46,780
the central repository put in advisory

00:40:42,790 --> 00:40:49,140
license I'm editing this JPEG and so if

00:40:46,780 --> 00:40:51,910
somebody else wants to edit that JPEG

00:40:49,140 --> 00:40:53,829
they'll get a warning now it's an

00:40:51,910 --> 00:40:54,860
advisory lock so that you know if they

00:40:53,829 --> 00:40:56,840
start

00:40:54,860 --> 00:40:58,520
and then go on vacation you don't have

00:40:56,840 --> 00:41:01,490
to go run up an administrator in order

00:40:58,520 --> 00:41:06,410
to fix it but it still gives you it

00:41:01,490 --> 00:41:09,590
helps you to coordinate editing of

00:41:06,410 --> 00:41:12,070
binary resources that way so there's

00:41:09,590 --> 00:41:15,380
we've had a progression of open-source

00:41:12,070 --> 00:41:18,740
version control systems I mean in the

00:41:15,380 --> 00:41:21,470
old days there's a CCS and RCS and then

00:41:18,740 --> 00:41:23,600
there were CVS and subversion which were

00:41:21,470 --> 00:41:25,100
huge huge innovations and think it came

00:41:23,600 --> 00:41:26,540
along you know it was really based on

00:41:25,100 --> 00:41:28,330
this thing called monotone which I think

00:41:26,540 --> 00:41:31,460
really kind of pioneered the idea of

00:41:28,330 --> 00:41:33,440
distributed version control systems but

00:41:31,460 --> 00:41:36,320
so but yet was the one that was

00:41:33,440 --> 00:41:38,270
successful and but that's team that's

00:41:36,320 --> 00:41:41,180
been 10 years and in the question what

00:41:38,270 --> 00:41:44,330
is and get his really other than the

00:41:41,180 --> 00:41:46,850
other than adding a few features around

00:41:44,330 --> 00:41:48,290
the edge of such as a shallow clone it

00:41:46,850 --> 00:41:53,000
really has an advanced in you in ten

00:41:48,290 --> 00:41:54,470
years it has anything new much and so my

00:41:53,000 --> 00:41:57,410
question is what is going to come next

00:41:54,470 --> 00:41:59,960
I've outlined some ideas here about what

00:41:57,410 --> 00:42:02,720
I think the direction I think version

00:41:59,960 --> 00:42:05,170
control needs to go I'm hopeful that

00:42:02,720 --> 00:42:07,970
some of you guys might be interested in

00:42:05,170 --> 00:42:12,470
going out and hacking on it and

00:42:07,970 --> 00:42:16,400
implementing some of these ideas maybe

00:42:12,470 --> 00:42:19,030
somebody who's watching the video would

00:42:16,400 --> 00:42:22,400
see this if you have other ideas

00:42:19,030 --> 00:42:25,490
criticisms or complaint if you think

00:42:22,400 --> 00:42:28,010
that I'm completely hear from you again

00:42:25,490 --> 00:42:30,310
I don't use it on a daily basis I use a

00:42:28,010 --> 00:42:33,260
different system that I wrote myself and

00:42:30,310 --> 00:42:34,640
so I'm just I can be some somewhat out

00:42:33,260 --> 00:42:36,350
of touch if you if you think I'm

00:42:34,640 --> 00:42:38,360
completely off-base I really do want to

00:42:36,350 --> 00:42:40,790
understand your point of view so please

00:42:38,360 --> 00:42:42,890
give me feedback that is the extent of

00:42:40,790 --> 00:42:46,700
my talk and so I will be happy to take

00:42:42,890 --> 00:42:51,800
questions comments criticisms at this

00:42:46,700 --> 00:42:54,110
point so we already said you got a

00:42:51,800 --> 00:42:55,610
question in the mat no no I was going to

00:42:54,110 --> 00:42:57,280
say we've already established everybody

00:42:55,610 --> 00:42:59,690
here is using it is that correct

00:42:57,280 --> 00:43:02,930
who's also using subversion raise your

00:42:59,690 --> 00:43:06,970
hand if you are a current or a current

00:43:02,930 --> 00:43:12,040
subversion user a former subversion user

00:43:06,970 --> 00:43:15,849
okay CBS Kurtz of CBS users nobodies

00:43:12,040 --> 00:43:19,650
still using CBS former CBS users some

00:43:15,849 --> 00:43:23,140
material material who's using material

00:43:19,650 --> 00:43:30,030
something different call that what you

00:43:23,140 --> 00:43:35,440
got dark sand RC RC s not sure enough I

00:43:30,030 --> 00:43:37,450
just won fine okay yes okay well you

00:43:35,440 --> 00:43:38,800
know what I even you know even when I

00:43:37,450 --> 00:43:42,099
have just one file I'll set up a

00:43:38,800 --> 00:43:43,930
repository for that one file and then I

00:43:42,099 --> 00:43:46,329
will also set up a clone on the server

00:43:43,930 --> 00:43:48,400
somewhere and then my system every time

00:43:46,329 --> 00:43:52,930
I do a check-in pushes it and that's my

00:43:48,400 --> 00:43:57,700
backup so you know anyway a different

00:43:52,930 --> 00:44:07,089
one perforce how do you like perforce it

00:43:57,700 --> 00:44:09,010
gets the job done okay yeah okay another

00:44:07,089 --> 00:44:11,800
one of a very obscure and called fossil

00:44:09,010 --> 00:44:12,550
that I might not have heard of yeah okay

00:44:11,800 --> 00:44:16,450
great

00:44:12,550 --> 00:44:19,780
yeah so um what are your present are you

00:44:16,450 --> 00:44:23,260
happy with yet I see a lot of heads

00:44:19,780 --> 00:44:37,450
going this way you're handy with yet you

00:44:23,260 --> 00:44:40,210
like it okay so the comment was his

00:44:37,450 --> 00:44:42,849
problem with yet is that it's not get

00:44:40,210 --> 00:44:44,740
itself it as other people you invested a

00:44:42,849 --> 00:44:47,470
lot of time to learn all of the obscure

00:44:44,740 --> 00:44:49,210
commands to learn the tree structure and

00:44:47,470 --> 00:44:53,890
so now you can get around and get pretty

00:44:49,210 --> 00:44:55,900
well and other people come along after

00:44:53,890 --> 00:44:58,839
him and blows everything a mess up your

00:44:55,900 --> 00:45:02,700
repository right yeah okay do you think

00:44:58,839 --> 00:45:02,700
it's fair that you know people like

00:45:03,030 --> 00:45:06,339
because a lot of people use version

00:45:04,750 --> 00:45:08,890
control other than programmers I mean

00:45:06,339 --> 00:45:12,579
their data scientists and your are you

00:45:08,890 --> 00:45:13,930
and your not uses so a lot of people

00:45:12,579 --> 00:45:16,869
need to use version control other than

00:45:13,930 --> 00:45:18,579
programmers you know there's we I wish

00:45:16,869 --> 00:45:19,670
that more scientists would use version

00:45:18,579 --> 00:45:21,349
control

00:45:19,670 --> 00:45:25,849
wish that climate scientists would use

00:45:21,349 --> 00:45:28,040
version control okay there you go but

00:45:25,849 --> 00:45:29,660
you know it gets hard to use you have to

00:45:28,040 --> 00:45:31,160
you have to spend a lot of time learning

00:45:29,660 --> 00:45:32,540
all these obscure commands to go between

00:45:31,160 --> 00:45:37,579
the five different things that you have

00:45:32,540 --> 00:45:39,440
to keep in mind and so one of the one of

00:45:37,579 --> 00:45:40,730
the funny quotes that didn't didn't tell

00:45:39,440 --> 00:45:42,260
you about was I'll get to in just a

00:45:40,730 --> 00:45:43,700
second one of the funny quotes that I

00:45:42,260 --> 00:45:46,369
have that I didn't have a slide for was

00:45:43,700 --> 00:45:48,470
I'm in order to effectively use git I'm

00:45:46,369 --> 00:45:54,380
waiting for Emory you have to have the

00:45:48,470 --> 00:45:56,480
man page tattooed on your arm yeah and

00:45:54,380 --> 00:45:58,700
and and for the video people the

00:45:56,480 --> 00:46:03,650
audience was saying yes you do okay come

00:45:58,700 --> 00:46:06,260
yet Oh question we wish that Congress

00:46:03,650 --> 00:46:09,680
would use version control and we have

00:46:06,260 --> 00:46:26,000
applause from the audience yes question

00:46:09,680 --> 00:46:27,530
coming all right the comment from the

00:46:26,000 --> 00:46:29,510
audience was that he looked at the

00:46:27,530 --> 00:46:31,730
online documentation for say yet push

00:46:29,510 --> 00:46:33,619
which is a command which is very common

00:46:31,730 --> 00:46:38,960
it's not something obscure and the

00:46:33,619 --> 00:46:41,210
documentation makes no sense yep

00:46:38,960 --> 00:46:43,369
push rest to remote repository what does

00:46:41,210 --> 00:46:44,869
that mean really this is this goes back

00:46:43,369 --> 00:46:47,059
to the first moment where you have to

00:46:44,869 --> 00:46:48,470
you know the best way to learn get is to

00:46:47,059 --> 00:46:51,140
start with the data structures and then

00:46:48,470 --> 00:46:55,309
work up to the commands yeah and you're

00:46:51,140 --> 00:46:56,839
right and and if you're not a program if

00:46:55,309 --> 00:46:58,400
you're not hardcore if you're not a

00:46:56,839 --> 00:47:00,589
Klingon warrior

00:46:58,400 --> 00:47:26,000
you shouldn't have to learn this stuff

00:47:00,589 --> 00:47:27,470
that's the point yes all right so I'm

00:47:26,000 --> 00:47:30,349
going to try to summarize that remarks

00:47:27,470 --> 00:47:31,790
teaches robotics high school students

00:47:30,349 --> 00:47:35,780
their new program

00:47:31,790 --> 00:47:39,920
and it is so complex it's just beyond

00:47:35,780 --> 00:47:44,150
the ability of a newbie to obtain it's

00:47:39,920 --> 00:47:45,740
just a barrier to entry you need to be a

00:47:44,150 --> 00:47:51,500
kernel hacker in order to really

00:47:45,740 --> 00:47:53,180
understand it but on the other hand we

00:47:51,500 --> 00:47:55,520
need to be teaching new programmers

00:47:53,180 --> 00:47:57,110
version control as a core skill and they

00:47:55,520 --> 00:48:00,950
take one look at it and turn around and

00:47:57,110 --> 00:48:13,970
change their major to history yes coming

00:48:00,950 --> 00:48:16,250
in the back yeah okay I'll just go ahead

00:48:13,970 --> 00:48:19,370
and say where the I develop the fossil

00:48:16,250 --> 00:48:48,800
so yeah so get in the in fossil right

00:48:19,370 --> 00:48:52,250
okay so the comment was that that get

00:48:48,800 --> 00:48:56,330
and fossil and also mercurial and

00:48:52,250 --> 00:49:00,920
monotone are commits oriented whereas

00:48:56,330 --> 00:49:03,800
darhk's is patch oriented and can I

00:49:00,920 --> 00:49:05,300
comment on that and what what we should

00:49:03,800 --> 00:49:07,040
do is you and I should get together over

00:49:05,300 --> 00:49:10,070
lunch and you because I have never

00:49:07,040 --> 00:49:13,250
really understood darks and I tried but

00:49:10,070 --> 00:49:23,300
it just wasn't making sense to me so in

00:49:13,250 --> 00:49:24,680
in if you look at a graph the patches

00:49:23,300 --> 00:49:27,440
are just the arcs between the nodes

00:49:24,680 --> 00:49:29,840
right and so darks is really focused on

00:49:27,440 --> 00:49:32,900
the arcs whereas gets focused on the

00:49:29,840 --> 00:49:36,220
nodes is there is there a difference

00:49:32,900 --> 00:49:36,220
here than I'm missing

00:49:51,380 --> 00:50:01,109
mm-hmm I'm gonna friend all right so so

00:49:59,339 --> 00:50:03,059
the point was made that the darks can

00:50:01,109 --> 00:50:05,190
answer questions that yet cannot answer

00:50:03,059 --> 00:50:07,019
and to just kind of summarize the

00:50:05,190 --> 00:50:09,089
remarks I think it's that some the idea

00:50:07,019 --> 00:50:11,130
of keeping track of patches works better

00:50:09,089 --> 00:50:12,690
for some people's way of thinking than

00:50:11,130 --> 00:50:15,150
keeping track of commits and that may be

00:50:12,690 --> 00:50:17,819
the case and I'm not opposed to that

00:50:15,150 --> 00:50:20,430
I'm just see I'm not here to tear down

00:50:17,819 --> 00:50:23,489
yet I'm trying to make it better and

00:50:20,430 --> 00:50:26,699
hopefully improve this and really if it

00:50:23,489 --> 00:50:28,979
gets good enough I'll confer all of my

00:50:26,699 --> 00:50:31,199
fossil repositories over to get and just

00:50:28,979 --> 00:50:33,719
start using that but right now it's not

00:50:31,199 --> 00:50:38,130
anything close to where I need it to be

00:50:33,719 --> 00:50:40,049
so my point is to improve it for

00:50:38,130 --> 00:50:51,029
everybody any other comments or remarks

00:50:40,049 --> 00:50:54,539
questions yes oh yes there's the famous

00:50:51,029 --> 00:50:56,339
get man page generator yeah I should

00:50:54,539 --> 00:50:57,539
have made a link to that to see me see

00:50:56,339 --> 00:50:59,940
me down because I want to put that in

00:50:57,539 --> 00:51:01,410
his every of this talk again I also you

00:50:59,940 --> 00:51:05,329
know those who never had a if you've

00:51:01,410 --> 00:51:05,329
using it who's ever had a detached head

00:51:06,469 --> 00:51:11,549
yeah did you know I just want to get

00:51:09,989 --> 00:51:13,819
back to my first point if you had this

00:51:11,549 --> 00:51:16,369
relational database keeping track of it

00:51:13,819 --> 00:51:22,380
detached head becomes an impossibility

00:51:16,369 --> 00:51:26,869
there are no more detached heads it

00:51:22,380 --> 00:51:26,869
completely solves the dementia problem I

00:51:27,199 --> 00:51:32,609
meant to mention it when I just forgot

00:51:30,079 --> 00:51:34,319
we've come up with in addition to fixing

00:51:32,609 --> 00:51:36,390
yet we need to come up with a new aid

00:51:34,319 --> 00:51:38,699
for presenters so that we can have

00:51:36,390 --> 00:51:45,719
points that we you know reminders here

00:51:38,699 --> 00:51:50,180
on the screen to tell us all right and

00:51:45,719 --> 00:51:55,160
in in and get master here tells me that

00:51:50,180 --> 00:51:55,160
he does detached heads on purpose

00:52:04,380 --> 00:52:14,440
yeah yeah one person saying he likes

00:52:13,270 --> 00:52:15,810
detention it's cuz he does them on

00:52:14,440 --> 00:52:17,800
purpose and then somebody else says

00:52:15,810 --> 00:52:21,099
detectives are all fun and games until

00:52:17,800 --> 00:52:22,270
you do it without meaning to and it will

00:52:21,099 --> 00:52:28,119
eventually garbage collect your

00:52:22,270 --> 00:52:29,589
detention kids wanted yeah so so your

00:52:28,119 --> 00:52:33,640
detentions will go away

00:52:29,589 --> 00:52:36,520
yes okay but but with an approach like

00:52:33,640 --> 00:52:37,900
this detached kids just appear you know

00:52:36,520 --> 00:52:40,270
in the little grants that you get with

00:52:37,900 --> 00:52:41,680
your your graphical interface the

00:52:40,270 --> 00:52:43,240
initiation is a nice little grant for

00:52:41,680 --> 00:52:45,130
your history that is hatch kids just

00:52:43,240 --> 00:52:46,839
appear there and you can click on them

00:52:45,130 --> 00:52:48,160
and see what they're about it's not some

00:52:46,839 --> 00:52:50,109
mystery that you have to go dig up out

00:52:48,160 --> 00:52:54,069
of a log you don't have to remember that

00:52:50,109 --> 00:52:57,520
they're there it just shows you and you

00:52:54,069 --> 00:52:59,849
never lose them any other comments

00:52:57,520 --> 00:53:04,420
questions if you wanna know more about

00:52:59,849 --> 00:53:05,680
the alternative you can meet me in the

00:53:04,420 --> 00:53:08,470
mall we have to give you demonstrations

00:53:05,680 --> 00:53:25,960
and a sales talk thank you for coming

00:53:08,470 --> 00:53:27,280
enjoy the conference if the videos still

00:53:25,960 --> 00:53:28,599
going I'm getting reports from the

00:53:27,280 --> 00:53:36,599
audience that the main page generator

00:53:28,599 --> 00:53:36,599
forget is very funny mute this

00:54:11,579 --> 00:54:13,640
you

00:54:59,170 --> 00:55:03,410
your customers rely on your website or

00:55:01,910 --> 00:55:06,080
application if it's slower

00:55:03,410 --> 00:55:08,869
non-responsive it infuriates your users

00:55:06,080 --> 00:55:10,580
and costs you money keeping your

00:55:08,869 --> 00:55:14,050
business critical systems humming along

00:55:10,580 --> 00:55:16,870
requires insight into what they're doing

00:55:14,050 --> 00:55:18,880
your system metrics tell stories stories

00:55:16,870 --> 00:55:21,130
that can reveal performance bottlenecks

00:55:18,880 --> 00:55:23,440
resource limitations and other problems

00:55:21,130 --> 00:55:25,540
but how do you keep an eye on all of

00:55:23,440 --> 00:55:27,760
your systems performance metrics in real

00:55:25,540 --> 00:55:30,700
time and record this data for later

00:55:27,760 --> 00:55:32,650
analysis enter long view the new way to

00:55:30,700 --> 00:55:34,690
see what's really going on under the

00:55:32,650 --> 00:55:36,880
hood the long view dashboard lets you

00:55:34,690 --> 00:55:39,010
visualize the status of all your systems

00:55:36,880 --> 00:55:41,800
providing you with a bird's-eye view of

00:55:39,010 --> 00:55:44,740
your entire fleet you can sort by CPU

00:55:41,800 --> 00:55:47,440
memory swap processes load and network

00:55:44,740 --> 00:55:49,750
usage click a specific system to access

00:55:47,440 --> 00:55:51,790
its individual dashboard then click and

00:55:49,750 --> 00:55:54,760
drag to zoom in on chokepoints and get

00:55:51,790 --> 00:55:56,770
more detail comprehensive Network data

00:55:54,760 --> 00:55:59,380
including inbound and outbound traffic

00:55:56,770 --> 00:56:01,360
is available on the network tab and disk

00:55:59,380 --> 00:56:03,610
rights and free space on the disk stab

00:56:01,360 --> 00:56:05,800
while the process Explorer displays

00:56:03,610 --> 00:56:08,380
usage statistics for individual

00:56:05,800 --> 00:56:10,510
processes the system info tab shows

00:56:08,380 --> 00:56:12,880
listening services active connections

00:56:10,510 --> 00:56:15,010
and available updates adding longview to

00:56:12,880 --> 00:56:17,260
a system is easy just click the button

00:56:15,010 --> 00:56:19,060
copy the one-line installation command

00:56:17,260 --> 00:56:21,580
then run the command on your Linux

00:56:19,060 --> 00:56:23,440
system to complete the process the agent

00:56:21,580 --> 00:56:25,360
will begin collecting data and sending

00:56:23,440 --> 00:56:28,750
it to long view then the graphs start

00:56:25,360 --> 00:56:31,120
rolling use long view to gain visibility

00:56:28,750 --> 00:56:35,550
into your servers so when your website

00:56:31,120 --> 00:56:35,550
or app heats up it stays up

00:57:05,390 --> 00:57:09,630
citrix xenserver gives you everything

00:57:07,530 --> 00:57:12,540
you need to integrate manage and

00:57:09,630 --> 00:57:14,670
automate a virtual data center all on an

00:57:12,540 --> 00:57:17,070
enterprise class cloud proven virtual

00:57:14,670 --> 00:57:19,710
platform and at a third of the cost of

00:57:17,070 --> 00:57:21,510
other solutions but why even bother with

00:57:19,710 --> 00:57:23,670
virtualizing your server infrastructure

00:57:21,510 --> 00:57:25,620
in the first place well let's say you

00:57:23,670 --> 00:57:27,900
have a traditional one server to one

00:57:25,620 --> 00:57:29,940
application architecture but you're

00:57:27,900 --> 00:57:32,460
running out of resources and performance

00:57:29,940 --> 00:57:34,790
is suffering once you order new server

00:57:32,460 --> 00:57:37,680
hardware you'll wait for delivery

00:57:34,790 --> 00:57:40,530
configure it install your business

00:57:37,680 --> 00:57:43,320
application stage and test the server

00:57:40,530 --> 00:57:45,450
and finally add it to your production

00:57:43,320 --> 00:57:47,760
farm if you've been through this process

00:57:45,450 --> 00:57:50,250
before you know it can take weeks or

00:57:47,760 --> 00:57:52,110
even months you also know it's a

00:57:50,250 --> 00:57:54,090
manually intensive process that will

00:57:52,110 --> 00:57:57,360
burden your team every time you outgrow

00:57:54,090 --> 00:57:59,340
your current setup with a virtual server

00:57:57,360 --> 00:58:01,920
solution you could accomplish all of

00:57:59,340 --> 00:58:04,500
that in less than half a day server

00:58:01,920 --> 00:58:06,210
virtualization software separates the OS

00:58:04,500 --> 00:58:08,520
and application from the underlying

00:58:06,210 --> 00:58:10,950
server hardware and with multiple

00:58:08,520 --> 00:58:12,450
virtual machines on a single server you

00:58:10,950 --> 00:58:15,630
can use each of them to run different

00:58:12,450 --> 00:58:17,370
OSS and applications this makes it

00:58:15,630 --> 00:58:19,170
possible to move your virtual machines

00:58:17,370 --> 00:58:21,270
from one piece of hardware to another

00:58:19,170 --> 00:58:23,520
whenever you want to maximize

00:58:21,270 --> 00:58:25,500
utilization simplify maintenance or

00:58:23,520 --> 00:58:27,780
recover from a hardware failure and

00:58:25,500 --> 00:58:30,750
without slowing down your applications

00:58:27,780 --> 00:58:33,780
or users clearly server virtualization

00:58:30,750 --> 00:58:36,810
provides big benefits and Citrix

00:58:33,780 --> 00:58:38,250
XenServer provides even more since it's

00:58:36,810 --> 00:58:40,260
built on an open platform

00:58:38,250 --> 00:58:42,660
XenServer plays well with your existing

00:58:40,260 --> 00:58:45,030
hardware storage systems and IT

00:58:42,660 --> 00:58:46,560
management software as well as with the

00:58:45,030 --> 00:58:49,110
industry's leading cloud service

00:58:46,560 --> 00:58:50,640
providers best of all you can get

00:58:49,110 --> 00:58:52,620
started by downloading a fully

00:58:50,640 --> 00:58:55,620
functional production ready version of

00:58:52,620 --> 00:58:57,870
Zen server for free after a 10-minute

00:58:55,620 --> 00:58:59,670
installation process you'll see how easy

00:58:57,870 --> 00:59:01,530
it is to start virtualizing your

00:58:59,670 --> 00:59:03,960
workloads and automating your IT

00:59:01,530 --> 00:59:05,430
management processes and when you're

00:59:03,960 --> 00:59:07,560
ready for a richer set of management

00:59:05,430 --> 00:59:10,020
tools just upgrade to one of the premium

00:59:07,560 --> 00:59:11,820
editions of Zen server so whether you're

00:59:10,020 --> 00:59:13,830
interested in virtualizing servers for

00:59:11,820 --> 00:59:16,140
the first time expanding your server

00:59:13,830 --> 00:59:17,790
virtualization footprint or moving

00:59:16,140 --> 00:59:20,220
server workloads to the cloud

00:59:17,790 --> 00:59:21,990
download and install zests River today

00:59:20,220 --> 00:59:26,220
and see how it can help you simplify

00:59:21,990 --> 00:59:29,930
your IT environment Citrix XenServer do

00:59:26,220 --> 00:59:29,930
more don't spend more

01:00:58,670 --> 01:01:00,730

YouTube URL: https://www.youtube.com/watch?v=ghtpJnrdgbo


