Title: Barry Peddycord III - Living the Devops
Publication date: 2017-01-25
Playlist: 2015 SouthEast LinuxFest
Description: 
	
Captions: 
	00:00:02,420 --> 00:00:09,450
all right we life wonderful Wow very

00:00:06,450 --> 00:00:12,240
small crowd this morning aren't we party

00:00:09,450 --> 00:00:13,470
too hard last night all right well

00:00:12,240 --> 00:00:16,439
thanks so much for coming out to my

00:00:13,470 --> 00:00:17,730
presentation early risers my name is

00:00:16,439 --> 00:00:20,159
Barry peddicord and i'll be giving a

00:00:17,730 --> 00:00:22,230
presentation actually gave at a trial

00:00:20,159 --> 00:00:24,599
ugh the triangle x users group back in

00:00:22,230 --> 00:00:26,269
March so I've had practice with this one

00:00:24,599 --> 00:00:30,239
so hopefully it should be better than my

00:00:26,269 --> 00:00:31,529
presentation at cell at self last year a

00:00:30,239 --> 00:00:33,600
little bit about me before we get

00:00:31,529 --> 00:00:35,100
started pardon for the letterbox the

00:00:33,600 --> 00:00:37,200
presentations widescreen the screen is

00:00:35,100 --> 00:00:38,790
not so it'll be a little small here but

00:00:37,200 --> 00:00:41,970
luckily there will be the video

00:00:38,790 --> 00:00:44,280
recording you can follow up with so my

00:00:41,970 --> 00:00:45,390
name's very petty cord I am a two-time

00:00:44,280 --> 00:00:46,560
graduate of the computer science

00:00:45,390 --> 00:00:48,450
department North Carolina State

00:00:46,560 --> 00:00:50,430
University and Raleigh I got my

00:00:48,450 --> 00:00:53,040
bachelor's of science in 2011 and my

00:00:50,430 --> 00:00:55,800
masters in 2013 with a focus on

00:00:53,040 --> 00:00:57,930
cybersecurity and networking in general

00:00:55,800 --> 00:00:59,790
if you want to find me searching for the

00:00:57,930 --> 00:01:02,579
handle I share our comics will usually

00:00:59,790 --> 00:01:04,649
bring up something related to me and if

00:01:02,579 --> 00:01:07,890
you're interested in seeing sort of you

00:01:04,649 --> 00:01:09,960
know my my resume you can visit I show

00:01:07,890 --> 00:01:11,579
comics at org where I put that along

00:01:09,960 --> 00:01:14,280
with the slides and commentary for

00:01:11,579 --> 00:01:15,719
presentations I say that in kind of an

00:01:14,280 --> 00:01:17,969
idealistic sense because I promise that

00:01:15,719 --> 00:01:19,679
back in Martians don't have my slides up

00:01:17,969 --> 00:01:22,350
yet but maybe this will encourage me to

00:01:19,679 --> 00:01:24,630
get them up there and last year I gave a

00:01:22,350 --> 00:01:27,929
presentation about Faust and teaching

00:01:24,630 --> 00:01:29,999
and education I'm very very big on sort

00:01:27,929 --> 00:01:31,799
of you know education teaching computer

00:01:29,999 --> 00:01:33,929
science and I gave a presentation on

00:01:31,799 --> 00:01:36,899
some cool stuff I was doing with github

00:01:33,929 --> 00:01:38,369
Jenkins and automatic grading in fact

00:01:36,899 --> 00:01:39,959
and the prospectus for today's

00:01:38,369 --> 00:01:41,999
presentation I said that my job at

00:01:39,959 --> 00:01:44,969
cumulus was my first foray into DevOps

00:01:41,999 --> 00:01:47,579
but really if you think about it that

00:01:44,969 --> 00:01:49,079
presentation was actually the first

00:01:47,579 --> 00:01:50,670
taste which probably helped me get the

00:01:49,079 --> 00:01:51,569
job in the first place so if you're

00:01:50,670 --> 00:01:52,920
interested in hearing more about that

00:01:51,569 --> 00:01:54,569
you can either look at the videos when

00:01:52,920 --> 00:02:00,240
those get posted or talking after the

00:01:54,569 --> 00:02:01,380
presentation um and in general I don't

00:02:00,240 --> 00:02:02,579
feel like it's a real DevOps

00:02:01,380 --> 00:02:06,420
presentation less someone tries to

00:02:02,579 --> 00:02:08,490
define the buzzword and I found that the

00:02:06,420 --> 00:02:11,700
Wikipedia definition is quite apropos

00:02:08,490 --> 00:02:12,660
ear here they say DevOps the software

00:02:11,700 --> 00:02:14,450
development method the stress of

00:02:12,660 --> 00:02:16,700
communication buzz where collaboration

00:02:14,450 --> 00:02:18,230
us word integration buzz for automation

00:02:16,700 --> 00:02:21,290
buzzword and measurement of cooperation

00:02:18,230 --> 00:02:23,120
buzzword which I find pretty indicative

00:02:21,290 --> 00:02:26,120
of how most people in industry describe

00:02:23,120 --> 00:02:28,700
it but if we were going about it the way

00:02:26,120 --> 00:02:31,310
that I internalize the definition by

00:02:28,700 --> 00:02:34,670
combining the two composite of pieces um

00:02:31,310 --> 00:02:37,090
I look at how I interpret both the

00:02:34,670 --> 00:02:40,519
developments I on the operations side

00:02:37,090 --> 00:02:42,709
when it comes to development throughout

00:02:40,519 --> 00:02:45,470
my entire you know college education the

00:02:42,709 --> 00:02:48,440
one thing they hammered in was this idea

00:02:45,470 --> 00:02:49,489
of software computer science and

00:02:48,440 --> 00:02:52,849
software development being all about

00:02:49,489 --> 00:02:55,190
abstraction all right my university

00:02:52,849 --> 00:02:57,920
program is extremely biased towards the

00:02:55,190 --> 00:03:01,310
death side we teach saw programming

00:02:57,920 --> 00:03:03,620
languages we teach algorithms data

00:03:01,310 --> 00:03:06,500
structures software engineering testing

00:03:03,620 --> 00:03:08,000
cycles but one thing we certainly don't

00:03:06,500 --> 00:03:10,730
teach is for example how to install any

00:03:08,000 --> 00:03:11,810
of that software yourself my students

00:03:10,730 --> 00:03:13,519
could have gotten through the entire

00:03:11,810 --> 00:03:15,500
four-year program that ever happened to

00:03:13,519 --> 00:03:17,150
install Java on their own machine

00:03:15,500 --> 00:03:19,430
because they have a TAC to that for them

00:03:17,150 --> 00:03:22,760
they were focused on given a perfect

00:03:19,430 --> 00:03:24,829
system how do we build it or how do we

00:03:22,760 --> 00:03:26,690
use it to program whereas the OP side is

00:03:24,829 --> 00:03:28,040
more about getting that system not

00:03:26,690 --> 00:03:29,389
really do a perfect state but to a state

00:03:28,040 --> 00:03:32,900
where people can actually utilize it

00:03:29,389 --> 00:03:34,609
right so for ops I I kind of quickly

00:03:32,900 --> 00:03:37,160
once and subscribe at managing

00:03:34,609 --> 00:03:39,980
infrastructure and by combine the two I

00:03:37,160 --> 00:03:42,950
can't with a much better line I did at

00:03:39,980 --> 00:03:45,049
trial ugh which is dev and ops is what I

00:03:42,950 --> 00:03:48,079
consider designing abstract solutions

00:03:45,049 --> 00:03:49,609
infrastructure management okay that's

00:03:48,079 --> 00:03:51,859
how I'm going to be going forward with

00:03:49,609 --> 00:03:54,410
this and as someone who started in devs

00:03:51,859 --> 00:03:55,400
and moved into ops my definition is

00:03:54,410 --> 00:03:57,709
probably going to be statistically

00:03:55,400 --> 00:03:59,359
significantly different than someone who

00:03:57,709 --> 00:04:00,799
went the other way around and of course

00:03:59,359 --> 00:04:04,190
it's always up for debate we can have a

00:04:00,799 --> 00:04:05,720
flame war after the presentation so

00:04:04,190 --> 00:04:06,980
let's expand more about that what does

00:04:05,720 --> 00:04:08,450
it really mean to do the abstract

00:04:06,980 --> 00:04:10,730
solution for dead loss why would that

00:04:08,450 --> 00:04:12,769
matter why at that more useful than the

00:04:10,730 --> 00:04:17,060
way that you know I perceive it being

00:04:12,769 --> 00:04:19,370
done you know normally um and the way

00:04:17,060 --> 00:04:22,220
the fundamental assumption I bring to

00:04:19,370 --> 00:04:23,539
the table is that I consider my time too

00:04:22,220 --> 00:04:26,690
valuable do the same thing more than

00:04:23,539 --> 00:04:28,260
once all right my idea is that if I'm

00:04:26,690 --> 00:04:29,970
going to spend the time to do this

00:04:28,260 --> 00:04:31,620
same thing multiple times I should be

00:04:29,970 --> 00:04:33,930
better using that time developing some

00:04:31,620 --> 00:04:36,360
way to automate that particularly in a

00:04:33,930 --> 00:04:38,700
very generic way that can adapt to a new

00:04:36,360 --> 00:04:41,280
variation on the same problem but in

00:04:38,700 --> 00:04:43,490
general by focusing my time on looking

00:04:41,280 --> 00:04:43,490
at my

00:06:39,689 --> 00:06:44,279
uh so the way I'm going to go about this

00:06:42,719 --> 00:06:46,229
presentation is worth like calling story

00:06:44,279 --> 00:06:47,909
I'm going to talk about this new job I

00:06:46,229 --> 00:06:49,559
got a cumulus networks back in January

00:06:47,909 --> 00:06:51,209
where I've you know for the first time I

00:06:49,559 --> 00:06:54,749
life actually started working on what I

00:06:51,209 --> 00:06:56,069
would be devil's um it's not really a

00:06:54,749 --> 00:06:58,110
product talk I'm not really talking

00:06:56,069 --> 00:07:00,809
about you know what I will introduce

00:06:58,110 --> 00:07:02,099
what our product is but it's not you

00:07:00,809 --> 00:07:03,929
know I'm not trying to you know come up

00:07:02,099 --> 00:07:05,579
here and sell you something alright if

00:07:03,929 --> 00:07:09,689
you want that believe me I can climb to

00:07:05,579 --> 00:07:10,799
be able to do that for you um and I

00:07:09,689 --> 00:07:13,619
think one thing that really helped me

00:07:10,799 --> 00:07:17,819
appreciate what DevOps you know can do

00:07:13,619 --> 00:07:20,429
is a way that we kind of sell the way we

00:07:17,819 --> 00:07:22,469
do sell our software the way we kind of

00:07:20,429 --> 00:07:24,300
introduce it to people so for anyone

00:07:22,469 --> 00:07:26,789
who's not familiar with it including the

00:07:24,300 --> 00:07:28,889
folks at home cumulus Linux is you know

00:07:26,789 --> 00:07:31,199
for lack of a better phrase Linux

00:07:28,889 --> 00:07:34,139
running on a network switch so it's

00:07:31,199 --> 00:07:36,569
taking what used to be run by the sort

00:07:34,139 --> 00:07:38,579
of proprietary all in one command line

00:07:36,569 --> 00:07:42,389
operating systems like jus nos and cisco

00:07:38,579 --> 00:07:45,149
iOS and putting just a pure Linux

00:07:42,389 --> 00:07:47,279
environment there instead so essentially

00:07:45,149 --> 00:07:49,409
what's happening is we have a

00:07:47,279 --> 00:07:51,179
environment that allows you to configure

00:07:49,409 --> 00:07:52,949
Network just like you would on a Linux

00:07:51,179 --> 00:07:55,110
box at a network at sea network

00:07:52,949 --> 00:07:57,149
interfaces you know installing you know

00:07:55,110 --> 00:08:01,229
quagga to do BGP routing what have you

00:07:57,149 --> 00:08:04,009
and what it does is it synchronizes the

00:08:01,229 --> 00:08:07,379
colonel state with the switching silicon

00:08:04,009 --> 00:08:09,419
so the selling point the way we sell it

00:08:07,379 --> 00:08:11,399
is by saying that because we've replaced

00:08:09,419 --> 00:08:12,719
this custom interface with something

00:08:11,399 --> 00:08:14,009
that's generic that a lot of people know

00:08:12,719 --> 00:08:16,529
how to use you're able to leverage

00:08:14,009 --> 00:08:19,619
whatever experience you have automating

00:08:16,529 --> 00:08:21,449
and operating linux servers and then

00:08:19,619 --> 00:08:23,819
apply that knowledge and apply those

00:08:21,449 --> 00:08:26,610
tools to your switches as well all right

00:08:23,819 --> 00:08:28,289
so in in a kind of an interesting way of

00:08:26,610 --> 00:08:30,329
saying this is that what we're doing is

00:08:28,289 --> 00:08:31,589
we're trying to sell this to dev ops

00:08:30,329 --> 00:08:33,000
we're trying to get people who are

00:08:31,589 --> 00:08:35,069
skilled with devils and have all this

00:08:33,000 --> 00:08:37,620
software already with them saying that

00:08:35,069 --> 00:08:39,719
by buying our equipment you're able to

00:08:37,620 --> 00:08:43,289
reduce your costs by leveraging what you

00:08:39,719 --> 00:08:46,470
already have in production and I really

00:08:43,289 --> 00:08:48,389
helped me appreciate sort of what what

00:08:46,470 --> 00:08:51,779
DevOps is especially as I got more into

00:08:48,389 --> 00:08:52,830
the job so my team is particularly

00:08:51,779 --> 00:08:54,840
special within the comp

00:08:52,830 --> 00:08:56,490
I work for a division called customer

00:08:54,840 --> 00:08:58,520
engineering which lives within a larger

00:08:56,490 --> 00:09:00,780
division called enablement so after

00:08:58,520 --> 00:09:02,730
engineering proper makes the tool and

00:09:00,780 --> 00:09:04,830
you know after sale sells it to you the

00:09:02,730 --> 00:09:06,810
enablement team is there to kind of help

00:09:04,830 --> 00:09:08,970
you make the most out of what it makes

00:09:06,810 --> 00:09:10,770
possible all right the enablement team

00:09:08,970 --> 00:09:13,110
is all about developing demos that show

00:09:10,770 --> 00:09:15,600
off you know the basic sort of you know

00:09:13,110 --> 00:09:18,840
routing the basic sort of routing

00:09:15,600 --> 00:09:20,940
configurations and they also try to show

00:09:18,840 --> 00:09:24,300
you the cool stuff in the devil's world

00:09:20,940 --> 00:09:26,400
so for example we have in every example

00:09:24,300 --> 00:09:27,900
or every demo we have we have a way to

00:09:26,400 --> 00:09:31,950
install with ansible puppet and chef

00:09:27,900 --> 00:09:34,140
okay we are working on some packages

00:09:31,950 --> 00:09:37,110
that help you run monitoring tools like

00:09:34,140 --> 00:09:38,670
ganglia and such to uh to monitor your

00:09:37,110 --> 00:09:42,300
switches the same way you would monitor

00:09:38,670 --> 00:09:43,800
your servers and we also develop an

00:09:42,300 --> 00:09:46,020
infrastructure that lets people sort of

00:09:43,800 --> 00:09:49,080
try before they buy a we call the

00:09:46,020 --> 00:09:50,640
workbench which is a reservation system

00:09:49,080 --> 00:09:51,930
where you can reserve a configuration of

00:09:50,640 --> 00:09:55,410
switches to run these demos will that

00:09:51,930 --> 00:09:57,390
happen to buy the hardware first but

00:09:55,410 --> 00:10:00,960
more than just the collateral we put out

00:09:57,390 --> 00:10:04,320
more than just the the actual demo demo

00:10:00,960 --> 00:10:05,910
packages we're also because we're

00:10:04,320 --> 00:10:08,160
building infrastructure on our own

00:10:05,910 --> 00:10:11,760
software customer 0 which is a fancy way

00:10:08,160 --> 00:10:14,160
of saying dogfooding we are able to

00:10:11,760 --> 00:10:16,430
develop and recognize these best

00:10:14,160 --> 00:10:19,920
practices and pitfalls that come with

00:10:16,430 --> 00:10:22,070
running these tools on your switches and

00:10:19,920 --> 00:10:24,540
then being able to kind of proselytize

00:10:22,070 --> 00:10:25,740
what we learn at you know conferences

00:10:24,540 --> 00:10:29,280
like this we're able to kind of show off

00:10:25,740 --> 00:10:32,090
what we learn the the hiccups and really

00:10:29,280 --> 00:10:34,470
kind of make this approach of putting a

00:10:32,090 --> 00:10:39,780
first-class operating system on the

00:10:34,470 --> 00:10:43,110
switch a viable option to do so that's

00:10:39,780 --> 00:10:44,730
my team I love it very much so I'll be

00:10:43,110 --> 00:10:46,500
talking about how our team is structured

00:10:44,730 --> 00:10:47,850
I'll talk about how we communicate and

00:10:46,500 --> 00:10:49,680
stay in touch with each other as we work

00:10:47,850 --> 00:10:52,890
the infrastructure that we're managing

00:10:49,680 --> 00:10:54,570
as our internal you know or internal CNG

00:10:52,890 --> 00:10:57,450
infrastructure and then our development

00:10:54,570 --> 00:10:59,400
workflow how we go from making a change

00:10:57,450 --> 00:11:04,740
to testing it to pushing it to

00:10:59,400 --> 00:11:05,990
production um so one thing I like to say

00:11:04,740 --> 00:11:08,089
is that the Sun

00:11:05,990 --> 00:11:11,660
that's on C inch because we are a

00:11:08,089 --> 00:11:13,490
globally distributed group we have a few

00:11:11,660 --> 00:11:15,529
people all the way out here to west in

00:11:13,490 --> 00:11:16,850
California they've got a couple people

00:11:15,529 --> 00:11:18,980
and our to you which is a little star

00:11:16,850 --> 00:11:20,600
down here and then finally we've even

00:11:18,980 --> 00:11:22,459
got a guy all the way over and Bristol

00:11:20,600 --> 00:11:24,440
so as you can imagine there's only like

00:11:22,459 --> 00:11:28,730
two hours and which everybody on the

00:11:24,440 --> 00:11:30,500
team of the wake at the same time so

00:11:28,730 --> 00:11:33,290
because of the streakiness we have to

00:11:30,500 --> 00:11:35,420
maintain a really rich and active

00:11:33,290 --> 00:11:39,589
communications between us before we can

00:11:35,420 --> 00:11:41,510
even think about making our work work so

00:11:39,589 --> 00:11:44,149
the way we do this is with a very simple

00:11:41,510 --> 00:11:46,310
sampling of communication tools we have

00:11:44,149 --> 00:11:49,940
an IRC channel which we use our kind of

00:11:46,310 --> 00:11:52,040
day to day a water cooler we use a jira

00:11:49,940 --> 00:11:53,839
for ticket tracking github for code

00:11:52,040 --> 00:11:55,160
sharing we're really big on github we

00:11:53,839 --> 00:11:57,589
actually use it for everything from

00:11:55,160 --> 00:12:00,529
code-sharing to code review to final

00:11:57,589 --> 00:12:02,180
deployment we have a wiki an internal

00:12:00,529 --> 00:12:06,680
main list and keep in touch with each

00:12:02,180 --> 00:12:09,410
other via google hangouts yes we've a

00:12:06,680 --> 00:12:12,079
combination of private and public so for

00:12:09,410 --> 00:12:13,760
a lot of our internal automation we have

00:12:12,079 --> 00:12:15,500
private repost for that and what's

00:12:13,760 --> 00:12:17,089
really cool is that whenever we work on

00:12:15,500 --> 00:12:22,810
anything that might become public will

00:12:17,089 --> 00:12:22,810
flip the switch as early as we can sure

00:12:22,839 --> 00:12:28,130
so um one thing I think is super

00:12:26,209 --> 00:12:30,950
important is this idea of being feeling

00:12:28,130 --> 00:12:32,180
connected to your team and the one thing

00:12:30,950 --> 00:12:34,730
I think that really helps that is our

00:12:32,180 --> 00:12:36,350
IRC channel the IRC channel is such an

00:12:34,730 --> 00:12:39,140
important day to day component of our

00:12:36,350 --> 00:12:40,520
team that we've actually taken elements

00:12:39,140 --> 00:12:43,940
and bought them into IRC through a

00:12:40,520 --> 00:12:49,550
custom IRC bot I wrote in Ruby using a

00:12:43,940 --> 00:12:51,920
an IRC an RC connection package so not

00:12:49,550 --> 00:12:54,140
only do we use the RC channel to say hi

00:12:51,920 --> 00:12:56,870
when we get up in the morning to ask for

00:12:54,140 --> 00:12:58,610
help when we need help anytime a pull

00:12:56,870 --> 00:13:01,579
request is made available or a pull

00:12:58,610 --> 00:13:03,680
request is merge or some other more like

00:13:01,579 --> 00:13:06,649
for example some monitoring goes down

00:13:03,680 --> 00:13:07,850
the IRC bot lets us know because it

00:13:06,649 --> 00:13:09,050
knows that's the one place where we can

00:13:07,850 --> 00:13:11,630
put information that everyone's going to

00:13:09,050 --> 00:13:13,550
see it as quickly as possible the

00:13:11,630 --> 00:13:15,709
downside IRC is that it doesn't accurate

00:13:13,550 --> 00:13:17,329
information very well so we use our

00:13:15,709 --> 00:13:19,670
ticketing system instead for that where

00:13:17,329 --> 00:13:21,140
you can easily see

00:13:19,670 --> 00:13:23,000
what's been assigned to who who's

00:13:21,140 --> 00:13:24,740
working on what was on schedule what's

00:13:23,000 --> 00:13:26,450
behind schedule you can tell at a glance

00:13:24,740 --> 00:13:27,920
for your dashboard what exactly is going

00:13:26,450 --> 00:13:31,100
on at any point in time with the team

00:13:27,920 --> 00:13:32,420
and the key thing is that everyone the

00:13:31,100 --> 00:13:34,580
team is comfortable with the tools we

00:13:32,420 --> 00:13:35,960
use we don't use any tool we like you

00:13:34,580 --> 00:13:37,490
know we haven't tried to force any tools

00:13:35,960 --> 00:13:39,290
on anyone just because they happen to be

00:13:37,490 --> 00:13:40,490
used elsewhere on the company we use

00:13:39,290 --> 00:13:41,900
what the team's comfortable with because

00:13:40,490 --> 00:13:43,160
ultimately that by and is super

00:13:41,900 --> 00:13:45,260
important for people to feel connected

00:13:43,160 --> 00:13:46,820
and feel like you know they're going to

00:13:45,260 --> 00:13:52,270
get something done that other people are

00:13:46,820 --> 00:13:52,270
going to see notice and help out with

00:13:53,440 --> 00:13:57,190
but the real meat and potatoes of what

00:13:55,610 --> 00:14:00,140
I'm talking about is our infrastructure

00:13:57,190 --> 00:14:02,300
we have our own internal infrastructure

00:14:00,140 --> 00:14:04,250
which we use for most of our testing and

00:14:02,300 --> 00:14:06,830
deployment and the entire infrastructure

00:14:04,250 --> 00:14:08,720
lives and well mostly I'm structural is

00:14:06,830 --> 00:14:12,440
in Google's compute engine with the code

00:14:08,720 --> 00:14:14,210
living on github and the general cogs in

00:14:12,440 --> 00:14:16,790
the machine are our puppet master are

00:14:14,210 --> 00:14:20,060
Jenkins master and worker nodes we have

00:14:16,790 --> 00:14:22,310
an internal pi PI server to host all the

00:14:20,060 --> 00:14:25,040
pie thumb packages we develop and then

00:14:22,310 --> 00:14:27,350
we have our IRC bot server that fires

00:14:25,040 --> 00:14:31,460
off notifications the chat room when

00:14:27,350 --> 00:14:34,720
things happen so just an illustrated

00:14:31,460 --> 00:14:36,940
infrastructure breakdown like many

00:14:34,720 --> 00:14:39,560
environments are isn't much different

00:14:36,940 --> 00:14:41,570
everything starts off with the the

00:14:39,560 --> 00:14:43,040
puppet master so we have a server in the

00:14:41,570 --> 00:14:46,310
middle which is our puppet master that

00:14:43,040 --> 00:14:49,670
has our configuration for every possible

00:14:46,310 --> 00:14:51,260
box in our network and then our boxes

00:14:49,670 --> 00:14:53,630
such as our PI pi server and Jenkins

00:14:51,260 --> 00:14:55,610
master and worker nodes are all clients

00:14:53,630 --> 00:14:59,450
are all nodes of that puppet

00:14:55,610 --> 00:15:03,080
configuration the neat thing is whenever

00:14:59,450 --> 00:15:06,440
a new new box is added this is my IRC

00:15:03,080 --> 00:15:08,710
bot icon whatever new box is added as

00:15:06,440 --> 00:15:11,180
soon as it subscribes that puppet master

00:15:08,710 --> 00:15:12,530
it immediately collects all the common

00:15:11,180 --> 00:15:15,620
packages we use for everything and

00:15:12,530 --> 00:15:18,410
includes the user accounts and ssh keys

00:15:15,620 --> 00:15:20,120
for the members of the team so it's

00:15:18,410 --> 00:15:22,160
really easy to spin up the new box and

00:15:20,120 --> 00:15:24,170
start making it possible to SSH into it

00:15:22,160 --> 00:15:25,700
and start working on it all right which

00:15:24,170 --> 00:15:31,510
is one reason why you know the the

00:15:25,700 --> 00:15:31,510
puppet federated model works for us

00:15:32,140 --> 00:15:36,770
now what we do as well as we actually

00:15:35,510 --> 00:15:39,380
saw the configuration of our public

00:15:36,770 --> 00:15:41,390
pastor on github which allows us to

00:15:39,380 --> 00:15:45,770
share the configuration across a team

00:15:41,390 --> 00:15:47,990
and allows the team to edit it to edit

00:15:45,770 --> 00:15:50,270
it whenever whenever they need to but

00:15:47,990 --> 00:15:52,100
also to kind of share the changes with

00:15:50,270 --> 00:15:55,130
the team before they merge them into the

00:15:52,100 --> 00:15:57,650
actual master the way we do this is by

00:15:55,130 --> 00:15:59,900
having two branches master and test in

00:15:57,650 --> 00:16:01,040
addition to all the feature branches two

00:15:59,900 --> 00:16:03,140
branches master and tests that

00:16:01,040 --> 00:16:05,330
correspond to two puppet environments

00:16:03,140 --> 00:16:08,450
they one here not familiar with a puppet

00:16:05,330 --> 00:16:11,360
environment is so everyone is i'm sorry

00:16:08,450 --> 00:16:14,930
i forgot the double negative there um so

00:16:11,360 --> 00:16:16,970
a quick one liner is the puppet

00:16:14,930 --> 00:16:18,470
environments basically allow each client

00:16:16,970 --> 00:16:21,500
to subscribe to a different collection

00:16:18,470 --> 00:16:23,180
of puppet manifest files and those files

00:16:21,500 --> 00:16:24,170
are kept in those two separate branches

00:16:23,180 --> 00:16:25,970
and every once that while we

00:16:24,170 --> 00:16:29,030
periodically merge tests back into

00:16:25,970 --> 00:16:33,650
master after everything is everything is

00:16:29,030 --> 00:16:35,630
verify to be working correctly so for

00:16:33,650 --> 00:16:37,100
example an example of the workflow let's

00:16:35,630 --> 00:16:39,950
say for example we wanted to add a new

00:16:37,100 --> 00:16:42,950
job to Jenkins so here's our Jenkins

00:16:39,950 --> 00:16:45,620
Mascardo right here the way we do this

00:16:42,950 --> 00:16:48,680
is we start by creating a ticket in our

00:16:45,620 --> 00:16:51,770
ticketing system it has a project number

00:16:48,680 --> 00:16:53,360
at a ticket number we create a new

00:16:51,770 --> 00:16:54,890
branch associated with that tickets that

00:16:53,360 --> 00:16:57,500
with all the changes associated with

00:16:54,890 --> 00:17:01,400
that task are saved in one central

00:16:57,500 --> 00:17:04,670
location we create the branch we work on

00:17:01,400 --> 00:17:07,040
it and then what we do is we can

00:17:04,670 --> 00:17:08,750
actually pull that environment into or

00:17:07,040 --> 00:17:10,790
pull that change into our testing

00:17:08,750 --> 00:17:12,530
environment and see how it affects that

00:17:10,790 --> 00:17:14,709
box and every other box in the testing

00:17:12,530 --> 00:17:17,540
environment okay so as soon as you run a

00:17:14,709 --> 00:17:20,750
as soon as a puppet agent runs and start

00:17:17,540 --> 00:17:23,030
configuring we will see if any changes

00:17:20,750 --> 00:17:24,320
to that you know manifest or the new

00:17:23,030 --> 00:17:27,650
file there's any problems with some if

00:17:24,320 --> 00:17:29,570
anything breaks so we can go in here we

00:17:27,650 --> 00:17:31,100
run puppet agent t make sure it work

00:17:29,570 --> 00:17:32,300
without failures we make sure it works

00:17:31,100 --> 00:17:34,820
on anything else that happens to be in

00:17:32,300 --> 00:17:36,290
the testing environment before we even

00:17:34,820 --> 00:17:41,360
think about something that pull request

00:17:36,290 --> 00:17:42,680
to the team to review once we are tested

00:17:41,360 --> 00:17:43,570
tourists at once we've tested to our

00:17:42,680 --> 00:17:48,110
satisfaction

00:17:43,570 --> 00:17:48,980
we can then push the testing branch it's

00:17:48,110 --> 00:17:52,670
not going to touching and taking

00:17:48,980 --> 00:17:54,800
production to hurt anybody and then we

00:17:52,670 --> 00:17:56,840
make the pull request so after doing the

00:17:54,800 --> 00:17:59,090
individual testing to our satisfaction

00:17:56,840 --> 00:18:01,270
we then run it by the team and make sure

00:17:59,090 --> 00:18:03,830
that they are happy with it as well so

00:18:01,270 --> 00:18:07,520
we do this entirely and github flow so

00:18:03,830 --> 00:18:08,920
we make a pull request and the nice

00:18:07,520 --> 00:18:11,270
thing is that we can provide you know

00:18:08,920 --> 00:18:14,690
comments as fine grain is on specific

00:18:11,270 --> 00:18:15,830
lines of code so I for example I'm brand

00:18:14,690 --> 00:18:18,890
new the puppet so I do lots of things

00:18:15,830 --> 00:18:20,780
that are not very idiomatic and lots of

00:18:18,890 --> 00:18:22,040
the times people in the team will let me

00:18:20,780 --> 00:18:23,900
know that there is a much better way to

00:18:22,040 --> 00:18:25,070
do this or there's already a a plug and

00:18:23,900 --> 00:18:27,020
it does it's for you don't have to

00:18:25,070 --> 00:18:29,120
reinvent the wheel so we make a few

00:18:27,020 --> 00:18:31,130
iterations of code review until everyone

00:18:29,120 --> 00:18:35,630
the team is satisfied and then we

00:18:31,130 --> 00:18:36,950
perform the merge just to kind of notify

00:18:35,630 --> 00:18:38,390
people about these pull requests they

00:18:36,950 --> 00:18:40,790
don't have to keep pinging github and

00:18:38,390 --> 00:18:43,820
catching up with it every single time a

00:18:40,790 --> 00:18:46,610
pull request is open or closed we get a

00:18:43,820 --> 00:18:50,150
link and a small description of it in

00:18:46,610 --> 00:18:51,650
the chat room so that immediately let

00:18:50,150 --> 00:18:53,900
someone oh the pull request up for

00:18:51,650 --> 00:18:56,090
consideration they review it they

00:18:53,900 --> 00:18:59,770
provide their comments and then when

00:18:56,090 --> 00:19:02,030
we're all satisfied we merge things and

00:18:59,770 --> 00:19:04,700
then once it's merge the master it then

00:19:02,030 --> 00:19:10,160
propagates to all of the nodes within

00:19:04,700 --> 00:19:10,850
the network within 30 minutes or so so

00:19:10,160 --> 00:19:13,220
why do we go through all this trouble

00:19:10,850 --> 00:19:15,500
alright and the reason why go through

00:19:13,220 --> 00:19:17,630
all this trouble is by splitting out the

00:19:15,500 --> 00:19:19,640
service into another environment during

00:19:17,630 --> 00:19:22,070
the testing process helps insulate

00:19:19,640 --> 00:19:24,740
changes to that service from the rest of

00:19:22,070 --> 00:19:26,570
the network it's not perfect not many

00:19:24,740 --> 00:19:27,950
things are but it works well enough for

00:19:26,570 --> 00:19:30,110
our situations where we don't end up

00:19:27,950 --> 00:19:32,110
locking ourselves out of in out of

00:19:30,110 --> 00:19:36,650
mission-critical software during a

00:19:32,110 --> 00:19:38,060
feature change in particular one thing I

00:19:36,650 --> 00:19:39,680
enjoy is that by putting every single

00:19:38,060 --> 00:19:41,360
pull request into or putting every

00:19:39,680 --> 00:19:43,670
single fix into its own pull request and

00:19:41,360 --> 00:19:47,210
going through this a human code review

00:19:43,670 --> 00:19:50,030
process first of all by having the IRC

00:19:47,210 --> 00:19:51,710
bot and having the issue tracker

00:19:50,030 --> 00:19:55,700
maintain them we make it very

00:19:51,710 --> 00:19:57,200
streamlined to avoid sort of the the

00:19:55,700 --> 00:20:02,350
overhead associated

00:19:57,200 --> 00:20:02,350
with a really big you know

00:20:02,680 --> 00:20:07,330
code review you know code reviews barely

00:20:05,350 --> 00:20:09,130
touched seven files barely involved more

00:20:07,330 --> 00:20:11,440
than 100 lines or so being changed so it

00:20:09,130 --> 00:20:13,560
gives you plenty of time to look and see

00:20:11,440 --> 00:20:16,360
if someone's doing something that is

00:20:13,560 --> 00:20:18,670
going to incur law development debt or

00:20:16,360 --> 00:20:22,300
is just plain ugly in these to be so

00:20:18,670 --> 00:20:23,890
review tified and one other nice thing

00:20:22,300 --> 00:20:25,600
about is that I have another human being

00:20:23,890 --> 00:20:26,830
actually doing the pull request you can

00:20:25,600 --> 00:20:28,870
guarantee that someone else knows what's

00:20:26,830 --> 00:20:32,260
happening if something breaks that way

00:20:28,870 --> 00:20:33,910
at least 12 people across our times and

00:20:32,260 --> 00:20:35,500
distributed team at least one of those

00:20:33,910 --> 00:20:37,330
people will be awake and able to fix it

00:20:35,500 --> 00:20:39,700
if in fact when merging in a master

00:20:37,330 --> 00:20:41,350
something unpredictable happens so we

00:20:39,700 --> 00:20:45,760
kind of kind of cover our tracks there

00:20:41,350 --> 00:20:50,680
to avoid to avoid any any nasty

00:20:45,760 --> 00:20:53,410
surprises so I mentioned the workbench

00:20:50,680 --> 00:20:55,150
earlier and the workbench once again is

00:20:53,410 --> 00:20:58,000
an example of infrastructure that's

00:20:55,150 --> 00:21:01,330
being developed on our own software to

00:20:58,000 --> 00:21:03,580
show off our own software and it's being

00:21:01,330 --> 00:21:06,550
developed with this this flow in mind

00:21:03,580 --> 00:21:08,440
okay not only because we have to

00:21:06,550 --> 00:21:11,230
maintain it after we build it but also

00:21:08,440 --> 00:21:12,910
because we want to be able to take this

00:21:11,230 --> 00:21:15,250
when it's finished hopefully this year

00:21:12,910 --> 00:21:17,260
when it's finished and and and take the

00:21:15,250 --> 00:21:18,910
story out and show it to other people we

00:21:17,260 --> 00:21:20,560
want to tell them how we did is we want

00:21:18,910 --> 00:21:22,690
to create modules around it we want to

00:21:20,560 --> 00:21:24,610
make we want to make this something that

00:21:22,690 --> 00:21:29,470
someone can spin up with very little

00:21:24,610 --> 00:21:30,490
effort so once again there's a lot of

00:21:29,470 --> 00:21:32,140
stuff in the cloud but there's also

00:21:30,490 --> 00:21:33,970
stuff in our lab because we're working

00:21:32,140 --> 00:21:36,040
with our own hardware we're letting

00:21:33,970 --> 00:21:39,100
people log in and play with these stuff

00:21:36,040 --> 00:21:41,830
we have running ourselves so once again

00:21:39,100 --> 00:21:44,290
the cloud the cloud nodes are in their

00:21:41,830 --> 00:21:47,410
own GCE projects on Google compute

00:21:44,290 --> 00:21:50,170
engine and what's that storing is our

00:21:47,410 --> 00:21:52,300
website and our REST API so the entire

00:21:50,170 --> 00:21:55,120
application is governed by a really

00:21:52,300 --> 00:21:57,820
really nice and lean rest application

00:21:55,120 --> 00:22:01,540
and it's also storing our message queue

00:21:57,820 --> 00:22:04,000
database and our Retta sketch and then

00:22:01,540 --> 00:22:05,680
the lab we have these pods all right and

00:22:04,000 --> 00:22:09,300
what these pods are basically a rack

00:22:05,680 --> 00:22:12,580
running a server with our workbench

00:22:09,300 --> 00:22:13,990
application and a top of rack switch

00:22:12,580 --> 00:22:15,670
connecting all the equipment together

00:22:13,990 --> 00:22:17,440
that's running humulus Linux

00:22:15,670 --> 00:22:19,510
and then we have one or more work

00:22:17,440 --> 00:22:21,550
benches connected to it each work bench

00:22:19,510 --> 00:22:24,010
with you know two to four switches

00:22:21,550 --> 00:22:26,470
connected to it through the top of rack

00:22:24,010 --> 00:22:30,040
you know we use a tag be land to

00:22:26,470 --> 00:22:32,560
separate them out and then Python demons

00:22:30,040 --> 00:22:33,940
to watch the message queue and trigger

00:22:32,560 --> 00:22:38,800
things when things happen whatever

00:22:33,940 --> 00:22:40,930
events occur so what's really cool about

00:22:38,800 --> 00:22:43,870
what we've done is we've taken that

00:22:40,930 --> 00:22:47,070
github that github deployment cycle all

00:22:43,870 --> 00:22:49,660
the way to this application and it makes

00:22:47,070 --> 00:22:53,230
propagating new changes and pushing

00:22:49,660 --> 00:22:56,380
fixes really really simple so what

00:22:53,230 --> 00:22:59,080
happens here is that we take it we

00:22:56,380 --> 00:23:01,870
basically deploy live from github okay

00:22:59,080 --> 00:23:03,250
we deploy something we make a change we

00:23:01,870 --> 00:23:04,090
pull it into master and after being

00:23:03,250 --> 00:23:06,550
merged to master everything

00:23:04,090 --> 00:23:09,010
automatically falls into place so

00:23:06,550 --> 00:23:11,410
whenever a change is merged into the

00:23:09,010 --> 00:23:14,740
test branch in this environment we have

00:23:11,410 --> 00:23:15,910
a Jenkins job that will run the test but

00:23:14,740 --> 00:23:17,230
it's really cool is after the tests are

00:23:15,910 --> 00:23:19,360
finished once it finishes running them

00:23:17,230 --> 00:23:23,370
and everything passes actually publish

00:23:19,360 --> 00:23:25,660
them to an internal pi PI repo okay and

00:23:23,370 --> 00:23:27,790
then what happened with puppet is up

00:23:25,660 --> 00:23:30,340
it's actually watching this pi PI repo

00:23:27,790 --> 00:23:32,470
to deploy things to the live environment

00:23:30,340 --> 00:23:35,950
so whatever it sees the version bump and

00:23:32,470 --> 00:23:40,090
the and the package of and the package

00:23:35,950 --> 00:23:42,490
index it will then pull it reinstall it

00:23:40,090 --> 00:23:44,230
and then restart whatever service

00:23:42,490 --> 00:23:50,770
depended on it whether it's a flask a

00:23:44,230 --> 00:23:52,210
flask website or a d-demon and what

00:23:50,770 --> 00:23:53,860
happened and when is it happening is

00:23:52,210 --> 00:23:55,450
that once we're happy with that in the

00:23:53,860 --> 00:23:58,270
testing infrastructure we flip it from

00:23:55,450 --> 00:24:01,480
testa master the whole process runs the

00:23:58,270 --> 00:24:03,190
second time and we can deploy change

00:24:01,480 --> 00:24:05,170
than fix changes without ever having to

00:24:03,190 --> 00:24:07,290
manually log into the without ever

00:24:05,170 --> 00:24:10,900
having to manually log into the

00:24:07,290 --> 00:24:12,670
production for structure which whenever

00:24:10,900 --> 00:24:14,770
I mentioned that and the RSC channel my

00:24:12,670 --> 00:24:16,150
boss said now you're living the DevOps

00:24:14,770 --> 00:24:22,510
which is where the name of the

00:24:16,150 --> 00:24:24,340
presentation comes from what's really

00:24:22,510 --> 00:24:27,400
cool is that this slides a little stale

00:24:24,340 --> 00:24:28,300
now because we're actually bringing in a

00:24:27,400 --> 00:24:31,540
lot of

00:24:28,300 --> 00:24:34,900
proper proper prepackaged log managers

00:24:31,540 --> 00:24:36,760
but up until now I've been with doing

00:24:34,900 --> 00:24:39,220
both the logging and debugging in-house

00:24:36,760 --> 00:24:43,960
so for example every single Python

00:24:39,220 --> 00:24:45,400
package has a common common base package

00:24:43,960 --> 00:24:47,590
that it draws from and one feature that

00:24:45,400 --> 00:24:50,170
base package is a route is a comment

00:24:47,590 --> 00:24:52,060
logging infrastructure so every Pro

00:24:50,170 --> 00:24:54,160
every application every demon every

00:24:52,060 --> 00:24:58,890
website has its own log all the logs are

00:24:54,160 --> 00:25:01,600
kept in the workbench log directory and

00:24:58,890 --> 00:25:03,370
what's really fun is that you know we

00:25:01,600 --> 00:25:05,200
can log these Python exceptions and

00:25:03,370 --> 00:25:08,470
trace the logs for the exception

00:25:05,200 --> 00:25:09,850
triggers and find out you know if

00:25:08,470 --> 00:25:11,770
something failed why did it fail if

00:25:09,850 --> 00:25:19,630
there starts on its own why they keep

00:25:11,770 --> 00:25:21,790
dying so right now as of the ryans

00:25:19,630 --> 00:25:25,000
president yeah previously you're in the

00:25:21,790 --> 00:25:27,610
future oh sorry so the question it was

00:25:25,000 --> 00:25:29,260
what am i using to capture the logs so

00:25:27,610 --> 00:25:32,020
in the past and right now what we're

00:25:29,260 --> 00:25:33,940
using is a pythons built-in log manager

00:25:32,020 --> 00:25:36,430
so it has a thread-safe logmein you cave

00:25:33,940 --> 00:25:40,030
lies we're going to set up i think log

00:25:36,430 --> 00:25:41,410
stash to a great the logs and something

00:25:40,030 --> 00:25:46,630
else on my team is working on that while

00:25:41,410 --> 00:25:47,920
i finished the infrastructure another

00:25:46,630 --> 00:25:49,870
thing we have is this idea of

00:25:47,920 --> 00:25:51,820
situational awareness because we have so

00:25:49,870 --> 00:25:53,770
many distributed systems running some of

00:25:51,820 --> 00:25:55,120
which are in the GCE it easy to manage

00:25:53,770 --> 00:25:57,490
but some of which are on our lap and a

00:25:55,120 --> 00:26:00,130
little bit more difficult we've also

00:25:57,490 --> 00:26:02,410
developed this idea of a status API and

00:26:00,130 --> 00:26:07,390
a heartbeat system so the rest api

00:26:02,410 --> 00:26:09,070
running in the center on GCE maintains a

00:26:07,390 --> 00:26:11,410
list of everything that's been checking

00:26:09,070 --> 00:26:13,540
in with various heartbeats and each

00:26:11,410 --> 00:26:17,710
applique team time we bring up a server

00:26:13,540 --> 00:26:20,980
in the puppet comment manifest in the

00:26:17,710 --> 00:26:24,430
public common manifest it it pulls a

00:26:20,980 --> 00:26:27,460
very slim down python script that runs

00:26:24,430 --> 00:26:29,890
every 60 seconds and pokes api with the

00:26:27,460 --> 00:26:31,540
name of the application and the host

00:26:29,890 --> 00:26:34,660
name that's running on so we can tell at

00:26:31,540 --> 00:26:37,780
a glance if you know a pod went down or

00:26:34,660 --> 00:26:40,240
if you know a 1 1 switch in a pod went

00:26:37,780 --> 00:26:41,700
down and keep a try to keep track of all

00:26:40,240 --> 00:26:48,360
the devices and

00:26:41,700 --> 00:26:50,539
how healthy they are and one thing I've

00:26:48,360 --> 00:26:53,399
really enjoyed about working on this uh

00:26:50,539 --> 00:26:55,559
working on the the cumulus workbench is

00:26:53,399 --> 00:26:57,029
that it's even though it feels like i'm

00:26:55,559 --> 00:26:58,590
working on a software project i'm

00:26:57,029 --> 00:27:04,409
putting a lot of code on github doing

00:26:58,590 --> 00:27:06,720
code review work non versioning testing

00:27:04,409 --> 00:27:08,130
unit testing all that good stuff even

00:27:06,720 --> 00:27:12,500
though i'm applying everything I learned

00:27:08,130 --> 00:27:15,389
from my software development training I

00:27:12,500 --> 00:27:17,549
work with real hardware you know i'm i'm

00:27:15,389 --> 00:27:20,309
i'm really spending up these switches

00:27:17,549 --> 00:27:22,070
I've I recently finished up a web

00:27:20,309 --> 00:27:25,860
application that whenever you trigger a

00:27:22,070 --> 00:27:27,480
particular rest endpoint it sends an SMP

00:27:25,860 --> 00:27:29,760
command to a pdu and can turn on and off

00:27:27,480 --> 00:27:32,639
the hardware associated with each

00:27:29,760 --> 00:27:34,769
individual workbench so seeing seeing

00:27:32,639 --> 00:27:38,130
the ability to send things to a website

00:27:34,769 --> 00:27:41,309
and watch a box power up in the lab is

00:27:38,130 --> 00:27:42,659
extremely rewarding but also I've

00:27:41,309 --> 00:27:45,840
learned a lot of automation I've learned

00:27:42,659 --> 00:27:47,490
about writing things with for example

00:27:45,840 --> 00:27:51,210
writing a public configuration before I

00:27:47,490 --> 00:27:53,820
ever touch um you know the edge see file

00:27:51,210 --> 00:27:56,909
associated with a demon of you know so

00:27:53,820 --> 00:27:58,830
everything from engine X I've been

00:27:56,909 --> 00:28:00,240
working with engine X 100 percent from

00:27:58,830 --> 00:28:03,690
puppet without ever you know playing

00:28:00,240 --> 00:28:04,500
with the site's enabled file I honestly

00:28:03,690 --> 00:28:07,139
don't know what's the difference between

00:28:04,500 --> 00:28:08,909
internet and apache because I work with

00:28:07,139 --> 00:28:11,940
everything from the automations group's

00:28:08,909 --> 00:28:13,590
first I've learned a lot about testing

00:28:11,940 --> 00:28:16,399
automation one thing that's really

00:28:13,590 --> 00:28:18,690
tricky about things like puppet is that

00:28:16,399 --> 00:28:20,190
everything you write is supposed to be

00:28:18,690 --> 00:28:21,779
you know in dim patent you have to make

00:28:20,190 --> 00:28:24,720
sure that if it runs more than one time

00:28:21,779 --> 00:28:27,840
nothing nothing changes from one run to

00:28:24,720 --> 00:28:30,120
the next so I've learned to do things

00:28:27,840 --> 00:28:32,340
like spinning up lxiii containers and

00:28:30,120 --> 00:28:34,289
then running my puppet manifests on

00:28:32,340 --> 00:28:36,960
those to test them out in a complete

00:28:34,289 --> 00:28:38,909
clean room environment so a lot of these

00:28:36,960 --> 00:28:41,610
a lot of these things that's so very

00:28:38,909 --> 00:28:43,440
green on but I'm you know I'm I'm

00:28:41,610 --> 00:28:45,059
learning about you know these

00:28:43,440 --> 00:28:47,130
technologies I've I work with ansible

00:28:45,059 --> 00:28:49,350
for the first time last week to do

00:28:47,130 --> 00:28:51,090
deployment to lxc containers that aren't

00:28:49,350 --> 00:28:54,110
yet on puppet so I use ansible to

00:28:51,090 --> 00:28:54,110
install puppet on containers

00:28:56,759 --> 00:29:03,159
but that's not it that's really a where

00:29:00,970 --> 00:29:04,659
I started in where I am now so if anyone

00:29:03,159 --> 00:29:08,950
has any question we have lots of time to

00:29:04,659 --> 00:29:16,000
answer them so anything from the

00:29:08,950 --> 00:29:18,039
audience why use ansible to install

00:29:16,000 --> 00:29:20,380
puppet the reason why we use ansible

00:29:18,039 --> 00:29:22,889
install puppet is because we had one

00:29:20,380 --> 00:29:25,990
ansible guy and the rest of team being a

00:29:22,889 --> 00:29:30,370
puppet team and then he wrote that one

00:29:25,990 --> 00:29:35,080
component and deployed it that way no

00:29:30,370 --> 00:29:36,789
the so we use ansible to do deployment

00:29:35,080 --> 00:29:38,049
so what we do is we have this Python

00:29:36,789 --> 00:29:42,009
demon that spins up and destroys

00:29:38,049 --> 00:29:43,330
Alexei's on demand and we just have a

00:29:42,009 --> 00:29:46,389
bunch of play books that it can pull

00:29:43,330 --> 00:29:48,309
from on Python some of the LLC's are

00:29:46,389 --> 00:29:50,200
connected to our infrastructure so we

00:29:48,309 --> 00:29:53,440
install puppet on those just in the flow

00:29:50,200 --> 00:29:56,919
whereas others we don't want for example

00:29:53,440 --> 00:29:58,240
our end user containers to be connected

00:29:56,919 --> 00:30:00,309
to infrastructure so we just view

00:29:58,240 --> 00:30:01,480
danceable to install the base packages

00:30:00,309 --> 00:30:03,399
and leave that disconnected from the

00:30:01,480 --> 00:30:06,580
network it's a little bit more it's very

00:30:03,399 --> 00:30:09,100
it's very system specific to the

00:30:06,580 --> 00:30:10,480
application but one day I hope to give a

00:30:09,100 --> 00:30:33,429
presentation on that and really explain

00:30:10,480 --> 00:30:36,309
how that all says together sure um so

00:30:33,429 --> 00:30:39,519
the question was how long or how has my

00:30:36,309 --> 00:30:41,190
DevOps workflow evolved um I guess in

00:30:39,519 --> 00:30:44,200
the time since I've been working there

00:30:41,190 --> 00:30:47,289
um when I started off I was definitely

00:30:44,200 --> 00:30:49,120
not a DevOps person um in fact the job

00:30:47,289 --> 00:30:51,490
description specifically wanted a Python

00:30:49,120 --> 00:30:53,919
web developer and the first thing I

00:30:51,490 --> 00:30:57,669
touched when I joined the company was a

00:30:53,919 --> 00:30:59,259
puppet manifest so as you can imagine I

00:30:57,669 --> 00:31:03,610
was sort of I was thrown into it and

00:30:59,259 --> 00:31:05,289
true startup style um so getting started

00:31:03,610 --> 00:31:07,120
of course I I was definitely very green

00:31:05,289 --> 00:31:10,240
you know I was very used to

00:31:07,120 --> 00:31:13,390
um working on files you know working on

00:31:10,240 --> 00:31:15,190
installations and sort of just say you

00:31:13,390 --> 00:31:17,470
know how can be done with it sort of

00:31:15,190 --> 00:31:19,809
approach and I learned not to do that

00:31:17,470 --> 00:31:21,640
because every 30 minutes after i edited

00:31:19,809 --> 00:31:23,350
something in etsy puppet went and

00:31:21,640 --> 00:31:27,250
replaced it back with what it started

00:31:23,350 --> 00:31:28,750
with so nothing nothing makes you learn

00:31:27,250 --> 00:31:32,290
the flow more than having your work

00:31:28,750 --> 00:31:35,440
erased every 30 minutes um the team was

00:31:32,290 --> 00:31:39,010
already very very strong with automation

00:31:35,440 --> 00:31:43,059
we have our teammates come from a long

00:31:39,010 --> 00:31:45,429
ops background so they kind of imposed

00:31:43,059 --> 00:31:49,210
these standards and best practices on me

00:31:45,429 --> 00:31:50,920
and I've been learning from them so for

00:31:49,210 --> 00:31:52,420
example one you know one thing that has

00:31:50,920 --> 00:31:55,210
changed a lot is this idea of making

00:31:52,420 --> 00:31:56,470
these new these like LX used to test out

00:31:55,210 --> 00:31:58,030
a puppet manifest and making sure it

00:31:56,470 --> 00:31:59,670
gets everything done on one run and

00:31:58,030 --> 00:32:02,470
doesn't change things from run to run

00:31:59,670 --> 00:32:04,000
when I got started I would say well the

00:32:02,470 --> 00:32:05,140
pilot manifest works but you just to run

00:32:04,000 --> 00:32:06,429
it four times and then everything

00:32:05,140 --> 00:32:10,690
finally equalizes and reaches

00:32:06,429 --> 00:32:13,140
equilibrium um so does answer your

00:32:10,690 --> 00:32:13,140
question okay

00:32:21,450 --> 00:32:25,510
all right well if there are no more

00:32:23,950 --> 00:32:27,820
questions I think I'll hang up here

00:32:25,510 --> 00:32:30,399
thank you so much for attending i hope

00:32:27,820 --> 00:32:32,049
you you know got something out of it and

00:32:30,399 --> 00:32:33,640
we do have you know shirts and stickers

00:32:32,049 --> 00:32:34,830
for anyone who likes to leave

00:32:33,640 --> 00:33:00,340
conferences with that sort of thing

00:32:34,830 --> 00:33:01,750
thank you very much okay go for it I

00:33:00,340 --> 00:33:05,309
don't know what's lads that we have so

00:33:01,750 --> 00:33:05,309
dig around and find what you like

00:33:11,530 --> 00:33:13,590
you

00:35:41,490 --> 00:35:45,789
your customers rely on your website or

00:35:44,289 --> 00:35:48,130
application if it's slower

00:35:45,789 --> 00:35:51,099
non-responsive it infuriates your users

00:35:48,130 --> 00:35:52,900
and costs you money keeping your

00:35:51,099 --> 00:35:56,530
business critical systems humming along

00:35:52,900 --> 00:35:58,720
requires insight into what they're doing

00:35:56,530 --> 00:36:00,670
your system metrics tells stories

00:35:58,720 --> 00:36:02,710
stories that can reveal performance

00:36:00,670 --> 00:36:05,020
bottlenecks resource limitations and

00:36:02,710 --> 00:36:06,610
other problems but how do you keep an

00:36:05,020 --> 00:36:09,250
eye on all of your systems performance

00:36:06,610 --> 00:36:12,190
metrics in real-time and record this

00:36:09,250 --> 00:36:13,960
data for leader analysis enter long view

00:36:12,190 --> 00:36:15,970
the new way to see what's really going

00:36:13,960 --> 00:36:18,160
on under the hood the long view

00:36:15,970 --> 00:36:20,260
dashboard lets you visualize the status

00:36:18,160 --> 00:36:22,780
of all your systems providing you with a

00:36:20,260 --> 00:36:26,050
bird's-eye view of your entire fleet you

00:36:22,780 --> 00:36:28,600
can sort by cpu memory swap processes

00:36:26,050 --> 00:36:30,370
load and network usage click a specific

00:36:28,600 --> 00:36:32,770
system to access its individual

00:36:30,370 --> 00:36:35,280
dashboard then click and drag to zoom in

00:36:32,770 --> 00:36:37,690
on chokepoints and get more detail

00:36:35,280 --> 00:36:39,370
comprehensive network data including

00:36:37,690 --> 00:36:41,680
inbound and outbound traffic is

00:36:39,370 --> 00:36:43,240
available on the network tab and disk

00:36:41,680 --> 00:36:45,160
rights and free space on the disk

00:36:43,240 --> 00:36:48,010
stabbed while the process Explorer

00:36:45,160 --> 00:36:50,530
displays usage statistics for individual

00:36:48,010 --> 00:36:52,690
processes the system info tab shows

00:36:50,530 --> 00:36:54,940
listening services active connections

00:36:52,690 --> 00:36:57,070
and available updates adding long view

00:36:54,940 --> 00:36:58,780
to a system is easy just click the

00:36:57,070 --> 00:37:00,910
button copy the one line installation

00:36:58,780 --> 00:37:03,370
command then run the command on your

00:37:00,910 --> 00:37:05,080
linux system to complete the process the

00:37:03,370 --> 00:37:07,270
agent will begin collecting data and

00:37:05,080 --> 00:37:10,750
sending it to longview then the graphs

00:37:07,270 --> 00:37:13,000
start rolling use long view to gain

00:37:10,750 --> 00:37:17,000
visibility into your servers so when

00:37:13,000 --> 00:37:19,160
your website or app heats up it stays up

00:37:17,000 --> 00:37:21,200
Citrix XenServer gives you everything

00:37:19,160 --> 00:37:24,140
you need to integrate manage and

00:37:21,200 --> 00:37:26,300
automate a virtual data center all on an

00:37:24,140 --> 00:37:28,670
enterprise-class cloud proven virtual

00:37:26,300 --> 00:37:31,400
platform and at a third of the cost of

00:37:28,670 --> 00:37:33,140
other solutions but why even bother with

00:37:31,400 --> 00:37:35,300
virtualizing your server infrastructure

00:37:33,140 --> 00:37:37,250
in the first place well let's say you

00:37:35,300 --> 00:37:39,590
have a traditional one server to one

00:37:37,250 --> 00:37:41,570
application architecture but you're

00:37:39,590 --> 00:37:44,120
running out of resources and performance

00:37:41,570 --> 00:37:46,450
is suffering once you order new server

00:37:44,120 --> 00:37:49,310
hardware you'll wait for delivery

00:37:46,450 --> 00:37:52,190
configure it install your business

00:37:49,310 --> 00:37:54,980
application stage and test the server

00:37:52,190 --> 00:37:57,170
and finally add it to your production

00:37:54,980 --> 00:37:59,360
farm if you've been through this process

00:37:57,170 --> 00:38:01,880
before you know it can take weeks or

00:37:59,360 --> 00:38:03,740
even months you also know it's a

00:38:01,880 --> 00:38:05,690
manually intensive process that will

00:38:03,740 --> 00:38:08,990
burden your team every time you outgrow

00:38:05,690 --> 00:38:10,790
your current setup with a virtual server

00:38:08,990 --> 00:38:13,580
solution you could accomplish all of

00:38:10,790 --> 00:38:16,130
that in less than half a day server

00:38:13,580 --> 00:38:17,960
virtualization software separates the OS

00:38:16,130 --> 00:38:20,390
and application from the underlying

00:38:17,960 --> 00:38:22,520
server hardware and with multiple

00:38:20,390 --> 00:38:24,260
virtual machines on a single server you

00:38:22,520 --> 00:38:27,230
can use each of them to run different

00:38:24,260 --> 00:38:29,000
os's and applications this makes it

00:38:27,230 --> 00:38:30,770
possible to move your virtual machines

00:38:29,000 --> 00:38:32,840
from one piece of hardware to another

00:38:30,770 --> 00:38:35,120
whenever you want to maximize

00:38:32,840 --> 00:38:37,100
utilization simplify maintenance or

00:38:35,120 --> 00:38:39,380
recover from a hardware failure and

00:38:37,100 --> 00:38:42,320
without slowing down your applications

00:38:39,380 --> 00:38:45,410
or users clearly server virtualization

00:38:42,320 --> 00:38:48,410
provides big benefits and Citrix

00:38:45,410 --> 00:38:50,630
XenServer provides even more since it's

00:38:48,410 --> 00:38:52,490
built on an open platform xenserver

00:38:50,630 --> 00:38:54,800
plays well with your existing hardware

00:38:52,490 --> 00:38:57,080
storage systems and IT management

00:38:54,800 --> 00:38:59,840
software as well as with the industry's

00:38:57,080 --> 00:39:01,850
leading cloud service providers best of

00:38:59,840 --> 00:39:03,560
all you can get started by downloading a

00:39:01,850 --> 00:39:06,800
fully functional production-ready

00:39:03,560 --> 00:39:09,020
version of xenserver for free after a

00:39:06,800 --> 00:39:11,150
10-minute installation process you'll

00:39:09,020 --> 00:39:13,160
see how easy it is to start virtualizing

00:39:11,150 --> 00:39:15,620
your workloads and automating your IT

00:39:13,160 --> 00:39:17,210
management processes and when you're

00:39:15,620 --> 00:39:19,130
ready for a richer set of management

00:39:17,210 --> 00:39:21,620
tools just upgrade to one of the premium

00:39:19,130 --> 00:39:23,480
editions of xenserver so whether you're

00:39:21,620 --> 00:39:25,400
interested in virtualizing servers for

00:39:23,480 --> 00:39:27,710
the first time expanding your server

00:39:25,400 --> 00:39:30,230
virtualization footprint or moving

00:39:27,710 --> 00:39:30,920
server workloads to the cloud download

00:39:30,230 --> 00:39:33,109
and install

00:39:30,920 --> 00:39:36,140
xenserver today and see how it can help

00:39:33,109 --> 00:39:41,470
you simplify your IT environment citrix

00:39:36,140 --> 00:39:41,470
xenserver do more don't spend more

00:39:46,690 --> 00:39:48,750

YouTube URL: https://www.youtube.com/watch?v=gbBGLsW3dKM


