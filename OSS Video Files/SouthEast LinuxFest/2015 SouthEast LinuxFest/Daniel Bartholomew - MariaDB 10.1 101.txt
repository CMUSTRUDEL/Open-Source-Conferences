Title: Daniel Bartholomew - MariaDB 10.1 101
Publication date: 2017-01-25
Playlist: 2015 SouthEast LinuxFest
Description: 
	
Captions: 
	00:00:02,389 --> 00:00:12,389
all right welcome to my talk Maria db10

00:00:08,250 --> 00:00:16,109
dot 1101 my name is Daniel Bartholomew I

00:00:12,389 --> 00:00:18,029
am the release manager for Maria DB I've

00:00:16,109 --> 00:00:23,789
been with them read EV project since

00:00:18,029 --> 00:00:26,789
almost the beginning so yeah let's get

00:00:23,789 --> 00:00:29,160
started before it began just a few

00:00:26,789 --> 00:00:32,700
disclaimers caveats that sort of thing

00:00:29,160 --> 00:00:34,620
um I really dislike wall of text

00:00:32,700 --> 00:00:38,430
presentations where it's just basically

00:00:34,620 --> 00:00:44,010
text but the nature of this talk kind of

00:00:38,430 --> 00:00:47,610
demands it so sorry about that i'm also

00:00:44,010 --> 00:00:49,469
i'm not a not a big-time DBA if you you

00:00:47,610 --> 00:00:52,320
know ask me a question about your setup

00:00:49,469 --> 00:00:54,120
and how you sharding across 20 machines

00:00:52,320 --> 00:00:55,699
and you're running into this problem i

00:00:54,120 --> 00:00:58,140
probably won't know the answer to that

00:00:55,699 --> 00:01:00,059
because i'm the release manager i'm not

00:00:58,140 --> 00:01:03,870
one of the developers and i'm not one of

00:01:00,059 --> 00:01:08,310
the consultants so just to let you know

00:01:03,870 --> 00:01:13,010
that ahead of time and how many of you

00:01:08,310 --> 00:01:17,729
are using maria DB now okay most of you

00:01:13,010 --> 00:01:22,020
how many of you are on 55 how many of

00:01:17,729 --> 00:01:24,780
you are on 10 is anyone on 10 dot one no

00:01:22,020 --> 00:01:27,229
okay okay cool I'm going to be covering

00:01:24,780 --> 00:01:31,110
a lot of ground I'm kind of assuming

00:01:27,229 --> 00:01:34,079
that you're familiar with 10 and of

00:01:31,110 --> 00:01:39,000
course by extension five dot five so i

00:01:34,079 --> 00:01:41,250
will not be going into a lot on those

00:01:39,000 --> 00:01:43,770
i'm going to have a quick overview of

00:01:41,250 --> 00:01:45,270
maria DB I'll breeze right through it

00:01:43,770 --> 00:01:47,670
since since most of you are familiar

00:01:45,270 --> 00:01:50,670
with Maria DB I'll go quickly through

00:01:47,670 --> 00:01:53,009
that there's lots of links in the

00:01:50,670 --> 00:01:57,090
presentation but i have already uploaded

00:01:53,009 --> 00:02:01,829
this slide deck to speaker deck the URL

00:01:57,090 --> 00:02:03,210
there and you can go there download the

00:02:01,829 --> 00:02:08,720
presentation go through all the links

00:02:03,210 --> 00:02:13,260
and whatnot at your leisure later on so

00:02:08,720 --> 00:02:17,760
so that other way maria DB

00:02:13,260 --> 00:02:21,269
it many of you probably might know this

00:02:17,760 --> 00:02:23,400
but my SQL is named after Monty Monty

00:02:21,269 --> 00:02:25,230
would then use he's the guy who created

00:02:23,400 --> 00:02:28,890
mysql he named it after his oldest

00:02:25,230 --> 00:02:35,129
daughter Mead which is the finished form

00:02:28,890 --> 00:02:36,810
of a merry and he named his he Maria DB

00:02:35,129 --> 00:02:38,879
is named after his youngest daughter so

00:02:36,810 --> 00:02:41,849
there is a connection between why we

00:02:38,879 --> 00:02:47,579
call it Maria DB they're both named

00:02:41,849 --> 00:02:50,280
after his kids Maria TB is a community

00:02:47,579 --> 00:02:52,049
about branch fork evolution whatever you

00:02:50,280 --> 00:02:53,549
want to call it of MySQL it has

00:02:52,049 --> 00:02:59,280
additional features additional storage

00:02:53,549 --> 00:03:01,349
engines additional plugins and so on its

00:02:59,280 --> 00:03:04,349
goal is to be compatible and feature

00:03:01,349 --> 00:03:08,430
complete that that's a goal it's not

00:03:04,349 --> 00:03:11,879
exactly true in all instances and it's

00:03:08,430 --> 00:03:13,980
five years old as of februari first 2010

00:03:11,879 --> 00:03:16,889
projects been around since 2009 early

00:03:13,980 --> 00:03:18,959
early 2009 I think the first meeting of

00:03:16,889 --> 00:03:23,760
developers where they discussed some of

00:03:18,959 --> 00:03:28,919
the goals of yes I would like that thank

00:03:23,760 --> 00:03:31,319
you all right the the first developer

00:03:28,919 --> 00:03:34,169
meeting from Rio DB was held in I think

00:03:31,319 --> 00:03:38,489
january of 2009 I joined the project in

00:03:34,169 --> 00:03:42,599
june of 2009 but the first stable GA

00:03:38,489 --> 00:03:44,760
release was in the first of February's

00:03:42,599 --> 00:03:48,870
of releases I took a look in the

00:03:44,760 --> 00:03:57,440
download system and we have had in those

00:03:48,870 --> 00:03:57,440
five years over 130 releases of coke

00:03:57,919 --> 00:04:05,010
connectors whatnot so we've been very

00:04:01,379 --> 00:04:08,099
active pushing out things we generally

00:04:05,010 --> 00:04:14,760
average two or three releases a month in

00:04:08,099 --> 00:04:17,280
the very ok I lost everything ok so so

00:04:14,760 --> 00:04:20,880
we're very very active we try we try to

00:04:17,280 --> 00:04:23,070
keep innovating very fast them really be

00:04:20,880 --> 00:04:25,590
foundation is the is the kind of the

00:04:23,070 --> 00:04:26,580
driver of the project it has an

00:04:25,590 --> 00:04:29,789
independent

00:04:26,580 --> 00:04:32,460
independent board that come with members

00:04:29,789 --> 00:04:36,569
from several different companies it job

00:04:32,460 --> 00:04:39,270
is to ensure that Maria DB keeps

00:04:36,569 --> 00:04:41,669
compatibility at a certain level they

00:04:39,270 --> 00:04:45,360
maintain marietv org they they're the

00:04:41,669 --> 00:04:46,949
community voice uh it has some of the

00:04:45,360 --> 00:04:49,740
major sponsors including read to be

00:04:46,949 --> 00:04:53,789
corporation perils booking automatic

00:04:49,740 --> 00:04:55,979
openquery and so on so like I said

00:04:53,789 --> 00:05:00,690
before it's it's meant to be a

00:04:55,979 --> 00:05:03,289
compatible drop-in replacement and it we

00:05:00,690 --> 00:05:07,110
always try to be stable bug free and

00:05:03,289 --> 00:05:14,069
gplv2 and then it again I seem to be

00:05:07,110 --> 00:05:29,520
dropping out a lot is it something I'm

00:05:14,069 --> 00:05:33,300
doing set better okay well we'll try

00:05:29,520 --> 00:05:36,900
that all right one of the one of the big

00:05:33,300 --> 00:05:38,580
goals is we we the developers made a

00:05:36,900 --> 00:05:40,379
commitment that there will be no closed

00:05:38,580 --> 00:05:46,440
source enterprise only features in the

00:05:40,379 --> 00:05:50,430
server we don't like when part of the

00:05:46,440 --> 00:05:54,300
server is will be bet part of the server

00:05:50,430 --> 00:06:01,400
is open and but then up the server are

00:05:54,300 --> 00:06:04,819
not so we don't like that all right

00:06:01,400 --> 00:06:04,819
we'll try that

00:06:12,470 --> 00:06:25,979
that better he's being why does um why

00:06:23,880 --> 00:06:28,560
are there enterprise only features it's

00:06:25,979 --> 00:06:33,090
to drive revenue and I think I'm you

00:06:28,560 --> 00:06:34,650
know and some of some of them we that

00:06:33,090 --> 00:06:36,210
some of the marietv developers we kind

00:06:34,650 --> 00:06:39,690
of make fun of Oracle for some of their

00:06:36,210 --> 00:06:42,210
features like they added a ham

00:06:39,690 --> 00:06:44,880
authentication plugin as an enterprise

00:06:42,210 --> 00:06:46,289
only feature in mysql and one of one of

00:06:44,880 --> 00:06:48,150
our developers literally looked at the

00:06:46,289 --> 00:06:50,699
saw that they had announced it and he's

00:06:48,150 --> 00:06:52,979
like that's stupid and he took like a

00:06:50,699 --> 00:06:55,590
day and he wrote his own and stuck in

00:06:52,979 --> 00:06:58,740
him really be it was just like it spam

00:06:55,590 --> 00:07:00,780
if the pan authentication plugin you

00:06:58,740 --> 00:07:03,570
just write a shim that goes in between

00:07:00,780 --> 00:07:05,789
my you know Maria DB and Pam and you're

00:07:03,570 --> 00:07:08,970
done I mean why is this enterprise only

00:07:05,789 --> 00:07:11,520
and so is like forget that so we wrote

00:07:08,970 --> 00:07:13,410
it's you know it you know so so we don't

00:07:11,520 --> 00:07:17,099
we just don't believe that the server

00:07:13,410 --> 00:07:18,780
itself should be closed there should be

00:07:17,099 --> 00:07:21,270
anything this closed source now of

00:07:18,780 --> 00:07:24,330
course there is the reality that Maria

00:07:21,270 --> 00:07:27,360
DB as a fork of MySQL we're not allowed

00:07:24,330 --> 00:07:30,150
to do a close source anything in the

00:07:27,360 --> 00:07:33,510
server itself so legally we're obligated

00:07:30,150 --> 00:07:36,990
to never do that but we also don't want

00:07:33,510 --> 00:07:42,229
to do it so that you kind of have both

00:07:36,990 --> 00:07:45,389
of those so popularity goop Maria DB is

00:07:42,229 --> 00:07:50,039
the popularity over the last several

00:07:45,389 --> 00:07:54,360
years has really gone up the Wikipedia

00:07:50,039 --> 00:07:56,400
is run off of Maria DB um we know of

00:07:54,360 --> 00:07:57,900
many companies that use Maria DB that

00:07:56,400 --> 00:07:59,729
we're not allowed to mention but the

00:07:57,900 --> 00:08:02,310
ones we are allowed to mentions people

00:07:59,729 --> 00:08:04,139
like Google tumblr spam experts web of

00:08:02,310 --> 00:08:05,610
trust fiction press fiction press

00:08:04,139 --> 00:08:07,909
nimbuzz there's a whole bunch of

00:08:05,610 --> 00:08:13,560
companies that use in Rio DB extensively

00:08:07,909 --> 00:08:16,349
and then in Linux distribution land we

00:08:13,560 --> 00:08:19,830
have kind of become to go to mysql

00:08:16,349 --> 00:08:22,289
alternative if you use fedora opensuse

00:08:19,830 --> 00:08:25,050
Susa Red Hat they're all shipping Maria

00:08:22,289 --> 00:08:27,659
be as default slackware and a bunch of

00:08:25,050 --> 00:08:29,969
others are as well and then in the

00:08:27,659 --> 00:08:33,509
latest releases releases of both debian

00:08:29,969 --> 00:08:35,839
and ubuntu we are an alternative so you

00:08:33,509 --> 00:08:40,409
can install us directly from the

00:08:35,839 --> 00:08:42,449
distributions package repositories there

00:08:40,409 --> 00:08:44,339
we have a lot of success stories that

00:08:42,449 --> 00:08:47,339
we've been putting up Colin who's going

00:08:44,339 --> 00:08:48,899
to be speaking later on has written up a

00:08:47,339 --> 00:08:53,579
bunch of those and posted them in the

00:08:48,899 --> 00:08:55,319
knowledge base so check those out Aria

00:08:53,579 --> 00:08:58,769
DB is very well supported just about

00:08:55,319 --> 00:09:00,870
everyone supports andrea DB if if they

00:08:58,769 --> 00:09:03,690
if it's a company that provides support

00:09:00,870 --> 00:09:05,430
for mysql you're almost always guarantee

00:09:03,690 --> 00:09:08,839
that they will also be providing support

00:09:05,430 --> 00:09:13,290
for maria d/b/a well except for oracle

00:09:08,839 --> 00:09:15,990
for obvious reasons um so you know the

00:09:13,290 --> 00:09:17,699
maria DB corporations the pro conas and

00:09:15,990 --> 00:09:21,480
so on of the world they all support

00:09:17,699 --> 00:09:23,579
maria DB there are you can get Maria DB

00:09:21,480 --> 00:09:26,370
as it is platform-as-a-service you can

00:09:23,579 --> 00:09:28,589
get it in the juju charm store you can

00:09:26,370 --> 00:09:30,600
get docker containers you can it's it's

00:09:28,589 --> 00:09:35,130
available from amazon or chef cookbooks

00:09:30,600 --> 00:09:37,319
puppet modules and so on also the marie

00:09:35,130 --> 00:09:40,800
to be foundation always has a a

00:09:37,319 --> 00:09:42,540
commitment that any time a release a

00:09:40,800 --> 00:09:45,089
major release of maria de be like say

00:09:42,540 --> 00:09:50,160
Marie db10 and reedy be ten one as soon

00:09:45,089 --> 00:09:52,470
as it is assume from the date of the

00:09:50,160 --> 00:09:55,860
first GA release the first stable

00:09:52,470 --> 00:09:59,120
release of it it will receive security

00:09:55,860 --> 00:10:04,230
and bug fixes for at least five years a

00:09:59,120 --> 00:10:06,959
lot of times we have done even longer

00:10:04,230 --> 00:10:09,720
than that but for at least five years we

00:10:06,959 --> 00:10:14,550
will we will be providing those bug

00:10:09,720 --> 00:10:16,470
fixes and security fixes so where do you

00:10:14,550 --> 00:10:18,899
get Marie D be like I said before it's

00:10:16,470 --> 00:10:21,000
probably already in your package

00:10:18,899 --> 00:10:24,540
repository especially from a recent

00:10:21,000 --> 00:10:27,930
recent release of your chosen linux

00:10:24,540 --> 00:10:31,199
distribution some of them like 55 is in

00:10:27,930 --> 00:10:32,760
is in Red Hat lace red hat 7 a lot of

00:10:31,199 --> 00:10:35,699
the others are running 10 likes in

00:10:32,760 --> 00:10:39,509
fedora in debian and ubuntu it's me

00:10:35,699 --> 00:10:42,569
bb10 and then download I'm ready Borg is

00:10:39,509 --> 00:10:47,009
where all the latest stuff is always

00:10:42,569 --> 00:10:51,389
kept so that out of the way let's get

00:10:47,009 --> 00:10:54,709
into maria db10 dot one there's an

00:10:51,389 --> 00:10:54,709
information page in the knowledge base

00:10:55,609 --> 00:11:02,730
which is where a lot of the content for

00:10:58,109 --> 00:11:06,299
this talk came from there have so far to

00:11:02,730 --> 00:11:07,919
this date been six releases of Marie

00:11:06,299 --> 00:11:13,649
bb10 dot one starting from the first

00:11:07,919 --> 00:11:16,919
alpha back a year ago and now we're up

00:11:13,649 --> 00:11:18,480
to 10 dot one dot five we're still in

00:11:16,919 --> 00:11:22,049
beta we've had three alpha releases

00:11:18,480 --> 00:11:23,579
three beta releases the next release 10

00:11:22,049 --> 00:11:26,279
dot one dot six will be coming in a

00:11:23,579 --> 00:11:27,779
month and it will probably also be beta

00:11:26,279 --> 00:11:30,839
but we're hoping that'll be the last

00:11:27,779 --> 00:11:36,239
beta and then we'll be going to release

00:11:30,839 --> 00:11:38,730
candidate stage in August is is what

00:11:36,239 --> 00:11:42,419
we're what we're shooting for we were

00:11:38,730 --> 00:11:45,529
waiting on some some some code from

00:11:42,419 --> 00:11:49,230
Google and a couple other of our

00:11:45,529 --> 00:11:51,600
partners before we went before we left

00:11:49,230 --> 00:11:54,660
beta and so we finally gotten pretty

00:11:51,600 --> 00:11:57,119
much all of that in and so there'll be

00:11:54,660 --> 00:11:58,619
another beta at least and then then

00:11:57,119 --> 00:12:00,149
we'll be going to RC they'll probably be

00:11:58,619 --> 00:12:02,819
a couple of RC releases and then it'll

00:12:00,149 --> 00:12:05,999
be declared stable so that's where we

00:12:02,819 --> 00:12:08,189
are right now with development so what

00:12:05,999 --> 00:12:10,619
is in Moorea DB 10 dot one first off

00:12:08,189 --> 00:12:15,049
let's just a quick mention of web scale

00:12:10,619 --> 00:12:19,859
SQL how many of you have heard of that

00:12:15,049 --> 00:12:23,249
okay a couple web-scale SQL is a

00:12:19,859 --> 00:12:27,569
partnership between google facebook

00:12:23,249 --> 00:12:31,470
twitter linkedin few others they all

00:12:27,569 --> 00:12:34,079
collaborated they all run a mysql DB

00:12:31,470 --> 00:12:37,829
whatever they all run it at scale

00:12:34,079 --> 00:12:40,769
massive scale and they ran into several

00:12:37,829 --> 00:12:42,839
issues that were common among all of

00:12:40,769 --> 00:12:44,789
them and so they got some of their top

00:12:42,839 --> 00:12:46,679
engineers together that caught my l

00:12:44,789 --> 00:12:49,680
engineers together and they developed a

00:12:46,679 --> 00:12:53,610
sub hatch set that they want

00:12:49,680 --> 00:12:55,710
to share amongst themselves and they

00:12:53,610 --> 00:12:57,750
they called it web-scale SQL they came

00:12:55,710 --> 00:13:01,589
out with an announcement last year about

00:12:57,750 --> 00:13:05,520
it many of the patches have now made it

00:13:01,589 --> 00:13:07,529
are in 10 dot one several of them have

00:13:05,520 --> 00:13:11,070
been back pork to 10 dot oh but only

00:13:07,529 --> 00:13:14,490
where they were just fixing bugs and not

00:13:11,070 --> 00:13:16,890
changing behavior we tend to take a

00:13:14,490 --> 00:13:19,589
pretty strict line about behavior should

00:13:16,890 --> 00:13:23,160
not change between minor versions so

00:13:19,589 --> 00:13:24,480
between 10 0 dot 15 and 10 dot 0 dot 16

00:13:23,160 --> 00:13:26,970
there shouldn't be anything to change

00:13:24,480 --> 00:13:29,580
his behavior but in 10 dot one that's a

00:13:26,970 --> 00:13:32,580
no that's a major version and so if the

00:13:29,580 --> 00:13:34,890
patch did change behavior then that's

00:13:32,580 --> 00:13:37,170
that's why how we made the split well

00:13:34,890 --> 00:13:39,990
can we put this intended oh no okay

00:13:37,170 --> 00:13:42,510
we'll put it in 10 dot 1 so almost all

00:13:39,990 --> 00:13:47,240
of the web scale SQL patches are going

00:13:42,510 --> 00:13:51,180
into 10 dot one but that that that M dev

00:13:47,240 --> 00:13:53,279
page has a nice chart that shows all of

00:13:51,180 --> 00:13:55,350
them and then what our decision was on

00:13:53,279 --> 00:13:58,620
them if it went in if it didn't go in

00:13:55,350 --> 00:14:01,470
and why and things like that so so we've

00:13:58,620 --> 00:14:05,490
added all those another change in 10 dot

00:14:01,470 --> 00:14:07,980
one we've had Maria DB galera cluster as

00:14:05,490 --> 00:14:11,250
a as a separate product from Rio DB

00:14:07,980 --> 00:14:14,940
server since the 55 days and then also

00:14:11,250 --> 00:14:17,850
in RIA DB 10 dot o in really beat n dot

00:14:14,940 --> 00:14:22,110
one there will not be an X a separate

00:14:17,850 --> 00:14:24,510
Maria DB galera cluster download all

00:14:22,110 --> 00:14:27,390
every all of the changes to the server

00:14:24,510 --> 00:14:30,959
code that galera introduced that glitter

00:14:27,390 --> 00:14:32,820
introduces have been are going to be

00:14:30,959 --> 00:14:36,060
just shipped as part of maria DB server

00:14:32,820 --> 00:14:39,779
from now on it they they've input in

00:14:36,060 --> 00:14:41,910
just in such a way that if you you just

00:14:39,779 --> 00:14:45,060
basically turn it on like a plug-in you

00:14:41,910 --> 00:14:48,649
say hey I want to use galera and then

00:14:45,060 --> 00:14:51,600
you install the the galera library and

00:14:48,649 --> 00:14:54,510
away you go you don't have to switch

00:14:51,600 --> 00:14:58,170
server binaries anymore to in order to

00:14:54,510 --> 00:15:01,170
make use of galera so so just

00:14:58,170 --> 00:15:02,860
simplifying that for people on the are

00:15:01,170 --> 00:15:07,880
our chief

00:15:02,860 --> 00:15:09,560
maria DB galera developer um will be

00:15:07,880 --> 00:15:14,510
speaking on Sunday I think it's at one

00:15:09,560 --> 00:15:16,160
thirty about about using Maria deep some

00:15:14,510 --> 00:15:18,770
he's going over what they think is talk

00:15:16,160 --> 00:15:22,850
is titled Maria DB galera cluster best

00:15:18,770 --> 00:15:24,440
practices or something like that so so

00:15:22,850 --> 00:15:27,680
if you're interested in learning more

00:15:24,440 --> 00:15:30,970
about galera cluster on that be the talk

00:15:27,680 --> 00:15:36,290
to go to glare has all sorts of benefits

00:15:30,970 --> 00:15:39,590
about clustering doing doing a cluster

00:15:36,290 --> 00:15:41,840
either locally or across a LAN has a

00:15:39,590 --> 00:15:46,400
non-blocking ddl it has no limits on

00:15:41,840 --> 00:15:49,220
trend transaction sizes it lets you it's

00:15:46,400 --> 00:15:50,030
an awesome product so go to that talk if

00:15:49,220 --> 00:15:52,160
you're interested in learning more about

00:15:50,030 --> 00:15:53,720
it there's some new information schema

00:15:52,160 --> 00:15:56,480
tables that are being introduced in 10

00:15:53,720 --> 00:16:00,530
dot one and then we have a page in our

00:15:56,480 --> 00:16:02,510
knowledge base that goes over it 10 dot

00:16:00,530 --> 00:16:05,210
one encryption I'm really excited about

00:16:02,510 --> 00:16:06,830
this this code actually came directly

00:16:05,210 --> 00:16:12,200
from Google who is using it in

00:16:06,830 --> 00:16:17,540
production on their own mysql maria TV

00:16:12,200 --> 00:16:20,900
instances it lets you encrypt individual

00:16:17,540 --> 00:16:23,420
tables or an entire table space and it

00:16:20,900 --> 00:16:25,730
has support for rolling keys using AES

00:16:23,420 --> 00:16:27,170
the rolling keys is where you had your

00:16:25,730 --> 00:16:29,120
encrypting everything with a certain

00:16:27,170 --> 00:16:31,460
encryption key well then what if you

00:16:29,120 --> 00:16:35,150
need to switch keys and so that it lets

00:16:31,460 --> 00:16:37,070
you expire a key at at another key and

00:16:35,150 --> 00:16:40,220
then it will and you know on a rolling

00:16:37,070 --> 00:16:41,840
basis re encrypt everything and so it

00:16:40,220 --> 00:16:43,850
allows you to switch out keys say say a

00:16:41,840 --> 00:16:45,580
key becomes compromised or something you

00:16:43,850 --> 00:16:49,100
know you can switch the key on the fly

00:16:45,580 --> 00:16:54,260
get it out there um encrypt everything

00:16:49,100 --> 00:16:56,150
basically um except for the binlog the

00:16:54,260 --> 00:16:59,840
encryption does have an overhead of

00:16:56,150 --> 00:17:01,700
around ten percent of course we want it

00:16:59,840 --> 00:17:04,970
to be better but that's that's where

00:17:01,700 --> 00:17:09,890
we're at right now it's extra DB nodb

00:17:04,970 --> 00:17:12,260
only and if using temporary tables Aria

00:17:09,890 --> 00:17:13,820
it will be used for that but only only

00:17:12,260 --> 00:17:16,040
for Aria temporary tables if you have a

00:17:13,820 --> 00:17:19,790
regular Aria table the

00:17:16,040 --> 00:17:21,460
Aria storage engine it will not it

00:17:19,790 --> 00:17:23,690
encryption is not available for those

00:17:21,460 --> 00:17:26,510
there's also a file key management

00:17:23,690 --> 00:17:28,910
plug-in which which can be used to help

00:17:26,510 --> 00:17:31,880
manage the encryption keys there's more

00:17:28,910 --> 00:17:33,350
on it at the link it's a really cool

00:17:31,880 --> 00:17:36,470
thing you know it's just part of the

00:17:33,350 --> 00:17:41,200
effort to to be more secure in modern

00:17:36,470 --> 00:17:44,210
times and encrypting everything on disk

00:17:41,200 --> 00:17:47,660
in the database and having having that

00:17:44,210 --> 00:17:49,760
managed by the database another new

00:17:47,660 --> 00:17:52,070
feature in 10 dot one is optimistic

00:17:49,760 --> 00:17:53,720
parallel replication parallel

00:17:52,070 --> 00:17:56,720
replication is the thing where if you

00:17:53,720 --> 00:17:59,990
have all sorts of transactions coming in

00:17:56,720 --> 00:18:01,490
to say your master if you're doing

00:17:59,990 --> 00:18:04,940
replication you have all these

00:18:01,490 --> 00:18:06,470
transactions coming in and then looking

00:18:04,940 --> 00:18:08,570
at them and trying to commit them in

00:18:06,470 --> 00:18:10,070
parallel just to speed things up if

00:18:08,570 --> 00:18:13,100
they're allowed to be done in parallel

00:18:10,070 --> 00:18:17,720
and intend Otto where we had parallel

00:18:13,100 --> 00:18:19,790
replication they could be committed in

00:18:17,720 --> 00:18:21,260
parallel on the slaves but only if they

00:18:19,790 --> 00:18:27,080
were also committed in parallel on the

00:18:21,260 --> 00:18:29,270
master now when you replicate multiple

00:18:27,080 --> 00:18:30,770
transactions even if they weren't

00:18:29,270 --> 00:18:33,860
committed in parallel on the master the

00:18:30,770 --> 00:18:35,900
slave has some smarts to be able to

00:18:33,860 --> 00:18:39,050
commit them in parallel on the on on the

00:18:35,900 --> 00:18:42,880
slave if it's possible to do so which

00:18:39,050 --> 00:18:45,050
can give us a performance boost because

00:18:42,880 --> 00:18:47,120
because of the way replication works

00:18:45,050 --> 00:18:48,830
there's usually some lag between the

00:18:47,120 --> 00:18:50,360
master and the slave and so sometimes

00:18:48,830 --> 00:18:51,950
all the transactions that were committed

00:18:50,360 --> 00:18:54,020
in parallel on the master maybe some new

00:18:51,950 --> 00:18:55,430
ones came in and the slave is looking at

00:18:54,020 --> 00:18:57,140
all in at the same time it's like oh I

00:18:55,430 --> 00:18:59,690
can commit these at the same time as

00:18:57,140 --> 00:19:03,200
well that provides a performance boost

00:18:59,690 --> 00:19:05,510
so it's cool new feature something just

00:19:03,200 --> 00:19:07,010
to just to help speed things up and you

00:19:05,510 --> 00:19:08,630
know speed things up automatically

00:19:07,010 --> 00:19:11,000
nothing you have to do it will just try

00:19:08,630 --> 00:19:15,310
to do it automatically if you're running

00:19:11,000 --> 00:19:17,510
10 dot one thread pool has been improved

00:19:15,310 --> 00:19:18,920
thread pools when you're where you're

00:19:17,510 --> 00:19:20,240
puling connection threads when you have

00:19:18,920 --> 00:19:21,770
a bunch of client connecting into the

00:19:20,240 --> 00:19:24,350
database trying to pull those threads

00:19:21,770 --> 00:19:26,450
and and manage them in an efficient way

00:19:24,350 --> 00:19:28,250
so that you don't hit the the cliff

00:19:26,450 --> 00:19:30,050
where you have all the call your

00:19:28,250 --> 00:19:31,970
connection counts rise and then suddenly

00:19:30,050 --> 00:19:34,960
the your database can't handle anymore

00:19:31,970 --> 00:19:37,700
and your performance just kind of tanks

00:19:34,960 --> 00:19:42,230
so we have to have had the thread pool

00:19:37,700 --> 00:19:45,680
for a while in Maria DB percona took our

00:19:42,230 --> 00:19:47,660
code they improved upon it and so we we

00:19:45,680 --> 00:19:50,360
are we are incorporating their

00:19:47,660 --> 00:19:51,920
improvements back into Maria d be so

00:19:50,360 --> 00:19:56,890
kind of a nice back and forth between

00:19:51,920 --> 00:20:02,570
them to keep new performance improving

00:19:56,890 --> 00:20:04,520
nice little bump in performance there so

00:20:02,570 --> 00:20:06,650
nodb there's lots of improvements in

00:20:04,520 --> 00:20:11,840
nodb a lot of these have come directly

00:20:06,650 --> 00:20:15,170
from mysql 57 nodb there's things like

00:20:11,840 --> 00:20:19,760
the the multi-threaded flush page

00:20:15,170 --> 00:20:22,100
compression which helps helps with

00:20:19,760 --> 00:20:23,510
performance and specific page

00:20:22,100 --> 00:20:25,250
compression improvements if you're

00:20:23,510 --> 00:20:29,690
running on flash hardware like like

00:20:25,250 --> 00:20:35,810
fusion-io and then also you know from

00:20:29,690 --> 00:20:38,750
the larger page sizes so that you can

00:20:35,810 --> 00:20:42,410
have larger pages just so you can you

00:20:38,750 --> 00:20:45,230
know a storm or the old limit was only

00:20:42,410 --> 00:20:47,060
16 kilobytes and so increasing the page

00:20:45,230 --> 00:20:52,190
size has some has some good performance

00:20:47,060 --> 00:20:54,800
improvements there's also we were able

00:20:52,190 --> 00:20:58,730
to get a defragmentation patch from

00:20:54,800 --> 00:21:02,960
facebook that that was ported over by

00:20:58,730 --> 00:21:05,150
daum kakao um the defragmenting it

00:21:02,960 --> 00:21:09,410
allows you to free up some table space

00:21:05,150 --> 00:21:12,620
when a rose deleted from from you know

00:21:09,410 --> 00:21:14,330
DB the it's just the reference to the

00:21:12,620 --> 00:21:17,900
rose deleted the disk space isn't

00:21:14,330 --> 00:21:22,100
actually automatically freed up if if it

00:21:17,900 --> 00:21:24,200
can write to that freed up area it will

00:21:22,100 --> 00:21:27,800
but you'll you'll get to a point where

00:21:24,200 --> 00:21:29,540
in your on disk there there'll be lots

00:21:27,800 --> 00:21:30,830
of holes because you know these roles

00:21:29,540 --> 00:21:35,200
have been removed but there's nothing

00:21:30,830 --> 00:21:37,580
that would fit into that slot em anyway

00:21:35,200 --> 00:21:39,260
the defragmentation allows you to

00:21:37,580 --> 00:21:41,360
automatically recover some of that disk

00:21:39,260 --> 00:21:43,950
space if you're in a situation where

00:21:41,360 --> 00:21:46,240
disk space premium

00:21:43,950 --> 00:21:50,430
we also have an option where you can

00:21:46,240 --> 00:21:53,110
where you can force a primary key which

00:21:50,430 --> 00:21:58,210
basically enforces good behavior from

00:21:53,110 --> 00:22:00,280
your dbas you know if DBAs in a time

00:21:58,210 --> 00:22:01,840
crunch oh we need we need this new table

00:22:00,280 --> 00:22:03,610
for such and such and they quickly

00:22:01,840 --> 00:22:07,210
create a table that does what they

00:22:03,610 --> 00:22:10,000
needed to do this one this this option

00:22:07,210 --> 00:22:11,320
forces them that oh whoa you didn't

00:22:10,000 --> 00:22:13,660
create this table with the primary key

00:22:11,320 --> 00:22:15,220
or you know it won't allow the table to

00:22:13,660 --> 00:22:17,350
be created so it kind of kind of helps

00:22:15,220 --> 00:22:23,020
you enforce good behavior on the on the

00:22:17,350 --> 00:22:26,320
part of your dbas so just just a nice

00:22:23,020 --> 00:22:28,120
little feature they're going back to web

00:22:26,320 --> 00:22:35,350
scale there are a lot of web scale

00:22:28,120 --> 00:22:37,930
improvements to nodb a lot some of them

00:22:35,350 --> 00:22:40,060
like like lazy flushing which is just

00:22:37,930 --> 00:22:42,310
specifically developed to help we're

00:22:40,060 --> 00:22:45,880
leveling if you're using if you're using

00:22:42,310 --> 00:22:47,770
flash drives because you don't want on

00:22:45,880 --> 00:22:49,270
flash you don't want like say if you

00:22:47,770 --> 00:22:52,960
have a hot row or something you don't

00:22:49,270 --> 00:22:54,940
want that part of the flash drive to

00:22:52,960 --> 00:22:57,370
keep getting right written rewritten

00:22:54,940 --> 00:22:58,960
written rewritten you know then then

00:22:57,370 --> 00:23:02,170
you've got that little section of your

00:22:58,960 --> 00:23:04,420
flash drive that's starting to will

00:23:02,170 --> 00:23:06,370
start to fail first we want to you want

00:23:04,420 --> 00:23:09,330
to kind of level the Reich's if you can

00:23:06,370 --> 00:23:13,810
anyway the lazy flushing helps with that

00:23:09,330 --> 00:23:16,690
there's also the LRU flushing the least

00:23:13,810 --> 00:23:21,400
recently used when you have pages in

00:23:16,690 --> 00:23:25,990
memory the LRU flushing there the patch

00:23:21,400 --> 00:23:27,580
from facebook where where the flushing

00:23:25,990 --> 00:23:29,710
would happen when the server was active

00:23:27,580 --> 00:23:31,780
what about when the server was inactive

00:23:29,710 --> 00:23:34,000
this allows the flushing to keep

00:23:31,780 --> 00:23:37,300
continuing which can help with

00:23:34,000 --> 00:23:40,990
performance a few other things I won't

00:23:37,300 --> 00:23:47,620
go into but the links can can fill you

00:23:40,990 --> 00:23:50,590
in on all those this is one that I kind

00:23:47,620 --> 00:23:53,770
of like the per query variables it's a

00:23:50,590 --> 00:23:55,960
it's a port from percona server there's

00:23:53,770 --> 00:23:56,540
a nice blog post there that gives kind

00:23:55,960 --> 00:23:59,480
of the back

00:23:56,540 --> 00:24:01,150
round of it the the actual idea for the

00:23:59,480 --> 00:24:04,730
feature has been around for a long time

00:24:01,150 --> 00:24:07,370
but it was just never implemented until

00:24:04,730 --> 00:24:09,740
Percona went ahead and said hey this is

00:24:07,370 --> 00:24:11,990
actually a good idea let's do it per

00:24:09,740 --> 00:24:15,530
query variables what it what it allows

00:24:11,990 --> 00:24:17,060
you to do is set a variable change of

00:24:15,530 --> 00:24:21,110
variable but only for the current query

00:24:17,060 --> 00:24:24,710
that you're running the example here you

00:24:21,110 --> 00:24:26,510
know increase the max statement time say

00:24:24,710 --> 00:24:28,970
you save a max statement time of 500

00:24:26,510 --> 00:24:30,560
increase that to a thousand just for

00:24:28,970 --> 00:24:31,820
this query because maybe this queries

00:24:30,560 --> 00:24:33,770
but you know it's going to run longer

00:24:31,820 --> 00:24:35,030
because you're you know you know it's an

00:24:33,770 --> 00:24:36,860
expensive query you know it's going to

00:24:35,030 --> 00:24:38,240
do it's going to do a lot of things you

00:24:36,860 --> 00:24:39,830
know that the settings on the server

00:24:38,240 --> 00:24:41,180
won't allow you to do it but you don't

00:24:39,830 --> 00:24:42,500
want to increase it for every query

00:24:41,180 --> 00:24:45,650
running on the server just for this one

00:24:42,500 --> 00:24:47,390
and tell this query is over and then you

00:24:45,650 --> 00:24:50,960
know go back to setting as usual so it

00:24:47,390 --> 00:24:54,080
allows you to tweak a query just on the

00:24:50,960 --> 00:24:55,790
fly hey I want I want you know the max

00:24:54,080 --> 00:24:57,770
statement time change just for this

00:24:55,790 --> 00:24:59,630
query or I want the buffer size to

00:24:57,770 --> 00:25:01,180
change just for this query and then when

00:24:59,630 --> 00:25:03,740
it's over just go back to the way it was

00:25:01,180 --> 00:25:05,990
and so it's kind of a useful feature

00:25:03,740 --> 00:25:07,700
especially if you're if you're you know

00:25:05,990 --> 00:25:10,280
you got to go in and do something that's

00:25:07,700 --> 00:25:12,050
kind of out of the ordinary um you know

00:25:10,280 --> 00:25:14,000
or if you have a batch job that you run

00:25:12,050 --> 00:25:15,950
overnight that you know you know

00:25:14,000 --> 00:25:17,510
normally in normal situations you don't

00:25:15,950 --> 00:25:20,990
want to allow this type of query to run

00:25:17,510 --> 00:25:23,330
but at two a.m. on a sunday every sunday

00:25:20,990 --> 00:25:26,300
you need to you need to do this sort of

00:25:23,330 --> 00:25:28,160
query and you know you know it would it

00:25:26,300 --> 00:25:30,680
would trip something that you've set up

00:25:28,160 --> 00:25:33,560
before this allows you to to run that

00:25:30,680 --> 00:25:35,870
query sets change the change your change

00:25:33,560 --> 00:25:37,850
your variables run the query and

00:25:35,870 --> 00:25:39,970
everything's everything's good so it's

00:25:37,850 --> 00:25:45,950
kind of it's a useful feature for dbas

00:25:39,970 --> 00:25:47,930
um query timeouts kind of a fun fun

00:25:45,950 --> 00:25:51,920
thing you know you can use max statement

00:25:47,930 --> 00:25:54,500
time option to to abort a long-running

00:25:51,920 --> 00:25:57,110
query automatically say you have a query

00:25:54,500 --> 00:26:00,230
that you know is expensive and but it

00:25:57,110 --> 00:26:02,660
also locks up a hot row in your database

00:26:00,230 --> 00:26:04,220
or something where other things start

00:26:02,660 --> 00:26:05,780
waiting on this query finishing and

00:26:04,220 --> 00:26:07,730
you're like well I really want to run

00:26:05,780 --> 00:26:09,890
this query but if it takes longer than

00:26:07,730 --> 00:26:10,850
10 seconds to run you know

00:26:09,890 --> 00:26:13,430
we have other things that are more

00:26:10,850 --> 00:26:15,890
important so you can you can set the max

00:26:13,430 --> 00:26:19,730
statement time to abort it automatically

00:26:15,890 --> 00:26:23,180
if any query is is taking longer than

00:26:19,730 --> 00:26:24,440
say 10 seconds these these two options

00:26:23,180 --> 00:26:26,840
the per query variables in the crate

00:26:24,440 --> 00:26:28,580
timeouts can work together so say you

00:26:26,840 --> 00:26:30,140
know you're running an expensive query

00:26:28,580 --> 00:26:32,540
this this query is going to take a while

00:26:30,140 --> 00:26:35,300
but if it takes longer than 30 seconds

00:26:32,540 --> 00:26:37,160
you know kill it because it's it's not

00:26:35,300 --> 00:26:40,580
worth it to our to our application and

00:26:37,160 --> 00:26:42,740
so you can set a per query variable of

00:26:40,580 --> 00:26:44,360
Max statement times say hey I want to

00:26:42,740 --> 00:26:47,480
run this expensive query but if it takes

00:26:44,360 --> 00:26:49,340
long in 20 seconds kill it and that way

00:26:47,480 --> 00:26:52,970
you know you can you can just keep

00:26:49,340 --> 00:26:59,840
running as normal and and so it's a

00:26:52,970 --> 00:27:02,630
useful feature so optimizer when maria

00:26:59,840 --> 00:27:09,740
DB the first few releases amarilla d be

00:27:02,630 --> 00:27:15,920
very did a lot of improvements to the to

00:27:09,740 --> 00:27:18,020
the optimizer the entire basically the

00:27:15,920 --> 00:27:22,220
entire optimizer team that was at the

00:27:18,020 --> 00:27:23,900
original MySQL moved over to start

00:27:22,220 --> 00:27:26,660
working on Maria DB when the readme

00:27:23,900 --> 00:27:28,340
project was started and so we had a lot

00:27:26,660 --> 00:27:32,360
of X we have we have a lot of expertise

00:27:28,340 --> 00:27:34,250
in that area and so a lot of changes I

00:27:32,360 --> 00:27:37,370
mean the optimized were made especially

00:27:34,250 --> 00:27:41,030
in like five more ad b-52 and really be

00:27:37,370 --> 00:27:45,200
53 that has continued up until now and

00:27:41,030 --> 00:27:50,360
so a lot more optimizer improvements are

00:27:45,200 --> 00:27:53,540
naturally going into ten dot-111 of the

00:27:50,360 --> 00:27:55,430
ones that i like is the explained json

00:27:53,540 --> 00:27:57,560
where you can get when you're doing

00:27:55,430 --> 00:28:01,790
running and explain on a query you can

00:27:57,560 --> 00:28:04,400
get the output in json the it's it's I

00:28:01,790 --> 00:28:05,690
say like 56 on there because our output

00:28:04,400 --> 00:28:07,280
is a little bit different we think is a

00:28:05,690 --> 00:28:11,150
little bit smarter than what you'll see

00:28:07,280 --> 00:28:13,100
in MySQL 56 that the pages there the the

00:28:11,150 --> 00:28:17,090
differences page there they explained

00:28:13,100 --> 00:28:18,920
format JSON differences link can go as a

00:28:17,090 --> 00:28:21,140
bunch of examples as to exactly how the

00:28:18,920 --> 00:28:23,290
output differs but basically you're

00:28:21,140 --> 00:28:27,160
doing running the explain and then it

00:28:23,290 --> 00:28:29,500
back at the JSON string which is you

00:28:27,160 --> 00:28:32,830
know of course very easy to parse and

00:28:29,500 --> 00:28:34,600
you know in an application and then the

00:28:32,830 --> 00:28:37,240
same same with explain analyzed with

00:28:34,600 --> 00:28:40,890
format JSON lets you analyze your

00:28:37,240 --> 00:28:48,010
queries and get the output as a JSON

00:28:40,890 --> 00:28:51,210
object so a useful thing for dbas in 10

00:28:48,010 --> 00:28:55,330
dot one we're introducing a password

00:28:51,210 --> 00:28:58,390
validation plug-in API which is which I

00:28:55,330 --> 00:29:02,710
i like it i think it's kind of fun we've

00:28:58,390 --> 00:29:04,630
were including a couple of plugins which

00:29:02,710 --> 00:29:06,100
are kind of like reference plugins we're

00:29:04,630 --> 00:29:08,350
hoping that that members of the

00:29:06,100 --> 00:29:10,870
community will will expand upon those

00:29:08,350 --> 00:29:12,760
and and do fancier things with them the

00:29:10,870 --> 00:29:18,280
two plugins that we that we're including

00:29:12,760 --> 00:29:21,010
with Maria DB are fairly simple the and

00:29:18,280 --> 00:29:23,050
you know they both basically serve as

00:29:21,010 --> 00:29:25,810
proof of concepts for using the the

00:29:23,050 --> 00:29:30,130
plug-in API the simple password check is

00:29:25,810 --> 00:29:32,650
just your normal password check type of

00:29:30,130 --> 00:29:34,510
thing where where you you can enforce

00:29:32,650 --> 00:29:37,060
password length minimum number of

00:29:34,510 --> 00:29:40,960
certain types of characters things like

00:29:37,060 --> 00:29:43,050
that and and the link there has has some

00:29:40,960 --> 00:29:45,250
examples of using it in practice

00:29:43,050 --> 00:29:47,020
basically if some if you if someone

00:29:45,250 --> 00:29:49,660
tries to create a password if you have

00:29:47,020 --> 00:29:51,880
this this simple password check plug-in

00:29:49,660 --> 00:29:53,410
turned on and someone tries to create a

00:29:51,880 --> 00:29:54,850
password that doesn't match it it'll

00:29:53,410 --> 00:29:57,850
just come back with an error and say hey

00:29:54,850 --> 00:30:02,500
you need to try again and then we also

00:29:57,850 --> 00:30:05,640
have utilizing the crack lib library you

00:30:02,500 --> 00:30:08,560
can do a a it's the same sort of thing

00:30:05,640 --> 00:30:12,010
where if it if it can't pass the crack

00:30:08,560 --> 00:30:13,960
lib test and then it'll it'll come back

00:30:12,010 --> 00:30:15,670
with an error and say you know you you

00:30:13,960 --> 00:30:18,040
can't you know if you create a user in

00:30:15,670 --> 00:30:19,300
the database and you give it a password

00:30:18,040 --> 00:30:21,600
it'll come back and say hey you can't

00:30:19,300 --> 00:30:27,880
have that password so something to help

00:30:21,600 --> 00:30:29,440
just like with the the forcing of

00:30:27,880 --> 00:30:31,000
primary key it's something to help

00:30:29,440 --> 00:30:34,510
enforce good behavior on the part of

00:30:31,000 --> 00:30:35,770
your dbas so that their passwords the

00:30:34,510 --> 00:30:37,100
passwords that they create for users in

00:30:35,770 --> 00:30:41,809
the database are

00:30:37,100 --> 00:30:44,360
are good so one other cool thing about

00:30:41,809 --> 00:30:47,330
you can enable both of these at the same

00:30:44,360 --> 00:30:49,820
time if you want and it will check

00:30:47,330 --> 00:30:52,039
against both of them and so only if both

00:30:49,820 --> 00:30:53,720
paths will it allow the password so you

00:30:52,039 --> 00:30:55,789
can be pretty flexible and of course

00:30:53,720 --> 00:30:57,919
it's it's an API that both these plugins

00:30:55,789 --> 00:31:01,580
are using so you can of course come up

00:30:57,919 --> 00:31:05,240
with your own your own password checking

00:31:01,580 --> 00:31:07,580
plug-in and we're sure that that

00:31:05,240 --> 00:31:08,630
companies will do just that and because

00:31:07,580 --> 00:31:14,270
the help they'll have you know maybe

00:31:08,630 --> 00:31:16,100
they have some some sort of of I don't

00:31:14,270 --> 00:31:17,840
know some requirement and so they create

00:31:16,100 --> 00:31:19,549
their own plug-in that and it's it's all

00:31:17,840 --> 00:31:28,090
fully documented so you can come up with

00:31:19,549 --> 00:31:28,090
your own GIS we've continued our our GIS

00:31:28,570 --> 00:31:38,360
improvements in Moorea DB in the

00:31:33,470 --> 00:31:41,330
intended oh we improved GIS to the point

00:31:38,360 --> 00:31:45,470
where we could load and manipulate the

00:31:41,330 --> 00:31:48,020
open GI at the OpenStreetMap data in 10

00:31:45,470 --> 00:31:52,130
dot 1 we've continued that so that now

00:31:48,020 --> 00:31:54,409
we are fully open G is compliant and and

00:31:52,130 --> 00:31:56,419
we pass the open G is conformance tests

00:31:54,409 --> 00:31:57,950
so just another another improvement if

00:31:56,419 --> 00:32:00,350
you're if you're dealing with geographic

00:31:57,950 --> 00:32:04,850
information systems where you can use

00:32:00,350 --> 00:32:07,190
Maria DB and and we pass all of the we

00:32:04,850 --> 00:32:12,650
we meet all the standards around that

00:32:07,190 --> 00:32:18,950
now which is always a good thing so a

00:32:12,650 --> 00:32:20,929
few other miscellaneous bits we we've

00:32:18,950 --> 00:32:22,400
added the ability for slaves to execute

00:32:20,929 --> 00:32:27,919
triggers if you're using row based

00:32:22,400 --> 00:32:30,260
replication we've added full JSON beasts

00:32:27,919 --> 00:32:33,580
on support to the connect storage engine

00:32:30,260 --> 00:32:37,580
connect as an engine which allows you to

00:32:33,580 --> 00:32:41,120
connect to various either other

00:32:37,580 --> 00:32:44,390
databases or files or what have you you

00:32:41,120 --> 00:32:49,100
can connect to things like like XML

00:32:44,390 --> 00:32:50,650
files things like you know an Oracle

00:32:49,100 --> 00:32:53,740
database or a

00:32:50,650 --> 00:32:56,080
a db2 you know that it allows you to

00:32:53,740 --> 00:32:58,290
connect two things is basically it could

00:32:56,080 --> 00:33:01,060
be another database it could be a file

00:32:58,290 --> 00:33:03,550
allows you to connect to those and and

00:33:01,060 --> 00:33:06,940
then work with them as if it was a

00:33:03,550 --> 00:33:08,590
regular table in your database so you

00:33:06,940 --> 00:33:12,040
know can't connect to another database

00:33:08,590 --> 00:33:15,130
and do a join between your table and

00:33:12,040 --> 00:33:20,370
this table that's in another database or

00:33:15,130 --> 00:33:22,390
or connect join your table to a XML file

00:33:20,370 --> 00:33:26,560
that comes from a completely different

00:33:22,390 --> 00:33:28,900
system and do queries against it as if

00:33:26,560 --> 00:33:30,430
it was just part of your database so

00:33:28,900 --> 00:33:32,740
it's a very it's a very interesting

00:33:30,430 --> 00:33:39,850
storage engine and now it we've added

00:33:32,740 --> 00:33:41,970
full JSON and piece on support see if

00:33:39,850 --> 00:33:47,710
there's anything else interesting here

00:33:41,970 --> 00:33:50,230
at least to me we the roles support has

00:33:47,710 --> 00:33:52,800
been has been improved we have we have

00:33:50,230 --> 00:33:55,150
database roles where we're when you're

00:33:52,800 --> 00:33:58,990
setting up permissions for users you can

00:33:55,150 --> 00:34:01,750
define a role and say well this this

00:33:58,990 --> 00:34:03,430
user is a part of the accounting role so

00:34:01,750 --> 00:34:05,920
they have all the permissions assigned

00:34:03,430 --> 00:34:07,930
to this role that you've set up for just

00:34:05,920 --> 00:34:11,290
for the accounting department or just

00:34:07,930 --> 00:34:12,760
for engineering or just for whoever and

00:34:11,290 --> 00:34:14,620
so it's a great way to manage

00:34:12,760 --> 00:34:19,270
permissions if you have lots of users in

00:34:14,620 --> 00:34:22,390
your database and and we have a distant

00:34:19,270 --> 00:34:25,330
proving that Kerberos at Anna Kerberos

00:34:22,390 --> 00:34:27,250
authentication plugin so that you can

00:34:25,330 --> 00:34:32,620
authenticate using Kerberos to to the

00:34:27,250 --> 00:34:35,409
database it's an evolution of the of the

00:34:32,620 --> 00:34:39,850
authentication API that we have in Maria

00:34:35,409 --> 00:34:45,730
TV trying to add more more plugins to

00:34:39,850 --> 00:34:49,390
that let's see just some miscellaneous

00:34:45,730 --> 00:34:51,040
things that I thought were notable frm

00:34:49,390 --> 00:34:52,860
files not being created for temporary

00:34:51,040 --> 00:34:55,540
tables which improves performance

00:34:52,860 --> 00:34:57,100
instead the temporary tables are you

00:34:55,540 --> 00:34:58,890
know just improves there's their speeds

00:34:57,100 --> 00:35:02,580
so there's nothing being written to disk

00:34:58,890 --> 00:35:06,420
at all for them and

00:35:02,580 --> 00:35:10,200
and then a bunch of new information

00:35:06,420 --> 00:35:12,900
schema system variables we've also for

00:35:10,200 --> 00:35:16,200
the packages that Maria DB org is

00:35:12,900 --> 00:35:19,140
distributing we've enabled some security

00:35:16,200 --> 00:35:22,860
hardening options in the compilers so

00:35:19,140 --> 00:35:28,610
that so that just to kind of help with

00:35:22,860 --> 00:35:32,280
the security just fortify them basically

00:35:28,610 --> 00:35:36,450
just to you know for those unknown

00:35:32,280 --> 00:35:40,340
unknowns that that people talk about and

00:35:36,450 --> 00:35:42,600
then the slow query log can be

00:35:40,340 --> 00:35:44,820
controlled on a session basis which I

00:35:42,600 --> 00:35:48,530
thought was interesting how many of you

00:35:44,820 --> 00:35:51,090
have heard of the audit plug in a 1 to

00:35:48,530 --> 00:35:53,010
the audit plugin it was was something

00:35:51,090 --> 00:35:54,900
that that customers have been asking for

00:35:53,010 --> 00:35:57,180
for a while customers and industries

00:35:54,900 --> 00:36:00,840
where they need to have they need to

00:35:57,180 --> 00:36:02,490
audit what the server is doing if you

00:36:00,840 --> 00:36:04,800
know if you're in an industry like the

00:36:02,490 --> 00:36:06,300
medical industry or maybe aerospace or

00:36:04,800 --> 00:36:09,300
something where there needs to be a

00:36:06,300 --> 00:36:10,890
record of all the changes that are

00:36:09,300 --> 00:36:14,850
happening the audit plugin helps to

00:36:10,890 --> 00:36:17,340
helps to enable that so you can have an

00:36:14,850 --> 00:36:18,750
audit log so that if you're interested

00:36:17,340 --> 00:36:20,760
in a highly regulated industry you can

00:36:18,750 --> 00:36:22,320
show you know you can produce the audit

00:36:20,760 --> 00:36:24,960
log and say this is exactly what has

00:36:22,320 --> 00:36:26,370
happened with these records these are

00:36:24,960 --> 00:36:29,070
all the changes that have been made and

00:36:26,370 --> 00:36:31,200
it's fully auditable um and so we've had

00:36:29,070 --> 00:36:36,710
the audit plugin for a little while was

00:36:31,200 --> 00:36:39,000
introduced in 10 dot 0 and we have

00:36:36,710 --> 00:36:40,410
extended a little bit more in 10 dot 1

00:36:39,000 --> 00:36:42,270
so that I can also track password

00:36:40,410 --> 00:36:45,840
changes in addition to all the other

00:36:42,270 --> 00:36:52,530
things that it does we're adding ipv6

00:36:45,840 --> 00:36:54,780
and ipv4 datatypes additional character

00:36:52,530 --> 00:36:57,930
sets including one that's been mandated

00:36:54,780 --> 00:37:01,920
by the Chinese government if you do any

00:36:57,930 --> 00:37:04,890
work in in Asia that that will be useful

00:37:01,920 --> 00:37:07,310
useful for you so that we have full

00:37:04,890 --> 00:37:09,630
support for that new character set

00:37:07,310 --> 00:37:10,920
there's a couple overview pages which

00:37:09,630 --> 00:37:14,040
which can kind of give you an overview

00:37:10,920 --> 00:37:16,170
of a lot of the new system and status

00:37:14,040 --> 00:37:17,579
variables that have been added

00:37:16,170 --> 00:37:20,460
there's a few of them but we have these

00:37:17,579 --> 00:37:22,319
overview pages to help you get familiar

00:37:20,460 --> 00:37:28,530
with them I encourage you to check those

00:37:22,319 --> 00:37:29,910
out so compatibility it always seems

00:37:28,530 --> 00:37:34,260
like we try to be as compatible as

00:37:29,910 --> 00:37:42,150
possible with MySQL but inevitably some

00:37:34,260 --> 00:37:44,520
incompatibilities sneak in the this is

00:37:42,150 --> 00:37:47,190
for a variety of reasons sometimes it's

00:37:44,520 --> 00:37:50,970
because we we develop the feature first

00:37:47,190 --> 00:37:52,290
and then mysql added the feature later

00:37:50,970 --> 00:37:53,940
but they had to do it their own way

00:37:52,290 --> 00:38:01,950
because they didn't want to take our

00:37:53,940 --> 00:38:03,750
code and so or or it could just be you

00:38:01,950 --> 00:38:05,910
know we just have different ideas of

00:38:03,750 --> 00:38:07,170
what the feature should be and so some

00:38:05,910 --> 00:38:08,940
of our options are different than their

00:38:07,170 --> 00:38:15,119
options so anyway just some of the

00:38:08,940 --> 00:38:16,710
things to keep note of Maria DB uses the

00:38:15,119 --> 00:38:20,430
aria storage engine for temporary

00:38:16,710 --> 00:38:23,369
temporary tables but we've added for

00:38:20,430 --> 00:38:25,170
compatibility sake a default temp

00:38:23,369 --> 00:38:29,040
storage engine option so that you can

00:38:25,170 --> 00:38:32,970
set it to be the same as because MySQL I

00:38:29,040 --> 00:38:36,990
thinks 57 uses in ODB for temporary

00:38:32,970 --> 00:38:38,790
temporary tables and so you can set that

00:38:36,990 --> 00:38:45,000
you know if you want to have one to be

00:38:38,790 --> 00:38:46,710
fully compatible with with with MySQL if

00:38:45,000 --> 00:38:50,700
you want the temporary storage to be the

00:38:46,710 --> 00:38:52,710
same across them we have we've had for a

00:38:50,700 --> 00:38:54,480
while an engine condition push down flag

00:38:52,710 --> 00:38:58,950
so when you have a conditional like a

00:38:54,480 --> 00:39:00,690
where statement on your query the engine

00:38:58,950 --> 00:39:02,549
condition push down flag was there so

00:39:00,690 --> 00:39:06,809
that you could you could instruct maria

00:39:02,549 --> 00:39:10,230
DB to say don't evaluate that we're

00:39:06,809 --> 00:39:12,930
conditioned on the in the optimized at

00:39:10,230 --> 00:39:16,109
the optimizer level push that down to

00:39:12,930 --> 00:39:17,819
the storage engine so that we and and

00:39:16,109 --> 00:39:19,589
evaluate the where condition there this

00:39:17,819 --> 00:39:26,609
is very useful for storage engines like

00:39:19,589 --> 00:39:28,619
spider because of the way it works the

00:39:26,609 --> 00:39:29,850
optimizer really has no clue about how

00:39:28,619 --> 00:39:32,810
to do an appropriate

00:39:29,850 --> 00:39:36,180
we're on the spider storage engine and

00:39:32,810 --> 00:39:37,920
so it's best to push that down to the

00:39:36,180 --> 00:39:40,440
store general impossible so we added a

00:39:37,920 --> 00:39:43,290
flag back in five 5 or 10 dot o

00:39:40,440 --> 00:39:46,230
somewhere and back in there to instruct

00:39:43,290 --> 00:39:48,150
it's 02 to push those where those

00:39:46,230 --> 00:39:50,150
conditionals push those down to the

00:39:48,150 --> 00:39:53,940
storage engine well we've removed that

00:39:50,150 --> 00:39:57,750
in really beat n dot one in favor of

00:39:53,940 --> 00:40:06,150
simply turning it always on for storage

00:39:57,750 --> 00:40:11,760
engines that support it he forgot his

00:40:06,150 --> 00:40:13,050
sunglasses alright so so so that you

00:40:11,760 --> 00:40:17,280
know just just something to be aware of

00:40:13,050 --> 00:40:20,610
if you're using that option we also have

00:40:17,280 --> 00:40:27,000
added a MySQL 56 temporal format option

00:40:20,610 --> 00:40:31,560
because the low-level formats how date

00:40:27,000 --> 00:40:34,910
time and time stamps are stored in MySQL

00:40:31,560 --> 00:40:39,120
56 is different than Maria DB 10 dot 0

00:40:34,910 --> 00:40:41,340
and so I am 10 dot 1 and so we've we've

00:40:39,120 --> 00:40:44,640
added the options so that if you want to

00:40:41,340 --> 00:40:46,560
store them at a low level exactly the

00:40:44,640 --> 00:40:49,200
same as they're stored in MySQL you can

00:40:46,560 --> 00:40:51,270
do so by using this flag just something

00:40:49,200 --> 00:40:52,920
to improve compatibility if you're if

00:40:51,270 --> 00:40:57,780
you're running a mixed environment with

00:40:52,920 --> 00:40:59,970
both of them a performance ski boat

00:40:57,780 --> 00:41:03,720
schema is disabled by default just like

00:40:59,970 --> 00:41:06,120
it is in in 10 dot oh just something to

00:41:03,720 --> 00:41:12,710
be aware of if you use the performance

00:41:06,120 --> 00:41:15,660
schema so 10 dot 1 how to get it

00:41:12,710 --> 00:41:21,750
download Marie BB org is the source for

00:41:15,660 --> 00:41:23,520
all Maria DB latest releases however we

00:41:21,750 --> 00:41:25,650
have a repository configurator and 10

00:41:23,520 --> 00:41:28,740
dot one isn't there that was done on

00:41:25,650 --> 00:41:30,870
purpose by me because we had people

00:41:28,740 --> 00:41:33,840
using the repository configurator and

00:41:30,870 --> 00:41:36,960
installing 10 dot one in production when

00:41:33,840 --> 00:41:38,640
it was still alpha and we had lots of

00:41:36,960 --> 00:41:40,860
weed we tried to put lots of warnings up

00:41:38,640 --> 00:41:42,920
but they did it anyway so I wanted to

00:41:40,860 --> 00:41:44,930
make it explicit

00:41:42,920 --> 00:41:47,869
that they knew what they were doing when

00:41:44,930 --> 00:41:52,670
they did it so basically the

00:41:47,869 --> 00:41:55,849
repositories are there but there they

00:41:52,670 --> 00:41:57,530
they're not advertised so if you go to

00:41:55,849 --> 00:42:02,059
the repository configurator and you

00:41:57,530 --> 00:42:05,000
choose say fedora 21 it'll give you a

00:42:02,059 --> 00:42:10,660
list of instructions you just choose

00:42:05,000 --> 00:42:13,160
Maria db10 fedora 21 re DB 10 and then

00:42:10,660 --> 00:42:15,140
switch everything in the instructions

00:42:13,160 --> 00:42:17,240
when you actually put the instructions

00:42:15,140 --> 00:42:20,030
down to your system to 10 dot one and

00:42:17,240 --> 00:42:22,160
it'll work so there there that it's just

00:42:20,030 --> 00:42:25,099
it's just kind of hidden we have these

00:42:22,160 --> 00:42:28,760
instruct this instruction is on the on

00:42:25,099 --> 00:42:32,030
the Maria DB 10 dot one release notes

00:42:28,760 --> 00:42:35,089
and the end and the 10 dot one

00:42:32,030 --> 00:42:36,829
information page but you know so so you

00:42:35,089 --> 00:42:39,559
can install it the beta you can try it

00:42:36,829 --> 00:42:41,359
out encourage you to do that it will

00:42:39,559 --> 00:42:43,520
show up in their configuration tool as

00:42:41,359 --> 00:42:45,109
soon as we have a release candidate

00:42:43,520 --> 00:42:47,720
release but it was one of those things

00:42:45,109 --> 00:42:52,730
where we're just trying to save people

00:42:47,720 --> 00:42:54,410
from themselves cuz yeah and what was

00:42:52,730 --> 00:42:56,480
funny was the people running 10 dot what

00:42:54,410 --> 00:42:57,980
the 10 dot 1 alpha they were just like

00:42:56,480 --> 00:43:01,910
this is great we love it and we're just

00:42:57,980 --> 00:43:03,650
like who so many things change between

00:43:01,910 --> 00:43:06,770
each alpha we're really worried for you

00:43:03,650 --> 00:43:09,170
that's so so anyway so you won't find it

00:43:06,770 --> 00:43:10,609
it is advertised on if you go to

00:43:09,170 --> 00:43:13,460
directly to download that marine view

00:43:10,609 --> 00:43:14,869
org it'll be in the list but when you go

00:43:13,460 --> 00:43:17,240
to the repository configurator it

00:43:14,869 --> 00:43:20,660
doesn't show up so just something to be

00:43:17,240 --> 00:43:24,470
aware of but pretty easy to get if you

00:43:20,660 --> 00:43:28,130
but you have to know you want it I'd

00:43:24,470 --> 00:43:30,770
also at every talk I try to give a

00:43:28,130 --> 00:43:31,819
little plug for our feedback plugin we

00:43:30,770 --> 00:43:35,150
have a little plugin it's called

00:43:31,819 --> 00:43:38,210
feedback it basically it submits

00:43:35,150 --> 00:43:40,490
anonymous usage information things like

00:43:38,210 --> 00:43:43,609
the amount of memory that's allocated to

00:43:40,490 --> 00:43:46,390
maria DB which plugins are enabled

00:43:43,609 --> 00:43:50,710
things like that it helps us get gage

00:43:46,390 --> 00:43:53,750
usage patterns how maria is being used

00:43:50,710 --> 00:43:56,049
it'll it'll basically want once enabled

00:43:53,750 --> 00:43:59,319
it'll just send a little

00:43:56,049 --> 00:44:01,329
a data packet once a week up to Maria BB

00:43:59,319 --> 00:44:03,039
org with this anonymous information all

00:44:01,329 --> 00:44:04,390
of the information is there all the

00:44:03,039 --> 00:44:06,069
collected data is that in really B dot

00:44:04,390 --> 00:44:07,989
org slash feedback plug-in you can see

00:44:06,069 --> 00:44:10,179
all makes me have some nice little bar

00:44:07,989 --> 00:44:12,309
charts and things that show where Maria

00:44:10,179 --> 00:44:14,109
these bees being used and all that the

00:44:12,309 --> 00:44:16,869
only problem is no one enables it on

00:44:14,109 --> 00:44:18,279
Linux there's little checkbox in the

00:44:16,869 --> 00:44:20,229
windows installer that says enable

00:44:18,279 --> 00:44:23,229
feedback plug-in on Linux you have to

00:44:20,229 --> 00:44:25,599
actually go into the config file and add

00:44:23,229 --> 00:44:28,359
one line it says you know feedback

00:44:25,599 --> 00:44:30,069
plug-in equals one or feedback equals on

00:44:28,359 --> 00:44:33,219
yeah that's what it's feedback he goes

00:44:30,069 --> 00:44:36,039
on and then it'll turn it on but we have

00:44:33,219 --> 00:44:38,380
we have data from over 150 countries but

00:44:36,039 --> 00:44:40,809
like I said only 6000 servers

00:44:38,380 --> 00:44:42,400
approximately last time I checked we're

00:44:40,809 --> 00:44:44,019
actively uploading data and most of them

00:44:42,400 --> 00:44:45,999
were on windows because of the ease of

00:44:44,019 --> 00:44:49,989
checking that little check box during

00:44:45,999 --> 00:44:52,329
the windows install so we think that

00:44:49,989 --> 00:44:54,729
it's windows our windows installer we

00:44:52,329 --> 00:44:56,140
assume is mainly used by developers when

00:44:54,729 --> 00:44:58,239
they're developing an application then

00:44:56,140 --> 00:45:01,719
when they go to production it's on Linux

00:44:58,239 --> 00:45:03,400
so we don't have much data on Linux

00:45:01,719 --> 00:45:07,839
production usage and we'd like to have

00:45:03,400 --> 00:45:11,739
more and so encourage you to turn it on

00:45:07,839 --> 00:45:14,219
if if your company allows that sort of

00:45:11,739 --> 00:45:16,150
thing we know so we know there are some

00:45:14,219 --> 00:45:18,910
companies that you know any sort of

00:45:16,150 --> 00:45:20,140
outbound access like that if you're if

00:45:18,910 --> 00:45:24,009
the server is sending information

00:45:20,140 --> 00:45:26,410
somewhere it's it's it's a big no-no at

00:45:24,009 --> 00:45:29,079
some companies we understand that but

00:45:26,410 --> 00:45:31,150
encourage it if you are able to the

00:45:29,079 --> 00:45:33,609
developers do look at the data just to

00:45:31,150 --> 00:45:35,439
kind of it it kind of gin gives us an

00:45:33,609 --> 00:45:37,179
idea of different trends it's like Oh

00:45:35,439 --> 00:45:38,799
everyone's ever you know we have a lot

00:45:37,179 --> 00:45:40,299
of people suddenly using the Kinect

00:45:38,799 --> 00:45:43,359
engine or we have a lot of people using

00:45:40,299 --> 00:45:44,829
spider actually you know it it's it's

00:45:43,359 --> 00:45:47,769
it's kind of a good thing it's kind of

00:45:44,829 --> 00:45:52,209
like the the popularity contest on

00:45:47,769 --> 00:45:53,439
debian another another cool feature of

00:45:52,209 --> 00:45:55,089
the feedback plugin that a lot of people

00:45:53,439 --> 00:45:58,089
don't know is that it's fully

00:45:55,089 --> 00:46:03,900
configurable the feedback plugin sends

00:45:58,089 --> 00:46:07,119
this data by default to a tumor a BB org

00:46:03,900 --> 00:46:09,459
but it you can you can change that URL

00:46:07,119 --> 00:46:10,090
to an internal URL if you want to keep

00:46:09,459 --> 00:46:14,920
track

00:46:10,090 --> 00:46:16,900
your own internal usage you know how how

00:46:14,920 --> 00:46:18,970
your internal servers are are being used

00:46:16,900 --> 00:46:21,430
you can send it to an internal URL if

00:46:18,970 --> 00:46:23,680
you like pretty easy to do the the

00:46:21,430 --> 00:46:26,200
feedback page in the Murray DB knowledge

00:46:23,680 --> 00:46:31,420
base has all the details about how to do

00:46:26,200 --> 00:46:34,000
that so have to get my little plug um I

00:46:31,420 --> 00:46:35,470
also have to give a plug about various

00:46:34,000 --> 00:46:38,530
really be books that are out there now

00:46:35,470 --> 00:46:41,350
it used to be the first three DB book

00:46:38,530 --> 00:46:45,160
book was the reedy be crash course that

00:46:41,350 --> 00:46:51,390
came out during the marina db5 dot 3

00:46:45,160 --> 00:46:53,650
time frame so it's pretty outdated now

00:46:51,390 --> 00:46:55,060
but that was the first Murray DB book

00:46:53,650 --> 00:46:59,110
but since then a whole bunch more been

00:46:55,060 --> 00:47:00,850
released the two of those are mine I I

00:46:59,110 --> 00:47:04,240
did the Marini be cookbook and I also

00:47:00,850 --> 00:47:06,760
did getting started with rady be um very

00:47:04,240 --> 00:47:10,120
happy that getting started with maria t

00:47:06,760 --> 00:47:13,960
be the second edition I just reviewed

00:47:10,120 --> 00:47:18,640
the last of the second edition proof

00:47:13,960 --> 00:47:21,220
sheets on like monday and tuesday so

00:47:18,640 --> 00:47:24,640
that one will be released the second

00:47:21,220 --> 00:47:28,960
edition will be released within a couple

00:47:24,640 --> 00:47:31,480
of days i think so it is off to the off

00:47:28,960 --> 00:47:37,270
to be printed right now so so that one

00:47:31,480 --> 00:47:40,630
so that one excited about but a lot of

00:47:37,270 --> 00:47:43,990
different ones and some of the some of

00:47:40,630 --> 00:47:47,830
the I remember reading learning mysql

00:47:43,990 --> 00:47:49,240
way back when the first or second

00:47:47,830 --> 00:47:51,100
edition i don't know what but now the

00:47:49,240 --> 00:47:53,320
next version of the the current version

00:47:51,100 --> 00:47:56,560
of learning mysql is now learning mysql

00:47:53,320 --> 00:47:59,770
andrea DB i'm very very excited about

00:47:56,560 --> 00:48:01,060
that so anyway lots of offline resources

00:47:59,770 --> 00:48:03,850
if you want to learn more about maria t

00:48:01,060 --> 00:48:07,710
be online resources of course we have

00:48:03,850 --> 00:48:11,740
the knowledge base nor EV be calm / k be

00:48:07,710 --> 00:48:16,480
the the bug and development tracker is

00:48:11,740 --> 00:48:21,610
we use JIRA a hosted instance and that's

00:48:16,480 --> 00:48:23,480
at Murray the quick link to it is really

00:48:21,610 --> 00:48:27,770
hbu org slash jira

00:48:23,480 --> 00:48:29,570
and then also something that at least

00:48:27,770 --> 00:48:32,359
the developers really excited about was

00:48:29,570 --> 00:48:34,820
we've moved all of our code and all the

00:48:32,359 --> 00:48:37,220
development to github so everything's

00:48:34,820 --> 00:48:46,310
happening on github now and that's the

00:48:37,220 --> 00:48:48,920
address to get to it and yeah so we also

00:48:46,310 --> 00:48:51,350
have several mailing lists there's an

00:48:48,920 --> 00:48:53,480
announced list which just is just for

00:48:51,350 --> 00:48:56,930
announced emails whenever we have

00:48:53,480 --> 00:48:59,960
something to announce that'll get two or

00:48:56,930 --> 00:49:02,869
three emails a month just depends on on

00:48:59,960 --> 00:49:04,490
if there's a release or not we also have

00:49:02,869 --> 00:49:06,080
a discuss list and a developer's list

00:49:04,490 --> 00:49:09,980
both of those are still hosted on launch

00:49:06,080 --> 00:49:12,050
pad where we used to host the code but

00:49:09,980 --> 00:49:13,400
you know we we might move those but if

00:49:12,050 --> 00:49:15,350
we do then there'll be a big

00:49:13,400 --> 00:49:17,770
announcement before hand to those lists

00:49:15,350 --> 00:49:20,090
so that you know where it's moving to

00:49:17,770 --> 00:49:22,369
but for right right now that's where

00:49:20,090 --> 00:49:24,740
they are and then of course we have all

00:49:22,369 --> 00:49:28,940
the social media stuff facebook twitter

00:49:24,740 --> 00:49:31,940
google+ and so on found Maria on

00:49:28,940 --> 00:49:37,580
freenode is where the developers usually

00:49:31,940 --> 00:49:40,070
are found hanging out every day and so

00:49:37,580 --> 00:49:43,760
you can reach out to people there that's

00:49:40,070 --> 00:49:46,970
the there's usually a lot of people in

00:49:43,760 --> 00:49:51,580
that chat room at any given moment in

00:49:46,970 --> 00:49:51,580
that channel so thank you any questions

00:49:53,590 --> 00:50:01,060
all right these are this is my contact

00:49:56,990 --> 00:50:03,890
information i'm on twitter and and

00:50:01,060 --> 00:50:07,730
google+ the slides as i mentioned are up

00:50:03,890 --> 00:50:09,859
on speaker deck i'm also of course on

00:50:07,730 --> 00:50:17,170
launch pad in github and then I have a

00:50:09,859 --> 00:50:17,170
very rarely updated blog so thank you

00:50:33,080 --> 00:50:35,140
you

00:50:39,190 --> 00:50:41,250
you

00:51:01,400 --> 00:51:03,460
you

00:51:33,310 --> 00:51:35,370
you

00:54:19,289 --> 00:54:23,680
your customers rely on your website or

00:54:22,089 --> 00:54:26,019
application if it's slower

00:54:23,680 --> 00:54:28,989
non-responsive it infuriates your users

00:54:26,019 --> 00:54:30,789
and costs you money keeping your

00:54:28,989 --> 00:54:33,989
business critical systems humming along

00:54:30,789 --> 00:54:36,609
requires insight into what they're doing

00:54:33,989 --> 00:54:38,589
your system metrics tells stories

00:54:36,609 --> 00:54:40,599
stories that can reveal performance

00:54:38,589 --> 00:54:42,910
bottlenecks resource limitations and

00:54:40,599 --> 00:54:44,499
other problems but how do you keep an

00:54:42,910 --> 00:54:47,140
eye on all of your systems performance

00:54:44,499 --> 00:54:50,140
metrics in real-time and record this

00:54:47,140 --> 00:54:52,150
data for leader analysis enter longview

00:54:50,140 --> 00:54:53,950
the new way to see what's really going

00:54:52,150 --> 00:54:56,109
on under the hood the long view

00:54:53,950 --> 00:54:58,150
dashboard lets you visualize the status

00:54:56,109 --> 00:55:00,609
of all your systems providing you with a

00:54:58,150 --> 00:55:04,029
bird's-eye view of your entire fleet you

00:55:00,609 --> 00:55:06,579
can sort by cpu memory swap processes

00:55:04,029 --> 00:55:08,319
load and network usage click a specific

00:55:06,579 --> 00:55:10,719
system to access its individual

00:55:08,319 --> 00:55:13,259
dashboard then click and drag to zoom in

00:55:10,719 --> 00:55:15,640
on chokepoints and get more detail

00:55:13,259 --> 00:55:17,319
comprehensive network data including

00:55:15,640 --> 00:55:19,630
inbound and outbound traffic is

00:55:17,319 --> 00:55:21,609
available on the network tab and disk

00:55:19,630 --> 00:55:23,769
rights and free space on a disk stabbed

00:55:21,609 --> 00:55:25,930
while the process explorer displays

00:55:23,769 --> 00:55:28,479
usage statistics for individual

00:55:25,930 --> 00:55:30,670
processes the system info tab shows

00:55:28,479 --> 00:55:32,920
listening services active connections

00:55:30,670 --> 00:55:35,049
and available updates adding long view

00:55:32,920 --> 00:55:36,729
to a system is easy just click the

00:55:35,049 --> 00:55:38,890
button copy the one line installation

00:55:36,729 --> 00:55:41,319
command then run the command on your

00:55:38,890 --> 00:55:43,029
linux system to complete the process the

00:55:41,319 --> 00:55:45,219
agent will begin collecting data and

00:55:43,029 --> 00:55:47,040
sending it to longview then the graphs

00:55:45,219 --> 00:55:49,620
start rolling

00:55:47,040 --> 00:55:51,990
use longview to gain visibility into

00:55:49,620 --> 00:55:56,070
your servers so when your website or app

00:55:51,990 --> 00:55:57,390
heats up it stays up citrix xenserver

00:55:56,070 --> 00:56:00,300
gives you everything you need to

00:55:57,390 --> 00:56:02,580
integrate manage and automate a virtual

00:56:00,300 --> 00:56:05,670
data center all on an enterprise-class

00:56:02,580 --> 00:56:08,340
cloud proven virtual platform and at a

00:56:05,670 --> 00:56:10,170
third of the cost of other solutions but

00:56:08,340 --> 00:56:11,820
why even bother with virtualizing your

00:56:10,170 --> 00:56:14,070
server infrastructure in the first place

00:56:11,820 --> 00:56:15,830
well let's say you have a traditional

00:56:14,070 --> 00:56:17,880
one server to one application

00:56:15,830 --> 00:56:20,210
architecture but you're running out of

00:56:17,880 --> 00:56:22,320
resources and performance is suffering

00:56:20,210 --> 00:56:25,730
once you order new server hardware

00:56:22,320 --> 00:56:28,890
you'll wait for delivery configure it

00:56:25,730 --> 00:56:32,280
install your business application stage

00:56:28,890 --> 00:56:34,440
and test the server and finally add it

00:56:32,280 --> 00:56:36,480
to your production farm if you've been

00:56:34,440 --> 00:56:39,060
through this process before you know it

00:56:36,480 --> 00:56:41,280
can take weeks or even months you also

00:56:39,060 --> 00:56:43,020
know it's a manually intensive process

00:56:41,280 --> 00:56:46,170
that will burden your team every time

00:56:43,020 --> 00:56:48,030
you outgrow your current setup with a

00:56:46,170 --> 00:56:49,950
virtual server solution you could

00:56:48,030 --> 00:56:52,680
accomplish all of that in less than half

00:56:49,950 --> 00:56:55,350
a day server virtualization software

00:56:52,680 --> 00:56:57,840
separates the OS and application from

00:56:55,350 --> 00:56:59,730
the underlying server hardware and with

00:56:57,840 --> 00:57:01,800
multiple virtual machines on a single

00:56:59,730 --> 00:57:04,770
server you can use each of them to run

00:57:01,800 --> 00:57:06,540
different os's and applications this

00:57:04,770 --> 00:57:08,400
makes it possible to move your virtual

00:57:06,540 --> 00:57:10,800
machines from one piece of hardware to

00:57:08,400 --> 00:57:13,080
another whenever you want to maximize

00:57:10,800 --> 00:57:15,030
utilization simplify maintenance or

00:57:13,080 --> 00:57:17,340
recover from a hardware failure and

00:57:15,030 --> 00:57:20,670
without slowing down your applications

00:57:17,340 --> 00:57:23,340
or users clearly server virtualization

00:57:20,670 --> 00:57:26,340
provides big benefits and citrix

00:57:23,340 --> 00:57:28,590
xenserver provides even more since it's

00:57:26,340 --> 00:57:30,450
built on an open platform xenserver

00:57:28,590 --> 00:57:32,730
plays well with your existing hardware

00:57:30,450 --> 00:57:35,040
storage systems and IT management

00:57:32,730 --> 00:57:37,770
software as well as with the industry's

00:57:35,040 --> 00:57:39,810
leading cloud service providers best of

00:57:37,770 --> 00:57:41,490
all you can get started by downloading a

00:57:39,810 --> 00:57:44,760
fully functional production-ready

00:57:41,490 --> 00:57:46,980
version of xenserver for free after a

00:57:44,760 --> 00:57:49,080
10-minute installation process you'll

00:57:46,980 --> 00:57:51,120
see how easy it is to start virtualizing

00:57:49,080 --> 00:57:53,580
your workloads and automating your IT

00:57:51,120 --> 00:57:55,170
management processes and when you're

00:57:53,580 --> 00:57:57,090
ready for a richer set of management

00:57:55,170 --> 00:57:59,580
tools just upgrade to one of the premium

00:57:57,090 --> 00:58:00,869
editions of xenserver so whether you're

00:57:59,580 --> 00:58:02,970
interested in virtualizing

00:58:00,869 --> 00:58:04,950
servers for the first time expanding

00:58:02,970 --> 00:58:07,190
your server virtualization footprint or

00:58:04,950 --> 00:58:09,599
moving server workloads to the cloud

00:58:07,190 --> 00:58:11,490
download and install zend server today

00:58:09,599 --> 00:58:15,720
and see how it can help you simplify

00:58:11,490 --> 00:58:19,430
your IT environment Citrix XenServer do

00:58:15,720 --> 00:58:19,430
more don't spend more

00:58:24,690 --> 00:58:26,750

YouTube URL: https://www.youtube.com/watch?v=XApW7X-P9Mc


