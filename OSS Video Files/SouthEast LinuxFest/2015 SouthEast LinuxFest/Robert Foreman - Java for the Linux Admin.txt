Title: Robert Foreman - Java for the Linux Admin
Publication date: 2017-01-25
Playlist: 2015 SouthEast LinuxFest
Description: 
	
Captions: 
	00:02:57,250 --> 00:02:59,310
you

00:03:03,400 --> 00:03:05,459
you

00:03:07,290 --> 00:03:12,220
primarily because of low enterprise

00:03:09,910 --> 00:03:14,560
littler I mean that's what Java comes

00:03:12,220 --> 00:03:16,480
down to is enterprise malware and I

00:03:14,560 --> 00:03:20,170
don't know about you but I me in the

00:03:16,480 --> 00:03:22,840
days of the quote linux desktop ever

00:03:20,170 --> 00:03:26,530
being reality i think most people on

00:03:22,840 --> 00:03:30,070
that and the fact that linux runs on my

00:03:26,530 --> 00:03:32,380
phone is pretty cool but as linux

00:03:30,070 --> 00:03:33,880
administrator it doesn't really keep me

00:03:32,380 --> 00:03:35,950
employed and it's also not that

00:03:33,880 --> 00:03:39,370
interesting because it's not linux that

00:03:35,950 --> 00:03:41,200
you can really get it play with so Java

00:03:39,370 --> 00:03:44,830
is actually still very important to the

00:03:41,200 --> 00:03:47,260
enterprise where segment which is

00:03:44,830 --> 00:03:51,640
actually you know Enterprise middleware

00:03:47,260 --> 00:03:54,210
is also largely behind the success of

00:03:51,640 --> 00:03:58,030
links that you see today ten years ago

00:03:54,210 --> 00:03:59,590
it was hard to get moneys jobs today you

00:03:58,030 --> 00:04:01,450
can't get enough linux administrator and

00:03:59,590 --> 00:04:03,250
that's largely because of the success of

00:04:01,450 --> 00:04:06,310
Linux in the enterprise know where space

00:04:03,250 --> 00:04:10,959
and that is at least depart they do Java

00:04:06,310 --> 00:04:13,150
itself because of the dispute now this

00:04:10,959 --> 00:04:16,840
might seem like an odd reason for java

00:04:13,150 --> 00:04:19,330
still matter the.net framework but as

00:04:16,840 --> 00:04:21,040
many of you may know dotnet in large

00:04:19,330 --> 00:04:23,140
part was modeled after the Java

00:04:21,040 --> 00:04:26,080
framework because the Java framework was

00:04:23,140 --> 00:04:27,850
so successful at in architecture and dot

00:04:26,080 --> 00:04:30,010
net has at least been equally successful

00:04:27,850 --> 00:04:32,500
with that architecture for the

00:04:30,010 --> 00:04:35,080
enterprise into where space but as you

00:04:32,500 --> 00:04:37,600
know dotnet framework you know for all

00:04:35,080 --> 00:04:40,990
intents purposes it's not linux written

00:04:37,600 --> 00:04:42,540
you know montemagno project aside you

00:04:40,990 --> 00:04:45,910
know you're not really going to see

00:04:42,540 --> 00:04:49,050
dotnet on production enterprise-class

00:04:45,910 --> 00:04:53,560
linux infrastructure so it weighed

00:04:49,050 --> 00:04:55,300
Achmed was modeled after the success of

00:04:53,560 --> 00:04:58,600
Java but it also has become its biggest

00:04:55,300 --> 00:05:00,520
threat and so Java from an architectural

00:04:58,600 --> 00:05:02,290
standpoint is the only thing on Linux

00:05:00,520 --> 00:05:04,600
that is comparable to that dr. Potter

00:05:02,290 --> 00:05:06,490
infrastructure architecture and of

00:05:04,600 --> 00:05:09,669
course Java runs equally well on linux

00:05:06,490 --> 00:05:11,169
and windows so Java i think is important

00:05:09,669 --> 00:05:14,890
to linux from this standpoint as well

00:05:11,169 --> 00:05:17,740
because it's the only thing like dotnet

00:05:14,890 --> 00:05:20,110
it is going to compete with that

00:05:17,740 --> 00:05:22,509
and then I also feel like V openjdk it's

00:05:20,110 --> 00:05:24,819
very important to the current success in

00:05:22,509 --> 00:05:27,880
future success in Java and the Linux

00:05:24,819 --> 00:05:30,580
environment openjdk has also gotten a

00:05:27,880 --> 00:05:32,229
little bit of bad rap you know over time

00:05:30,580 --> 00:05:34,569
because in the early days of openjdk

00:05:32,229 --> 00:05:38,199
most people didn't have on problems

00:05:34,569 --> 00:05:40,569
right right if you ever tried openjdk 6u

00:05:38,199 --> 00:05:42,940
problem try to abandon it and went back

00:05:40,569 --> 00:05:46,840
to the world of jdk or have time the Sun

00:05:42,940 --> 00:05:50,620
Cheney but the only jdk you know

00:05:46,840 --> 00:05:52,750
basically Oracle Java really is open

00:05:50,620 --> 00:05:54,039
source I mean that's the other why don't

00:05:52,750 --> 00:05:57,280
think about the opportunity today is

00:05:54,039 --> 00:06:00,250
that the true upstream the Java is open

00:05:57,280 --> 00:06:02,289
source just like Linux and so that has

00:06:00,250 --> 00:06:06,130
actually helped continue to make java

00:06:02,289 --> 00:06:07,960
relevant for linux and well primarily

00:06:06,130 --> 00:06:09,930
products because openjdk call the front

00:06:07,960 --> 00:06:13,810
something's but i just i think as a

00:06:09,930 --> 00:06:16,539
platform at a language as well and of

00:06:13,810 --> 00:06:18,669
course for emerson tool kits are still

00:06:16,539 --> 00:06:20,319
watch out that's why java mattered to

00:06:18,669 --> 00:06:21,789
begin with is because of the plethora of

00:06:20,319 --> 00:06:24,669
framework and toolkits we're available

00:06:21,789 --> 00:06:26,949
for java and that's still true today and

00:06:24,669 --> 00:06:29,469
from that standpoint you know every

00:06:26,949 --> 00:06:31,000
buzzword java word do you overview any

00:06:29,469 --> 00:06:33,460
one of these i'm not going to get a name

00:06:31,000 --> 00:06:35,380
is but you know any one of these is one

00:06:33,460 --> 00:06:38,050
reason why java's still relevant

00:06:35,380 --> 00:06:42,370
successful today we'll probably get it

00:06:38,050 --> 00:06:44,380
be in the future so when this is not i

00:06:42,370 --> 00:06:45,669
always like to start you know I was like

00:06:44,380 --> 00:06:47,530
to cover a little bit about what this is

00:06:45,669 --> 00:06:49,449
not like i said earlier it's not a

00:06:47,530 --> 00:06:52,060
partner to java programming this is not

00:06:49,449 --> 00:06:55,210
focus for java programs it's just four

00:06:52,060 --> 00:06:57,009
legs administrators and it's also not a

00:06:55,210 --> 00:07:00,969
housing for java scripting i get i see

00:06:57,009 --> 00:07:02,409
this a lot and with the java link system

00:07:00,969 --> 00:07:04,509
administrators that learn a little bit

00:07:02,409 --> 00:07:06,340
of java they're like boo how can I mean

00:07:04,509 --> 00:07:10,569
replace my python scripts with this and

00:07:06,340 --> 00:07:12,460
look yes not really pretty yeah so I see

00:07:10,569 --> 00:07:15,190
I see people who think that you and you

00:07:12,460 --> 00:07:18,130
can do that you can write command line

00:07:15,190 --> 00:07:19,630
CLI talk tools in job I mean in fact

00:07:18,130 --> 00:07:21,430
when you first start programming a job

00:07:19,630 --> 00:07:25,630
on your first job programs are product

00:07:21,430 --> 00:07:27,310
of the CLI command driven jars so it

00:07:25,630 --> 00:07:29,830
might be tempting to try them and you

00:07:27,310 --> 00:07:31,270
can't good good but now that's not what

00:07:29,830 --> 00:07:33,850
is it

00:07:31,270 --> 00:07:37,330
it's also not a sales pitch even though

00:07:33,850 --> 00:07:39,040
Java is truly open source there are a

00:07:37,330 --> 00:07:41,530
lot commercial you know like enterprise

00:07:39,040 --> 00:07:43,750
know where is full a lot of enterprise

00:07:41,530 --> 00:07:45,970
commercial products and so it's going to

00:07:43,750 --> 00:07:48,310
be impossible to avoid or side step

00:07:45,970 --> 00:07:51,340
aside I'm going to mention him some here

00:07:48,310 --> 00:07:52,720
and there and it's this is not intended

00:07:51,340 --> 00:07:56,740
to be a sales pitch it oh you should

00:07:52,720 --> 00:07:58,960
really use this job management but you

00:07:56,740 --> 00:08:00,460
know I do have some biases so those are

00:07:58,960 --> 00:08:02,680
going to come out a little bit in the

00:08:00,460 --> 00:08:06,430
presentation and I apologize but that's

00:08:02,680 --> 00:08:08,260
what it so from next day employ the

00:08:06,430 --> 00:08:10,360
application servers when you talk about

00:08:08,260 --> 00:08:12,070
Java has a Linux system administrator

00:08:10,360 --> 00:08:13,750
you're almost always invariably talking

00:08:12,070 --> 00:08:15,880
about some kind of application to

00:08:13,750 --> 00:08:22,150
whether that be tomcat which is what

00:08:15,880 --> 00:08:24,970
might be the most prevalent with what a

00:08:22,150 --> 00:08:26,770
wild fly which is more commonly you know

00:08:24,970 --> 00:08:28,840
enterprise is going to be jboss or

00:08:26,770 --> 00:08:30,460
application server seven things like

00:08:28,840 --> 00:08:32,500
that other ones you might be familiar

00:08:30,460 --> 00:08:37,030
with IBM WebSphere obviously is a big

00:08:32,500 --> 00:08:40,360
name or weblogic blast fish Apache

00:08:37,030 --> 00:08:42,220
Geronimo and that is this is true so if

00:08:40,360 --> 00:08:43,570
you're dealing with job in the

00:08:42,220 --> 00:08:44,710
application middleware space in

00:08:43,570 --> 00:08:47,110
priceville where space you're probably

00:08:44,710 --> 00:08:48,580
doing one or more of these things but

00:08:47,110 --> 00:08:51,730
what we're going to talk about today

00:08:48,580 --> 00:08:53,260
actually applies to any of these as well

00:08:51,730 --> 00:08:55,180
as anything else I mean if you're

00:08:53,260 --> 00:08:57,160
running like it a java-based ldap

00:08:55,180 --> 00:09:01,330
appliqued you know directory server or

00:08:57,160 --> 00:09:05,410
something like open DJ I look at it's

00:09:01,330 --> 00:09:08,140
equally applicable there as well so what

00:09:05,410 --> 00:09:10,390
is it about I don't like to put a lot of

00:09:08,140 --> 00:09:12,940
verbiage and slides but this I felt like

00:09:10,390 --> 00:09:14,500
I wanted to shed I think to read to you

00:09:12,940 --> 00:09:17,860
I don't like to talk intelligence but

00:09:14,500 --> 00:09:21,190
you know this is a basically really

00:09:17,860 --> 00:09:24,670
about for me for java in legs if it's

00:09:21,190 --> 00:09:26,440
about the runtime so Java is with a

00:09:24,670 --> 00:09:29,290
language and a runtime environment and

00:09:26,440 --> 00:09:31,750
it is the intersection between the java

00:09:29,290 --> 00:09:33,370
/ coochie in the lens OS which i think

00:09:31,750 --> 00:09:34,810
is that the most interesting concern to

00:09:33,370 --> 00:09:36,550
the linux administrators in an area

00:09:34,810 --> 00:09:39,280
where java programmers actually require

00:09:36,550 --> 00:09:40,990
the most assistance in my experience

00:09:39,280 --> 00:09:42,120
java programmers are really good about

00:09:40,990 --> 00:09:44,980
writing job

00:09:42,120 --> 00:09:46,990
more tests but they don't necessarily

00:09:44,980 --> 00:09:48,490
know a whole lot about the operating

00:09:46,990 --> 00:09:50,650
systems that run underneath it

00:09:48,490 --> 00:09:53,800
particularly when that operating system

00:09:50,650 --> 00:09:56,680
is legs where the java developer made

00:09:53,800 --> 00:09:59,860
their primary operating system is

00:09:56,680 --> 00:10:02,620
probably at least on their desktop if

00:09:59,860 --> 00:10:04,980
not also they're developing fire and so

00:10:02,620 --> 00:10:08,380
when it comes to memory utilization

00:10:04,980 --> 00:10:09,880
memory fretting things like that they

00:10:08,380 --> 00:10:12,130
just they don't even know how to

00:10:09,880 --> 00:10:14,230
communicate to you and that's what this

00:10:12,130 --> 00:10:15,790
is really about is my space as the

00:10:14,230 --> 00:10:17,950
latest administrator working with these

00:10:15,790 --> 00:10:19,600
job developers trying to help them make

00:10:17,950 --> 00:10:24,040
their could run better and so they

00:10:19,600 --> 00:10:25,840
stopped thrashing my server version but

00:10:24,040 --> 00:10:30,010
we need to start with some basics about

00:10:25,840 --> 00:10:31,270
the runtime environment so one of the

00:10:30,010 --> 00:10:34,000
first questions I get from a lot of

00:10:31,270 --> 00:10:36,460
links administrators is you know j/ki

00:10:34,000 --> 00:10:40,030
jdk which is Jerry what's the difference

00:10:36,460 --> 00:10:42,220
yeah the easiest explanation I've scheme

00:10:40,030 --> 00:10:45,550
and I don't have super technical here is

00:10:42,220 --> 00:10:47,970
basically it's it's it's just a superset

00:10:45,550 --> 00:10:52,750
or a subset of the Lord I mean basically

00:10:47,970 --> 00:10:56,230
the JDK you know the Jerry is a subset

00:10:52,750 --> 00:10:59,200
of the JDK it just the JDK has more

00:10:56,230 --> 00:11:00,940
commands available to you the JRE comes

00:10:59,200 --> 00:11:02,740
with the JDK and it's the runtime

00:11:00,940 --> 00:11:04,870
environment but at the heart of it and

00:11:02,740 --> 00:11:07,480
this is what's really important is the

00:11:04,870 --> 00:11:09,910
JD of hot swap that's fundamental to

00:11:07,480 --> 00:11:11,860
both of them so whether or not you're

00:11:09,910 --> 00:11:13,570
running the dairy or the JDK at the

00:11:11,860 --> 00:11:15,520
heart of it is still de jagiya which

00:11:13,570 --> 00:11:18,790
like I said my previous slide is what

00:11:15,520 --> 00:11:23,440
we're really getting um historically it

00:11:18,790 --> 00:11:29,680
used to be that most application servers

00:11:23,440 --> 00:11:31,270
require the JDK your Java programmer and

00:11:29,680 --> 00:11:32,890
your system administrator right it would

00:11:31,270 --> 00:11:36,160
be like them coming and saying I want

00:11:32,890 --> 00:11:37,930
you to install GCC everywhere and of

00:11:36,160 --> 00:11:39,820
course you is the Linux Mary said know

00:11:37,930 --> 00:11:42,910
that we don't install development tools

00:11:39,820 --> 00:11:45,190
on our production server it used to be

00:11:42,910 --> 00:11:46,540
that you would actually need to run the

00:11:45,190 --> 00:11:48,490
JDK even a new production tomorrow

00:11:46,540 --> 00:11:50,170
that's less true today most of your

00:11:48,490 --> 00:11:53,120
application servers can run with just

00:11:50,170 --> 00:11:55,250
the Jerry however as you

00:11:53,120 --> 00:11:59,140
might see our intention there are still

00:11:55,250 --> 00:11:59,140
situations where it can be in health

00:11:59,710 --> 00:12:05,089
anyway so and they're always think

00:12:03,620 --> 00:12:07,910
they're still ways to get around without

00:12:05,089 --> 00:12:09,920
it but the examples that i'm going to

00:12:07,910 --> 00:12:13,730
show you actually involved or use a

00:12:09,920 --> 00:12:17,180
genie do caveman line tools like j stack

00:12:13,730 --> 00:12:18,910
and jmac um not the Java Sea obviously

00:12:17,180 --> 00:12:25,550
the Java Sea would be equal to--

00:12:18,910 --> 00:12:27,770
violation so i'm not going to get into

00:12:25,550 --> 00:12:29,660
how to install java specifically this is

00:12:27,770 --> 00:12:32,720
more of my recommendations about

00:12:29,660 --> 00:12:35,510
installing java and you know right off

00:12:32,720 --> 00:12:39,920
the bat it's basically if you can use

00:12:35,510 --> 00:12:43,910
the open JT and forge anything greater

00:12:39,920 --> 00:12:47,300
greater equal to java 7 ish should be ok

00:12:43,910 --> 00:12:48,950
for you like i said a lot of linux

00:12:47,300 --> 00:12:51,230
administrators have somewhat of a bad

00:12:48,950 --> 00:12:54,470
experience with OpenJDK particularly the

00:12:51,230 --> 00:12:59,120
early years because in java 6 it wasn't

00:12:54,470 --> 00:13:01,940
really the upstream to pork or sun jdk a

00:12:59,120 --> 00:13:05,089
timeless it hasn't been fully opened yet

00:13:01,940 --> 00:13:07,910
but now the OpenJDK as if java 7 in

00:13:05,089 --> 00:13:12,200
particular in java a is the upstream to

00:13:07,910 --> 00:13:14,450
the Oracle sun jdk and although the

00:13:12,200 --> 00:13:16,330
doping jdk is not available on windows

00:13:14,450 --> 00:13:19,490
it's really only available on Linux

00:13:16,330 --> 00:13:22,209
there are reasons and benefits for using

00:13:19,490 --> 00:13:24,860
the OpenJDK over using the Oracle

00:13:22,209 --> 00:13:28,250
binaries one of you know a couple of

00:13:24,860 --> 00:13:31,100
these are you know so horrible actually

00:13:28,250 --> 00:13:33,680
has to make the GDK available to

00:13:31,100 --> 00:13:35,600
multiple labs hey OpenJDK is really only

00:13:33,680 --> 00:13:38,390
available for Linux which means that

00:13:35,600 --> 00:13:40,760
they can we can optimize the OpenJDK

00:13:38,390 --> 00:13:43,430
particularly the JVM hot spot for

00:13:40,760 --> 00:13:45,709
minutes and that is they have done that

00:13:43,430 --> 00:13:47,000
it can do that and so sometimes the hot

00:13:45,709 --> 00:13:48,230
spot that you're running on there is

00:13:47,000 --> 00:13:52,310
that actually could be a little bit more

00:13:48,230 --> 00:13:55,400
a little bit more stable on linux and so

00:13:52,310 --> 00:13:59,900
it's just worse running it's also going

00:13:55,400 --> 00:14:02,089
to be easier to deploy the tools the

00:13:59,900 --> 00:14:03,440
commands are all going to be in nice

00:14:02,089 --> 00:14:05,030
same locations

00:14:03,440 --> 00:14:07,190
you're letting solecism so it's going to

00:14:05,030 --> 00:14:10,040
be easier to pack an upgrade that system

00:14:07,190 --> 00:14:14,000
moving forward when I want to comply to

00:14:10,040 --> 00:14:17,090
hear from some Java developers but we

00:14:14,000 --> 00:14:20,120
develop on linux and we run the ortho

00:14:17,090 --> 00:14:21,410
jdk and our production environment will

00:14:20,120 --> 00:14:24,560
be consistent with our development

00:14:21,410 --> 00:14:26,690
environment and my answer is you're

00:14:24,560 --> 00:14:28,250
developing on Windows and you're

00:14:26,690 --> 00:14:29,690
deploying the Linux and you're

00:14:28,250 --> 00:14:31,490
complaining about the Giudices not

00:14:29,690 --> 00:14:32,990
consistent it's like the entire

00:14:31,490 --> 00:14:35,330
environments not going to be consistent

00:14:32,990 --> 00:14:37,790
it's as your plane but for all intents

00:14:35,330 --> 00:14:41,750
purposes I have not seen too many issues

00:14:37,790 --> 00:14:43,730
with Java developers doing java

00:14:41,750 --> 00:14:46,820
development on windows with the oil jdk

00:14:43,730 --> 00:14:48,500
and then moving it to it openjdk on a

00:14:46,820 --> 00:14:50,690
linux production environment and really

00:14:48,500 --> 00:14:52,580
you should step you should have so got a

00:14:50,690 --> 00:14:54,110
dare for you at dehart between those two

00:14:52,580 --> 00:14:56,180
places anyways so they should still be

00:14:54,110 --> 00:14:58,970
doing some involvement in a more

00:14:56,180 --> 00:15:03,110
consistent environment including Nobel

00:14:58,970 --> 00:15:05,870
jdk as both lines now if you can't use

00:15:03,110 --> 00:15:09,500
the openjdk and unfortunately this is

00:15:05,870 --> 00:15:12,100
true for some people and biggest reasons

00:15:09,500 --> 00:15:16,610
that I've seen from not being at jdk

00:15:12,100 --> 00:15:18,620
primarily center around a third party

00:15:16,610 --> 00:15:21,350
applications that don't officially

00:15:18,620 --> 00:15:24,350
support the application and so in order

00:15:21,350 --> 00:15:26,870
to be under support or compliant with

00:15:24,350 --> 00:15:28,130
their support policies you you have no

00:15:26,870 --> 00:15:30,500
choice you have to run the Oracle

00:15:28,130 --> 00:15:32,960
getting hey you can't really run the

00:15:30,500 --> 00:15:35,060
open data can still be supportive proper

00:15:32,960 --> 00:15:36,890
by them regarding in those cases I

00:15:35,060 --> 00:15:39,050
recommend using a third-party channel if

00:15:36,890 --> 00:15:40,730
you if necessary now what I mean by this

00:15:39,050 --> 00:15:43,190
is give you a redneck customer they

00:15:40,730 --> 00:15:44,630
provide a third-party channel that

00:15:43,190 --> 00:15:46,580
provides it binaries that you can

00:15:44,630 --> 00:15:48,440
install it and it's basically right how

00:15:46,580 --> 00:15:50,660
many packages as our games in with its

00:15:48,440 --> 00:15:52,850
consistent to the way the open jdk was

00:15:50,660 --> 00:15:54,860
deployed it makes it easier to deploy

00:15:52,850 --> 00:16:00,230
and manage that if you're running an

00:15:54,860 --> 00:16:03,050
abuti or debian system there is a WMV

00:16:00,230 --> 00:16:04,640
photo for that it's a little bit

00:16:03,050 --> 00:16:06,920
different I think they actually it

00:16:04,640 --> 00:16:08,870
actually downloads the zip deployment of

00:16:06,920 --> 00:16:11,390
Java but then just shuts everything in

00:16:08,870 --> 00:16:12,890
same locations and there's both of those

00:16:11,390 --> 00:16:16,760
approaches allow you to use that's the

00:16:12,890 --> 00:16:18,980
alternatives where if you don't do that

00:16:16,760 --> 00:16:21,260
and you do a direct download from Oracle

00:16:18,980 --> 00:16:23,500
gravity you're selecting you that the

00:16:21,260 --> 00:16:25,430
RPM deployment or the zip to the limit

00:16:23,500 --> 00:16:27,620
neither of those you're going to use

00:16:25,430 --> 00:16:29,840
etsy alternatives which means you you

00:16:27,620 --> 00:16:31,790
know it just stuck in a directory path

00:16:29,840 --> 00:16:33,680
and it's going to make upgrading if

00:16:31,790 --> 00:16:35,810
you're a Linux system administrator the

00:16:33,680 --> 00:16:40,190
law systems it just makes patching and

00:16:35,810 --> 00:16:42,410
upgrading a lot harder and let's be

00:16:40,190 --> 00:16:44,540
honest if you're on a Java you need to

00:16:42,410 --> 00:16:46,340
be patching their system okay everybody

00:16:44,540 --> 00:16:49,220
sees the security vulnerabilities come

00:16:46,340 --> 00:16:51,380
out every couple months related to john

00:16:49,220 --> 00:16:54,110
and this is an application server you

00:16:51,380 --> 00:16:57,890
need to be patching it so just be

00:16:54,110 --> 00:17:00,370
prepared for them uh then I don't say

00:16:57,890 --> 00:17:02,480
like people to at least consider a

00:17:00,370 --> 00:17:03,590
openjdk this is something that I've

00:17:02,480 --> 00:17:06,230
known as a lot of people just don't

00:17:03,590 --> 00:17:08,180
unless they're running IBM hardware or

00:17:06,230 --> 00:17:11,360
IBM products they don't even think about

00:17:08,180 --> 00:17:12,650
fact that there's a whole nother jdk

00:17:11,360 --> 00:17:14,449
doubt their hell to them above the

00:17:12,650 --> 00:17:16,370
theology open take a new world with beta

00:17:14,449 --> 00:17:19,220
cos the open gym is the IBM has their

00:17:16,370 --> 00:17:22,160
own JDK which is again fully compliant

00:17:19,220 --> 00:17:23,930
with the Oracles with the job spec and

00:17:22,160 --> 00:17:27,800
in some circumstances it's worth looking

00:17:23,930 --> 00:17:29,660
at I've found circumstances and I find

00:17:27,800 --> 00:17:32,870
less circumstances today than I did a

00:17:29,660 --> 00:17:36,710
few years ago it used to be if you

00:17:32,870 --> 00:17:41,450
wanted to run 64-bit I think it was Java

00:17:36,710 --> 00:17:43,640
four or five on a 65 rail four or five

00:17:41,450 --> 00:17:46,940
system it was the only way to get so I

00:17:43,640 --> 00:17:50,480
didn't make one for Lennox earlier two

00:17:46,940 --> 00:17:51,530
days you could get a 64-bit linux and it

00:17:50,480 --> 00:17:54,710
was the only way to get a fully

00:17:51,530 --> 00:18:00,470
supported 64 bit jdk on Reynold four or

00:17:54,710 --> 00:18:03,500
five over um and today pretty much just

00:18:00,470 --> 00:18:06,590
using me for dead it's not even a

00:18:03,500 --> 00:18:09,050
question just use 64 bit unless you

00:18:06,590 --> 00:18:12,680
absolutely just cannot and you have to

00:18:09,050 --> 00:18:14,540
use a 32 bit jdk for some again some

00:18:12,680 --> 00:18:16,280
certainty job application that just

00:18:14,540 --> 00:18:17,540
doesn't support it for you I can't

00:18:16,280 --> 00:18:21,530
imagine in today's day and age and

00:18:17,540 --> 00:18:23,930
yourself on a 32-bit he's hardware but

00:18:21,530 --> 00:18:26,350
there are just a lot of advantages from

00:18:23,930 --> 00:18:28,760
a Java standpoint

00:18:26,350 --> 00:18:29,930
these are my eyes these are I'm not

00:18:28,760 --> 00:18:32,090
going to get into the mechanics of how

00:18:29,930 --> 00:18:34,070
to install the JDK as Jamal you know how

00:18:32,090 --> 00:18:35,720
to install packages but these are

00:18:34,070 --> 00:18:39,160
basically some of my recommendations or

00:18:35,720 --> 00:18:45,200
guidelines when you are taking a look at

00:18:39,160 --> 00:18:48,640
now the basics yeah okay so the rest of

00:18:45,200 --> 00:18:51,770
this presentation centers around the

00:18:48,640 --> 00:18:54,710
basically what I put up the memory and

00:18:51,770 --> 00:18:56,930
the troubleshooting of these job

00:18:54,710 --> 00:18:58,760
application servers and so when it comes

00:18:56,930 --> 00:19:00,380
to the basics basically what I'm going

00:18:58,760 --> 00:19:02,300
to be providing you her are things like

00:19:00,380 --> 00:19:05,660
this which if you've never seen or know

00:19:02,300 --> 00:19:07,670
what these mean the XM x x ms in the XFX

00:19:05,660 --> 00:19:09,980
this is one of the first things you're

00:19:07,670 --> 00:19:11,510
going to run into if you do any kind of

00:19:09,980 --> 00:19:14,120
job of administration for these job

00:19:11,510 --> 00:19:15,800
developers is basically these two

00:19:14,120 --> 00:19:18,620
settings and these are command line

00:19:15,800 --> 00:19:21,020
options for this Java command now you

00:19:18,620 --> 00:19:22,730
almost invariably never run Java front

00:19:21,020 --> 00:19:24,230
the command line and I'll show you where

00:19:22,730 --> 00:19:27,350
you could step these variables in a

00:19:24,230 --> 00:19:29,240
minute but the first thing we're going

00:19:27,350 --> 00:19:30,890
to need to be able to do is adjust the

00:19:29,240 --> 00:19:33,290
size of the memory that you allocate

00:19:30,890 --> 00:19:34,520
good job it's almost a barely the first

00:19:33,290 --> 00:19:36,080
thing you're going to run into is it at

00:19:34,520 --> 00:19:38,000
this linux communicator needing to do

00:19:36,080 --> 00:19:41,240
these are the two settings that you need

00:19:38,000 --> 00:19:43,370
to set the s value is the start of the

00:19:41,240 --> 00:19:46,610
gentleman we keep setting the x is the

00:19:43,370 --> 00:19:48,020
max and as an administrator running an

00:19:46,610 --> 00:19:52,100
application server elements always

00:19:48,020 --> 00:19:54,920
recommend just chef in this e in a

00:19:52,100 --> 00:19:56,840
desktop environment okay yeah it's not

00:19:54,920 --> 00:19:58,700
as important because you want to be able

00:19:56,840 --> 00:20:00,410
to you have to start each size and you

00:19:58,700 --> 00:20:02,150
want to grow up to each size but in an

00:20:00,410 --> 00:20:04,400
applet in an application server

00:20:02,150 --> 00:20:05,720
environment there's no benefit to this

00:20:04,400 --> 00:20:08,840
and there's actually reasons why it's

00:20:05,720 --> 00:20:10,790
not it you just just trust me on this I

00:20:08,840 --> 00:20:13,670
argued with Java developers on this and

00:20:10,790 --> 00:20:15,620
just set on the same keep them to saying

00:20:13,670 --> 00:20:17,900
if you need to gig set of the two gigs

00:20:15,620 --> 00:20:25,190
stay there and I'll explain why in a

00:20:17,900 --> 00:20:29,000
minute um I can actually get yep now the

00:20:25,190 --> 00:20:33,500
two these up so the next thing you might

00:20:29,000 --> 00:20:35,690
run into is the garbage collector so you

00:20:33,500 --> 00:20:36,110
got set your heap size to set your

00:20:35,690 --> 00:20:38,540
reference

00:20:36,110 --> 00:20:41,179
and then you got how do I garbage

00:20:38,540 --> 00:20:42,740
collect that memory now by default if

00:20:41,179 --> 00:20:44,360
you don't set anything you're just going

00:20:42,740 --> 00:20:47,390
to get the default garbage put for tub

00:20:44,360 --> 00:20:49,670
which may or may not be ideally suited

00:20:47,390 --> 00:20:51,549
through your fire so you're probably

00:20:49,670 --> 00:20:54,770
going to be able to set these two guys

00:20:51,549 --> 00:20:56,750
and when you see parallel old GC this is

00:20:54,770 --> 00:20:58,520
not the old method of doing garbage

00:20:56,750 --> 00:21:00,740
collection that was the first thing but

00:20:58,520 --> 00:21:03,770
I was just starting i was like oh I

00:21:00,740 --> 00:21:05,870
don't want the old 1i what the new it

00:21:03,770 --> 00:21:08,240
has nothing to do with this is the old

00:21:05,870 --> 00:21:09,740
way of doing it it has to do with the

00:21:08,240 --> 00:21:11,480
area of memory that it does the

00:21:09,740 --> 00:21:14,570
collection from house rated at municipal

00:21:11,480 --> 00:21:17,240
if I knew what I believe Java still uses

00:21:14,570 --> 00:21:19,309
the concurrent mark sweet is it some

00:21:17,240 --> 00:21:20,990
equipment from wrong I believe I default

00:21:19,309 --> 00:21:23,179
the job of the JVM will use the

00:21:20,990 --> 00:21:25,820
concurrent Mart sweep which i believe is

00:21:23,179 --> 00:21:28,070
actually more ideally suited for desktop

00:21:25,820 --> 00:21:29,960
environments your application things and

00:21:28,070 --> 00:21:32,710
so from a service endpoint you're almost

00:21:29,960 --> 00:21:35,150
always going to want set these two guys

00:21:32,710 --> 00:21:38,240
unless you're even more aggressive than

00:21:35,150 --> 00:21:40,690
that they actually have a new aggressive

00:21:38,240 --> 00:21:43,790
options and does all the new fancy stuff

00:21:40,690 --> 00:21:45,380
but this is this one's pretty much these

00:21:43,790 --> 00:21:46,460
kotori common these are what you're

00:21:45,380 --> 00:21:49,940
going to want to do basically what this

00:21:46,460 --> 00:21:51,650
means is use if you're on a server it's

00:21:49,940 --> 00:21:54,070
assuming you're officer with a lot of

00:21:51,650 --> 00:21:56,600
course and you're basically just says

00:21:54,070 --> 00:21:58,040
use more than one cord for your guard

00:21:56,600 --> 00:22:03,350
book which sounds like a really good

00:21:58,040 --> 00:22:05,179
idea but yeah you can actually if you

00:22:03,350 --> 00:22:06,679
have multiple instances and job of

00:22:05,179 --> 00:22:08,059
running on the same machine and you have

00:22:06,679 --> 00:22:10,940
a set number of course you can even

00:22:08,059 --> 00:22:13,070
control how many cores each instance is

00:22:10,940 --> 00:22:15,110
Java uses so if you if you have going to

00:22:13,070 --> 00:22:16,700
use the parallel GT and gotta make it

00:22:15,110 --> 00:22:23,000
course but you only wanted to use four

00:22:16,700 --> 00:22:24,950
of them celtic just to use now if you're

00:22:23,000 --> 00:22:26,299
going to do this clutter collection you

00:22:24,950 --> 00:22:28,160
probably ought to get an idea of how

00:22:26,299 --> 00:22:30,620
well the guards closed in this work and

00:22:28,160 --> 00:22:33,970
this is another option that i see in a

00:22:30,620 --> 00:22:38,179
lot of environments that is not set and

00:22:33,970 --> 00:22:39,559
basically the Diaspora boats GC actually

00:22:38,179 --> 00:22:42,440
has additional options that i'll show

00:22:39,559 --> 00:22:45,590
you in a moment of but basically bottom

00:22:42,440 --> 00:22:47,040
line is enable verbose garbage

00:22:45,590 --> 00:22:52,920
collection logging okay

00:22:47,040 --> 00:22:55,230
is it doesn't have I mean it doesn't add

00:22:52,920 --> 00:22:57,360
that much before it and it is if your

00:22:55,230 --> 00:22:59,580
entire it to be incredibly valuable when

00:22:57,360 --> 00:23:02,220
you need it so it's worth turning on

00:22:59,580 --> 00:23:05,280
that logging for yourself as a

00:23:02,220 --> 00:23:07,470
administrator to figure out when you are

00:23:05,280 --> 00:23:09,420
having problems with the job application

00:23:07,470 --> 00:23:10,350
server thrashing your system this is one

00:23:09,420 --> 00:23:11,820
of the things you kind of want to look

00:23:10,350 --> 00:23:12,930
at and you're not going to be able to if

00:23:11,820 --> 00:23:15,390
you don't have it turned on and the

00:23:12,930 --> 00:23:18,860
overhead for it isn't that bad it's

00:23:15,390 --> 00:23:22,920
worth doing it's just worth doing across

00:23:18,860 --> 00:23:25,410
it's not like Ebola and then it finally

00:23:22,920 --> 00:23:27,780
the other thing that can really help

00:23:25,410 --> 00:23:30,720
from foreign standpoint which you may

00:23:27,780 --> 00:23:32,040
not run into as early as setting memory

00:23:30,720 --> 00:23:38,250
garbage collection and things like that

00:23:32,040 --> 00:23:40,170
is using with large payment now I had to

00:23:38,250 --> 00:23:41,730
cut some things for this presentation I

00:23:40,170 --> 00:23:43,410
didn't give you a lot of detail about

00:23:41,730 --> 00:23:45,570
how to set the sister Linux system

00:23:43,410 --> 00:23:47,580
kernel framers on how to set up large

00:23:45,570 --> 00:23:49,230
pages but you know I'll leave that for

00:23:47,580 --> 00:23:51,990
you to google it screens and figure out

00:23:49,230 --> 00:23:54,330
it's not that hard and in more modern

00:23:51,990 --> 00:23:56,730
systems like rail seven they have this

00:23:54,330 --> 00:23:58,740
thing called transparent 32 pages which

00:23:56,730 --> 00:24:02,340
tries to do this automatically for you

00:23:58,740 --> 00:24:03,900
and it does okay the general

00:24:02,340 --> 00:24:05,400
recommendation from an application

00:24:03,900 --> 00:24:07,140
server stand point though is if you are

00:24:05,400 --> 00:24:09,030
running a job application server with

00:24:07,140 --> 00:24:11,550
this in your allocating a significant

00:24:09,030 --> 00:24:13,800
amount of RAM to that application server

00:24:11,550 --> 00:24:17,070
you might want to set up your your arch

00:24:13,800 --> 00:24:19,980
pages static it's going to be more

00:24:17,070 --> 00:24:21,420
efficient than relying on the transfer

00:24:19,980 --> 00:24:24,000
huge pages which you have no rules

00:24:21,420 --> 00:24:25,950
control over and there are still I

00:24:24,000 --> 00:24:27,660
believe some known issues with the

00:24:25,950 --> 00:24:30,510
transparent huge pages with these large

00:24:27,660 --> 00:24:32,820
application servers and they use of the

00:24:30,510 --> 00:24:35,850
large base so they know what large pages

00:24:32,820 --> 00:24:39,840
is going to explain that I think maybe I

00:24:35,850 --> 00:24:41,940
do so in the linux you know in the

00:24:39,840 --> 00:24:46,830
automatic operating system it does the

00:24:41,940 --> 00:24:48,900
done member just gonna marry clip and so

00:24:46,830 --> 00:24:51,720
it scours the memory for objects to get

00:24:48,900 --> 00:24:53,160
cleaned up from its better well java and

00:24:51,720 --> 00:24:54,720
the way job it likes to do things it

00:24:53,160 --> 00:24:56,340
likes to do everything itself you know

00:24:54,720 --> 00:24:58,980
it has its own network stack as its on

00:24:56,340 --> 00:25:00,980
everything it hasn't done memory minute

00:24:58,980 --> 00:25:03,600
it's out of memory

00:25:00,980 --> 00:25:05,309
so when you have the operating system

00:25:03,600 --> 00:25:07,289
trying to manage that memory and you

00:25:05,309 --> 00:25:10,400
have letting the Java trying to manage

00:25:07,289 --> 00:25:13,710
memory that's a waste of computer

00:25:10,400 --> 00:25:15,360
resources reset so what you can do is in

00:25:13,710 --> 00:25:18,240
the linux kernel and you can actually

00:25:15,360 --> 00:25:20,640
set you can allocate large memory blocks

00:25:18,240 --> 00:25:21,630
where it says okay basically just busy

00:25:20,640 --> 00:25:23,669
that just tells the Linux operating

00:25:21,630 --> 00:25:26,250
system don't work as hard on these

00:25:23,669 --> 00:25:28,919
memory blocks because the application is

00:25:26,250 --> 00:25:32,820
going to be cleaning that memory for you

00:25:28,919 --> 00:25:35,970
it's all good and it really is a if

00:25:32,820 --> 00:25:39,390
you're running a JDM with a heap size of

00:25:35,970 --> 00:25:41,309
at least two gig or higher they can

00:25:39,390 --> 00:25:43,110
become quite user if your eyeball your

00:25:41,309 --> 00:25:45,299
jvm heat shredder too big don't worry

00:25:43,110 --> 00:25:48,779
about it fine nothing to do on where the

00:25:45,299 --> 00:25:50,309
other so it's not a little bit about

00:25:48,779 --> 00:25:52,230
what all that memory things now this is

00:25:50,309 --> 00:25:57,659
a really water down oversimplified

00:25:52,230 --> 00:26:00,270
version of the JVM memory model but I

00:25:57,659 --> 00:26:01,890
think it's important to understand some

00:26:00,270 --> 00:26:04,590
of at least some of these spaces and

00:26:01,890 --> 00:26:09,120
where they relate to the application

00:26:04,590 --> 00:26:14,520
server and your Linux operating so in

00:26:09,120 --> 00:26:17,279
the down here this bar here represents

00:26:14,520 --> 00:26:20,340
those jet XM x and x and x settings that

00:26:17,279 --> 00:26:22,890
i was talking about is whatever you set

00:26:20,340 --> 00:26:25,230
those two that's this these two blocks

00:26:22,890 --> 00:26:26,880
come on board us now there's a couple

00:26:25,230 --> 00:26:29,220
other slivers of membrane here that i

00:26:26,880 --> 00:26:31,260
don't get into a detail but that's what

00:26:29,220 --> 00:26:33,630
it comes down to and when you set these

00:26:31,260 --> 00:26:36,120
two things as different values what

00:26:33,630 --> 00:26:39,120
happens is is when you start up the JVM

00:26:36,120 --> 00:26:41,909
it might start down here at the x ms

00:26:39,120 --> 00:26:45,270
value but then it a lot you know it hits

00:26:41,909 --> 00:26:46,919
that wall it will scale up to the you

00:26:45,270 --> 00:26:49,080
know all the way to the larger value as

00:26:46,919 --> 00:26:53,010
it easy what every time it has to

00:26:49,080 --> 00:26:54,149
increase that size the this decides the

00:26:53,010 --> 00:26:56,429
eatin space and some of these other

00:26:54,149 --> 00:26:58,169
memory blocks in here are all set and

00:26:56,429 --> 00:27:00,539
you start the JVM based on the total

00:26:58,169 --> 00:27:02,909
size of your memory well when the memory

00:27:00,539 --> 00:27:04,890
and the whole team resizes it has to

00:27:02,909 --> 00:27:06,720
readjust all those sizes and

00:27:04,890 --> 00:27:09,830
calculations on minute yes is different

00:27:06,720 --> 00:27:12,270
like that's why if you're going to run a

00:27:09,830 --> 00:27:12,720
server than if it needs if you know

00:27:12,270 --> 00:27:14,909
these

00:27:12,720 --> 00:27:16,679
remember just set it that way to begin

00:27:14,909 --> 00:27:18,179
with because if you actually need it

00:27:16,679 --> 00:27:19,830
it's going to get there you're wasting

00:27:18,179 --> 00:27:21,570
time having it through all this extra

00:27:19,830 --> 00:27:23,280
work to set them both the same have it

00:27:21,570 --> 00:27:25,679
get up here and then it will it will

00:27:23,280 --> 00:27:27,990
free set the other sizes of memory

00:27:25,679 --> 00:27:29,280
blocks that once from the get-go and it

00:27:27,990 --> 00:27:33,960
won't have to do all that work when it

00:27:29,280 --> 00:27:34,919
does this resizes now so when I was when

00:27:33,960 --> 00:27:36,450
we were living at the parallel

00:27:34,919 --> 00:27:38,070
collectors and the old very long

00:27:36,450 --> 00:27:41,940
segments that's what this comes down to

00:27:38,070 --> 00:27:44,190
is so you get a lot of small garbage

00:27:41,940 --> 00:27:46,260
collections that happen in here and then

00:27:44,190 --> 00:27:47,789
you get your major garbage collections

00:27:46,260 --> 00:27:49,200
happening here and this is basically

00:27:47,789 --> 00:27:51,360
your old memories so it's how it's

00:27:49,200 --> 00:27:53,850
collecting the old memory and there's

00:27:51,360 --> 00:27:55,890
full collections the minor collections

00:27:53,850 --> 00:27:58,950
are usually really small really quick

00:27:55,890 --> 00:28:01,020
you barely even notice them in the

00:27:58,950 --> 00:28:04,289
parallel collector the full collection

00:28:01,020 --> 00:28:06,330
is like a stop to look later I mean

00:28:04,289 --> 00:28:08,520
unlike the compare mark sweep where it's

00:28:06,330 --> 00:28:12,990
a low balls collector the parallel

00:28:08,520 --> 00:28:15,539
collector is a possible a cur but it's a

00:28:12,990 --> 00:28:17,010
hot fruit book collector which is why if

00:28:15,539 --> 00:28:17,940
you can you have a lot of course give it

00:28:17,010 --> 00:28:20,159
a lot of course because you don't want

00:28:17,940 --> 00:28:21,900
it to slow you down any when it happens

00:28:20,159 --> 00:28:24,000
you don't want to have to slow you down

00:28:21,900 --> 00:28:27,330
any more than an absolute least is that

00:28:24,000 --> 00:28:29,960
will everything's going to stop for a

00:28:27,330 --> 00:28:34,770
brief second when that full collection

00:28:29,960 --> 00:28:36,059
um now there's also I didn't even put it

00:28:34,770 --> 00:28:39,179
in the other side at all there's this

00:28:36,059 --> 00:28:43,320
little exit I remember what it says

00:28:39,179 --> 00:28:47,669
there ah and I've never said this and I

00:28:43,320 --> 00:28:48,750
don't recommend getting into them when

00:28:47,669 --> 00:28:51,030
you when you start getting garbage

00:28:48,750 --> 00:28:56,429
collection analysis a lot of people get

00:28:51,030 --> 00:28:57,419
really they go the rule okay and the end

00:28:56,429 --> 00:28:58,860
of the day when you're doing garbage

00:28:57,419 --> 00:29:01,260
collection analysis and we'll take a

00:28:58,860 --> 00:29:04,650
look at what a GC gloss looks like that

00:29:01,260 --> 00:29:06,780
second um really what it comes down to

00:29:04,650 --> 00:29:09,419
is you want to figure out is the overall

00:29:06,780 --> 00:29:11,340
size might keep adequate and am I using

00:29:09,419 --> 00:29:13,919
the right click and am I getting enough

00:29:11,340 --> 00:29:16,559
food when you get into micromanaging the

00:29:13,919 --> 00:29:18,179
sizes of these sub containers you

00:29:16,559 --> 00:29:20,490
probably are going to be more hard to

00:29:18,179 --> 00:29:21,570
get I mean it's just quite honestly I

00:29:20,490 --> 00:29:23,660
mean it

00:29:21,570 --> 00:29:26,160
so you really know what you're doing

00:29:23,660 --> 00:29:29,070
you're probably overthinking the problem

00:29:26,160 --> 00:29:30,720
so just set your total size of keep

00:29:29,070 --> 00:29:33,330
sizes appropriately use the correct

00:29:30,720 --> 00:29:34,410
collector use multiple cores you know

00:29:33,330 --> 00:29:36,530
whatever it is you can do to optimize

00:29:34,410 --> 00:29:38,100
them make your courage to run better

00:29:36,530 --> 00:29:40,590
you're going to get better performance

00:29:38,100 --> 00:29:43,590
for the applications here and your your

00:29:40,590 --> 00:29:45,720
your java developer much happier now

00:29:43,590 --> 00:29:48,480
there's also this other things you tend

00:29:45,720 --> 00:29:50,550
to run into over here you may or may not

00:29:48,480 --> 00:29:53,040
have seen in your log messages out of

00:29:50,550 --> 00:29:55,710
permgen space right well that's this guy

00:29:53,040 --> 00:29:57,450
over here you notice he's actually not

00:29:55,710 --> 00:29:59,340
part of these memory blocks he's

00:29:57,450 --> 00:30:01,080
completely separate from those and you

00:29:59,340 --> 00:30:02,310
can actually set the size of Hamlet

00:30:01,080 --> 00:30:04,260
separately you can actually set them

00:30:02,310 --> 00:30:08,460
firms eyes and the amount of firm solid

00:30:04,260 --> 00:30:10,470
base for this memory separately so that

00:30:08,460 --> 00:30:12,510
is an addition to the keep side so he

00:30:10,470 --> 00:30:15,570
set your heap size 22 gig and you set

00:30:12,510 --> 00:30:16,980
your curved in size 2 512 your total

00:30:15,570 --> 00:30:20,130
memory consumption of that jay-z and

00:30:16,980 --> 00:30:21,660
it's two and a half gay right well now

00:30:20,130 --> 00:30:23,190
it's actually more than that which I

00:30:21,660 --> 00:30:25,170
don't even get into it this slide

00:30:23,190 --> 00:30:26,910
there's also native to shreds that you

00:30:25,170 --> 00:30:29,400
have to take any consideration on top of

00:30:26,910 --> 00:30:30,840
this which also consume memory on your

00:30:29,400 --> 00:30:32,250
system so when you're taking a look at

00:30:30,840 --> 00:30:34,920
top whatever and you're trying to figure

00:30:32,250 --> 00:30:38,640
out okay I gotta get it to get to this

00:30:34,920 --> 00:30:41,070
jb and why is it using three right well

00:30:38,640 --> 00:30:43,740
it's because you've got / games based on

00:30:41,070 --> 00:30:45,270
top of that need and you've got native

00:30:43,740 --> 00:30:48,270
threads which are completely outside of

00:30:45,270 --> 00:30:50,250
the JVM difference based entirely so if

00:30:48,270 --> 00:30:53,460
you're trying to correlate or make sense

00:30:50,250 --> 00:30:55,110
between Java memory and native system

00:30:53,460 --> 00:30:57,210
memory that's probably what you're

00:30:55,110 --> 00:30:59,910
staying I get job I get java developers

00:30:57,210 --> 00:31:01,650
actually questioning me like well we saw

00:30:59,910 --> 00:31:05,160
a good one and a half kid why is it

00:31:01,650 --> 00:31:06,720
using two because you got more than just

00:31:05,160 --> 00:31:08,700
the heat glory without at least I have

00:31:06,720 --> 00:31:14,040
was worth the pain hurry up apparently

00:31:08,700 --> 00:31:16,440
you didn't but anyway so when you set

00:31:14,040 --> 00:31:19,200
these things up what's the perfect used

00:31:16,440 --> 00:31:21,600
for okay very very good question what is

00:31:19,200 --> 00:31:22,950
the permittivity spaces basically his

00:31:21,600 --> 00:31:25,230
memory that's still been around so long

00:31:22,950 --> 00:31:26,730
its objects been around so long is never

00:31:25,230 --> 00:31:28,950
going to wear the front of her gym and

00:31:26,730 --> 00:31:31,290
never really get clean they don't even

00:31:28,950 --> 00:31:33,270
try to clean it it stays in permanent

00:31:31,290 --> 00:31:35,220
memory this really only happened is

00:31:33,270 --> 00:31:37,900
really for life

00:31:35,220 --> 00:31:40,390
easy parts of the container will end up

00:31:37,900 --> 00:31:41,530
there because you know just it's all

00:31:40,390 --> 00:31:43,420
they're always there and they're right

00:31:41,530 --> 00:31:44,920
and it just it doesn't even need to try

00:31:43,420 --> 00:31:46,750
to clean them anymore so it's a some

00:31:44,920 --> 00:31:48,280
tournament and you've been there another

00:31:46,750 --> 00:31:50,350
up technically there are ways you can

00:31:48,280 --> 00:31:52,090
force cleaning of the permanent space

00:31:50,350 --> 00:31:55,000
but that's not really what it's intended

00:31:52,090 --> 00:31:56,740
for and you can do that usually if

00:31:55,000 --> 00:31:58,480
you're running out of firms in space you

00:31:56,740 --> 00:32:01,930
just need to increase it a little bit or

00:31:58,480 --> 00:32:03,400
you need to figure out you may mean you

00:32:01,930 --> 00:32:05,410
may need to have your job developer take

00:32:03,400 --> 00:32:08,950
a look at why they have so much stuff

00:32:05,410 --> 00:32:10,330
hanging around from gym um I have never

00:32:08,950 --> 00:32:12,100
had a problem with just double into

00:32:10,330 --> 00:32:14,230
space sighs aren't in the default i

00:32:12,100 --> 00:32:15,580
think is like 256 and I've usually I

00:32:14,230 --> 00:32:17,950
mean it worst case scenario I've had to

00:32:15,580 --> 00:32:20,830
go to 512 for some big application

00:32:17,950 --> 00:32:22,270
servers if you give me on that you might

00:32:20,830 --> 00:32:23,950
ask you java developers to really

00:32:22,270 --> 00:32:25,480
consider what they have hanging around a

00:32:23,950 --> 00:32:28,630
memory and we might need to take a look

00:32:25,480 --> 00:32:30,220
at the dump of the memory and i'll show

00:32:28,630 --> 00:32:33,160
you how you can get some of that in a

00:32:30,220 --> 00:32:35,560
minute because if you didn't i mean if

00:32:33,160 --> 00:32:38,620
you have a curved in space it's rivaling

00:32:35,560 --> 00:32:43,030
the size of your heat sucks wrong that's

00:32:38,620 --> 00:32:45,520
a bishop and we get fencing so what do

00:32:43,030 --> 00:32:46,660
you several these nice options and this

00:32:45,520 --> 00:32:50,710
is another thing that's really

00:32:46,660 --> 00:32:53,680
frustrating you're using for some linux

00:32:50,710 --> 00:32:56,740
administrators new to java it's like

00:32:53,680 --> 00:32:58,660
well all these job options are command

00:32:56,740 --> 00:33:00,490
line option so you know if you were to

00:32:58,660 --> 00:33:02,350
actually start this program by command

00:33:00,490 --> 00:33:05,020
line it would be java option option

00:33:02,350 --> 00:33:06,940
option option option option like 60

00:33:05,020 --> 00:33:09,940
options long and then the name of a jar

00:33:06,940 --> 00:33:12,340
aisle or a program right that's just not

00:33:09,940 --> 00:33:15,130
a very great way to start a job on a

00:33:12,340 --> 00:33:17,680
sitter which is why almost all java

00:33:15,130 --> 00:33:20,560
program have some kind of shell script

00:33:17,680 --> 00:33:21,850
wrapper around which is just you know

00:33:20,560 --> 00:33:24,340
who experienced that in the links

00:33:21,850 --> 00:33:26,140
community as well with 625 amid scripts

00:33:24,340 --> 00:33:29,440
for example i mean that's not that

00:33:26,140 --> 00:33:31,510
uncommon but it's even worse in java

00:33:29,440 --> 00:33:33,250
where you might have a system in its

00:33:31,510 --> 00:33:35,020
fifth it basically just calls another

00:33:33,250 --> 00:33:37,120
shell script in fact that shell script

00:33:35,020 --> 00:33:38,830
could call ten more customers for

00:33:37,120 --> 00:33:43,270
example in the if you downloaded the

00:33:38,830 --> 00:33:45,160
tomcat zip file it's been directory is

00:33:43,270 --> 00:33:46,690
just a bunch of shell scripts that call

00:33:45,160 --> 00:33:48,370
each other its source each other it can

00:33:46,690 --> 00:33:51,820
get really confusing know

00:33:48,370 --> 00:33:54,820
well somewhere in that message shell

00:33:51,820 --> 00:33:56,800
scripts preferably if you're if you're

00:33:54,820 --> 00:33:58,330
running a nice are red hat deployed

00:33:56,800 --> 00:33:59,530
version or four-door version they might

00:33:58,330 --> 00:34:02,559
put it somewhere nice and convenient

00:33:59,530 --> 00:34:05,230
like Cisco fee it's going to contain a

00:34:02,559 --> 00:34:07,420
file in there that contains you know all

00:34:05,230 --> 00:34:10,300
those options of an ability to set or

00:34:07,420 --> 00:34:12,100
add all those options so you can either

00:34:10,300 --> 00:34:14,230
usually you'll you'll find it in a file

00:34:12,100 --> 00:34:16,960
that already has an x ms to the next MX

00:34:14,230 --> 00:34:18,250
proper possibly our incentive for some

00:34:16,960 --> 00:34:20,649
preset value and all you have to do is

00:34:18,250 --> 00:34:21,940
go near change the value usually in that

00:34:20,649 --> 00:34:25,169
same location you can add additional

00:34:21,940 --> 00:34:26,950
options like for example setting

00:34:25,169 --> 00:34:29,830
explicitly studying the garbage

00:34:26,950 --> 00:34:31,929
collector or adding verbose logging so

00:34:29,830 --> 00:34:34,620
what you want to do is look for one of

00:34:31,929 --> 00:34:36,940
these files it could be an sis config

00:34:34,620 --> 00:34:38,620
again these are all examples where thats

00:34:36,940 --> 00:34:41,350
from tom cat it could be an asset

00:34:38,620 --> 00:34:43,840
environment of sh or worst case scenario

00:34:41,350 --> 00:34:47,320
it could be in a cab right in catalina

00:34:43,840 --> 00:34:49,300
na mistake sometimes or even worse worst

00:34:47,320 --> 00:34:51,580
case scenarios that you might even have

00:34:49,300 --> 00:34:54,700
to go manually modify this is defined in

00:34:51,580 --> 00:34:57,160
which is not right usually it's going to

00:34:54,700 --> 00:34:59,590
be in some additional shell script to

00:34:57,160 --> 00:35:02,140
human sources along the way as part of

00:34:59,590 --> 00:35:05,410
starting an okay answer I also like to

00:35:02,140 --> 00:35:08,860
include this option which a lot of

00:35:05,410 --> 00:35:12,340
people aren't even fully aware of so you

00:35:08,860 --> 00:35:14,200
can also pass in a property spot so you

00:35:12,340 --> 00:35:16,030
can't set everything in here but if you

00:35:14,200 --> 00:35:18,370
do have a lot of system properties that

00:35:16,030 --> 00:35:20,830
they could be set for you give Ian most

00:35:18,370 --> 00:35:22,060
of which probably got you know most of

00:35:20,830 --> 00:35:24,070
the ones that I have been covered here

00:35:22,060 --> 00:35:25,480
you couldn't even send this file but

00:35:24,070 --> 00:35:26,590
your application developer might have a

00:35:25,480 --> 00:35:29,260
lot of properties they're painting

00:35:26,590 --> 00:35:31,030
instead if you see if you settle this in

00:35:29,260 --> 00:35:33,070
the command line and you do a PS output

00:35:31,030 --> 00:35:34,960
that output going to look really ugly

00:35:33,070 --> 00:35:37,240
you can actually shove them into a

00:35:34,960 --> 00:35:38,950
property file too so a lot of the system

00:35:37,240 --> 00:35:40,690
properties you can shove in there and

00:35:38,950 --> 00:35:43,060
source that until I'm your fan line you

00:35:40,690 --> 00:35:46,780
would just add this as a command line

00:35:43,060 --> 00:35:48,610
option in one of these files with the

00:35:46,780 --> 00:35:53,170
path to a property file you can add it

00:35:48,610 --> 00:35:56,820
passive dozens even additional job of

00:35:53,170 --> 00:35:56,820
properties specific for that application

00:35:57,000 --> 00:36:02,700
so one of the first things I said it a

00:36:01,260 --> 00:36:08,970
lot must be one of the second or third

00:36:02,700 --> 00:36:10,770
things now um you might run it to the

00:36:08,970 --> 00:36:13,740
top thought about memory another thing

00:36:10,770 --> 00:36:15,780
you might run into is you've gone along

00:36:13,740 --> 00:36:17,970
and all of a sudden you get an alert for

00:36:15,780 --> 00:36:20,040
your modern system system is running

00:36:17,970 --> 00:36:23,610
high CPU you go to take a look at it and

00:36:20,040 --> 00:36:25,620
it's the Java process like okay why is

00:36:23,610 --> 00:36:26,880
this Java process killing my system so

00:36:25,620 --> 00:36:28,500
you go to the job developer he's like

00:36:26,880 --> 00:36:30,060
what's going on like I don't know we

00:36:28,500 --> 00:36:33,230
started you restart it goes away you

00:36:30,060 --> 00:36:35,970
have no idea what's going to put out so

00:36:33,230 --> 00:36:40,440
the easy it's actually really easy to

00:36:35,970 --> 00:36:42,480
figure out what in that job of stack was

00:36:40,440 --> 00:36:44,430
running hi Steve you if you're just

00:36:42,480 --> 00:36:45,960
looking at the regular PS up in the top

00:36:44,430 --> 00:36:50,460
output it's just going to be one line

00:36:45,960 --> 00:36:53,430
from Java but this is a really handy top

00:36:50,460 --> 00:36:57,060
option to do basically what these mean

00:36:53,430 --> 00:36:59,010
is you run on top in batch mode you're

00:36:57,060 --> 00:37:00,540
going to want one iteration but you

00:36:59,010 --> 00:37:02,490
might want to do this multiple times but

00:37:00,540 --> 00:37:07,710
you know in this patch member just if

00:37:02,490 --> 00:37:09,720
you wanted aeration and basically we're

00:37:07,710 --> 00:37:11,370
going to provide the process idea of

00:37:09,720 --> 00:37:13,830
your java process you're going to need

00:37:11,370 --> 00:37:15,660
to do PS figure out what your kid and

00:37:13,830 --> 00:37:17,040
your java processes and what this is

00:37:15,660 --> 00:37:20,460
going to do is it's going to give you

00:37:17,040 --> 00:37:22,020
all of the child processes for that

00:37:20,460 --> 00:37:24,630
chopper process not just this month

00:37:22,020 --> 00:37:26,970
liner that you've had before and it's

00:37:24,630 --> 00:37:29,940
also going to sort it by which ones are

00:37:26,970 --> 00:37:31,350
using low cpu now at the same time you

00:37:29,940 --> 00:37:34,590
do this we are very shortly thereafter

00:37:31,350 --> 00:37:35,940
you're going to want to run a thread

00:37:34,590 --> 00:37:39,780
though and you can do that very easily

00:37:35,940 --> 00:37:41,760
with JCL and again the process ID of the

00:37:39,780 --> 00:37:45,510
java process so you're going to get

00:37:41,760 --> 00:37:48,320
these two outputs now this one you

00:37:45,510 --> 00:37:50,220
really need to run it as whatever the

00:37:48,320 --> 00:37:51,930
application servers run so if you're

00:37:50,220 --> 00:37:54,510
running tomcat at winning this talk yet

00:37:51,930 --> 00:37:55,770
you need to run it as Tommen even if you

00:37:54,510 --> 00:37:58,830
think you have to do to do dash New

00:37:55,770 --> 00:38:01,260
Tomcat do that but you're going to get

00:37:58,830 --> 00:38:03,810
these two outputs this nice top output

00:38:01,260 --> 00:38:05,340
and this Fred don't is what this is now

00:38:03,810 --> 00:38:06,960
there are other ways of getting thread

00:38:05,340 --> 00:38:08,530
dolls without using taste now you might

00:38:06,960 --> 00:38:11,530
remember Jay stack was one of those

00:38:08,530 --> 00:38:13,570
commands that was in the JDK not off the

00:38:11,530 --> 00:38:15,960
JRE so if you've just run in the Jerry

00:38:13,570 --> 00:38:19,120
you're not going to have Jace tech built

00:38:15,960 --> 00:38:23,260
you can get up a thread though but I

00:38:19,120 --> 00:38:25,480
think it's a kill free will generate a

00:38:23,260 --> 00:38:28,840
step will also generate a film the

00:38:25,480 --> 00:38:30,970
problem with that is it's going to

00:38:28,840 --> 00:38:33,190
generate it into wherever the standard

00:38:30,970 --> 00:38:34,930
out is being directed for that job

00:38:33,190 --> 00:38:36,910
process which if you're running a

00:38:34,930 --> 00:38:40,420
production application server might be

00:38:36,910 --> 00:38:41,950
nowhere could be devil another common

00:38:40,420 --> 00:38:44,920
recommendation for grab duction

00:38:41,950 --> 00:38:46,570
application servers is to basically not

00:38:44,920 --> 00:38:48,790
be comfortable on it because it's

00:38:46,570 --> 00:38:51,220
duplicity of the job or logging usually

00:38:48,790 --> 00:38:52,810
and usually not all that useful and it's

00:38:51,220 --> 00:38:54,310
just going to it doesn't rotate Milo's

00:38:52,810 --> 00:38:56,640
many things yeah can you redirect that

00:38:54,310 --> 00:38:58,750
output to say how long hast du their

00:38:56,640 --> 00:39:00,970
office here in standard air I said I

00:38:58,750 --> 00:39:04,960
think it is does actually go to standard

00:39:00,970 --> 00:39:06,010
air i'm not sure but usually i'm not

00:39:04,960 --> 00:39:09,040
sure what you're at the moment right now

00:39:06,010 --> 00:39:11,710
the desk that killed three goes to but

00:39:09,040 --> 00:39:13,540
new usually both of those things get

00:39:11,710 --> 00:39:15,280
thrown away if you're not an investor

00:39:13,540 --> 00:39:16,990
unless you're doing possible only like

00:39:15,280 --> 00:39:19,900
you're on a tomcat that you seek happen

00:39:16,990 --> 00:39:21,490
to that out okay so by default pocket

00:39:19,900 --> 00:39:22,540
it's probably are going to be there so

00:39:21,490 --> 00:39:23,980
if you just do a kill three onor you'll

00:39:22,540 --> 00:39:28,720
get a threat dump without necessarily

00:39:23,980 --> 00:39:31,930
having a snack and then you you can take

00:39:28,720 --> 00:39:34,060
that and now this this is what this is

00:39:31,930 --> 00:39:35,590
the part of the presentation where i'm

00:39:34,060 --> 00:39:37,630
going to show you some really cool

00:39:35,590 --> 00:39:39,580
applications that you can then use to

00:39:37,630 --> 00:39:41,440
news photos debugging and this is one of

00:39:39,580 --> 00:39:43,990
the first ones the TDA this is actually

00:39:41,440 --> 00:39:46,690
the thread don't analyzer that's what

00:39:43,990 --> 00:39:49,240
it's know that um and it's actually

00:39:46,690 --> 00:39:51,250
getting quite quite old I haven't seen

00:39:49,240 --> 00:39:53,830
it up dated in a while but it's still

00:39:51,250 --> 00:39:56,920
very useful as it you know there hasn't

00:39:53,830 --> 00:39:58,360
lessons in its usability at all I'd I'll

00:39:56,920 --> 00:39:59,980
show you a screenshot of what that looks

00:39:58,360 --> 00:40:03,730
like and how you can take these two

00:39:59,980 --> 00:40:05,320
things together so this is an

00:40:03,730 --> 00:40:07,090
abbreviated version of what your top

00:40:05,320 --> 00:40:09,070
output would look like from that first

00:40:07,090 --> 00:40:15,190
command it's going to look like this so

00:40:09,070 --> 00:40:19,360
you'll see the process ID look seem

00:40:15,190 --> 00:40:21,339
apparent these are all your child

00:40:19,360 --> 00:40:25,630
processes of that champion of that

00:40:21,339 --> 00:40:28,059
a parent Java kid to be read it on so

00:40:25,630 --> 00:40:29,349
whenever you put in here he's running a

00:40:28,059 --> 00:40:31,660
whole bunch of children and these are

00:40:29,349 --> 00:40:34,390
his actual processes my these children

00:40:31,660 --> 00:40:36,249
and then you'll know where to see over

00:40:34,390 --> 00:40:37,779
here the high CPU now these really not

00:40:36,249 --> 00:40:40,539
that high notably you'll see a good to

00:40:37,779 --> 00:40:43,210
see like a hundred percent on one on the

00:40:40,539 --> 00:40:44,829
first line of the first two lines so

00:40:43,210 --> 00:40:47,019
you'll see you'll have one or two or

00:40:44,829 --> 00:40:48,789
even three kids running it one hundred

00:40:47,019 --> 00:40:50,680
percent and if you're on a multi-core

00:40:48,789 --> 00:40:52,329
system that means they just have one of

00:40:50,680 --> 00:40:55,089
those pores peg and they're not letting

00:40:52,329 --> 00:40:56,589
again and what you want to do is you

00:40:55,089 --> 00:40:58,930
probably want to take both these

00:40:56,589 --> 00:40:59,859
commands and run them in a loop so you

00:40:58,930 --> 00:41:02,499
might want to take two or three

00:40:59,859 --> 00:41:04,420
iterations every 30 to 60 seconds this

00:41:02,499 --> 00:41:05,979
seeing the years comes you know what

00:41:04,420 --> 00:41:08,049
you'll probably see is if you're if

00:41:05,979 --> 00:41:11,529
you're applica if your leg server is

00:41:08,049 --> 00:41:14,859
pegged at a high CPU one or more of

00:41:11,529 --> 00:41:16,599
these pits is not change and it's

00:41:14,859 --> 00:41:19,569
staying at one hundred percent cpu and

00:41:16,599 --> 00:41:25,420
it's not going away over time so over

00:41:19,569 --> 00:41:28,450
multiple iterations of that yes you

00:41:25,420 --> 00:41:29,920
literally yeah if you do it top normally

00:41:28,450 --> 00:41:32,410
just type in top and you get nice little

00:41:29,920 --> 00:41:34,119
scream you you don't see all this sub

00:41:32,410 --> 00:41:36,430
child process is all you're going to get

00:41:34,119 --> 00:41:38,650
is the one line for java santi hundred

00:41:36,430 --> 00:41:40,150
percent cpu or actually if you're a

00:41:38,650 --> 00:41:43,539
multi-core system you can even see it

00:41:40,150 --> 00:41:46,239
stay 200 or 300 or 400 CPU gets locked

00:41:43,539 --> 00:41:49,089
up three or four cores looking at higher

00:41:46,239 --> 00:41:51,609
levels it sounds yes it gives you all

00:41:49,089 --> 00:41:55,269
the processes yeah this bat bit like I

00:41:51,609 --> 00:41:57,339
said this is batch mode one iteration by

00:41:55,269 --> 00:41:58,269
a specific parent pit and what it's

00:41:57,339 --> 00:42:00,430
going to do is it's going to give you

00:41:58,269 --> 00:42:01,779
all the child processes of that java

00:42:00,430 --> 00:42:03,789
process which is what we're going for

00:42:01,779 --> 00:42:06,279
here because we want to see what inside

00:42:03,789 --> 00:42:08,229
the JVM is actually causing the high cpu

00:42:06,279 --> 00:42:10,599
you know previously you might just say

00:42:08,229 --> 00:42:12,160
java scratching my system i don't know

00:42:10,599 --> 00:42:14,380
why you go to Jamaa turnover I don't

00:42:12,160 --> 00:42:16,059
know on and you just restart the Java

00:42:14,380 --> 00:42:18,779
processes it goes away everybody's happy

00:42:16,059 --> 00:42:21,339
but just got no idea what just happened

00:42:18,779 --> 00:42:23,529
so you take this output you figure out

00:42:21,339 --> 00:42:26,259
what these pigs are you get some of

00:42:23,529 --> 00:42:28,329
these native pins and then you take that

00:42:26,259 --> 00:42:30,219
stack trace that we took from Java and

00:42:28,329 --> 00:42:34,099
you open it in thread dog which is a

00:42:30,219 --> 00:42:36,289
desktop tool and you're going to get

00:42:34,099 --> 00:42:38,479
there's a column in there that has a

00:42:36,289 --> 00:42:40,579
native of a geek and if you take that

00:42:38,479 --> 00:42:42,799
and you take this call here you

00:42:40,579 --> 00:42:44,539
correlate what the high one would top

00:42:42,799 --> 00:42:48,890
the thread from here it's going to tell

00:42:44,539 --> 00:42:52,069
you exactly what inside the JVM that was

00:42:48,890 --> 00:42:53,660
doing now this is kind of blurry so you

00:42:52,069 --> 00:42:56,089
can't really see it I think this example

00:42:53,660 --> 00:42:59,479
here actually specifies an HTTP

00:42:56,089 --> 00:43:02,329
connector so you could actually take

00:42:59,479 --> 00:43:04,609
that and correlate it back to an access

00:43:02,329 --> 00:43:06,529
log like a tomcat access log or let's

00:43:04,609 --> 00:43:10,400
say if you're running tomcat with Apache

00:43:06,529 --> 00:43:13,670
this might be a instead of an HDTV when

00:43:10,400 --> 00:43:15,619
it might be a jake a jake t-connectors

00:43:13,670 --> 00:43:18,769
they're here you can correlate that all

00:43:15,619 --> 00:43:20,599
the way back to a weapon access log and

00:43:18,769 --> 00:43:23,539
figure out what pose would call actually

00:43:20,599 --> 00:43:26,119
initiated it so you can figure out what

00:43:23,539 --> 00:43:29,119
client when they get the server what the

00:43:26,119 --> 00:43:30,859
URL was what the posted it was and now

00:43:29,119 --> 00:43:32,809
you take that information back to your

00:43:30,859 --> 00:43:35,390
developers day this is what killed my

00:43:32,809 --> 00:43:38,569
sister great now that's kind of useful

00:43:35,390 --> 00:43:40,039
right you know not only did you isolate

00:43:38,569 --> 00:43:41,450
it down for the java application

00:43:40,039 --> 00:43:42,890
developer now they have something useful

00:43:41,450 --> 00:43:44,839
you can go and figure out what their

00:43:42,890 --> 00:43:46,729
code might be causing that's very

00:43:44,839 --> 00:43:49,729
helpful to them and to you because it

00:43:46,729 --> 00:43:51,940
means it might actually get fit now

00:43:49,729 --> 00:43:55,489
another thing that you might see here so

00:43:51,940 --> 00:43:57,229
you might see like a web connector you

00:43:55,489 --> 00:43:58,789
might see a database connect you know

00:43:57,229 --> 00:44:01,880
that'd be helpful or you might actually

00:43:58,789 --> 00:44:03,739
see in some cases you might actually see

00:44:01,880 --> 00:44:06,319
you might have to trace this back to the

00:44:03,739 --> 00:44:08,359
garbage collector eight stuff I've seen

00:44:06,319 --> 00:44:10,009
that too now that doesn't mean that your

00:44:08,359 --> 00:44:12,019
garbage collector is wildly out of

00:44:10,009 --> 00:44:14,660
control and has a problem it probably

00:44:12,019 --> 00:44:16,190
means your heap size doesn't dinner and

00:44:14,660 --> 00:44:17,539
you haven't got an oo in or out of

00:44:16,190 --> 00:44:18,890
memory area because the garbage

00:44:17,539 --> 00:44:22,190
collector is just trying really really

00:44:18,890 --> 00:44:26,779
hard to keep your everything that's what

00:44:22,190 --> 00:44:28,549
a problem and so if you see high CPU is

00:44:26,779 --> 00:44:30,380
because your garbage collector here now

00:44:28,549 --> 00:44:32,509
is when that garbage collection logging

00:44:30,380 --> 00:44:35,180
could come in really handy if you have

00:44:32,509 --> 00:44:39,229
it turned on so guys I thought you see

00:44:35,180 --> 00:44:41,749
look so this is more what you would

00:44:39,229 --> 00:44:44,450
actually have to set all three or four

00:44:41,749 --> 00:44:47,040
of these options to get good GC login

00:44:44,450 --> 00:44:49,890
for your application so remember that

00:44:47,040 --> 00:44:52,950
mr set varmint sh in there after you

00:44:49,890 --> 00:44:58,440
have to say it like four options to get

00:44:52,950 --> 00:44:59,850
good GC logging so you turn it on give

00:44:58,440 --> 00:45:01,860
it a this is basically telling it

00:44:59,850 --> 00:45:04,170
through it the name of the log file so

00:45:01,860 --> 00:45:07,070
this could be a path into and then what

00:45:04,170 --> 00:45:10,880
I like to do is I put in a date stamp

00:45:07,070 --> 00:45:14,490
amaris flexion vol does not get rotated

00:45:10,880 --> 00:45:16,530
and it so what students you start to JPM

00:45:14,490 --> 00:45:18,240
is going to start logging the FDC log it

00:45:16,530 --> 00:45:21,080
never rotates it just continues to grow

00:45:18,240 --> 00:45:24,620
but I've never seen it get so bad that

00:45:21,080 --> 00:45:27,660
it's got infected and if it's not

00:45:24,620 --> 00:45:29,160
terrible and if i were to running java

00:45:27,660 --> 00:45:30,210
you're probably having to patch so you

00:45:29,160 --> 00:45:31,890
probably happen if we start up your now

00:45:30,210 --> 00:45:33,720
on it anyway and it's going to rotate

00:45:31,890 --> 00:45:35,040
but if you don't put some kind of date

00:45:33,720 --> 00:45:37,710
variable in the name it's going to

00:45:35,040 --> 00:45:40,260
clobber the last pot so it's a good idea

00:45:37,710 --> 00:45:44,070
to put that now i like to put the dash

00:45:40,260 --> 00:45:45,660
this formatting option for gate which is

00:45:44,070 --> 00:45:48,420
if you're familiar with the day command

00:45:45,660 --> 00:45:51,060
is ugc sex alright which is kinda handy

00:45:48,420 --> 00:45:54,450
because even though you tell it to print

00:45:51,060 --> 00:45:57,060
time stamps it's in seconds since the

00:45:54,450 --> 00:45:58,800
JVM of start which is it terribly

00:45:57,060 --> 00:46:01,650
helpful unless you know exactly when the

00:45:58,800 --> 00:46:05,160
day vehicle start so if you have ugc

00:46:01,650 --> 00:46:08,160
seconds and you can add the seconds from

00:46:05,160 --> 00:46:09,390
the log file you have a UTC second

00:46:08,160 --> 00:46:10,650
strangled exactly when those have been

00:46:09,390 --> 00:46:12,990
stabbed in the log and its really

00:46:10,650 --> 00:46:14,340
convert that into a date/time stamp book

00:46:12,990 --> 00:46:16,200
when it is and look because it could

00:46:14,340 --> 00:46:19,170
have been several days after the damien

00:46:16,200 --> 00:46:23,640
echols garden now this is really hard to

00:46:19,170 --> 00:46:24,900
read to this is a typical GC output and

00:46:23,640 --> 00:46:27,180
i'm not going to get too much into

00:46:24,900 --> 00:46:28,140
details here because what I'm really

00:46:27,180 --> 00:46:29,520
going to tell you is you're going to

00:46:28,140 --> 00:46:32,070
want to use some tool to help you

00:46:29,520 --> 00:46:35,600
analyze this but really all it's doing

00:46:32,070 --> 00:46:38,100
is you'll see these timestamps and

00:46:35,600 --> 00:46:40,020
you'll see minor collections and you'll

00:46:38,100 --> 00:46:42,930
see basically how long it took to do the

00:46:40,020 --> 00:46:47,760
collection and in some welcome down here

00:46:42,930 --> 00:46:50,210
you'll see I have at least one in here

00:46:47,760 --> 00:46:50,210
sure

00:46:54,740 --> 00:47:00,900
these are all minor collections in it

00:46:57,140 --> 00:47:03,270
now it's getting too late huh that's in

00:47:00,900 --> 00:47:04,680
figs s later it's on what you're in here

00:47:03,270 --> 00:47:06,120
you got to see a full collection and

00:47:04,680 --> 00:47:08,640
that full collection is going to be a

00:47:06,120 --> 00:47:12,360
lot longer you can you can do the exams

00:47:08,640 --> 00:47:14,910
all candidate at this redhead actually

00:47:12,360 --> 00:47:16,710
told us when we go to know that it doesn

00:47:14,910 --> 00:47:19,350
t second term is actually time now

00:47:16,710 --> 00:47:25,800
that's just a kinda like berries awesome

00:47:19,350 --> 00:47:27,960
time yeah off of it um very good enough

00:47:25,800 --> 00:47:29,580
um I tell me what you're going to get a

00:47:27,960 --> 00:47:30,990
full collection in here now if you

00:47:29,580 --> 00:47:32,760
remember that last time I said you were

00:47:30,990 --> 00:47:34,320
doing I cpu and you noticed it was you

00:47:32,760 --> 00:47:36,570
go all right good what you're probably

00:47:34,320 --> 00:47:39,570
going to see is a lot of booty season

00:47:36,570 --> 00:47:41,610
here taking time and you don't really

00:47:39,570 --> 00:47:42,930
want to see a whole bunch of fool

00:47:41,610 --> 00:47:46,170
garbage collections happening with

00:47:42,930 --> 00:47:48,090
regular like for example and a JBoss

00:47:46,170 --> 00:47:49,770
environment it it automatically there's

00:47:48,090 --> 00:47:52,340
a fool garbage collection once an hour I

00:47:49,770 --> 00:47:55,380
rarely ever saw one more than frequent

00:47:52,340 --> 00:47:57,780
unless they you know there might have

00:47:55,380 --> 00:47:59,820
been a minor spike in memory for some

00:47:57,780 --> 00:48:02,400
query or whatever they did and they had

00:47:59,820 --> 00:48:05,280
an additional food bc but if you see a

00:48:02,400 --> 00:48:08,510
lot of full DC's in here probably need

00:48:05,280 --> 00:48:10,770
to adjust the size your turn if not

00:48:08,510 --> 00:48:12,510
actually go to have your developers

00:48:10,770 --> 00:48:15,480
figure out why they're using too much

00:48:12,510 --> 00:48:17,220
better which i'll show you some ways

00:48:15,480 --> 00:48:21,960
that we can help them do that in a

00:48:17,220 --> 00:48:24,060
moment well well it's you go rule know

00:48:21,960 --> 00:48:26,580
that others are you Norman I've seen it

00:48:24,060 --> 00:48:32,430
somewhere you know want more than four

00:48:26,580 --> 00:48:34,880
seconds per day life for the ogc that's

00:48:32,430 --> 00:48:34,880
reasonable

00:48:39,200 --> 00:48:44,400
yeah and you can I mean you can get

00:48:41,370 --> 00:48:45,780
really into even and this is where when

00:48:44,400 --> 00:48:47,430
you start analyzing this data it

00:48:45,780 --> 00:48:48,990
actually shows you every single little

00:48:47,430 --> 00:48:50,430
memory bucket and this is where people

00:48:48,990 --> 00:48:53,250
start doing that's like oh that I think

00:48:50,430 --> 00:48:55,530
it just decides this and as well I don't

00:48:53,250 --> 00:48:57,210
recommend getting to nikki's you should

00:48:55,530 --> 00:48:59,910
just increase the size now if you in a

00:48:57,210 --> 00:49:02,250
situation where is taking more than four

00:48:59,910 --> 00:49:06,440
seconds per if you goodbye I set is that

00:49:02,250 --> 00:49:09,000
he / ram okay it was saying you probably

00:49:06,440 --> 00:49:10,350
you I'm guessing you probably not around

00:49:09,000 --> 00:49:14,190
the parallel blogger and you need to be

00:49:10,350 --> 00:49:19,040
and give it more course that's our idea

00:49:14,190 --> 00:49:22,380
yeah I mean sometimes it's just Howard I

00:49:19,040 --> 00:49:23,610
was a long time yes now the box if you

00:49:22,380 --> 00:49:25,530
didn't set the garbage you'd like to be

00:49:23,610 --> 00:49:27,240
probably around your aircar suite which

00:49:25,530 --> 00:49:32,370
if your application server probably

00:49:27,240 --> 00:49:35,610
isn't waiting but yeah garbage

00:49:32,370 --> 00:49:38,970
collection is really logical just called

00:49:35,610 --> 00:49:41,550
voodoo science Verde magic and it's also

00:49:38,970 --> 00:49:43,500
funny interesting enough this is one

00:49:41,550 --> 00:49:48,120
area where I don't think they do enough

00:49:43,500 --> 00:49:49,860
time speed up the I don't think the they

00:49:48,120 --> 00:49:53,340
spend enough time talking about this in

00:49:49,860 --> 00:49:55,200
school for the job though they learn how

00:49:53,340 --> 00:49:56,640
to write a program but they don't learn

00:49:55,200 --> 00:49:58,260
this and this is where I think as an

00:49:56,640 --> 00:50:00,420
administrator you really have an

00:49:58,260 --> 00:50:03,810
opportunity to help because it this is

00:50:00,420 --> 00:50:07,200
not java this is basic system

00:50:03,810 --> 00:50:09,120
administration at a JVM level I mean the

00:50:07,200 --> 00:50:11,070
JV images dislike it's a virtual machine

00:50:09,120 --> 00:50:12,510
not a different type than what we deal

00:50:11,070 --> 00:50:14,400
with other different everyday basis it's

00:50:12,510 --> 00:50:16,830
just different tools different language

00:50:14,400 --> 00:50:19,920
but again today it's a virtual machine

00:50:16,830 --> 00:50:21,300
with memory and processing so I think

00:50:19,920 --> 00:50:25,110
it's administrators they have a lot that

00:50:21,300 --> 00:50:28,200
we can help so I've screwed up your car

00:50:25,110 --> 00:50:29,670
guys um so the GC analysis redhead

00:50:28,200 --> 00:50:31,560
actually is a really good tool you can

00:50:29,670 --> 00:50:33,390
just take that GC log off on a web page

00:50:31,560 --> 00:50:36,330
and it will actually help you analyze

00:50:33,390 --> 00:50:37,950
that file and unfortunately right now

00:50:36,330 --> 00:50:39,900
that's the only tool that I knock it is

00:50:37,950 --> 00:50:41,820
really kind of current there's a couple

00:50:39,900 --> 00:50:45,000
other beauty tools or command I tools

00:50:41,820 --> 00:50:47,070
garbage cat GC viewer they'll give you

00:50:45,000 --> 00:50:48,120
some basic stats on it and give you know

00:50:47,070 --> 00:50:50,100
he bi down what you're

00:50:48,120 --> 00:50:50,940
looks like but they don't they're not

00:50:50,100 --> 00:50:53,970
gonna give you a whole lot of good

00:50:50,940 --> 00:50:55,770
recommendations unfortunately the right

00:50:53,970 --> 00:51:00,210
had access when you know requires

00:50:55,770 --> 00:51:01,770
account right at least a account and FYI

00:51:00,210 --> 00:51:03,720
the developer counts ninety nine dollars

00:51:01,770 --> 00:51:07,920
a year it's worth it if you do anything

00:51:03,720 --> 00:51:10,220
else so I need to run through he comes

00:51:07,920 --> 00:51:14,610
real quick because I'm really on it as I

00:51:10,220 --> 00:51:15,810
so he dumps unlike Greg dumps not only

00:51:14,610 --> 00:51:16,800
you're getting all the threads but

00:51:15,810 --> 00:51:19,230
you're actually getting all the memory

00:51:16,800 --> 00:51:21,810
information so if you find out from a

00:51:19,230 --> 00:51:24,120
garbage collection standpoint that their

00:51:21,810 --> 00:51:25,500
Philip you're using up all your deep you

00:51:24,120 --> 00:51:28,620
run out of every you may be getting o

00:51:25,500 --> 00:51:30,750
them errors in your logs you can always

00:51:28,620 --> 00:51:32,790
just raise the ceiling on them get one

00:51:30,750 --> 00:51:35,100
more meat but you know if you're already

00:51:32,790 --> 00:51:37,080
running heat maybe you actually

00:51:35,100 --> 00:51:39,780
want them to make me figure out why

00:51:37,080 --> 00:51:42,000
they're using the home so there are a

00:51:39,780 --> 00:51:44,970
couple different ways one thing is

00:51:42,000 --> 00:51:47,100
really at its another jvm option is to

00:51:44,970 --> 00:51:49,590
set that if you do get it out of the

00:51:47,100 --> 00:51:51,840
ring error oom it will just

00:51:49,590 --> 00:51:53,130
automatically creating a point that's a

00:51:51,840 --> 00:51:54,420
good thing to have when you have those

00:51:53,130 --> 00:51:56,220
kind of yours you got a little bit wrong

00:51:54,420 --> 00:51:58,710
and of course we also put that stuff

00:51:56,220 --> 00:52:00,570
where otherwise us could just dump it to

00:51:58,710 --> 00:52:02,430
wherever it wants to do which is usually

00:52:00,570 --> 00:52:04,410
wherever the bin is running from so

00:52:02,430 --> 00:52:06,180
wherever the process whatever you've

00:52:04,410 --> 00:52:08,100
seen it into before you started the

00:52:06,180 --> 00:52:09,660
process as part of those shell scripts

00:52:08,100 --> 00:52:10,890
that's where it's going to be so happy

00:52:09,660 --> 00:52:13,350
and you're not gonna have any control

00:52:10,890 --> 00:52:16,350
over the name or anything but you can

00:52:13,350 --> 00:52:17,790
also at any time manually create equal

00:52:16,350 --> 00:52:19,470
which if you're trying to analyze a

00:52:17,790 --> 00:52:21,210
problem that isn't to the point where

00:52:19,470 --> 00:52:23,310
it's creating om and you just want to

00:52:21,210 --> 00:52:26,190
figure out okay do is there something we

00:52:23,310 --> 00:52:27,870
can do here to get the developers to

00:52:26,190 --> 00:52:29,760
reduce their memory or maybe they have a

00:52:27,870 --> 00:52:32,190
memory leak you know it's like you're

00:52:29,760 --> 00:52:34,530
hitting them over time and you know it

00:52:32,190 --> 00:52:36,420
grows you haven't hit yet or you create

00:52:34,530 --> 00:52:39,990
a few company time and you can figure

00:52:36,420 --> 00:52:41,040
out maybe I've got a member here and

00:52:39,990 --> 00:52:43,200
again there's another great tool for

00:52:41,040 --> 00:52:46,860
that and this one is a lot better than

00:52:43,200 --> 00:52:49,140
the TDA the Mata that the memory

00:52:46,860 --> 00:52:52,110
analyzer tool is basically an eclipse

00:52:49,140 --> 00:52:53,730
RCP so it's an eclipse if you are

00:52:52,110 --> 00:52:56,040
familiar with the Eclipse IDE but it's

00:52:53,730 --> 00:53:00,140
customized just to do this one culture

00:52:56,040 --> 00:53:01,930
and that is to parse analyze eat them oh

00:53:00,140 --> 00:53:07,480
wow

00:53:01,930 --> 00:53:09,990
my color now so basically you just open

00:53:07,480 --> 00:53:12,880
that Kingdom with this tool now FYI

00:53:09,990 --> 00:53:15,400
wherever you run this tool from needs to

00:53:12,880 --> 00:53:17,380
be running the same version of Java that

00:53:15,400 --> 00:53:21,369
picking up came from so if that's a

00:53:17,380 --> 00:53:24,040
64-bit jaw in a horrible jdk 7 not

00:53:21,369 --> 00:53:27,339
whatever you need to have a 64-bit or

00:53:24,040 --> 00:53:30,329
the jdk on your analyzes have the same

00:53:27,339 --> 00:53:32,440
release version as the server ideally

00:53:30,329 --> 00:53:34,300
which means on your desktop you might

00:53:32,440 --> 00:53:36,339
have a whole bunch of zip deployments of

00:53:34,300 --> 00:53:47,589
java laying around just to support next

00:53:36,339 --> 00:53:48,760
yes I believe I mean to a certain extent

00:53:47,589 --> 00:53:50,410
you can get away with that like if

00:53:48,760 --> 00:53:53,440
you're running a slightly newer Java on

00:53:50,410 --> 00:53:55,210
your desktop would be okay but it is a

00:53:53,440 --> 00:53:56,980
good idea if you're doing deep analysis

00:53:55,210 --> 00:53:58,809
to use the exact same version of

00:53:56,980 --> 00:54:00,130
whatever it came from you're certainly

00:53:58,809 --> 00:54:05,230
not going to want to run eighth to

00:54:00,130 --> 00:54:06,910
analyze the seven but anyway there's a

00:54:05,230 --> 00:54:09,430
really good tool in here without getting

00:54:06,910 --> 00:54:11,559
too far to this tool you can you just

00:54:09,430 --> 00:54:14,980
click on detect leaks and it will give

00:54:11,559 --> 00:54:17,829
you the biggest league you know suspects

00:54:14,980 --> 00:54:19,030
and it's really just by size on so the

00:54:17,829 --> 00:54:20,829
biggest it's going to take a look at the

00:54:19,030 --> 00:54:22,780
biggest objects and to eat and it's

00:54:20,829 --> 00:54:24,579
going to rank them and tell you one of

00:54:22,780 --> 00:54:27,040
the what's consuming the most memory

00:54:24,579 --> 00:54:28,839
resources in some cases that might be

00:54:27,040 --> 00:54:31,510
the container which means you probably

00:54:28,839 --> 00:54:34,000
have a link but if it's a database

00:54:31,510 --> 00:54:37,839
object that seems like a bad idea and

00:54:34,000 --> 00:54:39,730
you can you can see you can quickly

00:54:37,839 --> 00:54:43,990
isolate where you might be having think

00:54:39,730 --> 00:54:46,089
I'll give one quick example for example

00:54:43,990 --> 00:54:49,450
back when i was earning my tom tom cat

00:54:46,089 --> 00:54:50,710
four days we had a situation where we

00:54:49,450 --> 00:54:52,420
just have knew we had to reboot the

00:54:50,710 --> 00:54:54,609
Tomcats restart tomcat server server

00:54:52,420 --> 00:54:56,049
humans well we started getting an influx

00:54:54,609 --> 00:54:58,240
traffic and it started happening more

00:54:56,049 --> 00:55:01,569
frequently and restart to my pets we're

00:54:58,240 --> 00:55:03,460
off and it got to the point where our

00:55:01,569 --> 00:55:05,319
choppers are so high did we were rebar

00:55:03,460 --> 00:55:09,460
debrie starting to tomcat multiple times

00:55:05,319 --> 00:55:12,430
a day heap done it was the longer leave

00:55:09,460 --> 00:55:13,010
the top half longer turns out hey as

00:55:12,430 --> 00:55:15,470
well

00:55:13,010 --> 00:55:19,820
never the larger upgrade okay name is

00:55:15,470 --> 00:55:21,920
high so you can you get you can it's

00:55:19,820 --> 00:55:23,480
very helpful for you and the job

00:55:21,920 --> 00:55:25,730
developer isolate where they might be

00:55:23,480 --> 00:55:27,650
having memory consumption problems and

00:55:25,730 --> 00:55:31,100
you can point right to a specific java

00:55:27,650 --> 00:55:35,420
class or call it that has that memory

00:55:31,100 --> 00:55:37,040
still stuff in heat i also wanted to get

00:55:35,420 --> 00:55:40,700
through some tools i'm probably not have

00:55:37,040 --> 00:55:44,270
time to get room all jconsole is a great

00:55:40,700 --> 00:55:47,030
tool visualvm is the new river iteration

00:55:44,270 --> 00:55:48,920
of the jconsole eastern run both locally

00:55:47,030 --> 00:55:51,830
and remotely if you're doing them

00:55:48,920 --> 00:55:53,210
remotely you need to do buying jmx i'm

00:55:51,830 --> 00:55:56,720
going to be going through a real fast

00:55:53,210 --> 00:55:58,520
alright i'm setting up jmx can be a

00:55:56,720 --> 00:56:01,550
little challenging it's really simple

00:55:58,520 --> 00:56:03,560
one point but really you need to you

00:56:01,550 --> 00:56:04,940
know here's the simplest way to get up

00:56:03,560 --> 00:56:07,160
and running really fast quick and dirty

00:56:04,940 --> 00:56:08,300
without any security oil if you want to

00:56:07,160 --> 00:56:09,650
set up but you really need to set up

00:56:08,300 --> 00:56:11,330
some security at least some kind of

00:56:09,650 --> 00:56:13,370
password some kind of person to do it

00:56:11,330 --> 00:56:14,630
properly see the documentation i didn't

00:56:13,370 --> 00:56:16,790
want to get it to the nitty gritty

00:56:14,630 --> 00:56:20,060
details of setting up a key store all

00:56:16,790 --> 00:56:22,610
that another option is for remote

00:56:20,060 --> 00:56:25,010
monitoring of the of the java processes

00:56:22,610 --> 00:56:27,140
to for those things would be SNMP for

00:56:25,010 --> 00:56:29,300
java and will again a real easy thing to

00:56:27,140 --> 00:56:31,330
set up and enable no notice that it uses

00:56:29,300 --> 00:56:33,710
a different port from the system this

00:56:31,330 --> 00:56:35,510
SMP is not going to leverage the

00:56:33,710 --> 00:56:36,830
system's estimate Ian's going to want to

00:56:35,510 --> 00:56:39,040
do its own just like Java does for

00:56:36,830 --> 00:56:42,380
everything right tell network technician

00:56:39,040 --> 00:56:43,930
so then you can take either way there's

00:56:42,380 --> 00:56:46,730
two solutions are the train back sir

00:56:43,930 --> 00:56:48,620
SNMP and you do any one of your favorite

00:56:46,730 --> 00:56:50,300
monitoring tools to then monitor some of

00:56:48,620 --> 00:56:52,250
those statistics you can see for example

00:56:50,300 --> 00:56:53,660
you can monitor the thread usage so you

00:56:52,250 --> 00:56:55,310
can see maybe you have a thread leak

00:56:53,660 --> 00:56:57,020
going on or you can see the memory usage

00:56:55,310 --> 00:57:00,770
over time which is very handy thing to

00:56:57,020 --> 00:57:02,240
do so as a system administrator you

00:57:00,770 --> 00:57:04,630
probably are already using one of these

00:57:02,240 --> 00:57:08,600
tools already if not something similar

00:57:04,630 --> 00:57:10,550
personally I imei owns an ocelot so

00:57:08,600 --> 00:57:14,000
there was a dense presentation yesterday

00:57:10,550 --> 00:57:17,330
and it has some built-in syntax for Jeff

00:57:14,000 --> 00:57:20,090
java and even to like tomcat j box that

00:57:17,330 --> 00:57:22,760
use jmx out of the box if you're able to

00:57:20,090 --> 00:57:26,550
i do recommend amex over a speed more

00:57:22,760 --> 00:57:29,100
capable but then there's also even

00:57:26,550 --> 00:57:32,340
more specific java monitoring tools like

00:57:29,100 --> 00:57:35,280
the see a wily Interscope product our HQ

00:57:32,340 --> 00:57:38,070
from witches as and the redhead is known

00:57:35,280 --> 00:57:40,140
as John and now if you are able to run

00:57:38,070 --> 00:57:42,420
hope dedicate is even a great solution

00:57:40,140 --> 00:57:44,520
called thermostat which is really good

00:57:42,420 --> 00:57:46,980
the problem all of these are for

00:57:44,520 --> 00:57:48,300
agent-based so these are these are agent

00:57:46,980 --> 00:57:49,860
lists they just active neighborhood

00:57:48,300 --> 00:57:51,270
connector these actually require

00:57:49,860 --> 00:57:52,950
installing some kind of Java 8 on the

00:57:51,270 --> 00:57:55,740
machine but the ban of the advantage of

00:57:52,950 --> 00:57:56,700
it is if you have multiple JVMs here you

00:57:55,740 --> 00:57:59,550
would actually have to set a different

00:57:56,700 --> 00:58:01,740
people perhaps jbm here you'd actually

00:57:59,550 --> 00:58:04,320
be able to run one agent one tcp honored

00:58:01,740 --> 00:58:06,630
all the je viens on that retreat and

00:58:04,320 --> 00:58:09,210
this is a large queue or download look

00:58:06,630 --> 00:58:10,740
like and you're gonna have to do a lot

00:58:09,210 --> 00:58:13,350
more with it than just monitoring and

00:58:10,740 --> 00:58:25,020
then we are unfortunately proud of time

00:58:13,350 --> 00:58:27,030
for questions I actually had a lot more

00:58:25,020 --> 00:58:30,810
step I want to put this thing to do even

00:58:27,030 --> 00:58:34,230
more than expecting all sofs using next

00:58:30,810 --> 00:58:37,200
add another new and success stuff I am

00:58:34,230 --> 00:58:39,990
didn't figure out I just thursday i was

00:58:37,200 --> 00:58:43,020
using lsof maybe to try to figure out a

00:58:39,990 --> 00:58:44,400
health a Java developer figure out their

00:58:43,020 --> 00:58:45,660
sockets and a soccer thing and you

00:58:44,400 --> 00:58:47,460
weren't closing their sockets and they

00:58:45,660 --> 00:58:49,950
had a lotta there we ended up using up

00:58:47,460 --> 00:59:00,740
all their file descriptors because they

00:58:49,950 --> 00:59:03,770
weren't close okay I get that a lot um

00:59:00,740 --> 00:59:09,630
there are a couple Java books out there

00:59:03,770 --> 00:59:11,250
for this like focus and not room in and

00:59:09,630 --> 00:59:12,720
that's why I get this question a lot

00:59:11,250 --> 00:59:14,400
like emeralds are recommend a good look

00:59:12,720 --> 00:59:17,180
to me our guinea yeah there's a couple

00:59:14,400 --> 00:59:19,980
of job of course 20 books out there

00:59:17,180 --> 00:59:22,020
nothing specific to Lance I'm actually

00:59:19,980 --> 00:59:23,940
I've actually been contemplating writing

00:59:22,020 --> 00:59:27,120
something at a free month or starring

00:59:23,940 --> 00:59:28,250
the 314 job just java on linux the

00:59:27,120 --> 00:59:30,390
system is ready

00:59:28,250 --> 00:59:33,750
maybe getting some contributors out

00:59:30,390 --> 00:59:35,340
there because it isn't i think it's it

00:59:33,750 --> 00:59:36,240
means to be out there and so that's one

00:59:35,340 --> 00:59:37,950
reason i want to put together the

00:59:36,240 --> 00:59:39,630
presentation is to kind of get it out

00:59:37,950 --> 00:59:41,940
here you get it starving idea of some of

00:59:39,630 --> 00:59:45,740
the things that need to be covered get

00:59:41,940 --> 00:59:49,860
some feedback maybe start writing a book

00:59:45,740 --> 00:59:52,530
it's surprising since you know most of

00:59:49,860 --> 01:00:06,780
google and was like everybody yeah we

00:59:52,530 --> 01:00:09,470
need a whole thing's job Oh or secure 24

01:00:06,780 --> 01:00:14,870
so the cloud offers do come true ya

01:00:09,470 --> 01:00:14,870
ready that's it seriously

01:00:21,540 --> 01:00:23,600
you

01:01:33,730 --> 01:01:35,790
you

01:07:25,130 --> 01:07:27,190

YouTube URL: https://www.youtube.com/watch?v=zIUqy81qxxM


