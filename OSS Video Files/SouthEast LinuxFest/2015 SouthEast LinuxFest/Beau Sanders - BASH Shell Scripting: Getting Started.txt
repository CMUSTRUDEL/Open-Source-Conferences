Title: Beau Sanders - BASH Shell Scripting: Getting Started
Publication date: 2017-01-25
Playlist: 2015 SouthEast LinuxFest
Description: 
	
Captions: 
	00:00:02,880 --> 00:00:10,599
well good morning everybody sorry for

00:00:06,580 --> 00:00:12,940
the short delay they're not too bad this

00:00:10,599 --> 00:00:21,119
is amazing I can't believe we're this

00:00:12,940 --> 00:00:25,900
many people survived last night ok so

00:00:21,119 --> 00:00:29,910
I'm Bo Sanders and this is getting

00:00:25,900 --> 00:00:33,150
started with bash shell scripting I

00:00:29,910 --> 00:00:38,110
think a little bit about expectations

00:00:33,150 --> 00:00:40,690
should be said this is an intro or

00:00:38,110 --> 00:00:43,810
newbie discussion I'm going to assume

00:00:40,690 --> 00:00:46,150
pretty much that nobody in here has ever

00:00:43,810 --> 00:00:49,540
done a shell script or maybe haven't

00:00:46,150 --> 00:00:52,480
done one a long time and you will learn

00:00:49,540 --> 00:00:55,690
some basic tools that you can use in

00:00:52,480 --> 00:00:57,490
shell scripting we teach a course I've

00:00:55,690 --> 00:01:02,020
taught a course over the years is about

00:00:57,490 --> 00:01:06,400
45 hours long on shell scripting and so

00:01:02,020 --> 00:01:11,590
today you got to about 55 minutes of me

00:01:06,400 --> 00:01:14,950
and caleb Cooper's a year Caleb various

00:01:11,590 --> 00:01:17,710
been looking for you Caleb's going to do

00:01:14,950 --> 00:01:20,950
the advanced part he's going to do the

00:01:17,710 --> 00:01:24,520
fun stuff in the next session so I'll

00:01:20,950 --> 00:01:26,170
try to get us started I am the academic

00:01:24,520 --> 00:01:27,400
program coordinator for computer

00:01:26,170 --> 00:01:29,800
technology at Greenville Technical

00:01:27,400 --> 00:01:34,659
College about two hours south of here on

00:01:29,800 --> 00:01:37,659
i-85 and been there about 13 years I'm a

00:01:34,659 --> 00:01:39,610
certified red hat instructor and

00:01:37,659 --> 00:01:46,150
teaching in the Red Hat Academy there

00:01:39,610 --> 00:01:48,670
since 2006 we teach we have taught about

00:01:46,150 --> 00:01:51,490
four different courses primarily we

00:01:48,670 --> 00:01:54,760
teach Linux essentials and Linux

00:01:51,490 --> 00:01:58,210
administration we've done some security

00:01:54,760 --> 00:02:00,040
net apps and scripting as well so like I

00:01:58,210 --> 00:02:03,220
said we're going to assume a few things

00:02:00,040 --> 00:02:04,990
here because we you know I don't know

00:02:03,220 --> 00:02:06,130
you guys you don't know me I'm trying to

00:02:04,990 --> 00:02:08,140
figure out where we're going to start

00:02:06,130 --> 00:02:10,869
here so I'm going to assume that

00:02:08,140 --> 00:02:13,269
everybody in here knows how to handle

00:02:10,869 --> 00:02:13,840
the Linux command prompt that's what my

00:02:13,269 --> 00:02:18,819
students

00:02:13,840 --> 00:02:21,250
all it command prompt you probably are

00:02:18,819 --> 00:02:23,849
or have done some system administration

00:02:21,250 --> 00:02:26,650
so you want to make your life easier

00:02:23,849 --> 00:02:29,140
make things more manageable you know a

00:02:26,650 --> 00:02:31,360
little programming possibly it's not

00:02:29,140 --> 00:02:33,879
really required but you got to kind of

00:02:31,360 --> 00:02:37,299
understand some of the programming logic

00:02:33,879 --> 00:02:40,120
and you know some commands and you

00:02:37,299 --> 00:02:43,090
understand the command structure in

00:02:40,120 --> 00:02:44,349
Linux so I'm going to assume that

00:02:43,090 --> 00:02:46,599
everybody in the room is comfortable

00:02:44,349 --> 00:02:48,160
with these commands we're going to jump

00:02:46,599 --> 00:02:50,950
right over this we're going to jump over

00:02:48,160 --> 00:02:53,470
a lot of stuff in this presentation

00:02:50,950 --> 00:02:56,950
because I probably have more slides than

00:02:53,470 --> 00:02:59,940
any speaker here this makes does this

00:02:56,950 --> 00:03:02,769
make any sense to anybody in the room I

00:02:59,940 --> 00:03:07,079
pay the artist to do know I actually did

00:03:02,769 --> 00:03:09,910
this myself to try to explain what the

00:03:07,079 --> 00:03:11,410
command structure is so we understand

00:03:09,910 --> 00:03:13,840
the command we understand where the

00:03:11,410 --> 00:03:17,500
switches or options go and we know what

00:03:13,840 --> 00:03:21,480
arguments are so just by way of

00:03:17,500 --> 00:03:24,340
background bash is the born again shell

00:03:21,480 --> 00:03:27,100
it is probably the most commonly used

00:03:24,340 --> 00:03:32,019
program in linux you don't count the

00:03:27,100 --> 00:03:34,450
colonel and this is what you see when

00:03:32,019 --> 00:03:36,459
you log in to a remote terminal it's

00:03:34,450 --> 00:03:40,780
what you see if you open the pseudo

00:03:36,459 --> 00:03:43,389
terminal it is the command prompt that

00:03:40,780 --> 00:03:45,280
makes it an interactive shell what a lot

00:03:43,389 --> 00:03:48,340
of people don't realize especially

00:03:45,280 --> 00:03:52,079
newbies to Linux it is a powerful

00:03:48,340 --> 00:03:54,970
programming languages scripting language

00:03:52,079 --> 00:03:58,299
it allows you to do automated tasks

00:03:54,970 --> 00:04:01,000
basically anything that you can do in

00:03:58,299 --> 00:04:04,540
Linux you can automate with a bash shell

00:04:01,000 --> 00:04:06,730
you just have to understand how to put

00:04:04,540 --> 00:04:11,680
it all together so you can get the job

00:04:06,730 --> 00:04:15,340
done that you want the bash shell is an

00:04:11,680 --> 00:04:18,579
interpreter I think that's important to

00:04:15,340 --> 00:04:20,320
understand because in programming most

00:04:18,579 --> 00:04:22,870
interpreted languages or fairly

00:04:20,320 --> 00:04:24,669
high-level languages they're fast to

00:04:22,870 --> 00:04:27,430
develop there's a lot of built-in things

00:04:24,669 --> 00:04:29,380
that makes life easy as compared to

00:04:27,430 --> 00:04:32,770
lower level languages where you have to

00:04:29,380 --> 00:04:36,610
code everything so this is an

00:04:32,770 --> 00:04:39,659
interpreted language lot like pearl or

00:04:36,610 --> 00:04:42,729
Python PHP Ruby those guys are all

00:04:39,659 --> 00:04:45,270
interpreted languages one of the things

00:04:42,729 --> 00:04:47,740
that we have to do in bash shell is

00:04:45,270 --> 00:04:51,669
identify the interpreter that we're

00:04:47,740 --> 00:04:56,169
going to use in the first line of a

00:04:51,669 --> 00:04:59,280
script now this is not required could

00:04:56,169 --> 00:05:02,110
you could leave this out and the

00:04:59,280 --> 00:05:04,570
operating system will just assume you're

00:05:02,110 --> 00:05:08,590
going to use the shell that you're

00:05:04,570 --> 00:05:11,140
logged into which does work but if you

00:05:08,590 --> 00:05:13,930
want to use your script or send your

00:05:11,140 --> 00:05:17,530
script somebody else you need to

00:05:13,930 --> 00:05:19,930
identify the interpreter so we have this

00:05:17,530 --> 00:05:25,030
thing called the shebang the shebang is

00:05:19,930 --> 00:05:28,960
a pound sign in a bane next ! is a being

00:05:25,030 --> 00:05:32,440
and that followed by the absolute path

00:05:28,960 --> 00:05:35,800
to your interpreter get you started on

00:05:32,440 --> 00:05:38,409
your shell script another thing that you

00:05:35,800 --> 00:05:42,099
have to do to make a shell script work

00:05:38,409 --> 00:05:45,760
you have to set the execute permissions

00:05:42,099 --> 00:05:50,080
own for the class of user that you want

00:05:45,760 --> 00:05:53,020
to use the script in when I teach this

00:05:50,080 --> 00:05:54,700
at school a lot of students forget to do

00:05:53,020 --> 00:05:57,400
this and the early days and the wonder

00:05:54,700 --> 00:06:01,539
whether script does not run but you need

00:05:57,400 --> 00:06:05,530
to chew mad your script a typical octal

00:06:01,539 --> 00:06:08,159
notation might be chime I'd 775 in your

00:06:05,530 --> 00:06:11,529
script name to get that permission set

00:06:08,159 --> 00:06:16,750
you also have to have access to your

00:06:11,529 --> 00:06:20,130
script through a through the path a path

00:06:16,750 --> 00:06:22,870
is a set of directories that your

00:06:20,130 --> 00:06:25,150
operating system looks through to find

00:06:22,870 --> 00:06:28,990
commands every operating system and I

00:06:25,150 --> 00:06:31,990
know of has one so you could put your

00:06:28,990 --> 00:06:36,630
scrip in a bin directory an S bin

00:06:31,990 --> 00:06:40,240
directory or you can use some of the

00:06:36,630 --> 00:06:43,210
syntax here most of the time people use

00:06:40,240 --> 00:06:45,699
dot slash in front of their scripting

00:06:43,210 --> 00:06:48,610
which appends the current working

00:06:45,699 --> 00:06:52,810
directory to the default path and your

00:06:48,610 --> 00:06:56,889
script will run that is also something

00:06:52,810 --> 00:06:59,919
that new users tend to struggle with

00:06:56,889 --> 00:07:04,030
until they get used to it now I find it

00:06:59,919 --> 00:07:06,280
interesting in Red Hat Linux that all

00:07:04,030 --> 00:07:08,860
users have a bin directory in their

00:07:06,280 --> 00:07:13,570
default path but the directory does not

00:07:08,860 --> 00:07:15,520
exist so if you're going to use that

00:07:13,570 --> 00:07:22,210
directory you have to create it one time

00:07:15,520 --> 00:07:25,840
as a non root user and so mkdir slash

00:07:22,210 --> 00:07:28,419
bin should do it all right so that's a

00:07:25,840 --> 00:07:32,070
real quick kind of ramp up to what you

00:07:28,419 --> 00:07:37,389
got to do to start using your scripts so

00:07:32,070 --> 00:07:41,050
first off we have to be able to include

00:07:37,389 --> 00:07:43,570
variable values in our scripts there are

00:07:41,050 --> 00:07:46,660
basically two types of variables in bash

00:07:43,570 --> 00:07:49,389
shell scripting shell variable is the

00:07:46,660 --> 00:07:53,919
most common it can be anything really

00:07:49,389 --> 00:07:57,370
very simple to do bash lets us do this

00:07:53,919 --> 00:08:00,430
on the fly can be used as long as that

00:07:57,370 --> 00:08:04,380
she'll is open he closed the show or yun

00:08:00,430 --> 00:08:06,820
set the variable and it goes away so

00:08:04,380 --> 00:08:09,580
like so there's two different kinds of

00:08:06,820 --> 00:08:12,010
variables an environmental variable is a

00:08:09,580 --> 00:08:16,000
variable that can be used in more than

00:08:12,010 --> 00:08:19,060
one show so most of us use local

00:08:16,000 --> 00:08:24,490
variables we write scripts unless we are

00:08:19,060 --> 00:08:26,949
going to export the variable so that we

00:08:24,490 --> 00:08:31,539
can use it outside the shell so to

00:08:26,949 --> 00:08:38,130
create a variable in give it a value AE

00:08:31,539 --> 00:08:41,320
quiza pretty simple strategy now to

00:08:38,130 --> 00:08:44,100
dereference that variable you have to

00:08:41,320 --> 00:08:47,290
precede the variable with a dollar sign

00:08:44,100 --> 00:08:49,620
so if you want to use the value that's

00:08:47,290 --> 00:08:51,839
in that variable whenever you

00:08:49,620 --> 00:08:54,089
dereference it or have it in your script

00:08:51,839 --> 00:08:58,890
you have to proceed the variable name

00:08:54,089 --> 00:09:01,920
with a dollar sign now that variable

00:08:58,890 --> 00:09:04,650
will be in memory as long as that shells

00:09:01,920 --> 00:09:07,589
running sometimes you may want to

00:09:04,650 --> 00:09:11,610
release the variable that come in to do

00:09:07,589 --> 00:09:14,390
that is unset in the variable name now I

00:09:11,610 --> 00:09:19,500
mentioned environmental variables

00:09:14,390 --> 00:09:21,660
environmental variables are stored in

00:09:19,500 --> 00:09:25,380
the kernel things there things like

00:09:21,660 --> 00:09:28,800
process IDs user IDs all of the context

00:09:25,380 --> 00:09:31,440
of processes are environmental variables

00:09:28,800 --> 00:09:33,089
in this is what we're typically used to

00:09:31,440 --> 00:09:36,620
but we can do the same thing with shell

00:09:33,089 --> 00:09:41,570
variables simply by exporting them and

00:09:36,620 --> 00:09:45,150
the general best practices on own

00:09:41,570 --> 00:09:47,540
exported variables is to name them in

00:09:45,150 --> 00:09:52,830
all caps so you remember that they are

00:09:47,540 --> 00:09:55,290
exported but so all you have to do is

00:09:52,830 --> 00:09:57,959
promote a shell variable with the export

00:09:55,290 --> 00:10:01,500
command followed by the name of the

00:09:57,959 --> 00:10:06,440
variable you want to export and then you

00:10:01,500 --> 00:10:09,810
can use it outside the current shell now

00:10:06,440 --> 00:10:12,270
changing gears a little bit we need to

00:10:09,810 --> 00:10:16,020
understand standard in and standard out

00:10:12,270 --> 00:10:20,970
if we're going to do anything creative

00:10:16,020 --> 00:10:23,730
with scripts so all operating systems

00:10:20,970 --> 00:10:26,100
have a concept of standard in standard

00:10:23,730 --> 00:10:27,240
out in standard error but we're not

00:10:26,100 --> 00:10:30,900
going to worry about standard error

00:10:27,240 --> 00:10:33,320
today but standard in typically as the

00:10:30,900 --> 00:10:36,360
keyboard but it can be something else

00:10:33,320 --> 00:10:38,790
standard out is typically the monitor

00:10:36,360 --> 00:10:42,300
but that can be something else so that

00:10:38,790 --> 00:10:44,130
creates something called redirection and

00:10:42,300 --> 00:10:47,760
we use the greater than or less than

00:10:44,130 --> 00:10:51,890
symbol to redirect the output of a

00:10:47,760 --> 00:10:55,770
command in that provides a lot of

00:10:51,890 --> 00:10:58,890
opportunities for us so for example here

00:10:55,770 --> 00:11:02,560
we're just redirecting the output of the

00:10:58,890 --> 00:11:05,560
PS command into a file name

00:11:02,560 --> 00:11:10,810
sluggish text notice there's no return

00:11:05,560 --> 00:11:13,870
to the current standard out because we

00:11:10,810 --> 00:11:16,870
have redirected the output of the PS

00:11:13,870 --> 00:11:20,380
command so we want to see that we've got

00:11:16,870 --> 00:11:22,510
to open up the sluggish dot txt to see

00:11:20,380 --> 00:11:25,420
that output that's just redirecting

00:11:22,510 --> 00:11:29,350
output another neat thing you can do

00:11:25,420 --> 00:11:31,210
with redirecting output is a pinned and

00:11:29,350 --> 00:11:34,420
existing file now this will actually

00:11:31,210 --> 00:11:38,160
create a new file or append to an

00:11:34,420 --> 00:11:41,290
existing file it's great to use to

00:11:38,160 --> 00:11:44,830
greater than symbols when you want to do

00:11:41,290 --> 00:11:48,720
things like create a log of activity in

00:11:44,830 --> 00:11:48,720
your script use this quite a bit

00:11:48,750 --> 00:11:57,279
redirect input you can use a file as

00:11:52,839 --> 00:12:00,640
input into a command one of the best

00:11:57,279 --> 00:12:05,380
examples of that is the male command if

00:12:00,640 --> 00:12:08,170
you want to send some type of file as a

00:12:05,380 --> 00:12:10,450
to a male client rather than write it

00:12:08,170 --> 00:12:14,410
you can just redirect it as we see on

00:12:10,450 --> 00:12:17,800
the bottom here so very quickly kind of

00:12:14,410 --> 00:12:21,970
a refresher their own redirecting output

00:12:17,800 --> 00:12:24,460
and redirecting input so I got to go

00:12:21,970 --> 00:12:28,660
fast because I got a lot in my 55

00:12:24,460 --> 00:12:30,790
minutes here I think so some commands

00:12:28,660 --> 00:12:35,589
that I think that you're going to have

00:12:30,790 --> 00:12:38,320
to understand and to really get a good

00:12:35,589 --> 00:12:40,720
benefit out of your script be able to do

00:12:38,320 --> 00:12:43,030
some nice things with scripts the

00:12:40,720 --> 00:12:47,320
easiest of these is echo it just that

00:12:43,030 --> 00:12:51,850
goes whatever you want whatever you feed

00:12:47,320 --> 00:12:54,100
to echo and you can redirect it to a

00:12:51,850 --> 00:12:57,640
file or to another command or something

00:12:54,100 --> 00:13:00,040
like that so echo doesn't really have

00:12:57,640 --> 00:13:04,950
too many options then some string

00:13:00,040 --> 00:13:07,570
typically redirect that to a file that's

00:13:04,950 --> 00:13:10,930
one of the first commands most people

00:13:07,570 --> 00:13:13,780
learn now we're going to jump way over a

00:13:10,930 --> 00:13:17,380
bunch of things and get to a command

00:13:13,780 --> 00:13:20,770
that people don't learn too early in our

00:13:17,380 --> 00:13:25,990
classes grep the general regular

00:13:20,770 --> 00:13:29,470
expression parser grep is huge we use

00:13:25,990 --> 00:13:31,300
grep all the time in Linux grep is so

00:13:29,470 --> 00:13:34,930
huge there's actually three different

00:13:31,300 --> 00:13:37,420
kinds of grip I tell our students to use

00:13:34,930 --> 00:13:38,770
e grep because it kind of has all the

00:13:37,420 --> 00:13:44,589
bells and whistles of all the other

00:13:38,770 --> 00:13:47,200
grips but grep is a way to as used to

00:13:44,589 --> 00:13:50,589
match a pattern sometimes called a

00:13:47,200 --> 00:13:52,690
template a series of characters in a

00:13:50,589 --> 00:13:56,860
file pull out the lines that match

00:13:52,690 --> 00:13:59,650
whatever that pattern is in a lot of

00:13:56,860 --> 00:14:02,740
options on grep we don't have time to go

00:13:59,650 --> 00:14:08,230
over too many of these but grep is

00:14:02,740 --> 00:14:10,890
pretty powerful the pattern can you

00:14:08,230 --> 00:14:14,890
could be very creative with the pattern

00:14:10,890 --> 00:14:17,140
it can be as simple as just a string it

00:14:14,890 --> 00:14:20,890
can be a regular expression it could be

00:14:17,140 --> 00:14:24,910
lots of things another neat deal with

00:14:20,890 --> 00:14:28,089
grep is you can invert it and that's

00:14:24,910 --> 00:14:31,320
very helpful we do a lot of exercises in

00:14:28,089 --> 00:14:34,360
class with vowels and consonants and

00:14:31,320 --> 00:14:36,400
driving students crazy about that but

00:14:34,360 --> 00:14:40,589
basically all you do is invert the

00:14:36,400 --> 00:14:43,329
string the if your string is a yo you

00:14:40,589 --> 00:14:47,800
invert it and you get all the consonants

00:14:43,329 --> 00:14:52,089
so it's a interesting tool to be able to

00:14:47,800 --> 00:14:55,440
use now pipes I was talking a guy

00:14:52,089 --> 00:14:59,320
outside about pipes pipes are always

00:14:55,440 --> 00:15:01,650
very important in scripts it's a little

00:14:59,320 --> 00:15:05,050
bit different than redirection because

00:15:01,650 --> 00:15:07,000
you're basically joining commands

00:15:05,050 --> 00:15:11,050
together into something called a process

00:15:07,000 --> 00:15:14,400
group when you use pipes so typically

00:15:11,050 --> 00:15:17,230
the output what you're doing is you're

00:15:14,400 --> 00:15:19,930
piping the output of the command on the

00:15:17,230 --> 00:15:21,850
left of the pipe to the command older

00:15:19,930 --> 00:15:25,260
will be the input to the command on the

00:15:21,850 --> 00:15:27,730
right of the pipe the pipe is a vertical

00:15:25,260 --> 00:15:31,899
bar or vertical line

00:15:27,730 --> 00:15:34,060
and it's when the best named characters

00:15:31,899 --> 00:15:37,779
on the keyboard because it looks like a

00:15:34,060 --> 00:15:42,339
pipe now the reason this is important is

00:15:37,779 --> 00:15:45,430
we can combine grep with other tools

00:15:42,339 --> 00:15:48,279
through a pipe in create a filter and

00:15:45,430 --> 00:15:53,350
that's how we filter huge amounts of

00:15:48,279 --> 00:15:56,199
data into something that we can use so

00:15:53,350 --> 00:16:01,480
for example here we're not using a pipe

00:15:56,199 --> 00:16:05,980
we are wrapping for a strewn ro ot in

00:16:01,480 --> 00:16:09,250
the NC password and file and we got a

00:16:05,980 --> 00:16:14,560
couple of lines of that file that

00:16:09,250 --> 00:16:18,519
contained route now in a pipe to create

00:16:14,560 --> 00:16:20,110
a filter first you well the typical way

00:16:18,519 --> 00:16:24,220
to do it there's always more than one

00:16:20,110 --> 00:16:28,410
way but the typical way is to grab a

00:16:24,220 --> 00:16:32,440
file and then feed it into the pipe in

00:16:28,410 --> 00:16:38,740
either will process that data process

00:16:32,440 --> 00:16:40,959
whatever you're you're filtering word

00:16:38,740 --> 00:16:45,220
about cutting pace because cut and paste

00:16:40,959 --> 00:16:48,959
is real important in scripting we don't

00:16:45,220 --> 00:16:52,510
have a clipboard in the command prompt

00:16:48,959 --> 00:16:55,779
cut and paste is is completely different

00:16:52,510 --> 00:16:59,649
at the command prompt in cut has a lot

00:16:55,779 --> 00:17:04,059
of options paste not too many options so

00:16:59,649 --> 00:17:10,480
in cut you basically can cut a file

00:17:04,059 --> 00:17:13,620
based on bytes characters you can cut

00:17:10,480 --> 00:17:18,010
based on a delimiter but it is a way to

00:17:13,620 --> 00:17:21,850
extract data from in a file if you've

00:17:18,010 --> 00:17:24,010
worked with flat database files just

00:17:21,850 --> 00:17:27,130
regular text files that are used stata

00:17:24,010 --> 00:17:30,460
basis like etsy passwd this is a very

00:17:27,130 --> 00:17:35,280
good way to cut and paste will show you

00:17:30,460 --> 00:17:35,280
how to do that with the cut come in

00:17:36,240 --> 00:17:42,040
cutting based on characters simple way

00:17:39,490 --> 00:17:44,650
is just cut based on

00:17:42,040 --> 00:17:47,680
character position in the line you can

00:17:44,650 --> 00:17:49,030
cut from the character to the end of the

00:17:47,680 --> 00:17:51,790
line or from the beginning of the line

00:17:49,030 --> 00:17:54,220
to a certain character or you can cut

00:17:51,790 --> 00:17:56,860
from one character to another character

00:17:54,220 --> 00:18:00,130
so there's lots of ways to do it here's

00:17:56,860 --> 00:18:03,580
a pretty simple example once again we

00:18:00,130 --> 00:18:05,830
are gripping in Caleb's going to tell

00:18:03,580 --> 00:18:07,570
you about regular expression in the

00:18:05,830 --> 00:18:12,220
second session that's an extended

00:18:07,570 --> 00:18:15,490
regular expression for the argument over

00:18:12,220 --> 00:18:18,370
for the option their own grep that is

00:18:15,490 --> 00:18:25,410
basically looking for numbers four

00:18:18,370 --> 00:18:28,900
digits in the cross interrupts file and

00:18:25,410 --> 00:18:31,990
we're piping that into the cut command

00:18:28,900 --> 00:18:34,600
in cutting the first 15 characters now

00:18:31,990 --> 00:18:37,840
it's actually a couple of ways that we

00:18:34,600 --> 00:18:40,300
could a couple of ways we could do that

00:18:37,840 --> 00:18:43,630
cut this is a simple way cutting

00:18:40,300 --> 00:18:45,910
character one through character 15 to

00:18:43,630 --> 00:18:50,950
get the useful data out of that output

00:18:45,910 --> 00:18:53,530
that we filtered to use cut to the limit

00:18:50,950 --> 00:18:59,470
once again going back to a flat file

00:18:53,530 --> 00:19:01,270
database like the Etsy passwd file you

00:18:59,470 --> 00:19:04,120
have to define the delimiter whatever

00:19:01,270 --> 00:19:07,570
the delimiter is could be a colon

00:19:04,120 --> 00:19:12,130
semicolon comma whatever and then you

00:19:07,570 --> 00:19:15,790
cut by field based on how many times you

00:19:12,130 --> 00:19:23,560
go across the cross the line based on

00:19:15,790 --> 00:19:27,280
the delimiter now hasting is really

00:19:23,560 --> 00:19:30,550
basic pasting is when you combine two or

00:19:27,280 --> 00:19:34,360
more files together to create some

00:19:30,550 --> 00:19:37,660
useful output and pasting starts on the

00:19:34,360 --> 00:19:41,140
top line of each file and basically

00:19:37,660 --> 00:19:44,200
combines the two files together imagine

00:19:41,140 --> 00:19:46,330
having one file that has maybe a list of

00:19:44,200 --> 00:19:48,700
names and another file that has a list

00:19:46,330 --> 00:19:51,430
of phone numbers and you want to match

00:19:48,700 --> 00:19:54,400
those up into an output file you could

00:19:51,430 --> 00:19:55,660
paste the two files together redirect

00:19:54,400 --> 00:20:01,810
the output and you

00:19:55,660 --> 00:20:04,840
a useful file now another big jump these

00:20:01,810 --> 00:20:08,460
are tools that we need to kind of have

00:20:04,840 --> 00:20:10,600
our head around to be able to create an

00:20:08,460 --> 00:20:15,550
administrative script and that's pretty

00:20:10,600 --> 00:20:18,190
much what what we teach return values

00:20:15,550 --> 00:20:20,920
sometimes call exit status you know

00:20:18,190 --> 00:20:24,970
which book you're reading all commands

00:20:20,920 --> 00:20:30,400
in Linux when they are executed leave a

00:20:24,970 --> 00:20:34,800
return value 0 through 255 typically

00:20:30,400 --> 00:20:37,600
they return values will be 0 or 1

00:20:34,800 --> 00:20:41,890
depends on how the command is ready

00:20:37,600 --> 00:20:44,710
written what the return value might be

00:20:41,890 --> 00:20:48,700
on a failure but the success is always a

00:20:44,710 --> 00:20:51,450
zero if it is a 90 number something went

00:20:48,700 --> 00:20:55,840
wrong with the command this seems like a

00:20:51,450 --> 00:20:58,960
minor thing but it actually is a big

00:20:55,840 --> 00:21:02,110
deal because you can use return values

00:20:58,960 --> 00:21:03,970
in your scripts to figure out if

00:21:02,110 --> 00:21:07,510
something is working or not and then

00:21:03,970 --> 00:21:10,870
correct the problem with additional

00:21:07,510 --> 00:21:13,500
lines of code in your script how do you

00:21:10,870 --> 00:21:16,540
see the return value you will see it

00:21:13,500 --> 00:21:19,690
there is a special variable that

00:21:16,540 --> 00:21:22,570
contains the return value of the

00:21:19,690 --> 00:21:27,460
previous command which is a question

00:21:22,570 --> 00:21:32,980
mark so you echo dollar sign ? and you

00:21:27,460 --> 00:21:39,430
will either see a 0 or a nonzero number

00:21:32,980 --> 00:21:42,520
up to 255 now Caleb asked me to do

00:21:39,430 --> 00:21:46,990
conditional statements so we put that in

00:21:42,520 --> 00:21:50,670
here they're a couple of ways we can

00:21:46,990 --> 00:21:53,410
handle conditional statements which take

00:21:50,670 --> 00:21:57,340
advantage of the return value we just

00:21:53,410 --> 00:22:00,220
talked about it's a way to have two

00:21:57,340 --> 00:22:02,140
commands work together in based on the

00:22:00,220 --> 00:22:04,390
success or failure of the first command

00:22:02,140 --> 00:22:08,900
will determine whether the second

00:22:04,390 --> 00:22:13,350
command works so in this little example

00:22:08,900 --> 00:22:18,600
we create a file called numbers dot txt

00:22:13,350 --> 00:22:21,840
and we want to move that file to a

00:22:18,600 --> 00:22:25,140
directory if that directory exists so in

00:22:21,840 --> 00:22:29,210
the second line of code here we make a

00:22:25,140 --> 00:22:33,690
directory temp boring and then we move

00:22:29,210 --> 00:22:40,280
numbers dot txt to temp boring and it

00:22:33,690 --> 00:22:42,810
will work if Tim boring exists and so

00:22:40,280 --> 00:22:46,290
certainly it exists because we made it

00:22:42,810 --> 00:22:48,660
there with the mkdir command run LS to

00:22:46,290 --> 00:22:51,060
see that the file we created in the

00:22:48,660 --> 00:22:54,210
first line is not in the current working

00:22:51,060 --> 00:22:57,690
directory anymore so it moved that's a

00:22:54,210 --> 00:23:00,870
pretty simple the ends are easier for

00:22:57,690 --> 00:23:04,410
students to understand then the or the

00:23:00,870 --> 00:23:09,330
or is exactly the opposite of that it

00:23:04,410 --> 00:23:12,750
only the second command only runs if the

00:23:09,330 --> 00:23:17,160
first command fails so so in this

00:23:12,750 --> 00:23:21,150
example we make the directory temp

00:23:17,160 --> 00:23:28,110
mostly boring and then move our primes

00:23:21,150 --> 00:23:34,890
text to it and why would that make their

00:23:28,110 --> 00:23:37,080
fail no mostly folder exactly so they

00:23:34,890 --> 00:23:40,800
put a dash p on there what worked but

00:23:37,080 --> 00:23:43,350
they did not so the mostly directory

00:23:40,800 --> 00:23:47,460
does not exist therefore that make there

00:23:43,350 --> 00:23:51,300
is going to fail in the conditions going

00:23:47,460 --> 00:23:57,260
to fail so the return value is not going

00:23:51,300 --> 00:24:00,300
to work to be higher than 0 alright

00:23:57,260 --> 00:24:04,350
here's another example this is a pretty

00:24:00,300 --> 00:24:08,160
good example of a conditional or in that

00:24:04,350 --> 00:24:11,790
it is going to chew monica min if you'd

00:24:08,160 --> 00:24:14,070
rather chamada file if the file exists

00:24:11,790 --> 00:24:18,090
if it does not exist it's going to echo

00:24:14,070 --> 00:24:22,940
an error message and so this is a good

00:24:18,090 --> 00:24:22,940
example of how to use an or conditional

00:24:23,710 --> 00:24:30,920
now one of my favorite commands in

00:24:26,330 --> 00:24:32,900
scripts is the find command it's a

00:24:30,920 --> 00:24:35,150
pretty complicated come in because it

00:24:32,900 --> 00:24:37,550
has three parts you don't have to use

00:24:35,150 --> 00:24:39,650
all three parts but it's very powerful

00:24:37,550 --> 00:24:43,090
come in and I read a lot of other

00:24:39,650 --> 00:24:46,730
people's scripts and I see is it's very

00:24:43,090 --> 00:24:49,040
it's used a lot a lot of people and so

00:24:46,730 --> 00:24:51,890
the three parts to define come in after

00:24:49,040 --> 00:24:56,240
the command itself is a starting point

00:24:51,890 --> 00:24:58,790
for the search some criteria for the

00:24:56,240 --> 00:25:01,520
search in the part that makes the fine

00:24:58,790 --> 00:25:03,290
come in really exciting is the third

00:25:01,520 --> 00:25:06,410
part the action part where you can

00:25:03,290 --> 00:25:12,250
perform a command oh the results of the

00:25:06,410 --> 00:25:17,170
search so you can create really useful

00:25:12,250 --> 00:25:21,800
scripts using the find command so in

00:25:17,170 --> 00:25:23,570
this very simple form in this case we're

00:25:21,800 --> 00:25:27,200
running to find come in on the etsy

00:25:23,570 --> 00:25:29,030
directory the find command has what the

00:25:27,200 --> 00:25:31,490
what we're calling a non-standard

00:25:29,030 --> 00:25:36,170
command-line switch like a lot of

00:25:31,490 --> 00:25:38,930
commands in Linux the options depend on

00:25:36,170 --> 00:25:41,750
the come in and this is a non standard

00:25:38,930 --> 00:25:46,790
format because it only has one hyphen in

00:25:41,750 --> 00:25:49,760
front of it but so looking at the files

00:25:46,790 --> 00:25:52,490
in the SE directory by name I want to

00:25:49,760 --> 00:25:56,270
find all of the files that end in dot

00:25:52,490 --> 00:25:58,340
conf there are other ways to do that but

00:25:56,270 --> 00:26:01,550
that's a way to do it with the find

00:25:58,340 --> 00:26:05,600
command what really makes the find

00:26:01,550 --> 00:26:09,530
command interesting to me is it has

00:26:05,600 --> 00:26:12,710
access to all of the information in the

00:26:09,530 --> 00:26:16,820
files inode so you can use the fine come

00:26:12,710 --> 00:26:20,030
in to dig deep into your file system and

00:26:16,820 --> 00:26:24,710
find commands based on a lot of

00:26:20,030 --> 00:26:29,600
different possibilities and now the

00:26:24,710 --> 00:26:33,020
action part basically just says okay now

00:26:29,600 --> 00:26:35,210
we've found a group of files based on

00:26:33,020 --> 00:26:37,890
the criteria what do you want to do with

00:26:35,210 --> 00:26:39,390
if you don't have an action statement as

00:26:37,890 --> 00:26:42,240
we saw earlier it's just going to list

00:26:39,390 --> 00:26:44,940
the movie to standard out which is not

00:26:42,240 --> 00:26:51,060
too exciting but we can actually execute

00:26:44,940 --> 00:26:56,160
a command on it so this syntax is a

00:26:51,060 --> 00:26:59,580
little bit awkward because you have to

00:26:56,160 --> 00:27:02,250
have a placeholder for the output of the

00:26:59,580 --> 00:27:07,020
find command for the list of files that

00:27:02,250 --> 00:27:09,150
you found and then you do whatever

00:27:07,020 --> 00:27:11,040
you're going to do to them so in this

00:27:09,150 --> 00:27:14,900
example we create a directory called

00:27:11,040 --> 00:27:18,150
Timbuk we look in the etsy directory

00:27:14,900 --> 00:27:21,900
starting in the NC directory for all the

00:27:18,150 --> 00:27:25,260
files that are over 200 k and then we

00:27:21,900 --> 00:27:27,510
exact the CP command to copy those and

00:27:25,260 --> 00:27:30,120
then we have to have the left and right

00:27:27,510 --> 00:27:33,720
brace there as the placeholder for that

00:27:30,120 --> 00:27:36,210
list of files and then we have a second

00:27:33,720 --> 00:27:41,580
argument which is the destination for

00:27:36,210 --> 00:27:44,610
that copy / temp / big now there's one

00:27:41,580 --> 00:27:48,810
other little problem for new guys to

00:27:44,610 --> 00:27:52,550
scripting we have to escape a semicolon

00:27:48,810 --> 00:27:57,060
to terminate that exact which is the

00:27:52,550 --> 00:27:59,340
backslash semicolon you see there and if

00:27:57,060 --> 00:28:01,790
you don't want any error message and

00:27:59,340 --> 00:28:04,740
stuff you can dump those off to dev null

00:28:01,790 --> 00:28:06,780
which we haven't discussed standard

00:28:04,740 --> 00:28:10,950
error but that's what the two greater

00:28:06,780 --> 00:28:15,600
then is there is sending any error

00:28:10,950 --> 00:28:19,170
messages off no so that's just a quick

00:28:15,600 --> 00:28:21,000
example of the fine come in another

00:28:19,170 --> 00:28:23,490
problem or a theme that we have to

00:28:21,000 --> 00:28:26,310
consider when we're doing scripts is how

00:28:23,490 --> 00:28:29,130
do we get variable values into the

00:28:26,310 --> 00:28:31,890
script there's basically two ways to do

00:28:29,130 --> 00:28:33,600
that we can do it with positional

00:28:31,890 --> 00:28:37,040
parameters which is the quick and dirty

00:28:33,600 --> 00:28:40,440
way or we can make the scrip interact it

00:28:37,040 --> 00:28:43,610
in my scripts I'm pretty much doing

00:28:40,440 --> 00:28:47,220
things the quick and dirty way and

00:28:43,610 --> 00:28:48,720
positional parameters basically another

00:28:47,220 --> 00:28:52,830
way of saying that is

00:28:48,720 --> 00:28:58,700
we use arguments to send values to

00:28:52,830 --> 00:29:02,429
variables that we have in the script so

00:28:58,700 --> 00:29:06,210
we can have this this actually works

00:29:02,429 --> 00:29:08,400
pretty good up in 29 until you hit more

00:29:06,210 --> 00:29:11,179
than 9 variables if you have a lot of

00:29:08,400 --> 00:29:14,059
variables it gets much more complicated

00:29:11,179 --> 00:29:18,600
but one through nine works pretty well

00:29:14,059 --> 00:29:22,710
so dollar signs 0 in a positional

00:29:18,600 --> 00:29:28,590
variable is actually the name of the

00:29:22,710 --> 00:29:31,260
script 1 through 9 or up to 9 arguments

00:29:28,590 --> 00:29:33,510
after the name of the script you have

00:29:31,260 --> 00:29:35,700
more than nine you have to do a Google

00:29:33,510 --> 00:29:40,159
search on the shift come in which is

00:29:35,700 --> 00:29:43,650
very close eee the other way to feed

00:29:40,159 --> 00:29:45,600
values into the variables is to make

00:29:43,650 --> 00:29:48,679
your scrip interactive where the user

00:29:45,600 --> 00:29:54,000
can actually be prompted for values in

00:29:48,679 --> 00:30:00,059
then based on their response the values

00:29:54,000 --> 00:30:02,610
are passed to the to the variables this

00:30:00,059 --> 00:30:07,850
is very common in programming and it can

00:30:02,610 --> 00:30:10,380
be done very easily in script writing

00:30:07,850 --> 00:30:13,350
definitely want to prompt you don't have

00:30:10,380 --> 00:30:16,950
to it's not a default you want to prompt

00:30:13,350 --> 00:30:19,830
you can do creative things like hide the

00:30:16,950 --> 00:30:22,890
response for password fields you can

00:30:19,830 --> 00:30:25,020
timeout after so much so many seconds

00:30:22,890 --> 00:30:30,030
that kind of thing and also populate a

00:30:25,020 --> 00:30:32,600
raised with the read command so another

00:30:30,030 --> 00:30:35,190
thing that is important you may want to

00:30:32,600 --> 00:30:38,039
protect data so that it can't be

00:30:35,190 --> 00:30:41,460
clobbered so you can also use read-only

00:30:38,039 --> 00:30:44,220
in addition to read so in this little

00:30:41,460 --> 00:30:48,510
example we are trying to collect the zip

00:30:44,220 --> 00:30:52,110
code we use Dash P to prompt for zip

00:30:48,510 --> 00:30:55,289
code we echo the value of the zip code

00:30:52,110 --> 00:30:59,460
in the third line we make the zip code

00:30:55,289 --> 00:31:01,110
read-only in the fourth line just to

00:30:59,460 --> 00:31:04,650
prove that read only works

00:31:01,110 --> 00:31:09,809
we try to change it in the echo zip code

00:31:04,650 --> 00:31:13,920
and record zip and we'll see that it was

00:31:09,809 --> 00:31:16,230
not changed hey this is the last of

00:31:13,920 --> 00:31:19,500
these tools that I think we need to have

00:31:16,230 --> 00:31:22,530
our head around to script and you know

00:31:19,500 --> 00:31:26,760
all the scripts in the world have to run

00:31:22,530 --> 00:31:28,350
one thing that we we like to do is not

00:31:26,760 --> 00:31:31,380
be around when a lot of this

00:31:28,350 --> 00:31:33,450
administrative stuff is done so crime

00:31:31,380 --> 00:31:38,610
taps are important just a scheduled task

00:31:33,450 --> 00:31:40,950
and I'm a big user of crime taps I show

00:31:38,610 --> 00:31:42,990
my students some of the servers i

00:31:40,950 --> 00:31:45,750
administer and have hundreds of crime

00:31:42,990 --> 00:31:48,330
debts and them or crying statements in

00:31:45,750 --> 00:31:50,730
them and it seems a little bit silly but

00:31:48,330 --> 00:31:55,650
you can do so many different things with

00:31:50,730 --> 00:31:58,350
it so understand how to enter a crime

00:31:55,650 --> 00:32:01,110
statement we could talk probably 30

00:31:58,350 --> 00:32:05,250
minutes about crime by itself it's very

00:32:01,110 --> 00:32:07,350
flexible very powerful tool and there's

00:32:05,250 --> 00:32:10,429
a number of ways to run crimes very

00:32:07,350 --> 00:32:15,090
matures been in Linux since day one

00:32:10,429 --> 00:32:18,990
here's a just a simple crontab could be

00:32:15,090 --> 00:32:22,010
for rude or for any user and based on

00:32:18,990 --> 00:32:25,559
the values of the first five columns

00:32:22,010 --> 00:32:29,040
determines when a particular crime

00:32:25,559 --> 00:32:32,309
statement is going to run so I bring

00:32:29,040 --> 00:32:36,030
that up as a tool that you need to get

00:32:32,309 --> 00:32:39,720
your head around so with all of that how

00:32:36,030 --> 00:32:42,150
do we put it to work well I talked to

00:32:39,720 --> 00:32:45,179
several people about this presentation

00:32:42,150 --> 00:32:50,130
that I know some of them are in the room

00:32:45,179 --> 00:32:53,760
here you can make a create a lot of very

00:32:50,130 --> 00:32:55,590
useful scripts and never do any

00:32:53,760 --> 00:32:58,679
branching or looping or anything like

00:32:55,590 --> 00:33:02,250
that but this is where you introduce

00:32:58,679 --> 00:33:07,140
programming logic to what otherwise is

00:33:02,250 --> 00:33:10,470
just a list of commands and so this is

00:33:07,140 --> 00:33:12,809
where we make it really smart and so

00:33:10,470 --> 00:33:14,520
there's want to go over some syntax here

00:33:12,809 --> 00:33:16,170
on how to create a branch

00:33:14,520 --> 00:33:20,430
some people call those decisions

00:33:16,170 --> 00:33:23,370
statements and also some basic loops so

00:33:20,430 --> 00:33:26,910
we probably all heard of if then else

00:33:23,370 --> 00:33:29,880
statements or if then statements we can

00:33:26,910 --> 00:33:33,960
do those in Linux without any big

00:33:29,880 --> 00:33:37,350
problem the syntax is a little different

00:33:33,960 --> 00:33:40,740
than other languages too close an if

00:33:37,350 --> 00:33:44,250
statement the last key word is feet

00:33:40,740 --> 00:33:46,560
which is if spell backwards all of these

00:33:44,250 --> 00:33:50,070
statements see you reverse the first

00:33:46,560 --> 00:33:53,610
keyword to close the statement so the

00:33:50,070 --> 00:33:55,620
syntax is fairly straight up the hardest

00:33:53,610 --> 00:33:57,720
part about if then or if then else

00:33:55,620 --> 00:33:59,460
statement is to remember to put some

00:33:57,720 --> 00:34:05,160
carriage returns in it to make it work

00:33:59,460 --> 00:34:09,419
right so to open a if statement if a

00:34:05,160 --> 00:34:12,060
certain condition exists then do these

00:34:09,419 --> 00:34:15,330
commands when that condition doesn't

00:34:12,060 --> 00:34:18,659
exist anymore finish so that's just an

00:34:15,330 --> 00:34:21,270
if-then and then if then else if this

00:34:18,659 --> 00:34:24,000
condition exists do these statements but

00:34:21,270 --> 00:34:27,630
if it does not exist else do these

00:34:24,000 --> 00:34:31,500
statements and that makes it even more

00:34:27,630 --> 00:34:33,570
powerful now the carriage returns are

00:34:31,500 --> 00:34:36,570
very important you have to put a

00:34:33,570 --> 00:34:39,380
carriage return after the condition then

00:34:36,570 --> 00:34:43,020
has to be on a separate line by itself

00:34:39,380 --> 00:34:46,380
now all that's well and good the real

00:34:43,020 --> 00:34:50,130
power in the if statement is on the

00:34:46,380 --> 00:34:53,810
condition other programming languages

00:34:50,130 --> 00:34:57,780
use comparative syntax things like that

00:34:53,810 --> 00:35:02,040
bash makes this real easy for us because

00:34:57,780 --> 00:35:05,040
all we have to do is run a linux command

00:35:02,040 --> 00:35:09,750
as the condition so it can be just about

00:35:05,040 --> 00:35:12,210
anything for the condition any command

00:35:09,750 --> 00:35:15,450
can be used for a condition some books

00:35:12,210 --> 00:35:17,640
called the condition the list it depends

00:35:15,450 --> 00:35:21,480
on what the condition is I think to

00:35:17,640 --> 00:35:24,900
where there's a list or not and then

00:35:21,480 --> 00:35:27,460
based on the return value of that

00:35:24,900 --> 00:35:31,690
condition it will determine whether

00:35:27,460 --> 00:35:34,930
the first or second stanza before or

00:35:31,690 --> 00:35:37,119
after the else actually runs so that's

00:35:34,930 --> 00:35:42,300
why the returned values so important to

00:35:37,119 --> 00:35:46,390
understand now there is an else if

00:35:42,300 --> 00:35:50,560
clause in bash shell which a lot of

00:35:46,390 --> 00:35:53,589
people like basically that extends the

00:35:50,560 --> 00:35:55,750
if statement personally I use something

00:35:53,589 --> 00:35:59,920
different i use a case statement instead

00:35:55,750 --> 00:36:02,770
of this but if you want to basically

00:35:59,920 --> 00:36:07,030
have and if inside and if this is one

00:36:02,770 --> 00:36:09,940
way to do it so if the list exists then

00:36:07,030 --> 00:36:12,369
do the first stanza else if look at the

00:36:09,940 --> 00:36:15,270
second list and do that stanza neither

00:36:12,369 --> 00:36:18,820
one of those work then do the elves and

00:36:15,270 --> 00:36:21,430
so you can see it starts getting more

00:36:18,820 --> 00:36:25,750
complicated and certainly you can nest

00:36:21,430 --> 00:36:29,080
if inside if for as long as you have

00:36:25,750 --> 00:36:33,750
patience I guess and try to do it that

00:36:29,080 --> 00:36:38,470
way as well so a simple if statement

00:36:33,750 --> 00:36:40,839
using a positional parameter here we're

00:36:38,470 --> 00:36:43,030
catting a little bash shell here you can

00:36:40,839 --> 00:36:45,970
see that we have the shebang in the

00:36:43,030 --> 00:36:49,150
first line identify the interpreter I

00:36:45,970 --> 00:36:52,089
didn't say anything about comments we

00:36:49,150 --> 00:36:54,550
found our students on that in school we

00:36:52,089 --> 00:36:56,790
want well commented scripts which most

00:36:54,550 --> 00:37:02,859
people don't do that including myself

00:36:56,790 --> 00:37:04,720
but if there's a pound sign in the first

00:37:02,859 --> 00:37:10,270
character of a line then that's a

00:37:04,720 --> 00:37:15,940
comment so in this little if then else

00:37:10,270 --> 00:37:18,250
statement if this dollar sign one in

00:37:15,940 --> 00:37:21,339
other words we want to list whatever the

00:37:18,250 --> 00:37:24,310
first argument is in this script if it

00:37:21,339 --> 00:37:27,160
succeeds if the LS command succeeds and

00:37:24,310 --> 00:37:31,869
we get a zero on the return value then

00:37:27,160 --> 00:37:34,560
to mod that particular file else we say

00:37:31,869 --> 00:37:37,760
the file dollar sign one does not exist

00:37:34,560 --> 00:37:42,060
so that's a real good example of

00:37:37,760 --> 00:37:44,369
how you can use the else clause most

00:37:42,060 --> 00:37:45,720
people get into that pretty fast and

00:37:44,369 --> 00:37:49,010
understand it once they play with a

00:37:45,720 --> 00:37:51,780
little bit now I do have one other

00:37:49,010 --> 00:37:58,890
command which is not really a construct

00:37:51,780 --> 00:38:01,680
but the test command is really really

00:37:58,890 --> 00:38:03,240
popular this is a command that you can

00:38:01,680 --> 00:38:07,050
use for the condition on the if

00:38:03,240 --> 00:38:10,320
statement and it does just what the name

00:38:07,050 --> 00:38:13,619
implies it tests what makes the test

00:38:10,320 --> 00:38:16,440
command special is it doesn't return

00:38:13,619 --> 00:38:20,030
anything there's nothing return to

00:38:16,440 --> 00:38:23,310
standard out all it does is change the

00:38:20,030 --> 00:38:27,140
return value so if you want to test to

00:38:23,310 --> 00:38:29,970
see if a file exists or test to see of a

00:38:27,140 --> 00:38:32,940
directory exists or whatever the test

00:38:29,970 --> 00:38:37,680
command is a quick and dirty way to do

00:38:32,940 --> 00:38:41,580
that so in this example it's basically

00:38:37,680 --> 00:38:44,040
the same example before you noticed in

00:38:41,580 --> 00:38:47,520
the output in the previous run eldest

00:38:44,040 --> 00:38:51,840
script we had an error message come out

00:38:47,520 --> 00:38:55,920
of LS and that looked kind of sloppy so

00:38:51,840 --> 00:38:58,830
use the test command if if test or the

00:38:55,920 --> 00:39:00,510
existence of dollar sign one just

00:38:58,830 --> 00:39:03,540
changed the condition here the rest of

00:39:00,510 --> 00:39:09,990
the script is the same then all we see

00:39:03,540 --> 00:39:13,530
for the return on the else Clause is the

00:39:09,990 --> 00:39:17,490
string the file foo in this case does

00:39:13,530 --> 00:39:20,160
not exist so makes it nice and neat test

00:39:17,490 --> 00:39:24,720
has a lot of options which allows you to

00:39:20,160 --> 00:39:28,350
do a lot of creative things now loops

00:39:24,720 --> 00:39:30,090
you want to scare new students to Linux

00:39:28,350 --> 00:39:33,300
start talking about loops they get real

00:39:30,090 --> 00:39:36,720
crazy about it but loops are usually

00:39:33,300 --> 00:39:40,560
important in scripting basically it's a

00:39:36,720 --> 00:39:42,270
way to run a group of statements based

00:39:40,560 --> 00:39:45,690
on the condition until that condition

00:39:42,270 --> 00:39:48,240
changes and so every time you go through

00:39:45,690 --> 00:39:50,630
those statements you iterate or go

00:39:48,240 --> 00:39:53,059
through a loop iteration

00:39:50,630 --> 00:39:55,400
use loops for things like reading files

00:39:53,059 --> 00:39:59,900
line by line hugely important in

00:39:55,400 --> 00:40:02,029
scripting if we had time we could go

00:39:59,900 --> 00:40:05,599
into how to design menu systems with

00:40:02,029 --> 00:40:07,640
loops perform a number of tests count

00:40:05,599 --> 00:40:10,180
items there are a lot of things you can

00:40:07,640 --> 00:40:14,750
do with the loop probably the most

00:40:10,180 --> 00:40:19,009
recognizable loop is a for loop for a

00:40:14,750 --> 00:40:21,619
certain set of variables goes from

00:40:19,009 --> 00:40:25,609
starting value to an ending value then

00:40:21,619 --> 00:40:28,640
perform a list of statements or a list

00:40:25,609 --> 00:40:31,849
of commands be sure and increment or D

00:40:28,640 --> 00:40:37,779
increment your iterator in a for loop

00:40:31,849 --> 00:40:41,509
and then go through again while loop is

00:40:37,779 --> 00:40:44,869
similar but different while a particular

00:40:41,509 --> 00:40:46,930
condition is true do it the loop and

00:40:44,869 --> 00:40:51,319
then once that condition is not true

00:40:46,930 --> 00:40:54,470
come out of the loop the until loop is

00:40:51,319 --> 00:40:57,049
the opposite of a while loop while the

00:40:54,470 --> 00:41:02,029
condition is false do the statements if

00:40:57,049 --> 00:41:06,160
the condition becomes true then break

00:41:02,029 --> 00:41:08,930
out of the loop so each time through a

00:41:06,160 --> 00:41:10,670
loop through a group of commands that's

00:41:08,930 --> 00:41:13,309
called an iteration or cycle through

00:41:10,670 --> 00:41:16,250
that loop and there's some creative

00:41:13,309 --> 00:41:22,099
things that you can do with iterators as

00:41:16,250 --> 00:41:26,539
well so the syntax for the for statement

00:41:22,099 --> 00:41:29,660
in bash shell scripting start the start

00:41:26,539 --> 00:41:34,069
the loop with the for statement define

00:41:29,660 --> 00:41:37,910
your iterator the keyword in has to be

00:41:34,069 --> 00:41:40,369
there and then a list then do needs to

00:41:37,910 --> 00:41:45,980
be on a separate line a list of commands

00:41:40,369 --> 00:41:51,829
and then in so that would be a very

00:41:45,980 --> 00:41:56,869
basically examples of what the iterator

00:41:51,829 --> 00:42:00,319
could be could be for example the

00:41:56,869 --> 00:42:02,170
iterator could be a scripts arguments

00:42:00,319 --> 00:42:04,850
dollar sign

00:42:02,170 --> 00:42:08,750
asterisks would go through all of the

00:42:04,850 --> 00:42:12,080
arguments in the in the command line for

00:42:08,750 --> 00:42:14,240
the script another example might be for

00:42:12,080 --> 00:42:17,470
all the files in the SE directory that

00:42:14,240 --> 00:42:20,120
didn't cough the bottom one there is

00:42:17,470 --> 00:42:23,030
really interesting because that's an

00:42:20,120 --> 00:42:25,010
example of command substitution which I

00:42:23,030 --> 00:42:29,590
think Caleb's going to do in the second

00:42:25,010 --> 00:42:35,030
class today and so you use commands as a

00:42:29,590 --> 00:42:36,710
iterator as well so I think it's

00:42:35,030 --> 00:42:39,230
mandatory that you learn how to count

00:42:36,710 --> 00:42:42,380
when you talk about loops so here's a

00:42:39,230 --> 00:42:46,600
little loop that we use in class to

00:42:42,380 --> 00:42:49,520
count we're using the test command and

00:42:46,600 --> 00:42:53,600
notice we have our shebang up there

00:42:49,520 --> 00:42:57,140
definer our interpreter we start the

00:42:53,600 --> 00:43:00,130
loop we test for the first argument see

00:42:57,140 --> 00:43:05,330
if it's greater than or equal to 10 then

00:43:00,130 --> 00:43:08,840
we have an a a loop that is nested

00:43:05,330 --> 00:43:11,720
inside the if statement and notice the

00:43:08,840 --> 00:43:14,510
syntax changed a little bit here this is

00:43:11,720 --> 00:43:17,750
typical of how for loops written now you

00:43:14,510 --> 00:43:22,780
initialize the iterator one or excuse me

00:43:17,750 --> 00:43:26,030
I equals 0 set up how you're going to

00:43:22,780 --> 00:43:28,040
compare the iterator and then increment

00:43:26,030 --> 00:43:30,680
iterator so you get three parts that's

00:43:28,040 --> 00:43:32,960
kind of a shorthand way of setting up

00:43:30,680 --> 00:43:34,550
the for loop then go through the

00:43:32,960 --> 00:43:37,250
statements which is just an echo

00:43:34,550 --> 00:43:40,700
statement come out of that when the

00:43:37,250 --> 00:43:44,180
condition does not exist and if the

00:43:40,700 --> 00:43:47,390
argument is not equal to or greater than

00:43:44,180 --> 00:43:51,520
10 which is the intent of this loop then

00:43:47,390 --> 00:43:53,990
there's an error message so it works

00:43:51,520 --> 00:43:58,880
this is kind of how we teach this stuff

00:43:53,990 --> 00:44:01,640
in school we show the script then we run

00:43:58,880 --> 00:44:05,060
the script notice that the argument for

00:44:01,640 --> 00:44:10,220
the sample loop script is 20 so we count

00:44:05,060 --> 00:44:14,910
to 20 not too sexy but it does show you

00:44:10,220 --> 00:44:17,280
how the loop works now this to me is

00:44:14,910 --> 00:44:22,619
really important because if you're going

00:44:17,280 --> 00:44:24,740
to be successful with your ministry of

00:44:22,619 --> 00:44:28,770
scripts you've got to be able to read a

00:44:24,740 --> 00:44:34,910
file into your script and we do that

00:44:28,770 --> 00:44:38,309
with a while loop in the read command so

00:44:34,910 --> 00:44:40,109
while read some variable name there's

00:44:38,309 --> 00:44:42,750
nothing magic about my file you'll see

00:44:40,109 --> 00:44:46,890
we didn't use that in the example in a

00:44:42,750 --> 00:44:51,299
minute but so while read some variable

00:44:46,890 --> 00:44:55,260
name do an echo basically echo that

00:44:51,299 --> 00:44:58,859
variable and then duns very simple and

00:44:55,260 --> 00:45:02,940
you redirect standard in whatever file

00:44:58,859 --> 00:45:05,730
that you are trying to read into the end

00:45:02,940 --> 00:45:07,530
of this loop that is the most peculiar

00:45:05,730 --> 00:45:12,559
part of the syntax is that the

00:45:07,530 --> 00:45:17,430
redirections at the bottom so here is a

00:45:12,559 --> 00:45:22,970
little example of this I want to read

00:45:17,430 --> 00:45:26,640
the NC passwd file into the script the

00:45:22,970 --> 00:45:31,230
variable name is input line notice that

00:45:26,640 --> 00:45:34,200
we are trying to we will cut the user

00:45:31,230 --> 00:45:38,520
name and cut the home directory out of

00:45:34,200 --> 00:45:40,380
the etsy passwd file and while we have

00:45:38,520 --> 00:45:44,190
those values we're just going to run

00:45:40,380 --> 00:45:48,990
echo statement to regurgitate that

00:45:44,190 --> 00:45:51,450
information to standard out so in an

00:45:48,990 --> 00:45:54,630
example of several of the things we've

00:45:51,450 --> 00:45:59,910
run over here very quickly today so it

00:45:54,630 --> 00:46:02,460
does work we run the script we notice i

00:45:59,910 --> 00:46:05,089
piped it into more so that I would get a

00:46:02,460 --> 00:46:07,829
full screen here then I cut it out

00:46:05,089 --> 00:46:14,220
because it was too long to put in slide

00:46:07,829 --> 00:46:16,740
but anyway it does work how do you

00:46:14,220 --> 00:46:20,190
terminate a loop this is another

00:46:16,740 --> 00:46:22,170
question that comes up there's a break

00:46:20,190 --> 00:46:24,569
command to break out of a loop if

00:46:22,170 --> 00:46:26,520
something goes wrong you want to break

00:46:24,569 --> 00:46:29,220
out of a loop you don't want to infinite

00:46:26,520 --> 00:46:31,800
loop that's a big problem in programming

00:46:29,220 --> 00:46:34,650
so this is just another example notice

00:46:31,800 --> 00:46:37,080
the if-then statement at the bottom

00:46:34,650 --> 00:46:39,359
which is a testing for a certain

00:46:37,080 --> 00:46:44,550
condition to break out of this while

00:46:39,359 --> 00:46:46,349
loop all right this is going to take

00:46:44,550 --> 00:46:49,380
forever but I'm flying through it here

00:46:46,349 --> 00:46:51,660
too much coffee this morning so I

00:46:49,380 --> 00:46:54,480
thought that you know to wrap this thing

00:46:51,660 --> 00:46:56,369
up I would just show you some scripts

00:46:54,480 --> 00:46:58,530
off of some servers that I run and

00:46:56,369 --> 00:47:01,950
there's nothing I mean these scripts are

00:46:58,530 --> 00:47:05,660
written for me so they're really not

00:47:01,950 --> 00:47:11,630
prepared for public consumption but just

00:47:05,660 --> 00:47:14,640
an example of a script is T 190 is our

00:47:11,630 --> 00:47:16,710
introductory essentials class in Linux

00:47:14,640 --> 00:47:18,540
and on the first day of class they don't

00:47:16,710 --> 00:47:20,490
know what they're doing and I want to

00:47:18,540 --> 00:47:22,320
give them access to a server where they

00:47:20,490 --> 00:47:25,500
can tinker around at the command prompt

00:47:22,320 --> 00:47:27,119
but I don't want that information to

00:47:25,500 --> 00:47:29,400
stay on that server so I want to blow up

00:47:27,119 --> 00:47:31,460
that account and rebuild it and that's

00:47:29,400 --> 00:47:35,190
basically what this little script does

00:47:31,460 --> 00:47:39,510
so as is using some of the commands that

00:47:35,190 --> 00:47:43,589
I mentioned at the beginning and even

00:47:39,510 --> 00:47:45,450
looked at this script since 2014 but the

00:47:43,589 --> 00:47:49,380
you see I've had it a while I like to

00:47:45,450 --> 00:47:51,240
put a history of a scrip on the end of

00:47:49,380 --> 00:47:55,760
file because I forget what I do most of

00:47:51,240 --> 00:47:59,040
the time but you can see that we are

00:47:55,760 --> 00:48:03,119
owning the files and select root root on

00:47:59,040 --> 00:48:07,410
the user account for a second we remove

00:48:03,119 --> 00:48:10,859
the home directory we copy a fake

00:48:07,410 --> 00:48:14,250
skeleton to it not using the scale but

00:48:10,859 --> 00:48:18,150
something else I created for the student

00:48:14,250 --> 00:48:21,359
to have and then showing it back to the

00:48:18,150 --> 00:48:23,760
student to group it for the student yes

00:48:21,359 --> 00:48:27,060
there's a way to do it you own and it's

00:48:23,760 --> 00:48:28,609
a group in one line but I was I don't

00:48:27,060 --> 00:48:30,839
know why I did it this way but it did

00:48:28,609 --> 00:48:34,650
probably the hardest thing about this

00:48:30,839 --> 00:48:38,310
script was setting the password from the

00:48:34,650 --> 00:48:43,109
command prompt so echo the password into

00:48:38,310 --> 00:48:46,470
through a pipe into the passwd in me

00:48:43,109 --> 00:48:50,009
the interesting thing here is there is a

00:48:46,470 --> 00:48:53,999
switch on passwd to accept from standard

00:48:50,009 --> 00:48:56,369
in so that was kind of nice and we

00:48:53,999 --> 00:48:58,920
haven't mentioned logger i log

00:48:56,369 --> 00:49:04,829
everything because i'm paranoid that

00:48:58,920 --> 00:49:07,289
things don't run so logger just sins

00:49:04,829 --> 00:49:11,849
whatever that text string is after

00:49:07,289 --> 00:49:16,440
logger to the message file and then we

00:49:11,849 --> 00:49:19,380
echo at the bottom basically this goes

00:49:16,440 --> 00:49:23,220
to standard out for the script which is

00:49:19,380 --> 00:49:27,049
emailed to the root of this server which

00:49:23,220 --> 00:49:32,579
is me basically says this script was run

00:49:27,049 --> 00:49:34,980
that's a function of the crontab the

00:49:32,579 --> 00:49:39,749
reason I put this little strip in here

00:49:34,980 --> 00:49:43,289
is that I created a website called geek

00:49:39,749 --> 00:49:49,019
glossary com a long time ago last summer

00:49:43,289 --> 00:49:51,869
I rewrote it in PHP in my sequel as kind

00:49:49,019 --> 00:49:55,769
of a summer thing I was teaching a PHP

00:49:51,869 --> 00:49:58,499
class and I wanted to backup the data i

00:49:55,769 --> 00:50:02,430
got about 24,000 terms in this database

00:49:58,499 --> 00:50:05,519
and so I wrote a PHP file to actually

00:50:02,430 --> 00:50:08,549
create the backup but I needed a way to

00:50:05,519 --> 00:50:11,849
run it on the server so I wrote a bad

00:50:08,549 --> 00:50:15,839
shell script to run the backup

00:50:11,849 --> 00:50:20,579
underscore data PHP file this is only

00:50:15,839 --> 00:50:26,130
noteworthy because it's a way to do to

00:50:20,579 --> 00:50:30,779
run a PHP script or a file from bash I'm

00:50:26,130 --> 00:50:32,420
a big fan of W get Zack Underwood in the

00:50:30,779 --> 00:50:36,480
audience one of our former students

00:50:32,420 --> 00:50:39,480
who's done very well very proud of Zack

00:50:36,480 --> 00:50:41,910
used to actually show me w get the first

00:50:39,480 --> 00:50:44,160
time that was it is like a Swiss Army

00:50:41,910 --> 00:50:48,720
knife it does all kinds of things great

00:50:44,160 --> 00:50:51,720
command and I also like to the third

00:50:48,720 --> 00:50:54,539
line there I like to send myself emails

00:50:51,720 --> 00:50:56,460
I got about 300 emails a day and just

00:50:54,539 --> 00:50:59,839
sends an email to me that this thing

00:50:56,460 --> 00:51:03,690
ran so I don't have to worry about it

00:50:59,839 --> 00:51:06,060
now let's see this is the reason I chose

00:51:03,690 --> 00:51:10,470
this script this is what our first

00:51:06,060 --> 00:51:14,190
scripts ever wrote and I use it all the

00:51:10,470 --> 00:51:15,690
time because I screw up ownership sand

00:51:14,190 --> 00:51:19,200
permissions on my web server all the

00:51:15,690 --> 00:51:22,710
time my main web server so I wrote a

00:51:19,200 --> 00:51:26,130
script in 2009 kind of been massaging it

00:51:22,710 --> 00:51:28,950
ever since then notice there's no heavy

00:51:26,130 --> 00:51:30,420
duty branching or looping in any of

00:51:28,950 --> 00:51:34,710
these scripts it's just a bunch of

00:51:30,420 --> 00:51:38,070
commands but I use logger I use the find

00:51:34,710 --> 00:51:41,760
command the find command pulls out all

00:51:38,070 --> 00:51:43,890
the files and sets the permissions for

00:51:41,760 --> 00:51:46,980
those all the directory sets the

00:51:43,890 --> 00:51:53,180
permissions for those changes the user

00:51:46,980 --> 00:51:58,890
and owner and does a little bit with a

00:51:53,180 --> 00:52:01,109
well it puts some messages in the in the

00:51:58,890 --> 00:52:02,820
message file when it starts and when it

00:52:01,109 --> 00:52:06,420
finishes so I can kind of see how long

00:52:02,820 --> 00:52:09,960
it takes that kind of thing and works

00:52:06,420 --> 00:52:12,210
pretty good so I jumped out a piece of

00:52:09,960 --> 00:52:15,000
this file because it had some stuff a

00:52:12,210 --> 00:52:17,310
student wanted me to do for them and I

00:52:15,000 --> 00:52:19,920
didn't think it was really helpful so

00:52:17,310 --> 00:52:21,839
that's why there's a big gap in there so

00:52:19,920 --> 00:52:24,690
I guess we're pretty close to own time

00:52:21,839 --> 00:52:27,690
are they any questions I know I went

00:52:24,690 --> 00:52:41,640
through a bunch of stuff fast but that's

00:52:27,690 --> 00:52:49,349
45 hours and 50 minutes okay well they

00:52:41,640 --> 00:52:52,619
should be the same yeah concern these

00:52:49,349 --> 00:52:54,359
days and security of programming you can

00:52:52,619 --> 00:52:57,150
of course that's mostly referring to

00:52:54,359 --> 00:52:58,530
like see if I florianópolis is there

00:52:57,150 --> 00:53:02,040
anything that we need to be concerned

00:52:58,530 --> 00:53:04,140
about how to keeping our scripts secure

00:53:02,040 --> 00:53:06,480
I wouldn't recommend showing them to a

00:53:04,140 --> 00:53:09,420
bunch of people at linux fast that's not

00:53:06,480 --> 00:53:11,819
real secure I thought about that after I

00:53:09,420 --> 00:53:16,920
did all this as uh it could be a Russian

00:53:11,819 --> 00:53:18,569
spy in here but I didn't repeat the

00:53:16,920 --> 00:53:21,599
lady's question in the back she was

00:53:18,569 --> 00:53:23,520
asking about the syntax for more whether

00:53:21,599 --> 00:53:25,829
to use a pipe or not use a pipe and you

00:53:23,520 --> 00:53:28,740
can go either way with that in the

00:53:25,829 --> 00:53:31,770
fellow up front here we get him on the

00:53:28,740 --> 00:53:36,240
podcast or whatever we're doing YouTube

00:53:31,770 --> 00:53:42,240
guests okay so security own shell

00:53:36,240 --> 00:53:45,150
scripts not like the other languages

00:53:42,240 --> 00:53:47,040
you're talking about I don't I've not

00:53:45,150 --> 00:53:49,200
read anything about that I've not had

00:53:47,040 --> 00:53:53,640
any issues myself so I guess I'm not a

00:53:49,200 --> 00:53:55,170
good person to ask that question there

00:53:53,640 --> 00:53:57,420
are a lot of scripts on the internet

00:53:55,170 --> 00:53:59,250
that people share I'd be very careful

00:53:57,420 --> 00:54:00,510
about that make sure you use any of

00:53:59,250 --> 00:54:05,730
those you know exactly what they're

00:54:00,510 --> 00:54:09,960
doing because they may get you anything

00:54:05,730 --> 00:54:12,869
else alright so I want to give you a

00:54:09,960 --> 00:54:15,510
couple of things here most of this

00:54:12,869 --> 00:54:17,099
material that I very quickly went

00:54:15,510 --> 00:54:19,440
through came out of some courses for

00:54:17,099 --> 00:54:22,859
Medhat Academy hopefully they won't mind

00:54:19,440 --> 00:54:25,290
me sharing a few screenshots I found a

00:54:22,859 --> 00:54:28,290
book years ago that I like own shell

00:54:25,290 --> 00:54:30,420
scripting and hasn't been updated he

00:54:28,290 --> 00:54:32,130
came at a long time ago fellows in

00:54:30,420 --> 00:54:34,470
Atlanta teaches school in the community

00:54:32,130 --> 00:54:36,740
college like me it's maybe that's why I

00:54:34,470 --> 00:54:41,010
like it but it's a very simple book and

00:54:36,740 --> 00:54:46,109
we've used that for years so I suggest

00:54:41,010 --> 00:54:48,890
those to you being a first-time speaker

00:54:46,109 --> 00:54:51,359
itself I didn't know exactly the the

00:54:48,890 --> 00:54:52,950
protocol for distributing slides I

00:54:51,359 --> 00:54:55,380
always make slides available to my

00:54:52,950 --> 00:54:58,380
students so if you want these for any

00:54:55,380 --> 00:55:00,480
reason you can download them you would

00:54:58,380 --> 00:55:03,089
like a resource list there's an

00:55:00,480 --> 00:55:07,010
autoresponder at cell 15 Oh sanders dot

00:55:03,089 --> 00:55:09,690
org it gives you links to this stuff

00:55:07,010 --> 00:55:12,630
plus there's a list of about ten

00:55:09,690 --> 00:55:15,359
textbooks own bash shell scripting that

00:55:12,630 --> 00:55:18,420
you might find helpful so with that I

00:55:15,359 --> 00:55:20,849
appreciate your attendance on what's not

00:55:18,420 --> 00:55:23,510
the sexiest talk we've had here but it

00:55:20,849 --> 00:55:23,510
was for stuff

00:55:56,460 --> 00:56:00,850
Citrix XenServer gives you everything

00:55:58,660 --> 00:56:03,820
you need to integrate manage and

00:56:00,850 --> 00:56:05,950
automate a virtual data center all on an

00:56:03,820 --> 00:56:08,350
enterprise-class cloud proven virtual

00:56:05,950 --> 00:56:11,080
platform and at a third of the cost of

00:56:08,350 --> 00:56:12,790
other solutions but why even bother with

00:56:11,080 --> 00:56:14,950
virtualizing your server infrastructure

00:56:12,790 --> 00:56:16,930
in the first place well let's say you

00:56:14,950 --> 00:56:19,210
have a traditional one server to one

00:56:16,930 --> 00:56:21,220
application architecture but you're

00:56:19,210 --> 00:56:23,770
running out of resources and performance

00:56:21,220 --> 00:56:26,100
is suffering once you order new server

00:56:23,770 --> 00:56:28,990
hardware you'll wait for delivery

00:56:26,100 --> 00:56:31,840
configure it install your business

00:56:28,990 --> 00:56:34,630
application stage and test the server

00:56:31,840 --> 00:56:36,820
and finally add it to your production

00:56:34,630 --> 00:56:39,010
farm if you've been through this process

00:56:36,820 --> 00:56:41,530
before you know it can take weeks or

00:56:39,010 --> 00:56:43,360
even months you also know it's a

00:56:41,530 --> 00:56:45,250
manually intensive process that will

00:56:43,360 --> 00:56:48,520
burden your team every time you outgrow

00:56:45,250 --> 00:56:50,320
your current setup with a virtual server

00:56:48,520 --> 00:56:53,110
solution you could accomplish all of

00:56:50,320 --> 00:56:55,660
that in less than half a day server

00:56:53,110 --> 00:56:57,490
virtualization software separates the OS

00:56:55,660 --> 00:56:59,950
and application from the underlying

00:56:57,490 --> 00:57:02,080
server hardware and with multiple

00:56:59,950 --> 00:57:03,790
virtual machines on a single server you

00:57:02,080 --> 00:57:06,760
can use each of them to run different

00:57:03,790 --> 00:57:08,530
os's and applications this makes it

00:57:06,760 --> 00:57:10,330
possible to move your virtual machines

00:57:08,530 --> 00:57:12,460
from one piece of hardware to another

00:57:10,330 --> 00:57:14,650
whenever you want to maximize

00:57:12,460 --> 00:57:16,600
utilization simplify maintenance or

00:57:14,650 --> 00:57:18,970
recover from a hardware failure and

00:57:16,600 --> 00:57:21,910
without slowing down your applications

00:57:18,970 --> 00:57:24,970
or users clearly server virtualization

00:57:21,910 --> 00:57:27,970
provides big benefits and Citrix

00:57:24,970 --> 00:57:30,220
XenServer provides even more since it's

00:57:27,970 --> 00:57:32,080
built on an open platform xenserver

00:57:30,220 --> 00:57:34,690
plays well with your existing hardware

00:57:32,080 --> 00:57:36,970
storage systems and IT management

00:57:34,690 --> 00:57:39,730
software as well as with the industry's

00:57:36,970 --> 00:57:41,740
leading cloud service providers best of

00:57:39,730 --> 00:57:43,450
all you can get started by downloading a

00:57:41,740 --> 00:57:46,690
fully functional production-ready

00:57:43,450 --> 00:57:48,910
version of xenserver for free after a

00:57:46,690 --> 00:57:50,890
10-minute installation process you'll

00:57:48,910 --> 00:57:52,720
see how easy it is to start virtualizing

00:57:50,890 --> 00:57:55,119
your workloads and automating your IT

00:57:52,720 --> 00:57:56,740
management processes and when you're

00:57:55,119 --> 00:57:58,660
ready for a richer set of management

00:57:56,740 --> 00:58:01,150
tools just upgrade to one of the premium

00:57:58,660 --> 00:58:03,010
editions of xenserver so whether you're

00:58:01,150 --> 00:58:04,930
interested in virtualizing servers for

00:58:03,010 --> 00:58:07,300
the first time expanding your server

00:58:04,930 --> 00:58:09,190
virtualization footprint or moving

00:58:07,300 --> 00:58:11,530
server workloads to the cloud

00:58:09,190 --> 00:58:14,050
download and install xenserver today and

00:58:11,530 --> 00:58:17,560
see how it can help you simplify your IT

00:58:14,050 --> 00:58:21,000
environment citrix xenserver do more

00:58:17,560 --> 00:58:21,000
don't spend more

00:58:26,070 --> 00:58:30,340
your customers rely on your website or

00:58:28,810 --> 00:58:32,710
application if it's slower

00:58:30,340 --> 00:58:35,710
non-responsive it infuriates your users

00:58:32,710 --> 00:58:37,510
and costs you money keeping your

00:58:35,710 --> 00:58:40,950
business critical systems humming along

00:58:37,510 --> 00:58:43,320
requires insight into what they're doing

00:58:40,950 --> 00:58:45,270
your system metrics tells stories

00:58:43,320 --> 00:58:47,280
stories that can reveal performance

00:58:45,270 --> 00:58:49,619
bottlenecks resource limitations and

00:58:47,280 --> 00:58:51,180
other problems but how do you keep an

00:58:49,619 --> 00:58:53,820
eye on all of your systems performance

00:58:51,180 --> 00:58:56,849
metrics in real-time and record this

00:58:53,820 --> 00:58:58,589
data for later analysis enter longview

00:58:56,849 --> 00:59:00,630
the new way to see what's really going

00:58:58,589 --> 00:59:02,760
on under the hood the long view

00:59:00,630 --> 00:59:04,829
dashboard lets you visualize the status

00:59:02,760 --> 00:59:07,290
of all your systems providing you with a

00:59:04,829 --> 00:59:10,770
bird's-eye view of your entire fleet you

00:59:07,290 --> 00:59:13,230
can sort by cpu memory swap processes

00:59:10,770 --> 00:59:15,000
load and network usage click a specific

00:59:13,230 --> 00:59:17,400
system to access its individual

00:59:15,000 --> 00:59:19,940
dashboard then click and drag to zoom in

00:59:17,400 --> 00:59:22,320
on chokepoints and get more detail

00:59:19,940 --> 00:59:24,000
comprehensive network data including

00:59:22,320 --> 00:59:26,400
inbound and outbound traffic is

00:59:24,000 --> 00:59:27,960
available on the network tab and disk

00:59:26,400 --> 00:59:29,880
rights and free space on the disk

00:59:27,960 --> 00:59:32,700
stabbed while the process Explorer

00:59:29,880 --> 00:59:35,250
displays usage statistics for individual

00:59:32,700 --> 00:59:37,440
processes the system info tab shows

00:59:35,250 --> 00:59:39,660
listening services active connections

00:59:37,440 --> 00:59:41,849
and available updates adding long view

00:59:39,660 --> 00:59:43,560
to a system is easy just click the

00:59:41,849 --> 00:59:45,960
button copy the one line installation

00:59:43,560 --> 00:59:48,359
command then run the command on your

00:59:45,960 --> 00:59:50,069
linux system to complete the process the

00:59:48,359 --> 00:59:52,170
agent will begin collecting data and

00:59:50,069 --> 00:59:55,500
sending it to longview then the graph

00:59:52,170 --> 00:59:57,720
start rolling use long view to gain

00:59:55,500 --> 01:00:02,480
visibility into your servers so when

00:59:57,720 --> 01:00:02,480
your website or app heats up it stays up

01:01:37,090 --> 01:01:39,150
you

01:02:32,990 --> 01:02:35,050

YouTube URL: https://www.youtube.com/watch?v=49MDZ_UtWBA


