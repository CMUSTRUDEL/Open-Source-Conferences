Title: 2013 SouthEast LinuxFest - Ade Lee - Managing Certificates with Dogtag
Publication date: 2014-07-29
Playlist: 2013 SouthEast LinuxFest
Description: 
	2013 SouthEast LinuxFest
Ade Lee - PKI Made Easy - Managing Certificates with Dogtag
Captions: 
	00:00:00,000 --> 00:00:05,160
the following presentation was recorded

00:00:02,639 --> 00:00:08,280
at the 2013 southeast linux fest in

00:00:05,160 --> 00:00:10,860
charlotte north carolina it is licensed

00:00:08,280 --> 00:00:12,509
under a creative commons license for

00:00:10,860 --> 00:00:17,190
more information about the southeast

00:00:12,509 --> 00:00:19,949
linux fest visit w WC selinux phase or

00:00:17,190 --> 00:00:21,810
the southeast linux fest would like to

00:00:19,949 --> 00:00:24,000
thank the following diamond sponsors in

00:00:21,810 --> 00:00:31,019
2013 for helping make these videos

00:00:24,000 --> 00:00:33,360
possible so just a little bit myself i'm

00:00:31,019 --> 00:00:36,750
one of the developers on the dog tag

00:00:33,360 --> 00:00:40,530
team and so what we're going to talk

00:00:36,750 --> 00:00:43,410
about today is just a brief introduction

00:00:40,530 --> 00:00:44,850
voice pki i suspect most everyone in

00:00:43,410 --> 00:00:46,980
here knows what it is so we'll keep that

00:00:44,850 --> 00:00:49,890
pretty brief will then talk about what

00:00:46,980 --> 00:00:51,210
dog talk about dog tag and give you a

00:00:49,890 --> 00:00:52,649
little bit of background to to the

00:00:51,210 --> 00:00:56,730
project and where it is and where it

00:00:52,649 --> 00:01:00,539
comes from we'll do a possibly a little

00:00:56,730 --> 00:01:03,809
demo just installing dog tag show just

00:01:00,539 --> 00:01:06,299
kind of how easy it's become to do one

00:01:03,809 --> 00:01:10,020
of the big things that we've added over

00:01:06,299 --> 00:01:11,700
the last release in dog tag 10 as a

00:01:10,020 --> 00:01:14,159
restful interface that makes it really

00:01:11,700 --> 00:01:15,450
easy to write clients to interact with

00:01:14,159 --> 00:01:17,850
it and so we'll talk up a little bit

00:01:15,450 --> 00:01:20,369
about how you interact with dog tag

00:01:17,850 --> 00:01:23,250
using rest and how you can write a

00:01:20,369 --> 00:01:27,060
client pretty easily and then we'll talk

00:01:23,250 --> 00:01:33,960
about some future directions so so the

00:01:27,060 --> 00:01:37,670
first thing is what is pki so we have a

00:01:33,960 --> 00:01:40,710
need in general to be able to identify

00:01:37,670 --> 00:01:43,409
certain entities like governments and

00:01:40,710 --> 00:01:45,810
technical institutions businesses my

00:01:43,409 --> 00:01:48,899
kind of thing when you go to bank of

00:01:45,810 --> 00:01:50,549
america calm you have to be able to know

00:01:48,899 --> 00:01:52,920
that the site that you're going to is

00:01:50,549 --> 00:01:55,170
bankofamerica.com and and how do you do

00:01:52,920 --> 00:01:57,299
that when you do that you because it

00:01:55,170 --> 00:02:00,270
provides you a digital certificate and

00:01:57,299 --> 00:02:01,680
you need to validate that certificate to

00:02:00,270 --> 00:02:04,439
make sure that the public key that's

00:02:01,680 --> 00:02:05,790
there that's therein is actually a valid

00:02:04,439 --> 00:02:08,610
key and so that's where certificate

00:02:05,790 --> 00:02:10,200
authorities come in we need to identify

00:02:08,610 --> 00:02:13,020
people

00:02:10,200 --> 00:02:17,940
because there certainly are their

00:02:13,020 --> 00:02:19,650
applications where you can log into

00:02:17,940 --> 00:02:22,200
those applications and you can be

00:02:19,650 --> 00:02:26,940
prompted to be authenticated using the

00:02:22,200 --> 00:02:29,580
client certificates a when you generate

00:02:26,940 --> 00:02:32,670
a private and public key you keep the

00:02:29,580 --> 00:02:34,650
public key you publish the public key

00:02:32,670 --> 00:02:38,310
everywhere and so you can do things like

00:02:34,650 --> 00:02:40,920
encrypt email for example anyone that

00:02:38,310 --> 00:02:42,870
you if you encrypt your your email with

00:02:40,920 --> 00:02:45,569
your private key anyone with the public

00:02:42,870 --> 00:02:47,099
key can read it and if they send it back

00:02:45,569 --> 00:02:49,670
to you encryption you're probably only

00:02:47,099 --> 00:02:52,680
only you can read it so encrypted email

00:02:49,670 --> 00:02:57,000
computers applications same kind of

00:02:52,680 --> 00:03:00,349
thing I remember being at one particular

00:02:57,000 --> 00:03:03,420
customer where they actually have

00:03:00,349 --> 00:03:05,489
locomotives so locomotives going along

00:03:03,420 --> 00:03:06,660
don't actually have an engineer there

00:03:05,489 --> 00:03:10,980
but the engineer doesn't do very much

00:03:06,660 --> 00:03:14,030
most of the time most of the time if the

00:03:10,980 --> 00:03:16,350
locomotive has to slow down or speed up

00:03:14,030 --> 00:03:18,989
it's all computer-controlled it's all

00:03:16,350 --> 00:03:22,230
controlled by a central server because

00:03:18,989 --> 00:03:24,540
that way they can maximize the fuel

00:03:22,230 --> 00:03:27,480
efficiency of the locomotive so that

00:03:24,540 --> 00:03:29,639
needs software and so whenever they need

00:03:27,480 --> 00:03:33,889
to download the software new versions of

00:03:29,639 --> 00:03:36,660
the software there is a key extra

00:03:33,889 --> 00:03:39,750
certificate exchange every locomotive

00:03:36,660 --> 00:03:41,160
very device has it has it has a key and

00:03:39,750 --> 00:03:44,489
so they make sure they encrypt things

00:03:41,160 --> 00:03:47,060
that way so lots of different uses for

00:03:44,489 --> 00:03:50,519
public key cryptography but essentially

00:03:47,060 --> 00:03:53,359
the idea is that you have you are

00:03:50,519 --> 00:03:57,359
generating a public/private key pair and

00:03:53,359 --> 00:04:00,030
the private key you keep hidden and the

00:03:57,359 --> 00:04:02,819
public key you you publish everywhere

00:04:00,030 --> 00:04:05,280
and that's how mechanism works we know

00:04:02,819 --> 00:04:07,530
that if something if you send something

00:04:05,280 --> 00:04:09,510
encrypted by your private key and it is

00:04:07,530 --> 00:04:12,329
decrypted bull by the public key that it

00:04:09,510 --> 00:04:15,690
came from you because you've kept your

00:04:12,329 --> 00:04:17,700
private keys to yourself and only you

00:04:15,690 --> 00:04:20,459
have that private key and so therefore

00:04:17,700 --> 00:04:22,230
we can encrypt messages and then finally

00:04:20,459 --> 00:04:26,070
in order to validate

00:04:22,230 --> 00:04:28,110
the public keys that are being sent back

00:04:26,070 --> 00:04:29,370
and forth you you have to have a

00:04:28,110 --> 00:04:32,820
certificate authority and the

00:04:29,370 --> 00:04:34,380
certificate authority is something that

00:04:32,820 --> 00:04:36,840
you trust if you trust that certificate

00:04:34,380 --> 00:04:38,550
authority that's civic authority trust

00:04:36,840 --> 00:04:42,240
the certificate authority that that

00:04:38,550 --> 00:04:44,430
issued that that certificates then then

00:04:42,240 --> 00:04:48,150
you know to trust that I think so it's a

00:04:44,430 --> 00:04:52,440
web of trust as it were so just as a

00:04:48,150 --> 00:04:54,510
simple example a client secure web

00:04:52,440 --> 00:04:59,550
browsing this is SSL you know basically

00:04:54,510 --> 00:05:02,550
going to an encrypted HTTPS web page you

00:04:59,550 --> 00:05:04,830
initiate contact certificate provides

00:05:02,550 --> 00:05:08,460
your digital certificate the client that

00:05:04,830 --> 00:05:09,810
has to validate the validity of the

00:05:08,460 --> 00:05:11,340
certificate so it's going to check this

00:05:09,810 --> 00:05:13,220
to make sure this typical valid it's

00:05:11,340 --> 00:05:16,980
going to check to make sure that the

00:05:13,220 --> 00:05:19,400
client certificates newest subject name

00:05:16,980 --> 00:05:22,470
it matches the certificate of the server

00:05:19,400 --> 00:05:26,310
it and then finally it's going to check

00:05:22,470 --> 00:05:28,890
whether or not a the certificate has

00:05:26,310 --> 00:05:31,470
been signed by a certificate authority

00:05:28,890 --> 00:05:33,480
that the client trusts so in your

00:05:31,470 --> 00:05:34,950
browser you have a whole budget of

00:05:33,480 --> 00:05:38,070
certificate authorities that are

00:05:34,950 --> 00:05:42,420
pre-installed and trusted and like

00:05:38,070 --> 00:05:44,460
verisign and so on and so if if you're

00:05:42,420 --> 00:05:46,740
the certificate is signed by verisign or

00:05:44,460 --> 00:05:50,280
if the certificate is signed by a CA

00:05:46,740 --> 00:05:51,810
that was finally signed by verisign then

00:05:50,280 --> 00:05:53,010
you're going to get it's going to go

00:05:51,810 --> 00:05:54,570
through and everything can look okay and

00:05:53,010 --> 00:05:56,340
you're going to get a little little lock

00:05:54,570 --> 00:05:58,800
icon over there and everything's good if

00:05:56,340 --> 00:06:02,010
it isn't okay it's going to prompt up a

00:05:58,800 --> 00:06:03,660
big pop up that says you know this is an

00:06:02,010 --> 00:06:05,550
untrusted certificate what do you want

00:06:03,660 --> 00:06:11,430
to do with it and everyone just clicks

00:06:05,550 --> 00:06:13,830
ok ok ok kind of go through right so so

00:06:11,430 --> 00:06:16,350
at that point the client is going to

00:06:13,830 --> 00:06:18,480
generate a symmetric key it's going to

00:06:16,350 --> 00:06:21,930
encrypt it with the server's public key

00:06:18,480 --> 00:06:23,730
so it only gets to be read by the server

00:06:21,930 --> 00:06:26,070
and understood by the server it's time

00:06:23,730 --> 00:06:29,070
to the server server decrypts it using

00:06:26,070 --> 00:06:33,000
its private key and then finally they do

00:06:29,070 --> 00:06:34,600
the exchange wrapping everything with a

00:06:33,000 --> 00:06:37,630
symmetric key so

00:06:34,600 --> 00:06:43,030
so it's it's key and setting up the

00:06:37,630 --> 00:06:46,150
encryption to begin with in case so what

00:06:43,030 --> 00:06:48,250
is a pki PKA the public key

00:06:46,150 --> 00:06:51,280
infrastructure and a public key

00:06:48,250 --> 00:06:53,770
infrastructure is something that has a

00:06:51,280 --> 00:06:56,470
community people with private and public

00:06:53,770 --> 00:07:00,610
keys it's going to have registration

00:06:56,470 --> 00:07:02,170
authorities that are going to accept

00:07:00,610 --> 00:07:04,510
certificate requests they're going to

00:07:02,170 --> 00:07:07,020
accept requests with you know you're

00:07:04,510 --> 00:07:10,180
going to send them your public key and

00:07:07,020 --> 00:07:12,400
it's going to send that request to a CA

00:07:10,180 --> 00:07:14,290
to ask for a certificate for validation

00:07:12,400 --> 00:07:15,880
of that public key you have the

00:07:14,290 --> 00:07:17,440
certificate authority that's actually

00:07:15,880 --> 00:07:19,930
going to issue the certificate to

00:07:17,440 --> 00:07:22,090
validate the public keys you're going to

00:07:19,930 --> 00:07:24,040
have repositories where things are going

00:07:22,090 --> 00:07:26,700
to be published public keys it'll be and

00:07:24,040 --> 00:07:30,730
certificates are going to be published

00:07:26,700 --> 00:07:33,700
you have revocation lists so at some

00:07:30,730 --> 00:07:35,500
point you need to revoke a suit that's

00:07:33,700 --> 00:07:36,670
going to go into a revocation list and

00:07:35,500 --> 00:07:40,180
of course you're going to have online

00:07:36,670 --> 00:07:43,540
certificate status managers to do ocsp

00:07:40,180 --> 00:07:46,000
to confirm you know online whether or

00:07:43,540 --> 00:07:47,590
not a certificate is valid and then

00:07:46,000 --> 00:07:49,930
finally you have key recovery

00:07:47,590 --> 00:07:52,330
authorities in order to recover lost

00:07:49,930 --> 00:07:54,190
encryption keys so this is the case

00:07:52,330 --> 00:07:57,310
where let's say you're on a corporate

00:07:54,190 --> 00:07:59,770
email or something like that you have

00:07:57,310 --> 00:08:01,360
your your public key you have your

00:07:59,770 --> 00:08:03,790
private key which is your signing key

00:08:01,360 --> 00:08:06,280
that determines who you are and that

00:08:03,790 --> 00:08:09,280
stays with you forever but then you have

00:08:06,280 --> 00:08:12,630
a key that you may use for encryption it

00:08:09,280 --> 00:08:16,360
should be a different team and that key

00:08:12,630 --> 00:08:19,270
could be used to encrypt your emails and

00:08:16,360 --> 00:08:20,410
then you leave the company and all of a

00:08:19,270 --> 00:08:23,080
sudden there's a whole list of e-mails

00:08:20,410 --> 00:08:25,960
that cannot be decrypted if they don't

00:08:23,080 --> 00:08:28,240
have that that encryption key so what

00:08:25,960 --> 00:08:30,820
very often happens is that when you go

00:08:28,240 --> 00:08:34,120
and you and your request for an

00:08:30,820 --> 00:08:40,419
encrypted encryption key that key will

00:08:34,120 --> 00:08:42,190
be will be taken will be since with your

00:08:40,419 --> 00:08:45,060
request the to the certificate authority

00:08:42,190 --> 00:08:48,210
and then stored securely

00:08:45,060 --> 00:08:51,630
location so those are the types of

00:08:48,210 --> 00:08:52,980
things that you need in a pki and those

00:08:51,630 --> 00:08:58,400
are the types of things that dog tag

00:08:52,980 --> 00:09:01,110
provides so what is dog tag dog tag is a

00:08:58,400 --> 00:09:04,170
so it's a security framework that

00:09:01,110 --> 00:09:06,839
manages the entire life cycle of x.509

00:09:04,170 --> 00:09:09,750
certificates so issuance renewal

00:09:06,839 --> 00:09:12,210
revocation publishing private key escrow

00:09:09,750 --> 00:09:13,529
and token management the other thing i

00:09:12,210 --> 00:09:15,990
didn't mention over there's token magic

00:09:13,529 --> 00:09:19,050
one of the things that you can do is you

00:09:15,990 --> 00:09:21,839
can to make sure your token your suits

00:09:19,050 --> 00:09:23,190
and your keys that much more secure is

00:09:21,839 --> 00:09:25,740
you make sure you put them you put them

00:09:23,190 --> 00:09:28,350
on a on a token because part of the

00:09:25,740 --> 00:09:30,150
problem is that that you have let's say

00:09:28,350 --> 00:09:31,980
you've generated a key inside your

00:09:30,150 --> 00:09:33,870
browser well it's inside that browser on

00:09:31,980 --> 00:09:36,570
that machine and now you go to a

00:09:33,870 --> 00:09:37,770
different machine what do you have to

00:09:36,570 --> 00:09:39,690
what you have to do is you have to

00:09:37,770 --> 00:09:41,370
export it from that browser to a p12

00:09:39,690 --> 00:09:42,750
file and then you have to move that P

00:09:41,370 --> 00:09:44,040
12th I have all over to the next step

00:09:42,750 --> 00:09:45,300
and you have to put it in there and then

00:09:44,040 --> 00:09:49,070
you have to import it into your browser

00:09:45,300 --> 00:09:52,200
its key moving keys around is difficult

00:09:49,070 --> 00:09:55,470
so but if you generate the tote if you

00:09:52,200 --> 00:09:57,600
generate the keys and a token then one

00:09:55,470 --> 00:09:59,430
it'll never leave the token the tokens

00:09:57,600 --> 00:10:01,370
are designed that way and to you can

00:09:59,430 --> 00:10:05,040
porter back and forth all the way around

00:10:01,370 --> 00:10:06,690
one of our biggest clients and then

00:10:05,040 --> 00:10:09,960
we'll talk about this a little further I

00:10:06,690 --> 00:10:11,640
has a token management system so part of

00:10:09,960 --> 00:10:14,130
our dog tag system is managing the

00:10:11,640 --> 00:10:15,600
tokens as well to making sure you get

00:10:14,130 --> 00:10:17,880
certificates on the token out of the

00:10:15,600 --> 00:10:20,610
chokin that kind of thing so we'll talk

00:10:17,880 --> 00:10:24,390
a little bit more right now it is red

00:10:20,610 --> 00:10:26,040
hat certificate system is the i guess

00:10:24,390 --> 00:10:28,980
the commercial offering that's based on

00:10:26,040 --> 00:10:33,510
dog tag it is you know Common Criteria

00:10:28,980 --> 00:10:34,230
certified flips 140 level 2 etc etc so

00:10:33,510 --> 00:10:36,920
it has all the appropriate

00:10:34,230 --> 00:10:41,070
certifications you know our biggest

00:10:36,920 --> 00:10:43,650
customers you know have you know have

00:10:41,070 --> 00:10:46,529
these requirements and have to you know

00:10:43,650 --> 00:10:48,540
it's essentially military-grade and and

00:10:46,529 --> 00:10:51,180
part of this there's a lot that's a lot

00:10:48,540 --> 00:10:52,980
that's involved in here so common

00:10:51,180 --> 00:10:55,410
criteria certification doesn't mean

00:10:52,980 --> 00:10:57,030
first means a lot of documentation means

00:10:55,410 --> 00:10:58,960
all the interfaces are documented and so

00:10:57,030 --> 00:11:00,880
on and so forth but it also

00:10:58,960 --> 00:11:03,550
means very specific things that you can

00:11:00,880 --> 00:11:06,430
do with the keys if you are in a common

00:11:03,550 --> 00:11:10,660
criteria certified environment at the

00:11:06,430 --> 00:11:14,080
back of your server any kind of you you

00:11:10,660 --> 00:11:17,110
will have Hardware tokens that you store

00:11:14,080 --> 00:11:19,420
your server key your keys on and anytime

00:11:17,110 --> 00:11:21,850
you have any encryption operations they

00:11:19,420 --> 00:11:23,500
take place in the hardware token so that

00:11:21,850 --> 00:11:26,470
even if someone were to break into your

00:11:23,500 --> 00:11:28,930
your silver where you have what you're

00:11:26,470 --> 00:11:30,340
running your CA and we're somewhere able

00:11:28,930 --> 00:11:32,170
to look through the memory on that

00:11:30,340 --> 00:11:37,150
server they would not be able to find

00:11:32,170 --> 00:11:38,920
any keys and so it all in the token and

00:11:37,150 --> 00:11:40,450
every all all encryption and everything

00:11:38,920 --> 00:11:42,040
takes place with menace and that's open

00:11:40,450 --> 00:11:44,410
talk a little bit more about that but

00:11:42,040 --> 00:11:47,380
that's the kind of security and kind of

00:11:44,410 --> 00:11:50,320
safety that assurance that you get if

00:11:47,380 --> 00:11:53,170
you run dog tag or a death certificate

00:11:50,320 --> 00:11:56,410
system in a common criteria type

00:11:53,170 --> 00:11:58,180
environment it's deployed by the largest

00:11:56,410 --> 00:12:00,820
pki deployments of the world there are

00:11:58,180 --> 00:12:02,920
millions and millions of keys and such

00:12:00,820 --> 00:12:05,740
suits that have been deployed using red

00:12:02,920 --> 00:12:07,690
certificate system and of course the

00:12:05,740 --> 00:12:14,440
latest version of dog tag is available

00:12:07,690 --> 00:12:16,210
on fedora 19 18 and 19 7 so just little

00:12:14,440 --> 00:12:18,340
bit of a mystery about dog tag dog tags

00:12:16,210 --> 00:12:20,110
or a red hat certificate system it's

00:12:18,340 --> 00:12:22,630
been around for a long time started out

00:12:20,110 --> 00:12:26,110
as the netscape netscape certificate

00:12:22,630 --> 00:12:30,250
server in 1997 one point 0 at that time

00:12:26,110 --> 00:12:31,960
it was just the ca netscape's it

00:12:30,250 --> 00:12:34,660
specifically about a couple of years

00:12:31,960 --> 00:12:36,280
later they added a DRM so dr images or

00:12:34,660 --> 00:12:42,400
key recovery that's the place where you

00:12:36,280 --> 00:12:44,950
store the heat and then it was I guess

00:12:42,400 --> 00:12:47,680
it was sold to AOL and AOL and that

00:12:44,950 --> 00:12:50,380
there was a fork that was done to son so

00:12:47,680 --> 00:12:54,430
we had the Sun one certificate server

00:12:50,380 --> 00:12:59,490
that got off the Netscape I

00:12:54,430 --> 00:12:59,490
planet certificate management system 4.2

00:12:59,580 --> 00:13:06,100
there is a there was a 70 release that

00:13:02,650 --> 00:13:09,460
went in 2004 and then at that point it

00:13:06,100 --> 00:13:11,930
was acquired by red hat and red hat had

00:13:09,460 --> 00:13:16,790
its supposed to release as

00:13:11,930 --> 00:13:18,860
certificate system 73 as we're going

00:13:16,790 --> 00:13:20,720
through your and at various points

00:13:18,860 --> 00:13:23,420
additional subsystems of being added an

00:13:20,720 --> 00:13:25,720
additional functionality and we'll show

00:13:23,420 --> 00:13:28,820
you what the subsystems are in a second

00:13:25,720 --> 00:13:32,209
2008 is where dog tag certificates over

00:13:28,820 --> 00:13:35,360
10 started and that was essentially so

00:13:32,209 --> 00:13:38,480
up to now we have something that was all

00:13:35,360 --> 00:13:40,820
closed source you know everything of the

00:13:38,480 --> 00:13:42,230
all closed source and then at this point

00:13:40,820 --> 00:13:44,270
this is the point that what things were

00:13:42,230 --> 00:13:45,350
open sourced so everything is open

00:13:44,270 --> 00:13:48,500
sourced we have dog tech certificate

00:13:45,350 --> 00:13:53,470
server 10 and if you're familiar with

00:13:48,500 --> 00:13:56,270
the way that red hat and Fedora work

00:13:53,470 --> 00:13:57,920
there's a community project and

00:13:56,270 --> 00:13:59,390
essentially all the latest development

00:13:57,920 --> 00:14:02,180
goes on there and then it gets ported

00:13:59,390 --> 00:14:04,790
back brought back eventually and the

00:14:02,180 --> 00:14:07,490
next red hat releases based on that so

00:14:04,790 --> 00:14:09,649
for example as we're going through here

00:14:07,490 --> 00:14:12,830
with the different releases we we we

00:14:09,649 --> 00:14:14,149
decided we didn't just skip from we

00:14:12,830 --> 00:14:16,820
didn't just have a bunch of releases

00:14:14,149 --> 00:14:18,380
that I'm skipping here we decided at one

00:14:16,820 --> 00:14:20,930
point to have a redhead certificates

00:14:18,380 --> 00:14:24,610
over 90 and redhead certificate ate a

00:14:20,930 --> 00:14:26,750
dog tag 9 daughter and dog that 90

00:14:24,610 --> 00:14:30,589
redhead certificate server eight dot one

00:14:26,750 --> 00:14:35,360
is based on dog tag 90 okay so then we

00:14:30,589 --> 00:14:37,990
have dog tag dr. tisseau fixer for 10

00:14:35,360 --> 00:14:42,380
dot zero which came out this year and

00:14:37,990 --> 00:14:51,760
red xfa tificate server 9 is going to be

00:14:42,380 --> 00:14:51,760
based on tender yep

00:14:55,400 --> 00:14:59,520
there were so the relationship is that

00:14:57,840 --> 00:15:02,100
the newest development takes place in

00:14:59,520 --> 00:15:03,600
the dog tag and then it gets pushed and

00:15:02,100 --> 00:15:05,250
then it gets pulled back so so if you're

00:15:03,600 --> 00:15:07,560
going if you're getting if you go with

00:15:05,250 --> 00:15:12,120
the latest which is 10 dot 0 then you're

00:15:07,560 --> 00:15:13,440
getting everything that is in a red

00:15:12,120 --> 00:15:16,670
that's it oh in this case where that's a

00:15:13,440 --> 00:15:18,870
difficult age right and then eventually

00:15:16,670 --> 00:15:21,890
they will be a redhead certificate not

00:15:18,870 --> 00:15:24,870
silver 9 and that will be based on

00:15:21,890 --> 00:15:27,810
either 10 auto attendant one depending

00:15:24,870 --> 00:15:29,250
on what things ago right yeah so so the

00:15:27,810 --> 00:15:32,160
latest development takes place in dog

00:15:29,250 --> 00:15:35,420
tag and then and then it gets pulled it

00:15:32,160 --> 00:15:35,420
back yeah

00:15:43,430 --> 00:15:53,339
you mean like like Ubuntu or yeah so so

00:15:48,270 --> 00:15:55,380
right now for dog tag 10 it's there's

00:15:53,339 --> 00:15:56,670
work to be done in order to be able to

00:15:55,380 --> 00:15:58,680
use it on something like a Bunter and

00:15:56,670 --> 00:16:01,110
we're working with those communities a

00:15:58,680 --> 00:16:03,149
little bit to get that part of part of

00:16:01,110 --> 00:16:05,610
that is in dog tag 10 we added a restful

00:16:03,149 --> 00:16:08,940
interface and the restful interface uses

00:16:05,610 --> 00:16:12,480
rest easy which is a JBoss product rest

00:16:08,940 --> 00:16:15,959
easy most of rest easy is not in like

00:16:12,480 --> 00:16:17,790
ubuntu for example and so we're working

00:16:15,959 --> 00:16:19,589
with them right now to get all the

00:16:17,790 --> 00:16:21,300
various components but there's a lot of

00:16:19,589 --> 00:16:26,250
components to rest easy right and a lot

00:16:21,300 --> 00:16:28,410
of dependencies there on anything not

00:16:26,250 --> 00:16:30,660
yet well or or or try it at home and

00:16:28,410 --> 00:16:32,520
feel free to add pay you know separate

00:16:30,660 --> 00:16:36,920
patches through these guys so that we

00:16:32,520 --> 00:16:40,290
can we can get it up there so all right

00:16:36,920 --> 00:16:42,390
so many features of dog tag of dog tag

00:16:40,290 --> 00:16:45,230
you know ability to create and manage it

00:16:42,390 --> 00:16:47,730
fits it's highly easily deployable

00:16:45,230 --> 00:16:52,380
maintainable it's been around for a long

00:16:47,730 --> 00:16:55,440
long time it's highly scalable and we

00:16:52,380 --> 00:16:57,480
have with lots and lots of suits and CR

00:16:55,440 --> 00:16:59,430
Elms and so on you know millions of

00:16:57,480 --> 00:17:02,220
suits really big crls that are moving

00:16:59,430 --> 00:17:05,250
moved around cloning for high

00:17:02,220 --> 00:17:07,350
availability so each of the subsystems

00:17:05,250 --> 00:17:09,630
can be cloned which essentially means

00:17:07,350 --> 00:17:11,970
that there's that you have two different

00:17:09,630 --> 00:17:13,679
servers that are shared sharing a

00:17:11,970 --> 00:17:15,420
database that is replicated between the

00:17:13,679 --> 00:17:19,050
two of them and they look essentially

00:17:15,420 --> 00:17:20,699
like the same CA if you're to say but

00:17:19,050 --> 00:17:22,500
they they're running within different

00:17:20,699 --> 00:17:23,640
serial number rangers essentially but

00:17:22,500 --> 00:17:25,850
they're essentially the same CA is the

00:17:23,640 --> 00:17:28,439
same signing he's so on and so forth

00:17:25,850 --> 00:17:30,240
it's based on open protocols open

00:17:28,439 --> 00:17:32,429
standards so you can interoperate with

00:17:30,240 --> 00:17:34,350
with any of the other subsystems any

00:17:32,429 --> 00:17:37,070
other certificate systems not just right

00:17:34,350 --> 00:17:37,070
head so

00:17:37,390 --> 00:17:43,010
so more of mixtures single CA can

00:17:41,240 --> 00:17:45,020
support multiple registration

00:17:43,010 --> 00:17:47,059
authorities a lot of different ways of

00:17:45,020 --> 00:17:50,150
getting to the same CA you can have root

00:17:47,059 --> 00:17:53,270
CA support net CAS subordinate to say a

00:17:50,150 --> 00:17:55,460
verisign CA for example or to another

00:17:53,270 --> 00:17:57,260
some you so you can create your your web

00:17:55,460 --> 00:18:00,830
as much as you want to you can cross

00:17:57,260 --> 00:18:02,450
certify CAS so if you have your one web

00:18:00,830 --> 00:18:03,679
over here with your root CA you have

00:18:02,450 --> 00:18:06,110
another web over here with you would see

00:18:03,679 --> 00:18:08,480
a if you cross certify you can expand

00:18:06,110 --> 00:18:13,010
the written the web of trust as it were

00:18:08,480 --> 00:18:15,830
cloning there are admin agent and in

00:18:13,010 --> 00:18:18,169
density interfaces will see lows in a

00:18:15,830 --> 00:18:19,730
while but we have you know for common

00:18:18,169 --> 00:18:22,130
criteria of course we have logging and

00:18:19,730 --> 00:18:23,929
signed auditing signed auditing mean

00:18:22,130 --> 00:18:26,870
that the you know the audit logs

00:18:23,929 --> 00:18:29,900
themselves are signed and so if anything

00:18:26,870 --> 00:18:31,909
gets tampered with you can you can run a

00:18:29,900 --> 00:18:34,190
tool and you can verify that things have

00:18:31,909 --> 00:18:36,049
been tampered with and there are

00:18:34,190 --> 00:18:38,240
specific audit or certificates and so on

00:18:36,049 --> 00:18:40,750
and so forth we have self tests to make

00:18:38,240 --> 00:18:43,340
sure that everything comes up correctly

00:18:40,750 --> 00:18:46,100
different kinds of authenticated n

00:18:43,340 --> 00:18:48,620
occation and an authorization you know

00:18:46,100 --> 00:18:51,289
you can or there are plugins whereby you

00:18:48,620 --> 00:18:52,520
can so it's a very big plug-in

00:18:51,289 --> 00:18:55,070
architecture so there are lots of

00:18:52,520 --> 00:18:58,070
different authentication plugins and you

00:18:55,070 --> 00:19:01,159
can do authentication using suits you

00:18:58,070 --> 00:19:07,000
can use authentication using pins or

00:19:01,159 --> 00:19:11,419
using using ldap or you can add your own

00:19:07,000 --> 00:19:13,100
authentication modules and of course for

00:19:11,419 --> 00:19:14,870
certificate issuance we have some things

00:19:13,100 --> 00:19:17,780
called profiles and the profiles

00:19:14,870 --> 00:19:19,940
essentially determine what's in the

00:19:17,780 --> 00:19:22,250
certificate what what extensions are in

00:19:19,940 --> 00:19:24,470
the certificate what or thurs ation and

00:19:22,250 --> 00:19:25,789
authentication are required and so we

00:19:24,470 --> 00:19:27,890
have a bunch of different profiles which

00:19:25,789 --> 00:19:30,140
are predefined for what most people use

00:19:27,890 --> 00:19:32,690
and then but of course it's all

00:19:30,140 --> 00:19:35,030
customizable so you can create your own

00:19:32,690 --> 00:19:37,970
profile which has its own inputs its own

00:19:35,030 --> 00:19:39,799
outputs outputs and you know it'll

00:19:37,970 --> 00:19:41,799
automatically generate the various forms

00:19:39,799 --> 00:19:44,450
and so on to do these kinds of things

00:19:41,799 --> 00:19:46,460
and as I mentioned before it's a plug-in

00:19:44,450 --> 00:19:48,169
framework so there's a lot of things

00:19:46,460 --> 00:19:50,330
just about everything can be customized

00:19:48,169 --> 00:19:51,110
in some way and we've had to do this

00:19:50,330 --> 00:19:53,690
because

00:19:51,110 --> 00:19:57,049
main customers have come up with very

00:19:53,690 --> 00:20:00,980
very strange cases and I said we would

00:19:57,049 --> 00:20:02,929
like to do X and so they have they've

00:20:00,980 --> 00:20:05,299
put it in such a way that's very

00:20:02,929 --> 00:20:06,799
customizable it's plug-in they write

00:20:05,299 --> 00:20:14,990
their own plug-in and they're able to do

00:20:06,799 --> 00:20:16,820
everything yeah yes there is now an EML

00:20:14,990 --> 00:20:19,910
that's right so in fact I think that's

00:20:16,820 --> 00:20:21,410
on the next but right so publishing

00:20:19,910 --> 00:20:25,090
perfect two-timing publishing

00:20:21,410 --> 00:20:28,460
notifications and jobs right so you can

00:20:25,090 --> 00:20:32,660
configure publishers that publish the

00:20:28,460 --> 00:20:35,780
suits in the crls and so on to two

00:20:32,660 --> 00:20:37,760
different ldap servers you have

00:20:35,780 --> 00:20:40,640
notifications which can be set up so you

00:20:37,760 --> 00:20:42,650
can be notified when certificates are in

00:20:40,640 --> 00:20:44,780
your queue for example to be approved or

00:20:42,650 --> 00:20:48,500
something like that or if certificates

00:20:44,780 --> 00:20:50,270
can are going to expire and those kinds

00:20:48,500 --> 00:20:51,770
of things and your various jobs but get

00:20:50,270 --> 00:20:56,690
that can set up to do that those kinds

00:20:51,770 --> 00:20:59,240
of things so crls ocsp generates crls we

00:20:56,690 --> 00:21:02,360
have ocsp the ca itself actually has an

00:20:59,240 --> 00:21:06,460
internal ocsp responder that you can

00:21:02,360 --> 00:21:08,929
point itself to and we have our own ocsp

00:21:06,460 --> 00:21:11,390
subsystem which you can offload that

00:21:08,929 --> 00:21:13,370
ocsp traffic to if you want to if you

00:21:11,390 --> 00:21:21,980
want to do that yep oh it's just be

00:21:13,370 --> 00:21:24,320
online certificate I think I said yes

00:21:21,980 --> 00:21:29,750
yeah it's essentially it is status

00:21:24,320 --> 00:21:32,510
product a protocol so it's a essentially

00:21:29,750 --> 00:21:35,690
it's an online check of you know your

00:21:32,510 --> 00:21:37,940
your browser can go to an ocsp responder

00:21:35,690 --> 00:21:39,830
and can check whether or not assertive

00:21:37,940 --> 00:21:42,530
Vallot you can actually configure your

00:21:39,830 --> 00:21:44,870
browser to do that it you know if the no

00:21:42,530 --> 00:21:46,610
CSP respond responder is provided by a

00:21:44,870 --> 00:21:49,790
suit go and check it and make sure that

00:21:46,610 --> 00:21:52,700
it's valid encryption key and escrow and

00:21:49,790 --> 00:21:54,799
recovery and there are many different

00:21:52,700 --> 00:21:58,610
mechanisms for recovery some of which

00:21:54,799 --> 00:22:01,580
are simpler than others some of our

00:21:58,610 --> 00:22:03,590
customers have wanted the kind of thing

00:22:01,580 --> 00:22:05,000
where you have three different agents

00:22:03,590 --> 00:22:07,740
that have to approve their

00:22:05,000 --> 00:22:09,210
and they all have to be in the room and

00:22:07,740 --> 00:22:10,919
one of them have to type the thing and

00:22:09,210 --> 00:22:11,940
then the screen goes blank and the other

00:22:10,919 --> 00:22:13,320
one is the type of thing in the screen

00:22:11,940 --> 00:22:15,720
goes blank in the other one and then you

00:22:13,320 --> 00:22:17,820
can recover the key right there's that

00:22:15,720 --> 00:22:19,980
kind of mechanism which is supported and

00:22:17,820 --> 00:22:21,840
there are simpler methods that are

00:22:19,980 --> 00:22:23,220
supported for people who don't want to

00:22:21,840 --> 00:22:26,750
have three different agents in the room

00:22:23,220 --> 00:22:29,899
at the same time all of that is is there

00:22:26,750 --> 00:22:33,419
their support for hardware kwadwo tokens

00:22:29,899 --> 00:22:35,309
and for smart cards and crypto

00:22:33,419 --> 00:22:37,980
accelerators so smart codes which are

00:22:35,309 --> 00:22:41,419
the taupe which are the tokens Hardware

00:22:37,980 --> 00:22:44,490
tokens we're talking about you know the

00:22:41,419 --> 00:22:46,110
the keys themselves for the system being

00:22:44,490 --> 00:22:47,760
on these Hardware tokens where it's

00:22:46,110 --> 00:22:49,740
really hard to get you can't get the

00:22:47,760 --> 00:22:51,059
keys out this is this would be the kind

00:22:49,740 --> 00:22:56,159
of thing if you had a common criteria

00:22:51,059 --> 00:22:58,529
certification yeah soft tokens yeah soft

00:22:56,159 --> 00:23:13,320
tokens are are supported as well too

00:22:58,529 --> 00:23:15,289
that's it yeah there are ways there you

00:23:13,320 --> 00:23:17,850
know it depends on the hardware token

00:23:15,289 --> 00:23:20,279
yeah exactly yeah it depends on the

00:23:17,850 --> 00:23:22,740
hardware trip right I mean the hall each

00:23:20,279 --> 00:23:26,510
token has their own mechanisms for doing

00:23:22,740 --> 00:23:26,510
for doing that kind of thing absolutely

00:23:27,110 --> 00:23:33,389
ACP so we have a CP so that we can talk

00:23:30,690 --> 00:23:35,240
two routers and other devices you know

00:23:33,389 --> 00:23:37,620
and ultimately maybe talk to things like

00:23:35,240 --> 00:23:39,450
like iPhones and and and things like

00:23:37,620 --> 00:23:43,200
that that that is something we'd like to

00:23:39,450 --> 00:23:44,610
do some time in the future and then of

00:23:43,200 --> 00:23:46,350
course like I mentioned before there

00:23:44,610 --> 00:23:48,240
multiple interfaces there's a web UI

00:23:46,350 --> 00:23:49,440
there's the restful interface we've just

00:23:48,240 --> 00:23:52,169
been added there are command line

00:23:49,440 --> 00:23:54,389
utilities but there's a console which is

00:23:52,169 --> 00:23:58,470
a graphical client lots of different

00:23:54,389 --> 00:24:00,990
things that your ways to get to it just

00:23:58,470 --> 00:24:03,720
as a quick mention and I know that if

00:24:00,990 --> 00:24:04,940
you're more interested in IPA Dimitri

00:24:03,720 --> 00:24:08,419
over there is going to be giving a talk

00:24:04,940 --> 00:24:11,940
there are next after mine about IPA but

00:24:08,419 --> 00:24:14,840
essentially IPA is you know identity

00:24:11,940 --> 00:24:14,840
policy audit

00:24:15,499 --> 00:24:24,809
it is I guess it would be redheads

00:24:18,979 --> 00:24:27,269
answer to active directory and in the

00:24:24,809 --> 00:24:28,649
back end it right now it does silver

00:24:27,269 --> 00:24:32,309
suits as well too and in the back end

00:24:28,649 --> 00:24:36,690
here it is using the dog tag CA and it

00:24:32,309 --> 00:24:39,919
is interacting with dog tag through

00:24:36,690 --> 00:24:42,720
Python scripts and part of that is also

00:24:39,919 --> 00:24:46,619
using Python to talk to the rest

00:24:42,720 --> 00:24:49,049
interface which we vanish so more

00:24:46,619 --> 00:24:51,509
details about our PA if you see

00:24:49,049 --> 00:24:57,239
Dimitri's talk so the various components

00:24:51,509 --> 00:24:59,639
of dog tag we have then what we call the

00:24:57,239 --> 00:25:01,950
drm the data recovery manager that's

00:24:59,639 --> 00:25:04,769
where the keys are stored we have the

00:25:01,950 --> 00:25:06,229
certificate manager one of the ca so

00:25:04,769 --> 00:25:08,669
this is certificate authority over here

00:25:06,229 --> 00:25:10,499
we have registration authorities and

00:25:08,669 --> 00:25:13,169
oceans p responders so if you imagine

00:25:10,499 --> 00:25:16,200
over here you as a user user request

00:25:13,169 --> 00:25:17,759
suits the suits you know goes to a

00:25:16,200 --> 00:25:20,070
registration authority and you can go

00:25:17,759 --> 00:25:21,749
directly to the CA but in this case

00:25:20,070 --> 00:25:24,749
we're going to registration authority

00:25:21,749 --> 00:25:27,599
the registration authority is a place

00:25:24,749 --> 00:25:30,659
where agents will look and we'll look at

00:25:27,599 --> 00:25:33,330
the requests will approve them and we'll

00:25:30,659 --> 00:25:36,599
send that request off to the CA and

00:25:33,330 --> 00:25:38,340
because it's an authorized agent that

00:25:36,599 --> 00:25:40,679
certificate will automatically be

00:25:38,340 --> 00:25:43,679
approved and sent back sent back to the

00:25:40,679 --> 00:25:45,029
registration authority and and back to

00:25:43,679 --> 00:25:47,309
the user so this is the case where you

00:25:45,029 --> 00:25:48,809
would go into an office somewhere for

00:25:47,309 --> 00:25:52,590
example and you'd say hey I need a

00:25:48,809 --> 00:25:54,929
certificate and you would go to that

00:25:52,590 --> 00:25:56,909
registration agent the agent say okay

00:25:54,929 --> 00:25:58,529
yep you look great you are who you say

00:25:56,909 --> 00:26:00,239
you are you know I'm going to look at

00:25:58,529 --> 00:26:02,369
you write your driver's license military

00:26:00,239 --> 00:26:03,960
ID whatever the case may be and I'm

00:26:02,369 --> 00:26:05,639
going to issue a suit and he's going to

00:26:03,960 --> 00:26:06,690
send that suit to the CA and CA is going

00:26:05,639 --> 00:26:08,909
to prove it and it's going to come back

00:26:06,690 --> 00:26:10,259
and it's going to go to your user so

00:26:08,909 --> 00:26:11,729
that's one possible case another

00:26:10,259 --> 00:26:14,220
possible case a lot of people don't have

00:26:11,729 --> 00:26:16,830
an RA they just go directly we have web

00:26:14,220 --> 00:26:19,320
pages that are directly on the CA and

00:26:16,830 --> 00:26:22,080
you go and your request to suits you can

00:26:19,320 --> 00:26:22,360
either have it automatically approved if

00:26:22,080 --> 00:26:24,220
you

00:26:22,360 --> 00:26:26,980
have whatever the appropriate profilers

00:26:24,220 --> 00:26:28,990
or if it's not automatically approved it

00:26:26,980 --> 00:26:30,160
will go into an agent cue the agent cute

00:26:28,990 --> 00:26:32,470
and the agent will look at the suit and

00:26:30,160 --> 00:26:36,100
said okay I know who you are I'll issue

00:26:32,470 --> 00:26:38,530
that suit and that suit is issued same

00:26:36,100 --> 00:26:40,660
time if we revoke any suits we're going

00:26:38,530 --> 00:26:42,460
to publish CR else and we're going to

00:26:40,660 --> 00:26:44,200
publish them either and you can see them

00:26:42,460 --> 00:26:46,570
either by going to an offline ocsp

00:26:44,200 --> 00:26:49,090
responder or there's an ocean spirits

00:26:46,570 --> 00:26:53,710
monitor that's within the CA and then

00:26:49,090 --> 00:26:55,750
finally of course if you if you try to

00:26:53,710 --> 00:26:57,340
get an encryption suit what's going to

00:26:55,750 --> 00:26:58,750
happen is you're going to get that

00:26:57,340 --> 00:27:03,580
encryption suit but when you get that

00:26:58,750 --> 00:27:06,160
encryption suit your yorkie your private

00:27:03,580 --> 00:27:07,900
key for encryption is going to go

00:27:06,160 --> 00:27:10,350
through CA and it's going to go to the

00:27:07,900 --> 00:27:12,790
drm it's going to be stored in the drm

00:27:10,350 --> 00:27:14,050
we have to of course be very careful

00:27:12,790 --> 00:27:16,030
about how to do that because we're

00:27:14,050 --> 00:27:17,500
transmitting a private key over there so

00:27:16,030 --> 00:27:19,960
what actually happens is that there is a

00:27:17,500 --> 00:27:24,430
transport certificates that is generated

00:27:19,960 --> 00:27:28,090
on the drm and on the user over here the

00:27:24,430 --> 00:27:30,520
transport the encryption certificate is

00:27:28,090 --> 00:27:33,700
wrapped in the transport key in the

00:27:30,520 --> 00:27:35,500
transport suit and it's sent all the way

00:27:33,700 --> 00:27:38,710
through there so that no components

00:27:35,500 --> 00:27:41,830
other than the drm will ever be able to

00:27:38,710 --> 00:27:44,140
to decrypt what's there and if in your

00:27:41,830 --> 00:27:46,480
in a common criteria environment it

00:27:44,140 --> 00:27:48,220
won't even be in memory over here

00:27:46,480 --> 00:27:51,910
because all of the decryption that takes

00:27:48,220 --> 00:27:54,610
place will happen inside the token and

00:27:51,910 --> 00:27:56,830
then it's stored encrypted in the drm so

00:27:54,610 --> 00:27:58,510
there is a storage keys session Keys and

00:27:56,830 --> 00:28:01,570
storage keys that are generated to store

00:27:58,510 --> 00:28:03,130
within the drm so on the other side of

00:28:01,570 --> 00:28:09,310
their you also have a token management

00:28:03,130 --> 00:28:11,220
system there's the TPS TKS esc okay and

00:28:09,310 --> 00:28:14,110
here's just a little talk about the

00:28:11,220 --> 00:28:17,140
token management in this case you've got

00:28:14,110 --> 00:28:19,300
a smart card the smart card goes to the

00:28:17,140 --> 00:28:21,160
the enterprise security client which is

00:28:19,300 --> 00:28:25,270
just a client that runs on your ear

00:28:21,160 --> 00:28:26,560
Linux PC in for windows there is

00:28:25,270 --> 00:28:31,840
something there's a company called 90

00:28:26,560 --> 00:28:34,090
meter that had has a client like this

00:28:31,840 --> 00:28:35,590
that also works but essentially you put

00:28:34,090 --> 00:28:40,270
your smart card in

00:28:35,590 --> 00:28:43,570
and it starts to communicate with the

00:28:40,270 --> 00:28:46,409
TPS you put your small code in you add

00:28:43,570 --> 00:28:49,750
in put in some credentials at that point

00:28:46,409 --> 00:28:51,490
the TPS sends the request to the

00:28:49,750 --> 00:28:54,490
certificate manager stick manager

00:28:51,490 --> 00:28:56,770
enrolls you gets the request and then

00:28:54,490 --> 00:28:58,659
issues the suits the suits come back and

00:28:56,770 --> 00:29:01,570
get issued and get placed onto this one

00:28:58,659 --> 00:29:04,270
to the smart court the TPS over here is

00:29:01,570 --> 00:29:08,529
is the the token processing system is

00:29:04,270 --> 00:29:10,750
the is sets up a secure channel and so

00:29:08,529 --> 00:29:13,720
on with the smart cards and so and

00:29:10,750 --> 00:29:15,399
there's a standard for the kind of scope

00:29:13,720 --> 00:29:16,960
global platform there's a standard for

00:29:15,399 --> 00:29:20,799
the kinds of things that it needs to set

00:29:16,960 --> 00:29:22,029
up over there and then finally and then

00:29:20,799 --> 00:29:23,260
of course the other thing that it can do

00:29:22,029 --> 00:29:26,080
is if you have an encryption suit is

00:29:23,260 --> 00:29:32,679
that the TPS will talk to the drm and

00:29:26,080 --> 00:29:36,669
will store the keys on the drm so so

00:29:32,679 --> 00:29:42,510
that's dog tag we can talk a little bit

00:29:36,669 --> 00:29:47,529
about installing dog tag and for here I

00:29:42,510 --> 00:29:50,140
actually had a I was hoping to do a demo

00:29:47,529 --> 00:29:52,990
but things aren't give me a second here

00:29:50,140 --> 00:30:00,960
will I figure out how to get so I can

00:29:52,990 --> 00:30:00,960
see why I'm doing okay

00:30:06,029 --> 00:30:19,830
ok

00:30:08,679 --> 00:30:19,830
so I actually have a try that again

00:30:30,809 --> 00:30:39,960
okay let me just

00:30:43,150 --> 00:30:47,140
okay know how that works

00:30:54,890 --> 00:30:58,770
yeah ok so it's look it's showing

00:30:57,750 --> 00:31:03,240
something different over here which is

00:30:58,770 --> 00:31:06,600
why I'm confused so in case I couldn't

00:31:03,240 --> 00:31:10,679
do the demo there's a youtube video over

00:31:06,600 --> 00:31:12,900
there which describes we chose how to do

00:31:10,679 --> 00:31:15,029
a dog tag install I'm not going to run

00:31:12,900 --> 00:31:18,320
that at this time I think we're probably

00:31:15,029 --> 00:31:23,429
going to run out of time if we do that

00:31:18,320 --> 00:31:25,200
but it's very straightforward and the

00:31:23,429 --> 00:31:27,630
essential steps are there that are there

00:31:25,200 --> 00:31:30,690
in using before you get a young repo

00:31:27,630 --> 00:31:33,380
install it so I'm a dog tag 18 you

00:31:30,690 --> 00:31:35,580
install a directory server instance

00:31:33,380 --> 00:31:37,559
which is you know very easy there was

00:31:35,580 --> 00:31:40,039
one command kind of thing and then you

00:31:37,559 --> 00:31:44,490
run the utility which is peak I spawn

00:31:40,039 --> 00:31:45,990
and PK I spawn you can you're creating a

00:31:44,490 --> 00:31:48,990
CA you can essentially keep all the

00:31:45,990 --> 00:31:51,630
defaults that are there and in a couple

00:31:48,990 --> 00:31:53,850
of minutes it spits out a CA and it

00:31:51,630 --> 00:31:55,350
spits out various it'll create

00:31:53,850 --> 00:31:56,789
everything for you and configure

00:31:55,350 --> 00:31:59,429
everything for you now of course it's

00:31:56,789 --> 00:32:01,649
very customizable and so you can

00:31:59,429 --> 00:32:03,270
actually provide it at a config file and

00:32:01,649 --> 00:32:05,039
the config file will customize the

00:32:03,270 --> 00:32:06,630
various things that you want but for a

00:32:05,039 --> 00:32:09,390
standard kind of install it puts you in

00:32:06,630 --> 00:32:11,460
a nice interactive menu that you can

00:32:09,390 --> 00:32:13,440
just go through and get the defaults

00:32:11,460 --> 00:32:15,149
specify the ports and so on this will

00:32:13,440 --> 00:32:18,270
give you a tomcat instance because it

00:32:15,149 --> 00:32:20,909
runs on a tomcat and that and that will

00:32:18,270 --> 00:32:22,860
be your ca and then if you wanted to you

00:32:20,909 --> 00:32:25,620
could actually add an RA a que or a

00:32:22,860 --> 00:32:27,720
querer is the key recovery agents the

00:32:25,620 --> 00:32:30,149
drm essentially where we keep the keys

00:32:27,720 --> 00:32:31,350
and you can add that to the same tomcat

00:32:30,149 --> 00:32:34,020
instance it doesn't have to be the same

00:32:31,350 --> 00:32:36,899
tomcat instance but it could be and then

00:32:34,020 --> 00:32:39,510
essentially it'll go from there the man

00:32:36,899 --> 00:32:42,840
pages for pti spawn give a lot of

00:32:39,510 --> 00:32:47,450
information about how to actually you

00:32:42,840 --> 00:32:53,429
run it and do customizations and so on

00:32:47,450 --> 00:32:58,890
so let me I think we've sort of gone

00:32:53,429 --> 00:33:01,350
through this already so well it's let's

00:32:58,890 --> 00:33:02,760
say okay so just as an idea as to the

00:33:01,350 --> 00:33:05,100
kinds of things that you do with dog tag

00:33:02,760 --> 00:33:08,010
and maybe I may be able to do a demo

00:33:05,100 --> 00:33:10,260
this so the idea err

00:33:08,010 --> 00:33:12,780
is that you have an end user end user

00:33:10,260 --> 00:33:14,460
wants to create an encryption key and

00:33:12,780 --> 00:33:17,070
assigning key they're going to be dual

00:33:14,460 --> 00:33:18,240
keys they're going to be so then they

00:33:17,070 --> 00:33:20,760
need to be there going to be separate

00:33:18,240 --> 00:33:23,850
from each other and we want to escrow

00:33:20,760 --> 00:33:26,220
the encryption key if there's an

00:33:23,850 --> 00:33:28,470
enrollment form on the ca it's going to

00:33:26,220 --> 00:33:30,150
take the enrollment form to the CA and

00:33:28,470 --> 00:33:31,350
you're going to put in everything and at

00:33:30,150 --> 00:33:35,250
that point you're going to get a pop-up

00:33:31,350 --> 00:33:37,290
that says you know I you know we want to

00:33:35,250 --> 00:33:39,030
encrypt your pro your your encryption

00:33:37,290 --> 00:33:41,670
key we want to send it over do you

00:33:39,030 --> 00:33:43,530
accept and if you wanted to you could

00:33:41,670 --> 00:33:46,010
look at the transport key for the drm

00:33:43,530 --> 00:33:49,370
that's being used to to wrap everything

00:33:46,010 --> 00:33:51,840
so it gets wrapped at that point and

00:33:49,370 --> 00:33:54,150
into the transport key and sent over

00:33:51,840 --> 00:33:56,310
again it's wrapped by the drm transport

00:33:54,150 --> 00:34:00,390
key CA cannot decode it no one can

00:33:56,310 --> 00:34:02,010
decode it except for the drm and so it

00:34:00,390 --> 00:34:05,850
gets into the drm it gets stored in the

00:34:02,010 --> 00:34:07,260
drm it gets unencrypted in the token in

00:34:05,850 --> 00:34:10,350
the hardware token if you have one of

00:34:07,260 --> 00:34:14,010
those and gets stored in the internal

00:34:10,350 --> 00:34:16,139
database encrypted with another drm

00:34:14,010 --> 00:34:19,350
transport key if you're really

00:34:16,139 --> 00:34:21,419
interested it it gets there's a session

00:34:19,350 --> 00:34:26,159
key that is generated and the session

00:34:21,419 --> 00:34:28,290
key is its encrypted with a session key

00:34:26,159 --> 00:34:31,800
and then it's stored like that and then

00:34:28,290 --> 00:34:33,659
there is a drm a storage key which

00:34:31,800 --> 00:34:34,919
encrypts the session key and so we put

00:34:33,659 --> 00:34:37,440
all those things inside there so it's

00:34:34,919 --> 00:34:38,730
pretty complicated but part of the

00:34:37,440 --> 00:34:40,500
reason for that is that if someone gets

00:34:38,730 --> 00:34:43,560
to your database and they're able you

00:34:40,500 --> 00:34:45,750
know they're able to to get to the

00:34:43,560 --> 00:34:47,310
storage key then the only thing they can

00:34:45,750 --> 00:34:48,629
get to as a session key if they can get

00:34:47,310 --> 00:34:50,370
to the sesh then they have to go through

00:34:48,629 --> 00:34:54,600
the session key to be able to get to the

00:34:50,370 --> 00:34:56,340
actual private itself and then there's

00:34:54,600 --> 00:35:02,100
various notifications like Don the way

00:34:56,340 --> 00:35:06,470
back so again there's a very nice video

00:35:02,100 --> 00:35:06,470
there which I don't know

00:35:08,440 --> 00:35:18,160
oh that's a good question so it anyway

00:35:16,210 --> 00:35:25,440
there you will be able to get to these

00:35:18,160 --> 00:35:29,290
various things like severe so so let us

00:35:25,440 --> 00:35:34,060
go to the next oops oh maybe it is

00:35:29,290 --> 00:35:36,510
trying to okay not quite sure what's

00:35:34,060 --> 00:35:36,510
going on there

00:35:39,170 --> 00:35:48,260
okay so a dog tag architecture

00:35:44,710 --> 00:35:51,549
essentially most of the dog is a dog

00:35:48,260 --> 00:35:53,930
Texas subsystems of Java subsystems and

00:35:51,549 --> 00:35:57,670
the key point over here is at the bottom

00:35:53,930 --> 00:36:00,829
of the statque of NSS so NSS and the pkc

00:35:57,670 --> 00:36:02,299
s11 modules of them other things that do

00:36:00,829 --> 00:36:04,250
the encryption and the things that we

00:36:02,299 --> 00:36:06,020
rely on to talk to things like tokens

00:36:04,250 --> 00:36:10,450
and soph tokens and heart and Hardware

00:36:06,020 --> 00:36:14,329
tokens that gets that talks through jss

00:36:10,450 --> 00:36:16,790
which you know is the Java interface

00:36:14,329 --> 00:36:19,220
into NSS and that of course talks to

00:36:16,790 --> 00:36:21,829
tomcat through tomcat jss and now you

00:36:19,220 --> 00:36:25,780
have your JRE and your jvm over here

00:36:21,829 --> 00:36:28,490
which have all of the Java code in it

00:36:25,780 --> 00:36:31,040
and so there are various modules is

00:36:28,490 --> 00:36:33,470
authentication authorization those kinds

00:36:31,040 --> 00:36:34,940
of things and there are the legacy

00:36:33,470 --> 00:36:36,470
servlets so remember this has been

00:36:34,940 --> 00:36:37,760
around for a long long time there have

00:36:36,470 --> 00:36:39,530
been a lot of servlets that have been

00:36:37,760 --> 00:36:40,880
written to do various things and so they

00:36:39,530 --> 00:36:42,890
are all the legacy servlets that are

00:36:40,880 --> 00:36:45,170
there and there are the new servlets

00:36:42,890 --> 00:36:51,109
that have been added in dog tag 10 which

00:36:45,170 --> 00:36:53,480
allow you to do rest and so and they run

00:36:51,109 --> 00:36:55,670
in running rest easy and finally on the

00:36:53,480 --> 00:36:57,680
top of things you have your your users

00:36:55,670 --> 00:37:00,470
that are are communicating through the

00:36:57,680 --> 00:37:03,410
ssl port solent on ssl ports to either

00:37:00,470 --> 00:37:11,140
the in density or agent or admin

00:37:03,410 --> 00:37:11,140
interface so yep

00:37:11,710 --> 00:37:18,800
you can use non SSL ports for ocsp

00:37:15,650 --> 00:37:20,420
responses for example and there are

00:37:18,800 --> 00:37:23,810
certain kinds of enrollments that you

00:37:20,420 --> 00:37:27,200
can do through non SSL ports so the and

00:37:23,810 --> 00:37:29,810
an entity user so someone user who wants

00:37:27,200 --> 00:37:32,840
a certificate might go to a non ssl port

00:37:29,810 --> 00:37:35,870
and do some requests on how to get there

00:37:32,840 --> 00:37:39,140
on 44 that certificate for example so

00:37:35,870 --> 00:37:43,690
requests like that or 40 CSP responses

00:37:39,140 --> 00:37:43,690
where you don't need as a cell so

00:37:44,500 --> 00:37:51,380
anything that security sensitive would

00:37:46,640 --> 00:37:55,520
have to be on on the other side so so

00:37:51,380 --> 00:37:56,660
why in your restful interface so as I

00:37:55,520 --> 00:38:00,380
mentioned this has been around for a

00:37:56,660 --> 00:38:04,010
long time and a lot of this is started

00:38:00,380 --> 00:38:06,710
off in 1997 so it predated a lot of the

00:38:04,010 --> 00:38:08,330
new Java development and a lot of the

00:38:06,710 --> 00:38:10,760
new thinking in terms of how to

00:38:08,330 --> 00:38:13,700
interface with it or the subsystem so

00:38:10,760 --> 00:38:16,160
essentially the old interface had a

00:38:13,700 --> 00:38:20,360
bunch of su of the calls with name value

00:38:16,160 --> 00:38:22,190
pairs that being passed over and well it

00:38:20,360 --> 00:38:23,510
that's that's good in itself it makes it

00:38:22,190 --> 00:38:25,100
difficult to interoperate what that

00:38:23,510 --> 00:38:28,100
makes it difficult to to write clients

00:38:25,100 --> 00:38:30,920
for partly because because this has

00:38:28,100 --> 00:38:34,280
happened before a lot of the newer Java

00:38:30,920 --> 00:38:35,660
technologies you you can see code in

00:38:34,280 --> 00:38:39,290
there where we're doing things like

00:38:35,660 --> 00:38:40,550
handcrafting HTML responses where the

00:38:39,290 --> 00:38:44,000
error codes are not necessarily

00:38:40,550 --> 00:38:46,370
consistent that kind of thing now people

00:38:44,000 --> 00:38:48,740
that haven't run have written clients

00:38:46,370 --> 00:38:51,110
against this you know have written

00:38:48,740 --> 00:38:55,850
clients successfully against it over the

00:38:51,110 --> 00:38:59,710
years and and it all works but for new

00:38:55,850 --> 00:39:03,350
people coming in it's kind of hard so

00:38:59,710 --> 00:39:04,760
instead we added a new restful interface

00:39:03,350 --> 00:39:06,410
so the old interfaces are still there

00:39:04,760 --> 00:39:09,890
and they have to be there to keep our

00:39:06,410 --> 00:39:11,960
current clients happy but going forward

00:39:09,890 --> 00:39:13,460
we were will encourage people to use a

00:39:11,960 --> 00:39:15,770
new one speakers there's newer and

00:39:13,460 --> 00:39:19,610
spiffier and they're easier to debug and

00:39:15,770 --> 00:39:22,040
and figure out what's going on so the

00:39:19,610 --> 00:39:23,480
application is presented as a collection

00:39:22,040 --> 00:39:25,040
of resources so

00:39:23,480 --> 00:39:27,500
what kind of resources would you expect

00:39:25,040 --> 00:39:29,660
to see from a CA well you'd expect to

00:39:27,500 --> 00:39:31,790
see certificate requests you'd expect to

00:39:29,660 --> 00:39:34,130
see certificates what would you expect

00:39:31,790 --> 00:39:36,080
to see from a DRM you'd expect to see

00:39:34,130 --> 00:39:38,930
keys or key requests or things like that

00:39:36,080 --> 00:39:40,609
so there are a list there a collection

00:39:38,930 --> 00:39:43,130
of resources just as sort of an a

00:39:40,609 --> 00:39:46,310
restful framework it means that you have

00:39:43,130 --> 00:39:47,660
much more intuitive URLs so so as a

00:39:46,310 --> 00:39:50,540
collection of resources and there are

00:39:47,660 --> 00:39:52,520
you know within the rest a philosophy of

00:39:50,540 --> 00:39:55,340
things there are certain things that you

00:39:52,520 --> 00:39:58,460
can do you can you can do a get requests

00:39:55,340 --> 00:40:01,119
put requests post requests and each of

00:39:58,460 --> 00:40:03,590
those operations has a specific meaning

00:40:01,119 --> 00:40:05,540
as to what you're doing to the state of

00:40:03,590 --> 00:40:10,070
these individual resources so it means

00:40:05,540 --> 00:40:11,690
that the the set of operations that are

00:40:10,070 --> 00:40:15,109
being done are much more clearly defined

00:40:11,690 --> 00:40:17,119
and much more restricted and so you end

00:40:15,109 --> 00:40:19,190
up with much more intuitive URLs so if I

00:40:17,119 --> 00:40:22,430
want for example to create a new

00:40:19,190 --> 00:40:25,369
certificate request the old way of doing

00:40:22,430 --> 00:40:29,300
it would be to do a post to profile

00:40:25,369 --> 00:40:31,160
submit servlet SSL client okay which is

00:40:29,300 --> 00:40:33,980
you know that as intuitive as it could

00:40:31,160 --> 00:40:37,430
be the new way of doing it is to do a

00:40:33,980 --> 00:40:38,990
post to search requests and at that

00:40:37,430 --> 00:40:40,760
point you you're going to send in the

00:40:38,990 --> 00:40:42,140
appropriate object and the object will

00:40:40,760 --> 00:40:44,480
go to there and create a new a new

00:40:42,140 --> 00:40:47,690
certificate request so standard

00:40:44,480 --> 00:40:51,230
operations because now we use the rest

00:40:47,690 --> 00:40:54,680
easy framework we now have standardized

00:40:51,230 --> 00:40:57,380
responses so in fact now there's no

00:40:54,680 --> 00:41:03,609
longer any code that does the hand

00:40:57,380 --> 00:41:06,410
crafting of HML of HTML or JSON or XML

00:41:03,609 --> 00:41:08,840
basically you know we tell it tell the

00:41:06,410 --> 00:41:12,109
framework what the same back and then

00:41:08,840 --> 00:41:13,850
the framework goes ahead and using Jax

00:41:12,109 --> 00:41:15,770
be annotations and using various types

00:41:13,850 --> 00:41:17,630
of annotations determines how to turn

00:41:15,770 --> 00:41:22,700
the objects that need to be sent back

00:41:17,630 --> 00:41:24,830
into XML into into XML or into JSON and

00:41:22,700 --> 00:41:29,330
send it back and we have standard return

00:41:24,830 --> 00:41:31,760
codes as well to them so that's pretty

00:41:29,330 --> 00:41:33,650
nice the having the framework there to

00:41:31,760 --> 00:41:35,270
handle the serialization on the server

00:41:33,650 --> 00:41:36,980
side is really nice and at the same time

00:41:35,270 --> 00:41:39,500
on the client side because we

00:41:36,980 --> 00:41:41,030
rest easy we will use a rest easy client

00:41:39,500 --> 00:41:42,680
proxy framework where you can use

00:41:41,030 --> 00:41:45,410
exactly the same kind of thing on the

00:41:42,680 --> 00:41:47,540
other side to do all the D serialization

00:41:45,410 --> 00:41:50,600
on that side so that in your client you

00:41:47,540 --> 00:41:53,510
never have to worry about deserialising

00:41:50,600 --> 00:41:56,990
and and chain you know changing you know

00:41:53,510 --> 00:42:05,660
XML or JSON into a various types of

00:41:56,990 --> 00:42:11,720
objects yeah yes we do yes and they'll

00:42:05,660 --> 00:42:14,660
talk about that next yes so uh rests

00:42:11,720 --> 00:42:17,480
resources on the on the ca so on the ca

00:42:14,660 --> 00:42:20,060
we have suits suit requests users groups

00:42:17,480 --> 00:42:22,690
profiles yeah those are those are the

00:42:20,060 --> 00:42:25,460
things that you find their suits

00:42:22,690 --> 00:42:27,530
certificates search requests requests

00:42:25,460 --> 00:42:29,240
for certificates you have various users

00:42:27,530 --> 00:42:32,810
and groups that you can do this is the

00:42:29,240 --> 00:42:35,630
administration of the of the CA and

00:42:32,810 --> 00:42:39,109
profiles again is certificate profiles

00:42:35,630 --> 00:42:42,260
you can do things like configure your

00:42:39,109 --> 00:42:44,420
own type of profile and so on not all of

00:42:42,260 --> 00:42:45,920
these are fully profiles is the next

00:42:44,420 --> 00:42:47,450
thing Albert as we talked about future

00:42:45,920 --> 00:42:50,180
directions is the next thing to be

00:42:47,450 --> 00:42:53,359
completed but most of the rest of these

00:42:50,180 --> 00:42:55,250
are completed so if you want to list all

00:42:53,359 --> 00:42:58,609
your certificates for example you do a

00:42:55,250 --> 00:43:01,070
get on / suits if you want to get a

00:42:58,609 --> 00:43:03,500
specific search you do a get on / suit /

00:43:01,070 --> 00:43:06,500
ID where ID is this you know what there

00:43:03,500 --> 00:43:09,109
are various IDs that are available you

00:43:06,500 --> 00:43:10,480
can do as opposed to / suit / suits in

00:43:09,109 --> 00:43:12,410
this case it's a post because there are

00:43:10,480 --> 00:43:15,230
multiple different ways that you can

00:43:12,410 --> 00:43:17,869
search if you want to create a new

00:43:15,230 --> 00:43:21,560
search request you do a post on / search

00:43:17,869 --> 00:43:23,630
requests and if you want to create a new

00:43:21,560 --> 00:43:27,740
user for example you do a post on /

00:43:23,630 --> 00:43:29,770
admin / users the admin is some of these

00:43:27,740 --> 00:43:32,690
is a admin some of these say agents

00:43:29,770 --> 00:43:34,369
beforehand because we have to some of

00:43:32,690 --> 00:43:37,130
the a lot of these operations require

00:43:34,369 --> 00:43:38,420
authentication and you either require an

00:43:37,130 --> 00:43:40,310
agent authentication or admin

00:43:38,420 --> 00:43:43,250
authentication and there are different

00:43:40,310 --> 00:43:44,119
ways of doing that so the way we made

00:43:43,250 --> 00:43:46,520
sure that it got the right

00:43:44,119 --> 00:43:47,960
authentication is partly through

00:43:46,520 --> 00:43:49,720
annotations and partly through a

00:43:47,960 --> 00:43:55,960
sanitizing URL

00:43:49,720 --> 00:43:59,950
yeah yes so and this is a common

00:43:55,960 --> 00:44:01,960
criteria sort of thing but an agent is

00:43:59,950 --> 00:44:04,090
someone that handles certificate

00:44:01,960 --> 00:44:06,730
operations so someone that can approve

00:44:04,090 --> 00:44:11,099
suits for example search requests and

00:44:06,730 --> 00:44:13,630
issue certificates and can approve

00:44:11,099 --> 00:44:17,140
profiles and things like that and an

00:44:13,630 --> 00:44:19,869
admin is someone who can manage users

00:44:17,140 --> 00:44:22,090
for example can add users add more

00:44:19,869 --> 00:44:23,650
agents to the system but in general is

00:44:22,090 --> 00:44:26,080
not is not someone that does any

00:44:23,650 --> 00:44:29,050
certificate operations okay but

00:44:26,080 --> 00:44:30,880
basically and and there's four common

00:44:29,050 --> 00:44:32,890
criteria it's a little weird because you

00:44:30,880 --> 00:44:35,380
have to have you have to have more than

00:44:32,890 --> 00:44:37,359
one agent to prove a profile so for

00:44:35,380 --> 00:44:40,720
example so the way we did that is an

00:44:37,359 --> 00:44:42,099
admin can modify a profile and an agent

00:44:40,720 --> 00:44:44,290
has to approve it so you have to have

00:44:42,099 --> 00:44:45,820
two different people conceivably now you

00:44:44,290 --> 00:44:47,500
could that person could be the one in

00:44:45,820 --> 00:44:49,510
the same person but they have to there

00:44:47,500 --> 00:44:54,190
it's at least two chain to two different

00:44:49,510 --> 00:44:55,599
users there okay so the rest easy client

00:44:54,190 --> 00:44:58,750
proxy framework which is I mentioned

00:44:55,599 --> 00:45:02,980
before it's really nice it's a way of

00:44:58,750 --> 00:45:06,849
using a Jackson Jackson s annotations on

00:45:02,980 --> 00:45:08,470
the client side and what that means is

00:45:06,849 --> 00:45:11,200
that the clients and the server share

00:45:08,470 --> 00:45:14,080
and annotated interfaces so there are

00:45:11,200 --> 00:45:16,180
interface classes that are shared

00:45:14,080 --> 00:45:19,060
between both of these and this defines

00:45:16,180 --> 00:45:21,280
the exact interface that that you're

00:45:19,060 --> 00:45:24,760
going to to use when you're when you're

00:45:21,280 --> 00:45:26,920
writing a client and and what the server

00:45:24,760 --> 00:45:31,330
is going to show so what so you know on

00:45:26,920 --> 00:45:34,150
the client side the framework will take

00:45:31,330 --> 00:45:36,040
the request that you have and do all the

00:45:34,150 --> 00:45:37,330
serialization and deserialization and

00:45:36,040 --> 00:45:38,920
send it send over the appropriate

00:45:37,330 --> 00:45:40,960
objects and make the appropriate rest

00:45:38,920 --> 00:45:43,750
call and on the server side it's going

00:45:40,960 --> 00:45:45,310
to do the DC realization of of

00:45:43,750 --> 00:45:48,220
everything there in turn it into objects

00:45:45,310 --> 00:45:50,440
and act on it send it back send back the

00:45:48,220 --> 00:45:52,810
appropriate objects you know serialized

00:45:50,440 --> 00:45:55,000
in the right way and on the client side

00:45:52,810 --> 00:45:56,440
it's going to be unpacked and all of

00:45:55,000 --> 00:45:58,599
this is done by the framework which is

00:45:56,440 --> 00:46:01,420
really nice so you never have to worry

00:45:58,599 --> 00:46:03,549
about that and I'll show you hopefully

00:46:01,420 --> 00:46:07,150
I can figure out how to get the display

00:46:03,549 --> 00:46:09,520
a bit of code that does that so the

00:46:07,150 --> 00:46:12,609
clients again instantiates these these

00:46:09,520 --> 00:46:14,859
rest resources and creates proxy objects

00:46:12,609 --> 00:46:16,000
and these proxy objects handle all all

00:46:14,859 --> 00:46:17,319
the things you have to do and then all

00:46:16,000 --> 00:46:20,680
you're doing at that point is you are

00:46:17,319 --> 00:46:22,510
making method calls on these objects

00:46:20,680 --> 00:46:24,880
rather than trying to do all these other

00:46:22,510 --> 00:46:27,460
things so the client framework will then

00:46:24,880 --> 00:46:29,680
convert it to HTTP requests and Marshall

00:46:27,460 --> 00:46:31,359
its to the JSON or XML and then

00:46:29,680 --> 00:46:38,319
ultimately it goes on to the other side

00:46:31,359 --> 00:46:40,180
we have a new CLI new client interface

00:46:38,319 --> 00:46:42,700
over here a command-line interface

00:46:40,180 --> 00:46:44,380
called just pki and that uses that

00:46:42,700 --> 00:46:47,049
client framework extensively it's a

00:46:44,380 --> 00:46:49,420
really nice if you you know you can do

00:46:47,049 --> 00:46:51,730
sort of pki and just do a lot of

00:46:49,420 --> 00:46:52,660
completion kind of sort of things and it

00:46:51,730 --> 00:46:58,660
tells you the kinds of things that you

00:46:52,660 --> 00:47:01,839
were able to do so so writing client

00:46:58,660 --> 00:47:04,630
code for the rest interface very easy in

00:47:01,839 --> 00:47:07,240
Java as I've mentioned there's another

00:47:04,630 --> 00:47:10,619
YouTube movie which which I put up there

00:47:07,240 --> 00:47:13,390
which I will try and and print do now

00:47:10,619 --> 00:47:15,609
but before I do that there is some

00:47:13,390 --> 00:47:18,040
Python support that's available which

00:47:15,609 --> 00:47:19,599
needs to be enhanced ultimately we want

00:47:18,040 --> 00:47:21,700
to be made we want to be able to make

00:47:19,599 --> 00:47:25,299
part of the pipe and support as easy as

00:47:21,700 --> 00:47:26,859
the Java support so that on the Python

00:47:25,299 --> 00:47:30,250
side you can just instantiate an object

00:47:26,859 --> 00:47:31,960
and call method calls and have it have

00:47:30,250 --> 00:47:34,089
us worry about do this and doing the

00:47:31,960 --> 00:47:35,650
serialization back and forth it's not

00:47:34,089 --> 00:47:39,339
quite there in Python yet but it is

00:47:35,650 --> 00:47:40,750
absolutely there in Java and the rest

00:47:39,339 --> 00:47:42,910
interface is of course documented at

00:47:40,750 --> 00:47:47,170
these various resources here so let me

00:47:42,910 --> 00:47:51,869
try I don't and see if I can figure out

00:47:47,170 --> 00:47:51,869
how to get this to be displayed

00:48:05,400 --> 00:48:21,600
my browser in the other window okay okay

00:48:10,530 --> 00:48:27,240
yeah this one I don't know okay hang on

00:48:21,600 --> 00:48:30,080
just a sec to me either that like if i

00:48:27,240 --> 00:48:30,080
can get to eclipse

00:48:43,560 --> 00:48:49,540
ok well there's eclipse alright so the

00:48:47,710 --> 00:48:51,910
movie would have been me clicking

00:48:49,540 --> 00:48:53,050
through eclipse so this will be the same

00:48:51,910 --> 00:48:54,100
sort of thing as me cooking through

00:48:53,050 --> 00:48:56,680
because it's kind of weird to see a

00:48:54,100 --> 00:48:58,690
movie to a presentation and have a movie

00:48:56,680 --> 00:49:02,920
of your soul of yourself talking about a

00:48:58,690 --> 00:49:04,930
presentation so but here is so here for

00:49:02,920 --> 00:49:08,080
example is this is on the client side

00:49:04,930 --> 00:49:10,120
this is a class called see a client and

00:49:08,080 --> 00:49:13,840
the see a client is something that would

00:49:10,120 --> 00:49:14,980
be instantiated on the client side what

00:49:13,840 --> 00:49:17,530
you'll notice is that you can

00:49:14,980 --> 00:49:19,180
instantiate this client by passing in

00:49:17,530 --> 00:49:20,950
something called a client config object

00:49:19,180 --> 00:49:25,120
client config object it's just a bean

00:49:20,950 --> 00:49:26,560
object that basically has the the kinds

00:49:25,120 --> 00:49:29,020
of things that you would need to do to

00:49:26,560 --> 00:49:31,390
tell you how to do your connection so it

00:49:29,020 --> 00:49:35,680
says things like the suva URI has things

00:49:31,390 --> 00:49:37,030
like where your your client databases in

00:49:35,680 --> 00:49:38,680
case you have to do client

00:49:37,030 --> 00:49:40,150
authentication so you need a certificate

00:49:38,680 --> 00:49:41,440
in a client database that tells you how

00:49:40,150 --> 00:49:43,780
to get there and what the nickname with

00:49:41,440 --> 00:49:45,970
that suit is and so on but that's the

00:49:43,780 --> 00:49:47,980
client config you pass that in we have a

00:49:45,970 --> 00:49:50,920
class to help a class called PK client

00:49:47,980 --> 00:49:52,210
which does the connections for you and

00:49:50,920 --> 00:49:54,760
then you'll notice the next thing we do

00:49:52,210 --> 00:49:58,030
is we create proxies for these three

00:49:54,760 --> 00:49:59,730
types of objects over here these three

00:49:58,030 --> 00:50:01,990
types of resources the cert resource

00:49:59,730 --> 00:50:06,270
assert request resource and a profile

00:50:01,990 --> 00:50:06,270
resource and if you look at one of these

00:50:11,119 --> 00:50:14,479
just you

00:50:17,530 --> 00:50:24,670
if you look at one of these it's this is

00:50:20,290 --> 00:50:26,950
exactly the the interface that is shared

00:50:24,670 --> 00:50:30,130
between the client and server right so

00:50:26,950 --> 00:50:32,800
you can see that we have it's a bunch of

00:50:30,130 --> 00:50:33,940
method calls that are defined these are

00:50:32,800 --> 00:50:35,980
the method calls that are essentially at

00:50:33,940 --> 00:50:39,220
you're going to cool it tells you what

00:50:35,980 --> 00:50:42,070
comes what you need to put in what comes

00:50:39,220 --> 00:50:43,750
out there's a path over here so this

00:50:42,070 --> 00:50:46,210
tells you that this if you would a cool

00:50:43,750 --> 00:50:48,730
for example in role suits it would

00:50:46,210 --> 00:50:50,920
ultimately end up doing a post to suit

00:50:48,730 --> 00:50:53,620
requests serializing things in the

00:50:50,920 --> 00:50:55,870
appropriate way and how does it know how

00:50:53,620 --> 00:50:57,820
to serialize those things it knows how

00:50:55,870 --> 00:51:06,370
to serialize for example a certain

00:50:57,820 --> 00:51:09,130
enrollment request because it a certain

00:51:06,370 --> 00:51:11,110
Roman request itself has annotations and

00:51:09,130 --> 00:51:12,460
the annotations themselves and these are

00:51:11,110 --> 00:51:16,270
Jack's p annotations are telling how to

00:51:12,460 --> 00:51:19,690
tune this object into JSON okay or turn

00:51:16,270 --> 00:51:23,320
the attorney Jason back into ok to order

00:51:19,690 --> 00:51:28,300
JSON or into XML or to take the XML into

00:51:23,320 --> 00:51:32,320
it back okay so how do you use this

00:51:28,300 --> 00:51:35,770
thing well basically we have some test

00:51:32,320 --> 00:51:43,480
code over here which can show you kind

00:51:35,770 --> 00:51:51,670
of how to use it so it all the way up

00:51:43,480 --> 00:51:53,250
here okay so in this code over here okay

00:51:51,670 --> 00:51:55,750
you can see basically we were

00:51:53,250 --> 00:51:59,650
initializing initializing sort of tokens

00:51:55,750 --> 00:52:01,090
on getting out our client suit but we're

00:51:59,650 --> 00:52:03,250
going to create a creator see a client

00:52:01,090 --> 00:52:04,540
and then when you create after you've

00:52:03,250 --> 00:52:07,360
create the see a client and you've

00:52:04,540 --> 00:52:09,880
passed in your config we're going to do

00:52:07,360 --> 00:52:11,200
things like list requests and so on and

00:52:09,880 --> 00:52:15,010
so forth and when you when you call

00:52:11,200 --> 00:52:18,100
client list requests for example it's

00:52:15,010 --> 00:52:19,630
going to take that it's it's not just

00:52:18,100 --> 00:52:22,420
doing a method call right it's it's

00:52:19,630 --> 00:52:25,600
taking it and it's turning it into an

00:52:22,420 --> 00:52:26,820
HTTP request sending it off to the suit

00:52:25,600 --> 00:52:28,780
you know with the appropriate

00:52:26,820 --> 00:52:30,270
serialization sending it off the server

00:52:28,780 --> 00:52:33,000
sending it back

00:52:30,270 --> 00:52:34,800
and getting the response deserialising

00:52:33,000 --> 00:52:37,290
the response appropriately and putting

00:52:34,800 --> 00:52:38,610
it into a java object but that's all you

00:52:37,290 --> 00:52:40,560
need to do you never you don't have to

00:52:38,610 --> 00:52:42,570
worry about all those details you just

00:52:40,560 --> 00:52:44,730
need to worry about you know what to do

00:52:42,570 --> 00:52:46,770
once you have it request there and so

00:52:44,730 --> 00:52:49,590
there's this code and then of course is

00:52:46,770 --> 00:52:52,890
the code for the pki command-line

00:52:49,590 --> 00:52:54,530
utility that shows you how to basically

00:52:52,890 --> 00:52:57,590
do this kind of stuff it's pretty easy

00:52:54,530 --> 00:53:00,510
I'm sorry yes yes it is it is absolutely

00:52:57,590 --> 00:53:04,050
so everything I've mentioned over here

00:53:00,510 --> 00:53:15,080
is in the district so okay so now let's

00:53:04,050 --> 00:53:15,080
go back to good okay

00:53:18,109 --> 00:53:24,319
okay similarly just to mention these are

00:53:21,799 --> 00:53:26,509
the drm resources west resources that

00:53:24,319 --> 00:53:29,299
are on the drm so we have things like

00:53:26,509 --> 00:53:30,950
keys key requests users groups and some

00:53:29,299 --> 00:53:32,779
other said system moonship but basically

00:53:30,950 --> 00:53:35,150
keys and keys requests are the most

00:53:32,779 --> 00:53:36,680
important things and of course so for

00:53:35,150 --> 00:53:39,259
example if you want to list the key

00:53:36,680 --> 00:53:43,390
requests you can do get agent request

00:53:39,259 --> 00:53:45,410
notice that all of these have an agent

00:53:43,390 --> 00:53:46,700
appended to the beginning of the URL

00:53:45,410 --> 00:53:48,920
because they're all things that are

00:53:46,700 --> 00:53:52,460
sensitive and require authentication of

00:53:48,920 --> 00:53:54,529
various sorts and so you can do things

00:53:52,460 --> 00:53:56,420
like all chi Chi's and approve keys and

00:53:54,529 --> 00:53:57,980
so on and so forth now one of the things

00:53:56,420 --> 00:54:01,519
that we you'll notice there's an ID

00:53:57,980 --> 00:54:04,700
thing in inside here and this is one of

00:54:01,519 --> 00:54:07,549
the enhancements we further did to the

00:54:04,700 --> 00:54:11,509
drm so the drm is traditionally used to

00:54:07,549 --> 00:54:12,739
store x509 private keys only with the

00:54:11,509 --> 00:54:14,890
pub Lane we use the public key is an

00:54:12,739 --> 00:54:17,749
identifier but with the rest interface

00:54:14,890 --> 00:54:20,329
we allow the client to provide an

00:54:17,749 --> 00:54:22,759
identifier a client ID identifier which

00:54:20,329 --> 00:54:25,369
means that theoretically you could store

00:54:22,759 --> 00:54:28,339
just about anything in the drm as long

00:54:25,369 --> 00:54:31,819
as it's packaged properly and the reason

00:54:28,339 --> 00:54:33,650
we did this is we wanted to we had we

00:54:31,819 --> 00:54:38,180
had a case where we were thinking about

00:54:33,650 --> 00:54:41,509
s growing disk encryption keys so these

00:54:38,180 --> 00:54:43,940
are symmetric keys used to encrypt disks

00:54:41,509 --> 00:54:45,559
and then ultimately what would happen is

00:54:43,940 --> 00:54:46,880
that when you start up as a disk for

00:54:45,559 --> 00:54:49,519
example in a cloud or something like

00:54:46,880 --> 00:54:52,759
that it needs its keys to be unencrypted

00:54:49,519 --> 00:54:54,680
so you would go to the server and you

00:54:52,759 --> 00:54:58,730
would be able to retrieve these

00:54:54,680 --> 00:54:59,930
encryption keys and but we did we wanted

00:54:58,730 --> 00:55:01,609
to do it as sort of a proof of concept

00:54:59,930 --> 00:55:04,430
we didn't want to implement something

00:55:01,609 --> 00:55:05,749
like km IP you know because we weren't

00:55:04,430 --> 00:55:09,319
quite sure if that we were going to

00:55:05,749 --> 00:55:11,509
completely do it but but we so if but

00:55:09,319 --> 00:55:13,910
you can take anything and you can put it

00:55:11,509 --> 00:55:17,299
into sort of the same CRM f structure

00:55:13,910 --> 00:55:19,849
that you use for private keys and then

00:55:17,299 --> 00:55:22,099
you can send it off to to the the drm

00:55:19,849 --> 00:55:24,380
and as long as it's in the appropriate

00:55:22,099 --> 00:55:26,210
package and get something coded and so

00:55:24,380 --> 00:55:30,440
on it can be stored and can retrieved

00:55:26,210 --> 00:55:31,690
accordingly okay and so over here we

00:55:30,440 --> 00:55:34,510
have some sample code

00:55:31,690 --> 00:55:36,310
that does exactly that it installs

00:55:34,510 --> 00:55:38,619
things like symmetric keys and stores

00:55:36,310 --> 00:55:40,599
things like pot passphrases for example

00:55:38,619 --> 00:55:42,940
anything you can conceivably want to

00:55:40,599 --> 00:55:44,859
store over there we haven't tested it

00:55:42,940 --> 00:55:49,750
for if things that are larger than the

00:55:44,859 --> 00:55:52,210
size of a of a of a key of an asymmetric

00:55:49,750 --> 00:55:54,819
key so that may be tricky we may have to

00:55:52,210 --> 00:55:56,440
add things to to fix that but in general

00:55:54,819 --> 00:55:58,869
for the things that we try to store

00:55:56,440 --> 00:56:01,569
things seem to work out okay and in fact

00:55:58,869 --> 00:56:04,480
this new capability is being

00:56:01,569 --> 00:56:07,480
investigated currently as a back end to

00:56:04,480 --> 00:56:09,430
the cloud keep group in the cloud keep

00:56:07,480 --> 00:56:15,670
group or trying the rackspace they're

00:56:09,430 --> 00:56:17,170
trying to design a that they have an API

00:56:15,670 --> 00:56:20,380
and they're trying to design something

00:56:17,170 --> 00:56:23,440
that will store keys and suits and all

00:56:20,380 --> 00:56:25,810
secrets essentially in one place on

00:56:23,440 --> 00:56:27,940
their network and they're thinking about

00:56:25,810 --> 00:56:32,730
using the drm as a back-end for that so

00:56:27,940 --> 00:56:37,810
using this functionality kind of cool so

00:56:32,730 --> 00:56:40,240
future directions dr. 10 one scheduled

00:56:37,810 --> 00:56:43,720
for four door 20 which is January next

00:56:40,240 --> 00:56:46,210
year pretty soon actually from the looks

00:56:43,720 --> 00:56:47,940
of things we're going to extend the rest

00:56:46,210 --> 00:56:51,400
interface to manage certificate profiles

00:56:47,940 --> 00:56:54,369
and then free IPA is going to use that

00:56:51,400 --> 00:56:56,560
to start managing their profiles and so

00:56:54,369 --> 00:56:59,319
on add your own profiles we're going to

00:56:56,560 --> 00:57:01,150
enhance the Python framework so that it

00:56:59,319 --> 00:57:05,079
makes it at least as easy as the Java

00:57:01,150 --> 00:57:07,240
framework and we're actually taking one

00:57:05,079 --> 00:57:08,980
of the components the TPS which is

00:57:07,240 --> 00:57:11,349
actually an Apache a component right now

00:57:08,980 --> 00:57:13,930
we're going to rewrite it as a Java

00:57:11,349 --> 00:57:18,849
component residing in a tomcat instance

00:57:13,930 --> 00:57:20,829
and if we do that then we and we may be

00:57:18,849 --> 00:57:24,010
able to take that and put it in IPA and

00:57:20,829 --> 00:57:26,710
have IPA is a complete solution one you

00:57:24,010 --> 00:57:30,960
know tomcat solution for doing all your

00:57:26,710 --> 00:57:30,960
token management and one one shot so

00:57:31,559 --> 00:57:44,819
uh we have not put it in another web

00:57:40,949 --> 00:57:46,829
server yet so another application server

00:57:44,819 --> 00:57:49,109
yet so there has been talk about putting

00:57:46,829 --> 00:57:50,699
it and say jboss or something like that

00:57:49,109 --> 00:57:52,619
and there would have to be some

00:57:50,699 --> 00:57:54,479
repackaging that's done because right

00:57:52,619 --> 00:57:57,390
now we kind of take it and we explode we

00:57:54,479 --> 00:58:00,479
you know it's not in an ear or anything

00:57:57,390 --> 00:58:02,430
like that yeah its lower law or anything

00:58:00,479 --> 00:58:03,509
like that it's just but there's been

00:58:02,430 --> 00:58:05,579
talk about doing that but we haven't

00:58:03,509 --> 00:58:29,359
we're done yet so is this work to be

00:58:05,579 --> 00:58:29,359
done there okay yes absolutely

00:58:30,580 --> 00:58:46,400
seeing you as a partition the data store

00:58:37,190 --> 00:58:49,430
inside whatever key storming is by in

00:58:46,400 --> 00:58:53,150
general if you have agents that are on

00:58:49,430 --> 00:58:57,020
the drm they can pretty much see all the

00:58:53,150 --> 00:58:58,640
keys that are there so we don't write so

00:58:57,020 --> 00:59:00,320
we don't we don't have any I mean we

00:58:58,640 --> 00:59:04,430
don't have any partitioning that that

00:59:00,320 --> 00:59:06,440
way exactly you might be able to write

00:59:04,430 --> 00:59:10,280
some sort of thing that does that does

00:59:06,440 --> 00:59:12,380
that but but yes within the grm itself

00:59:10,280 --> 00:59:21,800
an agent will be able to join that's

00:59:12,380 --> 00:59:23,690
right okay resources ircs we're always

00:59:21,800 --> 00:59:25,880
on IRC so if you want to get all of us

00:59:23,690 --> 00:59:28,190
that's the easiest and simplest way to

00:59:25,880 --> 00:59:33,040
do so their various mailing lists

00:59:28,190 --> 00:59:39,200
project track and so on and so forth and

00:59:33,040 --> 00:59:43,280
questions any more questions yes my name

00:59:39,200 --> 00:59:45,740
free note is a li usually so it I say

00:59:43,280 --> 00:59:47,960
usually because there's a there someone

00:59:45,740 --> 00:59:49,910
else's has the registered name a li so

00:59:47,960 --> 00:59:52,970
we kind of fight over to ever gets on

00:59:49,910 --> 00:59:56,260
there first but a li orale underscore

00:59:52,970 --> 00:59:56,260
whatever so

00:59:57,490 --> 01:00:11,920
the I'm sorry mano le le le yeah so all

01:00:07,940 --> 01:00:20,810
right any other questions I think I'm

01:00:11,920 --> 01:00:22,670
exactly on time so most enterprises

01:00:20,810 --> 01:00:24,740
today realize that usernames and

01:00:22,670 --> 01:00:26,540
passwords alone aren't enough to keep

01:00:24,740 --> 01:00:28,970
their networks saved from unauthorized

01:00:26,540 --> 01:00:30,410
intrusions that's my two-factor

01:00:28,970 --> 01:00:32,780
authentication has gotten so popular

01:00:30,410 --> 01:00:34,850
lately that adds that extra layer of

01:00:32,780 --> 01:00:37,700
protection enterprise networks need to

01:00:34,850 --> 01:00:39,170
stay safe but what you may not know is

01:00:37,700 --> 01:00:41,510
that some two-factor authentication

01:00:39,170 --> 01:00:43,730
solutions they're better than others

01:00:41,510 --> 01:00:46,970
like two-factor strong authentication

01:00:43,730 --> 01:00:49,010
with wicked wicked goes beyond other

01:00:46,970 --> 01:00:51,620
authentication systems by being less

01:00:49,010 --> 01:00:54,440
expensive easier to implement and easier

01:00:51,620 --> 01:00:56,090
to use giving software-based token

01:00:54,440 --> 01:00:58,970
clients built to run on all major

01:00:56,090 --> 01:01:01,540
devices and OSS including iOS and

01:00:58,970 --> 01:01:03,890
Android these tokens utilize a

01:01:01,540 --> 01:01:06,110
public/private key combination that's

01:01:03,890 --> 01:01:08,240
generated an on device so there aren't

01:01:06,110 --> 01:01:10,760
any shared secrets flying around or

01:01:08,240 --> 01:01:13,610
attackers to hijack or which require any

01:01:10,760 --> 01:01:15,500
special handling instead all keys are

01:01:13,610 --> 01:01:17,960
kept secure and private between the

01:01:15,500 --> 01:01:20,150
requesting token and your server which

01:01:17,960 --> 01:01:21,760
you control aim house making it the most

01:01:20,150 --> 01:01:24,440
secure way possible to perform

01:01:21,760 --> 01:01:27,230
authentication encryption and with an

01:01:24,440 --> 01:01:30,020
extensive flexible API and support for

01:01:27,230 --> 01:01:32,000
protocols like ldap and radius wicked

01:01:30,020 --> 01:01:32,829
works with any enterprise network

01:01:32,000 --> 01:01:35,200
architecture

01:01:32,829 --> 01:01:37,869
to protect the IT systems vital to your

01:01:35,200 --> 01:01:39,969
enterprise download your wicked free

01:01:37,869 --> 01:01:41,440
trial today regardless of whether you're

01:01:39,969 --> 01:01:43,809
considering two-factor authentication

01:01:41,440 --> 01:01:46,239
for the first time we're just ready to

01:01:43,809 --> 01:01:48,579
ditch your existing expensive key file

01:01:46,239 --> 01:01:50,650
system we can help with easy to

01:01:48,579 --> 01:01:54,630
implement easy to use strong

01:01:50,650 --> 01:01:54,630
authentication from wicked

01:01:59,290 --> 01:02:05,740
how's that sigh every way this is the

01:02:02,500 --> 01:02:07,900
way to better utilize all your resources

01:02:05,740 --> 01:02:11,350
and it makes managing all your resources

01:02:07,900 --> 01:02:15,180
pretty easy all of the innovation is

01:02:11,350 --> 01:02:18,670
happening in open source the

01:02:15,180 --> 01:02:20,500
collaborative nature and of the you know

01:02:18,670 --> 01:02:22,810
of the community and the speed at which

01:02:20,500 --> 01:02:24,610
these are these you know these these

01:02:22,810 --> 01:02:26,920
deficiencies these bugs are getting

01:02:24,610 --> 01:02:29,500
discovered and then fixed is it like

01:02:26,920 --> 01:02:32,230
that really shows the power of the you

01:02:29,500 --> 01:02:33,850
know of the open source community it is

01:02:32,230 --> 01:02:38,050
global and it's definitely because of

01:02:33,850 --> 01:02:44,380
the users community people are extremely

01:02:38,050 --> 01:02:46,270
friendly and always ready to help if you

01:02:44,380 --> 01:02:48,580
go on tire see any day you'll see these

01:02:46,270 --> 01:02:50,280
guys helping each other out and they're

01:02:48,580 --> 01:02:52,990
all doing it like in a selfless manner

01:02:50,280 --> 01:02:55,980
the product is transparent for everyone

01:02:52,990 --> 01:02:58,930
everyone can look at the code base

01:02:55,980 --> 01:03:00,640
everyone can see how growth darkest is

01:02:58,930 --> 01:03:06,520
being built nothing nothing is

01:03:00,640 --> 01:03:09,160
proprietary everything is open in many

01:03:06,520 --> 01:03:13,360
ways it's absolutely vital to the the

01:03:09,160 --> 01:03:17,140
ongoing health cloudstack the most

01:03:13,360 --> 01:03:21,029
exciting event in recent memory for me

01:03:17,140 --> 01:03:23,669
was our first developer boot camp

01:03:21,029 --> 01:03:26,339
and our call gave people I gave you two

01:03:23,669 --> 01:03:30,299
weeks notice to come attend I was

01:03:26,339 --> 01:03:34,469
expecting 25 or 30 people so we ended up

01:03:30,299 --> 01:03:37,289
with 87 people and had to go get more

01:03:34,469 --> 01:03:39,839
chairs in the room twice everything

01:03:37,289 --> 01:03:43,079
within cloud computing is commodity and

01:03:39,839 --> 01:03:46,140
is open source and so I don't think that

01:03:43,079 --> 01:03:47,909
you will you'll see anywhere where open

01:03:46,140 --> 01:03:50,939
source is not pervasive in cloud

01:03:47,909 --> 01:03:53,489
computing and so i think it's i think

01:03:50,939 --> 01:03:55,019
it's an assumption i think when you talk

01:03:53,489 --> 01:03:58,729
about cloud computing you're really

01:03:55,019 --> 01:03:58,729
talking about a source cloud computing

01:03:58,999 --> 01:04:05,069
cloud sac is a robust solution for large

01:04:02,309 --> 01:04:07,439
deployments you have dozens of data

01:04:05,069 --> 01:04:11,489
centers and thousands of servers in each

01:04:07,439 --> 01:04:14,729
data centers these hardware is going to

01:04:11,489 --> 01:04:17,969
fail and CloudStack is designed to

01:04:14,729 --> 01:04:20,429
handle number one that mass scale number

01:04:17,969 --> 01:04:23,159
two it's designed to handle the failure

01:04:20,429 --> 01:04:26,039
that inevitably happens in large

01:04:23,159 --> 01:04:30,209
deployments started working on cobb deck

01:04:26,039 --> 01:04:33,479
over four years ago and it was the

01:04:30,209 --> 01:04:35,279
original set of people working on it had

01:04:33,479 --> 01:04:39,359
a background of delivering software

01:04:35,279 --> 01:04:43,619
telcos and service providers lots of QA

01:04:39,359 --> 01:04:47,219
lots of users actually using it high

01:04:43,619 --> 01:04:50,309
availability is a key feature multiple

01:04:47,219 --> 01:04:52,469
hypervisors support different network

01:04:50,309 --> 01:04:55,499
models we can pick up whatever suits you

01:04:52,469 --> 01:04:57,269
better while step management server can

01:04:55,499 --> 01:05:00,959
be deployed in different physical

01:04:57,269 --> 01:05:02,609
machines it definitely has a huge

01:05:00,959 --> 01:05:07,589
footprint it's being deployed everywhere

01:05:02,609 --> 01:05:10,169
there's a major movie studio that they

01:05:07,589 --> 01:05:13,380
were using cloudstack they were using it

01:05:10,169 --> 01:05:15,449
to transcode video and i thought that

01:05:13,380 --> 01:05:17,099
was terribly fascinating what i found

01:05:15,449 --> 01:05:20,369
more fascinating is what they did during

01:05:17,099 --> 01:05:23,159
lunch where they would spin up you know

01:05:20,369 --> 01:05:24,330
50 or 60 game servers then as soon as

01:05:23,159 --> 01:05:26,160
lunch was over they would

01:05:24,330 --> 01:05:30,420
all the instances and go back to doing

01:05:26,160 --> 01:05:31,920
real work CloudStack is vast it touches

01:05:30,420 --> 01:05:33,990
so many different aspects and there's no

01:05:31,920 --> 01:05:36,360
one person that's kind of like a master

01:05:33,990 --> 01:05:40,500
of all those realms I think clouds stack

01:05:36,360 --> 01:05:42,720
as a project is going to be one of the

01:05:40,500 --> 01:05:46,770
leaders simply because it's some of the

01:05:42,720 --> 01:05:52,320
most feature fallen and and robust

01:05:46,770 --> 01:05:55,100
platforms out there Adam senior living

01:05:52,320 --> 01:05:55,100
through the clouds dag

01:06:07,900 --> 01:06:09,960
you

01:06:13,290 --> 01:06:18,369
when we created asterisk over a decade

01:06:16,000 --> 01:06:20,320
ago we could not have imagined that

01:06:18,369 --> 01:06:22,540
asterisk would not only become the most

01:06:20,320 --> 01:06:24,670
widely adopted open source communication

01:06:22,540 --> 01:06:26,710
software on the planet but that it would

01:06:24,670 --> 01:06:29,230
impact the entire industry in the way

01:06:26,710 --> 01:06:31,210
that it has today asterisk has found its

01:06:29,230 --> 01:06:33,849
way in the more than 170 countries and

01:06:31,210 --> 01:06:35,800
virtually every fortune 1000 company the

01:06:33,849 --> 01:06:37,900
success of asterisk has enabled a

01:06:35,800 --> 01:06:39,280
transition of power from the hands of

01:06:37,900 --> 01:06:41,560
the traditional proprietary phone

01:06:39,280 --> 01:06:43,960
vendors into the hands of the users and

01:06:41,560 --> 01:06:45,910
administrators of phone systems using

01:06:43,960 --> 01:06:47,109
this power our customers have created

01:06:45,910 --> 01:06:49,060
all sorts of business changing

01:06:47,109 --> 01:06:50,920
applications from small office phone

01:06:49,060 --> 01:06:53,440
systems to mission-critical call centers

01:06:50,920 --> 01:06:55,030
the international carrier networks in

01:06:53,440 --> 01:06:56,830
fact there's even an entire country

01:06:55,030 --> 01:06:59,200
those communications infrastructure runs

01:06:56,830 --> 01:07:01,359
on esters the gym has always been about

01:06:59,200 --> 01:07:03,070
creating technology that expands

01:07:01,359 --> 01:07:05,230
communications capabilities in ways that

01:07:03,070 --> 01:07:06,430
we could never have imagined and that's

01:07:05,230 --> 01:07:08,800
part of what's game-changing about

01:07:06,430 --> 01:07:11,500
Digium today we're doing it again this

01:07:08,800 --> 01:07:13,599
time by introducing a new family of HD

01:07:11,500 --> 01:07:15,730
IP phones that extends control of the

01:07:13,599 --> 01:07:17,470
user all the way to the desktop the

01:07:15,730 --> 01:07:19,180
launch of these new products represents

01:07:17,470 --> 01:07:21,190
the next phase indigenous history of

01:07:19,180 --> 01:07:23,680
innovation these are the first and only

01:07:21,190 --> 01:07:25,030
IP phones designed to fully leverage the

01:07:23,680 --> 01:07:26,710
power of esther's when we first

01:07:25,030 --> 01:07:28,359
discussed our expectations for building

01:07:26,710 --> 01:07:30,970
a family of phones for use with asterisk

01:07:28,359 --> 01:07:32,740
our requirements were pretty simple we

01:07:30,970 --> 01:07:34,510
asked the team to build the phones such

01:07:32,740 --> 01:07:36,700
that they were easy to install integrate

01:07:34,510 --> 01:07:38,560
provision and use I think you'll soon

01:07:36,700 --> 01:07:41,109
agree our engineers have delivered on

01:07:38,560 --> 01:07:42,760
that goal user feedback is validating

01:07:41,109 --> 01:07:44,859
that when it comes to operation with

01:07:42,760 --> 01:07:47,290
astro space systems including our own

01:07:44,859 --> 01:07:49,869
switchvox based product these are the

01:07:47,290 --> 01:07:51,160
easiest to use best integrated most

01:07:49,869 --> 01:07:53,770
interoperable products on the market

01:07:51,160 --> 01:07:55,740
today the Digium family of phones will

01:07:53,770 --> 01:07:57,849
initially include three IP des hommes

01:07:55,740 --> 01:07:59,740
uniquely designed to complement any

01:07:57,849 --> 01:08:01,630
asterisk or Switchvox based solution

01:07:59,740 --> 01:08:04,300
these phones are different for a number

01:08:01,630 --> 01:08:06,940
of reasons first there is clue sively

01:08:04,300 --> 01:08:08,380
designed for use with esters secondly

01:08:06,940 --> 01:08:09,990
we've made it really easy to

01:08:08,380 --> 01:08:12,369
autodiscover and provision the phones

01:08:09,990 --> 01:08:14,470
next we've made it easy for the phones

01:08:12,369 --> 01:08:16,420
to access information inside of asterisk

01:08:14,470 --> 01:08:17,150
allowing tight coupling between an

01:08:16,420 --> 01:08:19,790
application

01:08:17,150 --> 01:08:22,159
and the phone additionally we've created

01:08:19,790 --> 01:08:24,259
an applications engine that allows users

01:08:22,159 --> 01:08:27,500
and developers to create and run their

01:08:24,259 --> 01:08:29,270
own apps on the phone and finally we've

01:08:27,500 --> 01:08:31,219
done all of this at a very compelling

01:08:29,270 --> 01:08:32,900
price point at Digium we're always

01:08:31,219 --> 01:08:35,000
thinking of ways to give our customers

01:08:32,900 --> 01:08:37,520
the best value in business phone systems

01:08:35,000 --> 01:08:39,109
and also give them the power to create

01:08:37,520 --> 01:08:41,270
their own solutions or any

01:08:39,109 --> 01:08:43,009
communications challenge will continue

01:08:41,270 --> 01:08:44,449
to push the boundaries not only to make

01:08:43,009 --> 01:08:46,460
Astra's cooler bastard more

01:08:44,449 --> 01:08:48,230
technologically feature-rich but to make

01:08:46,460 --> 01:08:50,779
asterisk and communications even easier

01:08:48,230 --> 01:08:53,980
and together we'll change the way the

01:08:50,779 --> 01:08:53,980
world communication again

01:09:01,570 --> 01:09:05,870
your customers rely on your website or

01:09:04,370 --> 01:09:08,240
application if it's slower

01:09:05,870 --> 01:09:11,180
non-responsive it infuriates your users

01:09:08,240 --> 01:09:13,010
and costs you money keeping your

01:09:11,180 --> 01:09:16,500
business critical systems humming along

01:09:13,010 --> 01:09:18,810
requires insight into what they're doing

01:09:16,500 --> 01:09:20,790
your system metrics tells stories

01:09:18,810 --> 01:09:22,770
stories that can reveal performance

01:09:20,790 --> 01:09:25,109
bottlenecks resource limitations and

01:09:22,770 --> 01:09:26,670
other problems but how do you keep an

01:09:25,109 --> 01:09:29,339
eye on all of your systems performance

01:09:26,670 --> 01:09:32,339
metrics in real-time and record this

01:09:29,339 --> 01:09:34,109
data for later analysis enter longview

01:09:32,339 --> 01:09:36,150
the new way to see what's really going

01:09:34,109 --> 01:09:38,279
on under the hood the long view

01:09:36,150 --> 01:09:40,350
dashboard lets you visualize the status

01:09:38,279 --> 01:09:42,810
of all your systems providing you with a

01:09:40,350 --> 01:09:46,200
bird's-eye view of your entire fleet you

01:09:42,810 --> 01:09:48,779
can sort by cpu memory swap processes

01:09:46,200 --> 01:09:50,520
load and network usage click a specific

01:09:48,779 --> 01:09:52,920
system to access its individual

01:09:50,520 --> 01:09:55,430
dashboard then click and drag to zoom in

01:09:52,920 --> 01:09:57,840
on chokepoints and get more detail

01:09:55,430 --> 01:09:59,520
comprehensive network data including

01:09:57,840 --> 01:10:01,830
inbound and outbound traffic is

01:09:59,520 --> 01:10:03,390
available on the network tab and disk

01:10:01,830 --> 01:10:05,310
rights and free space on the disk

01:10:03,390 --> 01:10:08,160
stabbed while the process Explorer

01:10:05,310 --> 01:10:10,680
displays usage statistics for individual

01:10:08,160 --> 01:10:12,870
processes the system info tab shows

01:10:10,680 --> 01:10:15,120
listening services active connections

01:10:12,870 --> 01:10:17,250
and available updates adding long view

01:10:15,120 --> 01:10:18,930
to a system is easy just click the

01:10:17,250 --> 01:10:21,090
button copy the one line installation

01:10:18,930 --> 01:10:23,520
command then run the command on your

01:10:21,090 --> 01:10:25,230
linux system to complete the process the

01:10:23,520 --> 01:10:27,420
agent will begin collecting data and

01:10:25,230 --> 01:10:29,270
sending it to longview then the graphs

01:10:27,420 --> 01:10:31,820
start rolling

01:10:29,270 --> 01:10:34,190
use longview to gain visibility into

01:10:31,820 --> 01:10:37,930
your servers so when your website or app

01:10:34,190 --> 01:10:37,930

YouTube URL: https://www.youtube.com/watch?v=Iqp41LY8Gs8


