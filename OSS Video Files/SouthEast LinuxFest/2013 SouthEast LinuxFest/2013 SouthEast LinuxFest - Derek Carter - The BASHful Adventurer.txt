Title: 2013 SouthEast LinuxFest - Derek Carter - The BASHful Adventurer
Publication date: 2014-07-29
Playlist: 2013 SouthEast LinuxFest
Description: 
	2013 SouthEast LinuxFest
Derek Carter - The BASHful Adventurer
Captions: 
	00:00:00,000 --> 00:00:05,160
the following presentation was recorded

00:00:02,639 --> 00:00:08,340
at the 2013 southeast linux fest in

00:00:05,160 --> 00:00:10,860
charlotte north carolina it is licensed

00:00:08,340 --> 00:00:12,509
under a creative commons license for

00:00:10,860 --> 00:00:17,190
more information about the southeast

00:00:12,509 --> 00:00:19,949
linux fest visit WWF selinux phase or

00:00:17,190 --> 00:00:21,810
the southeast linux fest would like to

00:00:19,949 --> 00:00:24,000
thank the following diamond sponsors in

00:00:21,810 --> 00:00:26,340
2013 for helping make these videos

00:00:24,000 --> 00:00:31,349
possible my name is Derrick Carter aka

00:00:26,340 --> 00:00:34,440
goose bak and this is the bashful

00:00:31,349 --> 00:00:39,180
adventurer talk and to tell you the

00:00:34,440 --> 00:00:42,780
truth you guys are going to contribute

00:00:39,180 --> 00:00:45,649
as much to this talk as I do this is a

00:00:42,780 --> 00:00:49,200
choose your own adventure style talk

00:00:45,649 --> 00:00:53,730
written in the style of your text based

00:00:49,200 --> 00:00:56,850
adventures so what I'm going to ask for

00:00:53,730 --> 00:00:58,020
is some help I'm going to ask for you to

00:00:56,850 --> 00:01:04,320
tell me what you want to do what you

00:00:58,020 --> 00:01:06,210
want to look at next and this is a kind

00:01:04,320 --> 00:01:07,530
of a work in progress so we may run into

00:01:06,210 --> 00:01:10,860
a couple bugs but we'll make sure we

00:01:07,530 --> 00:01:14,369
talk about the the core features and the

00:01:10,860 --> 00:01:15,810
core problems and the core the problem

00:01:14,369 --> 00:01:20,180
is the wrong word core features in core

00:01:15,810 --> 00:01:26,060
Core tools and tips and tricks of bash

00:01:20,180 --> 00:01:29,060
alright first off a little bit about me

00:01:26,060 --> 00:01:29,060
maybe

00:01:30,290 --> 00:01:37,520
my name is Derek you can contact me

00:01:34,000 --> 00:01:39,350
Derek at Goose be calm you can't really

00:01:37,520 --> 00:01:41,540
click through to my Twitter a name and

00:01:39,350 --> 00:01:45,170
resume and all that jazz but I'm goose

00:01:41,540 --> 00:01:50,450
bak everywhere geo ozb ACH so Facebook

00:01:45,170 --> 00:01:54,820
Twitter identica statusnet whatever it's

00:01:50,450 --> 00:01:54,820
called now pump I oh whatever that is

00:01:55,420 --> 00:02:02,030
IRC on freenode you can find me in pound

00:02:00,290 --> 00:02:07,240
ale you can find me in pound Utah you

00:02:02,030 --> 00:02:10,940
can find me in pound you toss I'm a geek

00:02:07,240 --> 00:02:13,130
I've been one for a while some people

00:02:10,940 --> 00:02:18,140
asking well are you really a geek and I

00:02:13,130 --> 00:02:22,550
say well what a geek carry his own bag

00:02:18,140 --> 00:02:26,840
of dry erase markers and I rest my case

00:02:22,550 --> 00:02:29,380
so been using Linux exclusively for

00:02:26,840 --> 00:02:32,390
quite a few years since about 99 and

00:02:29,380 --> 00:02:35,950
let's get into it shall we so here we

00:02:32,390 --> 00:02:35,950
have our bashful adventurer talk

00:02:45,720 --> 00:02:55,420
we are here oh the collective we are the

00:02:51,130 --> 00:02:57,790
the protagonist of this story so like

00:02:55,420 --> 00:03:03,670
your text based adventure is one of the

00:02:57,790 --> 00:03:09,070
first first things you do inventory well

00:03:03,670 --> 00:03:12,190
let's see if inventory works oh not

00:03:09,070 --> 00:03:18,730
there but let's take a look around first

00:03:12,190 --> 00:03:23,650
let's see what's around us well we look

00:03:18,730 --> 00:03:25,600
to be in some sort of Hull we see a hall

00:03:23,650 --> 00:03:29,170
named basic training a hall named

00:03:25,600 --> 00:03:32,110
intermediate classes and a sign that

00:03:29,170 --> 00:03:33,490
says welcome so I'm going to give you

00:03:32,110 --> 00:03:36,760
the first one here there's a command in

00:03:33,490 --> 00:03:46,240
our little very simple bash game called

00:03:36,760 --> 00:03:48,640
sign congratulations you all know how to

00:03:46,240 --> 00:03:51,700
read signs now so we're going to try a

00:03:48,640 --> 00:03:54,450
quick little trick here of looking at

00:03:51,700 --> 00:03:54,450
what LS does

00:04:06,319 --> 00:04:09,780
you're all familiar with the LS command

00:04:08,310 --> 00:04:14,310
right it lists the stuff in the

00:04:09,780 --> 00:04:17,370
directory this is stock LS without any

00:04:14,310 --> 00:04:20,820
of the fancy switches print out in

00:04:17,370 --> 00:04:22,229
tabular columns all of the files in the

00:04:20,820 --> 00:04:24,419
directory to the point that we can fit

00:04:22,229 --> 00:04:28,320
them on the screen sometimes this means

00:04:24,419 --> 00:04:29,729
that it's one line per file however this

00:04:28,320 --> 00:04:31,320
is kind of hard to read sometimes

00:04:29,729 --> 00:04:33,570
especially if you've got a whole bunch

00:04:31,320 --> 00:04:37,110
of random named files with random

00:04:33,570 --> 00:04:42,360
extensions fun little note I actually

00:04:37,110 --> 00:04:44,970
took the dot files output excuse me dear

00:04:42,360 --> 00:04:47,280
colors output and made a file to match

00:04:44,970 --> 00:04:50,039
each one of them so this is a directory

00:04:47,280 --> 00:04:51,960
that will successfully test every

00:04:50,039 --> 00:04:53,940
possible permutation of your dear files

00:04:51,960 --> 00:04:56,310
your dear colors which is kind of fun

00:04:53,940 --> 00:05:00,110
how do you use dear colors well you do

00:04:56,310 --> 00:05:00,110
that with an LS dash dash color

00:05:04,820 --> 00:05:09,840
technically speaking it should be dash

00:05:06,750 --> 00:05:13,830
dash color equals always but you can get

00:05:09,840 --> 00:05:17,970
away with dash dash color what you're

00:05:13,830 --> 00:05:20,760
going to see is a handful of different

00:05:17,970 --> 00:05:23,250
colors based on either the file type for

00:05:20,760 --> 00:05:26,900
example I've got a pipe in here a FIFO

00:05:23,250 --> 00:05:30,330
it comes up as a very hard to read

00:05:26,900 --> 00:05:33,120
orange-ish I've got a symlink in here

00:05:30,330 --> 00:05:35,699
somewhere that's going to have a light

00:05:33,120 --> 00:05:42,240
blue this is the stock dear colors

00:05:35,699 --> 00:05:46,610
format and then just file types so we've

00:05:42,240 --> 00:05:49,410
got directories or kind of a darker blue

00:05:46,610 --> 00:05:52,800
executables or a different color very

00:05:49,410 --> 00:06:00,090
simple format we can go one further

00:05:52,800 --> 00:06:07,169
though if we throw a minus f switch in

00:06:00,090 --> 00:06:09,900
there we're going to see some further

00:06:07,169 --> 00:06:12,539
output to distinguish the different

00:06:09,900 --> 00:06:14,640
types of files gives us a little bit

00:06:12,539 --> 00:06:17,640
more of a visual clue as to what the

00:06:14,640 --> 00:06:19,039
files are directories have a slash after

00:06:17,640 --> 00:06:21,210
the end

00:06:19,039 --> 00:06:24,800
symlinks have an at symbol appended to

00:06:21,210 --> 00:06:27,959
the end and pipes of course have pipes

00:06:24,800 --> 00:06:29,099
devices get a different one don't

00:06:27,959 --> 00:06:41,479
remember exactly what that is but we can

00:06:29,099 --> 00:06:43,770
look at it real quick I was a great

00:06:41,479 --> 00:06:49,889
devices do not have a special file tape

00:06:43,770 --> 00:06:54,779
name alright so now we've looked at the

00:06:49,889 --> 00:06:59,969
welcome sign here we are what do you

00:06:54,779 --> 00:07:06,209
guys want to do now let's go to the

00:06:59,969 --> 00:07:09,509
inventory there is no inventory right so

00:07:06,209 --> 00:07:15,119
let's let's clear the screen let's go to

00:07:09,509 --> 00:07:17,159
the other room here alright you see

00:07:15,119 --> 00:07:20,399
basic training intermediate classes and

00:07:17,159 --> 00:07:27,419
welcome all right let's go straight into

00:07:20,399 --> 00:07:31,259
the intermediate why not we're in

00:07:27,419 --> 00:07:34,139
intermediate classes now we'll look

00:07:31,259 --> 00:07:36,149
around and we'll see a couple of

00:07:34,139 --> 00:07:37,680
different signs that we can look at what

00:07:36,149 --> 00:07:42,149
are the signs that you guys think are

00:07:37,680 --> 00:07:47,309
most interesting go ahead and shut them

00:07:42,149 --> 00:07:49,969
out tweet your history huh all right

00:07:47,309 --> 00:07:49,969
let's look at that

00:07:53,660 --> 00:07:59,690
well it is possible to tweet your

00:07:55,730 --> 00:08:03,230
history and here we get into the actual

00:07:59,690 --> 00:08:07,820
like game masters notebook and look at

00:08:03,230 --> 00:08:12,100
the the funny dream of what it means to

00:08:07,820 --> 00:08:12,100
tweet your history so let's look at that

00:08:23,650 --> 00:08:42,110
all right here we go we're gonna okay so

00:08:38,539 --> 00:08:47,900
we start by installing let me go back a

00:08:42,110 --> 00:08:50,980
little bit we install the bti command

00:08:47,900 --> 00:08:53,420
bash twitter it is idiocy command and

00:08:50,980 --> 00:08:58,660
that will allow us to tweet the history

00:08:53,420 --> 00:09:03,770
so i just echoed it to be TI and it

00:08:58,660 --> 00:09:06,410
hello lots of the mic so i echoed it too

00:09:03,770 --> 00:09:10,670
BTW i now i'm going to put it in a shell

00:09:06,410 --> 00:09:12,550
script i'm going to source it and what

00:09:10,670 --> 00:09:16,340
that does is it sets up a prompt command

00:09:12,550 --> 00:09:17,810
variable that runs history one pipes it

00:09:16,340 --> 00:09:22,190
through said and pipes it through BTW i

00:09:17,810 --> 00:09:24,500
and then I run a handful of commands so

00:09:22,190 --> 00:09:29,390
as I'm running those commands they end

00:09:24,500 --> 00:09:31,760
up in my history automatically that

00:09:29,390 --> 00:09:36,260
shows you the prompt command variable

00:09:31,760 --> 00:09:38,600
which is a fairly useful command for

00:09:36,260 --> 00:09:40,190
running specific advanced prompting

00:09:38,600 --> 00:09:43,880
let's show you a couple of other

00:09:40,190 --> 00:09:47,090
examples as soon as we refresh this here

00:09:43,880 --> 00:09:51,220
I'll bring back my Bonnie to me right we

00:09:47,090 --> 00:09:53,930
get ourselves a tweeted bash history now

00:09:51,220 --> 00:09:58,040
you may not want to do this for security

00:09:53,930 --> 00:10:02,660
purposes but I ran like this for about a

00:09:58,040 --> 00:10:07,320
week on a dummy system and that's the

00:10:02,660 --> 00:10:11,140
end of the dream we're back the

00:10:07,320 --> 00:10:12,730
the fun thing was is is freaking out

00:10:11,140 --> 00:10:15,400
when you accidentally typed a password

00:10:12,730 --> 00:10:18,220
into your your command running over to

00:10:15,400 --> 00:10:21,100
identica and a Twitter and interesing it

00:10:18,220 --> 00:10:22,530
but it's funny and silly but it shows

00:10:21,100 --> 00:10:24,490
you the utility of the prompt command

00:10:22,530 --> 00:10:32,290
variable so let's look at that a little

00:10:24,490 --> 00:10:45,240
bit going to replace my level or Mike

00:10:32,290 --> 00:10:49,960
here doesn't look to be all right so

00:10:45,240 --> 00:10:53,380
let's look at what the prompt command

00:10:49,960 --> 00:10:58,810
can do so first thing I'm going to do is

00:10:53,380 --> 00:11:00,580
I'm going to create a little subroutine

00:10:58,810 --> 00:11:04,540
so it's really nice to be able to use

00:11:00,580 --> 00:11:06,640
the prompt command variable but the

00:11:04,540 --> 00:11:08,260
prompt command variable gets a little

00:11:06,640 --> 00:11:10,410
unwieldy at some point so what you

00:11:08,260 --> 00:11:13,240
usually end up doing is putting a

00:11:10,410 --> 00:11:16,270
subroutine together that you then call

00:11:13,240 --> 00:11:18,420
from the prompt command so let's look at

00:11:16,270 --> 00:11:18,420
that

00:11:24,800 --> 00:11:36,510
this is a simple prompt command here

00:11:28,940 --> 00:11:44,360
it's a little subroutine in bash this is

00:11:36,510 --> 00:11:51,500
the prompt command uptime git branch or

00:11:44,360 --> 00:11:51,500
echo nothing and that's probably good

00:11:51,560 --> 00:12:00,690
now we can run our subroutine this is

00:11:59,010 --> 00:12:08,340
the prompt command there's the uptime

00:12:00,690 --> 00:12:09,750
and we're in branch master now we see

00:12:08,340 --> 00:12:16,800
that it doesn't actually run when we run

00:12:09,750 --> 00:12:27,800
a prompt what we need to do prompt

00:12:16,800 --> 00:12:27,800
underscore command equals my prompt CMD

00:12:34,310 --> 00:12:38,510
that's something that we need to make

00:12:36,270 --> 00:12:43,620
sure that we put is the proper spelling

00:12:38,510 --> 00:12:46,140
now we get it now if I do lsf star I get

00:12:43,620 --> 00:12:47,430
foo and then at the end as it's starting

00:12:46,140 --> 00:12:49,140
to write the prompt again it will run

00:12:47,430 --> 00:12:51,090
the prompt command now this is a very

00:12:49,140 --> 00:12:53,670
simplistic example but you can see the

00:12:51,090 --> 00:12:57,060
power of it right you take this and you

00:12:53,670 --> 00:13:00,960
can create very elaborate prompts you

00:12:57,060 --> 00:13:06,660
can reset ps1 at one point in my life I

00:13:00,960 --> 00:13:10,080
actually used the acpi interface to

00:13:06,660 --> 00:13:11,850
query my battery level and my prompt

00:13:10,080 --> 00:13:14,400
color would change as my battery level

00:13:11,850 --> 00:13:16,290
drained so my pump would be green if I

00:13:14,400 --> 00:13:17,790
was healthy and happy it would get to

00:13:16,290 --> 00:13:19,530
yellow when I was down around a quarter

00:13:17,790 --> 00:13:21,420
left and then everything under a quarter

00:13:19,530 --> 00:13:24,660
was red and then when it got down below

00:13:21,420 --> 00:13:26,420
five I actually made it blink a lot of

00:13:24,660 --> 00:13:31,040
fun the prompt command very useful tool

00:13:26,420 --> 00:13:31,040
alright let's go back to our hall now

00:13:42,060 --> 00:13:47,880
what other things you guys want to look

00:13:43,920 --> 00:13:56,760
at here keybindings why not let's look

00:13:47,880 --> 00:14:02,510
at key bindings you see a young girl

00:13:56,760 --> 00:14:02,510
named Alice four key bindings all right

00:14:03,320 --> 00:14:17,340
yeah so let's look at that we are going

00:14:10,020 --> 00:14:22,770
down the rabbit hole here let's look at

00:14:17,340 --> 00:14:24,780
editing our big long prompt command

00:14:22,770 --> 00:14:28,530
thing here so we've got this big long

00:14:24,780 --> 00:14:31,170
prompt command and those of you who are

00:14:28,530 --> 00:14:33,450
familiar with emacs raise your hand yes

00:14:31,170 --> 00:14:35,130
one or two how do you move around to

00:14:33,450 --> 00:14:43,350
file in Emacs without using the arrow

00:14:35,130 --> 00:14:44,880
keys ctrl be ctrl and ctrl p @ control p

00:14:43,350 --> 00:14:48,150
will move you up a line control n moves

00:14:44,880 --> 00:14:53,220
you down a line well we can do that if i

00:14:48,150 --> 00:14:58,350
hit control n i move down a line if i

00:14:53,220 --> 00:14:59,730
hit ctrl p i move up a line let's say i

00:14:58,350 --> 00:15:01,770
want to get to the beginning of the line

00:14:59,730 --> 00:15:03,210
so i've got this big long command and i

00:15:01,770 --> 00:15:06,680
just want to change the name of it to

00:15:03,210 --> 00:15:09,900
something else i can hit control a i

00:15:06,680 --> 00:15:11,130
actually have to hit ctrl a a because

00:15:09,900 --> 00:15:14,790
i'm running under screen but it is

00:15:11,130 --> 00:15:16,050
control a to bash and that moves me from

00:15:14,790 --> 00:15:21,330
the end of the line to the beginning of

00:15:16,050 --> 00:15:23,880
the line and then i can edit this you

00:15:21,330 --> 00:15:27,930
know hit control be there actually

00:15:23,880 --> 00:15:30,210
control f to move forward control you

00:15:27,930 --> 00:15:32,990
will delete from my cursor position to

00:15:30,210 --> 00:15:36,450
the beginning of the line and i can

00:15:32,990 --> 00:15:39,780
change it to be just prompt CMD and then

00:15:36,450 --> 00:15:45,920
I want to just blow it away from here to

00:15:39,780 --> 00:15:45,920
the end of the line I can do control k

00:15:53,939 --> 00:16:05,419
what am I missing Oh what I did is I

00:15:58,679 --> 00:16:05,419
didn't get a proper semicolon in here

00:16:05,989 --> 00:16:12,989
now I've set up a new sub routine called

00:16:09,509 --> 00:16:15,569
prompt underscore CMD and I want to make

00:16:12,989 --> 00:16:19,139
my prompt command that searching

00:16:15,569 --> 00:16:25,789
recursively backwards through a file in

00:16:19,139 --> 00:16:29,970
Emacs is what anybody control are a

00:16:25,789 --> 00:16:33,749
recursive iterative search so I've

00:16:29,970 --> 00:16:36,269
changed the name of the function I want

00:16:33,749 --> 00:16:38,489
to change the name of the function being

00:16:36,269 --> 00:16:41,879
called by the prompt command variable I

00:16:38,489 --> 00:16:46,049
do that by typing in my command as I saw

00:16:41,879 --> 00:16:47,939
it so II X P and the second that I hit

00:16:46,049 --> 00:16:51,539
the string that matches it pops that

00:16:47,939 --> 00:16:57,779
line in now I can hit enter and it will

00:16:51,539 --> 00:17:01,949
run the command as is or I can scroll

00:16:57,779 --> 00:17:07,079
over here edit it to match my new prompt

00:17:01,949 --> 00:17:13,379
command and now if I run a command I get

00:17:07,079 --> 00:17:16,139
high at the end so basic emacs key

00:17:13,379 --> 00:17:21,860
bindings if you are a vim head and

00:17:16,139 --> 00:17:21,860
there's nothing wrong with that you can

00:17:24,919 --> 00:17:36,450
set minus eat them and then if I were to

00:17:30,809 --> 00:17:39,350
go up here escape actually it is set

00:17:36,450 --> 00:17:39,350
minus FM sorry

00:17:58,100 --> 00:18:03,260
should be able to hit escape and that

00:18:00,350 --> 00:18:08,090
should get me I'm having some problems

00:18:03,260 --> 00:18:10,280
here you can change your prompt I'm not

00:18:08,090 --> 00:18:12,890
emacs prompt editor apparently as you

00:18:10,280 --> 00:18:16,190
can tell but you can change your your

00:18:12,890 --> 00:18:17,840
input mode your key binding mode from VI

00:18:16,190 --> 00:18:20,419
mode from Emacs mode which is the

00:18:17,840 --> 00:18:21,799
default to vi mode so if you're more

00:18:20,419 --> 00:18:24,049
familiar with VI you can do it and acts

00:18:21,799 --> 00:18:26,510
just like VI escaped put you into edit

00:18:24,049 --> 00:18:28,039
to command mode I put you into insert

00:18:26,510 --> 00:18:36,020
mode move around with all your fancy

00:18:28,039 --> 00:18:37,280
finding and you're good all right what

00:18:36,020 --> 00:18:39,020
else would you like guys like to see

00:18:37,280 --> 00:18:44,419
here so here we are in the in the

00:18:39,020 --> 00:18:53,690
intermediate room SSH null host okay

00:18:44,419 --> 00:18:56,510
this one's pretty interesting who here

00:18:53,690 --> 00:19:01,280
has a dev box that they blow away and

00:18:56,510 --> 00:19:04,820
reinstall over and over again who here

00:19:01,280 --> 00:19:09,590
tries to ssh to said dev box and gets a

00:19:04,820 --> 00:19:14,059
man-in-the-middle alert from ssh this is

00:19:09,590 --> 00:19:22,220
what you do to alleviate that let's make

00:19:14,059 --> 00:19:24,770
that a little bit bigger if I can looks

00:19:22,220 --> 00:19:25,970
like I cannot but all of this is already

00:19:24,770 --> 00:19:28,760
up on github so if you're missing

00:19:25,970 --> 00:19:32,809
anything you'll be able to see it on

00:19:28,760 --> 00:19:35,030
github in its source form basically in

00:19:32,809 --> 00:19:40,250
your SSH config either the system-wide

00:19:35,030 --> 00:19:43,730
or in your dot SSH / config file you add

00:19:40,250 --> 00:19:48,470
an entry for a host such as host

00:19:43,730 --> 00:19:51,919
localhost and then you create a strict

00:19:48,470 --> 00:19:54,980
host key checking equals no parameter

00:19:51,919 --> 00:19:56,570
and then you specify well what that

00:19:54,980 --> 00:19:59,270
first parameter does is it basically

00:19:56,570 --> 00:20:03,710
says blindly trust the ssh key of the

00:19:59,270 --> 00:20:07,809
host the second one says put it into the

00:20:03,710 --> 00:20:11,510
file dev null so if you do the first one

00:20:07,809 --> 00:20:13,270
without the second one it'll just work

00:20:11,510 --> 00:20:15,320
and then the next time you re-install

00:20:13,270 --> 00:20:17,810
it'll have a man-in-the-middle attack

00:20:15,320 --> 00:20:20,690
warning again but if you tell it to

00:20:17,810 --> 00:20:22,580
write the config file to dev null it

00:20:20,690 --> 00:20:24,680
will write it to dev null and it won't

00:20:22,580 --> 00:20:28,790
be in your authorized your known hosts

00:20:24,680 --> 00:20:31,580
file and you'll get you'll get it to let

00:20:28,790 --> 00:20:39,490
you alone so I do this for all of my dev

00:20:31,580 --> 00:20:39,490
boxes caveat you need to make sure that

00:20:40,330 --> 00:20:46,070
you're not doing it on a production box

00:20:43,460 --> 00:20:47,600
because you need to have those SSH

00:20:46,070 --> 00:20:55,640
man-in-the-middle alerts for production

00:20:47,600 --> 00:21:02,540
boxes alright what else would you like

00:20:55,640 --> 00:21:09,740
to see Mac OS tips right on let's look

00:21:02,540 --> 00:21:14,300
at some mac OS tips there's some very

00:21:09,740 --> 00:21:19,970
very cool mac tips if you're familiar

00:21:14,300 --> 00:21:22,610
with xdg on linux you've got XD DD g

00:21:19,970 --> 00:21:25,400
dash open which kind of intelligently

00:21:22,610 --> 00:21:27,680
does the opening alright so open this

00:21:25,400 --> 00:21:29,510
file type with this thing Mac has a

00:21:27,680 --> 00:21:35,120
program called open which does the same

00:21:29,510 --> 00:21:38,300
thing Mac OS you're probably handing

00:21:35,120 --> 00:21:39,710
having to do things with disk images so

00:21:38,300 --> 00:21:41,240
you download a dmg and you want to

00:21:39,710 --> 00:21:42,670
install something you don't to click

00:21:41,240 --> 00:21:50,600
through the finder to get it to eject

00:21:42,670 --> 00:21:54,530
HDI util dr util is for CDs we also have

00:21:50,600 --> 00:21:57,130
say which is rather fun let me show you

00:21:54,530 --> 00:21:57,130
what this one looks like

00:22:08,350 --> 00:22:11,620
make sure I've got

00:22:14,960 --> 00:22:24,409
maybe let's make it say something a

00:22:18,740 --> 00:22:28,250
little bit more than hi how are you so

00:22:24,409 --> 00:22:30,350
you got to say command combine that with

00:22:28,250 --> 00:22:31,940
ssh and you have hours of fun with your

00:22:30,350 --> 00:22:36,890
significant other with a laptop in the

00:22:31,940 --> 00:22:39,049
other room Oh a scripting anything and

00:22:36,890 --> 00:22:42,549
everything that you can do with a mac OS

00:22:39,049 --> 00:22:47,149
application you can do in apple script

00:22:42,549 --> 00:22:50,419
so it's it's part of the enforced as

00:22:47,149 --> 00:22:52,250
accessibility features of Mac OS you can

00:22:50,419 --> 00:22:54,350
click buttons you can drag scroll bars

00:22:52,250 --> 00:22:55,460
you can do it in a scripted manner very

00:22:54,350 --> 00:22:59,480
very powerful so if you're doing

00:22:55,460 --> 00:23:03,740
advanced GUI testing or whatnot a script

00:22:59,480 --> 00:23:06,409
is your friend PB copy and PB paste this

00:23:03,740 --> 00:23:11,299
actually lets you take your clipboard

00:23:06,409 --> 00:23:15,549
and put it in two standard in or connect

00:23:11,299 --> 00:23:17,270
standard out to your clipboard that's

00:23:15,549 --> 00:23:26,110
pretty slick let me show you what that

00:23:17,270 --> 00:23:26,110
looks like so we do echo hi how are you

00:23:26,980 --> 00:23:41,270
two PB copy and then I'll do VI test put

00:23:35,840 --> 00:23:44,960
it in insert mode right click paste hi

00:23:41,270 --> 00:23:46,909
how are you so standard out of the echo

00:23:44,960 --> 00:23:48,559
command went to the clipboard and then i

00:23:46,909 --> 00:23:53,059
cut and pasted or actually i didn't cut

00:23:48,559 --> 00:23:59,559
i pasted it into my application very

00:23:53,059 --> 00:24:01,760
very useful trick airport is the tool

00:23:59,559 --> 00:24:03,080
that lets you do wireless management

00:24:01,760 --> 00:24:05,000
from the command line it is not by

00:24:03,080 --> 00:24:09,460
default in your path will lead to search

00:24:05,000 --> 00:24:12,980
it out and put it there md tools is

00:24:09,460 --> 00:24:15,770
spotlight for your shell so that little

00:24:12,980 --> 00:24:18,860
spotlight icon in the corner you can get

00:24:15,770 --> 00:24:21,470
it from the shell by using md tools i'm

00:24:18,860 --> 00:24:23,060
not exactly sure if that's the name but

00:24:21,470 --> 00:24:27,090
i think it sounds right

00:24:23,060 --> 00:24:28,320
yes PB pace is the same thing it's just

00:24:27,090 --> 00:24:39,330
the other direction so if I put

00:24:28,320 --> 00:24:44,580
something into the clipboard well let's

00:24:39,330 --> 00:24:49,380
look at it like this so if I do that and

00:24:44,580 --> 00:24:54,560
get all of these three things if I go

00:24:49,380 --> 00:25:07,160
like this highlight them copy them and

00:24:54,560 --> 00:25:07,160
then do echo actually cat redirect

00:25:12,320 --> 00:25:20,480
actually it's PB paste pipe echo

00:25:22,850 --> 00:25:29,930
he paced by itself will do it for you so

00:25:26,410 --> 00:25:32,150
it's taking your your your clipboard

00:25:29,930 --> 00:25:35,240
your mac OS clipboard putting it into

00:25:32,150 --> 00:25:37,520
standard in so it's an interface between

00:25:35,240 --> 00:25:40,510
the mac OS clipboard and standard in and

00:25:37,520 --> 00:25:43,940
standard out PB paste is standard in

00:25:40,510 --> 00:25:58,970
from the clipboard PB copy is standard

00:25:43,940 --> 00:26:01,070
out to the clipboard alright some of

00:25:58,970 --> 00:26:06,760
them are some of them are in common with

00:26:01,070 --> 00:26:09,700
bsd that is correct alright we've got

00:26:06,760 --> 00:26:12,800
another one here let's look at the

00:26:09,700 --> 00:26:15,500
history just you've seen what you can do

00:26:12,800 --> 00:26:16,550
to tweet your history but let's let's

00:26:15,500 --> 00:26:19,730
show you some of the tricks that can

00:26:16,550 --> 00:26:28,310
help you protect your shell from

00:26:19,730 --> 00:26:31,700
accidentally tweeting things some

00:26:28,310 --> 00:26:35,570
variables that you will want to set

00:26:31,700 --> 00:26:36,710
these should all be I think they should

00:26:35,570 --> 00:26:40,610
all be upper case I should double-check

00:26:36,710 --> 00:26:42,260
that but hist control lets you know

00:26:40,610 --> 00:26:47,660
what's going to go into your history

00:26:42,260 --> 00:26:50,180
file so when you set hist control you

00:26:47,660 --> 00:26:51,710
can set it to say ignored oops which is

00:26:50,180 --> 00:26:53,510
the default on like a fedora system

00:26:51,710 --> 00:26:57,260
which means if you run the same command

00:26:53,510 --> 00:26:59,330
right after each other it only does one

00:26:57,260 --> 00:27:01,790
entry in your history file so if you do

00:26:59,330 --> 00:27:03,890
echo foo echo foo echo foo echo foo and

00:27:01,790 --> 00:27:06,830
then run in the history command you only

00:27:03,890 --> 00:27:08,420
have echo foo once this is only for ones

00:27:06,830 --> 00:27:09,860
that are together if you run another

00:27:08,420 --> 00:27:12,920
command and then go back to echo foo

00:27:09,860 --> 00:27:15,020
you'll get multiples you can also do

00:27:12,920 --> 00:27:17,750
ignore space in your history control

00:27:15,020 --> 00:27:19,160
variable and what that means is that if

00:27:17,750 --> 00:27:21,830
you put a space at the beginning of your

00:27:19,160 --> 00:27:25,990
command it will not go into the history

00:27:21,830 --> 00:27:30,740
file very useful if you're going to be

00:27:25,990 --> 00:27:32,090
echoing a string into password right you

00:27:30,740 --> 00:27:35,660
don't want that to be stored in the dot

00:27:32,090 --> 00:27:36,530
history file so you put ignore space in

00:27:35,660 --> 00:27:37,910
your history

00:27:36,530 --> 00:27:42,650
put a space at the inning of command and

00:27:37,910 --> 00:27:45,080
it doesn't get stored hist search this

00:27:42,650 --> 00:27:46,250
is kind of fun I want to search through

00:27:45,080 --> 00:27:50,110
history we've showed that with a control

00:27:46,250 --> 00:27:53,000
are right we already did that one and

00:27:50,110 --> 00:27:55,820
hist verify this is kind of cool this is

00:27:53,000 --> 00:27:59,390
I want to run a command but I want to

00:27:55,820 --> 00:28:02,360
change something there's a shortcut for

00:27:59,390 --> 00:28:04,690
it with carrots let me show you how that

00:28:02,360 --> 00:28:04,690
looks

00:28:14,550 --> 00:28:27,870
I can find the right window all right

00:28:20,900 --> 00:28:30,840
echo window is great windows is great so

00:28:27,870 --> 00:28:33,090
I ran this command but I ran it

00:28:30,840 --> 00:28:45,600
incorrectly what I actually meant to say

00:28:33,090 --> 00:28:47,850
was this so substitute the last command

00:28:45,600 --> 00:28:49,020
that had the string windows so this

00:28:47,850 --> 00:28:50,250
could be anywhere in your history is

00:28:49,020 --> 00:28:56,040
going to search recursively through your

00:28:50,250 --> 00:28:57,690
history and it will take the first

00:28:56,040 --> 00:28:59,430
string windows replace it with linux

00:28:57,690 --> 00:29:03,210
tells you what the command actually

00:28:59,430 --> 00:29:12,840
becomes now and then runs it very cool

00:29:03,210 --> 00:29:14,010
yes there is a command expand variable I

00:29:12,840 --> 00:29:15,690
don't remember what it is off the top of

00:29:14,010 --> 00:29:18,060
my head but it is in the met the the

00:29:15,690 --> 00:29:20,730
bash man page and I've got it set in my

00:29:18,060 --> 00:29:22,560
dot files if you go to my github repo in

00:29:20,730 --> 00:29:25,170
my dot files it's set and what you do is

00:29:22,560 --> 00:29:27,060
you hit tab and it should expand I don't

00:29:25,170 --> 00:29:29,400
know that it expands this specifically

00:29:27,060 --> 00:29:32,010
but it does do some expansion of

00:29:29,400 --> 00:29:33,270
variables and you know the tilde if

00:29:32,010 --> 00:29:35,850
you're doing a home der or something

00:29:33,270 --> 00:29:38,520
like that so there is some expand its as

00:29:35,850 --> 00:29:40,920
you search for the word expand in a man

00:29:38,520 --> 00:29:44,420
batch page and you at the bash man page

00:29:40,920 --> 00:29:44,420
and you'll find what you're looking for

00:29:48,260 --> 00:29:54,630
FC this is awesome I have a very long

00:29:52,710 --> 00:29:58,500
command that I've been running together

00:29:54,630 --> 00:30:01,740
for example let's say that I'm I'm

00:29:58,500 --> 00:30:05,160
searching for a string indict words and

00:30:01,740 --> 00:30:09,150
I want to change all characters q 2 l

00:30:05,160 --> 00:30:12,060
and let's just let's come up with some

00:30:09,150 --> 00:30:17,780
elaborate word thing that I want to play

00:30:12,060 --> 00:30:17,780
with here so sorry about that

00:30:19,700 --> 00:30:31,309
alright so grep qu user share dict words

00:30:29,559 --> 00:30:48,139
alright so we've got a whole bunch of

00:30:31,309 --> 00:30:49,639
those sort minus n TR q to capital X so

00:30:48,139 --> 00:30:51,049
what I'm doing is I'm sorting it and

00:30:49,639 --> 00:30:53,059
then I'm putting it through TR this is

00:30:51,049 --> 00:30:54,620
just a completely contrived example not

00:30:53,059 --> 00:30:57,830
any utility itself but it's going to

00:30:54,620 --> 00:31:00,620
demonstrate the purpose and then I get

00:30:57,830 --> 00:31:02,840
that and okay so I've turned all the

00:31:00,620 --> 00:31:05,299
cues to capital exes okay wonderful I

00:31:02,840 --> 00:31:08,929
didn't mean capital X i meant capital q

00:31:05,299 --> 00:31:14,029
i could go back go over here and change

00:31:08,929 --> 00:31:15,950
it or if i bring my command up and I've

00:31:14,029 --> 00:31:23,269
got it as the line that I'm editing and

00:31:15,950 --> 00:31:24,740
I hit ctrl x control e oh that's not

00:31:23,269 --> 00:31:26,750
going to find Emacs which is my default

00:31:24,740 --> 00:31:33,159
editor so I'm going to change my editor

00:31:26,750 --> 00:31:38,510
variable and i'm going to try that again

00:31:33,159 --> 00:31:42,070
control x control e opens up the current

00:31:38,510 --> 00:31:44,480
command in your current value of editor

00:31:42,070 --> 00:31:47,120
so if you've got one of those big line a

00:31:44,480 --> 00:31:50,779
big long you know for page pipes or

00:31:47,120 --> 00:31:52,130
perhaps you've entered a subroutine into

00:31:50,779 --> 00:31:55,909
the command line when you meant to paste

00:31:52,130 --> 00:31:57,889
it into an editor you can go back scroll

00:31:55,909 --> 00:31:59,570
up in your in your history get it all on

00:31:57,889 --> 00:32:02,330
that big line it scrolls and it's a big

00:31:59,570 --> 00:32:07,000
mess and it's ugly control x control e

00:32:02,330 --> 00:32:09,830
and you'll end up typing it up in your

00:32:07,000 --> 00:32:13,269
editor you'll notice here at the bottom

00:32:09,830 --> 00:32:15,590
it's a long strangely named temp file

00:32:13,269 --> 00:32:18,500
what's going to happen is once you save

00:32:15,590 --> 00:32:24,289
and exit this file the contents thereof

00:32:18,500 --> 00:32:26,330
will be executed that means if your goal

00:32:24,289 --> 00:32:27,649
was to take this big long subroutine

00:32:26,330 --> 00:32:30,230
that you accidentally pasted it into the

00:32:27,649 --> 00:32:32,779
shell instead of vim you need to write

00:32:30,230 --> 00:32:35,269
it to a separate file and then delete

00:32:32,779 --> 00:32:40,659
all the contents from this file before

00:32:35,269 --> 00:32:40,659
you run it excuse me before you exit

00:32:55,000 --> 00:32:58,810
one of these things is very important

00:32:57,190 --> 00:33:01,360
I'm kind of taking control of it from

00:32:58,810 --> 00:33:05,220
you here for for a minute but I want to

00:33:01,360 --> 00:33:07,120
show you what bosch stringent is a

00:33:05,220 --> 00:33:09,690
gentleman by the name of Michael Potter

00:33:07,120 --> 00:33:13,090
did a presentation at Al a while back

00:33:09,690 --> 00:33:17,380
the alannah linux users group and he

00:33:13,090 --> 00:33:18,640
showed a it's a bash header if you will

00:33:17,380 --> 00:33:23,620
something to be included into bash

00:33:18,640 --> 00:33:25,240
scripts that is essentially strict mode

00:33:23,620 --> 00:33:27,460
for bash so if you're familiar with

00:33:25,240 --> 00:33:28,840
pearls strict mode it's essentially

00:33:27,460 --> 00:33:31,510
strict mode for batch it's a very very

00:33:28,840 --> 00:33:36,930
powerful tool he had it available in a

00:33:31,510 --> 00:33:40,510
slide in a PDF on his website I've hints

00:33:36,930 --> 00:33:42,340
forked it and put it into my github repo

00:33:40,510 --> 00:33:45,340
made a couple of there was a syntax

00:33:42,340 --> 00:33:49,300
error or something in the slide but it's

00:33:45,340 --> 00:33:52,330
available now in my github repo under

00:33:49,300 --> 00:33:55,900
bash stringent and if you write any sort

00:33:52,330 --> 00:33:58,270
of bash scripts worth you know more than

00:33:55,900 --> 00:34:01,960
a couple lines long you may want to look

00:33:58,270 --> 00:34:04,290
into it very very powerful let's look at

00:34:01,960 --> 00:34:04,290
what it does

00:34:09,400 --> 00:34:15,520
it's makes your script terminate on any

00:34:13,240 --> 00:34:17,110
air so if you have a very long insert

00:34:15,520 --> 00:34:19,990
all these records into my sequel and

00:34:17,110 --> 00:34:23,170
then do a lot of data processing on said

00:34:19,990 --> 00:34:24,940
my sequel you don't want that to do the

00:34:23,170 --> 00:34:29,740
data processing if it failed in the

00:34:24,940 --> 00:34:32,710
insert errors part so it sets the bash

00:34:29,740 --> 00:34:34,390
mode which says exit on air instead of

00:34:32,710 --> 00:34:36,430
just going on to the next command which

00:34:34,390 --> 00:34:40,450
is the default keeps you from

00:34:36,430 --> 00:34:43,240
overwriting files so if a file exists

00:34:40,450 --> 00:34:46,180
and you try to redirect to said file it

00:34:43,240 --> 00:34:49,110
won't let you so you have to remove the

00:34:46,180 --> 00:34:51,790
log file prior to redirecting to it or

00:34:49,110 --> 00:34:57,850
you can append to it which other let you

00:34:51,790 --> 00:35:00,940
do ever had a fat fingered variable

00:34:57,850 --> 00:35:02,350
anybody fat fingered variable name so

00:35:00,940 --> 00:35:04,720
you set the variable with one name and

00:35:02,350 --> 00:35:08,260
you use it with a slightly different

00:35:04,720 --> 00:35:12,190
name bash stringent will not let you use

00:35:08,260 --> 00:35:14,850
any unset variables so if you reference

00:35:12,190 --> 00:35:19,870
an unset variable it'll exit and say hey

00:35:14,850 --> 00:35:21,340
this variable home h/o any doesn't exist

00:35:19,870 --> 00:35:22,900
did you probably mean home well it's not

00:35:21,340 --> 00:35:24,610
going to tell you that but I mean that's

00:35:22,900 --> 00:35:30,010
what you would think is maybe I meant

00:35:24,610 --> 00:35:33,250
home hom e if you're inside pipes if

00:35:30,010 --> 00:35:34,930
you've got a big long pipe going like

00:35:33,250 --> 00:35:37,120
from this to this to this to this to do

00:35:34,930 --> 00:35:39,580
with some filtering or something it's

00:35:37,120 --> 00:35:44,080
really hard to determine where the air

00:35:39,580 --> 00:35:46,150
occurred at what level of the pipe bosch

00:35:44,080 --> 00:35:48,910
stringent unwraps all that for you and

00:35:46,150 --> 00:35:51,670
says it was at pipe level blah and it's

00:35:48,910 --> 00:35:55,990
pipe error was broken so so here in this

00:35:51,670 --> 00:35:58,270
pipe something broke and it gives you a

00:35:55,990 --> 00:35:59,860
little bit better error handling as far

00:35:58,270 --> 00:36:01,570
as where it came from so if you're

00:35:59,860 --> 00:36:04,570
sourcing a file that sources a file that

00:36:01,570 --> 00:36:06,700
sources a file and your air happened

00:36:04,570 --> 00:36:09,160
there it'll walk down it's a full stack

00:36:06,700 --> 00:36:11,500
trace essentially for bash a bash script

00:36:09,160 --> 00:36:14,260
of of what was happening very very

00:36:11,500 --> 00:36:17,740
powerful very very useful you can find

00:36:14,260 --> 00:36:19,210
the script here at github com actually

00:36:17,740 --> 00:36:20,230
he's got it on I forgot that he does

00:36:19,210 --> 00:36:25,869
have it on

00:36:20,230 --> 00:36:27,970
on github now and you can see the slide

00:36:25,869 --> 00:36:30,250
of his presentation which has a bunch of

00:36:27,970 --> 00:36:31,480
really cool bash tips and tricks I got

00:36:30,250 --> 00:36:36,730
quite a few of mine from his

00:36:31,480 --> 00:36:37,900
presentation at his website there again

00:36:36,730 --> 00:36:39,130
this is all on github so you don't have

00:36:37,900 --> 00:36:43,150
to write it down if you don't want to

00:36:39,130 --> 00:36:48,150
and very very powerful I've actually

00:36:43,150 --> 00:36:51,040
incorporated this into a bash

00:36:48,150 --> 00:36:55,840
application framework I know that sounds

00:36:51,040 --> 00:36:57,340
horrible called bash app which is in my

00:36:55,840 --> 00:36:58,990
github repository and yes I'm going to

00:36:57,340 --> 00:37:01,900
keep pimping my github repository

00:36:58,990 --> 00:37:03,430
because this is where everything is but

00:37:01,900 --> 00:37:05,200
if you ever write a bash application

00:37:03,430 --> 00:37:06,760
that you need to have like a library

00:37:05,200 --> 00:37:09,670
that does the work and then bash

00:37:06,760 --> 00:37:11,710
actually like execute it very I think

00:37:09,670 --> 00:37:13,869
it's a non them this is my hubris right

00:37:11,710 --> 00:37:19,359
I think it's a fairly simple very

00:37:13,869 --> 00:37:25,410
powerful what's the word I'm looking for

00:37:19,359 --> 00:37:25,410
a framework for writing repeatable

00:37:25,740 --> 00:37:31,480
stringent it uses stringent bash

00:37:28,830 --> 00:37:33,369
applications right so if you need bash

00:37:31,480 --> 00:37:35,800
to do anything a little bit more

00:37:33,369 --> 00:37:38,440
elaborate than just CD to hear touch

00:37:35,800 --> 00:37:40,900
this try using bash app it'll give you a

00:37:38,440 --> 00:37:44,920
big boost it also has a built-in logging

00:37:40,900 --> 00:37:49,600
mechanism my new bash apt program I

00:37:44,920 --> 00:37:53,260
wrote a log for bash modified it's

00:37:49,600 --> 00:37:55,960
essentially log4j same it's not exactly

00:37:53,260 --> 00:37:58,600
same like API compatible but it's it's

00:37:55,960 --> 00:38:01,420
the same spirit so you set a logging

00:37:58,600 --> 00:38:03,670
level and then you set send log messages

00:38:01,420 --> 00:38:07,180
instead of peppering your bash script

00:38:03,670 --> 00:38:10,150
with echoes you do a log debug or a log

00:38:07,180 --> 00:38:11,800
info and then you can dynamically change

00:38:10,150 --> 00:38:14,020
the log level as your application is

00:38:11,800 --> 00:38:16,500
running just by setting a variable which

00:38:14,020 --> 00:38:16,500
is pretty slick

00:38:21,390 --> 00:38:24,390
alright

00:38:31,200 --> 00:38:37,750
you stepped in a trap and it dropped you

00:38:35,110 --> 00:38:46,480
down in the floor into the best

00:38:37,750 --> 00:38:49,740
practices area here is the best

00:38:46,480 --> 00:38:52,120
practices for bash these are good ideas

00:38:49,740 --> 00:38:56,410
always use your variables in this form

00:38:52,120 --> 00:38:58,170
except when you don't need to it helps

00:38:56,410 --> 00:39:00,160
keep your variables a little bit better

00:38:58,170 --> 00:39:03,670
understood and it also gives you the

00:39:00,160 --> 00:39:05,020
ability to append something right to the

00:39:03,670 --> 00:39:06,750
end of the variable without it thinking

00:39:05,020 --> 00:39:11,200
that it's part of the variable name

00:39:06,750 --> 00:39:13,890
always quote unless you don't mean to so

00:39:11,200 --> 00:39:16,450
always use single call use double quotes

00:39:13,890 --> 00:39:22,390
unless you don't want to do the

00:39:16,450 --> 00:39:26,380
interpretation so that's that's that if

00:39:22,390 --> 00:39:30,600
something that you want to touch or

00:39:26,380 --> 00:39:36,070
utilize or pass as a switch to a command

00:39:30,600 --> 00:39:37,540
you can either terminate your options

00:39:36,070 --> 00:39:41,680
getting passed to the command with a

00:39:37,540 --> 00:39:43,900
double dash this is a get ops command I

00:39:41,680 --> 00:39:47,560
had to get ops option is is when i'm

00:39:43,900 --> 00:39:49,510
done with with this attack double dash

00:39:47,560 --> 00:39:51,190
and then anything that i get would let

00:39:49,510 --> 00:39:53,320
me do anything else on the command line

00:39:51,190 --> 00:39:56,940
is not an option anymore it's an

00:39:53,320 --> 00:39:56,940
argument so for example

00:40:13,170 --> 00:40:20,640
I can't touch the RF command because

00:40:18,480 --> 00:40:27,140
it's trying to interpret that our switch

00:40:20,640 --> 00:40:27,140
for touch but now I can

00:40:33,730 --> 00:40:38,780
if you ever want to really mess

00:40:36,980 --> 00:40:43,220
someone's day up create a file named

00:40:38,780 --> 00:40:46,010
dash RF in / and they don't know this

00:40:43,220 --> 00:40:48,950
terell that's bad so sysadmin comes

00:40:46,010 --> 00:40:57,010
along why do I have an RF command RI

00:40:48,950 --> 00:40:57,010
file in / RM minus R oh crap yeah so

00:40:57,370 --> 00:41:03,200
that's kind of by design but this is how

00:40:59,570 --> 00:41:05,330
you get option looking things passed to

00:41:03,200 --> 00:41:08,590
a command as an argument instead of an

00:41:05,330 --> 00:41:08,590
option question

00:41:15,350 --> 00:41:21,190
all right let's go back a little bit I

00:41:24,640 --> 00:41:28,660
think we got most of these

00:41:33,430 --> 00:41:47,140
the only other place we can go here is

00:41:35,349 --> 00:41:51,369
into the basic training let's look here

00:41:47,140 --> 00:41:56,190
at them movement this is something that

00:41:51,369 --> 00:41:56,190
I'm actually rather proud of so let's

00:42:10,640 --> 00:42:14,930
this is a vim movement table that I made

00:42:12,950 --> 00:42:17,720
one of my former co-workers created this

00:42:14,930 --> 00:42:20,299
really cool keycaps font and I had been

00:42:17,720 --> 00:42:22,339
doing presentations are actually been

00:42:20,299 --> 00:42:24,170
teaching linux classes beginning linux

00:42:22,339 --> 00:42:25,549
classes and one of the first things I

00:42:24,170 --> 00:42:28,250
did in those linux classes was draw a

00:42:25,549 --> 00:42:31,130
big plus arrow on the script on the

00:42:28,250 --> 00:42:35,089
whiteboard and then drew how you move in

00:42:31,130 --> 00:42:36,920
vim and I loved doing that but it took

00:42:35,089 --> 00:42:38,390
so long to do that my you know intro to

00:42:36,920 --> 00:42:39,680
lit class was always running light the

00:42:38,390 --> 00:42:41,420
first day because I spent so much time

00:42:39,680 --> 00:42:42,650
drawing it so I decided you know what I

00:42:41,420 --> 00:42:45,410
need to make a scalable vector graphics

00:42:42,650 --> 00:42:48,680
version of this with a key cap font so I

00:42:45,410 --> 00:42:51,589
did and this is it move back one

00:42:48,680 --> 00:42:54,049
character is H move forward as L so

00:42:51,589 --> 00:42:56,990
moving on the horizontal axis is done

00:42:54,049 --> 00:42:58,250
with those commands moving on the

00:42:56,990 --> 00:43:00,440
vertical axis is done with these

00:42:58,250 --> 00:43:01,849
commands and then of course the

00:43:00,440 --> 00:43:03,799
beginning of the previous line is here

00:43:01,849 --> 00:43:07,010
you can also add modifiers really cool

00:43:03,799 --> 00:43:08,809
tool my my contribution to the internet

00:43:07,010 --> 00:43:11,569
cheat sheet men that went around a few

00:43:08,809 --> 00:43:13,010
years back available under creative

00:43:11,569 --> 00:43:15,190
commons if you want to use it anywhere

00:43:13,010 --> 00:43:15,190
you'd like

00:43:22,050 --> 00:43:27,500
you

00:43:23,540 --> 00:43:31,000
where do you want to go from here text

00:43:27,500 --> 00:43:31,000
tools all right let's look at text tools

00:43:41,470 --> 00:43:49,309
if you are familiar with the command

00:43:45,259 --> 00:43:53,569
line in Linux you are almost positively

00:43:49,309 --> 00:43:56,660
familiar with at least one of the core

00:43:53,569 --> 00:43:59,390
utilities core utils package lots of

00:43:56,660 --> 00:44:02,119
really cool tools this is not even a

00:43:59,390 --> 00:44:04,519
tenth of what's available and they're

00:44:02,119 --> 00:44:06,319
always making new ones recently a belief

00:44:04,519 --> 00:44:09,079
fedora 18 may have it it may not it may

00:44:06,319 --> 00:44:12,470
end up in 40 or 19 there's a new human

00:44:09,079 --> 00:44:15,499
readable formatting core util so you can

00:44:12,470 --> 00:44:17,720
take a number and pipe it through this

00:44:15,499 --> 00:44:22,339
and it'll come out human readable so you

00:44:17,720 --> 00:44:23,960
can sort your DF or your D you pipe it

00:44:22,339 --> 00:44:25,579
through the filter what you don't want

00:44:23,960 --> 00:44:28,069
and then get human readable on the

00:44:25,579 --> 00:44:32,029
outside instead of having to figure it

00:44:28,069 --> 00:44:34,069
out in your head core utils are not

00:44:32,029 --> 00:44:37,099
built into batch core utils our binaries

00:44:34,069 --> 00:44:40,249
that are provided in addition to bash so

00:44:37,099 --> 00:44:41,779
and really their hand in hand you won't

00:44:40,249 --> 00:44:47,779
have a system that has bash that doesn't

00:44:41,779 --> 00:44:49,339
have core utils yes the core utils is in

00:44:47,779 --> 00:44:50,809
Mac it's a little bit different in Mac

00:44:49,339 --> 00:44:52,880
that the core utilities that are

00:44:50,809 --> 00:44:55,759
available in Mac are slightly different

00:44:52,880 --> 00:44:57,200
some of them have different options but

00:44:55,759 --> 00:44:58,730
it's the same principle they're all text

00:44:57,200 --> 00:45:00,710
tools this is where your your cut

00:44:58,730 --> 00:45:02,779
command comes from your cat command

00:45:00,710 --> 00:45:05,630
comes from so that's where those are

00:45:02,779 --> 00:45:10,180
available if you're familiar with cat

00:45:05,630 --> 00:45:12,470
raise your hand what does cat do

00:45:10,180 --> 00:45:13,940
concatenates files right so you take a

00:45:12,470 --> 00:45:16,309
big glob of files and you brings them

00:45:13,940 --> 00:45:18,410
all together and top starts from the top

00:45:16,309 --> 00:45:22,239
and prints it to the bottom the TAC

00:45:18,410 --> 00:45:24,859
command can anybody guess what that does

00:45:22,239 --> 00:45:27,470
it concatenates files and prints them

00:45:24,859 --> 00:45:34,999
from the bottom up so it reverses the

00:45:27,470 --> 00:45:37,339
content it's backwards cat head or tail

00:45:34,999 --> 00:45:39,109
is pretty useful you want to see the

00:45:37,339 --> 00:45:40,339
first X number of lines you use head if

00:45:39,109 --> 00:45:46,069
you want to see the last X number of

00:45:40,339 --> 00:45:48,730
lines you use tail very very powerful TR

00:45:46,069 --> 00:45:48,730
is kind of cool

00:45:52,760 --> 00:45:57,140
TR will translate a character

00:46:05,370 --> 00:46:19,490
so if I do hi there this is a poor man's

00:46:11,970 --> 00:46:24,480
rot 32c I want to take a through z and

00:46:19,490 --> 00:46:25,770
capital A through capital Z and I want

00:46:24,480 --> 00:46:32,210
to translate that to what's halfway

00:46:25,770 --> 00:46:41,220
through the alphabet that is a is it em

00:46:32,210 --> 00:46:46,560
em through Z a through n capital em

00:46:41,220 --> 00:46:53,340
through capital z capital A through

00:46:46,560 --> 00:46:55,260
capital n poor man's rot algorithm TR so

00:46:53,340 --> 00:46:57,870
TR will take one character of one type

00:46:55,260 --> 00:47:00,180
and turn it into another character it's

00:46:57,870 --> 00:47:03,260
also useful for turning tabs into spaces

00:47:00,180 --> 00:47:03,260
and vice versa

00:47:15,040 --> 00:47:19,540
so what I did there and this is a cool

00:47:17,470 --> 00:47:21,670
little trick is if you want to

00:47:19,540 --> 00:47:24,460
explicitly paste a special type of

00:47:21,670 --> 00:47:28,740
character into a bash command line hit

00:47:24,460 --> 00:47:34,780
control V so I hit control i typed TR

00:47:28,740 --> 00:47:37,810
tick space tick space tick control v tab

00:47:34,780 --> 00:47:40,990
and it inserted a literal tab in right

00:47:37,810 --> 00:47:45,340
there and then I hit tick again and what

00:47:40,990 --> 00:47:48,550
that's going to do is it puts a literal

00:47:45,340 --> 00:47:51,220
tab here so it changed that space into a

00:47:48,550 --> 00:47:54,720
tab let's say you have a whole bunch of

00:47:51,220 --> 00:47:54,720
spaces that you want to get rid of

00:48:01,920 --> 00:48:05,190
cannot spell

00:48:11,660 --> 00:48:17,869
you get the idea right my name is inigo

00:48:14,690 --> 00:48:20,119
montoya prepared to die if you're using

00:48:17,869 --> 00:48:22,700
something like cut this is the bane of

00:48:20,119 --> 00:48:24,920
your existence right because there's the

00:48:22,700 --> 00:48:26,480
the the field that you're cutting on is

00:48:24,920 --> 00:48:30,349
not consistent from filled the fill

00:48:26,480 --> 00:48:33,619
right the delimiter so what we do is we

00:48:30,349 --> 00:48:38,450
pipe that through TR with the dash S

00:48:33,619 --> 00:48:43,280
switch which says squeeze so squeeze any

00:48:38,450 --> 00:48:46,250
adjacent characters of space so squeeze

00:48:43,280 --> 00:48:47,390
all of the spaces and that brings it

00:48:46,250 --> 00:48:50,809
back down to something that's then

00:48:47,390 --> 00:48:52,819
parsable be a cut TR is extremely useful

00:48:50,809 --> 00:49:03,010
if your format isn't quite what you need

00:48:52,819 --> 00:49:06,589
it to be to do your cutting slice ups

00:49:03,010 --> 00:49:12,589
substrings with cut so if we wanted to

00:49:06,589 --> 00:49:15,500
do cut here so echo my name is will pipe

00:49:12,589 --> 00:49:17,750
this through cut the delimiter we want

00:49:15,500 --> 00:49:24,970
is a space so we do that with a dash c

00:49:17,750 --> 00:49:24,970
switch and I want filled three on ah

00:49:30,400 --> 00:49:36,440
alright so this is what this looks like

00:49:33,020 --> 00:49:38,710
D is for the delimiter so I'm actually

00:49:36,440 --> 00:49:41,210
looking for the delimiter of space

00:49:38,710 --> 00:49:44,000
anytime I find a space that's my filled

00:49:41,210 --> 00:49:46,029
delimiter and I want filled number three

00:49:44,000 --> 00:49:46,029
on

00:49:53,890 --> 00:50:02,540
there we go

00:49:56,890 --> 00:50:07,070
it's not the it's the delimiter and then

00:50:02,540 --> 00:50:11,290
filled number three so one two three

00:50:07,070 --> 00:50:14,750
this is three on would come through

00:50:11,290 --> 00:50:16,730
there's also turning multiple files into

00:50:14,750 --> 00:50:20,090
colombier data that's the paste command

00:50:16,730 --> 00:50:21,740
there's a opposite of that it takes

00:50:20,090 --> 00:50:24,110
column data and puts it into series

00:50:21,740 --> 00:50:26,600
there's a whole slew of them if you look

00:50:24,110 --> 00:50:28,280
at the info page for core utils that's

00:50:26,600 --> 00:50:30,590
where you're going to find all of the

00:50:28,280 --> 00:50:33,440
the commands there so if you're using

00:50:30,590 --> 00:50:35,840
info for core utils gobs and gobs and

00:50:33,440 --> 00:50:38,000
gobs and gobs of documentation i've been

00:50:35,840 --> 00:50:41,990
using bash for quite a while a little

00:50:38,000 --> 00:50:44,540
over 12 years now and i find a new core

00:50:41,990 --> 00:50:48,020
utility feature maybe once or twice a

00:50:44,540 --> 00:50:50,720
quarter just it's fun to dig through

00:50:48,020 --> 00:50:52,840
these the grep command has a dash dash

00:50:50,720 --> 00:50:55,310
color switch that I somewhat recently

00:50:52,840 --> 00:50:56,720
discovered they'll let you see you know

00:50:55,310 --> 00:50:59,120
your actual thing that you're grabbing

00:50:56,720 --> 00:51:03,230
for in color which is a fairly useful

00:50:59,120 --> 00:51:07,090
tool lots and lots of cool features

00:51:03,230 --> 00:51:07,090
there in your text tools

00:51:11,550 --> 00:51:14,640
alright let's go back and look at

00:51:13,290 --> 00:51:18,090
something else how much time are we

00:51:14,640 --> 00:51:29,640
doing are we doing well on time we got

00:51:18,090 --> 00:51:32,700
15 minutes left alright so you guys want

00:51:29,640 --> 00:51:37,880
to see variable tricks or customization

00:51:32,700 --> 00:51:37,880
tricks let's look at customization then

00:51:45,290 --> 00:51:48,200
all right let's look at what do you guys

00:51:47,270 --> 00:51:50,210
want to see you want to see how to make

00:51:48,200 --> 00:51:54,080
a function how to change key bindings

00:51:50,210 --> 00:52:02,750
how to change prompts change key

00:51:54,080 --> 00:52:04,280
bindings let's look at that nope those

00:52:02,750 --> 00:52:06,800
are the default change that the default

00:52:04,280 --> 00:52:09,470
key bindings it's not how to change them

00:52:06,800 --> 00:52:11,600
you change them and I don't have a sign

00:52:09,470 --> 00:52:14,150
that reads this but if you look at the

00:52:11,600 --> 00:52:17,750
man page for read line is where you

00:52:14,150 --> 00:52:25,430
change those key bindings read line and

00:52:17,750 --> 00:52:27,110
if you read the wonderful book learning

00:52:25,430 --> 00:52:29,360
the bash shell from O'Reilly it's a

00:52:27,110 --> 00:52:32,900
little older there may be a newer

00:52:29,360 --> 00:52:34,130
version the parts of this that I didn't

00:52:32,900 --> 00:52:37,550
get from Michael Potter and everyone

00:52:34,130 --> 00:52:39,590
else that I've borrowed from came from

00:52:37,550 --> 00:52:45,230
this book very very useful if you spend

00:52:39,590 --> 00:52:48,140
any time on the bash shell so a very

00:52:45,230 --> 00:52:55,340
very useful book learning bash it's by

00:52:48,140 --> 00:52:57,950
no goodness Cameron newham and Bill

00:52:55,340 --> 00:53:00,410
Rosenblatt I'll make sure that I mention

00:52:57,950 --> 00:53:02,600
that in my after-action report that goes

00:53:00,410 --> 00:53:05,560
into the actual github repository so

00:53:02,600 --> 00:53:05,560
you'll see that there

00:53:16,890 --> 00:53:27,160
let's just look at each of these here's

00:53:20,320 --> 00:53:29,230
some common aliases that I use q is exit

00:53:27,160 --> 00:53:30,850
I always find myself typing ll

00:53:29,230 --> 00:53:35,710
accidentally which I actually want it to

00:53:30,850 --> 00:53:37,690
be el sol which is long almost always

00:53:35,710 --> 00:53:39,040
make LS the color equals auto and have

00:53:37,690 --> 00:53:44,460
that dash f switch in there we talked

00:53:39,040 --> 00:53:48,040
about that one right redo is kind of fun

00:53:44,460 --> 00:53:50,890
sudu bang bang bang bang is a history

00:53:48,040 --> 00:53:52,860
trick if you type bang bang it reruns

00:53:50,890 --> 00:53:56,380
the previous command that you just ran

00:53:52,860 --> 00:53:59,380
or if you type baying followed by some

00:53:56,380 --> 00:54:02,530
string it fouls it goes up through your

00:53:59,380 --> 00:54:05,530
history and does the last command that

00:54:02,530 --> 00:54:10,510
contains that string which is kind of

00:54:05,530 --> 00:54:13,090
cool I've got please and thanks these

00:54:10,510 --> 00:54:17,890
are just silly aliases right so please

00:54:13,090 --> 00:54:20,530
echo hi so or and then say thanks and it

00:54:17,890 --> 00:54:21,700
says hey no problem right just to make

00:54:20,530 --> 00:54:25,690
your bash prompt a little bit more

00:54:21,700 --> 00:54:27,340
friendly right one thing I found myself

00:54:25,690 --> 00:54:30,220
doing when I was developing this course

00:54:27,340 --> 00:54:33,100
is logging out and logging back in to

00:54:30,220 --> 00:54:35,770
test my aliases that I put in my aliases

00:54:33,100 --> 00:54:38,500
file and I thought hey that's really

00:54:35,770 --> 00:54:43,630
silly shouldn't I be able to have bash

00:54:38,500 --> 00:54:45,580
just reread my aliases reaaly asst will

00:54:43,630 --> 00:54:47,950
read my bash aliases reef unction will

00:54:45,580 --> 00:54:56,080
read my bash underscore function file

00:54:47,950 --> 00:54:57,540
and it'll be ready to roll it resources

00:54:56,080 --> 00:55:04,240
them so unless you explicitly

00:54:57,540 --> 00:55:07,270
unalienable it won't so it's it's a it's

00:55:04,240 --> 00:55:11,620
a cumulative as opposed to an editor

00:55:07,270 --> 00:55:16,860
editorial type action so you have to you

00:55:11,620 --> 00:55:20,220
have to you have to force file so a

00:55:16,860 --> 00:55:24,780
fairly useful just for tweaking your

00:55:20,220 --> 00:55:24,780
your bash files as you will

00:55:33,220 --> 00:55:41,270
this is my favorite function who here

00:55:39,620 --> 00:55:49,670
okay before we look at this let's look

00:55:41,270 --> 00:55:54,320
at this something right here who here

00:55:49,670 --> 00:56:00,560
has done this what's the very next

00:55:54,320 --> 00:56:08,780
command you're going to run why not make

00:56:00,560 --> 00:56:15,050
it a single command make CD is actually

00:56:08,780 --> 00:56:16,340
make dear Dash P Double Dash so that we

00:56:15,050 --> 00:56:21,250
can get things passed through that may

00:56:16,340 --> 00:56:23,240
have dashes in them dollar sign at and

00:56:21,250 --> 00:56:30,170
for good measure we should probably

00:56:23,240 --> 00:56:33,260
quote it and then close it this alias is

00:56:30,170 --> 00:56:36,560
so their dysfunction is so awesomely

00:56:33,260 --> 00:56:39,530
simple but it saves me two commands

00:56:36,560 --> 00:56:41,360
every time I make a new directory this

00:56:39,530 --> 00:56:47,140
one doesn't here I'll actually no it

00:56:41,360 --> 00:56:57,700
doesn't CD dollar sign at thank you and

00:56:47,140 --> 00:57:00,380
then close it all right how about this

00:56:57,700 --> 00:57:06,350
will go to the example that I so know is

00:57:00,380 --> 00:57:09,140
correct so make CD and actually as you

00:57:06,350 --> 00:57:10,850
can see i ated over this a little bit so

00:57:09,140 --> 00:57:12,590
i started with just you know the make

00:57:10,850 --> 00:57:14,030
dear and CD and then someone came along

00:57:12,590 --> 00:57:16,370
and said hey it didn't work of how to

00:57:14,030 --> 00:57:18,500
dash in my file name oh hey so we'll put

00:57:16,370 --> 00:57:20,960
double dash in there and it didn't work

00:57:18,500 --> 00:57:23,030
if I it caused me some grief if the

00:57:20,960 --> 00:57:25,460
directory didn't exist so if you didn't

00:57:23,030 --> 00:57:29,210
have write access so i changed it from a

00:57:25,460 --> 00:57:33,920
double command to an and so make this

00:57:29,210 --> 00:57:38,210
directory and CD into it so fairly

00:57:33,920 --> 00:57:41,090
fairly useful tool here's another one

00:57:38,210 --> 00:57:42,980
that's in the Red Hat profile stuff

00:57:41,090 --> 00:57:46,160
you'll find this an Etsy profile I

00:57:42,980 --> 00:57:47,930
believe it's called path munge how often

00:57:46,160 --> 00:57:50,720
you find yourself typing out a full path

00:57:47,930 --> 00:57:53,270
you know path equals dollar sign path

00:57:50,720 --> 00:57:55,640
colon blah blah blah path munge is a

00:57:53,270 --> 00:58:00,230
really cool tool it's all written in

00:57:55,640 --> 00:58:02,060
bash that actually says okay put this

00:58:00,230 --> 00:58:04,640
directory into my path

00:58:02,060 --> 00:58:08,480
at the end unless of course you specify

00:58:04,640 --> 00:58:11,750
the word after they excuse me put this

00:58:08,480 --> 00:58:13,130
path into the beginning of put this

00:58:11,750 --> 00:58:15,710
directory into the beginning of my path

00:58:13,130 --> 00:58:18,290
unless of course you specify the second

00:58:15,710 --> 00:58:20,120
argument of after at which point it puts

00:58:18,290 --> 00:58:24,410
it at the end of the path that makes

00:58:20,120 --> 00:58:25,520
sense anyone yeah so it's prioritizing

00:58:24,410 --> 00:58:27,320
it at the beginning of your path

00:58:25,520 --> 00:58:30,080
variable or at the end of the path

00:58:27,320 --> 00:58:34,910
variable if you specify after so let me

00:58:30,080 --> 00:58:36,260
show you how that one works I'm sorry

00:58:34,910 --> 00:58:39,760
about the mic driving dropping on the

00:58:36,260 --> 00:58:39,760
table this is suboptimal

00:58:46,530 --> 00:58:52,020
so there's the path munge command and

00:58:49,610 --> 00:58:57,000
then it's actually going to be used down

00:58:52,020 --> 00:59:01,320
here to set up the path for the systems

00:58:57,000 --> 00:59:02,700
so it basically says if you are route

00:59:01,320 --> 00:59:12,360
you guys read that at all sure to

00:59:02,700 --> 00:59:15,510
highlight it that's a little better no

00:59:12,360 --> 00:59:18,060
oh goodness gracious probably better

00:59:15,510 --> 00:59:20,490
just not having it highlighted you guys

00:59:18,060 --> 00:59:24,270
can find this on your on your scent OS

00:59:20,490 --> 00:59:26,610
and fedora systems it's etsy profile but

00:59:24,270 --> 00:59:31,710
it basically boils down to if the UID

00:59:26,610 --> 00:59:33,810
equals 0 you are root then add user bin

00:59:31,710 --> 00:59:35,940
to the baguette a user s bin to the

00:59:33,810 --> 00:59:37,470
beginning of your path and add user

00:59:35,940 --> 00:59:42,180
local s been to the beginning of your

00:59:37,470 --> 00:59:49,610
path if you are anyone else add them to

00:59:42,180 --> 00:59:53,070
the end of the path five minutes okay

00:59:49,610 --> 00:59:56,190
other things one of the things that

00:59:53,070 --> 01:00:03,500
really gets us confused and really gets

00:59:56,190 --> 01:00:06,860
us upset is managing dot files right so

01:00:03,500 --> 01:00:06,860
let me show you

01:00:15,050 --> 01:00:23,460
how I manage my dot files I really got

01:00:19,770 --> 01:00:27,300
tired of keeping all of my dot files in

01:00:23,460 --> 01:00:29,400
sync by using our sink and ssh and I

01:00:27,300 --> 01:00:32,580
thought well I know what revision

01:00:29,400 --> 01:00:35,150
control is I should be putting my dot

01:00:32,580 --> 01:00:37,890
files into revision control so I did so

01:00:35,150 --> 01:00:39,270
but then I came into a problem I don't

01:00:37,890 --> 01:00:43,590
want my entire home directory under

01:00:39,270 --> 01:00:45,450
revision control alright so what I did

01:00:43,590 --> 01:00:48,360
is I created a projects directory called

01:00:45,450 --> 01:00:51,570
thought files and i created a bunch of

01:00:48,360 --> 01:00:53,760
dot files and the thing was is it was

01:00:51,570 --> 01:00:57,450
hard to see them unless you a liest LS

01:00:53,760 --> 01:00:59,370
two LS dash a so what I did is I like

01:00:57,450 --> 01:01:01,410
okay well I need a simple format to make

01:00:59,370 --> 01:01:04,800
a dot file not have a dot on the front

01:01:01,410 --> 01:01:10,110
of it so inside the repository they have

01:01:04,800 --> 01:01:13,440
an underscore at the front of it so the

01:01:10,110 --> 01:01:15,300
make file that I created here will look

01:01:13,440 --> 01:01:18,600
at any file that begins with underscore

01:01:15,300 --> 01:01:21,120
in this repo and link it into your home

01:01:18,600 --> 01:01:22,620
directory so you're linked into the

01:01:21,120 --> 01:01:24,150
project directory you get the benefit of

01:01:22,620 --> 01:01:27,150
having your your dot files under

01:01:24,150 --> 01:01:30,150
revision control and you get the power

01:01:27,150 --> 01:01:31,770
of not putting your entire github

01:01:30,150 --> 01:01:32,940
repository under revision control your

01:01:31,770 --> 01:01:36,210
entire home directory under revision

01:01:32,940 --> 01:01:38,610
control and it's really powerful another

01:01:36,210 --> 01:01:42,570
thing that I thought of is well why does

01:01:38,610 --> 01:01:44,220
the system get a bash underscore profile

01:01:42,570 --> 01:01:45,780
d directory right where you can just

01:01:44,220 --> 01:01:49,740
drop a single file in and it'll source

01:01:45,780 --> 01:01:53,070
it so what I did is I created myself a

01:01:49,740 --> 01:01:56,250
profile d directory and if I want a new

01:01:53,070 --> 01:01:57,870
alias or I want a new function or

01:01:56,250 --> 01:02:01,370
anything I just drop it into that

01:01:57,870 --> 01:02:04,490
profile d directory as a bash script and

01:02:01,370 --> 01:02:07,200
push it to github and pull it back down

01:02:04,490 --> 01:02:09,900
very very cool the other cool thing

01:02:07,200 --> 01:02:13,200
about using get to do your dot file

01:02:09,900 --> 01:02:14,610
management is you can use sub modules to

01:02:13,200 --> 01:02:17,850
keep any dot files that may have

01:02:14,610 --> 01:02:19,620
confidential information in them so I

01:02:17,850 --> 01:02:22,560
can share all of my dot files with all

01:02:19,620 --> 01:02:23,390
of you on github without sharing my

01:02:22,560 --> 01:02:27,109
passwords that

01:02:23,390 --> 01:02:29,869
encoded into my my sequel comp right

01:02:27,109 --> 01:02:32,000
because i use sub modules with my get

01:02:29,869 --> 01:02:36,589
mods with my git repo and the sub-module

01:02:32,000 --> 01:02:39,260
I don't share but I pull it in I do sub

01:02:36,589 --> 01:02:40,640
module in a sub-module up or sub module

01:02:39,260 --> 01:02:41,930
check out or whether the sub-module

01:02:40,640 --> 01:02:46,099
command is I always have to look it up

01:02:41,930 --> 01:02:50,779
and boom I've got my my github and my

01:02:46,099 --> 01:02:52,430
get powered dot files very very cool

01:02:50,779 --> 01:02:53,990
some of the functions that I put in here

01:02:52,430 --> 01:02:56,900
just does it as a treat you guys will

01:02:53,990 --> 01:02:58,609
find these on github okay i should start

01:02:56,900 --> 01:03:09,710
finishing that sentencing sentence for

01:02:58,609 --> 01:03:17,049
me soon oops one of the things that i

01:03:09,710 --> 01:03:17,049
like to put in here is there we go

01:03:27,780 --> 01:03:31,990
it's going to my actual legit dot files

01:03:30,099 --> 01:03:44,230
here that's got both the others end in

01:03:31,990 --> 01:03:46,619
that so CD underscore profile d one

01:03:44,230 --> 01:03:50,890
thing that I was really annoyed with all

01:03:46,619 --> 01:03:54,960
right was that when I had two terminals

01:03:50,890 --> 01:03:59,740
open they had separate bash histories

01:03:54,960 --> 01:04:07,410
annoyed that crap out of me so what I

01:03:59,740 --> 01:04:09,730
did is I actually created myself and

01:04:07,410 --> 01:04:12,609
another thing that really upset me is we

01:04:09,730 --> 01:04:14,079
had shared systems and we didn't have

01:04:12,609 --> 01:04:16,390
auditing turned on on all of those

01:04:14,079 --> 01:04:19,450
systems and I didn't have root access to

01:04:16,390 --> 01:04:20,890
turn auditing on so I created myself a

01:04:19,450 --> 01:04:23,170
poor man's auditing by sharing this

01:04:20,890 --> 01:04:24,640
saving the history complete with the

01:04:23,170 --> 01:04:28,780
command of the with the username of the

01:04:24,640 --> 01:04:31,630
person who ssh to root so so the person

01:04:28,780 --> 01:04:34,119
who SS aged into this account I would

01:04:31,630 --> 01:04:35,140
have his SSH username in the audit file

01:04:34,119 --> 01:04:36,970
which is kind of cool so that's what

01:04:35,140 --> 01:04:41,609
this does prompt command becomes history

01:04:36,970 --> 01:04:44,500
a which means store what I have and

01:04:41,609 --> 01:04:46,569
history dash n which means read what's

01:04:44,500 --> 01:04:49,480
in the file so it's basically rereading

01:04:46,569 --> 01:04:51,190
the history file rewriting and rereading

01:04:49,480 --> 01:04:55,569
the history file every time you run the

01:04:51,190 --> 01:04:57,400
prompt so next time you pull up a prompt

01:04:55,569 --> 01:04:58,630
in to screen sessions at the same time

01:04:57,400 --> 01:05:00,220
the two windows in a screen session at

01:04:58,630 --> 01:05:02,020
the same time or two different terminals

01:05:00,220 --> 01:05:03,549
you hit enter once and you'll have the

01:05:02,020 --> 01:05:06,869
complete history of the last command you

01:05:03,549 --> 01:05:12,460
ran very very powerful very very useful

01:05:06,869 --> 01:05:16,359
I control my hist format a little bit I

01:05:12,460 --> 01:05:18,099
got tired of having multiple servers

01:05:16,359 --> 01:05:20,079
where my shared home directory exists

01:05:18,099 --> 01:05:23,220
having the same dot fight on the same

01:05:20,079 --> 01:05:29,130
history file for bash so i made a per

01:05:23,220 --> 01:05:31,210
server name per year history file and

01:05:29,130 --> 01:05:33,190
there's a lot of other cool features you

01:05:31,210 --> 01:05:35,410
can do with this as well we're just

01:05:33,190 --> 01:05:38,799
about out of time I'd like to say thank

01:05:35,410 --> 01:05:41,730
you there's any other commands you guys

01:05:38,799 --> 01:05:45,480
want to hear or see

01:05:41,730 --> 01:05:45,480
we play the Red Cross

01:06:01,700 --> 01:06:05,010
don't have time to share that with you

01:06:03,750 --> 01:06:08,250
but yeah very very cool very very

01:06:05,010 --> 01:06:11,670
powerful as well well unfortunately we

01:06:08,250 --> 01:06:14,760
are out of time again I say thank you I

01:06:11,670 --> 01:06:16,800
will make sure that I put on this page

01:06:14,760 --> 01:06:18,030
here my github repos i don't think i

01:06:16,800 --> 01:06:22,580
have it in there yet I'll make sure

01:06:18,030 --> 01:06:22,580
there's a button forget hub thank

01:06:57,819 --> 01:07:02,799
most enterprises today realize that

01:07:00,519 --> 01:07:04,479
usernames and passwords alone aren't

01:07:02,799 --> 01:07:06,849
enough to keep their network saved from

01:07:04,479 --> 01:07:08,920
unauthorized intrusions that's why

01:07:06,849 --> 01:07:10,930
two-factor authentication has gotten so

01:07:08,920 --> 01:07:13,059
popular lately that adds that extra

01:07:10,930 --> 01:07:15,729
layer of protection enterprise networks

01:07:13,059 --> 01:07:17,499
need to stay safe but what you may not

01:07:15,729 --> 01:07:19,719
know is that some two-factor

01:07:17,499 --> 01:07:21,910
authentication solutions they're better

01:07:19,719 --> 01:07:24,969
than others like two-factor strong

01:07:21,910 --> 01:07:27,219
authentication with wicked wicked goes

01:07:24,969 --> 01:07:29,199
beyond other authentication systems by

01:07:27,219 --> 01:07:32,259
being less expensive easier to implement

01:07:29,199 --> 01:07:34,719
and easier to use giving software-based

01:07:32,259 --> 01:07:37,569
token clients built to run on all major

01:07:34,719 --> 01:07:40,199
devices and OSS including iOS and

01:07:37,569 --> 01:07:42,519
Android these tokens utilize a

01:07:40,199 --> 01:07:44,920
public/private key combination that's

01:07:42,519 --> 01:07:46,869
generated on device so there aren't any

01:07:44,920 --> 01:07:49,390
shared secrets flying around or

01:07:46,869 --> 01:07:52,269
attackers to hijack or which require any

01:07:49,390 --> 01:07:54,130
special handling instead all keys are

01:07:52,269 --> 01:07:56,589
kept secure and private between the

01:07:54,130 --> 01:07:58,779
requesting token and your server which

01:07:56,589 --> 01:08:00,400
you control aim house making it the most

01:07:58,779 --> 01:08:03,069
secure way possible to perform

01:08:00,400 --> 01:08:05,890
authentication encryption and with an

01:08:03,069 --> 01:08:08,650
extensive flexible API and support for

01:08:05,890 --> 01:08:10,630
protocols like L Dave and radius wicked

01:08:08,650 --> 01:08:12,020
works with any enterprise network

01:08:10,630 --> 01:08:14,530
architecture

01:08:12,020 --> 01:08:17,020
the IT systems vital to your enterprise

01:08:14,530 --> 01:08:19,130
download your wicked free trial today

01:08:17,020 --> 01:08:20,900
regardless of whether you're considering

01:08:19,130 --> 01:08:22,700
two-factor authentication for the first

01:08:20,900 --> 01:08:25,940
time we're just ready to ditch your

01:08:22,700 --> 01:08:28,339
existing expensive key file system we

01:08:25,940 --> 01:08:33,250
can help with easy to implement easy to

01:08:28,339 --> 01:08:33,250
use strong authentication from wicked

01:08:37,910 --> 01:08:44,360
how's that sigh every way this is the

01:08:41,150 --> 01:08:46,550
way to better utilize all your resources

01:08:44,360 --> 01:08:50,000
and it makes managing all your resources

01:08:46,550 --> 01:08:53,830
pretty easy all of the innovation is

01:08:50,000 --> 01:08:57,350
happening in open source the

01:08:53,830 --> 01:08:59,120
collaborative nature and of the you know

01:08:57,350 --> 01:09:01,070
of the community and then the speed at

01:08:59,120 --> 01:09:02,960
which these are these you know these

01:09:01,070 --> 01:09:04,910
these deficiencies these bugs are

01:09:02,960 --> 01:09:07,250
getting discovered and then fixed is

01:09:04,910 --> 01:09:08,930
that I think that really shows the power

01:09:07,250 --> 01:09:11,690
of the you know of the open source

01:09:08,930 --> 01:09:13,840
community it is global and it's

01:09:11,690 --> 01:09:17,390
definitely because of the users

01:09:13,840 --> 01:09:23,360
community people are extremely friendly

01:09:17,390 --> 01:09:25,100
and always ready to help if you go on

01:09:23,360 --> 01:09:27,290
tire see any day you'll see these guys

01:09:25,100 --> 01:09:29,930
helping each other out and they're all

01:09:27,290 --> 01:09:31,640
doing it like in a selfless manner the

01:09:29,930 --> 01:09:34,630
product is transparent for everyone

01:09:31,640 --> 01:09:37,790
everyone can look at the code base

01:09:34,630 --> 01:09:40,030
everyone can see how close that is being

01:09:37,790 --> 01:09:45,560
built nothing nothing is proprietary

01:09:40,030 --> 01:09:48,140
everything is open in many ways it's

01:09:45,560 --> 01:09:52,640
absolutely vital to the the unborn

01:09:48,140 --> 01:09:56,840
health cloudstack the most exciting

01:09:52,640 --> 01:09:59,580
event in recent memory for he was our

01:09:56,840 --> 01:10:02,310
first developer boot camp

01:09:59,580 --> 01:10:04,980
and our call gave people I gave you two

01:10:02,310 --> 01:10:08,940
weeks notice to come attend I was

01:10:04,980 --> 01:10:13,110
expecting 25 or 30 people so we ended up

01:10:08,940 --> 01:10:15,930
with 87 people and had to go get more

01:10:13,110 --> 01:10:18,480
chairs in the room twice everything

01:10:15,930 --> 01:10:21,720
within cloud computing is commodity and

01:10:18,480 --> 01:10:24,780
is open source and so I don't think that

01:10:21,720 --> 01:10:26,550
you will you'll see anywhere where open

01:10:24,780 --> 01:10:29,580
source is not pervasive in cloud

01:10:26,550 --> 01:10:32,130
computing and so i think it's i think

01:10:29,580 --> 01:10:33,630
it's an assumption i think when you talk

01:10:32,130 --> 01:10:34,770
about cloud computing you're really

01:10:33,630 --> 01:10:40,320
talking about open source cloud

01:10:34,770 --> 01:10:43,470
computing cloud sac is a robust solution

01:10:40,320 --> 01:10:45,870
for large deployments you have dozens of

01:10:43,470 --> 01:10:49,740
data centers and thousands of servers in

01:10:45,870 --> 01:10:52,440
each data centers these hardware is

01:10:49,740 --> 01:10:55,920
going to fail and CloudStack is designed

01:10:52,440 --> 01:10:58,620
to handle number one that mass scale

01:10:55,920 --> 01:11:01,800
number two it's designed to handle the

01:10:58,620 --> 01:11:04,680
failure that inevitably happens in large

01:11:01,800 --> 01:11:08,850
deployments started working on cog deck

01:11:04,680 --> 01:11:12,120
over four years ago and it was the

01:11:08,850 --> 01:11:13,890
original set of people working on it had

01:11:12,120 --> 01:11:18,000
a background of delivering software

01:11:13,890 --> 01:11:22,260
telcos and service providers lots of QA

01:11:18,000 --> 01:11:25,860
lots of users actually using it high

01:11:22,260 --> 01:11:28,950
availability is a key feature multiple

01:11:25,860 --> 01:11:31,110
hypervisors support different network

01:11:28,950 --> 01:11:34,140
models we can pick up whatever suits you

01:11:31,110 --> 01:11:35,910
better while step management server can

01:11:34,140 --> 01:11:39,600
be deployed in different physical

01:11:35,910 --> 01:11:41,250
machines it definitely has a huge

01:11:39,600 --> 01:11:46,230
footprint it's being deployed everywhere

01:11:41,250 --> 01:11:48,810
there's a major movie studio that they

01:11:46,230 --> 01:11:52,020
were using cloudstack they were using it

01:11:48,810 --> 01:11:54,090
to transcode video and i thought that

01:11:52,020 --> 01:11:55,740
was terribly fascinating what i found

01:11:54,090 --> 01:11:59,010
more fascinating is what they did during

01:11:55,740 --> 01:12:01,800
lunch where they would spin up you know

01:11:59,010 --> 01:12:02,970
50 or 60 game servers then as soon as

01:12:01,800 --> 01:12:04,800
lunch was over they would

01:12:02,970 --> 01:12:08,910
all the instances and go back to doing

01:12:04,800 --> 01:12:10,560
real work CloudStack is vast it touches

01:12:08,910 --> 01:12:12,630
so many different aspects and there's no

01:12:10,560 --> 01:12:15,000
one person that's kind of like a master

01:12:12,630 --> 01:12:19,110
of all those realms I think CloudStack

01:12:15,000 --> 01:12:21,360
as a project is going to be one of the

01:12:19,110 --> 01:12:25,410
leaders simply because it's some of the

01:12:21,360 --> 01:12:30,840
most feature pulling and and robust

01:12:25,410 --> 01:12:33,740
platforms out they were I don't senior

01:12:30,840 --> 01:12:33,740
living through the clouds dag

01:12:46,570 --> 01:12:48,630
you

01:12:51,920 --> 01:12:57,000
when we created asterisk over a decade

01:12:54,660 --> 01:12:58,950
ago we could not have imagined that

01:12:57,000 --> 01:13:01,170
asterisk would not only become the most

01:12:58,950 --> 01:13:03,300
widely adopted open source communication

01:13:01,170 --> 01:13:05,340
software on the planet but that it would

01:13:03,300 --> 01:13:07,860
impact the entire industry in the way

01:13:05,340 --> 01:13:09,840
that it has today asterisk has found its

01:13:07,860 --> 01:13:12,480
way in the more than 170 countries and

01:13:09,840 --> 01:13:14,430
virtually every fortune 1000 company the

01:13:12,480 --> 01:13:16,530
success of asterisk has enabled a

01:13:14,430 --> 01:13:17,940
transition of power from the hands of

01:13:16,530 --> 01:13:20,190
the traditional proprietary phone

01:13:17,940 --> 01:13:22,590
vendors into the hands of the users and

01:13:20,190 --> 01:13:24,540
administrators of phone systems using

01:13:22,590 --> 01:13:25,770
this power our customers have created

01:13:24,540 --> 01:13:27,720
all sorts of business changing

01:13:25,770 --> 01:13:29,550
applications from small office phone

01:13:27,720 --> 01:13:32,070
systems to mission-critical call centers

01:13:29,550 --> 01:13:33,690
to international carrier networks in

01:13:32,070 --> 01:13:35,460
fact there's even an entire country

01:13:33,690 --> 01:13:38,070
those communications infrastructure runs

01:13:35,460 --> 01:13:39,990
on esters the gym has always been about

01:13:38,070 --> 01:13:41,700
creating technology that expands

01:13:39,990 --> 01:13:43,860
communications capabilities in ways that

01:13:41,700 --> 01:13:45,240
we could never have imagined and that's

01:13:43,860 --> 01:13:47,880
part of what's game-changing about the

01:13:45,240 --> 01:13:50,340
gym today we're doing it again this time

01:13:47,880 --> 01:13:52,440
by introducing a new family of HD IP

01:13:50,340 --> 01:13:54,720
phones that extends control of the user

01:13:52,440 --> 01:13:56,490
all the way to the desktop the launch of

01:13:54,720 --> 01:13:58,010
these new products represents the next

01:13:56,490 --> 01:14:00,630
phase indigenous history of innovation

01:13:58,010 --> 01:14:02,610
these are the first and only IP phones

01:14:00,630 --> 01:14:04,200
designed to fully leverage the power of

01:14:02,610 --> 01:14:05,820
esters when we first discussed our

01:14:04,200 --> 01:14:07,620
expectations for building a family of

01:14:05,820 --> 01:14:09,780
phones for use with asterisk our

01:14:07,620 --> 01:14:11,520
requirements were pretty simple we asked

01:14:09,780 --> 01:14:13,140
the team to build the phones such that

01:14:11,520 --> 01:14:15,360
they were easy to install integrate

01:14:13,140 --> 01:14:17,190
provision and use I think you'll soon

01:14:15,360 --> 01:14:19,770
agree our engineers have delivered on

01:14:17,190 --> 01:14:21,390
that goal user feedback is validating

01:14:19,770 --> 01:14:23,520
that when it comes to operation with

01:14:21,390 --> 01:14:25,920
astro space systems including our own

01:14:23,520 --> 01:14:28,500
Switchvox based product these are the

01:14:25,920 --> 01:14:29,820
easiest to use best integrated most

01:14:28,500 --> 01:14:32,400
interoperable products on the market

01:14:29,820 --> 01:14:34,400
today the Digium family phones will

01:14:32,400 --> 01:14:36,450
initially include three IP des hommes

01:14:34,400 --> 01:14:38,400
uniquely designed to complement any

01:14:36,450 --> 01:14:40,260
asterisk or switch box based solution

01:14:38,400 --> 01:14:42,930
these phones are different for a number

01:14:40,260 --> 01:14:45,570
of reasons first there is clue sively

01:14:42,930 --> 01:14:47,010
designed for use with esters secondly

01:14:45,570 --> 01:14:48,620
we've made it really easy to

01:14:47,010 --> 01:14:51,030
autodiscover and provision the phones

01:14:48,620 --> 01:14:52,710
next we've made it easy for the phones

01:14:51,030 --> 01:14:54,640
to access information inside of

01:14:52,710 --> 01:14:56,640
asterisks allowing tight coupling

01:14:54,640 --> 01:14:58,630
between an application and the phone

01:14:56,640 --> 01:15:00,790
additionally we've created an

01:14:58,630 --> 01:15:02,920
application's engine that allows users

01:15:00,790 --> 01:15:06,130
and developers to create and run their

01:15:02,920 --> 01:15:07,900
own apps on the phone and finally we've

01:15:06,130 --> 01:15:09,880
done all of this at a very compelling

01:15:07,900 --> 01:15:11,530
price point at Digium we're always

01:15:09,880 --> 01:15:13,630
thinking of ways to give our customers

01:15:11,530 --> 01:15:16,210
the best value in business phone systems

01:15:13,630 --> 01:15:17,770
and also give them the power to create

01:15:16,210 --> 01:15:19,900
their own solutions or any

01:15:17,770 --> 01:15:21,640
communications challenge will continue

01:15:19,900 --> 01:15:23,050
to push the boundaries not only to make

01:15:21,640 --> 01:15:25,090
Astra's cooler faster and more

01:15:23,050 --> 01:15:26,740
technologically feature-rich but to make

01:15:25,090 --> 01:15:29,200
asterisk employed communications even

01:15:26,740 --> 01:15:32,310
easier and together we'll change the way

01:15:29,200 --> 01:15:32,310
the world communication again

01:15:40,219 --> 01:15:44,489
your customers rely on your website or

01:15:42,989 --> 01:15:46,889
application if it's slower

01:15:44,489 --> 01:15:49,829
non-responsive it infuriates your users

01:15:46,889 --> 01:15:51,630
and costs you money keeping your

01:15:49,829 --> 01:15:55,150
business critical systems humming along

01:15:51,630 --> 01:15:57,460
requires insight into what they're doing

01:15:55,150 --> 01:15:59,409
your system metrics tells stories

01:15:57,460 --> 01:16:01,420
stories that can reveal performance

01:15:59,409 --> 01:16:03,760
bottlenecks resource limitations and

01:16:01,420 --> 01:16:05,320
other problems but how do you keep an

01:16:03,760 --> 01:16:07,960
eye on all of your systems performance

01:16:05,320 --> 01:16:11,020
metrics in real-time and record this

01:16:07,960 --> 01:16:12,969
data for later analysis enter longview

01:16:11,020 --> 01:16:14,770
the new way to see what's really going

01:16:12,969 --> 01:16:16,929
on under the hood the long view

01:16:14,770 --> 01:16:19,000
dashboard lets you visualize the status

01:16:16,929 --> 01:16:21,460
of all your systems providing you with a

01:16:19,000 --> 01:16:24,820
bird's-eye view of your entire fleet you

01:16:21,460 --> 01:16:27,400
can sort by cpu memory swap processes

01:16:24,820 --> 01:16:29,170
load and network usage click a specific

01:16:27,400 --> 01:16:31,570
system to access its individual

01:16:29,170 --> 01:16:34,080
dashboard then click and drag to zoom in

01:16:31,570 --> 01:16:36,489
on chokepoints and get more detail

01:16:34,080 --> 01:16:38,170
comprehensive network data including

01:16:36,489 --> 01:16:40,480
inbound and outbound traffic is

01:16:38,170 --> 01:16:42,040
available on the network tab and disk

01:16:40,480 --> 01:16:43,960
rights and free space on the disk

01:16:42,040 --> 01:16:46,810
stabbed while the process Explorer

01:16:43,960 --> 01:16:49,330
displays usage statistics for individual

01:16:46,810 --> 01:16:51,489
processes the system info tab shows

01:16:49,330 --> 01:16:53,739
listening services active connections

01:16:51,489 --> 01:16:55,870
and available updates adding long view

01:16:53,739 --> 01:16:57,580
to a system is easy just click the

01:16:55,870 --> 01:16:59,710
button copy the one line installation

01:16:57,580 --> 01:17:02,170
command then run the command on your

01:16:59,710 --> 01:17:03,850
linux system to complete the process the

01:17:02,170 --> 01:17:06,040
agent will begin collecting data and

01:17:03,850 --> 01:17:07,900
sending it to longview then the graph

01:17:06,040 --> 01:17:10,449
start rolling

01:17:07,900 --> 01:17:12,820
use longview to gain visibility into

01:17:10,449 --> 01:17:16,560
your servers so when your website or app

01:17:12,820 --> 01:17:16,560

YouTube URL: https://www.youtube.com/watch?v=GgaPEXGnChM


