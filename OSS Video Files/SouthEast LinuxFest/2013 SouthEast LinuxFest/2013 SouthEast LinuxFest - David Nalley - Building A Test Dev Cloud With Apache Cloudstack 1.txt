Title: 2013 SouthEast LinuxFest - David Nalley - Building A Test Dev Cloud With Apache Cloudstack 1
Publication date: 2015-04-17
Playlist: 2013 SouthEast LinuxFest
Description: 
	2013 SouthEast LinuxFest - David Nalley - Building A Test/Dev Cloud With Apache Cloudstack
Captions: 
	00:00:00,000 --> 00:00:05,160
the following presentation was recorded

00:00:02,639 --> 00:00:08,280
at the 2013 southeast linux fest in

00:00:05,160 --> 00:00:10,860
charlotte north carolina it is licensed

00:00:08,280 --> 00:00:12,509
under a creative commons license for

00:00:10,860 --> 00:00:16,619
more information about the southeast

00:00:12,509 --> 00:00:19,830
linux fest visit WWF eastland TX phase

00:00:16,619 --> 00:00:21,600
or the southeast linux fest would like

00:00:19,830 --> 00:00:24,000
to thank the following diamond sponsors

00:00:21,600 --> 00:00:28,470
in 2013 for helping make these videos

00:00:24,000 --> 00:00:33,390
possible first of all this is a somewhat

00:00:28,470 --> 00:00:34,860
opinionated conversation I'm talk so I

00:00:33,390 --> 00:00:37,890
am sure that you will find plenty to

00:00:34,860 --> 00:00:40,200
disagree with me about especially Russ

00:00:37,890 --> 00:00:44,879
who's sitting in the back I will

00:00:40,200 --> 00:00:47,010
apologize to you in advance feel free to

00:00:44,879 --> 00:00:52,829
grab my contact information and flame me

00:00:47,010 --> 00:00:55,620
either on Twitter or via email so we're

00:00:52,829 --> 00:01:02,910
going to talk about building a test

00:00:55,620 --> 00:01:04,769
devcloud and I think test of is a is an

00:01:02,910 --> 00:01:06,900
ideal application for getting your feet

00:01:04,769 --> 00:01:10,950
wet with infrastructure as a service

00:01:06,900 --> 00:01:12,659
cloud computing but real briefly let me

00:01:10,950 --> 00:01:16,560
tell you a little bit about me so I'm a

00:01:12,659 --> 00:01:20,100
recovering sysadmin i worked in worked

00:01:16,560 --> 00:01:23,159
in operations for about a decade this

00:01:20,100 --> 00:01:27,600
means i I still know that it's down not

00:01:23,159 --> 00:01:29,909
across but for about the past two years

00:01:27,600 --> 00:01:34,380
I've been really working more on the dev

00:01:29,909 --> 00:01:40,470
side and working on Apache CloudStack

00:01:34,380 --> 00:01:42,060
now so I I'm a PMC member which is the

00:01:40,470 --> 00:01:46,079
project management committee for Apache

00:01:42,060 --> 00:01:48,829
CloudStack and I'm also a member of the

00:01:46,079 --> 00:01:51,090
apache software foundation now

00:01:48,829 --> 00:01:53,689
historically I've been very involved in

00:01:51,090 --> 00:01:56,100
a couple of other open source projects

00:01:53,689 --> 00:02:00,119
really pointing back to kind of my

00:01:56,100 --> 00:02:03,020
operations roots so I was a contributor

00:02:00,119 --> 00:02:05,549
to Zeno's and wrote a number of

00:02:03,020 --> 00:02:10,470
monitoring plugins present us over the

00:02:05,549 --> 00:02:13,090
years and also used to work a lot and

00:02:10,470 --> 00:02:15,790
the Fedora project and now I do

00:02:13,090 --> 00:02:19,000
a lot less of that although I'm still

00:02:15,790 --> 00:02:21,160
somewhat active and for about the past

00:02:19,000 --> 00:02:22,870
year and a half I've been employed by

00:02:21,160 --> 00:02:28,989
Citrix and work in the open source

00:02:22,870 --> 00:02:33,370
business office now citrix so why are

00:02:28,989 --> 00:02:38,489
why would we use a cloud environment for

00:02:33,370 --> 00:02:40,599
dev test I think that you would do this

00:02:38,489 --> 00:02:42,549
for a number of reasons but let me

00:02:40,599 --> 00:02:46,329
explain to you what the process looks

00:02:42,549 --> 00:02:49,480
like from a developer standpoint you get

00:02:46,329 --> 00:02:51,400
a new project to work on and the first

00:02:49,480 --> 00:02:55,150
thing you do is you go request resources

00:02:51,400 --> 00:02:59,410
to begin working on that project and you

00:02:55,150 --> 00:03:04,329
wait and it's not just waiting a day or

00:02:59,410 --> 00:03:07,200
two so I went and talked to me went in

00:03:04,329 --> 00:03:09,489
here from Clemson before my mouth Benson

00:03:07,200 --> 00:03:11,950
so I'm going to talk to the folks at

00:03:09,489 --> 00:03:15,760
Clemson they have they have a high

00:03:11,950 --> 00:03:18,430
performance computing lab there and I

00:03:15,760 --> 00:03:21,010
sat down with some of the folks at

00:03:18,430 --> 00:03:24,310
Clemson and said you know tell me about

00:03:21,010 --> 00:03:27,280
your processes if a researcher comes up

00:03:24,310 --> 00:03:30,069
and wants to give access to do something

00:03:27,280 --> 00:03:33,970
in this lab what does that process look

00:03:30,069 --> 00:03:37,630
like it takes them eight weeks to give

00:03:33,970 --> 00:03:39,849
access to a virtual machine that's not

00:03:37,630 --> 00:03:43,810
having to order hardware that's not

00:03:39,849 --> 00:03:46,510
having to Rack rack that hardware that

00:03:43,810 --> 00:03:49,989
is to turn on a virtual machine get the

00:03:46,510 --> 00:03:52,329
IP address allocated so so when a

00:03:49,989 --> 00:03:54,250
developer wants to come and work on

00:03:52,329 --> 00:03:58,269
something they have to ask for resources

00:03:54,250 --> 00:04:00,370
they wait wait wait those resources then

00:03:58,269 --> 00:04:01,959
get handed to them but the resources

00:04:00,370 --> 00:04:04,419
aren't configured because that's handled

00:04:01,959 --> 00:04:08,680
by someone else so they wait again to

00:04:04,419 --> 00:04:11,650
get that configured and then I only put

00:04:08,680 --> 00:04:17,289
one wait state here but getting network

00:04:11,650 --> 00:04:20,859
access is very painful so I actually Joe

00:04:17,289 --> 00:04:24,070
and I went and install the lab in North

00:04:20,859 --> 00:04:25,780
Carolina we had gotten permission for

00:04:24,070 --> 00:04:27,250
the power we have actually gotten them

00:04:25,780 --> 00:04:30,190
to set up the rack

00:04:27,250 --> 00:04:33,790
cable the rack and we just went in to

00:04:30,190 --> 00:04:36,430
drop the equipment in we still have not

00:04:33,790 --> 00:04:39,100
gotten network access almost a month

00:04:36,430 --> 00:04:43,540
later and we had been asking for access

00:04:39,100 --> 00:04:45,310
since februari so particularly as you

00:04:43,540 --> 00:04:48,640
get larger and larger getting network

00:04:45,310 --> 00:04:56,320
access is a is a big pain so I've got

00:04:48,640 --> 00:04:57,640
now around 10 machines and probably ten

00:04:56,320 --> 00:04:59,710
thousand dollars worth of networking

00:04:57,640 --> 00:05:02,560
equipment that's sitting idle because i

00:04:59,710 --> 00:05:05,980
can't get network access done fast

00:05:02,560 --> 00:05:10,030
enough so this is what it looks like

00:05:05,980 --> 00:05:12,100
from a developer's standpoint and

00:05:10,030 --> 00:05:15,880
hopefully after all of this waiting they

00:05:12,100 --> 00:05:19,690
can actually get things done i talked to

00:05:15,880 --> 00:05:21,370
another company which is actually a web

00:05:19,690 --> 00:05:22,450
focused company so you would think they

00:05:21,370 --> 00:05:25,780
would know how to do this a little

00:05:22,450 --> 00:05:28,150
faster they said that when a developer

00:05:25,780 --> 00:05:30,130
asked for resources keep in mind these

00:05:28,150 --> 00:05:33,010
are not production resources these are

00:05:30,130 --> 00:05:35,280
just I need to go a hack on something

00:05:33,010 --> 00:05:37,780
and need an environment to do that in

00:05:35,280 --> 00:05:40,660
there looking at three months right now

00:05:37,780 --> 00:05:45,669
from the time its first requested until

00:05:40,660 --> 00:05:49,120
it's actually usable so this is a this

00:05:45,669 --> 00:05:51,630
is the kind of the problem domain the

00:05:49,120 --> 00:05:53,680
real problem is is that operations is

00:05:51,630 --> 00:05:57,580
providing something that developers

00:05:53,680 --> 00:06:03,610
aren't looking for and quite honestly

00:05:57,580 --> 00:06:06,760
that they don't want so that is that's

00:06:03,610 --> 00:06:10,840
really the problem statement and dev

00:06:06,760 --> 00:06:13,720
test is really a place you can you can

00:06:10,840 --> 00:06:15,400
move things forward so what we're

00:06:13,720 --> 00:06:18,370
talking about hopefully is removing

00:06:15,400 --> 00:06:20,440
constraints and making sure that when we

00:06:18,370 --> 00:06:24,760
have processes in place that they

00:06:20,440 --> 00:06:27,940
actually add value to the business while

00:06:24,760 --> 00:06:29,290
we want to what we want to send everyone

00:06:27,940 --> 00:06:33,570
away and replace them with very small

00:06:29,290 --> 00:06:36,700
Perl scripts we also need to have some

00:06:33,570 --> 00:06:40,740
enforcement of policy and compliance and

00:06:36,700 --> 00:06:42,240
also to keep to keep

00:06:40,740 --> 00:06:47,849
check because we don't want to give

00:06:42,240 --> 00:06:49,349
people a blank check we also want those

00:06:47,849 --> 00:06:51,660
developers to actually be able to get

00:06:49,349 --> 00:06:53,639
things done paying a developer to sit

00:06:51,660 --> 00:06:56,669
around and wait for three months while

00:06:53,639 --> 00:07:00,449
you provision a virtual machine is not

00:06:56,669 --> 00:07:03,090
an effective use of your developers how

00:07:00,449 --> 00:07:06,690
many folks in here have the first of all

00:07:03,090 --> 00:07:11,430
how many folks are developers how many

00:07:06,690 --> 00:07:13,229
folks are ops people okay for the ops

00:07:11,430 --> 00:07:16,740
people how many of your environments are

00:07:13,229 --> 00:07:20,520
running have you have developers running

00:07:16,740 --> 00:07:23,849
workloads in AWS only one person

00:07:20,520 --> 00:07:28,919
admitted it okay so i will tell you what

00:07:23,849 --> 00:07:30,630
I found I am cursed or blessed depending

00:07:28,919 --> 00:07:33,449
on your perspective to go and get to

00:07:30,630 --> 00:07:37,860
talk to lots of different people and I

00:07:33,449 --> 00:07:39,840
found that even in large fortune 500

00:07:37,860 --> 00:07:43,289
companies that have all kinds of

00:07:39,840 --> 00:07:46,919
regulatory compliance frameworks that

00:07:43,289 --> 00:07:49,259
when they go and do an audit they are

00:07:46,919 --> 00:07:53,820
paying multiple thousands of dollars a

00:07:49,259 --> 00:07:55,560
month to a bookseller and essentially

00:07:53,820 --> 00:07:59,280
development managers are going out and

00:07:55,560 --> 00:08:01,340
expensing AWS environments even in

00:07:59,280 --> 00:08:03,960
places that you would say oh that

00:08:01,340 --> 00:08:06,690
company that makes incredibly expensive

00:08:03,960 --> 00:08:09,120
software and makes multiple billions of

00:08:06,690 --> 00:08:13,949
dollars of year off of software that

00:08:09,120 --> 00:08:15,210
they develop they're actually pushing a

00:08:13,949 --> 00:08:17,550
lot of their development environment

00:08:15,210 --> 00:08:20,550
into AWS because they can get things

00:08:17,550 --> 00:08:22,490
done so much faster there and when the

00:08:20,550 --> 00:08:25,590
company's discover that it absolutely

00:08:22,490 --> 00:08:27,630
terrifies them so if you have more than

00:08:25,590 --> 00:08:30,990
10 employees 10 developers rather and

00:08:27,630 --> 00:08:33,899
you and you do not work in a skiff I am

00:08:30,990 --> 00:08:36,169
willing to bet that somewhere people are

00:08:33,899 --> 00:08:39,779
using are actually doing their work in

00:08:36,169 --> 00:08:41,729
Amazon or in some similar environment

00:08:39,779 --> 00:08:47,089
unless you work for some place that is

00:08:41,729 --> 00:08:47,089
terribly forward-thinking so

00:08:47,380 --> 00:08:53,690
let me describe what I think a dev test

00:08:50,510 --> 00:08:56,870
cloud looks like the first thing I think

00:08:53,690 --> 00:08:58,310
a cloud any cloud regardless of what

00:08:56,870 --> 00:09:01,430
you're using it far looks like is that

00:08:58,310 --> 00:09:04,220
it is self service if you are injecting

00:09:01,430 --> 00:09:07,430
yourself into if you are injecting

00:09:04,220 --> 00:09:11,780
operations rather into this workflow

00:09:07,430 --> 00:09:13,340
you're doing it wrong and developers

00:09:11,780 --> 00:09:16,430
ought to be able to provision a virtual

00:09:13,340 --> 00:09:21,550
machine there is nothing that you add

00:09:16,430 --> 00:09:26,150
value to in in a provisioning standpoint

00:09:21,550 --> 00:09:28,100
to to inject yourself in so they ought

00:09:26,150 --> 00:09:30,890
to be able to get a virtual machine they

00:09:28,100 --> 00:09:35,450
ought to have a set of rules enforced

00:09:30,890 --> 00:09:37,340
around that so so you ought to be able

00:09:35,450 --> 00:09:39,620
to limit how much CPU they can consume

00:09:37,340 --> 00:09:43,820
you ought to be able to limit how much

00:09:39,620 --> 00:09:45,620
network bandwidth they can consume but

00:09:43,820 --> 00:09:47,570
they ought to be able to go out and get

00:09:45,620 --> 00:09:50,240
this done if they can't go out and get

00:09:47,570 --> 00:09:53,780
this done organizationally you've got

00:09:50,240 --> 00:09:58,280
another set of challenges so I've got to

00:09:53,780 --> 00:10:01,280
talk tomorrow about DevOps cloud

00:09:58,280 --> 00:10:06,770
computing and the death of backup tape

00:10:01,280 --> 00:10:08,480
changers and I think that one of the the

00:10:06,770 --> 00:10:11,150
pain points that people are starting to

00:10:08,480 --> 00:10:14,780
experience is that a lot of the

00:10:11,150 --> 00:10:17,570
traditional jobs especially the low

00:10:14,780 --> 00:10:22,700
level entry jobs in IT are rapidly

00:10:17,570 --> 00:10:26,270
vanishing and I think much like the guy

00:10:22,700 --> 00:10:29,500
who used to change those big backup tape

00:10:26,270 --> 00:10:32,720
reels those jobs are disappearing and

00:10:29,500 --> 00:10:36,110
and DevOps cloud computing and a lot of

00:10:32,720 --> 00:10:39,470
the automation advances are making those

00:10:36,110 --> 00:10:41,240
jobs go away if you are injecting

00:10:39,470 --> 00:10:43,310
yourself in here I would argue that you

00:10:41,240 --> 00:10:44,900
are doing yourself a disservice and you

00:10:43,310 --> 00:10:49,550
are actively trying to get yourself

00:10:44,900 --> 00:10:52,940
fired and I mean that purely from a

00:10:49,550 --> 00:10:54,950
business standpoint because there's if

00:10:52,940 --> 00:10:57,740
you can automate compliance and you can

00:10:54,950 --> 00:10:59,270
automate all of the processes that you

00:10:57,740 --> 00:11:01,740
care about

00:10:59,270 --> 00:11:04,170
injecting yourself as a manual wait

00:11:01,740 --> 00:11:07,080
state is doing the business of this

00:11:04,170 --> 00:11:10,920
service and I really do think that

00:11:07,080 --> 00:11:13,680
you're creating a threat for yourself so

00:11:10,920 --> 00:11:15,750
we talked about developers being able to

00:11:13,680 --> 00:11:17,360
do things on their own you also need to

00:11:15,750 --> 00:11:20,820
be able to measure what they're doing

00:11:17,360 --> 00:11:23,160
you need to be able to tell that the new

00:11:20,820 --> 00:11:26,190
project that people are working on for

00:11:23,160 --> 00:11:28,650
an ERP system is consuming in amount of

00:11:26,190 --> 00:11:32,250
resources you need to be able to show

00:11:28,650 --> 00:11:35,340
people hey this department is consuming

00:11:32,250 --> 00:11:37,500
a third of our resources for storage and

00:11:35,340 --> 00:11:40,640
if they continue on this rate we're

00:11:37,500 --> 00:11:42,990
going to have to purchase more because

00:11:40,640 --> 00:11:46,440
you know you need to be able to allocate

00:11:42,990 --> 00:11:47,760
that cost back to them whether you're

00:11:46,440 --> 00:11:50,640
going to do a chargeback or you're just

00:11:47,760 --> 00:11:53,730
showing where the where your resources

00:11:50,640 --> 00:11:56,910
are going I also think that you need to

00:11:53,730 --> 00:11:59,160
be able to isolate people it's great

00:11:56,910 --> 00:12:01,080
that you allow developers to go and

00:11:59,160 --> 00:12:03,690
provision their own stuff but from an

00:12:01,080 --> 00:12:07,110
OPS perspective you want to control what

00:12:03,690 --> 00:12:10,320
they can do with that and so you want to

00:12:07,110 --> 00:12:12,390
be very very careful with the amount of

00:12:10,320 --> 00:12:15,900
access that you provide them out into

00:12:12,390 --> 00:12:19,080
the real world I think you want to do

00:12:15,900 --> 00:12:20,850
this as cheaply as possible having a

00:12:19,080 --> 00:12:23,910
multi-million dollar sand for your test

00:12:20,850 --> 00:12:27,000
dev environment does not add value in

00:12:23,910 --> 00:12:30,120
the vast majority of cases there are

00:12:27,000 --> 00:12:33,180
some corner cases the other thing that

00:12:30,120 --> 00:12:35,820
that inevitably happens is people begin

00:12:33,180 --> 00:12:38,190
liking the fact that they can self

00:12:35,820 --> 00:12:39,780
service provision things and they'll

00:12:38,190 --> 00:12:41,130
start putting production workloads and

00:12:39,780 --> 00:12:45,840
this is something that you actually have

00:12:41,130 --> 00:12:50,120
to either guard against or plan for my

00:12:45,840 --> 00:12:52,950
favorite story is a movie company in

00:12:50,120 --> 00:12:55,610
California set up a CloudStack

00:12:52,950 --> 00:12:59,220
environment as a test dev environment

00:12:55,610 --> 00:13:01,020
they decided that that their initial

00:12:59,220 --> 00:13:02,520
implementation wasn't the best that they

00:13:01,020 --> 00:13:05,210
wanted to change a lot of things they

00:13:02,520 --> 00:13:10,150
started the process for tearing it down

00:13:05,210 --> 00:13:13,720
and suddenly panic

00:13:10,150 --> 00:13:16,960
started spreading throughout the dev

00:13:13,720 --> 00:13:19,420
side of the house because the web page

00:13:16,960 --> 00:13:22,780
of the company as well as a lot of their

00:13:19,420 --> 00:13:26,200
revenue generating video streams and

00:13:22,780 --> 00:13:30,520
games were actually running on their

00:13:26,200 --> 00:13:31,960
tests dev environment and they liked it

00:13:30,520 --> 00:13:34,150
so much it was so easy for them to get

00:13:31,960 --> 00:13:37,120
things done they just moved all of that

00:13:34,150 --> 00:13:40,270
off of their legacy systems into their

00:13:37,120 --> 00:13:44,380
tests devcloud without bothering to tell

00:13:40,270 --> 00:13:46,930
the ops folks so you really do have to

00:13:44,380 --> 00:13:49,000
either guard or plan for that and a test

00:13:46,930 --> 00:13:51,900
devcloud does not resemble what you

00:13:49,000 --> 00:13:54,610
would want to run production services on

00:13:51,900 --> 00:13:57,210
so let's talk about self service because

00:13:54,610 --> 00:13:59,590
I think we gloss over this quite a bit

00:13:57,210 --> 00:14:03,010
I've said before I don't think that

00:13:59,590 --> 00:14:06,210
manual provisioning adds value if your

00:14:03,010 --> 00:14:08,800
job today involves you carrying around a

00:14:06,210 --> 00:14:11,260
CD and clicking through the windows

00:14:08,800 --> 00:14:14,260
installer or clicking through a Linux

00:14:11,260 --> 00:14:16,450
installer for that matter your job is

00:14:14,260 --> 00:14:18,640
going to be very short-lived it quite

00:14:16,450 --> 00:14:21,940
honestly should not have existed the

00:14:18,640 --> 00:14:24,760
past five years we have things like r is

00:14:21,940 --> 00:14:28,480
for windows we have kickstart for Linux

00:14:24,760 --> 00:14:33,250
our proceed depending upon your district

00:14:28,480 --> 00:14:35,350
choice there is no reason for people to

00:14:33,250 --> 00:14:40,630
be carrying around a CD anymore to

00:14:35,350 --> 00:14:43,210
install machines this self service can

00:14:40,630 --> 00:14:44,530
be completely automated the question

00:14:43,210 --> 00:14:47,440
that you need to answer for your

00:14:44,530 --> 00:14:50,740
environment is do I need to provide them

00:14:47,440 --> 00:14:54,160
just you know a blank ubuntu machine or

00:14:50,740 --> 00:14:56,050
blank centos machine or do they need a

00:14:54,160 --> 00:14:58,540
fully configured environment do i need

00:14:56,050 --> 00:15:01,650
to spin up an entire Hadoop cluster for

00:14:58,540 --> 00:15:04,000
them or do I just provide them access to

00:15:01,650 --> 00:15:08,140
two virtual machines r all virtual

00:15:04,000 --> 00:15:10,270
machines the next set of considerations

00:15:08,140 --> 00:15:13,210
is what are you actually providing

00:15:10,270 --> 00:15:16,840
what's the interface are you going to

00:15:13,210 --> 00:15:21,010
provide them some user interface are you

00:15:16,840 --> 00:15:22,090
going to provide them API access are you

00:15:21,010 --> 00:15:23,109
actually going to provide some

00:15:22,090 --> 00:15:27,649
higher-level

00:15:23,109 --> 00:15:31,069
so I think user interfaces are great you

00:15:27,649 --> 00:15:32,839
should show them to your managers but

00:15:31,069 --> 00:15:39,139
you should not do real work in a user

00:15:32,839 --> 00:15:42,739
interface CloudStack has a gorgeous user

00:15:39,139 --> 00:15:44,629
interface but it's even if you keep all

00:15:42,739 --> 00:15:47,779
of the defaults it's six klicks to

00:15:44,629 --> 00:15:49,160
deploy a single virtual machine nobody

00:15:47,779 --> 00:15:52,689
in their right mind wants to do that if

00:15:49,160 --> 00:15:54,799
they have to do it more than once so you

00:15:52,689 --> 00:15:57,499
eyes are great show them to your

00:15:54,799 --> 00:16:01,879
managers they're beautiful but don't do

00:15:57,499 --> 00:16:05,059
real work in them so using using an API

00:16:01,879 --> 00:16:08,619
or a command line tool so CloudStack has

00:16:05,059 --> 00:16:11,689
a command line tool called cloud monkey

00:16:08,619 --> 00:16:16,129
that allows you so this is a deployed

00:16:11,689 --> 00:16:19,759
virtual machine with telling it the cpu

00:16:16,129 --> 00:16:21,709
and ram configuration the disk image and

00:16:19,759 --> 00:16:24,649
which availability zone that you're

00:16:21,709 --> 00:16:28,039
deploying it in and I did something

00:16:24,649 --> 00:16:32,689
slightly more parsable for for actual

00:16:28,039 --> 00:16:36,019
direct API interaction those are fine

00:16:32,689 --> 00:16:42,649
most developers can can easily do either

00:16:36,019 --> 00:16:45,109
of those and that may be enough but if

00:16:42,649 --> 00:16:47,839
your if your developers need anything

00:16:45,109 --> 00:16:50,059
more than just a raw virtual machine I

00:16:47,839 --> 00:16:53,350
think you ought to look at using

00:16:50,059 --> 00:16:56,689
configuration management for deployment

00:16:53,350 --> 00:16:58,999
so I'm going to show something here and

00:16:56,689 --> 00:17:03,350
I will apologize that this is probably

00:16:58,999 --> 00:17:07,429
unpossible are unreadable where you're

00:17:03,350 --> 00:17:11,629
sitting so this is a this is actually

00:17:07,429 --> 00:17:14,689
from a tool called knife how many folks

00:17:11,629 --> 00:17:16,909
are familiar with Chef okay so chef is a

00:17:14,689 --> 00:17:21,139
configuration management tool from ops

00:17:16,909 --> 00:17:24,709
code and knife is among other things one

00:17:21,139 --> 00:17:27,079
of their provisioning tools so let me

00:17:24,709 --> 00:17:30,470
walk you through this this is the name

00:17:27,079 --> 00:17:33,470
of this is Hadoop cluster a and you've

00:17:30,470 --> 00:17:36,490
got a real short description which says

00:17:33,470 --> 00:17:39,250
it's a small Hadoop cluster

00:17:36,490 --> 00:17:41,230
so we've got this section called servers

00:17:39,250 --> 00:17:44,710
and you've got three different types of

00:17:41,230 --> 00:17:50,350
servers to find the first type is

00:17:44,710 --> 00:17:52,210
zookeeper nodes and so you can you'll

00:17:50,350 --> 00:17:55,840
see that we're defining three different

00:17:52,210 --> 00:18:00,550
zookeeper nodes the disk image is a rail

00:17:55,840 --> 00:18:05,320
56 image we're opening up port 21 81

00:18:00,550 --> 00:18:07,720
from a from a cpu and ram perspective

00:18:05,320 --> 00:18:11,470
we're using a service offering called

00:18:07,720 --> 00:18:15,730
small which is just an arbitrary service

00:18:11,470 --> 00:18:17,140
offering I think for from the

00:18:15,730 --> 00:18:20,710
environment that this came out of this

00:18:17,140 --> 00:18:24,850
was a 500 megahertz worth of CPU and 512

00:18:20,710 --> 00:18:26,290
of ram so then we we have a Hadoop

00:18:24,850 --> 00:18:30,130
master there's only a single one of

00:18:26,290 --> 00:18:34,300
these and we're opening up some

00:18:30,130 --> 00:18:36,520
different ports and also where you'll

00:18:34,300 --> 00:18:39,220
notice that we're specifying what

00:18:36,520 --> 00:18:40,840
networks so this is on both the

00:18:39,220 --> 00:18:44,890
application network in the storage

00:18:40,840 --> 00:18:47,440
network and you'll if you're familiar

00:18:44,890 --> 00:18:50,020
with Chef so you've got this run list

00:18:47,440 --> 00:18:54,010
that saying hey this is in cluster a

00:18:50,020 --> 00:18:57,610
this is a Hadoop master and an H bass

00:18:54,010 --> 00:19:02,140
master and a different set of different

00:18:57,610 --> 00:19:04,600
set of run list for the zookeeper nodes

00:19:02,140 --> 00:19:08,890
and then we have the Hadoop worker nodes

00:19:04,600 --> 00:19:12,670
and again there are three of them and a

00:19:08,890 --> 00:19:17,470
different set of CPU and RAM different

00:19:12,670 --> 00:19:20,770
firewall rules and so this is all

00:19:17,470 --> 00:19:24,640
referred to as Hadoop cluster a which

00:19:20,770 --> 00:19:26,740
means that when a developer wants to to

00:19:24,640 --> 00:19:29,679
deploy this they don't have to know

00:19:26,740 --> 00:19:31,390
anything about what firewall rules need

00:19:29,679 --> 00:19:33,280
to be opened they don't need to know

00:19:31,390 --> 00:19:36,160
anything about the inter relationship

00:19:33,280 --> 00:19:40,150
because chef is handling all of this

00:19:36,160 --> 00:19:43,690
when not provisions it so instead when

00:19:40,150 --> 00:19:47,140
they want this deployed this is a single

00:19:43,690 --> 00:19:49,190
command knife CS stack create and then

00:19:47,140 --> 00:19:54,290
referring to the name of the

00:19:49,190 --> 00:19:56,930
this application stack so think about

00:19:54,290 --> 00:20:01,820
the difference between handing one of

00:19:56,930 --> 00:20:04,610
your developers seven blank centos

00:20:01,820 --> 00:20:07,490
virtual machines versus handing them a

00:20:04,610 --> 00:20:11,720
running Hadoop cluster with a single

00:20:07,490 --> 00:20:17,450
command so you can also do something

00:20:11,720 --> 00:20:19,670
very similar with with puppet and puppet

00:20:17,450 --> 00:20:21,350
has a number of resources to manage

00:20:19,670 --> 00:20:26,090
different infrastructures of service

00:20:21,350 --> 00:20:29,750
cloud as as types and providers so just

00:20:26,090 --> 00:20:32,480
like you can say install httpd and

00:20:29,750 --> 00:20:34,730
puppet you can also say provision of

00:20:32,480 --> 00:20:37,550
virtual machine have this set of

00:20:34,730 --> 00:20:40,130
firewall rules open these ports open on

00:20:37,550 --> 00:20:42,980
the machine etc and then create a stack

00:20:40,130 --> 00:20:45,820
just like this but this is already

00:20:42,980 --> 00:20:47,870
written so it was easy to copy paste as

00:20:45,820 --> 00:20:54,380
opposed to trying to rewrite that in

00:20:47,870 --> 00:20:57,620
puppet so this is actually a screenshot

00:20:54,380 --> 00:21:01,310
from a tool called cloud cap which was

00:20:57,620 --> 00:21:04,250
written by the folks at Cloudera and so

00:21:01,310 --> 00:21:07,580
they spin out obviously Hadoop and

00:21:04,250 --> 00:21:12,170
Hadoop ecosystem clusters in their test

00:21:07,580 --> 00:21:14,600
environments and so you'll see you'll

00:21:12,170 --> 00:21:16,610
see that they they're picking the disk

00:21:14,600 --> 00:21:20,570
image that that's going out there

00:21:16,610 --> 00:21:23,540
they're picking a service offering but

00:21:20,570 --> 00:21:27,830
what they're really doing is you're

00:21:23,540 --> 00:21:31,490
saying how many how many machines are

00:21:27,830 --> 00:21:33,590
you deploying and so this is the only

00:21:31,490 --> 00:21:36,890
thing that they get access to that their

00:21:33,590 --> 00:21:39,650
developers could access to to deploy to

00:21:36,890 --> 00:21:43,370
deploy that so maybe you want to provide

00:21:39,650 --> 00:21:46,310
them access to this there's also folks

00:21:43,370 --> 00:21:48,620
who are doing reservation engines you

00:21:46,310 --> 00:21:51,560
can deploy a virtual machine or multiple

00:21:48,620 --> 00:21:54,050
virtual machines but you only get it for

00:21:51,560 --> 00:21:57,770
a specific amount of time so you can

00:21:54,050 --> 00:21:59,270
pick one week one day one month and at

00:21:57,770 --> 00:22:01,870
the end of that time that virtual

00:21:59,270 --> 00:22:01,870
machine goes away

00:22:02,570 --> 00:22:09,149
so self-service it's great that you

00:22:06,869 --> 00:22:11,700
provide self-service but self-service

00:22:09,149 --> 00:22:13,649
may have a lot of different concepts and

00:22:11,700 --> 00:22:15,090
think about think about what your

00:22:13,649 --> 00:22:19,799
developers actually need when they need

00:22:15,090 --> 00:22:23,159
to provision things how many folks know

00:22:19,799 --> 00:22:26,509
what Jevons paradox is one person two

00:22:23,159 --> 00:22:28,679
people okay so Jevons paradox says

00:22:26,509 --> 00:22:32,659
essentially that when you create

00:22:28,679 --> 00:22:34,950
additional efficiencies that demand for

00:22:32,659 --> 00:22:38,190
for whatever you made more efficient

00:22:34,950 --> 00:22:41,820
will increase not not a not linearly

00:22:38,190 --> 00:22:45,779
with the efficiency but but by and large

00:22:41,820 --> 00:22:49,169
it will increase so if you have if you

00:22:45,779 --> 00:22:52,169
increase fuel efficiency people will

00:22:49,169 --> 00:22:53,759
drive more it will actually they will

00:22:52,169 --> 00:22:56,480
actually get pretty close to consuming

00:22:53,759 --> 00:22:59,330
the same amount of fuel simply because

00:22:56,480 --> 00:23:01,710
you've made it more fuel-efficient and

00:22:59,330 --> 00:23:04,950
they they're going to put the same

00:23:01,710 --> 00:23:09,239
amount of money in by and large into

00:23:04,950 --> 00:23:13,769
fuel so in in a

00:23:09,239 --> 00:23:15,989
infrastructure-as-a-service concept you

00:23:13,769 --> 00:23:17,730
may have made virtualization may have

00:23:15,989 --> 00:23:20,340
made it more efficient for you to deploy

00:23:17,730 --> 00:23:22,619
resources infrastructure-as-a-service

00:23:20,340 --> 00:23:25,409
may make it more efficient for people to

00:23:22,619 --> 00:23:27,119
employ them themselves and because they

00:23:25,409 --> 00:23:31,070
can do it so much faster and so much

00:23:27,119 --> 00:23:34,739
easier they will consume more resources

00:23:31,070 --> 00:23:37,289
so while you may be able to take you

00:23:34,739 --> 00:23:39,840
know something that said eight fifteen

00:23:37,289 --> 00:23:41,249
percent usage today and apply things

00:23:39,840 --> 00:23:43,470
like infrastructure as a service and

00:23:41,249 --> 00:23:45,659
virtualization to get much better

00:23:43,470 --> 00:23:50,700
utilization rates people will consume

00:23:45,659 --> 00:23:52,950
far more simply because they can the

00:23:50,700 --> 00:23:55,529
problem comes in that that you have tons

00:23:52,950 --> 00:24:00,960
of waste that typically creeps in

00:23:55,529 --> 00:24:02,850
because those developers don't care that

00:24:00,960 --> 00:24:05,100
they have provisioned a virtual machine

00:24:02,850 --> 00:24:08,759
that's sitting idle and has SAT idle for

00:24:05,100 --> 00:24:10,950
months it has no apparent cost to them

00:24:08,759 --> 00:24:14,240
unless you're doing chargeback or show

00:24:10,950 --> 00:24:17,360
back so

00:24:14,240 --> 00:24:18,890
because developers don't care and people

00:24:17,360 --> 00:24:21,200
in general don't care when they don't

00:24:18,890 --> 00:24:24,980
see it costs to something it's important

00:24:21,200 --> 00:24:26,990
to start measuring usage one of the one

00:24:24,980 --> 00:24:29,420
of the interesting things that I saw out

00:24:26,990 --> 00:24:32,360
of the aleph loud cap that I'll Dara

00:24:29,420 --> 00:24:34,070
wrote their biggest concern was being

00:24:32,360 --> 00:24:35,750
able to go back and look at how much CPU

00:24:34,070 --> 00:24:38,240
was actually being consumed on the

00:24:35,750 --> 00:24:41,540
machines because developers would go and

00:24:38,240 --> 00:24:45,110
spin up a hundred virtual machines to do

00:24:41,540 --> 00:24:48,950
some Hadoop testing and and they would

00:24:45,110 --> 00:24:51,380
leave that running and you know while

00:24:48,950 --> 00:24:53,720
they were on average at any one point

00:24:51,380 --> 00:24:58,880
they had in excess of a thousand virtual

00:24:53,720 --> 00:25:01,400
machines running the running a hundred

00:24:58,880 --> 00:25:04,309
additional VMs running was a ton of

00:25:01,400 --> 00:25:07,309
capacity that across their organization

00:25:04,309 --> 00:25:09,130
that was being consumed and people would

00:25:07,309 --> 00:25:11,450
just leave him running for months on end

00:25:09,130 --> 00:25:14,720
so it looked like they were always out

00:25:11,450 --> 00:25:18,770
of resources and the reality is yes they

00:25:14,720 --> 00:25:22,179
were those resources were being consumed

00:25:18,770 --> 00:25:26,179
but they weren't actually being utilized

00:25:22,179 --> 00:25:28,309
so one of the things the cloud cat does

00:25:26,179 --> 00:25:30,170
it goes and looks and tells you when's

00:25:28,309 --> 00:25:32,780
the last time there was any real cpu

00:25:30,170 --> 00:25:36,890
load on these nodes and allows you to do

00:25:32,780 --> 00:25:38,059
some reporting so CloudStack as an

00:25:36,890 --> 00:25:42,290
infrastructure as a service platform

00:25:38,059 --> 00:25:46,790
will measure things like cpu load CPU

00:25:42,290 --> 00:25:52,400
utilized and register to an account as

00:25:46,790 --> 00:25:54,950
well as being able to to set up things

00:25:52,400 --> 00:25:57,380
like a project that multiple groups are

00:25:54,950 --> 00:25:59,120
going to work on you can set up a

00:25:57,380 --> 00:26:02,210
dedicated set of resources that are

00:25:59,120 --> 00:26:05,870
accounted separately and you want to

00:26:02,210 --> 00:26:08,809
make usage of that no pun intended you

00:26:05,870 --> 00:26:11,360
want to you want to actually consume the

00:26:08,809 --> 00:26:15,230
usage reports and start showing those

00:26:11,360 --> 00:26:16,700
off and also monitoring them to start

00:26:15,230 --> 00:26:21,080
seeing where all of your resources are

00:26:16,700 --> 00:26:25,429
going so we're going to start getting

00:26:21,080 --> 00:26:27,879
into a lot more opinion here so feel

00:26:25,429 --> 00:26:33,069
free to disagree feel free to also enter

00:26:27,879 --> 00:26:37,539
with questions so for a dev test cloud I

00:26:33,069 --> 00:26:39,279
think that I think from a price and a

00:26:37,539 --> 00:26:42,039
value standpoint that you cannot do

00:26:39,279 --> 00:26:44,859
better than local storage first of all

00:26:42,039 --> 00:26:47,199
direct attached storage is cheap it's

00:26:44,859 --> 00:26:50,139
also incredibly fast compared to network

00:26:47,199 --> 00:26:54,129
storage there are some downsides right

00:26:50,139 --> 00:26:56,399
so while filed stack and the number of

00:26:54,129 --> 00:26:58,299
the underlying virtualization

00:26:56,399 --> 00:27:01,109
technologies will provide you high

00:26:58,299 --> 00:27:04,179
availability doing high availability on

00:27:01,109 --> 00:27:06,369
on local storage simply doesn't work you

00:27:04,179 --> 00:27:08,529
can't restart it on another hypervisor

00:27:06,369 --> 00:27:12,099
because it's living on on a single

00:27:08,529 --> 00:27:14,199
machine so you don't get high

00:27:12,099 --> 00:27:15,879
availability don't get that automatic

00:27:14,199 --> 00:27:17,889
failover but do you really need it in a

00:27:15,879 --> 00:27:21,219
dev test environment and I would argue

00:27:17,889 --> 00:27:25,719
that the answer is no there's also some

00:27:21,219 --> 00:27:28,869
inherent there's also some inherent in

00:27:25,719 --> 00:27:32,739
efficiency in non shared storage right

00:27:28,869 --> 00:27:34,719
so typically the constraint in a

00:27:32,739 --> 00:27:38,440
virtualization environment is memory

00:27:34,719 --> 00:27:40,359
followed by cpu because disks are

00:27:38,440 --> 00:27:43,149
gigantic it's it's easy to get a one

00:27:40,359 --> 00:27:45,899
terabyte or two terabyte SAS or SATA

00:27:43,149 --> 00:27:48,459
disk and have that stuffed into a

00:27:45,899 --> 00:27:51,999
physical machine but you're typically

00:27:48,459 --> 00:27:54,549
going to run out of of CPU or memory

00:27:51,999 --> 00:27:56,799
first so you are you typically will have

00:27:54,549 --> 00:27:58,419
some storage in efficiency but quite

00:27:56,799 --> 00:28:02,649
honestly the price points so low that it

00:27:58,419 --> 00:28:06,789
doesn't matter so and unless you're

00:28:02,649 --> 00:28:10,269
doing this at incredible scale so i

00:28:06,789 --> 00:28:12,539
think that that you from a commodity

00:28:10,269 --> 00:28:17,229
storage doing direct attached storage

00:28:12,539 --> 00:28:22,419
that's cheap and and somewhat dirty but

00:28:17,229 --> 00:28:24,249
i think i think it approaches is doing

00:28:22,419 --> 00:28:26,349
storage the best from a commodity

00:28:24,249 --> 00:28:29,169
standpoint I think cloud computing

00:28:26,349 --> 00:28:32,649
generally strives for commodity and when

00:28:29,169 --> 00:28:35,319
it you start to lose focus when you have

00:28:32,649 --> 00:28:37,959
to break out of that I think that there

00:28:35,319 --> 00:28:41,940
are very few cases where you can make an

00:28:37,959 --> 00:28:49,440
argument for doing a netapp or and Ian

00:28:41,940 --> 00:28:51,620
see so the sum of the non direct

00:28:49,440 --> 00:28:54,090
attached storage options though like

00:28:51,620 --> 00:28:58,409
using the braid offs block device out of

00:28:54,090 --> 00:29:02,330
SEF are using something like sheep dog

00:28:58,409 --> 00:29:05,399
which is a shared block device is

00:29:02,330 --> 00:29:08,460
possible because that's actually using

00:29:05,399 --> 00:29:11,820
direct attached storage on the host but

00:29:08,460 --> 00:29:15,080
making that a distributed distributed

00:29:11,820 --> 00:29:18,690
file store or a distributed block device

00:29:15,080 --> 00:29:21,000
that is possible that greatly increases

00:29:18,690 --> 00:29:24,179
your complexity though so i would not i

00:29:21,000 --> 00:29:26,669
would not personally jump on that unless

00:29:24,179 --> 00:29:29,129
you really have some demands that that

00:29:26,669 --> 00:29:35,639
require a little more efficiency of your

00:29:29,129 --> 00:29:37,909
storage so we talked about networking

00:29:35,639 --> 00:29:41,100
and the need to do commodity networking

00:29:37,909 --> 00:29:44,549
and I can't help but dive a little deep

00:29:41,100 --> 00:29:50,730
so who knows what's the what the maximum

00:29:44,549 --> 00:29:54,299
number of vlans you can use is 4096 that

00:29:50,730 --> 00:29:56,129
sounds like a large number there are a

00:29:54,299 --> 00:29:59,549
couple of other problems that you run

00:29:56,129 --> 00:30:05,549
into those so first of all switching and

00:29:59,549 --> 00:30:09,059
routing hardware you can buy you can buy

00:30:05,549 --> 00:30:13,980
routing hardware that will that will

00:30:09,059 --> 00:30:16,889
handle 4096 vlans but it's really

00:30:13,980 --> 00:30:18,600
expensive I'm talking six maybe seven

00:30:16,889 --> 00:30:23,460
digits expensive depending upon what

00:30:18,600 --> 00:30:25,799
you're doing so most enterprise-grade

00:30:23,460 --> 00:30:28,700
and by enterprise-grade I'm talking

00:30:25,799 --> 00:30:31,529
probably five digits in expense

00:30:28,700 --> 00:30:36,779
networking hardware will handle maybe a

00:30:31,529 --> 00:30:39,330
thousand VLANs so that's a constraint

00:30:36,779 --> 00:30:41,190
that you're going to have up front and

00:30:39,330 --> 00:30:43,379
even though a thousand VLAN sounds like

00:30:41,190 --> 00:30:45,450
a lot start thinking about if you have a

00:30:43,379 --> 00:30:48,419
developer who needs a multi-tiered

00:30:45,450 --> 00:30:50,460
environment you may have a single

00:30:48,419 --> 00:30:54,659
developer who's consuming three four or

00:30:50,460 --> 00:30:55,440
five vlans by himself and multiply that

00:30:54,659 --> 00:30:58,580
times the number

00:30:55,440 --> 00:31:02,909
of developers you have the next problem

00:30:58,580 --> 00:31:05,340
is the hypervisors typically depending

00:31:02,909 --> 00:31:09,210
upon which hypervisor you utilize may

00:31:05,340 --> 00:31:12,090
not be able to handle a huge number of

00:31:09,210 --> 00:31:13,860
vlans so you may be there are some

00:31:12,090 --> 00:31:18,419
hypervisors that will not handle more

00:31:13,860 --> 00:31:25,320
than 16 VLANs at a time so that may be

00:31:18,419 --> 00:31:27,720
the underlying constraint so so and

00:31:25,320 --> 00:31:29,129
maybe I'm let me jump back and say first

00:31:27,720 --> 00:31:30,779
of all you need to have something that

00:31:29,129 --> 00:31:35,129
isolates people from a network

00:31:30,779 --> 00:31:40,429
perspective you have people who are

00:31:35,129 --> 00:31:45,929
running a ostensibly identical identical

00:31:40,429 --> 00:31:48,679
loads to what's being in production you

00:31:45,929 --> 00:31:51,929
do not want someone to spin up a

00:31:48,679 --> 00:31:54,720
duplicate ERP system that then starts

00:31:51,929 --> 00:31:58,440
getting production workloads right you

00:31:54,720 --> 00:32:01,320
don't want to have your real live orders

00:31:58,440 --> 00:32:04,200
being processed by that erp system you

00:32:01,320 --> 00:32:06,720
want that very safely segregated and

00:32:04,200 --> 00:32:09,509
isolated away from the real life

00:32:06,720 --> 00:32:14,279
workloads so you do need something for

00:32:09,509 --> 00:32:17,429
isolation vlans are possibility but you

00:32:14,279 --> 00:32:20,340
need to have it needs to be very small

00:32:17,429 --> 00:32:22,259
if you're going to do that you're simply

00:32:20,340 --> 00:32:26,820
because it's a it's not scalable and

00:32:22,259 --> 00:32:31,649
it's not affordable at any at any scale

00:32:26,820 --> 00:32:35,129
so so VLANs can work on a really small

00:32:31,649 --> 00:32:37,740
scale I don't encourage them I think if

00:32:35,129 --> 00:32:40,740
you look at what Amazon saw when they

00:32:37,740 --> 00:32:43,399
started deploying a c2 they did not try

00:32:40,740 --> 00:32:46,889
and use fee lands they ended up using

00:32:43,399 --> 00:32:49,200
layer 3 isolations so let me let me see

00:32:46,889 --> 00:32:53,960
if I'm described layer 3 isolation to

00:32:49,200 --> 00:32:56,940
you so vlans our layer to isolation

00:32:53,960 --> 00:33:02,370
layer 3 isolation is essentially at the

00:32:56,940 --> 00:33:05,399
IP level so you typically when you have

00:33:02,370 --> 00:33:09,420
I wish I had a white board to draw on

00:33:05,399 --> 00:33:12,540
but in the

00:33:09,420 --> 00:33:16,050
to model right so you have you have a

00:33:12,540 --> 00:33:20,400
single router or maybe a pair of routers

00:33:16,050 --> 00:33:23,820
with hsrp or VR RP for redundancy you

00:33:20,400 --> 00:33:27,930
have a single choke point that provides

00:33:23,820 --> 00:33:30,090
that isolation all traffic has to flow

00:33:27,930 --> 00:33:32,930
through that single choke point it is

00:33:30,090 --> 00:33:37,710
both gateway and and routing interface

00:33:32,930 --> 00:33:40,350
and so you can enforce isolation there

00:33:37,710 --> 00:33:44,060
you can decide what to route between

00:33:40,350 --> 00:33:46,320
those various networks in layer 3

00:33:44,060 --> 00:33:50,280
isolation instead of doing that you're

00:33:46,320 --> 00:33:53,370
essentially setting up firewalls but

00:33:50,280 --> 00:33:54,810
each one of these hypervisors is is

00:33:53,370 --> 00:33:57,330
essentially providing a bridged

00:33:54,810 --> 00:34:00,300
interface so when you plug the cable in

00:33:57,330 --> 00:34:02,790
the the virtual machines aren't talking

00:34:00,300 --> 00:34:06,210
directly to that cable right on the

00:34:02,790 --> 00:34:10,200
hypervisor there's a bridge device and

00:34:06,210 --> 00:34:11,880
that bridge device then all traffic

00:34:10,200 --> 00:34:14,400
whether it's going to the host machine

00:34:11,880 --> 00:34:16,710
or it's going to the virtual machines

00:34:14,400 --> 00:34:18,810
are even between virtual machines on the

00:34:16,710 --> 00:34:21,960
same host has to pass through that

00:34:18,810 --> 00:34:27,120
bridge so if you do filtering at the

00:34:21,960 --> 00:34:30,480
bridge you suddenly have you have host

00:34:27,120 --> 00:34:32,910
level isolation so the hypervisor is

00:34:30,480 --> 00:34:34,610
providing the isolation for all the

00:34:32,910 --> 00:34:37,140
hosts and it's providing isolation

00:34:34,610 --> 00:34:41,660
between the virtual machines on the host

00:34:37,140 --> 00:34:45,240
as well as isolation out so you have to

00:34:41,660 --> 00:34:47,370
and it's all denied by default so you

00:34:45,240 --> 00:34:52,380
have to explicitly say what traffic you

00:34:47,370 --> 00:34:54,929
wish to permit this means that every one

00:34:52,380 --> 00:34:58,500
of your every one of your hypervisors

00:34:54,929 --> 00:35:00,000
effectively becomes an isolation point

00:34:58,500 --> 00:35:06,770
which means it's infinitely more

00:35:00,000 --> 00:35:11,010
scalable we have seen people using 50

00:35:06,770 --> 00:35:14,040
75,000 security group rules our

00:35:11,010 --> 00:35:16,650
collection of security groups in

00:35:14,040 --> 00:35:18,510
production deployments which is a

00:35:16,650 --> 00:35:20,040
tenfold increase over what you could do

00:35:18,510 --> 00:35:22,430
with fee lands with the most expensive

00:35:20,040 --> 00:35:25,490
hardware and a

00:35:22,430 --> 00:35:30,020
a and a hypervisor that would actually

00:35:25,490 --> 00:35:33,290
handle that number and so how many folks

00:35:30,020 --> 00:35:35,210
are familiar with iptables in linux so

00:35:33,290 --> 00:35:39,079
this is using something very similar

00:35:35,210 --> 00:35:43,329
this is using eb tables which is the the

00:35:39,079 --> 00:35:46,790
bridge bridge alternative to IP tables

00:35:43,329 --> 00:35:50,569
and also using that in combination with

00:35:46,790 --> 00:35:53,960
IP set which is which makes such

00:35:50,569 --> 00:36:02,690
collection of rules far more far more

00:35:53,960 --> 00:36:13,819
scalable yeah eb tables or IP set IP set

00:36:02,690 --> 00:36:16,790
IP s et yes yeah so so all the question

00:36:13,819 --> 00:36:21,319
was are all of these rules pushed out to

00:36:16,790 --> 00:36:24,349
every host and yes because you've got a

00:36:21,319 --> 00:36:27,049
couple of things battling against you

00:36:24,349 --> 00:36:28,760
first of all you may have host virtual

00:36:27,049 --> 00:36:31,760
machines that migrate from one machine

00:36:28,760 --> 00:36:36,260
to another so within an availability

00:36:31,760 --> 00:36:38,119
zone all of the nodes within the

00:36:36,260 --> 00:36:41,540
availabilities and will get a copy of

00:36:38,119 --> 00:36:44,299
all of the rules so and then they will

00:36:41,540 --> 00:36:46,670
be checked they will be checked

00:36:44,299 --> 00:36:50,000
periodically to ensure that the state of

00:36:46,670 --> 00:36:53,119
the rules is what the state the declared

00:36:50,000 --> 00:36:55,640
state says it should be so it will parse

00:36:53,119 --> 00:36:57,670
updates to those rules as they come

00:36:55,640 --> 00:36:57,670
through

00:37:00,980 --> 00:37:13,580
so in that particular environment its

00:37:04,160 --> 00:37:18,050
30,000 physical nodes and we check by

00:37:13,580 --> 00:37:24,170
default CloudStack checks once a minute

00:37:18,050 --> 00:37:27,830
to ensure state which means that it

00:37:24,170 --> 00:37:31,700
takes it takes about anywhere from six

00:37:27,830 --> 00:37:34,580
to ten seconds for it to audit that many

00:37:31,700 --> 00:37:37,550
rules and also do all of the network

00:37:34,580 --> 00:37:43,550
traffic and have the management server

00:37:37,550 --> 00:37:49,340
actually parse the response so at any

00:37:43,550 --> 00:37:51,530
given time if 5,000 5,000 or so nodes or

00:37:49,340 --> 00:37:54,770
being physical hosts are being checked

00:37:51,530 --> 00:37:56,510
in that particular environment and they

00:37:54,770 --> 00:38:02,090
actually do accomplish it once every

00:37:56,510 --> 00:38:04,130
minute I don't know that all

00:38:02,090 --> 00:38:06,619
environments would require something as

00:38:04,130 --> 00:38:10,820
aggressive as once per minute this

00:38:06,619 --> 00:38:13,130
particular environment is highly

00:38:10,820 --> 00:38:15,619
volatile they'll spend machines up and

00:38:13,130 --> 00:38:19,040
tear them down and applied a new set of

00:38:15,619 --> 00:38:20,810
security rules and they may see 15,000

00:38:19,040 --> 00:38:24,050
different machine changes in a single

00:38:20,810 --> 00:38:26,450
day so their case they actually didn't

00:38:24,050 --> 00:38:29,510
need that but not necessarily applicable

00:38:26,450 --> 00:38:35,450
to everyone but you could you could have

00:38:29,510 --> 00:38:37,970
it once a minute even if that scale the

00:38:35,450 --> 00:38:40,880
second the second step in network

00:38:37,970 --> 00:38:45,460
commoditization is getting rid of real

00:38:40,880 --> 00:38:48,920
hardware so cloudstack provides

00:38:45,460 --> 00:38:52,880
essentially a linux-based virtual

00:38:48,920 --> 00:38:58,750
network device that will provide dhcp

00:38:52,880 --> 00:39:04,250
dns load-balancing nat port forwarding

00:38:58,750 --> 00:39:07,970
and you should certainly use that as

00:39:04,250 --> 00:39:10,880
opposed to having to deploy an f5 or a

00:39:07,970 --> 00:39:12,619
real Cisco or juniper router while

00:39:10,880 --> 00:39:14,440
CloudStack can manage that physical

00:39:12,619 --> 00:39:19,550
hardware it's a waste of your money

00:39:14,440 --> 00:39:22,190
particularly for dev test cloud and even

00:39:19,550 --> 00:39:25,040
some of the mainline network vendors

00:39:22,190 --> 00:39:27,590
like cisco and juniper are realizing

00:39:25,040 --> 00:39:29,050
that there is getting it's getting to

00:39:27,590 --> 00:39:33,140
the point where there's precious little

00:39:29,050 --> 00:39:37,670
advantage for low speed networks eat EG

00:39:33,140 --> 00:39:40,700
under 10 gigabits a second to be doing

00:39:37,670 --> 00:39:43,160
that in real hardware so virtually all

00:39:40,700 --> 00:39:47,780
the network vendors now have virtual

00:39:43,160 --> 00:39:51,230
appliances and most of those are based

00:39:47,780 --> 00:39:53,480
on bsd or linux to begin with so you

00:39:51,230 --> 00:39:55,910
could follow the same path and allow

00:39:53,480 --> 00:39:57,380
cloud stacks virtual network appliance

00:39:55,910 --> 00:40:02,960
is to provide all of your networking

00:39:57,380 --> 00:40:06,970
services I think you need a commodity

00:40:02,960 --> 00:40:13,640
hypervisor and right now my choices kvm

00:40:06,970 --> 00:40:15,320
and my choice for kvm is this it's

00:40:13,640 --> 00:40:17,990
typically going to be the same operating

00:40:15,320 --> 00:40:21,680
system that you're deploying as virtual

00:40:17,990 --> 00:40:25,330
machines so if you're using a bun to are

00:40:21,680 --> 00:40:28,520
you using centos you can have that same

00:40:25,330 --> 00:40:32,750
underlying operating system providing

00:40:28,520 --> 00:40:36,500
your hypervisor to you and so it's one

00:40:32,750 --> 00:40:39,050
less different thing to manage xenserver

00:40:36,500 --> 00:40:42,580
and VMware perfectly fine hypervisors

00:40:39,050 --> 00:40:45,230
but a they're not a source although

00:40:42,580 --> 00:40:52,640
xenserver has xep available which is

00:40:45,230 --> 00:40:55,300
absorption is typically too slow to be

00:40:52,640 --> 00:41:00,410
of great use unless you really need to

00:40:55,300 --> 00:41:02,600
emulate a different architecture you

00:41:00,410 --> 00:41:08,630
should I don't see any reason for using

00:41:02,600 --> 00:41:11,120
qemu standalone on top of that most of

00:41:08,630 --> 00:41:18,260
the infrastructures of service platforms

00:41:11,120 --> 00:41:21,110
don't support raw qemu so anyway I think

00:41:18,260 --> 00:41:25,340
I think kvm is also the easiest to

00:41:21,110 --> 00:41:27,740
consume it's not necessarily the best

00:41:25,340 --> 00:41:29,869
performing hypervisor out there

00:41:27,740 --> 00:41:34,460
especially depending upon what workloads

00:41:29,869 --> 00:41:37,340
you're you're putting on it but it's the

00:41:34,460 --> 00:41:40,760
easiest to consume it's open source you

00:41:37,340 --> 00:41:47,330
can use it with bun to you are centos

00:41:40,760 --> 00:41:48,680
our rel and be the same as whatever your

00:41:47,330 --> 00:41:58,880
other linux platform that you're

00:41:48,680 --> 00:42:00,350
deploying is so I know particularly with

00:41:58,880 --> 00:42:05,090
Russ sitting back there cross with

00:42:00,350 --> 00:42:08,020
crossed arms he's angry at me for for

00:42:05,090 --> 00:42:11,090
not saying that sin is the best choice I

00:42:08,020 --> 00:42:13,820
do think that if you were absolutely

00:42:11,090 --> 00:42:16,550
trying to tweak performance you probably

00:42:13,820 --> 00:42:19,250
use in that's the reason AWS and

00:42:16,550 --> 00:42:21,619
Rackspace and go grid and and virtually

00:42:19,250 --> 00:42:24,410
every other public cloud vendor is using

00:42:21,619 --> 00:42:28,420
then is there they are trying to get the

00:42:24,410 --> 00:42:31,340
maximum performance and also provide the

00:42:28,420 --> 00:42:37,340
highest level of security and ends in

00:42:31,340 --> 00:42:39,950
does that a lot better than then kbm at

00:42:37,340 --> 00:42:43,760
the moment and vmware is just too

00:42:39,950 --> 00:42:45,560
expensive and really i mean you're

00:42:43,760 --> 00:42:47,840
trying to you're trying to put a test

00:42:45,560 --> 00:42:50,330
devcloud and provide value for the

00:42:47,840 --> 00:42:53,869
business not necessarily lime VMware's

00:42:50,330 --> 00:43:02,330
pockets even though vmware produces a

00:42:53,869 --> 00:43:07,150
quite nice hypervisor so next you need

00:43:02,330 --> 00:43:09,619
to worry about limiting resources so

00:43:07,150 --> 00:43:11,630
it's great that you allow people to go

00:43:09,619 --> 00:43:14,869
out and get things done you want to do

00:43:11,630 --> 00:43:16,880
that you want to make them efficient you

00:43:14,869 --> 00:43:20,260
also want to make sure that you are not

00:43:16,880 --> 00:43:25,130
the constraint to them getting work done

00:43:20,260 --> 00:43:27,950
so you want to be able to limit the

00:43:25,130 --> 00:43:29,420
number of VMs though so essentially what

00:43:27,950 --> 00:43:31,790
you're trying to do is to ensure that

00:43:29,420 --> 00:43:34,790
ninety-eight percent of your users of

00:43:31,790 --> 00:43:36,920
the developers that would be consuming

00:43:34,790 --> 00:43:39,369
these resources can go and get things

00:43:36,920 --> 00:43:41,480
done without ever having to ask you for

00:43:39,369 --> 00:43:45,050
those two percent who want

00:43:41,480 --> 00:43:47,119
abuse your generosity you want them to

00:43:45,050 --> 00:43:48,590
run into roadblocks so that they have to

00:43:47,119 --> 00:43:51,619
come and interact with you and and

00:43:48,590 --> 00:43:56,300
justify why they need a thousand

00:43:51,619 --> 00:43:58,850
machines playing doom are you know they

00:43:56,300 --> 00:44:01,460
want to run their own personal use net

00:43:58,850 --> 00:44:03,590
servers or bittorrent servers on your

00:44:01,460 --> 00:44:08,480
network and consumed in amounts of

00:44:03,590 --> 00:44:14,300
bandwidth so essentially you want to be

00:44:08,480 --> 00:44:16,580
able to to provide limits against how

00:44:14,300 --> 00:44:19,369
they will consume things so that would

00:44:16,580 --> 00:44:23,540
be number of virtual machines number of

00:44:19,369 --> 00:44:26,780
disk volumes amount of storage you

00:44:23,540 --> 00:44:29,960
probably want to do a broader network

00:44:26,780 --> 00:44:33,710
offering to begin with to limit to limit

00:44:29,960 --> 00:44:35,840
bandwidth you probably want to control

00:44:33,710 --> 00:44:37,130
which networks they have access to and

00:44:35,840 --> 00:44:41,060
how many networks they can actually

00:44:37,130 --> 00:44:44,210
deploy if you provide public IP

00:44:41,060 --> 00:44:50,840
addresses you certainly want to limit

00:44:44,210 --> 00:44:54,109
that at least if it's ipv4 and finally

00:44:50,840 --> 00:44:57,500
you want to also provide ways to better

00:44:54,109 --> 00:44:59,540
group resource allocation so allow

00:44:57,500 --> 00:45:02,270
people to create this concept of a

00:44:59,540 --> 00:45:05,720
project container so that you can say

00:45:02,270 --> 00:45:10,250
hey this new ERP development project is

00:45:05,720 --> 00:45:11,930
consuming 30 VMs but that's a separate

00:45:10,250 --> 00:45:13,609
project that's not that's not

00:45:11,930 --> 00:45:15,890
necessarily linked against a single

00:45:13,609 --> 00:45:22,070
development developer or development

00:45:15,890 --> 00:45:23,630
group so now we're going to stop and

00:45:22,070 --> 00:45:26,560
you're going to ask me questions which

00:45:23,630 --> 00:45:34,550
you guys have not done to any great deal

00:45:26,560 --> 00:45:39,590
yes that's a great question but let me

00:45:34,550 --> 00:45:40,910
let me spend an hour telling you so I

00:45:39,590 --> 00:45:43,030
will struggle a little bit because I

00:45:40,910 --> 00:45:46,460
have not heard this question before but

00:45:43,030 --> 00:45:47,720
yeah the question is what is the

00:45:46,460 --> 00:45:51,140
difference between OpenStack and

00:45:47,720 --> 00:45:54,740
CloudStack so from a fundamental

00:45:51,140 --> 00:45:58,100
perspective cloud sac was started in

00:45:54,740 --> 00:45:59,510
nate OpenStack started in 2010 so

00:45:58,100 --> 00:46:03,080
there's about two years of age

00:45:59,510 --> 00:46:06,320
difference OpenStack is written largely

00:46:03,080 --> 00:46:11,690
in Python CloudStack is written largely

00:46:06,320 --> 00:46:13,940
in Java OpenStack is a collection of

00:46:11,690 --> 00:46:16,070
projects so if you go and look at

00:46:13,940 --> 00:46:19,040
OpenStack they have things like Nova

00:46:16,070 --> 00:46:21,820
which is their compute project they have

00:46:19,040 --> 00:46:24,800
glance which is their disk image storage

00:46:21,820 --> 00:46:29,840
they have quantum which is their network

00:46:24,800 --> 00:46:31,910
and Sdn plug-in and essentially you

00:46:29,840 --> 00:46:34,730
decide which components you will

00:46:31,910 --> 00:46:38,119
assemble to form whatever offering

00:46:34,730 --> 00:46:40,700
you're looking to provide their scope is

00:46:38,119 --> 00:46:44,810
much broader than CloudStack so

00:46:40,700 --> 00:46:47,720
CloudStack the primary focus is on

00:46:44,810 --> 00:46:51,820
compute and we also consume storage and

00:46:47,720 --> 00:46:53,990
networking but we do not past

00:46:51,820 --> 00:46:57,380
consumption of storage networking we do

00:46:53,990 --> 00:47:00,190
not provide any storage services so

00:46:57,380 --> 00:47:03,290
while OpenStack will have things like

00:47:00,190 --> 00:47:07,220
Swift that actually provides object

00:47:03,290 --> 00:47:09,680
storage we will consume object storage

00:47:07,220 --> 00:47:13,520
so we will consume react CS or self or

00:47:09,680 --> 00:47:17,660
Swift we do not provide things so we are

00:47:13,520 --> 00:47:19,520
focused very much on compute with but of

00:47:17,660 --> 00:47:22,400
course you know compute needs to consume

00:47:19,520 --> 00:47:28,250
storage and networking so we're a little

00:47:22,400 --> 00:47:31,220
more narrowly scoped so the age

00:47:28,250 --> 00:47:33,680
difference has essentially meant that

00:47:31,220 --> 00:47:35,930
we've been deployed a little longer we

00:47:33,680 --> 00:47:38,540
had we had deployments production

00:47:35,930 --> 00:47:42,590
deployments at places like Korea telecom

00:47:38,540 --> 00:47:46,940
and Tata Communications before before

00:47:42,590 --> 00:47:49,250
OpenStack existed and that means that

00:47:46,940 --> 00:47:51,220
some of our larger deployments from a

00:47:49,250 --> 00:47:54,440
computer spective or some of the largest

00:47:51,220 --> 00:47:56,240
private clouds out there so we have one

00:47:54,440 --> 00:47:57,890
that's rapidly approaching forty

00:47:56,240 --> 00:48:03,650
thousand physical nodes under a single

00:47:57,890 --> 00:48:05,720
plane and management from a feature

00:48:03,650 --> 00:48:07,960
perspective at any given point in time

00:48:05,720 --> 00:48:11,890
the feature sets are

00:48:07,960 --> 00:48:13,330
are changing so it used to be that we

00:48:11,890 --> 00:48:16,390
would we would sit there and lay out

00:48:13,330 --> 00:48:18,190
feature comparisons for the vast

00:48:16,390 --> 00:48:20,800
majority of people I think both of them

00:48:18,190 --> 00:48:22,599
provide the ability for people to go in

00:48:20,800 --> 00:48:26,410
and in turn virtual machines on which is

00:48:22,599 --> 00:48:28,210
core that you care about there's a

00:48:26,410 --> 00:48:30,839
difference in design philosophy and I

00:48:28,210 --> 00:48:37,230
think that's one of the key differences

00:48:30,839 --> 00:48:40,359
so OpenStack is a discrete collection of

00:48:37,230 --> 00:48:43,780
projects that you can assemble and it's

00:48:40,359 --> 00:48:47,170
in many ways I liken it to choose your

00:48:43,780 --> 00:48:50,349
own adventure story because you may

00:48:47,170 --> 00:48:53,430
choose to implement Swift you may choose

00:48:50,349 --> 00:48:59,290
to use something else for object storage

00:48:53,430 --> 00:49:03,300
you may choose to use cinder for for

00:48:59,290 --> 00:49:09,250
block device or you may use Nova volumes

00:49:03,300 --> 00:49:14,680
so I think it requires a higher degree

00:49:09,250 --> 00:49:18,580
of work to customize provide a finished

00:49:14,680 --> 00:49:22,300
product CloudStack is is a little more

00:49:18,580 --> 00:49:25,690
monolithic in that you deploy CloudStack

00:49:22,300 --> 00:49:28,119
you have compute services you may be

00:49:25,690 --> 00:49:32,470
choosing what hypervisor what type of

00:49:28,119 --> 00:49:34,420
storage what type of networking but the

00:49:32,470 --> 00:49:37,480
bottom line is there's really only one

00:49:34,420 --> 00:49:39,640
path that that you go forward to provide

00:49:37,480 --> 00:49:42,310
infrastructure as a service in the cloud

00:49:39,640 --> 00:49:45,609
Stan model and that is go deploy

00:49:42,310 --> 00:49:48,970
cloudstack then configure it to use the

00:49:45,609 --> 00:49:52,500
resources that you have and and let

00:49:48,970 --> 00:49:55,089
people start consuming it so that's a

00:49:52,500 --> 00:49:58,020
quite a big difference in design

00:49:55,089 --> 00:50:00,339
philosophy I think that comes back to

00:49:58,020 --> 00:50:04,810
personally that service provider roots

00:50:00,339 --> 00:50:09,000
of OpenStack and as opposed to the

00:50:04,810 --> 00:50:13,570
product based roots of cloud snack and

00:50:09,000 --> 00:50:17,619
so essentially OpenStack originated with

00:50:13,570 --> 00:50:19,210
NASA and Rackspace and I think they

00:50:17,619 --> 00:50:21,640
wanted something incredibly flexible

00:50:19,210 --> 00:50:23,650
that they could essentially

00:50:21,640 --> 00:50:26,380
sit and dictate what service offerings

00:50:23,650 --> 00:50:28,029
they were going to have and about sex a

00:50:26,380 --> 00:50:32,170
product that you go if you want

00:50:28,029 --> 00:50:37,180
infrastructure-as-a-service and they are

00:50:32,170 --> 00:50:38,950
both both perfectly viable design

00:50:37,180 --> 00:50:41,789
philosophies but they are also very

00:50:38,950 --> 00:50:47,769
different does that answer your question

00:50:41,789 --> 00:51:07,569
okay what else do you want to ask no one

00:50:47,769 --> 00:51:09,849
has another question go for it oh sure

00:51:07,569 --> 00:51:12,700
so so CloudStack automatically is

00:51:09,849 --> 00:51:16,349
recording all of these usage details but

00:51:12,700 --> 00:51:18,700
it's dumping them in a database so

00:51:16,349 --> 00:51:21,700
you're either going to have to query the

00:51:18,700 --> 00:51:25,480
database dump the database into Excel

00:51:21,700 --> 00:51:27,490
there are probably eight different

00:51:25,480 --> 00:51:32,049
external tools that will consume that

00:51:27,490 --> 00:51:34,420
that I know of there's a blog post up if

00:51:32,049 --> 00:51:38,349
you'll search for CloudStack usage and

00:51:34,420 --> 00:51:41,529
Excel there's there's an article on just

00:51:38,349 --> 00:51:46,269
dumping it to excel one of the guys at

00:51:41,529 --> 00:51:48,730
nokia labs they don't they don't do true

00:51:46,269 --> 00:51:51,250
chargeback but they want to show who's

00:51:48,730 --> 00:51:53,619
consuming what in their environment and

00:51:51,250 --> 00:51:56,130
so they just dumped to excel they have

00:51:53,619 --> 00:51:58,599
graphs off of the Excel spreadsheet and

00:51:56,130 --> 00:52:02,769
they send that out you know every month

00:51:58,599 --> 00:52:04,660
to people who are who to the managers in

00:52:02,769 --> 00:52:06,640
the development departments and

00:52:04,660 --> 00:52:09,240
incidentally that spreadsheet is there

00:52:06,640 --> 00:52:11,769
so you can just directly plug in your

00:52:09,240 --> 00:52:15,359
the database details it'll automatically

00:52:11,769 --> 00:52:15,359
suck it down produce the reports for you

00:52:17,660 --> 00:52:35,559
oh sure so so the question is is there

00:52:25,299 --> 00:52:37,849
is there an API that you can yeah well

00:52:35,559 --> 00:52:49,010
they're nice for managers right they're

00:52:37,849 --> 00:52:51,650
not for real work so you can dump to CSV

00:52:49,010 --> 00:52:56,240
and it but the spreadsheet is actually

00:52:51,650 --> 00:53:01,280
making a database connection to my

00:52:56,240 --> 00:53:08,299
sequel so it's it's not stop pulling it

00:53:01,280 --> 00:53:10,460
down and hang on a second now I'll drop

00:53:08,299 --> 00:53:15,280
this onto the screen as soon as it loads

00:53:10,460 --> 00:53:15,280
the page yes while we're waiting

00:53:20,130 --> 00:53:24,510
today it's my sequel we don't use

00:53:22,620 --> 00:53:30,930
anything that's my sequel specific

00:53:24,510 --> 00:53:33,710
except for from a from a data standpoint

00:53:30,930 --> 00:53:38,310
we use nothing that's my sequel specific

00:53:33,710 --> 00:53:40,320
but we've never we've never written the

00:53:38,310 --> 00:53:47,340
connecting libraries to do anything but

00:53:40,320 --> 00:53:48,660
my sequel and apparently everyone is on

00:53:47,340 --> 00:53:57,380
the internet at the conference I'm

00:53:48,660 --> 00:54:05,610
conference Wi-Fi fails so at that URL

00:53:57,380 --> 00:54:11,340
which is hang on well it's cloudstack

00:54:05,610 --> 00:54:15,180
got Apache org slash Doc's / AP I go

00:54:11,340 --> 00:54:18,570
into the root admin section of that and

00:54:15,180 --> 00:54:22,890
there's a list usage that will dump that

00:54:18,570 --> 00:54:27,590
out as XML or as Jason so you can parse

00:54:22,890 --> 00:54:27,590
away with whatever tool you want yes sir

00:54:29,240 --> 00:54:36,980
so cloudstack has its own native API

00:54:33,450 --> 00:54:40,290
which gives you access to every feature

00:54:36,980 --> 00:54:45,800
that CloudStack makes available however

00:54:40,290 --> 00:54:48,540
a lot of people want want to use ec2 and

00:54:45,800 --> 00:54:53,130
so CloudStack provides a compatibility

00:54:48,540 --> 00:54:57,720
layer called cloud bridge and so if you

00:54:53,130 --> 00:55:04,490
want to use tools like photo or any of

00:54:57,720 --> 00:55:07,080
the other yuka tools you can do that

00:55:04,490 --> 00:55:09,210
have this translation layer that will

00:55:07,080 --> 00:55:12,150
essentially receive those ec2 api

00:55:09,210 --> 00:55:16,050
commands translate them to cloud stacks

00:55:12,150 --> 00:55:19,890
api pass them on so there is that

00:55:16,050 --> 00:55:22,920
there's also some talk of some

00:55:19,890 --> 00:55:26,430
development going on around GC es api as

00:55:22,920 --> 00:55:29,940
well so a lot of people think that GCE

00:55:26,430 --> 00:55:31,530
will become a dominant infrastructure as

00:55:29,940 --> 00:55:33,720
a service api and the not too distant

00:55:31,530 --> 00:55:38,690
future they're already talking

00:55:33,720 --> 00:55:41,970
reporting that so yes there's that I

00:55:38,690 --> 00:55:43,650
would almost argue though that if you're

00:55:41,970 --> 00:55:48,690
going to go to that length you should be

00:55:43,650 --> 00:55:52,230
using a tool like Jay clouds or fog or

00:55:48,690 --> 00:55:55,800
lib cloud that essentially becomes a an

00:55:52,230 --> 00:55:58,260
API broker so instead of writing to a

00:55:55,800 --> 00:55:59,970
specific API you write to that and then

00:55:58,260 --> 00:56:01,800
regardless of where you picture

00:55:59,970 --> 00:56:03,960
resources in public or private or

00:56:01,800 --> 00:56:06,390
whatever or which infrastructure is a

00:56:03,960 --> 00:56:23,460
service platform it'll take care of the

00:56:06,390 --> 00:56:26,220
translation there yes so so it's just

00:56:23,460 --> 00:56:29,930
providing you the the underlying

00:56:26,220 --> 00:56:32,940
infrastructure right so it doesn't care

00:56:29,930 --> 00:56:35,150
there is a big difference in running

00:56:32,940 --> 00:56:37,530
production in a cloud environment

00:56:35,150 --> 00:56:41,820
because you have to worry about the type

00:56:37,530 --> 00:56:45,690
of workloads so I see a lot of people

00:56:41,820 --> 00:56:49,650
who are designing their cloud age apps

00:56:45,690 --> 00:56:51,390
to deal with failure which means that

00:56:49,650 --> 00:56:53,400
they can tolerate things like having

00:56:51,390 --> 00:56:55,740
only local disk and if a machine dies

00:56:53,400 --> 00:56:57,839
it's no big deal you can't do that

00:56:55,740 --> 00:57:01,460
typically with your ERP system you cared

00:56:57,839 --> 00:57:04,230
that that ERP system goes down and so a

00:57:01,460 --> 00:57:07,380
cloud deployment of your ERP system

00:57:04,230 --> 00:57:11,130
might involve an EMC or a net apps and

00:57:07,380 --> 00:57:13,589
it might involve more traditional

00:57:11,130 --> 00:57:16,920
networking with real physical devices

00:57:13,589 --> 00:57:18,060
that have fell over so it looks very

00:57:16,920 --> 00:57:19,859
different if you're going to do

00:57:18,060 --> 00:57:22,619
something for production particularly if

00:57:19,859 --> 00:57:26,190
it's in your revenue stream or if you've

00:57:22,619 --> 00:57:28,020
got compliance issues around it you're

00:57:26,190 --> 00:57:30,390
also probably going to be using some of

00:57:28,020 --> 00:57:32,160
the higher-end hypervisors you're going

00:57:30,390 --> 00:57:37,650
to want some of the features that

00:57:32,160 --> 00:57:41,430
xenserver or vmware provides you and you

00:57:37,650 --> 00:57:46,320
know things like storage vmotion or our

00:57:41,430 --> 00:57:46,680
DRS that simply don't exist in kvm at

00:57:46,320 --> 00:57:49,410
the mall

00:57:46,680 --> 00:57:50,490
so it looks very different but if you're

00:57:49,410 --> 00:57:52,170
just talking about a dev test

00:57:50,490 --> 00:57:54,630
environment it's just a virtual machine

00:57:52,170 --> 00:57:56,130
that your developer has no idea what the

00:57:54,630 --> 00:58:00,210
underlying infrastructure is anyway so

00:57:56,130 --> 00:58:03,480
and probably doesn't care so you know if

00:58:00,210 --> 00:58:07,760
it if it blows up the impact is to that

00:58:03,480 --> 00:58:07,760
single developer for a few hours at most

00:58:15,020 --> 00:58:22,620
your developers doing it wrong there's

00:58:19,320 --> 00:58:24,780
this thing that there's this thing

00:58:22,620 --> 00:58:27,390
called revision control that people

00:58:24,780 --> 00:58:32,240
should be using I know they don't teach

00:58:27,390 --> 00:58:37,260
that in college but no really they don't

00:58:32,240 --> 00:58:41,070
so so I went three years ago I was

00:58:37,260 --> 00:58:43,290
involved in in a program called teaching

00:58:41,070 --> 00:58:45,990
open source that red hat was heavily

00:58:43,290 --> 00:58:48,960
involved in sponsoring at the time and I

00:58:45,990 --> 00:58:51,060
talked to all of the schools with a

00:58:48,960 --> 00:58:54,000
decent CS program in the state of South

00:58:51,060 --> 00:59:00,170
Carolina not a single one at the time

00:58:54,000 --> 00:59:03,420
taught svn get even CBS you could get a

00:59:00,170 --> 00:59:07,380
BS and Comp Sci and never learn about

00:59:03,420 --> 00:59:08,850
version control which is horrendous I

00:59:07,380 --> 00:59:12,390
think a lot of them have started

00:59:08,850 --> 00:59:14,310
changing their ways but really these

00:59:12,390 --> 00:59:20,070
should be thought of as ephemeral

00:59:14,310 --> 00:59:22,020
instances and I know a lot of places i

00:59:20,070 --> 00:59:24,510
talked about reservation engine they do

00:59:22,020 --> 00:59:26,400
that explicitly so that developers are

00:59:24,510 --> 00:59:29,520
actually making sure their code makes it

00:59:26,400 --> 00:59:32,210
back into revision control and enforcing

00:59:29,520 --> 00:59:36,150
the ephemeral nature of those instances

00:59:32,210 --> 00:59:37,800
because it's if it lives in a

00:59:36,150 --> 00:59:39,390
development vm and doesn't actually make

00:59:37,800 --> 00:59:44,040
it into production all of that works

00:59:39,390 --> 00:59:45,480
wasted sir there are a lot of there are

00:59:44,040 --> 00:59:49,350
a lot of places now that are actually

00:59:45,480 --> 00:59:52,260
spinning up they use Jenkins there's a

00:59:49,350 --> 00:59:53,640
Jay clouds plug-in from Jenkins that

00:59:52,260 --> 00:59:55,500
will allow you to specify any

00:59:53,640 --> 00:59:58,950
infrastructure as a service platform and

00:59:55,500 --> 01:00:00,210
spin up essentially a stateless node to

00:59:58,950 --> 01:00:02,760
do run all of your tests

01:00:00,210 --> 01:00:04,650
on they destroy the instance and the

01:00:02,760 --> 01:00:06,510
next time the test runs it's a

01:00:04,650 --> 01:00:09,000
completely blank slate it spins up a new

01:00:06,510 --> 01:00:11,420
image to flow is your software etc and

01:00:09,000 --> 01:00:19,099
I've got one minute so I will shut up I

01:00:11,420 --> 01:00:19,099
will leave you with maybe one last thing

01:00:23,330 --> 01:00:30,599
if you want to look more in and sadly I

01:00:27,359 --> 01:00:33,510
didn't talk about I didn't talk that

01:00:30,599 --> 01:00:34,859
much about CloudStack itself but if you

01:00:33,510 --> 01:00:38,030
want to learn more about CloudStack

01:00:34,859 --> 01:00:40,290
cloudstack apache org if you need help

01:00:38,030 --> 01:00:44,130
feel free to join us on the mailing list

01:00:40,290 --> 01:00:48,089
or in the IRC channel there's a new book

01:00:44,130 --> 01:00:50,640
that from packet publishing on Apache

01:00:48,089 --> 01:00:54,990
CloudStack and of course the project has

01:00:50,640 --> 01:00:57,140
tons of documentation the book I'm about

01:00:54,990 --> 01:01:00,480
fifty percent through it right now and

01:00:57,140 --> 01:01:02,940
it's got a couple of inaccuracies but

01:01:00,480 --> 01:01:05,220
it's in general it's a it's a good

01:01:02,940 --> 01:01:09,390
foundation for for deploying cloud

01:01:05,220 --> 01:01:11,280
snacks and I'm also here today and

01:01:09,390 --> 01:01:12,990
tomorrow so if you have questions or

01:01:11,280 --> 01:01:15,330
want to talk about cloud computing or

01:01:12,990 --> 01:01:18,839
CloudStack or the demise of most

01:01:15,330 --> 01:01:23,119
assignments jobs I'm happy too happy to

01:01:18,839 --> 01:01:23,119
talk to you about that thanks

01:01:30,190 --> 01:01:36,670
how's that sigh every way this is the

01:01:33,370 --> 01:01:38,830
way to better utilize all your resources

01:01:36,670 --> 01:01:42,280
and it makes managing all your resources

01:01:38,830 --> 01:01:46,110
pretty easy all of the innovation is

01:01:42,280 --> 01:01:49,600
happening in open source the

01:01:46,110 --> 01:01:51,430
collaborative nature and of the you know

01:01:49,600 --> 01:01:53,350
of the community and the speed at which

01:01:51,430 --> 01:01:55,540
these are these you know these

01:01:53,350 --> 01:01:57,850
deficiencies these bugs are getting

01:01:55,540 --> 01:02:00,430
discovered and then fixed is it like

01:01:57,850 --> 01:02:03,160
that really shows the power of the you

01:02:00,430 --> 01:02:04,780
know of the open source community it is

01:02:03,160 --> 01:02:08,980
global and it's definitely because of

01:02:04,780 --> 01:02:15,310
the users community people are extremely

01:02:08,980 --> 01:02:17,230
friendly and always ready to help if you

01:02:15,310 --> 01:02:19,510
go on tire see any day you'll see these

01:02:17,230 --> 01:02:21,240
guys helping each other out and they're

01:02:19,510 --> 01:02:23,920
all doing it like in a selfless manner

01:02:21,240 --> 01:02:26,910
the product is transparent for everyone

01:02:23,920 --> 01:02:30,130
everyone can look at the code base

01:02:26,910 --> 01:02:32,340
everyone can see how close that is being

01:02:30,130 --> 01:02:37,840
built nothing nothing is proprietary

01:02:32,340 --> 01:02:40,450
everything is open in many ways it's

01:02:37,840 --> 01:02:44,920
absolutely vital to the the unborn

01:02:40,450 --> 01:02:49,150
health cloudstack the most exciting

01:02:44,920 --> 01:02:51,970
event in recent memory for me was our

01:02:49,150 --> 01:02:54,609
first developer boot camp

01:02:51,970 --> 01:02:57,250
and our call gave people a gave me two

01:02:54,609 --> 01:03:01,210
weeks notice to come attend I was

01:02:57,250 --> 01:03:05,470
expecting 25 or 30 people so we ended up

01:03:01,210 --> 01:03:08,230
with 87 people and had to go get board

01:03:05,470 --> 01:03:10,750
chairs in the room twice everything

01:03:08,230 --> 01:03:14,020
within cloud computing is commodity and

01:03:10,750 --> 01:03:17,080
is open source and so I don't think that

01:03:14,020 --> 01:03:18,849
you will you'll see anywhere where open

01:03:17,080 --> 01:03:21,880
source is not pervasive in cloud

01:03:18,849 --> 01:03:24,430
computing and so i think it's i think

01:03:21,880 --> 01:03:25,930
it's an assumption i think when you talk

01:03:24,430 --> 01:03:29,670
about cloud computing you're really

01:03:25,930 --> 01:03:29,670
talking about a source cloud computing

01:03:29,940 --> 01:03:36,010
cloud sac is a robust solution for large

01:03:33,220 --> 01:03:38,380
deployments you'll have dozens of data

01:03:36,010 --> 01:03:42,400
centers and thousands of servers in each

01:03:38,380 --> 01:03:45,670
data centers these hardware is going to

01:03:42,400 --> 01:03:48,880
fail and CloudStack is designed to

01:03:45,670 --> 01:03:51,369
handle number one that mass scale number

01:03:48,880 --> 01:03:54,099
two it's designed to handle the failure

01:03:51,369 --> 01:03:56,650
that inevitably happens in large

01:03:54,099 --> 01:04:01,150
deployments we started working on cloud

01:03:56,650 --> 01:04:04,450
tech over four years ago and it was the

01:04:01,150 --> 01:04:06,190
original set of people working on it had

01:04:04,450 --> 01:04:10,300
a background of delivering software

01:04:06,190 --> 01:04:14,530
telcos and service providers lots of QA

01:04:10,300 --> 01:04:18,160
lots of users actually using it high

01:04:14,530 --> 01:04:21,250
availability is the key feature multiple

01:04:18,160 --> 01:04:23,260
hypervisors support different network

01:04:21,250 --> 01:04:25,930
models you can pick up whatever suits

01:04:23,260 --> 01:04:28,210
you better while step management server

01:04:25,930 --> 01:04:31,900
can be deployed in different physical

01:04:28,210 --> 01:04:33,550
machines it definitely has a huge

01:04:31,900 --> 01:04:38,530
footprint it's being deployed everywhere

01:04:33,550 --> 01:04:41,109
there's a major movie studio that they

01:04:38,530 --> 01:04:44,320
were using cloudstack they were using it

01:04:41,109 --> 01:04:46,390
to transcode video and i thought that

01:04:44,320 --> 01:04:48,040
was terribly fascinating what i found

01:04:46,390 --> 01:04:51,310
more fascinating is what they did during

01:04:48,040 --> 01:04:54,099
lunch where they would spin up you know

01:04:51,310 --> 01:04:55,450
50 or 60 game servers then as soon as

01:04:54,099 --> 01:04:57,000
lunch was over they would destroy all

01:04:55,450 --> 01:05:00,020
the instances and good

01:04:57,000 --> 01:05:02,430
doing a little work CloudStack is vast

01:05:00,020 --> 01:05:03,960
it touches so many different aspects and

01:05:02,430 --> 01:05:06,180
there's no one person that's kind of

01:05:03,960 --> 01:05:09,660
like a master of all those realms I

01:05:06,180 --> 01:05:12,330
think clouds stack as a project is going

01:05:09,660 --> 01:05:16,160
to be one of the leaders simply because

01:05:12,330 --> 01:05:22,770
it's some of the most feature fallen and

01:05:16,160 --> 01:05:26,030
and robust platforms out they were Adam

01:05:22,770 --> 01:05:26,030
senior living through the clouds dag

01:05:38,860 --> 01:05:40,920
you

01:05:44,220 --> 01:05:49,299
when we created asterisk over a decade

01:05:46,960 --> 01:05:51,250
ago we could not have imagined that

01:05:49,299 --> 01:05:53,470
asterisk would not only become the most

01:05:51,250 --> 01:05:55,599
widely adopted open source communication

01:05:53,470 --> 01:05:57,640
software on the planet but that it would

01:05:55,599 --> 01:06:00,160
impact the entire industry in the way

01:05:57,640 --> 01:06:02,140
that it has today asterisk has found its

01:06:00,160 --> 01:06:04,779
way in the more than 170 countries and

01:06:02,140 --> 01:06:06,730
virtually every fortune 1000 company the

01:06:04,779 --> 01:06:08,829
success of asterisk has enabled a

01:06:06,730 --> 01:06:10,210
transition of power from the hands of

01:06:08,829 --> 01:06:12,490
the traditional proprietary phone

01:06:10,210 --> 01:06:14,890
vendors into the hands of the users and

01:06:12,490 --> 01:06:16,839
administrators of phone systems using

01:06:14,890 --> 01:06:18,069
this power our customers have created

01:06:16,839 --> 01:06:19,990
all sorts of business changing

01:06:18,069 --> 01:06:21,849
applications from small office phone

01:06:19,990 --> 01:06:24,369
systems to mission-critical call centers

01:06:21,849 --> 01:06:25,960
the international carrier networks in

01:06:24,369 --> 01:06:27,760
fact there's even an entire country

01:06:25,960 --> 01:06:30,339
those communications infrastructure runs

01:06:27,760 --> 01:06:32,289
on esters the gym has always been about

01:06:30,339 --> 01:06:34,000
creating technology that expands

01:06:32,289 --> 01:06:36,160
communications capabilities in ways that

01:06:34,000 --> 01:06:37,359
we could never have imagined and that's

01:06:36,160 --> 01:06:39,760
part of what's game-changing about

01:06:37,359 --> 01:06:42,460
Digium today we're doing it again this

01:06:39,760 --> 01:06:44,529
time by introducing a new family of HD

01:06:42,460 --> 01:06:46,660
IP phones that extends control of the

01:06:44,529 --> 01:06:48,400
user all the way to the desktop the

01:06:46,660 --> 01:06:50,140
launch of these new products represents

01:06:48,400 --> 01:06:52,119
the next phase indigenous history of

01:06:50,140 --> 01:06:54,640
innovation these are the first and only

01:06:52,119 --> 01:06:56,319
IP phones designed to fully leverage the

01:06:54,640 --> 01:06:57,880
power of esters when we first discussed

01:06:56,319 --> 01:06:59,920
our expectations for building a family

01:06:57,880 --> 01:07:02,079
of phones for use with asterisk our

01:06:59,920 --> 01:07:03,819
requirements were pretty simple we asked

01:07:02,079 --> 01:07:05,440
the team to build the phones such that

01:07:03,819 --> 01:07:07,660
they were easy to install integrate

01:07:05,440 --> 01:07:09,490
provision and use I think you'll soon

01:07:07,660 --> 01:07:12,069
agree our engineers have delivered on

01:07:09,490 --> 01:07:13,690
that goal user feedback is validating

01:07:12,069 --> 01:07:15,789
that when it comes to operation with

01:07:13,690 --> 01:07:18,220
astro space systems including our own

01:07:15,789 --> 01:07:20,799
Switchvox based product these are the

01:07:18,220 --> 01:07:22,119
easiest to use best integrated most

01:07:20,799 --> 01:07:24,700
interoperable products on the market

01:07:22,119 --> 01:07:26,670
today the Digium family phones will

01:07:24,700 --> 01:07:28,779
initially include three IP des hommes

01:07:26,670 --> 01:07:30,670
uniquely designed to complement any

01:07:28,779 --> 01:07:32,559
asterisk or switch box based solution

01:07:30,670 --> 01:07:35,230
these phones are different for a number

01:07:32,559 --> 01:07:37,869
of reasons first there is clue sively

01:07:35,230 --> 01:07:39,309
designed for use with esters secondly

01:07:37,869 --> 01:07:40,920
we've made it really easy to

01:07:39,309 --> 01:07:43,299
autodiscover and provision the phones

01:07:40,920 --> 01:07:45,400
next we've made it easy for the phones

01:07:43,299 --> 01:07:46,960
to access information inside of asterisk

01:07:45,400 --> 01:07:48,960
allowing tight coupling

01:07:46,960 --> 01:07:50,920
between an application and the phone

01:07:48,960 --> 01:07:53,080
additionally we've created an

01:07:50,920 --> 01:07:55,210
applications engine that allows users

01:07:53,080 --> 01:07:57,790
and developers to create and run their

01:07:55,210 --> 01:07:59,859
own apps on the following and finally

01:07:57,790 --> 01:08:01,930
we've done all of this at a very

01:07:59,859 --> 01:08:03,609
compelling price point at Digium we're

01:08:01,930 --> 01:08:05,380
always thinking of ways to give our

01:08:03,609 --> 01:08:07,780
customers the best value in business

01:08:05,380 --> 01:08:09,640
phone systems and also give them the

01:08:07,780 --> 01:08:11,800
power to create their own solutions or

01:08:09,640 --> 01:08:13,690
any communications challenge well

01:08:11,800 --> 01:08:15,339
continue to push the boundaries not only

01:08:13,690 --> 01:08:17,410
to make Astra's cooler faster and more

01:08:15,339 --> 01:08:19,029
technologically feature-rich but to make

01:08:17,410 --> 01:08:21,520
asterisk and what communications even

01:08:19,029 --> 01:08:24,630
easier and together we'll change the way

01:08:21,520 --> 01:08:24,630
the world communication again

01:08:32,509 --> 01:08:36,779
your customers rely on your website or

01:08:35,279 --> 01:08:39,179
application if it's slower

01:08:36,779 --> 01:08:42,119
non-responsive it infuriates your users

01:08:39,179 --> 01:08:43,920
and costs you money keeping your

01:08:42,119 --> 01:08:47,450
business critical systems humming along

01:08:43,920 --> 01:08:49,760
requires insight into what they're doing

01:08:47,450 --> 01:08:51,710
your system metrics tells stories

01:08:49,760 --> 01:08:53,720
stories that can reveal performance

01:08:51,710 --> 01:08:56,060
bottlenecks resource limitations and

01:08:53,720 --> 01:08:57,620
other problems but how do you keep an

01:08:56,060 --> 01:09:00,260
eye on all of your systems performance

01:08:57,620 --> 01:09:03,290
metrics in real-time and record this

01:09:00,260 --> 01:09:05,270
data for later analysis enter longview

01:09:03,290 --> 01:09:07,070
the new way to see what's really going

01:09:05,270 --> 01:09:09,230
on under the hood the long view

01:09:07,070 --> 01:09:11,300
dashboard lets you visualize the status

01:09:09,230 --> 01:09:13,760
of all your systems providing you with a

01:09:11,300 --> 01:09:17,120
bird's-eye view of your entire fleet you

01:09:13,760 --> 01:09:19,700
can sort by cpu memory swap processes

01:09:17,120 --> 01:09:21,470
load and network usage click a specific

01:09:19,700 --> 01:09:23,870
system to access its individual

01:09:21,470 --> 01:09:26,380
dashboard then click and drag to zoom in

01:09:23,870 --> 01:09:28,790
on chokepoints and get more detail

01:09:26,380 --> 01:09:30,440
comprehensive network data including

01:09:28,790 --> 01:09:32,750
inbound and outbound traffic is

01:09:30,440 --> 01:09:34,340
available on the network tab and disk

01:09:32,750 --> 01:09:36,260
rights and free space on the disk

01:09:34,340 --> 01:09:39,080
stabbed while the process Explorer

01:09:36,260 --> 01:09:41,630
displays usage statistics for individual

01:09:39,080 --> 01:09:43,790
processes the system info tab shows

01:09:41,630 --> 01:09:46,040
listening services active connections

01:09:43,790 --> 01:09:48,170
and available updates adding long view

01:09:46,040 --> 01:09:49,880
to a system is easy just click the

01:09:48,170 --> 01:09:52,010
button copy the one line installation

01:09:49,880 --> 01:09:54,470
command then run the command on your

01:09:52,010 --> 01:09:56,150
linux system to complete the process the

01:09:54,470 --> 01:09:58,340
agent will begin collecting data and

01:09:56,150 --> 01:10:00,170
sending it to longview then the graph

01:09:58,340 --> 01:10:02,750
start rolling

01:10:00,170 --> 01:10:05,120
use longview to gain visibility into

01:10:02,750 --> 01:10:08,860
your servers so when your website or app

01:10:05,120 --> 01:10:08,860
heats up it stays up

01:10:49,930 --> 01:10:54,940
most enterprises today realize that

01:10:52,660 --> 01:10:56,590
usernames and passwords alone aren't

01:10:54,940 --> 01:10:58,960
enough to keep their networks saved from

01:10:56,590 --> 01:11:01,030
unauthorized intrusions that's my

01:10:58,960 --> 01:11:03,070
two-factor authentication has gotten so

01:11:01,030 --> 01:11:05,200
popular lately that adds that extra

01:11:03,070 --> 01:11:07,870
layer of protection enterprise networks

01:11:05,200 --> 01:11:09,640
need to stay safe but what you may not

01:11:07,870 --> 01:11:11,830
know is that some two-factor

01:11:09,640 --> 01:11:14,050
authentication solutions they're better

01:11:11,830 --> 01:11:17,080
than others like two-factor strong

01:11:14,050 --> 01:11:19,360
authentication with wicked wicked goes

01:11:17,080 --> 01:11:21,310
beyond other authentication systems by

01:11:19,360 --> 01:11:24,280
being less expensive easier to implement

01:11:21,310 --> 01:11:26,590
and easier to use giving you software

01:11:24,280 --> 01:11:29,710
based token clients built to run on all

01:11:26,590 --> 01:11:32,310
major devices and OSS including iOS and

01:11:29,710 --> 01:11:34,660
Android these tokens utilize a

01:11:32,310 --> 01:11:37,060
public/private key combination that's

01:11:34,660 --> 01:11:39,010
generated on device so there aren't any

01:11:37,060 --> 01:11:41,530
shared secrets flying around for

01:11:39,010 --> 01:11:44,380
attackers to hijack or which require any

01:11:41,530 --> 01:11:46,240
special handling instead all keys are

01:11:44,380 --> 01:11:48,730
kept secure and private between the

01:11:46,240 --> 01:11:50,890
requesting token and your server which

01:11:48,730 --> 01:11:52,530
you control aim house making it the most

01:11:50,890 --> 01:11:55,210
secure way possible to perform

01:11:52,530 --> 01:11:58,000
authentication encryption and with an

01:11:55,210 --> 01:12:00,790
extensive flexible API and support for

01:11:58,000 --> 01:12:02,770
protocols like LDAP and radius wicket

01:12:00,790 --> 01:12:04,120
works with any enterprise network

01:12:02,770 --> 01:12:06,660
architecture

01:12:04,120 --> 01:12:09,240
the IT systems vital to your enterprise

01:12:06,660 --> 01:12:11,260
download your wicked free trial today

01:12:09,240 --> 01:12:13,030
regardless of whether you're considering

01:12:11,260 --> 01:12:14,830
two-factor authentication for the first

01:12:13,030 --> 01:12:18,070
time or just ready to ditch your

01:12:14,830 --> 01:12:20,470
existing expensive key file system we

01:12:18,070 --> 01:12:25,380
can help with easy to implement easy to

01:12:20,470 --> 01:12:25,380

YouTube URL: https://www.youtube.com/watch?v=Ct8BMxkA9b0


