Title: 2013 SouthEast LinuxFest - BSidesCLT - Doug Burks - Security Onion
Publication date: 2014-07-09
Playlist: 2013 SouthEast LinuxFest
Description: 
	2013 SouthEast LinuxFest
BSidesCLT 

Doug Burks - Security Onion - Peeling Back the Layers of Your Network in Minutes
Captions: 
	00:00:00,000 --> 00:00:05,160
the following presentation was recorded

00:00:02,639 --> 00:00:08,280
at the 2013 southeast linux fest in

00:00:05,160 --> 00:00:10,860
charlotte north carolina it is licensed

00:00:08,280 --> 00:00:12,509
under a creative commons license for

00:00:10,860 --> 00:00:16,619
more information about the southeast

00:00:12,509 --> 00:00:19,830
linux fest visit WWF eastland TX phase

00:00:16,619 --> 00:00:21,630
or the southeast linux fest would like

00:00:19,830 --> 00:00:24,000
to thank the following diamond sponsors

00:00:21,630 --> 00:00:27,300
in 2013 for helping make these videos

00:00:24,000 --> 00:00:29,849
possible alright well hello everybody

00:00:27,300 --> 00:00:33,780
I'm Doug Burks I'm very excited to be

00:00:29,849 --> 00:00:36,630
here Charlotte is kind of a second home

00:00:33,780 --> 00:00:37,800
for me my my in-laws live here so I'm up

00:00:36,630 --> 00:00:40,969
here every couple of months visiting

00:00:37,800 --> 00:00:44,070
them I love the city it's a great city

00:00:40,969 --> 00:00:48,329
let's see it's my computer going to work

00:00:44,070 --> 00:00:50,070
there we go so here's me I'm a Christian

00:00:48,329 --> 00:00:54,539
I'm a husband I'm a father and in my

00:00:50,070 --> 00:00:56,760
spare time I'm a security guy so I miss

00:00:54,539 --> 00:01:00,149
Anne's gse there's about 70 of us in the

00:00:56,760 --> 00:01:02,100
world I also teach some classes for

00:01:00,149 --> 00:01:04,019
sands so I teach intrusion detection and

00:01:02,100 --> 00:01:05,729
some other things I work for a little

00:01:04,019 --> 00:01:06,990
security company called mandiant you may

00:01:05,729 --> 00:01:09,200
have heard of us we released a slow

00:01:06,990 --> 00:01:12,270
report on the Chinese back in February

00:01:09,200 --> 00:01:14,100
so we made some waves with that and oh

00:01:12,270 --> 00:01:16,259
by the way we're hiring so if you're

00:01:14,100 --> 00:01:18,689
interested in doing really cool security

00:01:16,259 --> 00:01:21,390
work come and talk to me after my talk

00:01:18,689 --> 00:01:23,220
and we can talk about our positions that

00:01:21,390 --> 00:01:25,500
we're hiring for we have all kinds of

00:01:23,220 --> 00:01:28,110
cool stuff from reverse engineering to

00:01:25,500 --> 00:01:31,380
intervene Texan to basically anything

00:01:28,110 --> 00:01:34,470
you want to do in the security realm if

00:01:31,380 --> 00:01:36,750
you're on Twitter I am Doug Burks and i

00:01:34,470 --> 00:01:38,430
also have security onion there if you

00:01:36,750 --> 00:01:39,750
like to live tweet this event which my

00:01:38,430 --> 00:01:42,570
good friend Lawrence is going to be live

00:01:39,750 --> 00:01:47,340
tweeting you can use hashtag security

00:01:42,570 --> 00:01:49,710
onion so that's me so let me ask you

00:01:47,340 --> 00:01:53,700
guys so who here is responsible for

00:01:49,710 --> 00:01:55,890
defending a network probably about half

00:01:53,700 --> 00:01:57,829
of you okay so for those of you who

00:01:55,890 --> 00:02:00,149
didn't raise your hand do you have

00:01:57,829 --> 00:02:02,040
possibly an internet connection at home

00:02:00,149 --> 00:02:04,140
that you'd like to get some more

00:02:02,040 --> 00:02:07,079
visibility into you'd like to see what's

00:02:04,140 --> 00:02:08,819
going on yeah maybe a few of you so

00:02:07,079 --> 00:02:10,920
maybe we can help you with that so what

00:02:08,819 --> 00:02:13,590
is security on you security onion is a

00:02:10,920 --> 00:02:15,390
free linux distro

00:02:13,590 --> 00:02:17,670
for intrusion detection and network

00:02:15,390 --> 00:02:21,480
security monitoring it's based on a boon

00:02:17,670 --> 00:02:24,300
to we've got snorts ricotta bro squeal

00:02:21,480 --> 00:02:26,970
Elsa all these cool security tools that

00:02:24,300 --> 00:02:30,870
you need to have visibility into your

00:02:26,970 --> 00:02:33,180
network so the history of security on

00:02:30,870 --> 00:02:37,620
unit started back in two thousand eight

00:02:33,180 --> 00:02:40,080
I said you know what folks have snort

00:02:37,620 --> 00:02:41,700
they can go and download the tarball for

00:02:40,080 --> 00:02:45,060
snort and they can compile it and they

00:02:41,700 --> 00:02:46,769
can configure it but they spend hours on

00:02:45,060 --> 00:02:48,840
that and they've just have snort and

00:02:46,769 --> 00:02:51,599
then maybe they go and they download

00:02:48,840 --> 00:02:53,190
base and they install PHP and they

00:02:51,599 --> 00:02:55,049
configure that and they get it running

00:02:53,190 --> 00:02:57,090
and then after a few more days of

00:02:55,049 --> 00:02:59,700
tinkering they finally have this

00:02:57,090 --> 00:03:02,220
graphical user interface or snort but

00:02:59,700 --> 00:03:04,110
that's really not everything that you

00:03:02,220 --> 00:03:06,660
need to have full visibility into your

00:03:04,110 --> 00:03:08,819
network so I said you know what we need

00:03:06,660 --> 00:03:12,329
something better we need a better way of

00:03:08,819 --> 00:03:14,519
doing all this you know we we are

00:03:12,329 --> 00:03:15,780
supposed to be defending our networks we

00:03:14,519 --> 00:03:17,819
shouldn't be spending most of our time

00:03:15,780 --> 00:03:20,670
doing sysadmin work just trying to keep

00:03:17,819 --> 00:03:23,639
our sensors running so let's let's focus

00:03:20,670 --> 00:03:25,170
on defending our networks so in 2008 I

00:03:23,639 --> 00:03:28,290
had this idea I started building it

00:03:25,170 --> 00:03:29,849
released the first version in 2009 and

00:03:28,290 --> 00:03:35,430
back then it just had snort and squeal

00:03:29,849 --> 00:03:37,889
that was it in 2010 I created a new iso

00:03:35,430 --> 00:03:40,349
release it was based on a boon to 1004 I

00:03:37,889 --> 00:03:44,730
added a few things like suricata and 0

00:03:40,349 --> 00:03:46,889
sec and squirt the next year 2011 people

00:03:44,730 --> 00:03:49,169
actually started using it it was weird

00:03:46,889 --> 00:03:50,790
you know this was just my personal

00:03:49,169 --> 00:03:54,269
little pet project I never expected

00:03:50,790 --> 00:03:56,400
anybody to really take it and deploy it

00:03:54,269 --> 00:03:59,459
in production that's ridiculous but

00:03:56,400 --> 00:04:02,099
people did and so instead of releasing a

00:03:59,459 --> 00:04:04,470
new ISO image every year I had to come

00:04:02,099 --> 00:04:06,450
up with a way of deploying in price

00:04:04,470 --> 00:04:08,220
in-place upgrades so I wrote this little

00:04:06,450 --> 00:04:11,430
cheesy shell script that would do in

00:04:08,220 --> 00:04:13,919
place upgrades and via that shell script

00:04:11,430 --> 00:04:16,470
we were able to deploy Argus bro Network

00:04:13,919 --> 00:04:18,030
my nurse norbi and support for

00:04:16,470 --> 00:04:19,979
distributed sensors you could have a

00:04:18,030 --> 00:04:23,520
whole army of sensors all reporting back

00:04:19,979 --> 00:04:27,190
to one central interface so then last

00:04:23,520 --> 00:04:30,970
year 2012 a boon to released 12

00:04:27,190 --> 00:04:34,590
04 so I said okay this is my opportunity

00:04:30,970 --> 00:04:36,760
to make a real true enterprise-grade

00:04:34,590 --> 00:04:39,160
security onion so we're going to be

00:04:36,760 --> 00:04:41,680
based on a boon to 1204 we're going to

00:04:39,160 --> 00:04:43,600
go 64-bit by default we're going to put

00:04:41,680 --> 00:04:45,610
all of our software into packages and

00:04:43,600 --> 00:04:48,610
host it and in a boon to launch pad PPA

00:04:45,610 --> 00:04:50,950
so no more cheesy shell script you now

00:04:48,610 --> 00:04:54,850
have true packages in true package

00:04:50,950 --> 00:04:57,430
management I finally after months and

00:04:54,850 --> 00:05:03,190
months of hard work released security

00:04:57,430 --> 00:05:05,500
onion 1204 on December 31st 2012 so if

00:05:03,190 --> 00:05:08,080
you look at some metrics for security

00:05:05,500 --> 00:05:10,660
onion the the old 10 dot 0 for version

00:05:08,080 --> 00:05:12,540
the ISO image what's downloaded from

00:05:10,660 --> 00:05:15,820
sourceforge thirty seven thousand times

00:05:12,540 --> 00:05:19,360
the new version 1204 that we released

00:05:15,820 --> 00:05:21,070
December 31st in just the past few

00:05:19,360 --> 00:05:24,460
months has been downloaded thirty three

00:05:21,070 --> 00:05:25,990
thousand times we also have BitTorrent

00:05:24,460 --> 00:05:28,180
available so we have no idea how many

00:05:25,990 --> 00:05:31,870
folks are using BitTorrent we also have

00:05:28,180 --> 00:05:34,390
folks who just install via a standard a

00:05:31,870 --> 00:05:36,340
boon to ISO image then add rppa and at

00:05:34,390 --> 00:05:40,300
our packages so of course we have no

00:05:36,340 --> 00:05:42,400
metrics there so the long and short of

00:05:40,300 --> 00:05:46,540
it is we've got a good number of users

00:05:42,400 --> 00:05:48,310
out there so let's talk about some of

00:05:46,540 --> 00:05:52,530
the design goals of this new version of

00:05:48,310 --> 00:05:55,780
security onion as I mentioned before we

00:05:52,530 --> 00:05:58,120
we based it on a boon to 1204 we default

00:05:55,780 --> 00:06:03,640
to 64-bit so if you download our ISO

00:05:58,120 --> 00:06:05,310
image it is 64 bit if you want to you

00:06:03,640 --> 00:06:08,140
can start with your own version of

00:06:05,310 --> 00:06:10,419
ubuntu so you could pick regular a boon

00:06:08,140 --> 00:06:14,200
to or kubuntu or Lubuntu whatever you

00:06:10,419 --> 00:06:16,330
want you can use 32-bit or 64-bit you

00:06:14,200 --> 00:06:17,800
can add our PPA at our packages and

00:06:16,330 --> 00:06:21,250
you'll be up and running in just a few

00:06:17,800 --> 00:06:24,010
minutes now when it comes to high

00:06:21,250 --> 00:06:28,450
performance we really needed to be able

00:06:24,010 --> 00:06:31,990
to monitor networks that were gigabit

00:06:28,450 --> 00:06:35,020
and higher without dropping packets so

00:06:31,990 --> 00:06:36,789
we had to come up with we had to really

00:06:35,020 --> 00:06:39,940
up our game to be able to handle that

00:06:36,789 --> 00:06:41,200
amount of bandwidth so for snorts

00:06:39,940 --> 00:06:43,120
terracotta and bro

00:06:41,200 --> 00:06:45,670
we use a piece of software called PF

00:06:43,120 --> 00:06:47,440
ring so PF ring is a kernel module that

00:06:45,670 --> 00:06:51,070
basically acts as a flow based load

00:06:47,440 --> 00:06:54,610
balancer so that you can take we're as a

00:06:51,070 --> 00:06:56,890
normal single instance of snort may only

00:06:54,610 --> 00:06:59,590
be able to handle 100 maybe 200 mega

00:06:56,890 --> 00:07:02,020
bits of traffic we can take that gigabit

00:06:59,590 --> 00:07:05,080
worth of traffic cut it up into six

00:07:02,020 --> 00:07:06,970
chunks and then spin up enough snort

00:07:05,080 --> 00:07:08,740
instances to handle that amount of

00:07:06,970 --> 00:07:12,190
traffic so PF ring is the magic that

00:07:08,740 --> 00:07:13,840
allows us to do that we also have knit

00:07:12,190 --> 00:07:17,470
sniffing g which is doing full packet

00:07:13,840 --> 00:07:19,720
capture for us and it uses zero copy so

00:07:17,470 --> 00:07:21,550
that it can really write those packets

00:07:19,720 --> 00:07:25,990
to disk as fast as possible without

00:07:21,550 --> 00:07:28,030
dropping now when it comes to graphical

00:07:25,990 --> 00:07:30,070
user interfaces we've got a new GUI

00:07:28,030 --> 00:07:32,620
called Elsa which is basically like a

00:07:30,070 --> 00:07:34,780
free version of spunk so it's a way of

00:07:32,620 --> 00:07:37,000
hunting through your logs and that could

00:07:34,780 --> 00:07:39,160
be your snort logs your own sake logs

00:07:37,000 --> 00:07:41,440
your standard syslog what have you and

00:07:39,160 --> 00:07:44,740
the way that we architect that and our

00:07:41,440 --> 00:07:49,360
deployment is that every single security

00:07:44,740 --> 00:07:53,110
onion box is an Elsa log node and all of

00:07:49,360 --> 00:07:56,790
those Elsa log nodes are queried by the

00:07:53,110 --> 00:07:59,440
central Elsa web interface in parallel

00:07:56,790 --> 00:08:01,570
right so instead of having all of your

00:07:59,440 --> 00:08:03,310
logs going to this one central my sequel

00:08:01,570 --> 00:08:05,350
database you've got all of these

00:08:03,310 --> 00:08:07,450
distributed my sequel databases all of

00:08:05,350 --> 00:08:13,180
your enterprise and you're querying them

00:08:07,450 --> 00:08:18,220
at one spot in one one shot so it makes

00:08:13,180 --> 00:08:20,020
it much much higher performance here's a

00:08:18,220 --> 00:08:22,900
picture of what that looks like so our

00:08:20,020 --> 00:08:24,520
architecture is such that we've got our

00:08:22,900 --> 00:08:26,050
master server that's our Elsa web

00:08:24,520 --> 00:08:29,560
interface and it's also got some other

00:08:26,050 --> 00:08:30,910
server components which talk to the

00:08:29,560 --> 00:08:34,479
sensor components that are down on the

00:08:30,910 --> 00:08:36,550
sensor nodes we try to keep as much data

00:08:34,479 --> 00:08:39,070
as close to its point of origin as

00:08:36,550 --> 00:08:41,530
possible so that means things like full

00:08:39,070 --> 00:08:45,760
packet capture is going to stay on the

00:08:41,530 --> 00:08:47,260
local sensor things like all of our bro

00:08:45,760 --> 00:08:49,090
logs which we'll talk about in a minute

00:08:47,260 --> 00:08:51,850
all those bro logs will stay on the

00:08:49,090 --> 00:08:53,860
local sensor so wherever the data

00:08:51,850 --> 00:08:56,620
originated we want to keep it there so

00:08:53,860 --> 00:08:58,209
imagine that the line between the sensor

00:08:56,620 --> 00:09:00,070
and the server maybe that's just a low

00:08:58,209 --> 00:09:01,990
bandwidth like a t1 to your remote

00:09:00,070 --> 00:09:03,790
branch office right you don't want to be

00:09:01,990 --> 00:09:06,040
clogging that up by sending all this

00:09:03,790 --> 00:09:07,510
security information up to your master

00:09:06,040 --> 00:09:12,899
server so let's keep it at the point of

00:09:07,510 --> 00:09:16,000
origin so I mentioned before that

00:09:12,899 --> 00:09:18,790
security onion kind of grew out of this

00:09:16,000 --> 00:09:22,360
need that you know a lot of folks were

00:09:18,790 --> 00:09:24,550
just using snort and just using snorts

00:09:22,360 --> 00:09:30,100
isn't really going to cut it so the idea

00:09:24,550 --> 00:09:32,649
is that an IDs alert on its own doesn't

00:09:30,100 --> 00:09:35,019
provide you enough intelligence you

00:09:32,649 --> 00:09:37,390
don't really know if that IDs alert on

00:09:35,019 --> 00:09:40,779
its own was a true positive or a false

00:09:37,390 --> 00:09:43,959
positive so there's this concept of

00:09:40,779 --> 00:09:46,480
network security monitoring NSM one of

00:09:43,959 --> 00:09:48,700
the core tenets of NSM is that an IDs

00:09:46,480 --> 00:09:51,550
alert alone is not enough we need

00:09:48,700 --> 00:09:53,230
context around that IDs alert that

00:09:51,550 --> 00:09:56,260
context can come in many different forms

00:09:53,230 --> 00:09:58,630
and we want to collect as much context

00:09:56,260 --> 00:10:00,790
in as many different forms as possible

00:09:58,630 --> 00:10:02,980
so we start off with our alert data we

00:10:00,790 --> 00:10:06,430
start off with network-based IDs alerts

00:10:02,980 --> 00:10:09,880
from either snort or sericata we also

00:10:06,430 --> 00:10:12,060
have host-based IDs alerts coming from 0

00:10:09,880 --> 00:10:14,980
sec so o sake is this great

00:10:12,060 --> 00:10:17,800
cross-platform host-based intrusion

00:10:14,980 --> 00:10:19,810
detection system it does log collection

00:10:17,800 --> 00:10:22,620
and analysis it does file integrity

00:10:19,810 --> 00:10:25,870
checking and it does rootkit detection

00:10:22,620 --> 00:10:27,519
so you can install the Osik agent on

00:10:25,870 --> 00:10:29,350
your Active Directory domain controllers

00:10:27,519 --> 00:10:31,209
your exchange boxes your

00:10:29,350 --> 00:10:34,060
mission-critical unix and linux boxes

00:10:31,209 --> 00:10:36,339
your mac OS machines what have you and

00:10:34,060 --> 00:10:40,570
have them all reporting back to your

00:10:36,339 --> 00:10:44,170
security onion box next up we have asset

00:10:40,570 --> 00:10:46,779
data so this is things like this IP

00:10:44,170 --> 00:10:49,750
address is running windows XP and it's

00:10:46,779 --> 00:10:51,130
running the google chrome browser asset

00:10:49,750 --> 00:10:53,110
data we have that coming from two

00:10:51,130 --> 00:10:55,510
different sources from bro and from

00:10:53,110 --> 00:10:56,560
pratts we have it coming from two

00:10:55,510 --> 00:10:58,510
different sources because they're

00:10:56,560 --> 00:11:01,630
feeding two separate databases which

00:10:58,510 --> 00:11:03,610
we'll look at in the demo later on we

00:11:01,630 --> 00:11:06,370
also have session data so this is if

00:11:03,610 --> 00:11:07,690
you're familiar with cisco net flow it's

00:11:06,370 --> 00:11:10,540
very similar to to net

00:11:07,690 --> 00:11:12,640
flow and that it's just this IP address

00:11:10,540 --> 00:11:14,140
talked to this IP address on this port

00:11:12,640 --> 00:11:16,420
for this amount of time this many

00:11:14,140 --> 00:11:19,450
packets we have that coming from artists

00:11:16,420 --> 00:11:21,940
from bro and from Pratt's then we have

00:11:19,450 --> 00:11:25,000
transaction data so this is things like

00:11:21,940 --> 00:11:30,000
HTTP logs like you might see on an HTTP

00:11:25,000 --> 00:11:33,880
proxy server ftp logs DNS logs SSL logs

00:11:30,000 --> 00:11:35,470
all these are coming from bro bro is

00:11:33,880 --> 00:11:37,000
this amazing piece of software that's

00:11:35,470 --> 00:11:40,080
listening to your network traffic and

00:11:37,000 --> 00:11:43,720
it's creating all these well-formed

00:11:40,080 --> 00:11:46,000
ASCII text logs that are easily possible

00:11:43,720 --> 00:11:48,160
by your standard UNIX command line

00:11:46,000 --> 00:11:50,140
utilities and we've also got those logs

00:11:48,160 --> 00:11:51,760
available in Elsa so we'll show you in a

00:11:50,140 --> 00:11:54,310
few minutes how you can use Elsa to

00:11:51,760 --> 00:11:55,480
slice and dice those logs and really

00:11:54,310 --> 00:11:59,050
understand what's going on in your

00:11:55,480 --> 00:12:00,760
network and then finally I mentioned

00:11:59,050 --> 00:12:02,530
before we do full packet captures we

00:12:00,760 --> 00:12:07,240
have full content data coming from net

00:12:02,530 --> 00:12:09,670
sniffing gee so even if all of the data

00:12:07,240 --> 00:12:13,150
types above don't give us what we're

00:12:09,670 --> 00:12:16,420
looking for we're recording every single

00:12:13,150 --> 00:12:19,470
packet that traverses the wire so we can

00:12:16,420 --> 00:12:24,160
really and truly do a full investigation

00:12:19,470 --> 00:12:26,920
so one of the core pieces of security

00:12:24,160 --> 00:12:31,570
onion which goes along with the whole

00:12:26,920 --> 00:12:33,790
NSM discussion so the the one true open

00:12:31,570 --> 00:12:36,160
source implementation of NSM is squeal

00:12:33,790 --> 00:12:39,130
does anybody played with squeal familiar

00:12:36,160 --> 00:12:40,270
with it few folks so squeal has been

00:12:39,130 --> 00:12:45,390
around for a long time as a matter of

00:12:40,270 --> 00:12:47,980
fact it started off 10 years ago and so

00:12:45,390 --> 00:12:50,920
the guy who wrote squeals name is bam

00:12:47,980 --> 00:12:53,170
fisher super smart guy he said you know

00:12:50,920 --> 00:12:54,580
we we need to implement this in sm model

00:12:53,170 --> 00:12:56,920
we need to be collecting all of this

00:12:54,580 --> 00:13:00,010
data and we need to give the analyst the

00:12:56,920 --> 00:13:03,400
ability to pivot from one in one data

00:13:00,010 --> 00:13:05,560
type to another seamlessly so this is

00:13:03,400 --> 00:13:08,290
kind of what it looks like so you've got

00:13:05,560 --> 00:13:10,660
all these components you've got your

00:13:08,290 --> 00:13:13,900
full content data you've got your

00:13:10,660 --> 00:13:17,020
session data your asset data you've got

00:13:13,900 --> 00:13:20,259
all that data going into squeal which

00:13:17,020 --> 00:13:22,329
writes it into a my sequel database

00:13:20,259 --> 00:13:23,919
you've got sensors that are capturing

00:13:22,329 --> 00:13:26,290
that you've got an analyst that connects

00:13:23,919 --> 00:13:31,119
to squeal to retrieve that information

00:13:26,290 --> 00:13:33,959
and if you were to go and manually

00:13:31,119 --> 00:13:36,970
install squeal so you'd go to the squeal

00:13:33,959 --> 00:13:40,689
wiki and you'd see this long how to

00:13:36,970 --> 00:13:44,199
document and you'd spend days possibly

00:13:40,689 --> 00:13:45,729
weeks possibly even months trying to get

00:13:44,199 --> 00:13:47,679
squeal up and running if you were to try

00:13:45,729 --> 00:13:49,959
to compile and configure all of this

00:13:47,679 --> 00:13:52,720
software to put this jigsaw puzzle

00:13:49,959 --> 00:13:56,109
together so that was one of the the

00:13:52,720 --> 00:13:57,759
difficulties of really trying to give

00:13:56,109 --> 00:14:00,669
analyst the tools they need was because

00:13:57,759 --> 00:14:04,209
it was very difficult but if we can give

00:14:00,669 --> 00:14:06,999
you a nice next next finish wizard to

00:14:04,209 --> 00:14:09,129
take care of all this for you then again

00:14:06,999 --> 00:14:11,709
that's going to let you focus less on

00:14:09,129 --> 00:14:15,129
being a sysadmin and more on actually

00:14:11,709 --> 00:14:17,709
defending your enterprise so that's what

00:14:15,129 --> 00:14:20,049
we did for security onion we've got this

00:14:17,709 --> 00:14:22,689
nice wizard that asks you a few simple

00:14:20,049 --> 00:14:25,569
questions you click next next finish and

00:14:22,689 --> 00:14:27,879
it does all the hard work for you so all

00:14:25,569 --> 00:14:30,309
the software is already precompiled all

00:14:27,879 --> 00:14:31,480
it does is take your the answers that

00:14:30,309 --> 00:14:33,100
you provide it and it goes and

00:14:31,480 --> 00:14:38,079
configures everything for you behind the

00:14:33,100 --> 00:14:41,829
scenes and a few minutes later you have

00:14:38,079 --> 00:14:43,239
a fully operational in sm system with

00:14:41,829 --> 00:14:48,009
all of the components that we talked

00:14:43,239 --> 00:14:51,149
about so what I'm going to show you and

00:14:48,009 --> 00:14:55,299
the demo is we have really four main

00:14:51,149 --> 00:14:56,350
interfaces for you as the analyst the

00:14:55,299 --> 00:15:01,449
first thing I'm going to show you is

00:14:56,350 --> 00:15:06,249
snore be so snore be is a very new

00:15:01,449 --> 00:15:09,009
web-based interface it's Ajax its Ruby

00:15:06,249 --> 00:15:11,470
on Rails its web 2.0 it's all that cool

00:15:09,009 --> 00:15:15,309
hipster stuff that all the kids are are

00:15:11,470 --> 00:15:19,419
crazy about so it's very cool it's very

00:15:15,309 --> 00:15:21,699
flashy and it gives you your IDs alerts

00:15:19,419 --> 00:15:24,459
we have the capability of going from an

00:15:21,699 --> 00:15:26,319
IDs alert and pivoting to full packet

00:15:24,459 --> 00:15:29,139
capture so you can actually render a

00:15:26,319 --> 00:15:32,289
transcript of the entire conversation so

00:15:29,139 --> 00:15:33,580
that's very cool but snore be even

00:15:32,289 --> 00:15:35,770
though it's beautiful

00:15:33,580 --> 00:15:37,240
it doesn't provide access to all of

00:15:35,770 --> 00:15:41,050
those data types that we talked about

00:15:37,240 --> 00:15:43,900
earlier and here's a here's a screenshot

00:15:41,050 --> 00:15:45,550
of pivoting the pcat from snore be that

00:15:43,900 --> 00:15:49,720
goes to a web interface called cap me

00:15:45,550 --> 00:15:51,310
and will show all this in the demo so

00:15:49,720 --> 00:15:53,110
the next web interface we have is called

00:15:51,310 --> 00:15:56,560
squirt squared is a web-based interface

00:15:53,110 --> 00:15:59,140
to the squeal database squirt is very

00:15:56,560 --> 00:16:00,760
nice in that it provides you access to

00:15:59,140 --> 00:16:03,700
more of the data types that we're

00:16:00,760 --> 00:16:06,040
capturing so it gives you access to not

00:16:03,700 --> 00:16:08,680
only the network-based IDs alerts but

00:16:06,040 --> 00:16:13,260
also the host based ids alerts it also

00:16:08,680 --> 00:16:18,760
gives you access to the asset data and

00:16:13,260 --> 00:16:20,860
some of the session data as well and it

00:16:18,760 --> 00:16:22,900
gives you some nice reporting for

00:16:20,860 --> 00:16:25,300
management you know some nice summary

00:16:22,900 --> 00:16:29,050
statistics the nice pretty charts for

00:16:25,300 --> 00:16:30,670
the the manager types then we're going

00:16:29,050 --> 00:16:32,320
to look at the third interface which is

00:16:30,670 --> 00:16:36,340
the squeal client and as I said squeal

00:16:32,320 --> 00:16:38,890
was written ten years ago so it's not a

00:16:36,340 --> 00:16:42,490
modern user interface it's written in

00:16:38,890 --> 00:16:45,670
tickle TK but what it lacks in

00:16:42,490 --> 00:16:47,890
prettiness it more than makes up for in

00:16:45,670 --> 00:16:50,680
usability and the amount of power that

00:16:47,890 --> 00:16:54,070
it gives you as the analyst to take this

00:16:50,680 --> 00:16:55,900
data and slice and dice it and pivot

00:16:54,070 --> 00:16:57,250
from one data type to another and really

00:16:55,900 --> 00:16:59,680
understand what's going on in your

00:16:57,250 --> 00:17:02,920
network so we'll look at the squeal

00:16:59,680 --> 00:17:05,170
client and we'll see how in the squeal

00:17:02,920 --> 00:17:08,560
client you can very easily pivot from

00:17:05,170 --> 00:17:09,910
say an IDs alert to full packet capture

00:17:08,560 --> 00:17:11,980
and we can render that full packet

00:17:09,910 --> 00:17:14,470
capture as a transcript that's what you

00:17:11,980 --> 00:17:15,820
see on the left or we can take the pcap

00:17:14,470 --> 00:17:18,880
and we can actually send it directly

00:17:15,820 --> 00:17:22,360
into Wireshark we can also send that

00:17:18,880 --> 00:17:24,100
peak app directly to network minor so

00:17:22,360 --> 00:17:26,949
you can use network minor to very easily

00:17:24,100 --> 00:17:30,220
extract files from your peak apps or do

00:17:26,949 --> 00:17:32,740
other cool things and then finally we'll

00:17:30,220 --> 00:17:34,990
look at the fourth interface which is

00:17:32,740 --> 00:17:36,880
Elsa and as I mentioned before Elsa is

00:17:34,990 --> 00:17:38,320
is similar to splunk it's a web-based

00:17:36,880 --> 00:17:41,530
interface for hunting through your logs

00:17:38,320 --> 00:17:44,410
so we take all of our bro logs so that's

00:17:41,530 --> 00:17:47,090
like the HTTP log the ftp log the dns

00:17:44,410 --> 00:17:49,490
log we take all of this asset day

00:17:47,090 --> 00:17:51,500
we take all of our IDs alerts we take

00:17:49,490 --> 00:17:54,740
all of our syslog we take all of our o

00:17:51,500 --> 00:17:56,870
sec logs and we throw them into Elsa so

00:17:54,740 --> 00:17:59,059
you have this big ol pile of data

00:17:56,870 --> 00:18:01,850
sitting at your finger tips that you can

00:17:59,059 --> 00:18:03,590
slice and dice however you need to to

00:18:01,850 --> 00:18:06,919
answer the questions that you need to

00:18:03,590 --> 00:18:09,650
answer for your organization and of

00:18:06,919 --> 00:18:12,309
course inside of Elsa if you have

00:18:09,650 --> 00:18:15,230
anything with an IP address and a port

00:18:12,309 --> 00:18:17,510
we can take that and we can pivot to a

00:18:15,230 --> 00:18:20,419
full transcript of that entire TCP

00:18:17,510 --> 00:18:23,679
conversation just like we did with snore

00:18:20,419 --> 00:18:29,179
be also has some nice pretty dashboards

00:18:23,679 --> 00:18:33,230
again for the manager types and you can

00:18:29,179 --> 00:18:34,760
do cool things with the inside of bro it

00:18:33,230 --> 00:18:37,640
has this log called the con law of the

00:18:34,760 --> 00:18:40,909
connection log and this is a session

00:18:37,640 --> 00:18:43,100
data so you can do things like show me

00:18:40,909 --> 00:18:46,820
all of the flows from this IP address

00:18:43,100 --> 00:18:48,950
for the specific time period and then

00:18:46,820 --> 00:18:51,350
you can you know cut through that and

00:18:48,950 --> 00:18:53,679
you can slice and dice it and say show

00:18:51,350 --> 00:18:56,120
me all of the unique IPS that this

00:18:53,679 --> 00:18:59,419
workstation communicated with for the

00:18:56,120 --> 00:19:02,480
past day then show me all the unique

00:18:59,419 --> 00:19:03,980
ports that it talked on then maybe you

00:19:02,480 --> 00:19:06,919
find something interesting so you drill

00:19:03,980 --> 00:19:08,390
into that and then maybe you you're

00:19:06,919 --> 00:19:11,620
interested in one of those see you then

00:19:08,390 --> 00:19:14,120
pivot the pcap right so you then see

00:19:11,620 --> 00:19:18,140
based on that full packet capture

00:19:14,120 --> 00:19:20,510
exactly what happened some guy down here

00:19:18,140 --> 00:19:22,549
is non his head he's he's seeing how

00:19:20,510 --> 00:19:29,350
cool this is and how much he could use

00:19:22,549 --> 00:19:34,789
that every single day yeah you found it

00:19:29,350 --> 00:19:40,010
all right so it's demo time alright so

00:19:34,789 --> 00:19:42,590
let's see that time accurate 148 all

00:19:40,010 --> 00:19:46,130
right so what I have here is I have two

00:19:42,590 --> 00:19:48,110
virtual machines and the only thing i've

00:19:46,130 --> 00:19:50,630
done is i've installed from our standard

00:19:48,110 --> 00:19:53,690
iso image so it's the standard a boon to

00:19:50,630 --> 00:19:56,899
installation you walk through you do the

00:19:53,690 --> 00:19:59,450
boot to installer you reboot I've done

00:19:56,899 --> 00:20:00,559
phase one of our setup wizard which is

00:19:59,450 --> 00:20:03,320
basically just

00:20:00,559 --> 00:20:05,509
specifying which interfaces are used for

00:20:03,320 --> 00:20:08,389
management or for sniffing and assigning

00:20:05,509 --> 00:20:12,169
IP addresses and stuff like that but

00:20:08,389 --> 00:20:14,720
that's really all I've done okay so what

00:20:12,169 --> 00:20:16,580
I'm going to show you now is running

00:20:14,720 --> 00:20:18,649
through phase two of our setup wizard

00:20:16,580 --> 00:20:21,169
which is asking you the questions to

00:20:18,649 --> 00:20:24,740
configure all this stuff and configure

00:20:21,169 --> 00:20:27,679
it behind the scenes so what i will show

00:20:24,740 --> 00:20:29,929
you is that within 10 minutes we can

00:20:27,679 --> 00:20:32,240
configure all this software and have it

00:20:29,929 --> 00:20:34,850
up and running software that would have

00:20:32,240 --> 00:20:46,159
taken you days weeks or months to do by

00:20:34,850 --> 00:20:47,389
hand all right so here we go so we've

00:20:46,159 --> 00:20:50,509
already configured our network

00:20:47,389 --> 00:20:52,159
interfaces so the first real question

00:20:50,509 --> 00:20:55,909
that we have is would you like to use

00:20:52,159 --> 00:20:57,769
quick setup or advanced setup so if it's

00:20:55,909 --> 00:20:59,210
your first time using security onions so

00:20:57,769 --> 00:21:00,710
if you if you go home today and you're

00:20:59,210 --> 00:21:02,539
interested in you download the ISO image

00:21:00,710 --> 00:21:03,769
and you want to play with it I recommend

00:21:02,539 --> 00:21:05,450
for your first time that you choose

00:21:03,769 --> 00:21:08,659
quick setup it's going to ask you the

00:21:05,450 --> 00:21:10,009
absolute minimum number of questions to

00:21:08,659 --> 00:21:13,149
get you up and running as quickly as

00:21:10,009 --> 00:21:15,710
possible now once you've installed

00:21:13,149 --> 00:21:17,149
security onion a couple of times and you

00:21:15,710 --> 00:21:20,090
played with it and you want some more

00:21:17,149 --> 00:21:21,529
control over your installation then you

00:21:20,090 --> 00:21:23,360
can choose the advanced setup it's going

00:21:21,529 --> 00:21:25,759
to ask you more questions you're going

00:21:23,360 --> 00:21:27,799
to need to know more about your your

00:21:25,759 --> 00:21:29,240
setup and your network and the things

00:21:27,799 --> 00:21:35,649
that you want to monitor but it gives

00:21:29,240 --> 00:21:39,889
you more control so for this first vm

00:21:35,649 --> 00:21:41,960
we're just going to do a quick setup so

00:21:39,889 --> 00:21:43,490
which network interface should snort

00:21:41,960 --> 00:21:45,740
listen on that's going to be Ethernet

00:21:43,490 --> 00:21:49,309
one so both of these virtual machines

00:21:45,740 --> 00:21:52,360
they have to network interfaces and what

00:21:49,309 --> 00:21:55,159
we recommend is you always have one Nick

00:21:52,360 --> 00:21:56,480
dedicated for management that's going to

00:21:55,159 --> 00:21:58,909
have an IP address that's what you're

00:21:56,480 --> 00:22:00,710
going to use to SSH into it or to access

00:21:58,909 --> 00:22:03,590
the web-based interface is what have you

00:22:00,710 --> 00:22:05,210
and then you have other interfaces that

00:22:03,590 --> 00:22:08,240
are dedicated for sniffing so in this

00:22:05,210 --> 00:22:09,799
case for both these VMS ethernet 0 is

00:22:08,240 --> 00:22:12,500
our management interface and ethernet

00:22:09,799 --> 00:22:14,409
one is our sniffing interface so snorts

00:22:12,500 --> 00:22:16,820
going to be listening on ethernet one

00:22:14,409 --> 00:22:20,379
what would you like your squeal username

00:22:16,820 --> 00:22:23,330
to be dug what's your email address

00:22:20,379 --> 00:22:25,100
they'll get Burke's com what would you

00:22:23,330 --> 00:22:27,679
like to set your password to confirm

00:22:25,100 --> 00:22:30,350
your password would you like to enable

00:22:27,679 --> 00:22:33,289
Elsa yeah because we want to be able to

00:22:30,350 --> 00:22:35,990
slice and dice all these logs alright so

00:22:33,289 --> 00:22:38,749
that's it that's the only questions that

00:22:35,990 --> 00:22:40,100
we have to answer for quick setup ok so

00:22:38,749 --> 00:22:41,779
it's confirming all the choices that

00:22:40,100 --> 00:22:45,019
we've made are you sure you want to

00:22:41,779 --> 00:22:48,220
continue yes proceed with the changes so

00:22:45,019 --> 00:22:51,049
right now it's configuring Oh sec it's

00:22:48,220 --> 00:22:52,519
creating the squeal server we have no

00:22:51,049 --> 00:22:56,749
internet connection so we can't download

00:22:52,519 --> 00:22:58,840
rules but that's okay right now we're

00:22:56,749 --> 00:23:00,919
initializing the snore be database

00:22:58,840 --> 00:23:02,990
that's going to take another minute or

00:23:00,919 --> 00:23:05,409
two and then it will go on and configure

00:23:02,990 --> 00:23:05,409
Elsa

00:23:12,590 --> 00:23:17,480
so as I said before when setup completes

00:23:14,950 --> 00:23:19,630
we'll go through each of the four

00:23:17,480 --> 00:23:22,490
interfaces that you have is an analyst

00:23:19,630 --> 00:23:24,380
to use and to look at all of the

00:23:22,490 --> 00:23:26,840
information that these sensors are

00:23:24,380 --> 00:23:30,140
providing about your network all right

00:23:26,840 --> 00:23:32,000
so we're done right did I did I come

00:23:30,140 --> 00:23:34,850
through on my promise of less than ten

00:23:32,000 --> 00:23:38,330
minutes to be up and running with all

00:23:34,850 --> 00:23:39,740
this amazing software all right so it

00:23:38,330 --> 00:23:41,809
just tells you some final information

00:23:39,740 --> 00:23:45,080
here about you can look at the setup log

00:23:41,809 --> 00:23:47,090
file you can look at the bro logs here's

00:23:45,080 --> 00:23:50,270
where you can go to modify some of the

00:23:47,090 --> 00:23:51,770
settings on the system and if you have

00:23:50,270 --> 00:23:53,090
any questions you can go look at our

00:23:51,770 --> 00:23:54,830
website where we have frequently asked

00:23:53,090 --> 00:23:57,380
questions we have a wiki we have mailing

00:23:54,830 --> 00:23:59,179
lists so on and so forth so we're done

00:23:57,380 --> 00:24:01,730
right everything is up and running we

00:23:59,179 --> 00:24:12,590
can verify that by opening up a terminal

00:24:01,730 --> 00:24:15,440
and doing service in sm status and we've

00:24:12,590 --> 00:24:16,880
got a bunch of green okay so everything

00:24:15,440 --> 00:24:19,190
is up and running you can see there

00:24:16,880 --> 00:24:21,049
we've got our squeal server we've got

00:24:19,190 --> 00:24:22,789
our Oh SEC agent we've got bro up and

00:24:21,049 --> 00:24:24,440
running we've got net sniffing gee

00:24:22,789 --> 00:24:27,409
that's doing our full packet capture

00:24:24,440 --> 00:24:29,360
we've got the pcap agent which is

00:24:27,409 --> 00:24:31,309
responsible for bridging that full

00:24:29,360 --> 00:24:34,669
packet capture to squeal and back and

00:24:31,309 --> 00:24:36,679
forth we've got the snort agent which

00:24:34,669 --> 00:24:38,390
does the same thing for snorts or the

00:24:36,679 --> 00:24:40,970
snort alerts pass through the stored

00:24:38,390 --> 00:24:44,120
agent to get to squeal we've got

00:24:40,970 --> 00:24:46,970
barnyard too we've got prawns we've got

00:24:44,120 --> 00:24:48,830
the San CP agent the pads agent both

00:24:46,970 --> 00:24:51,320
those two agents are pulling data from

00:24:48,830 --> 00:24:53,330
pratts and sending them to squeal we've

00:24:51,320 --> 00:24:55,190
got Argus which is sniffing network

00:24:53,330 --> 00:24:58,520
traffic and writing session data to disk

00:24:55,190 --> 00:25:01,549
and we've got HTTP agents so all the bro

00:24:58,520 --> 00:25:03,740
HTTP logs go into our squeal database so

00:25:01,549 --> 00:25:05,630
that if you see an ids alert for

00:25:03,740 --> 00:25:07,190
blackhole exploit kit you can pivot on

00:25:05,630 --> 00:25:08,990
that IP address and you can see the

00:25:07,190 --> 00:25:10,730
exact chain of events where the user

00:25:08,990 --> 00:25:13,100
went to Google they search for something

00:25:10,730 --> 00:25:15,380
at limb to some Russian site and boom

00:25:13,100 --> 00:25:18,289
they got popped all right so

00:25:15,380 --> 00:25:22,880
everything's up and running so let's go

00:25:18,289 --> 00:25:26,020
and look at our first interface so this

00:25:22,880 --> 00:25:26,020
is going to be snore be

00:25:30,700 --> 00:25:35,990
and please as I'm going along if you

00:25:33,559 --> 00:25:38,120
have questions please feel free to stop

00:25:35,990 --> 00:25:54,070
me ask your questions I love having vs

00:25:38,120 --> 00:25:58,820
sir full packet capture every single

00:25:54,070 --> 00:26:02,330
packet so it's going to store full

00:25:58,820 --> 00:26:06,139
packet capture for as much disk space as

00:26:02,330 --> 00:26:09,350
you have so we have an hourly cron job

00:26:06,139 --> 00:26:11,720
that looks at your disk space and as

00:26:09,350 --> 00:26:13,429
soon as you hit ninety percent it's

00:26:11,720 --> 00:26:15,760
going to start rolling off the old p

00:26:13,429 --> 00:26:18,710
caps so that you don't fill up your disk

00:26:15,760 --> 00:26:21,649
so you know that's that's one of the

00:26:18,710 --> 00:26:23,950
biggest issues that most new security

00:26:21,649 --> 00:26:26,149
onion users have is that they're used to

00:26:23,950 --> 00:26:28,490
sizing their sensors based on their

00:26:26,149 --> 00:26:30,889
traditional method of thinking when it

00:26:28,490 --> 00:26:33,409
comes to I'm deploying an ids sensor I'm

00:26:30,889 --> 00:26:35,299
not doing full packet capture so I don't

00:26:33,409 --> 00:26:37,490
need a lot of disk so they get into

00:26:35,299 --> 00:26:39,590
trouble when they deploy security onion

00:26:37,490 --> 00:26:44,210
and they deploy it on under sized

00:26:39,590 --> 00:26:47,029
hardware and boom it's it's so under

00:26:44,210 --> 00:26:49,039
sized that it's actually filling to a

00:26:47,029 --> 00:26:53,389
hundred percent before our cron job can

00:26:49,039 --> 00:26:54,980
fix it so we do recommend the folks that

00:26:53,389 --> 00:26:57,289
you make sure you understand how much

00:26:54,980 --> 00:26:58,669
traffic you're actually monitoring so

00:26:57,289 --> 00:27:01,630
that you can size your storage

00:26:58,669 --> 00:27:01,630
appropriately

00:27:08,530 --> 00:27:17,450
yeah I mean the thing is disc is cheap

00:27:12,860 --> 00:27:20,470
so we recommend that folks look at many

00:27:17,450 --> 00:27:22,970
many terabytes on their sensors so

00:27:20,470 --> 00:27:25,309
typically the sensors that I deploy

00:27:22,970 --> 00:27:28,130
nowadays are based on dell poweredge

00:27:25,309 --> 00:27:32,900
r720 s and we deploy about 20 terabytes

00:27:28,130 --> 00:27:35,930
per sensor so that in most cases that

00:27:32,900 --> 00:27:39,650
gives us a good solid month or two a

00:27:35,930 --> 00:27:41,630
full packet capture all right so we're

00:27:39,650 --> 00:27:44,059
logged in to snore be now notice we have

00:27:41,630 --> 00:27:48,950
no alerts here because we don't have any

00:27:44,059 --> 00:27:50,330
traffic yet but and this would be a very

00:27:48,950 --> 00:27:51,559
boring demo if we didn't have any

00:27:50,330 --> 00:27:58,640
traffic so I happen to bring some

00:27:51,559 --> 00:28:06,110
traffic okay so we'll use TCP replay and

00:27:58,640 --> 00:28:10,550
we've we have not really had any

00:28:06,110 --> 00:28:12,640
complaints about that I think you could

00:28:10,550 --> 00:28:15,410
probably shoot yourself in the foot if

00:28:12,640 --> 00:28:18,710
you know if you're running really old

00:28:15,410 --> 00:28:20,960
hardware that had really slow a really

00:28:18,710 --> 00:28:23,120
slow bus and couldn't keep up but I

00:28:20,960 --> 00:28:24,890
think modern hardware is pretty good and

00:28:23,120 --> 00:28:28,010
that sniffing G is actually very good

00:28:24,890 --> 00:28:30,890
when it comes to optimizing the right to

00:28:28,010 --> 00:28:34,190
disk so net sniffing G by default uses a

00:28:30,890 --> 00:28:37,190
scatter gather method so it's gathering

00:28:34,190 --> 00:28:40,270
a whole chunk of traffic and then it

00:28:37,190 --> 00:28:45,620
will spoil that big chunk 2 discs in one

00:28:40,270 --> 00:28:48,260
block so it's very it's very well

00:28:45,620 --> 00:28:50,470
optimized when it comes to taking care

00:28:48,260 --> 00:28:50,470
of that

00:29:02,299 --> 00:29:08,009
no so we don't use wireshark for full

00:29:06,000 --> 00:29:09,779
packet capture we use net sniffing G for

00:29:08,009 --> 00:29:12,059
that so it's doing the full packet

00:29:09,779 --> 00:29:14,549
capture to disk and that's being stored

00:29:12,059 --> 00:29:16,380
in a directory and then when you is the

00:29:14,549 --> 00:29:18,090
analyst login to Squealer one of our

00:29:16,380 --> 00:29:20,909
other interfaces and you go and request

00:29:18,090 --> 00:29:26,960
a pcap it comes from that peak app store

00:29:20,909 --> 00:29:29,669
that was written by net sniffing G right

00:29:26,960 --> 00:29:36,110
alright so I've got some P caps here and

00:29:29,669 --> 00:29:36,110
I'm just going to replay all of them so

00:29:37,730 --> 00:29:45,210
my production sensors nowadays are

00:29:42,919 --> 00:29:50,129
generally about a hundred and twenty

00:29:45,210 --> 00:29:53,460
eight gigs of RAM so yeah we basically

00:29:50,129 --> 00:29:56,129
take a dell poweredge 7r 720 and max it

00:29:53,460 --> 00:30:04,259
out all the RAM all the CPU all the disk

00:29:56,129 --> 00:30:07,590
you can get it really depends on how

00:30:04,259 --> 00:30:09,299
much traffic you're monitoring when

00:30:07,590 --> 00:30:12,090
you're talking about running all the

00:30:09,299 --> 00:30:14,279
sniffer processes that we run and if and

00:30:12,090 --> 00:30:16,679
if you're monitoring say a couple

00:30:14,279 --> 00:30:19,799
hundred mega bits of traffic up two

00:30:16,679 --> 00:30:24,179
gigabit more you definitely need lots of

00:30:19,799 --> 00:30:32,100
RAM alright so we should have some

00:30:24,179 --> 00:30:34,940
traffic now so if i refresh this force a

00:30:32,100 --> 00:30:34,940
cache update

00:30:43,080 --> 00:30:58,870
what size deployments any most of the

00:30:57,040 --> 00:31:03,490
sensors that I have currently are

00:30:58,870 --> 00:31:08,400
smaller than that but the thing is is

00:31:03,490 --> 00:31:13,030
that because of our architectural model

00:31:08,400 --> 00:31:14,560
even if one sensor can't support the

00:31:13,030 --> 00:31:15,910
number of desktops or the amount of

00:31:14,560 --> 00:31:21,190
traffic that you're trying to monitor

00:31:15,910 --> 00:31:24,430
it's actually pretty easy to isolate

00:31:21,190 --> 00:31:27,490
your traffic send it to multiple sensors

00:31:24,430 --> 00:31:29,590
and because because we support a

00:31:27,490 --> 00:31:31,000
distributed sensor model all those

00:31:29,590 --> 00:31:32,920
sensors are going to be managed by one

00:31:31,000 --> 00:31:34,540
interface anyway so it really doesn't

00:31:32,920 --> 00:31:37,120
matter how many sensors you have on the

00:31:34,540 --> 00:31:38,680
back end so I mean you could you could

00:31:37,120 --> 00:31:43,300
say hey I've got so much traffic I

00:31:38,680 --> 00:31:45,190
really need to buy a commercial see

00:31:43,300 --> 00:31:46,960
packet flow based load balancer and I

00:31:45,190 --> 00:31:51,390
need to cut my traffic into 10 slices

00:31:46,960 --> 00:31:51,390
and run 10 security onion boxes

00:32:09,330 --> 00:32:16,690
how far can you scale it down for small

00:32:14,100 --> 00:32:20,010
yeah it just all depends on your amount

00:32:16,690 --> 00:32:20,010
of traffic yes

00:32:33,789 --> 00:32:45,529
yeah I mean so when I talk about running

00:32:38,840 --> 00:32:47,389
a maxed-out r720 I I have a pretty big

00:32:45,529 --> 00:32:50,539
hardware budget money's not really an

00:32:47,389 --> 00:32:56,779
issue for me I'm more concerned about

00:32:50,539 --> 00:32:58,580
not dropping packets ever so much over

00:32:56,779 --> 00:33:01,669
build my sensors to make sure that I

00:32:58,580 --> 00:33:04,369
never drop packets you can certainly go

00:33:01,669 --> 00:33:06,169
with a much smaller sensor if you're if

00:33:04,369 --> 00:33:09,049
you don't mind dropping packets every

00:33:06,169 --> 00:33:10,669
now and then and you'll still even if

00:33:09,049 --> 00:33:12,590
you are dropping some packets every now

00:33:10,669 --> 00:33:14,600
and then you're still getting valuable

00:33:12,590 --> 00:33:16,730
intelligence about your network so it's

00:33:14,600 --> 00:33:19,999
still creating value even if you are on

00:33:16,730 --> 00:33:21,649
an older or underpowered sensor all

00:33:19,999 --> 00:33:25,399
right so here's our snore be dashboard

00:33:21,649 --> 00:33:27,139
and as you can see we've got these nice

00:33:25,399 --> 00:33:29,749
pretty tabs that you can look at

00:33:27,139 --> 00:33:32,600
severity xand protocols and you can look

00:33:29,749 --> 00:33:34,820
at signatures and you know nice pretty

00:33:32,600 --> 00:33:39,019
colors managers love this kind of stuff

00:33:34,820 --> 00:33:40,639
right and you can go to sources and

00:33:39,019 --> 00:33:43,609
destinations and you can look at these

00:33:40,639 --> 00:33:45,470
things you can go on over to events and

00:33:43,609 --> 00:33:47,929
this is where all of your IDs alerts are

00:33:45,470 --> 00:33:50,299
going to be in remember snore be just

00:33:47,929 --> 00:33:53,600
has network-based ids alerts from

00:33:50,299 --> 00:33:55,070
snorter suricata that's the only data

00:33:53,600 --> 00:33:57,230
type that you're going to have in snore

00:33:55,070 --> 00:33:58,730
be so it's beautiful but it's somewhat

00:33:57,230 --> 00:34:02,480
limited in the amount of data it gives

00:33:58,730 --> 00:34:04,669
you but for these ids alerts you can

00:34:02,480 --> 00:34:10,040
take and drill into it and say okay this

00:34:04,669 --> 00:34:12,200
is an ET policy suspicious docx e in the

00:34:10,040 --> 00:34:14,389
HTTP URLs that's interesting so let's

00:34:12,200 --> 00:34:16,520
drill into that so you have your

00:34:14,389 --> 00:34:20,030
traditional source IP and destination IP

00:34:16,520 --> 00:34:24,609
source port destination port you've got

00:34:20,030 --> 00:34:29,030
the little bit of the tcp payload that

00:34:24,609 --> 00:34:31,309
actually generated the alert so this is

00:34:29,030 --> 00:34:33,770
just a little bit that matched against

00:34:31,309 --> 00:34:38,030
the IDS signature but this is not the

00:34:33,770 --> 00:34:39,679
full packet capture okay so generally

00:34:38,030 --> 00:34:40,819
speaking this little bit right here is

00:34:39,679 --> 00:34:42,169
not going to be enough to tell you

00:34:40,819 --> 00:34:43,849
whether this is a true positive or a

00:34:42,169 --> 00:34:44,770
false positive in order to really

00:34:43,849 --> 00:34:47,290
investigate

00:34:44,770 --> 00:34:49,210
we need full packet capture so we go to

00:34:47,290 --> 00:34:54,270
packet capture options we get a custom

00:34:49,210 --> 00:34:54,270
we go to fetch packet we proceed we

00:34:55,890 --> 00:35:07,420
proceed and here is our transcript this

00:35:04,210 --> 00:35:10,270
is the entire TCP conversation this is

00:35:07,420 --> 00:35:17,400
all of the context around that IDs alert

00:35:10,270 --> 00:35:20,350
ok so my analogy for IDs versus NSM is

00:35:17,400 --> 00:35:26,290
the difference between a snapshot in

00:35:20,350 --> 00:35:28,150
time or full video recording so you've

00:35:26,290 --> 00:35:30,850
got a house and you want a physical

00:35:28,150 --> 00:35:32,740
security system for your house right you

00:35:30,850 --> 00:35:34,240
go and buy one they come and install it

00:35:32,740 --> 00:35:38,770
and you find out that it's just a

00:35:34,240 --> 00:35:41,110
motion-activated camera right so you go

00:35:38,770 --> 00:35:44,260
and review this thing and you have the

00:35:41,110 --> 00:35:45,370
snapshot of this guy so you don't know

00:35:44,260 --> 00:35:47,770
if he knocked on your door and walked

00:35:45,370 --> 00:35:50,830
away or if you broke down your door and

00:35:47,770 --> 00:35:52,960
stole your TV right but if you have full

00:35:50,830 --> 00:35:54,910
video recording you know exactly what

00:35:52,960 --> 00:35:56,860
happened it's the same thing with full

00:35:54,910 --> 00:36:00,040
packet capture right we know exactly

00:35:56,860 --> 00:36:02,500
what happened before and after and of

00:36:00,040 --> 00:36:04,570
course you can see here that here's the

00:36:02,500 --> 00:36:07,330
get request this is what triggered the

00:36:04,570 --> 00:36:09,970
IDS alert and you can see in the

00:36:07,330 --> 00:36:14,110
server's response you see the tell-tale

00:36:09,970 --> 00:36:16,450
sign of the MZ header and then this

00:36:14,110 --> 00:36:19,090
program cannot be run in DOS mode so

00:36:16,450 --> 00:36:22,450
this actually it was a Windows

00:36:19,090 --> 00:36:26,560
executable that was sent to this

00:36:22,450 --> 00:36:28,330
particular IP address so you can do all

00:36:26,560 --> 00:36:32,200
kinds of cool stuff with these IDs

00:36:28,330 --> 00:36:34,270
alerts in snore be but as I said it's

00:36:32,200 --> 00:36:36,700
it's really just limited to those data

00:36:34,270 --> 00:36:41,190
types so let's move on to our next

00:36:36,700 --> 00:36:41,190
interphase and that's going to be squirt

00:36:41,430 --> 00:36:47,910
and remember I said that you're going to

00:36:45,010 --> 00:36:51,370
have access to more data types in squirt

00:36:47,910 --> 00:36:53,170
so you'll see things like Oh sex so

00:36:51,370 --> 00:36:55,270
remember Oh sac is a host-based

00:36:53,170 --> 00:36:58,360
intrusion detection system you'll be

00:36:55,270 --> 00:37:00,670
able to see those you'll see down here

00:36:58,360 --> 00:37:02,530
so here's an o sec alert for integrity

00:37:00,670 --> 00:37:05,920
check some change remember Oh sec does

00:37:02,530 --> 00:37:10,240
file integrity checking we have some

00:37:05,920 --> 00:37:11,800
emerging threats IDs alerts and again

00:37:10,240 --> 00:37:14,170
this is a dashboard kind of like how we

00:37:11,800 --> 00:37:15,940
saw in snore be we can go across the top

00:37:14,170 --> 00:37:18,580
when go to signatures and we can look at

00:37:15,940 --> 00:37:20,770
those again some nice pretty colors for

00:37:18,580 --> 00:37:22,870
the management types got some nice

00:37:20,770 --> 00:37:25,210
pretty graphs for top source IP and

00:37:22,870 --> 00:37:27,370
destination IP s we've got a world map

00:37:25,210 --> 00:37:29,740
if you want to do geoip based lookups

00:37:27,370 --> 00:37:32,440
and see what alerts are getting from

00:37:29,740 --> 00:37:34,570
China or Russia then you can go to query

00:37:32,440 --> 00:37:36,730
and you can say hey I want to see

00:37:34,570 --> 00:37:38,770
everything for the past 24 hours and

00:37:36,730 --> 00:37:41,440
notice in this list we've got a few

00:37:38,770 --> 00:37:44,200
different data types there so we've got

00:37:41,440 --> 00:37:49,570
some a sec alerts we've got some pads

00:37:44,200 --> 00:37:52,210
new assets so remember we said that we

00:37:49,570 --> 00:37:54,850
have asset data coming from Brad's so in

00:37:52,210 --> 00:37:56,950
this case it actually found an ftp

00:37:54,850 --> 00:37:59,740
conversation so it found either an ftp

00:37:56,950 --> 00:38:01,840
client or an ftp server so now that we

00:37:59,740 --> 00:38:07,300
we know that that asset is on our

00:38:01,840 --> 00:38:09,880
network we also have URL logs so here we

00:38:07,300 --> 00:38:14,140
have one this is this is an HTTP log

00:38:09,880 --> 00:38:16,990
just going to an IP address 6632 dot

00:38:14,140 --> 00:38:21,060
whatever so that's interesting so what

00:38:16,990 --> 00:38:24,430
if I view event detail and submit that

00:38:21,060 --> 00:38:28,180
if I want to find out more about that I

00:38:24,430 --> 00:38:32,440
can click that and I can see okay so

00:38:28,180 --> 00:38:35,830
this was a get request to that host here

00:38:32,440 --> 00:38:37,630
is the URI so this is actually the same

00:38:35,830 --> 00:38:42,790
exact thing that we just looked at in

00:38:37,630 --> 00:38:46,930
snore be this was the dot dot exe and so

00:38:42,790 --> 00:38:48,370
we were able to see in this case here

00:38:46,930 --> 00:38:49,990
was another indicator that this was

00:38:48,370 --> 00:38:54,040
suspicious just the fact that somebody

00:38:49,990 --> 00:38:56,890
went to an HTTP did an HTTP request to a

00:38:54,040 --> 00:38:58,680
site using just an IP address outside of

00:38:56,890 --> 00:39:01,810
our network that's a little odd

00:38:58,680 --> 00:39:05,590
generally folks are using fully

00:39:01,810 --> 00:39:07,600
qualified domain names so are you

00:39:05,590 --> 00:39:09,570
starting to see the wealth of data that

00:39:07,600 --> 00:39:13,710
we have here and how all of this

00:39:09,570 --> 00:39:16,960
intelligence helps you do your job

00:39:13,710 --> 00:39:23,560
so we've got all this information again

00:39:16,960 --> 00:39:28,780
URL logs IDs alerts asset data all kinds

00:39:23,560 --> 00:39:31,150
of good stuff so that's squirt so now

00:39:28,780 --> 00:39:33,520
let's move into squeal this is the third

00:39:31,150 --> 00:39:42,460
interface that we have it's written in

00:39:33,520 --> 00:39:44,050
tickle TK so squirt is amazingly

00:39:42,460 --> 00:39:45,670
powerful one of the things that I really

00:39:44,050 --> 00:39:49,540
like about squirt from an analyst

00:39:45,670 --> 00:39:51,580
perspective is the fact that it gives me

00:39:49,540 --> 00:39:54,070
access to a ton of information in one

00:39:51,580 --> 00:39:55,990
pane of glass what do I mean by that so

00:39:54,070 --> 00:39:58,000
I can select one of these alerts I can

00:39:55,990 --> 00:40:00,370
turn on show packet data and show packet

00:39:58,000 --> 00:40:02,800
rule we're going to be somewhat limited

00:40:00,370 --> 00:40:05,260
by our resolution here but you see the

00:40:02,800 --> 00:40:07,980
ids rule that generated the alert you

00:40:05,260 --> 00:40:11,680
see the IP header the TCP header and the

00:40:07,980 --> 00:40:13,840
data in the payload you could turn on

00:40:11,680 --> 00:40:15,670
reverse DNS you could turn on who is if

00:40:13,840 --> 00:40:17,380
we had an internet connection so you

00:40:15,670 --> 00:40:20,650
could have all of this information at

00:40:17,380 --> 00:40:22,180
your fingertips without having to double

00:40:20,650 --> 00:40:23,590
click on an alert and double click on

00:40:22,180 --> 00:40:26,650
another window and double click on

00:40:23,590 --> 00:40:29,620
another window as as I have experienced

00:40:26,650 --> 00:40:34,690
in many commercial ids appliances in my

00:40:29,620 --> 00:40:37,570
years so let's see another thing that we

00:40:34,690 --> 00:40:47,110
can do in squeal which is highly

00:40:37,570 --> 00:40:49,720
powerful is I think I have angered it so

00:40:47,110 --> 00:40:52,510
we can instantly pivot to full packet

00:40:49,720 --> 00:40:54,760
capture so if I just ctrl click on the

00:40:52,510 --> 00:40:56,410
alert ID for the IDS alert it's going to

00:40:54,760 --> 00:40:59,200
go to that peak app store it's going to

00:40:56,410 --> 00:41:01,660
pull back the entire pcap the entire TCP

00:40:59,200 --> 00:41:04,350
stream and render it as a transcript in

00:41:01,660 --> 00:41:07,270
my window here and again it's the same

00:41:04,350 --> 00:41:09,460
CXC that we've been looking at we see it

00:41:07,270 --> 00:41:11,080
in the window there so now let's let's

00:41:09,460 --> 00:41:15,420
say that we wanted to do some further

00:41:11,080 --> 00:41:20,530
investigation on that particular alert

00:41:15,420 --> 00:41:23,470
well so instead of control clicking and

00:41:20,530 --> 00:41:25,480
getting a transcript let's actually send

00:41:23,470 --> 00:41:27,070
that pcap into Wireshark

00:41:25,480 --> 00:41:30,330
so it's going to go to the peak App

00:41:27,070 --> 00:41:33,850
Store pull the TCP conversation out

00:41:30,330 --> 00:41:37,060
write it into a pcap give that pcap to

00:41:33,850 --> 00:41:39,910
me and then spawn Wireshark so I now

00:41:37,060 --> 00:41:41,590
have it in wireshark right so I can do

00:41:39,910 --> 00:41:43,180
whatever I want to do in wireshark you

00:41:41,590 --> 00:41:44,710
know I could follow a TCP stream that's

00:41:43,180 --> 00:41:47,470
the same kind of transcript thing that

00:41:44,710 --> 00:41:49,830
we saw before if we wanted to extract

00:41:47,470 --> 00:41:54,640
the exe we could go to file export

00:41:49,830 --> 00:41:56,770
objects HTTP and we could actually save

00:41:54,640 --> 00:41:58,600
that executable right out of the pcap

00:41:56,770 --> 00:42:00,570
and we could do you know some reverse

00:41:58,600 --> 00:42:02,619
engineering on that exe if we wanted to

00:42:00,570 --> 00:42:05,890
and let me show you another way of doing

00:42:02,619 --> 00:42:07,690
that so instead of sending the pcap into

00:42:05,890 --> 00:42:12,010
Wireshark I could send it in a network

00:42:07,690 --> 00:42:15,730
minor and network minor is actually

00:42:12,010 --> 00:42:21,010
going to extract it automatically so I

00:42:15,730 --> 00:42:24,940
can just say open the folder and there's

00:42:21,010 --> 00:42:29,530
our exe alright so I could go to my

00:42:24,940 --> 00:42:35,380
terminal window and I could use the file

00:42:29,530 --> 00:42:38,710
command just to verify that this is

00:42:35,380 --> 00:42:41,380
actually a pe32 executable for windows

00:42:38,710 --> 00:42:42,970
right so we can we can do reverse

00:42:41,380 --> 00:42:50,940
engineering on the executable whatever

00:42:42,970 --> 00:42:53,350
we want to do now you do alright so

00:42:50,940 --> 00:42:55,510
inside of squeal you can you can pivot

00:42:53,350 --> 00:42:58,660
from all these data types so you could

00:42:55,510 --> 00:42:59,980
say okay this workstation I'm really

00:42:58,660 --> 00:43:04,960
concerned about it I want to see

00:42:59,980 --> 00:43:06,400
everything that we know about it in the

00:43:04,960 --> 00:43:10,270
event table so I'm going to query for

00:43:06,400 --> 00:43:12,910
that source IP so again we have new

00:43:10,270 --> 00:43:16,240
asset data and we're being limited by a

00:43:12,910 --> 00:43:17,920
resolution but so you'd have information

00:43:16,240 --> 00:43:19,930
about the assets that we discovered on

00:43:17,920 --> 00:43:22,600
that IP so the operating system the

00:43:19,930 --> 00:43:24,790
browser's in use the services that it

00:43:22,600 --> 00:43:29,140
contacted so you'll see the other IDs

00:43:24,790 --> 00:43:32,200
alerts for that IP address at some point

00:43:29,140 --> 00:43:34,960
we should see yep there's our URL so

00:43:32,200 --> 00:43:38,590
that's our HTTP log and some more pads

00:43:34,960 --> 00:43:39,099
assets anything in squeal that has IP

00:43:38,590 --> 00:43:41,079
address

00:43:39,099 --> 00:43:43,900
and ports again you can pivot to pee

00:43:41,079 --> 00:43:46,960
Kapoor our transcript and then we could

00:43:43,900 --> 00:43:48,579
also say we want to pivot to our session

00:43:46,960 --> 00:43:51,549
data so we want to see all of the

00:43:48,579 --> 00:43:53,979
conversations all the traffic for this

00:43:51,549 --> 00:43:57,369
particular IP address so let's query the

00:43:53,979 --> 00:43:59,769
San CP table on the source IP and so

00:43:57,369 --> 00:44:02,470
here's just kind of a summary view of

00:43:59,769 --> 00:44:04,660
here's all the IP addresses that this

00:44:02,470 --> 00:44:07,269
workstation talked to here's all the

00:44:04,660 --> 00:44:10,029
ports here's how many packets here's how

00:44:07,269 --> 00:44:11,529
many bytes so on and so forth and again

00:44:10,029 --> 00:44:14,950
if we found something of interest like

00:44:11,529 --> 00:44:18,369
this ftp conversation we could pit it

00:44:14,950 --> 00:44:21,369
right to transcript we see oh they

00:44:18,369 --> 00:44:24,299
downloaded g-sec dump should that

00:44:21,369 --> 00:44:26,829
workstation be playing with g-sec dump

00:44:24,299 --> 00:44:30,759
possibly not maybe we need to

00:44:26,829 --> 00:44:43,809
investigate that alright so that's

00:44:30,759 --> 00:44:45,999
squeal so that could be the case so if

00:44:43,809 --> 00:44:48,609
if the malware starts up a back door it

00:44:45,999 --> 00:44:49,900
starts listening on a port then pads is

00:44:48,609 --> 00:44:52,200
going to see that assuming there's

00:44:49,900 --> 00:44:54,400
traffic actually coming into that port

00:44:52,200 --> 00:44:55,930
then it will alert you to that so it

00:44:54,400 --> 00:44:58,989
might say hey you've got a workstation

00:44:55,930 --> 00:45:01,809
listening on port 3 1337 you might want

00:44:58,989 --> 00:45:09,339
to look into that right alright so

00:45:01,809 --> 00:45:11,440
finally we need to look at elsa and how

00:45:09,339 --> 00:45:16,539
long do i have i have til 230 is that

00:45:11,440 --> 00:45:18,069
correct okay I got to move it so here's

00:45:16,539 --> 00:45:23,380
Elsa remember this is our web-based

00:45:18,069 --> 00:45:25,960
interface so we can do things like group

00:45:23,380 --> 00:45:27,489
by program here's some of the log types

00:45:25,960 --> 00:45:30,700
that we have so you can look at a sec

00:45:27,489 --> 00:45:36,299
archive logs you can look at Oh sec

00:45:30,700 --> 00:45:40,660
alerts you can look at cron information

00:45:36,299 --> 00:45:42,640
sudu logs refresh the page then you

00:45:40,660 --> 00:45:46,239
start getting into some of the bro logs

00:45:42,640 --> 00:45:47,089
so bro connection records we can take

00:45:46,239 --> 00:45:49,400
and

00:45:47,089 --> 00:45:52,009
group by destination IP so here's our

00:45:49,400 --> 00:45:55,190
top talkers on the network we can go in

00:45:52,009 --> 00:45:56,900
group by destination port so here's the

00:45:55,190 --> 00:45:59,960
port's if we see an interesting port we

00:45:56,900 --> 00:46:02,630
can drill into that and you can pivot to

00:45:59,960 --> 00:46:04,940
your heart's desire so those are

00:46:02,630 --> 00:46:07,910
connection records now one of the things

00:46:04,940 --> 00:46:10,479
that I really like to do is look at

00:46:07,910 --> 00:46:13,640
every single dns query on my network

00:46:10,479 --> 00:46:16,460
right so I look at all these DNS queries

00:46:13,640 --> 00:46:18,109
I group by hostname and brought us

00:46:16,460 --> 00:46:21,079
something interesting in that not only

00:46:18,109 --> 00:46:24,410
is it capturing true DNS queries it's

00:46:21,079 --> 00:46:26,960
also capturing like Windows netbios name

00:46:24,410 --> 00:46:28,309
queries and it's writing those and so

00:46:26,960 --> 00:46:30,529
that's why you see things like work

00:46:28,309 --> 00:46:34,039
group so I can filter those out just by

00:46:30,529 --> 00:46:38,479
adding 53 so I can look through all my

00:46:34,039 --> 00:46:41,269
DNS requests and I see hmm in our TJ oeu

00:46:38,479 --> 00:46:44,599
that's interesting maybe we might want

00:46:41,269 --> 00:46:47,140
to look more into that so maybe my next

00:46:44,599 --> 00:46:51,200
step might be looking at my HTTP logs

00:46:47,140 --> 00:47:00,019
grouping by sight and then I could see

00:46:51,200 --> 00:47:02,269
in our tjo EU right so here's my here's

00:47:00,019 --> 00:47:05,960
my requests that went to that particular

00:47:02,269 --> 00:47:07,339
site so i could pivot on those for any

00:47:05,960 --> 00:47:09,950
of these that i want to see the

00:47:07,339 --> 00:47:17,089
transcript for i can click info and plug

00:47:09,950 --> 00:47:19,630
in and get pcap and bingo there's my

00:47:17,089 --> 00:47:24,140
transcript so I can see the entire

00:47:19,630 --> 00:47:25,729
conversation so let's go back here

00:47:24,140 --> 00:47:29,420
because I saw another one that looked

00:47:25,729 --> 00:47:34,009
interesting to me splet me calm that's

00:47:29,420 --> 00:47:37,759
en that's fine that's I'm sure that's

00:47:34,009 --> 00:47:40,219
legitimate right so what is that what's

00:47:37,759 --> 00:47:46,940
going on there so let's pivot on that

00:47:40,219 --> 00:47:50,450
one plugin get pcap all right so we did

00:47:46,940 --> 00:47:55,819
a request to slash ? click equals this

00:47:50,450 --> 00:48:00,529
random string and then we had showed up

00:47:55,819 --> 00:48:01,039
PHP interesting stuff so maybe that

00:48:00,529 --> 00:48:05,929
merits

00:48:01,039 --> 00:48:09,410
further investigation all right so we

00:48:05,929 --> 00:48:11,299
can look at HTTP logs we can look at ssl

00:48:09,410 --> 00:48:13,429
certs so obviously we can't see

00:48:11,299 --> 00:48:26,119
encrypted data but we can see the ssl

00:48:13,429 --> 00:48:30,229
cert as its exchanged yes sir that's a

00:48:26,119 --> 00:48:36,499
great question so I'll I'll tell you a

00:48:30,229 --> 00:48:38,089
little story you know we at mandiant we

00:48:36,499 --> 00:48:40,400
released this report on the Chinese back

00:48:38,089 --> 00:48:45,109
in February and we started seeing a lot

00:48:40,400 --> 00:48:49,039
of traffic from China bait lake he's my

00:48:45,109 --> 00:48:51,559
boss yeah so start seeing a lot of

00:48:49,039 --> 00:48:54,640
traffic from China we didn't want to

00:48:51,559 --> 00:48:57,499
deal with it so we blocked all of China

00:48:54,640 --> 00:49:03,380
so if if you don't do business in China

00:48:57,499 --> 00:49:08,359
block them that's that's what I do yeah

00:49:03,380 --> 00:49:15,349
sure sure that's a totally legitimate

00:49:08,359 --> 00:49:17,569
defense strategy all right so so we can

00:49:15,349 --> 00:49:19,429
look at our ssl logs so we can take a

00:49:17,569 --> 00:49:21,079
look at all the fields in those ssl

00:49:19,429 --> 00:49:23,269
certs that are negotiated across our

00:49:21,079 --> 00:49:26,119
wires and we can see interesting things

00:49:23,269 --> 00:49:30,439
there now before I run out of time I

00:49:26,119 --> 00:49:33,499
need to show you our second sensor so

00:49:30,439 --> 00:49:35,679
I've got a second vm here and we're

00:49:33,499 --> 00:49:40,309
going to run through the setup wizard

00:49:35,679 --> 00:49:41,359
and yes so now this time instead of

00:49:40,309 --> 00:49:43,549
doing quick setup we're going to do

00:49:41,359 --> 00:49:45,140
advanced setup because this is what we

00:49:43,549 --> 00:49:46,939
have to do in order to say this is going

00:49:45,140 --> 00:49:49,009
to be a sensor that reports back to our

00:49:46,939 --> 00:49:50,299
central interface so we're going to do

00:49:49,009 --> 00:49:53,150
advanced setup we're going to choose

00:49:50,299 --> 00:50:02,019
sensor and we're going to say our master

00:49:53,150 --> 00:50:06,069
server is besides CLT one and username

00:50:02,019 --> 00:50:08,869
we're going to monitor eighth one and

00:50:06,069 --> 00:50:12,469
we'll just do one instance in one

00:50:08,869 --> 00:50:14,989
instance and enable Elsa and update the

00:50:12,469 --> 00:50:15,320
ELSA server and proceed so again we've

00:50:14,989 --> 00:50:16,760
given

00:50:15,320 --> 00:50:18,080
all the information it needs it's going

00:50:16,760 --> 00:50:21,380
to go behind the scenes can figure all

00:50:18,080 --> 00:50:25,400
the software and it's going to ssh to

00:50:21,380 --> 00:50:29,060
our server and configure the server side

00:50:25,400 --> 00:50:31,430
and we set up a public/private key pair

00:50:29,060 --> 00:50:33,500
there so that we can build an ssh tunnel

00:50:31,430 --> 00:50:38,560
so we can tunnel some traffic from the

00:50:33,500 --> 00:50:41,420
sensor to the server and vice versa and

00:50:38,560 --> 00:50:45,440
we update the ELSA web server so that it

00:50:41,420 --> 00:50:51,850
knows about our new Elsa log node so now

00:50:45,440 --> 00:50:55,130
if I go back here and go to squeal and

00:50:51,850 --> 00:50:58,340
expand this and go to file change

00:50:55,130 --> 00:51:01,340
monitored networks so notice i have b

00:50:58,340 --> 00:51:04,790
sides Charlotte 1 and B side Charlotte

00:51:01,340 --> 00:51:07,820
to Charlotte to is our new sensor so we

00:51:04,790 --> 00:51:19,880
tell it we want to monitor that and then

00:51:07,820 --> 00:51:22,370
if I ssh into b-sides Charlotte to so

00:51:19,880 --> 00:51:27,380
I'm going to create some traffic over

00:51:22,370 --> 00:51:34,610
here and we use some different p caps

00:51:27,380 --> 00:51:36,800
this time star / star so what we should

00:51:34,610 --> 00:51:38,450
see if this works if you'll notice in

00:51:36,800 --> 00:51:40,790
the background squeal is going crazy

00:51:38,450 --> 00:51:44,120
with all these new alerts from b-sides

00:51:40,790 --> 00:51:46,490
Charlotte to write so in just a few

00:51:44,120 --> 00:51:49,910
minutes we have built a distributed

00:51:46,490 --> 00:51:53,510
sensor deployment very simple just a few

00:51:49,910 --> 00:51:57,920
simple easy questions even a windows

00:51:53,510 --> 00:51:59,450
admin could do this all right so the

00:51:57,920 --> 00:52:01,970
other thing that I want to show you is

00:51:59,450 --> 00:52:09,620
back in Elsa if everything worked

00:52:01,970 --> 00:52:14,960
correctly it should update from one node

00:52:09,620 --> 00:52:17,630
to to come on there you go so Elsa has

00:52:14,960 --> 00:52:20,440
two nodes so we should be able to do the

00:52:17,630 --> 00:52:20,440
same thing there

00:52:22,880 --> 00:52:30,019
and Elsa should have all of our snort

00:52:26,539 --> 00:52:43,579
alerts from the peak apps that we just

00:52:30,019 --> 00:52:45,380
replayed so there you go so when you run

00:52:43,579 --> 00:52:47,450
the setup wizard and you say I want this

00:52:45,380 --> 00:52:49,700
to be a sensor it's going to ask you for

00:52:47,450 --> 00:52:52,279
the account that you want to use and

00:52:49,700 --> 00:52:54,109
that's the account it's going to use to

00:52:52,279 --> 00:52:59,029
create that ssh tunnel and it's going to

00:52:54,109 --> 00:53:04,369
automatically create the key pair yeah

00:52:59,029 --> 00:53:05,839
we wouldn't do that alright so now that

00:53:04,369 --> 00:53:07,460
i have preached to you the gospel of

00:53:05,839 --> 00:53:09,500
security onion and you're very excited

00:53:07,460 --> 00:53:11,869
about running in on your network just go

00:53:09,500 --> 00:53:14,779
to security onion dot blogspot com we've

00:53:11,869 --> 00:53:16,309
got a link for downloading the ISO image

00:53:14,779 --> 00:53:18,289
you can get it from sourceforge or from

00:53:16,309 --> 00:53:19,309
torrent we've got a nice install guide

00:53:18,289 --> 00:53:21,829
there we've got frequently asked

00:53:19,309 --> 00:53:28,339
questions we've got mailing list IRC

00:53:21,829 --> 00:53:35,630
channel and so very quickly any

00:53:28,339 --> 00:53:38,329
questions I see one back there the cost

00:53:35,630 --> 00:53:46,789
to a big enterprise is zero dollars

00:53:38,329 --> 00:53:50,359
other than hardware so you can get snort

00:53:46,789 --> 00:53:52,730
signatures for free from either the

00:53:50,359 --> 00:53:57,500
emerging threats project or you can

00:53:52,730 --> 00:54:01,519
choose the Sourcefire VRT registered

00:53:57,500 --> 00:54:05,059
user which is free you just get rules on

00:54:01,519 --> 00:54:08,509
a 30-day delay so you don't have to pay

00:54:05,059 --> 00:54:10,660
for rules but you can if you want to yes

00:54:08,509 --> 00:54:10,660
sir

00:54:20,260 --> 00:54:25,720
so that's a great question the gentleman

00:54:23,080 --> 00:54:29,730
asked about other data sources one in

00:54:25,720 --> 00:54:32,200
particular squid with ssl bump so I

00:54:29,730 --> 00:54:34,600
don't have any experience with ssl bump

00:54:32,200 --> 00:54:35,980
in particular I know that one of our

00:54:34,600 --> 00:54:38,710
community members has a project called

00:54:35,980 --> 00:54:42,210
view ssl d which does something very

00:54:38,710 --> 00:54:45,160
similar as far as decrypting ssl traffic

00:54:42,210 --> 00:54:52,180
so I know that it's possible and I would

00:54:45,160 --> 00:54:54,070
I'm sorry that's a good question too we

00:54:52,180 --> 00:54:58,000
would like to get into doing stuff like

00:54:54,070 --> 00:55:11,320
that so maybe we should talk offline any

00:54:58,000 --> 00:55:19,800
other question yes sir well typically in

00:55:11,320 --> 00:55:22,120
in large enterprises you're well ok so

00:55:19,800 --> 00:55:25,500
most of the stuff that we do is more

00:55:22,120 --> 00:55:28,570
based on IP address than mac address

00:55:25,500 --> 00:55:30,550
typically most enterprises today realize

00:55:28,570 --> 00:55:32,560
that usernames and passwords alone

00:55:30,550 --> 00:55:35,170
aren't enough to keep their network seen

00:55:32,560 --> 00:55:37,240
from unauthorized intrusions that's my

00:55:35,170 --> 00:55:39,280
two-factor authentication has gotten so

00:55:37,240 --> 00:55:41,410
popular lately that adds that extra

00:55:39,280 --> 00:55:42,970
layer of protection enterprise networks

00:55:41,410 --> 00:55:45,130
need to stay safe

00:55:42,970 --> 00:55:47,020
but what you may not know is that some

00:55:45,130 --> 00:55:49,030
two-factor authentication solutions

00:55:47,020 --> 00:55:51,430
they're better than others like

00:55:49,030 --> 00:55:53,920
two-factor strong authentication with

00:55:51,430 --> 00:55:55,990
wicked wicked goes beyond other

00:55:53,920 --> 00:55:58,600
authentication systems by being less

00:55:55,990 --> 00:56:01,390
expensive easier to implement and easier

00:55:58,600 --> 00:56:03,040
to use giving software-based token

00:56:01,390 --> 00:56:05,890
clients built to run on all major

00:56:03,040 --> 00:56:08,520
devices and OSS including iOS and

00:56:05,890 --> 00:56:10,840
Android these tokens utilize a

00:56:08,520 --> 00:56:13,240
public/private key combination that's

00:56:10,840 --> 00:56:15,220
generated on device so there aren't any

00:56:13,240 --> 00:56:17,740
shared secrets flying around or

00:56:15,220 --> 00:56:20,590
attackers to hijack or which require any

00:56:17,740 --> 00:56:22,450
special handling instead all keys are

00:56:20,590 --> 00:56:24,910
kept secure and private between the

00:56:22,450 --> 00:56:27,100
requesting token and your server which

00:56:24,910 --> 00:56:28,740
you control aim house making it the most

00:56:27,100 --> 00:56:31,390
secure way possible to perform

00:56:28,740 --> 00:56:34,240
authentication encryption and with an

00:56:31,390 --> 00:56:37,000
extensive flexible API and support for

00:56:34,240 --> 00:56:38,950
protocols like ldap and radius wicked

00:56:37,000 --> 00:56:41,440
works with any enterprise network

00:56:38,950 --> 00:56:44,110
architecture to protect the IT systems

00:56:41,440 --> 00:56:46,540
vital to your enterprise download your

00:56:44,110 --> 00:56:48,100
wicked free trial today regardless of

00:56:46,540 --> 00:56:50,110
whether you're considering two-factor

00:56:48,100 --> 00:56:51,910
authentication for the first time or

00:56:50,110 --> 00:56:54,640
just ready to ditch your existing

00:56:51,910 --> 00:56:56,920
expensive key file system we can help

00:56:54,640 --> 00:57:03,760
with easy to implement easy to use

00:56:56,920 --> 00:57:05,530
strong authentication from wicked your

00:57:03,760 --> 00:57:07,060
customers rely on your website or

00:57:05,530 --> 00:57:09,430
application if it's slower

00:57:07,060 --> 00:57:12,370
non-responsive it infuriates your users

00:57:09,430 --> 00:57:14,200
and costs you money keeping your

00:57:12,370 --> 00:57:17,690
business critical systems humming along

00:57:14,200 --> 00:57:20,000
requires insight into what they're doing

00:57:17,690 --> 00:57:21,980
your system metrics tells stories

00:57:20,000 --> 00:57:23,960
stories that can reveal performance

00:57:21,980 --> 00:57:26,300
bottlenecks resource limitations and

00:57:23,960 --> 00:57:27,860
other problems but how do you keep an

00:57:26,300 --> 00:57:30,530
eye on all of your systems performance

00:57:27,860 --> 00:57:33,530
metrics in real-time and record this

00:57:30,530 --> 00:57:35,300
data for later analysis enter longview

00:57:33,530 --> 00:57:37,340
the new way to see what's really going

00:57:35,300 --> 00:57:39,470
on under the hood the long view

00:57:37,340 --> 00:57:41,540
dashboard lets you visualize the status

00:57:39,470 --> 00:57:44,000
of all your systems providing you with a

00:57:41,540 --> 00:57:47,390
bird's-eye view of your entire fleet you

00:57:44,000 --> 00:57:49,970
can sort by cpu memory swap processes

00:57:47,390 --> 00:57:51,710
load and network usage click a specific

00:57:49,970 --> 00:57:54,110
system to access its individual

00:57:51,710 --> 00:57:56,620
dashboard then click and drag to zoom in

00:57:54,110 --> 00:57:59,030
on chokepoints and get more detail

00:57:56,620 --> 00:58:00,710
comprehensive network data including

00:57:59,030 --> 00:58:03,020
inbound and outbound traffic is

00:58:00,710 --> 00:58:04,580
available on the network tab and disk

00:58:03,020 --> 00:58:06,500
rights and free space on the disk

00:58:04,580 --> 00:58:09,350
stabbed while the process Explorer

00:58:06,500 --> 00:58:11,870
displays usage statistics for individual

00:58:09,350 --> 00:58:14,060
processes the system info tab shows

00:58:11,870 --> 00:58:16,280
listening services active connections

00:58:14,060 --> 00:58:18,440
and available updates adding long view

00:58:16,280 --> 00:58:20,120
to a system is easy just click the

00:58:18,440 --> 00:58:22,280
button copy the one line installation

00:58:20,120 --> 00:58:24,710
command then run the command on your

00:58:22,280 --> 00:58:26,420
linux system to complete the process the

00:58:24,710 --> 00:58:28,610
agent will begin collecting data and

00:58:26,420 --> 00:58:30,460
sending it to longview then the graphs

00:58:28,610 --> 00:58:33,010
start rolling

00:58:30,460 --> 00:58:35,380
use longview to gain visibility into

00:58:33,010 --> 00:58:39,119
your servers so when your website or app

00:58:35,380 --> 00:58:39,119
heats up it stays up

00:58:43,010 --> 00:58:49,460
how's that sigh every way this is the

00:58:46,220 --> 00:58:51,620
way to better utilize all your resources

00:58:49,460 --> 00:58:55,070
and it makes managing all your resources

00:58:51,620 --> 00:58:58,900
pretty easy all of the innovation is

00:58:55,070 --> 00:59:02,420
happening in open source the

00:58:58,900 --> 00:59:04,220
collaborative nature and of the you know

00:59:02,420 --> 00:59:06,320
of the community and the speed at which

00:59:04,220 --> 00:59:08,330
these are these you know these these

00:59:06,320 --> 00:59:10,610
deficiencies these bugs are getting

00:59:08,330 --> 00:59:13,220
discovered and then fixed is the thing

00:59:10,610 --> 00:59:15,920
that really shows the power of the you

00:59:13,220 --> 00:59:17,570
know of the open source community it is

00:59:15,920 --> 00:59:21,770
global and it's definitely because of

00:59:17,570 --> 00:59:28,100
the users community people are extremely

00:59:21,770 --> 00:59:29,840
friendly and always ready to help if you

00:59:28,100 --> 00:59:31,270
go an entire see any day you'll see

00:59:29,840 --> 00:59:33,410
these guys helping each other out and

00:59:31,270 --> 00:59:36,320
they're all doing it like in a selfless

00:59:33,410 --> 00:59:38,150
manner the product is transparent for

00:59:36,320 --> 00:59:42,350
everyone everyone can look at the code

00:59:38,150 --> 00:59:44,360
base everyone can see how CloudStack is

00:59:42,350 --> 00:59:50,240
being built nothing nothing is

00:59:44,360 --> 00:59:52,880
proprietary everything is open in many

00:59:50,240 --> 00:59:57,080
ways it's absolutely vital to the the

00:59:52,880 --> 01:00:00,860
ongoing health cloudstack the most

00:59:57,080 --> 01:00:04,670
exciting event in recent memory for me

01:00:00,860 --> 01:00:07,400
was our first developer boot camp

01:00:04,670 --> 01:00:10,040
and our call gave people I gave you two

01:00:07,400 --> 01:00:14,000
weeks notice to come attend I was

01:00:10,040 --> 01:00:18,200
expecting 25 or 30 people so we ended up

01:00:14,000 --> 01:00:21,020
with 87 people and had to go get more

01:00:18,200 --> 01:00:23,540
chairs into the room twice everything

01:00:21,020 --> 01:00:26,809
within cloud computing is commodity and

01:00:23,540 --> 01:00:29,869
is open source and so I don't think that

01:00:26,809 --> 01:00:31,609
you will you'll see anywhere where open

01:00:29,869 --> 01:00:34,670
source is not pervasive in cloud

01:00:31,609 --> 01:00:37,369
computing and so i think it's i think

01:00:34,670 --> 01:00:38,720
it's an assumption i think when you talk

01:00:37,369 --> 01:00:39,859
about cloud computing you're really

01:00:38,720 --> 01:00:45,380
talking about open source cloud

01:00:39,859 --> 01:00:48,440
computing cloud zac is a robust solution

01:00:45,380 --> 01:00:50,569
for large deployments you'll have dozens

01:00:48,440 --> 01:00:54,829
of data centers and thousands of servers

01:00:50,569 --> 01:00:57,500
in each data center is these hardware is

01:00:54,829 --> 01:01:01,010
going to fail and CloudStack is designed

01:00:57,500 --> 01:01:03,710
to handle number one that mass scale

01:01:01,010 --> 01:01:06,890
number two it's designed to handle the

01:01:03,710 --> 01:01:09,410
failure that inevitably happens in large

01:01:06,890 --> 01:01:13,940
deployments we started working on cog

01:01:09,410 --> 01:01:17,210
deck over four years ago and it was the

01:01:13,940 --> 01:01:18,980
original set of people working on it had

01:01:17,210 --> 01:01:23,089
a background of delivering software

01:01:18,980 --> 01:01:27,319
telcos and service providers lots of QA

01:01:23,089 --> 01:01:30,950
lots of users actually using it high

01:01:27,319 --> 01:01:34,010
availability is a key feature multiple

01:01:30,950 --> 01:01:36,200
hypervisors support different network

01:01:34,010 --> 01:01:39,200
models we can pick up whatever suits you

01:01:36,200 --> 01:01:40,970
better well step management server can

01:01:39,200 --> 01:01:44,660
be deployed in different physical

01:01:40,970 --> 01:01:46,339
machines it definitely has a huge

01:01:44,660 --> 01:01:51,319
footprint it's being deployed everywhere

01:01:46,339 --> 01:01:53,900
there's a major movie studio that they

01:01:51,319 --> 01:01:57,200
were using cloudstack they were using it

01:01:53,900 --> 01:01:59,180
to transcode video and i thought that

01:01:57,200 --> 01:02:00,829
was terribly fascinating what i found

01:01:59,180 --> 01:02:04,099
more fascinating is what they did during

01:02:00,829 --> 01:02:06,859
lunch where they would spin up you know

01:02:04,099 --> 01:02:08,040
50 or 60 game servers then as soon as

01:02:06,859 --> 01:02:09,870
lunch was over they would

01:02:08,040 --> 01:02:14,010
all the instances and go back to doing

01:02:09,870 --> 01:02:15,630
real work CloudStack is vast it touches

01:02:14,010 --> 01:02:17,700
so many different aspects and there's no

01:02:15,630 --> 01:02:20,100
one person that's kind of like a master

01:02:17,700 --> 01:02:24,210
of all those realms I think cloudstack

01:02:20,100 --> 01:02:26,520
as a project is going to be one of the

01:02:24,210 --> 01:02:30,480
leaders simply because it's some of the

01:02:26,520 --> 01:02:35,910
most feature fallen and and robust

01:02:30,480 --> 01:02:38,840
platforms out they were Adam senior

01:02:35,910 --> 01:02:38,840
living through the clouds dag

01:02:51,589 --> 01:02:53,650
you

01:02:57,000 --> 01:03:02,079
when we created asterisk over a decade

01:02:59,740 --> 01:03:04,030
ago we could not have imagined that

01:03:02,079 --> 01:03:06,250
asterisk would not only become the most

01:03:04,030 --> 01:03:08,380
widely adopted open source communication

01:03:06,250 --> 01:03:10,420
software on the planet but that it would

01:03:08,380 --> 01:03:12,940
impact the entire industry in the way

01:03:10,420 --> 01:03:14,920
that it has today asterisk has found its

01:03:12,940 --> 01:03:17,559
way in the more than 170 countries and

01:03:14,920 --> 01:03:19,510
virtually every fortune 1000 company the

01:03:17,559 --> 01:03:21,609
success of asterisk has enabled a

01:03:19,510 --> 01:03:23,020
transition of power from the hands of

01:03:21,609 --> 01:03:25,270
the traditional proprietary phone

01:03:23,020 --> 01:03:27,670
vendors into the hands of the users and

01:03:25,270 --> 01:03:29,740
administrators of phone systems using

01:03:27,670 --> 01:03:31,390
this power our customers have traded all

01:03:29,740 --> 01:03:33,490
sorts of business changing applications

01:03:31,390 --> 01:03:35,290
from small office phone systems to

01:03:33,490 --> 01:03:37,390
mission-critical call centers to

01:03:35,290 --> 01:03:39,220
international carrier networks in fact

01:03:37,390 --> 01:03:40,660
there's even an entire country those

01:03:39,220 --> 01:03:43,150
communications infrastructure runs on

01:03:40,660 --> 01:03:45,069
esters the gym has always been about

01:03:43,150 --> 01:03:46,780
creating technology that expands

01:03:45,069 --> 01:03:48,940
communications capabilities in ways that

01:03:46,780 --> 01:03:50,140
we could never have imagined and that's

01:03:48,940 --> 01:03:52,540
part of what's game-changing about

01:03:50,140 --> 01:03:55,240
Digium today we're doing it again this

01:03:52,540 --> 01:03:57,309
time by introducing a new family of HD

01:03:55,240 --> 01:03:59,440
IP phones that extends control of the

01:03:57,309 --> 01:04:01,210
user all the way to the desktop the

01:03:59,440 --> 01:04:02,920
launch of these new products represents

01:04:01,210 --> 01:04:04,990
the next phase indigenous history of

01:04:02,920 --> 01:04:07,420
innovation these are the first and only

01:04:04,990 --> 01:04:09,130
IP phones designed to fully leverage the

01:04:07,420 --> 01:04:10,660
power of estrus when we first discussed

01:04:09,130 --> 01:04:12,730
our expectations for building a family

01:04:10,660 --> 01:04:14,859
of phones for use with asterisk our

01:04:12,730 --> 01:04:16,599
requirements were pretty simple we asked

01:04:14,859 --> 01:04:18,220
the team to build the phones such that

01:04:16,599 --> 01:04:20,440
they were easy to install integrate

01:04:18,220 --> 01:04:22,270
provision and use I think you'll soon

01:04:20,440 --> 01:04:24,849
agree our engineers have delivered on

01:04:22,270 --> 01:04:26,470
that goal user feedback is validating

01:04:24,849 --> 01:04:28,599
that when it comes to operation with

01:04:26,470 --> 01:04:31,000
astro space systems including our own

01:04:28,599 --> 01:04:33,579
Switchvox based product these are the

01:04:31,000 --> 01:04:34,900
easiest to use best integrated most

01:04:33,579 --> 01:04:37,119
interoperable products on the market

01:04:34,900 --> 01:04:39,250
today the digit and family of phones

01:04:37,119 --> 01:04:41,380
will initially include three IP des

01:04:39,250 --> 01:04:43,089
hommes uniquely designed to complement

01:04:41,380 --> 01:04:45,069
any asterisks or Switchvox based

01:04:43,089 --> 01:04:47,710
solution these phones are different for

01:04:45,069 --> 01:04:49,650
a number of reasons first there is clue

01:04:47,710 --> 01:04:52,089
sively designed for use with esters

01:04:49,650 --> 01:04:53,700
secondly we've made it really easy to

01:04:52,089 --> 01:04:56,079
autodiscover and provision the phones

01:04:53,700 --> 01:04:57,790
next we've made it easy for the phones

01:04:56,079 --> 01:04:59,730
to access information inside of

01:04:57,790 --> 01:05:01,730
asterisks allowing tight coupling

01:04:59,730 --> 01:05:03,690
between an application and the phone

01:05:01,730 --> 01:05:05,850
additionally we've created an

01:05:03,690 --> 01:05:07,980
applications engine that allows users

01:05:05,850 --> 01:05:11,220
and developers to create and run their

01:05:07,980 --> 01:05:12,990
own apps on the phone and finally we've

01:05:11,220 --> 01:05:14,940
done all of this at a very compelling

01:05:12,990 --> 01:05:16,619
price point at Digium we're always

01:05:14,940 --> 01:05:18,720
thinking of ways to give our customers

01:05:16,619 --> 01:05:21,300
the best value in business phone systems

01:05:18,720 --> 01:05:22,830
and also give them the power to create

01:05:21,300 --> 01:05:24,990
their own solutions or any

01:05:22,830 --> 01:05:26,730
communications challenge will continue

01:05:24,990 --> 01:05:28,170
to push the boundaries not only to make

01:05:26,730 --> 01:05:30,210
Astra's cooler bastard more

01:05:28,170 --> 01:05:31,950
technologically feature-rich but to make

01:05:30,210 --> 01:05:34,470
asterisk and communications even easier

01:05:31,950 --> 01:05:38,000
and together we'll change the way the

01:05:34,470 --> 01:05:38,000
world communicates again

01:05:44,720 --> 01:05:46,780

YouTube URL: https://www.youtube.com/watch?v=j7azcxD4W_0


