Title: 2013 SouthEast LinuxFest - Lincoln Baxter III - URL Rewriting
Publication date: 2014-07-29
Playlist: 2013 SouthEast LinuxFest
Description: 
	2013 SouthEast LinuxFest
Lincoln Baxter III - URL Rewriting for the Next Generation Web User
Captions: 
	00:00:00,000 --> 00:00:05,160
the following presentation was recorded

00:00:02,639 --> 00:00:08,280
at the 2013 southeast linux fest in

00:00:05,160 --> 00:00:10,860
charlotte north carolina it is licensed

00:00:08,280 --> 00:00:12,509
under a creative commons license for

00:00:10,860 --> 00:00:16,619
more information about the southeast

00:00:12,509 --> 00:00:19,830
linux fest visit WWF eastland TX phase

00:00:16,619 --> 00:00:21,630
or the southeast linux fest would like

00:00:19,830 --> 00:00:24,000
to thank the following diamond sponsors

00:00:21,630 --> 00:00:27,359
in 2013 for helping make these videos

00:00:24,000 --> 00:00:32,460
possible alright so it's nine o'clock

00:00:27,359 --> 00:00:37,829
let's get started thanks for coming to

00:00:32,460 --> 00:00:41,850
southeast linux fest my name is Lincoln

00:00:37,829 --> 00:00:44,010
Baxter and this is my talk on URL

00:00:41,850 --> 00:00:46,110
rewriting as a concept and how we can

00:00:44,010 --> 00:00:48,390
use that as applied to developer

00:00:46,110 --> 00:00:54,270
productivity feasibility and security

00:00:48,390 --> 00:00:57,960
and this is actually something I really

00:00:54,270 --> 00:01:01,050
like to do I started working on URL

00:00:57,960 --> 00:01:03,570
rewriting tools around 2008 I guess when

00:01:01,050 --> 00:01:06,000
I was trying to found a small startup

00:01:03,570 --> 00:01:08,460
company called ocp soft which is where I

00:01:06,000 --> 00:01:10,619
still do some of my work if you'd like

00:01:08,460 --> 00:01:12,420
to follow me on twitter my handle is

00:01:10,619 --> 00:01:13,920
lincoln three and i say a lot of really

00:01:12,420 --> 00:01:17,490
weird stuff and occasionally something

00:01:13,920 --> 00:01:20,430
useful so first of all what is URL

00:01:17,490 --> 00:01:23,810
rewriting can any of you people you

00:01:20,430 --> 00:01:23,810
people tell me

00:01:25,400 --> 00:01:34,630
in Emma's room not / room / 94 6.8 769

00:01:29,750 --> 00:01:37,100
comma 3 comma excellent very good answer

00:01:34,630 --> 00:01:40,430
this is a readable readable room

00:01:37,100 --> 00:01:46,280
location well its lives already up let's

00:01:40,430 --> 00:01:49,220
fix that so yeah so for those who may

00:01:46,280 --> 00:01:52,160
not have followed a somewhat cryptic

00:01:49,220 --> 00:01:53,960
response to my question URL be writing

00:01:52,160 --> 00:01:57,590
is the manipulation of the address

00:01:53,960 --> 00:01:59,540
typically to take a complicated ugly

00:01:57,590 --> 00:02:01,340
unreadable thing and turn in something

00:01:59,540 --> 00:02:03,380
readable or solve a bunch of other

00:02:01,340 --> 00:02:05,810
problems that will talk about today but

00:02:03,380 --> 00:02:07,520
as a general concept I like to say that

00:02:05,810 --> 00:02:10,160
it is pretty much any manipulation of

00:02:07,520 --> 00:02:13,430
the HTTP request and response lifecycle

00:02:10,160 --> 00:02:15,200
so the URL the headers you know

00:02:13,430 --> 00:02:16,580
potentially cookies or anything else

00:02:15,200 --> 00:02:20,690
that you want to change going inbound

00:02:16,580 --> 00:02:22,070
and outbound so judgments prevent us

00:02:20,690 --> 00:02:27,220
from seeing the good that lies beyond

00:02:22,070 --> 00:02:31,340
appearances what does this mean well

00:02:27,220 --> 00:02:35,239
when you go to a website and the first

00:02:31,340 --> 00:02:37,820
reaction that you have is a that's a

00:02:35,239 --> 00:02:41,090
judgment that could potentially prevent

00:02:37,820 --> 00:02:42,950
you from really engaging with or

00:02:41,090 --> 00:02:45,500
utilizing a potentially functional

00:02:42,950 --> 00:02:46,550
website and we're very good at this it

00:02:45,500 --> 00:02:48,470
doesn't take us very long at all to

00:02:46,550 --> 00:02:51,140
figure out that something is looks like

00:02:48,470 --> 00:02:56,600
crap or feels like crap or is

00:02:51,140 --> 00:03:00,230
potentially secured like crap so we tend

00:02:56,600 --> 00:03:02,110
to leave immediately and that is what I

00:03:00,230 --> 00:03:05,030
would call it failed user interaction I

00:03:02,110 --> 00:03:06,170
would argue that the user interaction

00:03:05,030 --> 00:03:07,640
doesn't start when you get to the

00:03:06,170 --> 00:03:09,739
website that starts when you get to the

00:03:07,640 --> 00:03:12,680
link to the website and that's one of

00:03:09,739 --> 00:03:15,290
the things we'll talk about today so

00:03:12,680 --> 00:03:18,530
we've got problems with the web the

00:03:15,290 --> 00:03:20,989
first one is missing resources or

00:03:18,530 --> 00:03:24,830
relocated resources so the web is full

00:03:20,989 --> 00:03:27,049
of these holes that were once filled

00:03:24,830 --> 00:03:28,040
with content or where we thought content

00:03:27,049 --> 00:03:30,200
was supposed to be but it's just not

00:03:28,040 --> 00:03:32,859
there anymore and this is actually a

00:03:30,200 --> 00:03:35,870
really big problem the second problem is

00:03:32,859 --> 00:03:36,710
readability and clutter there is a lot

00:03:35,870 --> 00:03:39,080
of

00:03:36,710 --> 00:03:41,180
out on the internet and this leads us to

00:03:39,080 --> 00:03:45,050
potential security problems to potential

00:03:41,180 --> 00:03:46,940
social engineering problems and it's

00:03:45,050 --> 00:03:50,960
something we can help address when we

00:03:46,940 --> 00:03:52,610
develop our own applications then the

00:03:50,960 --> 00:03:53,990
corresponding topic to that would be

00:03:52,610 --> 00:03:56,860
formatting that information so that it

00:03:53,990 --> 00:04:01,700
can actually be readable and more secure

00:03:56,860 --> 00:04:03,110
also the URL is a place where we can

00:04:01,700 --> 00:04:05,150
reveal a lot of potentially sensitive

00:04:03,110 --> 00:04:09,770
information about the application we're

00:04:05,150 --> 00:04:11,360
developing and also you know the the

00:04:09,770 --> 00:04:14,090
request response headers and all that

00:04:11,360 --> 00:04:16,070
stuff is also visible and needs to be

00:04:14,090 --> 00:04:17,600
secured and that gets us to the last

00:04:16,070 --> 00:04:19,670
point of validation so how do we close

00:04:17,600 --> 00:04:21,500
these gaps and you already writing can

00:04:19,670 --> 00:04:24,650
help us do that using a few very simple

00:04:21,500 --> 00:04:26,530
techniques so there are a lot more

00:04:24,650 --> 00:04:29,120
problems than this out on the internet

00:04:26,530 --> 00:04:32,630
but we'll talk about those five and

00:04:29,120 --> 00:04:35,750
maybe a few more so if there's one thing

00:04:32,630 --> 00:04:38,000
that I'd like to get across during this

00:04:35,750 --> 00:04:45,170
talk is that URL rewriting is not a good

00:04:38,000 --> 00:04:51,440
choice for doing it wrong so let's get

00:04:45,170 --> 00:04:56,810
started missing resources who saw this

00:04:51,440 --> 00:04:59,120
coming everyone good you're with me so

00:04:56,810 --> 00:05:01,760
this is actually such a big problem that

00:04:59,120 --> 00:05:05,210
it can cause massive community responses

00:05:01,760 --> 00:05:10,010
in times of great change or great

00:05:05,210 --> 00:05:12,380
catastrophe and this happens Oracle when

00:05:10,010 --> 00:05:13,640
they purchased Sun which if you're in

00:05:12,380 --> 00:05:15,650
the java community you were oh so

00:05:13,640 --> 00:05:18,110
thrilled about but let's turned out to

00:05:15,650 --> 00:05:21,560
be okay but this was the general

00:05:18,110 --> 00:05:23,480
response to this whole problem Oracle

00:05:21,560 --> 00:05:24,980
broke all the links to Sun documentation

00:05:23,480 --> 00:05:30,470
and everyone was broken for about a

00:05:24,980 --> 00:05:33,770
month oh well that's what I say about

00:05:30,470 --> 00:05:37,700
that so we start seeing like more

00:05:33,770 --> 00:05:39,350
creative and interesting responses to

00:05:37,700 --> 00:05:40,690
this situation you know people start

00:05:39,350 --> 00:05:43,730
throwing up little cutie kittens

00:05:40,690 --> 00:05:46,700
Blizzard actually blames you for finding

00:05:43,730 --> 00:05:48,190
a problem with their website and then

00:05:46,700 --> 00:05:51,880
people get a little crazy

00:05:48,190 --> 00:05:55,600
and I really I don't know what that

00:05:51,880 --> 00:06:02,560
thing is this is one of my personal

00:05:55,600 --> 00:06:06,940
favorites and this is mine if i can get

00:06:02,560 --> 00:06:08,560
my remote to work and then people start

00:06:06,940 --> 00:06:11,200
investing actual time and money in these

00:06:08,560 --> 00:06:14,230
things they start you know hiring a

00:06:11,200 --> 00:06:16,960
design team and making little cute

00:06:14,230 --> 00:06:20,170
videos and we're all probably familiar

00:06:16,960 --> 00:06:22,090
with the octa kitty and his little this

00:06:20,170 --> 00:06:28,600
is not the page you're looking for

00:06:22,090 --> 00:06:31,290
reference to star wars and then people

00:06:28,600 --> 00:06:31,290
go a little over the top

00:06:56,370 --> 00:07:06,340
all that for a 404 page I would say that

00:07:04,539 --> 00:07:09,400
it is more accessible than a traditional

00:07:06,340 --> 00:07:13,659
404 page because it is both auditory and

00:07:09,400 --> 00:07:15,789
visual as opposed to simply visual there

00:07:13,659 --> 00:07:19,930
is text on the page as well I just took

00:07:15,789 --> 00:07:24,400
a little snippet of the video but good

00:07:19,930 --> 00:07:25,990
question so then we get people who are

00:07:24,400 --> 00:07:39,849
taking drugs to start making our four or

00:07:25,990 --> 00:07:42,310
four videos anyway I digress so what

00:07:39,849 --> 00:07:44,740
does it mean what it means is it's

00:07:42,310 --> 00:07:49,509
really a distraction from failure this

00:07:44,740 --> 00:07:50,860
is something that is not a positive

00:07:49,509 --> 00:07:53,439
experience and there are two ways to

00:07:50,860 --> 00:07:56,409
have this experience the page existed

00:07:53,439 --> 00:08:00,099
now does not which means your website

00:07:56,409 --> 00:08:05,319
sucks or the page never existed and you

00:08:00,099 --> 00:08:08,379
suck so neither is going to make anyone

00:08:05,319 --> 00:08:10,719
happy really in the end and what do we

00:08:08,379 --> 00:08:13,569
do about it it's really an easy solution

00:08:10,719 --> 00:08:16,690
who can tell me before I throw it up on

00:08:13,569 --> 00:08:21,759
the screen you can redirect into the

00:08:16,690 --> 00:08:24,969
homepage right what else where they were

00:08:21,759 --> 00:08:27,849
last and that's really the answer right

00:08:24,969 --> 00:08:29,710
you you move them somewhere else or you

00:08:27,849 --> 00:08:31,060
send them somewhere else for now and

00:08:29,710 --> 00:08:35,260
hope that they like that better than

00:08:31,060 --> 00:08:36,610
what they found so this is actually such

00:08:35,260 --> 00:08:38,140
a big problem on the internet the google

00:08:36,610 --> 00:08:40,899
recommends that you do this for 180 days

00:08:38,140 --> 00:08:46,779
of creating a situation where you need a

00:08:40,899 --> 00:08:48,910
redirect 180 days is half a year that's

00:08:46,779 --> 00:08:51,220
kind of a long time to be maintaining

00:08:48,910 --> 00:08:52,899
things about old applications that you

00:08:51,220 --> 00:08:54,790
may be changing frequently maybe not

00:08:52,899 --> 00:08:56,769
frequently but it's still something that

00:08:54,790 --> 00:09:00,190
you have to be conscious about and take

00:08:56,769 --> 00:09:02,470
actual action to fix so before you kill

00:09:00,190 --> 00:09:06,550
kenny think about when you change your

00:09:02,470 --> 00:09:07,720
urls there are a couple options for

00:09:06,550 --> 00:09:10,870
dealing with this the most

00:09:07,720 --> 00:09:14,500
probably well known solution is Apache

00:09:10,870 --> 00:09:17,160
mod rewrite if you're in Java land you

00:09:14,500 --> 00:09:19,629
can use the tucky URL rewrite filter or

00:09:17,160 --> 00:09:21,939
my own personal favorite because I

00:09:19,629 --> 00:09:23,589
created it the ocp soft rewrite URL

00:09:21,939 --> 00:09:26,740
rewrite filter and there are other

00:09:23,589 --> 00:09:32,529
solutions like if you're in net you can

00:09:26,740 --> 00:09:33,370
use the I is rewrite extension or what

00:09:32,529 --> 00:09:37,199
else there's a whole bunch of things

00:09:33,370 --> 00:09:39,970
you've got like tons of options for this

00:09:37,199 --> 00:09:45,490
let's get to our next point URL

00:09:39,970 --> 00:09:47,110
readability I can't speak so this is the

00:09:45,490 --> 00:09:53,439
problem with URL readability on the web

00:09:47,110 --> 00:09:55,709
the kindle anyone tell me why this is

00:09:53,439 --> 00:09:55,709
the problem

00:09:58,220 --> 00:10:02,460
there's no URL okay that's not the

00:10:01,350 --> 00:10:05,310
answer I'm looking for the reason is

00:10:02,460 --> 00:10:12,330
because that is where you have to go to

00:10:05,310 --> 00:10:15,060
buy a kindle what set that's why you

00:10:12,330 --> 00:10:16,770
don't have one right so there's only

00:10:15,060 --> 00:10:21,240
three reasons why I would ever click

00:10:16,770 --> 00:10:22,560
this the first one is because I can tell

00:10:21,240 --> 00:10:24,930
it came from amazon and i already know

00:10:22,560 --> 00:10:27,390
about amazon which is pretty okay i can

00:10:24,930 --> 00:10:30,150
i can take that for granted the second

00:10:27,390 --> 00:10:35,460
one is because i use linux and I don't

00:10:30,150 --> 00:10:37,170
fear viruses and the third is because

00:10:35,460 --> 00:10:39,240
maybe we're friends and I might trust

00:10:37,170 --> 00:10:43,470
you enough to click a link that looks

00:10:39,240 --> 00:10:47,910
like complete garbage this is what it

00:10:43,470 --> 00:10:51,060
should have been how hard is this it's

00:10:47,910 --> 00:10:54,270
not hard but if we take a closer look at

00:10:51,060 --> 00:10:57,780
this address which is kind of hard to

00:10:54,270 --> 00:11:01,980
read on the screen i'm sorry the kindle

00:10:57,780 --> 00:11:03,470
Wi-Fi touch display with ink and all

00:11:01,980 --> 00:11:08,130
that stuff that's great about the kindle

00:11:03,470 --> 00:11:11,070
pay me amazon is right there in the

00:11:08,130 --> 00:11:13,380
front where it should be but it's

00:11:11,070 --> 00:11:17,220
followed by all this junk as it turns

00:11:13,380 --> 00:11:19,290
out they are using an IBM product sales

00:11:17,220 --> 00:11:21,840
platform which is what all this other

00:11:19,290 --> 00:11:24,120
garbage comes from but really it's not

00:11:21,840 --> 00:11:26,520
necessary and it could if not be hidden

00:11:24,120 --> 00:11:28,140
at least kind of shoot off into the

00:11:26,520 --> 00:11:30,600
corner a little bit so that we don't

00:11:28,140 --> 00:11:32,970
have to worry about it as humans right

00:11:30,600 --> 00:11:37,980
this is all stuff that Amazon uses to do

00:11:32,970 --> 00:11:39,810
their referral tracking and you know

00:11:37,980 --> 00:11:42,810
other statistics gathering and all that

00:11:39,810 --> 00:11:47,250
kind of stuff but why do we need to see

00:11:42,810 --> 00:11:48,900
that I mean this is all optional for the

00:11:47,250 --> 00:11:51,810
URL you can chop that off and you'll

00:11:48,900 --> 00:11:56,940
still go to the kindle so why do we care

00:11:51,810 --> 00:11:58,080
why do we see that well obviously they

00:11:56,940 --> 00:11:59,280
can't get rid of it because they need to

00:11:58,080 --> 00:12:00,540
their tracking make sure that when you

00:11:59,280 --> 00:12:01,770
get referred from a website they don't

00:12:00,540 --> 00:12:04,890
website you've heard them to you know

00:12:01,770 --> 00:12:07,080
people can actually intercept these URLs

00:12:04,890 --> 00:12:09,780
and they've been known to sort of gather

00:12:07,080 --> 00:12:12,030
up they collect websites that post

00:12:09,780 --> 00:12:14,190
amazon links for deal

00:12:12,030 --> 00:12:15,570
and what they'll do is they'll gather up

00:12:14,190 --> 00:12:16,620
all these these links from people's

00:12:15,570 --> 00:12:18,450
website and they'll post it on their

00:12:16,620 --> 00:12:19,800
website except they'll change the

00:12:18,450 --> 00:12:21,240
tracking token so that they get the

00:12:19,800 --> 00:12:24,930
credit for finding the deal and

00:12:21,240 --> 00:12:26,220
referring the person which okay but if

00:12:24,930 --> 00:12:29,970
you're advertising that this came from

00:12:26,220 --> 00:12:34,290
another site whatever anyway we can kind

00:12:29,970 --> 00:12:36,720
of fix this why not compress this token

00:12:34,290 --> 00:12:39,560
all these parameters into something that

00:12:36,720 --> 00:12:42,170
is very clearly not meant for us right

00:12:39,560 --> 00:12:44,340
there's no text there's no English

00:12:42,170 --> 00:12:45,960
there's no language that we can

00:12:44,340 --> 00:12:48,210
understand in this token at the bottom

00:12:45,960 --> 00:12:51,780
but all of the information is still

00:12:48,210 --> 00:12:56,180
there for Amazon to consume and we get

00:12:51,780 --> 00:12:58,440
our nice little pretty guide at the top

00:12:56,180 --> 00:13:04,140
this is actually really not hard to do

00:12:58,440 --> 00:13:05,640
it just takes a little forethought so

00:13:04,140 --> 00:13:11,940
that gets me to the next point which is

00:13:05,640 --> 00:13:17,870
formatting this information is this

00:13:11,940 --> 00:13:22,680
really understandable what is this doing

00:13:17,870 --> 00:13:24,980
what happens when you go to this link by

00:13:22,680 --> 00:13:24,980
shoes

00:13:25,410 --> 00:13:37,420
right but it would be a lot cooler if we

00:13:34,990 --> 00:13:42,760
could put a little bit of logic into

00:13:37,420 --> 00:13:45,310
this so example.com great we know where

00:13:42,760 --> 00:13:48,640
we're going now we're going to the store

00:13:45,310 --> 00:13:51,339
now we're buying shoes I now we're

00:13:48,640 --> 00:13:53,320
buying the shoe with the product ID 1

00:13:51,339 --> 00:13:56,200
which could have also been optimized out

00:13:53,320 --> 00:13:59,200
or left as a parameter but that's up to

00:13:56,200 --> 00:14:01,270
all of us and then this weird by

00:13:59,200 --> 00:14:03,250
parameter I don't know who would put a

00:14:01,270 --> 00:14:11,440
buy parameter in the URL I was probably

00:14:03,250 --> 00:14:12,760
you know so my next question is what are

00:14:11,440 --> 00:14:23,010
you most afraid of when you buy a used

00:14:12,760 --> 00:14:25,990
car a lemon what you can't see exactly

00:14:23,010 --> 00:14:30,070
you're afraid that it might turn out to

00:14:25,990 --> 00:14:36,779
be this in a few years or a few months

00:14:30,070 --> 00:14:40,260
that that is a classic pile of junk so

00:14:36,779 --> 00:14:40,260
do you trust me

00:14:42,970 --> 00:14:55,759
the answer I heard so far as no would

00:14:46,339 --> 00:15:00,069
you click this link at work it's blocked

00:14:55,759 --> 00:15:00,069
so why do they why do they block it so

00:15:08,110 --> 00:15:11,660
they don't trust their employees they

00:15:10,369 --> 00:15:14,749
perceive it as non work and I would

00:15:11,660 --> 00:15:18,790
argue that it's also a potential sexual

00:15:14,749 --> 00:15:34,389
harassment lawsuit waiting to happen so

00:15:18,790 --> 00:15:34,389
let's see what happens sorry about that

00:15:40,180 --> 00:15:46,670
70 million people have been rickrolled

00:15:42,550 --> 00:15:49,570
that's a really nice statistic on this

00:15:46,670 --> 00:15:59,690
particular version so 70 million people

00:15:49,570 --> 00:16:02,839
came to this link which was designed for

00:15:59,690 --> 00:16:03,950
the explicit purpose of tricking you

00:16:02,839 --> 00:16:06,130
into going somewhere where you're going

00:16:03,950 --> 00:16:10,070
to have to see Rick Astley do that dance

00:16:06,130 --> 00:16:12,290
because we can't see what's in here so

00:16:10,070 --> 00:16:14,180
we can actually build trust for all of

00:16:12,290 --> 00:16:16,730
our users and for all of our internet

00:16:14,180 --> 00:16:18,649
friends if we had just done something

00:16:16,730 --> 00:16:21,290
like this and put the name of the video

00:16:18,649 --> 00:16:25,190
in the URL and now we wouldn't be able

00:16:21,290 --> 00:16:36,339
to participate in fun internet memes are

00:16:25,190 --> 00:16:39,019
lost but actually YouTube what yes so

00:16:36,339 --> 00:16:43,459
right the comment was you'd have to

00:16:39,019 --> 00:16:53,120
start tracking unique video names and

00:16:43,459 --> 00:16:54,940
you'd run out of names you would

00:16:53,120 --> 00:16:57,890
potentially have to learn some languages

00:16:54,940 --> 00:16:59,779
so yeah the other comment was you're

00:16:57,890 --> 00:17:01,699
actually doing my presentation for me

00:16:59,779 --> 00:17:04,400
this is great you can actually solve

00:17:01,699 --> 00:17:05,959
this problem by putting prefixing the

00:17:04,400 --> 00:17:08,360
title of the URL with the username and

00:17:05,959 --> 00:17:11,209
now you have an infinite namespace

00:17:08,360 --> 00:17:13,339
because everyone can duplicate whatever

00:17:11,209 --> 00:17:15,079
video name they want and as long as it's

00:17:13,339 --> 00:17:16,760
under their username then there's no

00:17:15,079 --> 00:17:17,839
conflict with other people because we

00:17:16,760 --> 00:17:19,010
don't care about people conflicting

00:17:17,839 --> 00:17:25,040
themselves because that would just be

00:17:19,010 --> 00:17:28,640
silly so that brings us to revealing

00:17:25,040 --> 00:17:32,020
sensitive information the part where you

00:17:28,640 --> 00:17:36,169
see things that maybe you shouldn't like

00:17:32,020 --> 00:17:38,480
nobody likes to admit they use net not

00:17:36,169 --> 00:17:40,910
even Microsoft as it turns out because

00:17:38,480 --> 00:17:43,340
when I go to their faq aspx page they

00:17:40,910 --> 00:17:48,320
redirect me away from that and I no

00:17:43,340 --> 00:17:50,340
longer no longer see their lovely crappy

00:17:48,320 --> 00:17:56,320
technology

00:17:50,340 --> 00:17:58,990
so that's a little embarrassing we have

00:17:56,320 --> 00:18:02,620
all these frameworks right we have java

00:17:58,990 --> 00:18:06,250
web frameworks we have more java web

00:18:02,620 --> 00:18:08,980
frameworks and PHP web frameworks and

00:18:06,250 --> 00:18:12,340
more java web frameworks and Ruby web

00:18:08,980 --> 00:18:14,289
frameworks and pearl web frameworks or C

00:18:12,340 --> 00:18:16,320
or whatever technology want to put under

00:18:14,289 --> 00:18:19,330
it and more java web frameworks and

00:18:16,320 --> 00:18:22,270
microsoft web frameworks and java web

00:18:19,330 --> 00:18:26,770
frameworks which there aren't that many

00:18:22,270 --> 00:18:28,210
but yes there are and whatever else you

00:18:26,770 --> 00:18:29,500
want to use so when you're building your

00:18:28,210 --> 00:18:39,250
application would how do you pick

00:18:29,500 --> 00:18:41,110
between all these what was that whatever

00:18:39,250 --> 00:18:43,120
fits your needs in what you know which

00:18:41,110 --> 00:18:45,250
could be dependent on who is working for

00:18:43,120 --> 00:18:47,440
you at that given time which could

00:18:45,250 --> 00:18:50,260
potentially change over time meaning if

00:18:47,440 --> 00:18:53,320
you want to move to a new framework and

00:18:50,260 --> 00:18:57,000
migrate and an old application you now

00:18:53,320 --> 00:19:00,220
have to change all of your URLs which is

00:18:57,000 --> 00:19:01,779
getting back to our first problem you've

00:19:00,220 --> 00:19:05,429
just created a situation where you have

00:19:01,779 --> 00:19:09,330
to redirect people and this situation is

00:19:05,429 --> 00:19:11,500
difficult you have thousands of pages

00:19:09,330 --> 00:19:13,299
maybe you have hundreds of pages or tens

00:19:11,500 --> 00:19:16,870
of pages with dynamic information

00:19:13,299 --> 00:19:19,090
dynamic links that take parameters and

00:19:16,870 --> 00:19:20,679
accept input and send people to

00:19:19,090 --> 00:19:23,620
something that has meaning in the

00:19:20,679 --> 00:19:27,669
application well we could have prevented

00:19:23,620 --> 00:19:31,120
this if we had simply done a little you

00:19:27,669 --> 00:19:36,120
or I'll be writing to start with if we

00:19:31,120 --> 00:19:38,679
had taken the forethought to remove the

00:19:36,120 --> 00:19:43,630
technology specific suffix from our page

00:19:38,679 --> 00:19:46,690
whether that be HTML perl PHP Ruby see

00:19:43,630 --> 00:19:48,700
whatever we could have eliminated this

00:19:46,690 --> 00:19:52,510
problem and or at least simplified the

00:19:48,700 --> 00:19:54,159
problem and given us the opportunity to

00:19:52,510 --> 00:19:55,360
not have to redirect people and not have

00:19:54,159 --> 00:19:57,940
to worry about sending them to the wrong

00:19:55,360 --> 00:20:01,899
place and for affording them and showing

00:19:57,940 --> 00:20:03,590
them that pretty little kitten so it

00:20:01,899 --> 00:20:06,080
comes down to a good magician never be

00:20:03,590 --> 00:20:09,350
their secrets or their implementation in

00:20:06,080 --> 00:20:11,809
this case right why would we show them

00:20:09,350 --> 00:20:13,070
how we do what we do that's giving them

00:20:11,809 --> 00:20:17,720
information that they could use to

00:20:13,070 --> 00:20:19,880
potentially exploit us I think Apache

00:20:17,720 --> 00:20:21,590
has been contributing to this for a good

00:20:19,880 --> 00:20:23,809
long time because every Apache server

00:20:21,590 --> 00:20:27,289
comes by default configured to say hey

00:20:23,809 --> 00:20:31,340
I'm Apache and here's my version and my

00:20:27,289 --> 00:20:33,559
build number so if you know a particular

00:20:31,340 --> 00:20:36,620
exploit of that particular version and

00:20:33,559 --> 00:20:39,220
build of Apache you can then get very

00:20:36,620 --> 00:20:43,940
specific information about how to bypass

00:20:39,220 --> 00:20:45,140
its security features or use it to you

00:20:43,940 --> 00:20:49,970
know get access to the system or

00:20:45,140 --> 00:20:52,480
whatever you want to do so I would

00:20:49,970 --> 00:20:54,620
suggest if you are building in

00:20:52,480 --> 00:20:56,390
implementation of a website that needs

00:20:54,620 --> 00:20:58,909
to be secure and manages client

00:20:56,390 --> 00:21:01,370
sensitive data you probably want to get

00:20:58,909 --> 00:21:03,590
rid of anything that has to do with your

00:21:01,370 --> 00:21:05,899
hardware whatever infrastructure you're

00:21:03,590 --> 00:21:07,510
using just get rid of it why reveal that

00:21:05,899 --> 00:21:09,500
information make them guess first

00:21:07,510 --> 00:21:12,049
security through obscurity is not the

00:21:09,500 --> 00:21:14,450
best practice but it is a pretty good

00:21:12,049 --> 00:21:16,520
starting point because if you don't know

00:21:14,450 --> 00:21:21,620
then you have to figure out I figuring

00:21:16,520 --> 00:21:27,289
out can be very difficult so this brings

00:21:21,620 --> 00:21:30,440
us to the last of our problems with the

00:21:27,289 --> 00:21:35,559
internet are there only five problems

00:21:30,440 --> 00:21:38,899
with internet if you have to expose data

00:21:35,559 --> 00:21:41,179
you have to remember exposed data in the

00:21:38,899 --> 00:21:43,340
URL you have to remember that URLs and

00:21:41,179 --> 00:21:47,049
headers and cookies are user input too

00:21:43,340 --> 00:21:49,490
right it's not just the forms and the

00:21:47,049 --> 00:21:50,840
buttons and all that lovely stuff that

00:21:49,490 --> 00:21:54,320
shows up that people can click and type

00:21:50,840 --> 00:21:55,789
in it's the address bar it's the stuff

00:21:54,320 --> 00:21:57,140
that the browser sends and the stuff

00:21:55,789 --> 00:21:58,640
that your server receives kind of

00:21:57,140 --> 00:22:02,630
transparently that we all could have

00:21:58,640 --> 00:22:06,289
forget about and those are all things

00:22:02,630 --> 00:22:13,179
that are vulnerable an interesting study

00:22:06,289 --> 00:22:16,940
was done by aspect security and they

00:22:13,179 --> 00:22:18,800
they did a big pole of the

00:22:16,940 --> 00:22:22,130
open-source security vulnerability

00:22:18,800 --> 00:22:24,920
database and they found that two of the

00:22:22,130 --> 00:22:28,070
three most recent vulnerability is found

00:22:24,920 --> 00:22:30,620
in popular web frameworks which happened

00:22:28,070 --> 00:22:32,630
to be Java because those are basically

00:22:30,620 --> 00:22:35,300
the enterprise-e things that people tend

00:22:32,630 --> 00:22:37,730
just drop gravitate to we're actually

00:22:35,300 --> 00:22:39,440
based in the URL and this is interesting

00:22:37,730 --> 00:22:41,720
because a lot of frameworks Anna I'm

00:22:39,440 --> 00:22:44,540
sure job is not the only one actually

00:22:41,720 --> 00:22:46,790
use some scripting like languages in

00:22:44,540 --> 00:22:50,150
various places so that you can more

00:22:46,790 --> 00:22:51,890
quickly accomplish complex tasks it just

00:22:50,150 --> 00:22:54,470
so happens that both of the frameworks

00:22:51,890 --> 00:22:58,130
that were affected by this allowed you

00:22:54,470 --> 00:23:00,530
to script things in the URL and not only

00:22:58,130 --> 00:23:04,460
could you script things in the URL you

00:23:00,530 --> 00:23:08,030
could invoke any typed any statically

00:23:04,460 --> 00:23:09,860
typed object in the URL so if you could

00:23:08,030 --> 00:23:12,500
access it statically you could execute

00:23:09,860 --> 00:23:14,930
it like in the Java Virtual Machine you

00:23:12,500 --> 00:23:16,580
have this system object the system

00:23:14,930 --> 00:23:19,100
object has something called system dot

00:23:16,580 --> 00:23:20,210
exit now system that exit isn't the

00:23:19,100 --> 00:23:21,620
worst thing because shutting down the

00:23:20,210 --> 00:23:24,410
application kind of closes a bunch of

00:23:21,620 --> 00:23:27,800
security holes with it but system dot

00:23:24,410 --> 00:23:30,170
eval is a little more worrisome because

00:23:27,800 --> 00:23:32,330
now you're executing code as the user

00:23:30,170 --> 00:23:35,690
that that java virtual machine is

00:23:32,330 --> 00:23:39,710
running in the entire JVM so if that's

00:23:35,690 --> 00:23:41,150
not secured then you have you know if

00:23:39,710 --> 00:23:42,560
they're not running in at root even if

00:23:41,150 --> 00:23:44,420
they are you can break out of it you

00:23:42,560 --> 00:23:46,070
know you can you've got access to the

00:23:44,420 --> 00:23:47,570
file system at that point you can write

00:23:46,070 --> 00:23:49,010
to that users directory you can start

00:23:47,570 --> 00:23:50,480
executing code and then you can start

00:23:49,010 --> 00:23:51,770
executing things and attacking things

00:23:50,480 --> 00:23:56,240
from inside the system itself and that's

00:23:51,770 --> 00:23:57,740
just a really bad situation right and

00:23:56,240 --> 00:24:00,830
this was the other one so the first one

00:23:57,740 --> 00:24:03,670
was spring MVC I think this is the seam

00:24:00,830 --> 00:24:07,580
the first one was steam and this one was

00:24:03,670 --> 00:24:09,650
struts sorry struts 2 which is a very

00:24:07,580 --> 00:24:11,600
popular java web framework and then

00:24:09,650 --> 00:24:14,930
spring which is also a very popular java

00:24:11,600 --> 00:24:19,790
web framework so we can actually secure

00:24:14,930 --> 00:24:23,090
this using URL rewriting using mod

00:24:19,790 --> 00:24:26,690
rewrite you could do this you could do

00:24:23,090 --> 00:24:28,880
this using a native java URL rewriting

00:24:26,690 --> 00:24:31,149
technology which is what i'm showing you

00:24:28,880 --> 00:24:34,690
here i'm saying when the direction

00:24:31,149 --> 00:24:36,849
of the request is inbound or when the

00:24:34,690 --> 00:24:39,339
direction of the rewriting event is

00:24:36,849 --> 00:24:40,960
inbound so we are getting a quest we're

00:24:39,339 --> 00:24:42,339
going to check the URL and we're going

00:24:40,960 --> 00:24:45,999
to check all the header names and values

00:24:42,339 --> 00:24:48,820
for bad things and then if bad things

00:24:45,999 --> 00:24:52,379
exist we're going to send them to the

00:24:48,820 --> 00:24:54,729
404 page or potentially take whatever

00:24:52,379 --> 00:24:56,889
action we want you know we could

00:24:54,729 --> 00:24:58,599
potentially aggregate the number of

00:24:56,889 --> 00:25:00,580
times that we get bad things from a

00:24:58,599 --> 00:25:02,649
particular IP address or from range of

00:25:00,580 --> 00:25:05,619
IP addresses and we could send them to

00:25:02,649 --> 00:25:07,179
say a honeypot where we've pretty much

00:25:05,619 --> 00:25:09,009
determined that they are trying to do

00:25:07,179 --> 00:25:10,359
bad things to us because they've hit our

00:25:09,009 --> 00:25:13,779
bad things filter are a number of times

00:25:10,359 --> 00:25:17,589
and we can start treating them like they

00:25:13,779 --> 00:25:19,809
have asked to be treated so that's one

00:25:17,589 --> 00:25:21,789
approach and this is our bad things

00:25:19,809 --> 00:25:24,879
filter who can tell me what's wrong with

00:25:21,789 --> 00:25:27,269
this why is this bad things filter not

00:25:24,879 --> 00:25:27,269
good enough

00:25:35,140 --> 00:25:42,559
special

00:25:37,159 --> 00:25:44,299
right right so the first response was

00:25:42,559 --> 00:25:46,399
it's only looking for a few special

00:25:44,299 --> 00:25:49,099
things the second response was don't

00:25:46,399 --> 00:25:51,619
forget Unicode one of the lovely things

00:25:49,099 --> 00:25:55,249
about regular expressions is that they

00:25:51,619 --> 00:25:57,200
accept Unicode and actually any string

00:25:55,249 --> 00:26:07,479
matching will you know have to watch out

00:25:57,200 --> 00:26:10,519
for Unicode which is a right right so

00:26:07,479 --> 00:26:12,979
but actually that's this is matching

00:26:10,519 --> 00:26:14,479
anything at the beginning and end but

00:26:12,979 --> 00:26:16,159
basically we're saying that if there's

00:26:14,479 --> 00:26:22,849
any bad character anywhere found

00:26:16,159 --> 00:26:26,029
anywhere it will be a it'll catch it but

00:26:22,849 --> 00:26:27,999
the problem is as we you know said you

00:26:26,029 --> 00:26:30,979
were only looking for a few small things

00:26:27,999 --> 00:26:33,200
it's not a whitelist it's a blacklist

00:26:30,979 --> 00:26:34,970
black lists are ultimately fallible

00:26:33,200 --> 00:26:37,369
right there are always ways around a

00:26:34,970 --> 00:26:40,190
blacklist so the better approach would

00:26:37,369 --> 00:26:45,529
be to say our URL only accepts

00:26:40,190 --> 00:26:46,940
alphanumeric characters and in that case

00:26:45,529 --> 00:26:49,369
then you would have a pretty restricted

00:26:46,940 --> 00:26:51,619
set of URLs and headers but it would be

00:26:49,369 --> 00:26:54,700
much less likely that someone's going to

00:26:51,619 --> 00:27:02,179
be able to get around this this attack

00:26:54,700 --> 00:27:04,820
filter so this is a real-life URL and if

00:27:02,179 --> 00:27:07,849
you can tell me where this goes and you

00:27:04,820 --> 00:27:12,470
haven't seen my talk before I'll give

00:27:07,849 --> 00:27:17,570
you ten dollars you can type it in you

00:27:12,470 --> 00:27:20,809
have 30 seconds all right no one's even

00:27:17,570 --> 00:27:29,259
trying that's that's fair so what this

00:27:20,809 --> 00:27:29,259
should have been is the kids Department

00:27:29,370 --> 00:27:43,740
that's an excellent expression why I

00:27:33,600 --> 00:27:51,059
don't understand why this oh sorry why

00:27:43,740 --> 00:27:52,770
this couldn't just be / kids to be fair

00:27:51,059 --> 00:27:55,110
I think a little bean has seen my talked

00:27:52,770 --> 00:27:57,480
a few times they've actually changed it

00:27:55,110 --> 00:27:58,920
a little bit it's now maybe like a third

00:27:57,480 --> 00:28:02,030
as long as that top one but there's

00:27:58,920 --> 00:28:02,030
still a bunch of junk in there and

00:28:02,360 --> 00:28:07,410
unfortunately when you access this URL

00:28:05,370 --> 00:28:14,340
it does work but it sends you to the

00:28:07,410 --> 00:28:16,170
other one I don't get it but let's take

00:28:14,340 --> 00:28:18,080
another look at this and this is just

00:28:16,170 --> 00:28:23,670
going to be beating that dead horse

00:28:18,080 --> 00:28:29,120
right so we're at llbean we're in a web

00:28:23,670 --> 00:28:33,300
app thanks I think I do that already now

00:28:29,120 --> 00:28:36,770
we're using another IBM product

00:28:33,300 --> 00:28:39,120
management suite product sales sweet and

00:28:36,770 --> 00:28:41,309
we're running in a servlet so now we

00:28:39,120 --> 00:28:47,000
have Java and everyone knows that we're

00:28:41,309 --> 00:28:49,500
using Java and now we're in category 28

00:28:47,000 --> 00:28:51,590
awesome i love category 28 is my

00:28:49,500 --> 00:28:56,550
favorite i'm gonna have some 28 someday

00:28:51,590 --> 00:28:57,929
and we're in store ID 1 I didn't know

00:28:56,550 --> 00:28:58,980
there was more than one ll bean I guess

00:28:57,929 --> 00:29:00,179
they have a bunch of stores but their

00:28:58,980 --> 00:29:03,380
web store could potentially be like

00:29:00,179 --> 00:29:03,380
store number one or something like that

00:29:04,130 --> 00:29:09,000
all right we can start trying to find

00:29:06,929 --> 00:29:10,530
trying to iterate through categories to

00:29:09,000 --> 00:29:14,820
see what else we can find right we can

00:29:10,530 --> 00:29:18,210
start playing with this trying to find

00:29:14,820 --> 00:29:19,380
the free products exactly catalogue 81

00:29:18,210 --> 00:29:21,300
you know we're starting to get the point

00:29:19,380 --> 00:29:26,100
language ID negative one I don't know

00:29:21,300 --> 00:29:30,360
who speaks that computers don't even

00:29:26,100 --> 00:29:32,250
speak negative one not really and then

00:29:30,360 --> 00:29:33,660
this thing I don't know what that is so

00:29:32,250 --> 00:29:35,610
the Morelos story is clean and validate

00:29:33,660 --> 00:29:38,790
because that's giving us a lot of places

00:29:35,610 --> 00:29:42,290
where we can start immediately attacking

00:29:38,790 --> 00:29:47,300
this address we are being literally told

00:29:42,290 --> 00:29:52,460
this is everywhere I accept input so

00:29:47,300 --> 00:29:57,010
let's be a little smarter about this so

00:29:52,460 --> 00:30:00,040
I just like to take a short moment to

00:29:57,010 --> 00:30:02,690
let everyone sort of relax chill out

00:30:00,040 --> 00:30:06,470
take a look at the HTTP specification

00:30:02,690 --> 00:30:10,070
from the w3c status code 14 is I'm a

00:30:06,470 --> 00:30:17,600
teapot the resulting entity may be short

00:30:10,070 --> 00:30:27,170
and stout I don't know it's there you

00:30:17,600 --> 00:30:28,970
can use it okay so in summary we've got

00:30:27,170 --> 00:30:30,890
a few problems and we're very good at

00:30:28,970 --> 00:30:33,950
introducing more of these problems every

00:30:30,890 --> 00:30:36,140
day we design the lazy application we've

00:30:33,950 --> 00:30:37,340
got missing or relocated resources we

00:30:36,140 --> 00:30:40,450
have a problem with readability and

00:30:37,340 --> 00:30:42,710
clutter like our friends over at amazon

00:30:40,450 --> 00:30:46,040
we then have a problem where we need to

00:30:42,710 --> 00:30:47,900
format and keep this information you

00:30:46,040 --> 00:30:50,270
know viable for both humans and

00:30:47,900 --> 00:30:52,190
computers there's the whole gap there

00:30:50,270 --> 00:30:53,930
and then we have the problem of

00:30:52,190 --> 00:30:55,070
revealing sensitive information deciding

00:30:53,930 --> 00:30:57,200
what we want people to actually be able

00:30:55,070 --> 00:30:59,210
to see and put input into and then

00:30:57,200 --> 00:31:03,400
validating that so that we can

00:30:59,210 --> 00:31:05,690
potentially secure the attack vectors so

00:31:03,400 --> 00:31:10,340
URL rewriting can help with this right

00:31:05,690 --> 00:31:12,440
we can filter inbound URLs we can filter

00:31:10,340 --> 00:31:13,730
headers we can modify the response to

00:31:12,440 --> 00:31:15,880
remove sensitive information on the way

00:31:13,730 --> 00:31:18,350
out we can do all that kind of stuff and

00:31:15,880 --> 00:31:20,780
there are two primary types of URL

00:31:18,350 --> 00:31:23,030
rewriting tools the first our proxy

00:31:20,780 --> 00:31:25,910
based where you're running some other

00:31:23,030 --> 00:31:30,140
server in front of your application the

00:31:25,910 --> 00:31:33,340
most common of these is apache mod

00:31:30,140 --> 00:31:35,930
rewrite I actually went to a talk on

00:31:33,340 --> 00:31:37,460
varnish yesterday which was interesting

00:31:35,930 --> 00:31:39,680
because that's another proxy based tool

00:31:37,460 --> 00:31:41,690
that is doing its own form of URL

00:31:39,680 --> 00:31:43,610
rewriting it can actually modify the

00:31:41,690 --> 00:31:44,840
header it can modify the request going

00:31:43,610 --> 00:31:49,400
in and out of the server a lot good

00:31:44,840 --> 00:31:52,790
stuff and it also provides a nice little

00:31:49,400 --> 00:31:54,380
caching mechanism which is really

00:31:52,790 --> 00:31:55,370
actually it would look pretty sweet but

00:31:54,380 --> 00:31:58,770
that's an aside

00:31:55,370 --> 00:32:01,860
so the other is our filter based or

00:31:58,770 --> 00:32:03,480
application based solutions and these

00:32:01,860 --> 00:32:05,880
are the solutions that actually run in

00:32:03,480 --> 00:32:08,580
the application that you are doing your

00:32:05,880 --> 00:32:10,350
I'll be writing for they are things that

00:32:08,580 --> 00:32:11,730
well we'll talk about what you should

00:32:10,350 --> 00:32:14,400
and shouldn't do in each one in just a

00:32:11,730 --> 00:32:18,030
second there are basic things that we

00:32:14,400 --> 00:32:20,090
can do with all types though and these

00:32:18,030 --> 00:32:24,630
are things like redirection and

00:32:20,090 --> 00:32:26,880
relocation right so we can say we want

00:32:24,630 --> 00:32:28,170
to go somewhere on we hit a URL and we

00:32:26,880 --> 00:32:31,020
want to go send the user to somewhere

00:32:28,170 --> 00:32:36,720
else that's a redirection and that's

00:32:31,020 --> 00:32:38,610
pretty common knowledge I would say the

00:32:36,720 --> 00:32:39,570
next thing we can do which is also

00:32:38,610 --> 00:32:43,110
pretty common is inbound

00:32:39,570 --> 00:32:45,480
parameterisation so we have an address

00:32:43,110 --> 00:32:47,070
for an application that has a bunch of

00:32:45,480 --> 00:32:48,360
query parameters on the end we can

00:32:47,070 --> 00:32:50,370
actually move those query parameters

00:32:48,360 --> 00:32:53,360
into the path of the URL so that they're

00:32:50,370 --> 00:32:56,130
structured we read from left to right

00:32:53,360 --> 00:32:58,800
generally as an english-speaking society

00:32:56,130 --> 00:33:01,830
so we can put this information in a

00:32:58,800 --> 00:33:04,290
left-to-right order for our users query

00:33:01,830 --> 00:33:06,030
parameters are by specification

00:33:04,290 --> 00:33:08,400
unordered they can arrive in any

00:33:06,030 --> 00:33:09,660
direction any order so we can help

00:33:08,400 --> 00:33:11,250
address the usability problem by

00:33:09,660 --> 00:33:15,990
ordering things and putting them in the

00:33:11,250 --> 00:33:20,340
path if they're applicable we can do URL

00:33:15,990 --> 00:33:22,350
validation where we cleanse the URL as I

00:33:20,340 --> 00:33:24,570
showed you with the bad things filter we

00:33:22,350 --> 00:33:26,910
can start sanitizing things and

00:33:24,570 --> 00:33:28,200
monitoring what's going on which is a

00:33:26,910 --> 00:33:31,860
little harder to do with mod rewrite

00:33:28,200 --> 00:33:34,770
just because you know it's all you're

00:33:31,860 --> 00:33:36,870
shaking your head okay I'm right okay

00:33:34,770 --> 00:33:39,480
good I thought I missed something for a

00:33:36,870 --> 00:33:41,490
second yeah I mean mod rewrite is pretty

00:33:39,480 --> 00:33:43,020
much a lot of regular expressions and I

00:33:41,490 --> 00:33:47,910
think without plugins it'd be pretty

00:33:43,020 --> 00:33:50,700
hard to set up a black list or a white

00:33:47,910 --> 00:33:52,980
list to be effective and still let your

00:33:50,700 --> 00:33:54,750
application function it can be done I'm

00:33:52,980 --> 00:33:55,980
sure but it'd be probably hard then you

00:33:54,750 --> 00:33:57,900
have like header modification and

00:33:55,980 --> 00:34:00,050
validation of the headers like I

00:33:57,900 --> 00:34:03,270
mentioned also in the bad things example

00:34:00,050 --> 00:34:04,440
so i would just like to say i have no

00:34:03,270 --> 00:34:07,230
personal investment in any of these

00:34:04,440 --> 00:34:08,829
tools as you know that is a lie but i

00:34:07,230 --> 00:34:10,690
wouldn't be giving this talk if I'd

00:34:08,829 --> 00:34:14,950
have some kind of investment so please

00:34:10,690 --> 00:34:16,899
forgive me for any personal bias there

00:34:14,950 --> 00:34:20,259
are some cool things that we can do with

00:34:16,899 --> 00:34:21,700
java based tools or the application

00:34:20,259 --> 00:34:22,749
based tools in this case i'm going to be

00:34:21,700 --> 00:34:26,259
showing you java because that's what i

00:34:22,749 --> 00:34:27,669
work with again i apologize i think java

00:34:26,259 --> 00:34:29,679
is really cool i happen to be probably

00:34:27,669 --> 00:34:34,149
one of the few people who does but i

00:34:29,679 --> 00:34:37,539
like it you can do a lot of really neat

00:34:34,149 --> 00:34:39,309
stuff with java so you can do things

00:34:37,539 --> 00:34:42,159
like transformation and canonicalization

00:34:39,309 --> 00:34:44,499
this is another application of a basic

00:34:42,159 --> 00:34:46,179
URL rewriting strategy which is just

00:34:44,499 --> 00:34:47,559
changing the address and sending and

00:34:46,179 --> 00:34:53,679
redirecting them somewhere but in this

00:34:47,559 --> 00:34:57,459
case we can actually do something cool

00:34:53,679 --> 00:35:01,930
we can say when the inbound path matches

00:34:57,459 --> 00:35:05,410
something dot CSS we can actually do a

00:35:01,930 --> 00:35:08,249
forward which is an internal redirect so

00:35:05,410 --> 00:35:10,509
the client browser is never updated and

00:35:08,249 --> 00:35:12,759
we can forward it to an a different

00:35:10,509 --> 00:35:17,380
resource like say less how many people

00:35:12,759 --> 00:35:21,999
here are familiar with less or SAS it's

00:35:17,380 --> 00:35:24,039
basically a templating language for CSS

00:35:21,999 --> 00:35:27,279
it's a higher level construct for

00:35:24,039 --> 00:35:29,349
building CSS so that you don't have to

00:35:27,279 --> 00:35:30,869
repeat things like your color definition

00:35:29,349 --> 00:35:38,259
right how many times you have to put

00:35:30,869 --> 00:35:40,390
pound f a to be 3d into your style sheet

00:35:38,259 --> 00:35:41,769
and remember which color means what

00:35:40,390 --> 00:35:43,029
right you can define variables you can

00:35:41,769 --> 00:35:45,069
assign things to them it basically turns

00:35:43,029 --> 00:35:49,630
CSS into a programming programming

00:35:45,069 --> 00:35:51,190
language which is useful so we can

00:35:49,630 --> 00:35:52,690
forward them to that less resource and

00:35:51,190 --> 00:35:54,369
then have our server sort of dynamically

00:35:52,690 --> 00:35:56,079
compile and cash that thing so that it

00:35:54,369 --> 00:35:57,969
gets sent out a CSS now we don't have to

00:35:56,079 --> 00:35:59,529
worry about an extra build step in our

00:35:57,969 --> 00:36:01,869
application we don't have to compile the

00:35:59,529 --> 00:36:03,759
style sheets we just deploy it the

00:36:01,869 --> 00:36:05,890
request comes in for a CSS file the

00:36:03,759 --> 00:36:07,900
application says hey I know what that is

00:36:05,890 --> 00:36:11,229
I'm going to compile that for you cash

00:36:07,900 --> 00:36:15,569
it and serve it up so that's one option

00:36:11,229 --> 00:36:15,569
right the other is

00:36:16,170 --> 00:36:21,890
let's say we know that everything coming

00:36:19,680 --> 00:36:25,710
in as an address needs to be lower cased

00:36:21,890 --> 00:36:27,809
well we can take an inbound request say

00:36:25,710 --> 00:36:29,640
if there are any uppercase characters we

00:36:27,809 --> 00:36:32,069
can just drop them down do a redirect

00:36:29,640 --> 00:36:35,099
and make sure the person got what they

00:36:32,069 --> 00:36:39,150
still wanted to go to you could argue

00:36:35,099 --> 00:36:42,299
that this is sort of adding multiple

00:36:39,150 --> 00:36:43,950
inputs or multiple entry points to the

00:36:42,299 --> 00:36:45,059
application because now you have more

00:36:43,950 --> 00:36:47,069
than one place where you can actually

00:36:45,059 --> 00:36:51,020
access information but because you're

00:36:47,069 --> 00:36:53,640
going to be doing a redirect you can

00:36:51,020 --> 00:36:55,589
basically say no we still have this one

00:36:53,640 --> 00:37:01,440
entry point this is what you meant fix

00:36:55,589 --> 00:37:02,940
your links so then we have complex

00:37:01,440 --> 00:37:04,799
conversion and validation and this gets

00:37:02,940 --> 00:37:06,720
to things where you probably really

00:37:04,799 --> 00:37:08,190
wouldn't associate them with a URL

00:37:06,720 --> 00:37:12,359
rewriting tool in the traditional sense

00:37:08,190 --> 00:37:15,329
this is very application-specific this

00:37:12,359 --> 00:37:17,220
is something where you're now basically

00:37:15,329 --> 00:37:19,349
introducing an aspect it's a little bit

00:37:17,220 --> 00:37:20,640
like aspect-oriented programming so you

00:37:19,349 --> 00:37:22,950
have this functionality in an

00:37:20,640 --> 00:37:24,540
application and you have a couple ways

00:37:22,950 --> 00:37:27,780
where you know information is going to

00:37:24,540 --> 00:37:30,780
be coming from the URL into the

00:37:27,780 --> 00:37:35,309
application so for the instance we you

00:37:30,780 --> 00:37:38,970
have a store here we can say if we have

00:37:35,309 --> 00:37:40,859
a product with a product ID where the

00:37:38,970 --> 00:37:45,329
product eating matches some you know

00:37:40,859 --> 00:37:47,730
allowed value then we can bind that to a

00:37:45,329 --> 00:37:49,200
property in the application so a product

00:37:47,730 --> 00:37:51,180
bean beans with these lovely little

00:37:49,200 --> 00:37:54,839
storage containers in Java and they

00:37:51,180 --> 00:37:57,990
taste good then we can convert that text

00:37:54,839 --> 00:38:00,260
product ID with the converter which

00:37:57,990 --> 00:38:03,720
could do say like a database lookup and

00:38:00,260 --> 00:38:06,150
try to find a product that exists we can

00:38:03,720 --> 00:38:07,740
then validate the data that comes out

00:38:06,150 --> 00:38:09,089
actually I think these two are switched

00:38:07,740 --> 00:38:14,520
we probably want to validate before we

00:38:09,089 --> 00:38:15,540
convert but now we have a project object

00:38:14,520 --> 00:38:17,900
that's getting injected into the

00:38:15,540 --> 00:38:20,849
application and we don't have to do that

00:38:17,900 --> 00:38:23,190
look up in the actual business logic

00:38:20,849 --> 00:38:24,540
code we've sort of extracted it out now

00:38:23,190 --> 00:38:27,030
it's in this higher level that applies

00:38:24,540 --> 00:38:28,349
to say a number of pages you could you

00:38:27,030 --> 00:38:29,729
know use the same rule and

00:38:28,349 --> 00:38:33,989
few more passes that would match to it

00:38:29,729 --> 00:38:35,579
and you just have this ability to reduce

00:38:33,989 --> 00:38:37,979
the potential amount of code that you'd

00:38:35,579 --> 00:38:41,749
have to do on each page that's just a

00:38:37,979 --> 00:38:45,059
very application specific strategy and I

00:38:41,749 --> 00:38:47,910
don't recommend or not recommend doing

00:38:45,059 --> 00:38:49,349
this it's just something you can do when

00:38:47,910 --> 00:38:53,640
you have URL rewriting in the

00:38:49,349 --> 00:38:59,249
application itself an interesting thing

00:38:53,640 --> 00:39:02,940
that I stumbled upon an interesting

00:38:59,249 --> 00:39:07,259
usability case how many of you guys and

00:39:02,940 --> 00:39:09,960
girls have used like a single sign-on

00:39:07,259 --> 00:39:11,759
from google for some third-party product

00:39:09,960 --> 00:39:15,479
where you go to that website and says

00:39:11,759 --> 00:39:19,170
hey log in with google we've seen it

00:39:15,479 --> 00:39:25,769
okay and you guys you've used it you've

00:39:19,170 --> 00:39:29,729
implemented it so open ID exactly open

00:39:25,769 --> 00:39:33,450
ID o auth that kind of stuff so you get

00:39:29,729 --> 00:39:37,529
this yeah facebook who created their own

00:39:33,450 --> 00:39:39,690
specification lovely you get the

00:39:37,529 --> 00:39:42,509
situation where you have a user who has

00:39:39,690 --> 00:39:44,539
gone to a third party website and you

00:39:42,509 --> 00:39:46,589
have access to their email address

00:39:44,539 --> 00:39:50,729
that's all that they give you permission

00:39:46,589 --> 00:39:54,869
for and maybe their name they're they're

00:39:50,729 --> 00:40:00,180
like human name not their handle or

00:39:54,869 --> 00:40:01,499
their call signer whatever so we

00:40:00,180 --> 00:40:04,289
actually want their handler their call

00:40:01,499 --> 00:40:06,930
sign because we want them to have the

00:40:04,289 --> 00:40:09,749
ability to be anonymous we need to be

00:40:06,930 --> 00:40:11,969
able to call them something so what

00:40:09,749 --> 00:40:16,349
happens is we they come to our website

00:40:11,969 --> 00:40:17,700
and we say log in with google they click

00:40:16,349 --> 00:40:20,489
log in with google they go to Google

00:40:17,700 --> 00:40:24,479
they type their credentials Google sends

00:40:20,489 --> 00:40:26,940
them back with the authentication tokens

00:40:24,479 --> 00:40:28,650
to our website which handles it and says

00:40:26,940 --> 00:40:30,900
okay now we have their name in their

00:40:28,650 --> 00:40:33,329
email address so we're partially

00:40:30,900 --> 00:40:34,650
authenticated or we have a successful

00:40:33,329 --> 00:40:36,930
authentication but we still don't know

00:40:34,650 --> 00:40:41,249
who they are we want another call sign

00:40:36,930 --> 00:40:42,119
so what do we do well they can't really

00:40:41,249 --> 00:40:43,410
start posting

00:40:42,119 --> 00:40:44,759
things on a website yet they can't

00:40:43,410 --> 00:40:46,950
really start accessing things yet

00:40:44,759 --> 00:40:48,059
because we don't know what to show on

00:40:46,950 --> 00:40:49,319
the web site when they post something

00:40:48,059 --> 00:40:50,400
because we don't wanna show their name

00:40:49,319 --> 00:40:53,970
or their email address we want sure

00:40:50,400 --> 00:40:57,359
their call sign so we can intercept this

00:40:53,970 --> 00:40:59,970
situation and say we got a response back

00:40:57,359 --> 00:41:01,980
there technically logged in but they

00:40:59,970 --> 00:41:04,589
don't have a confirmed username so

00:41:01,980 --> 00:41:06,089
intercept any of these situations on any

00:41:04,589 --> 00:41:08,549
of our pages and send them to the

00:41:06,089 --> 00:41:10,349
account confirmation page where they're

00:41:08,549 --> 00:41:12,690
going to have to say where we say to

00:41:10,349 --> 00:41:15,779
them hey what's your call sign before

00:41:12,690 --> 00:41:16,980
you continue you need to do this they

00:41:15,779 --> 00:41:19,160
type in their call sign the hit enter

00:41:16,980 --> 00:41:22,740
and then they go back to where they were

00:41:19,160 --> 00:41:25,079
intending to go that's request

00:41:22,740 --> 00:41:26,880
interception which is something that is

00:41:25,079 --> 00:41:28,460
very difficult to do in a proxy based

00:41:26,880 --> 00:41:30,480
solution because you don't know

00:41:28,460 --> 00:41:35,970
application specific information about

00:41:30,480 --> 00:41:37,319
that that use case so that's one of the

00:41:35,970 --> 00:41:42,210
cool things you can do with application

00:41:37,319 --> 00:41:43,289
specific you are we writing tools so

00:41:42,210 --> 00:41:47,249
there are some things that you should

00:41:43,289 --> 00:41:49,680
not do with an application based you all

00:41:47,249 --> 00:41:55,130
be writing tool who here knows what

00:41:49,680 --> 00:41:55,130
those are guesses

00:41:56,140 --> 00:42:03,910
haha should never use one at all that's

00:41:58,660 --> 00:42:09,190
not the answer I was looking for but it

00:42:03,910 --> 00:42:11,770
is an answer thank you so if you're

00:42:09,190 --> 00:42:13,690
doing something like notifying your

00:42:11,770 --> 00:42:15,480
users of downtime or telling them that

00:42:13,690 --> 00:42:18,730
your site will be back up in two hours

00:42:15,480 --> 00:42:20,620
when it's down you probably don't want

00:42:18,730 --> 00:42:22,150
the code that's going to be showing them

00:42:20,620 --> 00:42:23,350
when the application is down and that

00:42:22,150 --> 00:42:24,460
they should come back in two hours in

00:42:23,350 --> 00:42:26,890
the actual application because it's

00:42:24,460 --> 00:42:28,750
going to be down so that's when you

00:42:26,890 --> 00:42:30,160
would use a proxy based solution to show

00:42:28,750 --> 00:42:32,710
them a page other than your website

00:42:30,160 --> 00:42:35,260
because we put that in website it's not

00:42:32,710 --> 00:42:37,990
going to be there because the website is

00:42:35,260 --> 00:42:42,960
down because you put the logic in the

00:42:37,990 --> 00:42:44,710
website and now the website yet so

00:42:42,960 --> 00:42:47,470
that's one of the things you shouldn't

00:42:44,710 --> 00:42:49,900
do if it needs if if the code needs to

00:42:47,470 --> 00:42:56,250
run while the application is not the

00:42:49,900 --> 00:43:01,630
code should not be in the application so

00:42:56,250 --> 00:43:06,780
yeah there it is again so the bonus

00:43:01,630 --> 00:43:12,720
round there's this big shift toward

00:43:06,780 --> 00:43:14,950
client-side applications and things like

00:43:12,720 --> 00:43:20,920
JavaScript everyone loves JavaScript

00:43:14,950 --> 00:43:23,200
these days and we're all using it to

00:43:20,920 --> 00:43:25,810
build highly reactive highly responsive

00:43:23,200 --> 00:43:27,760
pretty flashy applications that do lots

00:43:25,810 --> 00:43:30,040
of stuff I remember the day when you

00:43:27,760 --> 00:43:31,270
could or most people actually disabled

00:43:30,040 --> 00:43:33,280
javascript in the browser because you

00:43:31,270 --> 00:43:34,960
always they'll pop up saying JavaScript

00:43:33,280 --> 00:43:38,710
failure JavaScript failure because of

00:43:34,960 --> 00:43:42,340
Internet Explorer so those days are over

00:43:38,710 --> 00:43:47,080
and unfortunately javascript is here to

00:43:42,340 --> 00:43:49,330
stay at this point only the dialog boxes

00:43:47,080 --> 00:43:52,330
have disappeared there are still lots of

00:43:49,330 --> 00:43:56,230
failures it's right so we have this

00:43:52,330 --> 00:43:57,760
interesting situation so can't I just

00:43:56,230 --> 00:43:59,560
ignore the URL now because everything's

00:43:57,760 --> 00:44:01,330
running in the client and we don't

00:43:59,560 --> 00:44:03,760
really care about where they are where

00:44:01,330 --> 00:44:06,100
this thing is running well the answer is

00:44:03,760 --> 00:44:08,970
sort of right so take Twitter for

00:44:06,100 --> 00:44:12,540
example there was a good long time

00:44:08,970 --> 00:44:16,890
used shebang or a pound sign and an

00:44:12,540 --> 00:44:18,810
exclamation point in the address to be

00:44:16,890 --> 00:44:21,240
so that their client application could

00:44:18,810 --> 00:44:23,820
you know send people to new user names

00:44:21,240 --> 00:44:26,340
new profiles without doing a redirect in

00:44:23,820 --> 00:44:28,920
order to make things more responsive and

00:44:26,340 --> 00:44:32,550
quicker and snappier so we have twitter

00:44:28,920 --> 00:44:33,750
com / Lincoln 3 that's me and then that

00:44:32,550 --> 00:44:36,119
would that request would go into the

00:44:33,750 --> 00:44:37,680
server which would serve up Lincoln 3

00:44:36,119 --> 00:44:40,020
and then the client would change it to

00:44:37,680 --> 00:44:41,369
something like connect or discover if

00:44:40,020 --> 00:44:43,080
you wanted to see different views of

00:44:41,369 --> 00:44:44,070
your profile or other people's profiles

00:44:43,080 --> 00:44:47,430
and that kind of stuff so you never

00:44:44,070 --> 00:44:49,260
actually have to send a new browser URL

00:44:47,430 --> 00:44:52,590
request to the server it would be doing

00:44:49,260 --> 00:44:54,590
that in the background and they did that

00:44:52,590 --> 00:44:57,119
with the anchor tag which is something

00:44:54,590 --> 00:44:58,740
the anchor tag content actually never

00:44:57,119 --> 00:45:02,010
goes to the server that's something that

00:44:58,740 --> 00:45:03,480
some people sometimes forget even if

00:45:02,010 --> 00:45:05,040
it's an initial request that anchor

00:45:03,480 --> 00:45:06,420
never never mixed to the server just

00:45:05,040 --> 00:45:12,540
doesn't go through browser never sends

00:45:06,420 --> 00:45:14,970
it so we Twitter decided they wanted to

00:45:12,540 --> 00:45:21,750
clean it up and we don't see that pound

00:45:14,970 --> 00:45:24,450
sign ! in URL anymore so they used what

00:45:21,750 --> 00:45:26,099
we call html5 push state which lets you

00:45:24,450 --> 00:45:27,990
modify the browser URL in the browser

00:45:26,099 --> 00:45:31,980
without actually sending another request

00:45:27,990 --> 00:45:33,000
to the server which is why sometimes you

00:45:31,980 --> 00:45:35,040
might think maybe you can just forget

00:45:33,000 --> 00:45:43,080
about URLs now but we have this in

00:45:35,040 --> 00:45:44,910
Turing interesting situation we can have

00:45:43,080 --> 00:45:47,040
a request to the server and then the

00:45:44,910 --> 00:45:48,690
application is served from the root or

00:45:47,040 --> 00:45:51,330
maybe it's served from login or login

00:45:48,690 --> 00:45:53,130
link yeah or link in my project so we

00:45:51,330 --> 00:45:54,720
have all these different contexts where

00:45:53,130 --> 00:45:56,220
the application can be served from we

00:45:54,720 --> 00:45:58,790
have these book markable addresses you

00:45:56,220 --> 00:46:01,980
can bookmark any of those things and

00:45:58,790 --> 00:46:03,990
when that request goes to the server the

00:46:01,980 --> 00:46:05,700
server says ok here's your client code

00:46:03,990 --> 00:46:06,839
application those little gears get

00:46:05,700 --> 00:46:09,210
served up it starts running in the

00:46:06,839 --> 00:46:11,040
browser the client application inspects

00:46:09,210 --> 00:46:14,160
the URL and says okay I know where I am

00:46:11,040 --> 00:46:17,280
I know what I need to show and this is

00:46:14,160 --> 00:46:20,190
pretty straight forward until we get

00:46:17,280 --> 00:46:25,380
something like this we get

00:46:20,190 --> 00:46:27,839
example.com / Lincoln and then project

00:46:25,380 --> 00:46:30,390
one this is a discernible URL the

00:46:27,839 --> 00:46:35,400
application knows where it is but now we

00:46:30,390 --> 00:46:38,880
have this a project called Lincoln now

00:46:35,400 --> 00:46:40,589
there's question where was the client

00:46:38,880 --> 00:46:46,400
application actually served from what's

00:46:40,589 --> 00:46:48,480
the root actually before I show this

00:46:46,400 --> 00:46:51,540
there's a really easy way to solve this

00:46:48,480 --> 00:46:53,310
problem which is to hard code your

00:46:51,540 --> 00:46:56,040
application route into the client

00:46:53,310 --> 00:46:59,160
application which if you're hosting on a

00:46:56,040 --> 00:47:01,530
single website for yourself or for a

00:46:59,160 --> 00:47:03,540
customer is fine you can just hard code

00:47:01,530 --> 00:47:05,160
it but what if you're delivering a

00:47:03,540 --> 00:47:06,030
product that people are going to be

00:47:05,160 --> 00:47:09,300
hosting on their own infrastructure

00:47:06,030 --> 00:47:10,589
under their own paths now you have a

00:47:09,300 --> 00:47:14,609
situation where potentially this could

00:47:10,589 --> 00:47:18,750
occur it's variable so you can't hard

00:47:14,609 --> 00:47:20,400
coat it but you could send a response

00:47:18,750 --> 00:47:22,310
containing a cookie with the path to

00:47:20,400 --> 00:47:25,050
where the application was deployed

00:47:22,310 --> 00:47:26,490
containing the correct location and if

00:47:25,050 --> 00:47:27,900
the browser doesn't support cookies you

00:47:26,490 --> 00:47:31,319
could have the client application send

00:47:27,900 --> 00:47:34,640
an HTTP head request to ask hey where am

00:47:31,319 --> 00:47:36,510
i where should I where should I be

00:47:34,640 --> 00:47:38,849
displaying things from and then you

00:47:36,510 --> 00:47:40,650
respond with the correct information in

00:47:38,849 --> 00:47:45,270
another header or even in the content of

00:47:40,650 --> 00:47:48,770
the response so right you could just

00:47:45,270 --> 00:47:48,770
hard coat it if you have that luxury I

00:47:51,410 --> 00:47:58,200
think I missed the slide here oh okay

00:47:56,849 --> 00:48:01,440
all right we're good yeah so what just

00:47:58,200 --> 00:48:02,849
happened we did a bunch of things with

00:48:01,440 --> 00:48:04,980
URL rewriting we talked about a bunch of

00:48:02,849 --> 00:48:07,079
things so how do we use that in practice

00:48:04,980 --> 00:48:08,609
but before I do the demos do you guys

00:48:07,079 --> 00:48:10,970
have any questions on what I have said

00:48:08,609 --> 00:48:10,970
so far

00:48:11,309 --> 00:48:17,170
validation in the same step this rell

00:48:15,789 --> 00:48:20,650
rewriting because you really like to

00:48:17,170 --> 00:48:23,170
validate all heads to be the service and

00:48:20,650 --> 00:48:25,619
the ugliest path is the place where the

00:48:23,170 --> 00:48:29,380
rubber really hits the road there

00:48:25,619 --> 00:48:31,180
couldn't you have a less leaky boat by

00:48:29,380 --> 00:48:34,960
have to use the same tool but in a

00:48:31,180 --> 00:48:40,119
separate past validating the ugliest

00:48:34,960 --> 00:48:44,470
parts and rewriting to beautify the defy

00:48:40,119 --> 00:48:45,759
the pretty stuff in it comes in right so

00:48:44,470 --> 00:48:47,470
the question was shouldn't you do your

00:48:45,759 --> 00:48:49,299
validation and your profession in

00:48:47,470 --> 00:48:52,089
different steps because it'll be clearer

00:48:49,299 --> 00:48:56,829
and more secure and all that stuff is

00:48:52,089 --> 00:48:58,690
that a good summary ok so my response to

00:48:56,829 --> 00:49:00,160
that is absolutely you definitely should

00:48:58,690 --> 00:49:01,930
do them in different places and actually

00:49:00,160 --> 00:49:06,369
I think the first demo is going to show

00:49:01,930 --> 00:49:08,799
that so I I wanted to let you guys

00:49:06,369 --> 00:49:10,960
actually use this to view these demos

00:49:08,799 --> 00:49:12,309
live on the cloud but open shift has

00:49:10,960 --> 00:49:17,109
been doing some maintenance and these

00:49:12,309 --> 00:49:19,150
demos are down at the moment but yeah I

00:49:17,109 --> 00:49:22,539
had a particular problem i had a

00:49:19,150 --> 00:49:24,279
personal problem with their migration I

00:49:22,539 --> 00:49:28,089
did something custom for this app in it

00:49:24,279 --> 00:49:32,579
it went down but the other ones actually

00:49:28,089 --> 00:49:39,130
often I can show that so I want to go to

00:49:32,579 --> 00:49:40,239
the local access demo and I'm going to

00:49:39,130 --> 00:49:43,150
get out of full screen so you can see

00:49:40,239 --> 00:49:45,249
the address bar so this is an example of

00:49:43,150 --> 00:49:48,190
doing access control with a URL

00:49:45,249 --> 00:49:52,450
rewriting framework so I have a time

00:49:48,190 --> 00:49:57,390
based access control where we have the

00:49:52,450 --> 00:49:57,390
page refreshing every second and the

00:49:57,989 --> 00:50:01,839
application is deciding that you can

00:50:00,009 --> 00:50:04,509
only access this within the first 30

00:50:01,839 --> 00:50:05,890
seconds of the minute the second 30

00:50:04,509 --> 00:50:09,880
seconds of the minute the application is

00:50:05,890 --> 00:50:13,650
inaccessible again like I said before

00:50:09,880 --> 00:50:16,599
usually when you're showing downtime or

00:50:13,650 --> 00:50:18,309
things or times when the application is

00:50:16,599 --> 00:50:20,650
not going to be able you want to do that

00:50:18,309 --> 00:50:22,510
in a proxy based solution but this is

00:50:20,650 --> 00:50:28,480
just an example showing that you can

00:50:22,510 --> 00:50:30,910
this the next is domain based access

00:50:28,480 --> 00:50:33,430
control so we can have a single

00:50:30,910 --> 00:50:35,500
application that is determining where

00:50:33,430 --> 00:50:38,920
the request is coming from intended to

00:50:35,500 --> 00:50:42,250
be going to so if we change the domain

00:50:38,920 --> 00:50:44,470
of our URL we can control who gets to

00:50:42,250 --> 00:50:48,130
see that so when I access this from

00:50:44,470 --> 00:50:55,800
localhost we have the page we have

00:50:48,130 --> 00:51:02,610
access but when I access it from oops no

00:50:55,800 --> 00:51:06,490
from localhost we don't have access and

00:51:02,610 --> 00:51:07,990
this is something that is more common

00:51:06,490 --> 00:51:12,060
because a lot of times you want to have

00:51:07,990 --> 00:51:15,070
say a custom domain for each client or

00:51:12,060 --> 00:51:16,810
different subdomains of the same product

00:51:15,070 --> 00:51:19,840
like stackoverflow has all these

00:51:16,810 --> 00:51:23,350
different instances of stack overflow

00:51:19,840 --> 00:51:27,520
with different different domains they

00:51:23,350 --> 00:51:29,170
probably they may actually have separate

00:51:27,520 --> 00:51:30,880
server farms for each one but it could

00:51:29,170 --> 00:51:32,230
be likely that they have one server farm

00:51:30,880 --> 00:51:36,550
and one application running for all of

00:51:32,230 --> 00:51:40,290
these different things so let's just

00:51:36,550 --> 00:51:40,290
quickly see how we did that

00:51:43,510 --> 00:51:47,620
we have our access free right

00:51:45,220 --> 00:51:51,100
configuration where we're doing some

00:51:47,620 --> 00:51:56,380
participation we're joining a path to an

00:51:51,100 --> 00:52:01,810
internal resource and then we are doing

00:51:56,380 --> 00:52:06,430
our timer work down here so if the

00:52:01,810 --> 00:52:08,440
request is inbound and yeah this not

00:52:06,430 --> 00:52:12,010
important and we're viewing the timer

00:52:08,440 --> 00:52:14,290
page then we check to see if the time

00:52:12,010 --> 00:52:18,040
has or has not been granted if it has

00:52:14,290 --> 00:52:21,750
been granted then we just say okay we're

00:52:18,040 --> 00:52:21,750
done that's cool show the page and

00:52:24,660 --> 00:52:32,260
otherwise where's the otherwise yeah

00:52:31,030 --> 00:52:33,790
okay so all that we have a catch-all

00:52:32,260 --> 00:52:37,450
condition down here saying if nothing

00:52:33,790 --> 00:52:39,430
else handled this inbound request then

00:52:37,450 --> 00:52:43,780
we're going to show the access denied

00:52:39,430 --> 00:52:46,570
page so that's just a very simple

00:52:43,780 --> 00:52:50,470
example the next thing that I wanted to

00:52:46,570 --> 00:52:53,020
show you is bad things right so let's go

00:52:50,470 --> 00:52:56,590
back to the root of this demo we have

00:52:53,020 --> 00:52:59,800
this welcome page here what happens if I

00:52:56,590 --> 00:53:02,920
try to start hacking alright I start

00:52:59,800 --> 00:53:07,510
posting things with query parameters and

00:53:02,920 --> 00:53:10,030
now I start getting ugly I've detected

00:53:07,510 --> 00:53:11,740
bad things coming in and I've been able

00:53:10,030 --> 00:53:14,410
to handle this and respond to it

00:53:11,740 --> 00:53:19,230
appropriately this as you suggested has

00:53:14,410 --> 00:53:24,360
been done in a separate configuration

00:53:19,230 --> 00:53:24,360
with a simple rule with our bad things

00:53:25,770 --> 00:53:29,330
any questions about this

00:53:34,020 --> 00:53:39,710
the next thing I'd like to show which is

00:53:37,410 --> 00:53:42,150
one of my personal favorites is the

00:53:39,710 --> 00:53:50,910
Amazon example so taking all of that

00:53:42,150 --> 00:53:55,170
lovely amazon information and turning it

00:53:50,910 --> 00:53:59,580
into something that we know we don't

00:53:55,170 --> 00:54:03,960
care about okay so they've cleaned up a

00:53:59,580 --> 00:54:07,350
little bit i'll just do an example so we

00:54:03,960 --> 00:54:09,870
go to our composite query parameter demo

00:54:07,350 --> 00:54:11,790
and this demo is basically going to say

00:54:09,870 --> 00:54:14,730
anything that we get as a query

00:54:11,790 --> 00:54:17,070
parameter is going to be encoded and

00:54:14,730 --> 00:54:21,420
compressed into one parameter that our

00:54:17,070 --> 00:54:25,500
users will not be able to read so what

00:54:21,420 --> 00:54:28,310
should my query parameters say what

00:54:25,500 --> 00:54:28,310
would you like me to put in here

00:54:32,150 --> 00:54:42,530
first thing that comes off top of your

00:54:33,990 --> 00:54:42,530
head app name equals location what else

00:54:44,000 --> 00:54:55,590
admin equals 1 okay and Lincoln is cool

00:54:52,910 --> 00:54:58,140
not that anyone here is an admin all

00:54:55,590 --> 00:54:59,910
right so I'm going to submit this i'm

00:54:58,140 --> 00:55:02,280
going to send a get request to my server

00:54:59,910 --> 00:55:06,180
and the server is going to respond with

00:55:02,280 --> 00:55:14,370
a redirect and that redirect sent me to

00:55:06,180 --> 00:55:16,560
a nice long ugly thing but it's very

00:55:14,370 --> 00:55:19,500
clear that I is a person I'm not meant

00:55:16,560 --> 00:55:21,900
to understand this so we have

00:55:19,500 --> 00:55:23,490
verification down here at the bottom in

00:55:21,900 --> 00:55:25,290
the page saying okay well we know we

00:55:23,490 --> 00:55:27,480
have our admin parameter Lincoln is

00:55:25,290 --> 00:55:29,730
still cool and then our app name

00:55:27,480 --> 00:55:31,350
location so we have all the information

00:55:29,730 --> 00:55:34,650
the computer can still comprehend this

00:55:31,350 --> 00:55:39,570
but we don't the other interesting

00:55:34,650 --> 00:55:43,130
application of this is when you're doing

00:55:39,570 --> 00:55:45,720
encryption or encoding you can start to

00:55:43,130 --> 00:55:48,750
really tell when people are messing with

00:55:45,720 --> 00:55:54,510
you so if I just change one thing here

00:55:48,750 --> 00:55:56,760
I'm going to add a 7 and submit that we

00:55:54,510 --> 00:56:01,290
know that our query string has been

00:55:56,760 --> 00:56:03,330
modified we're no longer in a secure

00:56:01,290 --> 00:56:08,580
situation and we can start dealing with

00:56:03,330 --> 00:56:10,080
it again and I know a lot of companies

00:56:08,580 --> 00:56:13,080
use web services and all that kind of

00:56:10,080 --> 00:56:15,000
stuff to transfer data back and forth

00:56:13,080 --> 00:56:16,650
and if they're if they're actually not

00:56:15,000 --> 00:56:17,340
able to transfer the user session

00:56:16,650 --> 00:56:18,690
because they're going between

00:56:17,340 --> 00:56:20,280
technologies they'll end up sending

00:56:18,690 --> 00:56:23,400
these URLs with a bunch of information

00:56:20,280 --> 00:56:25,590
in them to get the person over to the

00:56:23,400 --> 00:56:27,060
other application so if you ever need to

00:56:25,590 --> 00:56:29,280
send someone to another application and

00:56:27,060 --> 00:56:33,530
you're sending them there with a

00:56:29,280 --> 00:56:35,910
redirect please encrypt and encode that

00:56:33,530 --> 00:56:37,920
redirect you can you can accept this

00:56:35,910 --> 00:56:39,000
parameter this big long ugly query

00:56:37,920 --> 00:56:43,450
string and then just immediately

00:56:39,000 --> 00:56:46,100
redirect away from it and hide it but

00:56:43,450 --> 00:56:47,630
make sure you do that step because

00:56:46,100 --> 00:56:55,430
otherwise you're sending plain text and

00:56:47,630 --> 00:57:02,450
you can start exposing bad things it's

00:56:55,430 --> 00:57:04,310
it's not hidden but it's right but if

00:57:02,450 --> 00:57:09,790
it's encrypted then in theory you should

00:57:04,310 --> 00:57:12,080
have a more secure situation so that his

00:57:09,790 --> 00:57:13,580
statement was it would still be in all

00:57:12,080 --> 00:57:15,230
the proxy logs yes it's still out there

00:57:13,580 --> 00:57:17,120
it's still potentially vulnerable but it

00:57:15,230 --> 00:57:18,260
is less vulnerable and security is all

00:57:17,120 --> 00:57:22,930
about making things less vulnerable

00:57:18,260 --> 00:57:25,160
because there is no invulnerable so

00:57:22,930 --> 00:57:30,320
those are just the two demos I wanted to

00:57:25,160 --> 00:57:34,270
show you guys and to sum up we've got

00:57:30,320 --> 00:57:37,040
problems right we have missing and

00:57:34,270 --> 00:57:39,590
relocated resources we have things that

00:57:37,040 --> 00:57:41,540
are no longer there or we're never there

00:57:39,590 --> 00:57:43,880
that just constantly pop up and give us

00:57:41,540 --> 00:57:52,070
grief we have this readability and

00:57:43,880 --> 00:57:53,510
clutter problem and we have the

00:57:52,070 --> 00:57:54,950
situation where we need to format this

00:57:53,510 --> 00:57:57,440
information so that humans can

00:57:54,950 --> 00:57:58,790
understand it and computers can

00:57:57,440 --> 00:58:02,420
comprehend it but they don't get

00:57:58,790 --> 00:58:04,460
confused with each other then taking

00:58:02,420 --> 00:58:07,250
that information and making sure that

00:58:04,460 --> 00:58:09,440
while we can still comprehend it we are

00:58:07,250 --> 00:58:12,320
not just blindly accepting it because

00:58:09,440 --> 00:58:15,710
the URL headers anything that comes in

00:58:12,320 --> 00:58:18,800
from the client is an attack vector so

00:58:15,710 --> 00:58:20,150
validate it and there are many other

00:58:18,800 --> 00:58:22,430
problems that we didn't talk about today

00:58:20,150 --> 00:58:25,250
but these are a small subset that I find

00:58:22,430 --> 00:58:29,270
particularly interesting

00:58:25,250 --> 00:58:31,730
so URL rewriting is not a good choice

00:58:29,270 --> 00:58:34,010
for doing it wrong please consider

00:58:31,730 --> 00:58:35,870
making your applications more secure and

00:58:34,010 --> 00:58:41,390
more humanely readable and not like

00:58:35,870 --> 00:58:42,440
YouTube so is this the end hopefully

00:58:41,390 --> 00:58:45,860
it's the beginning of your adventure

00:58:42,440 --> 00:58:47,630
with you I'll be writing I'm sure many

00:58:45,860 --> 00:58:50,000
of you are already on your journey so

00:58:47,630 --> 00:58:51,460
thank you for coming and please if

00:58:50,000 --> 00:58:55,100
you're interested in anything that I

00:58:51,460 --> 00:58:56,960
spoke about today visit my website check

00:58:55,100 --> 00:59:02,060
out ICP soft rewrite which is my

00:58:56,960 --> 00:59:06,550
personal creation and let me know what

00:59:02,060 --> 00:59:06,550
you think questions

00:59:16,210 --> 00:59:25,069
I don't have any research for that I

00:59:22,220 --> 00:59:26,359
would say that if your users don't look

00:59:25,069 --> 00:59:41,599
at the URL anyways then it doesn't

00:59:26,359 --> 00:59:43,789
matter right so the question was does it

00:59:41,599 --> 00:59:45,589
really matter if you have a pretty URL

00:59:43,789 --> 00:59:48,020
if your users don't care and answer is

00:59:45,589 --> 00:59:48,859
no probably doesn't but you still need

00:59:48,020 --> 00:59:52,760
to be concerned about the security

00:59:48,859 --> 00:59:54,319
aspect and that gets back to our lovely

00:59:52,760 --> 00:59:56,450
well I'm not going to go away back there

00:59:54,319 --> 00:59:58,880
the kindle problem right you've got all

00:59:56,450 --> 01:00:07,369
the stuff that's exposed and you can

00:59:58,880 --> 01:00:16,099
clean it up right they will care about

01:00:07,369 --> 01:00:18,279
security so any other questions thanks

01:00:16,099 --> 01:00:18,279
for coming

01:00:52,430 --> 01:00:57,440
most enterprises today realize that

01:00:55,160 --> 01:00:59,090
usernames and passwords alone aren't

01:00:57,440 --> 01:01:01,460
enough to keep their network safe from

01:00:59,090 --> 01:01:03,530
unauthorized intrusions that's my

01:01:01,460 --> 01:01:05,570
two-factor authentication has gotten so

01:01:03,530 --> 01:01:07,700
popular lately that adds that extra

01:01:05,570 --> 01:01:10,370
layer of protection enterprise networks

01:01:07,700 --> 01:01:12,140
need to stay safe but what you may not

01:01:10,370 --> 01:01:14,330
know is that some two-factor

01:01:12,140 --> 01:01:16,550
authentication solutions they're better

01:01:14,330 --> 01:01:19,580
than others like two-factor strong

01:01:16,550 --> 01:01:21,860
authentication with wicked wicked goes

01:01:19,580 --> 01:01:23,840
beyond other authentication systems by

01:01:21,860 --> 01:01:26,900
being less expensive easier to implement

01:01:23,840 --> 01:01:29,360
and easier to use giving software-based

01:01:26,900 --> 01:01:32,210
token clients built to run on all major

01:01:29,360 --> 01:01:34,810
devices and OSS including iOS and

01:01:32,210 --> 01:01:37,160
Android these tokens utilize a

01:01:34,810 --> 01:01:39,380
public/private key combination that's

01:01:37,160 --> 01:01:41,510
generated and on device so there aren't

01:01:39,380 --> 01:01:44,030
any shared secrets flying around for

01:01:41,510 --> 01:01:46,880
attackers to hijack or which require any

01:01:44,030 --> 01:01:48,740
special handling instead all keys are

01:01:46,880 --> 01:01:51,230
kept secure and private between the

01:01:48,740 --> 01:01:53,420
requesting token and your server which

01:01:51,230 --> 01:01:55,030
you control aim house making it the most

01:01:53,420 --> 01:01:57,710
secure way possible to perform

01:01:55,030 --> 01:02:00,500
authentication encryption and with an

01:01:57,710 --> 01:02:03,290
extensive flexible API and support for

01:02:00,500 --> 01:02:05,270
protocols like ldap and radius wicket

01:02:03,290 --> 01:02:07,730
works with any enterprise network

01:02:05,270 --> 01:02:10,400
architecture to protect the IT systems

01:02:07,730 --> 01:02:12,890
vital to your enterprise download your

01:02:10,400 --> 01:02:14,390
wicked free trial today regardless of

01:02:12,890 --> 01:02:16,460
whether you're considering two-factor

01:02:14,390 --> 01:02:18,230
authentication for the first time or

01:02:16,460 --> 01:02:20,870
just ready to ditch your existing

01:02:18,230 --> 01:02:22,990
expensive key file system we can help

01:02:20,870 --> 01:02:27,900
with easy to implement these

01:02:22,990 --> 01:02:27,900
use strong authentication from wicked

01:02:32,530 --> 01:02:39,010
how's that sigh every way this is the

01:02:35,680 --> 01:02:41,170
way to better utilize all your resources

01:02:39,010 --> 01:02:44,620
and it makes managing all your resources

01:02:41,170 --> 01:02:48,450
pretty easy all of the innovation is

01:02:44,620 --> 01:02:51,970
happening in open source the

01:02:48,450 --> 01:02:53,770
collaborative nature and of the you know

01:02:51,970 --> 01:02:55,870
of the community and the speed at which

01:02:53,770 --> 01:02:57,880
these are these you know these these

01:02:55,870 --> 01:03:00,190
deficiencies these bugs are getting

01:02:57,880 --> 01:03:02,770
discovered and then fixed is it like

01:03:00,190 --> 01:03:05,470
that really shows the power of the you

01:03:02,770 --> 01:03:07,120
know of the open source community it is

01:03:05,470 --> 01:03:11,320
global and it's definitely because of

01:03:07,120 --> 01:03:17,650
the users community people are extremely

01:03:11,320 --> 01:03:19,540
friendly and always ready to help if you

01:03:17,650 --> 01:03:21,820
go on tire see any day you'll see these

01:03:19,540 --> 01:03:23,550
guys helping each other out and they're

01:03:21,820 --> 01:03:26,260
all doing it like in a selfless manner

01:03:23,550 --> 01:03:29,250
the product is transparent for everyone

01:03:26,260 --> 01:03:31,900
everyone can look at the code base

01:03:29,250 --> 01:03:33,910
everyone can see how growth dark is

01:03:31,900 --> 01:03:39,790
being built nothing nothing is

01:03:33,910 --> 01:03:42,430
proprietary everything is open in many

01:03:39,790 --> 01:03:46,630
ways it's absolutely vital to the the

01:03:42,430 --> 01:03:50,410
ongoing health cloudstack the most

01:03:46,630 --> 01:03:54,230
exciting event in recent memory for me

01:03:50,410 --> 01:03:56,960
was our first developer boot camp

01:03:54,230 --> 01:03:59,600
and our call gave people I gave me two

01:03:56,960 --> 01:04:03,560
weeks notice to come attend I was

01:03:59,600 --> 01:04:07,730
expecting 25 or 30 people so we ended up

01:04:03,560 --> 01:04:10,580
with 87 people and had to go get more

01:04:07,730 --> 01:04:13,100
chairs into the room twice everything

01:04:10,580 --> 01:04:16,340
within cloud computing is commodity and

01:04:13,100 --> 01:04:19,430
is open source and so I don't think that

01:04:16,340 --> 01:04:21,170
you will you'll see anywhere where open

01:04:19,430 --> 01:04:24,200
source is not pervasive in cloud

01:04:21,170 --> 01:04:26,750
computing and so i think it's i think

01:04:24,200 --> 01:04:28,280
it's an assumption i think when you talk

01:04:26,750 --> 01:04:29,390
about cloud computing you're really

01:04:28,280 --> 01:04:34,940
talking about open source cloud

01:04:29,390 --> 01:04:38,090
computing cloud sac is a robust solution

01:04:34,940 --> 01:04:40,490
for large deployments you have dozens of

01:04:38,090 --> 01:04:44,390
data centers and thousands of servers in

01:04:40,490 --> 01:04:47,060
each data centers these hardware is

01:04:44,390 --> 01:04:50,540
going to fail and CloudStack is designed

01:04:47,060 --> 01:04:53,270
to handle number one that mass scale

01:04:50,540 --> 01:04:56,420
number two it's designed to handle the

01:04:53,270 --> 01:04:58,970
failure that inevitably happens in large

01:04:56,420 --> 01:05:02,510
deployments started working on cog

01:04:58,970 --> 01:05:05,869
attack over four years ago and it was

01:05:02,510 --> 01:05:08,540
the original set of people working on it

01:05:05,869 --> 01:05:12,650
had a background of delivering software

01:05:08,540 --> 01:05:16,880
telcos and service providers lots of QA

01:05:12,650 --> 01:05:20,510
lots of users actually using it high

01:05:16,880 --> 01:05:23,570
availability is a key feature multiple

01:05:20,510 --> 01:05:25,760
hypervisors support different network

01:05:23,570 --> 01:05:28,760
models we can pick up whatever suits you

01:05:25,760 --> 01:05:30,530
better while step management server can

01:05:28,760 --> 01:05:34,220
be deployed in different physical

01:05:30,530 --> 01:05:35,869
machines it definitely has a huge

01:05:34,220 --> 01:05:40,880
footprint it's being deployed everywhere

01:05:35,869 --> 01:05:43,460
there's a major movie studio that they

01:05:40,880 --> 01:05:46,760
were using cloudstack they were using it

01:05:43,460 --> 01:05:48,740
to transcode video and I thought that

01:05:46,760 --> 01:05:50,359
was terribly fascinating what I found

01:05:48,740 --> 01:05:53,630
more fascinating is what they did during

01:05:50,359 --> 01:05:56,420
lunch where they would spin up you know

01:05:53,630 --> 01:05:58,309
50 or 60 game servers then as soon as

01:05:56,420 --> 01:06:00,489
lunch was over they would destroy lbs

01:05:58,309 --> 01:06:03,920
Susan go back to doing real work

01:06:00,489 --> 01:06:05,420
cloudstack is vast it touches so many

01:06:03,920 --> 01:06:07,279
different aspects and there's no one

01:06:05,420 --> 01:06:09,949
person that's kind of like a master of

01:06:07,279 --> 01:06:13,759
all those realms I think clouds stack as

01:06:09,949 --> 01:06:15,979
a project is going to be one of the

01:06:13,759 --> 01:06:20,029
leaders simply because it's some of the

01:06:15,979 --> 01:06:25,459
most feature fallen and and robust

01:06:20,029 --> 01:06:28,359
platforms out they learn Adam senior

01:06:25,459 --> 01:06:28,359
living through the clouds dag

01:06:41,190 --> 01:06:43,250
you

01:06:46,550 --> 01:06:51,630
when we created asterisk over a decade

01:06:49,290 --> 01:06:53,579
ago we could not have imagined that

01:06:51,630 --> 01:06:55,800
asterisk would not only become the most

01:06:53,579 --> 01:06:57,930
widely adopted open source communication

01:06:55,800 --> 01:06:59,970
software on a planet but that it would

01:06:57,930 --> 01:07:02,490
impact the entire industry in the way

01:06:59,970 --> 01:07:04,470
that it has today asterisk has found its

01:07:02,490 --> 01:07:07,109
way in the more than 170 countries and

01:07:04,470 --> 01:07:09,060
virtually every fortune 1000 company the

01:07:07,109 --> 01:07:11,160
success of asterisk has enabled a

01:07:09,060 --> 01:07:12,569
transition of power from the hands of

01:07:11,160 --> 01:07:14,849
the traditional proprietary phone

01:07:12,569 --> 01:07:17,220
vendors into the hands of the users and

01:07:14,849 --> 01:07:19,170
administrators of phone systems using

01:07:17,220 --> 01:07:20,400
this power our customers have created

01:07:19,170 --> 01:07:22,349
all sorts of business changing

01:07:20,400 --> 01:07:24,180
applications from small office phone

01:07:22,349 --> 01:07:26,700
systems to mission-critical call centres

01:07:24,180 --> 01:07:28,319
to international carrier networks in

01:07:26,700 --> 01:07:30,089
fact there's even an entire country

01:07:28,319 --> 01:07:32,490
those communications infrastructure runs

01:07:30,089 --> 01:07:34,619
on esters the gym has always been about

01:07:32,490 --> 01:07:36,329
creating technology that expands

01:07:34,619 --> 01:07:38,490
communications capabilities in ways that

01:07:36,329 --> 01:07:39,869
we could never have imagined and that's

01:07:38,490 --> 01:07:42,510
part of what's game-changing about the

01:07:39,869 --> 01:07:44,970
gym today we're doing it again this time

01:07:42,510 --> 01:07:47,069
by introducing a new family of HD IP

01:07:44,970 --> 01:07:49,349
phones that extends control of the user

01:07:47,069 --> 01:07:51,119
all the way to the desktop the launch of

01:07:49,349 --> 01:07:52,640
these new products represents the next

01:07:51,119 --> 01:07:55,290
phase in de jambes history of innovation

01:07:52,640 --> 01:07:57,329
these are the first and only IP phones

01:07:55,290 --> 01:07:58,829
designed to fully leverage the power of

01:07:57,329 --> 01:08:00,450
estrus when we first discussed our

01:07:58,829 --> 01:08:02,250
expectations for building a family of

01:08:00,450 --> 01:08:04,410
phones for use with asterisk our

01:08:02,250 --> 01:08:06,150
requirements were pretty simple we asked

01:08:04,410 --> 01:08:07,770
the team to build the phones such that

01:08:06,150 --> 01:08:09,990
they were easy to install integrate

01:08:07,770 --> 01:08:11,819
provision and use I think you'll soon

01:08:09,990 --> 01:08:14,400
agree our engineers have delivered on

01:08:11,819 --> 01:08:16,020
that goal user feedback is validating

01:08:14,400 --> 01:08:18,150
that when it comes to operation with

01:08:16,020 --> 01:08:20,549
astro space systems including our own

01:08:18,150 --> 01:08:23,130
Switchvox based product these are the

01:08:20,549 --> 01:08:24,449
easiest to use best integrated most

01:08:23,130 --> 01:08:27,029
interoperable products on the market

01:08:24,449 --> 01:08:29,029
today the digitally phones will

01:08:27,029 --> 01:08:31,080
initially include three IP des hommes

01:08:29,029 --> 01:08:33,029
uniquely designed to complement any

01:08:31,080 --> 01:08:34,890
asterisks or switch box based solution

01:08:33,029 --> 01:08:37,560
these phones are different for a number

01:08:34,890 --> 01:08:40,199
of reasons first there is clue sively

01:08:37,560 --> 01:08:41,640
designed for use with esters secondly

01:08:40,199 --> 01:08:43,250
we've made it really easy to

01:08:41,640 --> 01:08:45,630
autodiscover and provision the phones

01:08:43,250 --> 01:08:47,730
next we've made it easy for the phones

01:08:45,630 --> 01:08:49,680
to access information inside of asterisk

01:08:47,730 --> 01:08:50,530
allowing tight coupling between an

01:08:49,680 --> 01:08:53,260
application

01:08:50,530 --> 01:08:55,420
the phone additionally we've created an

01:08:53,260 --> 01:08:57,550
applications engineer that allows users

01:08:55,420 --> 01:09:00,760
and developers to create and run their

01:08:57,550 --> 01:09:02,530
own apps on the phone and finally we've

01:09:00,760 --> 01:09:04,510
done all of this at a very compelling

01:09:02,530 --> 01:09:06,160
price point at Digium we're always

01:09:04,510 --> 01:09:08,290
thinking of ways to give our customers

01:09:06,160 --> 01:09:10,840
the best value in business phone systems

01:09:08,290 --> 01:09:12,400
and also give them the power to create

01:09:10,840 --> 01:09:14,530
their own solutions or any

01:09:12,400 --> 01:09:16,270
communications challenge well continue

01:09:14,530 --> 01:09:17,710
to push the boundaries not only to make

01:09:16,270 --> 01:09:19,750
Astra's cooler bastard more

01:09:17,710 --> 01:09:21,370
technologically feature-rich but to make

01:09:19,750 --> 01:09:23,830
asterisk employed communications even

01:09:21,370 --> 01:09:27,000
easier and together we'll change the way

01:09:23,830 --> 01:09:27,000
the world communication again

01:09:34,850 --> 01:09:39,120
your customers rely on your website or

01:09:37,620 --> 01:09:41,490
application if it's slower

01:09:39,120 --> 01:09:44,460
non-responsive it infuriates your users

01:09:41,490 --> 01:09:46,260
and costs you money keeping your

01:09:44,460 --> 01:09:49,770
business critical systems humming along

01:09:46,260 --> 01:09:52,080
requires insight into what they're doing

01:09:49,770 --> 01:09:54,060
your system metrics tells stories

01:09:52,080 --> 01:09:56,070
stories that can reveal performance

01:09:54,060 --> 01:09:58,380
bottlenecks resource limitations and

01:09:56,070 --> 01:09:59,940
other problems but how do you keep an

01:09:58,380 --> 01:10:02,610
eye on all of your systems performance

01:09:59,940 --> 01:10:05,610
metrics in real-time and record this

01:10:02,610 --> 01:10:07,380
data for later analysis enter longview

01:10:05,610 --> 01:10:09,420
the new way to see what's really going

01:10:07,380 --> 01:10:11,550
on under the hood the long view

01:10:09,420 --> 01:10:13,620
dashboard lets you visualize the status

01:10:11,550 --> 01:10:16,080
of all your systems providing you with a

01:10:13,620 --> 01:10:19,470
bird's-eye view of your entire fleet you

01:10:16,080 --> 01:10:22,050
can sort by cpu memory swap processes

01:10:19,470 --> 01:10:23,790
load and network usage click a specific

01:10:22,050 --> 01:10:26,190
system to access its individual

01:10:23,790 --> 01:10:28,700
dashboard then click and drag to zoom in

01:10:26,190 --> 01:10:31,110
on chokepoints and get more detail

01:10:28,700 --> 01:10:32,790
comprehensive network data including

01:10:31,110 --> 01:10:35,100
inbound and outbound traffic is

01:10:32,790 --> 01:10:36,660
available on the network tab and disk

01:10:35,100 --> 01:10:38,580
rights and free space on the disk

01:10:36,660 --> 01:10:41,430
stabbed while the process Explorer

01:10:38,580 --> 01:10:43,950
displays usage statistics for individual

01:10:41,430 --> 01:10:46,140
processes the system info tab shows

01:10:43,950 --> 01:10:48,390
listening services active connections

01:10:46,140 --> 01:10:50,520
and available updates adding long view

01:10:48,390 --> 01:10:52,200
to a system is easy just click the

01:10:50,520 --> 01:10:54,360
button copy the one line installation

01:10:52,200 --> 01:10:56,790
command then run the command on your

01:10:54,360 --> 01:10:58,500
linux system to complete the process the

01:10:56,790 --> 01:11:00,690
agent will begin collecting data and

01:10:58,500 --> 01:11:02,530
sending it to longview then the graphs

01:11:00,690 --> 01:11:05,080
start rolling

01:11:02,530 --> 01:11:07,450
used longview to gain visibility into

01:11:05,080 --> 01:11:11,190
your servers so when your website or app

01:11:07,450 --> 01:11:11,190
heats up it stays up

01:11:18,760 --> 01:11:20,820

YouTube URL: https://www.youtube.com/watch?v=H4ify5zGJBM


