Title: 2013 SouthEast LinuxFest - BSidesCLT - Denny Deaton - Mobile Device Security
Publication date: 2014-07-08
Playlist: 2013 SouthEast LinuxFest
Description: 
	2013 SouthEast LinuxFest
BSidesCLT

Denny Deaton - Mobile Device Security
Captions: 
	00:00:00,000 --> 00:00:05,160
the following presentation was recorded

00:00:02,639 --> 00:00:08,280
at the 2013 southeast linux fest in

00:00:05,160 --> 00:00:10,860
charlotte north carolina it is licensed

00:00:08,280 --> 00:00:12,509
under a creative commons license for

00:00:10,860 --> 00:00:17,190
more information about the southeast

00:00:12,509 --> 00:00:19,949
linux fest visit WWF selinux phase or

00:00:17,190 --> 00:00:21,810
the southeast linux fest would like to

00:00:19,949 --> 00:00:24,000
thank the following diamond sponsors in

00:00:21,810 --> 00:00:27,300
2013 for helping make these videos

00:00:24,000 --> 00:00:29,310
possible great it's awesome to be here

00:00:27,300 --> 00:00:30,660
in Charlotte I live here in Charlotte

00:00:29,310 --> 00:00:32,640
and it's really exciting to see

00:00:30,660 --> 00:00:35,670
something like b-sides come to charlotte

00:00:32,640 --> 00:00:38,059
so thanks to everyone who is putting

00:00:35,670 --> 00:00:42,059
this on and it's a good nice turnout so

00:00:38,059 --> 00:00:44,070
hope to be back again next year so today

00:00:42,059 --> 00:00:48,450
I about an hour here I want to speak on

00:00:44,070 --> 00:00:51,059
mobile device security and the main

00:00:48,450 --> 00:00:52,500
things I want to cover our device and

00:00:51,059 --> 00:00:53,789
platform security overview I'm going to

00:00:52,500 --> 00:00:55,739
go over several of the more popular

00:00:53,789 --> 00:00:58,289
mobile device platforms that are

00:00:55,739 --> 00:01:01,609
available today talk about some of the

00:00:58,289 --> 00:01:04,170
threat modeling mobile applications

00:01:01,609 --> 00:01:06,600
cover some of the aspects of a mobile

00:01:04,170 --> 00:01:08,280
security assessment and security best

00:01:06,600 --> 00:01:10,860
practices and also have a couple demos

00:01:08,280 --> 00:01:12,450
that might be interesting so I'll start

00:01:10,860 --> 00:01:14,549
out with an obvious question how many

00:01:12,450 --> 00:01:17,700
people in the crowd have at least one

00:01:14,549 --> 00:01:19,110
mobile device all right I think that's

00:01:17,700 --> 00:01:22,439
pretty much everyone how many people

00:01:19,110 --> 00:01:25,590
have to mobile devices three mobile

00:01:22,439 --> 00:01:30,869
devices still got hand for mobile

00:01:25,590 --> 00:01:32,340
devices five ok so for mobile devices so

00:01:30,869 --> 00:01:34,140
we were talking recently at the

00:01:32,340 --> 00:01:36,960
Charlotte owasp chapter meeting about

00:01:34,140 --> 00:01:39,180
how the mobile devices have really are

00:01:36,960 --> 00:01:40,650
they're taking over the the pcs or that

00:01:39,180 --> 00:01:43,950
outnumbering them so to speak because

00:01:40,650 --> 00:01:45,689
most people probably have one laptop and

00:01:43,950 --> 00:01:47,159
a desktop or maybe one for work and one

00:01:45,689 --> 00:01:49,290
for home but when it comes to mobile

00:01:47,159 --> 00:01:51,149
devices you know we have multiple phones

00:01:49,290 --> 00:01:53,729
maybe one for work one for home we have

00:01:51,149 --> 00:01:56,030
tablets we have all different types of

00:01:53,729 --> 00:01:58,049
devices that are mobile devices and so

00:01:56,030 --> 00:01:59,640
it's really kind of changing the

00:01:58,049 --> 00:02:01,380
landscape of it from a security

00:01:59,640 --> 00:02:04,229
standpoint because these are devices

00:02:01,380 --> 00:02:06,000
that are typically lost or stolen

00:02:04,229 --> 00:02:07,740
because they're so small they can fit in

00:02:06,000 --> 00:02:08,910
your pocket or someone else's pocket you

00:02:07,740 --> 00:02:10,649
can travel with them you can easily

00:02:08,910 --> 00:02:12,120
leave them somewhere so it kind of

00:02:10,649 --> 00:02:13,569
changes the landscape from a security

00:02:12,120 --> 00:02:17,049
standpoint I want to kind of cover

00:02:13,569 --> 00:02:18,670
those things today so just real quick

00:02:17,049 --> 00:02:21,310
about about the company I work for were

00:02:18,670 --> 00:02:23,469
called Gotham digital science we are

00:02:21,310 --> 00:02:25,599
consulting firm that primarily focuses

00:02:23,469 --> 00:02:28,180
on software security that's really what

00:02:25,599 --> 00:02:30,549
our passion is and really you know kind

00:02:28,180 --> 00:02:32,739
of the bread and butter we're found in

00:02:30,549 --> 00:02:34,719
2005 and we're headquartered in New York

00:02:32,739 --> 00:02:36,250
City we also have an office in London

00:02:34,719 --> 00:02:39,129
and we have a local team here in

00:02:36,250 --> 00:02:40,870
Charlotte as well that we're growing the

00:02:39,129 --> 00:02:43,209
primary services that we offer our black

00:02:40,870 --> 00:02:46,000
box mobile testing and web testing

00:02:43,209 --> 00:02:48,099
security code reviews secure development

00:02:46,000 --> 00:02:50,319
training in secure develop secure design

00:02:48,099 --> 00:02:51,969
and architecture reviews and we're also

00:02:50,319 --> 00:02:53,260
really pride ourselves on a lot of

00:02:51,969 --> 00:02:55,419
research and development if you check

00:02:53,260 --> 00:02:57,819
out our blog and our tool section it's

00:02:55,419 --> 00:03:00,159
fairly active and we try to get out and

00:02:57,819 --> 00:03:02,230
speak at conferences such as b-sides and

00:03:00,159 --> 00:03:06,159
even some larger conferences such as

00:03:02,230 --> 00:03:09,819
shmoocon black hat and so forth so let's

00:03:06,159 --> 00:03:12,370
jump right in talk about some OS is here

00:03:09,819 --> 00:03:16,030
this is a recent some recent data that I

00:03:12,370 --> 00:03:20,199
pulled for mobile OS market share

00:03:16,030 --> 00:03:23,229
forecast for 2014 and you'll look here

00:03:20,199 --> 00:03:24,819
that symbian which is if you're not

00:03:23,229 --> 00:03:26,109
familiar simian just think about flip

00:03:24,819 --> 00:03:27,759
phones and a lot of those types of

00:03:26,109 --> 00:03:30,400
phones that you get usually the free

00:03:27,759 --> 00:03:32,919
ones that you get at verizon or 18 team

00:03:30,400 --> 00:03:35,500
those are Symbian phones and they still

00:03:32,919 --> 00:03:37,840
have a quite a market share after that

00:03:35,500 --> 00:03:39,900
you have Android which is second in

00:03:37,840 --> 00:03:42,639
market in the market and then iOS

00:03:39,900 --> 00:03:49,060
fifteen percent and then rim which is

00:03:42,639 --> 00:03:50,799
blackberry which twelve percent when it

00:03:49,060 --> 00:03:52,900
comes to store sizes all these

00:03:50,799 --> 00:03:54,639
applications or all these os's have a

00:03:52,900 --> 00:03:56,349
fairly mature store at this point and

00:03:54,639 --> 00:03:59,729
the ones i wanted to point out are the

00:03:56,349 --> 00:04:03,849
windows mobile store is 120,000 apps

00:03:59,729 --> 00:04:06,519
android has 500,000 apps research in

00:04:03,849 --> 00:04:09,009
motion has roughly a hundred thousand

00:04:06,519 --> 00:04:14,079
apps and then iOS has a quite a lead

00:04:09,009 --> 00:04:15,069
with over a million apps so the

00:04:14,079 --> 00:04:18,280
operating systems we're going to talk

00:04:15,069 --> 00:04:21,969
about today are at the the Apple iOS

00:04:18,280 --> 00:04:25,389
operating system for iphones and ipads

00:04:21,969 --> 00:04:27,810
and ipod touches ipod touches android

00:04:25,389 --> 00:04:27,810
and blackberry

00:04:29,070 --> 00:04:34,479
so first we're gonna start with iOS just

00:04:32,560 --> 00:04:37,000
an overview of it real quick it's based

00:04:34,479 --> 00:04:38,350
on Mac OS X it's very similar to that so

00:04:37,000 --> 00:04:40,960
it shares a lot of the same security

00:04:38,350 --> 00:04:44,169
characteristics it runs on an iPhone an

00:04:40,960 --> 00:04:46,720
ipod touch or an ipad some additional

00:04:44,169 --> 00:04:48,940
restrictions on iOS are that the the

00:04:46,720 --> 00:04:50,650
application has access to the files and

00:04:48,940 --> 00:04:55,030
system resources or that they're

00:04:50,650 --> 00:04:57,310
restricted and in the beginning only one

00:04:55,030 --> 00:04:58,930
application could run at a time but as

00:04:57,310 --> 00:05:02,099
of iOS four you can actually have

00:04:58,930 --> 00:05:02,099
applications running in the background

00:05:03,210 --> 00:05:09,070
so in iOS four they also introduced

00:05:06,389 --> 00:05:12,340
support for hardware encryption on the

00:05:09,070 --> 00:05:14,620
device which is 256-bit AES and it's

00:05:12,340 --> 00:05:17,259
meant basically to allow fast remote

00:05:14,620 --> 00:05:20,320
wipe and the way that it works is that

00:05:17,259 --> 00:05:22,660
there's a symmetric key and the key is

00:05:20,320 --> 00:05:25,240
set whenever you set a password on the

00:05:22,660 --> 00:05:26,860
device and whenever you wipe it the way

00:05:25,240 --> 00:05:28,780
this works then way is so fast is it

00:05:26,860 --> 00:05:29,800
doesn't delete the data itself it

00:05:28,780 --> 00:05:30,789
actually just deletes one of the

00:05:29,800 --> 00:05:32,620
symmetric keys so you would have to have

00:05:30,789 --> 00:05:35,139
both keys so if it deletes the key you

00:05:32,620 --> 00:05:37,180
can actually access the data so it's not

00:05:35,139 --> 00:05:38,740
really intended to protect to protect

00:05:37,180 --> 00:05:42,280
the application data that's that's one

00:05:38,740 --> 00:05:43,449
of the key things here so they also

00:05:42,280 --> 00:05:45,669
introduced something called the data

00:05:43,449 --> 00:05:47,979
protection API and basically what this

00:05:45,669 --> 00:05:50,710
is it's an additional layer on top of

00:05:47,979 --> 00:05:53,260
the hardware encryption and it was

00:05:50,710 --> 00:05:56,229
introduced in iOS four and it's still

00:05:53,260 --> 00:05:57,610
available in later versions as well so

00:05:56,229 --> 00:06:00,550
as I mentioned the way that it works is

00:05:57,610 --> 00:06:03,520
that when a user sets a password on

00:06:00,550 --> 00:06:07,720
their device it uses that password to

00:06:03,520 --> 00:06:09,669
create the the encryption the encryption

00:06:07,720 --> 00:06:11,710
key and then it uses that whenever you

00:06:09,669 --> 00:06:18,490
log into the device to actually decrypt

00:06:11,710 --> 00:06:20,650
it so a question to the crowd so let's

00:06:18,490 --> 00:06:22,570
say that you have a device you have data

00:06:20,650 --> 00:06:25,210
protection enabled and you've lost your

00:06:22,570 --> 00:06:27,729
iPhone do you think all of your data is

00:06:25,210 --> 00:06:32,680
safe show of hands how many people think

00:06:27,729 --> 00:06:35,560
that the data is safe smart crowd

00:06:32,680 --> 00:06:37,690
the answer is no the reason is that the

00:06:35,560 --> 00:06:39,699
applications have to leverage the data

00:06:37,690 --> 00:06:42,400
protection API so it's really up the

00:06:39,699 --> 00:06:44,169
developer to leverage the API that's

00:06:42,400 --> 00:06:45,880
provided by Apple before the data is

00:06:44,169 --> 00:06:48,150
actually encrypted when they're using

00:06:45,880 --> 00:06:50,320
when the user enables the passcode

00:06:48,150 --> 00:06:52,330
another thing to point out I'll go over

00:06:50,320 --> 00:06:54,130
some of the iOS applications that are

00:06:52,330 --> 00:06:55,570
built in that that don't leverage this

00:06:54,130 --> 00:06:58,030
or don't have this feature built-in but

00:06:55,570 --> 00:07:00,100
a lot of the built-in features are apps

00:06:58,030 --> 00:07:04,090
and features so to speak don't really

00:07:00,100 --> 00:07:06,310
use the API so those are also at risk so

00:07:04,090 --> 00:07:08,530
here's a list so you can see those there

00:07:06,310 --> 00:07:10,509
so just a couple to list off here these

00:07:08,530 --> 00:07:12,789
are just a number of random apps that

00:07:10,509 --> 00:07:17,919
would be running on a device you've got

00:07:12,789 --> 00:07:20,680
like AOL email Apple push CalDAV ldap if

00:07:17,919 --> 00:07:22,449
you see here where it says protected in

00:07:20,680 --> 00:07:24,430
the accessibility column the darker

00:07:22,449 --> 00:07:26,020
column there if it says protected there

00:07:24,430 --> 00:07:28,810
then those are actually leveraging the

00:07:26,020 --> 00:07:30,070
Data Protection API if not then it's not

00:07:28,810 --> 00:07:31,720
and I wanted to point out a couple of

00:07:30,070 --> 00:07:34,300
them that really kind of drew you know

00:07:31,720 --> 00:07:36,760
grab my attention is is the VPN there's

00:07:34,300 --> 00:07:38,979
three VPN applications on here that

00:07:36,760 --> 00:07:41,949
don't leverage the the data protection

00:07:38,979 --> 00:07:43,090
API so when that data gets stored to the

00:07:41,949 --> 00:07:45,070
keychain and we'll talk about this a

00:07:43,090 --> 00:07:47,289
little further in a minute that data is

00:07:45,070 --> 00:07:51,190
not actually encrypted it states stored

00:07:47,289 --> 00:07:53,260
in plain tex some examples of built-in

00:07:51,190 --> 00:07:55,690
apps that are stored in unprotected or

00:07:53,260 --> 00:07:59,590
text messages contacts photos in web

00:07:55,690 --> 00:08:02,020
history so the key chain if you have a

00:07:59,590 --> 00:08:04,419
Mac you may be familiar with what the

00:08:02,020 --> 00:08:05,800
key chain is it's very very similar on

00:08:04,419 --> 00:08:07,930
iOS and it's basically a

00:08:05,800 --> 00:08:10,270
password-protected database that

00:08:07,930 --> 00:08:12,039
provides secure encrypted storage for

00:08:10,270 --> 00:08:15,610
passwords and other secrets on the

00:08:12,039 --> 00:08:17,770
device so iOS permits the application

00:08:15,610 --> 00:08:19,539
itself that set the data and put the

00:08:17,770 --> 00:08:21,400
data in the keychain only that

00:08:19,539 --> 00:08:23,590
application can access that data from

00:08:21,400 --> 00:08:25,630
the keychain so it's sandboxed in that

00:08:23,590 --> 00:08:28,270
person from that perspective the

00:08:25,630 --> 00:08:32,020
keychain sort of industry-wide is is the

00:08:28,270 --> 00:08:35,110
recommended storage medium on iOS for

00:08:32,020 --> 00:08:36,399
storing secrets and one thing as I

00:08:35,110 --> 00:08:38,500
mentioned earlier it's up to the

00:08:36,399 --> 00:08:40,209
developer to leverage the API to begin

00:08:38,500 --> 00:08:42,959
with before the data is encrypted but

00:08:40,209 --> 00:08:42,959
further applique

00:08:44,400 --> 00:08:50,890
so most users who ona and I an apple

00:08:48,640 --> 00:08:52,660
device will routinely perform a backup

00:08:50,890 --> 00:08:54,880
of that and they can do that through

00:08:52,660 --> 00:08:56,560
itunes and i have kind of a screenshot

00:08:54,880 --> 00:08:58,240
here of what it looks like where you

00:08:56,560 --> 00:09:00,910
have the opportunity to set a password

00:08:58,240 --> 00:09:03,940
and that encrypts the backup itself

00:09:00,910 --> 00:09:05,740
however it's important to to point out

00:09:03,940 --> 00:09:06,730
that that's not something that's enabled

00:09:05,740 --> 00:09:09,550
by default there's actually a little

00:09:06,730 --> 00:09:11,800
check box you can see potentially see it

00:09:09,550 --> 00:09:13,810
here circled where the user it's up to

00:09:11,800 --> 00:09:15,910
the user to encrypt it whenever they

00:09:13,810 --> 00:09:17,410
have the backup so whenever they back up

00:09:15,910 --> 00:09:18,820
the device so if they back up the device

00:09:17,410 --> 00:09:20,350
and they don't check that box that means

00:09:18,820 --> 00:09:22,120
that all their data they're backing up

00:09:20,350 --> 00:09:25,120
to their system is actually being stored

00:09:22,120 --> 00:09:26,740
on their local hard drive unencrypted

00:09:25,120 --> 00:09:28,180
and we'll talk a little bit about that a

00:09:26,740 --> 00:09:30,460
little while and I have a demo that kind

00:09:28,180 --> 00:09:35,980
of points out how an attacker could

00:09:30,460 --> 00:09:37,810
obtain that data so first of all I want

00:09:35,980 --> 00:09:39,120
to kind of hop out of the presentation

00:09:37,810 --> 00:09:44,110
here and I want to go through a

00:09:39,120 --> 00:09:46,570
jailbroken device demo that i have here

00:09:44,110 --> 00:09:49,470
it's pre-recorded and basically we have

00:09:46,570 --> 00:09:49,470
an ipad here

00:09:57,480 --> 00:10:01,779
so first of all what we're going to do

00:09:59,560 --> 00:10:04,540
is the jailbroken ipad and we're going

00:10:01,779 --> 00:10:07,660
to ssh into this ipad from a local

00:10:04,540 --> 00:10:10,930
system and we're basically just going to

00:10:07,660 --> 00:10:18,940
use putty ssh to do that we know what

00:10:10,930 --> 00:10:21,370
the IP is from our local network this is

00:10:18,940 --> 00:10:22,390
a little slow so i'll try to speed it up

00:10:21,370 --> 00:10:23,920
here a little bit you basically we

00:10:22,390 --> 00:10:25,320
obtain what the IP address is we're

00:10:23,920 --> 00:10:28,690
going to type it in over here in putty

00:10:25,320 --> 00:10:33,130
port 22 which is the default ssh port

00:10:28,690 --> 00:10:38,110
for iOS on the device can everyone see

00:10:33,130 --> 00:10:40,120
that ok ok so we've logged in here is as

00:10:38,110 --> 00:10:44,440
root we know the password which is

00:10:40,120 --> 00:10:46,600
commonly available just kind of want to

00:10:44,440 --> 00:10:52,750
say here you name what the device is so

00:10:46,600 --> 00:10:53,950
we have here the iPad and first of all

00:10:52,750 --> 00:10:56,050
what we're going to do is just take a

00:10:53,950 --> 00:11:00,760
look at some of the information that's

00:10:56,050 --> 00:11:02,320
been typed into the keyboard so we're

00:11:00,760 --> 00:11:04,420
basically just gonna use a strings

00:11:02,320 --> 00:11:06,790
command and look at the dynamic text

00:11:04,420 --> 00:11:08,920
that file and you can see some of the

00:11:06,790 --> 00:11:10,810
information that's been typed into the

00:11:08,920 --> 00:11:13,470
keyboard on this device just stored in

00:11:10,810 --> 00:11:13,470
clear text here

00:11:18,170 --> 00:11:21,420
so the next thing we're going to do here

00:11:20,189 --> 00:11:23,129
we're going to use a tool that's that's

00:11:21,420 --> 00:11:24,509
freely available called keychain dumper

00:11:23,129 --> 00:11:25,829
and we're going to take a look at the

00:11:24,509 --> 00:11:26,850
keychain that's stored on the device and

00:11:25,829 --> 00:11:28,920
we're just going to go through the

00:11:26,850 --> 00:11:30,990
keychain first of all in an unlock

00:11:28,920 --> 00:11:34,319
device mode and look at what sort of

00:11:30,990 --> 00:11:36,240
data is being stored in the keychain now

00:11:34,319 --> 00:11:39,329
keep in mind that unlock means the users

00:11:36,240 --> 00:11:41,069
put the password in and it's leveraging

00:11:39,329 --> 00:11:42,660
the date the data API so that

00:11:41,069 --> 00:11:47,370
information is going to be stored in in

00:11:42,660 --> 00:11:48,600
clear-text at this point so we're just

00:11:47,370 --> 00:11:51,620
going to scroll through here you'll see

00:11:48,600 --> 00:11:53,819
first of all there is a Wi-Fi password

00:11:51,620 --> 00:11:55,199
keychain day wherever it says keychain

00:11:53,819 --> 00:11:57,420
data that's the day that's been entered

00:11:55,199 --> 00:12:00,709
in stored by the application you'll see

00:11:57,420 --> 00:12:00,709
that some say not accessible

00:12:07,080 --> 00:12:12,800
so here's another belkin Wi-Fi password

00:12:16,160 --> 00:12:22,890
here's an account Mallory and the

00:12:18,330 --> 00:12:27,180
keychain data woot one so this is this

00:12:22,890 --> 00:12:28,350
is on an unlocked device so now we're

00:12:27,180 --> 00:12:29,550
going to pop out we're going to base the

00:12:28,350 --> 00:12:36,480
go back out we're going to lock the

00:12:29,550 --> 00:12:39,540
device so it's now locked now we're

00:12:36,480 --> 00:12:41,400
going to go back over to ssh and we're

00:12:39,540 --> 00:12:43,200
going to take a look again at the

00:12:41,400 --> 00:12:44,880
keychain we're going to see if any of

00:12:43,200 --> 00:12:47,190
that data is encrypted so and keep them

00:12:44,880 --> 00:12:49,200
on the data protection API is leveraged

00:12:47,190 --> 00:12:52,290
at this point you should see some large

00:12:49,200 --> 00:12:53,640
blocks of encryption so you can see the

00:12:52,290 --> 00:12:54,750
difference between the two and how

00:12:53,640 --> 00:12:57,540
that's stored and like I said earlier

00:12:54,750 --> 00:12:58,830
that's really up to the developers to if

00:12:57,540 --> 00:13:00,860
they leverage that it's highly

00:12:58,830 --> 00:13:00,860
recommended

00:13:11,050 --> 00:13:15,459
okay so as I mentioned earlier it relies

00:13:13,029 --> 00:13:17,980
on a password four digit PIN you can

00:13:15,459 --> 00:13:23,709
also in this case you can use a stronger

00:13:17,980 --> 00:13:25,480
password of alphanumeric characters from

00:13:23,709 --> 00:13:28,060
a development standpoint when you're

00:13:25,480 --> 00:13:29,350
storing data on the device you have to

00:13:28,060 --> 00:13:30,579
assume that the users not going to

00:13:29,350 --> 00:13:32,260
enable that that's not something that

00:13:30,579 --> 00:13:33,430
you really have control over so you have

00:13:32,260 --> 00:13:35,529
to assume that there is going to be a

00:13:33,430 --> 00:13:36,820
fraction of your users potentially a

00:13:35,529 --> 00:13:39,070
large fraction they don't actually

00:13:36,820 --> 00:13:42,640
leverage the don't actually set a

00:13:39,070 --> 00:13:45,370
passcode on the device so from an

00:13:42,640 --> 00:13:46,300
enterprise perspective iOS I'll go

00:13:45,370 --> 00:13:48,670
through these kind of quickly because we

00:13:46,300 --> 00:13:52,000
have three OS is to cover but basically

00:13:48,670 --> 00:13:53,290
it supports multiple VPN technologies it

00:13:52,000 --> 00:13:55,110
has multiple methods for user

00:13:53,290 --> 00:13:57,820
authentication that's appreciated keys

00:13:55,110 --> 00:14:00,279
x509 digital certificates two-factor

00:13:57,820 --> 00:14:04,060
authentication through RSA securid and

00:14:00,279 --> 00:14:06,040
cryptic card server-side authentication

00:14:04,060 --> 00:14:07,930
and authorization has to be implemented

00:14:06,040 --> 00:14:09,399
by the application developer and that

00:14:07,930 --> 00:14:11,220
has to be something that's that's done

00:14:09,399 --> 00:14:14,380
server side and through the code that

00:14:11,220 --> 00:14:16,420
they write the client-side authorization

00:14:14,380 --> 00:14:18,459
provided by Apple is the application

00:14:16,420 --> 00:14:19,930
sandbox and that basically prevents one

00:14:18,459 --> 00:14:24,970
application from talking to the other

00:14:19,930 --> 00:14:29,470
application so the way that you get an

00:14:24,970 --> 00:14:32,079
iphone app it's typically would be to

00:14:29,470 --> 00:14:33,220
use the apple app store it's the central

00:14:32,079 --> 00:14:35,140
distribution point so if you're a

00:14:33,220 --> 00:14:37,240
developer you want to get an app an app

00:14:35,140 --> 00:14:38,110
to other users that's the method that

00:14:37,240 --> 00:14:39,640
you're going to use you're going to

00:14:38,110 --> 00:14:41,950
you're going to upload it to them all

00:14:39,640 --> 00:14:44,079
applications have to be digitally signed

00:14:41,950 --> 00:14:45,730
by Apple before they actually can be

00:14:44,079 --> 00:14:48,279
loaded on a device this is a non

00:14:45,730 --> 00:14:49,720
jailbroken device by the way the

00:14:48,279 --> 00:14:52,480
approval times can vary from days to

00:14:49,720 --> 00:14:54,760
weeks and that has been proven to

00:14:52,480 --> 00:14:56,920
significantly affect patching on devices

00:14:54,760 --> 00:14:59,140
now this has improved a lot since iOS

00:14:56,920 --> 00:15:00,820
was released and apples got a lot better

00:14:59,140 --> 00:15:04,750
at it but it's still something that

00:15:00,820 --> 00:15:06,279
developers should consider and one thing

00:15:04,750 --> 00:15:08,440
to note the Apple does perform some

00:15:06,279 --> 00:15:11,230
limited security testing on your apps

00:15:08,440 --> 00:15:13,300
but from a security standpoint I would

00:15:11,230 --> 00:15:17,260
not rely on that they're mainly just

00:15:13,300 --> 00:15:18,670
looking just very high level things not

00:15:17,260 --> 00:15:20,560
anything specific they're not digging

00:15:18,670 --> 00:15:22,149
through your code or doing full-blown

00:15:20,560 --> 00:15:24,380
code reviews or anything like that so it

00:15:22,149 --> 00:15:26,510
does make sense in most cases to have a

00:15:24,380 --> 00:15:29,150
formal code review or a formal black box

00:15:26,510 --> 00:15:31,160
performed on your your application

00:15:29,150 --> 00:15:38,420
they're basically preventing malware

00:15:31,160 --> 00:15:42,580
from entering into their app stream so

00:15:38,420 --> 00:15:45,650
another benefit of the iOS enterprise

00:15:42,580 --> 00:15:47,540
solution is is it supports Microsoft

00:15:45,650 --> 00:15:49,700
Exchange ActiveSync and some of the

00:15:47,540 --> 00:15:51,470
policies that are supported by that our

00:15:49,700 --> 00:15:54,200
password policies device locked after

00:15:51,470 --> 00:15:55,880
inactivity you can disable the camera

00:15:54,200 --> 00:15:59,290
and the web browser from you know the

00:15:55,880 --> 00:16:02,240
enterprise level you can limit the

00:15:59,290 --> 00:16:04,250
maximum age of an email that sits on the

00:16:02,240 --> 00:16:05,930
device and you can also perform remote

00:16:04,250 --> 00:16:07,790
wipes which is really convenient if

00:16:05,930 --> 00:16:09,830
someone leaves the company or if a

00:16:07,790 --> 00:16:14,270
device is lost or something of that

00:16:09,830 --> 00:16:15,890
nature there's also mobile device

00:16:14,270 --> 00:16:18,170
management which basically provides the

00:16:15,890 --> 00:16:20,990
ability for a large organization to

00:16:18,170 --> 00:16:22,490
scale of Lee deploy applications and

00:16:20,990 --> 00:16:23,900
this is really nice when you know you've

00:16:22,490 --> 00:16:26,270
got one application and you've got

00:16:23,900 --> 00:16:27,980
50,000 users and you want to push it out

00:16:26,270 --> 00:16:30,260
you can utilize MDM for something like

00:16:27,980 --> 00:16:34,460
this it was introduced in iOS four and

00:16:30,260 --> 00:16:36,080
it does require an MDM server and the

00:16:34,460 --> 00:16:37,640
device management is performed over the

00:16:36,080 --> 00:16:43,760
air so the users do not have to plug the

00:16:37,640 --> 00:16:45,380
device into their system and apple

00:16:43,760 --> 00:16:48,080
provides the enterprise developer

00:16:45,380 --> 00:16:49,730
program and it basically allows an

00:16:48,080 --> 00:16:52,220
organization to receive one certificate

00:16:49,730 --> 00:16:55,250
that they can utilize to distribute all

00:16:52,220 --> 00:16:56,750
of their applications and they can

00:16:55,250 --> 00:16:59,510
distribute provisioning profiles and

00:16:56,750 --> 00:17:04,730
which can be securely delivered to

00:16:59,510 --> 00:17:06,290
enroll devices on on the network so

00:17:04,730 --> 00:17:08,540
let's talk a little bit about Android

00:17:06,290 --> 00:17:10,610
that covers iOS so androids a little bit

00:17:08,540 --> 00:17:14,300
of a different beast where I OS is a

00:17:10,610 --> 00:17:16,610
sort of a closed Network basic a closed

00:17:14,300 --> 00:17:19,520
source mobile operating system Android

00:17:16,610 --> 00:17:22,579
is is open it runs on a modified Linux

00:17:19,520 --> 00:17:26,089
kernel it's a the OS is freely available

00:17:22,579 --> 00:17:29,600
to device manufacturers so we're with

00:17:26,089 --> 00:17:32,870
Apple you see the iOS is specifically it

00:17:29,600 --> 00:17:34,310
only runs on their devices with Android

00:17:32,870 --> 00:17:35,930
you can run it on multiple types of

00:17:34,310 --> 00:17:36,640
devices and so you have multiple brands

00:17:35,930 --> 00:17:41,020
that are avail

00:17:36,640 --> 00:17:44,530
able to users the most common version to

00:17:41,020 --> 00:17:46,540
note is 4.2 which is jelly bean and the

00:17:44,530 --> 00:17:49,600
previous version was ice cream sandwich

00:17:46,540 --> 00:17:54,280
and i'm not sure why but all the names

00:17:49,600 --> 00:17:56,230
of their code kind of makes me hungry so

00:17:54,280 --> 00:17:58,570
device encryption was introduced in an

00:17:56,230 --> 00:17:59,950
ice cream sandwich and it would but it

00:17:58,570 --> 00:18:02,260
was not kind of important to note that

00:17:59,950 --> 00:18:04,540
it was not supported by previous

00:18:02,260 --> 00:18:06,070
versions and there are still a good

00:18:04,540 --> 00:18:07,630
number of people using Gingerbread and

00:18:06,070 --> 00:18:08,800
even some using froyo so that's

00:18:07,630 --> 00:18:11,170
something to consider when you're

00:18:08,800 --> 00:18:15,460
deploying applications android

00:18:11,170 --> 00:18:18,190
applications device devices typically

00:18:15,460 --> 00:18:19,720
use SD cards for storage and there's

00:18:18,190 --> 00:18:22,540
currently no encryption support for that

00:18:19,720 --> 00:18:24,160
for the SD cards and the data stored on

00:18:22,540 --> 00:18:28,990
the cards and it can be easily read if

00:18:24,160 --> 00:18:32,200
the card itself was lost or stolen so

00:18:28,990 --> 00:18:34,150
kind of going back a couple years 2.2

00:18:32,200 --> 00:18:38,140
froyo I think this is probably two

00:18:34,150 --> 00:18:41,650
thousand nine or ten they enabled though

00:18:38,140 --> 00:18:45,490
they added support for locking via pin

00:18:41,650 --> 00:18:48,250
or alphanumeric password support Google

00:18:45,490 --> 00:18:50,560
digital signatures are not required to

00:18:48,250 --> 00:18:51,760
run so as I said with Apple they

00:18:50,560 --> 00:18:53,980
actually have an apple issued

00:18:51,760 --> 00:18:56,110
certificate and that's not required by

00:18:53,980 --> 00:18:57,820
google developers however can use the

00:18:56,110 --> 00:19:02,800
self sign a self-signed served for their

00:18:57,820 --> 00:19:05,530
applications and one difference also is

00:19:02,800 --> 00:19:07,210
that Apple is it's a one user

00:19:05,530 --> 00:19:08,830
environment so you can't have multiple

00:19:07,210 --> 00:19:10,750
accounts and you with Android you can

00:19:08,830 --> 00:19:13,210
have all it's a multiple multiple user

00:19:10,750 --> 00:19:15,580
environment so in this case it works

00:19:13,210 --> 00:19:19,950
very much like Linux where it assigns a

00:19:15,580 --> 00:19:22,570
unique you and good for for each count

00:19:19,950 --> 00:19:26,890
has limited VPN support which is

00:19:22,570 --> 00:19:32,470
basically limited to ppt pl2 PT TP and

00:19:26,890 --> 00:19:35,950
ipsec no support for cisco ipsec VPN s

00:19:32,470 --> 00:19:39,040
and it does support several forms of

00:19:35,950 --> 00:19:41,620
authentication just as with the iOS it

00:19:39,040 --> 00:19:44,430
does support pre-shared keys and x509

00:19:41,620 --> 00:19:44,430
digital certificates

00:19:45,610 --> 00:19:50,500
so the way that the application

00:19:47,640 --> 00:19:52,210
distribution works is there's an android

00:19:50,500 --> 00:19:54,160
market and it's basically an online

00:19:52,210 --> 00:19:56,200
software store that's available on

00:19:54,160 --> 00:19:59,110
pretty much every android device these

00:19:56,200 --> 00:20:00,910
days and it's important to note that the

00:19:59,110 --> 00:20:04,000
applications are not audited by Google

00:20:00,910 --> 00:20:06,460
so there's no security testing going on

00:20:04,000 --> 00:20:07,840
with it with the application itself it's

00:20:06,460 --> 00:20:08,980
pretty much up to the developer to do

00:20:07,840 --> 00:20:11,710
the testing and make sure it's secure

00:20:08,980 --> 00:20:14,140
before it goes into the store and that

00:20:11,710 --> 00:20:16,510
anonymous pub anonymous publishing is is

00:20:14,140 --> 00:20:18,130
it possible so with Apple you actually

00:20:16,510 --> 00:20:21,490
have to have an account you have to have

00:20:18,130 --> 00:20:24,160
that certificate it's a lot more a lot

00:20:21,490 --> 00:20:26,320
more scrutiny over the process the way

00:20:24,160 --> 00:20:28,210
that you install an app on an Android

00:20:26,320 --> 00:20:30,010
device is by side loading it it's

00:20:28,210 --> 00:20:31,809
basically an apk file and you load it on

00:20:30,010 --> 00:20:34,809
the device and then your application is

00:20:31,809 --> 00:20:37,080
installed and there's not really a

00:20:34,809 --> 00:20:43,870
simple way for organizations to

00:20:37,080 --> 00:20:46,330
distribute enterprise applications so

00:20:43,870 --> 00:20:48,460
next I want to actually start one more

00:20:46,330 --> 00:20:50,380
one more slide here for Android to just

00:20:48,460 --> 00:20:54,460
discuss enterprise options here a little

00:20:50,380 --> 00:20:56,530
bit it does support active Exchange

00:20:54,460 --> 00:21:00,580
ActiveSync has some limited support it

00:20:56,530 --> 00:21:02,770
was enabled on froyo 2.2 and it has very

00:21:00,580 --> 00:21:08,470
similar set of actually identical set of

00:21:02,770 --> 00:21:09,340
supportive policies as iOS did so next

00:21:08,470 --> 00:21:14,350
we're going talk a little bit about

00:21:09,340 --> 00:21:16,480
blackberry blackberry has its own

00:21:14,350 --> 00:21:19,240
proprietary OS for blackberry mobile

00:21:16,480 --> 00:21:22,090
devices there's very limited technical

00:21:19,240 --> 00:21:25,059
details available for this OS as opposed

00:21:22,090 --> 00:21:27,309
to Android and iOS you can find an

00:21:25,059 --> 00:21:29,860
unbelievable amount of information that

00:21:27,309 --> 00:21:34,390
may be because smaller market it may be

00:21:29,860 --> 00:21:35,980
because research in motion has not

00:21:34,390 --> 00:21:38,679
really supplied that type of information

00:21:35,980 --> 00:21:40,900
or made it available to developers but

00:21:38,679 --> 00:21:43,630
it's basically a third-party application

00:21:40,900 --> 00:21:45,340
and it's developed in blackberry widgets

00:21:43,630 --> 00:21:47,500
it's basically a Java thick client

00:21:45,340 --> 00:21:52,030
that's running on the BlackBerry devices

00:21:47,500 --> 00:21:54,460
and it supports multitasking as with

00:21:52,030 --> 00:21:56,440
Android and iOS and it basically

00:21:54,460 --> 00:21:57,670
operates in a single user mode very

00:21:56,440 --> 00:22:00,310
similar to Apple

00:21:57,670 --> 00:22:03,370
iOS from a security standpoint

00:22:00,310 --> 00:22:05,680
encryption it supports 256-bit aes

00:22:03,370 --> 00:22:09,160
encryption and that's on the device the

00:22:05,680 --> 00:22:11,560
SD card the internal memory pass codes

00:22:09,160 --> 00:22:13,780
can protect Hardware the hardware

00:22:11,560 --> 00:22:15,520
encryption key and it has into in

00:22:13,780 --> 00:22:17,770
encryption for the BlackBerry Enterprise

00:22:15,520 --> 00:22:19,360
Server and that's a little different

00:22:17,770 --> 00:22:21,490
than what you've seen with iOS and

00:22:19,360 --> 00:22:24,430
Android we're an organization can go out

00:22:21,490 --> 00:22:26,950
and buy this BES Enterprise Server and

00:22:24,430 --> 00:22:28,960
all of their organizations can talk I me

00:22:26,950 --> 00:22:30,910
all of their devices on that network and

00:22:28,960 --> 00:22:32,980
talk to that within that organization

00:22:30,910 --> 00:22:34,660
can talk back to that server and that

00:22:32,980 --> 00:22:36,300
stores all the organization's data and

00:22:34,660 --> 00:22:39,190
so forth so it's a little bit different

00:22:36,300 --> 00:22:42,370
architecture than iOS and with Android

00:22:39,190 --> 00:22:45,280
and for that it uses Triple DES or

00:22:42,370 --> 00:22:50,350
256-bit AES and that's up the developers

00:22:45,280 --> 00:22:52,060
to which is use so blackberry the

00:22:50,350 --> 00:22:54,130
authentication relies on password

00:22:52,060 --> 00:22:56,020
protected screen lock in order to

00:22:54,130 --> 00:22:58,750
prevent unauthorized use to the device

00:22:56,020 --> 00:23:01,690
and it's alphanumeric password by

00:22:58,750 --> 00:23:03,970
default password protection is not

00:23:01,690 --> 00:23:07,060
enabled by default and a device is wiped

00:23:03,970 --> 00:23:09,730
after 10 incorrect attempts to log into

00:23:07,060 --> 00:23:12,220
the app to the device application

00:23:09,730 --> 00:23:15,010
signing it uses control tape to use the

00:23:12,220 --> 00:23:17,410
controlled API zap you you have to have

00:23:15,010 --> 00:23:20,350
the application signed by research in

00:23:17,410 --> 00:23:23,860
motion but all other applications do not

00:23:20,350 --> 00:23:25,810
require a signature some examples of

00:23:23,860 --> 00:23:29,680
some of the controlled api's are the

00:23:25,810 --> 00:23:31,480
browser mail task memo mailbox

00:23:29,680 --> 00:23:34,780
operations such as read writing and

00:23:31,480 --> 00:23:38,380
sending phone event and operations PDA

00:23:34,780 --> 00:23:41,910
type of apps such as task calendar

00:23:38,380 --> 00:23:46,150
access address book and cryptography

00:23:41,910 --> 00:23:48,520
api's it's one thing to point out is

00:23:46,150 --> 00:23:50,620
that the control to API signing is for

00:23:48,520 --> 00:23:52,630
tracking it's not for security at all

00:23:50,620 --> 00:23:54,490
it's just for basically saying this is

00:23:52,630 --> 00:23:58,030
who that this is the app this is who

00:23:54,490 --> 00:23:59,410
this is who wrote it research in motion

00:23:58,030 --> 00:24:01,060
never really receives the source code

00:23:59,410 --> 00:24:03,280
for the application and they only

00:24:01,060 --> 00:24:05,200
require a check some of the source so

00:24:03,280 --> 00:24:07,780
they can determine that you know it

00:24:05,200 --> 00:24:09,630
hasn't been altered or tampered it's a

00:24:07,780 --> 00:24:11,570
twenty-dollar application fee and

00:24:09,630 --> 00:24:18,470
anonymous sign up its past

00:24:11,570 --> 00:24:21,230
we'll via a prepaid credit card there's

00:24:18,470 --> 00:24:24,590
multiple VPN support for this and its

00:24:21,230 --> 00:24:26,300
uses utilizes appreciated keys for

00:24:24,590 --> 00:24:27,980
authentication client certificate and

00:24:26,300 --> 00:24:32,000
two-factor authentication such as RSA

00:24:27,980 --> 00:24:36,440
securid s you can also use a smart card

00:24:32,000 --> 00:24:38,510
to authenticate to the device as far as

00:24:36,440 --> 00:24:40,790
author ization goes there server-side

00:24:38,510 --> 00:24:42,320
authentication and authorization but

00:24:40,790 --> 00:24:43,970
that has to be implemented by the

00:24:42,320 --> 00:24:46,180
application developer and that's for use

00:24:43,970 --> 00:24:48,740
with the BlackBerry Enterprise Server

00:24:46,180 --> 00:24:50,840
apps can read and write to only certain

00:24:48,740 --> 00:24:54,650
locations with on the device is very

00:24:50,840 --> 00:24:56,030
similar to iOS here's an example here of

00:24:54,650 --> 00:24:59,210
a path that you could write you from

00:24:56,030 --> 00:25:00,770
your application and there's no file

00:24:59,210 --> 00:25:03,110
access restrictions between applications

00:25:00,770 --> 00:25:07,430
to basically applications can talk to

00:25:03,110 --> 00:25:08,990
other application files persistent

00:25:07,430 --> 00:25:11,780
storage so data can be stored on flash

00:25:08,990 --> 00:25:12,770
memory and the control that as I

00:25:11,780 --> 00:25:15,170
mentioned earlier the controlled access

00:25:12,770 --> 00:25:18,590
api's have to be are available for

00:25:15,170 --> 00:25:21,530
signed applications so the distribution

00:25:18,590 --> 00:25:23,660
model for blackberry applications is the

00:25:21,530 --> 00:25:25,550
blackberry app world it's basically an

00:25:23,660 --> 00:25:27,890
online software store very similar to

00:25:25,550 --> 00:25:30,770
Android and iOS there's no registration

00:25:27,890 --> 00:25:33,170
fees and the submitted registrations are

00:25:30,770 --> 00:25:34,520
reviewed in quotes before being accepted

00:25:33,170 --> 00:25:36,920
to the app world there's not really a

00:25:34,520 --> 00:25:38,930
lot of information as to what happens in

00:25:36,920 --> 00:25:41,150
that review process or what sort of

00:25:38,930 --> 00:25:43,580
security testing or lack thereof occurs

00:25:41,150 --> 00:25:45,650
so that's something to be aware of just

00:25:43,580 --> 00:25:47,540
like Android when you install an app on

00:25:45,650 --> 00:25:50,330
blackberry you sideload it just like the

00:25:47,540 --> 00:25:52,400
apk file and it uses the BES for

00:25:50,330 --> 00:25:54,290
organizations uses the BlackBerry

00:25:52,400 --> 00:25:59,180
Enterprise Server to push applications

00:25:54,290 --> 00:26:00,770
out to devices so there's three

00:25:59,180 --> 00:26:02,260
categories of permissions for each

00:26:00,770 --> 00:26:05,390
application that's connections

00:26:02,260 --> 00:26:06,980
interactions and user data each

00:26:05,390 --> 00:26:08,840
permission has three settings and that's

00:26:06,980 --> 00:26:10,610
allow prompt and deny and that's

00:26:08,840 --> 00:26:13,910
something that gives the user more

00:26:10,610 --> 00:26:16,490
control those two does that application

00:26:13,910 --> 00:26:17,990
have access to certain parts of the

00:26:16,490 --> 00:26:21,530
application or certain functions on the

00:26:17,990 --> 00:26:23,570
device and the application will set

00:26:21,530 --> 00:26:25,159
permissions after installation but users

00:26:23,570 --> 00:26:26,570
can modify those so if

00:26:25,159 --> 00:26:28,249
if you set it to allow and you want to

00:26:26,570 --> 00:26:29,509
go set it to a not deny or prompt you

00:26:28,249 --> 00:26:35,149
you have the control to do that as a

00:26:29,509 --> 00:26:37,700
user so here are some applications that

00:26:35,149 --> 00:26:40,789
some settings that are typical on a

00:26:37,700 --> 00:26:43,220
blackberry device you've got and this is

00:26:40,789 --> 00:26:45,859
by default USB is allow Bluetooth allow

00:26:43,220 --> 00:26:47,899
phone is to prompt location data is to

00:26:45,859 --> 00:26:50,090
prompt a few that I wanted to kind of

00:26:47,899 --> 00:26:52,789
point out are the Internet is set to

00:26:50,090 --> 00:26:54,979
allow by default bluetooth USB and

00:26:52,789 --> 00:26:56,659
device settings are all set to allow by

00:26:54,979 --> 00:26:59,599
default so it doesn't necessarily prompt

00:26:56,659 --> 00:27:02,440
the user or automatically deny access in

00:26:59,599 --> 00:27:02,440
the beginning from other applications

00:27:03,009 --> 00:27:08,509
from an enterprise perspective it's a

00:27:06,830 --> 00:27:11,409
centralized link between devices in the

00:27:08,509 --> 00:27:15,379
corporate network using the BES model it

00:27:11,409 --> 00:27:17,749
supports more than 450 IT policy rules

00:27:15,379 --> 00:27:19,399
which is you know definitely beneficial

00:27:17,749 --> 00:27:21,679
for a large organization that wants to

00:27:19,399 --> 00:27:23,919
have a good bit of control over policies

00:27:21,679 --> 00:27:27,529
for all of their users and the devices

00:27:23,919 --> 00:27:30,289
that's over the air privacy policy

00:27:27,529 --> 00:27:33,440
enforcement into an encryption between

00:27:30,289 --> 00:27:36,049
all the devices and the back in bes

00:27:33,440 --> 00:27:38,539
server and it's great for emails

00:27:36,049 --> 00:27:42,169
messaging collaboration services in the

00:27:38,539 --> 00:27:44,359
mobile data systems communication so

00:27:42,169 --> 00:27:47,690
kind of a recap I put together this

00:27:44,359 --> 00:27:50,899
diagram here that sort of lays out where

00:27:47,690 --> 00:27:54,349
the security is better in certain os's

00:27:50,899 --> 00:27:58,429
and they're all not bad but iOS sort of

00:27:54,349 --> 00:28:00,349
leading but the I would say that Android

00:27:58,429 --> 00:28:03,049
and be in by barrier not too far behind

00:28:00,349 --> 00:28:04,669
the green area is the strongest part of

00:28:03,049 --> 00:28:13,489
security the red being security not

00:28:04,669 --> 00:28:15,229
available at all and as far as from this

00:28:13,489 --> 00:28:17,720
is come to continue the last screen I'll

00:28:15,229 --> 00:28:20,269
go back here the first line their device

00:28:17,720 --> 00:28:22,609
authentication device encryption app

00:28:20,269 --> 00:28:24,830
application sandbox application

00:28:22,609 --> 00:28:27,679
permissions application signing and then

00:28:24,830 --> 00:28:28,849
the next page here policy enforcement is

00:28:27,679 --> 00:28:31,759
not something that you can do with the

00:28:28,849 --> 00:28:34,820
Android same with remote wipe and VPN

00:28:31,759 --> 00:28:37,180
and then device to factors something is

00:28:34,820 --> 00:28:39,190
still missing from iOS and Android

00:28:37,180 --> 00:28:42,760
and then restricting third-party apps is

00:28:39,190 --> 00:28:47,080
not possible with Android so let's talk

00:28:42,760 --> 00:28:50,080
a little bit about threat vectors mobile

00:28:47,080 --> 00:28:53,050
applications are a lot they have a very

00:28:50,080 --> 00:28:56,140
similar security aspects to a thick

00:28:53,050 --> 00:28:57,670
client or a web application it's

00:28:56,140 --> 00:29:00,070
basically think of it as a thick client

00:28:57,670 --> 00:29:01,360
that's stored in your pocket versus you

00:29:00,070 --> 00:29:03,580
know web applications is just running

00:29:01,360 --> 00:29:06,550
and you can access it via a browser or

00:29:03,580 --> 00:29:08,530
whatnot the threat model process is

00:29:06,550 --> 00:29:10,570
basically if you're if you're going to

00:29:08,530 --> 00:29:12,190
take a look at your at your mobile

00:29:10,570 --> 00:29:14,560
application you want to make sure that

00:29:12,190 --> 00:29:16,720
you're protected you want to diagram the

00:29:14,560 --> 00:29:18,910
overall application architecture see

00:29:16,720 --> 00:29:22,240
where the data flows see where the data

00:29:18,910 --> 00:29:24,070
is stored look at where you know how is

00:29:22,240 --> 00:29:26,890
the data secured at rest how is it

00:29:24,070 --> 00:29:28,330
secured in transit who has access to it

00:29:26,890 --> 00:29:29,860
what are the number of roles you want to

00:29:28,330 --> 00:29:32,100
look at the overall architecture what's

00:29:29,860 --> 00:29:35,920
involved and how many components are

00:29:32,100 --> 00:29:38,470
required for your application itself you

00:29:35,920 --> 00:29:40,870
can use a frame like stride or CIA to

00:29:38,470 --> 00:29:43,300
prevent potential threats and you can

00:29:40,870 --> 00:29:46,000
document you know the rate of the rate

00:29:43,300 --> 00:29:47,230
of the threads so the stride method i'll

00:29:46,000 --> 00:29:49,750
go through this through this kind of

00:29:47,230 --> 00:29:52,170
quick here you basically stride breaks

00:29:49,750 --> 00:29:54,520
down to spoofing tampering repudiation

00:29:52,170 --> 00:29:57,400
information disclosure denial of service

00:29:54,520 --> 00:29:59,970
and elevation of privilege and these all

00:29:57,400 --> 00:30:02,890
tie into authentication integrity

00:29:59,970 --> 00:30:04,840
non-repudiation confidential

00:30:02,890 --> 00:30:08,730
confidentiality and availability and

00:30:04,840 --> 00:30:08,730
authorization as far as what the risk is

00:30:09,780 --> 00:30:14,410
another great resource when you're

00:30:12,160 --> 00:30:17,520
looking at mobile threats is to leverage

00:30:14,410 --> 00:30:20,440
the OAuth they have a mobile top 10 now

00:30:17,520 --> 00:30:23,200
there are some similarities to the Apple

00:30:20,440 --> 00:30:24,220
the standard application top 10 but just

00:30:23,200 --> 00:30:27,400
to go through these quickly you have

00:30:24,220 --> 00:30:29,470
insecure data storage week server side

00:30:27,400 --> 00:30:31,720
controls insufficient transportation

00:30:29,470 --> 00:30:33,480
layer protection client-side injection

00:30:31,720 --> 00:30:36,430
poor authorization and authentication

00:30:33,480 --> 00:30:39,640
improper session handling secure

00:30:36,430 --> 00:30:41,530
decisions via untrusted inputs secure

00:30:39,640 --> 00:30:45,520
channel data leakage broken cryptography

00:30:41,530 --> 00:30:47,800
and sensitive information disclosure so

00:30:45,520 --> 00:30:49,960
here's a generic mobile app architecture

00:30:47,800 --> 00:30:52,929
I mentioned earlier you want to diagram

00:30:49,960 --> 00:30:55,120
the overlay of sort of the the layout of

00:30:52,929 --> 00:30:57,100
what talks to your application and

00:30:55,120 --> 00:30:58,659
where's your data going so in this case

00:30:57,100 --> 00:31:01,330
we have the device here in the center

00:30:58,659 --> 00:31:03,370
and it talks to a number of things we've

00:31:01,330 --> 00:31:05,740
got third party web servers we have an

00:31:03,370 --> 00:31:08,950
application web service we have a cell

00:31:05,740 --> 00:31:12,220
tower and in a Wi-Fi or a Wi-Fi access

00:31:08,950 --> 00:31:14,409
point we've got the user itself we've

00:31:12,220 --> 00:31:16,299
got device and application backups that

00:31:14,409 --> 00:31:18,130
may be stored on your local system when

00:31:16,299 --> 00:31:19,960
you plug it in and then you've got

00:31:18,130 --> 00:31:22,330
device storage and external storage

00:31:19,960 --> 00:31:23,919
maybe on an SD card and this is just

00:31:22,330 --> 00:31:26,529
kind of a generic model you may or you

00:31:23,919 --> 00:31:28,200
may have some more of these you may not

00:31:26,529 --> 00:31:36,820
have all of these in your application

00:31:28,200 --> 00:31:38,590
architecture so just to kind of outline

00:31:36,820 --> 00:31:40,000
some of the things I'm not picking on

00:31:38,590 --> 00:31:43,929
any one specific these are just kind of

00:31:40,000 --> 00:31:46,210
some headlines here where city had they

00:31:43,929 --> 00:31:49,390
basically disclose how to disclose

00:31:46,210 --> 00:31:51,070
security flaw in their iphone app and

00:31:49,390 --> 00:31:54,460
what it was doing was it was storing

00:31:51,070 --> 00:31:56,409
sensitive data locally on the device in

00:31:54,460 --> 00:31:58,690
an unencrypted manner and so when that

00:31:56,409 --> 00:32:00,970
was backed up it was also storing in

00:31:58,690 --> 00:32:03,490
when you know in backups in CLE in plain

00:32:00,970 --> 00:32:05,140
text as well so this has all been fixed

00:32:03,490 --> 00:32:06,970
but this is something that kind of came

00:32:05,140 --> 00:32:08,980
out in the news a while back I just want

00:32:06,970 --> 00:32:11,080
to point out that I guess no

00:32:08,980 --> 00:32:13,350
organization wants to end up on the

00:32:11,080 --> 00:32:17,610
front of a you know be a headline

00:32:13,350 --> 00:32:17,610
because of a security fall such as this

00:32:18,929 --> 00:32:22,750
there were also wells fargo and bank of

00:32:21,010 --> 00:32:23,679
america nap bank of america applications

00:32:22,750 --> 00:32:26,470
these have since been cleaned up but

00:32:23,679 --> 00:32:28,360
they were in securely storing sensitive

00:32:26,470 --> 00:32:30,520
data on their application this included

00:32:28,360 --> 00:32:33,580
login credentials applica account

00:32:30,520 --> 00:32:35,500
numbers balance transfer information it

00:32:33,580 --> 00:32:37,090
was reported to the media just a couple

00:32:35,500 --> 00:32:39,279
days after disclosing it to the vendor

00:32:37,090 --> 00:32:45,220
and you know like i said no organization

00:32:39,279 --> 00:32:49,149
really enjoys bad press so next I'm

00:32:45,220 --> 00:32:50,350
going to go through another demo but I

00:32:49,149 --> 00:32:53,320
just want to talk a little bit about

00:32:50,350 --> 00:32:56,440
what this is here it's something called

00:32:53,320 --> 00:32:59,289
iOS backup extractor and what it does is

00:32:56,440 --> 00:33:03,610
it allows me to extract the data from

00:32:59,289 --> 00:33:05,080
the local backup that iTunes does on Io

00:33:03,610 --> 00:33:07,090
I said they backs up your local device

00:33:05,080 --> 00:33:08,710
and I can use this tool right here to

00:33:07,090 --> 00:33:09,970
extract that data out and then we can go

00:33:08,710 --> 00:33:11,860
in and read some and so I'm going to

00:33:09,970 --> 00:33:14,940
show you a demo of how this works it was

00:33:11,860 --> 00:33:14,940
a freely available tool

00:33:39,140 --> 00:33:44,630
okay so in this case on a Windows system

00:33:42,110 --> 00:33:52,550
here and we're going to run this iphone

00:33:44,630 --> 00:33:53,900
backup extractor executable and it's

00:33:52,550 --> 00:33:57,320
basically you can go here and you can

00:33:53,900 --> 00:34:05,120
find a recent backup that you did on the

00:33:57,320 --> 00:34:06,350
device select it in the drop down it's

00:34:05,120 --> 00:34:14,720
got some basic information that's

00:34:06,350 --> 00:34:17,060
available within the backup itself so

00:34:14,720 --> 00:34:20,090
we're going to set select something

00:34:17,060 --> 00:34:22,520
specific to extract from it anyone play

00:34:20,090 --> 00:34:24,350
words with friends or familiar with that

00:34:22,520 --> 00:34:28,220
app so we're going to kind of pick on

00:34:24,350 --> 00:34:30,770
them and see what kind of data may be

00:34:28,220 --> 00:34:34,340
stored in their local sequel light

00:34:30,770 --> 00:34:40,100
database so we're going to extract that

00:34:34,340 --> 00:34:42,880
to just our local hard drive here so

00:34:40,100 --> 00:34:42,880
everything gets restored

00:34:54,680 --> 00:34:58,970
so we've got the this looks interesting

00:34:57,230 --> 00:35:02,540
right here the chest database sequel

00:34:58,970 --> 00:35:04,910
light file so we're going to take a look

00:35:02,540 --> 00:35:08,780
at that in a sequel light database

00:35:04,910 --> 00:35:10,580
viewer so here's the data here in the

00:35:08,780 --> 00:35:13,700
device and we're going to take a look at

00:35:10,580 --> 00:35:16,970
the tables here and we're going to go

00:35:13,700 --> 00:35:18,260
look at the user table and we're going

00:35:16,970 --> 00:35:20,660
to go out we only have one record this

00:35:18,260 --> 00:35:21,920
is our one user that we have here and we

00:35:20,660 --> 00:35:23,540
want to first of all point out here's

00:35:21,920 --> 00:35:31,370
our email address that's stored in clear

00:35:23,540 --> 00:35:32,840
text here on the device and then we have

00:35:31,370 --> 00:35:35,210
an encoded authentication which looks

00:35:32,840 --> 00:35:36,650
like the password so we're basically

00:35:35,210 --> 00:35:39,580
just going to take that password there

00:35:36,650 --> 00:35:39,580
pull it out

00:35:47,540 --> 00:35:53,930
I'm going to load it into burp decoder

00:35:49,250 --> 00:35:55,010
here and there we go you can take a look

00:35:53,930 --> 00:35:56,540
here i'm going to pauls that so you can

00:35:55,010 --> 00:35:58,700
kind of take a look and you can see it

00:35:56,540 --> 00:36:01,670
basically in that in that string there

00:35:58,700 --> 00:36:04,460
it's storing the password which is this

00:36:01,670 --> 00:36:05,960
is my demo password and the username so

00:36:04,460 --> 00:36:07,490
you could basically take this

00:36:05,960 --> 00:36:10,660
information and go log into words with

00:36:07,490 --> 00:36:10,660
friends with someone else's account

00:36:20,160 --> 00:36:22,220
you

00:36:27,369 --> 00:36:31,450
so a couple other examples here and I

00:36:30,339 --> 00:36:32,470
don't have demos for these I just want

00:36:31,450 --> 00:36:35,640
to kind of go through a couple other

00:36:32,470 --> 00:36:37,480
applications that are available that

00:36:35,640 --> 00:36:39,910
I'll get to them in a minute but they

00:36:37,480 --> 00:36:42,220
may appear to be valid applications but

00:36:39,910 --> 00:36:44,259
they were written and they have malware

00:36:42,220 --> 00:36:45,400
or they have other intentions then you

00:36:44,259 --> 00:36:48,369
know to be a flashlight or something

00:36:45,400 --> 00:36:52,029
like that so Android does not provide

00:36:48,369 --> 00:36:55,089
native backup the solution so backups

00:36:52,029 --> 00:36:56,049
are backup applications can be installed

00:36:55,089 --> 00:36:57,339
you there's a couple different

00:36:56,049 --> 00:36:59,470
applications there's a couple different

00:36:57,339 --> 00:37:01,720
backup solutions such as astro file

00:36:59,470 --> 00:37:05,200
manager there's other tools that you can

00:37:01,720 --> 00:37:07,269
use for backing up to an SD card and

00:37:05,200 --> 00:37:08,829
even though there's no native no native

00:37:07,269 --> 00:37:11,950
back up there still you know a

00:37:08,829 --> 00:37:17,490
considered a potential for information

00:37:11,950 --> 00:37:20,009
disclosure threat for blackberry there's

00:37:17,490 --> 00:37:22,450
ipd dump which is an open source project

00:37:20,009 --> 00:37:24,430
it's basically utility which extracts

00:37:22,450 --> 00:37:27,150
records from the unencrypted blackberry

00:37:24,430 --> 00:37:27,150
backups

00:37:33,790 --> 00:37:38,140
so I mentioned a couple malicious

00:37:36,010 --> 00:37:40,570
applications here's one here it's called

00:37:38,140 --> 00:37:41,920
handy light for iOS and this one's

00:37:40,570 --> 00:37:43,690
interesting most people will just

00:37:41,920 --> 00:37:45,730
download this so that you know when

00:37:43,690 --> 00:37:48,610
they're trying to fumble into bed at

00:37:45,730 --> 00:37:50,290
night they can you know use this as a

00:37:48,610 --> 00:37:51,850
flashlight plug in their phone and so

00:37:50,290 --> 00:37:55,180
forth so it's disguised to be a

00:37:51,850 --> 00:37:58,630
flashlight application but in reality it

00:37:55,180 --> 00:38:02,380
success forbidden api's it allows device

00:37:58,630 --> 00:38:04,540
to enable tethering with a PC it managed

00:38:02,380 --> 00:38:06,850
to be somehow managed to be accepted in

00:38:04,540 --> 00:38:09,700
the island the App Store and it was

00:38:06,850 --> 00:38:11,770
eventually removed by Apple but this is

00:38:09,700 --> 00:38:14,440
kind of one to point out here that it is

00:38:11,770 --> 00:38:15,790
possible to get malicious applications

00:38:14,440 --> 00:38:19,930
with malicious intent into the

00:38:15,790 --> 00:38:22,120
application store here's one for Android

00:38:19,930 --> 00:38:24,790
it's basically there's some fraudulent

00:38:22,120 --> 00:38:26,860
banking applications and this

00:38:24,790 --> 00:38:29,050
application here was sort of a

00:38:26,860 --> 00:38:31,180
all-in-one finance app which you could

00:38:29,050 --> 00:38:34,240
log into multiple app multiple types of

00:38:31,180 --> 00:38:37,650
financial institutions banks investment

00:38:34,240 --> 00:38:40,390
firms and so forth and it basically

00:38:37,650 --> 00:38:43,300
would take your data and steal your

00:38:40,390 --> 00:38:45,760
login credentials and port them off back

00:38:43,300 --> 00:38:47,230
to it to a back-end server Google

00:38:45,760 --> 00:38:53,710
noticed this and the application was

00:38:47,230 --> 00:38:55,870
removed from the from the App Store so

00:38:53,710 --> 00:38:59,470
there's also Android malware attacks

00:38:55,870 --> 00:39:01,450
which is the SW secure phone what the

00:38:59,470 --> 00:39:04,300
app did was basically monitor messages

00:39:01,450 --> 00:39:06,220
call logs location images recorded

00:39:04,300 --> 00:39:08,890
sounds around the phone and it would

00:39:06,220 --> 00:39:12,280
upload those to a remote server every 20

00:39:08,890 --> 00:39:15,340
seconds and then there's the droid dream

00:39:12,280 --> 00:39:17,650
which basically exploded a kernel

00:39:15,340 --> 00:39:20,050
vulnerability in order to gain root

00:39:17,650 --> 00:39:22,630
privileges on the device and it gathers

00:39:20,050 --> 00:39:25,120
data device information and uploads that

00:39:22,630 --> 00:39:27,040
to a remote server and over 50

00:39:25,120 --> 00:39:33,910
applications were found to contain this

00:39:27,040 --> 00:39:35,410
actual malware there's tsx BB spy which

00:39:33,910 --> 00:39:37,930
it was basically a proof-of-concept

00:39:35,410 --> 00:39:41,500
application to demonstrate that spyware

00:39:37,930 --> 00:39:45,100
capabilities could be used in the

00:39:41,500 --> 00:39:47,200
blackberry ipi or leverage the AP out of

00:39:45,100 --> 00:39:48,130
the blueberry api it demonstrates the

00:39:47,200 --> 00:39:50,920
ability to dump

00:39:48,130 --> 00:39:54,010
the contacts and messages capture SMS

00:39:50,920 --> 00:39:57,250
messages monitor phone usage and GPS

00:39:54,010 --> 00:39:58,870
data and the applications are signed not

00:39:57,250 --> 00:40:00,940
audited as I mentioned earlier so that's

00:39:58,870 --> 00:40:03,550
something to keep in keep in mind and

00:40:00,940 --> 00:40:09,880
once installed it's pretty much trivial

00:40:03,550 --> 00:40:12,310
to steal the data so from a jailbreaking

00:40:09,880 --> 00:40:14,320
standpoint um it basically what is

00:40:12,310 --> 00:40:17,440
jailbreaking and routing it basically

00:40:14,320 --> 00:40:19,360
exploits a vulnerability or escalation

00:40:17,440 --> 00:40:23,140
vulnerability on the device itself and

00:40:19,360 --> 00:40:25,780
it's used to circumvent the OS security

00:40:23,140 --> 00:40:27,760
restrictions such as code signing filing

00:40:25,780 --> 00:40:31,060
resource permissions and application

00:40:27,760 --> 00:40:33,400
permissions and at that point once it's

00:40:31,060 --> 00:40:35,320
jailbroken it's pretty much fair game

00:40:33,400 --> 00:40:38,290
for any any application can be installed

00:40:35,320 --> 00:40:40,080
on it and so you're not so you're

00:40:38,290 --> 00:40:42,250
basically you're not protected by

00:40:40,080 --> 00:40:44,020
someone like Apple that's that's

00:40:42,250 --> 00:40:45,370
actually signing these applications

00:40:44,020 --> 00:40:47,170
before they get installed in your device

00:40:45,370 --> 00:40:51,190
you're pretty much on your own at that

00:40:47,170 --> 00:40:52,630
point a couple tools there are a number

00:40:51,190 --> 00:40:55,690
of them out there but a couple of them

00:40:52,630 --> 00:40:59,350
that kind of came to mind are evasion

00:40:55,690 --> 00:41:01,510
and redsnow for iOS and they're both

00:40:59,350 --> 00:41:03,370
tethered jailbreaks and you can

00:41:01,510 --> 00:41:06,760
basically download the app and then just

00:41:03,370 --> 00:41:13,420
connect the device and these work on the

00:41:06,760 --> 00:41:15,190
later versions of iOS 6.1 to and 6.1 for

00:41:13,420 --> 00:41:18,250
Android there are a large number of

00:41:15,190 --> 00:41:20,170
rooting devices or routing scripts and

00:41:18,250 --> 00:41:23,560
apps available that Universal Android

00:41:20,170 --> 00:41:25,990
and root Z for basically the user

00:41:23,560 --> 00:41:29,830
installs the APA APK file on the device

00:41:25,990 --> 00:41:31,780
itself and then the routing is via

00:41:29,830 --> 00:41:35,980
connected android devices superoneclick

00:41:31,780 --> 00:41:38,260
or unrevoked and it typically exploits a

00:41:35,980 --> 00:41:41,950
linux security vulnerability in the

00:41:38,260 --> 00:41:45,810
kernel and as i said there's there's no

00:41:41,950 --> 00:41:45,810
shortage of Android rooting mechanisms

00:41:54,960 --> 00:41:59,820
so kind of wanted to do a little recap

00:41:57,599 --> 00:42:02,430
on the threat modeling itself as I

00:41:59,820 --> 00:42:04,849
mentioned it's it's a great idea to look

00:42:02,430 --> 00:42:07,170
at the architecture of your application

00:42:04,849 --> 00:42:08,820
itself and what it connects to and so

00:42:07,170 --> 00:42:10,500
forth to look at the type of data that

00:42:08,820 --> 00:42:13,349
it stores to look to the type of data

00:42:10,500 --> 00:42:14,940
that it transmits the OS security

00:42:13,349 --> 00:42:16,950
features can only really help mitigate

00:42:14,940 --> 00:42:18,570
some of the risks so to a degree it's at

00:42:16,950 --> 00:42:21,210
the developer to make sure that they're

00:42:18,570 --> 00:42:25,099
using the best security practices and

00:42:21,210 --> 00:42:27,060
coding practices available and

00:42:25,099 --> 00:42:28,770
unfortunately devices will not always be

00:42:27,060 --> 00:42:31,710
using these features so it's kind up to

00:42:28,770 --> 00:42:34,530
the user for example to set a passcode

00:42:31,710 --> 00:42:35,849
or a strong passcode on the device so

00:42:34,530 --> 00:42:38,880
that some of the developers don't really

00:42:35,849 --> 00:42:40,650
have control over so there are security

00:42:38,880 --> 00:42:44,940
mechanisms that we can leverage and

00:42:40,650 --> 00:42:47,940
those that we can we should should

00:42:44,940 --> 00:42:49,650
implement device management for policy

00:42:47,940 --> 00:42:51,630
enforcement and security distribution of

00:42:49,650 --> 00:42:53,520
applications for large organizations or

00:42:51,630 --> 00:42:55,859
for organizations in general and then

00:42:53,520 --> 00:42:57,810
harden and limit access to server side

00:42:55,859 --> 00:42:59,670
resources consumed by the mobile clients

00:42:57,810 --> 00:43:02,190
and that's becoming more and more

00:42:59,670 --> 00:43:04,290
prevalent these days pretty much every

00:43:02,190 --> 00:43:11,160
app connects back to some sort of remote

00:43:04,290 --> 00:43:13,680
server so from a secure coding practices

00:43:11,160 --> 00:43:16,410
standpoint you can mitigate you know the

00:43:13,680 --> 00:43:20,099
following riff threats unlock device

00:43:16,410 --> 00:43:22,700
offline file system attacks unencrypted

00:43:20,099 --> 00:43:26,040
backups malicious applications

00:43:22,700 --> 00:43:28,320
application reverse engineering client

00:43:26,040 --> 00:43:30,119
input validation flaws such as buffer

00:43:28,320 --> 00:43:32,339
overflows sequel injection and so forth

00:43:30,119 --> 00:43:37,680
and security vulnerabilities on a web

00:43:32,339 --> 00:43:40,170
service I'm talking briefly about

00:43:37,680 --> 00:43:42,060
securing devices and apps and in ways

00:43:40,170 --> 00:43:44,430
that you can do that and the first one

00:43:42,060 --> 00:43:45,720
is to enforce password policy so you

00:43:44,430 --> 00:43:49,410
want to make sure you have a strong and

00:43:45,720 --> 00:43:52,589
complex password policy limit the number

00:43:49,410 --> 00:43:55,740
of retries and have a grace period

00:43:52,589 --> 00:43:58,230
before the device actually locks I

00:43:55,740 --> 00:44:01,070
enable remote or have that basically the

00:43:58,230 --> 00:44:03,980
functionality for remote lock and wiping

00:44:01,070 --> 00:44:06,780
restrict third party applications and

00:44:03,980 --> 00:44:08,460
require a VPN if possible whenever

00:44:06,780 --> 00:44:15,869
accessing organization

00:44:08,460 --> 00:44:18,150
data via web services or sites some

00:44:15,869 --> 00:44:20,760
application development tips sensitive

00:44:18,150 --> 00:44:24,290
data in transit should be secured a sent

00:44:20,760 --> 00:44:27,030
over a secure channel such as a ssl if

00:44:24,290 --> 00:44:30,089
sensitive data must be stored on the

00:44:27,030 --> 00:44:32,369
device encrypt the data at rest using a

00:44:30,089 --> 00:44:35,970
platform scription such as the keychain

00:44:32,369 --> 00:44:38,339
for iOS mask sensitive information such

00:44:35,970 --> 00:44:41,369
as password fields so that prevents

00:44:38,339 --> 00:44:43,500
shoulder surfing authentication must be

00:44:41,369 --> 00:44:46,619
equivalent to a corresponding web

00:44:43,500 --> 00:44:51,210
application validate input server-side

00:44:46,619 --> 00:44:52,619
or receive from an external source so

00:44:51,210 --> 00:44:56,010
basically trust no one other you no

00:44:52,619 --> 00:44:57,740
trust no one outside of yourself handle

00:44:56,010 --> 00:45:00,510
sensitive data carefully to avoid

00:44:57,740 --> 00:45:03,750
inadvertent leakage so that goes for

00:45:00,510 --> 00:45:09,450
third-party Services IPC you are

00:45:03,750 --> 00:45:10,680
handlers pasteboard email etc and that's

00:45:09,450 --> 00:45:12,900
pretty much it i just wanted to kind of

00:45:10,680 --> 00:45:14,970
note a couple resources that were used

00:45:12,900 --> 00:45:23,880
when we put together this presentation

00:45:14,970 --> 00:45:31,140
here and that's it are there any

00:45:23,880 --> 00:45:33,030
questions yes okay thank you I don't

00:45:31,140 --> 00:45:36,150
have a blackberry device and some of the

00:45:33,030 --> 00:45:41,799
data wasn't limited so qnx okay i'll

00:45:36,150 --> 00:45:47,829
update my slides thank you okay

00:45:41,799 --> 00:45:47,829
thank you thank you yes sir

00:45:58,849 --> 00:46:05,009
this would the swf phone was it's gone

00:46:03,569 --> 00:46:06,469
you can't get it anymore you can't

00:46:05,009 --> 00:46:11,069
leverage anymore but that was probably

00:46:06,469 --> 00:46:12,239
three years ago at the time the restate

00:46:11,069 --> 00:46:14,809
your question as far as what you could

00:46:12,239 --> 00:46:20,179
do with it is that what you said well

00:46:14,809 --> 00:46:20,179
yeah let me go back to that one mm-hmm

00:46:20,449 --> 00:46:36,599
here we go yeah monitoring messages call

00:46:24,029 --> 00:46:38,219
logs so at the time it bypassed it

00:46:36,599 --> 00:46:40,349
because that was allowed by default and

00:46:38,219 --> 00:46:42,689
that since been changed and this

00:46:40,349 --> 00:46:44,130
application has been removed as well so

00:46:42,689 --> 00:46:46,349
you can't even get this in anymore this

00:46:44,130 --> 00:46:49,859
is these are just some examples and some

00:46:46,349 --> 00:46:52,109
of these examples are when I when the

00:46:49,859 --> 00:46:54,179
marketplaces were originally introduced

00:46:52,109 --> 00:46:56,189
there still are some that you know you

00:46:54,179 --> 00:46:57,869
see from time to time but they are far

00:46:56,189 --> 00:47:06,979
further and few between if you were

00:46:57,869 --> 00:47:06,979
between any other questions yes sir

00:47:10,050 --> 00:47:26,470
you can use our RSA securid USB keys are

00:47:24,550 --> 00:47:28,510
not supportive for iOS I did hear that

00:47:26,470 --> 00:47:30,070
fingerprinting is coming with the next

00:47:28,510 --> 00:47:32,380
version so we'll probably know on monday

00:47:30,070 --> 00:47:34,690
about that but i've heard is that you're

00:47:32,380 --> 00:47:36,880
speaking of the rumor for that yeah i

00:47:34,690 --> 00:47:39,430
saw that as well so as of now there's

00:47:36,880 --> 00:47:49,870
not an external device authentication

00:47:39,430 --> 00:47:52,840
mechanism yes the encryption itself it's

00:47:49,870 --> 00:47:54,280
i believe it's 256-bit AES that's

00:47:52,840 --> 00:47:56,560
locally on the device so if you encrypt

00:47:54,280 --> 00:47:59,020
it same as it would be on the device

00:47:56,560 --> 00:48:01,240
itself yeah so you're good as long as

00:47:59,020 --> 00:48:02,620
you the one thing I wanted to point out

00:48:01,240 --> 00:48:04,720
what that is that you have to check that

00:48:02,620 --> 00:48:06,220
box and most people are not going to

00:48:04,720 --> 00:48:08,530
check that box we as security minded

00:48:06,220 --> 00:48:11,940
people probably will I do but my mom

00:48:08,530 --> 00:48:11,940
doesn't so

00:48:17,360 --> 00:48:28,860
mm-hmm so they can do the remote exactly

00:48:26,700 --> 00:48:31,260
that's a really good point she says just

00:48:28,860 --> 00:48:33,390
to restate what what you said is that if

00:48:31,260 --> 00:48:35,130
you have an enterprise model or

00:48:33,390 --> 00:48:38,190
enterprise management system set up for

00:48:35,130 --> 00:48:39,540
iOS the enterprise itself has part of

00:48:38,190 --> 00:48:41,970
that you know the other symmetric key

00:48:39,540 --> 00:48:44,010
that's how they do remote wipe they can

00:48:41,970 --> 00:48:46,740
remove the key and they can remote wipe

00:48:44,010 --> 00:48:50,070
it from from afar so if the device gets

00:48:46,740 --> 00:48:52,770
lost which is common I think you know a

00:48:50,070 --> 00:48:55,650
number of years ago the was it I was at

00:48:52,770 --> 00:48:57,090
the iphone four got leaked and you know

00:48:55,650 --> 00:48:58,860
they did like a remote wipe on that

00:48:57,090 --> 00:49:02,730
thing so they so no one could figure out

00:48:58,860 --> 00:49:05,960
what it was gizmodo did but but that was

00:49:02,730 --> 00:49:05,960
interesting yes sir

00:49:14,940 --> 00:49:21,130
the only issue 1 her organization so I

00:49:19,360 --> 00:49:24,720
have worked for University and our

00:49:21,130 --> 00:49:24,720
athletes departments advocates

00:49:31,890 --> 00:49:38,260
very interesting so how do they

00:49:35,530 --> 00:49:42,510
restricted it that organization level is

00:49:38,260 --> 00:49:42,510
it based on the X organization's name or

00:50:19,150 --> 00:50:24,309
alright well thanks so much for your

00:50:21,109 --> 00:50:24,309
time really appreciate it

00:50:29,020 --> 00:50:34,070
most enterprises today realize that

00:50:31,790 --> 00:50:35,750
usernames and passwords alone aren't

00:50:34,070 --> 00:50:38,120
enough to keep their networks saved from

00:50:35,750 --> 00:50:40,190
unauthorized intrusions that's my

00:50:38,120 --> 00:50:42,230
two-factor authentication has gotten so

00:50:40,190 --> 00:50:44,360
popular lately that adds that extra

00:50:42,230 --> 00:50:47,000
layer of protection enterprise networks

00:50:44,360 --> 00:50:48,770
need to stay safe but what you may not

00:50:47,000 --> 00:50:50,990
know is that some two-factor

00:50:48,770 --> 00:50:53,180
authentication solutions they're better

00:50:50,990 --> 00:50:56,240
than others like two-factor strong

00:50:53,180 --> 00:50:58,520
authentication with wicked wicked goes

00:50:56,240 --> 00:51:00,470
beyond other authentication systems by

00:50:58,520 --> 00:51:03,530
being less expensive easier to implement

00:51:00,470 --> 00:51:06,020
and easier to use giving software-based

00:51:03,530 --> 00:51:08,840
token clients built to run on all major

00:51:06,020 --> 00:51:11,470
devices and OSS including iOS and

00:51:08,840 --> 00:51:13,790
Android these tokens utilize a

00:51:11,470 --> 00:51:16,190
public/private key combination that's

00:51:13,790 --> 00:51:18,140
generated on device so there aren't any

00:51:16,190 --> 00:51:20,660
shared secrets flying around or

00:51:18,140 --> 00:51:23,540
attackers to hijack or which require any

00:51:20,660 --> 00:51:25,400
special handling instead all keys are

00:51:23,540 --> 00:51:27,860
kept secure and private between the

00:51:25,400 --> 00:51:30,050
requesting token and your server which

00:51:27,860 --> 00:51:31,690
you control aim house making it the most

00:51:30,050 --> 00:51:34,340
secure way possible to perform

00:51:31,690 --> 00:51:37,190
authentication encryption and with an

00:51:34,340 --> 00:51:39,920
extensive flexible API that support for

00:51:37,190 --> 00:51:41,900
protocols like L dev and radius wicket

00:51:39,920 --> 00:51:42,720
works with any enterprise network

00:51:41,900 --> 00:51:45,180
architecture

00:51:42,720 --> 00:51:47,790
to protect the IT systems vital to your

00:51:45,180 --> 00:51:49,890
enterprise download your wicked free

00:51:47,790 --> 00:51:51,359
trial today regardless of whether you're

00:51:49,890 --> 00:51:53,730
considering two-factor authentication

00:51:51,359 --> 00:51:56,130
for the first time or just ready to

00:51:53,730 --> 00:51:58,410
ditch your existing expensive key file

00:51:56,130 --> 00:52:00,570
system we can help with easy to

00:51:58,410 --> 00:52:04,550
implement easy to use strong

00:52:00,570 --> 00:52:04,550
authentication from wicked

00:52:48,880 --> 00:52:53,180
your customers rely on your website or

00:52:51,680 --> 00:52:55,550
application if it's slower

00:52:53,180 --> 00:52:58,490
non-responsive it infuriates your users

00:52:55,550 --> 00:53:00,320
and costs you money keeping your

00:52:58,490 --> 00:53:03,800
business critical systems humming along

00:53:00,320 --> 00:53:06,650
requires insight into what they're doing

00:53:03,800 --> 00:53:08,630
your system metrics tell stories stories

00:53:06,650 --> 00:53:10,880
that can reveal performance bottlenecks

00:53:08,630 --> 00:53:13,040
resource limitations and other problems

00:53:10,880 --> 00:53:14,960
but how do you keep an eye on all of

00:53:13,040 --> 00:53:17,570
your systems performance metrics in

00:53:14,960 --> 00:53:20,450
real-time and record this data for later

00:53:17,570 --> 00:53:22,400
analysis enter longview the new way to

00:53:20,450 --> 00:53:24,440
see what's really going on under the

00:53:22,400 --> 00:53:26,570
hood the longview dashboard lets you

00:53:24,440 --> 00:53:28,550
visualize the status of all your systems

00:53:26,570 --> 00:53:31,280
providing you with a bird's-eye view of

00:53:28,550 --> 00:53:34,400
your entire fleet you can sort by cpu

00:53:31,280 --> 00:53:36,860
memory swap processes load and network

00:53:34,400 --> 00:53:39,440
usage click a specific system to access

00:53:36,860 --> 00:53:41,450
its individual dashboard then click and

00:53:39,440 --> 00:53:44,450
drag to zoom in on chokepoints and get

00:53:41,450 --> 00:53:46,430
more detail comprehensive network data

00:53:44,450 --> 00:53:49,130
including inbound and outbound traffic

00:53:46,430 --> 00:53:50,720
is available on the network tab and disk

00:53:49,130 --> 00:53:52,610
rights and free space on the disk

00:53:50,720 --> 00:53:55,460
stabbed while the process Explorer

00:53:52,610 --> 00:53:58,010
displays usage statistics for individual

00:53:55,460 --> 00:54:00,170
processes the system info tab shows

00:53:58,010 --> 00:54:02,420
listening services active connections

00:54:00,170 --> 00:54:04,550
and available updates adding long view

00:54:02,420 --> 00:54:06,230
to a system is easy just click the

00:54:04,550 --> 00:54:08,390
button copy the one line installation

00:54:06,230 --> 00:54:10,820
command then run the command on your

00:54:08,390 --> 00:54:12,530
linux system to complete the process the

00:54:10,820 --> 00:54:14,720
agent will begin collecting data and

00:54:12,530 --> 00:54:16,549
sending it to longview then the graphs

00:54:14,720 --> 00:54:19,130
start rolling

00:54:16,549 --> 00:54:21,499
use longview to gain visibility into

00:54:19,130 --> 00:54:25,239
your servers so when your website or app

00:54:21,499 --> 00:54:25,239
heats up it stays up

00:54:28,400 --> 00:54:33,210
when we created asterisk over a decade

00:54:31,140 --> 00:54:35,430
ago we could not have imagined that

00:54:33,210 --> 00:54:37,650
asterisk would not only become the most

00:54:35,430 --> 00:54:39,780
widely adopted open source communication

00:54:37,650 --> 00:54:41,820
software on the planet but that it would

00:54:39,780 --> 00:54:44,340
impact the entire industry in the way

00:54:41,820 --> 00:54:46,320
that it has today asterisk has found its

00:54:44,340 --> 00:54:48,960
way in the more than 170 countries and

00:54:46,320 --> 00:54:50,910
virtually every fortune 1000 company the

00:54:48,960 --> 00:54:52,980
success of asterisk has enabled a

00:54:50,910 --> 00:54:54,390
transition of power from the hands of

00:54:52,980 --> 00:54:56,670
the traditional proprietary phone

00:54:54,390 --> 00:54:59,070
vendors into the hands of the users and

00:54:56,670 --> 00:55:01,020
administrators of phone systems using

00:54:59,070 --> 00:55:02,250
this power our customers have created

00:55:01,020 --> 00:55:04,170
all sorts of business changing

00:55:02,250 --> 00:55:06,030
applications from small office phone

00:55:04,170 --> 00:55:08,550
systems to mission-critical call centers

00:55:06,030 --> 00:55:10,140
the international carrier networks in

00:55:08,550 --> 00:55:11,940
fact there's even an entire country

00:55:10,140 --> 00:55:14,520
those communications infrastructure runs

00:55:11,940 --> 00:55:16,470
on esters the gym has always been about

00:55:14,520 --> 00:55:18,180
creating technology that expands

00:55:16,470 --> 00:55:20,340
communications capabilities in ways that

00:55:18,180 --> 00:55:21,540
we could never have imagined and that's

00:55:20,340 --> 00:55:24,300
part of what's game-changing about

00:55:21,540 --> 00:55:26,640
Digium today we're doing it again this

00:55:24,300 --> 00:55:28,710
time by introducing a new family of HD

00:55:26,640 --> 00:55:30,840
IP phones that extends control of the

00:55:28,710 --> 00:55:32,580
user all the way to the desktop the

00:55:30,840 --> 00:55:34,320
launch of these new products represents

00:55:32,580 --> 00:55:36,300
the next phase indigenous history of

00:55:34,320 --> 00:55:38,820
innovation these are the first and only

00:55:36,300 --> 00:55:40,500
IP phones designed to fully leverage the

00:55:38,820 --> 00:55:42,060
power of esters when we first discussed

00:55:40,500 --> 00:55:44,100
our expectations for building a family

00:55:42,060 --> 00:55:46,260
of phones for use with asterisk our

00:55:44,100 --> 00:55:48,000
requirements were pretty simple we asked

00:55:46,260 --> 00:55:49,620
the team to build the phones such that

00:55:48,000 --> 00:55:51,840
they were easy to install integrate

00:55:49,620 --> 00:55:53,670
provision and use I think you'll soon

00:55:51,840 --> 00:55:56,250
agree our engineers have delivered on

00:55:53,670 --> 00:55:57,870
that goal user feedback is validating

00:55:56,250 --> 00:55:59,970
that when it comes to operation with

00:55:57,870 --> 00:56:02,400
astro space systems including our own

00:55:59,970 --> 00:56:04,980
Switchvox based product these are the

00:56:02,400 --> 00:56:06,270
easiest to use best integrated most

00:56:04,980 --> 00:56:08,880
interoperable products on the market

00:56:06,270 --> 00:56:10,850
today the didja malia phones will

00:56:08,880 --> 00:56:12,930
initially include three IP des hommes

00:56:10,850 --> 00:56:14,850
uniquely designed to complement any

00:56:12,930 --> 00:56:16,740
asterisk or switch box based solution

00:56:14,850 --> 00:56:19,410
these phones are different for a number

00:56:16,740 --> 00:56:22,050
of reasons first there is clue sively

00:56:19,410 --> 00:56:23,490
designed for use with esters secondly

00:56:22,050 --> 00:56:25,100
we've made it really easy to

00:56:23,490 --> 00:56:27,480
autodiscover and provision the phones

00:56:25,100 --> 00:56:29,580
next we've made it easy for the phones

00:56:27,480 --> 00:56:31,140
to access information inside of asterisk

00:56:29,580 --> 00:56:33,140
allowing tight coupling

00:56:31,140 --> 00:56:35,100
between the application and the phone

00:56:33,140 --> 00:56:37,260
additionally we've created an

00:56:35,100 --> 00:56:39,390
applications engine that allows users

00:56:37,260 --> 00:56:41,970
and developers to create and run their

00:56:39,390 --> 00:56:44,040
own apps on the following and finally

00:56:41,970 --> 00:56:46,110
we've done all of this at a very

00:56:44,040 --> 00:56:47,790
compelling price point at Digium we're

00:56:46,110 --> 00:56:49,560
always thinking of ways to give our

00:56:47,790 --> 00:56:51,960
customers the best value in business

00:56:49,560 --> 00:56:53,850
phone systems and also give them the

00:56:51,960 --> 00:56:55,980
power to create their own solutions or

00:56:53,850 --> 00:56:57,780
any communications challenge well

00:56:55,980 --> 00:56:59,520
continue to push the boundaries not only

00:56:57,780 --> 00:57:01,560
to make Astra's cooler faster and more

00:56:59,520 --> 00:57:03,330
technologically feature-rich but to make

00:57:01,560 --> 00:57:05,880
asterisk and communications even easier

00:57:03,330 --> 00:57:08,810
and together we'll change the way the

00:57:05,880 --> 00:57:08,810
world communication again

00:57:19,809 --> 00:57:26,630
how's that sigh every way this is the

00:57:23,299 --> 00:57:28,789
way to better utilize all your resources

00:57:26,630 --> 00:57:32,240
and it makes managing all your resources

00:57:28,789 --> 00:57:36,069
pretty easy all of the innovation is

00:57:32,240 --> 00:57:39,589
happening in open source the

00:57:36,069 --> 00:57:41,390
collaborative nature and of the you know

00:57:39,589 --> 00:57:43,490
of the community and the speed at which

00:57:41,390 --> 00:57:45,499
these are these you know these these

00:57:43,490 --> 00:57:47,809
deficiencies these bugs are getting

00:57:45,499 --> 00:57:50,390
discovered and then fixed is it like

00:57:47,809 --> 00:57:53,089
that really shows the power of the you

00:57:50,390 --> 00:57:54,740
know of the open source community it is

00:57:53,089 --> 00:57:58,940
global and it's definitely because of

00:57:54,740 --> 00:58:05,269
the users community people are extremely

00:57:58,940 --> 00:58:07,190
friendly and always ready to help if you

00:58:05,269 --> 00:58:09,470
go on tire see any day you'll see these

00:58:07,190 --> 00:58:11,170
guys helping each other out and they're

00:58:09,470 --> 00:58:13,880
all doing it like in a selfless manner

00:58:11,170 --> 00:58:16,869
the product is transparent for everyone

00:58:13,880 --> 00:58:19,819
everyone can look at the code base

00:58:16,869 --> 00:58:21,529
everyone can see how close dark is is

00:58:19,819 --> 00:58:27,410
being built nothing nothing is

00:58:21,529 --> 00:58:30,049
proprietary everything is open in many

00:58:27,410 --> 00:58:34,249
ways it's absolutely vital to the the

00:58:30,049 --> 00:58:38,029
ongoing health cloudstack the most

00:58:34,249 --> 00:58:41,920
exciting event in recent memory for me

00:58:38,029 --> 00:58:44,559
was our first developer boot camp

00:58:41,920 --> 00:58:47,230
and our call gave people I gave you two

00:58:44,559 --> 00:58:51,190
weeks notice to come attend I was

00:58:47,230 --> 00:58:55,359
expecting 25 or 30 people so we ended up

00:58:51,190 --> 00:58:58,180
with 87 people and had to go get more

00:58:55,359 --> 00:59:00,730
chairs in the room twice everything

00:58:58,180 --> 00:59:04,059
within cloud computing is commodity and

00:59:00,730 --> 00:59:07,030
is open source and so I don't think that

00:59:04,059 --> 00:59:08,799
you will you'll see anywhere where open

00:59:07,030 --> 00:59:11,829
source is not pervasive in cloud

00:59:08,799 --> 00:59:14,530
computing and so i think it's i think

00:59:11,829 --> 00:59:15,910
it's an assumption i think when you talk

00:59:14,530 --> 00:59:17,020
about cloud computing you're really

00:59:15,910 --> 00:59:22,569
talking about open source cloud

00:59:17,020 --> 00:59:25,720
computing cloud sac is a robust solution

00:59:22,569 --> 00:59:28,119
for large deployments you have dozens of

00:59:25,720 --> 00:59:32,020
data centers and thousands of servers in

00:59:28,119 --> 00:59:34,690
each data centers these hardware is

00:59:32,020 --> 00:59:38,170
going to fail and CloudStack is designed

00:59:34,690 --> 00:59:40,869
to handle number one that mass scale

00:59:38,170 --> 00:59:44,049
number two it's designed to handle the

00:59:40,869 --> 00:59:46,930
failure that inevitably happens in large

00:59:44,049 --> 00:59:51,099
deployments started working on cog deck

00:59:46,930 --> 00:59:54,369
over four years ago and it was the

00:59:51,099 --> 00:59:56,170
original set of people working on it had

00:59:54,369 --> 01:00:00,250
a background of delivering software

00:59:56,170 --> 01:00:04,510
telcos and service providers lots of QA

01:00:00,250 --> 01:00:08,109
lots of users actually using it high

01:00:04,510 --> 01:00:11,200
availability is the key feature multiple

01:00:08,109 --> 01:00:13,210
hypervisors support different network

01:00:11,200 --> 01:00:15,910
models you can pick up whatever suits

01:00:13,210 --> 01:00:18,160
you better while step management server

01:00:15,910 --> 01:00:21,849
can be deployed in different physical

01:00:18,160 --> 01:00:23,500
machines it definitely has a huge

01:00:21,849 --> 01:00:28,480
footprint it's being deployed everywhere

01:00:23,500 --> 01:00:31,089
there's a major movie studio that they

01:00:28,480 --> 01:00:34,270
were using cloudstack they were using it

01:00:31,089 --> 01:00:36,339
to transcode video and i thought that

01:00:34,270 --> 01:00:37,990
was terribly fascinating what i found

01:00:36,339 --> 01:00:41,260
more fascinating is what they did during

01:00:37,990 --> 01:00:44,049
lunch where they would spin up you know

01:00:41,260 --> 01:00:45,430
50 or 60 game servers then as soon as

01:00:44,049 --> 01:00:46,020
lunch was over they would destroy all

01:00:45,430 --> 01:00:48,110
the instance

01:00:46,020 --> 01:00:51,540
and go back to doing real work

01:00:48,110 --> 01:00:53,040
cloudstack is vast it touches so many

01:00:51,540 --> 01:00:54,930
different aspects and there's no one

01:00:53,040 --> 01:00:58,160
person that's kind of like a master of

01:00:54,930 --> 01:01:01,380
all those realms I think CloudStack as a

01:00:58,160 --> 01:01:03,600
project is going to be one of the

01:01:01,380 --> 01:01:07,650
leaders simply because it's some of the

01:01:03,600 --> 01:01:13,080
most feature fallen and and robust

01:01:07,650 --> 01:01:15,980
platforms out they were Adam senior

01:01:13,080 --> 01:01:15,980

YouTube URL: https://www.youtube.com/watch?v=9Y4Y5U9_EhQ


