Title: 2013 SouthEast LinuxFest - Michael DeHaan - Ansible: Radically Simple IT Orchestration
Publication date: 2015-04-17
Playlist: 2013 SouthEast LinuxFest
Description: 
	2013 SouthEast LinuxFest
Michael DeHaan
Ansible: Radically Simple IT Orchestration
Captions: 
	00:00:00,000 --> 00:00:05,160
the following presentation was recorded

00:00:02,639 --> 00:00:08,280
at the 2013 southeast linux fest in

00:00:05,160 --> 00:00:10,860
charlotte north carolina it is licensed

00:00:08,280 --> 00:00:12,509
under a creative commons license for

00:00:10,860 --> 00:00:16,619
more information about the southeast

00:00:12,509 --> 00:00:19,830
linux fest visit WWF eastland TX phase

00:00:16,619 --> 00:00:21,630
or the southeast linux fest would like

00:00:19,830 --> 00:00:24,000
to thank the following diamond sponsors

00:00:21,630 --> 00:00:25,650
in 2013 for helping make these videos

00:00:24,000 --> 00:00:27,720
possible I think we're going to go ahead

00:00:25,650 --> 00:00:29,760
and get started everybody hi my name is

00:00:27,720 --> 00:00:32,329
Michael de haan I'm the CTO of ansible

00:00:29,760 --> 00:00:34,380
works and ansible is a project i started

00:00:32,329 --> 00:00:36,540
about a year and a half ago so we're

00:00:34,380 --> 00:00:41,070
going to talk a little bit about IT

00:00:36,540 --> 00:00:42,719
automation so a lot of people kind of

00:00:41,070 --> 00:00:45,210
wonder it well is this talk for me why

00:00:42,719 --> 00:00:46,469
am I here um this is a talk if you're

00:00:45,210 --> 00:00:48,239
that'll be good for you if you're

00:00:46,469 --> 00:00:50,520
managing operating systems if you're

00:00:48,239 --> 00:00:53,149
deploying applications so whether your

00:00:50,520 --> 00:00:55,770
systems administrator or developer um

00:00:53,149 --> 00:00:58,770
you know following DevOps things not

00:00:55,770 --> 00:01:00,390
following DevOps things maybe you've got

00:00:58,770 --> 00:01:02,190
more than one machine in a home lab

00:01:00,390 --> 00:01:05,070
right so there's a lot of different

00:01:02,190 --> 00:01:09,479
cases where ansible can be a good fit

00:01:05,070 --> 00:01:11,010
for you and your infrastructure and also

00:01:09,479 --> 00:01:12,869
you know we're very good about managing

00:01:11,010 --> 00:01:14,400
network devices so we're doing a lot of

00:01:12,869 --> 00:01:18,119
things with different network lenders so

00:01:14,400 --> 00:01:19,860
if you have you know an interest in

00:01:18,119 --> 00:01:22,680
automating Network things this is also a

00:01:19,860 --> 00:01:27,420
very interesting tool that you might

00:01:22,680 --> 00:01:29,670
like so the in quake the equation behind

00:01:27,420 --> 00:01:31,979
ansible is essentially flexibility plus

00:01:29,670 --> 00:01:33,930
simplicity is power right so if we think

00:01:31,979 --> 00:01:35,640
back to a lot of the IT automation tools

00:01:33,930 --> 00:01:37,259
we might have dealt with some of them

00:01:35,640 --> 00:01:39,659
are very very flexible but they're very

00:01:37,259 --> 00:01:43,170
complicated and then some are very

00:01:39,659 --> 00:01:45,180
simple in pointy clicky and so on but

00:01:43,170 --> 00:01:47,220
they're not really good for managing any

00:01:45,180 --> 00:01:50,220
more than like one single machine at a

00:01:47,220 --> 00:01:52,110
single time so the experiment when I

00:01:50,220 --> 00:01:56,070
started ansible and I kind of started it

00:01:52,110 --> 00:01:57,750
on my couch was can I somehow bridge

00:01:56,070 --> 00:02:01,740
these two worlds can I find a way to

00:01:57,750 --> 00:02:04,799
make things simpler and easier so before

00:02:01,740 --> 00:02:06,290
I dive in a little bit has anybody is

00:02:04,799 --> 00:02:09,420
anybody using against ball right now ah

00:02:06,290 --> 00:02:11,520
awesome great great um so is anybody

00:02:09,420 --> 00:02:12,130
maybe using like puppet or chef for

00:02:11,520 --> 00:02:14,410
fabric

00:02:12,130 --> 00:02:15,520
capistrano okay all right so anybody

00:02:14,410 --> 00:02:17,730
else doing kind of like in-house

00:02:15,520 --> 00:02:20,680
scripting and automate their own systems

00:02:17,730 --> 00:02:22,840
excellent all right so so you're you're

00:02:20,680 --> 00:02:25,990
all my kind of people and I kind of know

00:02:22,840 --> 00:02:27,370
we're talking about here um so give you

00:02:25,990 --> 00:02:31,630
a little bit more information about

00:02:27,370 --> 00:02:35,430
myself I am an NC State grad i live in

00:02:31,630 --> 00:02:37,660
raleigh so not too far to get here I

00:02:35,430 --> 00:02:39,310
originally started work at IBM and

00:02:37,660 --> 00:02:42,820
adaptec did a lot of storage management

00:02:39,310 --> 00:02:45,250
software automation around how do i

00:02:42,820 --> 00:02:47,560
setup drives and servers and things like

00:02:45,250 --> 00:02:51,220
that and eventually found my way at red

00:02:47,560 --> 00:02:54,910
hot so at Red Hat we noticed that there

00:02:51,220 --> 00:02:57,820
was a lack of good reusable automation

00:02:54,910 --> 00:02:59,350
around how I deploy servers right so

00:02:57,820 --> 00:03:02,470
everybody was writing their own things

00:02:59,350 --> 00:03:04,270
to set up pixie and and kickstart and so

00:03:02,470 --> 00:03:06,760
on so I created a project called cobbler

00:03:04,270 --> 00:03:10,450
which some of you may have heard of and

00:03:06,760 --> 00:03:12,760
another project that was also kind of

00:03:10,450 --> 00:03:14,890
automation driven called funk and funk

00:03:12,760 --> 00:03:17,650
was all about how do I talk to a lot of

00:03:14,890 --> 00:03:19,990
servers at a time right now and kind of

00:03:17,650 --> 00:03:23,380
construct an API for managing my server

00:03:19,990 --> 00:03:25,420
fleet funk was kind of built to fill in

00:03:23,380 --> 00:03:27,100
some gaps around that kind of existing

00:03:25,420 --> 00:03:28,840
between cobbler and and a lot of people

00:03:27,100 --> 00:03:30,040
other DevOps you kind of tools that

00:03:28,840 --> 00:03:31,870
people were using at the time like

00:03:30,040 --> 00:03:33,280
puppet and chef I actually ended up

00:03:31,870 --> 00:03:36,100
working for puppet labs for a while and

00:03:33,280 --> 00:03:38,200
I I came out of that and I said well I'm

00:03:36,100 --> 00:03:40,480
encountering all these places where I

00:03:38,200 --> 00:03:42,400
really want some capabilities that I

00:03:40,480 --> 00:03:45,640
didn't have an existing tools right so

00:03:42,400 --> 00:03:48,220
one of those was how do I control real

00:03:45,640 --> 00:03:50,320
world IT architectures so you have web

00:03:48,220 --> 00:03:52,480
servers and database servers and you

00:03:50,320 --> 00:03:53,860
have you know load balancers and

00:03:52,480 --> 00:03:55,900
firewalls and there's really this

00:03:53,860 --> 00:03:59,380
topology of systems that I want to

00:03:55,900 --> 00:04:01,060
manage and I want to model those IT

00:03:59,380 --> 00:04:04,690
processes I don't want to necessarily

00:04:01,060 --> 00:04:06,790
say um this is the configuration that

00:04:04,690 --> 00:04:08,740
just goes on this one system I really

00:04:06,790 --> 00:04:10,660
have a workflow that I want to walk

00:04:08,740 --> 00:04:12,340
through and there were a lot of

00:04:10,660 --> 00:04:13,690
commercial orchestration tools at this

00:04:12,340 --> 00:04:16,359
time that egg where I could dragon

00:04:13,690 --> 00:04:17,830
blocks and things together but they

00:04:16,359 --> 00:04:20,049
weren't the tools that I wanted to use

00:04:17,830 --> 00:04:21,040
and they were very expensive and what

00:04:20,049 --> 00:04:22,830
kind of would say how could I do this

00:04:21,040 --> 00:04:24,530
better how could I also solve

00:04:22,830 --> 00:04:27,800
configuration management

00:04:24,530 --> 00:04:29,480
her and also build a tool that could

00:04:27,800 --> 00:04:31,310
deploy apps so we saw a lot of people

00:04:29,480 --> 00:04:33,310
that were taking a configuration

00:04:31,310 --> 00:04:35,780
management tool when adding a

00:04:33,310 --> 00:04:37,070
application deployment tool on top and

00:04:35,780 --> 00:04:38,000
then gluing that together and then

00:04:37,070 --> 00:04:40,040
gluing it together with their

00:04:38,000 --> 00:04:41,060
provisioning system and gluing this over

00:04:40,040 --> 00:04:43,100
here and then writing a whole bunch of

00:04:41,060 --> 00:04:45,020
automation on top and this was kind of

00:04:43,100 --> 00:04:47,750
getting repeated at every single data

00:04:45,020 --> 00:04:50,180
center site across America right so how

00:04:47,750 --> 00:04:52,190
can we build less tools and simpler

00:04:50,180 --> 00:04:53,930
tools that that do a little bit more and

00:04:52,190 --> 00:04:55,730
look at things a little bit differently

00:04:53,930 --> 00:04:59,060
so that's kind of what I'm very

00:04:55,730 --> 00:05:00,410
interested in is sort of the automation

00:04:59,060 --> 00:05:03,590
case because if we're going to you know

00:05:00,410 --> 00:05:05,270
achieve Skynet and ruined humanity

00:05:03,590 --> 00:05:06,350
forever this is this is the next step

00:05:05,270 --> 00:05:08,840
right that we have to get there first

00:05:06,350 --> 00:05:13,490
and if we do it right maybe the robots

00:05:08,840 --> 00:05:15,200
will like us and be friendly so as I

00:05:13,490 --> 00:05:18,919
kind of mentioned ansibles started in

00:05:15,200 --> 00:05:20,600
February of 2012 started for a lot of

00:05:18,919 --> 00:05:22,070
different reasons one of them like i

00:05:20,600 --> 00:05:24,560
said is i had a lot of experience with

00:05:22,070 --> 00:05:27,110
configuration management tools and kept

00:05:24,560 --> 00:05:28,580
wanting to see them made simpler there's

00:05:27,110 --> 00:05:30,260
a movement called infrastructure as code

00:05:28,580 --> 00:05:33,080
that a lot of people have heard of and

00:05:30,260 --> 00:05:35,800
that's fine but i'm a software developer

00:05:33,080 --> 00:05:38,600
right so i think if you're in software

00:05:35,800 --> 00:05:40,789
enough you actually learn to dislike

00:05:38,600 --> 00:05:42,890
code right because you know it's it's

00:05:40,789 --> 00:05:45,039
buggy and hard to write and i really

00:05:42,890 --> 00:05:47,780
want to slam something out quickly

00:05:45,039 --> 00:05:51,890
that's also maintainable and audible and

00:05:47,780 --> 00:05:53,840
readable that when i develop it i can go

00:05:51,890 --> 00:05:55,760
in there and everybody my team can

00:05:53,840 --> 00:05:56,960
understand what it says and we'll talk a

00:05:55,760 --> 00:05:59,840
little about some of the simplicity and

00:05:56,960 --> 00:06:01,100
show some examples but ansible is trying

00:05:59,840 --> 00:06:03,100
to move away from infrastructure as code

00:06:01,100 --> 00:06:05,030
and get into what I'd like to call

00:06:03,100 --> 00:06:08,020
infrastructure is data where it's more

00:06:05,030 --> 00:06:10,220
policy driven more human readable

00:06:08,020 --> 00:06:11,479
something that's accessible for all

00:06:10,220 --> 00:06:13,330
levels of the team whether your

00:06:11,479 --> 00:06:15,860
developer systems administrator um

00:06:13,330 --> 00:06:17,600
whether you've got 500 other projects

00:06:15,860 --> 00:06:19,760
and you want to move quickly between

00:06:17,600 --> 00:06:21,800
this project in this other project and

00:06:19,760 --> 00:06:23,900
don't want to necessarily say be a

00:06:21,800 --> 00:06:25,180
jockey to one particular automation tool

00:06:23,900 --> 00:06:27,470
all day you just kind of want to

00:06:25,180 --> 00:06:30,470
implement what you want an ansible and

00:06:27,470 --> 00:06:32,570
get going so we've we've been kind of

00:06:30,470 --> 00:06:33,800
blessed with the really active open

00:06:32,570 --> 00:06:36,200
source community and we're pretty much

00:06:33,800 --> 00:06:37,729
one of the fastest growing open source

00:06:36,200 --> 00:06:41,719
automation projects today

00:06:37,729 --> 00:06:45,559
um 1650 followers on github in a little

00:06:41,719 --> 00:06:47,930
over a year and a half of 2 530 Forks

00:06:45,559 --> 00:06:50,809
you know very very healthy mailing lists

00:06:47,930 --> 00:06:52,370
very active IRC channel so there's lots

00:06:50,809 --> 00:06:56,689
of resources if you're starting to get

00:06:52,370 --> 00:06:58,520
going to talk to people and we have this

00:06:56,689 --> 00:07:00,259
let this last release for instance added

00:06:58,520 --> 00:07:02,029
30 new modules and we'll talk a little

00:07:00,259 --> 00:07:04,669
bit about what ansible modules are but

00:07:02,029 --> 00:07:09,499
growing extremely extremely fast and

00:07:04,669 --> 00:07:11,659
it's been very fun so some of our users

00:07:09,499 --> 00:07:13,520
today I'm not going to talk too much

00:07:11,659 --> 00:07:16,430
about this slide but there's some pretty

00:07:13,520 --> 00:07:19,490
cool use cases so appdynamics is one of

00:07:16,430 --> 00:07:21,710
the coolest you know ansible deployments

00:07:19,490 --> 00:07:23,990
I know of so they're deploying every 15

00:07:21,710 --> 00:07:25,610
minutes so they check in their changes

00:07:23,990 --> 00:07:28,039
to their configuration management policy

00:07:25,610 --> 00:07:30,349
and their code it's wired into Jenkins

00:07:28,039 --> 00:07:31,639
and then every 15 minutes ansible just

00:07:30,349 --> 00:07:34,729
washes over their entire infrastructure

00:07:31,639 --> 00:07:37,309
and rolling update and gets their their

00:07:34,729 --> 00:07:40,370
latest code out right so very cool

00:07:37,309 --> 00:07:42,740
deployment case Gawker is doing a very

00:07:40,370 --> 00:07:44,839
similar thing with so if you're you know

00:07:42,740 --> 00:07:47,509
reading Jalopnik or something that's

00:07:44,839 --> 00:07:49,339
that's all ansible powered we see a lot

00:07:47,509 --> 00:07:51,310
of people that are very interested in

00:07:49,339 --> 00:07:53,539
ansible kind of in the big data case um

00:07:51,310 --> 00:07:55,310
and that's kind of a performance thing

00:07:53,539 --> 00:07:57,529
right so I'll get into some of the

00:07:55,310 --> 00:07:59,409
architectural features as to why ansible

00:07:57,529 --> 00:08:03,639
is really really interesting for

00:07:59,409 --> 00:08:03,639
high-performance clusters a little bit

00:08:03,999 --> 00:08:08,629
also on loss in that last previous slide

00:08:07,159 --> 00:08:09,949
at x is an interesting one they've

00:08:08,629 --> 00:08:11,930
recently open sourced all their

00:08:09,949 --> 00:08:13,759
configuration management for their

00:08:11,930 --> 00:08:15,559
education solutions so you can go on

00:08:13,759 --> 00:08:17,110
github and see their play books and

00:08:15,559 --> 00:08:22,300
ansible which is a really cool thing for

00:08:17,110 --> 00:08:27,370
people to be doing EDX so that's the

00:08:22,300 --> 00:08:29,599
Harvard MIT Stanford OpenCourseWare um

00:08:27,370 --> 00:08:31,399
so the big thing that's different about

00:08:29,599 --> 00:08:33,889
ansible that really hasn't been done

00:08:31,399 --> 00:08:35,389
before in configuration management it's

00:08:33,889 --> 00:08:37,010
kind of been done a little bit in an app

00:08:35,389 --> 00:08:40,159
deployment but there's never been a good

00:08:37,010 --> 00:08:41,690
bridge between those two worlds is to

00:08:40,159 --> 00:08:43,310
build an agentless solution and by

00:08:41,690 --> 00:08:45,050
agentless what i mean is there's no

00:08:43,310 --> 00:08:50,060
management agents that are required on

00:08:45,050 --> 00:08:51,610
the remote machines so normally if i'm

00:08:50,060 --> 00:08:53,709
dealing with an enterprise management

00:08:51,610 --> 00:08:55,600
solution I'd have to install these root

00:08:53,709 --> 00:08:57,910
level demons on all my machines right

00:08:55,600 --> 00:08:59,769
and these demons would consume resources

00:08:57,910 --> 00:09:01,660
but I'd also have to worry about how I

00:08:59,769 --> 00:09:05,290
got them there in the first place how I

00:09:01,660 --> 00:09:07,060
update them in rare cases they can be

00:09:05,290 --> 00:09:09,130
you know a security hassle if I have to

00:09:07,060 --> 00:09:11,260
get a security update out can I actually

00:09:09,130 --> 00:09:14,500
update the management software using the

00:09:11,260 --> 00:09:17,140
management software um have to open

00:09:14,500 --> 00:09:18,339
additional ports in my firewall and kind

00:09:17,140 --> 00:09:20,769
of what i meant meant a little bit about

00:09:18,339 --> 00:09:24,190
the HPC case and the Big Data Hadoop

00:09:20,769 --> 00:09:25,660
case and things like that um they'll cut

00:09:24,190 --> 00:09:27,310
into your performance in your am right

00:09:25,660 --> 00:09:30,010
so if you're running a virtualized

00:09:27,310 --> 00:09:31,480
infrastructure if a demon consumes 40

00:09:30,010 --> 00:09:33,070
megs of ram and you're running you know

00:09:31,480 --> 00:09:35,829
ten instances on a box you've just

00:09:33,070 --> 00:09:38,380
consumed you know half a gig if that

00:09:35,829 --> 00:09:40,350
demons swelling to 400 megabytes you

00:09:38,380 --> 00:09:43,390
have some serious serious issues so

00:09:40,350 --> 00:09:45,430
we're stepping back and basically saying

00:09:43,390 --> 00:09:48,329
when I'm not configuration management

00:09:45,430 --> 00:09:50,350
izing the said a word I don't think so

00:09:48,329 --> 00:09:54,070
when I'm not managing the machine

00:09:50,350 --> 00:09:57,930
there's nothing out there to be doing

00:09:54,070 --> 00:09:57,930
anything so it's just completely off the

00:09:58,800 --> 00:10:03,430
the other cool feature about ansible is

00:10:01,390 --> 00:10:04,990
what I'd like to call true orchestration

00:10:03,430 --> 00:10:06,399
and maybe that's not a rightward i

00:10:04,990 --> 00:10:09,220
occasionally try to call this multi-tier

00:10:06,399 --> 00:10:11,050
multi-step orchestration but the idea

00:10:09,220 --> 00:10:13,480
that i'm modeling a datacenter

00:10:11,050 --> 00:10:16,000
architecture I'm not just saying blast

00:10:13,480 --> 00:10:18,940
this out to all these systems so the

00:10:16,000 --> 00:10:21,459
idea that in an update suppose I have a

00:10:18,940 --> 00:10:23,560
web tier and a database tier and an app

00:10:21,459 --> 00:10:26,410
tier and some content servers and I have

00:10:23,560 --> 00:10:29,290
a rolling update process I worked at a

00:10:26,410 --> 00:10:32,410
web host hosted web application company

00:10:29,290 --> 00:10:33,490
wants and we had a very modest number of

00:10:32,410 --> 00:10:36,370
servers i think is about a hundred and

00:10:33,490 --> 00:10:38,350
fifty and they would actually lock

00:10:36,370 --> 00:10:40,269
themselves in a room for up to the you

00:10:38,350 --> 00:10:42,490
know three or four or five hours and it

00:10:40,269 --> 00:10:45,730
was turned your keys over here now turn

00:10:42,490 --> 00:10:48,459
your keys over here make sure you do the

00:10:45,730 --> 00:10:50,230
right thing at the right time and what

00:10:48,459 --> 00:10:52,810
happened was people would typically kind

00:10:50,230 --> 00:10:54,339
of get this process slightly off and one

00:10:52,810 --> 00:10:55,959
particular thing every time where i

00:10:54,339 --> 00:11:00,089
forgot to update the content server i

00:10:55,959 --> 00:11:02,829
forgot the symlink i forgot step 32 and

00:11:00,089 --> 00:11:05,390
it would you it would result in problems

00:11:02,829 --> 00:11:08,240
so if i want to roll out my application

00:11:05,390 --> 00:11:10,040
across the stock can I model it in

00:11:08,240 --> 00:11:14,540
ansibles language which I'll show a

00:11:10,040 --> 00:11:18,680
little bit of very soon and make this

00:11:14,540 --> 00:11:20,780
repeatable and really really easy data

00:11:18,680 --> 00:11:22,220
sharing between nodes is is very

00:11:20,780 --> 00:11:23,660
important to so suppose I have a

00:11:22,220 --> 00:11:26,240
firewall and it needs to let all the

00:11:23,660 --> 00:11:27,800
database all the web servers connect all

00:11:26,240 --> 00:11:30,380
the databases right so I can actually

00:11:27,800 --> 00:11:32,300
say use all the variables from these

00:11:30,380 --> 00:11:33,980
other machines gather their IP addresses

00:11:32,300 --> 00:11:37,090
right and use those IP addresses to

00:11:33,980 --> 00:11:39,260
construct a template for the firewall

00:11:37,090 --> 00:11:41,660
these are things that are doable in a

00:11:39,260 --> 00:11:42,920
lot of existing tooling but an instable

00:11:41,660 --> 00:11:44,980
it's really really easy it doesn't

00:11:42,920 --> 00:11:48,260
require server doesn't require database

00:11:44,980 --> 00:11:52,340
and that's that's kind of an elegant

00:11:48,260 --> 00:11:54,560
thing load balancing and rolling updates

00:11:52,340 --> 00:11:56,300
right so suppose I have 500 servers

00:11:54,560 --> 00:11:57,740
right and I want to maintain capacity

00:11:56,300 --> 00:12:01,730
and uptime and I need to update my

00:11:57,740 --> 00:12:03,050
software but not take the site down so

00:12:01,730 --> 00:12:04,570
what I might want to do is I might want

00:12:03,050 --> 00:12:07,430
to card about 50 servers at a time

00:12:04,570 --> 00:12:08,810
completely update those 50 but before I

00:12:07,430 --> 00:12:11,060
do that I need to take them out of the

00:12:08,810 --> 00:12:12,590
load balancer right I want to take them

00:12:11,060 --> 00:12:13,970
out of monitoring so my pager doesn't go

00:12:12,590 --> 00:12:15,920
off well nobody's as pagers anymore

00:12:13,970 --> 00:12:20,660
doesn't trigger crazy alerts to your

00:12:15,920 --> 00:12:22,670
cell phone right I'll take them

00:12:20,660 --> 00:12:24,020
completely and when they're successful

00:12:22,670 --> 00:12:25,430
put them back into the pool and move on

00:12:24,020 --> 00:12:27,740
to the next 50 and keep going down the

00:12:25,430 --> 00:12:31,180
stack so rolling updates or something

00:12:27,740 --> 00:12:33,980
that the ansibles really really good for

00:12:31,180 --> 00:12:36,770
and also dealing with your monitoring

00:12:33,980 --> 00:12:37,970
your load balancing along the way which

00:12:36,770 --> 00:12:39,320
makes it a really good continuous

00:12:37,970 --> 00:12:42,020
deployment system right so this is

00:12:39,320 --> 00:12:44,320
basically the thing so I have an

00:12:42,020 --> 00:12:46,760
arbitrary set of code in my repository

00:12:44,320 --> 00:12:48,950
it doesn't just update this one set of

00:12:46,760 --> 00:12:51,320
systems or this set of systems it it

00:12:48,950 --> 00:12:53,480
talks to my entire IT infrastructure in

00:12:51,320 --> 00:12:55,100
a very well-defined order not just

00:12:53,480 --> 00:12:56,660
saying here's the configuration for this

00:12:55,100 --> 00:12:58,880
node but here's this whole ite

00:12:56,660 --> 00:13:02,030
architecture in the process to update it

00:12:58,880 --> 00:13:04,460
so I can I can hook it up to something

00:13:02,030 --> 00:13:07,120
like Jenkins or bamboo or what have you

00:13:04,460 --> 00:13:09,380
for continuous integration and have it

00:13:07,120 --> 00:13:10,850
maybe it deploys continuously to my

00:13:09,380 --> 00:13:13,670
stage environment and when some tests

00:13:10,850 --> 00:13:16,360
pass it deploys to production maybe I'm

00:13:13,670 --> 00:13:18,610
deploying you know to my QA environment

00:13:16,360 --> 00:13:19,930
but it's easy to grab

00:13:18,610 --> 00:13:22,510
these two systems together in

00:13:19,930 --> 00:13:24,579
interesting ways and the other property

00:13:22,510 --> 00:13:27,130
that this gets you kind of based on its

00:13:24,579 --> 00:13:28,839
architecture because ansible is pushing

00:13:27,130 --> 00:13:31,060
out to remote systems instead of waiting

00:13:28,839 --> 00:13:34,779
for them to check in is that it has a

00:13:31,060 --> 00:13:36,970
very rapid execution cycle so rather

00:13:34,779 --> 00:13:38,529
than saying my web servers check in and

00:13:36,970 --> 00:13:40,149
they wait 30 minutes and my database

00:13:38,529 --> 00:13:42,070
servers check in and wait 30 minutes and

00:13:40,149 --> 00:13:43,480
this other tier comes in it waits 30

00:13:42,070 --> 00:13:45,820
minutes that I've got like locks in

00:13:43,480 --> 00:13:47,620
place to say this must happen and once

00:13:45,820 --> 00:13:49,269
this is true this is happening I can

00:13:47,620 --> 00:13:51,550
actually push out my app stack as fast

00:13:49,269 --> 00:13:53,200
as I can possibly go because once this

00:13:51,550 --> 00:13:54,519
step is done it can go on to the next

00:13:53,200 --> 00:13:56,800
step it doesn't have to wait for the

00:13:54,519 --> 00:14:01,450
systems to kind of phone home and and be

00:13:56,800 --> 00:14:04,810
ready so this is just a very simple

00:14:01,450 --> 00:14:07,959
diagram of what this process this looks

00:14:04,810 --> 00:14:10,180
like here so again if we r you know a

00:14:07,959 --> 00:14:12,610
multi-tier set of systems it might say

00:14:10,180 --> 00:14:14,829
carve out you know ten of my app servers

00:14:12,610 --> 00:14:17,250
at a time before I talk to them pull

00:14:14,829 --> 00:14:19,600
them out of the load balancer signal a

00:14:17,250 --> 00:14:21,820
an outage window in the monitoring

00:14:19,600 --> 00:14:23,380
system update them completely put them

00:14:21,820 --> 00:14:27,180
back in and put monitoring back in and

00:14:23,380 --> 00:14:27,180
then keep moving down move down the line

00:14:28,260 --> 00:14:32,800
so this diagram shows a little bit about

00:14:30,760 --> 00:14:34,690
the ansible architecture it actually

00:14:32,800 --> 00:14:38,709
looks more architect ii than it really

00:14:34,690 --> 00:14:40,839
is by default it's a very decentralized

00:14:38,709 --> 00:14:43,360
system so if you think about you know

00:14:40,839 --> 00:14:45,670
get or mercurial as a source control

00:14:43,360 --> 00:14:47,649
system ansible doesn't require a server

00:14:45,670 --> 00:14:49,690
and it doesn't require the agents so

00:14:47,649 --> 00:14:52,360
typically well you might decide to run

00:14:49,690 --> 00:14:54,040
it from a central management machine you

00:14:52,360 --> 00:14:56,110
could also easily just take a laptop

00:14:54,040 --> 00:14:57,970
right into a data center and start

00:14:56,110 --> 00:15:01,510
managing machines because it's it's

00:14:57,970 --> 00:15:03,070
operating over ssh right so when we say

00:15:01,510 --> 00:15:04,660
its operating over ssh a lot of people

00:15:03,070 --> 00:15:07,600
think it's logging in and it's running

00:15:04,660 --> 00:15:10,209
shown and chew mod and that doesn't work

00:15:07,600 --> 00:15:12,070
right so everybody said it's impossible

00:15:10,209 --> 00:15:14,050
to write an ssh based management system

00:15:12,070 --> 00:15:16,120
right because that's the kind of the way

00:15:14,050 --> 00:15:20,620
they were thinking but what ansible does

00:15:16,120 --> 00:15:22,360
is it transfers very simple modules to

00:15:20,620 --> 00:15:23,860
the remote machine and it runs them so

00:15:22,360 --> 00:15:26,470
these modules are little pieces of code

00:15:23,860 --> 00:15:27,730
all the core modules and ansel are

00:15:26,470 --> 00:15:30,069
written in Python but you can actually

00:15:27,730 --> 00:15:32,200
write them in any language so if i

00:15:30,069 --> 00:15:35,230
wanted to write them in ruby or pearl

00:15:32,200 --> 00:15:37,480
or bash I can go in there and still

00:15:35,230 --> 00:15:39,100
write a module and all it needs to do is

00:15:37,480 --> 00:15:41,980
be a very simple program that can read

00:15:39,100 --> 00:15:45,010
some input and return JSON and an

00:15:41,980 --> 00:15:46,480
ansible can parse it and run it so what

00:15:45,010 --> 00:15:48,640
it'll do is it'll actually transfer this

00:15:46,480 --> 00:15:51,070
module file to want to all the remote

00:15:48,640 --> 00:15:53,350
host sand and run it execs acute it and

00:15:51,070 --> 00:15:55,930
when it's done it'll remove it kind of

00:15:53,350 --> 00:15:57,940
all in one step so what we're what we're

00:15:55,930 --> 00:15:59,950
doing is we're actually able to transfer

00:15:57,940 --> 00:16:02,580
smart programs and descriptions of

00:15:59,950 --> 00:16:04,570
resource state to the remote machine and

00:16:02,580 --> 00:16:07,390
if you're familiar with some of the

00:16:04,570 --> 00:16:09,760
other you know DevOps style automation

00:16:07,390 --> 00:16:11,590
tools you hear a lot of talk about you

00:16:09,760 --> 00:16:14,020
know I'd impotent resource models and so

00:16:11,590 --> 00:16:16,240
on describing what state you want a

00:16:14,020 --> 00:16:19,090
system to be in rather than the steps to

00:16:16,240 --> 00:16:20,590
take it from point A to point B ansible

00:16:19,090 --> 00:16:22,750
is exactly like that with all of its

00:16:20,590 --> 00:16:24,370
modules so I can say this package should

00:16:22,750 --> 00:16:26,650
be installed or this package should be

00:16:24,370 --> 00:16:29,380
at this version rather than issuing a

00:16:26,650 --> 00:16:31,150
command that says do specifically this

00:16:29,380 --> 00:16:33,700
and you'll be able to tell what

00:16:31,150 --> 00:16:36,190
resources have changed on the remote

00:16:33,700 --> 00:16:39,040
system but you'll also be able to run it

00:16:36,190 --> 00:16:40,630
in a dry run mode and say when i run

00:16:39,040 --> 00:16:47,230
this playbook which is what we call our

00:16:40,630 --> 00:16:50,290
descriptions of orchestration right you

00:16:47,230 --> 00:16:51,610
can say that what we sources would have

00:16:50,290 --> 00:16:52,840
changed if i would have run this for

00:16:51,610 --> 00:16:55,570
real and then you can decide whether or

00:16:52,840 --> 00:16:58,120
not you want to run it there's kind of a

00:16:55,570 --> 00:17:01,870
growing theory and among some of our

00:16:58,120 --> 00:17:03,850
users that if you continually manage

00:17:01,870 --> 00:17:05,230
your systems you know all the time and

00:17:03,850 --> 00:17:06,820
you're like I actually want to think

00:17:05,230 --> 00:17:08,470
about why did this change when I wasn't

00:17:06,820 --> 00:17:10,839
expecting it and sees like is that a

00:17:08,470 --> 00:17:13,480
sign of an intrusion or so on so so that

00:17:10,839 --> 00:17:17,320
can be a useful thing to do ansible is

00:17:13,480 --> 00:17:20,829
also very pluggable so there are modules

00:17:17,320 --> 00:17:23,650
for callbacks so I could say log this to

00:17:20,829 --> 00:17:27,490
a extra database or a message bus or I

00:17:23,650 --> 00:17:30,190
could say on perhaps I want to write a

00:17:27,490 --> 00:17:31,540
new transport for a different way that

00:17:30,190 --> 00:17:33,700
ansel might connect to remote systems

00:17:31,540 --> 00:17:35,580
for instance we have one that comes in

00:17:33,700 --> 00:17:38,800
ansible it's called fireball right so

00:17:35,580 --> 00:17:40,450
SSH is ordinarily really decently fast

00:17:38,800 --> 00:17:43,210
if you're using control persists control

00:17:40,450 --> 00:17:44,620
master right but if you want to go even

00:17:43,210 --> 00:17:47,320
faster we had this

00:17:44,620 --> 00:17:49,960
this fireball transport and what it will

00:17:47,320 --> 00:17:51,790
do is it will transfer a very small

00:17:49,960 --> 00:17:53,980
helper programs that remote node and if

00:17:51,790 --> 00:17:56,320
you remember you'll say I said we were

00:17:53,980 --> 00:17:58,000
agentless right well what it does is it

00:17:56,320 --> 00:18:01,390
fires up this little temporary agent

00:17:58,000 --> 00:18:04,030
running the zeromq message bus and it

00:18:01,390 --> 00:18:06,820
has a time to live basically and then

00:18:04,030 --> 00:18:09,309
after say 30 minutes or maybe you chose

00:18:06,820 --> 00:18:11,170
an hour this demon will self-destruct

00:18:09,309 --> 00:18:12,970
and will go away and leave no traces on

00:18:11,170 --> 00:18:14,980
your system but what it did while it was

00:18:12,970 --> 00:18:17,500
running is it provided you an extremely

00:18:14,980 --> 00:18:19,120
fast transport out to all your nodes but

00:18:17,500 --> 00:18:21,640
it used your SSH credentials to

00:18:19,120 --> 00:18:23,080
establish the secure link so with

00:18:21,640 --> 00:18:25,179
ansible you don't have any of that

00:18:23,080 --> 00:18:28,320
public key infrastructure to maintain

00:18:25,179 --> 00:18:32,380
right which is a really nice feature so

00:18:28,320 --> 00:18:33,550
my OS credentials are in play so if for

00:18:32,380 --> 00:18:35,350
instance if I wanted to set up curb

00:18:33,550 --> 00:18:37,660
Erised SSH against all of these machines

00:18:35,350 --> 00:18:39,910
and manage all that centrally if i was

00:18:37,660 --> 00:18:42,179
using ldap for authentication ansible

00:18:39,910 --> 00:18:44,820
works with your native OS authentication

00:18:42,179 --> 00:18:48,040
most people are end up using ssh keys

00:18:44,820 --> 00:18:49,240
but you can pretty much you know pick

00:18:48,040 --> 00:18:50,500
things as you want if you want to if

00:18:49,240 --> 00:18:53,679
you've got a you know as a really small

00:18:50,500 --> 00:18:54,760
lab and maybe it's not really a wire to

00:18:53,679 --> 00:18:56,140
the outside internet and you're cool

00:18:54,760 --> 00:18:59,500
with that you could actually log in with

00:18:56,140 --> 00:19:00,850
passwords if you felt like it then that

00:18:59,500 --> 00:19:03,160
also means that you don't have to worry

00:19:00,850 --> 00:19:06,070
about you know ntp synchronization and

00:19:03,160 --> 00:19:08,110
needing dns and there's some there's

00:19:06,070 --> 00:19:10,000
some really cool things that that that

00:19:08,110 --> 00:19:13,179
architecture allows one of our really

00:19:10,000 --> 00:19:14,740
coolest use cases is actually not about

00:19:13,179 --> 00:19:17,350
computers at all well everything's a

00:19:14,740 --> 00:19:20,040
computer right but there's this guy that

00:19:17,350 --> 00:19:21,970
has two hundred vending machines in

00:19:20,040 --> 00:19:24,580
sweden and there are different coke

00:19:21,970 --> 00:19:26,890
machines with cellular modems in them

00:19:24,580 --> 00:19:29,320
right and he's using ansible to go talk

00:19:26,890 --> 00:19:31,360
out to his vending machine fleet and

00:19:29,320 --> 00:19:34,540
upgrade them and there's a there's like

00:19:31,360 --> 00:19:37,150
a kiosk 20 or 30 of them i think in the

00:19:34,540 --> 00:19:38,740
melbourne zoo right that tell you all

00:19:37,150 --> 00:19:41,050
about the different animals and so on

00:19:38,740 --> 00:19:42,490
and these are kind of places whether

00:19:41,050 --> 00:19:46,720
it's very lightweight kind of embedded

00:19:42,490 --> 00:19:49,450
computing arm and you know doesn't need

00:19:46,720 --> 00:19:50,710
the you know have the same demands its

00:19:49,450 --> 00:19:51,730
traditional data center architecture so

00:19:50,710 --> 00:19:53,920
it fits in some interesting places

00:19:51,730 --> 00:19:54,700
obviously kind of design for the data

00:19:53,920 --> 00:19:58,750
center but

00:19:54,700 --> 00:20:00,040
some nice other features playbooks or

00:19:58,750 --> 00:20:02,770
your automation language which I'll show

00:20:00,040 --> 00:20:04,720
later and host inventory can be written

00:20:02,770 --> 00:20:06,400
in text files it can be pulled from a

00:20:04,720 --> 00:20:11,050
database it can be pulled from the cloud

00:20:06,400 --> 00:20:15,610
like ec2 and so on OpenStack things like

00:20:11,050 --> 00:20:17,740
that so keeping things simple so this is

00:20:15,610 --> 00:20:19,420
kind of a philosophical thing when I set

00:20:17,740 --> 00:20:21,600
out to build ansibles language I really

00:20:19,420 --> 00:20:23,740
wanted to make something that was

00:20:21,600 --> 00:20:29,400
readable for both machines and humans

00:20:23,740 --> 00:20:32,020
and this is an interesting challenge so

00:20:29,400 --> 00:20:33,940
I'm using ya moul as a data format and

00:20:32,020 --> 00:20:36,430
yeah most is ya moul ain't markup

00:20:33,940 --> 00:20:39,760
language which is a terrible you know

00:20:36,430 --> 00:20:42,820
recursive acronym but it's a very show

00:20:39,760 --> 00:20:44,920
so I'm a little bit very white space the

00:20:42,820 --> 00:20:46,570
data representation so if you're

00:20:44,920 --> 00:20:49,780
familiar with JSON from JavaScript

00:20:46,570 --> 00:20:52,390
object notation right it's kind of like

00:20:49,780 --> 00:20:54,250
a lighter weight JSON that you don't

00:20:52,390 --> 00:20:56,020
have quite as much quoting so it's

00:20:54,250 --> 00:20:59,950
easier for humans to enter and read but

00:20:56,020 --> 00:21:04,390
also parsable by machines we had a

00:20:59,950 --> 00:21:05,860
manager that said once that I can

00:21:04,390 --> 00:21:08,230
basically write down a list of orders

00:21:05,860 --> 00:21:09,670
and hand them to someone and say I need

00:21:08,230 --> 00:21:11,620
these things done on these machines he

00:21:09,670 --> 00:21:14,830
can write an ansible playbook hand it to

00:21:11,620 --> 00:21:16,570
somebody come back and say yes this is

00:21:14,830 --> 00:21:18,400
the automation that I wanted right and

00:21:16,570 --> 00:21:20,500
and he not even knowing the tool you can

00:21:18,400 --> 00:21:24,210
kind of understand what it does so an

00:21:20,500 --> 00:21:26,340
simpleton it basically is there to

00:21:24,210 --> 00:21:28,300
provide you very simple very

00:21:26,340 --> 00:21:30,790
prototypical ways of doing things so

00:21:28,300 --> 00:21:32,710
Python as a programming language though

00:21:30,790 --> 00:21:34,870
that were written in python that you

00:21:32,710 --> 00:21:36,580
don't write things in Python here kind

00:21:34,870 --> 00:21:39,040
of has that similar philosophy to me so

00:21:36,580 --> 00:21:41,200
i can write a very simple program come

00:21:39,040 --> 00:21:43,270
back to it later be able to read it but

00:21:41,200 --> 00:21:44,560
also the my first attempt at writing it

00:21:43,270 --> 00:21:46,780
was probably the way that it needed to

00:21:44,560 --> 00:21:49,570
be in the long term to be maintainable

00:21:46,780 --> 00:21:52,570
so there's this this rapid prototyping

00:21:49,570 --> 00:21:56,620
also usable in production balance that

00:21:52,570 --> 00:21:57,700
that feels really good another thing

00:21:56,620 --> 00:21:59,800
we've been doing with the ansible that

00:21:57,700 --> 00:22:01,750
i'm really really happy with is we've

00:21:59,800 --> 00:22:04,780
kind of had this batteries included

00:22:01,750 --> 00:22:08,160
philosophy so rather than having a lot

00:22:04,780 --> 00:22:09,720
of people write their own content and

00:22:08,160 --> 00:22:11,910
and then share it and you have to go

00:22:09,720 --> 00:22:14,100
find what's good or what's bad and so on

00:22:11,910 --> 00:22:15,660
we basically asked everybody to come

00:22:14,100 --> 00:22:18,060
together and work on the same project

00:22:15,660 --> 00:22:20,700
together and and contribute to the same

00:22:18,060 --> 00:22:23,460
modules so what we've done is we have a

00:22:20,700 --> 00:22:25,560
very large pool of community modules we

00:22:23,460 --> 00:22:28,550
added over 30 modules this release we

00:22:25,560 --> 00:22:31,050
added almost 30 the last release and

00:22:28,550 --> 00:22:32,460
they allow you to do all sorts of IT

00:22:31,050 --> 00:22:34,560
things that you might want so it's

00:22:32,460 --> 00:22:36,810
basically a huge you know craftsman

00:22:34,560 --> 00:22:39,630
toolbox of things that you want to do

00:22:36,810 --> 00:22:42,090
and we're very welcoming of new ideas

00:22:39,630 --> 00:22:44,340
and features so the kind of criteria is

00:22:42,090 --> 00:22:46,440
if a module is going to be used by maybe

00:22:44,340 --> 00:22:48,320
five percent of the users or it's a very

00:22:46,440 --> 00:22:51,360
major service that everybody knows about

00:22:48,320 --> 00:22:54,030
will definitely take it in we're not

00:22:51,360 --> 00:22:55,530
going to take in you know this one linux

00:22:54,030 --> 00:22:56,790
distribution that's used by like four

00:22:55,530 --> 00:22:58,650
people that's something that will link

00:22:56,790 --> 00:23:01,440
to on the website and tell people you

00:22:58,650 --> 00:23:03,210
know to use but if it's if it's

00:23:01,440 --> 00:23:05,970
something popular and it's well-written

00:23:03,210 --> 00:23:08,400
will include it so we have a lot of

00:23:05,970 --> 00:23:11,250
modules here for for managing I've only

00:23:08,400 --> 00:23:14,670
listed a small amount there's actually

00:23:11,250 --> 00:23:18,120
over 100 and core now but a lot for ec2

00:23:14,670 --> 00:23:20,370
so easy to load balancers as three

00:23:18,120 --> 00:23:21,870
modules ec2 node creations so you can

00:23:20,370 --> 00:23:23,820
actually provision new systems with

00:23:21,870 --> 00:23:26,400
ansible as opposed to just you know

00:23:23,820 --> 00:23:29,340
managing existing ones we have a great

00:23:26,400 --> 00:23:31,290
suite of new monitoring modules in we

00:23:29,340 --> 00:23:33,150
had a nagios one for a long time but

00:23:31,290 --> 00:23:34,830
people have added modules for even

00:23:33,150 --> 00:23:38,790
hosted web services like ping demand

00:23:34,830 --> 00:23:40,920
pagerduty um airbrake so on there's been

00:23:38,790 --> 00:23:42,930
a lot of notification modules recently

00:23:40,920 --> 00:23:44,610
so if I'm writing a playbook and i want

00:23:42,930 --> 00:23:46,440
to say notify my chat server to tell

00:23:44,610 --> 00:23:49,280
everybody that it's about to go down on

00:23:46,440 --> 00:23:52,290
my development of a team i can do that

00:23:49,280 --> 00:23:54,060
modules for pip and gem and homebrew and

00:23:52,290 --> 00:23:56,670
and all you know interesting ways to get

00:23:54,060 --> 00:23:59,400
software beyond you know Yaman apt and

00:23:56,670 --> 00:24:00,960
so on of course we have those too so

00:23:59,400 --> 00:24:02,970
there's a lot of really really good

00:24:00,960 --> 00:24:05,580
stuff there big-ip and that scalar for

00:24:02,970 --> 00:24:07,500
managing things we're looking to have

00:24:05,580 --> 00:24:11,910
some other networking vendor modules and

00:24:07,500 --> 00:24:14,880
very very soon now um but basically

00:24:11,910 --> 00:24:17,400
anything's kind of fair game so if you

00:24:14,880 --> 00:24:20,460
go to ansible CC / docs you can click on

00:24:17,400 --> 00:24:21,760
the modules page and see all about

00:24:20,460 --> 00:24:24,230
what's in there

00:24:21,760 --> 00:24:27,020
so we're going to show you a few

00:24:24,230 --> 00:24:28,340
examples of syntax and looking at my

00:24:27,020 --> 00:24:29,930
watch a little bit I may have a little

00:24:28,340 --> 00:24:36,110
bit of extra time to go in and show you

00:24:29,930 --> 00:24:38,540
some of the stuff in git repos so this

00:24:36,110 --> 00:24:40,460
is an ansible inventory file basically

00:24:38,540 --> 00:24:42,560
you can pull from the cloud to get your

00:24:40,460 --> 00:24:46,040
inventory so get your dynamic coast from

00:24:42,560 --> 00:24:49,280
ec2 or OpenStack and a few other data

00:24:46,040 --> 00:24:50,360
sources there's one written for cobbler

00:24:49,280 --> 00:24:52,820
for instance if you want to keep all

00:24:50,360 --> 00:24:54,380
your inventory and cobbler but you

00:24:52,820 --> 00:24:56,360
basically define groups of systems and

00:24:54,380 --> 00:24:58,370
you put host into those groups so a

00:24:56,360 --> 00:25:00,080
group could be a role that that system

00:24:58,370 --> 00:25:02,780
is going to fulfill like a web server or

00:25:00,080 --> 00:25:06,170
a database server but it could also be a

00:25:02,780 --> 00:25:08,060
geography like Boston or so on I can

00:25:06,170 --> 00:25:13,040
also put groups in groups and I can also

00:25:08,060 --> 00:25:14,330
assign variables at this point this is

00:25:13,040 --> 00:25:15,590
talking a little bit about what I would

00:25:14,330 --> 00:25:18,050
have said about dynamic inventory

00:25:15,590 --> 00:25:20,690
another one is of our things we support

00:25:18,050 --> 00:25:22,100
is space walk right now should also

00:25:20,690 --> 00:25:24,950
support red-hot satellite server in the

00:25:22,100 --> 00:25:27,110
near future OpenStack Nova I mentioned

00:25:24,950 --> 00:25:28,760
and you can also write your own so if

00:25:27,110 --> 00:25:30,680
you want to keep your inventory and LDAP

00:25:28,760 --> 00:25:32,450
or you decided that maybe I wanted a

00:25:30,680 --> 00:25:34,520
little bit different data format or

00:25:32,450 --> 00:25:37,670
maybe you were you know feeling a little

00:25:34,520 --> 00:25:38,930
bit enthusiastic and wanted to keep it

00:25:37,670 --> 00:25:40,070
in a spreadsheet or something you can

00:25:38,930 --> 00:25:41,990
you can actually do those kind of things

00:25:40,070 --> 00:25:44,600
right and you can also use more than one

00:25:41,990 --> 00:25:46,670
data source at the same time so for like

00:25:44,600 --> 00:25:48,770
a hybrid cloud solution you might pull

00:25:46,670 --> 00:25:50,980
ec2 dynamic inventory and then also add

00:25:48,770 --> 00:25:53,600
in the machines in your data center on

00:25:50,980 --> 00:25:55,340
so you can kind of define you know cloud

00:25:53,600 --> 00:25:59,720
bursting configurations and things like

00:25:55,340 --> 00:26:01,100
that so ansible has two major commands

00:25:59,720 --> 00:26:03,560
there's ansible and there's ansible

00:26:01,100 --> 00:26:05,660
playbook so ansible is the way that you

00:26:03,560 --> 00:26:07,910
execute modules just some kind of like

00:26:05,660 --> 00:26:10,730
one shot so this one module runs against

00:26:07,910 --> 00:26:12,830
all my machines right so if i want to

00:26:10,730 --> 00:26:15,740
say every one of my machines that's in

00:26:12,830 --> 00:26:18,740
the stage hosts file right or maybe

00:26:15,740 --> 00:26:20,300
that's a dynamic inventory script just

00:26:18,740 --> 00:26:23,090
ping them and see if they're up I can do

00:26:20,300 --> 00:26:25,160
it like that very very simple I'll show

00:26:23,090 --> 00:26:27,740
you some examples later of that output

00:26:25,160 --> 00:26:30,170
yeah but I can also match systems by

00:26:27,740 --> 00:26:31,580
expressions or I can actually say host

00:26:30,170 --> 00:26:34,730
in this group and not in this other

00:26:31,580 --> 00:26:35,160
group and things like that I can say run

00:26:34,730 --> 00:26:37,530
again

00:26:35,160 --> 00:26:39,150
my web servers here I'm showing all my

00:26:37,530 --> 00:26:41,820
web servers that are happen to be in

00:26:39,150 --> 00:26:43,980
charlotte in production and shut them

00:26:41,820 --> 00:26:47,030
down in two minutes so it's a really

00:26:43,980 --> 00:26:49,980
good way to say do this right now boom

00:26:47,030 --> 00:26:51,810
with with user been ansible the main

00:26:49,980 --> 00:26:53,160
interesting thing though is ansible

00:26:51,810 --> 00:26:55,140
playbook and this is where we spend most

00:26:53,160 --> 00:26:57,690
of our development time and ansible and

00:26:55,140 --> 00:26:59,340
most of why people are interested in it

00:26:57,690 --> 00:27:02,880
and ansible playbook is our automation

00:26:59,340 --> 00:27:05,100
language so here you basically say I'm

00:27:02,880 --> 00:27:08,820
going to define my configuration and the

00:27:05,100 --> 00:27:10,140
Amal file and run it so what do that

00:27:08,820 --> 00:27:13,080
what is that one of those files look

00:27:10,140 --> 00:27:15,450
like so this is probably a little hard

00:27:13,080 --> 00:27:18,810
for everyone to read but if you go to

00:27:15,450 --> 00:27:20,100
ansible DC / docs you can see lots of

00:27:18,810 --> 00:27:22,620
information about how to construct these

00:27:20,100 --> 00:27:24,990
and there's also an ansible examples

00:27:22,620 --> 00:27:27,030
repo on github and that will help you

00:27:24,990 --> 00:27:29,850
understand as well but what you do is

00:27:27,030 --> 00:27:31,200
you specify what hosts you're going to

00:27:29,850 --> 00:27:34,230
talk to in this case we're talking to

00:27:31,200 --> 00:27:35,670
all of our hosts and we're using right

00:27:34,230 --> 00:27:38,400
here now we're showing a new feature in

00:27:35,670 --> 00:27:40,860
12 called roles and it's just an easy

00:27:38,400 --> 00:27:42,510
way to group and categorize content so

00:27:40,860 --> 00:27:44,730
we're saying all hosts get the common

00:27:42,510 --> 00:27:46,110
policy right we're saying the database

00:27:44,730 --> 00:27:48,390
servers which i'm going to log into

00:27:46,110 --> 00:27:50,790
using my root account here we're

00:27:48,390 --> 00:27:53,070
assuming say ssh keys or ssh agent was

00:27:50,790 --> 00:27:55,350
used we're going to get the database

00:27:53,070 --> 00:27:57,630
server policy here the web servers get

00:27:55,350 --> 00:27:59,850
you know whatever and and you can see

00:27:57,630 --> 00:28:03,930
it's just a very simple data format not

00:27:59,850 --> 00:28:05,550
a lot of syntax and what one of these

00:28:03,930 --> 00:28:08,460
roles files might look like on the

00:28:05,550 --> 00:28:10,460
inside I can show more later you can

00:28:08,460 --> 00:28:13,200
look at the dockside skill bit more is

00:28:10,460 --> 00:28:14,640
we're selecting a module to use here

00:28:13,200 --> 00:28:17,220
we're using the yell module for package

00:28:14,640 --> 00:28:19,620
management right and we're passing in

00:28:17,220 --> 00:28:21,510
some orders here um who are specifying a

00:28:19,620 --> 00:28:24,240
list so here's this with items right so

00:28:21,510 --> 00:28:27,720
we're installing four modules here to be

00:28:24,240 --> 00:28:29,160
four packages but ansible smart so it

00:28:27,720 --> 00:28:30,990
says that it sees that you're installing

00:28:29,160 --> 00:28:32,520
a package lists and it'll do all that in

00:28:30,990 --> 00:28:35,820
one young transaction and would be nice

00:28:32,520 --> 00:28:38,040
and fast here we're setting selinux

00:28:35,820 --> 00:28:40,110
boolean there's a there's a template

00:28:38,040 --> 00:28:43,470
module in ansible as well so if i have a

00:28:40,110 --> 00:28:45,210
local file that's a template i can apply

00:28:43,470 --> 00:28:48,480
it with all the variables that were

00:28:45,210 --> 00:28:48,840
defined in my inventory in my playbook I

00:28:48,480 --> 00:28:52,950
can all

00:28:48,840 --> 00:28:56,070
so dispatch tasks and then save those in

00:28:52,950 --> 00:28:57,419
variables so I could say you know if I

00:28:56,070 --> 00:28:59,309
wanted to say what's the uptime of all

00:28:57,419 --> 00:29:01,610
my hosts and then put it in a canoe in

00:28:59,309 --> 00:29:03,779
some sort of report file I can do that

00:29:01,610 --> 00:29:06,840
the interesting thing about ansible

00:29:03,779 --> 00:29:09,659
though is the order is the way that you

00:29:06,840 --> 00:29:11,520
put it in so it's very easy to not only

00:29:09,659 --> 00:29:13,409
do you know a configuration management

00:29:11,520 --> 00:29:16,350
but also focus on apt appointment so if

00:29:13,409 --> 00:29:19,080
I want to transfer a tarball decide that

00:29:16,350 --> 00:29:22,080
if this file is missing or the wrong

00:29:19,080 --> 00:29:23,880
version I want to extract it install it

00:29:22,080 --> 00:29:26,130
here or perform these other steps I

00:29:23,880 --> 00:29:28,980
could do all those sorts of things in a

00:29:26,130 --> 00:29:32,340
very deployment oriented you know

00:29:28,980 --> 00:29:34,289
straight list of things so the idea here

00:29:32,340 --> 00:29:36,299
is we're just exposing the system as is

00:29:34,289 --> 00:29:38,039
what you think of it and trying to keep

00:29:36,299 --> 00:29:40,289
it all really simple there's also some

00:29:38,039 --> 00:29:41,789
modules in here for doing things with my

00:29:40,289 --> 00:29:45,179
sequel and post crest users and things

00:29:41,789 --> 00:29:46,440
like that so here you can kind of see

00:29:45,179 --> 00:29:48,210
that this is sort of the template

00:29:46,440 --> 00:29:53,490
language and ansible so how we a value

00:29:48,210 --> 00:29:55,200
we can put variables in and and so on so

00:29:53,490 --> 00:29:56,549
when you run that playbook you're going

00:29:55,200 --> 00:29:57,720
to see something a little bit like this

00:29:56,549 --> 00:29:59,760
so you're just going to see a list of

00:29:57,720 --> 00:30:01,770
all the tasks and then it's going to

00:29:59,760 --> 00:30:03,299
report whether things are changed if I

00:30:01,770 --> 00:30:04,919
were to run that with the dash V it's

00:30:03,299 --> 00:30:06,990
going to show more details as the result

00:30:04,919 --> 00:30:10,350
of all those commands and we're also

00:30:06,990 --> 00:30:11,850
working on a very interesting server

00:30:10,350 --> 00:30:13,890
solution that's gonna be called ansible

00:30:11,850 --> 00:30:15,059
work sweet and what you're good to be

00:30:13,890 --> 00:30:17,250
able to do is Gail the history of that

00:30:15,059 --> 00:30:18,480
over time and we're going to be making

00:30:17,250 --> 00:30:21,360
some announcements about that pretty

00:30:18,480 --> 00:30:23,480
soon and it provides you a nice

00:30:21,360 --> 00:30:26,130
web-based way to launch things and so on

00:30:23,480 --> 00:30:28,200
so what's really nice at the end is you

00:30:26,130 --> 00:30:29,970
get this play recap so what that I'll

00:30:28,200 --> 00:30:31,679
tell you is number of steps that ran

00:30:29,970 --> 00:30:33,840
under each host how many failures each

00:30:31,679 --> 00:30:36,450
host had and so on so you can see the

00:30:33,840 --> 00:30:38,250
errors instable is also a fail fast

00:30:36,450 --> 00:30:40,980
system so if you had an error in a

00:30:38,250 --> 00:30:42,690
particular host like you're updating

00:30:40,980 --> 00:30:46,620
your web servers in rolling update

00:30:42,690 --> 00:30:48,059
you're updating 50 at a time and you

00:30:46,620 --> 00:30:49,950
know the first block completely failed

00:30:48,059 --> 00:30:52,380
right it's going to stop the entire

00:30:49,950 --> 00:30:53,429
update process leave that 450 online

00:30:52,380 --> 00:30:56,309
it's not going to walk through the

00:30:53,429 --> 00:30:58,590
process and say update all 450 servers

00:30:56,309 --> 00:31:01,480
to be broken and you can it's really

00:30:58,590 --> 00:31:03,429
good about being able to inject

00:31:01,480 --> 00:31:05,440
unit tests into the middle of your your

00:31:03,429 --> 00:31:07,120
playbooks as well because since it's

00:31:05,440 --> 00:31:08,860
really just this free form list of

00:31:07,120 --> 00:31:11,320
things I can put in a step here that

00:31:08,860 --> 00:31:13,510
says test make sure it works right and

00:31:11,320 --> 00:31:17,760
if that were to fail it would stop my

00:31:13,510 --> 00:31:17,760
rolling update and I maintain my up time

00:31:20,520 --> 00:31:26,200
so what's next for ansible right so

00:31:23,669 --> 00:31:28,480
where I mentioned the UI and the rest

00:31:26,200 --> 00:31:30,179
layer that we're working on but I think

00:31:28,480 --> 00:31:35,049
the general theme is kind of more

00:31:30,179 --> 00:31:37,030
modules right so we the language is

00:31:35,049 --> 00:31:38,679
going to continue to improve and add

00:31:37,030 --> 00:31:40,750
things but I take a really hard stance

00:31:38,679 --> 00:31:42,309
on backwards compatibility as I don't

00:31:40,750 --> 00:31:46,660
want people to have to update their

00:31:42,309 --> 00:31:47,740
their content as his new role new copies

00:31:46,660 --> 00:31:49,630
of ants will come out so we'll probably

00:31:47,740 --> 00:31:51,490
add new language features over time but

00:31:49,630 --> 00:31:52,990
we definitely way that to make sure that

00:31:51,490 --> 00:31:57,370
everything we add is going to be good

00:31:52,990 --> 00:31:59,080
for everyone and then uh it's just this

00:31:57,370 --> 00:32:00,970
barrage of here's all these cool

00:31:59,080 --> 00:32:02,590
services right so let me have this great

00:32:00,970 --> 00:32:08,080
tool box of batteries included things

00:32:02,590 --> 00:32:10,929
and it's it's very very nice to see that

00:32:08,080 --> 00:32:12,640
explode and in very interesting ways

00:32:10,929 --> 00:32:14,710
seeing people start share play books and

00:32:12,640 --> 00:32:16,690
so on we do releases every two months

00:32:14,710 --> 00:32:18,250
which seems to be a pretty good frequent

00:32:16,690 --> 00:32:20,500
interval but there's a lot of people

00:32:18,250 --> 00:32:23,950
that I'll actually run out of straight

00:32:20,500 --> 00:32:26,710
out of github right so we have a pretty

00:32:23,950 --> 00:32:29,260
good ability to test everything and keep

00:32:26,710 --> 00:32:30,160
it working and move forward so some

00:32:29,260 --> 00:32:31,780
people are like I'd like the new

00:32:30,160 --> 00:32:33,880
features I don't wait for a release and

00:32:31,780 --> 00:32:35,980
because there isn't a server and because

00:32:33,880 --> 00:32:37,660
there aren't any agents you can stay up

00:32:35,980 --> 00:32:39,970
to date with the very latest github and

00:32:37,660 --> 00:32:41,440
actually run it in production and as

00:32:39,970 --> 00:32:45,460
scary as that is there's lots of people

00:32:41,440 --> 00:32:49,390
doing that and you can do that so 1.2 is

00:32:45,460 --> 00:32:50,590
actually going to release Monday so if

00:32:49,390 --> 00:32:52,030
you want to start playing around some of

00:32:50,590 --> 00:32:53,710
the new features like roles which I

00:32:52,030 --> 00:32:55,870
mentioned and some of the new templating

00:32:53,710 --> 00:32:57,160
and so on I definitely recommend you to

00:32:55,870 --> 00:33:00,120
start with you know start from github

00:32:57,160 --> 00:33:03,340
and you can do a check out and there's a

00:33:00,120 --> 00:33:05,320
there's a script inside the the check

00:33:03,340 --> 00:33:07,480
out in the hacking directory called env

00:33:05,320 --> 00:33:08,830
setup and if you source that script

00:33:07,480 --> 00:33:09,970
it'll set up your environment to run

00:33:08,830 --> 00:33:12,010
straight out a source and you never have

00:33:09,970 --> 00:33:14,559
to install it at all so that's that's

00:33:12,010 --> 00:33:15,160
pretty cool we're also obviously in all

00:33:14,559 --> 00:33:16,870
the

00:33:15,160 --> 00:33:19,840
if you want to do a young install or and

00:33:16,870 --> 00:33:22,660
then things like that you'll get you'll

00:33:19,840 --> 00:33:26,470
get version 1.1 though so 1.2 is so much

00:33:22,660 --> 00:33:28,000
better a few links to kind of before I

00:33:26,470 --> 00:33:29,440
jump into some questions and if I have

00:33:28,000 --> 00:33:31,180
some extra time left or people are

00:33:29,440 --> 00:33:33,010
interested afterwards I'll fire up my

00:33:31,180 --> 00:33:36,040
laptop and kind of point around some

00:33:33,010 --> 00:33:38,040
resources and some playbooks our company

00:33:36,040 --> 00:33:40,890
is ansible works com so we're doing

00:33:38,040 --> 00:33:43,480
typically kind of the open-source

00:33:40,890 --> 00:33:44,830
consulting and support and services kind

00:33:43,480 --> 00:33:47,770
of thing so if you guys want to get some

00:33:44,830 --> 00:33:49,390
help getting started with ansible we're

00:33:47,770 --> 00:33:52,360
here to do that and be very interested

00:33:49,390 --> 00:33:53,710
talking to you also building like I said

00:33:52,360 --> 00:33:55,060
you know some swimming very nice

00:33:53,710 --> 00:33:58,060
solutions on top that we'll be

00:33:55,060 --> 00:34:00,040
announcing soon community website is at

00:33:58,060 --> 00:34:04,030
ansible CC where you can see all about

00:34:00,040 --> 00:34:06,580
the github repositories and cool things

00:34:04,030 --> 00:34:08,410
that are going on a very active channel

00:34:06,580 --> 00:34:11,140
on freenode is pound ansible if you want

00:34:08,410 --> 00:34:14,470
to join us in IRC there's ansible

00:34:11,140 --> 00:34:15,820
project on google groups not bailing

00:34:14,470 --> 00:34:19,030
last good place to get support and

00:34:15,820 --> 00:34:24,160
questions I am laser llama on Twitter's

00:34:19,030 --> 00:34:26,320
do not ask me why um but I am and and

00:34:24,160 --> 00:34:30,160
works on Twitter and then my emails

00:34:26,320 --> 00:34:31,419
michel ancel works so obviously i was i

00:34:30,160 --> 00:34:34,179
was talking a little fast I didn't get

00:34:31,419 --> 00:34:36,790
it too much chance to dive into a lot of

00:34:34,179 --> 00:34:38,110
the the PlayBook content so I'd like to

00:34:36,790 --> 00:34:42,390
show some of that but does anybody have

00:34:38,110 --> 00:34:42,390
any questions for we get going yes

00:34:55,850 --> 00:35:03,330
yeah yeah this is this cisco router all

00:35:01,410 --> 00:35:04,860
right absolutely oh yeah there's a lot

00:35:03,330 --> 00:35:06,510
of devices like that so what a lot of

00:35:04,860 --> 00:35:07,980
what a lot of people are doing for those

00:35:06,510 --> 00:35:11,670
kind of situations is they're using a

00:35:07,980 --> 00:35:13,230
local module and ansible has this this

00:35:11,670 --> 00:35:15,240
thing called local action right so what

00:35:13,230 --> 00:35:16,800
it says is I'm going to run the module

00:35:15,240 --> 00:35:19,830
on this server and then talk to it

00:35:16,800 --> 00:35:22,800
something remotely so in many cases

00:35:19,830 --> 00:35:24,720
where something as an API the module run

00:35:22,800 --> 00:35:26,940
locally whether that's SSH or even just

00:35:24,720 --> 00:35:28,560
you know locally or on behalf of some

00:35:26,940 --> 00:35:32,760
other host and it'll talk to it that way

00:35:28,560 --> 00:35:35,520
so in the case of your your device that

00:35:32,760 --> 00:35:38,130
has that CLI and so on you might end up

00:35:35,520 --> 00:35:40,830
having to write a module that has some

00:35:38,130 --> 00:35:50,100
you expect based logic right and some

00:35:40,830 --> 00:35:51,000
fun pneus oh great great yeah I'm

00:35:50,100 --> 00:35:55,730
definitely some other networking

00:35:51,000 --> 00:35:57,870
hardware gets in that that model hmm um

00:35:55,730 --> 00:35:58,890
yeah so the question I'm sorry I'm not

00:35:57,870 --> 00:36:00,510
repeating all the questions for the

00:35:58,890 --> 00:36:02,700
microphone so we're talking about

00:36:00,510 --> 00:36:05,070
different devices that don't necessarily

00:36:02,700 --> 00:36:06,690
do SSH and how do you talk to them and

00:36:05,070 --> 00:36:08,250
restful things so that would also be a

00:36:06,690 --> 00:36:10,380
case of your module probably speaking

00:36:08,250 --> 00:36:13,530
rest to the remote thing and as long as

00:36:10,380 --> 00:36:18,990
it returns JSON it's easy to plug it in

00:36:13,530 --> 00:36:20,760
into ansible yes the question was how

00:36:18,990 --> 00:36:22,680
does it compare to you saltstack so

00:36:20,760 --> 00:36:25,500
saltstack was a project that a guy

00:36:22,680 --> 00:36:29,280
started um based on funk which is a

00:36:25,500 --> 00:36:31,320
project that i wrote it uses a zeromq

00:36:29,280 --> 00:36:33,630
based message bus but it does all the

00:36:31,320 --> 00:36:35,340
same crypto as puppet in chef so to me

00:36:33,630 --> 00:36:39,540
saltstack feels like a puppet in chef

00:36:35,340 --> 00:36:41,970
port um and it's it while it's new it

00:36:39,540 --> 00:36:43,920
has a I don't want to say too many

00:36:41,970 --> 00:36:47,640
things about different competing

00:36:43,920 --> 00:36:51,710
projects but I feel its kind of immature

00:36:47,640 --> 00:36:53,940
has a very very high open bug count so

00:36:51,710 --> 00:36:55,710
there are some good things about it I

00:36:53,940 --> 00:36:57,390
like the way that it claims that it has

00:36:55,710 --> 00:36:58,920
this massive scale lead kind of thing

00:36:57,390 --> 00:37:00,190
but on the other hand I'm a little

00:36:58,920 --> 00:37:02,260
disappointed that it

00:37:00,190 --> 00:37:03,790
looks like a puppet poor with with

00:37:02,260 --> 00:37:06,609
ansible we're definitely going for a

00:37:03,790 --> 00:37:08,050
very agentless approach so not having

00:37:06,609 --> 00:37:09,550
the root level demons where you don't

00:37:08,050 --> 00:37:12,010
have to worry about the security issues

00:37:09,550 --> 00:37:13,990
and also having a really really good

00:37:12,010 --> 00:37:17,290
multi-tier orchestration solution right

00:37:13,990 --> 00:37:18,640
so so what that means is I'm able to

00:37:17,290 --> 00:37:23,349
talk to my web servers and my data

00:37:18,640 --> 00:37:26,290
service servers and then going back to

00:37:23,349 --> 00:37:27,369
my other tier right and being able to

00:37:26,290 --> 00:37:29,500
share all that information back and

00:37:27,369 --> 00:37:31,900
forth and deploy my whole systems

00:37:29,500 --> 00:37:33,369
architecture so a lot of systems in the

00:37:31,900 --> 00:37:35,829
space tend to look at configuration

00:37:33,369 --> 00:37:37,180
management like they're say well yeah I

00:37:35,829 --> 00:37:40,089
need to push out these templates and

00:37:37,180 --> 00:37:42,130
these files and so on but when they come

00:37:40,089 --> 00:37:44,319
to actually modeling a process of

00:37:42,130 --> 00:37:48,119
pushing out the software people will

00:37:44,319 --> 00:37:51,700
typically have to strap Capistrano or

00:37:48,119 --> 00:37:53,260
fabric on top right and ansible what I

00:37:51,700 --> 00:37:54,819
wanted to do was actually blend those

00:37:53,260 --> 00:37:56,740
together it's where I can have a very

00:37:54,819 --> 00:38:01,900
good order based system not have to wire

00:37:56,740 --> 00:38:03,190
the dependencies together um so I could

00:38:01,900 --> 00:38:06,280
actually deploy that in a straight line

00:38:03,190 --> 00:38:07,569
and say this is the OS now here's the

00:38:06,280 --> 00:38:08,829
process for the app so maybe it's

00:38:07,569 --> 00:38:11,349
checking out the tarball maybe it's

00:38:08,829 --> 00:38:13,329
doing to get Fame and have a really fine

00:38:11,349 --> 00:38:17,430
grain very simple way to blast all that

00:38:13,329 --> 00:38:21,880
out so put that sort of answers things

00:38:17,430 --> 00:38:23,440
um so I yeah so obviously there's

00:38:21,880 --> 00:38:24,910
different typologies of scales so

00:38:23,440 --> 00:38:26,290
ansible pole is a way that you could

00:38:24,910 --> 00:38:28,780
avert the architecture if you want to go

00:38:26,290 --> 00:38:30,369
in pull base mode but the best data I

00:38:28,780 --> 00:38:34,270
have right now is tweet this morning

00:38:30,369 --> 00:38:39,450
from rackspace they're using us on 3900

00:38:34,270 --> 00:38:39,450
machines yes

00:38:41,810 --> 00:38:46,580
rated 75 my secret

00:38:52,590 --> 00:38:59,530
um I'm not sure I completely understand

00:38:56,020 --> 00:39:08,140
the question was about updating servers

00:38:59,530 --> 00:39:10,090
and not checking that's that's actually

00:39:08,140 --> 00:39:11,710
okay so the question was it was worried

00:39:10,090 --> 00:39:14,890
asynchronous and didn't check the status

00:39:11,710 --> 00:39:16,210
of previous actions and we do so when

00:39:14,890 --> 00:39:18,670
you look at an ansible playbook there's

00:39:16,210 --> 00:39:22,960
a very fine ordered list of operations

00:39:18,670 --> 00:39:24,970
and it'll walk down that list and do one

00:39:22,960 --> 00:39:26,140
step and then you know it'll wait for

00:39:24,970 --> 00:39:28,800
all those on all those notes complete

00:39:26,140 --> 00:39:32,680
before moving on to the next step so if

00:39:28,800 --> 00:39:34,720
if any host were to fail it's going to

00:39:32,680 --> 00:39:36,940
take the that previous hosts out of

00:39:34,720 --> 00:39:39,520
rotation so it's not going to try to

00:39:36,940 --> 00:39:42,340
talk to it anymore which I thought was

00:39:39,520 --> 00:39:44,320
important I have a was working with one

00:39:42,340 --> 00:39:46,480
particular other program in the past and

00:39:44,320 --> 00:39:47,890
it would not fail fast and it would do

00:39:46,480 --> 00:39:49,840
like half the configuration and not

00:39:47,890 --> 00:39:51,720
finish and they're like which half did

00:39:49,840 --> 00:39:55,990
it do and it was like the middle half um

00:39:51,720 --> 00:39:58,000
so yeah I the the idea that it fails and

00:39:55,990 --> 00:40:02,020
it takes the host out of rotation should

00:39:58,000 --> 00:40:03,820
be should be very useful and then it's

00:40:02,020 --> 00:40:05,680
not going to continue based on other

00:40:03,820 --> 00:40:08,110
things and if the entire batch were to

00:40:05,680 --> 00:40:10,720
fail so if you were doing the 100 web

00:40:08,110 --> 00:40:12,070
servers and you carved out the 10 um if

00:40:10,720 --> 00:40:13,300
that whole tin were to fail it's going

00:40:12,070 --> 00:40:15,910
to actually stop the run and not

00:40:13,300 --> 00:40:18,370
continue on so definitely recommend the

00:40:15,910 --> 00:40:22,120
serial key word if you're using using

00:40:18,370 --> 00:40:24,360
that yes the question was do we have a

00:40:22,120 --> 00:40:28,270
rollback in the event of failure so

00:40:24,360 --> 00:40:29,650
there's a many people in the automation

00:40:28,270 --> 00:40:33,160
space that believe that roll backs are a

00:40:29,650 --> 00:40:35,860
lie right um so I tend to believe that

00:40:33,160 --> 00:40:39,970
and I think the main issue there is do

00:40:35,860 --> 00:40:41,770
you have you know data right so if your

00:40:39,970 --> 00:40:43,600
talk about database migrations did you

00:40:41,770 --> 00:40:45,280
write the reverse database migrations

00:40:43,600 --> 00:40:47,650
are they actually going to protect your

00:40:45,280 --> 00:40:49,210
customer data and did it really

00:40:47,650 --> 00:40:53,980
understand what the failure was enough

00:40:49,210 --> 00:40:55,630
to actually go back so yeah yeah so fail

00:40:53,980 --> 00:40:58,510
forward is typically the way that I

00:40:55,630 --> 00:40:59,920
would suggest that you fix problems may

00:40:58,510 --> 00:41:01,450
sure that your test in stage first make

00:40:59,920 --> 00:41:02,610
sure you test in production and if

00:41:01,450 --> 00:41:05,920
you're doing the rolling update

00:41:02,610 --> 00:41:07,510
hopefully that the you set the the shear

00:41:05,920 --> 00:41:09,610
I'll keyword say this is my batch size

00:41:07,510 --> 00:41:12,370
of my update and when that fails you you

00:41:09,610 --> 00:41:13,870
have a block but yeah roll back sir like

00:41:12,370 --> 00:41:29,140
one of the hardest things that anybody

00:41:13,870 --> 00:41:30,810
could figure how to do yes yeah that

00:41:29,140 --> 00:41:42,040
could definitely work in some instances

00:41:30,810 --> 00:41:45,220
good deal yeah yeah yeah absolutely all

00:41:42,040 --> 00:41:46,810
right any other any other questions all

00:41:45,220 --> 00:41:48,880
right well thank you thank you very much

00:41:46,810 --> 00:41:51,130
everybody I appreciate it i've got lots

00:41:48,880 --> 00:41:53,820
of free ansible work stickers if you

00:41:51,130 --> 00:41:56,820
guys want to stop by and grab one and

00:41:53,820 --> 00:41:56,820
thanks

00:42:30,330 --> 00:42:32,390
you

00:42:35,580 --> 00:42:40,390
when we created asterisk over a decade

00:42:38,320 --> 00:42:42,610
ago we could not have imagined that

00:42:40,390 --> 00:42:44,830
asterisk would not only become the most

00:42:42,610 --> 00:42:46,960
widely adopted open source communication

00:42:44,830 --> 00:42:49,000
software on the planet but that it would

00:42:46,960 --> 00:42:51,520
impact the entire industry in the way

00:42:49,000 --> 00:42:53,500
that it has today asterisk has found its

00:42:51,520 --> 00:42:56,140
way in the more than 170 countries and

00:42:53,500 --> 00:42:58,090
virtually every fortune 1000 company the

00:42:56,140 --> 00:43:00,160
success of asterisk has enabled a

00:42:58,090 --> 00:43:01,570
transition of power from the hands of

00:43:00,160 --> 00:43:03,850
the traditional proprietary phone

00:43:01,570 --> 00:43:06,250
vendors into the hands of the users and

00:43:03,850 --> 00:43:08,200
administrators of phone systems using

00:43:06,250 --> 00:43:09,430
this power our customers have created

00:43:08,200 --> 00:43:11,350
all sorts of business changing

00:43:09,430 --> 00:43:13,210
applications from small office phone

00:43:11,350 --> 00:43:15,700
systems to mission-critical call centers

00:43:13,210 --> 00:43:17,320
the international carrier networks in

00:43:15,700 --> 00:43:19,120
fact there's even an entire country

00:43:17,320 --> 00:43:21,490
those communications infrastructure runs

00:43:19,120 --> 00:43:23,650
on esters the gym has always been about

00:43:21,490 --> 00:43:25,360
creating technology that expands

00:43:23,650 --> 00:43:27,520
communications capabilities in ways that

00:43:25,360 --> 00:43:28,720
we could never have imagined and that's

00:43:27,520 --> 00:43:31,480
part of what's game-changing about

00:43:28,720 --> 00:43:33,820
Digium today we're doing it again this

00:43:31,480 --> 00:43:35,890
time by introducing a new family of HD

00:43:33,820 --> 00:43:38,020
IP phones that extends control of the

00:43:35,890 --> 00:43:39,760
user all the way to the desktop the

00:43:38,020 --> 00:43:41,500
launch of these new products represents

00:43:39,760 --> 00:43:43,480
the next phase indigenous history of

00:43:41,500 --> 00:43:45,970
innovation these are the first and only

00:43:43,480 --> 00:43:47,320
IP phones designed to fully leverage the

00:43:45,970 --> 00:43:49,000
power of esther's when we first

00:43:47,320 --> 00:43:50,650
discussed our expectations for building

00:43:49,000 --> 00:43:53,260
a family of phones for use with asterisk

00:43:50,650 --> 00:43:55,060
our requirements were pretty simple we

00:43:53,260 --> 00:43:56,800
asked the team to build the phones such

00:43:55,060 --> 00:43:59,020
that they were easy to install integrate

00:43:56,800 --> 00:44:00,850
provision and use I think you'll soon

00:43:59,020 --> 00:44:03,400
agree our engineers have delivered on

00:44:00,850 --> 00:44:05,050
that goal user feedback is validating

00:44:03,400 --> 00:44:07,150
that when it comes to operation with

00:44:05,050 --> 00:44:09,580
astro space systems including our own

00:44:07,150 --> 00:44:12,160
Switchvox based product these are the

00:44:09,580 --> 00:44:13,480
easiest to use best integrated most

00:44:12,160 --> 00:44:16,060
interoperable products on the market

00:44:13,480 --> 00:44:18,030
today the Digium family phones will

00:44:16,060 --> 00:44:20,140
initially include three IP des hommes

00:44:18,030 --> 00:44:22,030
uniquely designed to complement any

00:44:20,140 --> 00:44:23,920
asterisk or Switchvox based solution

00:44:22,030 --> 00:44:26,590
these phones are different for a number

00:44:23,920 --> 00:44:29,230
of reasons first there is clue sively

00:44:26,590 --> 00:44:30,670
designed for use with esters secondly

00:44:29,230 --> 00:44:32,280
we've made it really easy to

00:44:30,670 --> 00:44:34,660
autodiscover and provision the phones

00:44:32,280 --> 00:44:36,760
next we've made it easy for the phones

00:44:34,660 --> 00:44:38,710
to access information inside of asterisk

00:44:36,760 --> 00:44:41,320
allowing tight coupling between an

00:44:38,710 --> 00:44:43,210
application and the phone additionally

00:44:41,320 --> 00:44:45,490
we've created an application's engine

00:44:43,210 --> 00:44:47,680
that allows users and developers to

00:44:45,490 --> 00:44:50,440
create and run their own apps on the

00:44:47,680 --> 00:44:52,510
phone and finally we've done all of this

00:44:50,440 --> 00:44:54,250
at a very compelling price point at

00:44:52,510 --> 00:44:56,440
digium we're always thinking of ways to

00:44:54,250 --> 00:44:58,810
give our customers the best value in

00:44:56,440 --> 00:45:00,100
business phone systems and also give

00:44:58,810 --> 00:45:02,200
them the power to create their own

00:45:00,100 --> 00:45:04,000
solutions or any communications

00:45:02,200 --> 00:45:05,680
challenge well continue to push the

00:45:04,000 --> 00:45:07,450
boundaries not only to make Astra's

00:45:05,680 --> 00:45:09,310
cooler faster and more technologically

00:45:07,450 --> 00:45:10,870
feature-rich but to make asterisk and

00:45:09,310 --> 00:45:13,090
what communications even easier and

00:45:10,870 --> 00:45:16,560
together we'll change the way the world

00:45:13,090 --> 00:45:16,560
communication again

00:45:36,380 --> 00:45:40,650
your customers rely on your website or

00:45:39,150 --> 00:45:43,020
application if it's slower

00:45:40,650 --> 00:45:45,990
non-responsive it infuriates your users

00:45:43,020 --> 00:45:47,790
and costs you money keeping your

00:45:45,990 --> 00:45:51,300
business critical systems humming along

00:45:47,790 --> 00:45:53,610
requires insight into what they're doing

00:45:51,300 --> 00:45:55,560
your system metrics tells stories

00:45:53,610 --> 00:45:57,570
stories that can reveal performance

00:45:55,560 --> 00:45:59,910
bottlenecks resource limitations and

00:45:57,570 --> 00:46:01,470
other problems but how do you keep an

00:45:59,910 --> 00:46:04,140
eye on all of your systems performance

00:46:01,470 --> 00:46:07,140
metrics in real-time and record this

00:46:04,140 --> 00:46:09,150
data for later analysis enter longview

00:46:07,140 --> 00:46:10,950
the new way to see what's really going

00:46:09,150 --> 00:46:13,080
on under the hood the long view

00:46:10,950 --> 00:46:15,150
dashboard lets you visualize the status

00:46:13,080 --> 00:46:17,610
of all your systems providing you with a

00:46:15,150 --> 00:46:21,000
bird's-eye view of your entire fleet you

00:46:17,610 --> 00:46:23,580
can sort by cpu memory swap processes

00:46:21,000 --> 00:46:25,320
load and network usage click a specific

00:46:23,580 --> 00:46:27,720
system to access its individual

00:46:25,320 --> 00:46:30,230
dashboard then click and drag to zoom in

00:46:27,720 --> 00:46:32,640
on chokepoints and get more detail

00:46:30,230 --> 00:46:34,320
comprehensive network data including

00:46:32,640 --> 00:46:36,630
inbound and outbound traffic is

00:46:34,320 --> 00:46:38,190
available on the network tab and disk

00:46:36,630 --> 00:46:40,110
rights and free space on the disk

00:46:38,190 --> 00:46:42,960
stabbed while the process Explorer

00:46:40,110 --> 00:46:45,480
displays usage statistics for individual

00:46:42,960 --> 00:46:47,670
processes the system info tab shows

00:46:45,480 --> 00:46:49,890
listening services active connections

00:46:47,670 --> 00:46:52,050
and available updates adding long view

00:46:49,890 --> 00:46:53,730
to a system is easy just click the

00:46:52,050 --> 00:46:55,890
button copy the one line installation

00:46:53,730 --> 00:46:58,320
command then run the command on your

00:46:55,890 --> 00:47:00,030
linux system to complete the process the

00:46:58,320 --> 00:47:02,220
agent will begin collecting data and

00:47:00,030 --> 00:47:04,059
sending it to longview then the graphs

00:47:02,220 --> 00:47:06,609
start rolling

00:47:04,059 --> 00:47:08,979
use longview to gain visibility into

00:47:06,609 --> 00:47:12,719
your servers so when your website or app

00:47:08,979 --> 00:47:12,719
heats up it stays up

00:47:16,570 --> 00:47:23,050
how's that sigh every way this is the

00:47:19,750 --> 00:47:25,210
way to better utilize all your resources

00:47:23,050 --> 00:47:28,660
and it makes managing all your resources

00:47:25,210 --> 00:47:32,520
pretty easy all of the innovation is

00:47:28,660 --> 00:47:36,010
happening in open source the

00:47:32,520 --> 00:47:37,840
collaborative nature and of the you know

00:47:36,010 --> 00:47:39,940
of the community and the speed at which

00:47:37,840 --> 00:47:41,920
these are these you know these these

00:47:39,940 --> 00:47:45,130
deficiencies these bugs are getting

00:47:41,920 --> 00:47:47,470
discovered and then fixed is that really

00:47:45,130 --> 00:47:50,380
shows the power of the of the open

00:47:47,470 --> 00:47:52,530
source community it is global and it's

00:47:50,380 --> 00:47:56,080
definitely because of the users

00:47:52,530 --> 00:48:02,050
community people are extremely friendly

00:47:56,080 --> 00:48:03,790
and always ready to help if you go on

00:48:02,050 --> 00:48:05,920
tire see any day you'll see these guys

00:48:03,790 --> 00:48:08,620
helping each other out and they're all

00:48:05,920 --> 00:48:10,300
doing it like in a selfless manner the

00:48:08,620 --> 00:48:13,320
product is transparent for everyone

00:48:10,300 --> 00:48:16,510
everyone can look at the code base

00:48:13,320 --> 00:48:18,720
everyone can see how CloudStack is being

00:48:16,510 --> 00:48:24,250
built nothing nothing is proprietary

00:48:18,720 --> 00:48:26,830
everything is open in many ways it's

00:48:24,250 --> 00:48:31,330
absolutely vital to the the unborn

00:48:26,830 --> 00:48:35,530
health CloudStack the most exciting

00:48:31,330 --> 00:48:38,350
event in recent memory for me was our

00:48:35,530 --> 00:48:41,020
first developer boot camp

00:48:38,350 --> 00:48:43,660
and our call gave people I gave you two

00:48:41,020 --> 00:48:47,620
weeks notice to come attend I was

00:48:43,660 --> 00:48:51,790
expecting 25 or 30 people so we ended up

00:48:47,620 --> 00:48:54,640
with 87 people and had to go get more

00:48:51,790 --> 00:48:57,160
chairs in the room twice everything

00:48:54,640 --> 00:49:00,490
within cloud computing is commodity and

00:48:57,160 --> 00:49:03,490
is open source and so I don't think that

00:49:00,490 --> 00:49:05,230
you will you'll see anywhere where open

00:49:03,490 --> 00:49:08,260
source is not pervasive in cloud

00:49:05,230 --> 00:49:10,990
computing and so i think it's i think

00:49:08,260 --> 00:49:12,340
it's an assumption i think when you talk

00:49:10,990 --> 00:49:13,450
about cloud computing you're really

00:49:12,340 --> 00:49:19,000
talking about open source cloud

00:49:13,450 --> 00:49:22,030
computing cloud sac is a robust solution

00:49:19,000 --> 00:49:24,160
for large deployments you'll have dozens

00:49:22,030 --> 00:49:28,450
of data centers and thousands of servers

00:49:24,160 --> 00:49:31,120
in each data centers these hardware is

00:49:28,450 --> 00:49:34,600
going to fail and CloudStack is designed

00:49:31,120 --> 00:49:37,300
to handle number one that mass scale

00:49:34,600 --> 00:49:40,480
number two it's designed to handle the

00:49:37,300 --> 00:49:42,760
failure that inevitably happens in large

00:49:40,480 --> 00:49:45,580
deployments we started working on

00:49:42,760 --> 00:49:49,240
college attack over four years ago and

00:49:45,580 --> 00:49:51,670
it was the original set of people

00:49:49,240 --> 00:49:53,860
working on it I had a background of

00:49:51,670 --> 00:49:57,670
delivering software telcos and service

00:49:53,860 --> 00:50:02,080
providers lots of QA lots of users

00:49:57,670 --> 00:50:06,150
actually using it high availability is a

00:50:02,080 --> 00:50:09,040
key feature multiple hypervisors support

00:50:06,150 --> 00:50:11,500
different network models we can pick up

00:50:09,040 --> 00:50:13,660
whatever suits you better while step

00:50:11,500 --> 00:50:17,170
management server can be deployed in

00:50:13,660 --> 00:50:18,970
different physical machines it

00:50:17,170 --> 00:50:20,590
definitely has a huge footprint it's

00:50:18,970 --> 00:50:24,059
being deployed everywhere there's a

00:50:20,590 --> 00:50:26,969
major movie studio that

00:50:24,059 --> 00:50:30,479
they were using CloudStack they were

00:50:26,969 --> 00:50:31,979
using it to transcode video and i

00:50:30,479 --> 00:50:33,989
thought that was terribly fascinating

00:50:31,979 --> 00:50:36,029
what i found more fascinating is what

00:50:33,989 --> 00:50:39,779
they did during lunch where they would

00:50:36,029 --> 00:50:41,219
spin up you know 50 or 60 game servers

00:50:39,779 --> 00:50:43,079
then as soon as lunch was over they

00:50:41,219 --> 00:50:45,719
would destroy all the instances and get

00:50:43,079 --> 00:50:48,390
back to doing real work CloudStack is

00:50:45,719 --> 00:50:50,039
vast it touches so many different

00:50:48,390 --> 00:50:52,229
aspects and there's no one person that's

00:50:50,039 --> 00:50:56,039
kind of like a master of all those well

00:50:52,229 --> 00:50:58,739
I think CloudStack as a project is going

00:50:56,039 --> 00:51:02,539
to be one of the leaders simply because

00:50:58,739 --> 00:51:09,209
it's some of the most feature fallen and

00:51:02,539 --> 00:51:12,439
and robust platforms out they were Adams

00:51:09,209 --> 00:51:12,439
senior living through the clouds dag

00:51:25,290 --> 00:51:30,369
most enterprises today realize that

00:51:28,060 --> 00:51:32,020
usernames and passwords alone aren't

00:51:30,369 --> 00:51:34,390
enough to keep their networks saved from

00:51:32,020 --> 00:51:36,460
unauthorized intrusions that's my

00:51:34,390 --> 00:51:38,950
two-factor authentication has gotten so

00:51:36,460 --> 00:51:40,869
popular lately and adds that extra layer

00:51:38,950 --> 00:51:43,480
of protection enterprise networks need

00:51:40,869 --> 00:51:45,369
to stay safe but what you may not know

00:51:43,480 --> 00:51:47,680
is that some two-factor authentication

00:51:45,369 --> 00:51:49,900
solutions they're better than others

00:51:47,680 --> 00:51:53,140
like two-factor strong authentication

00:51:49,900 --> 00:51:55,210
with wicked wicked goes beyond other

00:51:53,140 --> 00:51:57,820
authentication systems by being less

00:51:55,210 --> 00:52:00,610
expensive easier to implement and easier

00:51:57,820 --> 00:52:02,260
to use giving software-based token

00:52:00,610 --> 00:52:05,110
clients built to run on all major

00:52:02,260 --> 00:52:07,740
devices and OSS including iOS and

00:52:05,110 --> 00:52:10,060
Android these tokens utilize a

00:52:07,740 --> 00:52:12,460
public/private key combination that's

00:52:10,060 --> 00:52:14,410
generated on device so there aren't any

00:52:12,460 --> 00:52:16,930
shared secrets flying around or

00:52:14,410 --> 00:52:19,810
attackers to hijack or which require any

00:52:16,930 --> 00:52:21,670
special handling instead all keys are

00:52:19,810 --> 00:52:24,130
kept secure and private between the

00:52:21,670 --> 00:52:26,320
requesting token and your server which

00:52:24,130 --> 00:52:27,940
you control aim house making it the most

00:52:26,320 --> 00:52:30,609
secure way possible to perform

00:52:27,940 --> 00:52:33,430
authentication encryption and with an

00:52:30,609 --> 00:52:36,190
extensive flexible API and support for

00:52:33,430 --> 00:52:38,170
protocols like L dev and radius wicked

00:52:36,190 --> 00:52:39,820
works with any enterprise network

00:52:38,170 --> 00:52:42,060
architecture to protect

00:52:39,820 --> 00:52:44,670
IT systems vital to your enterprise

00:52:42,060 --> 00:52:46,660
download your wicked free trial today

00:52:44,670 --> 00:52:48,460
regardless of whether you're considering

00:52:46,660 --> 00:52:50,260
two-factor authentication for the first

00:52:48,460 --> 00:52:53,500
time we're just ready to ditch your

00:52:50,260 --> 00:52:55,870
existing expensive key file system we

00:52:53,500 --> 00:53:00,810
can help with easy to implement easy to

00:52:55,870 --> 00:53:00,810

YouTube URL: https://www.youtube.com/watch?v=5gEsz2mM0Eo


