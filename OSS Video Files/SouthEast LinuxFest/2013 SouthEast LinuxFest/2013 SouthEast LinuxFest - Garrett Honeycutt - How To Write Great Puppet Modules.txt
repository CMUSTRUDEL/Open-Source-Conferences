Title: 2013 SouthEast LinuxFest - Garrett Honeycutt - How To Write Great Puppet Modules
Publication date: 2015-04-17
Playlist: 2013 SouthEast LinuxFest
Description: 
	2013 SouthEast LinuxFest
Garrett Honeycutt
How To Write Great Puppet Modules
Captions: 
	00:00:00,000 --> 00:00:05,160
the following presentation was recorded

00:00:02,639 --> 00:00:08,280
at the 2013 southeast linux fest in

00:00:05,160 --> 00:00:10,860
charlotte north carolina it is licensed

00:00:08,280 --> 00:00:12,509
under a creative commons license for

00:00:10,860 --> 00:00:17,190
more information about the southeast

00:00:12,509 --> 00:00:19,949
linux fest visit WWF selinux phase or

00:00:17,190 --> 00:00:21,810
the southeast linux fest would like to

00:00:19,949 --> 00:00:24,000
thank the following diamond sponsors in

00:00:21,810 --> 00:00:32,250
2013 for helping make these videos

00:00:24,000 --> 00:00:37,110
possible all right hello everybody

00:00:32,250 --> 00:00:38,670
thanks for coming in I'm super stoked to

00:00:37,110 --> 00:00:42,540
be here this is this is my third year in

00:00:38,670 --> 00:00:46,230
a row self so thanks for having me back

00:00:42,540 --> 00:00:48,750
again lots of familiar faces here so

00:00:46,230 --> 00:00:50,100
yeah it's up like jump right in okay

00:00:48,750 --> 00:00:52,949
we're talking about like how to write

00:00:50,100 --> 00:00:56,250
great modules how many folks in here

00:00:52,949 --> 00:00:59,309
consider themselves developers I see a

00:00:56,250 --> 00:01:02,010
show hands okay so about how to have

00:00:59,309 --> 00:01:09,000
half the crowd how many people here

00:01:02,010 --> 00:01:11,880
right puppet code it's about half all

00:01:09,000 --> 00:01:15,000
right like keep your hands up like how

00:01:11,880 --> 00:01:19,170
many people write puppet code is your

00:01:15,000 --> 00:01:23,130
code publicly accessible Oh hands are

00:01:19,170 --> 00:01:26,640
starting to drop is it on github cool do

00:01:23,130 --> 00:01:30,270
you write spec chess and now all the

00:01:26,640 --> 00:01:38,280
hands are down all right so let me know

00:01:30,270 --> 00:01:42,090
continuous integration yeah so like my

00:01:38,280 --> 00:01:45,210
experience with a with puppet but i've

00:01:42,090 --> 00:01:52,110
been using one x 15 years now puppet

00:01:45,210 --> 00:01:54,720
since 2007 i wrote a a bunch of like

00:01:52,110 --> 00:01:58,950
puppet code in order to automate

00:01:54,720 --> 00:02:00,090
building out a VoIP platform so i had a

00:01:58,950 --> 00:02:01,770
lot of kit that i put in different

00:02:00,090 --> 00:02:04,170
cities and we didn't have any

00:02:01,770 --> 00:02:06,719
configuration management I was like how

00:02:04,170 --> 00:02:08,610
am I going to get this done my time

00:02:06,719 --> 00:02:11,160
frame keeps like moving

00:02:08,610 --> 00:02:13,800
and out and we keep getting more

00:02:11,160 --> 00:02:16,560
requirements so i started using puppet

00:02:13,800 --> 00:02:18,240
and a way i went fast forward a few

00:02:16,560 --> 00:02:21,930
years i started working for puppet labs

00:02:18,240 --> 00:02:29,870
as a professional services engineer now

00:02:21,930 --> 00:02:35,310
consulting oh man so the litmus test for

00:02:29,870 --> 00:02:38,880
writing good code is can someone else

00:02:35,310 --> 00:02:42,750
use your code without modification all

00:02:38,880 --> 00:02:46,860
right if you have to edit the code to

00:02:42,750 --> 00:02:49,800
use it it's not good code and so what

00:02:46,860 --> 00:02:51,230
what keeps us from having like great

00:02:49,800 --> 00:02:54,420
code that people can use without

00:02:51,230 --> 00:03:01,250
modification is generally data inside

00:02:54,420 --> 00:03:04,709
the code fellow Patrick Dubois put this

00:03:01,250 --> 00:03:06,870
article up called stop the fork and that

00:03:04,709 --> 00:03:10,890
was this call to stop forking like

00:03:06,870 --> 00:03:13,530
projects with the idea so you know do

00:03:10,890 --> 00:03:16,230
things in a maintainable fashion how

00:03:13,530 --> 00:03:20,640
many folks here try to maintain some

00:03:16,230 --> 00:03:24,510
sort of fork like yeah like how well is

00:03:20,640 --> 00:03:26,070
at work out right yeah it's a whole lot

00:03:24,510 --> 00:03:27,690
better if you know people can just use

00:03:26,070 --> 00:03:29,299
your software without having to modify

00:03:27,690 --> 00:03:31,799
it and then you wouldn't have to fork it

00:03:29,299 --> 00:03:35,670
or you know like getting your

00:03:31,799 --> 00:03:37,560
contributions accepted upstream so what

00:03:35,670 --> 00:03:42,780
I'm going to do is go through a bit of

00:03:37,560 --> 00:03:48,330
evolution of puppet code that I've done

00:03:42,780 --> 00:03:51,750
over the years so the first when i first

00:03:48,330 --> 00:03:54,570
started i wrote the data inside of the

00:03:51,750 --> 00:03:57,750
class how many people have code that

00:03:54,570 --> 00:04:01,480
looks that looks like this yeah that's

00:03:57,750 --> 00:04:05,370
fine and so here we see I've got a

00:04:01,480 --> 00:04:08,560
case statement based on what site I'm in

00:04:05,370 --> 00:04:12,370
I've got my different sites and I've got

00:04:08,560 --> 00:04:14,730
my data and then it's doing something so

00:04:12,370 --> 00:04:17,440
like the issues with this is that I

00:04:14,730 --> 00:04:18,940
can't just share this with you one I

00:04:17,440 --> 00:04:21,850
probably can't share it with you because

00:04:18,940 --> 00:04:23,320
i'm giving away identifying information

00:04:21,850 --> 00:04:25,210
so i might not be able to put this

00:04:23,320 --> 00:04:28,810
online in the first place because i'm

00:04:25,210 --> 00:04:30,610
telling you too much insider info i'll

00:04:28,810 --> 00:04:32,830
be not with dns client but with other

00:04:30,610 --> 00:04:35,229
modules so I that prevents me from being

00:04:32,830 --> 00:04:37,660
able to put it online so that's not cool

00:04:35,229 --> 00:04:41,680
even if I get there let's see I've

00:04:37,660 --> 00:04:45,340
encoded the data that's obvious but I've

00:04:41,680 --> 00:04:47,620
also encoded what my sites are and I'm

00:04:45,340 --> 00:04:50,289
encoded that i'm looking it up based on

00:04:47,620 --> 00:04:52,570
the site maybe you don't call it site

00:04:50,289 --> 00:04:54,430
maybe you want to base it based on your

00:04:52,570 --> 00:04:57,699
story your environment or something else

00:04:54,430 --> 00:05:01,419
and so i'm making a lot of assumptions

00:04:57,699 --> 00:05:04,660
here this works well for me and not well

00:05:01,419 --> 00:05:09,849
for you unless you modify it right so

00:05:04,660 --> 00:05:12,490
that's that's how i started out quickly

00:05:09,849 --> 00:05:15,160
this didn't work because in a lot of the

00:05:12,490 --> 00:05:17,500
different classes we kept having the

00:05:15,160 --> 00:05:19,150
same sort of case statements with the

00:05:17,500 --> 00:05:22,060
same you know just with different

00:05:19,150 --> 00:05:28,720
variables inside and so we quickly moved

00:05:22,060 --> 00:05:32,800
to having a set up in the site manifest

00:05:28,720 --> 00:05:36,729
we're here I've got a default node and

00:05:32,800 --> 00:05:39,610
I'm setting all my variables now and now

00:05:36,729 --> 00:05:42,460
i have my actual system is going to

00:05:39,610 --> 00:05:45,479
inherit the default and then include the

00:05:42,460 --> 00:05:49,419
classes how many people are doing this

00:05:45,479 --> 00:05:53,410
and so what i liked about this is that i

00:05:49,419 --> 00:05:55,690
am separating at least the variables and

00:05:53,410 --> 00:05:58,479
stuff out of my classes so now i could

00:05:55,690 --> 00:06:01,090
at least share my class online and i'm

00:05:58,479 --> 00:06:03,550
not like giving away a bunch of like

00:06:01,090 --> 00:06:04,820
data but it's still it's still not

00:06:03,550 --> 00:06:08,410
awesome to have all the

00:06:04,820 --> 00:06:11,150
code are the data inside of the code

00:06:08,410 --> 00:06:13,310
what I also found out like using this

00:06:11,150 --> 00:06:17,420
pattern is that I spent a lot of time

00:06:13,310 --> 00:06:19,430
editing my code to put it notifies so

00:06:17,420 --> 00:06:21,530
that I could debug what was going on and

00:06:19,430 --> 00:06:27,100
so I spent a lot of time like tracing

00:06:21,530 --> 00:06:27,100
down y variables were set how they were

00:06:28,000 --> 00:06:35,870
so in 26 we got parameterised classes

00:06:32,500 --> 00:06:40,790
how many folks have code that looks like

00:06:35,870 --> 00:06:44,450
this yep so I I had just started at

00:06:40,790 --> 00:06:47,630
public labs just after 26 like came out

00:06:44,450 --> 00:06:50,360
in 2010 and I learned about the

00:06:47,630 --> 00:06:54,350
parameterize classes and immediately was

00:06:50,360 --> 00:06:59,210
a hater and refused to promote them at

00:06:54,350 --> 00:07:03,350
all because what we've done here is now

00:06:59,210 --> 00:07:08,090
I have nameservers of the parameter

00:07:03,350 --> 00:07:11,150
right but i still have data in code so

00:07:08,090 --> 00:07:14,450
this is just similar to this like set up

00:07:11,150 --> 00:07:18,050
here only now I use a different syntax

00:07:14,450 --> 00:07:20,660
to invoke the module right I've got all

00:07:18,050 --> 00:07:23,180
my data done that right there this could

00:07:20,660 --> 00:07:24,860
probably be even worse because here I at

00:07:23,180 --> 00:07:26,930
least just set the data and this ugly

00:07:24,860 --> 00:07:28,970
thing and it was good throughout the

00:07:26,930 --> 00:07:31,850
rest of my code you know they had to

00:07:28,970 --> 00:07:34,280
inherit things which is nasty but I only

00:07:31,850 --> 00:07:36,410
had two said it was here I probably had

00:07:34,280 --> 00:07:42,200
to put the same line for every single

00:07:36,410 --> 00:07:44,180
node so I didn't like that I also didn't

00:07:42,200 --> 00:07:47,330
like that the primaries classes didn't

00:07:44,180 --> 00:07:51,140
work with the puppet dashboard popular

00:07:47,330 --> 00:07:53,210
enc external node classifier so we were

00:07:51,140 --> 00:07:54,740
telling people here's how to do things

00:07:53,210 --> 00:08:00,950
but doesn't actually work with our

00:07:54,740 --> 00:08:04,760
software yeah yeah so it wasn't a fan of

00:08:00,950 --> 00:08:06,950
this it also posed like this problem so

00:08:04,760 --> 00:08:10,250
here i have class like dns client I've

00:08:06,950 --> 00:08:12,620
got a default or no like default here I

00:08:10,250 --> 00:08:13,580
just have like name servers so I have to

00:08:12,620 --> 00:08:16,669
pass the

00:08:13,580 --> 00:08:19,789
tributo so if i do this it works and

00:08:16,669 --> 00:08:22,729
I've got my data in there if I just do

00:08:19,789 --> 00:08:26,090
it include this blows up and says you

00:08:22,729 --> 00:08:29,840
must pass nameservers right where does

00:08:26,090 --> 00:08:35,120
it get that info so that's not good I

00:08:29,840 --> 00:08:38,060
think I was in the right direction how

00:08:35,120 --> 00:08:39,860
many folks have classes that are

00:08:38,060 --> 00:08:43,010
parameterize like could I see the show

00:08:39,860 --> 00:08:44,720
fans and how many people have classes

00:08:43,010 --> 00:08:53,209
that don't have defaults they've got

00:08:44,720 --> 00:08:55,040
something like this yeah no yeah so we

00:08:53,209 --> 00:08:58,040
can put in some sort of saying like

00:08:55,040 --> 00:09:01,630
default and if you do this then at least

00:08:58,040 --> 00:09:05,000
you can do the include and it works so

00:09:01,630 --> 00:09:07,970
with parameters classes saying defaults

00:09:05,000 --> 00:09:09,380
are good at least then include works I

00:09:07,970 --> 00:09:12,950
don't have to use the parameterised

00:09:09,380 --> 00:09:21,380
class syntax to declare the class

00:09:12,950 --> 00:09:23,720
anymore so that was a plus cool here I

00:09:21,380 --> 00:09:26,209
can go back and I can I've got the same

00:09:23,720 --> 00:09:29,300
defaults but if I want to I could

00:09:26,209 --> 00:09:32,390
override it with the ugly data in code

00:09:29,300 --> 00:09:37,820
method yeah how many folks are doing

00:09:32,390 --> 00:09:40,220
this why does this look familiar yep how

00:09:37,820 --> 00:09:43,310
many people here are running up at 26

00:09:40,220 --> 00:09:47,029
and you people were running something

00:09:43,310 --> 00:09:48,320
earlier than puppet 26 yeah we're not

00:09:47,029 --> 00:09:50,449
going to laugh for too long I youths

00:09:48,320 --> 00:09:58,350
it's safe to put your hands up okay how

00:09:50,449 --> 00:10:03,570
about 2713 okay

00:09:58,350 --> 00:10:07,290
right on like did anyone here using enc

00:10:03,570 --> 00:10:09,940
external node classifier and so how

00:10:07,290 --> 00:10:12,280
external node classifiers work there

00:10:09,940 --> 00:10:16,150
their purpose is to be able to query

00:10:12,280 --> 00:10:18,010
some other source of truth and so let's

00:10:16,150 --> 00:10:20,110
say you already have a database of all

00:10:18,010 --> 00:10:23,260
your systems you could just add another

00:10:20,110 --> 00:10:25,840
column for what classes you want

00:10:23,260 --> 00:10:28,420
associated with those systems so is it a

00:10:25,840 --> 00:10:30,400
web server database or something so if

00:10:28,420 --> 00:10:33,100
you already had this thing you can add

00:10:30,400 --> 00:10:36,370
more information to it in query it

00:10:33,100 --> 00:10:38,890
directly to write an E and C is actually

00:10:36,370 --> 00:10:42,220
really simple it's just a script that

00:10:38,890 --> 00:10:46,090
runs that takes the certain a as the

00:10:42,220 --> 00:10:49,750
argument and then it expects a yeah

00:10:46,090 --> 00:10:51,310
Mille like this to standard out and so

00:10:49,750 --> 00:10:53,350
if you have the database you could write

00:10:51,310 --> 00:10:57,400
something that you know does a sequel

00:10:53,350 --> 00:10:59,800
like query and output city MO lots of

00:10:57,400 --> 00:11:04,810
people started writing ldap based en

00:10:59,800 --> 00:11:07,090
sees is anyone using that you know those

00:11:04,810 --> 00:11:09,100
were popular but ran into problems that

00:11:07,090 --> 00:11:10,990
people didn't actually already have all

00:11:09,100 --> 00:11:13,480
this information and ldap so they were

00:11:10,990 --> 00:11:17,050
spending all this time building ldap

00:11:13,480 --> 00:11:22,510
stuff and like managing it through that

00:11:17,050 --> 00:11:24,490
which isn't very awesome so the emcs

00:11:22,510 --> 00:11:27,750
were great is now I could put the like

00:11:24,490 --> 00:11:34,540
the data and the enc and not on my code

00:11:27,750 --> 00:11:39,880
so things are getting better oh how many

00:11:34,540 --> 00:11:45,090
people use EXT look up and so EXT look

00:11:39,880 --> 00:11:48,550
up was a tool written by re pioneer and

00:11:45,090 --> 00:11:51,310
our Pienaar excuse me and so here I've

00:11:48,550 --> 00:11:54,850
got a function and it's going to take

00:11:51,310 --> 00:11:59,140
some key like name servers and get it

00:11:54,850 --> 00:12:03,250
back here the this was awesome because

00:11:59,140 --> 00:12:05,980
there was no data in the code it didn't

00:12:03,250 --> 00:12:06,840
support hashes or ways so it was pretty

00:12:05,980 --> 00:12:11,340
limited

00:12:06,840 --> 00:12:13,560
to what it could do it also required you

00:12:11,340 --> 00:12:16,680
to have this external tool eggs to look

00:12:13,560 --> 00:12:19,710
up installed and there wasn't really a

00:12:16,680 --> 00:12:22,470
way within puppet to detect if you had

00:12:19,710 --> 00:12:26,400
it installed so you couldn't say like if

00:12:22,470 --> 00:12:28,530
EXT look up is missing fail the catalog

00:12:26,400 --> 00:12:30,960
right like there wasn't that mechanism

00:12:28,530 --> 00:12:33,570
so it worked as long as you have the

00:12:30,960 --> 00:12:35,430
tool installed people read the readme

00:12:33,570 --> 00:12:37,470
and did it right you know they could get

00:12:35,430 --> 00:12:43,500
it going so this is a step in the right

00:12:37,470 --> 00:12:45,990
direction how many people have seen this

00:12:43,500 --> 00:12:50,040
palette where you have a params class

00:12:45,990 --> 00:12:51,960
and then you use inheritance yeah so

00:12:50,040 --> 00:12:54,300
this was a big for a while and I still

00:12:51,960 --> 00:12:57,510
see this out there so this is this is

00:12:54,300 --> 00:13:00,930
bad because you're inheriting just to

00:12:57,510 --> 00:13:02,880
get values for variables and so the only

00:13:00,930 --> 00:13:05,280
time you should ever use inheritance in

00:13:02,880 --> 00:13:09,780
your code is when you need to override

00:13:05,280 --> 00:13:12,510
an attribute of one of your resources so

00:13:09,780 --> 00:13:17,190
you're not duplicating resources getting

00:13:12,510 --> 00:13:21,300
it just to get variables is really happy

00:13:17,190 --> 00:13:25,710
and so here we have dns client inherits

00:13:21,300 --> 00:13:27,600
dns client params I've got name servers

00:13:25,710 --> 00:13:31,200
and then it's equal to the variable in

00:13:27,600 --> 00:13:35,910
that namespace and then here in brands

00:13:31,200 --> 00:13:38,850
is where I do my look up stuff again

00:13:35,910 --> 00:13:40,860
here i'm still basing it on site so

00:13:38,850 --> 00:13:43,200
that's that's not great because that's

00:13:40,860 --> 00:13:45,480
pretty that means you have to have

00:13:43,200 --> 00:13:47,760
something called site and it needs to be

00:13:45,480 --> 00:13:52,350
set to something and i'm still hard

00:13:47,760 --> 00:13:54,920
coding a lot of data so i was a big

00:13:52,350 --> 00:13:54,920
hater on this

00:13:56,400 --> 00:14:00,790
I will say though that puppet labs is

00:13:59,170 --> 00:14:02,380
going back and I see in a lot of their

00:14:00,790 --> 00:14:04,270
code where they were using this they're

00:14:02,380 --> 00:14:05,920
getting rid of they still have params

00:14:04,270 --> 00:14:08,020
but they're using includes and set of

00:14:05,920 --> 00:14:15,370
inherits and are moving away from this

00:14:08,020 --> 00:14:19,300
so that's a positive cool how many folks

00:14:15,370 --> 00:14:23,110
are using Huayra right and that's a high

00:14:19,300 --> 00:14:28,930
red not hira are we want you to know

00:14:23,110 --> 00:14:32,440
higher okay so pirate is interesting but

00:14:28,930 --> 00:14:33,820
it has sort similar issue to EXT look up

00:14:32,440 --> 00:14:35,860
in that I have to have the tool

00:14:33,820 --> 00:14:39,430
installed I can't really check if it's

00:14:35,860 --> 00:14:42,280
installed or not but here the data is

00:14:39,430 --> 00:14:44,110
not in the code anymore so here I'm

00:14:42,280 --> 00:14:48,640
using this function it's looking up this

00:14:44,110 --> 00:14:51,700
key DNS client name servers and if it

00:14:48,640 --> 00:14:56,730
doesn't find it I've got a same default

00:14:51,700 --> 00:14:56,730
to use right so now we're getting better

00:14:57,510 --> 00:15:03,540
cool so let's let's go into a demo for

00:15:01,060 --> 00:15:03,540
high right

00:15:22,649 --> 00:15:26,829
alright is that is that large enough for

00:15:24,819 --> 00:15:33,129
people to read I realize you can't read

00:15:26,829 --> 00:15:36,639
where it's blue cool so what what hi

00:15:33,129 --> 00:15:39,519
bura allows you to do is look up these

00:15:36,639 --> 00:15:43,660
variables but it allows you to do it in

00:15:39,519 --> 00:15:53,470
a particle-like nature so we define the

00:15:43,660 --> 00:15:56,290
hierarchy here so it has a pluggable

00:15:53,470 --> 00:15:59,230
back end so people use JSON yeah Mel

00:15:56,290 --> 00:16:03,269
redice my sequel ldap all sorts of

00:15:59,230 --> 00:16:07,079
things I'm using just the default gamal

00:16:03,269 --> 00:16:10,120
because it's it's easy to work with and

00:16:07,079 --> 00:16:13,480
so here is best buying a hierarchy to

00:16:10,120 --> 00:16:17,230
look up keys and so I start with the

00:16:13,480 --> 00:16:21,399
most specific thing to look up which for

00:16:17,230 --> 00:16:23,350
me is the fqdn so on a host paces then

00:16:21,399 --> 00:16:27,009
I'm going to environment like dev

00:16:23,350 --> 00:16:28,630
production QA that sort of thing I'm

00:16:27,009 --> 00:16:32,620
defining something else in my hierarchy

00:16:28,630 --> 00:16:34,899
called site now and so this is up to you

00:16:32,620 --> 00:16:37,540
how you define this and so here I define

00:16:34,899 --> 00:16:40,420
the site so now i don't have site in my

00:16:37,540 --> 00:16:42,100
code i have it here and i can use site

00:16:40,420 --> 00:16:43,870
because that's what i like to use but

00:16:42,100 --> 00:16:46,209
maybe you call it pop or you call it

00:16:43,870 --> 00:16:48,490
store or that doesn't apply to you right

00:16:46,209 --> 00:16:51,189
so you have different things that you

00:16:48,490 --> 00:16:53,680
key off of these these variables come

00:16:51,189 --> 00:16:55,779
from factor like by the way then i have

00:16:53,680 --> 00:16:59,139
them look the least specific thing like

00:16:55,779 --> 00:17:02,049
common what this allows me to do is

00:16:59,139 --> 00:17:04,089
a in different data centers I want to

00:17:02,049 --> 00:17:08,350
use different name servers different

00:17:04,089 --> 00:17:10,089
ldap servers you know based on whether

00:17:08,350 --> 00:17:13,389
your endeavor production I want to

00:17:10,089 --> 00:17:16,149
change passwords for the database right

00:17:13,389 --> 00:17:19,389
so then Deb's don't have to know the

00:17:16,149 --> 00:17:22,029
production one this lets me set root

00:17:19,389 --> 00:17:23,620
passwords whether at a global level or I

00:17:22,029 --> 00:17:25,990
can override it and say well if you're

00:17:23,620 --> 00:17:28,449
in dev it's this or if you're in Devon

00:17:25,990 --> 00:17:31,269
you're in this site it's it's this or to

00:17:28,449 --> 00:17:35,110
these specific hosts it's this right and

00:17:31,269 --> 00:17:36,909
so if the key is it found here it just

00:17:35,110 --> 00:17:38,980
goes to the next one goes to the next

00:17:36,909 --> 00:17:43,210
one goes to the next one until it finds

00:17:38,980 --> 00:17:45,159
the key yeah with this what this gives

00:17:43,210 --> 00:17:50,289
me is the power to really have a

00:17:45,159 --> 00:17:52,960
data-driven infrastructure and so I can

00:17:50,289 --> 00:17:54,630
keep my data here not in the code which

00:17:52,960 --> 00:17:58,000
is good because now we can share code

00:17:54,630 --> 00:18:00,850
the date is not there and I get this

00:17:58,000 --> 00:18:03,850
data-driven approach and so I can

00:18:00,850 --> 00:18:06,340
download and use code not for kit and I

00:18:03,850 --> 00:18:08,440
just put in the data like what name

00:18:06,340 --> 00:18:10,570
servers to use what time servers i use

00:18:08,440 --> 00:18:16,240
you know what it's the light talk two

00:18:10,570 --> 00:18:22,720
things so let's take a look at this we

00:18:16,240 --> 00:18:25,630
can use Huayra from the command line and

00:18:22,720 --> 00:18:29,500
so I've got some files already in here

00:18:25,630 --> 00:18:35,320
different things each of these has a key

00:18:29,500 --> 00:18:38,200
in there call test so if I look I see

00:18:35,320 --> 00:18:40,240
it's got a key called test and I just

00:18:38,200 --> 00:18:42,639
put the value equal to the name of the

00:18:40,240 --> 00:18:45,149
file so it's a parent where it's like

00:18:42,639 --> 00:18:45,149
coming from

00:18:48,250 --> 00:18:56,360
guys get the idea here okay so i can say

00:18:53,150 --> 00:18:58,670
Kyra I want to look up test and it's

00:18:56,360 --> 00:19:04,780
going to pull it from common and this is

00:18:58,670 --> 00:19:08,900
my hierarchy or i could say higher test

00:19:04,780 --> 00:19:11,120
but my site is Charlotte and so now it's

00:19:08,900 --> 00:19:12,680
going to pull data from here so maybe I

00:19:11,120 --> 00:19:14,810
have different you know different

00:19:12,680 --> 00:19:16,940
servers that I access my min Charlotte

00:19:14,810 --> 00:19:17,870
compared to when I'm in Atlanta all

00:19:16,940 --> 00:19:20,060
right because I want to keep traffic

00:19:17,870 --> 00:19:24,200
local or I have different passwords for

00:19:20,060 --> 00:19:33,860
things like that here I can say my

00:19:24,200 --> 00:19:42,380
environment is dead so what's what's

00:19:33,860 --> 00:19:45,680
this going to return what's up yeah this

00:19:42,380 --> 00:19:53,380
should return dev because deb is higher

00:19:45,680 --> 00:19:53,380
in the hierarchy right if i put fqdn

00:19:53,440 --> 00:19:58,370
it's going to return from that it's more

00:19:56,270 --> 00:20:00,320
specific that's how i have the hierarchy

00:19:58,370 --> 00:20:02,690
like set up what's great about this is

00:20:00,320 --> 00:20:05,450
if i want to change the hierarchy all i

00:20:02,690 --> 00:20:07,820
have to do is modify this file or drop

00:20:05,450 --> 00:20:11,060
and then we sort the puppet master and

00:20:07,820 --> 00:20:18,470
the hierarchies changed right now i have

00:20:11,060 --> 00:20:21,970
data in there for CLT in indy so I want

00:20:18,470 --> 00:20:21,970
to get a data center in Atlanta

00:20:26,399 --> 00:20:34,119
you know I can create a new file put my

00:20:29,409 --> 00:20:38,019
data in there and then you know now I'm

00:20:34,119 --> 00:20:39,489
pulling data from there right and so it

00:20:38,019 --> 00:20:42,850
makes it really incredibly easy to work

00:20:39,489 --> 00:20:45,100
with I can give access to this like

00:20:42,850 --> 00:20:47,019
maybe two different groups so if you're

00:20:45,100 --> 00:20:48,999
in dev maybe you have access to the dev

00:20:47,019 --> 00:20:50,409
channel and you can change all the

00:20:48,999 --> 00:20:53,409
things you want there if you don't have

00:20:50,409 --> 00:20:56,979
access to the rest this is great also

00:20:53,409 --> 00:21:00,369
for exposing tunable for your site and

00:20:56,979 --> 00:21:03,009
so maybe you're running Apache or tom

00:21:00,369 --> 00:21:05,830
cat or something and you've templated

00:21:03,009 --> 00:21:07,649
out your configuration settings and so I

00:21:05,830 --> 00:21:10,749
can make all of those variables

00:21:07,649 --> 00:21:13,269
accessible here and so in dev who might

00:21:10,749 --> 00:21:16,059
not you know understand puppet or like

00:21:13,269 --> 00:21:18,099
where to go to edit the config files or

00:21:16,059 --> 00:21:19,659
you know how you're supposed to edit the

00:21:18,099 --> 00:21:21,669
config files because they're making

00:21:19,659 --> 00:21:23,830
their eyes bleed looking at XML for tom

00:21:21,669 --> 00:21:26,889
cat or something and so they could look

00:21:23,830 --> 00:21:29,710
at this by gamma file you know tweak the

00:21:26,889 --> 00:21:31,960
numbers and then that's how the system

00:21:29,710 --> 00:21:38,859
is going to look so it makes it really

00:21:31,960 --> 00:21:41,799
data-driven in that aspect like any

00:21:38,859 --> 00:21:46,289
questions about higher what I'm covering

00:21:41,799 --> 00:21:46,289
so far ok

00:22:02,880 --> 00:22:08,680
so the question is our Purim class is

00:22:06,880 --> 00:22:25,840
okay to choose OSS is that what you're

00:22:08,680 --> 00:22:28,030
saying yep yeah well you could just have

00:22:25,840 --> 00:22:29,740
it in your main class and then people

00:22:28,030 --> 00:22:31,360
can override it or not then you don't

00:22:29,740 --> 00:22:38,200
have to have subclasses for that sort of

00:22:31,360 --> 00:22:41,200
thing so here's here's what I did next

00:22:38,200 --> 00:22:44,770
so here I've got this name servers here

00:22:41,200 --> 00:22:47,620
so i have this design pattern with a

00:22:44,770 --> 00:22:49,480
data subclass so this is similar to the

00:22:47,620 --> 00:22:53,650
params subclass but i'm not using

00:22:49,480 --> 00:22:57,880
inheritance so here i have include dns

00:22:53,650 --> 00:23:01,540
client data indiana's client data is

00:22:57,880 --> 00:23:06,520
where I make the high recall and then

00:23:01,540 --> 00:23:08,200
here I'm setting name servers to this to

00:23:06,520 --> 00:23:11,200
the name servers variable from this

00:23:08,200 --> 00:23:14,410
class and so I'm bringing it into the

00:23:11,200 --> 00:23:17,530
local scope the reason I did that is so

00:23:14,410 --> 00:23:20,410
I didn't have to modify the templates if

00:23:17,530 --> 00:23:22,600
you didn't do that then in your template

00:23:20,410 --> 00:23:24,970
you'd have to modify it and you scope

00:23:22,600 --> 00:23:31,240
dot look up far so that I could actually

00:23:24,970 --> 00:23:33,100
find where your variable was this seemed

00:23:31,240 --> 00:23:36,730
a little bit better but it still had the

00:23:33,100 --> 00:23:41,530
issues of you know they had to have

00:23:36,730 --> 00:23:45,220
higher installed this was a little

00:23:41,530 --> 00:23:49,950
kludgy here because now you know why not

00:23:45,220 --> 00:23:49,950
just reference it directly right

00:23:50,850 --> 00:23:59,380
so then public version 3 came out and so

00:23:55,710 --> 00:24:04,149
now I'm back to parameterize classes and

00:23:59,380 --> 00:24:06,100
so here I've got my class that's

00:24:04,149 --> 00:24:09,340
parameterised but I've got a same

00:24:06,100 --> 00:24:11,380
default which is important because this

00:24:09,340 --> 00:24:13,210
allows me to just do include I don't

00:24:11,380 --> 00:24:25,960
have to use the parameterised class like

00:24:13,210 --> 00:24:28,059
syntax I get to say it include so the

00:24:25,960 --> 00:24:29,769
question was am I just like setting

00:24:28,059 --> 00:24:34,029
these defaults like globally and so

00:24:29,769 --> 00:24:38,940
anytime you include DNS client it would

00:24:34,029 --> 00:24:41,980
just use these like bike defaults yeah

00:24:38,940 --> 00:24:47,139
so what what puppet three like gave us

00:24:41,980 --> 00:24:51,220
is data lookups and so here I've got

00:24:47,139 --> 00:24:54,789
class foo attribute class default so if

00:24:51,220 --> 00:24:59,230
I just include foo my attribute is going

00:24:54,789 --> 00:25:03,549
to be the class like default right so

00:24:59,230 --> 00:25:06,120
nothing nothing in there here I'm using

00:25:03,549 --> 00:25:09,820
the parameterised class like syntax

00:25:06,120 --> 00:25:12,250
which I was complaining about before cuz

00:25:09,820 --> 00:25:14,409
we have dated code but now it's saying

00:25:12,250 --> 00:25:16,990
attribute and now it's going to use / am

00:25:14,409 --> 00:25:19,299
data because that's more specific than

00:25:16,990 --> 00:25:24,580
just as default right like I'm telling

00:25:19,299 --> 00:25:30,039
you use that data yep you don't actually

00:25:24,580 --> 00:25:31,779
want to do this this is bad so declaring

00:25:30,039 --> 00:25:34,630
the parameters classes is evil because

00:25:31,779 --> 00:25:35,980
we've gotten data in the code now right

00:25:34,630 --> 00:25:40,860
that's the whole thing we want to get

00:25:35,980 --> 00:25:44,190
away from so we can share good yeah

00:25:40,860 --> 00:25:44,190
that's not awesome

00:25:45,429 --> 00:25:52,220
so defining parameterised classes is

00:25:48,610 --> 00:25:56,150
awesome because i can put saying like

00:25:52,220 --> 00:26:00,200
defaults so that's good and its really

00:25:56,150 --> 00:26:03,650
awesome because I can do lookups now in

00:26:00,200 --> 00:26:08,480
Huayra automatically so the way that

00:26:03,650 --> 00:26:11,480
works is I put my class colon colon and

00:26:08,480 --> 00:26:15,260
then my attribute and I put this as a

00:26:11,480 --> 00:26:19,130
key somewhere in the hierarchy and so

00:26:15,260 --> 00:26:21,590
now Huayra is going to look for this and

00:26:19,130 --> 00:26:25,039
return it if it doesn't find it then it

00:26:21,590 --> 00:26:28,400
would just use the defaults I like for

00:26:25,039 --> 00:26:30,500
my class and so I'm able to write code

00:26:28,400 --> 00:26:34,280
that looks like this you can just

00:26:30,500 --> 00:26:37,039
include it and use it if you don't want

00:26:34,280 --> 00:26:39,679
your root password to be puppet then you

00:26:37,039 --> 00:26:41,960
just set this key and Huayra but it's up

00:26:39,679 --> 00:26:45,650
to you where you set the key number like

00:26:41,960 --> 00:26:47,659
only started with DNS client I I was I

00:26:45,650 --> 00:26:50,000
had a case statement and based on the

00:26:47,659 --> 00:26:52,039
site like that I was in because that

00:26:50,000 --> 00:26:54,770
worked for me but you don't care about

00:26:52,039 --> 00:26:57,380
site like you want to base it based on

00:26:54,770 --> 00:27:01,610
what environment you're in or what story

00:26:57,380 --> 00:27:03,620
you're at or some other key so none of

00:27:01,610 --> 00:27:05,900
that's in here I I don't say where

00:27:03,620 --> 00:27:07,610
you're getting the data from it's up to

00:27:05,900 --> 00:27:09,049
you to define the hierarchy such you

00:27:07,610 --> 00:27:11,870
define where do I want to look for

00:27:09,049 --> 00:27:14,539
things you know like where do I make

00:27:11,870 --> 00:27:15,770
that decision and you just put that in

00:27:14,539 --> 00:27:17,390
there somewhere so this could be at the

00:27:15,770 --> 00:27:19,159
fqdn level that you're studying the

00:27:17,390 --> 00:27:21,919
password it could be at the common level

00:27:19,159 --> 00:27:27,289
it could be based on your store based on

00:27:21,919 --> 00:27:29,409
any number of things so show a demo of

00:27:27,289 --> 00:27:29,409
that

00:27:37,420 --> 00:27:53,809
cool so this is my dns client class and

00:27:50,230 --> 00:27:56,960
so this this module i wrote in order to

00:27:53,809 --> 00:27:59,350
showcase how to write a good module like

00:27:56,960 --> 00:28:01,880
we all know what etsy resolv.conf is for

00:27:59,350 --> 00:28:05,420
we all need to manage it on our systems

00:28:01,880 --> 00:28:07,640
probably and so I chose it because it's

00:28:05,420 --> 00:28:11,870
simple there's only one resource a file

00:28:07,640 --> 00:28:13,490
it's very well documented what like what

00:28:11,870 --> 00:28:15,710
it supports there's only a few options

00:28:13,490 --> 00:28:17,470
that you can let bite put in there and

00:28:15,710 --> 00:28:20,300
so I wanted to choose something

00:28:17,470 --> 00:28:23,179
seemingly very simple that everyone used

00:28:20,300 --> 00:28:26,270
to sort of showcase how to how to write

00:28:23,179 --> 00:28:30,860
a good module so it's a good resource to

00:28:26,270 --> 00:28:34,940
look at online too you know like check

00:28:30,860 --> 00:28:36,880
out and so here we see I've got data

00:28:34,940 --> 00:28:41,890
that you would expect nameservers

00:28:36,880 --> 00:28:43,940
options search path domain sort list I

00:28:41,890 --> 00:28:47,150
have other things that you might not

00:28:43,940 --> 00:28:50,660
think about as Bing data so I've gotten

00:28:47,150 --> 00:28:54,320
the path to etsy resolv.conf because I'm

00:28:50,660 --> 00:28:56,660
managing the contents of this file but I

00:28:54,320 --> 00:28:58,250
don't really care where it's at I mean I

00:28:56,660 --> 00:29:00,830
do like I want to add see resolv.conf

00:28:58,250 --> 00:29:04,340
but it could be somewhere else so that's

00:29:00,830 --> 00:29:08,480
that's that's data it should probably be

00:29:04,340 --> 00:29:10,880
a file and we r 0 6 44 but maybe you

00:29:08,480 --> 00:29:13,460
want it to be something else again to me

00:29:10,880 --> 00:29:16,100
that's that's data just like what the

00:29:13,460 --> 00:29:18,170
name servers are is data and so I want

00:29:16,100 --> 00:29:19,850
to abstract all that out so that if you

00:29:18,170 --> 00:29:21,620
wanted it somewhere else and you wanted

00:29:19,850 --> 00:29:23,570
it a different mode or group or

00:29:21,620 --> 00:29:26,390
something you could change all of this

00:29:23,570 --> 00:29:29,030
via Huayra and never have to touch the

00:29:26,390 --> 00:29:30,980
code and that's that's that's the goal

00:29:29,030 --> 00:29:34,510
is to give you flexibility so that you

00:29:30,980 --> 00:29:34,510
can use it without having to fork it

00:29:36,110 --> 00:29:44,940
so if I just include this class as it is

00:29:39,860 --> 00:29:47,550
I'll get my name server set here or get

00:29:44,940 --> 00:29:51,090
options rotating and time out one and

00:29:47,550 --> 00:29:56,490
it'll put it at sea resolv.conf route Oh

00:29:51,090 --> 00:30:06,279
644 and so let's see an example of that

00:29:56,490 --> 00:30:09,969
oh yeah

00:30:06,279 --> 00:30:20,080
gee Honeycutt puppet dash module dash

00:30:09,969 --> 00:30:24,279
dns client yeah choice here of running a

00:30:20,080 --> 00:30:28,269
few games on my laptop we'll see if this

00:30:24,279 --> 00:30:31,599
comes out with I've already included the

00:30:28,269 --> 00:30:36,309
DNS client are associated with this node

00:30:31,599 --> 00:30:39,999
via and include so should just get the

00:30:36,309 --> 00:30:44,200
defaults there we go so if i look at

00:30:39,999 --> 00:30:47,469
resolv.conf gives me of utter you know

00:30:44,200 --> 00:30:54,249
don't mess with this and we get the data

00:30:47,469 --> 00:31:00,279
that you would expect right so I can

00:30:54,249 --> 00:31:02,259
override this and high right now so i'm

00:31:00,279 --> 00:31:10,359
going to set dns client is something

00:31:02,259 --> 00:31:12,609
else Alan what's the name servers you're

00:31:10,359 --> 00:31:14,879
using here all right are you running

00:31:12,609 --> 00:31:14,879
your own

00:31:18,100 --> 00:31:34,670
what's that era's put this in so now i'm

00:31:31,910 --> 00:31:40,880
going to use different name servers for

00:31:34,670 --> 00:31:42,320
this let's say I also want to change we

00:31:40,880 --> 00:31:47,780
can look at this code again i also want

00:31:42,320 --> 00:31:52,550
to change my search path so it was

00:31:47,780 --> 00:31:55,090
called search dns client search and i

00:31:52,550 --> 00:31:55,090
want to search

00:31:59,650 --> 00:32:05,830
here okay so I'd have to modify my code

00:32:04,060 --> 00:32:09,790
I just put this in high-risk like

00:32:05,830 --> 00:32:12,000
somewhere that will run the puppet agent

00:32:09,790 --> 00:32:12,000
again

00:32:21,460 --> 00:32:36,130
let it do its thing hopefully not blow

00:32:24,950 --> 00:32:36,130
up on me cool

00:32:38,190 --> 00:32:44,730
and so we see here it changed now I have

00:32:42,000 --> 00:32:50,129
a search path set and my name servers

00:32:44,730 --> 00:32:53,789
are like different so I shows how I was

00:32:50,129 --> 00:33:02,940
able if things in Huayra they'd have to

00:32:53,789 --> 00:33:08,629
modify the code now only on this host I

00:33:02,940 --> 00:33:12,539
actually want to manage see what that

00:33:08,629 --> 00:33:16,559
option was called where the config file

00:33:12,539 --> 00:33:19,379
is for some crazy reason I actually want

00:33:16,559 --> 00:33:21,360
to put this under temp resolve calm

00:33:19,379 --> 00:33:23,669
right so now I'm doing it at another

00:33:21,360 --> 00:33:31,019
level in the hierarchy so at this fqdn

00:33:23,669 --> 00:33:33,450
level for this host I'll put it there so

00:33:31,019 --> 00:33:35,899
I did that by specifying it at the fqdn

00:33:33,450 --> 00:33:35,899
level

00:33:48,230 --> 00:33:53,200
our let's cat tempt resolv.conf that's

00:33:50,720 --> 00:33:53,200
where we put it

00:34:02,150 --> 00:34:05,230
took that puppet

00:34:09,159 --> 00:34:15,669
so again I don't screw this office

00:34:11,450 --> 00:34:19,330
should create a temp resolv.conf and

00:34:15,669 --> 00:34:19,330
with our options

00:34:28,730 --> 00:34:34,830
cool so here we see the temp resolv.conf

00:34:31,440 --> 00:34:36,900
and so it's it's it's taking the option

00:34:34,830 --> 00:34:38,520
of where to put it from the fqdn level

00:34:36,900 --> 00:34:39,840
but then as it goes down in the

00:34:38,520 --> 00:34:42,360
hierarchy as it searched through these

00:34:39,840 --> 00:34:44,520
other variables like search and name

00:34:42,360 --> 00:34:45,720
server it's pulling them from common so

00:34:44,520 --> 00:34:49,110
they can get pulled from different

00:34:45,720 --> 00:34:51,120
levels of the of the Harkey not not all

00:34:49,110 --> 00:34:54,260
of your values have to be you know in

00:34:51,120 --> 00:34:54,260
each one right

00:35:14,720 --> 00:35:19,170
so the question was if you got your

00:35:17,040 --> 00:35:21,720
names to DCP how would you like deal

00:35:19,170 --> 00:35:24,240
with that this current implementation

00:35:21,720 --> 00:35:28,250
doesn't touch that so you need to set

00:35:24,240 --> 00:35:28,250
where your nameservers work

00:35:31,680 --> 00:35:36,309
yes the question was is dr. hand that to

00:35:34,329 --> 00:35:38,170
you so yeah you could get information

00:35:36,309 --> 00:35:41,460
from factor and put that in the

00:35:38,170 --> 00:35:41,460
hierarchy or something

00:35:53,270 --> 00:35:58,560
right on so your code should be here

00:35:56,240 --> 00:36:01,140
this is this is where everybody is like

00:35:58,560 --> 00:36:02,700
putting their puppet code so you should

00:36:01,140 --> 00:36:07,200
be there as well it'll make it a lot

00:36:02,700 --> 00:36:09,960
easier for you to contribute to the

00:36:07,200 --> 00:36:11,730
other modules and work work with

00:36:09,960 --> 00:36:16,290
improving things if you're in the same

00:36:11,730 --> 00:36:18,000
spot when you create your module you

00:36:16,290 --> 00:36:21,630
should give it the name puppet dash

00:36:18,000 --> 00:36:25,140
module your name of the module DNS

00:36:21,630 --> 00:36:28,590
client as opposed to puppet dash DNS

00:36:25,140 --> 00:36:31,740
client this is sort of the the naming

00:36:28,590 --> 00:36:35,030
standard for for that what when you go

00:36:31,740 --> 00:36:38,220
and create your repository on github

00:36:35,030 --> 00:36:41,730
you're going to want to generally seed

00:36:38,220 --> 00:36:44,160
it with a readme and get ignore just

00:36:41,730 --> 00:36:47,970
select Ruby one of your first commits is

00:36:44,160 --> 00:36:50,900
probably going to be to add to ignore

00:36:47,970 --> 00:36:54,720
this puppet stuff so it doesn't get

00:36:50,900 --> 00:37:03,990
committed to your repository like how

00:36:54,720 --> 00:37:07,290
many folks are using again yeah cool so

00:37:03,990 --> 00:37:08,790
next I didn't think that an a a talk

00:37:07,290 --> 00:37:11,570
about writing puppet code I would have

00:37:08,790 --> 00:37:14,970
the demo for how to write or read me but

00:37:11,570 --> 00:37:17,430
that's pretty important and in fact I

00:37:14,970 --> 00:37:20,130
have to write the readme first for the

00:37:17,430 --> 00:37:22,740
options before actually write the code

00:37:20,130 --> 00:37:25,500
so that that way I've given thought to

00:37:22,740 --> 00:37:29,130
what all my options are as well as given

00:37:25,500 --> 00:37:31,430
thought to what the types are so let's

00:37:29,130 --> 00:37:31,430
show that

00:37:38,130 --> 00:37:44,490
actually let's just show that in a web

00:37:42,460 --> 00:37:44,490
browser

00:37:55,260 --> 00:38:05,160
come on Wi-Fi all right and so it my

00:37:59,520 --> 00:38:07,560
read me the first things I put is just a

00:38:05,160 --> 00:38:09,060
quick description of what's going on and

00:38:07,560 --> 00:38:11,820
then I'm going to want to have a section

00:38:09,060 --> 00:38:16,410
for compatibility so what what have I

00:38:11,820 --> 00:38:18,120
tested this on so when I have a list of

00:38:16,410 --> 00:38:20,070
that that way people can easily look at

00:38:18,120 --> 00:38:23,730
it and see you know is this supported

00:38:20,070 --> 00:38:25,950
for me or not or maybe it does work but

00:38:23,730 --> 00:38:31,140
you know they haven't tested it on that

00:38:25,950 --> 00:38:35,180
system right so I'm I'm guessing that

00:38:31,140 --> 00:38:37,470
slackware also uses an Etsy resolv.conf

00:38:35,180 --> 00:38:39,900
fairly standard so this probably works

00:38:37,470 --> 00:38:42,120
on slackware just like everything else

00:38:39,900 --> 00:38:46,230
here I just haven't had a system to test

00:38:42,120 --> 00:38:48,390
it on so somebody can like use this show

00:38:46,230 --> 00:38:51,630
that it works send me a pull request for

00:38:48,390 --> 00:38:54,780
also supports slackware and then there

00:38:51,630 --> 00:38:57,630
you go so I want to document all my

00:38:54,780 --> 00:39:00,780
parameters as well and so this is sort

00:38:57,630 --> 00:39:04,170
of a a layout that puppet labs has

00:39:00,780 --> 00:39:06,750
adopted and I've adopted here that just

00:39:04,170 --> 00:39:09,270
shows what all of the attributes all the

00:39:06,750 --> 00:39:11,580
parameters what they are notice I listen

00:39:09,270 --> 00:39:13,800
to what the type is so it's not just

00:39:11,580 --> 00:39:15,930
where you list your nameservers it's an

00:39:13,800 --> 00:39:18,600
array of name servers or it's a string

00:39:15,930 --> 00:39:21,210
or it's a boolean right so it's a hash

00:39:18,600 --> 00:39:23,910
but here's where you put you know what

00:39:21,210 --> 00:39:26,010
you expect it to be for type as well as

00:39:23,910 --> 00:39:28,800
I'm putting what the default is so I've

00:39:26,010 --> 00:39:31,410
defaulting to Google's public like name

00:39:28,800 --> 00:39:33,720
servers or my options I default to

00:39:31,410 --> 00:39:37,920
rotate and time out one because I think

00:39:33,720 --> 00:39:39,600
you should use that so it's important to

00:39:37,920 --> 00:39:41,610
put this down I often want to do this

00:39:39,600 --> 00:39:45,990
before I write any code all like

00:39:41,610 --> 00:39:47,670
document this that way I'm actually

00:39:45,990 --> 00:39:50,350
thought out look like what are the

00:39:47,670 --> 00:39:54,290
things I want to manage

00:39:50,350 --> 00:39:57,080
yeah things to help with this this is

00:39:54,290 --> 00:39:59,240
written in markdown you can get a den

00:39:57,080 --> 00:40:02,600
plugin for mark down but it's not very

00:39:59,240 --> 00:40:09,590
awesome it just makes it not look too

00:40:02,600 --> 00:40:11,120
terrible there's also other dis markdown

00:40:09,590 --> 00:40:13,700
utilities that you can get so i'd

00:40:11,120 --> 00:40:15,910
recommend like getting something like

00:40:13,700 --> 00:40:15,910
that

00:40:24,460 --> 00:40:30,430
yes the the response was get help has a

00:40:28,540 --> 00:40:33,220
utility for this and yep like we saw I

00:40:30,430 --> 00:40:35,380
was showing the github page and so you

00:40:33,220 --> 00:40:38,109
know it'll automatically show your

00:40:35,380 --> 00:40:40,089
readme md or read me dot mark down and

00:40:38,109 --> 00:40:49,450
it'll automatically format it so when

00:40:40,089 --> 00:40:53,560
you go to the page it just shows up so

00:40:49,450 --> 00:40:56,589
the next part of the of your module

00:40:53,560 --> 00:40:58,420
should be a module file how many people

00:40:56,589 --> 00:41:02,859
here start off creating their modules

00:40:58,420 --> 00:41:06,190
with make dirt anyone know some folks

00:41:02,859 --> 00:41:08,680
are using puppet module generate yeah

00:41:06,190 --> 00:41:11,290
good and so it'll create some

00:41:08,680 --> 00:41:13,810
boilerplate info for you for what's in

00:41:11,290 --> 00:41:16,060
the module file so the module file is

00:41:13,810 --> 00:41:20,080
basically a bunch of metadata about your

00:41:16,060 --> 00:41:22,119
module so it has the name of it you know

00:41:20,080 --> 00:41:25,450
versions source all that good stuff

00:41:22,119 --> 00:41:28,119
licensing it has dependency like

00:41:25,450 --> 00:41:32,250
tracking as well so you can like do that

00:41:28,119 --> 00:41:35,050
what this gives you is the ability to

00:41:32,250 --> 00:41:38,109
search on the forge so you could go to

00:41:35,050 --> 00:41:44,800
forge puppet labs com and look through

00:41:38,109 --> 00:41:47,970
the web UI there or we could actually

00:41:44,800 --> 00:41:47,970
search here

00:41:50,650 --> 00:42:03,460
so look for my our sink module and so

00:42:00,920 --> 00:42:11,240
maybe it'll get there and it will show

00:42:03,460 --> 00:42:17,960
won't get there of course i won't get

00:42:11,240 --> 00:42:22,910
there blew up my resolver all right but

00:42:17,960 --> 00:42:24,860
you could search online there yeah for

00:42:22,910 --> 00:42:26,510
your code as well as install it and so

00:42:24,860 --> 00:42:32,480
by having the dependencies it's able to

00:42:26,510 --> 00:42:34,760
actually install those as well the

00:42:32,480 --> 00:42:39,590
versioning here I notice I got three dot

00:42:34,760 --> 00:42:40,880
03 think it's 304 I push another fix I

00:42:39,590 --> 00:42:44,600
think this morning it's someone else's

00:42:40,880 --> 00:42:47,300
talk and it's it's using semantic

00:42:44,600 --> 00:42:49,040
versioning how many people here are

00:42:47,300 --> 00:42:52,190
using semantic versioning for their

00:42:49,040 --> 00:42:54,400
puppet code now how many people are

00:42:52,190 --> 00:42:56,570
using semantic versioning somewhere else

00:42:54,400 --> 00:43:01,340
who's never heard of semantic versioning

00:42:56,570 --> 00:43:04,010
before okay you've read this issue where

00:43:01,340 --> 00:43:07,580
you have you're looking at versions and

00:43:04,010 --> 00:43:12,080
it's different like between projects

00:43:07,580 --> 00:43:14,510
right so this place has like like 09

00:43:12,080 --> 00:43:17,660
forever they keep putting like letters

00:43:14,510 --> 00:43:20,330
after it or this project has you know

00:43:17,660 --> 00:43:24,310
one dot to dot 3 dot for dot 5 and this

00:43:20,330 --> 00:43:26,720
project just has like get like hashes

00:43:24,310 --> 00:43:30,440
it's like what does that stuff mean and

00:43:26,720 --> 00:43:33,770
so cember is a standard for versioning

00:43:30,440 --> 00:43:37,850
you can go to some ver org it's like a

00:43:33,770 --> 00:43:39,560
two page read it's super short I was

00:43:37,850 --> 00:43:42,110
breaking down what's going on here so

00:43:39,560 --> 00:43:45,020
this first number is the major number

00:43:42,110 --> 00:43:48,110
and when you increment the major number

00:43:45,020 --> 00:43:51,170
you can break backwards compatibility

00:43:48,110 --> 00:43:54,350
this is where you can break the API you

00:43:51,170 --> 00:43:56,990
know things change here the next number

00:43:54,350 --> 00:43:59,600
is the feature release so if you add a

00:43:56,990 --> 00:44:03,230
new feature you bump that number

00:43:59,600 --> 00:44:07,010
and the third digit is for bug fixes

00:44:03,230 --> 00:44:08,780
only right and so I can look at this

00:44:07,010 --> 00:44:13,330
code and if something starts with a0

00:44:08,780 --> 00:44:16,010
like it sits before the one dot to dot 3

00:44:13,330 --> 00:44:18,680
then it's it's it's baited level code

00:44:16,010 --> 00:44:22,430
right like it hasn't hit the first level

00:44:18,680 --> 00:44:23,540
where you know it's like usable so you

00:44:22,430 --> 00:44:25,670
can look at these that usually

00:44:23,540 --> 00:44:28,130
understand what's going on if it goes

00:44:25,670 --> 00:44:30,260
from version 3 diversion for it could

00:44:28,130 --> 00:44:32,570
very likely break things and I eat like

00:44:30,260 --> 00:44:35,120
I need to really test it what this

00:44:32,570 --> 00:44:39,830
allows me to do is things like this so

00:44:35,120 --> 00:44:41,960
I'm dependent on version 32 X because

00:44:39,830 --> 00:44:44,510
that actually means something and is

00:44:41,960 --> 00:44:46,280
just some number some guy I came up with

00:44:44,510 --> 00:44:50,600
this is like a promise this is only bug

00:44:46,280 --> 00:44:54,200
fixes so I'll get any bug fix in here

00:44:50,600 --> 00:44:55,730
I'll be dependent on that version if I

00:44:54,200 --> 00:44:58,490
wanted to live a little more on the edge

00:44:55,730 --> 00:45:00,950
and i also want feature releases as well

00:44:58,490 --> 00:45:03,560
i could have just put three Dow X and

00:45:00,950 --> 00:45:06,820
then I would have got feature releases

00:45:03,560 --> 00:45:06,820
in that branch as well

00:45:10,019 --> 00:45:19,509
who here is using puppetland has anyone

00:45:15,490 --> 00:45:23,559
read the pub lob style guide excellent

00:45:19,509 --> 00:45:26,140
so the pub laps dog guy talks about a

00:45:23,559 --> 00:45:29,799
lot of really exciting things like to

00:45:26,140 --> 00:45:32,230
spike two spaced indentations and no

00:45:29,799 --> 00:45:36,819
hard tabs of trailing whitespace it's a

00:45:32,230 --> 00:45:40,000
a riveting read that I'm uh glad that I

00:45:36,819 --> 00:45:41,410
got to contribute to I'm glad i got to

00:45:40,000 --> 00:45:43,960
contribute to it but it's pretty boring

00:45:41,410 --> 00:45:46,299
it does give you though more than just

00:45:43,960 --> 00:45:47,529
how to handle tabs and white spaces and

00:45:46,299 --> 00:45:49,900
things like this it tells you how to

00:45:47,529 --> 00:45:53,890
handle you know having defaults for case

00:45:49,900 --> 00:45:57,329
statements and and a bit more into the

00:45:53,890 --> 00:46:01,710
code so it is worthwhile to read I

00:45:57,329 --> 00:46:05,069
worked hard to have it versioned and so

00:46:01,710 --> 00:46:07,660
for you you can say I adhere to version

00:46:05,069 --> 00:46:09,670
whatever of the puppet labs style guide

00:46:07,660 --> 00:46:12,369
and that way people that you're writing

00:46:09,670 --> 00:46:17,589
code with have an understanding that you

00:46:12,369 --> 00:46:19,569
know we're going to adhere to this each

00:46:17,589 --> 00:46:22,839
of the sections is numbered so you can

00:46:19,569 --> 00:46:25,329
also say be adhere to version 1 2 3 of

00:46:22,839 --> 00:46:28,299
the puppet labs dog I'd except for

00:46:25,329 --> 00:46:29,950
section 10 dot one dot five because

00:46:28,299 --> 00:46:31,660
they're crazy and we do it this way

00:46:29,950 --> 00:46:33,670
right but then at least people that you

00:46:31,660 --> 00:46:36,160
work with they know what's going on and

00:46:33,670 --> 00:46:39,910
everyone is together on what's

00:46:36,160 --> 00:46:42,670
acceptable life for the code so what

00:46:39,910 --> 00:46:45,549
puppet went does it enforces style it's

00:46:42,670 --> 00:46:48,369
not that it's not validating syntax

00:46:45,549 --> 00:46:51,190
that's puppet parser validate it's just

00:46:48,369 --> 00:46:53,430
like vetting style so let's take a look

00:46:51,190 --> 00:46:53,430
at that

00:46:59,140 --> 00:47:12,380
actually so here I can't I puppet lint

00:47:04,789 --> 00:47:16,609
and I can point it to my code and it

00:47:12,380 --> 00:47:22,970
didn't complain everything's good I'll

00:47:16,609 --> 00:47:29,299
just do it but not that exciting error

00:47:22,970 --> 00:47:33,980
but uh now my hash markets aren't

00:47:29,299 --> 00:47:35,749
aligned I've got trailing whitespace so

00:47:33,980 --> 00:47:38,809
i'll run puppet Lin again and it

00:47:35,749 --> 00:47:41,440
complaints and says you're not doing it

00:47:38,809 --> 00:47:50,259
right and you have trailing whitespace

00:47:41,440 --> 00:47:54,819
so I'll go fix that up stops complaining

00:47:50,259 --> 00:47:54,819
all right I could also type ray Clint

00:47:55,240 --> 00:48:02,180
which gives me all sorts of issues with

00:47:57,680 --> 00:48:05,930
this if you're using a puppet lint I

00:48:02,180 --> 00:48:08,480
highly recommend creating a dot puppet

00:48:05,930 --> 00:48:10,670
lint or C and you can tell it to ignore

00:48:08,480 --> 00:48:12,799
certain things so there's a problem with

00:48:10,670 --> 00:48:15,680
the puppet labs style guide and that

00:48:12,799 --> 00:48:20,720
someone got in there that no line should

00:48:15,680 --> 00:48:22,489
be longer than 80 characters which I

00:48:20,720 --> 00:48:24,710
think I can sort of see where they're

00:48:22,489 --> 00:48:26,749
coming from with that in a coding

00:48:24,710 --> 00:48:29,839
standard but the puppet language doesn't

00:48:26,749 --> 00:48:31,309
have a line delimiter you can't put like

00:48:29,839 --> 00:48:33,019
you know a slash at the end and go to

00:48:31,309 --> 00:48:34,849
the next slide like you can't break a

00:48:33,019 --> 00:48:37,430
line so telling people and you can't

00:48:34,849 --> 00:48:39,410
have a live longer than this is it is it

00:48:37,430 --> 00:48:42,739
really valid and so I'd recommend

00:48:39,410 --> 00:48:45,440
creating a puppet one RC and putting

00:48:42,739 --> 00:48:48,109
note any charts check in there so it

00:48:45,440 --> 00:48:49,849
doesn't complain about that this is the

00:48:48,109 --> 00:48:52,880
type of tool that you want to have in

00:48:49,849 --> 00:48:56,390
your pre-commit hook for version control

00:48:52,880 --> 00:48:58,579
and that way you also want a pre-commit

00:48:56,390 --> 00:49:02,070
hook for puppet parser validate like

00:48:58,579 --> 00:49:04,560
validate the code actually can parse

00:49:02,070 --> 00:49:06,110
it's easy enough to write bad code like

00:49:04,560 --> 00:49:08,550
don't accept code that doesn't parse

00:49:06,110 --> 00:49:10,560
then you can also run puppet went over

00:49:08,550 --> 00:49:17,520
it as well to make sure it's adhering to

00:49:10,560 --> 00:49:19,920
your standards cool so next is a spec

00:49:17,520 --> 00:49:26,850
test how many folks again we're writing

00:49:19,920 --> 00:49:30,270
expect us alright so I'm getting it

00:49:26,850 --> 00:49:31,650
changed on that so the first thing for

00:49:30,270 --> 00:49:34,050
writing spec tests you have to have a

00:49:31,650 --> 00:49:36,690
little scaffolding in place so you'll

00:49:34,050 --> 00:49:38,990
want to just grab a dot gem file and

00:49:36,690 --> 00:49:43,980
just grab it from my repo or somewhere

00:49:38,990 --> 00:49:47,040
and then you also need a fixtures and

00:49:43,980 --> 00:49:50,880
the fixtures provide some scaffolding

00:49:47,040 --> 00:49:53,010
for rake spec and so I'm telling it

00:49:50,880 --> 00:49:56,360
first it needs to create a symlink so we

00:49:53,010 --> 00:49:59,490
can find the module I'm working on and

00:49:56,360 --> 00:50:03,660
then I have dependencies I depend on

00:49:59,490 --> 00:50:05,610
puppet labs standard lib 320 and so I'm

00:50:03,660 --> 00:50:08,340
telling ya here's where you can get that

00:50:05,610 --> 00:50:13,140
code and specifically here's what

00:50:08,340 --> 00:50:15,030
version to get of it and so you'll need

00:50:13,140 --> 00:50:18,390
those files and then you'll need the

00:50:15,030 --> 00:50:21,540
spec spec helper which tells you to use

00:50:18,390 --> 00:50:23,880
puppet labs spec helper you have to

00:50:21,540 --> 00:50:30,780
install that it's a gem and it's just

00:50:23,880 --> 00:50:34,680
puppet labs back helper yeah alright so

00:50:30,780 --> 00:50:38,700
now i can type Drake spec and it's going

00:50:34,680 --> 00:50:40,530
to download and check that stuff out and

00:50:38,700 --> 00:50:42,480
I get a bunch of little green dots which

00:50:40,530 --> 00:50:49,050
is really what you want if you screw up

00:50:42,480 --> 00:50:52,470
you get capital red f's now if I want to

00:50:49,050 --> 00:50:58,680
can so i put my spec test under the spec

00:50:52,470 --> 00:51:00,810
directory under classes and then so i

00:50:58,680 --> 00:51:05,420
have an init class so i'll have it in it

00:51:00,810 --> 00:51:05,420
underscore spec then go along with it

00:51:07,220 --> 00:51:15,540
there we go so here i'm saying when

00:51:12,930 --> 00:51:18,120
using default values for the class so

00:51:15,540 --> 00:51:20,550
here if I just did include DNS client I

00:51:18,120 --> 00:51:25,200
didn't set anything in huayra it's just

00:51:20,550 --> 00:51:28,770
the the default my catalog should

00:51:25,200 --> 00:51:32,480
contain a file resource with this name

00:51:28,770 --> 00:51:36,900
and it should have all of those

00:51:32,480 --> 00:51:41,940
attributes and values right it should

00:51:36,900 --> 00:51:44,280
also have content because we care about

00:51:41,940 --> 00:51:48,210
that with etsy resolv.conf and it should

00:51:44,280 --> 00:51:50,610
look just like that and so ideally you

00:51:48,210 --> 00:51:52,380
would even write your tests first and do

00:51:50,610 --> 00:51:56,190
test-driven development so you android

00:51:52,380 --> 00:51:59,070
this test to say i want to have this

00:51:56,190 --> 00:52:00,870
file here's the default options here's

00:51:59,070 --> 00:52:02,850
what it should look like and now i'm

00:52:00,870 --> 00:52:06,450
going to go right the template that

00:52:02,850 --> 00:52:08,670
makes that come out right so i can keep

00:52:06,450 --> 00:52:11,760
writing my code running rakes back and

00:52:08,670 --> 00:52:14,180
so it goes from failed to the beautiful

00:52:11,760 --> 00:52:14,180
green dots

00:52:16,719 --> 00:52:26,989
cool I want to show travesty I'm running

00:52:23,239 --> 00:52:31,130
a little short for time here who here is

00:52:26,989 --> 00:52:33,650
using out Travis yeah and so what

00:52:31,130 --> 00:52:39,289
Travis's is continuous integration and

00:52:33,650 --> 00:52:41,469
it connects to github and so within

00:52:39,289 --> 00:52:43,969
Travis I can give it the github

00:52:41,469 --> 00:52:47,679
credentials and say check this

00:52:43,969 --> 00:52:54,439
repository and so for my dns client

00:52:47,679 --> 00:52:56,299
anytime someone commits a branch Travis

00:52:54,439 --> 00:53:00,670
is going to go out and check it for me

00:52:56,299 --> 00:53:00,670
and so here's what that looks like

00:53:07,160 --> 00:53:14,630
I believe it's just for my branches yet

00:53:11,950 --> 00:53:17,240
but you could turn it on for yours as

00:53:14,630 --> 00:53:24,590
well and so hopefully it comes back

00:53:17,240 --> 00:53:28,550
online here maybe not but what this

00:53:24,590 --> 00:53:31,190
thing is doing is it's actually spitting

00:53:28,550 --> 00:53:34,910
up these like systems and then running

00:53:31,190 --> 00:53:39,620
the tests and so for that I need to have

00:53:34,910 --> 00:53:41,950
a dot Travis like yeah Mille and what's

00:53:39,620 --> 00:53:46,940
what it's like telling it here is

00:53:41,950 --> 00:53:49,850
install buns allure and it's going to

00:53:46,940 --> 00:53:52,880
run break spec so just like we type or

00:53:49,850 --> 00:53:55,490
expect it's doing that for us I'm giving

00:53:52,880 --> 00:53:59,330
it a matrix of environments so I'm

00:53:55,490 --> 00:54:03,410
saying test in Ruby 193 and and with my

00:53:59,330 --> 00:54:07,700
17 as well as puppets version 2 dot 7 13

00:54:03,410 --> 00:54:11,120
and 3 2 1 and I don't have Ruby 19

00:54:07,700 --> 00:54:15,440
support working yet so I expect that to

00:54:11,120 --> 00:54:18,130
fail it's okay if it fails right you can

00:54:15,440 --> 00:54:21,920
install a gem called Travis lint and

00:54:18,130 --> 00:54:27,200
that will do lensing on your file and

00:54:21,920 --> 00:54:29,210
see if it's good or not cool so maybe

00:54:27,200 --> 00:54:31,880
it's nope it's not going to happen for

00:54:29,210 --> 00:54:34,160
me all right so like anyhow this is a

00:54:31,880 --> 00:54:39,080
this would tell you what was going on if

00:54:34,160 --> 00:54:41,210
you looked at the pull request it would

00:54:39,080 --> 00:54:46,240
tell you whether they passed Travis

00:54:41,210 --> 00:54:46,240
let's see if this shows it here

00:54:49,580 --> 00:54:52,580
maybe

00:54:54,849 --> 00:54:59,990
and yeah it's a bit slow but what's what

00:54:57,890 --> 00:55:02,960
like what happens is if someone sends me

00:54:59,990 --> 00:55:05,390
a pull request travis has gone and it's

00:55:02,960 --> 00:55:08,299
building the system to see if that

00:55:05,390 --> 00:55:10,640
passes or not and so before I merge the

00:55:08,299 --> 00:55:14,450
pull request it actually turns green and

00:55:10,640 --> 00:55:16,880
says this past like Travis or it duct or

00:55:14,450 --> 00:55:18,109
Utley didn't write and so if it didn't

00:55:16,880 --> 00:55:20,750
pass Travis I'm probably not going to

00:55:18,109 --> 00:55:23,450
merge your pull request right and so it

00:55:20,750 --> 00:55:26,000
allows me to feel more confident and

00:55:23,450 --> 00:55:28,880
accepting change because now I have spec

00:55:26,000 --> 00:55:31,730
test so now i'm getting a quicker

00:55:28,880 --> 00:55:34,040
feedback if things break right and

00:55:31,730 --> 00:55:42,109
that's that's really important take the

00:55:34,040 --> 00:55:44,839
network's done okay so i wanted to talk

00:55:42,109 --> 00:55:46,460
a lot about the common module but it

00:55:44,839 --> 00:55:47,890
looks like I'm about out of time and I

00:55:46,460 --> 00:55:50,559
want to have a few minutes for questions

00:55:47,890 --> 00:55:53,540
so I'm just going to plug it and that

00:55:50,559 --> 00:55:57,079
you should check out my puppet module

00:55:53,540 --> 00:56:01,609
comment on github it sets up a lot of

00:55:57,079 --> 00:56:03,530
common things like ntp them dns client a

00:56:01,609 --> 00:56:07,579
lot of it's written for enterprise linux

00:56:03,530 --> 00:56:09,980
and so I need your help to port it to

00:56:07,579 --> 00:56:14,079
other things like slack water and ubuntu

00:56:09,980 --> 00:56:19,299
and sue some solaris and i would

00:56:14,079 --> 00:56:22,809
appreciate that so I think we're about

00:56:19,299 --> 00:56:26,780
done and have to skip deploying modules

00:56:22,809 --> 00:56:34,400
I just want to open it up for questions

00:56:26,780 --> 00:56:36,650
only have a few minutes or so it's only

00:56:34,400 --> 00:56:38,059
you have a question I heard people say

00:56:36,650 --> 00:56:39,650
they're going to wait for me till after

00:56:38,059 --> 00:56:41,890
the talk and I'm not going to talk to

00:56:39,650 --> 00:56:54,230
you after this so like

00:56:41,890 --> 00:56:56,269
get the questions that yeah yeah so the

00:56:54,230 --> 00:57:00,739
question was should i be using get sub

00:56:56,269 --> 00:57:04,549
modules or library and puppet okay i'm

00:57:00,739 --> 00:57:06,890
going to show those slides so here's set

00:57:04,549 --> 00:57:09,759
of deploy modules i looked at librarian

00:57:06,890 --> 00:57:11,960
puppet Tim sharp rights awesome software

00:57:09,759 --> 00:57:13,749
but it doesn't look like it's being

00:57:11,960 --> 00:57:15,739
actively maintained there's a lot of

00:57:13,749 --> 00:57:19,430
pull requests that are like sitting

00:57:15,739 --> 00:57:22,549
there and issues and so I looked at a

00:57:19,430 --> 00:57:24,470
damn Bodie row puppet library and simple

00:57:22,549 --> 00:57:26,749
which doesn't try to do any of the

00:57:24,470 --> 00:57:28,579
dependency checks it's just you give it

00:57:26,749 --> 00:57:31,910
the get references if it just downloads

00:57:28,579 --> 00:57:35,869
at all and so it works with a puppet

00:57:31,910 --> 00:57:39,019
file and a puppet file here and telling

00:57:35,869 --> 00:57:42,019
it where to get the code this is going

00:57:39,019 --> 00:57:44,119
to assume the master branch here I'm

00:57:42,019 --> 00:57:47,809
giving it a reference this is a tag I'm

00:57:44,119 --> 00:57:51,170
saying get it specifically 320 I could

00:57:47,809 --> 00:57:53,660
also put a branch here's where I've

00:57:51,170 --> 00:57:56,239
forked like dummy you get I'm waiting on

00:57:53,660 --> 00:57:59,089
them to merge my changes in I could also

00:57:56,239 --> 00:58:01,390
put a hash or something there so

00:57:59,089 --> 00:58:06,739
actually demonstrate how this works

00:58:01,390 --> 00:58:10,059
hopefully the network works so I've got

00:58:06,739 --> 00:58:15,349
a modules directory and I'm going to run

00:58:10,059 --> 00:58:18,980
librarian puppet clean and it just

00:58:15,349 --> 00:58:20,630
deleted my modules directory you can

00:58:18,980 --> 00:58:23,599
look at my puppet file and I've got a

00:58:20,630 --> 00:58:27,440
whole bunch of models here and so i can

00:58:23,599 --> 00:58:29,900
run librarian puppet install proposed

00:58:27,440 --> 00:58:33,440
and so it's going out and doing these

00:58:29,900 --> 00:58:35,900
clones and networks a bit slow so and

00:58:33,440 --> 00:58:38,630
it might be a bit but it's like going

00:58:35,900 --> 00:58:41,650
out and just doing the get clones from

00:58:38,630 --> 00:58:44,480
all of these repositories and then

00:58:41,650 --> 00:58:47,800
switching to the right reference if like

00:58:44,480 --> 00:58:50,780
necessary so this file I keep in another

00:58:47,800 --> 00:58:53,869
repository and whenever I want to update

00:58:50,780 --> 00:58:57,500
a module all I do is update this file

00:58:53,869 --> 00:58:59,780
and its own repository with like what

00:58:57,500 --> 00:59:04,130
version I should be like pulling down

00:58:59,780 --> 00:59:06,890
and then I can just run the librarian

00:59:04,130 --> 00:59:09,410
puppet install and it pulls everything

00:59:06,890 --> 00:59:11,930
down for me and I don't have to worry

00:59:09,410 --> 00:59:14,329
about keeping things in sync or you know

00:59:11,930 --> 00:59:16,369
do I have local like versions like that

00:59:14,329 --> 00:59:23,119
sort of thing so how they recommend

00:59:16,369 --> 00:59:26,180
puppet librarians simple cool nobody's

00:59:23,119 --> 00:59:33,140
kicking me out of here so like have any

00:59:26,180 --> 00:59:35,270
other questions right on I really need

00:59:33,140 --> 00:59:38,990
like you guys has helped to write better

00:59:35,270 --> 00:59:41,420
puppet code you use probably the same

00:59:38,990 --> 00:59:44,000
types of things that you manage that I

00:59:41,420 --> 00:59:46,970
have to manage like networks and switch

00:59:44,000 --> 00:59:50,119
DNS clients an NTP and all that fun

00:59:46,970 --> 00:59:52,910
stuff I'd like to support more operating

00:59:50,119 --> 00:59:56,450
systems and so you all use a lesson I

00:59:52,910 --> 01:00:01,339
probably don't get to use or want to use

00:59:56,450 --> 01:00:03,140
anymore AIX but I want those like

01:00:01,339 --> 01:00:06,650
contributions so I'm looking to you for

01:00:03,140 --> 01:00:08,119
four out for that and so if you get a

01:00:06,650 --> 01:00:10,329
hold of me and you want to work together

01:00:08,119 --> 01:00:12,770
on these things I'm more than happy to

01:00:10,329 --> 01:00:15,220
teach you how to setup get and use

01:00:12,770 --> 01:00:18,700
github and make those contributions

01:00:15,220 --> 01:00:20,760
right on like thanks everybody

01:00:18,700 --> 01:00:20,760
you

01:00:27,490 --> 01:00:32,299
when we created asterisk over a decade

01:00:30,200 --> 01:00:34,520
ago we could not have imagined that

01:00:32,299 --> 01:00:36,710
asterisk would not only become the most

01:00:34,520 --> 01:00:38,869
widely adopted open source communication

01:00:36,710 --> 01:00:40,910
software on the planet but that it would

01:00:38,869 --> 01:00:43,430
impact the entire industry in the way

01:00:40,910 --> 01:00:45,380
that it has today asterisk has found its

01:00:43,430 --> 01:00:48,020
way in the more than 170 countries and

01:00:45,380 --> 01:00:50,000
virtually every fortune 1000 company the

01:00:48,020 --> 01:00:52,069
success of asterisk has enabled a

01:00:50,000 --> 01:00:53,480
transition of power from the hands of

01:00:52,069 --> 01:00:55,760
the traditional proprietary phone

01:00:53,480 --> 01:00:58,160
vendors into the hands of the users and

01:00:55,760 --> 01:01:00,079
administrators of phone systems using

01:00:58,160 --> 01:01:01,309
this power our customers have created

01:01:00,079 --> 01:01:03,260
all sorts of business changing

01:01:01,309 --> 01:01:05,119
applications from small office phone

01:01:03,260 --> 01:01:07,609
systems to mission-critical call centers

01:01:05,119 --> 01:01:09,230
the international carrier networks in

01:01:07,609 --> 01:01:11,030
fact there's even an entire country

01:01:09,230 --> 01:01:13,400
those communications infrastructure runs

01:01:11,030 --> 01:01:15,530
on esters the gym has always been about

01:01:13,400 --> 01:01:17,240
creating technology that expands

01:01:15,530 --> 01:01:19,430
communications capabilities in ways that

01:01:17,240 --> 01:01:20,630
we could never have imagined and that's

01:01:19,430 --> 01:01:23,000
part of what's game-changing about

01:01:20,630 --> 01:01:25,700
Digium today we're doing it again this

01:01:23,000 --> 01:01:27,799
time by introducing a new family of HD

01:01:25,700 --> 01:01:29,930
IP phones that extends control of the

01:01:27,799 --> 01:01:31,670
user all the way to the desktop the

01:01:29,930 --> 01:01:33,380
launch of these new products represents

01:01:31,670 --> 01:01:35,480
the next phase indigenous history of

01:01:33,380 --> 01:01:37,880
innovation these are the first and only

01:01:35,480 --> 01:01:39,589
IP phones designed to fully leverage the

01:01:37,880 --> 01:01:41,150
power of esters when we first discussed

01:01:39,589 --> 01:01:43,160
our expectations for building a family

01:01:41,150 --> 01:01:45,319
of phones for use with asterisk our

01:01:43,160 --> 01:01:47,059
requirements were pretty simple we asked

01:01:45,319 --> 01:01:48,710
the team to build the phones such that

01:01:47,059 --> 01:01:50,900
they were easy to install integrate

01:01:48,710 --> 01:01:52,760
provision and use I think you'll soon

01:01:50,900 --> 01:01:55,309
agree our engineers have delivered on

01:01:52,760 --> 01:01:56,960
that goal user feedback is validating

01:01:55,309 --> 01:01:59,059
that when it comes to operation with

01:01:56,960 --> 01:02:01,490
Astra space systems including our own

01:01:59,059 --> 01:02:04,069
Switchvox based product these are the

01:02:01,490 --> 01:02:05,359
easiest to use best integrated most

01:02:04,069 --> 01:02:07,970
interoperable products on the market

01:02:05,359 --> 01:02:09,950
today the Digium family of phones will

01:02:07,970 --> 01:02:12,020
initially include three IP desk phones

01:02:09,950 --> 01:02:13,940
uniquely designed to complement any

01:02:12,020 --> 01:02:15,799
asterisks or Switchvox based solution

01:02:13,940 --> 01:02:18,470
these phones are different for a number

01:02:15,799 --> 01:02:21,140
of reasons first there is clue sively

01:02:18,470 --> 01:02:22,549
designed for use with asterisks secondly

01:02:21,140 --> 01:02:24,190
we've made it really easy to

01:02:22,549 --> 01:02:26,569
autodiscover and provision the phones

01:02:24,190 --> 01:02:28,250
next we've made it easy for the phones

01:02:26,569 --> 01:02:30,190
to access information inside of

01:02:28,250 --> 01:02:32,190
asterisks allowing tight coupling

01:02:30,190 --> 01:02:34,180
between an application and the phone

01:02:32,190 --> 01:02:36,340
additionally we've created an

01:02:34,180 --> 01:02:38,470
applications engine that allows users

01:02:36,340 --> 01:02:41,680
and developers to create and run their

01:02:38,470 --> 01:02:43,480
own apps on the phone and finally we've

01:02:41,680 --> 01:02:45,430
done all of this at a very compelling

01:02:43,480 --> 01:02:47,110
price point at Digium we're always

01:02:45,430 --> 01:02:49,210
thinking of ways to give our customers

01:02:47,110 --> 01:02:51,760
the best value in business phone systems

01:02:49,210 --> 01:02:53,320
and also give them the power to create

01:02:51,760 --> 01:02:55,450
their own solutions or any

01:02:53,320 --> 01:02:57,190
communications challenge well continue

01:02:55,450 --> 01:02:58,600
to push the boundaries not only to make

01:02:57,190 --> 01:03:00,670
Astra's cooler faster and more

01:02:58,600 --> 01:03:02,290
technologically feature-rich but to make

01:03:00,670 --> 01:03:04,750
asterisk and what communications even

01:03:02,290 --> 01:03:08,460
easier and together we'll change the way

01:03:04,750 --> 01:03:08,460
the world communicates again

01:03:13,550 --> 01:03:18,290
most enterprises today realize that

01:03:15,980 --> 01:03:19,940
usernames and passwords alone aren't

01:03:18,290 --> 01:03:22,310
enough to keep their networks saved from

01:03:19,940 --> 01:03:24,380
unauthorized intrusions that's why

01:03:22,310 --> 01:03:26,420
two-factor authentication has gotten so

01:03:24,380 --> 01:03:28,520
popular lately that adds that extra

01:03:26,420 --> 01:03:31,190
layer of protection enterprise networks

01:03:28,520 --> 01:03:32,960
need to stay safe but what you may not

01:03:31,190 --> 01:03:35,180
know is that some two-factor

01:03:32,960 --> 01:03:37,370
authentication solutions they're better

01:03:35,180 --> 01:03:40,430
than others like two-factor strong

01:03:37,370 --> 01:03:42,710
authentication with wicked wicked goes

01:03:40,430 --> 01:03:44,660
beyond other authentication systems by

01:03:42,710 --> 01:03:47,720
being less expensive easier to implement

01:03:44,660 --> 01:03:50,180
and easier to use giving software-based

01:03:47,720 --> 01:03:53,030
token clients built to run on all major

01:03:50,180 --> 01:03:55,660
devices and OSS including iOS and

01:03:53,030 --> 01:03:58,010
Android these tokens utilize a

01:03:55,660 --> 01:04:00,380
public/private key combination that's

01:03:58,010 --> 01:04:02,330
generated on device so there aren't any

01:04:00,380 --> 01:04:04,850
shared secrets flying around or

01:04:02,330 --> 01:04:07,730
attackers to hijack or which require any

01:04:04,850 --> 01:04:09,590
special handling instead all keys are

01:04:07,730 --> 01:04:12,050
kept secure and private between the

01:04:09,590 --> 01:04:14,240
requesting token and your server which

01:04:12,050 --> 01:04:15,860
you control aim house making it the most

01:04:14,240 --> 01:04:18,530
secure way possible to perform

01:04:15,860 --> 01:04:21,350
authentication encryption but with an

01:04:18,530 --> 01:04:24,110
extensive flexible API and support for

01:04:21,350 --> 01:04:26,090
protocols like el dev and radius wicked

01:04:24,110 --> 01:04:27,700
works with any enterprise network

01:04:26,090 --> 01:04:29,970
architecture to protect

01:04:27,700 --> 01:04:32,579
IT systems vital to your enterprise

01:04:29,970 --> 01:04:34,599
download your wicked free trial today

01:04:32,579 --> 01:04:36,369
regardless of whether you're considering

01:04:34,599 --> 01:04:38,170
two-factor authentication for the first

01:04:36,369 --> 01:04:41,410
time or just ready to ditch your

01:04:38,170 --> 01:04:43,810
existing expensive key file system we

01:04:41,410 --> 01:04:48,720
can help with easy to implement easy to

01:04:43,810 --> 01:04:48,720
use strong authentication from wicked

01:05:36,560 --> 01:05:43,010
how's that sigh every way this is the

01:05:39,680 --> 01:05:45,170
way to better utilize all your resources

01:05:43,010 --> 01:05:48,620
and it makes managing all your resources

01:05:45,170 --> 01:05:52,450
pretty easy all of the innovation is

01:05:48,620 --> 01:05:55,940
happening in open source the

01:05:52,450 --> 01:05:57,770
collaborative nature and of the you know

01:05:55,940 --> 01:05:59,870
of the community and the speed at which

01:05:57,770 --> 01:06:01,880
these are these you know these these

01:05:59,870 --> 01:06:04,190
deficiencies these bugs are getting

01:06:01,880 --> 01:06:06,770
discovered and then fixed is it like

01:06:04,190 --> 01:06:09,500
that really shows the power of the you

01:06:06,770 --> 01:06:11,120
know of the open source community it is

01:06:09,500 --> 01:06:15,320
global and it's definitely because of

01:06:11,120 --> 01:06:21,650
the users community people are extremely

01:06:15,320 --> 01:06:23,570
friendly and always ready to help if you

01:06:21,650 --> 01:06:25,820
go on tire see any day you'll see these

01:06:23,570 --> 01:06:27,550
guys helping each other out and they're

01:06:25,820 --> 01:06:30,260
all doing it like in a selfless manner

01:06:27,550 --> 01:06:33,250
the product is transparent for everyone

01:06:30,260 --> 01:06:36,200
everyone can look at the code base

01:06:33,250 --> 01:06:37,940
everyone can see how close that is is

01:06:36,200 --> 01:06:43,790
being built nothing nothing is

01:06:37,940 --> 01:06:46,430
proprietary everything is open in many

01:06:43,790 --> 01:06:50,630
ways it's absolutely vital to the the

01:06:46,430 --> 01:06:54,410
ongoing health cloudstack the most

01:06:50,630 --> 01:06:58,299
exciting event in recent memory for me

01:06:54,410 --> 01:07:00,969
was our first developer boot camp

01:06:58,299 --> 01:07:03,609
and our call gave people I gave you two

01:07:00,969 --> 01:07:07,569
weeks notice to come attend I was

01:07:03,609 --> 01:07:11,739
expecting 25 or 30 people so we ended up

01:07:07,569 --> 01:07:14,559
with 87 people and had to go get more

01:07:11,739 --> 01:07:17,109
chairs in the room twice everything

01:07:14,559 --> 01:07:20,439
within cloud computing is commodity and

01:07:17,109 --> 01:07:23,410
is open source and so I don't think that

01:07:20,439 --> 01:07:25,179
you will you'll see anywhere where open

01:07:23,410 --> 01:07:28,209
source is not pervasive in cloud

01:07:25,179 --> 01:07:30,759
computing and so i think it's i think

01:07:28,209 --> 01:07:32,289
it's an assumption i think when you talk

01:07:30,759 --> 01:07:33,400
about cloud computing you're really

01:07:32,289 --> 01:07:38,949
talking about open source cloud

01:07:33,400 --> 01:07:41,979
computing cloud sac is a robust solution

01:07:38,949 --> 01:07:44,109
for large deployments you'll have dozens

01:07:41,979 --> 01:07:48,400
of data centers and thousands of servers

01:07:44,109 --> 01:07:51,069
in each data centers these hardware is

01:07:48,400 --> 01:07:54,549
going to fail and CloudStack is designed

01:07:51,069 --> 01:07:57,249
to handle number one that mass scale

01:07:54,549 --> 01:08:00,429
number two it's designed to handle the

01:07:57,249 --> 01:08:02,709
failure that inevitably happens in large

01:08:00,429 --> 01:08:05,529
deployments we started working on

01:08:02,709 --> 01:08:09,039
college attack over four years ago and

01:08:05,529 --> 01:08:11,619
it was the original set of people

01:08:09,039 --> 01:08:13,809
working on it had a background of

01:08:11,619 --> 01:08:17,619
delivering software telcos and service

01:08:13,809 --> 01:08:22,029
providers lots of QA lots of users

01:08:17,619 --> 01:08:26,099
actually using it high availability is a

01:08:22,029 --> 01:08:29,020
key feature multiple hypervisors support

01:08:26,099 --> 01:08:31,449
different network models you can pick up

01:08:29,020 --> 01:08:33,609
whatever suits you better while step

01:08:31,449 --> 01:08:37,119
management server can be deployed in

01:08:33,609 --> 01:08:38,920
different physical machines it

01:08:37,119 --> 01:08:40,540
definitely has a huge footprint it's

01:08:38,920 --> 01:08:45,940
being deployed everywhere there's a

01:08:40,540 --> 01:08:47,679
major movie studio that they were using

01:08:45,940 --> 01:08:50,799
cloudstack they were using it to

01:08:47,679 --> 01:08:53,049
transcode video and i thought that was

01:08:50,799 --> 01:08:54,369
terribly fascinating what i found more

01:08:53,049 --> 01:08:57,390
fascinating is what they did during

01:08:54,369 --> 01:09:00,150
lunch where they would spin up

01:08:57,390 --> 01:09:01,320
you know 50 or 60 game servers then as

01:09:00,150 --> 01:09:03,300
soon as lunch was over they would

01:09:01,320 --> 01:09:07,350
destroy all the instances and go back to

01:09:03,300 --> 01:09:08,790
doing real work CloudStack is vast it

01:09:07,350 --> 01:09:10,320
touches so many different aspects and

01:09:08,790 --> 01:09:12,510
there's no one person that's kind of

01:09:10,320 --> 01:09:15,990
like a master of all those realms I

01:09:12,510 --> 01:09:18,690
think cloudstack as a project is going

01:09:15,990 --> 01:09:22,490
to be one of the leaders simply because

01:09:18,690 --> 01:09:29,130
it's some of the most feature Folan and

01:09:22,490 --> 01:09:32,390
and robust platforms out they were Adam

01:09:29,130 --> 01:09:32,390
senior living through the clouds dag

01:09:47,790 --> 01:09:52,090
your customers rely on your website or

01:09:50,560 --> 01:09:54,460
application if it's slower

01:09:52,090 --> 01:09:57,400
non-responsive it infuriates your users

01:09:54,460 --> 01:09:59,230
and costs you money keeping your

01:09:57,400 --> 01:10:02,720
business critical systems humming along

01:09:59,230 --> 01:10:05,030
requires insight into what they're doing

01:10:02,720 --> 01:10:07,010
your system metrics tells stories

01:10:05,030 --> 01:10:08,990
stories that can reveal performance

01:10:07,010 --> 01:10:11,330
bottlenecks resource limitations and

01:10:08,990 --> 01:10:12,890
other problems but how do you keep an

01:10:11,330 --> 01:10:15,560
eye on all of your systems performance

01:10:12,890 --> 01:10:18,560
metrics in real-time and record this

01:10:15,560 --> 01:10:20,330
data for later analysis enter longview

01:10:18,560 --> 01:10:22,370
the new way to see what's really going

01:10:20,330 --> 01:10:24,500
on under the hood the long view

01:10:22,370 --> 01:10:26,570
dashboard lets you visualize the status

01:10:24,500 --> 01:10:29,030
of all your systems providing you with a

01:10:26,570 --> 01:10:32,420
bird's-eye view of your entire fleet you

01:10:29,030 --> 01:10:35,000
can sort by cpu memory swap processes

01:10:32,420 --> 01:10:36,740
load and network usage click a specific

01:10:35,000 --> 01:10:39,140
system to access its individual

01:10:36,740 --> 01:10:41,650
dashboard then click and drag to zoom in

01:10:39,140 --> 01:10:44,060
on chokepoints and get more detail

01:10:41,650 --> 01:10:45,740
comprehensive network data including

01:10:44,060 --> 01:10:48,050
inbound and outbound traffic is

01:10:45,740 --> 01:10:49,610
available on the network tab and disk

01:10:48,050 --> 01:10:51,530
rights and free space on the disk

01:10:49,610 --> 01:10:54,380
stabbed while the process Explorer

01:10:51,530 --> 01:10:56,900
displays usage statistics for individual

01:10:54,380 --> 01:10:59,090
processes the system info tab shows

01:10:56,900 --> 01:11:01,310
listening services active connections

01:10:59,090 --> 01:11:03,470
and available updates adding long view

01:11:01,310 --> 01:11:05,150
to a system is easy just click the

01:11:03,470 --> 01:11:07,310
button copy the one line installation

01:11:05,150 --> 01:11:09,740
command then run the command on your

01:11:07,310 --> 01:11:11,450
linux system to complete the process the

01:11:09,740 --> 01:11:13,640
agent will begin collecting data and

01:11:11,450 --> 01:11:15,480
sending it to longview then the graphs

01:11:13,640 --> 01:11:18,030
start rolling

01:11:15,480 --> 01:11:20,400
used longview to gain visibility into

01:11:18,030 --> 01:11:24,140
your servers so when your website or app

01:11:20,400 --> 01:11:24,140

YouTube URL: https://www.youtube.com/watch?v=lalm_YdSLds


