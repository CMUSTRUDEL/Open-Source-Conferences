Title: 2013 SouthEast LinuxFest - Jeff Propes - Tools of the Command Line Ninja
Publication date: 2014-07-08
Playlist: 2013 SouthEast LinuxFest
Description: 
	2013 SouthEast LinuxFest

Jeff Propes - Essential Tools of the Command Line Ninja
Captions: 
	00:00:00,000 --> 00:00:05,160
the following presentation was recorded

00:00:02,639 --> 00:00:08,280
at the 2013 southeast linux fest in

00:00:05,160 --> 00:00:10,860
charlotte north carolina it is licensed

00:00:08,280 --> 00:00:12,509
under a creative commons license for

00:00:10,860 --> 00:00:16,619
more information about the southeast

00:00:12,509 --> 00:00:19,830
linux fest visit WWF eastland TX phase

00:00:16,619 --> 00:00:21,630
or the southeast linux fest would like

00:00:19,830 --> 00:00:24,000
to thank the following diamond sponsors

00:00:21,630 --> 00:00:30,599
in 2013 for helping make these videos

00:00:24,000 --> 00:00:32,910
possible alright so let's get started my

00:00:30,599 --> 00:00:34,320
name is jeff probst and today we're

00:00:32,910 --> 00:00:37,800
going to be talking about the essential

00:00:34,320 --> 00:00:41,280
tools of the command line engine i work

00:00:37,800 --> 00:00:43,290
at a company called fire host inc linux

00:00:41,280 --> 00:00:45,360
support engineer there and i get to put

00:00:43,290 --> 00:00:47,480
these tools and i'm about to share with

00:00:45,360 --> 00:00:51,690
you today into practice every single day

00:00:47,480 --> 00:00:52,920
so as our guiding influence today we're

00:00:51,690 --> 00:00:55,559
going to look to one of the best ninjas

00:00:52,920 --> 00:00:58,230
ever his name is ryu hayabusa any of you

00:00:55,559 --> 00:00:59,940
who have played ninja gaiden the more

00:00:58,230 --> 00:01:03,390
recent reboots of the series they

00:00:59,940 --> 00:01:06,390
recognize this guy he's pretty much the

00:01:03,390 --> 00:01:09,180
definition of a badass so when ryu

00:01:06,390 --> 00:01:11,040
hayabusa gets on the command line he has

00:01:09,180 --> 00:01:14,220
no troubles because he has all his tools

00:01:11,040 --> 00:01:16,229
in place he knows which ones to use for

00:01:14,220 --> 00:01:21,689
which situation so we're going to try

00:01:16,229 --> 00:01:24,270
our best to be read today we're going to

00:01:21,689 --> 00:01:26,060
go over just a couple things rent go

00:01:24,270 --> 00:01:28,290
into a fair amount of depth in each one

00:01:26,060 --> 00:01:29,909
we're going to start with the UNIX

00:01:28,290 --> 00:01:31,560
philosophy you probably maybe you've

00:01:29,909 --> 00:01:33,450
heard the term UNIX velocity before

00:01:31,560 --> 00:01:36,600
we're going to understand what that

00:01:33,450 --> 00:01:37,979
means we're going to go through standard

00:01:36,600 --> 00:01:39,840
streams in the redirection because those

00:01:37,979 --> 00:01:41,820
are I'm one of the more powerful things

00:01:39,840 --> 00:01:43,590
you can do and then we're going to go

00:01:41,820 --> 00:01:45,299
straight from there and two pipes and

00:01:43,590 --> 00:01:47,729
filters and finally uncover all the

00:01:45,299 --> 00:01:51,979
tools so the first three parts are kind

00:01:47,729 --> 00:01:51,979
of in order to understand the force part

00:01:53,329 --> 00:01:58,290
our goals here today we're going to try

00:01:56,790 --> 00:01:59,159
and cover as much ground as possible we

00:01:58,290 --> 00:02:00,390
probably won't be able to get through

00:01:59,159 --> 00:02:03,420
everything because this topic could

00:02:00,390 --> 00:02:05,070
easily take an entire day to that end

00:02:03,420 --> 00:02:07,009
I'd ask you guys to please hold your

00:02:05,070 --> 00:02:10,020
questions if you can write them down

00:02:07,009 --> 00:02:12,660
we'll have time afterwards to discuss

00:02:10,020 --> 00:02:13,890
if we start going through questions a

00:02:12,660 --> 00:02:16,950
lot there's no way we'll make it through

00:02:13,890 --> 00:02:18,140
even half of this presentation so please

00:02:16,950 --> 00:02:20,880
try to hold your questions to the end

00:02:18,140 --> 00:02:22,830
and I will try my best not to confuse

00:02:20,880 --> 00:02:26,190
the hell out of everybody so that's the

00:02:22,830 --> 00:02:28,170
agreement to if you just can't possibly

00:02:26,190 --> 00:02:29,730
understand what's going on go ahead and

00:02:28,170 --> 00:02:30,930
raise your hand because you're probably

00:02:29,730 --> 00:02:32,580
not the only one of the audience that's

00:02:30,930 --> 00:02:36,930
confused as hell and I don't want to

00:02:32,580 --> 00:02:39,720
lead a cell astray so that further ado

00:02:36,930 --> 00:02:43,200
let's head on in the UNIX velocity

00:02:39,720 --> 00:02:46,110
States each tool should do one thing and

00:02:43,200 --> 00:02:50,610
do that one thing very very well this

00:02:46,110 --> 00:02:55,470
means each tool focuses on one thing to

00:02:50,610 --> 00:02:58,590
excellence so let's say a good example

00:02:55,470 --> 00:03:03,390
of not doing UNIX philosophy anything in

00:02:58,590 --> 00:03:04,560
the microsoft office suite so Excel is

00:03:03,390 --> 00:03:07,140
actually a pretty good spreadsheet

00:03:04,560 --> 00:03:10,830
program it also happens to have parts of

00:03:07,140 --> 00:03:12,240
word and graphical utilities and even

00:03:10,830 --> 00:03:14,700
got some PowerPoint bits lots of

00:03:12,240 --> 00:03:15,959
printing bits and just it's like oh look

00:03:14,700 --> 00:03:17,550
here's a kitchen sink over here let's

00:03:15,959 --> 00:03:19,740
pull that in here's another kitchen sink

00:03:17,550 --> 00:03:23,220
that is the exact opposite of unix

00:03:19,740 --> 00:03:27,120
velocity your philosophy excuse me so

00:03:23,220 --> 00:03:28,830
we're looking for tools that do just one

00:03:27,120 --> 00:03:31,170
thing so we stick with this extel

00:03:28,830 --> 00:03:35,540
example we want something that does just

00:03:31,170 --> 00:03:35,540
spreadsheets just spread sheet that's it

00:03:36,590 --> 00:03:42,740
should require interactive operation so

00:03:40,140 --> 00:03:48,959
I should be able to run this tool

00:03:42,740 --> 00:03:51,660
without sitting at my screen and every

00:03:48,959 --> 00:03:54,270
program acts as a filter meaning it

00:03:51,660 --> 00:03:56,670
takes input of some kind it does some

00:03:54,270 --> 00:03:58,980
useful meaningful work and prints it out

00:03:56,670 --> 00:04:01,920
the other end what you do with it on the

00:03:58,980 --> 00:04:04,709
other end it doesn't care about to do

00:04:01,920 --> 00:04:08,010
this it's going to use the standard

00:04:04,709 --> 00:04:09,330
streams every process has three standard

00:04:08,010 --> 00:04:11,700
streams by default you've probably heard

00:04:09,330 --> 00:04:15,900
these terms before first in a standard

00:04:11,700 --> 00:04:17,250
input the textual input data that you're

00:04:15,900 --> 00:04:20,340
putting into the program that you want

00:04:17,250 --> 00:04:22,360
useful work done on which gets printed

00:04:20,340 --> 00:04:24,830
to standard out

00:04:22,360 --> 00:04:26,719
whatever work is done this useful gets

00:04:24,830 --> 00:04:28,159
printed to standard out again it doesn't

00:04:26,719 --> 00:04:29,719
care what happens after it gets printed

00:04:28,159 --> 00:04:32,150
it just says here you go here's your

00:04:29,719 --> 00:04:35,330
data and then for errors you have the

00:04:32,150 --> 00:04:36,979
standard error stream anything that

00:04:35,330 --> 00:04:39,499
doesn't belong and standard out or

00:04:36,979 --> 00:04:41,330
something it wasn't quite expecting or

00:04:39,499 --> 00:04:42,889
anything out of the ordinary you'll get

00:04:41,330 --> 00:04:45,219
printed to standard here it's also

00:04:42,889 --> 00:04:49,759
common for programs to print help

00:04:45,219 --> 00:04:51,169
information so if you invoke grep dash h

00:04:49,759 --> 00:04:53,090
or something like that then it's going

00:04:51,169 --> 00:04:56,090
to print itself information to standard

00:04:53,090 --> 00:04:58,669
air that's pretty calm so using these

00:04:56,090 --> 00:05:01,759
three standard streams we're going to

00:04:58,669 --> 00:05:03,710
learn about redirection you can redirect

00:05:01,759 --> 00:05:06,500
these streams to and from files or into

00:05:03,710 --> 00:05:09,080
other processes example here using

00:05:06,500 --> 00:05:11,330
standard n we are redirecting the access

00:05:09,080 --> 00:05:12,289
log through a tool called grep if you're

00:05:11,330 --> 00:05:16,189
not familiar with that will cover it

00:05:12,289 --> 00:05:18,560
later here we're redirecting access log

00:05:16,189 --> 00:05:22,729
through grep looking for this string of

00:05:18,560 --> 00:05:26,120
IP in this case standard out we're

00:05:22,729 --> 00:05:29,120
redirecting the output of lsof into a

00:05:26,120 --> 00:05:33,199
file so we can look at it later denoted

00:05:29,120 --> 00:05:35,569
by this right carrot and here's standard

00:05:33,199 --> 00:05:37,460
error we're devoting or we're

00:05:35,569 --> 00:05:39,319
redirecting the standard error output to

00:05:37,460 --> 00:05:41,389
get another file so we can look at later

00:05:39,319 --> 00:05:43,699
s traces the program which prints its

00:05:41,389 --> 00:05:45,680
output to standard error the reason

00:05:43,699 --> 00:05:47,719
being it's made to run kind of outside

00:05:45,680 --> 00:05:50,029
of a program program will normally print

00:05:47,719 --> 00:05:51,979
its output to standard out and standard

00:05:50,029 --> 00:05:54,110
error will have its own output on a

00:05:51,979 --> 00:05:55,399
second string this is one of the rare

00:05:54,110 --> 00:05:58,610
few tools that actually breaks the

00:05:55,399 --> 00:06:00,919
paradigm and works okay you just have to

00:05:58,610 --> 00:06:02,810
know that that's what it's to it so here

00:06:00,919 --> 00:06:05,199
you know we are distinguishing between

00:06:02,810 --> 00:06:08,810
standard out and standard error by the

00:06:05,199 --> 00:06:11,779
lack of or visibility of a number before

00:06:08,810 --> 00:06:14,659
the right care you'll notice also before

00:06:11,779 --> 00:06:16,729
standard an there is no number so those

00:06:14,659 --> 00:06:18,710
both standard in is centered out those

00:06:16,729 --> 00:06:21,199
are assumed you could be a little more

00:06:18,710 --> 00:06:23,270
specific you could put a zero in front

00:06:21,199 --> 00:06:24,620
of the left carrot there you can put a

00:06:23,270 --> 00:06:26,060
one in front of the right care and then

00:06:24,620 --> 00:06:29,569
stand it out and it would be just fine

00:06:26,060 --> 00:06:31,039
and if you go a little more advanced

00:06:29,569 --> 00:06:31,800
into redirection which we will not do

00:06:31,039 --> 00:06:32,940
today

00:06:31,800 --> 00:06:35,699
they have more streams that you've

00:06:32,940 --> 00:06:37,259
defined you would redirect those by

00:06:35,699 --> 00:06:38,970
putting the number of the stream in

00:06:37,259 --> 00:06:42,090
front of the carrot and telling it where

00:06:38,970 --> 00:06:43,319
to go the reason we have to use the two

00:06:42,090 --> 00:06:44,810
in standard error because if you don't

00:06:43,319 --> 00:06:46,650
it will assume you mean standard out in

00:06:44,810 --> 00:06:49,409
general you're only going to be using

00:06:46,650 --> 00:06:50,970
these three types of redirection it's

00:06:49,409 --> 00:06:52,490
rare that you'll have another stream

00:06:50,970 --> 00:06:55,590
that you're playing with there are times

00:06:52,490 --> 00:06:58,470
where I can cover those examples but I

00:06:55,590 --> 00:06:59,970
encourage you to go look up and see the

00:06:58,470 --> 00:07:01,199
depth of what best can do with its

00:06:59,970 --> 00:07:05,699
redirection you can do some really cool

00:07:01,199 --> 00:07:06,900
things so you can also redirect one

00:07:05,699 --> 00:07:09,659
string to the current location of

00:07:06,900 --> 00:07:14,819
another this is pretty commonly used an

00:07:09,659 --> 00:07:17,729
example like this oops there we go so

00:07:14,819 --> 00:07:20,460
here in this example I am using the grip

00:07:17,729 --> 00:07:22,770
tool looking for a certain string in a

00:07:20,460 --> 00:07:24,330
file and now I don't really care what

00:07:22,770 --> 00:07:27,389
the output is I'm just looking for

00:07:24,330 --> 00:07:30,449
successful failure so I'm redirecting

00:07:27,389 --> 00:07:32,190
all output to the bit bucket which is /

00:07:30,449 --> 00:07:34,039
dev / know everything gets it gets

00:07:32,190 --> 00:07:36,900
written to this file gets thrown away

00:07:34,039 --> 00:07:38,849
I'm also throwing all standard error to

00:07:36,900 --> 00:07:41,430
the same exact place so I am redirecting

00:07:38,849 --> 00:07:44,250
with this to write care ampersand one

00:07:41,430 --> 00:07:47,610
saying send everything that the second

00:07:44,250 --> 00:07:49,440
string it says send everything from the

00:07:47,610 --> 00:07:51,360
second stream to where the place of the

00:07:49,440 --> 00:07:52,680
first stream is going now there's an

00:07:51,360 --> 00:07:56,460
important distinction here it's not

00:07:52,680 --> 00:07:58,020
saying send it to the first string that

00:07:56,460 --> 00:08:04,349
saying send it to wherever the first

00:07:58,020 --> 00:08:05,940
stream is going go there's a gotcha if

00:08:04,349 --> 00:08:07,650
you flip the order of those two

00:08:05,940 --> 00:08:10,440
directives at the end of your command

00:08:07,650 --> 00:08:13,500
this will not do what you expect in this

00:08:10,440 --> 00:08:15,750
case because we're redirecting standard

00:08:13,500 --> 00:08:19,050
air first standard output is currently

00:08:15,750 --> 00:08:21,180
printing to our screen so this putting

00:08:19,050 --> 00:08:23,389
this to write care ampersand one will

00:08:21,180 --> 00:08:25,469
redirect standard error to standard out

00:08:23,389 --> 00:08:28,139
meaning it will print out on the command

00:08:25,469 --> 00:08:30,810
line and then it will redirect sent it

00:08:28,139 --> 00:08:33,630
out to dev know this is probably not

00:08:30,810 --> 00:08:35,579
what you mean you probably wanted both

00:08:33,630 --> 00:08:37,500
of them to go the bit bucket you don't

00:08:35,579 --> 00:08:41,159
care because you flipped the orders of

00:08:37,500 --> 00:08:43,829
these things you're going to have a bad

00:08:41,159 --> 00:08:45,730
time so you may be expecting no output

00:08:43,829 --> 00:08:47,050
to show and because you flip the order

00:08:45,730 --> 00:08:52,600
you're getting output in scarfing off

00:08:47,050 --> 00:08:53,350
your script up it happens so now that we

00:08:52,600 --> 00:08:56,139
understand a little bit about

00:08:53,350 --> 00:08:59,139
redirection we can understand what a

00:08:56,139 --> 00:09:00,639
pipe is well we want to redirect the

00:08:59,139 --> 00:09:03,029
standardout of one program to the

00:09:00,639 --> 00:09:07,060
standard in of another we use a pipe

00:09:03,029 --> 00:09:08,320
like this so literally it's just the

00:09:07,060 --> 00:09:10,570
pipe symbol it's right above your in

00:09:08,320 --> 00:09:13,149
Turkey you'll get to know what use it

00:09:10,570 --> 00:09:15,130
and love it it allows us to chain

00:09:13,149 --> 00:09:18,250
commands together and use great useful

00:09:15,130 --> 00:09:20,350
filters and you can do this as many

00:09:18,250 --> 00:09:22,029
times as you want not an interesting

00:09:20,350 --> 00:09:23,620
thing about this is each time you use a

00:09:22,029 --> 00:09:25,470
pipe you're basically cut summoning a

00:09:23,620 --> 00:09:28,930
second command or a separate command

00:09:25,470 --> 00:09:30,610
there's going to be possibly one or many

00:09:28,930 --> 00:09:32,889
sub shells involved in this it could be

00:09:30,610 --> 00:09:34,420
a little bit inefficient but the

00:09:32,889 --> 00:09:37,000
benefits of what you can do with your

00:09:34,420 --> 00:09:40,839
filters here far outweigh the

00:09:37,000 --> 00:09:42,579
inefficiencies you may run into so we're

00:09:40,839 --> 00:09:44,019
going to make an assumption that our

00:09:42,579 --> 00:09:45,940
tools can be used as filters a

00:09:44,019 --> 00:09:49,180
well-heeled command-line tool can be

00:09:45,940 --> 00:09:52,510
used as a filter this means accepts its

00:09:49,180 --> 00:09:54,459
input from standard a or it accepts a

00:09:52,510 --> 00:09:56,170
list of files as arguments which it then

00:09:54,459 --> 00:09:59,470
cast together and uses as its input

00:09:56,170 --> 00:10:02,170
either one it then does it's useful work

00:09:59,470 --> 00:10:04,540
prints it to standard out unless you

00:10:02,170 --> 00:10:07,389
tell it otherwise and princess errors to

00:10:04,540 --> 00:10:09,699
standard error if a program acts this

00:10:07,389 --> 00:10:11,769
way this is the standard way in which it

00:10:09,699 --> 00:10:14,199
acts we can do lots of useful work with

00:10:11,769 --> 00:10:16,720
the tools we just looked at if it starts

00:10:14,199 --> 00:10:18,370
deviating from that then we're going to

00:10:16,720 --> 00:10:21,819
have to do some custom stuff and it gets

00:10:18,370 --> 00:10:23,350
a little annoying so our filter all our

00:10:21,819 --> 00:10:24,790
programs we consider as filters should

00:10:23,350 --> 00:10:26,860
behave this way and if you're writing

00:10:24,790 --> 00:10:28,060
tools that you want to operate as

00:10:26,860 --> 00:10:30,550
filters or you're writing little

00:10:28,060 --> 00:10:33,490
one-liners the act is in line filters

00:10:30,550 --> 00:10:38,800
they should all adhere to this standard

00:10:33,490 --> 00:10:40,180
right here so here's an example of

00:10:38,800 --> 00:10:43,680
something that's been filtered a couple

00:10:40,180 --> 00:10:46,839
times i'm looking through an access log

00:10:43,680 --> 00:10:48,850
for every instance every line that has

00:10:46,839 --> 00:10:51,100
the word index dot PHP in it I'm

00:10:48,850 --> 00:10:53,589
filtering it to awk looking for a

00:10:51,100 --> 00:10:55,930
certain return code and then i'm using a

00:10:53,589 --> 00:10:57,370
tool called exurbs to run another

00:10:55,930 --> 00:10:58,920
command on top of that we're going to go

00:10:57,370 --> 00:11:01,019
through it all these mean

00:10:58,920 --> 00:11:02,579
a little bit if this doesn't make any

00:11:01,019 --> 00:11:08,430
sense to you now will by the end of this

00:11:02,579 --> 00:11:10,170
presentation so here I'll forgot I did

00:11:08,430 --> 00:11:11,839
this yeah we're feeding output of grip

00:11:10,170 --> 00:11:14,100
in the Auk Auk does it's useful work

00:11:11,839 --> 00:11:16,320
it's the last in the chain perfect so

00:11:14,100 --> 00:11:18,300
now we're gonna go into a section or now

00:11:16,320 --> 00:11:19,620
that we understand all those basics were

00:11:18,300 --> 00:11:21,570
actually go in and start diving in on

00:11:19,620 --> 00:11:24,060
these tools and the easiest way to do

00:11:21,570 --> 00:11:27,779
that is to go use it so let's start with

00:11:24,060 --> 00:11:29,639
the single most important tool to the

00:11:27,779 --> 00:11:33,110
command line ninja the one I use all the

00:11:29,639 --> 00:11:35,940
dadgum time screen what does screen do

00:11:33,110 --> 00:11:46,199
so I have something that's running for a

00:11:35,940 --> 00:11:49,290
long time let's say this script is going

00:11:46,199 --> 00:11:53,550
to take 100 seconds to run I want to be

00:11:49,290 --> 00:11:54,959
working on this while I'm going but it's

00:11:53,550 --> 00:11:58,589
only way for me to do that is to do

00:11:54,959 --> 00:12:02,639
either a job control so now that's

00:11:58,589 --> 00:12:09,480
running in the background or I can use a

00:12:02,639 --> 00:12:10,560
much better tool called screen yeah that

00:12:09,480 --> 00:12:12,930
didn't do what I was expecting

00:12:10,560 --> 00:12:15,089
interesting okay so let's try this again

00:12:12,930 --> 00:12:19,680
screen what screen is doing is it

00:12:15,089 --> 00:12:22,050
creates a i guess a holding process

00:12:19,680 --> 00:12:24,209
there's a good way to put it inside of

00:12:22,050 --> 00:12:26,279
screen you're running one or more vast

00:12:24,209 --> 00:12:27,540
sessions or if you're not using bash for

00:12:26,279 --> 00:12:30,630
your shell whatever shell you're using

00:12:27,540 --> 00:12:33,029
one or more shell sessions so by default

00:12:30,630 --> 00:12:35,910
you get the first so if you just run the

00:12:33,029 --> 00:12:39,029
command screen you've done nothing

00:12:35,910 --> 00:12:40,529
you've gained nothing but where it

00:12:39,029 --> 00:12:42,540
really comes into play is when you're

00:12:40,529 --> 00:12:45,420
able to have two or three or four or

00:12:42,540 --> 00:12:46,980
five bass sessions all unparallel inside

00:12:45,420 --> 00:12:50,449
the same screen so let's go back and do

00:12:46,980 --> 00:12:50,449
that little script i was doing again

00:12:54,879 --> 00:12:57,979
okay so it's going to take it two

00:12:56,659 --> 00:13:00,409
hundred seconds I don't feel like

00:12:57,979 --> 00:13:02,029
waiting I'm going to hit the screen

00:13:00,409 --> 00:13:05,089
control character which is control leg

00:13:02,029 --> 00:13:08,449
and i'm going to create a new screen

00:13:05,089 --> 00:13:09,679
session this was still running in the

00:13:08,449 --> 00:13:11,269
background doing everything inspecting

00:13:09,679 --> 00:13:13,699
to do is still printing to its buffer

00:13:11,269 --> 00:13:15,739
screen is handling all that for me but

00:13:13,699 --> 00:13:19,459
meanwhile over here i can go and look at

00:13:15,739 --> 00:13:23,209
whatever i need to do oops well then

00:13:19,459 --> 00:13:25,069
install okay so i can do my work over

00:13:23,209 --> 00:13:28,519
here meanwhile this script is still

00:13:25,069 --> 00:13:32,829
running back here I'm interrupted I can

00:13:28,519 --> 00:13:37,339
look at the contents of this file here I

00:13:32,829 --> 00:13:40,009
can start up another session I can do

00:13:37,339 --> 00:13:41,779
the man page on our sink and here we go

00:13:40,009 --> 00:13:46,489
I've got now got three shells all

00:13:41,779 --> 00:13:48,319
running inside the same window and I can

00:13:46,489 --> 00:13:50,509
use them in parallel I can have a man

00:13:48,319 --> 00:13:52,789
page in one I can be doing useful work

00:13:50,509 --> 00:13:55,129
or another and you start using this

00:13:52,789 --> 00:13:57,079
really heavily you find that wow I've

00:13:55,129 --> 00:14:01,639
got too many shells to manage there's a

00:13:57,079 --> 00:14:04,759
couple things you can do here using

00:14:01,639 --> 00:14:10,720
screen and the well out-there through

00:14:04,759 --> 00:14:10,720
this it's not going on

00:14:14,089 --> 00:14:19,920
there we go this is the screen command

00:14:17,370 --> 00:14:24,350
help page there's a couple things of

00:14:19,920 --> 00:14:24,350
note here when you want to create a new

00:14:25,160 --> 00:14:32,310
don't even let Stalin ok here we go at

00:14:30,690 --> 00:14:34,529
the top you see the command key this up

00:14:32,310 --> 00:14:36,779
here at a that indicates we're doing a

00:14:34,529 --> 00:14:38,730
control a that's your command character

00:14:36,779 --> 00:14:41,190
screen is constantly looking at all of

00:14:38,730 --> 00:14:44,339
your keystrokes coming in looking for

00:14:41,190 --> 00:14:46,200
this command key uppercase I'm sorry

00:14:44,339 --> 00:14:47,520
control a and you can change that if

00:14:46,200 --> 00:14:48,810
you'd like if it's not comfortable for

00:14:47,520 --> 00:14:50,970
you to do that some people like using

00:14:48,810 --> 00:14:53,490
utility some people like using some

00:14:50,970 --> 00:14:57,029
other command key that doesn't require

00:14:53,490 --> 00:14:58,709
the finger stretch it's up to you just

00:14:57,029 --> 00:15:02,190
keep in mind if you replace something

00:14:58,709 --> 00:15:03,770
else with it then like say you can you

00:15:02,190 --> 00:15:05,970
replace control Z I've seen this before

00:15:03,770 --> 00:15:07,320
then whenever you're madly trying to

00:15:05,970 --> 00:15:09,000
terminate a program because it's going

00:15:07,320 --> 00:15:10,260
haywire and you're hitting ctrl z well

00:15:09,000 --> 00:15:15,420
you're just interacting with screen is

00:15:10,260 --> 00:15:17,130
dead so if you want to send a control a

00:15:15,420 --> 00:15:18,600
a literal control a that has

00:15:17,130 --> 00:15:21,420
instructions right here at the top it

00:15:18,600 --> 00:15:24,420
says command key control a literal

00:15:21,420 --> 00:15:25,230
control a you just follow up today so

00:15:24,420 --> 00:15:26,580
that can get a little confusing

00:15:25,230 --> 00:15:29,370
especially when you're panicking over

00:15:26,580 --> 00:15:31,470
something choose your command key wisely

00:15:29,370 --> 00:15:33,360
because in the middle of the heat of

00:15:31,470 --> 00:15:36,660
battle you're not going to earth at you

00:15:33,360 --> 00:15:43,560
did this so let's look at some of the

00:15:36,660 --> 00:15:46,110
things that screen can do screen keeps

00:15:43,560 --> 00:15:49,529
track of all of our windows here i did a

00:15:46,110 --> 00:15:51,330
control a followed by double kloke it

00:15:49,529 --> 00:15:54,089
shows me all this windows that i have

00:15:51,330 --> 00:15:56,880
open not terribly useful right now we

00:15:54,089 --> 00:15:58,140
can fix this what's on windows 0 we

00:15:56,880 --> 00:16:00,660
can't tell right now what's on window

00:15:58,140 --> 00:16:06,540
want a window to we don't know we can

00:16:00,660 --> 00:16:10,950
give those things names like this this

00:16:06,540 --> 00:16:15,140
is my one to 100 script okay that's a

00:16:10,950 --> 00:16:19,509
little more useful this is my rsync

00:16:15,140 --> 00:16:21,800
decomp window this one is why man

00:16:19,509 --> 00:16:26,809
so now when I'm trying to find a window

00:16:21,800 --> 00:16:28,490
I can find it a lot easier so screen is

00:16:26,809 --> 00:16:30,980
keeping track of all these individually

00:16:28,490 --> 00:16:34,999
and letting me multiplex back and forth

00:16:30,980 --> 00:16:36,709
and it allows you to work in very highly

00:16:34,999 --> 00:16:38,240
in parallel you can keep your main page

00:16:36,709 --> 00:16:39,920
up in one you can look at something else

00:16:38,240 --> 00:16:41,869
in another you don't have to open

00:16:39,920 --> 00:16:44,449
multiple SSH sessions to the remote

00:16:41,869 --> 00:16:46,759
server that's the big win for me another

00:16:44,449 --> 00:16:48,889
big win is this right here I'm doing

00:16:46,759 --> 00:16:51,679
useful work let's go back and do this

00:16:48,889 --> 00:16:57,350
script again this script is running fact

00:16:51,679 --> 00:16:59,480
let's make it go even longer terribly

00:16:57,350 --> 00:17:00,589
terribly useful script we know this is

00:16:59,480 --> 00:17:01,999
going to take a long time this is going

00:17:00,589 --> 00:17:04,850
to take nearly ten minutes to run I

00:17:01,999 --> 00:17:06,409
don't want to wait on this I have to go

00:17:04,850 --> 00:17:09,199
to the bathroom I have to disconnect my

00:17:06,409 --> 00:17:10,549
machine in a normal sitting I have to

00:17:09,199 --> 00:17:15,049
wait for this to be done before I can

00:17:10,549 --> 00:17:17,809
disconnect my terminal and screen I just

00:17:15,049 --> 00:17:19,520
detached from it screen is still running

00:17:17,809 --> 00:17:21,500
that script is still running everything

00:17:19,520 --> 00:17:23,839
is working exactly as it is now and will

00:17:21,500 --> 00:17:26,419
continue until it's completed all those

00:17:23,839 --> 00:17:27,829
vast shells are still going I could pick

00:17:26,419 --> 00:17:30,100
up my laptop walk away go to a

00:17:27,829 --> 00:17:33,710
completely different network log back in

00:17:30,100 --> 00:17:36,919
reattach the screen there's my script

00:17:33,710 --> 00:17:40,070
it's a really powerful tool I use just a

00:17:36,919 --> 00:17:42,919
lot I have one of my VPS s has a running

00:17:40,070 --> 00:17:46,700
I RSSI session so even when I'm not

00:17:42,919 --> 00:17:47,990
there I'm still connected to IRC it

00:17:46,700 --> 00:17:52,809
means that I have a really really good

00:17:47,990 --> 00:17:55,340
level in my idol RPG character it's easy

00:17:52,809 --> 00:17:56,990
but whenever I want to log into IRC I

00:17:55,340 --> 00:17:58,669
just log in to that server i reattached

00:17:56,990 --> 00:18:00,679
my screen session bam there's everything

00:17:58,669 --> 00:18:03,260
that i was working on before this is a

00:18:00,679 --> 00:18:04,940
terrible useful tool and this is

00:18:03,260 --> 00:18:06,200
probably the single most useful tool in

00:18:04,940 --> 00:18:07,549
your arsenal if you aren't already using

00:18:06,200 --> 00:18:09,559
it I how to encourage you to integrate

00:18:07,549 --> 00:18:12,380
into your workflow it's really simple to

00:18:09,559 --> 00:18:14,029
understand too there's some things that

00:18:12,380 --> 00:18:16,190
we can change the mix greens behavior a

00:18:14,029 --> 00:18:21,230
little bit better one of the problems it

00:18:16,190 --> 00:18:23,690
has is scroll back so terminate that

00:18:21,230 --> 00:18:26,020
script we know that this is in printing

00:18:23,690 --> 00:18:27,980
a string of numbers starting at zero I

00:18:26,020 --> 00:18:31,730
want to go back and see what that is

00:18:27,980 --> 00:18:33,420
well I can't because it's default form

00:18:31,730 --> 00:18:36,720
screen is only keeping track of

00:18:33,420 --> 00:18:38,070
exactly what is on the visible window so

00:18:36,720 --> 00:18:40,410
that means when you're working within a

00:18:38,070 --> 00:18:41,820
screen window let's say you're used to

00:18:40,410 --> 00:18:42,870
being able to scroll up and sing what's

00:18:41,820 --> 00:18:44,790
in your history you're not going to have

00:18:42,870 --> 00:18:47,460
that benefit anymore you're going to

00:18:44,790 --> 00:18:50,070
start learning to use less a lot more so

00:18:47,460 --> 00:18:54,620
let's do something that takes which is

00:18:50,070 --> 00:18:58,530
that whatever it is let's look at it

00:18:54,620 --> 00:19:01,050
okay so you have to get used to piping

00:18:58,530 --> 00:19:03,930
items through less or more whatever

00:19:01,050 --> 00:19:07,190
pager you like which will let you do a

00:19:03,930 --> 00:19:12,300
pager within the size of your window and

00:19:07,190 --> 00:19:13,800
being able to work in another window so

00:19:12,300 --> 00:19:16,110
previously where let's say you printed

00:19:13,800 --> 00:19:17,430
out the some long command and it's in

00:19:16,110 --> 00:19:19,170
your scroll back buffer you scroll back

00:19:17,430 --> 00:19:21,540
your terminal up and you go check it out

00:19:19,170 --> 00:19:23,010
now you're going to do you're going to

00:19:21,540 --> 00:19:24,780
pipe it to a page and then you can open

00:19:23,010 --> 00:19:26,310
up another shell inside screen and do

00:19:24,780 --> 00:19:27,990
you work there it's more or less the

00:19:26,310 --> 00:19:29,790
same thing it's just something you have

00:19:27,990 --> 00:19:37,080
to be aware of there is something you

00:19:29,790 --> 00:19:39,200
can do to fix this okay what I'll do

00:19:37,080 --> 00:19:39,200
this

00:19:41,920 --> 00:19:45,800
that's the commitment but this is going

00:19:44,030 --> 00:19:48,170
to do is going to tell another the only

00:19:45,800 --> 00:19:52,610
thing we're going to tell screen we want

00:19:48,170 --> 00:19:53,960
to keep a scroll back of say 10,000

00:19:52,610 --> 00:19:56,180
lines should be enough for what we're

00:19:53,960 --> 00:19:58,220
trying to do so the first thing here

00:19:56,180 --> 00:19:59,390
saying screen I want you to keep far

00:19:58,220 --> 00:20:01,040
more than what you're keeping now when

00:19:59,390 --> 00:20:03,700
should creep 10,000 lines in your scroll

00:20:01,040 --> 00:20:05,930
back buffer the second item in here says

00:20:03,700 --> 00:20:07,610
understand when I'm giving you a page up

00:20:05,930 --> 00:20:08,960
in a page down I actually want to go

00:20:07,610 --> 00:20:10,670
back and forward in my scroll back

00:20:08,960 --> 00:20:13,970
buffer this is kind of a half way

00:20:10,670 --> 00:20:15,320
solution to making screen work so I'm

00:20:13,970 --> 00:20:20,510
actually going to have to drop out of

00:20:15,320 --> 00:20:22,430
screen to prove that this works by the

00:20:20,510 --> 00:20:24,320
way another thing here screen will

00:20:22,430 --> 00:20:26,960
continue operating until you close every

00:20:24,320 --> 00:20:29,000
single show inside of it and if you

00:20:26,960 --> 00:20:32,330
forget that then you start closing the

00:20:29,000 --> 00:20:33,770
shells where you had useful work it gets

00:20:32,330 --> 00:20:35,630
really annoying another interesting

00:20:33,770 --> 00:20:37,670
thing about screen before I go and talk

00:20:35,630 --> 00:20:45,470
about the scroll bar let's check out our

00:20:37,670 --> 00:20:48,770
dash history was doing a lot of weird

00:20:45,470 --> 00:20:50,000
stuff here we go so all the stuff we

00:20:48,770 --> 00:20:51,050
were doing in all these different window

00:20:50,000 --> 00:20:53,810
that's kind of gets jumbled together

00:20:51,050 --> 00:20:56,450
because the bash is not printing its

00:20:53,810 --> 00:20:58,910
results to the history file until after

00:20:56,450 --> 00:21:01,250
it shuts down so I could be working in

00:20:58,910 --> 00:21:03,890
one screen for four hours I create a

00:21:01,250 --> 00:21:05,780
second screen I do some useful work I

00:21:03,890 --> 00:21:08,120
shut it down and go back to the first

00:21:05,780 --> 00:21:09,790
screen again the second screens history

00:21:08,120 --> 00:21:13,700
gets copied in the batch history file

00:21:09,790 --> 00:21:16,370
then when I close the first bash prompt

00:21:13,700 --> 00:21:17,960
down then all that history gets written

00:21:16,370 --> 00:21:19,370
to and it's going to be out of order so

00:21:17,960 --> 00:21:22,010
something you've got to be aware of if

00:21:19,370 --> 00:21:25,010
you're relying on your history file to

00:21:22,010 --> 00:21:26,440
get things done you're going to keep in

00:21:25,010 --> 00:21:29,000
mind that things may be out of order

00:21:26,440 --> 00:21:32,500
okay that admonishment out of the way

00:21:29,000 --> 00:21:32,500
let's now look at what it looks like

00:21:40,970 --> 00:21:50,690
whoops I'll I did that wrong yes

00:21:53,799 --> 00:22:03,070
there we go so now if i have something

00:21:56,049 --> 00:22:12,610
extraordinary long I normal ticking on

00:22:03,070 --> 00:22:14,409
this little script ok so now remember

00:22:12,610 --> 00:22:16,350
before when I scrolled up I couldn't see

00:22:14,409 --> 00:22:20,320
all the numbers before now here they are

00:22:16,350 --> 00:22:21,429
I'm scrolling up in my screen and the

00:22:20,320 --> 00:22:25,779
scroll back buffer is president now

00:22:21,429 --> 00:22:27,580
there's something interesting here when

00:22:25,779 --> 00:22:29,559
I go to another window it will overwrite

00:22:27,580 --> 00:22:32,200
what's in a screen scroll back buffer

00:22:29,559 --> 00:22:35,259
screen is still a little bit touch and

00:22:32,200 --> 00:22:38,249
go on the scroll back thing so if I have

00:22:35,259 --> 00:22:38,249
yet another one here

00:22:46,450 --> 00:22:52,550
so now this one lets me scroll back and

00:22:50,360 --> 00:22:54,800
check everything out here now you can

00:22:52,550 --> 00:22:57,320
see this grow back has the contents of

00:22:54,800 --> 00:22:59,870
the other one the first screen it kind

00:22:57,320 --> 00:23:03,620
of mixed them all together what happens

00:22:59,870 --> 00:23:05,390
if I go back to the first screen gun was

00:23:03,620 --> 00:23:07,040
it do it over wrote it's not keeping a

00:23:05,390 --> 00:23:09,170
scroll back buffer for each individual

00:23:07,040 --> 00:23:10,790
window that you're working on it's got a

00:23:09,170 --> 00:23:13,820
global scroll back buffer it's a little

00:23:10,790 --> 00:23:15,800
hard to understand I think that's just a

00:23:13,820 --> 00:23:17,510
limitation of screen maybe if one of you

00:23:15,800 --> 00:23:18,860
guys are good developers you could take

00:23:17,510 --> 00:23:21,860
a crack at fixing that I would love you

00:23:18,860 --> 00:23:25,310
forever but it's not a deal breaker for

00:23:21,860 --> 00:23:28,280
me solo screen screen is the single most

00:23:25,310 --> 00:23:34,250
important tool in your arsenal as a

00:23:28,280 --> 00:23:36,710
command line ninja grep probably the

00:23:34,250 --> 00:23:39,590
house it caught the Swiss Army knife of

00:23:36,710 --> 00:23:46,360
the clan line yes grep does many many

00:23:39,590 --> 00:23:49,940
many nice things grep lets you look in

00:23:46,360 --> 00:23:53,300
textual files or even by our files for

00:23:49,940 --> 00:23:55,280
certain key phrases or single phrases or

00:23:53,300 --> 00:23:59,960
whatever you like so let's go I need

00:23:55,280 --> 00:24:03,200
something of ample length yeah you're

00:23:59,960 --> 00:24:08,510
probably long enough so i'm going to

00:24:03,200 --> 00:24:12,530
grep this etsy profile file for anything

00:24:08,510 --> 00:24:14,120
that says bash so I'm voguing it as grip

00:24:12,530 --> 00:24:16,070
and then how I want what I want to be

00:24:14,120 --> 00:24:20,930
looking for the string and then the file

00:24:16,070 --> 00:24:23,840
to look into it there we go so every

00:24:20,930 --> 00:24:29,450
single line in the file that says the

00:24:23,840 --> 00:24:30,920
word bash has been printed out we can

00:24:29,450 --> 00:24:34,460
make this a little more useful though by

00:24:30,920 --> 00:24:39,070
adding some options what happens if I

00:24:34,460 --> 00:24:41,210
accidentally put a capital in there

00:24:39,070 --> 00:24:45,290
doesn't find anything because grep is

00:24:41,210 --> 00:24:47,300
doing a case-sensitive search by default

00:24:45,290 --> 00:24:50,450
it's not always what you want in fact I

00:24:47,300 --> 00:24:52,340
typically run grip in this form I had a

00:24:50,450 --> 00:24:53,620
dash I saying make it insensitive I

00:24:52,340 --> 00:24:56,420
don't care if its capital or lowercase

00:24:53,620 --> 00:24:59,539
find me that strict there's all your

00:24:56,420 --> 00:25:01,759
strings another thing is very used

00:24:59,539 --> 00:25:03,799
oh ok so now I know that batch is in

00:25:01,759 --> 00:25:05,950
this file I don't know where in this

00:25:03,799 --> 00:25:11,169
file it is so another very useful

00:25:05,950 --> 00:25:13,399
command line option is the end option

00:25:11,169 --> 00:25:15,830
this is going to print out line numbers

00:25:13,399 --> 00:25:18,739
for us so now not only can you find

00:25:15,830 --> 00:25:20,210
what's in your file quickly you can do

00:25:18,739 --> 00:25:22,220
it case sensitive or insensitive you can

00:25:20,210 --> 00:25:23,330
print out the line where it is so when

00:25:22,220 --> 00:25:27,679
you're trying to find information really

00:25:23,330 --> 00:25:30,139
fast this is amazing and I can look in

00:25:27,679 --> 00:25:32,479
more than one file let's see every

00:25:30,139 --> 00:25:42,409
single file here in NC that's got the

00:25:32,479 --> 00:25:46,450
word passionate so this is going to look

00:25:42,409 --> 00:25:48,409
at every single file in the NC directory

00:25:46,450 --> 00:25:52,369
look I don't have permission for some of

00:25:48,409 --> 00:25:54,139
those every single line of every single

00:25:52,369 --> 00:25:57,139
file and the directory did I specify

00:25:54,139 --> 00:25:59,710
that has the word passionate you can see

00:25:57,139 --> 00:26:02,720
how rapidly you can find information in

00:25:59,710 --> 00:26:04,669
tons and loads of instrumental loads and

00:26:02,720 --> 00:26:06,919
loads of textiles I need to find all the

00:26:04,669 --> 00:26:09,259
information about one single IP in an

00:26:06,919 --> 00:26:11,869
access lock there you go use grep I need

00:26:09,259 --> 00:26:14,479
to find which of these dead gum files in

00:26:11,869 --> 00:26:17,210
this program this entire module that's

00:26:14,479 --> 00:26:18,979
been written is the one that's making

00:26:17,210 --> 00:26:24,590
you the vocation to this library well

00:26:18,979 --> 00:26:27,799
use grub we can go even farther we can

00:26:24,590 --> 00:26:29,720
do things like this remember I was

00:26:27,799 --> 00:26:33,619
talking about programs acting as filters

00:26:29,720 --> 00:26:35,059
earlier grep is a well-behaved filter so

00:26:33,619 --> 00:26:38,899
we're going to pipe the contents of

00:26:35,059 --> 00:26:44,239
profile I'm sorry now we're going to use

00:26:38,899 --> 00:26:48,200
the standard input redirection here and

00:26:44,239 --> 00:26:51,889
it will give us the same results just

00:26:48,200 --> 00:26:54,859
like that so grep behaves very well we

00:26:51,889 --> 00:26:57,229
saw the examples of we can pipe we can

00:26:54,859 --> 00:27:00,139
we can put our input in through standard

00:26:57,229 --> 00:27:01,460
in here we can give it as an argument we

00:27:00,139 --> 00:27:04,279
can give it multiple command line or

00:27:01,460 --> 00:27:06,200
multiple files on the command line and

00:27:04,279 --> 00:27:08,330
it prints all of its results to stand it

00:27:06,200 --> 00:27:10,879
out now we saw earlier something and I

00:27:08,330 --> 00:27:12,029
want to go back and revisit when you are

00:27:10,879 --> 00:27:14,099
scripting and

00:27:12,029 --> 00:27:15,359
you're using grip sometimes you will run

00:27:14,099 --> 00:27:17,279
into situations where you don't have the

00:27:15,359 --> 00:27:19,859
permission is to look at a file grab

00:27:17,279 --> 00:27:21,779
being a well-behaved filter will print

00:27:19,859 --> 00:27:22,799
that information to standard error but

00:27:21,779 --> 00:27:24,719
if it ends up in the middle of your

00:27:22,799 --> 00:27:29,309
script it may totally Garf things up so

00:27:24,719 --> 00:27:35,909
let's go back what was that or was it

00:27:29,309 --> 00:27:45,809
here so you see right here whoops that

00:27:35,909 --> 00:27:47,190
wasn't good where did it go yes if you

00:27:45,809 --> 00:27:48,869
guys know you can't see that highlight

00:27:47,190 --> 00:27:51,330
at all I apologize for that so the

00:27:48,869 --> 00:27:52,679
bottom third there where it's saying

00:27:51,330 --> 00:27:54,629
permission denied permission to die

00:27:52,679 --> 00:27:57,950
permission to die all that is printed to

00:27:54,629 --> 00:28:00,479
standard error and if you're expecting

00:27:57,950 --> 00:28:02,070
items from grep in your script output

00:28:00,479 --> 00:28:03,119
and you're getting these permission nine

00:28:02,070 --> 00:28:06,629
lines that you're going to have a bad

00:28:03,119 --> 00:28:08,460
time so let's use our redirection that

00:28:06,629 --> 00:28:15,509
we talked about earlier and get rid of

00:28:08,460 --> 00:28:22,349
that crap there we go God what we have

00:28:15,509 --> 00:28:24,960
done is we have redirected just standard

00:28:22,349 --> 00:28:26,309
error into the bit bucket we don't care

00:28:24,960 --> 00:28:29,129
what that is we only care about

00:28:26,309 --> 00:28:31,619
successful hits now if you wanted to

00:28:29,129 --> 00:28:33,029
look at only the ones that were giving

00:28:31,619 --> 00:28:37,070
you an error this would be one

00:28:33,029 --> 00:28:39,960
inefficient way to do so there you go

00:28:37,070 --> 00:28:47,580
all the files that we had permission are

00:28:39,960 --> 00:28:49,789
an error with okay so grip very powerful

00:28:47,580 --> 00:28:52,619
tool and you can do cool things like

00:28:49,789 --> 00:28:54,210
recursive rep there's a whole lot of

00:28:52,619 --> 00:28:56,999
files in this directory it just goes

00:28:54,210 --> 00:28:58,919
forever I don't know where in this

00:28:56,999 --> 00:29:00,299
directory that item I'm looking for is

00:28:58,919 --> 00:29:05,609
but I know that it's somewhere in here

00:29:00,299 --> 00:29:08,519
so let's go look at all the files I'm

00:29:05,609 --> 00:29:09,749
going to give a recursive flag dash I

00:29:08,519 --> 00:29:11,339
don't know if its capital or lowercase

00:29:09,749 --> 00:29:14,339
I've always used capital I don't think

00:29:11,339 --> 00:29:18,169
it matters recursively search every

00:29:14,339 --> 00:29:20,500
single file in this path for anything

00:29:18,169 --> 00:29:21,850
any file it has

00:29:20,500 --> 00:29:23,890
mix it at the top that's easier safe

00:29:21,850 --> 00:29:26,410
recursively search every single file on

00:29:23,890 --> 00:29:27,400
this path for that string throw

00:29:26,410 --> 00:29:29,260
everything that's being printed to

00:29:27,400 --> 00:29:31,720
standard error to the bit bucket we

00:29:29,260 --> 00:29:33,900
don't care the useful information we do

00:29:31,720 --> 00:29:36,070
care put it through a page or call us

00:29:33,900 --> 00:29:38,050
and this could take a short amount of

00:29:36,070 --> 00:29:39,430
time here's an interesting thing that

00:29:38,050 --> 00:29:45,700
grip is doing its actually looking to

00:29:39,430 --> 00:29:47,800
binary files for Strings it won't print

00:29:45,700 --> 00:29:49,810
out the binary matches because it's it's

00:29:47,800 --> 00:29:51,100
kind of ugly and there will be times

00:29:49,810 --> 00:29:52,780
where grip thinks to file you're looking

00:29:51,100 --> 00:29:54,820
at is a binary file one it's really not

00:29:52,780 --> 00:29:56,440
you can force it to go ahead and print

00:29:54,820 --> 00:29:57,820
out that's a flag I have to look at the

00:29:56,440 --> 00:30:00,790
man page for because i use it so rarely

00:29:57,820 --> 00:30:02,140
but it's being a good guy here it's

00:30:00,790 --> 00:30:03,580
saying hey I found a match in this

00:30:02,140 --> 00:30:04,360
binary file I'm just not going to print

00:30:03,580 --> 00:30:08,500
it for you because it looks like

00:30:04,360 --> 00:30:11,800
somebody barfs on the keyboard but here

00:30:08,500 --> 00:30:15,520
we see all the way right here starting

00:30:11,800 --> 00:30:17,440
in the SCF armor line we told it

00:30:15,520 --> 00:30:20,440
everything inside the set C directory

00:30:17,440 --> 00:30:22,000
and it found this three levels deep so

00:30:20,440 --> 00:30:25,650
when you've got to find something grep

00:30:22,000 --> 00:30:28,720
is your tool it's amazing what it can do

00:30:25,650 --> 00:30:31,930
you'll use it everywhere this was an

00:30:28,720 --> 00:30:34,200
example I alluded to earlier there are a

00:30:31,930 --> 00:30:40,960
ton of running processes right now I

00:30:34,200 --> 00:30:45,580
only care about one so here we see all

00:30:40,960 --> 00:30:48,730
of my best shells I have two bad shells

00:30:45,580 --> 00:30:52,540
running in screen amazingly i show to

00:30:48,730 --> 00:30:54,010
bash processes running here now you also

00:30:52,540 --> 00:30:55,750
know this I don't know if you could see

00:30:54,010 --> 00:30:58,630
it wow you really can't see it at all

00:30:55,750 --> 00:31:01,000
look at that this is this coloring is

00:30:58,630 --> 00:31:03,100
horrible I apologize for that one of the

00:31:01,000 --> 00:31:05,710
things that has popped up in more recent

00:31:03,100 --> 00:31:08,890
modern times is coloration on your

00:31:05,710 --> 00:31:11,830
console by default i think the debian

00:31:08,890 --> 00:31:14,440
based distros and even the Red Hat based

00:31:11,830 --> 00:31:16,980
distros will do this or it's giving

00:31:14,440 --> 00:31:19,510
color for the items that we find and

00:31:16,980 --> 00:31:26,710
that actually says bash I don't know if

00:31:19,510 --> 00:31:28,230
you can see that yes sir I actually kind

00:31:26,710 --> 00:31:44,070
of like the color

00:31:28,230 --> 00:31:48,610
okay for the presentation okay it is

00:31:44,070 --> 00:31:51,580
clever guy okay let's try that Hey look

00:31:48,610 --> 00:31:52,570
there it goes excellent all right so now

00:31:51,580 --> 00:31:57,880
you guys can actually see what I'm

00:31:52,570 --> 00:32:00,640
talking about so that's a bit more

00:31:57,880 --> 00:32:02,169
recent advancement some of you may like

00:32:00,640 --> 00:32:04,659
color some of you may not I personally

00:32:02,169 --> 00:32:07,179
prefer having color on my console it

00:32:04,659 --> 00:32:09,010
gives me context clues that I get in

00:32:07,179 --> 00:32:12,700
quickly whereas I may have to look at

00:32:09,010 --> 00:32:15,340
them for example here to give me context

00:32:12,700 --> 00:32:16,929
clues on what's directories and what's

00:32:15,340 --> 00:32:19,559
not without color you have to actually

00:32:16,929 --> 00:32:21,580
do an LS dash 0 and grab and look for

00:32:19,559 --> 00:32:24,309
anything that starts with the directory

00:32:21,580 --> 00:32:25,750
there you go oh by the way I didn't

00:32:24,309 --> 00:32:27,820
mention that regular expressions we're

00:32:25,750 --> 00:32:31,149
not going to cover that at all I think

00:32:27,820 --> 00:32:32,710
there was a class in that already okay

00:32:31,149 --> 00:32:34,090
so hopefully you attended the regular

00:32:32,710 --> 00:32:37,080
expressions class or you already know

00:32:34,090 --> 00:32:39,580
them or you can go check them out later

00:32:37,080 --> 00:32:42,399
grep understands and speaks regular

00:32:39,580 --> 00:32:46,240
expressions but it are you have to put

00:32:42,399 --> 00:32:48,520
it into four let me let me clarify here

00:32:46,240 --> 00:32:49,570
grep understands regular expressions but

00:32:48,520 --> 00:32:50,529
nine times out of ten the way you're

00:32:49,570 --> 00:32:52,779
going to want to use it you're going to

00:32:50,529 --> 00:32:55,299
want to use it with extended regular

00:32:52,779 --> 00:32:56,919
expressions like that so whenever you

00:32:55,299 --> 00:33:00,070
use regular expressions and grip just

00:32:56,919 --> 00:33:02,320
add this dashi option just get used to

00:33:00,070 --> 00:33:03,820
it that's what you're going to do but

00:33:02,320 --> 00:33:04,899
grep does speak understand where your

00:33:03,820 --> 00:33:07,029
expressions in fact that's how it's

00:33:04,899 --> 00:33:08,350
commonly used again I'm not going over

00:33:07,029 --> 00:33:11,169
reg expressions because that can take

00:33:08,350 --> 00:33:12,309
hours I encourage you if you don't

00:33:11,169 --> 00:33:14,289
understand what they are or you're a

00:33:12,309 --> 00:33:17,590
little bit shaking on them go through a

00:33:14,289 --> 00:33:18,940
regular expressions tutorial anything

00:33:17,590 --> 00:33:21,090
like that just please don't ask me

00:33:18,940 --> 00:33:25,630
because I don't like teaching on that

00:33:21,090 --> 00:33:30,460
sorry I'm just being honest alright so

00:33:25,630 --> 00:33:31,460
that's grip awk this one is not used as

00:33:30,460 --> 00:33:33,350
much

00:33:31,460 --> 00:33:37,159
I don't know why this one is really

00:33:33,350 --> 00:33:40,220
powerful so what does auch du special

00:33:37,159 --> 00:33:41,960
awk is kind of like Rep you could also

00:33:40,220 --> 00:33:43,730
say grep it's kind of like Hawk they're

00:33:41,960 --> 00:33:45,649
looking for useful information in

00:33:43,730 --> 00:33:48,260
textual files the difference here is

00:33:45,649 --> 00:33:50,899
that grep doesn't care what the input

00:33:48,260 --> 00:33:53,450
text is awk is looking for regular rise

00:33:50,899 --> 00:33:55,700
data it's looking for things in divided

00:33:53,450 --> 00:33:58,549
up into columns and what I mean by that

00:33:55,700 --> 00:34:00,230
ok let's look at this this is data

00:33:58,549 --> 00:34:12,169
divided up in columns is separated by

00:34:00,230 --> 00:34:15,889
spaces let's say come on let's say I

00:34:12,169 --> 00:34:20,510
only want to look at I only want to get

00:34:15,889 --> 00:34:22,129
the UID I want to find everything let's

00:34:20,510 --> 00:34:24,950
do this let's use the tools we've all

00:34:22,129 --> 00:34:26,810
learned about look for everything that's

00:34:24,950 --> 00:34:29,240
running a bath show and I only want to

00:34:26,810 --> 00:34:30,980
print out the first column of this if I

00:34:29,240 --> 00:34:32,960
wanted to do this with grep it'd be very

00:34:30,980 --> 00:34:34,369
difficult i'd have to sounds like i can

00:34:32,960 --> 00:34:36,679
do that with grep grep is just doing a

00:34:34,369 --> 00:34:38,240
match on certain individual files or

00:34:36,679 --> 00:34:39,740
certain individual lines there are other

00:34:38,240 --> 00:34:41,960
tools that can do this awk is the most

00:34:39,740 --> 00:34:46,250
well suited awk says I understand this

00:34:41,960 --> 00:34:48,440
data comes in columns by default awk

00:34:46,250 --> 00:34:50,810
assumes one or more spaces in a row is a

00:34:48,440 --> 00:34:56,210
column separator which is perfect for us

00:34:50,810 --> 00:35:00,530
here so I want to print out the very

00:34:56,210 --> 00:35:02,060
first column so that's every single user

00:35:00,530 --> 00:35:05,030
that has a bad anything with the word

00:35:02,060 --> 00:35:07,310
bash in it and the process name I've

00:35:05,030 --> 00:35:08,800
print out just the first column I can do

00:35:07,310 --> 00:35:11,869
more than that I can print out the first

00:35:08,800 --> 00:35:20,210
one two three four five six seven eight

00:35:11,869 --> 00:35:22,910
and 1st and 8th column they go there's

00:35:20,210 --> 00:35:24,890
the user and what the process name is

00:35:22,910 --> 00:35:29,060
I'm able to pull very useful information

00:35:24,890 --> 00:35:30,260
out of columnar data so this is terribly

00:35:29,060 --> 00:35:32,270
useful when you're doing some more

00:35:30,260 --> 00:35:35,450
advanced stuff would say your access

00:35:32,270 --> 00:35:37,220
logs from Apache which comes in tabular

00:35:35,450 --> 00:35:40,460
format and comes with way more

00:35:37,220 --> 00:35:42,000
information than you usually need let's

00:35:40,460 --> 00:35:44,700
see I think I have some of those

00:35:42,000 --> 00:35:50,460
around somewhere actually I don't think

00:35:44,700 --> 00:35:56,910
I have any on this system let's just

00:35:50,460 --> 00:36:04,050
keep picking on PS so I can do some cool

00:35:56,910 --> 00:36:07,170
things like is we have this field in

00:36:04,050 --> 00:36:15,240
here s time start time you have a

00:36:07,170 --> 00:36:17,550
question okay that's good to know that's

00:36:15,240 --> 00:36:20,390
good to know so he's saying he's

00:36:17,550 --> 00:36:22,260
suggesting that using my example here

00:36:20,390 --> 00:36:24,630
let's put that to the top of the screen

00:36:22,260 --> 00:36:26,580
here i'm printing out two columns i'm

00:36:24,630 --> 00:36:28,080
printing out the first column and then

00:36:26,580 --> 00:36:31,680
the eighth column and i spaced it out

00:36:28,080 --> 00:36:36,390
with this right here he's saying that i

00:36:31,680 --> 00:36:39,120
could also do this oops and that would

00:36:36,390 --> 00:36:44,370
accomplish the same thing right okay so

00:36:39,120 --> 00:36:47,030
let's try that exactly so awk is a

00:36:44,370 --> 00:36:49,260
little miniature programming language

00:36:47,030 --> 00:36:51,810
it's not a full-fledged programming

00:36:49,260 --> 00:36:53,970
language it's it's tailored for doing a

00:36:51,810 --> 00:36:55,530
few things that it wants to do and doing

00:36:53,970 --> 00:36:59,910
those very well again it adheres to the

00:36:55,530 --> 00:37:01,110
UNIX philosophy so we're not going to

00:36:59,910 --> 00:37:04,250
have time to go into everything to all

00:37:01,110 --> 00:37:06,540
can do because it is a scripting tool

00:37:04,250 --> 00:37:12,930
but you can get some pretty complicated

00:37:06,540 --> 00:37:14,850
stuff like I'll show you an example 2 3

00:37:12,930 --> 00:37:17,340
4 5 another thing to note that i do not

00:37:14,850 --> 00:37:21,210
like about awk awk starts its column

00:37:17,340 --> 00:37:22,440
counting from one I never like that but

00:37:21,210 --> 00:37:24,680
it does that because if you want to

00:37:22,440 --> 00:37:30,450
print the entire line you can print out

00:37:24,680 --> 00:37:34,140
0 so in this form awk is doing nothing

00:37:30,450 --> 00:37:36,090
useful at all I can take that off and

00:37:34,140 --> 00:37:40,080
get the exact same output oops there we

00:37:36,090 --> 00:37:42,300
go to look I get the exact same output

00:37:40,080 --> 00:37:46,680
but I do this to illustrate that when

00:37:42,300 --> 00:37:49,140
you're printing this dollar sign 0 that

00:37:46,680 --> 00:37:51,710
says the entire line if I want just one

00:37:49,140 --> 00:37:53,720
column there we go just the one call

00:37:51,710 --> 00:37:59,030
I was about to show you a more complex

00:37:53,720 --> 00:38:01,880
example what all can do 1 2 3 5 this

00:37:59,030 --> 00:38:04,900
fifth column is the start time let's do

00:38:01,880 --> 00:38:04,900
something like this

00:38:20,220 --> 00:38:23,390
look into this

00:38:32,140 --> 00:38:40,480
I'd rather do this I'm drawing a blank

00:38:38,160 --> 00:38:43,060
so I'm trying to demonstrate here is

00:38:40,480 --> 00:38:48,550
that rock allows me to throw all this

00:38:43,060 --> 00:38:49,690
data into an array the guy over there

00:38:48,550 --> 00:38:50,800
that's done a lot of lock can you

00:38:49,690 --> 00:38:54,310
remember how to tell me how to get

00:38:50,800 --> 00:39:03,370
through iterate over an array i can try

00:38:54,310 --> 00:39:05,320
to do this out stop ahead yeah so i'm

00:39:03,370 --> 00:39:07,120
trying to do something like this well

00:39:05,320 --> 00:39:10,410
this is the wrong language that i'm

00:39:07,120 --> 00:39:10,410
mixing in let's just see what happens

00:39:12,150 --> 00:39:17,560
like that that's effectively what i'm

00:39:15,130 --> 00:39:19,180
trying to do and it's going to complain

00:39:17,560 --> 00:39:23,800
yeah okay so it doesn't understand that

00:39:19,180 --> 00:39:26,650
what i'm trying to demonstrate here i am

00:39:23,800 --> 00:39:30,720
looking at the contents of PS i'm

00:39:26,650 --> 00:39:35,110
pulling out just the fifth column i am

00:39:30,720 --> 00:39:42,610
saying every time i've got say 08 colon

00:39:35,110 --> 00:39:45,040
52 every time I have said 08 52

00:39:42,610 --> 00:39:46,510
increment that value in this Iraq so

00:39:45,040 --> 00:39:48,760
what ends up happening is I've got an

00:39:46,510 --> 00:39:51,190
array populated with every single s time

00:39:48,760 --> 00:39:53,860
value in the file and the number of

00:39:51,190 --> 00:39:55,240
times it shows up and then at the end of

00:39:53,860 --> 00:39:57,880
the script that's what this end and all

00:39:55,240 --> 00:40:00,310
capitals is doing here go print the

00:39:57,880 --> 00:40:04,570
contents of this out this array out and

00:40:00,310 --> 00:40:12,670
show me how many times is each different

00:40:04,570 --> 00:40:13,910
instance of that com show up yes sir I'm

00:40:12,670 --> 00:40:20,450
sorry

00:40:13,910 --> 00:40:22,010
is that what I'm doing wrong okay so

00:40:20,450 --> 00:40:24,530
he's suggesting that we can do this

00:40:22,010 --> 00:40:29,990
another way we can pull out just the

00:40:24,530 --> 00:40:32,619
columns like this and then pipe it too

00:40:29,990 --> 00:40:37,280
short see which will give us a count

00:40:32,619 --> 00:40:39,799
oops pipe pipe and again because awk is

00:40:37,280 --> 00:40:43,660
a well behaved function acts like a

00:40:39,799 --> 00:40:46,599
filter we can do cool stuff like this

00:40:43,660 --> 00:40:49,849
disorder that's not what I was expecting

00:40:46,599 --> 00:40:52,250
let's just look at this ok so here we've

00:40:49,849 --> 00:40:55,520
seen aqus trimmed its column out sort

00:40:52,250 --> 00:40:58,990
dash C should give me a count of each

00:40:55,520 --> 00:40:58,990
line right that's what I'm expecting

00:40:59,770 --> 00:41:09,940
let's go look at this real quick yeah ok

00:41:06,740 --> 00:41:09,940
so we're looking for count

00:41:14,380 --> 00:41:23,500
I'm sorry oh you did say you did unique

00:41:23,980 --> 00:41:34,310
okay unique dash see like this right

00:41:32,080 --> 00:41:37,430
okay so here we r illustrating one of

00:41:34,310 --> 00:41:39,800
the powerful parts of our command line

00:41:37,430 --> 00:41:41,960
that we can pipe tools to into other

00:41:39,800 --> 00:41:43,670
tools we can use lots of cool stuff like

00:41:41,960 --> 00:41:46,250
this thank you guys for keeping me

00:41:43,670 --> 00:41:47,780
sorted excellent that's exactly what I

00:41:46,250 --> 00:41:49,880
was hoping to do with hawk we weren't

00:41:47,780 --> 00:41:50,930
able to do because I was a not able to

00:41:49,880 --> 00:41:52,370
remember house we were able to do it

00:41:50,930 --> 00:41:54,650
with another way this illustrates

00:41:52,370 --> 00:41:56,750
another point of dash there's always

00:41:54,650 --> 00:41:59,080
more than one way to do it you've heard

00:41:56,750 --> 00:41:59,080
okay

00:42:05,240 --> 00:42:17,330
oh okay excellent share with me later so

00:42:14,660 --> 00:42:19,010
I can refer how to do it this there's so

00:42:17,330 --> 00:42:20,480
many tools here this is one of the

00:42:19,010 --> 00:42:21,890
problems actually there's so many tools

00:42:20,480 --> 00:42:23,720
and so many different implications and

00:42:21,890 --> 00:42:26,600
Ock being its own scripting language as

00:42:23,720 --> 00:42:29,780
its own syntax I can't remember all of

00:42:26,600 --> 00:42:31,910
it if you can more power to you I can't

00:42:29,780 --> 00:42:34,130
so that's why I use Google's and

00:42:31,910 --> 00:42:35,630
extension of my memory I can't remember

00:42:34,130 --> 00:42:37,220
how to do a loop okay I'll just go to

00:42:35,630 --> 00:42:41,320
google and look forward you know I don't

00:42:37,220 --> 00:42:44,030
know whatever not gonna do that here but

00:42:41,320 --> 00:42:45,860
awk is a really powerful tool if you've

00:42:44,030 --> 00:42:48,350
got your data in column format which a

00:42:45,860 --> 00:42:51,740
lot of data is and you can use it to do

00:42:48,350 --> 00:42:52,730
cool things another tool we're going to

00:42:51,740 --> 00:42:58,280
go over let's see what's next on our

00:42:52,730 --> 00:43:01,730
list find fine and excerpts whoops so

00:42:58,280 --> 00:43:03,710
find lets you do some really cool tools

00:43:01,730 --> 00:43:05,330
like really cool things I want to find

00:43:03,710 --> 00:43:11,150
everything that's changed in the last

00:43:05,330 --> 00:43:12,859
four hours let's go here I'm going to

00:43:11,150 --> 00:43:14,510
find everything and this current

00:43:12,859 --> 00:43:15,890
director that's at the period is you

00:43:14,510 --> 00:43:18,800
always have to give it a directory place

00:43:15,890 --> 00:43:21,859
find everything that has changed in the

00:43:18,800 --> 00:43:24,740
last four hours the only thing that's

00:43:21,859 --> 00:43:26,150
changed is my less history okay let's

00:43:24,740 --> 00:43:30,830
try everything has changed in the last

00:43:26,150 --> 00:43:33,080
two one day okay a couple things have

00:43:30,830 --> 00:43:36,260
changed in the last day everything

00:43:33,080 --> 00:43:40,460
that's changed older than one day okay

00:43:36,260 --> 00:43:42,890
whole bunch of stuff so find lets you

00:43:40,460 --> 00:43:45,020
look through all the files in whatever

00:43:42,890 --> 00:43:46,700
director you specify looking for certain

00:43:45,020 --> 00:43:48,260
key components and you can change things

00:43:46,700 --> 00:43:50,090
together like I want to find everything

00:43:48,260 --> 00:43:55,430
in this director that's been modified in

00:43:50,090 --> 00:43:57,859
the last day like a type everything

00:43:55,430 --> 00:44:05,480
that's modified the last day that also

00:43:57,859 --> 00:44:07,040
has a name fragment of oh my god oops

00:44:05,480 --> 00:44:09,520
this one doesn't except for expression

00:44:07,040 --> 00:44:09,520
so let's try this

00:44:11,410 --> 00:44:23,740
there we go that's what if it that wow

00:44:19,490 --> 00:44:23,740
this is really working well there we go

00:44:23,799 --> 00:44:31,279
so I can combine multiple items multiple

00:44:29,200 --> 00:44:34,160
not flags that's the right word

00:44:31,279 --> 00:44:37,160
qualifiers it's the word I would use I'm

00:44:34,160 --> 00:44:40,279
combining multiple cloth fires into one

00:44:37,160 --> 00:44:42,589
fine to come up with just a list of

00:44:40,279 --> 00:44:44,089
files that I care about what can I do

00:44:42,589 --> 00:44:47,630
with this list of files you can do

00:44:44,089 --> 00:44:54,940
something like Piper there's a list to

00:44:47,630 --> 00:44:54,940
tar to create a create a new archive

00:44:55,869 --> 00:44:58,869
whoops

00:45:02,779 --> 00:45:07,599
this is working so well should not have

00:45:05,719 --> 00:45:12,739
been drinking that much last night

00:45:07,599 --> 00:45:14,809
whoops that's on the recording now I can

00:45:12,739 --> 00:45:16,729
let's say I want to find everything

00:45:14,809 --> 00:45:20,559
that's modified in the last day with the

00:45:16,729 --> 00:45:23,509
name of that and I really need something

00:45:20,559 --> 00:45:26,209
let's just try this listing everything

00:45:23,509 --> 00:45:27,759
in my home directory I can pipe it

00:45:26,209 --> 00:45:34,699
through grep again graph is a

00:45:27,759 --> 00:45:37,759
well-behaved filter thank you look for

00:45:34,699 --> 00:45:42,199
just files with a certain name I can do

00:45:37,759 --> 00:45:44,869
things like I can change the ownership

00:45:42,199 --> 00:45:50,509
of everything and we'll talk about the

00:45:44,869 --> 00:45:51,949
excerpts tool shortly like this which

00:45:50,509 --> 00:45:53,390
doesn't print anything but what that

00:45:51,949 --> 00:45:56,059
just did is it took everything in this

00:45:53,390 --> 00:45:58,969
list and change the ownership of those

00:45:56,059 --> 00:46:00,259
files to these are Jeff now I'm logged

00:45:58,969 --> 00:46:02,449
in as the user just a function that I

00:46:00,259 --> 00:46:03,949
just did no change but i just wanted to

00:46:02,449 --> 00:46:06,109
demonstrate that this could be done so

00:46:03,949 --> 00:46:07,880
when you want to do useful work on fine

00:46:06,109 --> 00:46:09,499
either you use your filter tools that

00:46:07,880 --> 00:46:11,479
we've already talked about or someone's

00:46:09,499 --> 00:46:13,009
we're not going to talk about if you

00:46:11,479 --> 00:46:17,179
want to actually do some actions on

00:46:13,009 --> 00:46:20,179
these i usually pair my find commands

00:46:17,179 --> 00:46:24,499
with this excerpt commit find has a

00:46:20,179 --> 00:46:26,209
built-in way to do some weight run

00:46:24,499 --> 00:46:27,529
meaningful work let's say i wanted to do

00:46:26,209 --> 00:46:29,449
the same thing i did up here i did this

00:46:27,529 --> 00:46:31,189
CH own jeff at the very top of your

00:46:29,449 --> 00:46:34,839
screen i'm going to do it with the

00:46:31,189 --> 00:46:34,839
traditional fine method of doing it

00:46:36,429 --> 00:46:50,989
little hokey doesn't Wow one ladies oh

00:46:44,619 --> 00:46:53,539
yes thank you so there we go that's the

00:46:50,989 --> 00:46:58,279
traditional way of running find here

00:46:53,539 --> 00:47:00,439
I've specified the exact flag and then

00:46:58,279 --> 00:47:04,390
it's going to treat everything after the

00:47:00,439 --> 00:47:07,519
exec until it gets to the end of this

00:47:04,390 --> 00:47:08,689
semi colon as the Kommandant wants me to

00:47:07,519 --> 00:47:11,079
run now one of the interesting things

00:47:08,689 --> 00:47:13,659
about fine it's a little inefficient

00:47:11,079 --> 00:47:16,610
canonically find would run this command

00:47:13,659 --> 00:47:20,280
CH own Jeff but

00:47:16,610 --> 00:47:23,550
for every single line in fines return

00:47:20,280 --> 00:47:25,470
values so this presents the problem

00:47:23,550 --> 00:47:27,630
because that's kind of an efficient what

00:47:25,470 --> 00:47:29,880
if I do a fine and I get results ten

00:47:27,630 --> 00:47:31,410
thousand files back I want to run the

00:47:29,880 --> 00:47:33,330
same command on 10,000 different

00:47:31,410 --> 00:47:36,390
different times it seems slightly

00:47:33,330 --> 00:47:37,980
inefficient so I want to be able to

00:47:36,390 --> 00:47:41,670
bundle these together because I know I

00:47:37,980 --> 00:47:45,660
can do something like this let's see

00:47:41,670 --> 00:47:49,320
what we got here I know I can run this

00:47:45,660 --> 00:47:53,150
one command on multiple files it's a

00:47:49,320 --> 00:47:55,680
well-behaved program I know this works

00:47:53,150 --> 00:47:56,940
unfortunately find doesn't give me the

00:47:55,680 --> 00:47:59,070
option to do that and that's where X

00:47:56,940 --> 00:48:06,240
arcs comes into play xargs takes a list

00:47:59,070 --> 00:48:09,210
a vertical list like this this is a

00:48:06,240 --> 00:48:11,940
vertical list of information xargs

00:48:09,210 --> 00:48:16,230
changes it so its horizontal it's all it

00:48:11,940 --> 00:48:19,220
does very simple program and if you give

00:48:16,230 --> 00:48:26,370
it the right depending on how you use it

00:48:19,220 --> 00:48:28,620
let's do this so there it converted that

00:48:26,370 --> 00:48:29,670
list of horizontal data into a list of

00:48:28,620 --> 00:48:31,650
vertical data it now it doesn't really

00:48:29,670 --> 00:48:34,500
mean anything because we have lots of

00:48:31,650 --> 00:48:37,230
spaces and such but what does this allow

00:48:34,500 --> 00:48:39,150
us to do it means we can take a list of

00:48:37,230 --> 00:48:41,220
items that are organized horizontally

00:48:39,150 --> 00:48:42,600
convert it vertically and throw it to

00:48:41,220 --> 00:48:49,980
something else I can do something like

00:48:42,600 --> 00:48:56,550
this I'm going to add a little special

00:48:49,980 --> 00:49:01,290
sauce to protect myself so what am I

00:48:56,550 --> 00:49:02,880
doing here I am printing the results of

00:49:01,290 --> 00:49:05,910
these of the find that we've been doing

00:49:02,880 --> 00:49:10,200
repeatedly I am piping the contents of

00:49:05,910 --> 00:49:11,910
that 2x ours this print 0 modifier means

00:49:10,200 --> 00:49:13,500
I want to print every single line that

00:49:11,910 --> 00:49:16,500
find is finding and putting a new line

00:49:13,500 --> 00:49:18,150
on the end of it whereas I'm sorry a no

00:49:16,500 --> 00:49:20,940
character at the end of it and then I'm

00:49:18,150 --> 00:49:24,210
telling xargs look for no characters as

00:49:20,940 --> 00:49:26,720
your pass effort so X are going to take

00:49:24,210 --> 00:49:26,720
this list

00:49:27,530 --> 00:49:35,320
this horizontal vertical list convert it

00:49:30,950 --> 00:49:35,320
to horizontal and throw it through

00:49:40,720 --> 00:49:45,880
whatever Camino tell so in this case XR

00:49:44,230 --> 00:49:47,800
is going to take that vertical list make

00:49:45,880 --> 00:49:49,930
it into horizontal using this null

00:49:47,800 --> 00:49:52,990
character to pad the separator line

00:49:49,930 --> 00:49:55,180
separator and run this command it is

00:49:52,990 --> 00:49:57,310
intelligent enough to know how long can

00:49:55,180 --> 00:49:59,170
I make this command line and vacation I

00:49:57,310 --> 00:50:01,120
think it's 32 thousand characters or

00:49:59,170 --> 00:50:02,260
something like this when you have 10,000

00:50:01,120 --> 00:50:04,660
files you're trying to run through

00:50:02,260 --> 00:50:07,600
you'll easily max out 32,000 characters

00:50:04,660 --> 00:50:10,300
xargs is smart enough to know I can't

00:50:07,600 --> 00:50:12,520
put every single file on this one line

00:50:10,300 --> 00:50:15,520
and put it to my command I have to break

00:50:12,520 --> 00:50:19,390
it up so it goes up to some maximum file

00:50:15,520 --> 00:50:20,950
a line size runs that command it goes

00:50:19,390 --> 00:50:22,690
and builds another line as long as need

00:50:20,950 --> 00:50:24,550
be runs the command it keeps doing this

00:50:22,690 --> 00:50:28,030
over and over again as efficiently as

00:50:24,550 --> 00:50:31,660
possible so we're not running CH own

00:50:28,030 --> 00:50:35,950
10,000 times we're running it five times

00:50:31,660 --> 00:50:37,720
as efficiently as possible so whenever I

00:50:35,950 --> 00:50:39,460
use find I usually pair with exarch

00:50:37,720 --> 00:50:41,200
because I'm doing useful work on and

00:50:39,460 --> 00:50:44,650
again both fine and xargs are

00:50:41,200 --> 00:50:47,260
well-behaved programs they here to all

00:50:44,650 --> 00:50:52,480
the things we've discussed earlier let's

00:50:47,260 --> 00:50:55,600
see what else do we have when you have

00:50:52,480 --> 00:50:57,100
directories or files with spaces well

00:50:55,600 --> 00:51:02,370
okay let's do an example death yeah I

00:50:57,100 --> 00:51:02,370
you know I love demonstrators okay

00:51:11,130 --> 00:51:22,170
oops okay so now I have one file with

00:51:16,440 --> 00:51:26,760
the space one file without when I do a

00:51:22,170 --> 00:51:40,290
find it prints them out on lines let's

00:51:26,760 --> 00:51:52,170
do this you know so what I want dash in

00:51:40,290 --> 00:51:54,060
one like this ah so there we go thank

00:51:52,170 --> 00:51:55,620
you very much these people know more

00:51:54,060 --> 00:51:59,790
than I do that's great you should be up

00:51:55,620 --> 00:52:01,230
here you wanna come up here sorry so in

00:51:59,790 --> 00:52:03,150
this case exercise we're giving a flag

00:52:01,230 --> 00:52:07,200
saying go ahead and run this command

00:52:03,150 --> 00:52:12,240
every time we get a value so we see X

00:52:07,200 --> 00:52:15,480
ARBs is splitting on spaces tabs and in

00:52:12,240 --> 00:52:19,320
lines as useful separators problem is

00:52:15,480 --> 00:52:21,870
our file it is facing it so excerpts

00:52:19,320 --> 00:52:24,690
consider these two separate items the a

00:52:21,870 --> 00:52:31,020
and the file well that's all one file

00:52:24,690 --> 00:52:34,170
name so if we do this instead we're

00:52:31,020 --> 00:52:37,770
telling fine to print with trailing new

00:52:34,170 --> 00:52:40,440
lines we get exactly what we expect it

00:52:37,770 --> 00:52:41,910
properly handles the space so when

00:52:40,440 --> 00:52:43,920
you're pairing find an extra dogs to

00:52:41,910 --> 00:52:46,200
find out anything really but usually

00:52:43,920 --> 00:52:48,120
find next sorts I prefer to use this

00:52:46,200 --> 00:52:50,400
print zero option so it saves your ass

00:52:48,120 --> 00:52:52,500
when you've got directories or files

00:52:50,400 --> 00:52:54,570
with spaces them just getting a habit of

00:52:52,500 --> 00:52:56,160
doing that because if you don't and you

00:52:54,570 --> 00:52:57,300
run into a director with a space and

00:52:56,160 --> 00:52:59,040
you're in the middle of a script you

00:52:57,300 --> 00:53:00,330
likewise it's not working it's brick

00:52:59,040 --> 00:53:02,010
it's going halfway through and then it's

00:53:00,330 --> 00:53:03,540
breaking well it's because you assumed

00:53:02,010 --> 00:53:06,270
that you had no directories or files

00:53:03,540 --> 00:53:10,200
with spaces in it and that's not always

00:53:06,270 --> 00:53:14,400
a valid assumption alright our next tool

00:53:10,200 --> 00:53:15,750
enlists pearl this again to take hours

00:53:14,400 --> 00:53:17,550
and hours and hours we're not going to

00:53:15,750 --> 00:53:20,310
go into pearl we're just going to

00:53:17,550 --> 00:53:22,550
introduce a couple useful implications

00:53:20,310 --> 00:53:22,550
for

00:53:22,970 --> 00:53:29,430
namely the pearl pie yes thank you for

00:53:27,180 --> 00:53:32,490
reminding me yesterday it's man over

00:53:29,430 --> 00:53:35,010
here Andrew gave a very excellent talk

00:53:32,490 --> 00:53:38,340
on pro and he made sure that I would

00:53:35,010 --> 00:53:43,050
don't not to forget bro pie so where's

00:53:38,340 --> 00:53:46,830
the pro pie let's do this direct this to

00:53:43,050 --> 00:53:49,890
a file just to make this interesting

00:53:46,830 --> 00:53:58,170
let's do that so now I've got some data

00:53:49,890 --> 00:54:01,940
in a file and what's in that okay we got

00:53:58,170 --> 00:54:04,620
lots of repeated it it I want to change

00:54:01,940 --> 00:54:05,820
every instance of the word route to

00:54:04,620 --> 00:54:07,140
something else because I want to give

00:54:05,820 --> 00:54:08,130
this to somebody else and I don't want

00:54:07,140 --> 00:54:10,500
to know I don't want them to know that

00:54:08,130 --> 00:54:14,330
I'm running all these processes rip just

00:54:10,500 --> 00:54:14,330
as an example so i want to change

00:54:14,570 --> 00:54:24,660
everything in this file in place to

00:54:20,130 --> 00:54:29,670
monkey because i like monkeys oops gotta

00:54:24,660 --> 00:54:32,480
give it the file alright so the parole

00:54:29,670 --> 00:54:34,800
pie this says we're going to run pearl

00:54:32,480 --> 00:54:36,720
let's do this in reverse order the dashi

00:54:34,800 --> 00:54:40,440
says I'm going to give you a tiny little

00:54:36,720 --> 00:54:44,130
pro script right here as a one-liner so

00:54:40,440 --> 00:54:46,470
this right here this again we're not

00:54:44,130 --> 00:54:48,480
going too far into pearl this is saying

00:54:46,470 --> 00:54:50,580
on every single line do a search and

00:54:48,480 --> 00:54:54,150
replace replacing the word root with the

00:54:50,580 --> 00:54:57,510
word monkey the dash p the dash I I

00:54:54,150 --> 00:55:00,890
means in place and P means something

00:54:57,510 --> 00:55:00,890
that I forget Andrew what does it mean

00:55:03,069 --> 00:55:09,530
presidential line right so it's going to

00:55:06,500 --> 00:55:11,599
treat everything that comes in again

00:55:09,530 --> 00:55:14,210
pearl can behave as a well-behaved

00:55:11,599 --> 00:55:16,880
program so everything that's thrown to

00:55:14,210 --> 00:55:19,579
it and input in this case we're giving

00:55:16,880 --> 00:55:22,010
it an argument of a file name it's going

00:55:19,579 --> 00:55:23,869
to treat it as a line of input and do

00:55:22,010 --> 00:55:25,940
whatever it is we've told it to do on

00:55:23,869 --> 00:55:28,099
every single line so in this case we've

00:55:25,940 --> 00:55:29,569
told it to do this one liner this swap

00:55:28,099 --> 00:55:32,650
of the word root for the word monkey

00:55:29,569 --> 00:55:35,240
let's go look at that file we should see

00:55:32,650 --> 00:55:36,470
look every time it says the word root

00:55:35,240 --> 00:55:38,660
we've replaced with the word monkey we

00:55:36,470 --> 00:55:48,170
did this in place there's other tools to

00:55:38,660 --> 00:55:54,170
do this with said comes tomorrow said

00:55:48,170 --> 00:55:56,809
we'll also do this there we go so now

00:55:54,170 --> 00:55:58,400
he's changed to monkey into hippo using

00:55:56,809 --> 00:56:00,170
another tool we're not gonna go into

00:55:58,400 --> 00:56:02,180
said said is kind of in the same family

00:56:00,170 --> 00:56:06,109
as awk usually when you see an example

00:56:02,180 --> 00:56:07,130
of one you'll see the other we are going

00:56:06,109 --> 00:56:08,750
to go a little bit more into pro because

00:56:07,130 --> 00:56:12,670
I find it a little bit more useful how

00:56:08,750 --> 00:56:12,670
we doing on time we're almost that time

00:56:13,029 --> 00:56:22,460
yeah so pearl is really cool who has

00:56:15,260 --> 00:56:24,109
questions questions comments anything I

00:56:22,460 --> 00:56:26,029
was not clear on anything you'd like me

00:56:24,109 --> 00:56:37,279
to go over in two and a half minutes two

00:56:26,029 --> 00:56:41,059
minutes okay I need some source data

00:56:37,279 --> 00:56:43,299
which I don't have see what we can do

00:56:41,059 --> 00:56:43,299
with this

00:56:43,720 --> 00:57:07,090
okay hmm what just happened oh the

00:56:59,140 --> 00:57:09,490
network just dropped okay Thank You Alan

00:57:07,090 --> 00:57:10,810
thank you very much so it means my ssh

00:57:09,490 --> 00:57:12,220
session is just about to die which means

00:57:10,810 --> 00:57:13,930
i'm no longer able to show you anything

00:57:12,220 --> 00:57:16,390
I would love to will do that for the

00:57:13,930 --> 00:57:18,490
class anybody have any other questions

00:57:16,390 --> 00:57:27,820
anything doesn't require me to type yes

00:57:18,490 --> 00:57:29,740
sir okay words okay that's that's better

00:57:27,820 --> 00:57:32,140
we put so he's saying that I miss folks

00:57:29,740 --> 00:57:35,400
an exarch takes words instead of lines

00:57:32,140 --> 00:57:35,400
it's a better way to put it thank you

00:57:35,700 --> 00:57:41,740
okay so i encourage you to look further

00:57:40,330 --> 00:57:43,210
into the man pages of all the tools

00:57:41,740 --> 00:57:45,070
we've introduced here and some of the

00:57:43,210 --> 00:57:46,420
other tools we'd not introduce maybe

00:57:45,070 --> 00:57:49,720
some of the stuff to sell flash up on

00:57:46,420 --> 00:57:51,700
the screen these tools have lots of

00:57:49,720 --> 00:57:53,260
invitations and lots of useful options

00:57:51,700 --> 00:57:57,359
we just don't have time to cover them

00:57:53,260 --> 00:57:57,359
all on a one-hour session yes sir

00:58:07,980 --> 00:58:13,780
that's a good point he's saying that

00:58:11,640 --> 00:58:28,060
when I was actually a mouthful can you

00:58:13,780 --> 00:58:30,040
say that again please okay good point so

00:58:28,060 --> 00:58:33,160
he's saying that if you're using xr's as

00:58:30,040 --> 00:58:34,840
opposed to your shell command you're not

00:58:33,160 --> 00:58:36,670
using the RAM from the shell command if

00:58:34,840 --> 00:58:39,190
you have a ram limit on what your shell

00:58:36,670 --> 00:58:40,390
can do every time you run a pipe through

00:58:39,190 --> 00:58:42,310
you're going to be using more more RAM

00:58:40,390 --> 00:58:43,870
xargs is actually a separate process and

00:58:42,310 --> 00:58:45,520
so that ram is not counted against the

00:58:43,870 --> 00:58:57,850
shell so what you're saying so that's

00:58:45,520 --> 00:59:00,460
another good benefit to it yes sir well

00:58:57,850 --> 00:59:02,130
say the game alright we're lost my

00:59:00,460 --> 00:59:07,090
connection let's see if I get it back

00:59:02,130 --> 00:59:14,580
hey restored excellent okay so what am I

00:59:07,090 --> 00:59:14,580
doing here yeah okay

00:59:21,880 --> 00:59:30,730
oh that's how you do that I never knew

00:59:28,990 --> 00:59:35,710
that this is why I come to these

00:59:30,730 --> 00:59:45,249
conferences okay okay it's a little

00:59:35,710 --> 00:59:48,499
clunky ok sir ok even better

00:59:45,249 --> 00:59:49,759
excellent so exarch has many uses more

00:59:48,499 --> 00:59:53,239
than just the one that I tend to use it

00:59:49,759 --> 00:59:54,619
for so you guys are actually smart so

00:59:53,239 --> 00:59:56,869
collective we're teaching each other all

00:59:54,619 --> 00:59:59,119
these tools a little tips that we don't

00:59:56,869 --> 01:00:00,650
know about okay actually unfortunately

00:59:59,119 --> 01:00:01,880
we are out of time so I'm not to close

01:00:00,650 --> 01:00:04,219
it down guys thank you very much for

01:00:01,880 --> 01:00:05,509
coming i really appreciated and if you

01:00:04,219 --> 01:00:06,829
have any other questions i'll be up here

01:00:05,509 --> 01:00:08,119
for answering anything will come talk

01:00:06,829 --> 01:00:11,499
and share are the tips and tools we have

01:00:08,119 --> 01:00:11,499
thank you very much for coming guys

01:00:21,440 --> 01:00:27,890
how's that sigh every way this is the

01:00:24,589 --> 01:00:30,079
way to better utilize all your resources

01:00:27,890 --> 01:00:33,530
and it makes managing all your resources

01:00:30,079 --> 01:00:37,359
pretty easy all of the innovation is

01:00:33,530 --> 01:00:40,880
happening in open source the

01:00:37,359 --> 01:00:42,680
collaborative nature and of the you know

01:00:40,880 --> 01:00:44,599
of the community and the speed at which

01:00:42,680 --> 01:00:46,760
these are these you know these

01:00:44,599 --> 01:00:49,040
deficiencies these bugs are getting

01:00:46,760 --> 01:00:51,920
discovered and then fixed is it I think

01:00:49,040 --> 01:00:54,920
that really shows the power of the of

01:00:51,920 --> 01:00:57,400
the open source community it is global

01:00:54,920 --> 01:01:00,920
and it's definitely because of the users

01:00:57,400 --> 01:01:06,890
community people are extremely friendly

01:01:00,920 --> 01:01:08,630
and always ready to help if you go on

01:01:06,890 --> 01:01:10,790
tire see any day you'll see these guys

01:01:08,630 --> 01:01:13,460
helping each other out and they're all

01:01:10,790 --> 01:01:15,170
doing it like in a selfless manner the

01:01:13,460 --> 01:01:18,160
product is transparent for everyone

01:01:15,170 --> 01:01:21,349
everyone can look at the code base

01:01:18,160 --> 01:01:23,589
everyone can see how close that is being

01:01:21,349 --> 01:01:29,089
built nothing nothing is proprietary

01:01:23,589 --> 01:01:31,760
everything is open in many ways it's

01:01:29,089 --> 01:01:36,170
absolutely vital to the the ongoing

01:01:31,760 --> 01:01:40,369
health I'll stack the most exciting

01:01:36,170 --> 01:01:43,210
event in recent memory for me was our

01:01:40,369 --> 01:01:45,849
first developer boot camp

01:01:43,210 --> 01:01:48,490
and our call gave people a gave me two

01:01:45,849 --> 01:01:52,450
weeks notice to come attend I was

01:01:48,490 --> 01:01:56,650
expecting 25 or 30 people so we ended up

01:01:52,450 --> 01:01:59,470
with 87 people and had to go get more

01:01:56,650 --> 01:02:01,990
chairs in the room twice everything

01:01:59,470 --> 01:02:05,260
within cloud computing is commodity and

01:02:01,990 --> 01:02:08,320
is open source and so I don't think that

01:02:05,260 --> 01:02:10,089
you will you'll see anywhere where open

01:02:08,320 --> 01:02:13,119
source is not pervasive in cloud

01:02:10,089 --> 01:02:15,670
computing and so i think it's i think

01:02:13,119 --> 01:02:17,170
it's an assumption i think when you talk

01:02:15,670 --> 01:02:20,910
about cloud computing you're really

01:02:17,170 --> 01:02:20,910
talking about a source cloud computing

01:02:21,180 --> 01:02:27,250
cloud sac is a robust solution for large

01:02:24,460 --> 01:02:29,619
deployments you'll have dozens of data

01:02:27,250 --> 01:02:33,580
centers and thousands of servers in each

01:02:29,619 --> 01:02:36,910
data center is these hardware is going

01:02:33,580 --> 01:02:40,119
to fail and CloudStack is designed to

01:02:36,910 --> 01:02:42,609
handle number one that mass scale number

01:02:40,119 --> 01:02:45,339
two it's designed to handle the failure

01:02:42,609 --> 01:02:47,890
that inevitably happens in large

01:02:45,339 --> 01:02:52,390
deployments started working on cloud

01:02:47,890 --> 01:02:55,690
tech over four years ago and it was the

01:02:52,390 --> 01:02:57,460
original set of people working on it had

01:02:55,690 --> 01:03:01,540
a background of delivering software

01:02:57,460 --> 01:03:05,770
telcos and service providers lots of QA

01:03:01,540 --> 01:03:09,400
lots of users actually using it high

01:03:05,770 --> 01:03:12,490
availability is the key feature multiple

01:03:09,400 --> 01:03:14,500
hypervisors support different network

01:03:12,490 --> 01:03:17,170
models you can pick up whatever suits

01:03:14,500 --> 01:03:19,450
you better while step management server

01:03:17,170 --> 01:03:23,140
can be deployed in different physical

01:03:19,450 --> 01:03:24,790
machines it definitely has a huge

01:03:23,140 --> 01:03:29,770
footprint it's being deployed everywhere

01:03:24,790 --> 01:03:32,349
there's a major movie studio that they

01:03:29,770 --> 01:03:35,650
were using cloudstack they were using it

01:03:32,349 --> 01:03:37,630
to transcode video and i thought that

01:03:35,650 --> 01:03:39,280
was terribly fascinating what i found

01:03:37,630 --> 01:03:42,550
more fascinating is what they did during

01:03:39,280 --> 01:03:45,339
lunch where they would spin up you know

01:03:42,550 --> 01:03:46,570
50 or 60 game servers then as soon as

01:03:45,339 --> 01:03:48,640
lunch was over they would

01:03:46,570 --> 01:03:52,750
the instances and go back to doing real

01:03:48,640 --> 01:03:54,070
work CloudStack is vast it touches so

01:03:52,750 --> 01:03:56,170
many different aspects and there's no

01:03:54,070 --> 01:03:58,540
one person that's kind of like a master

01:03:56,170 --> 01:04:02,620
of all those realms I think CloudStack

01:03:58,540 --> 01:04:04,870
as a project is going to be one of the

01:04:02,620 --> 01:04:08,950
leaders simply because it's some of the

01:04:04,870 --> 01:04:14,350
most feature fallen and and robust

01:04:08,950 --> 01:04:17,280
platforms out they were out on senior

01:04:14,350 --> 01:04:17,280
living through the clouds dag

01:04:30,080 --> 01:04:32,140
you

01:04:35,470 --> 01:04:40,550
when we created asterisk over a decade

01:04:38,180 --> 01:04:42,500
ago we could not have imagined that

01:04:40,550 --> 01:04:44,690
asterisk would not only become the most

01:04:42,500 --> 01:04:46,850
widely adopted open source communication

01:04:44,690 --> 01:04:48,890
software on the planet but that it would

01:04:46,850 --> 01:04:51,410
impact the entire industry in the way

01:04:48,890 --> 01:04:53,360
that it has today asterisk has found its

01:04:51,410 --> 01:04:56,000
way in the more than 170 countries and

01:04:53,360 --> 01:04:57,980
virtually every fortune 1000 company the

01:04:56,000 --> 01:05:00,050
success of asterisk has enabled a

01:04:57,980 --> 01:05:01,460
transition of power from the hands of

01:05:00,050 --> 01:05:03,740
the traditional proprietary phone

01:05:01,460 --> 01:05:06,140
vendors into the hands of the users and

01:05:03,740 --> 01:05:08,060
administrators of phone systems using

01:05:06,140 --> 01:05:09,290
this power our customers have created

01:05:08,060 --> 01:05:11,240
all sorts of business changing

01:05:09,290 --> 01:05:13,100
applications from small office phone

01:05:11,240 --> 01:05:15,230
systems to mission-critical call centers

01:05:13,100 --> 01:05:17,210
the international carrier networks in

01:05:15,230 --> 01:05:19,010
fact there's even an entire country

01:05:17,210 --> 01:05:21,590
those communications infrastructure runs

01:05:19,010 --> 01:05:23,510
on esters the gym has always been about

01:05:21,590 --> 01:05:25,220
creating technology that expands

01:05:23,510 --> 01:05:27,410
communications capabilities in ways that

01:05:25,220 --> 01:05:28,610
we could never have imagined and that's

01:05:27,410 --> 01:05:30,980
part of what's game-changing about

01:05:28,610 --> 01:05:33,680
Digium today we're doing it again this

01:05:30,980 --> 01:05:35,780
time by introducing a new family of HD

01:05:33,680 --> 01:05:37,910
IP phones that extends control of the

01:05:35,780 --> 01:05:39,650
user all the way to the desktop the

01:05:37,910 --> 01:05:41,360
launch of these new products represents

01:05:39,650 --> 01:05:43,340
the next phase indigenous history of

01:05:41,360 --> 01:05:45,860
innovation these are the first and only

01:05:43,340 --> 01:05:47,210
IP phones designed to fully leverage the

01:05:45,860 --> 01:05:48,860
power of esther's when we first

01:05:47,210 --> 01:05:50,120
discussed our expectations for building

01:05:48,860 --> 01:05:52,010
a family of phones for use with

01:05:50,120 --> 01:05:54,230
asterisks our requirements were pretty

01:05:52,010 --> 01:05:55,580
simple we asked the team to build the

01:05:54,230 --> 01:05:57,920
phones such that they were easy to

01:05:55,580 --> 01:06:00,080
install integrate provision and use I

01:05:57,920 --> 01:06:02,150
think you'll soon agree our engineers

01:06:00,080 --> 01:06:03,950
have delivered on that goal user

01:06:02,150 --> 01:06:05,570
feedback is validating that when it

01:06:03,950 --> 01:06:08,000
comes to operation with Pastor space

01:06:05,570 --> 01:06:09,950
systems including our own Switchvox

01:06:08,000 --> 01:06:12,620
based product these are the easiest to

01:06:09,950 --> 01:06:14,960
use best integrated most interoperable

01:06:12,620 --> 01:06:16,640
products on the market today the Digium

01:06:14,960 --> 01:06:19,370
family of phones will initially include

01:06:16,640 --> 01:06:21,290
three IP des hommes uniquely designed to

01:06:19,370 --> 01:06:23,150
complement any asterisk or Switchvox

01:06:21,290 --> 01:06:25,250
based solution these phones are

01:06:23,150 --> 01:06:27,440
different for a number of reasons first

01:06:25,250 --> 01:06:29,720
there is clue sively designed for use

01:06:27,440 --> 01:06:31,340
with asterisks secondly we've made it

01:06:29,720 --> 01:06:33,800
really easy to autodiscover and

01:06:31,340 --> 01:06:34,910
provision the phones next we've made it

01:06:33,800 --> 01:06:37,430
easy for the phones to access

01:06:34,910 --> 01:06:38,270
information inside of asterisks allowing

01:06:37,430 --> 01:06:40,180
tight coupling

01:06:38,270 --> 01:06:42,140
between an application and the phone

01:06:40,180 --> 01:06:44,330
additionally we've created an

01:06:42,140 --> 01:06:46,430
applications engine that allows users

01:06:44,330 --> 01:06:49,670
and developers to create and run their

01:06:46,430 --> 01:06:51,440
own apps on the phone and finally we've

01:06:49,670 --> 01:06:53,390
done all of this at a very compelling

01:06:51,440 --> 01:06:55,070
price point at digium we're always

01:06:53,390 --> 01:06:57,170
thinking of ways to give our customers

01:06:55,070 --> 01:06:59,690
the best value in business phone systems

01:06:57,170 --> 01:07:01,310
and also give them the power to create

01:06:59,690 --> 01:07:03,440
their own solutions or any

01:07:01,310 --> 01:07:05,180
communications challenge well continue

01:07:03,440 --> 01:07:06,590
to push the boundaries not only to make

01:07:05,180 --> 01:07:08,660
Astros cooler faster and more

01:07:06,590 --> 01:07:10,400
technologically feature-rich but to make

01:07:08,660 --> 01:07:12,950
asterisk and communications even easier

01:07:10,400 --> 01:07:16,450
and together we'll change the way the

01:07:12,950 --> 01:07:16,450
world communication again

01:07:23,750 --> 01:07:28,020
your customers rely on your website or

01:07:26,490 --> 01:07:30,420
application if it's slower

01:07:28,020 --> 01:07:33,330
non-responsive it infuriates your users

01:07:30,420 --> 01:07:35,160
and costs you money keeping your

01:07:33,330 --> 01:07:38,680
business critical systems humming along

01:07:35,160 --> 01:07:40,990
requires insight into what they're doing

01:07:38,680 --> 01:07:42,940
your system metrics tells stories

01:07:40,990 --> 01:07:44,950
stories that can reveal performance

01:07:42,940 --> 01:07:47,290
bottlenecks resource limitations and

01:07:44,950 --> 01:07:48,850
other problems but how do you keep an

01:07:47,290 --> 01:07:51,490
eye on all of your systems performance

01:07:48,850 --> 01:07:54,520
metrics in real-time and record this

01:07:51,490 --> 01:07:56,530
data for later analysis enter longview

01:07:54,520 --> 01:07:58,300
the new way to see what's really going

01:07:56,530 --> 01:08:00,460
on under the hood the long view

01:07:58,300 --> 01:08:02,530
dashboard lets you visualize the status

01:08:00,460 --> 01:08:04,990
of all your systems providing you with a

01:08:02,530 --> 01:08:08,350
bird's-eye view of your entire fleet you

01:08:04,990 --> 01:08:10,930
can sort by cpu memory swap processes

01:08:08,350 --> 01:08:12,700
load and network usage click a specific

01:08:10,930 --> 01:08:15,100
system to access its individual

01:08:12,700 --> 01:08:17,610
dashboard then click and drag to zoom in

01:08:15,100 --> 01:08:20,020
on chokepoints and get more detail

01:08:17,610 --> 01:08:21,700
comprehensive network data including

01:08:20,020 --> 01:08:24,010
inbound and outbound traffic is

01:08:21,700 --> 01:08:25,570
available on the network tab and disk

01:08:24,010 --> 01:08:27,490
rights and free space on the disk

01:08:25,570 --> 01:08:30,340
stabbed while the process Explorer

01:08:27,490 --> 01:08:32,860
displays usage statistics for individual

01:08:30,340 --> 01:08:35,050
processes the system info tab shows

01:08:32,860 --> 01:08:37,270
listening services active connections

01:08:35,050 --> 01:08:39,430
and available updates adding long view

01:08:37,270 --> 01:08:41,110
to a system is easy just click the

01:08:39,430 --> 01:08:43,270
button copy the one line installation

01:08:41,110 --> 01:08:45,700
command then run the command on your

01:08:43,270 --> 01:08:47,410
linux system to complete the process the

01:08:45,700 --> 01:08:49,600
agent will begin collecting data and

01:08:47,410 --> 01:08:51,429
sending it to longview then the graphs

01:08:49,600 --> 01:08:53,979
start rolling

01:08:51,429 --> 01:08:56,349
use longview to gain visibility into

01:08:53,979 --> 01:09:00,089
your servers so when your website or app

01:08:56,349 --> 01:09:00,089
heats up it stays up

01:09:41,160 --> 01:09:46,110
most enterprises today realize that

01:09:43,890 --> 01:09:47,850
usernames and passwords alone aren't

01:09:46,110 --> 01:09:50,190
enough to keep their network safe from

01:09:47,850 --> 01:09:52,260
unauthorized intrusions that's my

01:09:50,190 --> 01:09:54,300
two-factor authentication has gotten so

01:09:52,260 --> 01:09:56,430
popular lately that adds that extra

01:09:54,300 --> 01:09:59,100
layer of protection enterprise networks

01:09:56,430 --> 01:10:00,870
need to stay safe but what you may not

01:09:59,100 --> 01:10:03,060
know is that some two-factor

01:10:00,870 --> 01:10:05,280
authentication solutions they're better

01:10:03,060 --> 01:10:08,340
than others like two-factor strong

01:10:05,280 --> 01:10:10,590
authentication with wicked wicked goes

01:10:08,340 --> 01:10:12,570
beyond other authentication systems by

01:10:10,590 --> 01:10:15,630
being less expensive easier to implement

01:10:12,570 --> 01:10:18,090
and easier to use giving software-based

01:10:15,630 --> 01:10:20,940
token clients built to run on all major

01:10:18,090 --> 01:10:23,540
devices and OSS including iOS and

01:10:20,940 --> 01:10:25,890
Android these tokens utilize a

01:10:23,540 --> 01:10:28,290
public/private key combination that's

01:10:25,890 --> 01:10:30,240
generated on device so there aren't any

01:10:28,290 --> 01:10:32,760
shared secrets flying around or

01:10:30,240 --> 01:10:35,640
attackers to hijack or which require any

01:10:32,760 --> 01:10:37,500
special handling instead all keys are

01:10:35,640 --> 01:10:39,960
kept secure and private between the

01:10:37,500 --> 01:10:42,150
requesting token and your server which

01:10:39,960 --> 01:10:43,740
you control in-house making it the most

01:10:42,150 --> 01:10:46,440
secure way possible to perform

01:10:43,740 --> 01:10:49,260
authentication encryption and with an

01:10:46,440 --> 01:10:52,020
extensive flexible API that support for

01:10:49,260 --> 01:10:54,000
protocols like ldap and radius wicked

01:10:52,020 --> 01:10:55,360
works with any enterprise network

01:10:54,000 --> 01:10:57,869
architecture

01:10:55,360 --> 01:11:00,480
the IT systems vital to your enterprise

01:10:57,869 --> 01:11:02,500
download your wicked free trial today

01:11:00,480 --> 01:11:04,270
regardless of whether you're considering

01:11:02,500 --> 01:11:06,070
two-factor authentication for the first

01:11:04,270 --> 01:11:09,310
time or just ready to ditch your

01:11:06,070 --> 01:11:11,710
existing expensive key file system we

01:11:09,310 --> 01:11:16,619
can help with easy to implement easy to

01:11:11,710 --> 01:11:16,619

YouTube URL: https://www.youtube.com/watch?v=S7hpRz-e6uE


