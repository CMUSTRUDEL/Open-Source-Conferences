Title: 2013 SouthEast LinuxFest - Mark Hinkle - Hitchhiker's Guide to Cloud Computing
Publication date: 2014-07-01
Playlist: 2013 SouthEast LinuxFest
Description: 
	2013 SouthEast LinuxFest

Mark Hinkle - Hitchhiker's Guide to Cloud Computing
Captions: 
	00:00:00,000 --> 00:00:05,160
the following presentation was recorded

00:00:02,639 --> 00:00:08,280
at the 2013 southeast linux fest in

00:00:05,160 --> 00:00:10,860
charlotte north carolina it is licensed

00:00:08,280 --> 00:00:12,509
under a creative commons license for

00:00:10,860 --> 00:00:16,619
more information about the southeast

00:00:12,509 --> 00:00:19,830
linux fest visit WWF eastland TX phase

00:00:16,619 --> 00:00:21,630
or the southeast linux fest would like

00:00:19,830 --> 00:00:24,080
to thank the following diamond sponsors

00:00:21,630 --> 00:00:28,560
in 2013 for helping make these videos

00:00:24,080 --> 00:00:29,670
possible alright so this talk is that

00:00:28,560 --> 00:00:32,969
the hitchhiker's guide to cloud

00:00:29,670 --> 00:00:35,070
computing by Mark Hinkel mark is the all

00:00:32,969 --> 00:00:36,510
things open source the community manager

00:00:35,070 --> 00:00:38,460
whatever title you want to call it at

00:00:36,510 --> 00:00:41,790
citrix so all the Citrix things

00:00:38,460 --> 00:00:43,410
CloudStack so on and so forth basically

00:00:41,790 --> 00:00:46,469
doer of all things open source and

00:00:43,410 --> 00:00:48,870
Citrix so spoiler alert the answer is 42

00:00:46,469 --> 00:00:54,379
I hope you remember that and without

00:00:48,870 --> 00:00:54,379
further ado mark inkle thanks Jeremy

00:01:02,730 --> 00:01:08,890
so I'm working okay yeah all right how

00:01:07,300 --> 00:01:10,780
many get the people here have written

00:01:08,890 --> 00:01:14,380
read the hitchhiker's guide to the

00:01:10,780 --> 00:01:18,280
galaxy all right I have peppered this

00:01:14,380 --> 00:01:20,640
with a bunch of references in there I

00:01:18,280 --> 00:01:23,320
have a lot of content to cover so i will

00:01:20,640 --> 00:01:25,240
probably not spend that much time going

00:01:23,320 --> 00:01:29,110
into them and explaining the references

00:01:25,240 --> 00:01:30,520
but if you see a couple icons here and

00:01:29,110 --> 00:01:32,890
there are you you'll get the inside

00:01:30,520 --> 00:01:35,619
jokes I'll make some of the explicit

00:01:32,890 --> 00:01:37,600
ones Jeremy already killed the punch

00:01:35,619 --> 00:01:42,400
line so we all know how it's going to

00:01:37,600 --> 00:01:45,220
end as you said I'm Mark Hinkel i am the

00:01:42,400 --> 00:01:46,960
open source guy at citrix I work on

00:01:45,220 --> 00:01:49,360
Apache CloudStack which is cloud

00:01:46,960 --> 00:01:52,479
orchestration work with the Xen

00:01:49,360 --> 00:01:55,570
hypervisor opendaylight is the linux

00:01:52,479 --> 00:01:57,460
foundation's latest project it's our

00:01:55,570 --> 00:02:02,110
collaborative project actually not the

00:01:57,460 --> 00:02:03,490
latest one as n project is but is an

00:02:02,110 --> 00:02:07,450
open source software defined networking

00:02:03,490 --> 00:02:12,180
controller and have an open source

00:02:07,450 --> 00:02:15,600
background so that's where I came from I

00:02:12,180 --> 00:02:18,310
don't really need to give this slide but

00:02:15,600 --> 00:02:20,680
at southeast linux fest because you guys

00:02:18,310 --> 00:02:22,780
all probably have a good idea of why

00:02:20,680 --> 00:02:24,310
open source but the one thing i like to

00:02:22,780 --> 00:02:26,680
drive home about why i like the

00:02:24,310 --> 00:02:29,500
solutions i work on is that their user

00:02:26,680 --> 00:02:31,600
driven now given the fact that i work

00:02:29,500 --> 00:02:33,970
for a 12 billion dollar software company

00:02:31,600 --> 00:02:36,730
that develops software and it is vendor

00:02:33,970 --> 00:02:40,600
driven that might be a little bit of

00:02:36,730 --> 00:02:42,190
ironic but the thing that we find is the

00:02:40,600 --> 00:02:43,720
user input into the products and

00:02:42,190 --> 00:02:46,120
solutions or what makes them good and i

00:02:43,720 --> 00:02:48,849
think that's really a key point when I

00:02:46,120 --> 00:02:50,709
evaluate open source software is is

00:02:48,849 --> 00:02:52,540
there a user community there's a

00:02:50,709 --> 00:02:54,400
developer community which is usually a

00:02:52,540 --> 00:02:56,560
subset of the users but are their users

00:02:54,400 --> 00:02:59,650
solving real problems because a lot of

00:02:56,560 --> 00:03:01,870
software is a problem is a solution

00:02:59,650 --> 00:03:03,610
looking for a problem these things are

00:03:01,870 --> 00:03:09,280
usually informed by real-world

00:03:03,610 --> 00:03:12,040
experience so let's talk about cloud

00:03:09,280 --> 00:03:14,110
computing cloud computing is sort of

00:03:12,040 --> 00:03:16,239
like the infinite and probability drive

00:03:14,110 --> 00:03:20,049
that does everything every how

00:03:16,239 --> 00:03:21,909
everywhere at all times if you read the

00:03:20,049 --> 00:03:23,680
if you read the press and you read the

00:03:21,909 --> 00:03:24,970
tech trades what I really want to do is

00:03:23,680 --> 00:03:26,890
come up and make sure that you guys have

00:03:24,970 --> 00:03:28,599
the good framework this is a quick

00:03:26,890 --> 00:03:31,420
overview of what really is cloudy

00:03:28,599 --> 00:03:33,159
because contrary to popular belief if

00:03:31,420 --> 00:03:38,920
it's connected to the internet it is not

00:03:33,159 --> 00:03:41,079
necessarily in the cloud cloud is five

00:03:38,920 --> 00:03:42,969
things and this is National Institute of

00:03:41,079 --> 00:03:45,489
Standards and Technology definition

00:03:42,969 --> 00:03:47,170
on-demand self-service I don't need to

00:03:45,489 --> 00:03:49,840
call somebody to get my stuff it just

00:03:47,170 --> 00:03:52,360
happens you go to a web page and you can

00:03:49,840 --> 00:03:55,150
add more storage to your Dropbox your

00:03:52,360 --> 00:03:56,739
gmail you have broad network access that

00:03:55,150 --> 00:03:58,450
means it's not just in a single data

00:03:56,739 --> 00:04:03,219
center with a single point of failure

00:03:58,450 --> 00:04:05,799
you have multiple access points resource

00:04:03,219 --> 00:04:07,750
pooling fact is you no longer have

00:04:05,799 --> 00:04:09,310
individual servers that are points of

00:04:07,750 --> 00:04:12,060
failures you have a collective pool of

00:04:09,310 --> 00:04:16,209
resources that are dynamically balanced

00:04:12,060 --> 00:04:19,209
the big one elasticity it grows and

00:04:16,209 --> 00:04:20,530
shrinks as you need it and finally as it

00:04:19,209 --> 00:04:21,850
grows or shrinks you have measured

00:04:20,530 --> 00:04:24,790
service which is how you probably

00:04:21,850 --> 00:04:26,500
charged for example in gmail you get 10

00:04:24,790 --> 00:04:28,780
gigabytes or I don't know how many

00:04:26,500 --> 00:04:30,520
gigabytes you get free anymore from from

00:04:28,780 --> 00:04:32,440
google apps but when you hit a certain

00:04:30,520 --> 00:04:34,030
threshold you can pay for more when you

00:04:32,440 --> 00:04:38,970
drop below that you don't have to pay

00:04:34,030 --> 00:04:41,680
any more elasticity measured service so

00:04:38,970 --> 00:04:44,530
three kinds of clouds we have the user

00:04:41,680 --> 00:04:48,360
cloud that is your google apps that is

00:04:44,530 --> 00:04:50,830
your dropbox that is your salesforce com

00:04:48,360 --> 00:04:52,030
we're not going to talk a lot about that

00:04:50,830 --> 00:04:55,090
today we're going to talk about the

00:04:52,030 --> 00:04:56,710
other two clouds has which is platform

00:04:55,090 --> 00:04:58,840
as a service this is a development

00:04:56,710 --> 00:05:01,780
sandbox that abstract sout the

00:04:58,840 --> 00:05:03,280
infrastructure so you have a environment

00:05:01,780 --> 00:05:06,310
for you to develop and deploy your apps

00:05:03,280 --> 00:05:08,080
and then infrastructure as a service and

00:05:06,310 --> 00:05:10,510
this is your traditional networking

00:05:08,080 --> 00:05:14,340
compute and storage but it's all been

00:05:10,510 --> 00:05:16,170
virtualized it has these cloudy

00:05:14,340 --> 00:05:18,880
characteristics that i justified

00:05:16,170 --> 00:05:21,000
characteristics i just talked about so

00:05:18,880 --> 00:05:23,100
everything is a layer of abstraction

00:05:21,000 --> 00:05:25,740
in the early days we abstracted the

00:05:23,100 --> 00:05:27,720
hardware to virtualization especially in

00:05:25,740 --> 00:05:29,760
storage and compute today we're starting

00:05:27,720 --> 00:05:33,060
to see a lot of network virtualization

00:05:29,760 --> 00:05:35,370
happening the next layer up was passed

00:05:33,060 --> 00:05:37,890
is where we're taking out those storage

00:05:35,370 --> 00:05:40,170
and networking components and making

00:05:37,890 --> 00:05:42,810
them abstracted to developer and then

00:05:40,170 --> 00:05:44,220
finally the end user gets to take

00:05:42,810 --> 00:05:48,810
advantage of all that even though they

00:05:44,220 --> 00:05:53,270
probably don't know it's happening the

00:05:48,810 --> 00:05:56,940
deployment models real quick hybrid

00:05:53,270 --> 00:06:00,210
private and public clouds private your

00:05:56,940 --> 00:06:05,100
cloud runs on your infrastructure public

00:06:00,210 --> 00:06:07,380
it runs on someone else's hybrid hybrids

00:06:05,100 --> 00:06:09,030
like sex in high school everybody's

00:06:07,380 --> 00:06:11,580
talking about it and a lot of people are

00:06:09,030 --> 00:06:14,280
doing it that's basically taking

00:06:11,580 --> 00:06:15,680
workloads and they're running it on one

00:06:14,280 --> 00:06:18,840
place or the other and they're

00:06:15,680 --> 00:06:21,270
theoretically dynamically balancing

00:06:18,840 --> 00:06:22,950
those workloads what I see more of is

00:06:21,270 --> 00:06:25,890
people that have decided they're going

00:06:22,950 --> 00:06:27,479
to do private cloud and public cloud and

00:06:25,890 --> 00:06:34,610
they're deploying different pay Lloyd

00:06:27,479 --> 00:06:36,840
payloads to different clouds all right

00:06:34,610 --> 00:06:39,180
now we're going to start talking about

00:06:36,840 --> 00:06:44,460
the clouds and the open-source software

00:06:39,180 --> 00:06:47,760
used to build them as I sort of gave the

00:06:44,460 --> 00:06:50,940
overview before the the past physical

00:06:47,760 --> 00:06:52,919
resources they're all abstracted then we

00:06:50,940 --> 00:06:56,130
have things like operating systems and

00:06:52,919 --> 00:06:57,840
VMS that that virtualize those and then

00:06:56,130 --> 00:07:00,930
these virtualized resources or what's

00:06:57,840 --> 00:07:02,490
consumed by your cloud so when we talk

00:07:00,930 --> 00:07:04,890
about infrastructure as a service

00:07:02,490 --> 00:07:08,070
they're consuming one of one or all

00:07:04,890 --> 00:07:11,490
three of the compute the storage and the

00:07:08,070 --> 00:07:14,310
network some of it may be physical some

00:07:11,490 --> 00:07:17,160
of it may be be virtualized but that's

00:07:14,310 --> 00:07:21,979
when it becomes cloud it is actually

00:07:17,160 --> 00:07:25,020
that a elastic on demand self-service

00:07:21,979 --> 00:07:26,820
dynamic that changes it then on the side

00:07:25,020 --> 00:07:28,470
you normally have different tools that

00:07:26,820 --> 00:07:30,270
integrate with it and then at the top

00:07:28,470 --> 00:07:30,639
those are how people are consuming it

00:07:30,270 --> 00:07:32,530
through

00:07:30,639 --> 00:07:36,999
able devices through api's things like

00:07:32,530 --> 00:07:39,009
that so let's talk about virtualizing

00:07:36,999 --> 00:07:40,569
that hardware and the first thing we're

00:07:39,009 --> 00:07:46,180
going to talk about is compute hardware

00:07:40,569 --> 00:07:50,199
so your server that does stuff that runs

00:07:46,180 --> 00:07:54,249
programs etc can be divided up by a

00:07:50,199 --> 00:07:57,039
hypervisor into virtual machines there's

00:07:54,249 --> 00:07:58,629
a lot of hypervisors out there the four

00:07:57,039 --> 00:08:02,949
that are probably most popular our

00:07:58,629 --> 00:08:08,770
vmware hi Microsoft hyper-v the two open

00:08:02,949 --> 00:08:11,770
source ones are Zen kvm Zen just my

00:08:08,770 --> 00:08:13,360
disclaimer i work on Zen project I will

00:08:11,770 --> 00:08:14,979
have a little so it's for me to say I

00:08:13,360 --> 00:08:17,770
like one over the other I have a

00:08:14,979 --> 00:08:22,589
propensity for Zen but that's should be

00:08:17,770 --> 00:08:25,000
obvious why I do that Zen is now a linux

00:08:22,589 --> 00:08:28,419
foundation project so it sits under

00:08:25,000 --> 00:08:32,860
linux foundation just like the linux

00:08:28,419 --> 00:08:35,380
kernel is and it is supported by citrix

00:08:32,860 --> 00:08:38,800
supported by google it's supported by

00:08:35,380 --> 00:08:41,289
amazon AMD intel we all collaboratively

00:08:38,800 --> 00:08:44,920
work once then the linux foundation ends

00:08:41,289 --> 00:08:48,610
that trademark and it is a hypervisor

00:08:44,920 --> 00:08:52,899
it's a type one hypervisor it does truly

00:08:48,610 --> 00:08:56,170
secure multi-tenant hosting a virtual

00:08:52,899 --> 00:08:59,019
machine so you can the nice thing about

00:08:56,170 --> 00:09:03,449
Zen is its focuses on security and

00:08:59,019 --> 00:09:06,279
stability it's been around since 2007 or

00:09:03,449 --> 00:09:08,649
even before that it's been around a long

00:09:06,279 --> 00:09:10,839
time I forget the date but it has long

00:09:08,649 --> 00:09:14,079
history next one that I think is worth

00:09:10,839 --> 00:09:18,310
looking at is kvm kvm has a high

00:09:14,079 --> 00:09:21,579
fidelity to the Linux kernel kvm runs is

00:09:18,310 --> 00:09:23,470
a one and a half 1.5 hypervisor so some

00:09:21,579 --> 00:09:25,690
of the things kvm does is it runs in

00:09:23,470 --> 00:09:27,730
user space some of the advantages of

00:09:25,690 --> 00:09:29,529
that are the way that you can manage

00:09:27,730 --> 00:09:32,050
your users and Linux a lot of those

00:09:29,529 --> 00:09:35,680
tools work for kvm management that's

00:09:32,050 --> 00:09:38,440
sort of its its advantage I've seen

00:09:35,680 --> 00:09:40,420
benchmarks on both of them thats a one's

00:09:38,440 --> 00:09:42,380
better than the other so I can't tell

00:09:40,420 --> 00:09:44,090
you that one is better than the other

00:09:42,380 --> 00:09:47,360
it would have to depend on the pain on

00:09:44,090 --> 00:09:49,010
the workload you're using then then

00:09:47,360 --> 00:09:51,160
there's virtual box which I don't really

00:09:49,010 --> 00:09:54,250
look at as a server virtualization

00:09:51,160 --> 00:09:57,800
technology it's a true ver like it's a

00:09:54,250 --> 00:09:59,780
workstation virtualization it's a dev

00:09:57,800 --> 00:10:01,220
test environment stuff like that but I

00:09:59,780 --> 00:10:04,990
don't see a lot of people scaling out

00:10:01,220 --> 00:10:10,580
clouds using VirtualBox openvz is

00:10:04,990 --> 00:10:13,340
interesting openvz is a is it sort of at

00:10:10,580 --> 00:10:14,510
that app virtualization level I see a

00:10:13,340 --> 00:10:19,220
lot of people that are doing the same

00:10:14,510 --> 00:10:21,200
kinds of application so like one of the

00:10:19,220 --> 00:10:23,510
decision engines one of the shopping

00:10:21,200 --> 00:10:25,370
engines I've seen out there that do

00:10:23,510 --> 00:10:27,530
shopping searches they use openvz

00:10:25,370 --> 00:10:29,000
because that workload is can they have a

00:10:27,530 --> 00:10:32,150
lot of the same kind of workload and

00:10:29,000 --> 00:10:33,920
they do tons and tons of them the other

00:10:32,150 --> 00:10:37,360
one that I think is interesting and I

00:10:33,920 --> 00:10:40,490
think as a legs in the future is lxc

00:10:37,360 --> 00:10:44,180
because just because it's actually the

00:10:40,490 --> 00:10:45,860
Linux containers and it has a lot of the

00:10:44,180 --> 00:10:48,710
benchmarking I've seen for that is that

00:10:45,860 --> 00:10:51,110
it does really well and scalability for

00:10:48,710 --> 00:10:56,210
certain kinds of payloads and it does

00:10:51,110 --> 00:10:58,370
allow you to use the the tools for

00:10:56,210 --> 00:11:00,320
administrating Linux operating systems

00:10:58,370 --> 00:11:04,670
already but it still gives you some

00:11:00,320 --> 00:11:07,790
isolation my thought is this though that

00:11:04,670 --> 00:11:09,710
if you're worried about multi-tenant

00:11:07,790 --> 00:11:11,800
environments you might want to tend

00:11:09,710 --> 00:11:16,040
towards n if you're looking for

00:11:11,800 --> 00:11:19,070
scalability and they're not scalability

00:11:16,040 --> 00:11:21,410
but to integrate into your operating

00:11:19,070 --> 00:11:23,300
system you might want to look at the LXE

00:11:21,410 --> 00:11:25,760
in the future a lot of the cloud

00:11:23,300 --> 00:11:30,020
provider orchestration layers i talked

00:11:25,760 --> 00:11:32,780
about later cover that and then

00:11:30,020 --> 00:11:35,390
obviously you have VMware Citrix

00:11:32,780 --> 00:11:37,670
XenServer based ones and Oracle VM is

00:11:35,390 --> 00:11:39,380
based on Zen but they're not open source

00:11:37,670 --> 00:11:44,690
and really I'm focusing on the open

00:11:39,380 --> 00:11:46,160
source stuff what comes to cloud there

00:11:44,690 --> 00:11:48,590
aren't a lot of standards right now

00:11:46,160 --> 00:11:51,240
actually there's only one that it was

00:11:48,590 --> 00:11:56,670
actually a regulated standard and

00:11:51,240 --> 00:11:58,589
would be ovf and that's a format that

00:11:56,670 --> 00:12:00,690
allows you to create virtual machines

00:11:58,589 --> 00:12:03,360
with some kind of metadata and move them

00:12:00,690 --> 00:12:05,520
around from cloud to cloud each one of

00:12:03,360 --> 00:12:10,320
the virtual machine or clouds out there

00:12:05,520 --> 00:12:11,940
like Amazon of Zen or the hypervisors

00:12:10,320 --> 00:12:14,550
have their own format for virtual

00:12:11,940 --> 00:12:17,070
machines but the idea with the ovf is

00:12:14,550 --> 00:12:19,980
you have this virtual machine which is a

00:12:17,070 --> 00:12:21,660
file system that has has the payload

00:12:19,980 --> 00:12:24,690
that you're going to run and then some

00:12:21,660 --> 00:12:26,240
kind of metadata and theoretically the

00:12:24,690 --> 00:12:29,850
standard says that you can add multiple

00:12:26,240 --> 00:12:32,250
multiple virtual machines and 10 VF

00:12:29,850 --> 00:12:34,709
package and distribute that whether or

00:12:32,250 --> 00:12:38,870
not the hypervisor the cloud can consume

00:12:34,709 --> 00:12:41,100
that or not is remains to be seen so I

00:12:38,870 --> 00:12:44,880
think a lot of people how many people

00:12:41,100 --> 00:12:48,089
here use cloud computing today from AIAS

00:12:44,880 --> 00:12:55,230
standpoint so like amazon openstack

00:12:48,089 --> 00:12:58,410
cloud stack stuff like that s3 okay so

00:12:55,230 --> 00:12:59,670
when you go to generate your image that

00:12:58,410 --> 00:13:03,420
you're going to put in the cloud there's

00:12:59,670 --> 00:13:05,520
a couple ways to do it you can mount a

00:13:03,420 --> 00:13:09,930
file system and install from some kind

00:13:05,520 --> 00:13:12,810
of binary or you can create a VM through

00:13:09,930 --> 00:13:15,480
some kind of tool that is automated so I

00:13:12,810 --> 00:13:18,000
see a lot of people that are looking to

00:13:15,480 --> 00:13:19,260
deploy a lot of machines and have some

00:13:18,000 --> 00:13:24,410
kind of tool to keep them up to date

00:13:19,260 --> 00:13:28,709
using tools like bitnami bitnami is a

00:13:24,410 --> 00:13:32,100
repository of open source applications

00:13:28,709 --> 00:13:33,930
and they're sort of business model is

00:13:32,100 --> 00:13:35,550
that they give you these virtual

00:13:33,930 --> 00:13:39,810
machines and then they provide updates

00:13:35,550 --> 00:13:41,490
as well and so be like Red Hat network

00:13:39,810 --> 00:13:45,240
but for virtual machines if that makes

00:13:41,490 --> 00:13:47,310
sense or apt-get update for these custom

00:13:45,240 --> 00:13:48,870
built machine and virtual machines and

00:13:47,310 --> 00:13:52,410
we call them appliances because they're

00:13:48,870 --> 00:13:56,070
usually single-use so appliance toaster

00:13:52,410 --> 00:13:58,320
heats up bread blender chop stuff up etc

00:13:56,070 --> 00:13:59,520
but they're usually single purpose

00:13:58,320 --> 00:14:02,970
they're lightweight they're usually

00:13:59,520 --> 00:14:05,670
built on juice' just enough OS so that

00:14:02,970 --> 00:14:08,610
I'm not taking up in order to about this

00:14:05,670 --> 00:14:12,660
space another tool that you can run

00:14:08,610 --> 00:14:15,889
yourself is box grinder box grinder is I

00:14:12,660 --> 00:14:19,079
think an incubated Fedora project and

00:14:15,889 --> 00:14:21,810
you can create use that tool point it to

00:14:19,079 --> 00:14:25,769
repose and actually create Linux distros

00:14:21,810 --> 00:14:28,139
or Linux appliances for your clouds and

00:14:25,769 --> 00:14:30,870
you can specify what providers so if you

00:14:28,139 --> 00:14:34,139
your target is Amazon you can create an

00:14:30,870 --> 00:14:37,529
ami if you're a Zen cloud platform is

00:14:34,139 --> 00:14:39,120
your hypervisor you can create a VM in

00:14:37,529 --> 00:14:44,120
the format that's appropriate for that

00:14:39,120 --> 00:14:48,389
VMware etc oz is another one oz is a

00:14:44,120 --> 00:14:52,170
command-line tool that is also similar

00:14:48,389 --> 00:14:53,730
but it's designed for just kvm and then

00:14:52,170 --> 00:14:55,290
there's one that's actually pretty cool

00:14:53,730 --> 00:14:57,720
and I don't think people they do a good

00:14:55,290 --> 00:15:03,300
job of marketing it is soo soo studio

00:14:57,720 --> 00:15:05,040
and what they do is they create a spec

00:15:03,300 --> 00:15:06,750
file of all the stuff you want it and

00:15:05,040 --> 00:15:08,819
they actually have a web interface or

00:15:06,750 --> 00:15:11,100
they have an API and that's the part

00:15:08,819 --> 00:15:13,290
that I think is interesting is you can

00:15:11,100 --> 00:15:16,050
call suits of studio which is a hosted

00:15:13,290 --> 00:15:19,319
online service to create a custom built

00:15:16,050 --> 00:15:23,970
district for you via the API and script

00:15:19,319 --> 00:15:26,160
the creation of that vm so that it it

00:15:23,970 --> 00:15:29,600
spits out exactly what you want and then

00:15:26,160 --> 00:15:29,600
you can upload it to your cloud provider

00:15:32,120 --> 00:15:39,120
now I've been talking about VMS and and

00:15:36,449 --> 00:15:42,569
virtualized compute resources etc and

00:15:39,120 --> 00:15:46,889
there's two terms that I want to touch

00:15:42,569 --> 00:15:48,389
base on is scaling out and scale up when

00:15:46,889 --> 00:15:50,370
people first told me about the cloud

00:15:48,389 --> 00:15:52,889
they said you just upload your

00:15:50,370 --> 00:15:54,709
application just runs forever it's great

00:15:52,889 --> 00:15:57,689
you have everything you need

00:15:54,709 --> 00:16:01,259
unfortunately most applications are not

00:15:57,689 --> 00:16:03,870
designed to just consume an infant

00:16:01,259 --> 00:16:06,029
amount of resource it's within some set

00:16:03,870 --> 00:16:08,370
of parameters so typically you have

00:16:06,029 --> 00:16:12,389
resources you have things that that's

00:16:08,370 --> 00:16:14,069
scale up that that hit a certain amount

00:16:12,389 --> 00:16:14,350
of processing power certain amount of

00:16:14,069 --> 00:16:17,140
memory

00:16:14,350 --> 00:16:19,630
usage and if if you think of it in terms

00:16:17,140 --> 00:16:23,680
of Amazon they have like a small medium

00:16:19,630 --> 00:16:27,730
large extra-large offering and each one

00:16:23,680 --> 00:16:30,430
has a certain level of compute and RAM

00:16:27,730 --> 00:16:33,250
associated with it so if I hit the

00:16:30,430 --> 00:16:35,740
ceiling of that too I to be able to take

00:16:33,250 --> 00:16:37,960
advantage of more resources I'd have to

00:16:35,740 --> 00:16:40,150
shut down that that virtual machine and

00:16:37,960 --> 00:16:42,610
switch to a larger offering so that you

00:16:40,150 --> 00:16:44,320
can take advantage of maybe one has for

00:16:42,610 --> 00:16:47,560
Megan for gigs of ram and you need eight

00:16:44,320 --> 00:16:50,620
gigs you take you take advantage of that

00:16:47,560 --> 00:16:53,050
offering so that's scaling up now you

00:16:50,620 --> 00:16:56,200
have other applications and I think a

00:16:53,050 --> 00:16:58,930
good example would be h a proxy and web

00:16:56,200 --> 00:17:02,740
server so you have a proxy that load

00:16:58,930 --> 00:17:06,040
balances and sends HTTP requests to

00:17:02,740 --> 00:17:08,080
different web servers if you've hit

00:17:06,040 --> 00:17:11,710
saturated the number of requests in each

00:17:08,080 --> 00:17:13,660
one of those web servers needs you can

00:17:11,710 --> 00:17:15,940
bring up another virtual machine and

00:17:13,660 --> 00:17:18,580
they can start handling those requests

00:17:15,940 --> 00:17:20,530
so that's scaling out one means that

00:17:18,580 --> 00:17:22,480
you're adding more resources to the pool

00:17:20,530 --> 00:17:27,490
one of them means that you're adding

00:17:22,480 --> 00:17:31,540
more VMs to the pool so that all makes

00:17:27,490 --> 00:17:33,190
sense so I wanted to do that background

00:17:31,540 --> 00:17:35,110
so now when we get into some of these

00:17:33,190 --> 00:17:38,110
things that the terminology is

00:17:35,110 --> 00:17:40,870
consistent so now we're going to talk

00:17:38,110 --> 00:17:44,950
about infrastructure as a service in my

00:17:40,870 --> 00:17:47,110
world that's three different things that

00:17:44,950 --> 00:17:50,050
the fall under infrastructure service

00:17:47,110 --> 00:17:52,330
one is compute which is what we're

00:17:50,050 --> 00:17:56,560
talked about here recently one is

00:17:52,330 --> 00:17:59,710
storage and one is networking so there's

00:17:56,560 --> 00:18:01,930
those layers one or all three of those

00:17:59,710 --> 00:18:03,820
things can be abstracted and then

00:18:01,930 --> 00:18:06,460
orchestrated by an orchestration layer

00:18:03,820 --> 00:18:08,980
and that's what these four projects i'm

00:18:06,460 --> 00:18:12,040
talking about today are patchy clouds

00:18:08,980 --> 00:18:15,610
stock once again disclaimer that's stuff

00:18:12,040 --> 00:18:18,310
i work on that's stuff i like apache

00:18:15,610 --> 00:18:20,850
cloudstack is top level Apache project I

00:18:18,310 --> 00:18:24,269
like it because it's very user driven

00:18:20,850 --> 00:18:27,709
the vp of Apache CloudStack is

00:18:24,269 --> 00:18:31,969
a guy at sungard a hosting provider and

00:18:27,709 --> 00:18:34,709
he he runs the project along with the

00:18:31,969 --> 00:18:37,289
project management committee and what

00:18:34,709 --> 00:18:41,489
patchy cloud staff does is it

00:18:37,289 --> 00:18:43,589
orchestrates different collections of

00:18:41,489 --> 00:18:49,259
virtualized resources so virtualized

00:18:43,589 --> 00:18:52,169
servers virtualized storage and physical

00:18:49,259 --> 00:18:55,169
storage and it also orchestrates

00:18:52,169 --> 00:18:58,529
physical and virtual networking so you

00:18:55,169 --> 00:19:01,109
can for example create an offering where

00:18:58,529 --> 00:19:04,289
I have let's call it the self offering

00:19:01,109 --> 00:19:07,139
and that offering has X amount of

00:19:04,289 --> 00:19:11,639
compute X amount of storage assigned to

00:19:07,139 --> 00:19:15,779
it and things like firewall ingress and

00:19:11,639 --> 00:19:17,849
egress rules so access rules to that so

00:19:15,779 --> 00:19:21,839
all three layers of the network stack

00:19:17,849 --> 00:19:23,219
Apache CloudStack is is orchestrating so

00:19:21,839 --> 00:19:25,950
that you can provide that in a

00:19:23,219 --> 00:19:29,070
self-service way it also has a web

00:19:25,950 --> 00:19:31,019
portal so that you can delegate the

00:19:29,070 --> 00:19:34,440
creation of structured other people it

00:19:31,019 --> 00:19:38,009
has a restful api those features are

00:19:34,440 --> 00:19:41,479
pretty common among these service

00:19:38,009 --> 00:19:45,479
providers eucalyptus is very similar

00:19:41,479 --> 00:19:47,940
except they're the place that they focus

00:19:45,479 --> 00:19:50,940
is they have an API and their their

00:19:47,940 --> 00:19:54,149
number one focus is to provide true

00:19:50,940 --> 00:19:56,940
fidelity with the Amazon API so if

00:19:54,149 --> 00:19:59,309
you're using Amazon Web Services you

00:19:56,940 --> 00:20:02,629
instrument your tools to their API you

00:19:59,309 --> 00:20:05,999
can continue to use the eucalyptus API

00:20:02,629 --> 00:20:10,979
they do not have a web portal but they

00:20:05,999 --> 00:20:13,259
have a project with Netflix the netflix

00:20:10,979 --> 00:20:15,089
runs a lot of them all they're not all

00:20:13,259 --> 00:20:17,639
of their infrastructure but most their

00:20:15,089 --> 00:20:20,219
infrastructure on Amazon and they've

00:20:17,639 --> 00:20:22,499
provided a set of open source tools that

00:20:20,219 --> 00:20:24,989
they used to run Netflix and so

00:20:22,499 --> 00:20:27,899
eucalyptus uses something called asgard

00:20:24,989 --> 00:20:30,059
which is an open source project that

00:20:27,899 --> 00:20:31,950
netflix makes out there and netflix is

00:20:30,059 --> 00:20:34,079
actually has a cool project going on now

00:20:31,950 --> 00:20:37,299
the netflix prize where they're trying

00:20:34,079 --> 00:20:39,730
to get people to come up with coolest

00:20:37,299 --> 00:20:43,389
additions to their catalog and it's like

00:20:39,730 --> 00:20:47,590
$10,000 prizes for coming up with the

00:20:43,389 --> 00:20:52,899
best open source open nebula opennebula

00:20:47,590 --> 00:20:58,809
falls in that same category the thing

00:20:52,899 --> 00:21:01,869
that I think they're their capabilities

00:20:58,809 --> 00:21:03,460
are best for or are widely consumed or

00:21:01,869 --> 00:21:06,070
at the university level for running

00:21:03,460 --> 00:21:08,139
compute clusters so they can do other

00:21:06,070 --> 00:21:10,359
stuff but I seem to notice a lot of

00:21:08,139 --> 00:21:14,440
their users or get it and running things

00:21:10,359 --> 00:21:18,909
like Hadoop in parallel calculation

00:21:14,440 --> 00:21:20,559
stuff wave of my my head finally there's

00:21:18,909 --> 00:21:23,230
OpenStack how many people here have

00:21:20,559 --> 00:21:25,830
heard of a pan stack okay how many

00:21:23,230 --> 00:21:28,779
people here have heard of cloudstack

00:21:25,830 --> 00:21:31,989
before me how many people have heard of

00:21:28,779 --> 00:21:34,929
eucalyptus before me how about a pin

00:21:31,989 --> 00:21:37,210
nebula okay just trying to get an idea

00:21:34,929 --> 00:21:41,230
so OpenStack is very they've done a

00:21:37,210 --> 00:21:44,440
great job of marketing their project and

00:21:41,230 --> 00:21:46,720
they are a just like CloudStack

00:21:44,440 --> 00:21:49,179
eucalyptus and open nebula they do those

00:21:46,720 --> 00:21:51,879
same things but OpenStack is a little

00:21:49,179 --> 00:21:54,659
bit more than that OpenStack is a

00:21:51,879 --> 00:21:58,019
collection of like 27 projects and

00:21:54,659 --> 00:22:01,299
OpenStack is housed under an OpenStack

00:21:58,019 --> 00:22:04,179
foundation and the OpenStack foundation

00:22:01,299 --> 00:22:08,080
is subsidized by people that pay a lot

00:22:04,179 --> 00:22:10,509
of money to to be to have influence in

00:22:08,080 --> 00:22:12,909
that and they've done a good job of

00:22:10,509 --> 00:22:15,669
creating awareness but they have they

00:22:12,909 --> 00:22:17,830
have a more modular approach so they

00:22:15,669 --> 00:22:20,739
have lots of sub-projects sort of like

00:22:17,830 --> 00:22:22,690
Apache has lots of subprojects and you

00:22:20,739 --> 00:22:25,149
can go and choose which sub-projects to

00:22:22,690 --> 00:22:27,460
put together the one that's the most

00:22:25,149 --> 00:22:31,659
like the ones I just talked about was

00:22:27,460 --> 00:22:34,109
the compute engine which is Nova they

00:22:31,659 --> 00:22:38,440
have an image service that serves

00:22:34,109 --> 00:22:40,600
templates and backups called glance they

00:22:38,440 --> 00:22:42,999
have an object storage which is called

00:22:40,600 --> 00:22:45,279
Swift actually I think they're dropping

00:22:42,999 --> 00:22:48,600
sort of those code names but a swift

00:22:45,279 --> 00:22:48,600
would be like Amazon s3

00:22:48,910 --> 00:22:53,450
we have an identity management service

00:22:51,620 --> 00:22:57,500
that that ties all these pieces together

00:22:53,450 --> 00:23:00,740
called Keystone and they have a

00:22:57,500 --> 00:23:04,100
networking stack called quantum quantum

00:23:00,740 --> 00:23:06,050
which is OpenStack networking I think is

00:23:04,100 --> 00:23:07,460
what they call it now but you can put

00:23:06,050 --> 00:23:09,620
all these things together so they're

00:23:07,460 --> 00:23:11,230
more modular and then there's a bunch of

00:23:09,620 --> 00:23:13,370
companies out there that are creating

00:23:11,230 --> 00:23:16,070
distributions it's sort of like Linux so

00:23:13,370 --> 00:23:18,170
there's people like nebula and cloud

00:23:16,070 --> 00:23:19,940
scale and other people that are taking

00:23:18,170 --> 00:23:23,060
these pieces together not unlike people

00:23:19,940 --> 00:23:29,450
like fedora or centos or red hat would

00:23:23,060 --> 00:23:31,760
and create a distribution so there's

00:23:29,450 --> 00:23:37,790
there's also the the whale and the

00:23:31,760 --> 00:23:41,300
petunia therefore the there's an inside

00:23:37,790 --> 00:23:44,210
joke there it's but basically that is

00:23:41,300 --> 00:23:46,370
OpenStack so that's that's that IAS

00:23:44,210 --> 00:23:47,930
layer those are the tools that I think

00:23:46,370 --> 00:23:49,880
are worth looking at there there's other

00:23:47,930 --> 00:23:53,210
ones but those are probably the most

00:23:49,880 --> 00:23:59,660
popular and proven and have real users

00:23:53,210 --> 00:24:06,020
of that technology what I want to talk

00:23:59,660 --> 00:24:08,810
about now is AP is so everybody in the

00:24:06,020 --> 00:24:11,090
cloud has an API the problem is that it

00:24:08,810 --> 00:24:13,490
seems like everybody's API is a little

00:24:11,090 --> 00:24:15,410
bit different and people have if you add

00:24:13,490 --> 00:24:17,330
a new feature and one claw hasn't and

00:24:15,410 --> 00:24:20,300
the other one doesn't then why would you

00:24:17,330 --> 00:24:24,350
have that in your API anyhow so the fact

00:24:20,300 --> 00:24:26,600
is standard or the people seem to add as

00:24:24,350 --> 00:24:29,260
a for the private cloud knee open source

00:24:26,600 --> 00:24:32,060
guys we all try and create some level of

00:24:29,260 --> 00:24:34,790
Amazon compatibility because we assume

00:24:32,060 --> 00:24:37,010
that people are toting in Amazon and

00:24:34,790 --> 00:24:39,200
some people decide to go the Amazon

00:24:37,010 --> 00:24:41,630
route some people or other cloud

00:24:39,200 --> 00:24:43,790
provider and others decide that they

00:24:41,630 --> 00:24:47,260
need to build their own cloud so we

00:24:43,790 --> 00:24:49,700
create ap is that like Apache CloudStack

00:24:47,260 --> 00:24:53,360
eucalyptus and OpenStack have some level

00:24:49,700 --> 00:24:55,490
of Amazon compatibility but if you're

00:24:53,360 --> 00:24:57,230
not sure there's these things that are

00:24:55,490 --> 00:25:00,320
cloud abstractions and these cloud

00:24:57,230 --> 00:25:02,040
abstractions give you a common API that

00:25:00,320 --> 00:25:04,740
can go out and control

00:25:02,040 --> 00:25:06,690
clouds so some the guy who does Jay

00:25:04,740 --> 00:25:09,330
clouds he calls it a cloud controller so

00:25:06,690 --> 00:25:12,690
you write to the J clouds library and

00:25:09,330 --> 00:25:15,030
then J clouds can actually work to

00:25:12,690 --> 00:25:17,550
straight things in Amazon in OpenStack

00:25:15,030 --> 00:25:20,130
and CloudStack so that you don't have to

00:25:17,550 --> 00:25:23,430
write to three different api's if you

00:25:20,130 --> 00:25:25,980
had an OpenStack a cloud stack or a wet

00:25:23,430 --> 00:25:29,450
amazon it also the real reason I think

00:25:25,980 --> 00:25:32,040
it's interesting is because it's a

00:25:29,450 --> 00:25:34,650
allows you freedom to move back and

00:25:32,040 --> 00:25:37,020
forth to clouds but not reinventing all

00:25:34,650 --> 00:25:38,910
of your management tools so a little

00:25:37,020 --> 00:25:42,180
yellow guy in the corner is a Babel Fish

00:25:38,910 --> 00:25:44,550
you know the babelfish does the

00:25:42,180 --> 00:25:46,890
hitchhiker's guide a guy goes to the

00:25:44,550 --> 00:25:48,540
planet and doesn't understand anybody

00:25:46,890 --> 00:25:50,730
and he puts a sufficient is here and

00:25:48,540 --> 00:25:53,610
then he understands everybody so that is

00:25:50,730 --> 00:25:56,040
a Babel Fish and the API these cloud

00:25:53,610 --> 00:26:02,730
abstractions are the API or the

00:25:56,040 --> 00:26:04,680
babelfish of the cloud world so I listed

00:26:02,730 --> 00:26:07,110
them here and all these slides are on

00:26:04,680 --> 00:26:10,260
SlideShare and they're all hyperlinks so

00:26:07,110 --> 00:26:11,910
really when you're done I'll give you

00:26:10,260 --> 00:26:13,530
the link to my SlideShare and you can

00:26:11,910 --> 00:26:15,420
get the slides and it has if there's

00:26:13,530 --> 00:26:18,000
something you want to get a look at and

00:26:15,420 --> 00:26:20,040
I have copious speaker notes because I

00:26:18,000 --> 00:26:21,270
feel like it's a lot of stuff to cover

00:26:20,040 --> 00:26:23,370
and I mattingly covering it

00:26:21,270 --> 00:26:25,080
superficially trying to give you an

00:26:23,370 --> 00:26:30,450
overview so you guys can go figure it

00:26:25,080 --> 00:26:35,880
out later on so let's talk about storage

00:26:30,450 --> 00:26:38,760
in the cloud so what comes to cloud one

00:26:35,880 --> 00:26:41,220
of the premises is is the that it's

00:26:38,760 --> 00:26:43,380
geographically disparate which could

00:26:41,220 --> 00:26:46,260
mean multiple data centers within the

00:26:43,380 --> 00:26:48,600
same building or kabine Europe US and

00:26:46,260 --> 00:26:50,850
asia for it's just the idea that there's

00:26:48,600 --> 00:26:55,070
data that those systems have

00:26:50,850 --> 00:27:02,100
distribution for reasons of scale

00:26:55,070 --> 00:27:03,870
redundancy fall over etc the projects

00:27:02,100 --> 00:27:07,230
that I think are really cool in the

00:27:03,870 --> 00:27:09,870
cloud area are Seth which is a

00:27:07,230 --> 00:27:14,000
distributed file storage systems are by

00:27:09,870 --> 00:27:18,050
dreamhost they have integrated with a

00:27:14,000 --> 00:27:20,390
stack and CloudStack and back in the

00:27:18,050 --> 00:27:22,250
early on i said i'd probably didn't need

00:27:20,390 --> 00:27:23,870
to tell you guys about open source but

00:27:22,250 --> 00:27:27,730
the thing i think is interesting is its

00:27:23,870 --> 00:27:31,130
user driven solutions or my preference

00:27:27,730 --> 00:27:33,890
dreamhost is a large hosting company

00:27:31,130 --> 00:27:36,200
that had this problem and so they solved

00:27:33,890 --> 00:27:38,600
it and so they had real problems to

00:27:36,200 --> 00:27:41,090
solve and it informed how they solved it

00:27:38,600 --> 00:27:44,000
now the ceph project is a standalone

00:27:41,090 --> 00:27:48,050
open source project backed by a spin out

00:27:44,000 --> 00:27:50,900
of dreamhost called ink tank but I like

00:27:48,050 --> 00:27:54,830
stuff I hear lots of good things about

00:27:50,900 --> 00:27:57,010
Seth allows you to use commodity

00:27:54,830 --> 00:28:00,980
hardware to do a distributed file system

00:27:57,010 --> 00:28:05,300
for typically where I've seen it is for

00:28:00,980 --> 00:28:09,290
object stores long-term storage of data

00:28:05,300 --> 00:28:12,220
that doesn't change a lot versus other

00:28:09,290 --> 00:28:15,650
ways that you might store dip stage data

00:28:12,220 --> 00:28:18,350
cluster f s is a scale-out nas system

00:28:15,650 --> 00:28:22,760
and it aggravates storage over

00:28:18,350 --> 00:28:25,220
infiniband basically cluster is in the

00:28:22,760 --> 00:28:28,070
same category SF they have different

00:28:25,220 --> 00:28:30,890
product is a shins of SEF the company

00:28:28,070 --> 00:28:33,470
gluster was bought by red hat last year

00:28:30,890 --> 00:28:36,440
i believe and it is an open source

00:28:33,470 --> 00:28:37,850
project that's that red hat will

00:28:36,440 --> 00:28:42,560
integrate into their products that would

00:28:37,850 --> 00:28:44,780
assume then you have OpenStack storage

00:28:42,560 --> 00:28:47,360
and OpenStack storage which is called

00:28:44,780 --> 00:28:51,590
Swift allows you to create your own sort

00:28:47,360 --> 00:28:53,360
of s3 type of environment and you can

00:28:51,590 --> 00:28:55,220
actually use that in conjunction with

00:28:53,360 --> 00:28:57,710
these file system SEF and cluster

00:28:55,220 --> 00:28:59,330
they're not all they're not all apples

00:28:57,710 --> 00:29:00,830
to apples they all are in the storage

00:28:59,330 --> 00:29:03,950
area for cloud but the thing that's

00:29:00,830 --> 00:29:07,070
that's interesting is OpenStack gives

00:29:03,950 --> 00:29:10,190
you that object store through their

00:29:07,070 --> 00:29:12,680
storage project and then you can use SEF

00:29:10,190 --> 00:29:16,040
or gluster as a distributed file system

00:29:12,680 --> 00:29:18,400
underneath of underneath of OpenStack

00:29:16,040 --> 00:29:18,400
storage

00:29:19,009 --> 00:29:28,639
how many people here know what ry'ac is

00:29:21,570 --> 00:29:31,590
heard of it no SQL database well ry'ac

00:29:28,639 --> 00:29:36,059
is sponsored by a company called bash

00:29:31,590 --> 00:29:39,570
show and the note SQL people have

00:29:36,059 --> 00:29:43,529
figured out that it's really easy to

00:29:39,570 --> 00:29:46,019
access data if you store it in no SQL

00:29:43,529 --> 00:29:47,820
hash the location of that data and then

00:29:46,019 --> 00:29:50,940
it makes it easy for a lookup so that's

00:29:47,820 --> 00:29:56,009
why they took ry'ac and create an object

00:29:50,940 --> 00:29:58,409
store and as an s3 hasn´t s3 API

00:29:56,009 --> 00:30:01,139
compatibility is sort of like OpenStack

00:29:58,409 --> 00:30:05,600
storage OpenStack storage has high

00:30:01,139 --> 00:30:09,169
fidelity with all the OpenStack projects

00:30:05,600 --> 00:30:11,580
ry'ac is an alternative that has certain

00:30:09,169 --> 00:30:15,090
technological advantages that I don't

00:30:11,580 --> 00:30:17,039
have time to go into today but as I look

00:30:15,090 --> 00:30:18,690
at the way you build your cloud I think

00:30:17,039 --> 00:30:20,009
it's going to be a la carte depending on

00:30:18,690 --> 00:30:22,889
what you're trying to do and I'm trying

00:30:20,009 --> 00:30:26,609
to say that some stuffs well integrated

00:30:22,889 --> 00:30:28,049
but if you choose to look at at an

00:30:26,609 --> 00:30:30,419
alternative these are sort of your

00:30:28,049 --> 00:30:32,460
alternatives here last one I talked

00:30:30,419 --> 00:30:34,679
about a sheepdog and the only reason

00:30:32,460 --> 00:30:38,999
that I would I really reference this a

00:30:34,679 --> 00:30:43,830
lot is if you're heavy kvm shop sheepdog

00:30:38,999 --> 00:30:46,200
has certain advantages for kvm

00:30:43,830 --> 00:30:48,330
hypervisors it doesn't work with the

00:30:46,200 --> 00:30:53,700
other hypervisors it was developed by

00:30:48,330 --> 00:30:57,450
ntt for running large clusters of kvm if

00:30:53,700 --> 00:31:04,799
you're a fedora kvm kind of person you

00:30:57,450 --> 00:31:08,460
might want to look at at sheepdog now

00:31:04,799 --> 00:31:10,080
let's talk about pass so the

00:31:08,460 --> 00:31:11,779
infrastructure as a service it all made

00:31:10,080 --> 00:31:14,220
sense to us because we all understood

00:31:11,779 --> 00:31:16,139
computing we all understood storage we

00:31:14,220 --> 00:31:19,109
understood networking at least in

00:31:16,139 --> 00:31:21,749
concept now we have this idea of paths

00:31:19,109 --> 00:31:25,019
and that's basically having this layer

00:31:21,749 --> 00:31:28,169
that could gives you a sandbox to deploy

00:31:25,019 --> 00:31:30,330
your app in but that sandbox actually

00:31:28,169 --> 00:31:32,190
interfaces with your computer storage in

00:31:30,330 --> 00:31:34,730
your network it allows it to scale

00:31:32,190 --> 00:31:37,799
up and scale down without having to

00:31:34,730 --> 00:31:39,299
provision at that low level the same way

00:31:37,799 --> 00:31:41,250
you would if you were deploying an

00:31:39,299 --> 00:31:43,620
application like a three-tier

00:31:41,250 --> 00:31:46,049
application a lamp stack or something on

00:31:43,620 --> 00:31:48,899
top of the cloud it provides that sort

00:31:46,049 --> 00:31:51,179
of packaged development environment some

00:31:48,899 --> 00:31:54,029
of them they support different domain

00:31:51,179 --> 00:32:00,750
languages so Cloud Foundry is it was one

00:31:54,029 --> 00:32:04,559
that supports Java Grails gala etc

00:32:00,750 --> 00:32:07,950
Python and PHP through supports claw

00:32:04,559 --> 00:32:12,899
defy is another one by Giga spaces open

00:32:07,950 --> 00:32:15,929
shift is Red Hat's staccato is a for

00:32:12,899 --> 00:32:17,279
cloud foundry because i don't know if

00:32:15,929 --> 00:32:20,159
that's changed but originally cloud

00:32:17,279 --> 00:32:23,669
foundry didn't accept patches from

00:32:20,159 --> 00:32:25,559
outside of vmware so it was open source

00:32:23,669 --> 00:32:29,309
license but whether or not it was really

00:32:25,559 --> 00:32:31,500
open to participation the governance was

00:32:29,309 --> 00:32:36,059
a little tightly controlled so active

00:32:31,500 --> 00:32:39,419
state does that wsh to gratis is a

00:32:36,059 --> 00:32:41,669
another one and there's a little

00:32:39,419 --> 00:32:45,929
difference in the wso2 versus the other

00:32:41,669 --> 00:32:47,820
pass I think the wsa too and there's

00:32:45,929 --> 00:32:49,440
another company that isn't open source

00:32:47,820 --> 00:32:51,600
but they are tools are open source

00:32:49,440 --> 00:32:54,000
called cloud bees they look at this

00:32:51,600 --> 00:32:55,919
continuous deployment model where they

00:32:54,000 --> 00:32:59,309
have tools that allow you to check out

00:32:55,919 --> 00:33:01,279
code and deploy that code into your pass

00:32:59,309 --> 00:33:05,879
and automate the whole process from

00:33:01,279 --> 00:33:09,000
source control to built to deployment

00:33:05,879 --> 00:33:12,750
and the other ones the cloud foundry

00:33:09,000 --> 00:33:15,029
that claw defy the open shift lean more

00:33:12,750 --> 00:33:19,190
towards their standalone project to put

00:33:15,029 --> 00:33:22,049
that deployable code into wsa to just

00:33:19,190 --> 00:33:25,730
predated what we call passed today so

00:33:22,049 --> 00:33:29,340
they had a bunch of tools for actual

00:33:25,730 --> 00:33:31,500
application lifecycle management this

00:33:29,340 --> 00:33:34,470
the thing that's going to make this cool

00:33:31,500 --> 00:33:36,269
someday I think is so earlier we talked

00:33:34,470 --> 00:33:37,130
about ovf so you had some kind of

00:33:36,269 --> 00:33:41,390
standard way

00:33:37,130 --> 00:33:43,670
to deploy an application are a virtual

00:33:41,390 --> 00:33:45,760
machine stack at the point where you can

00:33:43,670 --> 00:33:48,260
have some kind of workload that can move

00:33:45,760 --> 00:33:50,240
seamlessly across different passes

00:33:48,260 --> 00:33:52,190
that'll be interesting to me sort of

00:33:50,240 --> 00:33:54,350
like virtual machines you can actually

00:33:52,190 --> 00:33:59,540
convert virtual machines using tools

00:33:54,350 --> 00:34:03,200
like keq or qemu to recreate a format

00:33:59,540 --> 00:34:05,180
from vmware to them to kvm when you can

00:34:03,200 --> 00:34:07,010
actually take these payloads and

00:34:05,180 --> 00:34:08,990
automate moving them from one cloud to

00:34:07,010 --> 00:34:11,600
the other it'd be interesting in the

00:34:08,990 --> 00:34:14,210
proprietary space right now if you look

00:34:11,600 --> 00:34:17,149
at something like Heroku which is passed

00:34:14,210 --> 00:34:20,629
by Salesforce elastic Beanstalk by

00:34:17,149 --> 00:34:22,940
amazon they both are sort of Java passes

00:34:20,629 --> 00:34:25,010
but they're hosted proprietary passes

00:34:22,940 --> 00:34:27,020
and theoretically you can move these

00:34:25,010 --> 00:34:29,240
apps but it's not very seamless because

00:34:27,020 --> 00:34:30,620
there's different differences between

00:34:29,240 --> 00:34:36,020
them when they can start consuming

00:34:30,620 --> 00:34:37,909
something a pele that is consumable by

00:34:36,020 --> 00:34:44,379
multiple clouds that will be I think

00:34:37,909 --> 00:34:48,350
very interesting for us so that is PA's

00:34:44,379 --> 00:34:50,540
here's the one that's rather new and I

00:34:48,350 --> 00:34:51,760
think is most interesting today it's the

00:34:50,540 --> 00:34:56,020
hottest stuff out there's

00:34:51,760 --> 00:35:01,510
software-defined networking so

00:34:56,020 --> 00:35:03,770
software-defined networking basically

00:35:01,510 --> 00:35:05,120
abstracts out the data in the control

00:35:03,770 --> 00:35:09,140
layers so that you can actually

00:35:05,120 --> 00:35:12,890
centrally control network devices from

00:35:09,140 --> 00:35:15,650
from a control sounds from a controller

00:35:12,890 --> 00:35:17,990
that actually can talk to model devices

00:35:15,650 --> 00:35:20,720
and make changes to the flow tables so

00:35:17,990 --> 00:35:23,480
that you don't have to go into each

00:35:20,720 --> 00:35:26,540
device and reconfigure it and move

00:35:23,480 --> 00:35:29,750
because as we have the ability to bring

00:35:26,540 --> 00:35:31,460
up and down virtual machines in seconds

00:35:29,750 --> 00:35:34,040
you don't want to have to have the

00:35:31,460 --> 00:35:37,070
network routing be a checkpoint and it

00:35:34,040 --> 00:35:41,960
had been until not-too-distant past

00:35:37,070 --> 00:35:44,540
things like but now you have controllers

00:35:41,960 --> 00:35:47,000
arising that are software to find I

00:35:44,540 --> 00:35:49,220
think like vmware's neck or VMware

00:35:47,000 --> 00:35:51,830
Cisco's Nexus which is a soft

00:35:49,220 --> 00:35:53,650
we're switch that allows you to make

00:35:51,830 --> 00:35:55,910
some changes and dynamically

00:35:53,650 --> 00:35:58,220
administrating them rather than going in

00:35:55,910 --> 00:36:05,930
with like ciscoworks it individually

00:35:58,220 --> 00:36:09,200
updating each router switch so if we

00:36:05,930 --> 00:36:11,150
look at networking we want to have the

00:36:09,200 --> 00:36:14,780
same ability to centrally control it

00:36:11,150 --> 00:36:16,190
like we can with our virtual machines we

00:36:14,780 --> 00:36:17,420
want to be able to self provision

00:36:16,190 --> 00:36:22,070
networks that's the one that's sort of

00:36:17,420 --> 00:36:24,320
scary anybody here and network admin so

00:36:22,070 --> 00:36:26,240
now we're going to let users create

00:36:24,320 --> 00:36:29,510
their network services on their ends a

00:36:26,240 --> 00:36:31,280
little bit within within reason that is

00:36:29,510 --> 00:36:35,090
that is the idea it's a little sketchy

00:36:31,280 --> 00:36:38,240
but the idea is that if I can bring up a

00:36:35,090 --> 00:36:40,490
virtual machine in a data center through

00:36:38,240 --> 00:36:42,740
self-service portal I still need to be

00:36:40,490 --> 00:36:44,480
able to have the networking come up and

00:36:42,740 --> 00:36:47,690
there's certain things that we use today

00:36:44,480 --> 00:36:49,940
like VLANs to to give an tag networks to

00:36:47,690 --> 00:36:54,470
actually allow these networks to

00:36:49,940 --> 00:36:56,540
interact but they have certain limits we

00:36:54,470 --> 00:37:01,000
also need the elasticity and scalability

00:36:56,540 --> 00:37:04,580
that we see from virtual machines and

00:37:01,000 --> 00:37:06,560
storage in the network layer and we

00:37:04,580 --> 00:37:08,960
still need to redundancy so we're going

00:37:06,560 --> 00:37:15,650
to trivialize how complicated networking

00:37:08,960 --> 00:37:18,890
is and give every user who in stencil

00:37:15,650 --> 00:37:22,040
self-service networks and the thing that

00:37:18,890 --> 00:37:23,540
enables that and I'm a little

00:37:22,040 --> 00:37:25,640
tongue-in-cheek there i think that

00:37:23,540 --> 00:37:29,170
there's we have a framework that allows

00:37:25,640 --> 00:37:31,520
allows administrators to delegate that

00:37:29,170 --> 00:37:34,849
but we're going to use the OpenFlow

00:37:31,520 --> 00:37:37,640
protocol to actually use that secure

00:37:34,849 --> 00:37:39,950
channel to create changes in these flow

00:37:37,640 --> 00:37:41,720
tables for these switches and some of

00:37:39,950 --> 00:37:46,250
these switches are open source some of

00:37:41,720 --> 00:37:49,520
them have are now a lot of manufacturers

00:37:46,250 --> 00:37:51,470
are shipping open flick capable switches

00:37:49,520 --> 00:37:54,550
so that you can use these network

00:37:51,470 --> 00:37:54,550
controllers to do that

00:37:56,180 --> 00:38:04,440
now for the network controllers there's

00:38:00,990 --> 00:38:06,540
a couple out there and they're at

00:38:04,440 --> 00:38:08,640
different levels some are some are do

00:38:06,540 --> 00:38:10,650
routing some of them are very simple

00:38:08,640 --> 00:38:12,810
they open V switch which a lot of the

00:38:10,650 --> 00:38:16,350
hypervisor is already implemented

00:38:12,810 --> 00:38:20,100
because they needed a multi-layer

00:38:16,350 --> 00:38:22,770
virtual switch to handle the migration

00:38:20,100 --> 00:38:27,030
of virtual machines and that's sort of

00:38:22,770 --> 00:38:30,030
the driver the one that there's one out

00:38:27,030 --> 00:38:35,010
there from big switch networks called

00:38:30,030 --> 00:38:40,130
floodlight it's Apache licensed it works

00:38:35,010 --> 00:38:44,640
today another project that is not a

00:38:40,130 --> 00:38:48,980
controller per se but actually a tool

00:38:44,640 --> 00:38:52,950
kit that allows you to convert your

00:38:48,980 --> 00:38:55,200
existing switches to have open fluid

00:38:52,950 --> 00:39:01,560
compatibility is indigo and that comes

00:38:55,200 --> 00:39:03,390
from Stanford the one I work on is open

00:39:01,560 --> 00:39:08,220
daylight and that is the Linux

00:39:03,390 --> 00:39:12,000
Foundation the the basis for that

00:39:08,220 --> 00:39:14,869
technology is cisco's one controller

00:39:12,000 --> 00:39:16,800
which they donated to linux foundation

00:39:14,869 --> 00:39:23,250
so that's going to be a controller

00:39:16,800 --> 00:39:28,710
that's pluggable and they have 12 19 20

00:39:23,250 --> 00:39:31,680
about 25 company vendors in a user

00:39:28,710 --> 00:39:35,820
consortin a vendor consortium driving

00:39:31,680 --> 00:39:41,580
the development of it so red hat Mike

00:39:35,820 --> 00:39:47,190
Red Hat Microsoft Cisco brocade citrix

00:39:41,580 --> 00:39:50,430
VMware Arista juniper networks I could

00:39:47,190 --> 00:39:53,640
go on but my memory is not that good all

00:39:50,430 --> 00:39:56,090
our participants in this consortium and

00:39:53,640 --> 00:39:59,190
the idea is that the network controller

00:39:56,090 --> 00:40:03,150
handles the layer 3 networking and it's

00:39:59,190 --> 00:40:06,119
pluggable for all these people like for

00:40:03,150 --> 00:40:06,880
example Citrix does has a load balancer

00:40:06,119 --> 00:40:09,099
called

00:40:06,880 --> 00:40:10,990
scalar to make their kind of code

00:40:09,099 --> 00:40:14,019
pluggable in that and we'll be releasing

00:40:10,990 --> 00:40:16,599
more code into there so Brigade has

00:40:14,019 --> 00:40:21,430
stuff juniper has stuff cisco has stuff

00:40:16,599 --> 00:40:23,619
so it's it's sort of the chrome chrome

00:40:21,430 --> 00:40:26,710
kind of approach where you have have a

00:40:23,619 --> 00:40:29,650
base useful controller but then

00:40:26,710 --> 00:40:31,089
everybody will have plugins to that the

00:40:29,650 --> 00:40:33,549
thing is that right now we just

00:40:31,089 --> 00:40:35,019
announced in April so in the third

00:40:33,549 --> 00:40:37,559
quarter this year I think will be the

00:40:35,019 --> 00:40:39,910
first release of something that's really

00:40:37,559 --> 00:40:44,980
usable outside of the development

00:40:39,910 --> 00:40:50,740
environment OpenStack quantum OpenStack

00:40:44,980 --> 00:40:54,160
is it allows you to create network

00:40:50,740 --> 00:40:56,500
services associated with your OpenStack

00:40:54,160 --> 00:40:59,349
known for clouds so if you want to add

00:40:56,500 --> 00:41:02,650
firewalling services or routing services

00:40:59,349 --> 00:41:05,920
or tunnels etc VPNs you can add that

00:41:02,650 --> 00:41:08,170
using OpenStack quantum and they open

00:41:05,920 --> 00:41:10,059
stack quantum has a northbound and

00:41:08,170 --> 00:41:13,470
southbound API so it can interface with

00:41:10,059 --> 00:41:18,730
cloud and it can interface with other

00:41:13,470 --> 00:41:21,849
software to create more robust services

00:41:18,730 --> 00:41:23,529
I think like f5 load balancing I think

00:41:21,849 --> 00:41:26,619
you can add load balancing through

00:41:23,529 --> 00:41:29,289
quantum if I recall correctly and I

00:41:26,619 --> 00:41:33,670
mentioned open D switch which is a open

00:41:29,289 --> 00:41:36,130
source which largely contributed to by a

00:41:33,670 --> 00:41:38,950
company called nasira which VMware

00:41:36,130 --> 00:41:43,210
bought last year this year for like a

00:41:38,950 --> 00:41:45,819
billion dollars so they think that it's

00:41:43,210 --> 00:41:48,539
the hypervisor people and the

00:41:45,819 --> 00:41:51,250
virtualization people think it's very

00:41:48,539 --> 00:41:52,930
important to have dynamic networking to

00:41:51,250 --> 00:41:56,049
go along with their virtualized

00:41:52,930 --> 00:42:00,009
infrastructure and I do too that makes

00:41:56,049 --> 00:42:02,440
sense and basically now there's three

00:42:00,009 --> 00:42:06,549
things yeah how do you like that there's

00:42:02,440 --> 00:42:08,319
three things that are sort of the

00:42:06,549 --> 00:42:11,950
pillars of cloud computing its storage

00:42:08,319 --> 00:42:14,019
compute and networking and now I've gone

00:42:11,950 --> 00:42:16,250
through all those tools that allow you

00:42:14,019 --> 00:42:18,050
to take advantage

00:42:16,250 --> 00:42:21,170
and with of open-source software to

00:42:18,050 --> 00:42:24,410
create clouds based on those

00:42:21,170 --> 00:42:26,060
technologies now we're going to talk a

00:42:24,410 --> 00:42:30,050
little bit about stuff you can do on

00:42:26,060 --> 00:42:31,850
them and I've in the past that talked

00:42:30,050 --> 00:42:33,500
about applications that can run on them

00:42:31,850 --> 00:42:35,960
and build your own SAS and stuff and

00:42:33,500 --> 00:42:38,630
really it's too complex a topic but the

00:42:35,960 --> 00:42:43,910
one topic that is really well-suited to

00:42:38,630 --> 00:42:50,200
the cloud is big data and that picture

00:42:43,910 --> 00:42:54,350
is a deep thought the computer from

00:42:50,200 --> 00:42:59,720
Hitchhiker's Guide and the reason big

00:42:54,350 --> 00:43:05,110
data is interesting is today we create

00:42:59,720 --> 00:43:08,240
more data than ever before unfortunately

00:43:05,110 --> 00:43:12,260
we create a lot of crap and literally I

00:43:08,240 --> 00:43:13,820
mean how many law cat scan we have how

00:43:12,260 --> 00:43:17,210
many pictures of what you had for dinner

00:43:13,820 --> 00:43:20,840
can we have how many you know pictures

00:43:17,210 --> 00:43:23,030
of your cat you know doing something

00:43:20,840 --> 00:43:25,700
cute it's Emily cute to you that's all

00:43:23,030 --> 00:43:27,410
right some of this within that that

00:43:25,700 --> 00:43:31,850
stream of all the data we create there's

00:43:27,410 --> 00:43:34,190
useful stuff and the problem is that we

00:43:31,850 --> 00:43:38,530
have so much data this is like a quote

00:43:34,190 --> 00:43:42,980
of how much data we create but basically

00:43:38,530 --> 00:43:46,010
our storage capacity is is so cheap now

00:43:42,980 --> 00:43:48,140
that we can each create terabytes of

00:43:46,010 --> 00:43:50,660
data in our lifetime and all those

00:43:48,140 --> 00:43:52,880
terabytes of late data maybe who may

00:43:50,660 --> 00:43:54,770
megabytes of that data are interesting

00:43:52,880 --> 00:43:57,620
so we need to have the ability to

00:43:54,770 --> 00:44:00,740
actually access it and get to the stuff

00:43:57,620 --> 00:44:04,160
that's really important so there's

00:44:00,740 --> 00:44:08,900
there's sort of two growing trends and

00:44:04,160 --> 00:44:11,900
big data or first is the evolution of

00:44:08,900 --> 00:44:15,710
the no SQL database so in the old days

00:44:11,900 --> 00:44:19,670
we had tables that have rows and columns

00:44:15,710 --> 00:44:22,850
today the no SQL database has key pairs

00:44:19,670 --> 00:44:23,390
so you have some value associated with a

00:44:22,850 --> 00:44:25,819
half

00:44:23,390 --> 00:44:29,839
it says this is where that data lives

00:44:25,819 --> 00:44:32,510
and gives you a column for you to list

00:44:29,839 --> 00:44:35,059
look stuff up and the thing the ones

00:44:32,510 --> 00:44:39,200
that are popular today are Cassandra

00:44:35,059 --> 00:44:41,390
which is Apache project couchdb which is

00:44:39,200 --> 00:44:45,079
actually a document store seems to it's

00:44:41,390 --> 00:44:50,000
more geared to holding documents HBase

00:44:45,079 --> 00:44:53,420
is another one hyper table mongodb

00:44:50,000 --> 00:44:56,809
MongoDB has a seems to be getting a lot

00:44:53,420 --> 00:45:00,309
of play as documents tour company called

00:44:56,809 --> 00:45:02,779
10gen behind it's been very successful

00:45:00,309 --> 00:45:05,510
all these ones I'm going to give you the

00:45:02,779 --> 00:45:06,980
link because we're sort of running low

00:45:05,510 --> 00:45:09,470
on time and I want to make sure that we

00:45:06,980 --> 00:45:12,410
hit all the content but I sort of gave

00:45:09,470 --> 00:45:16,240
you a little description there is a in

00:45:12,410 --> 00:45:21,380
the in the notes there I think it's

00:45:16,240 --> 00:45:23,660
there's actually a list of entries that

00:45:21,380 --> 00:45:25,579
the no SQL database gives you

00:45:23,660 --> 00:45:29,299
comparisons for depending on what kind

00:45:25,579 --> 00:45:31,039
of yeast case you have for it you may

00:45:29,299 --> 00:45:33,529
want to store documents you want to

00:45:31,039 --> 00:45:36,319
store objects you just may want to store

00:45:33,529 --> 00:45:39,140
massive amounts of data for example your

00:45:36,319 --> 00:45:43,420
tweets if you had five thousand tweets

00:45:39,140 --> 00:45:47,210
they're all of a format that are

00:45:43,420 --> 00:45:50,869
facilitated easily by key pair key value

00:45:47,210 --> 00:45:52,970
pair database and it allows you to look

00:45:50,869 --> 00:45:54,769
up that clever tweet you said about how

00:45:52,970 --> 00:46:01,099
great this talk was and how much fun it

00:45:54,769 --> 00:46:02,750
was three years from now all right so

00:46:01,099 --> 00:46:05,119
here's the stuff that I think is really

00:46:02,750 --> 00:46:07,430
interesting is the MapReduce what

00:46:05,119 --> 00:46:10,069
MapReduce does is you have this big set

00:46:07,430 --> 00:46:11,630
of project problem data and the as I

00:46:10,069 --> 00:46:13,910
pointed out earlier with my facebook

00:46:11,630 --> 00:46:17,089
graph is we have all this data and

00:46:13,910 --> 00:46:18,680
basically what you want to do is sort

00:46:17,089 --> 00:46:21,970
through this data and get to the stuff

00:46:18,680 --> 00:46:24,440
that's useful so rather than querying it

00:46:21,970 --> 00:46:26,150
literally the way you would in an SQL

00:46:24,440 --> 00:46:29,319
database what you would do with

00:46:26,150 --> 00:46:31,809
MapReduce is you create these

00:46:29,319 --> 00:46:34,150
the mapreduce takes it breaks it up into

00:46:31,809 --> 00:46:39,130
smaller jobs does the compute and then

00:46:34,150 --> 00:46:42,339
spits out some solution data and that

00:46:39,130 --> 00:46:45,999
idea was championed at Google and Yahoo

00:46:42,339 --> 00:46:48,029
and then Yahoo actually created a safe

00:46:45,999 --> 00:46:51,160
and source project called Hadoop and

00:46:48,029 --> 00:46:53,469
Hadoop is a MapReduce it's also an

00:46:51,160 --> 00:46:55,209
ecosystem of other part projects out

00:46:53,469 --> 00:46:57,849
there but basically what it does is it

00:46:55,209 --> 00:47:00,999
has this great the ability to take these

00:46:57,849 --> 00:47:03,640
big problem sets and reduce them down

00:47:00,999 --> 00:47:05,009
into something that you can use that you

00:47:03,640 --> 00:47:14,440
can use through some kind of

00:47:05,009 --> 00:47:17,499
manipulation its top level project and

00:47:14,440 --> 00:47:22,779
it has multiple vendors behind it it has

00:47:17,499 --> 00:47:26,440
a lot of users behind it it is more than

00:47:22,779 --> 00:47:30,489
just chopping up all that data it has a

00:47:26,440 --> 00:47:34,660
whole ecosystem of projects around it so

00:47:30,489 --> 00:47:37,029
it has the Hadoop file system HDFS has

00:47:34,660 --> 00:47:40,209
the MapReduce which were the two core

00:47:37,029 --> 00:47:42,459
parts and then it has these

00:47:40,209 --> 00:47:45,130
non-relational databases like hive and

00:47:42,459 --> 00:47:48,069
HBase above it a scripting language

00:47:45,130 --> 00:47:51,099
called pig and a machine learning

00:47:48,069 --> 00:47:53,049
language called mahout it took me a

00:47:51,099 --> 00:47:54,699
whole while to figure out how this stuff

00:47:53,049 --> 00:47:56,999
all work together so I just wanted to

00:47:54,699 --> 00:48:00,069
give you a little diagram of you know

00:47:56,999 --> 00:48:01,749
these these tools like the like the

00:48:00,069 --> 00:48:06,339
scripting language helps you create your

00:48:01,749 --> 00:48:08,410
jobs and and sort through the data the

00:48:06,339 --> 00:48:10,359
MapReduce is the workhorse in the engine

00:48:08,410 --> 00:48:13,779
of all of it and then you can store that

00:48:10,359 --> 00:48:16,329
data into a data warehouse like hive now

00:48:13,779 --> 00:48:19,359
I've seen a lot of traditional data

00:48:16,329 --> 00:48:21,579
companies and in my slides online I've

00:48:19,359 --> 00:48:23,739
put like a big slide of how all these

00:48:21,579 --> 00:48:25,539
companies interrelate and whether who

00:48:23,739 --> 00:48:28,209
are in the data warehousing who are in

00:48:25,539 --> 00:48:32,019
the BI space etc which open source

00:48:28,209 --> 00:48:34,469
projects fit into them but basically

00:48:32,019 --> 00:48:38,849
there are a lot of tools out there that

00:48:34,469 --> 00:48:39,910
Oracle and teradata teradata and other

00:48:38,849 --> 00:48:42,760
tradition

00:48:39,910 --> 00:48:46,089
tional big data companies are looking at

00:48:42,760 --> 00:48:48,369
to integrate so if you already use SAS

00:48:46,089 --> 00:48:50,650
is a little slower to do that they've

00:48:48,369 --> 00:48:52,240
sort of an island onto themselves but

00:48:50,650 --> 00:48:55,890
I've seen SI p and teradata and other

00:48:52,240 --> 00:49:01,660
ones have have integrations with Hadoop

00:48:55,890 --> 00:49:05,410
recently so the thing I wanted you to

00:49:01,660 --> 00:49:07,089
get across to you today was that the

00:49:05,410 --> 00:49:09,849
amount of machine data we're creating is

00:49:07,089 --> 00:49:12,849
increasing exponentially from everything

00:49:09,849 --> 00:49:17,289
from mobile phones to social networking

00:49:12,849 --> 00:49:18,640
to GPS devices and where we have a lot

00:49:17,289 --> 00:49:21,940
more things that are more advantageous

00:49:18,640 --> 00:49:25,750
to manipulate in real time so that is

00:49:21,940 --> 00:49:27,400
why these tools have evolved the other

00:49:25,750 --> 00:49:29,619
thing is really interesting is that

00:49:27,400 --> 00:49:33,910
because of cloud services out there

00:49:29,619 --> 00:49:36,339
people have its access to these clusters

00:49:33,910 --> 00:49:38,079
and compute in a more readily ready

00:49:36,339 --> 00:49:40,410
fashion than ever before you can go

00:49:38,079 --> 00:49:44,710
provision this stuff and run it through

00:49:40,410 --> 00:49:46,809
cloud providers today in minutes versus

00:49:44,710 --> 00:49:49,690
before you had to run all that data

00:49:46,809 --> 00:49:51,819
warehousing stuff in-house and because

00:49:49,690 --> 00:49:53,470
it's elastic you don't have to keep it

00:49:51,819 --> 00:49:59,609
running for your job you can run these

00:49:53,470 --> 00:50:01,990
jobs and then kill it when it's done but

00:49:59,609 --> 00:50:04,630
when they talk about Big Data what we're

00:50:01,990 --> 00:50:10,510
talking about is making the access that

00:50:04,630 --> 00:50:12,549
data faster and easier so the last topic

00:50:10,510 --> 00:50:15,819
i really want to touch on is cloud

00:50:12,549 --> 00:50:21,029
management tools so now i have the

00:50:15,819 --> 00:50:23,529
ability to put my credit card in at

00:50:21,029 --> 00:50:24,880
amazon or cloud provider and spin up a

00:50:23,529 --> 00:50:28,420
ton of machines really really quickly

00:50:24,880 --> 00:50:29,980
and in the old days when i was still

00:50:28,420 --> 00:50:32,760
allowed to have root access on my

00:50:29,980 --> 00:50:35,980
machines i would get on the phone I

00:50:32,760 --> 00:50:38,950
would call dell or HP I'd ordered the

00:50:35,980 --> 00:50:41,980
server it show up I carry it into the

00:50:38,950 --> 00:50:44,770
data center and unbox it I'd rack it I

00:50:41,980 --> 00:50:48,250
bust my knuckles at cuffs for a couple

00:50:44,770 --> 00:50:50,670
minutes i plug in the wires in the back

00:50:48,250 --> 00:50:53,460
and then I installed my operating system

00:50:50,670 --> 00:50:57,330
that could take a month now it takes

00:50:53,460 --> 00:51:00,120
minutes so I needed to take we needed to

00:50:57,330 --> 00:51:01,380
take those tools me and the old days

00:51:00,120 --> 00:51:02,790
would have been the meat cloud and

00:51:01,380 --> 00:51:04,260
really look at how we're going to

00:51:02,790 --> 00:51:07,050
automate so that you can keep up with

00:51:04,260 --> 00:51:11,240
with cloud scale and a lot of the tools

00:51:07,050 --> 00:51:13,830
that I advocate are ones that can be

00:51:11,240 --> 00:51:16,110
scripted or automated to do repetitive

00:51:13,830 --> 00:51:21,120
tasks over and over again the ones that

00:51:16,110 --> 00:51:23,460
really good are smart about it so do you

00:51:21,120 --> 00:51:26,790
know if this goes til twelve-thirty is

00:51:23,460 --> 00:51:28,170
that right okay so there's four kinds of

00:51:26,790 --> 00:51:30,930
tools out there that I think are

00:51:28,170 --> 00:51:33,800
important provisioning config management

00:51:30,930 --> 00:51:36,960
orchestration automation and monitoring

00:51:33,800 --> 00:51:39,000
monitoring is the most boring of it

00:51:36,960 --> 00:51:42,240
nobody does monitor and well it seems

00:51:39,000 --> 00:51:45,180
it's hard to monitor stuff but this is

00:51:42,240 --> 00:51:47,970
for classifications when it comes to the

00:51:45,180 --> 00:51:50,190
cloud what I think you got to look at is

00:51:47,970 --> 00:51:51,390
tools that you can put together to

00:51:50,190 --> 00:51:54,210
create a tool change just like

00:51:51,390 --> 00:51:58,350
developers put together toolchains where

00:51:54,210 --> 00:52:00,360
a set of tools in forum where 1 the

00:51:58,350 --> 00:52:02,880
output of one tool informs the input of

00:52:00,360 --> 00:52:04,800
the other so when I provision something

00:52:02,880 --> 00:52:07,920
I want it to alert my configuration

00:52:04,800 --> 00:52:09,780
management tool to go configure it when

00:52:07,920 --> 00:52:12,240
it's configured it configured it I

00:52:09,780 --> 00:52:14,070
wanted to talk to my automation tool so

00:52:12,240 --> 00:52:16,590
that it starts that configured virtual

00:52:14,070 --> 00:52:21,360
machine and I wanted to also tell my

00:52:16,590 --> 00:52:23,310
monitoring tool that it's there so when

00:52:21,360 --> 00:52:25,560
you put tools together and this is

00:52:23,310 --> 00:52:28,500
actually in the appendix for my slides

00:52:25,560 --> 00:52:30,060
which will be in SlideShare I want you

00:52:28,500 --> 00:52:33,360
to take things like when we talked about

00:52:30,060 --> 00:52:36,960
Susa studio earlier I want OpenStack or

00:52:33,360 --> 00:52:38,580
cloudstack to be actually for it to be

00:52:36,960 --> 00:52:41,480
able to call that through some kind of

00:52:38,580 --> 00:52:45,690
intermediary then use things like

00:52:41,480 --> 00:52:49,530
cobbler to actually update the virtual

00:52:45,690 --> 00:52:53,010
machines anybody go to the ansible talk

00:52:49,530 --> 00:52:54,090
earlier so use a tool i use puppet chef

00:52:53,010 --> 00:52:57,450
there but you could use something like

00:52:54,090 --> 00:52:59,790
ansible in that tool chain and in Mike's

00:52:57,450 --> 00:53:01,770
talk you talked about using ansible to

00:52:59,790 --> 00:53:03,120
update nagios after you configure it to

00:53:01,770 --> 00:53:06,250
monitor it

00:53:03,120 --> 00:53:07,570
so that all these things are automated

00:53:06,250 --> 00:53:10,360
and when you put something into

00:53:07,570 --> 00:53:11,680
production you start the process off it

00:53:10,360 --> 00:53:13,360
goes into production through this

00:53:11,680 --> 00:53:19,210
automated tool change so if you're doing

00:53:13,360 --> 00:53:22,960
tons of stuff it's easy for you to keep

00:53:19,210 --> 00:53:25,030
up with that scale because the former

00:53:22,960 --> 00:53:29,710
roadblock of me racking those servers by

00:53:25,030 --> 00:53:32,010
hand has gone away and other the ability

00:53:29,710 --> 00:53:35,230
to take advantage of this elasticity is

00:53:32,010 --> 00:53:39,430
also predicated on the ability to scale

00:53:35,230 --> 00:53:41,020
out keep up with that scale now I talked

00:53:39,430 --> 00:53:44,440
a lot about building your own cloud

00:53:41,020 --> 00:53:46,750
today there are other tools out there

00:53:44,440 --> 00:53:49,350
for things like Amazon and other clouds

00:53:46,750 --> 00:53:55,240
where you can host it somewhere else and

00:53:49,350 --> 00:53:57,490
use them for amazon I would say that you

00:53:55,240 --> 00:54:00,330
might want to look at the the netflix on

00:53:57,490 --> 00:54:02,890
github they have some interesting tools

00:54:00,330 --> 00:54:04,900
some of them are really geared to join

00:54:02,890 --> 00:54:07,960
large-scale implementations of stuff

00:54:04,900 --> 00:54:10,450
when Amazon one of the things Asgard is

00:54:07,960 --> 00:54:15,460
there I talked about a little earlier is

00:54:10,450 --> 00:54:22,120
a web interface there's also tons

00:54:15,460 --> 00:54:26,110
there's I think 25 projects there simian

00:54:22,120 --> 00:54:30,910
army actually goes out and are creates

00:54:26,110 --> 00:54:33,700
the let's see KS monkeys actually gays

00:54:30,910 --> 00:54:35,290
randomly shuts down stuff to see how

00:54:33,700 --> 00:54:38,170
fault-tolerant is so they build their

00:54:35,290 --> 00:54:40,780
application so that if there's failure

00:54:38,170 --> 00:54:42,730
it automatically recovers chaos monkey

00:54:40,780 --> 00:54:46,330
actually does that it's part of their

00:54:42,730 --> 00:54:49,180
simian army of tools that goes out and

00:54:46,330 --> 00:54:50,830
just wreaks havoc in your system the

00:54:49,180 --> 00:54:52,210
large-scale crowd and if your cloud

00:54:50,830 --> 00:54:53,950
handles that if you're serving your

00:54:52,210 --> 00:54:56,020
applications in a redundant manner it

00:54:53,950 --> 00:54:57,850
shouldn't affect your cloud but they

00:54:56,020 --> 00:55:00,900
actively do that that's practice they do

00:54:57,850 --> 00:55:04,630
it places like Etsy and Amazon as well

00:55:00,900 --> 00:55:09,190
other one I had mentioned that i like is

00:55:04,630 --> 00:55:10,720
scalar FCA lr which helps you do web

00:55:09,190 --> 00:55:14,970
scale stuff in the cloud and they

00:55:10,720 --> 00:55:14,970
support cloudstack amazon

00:55:15,210 --> 00:55:20,260
openstack I think a bunch of clouds but

00:55:17,890 --> 00:55:22,300
there they provide those tools that when

00:55:20,260 --> 00:55:24,880
we talked about scale out they do the

00:55:22,300 --> 00:55:28,480
scale out stuff for web stuff pretty

00:55:24,880 --> 00:55:32,380
effectively now I was hurrying to get

00:55:28,480 --> 00:55:35,790
through this but uh as Jeremy told you

00:55:32,380 --> 00:55:39,130
early on the answer to the cloud is 42

00:55:35,790 --> 00:55:41,440
the problem is the question and the

00:55:39,130 --> 00:55:43,210
question is what the heck do you want to

00:55:41,440 --> 00:55:46,120
do with your cloud and that's the

00:55:43,210 --> 00:55:49,090
question people don't ask enough like I

00:55:46,120 --> 00:55:53,020
would love for everyone here to use Xen

00:55:49,090 --> 00:55:54,490
hypervisor and CloudStack and daylight

00:55:53,020 --> 00:55:58,180
because there are the three projects I

00:55:54,490 --> 00:56:00,580
work on but that may not serve your

00:55:58,180 --> 00:56:04,030
purpose so I think you got to figure out

00:56:00,580 --> 00:56:06,760
is a is the application or set of

00:56:04,030 --> 00:56:08,740
applications you want worth building a

00:56:06,760 --> 00:56:10,450
cloud for or do you want to host it you

00:56:08,740 --> 00:56:13,750
can host it on openstack cloud and

00:56:10,450 --> 00:56:18,250
internap a CloudStack cloud at a ton of

00:56:13,750 --> 00:56:22,930
providers from all over the place you

00:56:18,250 --> 00:56:24,490
can you can use Amazon's Cloud and still

00:56:22,930 --> 00:56:26,590
take advantage of cloud computing but if

00:56:24,490 --> 00:56:28,960
you're going to build it yourself you

00:56:26,590 --> 00:56:30,850
should know what the use case is is it

00:56:28,960 --> 00:56:32,830
going to be geographically distributed

00:56:30,850 --> 00:56:37,270
if you're going to just put it in the

00:56:32,830 --> 00:56:38,680
data center and have still single entry

00:56:37,270 --> 00:56:40,660
into your data center you have a point

00:56:38,680 --> 00:56:43,510
of failure that you want to have in a

00:56:40,660 --> 00:56:46,000
true cloud if you're going to not have

00:56:43,510 --> 00:56:47,620
the ability to put out truly redundant

00:56:46,000 --> 00:56:49,060
distributed storage then maybe you're

00:56:47,620 --> 00:56:50,980
not taking full advantage of the cloud

00:56:49,060 --> 00:56:53,320
and that may be all right but that's

00:56:50,980 --> 00:56:55,530
really not the full promise of what the

00:56:53,320 --> 00:56:55,530
cloud

00:56:58,990 --> 00:57:05,800
house thats everywhere this is the way

00:57:02,410 --> 00:57:07,660
to better utilize all your resources and

00:57:05,800 --> 00:57:11,110
it makes managing all your resources

00:57:07,660 --> 00:57:14,970
pretty easy all of the innovation is

00:57:11,110 --> 00:57:18,430
happening in open source the

00:57:14,970 --> 00:57:20,260
collaborative nature and of the you know

00:57:18,430 --> 00:57:22,390
of the community and the speed at which

00:57:20,260 --> 00:57:24,369
these are these you know these these

00:57:22,390 --> 00:57:26,710
deficiencies these bugs are getting

00:57:24,369 --> 00:57:29,530
discovered and then fixed is it I think

00:57:26,710 --> 00:57:32,530
that really shows the power of the of

00:57:29,530 --> 00:57:34,980
the open source community it is global

00:57:32,530 --> 00:57:38,530
and it's definitely because of the users

00:57:34,980 --> 00:57:44,410
community people are extremely friendly

00:57:38,530 --> 00:57:46,210
and always ready to help if you go an

00:57:44,410 --> 00:57:48,430
entire see any day you'll see these guys

00:57:46,210 --> 00:57:51,070
helping each other out and they're all

00:57:48,430 --> 00:57:52,750
doing it like in a selfless matter the

00:57:51,070 --> 00:57:55,770
product is transparent for everyone

00:57:52,750 --> 00:57:58,690
everyone can look at the code base

00:57:55,770 --> 00:58:00,430
everyone can see how close duck is is

00:57:58,690 --> 00:58:06,280
being built nothing nothing is

00:58:00,430 --> 00:58:08,950
proprietary everything is open in many

00:58:06,280 --> 00:58:13,119
ways it's absolutely vital to the the

00:58:08,950 --> 00:58:16,900
unborn health CloudStack the most

00:58:13,119 --> 00:58:20,680
exciting event in recent memory for me

00:58:16,900 --> 00:58:23,440
was our first developer boot camp and

00:58:20,680 --> 00:58:26,109
our call gave people like maybe two

00:58:23,440 --> 00:58:30,070
weeks notice to come attend I was

00:58:26,109 --> 00:58:34,240
expecting 25 or 30 people so we ended up

00:58:30,070 --> 00:58:37,060
with 87 people and had to go get more

00:58:34,240 --> 00:58:39,609
chairs into the room twice everything

00:58:37,060 --> 00:58:42,850
within cloud computing is commodity and

00:58:39,609 --> 00:58:45,910
is open source and so I don't think that

00:58:42,850 --> 00:58:47,680
you will you'll see anywhere where open

00:58:45,910 --> 00:58:50,710
source is not pervasive in cloud

00:58:47,680 --> 00:58:53,440
computing and so i think it's i think

00:58:50,710 --> 00:58:54,790
it's an assumption i think when you talk

00:58:53,440 --> 00:58:55,900
about cloud computing you're really

00:58:54,790 --> 00:58:58,500
talking about open source cloud

00:58:55,900 --> 00:58:58,500
computing

00:58:58,820 --> 00:59:04,829
cloud sac is a robust solution for large

00:59:02,070 --> 00:59:07,230
deployments you have dozens of data

00:59:04,829 --> 00:59:11,250
centers and thousands of servers in each

00:59:07,230 --> 00:59:14,520
data centers these hardware is going to

00:59:11,250 --> 00:59:17,730
fail and CloudStack is designed to

00:59:14,520 --> 00:59:20,220
handle number one that mass scale number

00:59:17,730 --> 00:59:22,920
two it's designed to handle the failure

00:59:20,220 --> 00:59:25,770
that inevitably happens in large

00:59:22,920 --> 00:59:30,000
deployments started working on cod tech

00:59:25,770 --> 00:59:33,270
over four years ago and it was the

00:59:30,000 --> 00:59:35,040
original set of people working on it had

00:59:33,270 --> 00:59:39,150
a background of delivering software

00:59:35,040 --> 00:59:43,380
telcos and service providers lots of QA

00:59:39,150 --> 00:59:47,010
lots of users actually using it high

00:59:43,380 --> 00:59:50,070
availability is the key feature multiple

00:59:47,010 --> 00:59:52,260
hypervisors support different network

00:59:50,070 --> 00:59:55,260
models we can pick up whatever suits you

00:59:52,260 --> 00:59:57,030
better while step management server can

00:59:55,260 --> 01:00:00,720
be deployed in different physical

00:59:57,030 --> 01:00:02,369
machines it definitely has a huge

01:00:00,720 --> 01:00:07,380
footprint it's being deployed everywhere

01:00:02,369 --> 01:00:09,960
there's a major movie studio that they

01:00:07,380 --> 01:00:13,260
were using CloudStack they were using it

01:00:09,960 --> 01:00:15,240
to transcode video and I thought that

01:00:13,260 --> 01:00:16,859
was terribly fascinating what I found

01:00:15,240 --> 01:00:20,130
more fascinating is what they did during

01:00:16,859 --> 01:00:22,920
lunch where they would spin up you know

01:00:20,130 --> 01:00:24,300
50 or 60 game servers then as soon as

01:00:22,920 --> 01:00:26,220
lunch was over they would destroy all

01:00:24,300 --> 01:00:30,359
the instances and get back to doing real

01:00:26,220 --> 01:00:31,680
work CloudStack is vast it touches so

01:00:30,359 --> 01:00:33,780
many different aspects and there's no

01:00:31,680 --> 01:00:36,150
one person that's kind of like a master

01:00:33,780 --> 01:00:40,230
of all those realms I think cloudstack

01:00:36,150 --> 01:00:42,569
as a project is going to be one of the

01:00:40,230 --> 01:00:46,530
leaders simply because it's some of the

01:00:42,569 --> 01:00:50,329
most feature fallen and and robust

01:00:46,530 --> 01:00:50,329
platforms out they were

01:00:50,940 --> 01:00:54,859
I don't see your limits of the clouds

01:00:52,589 --> 01:00:54,859
tag

01:01:07,680 --> 01:01:09,740
you

01:01:13,079 --> 01:01:18,130
when we created asterisk over a decade

01:01:15,790 --> 01:01:20,109
ago we could not have imagined that

01:01:18,130 --> 01:01:22,300
asterisk would not only become the most

01:01:20,109 --> 01:01:24,430
widely adopted open source communication

01:01:22,300 --> 01:01:26,470
software on the planet but that it would

01:01:24,430 --> 01:01:28,990
impact the entire industry in the way

01:01:26,470 --> 01:01:30,970
that it has today asterisk has found its

01:01:28,990 --> 01:01:33,609
way in the more than 170 countries and

01:01:30,970 --> 01:01:35,560
virtually every fortune 1000 company the

01:01:33,609 --> 01:01:37,630
success of asterisk has enabled a

01:01:35,560 --> 01:01:39,069
transition of power from the hands of

01:01:37,630 --> 01:01:41,349
the traditional proprietary phone

01:01:39,069 --> 01:01:43,720
vendors into the hands of the users and

01:01:41,349 --> 01:01:45,670
administrators of phone systems using

01:01:43,720 --> 01:01:46,900
this power our customers have created

01:01:45,670 --> 01:01:48,849
all sorts of business changing

01:01:46,900 --> 01:01:50,680
applications from small office phone

01:01:48,849 --> 01:01:53,200
systems to mission-critical call centers

01:01:50,680 --> 01:01:54,819
the international carrier networks in

01:01:53,200 --> 01:01:56,589
fact there's even an entire country

01:01:54,819 --> 01:01:58,990
those communications infrastructure runs

01:01:56,589 --> 01:02:01,119
on esters the gym has always been about

01:01:58,990 --> 01:02:02,829
creating technology that expands

01:02:01,119 --> 01:02:04,990
communications capabilities in ways that

01:02:02,829 --> 01:02:06,369
we could never have imagined and that's

01:02:04,990 --> 01:02:09,010
part of what's game-changing about the

01:02:06,369 --> 01:02:11,470
gym today we're doing it again this time

01:02:09,010 --> 01:02:13,569
by introducing a new family of HD IP

01:02:11,470 --> 01:02:15,849
phones that extends control of the user

01:02:13,569 --> 01:02:17,619
all the way to the desktop the launch of

01:02:15,849 --> 01:02:19,140
these new products represents the next

01:02:17,619 --> 01:02:21,790
phase indigenous history of innovation

01:02:19,140 --> 01:02:23,740
these are the first and only IP phones

01:02:21,790 --> 01:02:25,329
designed to fully leverage the power of

01:02:23,740 --> 01:02:26,950
estrus when we first discussed our

01:02:25,329 --> 01:02:28,750
expectations for building a family of

01:02:26,950 --> 01:02:30,910
phones for use with asterisk our

01:02:28,750 --> 01:02:32,650
requirements were pretty simple we asked

01:02:30,910 --> 01:02:34,270
the team to build the phones such that

01:02:32,650 --> 01:02:36,490
they were easy to install integrate

01:02:34,270 --> 01:02:38,319
provision and use I think you'll soon

01:02:36,490 --> 01:02:40,900
agree our engineers have delivered on

01:02:38,319 --> 01:02:42,520
that goal user feedback is validating

01:02:40,900 --> 01:02:44,650
that when it comes to operation with

01:02:42,520 --> 01:02:47,050
astro space systems including our own

01:02:44,650 --> 01:02:49,630
Switchvox based product these are the

01:02:47,050 --> 01:02:50,950
easiest to use best integrated most

01:02:49,630 --> 01:02:53,530
interoperable products on the market

01:02:50,950 --> 01:02:55,530
today the digitally phones will

01:02:53,530 --> 01:02:57,579
initially include three IP des hommes

01:02:55,530 --> 01:02:59,530
uniquely designed to complement any

01:02:57,579 --> 01:03:01,390
asterisks or switch box based solution

01:02:59,530 --> 01:03:04,060
these phones are different for a number

01:03:01,390 --> 01:03:06,700
of reasons first there is clue sively

01:03:04,060 --> 01:03:08,140
designed for use with esters secondly

01:03:06,700 --> 01:03:09,750
we've made it really easy to

01:03:08,140 --> 01:03:12,160
autodiscover and provision the phones

01:03:09,750 --> 01:03:14,230
next we've made it easy for the phones

01:03:12,160 --> 01:03:16,180
to access information inside of asterisk

01:03:14,230 --> 01:03:17,780
allowing tight coupling between an

01:03:16,180 --> 01:03:19,740
application and the

01:03:17,780 --> 01:03:21,930
additionally we've created an

01:03:19,740 --> 01:03:24,030
applications engine that allows users

01:03:21,930 --> 01:03:27,270
and developers to create and run their

01:03:24,030 --> 01:03:29,040
own apps on the phone and finally we've

01:03:27,270 --> 01:03:30,990
done all of this at a very compelling

01:03:29,040 --> 01:03:32,670
price point at Digium we're always

01:03:30,990 --> 01:03:34,770
thinking of ways to give our customers

01:03:32,670 --> 01:03:37,290
the best value in business phone systems

01:03:34,770 --> 01:03:39,000
and also give them the power to create

01:03:37,290 --> 01:03:41,040
their own solutions or eating

01:03:39,000 --> 01:03:42,780
communications challenge will continue

01:03:41,040 --> 01:03:44,190
to push the boundaries not only to make

01:03:42,780 --> 01:03:46,260
Astra's cooler faster and more

01:03:44,190 --> 01:03:48,000
technologically feature-rich but to make

01:03:46,260 --> 01:03:50,550
asterisk and communications even easier

01:03:48,000 --> 01:03:53,480
and together we'll change the way the

01:03:50,550 --> 01:03:53,480
world communication again

01:04:01,360 --> 01:04:05,630
your customers rely on your website or

01:04:04,130 --> 01:04:08,000
application if it's slower

01:04:05,630 --> 01:04:10,940
non-responsive it infuriates your users

01:04:08,000 --> 01:04:12,770
and costs you money keeping your

01:04:10,940 --> 01:04:16,260
business critical systems humming along

01:04:12,770 --> 01:04:18,600
requires insight into what they're doing

01:04:16,260 --> 01:04:20,550
your system metrics tells stories

01:04:18,600 --> 01:04:22,560
stories that can reveal performance

01:04:20,550 --> 01:04:24,870
bottlenecks resource limitations and

01:04:22,560 --> 01:04:26,460
other problems but how do you keep an

01:04:24,870 --> 01:04:29,100
eye on all of your systems performance

01:04:26,460 --> 01:04:32,130
metrics in real-time and record this

01:04:29,100 --> 01:04:34,110
data for later analysis enter longview

01:04:32,130 --> 01:04:35,910
the new way to see what's really going

01:04:34,110 --> 01:04:38,070
on under the hood the long view

01:04:35,910 --> 01:04:40,140
dashboard lets you visualize the status

01:04:38,070 --> 01:04:42,570
of all your systems providing you with a

01:04:40,140 --> 01:04:45,960
bird's-eye view of your entire fleet you

01:04:42,570 --> 01:04:48,540
can sort by cpu memory swap processes

01:04:45,960 --> 01:04:50,340
load and network usage click a specific

01:04:48,540 --> 01:04:52,710
system to access its individual

01:04:50,340 --> 01:04:55,220
dashboard then click and drag to zoom in

01:04:52,710 --> 01:04:57,600
on chokepoints and get more detail

01:04:55,220 --> 01:04:59,280
comprehensive network data including

01:04:57,600 --> 01:05:01,590
inbound and outbound traffic is

01:04:59,280 --> 01:05:03,180
available on the network tab and disk

01:05:01,590 --> 01:05:05,070
rights and free space on the disk

01:05:03,180 --> 01:05:07,920
stabbed while the process Explorer

01:05:05,070 --> 01:05:10,470
displays usage statistics for individual

01:05:07,920 --> 01:05:12,630
processes the system info tab shows

01:05:10,470 --> 01:05:14,880
listening services active connections

01:05:12,630 --> 01:05:17,010
and available updates adding long view

01:05:14,880 --> 01:05:18,720
to a system is easy just click the

01:05:17,010 --> 01:05:20,850
button copy the one line installation

01:05:18,720 --> 01:05:23,280
command then run the command on your

01:05:20,850 --> 01:05:24,990
linux system to complete the process the

01:05:23,280 --> 01:05:27,180
agent will begin collecting data and

01:05:24,990 --> 01:05:28,980
sending it to longview then the graphs

01:05:27,180 --> 01:05:31,590
start rolling

01:05:28,980 --> 01:05:33,960
use longview to gain visibility into

01:05:31,590 --> 01:05:37,700
your servers so when your website or app

01:05:33,960 --> 01:05:37,700
heats up it stays up

01:06:18,789 --> 01:06:23,739
most enterprises today realize that

01:06:21,489 --> 01:06:25,419
usernames and passwords alone aren't

01:06:23,739 --> 01:06:27,789
enough to keep their networks saved from

01:06:25,419 --> 01:06:29,859
unauthorized intrusions that's my

01:06:27,789 --> 01:06:31,900
two-factor authentication has gotten so

01:06:29,859 --> 01:06:34,029
popular lately that adds that extra

01:06:31,900 --> 01:06:36,699
layer of protection enterprise networks

01:06:34,029 --> 01:06:38,469
need to stay safe but what you may not

01:06:36,699 --> 01:06:40,660
know is that some two-factor

01:06:38,469 --> 01:06:42,880
authentication solutions they're better

01:06:40,660 --> 01:06:45,939
than others like two-factor strong

01:06:42,880 --> 01:06:48,189
authentication with wicked wicked goes

01:06:45,939 --> 01:06:50,169
beyond other authentication systems by

01:06:48,189 --> 01:06:53,229
being less expensive easier to implement

01:06:50,169 --> 01:06:55,689
and easier to use giving software-based

01:06:53,229 --> 01:06:58,539
token clients built to run on all major

01:06:55,689 --> 01:07:01,140
devices and OSS including iOS and

01:06:58,539 --> 01:07:03,489
Android these tokens utilize a

01:07:01,140 --> 01:07:05,709
public/private key combination that's

01:07:03,489 --> 01:07:07,839
generated an on device so there aren't

01:07:05,709 --> 01:07:10,359
any shared secrets flying around or

01:07:07,839 --> 01:07:13,209
attackers to hijack or which require any

01:07:10,359 --> 01:07:15,069
special handling instead all keys are

01:07:13,209 --> 01:07:17,559
kept secure and private between the

01:07:15,069 --> 01:07:19,749
requesting token and your server which

01:07:17,559 --> 01:07:21,359
you control aim house making it the most

01:07:19,749 --> 01:07:24,039
secure way possible to perform

01:07:21,359 --> 01:07:26,829
authentication encryption and with an

01:07:24,039 --> 01:07:29,619
extensive flexible API and support for

01:07:26,829 --> 01:07:31,599
protocols like ldap and radius wicket

01:07:29,619 --> 01:07:33,000
works with any enterprise network

01:07:31,599 --> 01:07:35,480
architecture

01:07:33,000 --> 01:07:38,090
the IT systems vital to your enterprise

01:07:35,480 --> 01:07:40,080
download your wicked free trial today

01:07:38,090 --> 01:07:41,880
regardless of whether you're considering

01:07:40,080 --> 01:07:43,680
two-factor authentication for the first

01:07:41,880 --> 01:07:46,920
time or just ready to ditch your

01:07:43,680 --> 01:07:49,290
existing expensive key file system we

01:07:46,920 --> 01:07:54,230
can help with easy to implement easy to

01:07:49,290 --> 01:07:54,230

YouTube URL: https://www.youtube.com/watch?v=_QiRW5EkP34


