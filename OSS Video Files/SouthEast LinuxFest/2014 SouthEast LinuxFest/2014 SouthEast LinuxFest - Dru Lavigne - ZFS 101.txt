Title: 2014 SouthEast LinuxFest - Dru Lavigne - ZFS 101
Publication date: 2015-05-02
Playlist: 2014 SouthEast LinuxFest
Description: 
	2014 SouthEast LinuxFest
Dru Lavigne
ZFS 101
Captions: 
	00:00:00,000 --> 00:00:05,339
the following presentation was recorded

00:00:02,490 --> 00:00:08,189
the 2014 southeast linux fest in

00:00:05,339 --> 00:00:11,070
charlotte north carolina it is licensed

00:00:08,189 --> 00:00:14,880
under a creative commons license for

00:00:11,070 --> 00:00:18,180
more information visit www selfies linux

00:00:14,880 --> 00:00:19,710
pc org the southeast linux fest would

00:00:18,180 --> 00:00:22,740
like to thank the following diamond

00:00:19,710 --> 00:00:24,689
sponsors in 2014 for helping make these

00:00:22,740 --> 00:00:26,939
videos possibly and on some of the

00:00:24,689 --> 00:00:28,800
technical details and if you go over my

00:00:26,939 --> 00:00:30,630
head i'll let you know and i'll refer

00:00:28,800 --> 00:00:34,440
you to other things so we're going to be

00:00:30,630 --> 00:00:39,570
looking at more from the usability point

00:00:34,440 --> 00:00:43,410
of view and is it going to move long

00:00:39,570 --> 00:00:45,680
hang on here that's right want to be so

00:00:43,410 --> 00:00:48,090
we're going to discuss ZFS features

00:00:45,680 --> 00:00:52,500
being a bsd person i'm going to

00:00:48,090 --> 00:00:55,710
concentrate on some of the cbse tools so

00:00:52,500 --> 00:00:57,750
we're going to look at how they are

00:00:55,710 --> 00:00:59,520
integrated into a network attached

00:00:57,750 --> 00:01:02,370
storage so a lot of people are familiar

00:00:59,520 --> 00:01:06,360
with freenas which is based on freebsd

00:01:02,370 --> 00:01:08,970
this talk is looking at version 9 to 15

00:01:06,360 --> 00:01:12,810
which is the current release but we are

00:01:08,970 --> 00:01:15,860
in RC 1 for 9 to 16 so i'd expect that

00:01:12,810 --> 00:01:21,210
one to be out in another week or so

00:01:15,860 --> 00:01:23,790
pc-bsd allows you to build typically a

00:01:21,210 --> 00:01:27,659
desktop on top of freebsd makes it easy

00:01:23,790 --> 00:01:29,400
to use 1002 is what i'll be showing off

00:01:27,659 --> 00:01:32,220
because we've added a lot of new

00:01:29,400 --> 00:01:34,170
functionality that has actually been

00:01:32,220 --> 00:01:36,329
built and it's going to be announced on

00:01:34,170 --> 00:01:40,579
monday so that will be our latest

00:01:36,329 --> 00:01:43,259
release both myself and pen at the

00:01:40,579 --> 00:01:46,380
freebsd booths are running that version

00:01:43,259 --> 00:01:48,450
of pc-bsd so if you see anything in this

00:01:46,380 --> 00:01:50,280
talk that interests you feel free to

00:01:48,450 --> 00:01:51,869
come by the booth and you can play with

00:01:50,280 --> 00:01:54,390
it yourself you could actually look at

00:01:51,869 --> 00:01:57,590
the tools so those will be the os's

00:01:54,390 --> 00:01:57,590
we're concentrating on

00:02:00,780 --> 00:02:06,460
so for those who aren't familiar what

00:02:03,400 --> 00:02:11,140
ZFS is it is a file system it was

00:02:06,460 --> 00:02:14,500
designed 12 years ago now and the

00:02:11,140 --> 00:02:17,890
original designers of ZFS wanted to

00:02:14,500 --> 00:02:20,200
create a file system that would scale

00:02:17,890 --> 00:02:23,380
with modern hardware and they were

00:02:20,200 --> 00:02:25,569
actually thinking towards the future so

00:02:23,380 --> 00:02:28,739
in their original design the hardware

00:02:25,569 --> 00:02:31,120
they were building for did not exist yet

00:02:28,739 --> 00:02:33,250
fortunately Hardware has moved on in the

00:02:31,120 --> 00:02:35,890
last 12 years and we're all familiar

00:02:33,250 --> 00:02:39,060
with Moore's Law in just the pace of

00:02:35,890 --> 00:02:41,560
which drive capacity memory capacity is

00:02:39,060 --> 00:02:44,950
increasing and we don't see that

00:02:41,560 --> 00:02:48,670
stopping anytime soon so most of the

00:02:44,950 --> 00:02:52,030
UNIX file systems that are in existence

00:02:48,670 --> 00:02:55,630
today are still dragging along design

00:02:52,030 --> 00:02:58,750
ideas from the 70s and the 80s when Ram

00:02:55,630 --> 00:03:02,100
was at a premium and you couldn't even

00:02:58,750 --> 00:03:06,250
dream of dis sizes that we put on our

00:03:02,100 --> 00:03:08,440
personal laptops these days so this one

00:03:06,250 --> 00:03:10,209
is designed to be scalable it's a

00:03:08,440 --> 00:03:11,920
hundred and twenty eight bits so it's

00:03:10,209 --> 00:03:14,739
going to be a long time before we can

00:03:11,920 --> 00:03:17,530
run out of disk space one of the more

00:03:14,739 --> 00:03:20,110
interesting features about ZFS from a

00:03:17,530 --> 00:03:23,709
filesystem point of view is that it's

00:03:20,110 --> 00:03:26,799
copy-on-write and the easiest way to

00:03:23,709 --> 00:03:30,760
describe copy-on-write is as the

00:03:26,799 --> 00:03:33,010
filesystem writes data to disk blocks it

00:03:30,760 --> 00:03:35,980
never overwrites the contents of an

00:03:33,010 --> 00:03:38,620
existing disk block so if you edit a

00:03:35,980 --> 00:03:41,680
file and it's saving your changes to

00:03:38,620 --> 00:03:44,440
disk it's not going to touch the

00:03:41,680 --> 00:03:47,530
original file data it's going to write

00:03:44,440 --> 00:03:50,530
that data elsewhere on disk and that

00:03:47,530 --> 00:03:52,540
sounds a bit weird but as we go through

00:03:50,530 --> 00:03:55,299
this presentation you'll see what

00:03:52,540 --> 00:03:57,220
benefits that gives you so copy and

00:03:55,299 --> 00:03:59,709
write most people think are the future

00:03:57,220 --> 00:04:03,489
of file systems and we're starting to

00:03:59,709 --> 00:04:05,049
get some copy-on-write file systems the

00:04:03,489 --> 00:04:07,540
other thing is if you've been around

00:04:05,049 --> 00:04:09,190
unix-like operating systems for a while

00:04:07,540 --> 00:04:11,860
it takes

00:04:09,190 --> 00:04:15,250
a bit of a brain shift to figure out how

00:04:11,860 --> 00:04:18,010
to set up your disks for ZFS so if

00:04:15,250 --> 00:04:20,260
you've set up unix before you know that

00:04:18,010 --> 00:04:22,660
ahead of time you have to think how big

00:04:20,260 --> 00:04:25,120
should root be help what about us our

00:04:22,660 --> 00:04:29,050
what about VAR because these are things

00:04:25,120 --> 00:04:31,960
that you have to format you have to give

00:04:29,050 --> 00:04:34,770
the sizes when you format the file

00:04:31,960 --> 00:04:39,220
system and basically that's your limit

00:04:34,770 --> 00:04:42,670
with ZFS you don't do that a ZFS you

00:04:39,220 --> 00:04:45,460
feed it disks and then as you want to

00:04:42,670 --> 00:04:48,280
divide up your data you create file

00:04:45,460 --> 00:04:52,200
systems as you need to the cool thing

00:04:48,280 --> 00:04:55,150
about creating file systems with ZFS is

00:04:52,200 --> 00:04:59,170
unless you set a quota on a file system

00:04:55,150 --> 00:05:03,280
to restrict its size it has the full

00:04:59,170 --> 00:05:05,950
capacity of the pool so if you create a

00:05:03,280 --> 00:05:08,770
80 terabyte pool when you create a file

00:05:05,950 --> 00:05:11,500
system on it every file system has

00:05:08,770 --> 00:05:13,840
access to that entire pool so it's a

00:05:11,500 --> 00:05:19,360
very different way of looking at how to

00:05:13,840 --> 00:05:21,400
set up your storage so when you're

00:05:19,360 --> 00:05:23,770
creating this concept known as a pool

00:05:21,400 --> 00:05:27,669
think of it as the root of your file

00:05:23,770 --> 00:05:31,150
system and what you do is you add this

00:05:27,669 --> 00:05:33,520
to it now if you are thinking of very

00:05:31,150 --> 00:05:36,190
large storage capacity you have very

00:05:33,520 --> 00:05:39,160
large disks and a lot of them you don't

00:05:36,190 --> 00:05:41,800
want to throw them all in at once so it

00:05:39,160 --> 00:05:44,800
supports something known as virtual

00:05:41,800 --> 00:05:48,070
devices or V deaths where you feed it a

00:05:44,800 --> 00:05:50,530
certain number of disks at a time as you

00:05:48,070 --> 00:05:52,690
feed those disks you can decide am I

00:05:50,530 --> 00:05:55,390
going to have redundancy is that

00:05:52,690 --> 00:05:57,550
something that's important to me and if

00:05:55,390 --> 00:06:00,340
I have redundancy we want to keep in

00:05:57,550 --> 00:06:05,200
mind that as I replace failed disks I

00:06:00,340 --> 00:06:09,040
have to recreate that virtual device so

00:06:05,200 --> 00:06:11,350
I wouldn't throw 30-10 terabyte drives

00:06:09,040 --> 00:06:13,930
into a V dev that's going to take a long

00:06:11,350 --> 00:06:16,570
time to recreate that if I have to put

00:06:13,930 --> 00:06:19,330
in a different disk and in CFS

00:06:16,570 --> 00:06:22,419
recreating your redundancies called

00:06:19,330 --> 00:06:22,750
silver or riesling so that's one of the

00:06:22,419 --> 00:06:24,310
things

00:06:22,750 --> 00:06:27,970
you want to keep in mind as you're

00:06:24,310 --> 00:06:30,490
feeding discs to z FS the nice thing

00:06:27,970 --> 00:06:33,460
about CFS though is it's designed to

00:06:30,490 --> 00:06:35,320
scale for your future needs so as you

00:06:33,460 --> 00:06:38,260
are starting to run out of disk space

00:06:35,320 --> 00:06:40,600
you just throw in additional virtual

00:06:38,260 --> 00:06:46,900
devices and then you increase the

00:06:40,600 --> 00:06:51,130
capacity of your pool when it comes to

00:06:46,900 --> 00:06:53,530
redundancy a ZFS one of its design goals

00:06:51,130 --> 00:06:57,220
was to overcome some of the limitations

00:06:53,530 --> 00:07:00,100
bill into hardware RAID anyone who's

00:06:57,220 --> 00:07:02,500
used hardware RAID before knows that

00:07:00,100 --> 00:07:04,360
it's possible for the controller to not

00:07:02,500 --> 00:07:06,100
tell you right away if a disk is

00:07:04,360 --> 00:07:08,260
starting to die and that you can

00:07:06,100 --> 00:07:11,500
actually be writing corrupt data over

00:07:08,260 --> 00:07:15,310
time before the controller eventually

00:07:11,500 --> 00:07:18,580
clues in and tells you ZFS was designed

00:07:15,310 --> 00:07:21,370
that as it writes your disk data blocks

00:07:18,580 --> 00:07:24,610
it puts check sums in every block and

00:07:21,370 --> 00:07:27,250
every time it reads a dist a diblock it

00:07:24,610 --> 00:07:29,560
checks that checksum and it's going to

00:07:27,250 --> 00:07:32,320
let you know if it's finding checksums

00:07:29,560 --> 00:07:34,750
that don't match and oftentimes that's

00:07:32,320 --> 00:07:37,450
an early indication you have a bad part

00:07:34,750 --> 00:07:39,700
of the disk so it's designed that you

00:07:37,450 --> 00:07:42,220
don't have to purchase rate controllers

00:07:39,700 --> 00:07:44,530
you can still use it with a raid

00:07:42,220 --> 00:07:46,510
controller but we recommend that

00:07:44,530 --> 00:07:49,900
typically you're putting that controller

00:07:46,510 --> 00:07:53,280
in j-bad mode so that ZFS has direct

00:07:49,900 --> 00:07:53,280
access to your disks

00:07:55,220 --> 00:08:05,000
um yes sorry about that I'm problems for

00:07:59,600 --> 00:08:07,820
these slides here so that when ZFS is

00:08:05,000 --> 00:08:10,100
actually doing redundancy on your disks

00:08:07,820 --> 00:08:12,830
that's known as a raid Z there's

00:08:10,100 --> 00:08:15,080
currently three levels of raids II where

00:08:12,830 --> 00:08:18,620
the number after the Z tells you how

00:08:15,080 --> 00:08:21,110
many disks you can lose / v dev before

00:08:18,620 --> 00:08:23,840
you lose data and this is another reason

00:08:21,110 --> 00:08:27,380
why you want to decide how many dis sat

00:08:23,840 --> 00:08:30,500
at I'm to put in a V dev so if I have 15

00:08:27,380 --> 00:08:33,169
disks and I want to create a raid z1

00:08:30,500 --> 00:08:36,080
where I can lose one dis pervy death I

00:08:33,169 --> 00:08:38,659
could for example have three v-dubs of

00:08:36,080 --> 00:08:42,409
five deceit so that way if I'm REE

00:08:38,659 --> 00:08:45,410
silvering only per group of five am I

00:08:42,409 --> 00:08:47,840
having to recreate that the other thing

00:08:45,410 --> 00:08:51,740
that a ZFS does differently when it's

00:08:47,840 --> 00:08:54,530
doing its raid in conventional hardware

00:08:51,740 --> 00:08:57,500
RAID depending upon the type of raid is

00:08:54,530 --> 00:08:59,870
where your parity data is written ZFS

00:08:57,500 --> 00:09:02,900
always distributes parody for locks

00:08:59,870 --> 00:09:05,210
across all disks so that way you don't

00:09:02,900 --> 00:09:09,050
have any single points of failure for

00:09:05,210 --> 00:09:10,970
your parody depending upon how important

00:09:09,050 --> 00:09:13,490
your data is so this is something we see

00:09:10,970 --> 00:09:15,740
more in freenas land for people who are

00:09:13,490 --> 00:09:20,210
concerned about storage and large

00:09:15,740 --> 00:09:23,420
capacities if it's going to be a bad

00:09:20,210 --> 00:09:26,060
thing for you if to dis fail at a time I

00:09:23,420 --> 00:09:30,589
don't do a raid see one move up to the

00:09:26,060 --> 00:09:32,600
next level of raid which is rate c2 so

00:09:30,589 --> 00:09:34,790
again very similar your parodies across

00:09:32,600 --> 00:09:38,000
all disks and you can lose up to two

00:09:34,790 --> 00:09:41,510
discs right now the most redundancy

00:09:38,000 --> 00:09:44,600
that's available is raid xiii so you can

00:09:41,510 --> 00:09:47,290
lose up to three disks pervy dev before

00:09:44,600 --> 00:09:47,290
you lose any data

00:09:47,680 --> 00:09:53,209
so that's an overview the file system

00:09:50,029 --> 00:09:55,610
itself if we take a look at the tools

00:09:53,209 --> 00:09:59,180
that we have to manage this I'm going to

00:09:55,610 --> 00:10:01,430
show for both freenas and pc-bsd so in

00:09:59,180 --> 00:10:04,130
freenas your operating system is

00:10:01,430 --> 00:10:06,589
separate from your storage disk so you

00:10:04,130 --> 00:10:11,120
install freenas either on a USB thumb

00:10:06,589 --> 00:10:14,660
drive or an SSD so creating your pool is

00:10:11,120 --> 00:10:17,180
something you do post install so here i

00:10:14,660 --> 00:10:18,740
have the web interface for freenas i

00:10:17,180 --> 00:10:21,769
don't know how well you can see this but

00:10:18,740 --> 00:10:24,620
we have a section called volumes and i

00:10:21,769 --> 00:10:27,709
can add a valium get into the ZFS volume

00:10:24,620 --> 00:10:32,300
manager i have to give the volume a name

00:10:27,709 --> 00:10:33,820
i can optionally encrypt the disk in

00:10:32,300 --> 00:10:36,529
case i'm worried about somebody

00:10:33,820 --> 00:10:39,320
physically walking off with my disks and

00:10:36,529 --> 00:10:42,440
then it will tell me how many disks i

00:10:39,320 --> 00:10:45,500
have available and i simply select how

00:10:42,440 --> 00:10:48,470
many disks i want to put into a V dev in

00:10:45,500 --> 00:10:51,050
this example I only had five so I have

00:10:48,470 --> 00:10:54,589
one left I've already selected for if

00:10:51,050 --> 00:10:57,649
this was like a 30 disk block I could go

00:10:54,589 --> 00:11:00,100
at the same time create all of my V debs

00:10:57,649 --> 00:11:02,480
at once how many that I wanted to create

00:11:00,100 --> 00:11:04,459
it reminds me that I'm actually

00:11:02,480 --> 00:11:06,500
formatting these disks I'm going to lose

00:11:04,459 --> 00:11:13,899
the data if there's anything already on

00:11:06,500 --> 00:11:13,899
them so fairly easy to use in pc-bsd

00:11:15,880 --> 00:11:22,370
because pc-bsd you're either installing

00:11:19,280 --> 00:11:24,050
a desktop or server stern the actual

00:11:22,370 --> 00:11:27,680
installation that you're going to set up

00:11:24,050 --> 00:11:30,380
your disks so in the Installer it just

00:11:27,680 --> 00:11:32,290
tells you if you just have one disk just

00:11:30,380 --> 00:11:35,270
press next and keep on installing

00:11:32,290 --> 00:11:38,000
otherwise if you do have multiple disks

00:11:35,270 --> 00:11:40,880
you can decide to create mirrors or one

00:11:38,000 --> 00:11:43,850
of the raid sees one of the things I

00:11:40,880 --> 00:11:46,010
haven't mentioned yet a ZFS with mirrors

00:11:43,850 --> 00:11:48,800
is different than traditional hardware

00:11:46,010 --> 00:11:51,200
raid me ruin in that you can use any

00:11:48,800 --> 00:11:55,070
amount of disks in a mirror so it's not

00:11:51,200 --> 00:11:57,740
just two disks or for this if I check

00:11:55,070 --> 00:12:00,740
this box I then just say if I wanted I

00:11:57,740 --> 00:12:02,840
select my mirror or my type of raids II

00:12:00,740 --> 00:12:05,200
and I check off the disks that I want to

00:12:02,840 --> 00:12:05,200
put in there

00:12:09,630 --> 00:12:13,230
we have a couple of other terms that I

00:12:11,850 --> 00:12:15,330
want to go through and then we'll start

00:12:13,230 --> 00:12:18,060
looking at some of the cool features and

00:12:15,330 --> 00:12:20,190
what we can do with them one of the

00:12:18,060 --> 00:12:22,940
terms you see with ZFS is something

00:12:20,190 --> 00:12:27,180
called the Zille or the ZFS intent log

00:12:22,940 --> 00:12:29,720
think of this as where your rights go

00:12:27,180 --> 00:12:32,910
until they actually get written to disk

00:12:29,720 --> 00:12:35,670
we all know that it's always faster to

00:12:32,910 --> 00:12:39,600
get things out of memory than it is to

00:12:35,670 --> 00:12:41,580
disk so if you have a lot of rights you

00:12:39,600 --> 00:12:45,300
may actually benefit from having a

00:12:41,580 --> 00:12:47,460
secondary Zille or a secondary log the

00:12:45,300 --> 00:12:49,320
thing that you have to understand though

00:12:47,460 --> 00:12:51,810
is you have to know the type of Rights

00:12:49,320 --> 00:12:54,180
that you're doing on the system because

00:12:51,810 --> 00:12:56,070
this only affects synchronous rights

00:12:54,180 --> 00:12:58,530
it's not going to help you at all if

00:12:56,070 --> 00:13:01,650
your utilities are doing a sink rights

00:12:58,530 --> 00:13:03,570
and typically this is something we see

00:13:01,650 --> 00:13:06,180
more in freenas because you have a lot

00:13:03,570 --> 00:13:09,240
of people coming over the network doing

00:13:06,180 --> 00:13:12,180
rights so in freenas we actually have a

00:13:09,240 --> 00:13:15,030
utility called Zil stat which will

00:13:12,180 --> 00:13:16,860
monitor how often your zeal is getting

00:13:15,030 --> 00:13:19,440
the hint and it gives you an idea of

00:13:16,860 --> 00:13:23,120
whether you would actually benefit from

00:13:19,440 --> 00:13:23,120
having a secondary log device

00:13:26,050 --> 00:13:32,860
the other term that people think about

00:13:29,380 --> 00:13:35,800
is there arc and their lair to arc so if

00:13:32,860 --> 00:13:38,200
you're Zil is your read cache your arc

00:13:35,800 --> 00:13:42,880
or you're right cash arc is your read

00:13:38,200 --> 00:13:45,490
cash again this is in memory it's going

00:13:42,880 --> 00:13:49,029
to take time as a system boots up and

00:13:45,490 --> 00:13:52,060
the data starts to be read for your arc

00:13:49,029 --> 00:13:55,420
to populate and basically you want your

00:13:52,060 --> 00:13:58,990
most read data to be stored in RAM so

00:13:55,420 --> 00:14:02,890
it's there for quick access if you have

00:13:58,990 --> 00:14:04,899
a lot of mrs. in your art cash a Miss

00:14:02,890 --> 00:14:08,200
means I had actually go to disk to get

00:14:04,899 --> 00:14:11,260
the data you may actually benefit from

00:14:08,200 --> 00:14:14,529
increasing your art and again we give

00:14:11,260 --> 00:14:18,070
you utilities to actually monitor what's

00:14:14,529 --> 00:14:21,010
happening in your art cash so freebsd

00:14:18,070 --> 00:14:23,950
itself it stopped utility includes arc

00:14:21,010 --> 00:14:26,230
stats so you can just run top and in

00:14:23,950 --> 00:14:29,260
freenas we've added a couple of python

00:14:26,230 --> 00:14:31,680
utilities that'll give you a summary or

00:14:29,260 --> 00:14:36,490
show you a running status of your art

00:14:31,680 --> 00:14:39,399
let it go live for both secondary log in

00:14:36,490 --> 00:14:42,130
a layer to arc we recommend that if

00:14:39,399 --> 00:14:45,459
you're going to add one use a fast

00:14:42,130 --> 00:14:48,370
device such as an SSD is if you really

00:14:45,459 --> 00:14:51,790
you're trying to increase performance if

00:14:48,370 --> 00:14:54,690
you're adding these devices it's very

00:14:51,790 --> 00:14:57,970
easy to add these in both freenas and

00:14:54,690 --> 00:15:01,149
pc-bsd so here i'm in volume manager

00:14:57,970 --> 00:15:03,700
again i could actually add either of

00:15:01,149 --> 00:15:06,220
those devices when i first set up the

00:15:03,700 --> 00:15:08,410
pool but often this is something that's

00:15:06,220 --> 00:15:11,140
done afterwards when i'm trying to fine

00:15:08,410 --> 00:15:14,079
tune the performance of a system so i

00:15:11,140 --> 00:15:17,199
can just go in again say i'm in volume

00:15:14,079 --> 00:15:19,420
one that's the name of my pool it'll

00:15:17,199 --> 00:15:22,540
show me what devices i have and i can

00:15:19,420 --> 00:15:26,440
just add a log or a cash device and it

00:15:22,540 --> 00:15:28,570
will start using it right away pc-bsd

00:15:26,440 --> 00:15:32,350
there's a couple of places you can do

00:15:28,570 --> 00:15:35,560
this this screen here is new in 1002

00:15:32,350 --> 00:15:38,130
because we've had especially server

00:15:35,560 --> 00:15:41,180
users a support

00:15:38,130 --> 00:15:45,180
so you'll see in the 1002 installer and

00:15:41,180 --> 00:15:47,550
right during install this one I didn't

00:15:45,180 --> 00:15:49,890
have any SSDs on the system but if I did

00:15:47,550 --> 00:15:51,960
they would show up here and I just check

00:15:49,890 --> 00:15:59,070
the box to either create a cache device

00:15:51,960 --> 00:16:01,620
or a log device post-install we have

00:15:59,070 --> 00:16:04,410
utility and pc-bsd called the disk

00:16:01,620 --> 00:16:07,500
manager so I just picked the ZFS pools

00:16:04,410 --> 00:16:10,350
tab I highlight the name of my pool and

00:16:07,500 --> 00:16:16,650
I can add a cache device or I can add a

00:16:10,350 --> 00:16:18,360
log device now we get into some of the

00:16:16,650 --> 00:16:21,810
interesting stuff so it's basically our

00:16:18,360 --> 00:16:24,180
terminology for ZFS so I mentioned

00:16:21,810 --> 00:16:26,280
before that you create your pool and

00:16:24,180 --> 00:16:29,340
then you create file systems as you need

00:16:26,280 --> 00:16:32,130
them typically those file systems are

00:16:29,340 --> 00:16:35,430
called datasets and again it takes a

00:16:32,130 --> 00:16:37,350
while to understand why would I want to

00:16:35,430 --> 00:16:39,660
make different data sets or different

00:16:37,350 --> 00:16:42,600
file systems why not just have my great

00:16:39,660 --> 00:16:44,730
big pool and the answer to that really

00:16:42,600 --> 00:16:49,590
depends upon what you're doing with your

00:16:44,730 --> 00:16:52,320
storage so if this is a server system do

00:16:49,590 --> 00:16:55,200
you have a lot of users if so it makes

00:16:52,320 --> 00:16:57,780
sense to give each user their home

00:16:55,200 --> 00:17:00,930
directory as a separate data set and

00:16:57,780 --> 00:17:03,360
this makes things easier for a lot of

00:17:00,930 --> 00:17:07,620
reasons one is you can set permissions

00:17:03,360 --> 00:17:10,050
on data sets you can set various

00:17:07,620 --> 00:17:13,199
properties so you can set things such as

00:17:10,050 --> 00:17:17,310
quotas so you could give each user their

00:17:13,199 --> 00:17:19,530
own quota for a data set so data sets

00:17:17,310 --> 00:17:21,089
are in some way they're like folders

00:17:19,530 --> 00:17:23,250
because you can set permissions and

00:17:21,089 --> 00:17:27,959
properties but they really are file

00:17:23,250 --> 00:17:30,210
systems users is one example another

00:17:27,959 --> 00:17:33,600
example may be four different types of

00:17:30,210 --> 00:17:36,870
data so if you're storing a lot of say

00:17:33,600 --> 00:17:38,970
is OS or virtual machines you may want

00:17:36,870 --> 00:17:44,160
to put that type of data on a different

00:17:38,970 --> 00:17:46,770
data set if you have a lot of media that

00:17:44,160 --> 00:17:49,410
would for example benefit for

00:17:46,770 --> 00:17:50,870
compression store in its own data set

00:17:49,410 --> 00:17:52,580
and set the compression

00:17:50,870 --> 00:17:55,010
pretty addict so you have a lot of

00:17:52,580 --> 00:17:59,059
flexibility of what you're going to do

00:17:55,010 --> 00:18:02,360
with your data there is literally dozens

00:17:59,059 --> 00:18:07,390
of configurable properties all of them

00:18:02,360 --> 00:18:09,950
are listed in detail in man's EFS and

00:18:07,390 --> 00:18:12,320
FreeBSD has all of their man pages

00:18:09,950 --> 00:18:15,620
online so you can just do a search for

00:18:12,320 --> 00:18:18,530
man ZFS I've mentioned some of the most

00:18:15,620 --> 00:18:26,090
commonly used properties but there are

00:18:18,530 --> 00:18:29,540
literally dozens of properties in

00:18:26,090 --> 00:18:32,510
freenas to make a data set I select my

00:18:29,540 --> 00:18:35,750
volume and surprisingly it says add data

00:18:32,510 --> 00:18:38,450
set the only thing I have to give a data

00:18:35,750 --> 00:18:40,580
set is a name but I can set some of the

00:18:38,450 --> 00:18:43,670
most common properties while I'm there

00:18:40,580 --> 00:18:46,940
so for example i can set compression i

00:18:43,670 --> 00:18:48,620
can set a size on the data set and there

00:18:46,940 --> 00:18:53,630
is an advanced mode if i want to see

00:18:48,620 --> 00:18:56,170
more properties in pc-bsd I can do this

00:18:53,630 --> 00:18:59,480
both during installation and afterwards

00:18:56,170 --> 00:19:01,690
here I have the default screen on the

00:18:59,480 --> 00:19:04,520
installer and you'll notice by default

00:19:01,690 --> 00:19:07,520
pc-bsd creates a whole bunch of data

00:19:04,520 --> 00:19:10,130
sets for you and those data sets are

00:19:07,520 --> 00:19:12,530
actually used by the utilities and I'm

00:19:10,130 --> 00:19:14,240
going to describe some of those so for

00:19:12,530 --> 00:19:16,040
example there's a data set for where

00:19:14,240 --> 00:19:18,200
your software is installed there's a

00:19:16,040 --> 00:19:20,960
data set for we're home directories are

00:19:18,200 --> 00:19:23,390
installed and as you create users each

00:19:20,960 --> 00:19:26,330
user by default gets their own data set

00:19:23,390 --> 00:19:29,059
but you can go in and add data sets as

00:19:26,330 --> 00:19:32,559
you want to and you can set any other

00:19:29,059 --> 00:19:32,559
properties on them

00:19:35,789 --> 00:19:41,169
post install I can go back to this

00:19:38,649 --> 00:19:43,090
manager and I can just say I'm really

00:19:41,169 --> 00:19:46,240
creating file systems so they call that

00:19:43,090 --> 00:19:48,249
tab the file system tab I click on add

00:19:46,240 --> 00:19:50,409
data set and I can set a bunch of

00:19:48,249 --> 00:19:55,409
properties and basically give the data

00:19:50,409 --> 00:19:58,389
set a name and set properties on it

00:19:55,409 --> 00:20:03,039
another type of file system is called a

00:19:58,389 --> 00:20:06,429
Z ball and this is basically to an end

00:20:03,039 --> 00:20:09,669
user or an application it's a raw block

00:20:06,429 --> 00:20:12,039
device so you these when you create a Z

00:20:09,669 --> 00:20:15,039
ball you have to set a size on it and

00:20:12,039 --> 00:20:17,499
the most common use for Z balls is I

00:20:15,039 --> 00:20:20,970
scuzzy so you're using it as a device

00:20:17,499 --> 00:20:24,460
extent so when a nice cozy client

00:20:20,970 --> 00:20:27,850
connects for example to a free no system

00:20:24,460 --> 00:20:31,539
it just sees a disc that's ready to be

00:20:27,850 --> 00:20:33,700
formatted the cool thing with this is if

00:20:31,539 --> 00:20:37,619
you have clients that need to use other

00:20:33,700 --> 00:20:40,629
file systems or other operating systems

00:20:37,619 --> 00:20:43,029
to them it's just a disc they form at it

00:20:40,629 --> 00:20:45,850
they do whatever they want with it but

00:20:43,029 --> 00:20:48,700
underneath all of that that data is

00:20:45,850 --> 00:20:50,559
being protected by ZFS so it's still

00:20:48,700 --> 00:20:53,619
check something as it's right in all the

00:20:50,559 --> 00:20:57,779
disk blocks it's still alerting view of

00:20:53,619 --> 00:20:57,779
what's happening on that area of disk

00:20:59,850 --> 00:21:06,090
to create a sea ball on freenas I again

00:21:02,730 --> 00:21:08,669
go back to my pool it's calls create a Z

00:21:06,090 --> 00:21:12,600
ball I have to give it a name and I have

00:21:08,669 --> 00:21:16,830
to set a size and then I can just click

00:21:12,600 --> 00:21:19,200
and create it we do support both thick

00:21:16,830 --> 00:21:25,770
and thin provisioning and you can set

00:21:19,200 --> 00:21:27,870
compression on a-z ball now we start

00:21:25,770 --> 00:21:31,710
getting into the cool stuff and probably

00:21:27,870 --> 00:21:34,559
the coolest thing about CFS is it's the

00:21:31,710 --> 00:21:36,809
way that it does snapshots so file

00:21:34,559 --> 00:21:39,809
system snapshots have been around for a

00:21:36,809 --> 00:21:43,679
while but typically a traditional file

00:21:39,809 --> 00:21:47,400
system snapshot if I have a partition

00:21:43,679 --> 00:21:49,980
that 60 gigs in size if I create a

00:21:47,400 --> 00:21:52,230
snapshot I'm going to end up with a 60

00:21:49,980 --> 00:21:57,390
gigging size snapshot so it's basically

00:21:52,230 --> 00:21:59,070
recreating that partition so it takes in

00:21:57,390 --> 00:22:01,500
the background it takes a while to

00:21:59,070 --> 00:22:04,380
create the snapshot and it takes a while

00:22:01,500 --> 00:22:07,080
to deal with the snapshot a lot of file

00:22:04,380 --> 00:22:09,840
systems also set limits on how many

00:22:07,080 --> 00:22:14,190
snapshots you can create and how many it

00:22:09,840 --> 00:22:17,669
can store ZFS does snapshots differently

00:22:14,190 --> 00:22:20,669
when you create a snapshot it literally

00:22:17,669 --> 00:22:24,470
takes a couple of milliseconds and that

00:22:20,669 --> 00:22:28,289
snapshot is originally 0 bytes in size

00:22:24,470 --> 00:22:32,190
so one way of thinking about what is ZFS

00:22:28,289 --> 00:22:36,240
snapshot to the file system is just a d

00:22:32,190 --> 00:22:39,659
marker for a point in time on your local

00:22:36,240 --> 00:22:42,240
pool your snapshots will start to grow

00:22:39,659 --> 00:22:45,900
as you move away from that point in time

00:22:42,240 --> 00:22:49,130
and you start making changes to files so

00:22:45,900 --> 00:22:52,590
that's when your snapshots start to grow

00:22:49,130 --> 00:22:55,950
snapshots can be recursive so that means

00:22:52,590 --> 00:22:59,250
if you have a root filesystem and you've

00:22:55,950 --> 00:23:02,280
made check children file systems

00:22:59,250 --> 00:23:04,350
underneath it it atomically creates them

00:23:02,280 --> 00:23:05,789
all at the same time so you're not going

00:23:04,350 --> 00:23:08,460
to have any problems with the data

00:23:05,789 --> 00:23:10,409
that's stored in the disks I had a

00:23:08,460 --> 00:23:10,900
question last week about this because

00:23:10,409 --> 00:23:13,420
we're going to

00:23:10,900 --> 00:23:16,540
talking about replication well if the

00:23:13,420 --> 00:23:18,820
snapshots are zero bytes in size how can

00:23:16,540 --> 00:23:22,420
I actually recreate the data on the

00:23:18,820 --> 00:23:26,170
local system ZFS already has everything

00:23:22,420 --> 00:23:28,650
that it needs I can go and replicate

00:23:26,170 --> 00:23:32,710
those snapshots to another system and

00:23:28,650 --> 00:23:34,840
the first time I replicate it's going to

00:23:32,710 --> 00:23:39,370
take a while to recreate the pool on the

00:23:34,840 --> 00:23:41,590
other system and then as I replicate

00:23:39,370 --> 00:23:44,200
snapshots those are going to be very

00:23:41,590 --> 00:23:46,240
quick going over to wire so it's almost

00:23:44,200 --> 00:23:48,100
like an hour sink because it's only

00:23:46,240 --> 00:23:52,060
going to send over the stuff that has

00:23:48,100 --> 00:23:55,690
changed but it's using a ZFS send and

00:23:52,060 --> 00:23:57,850
receive to do that so it always seems

00:23:55,690 --> 00:24:03,520
weird will but zero bytes in size how

00:23:57,850 --> 00:24:05,560
can I recreate my data and we're going

00:24:03,520 --> 00:24:09,100
to show a bit about recreation of data

00:24:05,560 --> 00:24:13,060
so creating a snapshot is very easy so

00:24:09,100 --> 00:24:15,070
in freenas basically it's just a

00:24:13,060 --> 00:24:16,960
scheduler how often do you want your

00:24:15,070 --> 00:24:19,260
snapshots to occur and they'll

00:24:16,960 --> 00:24:21,820
automatically happen behind the scenes

00:24:19,260 --> 00:24:24,640
because freenas is used a lot in

00:24:21,820 --> 00:24:26,620
enterprise environments you can set the

00:24:24,640 --> 00:24:29,440
day of your the week and you can also

00:24:26,620 --> 00:24:31,330
set the hour so for example you could do

00:24:29,440 --> 00:24:33,190
between nine and five monday to friday

00:24:31,330 --> 00:24:39,190
and that's when it would create

00:24:33,190 --> 00:24:42,550
snapshots pc-bsd there's a couple places

00:24:39,190 --> 00:24:44,560
that we can create snapshots and one of

00:24:42,550 --> 00:24:48,160
the things that's interesting especially

00:24:44,560 --> 00:24:50,950
from a server point of view so freebsd

00:24:48,160 --> 00:24:53,730
for the last 12 years has had a

00:24:50,950 --> 00:24:56,770
virtualization technology called jails

00:24:53,730 --> 00:24:59,860
which is very similar to what linux is

00:24:56,770 --> 00:25:02,770
starting to do with containers so jails

00:24:59,860 --> 00:25:05,940
are basically a separate freebsd

00:25:02,770 --> 00:25:10,140
operating system so allows you to deploy

00:25:05,940 --> 00:25:13,180
on one system other instances of freebsd

00:25:10,140 --> 00:25:15,400
the difference between usual

00:25:13,180 --> 00:25:19,789
virtualization methods is that it's very

00:25:15,400 --> 00:25:22,340
lightweight so for example on my laptop

00:25:19,789 --> 00:25:24,979
I could easily run hundreds of jails

00:25:22,340 --> 00:25:28,669
where each jail was its own web server

00:25:24,979 --> 00:25:31,279
mysql database whatever if i try to run

00:25:28,669 --> 00:25:35,389
more than two instances a virtual box on

00:25:31,279 --> 00:25:37,519
my laptop things start to slow down so

00:25:35,389 --> 00:25:39,859
pc-bsd because they're trying to make

00:25:37,519 --> 00:25:42,649
things easy graphically for management

00:25:39,859 --> 00:25:45,889
we have utility surprise surprise called

00:25:42,649 --> 00:25:48,470
warden it's used to manage your jails so

00:25:45,889 --> 00:25:50,330
you can go in and create jails in this

00:25:48,470 --> 00:25:53,149
example I happen to have three jails

00:25:50,330 --> 00:25:57,169
running and I've gone into the snapshots

00:25:53,149 --> 00:25:59,599
tab and for each jail this one I have

00:25:57,169 --> 00:26:02,090
this one highlighted I can set a

00:25:59,599 --> 00:26:04,940
snapshot schedule and that can be

00:26:02,090 --> 00:26:08,419
different for each jail on the system so

00:26:04,940 --> 00:26:11,710
it makes it very easy to to backup and

00:26:08,419 --> 00:26:14,269
replicate what's happening in each jail

00:26:11,710 --> 00:26:18,559
so it's one place we can automate

00:26:14,269 --> 00:26:21,200
snapshots in pc-bsd if I'm worried about

00:26:18,559 --> 00:26:24,679
the host system itself whether it's a

00:26:21,200 --> 00:26:27,820
desktop or server our backup utility is

00:26:24,679 --> 00:26:31,549
called life preserver and it uses ZFS

00:26:27,820 --> 00:26:33,379
snapshots exclusively so the first time

00:26:31,549 --> 00:26:36,549
you run life preserver it's going to ask

00:26:33,379 --> 00:26:40,239
you to set up your snapshot schedule on

00:26:36,549 --> 00:26:43,429
you can say off and you want to do that

00:26:40,239 --> 00:26:45,590
the default is actually automatic and

00:26:43,429 --> 00:26:48,019
what it will do is every five minutes

00:26:45,590 --> 00:26:50,749
it'll create a snapshot and then we'll

00:26:48,019 --> 00:26:53,330
do every hour and then every day and

00:26:50,749 --> 00:26:57,409
then every month so it's actually has

00:26:53,330 --> 00:27:00,649
its own preservation schedule you can

00:26:57,409 --> 00:27:03,440
also set up pruning so you can say how

00:27:00,649 --> 00:27:05,090
many snapshots you want to keep or for

00:27:03,440 --> 00:27:07,779
how many days you want to keep your

00:27:05,090 --> 00:27:07,779
snapshots

00:27:13,739 --> 00:27:18,850
typically when you're creating snapshots

00:27:16,450 --> 00:27:21,309
there's a couple of benefits that you

00:27:18,850 --> 00:27:23,409
get so on the local system you're going

00:27:21,309 --> 00:27:26,470
to have the ability to restore things

00:27:23,409 --> 00:27:29,350
and if I replicate my snapshots

00:27:26,470 --> 00:27:32,739
elsewhere I can actually recreate that

00:27:29,350 --> 00:27:34,539
system if it blows up or someone steals

00:27:32,739 --> 00:27:37,029
that our God knows what can happen two

00:27:34,539 --> 00:27:40,299
systems so if we take a look at

00:27:37,029 --> 00:27:42,429
restoring data from snapshots so life

00:27:40,299 --> 00:27:45,159
preserver itself has a file manager

00:27:42,429 --> 00:27:48,849
built into it and i'm going to show you

00:27:45,159 --> 00:27:51,159
that on this system and it allows you to

00:27:48,849 --> 00:27:53,919
easily go through so if i'm taking

00:27:51,159 --> 00:27:56,279
snapshots every five minutes i can

00:27:53,919 --> 00:27:59,080
scroll back in five minute intervals

00:27:56,279 --> 00:28:02,289
find a file that i know i've modified

00:27:59,080 --> 00:28:06,580
and restore that file and i'll show you

00:28:02,289 --> 00:28:09,249
how we do that if I have another system

00:28:06,580 --> 00:28:12,460
available in my network that is running

00:28:09,249 --> 00:28:15,820
ZFS so possibly a free no system or

00:28:12,460 --> 00:28:20,200
another freebsd system i can replicate

00:28:15,820 --> 00:28:23,859
those snapshots there and if my local

00:28:20,200 --> 00:28:27,249
system somehow becomes unusable I can

00:28:23,859 --> 00:28:30,070
start the Installer go look for my

00:28:27,249 --> 00:28:32,979
backup server and say I would like to

00:28:30,070 --> 00:28:36,159
rebuild this system from last Tuesday at

00:28:32,979 --> 00:28:39,580
one-thirty and we can do that i'm going

00:28:36,159 --> 00:28:40,389
to show you some of these so this one

00:28:39,580 --> 00:28:42,429
I'm going to show what's actually

00:28:40,389 --> 00:28:45,159
happening on my system because it's more

00:28:42,429 --> 00:28:47,710
exciting than a screenshot so this one

00:28:45,159 --> 00:28:51,609
is live I apologize that the font is

00:28:47,710 --> 00:28:53,619
small so you can only see so far so this

00:28:51,609 --> 00:28:55,960
system here i'm running the automatic

00:28:53,619 --> 00:28:59,499
schedule so every five minutes is taking

00:28:55,960 --> 00:29:02,139
a snapshot now snapshots think of them

00:28:59,499 --> 00:29:04,690
as what's changed in the last five

00:29:02,139 --> 00:29:06,999
minutes so if nothing has changed

00:29:04,690 --> 00:29:10,570
there's no snapshot to take so it's only

00:29:06,999 --> 00:29:13,119
as I'm editing files on my system up

00:29:10,570 --> 00:29:16,450
here let's see because I can't see what

00:29:13,119 --> 00:29:20,590
I'm doing here so let's see how good I

00:29:16,450 --> 00:29:24,399
am by default it shows the user's home

00:29:20,590 --> 00:29:26,409
directory but I can go into etsy so if

00:29:24,399 --> 00:29:28,359
I've changed a configuration file and I

00:29:26,409 --> 00:29:32,409
don't like my changes i can go back in

00:29:28,359 --> 00:29:35,529
time but if i stick in my home directory

00:29:32,409 --> 00:29:37,899
let's see here so we have a couple of

00:29:35,529 --> 00:29:40,480
ways of looking through snapshots so

00:29:37,899 --> 00:29:46,149
each snapshot in its name will have a

00:29:40,480 --> 00:29:48,849
time stamp and i can go back these are

00:29:46,149 --> 00:29:51,039
typically five-minute increments and i

00:29:48,849 --> 00:29:54,239
can see what's changed on my system if

00:29:51,039 --> 00:29:58,779
that's too slow for me i can also slide

00:29:54,239 --> 00:30:01,299
so this system here earlier this week I

00:29:58,779 --> 00:30:03,460
made a manual snapshot which I can do at

00:30:01,299 --> 00:30:05,679
any point in time and I had a whole

00:30:03,460 --> 00:30:07,809
bunch of stuff and then I said well

00:30:05,679 --> 00:30:09,909
let's clean up some of this stuff I

00:30:07,809 --> 00:30:11,950
don't need it anymore so you'll notice

00:30:09,909 --> 00:30:14,320
the next snapshot that was taken there's

00:30:11,950 --> 00:30:16,179
a little bit less stuff there and as

00:30:14,320 --> 00:30:19,299
I've gone through the week adding stuff

00:30:16,179 --> 00:30:22,840
removing stuff my snapshots have changed

00:30:19,299 --> 00:30:27,099
if I wanted to go back to this point in

00:30:22,840 --> 00:30:30,369
time and say oops i wish i hadn't gotten

00:30:27,099 --> 00:30:35,139
rid of that iso file all i have to do is

00:30:30,369 --> 00:30:37,749
highlight it and click restore this one

00:30:35,139 --> 00:30:40,419
still exists so it's not going to

00:30:37,749 --> 00:30:43,149
overwrite the current copy instead it's

00:30:40,419 --> 00:30:46,809
going to say reversion and so I know

00:30:43,149 --> 00:30:49,779
that this is a reverted copy if I

00:30:46,809 --> 00:30:52,389
decided okay let's go let me close that

00:30:49,779 --> 00:30:57,429
oh it's waiting because it's a large

00:30:52,389 --> 00:30:59,679
pile okay I'll wait a bit longer I kept

00:30:57,429 --> 00:31:02,489
trying to close it guess I should have

00:30:59,679 --> 00:31:02,489
picked a smaller file

00:31:02,989 --> 00:31:09,149
but if I went to a snapshot two days

00:31:06,719 --> 00:31:11,549
later and wanted to restore that same

00:31:09,149 --> 00:31:13,589
file it would call it reversion to and

00:31:11,549 --> 00:31:17,070
then I could do a reversion 3 or

00:31:13,589 --> 00:31:18,869
reversion for so i can get what files

00:31:17,070 --> 00:31:20,519
look at at a point in time so right now

00:31:18,869 --> 00:31:23,549
it's boring because i'm doing a four gig

00:31:20,519 --> 00:31:25,469
file and that was silly me but i just

00:31:23,549 --> 00:31:28,589
wanted to give you an idea of how easy

00:31:25,469 --> 00:31:29,969
it is to actually do that and as I going

00:31:28,589 --> 00:31:32,609
to let me move this out of the way let's

00:31:29,969 --> 00:31:35,009
just throw you down there so that's

00:31:32,609 --> 00:31:38,519
built right into your desktop so it's

00:31:35,009 --> 00:31:40,349
very easy to be able to do that the

00:31:38,519 --> 00:31:43,979
other screen that I want to show you is

00:31:40,349 --> 00:31:48,419
if I've replicated let's see if I get

00:31:43,979 --> 00:31:50,639
this guy back again on this screen if

00:31:48,419 --> 00:31:52,079
I've been replicating my snapshots to

00:31:50,639 --> 00:31:58,379
another system so that's just our

00:31:52,079 --> 00:32:01,589
browser and I find out that the TSA

00:31:58,379 --> 00:32:04,319
stole my laptop or whatever I get home

00:32:01,589 --> 00:32:07,440
it doesn't have to be the same hardware

00:32:04,319 --> 00:32:10,259
so I could go home and say I need to

00:32:07,440 --> 00:32:13,169
restore my system so I just start the

00:32:10,259 --> 00:32:15,779
Installer again I say restore from life

00:32:13,169 --> 00:32:21,269
preserver back up I get my mouse back

00:32:15,779 --> 00:32:24,359
here well there it is it'll start a

00:32:21,269 --> 00:32:26,190
wizard and it will ask me what's the IP

00:32:24,359 --> 00:32:28,949
address of the system holding your

00:32:26,190 --> 00:32:31,649
snapshots alas for my username and

00:32:28,949 --> 00:32:35,159
password and it will give me a drop-down

00:32:31,649 --> 00:32:38,429
menu of all of my snapshots and I can

00:32:35,159 --> 00:32:41,069
say let's restore that system to what

00:32:38,429 --> 00:32:44,729
this system look like tuesday at 130 and

00:32:41,069 --> 00:32:47,029
it will do that you might think that's

00:32:44,729 --> 00:32:47,029
cool

00:32:52,159 --> 00:32:58,409
couple of other benefits we get with ZFS

00:32:55,440 --> 00:33:01,679
so again another one of its design goals

00:32:58,409 --> 00:33:04,679
was let's create a cyst file system

00:33:01,679 --> 00:33:07,470
that's self-healing and part of that

00:33:04,679 --> 00:33:10,379
self-healing is those creation of check

00:33:07,470 --> 00:33:12,990
sums so every time it writes a data

00:33:10,379 --> 00:33:15,480
block it makes a checksum every time it

00:33:12,990 --> 00:33:18,840
reads a data block it double checks and

00:33:15,480 --> 00:33:20,970
verifies that checksum if it's reading a

00:33:18,840 --> 00:33:24,240
data block and the checksum doesn't

00:33:20,970 --> 00:33:26,519
match it will go out looking to see if

00:33:24,240 --> 00:33:29,999
there is another data block with the

00:33:26,519 --> 00:33:33,179
same checksum and if it is it will try

00:33:29,999 --> 00:33:36,360
to correct the data in the incorrect

00:33:33,179 --> 00:33:38,879
disk block so this happens all the time

00:33:36,360 --> 00:33:41,909
as you're using ZFS as you're editing

00:33:38,879 --> 00:33:44,220
your files one of the things that you

00:33:41,909 --> 00:33:47,279
also want to do is schedule something

00:33:44,220 --> 00:33:49,559
known as a scrub so depending upon how

00:33:47,279 --> 00:33:51,570
you're using your data it's quite

00:33:49,559 --> 00:33:53,940
possible you'll have files in your

00:33:51,570 --> 00:33:56,730
system that you just never read or maybe

00:33:53,940 --> 00:33:59,490
a read them once or twice a year what is

00:33:56,730 --> 00:34:01,440
scrub does is it systematically goes

00:33:59,490 --> 00:34:04,919
through every single disk block that's

00:34:01,440 --> 00:34:07,799
used checks to check sums keeps track of

00:34:04,919 --> 00:34:10,349
how many bad check sums it finds and

00:34:07,799 --> 00:34:14,190
tries to correct the ones that it can

00:34:10,349 --> 00:34:17,369
and this is something it is a disk i/o

00:34:14,190 --> 00:34:18,780
intensive so don't do it monday at nine

00:34:17,369 --> 00:34:21,690
o'clock in the morning when everyone's

00:34:18,780 --> 00:34:24,450
logging in schedule it for a time when

00:34:21,690 --> 00:34:26,700
systems not busy and there's no sense

00:34:24,450 --> 00:34:28,800
doing scrubs if you're not going to read

00:34:26,700 --> 00:34:31,169
the status report at the end of the

00:34:28,800 --> 00:34:33,839
scrub because you really do want to see

00:34:31,169 --> 00:34:35,399
did you find any bad disk blocks did you

00:34:33,839 --> 00:34:38,159
have anything that you weren't able to

00:34:35,399 --> 00:34:41,190
correct so this will often be an early

00:34:38,159 --> 00:34:42,720
indication of problematic disks and then

00:34:41,190 --> 00:34:48,000
you can make plans what you're going to

00:34:42,720 --> 00:34:50,399
do from there so on a freenas system as

00:34:48,000 --> 00:34:53,190
soon as you make a pool it automatically

00:34:50,399 --> 00:34:55,079
schedules a scrub for you and that scrub

00:34:53,190 --> 00:34:57,690
is scheduled for every Sunday at

00:34:55,079 --> 00:34:59,550
midnight if that's not a good time for

00:34:57,690 --> 00:35:02,210
the use of your

00:34:59,550 --> 00:35:04,740
system you can go in and change that

00:35:02,210 --> 00:35:06,660
freenas because it's a storage device

00:35:04,740 --> 00:35:09,090
you really do care what's happening with

00:35:06,660 --> 00:35:11,190
your discs we're going to email you if

00:35:09,090 --> 00:35:16,860
there's a problem we're going to have a

00:35:11,190 --> 00:35:19,110
nice feedback in volume status and you

00:35:16,860 --> 00:35:22,680
can type zpool status as well to see

00:35:19,110 --> 00:35:25,470
what's happening and pc-bsd we can use

00:35:22,680 --> 00:35:30,030
life preserver or disk manager to manage

00:35:25,470 --> 00:35:31,650
our scrubs so again in FreeNAS basically

00:35:30,030 --> 00:35:34,860
if you don't like the scrubs schedule

00:35:31,650 --> 00:35:38,180
just open it up and set the day of the

00:35:34,860 --> 00:35:41,790
week and the time you'd like to run it

00:35:38,180 --> 00:35:45,620
pc-bsd if I'm in life preserver I just

00:35:41,790 --> 00:35:48,870
go to my disk tab and start the scrub

00:35:45,620 --> 00:35:51,810
life preserver itself always has a

00:35:48,870 --> 00:35:54,150
status which is green yellow or red and

00:35:51,810 --> 00:35:56,970
it's going to alert you if you had a bad

00:35:54,150 --> 00:36:01,200
scrub if you had a bad replication that

00:35:56,970 --> 00:36:07,770
sort of thing and let's see what we got

00:36:01,200 --> 00:36:10,500
here this is an interesting feature that

00:36:07,770 --> 00:36:12,540
comes with ZFS and it was one of the

00:36:10,500 --> 00:36:15,420
things that when it first came out

00:36:12,540 --> 00:36:17,010
people were waiting for and it was one

00:36:15,420 --> 00:36:19,430
of the things that people very quickly

00:36:17,010 --> 00:36:23,220
found out that they really didn't want

00:36:19,430 --> 00:36:26,370
so deduplication in theory is a great

00:36:23,220 --> 00:36:28,950
idea so the process of deduplication

00:36:26,370 --> 00:36:31,650
make sure that you never have duplicate

00:36:28,950 --> 00:36:34,740
data blocks so it will only write the

00:36:31,650 --> 00:36:38,250
data once I actually asked the guy who

00:36:34,740 --> 00:36:40,050
wrote deduplication why did you write it

00:36:38,250 --> 00:36:44,550
because they don't like deduplication

00:36:40,050 --> 00:36:46,560
themselves and they said sons marketing

00:36:44,550 --> 00:36:48,450
department said it was a feature we had

00:36:46,560 --> 00:36:51,930
to have and that's why they wrote

00:36:48,450 --> 00:36:54,630
deduplication so what the whole gold

00:36:51,930 --> 00:36:57,960
deduplication is to save disk space and

00:36:54,630 --> 00:37:01,440
what we found especially since we now

00:36:57,960 --> 00:37:05,610
have better ZFS compression algorithms

00:37:01,440 --> 00:37:08,580
is typically you'll get as good a disk

00:37:05,610 --> 00:37:11,280
space using compression as using

00:37:08,580 --> 00:37:12,539
deduplication and it's not going to give

00:37:11,280 --> 00:37:15,269
you the overhead

00:37:12,539 --> 00:37:19,380
so the real problem with deduplication

00:37:15,269 --> 00:37:21,419
is it needs to keep tables to keep track

00:37:19,380 --> 00:37:24,449
of what's the contents of each disk

00:37:21,419 --> 00:37:27,719
block and those tables have to fit into

00:37:24,449 --> 00:37:29,579
memory and really bad things happen if

00:37:27,719 --> 00:37:33,900
you run out of memory when you're using

00:37:29,579 --> 00:37:36,359
deduplication so typically we say unless

00:37:33,900 --> 00:37:39,239
you have a lot of memory and you can

00:37:36,359 --> 00:37:42,089
never have enough memory especially

00:37:39,239 --> 00:37:44,729
usually using it for something else try

00:37:42,089 --> 00:37:47,369
compression you'll probably get the goal

00:37:44,729 --> 00:37:49,109
that you want to do for those that

00:37:47,369 --> 00:37:51,539
really want to try it and have lots of

00:37:49,109 --> 00:37:53,519
memory the general rule of thumb is

00:37:51,539 --> 00:37:55,619
don't attempt it unless you have at

00:37:53,519 --> 00:37:59,400
least five gigs of memory per terabyte

00:37:55,619 --> 00:38:05,069
of storage so very heavy memory

00:37:59,400 --> 00:38:08,669
requirements anybody here come from the

00:38:05,069 --> 00:38:10,769
Solaris background view Solaris oh then

00:38:08,669 --> 00:38:13,229
you guys you guys don't know about boot

00:38:10,769 --> 00:38:15,239
environment center so boot environments

00:38:13,229 --> 00:38:16,890
right now are the coolest thing set of

00:38:15,239 --> 00:38:19,229
all out of all the cool features I've

00:38:16,890 --> 00:38:22,439
told you about ZFS boot environments is

00:38:19,229 --> 00:38:26,069
the coolest so the concept of a boot

00:38:22,439 --> 00:38:28,849
environment is that changing things on

00:38:26,069 --> 00:38:31,739
your system should always be a no-risk

00:38:28,849 --> 00:38:35,429
operation you should always be able to

00:38:31,739 --> 00:38:38,640
recover from any type of failure so in a

00:38:35,429 --> 00:38:41,219
boot environment this is something that

00:38:38,640 --> 00:38:44,969
is new for 1002 we've had them before

00:38:41,219 --> 00:38:47,309
but you had to remember to make them now

00:38:44,969 --> 00:38:51,779
we actually do it for you automatically

00:38:47,309 --> 00:38:53,579
so before you apply a system patch so

00:38:51,779 --> 00:38:56,099
there's a new security advisory out you

00:38:53,579 --> 00:38:59,339
need to patch something before you

00:38:56,099 --> 00:39:02,809
upgrade the operating system before you

00:38:59,339 --> 00:39:05,369
upgrade any software pc-bsd will

00:39:02,809 --> 00:39:08,519
automatically take a snapshot of your

00:39:05,369 --> 00:39:12,269
operating system and add it to the grub

00:39:08,519 --> 00:39:14,969
boot manager if something goes wrong all

00:39:12,269 --> 00:39:16,949
you have to do is reboot and pick the

00:39:14,969 --> 00:39:19,469
point of time before you did that

00:39:16,949 --> 00:39:22,109
upgrade and you'll be back exactly to

00:39:19,469 --> 00:39:23,140
where you started so that's something

00:39:22,109 --> 00:39:25,390
that happens on

00:39:23,140 --> 00:39:27,970
medically boot environments are also

00:39:25,390 --> 00:39:30,150
handy for a lot of other things so a lot

00:39:27,970 --> 00:39:32,800
of developers who are in development

00:39:30,150 --> 00:39:35,580
environments maybe you want to have

00:39:32,800 --> 00:39:38,530
different versions of the operating

00:39:35,580 --> 00:39:41,430
system as you're developing your tools

00:39:38,530 --> 00:39:44,770
so before you start making changes

00:39:41,430 --> 00:39:46,990
create a boot environment if you didn't

00:39:44,770 --> 00:39:50,410
like what you did just go back to the

00:39:46,990 --> 00:39:52,390
previous one there are no limitations on

00:39:50,410 --> 00:39:55,690
how many boot environments you can have

00:39:52,390 --> 00:39:59,410
you can make as many as you want what

00:39:55,690 --> 00:40:02,260
pc-bsd is doing especially when it comes

00:39:59,410 --> 00:40:05,230
to patching the system often when

00:40:02,260 --> 00:40:08,230
there's a security patch available they

00:40:05,230 --> 00:40:10,450
come two or three at a time and it will

00:40:08,230 --> 00:40:13,390
actually do a separate boot environment

00:40:10,450 --> 00:40:16,120
for each patch so for example a couple

00:40:13,390 --> 00:40:17,830
weeks ago when heartbleed was out that

00:40:16,120 --> 00:40:21,310
would be a separate boot environment

00:40:17,830 --> 00:40:23,200
than say a different system patch so if

00:40:21,310 --> 00:40:25,150
there's only one patch that did harm to

00:40:23,200 --> 00:40:29,470
your system you can just basically

00:40:25,150 --> 00:40:32,440
revert that for the automated boot

00:40:29,470 --> 00:40:35,020
environments there is an also an

00:40:32,440 --> 00:40:38,320
automatic pruning schedule so by default

00:40:35,020 --> 00:40:40,120
it will keep your last five but you can

00:40:38,320 --> 00:40:42,940
change that to how many you want to show

00:40:40,120 --> 00:40:45,670
in your grub boot manager because nobody

00:40:42,940 --> 00:40:47,500
wants to go through 120 entries and grub

00:40:45,670 --> 00:40:50,500
to find that the particular boot

00:40:47,500 --> 00:40:54,670
environment you want so will prune for

00:40:50,500 --> 00:40:57,220
you so if you're going to manually take

00:40:54,670 --> 00:41:00,430
a boot environment we have a tool which

00:40:57,220 --> 00:41:02,950
is surprisingly called boot manager it

00:41:00,430 --> 00:41:05,650
the system always comes with a default

00:41:02,950 --> 00:41:08,260
boot environment which is the operating

00:41:05,650 --> 00:41:10,480
system as it is now if I want to create

00:41:08,260 --> 00:41:14,260
one I just click Add I give it a name

00:41:10,480 --> 00:41:17,260
and instantaneous instantaneously create

00:41:14,260 --> 00:41:20,080
swamp because it's a snapshot it takes

00:41:17,260 --> 00:41:22,680
milliseconds to create it and it's 0

00:41:20,080 --> 00:41:22,680
bytes in size

00:41:26,120 --> 00:41:32,580
in this example I manually created one

00:41:30,000 --> 00:41:34,320
which I call before upgrade I don't have

00:41:32,580 --> 00:41:37,560
to remember to do that anymore because

00:41:34,320 --> 00:41:40,620
1002 now would do that for me so that's

00:41:37,560 --> 00:41:44,460
one of the really slick features that

00:41:40,620 --> 00:41:48,240
which I find in this release one of the

00:41:44,460 --> 00:41:50,580
exciting features and I think that's all

00:41:48,240 --> 00:41:54,630
I had for the slides so I have a bunch

00:41:50,580 --> 00:41:56,910
of additional resources both pc-bsd and

00:41:54,630 --> 00:42:00,900
freenas have very comprehensive user

00:41:56,910 --> 00:42:04,410
guides pc-bsd it's an icon right on your

00:42:00,900 --> 00:42:07,560
desktop because we do release our guides

00:42:04,410 --> 00:42:09,780
with our software freenas it's in the

00:42:07,560 --> 00:42:13,050
download link for the software the

00:42:09,780 --> 00:42:15,390
version for that version the CFS best

00:42:13,050 --> 00:42:19,620
practices guide is a good overview of

00:42:15,390 --> 00:42:22,410
how ZFS works and for those of you who

00:42:19,620 --> 00:42:26,490
prefer to watch videos becoming a ZFS

00:42:22,410 --> 00:42:30,690
ninja is a good one and again I'll put

00:42:26,490 --> 00:42:32,880
it on the last slide which has the link

00:42:30,690 --> 00:42:36,180
to last week's presentation as well as

00:42:32,880 --> 00:42:39,540
this one so a clf for this one and also

00:42:36,180 --> 00:42:43,910
my contact info did we have any

00:42:39,540 --> 00:42:43,910
questions yes

00:42:49,640 --> 00:43:01,680
so yes so and freenas that's a very

00:42:54,119 --> 00:43:09,900
popular use for the storage device so

00:43:01,680 --> 00:43:12,150
which using VMware using kvm I know we

00:43:09,900 --> 00:43:15,900
do have people who use kvm that are

00:43:12,150 --> 00:43:18,210
using freenas so I don't know if they're

00:43:15,900 --> 00:43:26,790
doing this over I scuzzy or how they're

00:43:18,210 --> 00:43:29,430
doing it though yes till it grows with

00:43:26,790 --> 00:43:34,970
time cret when you have a lot of

00:43:29,430 --> 00:43:38,250
snapshots there's only the last one girl

00:43:34,970 --> 00:43:40,380
no so you're growing / increments of

00:43:38,250 --> 00:43:42,960
time so one of the things you have to be

00:43:40,380 --> 00:43:46,200
careful with especially when you're

00:43:42,960 --> 00:43:48,270
designing your system is ZFS doesn't

00:43:46,200 --> 00:43:50,130
like to run out of disk space so the

00:43:48,270 --> 00:43:52,559
rule of thumb is never go over eighty

00:43:50,130 --> 00:43:54,390
percent so as you need to just add more

00:43:52,559 --> 00:43:58,470
disks to your pool which is a very easy

00:43:54,390 --> 00:44:01,349
thing to do with snapshots it really

00:43:58,470 --> 00:44:05,790
depends upon how often files change on

00:44:01,349 --> 00:44:08,819
your system so one of the things that's

00:44:05,790 --> 00:44:11,130
interesting about ZFS is if you're

00:44:08,819 --> 00:44:13,470
running out of disk space remember to

00:44:11,130 --> 00:44:15,510
turn off your snapshots before you start

00:44:13,470 --> 00:44:17,549
deleting data because you don't ever

00:44:15,510 --> 00:44:21,059
really delete data otherwise you're just

00:44:17,549 --> 00:44:22,829
increasing with more snapshots but the

00:44:21,059 --> 00:44:24,630
overhead typically the overhead that

00:44:22,829 --> 00:44:28,250
people see is when they try to replicate

00:44:24,630 --> 00:44:30,900
and this is something that's going a

00:44:28,250 --> 00:44:32,339
feature that a lot of people can't wait

00:44:30,900 --> 00:44:34,819
to come out and it's supposed to come

00:44:32,339 --> 00:44:38,099
out later this year that first

00:44:34,819 --> 00:44:40,680
replication can be a real pain

00:44:38,099 --> 00:44:43,589
especially if you have problems on your

00:44:40,680 --> 00:44:44,760
network because you don't want that one

00:44:43,589 --> 00:44:46,650
is going to be big because it's

00:44:44,760 --> 00:44:49,140
basically setting your whole pool over

00:44:46,650 --> 00:44:51,290
so the other side can start knowing

00:44:49,140 --> 00:44:54,770
where your points in time are

00:44:51,290 --> 00:44:56,720
and if that gets interrupted during if

00:44:54,770 --> 00:44:59,450
replication gets interrupted what

00:44:56,720 --> 00:45:02,780
currently happens now is the two sides

00:44:59,450 --> 00:45:04,940
are in sync and you can't resume where

00:45:02,780 --> 00:45:07,940
it dropped off so what people are

00:45:04,940 --> 00:45:09,740
waiting for is resumable ZFS send and

00:45:07,940 --> 00:45:12,620
we're supposed to be getting that at the

00:45:09,740 --> 00:45:14,840
end of the year but typically after that

00:45:12,620 --> 00:45:17,120
especially we actually recommend that

00:45:14,840 --> 00:45:19,280
people take snapshots often especially

00:45:17,120 --> 00:45:21,260
if you're replicating because it's less

00:45:19,280 --> 00:45:26,390
data that you have to send over at a

00:45:21,260 --> 00:45:28,430
time but if you do run low on disk space

00:45:26,390 --> 00:45:30,170
turn off snapshotting before you try to

00:45:28,430 --> 00:45:31,790
delete stuff that's where a lot of

00:45:30,170 --> 00:45:34,670
people get confused it says I'm actually

00:45:31,790 --> 00:45:44,000
increasing into space rather than rather

00:45:34,670 --> 00:45:46,130
than decreasing yeah yep so that's

00:45:44,000 --> 00:45:48,800
interesting so one of the things that

00:45:46,130 --> 00:45:51,110
happened was when oracle bought some it

00:45:48,800 --> 00:45:55,160
was an unfortunate time for the open

00:45:51,110 --> 00:45:58,430
source community because son was working

00:45:55,160 --> 00:46:01,880
on encryption for ZFS and it hadn't been

00:45:58,430 --> 00:46:05,120
open sourced yet so the only people in

00:46:01,880 --> 00:46:07,910
the world that had encryption bill into

00:46:05,120 --> 00:46:10,460
ZFS is oracle and we all know Oracle's

00:46:07,910 --> 00:46:12,620
not going to open source that and oracle

00:46:10,460 --> 00:46:14,600
is going to hold that as a feature so

00:46:12,620 --> 00:46:17,450
for the first couple of years after the

00:46:14,600 --> 00:46:19,070
acquisition people were thinking well a

00:46:17,450 --> 00:46:20,840
we shouldn't hold our breath we're not

00:46:19,070 --> 00:46:24,470
going to get anything out or achill but

00:46:20,840 --> 00:46:29,840
what are we going to do now so what both

00:46:24,470 --> 00:46:32,380
freenas and pc-bsd do is use something

00:46:29,840 --> 00:46:35,000
called jelly which is built in a freebsd

00:46:32,380 --> 00:46:36,850
i actually had a question last week's

00:46:35,000 --> 00:46:40,460
where somebody asked about how

00:46:36,850 --> 00:46:44,870
cryptographically secure jelly is so

00:46:40,460 --> 00:46:46,700
jelly is spelt GE li and if you do a man

00:46:44,870 --> 00:46:48,260
jelly it actually describes the whole

00:46:46,700 --> 00:46:50,900
crypto thing because it has undergone

00:46:48,260 --> 00:46:52,490
crypto analysis so if you're in a secure

00:46:50,900 --> 00:46:55,190
environment where that counts you can

00:46:52,490 --> 00:46:57,350
actually read up on that so jelly

00:46:55,190 --> 00:47:01,040
encryption is good for a specific

00:46:57,350 --> 00:47:02,280
purpose so with jelly encryption all of

00:47:01,040 --> 00:47:04,920
your disks have to

00:47:02,280 --> 00:47:07,610
encrypted and the only thing it protects

00:47:04,920 --> 00:47:10,530
you from is someone stealing your box

00:47:07,610 --> 00:47:14,820
because anything that's Shelly encrypted

00:47:10,530 --> 00:47:16,800
as it starts to boot it stops as the

00:47:14,820 --> 00:47:18,600
colonel is loading and unless you know

00:47:16,800 --> 00:47:20,400
the passphrase it's not going to load

00:47:18,600 --> 00:47:22,440
your colonel so it's really good if

00:47:20,400 --> 00:47:24,720
someone steals your disks they're never

00:47:22,440 --> 00:47:26,940
going to get into them what it's not

00:47:24,720 --> 00:47:29,280
good for is once you enter your

00:47:26,940 --> 00:47:32,730
passphrase you're no longer encrypted

00:47:29,280 --> 00:47:35,310
until you shut down the system pc-bsd

00:47:32,730 --> 00:47:37,620
offers a second level of encryption

00:47:35,310 --> 00:47:40,440
because you're starting to get into the

00:47:37,620 --> 00:47:42,690
desktop in the server space so in

00:47:40,440 --> 00:47:46,200
addition to jelly we have something

00:47:42,690 --> 00:47:49,440
called PE FS the personal encryption

00:47:46,200 --> 00:47:52,080
file system that one you have to

00:47:49,440 --> 00:47:54,660
actually search for paths and FreeBSD

00:47:52,080 --> 00:47:56,280
because freebsd has imported it yet

00:47:54,660 --> 00:47:59,340
because it's still waiting for its

00:47:56,280 --> 00:48:01,500
cryptographic analysis so freebsd tends

00:47:59,340 --> 00:48:04,620
to be really anal when it comes to

00:48:01,500 --> 00:48:07,260
cryptography but pc-bsd we're using it

00:48:04,620 --> 00:48:10,230
as early adopters and this one is cool

00:48:07,260 --> 00:48:12,210
from a user perspective so it doesn't

00:48:10,230 --> 00:48:14,820
matter if the disks are encrypted or not

00:48:12,210 --> 00:48:17,340
you can or cannot use jelly but what

00:48:14,820 --> 00:48:21,720
happens is when you boot into a system

00:48:17,340 --> 00:48:23,100
running pecs it's on a per-user basis so

00:48:21,720 --> 00:48:27,090
it's actually the user's home directory

00:48:23,100 --> 00:48:29,160
and if one of the users on a pc bsd

00:48:27,090 --> 00:48:32,490
system checked off the little box that

00:48:29,160 --> 00:48:34,740
said i want paps if anybody does an LS

00:48:32,490 --> 00:48:38,820
of their home directory all they see is

00:48:34,740 --> 00:48:41,310
gobbly and that's really cool now

00:48:38,820 --> 00:48:43,830
what you have to be careful of is if I'm

00:48:41,310 --> 00:48:45,630
logged in so when I go to login if I'm

00:48:43,830 --> 00:48:47,900
using paths it's going to ask me for my

00:48:45,630 --> 00:48:50,850
passphrase so can unencrypted if

00:48:47,900 --> 00:48:52,560
somebody if I go to the bathroom and

00:48:50,850 --> 00:48:54,780
somebody sits down while I'm logged in

00:48:52,560 --> 00:48:58,610
they see all my data so you have to

00:48:54,780 --> 00:49:01,110
remember to log in log out but as far as

00:48:58,610 --> 00:49:03,030
reading the contents of a hard drive but

00:49:01,110 --> 00:49:08,020
the persons not logged in they're not

00:49:03,030 --> 00:49:13,040
going to see anything so we get both yes

00:49:08,020 --> 00:49:15,890
snapshot so basically you take a

00:49:13,040 --> 00:49:18,170
snapshot that you delete a file you take

00:49:15,890 --> 00:49:19,880
another snapshot that file is gone but

00:49:18,170 --> 00:49:22,400
then you download it again or stick it

00:49:19,880 --> 00:49:24,770
in the same spot look then you do

00:49:22,400 --> 00:49:28,400
another snapshot is it can actually have

00:49:24,770 --> 00:49:31,490
two different copies of the same fact of

00:49:28,400 --> 00:49:34,280
file so if I haven't edited the file

00:49:31,490 --> 00:49:36,710
itself I'll say I just restored it or

00:49:34,280 --> 00:49:39,200
whatever so the timestamps going to be

00:49:36,710 --> 00:49:40,970
different and the data blocks where it's

00:49:39,200 --> 00:49:47,000
written will be different but the file

00:49:40,970 --> 00:49:49,370
itself will be the same always because

00:49:47,000 --> 00:49:54,170
it's copy on write it's it's going to

00:49:49,370 --> 00:49:59,750
have to two copies yeah any other

00:49:54,170 --> 00:50:01,540
questions yep for ZFS oh and that's

00:49:59,750 --> 00:50:04,070
something I forgot to mention I actually

00:50:01,540 --> 00:50:05,720
think I miss that slide us towards the

00:50:04,070 --> 00:50:08,470
beginning here because there's actually

00:50:05,720 --> 00:50:12,020
something I wanted to mention on that

00:50:08,470 --> 00:50:15,500
yes I forgot to mention that so open ZFS

00:50:12,020 --> 00:50:19,690
work so this is the foundation for open

00:50:15,500 --> 00:50:22,820
ZFS about two years old now so when

00:50:19,690 --> 00:50:25,760
oracle bought son the the original some

00:50:22,820 --> 00:50:28,910
engineers while elsewhere the ZFS guys I

00:50:25,760 --> 00:50:30,260
never went to Oracle again everything

00:50:28,910 --> 00:50:35,450
was up in the air what's going to happen

00:50:30,260 --> 00:50:38,180
with ZFS so when sun or oracle bought

00:50:35,450 --> 00:50:41,120
some we are at ZFS version 28 and

00:50:38,180 --> 00:50:43,280
Oracle's now at version thodi something

00:50:41,120 --> 00:50:46,940
i haven't really kept up with what

00:50:43,280 --> 00:50:50,420
they're doing so open CFS was the two

00:50:46,940 --> 00:50:52,970
original guys who wrote CFS and you'll

00:50:50,420 --> 00:50:54,710
notice in their URL the name was already

00:50:52,970 --> 00:50:57,560
taken so they had to put in a dash so

00:50:54,710 --> 00:51:00,410
when you go look it up it's opened a CFS

00:50:57,560 --> 00:51:02,810
org they're continuing development full

00:51:00,410 --> 00:51:06,070
time and they've actually created both a

00:51:02,810 --> 00:51:08,810
company and a foundation around it

00:51:06,070 --> 00:51:11,270
they're not the only developers though

00:51:08,810 --> 00:51:14,270
so one of the things they did because

00:51:11,270 --> 00:51:18,180
they needed to differentiate what is the

00:51:14,270 --> 00:51:20,760
open-source ZFS versus oracle ZFS

00:51:18,180 --> 00:51:23,040
so the next open source version was

00:51:20,760 --> 00:51:25,950
called version five thousand I really

00:51:23,040 --> 00:51:28,230
wanted to distance themselves between 30

00:51:25,950 --> 00:51:30,570
whatever and five thousand and they

00:51:28,230 --> 00:51:33,060
switched versioning to something called

00:51:30,570 --> 00:51:35,550
feature flags so because there were a

00:51:33,060 --> 00:51:39,030
lot of open source projects that

00:51:35,550 --> 00:51:42,660
depended and used on you CFS so open

00:51:39,030 --> 00:51:45,570
solaris illumos freebsd it's a lot of

00:51:42,660 --> 00:51:49,320
companies like netapp that are invested

00:51:45,570 --> 00:51:52,460
in CFS they needed to make sure that

00:51:49,320 --> 00:51:55,650
development moving forward would be easy

00:51:52,460 --> 00:51:58,230
would be portable so you wouldn't have

00:51:55,650 --> 00:52:00,210
the next scent of folks doing things

00:51:58,230 --> 00:52:02,880
that didn't work on linux and that

00:52:00,210 --> 00:52:05,970
freebsd had to pour it over so the whole

00:52:02,880 --> 00:52:10,560
point of feature flags is that it's

00:52:05,970 --> 00:52:12,930
usable on any system using ZFS and it's

00:52:10,560 --> 00:52:15,240
up to the developers of that operating

00:52:12,930 --> 00:52:18,390
system to decide which feature flags

00:52:15,240 --> 00:52:21,180
make sense for their users so

00:52:18,390 --> 00:52:22,650
development is moving forward so one of

00:52:21,180 --> 00:52:25,440
the things i want to point out about

00:52:22,650 --> 00:52:28,470
open ZFS if you go to their website it's

00:52:25,440 --> 00:52:31,110
a wiki it sucks their developers it's

00:52:28,470 --> 00:52:33,750
it's own school but there's two things

00:52:31,110 --> 00:52:36,960
that are really interesting there so one

00:52:33,750 --> 00:52:40,740
of them is every month online they have

00:52:36,960 --> 00:52:43,170
a talk to the ZFS developers we're two

00:52:40,740 --> 00:52:45,030
hours you can ask questions any

00:52:43,170 --> 00:52:46,830
questions you want of them and that's

00:52:45,030 --> 00:52:49,620
really cool and they do that every month

00:52:46,830 --> 00:52:52,950
the other thing that's happening is they

00:52:49,620 --> 00:52:55,770
have a summit in North America once a

00:52:52,950 --> 00:52:58,980
year and the next one is the second

00:52:55,770 --> 00:53:03,320
weekend in november whatever that is and

00:52:58,980 --> 00:53:07,740
it's in san jose so if you actually are

00:53:03,320 --> 00:53:09,990
invested in CFS or you want to hear from

00:53:07,740 --> 00:53:13,410
the horse's mouth what's happening with

00:53:09,990 --> 00:53:16,800
ZFS that summit is available for anybody

00:53:13,410 --> 00:53:18,930
to attend and i'll be there because i

00:53:16,800 --> 00:53:20,520
really need to fix our documentation so

00:53:18,930 --> 00:53:24,270
i want to pick the brains and the people

00:53:20,520 --> 00:53:26,460
know the correct answers so but it's so

00:53:24,270 --> 00:53:28,170
for longest time it was in limbo and now

00:53:26,460 --> 00:53:29,400
it's really exciting because we know

00:53:28,170 --> 00:53:33,060
things are moving forward

00:53:29,400 --> 00:53:36,930
word and there is a road map of upcoming

00:53:33,060 --> 00:53:41,060
features the new feature flags and we're

00:53:36,930 --> 00:53:45,240
very aggressive with both pc-bsd and

00:53:41,060 --> 00:53:47,370
freenas as feature flags are created we

00:53:45,240 --> 00:53:49,470
import them in right away because

00:53:47,370 --> 00:53:51,390
especially with freenas we have a lot of

00:53:49,470 --> 00:53:55,620
enterprise customers that can benefit

00:53:51,390 --> 00:53:58,560
from them okay okay I think I've used up

00:53:55,620 --> 00:54:01,400
all my time I will wait time wise okay

00:53:58,560 --> 00:54:01,400
thank you everyone

00:54:39,640 --> 00:54:43,910
your customers rely on your website or

00:54:42,410 --> 00:54:46,279
application if it's slower

00:54:43,910 --> 00:54:49,220
non-responsive it infuriates your users

00:54:46,279 --> 00:54:51,049
and costs you money keeping your

00:54:49,220 --> 00:54:54,550
business critical systems humming along

00:54:51,049 --> 00:54:57,370
requires insight into what they're doing

00:54:54,550 --> 00:54:59,380
your system metrics tell stories stories

00:54:57,370 --> 00:55:01,630
that can reveal performance bottlenecks

00:54:59,380 --> 00:55:03,940
resource limitations and other problems

00:55:01,630 --> 00:55:05,710
but how do you keep an eye on all of

00:55:03,940 --> 00:55:08,320
your systems performance metrics in

00:55:05,710 --> 00:55:11,170
real-time and record this data for later

00:55:08,320 --> 00:55:13,150
analysis enter longview the new way to

00:55:11,170 --> 00:55:15,190
see what's really going on under the

00:55:13,150 --> 00:55:17,290
hood the longview dashboard lets you

00:55:15,190 --> 00:55:19,300
visualize the status of all your systems

00:55:17,290 --> 00:55:22,210
providing you with a bird's-eye view of

00:55:19,300 --> 00:55:25,150
your entire fleet you can sort by cpu

00:55:22,210 --> 00:55:27,610
memory swap processes load and network

00:55:25,150 --> 00:55:30,190
usage click a specific system to access

00:55:27,610 --> 00:55:32,170
its individual dashboard then click and

00:55:30,190 --> 00:55:35,170
drag to zoom in on chokepoints and get

00:55:32,170 --> 00:55:37,180
more detail comprehensive network data

00:55:35,170 --> 00:55:39,880
including inbound and outbound traffic

00:55:37,180 --> 00:55:41,440
is available on the network tab and disk

00:55:39,880 --> 00:55:43,360
rights and free space on the disk

00:55:41,440 --> 00:55:46,210
stabbed while the process Explorer

00:55:43,360 --> 00:55:48,730
displays usage statistics for individual

00:55:46,210 --> 00:55:50,920
processes the system info tab shows

00:55:48,730 --> 00:55:53,170
listening services active connections

00:55:50,920 --> 00:55:55,300
and available updates adding long view

00:55:53,170 --> 00:55:56,980
to a system is easy just click the

00:55:55,300 --> 00:55:59,140
button copy the one line installation

00:55:56,980 --> 00:56:01,570
command then run the command on your

00:55:59,140 --> 00:56:03,280
linux system to complete the process the

00:56:01,570 --> 00:56:05,470
agent will begin collecting data and

00:56:03,280 --> 00:56:07,300
sending it to longview then the graphs

00:56:05,470 --> 00:56:09,880
start rolling

00:56:07,300 --> 00:56:12,250
use longview to gain visibility into

00:56:09,880 --> 00:56:15,990
your servers so when your website or app

00:56:12,250 --> 00:56:15,990

YouTube URL: https://www.youtube.com/watch?v=WbCRXMaxank


