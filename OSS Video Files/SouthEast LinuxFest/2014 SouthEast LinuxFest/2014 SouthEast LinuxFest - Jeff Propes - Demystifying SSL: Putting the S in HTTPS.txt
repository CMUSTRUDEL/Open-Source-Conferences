Title: 2014 SouthEast LinuxFest - Jeff Propes - Demystifying SSL: Putting the S in HTTPS
Publication date: 2015-05-02
Playlist: 2014 SouthEast LinuxFest
Description: 
	2014 SouthEast LinuxFest
Jeff Propes
Demystifying SSL: Putting the S in HTTPS
Captions: 
	00:00:00,000 --> 00:00:05,339
the following presentation was recorded

00:00:02,490 --> 00:00:08,189
the 2014 southeast linux fest in

00:00:05,339 --> 00:00:11,070
charlotte north carolina it is licensed

00:00:08,189 --> 00:00:15,150
under a creative commons license for

00:00:11,070 --> 00:00:18,330
more information visit www.fcn expense

00:00:15,150 --> 00:00:20,310
org the southeast linux fest would like

00:00:18,330 --> 00:00:22,769
to thank the following diamond sponsors

00:00:20,310 --> 00:00:27,990
in 2014 for helping make these videos

00:00:22,769 --> 00:00:31,109
possible hi guys my name is jeff probst

00:00:27,990 --> 00:00:32,520
today we'll be talking at length about a

00:00:31,109 --> 00:00:36,980
topic that's very near and dear to my

00:00:32,520 --> 00:00:39,210
heart openssl yesterday we went over a

00:00:36,980 --> 00:00:41,219
particularly nasty bug that came out in

00:00:39,210 --> 00:00:43,530
april so you gar was recalled the

00:00:41,219 --> 00:00:45,480
heartbleed bug we covered that in depth

00:00:43,530 --> 00:00:47,309
and we left some things unanswered

00:00:45,480 --> 00:00:48,840
because we just didn't have enough time

00:00:47,309 --> 00:00:53,550
a lot of those are you know some of the

00:00:48,840 --> 00:00:55,079
mechanisms behind SSL and HTTPS and all

00:00:53,550 --> 00:00:57,420
those things today we're going to go

00:00:55,079 --> 00:01:00,449
through those we have two sessions lined

00:00:57,420 --> 00:01:04,489
up the first is going to be mostly

00:01:00,449 --> 00:01:07,409
exploring the beginning parts of HTTPS

00:01:04,489 --> 00:01:10,890
what all is involved the theory behind

00:01:07,409 --> 00:01:12,750
it how you might secure a website kind

00:01:10,890 --> 00:01:14,670
of a more base level intermediate level

00:01:12,750 --> 00:01:16,200
stuff the second session we're going to

00:01:14,670 --> 00:01:17,759
kick it up into the highest gear we can

00:01:16,200 --> 00:01:21,509
and we're going to start building

00:01:17,759 --> 00:01:23,850
certificate authorities and yes you can

00:01:21,509 --> 00:01:25,500
build your own certificate authority you

00:01:23,850 --> 00:01:27,420
can do anything you like with the

00:01:25,500 --> 00:01:31,110
software this is the very same software

00:01:27,420 --> 00:01:34,710
that very large companies like GoDaddy

00:01:31,110 --> 00:01:36,119
or global sign or verisign anything like

00:01:34,710 --> 00:01:39,630
that they're all using this same

00:01:36,119 --> 00:01:43,590
software so without further ado let us

00:01:39,630 --> 00:01:46,200
dive in here's what we're going to cover

00:01:43,590 --> 00:01:49,079
today what is ssl really and it's

00:01:46,200 --> 00:01:50,729
probably not what you think it is you

00:01:49,079 --> 00:01:51,979
may have some clue of some parts of it

00:01:50,729 --> 00:01:54,810
will go we're going to clear that up

00:01:51,979 --> 00:01:56,670
we're going to walk through a sample SSL

00:01:54,810 --> 00:02:00,360
transaction and then we're going to dive

00:01:56,670 --> 00:02:04,380
into certificates and how to operate and

00:02:00,360 --> 00:02:07,469
create them so first we have to have a

00:02:04,380 --> 00:02:09,000
working vocabulary there's some seats

00:02:07,469 --> 00:02:10,660
down here in the front you guys want to

00:02:09,000 --> 00:02:12,680
come down

00:02:10,660 --> 00:02:14,720
we have to have a working vocabulary

00:02:12,680 --> 00:02:19,190
before we can have a discussion about

00:02:14,720 --> 00:02:21,740
this so just a couple items SSL is the

00:02:19,190 --> 00:02:24,320
protocol will be discussing today also

00:02:21,740 --> 00:02:26,090
known in a sister protocol as TLS for

00:02:24,320 --> 00:02:27,440
the purposes of these two presentations

00:02:26,090 --> 00:02:30,890
we will treat them as one product

00:02:27,440 --> 00:02:33,590
because they practically are TLS does

00:02:30,890 --> 00:02:40,340
away with some of the unhealthy patterns

00:02:33,590 --> 00:02:43,220
that ssl assumed there we go we are

00:02:40,340 --> 00:02:46,280
talking most specifically about how to

00:02:43,220 --> 00:02:49,940
use SSL with web traffic which is use

00:02:46,280 --> 00:02:52,970
done using this HTTP protocol we're

00:02:49,940 --> 00:02:54,680
going to wrap SSL around HTTP to form

00:02:52,970 --> 00:02:57,050
HTTPS that's what you see at the

00:02:54,680 --> 00:03:00,170
beginning of your URLs when you go to a

00:02:57,050 --> 00:03:01,700
secured website and here at the bottom

00:03:00,170 --> 00:03:05,900
we have the tool we're going to be using

00:03:01,700 --> 00:03:08,570
to implement all these things this is

00:03:05,900 --> 00:03:10,370
directly from the RFC the most recent

00:03:08,570 --> 00:03:12,740
RFC defining what the goal of this

00:03:10,370 --> 00:03:14,510
software is the primary goal of the SSL

00:03:12,740 --> 00:03:17,150
protocol is to provide privacy and

00:03:14,510 --> 00:03:21,800
reliability between two communicating

00:03:17,150 --> 00:03:23,420
applications it's going to give us four

00:03:21,800 --> 00:03:26,180
very important things the first of which

00:03:23,420 --> 00:03:28,700
is authenticity the sender of a message

00:03:26,180 --> 00:03:31,070
a secured message is who he says he is

00:03:28,700 --> 00:03:33,410
that the message cannot be read by

00:03:31,070 --> 00:03:35,030
outside parties in transit that the

00:03:33,410 --> 00:03:38,270
messages were not altered or corrupted

00:03:35,030 --> 00:03:41,630
in transit and if they were corrupted or

00:03:38,270 --> 00:03:43,550
tampered with resend the message the SSL

00:03:41,630 --> 00:03:48,140
protocol gives us the ability with all

00:03:43,550 --> 00:03:51,200
four of these things now most of the

00:03:48,140 --> 00:03:53,300
time when you read up about ssl your

00:03:51,200 --> 00:03:56,540
focus is upon the very beginning stages

00:03:53,300 --> 00:03:58,520
the ssl certificates the public key

00:03:56,540 --> 00:03:59,870
cryptography managing those stupid

00:03:58,520 --> 00:04:02,360
little private keys that i can never

00:03:59,870 --> 00:04:04,610
seem to keep track of that seriously i

00:04:02,360 --> 00:04:06,050
have a bad habit of creating a private

00:04:04,610 --> 00:04:07,370
key and then losing it and then later on

00:04:06,050 --> 00:04:08,480
I need to go create another ssl

00:04:07,370 --> 00:04:11,020
certificate I don't know where the key

00:04:08,480 --> 00:04:14,420
is so we'll talk about that a little bit

00:04:11,020 --> 00:04:15,980
a lot of the focus is on the domain

00:04:14,420 --> 00:04:18,500
names that are behind it again this is

00:04:15,980 --> 00:04:20,540
just one small part of what SSL can do

00:04:18,500 --> 00:04:22,200
but it's also going to dominate our

00:04:20,540 --> 00:04:26,700
focus because it's the most impor

00:04:22,200 --> 00:04:28,770
part and when you have a secured site

00:04:26,700 --> 00:04:30,180
you often have seen this the address bar

00:04:28,770 --> 00:04:32,430
can turn green or you can see the little

00:04:30,180 --> 00:04:33,960
green lock symbol when people think of

00:04:32,430 --> 00:04:37,290
SSL that's normally what they think of

00:04:33,960 --> 00:04:39,000
the green lock which is important but

00:04:37,290 --> 00:04:45,180
again it's only one part of what SSL

00:04:39,000 --> 00:04:48,510
does so the certificate and key pair

00:04:45,180 --> 00:04:49,620
parts that we focus on are at the

00:04:48,510 --> 00:04:52,800
beginning and they're really only for

00:04:49,620 --> 00:04:55,440
two things again the authenticity of the

00:04:52,800 --> 00:04:58,890
message is this server who it says it is

00:04:55,440 --> 00:05:00,840
and can the server and client exchange

00:04:58,890 --> 00:05:03,660
information confidentially at the very

00:05:00,840 --> 00:05:05,330
beginning of the transaction the very

00:05:03,660 --> 00:05:08,580
beginning the public key cryptography

00:05:05,330 --> 00:05:13,680
uses asymmetric encryption which is

00:05:08,580 --> 00:05:15,510
hideously expensive using very large

00:05:13,680 --> 00:05:17,130
three or four hundred digit primes that

00:05:15,510 --> 00:05:19,080
take a long time to compute an even

00:05:17,130 --> 00:05:21,210
longer time to work on it's not

00:05:19,080 --> 00:05:23,670
practical to use asymmetric cryptography

00:05:21,210 --> 00:05:26,400
for the entire communication channel so

00:05:23,670 --> 00:05:29,130
we use it at the very beginning to

00:05:26,400 --> 00:05:31,080
establish a shared key and then we

00:05:29,130 --> 00:05:35,580
switch down into using a much more

00:05:31,080 --> 00:05:37,200
efficient symmetric encryption this is

00:05:35,580 --> 00:05:38,400
an example of public key cryptography

00:05:37,200 --> 00:05:40,830
we're just going to go over it briefly

00:05:38,400 --> 00:05:42,270
if you've never experienced it public

00:05:40,830 --> 00:05:46,320
key cryptography means that you have a

00:05:42,270 --> 00:05:47,940
key pair a private and a public set of

00:05:46,320 --> 00:05:50,670
numbers they work together

00:05:47,940 --> 00:05:52,650
mathematically and you can using using

00:05:50,670 --> 00:05:54,480
either of those keys you can encrypt a

00:05:52,650 --> 00:05:57,780
message and decrypt it with the other

00:05:54,480 --> 00:05:59,880
key it doesn't matter which side of the

00:05:57,780 --> 00:06:03,420
key pair you designate as private or

00:05:59,880 --> 00:06:05,880
public it's two-way it's just important

00:06:03,420 --> 00:06:08,520
that you keep one half of it as private

00:06:05,880 --> 00:06:10,530
so you can send the message out to

00:06:08,520 --> 00:06:13,230
everybody else you can encrypt it with

00:06:10,530 --> 00:06:16,050
your private key and you have published

00:06:13,230 --> 00:06:17,400
your public key so then everybody can

00:06:16,050 --> 00:06:19,170
decrypt the message and know that that

00:06:17,400 --> 00:06:21,440
message came from you it's authentic

00:06:19,170 --> 00:06:24,660
from you because you're the only one in

00:06:21,440 --> 00:06:26,070
that holds that private t likewise if

00:06:24,660 --> 00:06:28,410
someone needs to send a message that can

00:06:26,070 --> 00:06:30,030
only be read by you they can use your

00:06:28,410 --> 00:06:31,920
public key to encrypt the message and

00:06:30,030 --> 00:06:33,900
then you can use your private key to

00:06:31,920 --> 00:06:36,180
decrypt it we use this feature

00:06:33,900 --> 00:06:39,810
to begin the SSL transaction right at

00:06:36,180 --> 00:06:43,139
the beginning so an SSL transaction

00:06:39,810 --> 00:06:45,509
starts with the authenticity step client

00:06:43,139 --> 00:06:47,520
contacts to server and gives it a random

00:06:45,509 --> 00:06:50,009
number we're going to use this random

00:06:47,520 --> 00:06:53,250
number later the service is oh hi and

00:06:50,009 --> 00:06:55,080
responds with its own random number then

00:06:53,250 --> 00:06:56,639
the server says here's who i am and

00:06:55,080 --> 00:06:59,669
gives the client and that's the cell

00:06:56,639 --> 00:07:01,560
certificate for it to chew on now the

00:06:59,669 --> 00:07:03,389
client has to decide at this point if

00:07:01,560 --> 00:07:04,680
you'd actually trust the certificate

00:07:03,389 --> 00:07:07,889
that's been given to it before it goes

00:07:04,680 --> 00:07:10,139
any farther why would you trust or not

00:07:07,889 --> 00:07:12,389
trust a certificate well we're going to

00:07:10,139 --> 00:07:13,710
talk about that later and at length in

00:07:12,389 --> 00:07:16,949
the second part in the second

00:07:13,710 --> 00:07:18,870
presentation you may decide to trust it

00:07:16,949 --> 00:07:22,680
because it's from a company you know

00:07:18,870 --> 00:07:25,260
like variscite or it's been signed by a

00:07:22,680 --> 00:07:27,240
company you know like you're the one you

00:07:25,260 --> 00:07:31,460
work for perhaps you have a certificate

00:07:27,240 --> 00:07:34,139
authority in your place of employment

00:07:31,460 --> 00:07:36,900
sometimes you don't choose not to trust

00:07:34,139 --> 00:07:39,150
it because it looks funny perhaps they

00:07:36,900 --> 00:07:41,400
used md5 for the hashing and you just

00:07:39,150 --> 00:07:43,199
don't trust him d5 and if you are still

00:07:41,400 --> 00:07:47,520
trusting md5 as a hashing algorithm

00:07:43,199 --> 00:07:49,050
let's talk afterwards please maybe you

00:07:47,520 --> 00:07:50,460
don't trust the hashing algorithm maybe

00:07:49,050 --> 00:07:51,810
something doesn't look quite right maybe

00:07:50,460 --> 00:07:54,449
you don't know who issued the

00:07:51,810 --> 00:07:57,900
certificate you don't trust it you make

00:07:54,449 --> 00:08:00,330
that choice right up front so let's say

00:07:57,900 --> 00:08:03,990
you do accept it the next part is you

00:08:00,330 --> 00:08:05,789
exchange keys so the client now is

00:08:03,990 --> 00:08:08,400
responsible for doing a very very large

00:08:05,789 --> 00:08:11,130
number called the premaster key and

00:08:08,400 --> 00:08:14,310
pre-master secret excuse me it encrypts

00:08:11,130 --> 00:08:17,760
this secret with the server's public key

00:08:14,310 --> 00:08:21,060
and sends it over since the server has

00:08:17,760 --> 00:08:23,250
the private side of that key pair it can

00:08:21,060 --> 00:08:24,990
decrypt it so now the only two people in

00:08:23,250 --> 00:08:27,479
the world that know what this pre-master

00:08:24,990 --> 00:08:30,419
secret number is the client and the

00:08:27,479 --> 00:08:31,979
server they then can use those two

00:08:30,419 --> 00:08:34,409
numbers that they shared earlier keep in

00:08:31,979 --> 00:08:37,560
mind that x and y we're sent in the

00:08:34,409 --> 00:08:39,240
clear anybody knows what x and y is but

00:08:37,560 --> 00:08:42,029
only these two know what the pre-master

00:08:39,240 --> 00:08:43,829
secret is using a well-defined algorithm

00:08:42,029 --> 00:08:45,930
both of them use these three numbers to

00:08:43,829 --> 00:08:46,860
calculate a master secret key which is

00:08:45,930 --> 00:08:50,820
used for the rest

00:08:46,860 --> 00:08:52,110
of the ssl transaction at this point we

00:08:50,820 --> 00:08:55,130
are done with the asymmetric

00:08:52,110 --> 00:08:57,300
cryptography phase of the ssl connection

00:08:55,130 --> 00:09:00,470
and we're going to drop down to using

00:08:57,300 --> 00:09:04,380
the far more efficient stream ciphers

00:09:00,470 --> 00:09:06,959
we'll use the master secret key to

00:09:04,380 --> 00:09:08,459
generate other numbers and again they

00:09:06,959 --> 00:09:10,860
are well-defined algorithms and they're

00:09:08,459 --> 00:09:12,720
a little bit dry and long and so we're

00:09:10,860 --> 00:09:14,370
not going to go into those here the

00:09:12,720 --> 00:09:16,230
important thing to note is because only

00:09:14,370 --> 00:09:18,180
these two individuals have all the

00:09:16,230 --> 00:09:20,040
information required only these two

00:09:18,180 --> 00:09:22,529
individuals can be privy to the

00:09:20,040 --> 00:09:26,519
conversation that is going on this

00:09:22,529 --> 00:09:28,079
provides our confidentiality we have

00:09:26,519 --> 00:09:30,149
without the authenticity in the first

00:09:28,079 --> 00:09:33,990
step confidentiality in the second step

00:09:30,149 --> 00:09:35,490
what about the other two well when you

00:09:33,990 --> 00:09:37,110
send a message across SSL you're

00:09:35,490 --> 00:09:41,670
breaking it up into very small packet

00:09:37,110 --> 00:09:45,470
16kb or less the packet is encrypted

00:09:41,670 --> 00:09:48,149
using the master shared key and a

00:09:45,470 --> 00:09:50,250
message authentication code is

00:09:48,149 --> 00:09:53,100
calculated that goes on the end the

00:09:50,250 --> 00:09:56,279
format and the algorithm used for the

00:09:53,100 --> 00:09:58,860
mac is agreed upon in early on in the

00:09:56,279 --> 00:10:01,800
SSL transaction both parties know what's

00:09:58,860 --> 00:10:07,230
going to be coming and so both parties

00:10:01,800 --> 00:10:10,190
can calculate the mac and no did the

00:10:07,230 --> 00:10:14,430
packet make it across as it was expected

00:10:10,190 --> 00:10:16,350
and if it detects say a client sends a

00:10:14,430 --> 00:10:17,880
packet to a server and it was tampered

00:10:16,350 --> 00:10:20,760
with or some of the bits got dropped in

00:10:17,880 --> 00:10:22,560
front in transit then the server

00:10:20,760 --> 00:10:24,120
calculates the mac and says this is

00:10:22,560 --> 00:10:26,430
different than what you said it was i

00:10:24,120 --> 00:10:29,130
don't trust that this message was i was

00:10:26,430 --> 00:10:30,420
received properly and then it can send a

00:10:29,130 --> 00:10:31,949
message back to the client saying i need

00:10:30,420 --> 00:10:34,740
you to resend this packet because it

00:10:31,949 --> 00:10:38,399
wasn't right so this provides us the

00:10:34,740 --> 00:10:39,180
integrity the Tegrity and whatever the

00:10:38,399 --> 00:10:44,910
fourth one is that I've already

00:10:39,180 --> 00:10:47,040
forgotten sorry so now that we

00:10:44,910 --> 00:10:49,140
understand how the SSL transaction is

00:10:47,040 --> 00:10:50,190
proceeding how it operates and how it

00:10:49,140 --> 00:10:52,350
starts we have to talk about

00:10:50,190 --> 00:10:53,790
certificates in fact we're going to be

00:10:52,350 --> 00:10:56,480
talking about certificates for the next

00:10:53,790 --> 00:10:56,480
hour and a half

00:10:56,579 --> 00:11:00,779
a certificate has several important

00:10:58,920 --> 00:11:03,629
piece of information in it namely a

00:11:00,779 --> 00:11:08,279
subject an issuer validity start and end

00:11:03,629 --> 00:11:11,579
date the public key and Indian stuck in

00:11:08,279 --> 00:11:15,290
any extensions let's drop down to the

00:11:11,579 --> 00:11:15,290
command line here and check one out

00:11:18,019 --> 00:11:21,319
there we go

00:11:30,490 --> 00:11:35,470
I have posted online i have some

00:11:33,430 --> 00:11:37,660
resources can you guys read that are

00:11:35,470 --> 00:11:43,380
ready to make this text bigger okay hang

00:11:37,660 --> 00:11:43,380
on I'm really good at that don't worry

00:11:43,800 --> 00:11:55,209
let's see is that big enough to when you

00:11:46,060 --> 00:12:04,029
go 24 let's try 20 that's what I've been

00:11:55,209 --> 00:12:06,790
told no okay so I have in here some

00:12:04,029 --> 00:12:07,930
sample certificates a sample certificate

00:12:06,790 --> 00:12:10,630
signing request we'll talk about that

00:12:07,930 --> 00:12:14,320
later a sample key i generate all these

00:12:10,630 --> 00:12:17,200
last night so we're going to look at

00:12:14,320 --> 00:12:19,930
what this certificate has in it and

00:12:17,200 --> 00:12:21,700
again we will go over this command that

00:12:19,930 --> 00:12:25,089
i'm typing out later i just want to show

00:12:21,700 --> 00:12:27,270
you what a certificate looks like thank

00:12:25,089 --> 00:12:27,270
you

00:12:31,520 --> 00:12:37,130
okay so this is the contents of an x.509

00:12:34,760 --> 00:12:38,660
certificate some of this is really

00:12:37,130 --> 00:12:42,020
important some of this we don't actually

00:12:38,660 --> 00:12:43,400
care about so version number it's really

00:12:42,020 --> 00:12:46,550
important to SSL but we don't care

00:12:43,400 --> 00:12:48,950
serial numbers same thing signature

00:12:46,550 --> 00:12:50,210
algorithm again an important SSL but

00:12:48,950 --> 00:12:55,070
it's it tells us something about the

00:12:50,210 --> 00:12:58,730
certificate the stronger that this and

00:12:55,070 --> 00:13:01,220
you get to see that highlight okay the

00:12:58,730 --> 00:13:04,280
stronger that this is the more trust you

00:13:01,220 --> 00:13:05,600
can have that the certificate is is a

00:13:04,280 --> 00:13:07,250
good strong certificate now if they're

00:13:05,600 --> 00:13:09,080
using md5 here you just take it and run

00:13:07,250 --> 00:13:10,850
away just throw that certificate away

00:13:09,080 --> 00:13:12,590
you ain't touching it they're using

00:13:10,850 --> 00:13:16,490
sha-1 that's pretty common these days

00:13:12,590 --> 00:13:18,590
I've started moving up to SS a sha-1 28

00:13:16,490 --> 00:13:20,270
for a lot of mine and that maybe is a

00:13:18,590 --> 00:13:26,420
bit aggressive but I got scared because

00:13:20,270 --> 00:13:29,510
the NSA is listening okay so here we

00:13:26,420 --> 00:13:30,860
have the issuer and the subject line

00:13:29,510 --> 00:13:33,620
these are probably the two most

00:13:30,860 --> 00:13:35,660
important lines in the ssl certificate

00:13:33,620 --> 00:13:37,730
we'll look at the subject first this is

00:13:35,660 --> 00:13:42,110
the information that I gave to create

00:13:37,730 --> 00:13:46,070
this certificate I told it that i lived

00:13:42,110 --> 00:13:48,500
in US and Dallas that I was belonging to

00:13:46,070 --> 00:13:51,410
a company called internet widgets PTY I

00:13:48,500 --> 00:13:52,790
don't know what that stands for this is

00:13:51,410 --> 00:13:54,980
the probably the most important line

00:13:52,790 --> 00:13:57,050
right here C n stands for common name

00:13:54,980 --> 00:13:59,090
this is what the domain name is that

00:13:57,050 --> 00:14:02,300
relates you'll be getting this ssl

00:13:59,090 --> 00:14:05,360
certificate for this certificate was

00:14:02,300 --> 00:14:06,980
issued by a certificate authority that i

00:14:05,360 --> 00:14:09,470
created a couple months ago for my work

00:14:06,980 --> 00:14:12,050
I worked for a company called mod X we

00:14:09,470 --> 00:14:12,950
do hosting and other things and we want

00:14:12,050 --> 00:14:15,020
to be able to give our clients

00:14:12,950 --> 00:14:17,480
development ssl certificates so they

00:14:15,020 --> 00:14:20,570
could test out functionality so I

00:14:17,480 --> 00:14:23,030
created a certificate authority that

00:14:20,570 --> 00:14:25,210
allowed me to generate development

00:14:23,030 --> 00:14:28,340
certificates with some modicum of

00:14:25,210 --> 00:14:29,840
security and reliability and they

00:14:28,340 --> 00:14:33,200
wouldn't have to rely upon generating

00:14:29,840 --> 00:14:36,530
them themselves or anything like that so

00:14:33,200 --> 00:14:37,880
I've signed this sample certificate with

00:14:36,530 --> 00:14:41,880
the certificate authority that i created

00:14:37,880 --> 00:14:44,280
a couple months ago we see here

00:14:41,880 --> 00:14:46,670
right at the top again I know you can't

00:14:44,280 --> 00:14:49,380
see the highlight but the validity

00:14:46,670 --> 00:14:50,880
states not before not after this is the

00:14:49,380 --> 00:14:53,060
length of time of which the certificate

00:14:50,880 --> 00:14:56,370
will be active after this length of time

00:14:53,060 --> 00:14:58,170
doesn't count and it does go down to the

00:14:56,370 --> 00:15:00,630
second i have actually missed the window

00:14:58,170 --> 00:15:04,730
for using your certificate by about five

00:15:00,630 --> 00:15:07,140
seconds before it's really irritating

00:15:04,730 --> 00:15:08,760
another very important part of the

00:15:07,140 --> 00:15:13,890
certificate that doesn't mean much to us

00:15:08,760 --> 00:15:16,800
is the RSA public key we can see at the

00:15:13,890 --> 00:15:18,870
top that this particular key was 2048

00:15:16,800 --> 00:15:20,400
bits which is a pretty common size I

00:15:18,870 --> 00:15:23,220
wouldn't go less than that when you're

00:15:20,400 --> 00:15:24,990
creating your key you can go more but

00:15:23,220 --> 00:15:27,630
now you're costing more computation time

00:15:24,990 --> 00:15:30,150
it depends on your level of risk which

00:15:27,630 --> 00:15:33,240
are you know willing to tolerate the

00:15:30,150 --> 00:15:34,950
higher or the larger your bit sizes the

00:15:33,240 --> 00:15:37,710
longer it will take to crack using

00:15:34,950 --> 00:15:40,610
normal means but the longer it will take

00:15:37,710 --> 00:15:43,200
to compute every single time you use it

00:15:40,610 --> 00:15:46,950
and down here at the very bottom we have

00:15:43,200 --> 00:15:51,780
some important extensions this one right

00:15:46,950 --> 00:15:54,150
here in particular CA equals false means

00:15:51,780 --> 00:15:56,970
I cannot use this ssl certificate to

00:15:54,150 --> 00:15:59,790
sign other ssl certificates if this were

00:15:56,970 --> 00:16:03,450
a certificate authority sir this would

00:15:59,790 --> 00:16:06,060
be C a true some of this information

00:16:03,450 --> 00:16:08,190
here is vestigial like this Netscape

00:16:06,060 --> 00:16:09,840
cert type and that scaped ahmet has just

00:16:08,190 --> 00:16:14,700
left over in the configuration files

00:16:09,840 --> 00:16:16,500
from back long time ago this is

00:16:14,700 --> 00:16:17,910
important here the authority key

00:16:16,500 --> 00:16:20,940
identifier and the subject key

00:16:17,910 --> 00:16:26,110
identifier we can pull actually you can

00:16:20,940 --> 00:16:28,899
see this at the top there is it

00:16:26,110 --> 00:16:31,209
that's the signature number there's

00:16:28,899 --> 00:16:32,649
basically out here it is we take this

00:16:31,209 --> 00:16:34,540
signature algorithm we produce a

00:16:32,649 --> 00:16:36,600
thumbprint from it and we put it in here

00:16:34,540 --> 00:16:38,980
and the subject key identifier field

00:16:36,600 --> 00:16:41,260
likewise whoever signed the certificate

00:16:38,980 --> 00:16:43,750
did the same when they did the authority

00:16:41,260 --> 00:16:45,820
key identifier this is how he can trace

00:16:43,750 --> 00:16:50,260
the progeny of an SSL certificate

00:16:45,820 --> 00:16:51,790
because they come in trees okay do we

00:16:50,260 --> 00:16:52,810
have any questions or anybody want to

00:16:51,790 --> 00:16:57,839
look at some more stuff on this

00:16:52,810 --> 00:16:57,839
certificate before we move on sir

00:17:03,209 --> 00:17:08,890
exactly that's exactly what this part is

00:17:05,829 --> 00:17:11,579
down here signature algorithm okay oh

00:17:08,890 --> 00:17:13,900
the question was what's to stop us from

00:17:11,579 --> 00:17:16,600
changing the certificate authority flag

00:17:13,900 --> 00:17:19,750
the true just signing away well the

00:17:16,600 --> 00:17:22,540
entirety of the certificate has a mac on

00:17:19,750 --> 00:17:25,299
it and it's been signed by the issuer if

00:17:22,540 --> 00:17:28,720
we make a change to even one bit in this

00:17:25,299 --> 00:17:31,090
entire file the Mac will no longer match

00:17:28,720 --> 00:17:41,950
what the file says and no one will treat

00:17:31,090 --> 00:17:44,370
the certificate is valid sir how does

00:17:41,950 --> 00:17:44,370
that vary

00:17:46,679 --> 00:17:51,100
the question was what is the difference

00:17:49,390 --> 00:17:52,539
how does it look a self-signed

00:17:51,100 --> 00:17:55,120
certificate versus what we're looking at

00:17:52,539 --> 00:17:59,230
now i don't think i have an example

00:17:55,120 --> 00:18:01,090
handy but a self-signed certificate the

00:17:59,230 --> 00:18:03,640
subject and issuer fields will be

00:18:01,090 --> 00:18:06,250
identical because you do not have a

00:18:03,640 --> 00:18:10,539
parent certificate signing your issuer

00:18:06,250 --> 00:18:11,620
is yourself and usually if you use a

00:18:10,539 --> 00:18:13,179
self-signed certificate your browser

00:18:11,620 --> 00:18:14,919
will complain but say it's okay

00:18:13,179 --> 00:18:17,649
everything else looks fine we just don't

00:18:14,919 --> 00:18:19,570
trust this issuer if the issuer is

00:18:17,649 --> 00:18:23,279
yourself that's kind of fun we have any

00:18:19,570 --> 00:18:23,279
other questions before I move on sir

00:18:32,220 --> 00:18:37,000
some clarifications the question was if

00:18:34,750 --> 00:18:39,010
the if the key expires then can we

00:18:37,000 --> 00:18:41,950
change the time roll back the clock and

00:18:39,010 --> 00:18:43,990
make it still valid the key actually

00:18:41,950 --> 00:18:46,389
this the key and the certificate or

00:18:43,990 --> 00:18:47,620
separate components the key remains the

00:18:46,389 --> 00:18:51,460
certificate is the part that expires

00:18:47,620 --> 00:18:53,139
that being said if you order try and

00:18:51,460 --> 00:18:55,510
change again if you were to alter the

00:18:53,139 --> 00:19:00,460
bits in the file to try and say that the

00:18:55,510 --> 00:19:04,409
valid after is actually in 2016 then the

00:19:00,460 --> 00:19:04,409
signature hash would no longer match oh

00:19:04,500 --> 00:19:12,039
I suppose you guys there's nothing

00:19:09,850 --> 00:19:13,149
stopping you from doing that except when

00:19:12,039 --> 00:19:16,080
you send your emails out people were

00:19:13,149 --> 00:19:18,340
like what are you doing in December and

00:19:16,080 --> 00:19:20,169
you're the one that gets to answer that

00:19:18,340 --> 00:19:22,120
question so well I have a certificate

00:19:20,169 --> 00:19:24,429
and I'm just too lazy to regenerate it

00:19:22,120 --> 00:19:25,570
so I keep sending my clock back to

00:19:24,429 --> 00:19:31,559
December and it makes me feel like

00:19:25,570 --> 00:19:31,559
Christmas okay any other questions sir

00:19:32,640 --> 00:19:37,770
I see this one here in browsing in areas

00:19:35,190 --> 00:19:42,930
if the server certificate has expired

00:19:37,770 --> 00:19:44,760
that you saw the ability to mm-hmm at

00:19:42,930 --> 00:19:46,470
any point you can decide I don't care

00:19:44,760 --> 00:19:49,020
what the certificate says I will still

00:19:46,470 --> 00:19:51,240
trust it I don't care that the signature

00:19:49,020 --> 00:19:52,920
hash doesn't match I don't care that I

00:19:51,240 --> 00:19:54,600
don't know that this you were I need a

00:19:52,920 --> 00:19:57,570
secure connection and I'm going to trust

00:19:54,600 --> 00:19:59,670
this anyway the green lock comes about

00:19:57,570 --> 00:20:02,670
because it has been independently

00:19:59,670 --> 00:20:04,050
verified through a large community web

00:20:02,670 --> 00:20:13,800
of trust means that this is a

00:20:04,050 --> 00:20:19,590
trustworthy certificate sir that's

00:20:13,800 --> 00:20:21,120
correct the only thing that changes and

00:20:19,590 --> 00:20:22,980
you guys are actually jumping ahead this

00:20:21,120 --> 00:20:26,490
is great though the only thing that

00:20:22,980 --> 00:20:28,830
changes I'm sorry it line wraps here

00:20:26,490 --> 00:20:32,310
it's got a sea on one side and on the

00:20:28,830 --> 00:20:34,710
other common name that will change so

00:20:32,310 --> 00:20:40,080
where it says self 2014 that'd be just

00:20:34,710 --> 00:20:42,620
an asterisk yes mm-hmm all right we have

00:20:40,080 --> 00:20:42,620
any other questions

00:20:45,030 --> 00:20:47,900
whatever vs

00:20:49,889 --> 00:20:56,710
verisign the question was what is the

00:20:53,309 --> 00:20:59,110
quality of SSL vendors comparison of

00:20:56,710 --> 00:21:01,450
them it's about it's a matter of how

00:20:59,110 --> 00:21:02,980
much risk you're willing to take on how

00:21:01,450 --> 00:21:05,649
much do you trust godaddy will be a

00:21:02,980 --> 00:21:07,600
going concern in two years how much do

00:21:05,649 --> 00:21:09,070
you trust that the other guy verisign

00:21:07,600 --> 00:21:11,019
I'm pretty sure we'll be around in two

00:21:09,070 --> 00:21:19,350
years they've been around for 15 or 20

00:21:11,019 --> 00:21:19,350
years already in this very business okay

00:21:24,520 --> 00:21:29,510
that is a very long anabolic question

00:21:27,980 --> 00:21:33,440
and I would love to speak with you more

00:21:29,510 --> 00:21:35,090
about it later he asked about if a

00:21:33,440 --> 00:21:37,130
client computer had a specific problem

00:21:35,090 --> 00:21:39,650
with an SSL certificate that's starting

00:21:37,130 --> 00:21:41,360
to trail into what if land and i love

00:21:39,650 --> 00:21:43,640
the what if king we're just going to do

00:21:41,360 --> 00:21:45,820
it off-camera unfortunately so we have

00:21:43,640 --> 00:21:55,880
any other questions before we move on

00:21:45,820 --> 00:21:57,980
sir no sir the question was is a

00:21:55,880 --> 00:22:00,560
self-signed certificate any better or

00:21:57,980 --> 00:22:02,000
worse security wise than a typical

00:22:00,560 --> 00:22:05,810
certificate with just a single domain

00:22:02,000 --> 00:22:07,520
name not at all so in fact it may make

00:22:05,810 --> 00:22:09,260
more sense for you to get a wild card if

00:22:07,520 --> 00:22:10,940
you have two or three subdomains and you

00:22:09,260 --> 00:22:12,950
don't want to manage three certificates

00:22:10,940 --> 00:22:15,590
you don't want to pay a vendor for three

00:22:12,950 --> 00:22:17,630
certificates get one wild card there's

00:22:15,590 --> 00:22:19,910
only one thing you have to maintain but

00:22:17,630 --> 00:22:21,140
the flip side of that means you now are

00:22:19,910 --> 00:22:22,340
exposing yourself to a little bit more

00:22:21,140 --> 00:22:24,440
risk because you're using the same

00:22:22,340 --> 00:22:26,660
certificate in multiple places and so

00:22:24,440 --> 00:22:29,420
it's about deciding what's your level of

00:22:26,660 --> 00:22:37,760
risk is what your tolerable to any other

00:22:29,420 --> 00:22:39,860
questions so you have the more places

00:22:37,760 --> 00:22:42,680
that a certificate is used the more

00:22:39,860 --> 00:22:44,390
servers what happens if someone is able

00:22:42,680 --> 00:22:45,800
to break into a server they can get

00:22:44,390 --> 00:22:47,930
access to the private key they can get

00:22:45,800 --> 00:22:52,800
access to the certificate then they can

00:22:47,930 --> 00:22:55,380
masquerade as you so sir

00:22:52,800 --> 00:22:57,300
that as far as self-centered it's going

00:22:55,380 --> 00:22:58,890
the reason that I stopped using them is

00:22:57,300 --> 00:23:01,740
because you end up training your users

00:22:58,890 --> 00:23:04,920
to ignore proper ones that's a very good

00:23:01,740 --> 00:23:07,950
point the comment was he no longer uses

00:23:04,920 --> 00:23:09,870
self-signed certificates because in

00:23:07,950 --> 00:23:11,430
order to use them you have to click

00:23:09,870 --> 00:23:13,050
through you have to say okay I don't

00:23:11,430 --> 00:23:15,300
mind that this certificate isn't valid

00:23:13,050 --> 00:23:18,750
and it trains your users to do that in

00:23:15,300 --> 00:23:28,230
cases when actually need to stop and say

00:23:18,750 --> 00:23:31,340
wow this isn't valid sir generate

00:23:28,230 --> 00:23:34,920
individuals first server and you can

00:23:31,340 --> 00:23:37,680
create one simple easy way a verifiable

00:23:34,920 --> 00:23:43,050
way for a user to import your CH

00:23:37,680 --> 00:23:46,179
interest your ca nope your hash of it

00:23:43,050 --> 00:23:51,390
very important

00:23:46,179 --> 00:23:55,120
this match when you trust me with those

00:23:51,390 --> 00:23:57,430
yeah so the gentleman here commented

00:23:55,120 --> 00:23:58,660
that if you're wanting to use your own

00:23:57,430 --> 00:24:00,010
as its health certificate it's far

00:23:58,660 --> 00:24:02,710
better to create your own certificate

00:24:00,010 --> 00:24:04,240
authority then you do one importation of

00:24:02,710 --> 00:24:06,790
the root certificate and that builds an

00:24:04,240 --> 00:24:08,350
entire tree of trust down from that in

00:24:06,790 --> 00:24:11,520
fact we're going to talk about that very

00:24:08,350 --> 00:24:11,520
thing in the second presentation

00:24:19,409 --> 00:24:24,070
the comment was that there's a danger of

00:24:22,480 --> 00:24:28,240
man-in-the-middle attacks at the point

00:24:24,070 --> 00:24:31,720
of accepting that certificate that's why

00:24:28,240 --> 00:24:33,760
we have the hash verifications someone

00:24:31,720 --> 00:24:36,880
can masquerade you're saying at the

00:24:33,760 --> 00:24:38,799
beginning of an SSL transaction someone

00:24:36,880 --> 00:24:39,820
can masquerade is another server but

00:24:38,799 --> 00:24:41,980
they won't be able to prove the validity

00:24:39,820 --> 00:24:46,150
of it because they they won't have an

00:24:41,980 --> 00:24:47,320
ssl certificate that's signed by the

00:24:46,150 --> 00:24:56,169
valid party and won't have all the

00:24:47,320 --> 00:24:59,770
matching information so that when

00:24:56,169 --> 00:25:01,360
accepting like a self-created CA i would

00:24:59,770 --> 00:25:02,980
go to the computer and do it myself I

00:25:01,360 --> 00:25:05,679
would not trust a user to go and do it

00:25:02,980 --> 00:25:07,000
that way I know now I realize that if

00:25:05,679 --> 00:25:08,520
you've got 10,000 computers you're

00:25:07,000 --> 00:25:11,980
maintaining you probably can't do that

00:25:08,520 --> 00:25:13,659
but I can do a push you know if I'm on

00:25:11,980 --> 00:25:16,090
Windows doing some kind of exchange or

00:25:13,659 --> 00:25:22,090
Buddha login something that pushes the

00:25:16,090 --> 00:25:24,039
certificate out yeah there we go so next

00:25:22,090 --> 00:25:25,840
well I can tell people here's what I

00:25:24,039 --> 00:25:27,580
need you to run and I need you to check

00:25:25,840 --> 00:25:29,020
in do this I need you to stand up raise

00:25:27,580 --> 00:25:32,140
your right arm and swing around three

00:25:29,020 --> 00:25:33,370
times and then shout Eureka that way I

00:25:32,140 --> 00:25:35,280
know you've installed the certificate

00:25:33,370 --> 00:25:38,470
and you've read all of my instructions

00:25:35,280 --> 00:25:39,880
just as an example you guys we're going

00:25:38,470 --> 00:25:41,340
to hop back into the presentation here

00:25:39,880 --> 00:25:49,169
these are all great questions by the way

00:25:41,340 --> 00:25:53,470
where is my presentation that's not it

00:25:49,169 --> 00:25:57,039
I've lost my presentation that is found

00:25:53,470 --> 00:26:00,429
it ok so we covered all the parts of the

00:25:57,039 --> 00:26:02,710
certificate format look the actual

00:26:00,429 --> 00:26:04,679
format of the file itself on the hard

00:26:02,710 --> 00:26:06,460
drive can come in many different forms

00:26:04,679 --> 00:26:07,570
we're just going to breeze through this

00:26:06,460 --> 00:26:11,080
because we're going to be running low on

00:26:07,570 --> 00:26:14,710
time soon the most common that I see is

00:26:11,080 --> 00:26:17,980
called PIM format p.m. it's just a plain

00:26:14,710 --> 00:26:21,909
tasks ASCII rendering of the binary data

00:26:17,980 --> 00:26:23,260
in nsl ssl certificate used by a lot of

00:26:21,909 --> 00:26:25,120
the open source browsers because it's

00:26:23,260 --> 00:26:26,799
simple straightforward easy to

00:26:25,120 --> 00:26:29,320
understand you can manipulate these

00:26:26,799 --> 00:26:30,700
because they're just a ski text but in

00:26:29,320 --> 00:26:32,680
doing so if you miss

00:26:30,700 --> 00:26:35,800
p it you're going to get your

00:26:32,680 --> 00:26:38,440
certificate invalid errors another

00:26:35,800 --> 00:26:40,150
format which is pretty similar is a raw

00:26:38,440 --> 00:26:42,220
binary format of the same information

00:26:40,150 --> 00:26:44,740
that pen has it's called de yard it's

00:26:42,220 --> 00:26:47,020
used mostly by Java I have practically

00:26:44,740 --> 00:26:49,630
no experience with the ER because I have

00:26:47,020 --> 00:26:50,830
very little work with sso in Java and

00:26:49,630 --> 00:26:53,290
I'm very thankful for that factor

00:26:50,830 --> 00:26:55,620
because I hear it's terrible I my

00:26:53,290 --> 00:27:00,640
apologies to anyone who does do that

00:26:55,620 --> 00:27:03,100
also another common format pkcs12 is

00:27:00,640 --> 00:27:05,590
used by windows and I is it is a

00:27:03,100 --> 00:27:07,240
different style of file it's actually a

00:27:05,590 --> 00:27:10,090
container format and allows you to

00:27:07,240 --> 00:27:13,930
contain multiple certificates and keys

00:27:10,090 --> 00:27:16,540
in one file so this is the format used

00:27:13,930 --> 00:27:19,360
by is they are annoying in the fact that

00:27:16,540 --> 00:27:22,930
they don't allow you to import and

00:27:19,360 --> 00:27:25,060
export Pym or de or certificates I think

00:27:22,930 --> 00:27:26,980
it's a windows thing but I could

00:27:25,060 --> 00:27:29,320
speculate all day on that we don't I

00:27:26,980 --> 00:27:31,060
don't really deal with pkcs12 format

00:27:29,320 --> 00:27:32,680
very much except when a client sends me

00:27:31,060 --> 00:27:34,120
a certificate and says here we go I got

00:27:32,680 --> 00:27:37,270
this from godaddy and I'm like that's

00:27:34,120 --> 00:27:38,710
not going to work for us thankfully you

00:27:37,270 --> 00:27:42,940
can convert from one format to another

00:27:38,710 --> 00:27:44,290
relatively easily in general let's stick

00:27:42,940 --> 00:27:45,640
with them because it's easiest to work

00:27:44,290 --> 00:27:49,120
with and that's the one we're going to

00:27:45,640 --> 00:27:50,350
be using here today let's talk about the

00:27:49,120 --> 00:27:52,600
different types of certificates we've

00:27:50,350 --> 00:27:54,130
already covered a lot of this we have

00:27:52,600 --> 00:27:57,190
the standard certificate which you saw

00:27:54,130 --> 00:28:00,940
up here it's just got a single domain

00:27:57,190 --> 00:28:05,140
name a single issuer not self-signed

00:28:00,940 --> 00:28:06,420
nothing special a wild-card certificate

00:28:05,140 --> 00:28:09,370
was mentioned by a gentleman over here

00:28:06,420 --> 00:28:11,140
the first part of the domain is replaced

00:28:09,370 --> 00:28:14,920
with an asterisk which means you can use

00:28:11,140 --> 00:28:17,710
any sub domain you wish so I use

00:28:14,920 --> 00:28:20,560
throughout this presentation an example

00:28:17,710 --> 00:28:21,910
domain of grim wat r e if I wanted to

00:28:20,560 --> 00:28:24,760
create a wild card for that it would

00:28:21,910 --> 00:28:28,990
just be asterisk grim wanted are you and

00:28:24,760 --> 00:28:33,840
I could use that for WWE could use that

00:28:28,990 --> 00:28:36,130
for self 2014 2013 whatever I wanted

00:28:33,840 --> 00:28:38,140
subject alternate name what happens if

00:28:36,130 --> 00:28:40,210
you have more than one domain name and

00:28:38,140 --> 00:28:41,760
you have an entity that's responding

00:28:40,210 --> 00:28:45,180
form several domain names

00:28:41,760 --> 00:28:47,070
well there is an extension to the x.509

00:28:45,180 --> 00:28:49,440
format that lets you put more than one

00:28:47,070 --> 00:28:50,820
domain name on a certificate it's called

00:28:49,440 --> 00:28:51,900
subject alternate name we're going to

00:28:50,820 --> 00:28:55,200
look at a little bit that configuration

00:28:51,900 --> 00:28:56,910
later it's terribly useful it's also a

00:28:55,200 --> 00:29:00,140
little more irritating to sit up to

00:28:56,910 --> 00:29:00,140
normal sir

00:29:05,910 --> 00:29:10,580
five domains

00:29:08,230 --> 00:29:12,480
you had to provide those at the time

00:29:10,580 --> 00:29:15,780
service general

00:29:12,480 --> 00:29:17,910
yes that the whoever is signing your

00:29:15,780 --> 00:29:20,429
certificate has to know what all of this

00:29:17,910 --> 00:29:23,880
all the domains are now if you're using

00:29:20,429 --> 00:29:25,830
a wild card that covers everything but

00:29:23,880 --> 00:29:27,419
let's this you would use a septic

00:29:25,830 --> 00:29:29,910
ultimate aim let's say you have your

00:29:27,419 --> 00:29:33,630
selling widgets and you've got widget

00:29:29,910 --> 00:29:35,340
euphoria calm and widgets are us calm

00:29:33,630 --> 00:29:37,530
and you don't want to have to maintain

00:29:35,340 --> 00:29:39,450
two certificates you get a single

00:29:37,530 --> 00:29:41,340
certificate with two subject alternate

00:29:39,450 --> 00:29:44,100
names both of those domains on there and

00:29:41,340 --> 00:29:46,650
if you've got a really nice certificate

00:29:44,100 --> 00:29:48,600
authority you can do wild cards on those

00:29:46,650 --> 00:29:50,340
although I don't often see a wild card

00:29:48,600 --> 00:29:58,740
subject alternate name certificate

00:29:50,340 --> 00:30:01,620
that's pretty rare sir yes you can

00:29:58,740 --> 00:30:03,120
choose to do that the response was that

00:30:01,620 --> 00:30:05,669
you can choose to use subject alternate

00:30:03,120 --> 00:30:09,809
names to do a couple specifically

00:30:05,669 --> 00:30:11,850
enumerated subdomains mail dot wwfd p

00:30:09,809 --> 00:30:15,980
dot if you're using ftp let's talk

00:30:11,850 --> 00:30:15,980
afterwards sir

00:30:26,080 --> 00:30:35,660
yes okay so the question was if we have

00:30:32,870 --> 00:30:39,410
just a center domain food calm and we

00:30:35,660 --> 00:30:42,610
have one sub domain WWE are directing

00:30:39,410 --> 00:30:45,020
traffic on both of those to the website

00:30:42,610 --> 00:30:47,740
unfortunately because we're at the

00:30:45,020 --> 00:30:51,380
beginning we said that ssl wraps around

00:30:47,740 --> 00:30:55,580
https therefore the ssl layer happens

00:30:51,380 --> 00:30:58,910
before https gets going as a result of

00:30:55,580 --> 00:31:01,310
this if you don't have all of the names

00:30:58,910 --> 00:31:03,800
that you're going to use potentially for

00:31:01,310 --> 00:31:05,380
the site on your certificate then you

00:31:03,800 --> 00:31:09,850
may get a certificate validity error

00:31:05,380 --> 00:31:13,880
even if you're redirecting food com to

00:31:09,850 --> 00:31:16,040
WWF you calm if you go to food calm and

00:31:13,880 --> 00:31:18,430
the certificate says it should be WWF

00:31:16,040 --> 00:31:21,430
you on your browser will throw an error

00:31:18,430 --> 00:31:21,430
sir

00:31:27,259 --> 00:31:32,009
yeah it has to the question was can you

00:31:29,639 --> 00:31:35,009
use a patchy redirect or engine X

00:31:32,009 --> 00:31:38,759
redirect to do it you have to use a DNS

00:31:35,009 --> 00:31:40,799
of some kind or you have to get it in

00:31:38,759 --> 00:31:42,960
the certificate because the redirect

00:31:40,799 --> 00:31:46,320
happens after the ssl connection is

00:31:42,960 --> 00:31:47,820
completed so it doesn't know at the time

00:31:46,320 --> 00:31:49,200
the answer cell is happening it doesn't

00:31:47,820 --> 00:32:05,460
know that the domains will match up

00:31:49,200 --> 00:32:10,080
eventually sir the user goes to sell

00:32:05,460 --> 00:32:12,110
that redirects HTS and your successors

00:32:10,080 --> 00:32:15,870
we're going to

00:32:12,110 --> 00:32:17,550
that's correct he was stating i'm sorry

00:32:15,870 --> 00:32:20,070
i wasn't clear on that if you're staying

00:32:17,550 --> 00:32:22,770
in the HTTP world you can redirect using

00:32:20,070 --> 00:32:25,890
a patch here engine X all you like you

00:32:22,770 --> 00:32:30,150
can even redirect from non HTTP pardon

00:32:25,890 --> 00:32:32,550
on HTTPS over to secure HTTPS it's only

00:32:30,150 --> 00:32:35,310
if you're starting in the secure HTTPS

00:32:32,550 --> 00:32:37,890
you cannot use a web server redirect

00:32:35,310 --> 00:32:41,960
take care of that we have any other

00:32:37,890 --> 00:32:41,960
questions sir

00:32:46,870 --> 00:32:53,990
symbol

00:32:49,850 --> 00:32:53,990
each domain

00:32:55,380 --> 00:32:59,910
I'm going to disagree with you here not

00:32:58,290 --> 00:33:02,790
because I'm being mean even though I am

00:32:59,910 --> 00:33:04,970
mean sometimes in the last five years a

00:33:02,790 --> 00:33:07,620
new technology called subject name

00:33:04,970 --> 00:33:09,990
intersubject 8s and I I thought I know

00:33:07,620 --> 00:33:12,960
it as s and I means that we are now

00:33:09,990 --> 00:33:15,870
supplying a domain field at the time of

00:33:12,960 --> 00:33:19,950
our beginning our ssl transaction and so

00:33:15,870 --> 00:33:22,620
we can actually use now of the same IP

00:33:19,950 --> 00:33:33,150
for many different ssl encrypted domains

00:33:22,620 --> 00:33:35,730
now all of XP the browser's the actual

00:33:33,150 --> 00:33:40,200
ssl security stack doesn't support S&I

00:33:35,730 --> 00:33:42,480
so if you have XP users I'm sorry about

00:33:40,200 --> 00:33:46,280
a year and a half I decided it was time

00:33:42,480 --> 00:33:48,930
to cut those guys loose sorry XP users I

00:33:46,280 --> 00:33:50,880
think there's a couple old embedded

00:33:48,930 --> 00:33:54,480
devices and a couple older cell phones

00:33:50,880 --> 00:33:55,860
that also don't do sni but i would say

00:33:54,480 --> 00:33:59,820
everything it's been produced in the

00:33:55,860 --> 00:34:02,460
last six years does support it and it's

00:33:59,820 --> 00:34:05,040
the solution for us going forward it was

00:34:02,460 --> 00:34:07,470
introduced because a lot of I extra eye

00:34:05,040 --> 00:34:10,710
peas were being used and wasted because

00:34:07,470 --> 00:34:13,440
you had three sites on a server and they

00:34:10,710 --> 00:34:15,300
were all very low load but because they

00:34:13,440 --> 00:34:17,340
all had SSL each of them had to have

00:34:15,300 --> 00:34:21,690
their own IP and this contributed to our

00:34:17,340 --> 00:34:24,480
current ipv4 address exhaustion so they

00:34:21,690 --> 00:34:29,070
introduced sni to help fix that any

00:34:24,480 --> 00:34:30,750
other questions ok extended validation

00:34:29,070 --> 00:34:33,300
we're not going to touching this very

00:34:30,750 --> 00:34:36,210
much in the process of getting your

00:34:33,300 --> 00:34:37,860
certificate signed by a certificate

00:34:36,210 --> 00:34:39,990
authority they will do some fact

00:34:37,860 --> 00:34:42,450
checking in to make sure that who you

00:34:39,990 --> 00:34:45,300
say you are is who you actually are and

00:34:42,450 --> 00:34:47,580
in an extended validation certificate

00:34:45,300 --> 00:34:49,080
they do far more fact checking than

00:34:47,580 --> 00:34:50,790
normal they will actually go and look up

00:34:49,080 --> 00:34:53,250
is this a business where is this

00:34:50,790 --> 00:34:54,570
business registered are they visible

00:34:53,250 --> 00:34:57,030
according to the local Chamber of

00:34:54,570 --> 00:34:58,920
Commerce do they have a business card

00:34:57,030 --> 00:35:02,280
they have contacts they do a very

00:34:58,920 --> 00:35:05,160
exhaustive search technically you're not

00:35:02,280 --> 00:35:06,390
offering anything extra other than more

00:35:05,160 --> 00:35:09,480
validity that's why

00:35:06,390 --> 00:35:11,609
called extended validation it's the same

00:35:09,480 --> 00:35:13,980
exact certificate with an extra flag set

00:35:11,609 --> 00:35:16,500
that says man we spend a lot of money

00:35:13,980 --> 00:35:19,019
and time investigating this guy and we

00:35:16,500 --> 00:35:21,000
know he's bulletproof some companies

00:35:19,019 --> 00:35:23,160
like that they considered an advantage

00:35:21,000 --> 00:35:24,690
over other companies that don't have

00:35:23,160 --> 00:35:26,609
them they're willing to spend the extra

00:35:24,690 --> 00:35:28,559
money to say man we are bulletproof look

00:35:26,609 --> 00:35:30,779
at this verisign says that we have

00:35:28,559 --> 00:35:36,450
extended validation and that's worth it

00:35:30,779 --> 00:35:38,940
to them the ssl certificate model is

00:35:36,450 --> 00:35:42,450
built upon trust you're peddling trusts

00:35:38,940 --> 00:35:44,369
from the top to the bottom each ticket

00:35:42,450 --> 00:35:45,839
is issued by a parent we've been calling

00:35:44,369 --> 00:35:47,670
it a certificate authority or an

00:35:45,839 --> 00:35:49,619
intermediate or root any number of words

00:35:47,670 --> 00:35:52,130
we could use there we'll discuss that

00:35:49,619 --> 00:35:54,779
more length in the second presentation

00:35:52,130 --> 00:35:57,809
and again if you trust the judgment of

00:35:54,779 --> 00:35:59,760
the parent certificates owner so if you

00:35:57,809 --> 00:36:02,369
come to me and say can I will you please

00:35:59,760 --> 00:36:06,180
sign my certificate and you trust me

00:36:02,369 --> 00:36:07,799
then you will likely have allowed line

00:36:06,180 --> 00:36:09,750
certificate authority that you saw

00:36:07,799 --> 00:36:11,819
earlier that mod x root certificate

00:36:09,750 --> 00:36:14,539
authority you'll have added that to your

00:36:11,819 --> 00:36:16,920
accepted certificates and any

00:36:14,539 --> 00:36:21,390
certificate that i sign you will trust

00:36:16,920 --> 00:36:24,000
so if he has also accepted me as a valid

00:36:21,390 --> 00:36:27,269
and quality certificate authority then

00:36:24,000 --> 00:36:29,940
your certificate signed by me will be

00:36:27,269 --> 00:36:33,289
valid for him it's a whole trust model

00:36:29,940 --> 00:36:35,430
and it's based on parentage in a tree

00:36:33,289 --> 00:36:36,839
this breaks down when we talking about

00:36:35,430 --> 00:36:39,029
self-signed certificates we've mentioned

00:36:36,839 --> 00:36:41,849
it a couple times with a subject and

00:36:39,029 --> 00:36:43,109
issuer are the same person there the

00:36:41,849 --> 00:36:45,180
trust is do you just trust that

00:36:43,109 --> 00:36:46,589
individual you don't have a tree you

00:36:45,180 --> 00:36:50,630
don't have any other information you

00:36:46,589 --> 00:36:52,559
just have is that individual trustworthy

00:36:50,630 --> 00:36:54,119
we've already talked about a lot of this

00:36:52,559 --> 00:36:55,589
stuff so you guys have been asking some

00:36:54,119 --> 00:36:56,970
great questions but you've been tearing

00:36:55,589 --> 00:36:57,960
chunks out of my presentation so we're

00:36:56,970 --> 00:37:00,509
going to zip through the next couple

00:36:57,960 --> 00:37:02,940
slides here well here's a good one

00:37:00,509 --> 00:37:05,460
change of certificates are usually

00:37:02,940 --> 00:37:07,890
assembled in three parts you have a root

00:37:05,460 --> 00:37:10,349
certificate we're going backwards here a

00:37:07,890 --> 00:37:14,339
root certificate which is protected like

00:37:10,349 --> 00:37:15,990
Fort Knox it is as good as gold it's the

00:37:14,339 --> 00:37:17,309
one that you used to sign intermediate

00:37:15,990 --> 00:37:19,650
certificates which do all the real work

00:37:17,309 --> 00:37:19,830
so you want to keep this thing protected

00:37:19,650 --> 00:37:21,360
if

00:37:19,830 --> 00:37:24,300
anyone gets access to your root

00:37:21,360 --> 00:37:26,340
certificate your public key your son

00:37:24,300 --> 00:37:28,440
that means they can sign anything and

00:37:26,340 --> 00:37:31,560
because you're a trusted individual

00:37:28,440 --> 00:37:34,200
you're a trusted vendor of certificates

00:37:31,560 --> 00:37:36,900
if your root certificate gets out

00:37:34,200 --> 00:37:38,970
yourself your entire business is gone a

00:37:36,900 --> 00:37:40,830
code pages last week it's just up and

00:37:38,970 --> 00:37:48,680
disappeared that's what will happen to

00:37:40,830 --> 00:37:51,540
you I'm sorry mmm that just happened

00:37:48,680 --> 00:37:53,130
okay gentlemen over here say that this

00:37:51,540 --> 00:37:55,200
actually happened to a Belgian

00:37:53,130 --> 00:37:57,330
certificate authority that some hacker

00:37:55,200 --> 00:38:00,090
got in and got a hold of their root

00:37:57,330 --> 00:38:04,790
certificate and key and no one trusted

00:38:00,090 --> 00:38:04,790
them anymore you're selling trust sir

00:38:15,620 --> 00:38:23,520
you could the the statement was what's

00:38:22,020 --> 00:38:25,020
to stop a person from being on a

00:38:23,520 --> 00:38:27,480
physical premises of wherever the

00:38:25,020 --> 00:38:29,850
certificate is signed and just sign

00:38:27,480 --> 00:38:31,890
another one right there there's many

00:38:29,850 --> 00:38:33,420
different checks built in if you are an

00:38:31,890 --> 00:38:36,390
actual certificate authority and you're

00:38:33,420 --> 00:38:38,040
selling trust then you will use what's

00:38:36,390 --> 00:38:41,490
called a hardware security mechanism and

00:38:38,040 --> 00:38:42,780
you won't be storing your SSL

00:38:41,490 --> 00:38:46,050
certificate just kind of randomly on a

00:38:42,780 --> 00:38:47,670
hard drive you'll be storing in the HSM

00:38:46,050 --> 00:38:49,320
you'll probably have that locked inside

00:38:47,670 --> 00:38:50,940
a vault with an air gap and a couple

00:38:49,320 --> 00:38:53,040
other things it's that important I mean

00:38:50,940 --> 00:38:55,500
you spend millions of dollars to secure

00:38:53,040 --> 00:38:58,880
your root certificate because the whole

00:38:55,500 --> 00:38:58,880
thing folds if you don't

00:39:02,180 --> 00:39:09,890
maybe a three-letter organization could

00:39:04,650 --> 00:39:12,330
get a copy with my certificate probably

00:39:09,890 --> 00:39:13,770
but you're the end user at that point

00:39:12,330 --> 00:39:15,300
your certificate has been signed by

00:39:13,770 --> 00:39:18,000
somebody else that is a good point

00:39:15,300 --> 00:39:19,500
though if you're generating root

00:39:18,000 --> 00:39:21,510
certificate or certificate authorities

00:39:19,500 --> 00:39:23,250
are doing anything fun like that it's

00:39:21,510 --> 00:39:25,170
not a good idea to leave it out on a

00:39:23,250 --> 00:39:27,720
server that's accessible by the internet

00:39:25,170 --> 00:39:29,430
for the purposes of this demonstration I

00:39:27,720 --> 00:39:31,710
have created a certificate authority

00:39:29,430 --> 00:39:33,060
here and it's on this laptop after it's

00:39:31,710 --> 00:39:34,770
done I will revoke all the certificates

00:39:33,060 --> 00:39:38,940
do not even think about trying to talk

00:39:34,770 --> 00:39:41,100
it out but you want to keep keep in mind

00:39:38,940 --> 00:39:44,190
that anything can be gotten anywhere I

00:39:41,100 --> 00:39:45,600
know it sounds paranoid but just if you

00:39:44,190 --> 00:39:47,460
keep that mindset then you'll have

00:39:45,600 --> 00:39:51,770
enough paranoia to keep your certificate

00:39:47,460 --> 00:39:51,770
authority safe sir

00:39:56,319 --> 00:40:00,940
that's correct the route would be your

00:39:58,309 --> 00:40:00,940
depth involved

00:40:08,760 --> 00:40:12,140
is recite something else

00:40:12,490 --> 00:40:16,420
that is a perfect leading question he

00:40:14,770 --> 00:40:18,340
was asking if you have your root

00:40:16,420 --> 00:40:20,380
certificate air-gapped and locked away

00:40:18,340 --> 00:40:23,080
where no one can ever get to it how do

00:40:20,380 --> 00:40:25,360
you use it well what you do is you sign

00:40:23,080 --> 00:40:27,430
an intermediate certificate in which

00:40:25,360 --> 00:40:29,320
you're assuming some risk by keeping

00:40:27,430 --> 00:40:31,510
that intermediate certificate in a place

00:40:29,320 --> 00:40:33,250
where you can get to it every so often

00:40:31,510 --> 00:40:35,470
when you need a new intermediate

00:40:33,250 --> 00:40:38,290
certificate you go trot into the the

00:40:35,470 --> 00:40:40,540
vault forty feet underground past the

00:40:38,290 --> 00:40:42,430
air gap and you on that system that it's

00:40:40,540 --> 00:40:44,110
on create a new intermediate certificate

00:40:42,430 --> 00:40:45,550
you then bring that intermediate

00:40:44,110 --> 00:40:47,890
certificate back out into the light of

00:40:45,550 --> 00:40:51,990
day and you use that certificate for

00:40:47,890 --> 00:40:51,990
your business to answer your question

00:40:59,230 --> 00:41:03,609
the comment was at when doing so you

00:41:01,990 --> 00:41:04,840
would have to you would invalidate the

00:41:03,609 --> 00:41:07,570
other certificates that you may have

00:41:04,840 --> 00:41:09,490
it's actually not correct you can have

00:41:07,570 --> 00:41:11,970
many different certificates signed by

00:41:09,490 --> 00:41:11,970
one root

00:41:19,660 --> 00:41:23,510
suggesting those other ones should go

00:41:22,070 --> 00:41:27,530
away

00:41:23,510 --> 00:41:31,040
no business what you were hoping

00:41:27,530 --> 00:41:32,840
mediator or the rotation then anything

00:41:31,040 --> 00:41:37,220
Shawn but intermediate is now on

00:41:32,840 --> 00:41:38,930
trusting okay that makes sense so the

00:41:37,220 --> 00:41:42,020
statement is we've come to a conclusion

00:41:38,930 --> 00:41:43,520
census when you revoke an intermediate

00:41:42,020 --> 00:41:45,470
certificate all the certificates that

00:41:43,520 --> 00:41:47,510
it's signed underneath it become revoked

00:41:45,470 --> 00:41:55,970
as well it has to be that way because

00:41:47,510 --> 00:41:57,680
it's a tree of trust and sir that's

00:41:55,970 --> 00:41:59,600
correct an intermediate certificate is

00:41:57,680 --> 00:42:01,760
an intermediate certificate authority

00:41:59,600 --> 00:42:03,440
any of these certificates could be

00:42:01,760 --> 00:42:06,170
certificate authorities if they're the

00:42:03,440 --> 00:42:08,780
right flag is set like we saw earlier so

00:42:06,170 --> 00:42:10,880
we have created lower security higher

00:42:08,780 --> 00:42:13,340
risk intermediate certificates that we

00:42:10,880 --> 00:42:15,050
are more willing to yank if need be now

00:42:13,340 --> 00:42:16,250
we still want to protect them as much as

00:42:15,050 --> 00:42:18,290
possible they will still be in a

00:42:16,250 --> 00:42:20,690
hardware security mechanism it will

00:42:18,290 --> 00:42:23,510
still be in a secure place probably

00:42:20,690 --> 00:42:25,460
armed guards lasers poison gas the whole

00:42:23,510 --> 00:42:27,530
nine yards because you're signing a

00:42:25,460 --> 00:42:28,940
bunch of ssl certificates with this one

00:42:27,530 --> 00:42:30,650
and you want to make sure that you don't

00:42:28,940 --> 00:42:32,660
have to revoke every single one of those

00:42:30,650 --> 00:42:36,130
and reissue them that's really expensive

00:42:32,660 --> 00:42:36,130
and you don't want to have to do that

00:42:43,000 --> 00:42:46,279
that's correct the flag if you wanna go

00:42:45,259 --> 00:42:49,519
back and go look at that again real

00:42:46,279 --> 00:42:51,769
quick I think it'd be helpful let's go

00:42:49,519 --> 00:42:55,880
look at that again I'll look at still up

00:42:51,769 --> 00:42:57,440
I pointed out a flag right here this is

00:42:55,880 --> 00:43:01,160
the top line and this particular

00:42:57,440 --> 00:43:04,309
certificate it says CA is false if this

00:43:01,160 --> 00:43:07,549
flag is instead set to true then I can

00:43:04,309 --> 00:43:10,549
use this certificate to sign child

00:43:07,549 --> 00:43:13,039
certificates and yes if you're thinking

00:43:10,549 --> 00:43:15,250
maybe I can craft a certificate and send

00:43:13,039 --> 00:43:17,839
it to a vendor with that flag enabled

00:43:15,250 --> 00:43:19,490
they look for that in fact they probably

00:43:17,839 --> 00:43:20,480
may choose to never do business with you

00:43:19,490 --> 00:43:21,890
again or at least they'll give you a

00:43:20,480 --> 00:43:24,259
slap on the wrist and say that was silly

00:43:21,890 --> 00:43:26,690
we're not going to sign that and in fact

00:43:24,259 --> 00:43:29,390
built-in to openssl are some mechanisms

00:43:26,690 --> 00:43:37,279
to prevent the copying of those kinds of

00:43:29,390 --> 00:43:39,200
extensions across ok ok so we discussed

00:43:37,279 --> 00:43:40,759
root and intermediate we know an

00:43:39,200 --> 00:43:42,349
end-user certificate that's the ones

00:43:40,759 --> 00:43:46,549
that we typically handle every single

00:43:42,349 --> 00:43:48,230
day right and at this point here is what

00:43:46,549 --> 00:43:52,400
we discussed just a little bit ago how

00:43:48,230 --> 00:43:56,960
are we doing on time 18 minutes great

00:43:52,400 --> 00:43:59,509
thank you let's get into how to actually

00:43:56,960 --> 00:44:01,190
do this thing we're going to operate the

00:43:59,509 --> 00:44:03,710
openssl binary and do a whole bunch of

00:44:01,190 --> 00:44:06,349
useful stuff with it it's not just a

00:44:03,710 --> 00:44:09,849
library it's a binary executable that we

00:44:06,349 --> 00:44:12,200
can use to create keys we can create

00:44:09,849 --> 00:44:14,210
certificates we can sign certificates we

00:44:12,200 --> 00:44:16,759
can revoke them you can manage them we

00:44:14,210 --> 00:44:19,069
can do anything we want and it's really

00:44:16,759 --> 00:44:21,500
simple it's just open SSL and then a

00:44:19,069 --> 00:44:23,769
command that openssl understands and

00:44:21,500 --> 00:44:26,720
then some options that go along with it

00:44:23,769 --> 00:44:28,460
like an example this is what we ran to

00:44:26,720 --> 00:44:31,910
look at the contents of that certificate

00:44:28,460 --> 00:44:37,069
just now we are running the openssl

00:44:31,910 --> 00:44:39,859
command the x.509 command within a sorry

00:44:37,069 --> 00:44:43,970
that wasn't supposed to be the x.509

00:44:39,859 --> 00:44:46,039
command says to openssl i want to read

00:44:43,970 --> 00:44:48,319
the contents of this file as if it were

00:44:46,039 --> 00:44:51,920
an x.509 certificate show me what's in

00:44:48,319 --> 00:44:52,570
there in this case the default is for it

00:44:51,920 --> 00:44:54,940
to always

00:44:52,570 --> 00:44:56,530
print out a binary copy of the

00:44:54,940 --> 00:44:58,810
certificate we don't care about that we

00:44:56,530 --> 00:45:03,880
already have that so I've specified an

00:44:58,810 --> 00:45:05,770
option of no out sorry and then I've

00:45:03,880 --> 00:45:08,350
also specially specified the option of

00:45:05,770 --> 00:45:10,960
text which says convert this digital

00:45:08,350 --> 00:45:13,840
format into something we can read if we

00:45:10,960 --> 00:45:14,770
didn't specify text we would get a bunch

00:45:13,840 --> 00:45:18,010
of gobbledygook that doesn't mean

00:45:14,770 --> 00:45:24,730
anything to us oh we can do some other

00:45:18,010 --> 00:45:26,620
things such as I just want to look at

00:45:24,730 --> 00:45:28,950
the subject and issuer of this

00:45:26,620 --> 00:45:28,950
certificate

00:45:33,460 --> 00:45:38,440
okay so here instead of printing the

00:45:36,580 --> 00:45:40,270
entirety well that's really ugly I

00:45:38,440 --> 00:45:42,130
apologize let's do that again there we

00:45:40,270 --> 00:45:43,510
go instead of printing the entirety of

00:45:42,130 --> 00:45:46,660
everything in a certificate I've printed

00:45:43,510 --> 00:45:49,300
just the subject and the issuer I can

00:45:46,660 --> 00:45:51,730
print just the validity I can print just

00:45:49,300 --> 00:45:53,859
the hash I can print just the public key

00:45:51,730 --> 00:45:55,359
modulus and you can use this if you're

00:45:53,859 --> 00:46:03,010
trying to do some script ability or

00:45:55,359 --> 00:46:04,440
something like that so here's a couple

00:46:03,010 --> 00:46:09,130
of our base commands that will be using

00:46:04,440 --> 00:46:11,830
rec stands for request new request when

00:46:09,130 --> 00:46:13,540
you go to create a ssl certificate you

00:46:11,830 --> 00:46:17,080
have to first create a certificate

00:46:13,540 --> 00:46:19,180
signing request it's basically an empty

00:46:17,080 --> 00:46:20,560
data structure with the information that

00:46:19,180 --> 00:46:23,760
you filled in and is ready and waiting

00:46:20,560 --> 00:46:27,880
to receive the authority of the signing

00:46:23,760 --> 00:46:30,190
certificate or that you're going to if

00:46:27,880 --> 00:46:32,619
we want to create a new public key or a

00:46:30,190 --> 00:46:35,920
new key pair we can use the gen RSA

00:46:32,619 --> 00:46:37,420
command x509 we've already used a couple

00:46:35,920 --> 00:46:40,750
times it shows information about an

00:46:37,420 --> 00:46:42,369
existing certificate and CA will use

00:46:40,750 --> 00:46:44,650
that extensively in the second

00:46:42,369 --> 00:46:46,450
presentation if you want to sign

00:46:44,650 --> 00:46:49,750
somebody else's certificate we use this

00:46:46,450 --> 00:46:51,940
command here so there's some common

00:46:49,750 --> 00:46:55,720
options you may see used almost all the

00:46:51,940 --> 00:46:57,310
time openssl is acting as a filter

00:46:55,720 --> 00:47:00,550
you're giving it some input and it's

00:46:57,310 --> 00:47:03,580
giving you some output you can specify

00:47:00,550 --> 00:47:05,170
using fatheri directors through your

00:47:03,580 --> 00:47:08,530
standard in a standard out if you wish I

00:47:05,170 --> 00:47:10,390
generally prefer to use dash in or dash

00:47:08,530 --> 00:47:12,790
out it's a little bit cleaner and you

00:47:10,390 --> 00:47:14,950
end up you may end up with some data you

00:47:12,790 --> 00:47:17,500
don't expect if you're using redirection

00:47:14,950 --> 00:47:21,849
so you'll see this dash in or dash out

00:47:17,500 --> 00:47:23,380
commonly you may see dash New quite

00:47:21,849 --> 00:47:25,240
frequently if you're creating a new key

00:47:23,380 --> 00:47:27,460
if you're creating a new certificate

00:47:25,240 --> 00:47:29,260
signing request if you're creating a new

00:47:27,460 --> 00:47:31,119
self signed certificate the new option

00:47:29,260 --> 00:47:32,260
is used designate hey we're going to be

00:47:31,119 --> 00:47:35,680
doing something different than normal

00:47:32,260 --> 00:47:37,839
and almost every single operation you

00:47:35,680 --> 00:47:41,410
might use openssl for in this situation

00:47:37,839 --> 00:47:44,560
requires a key so you give it the key

00:47:41,410 --> 00:47:46,760
file with this option here a lot of

00:47:44,560 --> 00:47:48,320
these have a lot of very strange options

00:47:46,760 --> 00:47:50,900
some of them not so strange some of them

00:47:48,320 --> 00:47:52,820
are like what in the heck is that so you

00:47:50,900 --> 00:47:55,190
can use dash dash help to get a full

00:47:52,820 --> 00:48:05,300
listing of everything you can do let's

00:47:55,190 --> 00:48:07,490
go check that one out that's marvelous I

00:48:05,300 --> 00:48:09,190
don't know why it's doing it I think my

00:48:07,490 --> 00:48:16,810
screen is too big for this to work well

00:48:09,190 --> 00:48:16,810
so let's just do this oh I know why yes

00:48:17,200 --> 00:48:22,190
it's putting it to standard error there

00:48:19,640 --> 00:48:24,950
we go oh it doesn't know that option

00:48:22,190 --> 00:48:26,750
help so we have a whole bunch of

00:48:24,950 --> 00:48:28,310
potential options here that may or may

00:48:26,750 --> 00:48:30,680
not be useful to you at the time you're

00:48:28,310 --> 00:48:32,330
invoking this command this is an

00:48:30,680 --> 00:48:34,130
invaluable thing when you just can't

00:48:32,330 --> 00:48:36,470
remember the specific invocation of a

00:48:34,130 --> 00:48:40,190
thing use this first and refresh your

00:48:36,470 --> 00:48:42,140
memory so here I can print a serial

00:48:40,190 --> 00:48:45,320
number the subject hash issuer hashed

00:48:42,140 --> 00:48:47,840
all of the hashes subject issue or email

00:48:45,320 --> 00:48:50,120
start date end date purpose I can put

00:48:47,840 --> 00:48:51,440
all these individual information using

00:48:50,120 --> 00:48:52,700
this command there's a whole bunch of

00:48:51,440 --> 00:48:55,610
stuff in here that we just don't care

00:48:52,700 --> 00:48:56,990
about later on we may care about it when

00:48:55,610 --> 00:49:03,530
we start getting into the deeper parts

00:48:56,990 --> 00:49:04,640
of how certificate authorities work so

00:49:03,530 --> 00:49:06,290
now let's get into how we're actually

00:49:04,640 --> 00:49:07,970
going to do this we're going to use all

00:49:06,290 --> 00:49:11,330
the knowledge we've just discussed we're

00:49:07,970 --> 00:49:13,790
going to create a new certificate we

00:49:11,330 --> 00:49:15,530
have to create a key file first then we

00:49:13,790 --> 00:49:18,590
use that to create a certificate signing

00:49:15,530 --> 00:49:20,210
request and then we submit that

00:49:18,590 --> 00:49:21,890
certificate signing request to our

00:49:20,210 --> 00:49:23,740
vendor which in this case I will be

00:49:21,890 --> 00:49:26,270
acting as both the client and the vendor

00:49:23,740 --> 00:49:28,220
the vendor looks over the certificate

00:49:26,270 --> 00:49:29,900
signing request and says hmm okay I

00:49:28,220 --> 00:49:32,390
agree with that you're a trustworthy

00:49:29,900 --> 00:49:34,660
fellow I'll sign your key I'll sign your

00:49:32,390 --> 00:49:37,970
certificate and returns it back to you

00:49:34,660 --> 00:49:40,580
you get back an ssl certificate signed

00:49:37,970 --> 00:49:42,440
by the issue you have hung on to your

00:49:40,580 --> 00:49:44,480
private key and you'll need both of

00:49:42,440 --> 00:49:47,180
those for later installation into your

00:49:44,480 --> 00:49:48,530
web server now one of the things I like

00:49:47,180 --> 00:49:49,790
to do this you don't have to do this but

00:49:48,530 --> 00:49:52,040
it makes things a lot easier especially

00:49:49,790 --> 00:49:55,220
when you're juggling lots of keys name

00:49:52,040 --> 00:49:57,230
them all something similar so when I was

00:49:55,220 --> 00:49:59,390
testing making a key for the website

00:49:57,230 --> 00:50:02,390
that this presentation is hosted on

00:49:59,390 --> 00:50:04,819
named all of my files with domain name

00:50:02,390 --> 00:50:10,430
dot whatever they are so self czekam

00:50:04,819 --> 00:50:12,079
Wanda are you ki CSR GRT and it doesn't

00:50:10,430 --> 00:50:14,119
seem like much but when you've got four

00:50:12,079 --> 00:50:15,619
certificates in five keys and you don't

00:50:14,119 --> 00:50:17,029
know which goes to which that gets

00:50:15,619 --> 00:50:18,619
really irritating to try and figure it

00:50:17,029 --> 00:50:21,079
out so save yourself some time and use a

00:50:18,619 --> 00:50:24,799
naming scheme like this so we're gonna

00:50:21,079 --> 00:50:26,420
go and generate a new private key ah we

00:50:24,799 --> 00:50:34,880
need to discuss this before we do when

00:50:26,420 --> 00:50:37,670
you generate a private key sir that

00:50:34,880 --> 00:50:39,859
would be wise I generally as long as I

00:50:37,670 --> 00:50:41,210
have a domain separated up by domain

00:50:39,859 --> 00:50:43,010
I'll just look at the certificate and

00:50:41,210 --> 00:50:47,230
see when the validity ends and that

00:50:43,010 --> 00:50:48,920
informs me what I need I have had some

00:50:47,230 --> 00:50:50,240
revocations and other things that needed

00:50:48,920 --> 00:50:51,349
to track where would have been useful to

00:50:50,240 --> 00:51:01,940
have the date because then the dates

00:50:51,349 --> 00:51:03,890
don't match anymore the question was

00:51:01,940 --> 00:51:05,779
when you go to renew and ssl certificate

00:51:03,890 --> 00:51:07,700
after it's expired you can reuse the

00:51:05,779 --> 00:51:10,490
same key yes that's correct the key

00:51:07,700 --> 00:51:13,130
never expires as long as the key is

00:51:10,490 --> 00:51:15,049
still confidential it's valid to be used

00:51:13,130 --> 00:51:16,700
and even if it's not confidential you

00:51:15,049 --> 00:51:20,019
can still use that key no one will tell

00:51:16,700 --> 00:51:20,019
you not to it's just not a wise idea

00:51:20,470 --> 00:51:32,720
so when you create a key reason that's a

00:51:31,100 --> 00:51:34,940
good question he stated is there a

00:51:32,720 --> 00:51:36,770
better question would be is there a

00:51:34,940 --> 00:51:38,870
reason to not generate a new key when

00:51:36,770 --> 00:51:41,480
your generate and new CSR honestly I

00:51:38,870 --> 00:51:43,700
always do with them at the same time if

00:51:41,480 --> 00:51:45,920
someone has compromised your public your

00:51:43,700 --> 00:51:48,500
private key somehow and you don't know

00:51:45,920 --> 00:51:50,480
about it we using that same key on a new

00:51:48,500 --> 00:51:52,370
certificate would be problematic you're

00:51:50,480 --> 00:51:54,130
already having to create a csr you might

00:51:52,370 --> 00:51:57,050
as well create a new key file as well

00:51:54,130 --> 00:51:59,660
that's a very good point when you create

00:51:57,050 --> 00:52:01,580
a key file you have an option to encrypt

00:51:59,660 --> 00:52:03,590
that key file and in normal operation

00:52:01,580 --> 00:52:06,230
like for the certificate authority i

00:52:03,590 --> 00:52:07,460
have here I keep my keys encrypted who

00:52:06,230 --> 00:52:11,000
knows if someone else gets their hands

00:52:07,460 --> 00:52:13,310
on it but if you're using this ssl

00:52:11,000 --> 00:52:14,660
certificate with the web browser no one

00:52:13,310 --> 00:52:17,450
is going to be sitting there at the

00:52:14,660 --> 00:52:18,830
console when someone restarts apache to

00:52:17,450 --> 00:52:21,800
be able to type in the password for your

00:52:18,830 --> 00:52:24,830
key therefore if you're using the ssl

00:52:21,800 --> 00:52:26,210
certificate and an automated operation

00:52:24,830 --> 00:52:29,270
like a web server you need to use an

00:52:26,210 --> 00:52:31,300
unencrypted formal let's go do that real

00:52:29,270 --> 00:52:31,300
quick

00:52:34,390 --> 00:52:38,289
in Council access so with the patching

00:52:36,730 --> 00:52:40,900
you have to use the system be asked

00:52:38,289 --> 00:52:43,750
passport thing and with netta next we're

00:52:40,900 --> 00:52:45,789
screwed because there's an engine X has

00:52:43,750 --> 00:52:47,680
been a way of taking a command to grab

00:52:45,789 --> 00:52:50,289
the password and you don't get to

00:52:47,680 --> 00:52:54,819
council access from the start of damen

00:52:50,289 --> 00:52:56,260
and so engine exhales so doug has

00:52:54,819 --> 00:53:00,220
pointed out that if you're using launch

00:52:56,260 --> 00:53:03,130
dr engine excuse group sorry that that's

00:53:00,220 --> 00:53:04,720
my that's my summary sorry in general if

00:53:03,130 --> 00:53:07,029
you're if you're deploying your assert

00:53:04,720 --> 00:53:09,339
into a web server environment don't

00:53:07,029 --> 00:53:11,470
encrypt your key it will be pain and

00:53:09,339 --> 00:53:13,420
peril and you'll be upset and then

00:53:11,470 --> 00:53:14,740
you'll call me and I'll be upset because

00:53:13,420 --> 00:53:17,980
I'll be busy drinking when you call me

00:53:14,740 --> 00:53:22,089
and I won't want to be interrupted so

00:53:17,980 --> 00:53:27,099
let's generate a new key we're going to

00:53:22,089 --> 00:53:28,569
generate a non encrypted key actually no

00:53:27,099 --> 00:53:29,859
I think to generate not encrypted I

00:53:28,569 --> 00:53:33,819
don't have to specify anything that's

00:53:29,859 --> 00:53:36,880
right what domain are we going to do

00:53:33,819 --> 00:53:45,309
this for someone call it a domain what

00:53:36,880 --> 00:53:48,220
was that happy puppies okay we now have

00:53:45,309 --> 00:53:49,509
a very short key it's only 512 bits long

00:53:48,220 --> 00:53:52,480
because I didn't tell it what size the

00:53:49,509 --> 00:53:55,059
default key size if you don't tell

00:53:52,480 --> 00:53:57,069
openssl is only 512 bits lon do you see

00:53:55,059 --> 00:54:00,579
that at the bottom there that's not long

00:53:57,069 --> 00:54:03,940
enough so when you do your key don't do

00:54:00,579 --> 00:54:05,170
like I did and forget an option we're

00:54:03,940 --> 00:54:06,789
going to delete that key we're going to

00:54:05,170 --> 00:54:08,710
do it again and every time I create a

00:54:06,789 --> 00:54:11,319
key i'm spending entropy and randomness

00:54:08,710 --> 00:54:15,329
on my system which is costly we'll talk

00:54:11,319 --> 00:54:15,329
about that next next presentation sir

00:54:16,670 --> 00:54:21,290
yes until that gets tapped and then

00:54:19,609 --> 00:54:23,569
depending on how you have your system

00:54:21,290 --> 00:54:31,760
settings it may block until it on taps

00:54:23,569 --> 00:54:35,270
or it will move to you random yes in

00:54:31,760 --> 00:54:36,680
fact let's go look at that that's a very

00:54:35,270 --> 00:54:38,450
good question the question was is there

00:54:36,680 --> 00:54:43,480
a way to use a hardware generator

00:54:38,450 --> 00:54:43,480
instead and we can see here oops

00:54:47,369 --> 00:54:52,259
I like this that's a good idea i'll do

00:54:49,440 --> 00:54:57,990
that in line when i'm finished let's see

00:54:52,259 --> 00:55:01,440
here here we go towards the bottom we

00:54:57,990 --> 00:55:03,480
see an option here dash engine if we

00:55:01,440 --> 00:55:04,950
wish to use an external hardware

00:55:03,480 --> 00:55:09,839
mechanism sorry i'll see if i can boost

00:55:04,950 --> 00:55:12,779
that their engines near the top now so

00:55:09,839 --> 00:55:14,759
you can see it better if i have an

00:55:12,779 --> 00:55:15,900
external hardware engine I've actually

00:55:14,759 --> 00:55:17,099
never used one of these I've long wanted

00:55:15,900 --> 00:55:18,450
to but they're a little bit more

00:55:17,099 --> 00:55:21,690
expensive than I'm willing to do for a

00:55:18,450 --> 00:55:24,480
hobby you only buy one of these if

00:55:21,690 --> 00:55:25,769
you're serious about things or if you

00:55:24,480 --> 00:55:27,269
just have way too much money and like

00:55:25,769 --> 00:55:28,950
playing around with it if you do then

00:55:27,269 --> 00:55:30,869
let's talk after the presentation please

00:55:28,950 --> 00:55:35,089
because I got a lot of projects we could

00:55:30,869 --> 00:55:38,039
discuss but here we see an option for

00:55:35,089 --> 00:55:39,990
specifying a and a different engine to

00:55:38,039 --> 00:55:42,150
do the randomness possibly a hard to

00:55:39,990 --> 00:55:44,579
layer device hardly possibly a different

00:55:42,150 --> 00:55:50,579
software device whatever you like so

00:55:44,579 --> 00:55:52,589
let's see do we create our key was it

00:55:50,579 --> 00:56:02,130
happy puppies would you come up with

00:55:52,589 --> 00:56:06,059
that no that's not right text whoops

00:56:02,130 --> 00:56:07,380
using the one come in there we go here

00:56:06,059 --> 00:56:09,539
we go now we get to look at the contents

00:56:07,380 --> 00:56:13,319
the private key we see are the key pair

00:56:09,539 --> 00:56:16,019
excuse me we see a private key here we

00:56:13,319 --> 00:56:17,940
see a public part of it and here it's

00:56:16,019 --> 00:56:20,670
two of the prime numbers that we use to

00:56:17,940 --> 00:56:22,980
create the key a lot of stuff in here

00:56:20,670 --> 00:56:25,319
there's a whole lot of math involved as

00:56:22,980 --> 00:56:27,029
a very fantastic reading to be had it's

00:56:25,319 --> 00:56:30,079
a joy to learn how r SI works and it's

00:56:27,029 --> 00:56:33,210
really amazing to see asymmetric

00:56:30,079 --> 00:56:34,589
cryptography and action is just really

00:56:33,210 --> 00:56:37,230
long and dense and we don't have time to

00:56:34,589 --> 00:56:39,329
cover here so this is the contents of

00:56:37,230 --> 00:56:41,880
the key here's all the parts both public

00:56:39,329 --> 00:56:44,670
and private they go into doing your

00:56:41,880 --> 00:56:46,019
encryption we now have a key we looked

00:56:44,670 --> 00:56:48,329
at it we verify it looks pretty sweet

00:56:46,019 --> 00:56:51,269
I'm thinking that key looks great let's

00:56:48,329 --> 00:56:52,650
use it and create something else we're

00:56:51,269 --> 00:56:54,799
now create a new certificate signing

00:56:52,650 --> 00:56:54,799
request

00:56:55,250 --> 00:57:01,850
we're going to tell it to use the key we

00:56:57,050 --> 00:57:07,730
just created and we're going to put it

00:57:01,850 --> 00:57:11,180
out to happy puppies dessert apologize

00:57:07,730 --> 00:57:13,910
this is at the bottom of the screen if I

00:57:11,180 --> 00:57:15,770
could raise it up somehow i would so

00:57:13,910 --> 00:57:18,080
we're going to specify some information

00:57:15,770 --> 00:57:22,360
metadata information for the certificate

00:57:18,080 --> 00:57:25,130
we're in the US in North Carolina

00:57:22,360 --> 00:57:30,890
specifically in Charlotte we're at the

00:57:25,130 --> 00:57:33,650
southeast linux best at self 2014 and

00:57:30,890 --> 00:57:38,420
the common name for us is happy puppies

00:57:33,650 --> 00:57:41,900
com is that correct Wow like that will

00:57:38,420 --> 00:57:43,970
be immortalized forever so now we have

00:57:41,900 --> 00:57:46,670
just generated a certificate signing

00:57:43,970 --> 00:57:47,960
request with all the information I just

00:57:46,670 --> 00:57:50,000
put in and I recognize it's a big

00:57:47,960 --> 00:57:51,650
jumbled up here let's look at it a

00:57:50,000 --> 00:57:56,060
little cleaner format did anybody get

00:57:51,650 --> 00:58:02,870
their pictures let's do this wreck out

00:57:56,060 --> 00:58:04,850
text csr here we go this looks

00:58:02,870 --> 00:58:07,090
suspiciously like the CRT we looked at

00:58:04,850 --> 00:58:10,730
earlier only a couple things are missing

00:58:07,090 --> 00:58:13,580
there's no issuer there's no issue or

00:58:10,730 --> 00:58:16,070
hash a lot of really important data

00:58:13,580 --> 00:58:17,390
missing you cannot use this file to sign

00:58:16,070 --> 00:58:20,060
certificates you can't use this file to

00:58:17,390 --> 00:58:21,560
do sort of SSL transactions this is only

00:58:20,060 --> 00:58:24,800
you might call it in chemistry a

00:58:21,560 --> 00:58:28,340
precursor this is the file that you give

00:58:24,800 --> 00:58:29,900
to your vendor and they sign they look

00:58:28,340 --> 00:58:31,730
at this to review and say okay you're

00:58:29,900 --> 00:58:33,890
happy puppies calm you're in Charlotte

00:58:31,730 --> 00:58:36,440
you must be at this really strange

00:58:33,890 --> 00:58:38,240
conference okay I know who that is and

00:58:36,440 --> 00:58:40,820
they'll sign it we're running very long

00:58:38,240 --> 00:58:44,530
time so I'm going to zip through the

00:58:40,820 --> 00:58:44,530
rest of this i'm going to go over to lie

00:58:46,300 --> 00:58:52,030
self CA

00:58:48,960 --> 00:58:54,329
I'm going to sign this certificate that

00:58:52,030 --> 00:58:54,329
i just created

00:59:03,900 --> 00:59:13,799
why did I do this long path happy

00:59:09,539 --> 00:59:24,720
puppies dot csr okay and we're going to

00:59:13,799 --> 00:59:26,010
spit it out into the same place only

00:59:24,720 --> 00:59:27,869
this time if you can see it at the very

00:59:26,010 --> 00:59:30,329
bottom we're giving it a file type of

00:59:27,869 --> 00:59:32,309
CRT I could name it anything i wanted to

00:59:30,329 --> 00:59:34,710
i just use a standardized naming

00:59:32,309 --> 00:59:40,770
convention because it's easier so here

00:59:34,710 --> 00:59:42,240
we go nope forgot a step and again this

00:59:40,770 --> 00:59:44,579
is not normally how I keep my key

00:59:42,240 --> 00:59:49,650
phrases but I'm doing it for expediency

00:59:44,579 --> 00:59:52,020
here you don't get to see it sorry so I

00:59:49,650 --> 00:59:54,720
have my intermediate certificate that i

00:59:52,020 --> 00:59:57,750
created last night i have the key phrase

00:59:54,720 --> 00:59:59,819
which is encrypted i have just put in

00:59:57,750 --> 01:00:01,500
the key phrase and now here it is

00:59:59,819 --> 01:00:04,589
showing me all the information from the

01:00:01,500 --> 01:00:08,010
certificate signing request saying do

01:00:04,589 --> 01:00:09,630
you trust all this looks pretty good I

01:00:08,010 --> 01:00:11,520
trust it we're going to sign a

01:00:09,630 --> 01:00:20,930
certificate and we're going to commit it

01:00:11,520 --> 01:00:20,930
to our repository now I have where is it

01:00:21,590 --> 01:00:29,960
justifying part1 resources press now I

01:00:26,160 --> 01:00:29,960
have a new file in here does CRT

01:00:35,069 --> 01:00:40,480
what do we use

01:00:36,859 --> 01:00:40,480
I'm famously good at that

01:00:42,020 --> 01:00:47,369
okay now i have an actual certificate

01:00:45,330 --> 01:00:49,140
signed by an intermediate certificate

01:00:47,369 --> 01:00:50,790
authority and it doesn't matter to you

01:00:49,140 --> 01:00:53,850
whether it's an intermediate a root I

01:00:50,790 --> 01:00:56,030
have an actual certificate here got an

01:00:53,850 --> 01:01:01,260
issuer it's got a subject it's got

01:00:56,030 --> 01:01:03,420
where's the issuer hash somewhere in

01:01:01,260 --> 01:01:05,160
here it's got issuer if you were hash I

01:01:03,420 --> 01:01:07,500
don't know where it is it's somewhere in

01:01:05,160 --> 01:01:08,790
here we're pretty much out of time guys

01:01:07,500 --> 01:01:10,470
so I'm going to have to cut it off here

01:01:08,790 --> 01:01:22,010
we only have the quick questions with

01:01:10,470 --> 01:01:22,010
what we call it a day sir that's correct

01:01:25,640 --> 01:01:30,960
yes sir there is a way to change it it's

01:01:28,440 --> 01:01:33,240
in the openssl global configuration file

01:01:30,960 --> 01:01:35,010
or you can copy that and make your

01:01:33,240 --> 01:01:37,200
changes locally and specified in the

01:01:35,010 --> 01:01:39,810
indication of the command to use a local

01:01:37,200 --> 01:01:41,250
configuration file the question was when

01:01:39,810 --> 01:01:42,750
you're generating the key the default is

01:01:41,250 --> 01:01:44,550
512 what if you don't want have to type

01:01:42,750 --> 01:01:46,560
to go for it at the end of every command

01:01:44,550 --> 01:01:51,470
you can change the default configuration

01:01:46,560 --> 01:01:53,730
file any other quick questions great

01:01:51,470 --> 01:01:55,109
thank you guys for coming and stick

01:01:53,730 --> 01:01:57,890
around for part two we're actually going

01:01:55,109 --> 01:01:57,890
to create a certificate authority

01:02:12,110 --> 01:02:14,170
you

01:02:34,050 --> 01:02:38,350
your customers rely on your website or

01:02:36,850 --> 01:02:40,720
application if it's slower

01:02:38,350 --> 01:02:43,660
non-responsive it infuriates your users

01:02:40,720 --> 01:02:45,490
and costs you money keeping your

01:02:43,660 --> 01:02:48,980
business critical systems humming along

01:02:45,490 --> 01:02:51,800
requires insight into what they're doing

01:02:48,980 --> 01:02:53,810
your system metrics tell stories stories

01:02:51,800 --> 01:02:56,060
that can reveal performance bottlenecks

01:02:53,810 --> 01:02:58,220
resource limitations and other problems

01:02:56,060 --> 01:03:00,140
but how do you keep an eye on all of

01:02:58,220 --> 01:03:02,750
your systems performance metrics in

01:03:00,140 --> 01:03:05,600
real-time and record this data for later

01:03:02,750 --> 01:03:07,580
analysis enter longview the new way to

01:03:05,600 --> 01:03:09,590
see what's really going on under the

01:03:07,580 --> 01:03:11,720
hood the longview dashboard lets you

01:03:09,590 --> 01:03:13,730
visualize the status of all your systems

01:03:11,720 --> 01:03:16,460
providing you with a bird's-eye view of

01:03:13,730 --> 01:03:19,580
your entire fleet you can sort by cpu

01:03:16,460 --> 01:03:22,280
memory swap processes load and network

01:03:19,580 --> 01:03:24,619
usage click a specific system to access

01:03:22,280 --> 01:03:26,600
its individual dashboard then click and

01:03:24,619 --> 01:03:29,600
drag to zoom in on chokepoints and get

01:03:26,600 --> 01:03:31,609
more detail comprehensive network data

01:03:29,600 --> 01:03:34,310
including inbound and outbound traffic

01:03:31,609 --> 01:03:35,869
is available on the network tab and disk

01:03:34,310 --> 01:03:37,790
rights and free space on the disk

01:03:35,869 --> 01:03:40,640
stabbed while the process Explorer

01:03:37,790 --> 01:03:43,160
displays usage statistics for individual

01:03:40,640 --> 01:03:45,350
processes the system info tab shows

01:03:43,160 --> 01:03:47,600
listening services active connections

01:03:45,350 --> 01:03:49,730
and available updates adding long view

01:03:47,600 --> 01:03:51,410
to a system is easy just click the

01:03:49,730 --> 01:03:53,570
button copy the one line installation

01:03:51,410 --> 01:03:56,000
command then run the command on your

01:03:53,570 --> 01:03:57,710
linux system to complete the process the

01:03:56,000 --> 01:03:59,869
agent will begin collecting data and

01:03:57,710 --> 01:04:01,740
sending it to longview then the graph

01:03:59,869 --> 01:04:04,290
start rolling

01:04:01,740 --> 01:04:06,660
use longview to gain visibility into

01:04:04,290 --> 01:04:10,400
your servers so when your website or app

01:04:06,660 --> 01:04:10,400

YouTube URL: https://www.youtube.com/watch?v=T9W9x77KxbA


