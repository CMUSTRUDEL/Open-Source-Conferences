Title: 2014 SouthEast LinuxFest - Jeff Propes - Demystifying SSL: From Zero to Certificate Authority
Publication date: 2015-05-02
Playlist: 2014 SouthEast LinuxFest
Description: 
	2014 SouthEast LinuxFest
Jeff Propes
Demystifying SSL: From Zero to Certificate Authority
Captions: 
	00:00:00,000 --> 00:00:05,339
the following presentation was recorded

00:00:02,490 --> 00:00:08,189
the 2014 southeast linux fest in

00:00:05,339 --> 00:00:11,070
charlotte north carolina it is licensed

00:00:08,189 --> 00:00:14,880
under a creative commons license for

00:00:11,070 --> 00:00:18,180
more information visit www selfies linux

00:00:14,880 --> 00:00:19,710
pc org the southeast linux fest would

00:00:18,180 --> 00:00:22,740
like to thank the following diamond

00:00:19,710 --> 00:00:26,880
sponsors in 2014 for helping make these

00:00:22,740 --> 00:00:29,519
videos possible that's a great way to

00:00:26,880 --> 00:00:34,920
begin a video hi my name is jeff probst

00:00:29,519 --> 00:00:38,219
and I'm a now I'm teaching about that's

00:00:34,920 --> 00:00:39,719
the cell today yes back on track today

00:00:38,219 --> 00:00:40,890
we're going to be the beginning we're

00:00:39,719 --> 00:00:43,860
going to be continue our discussion

00:00:40,890 --> 00:00:45,840
about ssl we're going to dive into some

00:00:43,860 --> 00:00:48,920
pretty amazing stuff how to become your

00:00:45,840 --> 00:00:50,760
own certificate authority now i should

00:00:48,920 --> 00:00:52,530
well let's go over we're going to be

00:00:50,760 --> 00:00:55,860
talking about we have to understand this

00:00:52,530 --> 00:00:57,300
ssl tree of trust intimately before we

00:00:55,860 --> 00:00:59,609
can understand what our role as

00:00:57,300 --> 00:01:01,410
certificate authorities are so we're

00:00:59,609 --> 00:01:02,789
going to talk about that at length we're

00:01:01,410 --> 00:01:04,530
going to dive back into the certificate

00:01:02,789 --> 00:01:06,659
format again for those of you that were

00:01:04,530 --> 00:01:08,280
in the first presentation it'll be a

00:01:06,659 --> 00:01:09,810
little bit of a rehash but for those

00:01:08,280 --> 00:01:13,260
that have not been before it'll be very

00:01:09,810 --> 00:01:15,390
informative to see what it looks like we

00:01:13,260 --> 00:01:17,280
have to cover some dirty work about

00:01:15,390 --> 00:01:18,750
configuration and some best practices

00:01:17,280 --> 00:01:20,850
when it comes to generating a

00:01:18,750 --> 00:01:22,710
certificate authority and we have to

00:01:20,850 --> 00:01:24,990
talk about notification list finally

00:01:22,710 --> 00:01:25,979
after we get through all of that will be

00:01:24,990 --> 00:01:28,500
able to create our own certificate

00:01:25,979 --> 00:01:30,180
authority that'd be pretty cool so by

00:01:28,500 --> 00:01:31,259
the end of this presentation hopefully

00:01:30,180 --> 00:01:35,250
you will be equipped with all the

00:01:31,259 --> 00:01:37,829
knowledge acquired to create sign and

00:01:35,250 --> 00:01:40,619
destroy your own ssl certificates in

00:01:37,829 --> 00:01:42,780
whatever fashion you see fit and i think

00:01:40,619 --> 00:01:47,250
that's pretty amazing you can act like a

00:01:42,780 --> 00:01:50,460
big boy without being a big one let's

00:01:47,250 --> 00:01:52,470
talk at first about some things some

00:01:50,460 --> 00:01:56,850
hard truths what we're about to do is

00:01:52,470 --> 00:01:59,189
actually really hard we have to know how

00:01:56,850 --> 00:02:00,600
to operate the openssl binary we have to

00:01:59,189 --> 00:02:03,600
know the ins and outs of some of its

00:02:00,600 --> 00:02:05,520
configuration files there will be a lot

00:02:03,600 --> 00:02:07,950
of fumbling around it's kind of like

00:02:05,520 --> 00:02:09,119
your first time only there's a lot of

00:02:07,950 --> 00:02:11,879
people here

00:02:09,119 --> 00:02:15,480
and you know mistakes we made that's

00:02:11,879 --> 00:02:17,340
okay we'll get a chance to recreate our

00:02:15,480 --> 00:02:19,440
certificates will find it doesn't work

00:02:17,340 --> 00:02:21,060
for some reason in fact I give about a

00:02:19,440 --> 00:02:22,709
forty percent chance that what we create

00:02:21,060 --> 00:02:26,010
here today will actually work as its

00:02:22,709 --> 00:02:27,959
supposed to it's an iterative process to

00:02:26,010 --> 00:02:29,489
build your SSL certificates in your

00:02:27,959 --> 00:02:30,720
certificate authority we will try to

00:02:29,489 --> 00:02:32,519
keep the swearing to a minimum because

00:02:30,720 --> 00:02:37,260
there are other people watching and we

00:02:32,519 --> 00:02:38,909
want to maintain a nice decor so if you

00:02:37,260 --> 00:02:42,540
need to swear just kind of client ligo

00:02:38,909 --> 00:02:46,910
like this swear to your neighbor they

00:02:42,540 --> 00:02:48,989
are good let's talk about trust as a

00:02:46,910 --> 00:02:53,040
certificate authority you are peddling

00:02:48,989 --> 00:02:55,290
trust you are saying I am this person I

00:02:53,040 --> 00:02:58,230
am this organization and I am

00:02:55,290 --> 00:03:01,040
trustworthy you should put your trust in

00:02:58,230 --> 00:03:04,019
me because I am trustworthy it's really

00:03:01,040 --> 00:03:06,150
built on hopes and dreams and wishes at

00:03:04,019 --> 00:03:08,190
least to start it's one of those things

00:03:06,150 --> 00:03:10,859
it's like kicking a pebble down the top

00:03:08,190 --> 00:03:12,900
of a mountain slowly gather snow on as

00:03:10,859 --> 00:03:14,970
it gets you know more and more snow guys

00:03:12,900 --> 00:03:17,310
and then become a enormous organization

00:03:14,970 --> 00:03:19,769
like verisign there the enormous

00:03:17,310 --> 00:03:21,989
house-sized snowballs that come rolling

00:03:19,769 --> 00:03:24,269
down the hill but it starts with one

00:03:21,989 --> 00:03:27,950
little pebble at the top starts with one

00:03:24,269 --> 00:03:27,950
person or a couple people trusting you

00:03:28,129 --> 00:03:32,099
some of that trust is in that you're

00:03:30,329 --> 00:03:35,250
keeping your route and intermediate

00:03:32,099 --> 00:03:38,099
certificates secure we'll talk more

00:03:35,250 --> 00:03:39,299
about what those are later but a big

00:03:38,099 --> 00:03:40,680
part of being our certificate

00:03:39,299 --> 00:03:43,379
authorities if at that you are keeping

00:03:40,680 --> 00:03:46,440
these in a fashion such they cannot be

00:03:43,379 --> 00:03:49,379
used by unauthorized parties they can't

00:03:46,440 --> 00:03:52,079
be compromised by hackers or disgruntled

00:03:49,379 --> 00:03:53,220
employees or any number of things this

00:03:52,079 --> 00:03:55,410
is really serious stuff we're talking

00:03:53,220 --> 00:03:56,579
about trust I'm capitalizing all

00:03:55,410 --> 00:03:58,889
throughout this presentation because

00:03:56,579 --> 00:04:02,280
trust is a really big deal it comes to

00:03:58,889 --> 00:04:04,019
being a certificate authority is another

00:04:02,280 --> 00:04:06,720
part of this trust that says that if you

00:04:04,019 --> 00:04:08,840
sign someone else's certificate that

00:04:06,720 --> 00:04:11,310
they're trustworthy you are basically

00:04:08,840 --> 00:04:13,859
extending your cloak of trust and

00:04:11,310 --> 00:04:16,169
allowing them to come underneath so that

00:04:13,859 --> 00:04:18,479
when someone looks at them they say oh

00:04:16,169 --> 00:04:20,090
that person has a certificate signed by

00:04:18,479 --> 00:04:21,980
this organization and I

00:04:20,090 --> 00:04:25,160
set organization therefore I'm going to

00:04:21,980 --> 00:04:27,710
trust that person when you do that when

00:04:25,160 --> 00:04:29,330
you enlarge your cloak by one more

00:04:27,710 --> 00:04:32,030
signed certificate you need to make sure

00:04:29,330 --> 00:04:34,360
that that individual the organization

00:04:32,030 --> 00:04:36,889
for which you're signing is reputable

00:04:34,360 --> 00:04:38,840
that they're valid if it exists that

00:04:36,889 --> 00:04:41,240
you're not just creating some random

00:04:38,840 --> 00:04:43,340
one-off certificate that will be used to

00:04:41,240 --> 00:04:46,639
go attack something else that's part of

00:04:43,340 --> 00:04:48,380
trust and it's a certificate authority

00:04:46,639 --> 00:04:50,540
you have to maintain what are called

00:04:48,380 --> 00:04:53,000
revocation list let's say you did trust

00:04:50,540 --> 00:04:54,680
someone improperly you found out later

00:04:53,000 --> 00:04:57,950
that they were misusing your certificate

00:04:54,680 --> 00:04:59,240
or they went out of business or for

00:04:57,950 --> 00:05:01,700
whatever reason they wanted to cancel

00:04:59,240 --> 00:05:03,650
their certificate you as a certificate

00:05:01,700 --> 00:05:06,290
authority have an obligation to maintain

00:05:03,650 --> 00:05:08,150
what's called a revocation list there's

00:05:06,290 --> 00:05:10,910
all of your certificates that are issued

00:05:08,150 --> 00:05:12,229
and have been revoked were they not

00:05:10,910 --> 00:05:14,780
revoked they would be valid at this

00:05:12,229 --> 00:05:16,430
moment in time you have to maintain that

00:05:14,780 --> 00:05:18,800
it has to be publicly available such

00:05:16,430 --> 00:05:22,400
that anyone who wants to go and check on

00:05:18,800 --> 00:05:24,020
person sees certificate can look at my

00:05:22,400 --> 00:05:28,639
revocation list to verify that

00:05:24,020 --> 00:05:32,330
certificate has not been revoked Trust

00:05:28,639 --> 00:05:34,789
is really expensive it's process it's

00:05:32,330 --> 00:05:36,919
hardware its people it's double and

00:05:34,789 --> 00:05:38,800
triple checking everything it's very

00:05:36,919 --> 00:05:41,479
expensive especially when you're selling

00:05:38,800 --> 00:05:42,979
trust to billion-dollar organizations

00:05:41,479 --> 00:05:45,620
they're going to demand the highest

00:05:42,979 --> 00:05:47,090
degree of security and Trust we're

00:05:45,620 --> 00:05:49,700
talking millions upon millions of

00:05:47,090 --> 00:05:52,970
dollars investing in volts deep under

00:05:49,700 --> 00:05:55,789
the ground that have air gaps in lasers

00:05:52,970 --> 00:05:58,130
and guards and smoke detectors or you

00:05:55,789 --> 00:05:59,630
know poison gas anything you might come

00:05:58,130 --> 00:06:02,330
up with sharks let's put some sharks in

00:05:59,630 --> 00:06:06,610
it you know just you know that's what

00:06:02,330 --> 00:06:08,690
we're talking about happy puppies yes

00:06:06,610 --> 00:06:10,280
for those of you that we're here for the

00:06:08,690 --> 00:06:11,930
last session or we're not here for the

00:06:10,280 --> 00:06:14,300
last session we created this certificate

00:06:11,930 --> 00:06:17,030
for a fictional domain happy puppies

00:06:14,300 --> 00:06:18,470
calm suggested by my dad up here in the

00:06:17,030 --> 00:06:20,810
front I don't know what happy puppies

00:06:18,470 --> 00:06:22,190
but now it's become a theme in fact I

00:06:20,810 --> 00:06:25,419
think today we will be creating the

00:06:22,190 --> 00:06:28,520
happy puppies certificate authority

00:06:25,419 --> 00:06:31,610
let's talk about this tree at the very

00:06:28,520 --> 00:06:32,960
top we have the the root certificate and

00:06:31,610 --> 00:06:35,479
we talked at length about roots or tip

00:06:32,960 --> 00:06:38,090
its last presentation a root certificate

00:06:35,479 --> 00:06:41,060
is very special there is nothing above

00:06:38,090 --> 00:06:43,099
it that's where I say I am me and I am

00:06:41,060 --> 00:06:45,319
trustworthy that's the root certificate

00:06:43,099 --> 00:06:48,110
the intermediate certificate is one

00:06:45,319 --> 00:06:50,870
level down and the intermediate says

00:06:48,110 --> 00:06:52,610
that person signed my certificate and

00:06:50,870 --> 00:06:54,949
has granted me authority to sign my own

00:06:52,610 --> 00:06:57,440
certificates and you can do this as long

00:06:54,949 --> 00:06:59,449
as you want as far as you want you could

00:06:57,440 --> 00:07:01,759
have nine intermediates in a chain if

00:06:59,449 --> 00:07:04,610
you wish it's very uncommon there's

00:07:01,759 --> 00:07:07,550
nothing to stop you from doing it you

00:07:04,610 --> 00:07:08,990
can also as a with the root certificate

00:07:07,550 --> 00:07:12,259
you can sign a direct end user

00:07:08,990 --> 00:07:14,509
certificate that's okay it's uncommon I

00:07:12,259 --> 00:07:16,490
think it would be very foolish to do so

00:07:14,509 --> 00:07:19,430
because now you have to maintain that

00:07:16,490 --> 00:07:20,810
certificate and you have to every time

00:07:19,430 --> 00:07:22,190
you want to go maintain it you have to

00:07:20,810 --> 00:07:24,470
walk through the Sharks and the poison

00:07:22,190 --> 00:07:26,030
gas and guards and the lasers and go

00:07:24,470 --> 00:07:29,000
work with your system that's got the

00:07:26,030 --> 00:07:30,710
root certificate on it that's not fun so

00:07:29,000 --> 00:07:33,470
what we tend to do is we create this

00:07:30,710 --> 00:07:36,289
highly secure root certificate we sign

00:07:33,470 --> 00:07:39,020
it it's us it recognizes honor it

00:07:36,289 --> 00:07:41,210
represents our trust we then use that

00:07:39,020 --> 00:07:43,849
root certificate assign in immediate

00:07:41,210 --> 00:07:45,830
signing certificates those are our work

00:07:43,849 --> 00:07:46,909
horses those are there going to be the

00:07:45,830 --> 00:07:48,650
ones that we're going to use to actually

00:07:46,909 --> 00:07:52,699
sign the end-user certificates down at

00:07:48,650 --> 00:07:54,289
the very bottom of this tree we just

00:07:52,699 --> 00:07:58,039
discussed all of this I'm getting ahead

00:07:54,289 --> 00:07:59,930
of myself some important information

00:07:58,039 --> 00:08:02,690
about the root certificate is always

00:07:59,930 --> 00:08:05,199
self signed there's no other certificate

00:08:02,690 --> 00:08:07,610
above it it is the root of this tree and

00:08:05,199 --> 00:08:10,400
because it's really a pain in the butt

00:08:07,610 --> 00:08:13,280
to make this we set up so it's valid for

00:08:10,400 --> 00:08:15,409
many years I commonly see 20 30 years in

00:08:13,280 --> 00:08:16,699
a root certificate we can go and look at

00:08:15,409 --> 00:08:18,560
some of the root certificates for

00:08:16,699 --> 00:08:22,000
well-known vendors and you'll see that

00:08:18,560 --> 00:08:23,960
they extend off to like 20 30 for 20-30

00:08:22,000 --> 00:08:26,630
no one really wants to go through this

00:08:23,960 --> 00:08:28,039
process multiple times and so once you

00:08:26,630 --> 00:08:29,419
figure it out and get it right you get a

00:08:28,039 --> 00:08:30,469
successful certificate you want to make

00:08:29,419 --> 00:08:35,000
sure you get it right you don't have to

00:08:30,469 --> 00:08:36,770
do it for 20 years so the root

00:08:35,000 --> 00:08:38,390
certificate is commonly protected by

00:08:36,770 --> 00:08:40,070
hardware security mechanism and all the

00:08:38,390 --> 00:08:41,810
other joke things we talked about the

00:08:40,070 --> 00:08:42,440
hardware security mechanism is no joke

00:08:41,810 --> 00:08:45,460
they're very

00:08:42,440 --> 00:08:49,040
pensive there bespoke hardware for

00:08:45,460 --> 00:08:52,250
holding securely a certificate and its

00:08:49,040 --> 00:08:54,740
keys and allows you to interact with it

00:08:52,250 --> 00:08:56,660
in a secure fashion such that the key or

00:08:54,740 --> 00:08:59,620
in the state has never actually exposed

00:08:56,660 --> 00:09:01,610
it's basically a little embedded device

00:08:59,620 --> 00:09:04,010
hopefully you give it back up our you'd

00:09:01,610 --> 00:09:05,840
give it you know security and keys and

00:09:04,010 --> 00:09:07,670
everything and you would go to that

00:09:05,840 --> 00:09:09,170
hardware security module you say I need

00:09:07,670 --> 00:09:10,490
a new intermediate certificate and it

00:09:09,170 --> 00:09:12,080
does it for you and gives you the result

00:09:10,490 --> 00:09:14,060
you never touched the actual root

00:09:12,080 --> 00:09:17,360
certificate it's like you never see the

00:09:14,060 --> 00:09:18,440
king you may see the Kings handlers if

00:09:17,360 --> 00:09:22,190
you ever get to see the king you're

00:09:18,440 --> 00:09:23,930
really special so the part of this

00:09:22,190 --> 00:09:25,730
that's really important is because we're

00:09:23,930 --> 00:09:28,430
not signing any end-user certificates

00:09:25,730 --> 00:09:29,630
with the route we're actually delegating

00:09:28,430 --> 00:09:31,970
all of our Authority out to our

00:09:29,630 --> 00:09:33,950
intermediate certificates that's a

00:09:31,970 --> 00:09:36,230
little scary you have the same problem

00:09:33,950 --> 00:09:38,060
here with what happens if i have a

00:09:36,230 --> 00:09:42,590
disreputable client coming in asking for

00:09:38,060 --> 00:09:44,720
a client a certificate only now you may

00:09:42,590 --> 00:09:46,670
have accidentally given away the keys to

00:09:44,720 --> 00:09:49,700
your kingdom by allowing someone else to

00:09:46,670 --> 00:09:51,800
sign certificates in your name if you do

00:09:49,700 --> 00:09:53,840
your intermediate if it gets wrong so

00:09:51,800 --> 00:09:55,970
while you may not have the intermediate

00:09:53,840 --> 00:09:57,320
certificates as highly secured as your

00:09:55,970 --> 00:10:00,050
route you're still very careful with

00:09:57,320 --> 00:10:01,910
them what's you who you issue them to

00:10:00,050 --> 00:10:04,220
you don't ever give an intermediate

00:10:01,910 --> 00:10:06,500
certificate to and then user you just

00:10:04,220 --> 00:10:08,090
don't because then they don't need you

00:10:06,500 --> 00:10:09,830
anymore and for as long as that

00:10:08,090 --> 00:10:12,260
intermediate certificate is valid they

00:10:09,830 --> 00:10:16,940
can sign their own stuff as long as they

00:10:12,260 --> 00:10:18,320
want we've been talking about

00:10:16,940 --> 00:10:20,150
intermediate certificates there are

00:10:18,320 --> 00:10:22,310
workhorse certificates they're the ones

00:10:20,150 --> 00:10:23,860
that one step above the bottom of the

00:10:22,310 --> 00:10:26,930
tree they sign the end-user certificates

00:10:23,860 --> 00:10:29,680
one root can have many in fact you can

00:10:26,930 --> 00:10:32,120
have as many intermediates as you like

00:10:29,680 --> 00:10:34,040
there's some upper limit on what is

00:10:32,120 --> 00:10:36,710
useful how many intermediates do you

00:10:34,040 --> 00:10:38,600
need at some point would be like I don't

00:10:36,710 --> 00:10:40,490
want the blue certificate of the red one

00:10:38,600 --> 00:10:41,960
today well the blue would match my shoes

00:10:40,490 --> 00:10:45,530
but the red goes really well with my

00:10:41,960 --> 00:10:47,120
eyes I think I'll use the red one you

00:10:45,530 --> 00:10:48,680
don't need to do that you create

00:10:47,120 --> 00:10:50,330
intermediate certificates for individual

00:10:48,680 --> 00:10:53,360
purposes let's say I'm selling this

00:10:50,330 --> 00:10:54,870
particular product this low security low

00:10:53,360 --> 00:10:58,080
quality

00:10:54,870 --> 00:11:00,029
to get over here for you know cheap

00:10:58,080 --> 00:11:00,960
clients we don't really care about them

00:11:00,029 --> 00:11:02,460
so much because they're cheap and I

00:11:00,960 --> 00:11:05,100
bring in as much revenue and over here

00:11:02,460 --> 00:11:06,839
we want this really high dollar platinum

00:11:05,100 --> 00:11:09,029
encrusted intermediate certificate for

00:11:06,839 --> 00:11:11,640
our IBM who's going to purchase them at

00:11:09,029 --> 00:11:13,500
ten thousand dollars for a year of trust

00:11:11,640 --> 00:11:15,600
you have different intermediate

00:11:13,500 --> 00:11:17,460
certificates for different needs you

00:11:15,600 --> 00:11:21,240
give them different names that way

00:11:17,460 --> 00:11:22,920
you're spreading out your risk as much

00:11:21,240 --> 00:11:25,110
as you need to now you can spread it out

00:11:22,920 --> 00:11:27,720
too much you can consolidate your risk

00:11:25,110 --> 00:11:29,100
it depends upon what you want to set is

00:11:27,720 --> 00:11:30,390
your risk profile and we're not going to

00:11:29,100 --> 00:11:32,490
go into that that's a little too

00:11:30,390 --> 00:11:34,800
detailed but if you do decide to do

00:11:32,490 --> 00:11:36,600
certificate authority anything one of

00:11:34,800 --> 00:11:37,920
the biggest steps is determining what

00:11:36,600 --> 00:11:41,520
your risk will be and how you're going

00:11:37,920 --> 00:11:43,410
to mitigate and it's very expensive the

00:11:41,520 --> 00:11:45,360
intermediate certificates like the root

00:11:43,410 --> 00:11:46,980
certificate usually have many years of

00:11:45,360 --> 00:11:48,420
validity because again you don't want to

00:11:46,980 --> 00:11:50,400
have to mess with reissuing it every

00:11:48,420 --> 00:11:53,220
year or every month or whatever you

00:11:50,400 --> 00:11:54,690
decide that's a really great joke if you

00:11:53,220 --> 00:11:56,940
have people that you're issuing

00:11:54,690 --> 00:11:59,310
certificates to just for fun issue it

00:11:56,940 --> 00:12:00,720
for one day give it to them they won't

00:11:59,310 --> 00:12:03,600
notice they'll come back in two days

00:12:00,720 --> 00:12:07,370
medic what's wrong it's really funny let

00:12:03,600 --> 00:12:07,370
me tell you I've never done that

00:12:09,480 --> 00:12:14,170
an important fact of the intermediate

00:12:11,740 --> 00:12:16,660
certificates they have to remain

00:12:14,170 --> 00:12:18,730
available the root certificate is buried

00:12:16,660 --> 00:12:20,680
deep in the earth the intermediate

00:12:18,730 --> 00:12:22,990
certificates there's still our hardware

00:12:20,680 --> 00:12:24,430
security mechanism but they're out where

00:12:22,990 --> 00:12:26,200
they're actually able to be gotten to

00:12:24,430 --> 00:12:28,210
which means that they have a higher risk

00:12:26,200 --> 00:12:29,620
profile someone is more likely to be

00:12:28,210 --> 00:12:31,600
able to get to them a disgruntled

00:12:29,620 --> 00:12:33,850
employees probably the most likely

00:12:31,600 --> 00:12:35,860
source of theft of an intermediate

00:12:33,850 --> 00:12:37,210
certificate but it could be someone who

00:12:35,860 --> 00:12:39,340
breaks into the premises it could be

00:12:37,210 --> 00:12:40,960
someone maybe you have sloppy security

00:12:39,340 --> 00:12:43,060
policies and some hacker is able to get

00:12:40,960 --> 00:12:46,630
in without ever entering a physical

00:12:43,060 --> 00:12:48,190
premise that could happen so there is a

00:12:46,630 --> 00:12:49,630
risk associated with intermediates but

00:12:48,190 --> 00:12:52,750
it's a better model than signing

00:12:49,630 --> 00:12:54,340
everything with just the root another

00:12:52,750 --> 00:12:56,080
problem with intermedius is because

00:12:54,340 --> 00:12:57,550
you're probably signing a lot of

00:12:56,080 --> 00:12:59,530
certificates with it they're going to

00:12:57,550 --> 00:13:01,240
build up very large revocation list

00:12:59,530 --> 00:13:05,050
we're going to talk about the

00:13:01,240 --> 00:13:07,300
implications of that later so the

00:13:05,050 --> 00:13:09,130
end-user certificate that's what most

00:13:07,300 --> 00:13:11,020
everybody here that's used a certificate

00:13:09,130 --> 00:13:13,810
is familiar with it's just tiny little

00:13:11,020 --> 00:13:15,880
bit of trust coming from the big very

00:13:13,810 --> 00:13:17,320
trustworthy root certificate on down to

00:13:15,880 --> 00:13:19,410
the intermediate who we also trust

00:13:17,320 --> 00:13:21,730
because he has Authority for it and that

00:13:19,410 --> 00:13:24,850
intermediate has granted me some tiny

00:13:21,730 --> 00:13:27,940
measure of trust for that one domain for

00:13:24,850 --> 00:13:30,190
a year you'll be trusted that'll be

00:13:27,940 --> 00:13:34,660
ninety-nine dollars please it's a great

00:13:30,190 --> 00:13:37,150
business model so we limit the risk by

00:13:34,660 --> 00:13:39,550
narrowing how long we're giving an end

00:13:37,150 --> 00:13:41,620
user certificate for and how many

00:13:39,550 --> 00:13:43,090
domains what kind of certificate we're

00:13:41,620 --> 00:13:45,370
giving are we giving them a wild card

00:13:43,090 --> 00:13:47,350
that could be more dangerous than just a

00:13:45,370 --> 00:13:49,150
regular are we putting 15 different

00:13:47,350 --> 00:13:54,790
subject alternate names on our

00:13:49,150 --> 00:13:57,580
certificate that could be dangerous when

00:13:54,790 --> 00:13:59,470
we sign a certificate we need to very

00:13:57,580 --> 00:14:01,750
carefully read all the information given

00:13:59,470 --> 00:14:03,970
to us by the client it comes in the form

00:14:01,750 --> 00:14:06,280
of a certificate signing request and

00:14:03,970 --> 00:14:08,650
information should be eckerd if you're

00:14:06,280 --> 00:14:10,180
signing things for other people you

00:14:08,650 --> 00:14:11,770
probably should know who they are if

00:14:10,180 --> 00:14:12,880
you're assigning things and you don't

00:14:11,770 --> 00:14:16,030
know who they are then you need to have

00:14:12,880 --> 00:14:17,710
some way of verifying that they are who

00:14:16,030 --> 00:14:19,779
they claim to be I could claim to be

00:14:17,710 --> 00:14:22,180
Barack Obama who's gone

00:14:19,779 --> 00:14:24,370
through anti tanning bed and no one

00:14:22,180 --> 00:14:26,379
would know but they would come along and

00:14:24,370 --> 00:14:28,060
check out and verify hey that guy

00:14:26,379 --> 00:14:29,949
doesn't really look right that address

00:14:28,060 --> 00:14:31,120
is wrong let's check it okay that's not

00:14:29,949 --> 00:14:36,309
a valid certificate we're not going to

00:14:31,120 --> 00:14:38,110
sign that it's important to note if

00:14:36,309 --> 00:14:39,519
you've signed a certificate and the L&R

00:14:38,110 --> 00:14:41,559
of that certificate uses it to do bad

00:14:39,519 --> 00:14:42,670
things you may or may not be legally

00:14:41,559 --> 00:14:44,649
liable but you're certainly going to

00:14:42,670 --> 00:14:47,589
take a hit and trust again I've

00:14:44,649 --> 00:14:51,220
capitalized trust you're selling trust

00:14:47,589 --> 00:14:53,259
this is the sole thing you are claiming

00:14:51,220 --> 00:14:55,480
to bed possess and you are parceling it

00:14:53,259 --> 00:14:58,600
out so anything that minimizes the trust

00:14:55,480 --> 00:15:00,189
people have in you is very very bad or

00:14:58,600 --> 00:15:03,910
do your utmost to make sure you're not

00:15:00,189 --> 00:15:05,819
damaging that trust so let's say someone

00:15:03,910 --> 00:15:08,170
does something bad you need to revoke it

00:15:05,819 --> 00:15:11,379
you can do so you can unilaterally

00:15:08,170 --> 00:15:13,720
revoke someone's ssl certificate you

00:15:11,379 --> 00:15:16,329
have issued when you sign their

00:15:13,720 --> 00:15:17,920
certificate request you actually keep a

00:15:16,329 --> 00:15:19,629
copy of the resulting certificate you

00:15:17,920 --> 00:15:21,370
don't keep a copy of their key you don't

00:15:19,629 --> 00:15:23,949
need that you just need the certificate

00:15:21,370 --> 00:15:26,920
you hang on to that and then if they do

00:15:23,949 --> 00:15:29,470
something bad you hear about it or the

00:15:26,920 --> 00:15:31,029
time is expired or they need to revoke

00:15:29,470 --> 00:15:33,309
it for whatever reason you can issue a

00:15:31,029 --> 00:15:36,339
revocation and we'll talk about that a

00:15:33,309 --> 00:15:38,439
little bit more later so let's talk

00:15:36,339 --> 00:15:41,050
about the certificate format we looked

00:15:38,439 --> 00:15:42,699
at a certificate last presentation that

00:15:41,050 --> 00:15:44,079
was an end user certificate now we're

00:15:42,699 --> 00:15:46,059
going to switch gears and look at some

00:15:44,079 --> 00:15:49,959
of these root and intermediate

00:15:46,059 --> 00:15:52,199
certificates so I'm going to hop over to

00:15:49,959 --> 00:15:52,199
here

00:15:56,830 --> 00:16:03,550
can this be seen by everybody okay great

00:16:00,970 --> 00:16:05,800
by the way this all these resources here

00:16:03,550 --> 00:16:07,630
are out on the web for you to play with

00:16:05,800 --> 00:16:08,830
at your leisure you're not gonna be able

00:16:07,630 --> 00:16:10,360
to do anything with them because there's

00:16:08,830 --> 00:16:12,460
no keys but there could be useful for

00:16:10,360 --> 00:16:13,930
reference looking at how I've done

00:16:12,460 --> 00:16:16,000
things that especially that

00:16:13,930 --> 00:16:18,010
configuration file that route CNF that

00:16:16,000 --> 00:16:22,020
will be invaluable for you later so

00:16:18,010 --> 00:16:22,020
let's look at some of these certificates

00:16:28,850 --> 00:16:36,449
here we have a root certificate that i

00:16:31,949 --> 00:16:40,560
created late last night around 11pm 12

00:16:36,449 --> 00:16:43,680
pm-2 like that time is hard you'll note

00:16:40,560 --> 00:16:46,399
here about this line here at the very

00:16:43,680 --> 00:16:48,660
top is the issuer I have created a

00:16:46,399 --> 00:16:51,120
basically a fictional certificate

00:16:48,660 --> 00:16:53,610
authority for our conference here at

00:16:51,120 --> 00:16:55,769
southeast Linux best going down a couple

00:16:53,610 --> 00:16:58,350
lines you will see that the subject is

00:16:55,769 --> 00:16:59,970
exactly the same this is a self-signed

00:16:58,350 --> 00:17:01,620
root certificate that all root

00:16:59,970 --> 00:17:03,870
certificates must be self signed because

00:17:01,620 --> 00:17:05,610
that's what you're selling between those

00:17:03,870 --> 00:17:08,370
two pieces of information we have the

00:17:05,610 --> 00:17:10,679
validity dates I set this certificate

00:17:08,370 --> 00:17:12,299
authority to have a validity for 20

00:17:10,679 --> 00:17:15,600
years because I really don't to mess

00:17:12,299 --> 00:17:18,030
with this again we have information I

00:17:15,600 --> 00:17:20,909
apparently used a very small public key

00:17:18,030 --> 00:17:23,220
or keep here when I did this so the key

00:17:20,909 --> 00:17:25,919
pair for this video authorities only 512

00:17:23,220 --> 00:17:27,569
bits which is way too small don't use

00:17:25,919 --> 00:17:31,650
this for real this was just for an

00:17:27,569 --> 00:17:34,650
example down here we get into the

00:17:31,650 --> 00:17:37,230
extensions section some very important

00:17:34,650 --> 00:17:38,669
parts we're going to ignore the subject

00:17:37,230 --> 00:17:41,490
key identifier and the authority key

00:17:38,669 --> 00:17:44,159
identifier except to note that both of

00:17:41,490 --> 00:17:47,100
those are exactly the same this

00:17:44,159 --> 00:17:49,530
identifier is basically a very short

00:17:47,100 --> 00:17:52,740
thumbprint of what the certificate

00:17:49,530 --> 00:17:55,020
claims to be and because the ID and the

00:17:52,740 --> 00:17:56,429
identifiers are the same we can also we

00:17:55,020 --> 00:17:58,950
can tell that it's a self-signed

00:17:56,429 --> 00:18:02,789
certificate down here is where the magic

00:17:58,950 --> 00:18:08,460
happens does cannot see that highlight I

00:18:02,789 --> 00:18:10,980
apologize this basic constraints flat is

00:18:08,460 --> 00:18:14,190
crucial for us being able to operate as

00:18:10,980 --> 00:18:16,400
a certificate authority I can get that

00:18:14,190 --> 00:18:19,920
up towards the top

00:18:16,400 --> 00:18:23,190
there we go ignore that junk at the

00:18:19,920 --> 00:18:27,120
bottom we have a flag here that says CA

00:18:23,190 --> 00:18:29,670
of true that means this certificate can

00:18:27,120 --> 00:18:32,520
be used as a certificate authority to

00:18:29,670 --> 00:18:35,309
sign other certificates we also have

00:18:32,520 --> 00:18:37,980
another value called path Lynn this is

00:18:35,309 --> 00:18:40,380
important because it limits the depth at

00:18:37,980 --> 00:18:43,140
which your tree of trust can go here I

00:18:40,380 --> 00:18:47,100
have designated that as a path length of

00:18:43,140 --> 00:18:49,559
one only one child certificate authority

00:18:47,100 --> 00:18:50,670
can exist alright one layer of child

00:18:49,559 --> 00:18:52,080
certificate authority can exist

00:18:50,670 --> 00:18:54,660
underneath a certificate I can have many

00:18:52,080 --> 00:18:56,970
child certificate authorities but none

00:18:54,660 --> 00:18:59,940
of those certificate authorities may

00:18:56,970 --> 00:19:02,460
have their own children what happens

00:18:59,940 --> 00:19:05,280
when we move down the next layer will

00:19:02,460 --> 00:19:08,040
say for the intermediate certificate

00:19:05,280 --> 00:19:11,250
authority flag is true but path Len is 0

00:19:08,040 --> 00:19:13,170
and if you ever try to sign a new

00:19:11,250 --> 00:19:15,480
certificate authority child certificate

00:19:13,170 --> 00:19:17,910
underneath it openssl will give you an

00:19:15,480 --> 00:19:20,550
error this is the way the root can

00:19:17,910 --> 00:19:23,580
protect itself against a rogue

00:19:20,550 --> 00:19:26,309
intermediate certificate signing away

00:19:23,580 --> 00:19:27,510
and doing you know if you are a trusted

00:19:26,309 --> 00:19:29,130
individual as a route that's very

00:19:27,510 --> 00:19:32,040
valuable and immediately try and go off

00:19:29,130 --> 00:19:33,570
and do his own thing and like your head

00:19:32,040 --> 00:19:34,920
night going off and making war in

00:19:33,570 --> 00:19:38,820
another nation you don't really want

00:19:34,920 --> 00:19:40,950
doing that no at the very bottom here we

00:19:38,820 --> 00:19:44,630
see two other important pieces the key

00:19:40,950 --> 00:19:47,640
usage you can specify what items this

00:19:44,630 --> 00:19:49,590
certificate and key can be used for in

00:19:47,640 --> 00:19:51,540
this case I have limited to solely

00:19:49,590 --> 00:19:54,660
signing certificates and signing

00:19:51,540 --> 00:19:57,050
revocation lists this particular root

00:19:54,660 --> 00:19:59,730
certificate cannot be used to sign and

00:19:57,050 --> 00:20:02,520
it needs your certificate I have banned

00:19:59,730 --> 00:20:04,530
it this can only be used to sign an

00:20:02,520 --> 00:20:06,630
immediate certificate I don't want there

00:20:04,530 --> 00:20:09,540
to ever be any end users next to my root

00:20:06,630 --> 00:20:16,070
certificate there has to be some space

00:20:09,540 --> 00:20:16,070
at least one jump so let's look at

00:20:23,040 --> 00:20:29,620
CRT here we go this is the intermediate

00:20:27,760 --> 00:20:34,300
certificate authority that I created

00:20:29,620 --> 00:20:37,390
last night it has an issuer of the root

00:20:34,300 --> 00:20:42,330
thority that we just looked at southeast

00:20:37,390 --> 00:20:45,060
Linux best root CA it has a subject of

00:20:42,330 --> 00:20:51,460
Southeast Lenfest intermediate sing

00:20:45,060 --> 00:20:52,720
jingheng CA we're not using these like I

00:20:51,460 --> 00:20:55,060
said there's a very low chance you'll

00:20:52,720 --> 00:20:56,500
actually get a good working quality

00:20:55,060 --> 00:21:00,220
certificate authority set your first

00:20:56,500 --> 00:21:02,020
time out so oh look I used an actually

00:21:00,220 --> 00:21:05,340
good strong key this time this is a

00:21:02,020 --> 00:21:07,900
twenty 2048-bit key that's that's good

00:21:05,340 --> 00:21:09,910
here we see down at the bottom again we

00:21:07,900 --> 00:21:13,690
see the see a flag is true but Pat Flynn

00:21:09,910 --> 00:21:15,160
is 0 I cannot set anymore certificate

00:21:13,690 --> 00:21:18,330
authorities underneath this one this is

00:21:15,160 --> 00:21:23,380
it the other thing I can do is to sign

00:21:18,330 --> 00:21:28,930
end-user certificates okay let's take a

00:21:23,380 --> 00:21:35,710
look or click at the certificate signing

00:21:28,930 --> 00:21:37,780
request that's pretty interesting so

00:21:35,710 --> 00:21:38,770
here if you weren't this is more for if

00:21:37,780 --> 00:21:41,220
you were not here in the first

00:21:38,770 --> 00:21:44,140
presentation when you create a

00:21:41,220 --> 00:21:45,130
certificate almost every time you start

00:21:44,140 --> 00:21:47,260
with a certificate signing request

00:21:45,130 --> 00:21:49,450
unless you're making a self-signed sir

00:21:47,260 --> 00:21:51,040
you create a request with all of your

00:21:49,450 --> 00:21:52,930
information and you pass this request

00:21:51,040 --> 00:21:55,570
over to the authority which is doing the

00:21:52,930 --> 00:21:57,490
signing they review it they decide to

00:21:55,570 --> 00:22:00,600
sign it or not they return the signed

00:21:57,490 --> 00:22:02,380
cert to you and here i have created a

00:22:00,600 --> 00:22:04,600
certificate signing request for the

00:22:02,380 --> 00:22:06,760
intermediate i pass it over to the route

00:22:04,600 --> 00:22:10,450
route took one look at and said hey i

00:22:06,760 --> 00:22:11,980
know that god that's good inside it was

00:22:10,450 --> 00:22:15,640
really late i was really funny to me

00:22:11,980 --> 00:22:17,920
when I made that joke last night we see

00:22:15,640 --> 00:22:20,590
again we specified that this see a flag

00:22:17,920 --> 00:22:22,780
is true path lunch is 0 this was in my

00:22:20,590 --> 00:22:24,460
certificate signing request I have the

00:22:22,780 --> 00:22:26,830
option to either put it into the request

00:22:24,460 --> 00:22:29,650
or as the signing Authority I can

00:22:26,830 --> 00:22:31,140
forcibly add that information in at the

00:22:29,650 --> 00:22:32,640
signing stage from the route

00:22:31,140 --> 00:22:37,380
we'll talk about that in a little bit

00:22:32,640 --> 00:22:40,860
there we go harbor them here we go all

00:22:37,380 --> 00:22:43,200
those certificates are out on the web in

00:22:40,860 --> 00:22:44,580
a line that's been chopped off I

00:22:43,200 --> 00:22:46,770
apologize if you have a larger screen

00:22:44,580 --> 00:22:49,260
larger than 1024 wide you'll be able to

00:22:46,770 --> 00:22:50,490
see it and at the bottom it's a little

00:22:49,260 --> 00:22:54,270
cheat sheet for how to look at those

00:22:50,490 --> 00:22:56,250
commands we're going to dive into the

00:22:54,270 --> 00:22:58,350
configuration and I'm warning you this

00:22:56,250 --> 00:23:01,950
is really ugly I'm not trying to be mean

00:22:58,350 --> 00:23:04,410
it just is it's all over the place the

00:23:01,950 --> 00:23:06,660
openssl project grew very organically

00:23:04,410 --> 00:23:08,490
and so things are just kind of thrown in

00:23:06,660 --> 00:23:11,310
here and oh we're going to make a v3

00:23:08,490 --> 00:23:13,290
extensions item we're going to throw

00:23:11,310 --> 00:23:14,520
that in but then only in some parts so

00:23:13,290 --> 00:23:16,260
don't throw it in over here so now we

00:23:14,520 --> 00:23:19,950
need to flag up it just it's it's

00:23:16,260 --> 00:23:21,420
everywhere it's important to note there

00:23:19,950 --> 00:23:30,350
are major sections within the

00:23:21,420 --> 00:23:30,350
configuration file yes question oh no

00:23:30,560 --> 00:23:36,990
the question was for openssl today

00:23:33,480 --> 00:23:39,150
strictly use sha-1 for hashing you can

00:23:36,990 --> 00:23:40,590
specify which ever hashing algorithm you

00:23:39,150 --> 00:23:43,500
want I think by default the

00:23:40,590 --> 00:23:46,590
configuration file specifies sha-1 this

00:23:43,500 --> 00:23:49,560
one's n sha256 I was feeling ornery and

00:23:46,590 --> 00:23:51,150
I did it you can use md5 but again like

00:23:49,560 --> 00:23:53,280
i said less presentation if you're using

00:23:51,150 --> 00:23:55,170
md5 hashing let's talk after the

00:23:53,280 --> 00:24:00,120
presentation please I have some very sad

00:23:55,170 --> 00:24:03,030
news for you so we are going to be using

00:24:00,120 --> 00:24:05,760
this openssl binary we're going to have

00:24:03,030 --> 00:24:07,260
I think I missed a poor you we're going

00:24:05,760 --> 00:24:09,120
to have major sections of our

00:24:07,260 --> 00:24:13,190
configuration file that are related to

00:24:09,120 --> 00:24:15,630
commands we can run with an open SSL

00:24:13,190 --> 00:24:17,940
inside those sections that could refer

00:24:15,630 --> 00:24:20,100
to some other sections sometimes the

00:24:17,940 --> 00:24:21,750
presence or absence of a referral to a

00:24:20,100 --> 00:24:25,320
different section is enough to trigger

00:24:21,750 --> 00:24:28,110
some off over here functionality you

00:24:25,320 --> 00:24:30,150
actually care about I'm going to stop

00:24:28,110 --> 00:24:31,290
talking about all of the difficulties

00:24:30,150 --> 00:24:38,220
and just show to you'll see what I mean

00:24:31,290 --> 00:24:40,110
I have the root hidden in a very secure

00:24:38,220 --> 00:24:41,070
place here and a hidden directory in my

00:24:40,110 --> 00:24:52,169
home directory

00:24:41,070 --> 00:25:00,330
I will ever know oops okay how long is

00:24:52,169 --> 00:25:06,649
this that's 330 lines of anger my anger

00:25:00,330 --> 00:25:12,960
not this so let's go down to something

00:25:06,649 --> 00:25:15,210
useful here this can you guys see my now

00:25:12,960 --> 00:25:17,070
you can okay so I'm just going to put

00:25:15,210 --> 00:25:18,990
this at the very top of the page this

00:25:17,070 --> 00:25:21,179
section and the top line there it's just

00:25:18,990 --> 00:25:23,879
see a this is a command that we run as a

00:25:21,179 --> 00:25:27,120
certificate authority we want to sign

00:25:23,879 --> 00:25:29,539
another certificate so everything inside

00:25:27,120 --> 00:25:32,850
this section which there's only one item

00:25:29,539 --> 00:25:34,129
relates to behavior for that and for

00:25:32,850 --> 00:25:37,799
some reason they added a little

00:25:34,129 --> 00:25:39,990
redirection step here so I am

00:25:37,799 --> 00:25:43,470
designating a new configuration section

00:25:39,990 --> 00:25:44,850
called self 2014 which i will use for

00:25:43,470 --> 00:25:46,830
all of my certificate authority

00:25:44,850 --> 00:25:50,870
activities inside this configuration

00:25:46,830 --> 00:25:54,690
file looks like this and it's everywhere

00:25:50,870 --> 00:25:56,159
we have items for where's the directory

00:25:54,690 --> 00:25:58,799
that the certificate authority files are

00:25:56,159 --> 00:26:02,220
stored I should mention all of this is

00:25:58,799 --> 00:26:04,440
just done with simple files it's really

00:26:02,220 --> 00:26:06,539
quite amazing how simple the system is

00:26:04,440 --> 00:26:08,580
your spending millions upon millions of

00:26:06,539 --> 00:26:09,990
billions of dollars a year on a system

00:26:08,580 --> 00:26:11,419
that's just a couple files and bits

00:26:09,990 --> 00:26:15,450
moved around here and there it's amazing

00:26:11,419 --> 00:26:17,700
anyway we have a bunch of files in here

00:26:15,450 --> 00:26:19,980
that are being used by openssl to track

00:26:17,700 --> 00:26:24,210
what certificates we have issues such as

00:26:19,980 --> 00:26:27,200
this search option and then where do we

00:26:24,210 --> 00:26:30,980
put new certificates that we paraded

00:26:27,200 --> 00:26:33,330
certificate revocation we count up

00:26:30,980 --> 00:26:35,220
numerically for however many certificate

00:26:33,330 --> 00:26:37,980
revocations we've issued so I start with

00:26:35,220 --> 00:26:40,350
1 2 3 4 we need to be able to keep track

00:26:37,980 --> 00:26:42,600
of what that number is it stores that

00:26:40,350 --> 00:26:46,320
number on a file what files it n loads

00:26:42,600 --> 00:26:49,260
in the CRR crl number fun and where

00:26:46,320 --> 00:26:51,539
should we keep the existing content

00:26:49,260 --> 00:26:52,610
revocation list well when the option c

00:26:51,539 --> 00:26:55,140
RL

00:26:52,610 --> 00:26:59,039
that's free straightforward that was

00:26:55,140 --> 00:27:01,710
skipped down to here we go extensions so

00:26:59,039 --> 00:27:03,780
when we run a when we sign it

00:27:01,710 --> 00:27:06,090
certificate we are going to add some

00:27:03,780 --> 00:27:09,270
things to that certificate we are

00:27:06,090 --> 00:27:13,320
designating a new configuration section

00:27:09,270 --> 00:27:19,940
called user underscore cert yes sorry

00:27:13,320 --> 00:27:22,590
whoops that was too much alright

00:27:19,940 --> 00:27:27,030
stopping right there the second the top

00:27:22,590 --> 00:27:29,730
that's not it there we go x509

00:27:27,030 --> 00:27:32,880
underscore extensions equals user

00:27:29,730 --> 00:27:34,110
underscore assert that is shorthand for

00:27:32,880 --> 00:27:36,510
we're defining a new configuration

00:27:34,110 --> 00:27:42,840
section called user underscore cert

00:27:36,510 --> 00:27:45,510
let's go check that out here we go as

00:27:42,840 --> 00:27:47,370
you can see all sections are defined by

00:27:45,510 --> 00:27:49,650
these brackets with spaces you can

00:27:47,370 --> 00:27:51,830
actually create arbitrary sections in

00:27:49,650 --> 00:27:54,240
the configuration file it will really

00:27:51,830 --> 00:27:55,440
make you wonder about your sanity when

00:27:54,240 --> 00:27:56,940
you come back three months later and you

00:27:55,440 --> 00:27:59,549
look at your configuration file what was

00:27:56,940 --> 00:28:00,960
I doing here like I've done that a lot

00:27:59,549 --> 00:28:04,230
with Perl code and with openssl

00:28:00,960 --> 00:28:08,580
configurations so here we're going to go

00:28:04,230 --> 00:28:10,650
through some basic items here I am

00:28:08,580 --> 00:28:13,799
looking showing you the configuration

00:28:10,650 --> 00:28:17,159
file for a root signing certificate in a

00:28:13,799 --> 00:28:19,200
typical configuration that comment right

00:28:17,159 --> 00:28:20,640
that line is uncommon which says that

00:28:19,200 --> 00:28:21,960
whatever we're signing we're not going

00:28:20,640 --> 00:28:23,520
to allow it today a certificate in fact

00:28:21,960 --> 00:28:26,970
we're going to specifically set that

00:28:23,520 --> 00:28:29,250
flag to false there is no question that

00:28:26,970 --> 00:28:31,980
this certificate cannot be used as a

00:28:29,250 --> 00:28:33,570
certificate authority but since this is

00:28:31,980 --> 00:28:36,630
a root and we're signing intermediates I

00:28:33,570 --> 00:28:38,490
need to take that out let's see what

00:28:36,630 --> 00:28:41,280
else there is I have commented out a

00:28:38,490 --> 00:28:45,020
bunch of information in here some of

00:28:41,280 --> 00:28:48,030
this is vestigial this NS cert type in s

00:28:45,020 --> 00:28:51,270
whatever it's all from the old bad old

00:28:48,030 --> 00:28:54,510
days of Netscape when you know open SSL

00:28:51,270 --> 00:28:57,419
is not even birthed yet i believe and

00:28:54,510 --> 00:29:01,470
ssl let's do the dark ages of ssl shall

00:28:57,419 --> 00:29:02,789
we say different different organizations

00:29:01,470 --> 00:29:05,159
different software they all happened

00:29:02,789 --> 00:29:05,750
differently so open SSL initially tried

00:29:05,159 --> 00:29:07,820
to cater

00:29:05,750 --> 00:29:09,050
those differences nowadays you kind of

00:29:07,820 --> 00:29:11,030
want to keep all that junk out because

00:29:09,050 --> 00:29:14,030
we're all using the same libraries they

00:29:11,030 --> 00:29:16,190
all using the same formats so here's an

00:29:14,030 --> 00:29:18,320
important little bit here you saw this

00:29:16,190 --> 00:29:20,330
it was flew by as we were looking at a

00:29:18,320 --> 00:29:23,330
certificate the subject key identifier

00:29:20,330 --> 00:29:26,360
and authority key identifier this is a

00:29:23,330 --> 00:29:29,300
way of saying it's a quick way of

00:29:26,360 --> 00:29:30,650
referring to the certificate this

00:29:29,300 --> 00:29:33,620
particular certificate which is in the

00:29:30,650 --> 00:29:36,440
subject key and the parent certificate

00:29:33,620 --> 00:29:37,910
which is in the authority key there is

00:29:36,440 --> 00:29:41,630
an interesting thing that happens the

00:29:37,910 --> 00:29:46,670
default is this line 198 you can see

00:29:41,630 --> 00:29:49,970
that line 198 is the default it uses a

00:29:46,670 --> 00:29:52,760
combined key ID and issuer straight well

00:29:49,970 --> 00:29:53,810
what happens if I reissue an immediate

00:29:52,760 --> 00:29:56,960
certificate because of something

00:29:53,810 --> 00:29:58,520
happening that invalidates all the

00:29:56,960 --> 00:30:01,520
certificates underneath it but if I'm

00:29:58,520 --> 00:30:02,750
only using the key ID it doesn't

00:30:01,520 --> 00:30:04,900
invalidate all this tickets underneath

00:30:02,750 --> 00:30:08,050
it we're getting a little flower field

00:30:04,900 --> 00:30:12,440
we're somewhere around line 200 of a 330

00:30:08,050 --> 00:30:15,170
file line file I have put a copy of this

00:30:12,440 --> 00:30:17,300
out there on the web you guys may peruse

00:30:15,170 --> 00:30:19,160
it at your leisure you will spend hours

00:30:17,300 --> 00:30:21,500
doing so if you actually get into it and

00:30:19,160 --> 00:30:23,180
it's unfortunate that almost every

00:30:21,500 --> 00:30:24,950
single item in here you have to know

00:30:23,180 --> 00:30:26,570
exactly what it is what it does what it

00:30:24,950 --> 00:30:29,090
should be set to for your particular use

00:30:26,570 --> 00:30:30,710
case it's part of the pain of becoming a

00:30:29,090 --> 00:30:33,100
certificate authority let's see what

00:30:30,710 --> 00:30:33,100
else is it

00:30:36,140 --> 00:30:39,290
that was just four hours in the config

00:30:38,120 --> 00:30:42,650
file and that's actually a really good

00:30:39,290 --> 00:30:45,410
time I spent four hours alone last night

00:30:42,650 --> 00:30:49,520
trying to fix a bug in the self sign CA

00:30:45,410 --> 00:30:51,170
here so when you go into this go into it

00:30:49,520 --> 00:30:52,490
with eyes open this is going to be hard

00:30:51,170 --> 00:30:54,650
we did sworn you at the very beginning

00:30:52,490 --> 00:30:57,130
this is hard stuff and this

00:30:54,650 --> 00:30:59,690
configuration file is a large reason why

00:30:57,130 --> 00:31:02,090
we're going to dive out of here when I

00:30:59,690 --> 00:31:07,990
change we're not whatever it is i did

00:31:02,090 --> 00:31:07,990
i'm not changing it okay back into here

00:31:08,560 --> 00:31:13,610
there we go we already talked briefly

00:31:11,000 --> 00:31:17,270
about the basic constraints item in the

00:31:13,610 --> 00:31:19,370
certificate the actual item in the

00:31:17,270 --> 00:31:21,920
configuration file or you would set this

00:31:19,370 --> 00:31:24,520
is called basic constraints let's go

00:31:21,920 --> 00:31:24,520
look at that record

00:31:28,400 --> 00:31:40,280
here we have their go this is down this

00:31:38,690 --> 00:31:44,810
is the section where I would be signing

00:31:40,280 --> 00:31:49,330
an intermediate certificates file I am

00:31:44,810 --> 00:31:53,510
setting by hand actually the house again

00:31:49,330 --> 00:31:54,860
section of my eye this is another

00:31:53,510 --> 00:31:56,450
problem with the configuration file

00:31:54,860 --> 00:31:59,120
there's lots of repetition of the same

00:31:56,450 --> 00:32:03,110
objects it's depending on how you invoke

00:31:59,120 --> 00:32:04,730
openssl so I can invoke it to create a

00:32:03,110 --> 00:32:07,430
self-signed certificate I can invoke it

00:32:04,730 --> 00:32:08,510
to create to sign another certificate I

00:32:07,430 --> 00:32:10,310
can invoke it to create a new

00:32:08,510 --> 00:32:11,450
certificate signing request each of

00:32:10,310 --> 00:32:13,550
those has different behavior with

00:32:11,450 --> 00:32:15,350
different needs and all those switches

00:32:13,550 --> 00:32:17,720
you may flip have to be set to something

00:32:15,350 --> 00:32:22,790
different in this particular case this

00:32:17,720 --> 00:32:24,950
line 246 is what I set to allow my self

00:32:22,790 --> 00:32:28,100
signed certificate to be a certificate

00:32:24,950 --> 00:32:32,170
authority with path 11 if we go and look

00:32:28,100 --> 00:32:32,170
into the intermediate

00:32:39,309 --> 00:32:47,409
there we go you will see line 225 we

00:32:45,730 --> 00:32:50,950
have the same thing only this time the

00:32:47,409 --> 00:32:53,470
path link is set to zero so that was the

00:32:50,950 --> 00:32:55,690
these two options in both the root and

00:32:53,470 --> 00:33:02,190
immediate certificate files it's in the

00:32:55,690 --> 00:33:04,539
back and now we just discussed on that

00:33:02,190 --> 00:33:07,870
best practices this will save you a lot

00:33:04,539 --> 00:33:09,309
of time and headaches for every

00:33:07,870 --> 00:33:13,090
certificate authority you're setting up

00:33:09,309 --> 00:33:14,799
create and and you can start with an

00:33:13,090 --> 00:33:16,779
identical configuration file if you like

00:33:14,799 --> 00:33:18,730
but they have different needs so you

00:33:16,779 --> 00:33:20,080
want to tailor each configuration file

00:33:18,730 --> 00:33:21,669
to the needs of that particular

00:33:20,080 --> 00:33:23,820
certificate and you want to keep those

00:33:21,669 --> 00:33:25,419
together so when you make a change to

00:33:23,820 --> 00:33:28,299
certificate you should update your

00:33:25,419 --> 00:33:30,220
configuration to match it and you want

00:33:28,299 --> 00:33:32,830
to keep them separate so if we were to

00:33:30,220 --> 00:33:34,119
do a diff between my root configuration

00:33:32,830 --> 00:33:36,100
of my intermediate configuration you

00:33:34,119 --> 00:33:37,360
would see some differences that's what

00:33:36,100 --> 00:33:40,480
will define whether it's a ruder

00:33:37,360 --> 00:33:42,879
intermediate certificate we talked about

00:33:40,480 --> 00:33:44,799
this briefly earlier hashing please

00:33:42,879 --> 00:33:47,320
don't settle for md5 please please

00:33:44,799 --> 00:33:49,149
please don't in fact a couple years ago

00:33:47,320 --> 00:33:53,019
some very clever individuals were able

00:33:49,149 --> 00:33:54,549
to generate out of thin air their own

00:33:53,019 --> 00:33:56,590
intermediate certificate authority

00:33:54,549 --> 00:34:00,429
because they were able to break open

00:33:56,590 --> 00:34:03,429
some very poor quality rude authorities

00:34:00,429 --> 00:34:04,450
and we get md5 hash they were able to

00:34:03,429 --> 00:34:06,639
create their own intermediate

00:34:04,450 --> 00:34:09,779
certificate authority they could go and

00:34:06,639 --> 00:34:09,779
sign whether they want it yes ma'am

00:34:12,929 --> 00:34:18,129
supposedly it was a proof of concept and

00:34:15,339 --> 00:34:20,619
supposedly they deleted it supposedly

00:34:18,129 --> 00:34:23,109
the vendor stopped using md5 shortly

00:34:20,619 --> 00:34:25,240
after that but I'm also pretty certain

00:34:23,109 --> 00:34:28,000
that did not revoke all the existing

00:34:25,240 --> 00:34:29,349
certs that they had so there could still

00:34:28,000 --> 00:34:32,490
be some of their certs out there within

00:34:29,349 --> 00:34:37,690
d 5 on them and they're still horrible

00:34:32,490 --> 00:34:39,750
so I could use an sha-1 hashing but

00:34:37,690 --> 00:34:43,179
we're already starting to see signs that

00:34:39,750 --> 00:34:44,980
sha-1 can be cracked open in a

00:34:43,179 --> 00:34:47,159
reasonable amount of time so let's boost

00:34:44,980 --> 00:34:50,940
it up to 128 or 256 that will add some

00:34:47,159 --> 00:34:52,659
computation time to our ssl connection

00:34:50,940 --> 00:34:53,859
but we need

00:34:52,659 --> 00:35:00,640
needed to make sure we're ensuring

00:34:53,859 --> 00:35:02,650
confidentiality for our clients that

00:35:00,640 --> 00:35:04,960
work yeah pretty much anyone in that

00:35:02,650 --> 00:35:07,750
family whatever size you want to go for

00:35:04,960 --> 00:35:13,150
I was feeling ornery and did 256 on this

00:35:07,750 --> 00:35:14,710
one ah this is an important part I want

00:35:13,150 --> 00:35:16,720
to show you a difference between the

00:35:14,710 --> 00:35:23,950
root and the intermediate certificate or

00:35:16,720 --> 00:35:26,440
a configuration the extensions there we

00:35:23,950 --> 00:35:29,829
go there's a little feature buried in to

00:35:26,440 --> 00:35:31,299
openssl that says whatever ssl

00:35:29,829 --> 00:35:33,910
extensions are added on to the

00:35:31,299 --> 00:35:36,039
certificate signing request you can pass

00:35:33,910 --> 00:35:39,150
them on through and in fact that's how I

00:35:36,039 --> 00:35:41,410
made my intermediate certificate I

00:35:39,150 --> 00:35:43,000
specified and the certificate signing

00:35:41,410 --> 00:35:44,470
request that it should be a certificate

00:35:43,000 --> 00:35:46,109
authority that should have a path think

00:35:44,470 --> 00:35:48,670
of zero that should only be used for

00:35:46,109 --> 00:35:51,250
signing certificates and revocation

00:35:48,670 --> 00:35:52,839
lists and then I told the route to pass

00:35:51,250 --> 00:35:54,849
all those information through what

00:35:52,839 --> 00:35:58,089
happens if you have an end user do the

00:35:54,849 --> 00:36:02,589
same thing if you're using this value

00:35:58,089 --> 00:36:05,079
here copy extensions equal copy it will

00:36:02,589 --> 00:36:06,670
blindly copy all the extensions that

00:36:05,079 --> 00:36:09,039
whatever whatever is in that certificate

00:36:06,670 --> 00:36:11,920
signing request into the resulting certs

00:36:09,039 --> 00:36:13,660
you may inadvertently accidentally

00:36:11,920 --> 00:36:17,559
create an intermediate certificate

00:36:13,660 --> 00:36:19,900
authority if you're not careful so for a

00:36:17,559 --> 00:36:22,510
root certificate we leave this value

00:36:19,900 --> 00:36:24,430
alone go ahead and copy those extensions

00:36:22,510 --> 00:36:27,670
we need them or intermediate certificate

00:36:24,430 --> 00:36:30,849
we comment that out and all of those

00:36:27,670 --> 00:36:32,619
extensions are just stripped out a

00:36:30,849 --> 00:36:33,760
certificate file is still produced it

00:36:32,619 --> 00:36:36,490
just is produced without those

00:36:33,760 --> 00:36:40,390
extensions so that's really important to

00:36:36,490 --> 00:36:41,410
note when you're that's really important

00:36:40,390 --> 00:36:42,760
to note when you're going through and

00:36:41,410 --> 00:36:45,579
doing your configurations for root and

00:36:42,760 --> 00:36:49,240
intermediate and if you start issuing

00:36:45,579 --> 00:36:51,339
certificates to end-users and we talked

00:36:49,240 --> 00:36:53,799
about the authority key identifier I

00:36:51,339 --> 00:36:55,059
think we're starting to get low on time

00:36:53,799 --> 00:36:56,680
so I'm going to go ahead and skip over

00:36:55,059 --> 00:36:58,089
that you can google that particular

00:36:56,680 --> 00:37:01,150
option there's a couple of different

00:36:58,089 --> 00:37:02,650
articles that excellently explain why

00:37:01,150 --> 00:37:03,910
you want it to be set one versus the

00:37:02,650 --> 00:37:06,609
other

00:37:03,910 --> 00:37:08,079
let's talk about revocation lists as a

00:37:06,609 --> 00:37:11,380
certificate authority you have a duty to

00:37:08,079 --> 00:37:14,349
maintain them if you are wanting your

00:37:11,380 --> 00:37:15,549
trust then you have to be able to tell

00:37:14,349 --> 00:37:19,900
people I don't trust this certificate

00:37:15,549 --> 00:37:21,280
anymore the old style no not all

00:37:19,900 --> 00:37:23,619
certificates are revoked for bad reasons

00:37:21,280 --> 00:37:25,569
sometimes a client needs to add another

00:37:23,619 --> 00:37:27,760
domain name into their subject ultimate

00:37:25,569 --> 00:37:29,500
names field they want to revoke the

00:37:27,760 --> 00:37:31,780
existing certificate and reissue it with

00:37:29,500 --> 00:37:33,400
the new settings that's fine it just

00:37:31,780 --> 00:37:36,039
means you have to track at revoked

00:37:33,400 --> 00:37:38,410
certificate the certificate revocation

00:37:36,039 --> 00:37:40,990
list has to be publicly accessible or

00:37:38,410 --> 00:37:43,390
else it's not useful if you have a

00:37:40,990 --> 00:37:45,309
private crl no one else can check to see

00:37:43,390 --> 00:37:47,319
if the certificates been your vote so it

00:37:45,309 --> 00:37:48,970
has to be publicly available and because

00:37:47,319 --> 00:37:50,589
we're creating root certificates

00:37:48,970 --> 00:37:53,920
intermediate certificates that last for

00:37:50,589 --> 00:37:55,780
20 years we need to make sure that the

00:37:53,920 --> 00:37:58,000
URL we assign for this certificate

00:37:55,780 --> 00:38:01,539
revocation list is going to last and

00:37:58,000 --> 00:38:03,250
modern times URLs they don't stick

00:38:01,539 --> 00:38:05,440
around for very long link rot is a very

00:38:03,250 --> 00:38:08,770
real problem we're having problems

00:38:05,440 --> 00:38:10,270
recovering data from 1999 through 2004

00:38:08,770 --> 00:38:13,960
because all those a lot of those domains

00:38:10,270 --> 00:38:15,279
are just gong or have changed so one of

00:38:13,960 --> 00:38:18,250
the things about your revocation list

00:38:15,279 --> 00:38:20,559
you are making an ironclad promise that

00:38:18,250 --> 00:38:23,589
so the length of time that this

00:38:20,559 --> 00:38:26,020
certificate exists this URL will be

00:38:23,589 --> 00:38:28,539
valid for a certificate revocation list

00:38:26,020 --> 00:38:32,770
and that's a big promise to make for a

00:38:28,539 --> 00:38:34,270
long period of time we have run into

00:38:32,770 --> 00:38:36,279
some problems with certificate

00:38:34,270 --> 00:38:38,619
revocation list think about 20 years

00:38:36,279 --> 00:38:40,510
think about even if you're only revoking

00:38:38,619 --> 00:38:42,609
a couple of certificates per day or

00:38:40,510 --> 00:38:45,430
month or however many what volume you

00:38:42,609 --> 00:38:48,579
have you start revoking enough you get a

00:38:45,430 --> 00:38:50,980
very long list I randomly pulled

00:38:48,579 --> 00:38:52,660
GoDaddy's revocation list last night for

00:38:50,980 --> 00:38:54,190
their root certificate or one of their

00:38:52,660 --> 00:38:55,750
most popular intermediate certificates

00:38:54,190 --> 00:38:58,900
it was 6 megabytes long and that's very

00:38:55,750 --> 00:39:01,359
compressed digital data they have tons

00:38:58,900 --> 00:39:03,099
and tons of revocation so that means you

00:39:01,359 --> 00:39:04,630
have to store that and that means any

00:39:03,099 --> 00:39:05,950
time someone goes out to check the

00:39:04,630 --> 00:39:08,020
revocation list they have to read

00:39:05,950 --> 00:39:10,420
through 6 megabytes with the data to

00:39:08,020 --> 00:39:13,420
find maybe that the certificate they're

00:39:10,420 --> 00:39:15,099
checking is in there as the revocation

00:39:13,420 --> 00:39:17,440
lists get larger and larger everything

00:39:15,099 --> 00:39:20,349
gets slower so we've invented enough

00:39:17,440 --> 00:39:22,030
method of doing is called ocsp which for

00:39:20,349 --> 00:39:28,630
some reason that acronym escapes me what

00:39:22,030 --> 00:39:32,079
it means thank you Wikipedia online

00:39:28,630 --> 00:39:45,310
certificate status protocol it's

00:39:32,079 --> 00:39:47,829
basically sir question that's a separate

00:39:45,310 --> 00:39:49,150
mechanism once they expire natural there

00:39:47,829 --> 00:39:51,010
is no need to keep track of them anymore

00:39:49,150 --> 00:39:53,520
except for historical reasons I have a

00:39:51,010 --> 00:39:57,160
certificate granted to this person from

00:39:53,520 --> 00:39:59,020
2003-2005 you might want that for

00:39:57,160 --> 00:40:00,339
continuity or whatever I'd keep it for

00:39:59,020 --> 00:40:02,050
business records and because it's really

00:40:00,339 --> 00:40:09,400
easy to store you don't need to revoke

00:40:02,050 --> 00:40:11,800
it yes it's exactly right once they have

00:40:09,400 --> 00:40:13,690
expired naturally you don't need the

00:40:11,800 --> 00:40:15,700
revocation anymore because the first

00:40:13,690 --> 00:40:18,040
check that happens is what's the day is

00:40:15,700 --> 00:40:19,480
it before after the valid on is it

00:40:18,040 --> 00:40:23,099
within that date window if it's not we

00:40:19,480 --> 00:40:23,099
don't do anything more sir

00:40:29,329 --> 00:40:33,559
that's correct we did talk about that

00:40:37,130 --> 00:40:44,430
yes um I honestly don't know how the

00:40:41,940 --> 00:40:46,920
bigs handle it hi I'm lazy I don't want

00:40:44,430 --> 00:40:48,569
to keep that on my CRO if you want to

00:40:46,920 --> 00:40:52,500
set your clock back to December and

00:40:48,569 --> 00:40:54,180
relive Christmas every week go ahead if

00:40:52,500 --> 00:41:01,319
that keeps your cert valid I'm not going

00:40:54,180 --> 00:41:02,910
to stop you that's exactly correct if I

00:41:01,319 --> 00:41:05,130
am just blindly assuming that this is a

00:41:02,910 --> 00:41:07,500
good certificate and I don't bother to

00:41:05,130 --> 00:41:09,390
check let's let's go through an example

00:41:07,500 --> 00:41:28,319
here that will be very good i have

00:41:09,390 --> 00:41:30,300
created where is ya so if you if you

00:41:28,319 --> 00:41:46,980
want to set your clocks back microsoft

00:41:30,300 --> 00:41:48,540
up i will stay on normal time sir those

00:41:46,980 --> 00:41:50,849
are two if the question was with a

00:41:48,540 --> 00:41:52,770
certificate be able to use ntp protocol

00:41:50,849 --> 00:41:55,440
those are two separate entities the

00:41:52,770 --> 00:41:57,690
system would use MTP to keep its time

00:41:55,440 --> 00:41:59,369
and then with now that it knows its time

00:41:57,690 --> 00:42:02,069
is set properly then it goes and does

00:41:59,369 --> 00:42:04,440
that with ssl they don't have any

00:42:02,069 --> 00:42:07,290
concept of each other although I will

00:42:04,440 --> 00:42:13,109
state that there is ssl secured ntp

00:42:07,290 --> 00:42:16,440
transactions so i forget what i was

00:42:13,109 --> 00:42:18,359
going to do what was their doing ah yes

00:42:16,440 --> 00:42:23,299
the certificate revocation example thank

00:42:18,359 --> 00:42:23,299
you let's go out to where I

00:42:24,890 --> 00:42:36,110
last presentation would generated a

00:42:27,530 --> 00:42:41,090
happy puppies certificate part 1

00:42:36,110 --> 00:42:42,830
resources presence there we go so we

00:42:41,090 --> 00:42:45,200
have the evidence of our certificate

00:42:42,830 --> 00:42:46,940
that we created we have the key file on

00:42:45,200 --> 00:42:49,400
the floor i we created a certificate

00:42:46,940 --> 00:42:51,860
signing request which we then passed

00:42:49,400 --> 00:42:53,930
over to the certificate authority that

00:42:51,860 --> 00:42:55,430
i've been showing you this morning that

00:42:53,930 --> 00:42:58,720
certificate authority signed it and

00:42:55,430 --> 00:42:58,720
return to the CRT file

00:43:05,300 --> 00:43:11,900
this is what that certificate looks like

00:43:07,300 --> 00:43:13,370
if you're being good and you are the

00:43:11,900 --> 00:43:15,710
software that's running through and

00:43:13,370 --> 00:43:21,530
doing the verification one of the things

00:43:15,710 --> 00:43:23,960
you will do is go and find you'll build

00:43:21,530 --> 00:43:27,080
a hash out of who the issuer is here

00:43:23,960 --> 00:43:30,110
it's at the top of the screen now you'll

00:43:27,080 --> 00:43:31,850
go look for that certificate and you

00:43:30,110 --> 00:43:34,010
want to verify that it matches this

00:43:31,850 --> 00:43:37,070
authority key identifier then this

00:43:34,010 --> 00:43:38,150
certificate here you are hoping that you

00:43:37,070 --> 00:43:41,000
will find our certificate revocation

00:43:38,150 --> 00:43:44,920
list let's go check that shall we is

00:43:41,000 --> 00:43:44,920
there a bless you hand up over here okay

00:43:55,130 --> 00:43:58,690
this is my intermediate certificate

00:44:06,420 --> 00:44:12,369
let's see

00:44:09,160 --> 00:44:18,180
no I did not include a CRO of this oops

00:44:12,369 --> 00:44:18,180
sorry but what we can do let's go out

00:44:18,510 --> 00:44:26,109
let's go someone named a common

00:44:23,559 --> 00:44:28,680
certificate authority parricide their

00:44:26,109 --> 00:44:28,680
signs I'm good

00:44:34,060 --> 00:44:42,450
let's go look at one of their

00:44:35,380 --> 00:44:42,450
intermediates maybe

00:44:47,890 --> 00:44:51,519
I just want to look at it there would

00:44:49,660 --> 00:44:55,559
get out here we go primary intermediate

00:44:51,519 --> 00:44:55,559
certificate I pull this down

00:45:07,670 --> 00:45:11,599
ok this is the verisign intermediate one

00:45:10,010 --> 00:45:13,640
of their intermediates we see the issue

00:45:11,599 --> 00:45:17,000
over here class 3 public primary

00:45:13,640 --> 00:45:19,490
certification Authority valid for 15

00:45:17,000 --> 00:45:25,089
years your validity is going to be

00:45:19,490 --> 00:45:27,500
coming up soon subject come down here

00:45:25,089 --> 00:45:30,440
you have a couple interesting things

00:45:27,500 --> 00:45:32,869
here we go they have ocsp right here

00:45:30,440 --> 00:45:35,960
this line towards the bottom authority

00:45:32,869 --> 00:45:37,280
information access they have ocsp they

00:45:35,960 --> 00:45:41,980
do not have a certificate revocation

00:45:37,280 --> 00:45:45,740
list because oh I did oh where is it

00:45:41,980 --> 00:45:47,630
alright let's look at that hey brilliant

00:45:45,740 --> 00:45:58,880
thank you guys for having sharp verizon

00:45:47,630 --> 00:46:04,700
me let's go look at that let's go was

00:45:58,880 --> 00:46:07,569
that calms p3 whatever there we go let's

00:46:04,700 --> 00:46:11,049
see if I can over the command to read

00:46:07,569 --> 00:46:11,049
let's just do this

00:46:14,779 --> 00:46:23,029
I cannot run with this command I

00:46:17,269 --> 00:46:25,900
apologize reading crl that it is it's

00:46:23,029 --> 00:46:25,900
just called CRO

00:46:34,150 --> 00:46:38,420
okay so this this is unfortunately not

00:46:36,949 --> 00:46:40,519
going very well and I apologize for that

00:46:38,420 --> 00:46:46,939
they have published that certificate

00:46:40,519 --> 00:46:49,729
revocation list what we can do that's

00:46:46,939 --> 00:46:52,160
only 930 3 bytes long that doesn't seem

00:46:49,729 --> 00:46:55,670
right I was expecting that to be pretty

00:46:52,160 --> 00:46:58,219
big oh well but the example hopefully is

00:46:55,670 --> 00:47:00,619
proved they have publicly available in a

00:46:58,219 --> 00:47:02,180
well known location a certificate

00:47:00,619 --> 00:47:05,029
revocation list in fact they have listed

00:47:02,180 --> 00:47:05,809
the URL in their certificate since

00:47:05,029 --> 00:47:07,939
you're going to be keeping the

00:47:05,809 --> 00:47:10,670
certificate for 15 20 30 however many

00:47:07,939 --> 00:47:12,650
years you want that URL has to be

00:47:10,670 --> 00:47:14,299
bulletproof the entire time that you're

00:47:12,650 --> 00:47:15,680
using that certificate it's one of the

00:47:14,299 --> 00:47:19,549
promises you make as a certificate

00:47:15,680 --> 00:47:21,019
authority ocsp is the same thing you are

00:47:19,549 --> 00:47:23,959
leaning you're putting into your

00:47:21,019 --> 00:47:26,180
certificate here's a link to an ocsp

00:47:23,959 --> 00:47:28,489
service I didn't explain what that is as

00:47:26,180 --> 00:47:30,079
opposed to telling the entirety of the

00:47:28,489 --> 00:47:32,599
list of all certificates that have been

00:47:30,079 --> 00:47:36,619
revoked since this certificate was

00:47:32,599 --> 00:47:39,410
issued you just ask ocsp have you

00:47:36,619 --> 00:47:42,079
invoked this certificate with this hatch

00:47:39,410 --> 00:47:44,479
and it goes and looks yes crl and says

00:47:42,079 --> 00:47:45,739
why yes I have revoked that well thank

00:47:44,479 --> 00:47:47,569
you kind sir and it goes off and says

00:47:45,739 --> 00:47:52,729
hey go toddle off we're not going to use

00:47:47,569 --> 00:47:54,199
out that's ocsp that way it prevents the

00:47:52,729 --> 00:47:55,819
client doesn't have to download a big

00:47:54,199 --> 00:47:58,160
list it doesn't have to search through a

00:47:55,819 --> 00:47:59,209
big list it doesn't have to work through

00:47:58,160 --> 00:48:01,880
a bunch of stuff that is actually

00:47:59,209 --> 00:48:04,130
meaningful to it or not meaningful to it

00:48:01,880 --> 00:48:05,989
at all it's a quick response and solves

00:48:04,130 --> 00:48:11,019
a problem that is growing as time goes

00:48:05,989 --> 00:48:11,019
on sir

00:48:13,770 --> 00:48:17,430
could you repeat the question please

00:48:20,280 --> 00:48:25,599
ironically if you do so what happens how

00:48:24,369 --> 00:48:28,359
does it check that the certificate

00:48:25,599 --> 00:48:34,260
you've secured it with is it revoked the

00:48:28,359 --> 00:48:36,730
question was the question was originally

00:48:34,260 --> 00:48:39,910
that ssl would play a role in securing

00:48:36,730 --> 00:48:43,510
those the the urls for the certificate

00:48:39,910 --> 00:48:46,990
revocation list no CSP there is a dark

00:48:43,510 --> 00:48:48,790
irony in that if you do so if it's SSL

00:48:46,990 --> 00:48:50,020
secured how do you check that the

00:48:48,790 --> 00:48:51,700
certificate that securing it isn't

00:48:50,020 --> 00:48:59,550
revoked because that's the very list

00:48:51,700 --> 00:48:59,550
here trying to check yes yes

00:49:04,580 --> 00:49:17,010
so then so the comment was that the crl

00:49:15,180 --> 00:49:19,109
is actually signed by the certificate

00:49:17,010 --> 00:49:22,859
that generated it that's a good point I

00:49:19,109 --> 00:49:26,180
just remembered that I cow let's go look

00:49:22,859 --> 00:49:26,180
at that I think I did that

00:49:30,650 --> 00:49:43,610
no buds in the route somewhere around

00:49:38,030 --> 00:49:47,180
here ah yes I did this is what the crl

00:49:43,610 --> 00:49:49,310
file looks like it's pretty much similar

00:49:47,180 --> 00:49:53,900
to a certificate file it's encrypted

00:49:49,310 --> 00:49:55,910
assigned it's been encrypted with the

00:49:53,900 --> 00:49:58,400
private key of the certificate which

00:49:55,910 --> 00:49:59,690
generated the crl and because everybody

00:49:58,400 --> 00:50:03,320
has the public key they can then use

00:49:59,690 --> 00:50:04,700
that information and decrypt list now

00:50:03,320 --> 00:50:06,110
that's computationally expensive we

00:50:04,700 --> 00:50:07,850
don't want to do that but it's the only

00:50:06,110 --> 00:50:11,570
way we can ensure that this list is

00:50:07,850 --> 00:50:14,090
being published by the certificate for

00:50:11,570 --> 00:50:15,830
which the list claims to be we don't

00:50:14,090 --> 00:50:17,180
always that we don't ever assume that

00:50:15,830 --> 00:50:18,740
people are who they say they are they

00:50:17,180 --> 00:50:21,350
have to prove it to us nothing to see

00:50:18,740 --> 00:50:23,710
authenticity is an enormous part the ssl

00:50:21,350 --> 00:50:23,710
process

00:50:30,320 --> 00:50:35,609
receive your pond

00:50:32,609 --> 00:50:35,609
this

00:50:35,870 --> 00:50:41,220
the question was if the crl is doesn't

00:50:39,480 --> 00:50:43,670
exist even though there's a URL for

00:50:41,220 --> 00:50:47,040
let's say that server has gone offline

00:50:43,670 --> 00:50:48,750
what happens the same thing for ocsp

00:50:47,040 --> 00:50:53,010
what happens and that's dependent upon

00:50:48,750 --> 00:50:55,860
the client making the request a client

00:50:53,010 --> 00:50:57,870
who's very security worried would say we

00:50:55,860 --> 00:51:00,240
can't find the crl I don't trust this

00:50:57,870 --> 00:51:03,060
I'm getting out of here other clients

00:51:00,240 --> 00:51:04,320
who want to offer a better they just

00:51:03,060 --> 00:51:08,010
want to kind of smooth things over may

00:51:04,320 --> 00:51:09,600
say okay we didn't find the crl so clear

00:51:08,010 --> 00:51:13,140
that we couldn't find this certificate

00:51:09,600 --> 00:51:15,150
on the crl that's okay and they'll just

00:51:13,140 --> 00:51:18,150
go trotted out at all whatever its its

00:51:15,150 --> 00:51:22,980
client by client there's no specific set

00:51:18,150 --> 00:51:25,080
is still on a response to this again

00:51:22,980 --> 00:51:27,480
that's it's done client signed I can't

00:51:25,080 --> 00:51:32,460
speak to it as an overarching feature of

00:51:27,480 --> 00:51:37,830
how they do it unfortunately how does

00:51:32,460 --> 00:51:40,980
Google do it oh yes I think that's

00:51:37,830 --> 00:51:44,210
stupid especially there they're signing

00:51:40,980 --> 00:51:46,830
certificates for themselves only I think

00:51:44,210 --> 00:51:48,990
this is google we're talking about they

00:51:46,830 --> 00:51:50,400
can maintain their own schools okay

00:51:48,990 --> 00:51:53,220
crawl oh that's right we talked about

00:51:50,400 --> 00:51:54,480
this yesterday I believe chrome has some

00:51:53,220 --> 00:51:56,490
oddness in the way it handles

00:51:54,480 --> 00:52:00,210
certificates that aren't valid or may be

00:51:56,490 --> 00:52:02,190
revoked chrome doesn't check the CRO at

00:52:00,210 --> 00:52:04,050
all because it takes too much time and

00:52:02,190 --> 00:52:06,240
honestly it's really big pain and we

00:52:04,050 --> 00:52:09,150
don't care it's a certificate it looks

00:52:06,240 --> 00:52:11,460
good to me let's just go on let's grow

00:52:09,150 --> 00:52:15,990
that's not me that's crawl I just happen

00:52:11,460 --> 00:52:17,400
to use Chrome maybe I shouldn't okay we

00:52:15,990 --> 00:52:23,070
are running low on time so I'm going to

00:52:17,400 --> 00:52:24,570
zip it hand probably the question is is

00:52:23,070 --> 00:52:25,920
there a plugin to mitigate that and

00:52:24,570 --> 00:52:28,350
change the chrome behavior there's

00:52:25,920 --> 00:52:29,910
probably settings if you do about config

00:52:28,350 --> 00:52:32,450
or whatever the equivalent is you could

00:52:29,910 --> 00:52:32,450
probably change it

00:52:33,560 --> 00:52:38,240
okay my listing at Google there are

00:52:36,320 --> 00:52:40,700
things if you are concerned about this

00:52:38,240 --> 00:52:42,560
there are research about it and you can

00:52:40,700 --> 00:52:44,030
go look into it I don't have that

00:52:42,560 --> 00:52:45,980
information at hand so i can't speak to

00:52:44,030 --> 00:52:47,060
it unfortunately it sounds like there's

00:52:45,980 --> 00:52:48,800
quite a few people around here that are

00:52:47,060 --> 00:53:00,890
very interested in it and can answer any

00:52:48,800 --> 00:53:04,070
questions you have so we're imperial

00:53:00,890 --> 00:53:06,380
violet org the blog of some guy with a

00:53:04,070 --> 00:53:15,070
name that's a security researcher at

00:53:06,380 --> 00:53:15,070
Google what was it again

00:53:22,340 --> 00:53:26,600
well we don't have time to look at it

00:53:23,900 --> 00:53:28,430
we're running low on time so this I'm

00:53:26,600 --> 00:53:30,080
putting this up here for viewers later

00:53:28,430 --> 00:53:32,630
to see that this is the page we're

00:53:30,080 --> 00:53:34,190
talking about it's according to doug is

00:53:32,630 --> 00:53:36,560
a great page to read up on replication

00:53:34,190 --> 00:53:39,020
and ssl and yadda yadda yadda all those

00:53:36,560 --> 00:53:41,210
pieces and parts bits we're very very

00:53:39,020 --> 00:53:43,460
long time in fact i'm probably gonna

00:53:41,210 --> 00:53:46,280
have to squeeze this off and ask about

00:53:43,460 --> 00:53:47,720
questions you might have questions

00:53:46,280 --> 00:54:13,700
things that are unclear weren't covered

00:53:47,720 --> 00:54:16,370
yes sir like me explicitly i'll have to

00:54:13,700 --> 00:54:19,830
through their side there at each step of

00:54:16,370 --> 00:54:23,500
authority yes

00:54:19,830 --> 00:54:28,060
but it's already in webbrowser he

00:54:23,500 --> 00:54:33,210
doesn't have to give my like this you

00:54:28,060 --> 00:54:36,070
mean this is a certificate that I signed

00:54:33,210 --> 00:54:39,550
using the monarch certificate authority

00:54:36,070 --> 00:54:41,320
I have accepted at the system level the

00:54:39,550 --> 00:54:44,500
monix public certificate authority as a

00:54:41,320 --> 00:54:47,470
trusted Authority and therefore that

00:54:44,500 --> 00:54:49,090
entire tree of trust the intermediate

00:54:47,470 --> 00:54:51,190
today was generated with the end user

00:54:49,090 --> 00:54:55,140
that I generated and signed all of those

00:54:51,190 --> 00:54:55,140
are considered trusted by my system and

00:54:56,970 --> 00:55:02,670
OSX it's actually quite simple let's do

00:55:00,460 --> 00:55:02,670
this

00:55:10,260 --> 00:55:15,840
really long into the

00:55:17,760 --> 00:55:22,210
yes they don't want just anybody

00:55:20,740 --> 00:55:24,250
creating their own certificate authority

00:55:22,210 --> 00:55:25,540
anybody can't we've learned how to do it

00:55:24,250 --> 00:55:27,130
today although we didn't get a chance to

00:55:25,540 --> 00:55:28,510
actually do it we've learned all the

00:55:27,130 --> 00:55:30,100
pieces and parts needed we could all

00:55:28,510 --> 00:55:31,660
make our own individual certificate

00:55:30,100 --> 00:55:32,950
authorities we could create certificate

00:55:31,660 --> 00:55:39,970
saying throw that of each other put them

00:55:32,950 --> 00:55:49,990
out and have fun the problem is is start

00:55:39,970 --> 00:55:52,450
ssl again that's correct at some point

00:55:49,990 --> 00:55:54,490
you have to extend trust to some thing

00:55:52,450 --> 00:55:55,690
and there have been a lot of companies

00:55:54,490 --> 00:55:57,730
who have gone through the arduous

00:55:55,690 --> 00:56:01,980
process of proving you can trust us

00:55:57,730 --> 00:56:01,980
here's our security here's our vault

00:56:04,350 --> 00:56:12,310
alright yes the CA shirts I'm not going

00:56:10,630 --> 00:56:15,310
to touch that right now that's that's a

00:56:12,310 --> 00:56:17,350
whole other ball of wax your browser's

00:56:15,310 --> 00:56:20,800
individually may choose to do it one way

00:56:17,350 --> 00:56:22,270
or another chrome uses the system here

00:56:20,800 --> 00:56:24,250
on OS 10 I don't know how it does it in

00:56:22,270 --> 00:56:26,260
Linux I think it also uses the system so

00:56:24,250 --> 00:56:27,970
there are a way so you can specifically

00:56:26,260 --> 00:56:29,440
choose to trust a certificate authority

00:56:27,970 --> 00:56:32,380
that you have created or someone else

00:56:29,440 --> 00:56:33,790
you trust is created those ways are

00:56:32,380 --> 00:56:38,220
dependent upon the system in the browser

00:56:33,790 --> 00:56:38,220
you're using give any other questions

00:56:40,539 --> 00:56:45,479
okay great thank you guys for coming I

00:56:42,910 --> 00:56:45,479
hope you learned a lot

00:56:48,849 --> 00:56:53,470
these presentations for the last two

00:56:51,579 --> 00:56:58,239
will be online permanently at the

00:56:53,470 --> 00:56:59,710
location here self 2014 grimoire II you

00:56:58,239 --> 00:57:07,630
can go back and refer to these at your

00:56:59,710 --> 00:57:09,400
leisure thanks for coming guys your

00:57:07,630 --> 00:57:10,900
customers rely on your website or

00:57:09,400 --> 00:57:13,269
application if it's slower

00:57:10,900 --> 00:57:16,239
non-responsive it infuriates your users

00:57:13,269 --> 00:57:18,039
and costs you money keeping your

00:57:16,239 --> 00:57:21,560
business critical systems humming along

00:57:18,039 --> 00:57:23,870
requires insight into what they're doing

00:57:21,560 --> 00:57:25,820
your system metrics tells stories

00:57:23,870 --> 00:57:27,830
stories that can reveal performance

00:57:25,820 --> 00:57:30,170
bottlenecks resource limitations and

00:57:27,830 --> 00:57:31,730
other problems but how do you keep an

00:57:30,170 --> 00:57:34,370
eye on all of your systems performance

00:57:31,730 --> 00:57:37,400
metrics in real-time and record this

00:57:34,370 --> 00:57:39,170
data for later analysis enter longview

00:57:37,400 --> 00:57:41,180
the new way to see what's really going

00:57:39,170 --> 00:57:43,340
on under the hood the long view

00:57:41,180 --> 00:57:45,410
dashboard lets you visualize the status

00:57:43,340 --> 00:57:47,870
of all your systems providing you with a

00:57:45,410 --> 00:57:51,230
bird's-eye view of your entire fleet you

00:57:47,870 --> 00:57:53,810
can sort by cpu memory swap processes

00:57:51,230 --> 00:57:55,580
load and network usage click a specific

00:57:53,810 --> 00:57:57,980
system to access its individual

00:57:55,580 --> 00:58:00,490
dashboard then click and drag to zoom in

00:57:57,980 --> 00:58:02,900
on chokepoints and get more detail

00:58:00,490 --> 00:58:04,550
comprehensive network data including

00:58:02,900 --> 00:58:06,890
inbound and outbound traffic is

00:58:04,550 --> 00:58:08,450
available on the network tab and disk

00:58:06,890 --> 00:58:10,370
rights and free space on the disk

00:58:08,450 --> 00:58:13,190
stabbed while the process Explorer

00:58:10,370 --> 00:58:15,740
displays usage statistics for individual

00:58:13,190 --> 00:58:17,900
processes the system info tab shows

00:58:15,740 --> 00:58:20,150
listening services active connections

00:58:17,900 --> 00:58:22,280
and available updates adding long view

00:58:20,150 --> 00:58:23,990
to a system is easy just click the

00:58:22,280 --> 00:58:26,120
button copy the one line installation

00:58:23,990 --> 00:58:28,580
command then run the command on your

00:58:26,120 --> 00:58:30,260
linux system to complete the process the

00:58:28,580 --> 00:58:32,450
agent will begin collecting data and

00:58:30,260 --> 00:58:34,280
sending it to longview then the graph

00:58:32,450 --> 00:58:36,860
start rolling

00:58:34,280 --> 00:58:39,230
used longview to gain visibility into

00:58:36,860 --> 00:58:42,970
your servers so when your website or app

00:58:39,230 --> 00:58:42,970

YouTube URL: https://www.youtube.com/watch?v=_bOVaJSMIZc


