Title: 2014 SouthEast LinuxFest - Joseph Tate - Driving AWS with Ansible
Publication date: 2015-05-17
Playlist: 2014 SouthEast LinuxFest
Description: 
	2014 SouthEast LinuxFest
Joseph Tate
Driving AWS with Ansible
Captions: 
	00:00:00,000 --> 00:00:05,339
the following presentation was recorded

00:00:02,490 --> 00:00:08,189
the 2014 southeast linux fest in

00:00:05,339 --> 00:00:11,070
charlotte north carolina it is licensed

00:00:08,189 --> 00:00:15,150
under a creative commons license for

00:00:11,070 --> 00:00:18,330
more information visit www.fcn expense

00:00:15,150 --> 00:00:20,310
org the southeast linux fest would like

00:00:18,330 --> 00:00:22,769
to thank the following diamond sponsors

00:00:20,310 --> 00:00:28,230
in 2014 for helping make these videos

00:00:22,769 --> 00:00:30,359
possible and action my name is joseph

00:00:28,230 --> 00:00:33,480
tape i live in durham i work for a

00:00:30,359 --> 00:00:35,760
company in california i do that by

00:00:33,480 --> 00:00:39,829
shelling in mostly and by running

00:00:35,760 --> 00:00:43,770
ansible a whole lot i am a programmer by

00:00:39,829 --> 00:00:45,899
schooling and by 12 13 years of

00:00:43,770 --> 00:00:49,710
experience having and now recently

00:00:45,899 --> 00:00:53,460
shifting to operations my official title

00:00:49,710 --> 00:00:56,460
is senior devops engineer which means

00:00:53,460 --> 00:00:58,350
basically i run building and deployment

00:00:56,460 --> 00:01:00,390
infrastructure for for the company i

00:00:58,350 --> 00:01:02,460
work for company is called crunchy oh

00:01:00,390 --> 00:01:05,939
you'll probably see it flash across the

00:01:02,460 --> 00:01:08,040
screen a couple of times but we are

00:01:05,939 --> 00:01:12,780
stealthy start-up so there's not going

00:01:08,040 --> 00:01:16,189
to be much on the internet about us so

00:01:12,780 --> 00:01:19,470
first off what is ansible ansibles a

00:01:16,189 --> 00:01:20,909
cross-platform configure it's a cross

00:01:19,470 --> 00:01:23,939
it's also a cross between a

00:01:20,909 --> 00:01:26,460
configuration management tool like CF

00:01:23,939 --> 00:01:30,320
engine and a remote system

00:01:26,460 --> 00:01:30,320
administration tool like puppet

00:01:30,620 --> 00:01:37,460
it's used to control a set of machines

00:01:33,710 --> 00:01:42,320
in a stateful repeatable reliably

00:01:37,460 --> 00:01:45,950
ordered way typically with ansible

00:01:42,320 --> 00:01:49,010
instead of saying if the condition is

00:01:45,950 --> 00:01:51,920
this do this if the condition is this

00:01:49,010 --> 00:01:56,720
other thing do this other thing you

00:01:51,920 --> 00:01:58,760
declare a desired state and the software

00:01:56,720 --> 00:02:01,430
itself figures out how to get there and

00:01:58,760 --> 00:02:04,070
i'll explain a little bit more of what

00:02:01,430 --> 00:02:06,020
that means as we go along so what kinds

00:02:04,070 --> 00:02:11,570
of things can you do a danceable here a

00:02:06,020 --> 00:02:14,330
couple of things so let's look at

00:02:11,570 --> 00:02:17,360
something very simple hey three slides

00:02:14,330 --> 00:02:21,080
and already we're doing demos ansible

00:02:17,360 --> 00:02:25,250
it's as a command is used to run a

00:02:21,080 --> 00:02:27,890
single task ansible playbook is used to

00:02:25,250 --> 00:02:31,970
string a set of commands together into a

00:02:27,890 --> 00:02:34,430
repeatable process alright so the first

00:02:31,970 --> 00:02:38,989
thing we're going to do is connect to a

00:02:34,430 --> 00:02:42,050
system in this case localhost and see

00:02:38,989 --> 00:02:46,270
what variables are available everybody

00:02:42,050 --> 00:02:46,270
see that is that too small

00:02:48,910 --> 00:02:54,569
so it's

00:02:51,819 --> 00:02:54,569
scroll up

00:02:56,720 --> 00:03:05,099
so this this is the set up command the

00:03:01,020 --> 00:03:07,290
set of command is kind of a base level

00:03:05,099 --> 00:03:10,440
module in ansible that connects to a

00:03:07,290 --> 00:03:14,489
system and collects a bunch of facts

00:03:10,440 --> 00:03:16,800
about that system you can see here what

00:03:14,489 --> 00:03:19,590
the IP address is what the architecture

00:03:16,800 --> 00:03:23,930
is the bios all of the kinds of things

00:03:19,590 --> 00:03:30,060
you would use with lspci or or lsusb

00:03:23,930 --> 00:03:37,640
kind of the the the environment

00:03:30,060 --> 00:03:43,980
variables the hard disk layout the

00:03:37,640 --> 00:03:46,500
processor the number of cores the yeah

00:03:43,980 --> 00:03:50,519
so all of these facts are available just

00:03:46,500 --> 00:03:53,370
by by running this setup command you'll

00:03:50,519 --> 00:03:55,530
notice I use local that was running

00:03:53,370 --> 00:03:57,120
against my local system this is all of

00:03:55,530 --> 00:04:00,560
the information that's available to me

00:03:57,120 --> 00:04:04,549
as a regular user on the local system

00:04:00,560 --> 00:04:04,549
and then just by

00:04:05,060 --> 00:04:11,920
changing the inventory in the hostname I

00:04:08,920 --> 00:04:11,920
can

00:04:13,840 --> 00:04:17,129
are on the same thing

00:04:18,450 --> 00:04:26,030
against a remote host and it will use my

00:04:20,910 --> 00:04:26,030
ssh key connect to my remote host

00:04:26,080 --> 00:04:32,159
and pull down the same information so

00:04:32,849 --> 00:04:39,740
that's ansible and then if I wanted to

00:04:35,789 --> 00:04:44,569
do something like make sure that I'm not

00:04:39,740 --> 00:04:48,749
exposed to heart bleed or something I

00:04:44,569 --> 00:04:51,899
can run this command once you go to my

00:04:48,749 --> 00:04:56,429
remote system make sure that open SSL is

00:04:51,899 --> 00:04:59,849
to the latest version and return so I

00:04:56,429 --> 00:05:02,039
don't need to say what version is it I

00:04:59,849 --> 00:05:04,499
don't need to say if you're not at the

00:05:02,039 --> 00:05:06,539
latest word and update it I just need to

00:05:04,499 --> 00:05:08,639
say make sure i'm at the latest burger

00:05:06,539 --> 00:05:12,559
that's what declarative means in this

00:05:08,639 --> 00:05:12,559
case alright so

00:05:14,600 --> 00:05:19,160
so single commands are great and there

00:05:17,540 --> 00:05:20,630
are they're good for those one-off type

00:05:19,160 --> 00:05:24,560
task like checking to make sure you're

00:05:20,630 --> 00:05:27,950
not exposed to heart bleed but you can

00:05:24,560 --> 00:05:32,360
build these tasks together into play

00:05:27,950 --> 00:05:33,980
books this way you can not just make

00:05:32,360 --> 00:05:37,100
sure that open a cell is all the way up

00:05:33,980 --> 00:05:40,400
to date but you can deploy an entire

00:05:37,100 --> 00:05:45,380
lamp stack your app setup database

00:05:40,400 --> 00:05:47,420
chemical databases and tests to make

00:05:45,380 --> 00:05:50,660
sure they're up before you exit your

00:05:47,420 --> 00:05:52,910
your script but first let's talk about

00:05:50,660 --> 00:05:58,240
inventories inventories are a way to

00:05:52,910 --> 00:06:01,160
organize your systems into different

00:05:58,240 --> 00:06:04,340
collections that make sense to your

00:06:01,160 --> 00:06:07,660
organization's for example you can group

00:06:04,340 --> 00:06:12,830
servers by geography so that stuff like

00:06:07,660 --> 00:06:16,780
ntp servers or mirrors to check updates

00:06:12,830 --> 00:06:20,510
to or you know other kind of localized

00:06:16,780 --> 00:06:24,560
settings can be set as on a geographic

00:06:20,510 --> 00:06:27,490
group level you can group servers by

00:06:24,560 --> 00:06:30,280
purpose so that you can have

00:06:27,490 --> 00:06:32,229
database servers treated differently

00:06:30,280 --> 00:06:36,039
from web servers treated differently

00:06:32,229 --> 00:06:40,660
from I don't know your backup

00:06:36,039 --> 00:06:43,090
infrastructure service servers and you

00:06:40,660 --> 00:06:46,740
can you can also group them by machine

00:06:43,090 --> 00:06:50,080
type or by kind of physical

00:06:46,740 --> 00:06:52,840
characteristics so there are three

00:06:50,080 --> 00:06:56,370
things three three types of items that

00:06:52,840 --> 00:06:59,500
you would list in an inventory a simple

00:06:56,370 --> 00:07:02,860
first is is the you'll notice that kind

00:06:59,500 --> 00:07:06,460
of looks like an ini file inside your

00:07:02,860 --> 00:07:10,479
your bracket is a group name and then

00:07:06,460 --> 00:07:13,750
below that you a list hosts hosts and

00:07:10,479 --> 00:07:16,180
then specific values that pertain just

00:07:13,750 --> 00:07:19,380
to that post and then you'll also notice

00:07:16,180 --> 00:07:19,380
on that third line

00:07:19,430 --> 00:07:28,580
there's a shortcut instead of listing s3

00:07:24,590 --> 00:07:33,950
s4 s5 s6 all the way to s 30 you can say

00:07:28,580 --> 00:07:36,140
s 3 colon 32 expand to all of those you

00:07:33,950 --> 00:07:40,580
can also group groups into a hierarchy

00:07:36,140 --> 00:07:43,130
and you do that by saying meta group 1

00:07:40,580 --> 00:07:46,280
when children is group 1 which is group

00:07:43,130 --> 00:07:48,610
to find above and so you can build so a

00:07:46,280 --> 00:07:51,260
machine can exist in more than one group

00:07:48,610 --> 00:07:54,700
so you can have a database server in the

00:07:51,260 --> 00:07:54,700
East Coast region

00:07:56,370 --> 00:08:01,320
but it's a you know an eight-way see on

00:07:59,100 --> 00:08:05,479
and so you this one machine can be a

00:08:01,320 --> 00:08:05,479
member of these these different groups

00:08:05,870 --> 00:08:14,040
so I mentioned the brackets and in the

00:08:10,260 --> 00:08:17,990
hierarchies for the most part as the

00:08:14,040 --> 00:08:21,330
best practice you want to keep variables

00:08:17,990 --> 00:08:23,310
besides connection variables make

00:08:21,330 --> 00:08:25,890
variables that you need to set in order

00:08:23,310 --> 00:08:28,500
to connect to a host like what s what s

00:08:25,890 --> 00:08:32,430
SH user do you use what port does it

00:08:28,500 --> 00:08:34,350
need to go over those those are the

00:08:32,430 --> 00:08:37,890
kinds of variables you would keep in a

00:08:34,350 --> 00:08:40,110
in an inventory file but most ansible

00:08:37,890 --> 00:08:41,790
variables are most variables that you'd

00:08:40,110 --> 00:08:43,169
want to set you'll want to do in a

00:08:41,790 --> 00:08:45,740
different in a different way that I'll

00:08:43,169 --> 00:08:45,740
show in a minute

00:08:45,870 --> 00:08:49,880
okay so an inventory lets you

00:08:50,020 --> 00:08:57,370
only run specific tasks or lets you

00:08:54,670 --> 00:09:02,160
organize the variables or the

00:08:57,370 --> 00:09:02,160
configuration for for the servers in

00:09:03,279 --> 00:09:08,940
in a way that makes sense

00:09:06,390 --> 00:09:12,620
alright I'm going to kind of show you

00:09:08,940 --> 00:09:12,620
rather than try to tell you

00:09:14,550 --> 00:09:17,540
are so I got

00:09:23,600 --> 00:09:29,030
bigger eyes this

00:09:25,440 --> 00:09:29,030
alright so this is a

00:09:32,160 --> 00:09:37,720
this is an inventory file for a to host

00:09:35,810 --> 00:09:40,569
system

00:09:37,720 --> 00:09:42,570
that I run our production server on

00:09:40,569 --> 00:09:44,970
right now

00:09:42,570 --> 00:09:48,900
I use localhost because I have to tunnel

00:09:44,970 --> 00:09:52,260
into a VPC in AWS in order to connect to

00:09:48,900 --> 00:09:54,540
it so where you see localhost and 127

00:09:52,260 --> 00:09:58,680
200 up to imagine those are two

00:09:54,540 --> 00:10:02,010
different hosts host names and you

00:09:58,680 --> 00:10:04,980
notice the ssh ports are in there I also

00:10:02,010 --> 00:10:07,940
set a host name variable because i have

00:10:04,980 --> 00:10:12,290
commands in my answerable playbook that

00:10:07,940 --> 00:10:16,250
set the host name on the machine and

00:10:12,290 --> 00:10:19,280
this is better the best way to do that

00:10:16,250 --> 00:10:23,520
but you'll see also that I have

00:10:19,280 --> 00:10:26,250
basically i've divided my my stuff into

00:10:23,520 --> 00:10:29,880
ansible availability or a AWS and

00:10:26,250 --> 00:10:32,550
availability zones and then further by

00:10:29,880 --> 00:10:35,910
machine types ocz nine servers DB

00:10:32,550 --> 00:10:38,820
servers and then web servers and then

00:10:35,910 --> 00:10:41,940
I've got them collected into a web

00:10:38,820 --> 00:10:45,360
servers group a DB servers group as easy

00:10:41,940 --> 00:10:48,450
9 servers group and then beta which is

00:10:45,360 --> 00:10:51,660
the whole the whole shebang

00:10:48,450 --> 00:10:54,450
and so when I run us when I run an

00:10:51,660 --> 00:10:58,830
ansible playbook the tasks that pertain

00:10:54,450 --> 00:11:01,940
to zz9 servers zz9 is our our database

00:10:58,830 --> 00:11:05,160
syst are our homegrown database system

00:11:01,940 --> 00:11:08,580
those those tests that pertain to zz9

00:11:05,160 --> 00:11:11,310
servers will only run on those machines

00:11:08,580 --> 00:11:15,510
those tasks that pertain to web servers

00:11:11,310 --> 00:11:18,000
will only run on the web servers and

00:11:15,510 --> 00:11:22,650
those tasks that pertain to beta as a

00:11:18,000 --> 00:11:25,020
group will run on all of the machines so

00:11:22,650 --> 00:11:29,610
what does that look like I'm getting

00:11:25,020 --> 00:11:32,120
ahead of myself a little bit but that

00:11:29,610 --> 00:11:32,120
looks like

00:11:34,910 --> 00:11:41,800
No

00:11:36,620 --> 00:11:41,800
oh ok so I have

00:11:42,490 --> 00:11:49,089
for the hosts DB servers web servers and

00:11:45,550 --> 00:11:54,399
zz9 servers run the common role common

00:11:49,089 --> 00:11:57,370
role is a is a set of tasks that that

00:11:54,399 --> 00:11:59,320
I'm asking it to get clean and then so

00:11:57,370 --> 00:12:02,440
forth for the other roles that are in

00:11:59,320 --> 00:12:09,240
this in the file and all I'll explain

00:12:02,440 --> 00:12:09,240
what roles are in a minute so

00:12:12,690 --> 00:12:17,550
the ansible also lets you because of the

00:12:14,970 --> 00:12:20,270
grouping system you can differentiate

00:12:17,550 --> 00:12:20,270
between your

00:12:22,240 --> 00:12:31,100
between your hosts by purpose as well so

00:12:25,910 --> 00:12:34,360
staging can be this you can use the same

00:12:31,100 --> 00:12:36,710
playbook as your production system as

00:12:34,360 --> 00:12:39,650
can your all of your testing

00:12:36,710 --> 00:12:42,580
infrastructure just by making variations

00:12:39,650 --> 00:12:42,580
to your inventories

00:12:43,050 --> 00:12:48,570
I'm probably jumbling this up a little

00:12:45,540 --> 00:12:52,010
bit so if you have questions please feel

00:12:48,570 --> 00:12:52,010
free to stop me and

00:12:53,740 --> 00:12:57,720
I'll try to try to make it clear

00:12:57,960 --> 00:13:03,240
okay so what about all of these

00:13:00,230 --> 00:13:05,700
configuration variables the way that you

00:13:03,240 --> 00:13:08,240
set those up is through through

00:13:05,700 --> 00:13:12,370
variables that match up to your groups

00:13:08,240 --> 00:13:14,560
for example in this

00:13:12,370 --> 00:13:17,190
this this represents a directory

00:13:14,560 --> 00:13:21,010
structure in your in your PlayBook

00:13:17,190 --> 00:13:22,960
system ansible might be your root level

00:13:21,010 --> 00:13:26,460
underneath that you'll have an inventory

00:13:22,960 --> 00:13:30,339
directory under inventories you'll have

00:13:26,460 --> 00:13:33,460
testing development staging project

00:13:30,339 --> 00:13:37,000
production inventories and then under

00:13:33,460 --> 00:13:40,200
group bars you'll have a subdirectory

00:13:37,000 --> 00:13:40,200
you'll have

00:13:41,470 --> 00:13:46,690
you'll have sets of files that just

00:13:44,170 --> 00:13:49,990
described the configuration changes that

00:13:46,690 --> 00:13:52,450
happen in each of those groups that

00:13:49,990 --> 00:13:56,110
you've defined in your inventories so

00:13:52,450 --> 00:13:58,930
for example I with a special group

00:13:56,110 --> 00:14:02,520
called all all would be kind of the

00:13:58,930 --> 00:14:09,280
lowest level default level of

00:14:02,520 --> 00:14:10,750
configuration so all and it is a list of

00:14:09,280 --> 00:14:13,480
all of the variables that you define

00:14:10,750 --> 00:14:16,230
that can later be overridden by more

00:14:13,480 --> 00:14:16,230
specific groups

00:14:16,380 --> 00:14:21,600
so production variables can override all

00:14:18,840 --> 00:14:25,130
if you had production I like these

00:14:21,600 --> 00:14:28,740
production zz9 servers that would also

00:14:25,130 --> 00:14:30,570
that would override production and so

00:14:28,740 --> 00:14:33,330
forth so you can have different sets of

00:14:30,570 --> 00:14:36,450
configuration for different deployment

00:14:33,330 --> 00:14:39,570
scenarios so I have my production group

00:14:36,450 --> 00:14:42,030
variables and I have vagrant group

00:14:39,570 --> 00:14:44,460
variables because my vagrant installed

00:14:42,030 --> 00:14:46,740
is a little bit different from from my

00:14:44,460 --> 00:14:50,520
production namely I don't install my

00:14:46,740 --> 00:14:54,780
associate my ssh or I don't install ssh

00:14:50,520 --> 00:14:56,850
keys in vagrant and I don't and I set up

00:14:54,780 --> 00:14:59,730
a self-signed certificate in vagrant and

00:14:56,850 --> 00:15:02,900
I don't do that in production you can

00:14:59,730 --> 00:15:07,140
also use group variables if you set up

00:15:02,900 --> 00:15:09,570
geography Geographic groups this way so

00:15:07,140 --> 00:15:14,610
you could set in no northridge Northern

00:15:09,570 --> 00:15:18,470
Virginia you could have ntp servers that

00:15:14,610 --> 00:15:18,470
are pertinent to those servers

00:15:20,980 --> 00:15:24,269
so that looks like

00:15:35,580 --> 00:15:38,240
ok

00:15:41,510 --> 00:15:50,210
so this is a a list of variables that I

00:15:44,120 --> 00:15:52,010
use to to deploy our application I have

00:15:50,210 --> 00:15:54,650
things like here like whether or not to

00:15:52,010 --> 00:15:57,020
use engine X whether or not to use Redis

00:15:54,650 --> 00:16:01,240
whether you use a local copy of Retta

00:15:57,020 --> 00:16:01,240
soryu Celestica the

00:16:02,480 --> 00:16:08,899
the the service that Amazon provides

00:16:05,380 --> 00:16:14,440
what ports to listen to how many HTTP

00:16:08,899 --> 00:16:16,880
threads what the public URL is which is

00:16:14,440 --> 00:16:21,800
amazingly difficult to determine from

00:16:16,880 --> 00:16:27,350
inside a nap sometimes a couple of repo

00:16:21,800 --> 00:16:29,810
names some magic about so name host is

00:16:27,350 --> 00:16:31,670
host name backwards so that that magic

00:16:29,810 --> 00:16:34,370
there takes the the public hostname

00:16:31,670 --> 00:16:38,720
splits it on the periods reverses it and

00:16:34,370 --> 00:16:42,470
stuffs it all back together so public

00:16:38,720 --> 00:16:49,630
domain because cookies happen on the

00:16:42,470 --> 00:16:49,630
domain so keys and some

00:16:50,720 --> 00:16:59,519
 information file limits and so

00:16:56,820 --> 00:17:01,440
forth anyway so this is this is the list

00:16:59,519 --> 00:17:05,280
of variables that we've determined are

00:17:01,440 --> 00:17:08,010
necessary to to do to define our app and

00:17:05,280 --> 00:17:10,140
if I need to override any single one of

00:17:08,010 --> 00:17:13,110
these or any group of them I can create

00:17:10,140 --> 00:17:16,850
I can create a new group bars file that

00:17:13,110 --> 00:17:16,850
pertains just to that set of systems

00:17:18,880 --> 00:17:21,480
ok

00:17:24,199 --> 00:17:33,500
so variables have a defined or well well

00:17:29,090 --> 00:17:35,419
defined precedence order at the top our

00:17:33,500 --> 00:17:39,169
command line variables those override

00:17:35,419 --> 00:17:41,480
everything post variables group variable

00:17:39,169 --> 00:17:44,120
or rather yeah post variables then are

00:17:41,480 --> 00:17:45,620
the next most important things so in

00:17:44,120 --> 00:17:48,529
addition to group bars you can set up

00:17:45,620 --> 00:17:50,720
host cars with files underneath that

00:17:48,529 --> 00:17:55,840
match specific host names in your

00:17:50,720 --> 00:17:55,840
inventories group variables like all

00:17:56,120 --> 00:18:00,320
and then facts that are discovered from

00:17:58,250 --> 00:18:04,610
the system itself like using that set up

00:18:00,320 --> 00:18:06,980
module and that fax those facts are

00:18:04,610 --> 00:18:10,280
collected on every ansible playbook run

00:18:06,980 --> 00:18:15,080
unless you disable it so one thing that

00:18:10,280 --> 00:18:19,760
I do try to be a little bit flexible

00:18:15,080 --> 00:18:21,260
about how how the app deploys python has

00:18:19,760 --> 00:18:23,530
this thing called a global interpreter

00:18:21,260 --> 00:18:28,760
lock that means that if you have a

00:18:23,530 --> 00:18:32,690
python process inside the c code that is

00:18:28,760 --> 00:18:36,140
running python it locks itself to a

00:18:32,690 --> 00:18:38,600
single processor so even if you have a

00:18:36,140 --> 00:18:41,780
multi-threaded application it only runs

00:18:38,600 --> 00:18:43,370
on a single that single processor so

00:18:41,780 --> 00:18:45,380
what that means is you want to fire up

00:18:43,370 --> 00:18:49,670
if you have four processors running you

00:18:45,380 --> 00:18:51,380
want to fire up for Python processes so

00:18:49,670 --> 00:18:57,299
that you have one process running on

00:18:51,380 --> 00:18:59,489
each on each process processor

00:18:57,299 --> 00:19:04,259
and in order to do that I take the facts

00:18:59,489 --> 00:19:06,480
that I discover from the system and do

00:19:04,259 --> 00:19:09,149
some simple map on it so I look at the

00:19:06,480 --> 00:19:11,460
number of processors the number of cores

00:19:09,149 --> 00:19:14,700
in each processor and the number of

00:19:11,460 --> 00:19:15,929
threads in each core and I multiply all

00:19:14,700 --> 00:19:18,269
those together and that gives me a

00:19:15,929 --> 00:19:21,989
number of how many Python processors

00:19:18,269 --> 00:19:25,950
processes to run in in the define in the

00:19:21,989 --> 00:19:28,049
in the deployed system generally you

00:19:25,950 --> 00:19:29,399
want to keep these variables tidy so you

00:19:28,049 --> 00:19:34,200
don't have to look too many places to

00:19:29,399 --> 00:19:38,240
see which value was stick so don't use

00:19:34,200 --> 00:19:40,190
all of these but

00:19:38,240 --> 00:19:44,350
they're all useful I don't tend to use

00:19:40,190 --> 00:19:44,350
the command line variables except when

00:19:44,960 --> 00:19:50,659
you say oh no this isn't working with me

00:19:48,230 --> 00:19:55,149
I don't have time to change the files

00:19:50,659 --> 00:19:55,149
just overwrite it

00:19:55,250 --> 00:19:59,750
so what kinds of things we've already

00:19:57,050 --> 00:20:02,260
looked looked at some of them here are a

00:19:59,750 --> 00:20:02,260
couple more

00:20:05,700 --> 00:20:11,659
some things that might vary from one

00:20:07,710 --> 00:20:11,659
inventory group to the next

00:20:15,190 --> 00:20:21,999
here are some things that might vary

00:20:17,720 --> 00:20:21,999
from one environment to the next

00:20:25,900 --> 00:20:31,740
so variables let you handle these

00:20:28,060 --> 00:20:31,740
variations without

00:20:32,330 --> 00:20:39,159
messing up your playbooks too much

00:20:35,799 --> 00:20:39,159
what yes

00:21:04,720 --> 00:21:09,909
okay so this this is the introduction

00:21:07,179 --> 00:21:14,919
ansible I haven't yet gotten to the AWS

00:21:09,909 --> 00:21:18,100
thing does that hope so the question was

00:21:14,919 --> 00:21:19,450
the new to ansible and AWS he's

00:21:18,100 --> 00:21:23,010
wondering what kinds of things he needs

00:21:19,450 --> 00:21:23,010
to do to just get started

00:21:24,550 --> 00:21:32,820
I will get to the where I'd Drive an AWS

00:21:28,390 --> 00:21:35,950
using ansible in just a few minutes I

00:21:32,820 --> 00:21:39,330
want to kind of explain what but

00:21:35,950 --> 00:21:42,760
basically in order to get started with

00:21:39,330 --> 00:21:47,200
ansible for the first time I would set

00:21:42,760 --> 00:21:51,640
up a playbook to run against vagrant or

00:21:47,200 --> 00:21:55,090
run against your maybe a virtual post

00:21:51,640 --> 00:21:58,150
that you have running locally or even a

00:21:55,090 --> 00:22:00,750
vagrant or even an ansible playbook that

00:21:58,150 --> 00:22:03,430
would run against the local system

00:22:00,750 --> 00:22:09,190
because the round trip times are much

00:22:03,430 --> 00:22:11,800
faster you see when we connected to two

00:22:09,190 --> 00:22:15,760
to Amazon so this is actually going out

00:22:11,800 --> 00:22:17,549
to Amazon to run this update command

00:22:15,760 --> 00:22:19,160
takes

00:22:17,549 --> 00:22:22,210
a chunk of time

00:22:19,160 --> 00:22:24,550
just because of the latency is involved

00:22:22,210 --> 00:22:27,040
so you wanted you want to debug on a

00:22:24,550 --> 00:22:32,320
local or as close to the system that

00:22:27,040 --> 00:22:34,000
you're working on as possible that's

00:22:32,320 --> 00:22:38,830
kind of my rule of thumb for everything

00:22:34,000 --> 00:22:42,760
I always try to build in and maintain my

00:22:38,830 --> 00:22:46,570
my ansible playbooks against local

00:22:42,760 --> 00:22:49,170
systems because I can do things quickly

00:22:46,570 --> 00:22:49,170
yes

00:23:14,620 --> 00:23:19,200
so the question is if you have

00:23:21,049 --> 00:23:28,299
you have inventories and variables how

00:23:24,889 --> 00:23:28,299
can you compose them but

00:23:48,120 --> 00:23:53,190
okay so so the question is are the are

00:23:51,000 --> 00:23:55,440
the variables that you set up specific

00:23:53,190 --> 00:23:59,540
to a playbook or they specific to a role

00:23:55,440 --> 00:24:06,240
or they specific to an inventory group

00:23:59,540 --> 00:24:08,340
variables are I consider an ansible the

00:24:06,240 --> 00:24:11,520
playbooks to be kind of an independent

00:24:08,340 --> 00:24:14,040
entity the groups to be kind of an

00:24:11,520 --> 00:24:19,890
independent entity and the variables to

00:24:14,040 --> 00:24:22,050
be an extension of the groups and so why

00:24:19,890 --> 00:24:28,230
can set up multiple playbooks that use

00:24:22,050 --> 00:24:31,200
the same inventories or i can I can also

00:24:28,230 --> 00:24:34,800
i can use one a single playbook to drive

00:24:31,200 --> 00:24:36,600
all of my processes I can do both I

00:24:34,800 --> 00:24:40,610
happen to use a couple of different

00:24:36,600 --> 00:24:40,610
playbooks mostly to do

00:24:40,900 --> 00:24:46,780
mostly I have a bunch of tiny playbooks

00:24:44,050 --> 00:24:49,630
to do specific tasks that I have to do

00:24:46,780 --> 00:24:54,010
regularly and then I have a big giant

00:24:49,630 --> 00:24:56,920
playbook that says starting with a base

00:24:54,010 --> 00:25:00,000
image get me to the point where I'm

00:24:56,920 --> 00:25:00,000
running my application

00:25:04,830 --> 00:25:07,490
yes

00:25:21,030 --> 00:25:28,620
okay so the question is where does ants

00:25:23,550 --> 00:25:33,210
will run is basically that ansible will

00:25:28,620 --> 00:25:37,280
run so ansible to be installed on the on

00:25:33,210 --> 00:25:40,230
the driving system needs Python and a

00:25:37,280 --> 00:25:43,920
couple of other packages photo if you're

00:25:40,230 --> 00:25:48,020
driving AWS yum if you're driving

00:25:43,920 --> 00:25:51,620
young apt Python if you're trying to use

00:25:48,020 --> 00:25:54,540
use it on ubuntu

00:25:51,620 --> 00:25:58,630
but on remote systems

00:25:54,540 --> 00:26:02,310
all ansible needs is an SSH

00:25:58,630 --> 00:26:07,170
Damon and the Python liner

00:26:02,310 --> 00:26:11,930
so then it python 23 and later so it

00:26:07,170 --> 00:26:11,930
will run against well five

00:26:13,520 --> 00:26:19,420
anyway so it'll so what ansible does is

00:26:17,390 --> 00:26:22,180
it

00:26:19,420 --> 00:26:27,280
remote shells to to the whatever system

00:26:22,180 --> 00:26:29,030
it drops a Python script in on to that

00:26:27,280 --> 00:26:33,020
system

00:26:29,030 --> 00:26:35,309
and shells again to call that shell

00:26:33,020 --> 00:26:38,970
script

00:26:35,309 --> 00:26:41,190
and do whatever it needs to do all of

00:26:38,970 --> 00:26:44,639
the dependencies that are needed for

00:26:41,190 --> 00:26:47,129
that Python script that it drops get

00:26:44,639 --> 00:26:51,830
slurped up by ansible and stuffed into

00:26:47,129 --> 00:26:54,960
that file so that it it's it's amazingly

00:26:51,830 --> 00:26:57,200
amazing basically it's a it's a client

00:26:54,960 --> 00:26:57,200
list

00:26:58,070 --> 00:27:03,620
management system puppet and chef I

00:27:00,830 --> 00:27:05,130
think both require having some kind of

00:27:03,620 --> 00:27:08,190
client running on

00:27:05,130 --> 00:27:11,930
managed box but ansible you connect any

00:27:08,190 --> 00:27:11,930
box that has a cessation Python

00:27:12,570 --> 00:27:20,730
so let's look at a playbook this is a

00:27:16,200 --> 00:27:24,929
very very simple playbook that connects

00:27:20,730 --> 00:27:29,399
two hosts named web servers these are

00:27:24,929 --> 00:27:33,720
groups that you set up it sets some

00:27:29,399 --> 00:27:36,840
playbook specific variables that as we

00:27:33,720 --> 00:27:40,500
saw before will override certain other

00:27:36,840 --> 00:27:43,490
variables but can also be overridden by

00:27:40,500 --> 00:27:46,590
command line or arguments or whatever

00:27:43,490 --> 00:27:51,149
tells us what user to run as remotely

00:27:46,590 --> 00:27:53,070
and then lists a set of tasks these

00:27:51,149 --> 00:27:57,179
tasks are in line here but they can also

00:27:53,070 --> 00:27:58,950
be rolled into a role and stuff in a

00:27:57,179 --> 00:28:00,950
different file so that you can reuse

00:27:58,950 --> 00:28:03,830
roles

00:28:00,950 --> 00:28:06,830
in different play books but this one has

00:28:03,830 --> 00:28:11,630
three tasks one is to make sure that

00:28:06,830 --> 00:28:14,299
Apache is at the latest version 2 is to

00:28:11,630 --> 00:28:23,200
take a templated a patchy config file

00:28:14,299 --> 00:28:23,200
out of out of serve HTTP DJ to

00:28:23,820 --> 00:28:28,980
process it it's a template file it's not

00:28:26,400 --> 00:28:31,320
a it's not a file that it just copies

00:28:28,980 --> 00:28:33,000
over processing usually means

00:28:31,320 --> 00:28:36,000
substituting in variables for

00:28:33,000 --> 00:28:43,230
placeholders and then stuff it in the

00:28:36,000 --> 00:28:45,900
destination at CH DVD com and then the

00:28:43,230 --> 00:28:49,200
third task ensures that apache is

00:28:45,900 --> 00:28:52,020
running by checking to make sure that

00:28:49,200 --> 00:28:56,440
the services started there you'll also

00:28:52,020 --> 00:28:59,590
notice there's this notify line in the

00:28:56,440 --> 00:29:03,610
in the playbook yet the notified line

00:28:59,590 --> 00:29:06,090
actually says if you've made a change on

00:29:03,610 --> 00:29:06,090
this line

00:29:06,179 --> 00:29:13,700
restart apache

00:29:08,510 --> 00:29:13,700
and then that's its run by handlers

00:29:14,080 --> 00:29:23,070
okay so I why do I have apache like

00:29:17,679 --> 00:29:25,389
services handling twice here the first

00:29:23,070 --> 00:29:28,130
this

00:29:25,389 --> 00:29:31,240
ensure that apache is running

00:29:28,130 --> 00:29:31,240
is in case

00:29:31,450 --> 00:29:36,669
well actually I probably don't need it

00:29:34,240 --> 00:29:38,350
but in some cases you might have a

00:29:36,669 --> 00:29:42,960
service that's installed but isn't

00:29:38,350 --> 00:29:45,909
actually started and then the handlers

00:29:42,960 --> 00:29:51,220
handlers run after all other processing

00:29:45,909 --> 00:29:54,159
has completed for that playbook so I can

00:29:51,220 --> 00:29:59,669
say do all this stuff and at the very

00:29:54,159 --> 00:29:59,669
very end restart my sequel or

00:30:02,130 --> 00:30:06,770
or restart engine X or Apache or

00:30:04,440 --> 00:30:06,770
something

00:30:08,780 --> 00:30:19,260
okay the host section we talked about it

00:30:15,320 --> 00:30:23,820
it limits the scope so in the in this

00:30:19,260 --> 00:30:26,520
one here I'm not going to run database

00:30:23,820 --> 00:30:28,429
commands on my web servers

00:30:26,520 --> 00:30:31,179
unless

00:30:28,429 --> 00:30:33,470
unless i'm installing in an org into a

00:30:31,179 --> 00:30:36,559
system that will have all three

00:30:33,470 --> 00:30:39,399
collapsed onto single box but then that

00:30:36,559 --> 00:30:41,659
box will also be in the database group

00:30:39,399 --> 00:30:43,429
i'm not going to run backups on

00:30:41,659 --> 00:30:45,919
throwaway servers i'm not going to set

00:30:43,429 --> 00:30:48,470
up empty i am going to set up ntp on all

00:30:45,919 --> 00:30:50,509
my followers and i'm going to set up

00:30:48,470 --> 00:30:52,840
logging in SNMP on all production

00:30:50,509 --> 00:30:52,840
servers

00:30:53,400 --> 00:30:59,010
so handlers are special tasks they run

00:30:56,130 --> 00:31:00,750
at the end of the PlayBook if they are

00:30:59,010 --> 00:31:03,300
they are notified notifications only

00:31:00,750 --> 00:31:06,240
happen if something has changed in that

00:31:03,300 --> 00:31:08,160
particular task if you copy a file in

00:31:06,240 --> 00:31:09,870
the file is in rich is as the original

00:31:08,160 --> 00:31:11,100
then it says nothing's changed and it

00:31:09,870 --> 00:31:14,790
doesn't have to restart the service

00:31:11,100 --> 00:31:17,910
right and you don't have to program any

00:31:14,790 --> 00:31:22,430
of that it just does it for you tasks

00:31:17,910 --> 00:31:22,430
for things to do they happen in order

00:31:23,100 --> 00:31:28,049
you can use any of the ansibles 40 or 50

00:31:26,610 --> 00:31:30,750
different modules and growing all the

00:31:28,049 --> 00:31:34,350
time or you can write your own modules

00:31:30,750 --> 00:31:37,080
very simply and then roles are external

00:31:34,350 --> 00:31:40,470
lists of tasks so that you can reuse

00:31:37,080 --> 00:31:44,640
them over and over again roles kind of

00:31:40,470 --> 00:31:48,650
flow for me they flow from some common

00:31:44,640 --> 00:31:51,600
hood componentry common role might

00:31:48,650 --> 00:31:56,730
involve setting up ssh setting the

00:31:51,600 --> 00:31:58,410
hostname data-role like scheduled

00:31:56,730 --> 00:32:02,840
backups

00:31:58,410 --> 00:32:02,840
a postgres roll might set up postgres

00:32:03,940 --> 00:32:10,029
tasks are designed to be idempotent if

00:32:07,929 --> 00:32:12,190
you run one task over and over and over

00:32:10,029 --> 00:32:15,460
again you should be able to expect at

00:32:12,190 --> 00:32:17,200
the end of the task that it will leave

00:32:15,460 --> 00:32:19,840
you in the same state as the first time

00:32:17,200 --> 00:32:24,360
you ran it the difference is on the

00:32:19,840 --> 00:32:28,269
output of the task most modules will say

00:32:24,360 --> 00:32:31,920
if something has changed or not

00:32:28,269 --> 00:32:34,470
and then if it has changed it can notify

00:32:31,920 --> 00:32:37,380
so again try to be declarative you

00:32:34,470 --> 00:32:39,300
describe a desired state not the steps

00:32:37,380 --> 00:32:42,700
it takes to get there so when starting

00:32:39,300 --> 00:32:46,750
engine X you don't have to say

00:32:42,700 --> 00:32:48,940
if engine X is not running started you

00:32:46,750 --> 00:32:51,640
just say I want engine X to be started

00:32:48,940 --> 00:32:54,810
and it does the right thing it does

00:32:51,640 --> 00:32:54,810
nothing if it's already running

00:32:57,610 --> 00:33:03,630
okay so so modules take care of all of

00:33:00,520 --> 00:33:07,170
those state

00:33:03,630 --> 00:33:10,540
fluctuations the error code checking

00:33:07,170 --> 00:33:14,020
initial state so when when you say

00:33:10,540 --> 00:33:15,910
reload or restart apache if a patchy is

00:33:14,020 --> 00:33:19,590
already running then it calls restarted

00:33:15,910 --> 00:33:19,590
it's not running it just start

00:33:19,770 --> 00:33:24,150
then it it takes the modules take care

00:33:22,200 --> 00:33:26,100
of whether of detecting whether these

00:33:24,150 --> 00:33:27,809
changes have occurred

00:33:26,100 --> 00:33:31,250
they're a bunch of built in modules

00:33:27,809 --> 00:33:34,919
there's also a new galaxy danceable com

00:33:31,250 --> 00:33:36,780
which is user contributed modules so you

00:33:34,919 --> 00:33:39,210
can find modules for just about

00:33:36,780 --> 00:33:41,070
everything they even have modules for

00:33:39,210 --> 00:33:43,830
driving the Microsoft cloud they have

00:33:41,070 --> 00:33:47,610
module for driving a sure the Microsoft

00:33:43,830 --> 00:33:50,039
cloud you could find modules for AWS you

00:33:47,610 --> 00:33:53,190
can apply or ec to you can find modules

00:33:50,039 --> 00:33:57,049
for OpenStack you can find modules for

00:33:53,190 --> 00:33:57,049
rackspace you can find modules for

00:34:01,360 --> 00:34:06,760
are there module for VMware I'm sure

00:34:03,880 --> 00:34:08,740
that somebody somewhere has done that if

00:34:06,760 --> 00:34:11,980
you can run it through a command line if

00:34:08,740 --> 00:34:14,169
you can run it as a programmatic system

00:34:11,980 --> 00:34:19,679
then I'm sure somebody has started that

00:34:14,169 --> 00:34:19,679
at least yes

00:34:43,389 --> 00:34:48,639
so there's generic modules like there's

00:34:46,659 --> 00:34:52,089
a command-line module that says run this

00:34:48,639 --> 00:34:56,319
command give me the results and then

00:34:52,089 --> 00:35:00,119
there is specific software like ec2 it

00:34:56,319 --> 00:35:02,710
says launch this instance connect these

00:35:00,119 --> 00:35:05,960
EBS volumes

00:35:02,710 --> 00:35:08,900
and give me the IP addresses of the

00:35:05,960 --> 00:35:10,700
of the systems that we launched there's

00:35:08,900 --> 00:35:12,609
kind of a mix there's a mix of

00:35:10,700 --> 00:35:16,570
general-purpose modules and the

00:35:12,609 --> 00:35:16,570
application of specific modules

00:35:18,870 --> 00:35:23,670
right those modules would would expose

00:35:21,480 --> 00:35:26,390
certain parameters

00:35:23,670 --> 00:35:29,140
you could configure with variables

00:35:26,390 --> 00:35:29,140
or in your PlayBook

00:35:29,180 --> 00:35:34,040
so they're also control variable or

00:35:31,670 --> 00:35:37,339
controls which you can add two tasks you

00:35:34,040 --> 00:35:40,099
can perform similar tasks via loops or

00:35:37,339 --> 00:35:44,359
skip tasks based on facts or other

00:35:40,099 --> 00:35:49,280
variable checks so here the first line

00:35:44,359 --> 00:35:51,470
is a the fact is a a when clause i will

00:35:49,280 --> 00:35:54,260
only run tasks using this wind clause

00:35:51,470 --> 00:35:56,750
when it is not vagrant and it is not

00:35:54,260 --> 00:35:58,750
production so basically my test

00:35:56,750 --> 00:36:01,870
environments

00:35:58,750 --> 00:36:04,480
with file says for every line in that

00:36:01,870 --> 00:36:06,490
file run it so I have a list I have a

00:36:04,480 --> 00:36:10,150
file of all this sh Keys of all the

00:36:06,490 --> 00:36:12,790
developers in the company and so when

00:36:10,150 --> 00:36:16,450
the test servers get deployed all the

00:36:12,790 --> 00:36:18,580
devs have ssh access to it there's a

00:36:16,450 --> 00:36:21,370
file glob that says for every file in

00:36:18,580 --> 00:36:23,890
this directory do this thing over and

00:36:21,370 --> 00:36:27,370
over here with items so I can list that

00:36:23,890 --> 00:36:29,890
the items that I need sequence gives me

00:36:27,370 --> 00:36:31,800
a kind of a way to count or do a for

00:36:29,890 --> 00:36:37,860
loop

00:36:31,800 --> 00:36:41,690
I can also set tags on a task this these

00:36:37,860 --> 00:36:46,230
are very useful for debugging or running

00:36:41,690 --> 00:36:48,750
sections of your PlayBook I have a full

00:36:46,230 --> 00:36:54,030
stack application but frequently we just

00:36:48,750 --> 00:36:55,660
push the client UI which is the HTML and

00:36:54,030 --> 00:36:58,000
JavaScript

00:36:55,660 --> 00:37:00,700
and so I have a shortcut in my playbook

00:36:58,000 --> 00:37:03,450
so that I can just run the update of the

00:37:00,700 --> 00:37:03,450
client code

00:37:04,499 --> 00:37:08,950
there's also an included so you can

00:37:07,299 --> 00:37:12,640
include

00:37:08,950 --> 00:37:15,150
a set of tasks into it into a bigger

00:37:12,640 --> 00:37:15,150
playbook

00:37:15,690 --> 00:37:21,060
I'll use include for example if I have a

00:37:18,710 --> 00:37:23,099
bunch of tasks that I need to run with

00:37:21,060 --> 00:37:25,349
one variable and then it I need to run

00:37:23,099 --> 00:37:29,720
them again with a second variable I can

00:37:25,349 --> 00:37:29,720
use a width clause with the included

00:37:31,340 --> 00:37:35,900
templates as I mentioned earlier are

00:37:33,260 --> 00:37:37,610
actually jinja files jinjja has a file

00:37:35,900 --> 00:37:43,220
format that lets you embed Python

00:37:37,610 --> 00:37:46,010
another variable substitution in inside

00:37:43,220 --> 00:37:49,910
them so lets you do put variables inside

00:37:46,010 --> 00:37:52,839
config files and you so this is where

00:37:49,910 --> 00:37:57,279
the configuration management

00:37:52,839 --> 00:37:59,650
so I can set up my base engine X config

00:37:57,279 --> 00:38:01,719
file with placeholders for things like

00:37:59,650 --> 00:38:05,759
what port to listen on and and whether

00:38:01,719 --> 00:38:08,769
or not to use self-signed SSL and then

00:38:05,759 --> 00:38:10,900
ansible when it runs we'll use those

00:38:08,769 --> 00:38:15,029
variables in those template files and

00:38:10,900 --> 00:38:15,029
before it dumps another system

00:38:15,109 --> 00:38:20,569
if you're writing a task and you get

00:38:16,970 --> 00:38:23,319
stuck use a tag so that you can iterate

00:38:20,569 --> 00:38:23,319
over that quickly

00:38:28,470 --> 00:38:34,710
and then use the debug module to to look

00:38:32,340 --> 00:38:38,550
at variables as your test season and

00:38:34,710 --> 00:38:40,970
then dash vvvv gives you all of the

00:38:38,550 --> 00:38:40,970
output

00:38:41,359 --> 00:38:46,910
let's see what that looks like in just a

00:38:43,039 --> 00:38:49,489
minute so that's a very quick overview

00:38:46,910 --> 00:38:51,079
of what ansible looks like and then this

00:38:49,489 --> 00:38:55,519
is what your project will look like

00:38:51,079 --> 00:38:57,430
after you you've built a a reasonably

00:38:55,519 --> 00:38:59,650
complete

00:38:57,430 --> 00:39:02,980
playbooks system

00:38:59,650 --> 00:39:05,440
you'll have under root directory ansible

00:39:02,980 --> 00:39:08,140
you'll have inventories

00:39:05,440 --> 00:39:11,829
which we've already seen rolls will be

00:39:08,140 --> 00:39:14,619
broken up into different role names and

00:39:11,829 --> 00:39:16,660
under each role like DB tier you will

00:39:14,619 --> 00:39:18,069
have files which are files to just be

00:39:16,660 --> 00:39:20,920
copied they don't have any variable

00:39:18,069 --> 00:39:23,170
replacement you'll have handlers which

00:39:20,920 --> 00:39:26,079
will define a set of tasks that listen

00:39:23,170 --> 00:39:28,420
to events you'll have those tasks

00:39:26,079 --> 00:39:30,790
themselves and templates which are the

00:39:28,420 --> 00:39:33,490
template able files the good cop in the

00:39:30,790 --> 00:39:36,310
system you'll also probably have maybe

00:39:33,490 --> 00:39:38,770
have a library where you will have your

00:39:36,310 --> 00:39:40,780
custom modules

00:39:38,770 --> 00:39:43,350
finally at the root level you'll have

00:39:40,780 --> 00:39:43,350
your playbook

00:39:45,960 --> 00:39:49,070
any questions about that

00:39:51,170 --> 00:39:54,309
so files are

00:39:57,860 --> 00:40:02,240
I have this file I need to copy it over

00:39:59,710 --> 00:40:04,400
so i have this configuration file and i

00:40:02,240 --> 00:40:07,550
need it to be copied over I don't use it

00:40:04,400 --> 00:40:11,270
for copying large amounts of data i can

00:40:07,550 --> 00:40:13,640
use rsync or something for that but for

00:40:11,270 --> 00:40:16,570
example if I have see what kinds of

00:40:13,640 --> 00:40:16,570
things do I have photo

00:40:19,710 --> 00:40:29,359
probably ssl keys that are not they're

00:40:26,099 --> 00:40:35,930
not variable eyes those go in there I

00:40:29,359 --> 00:40:35,930
actually keep one one file per ssl key

00:40:37,730 --> 00:40:43,280
so I use variables in the PlayBook to

00:40:40,880 --> 00:40:45,290
determine which file but I don't

00:40:43,280 --> 00:40:46,520
actually change the file so I don't use

00:40:45,290 --> 00:40:48,350
the templates

00:40:46,520 --> 00:40:50,870
that makes sense so files that are not

00:40:48,350 --> 00:40:53,270
changed in the copying overall putting

00:40:50,870 --> 00:40:55,600
files files that are changed uploaded

00:40:53,270 --> 00:40:55,600
templates

00:40:56,730 --> 00:40:59,630
alright so

00:41:00,710 --> 00:41:05,630
so let's see what it looks like so I'm

00:41:03,200 --> 00:41:08,960
going to I'm going to now show you a

00:41:05,630 --> 00:41:10,940
playbook that is linked to a dynamic

00:41:08,960 --> 00:41:14,390
inventory

00:41:10,940 --> 00:41:17,700
that starts an AWS spot instance with

00:41:14,390 --> 00:41:21,690
the base am I updates it configures it

00:41:17,700 --> 00:41:23,550
runs a benchmark on

00:41:21,690 --> 00:41:26,010
and the benchmark itself sends the

00:41:23,550 --> 00:41:28,860
results to data dog

00:41:26,010 --> 00:41:31,290
and then Terra's little thing now since

00:41:28,860 --> 00:41:33,920
this is a cooking show I'll shoot that

00:41:31,290 --> 00:41:33,920
help it looks like

00:41:57,420 --> 00:42:06,630
okay so this is a set of play books so I

00:42:04,950 --> 00:42:09,540
didn't mention earlier but our play

00:42:06,630 --> 00:42:11,790
books are defined in a llamo file that

00:42:09,540 --> 00:42:13,859
gives us a hierarchy without a lot of

00:42:11,790 --> 00:42:16,190
overhead like you might give from X

00:42:13,859 --> 00:42:16,190
amount

00:42:19,890 --> 00:42:24,950
we call it benchmark stuff

00:42:22,490 --> 00:42:27,650
the hosts I'm actually using local host

00:42:24,950 --> 00:42:31,480
to start with because I'm going to run

00:42:27,650 --> 00:42:33,470
all these ants ACC to commands using

00:42:31,480 --> 00:42:39,400
environment variables that I've set on

00:42:33,470 --> 00:42:41,990
my local house with my mikey and my

00:42:39,400 --> 00:42:43,850
access key in my secret key to say

00:42:41,990 --> 00:42:45,860
amazon

00:42:43,850 --> 00:42:48,110
I'm going to read in some other other

00:42:45,860 --> 00:42:49,820
variables from environment from the

00:42:48,110 --> 00:42:53,480
environment variables that I actually

00:42:49,820 --> 00:42:56,120
set up using Jenkins with parameterised

00:42:53,480 --> 00:42:59,150
builds so that my users can actually

00:42:56,120 --> 00:43:02,200
select what instance type they want at

00:42:59,150 --> 00:43:02,200
what spot price

00:43:02,490 --> 00:43:07,310
and I can easily change the mi and the

00:43:05,040 --> 00:43:12,470
colonel and the instance name without

00:43:07,310 --> 00:43:17,000
having to modify minor my playbook devil

00:43:12,470 --> 00:43:21,440
so I have a set of tasks here the

00:43:17,000 --> 00:43:24,200
basically 11 tests to launch this

00:43:21,440 --> 00:43:28,190
against these instances the name of the

00:43:24,200 --> 00:43:29,230
of the of the task is launched easy to

00:43:28,190 --> 00:43:32,590
instance

00:43:29,230 --> 00:43:36,100
register says I want to record the

00:43:32,590 --> 00:43:38,310
results of this in a variable I name bc

00:43:36,100 --> 00:43:38,310
to

00:43:38,490 --> 00:43:42,920
so I can reference ec2 later as

00:43:43,559 --> 00:43:47,809
a variable in later play words

00:43:47,830 --> 00:43:51,559
it's a local action I'm going to run it

00:43:49,780 --> 00:43:53,630
against the local machine

00:43:51,559 --> 00:43:56,890
I'm going to use the ec2 module which is

00:43:53,630 --> 00:43:58,960
built into ansible

00:43:56,890 --> 00:44:01,029
and then I'm going to use these

00:43:58,960 --> 00:44:03,369
variables

00:44:01,029 --> 00:44:06,640
the key paradises type the spot price

00:44:03,369 --> 00:44:09,279
the count the group image the colonel

00:44:06,640 --> 00:44:11,789
instance tags the region most of these

00:44:09,279 --> 00:44:14,949
you don't need if you're just starting

00:44:11,789 --> 00:44:17,859
up but I found that these are you

00:44:14,949 --> 00:44:21,159
interesting or useful in order to keep

00:44:17,859 --> 00:44:24,219
track of them later wait says don't

00:44:21,159 --> 00:44:28,479
continue in the PlayBook until you've

00:44:24,219 --> 00:44:33,779
gotten a response from amazon that that

00:44:28,479 --> 00:44:33,779
system is is running

00:44:34,240 --> 00:44:38,960
that means that the module takes care of

00:44:36,800 --> 00:44:42,230
all the polling for you you don't have

00:44:38,960 --> 00:44:44,960
to do that inside your code I set up my

00:44:42,230 --> 00:44:47,420
ephemeral devices I just set up all four

00:44:44,960 --> 00:44:50,540
because I don't know if I don't want to

00:44:47,420 --> 00:44:53,090
branch in my code based on an Amazon

00:44:50,540 --> 00:44:55,040
seems to do the right thing anyway okay

00:44:53,090 --> 00:44:56,960
so after all of that is finished i'm

00:44:55,040 --> 00:44:59,450
going to add though each instance that's

00:44:56,960 --> 00:45:01,820
started i'm only using one but you could

00:44:59,450 --> 00:45:04,310
use a hundred here it will do the same

00:45:01,820 --> 00:45:11,330
thing i'm going to add each instance to

00:45:04,310 --> 00:45:14,210
a a group called launch and i'm going to

00:45:11,330 --> 00:45:17,720
set the hostname and i'm going to set a

00:45:14,210 --> 00:45:21,170
variable for that post with the public

00:45:17,720 --> 00:45:25,340
dns mater okay so this is this is tying

00:45:21,170 --> 00:45:28,640
back to that ec2 so that's going to be

00:45:25,340 --> 00:45:30,770
for every item in ec2 instances i'm

00:45:28,640 --> 00:45:32,210
going to run this action so with Eska

00:45:30,770 --> 00:45:33,680
let's hit what that's going to do is

00:45:32,210 --> 00:45:36,250
create a launched group that i'm going

00:45:33,680 --> 00:45:38,530
to use later in the script

00:45:36,250 --> 00:45:41,280
this is kind of complicated as are there

00:45:38,530 --> 00:45:41,280
questions about this

00:45:41,600 --> 00:45:48,010
you guys are smart

00:45:43,780 --> 00:45:50,050
alright so and then you know because I'm

00:45:48,010 --> 00:45:53,610
the way I am I'm going to output that

00:45:50,050 --> 00:45:57,570
easy to very variable to so that i can

00:45:53,610 --> 00:45:57,570
make sure that i have

00:45:59,210 --> 00:46:04,680
so I know what the structure of that

00:46:01,440 --> 00:46:06,990
variable is it's not the easiest thing

00:46:04,680 --> 00:46:09,600
or it's not as straightforward as you

00:46:06,990 --> 00:46:11,250
might think because when you register a

00:46:09,600 --> 00:46:14,730
variable you're not just registering the

00:46:11,250 --> 00:46:17,010
result you're also getting the standard

00:46:14,730 --> 00:46:20,790
out a standard input or the standard

00:46:17,010 --> 00:46:22,280
error standard out the return the status

00:46:20,790 --> 00:46:24,120
code if you're running a command and

00:46:22,280 --> 00:46:26,010
lots of other things so there's a

00:46:24,120 --> 00:46:31,850
structure to the variable it's not just

00:46:26,010 --> 00:46:31,850
the flat key value

00:46:32,730 --> 00:46:39,620
and then I'm going to further wait so

00:46:35,910 --> 00:46:41,850
Amazon will return say it's running but

00:46:39,620 --> 00:46:43,740
SSH may not have come up yet so I'm

00:46:41,850 --> 00:46:45,180
going to wait until SSH does come up and

00:46:43,740 --> 00:46:47,940
this is using a built-in module called

00:46:45,180 --> 00:46:52,590
wait for wait for and it looks at a

00:46:47,940 --> 00:46:58,190
specific port and checks every 90 minute

00:46:52,590 --> 00:46:58,190
90 seconds with a 300 20-second timeout

00:46:58,500 --> 00:47:04,200
and then I set up a couple of tags in

00:47:00,420 --> 00:47:06,360
case I want to skip those steps for

00:47:04,200 --> 00:47:10,230
debugging purposes okay so now that I

00:47:06,360 --> 00:47:14,400
have all of those new Amazon instances

00:47:10,230 --> 00:47:16,980
set up in this launched group I can run

00:47:14,400 --> 00:47:19,410
stuff on them so you'll see these roles

00:47:16,980 --> 00:47:22,130
these are the same roles i use in my big

00:47:19,410 --> 00:47:24,690
playbook i'm going to reuse them here

00:47:22,130 --> 00:47:26,640
i'm going to run common i'm going to run

00:47:24,690 --> 00:47:30,270
crunch I'm going to hear run zz9 and

00:47:26,640 --> 00:47:31,770
data storage tier I'm going to skip DB

00:47:30,270 --> 00:47:33,750
and I'm gonna skip wept here because i'm

00:47:31,770 --> 00:47:35,430
not running benchmarks on those parts of

00:47:33,750 --> 00:47:38,360
the system I'm all weighing writing

00:47:35,430 --> 00:47:38,360
benchmark so it's easier

00:47:38,500 --> 00:47:41,160
yes

00:47:49,600 --> 00:47:54,190
so the question is am i running it so

00:47:51,760 --> 00:47:56,220
sorry was running at the first first

00:47:54,190 --> 00:47:59,230
part I was running against local host

00:47:56,220 --> 00:48:02,040
this where I have this this this you

00:47:59,230 --> 00:48:06,580
can't really tell but this is a new

00:48:02,040 --> 00:48:09,630
roots scope playbook

00:48:06,580 --> 00:48:13,140
ok so the so we're in it so this is a

00:48:09,630 --> 00:48:13,140
one playbook

00:48:13,470 --> 00:48:19,320
to play books so each playbook can have

00:48:16,740 --> 00:48:21,090
a different scope of servers that are

00:48:19,320 --> 00:48:24,690
runs again so this one runs against

00:48:21,090 --> 00:48:27,420
hosts in the launched group whereas the

00:48:24,690 --> 00:48:29,700
previous playbook I'm stringing these

00:48:27,420 --> 00:48:36,440
three playbook these four plague books

00:48:29,700 --> 00:48:36,440
together to form a single meta playbook

00:48:36,730 --> 00:48:42,300
but each part runs against a different

00:48:39,280 --> 00:48:42,300
set of co-host

00:48:42,710 --> 00:48:46,240
I see confused looks

00:48:49,150 --> 00:48:54,730
right

00:48:51,760 --> 00:48:58,420
but ok so the way the ammo works is by

00:48:54,730 --> 00:49:00,580
indentation is your scope so we are we

00:48:58,420 --> 00:49:05,680
back into ended all the way back to the

00:49:00,580 --> 00:49:10,270
root scope and so instead of using posts

00:49:05,680 --> 00:49:12,990
local hosts now we're going to use posts

00:49:10,270 --> 00:49:12,990
launched

00:49:13,220 --> 00:49:18,390
so it's like we close the the curly

00:49:16,400 --> 00:49:20,880
brace

00:49:18,390 --> 00:49:23,400
and now we're running something I'm not

00:49:20,880 --> 00:49:26,690
running a different set of tasks against

00:49:23,400 --> 00:49:26,690
a different set of servers yes

00:49:34,950 --> 00:49:39,559
exactly

00:49:36,680 --> 00:49:41,599
exactly so I'm running the first set of

00:49:39,559 --> 00:49:43,630
tasks against the local host because I

00:49:41,599 --> 00:49:46,220
don't have anything to run against in

00:49:43,630 --> 00:49:48,920
the first task i create the to the

00:49:46,220 --> 00:49:51,470
servers to run against register them

00:49:48,920 --> 00:49:55,010
into a group called launched and then i

00:49:51,470 --> 00:49:58,130
can now run new commands against that

00:49:55,010 --> 00:49:59,809
launched group these are the launch

00:49:58,130 --> 00:50:01,760
group contains all the servers that I

00:49:59,809 --> 00:50:04,580
set up in the previous test or the

00:50:01,760 --> 00:50:06,590
previous playbook

00:50:04,580 --> 00:50:08,420
so this looks like my production

00:50:06,590 --> 00:50:11,540
deployment script right here this the

00:50:08,420 --> 00:50:13,610
where it says roles because those are

00:50:11,540 --> 00:50:15,080
the same tasks that I run or the same

00:50:13,610 --> 00:50:17,410
roles that I run in my production

00:50:15,080 --> 00:50:17,410
servers

00:50:19,400 --> 00:50:23,059
and that sets up all the software I

00:50:21,410 --> 00:50:26,180
don't have to start with an ami that I

00:50:23,059 --> 00:50:29,390
built myself I do because I've got some

00:50:26,180 --> 00:50:33,470
data loaded on it but if I was good and

00:50:29,390 --> 00:50:34,970
I had done all my all my due diligence I

00:50:33,470 --> 00:50:38,059
would have put that data and he seeth in

00:50:34,970 --> 00:50:39,950
s3 and let the instance pull it down

00:50:38,059 --> 00:50:43,730
before it started processing but I'm not

00:50:39,950 --> 00:50:47,750
that smart so I I preload the the image

00:50:43,730 --> 00:50:49,369
that I have with with my data but I

00:50:47,750 --> 00:50:52,220
still connect to it to make sure that

00:50:49,369 --> 00:50:55,010
has the latest software so I run run my

00:50:52,220 --> 00:51:00,529
full deployment on it well most of it

00:50:55,010 --> 00:51:02,059
anyway then I do a little bit of

00:51:00,529 --> 00:51:05,720
configuration so that I can run those

00:51:02,059 --> 00:51:07,400
benchmarks from a remote system and turn

00:51:05,720 --> 00:51:10,190
off query timeouts and those kinds of

00:51:07,400 --> 00:51:14,059
things restart everything wait for it to

00:51:10,190 --> 00:51:16,069
come up and then finally run the

00:51:14,059 --> 00:51:18,470
benchmarks on the bench Here I am

00:51:16,069 --> 00:51:20,900
running against local host again because

00:51:18,470 --> 00:51:23,660
I'm going to use the local copy of my

00:51:20,900 --> 00:51:26,270
benchmark suite to run these queries

00:51:23,660 --> 00:51:29,599
against the remote server I usually run

00:51:26,270 --> 00:51:33,220
this from from Jenkins so it's actually

00:51:29,599 --> 00:51:36,559
in the same data center but

00:51:33,220 --> 00:51:40,250
this this is the the way that I actually

00:51:36,559 --> 00:51:42,289
run those benchmarks and I have a tag

00:51:40,250 --> 00:51:44,089
here so I can just run been sure I can

00:51:42,289 --> 00:51:45,650
skip the benchmarks completely and just

00:51:44,089 --> 00:51:48,020
start with a scratch system that is

00:51:45,650 --> 00:51:51,680
there and has data loaded and I could

00:51:48,020 --> 00:51:56,059
just throw it away when I'm done I also

00:51:51,680 --> 00:51:59,510
register here the output variable and I

00:51:56,059 --> 00:52:00,950
ignore errors this is kind of important

00:51:59,510 --> 00:52:02,150
if you're trying to drive amazon

00:52:00,950 --> 00:52:04,460
remotely and you don't want to rack up

00:52:02,150 --> 00:52:05,930
lots and lots of charges because you

00:52:04,460 --> 00:52:08,569
have an automated system that runs this

00:52:05,930 --> 00:52:12,079
area every so often and leave stuff

00:52:08,569 --> 00:52:15,020
running so you ignore errors but you

00:52:12,079 --> 00:52:21,020
register the result so that you can

00:52:15,020 --> 00:52:22,960
check it later and fail the build after

00:52:21,020 --> 00:52:25,069
you've terminated all your instances

00:52:22,960 --> 00:52:28,609
okay so the next part we're going to run

00:52:25,069 --> 00:52:33,440
against local host again this is going

00:52:28,609 --> 00:52:38,020
to go through and with state equals

00:52:33,440 --> 00:52:42,619
absent will terminate all the items in

00:52:38,020 --> 00:52:44,900
the there's that ec2 variable again the

00:52:42,619 --> 00:52:48,140
one that we created in the very first

00:52:44,900 --> 00:52:50,660
playbook so all of the instance IDs

00:52:48,140 --> 00:52:54,700
created in the first task or the first

00:52:50,660 --> 00:52:54,700
playbook now get shut down

00:52:54,770 --> 00:53:00,470
and and now we check look at that

00:52:57,680 --> 00:53:05,180
variable I spit it out so I can see what

00:53:00,470 --> 00:53:09,500
it looks like check the result give a

00:53:05,180 --> 00:53:12,820
message and then fail that built if it

00:53:09,500 --> 00:53:14,660
if it wasn't successful

00:53:12,820 --> 00:53:16,580
ok

00:53:14,660 --> 00:53:18,530
I'm going to post this somewhere so that

00:53:16,580 --> 00:53:20,960
you don't have to scramble and help you

00:53:18,530 --> 00:53:24,590
down I don't think there's anything

00:53:20,960 --> 00:53:26,000
proprietary in there I'm a sanitized a

00:53:24,590 --> 00:53:33,350
little bit the commands that we actually

00:53:26,000 --> 00:53:36,080
use but the and that's it all right I I

00:53:33,350 --> 00:53:38,690
set up new instances I run all the

00:53:36,080 --> 00:53:43,070
configuration I need to on it I run my

00:53:38,690 --> 00:53:46,760
benchmark I record the result I tear it

00:53:43,070 --> 00:53:51,830
down then I checked the result and fail

00:53:46,760 --> 00:53:54,370
or complete the build successfully any

00:53:51,830 --> 00:53:54,370
questions about that

00:53:55,670 --> 00:54:03,440
yes the dynamic group is the cool part I

00:54:00,520 --> 00:54:06,890
can set that group up with one instance

00:54:03,440 --> 00:54:09,619
or a thousand instances just by changing

00:54:06,890 --> 00:54:11,960
that one line where it says count equals

00:54:09,619 --> 00:54:13,520
one and I could make that a variable on

00:54:11,960 --> 00:54:15,710
the command line or in the environment

00:54:13,520 --> 00:54:20,720
variable to or it usually the command

00:54:15,710 --> 00:54:23,720
line the thing I've always have found

00:54:20,720 --> 00:54:26,599
difficult about using a c2 is the

00:54:23,720 --> 00:54:28,970
ephemeral nature of it the nature that

00:54:26,599 --> 00:54:33,500
they want you to use these systems as

00:54:28,970 --> 00:54:35,960
disposable that's been really hard for

00:54:33,500 --> 00:54:38,150
me because I don't know all the setup

00:54:35,960 --> 00:54:40,460
that you need to do in order to make it

00:54:38,150 --> 00:54:42,890
an instance disposable

00:54:40,460 --> 00:54:44,930
for me and it's for an hour instance to

00:54:42,890 --> 00:54:49,670
be useful it needs data and need

00:54:44,930 --> 00:54:53,030
software it needs all of the setup well

00:54:49,670 --> 00:54:58,760
with ansible now I can drive it as a

00:54:53,030 --> 00:55:03,020
like ansible is or a AWS is my compute

00:54:58,760 --> 00:55:06,470
cluster I can set up single tasks or

00:55:03,020 --> 00:55:11,599
single or sets of tasks I can say for

00:55:06,470 --> 00:55:15,440
one system that is not ephemeral go do

00:55:11,599 --> 00:55:18,619
this stuff and then when it's done shut

00:55:15,440 --> 00:55:22,720
it all down and I can run a thousand

00:55:18,619 --> 00:55:26,270
instances for short periods of time and

00:55:22,720 --> 00:55:30,670
and not rack up lots of lots of charges

00:55:26,270 --> 00:55:33,670
because i'm using servers in that are

00:55:30,670 --> 00:55:33,670
permanent

00:55:35,180 --> 00:55:40,990
and I don't have to do lots of set up to

00:55:37,339 --> 00:55:44,359
say go grab this data for me from s3

00:55:40,990 --> 00:55:45,740
record the results back to s3 I just

00:55:44,359 --> 00:55:49,010
have to build that into my software a

00:55:45,740 --> 00:55:51,500
little bit okay so we started ec2

00:55:49,010 --> 00:55:53,960
instances we updated and configured them

00:55:51,500 --> 00:55:57,190
we ran a set of tests recorded those

00:55:53,960 --> 00:56:04,280
results and tore the whole thing down

00:55:57,190 --> 00:56:06,290
that takes in my Jenkins build to run

00:56:04,280 --> 00:56:09,050
the whole set of benchmarks set up the

00:56:06,290 --> 00:56:11,630
instances with spot instances are even

00:56:09,050 --> 00:56:16,309
cheaper than then registered instances

00:56:11,630 --> 00:56:20,680
in Amazon usually takes about 20 minutes

00:56:16,309 --> 00:56:20,680
to run all of that

00:56:22,370 --> 00:56:28,940
okay so so these are some links to

00:56:24,440 --> 00:56:31,760
ansible documents and how to get hold of

00:56:28,940 --> 00:56:34,520
me so I'm ready now to take your

00:56:31,760 --> 00:56:36,820
questions those that you haven't asked

00:56:34,520 --> 00:56:36,820
already

00:56:39,160 --> 00:56:42,780
we have about five minutes

00:56:47,720 --> 00:56:56,349
I keep all my Play Books and inventories

00:56:51,050 --> 00:56:56,349
and variables in a git repository

00:57:04,720 --> 00:57:10,030
you have to put them in somewhere they

00:57:07,660 --> 00:57:12,539
have to live somewhere because they

00:57:10,030 --> 00:57:16,400
can't just be in your head

00:57:12,539 --> 00:57:21,859
we've made a decision that our github

00:57:16,400 --> 00:57:24,770
argot repository is sufficiently safe

00:57:21,859 --> 00:57:27,710
from

00:57:24,770 --> 00:57:32,210
prying eyes we could do something with

00:57:27,710 --> 00:57:36,020
Blowfish or something to to encrypt

00:57:32,210 --> 00:57:38,180
those files more on disk we tend to only

00:57:36,020 --> 00:57:41,240
have things that can be discarded in

00:57:38,180 --> 00:57:45,350
there any way I can generate new API

00:57:41,240 --> 00:57:47,870
keys i can I can generate new ssh key

00:57:45,350 --> 00:57:49,760
ssl actually i don't put ssl keys in

00:57:47,870 --> 00:57:51,500
there anymore because i use load

00:57:49,760 --> 00:57:57,500
balancers and they're loaded there

00:57:51,500 --> 00:57:59,870
instead but Amazon API keys I can throw

00:57:57,500 --> 00:58:05,350
those away I can put new ones up if they

00:57:59,870 --> 00:58:05,350
ever get compromised

00:58:10,080 --> 00:58:13,050
well I showed you how you could pull

00:58:11,820 --> 00:58:16,830
them from the environment variables

00:58:13,050 --> 00:58:21,330
there's also command line options you

00:58:16,830 --> 00:58:24,800
could write a file to temp in temp FS or

00:58:21,330 --> 00:58:24,800
something if you wanted to do that

00:58:28,020 --> 00:58:33,690
so that the width is so the question is

00:58:31,140 --> 00:58:37,760
is there a way to use executable code to

00:58:33,690 --> 00:58:43,020
grab that data yes you would extend the

00:58:37,760 --> 00:58:45,300
the load command so load will also load

00:58:43,020 --> 00:58:48,990
from files it'll load I think there

00:58:45,300 --> 00:58:54,240
might actually be code to load from the

00:58:48,990 --> 00:58:56,190
output of a font of a command but we're

00:58:54,240 --> 00:58:59,940
talking about automated processes here

00:58:56,190 --> 00:59:06,170
at some point all your secrets are on

00:58:59,940 --> 00:59:09,780
the table anyway if you've got a special

00:59:06,170 --> 00:59:12,630
pass phrase that you use to decrypt all

00:59:09,780 --> 00:59:14,610
of your sensitive data then you have to

00:59:12,630 --> 00:59:17,010
either be sitting at the computer to

00:59:14,610 --> 00:59:19,260
enter that pass phrase every time or

00:59:17,010 --> 00:59:21,300
it's sitting just in some other place on

00:59:19,260 --> 00:59:26,180
your system so that it can be run in an

00:59:21,300 --> 00:59:26,180
automated fashion all right so so

00:59:26,400 --> 00:59:32,279
I don't go overboard maybe I'm not

00:59:30,270 --> 00:59:34,049
paranoid enough or I work for a company

00:59:32,279 --> 00:59:41,059
where it's we're small enough that

00:59:34,049 --> 00:59:41,059
nobody's cares about us anyway yet but

00:59:42,070 --> 00:59:45,510
I'm also not a black hat

01:00:03,770 --> 01:00:08,540
right so that he says that I should be

01:00:06,350 --> 01:00:15,850
using two-factor often and so forth and

01:00:08,540 --> 01:00:20,720
and what I do is I have am or I I am

01:00:15,850 --> 01:00:22,670
keys / environment that limit their

01:00:20,720 --> 01:00:28,460
scope but what what they have access to

01:00:22,670 --> 01:00:32,240
an s3 and I'm working on off-site

01:00:28,460 --> 01:00:38,080
backups make sure that nothing untoward

01:00:32,240 --> 01:00:38,080
happens other questions yes

01:00:42,070 --> 01:00:45,700
what do I think about ansible tower the

01:00:44,170 --> 01:00:48,370
commercial support I think you should

01:00:45,700 --> 01:00:50,860
get it no I I I know the guy's a

01:00:48,370 --> 01:00:53,620
danceable I worked with many of them at

01:00:50,860 --> 01:00:58,480
our path when i was there they are doing

01:00:53,620 --> 01:01:00,070
some amazing things I I don't think I'm

01:00:58,480 --> 01:01:02,890
to the point yet where I need ansible

01:01:00,070 --> 01:01:05,080
tower I think if you've got an

01:01:02,890 --> 01:01:08,370
infrastructure where

01:01:05,080 --> 01:01:13,000
you can maintain it with flat files then

01:01:08,370 --> 01:01:15,340
you don't need it but it so what ansible

01:01:13,000 --> 01:01:18,370
tower does is a lot of the dynamic group

01:01:15,340 --> 01:01:23,860
stuff they can pull all your inventories

01:01:18,370 --> 01:01:25,680
from databases or from from wherever but

01:01:23,860 --> 01:01:29,170
I don't know a lot about ansible tower

01:01:25,680 --> 01:01:32,980
they'd be happy I'm sure to to sell you

01:01:29,170 --> 01:01:36,480
on it that's all I think I'll be around

01:01:32,980 --> 01:01:36,480
for the rest of the day

01:02:13,640 --> 01:02:17,910
your customers rely on your website or

01:02:16,410 --> 01:02:20,280
application if it's slower

01:02:17,910 --> 01:02:23,220
non-responsive it infuriates your users

01:02:20,280 --> 01:02:25,050
and costs you money keeping your

01:02:23,220 --> 01:02:28,559
business critical systems humming along

01:02:25,050 --> 01:02:30,869
requires insight into what they're doing

01:02:28,559 --> 01:02:32,819
your system metrics tells stories

01:02:30,869 --> 01:02:34,829
stories that can reveal performance

01:02:32,819 --> 01:02:37,170
bottlenecks resource limitations and

01:02:34,829 --> 01:02:38,729
other problems but how do you keep an

01:02:37,170 --> 01:02:41,369
eye on all of your systems performance

01:02:38,729 --> 01:02:44,430
metrics in real-time and record this

01:02:41,369 --> 01:02:46,170
data for later analysis enter longview

01:02:44,430 --> 01:02:48,180
the new way to see what's really going

01:02:46,170 --> 01:02:50,339
on under the hood the long view

01:02:48,180 --> 01:02:52,410
dashboard lets you visualize the status

01:02:50,339 --> 01:02:54,869
of all your systems providing you with a

01:02:52,410 --> 01:02:58,229
bird's-eye view of your entire fleet you

01:02:54,869 --> 01:03:00,809
can sort by cpu memory swap processes

01:02:58,229 --> 01:03:02,579
load and network usage click a specific

01:03:00,809 --> 01:03:04,979
system to access its individual

01:03:02,579 --> 01:03:07,489
dashboard then click and drag to zoom in

01:03:04,979 --> 01:03:09,900
on chokepoints and get more detail

01:03:07,489 --> 01:03:11,579
comprehensive network data including

01:03:09,900 --> 01:03:13,890
inbound and outbound traffic is

01:03:11,579 --> 01:03:15,449
available on the network tab and disk

01:03:13,890 --> 01:03:17,369
rights and free space on the disk

01:03:15,449 --> 01:03:20,219
stabbed while the process Explorer

01:03:17,369 --> 01:03:22,739
displays usage statistics for individual

01:03:20,219 --> 01:03:24,900
processes the system info tab shows

01:03:22,739 --> 01:03:27,150
listening services active connections

01:03:24,900 --> 01:03:29,279
and available updates adding long view

01:03:27,150 --> 01:03:30,989
to a system is easy just click the

01:03:29,279 --> 01:03:33,119
button copy the one line installation

01:03:30,989 --> 01:03:35,579
command then run the command on your

01:03:33,119 --> 01:03:37,289
linux system to complete the process the

01:03:35,579 --> 01:03:39,449
agent will begin collecting data and

01:03:37,289 --> 01:03:41,310
sending it to longview then the graph

01:03:39,449 --> 01:03:43,860
start rolling

01:03:41,310 --> 01:03:46,230
used longview to gain visibility into

01:03:43,860 --> 01:03:49,970
your servers so when your website or app

01:03:46,230 --> 01:03:49,970

YouTube URL: https://www.youtube.com/watch?v=yBj3s828xFU


