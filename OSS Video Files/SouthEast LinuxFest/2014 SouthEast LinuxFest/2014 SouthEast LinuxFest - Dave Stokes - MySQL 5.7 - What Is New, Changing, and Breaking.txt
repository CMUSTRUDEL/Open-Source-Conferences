Title: 2014 SouthEast LinuxFest - Dave Stokes - MySQL 5.7 - What Is New, Changing, and Breaking
Publication date: 2015-05-17
Playlist: 2014 SouthEast LinuxFest
Description: 
	2014 SouthEast LinuxFest
Dave Stokes
MySQL 5.7 - What Is New, What Is Changing, and What We Are Breaking
Captions: 
	00:00:00,000 --> 00:00:05,339
the following presentation was recorded

00:00:02,490 --> 00:00:08,189
the 2014 southeast linux fest in

00:00:05,339 --> 00:00:11,070
charlotte north carolina it is licensed

00:00:08,189 --> 00:00:14,880
under a creative commons license for

00:00:11,070 --> 00:00:18,180
more information visit www selfies linux

00:00:14,880 --> 00:00:19,710
pc org the southeast linux fest would

00:00:18,180 --> 00:00:22,740
like to thank the following diamond

00:00:19,710 --> 00:00:25,560
sponsors in 2014 for helping make these

00:00:22,740 --> 00:00:28,140
videos possum my name is Dave Stokes I

00:00:25,560 --> 00:00:31,070
am a MySQL community manager for Oracle

00:00:28,140 --> 00:00:33,989
that means i go around evangelizing on

00:00:31,070 --> 00:00:36,000
what my OC all is doing i'm also a

00:00:33,989 --> 00:00:37,590
conduit back to management so if you

00:00:36,000 --> 00:00:40,170
ever have a gripe with what we're doing

00:00:37,590 --> 00:00:43,350
or oracle in general give it to me i

00:00:40,170 --> 00:00:45,660
passed along to my bosses now it may not

00:00:43,350 --> 00:00:48,120
seem like they care but they take every

00:00:45,660 --> 00:00:50,700
input that we get from the community and

00:00:48,120 --> 00:00:53,039
they anguish over it they won't show it

00:00:50,700 --> 00:00:56,879
in public but they do take everything

00:00:53,039 --> 00:00:58,500
and internalize it if you need to get a

00:00:56,879 --> 00:01:03,270
hold of me i'm david stokes at oracle

00:00:58,500 --> 00:01:04,890
com my twitter handle is that stoker now

00:01:03,270 --> 00:01:07,049
if you go through back Twitter traffic

00:01:04,890 --> 00:01:10,430
there was a nicole kidman movie called

00:01:07,049 --> 00:01:14,270
stoker so if it's red hair and nudity

00:01:10,430 --> 00:01:14,270
unfortunately this time it's not me

00:01:15,979 --> 00:01:22,310
every oracle presentation has this slide

00:01:19,380 --> 00:01:24,630
in it i'm talking about new features

00:01:22,310 --> 00:01:26,520
oracle normally does not talk about new

00:01:24,630 --> 00:01:28,200
products until it already has a price

00:01:26,520 --> 00:01:30,630
and a stock keeping unit and ready to

00:01:28,200 --> 00:01:32,880
ship open-source products you can't do

00:01:30,630 --> 00:01:34,829
that so if i talk about something being

00:01:32,880 --> 00:01:36,840
blue and you're thinking sky blue and

00:01:34,829 --> 00:01:41,100
I'm thinking cerulean blue and it ends

00:01:36,840 --> 00:01:42,930
up kind of a navy blue just take what I

00:01:41,100 --> 00:01:49,200
talk about say about future products

00:01:42,930 --> 00:01:51,899
with a grain of salt okay people say gee

00:01:49,200 --> 00:01:54,600
I heard that oracle bought mysql what

00:01:51,899 --> 00:01:58,469
are you guys doing well this is what we

00:01:54,600 --> 00:02:01,259
have been doing we've put out a lot of

00:01:58,469 --> 00:02:03,090
software in the past we over-promised

00:02:01,259 --> 00:02:05,969
and under-delivered now we're trying to

00:02:03,090 --> 00:02:06,990
over-deliver and under promise so if

00:02:05,969 --> 00:02:08,759
you've been wondering what our engineers

00:02:06,990 --> 00:02:12,060
been doing for the past four years

00:02:08,759 --> 00:02:13,500
that's a list of it we're now pushing

00:02:12,060 --> 00:02:16,860
250 samad developer

00:02:13,500 --> 00:02:19,680
40 QA folks forget how many support

00:02:16,860 --> 00:02:22,530
folks and we are hiring so if you know

00:02:19,680 --> 00:02:24,690
anyone who's looking for a job last time

00:02:22,530 --> 00:02:28,320
I checked there's like 83 or MySQL

00:02:24,690 --> 00:02:33,690
positions on careers oracle com or

00:02:28,320 --> 00:02:37,080
something like that no the MySQL jobs

00:02:33,690 --> 00:02:38,670
are usually home based so my commute is

00:02:37,080 --> 00:02:40,250
turn right at the dachshund step over

00:02:38,670 --> 00:02:43,230
the beagle and sit down on my chair

00:02:40,250 --> 00:02:46,320
there are some San Francisco jobs if you

00:02:43,230 --> 00:02:48,690
really want to go out there we're making

00:02:46,320 --> 00:02:50,400
money for Oracle we're turning a profit

00:02:48,690 --> 00:02:53,130
which is something very important for

00:02:50,400 --> 00:02:55,110
the folks at Redwood Shores we have the

00:02:53,130 --> 00:02:58,140
number 5 instructor-led class and the

00:02:55,110 --> 00:02:59,940
number 8 video class and olive Oracle

00:02:58,140 --> 00:03:00,930
and Oracle has so many products it's

00:02:59,940 --> 00:03:03,630
hard to count up how many classes

00:03:00,930 --> 00:03:10,560
actually have and like I said we are

00:03:03,630 --> 00:03:13,050
hiring it's actually about 18 months ago

00:03:10,560 --> 00:03:18,060
we came out with MySQL 56 hopefully

00:03:13,050 --> 00:03:19,530
you're running 55 or 56 you wish Peter

00:03:18,060 --> 00:03:20,910
Zaitsev you'll hear tomorrow from

00:03:19,530 --> 00:03:23,489
percona will tell you if you're having

00:03:20,910 --> 00:03:26,610
problems upgrade to 56 it fixes a lot a

00:03:23,489 --> 00:03:28,430
lot of devils we're trying to make the

00:03:26,610 --> 00:03:32,100
performance better on modern hardware

00:03:28,430 --> 00:03:33,330
the performance is all relative but our

00:03:32,100 --> 00:03:36,299
lab guys are seeing over two hundred

00:03:33,330 --> 00:03:37,799
percent better performance if you're

00:03:36,299 --> 00:03:39,180
kind of marginal on your hardware and

00:03:37,799 --> 00:03:40,769
your kind of scraping by you don't want

00:03:39,180 --> 00:03:45,060
to go out buy a new box try and upgrade

00:03:40,769 --> 00:03:48,030
that might get you through we've been

00:03:45,060 --> 00:03:50,370
working on making nodb your storage

00:03:48,030 --> 00:03:51,900
engine of choice because most people out

00:03:50,370 --> 00:03:53,850
there doing transactions and they want

00:03:51,900 --> 00:03:54,930
to ask the compliance and I'll talk

00:03:53,850 --> 00:03:57,570
about some of the things we're doing to

00:03:54,930 --> 00:04:02,579
make things easier for dbas or the folks

00:03:57,570 --> 00:04:06,060
who have to be DV a sore the company the

00:04:02,579 --> 00:04:07,140
optimizer is the core of any database

00:04:06,060 --> 00:04:09,780
will talk about some of the changes

00:04:07,140 --> 00:04:11,519
coming up there used to be optimized

00:04:09,780 --> 00:04:14,940
we're fairly simple things and now

00:04:11,519 --> 00:04:16,650
they're getting extremely complex we've

00:04:14,940 --> 00:04:18,299
also worked on replication to make life

00:04:16,650 --> 00:04:19,799
easier we want to get to the point now

00:04:18,299 --> 00:04:22,530
we worry more about the hardware than

00:04:19,799 --> 00:04:25,349
you do the software and finally we will

00:04:22,530 --> 00:04:26,400
talk a little bit about no SQL if you

00:04:25,349 --> 00:04:29,880
bypass the

00:04:26,400 --> 00:04:31,560
our sir and the optimizer and go

00:04:29,880 --> 00:04:34,410
straight to the data storage it's nine

00:04:31,560 --> 00:04:36,870
times faster there's a talk after this

00:04:34,410 --> 00:04:38,820
by Daniel Bartholomew he'll talk about

00:04:36,870 --> 00:04:41,789
handler socket which is one approach

00:04:38,820 --> 00:04:44,430
this we took on that approach and

00:04:41,789 --> 00:04:47,190
changed it a little bit so if you need

00:04:44,430 --> 00:04:49,979
to get to data as a key value pair the

00:04:47,190 --> 00:04:52,259
no SQL way you can do it but with our

00:04:49,979 --> 00:05:01,639
approach you can also hit the same data

00:04:52,259 --> 00:05:04,560
with SQL at the same time 56 and 57 yeah

00:05:01,639 --> 00:05:08,340
we've also been hearing from a lot of

00:05:04,560 --> 00:05:09,660
the folks who run linux distros that you

00:05:08,340 --> 00:05:12,060
guys are making a lot of changes we

00:05:09,660 --> 00:05:16,199
can't keep up so we decided to come up

00:05:12,060 --> 00:05:18,720
with their own repositories they're out

00:05:16,199 --> 00:05:20,370
there for rail Oracle fedora the Debian

00:05:18,720 --> 00:05:23,130
world and most for our other products

00:05:20,370 --> 00:05:25,620
are out there to a lot of the smaller

00:05:23,130 --> 00:05:27,330
distros the guy who's maintaining mysql

00:05:25,620 --> 00:05:30,120
is also maintaining for other packages

00:05:27,330 --> 00:05:32,280
has a wife kids a little league and a

00:05:30,120 --> 00:05:35,960
job and trying to keep on top of what

00:05:32,280 --> 00:05:35,960
we're doing is just murdering them

00:05:38,820 --> 00:05:43,830
also right now you can download our data

00:05:41,730 --> 00:05:45,960
milestone release or development

00:05:43,830 --> 00:05:47,640
milestone release as I mentioned earlier

00:05:45,960 --> 00:05:50,400
Oracle doesn't talk about upcoming

00:05:47,640 --> 00:05:53,100
products without making you sign a

00:05:50,400 --> 00:05:54,180
nondisclosure agreement we're different

00:05:53,100 --> 00:05:58,020
will let you go out and play with our

00:05:54,180 --> 00:06:03,060
code today our main goals were to make

00:05:58,020 --> 00:06:05,010
in od beam faster improve replication we

00:06:03,060 --> 00:06:07,980
also added some utilities that are

00:06:05,010 --> 00:06:09,990
written in python that do a whole bunch

00:06:07,980 --> 00:06:12,480
of amazing things like copying databases

00:06:09,990 --> 00:06:14,520
checking table integrity sitting up

00:06:12,480 --> 00:06:15,870
replication between master and slave and

00:06:14,520 --> 00:06:18,560
then setting it failover so if the

00:06:15,870 --> 00:06:21,360
master goes down the slave takes over

00:06:18,560 --> 00:06:24,480
we're working on making the thing just

00:06:21,360 --> 00:06:25,980
haul butt and lastly I don't know how

00:06:24,480 --> 00:06:30,440
many here how many of you have to

00:06:25,980 --> 00:06:34,410
support the GBA Tino 30 character set

00:06:30,440 --> 00:06:37,770
what is it it's the super duper Chinese

00:06:34,410 --> 00:06:39,330
character set as far as i know of all

00:06:37,770 --> 00:06:43,380
the major databases are the only ones

00:06:39,330 --> 00:06:45,450
that support it right now is to say our

00:06:43,380 --> 00:06:51,600
download rate from china shot through

00:06:45,450 --> 00:06:54,120
the roof I don't like doing slides with

00:06:51,600 --> 00:06:56,760
graphs because it's real easy to to lie

00:06:54,120 --> 00:07:00,990
with graphs I'll talk a little bit about

00:06:56,760 --> 00:07:05,430
that tomorrow on my big data talk but

00:07:00,990 --> 00:07:08,550
with 57 you can get 630,000 queries per

00:07:05,430 --> 00:07:12,750
second that's probably past what anyone

00:07:08,550 --> 00:07:14,610
in here needs it's roughly two times

00:07:12,750 --> 00:07:20,300
faster than 56 three times faster than

00:07:14,610 --> 00:07:24,120
55 now if you need more than that and

00:07:20,300 --> 00:07:29,880
use our no SQL approach you can get 1

00:07:24,120 --> 00:07:33,390
million 150,000 queries per second which

00:07:29,880 --> 00:07:35,310
is a lot of queries and if that's still

00:07:33,390 --> 00:07:40,620
not good on our cluster product you can

00:07:35,310 --> 00:07:41,730
get two billion updates a minute so does

00:07:40,620 --> 00:07:44,480
that cover everyone in the room here

00:07:41,730 --> 00:07:44,480
make sure

00:07:48,139 --> 00:07:55,500
our work on the optimizer it has been

00:07:53,009 --> 00:07:57,900
rather dramatic drop by the booth later

00:07:55,500 --> 00:08:01,400
and i'll show you visual explained it

00:07:57,900 --> 00:08:09,570
gives you the query plan of what the

00:08:01,400 --> 00:08:11,220
yeah it is it's it's a butt saver you

00:08:09,570 --> 00:08:14,280
can also get the cost information in

00:08:11,220 --> 00:08:16,680
JSON output which is some folks are

00:08:14,280 --> 00:08:21,300
being to play with that now the cost

00:08:16,680 --> 00:08:25,139
model is first how many real dbh do we

00:08:21,300 --> 00:08:27,180
have any or just do DBA stuff Wow how

00:08:25,139 --> 00:08:28,830
many folks also have DBA stuff have to

00:08:27,180 --> 00:08:29,940
do the coding would probably sweep the

00:08:28,830 --> 00:08:32,180
parking lot their boss could put it in

00:08:29,940 --> 00:08:36,899
their job description most of you okay

00:08:32,180 --> 00:08:39,149
in the early days of MySQL cost was disk

00:08:36,899 --> 00:08:42,300
i/o most expensive thing in the chain of

00:08:39,149 --> 00:08:43,770
get everything going well you'll hear me

00:08:42,300 --> 00:08:47,160
talk about the fusion io cards and a

00:08:43,770 --> 00:08:49,020
couple others later there's no delay on

00:08:47,160 --> 00:08:50,940
a right it's all atomic so what is your

00:08:49,020 --> 00:08:55,279
cost how do you decide something from

00:08:50,940 --> 00:09:00,060
zero so we're changing our cost model

00:08:55,279 --> 00:09:02,339
also as people add more solid state

00:09:00,060 --> 00:09:05,160
disks and hybrid disks and all this

00:09:02,339 --> 00:09:06,570
other stuff it gets kind of messy you

00:09:05,160 --> 00:09:08,370
try to figure out okay what is the real

00:09:06,570 --> 00:09:10,730
cost of a curry how do I evaluate which

00:09:08,370 --> 00:09:14,870
parts of the query to do in what order

00:09:10,730 --> 00:09:14,870
so we're making that configurable

00:09:22,370 --> 00:09:27,090
part will be hints and I have a feeling

00:09:24,930 --> 00:09:29,490
part of it will be we're adding smarts

00:09:27,090 --> 00:09:32,520
to go out there and ask the system what

00:09:29,490 --> 00:09:33,930
hardware do you have I know now with 570

00:09:32,520 --> 00:09:35,670
you plug in a fusion-io card it

00:09:33,930 --> 00:09:38,220
recognizes it and automatically turns

00:09:35,670 --> 00:09:40,500
off double buffering which if you're not

00:09:38,220 --> 00:09:47,400
writing things twice that's fifty

00:09:40,500 --> 00:09:48,870
percent faster nodb is where Oracle's

00:09:47,400 --> 00:09:52,770
putting the most of their money for

00:09:48,870 --> 00:09:54,660
storage engines it's the one recommended

00:09:52,770 --> 00:09:57,090
storage engine that we tell everyone

00:09:54,660 --> 00:09:58,800
give it a try if you're still running my

00:09:57,090 --> 00:10:01,530
I Sam please convert over you'll find

00:09:58,800 --> 00:10:05,310
the speed and the quality of life is a

00:10:01,530 --> 00:10:07,800
lot better with it however in the past

00:10:05,310 --> 00:10:09,930
if you need to change your table doing

00:10:07,800 --> 00:10:11,790
it online with a frustrating couple

00:10:09,930 --> 00:10:15,090
seconds couple minutes couple hours a

00:10:11,790 --> 00:10:16,830
couple days maybe a week what happened

00:10:15,090 --> 00:10:18,710
is it would take it the system would

00:10:16,830 --> 00:10:21,990
take a copy of your table and slowly

00:10:18,710 --> 00:10:24,930
recurve it to what you wanted very slow

00:10:21,990 --> 00:10:26,280
very frustrating well we figured out how

00:10:24,930 --> 00:10:29,370
to do that on the fly for a lot of

00:10:26,280 --> 00:10:32,850
commands as I mentioned earlier

00:10:29,370 --> 00:10:34,350
fusion-io cards they have atomic rights

00:10:32,850 --> 00:10:37,310
so there's no reason to have to write it

00:10:34,350 --> 00:10:40,890
in two places in case of a crash it's

00:10:37,310 --> 00:10:43,590
atomic one time don't have to worry

00:10:40,890 --> 00:10:46,200
about anymore we're also doing more

00:10:43,590 --> 00:10:49,520
things on more intelligent handling of

00:10:46,200 --> 00:10:49,520
pages and compression

00:10:52,810 --> 00:10:57,940
here's something you should write down

00:10:54,870 --> 00:11:01,420
for those of you who have bosses who

00:10:57,940 --> 00:11:03,580
write really bad SQL you can set this

00:11:01,420 --> 00:11:06,610
and say okay they have a if they run a

00:11:03,580 --> 00:11:08,740
query it's only gonna run 120 seconds or

00:11:06,610 --> 00:11:11,800
whatever time you want to give them put

00:11:08,740 --> 00:11:13,870
this in there dot my conf file in their

00:11:11,800 --> 00:11:15,250
home directory and whatever query they

00:11:13,870 --> 00:11:18,390
run it's not going to run over that

00:11:15,250 --> 00:11:18,390
amount of time that you set their

00:11:22,350 --> 00:11:31,660
security databases have been kind of a

00:11:26,880 --> 00:11:36,190
quagmire for data for security and we

00:11:31,660 --> 00:11:42,600
really are trying to step it up yeah I

00:11:36,190 --> 00:11:44,920
fat finger that should be a 256 yeah

00:11:42,600 --> 00:11:48,580
forgive me on that i'll jump do that on

00:11:44,920 --> 00:11:50,080
slideshare.net to also password rotation

00:11:48,580 --> 00:11:53,650
policies you can now set it up so the

00:11:50,080 --> 00:11:56,320
passwords rotate and expire being caveat

00:11:53,650 --> 00:11:58,690
there for the application developers the

00:11:56,320 --> 00:11:59,920
password used to reapplication don't do

00:11:58,690 --> 00:12:04,440
that on unless you have an application

00:11:59,920 --> 00:12:04,440
that knows how to set up a new password

00:12:04,710 --> 00:12:09,850
part of this effort that we've been

00:12:08,440 --> 00:12:12,040
doing is to make things better for the

00:12:09,850 --> 00:12:14,800
cloud and in the cloud if you throw up a

00:12:12,040 --> 00:12:16,600
mysql instance right now there's

00:12:14,800 --> 00:12:20,710
anonymous accounts there's a test data

00:12:16,600 --> 00:12:23,770
set and there's no root password not

00:12:20,710 --> 00:12:27,100
exactly a great situation so from now on

00:12:23,770 --> 00:12:28,780
with 57 it will assign a root password

00:12:27,100 --> 00:12:32,160
it will get rid of the test account or

00:12:28,780 --> 00:12:32,160
the anonymous accounts

00:12:33,750 --> 00:12:41,970
I will tell you under / root dot my I'm

00:12:39,270 --> 00:12:44,580
mysql underscore root or a minor score

00:12:41,970 --> 00:12:46,530
password but the the password is so you

00:12:44,580 --> 00:12:52,560
secure shell in grab it that way and

00:12:46,530 --> 00:12:54,360
then you can change it G is this one me

00:12:52,560 --> 00:12:57,060
two cases of beer from friends who had

00:12:54,360 --> 00:12:59,700
to run postgres because they needed GIS

00:12:57,060 --> 00:13:02,610
information and they said as soon as you

00:12:59,700 --> 00:13:05,580
get that running in MySQL bull beer you

00:13:02,610 --> 00:13:08,420
I don't didn't have any direct influence

00:13:05,580 --> 00:13:13,290
but I'm very happy the two cases of beer

00:13:08,420 --> 00:13:16,500
we went to boot boost geometry instead

00:13:13,290 --> 00:13:18,510
of boot I'm sorry and used to use their

00:13:16,500 --> 00:13:20,490
code and we contribute back to them so

00:13:18,510 --> 00:13:23,670
now you have all the lovely GIS stuff

00:13:20,490 --> 00:13:29,640
for your own equivalents of open maps

00:13:23,670 --> 00:13:32,750
and all that as I mentioned earlier the

00:13:29,640 --> 00:13:32,750
Chinese character set

00:13:34,810 --> 00:13:42,290
performance schema was added starting in

00:13:38,270 --> 00:13:44,930
55 configured 56 our information schema

00:13:42,290 --> 00:13:47,990
was 55 performance kemah 55 I'm came out

00:13:44,930 --> 00:13:49,280
56 in the past the low level you

00:13:47,990 --> 00:13:52,130
couldn't really tell what's going on in

00:13:49,280 --> 00:13:53,450
a server the Oracle dba's would come

00:13:52,130 --> 00:13:54,980
through and say I have all these V

00:13:53,450 --> 00:13:56,780
dollar variables to tell me whom the

00:13:54,980 --> 00:13:59,150
hogs are who's doing what to whom what

00:13:56,780 --> 00:14:03,560
curries are doing to my system and we

00:13:59,150 --> 00:14:06,050
never had that so now we have some of

00:14:03,560 --> 00:14:07,730
those and we're adding more there is a

00:14:06,050 --> 00:14:09,770
performance hit of three to five percent

00:14:07,730 --> 00:14:11,870
that you can just turn it off if you

00:14:09,770 --> 00:14:12,890
need that more performance but if you're

00:14:11,870 --> 00:14:14,030
trying to figure out what's going on

00:14:12,890 --> 00:14:16,670
with your system and you want to turn

00:14:14,030 --> 00:14:19,940
tune things it gives you a whole lot of

00:14:16,670 --> 00:14:22,460
information if you stop by the the desk

00:14:19,940 --> 00:14:23,870
later I can show you using MySQL

00:14:22,460 --> 00:14:27,110
workbench some of that information and

00:14:23,870 --> 00:14:29,090
how it flows out and it's amazing you

00:14:27,110 --> 00:14:30,470
can reset the counters when your queries

00:14:29,090 --> 00:14:32,830
come back and see exactly what's been

00:14:30,470 --> 00:14:32,830
going on

00:14:38,190 --> 00:14:43,740
we've also can with something we're

00:14:41,250 --> 00:14:45,870
calling the schema this is kind of

00:14:43,740 --> 00:14:47,370
prepackaged views of some of the

00:14:45,870 --> 00:14:50,340
information per performance human

00:14:47,370 --> 00:14:52,560
information schema it's the general task

00:14:50,340 --> 00:14:55,740
the dba's do to try to free or what's

00:14:52,560 --> 00:14:57,600
going on with their system there's a lot

00:14:55,740 --> 00:15:00,210
of documentation or so you come out the

00:14:57,600 --> 00:15:02,130
next couple months on that we're trying

00:15:00,210 --> 00:15:03,840
to figure out what do dbas need on a

00:15:02,130 --> 00:15:07,170
regular basis and how to prepackage

00:15:03,840 --> 00:15:09,060
these queries for you so we're going to

00:15:07,170 --> 00:15:11,550
give you the tools you need so that you

00:15:09,060 --> 00:15:19,050
can figure out what's really going on as

00:15:11,550 --> 00:15:20,340
your system runs ok replication does

00:15:19,050 --> 00:15:26,070
anyone here over set up Oracle

00:15:20,340 --> 00:15:31,070
replication Oracle ok how long did it

00:15:26,070 --> 00:15:35,030
take you long time the first time the

00:15:31,070 --> 00:15:35,030
other gentlemen how long did it take you

00:15:36,020 --> 00:15:42,060
yeah the first time I did or for

00:15:39,600 --> 00:15:43,650
application took a week of typing not a

00:15:42,060 --> 00:15:46,290
whole lot of actually getting things

00:15:43,650 --> 00:15:51,120
running it was a week of typing mysql

00:15:46,290 --> 00:15:53,180
replication 56 and 57 it's a 10-minute

00:15:51,120 --> 00:15:56,580
typing exercise if you're slow typer

00:15:53,180 --> 00:15:59,400
with global transaction ids you don't

00:15:56,580 --> 00:16:01,500
have to worry about the log file on the

00:15:59,400 --> 00:16:02,880
slave is over here the masters over here

00:16:01,500 --> 00:16:04,020
tell it to read from this position in

00:16:02,880 --> 00:16:06,390
that position and get everything else

00:16:04,020 --> 00:16:11,060
thinks you just say go over that box get

00:16:06,390 --> 00:16:11,060
from transaction ID 1 and keep going

00:16:11,660 --> 00:16:17,580
we've been working on getting throughput

00:16:14,280 --> 00:16:21,780
better it used to be it was single

00:16:17,580 --> 00:16:26,160
threaded no longer yes it's a it helps a

00:16:21,780 --> 00:16:29,670
lot we've also been working on semi

00:16:26,160 --> 00:16:32,040
synchronous replication in the past

00:16:29,670 --> 00:16:33,300
masculine asynchronous only where the

00:16:32,040 --> 00:16:35,850
master writes the copy of the

00:16:33,300 --> 00:16:39,180
transaction out to the log and the slave

00:16:35,850 --> 00:16:40,560
comes along sometime later grabs that

00:16:39,180 --> 00:16:43,890
and applies it to its own copy of the

00:16:40,560 --> 00:16:47,070
data we introduce some i sync with 56

00:16:43,890 --> 00:16:49,380
and what that means is the master writes

00:16:47,070 --> 00:16:50,209
it out to the log and at least one slave

00:16:49,380 --> 00:16:52,399
has to ignore

00:16:50,209 --> 00:16:58,089
judge that has a copy of it before it

00:16:52,399 --> 00:17:00,949
proceeds we've been making a lot of

00:16:58,089 --> 00:17:02,929
improvements in that and there's a

00:17:00,949 --> 00:17:05,689
recent blog post Morgan talker that was

00:17:02,929 --> 00:17:07,579
last week that says it's only three or

00:17:05,689 --> 00:17:10,449
four percent slower the general

00:17:07,579 --> 00:17:13,130
replication so for the security I

00:17:10,449 --> 00:17:15,679
recommend it we've also been adding

00:17:13,130 --> 00:17:17,029
check sums and other features to make

00:17:15,679 --> 00:17:32,840
sure the data doesn't get lost or

00:17:17,029 --> 00:17:34,940
corrupted yeah we're making it so that

00:17:32,840 --> 00:17:42,320
you have checkpoints and homemade other

00:17:34,940 --> 00:17:44,419
stuff too yoshinori milton obote he was

00:17:42,320 --> 00:17:46,520
saying that the lossless one was

00:17:44,419 --> 00:17:47,770
actually if I remember correctly he said

00:17:46,520 --> 00:17:52,539
that the lossless one was actually

00:17:47,770 --> 00:17:52,539
faster for him for him yes

00:17:53,420 --> 00:17:59,670
yeah for those who didn't hear one of

00:17:56,970 --> 00:18:01,650
the Facebook engineers I was saying that

00:17:59,670 --> 00:18:05,010
the lossless replication was faster than

00:18:01,650 --> 00:18:06,810
him than the standard asynchronous the

00:18:05,010 --> 00:18:10,770
guys at Facebook can walk on water

00:18:06,810 --> 00:18:14,100
sometimes so I'm not really sure what he

00:18:10,770 --> 00:18:15,600
was doing it's a low level but yoshinori

00:18:14,100 --> 00:18:21,990
really knows his stuff and if he's happy

00:18:15,600 --> 00:18:24,180
with it we're a static also we are going

00:18:21,990 --> 00:18:25,860
to have in 57 dynamic replication

00:18:24,180 --> 00:18:27,930
filters so if one of your slaves is

00:18:25,860 --> 00:18:30,330
filling up and you want to redirect its

00:18:27,930 --> 00:18:33,840
traffic to another box you'll be able to

00:18:30,330 --> 00:18:35,850
do that on the fly yeah or suddenly your

00:18:33,840 --> 00:18:38,010
boss tells you hey we work for the IRS

00:18:35,850 --> 00:18:41,310
and Congress is coming so redirect all

00:18:38,010 --> 00:18:48,600
the traffic to Devon l not we won't do

00:18:41,310 --> 00:18:52,440
that multi-source replication if you

00:18:48,600 --> 00:18:54,450
have a big bad box and you want to take

00:18:52,440 --> 00:18:55,680
all your little shards of data and put

00:18:54,450 --> 00:18:57,390
them on one box for backup purposes

00:18:55,680 --> 00:19:02,120
rather than trying to backup 18

00:18:57,390 --> 00:19:02,120
different boxes you can now do that

00:19:08,370 --> 00:19:12,760
originally everything with

00:19:10,480 --> 00:19:15,640
single-threaded and it was single

00:19:12,760 --> 00:19:19,150
threaded for schema and now we're trying

00:19:15,640 --> 00:19:20,620
to make it so that you don't have to

00:19:19,150 --> 00:19:28,980
worry about being blocked on one table

00:19:20,620 --> 00:19:32,350
or one schema for replication fabric

00:19:28,980 --> 00:19:36,160
came out about three weeks ago this is a

00:19:32,350 --> 00:19:39,090
free tool written in python that does

00:19:36,160 --> 00:19:44,680
high availability and it does sharding

00:19:39,090 --> 00:19:47,890
it's once again free and the idea is

00:19:44,680 --> 00:19:50,620
that you set up your master your slave

00:19:47,890 --> 00:19:53,080
for replication and you can charge your

00:19:50,620 --> 00:19:55,210
data with master and slave replicants

00:19:53,080 --> 00:19:56,950
underneath that and you can figure it

00:19:55,210 --> 00:19:59,950
for automatic failover so if something

00:19:56,950 --> 00:20:01,390
goes down or if you are sharding and you

00:19:59,950 --> 00:20:04,540
decide you need to cut things into

00:20:01,390 --> 00:20:11,290
smaller shards it will cut it down for

00:20:04,540 --> 00:20:13,120
you yeah you you tell it I want to

00:20:11,290 --> 00:20:15,610
instead of breaking everything a to j

00:20:13,120 --> 00:20:18,270
and all that you saw okay i'm going to

00:20:15,610 --> 00:20:22,860
go a through C and then d through E and

00:20:18,270 --> 00:20:22,860
it's very very slick

00:20:28,110 --> 00:20:33,820
sharding or reputation this is something

00:20:31,269 --> 00:20:37,179
that could be used to create a shadow

00:20:33,820 --> 00:20:39,539
server with an automatic fail yes or we

00:20:37,179 --> 00:20:42,159
could use our MySQL utilities for that

00:20:39,539 --> 00:20:43,929
what's nice about this and I've been

00:20:42,159 --> 00:20:45,789
playing with it at home is I remember

00:20:43,929 --> 00:20:47,889
the old days when you had to figure out

00:20:45,789 --> 00:20:50,710
okay who has the virtual IP where and

00:20:47,889 --> 00:20:53,289
chase down where it was and reset the

00:20:50,710 --> 00:20:57,610
networking this take care takes care of

00:20:53,289 --> 00:21:00,820
all that the smarts are actually in the

00:20:57,610 --> 00:21:02,379
connector so as your program connects in

00:21:00,820 --> 00:21:09,070
says I want to talk to the shard that

00:21:02,379 --> 00:21:11,440
has the records for Joe Baker see it the

00:21:09,070 --> 00:21:13,389
connector knows to acquire the fabric

00:21:11,440 --> 00:21:15,899
controller okay I want to talk to baker

00:21:13,389 --> 00:21:18,489
and it gets told to go down to here now

00:21:15,899 --> 00:21:21,879
this disappears you had to set up for

00:21:18,489 --> 00:21:23,769
high availability it says I want to talk

00:21:21,879 --> 00:21:25,179
to Baker up not there you know where do

00:21:23,769 --> 00:21:26,649
I really talk to Baker for and the

00:21:25,179 --> 00:21:29,369
connector he has all the control of

00:21:26,649 --> 00:21:29,369
what's going on

00:21:36,090 --> 00:21:40,690
you're probably gonna have a little bit

00:21:37,750 --> 00:21:43,960
issues I'm guessing up with no answer

00:21:40,690 --> 00:21:45,460
now I'd have probably see the query you

00:21:43,960 --> 00:21:57,190
mean wrapping between two high

00:21:45,460 --> 00:21:58,450
availability segments yeah i'm guessing

00:21:57,190 --> 00:22:01,930
that you're probably going to only be

00:21:58,450 --> 00:22:04,150
talking to one box out of this at a time

00:22:01,930 --> 00:22:05,680
anyway so I'm hopefully the server's

00:22:04,150 --> 00:22:13,570
smart enough to figure out worded pull

00:22:05,680 --> 00:22:19,600
that from does anyone here played with

00:22:13,570 --> 00:22:22,660
muscular if you need if you need a mask

00:22:19,600 --> 00:22:24,880
you'll service that doesn't go down like

00:22:22,660 --> 00:22:25,990
you're a cell phone company tracking

00:22:24,880 --> 00:22:29,320
people as they move from tower to tower

00:22:25,990 --> 00:22:31,630
which they all use mysql cluster or the

00:22:29,320 --> 00:22:32,980
US Navy doing carrier flight operations

00:22:31,630 --> 00:22:35,890
and you want to make sure that you could

00:22:32,980 --> 00:22:37,660
land aircraft refuel them and take them

00:22:35,890 --> 00:22:40,870
off while half the ship is on fire in

00:22:37,660 --> 00:22:43,390
their half is leaking water that's

00:22:40,870 --> 00:22:45,160
cluster it's designed to have no single

00:22:43,390 --> 00:22:47,110
point of failure which means you need to

00:22:45,160 --> 00:22:48,640
buy a whole lot of hardware and network

00:22:47,110 --> 00:22:51,280
equipment to make sure that's

00:22:48,640 --> 00:22:53,080
implemented that way it automatically

00:22:51,280 --> 00:22:55,360
shards on the fly it's easy to add nodes

00:22:53,080 --> 00:22:58,840
you can replicate easily mass active

00:22:55,360 --> 00:23:02,830
active between data centers but it's a

00:22:58,840 --> 00:23:04,450
very limited purpose tool it isn't a

00:23:02,830 --> 00:23:07,270
general-purpose database your kind of

00:23:04,450 --> 00:23:14,620
limited by memory but if you need 7 24

00:23:07,270 --> 00:23:16,120
365 this is what we recommend no it's a

00:23:14,620 --> 00:23:19,930
separate product we bought years ago

00:23:16,120 --> 00:23:22,720
from a telecom company and it's the MDB

00:23:19,930 --> 00:23:26,730
storage engine so think of it as

00:23:22,720 --> 00:23:26,730
Microsoft as mysql raid

00:23:38,120 --> 00:23:44,070
it can cluster is kinda like a Top Fuel

00:23:42,330 --> 00:23:46,890
Drag Race er if you need to go 300 miles

00:23:44,070 --> 00:23:48,120
an hour that's your best option if

00:23:46,890 --> 00:23:49,770
you're going down the 7-eleven to get a

00:23:48,120 --> 00:23:52,380
gallon of milk it's probably not what

00:23:49,770 --> 00:23:55,530
you need for our kind of a gap between

00:23:52,380 --> 00:24:02,640
the two what we're recommending for

00:23:55,530 --> 00:24:06,090
folks if they just need a master and

00:24:02,640 --> 00:24:08,850
slave and zero data loss standard

00:24:06,090 --> 00:24:15,330
replication with 57 you're going to

00:24:08,850 --> 00:24:21,330
scale out reads fabric is more for high

00:24:15,330 --> 00:24:28,020
availability and charting drbd anyone

00:24:21,330 --> 00:24:30,300
here when drbd drbd works great with

00:24:28,020 --> 00:24:31,710
nodb but the only trouble with dr BD is

00:24:30,300 --> 00:24:34,080
the boxes need to be right next to each

00:24:31,710 --> 00:24:37,770
other and if you get into a stone earth

00:24:34,080 --> 00:24:40,080
loop everything goes down and then for

00:24:37,770 --> 00:24:47,100
those who need everything is the cluster

00:24:40,080 --> 00:24:49,299
product yes

00:24:47,100 --> 00:24:51,940
the only clustering I've done is /

00:24:49,299 --> 00:24:54,039
Chronos cluster now and I thought I

00:24:51,940 --> 00:24:57,120
understood that the clustering at least

00:24:54,039 --> 00:24:57,120
a virgo cluster

00:24:57,299 --> 00:25:02,309
why's here I thought that was like good

00:24:58,889 --> 00:25:05,789
for like medium to large but for like

00:25:02,309 --> 00:25:08,789
the really large scenarios that it

00:25:05,789 --> 00:25:11,190
wasn't as effective yeah i'm not an

00:25:08,789 --> 00:25:13,019
expert on galera there are some other

00:25:11,190 --> 00:25:16,110
folks in the show that I can point you

00:25:13,019 --> 00:25:19,980
to you're saying at least for the mice

00:25:16,110 --> 00:25:22,379
evil cluster like I work for a very the

00:25:19,980 --> 00:25:26,419
largest national auto parts distributor

00:25:22,379 --> 00:25:28,529
no I have a decent amount of data yeah

00:25:26,419 --> 00:25:30,029
you're saying if I wanted to do

00:25:28,529 --> 00:25:33,149
something like this we're sharding right

00:25:30,029 --> 00:25:34,529
now with just just sharted yeah you're

00:25:33,149 --> 00:25:35,970
saying that the mice evil cluster

00:25:34,529 --> 00:25:39,590
potentially would be something I might

00:25:35,970 --> 00:25:43,049
be interested in potentially if you need

00:25:39,590 --> 00:25:47,190
5 9's availability you need

00:25:43,049 --> 00:25:49,230
sub-millisecond or 2 or 3 millisecond

00:25:47,190 --> 00:25:51,570
response time like a cell phone going

00:25:49,230 --> 00:25:53,369
between tower it's not a general-purpose

00:25:51,570 --> 00:25:55,889
database I'd be more likely to point you

00:25:53,369 --> 00:25:57,629
towards fabric and maybe some of the

00:25:55,889 --> 00:25:59,820
more critical applications like tracking

00:25:57,629 --> 00:26:01,830
shipments of parts if you have your own

00:25:59,820 --> 00:26:04,679
truck fleet and you have a way of

00:26:01,830 --> 00:26:06,059
tracking them through a satellite maybe

00:26:04,679 --> 00:26:12,179
do that with cluster if you really need

00:26:06,059 --> 00:26:15,330
to know where they are every second open

00:26:12,179 --> 00:26:17,639
source yeah by the way everything I've

00:26:15,330 --> 00:26:20,039
talked about so far unless I said it was

00:26:17,639 --> 00:26:22,309
paid I mean open its open source it's

00:26:20,039 --> 00:26:22,309
free

00:26:26,650 --> 00:26:32,200
no the source codes out there yeah

00:26:34,300 --> 00:26:38,890
okay 57 is great it's going to be bigger

00:26:36,970 --> 00:26:41,950
faster stronger smarter does all the

00:26:38,890 --> 00:26:48,690
other stuff but anytime you bring in

00:26:41,950 --> 00:26:50,650
something new you break stuff dress so

00:26:48,690 --> 00:26:52,360
we know there's going to be some pain

00:26:50,650 --> 00:26:54,600
and we're trying to come out beforehand

00:26:52,360 --> 00:27:01,660
and say this is what we're breaking

00:26:54,600 --> 00:27:03,550
beware one of the reasons we're saying

00:27:01,660 --> 00:27:04,930
this is we don't watch you caught

00:27:03,550 --> 00:27:08,050
flat-footed and we're trying to get

00:27:04,930 --> 00:27:10,510
folks to prepare and also behaviors will

00:27:08,050 --> 00:27:12,820
tell you that if something bad or

00:27:10,510 --> 00:27:14,980
something potentially bad is going to

00:27:12,820 --> 00:27:21,190
happen alert the people as soon as you

00:27:14,980 --> 00:27:24,430
can let them come to terms with it this

00:27:21,190 --> 00:27:30,220
probably won't touch anyone this room if

00:27:24,430 --> 00:27:34,300
you did grouping on objects that weren't

00:27:30,220 --> 00:27:36,040
part of your query the primary key and

00:27:34,300 --> 00:27:38,620
the query MySQL use to give kind of

00:27:36,040 --> 00:27:40,660
random results frustrated the hell out

00:27:38,620 --> 00:27:43,270
of a lot of very serious DBAs most

00:27:40,660 --> 00:27:46,030
people didn't notice we're fixing that

00:27:43,270 --> 00:27:55,150
make sure that you're grouping only on

00:27:46,030 --> 00:27:57,610
what you're selecting replication we're

00:27:55,150 --> 00:27:59,950
going to make durable the default well

00:27:57,610 --> 00:28:02,350
what does that mean well in the past the

00:27:59,950 --> 00:28:05,530
replication log was on a file the data

00:28:02,350 --> 00:28:08,410
was in an N 0 DB table system crashes

00:28:05,530 --> 00:28:10,180
comes back up you have incompatibilities

00:28:08,410 --> 00:28:13,690
between the file because the files here

00:28:10,180 --> 00:28:16,000
and in ODB's here so we get the smart

00:28:13,690 --> 00:28:18,370
idea of putting all the log files in an

00:28:16,000 --> 00:28:20,260
inner DB table so as nodb rebuilds

00:28:18,370 --> 00:28:21,400
itself it knows where the checkpoints

00:28:20,260 --> 00:28:23,830
are and rebuilds itself rather

00:28:21,400 --> 00:28:26,070
efficiently in 57 that's going to be the

00:28:23,830 --> 00:28:26,070
default

00:28:33,640 --> 00:28:39,410
the two table entries is that for that

00:28:37,549 --> 00:28:42,320
sounds like it's for a replication yeah

00:28:39,410 --> 00:28:46,340
so table will be default over let's say

00:28:42,320 --> 00:28:48,590
file then yeah you know do you know why

00:28:46,340 --> 00:28:50,690
like because i'm using replication i'm

00:28:48,590 --> 00:28:53,120
doing fine yeah well in the case of a

00:28:50,690 --> 00:28:55,460
crash nodb knows how how to efficiently

00:28:53,120 --> 00:28:56,900
rebuild itself and it doesn't know

00:28:55,460 --> 00:28:58,250
anything about the log file and it's

00:28:56,900 --> 00:29:00,740
until it starts trying to get everything

00:28:58,250 --> 00:29:02,870
sink back up and in the past it was

00:29:00,740 --> 00:29:05,750
always a great mass because you never

00:29:02,870 --> 00:29:11,260
know when the system did the f CTL on

00:29:05,750 --> 00:29:11,260
the file yeah

00:29:14,800 --> 00:29:20,320
we're going to deprecate show engine in

00:29:17,830 --> 00:29:22,210
od be mutex we have that information in

00:29:20,320 --> 00:29:28,390
other places we're going to get rid of

00:29:22,210 --> 00:29:33,100
the innodb monitor tables anyone here

00:29:28,390 --> 00:29:36,520
run work wordpress okay this is going to

00:29:33,100 --> 00:29:38,500
bite you in the butt WordPress is very

00:29:36,520 --> 00:29:39,970
loosey-goosey their ideas that no matter

00:29:38,500 --> 00:29:43,450
what you do to it is never going to

00:29:39,970 --> 00:29:46,540
cause word for us to fail well by

00:29:43,450 --> 00:29:48,820
putting in strict mode it causes

00:29:46,540 --> 00:29:51,100
WordPress to fail so why are we putting

00:29:48,820 --> 00:29:52,870
in strict mode and pissing off all the

00:29:51,100 --> 00:29:55,320
WordPress users after all everyone tells

00:29:52,870 --> 00:29:57,460
you it's the world's best CMS out there

00:29:55,320 --> 00:30:01,210
well for years we've had people saying

00:29:57,460 --> 00:30:04,930
mysql throws away data to discussions on

00:30:01,210 --> 00:30:06,460
that today including one earlier and we

00:30:04,930 --> 00:30:08,530
just said well the tighten things up

00:30:06,460 --> 00:30:10,450
let's make strict mode strict so you

00:30:08,530 --> 00:30:13,000
can't put in all zeros for a date you

00:30:10,450 --> 00:30:16,770
can't try to put in 17 characters and a

00:30:13,000 --> 00:30:23,050
16 character-filled things like that so

00:30:16,770 --> 00:30:25,600
we're more strict breaks WordPress we're

00:30:23,050 --> 00:30:27,430
getting rid of explained partitions and

00:30:25,600 --> 00:30:32,220
explain extended anyone ever use any of

00:30:27,430 --> 00:30:36,130
those okay that will all be part of

00:30:32,220 --> 00:30:37,570
visual explain please come by the booth

00:30:36,130 --> 00:30:39,820
later and let me show you visual explain

00:30:37,570 --> 00:30:45,490
i wowed a couple people earlier today on

00:30:39,820 --> 00:30:46,690
that altar ignore cable this was

00:30:45,490 --> 00:30:51,870
something that wasn't in the standard

00:30:46,690 --> 00:30:51,870
and some of the purest objected

00:30:52,690 --> 00:30:58,180
query cache in the early days of MySQL

00:30:56,560 --> 00:30:59,950
we told you to run a query cache because

00:30:58,180 --> 00:31:02,050
if you're repeating a query over and

00:30:59,950 --> 00:31:03,190
over and over again didn't make sense to

00:31:02,050 --> 00:31:05,440
run it through the parse through the

00:31:03,190 --> 00:31:08,500
optimizer and go out do it just put in a

00:31:05,440 --> 00:31:10,000
cache well someone finally figured out

00:31:08,500 --> 00:31:11,380
well if you're running a query over and

00:31:10,000 --> 00:31:13,240
over and over again you need to either

00:31:11,380 --> 00:31:16,120
put it in a caching layer like memcache

00:31:13,240 --> 00:31:18,970
d or bury it someplace in storage in

00:31:16,120 --> 00:31:22,990
your application so we're advising

00:31:18,970 --> 00:31:24,520
people turn off the query cache add the

00:31:22,990 --> 00:31:32,950
memory back into the general pool for

00:31:24,520 --> 00:31:35,410
the server and this caused a big

00:31:32,950 --> 00:31:36,760
objection a couple weeks ago in the

00:31:35,410 --> 00:31:40,840
early days rather than running out null

00:31:36,760 --> 00:31:43,510
we did a backslash capital n into things

00:31:40,840 --> 00:31:48,010
like my ass my into dump tables from my

00:31:43,510 --> 00:31:50,320
SQL dump we don't know of anyone using

00:31:48,010 --> 00:31:59,920
it and we've only got one objection so

00:31:50,320 --> 00:32:01,120
far and that was for Monty well you made

00:31:59,920 --> 00:32:03,970
a case were there was one of those

00:32:01,120 --> 00:32:08,610
things were the coders were going it's a

00:32:03,970 --> 00:32:08,610
kludge we knew it was occlusion yes sir

00:32:11,580 --> 00:32:16,480
it shouldn't affect those at all this is

00:32:13,810 --> 00:32:19,900
just for I believe riding it out

00:32:16,480 --> 00:32:23,220
serialized but internally a nobody the

00:32:19,900 --> 00:32:23,220
storage engine should handle all that

00:32:25,440 --> 00:32:31,420
federated and merge storage engines if

00:32:30,370 --> 00:32:33,040
you're going to do that we prefer

00:32:31,420 --> 00:32:37,120
multi-source we recommend multi-source

00:32:33,040 --> 00:32:38,860
replication for federated we don't know

00:32:37,120 --> 00:32:42,730
of anyone who's really seriously using

00:32:38,860 --> 00:32:44,020
federated if you do please let me know I

00:32:42,730 --> 00:32:46,230
have some engineers would love to talk

00:32:44,020 --> 00:32:46,230
to you

00:32:51,290 --> 00:33:02,690
that's fine oh that's real yeah that's a

00:32:57,470 --> 00:33:05,120
baby dolphin yes yeah the other thing if

00:33:02,690 --> 00:33:07,010
you ever see one born in the wild that's

00:33:05,120 --> 00:33:08,360
very bloody experience in the mom gets

00:33:07,010 --> 00:33:11,030
the baby out of there as soon as it can

00:33:08,360 --> 00:33:17,930
so I don't know I just saw this picture

00:33:11,030 --> 00:33:20,900
and liked it okay so we've been working

00:33:17,930 --> 00:33:29,020
on making things better bigger stronger

00:33:20,900 --> 00:33:31,550
and these are goals going on for mysql

00:33:29,020 --> 00:33:35,180
we're trying to optimize it for the

00:33:31,550 --> 00:33:36,800
general web and the cloud and embedded

00:33:35,180 --> 00:33:38,960
and every other use case we'd figure

00:33:36,800 --> 00:33:41,300
we're going through the architecture

00:33:38,960 --> 00:33:42,950
we're trying to make it pluggable in the

00:33:41,300 --> 00:33:44,570
past you could add storage engines but

00:33:42,950 --> 00:33:46,130
it was a pain in the butt it's not well

00:33:44,570 --> 00:33:48,590
documented we're going through cleaning

00:33:46,130 --> 00:33:50,060
up that code we have several companies

00:33:48,590 --> 00:33:51,710
were working with who are making

00:33:50,060 --> 00:33:54,500
suggestions on how they can get their

00:33:51,710 --> 00:33:55,700
stuff in there if you're really curious

00:33:54,500 --> 00:33:59,390
about that let me know and give some

00:33:55,700 --> 00:34:01,640
more details later we're adding a data

00:33:59,390 --> 00:34:03,200
dictionary to nodb that doesn't mean

00:34:01,640 --> 00:34:05,390
much to you right now but if you're

00:34:03,200 --> 00:34:07,310
doing cross schema joins it will make a

00:34:05,390 --> 00:34:14,690
big performance increase for you in the

00:34:07,310 --> 00:34:15,800
future automagically was like I said

00:34:14,690 --> 00:34:17,000
earlier we're trying to get to the point

00:34:15,800 --> 00:34:18,410
where you're worrying more about the

00:34:17,000 --> 00:34:21,940
hardware than you are actually about the

00:34:18,410 --> 00:34:21,940
software running on top of it

00:34:27,830 --> 00:34:32,250
the the one that I was playing with two

00:34:30,360 --> 00:34:36,419
weeks ago was an in-dash system for a

00:34:32,250 --> 00:34:38,460
car Lasky all was monitoring everything

00:34:36,419 --> 00:34:40,830
you were doing in the car you know

00:34:38,460 --> 00:34:43,139
volume of your radio fuel consumption

00:34:40,830 --> 00:34:44,700
air-fuel mixture from the engine and it

00:34:43,139 --> 00:34:47,310
was a real something about the size of a

00:34:44,700 --> 00:34:50,460
cigarette pack that's buried into your

00:34:47,310 --> 00:34:52,530
dashboard and the great thing about it

00:34:50,460 --> 00:34:54,000
is you go to your car dealership they

00:34:52,530 --> 00:34:55,380
plug it in there and they can tell you

00:34:54,000 --> 00:34:57,149
if we're listening to Grateful Dead at

00:34:55,380 --> 00:35:00,630
70 miles an hour on Tuesday when you had

00:34:57,149 --> 00:35:02,280
a misfire the only trouble is doubt same

00:35:00,630 --> 00:35:04,560
information is available via a court

00:35:02,280 --> 00:35:05,490
order to the guy that you happen to run

00:35:04,560 --> 00:35:10,880
over while you're listening to the

00:35:05,490 --> 00:35:13,380
Grateful Dead we're trying to do faster

00:35:10,880 --> 00:35:16,380
connections per second there is an

00:35:13,380 --> 00:35:20,070
announcement this past April Google

00:35:16,380 --> 00:35:21,210
Facebook LinkedIn and some other folks

00:35:20,070 --> 00:35:24,120
are throwing a bunch of their patches

00:35:21,210 --> 00:35:27,510
together and we're incorporating those

00:35:24,120 --> 00:35:29,190
to make things bigger faster now very

00:35:27,510 --> 00:35:31,410
few of us in this room have the problems

00:35:29,190 --> 00:35:33,210
that those companies do but it's nice to

00:35:31,410 --> 00:35:36,360
know that they're contributing code back

00:35:33,210 --> 00:35:39,060
to the community and we're incorporating

00:35:36,360 --> 00:35:41,280
what we can when we can do if you make

00:35:39,060 --> 00:35:44,790
the mistake of running a my sequel back

00:35:41,280 --> 00:35:46,320
mail server without passion you'll break

00:35:44,790 --> 00:35:48,570
the connections per second pretty quick

00:35:46,320 --> 00:35:51,100
on that yeah

00:35:48,570 --> 00:35:53,740
was it just a simple mistake or did you

00:35:51,100 --> 00:35:55,420
do on a purpose sir the first time I set

00:35:53,740 --> 00:35:57,460
one up I didn't know about you know

00:35:55,420 --> 00:35:58,570
postfix being able to hatch it so it

00:35:57,460 --> 00:36:00,130
wouldn't just keep looking up in the

00:35:58,570 --> 00:36:02,620
database so just get looking up the

00:36:00,130 --> 00:36:08,260
database ouch then somebody told me

00:36:02,620 --> 00:36:10,750
about it but for the folks who are

00:36:08,260 --> 00:36:17,020
serous DBAs and here how often do you

00:36:10,750 --> 00:36:24,820
use other databases ok but no debe to

00:36:17,020 --> 00:36:27,120
know Oracle or ok yeah do you lose a lot

00:36:24,820 --> 00:36:29,530
to use a lot of triggers and other

00:36:27,120 --> 00:36:40,240
stored procedures to do business logic

00:36:29,530 --> 00:36:43,750
with an app within the database no

00:36:40,240 --> 00:36:46,330
triggers the reason I'm asking is in

00:36:43,750 --> 00:36:48,610
some of the database world a lot of the

00:36:46,330 --> 00:36:51,400
smarts for your application actually

00:36:48,610 --> 00:36:52,930
reside in the database which is real

00:36:51,400 --> 00:36:55,600
frustrating if you don't know that if

00:36:52,930 --> 00:37:04,980
you add you put a 7 in a column then

00:36:55,600 --> 00:37:04,980
ends up being 42 ok

00:37:05,680 --> 00:37:09,559
especially if you're playing the oracle

00:37:07,489 --> 00:37:12,440
database you type in five boom there's

00:37:09,559 --> 00:37:14,390
42 what the hell I'll update that column

00:37:12,440 --> 00:37:18,049
I'll set it back 25 set 25 you do a

00:37:14,390 --> 00:37:19,460
select on it and its back to 42 what's

00:37:18,049 --> 00:37:20,930
happened is there might be a trigger

00:37:19,460 --> 00:37:22,160
might be a stored procedure there might

00:37:20,930 --> 00:37:25,249
be multiple triggers and stored

00:37:22,160 --> 00:37:27,049
procedures something that some analysts

00:37:25,249 --> 00:37:29,650
came up was said okay whenever you see

00:37:27,049 --> 00:37:42,859
this in this column or change it to that

00:37:29,650 --> 00:37:44,900
generally the mysql and postgresql i use

00:37:42,859 --> 00:37:47,630
them in logs where someone changes the

00:37:44,900 --> 00:37:49,819
value of something like set price in

00:37:47,630 --> 00:37:52,249
your sales catalog and you're on a

00:37:49,819 --> 00:37:54,440
record where and when it changed in

00:37:52,249 --> 00:37:56,749
another table you can use a trigger so

00:37:54,440 --> 00:37:59,180
that as you change the price it

00:37:56,749 --> 00:38:02,299
automatically logs it into another table

00:37:59,180 --> 00:38:05,059
or I can do other meltem other actions

00:38:02,299 --> 00:38:08,150
on the data it's real handy now in the

00:38:05,059 --> 00:38:11,979
past mysql had one trigger for action

00:38:08,150 --> 00:38:14,569
per table so if you're doing an update

00:38:11,979 --> 00:38:17,140
you've got one action to do on an update

00:38:14,569 --> 00:38:18,979
well now you can stack the triggers I

00:38:17,140 --> 00:38:20,390
think we're gonna see a little bit more

00:38:18,979 --> 00:38:22,430
business logic going into our

00:38:20,390 --> 00:38:24,229
applications which for those you who

00:38:22,430 --> 00:38:26,599
aren't regular dbas it's going to be a

00:38:24,229 --> 00:38:33,920
pain in the butt but it also have some

00:38:26,599 --> 00:38:35,930
benefit hopefully later error logging if

00:38:33,920 --> 00:38:37,819
you've ever turned on slow query log log

00:38:35,930 --> 00:38:39,619
queries without indexes it a couple of

00:38:37,819 --> 00:38:43,609
things you can run yourself onto space

00:38:39,619 --> 00:38:44,539
rather quickly we're configuring we're

00:38:43,609 --> 00:38:47,210
setting things up so that you can

00:38:44,539 --> 00:38:49,579
configure the level of errors arrow

00:38:47,210 --> 00:38:51,229
longing you get you get just errors you

00:38:49,579 --> 00:38:55,969
get errors and warnings you can get the

00:38:51,229 --> 00:38:59,079
entire list soup to nuts you set it

00:38:55,969 --> 00:38:59,079
globally on the fly

00:39:01,760 --> 00:39:10,650
if you want to learn more mysql calm see

00:39:06,870 --> 00:39:12,870
us at the booth if you can occasionally

00:39:10,650 --> 00:39:15,180
read planet Maskull calm that's a blog

00:39:12,870 --> 00:39:18,000
aggregation site that we run we'll keep

00:39:15,180 --> 00:39:19,680
you apprised to what we're doing with

00:39:18,000 --> 00:39:21,150
the other vendors like Percona sky are

00:39:19,680 --> 00:39:25,530
doing what the folks at Facebook are

00:39:21,150 --> 00:39:29,990
doing what's going the world now on the

00:39:25,530 --> 00:39:32,250
bottom edelivery oracle com this is the

00:39:29,990 --> 00:39:35,790
place where you download the enterprise

00:39:32,250 --> 00:39:37,440
version of mysql products free for 30

00:39:35,790 --> 00:39:40,220
days there's no time bomb in there so if

00:39:37,440 --> 00:39:42,330
we run 31 days your systems won't melt

00:39:40,220 --> 00:39:45,930
sales guys might be banging down your

00:39:42,330 --> 00:39:50,130
door but it's nothing that's going to be

00:39:45,930 --> 00:39:52,260
crippling you if you run into something

00:39:50,130 --> 00:39:53,880
where you can't figure it out and you

00:39:52,260 --> 00:39:55,350
want to try out enterprise monitor or

00:39:53,880 --> 00:39:57,900
you want to try out the new backup tools

00:39:55,350 --> 00:40:02,670
that we have there down there try them

00:39:57,900 --> 00:40:05,250
out free for 30 days we do offer

00:40:02,670 --> 00:40:07,440
training we also just report rebooted

00:40:05,250 --> 00:40:09,150
our certification program I amount of

00:40:07,440 --> 00:40:16,020
hers talking earlier the certification

00:40:09,150 --> 00:40:18,240
exam is tough also we have a show coming

00:40:16,020 --> 00:40:21,510
up we're now part of oracle openworld in

00:40:18,240 --> 00:40:25,590
the past were attacked on this will be

00:40:21,510 --> 00:40:29,070
the cheap ticket into open world has

00:40:25,590 --> 00:40:36,840
anyone ever been to open roll here used

00:40:29,070 --> 00:40:38,940
to present okay he will tell you that

00:40:36,840 --> 00:40:40,710
San Francisco with an extra 60 thousand

00:40:38,940 --> 00:40:43,500
bodies for oracle openworld as an

00:40:40,710 --> 00:40:45,150
amazing city the taxi drivers the

00:40:43,500 --> 00:40:48,690
restaurant owners and the waitresses are

00:40:45,150 --> 00:40:49,800
all exhausted happy and rich doing

00:40:48,690 --> 00:40:52,260
trouble of san francisco is very

00:40:49,800 --> 00:40:54,750
expensive you can save 500 bucks off the

00:40:52,260 --> 00:40:57,540
ticket between now and nothing's July

00:40:54,750 --> 00:40:58,920
eighteenth also the MySQL ticket is

00:40:57,540 --> 00:41:01,530
going to be the cheap ticket to get into

00:40:58,920 --> 00:41:03,750
open world if you don't know Larry on

00:41:01,530 --> 00:41:07,650
the next last night rents out an island

00:41:03,750 --> 00:41:09,480
in san francisco bay and brings in a top

00:41:07,650 --> 00:41:13,130
rock act of two or three years ago and

00:41:09,480 --> 00:41:13,130
has a major party

00:41:15,400 --> 00:41:21,020
if you have questions for me I'm David

00:41:18,470 --> 00:41:23,660
Stokes at oracle com at stoker on

00:41:21,020 --> 00:41:27,200
twitter the slides will be out at

00:41:23,660 --> 00:41:28,760
slideshare.net / Dave Stokes please hit

00:41:27,200 --> 00:41:32,180
me at the booth I also have one of our

00:41:28,760 --> 00:41:37,039
sales engineers whose fairly local to

00:41:32,180 --> 00:41:39,280
the area I don't hesitate to ping us on

00:41:37,039 --> 00:41:39,280
anything

00:41:47,140 --> 00:41:54,559
I sequel like you guys have done amazing

00:41:49,670 --> 00:42:10,819
stuff with it yeah we like you're happy

00:41:54,559 --> 00:42:13,579
with it okay yes sir can't give you a

00:42:10,819 --> 00:42:16,430
solid date the engineers are putting all

00:42:13,579 --> 00:42:19,839
the tinker toys together all I've been

00:42:16,430 --> 00:42:23,960
told was it sometime the next year or so

00:42:19,839 --> 00:42:25,190
which the way they treat me the purpose

00:42:23,960 --> 00:42:26,539
they keep me in the dark for good

00:42:25,190 --> 00:42:29,000
reasons because I'm a blabbermouth I

00:42:26,539 --> 00:42:30,260
might fire up my computer after this and

00:42:29,000 --> 00:42:32,599
find out that's already been launched or

00:42:30,260 --> 00:42:33,980
might be next crispy Christmas after

00:42:32,599 --> 00:42:45,529
this one I don't know it's some time

00:42:33,980 --> 00:42:50,990
roughly a year or so did you do the 50

00:42:45,529 --> 00:42:55,400
to 51 upgrade 50 51 was painful and we

00:42:50,990 --> 00:42:58,369
apologize it was real nasty 51 to 55 was

00:42:55,400 --> 00:43:01,069
anti-climatic 55 to 56 is equally

00:42:58,369 --> 00:43:02,329
anti-climatic read the upgrade notes

00:43:01,069 --> 00:43:04,039
because there are a couple of gotchas

00:43:02,329 --> 00:43:08,089
out there and it's always better before

00:43:04,039 --> 00:43:11,960
them you'll probably get about 15 maybe

00:43:08,089 --> 00:43:14,240
20 percent better throughput but it's

00:43:11,960 --> 00:43:22,119
fairly easy just remember to run the

00:43:14,240 --> 00:43:22,119
upgrade script after you get done yeah

00:43:23,250 --> 00:43:28,120
do we need to do we need I know standard

00:43:26,770 --> 00:43:30,820
procedure when you're upgrading

00:43:28,120 --> 00:43:32,770
especially major versions isn't to do a

00:43:30,820 --> 00:43:35,550
binary package but rather to do a

00:43:32,770 --> 00:43:35,550
logical dumb

00:43:38,039 --> 00:43:43,359
read the upgrade notes I've always been

00:43:40,329 --> 00:43:45,970
paranoid I always do dumps and snapshots

00:43:43,359 --> 00:43:49,269
and then do my upgrade on the the data

00:43:45,970 --> 00:43:59,109
is there and since 50 I haven't lost

00:43:49,269 --> 00:44:01,809
anything yeah now with 55 and 56 and

00:43:59,109 --> 00:44:03,970
soon to be 57 there are some changes

00:44:01,809 --> 00:44:08,369
most notably in the MySQL table we're

00:44:03,970 --> 00:44:11,710
adding things like password aging fields

00:44:08,369 --> 00:44:14,230
that's part of the upgrade script but

00:44:11,710 --> 00:44:20,559
but since the days of 50 I haven't lost

00:44:14,230 --> 00:44:22,329
any data during an upgrade yeah that

00:44:20,559 --> 00:44:24,670
goes through and updates everything or

00:44:22,329 --> 00:44:26,650
it should just that I've always learned

00:44:24,670 --> 00:44:30,960
if I'm not paranoid I don't have three

00:44:26,650 --> 00:44:30,960
copies of it and I get bit in the butt

00:44:43,050 --> 00:44:46,040
wondering now

00:44:48,630 --> 00:44:59,079
if we just learn to survive

00:44:52,210 --> 00:44:59,079
the replication law and has our identity

00:44:59,540 --> 00:45:11,030
you might want to revisit turning off

00:45:01,640 --> 00:45:15,140
the query cache the one thing I

00:45:11,030 --> 00:45:19,370
recommend is check your replication GT

00:45:15,140 --> 00:45:21,590
IDs and 56 are a major time saver global

00:45:19,370 --> 00:45:24,380
transaction IDs every transaction has a

00:45:21,590 --> 00:45:26,150
unique ID so if your servers already

00:45:24,380 --> 00:45:27,830
seen that transit your slave already

00:45:26,150 --> 00:45:31,400
seen that transaction ignores it if it

00:45:27,830 --> 00:45:33,050
hasn't seen it gobbles it up also you

00:45:31,400 --> 00:45:35,840
could set it up so they're smartly

00:45:33,050 --> 00:45:38,720
replicates so if you have a row that's

00:45:35,840 --> 00:45:41,660
70 columns long and you're only changing

00:45:38,720 --> 00:45:44,020
one column you don't need to send all 70

00:45:41,660 --> 00:45:44,020
columns

00:45:50,850 --> 00:45:53,390
the DBA

00:46:05,080 --> 00:46:10,970
yeah yup its sequel or are you doing

00:46:08,900 --> 00:46:13,450
statement or a robust wrinkle master

00:46:10,970 --> 00:46:13,450
master

00:46:15,160 --> 00:46:19,570
and of course you've got already read

00:46:16,960 --> 00:46:23,010
and stay off so yeah you don't offset

00:46:19,570 --> 00:46:23,010
the only write one master

00:46:24,880 --> 00:46:27,120
as

00:46:28,090 --> 00:46:36,250
check with Tony out at the table you

00:46:30,610 --> 00:46:38,410
might have some ideas yeah but the query

00:46:36,250 --> 00:46:39,340
cache if you're happy with it and you

00:46:38,410 --> 00:46:40,960
don't on your rid of it you don't have

00:46:39,340 --> 00:46:47,950
to it's just we're recommending free up

00:46:40,960 --> 00:46:50,140
the memory for that yeah and if you

00:46:47,950 --> 00:46:55,030
already have an open support case check

00:46:50,140 --> 00:46:57,210
with Tony he might have some ideas yes

00:46:55,030 --> 00:46:57,210
sir

00:47:04,780 --> 00:47:10,120
yeah federated is something we really

00:47:07,810 --> 00:47:12,970
haven't been actively developing and

00:47:10,120 --> 00:47:15,120
it's kind of messy and it was a kludge

00:47:12,970 --> 00:47:17,230
back when he's originally put together

00:47:15,120 --> 00:47:18,970
some people been playing with federated

00:47:17,230 --> 00:47:23,680
X but we figure a better way to do it

00:47:18,970 --> 00:47:26,460
was multi-master replication or the let

00:47:23,680 --> 00:47:26,460
me go back to the

00:47:34,880 --> 00:47:40,400
well do me a favor and give me your

00:47:38,349 --> 00:47:41,660
contact information is I know some

00:47:40,400 --> 00:47:45,529
engineers that would like to talk to you

00:47:41,660 --> 00:47:46,880
about that well the trouble some of the

00:47:45,529 --> 00:47:48,769
storage room is like federated we only

00:47:46,880 --> 00:47:52,519
run five or six customers who actually

00:47:48,769 --> 00:47:54,410
run it and it's hard to find someone

00:47:52,519 --> 00:47:57,670
saying hey what do you really think what

00:47:54,410 --> 00:47:57,670
are using how are you using it

00:48:12,260 --> 00:48:18,180
that's something that

00:48:14,320 --> 00:48:18,180
our business requires event

00:48:21,090 --> 00:48:24,180
yeah like I said let me have your

00:48:23,070 --> 00:48:25,200
contact information I have some

00:48:24,180 --> 00:48:27,710
engineers I want to put you in contact

00:48:25,200 --> 00:48:27,710
with

00:48:33,850 --> 00:48:41,400
fabric client

00:48:38,020 --> 00:48:41,400
they're changing the client

00:48:42,130 --> 00:48:47,630
the client uses a connector that has the

00:48:45,110 --> 00:48:49,520
smarts in it and those smarts are used

00:48:47,630 --> 00:48:52,850
to find out what shard you need to talk

00:48:49,520 --> 00:48:59,570
to and if that shard goes away or

00:48:52,850 --> 00:49:01,160
there's partier the connector basically

00:48:59,570 --> 00:49:04,130
knows about it and your application

00:49:01,160 --> 00:49:07,640
really doesn't have to change now if

00:49:04,130 --> 00:49:09,380
you're running PHP today with a PEC

00:49:07,640 --> 00:49:11,060
extension you can get some of that for

00:49:09,380 --> 00:49:14,090
load balancing between if you're doing

00:49:11,060 --> 00:49:18,280
split read/write swear it knows java

00:49:14,090 --> 00:49:18,280
java you'll you'll be happy with

00:49:21,640 --> 00:49:36,320
anything else okay and i'm probably

00:49:34,190 --> 00:49:38,230
going to jump straight from 5156

00:49:36,320 --> 00:49:42,810
hopefully

00:49:38,230 --> 00:49:45,460
hopefully or preserve the replication

00:49:42,810 --> 00:49:47,880
again rateable out BTW replication

00:49:45,460 --> 00:49:47,880
servers

00:49:48,549 --> 00:49:53,990
but and I stumbled across as I've been

00:49:51,829 --> 00:49:55,970
googling for how to do this because I've

00:49:53,990 --> 00:49:58,240
got some problems where I unfortunately

00:49:55,970 --> 00:50:00,580
can't do it

00:49:58,240 --> 00:50:04,660
I found something in the utilities

00:50:00,580 --> 00:50:06,100
bicycle utilities for like I didn't get

00:50:04,660 --> 00:50:08,890
a chance to finish reading up on it but

00:50:06,100 --> 00:50:10,630
it was there was a something I run like

00:50:08,890 --> 00:50:13,270
say through workbench or whatever they

00:50:10,630 --> 00:50:16,690
were setting up for provisioning asleep

00:50:13,270 --> 00:50:22,270
yeah you can work on 51 or is it like 56

00:50:16,690 --> 00:50:29,380
57 I know 55 56 57 it works i'm not sure

00:50:22,270 --> 00:50:32,110
about 51 I know between 5-6 boxes I've

00:50:29,380 --> 00:50:35,050
been able to have three VMs that were

00:50:32,110 --> 00:50:37,900
brand new and point them to another box

00:50:35,050 --> 00:50:40,720
in my my home network and say suck

00:50:37,900 --> 00:50:41,980
everything down by the way if the master

00:50:40,720 --> 00:50:43,900
goes down after you get everything

00:50:41,980 --> 00:50:46,450
copied and you set up replication one of

00:50:43,900 --> 00:50:48,730
you self-promote to become a new master

00:50:46,450 --> 00:50:54,610
I know that works very simply but I

00:50:48,730 --> 00:50:58,510
don't know if it works is 51 if you want

00:50:54,610 --> 00:50:59,980
a fast answer the replication for more

00:50:58,510 --> 00:51:05,950
the utilities form and probably better

00:50:59,980 --> 00:51:07,540
on forums don't last you'll calm the the

00:51:05,950 --> 00:51:09,430
folks who monitor our engineers who

00:51:07,540 --> 00:51:12,730
monitor that board will get you a good

00:51:09,430 --> 00:51:17,320
answer on how it works with 51 or

00:51:12,730 --> 00:51:18,940
actually the utilities I know I

00:51:17,320 --> 00:51:20,109
mentioned in passing utilities are a

00:51:18,940 --> 00:51:22,540
bunch of scripts we have written in

00:51:20,109 --> 00:51:24,790
python that do a whole bunch and meet

00:51:22,540 --> 00:51:31,650
wonderful things like copying things

00:51:24,790 --> 00:51:31,650
over for a master to a new slave yeah

00:51:33,240 --> 00:51:38,460
i'm not sure i've never had to worry

00:51:36,250 --> 00:51:38,460
about that

00:51:40,280 --> 00:51:45,530
I'm sorry one other question related to

00:51:42,050 --> 00:51:48,520
it it seems like if I read it correctly

00:51:45,530 --> 00:51:50,420
it sounded like the only way to run out

00:51:48,520 --> 00:51:51,710
now you can run into the standalone

00:51:50,420 --> 00:51:54,130
Python program if you're comfortable

00:51:51,710 --> 00:51:54,130
doing that

00:52:00,100 --> 00:52:04,300
I remember running at standalone Python

00:52:02,680 --> 00:52:05,920
I had to get the right Python connector

00:52:04,300 --> 00:52:08,050
I had an older version of the connector

00:52:05,920 --> 00:52:09,400
that came with luba too so I had to

00:52:08,050 --> 00:52:11,470
download the latest version of that and

00:52:09,400 --> 00:52:17,710
it was very smooth command line work

00:52:11,470 --> 00:52:20,170
from there well one last question for

00:52:17,710 --> 00:52:22,960
you all before we go this is the 02 DBA

00:52:20,170 --> 00:52:24,700
track Jeremy and I set this up a couple

00:52:22,960 --> 00:52:26,680
years ago to try to educate more folks

00:52:24,700 --> 00:52:29,920
who are interested in being dbas or have

00:52:26,680 --> 00:52:31,240
DV a committal what other talks that

00:52:29,920 --> 00:52:33,880
we're not offering this year that you

00:52:31,240 --> 00:52:35,440
need you want more on replication you

00:52:33,880 --> 00:52:38,290
want more on tuning you want more on

00:52:35,440 --> 00:52:40,090
queries you want more on storage engines

00:52:38,290 --> 00:52:47,740
what sort of information aren't you

00:52:40,090 --> 00:52:54,460
getting that you want system tuning and

00:52:47,740 --> 00:52:57,340
scaling part scaling this replication

00:52:54,460 --> 00:53:05,130
okay anything else you want to see in

00:52:57,340 --> 00:53:05,130
2015 GG idea

00:53:07,240 --> 00:53:13,710
is perfect it just yeah yeah yes sir

00:53:17,040 --> 00:53:20,040
yeah

00:53:21,380 --> 00:53:26,900
the one thing you'll like in 57 is you

00:53:25,190 --> 00:53:29,390
can store your password and an encrypted

00:53:26,900 --> 00:53:32,000
file in your home directory and when you

00:53:29,390 --> 00:53:34,430
do the connection you point a flag to

00:53:32,000 --> 00:53:44,350
that file and there's no password going

00:53:34,430 --> 00:53:44,350
down the wire in open text first yeah

00:53:57,360 --> 00:54:02,920
yeah basically sits like a dot ssh file

00:54:01,120 --> 00:54:05,590
in your directory that takes care of all

00:54:02,920 --> 00:54:07,900
that we're also changing some of the

00:54:05,590 --> 00:54:11,530
ways of passing strings as we collect

00:54:07,900 --> 00:54:13,120
passwords for third-party tools I can

00:54:11,530 --> 00:54:17,050
show you where that is in the manual I

00:54:13,120 --> 00:54:25,600
really not well versed in it but we are

00:54:17,050 --> 00:54:29,050
working on it we're trying to make all

00:54:25,600 --> 00:54:31,330
the security stronger just because the

00:54:29,050 --> 00:54:33,460
roles getting more a berisha sand people

00:54:31,330 --> 00:54:36,580
trying to snarl in to grab stuff for

00:54:33,460 --> 00:54:38,730
free so we're we're trying to ramp up

00:54:36,580 --> 00:54:40,690
our security as much as we can without

00:54:38,730 --> 00:54:42,370
hurting people and fortunately their

00:54:40,690 --> 00:54:54,430
folks like the WordPress people we're

00:54:42,370 --> 00:55:00,090
going to be hurting with 57 especially

00:54:54,430 --> 00:55:00,090
establishing actually it sounds like it

00:55:03,420 --> 00:55:18,910
unless you can run a private VPN yeah

00:55:17,290 --> 00:55:26,650
anytime you do any sort of security

00:55:18,910 --> 00:55:28,840
you're taking a hit somewhere a lot of

00:55:26,650 --> 00:55:35,950
folks are just paying the head either

00:55:28,840 --> 00:55:40,420
going with SSL or VPNs or both the

00:55:35,950 --> 00:55:43,440
question is if the data leaks out you

00:55:40,420 --> 00:55:45,040
know what's the value of that so

00:55:43,440 --> 00:55:47,620
unfortunate it's a thing where you have

00:55:45,040 --> 00:55:52,540
to make your choices and none of them

00:55:47,620 --> 00:55:54,910
are that great okay I can see I got the

00:55:52,540 --> 00:55:57,520
one minute Daniel in the back is having

00:55:54,910 --> 00:55:59,170
a talk on handler socket if you want to

00:55:57,520 --> 00:56:01,300
hear about yoshinori matzah nobu a

00:55:59,170 --> 00:56:03,580
little bit more he'll be gladly dude

00:56:01,300 --> 00:56:07,150
that then colin has a talk later on

00:56:03,580 --> 00:56:09,130
Maria and tomorrow I'm talking about

00:56:07,150 --> 00:56:10,840
query query tuning so if you ever

00:56:09,130 --> 00:56:13,540
wondered why explain lies to you I'll

00:56:10,840 --> 00:56:16,080
explain that to you and I also talk on

00:56:13,540 --> 00:56:18,520
big data that is not an Oracle talk but

00:56:16,080 --> 00:56:20,770
the discussion of why I think big data

00:56:18,520 --> 00:56:23,670
is a fraud and if you have any questions

00:56:20,770 --> 00:56:26,080
please stop me hit me at the table and

00:56:23,670 --> 00:56:28,290
see you at the party tonight thank you

00:56:26,080 --> 00:56:28,290
very much

00:57:05,040 --> 00:57:09,310
your customers rely on your website or

00:57:07,780 --> 00:57:11,710
application if it's slower

00:57:09,310 --> 00:57:14,650
non-responsive it infuriates your users

00:57:11,710 --> 00:57:16,450
and costs you money keeping your

00:57:14,650 --> 00:57:19,980
business critical systems humming along

00:57:16,450 --> 00:57:22,290
requires insight into what they're doing

00:57:19,980 --> 00:57:24,240
your system metrics tells stories

00:57:22,290 --> 00:57:26,250
stories that can reveal performance

00:57:24,240 --> 00:57:28,560
bottlenecks resource limitations and

00:57:26,250 --> 00:57:30,150
other problems but how do you keep an

00:57:28,560 --> 00:57:32,790
eye on all of your systems performance

00:57:30,150 --> 00:57:35,820
metrics in real-time and record this

00:57:32,790 --> 00:57:37,590
data for later analysis enter longview

00:57:35,820 --> 00:57:39,600
the new way to see what's really going

00:57:37,590 --> 00:57:41,760
on under the hood the long view

00:57:39,600 --> 00:57:43,830
dashboard lets you visualize the status

00:57:41,760 --> 00:57:46,260
of all your systems providing you with a

00:57:43,830 --> 00:57:49,650
bird's-eye view of your entire fleet you

00:57:46,260 --> 00:57:52,230
can sort by cpu memory swap processes

00:57:49,650 --> 00:57:54,000
load and network usage click a specific

00:57:52,230 --> 00:57:56,400
system to access its individual

00:57:54,000 --> 00:57:58,910
dashboard then click and drag to zoom in

00:57:56,400 --> 00:58:01,290
on chokepoints and get more detail

00:57:58,910 --> 00:58:02,970
comprehensive network data including

00:58:01,290 --> 00:58:05,280
inbound and outbound traffic is

00:58:02,970 --> 00:58:06,869
available on the network tab and disk

00:58:05,280 --> 00:58:08,790
rights and free space on the disk

00:58:06,869 --> 00:58:11,609
stabbed while the process Explorer

00:58:08,790 --> 00:58:14,160
displays usage statistics for individual

00:58:11,609 --> 00:58:16,320
processes the system info tab shows

00:58:14,160 --> 00:58:18,570
listening services active connections

00:58:16,320 --> 00:58:20,700
and available updates adding long view

00:58:18,570 --> 00:58:22,410
to a system is easy just click the

00:58:20,700 --> 00:58:24,540
button copy the one line installation

00:58:22,410 --> 00:58:27,000
command then run the command on your

00:58:24,540 --> 00:58:28,680
linux system to complete the process the

00:58:27,000 --> 00:58:30,869
agent will begin collecting data and

00:58:28,680 --> 00:58:32,710
sending it to longview then the graphs

00:58:30,869 --> 00:58:35,290
start rolling

00:58:32,710 --> 00:58:37,660
use longview to gain visibility into

00:58:35,290 --> 00:58:41,369
your servers so when your website or app

00:58:37,660 --> 00:58:41,369

YouTube URL: https://www.youtube.com/watch?v=GuYjHErD9Ec


