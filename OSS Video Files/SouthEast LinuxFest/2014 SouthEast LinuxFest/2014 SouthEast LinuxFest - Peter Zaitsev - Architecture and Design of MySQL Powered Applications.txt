Title: 2014 SouthEast LinuxFest - Peter Zaitsev - Architecture and Design of MySQL Powered Applications
Publication date: 2015-05-18
Playlist: 2014 SouthEast LinuxFest
Description: 
	2014 SouthEast LinuxFest
Peter Zaitsev
Architecture and Design of MySQL Powered Applications
Captions: 
	00:00:00,000 --> 00:00:05,339
the following presentation was recorded

00:00:02,490 --> 00:00:08,189
the 2014 southeast linux fest in

00:00:05,339 --> 00:00:11,070
charlotte north carolina it is licensed

00:00:08,189 --> 00:00:14,880
under a creative commons license for

00:00:11,070 --> 00:00:18,180
more information visit www selfies linux

00:00:14,880 --> 00:00:19,710
pc org the southeast linux fest would

00:00:18,180 --> 00:00:22,740
like to thank the following diamond

00:00:19,710 --> 00:00:25,529
sponsors in 2014 for helping make these

00:00:22,740 --> 00:00:28,590
videos possible i'll talk to you today

00:00:25,529 --> 00:00:32,850
about their architecture and design of

00:00:28,590 --> 00:00:35,070
my squirrel fortification and Hunter it

00:00:32,850 --> 00:00:40,350
to a guy before me I won't have a single

00:00:35,070 --> 00:00:44,100
my school career in the slides now to

00:00:40,350 --> 00:00:48,000
start a hotel okay I'll try to fix my

00:00:44,100 --> 00:00:50,840
slight clicker yes now it works a few

00:00:48,000 --> 00:00:56,520
words about me if you don't know I am a

00:00:50,840 --> 00:00:58,739
founder and CEO of their pure corner it

00:00:56,520 --> 00:01:02,640
will quantity help people to be success

00:00:58,739 --> 00:01:04,830
with my square we are vendor-neutral so

00:01:02,640 --> 00:01:09,860
that means we help you with all kind of

00:01:04,830 --> 00:01:12,439
different my school variants and stuff

00:01:09,860 --> 00:01:17,549
before that I was a manager of high

00:01:12,439 --> 00:01:20,240
performance group in the MySQL before it

00:01:17,549 --> 00:01:23,340
was owned by son Oracle so in that

00:01:20,240 --> 00:01:26,189
original relatively small company and

00:01:23,340 --> 00:01:29,100
before that or throughout that time I

00:01:26,189 --> 00:01:31,680
was acting as consultant DBA software

00:01:29,100 --> 00:01:35,670
developer sysadmin so I have quite

00:01:31,680 --> 00:01:38,159
diverse technical background and also

00:01:35,670 --> 00:01:40,950
some of you may know me either writing

00:01:38,159 --> 00:01:43,740
in my school formats blog or looking at

00:01:40,950 --> 00:01:48,390
this high performance mysql book where i

00:01:43,740 --> 00:01:51,060
am one of the authors now at the corner

00:01:48,390 --> 00:01:53,159
what do we do out here well if you think

00:01:51,060 --> 00:01:55,829
about that we are the vendor neutral

00:01:53,159 --> 00:01:59,729
mysql company and by that i mean we do

00:01:55,829 --> 00:02:04,979
really support oh all the vendors out

00:01:59,729 --> 00:02:07,079
for mysql the perkiness term reeb amazon

00:02:04,979 --> 00:02:08,670
RDS and bunch of other cloud vendors

00:02:07,079 --> 00:02:11,310
which are all slightly different my

00:02:08,670 --> 00:02:12,800
school variants and i just called my

00:02:11,310 --> 00:02:15,020
squirrel for simple

00:02:12,800 --> 00:02:16,550
city not to go into this very long

00:02:15,020 --> 00:02:19,880
description of all the variants and

00:02:16,550 --> 00:02:23,890
names we have now we write a lot of open

00:02:19,880 --> 00:02:27,340
source software at the corner for MySQL

00:02:23,890 --> 00:02:31,760
ecosystem being that the corner server

00:02:27,340 --> 00:02:33,680
percona extra backup which is a hot open

00:02:31,760 --> 00:02:35,840
source code backup solution for mysql

00:02:33,680 --> 00:02:38,390
your corner toolkit which is a set of

00:02:35,840 --> 00:02:41,390
tools which a lot of mine squirrel dbas

00:02:38,390 --> 00:02:43,100
are used in two more efficient and the

00:02:41,390 --> 00:02:46,400
pure context will be cluster which is

00:02:43,100 --> 00:02:49,250
our higher ability solution based on our

00:02:46,400 --> 00:02:53,120
/ connoisseur and gallery technology and

00:02:49,250 --> 00:02:55,670
also well as a company we have to make

00:02:53,120 --> 00:02:58,400
money as strange it sounds on in the

00:02:55,670 --> 00:03:01,310
open source space right and we do that

00:02:58,400 --> 00:03:05,200
through support consultant training we

00:03:01,310 --> 00:03:07,700
have also remote deviate services and

00:03:05,200 --> 00:03:10,880
just a couple of days ago we launched

00:03:07,700 --> 00:03:13,430
their managed backup swim i square so if

00:03:10,880 --> 00:03:15,650
you are hate setting up back up to

00:03:13,430 --> 00:03:17,900
databases and doing some complicated

00:03:15,650 --> 00:03:23,570
restores you have to have have to you

00:03:17,900 --> 00:03:26,989
can sell a problem to us now okay now

00:03:23,570 --> 00:03:31,010
evolved the presentation what is it all

00:03:26,989 --> 00:03:33,260
about it is about their architectures

00:03:31,010 --> 00:03:36,800
and how can you build successful

00:03:33,260 --> 00:03:38,720
application based on mysql and i'm going

00:03:36,800 --> 00:03:43,520
to talk about essentially few of things

00:03:38,720 --> 00:03:47,090
here what is in your toolbox as a mysql

00:03:43,520 --> 00:03:50,180
and the architect what kind of questions

00:03:47,090 --> 00:03:51,500
you should resolve as a team if you want

00:03:50,180 --> 00:03:53,660
to have successful my school

00:03:51,500 --> 00:03:56,540
architecture and you'll also talk about

00:03:53,660 --> 00:04:00,410
the mysql common architecture patterns

00:03:56,540 --> 00:04:03,350
which you can use to build those

00:04:00,410 --> 00:04:07,130
successful applications now before that

00:04:03,350 --> 00:04:08,660
I wanted to show you this picture which

00:04:07,130 --> 00:04:11,060
is something I go through one of the

00:04:08,660 --> 00:04:14,390
presentations livejournal did about 10

00:04:11,060 --> 00:04:16,519
years ago right so this is picture from

00:04:14,390 --> 00:04:18,620
presentation ten years ago quite a lot

00:04:16,519 --> 00:04:22,070
of time right but what is very

00:04:18,620 --> 00:04:25,320
interesting about this picture is what

00:04:22,070 --> 00:04:27,630
really we have a lot of components out

00:04:25,320 --> 00:04:30,830
there which we would also see in the

00:04:27,630 --> 00:04:34,710
MySQL applications today you don't think

00:04:30,830 --> 00:04:38,850
no life scale apps like Facebook Twitter

00:04:34,710 --> 00:04:40,230
or a lot of a little bit smaller scale

00:04:38,850 --> 00:04:43,650
but still light applications which use

00:04:40,230 --> 00:04:46,590
MySQL what do we see here well load

00:04:43,650 --> 00:04:48,810
balancers right we have a torturer we

00:04:46,590 --> 00:04:53,960
separate the front and in the back end

00:04:48,810 --> 00:04:58,290
web servers right we are using memcache

00:04:53,960 --> 00:05:02,760
for unification with my school we still

00:04:58,290 --> 00:05:06,320
do this today we have some global

00:05:02,760 --> 00:05:08,700
database we have a shared data and and

00:05:06,320 --> 00:05:10,680
charging through what they call that

00:05:08,700 --> 00:05:13,050
time a database clusters right here

00:05:10,680 --> 00:05:15,030
would assign different users to

00:05:13,050 --> 00:05:17,190
different database clusters we call a

00:05:15,030 --> 00:05:19,860
charger right and they would use the

00:05:17,190 --> 00:05:23,520
read/write split a notification right so

00:05:19,860 --> 00:05:25,410
we can send some of our reach to the

00:05:23,520 --> 00:05:29,190
slaves while all rights have to go to a

00:05:25,410 --> 00:05:32,820
master right that is all they had ten

00:05:29,190 --> 00:05:36,450
years ago now what I want to show you

00:05:32,820 --> 00:05:39,080
right oh why I am using this 10 years

00:05:36,450 --> 00:05:42,180
old example well I think this is a very

00:05:39,080 --> 00:05:45,270
interesting because what it shows is

00:05:42,180 --> 00:05:48,030
that the mysql is quite mature right

00:05:45,270 --> 00:05:51,420
mature is boring of course but also

00:05:48,030 --> 00:05:55,260
mature as something which provides us an

00:05:51,420 --> 00:05:58,470
ability to get a very safe path building

00:05:55,260 --> 00:06:00,210
a successful applications my school

00:05:58,470 --> 00:06:02,520
loans were heroes anymore right a lot of

00:06:00,210 --> 00:06:05,450
MySQL problems or most of them have been

00:06:02,520 --> 00:06:07,290
already resolved right already have been

00:06:05,450 --> 00:06:09,210
applications built dealing with

00:06:07,290 --> 00:06:11,960
petabytes of data in my school and

00:06:09,210 --> 00:06:15,030
serving more than billion of users right

00:06:11,960 --> 00:06:16,680
but what that also means what all those

00:06:15,030 --> 00:06:18,600
problems are resolved and if you just

00:06:16,680 --> 00:06:20,550
needed database which you know you can

00:06:18,600 --> 00:06:23,790
trust and you can build your application

00:06:20,550 --> 00:06:25,740
on my school is a very good choice most

00:06:23,790 --> 00:06:29,250
of problems in high school already have

00:06:25,740 --> 00:06:31,380
proven solutions so you can essentially

00:06:29,250 --> 00:06:34,569
just follow somebody else's food step

00:06:31,380 --> 00:06:36,759
and you know that will

00:06:34,569 --> 00:06:41,139
give you workable this out which worked

00:06:36,759 --> 00:06:43,569
for for many years and there is no you

00:06:41,139 --> 00:06:46,599
know hiding surprises which you'll bite

00:06:43,569 --> 00:06:51,159
you in the ass when you grow from 10

00:06:46,599 --> 00:06:54,069
users you know to 10,000 users but of

00:06:51,159 --> 00:06:57,429
course 10 years is a lot of time right

00:06:54,069 --> 00:07:00,520
and a lot of things also have changed so

00:06:57,429 --> 00:07:04,360
what do you see I have changed they're

00:07:00,520 --> 00:07:06,309
very powerful hardware right is an

00:07:04,360 --> 00:07:09,819
important change we are now having lots

00:07:06,309 --> 00:07:11,589
of memory if you go 10 years back to

00:07:09,819 --> 00:07:13,719
those livejournal presentation they also

00:07:11,589 --> 00:07:18,430
will talk about how powerful servers

00:07:13,719 --> 00:07:20,770
lots of memory we have which is what 16

00:07:18,430 --> 00:07:23,680
gigabyte those days right well now our

00:07:20,770 --> 00:07:25,539
laptops house here 16 gigabytes and we

00:07:23,680 --> 00:07:28,089
can get maybe half a terabyte of memory

00:07:25,539 --> 00:07:32,439
in relatively affordable commodity

00:07:28,089 --> 00:07:35,679
servers right even on Amazon RDS right

00:07:32,439 --> 00:07:37,689
we can get more than 200 gigs of memory

00:07:35,679 --> 00:07:39,399
in the instance and those in a

00:07:37,689 --> 00:07:41,559
virtualized environment we never kind of

00:07:39,399 --> 00:07:45,639
pushing memory to quiet two boundaries

00:07:41,559 --> 00:07:48,430
they also have a very far storage if you

00:07:45,639 --> 00:07:51,249
look ten years back in a mysql space you

00:07:48,430 --> 00:07:53,469
would typically get ready few hard

00:07:51,249 --> 00:07:56,619
drives may be going up to 10 that's what

00:07:53,469 --> 00:08:00,519
give us maybe thousand iOS a second now

00:07:56,619 --> 00:08:04,269
we can get flash with a single pci

00:08:00,519 --> 00:08:06,610
express card which can get 100,000 iOS

00:08:04,269 --> 00:08:08,829
well frankly we can stuff more of them

00:08:06,610 --> 00:08:11,249
in this box if you want to and get even

00:08:08,829 --> 00:08:15,309
more iOS but we don't really need that

00:08:11,249 --> 00:08:18,099
because mysql has now a hard time

00:08:15,309 --> 00:08:21,849
driving as much i opes as those cars can

00:08:18,099 --> 00:08:26,399
provide write latency also has improved

00:08:21,849 --> 00:08:30,159
about two orders of magnitude which is

00:08:26,399 --> 00:08:32,889
it reaches which is wonderful which is a

00:08:30,159 --> 00:08:36,099
wonderful as specifically for my

00:08:32,889 --> 00:08:38,979
squirrel because in a lot of my SQL

00:08:36,099 --> 00:08:41,439
queries are resolved serially right so

00:08:38,979 --> 00:08:44,709
if your query has to do a thousand I ops

00:08:41,439 --> 00:08:47,800
often it will be one after an hour so in

00:08:44,709 --> 00:08:50,350
this case it is the latency of i/o which

00:08:47,800 --> 00:08:52,899
matters right so if I'm doing 1000 of

00:08:50,350 --> 00:08:54,850
iOS one after another with 10

00:08:52,899 --> 00:08:57,399
millisecond latency it will tell you

00:08:54,850 --> 00:09:00,640
what take what 10 seconds right if it's

00:08:57,399 --> 00:09:03,339
zero point one millisecond latency again

00:09:00,640 --> 00:09:07,000
thousand iOS one after one after another

00:09:03,339 --> 00:09:11,019
it will take 0.1 seconds and it will

00:09:07,000 --> 00:09:13,600
change from painful wait to essentially

00:09:11,019 --> 00:09:16,450
instant right from user observer we also

00:09:13,600 --> 00:09:19,209
get much more cores cpu cores letters

00:09:16,450 --> 00:09:21,459
those days right again previously it was

00:09:19,209 --> 00:09:25,860
four cores which probably would be your

00:09:21,459 --> 00:09:30,790
like four sockets with a pretty big

00:09:25,860 --> 00:09:35,170
monster server those days we get 32 more

00:09:30,790 --> 00:09:38,890
course in our commodity to socket sorted

00:09:35,170 --> 00:09:41,459
boxes what also we got which i think is

00:09:38,890 --> 00:09:44,560
very wonderful is what software became

00:09:41,459 --> 00:09:47,140
more reasonable right software is never

00:09:44,560 --> 00:09:49,510
great right so true always have a way to

00:09:47,140 --> 00:09:52,660
improve right and all this catching up

00:09:49,510 --> 00:09:54,670
with the hardware each time the new

00:09:52,660 --> 00:09:56,709
hardware is released there is something

00:09:54,670 --> 00:09:59,890
we can optimize our software to make it

00:09:56,709 --> 00:10:02,500
better but I would say the software

00:09:59,890 --> 00:10:05,230
became pretty good at least an hour

00:10:02,500 --> 00:10:09,190
ecosystem in terms of my square few

00:10:05,230 --> 00:10:11,320
years ago we had to really our bottle oh

00:10:09,190 --> 00:10:13,829
my gosh we now have more than four cores

00:10:11,320 --> 00:10:16,329
mysql doesn't scale what kind of very

00:10:13,829 --> 00:10:18,040
advanced settings you have to do or

00:10:16,329 --> 00:10:20,350
maybe you have to patch resource code

00:10:18,040 --> 00:10:23,620
well frankly that is how liver

00:10:20,350 --> 00:10:27,070
connoisseur was born because mysql would

00:10:23,620 --> 00:10:30,040
scale so horribly within multi-core CPUs

00:10:27,070 --> 00:10:32,230
we had to go and fetch your coat for

00:10:30,040 --> 00:10:36,250
customers you couldn't just help them

00:10:32,230 --> 00:10:39,449
with the configuration settings linux

00:10:36,250 --> 00:10:43,649
carry on file systems those days are

00:10:39,449 --> 00:10:46,329
they now pretty good variants exist for

00:10:43,649 --> 00:10:49,269
everything to give it to allow the taken

00:10:46,329 --> 00:10:52,930
advantage of its powerful hardware now

00:10:49,269 --> 00:10:56,260
another destruction or important change

00:10:52,930 --> 00:10:58,230
is a cloud anybody he runs my school in

00:10:56,260 --> 00:11:05,790
the cloud

00:10:58,230 --> 00:11:08,820
anything else in the cloud no okay but

00:11:05,790 --> 00:11:13,140
what does cloud bring to a MySQL

00:11:08,820 --> 00:11:15,300
environments an ecosystem well what

00:11:13,140 --> 00:11:17,880
properties does it have the first

00:11:15,300 --> 00:11:21,000
important one is their dynamic

00:11:17,880 --> 00:11:23,160
scalability which is a very important

00:11:21,000 --> 00:11:25,830
tool right previously for many

00:11:23,160 --> 00:11:28,670
applications I would have to work to

00:11:25,830 --> 00:11:31,410
provide the scalability planning with

00:11:28,670 --> 00:11:33,060
maybe three months lead time because

00:11:31,410 --> 00:11:35,640
your computer hey you know what we need

00:11:33,060 --> 00:11:37,890
to know we have at least 3x three months

00:11:35,640 --> 00:11:39,840
lead time because that's how long it

00:11:37,890 --> 00:11:41,280
will take us to order the new service

00:11:39,840 --> 00:11:43,500
through purchasing department get them

00:11:41,280 --> 00:11:46,920
cheap track and so on and so forth now

00:11:43,500 --> 00:11:50,220
we can scale very quickly right need

00:11:46,920 --> 00:11:52,230
more service okay five minutes done but

00:11:50,220 --> 00:11:54,390
also allows us to use what i will call

00:11:52,230 --> 00:11:57,870
throwaways serum in targeting again

00:11:54,390 --> 00:12:02,430
wonderful anybody of you enjoys

00:11:57,870 --> 00:12:05,100
troubleshooting hardware right then it's

00:12:02,430 --> 00:12:06,620
sort of words we're close or works ten

00:12:05,100 --> 00:12:09,750
times slower than it should write or

00:12:06,620 --> 00:12:13,790
have some weird hardware problems every

00:12:09,750 --> 00:12:15,900
couple of days or whatever it is and

00:12:13,790 --> 00:12:18,570
support provider's are usually

00:12:15,900 --> 00:12:22,140
absolutely helpless clueless right or

00:12:18,570 --> 00:12:24,510
whatever less you want to use they can't

00:12:22,140 --> 00:12:27,020
really help you well at least that was

00:12:24,510 --> 00:12:31,890
my experience right to dealing with

00:12:27,020 --> 00:12:35,370
Hardware in many cases now then I

00:12:31,890 --> 00:12:37,650
running in the cloud we don't like how

00:12:35,370 --> 00:12:42,810
we given instance performs throw it away

00:12:37,650 --> 00:12:45,660
and get an hour one this also means what

00:12:42,810 --> 00:12:49,440
we can be very agile both in our

00:12:45,660 --> 00:12:56,700
developments and in our operations as

00:12:49,440 --> 00:13:01,920
well as have less involved operation

00:12:56,700 --> 00:13:05,610
process now optum a shin is an Arabic

00:13:01,920 --> 00:13:07,800
change cloud is in many case used to

00:13:05,610 --> 00:13:10,110
give automation but I like to see those

00:13:07,800 --> 00:13:11,580
other separate things because nothing

00:13:10,110 --> 00:13:15,240
prevents you too

00:13:11,580 --> 00:13:18,750
after made things in a virtualized

00:13:15,240 --> 00:13:20,940
environment right or or even if physical

00:13:18,750 --> 00:13:23,100
hardware and if you look at a lot of the

00:13:20,940 --> 00:13:26,220
successful applications those days they

00:13:23,100 --> 00:13:28,980
would use optum a shin on essentially

00:13:26,220 --> 00:13:32,220
all their order layers right on the

00:13:28,980 --> 00:13:36,300
stage of development testing deployment

00:13:32,220 --> 00:13:38,930
and the and the operation which is I

00:13:36,300 --> 00:13:41,100
think is there now is a wonderful

00:13:38,930 --> 00:13:43,500
something else I didn't tell about the

00:13:41,100 --> 00:13:47,130
cloud what i thought i should mention

00:13:43,500 --> 00:13:49,380
about how those throw a servant allottee

00:13:47,130 --> 00:13:51,770
and what i say more agile operations

00:13:49,380 --> 00:13:54,510
come together what is so wonderful

00:13:51,770 --> 00:13:58,650
specifically in mysql one of the big

00:13:54,510 --> 00:14:01,320
problems for us right or tasks is gin

00:13:58,650 --> 00:14:03,750
with upgrades especially major version

00:14:01,320 --> 00:14:06,510
upgrades right which can be disruptive

00:14:03,750 --> 00:14:08,580
so what you normally like to do are the

00:14:06,510 --> 00:14:10,650
most safe way to do or do that will

00:14:08,580 --> 00:14:13,620
behave can be sort of build on the

00:14:10,650 --> 00:14:15,990
environment separately right and the

00:14:13,620 --> 00:14:18,900
test our application on new micro

00:14:15,990 --> 00:14:21,870
version right then move it and throw

00:14:18,900 --> 00:14:24,510
your old one now the challenge in a

00:14:21,870 --> 00:14:28,140
physical server environment is money

00:14:24,510 --> 00:14:31,050
right so you want us to develop out of

00:14:28,140 --> 00:14:32,670
service right for database and then what

00:14:31,050 --> 00:14:36,000
we're going to do with them that is very

00:14:32,670 --> 00:14:39,630
expensive to do that right in the cloud

00:14:36,000 --> 00:14:42,360
it becomes very inexpensive because if I

00:14:39,630 --> 00:14:44,790
just need double of amount of service

00:14:42,360 --> 00:14:47,310
for a week or two right it doesn't

00:14:44,790 --> 00:14:50,160
really matter right it just add a few

00:14:47,310 --> 00:14:53,670
percent of a cost to my total trading

00:14:50,160 --> 00:14:57,060
costs in the year and that allows us to

00:14:53,670 --> 00:15:00,450
do those operational tasks much easier

00:14:57,060 --> 00:15:04,140
and much safer while keeping our costs

00:15:00,450 --> 00:15:07,830
down then you're doing it before another

00:15:04,140 --> 00:15:11,240
important change as I see is then you

00:15:07,830 --> 00:15:14,400
are languages and flame war frameworks

00:15:11,240 --> 00:15:17,580
the big the war of those days again

00:15:14,400 --> 00:15:21,770
being more agile how can we get some

00:15:17,580 --> 00:15:25,080
semi function application or quickly and

00:15:21,770 --> 00:15:26,970
in this case on the good interest

00:15:25,080 --> 00:15:29,520
experience for me was unrelated to my

00:15:26,970 --> 00:15:31,590
school is going to start off weekend did

00:15:29,520 --> 00:15:34,830
you get any one went to a new startup

00:15:31,590 --> 00:15:36,660
weekends well what it is it's

00:15:34,830 --> 00:15:39,590
essentially weekend which starts from

00:15:36,660 --> 00:15:47,370
Friday afternoon right hand goes to the

00:15:39,590 --> 00:15:49,230
end of them so sunday and you have some

00:15:47,370 --> 00:15:51,750
idea which is typically involved some

00:15:49,230 --> 00:15:54,780
software V and you can build the

00:15:51,750 --> 00:15:56,760
prototype going from idea to some

00:15:54,780 --> 00:15:59,670
prototype in 48 hours and I was

00:15:56,760 --> 00:16:05,130
surprised how much those days we can

00:15:59,670 --> 00:16:07,680
really get done in 48 hours we can have

00:16:05,130 --> 00:16:09,500
a very small team produce three amazing

00:16:07,680 --> 00:16:13,860
applications in this very short time

00:16:09,500 --> 00:16:17,340
well that like all are a dry languages

00:16:13,860 --> 00:16:18,900
right now some of that stuff comes from

00:16:17,340 --> 00:16:21,360
what we now have to write a lot of

00:16:18,900 --> 00:16:24,360
system code if you have any developers

00:16:21,360 --> 00:16:28,800
here who is anybody who was doing my

00:16:24,360 --> 00:16:31,350
school development like 10 years ago so

00:16:28,800 --> 00:16:33,090
when I did that I remember everybody

00:16:31,350 --> 00:16:35,340
would start with writing the database

00:16:33,090 --> 00:16:37,470
abstraction layer in PHP right for

00:16:35,340 --> 00:16:39,120
example because you don't want to be

00:16:37,470 --> 00:16:41,520
didn't leave directive at my school

00:16:39,120 --> 00:16:43,860
connect my scope ready right you want

00:16:41,520 --> 00:16:46,080
some debugging login blah blah blah so

00:16:43,860 --> 00:16:48,450
on and so forth right everybody would

00:16:46,080 --> 00:16:50,820
write a lot of that system code right

00:16:48,450 --> 00:16:53,730
whether that's my squirrel or doing any

00:16:50,820 --> 00:16:57,870
avid stuff and this took a lot of time

00:16:53,730 --> 00:17:00,720
right now we are not doing that in many

00:16:57,870 --> 00:17:05,339
cases we'll just use a framework being

00:17:00,720 --> 00:17:07,470
that Ruby on Rails right or in PHP or

00:17:05,339 --> 00:17:10,770
things like symphony right choose what

00:17:07,470 --> 00:17:12,870
you like frameworks which essentially

00:17:10,770 --> 00:17:15,780
allow us to write more application

00:17:12,870 --> 00:17:18,350
facing code and less of that support or

00:17:15,780 --> 00:17:21,810
system code we also have a lot more

00:17:18,350 --> 00:17:24,560
client-side development right the

00:17:21,810 --> 00:17:26,699
applications have moved with a lot of

00:17:24,560 --> 00:17:28,440
implementation is done the massive

00:17:26,699 --> 00:17:30,750
javascript application which essentially

00:17:28,440 --> 00:17:33,120
just goes every so often to the backend

00:17:30,750 --> 00:17:37,230
and so to a database to fish some data

00:17:33,120 --> 00:17:38,580
teams right instead of a massive pages

00:17:37,230 --> 00:17:42,210
which are generated innocent

00:17:38,580 --> 00:17:46,169
on the back end and we also have a lot

00:17:42,210 --> 00:17:48,630
of less database dependence through ORM

00:17:46,169 --> 00:17:51,090
and other tools right which i think is a

00:17:48,630 --> 00:17:53,250
very interesting because in many

00:17:51,090 --> 00:17:56,460
applications it allows us to easily use

00:17:53,250 --> 00:17:59,870
even MySQL or some other tools but that

00:17:56,460 --> 00:18:02,610
also is a big challenge because a lot of

00:17:59,870 --> 00:18:05,330
modern-day application software

00:18:02,610 --> 00:18:08,100
engineers have absolutely no clue

00:18:05,330 --> 00:18:10,529
databases I am calling this function I

00:18:08,100 --> 00:18:13,139
don't know what it does I don't want to

00:18:10,529 --> 00:18:15,480
know what it does I just want to work it

00:18:13,139 --> 00:18:17,370
fast and scale well right and when you

00:18:15,480 --> 00:18:20,070
go underneath and say oh my gosh right

00:18:17,370 --> 00:18:22,169
as a monster join which scans 10 million

00:18:20,070 --> 00:18:28,500
road tables and how do you even can

00:18:22,169 --> 00:18:30,860
think about that working well what does

00:18:28,500 --> 00:18:34,440
it have a change we see well it is

00:18:30,860 --> 00:18:37,740
multiple clients right again in the past

00:18:34,440 --> 00:18:40,230
I would work with applications which are

00:18:37,740 --> 00:18:42,690
essentially one client our desktop web

00:18:40,230 --> 00:18:45,750
browser right now we also have to deal

00:18:42,690 --> 00:18:47,940
with mobile web browsers or even the

00:18:45,750 --> 00:18:50,279
different size of the screens right our

00:18:47,940 --> 00:18:52,889
our tablets which is kind of small and

00:18:50,279 --> 00:18:56,220
desktops but not quite as small as as a

00:18:52,889 --> 00:18:59,610
phones we also have to often provide

00:18:56,220 --> 00:19:03,470
interfaces and apps right some native

00:18:59,610 --> 00:19:07,470
apps wherever iphone android tablets

00:19:03,470 --> 00:19:10,769
instead of web apps and also provide the

00:19:07,470 --> 00:19:12,240
integration from api right hello if you

00:19:10,769 --> 00:19:15,149
think about a lot of those modern

00:19:12,240 --> 00:19:17,460
applications everybody has an api right

00:19:15,149 --> 00:19:20,309
so you can get the data in or control

00:19:17,460 --> 00:19:23,490
the applications facebook has api you

00:19:20,309 --> 00:19:26,840
know linkedin twitter everybody has that

00:19:23,490 --> 00:19:29,279
and that all changes how your

00:19:26,840 --> 00:19:32,340
architecture have to be provided because

00:19:29,279 --> 00:19:36,409
there are multiple of those users of

00:19:32,340 --> 00:19:40,139
your data which you have to accommodate

00:19:36,409 --> 00:19:44,340
now when it comes to mysql we can have

00:19:40,139 --> 00:19:50,590
also a choice of multiple my squirrel

00:19:44,340 --> 00:19:54,649
vendors and i listed some of a more

00:19:50,590 --> 00:19:58,309
common ones out there but really if you

00:19:54,649 --> 00:20:02,749
look at those amazon and at the s and

00:19:58,309 --> 00:20:05,359
google SQL you'll find much more really

00:20:02,749 --> 00:20:08,239
out there a lot of cloud providers

00:20:05,359 --> 00:20:10,759
provided database as a service based on

00:20:08,239 --> 00:20:12,529
my skills those days and they are kind

00:20:10,759 --> 00:20:14,840
of slightly different because everybody

00:20:12,529 --> 00:20:17,269
wants you to provide something more

00:20:14,840 --> 00:20:20,179
right so you move your data to their

00:20:17,269 --> 00:20:22,009
service and then you can go anybody else

00:20:20,179 --> 00:20:28,609
because they're just shoving you fill up

00:20:22,009 --> 00:20:32,090
with love we also see in a lot of a

00:20:28,609 --> 00:20:34,970
motor applications what we are not only

00:20:32,090 --> 00:20:39,889
using my squirrel for our data needs

00:20:34,970 --> 00:20:42,679
what we are using MySQL as part of it

00:20:39,889 --> 00:20:48,230
acknowledges very operate with with a

00:20:42,679 --> 00:20:50,359
data mysql is pretty good transactional

00:20:48,230 --> 00:20:52,730
data store for cannabis oil TP

00:20:50,359 --> 00:20:56,389
environment try to think like e-commerce

00:20:52,730 --> 00:20:58,820
website or whatever it is but there are

00:20:56,389 --> 00:21:01,399
a lot of other solutions which can be

00:20:58,820 --> 00:21:03,649
better at something else if you lose

00:21:01,399 --> 00:21:07,159
you're using for Cashin data right which

00:21:03,649 --> 00:21:09,559
we can use memcache or Reggie's if they

00:21:07,159 --> 00:21:13,309
use in something for queuing maybe

00:21:09,559 --> 00:21:16,070
that's going to be rabbitmq zeromq Kafka

00:21:13,309 --> 00:21:19,909
right and risk whole of technologies out

00:21:16,070 --> 00:21:21,739
there then for certain kinds of data we

00:21:19,909 --> 00:21:25,639
don't really need the relational stuff

00:21:21,739 --> 00:21:28,399
but we may need our properties that's

00:21:25,639 --> 00:21:30,769
where cassandra or one gonna be

00:21:28,399 --> 00:21:33,619
commonplace right if you want to analyze

00:21:30,769 --> 00:21:36,470
the massive amounts of data in parallel

00:21:33,619 --> 00:21:38,539
my school is not really doing quite well

00:21:36,470 --> 00:21:41,539
here right especially out of it box

00:21:38,539 --> 00:21:43,690
mysql will run every query kind of

00:21:41,539 --> 00:21:46,820
serially using only single thread

00:21:43,690 --> 00:21:49,999
alright not even speaking about multiple

00:21:46,820 --> 00:21:51,769
boxes which doesn't scale very well so

00:21:49,999 --> 00:21:55,249
there is a lot of technologies which you

00:21:51,769 --> 00:21:57,830
can use to supplement right or use

00:21:55,249 --> 00:22:01,820
alongside if my square where you like to

00:21:57,830 --> 00:22:03,850
look at that too to get the most

00:22:01,820 --> 00:22:08,420
efficient architecture

00:22:03,850 --> 00:22:10,700
now what also has changed and I think

00:22:08,420 --> 00:22:13,790
which is important is the high

00:22:10,700 --> 00:22:17,030
availability options for MySQL I believe

00:22:13,790 --> 00:22:20,380
they're high variability is a very key

00:22:17,030 --> 00:22:22,580
topic because a lot of applications

00:22:20,380 --> 00:22:26,030
right a lot of the techniques you can

00:22:22,580 --> 00:22:27,770
take hey you know Cashin or chardon they

00:22:26,030 --> 00:22:31,070
only apply to pretty large scale

00:22:27,770 --> 00:22:35,330
application but even small applications

00:22:31,070 --> 00:22:38,780
often need to stay stay up right that is

00:22:35,330 --> 00:22:42,170
how I have ability has been always

00:22:38,780 --> 00:22:44,510
important your enterprise like great

00:22:42,170 --> 00:22:47,630
application even if it doesn't cause a

00:22:44,510 --> 00:22:50,090
lot of Lord still open has to have a

00:22:47,630 --> 00:22:52,160
heavy her ability solution as a part of

00:22:50,090 --> 00:22:54,830
business requirements so what do we have

00:22:52,160 --> 00:23:00,800
those days well first we have a mature

00:22:54,830 --> 00:23:06,320
in mysql replication again it's has

00:23:00,800 --> 00:23:11,300
became much much better over last 10

00:23:06,320 --> 00:23:14,000
years in terms of manageability and in

00:23:11,300 --> 00:23:16,250
terms of caution dayton consistencies

00:23:14,000 --> 00:23:18,980
and stuff like that now we have a set of

00:23:16,250 --> 00:23:21,770
their gallery base technology such as

00:23:18,980 --> 00:23:24,590
per corner or exterior cluster we shall

00:23:21,770 --> 00:23:26,750
allow you to use energy be tables right

00:23:24,590 --> 00:23:30,020
something you probably most familiar

00:23:26,750 --> 00:23:34,390
with if you use mysql those days but at

00:23:30,020 --> 00:23:36,440
the same have this enterprise level or

00:23:34,390 --> 00:23:38,300
cluster where you have multiple nodes

00:23:36,440 --> 00:23:41,900
which you can write to any node read

00:23:38,300 --> 00:23:44,770
from any node and not deal with you with

00:23:41,900 --> 00:23:48,650
this replication scenario where you

00:23:44,770 --> 00:23:51,380
write to master and then it makes it

00:23:48,650 --> 00:23:53,440
down to the slave well sometime

00:23:51,380 --> 00:23:56,900
hopefully if not too much of delay right

00:23:53,440 --> 00:24:01,820
we're a mysql cluster anybody uses my

00:23:56,900 --> 00:24:05,090
school platter here well the mysql

00:24:01,820 --> 00:24:06,830
cluster is not very commonly used to be

00:24:05,090 --> 00:24:07,720
front right and this is technology which

00:24:06,830 --> 00:24:09,850
had

00:24:07,720 --> 00:24:13,270
a bad reputation developed for a number

00:24:09,850 --> 00:24:15,850
of years in terms of hard to manage and

00:24:13,270 --> 00:24:18,309
in terms of a bad performance for

00:24:15,850 --> 00:24:21,789
complicated queries right so it was kind

00:24:18,309 --> 00:24:25,390
of pushed down as useless special

00:24:21,789 --> 00:24:28,240
solution for telecom kind of and other

00:24:25,390 --> 00:24:29,830
special use cases but I would say over

00:24:28,240 --> 00:24:33,909
last year's they have been doing a lot

00:24:29,830 --> 00:24:40,750
of work in a cluster and it became much

00:24:33,909 --> 00:24:43,360
much better in handen with complicated

00:24:40,750 --> 00:24:47,890
queries and also because we can get

00:24:43,360 --> 00:24:49,539
there a lot of memory of those days the

00:24:47,890 --> 00:24:53,039
fact you have to have most of your

00:24:49,539 --> 00:24:55,390
database in memory to run mysql cluster

00:24:53,039 --> 00:24:59,320
successfully is not a big limitation

00:24:55,390 --> 00:25:02,470
anymore we also have a proprietary cloud

00:24:59,320 --> 00:25:04,929
a che and what I mean by that is if you

00:25:02,470 --> 00:25:06,880
go to Amazon or go to other providers

00:25:04,929 --> 00:25:10,690
they also hey you know to provide some

00:25:06,880 --> 00:25:14,350
solution of higher ability for my

00:25:10,690 --> 00:25:16,030
squirrel we're doing it our own way we

00:25:14,350 --> 00:25:17,320
don't need to understand what exactly we

00:25:16,030 --> 00:25:20,530
are doing but very some solution

00:25:17,320 --> 00:25:26,140
viability right so that isn't also all

00:25:20,530 --> 00:25:28,570
option which appeared now if we are

00:25:26,140 --> 00:25:32,230
looking at the solutions for a

00:25:28,570 --> 00:25:36,700
replication management we also now got

00:25:32,230 --> 00:25:39,340
some decent decent tools out there even

00:25:36,700 --> 00:25:41,919
in the open source space a while back I

00:25:39,340 --> 00:25:44,500
remember we're having ton of in-house

00:25:41,919 --> 00:25:48,130
tools right so everybody deals with

00:25:44,500 --> 00:25:51,460
mysql replication to promote slave to

00:25:48,130 --> 00:25:54,820
master it and fail or would write their

00:25:51,460 --> 00:25:57,909
own little kind of shell script which

00:25:54,820 --> 00:26:01,059
kind of work with a use case well now we

00:25:57,909 --> 00:26:05,320
have a much poorer better integrate and

00:26:01,059 --> 00:26:09,159
tested solutions which can be ma che the

00:26:05,320 --> 00:26:13,450
drm continued tungsten we have solution

00:26:09,159 --> 00:26:15,669
for replication management if you're

00:26:13,450 --> 00:26:18,640
using their software there is also i

00:26:15,669 --> 00:26:20,780
forgot to put here the mysql replication

00:26:18,640 --> 00:26:23,360
utilities

00:26:20,780 --> 00:26:27,260
from oracle they invested a lot of time

00:26:23,360 --> 00:26:30,710
in providing the utilities to simplify

00:26:27,260 --> 00:26:35,240
managing the GTI debased duplication in

00:26:30,710 --> 00:26:38,810
MySQL 56 up now we have also bunch of

00:26:35,240 --> 00:26:42,940
tools which help us to make chardon

00:26:38,810 --> 00:26:47,530
better anybody know the Charlie means

00:26:42,940 --> 00:26:51,440
okay and the rest is asleep right okay

00:26:47,530 --> 00:26:55,670
that was a trick question right so well

00:26:51,440 --> 00:26:58,310
chardon is is essentially how we deal

00:26:55,670 --> 00:27:01,250
with mysql the scale and data beyond the

00:26:58,310 --> 00:27:05,030
single node right we often take the data

00:27:01,250 --> 00:27:07,700
put in Italy put turbulent pieces right

00:27:05,030 --> 00:27:11,000
and put on different nodes typically be

00:27:07,700 --> 00:27:12,880
short by user ID right or something like

00:27:11,000 --> 00:27:15,470
that account ID where you can say hey

00:27:12,880 --> 00:27:17,350
some of accounts go on this server and

00:27:15,470 --> 00:27:19,900
some on that server and they are

00:27:17,350 --> 00:27:23,630
reasonably independent so we can do that

00:27:19,900 --> 00:27:27,320
right now this also introduces a lot of

00:27:23,630 --> 00:27:28,850
a lot of problems right because some

00:27:27,320 --> 00:27:30,950
queries may need to traverse all the

00:27:28,850 --> 00:27:32,750
data we need to rebalance your chart

00:27:30,950 --> 00:27:37,550
someone and so on and so forth all kind

00:27:32,750 --> 00:27:41,330
of fish you know solutions now there are

00:27:37,550 --> 00:27:43,970
number of solutions which are emerging

00:27:41,330 --> 00:27:48,080
in this case which are looking to make

00:27:43,970 --> 00:27:50,390
this better first group 4 is what I will

00:27:48,080 --> 00:27:54,740
pull not quite my square because it is

00:27:50,390 --> 00:27:58,820
not really the MySQL part or completely

00:27:54,740 --> 00:28:01,160
or substantially original and non open

00:27:58,820 --> 00:28:04,400
source development you can look at the

00:28:01,160 --> 00:28:07,330
classics and mem SQL who are written

00:28:04,400 --> 00:28:13,310
from scratch but speak my school

00:28:07,330 --> 00:28:15,950
protocol or scale DB which is a separate

00:28:13,310 --> 00:28:19,420
storage engine for my school which is

00:28:15,950 --> 00:28:22,700
not open source there is whole bunch of

00:28:19,420 --> 00:28:26,720
proxy solutions which may help you with

00:28:22,700 --> 00:28:29,920
a Charlie needs to one or other extent

00:28:26,720 --> 00:28:34,130
sometimes through your plug-in series

00:28:29,920 --> 00:28:38,030
skylark skill base those are proprietary

00:28:34,130 --> 00:28:40,660
ocean is Dora they just went so open

00:28:38,030 --> 00:28:44,300
source of the two days ago so that

00:28:40,660 --> 00:28:49,430
became quite much more interesting there

00:28:44,300 --> 00:28:50,960
is a myschool proxy max scale which max

00:28:49,430 --> 00:28:53,090
is going to talk about right next

00:28:50,960 --> 00:29:01,100
whether it is it called max scale

00:28:53,090 --> 00:29:05,660
because of you max no no comment yes

00:29:01,100 --> 00:29:08,540
that's a very answer yeah there is also

00:29:05,660 --> 00:29:11,210
a solution like a proxy SQL they also

00:29:08,540 --> 00:29:13,430
have number of open source frameworks

00:29:11,210 --> 00:29:19,340
proved years right which helped us to

00:29:13,430 --> 00:29:22,850
manage your data such as V test jet jet

00:29:19,340 --> 00:29:26,210
pans many of em would kind of came with

00:29:22,850 --> 00:29:28,910
oh let's say tumblr 80 google has

00:29:26,210 --> 00:29:30,980
invented least my school framework for

00:29:28,910 --> 00:29:35,540
fraudulent with the open source but then

00:29:30,980 --> 00:29:38,540
it kind of died off right because it was

00:29:35,540 --> 00:29:41,630
mainly usable for a very specific case I

00:29:38,540 --> 00:29:44,930
think what is also interesting here is

00:29:41,630 --> 00:29:47,300
what Oracle they are doing development

00:29:44,930 --> 00:29:51,890
of MySQL fabric which supposed to be

00:29:47,300 --> 00:29:56,750
this official mysql response to this

00:29:51,890 --> 00:29:58,790
charging project it is called GA but i

00:29:56,750 --> 00:30:02,300
think it's right now the functionality

00:29:58,790 --> 00:30:05,120
is quite limited but i would be watching

00:30:02,300 --> 00:30:08,750
that hopefully in in a few years that

00:30:05,120 --> 00:30:11,300
would be something more mature and full

00:30:08,750 --> 00:30:16,070
of functionality to a full scale of a

00:30:11,300 --> 00:30:20,240
classroom management ok now let me move

00:30:16,070 --> 00:30:24,410
on to their application or architecture

00:30:20,240 --> 00:30:26,390
questions now if you want to design

00:30:24,410 --> 00:30:28,960
successful architecture I think there

00:30:26,390 --> 00:30:31,940
are few things you need to get right

00:30:28,960 --> 00:30:35,980
well some of that is what you may need

00:30:31,940 --> 00:30:39,710
to make some right decisions early and

00:30:35,980 --> 00:30:43,870
what does it mean well there's a lot of

00:30:39,710 --> 00:30:46,630
decisions to take right some of em are

00:30:43,870 --> 00:30:49,210
have very little impact and

00:30:46,630 --> 00:30:50,830
easy to change later it's like what kind

00:30:49,210 --> 00:30:53,320
of coffee are going to have in a

00:30:50,830 --> 00:30:56,590
Starbucks right really in the long run

00:30:53,320 --> 00:30:59,230
it doesn't matter there are some others

00:30:56,590 --> 00:31:00,850
where you decide and you have to leave

00:30:59,230 --> 00:31:03,430
though this is a very long time and

00:31:00,850 --> 00:31:06,880
through our support and consulted

00:31:03,430 --> 00:31:09,520
practice we often run into people taking

00:31:06,880 --> 00:31:11,350
some very bad decisions and then they

00:31:09,520 --> 00:31:13,870
come to us and they just launched an

00:31:11,350 --> 00:31:18,370
application two weeks ago and oh my gosh

00:31:13,870 --> 00:31:21,550
now it's very expensive complicated to

00:31:18,370 --> 00:31:26,920
fix and often would have a significant

00:31:21,550 --> 00:31:29,110
impact to our to their business to give

00:31:26,920 --> 00:31:31,030
you an example I remember company which

00:31:29,110 --> 00:31:32,560
came to us thankfully before we launched

00:31:31,030 --> 00:31:36,870
and say oh we're launching this

00:31:32,560 --> 00:31:39,400
application two weeks and so wonderful

00:31:36,870 --> 00:31:41,830
right we look at and say hey did you

00:31:39,400 --> 00:31:43,870
guys test that beyond those would say

00:31:41,830 --> 00:31:47,230
hundred trackers which we have in a

00:31:43,870 --> 00:31:49,960
database well not really what they have

00:31:47,230 --> 00:31:54,610
those very smart development team far

00:31:49,960 --> 00:31:57,010
far away so don't worry I would ask him

00:31:54,610 --> 00:31:58,960
okay guys how much do you expect that to

00:31:57,010 --> 00:32:00,730
grow well as the way via professional

00:31:58,960 --> 00:32:03,220
will spend a lot of money on an odd

00:32:00,730 --> 00:32:07,200
sense and so on and so forth a plan to

00:32:03,220 --> 00:32:10,330
have 400,000 users in two weeks okay I

00:32:07,200 --> 00:32:11,890
was suggesting let us generate the test

00:32:10,330 --> 00:32:14,410
database right to those four hundred to

00:32:11,890 --> 00:32:18,130
four hundred thousand tutors that's what

00:32:14,410 --> 00:32:19,930
we did not a big deal and then we would

00:32:18,130 --> 00:32:24,130
go to a front page of that application

00:32:19,930 --> 00:32:28,420
it would load four hours four hours

00:32:24,130 --> 00:32:31,260
right just a front page right so I guess

00:32:28,420 --> 00:32:34,510
well those guys didn't quite lunch right

00:32:31,260 --> 00:32:37,530
in a two weeks because what they have

00:32:34,510 --> 00:32:40,540
designed it was kind of pretty simple

00:32:37,530 --> 00:32:44,440
architecture but it was you know

00:32:40,540 --> 00:32:46,390
absolutely bizarre I just throw

00:32:44,440 --> 00:32:49,510
everything in a single table and you

00:32:46,390 --> 00:32:53,500
know just do some massive who queries on

00:32:49,510 --> 00:32:54,910
that but if I don't mind I think it's

00:32:53,500 --> 00:32:57,310
important to note what your first

00:32:54,910 --> 00:32:59,549
architecture will not be perfect it

00:32:57,310 --> 00:33:03,989
never is and this

00:32:59,549 --> 00:33:06,570
is mainly it's not because of of you

00:33:03,989 --> 00:33:08,639
right not being smart enough it's just

00:33:06,570 --> 00:33:10,230
because at the start point you don't

00:33:08,639 --> 00:33:12,989
really know everything about the

00:33:10,230 --> 00:33:14,940
application even your business right or

00:33:12,989 --> 00:33:17,999
product people most likely don't know

00:33:14,940 --> 00:33:19,440
right they assume but then as you put

00:33:17,999 --> 00:33:21,269
your application production there will

00:33:19,440 --> 00:33:23,489
be some other things which needs to be

00:33:21,269 --> 00:33:27,119
changed and so on and so forth right so

00:33:23,489 --> 00:33:29,580
trying to get it perfect for that scope

00:33:27,119 --> 00:33:31,470
as you understand your problem is not

00:33:29,580 --> 00:33:36,539
reasonable because that the problem

00:33:31,470 --> 00:33:39,389
itself is very likely to change okay and

00:33:36,539 --> 00:33:44,279
we spoke about the poor and expensive to

00:33:39,389 --> 00:33:48,749
change choice already now the other

00:33:44,279 --> 00:33:51,179
things what I want to talk and this is

00:33:48,749 --> 00:33:53,999
my approach to this problem right so I

00:33:51,179 --> 00:33:59,570
the CEO I have to deal with lawyers not

00:33:53,999 --> 00:33:59,570
what I like that but I just have to and

00:34:00,409 --> 00:34:05,159
how I see that is you get the lower

00:34:03,239 --> 00:34:06,389
right they provide you solution to a

00:34:05,159 --> 00:34:10,440
problem and then you say hey you know

00:34:06,389 --> 00:34:12,149
what you can pay us ten a thousand times

00:34:10,440 --> 00:34:18,179
more wherever and you'll find more

00:34:12,149 --> 00:34:21,000
problems for you right so to me it's oh

00:34:18,179 --> 00:34:23,429
my gosh sometimes you don't really want

00:34:21,000 --> 00:34:27,179
to go there because those guys will find

00:34:23,429 --> 00:34:28,589
a lot of let's say ah a lot of kind of

00:34:27,179 --> 00:34:30,230
problems which you don't have time to

00:34:28,589 --> 00:34:32,399
fix anywhere in which are largely

00:34:30,230 --> 00:34:37,280
irrelevant in the grand scheme of things

00:34:32,399 --> 00:34:42,569
right but at the same time if you are

00:34:37,280 --> 00:34:44,129
not working in floors that all right and

00:34:42,569 --> 00:34:49,230
another to get in some decisions

00:34:44,129 --> 00:34:50,909
correctly well then you may run into a

00:34:49,230 --> 00:34:54,000
lot of trouble if accomplished legal

00:34:50,909 --> 00:34:56,849
travel and even end up in jail now with

00:34:54,000 --> 00:34:59,609
our software applications it's a little

00:34:56,849 --> 00:35:02,780
bit different right well your job might

00:34:59,609 --> 00:35:07,260
be on the line but in most cases that's

00:35:02,780 --> 00:35:11,040
where it's it's going to end right but

00:35:07,260 --> 00:35:12,500
if those big picture important decisions

00:35:11,040 --> 00:35:14,870
which are

00:35:12,500 --> 00:35:20,570
very costly to fix I believe it is a

00:35:14,870 --> 00:35:22,880
good to involve consultants ask for our

00:35:20,570 --> 00:35:25,070
opinion because you before you're

00:35:22,880 --> 00:35:27,080
getting those big investments right I

00:35:25,070 --> 00:35:30,740
can tell you from our side we had so

00:35:27,080 --> 00:35:32,690
many cases as people came to us way too

00:35:30,740 --> 00:35:36,620
late and they have been already in a

00:35:32,690 --> 00:35:39,050
trouble right and instead of talking

00:35:36,620 --> 00:35:41,900
early on then we design architecture and

00:35:39,050 --> 00:35:44,000
we could help them to make the right

00:35:41,900 --> 00:35:47,900
choices sometimes in a matter of a few

00:35:44,000 --> 00:35:49,910
hours now then you speak about the

00:35:47,900 --> 00:35:52,360
architecture we want to consider a few

00:35:49,910 --> 00:35:55,310
different or about called dimensions

00:35:52,360 --> 00:35:59,090
application scale well obviously not all

00:35:55,310 --> 00:36:02,900
applications are of a same scale right

00:35:59,090 --> 00:36:04,810
some of us are building an X food next

00:36:02,900 --> 00:36:08,000
Facebook and a very building maybe

00:36:04,810 --> 00:36:11,780
software for a dental office right which

00:36:08,000 --> 00:36:17,000
also quite important but is not nearly

00:36:11,780 --> 00:36:20,390
that scale hi viability that's not one

00:36:17,000 --> 00:36:23,150
right and also I like to look at the

00:36:20,390 --> 00:36:25,310
team experience because we can all come

00:36:23,150 --> 00:36:28,160
up with all the wonderful solutions in a

00:36:25,310 --> 00:36:31,070
theory but in the end it's your ability

00:36:28,160 --> 00:36:34,550
to execute which counts right and your

00:36:31,070 --> 00:36:40,490
team may not be may be better executing

00:36:34,550 --> 00:36:45,230
some things than others so then they are

00:36:40,490 --> 00:36:48,860
generally approach scaling or how I like

00:36:45,230 --> 00:36:52,160
to look at that first is to avoid over

00:36:48,860 --> 00:36:54,650
engineering as funny as a tough sounds

00:36:52,160 --> 00:36:56,990
but in in many cases if you have

00:36:54,650 --> 00:36:58,700
somebody who understands the problem

00:36:56,990 --> 00:37:03,110
right and it wouldn't be in that front

00:36:58,700 --> 00:37:05,480
page 2 takes four hours type of people

00:37:03,110 --> 00:37:08,720
they often tend to over engineer the

00:37:05,480 --> 00:37:12,410
application because they are so scared

00:37:08,720 --> 00:37:14,900
and they wanted to make sure application

00:37:12,410 --> 00:37:16,490
can scale to unlimited amount of users

00:37:14,900 --> 00:37:20,480
and so on and so forth right which can

00:37:16,490 --> 00:37:23,270
be a which can be very very costly it

00:37:20,480 --> 00:37:25,720
can slow your development process right

00:37:23,270 --> 00:37:27,520
and also complexity always in

00:37:25,720 --> 00:37:31,450
reduce mistakes right so you don't want

00:37:27,520 --> 00:37:34,150
to really engineer application to be

00:37:31,450 --> 00:37:35,920
more complicated than you need but at

00:37:34,150 --> 00:37:38,560
the same time you want to give yourself

00:37:35,920 --> 00:37:40,540
some runway because you also don't want

00:37:38,560 --> 00:37:43,119
to just run into a wall and saying oh my

00:37:40,540 --> 00:37:45,340
gosh I see my application is keeping up

00:37:43,119 --> 00:37:50,440
if a user demand and there is nothing I

00:37:45,340 --> 00:37:53,200
can do and what is a good way to do that

00:37:50,440 --> 00:37:55,900
is to do at least I will call it some

00:37:53,200 --> 00:37:58,060
capacity flying right few of us are

00:37:55,900 --> 00:38:00,760
really doing the perfect capacitive

00:37:58,060 --> 00:38:02,770
client but at least analyze how your

00:38:00,760 --> 00:38:05,320
application behaves maybe create that

00:38:02,770 --> 00:38:07,030
test database what I'm doing or do some

00:38:05,320 --> 00:38:11,170
basic math to say hey you know what I

00:38:07,030 --> 00:38:13,030
see what my cpu usage grows linearly

00:38:11,170 --> 00:38:15,180
with number of users right and i'm using

00:38:13,030 --> 00:38:19,330
the cpu five percent right now so

00:38:15,180 --> 00:38:22,450
chances are i can still handle like

00:38:19,330 --> 00:38:24,970
maybe 10 X amount of users right at

00:38:22,450 --> 00:38:27,550
least some of those basically so you can

00:38:24,970 --> 00:38:32,020
estimate what kind of run where you have

00:38:27,550 --> 00:38:34,109
for those decisions to do something to

00:38:32,020 --> 00:38:36,369
scale better to chart things to

00:38:34,109 --> 00:38:40,300
implement Cashin right do read/write

00:38:36,369 --> 00:38:42,670
splitting and so on and so forth now to

00:38:40,300 --> 00:38:44,740
a higher ability the thing to know what

00:38:42,670 --> 00:38:48,210
have ability is what we real high

00:38:44,740 --> 00:38:52,480
ability right I let me call it like a

00:38:48,210 --> 00:38:56,700
military grade right or something space

00:38:52,480 --> 00:38:59,619
grade is really really expensive because

00:38:56,700 --> 00:39:01,089
it's really how consumed it's not just

00:38:59,619 --> 00:39:05,859
your software which has to be the

00:39:01,089 --> 00:39:08,710
highway and software and hardware it's

00:39:05,859 --> 00:39:10,540
also a lot about the people a lot about

00:39:08,710 --> 00:39:14,530
the processes and so on and so forth

00:39:10,540 --> 00:39:16,510
right why because people are often the

00:39:14,530 --> 00:39:19,930
leading cause of downtime at least

00:39:16,510 --> 00:39:23,440
that's what we are or what we see those

00:39:19,930 --> 00:39:25,450
days it's not what the software started

00:39:23,440 --> 00:39:28,000
malfunction right the system software or

00:39:25,450 --> 00:39:30,460
hardware just died where is some

00:39:28,000 --> 00:39:32,200
developer writing the stupid query

00:39:30,460 --> 00:39:36,190
putting it in production and in just

00:39:32,200 --> 00:39:38,319
overload the system right Oh some DB 80

00:39:36,190 --> 00:39:39,910
feet dirty fingers thinks he is

00:39:38,319 --> 00:39:46,809
environment and drugs and database right

00:39:39,910 --> 00:39:49,719
or running some something which you know

00:39:46,809 --> 00:39:52,299
takes us all the resources right so that

00:39:49,719 --> 00:39:54,729
is what too often handles so high

00:39:52,299 --> 00:39:57,249
viability you have to understand what if

00:39:54,729 --> 00:40:01,930
you really serious about heavily that is

00:39:57,249 --> 00:40:03,940
going to to cost you right and it's it's

00:40:01,930 --> 00:40:07,119
not trivial and it's still not trivial

00:40:03,940 --> 00:40:12,359
now I would say the medium have ability

00:40:07,119 --> 00:40:14,499
right is it is getting a lot more

00:40:12,359 --> 00:40:18,160
affordable those days in some of the

00:40:14,499 --> 00:40:20,589
solutions I iterated right so if you

00:40:18,160 --> 00:40:24,160
adjust here about saying hey what if my

00:40:20,589 --> 00:40:29,319
server dies I want to be able to

00:40:24,160 --> 00:40:33,130
failover right those things you can get

00:40:29,319 --> 00:40:35,349
a lot easier those days now in terms of

00:40:33,130 --> 00:40:37,180
the team experience we spoke about

00:40:35,349 --> 00:40:41,499
children solutions right and think about

00:40:37,180 --> 00:40:43,059
what solutions you team can support now

00:40:41,499 --> 00:40:45,099
note in this case is what your

00:40:43,059 --> 00:40:48,699
developers often would know little about

00:40:45,099 --> 00:40:51,489
databases those days like I mean I've

00:40:48,699 --> 00:40:54,940
been recently involved in hiring bunch

00:40:51,489 --> 00:40:56,859
of front end or oh that's a verification

00:40:54,940 --> 00:40:59,529
developers and I would surprise they

00:40:56,859 --> 00:41:07,809
know about the database it's a lot less

00:40:59,529 --> 00:41:10,299
than 10 15 years ago so what I think is

00:41:07,809 --> 00:41:12,190
important in this case is what you even

00:41:10,299 --> 00:41:14,890
you are doing the development you want

00:41:12,190 --> 00:41:20,229
to make sure you have their right and a

00:41:14,890 --> 00:41:24,329
safe process are for development which

00:41:20,229 --> 00:41:27,519
is which is a key right and have some

00:41:24,329 --> 00:41:31,390
tools to support that process what I

00:41:27,519 --> 00:41:35,049
found the most practical for example is

00:41:31,390 --> 00:41:38,949
to ensure what we both analyze their

00:41:35,049 --> 00:41:41,589
queries especially the new queries which

00:41:38,949 --> 00:41:44,789
developers write divided in a test

00:41:41,589 --> 00:41:47,890
environment right first where you can

00:41:44,789 --> 00:41:49,809
review them and as well check things out

00:41:47,890 --> 00:41:51,440
in production for a different reason

00:41:49,809 --> 00:41:53,960
first may

00:41:51,440 --> 00:41:57,560
you haven't caught all the queries and

00:41:53,960 --> 00:42:01,700
then second there are some mysql

00:41:57,560 --> 00:42:03,740
limitations or bugs which you may run

00:42:01,700 --> 00:42:06,349
into production introducing new queries

00:42:03,740 --> 00:42:09,470
right that's why you want to more

00:42:06,349 --> 00:42:11,329
interact I where you can use a pure

00:42:09,470 --> 00:42:15,920
corner toolkit and particular digest

00:42:11,329 --> 00:42:18,410
tool which provides that through command

00:42:15,920 --> 00:42:20,690
line interface or you can use it York on

00:42:18,410 --> 00:42:23,300
a cloud tools which is our new or new

00:42:20,690 --> 00:42:27,349
web service which which provides that

00:42:23,300 --> 00:42:29,569
Thun easy to use your interface now

00:42:27,349 --> 00:42:34,730
another important thing evolve a team

00:42:29,569 --> 00:42:37,010
experience right or example I wanted to

00:42:34,730 --> 00:42:41,569
make about to making or making right

00:42:37,010 --> 00:42:46,099
choices so I prefer to to run my school

00:42:41,569 --> 00:42:48,680
on linux right that is very simple now

00:42:46,099 --> 00:42:50,869
at the same time sometimes would have

00:42:48,680 --> 00:42:53,810
some customers which have which run my

00:42:50,869 --> 00:42:57,020
school but the whole team is iranian on

00:42:53,810 --> 00:42:59,420
on windows right that is where we have a

00:42:57,020 --> 00:43:02,660
lot of experience and that is what of it

00:42:59,420 --> 00:43:04,210
proof you're in this case I mean

00:43:02,660 --> 00:43:06,680
everything being equal I would probably

00:43:04,210 --> 00:43:09,319
steer things to run in my school on

00:43:06,680 --> 00:43:12,589
Linux but that may be setting that team

00:43:09,319 --> 00:43:18,530
on failure because we don't have linux

00:43:12,589 --> 00:43:20,329
admins right or or DBAs right and and

00:43:18,530 --> 00:43:22,250
with a safe approach for them maybe

00:43:20,329 --> 00:43:25,460
actually right in my school on linux

00:43:22,250 --> 00:43:27,650
right that is well the example for me

00:43:25,460 --> 00:43:30,650
how you want to be carefully taking your

00:43:27,650 --> 00:43:33,020
team experience in a proud and not just

00:43:30,650 --> 00:43:38,119
looking at their theoretical best

00:43:33,020 --> 00:43:43,270
choices but what your team is likely to

00:43:38,119 --> 00:43:47,260
execute the best another piece is

00:43:43,270 --> 00:43:52,730
simplicity right we want really to use

00:43:47,260 --> 00:43:55,460
fewer components than possible obviously

00:43:52,730 --> 00:43:58,190
right if i can just do the staff with a

00:43:55,460 --> 00:43:58,740
mysql i'm not going to put a mysql and

00:43:58,190 --> 00:44:01,350


00:43:58,740 --> 00:44:04,110
and radius and memcache right there

00:44:01,350 --> 00:44:07,650
because I will have to have experience

00:44:04,110 --> 00:44:10,260
to deal with with all of them two more

00:44:07,650 --> 00:44:12,780
in tour to travel through to implement

00:44:10,260 --> 00:44:14,910
changes and so on and so forth and i

00:44:12,780 --> 00:44:18,900
also have an interesting as a story for

00:44:14,910 --> 00:44:21,780
that i remember the customer who heed to

00:44:18,900 --> 00:44:24,510
store a locks and they say hey storing

00:44:21,780 --> 00:44:27,210
the logs in database in my school is a

00:44:24,510 --> 00:44:31,380
bad idea i heard cassandra is much

00:44:27,210 --> 00:44:36,210
better forgot how much many log records

00:44:31,380 --> 00:44:38,040
to have well about 10,000 today well you

00:44:36,210 --> 00:44:42,630
know at this point it is probably not a

00:44:38,040 --> 00:44:44,280
big deal right you can owe as much as i

00:44:42,630 --> 00:44:49,110
write them to sqlite if you want to

00:44:44,280 --> 00:44:52,770
write its 10,000 today now well anyway I

00:44:49,110 --> 00:44:54,390
think because Cassandra is cool and new

00:44:52,770 --> 00:44:56,750
and exciting something too low on they

00:44:54,390 --> 00:44:59,820
went ahead and start trying in baton in

00:44:56,750 --> 00:45:01,740
to Cassandra and then I would come visit

00:44:59,820 --> 00:45:03,600
the same guys in probably about six

00:45:01,740 --> 00:45:06,750
months and ask you about that project

00:45:03,600 --> 00:45:08,820
and say hey you know what yes we still

00:45:06,750 --> 00:45:11,160
writing those logs to Cassandra but that

00:45:08,820 --> 00:45:13,020
developer left and he was only one who

00:45:11,160 --> 00:45:15,180
knew anything about Cassandra so we

00:45:13,020 --> 00:45:18,740
can't really read the data from out

00:45:15,180 --> 00:45:23,369
where or learn anything from those logs

00:45:18,740 --> 00:45:25,050
right and that is the challenge the more

00:45:23,369 --> 00:45:27,180
components you have right the more

00:45:25,050 --> 00:45:32,280
companies you have to understand how we

00:45:27,180 --> 00:45:37,100
have a team experience analogies for me

00:45:32,280 --> 00:45:39,480
is what there is a safety in numbers I

00:45:37,100 --> 00:45:43,290
mentioned before I put my school is

00:45:39,480 --> 00:45:45,420
frankly wonderful because there are so

00:45:43,290 --> 00:45:49,680
many people who know my squirrel right

00:45:45,420 --> 00:45:54,270
and they have tried doing almost about

00:45:49,680 --> 00:45:58,109
anything with it and that makes it a

00:45:54,270 --> 00:46:00,240
safe choice right in number of cases you

00:45:58,109 --> 00:46:03,650
may need to set to use some exotic tool

00:46:00,240 --> 00:46:06,359
or maybe even write something your own

00:46:03,650 --> 00:46:09,359
right but especially if you are in the

00:46:06,359 --> 00:46:11,630
managerial position you have to really

00:46:09,359 --> 00:46:13,130
check close if your team

00:46:11,630 --> 00:46:16,040
understand what is your reason out here

00:46:13,130 --> 00:46:17,990
because a lot of software engineers what

00:46:16,040 --> 00:46:21,650
at least would ideal if they might shout

00:46:17,990 --> 00:46:24,560
prefer to run their own stuff or to go

00:46:21,650 --> 00:46:27,770
and find something which is new and

00:46:24,560 --> 00:46:30,890
exciting and in an exotic to implement

00:46:27,770 --> 00:46:33,320
right I mean just do whatever everything

00:46:30,890 --> 00:46:38,570
else is doing is is boring right it's

00:46:33,320 --> 00:46:42,850
not as as rewarding right we're going to

00:46:38,570 --> 00:46:42,850
talk about your next gig fast right now

00:46:44,560 --> 00:46:49,910
and I thing to consider is I believe

00:46:47,300 --> 00:46:53,120
what we are dealing with a world where

00:46:49,910 --> 00:46:56,270
majority of applications are really what

00:46:53,120 --> 00:46:58,100
I will call small and what they mean by

00:46:56,270 --> 00:47:00,710
the small applications well its

00:46:58,100 --> 00:47:03,530
applications which really can run on the

00:47:00,710 --> 00:47:10,430
single database instance if you would

00:47:03,530 --> 00:47:11,900
want to write especially if you don't if

00:47:10,430 --> 00:47:15,680
you don't we are not including the

00:47:11,900 --> 00:47:17,990
availability here and those small

00:47:15,680 --> 00:47:20,180
applications we can be quite quite

00:47:17,990 --> 00:47:23,270
significant I have an example for

00:47:20,180 --> 00:47:28,250
example of their internet side of a

00:47:23,270 --> 00:47:30,740
company with 200,000 our employees based

00:47:28,250 --> 00:47:32,840
on drupal and mysql you know

00:47:30,740 --> 00:47:34,670
business-critical they all use that all

00:47:32,840 --> 00:47:37,160
the time right support team use that to

00:47:34,670 --> 00:47:39,860
look up information 200,000 employees

00:47:37,160 --> 00:47:43,370
right in my school is like ryan at about

00:47:39,860 --> 00:47:45,980
five percent on the utilization hard

00:47:43,370 --> 00:47:48,320
drive a provision for at all i know some

00:47:45,980 --> 00:47:53,570
ecommerce sites right which have made

00:47:48,320 --> 00:47:56,720
the 10 million sales a month and even

00:47:53,570 --> 00:47:59,600
more for my squirrel single instance not

00:47:56,720 --> 00:48:01,940
even in a breaking a sweat right and

00:47:59,600 --> 00:48:05,060
most of the applications and really

00:48:01,940 --> 00:48:08,210
those not applications like like

00:48:05,060 --> 00:48:12,650
facebook which really need to use a lot

00:48:08,210 --> 00:48:15,680
of instance where ever use now if you

00:48:12,650 --> 00:48:18,020
think about doing some math how lodge

00:48:15,680 --> 00:48:21,620
get potentially such small applications

00:48:18,020 --> 00:48:23,559
be well the motor my SQL instance can

00:48:21,620 --> 00:48:25,979
handle handle

00:48:23,559 --> 00:48:28,599
hundred thousands of queries of

00:48:25,979 --> 00:48:32,349
relatively local complexity those days

00:48:28,599 --> 00:48:34,509
this is like it's not like a benchmark

00:48:32,349 --> 00:48:36,219
number right if you go to Oracle website

00:48:34,509 --> 00:48:39,160
will say hey they are doing million of

00:48:36,219 --> 00:48:42,430
queries a second yes in some special

00:48:39,160 --> 00:48:46,029
circumstances you are can do a million

00:48:42,430 --> 00:48:48,549
really you can but if you're on the with

00:48:46,029 --> 00:48:51,489
more realistic cases I would be looking

00:48:48,549 --> 00:48:53,259
at at a hundred thousand if you're

00:48:51,489 --> 00:48:56,549
looking at about the uses of twenty

00:48:53,259 --> 00:49:00,489
queries per user interactions right and

00:48:56,549 --> 00:49:03,339
then you can potentially be looking at

00:49:00,489 --> 00:49:05,529
about 10 million of active users rights

00:49:03,339 --> 00:49:08,739
museum engagement for your applications

00:49:05,529 --> 00:49:10,989
right which is pretty large application

00:49:08,739 --> 00:49:13,689
right if you well if you think about

00:49:10,989 --> 00:49:16,989
that of course that can significantly

00:49:13,689 --> 00:49:20,920
worry about a based on what your

00:49:16,989 --> 00:49:24,209
application actually does right but if

00:49:20,920 --> 00:49:26,920
its oil TP kind of workloads you know

00:49:24,209 --> 00:49:29,859
reads a bit of data change a bit of data

00:49:26,920 --> 00:49:33,099
you can get a lot on the single my SQL

00:49:29,859 --> 00:49:36,130
instance those days now let's look about

00:49:33,099 --> 00:49:39,219
some practical choices what we can have

00:49:36,130 --> 00:49:41,559
with our my skull architecture well

00:49:39,219 --> 00:49:44,199
first what do we start with what is a

00:49:41,559 --> 00:49:45,999
baseline and a baseline is a very simple

00:49:44,199 --> 00:49:48,670
right its single my school instance if

00:49:45,999 --> 00:49:50,650
no Cashin no h a and no kind of

00:49:48,670 --> 00:49:54,999
supplemental technologies like Cashin to

00:49:50,650 --> 00:49:59,109
make it work better first what we have

00:49:54,999 --> 00:50:01,900
to decide is c hive ability because that

00:49:59,109 --> 00:50:04,390
is indeed the first choice in a lot of

00:50:01,900 --> 00:50:06,249
environments right we can get a lot of

00:50:04,390 --> 00:50:08,109
at single my school instance as you

00:50:06,249 --> 00:50:09,729
showed but hey you know what do you

00:50:08,109 --> 00:50:11,799
really want to have no availability if

00:50:09,729 --> 00:50:15,609
you have you know ten million sales

00:50:11,799 --> 00:50:18,549
everyone probably not so whatever simple

00:50:15,609 --> 00:50:20,559
choices we can have we can use have

00:50:18,549 --> 00:50:26,019
ability with database as a service right

00:50:20,559 --> 00:50:29,170
with amazon areas or ours very simple my

00:50:26,019 --> 00:50:32,739
heart ability of mysql replication again

00:50:29,170 --> 00:50:35,229
something pretty simple because there is

00:50:32,739 --> 00:50:36,760
safety in numbers a lot of people out

00:50:35,229 --> 00:50:38,410
there using mysql replica

00:50:36,760 --> 00:50:42,160
to have ability it may not be perfect

00:50:38,410 --> 00:50:46,570
but it works reasonably well you can

00:50:42,160 --> 00:50:50,920
also use their Percona extra v cluster

00:50:46,570 --> 00:50:54,610
or other gallery based technologies for

00:50:50,920 --> 00:50:57,820
how ability which again can get you get

00:50:54,610 --> 00:51:01,510
you going pretty quickly and see pretty

00:50:57,820 --> 00:51:04,390
simple to manage now the next question

00:51:01,510 --> 00:51:07,540
you would ask well we deal to have

00:51:04,390 --> 00:51:11,110
ability we need to scale our application

00:51:07,540 --> 00:51:13,330
right to make it to operate on a bigger

00:51:11,110 --> 00:51:15,880
scale what does that mean well and

00:51:13,330 --> 00:51:19,150
really you typically need to deal with

00:51:15,880 --> 00:51:21,700
one of you of those let's cover

00:51:19,150 --> 00:51:25,420
dimensions of scalability you may need

00:51:21,700 --> 00:51:28,020
to scale reads right so in certification

00:51:25,420 --> 00:51:32,860
as you get more users you get more

00:51:28,020 --> 00:51:34,480
Maureen's not so much of right think

00:51:32,860 --> 00:51:37,660
about things like Wikipedia right for

00:51:34,480 --> 00:51:39,640
example a lot of us are reading

00:51:37,660 --> 00:51:44,010
Wikipedia but relatively few am I can

00:51:39,640 --> 00:51:48,220
edit right so in their case they need to

00:51:44,010 --> 00:51:53,080
morskie care about skalian reads too

00:51:48,220 --> 00:51:55,170
much more extend to skalian rights then

00:51:53,080 --> 00:51:58,390
have to scale right of course and

00:51:55,170 --> 00:52:02,770
sometimes or in many cases we also have

00:51:58,390 --> 00:52:05,220
to scale in data size right it may have

00:52:02,770 --> 00:52:12,780
same amount of read and write or

00:52:05,220 --> 00:52:15,630
ever-growing data or data may be growing

00:52:12,780 --> 00:52:20,260
disproportionately compared to work load

00:52:15,630 --> 00:52:23,080
now before we have to get more capacity

00:52:20,260 --> 00:52:25,810
from a system I think it's important to

00:52:23,080 --> 00:52:28,900
think about can we do something with a

00:52:25,810 --> 00:52:32,410
load and that is a thing is a very

00:52:28,900 --> 00:52:35,530
important thing because in majority of

00:52:32,410 --> 00:52:38,010
your applications we observe right

00:52:35,530 --> 00:52:40,750
they're not became the saturated evenly

00:52:38,010 --> 00:52:43,090
you just have some of those periods of

00:52:40,750 --> 00:52:46,780
time sometimes your application is not

00:52:43,090 --> 00:52:48,800
able to pick Eva the load right user

00:52:46,780 --> 00:52:51,320
response time ciphers and they say hey

00:52:48,800 --> 00:52:55,310
you know it's not performing well right

00:52:51,320 --> 00:52:57,980
and in this case often that their ideas

00:52:55,310 --> 00:53:02,170
to deal with that is actually to move

00:52:57,980 --> 00:53:04,910
the Lord we can move the load in space

00:53:02,170 --> 00:53:08,210
let's say move it to display to a slave

00:53:04,910 --> 00:53:11,450
for full report inquiries for example

00:53:08,210 --> 00:53:15,710
right can be pretty easy or we can all

00:53:11,450 --> 00:53:19,130
often do it by moving it in time let's

00:53:15,710 --> 00:53:21,500
say some batch protests on a building

00:53:19,130 --> 00:53:27,220
summary tables that all can be done at

00:53:21,500 --> 00:53:30,070
night or implementing queuing to

00:53:27,220 --> 00:53:33,920
accommodate for a very short term a

00:53:30,070 --> 00:53:38,020
short term spite puran is actually is a

00:53:33,920 --> 00:53:42,650
very very important technique out where

00:53:38,020 --> 00:53:45,740
and why is that well because if you

00:53:42,650 --> 00:53:48,350
think about the theory right of all of

00:53:45,740 --> 00:53:51,200
how those kind of interactive systems

00:53:48,350 --> 00:53:54,020
operate then you'll know what requests

00:53:51,200 --> 00:53:58,270
they came Campbell before is known as

00:53:54,020 --> 00:54:01,940
random arrivals anybody heard about oh

00:53:58,270 --> 00:54:03,950
the this approach right they come well

00:54:01,940 --> 00:54:05,720
essentially random right and you can

00:54:03,950 --> 00:54:07,400
think about that well let's say you have

00:54:05,720 --> 00:54:09,590
a store on the street right how do

00:54:07,400 --> 00:54:12,260
people walk in into that well liked and

00:54:09,590 --> 00:54:14,900
as an random arrival right in average

00:54:12,260 --> 00:54:18,500
you may have let's say a hundred people

00:54:14,900 --> 00:54:22,100
are an hour but that doesn't necessarily

00:54:18,500 --> 00:54:23,960
mean what it's you know every minute

00:54:22,100 --> 00:54:26,210
light or a little bit less than that a

00:54:23,960 --> 00:54:28,040
person walks in you can find out what

00:54:26,210 --> 00:54:29,570
sometimes you know the group of 20

00:54:28,040 --> 00:54:31,250
people comes together right and then

00:54:29,570 --> 00:54:33,650
there's five minutes with nobody else

00:54:31,250 --> 00:54:36,650
comes in and the same really happens if

00:54:33,650 --> 00:54:41,210
the database requests so user requests

00:54:36,650 --> 00:54:47,690
as well we don't they often get come in

00:54:41,210 --> 00:54:49,430
a in in batches right and essentially is

00:54:47,690 --> 00:54:51,980
the probability for you to have a very

00:54:49,430 --> 00:54:54,590
high number of requests if in a very

00:54:51,980 --> 00:54:58,610
short time and if you try to process

00:54:54,590 --> 00:54:59,780
them all at the same time often you will

00:54:58,610 --> 00:55:03,620
cause there

00:54:59,780 --> 00:55:06,560
database overload with the cueing what

00:55:03,620 --> 00:55:08,900
we can do is we can postpone all of your

00:55:06,560 --> 00:55:12,500
job right or part of a job which is not

00:55:08,900 --> 00:55:16,060
necessary and do it in with some delay

00:55:12,500 --> 00:55:18,800
where we can smooth and will overload

00:55:16,060 --> 00:55:23,480
let's give you example the affair with

00:55:18,800 --> 00:55:25,640
your Twitter right then I am posting my

00:55:23,480 --> 00:55:27,560
treat out there I can store it in the

00:55:25,640 --> 00:55:30,620
database which is very easy our

00:55:27,560 --> 00:55:34,970
operation but then I have to notify all

00:55:30,620 --> 00:55:36,740
of my followers right and if some people

00:55:34,970 --> 00:55:39,940
may have a millions of followers that

00:55:36,740 --> 00:55:43,940
would be very expensive operations to do

00:55:39,940 --> 00:55:46,760
on a right in the in real time right and

00:55:43,940 --> 00:55:49,400
also if there is number of such the

00:55:46,760 --> 00:55:50,870
tweets happen to very it's a very short

00:55:49,400 --> 00:55:53,090
time right that can cause a system

00:55:50,870 --> 00:55:56,420
overload if you can stuff it in the

00:55:53,090 --> 00:55:58,640
queue instead then you can manage your

00:55:56,420 --> 00:56:01,820
load right and if some of you become

00:55:58,640 --> 00:56:04,460
notified about somebody street two

00:56:01,820 --> 00:56:06,200
minutes later after it was posted most

00:56:04,460 --> 00:56:09,800
likely hood you don't even notice Matt

00:56:06,200 --> 00:56:13,210
right so queuing is a very important

00:56:09,800 --> 00:56:16,100
really used in their majority of our

00:56:13,210 --> 00:56:18,680
high-end architectures right deliver

00:56:16,100 --> 00:56:22,130
loads by increasing durability we can

00:56:18,680 --> 00:56:24,260
also are kind of separate the load to

00:56:22,130 --> 00:56:26,840
multiple subsystems in this case and

00:56:24,260 --> 00:56:29,990
scale what we need to do there are many

00:56:26,840 --> 00:56:33,380
solutions for queuing like you can if

00:56:29,990 --> 00:56:36,230
even if you you want you can do some Q

00:56:33,380 --> 00:56:40,730
into some relatively basic level of

00:56:36,230 --> 00:56:43,220
MySQL but there are virus-specific human

00:56:40,730 --> 00:56:47,900
solutions or three researchers rabbitmq

00:56:43,220 --> 00:56:50,860
zeromq regice gear man more like a job

00:56:47,900 --> 00:56:54,200
management that also can be useful Cuban

00:56:50,860 --> 00:56:58,010
now scale and reads for scaling leads we

00:56:54,200 --> 00:57:01,070
can even use duplication with READ&WRITE

00:56:58,010 --> 00:57:03,710
screeching varied right splittin we can

00:57:01,070 --> 00:57:06,650
use Cashin some things as memcache or

00:57:03,710 --> 00:57:09,530
even my school we can pre generate the

00:57:06,650 --> 00:57:11,600
data right with summary tables which I

00:57:09,530 --> 00:57:13,590
would consider also something like

00:57:11,600 --> 00:57:16,140
Cashin we can also you

00:57:13,590 --> 00:57:17,670
use their new solutions like your

00:57:16,140 --> 00:57:21,750
contacts review cluster right there we

00:57:17,670 --> 00:57:26,370
can edit data from any of the load-in up

00:57:21,750 --> 00:57:29,460
the nose scaling right there are

00:57:26,370 --> 00:57:31,470
essentially two big approaches here for

00:57:29,460 --> 00:57:34,100
that in a my squirrel wall right they

00:57:31,470 --> 00:57:36,450
even use the functional partitioning and

00:57:34,100 --> 00:57:38,400
what that means is we'll take a

00:57:36,450 --> 00:57:41,780
different parts of the application and

00:57:38,400 --> 00:57:45,960
put them on a different different

00:57:41,780 --> 00:57:49,440
systems all right so for example I can

00:57:45,960 --> 00:57:52,410
have a peer corner my school performance

00:57:49,440 --> 00:57:55,170
blog and forums which are kind of maybe

00:57:52,410 --> 00:57:56,790
part of a big the corner experience but

00:57:55,170 --> 00:57:59,730
I don't really have to have both

00:57:56,790 --> 00:58:02,300
databases on the same database servers

00:57:59,730 --> 00:58:06,000
and if the load would be that high I

00:58:02,300 --> 00:58:09,540
could potentially move them to two

00:58:06,000 --> 00:58:11,940
different ones right and many

00:58:09,540 --> 00:58:15,320
applications have something along those

00:58:11,940 --> 00:58:17,850
lines which can be easily separated and

00:58:15,320 --> 00:58:21,030
often provide a substantial performance

00:58:17,850 --> 00:58:23,730
or improvements as well as security

00:58:21,030 --> 00:58:27,330
improvements ease of manageability so in

00:58:23,730 --> 00:58:29,130
good stuff and now one is chardon and

00:58:27,330 --> 00:58:31,380
that is essentially horizontal

00:58:29,130 --> 00:58:33,150
partitioning right across across many

00:58:31,380 --> 00:58:39,330
service based on user account or

00:58:33,150 --> 00:58:41,670
whatever it is now we also spoke about

00:58:39,330 --> 00:58:44,880
the scale in the data right and scaling

00:58:41,670 --> 00:58:50,790
the data typically done with charging

00:58:44,880 --> 00:58:53,960
right if we just can stack more data in

00:58:50,790 --> 00:58:58,020
in my school server but I would a

00:58:53,960 --> 00:59:03,560
wonderful is how much data do you store

00:58:58,020 --> 00:59:03,560
in my school instance those days max

00:59:05,240 --> 00:59:09,630
anybody store in more than hundred

00:59:07,290 --> 00:59:15,210
gigabytes per single my SQL instance

00:59:09,630 --> 00:59:17,400
more than one terabyte more than 10 yeah

00:59:15,210 --> 00:59:19,920
well I can tell what I have seen people

00:59:17,400 --> 00:59:21,870
storing as much as a 40 terabytes of

00:59:19,920 --> 00:59:24,030
stuff and single my scope for instance

00:59:21,870 --> 00:59:27,210
but it is not the happiest place to be

00:59:24,030 --> 00:59:28,619
right it's a it's pretty pain

00:59:27,210 --> 00:59:32,210
all right to deal with so 40 terabytes

00:59:28,619 --> 00:59:35,310
of stuff in a single my score instance i

00:59:32,210 --> 00:59:38,820
would say what this line was moving

00:59:35,310 --> 00:59:42,810
right if you spoil speak about the ten

00:59:38,820 --> 00:59:49,369
years ago 30 seconds come on i haven't

00:59:42,810 --> 00:59:54,000
in 45 minutes okay let's check the watch

00:59:49,369 --> 01:00:00,960
Wow more those guys my watch is run okay

00:59:54,000 --> 01:00:03,180
sorry about that i'll spit up ok it's

01:00:00,960 --> 01:00:07,859
completely put me out of balance how did

01:00:03,180 --> 01:00:11,040
I hmm me set my voice anyway so this

01:00:07,859 --> 01:00:13,080
boundary was moving approval from here

01:00:11,040 --> 01:00:16,980
so I can maybe 10 years ago would put it

01:00:13,080 --> 01:00:19,770
in about hundred gigabytes right now

01:00:16,980 --> 01:00:22,380
it's getting closer to 10 terabytes in

01:00:19,770 --> 01:00:24,180
the best-case scenario and I wanted to

01:00:22,380 --> 01:00:27,000
explain why what has changed in the

01:00:24,180 --> 01:00:29,790
MySQL recently right didn't this much

01:00:27,000 --> 01:00:31,230
more data well we have an online schema

01:00:29,790 --> 01:00:34,440
change right so we don't have to really

01:00:31,230 --> 01:00:36,480
take it down time to manage our database

01:00:34,440 --> 01:00:39,930
and loss it anymore it's either online

01:00:36,480 --> 01:00:44,339
schema change in mysql 56 plus or the

01:00:39,930 --> 01:00:46,349
gating PT online now schema change right

01:00:44,339 --> 01:00:50,010
for earlier versions we have fast

01:00:46,349 --> 01:00:51,540
backups it can be either binary Barkov

01:00:50,010 --> 01:00:54,240
supercon extra back of my skull

01:00:51,540 --> 01:00:56,369
enterprise backup or file system support

01:00:54,240 --> 01:00:58,770
a lot of volume managers son wherever

01:00:56,369 --> 01:01:01,800
can allow you to take it very fast back

01:00:58,770 --> 01:01:03,930
at those days we have fast network 10

01:01:01,800 --> 01:01:06,000
gigabits are getting pretty affordable

01:01:03,930 --> 01:01:08,760
right or at least you have a service

01:01:06,000 --> 01:01:11,070
which have you know for network ports or

01:01:08,760 --> 01:01:13,740
so which we can try to give and get

01:01:11,070 --> 01:01:16,050
maybe four gigabytes of band or so we

01:01:13,740 --> 01:01:21,960
have high performance storage if SSDs

01:01:16,050 --> 01:01:25,109
right they can read a 10 terabytes right

01:01:21,960 --> 01:01:28,890
to write pretty quickly and we also have

01:01:25,109 --> 01:01:32,300
a very compression there is an energy be

01:01:28,890 --> 01:01:36,300
compression which can give you about a

01:01:32,300 --> 01:01:37,770
2x or you can use taco DB i think is an

01:01:36,300 --> 01:01:40,770
amazing technology in terms of

01:01:37,770 --> 01:01:43,380
compression where you can get our

01:01:40,770 --> 01:01:46,740
the 10x right that's what we really seen

01:01:43,380 --> 01:01:49,440
in in production for your data so as a

01:01:46,740 --> 01:01:51,630
summary I think it's wonderful to my

01:01:49,440 --> 01:01:57,600
skills mature and various solutions are

01:01:51,630 --> 01:01:59,400
available for many projects and if

01:01:57,600 --> 01:02:02,340
you're just making a few right choices

01:01:59,400 --> 01:02:06,450
in a very beginning you will they are on

01:02:02,340 --> 01:02:08,550
the good path because both the hardware

01:02:06,450 --> 01:02:12,450
and software I want advantage allow us

01:02:08,550 --> 01:02:15,530
now to achieve a lot with very simple

01:02:12,450 --> 01:02:18,150
architectures now if you guys want to

01:02:15,530 --> 01:02:21,480
learn more right about the MySQL they

01:02:18,150 --> 01:02:23,430
have an amazing amount of stuff in upper

01:02:21,480 --> 01:02:26,340
corner technical webinars which are

01:02:23,430 --> 01:02:31,410
available online the schedule for next

01:02:26,340 --> 01:02:34,920
month is haces right if and there are

01:02:31,410 --> 01:02:38,580
also recording back so I think two years

01:02:34,920 --> 01:02:42,480
we have at least like tens of recorded

01:02:38,580 --> 01:02:55,470
webinars and that's it sorry for running

01:02:42,480 --> 01:02:57,240
out of time won't happen again your

01:02:55,470 --> 01:02:58,770
customers rely on your website or

01:02:57,240 --> 01:03:01,140
application if it's slower

01:02:58,770 --> 01:03:04,050
non-responsive it infuriates your users

01:03:01,140 --> 01:03:05,910
and costs you money keeping your

01:03:04,050 --> 01:03:09,400
business critical systems humming along

01:03:05,910 --> 01:03:11,710
requires insight into what they're doing

01:03:09,400 --> 01:03:13,690
your system metrics tells stories

01:03:11,710 --> 01:03:15,700
stories that can reveal performance

01:03:13,690 --> 01:03:18,010
bottlenecks resource limitations and

01:03:15,700 --> 01:03:19,570
other problems but how do you keep an

01:03:18,010 --> 01:03:22,240
eye on all of your systems performance

01:03:19,570 --> 01:03:25,240
metrics in real-time and record this

01:03:22,240 --> 01:03:27,010
data for later analysis enter longview

01:03:25,240 --> 01:03:29,050
the new way to see what's really going

01:03:27,010 --> 01:03:31,180
on under the hood the long view

01:03:29,050 --> 01:03:33,250
dashboard lets you visualize the status

01:03:31,180 --> 01:03:35,710
of all your systems providing you with a

01:03:33,250 --> 01:03:39,100
bird's-eye view of your entire fleet you

01:03:35,710 --> 01:03:41,680
can sort by cpu memory swap processes

01:03:39,100 --> 01:03:43,420
load and network usage click a specific

01:03:41,680 --> 01:03:45,820
system to access its individual

01:03:43,420 --> 01:03:48,330
dashboard then click and drag to zoom in

01:03:45,820 --> 01:03:50,740
on chokepoints and get more detail

01:03:48,330 --> 01:03:52,420
comprehensive network data including

01:03:50,740 --> 01:03:54,730
inbound and outbound traffic is

01:03:52,420 --> 01:03:56,290
available on the network tab and disk

01:03:54,730 --> 01:03:58,210
rights and free space on the disk

01:03:56,290 --> 01:04:01,060
stabbed while the process Explorer

01:03:58,210 --> 01:04:03,580
displays usage statistics for individual

01:04:01,060 --> 01:04:05,770
processes the system info tab shows

01:04:03,580 --> 01:04:08,020
listening services active connections

01:04:05,770 --> 01:04:10,150
and available updates adding long view

01:04:08,020 --> 01:04:11,830
to a system is easy just click the

01:04:10,150 --> 01:04:13,990
button copy the one line installation

01:04:11,830 --> 01:04:16,420
command then run the command on your

01:04:13,990 --> 01:04:18,130
linux system to complete the process the

01:04:16,420 --> 01:04:20,320
agent will begin collecting data and

01:04:18,130 --> 01:04:22,160
sending it to longview then the graphs

01:04:20,320 --> 01:04:24,710
start rolling

01:04:22,160 --> 01:04:27,079
used longview to gain visibility into

01:04:24,710 --> 01:04:30,819
your servers so when your website or app

01:04:27,079 --> 01:04:30,819

YouTube URL: https://www.youtube.com/watch?v=_aMFEY_81mM


