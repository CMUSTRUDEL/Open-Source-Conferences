Title: 2014 SouthEast LinuxFest - Tim Fowler -  Docker: Containerize All The Things
Publication date: 2015-05-17
Playlist: 2014 SouthEast LinuxFest
Description: 
	2014 SouthEast LinuxFest
Tim Fowler
Docker: Containerize All The Things
Captions: 
	00:00:00,000 --> 00:00:05,339
the following presentation was recorded

00:00:02,490 --> 00:00:08,250
the 2014 southeast linux fest in

00:00:05,339 --> 00:00:11,070
charlotte north carolina it is licensed

00:00:08,250 --> 00:00:15,150
under a creative commons license for

00:00:11,070 --> 00:00:18,330
more information visit www.fcn expense

00:00:15,150 --> 00:00:20,310
org the southeast linux fest would like

00:00:18,330 --> 00:00:22,769
to thank the following diamond sponsors

00:00:20,310 --> 00:00:26,279
in 2014 for helping make these videos

00:00:22,769 --> 00:00:27,900
possible so this is a Tim Fowler he's a

00:00:26,279 --> 00:00:30,689
network engineer and a community

00:00:27,900 --> 00:00:32,940
evangelist for a sub biotechnology that

00:00:30,689 --> 00:00:34,890
I pronounced that right all right all

00:00:32,940 --> 00:00:36,690
right I never pronounce things right

00:00:34,890 --> 00:00:38,850
anyhow he's here to talk about docker

00:00:36,690 --> 00:00:40,920
which is way to contain her eyes a lot

00:00:38,850 --> 00:00:43,920
of stuff and so I'm going to leave it

00:00:40,920 --> 00:00:50,820
with him take it away Tim all right

00:00:43,920 --> 00:00:53,160
let's get rocking and rolling so we'll

00:00:50,820 --> 00:00:54,510
just do this for a second um all right

00:00:53,160 --> 00:00:57,149
so what we're going to do is I'm

00:00:54,510 --> 00:01:01,320
actually start with a dot a demo real

00:00:57,149 --> 00:01:05,519
quick and can y'all hear me everybody

00:01:01,320 --> 00:01:06,750
good all right cool all right so if you

00:01:05,519 --> 00:01:08,610
can you everybody see the screen pretty

00:01:06,750 --> 00:01:10,799
good all right so what we're looking at

00:01:08,610 --> 00:01:12,900
here is what's called a docker file this

00:01:10,799 --> 00:01:14,970
is essentially like a make file if you

00:01:12,900 --> 00:01:16,799
will and so what we do is actually we're

00:01:14,970 --> 00:01:18,540
going to compile this container real

00:01:16,799 --> 00:01:20,790
quickly and then i can actually launch

00:01:18,540 --> 00:01:23,009
my presentation because it's inside this

00:01:20,790 --> 00:01:25,520
container because that was a really

00:01:23,009 --> 00:01:25,520
smart idea

00:01:29,350 --> 00:01:32,070
nope

00:01:33,200 --> 00:01:35,289
I

00:01:36,950 --> 00:01:44,479
alright so what we can do nope that's

00:01:40,939 --> 00:01:46,369
not going to work I'm going to talk

00:01:44,479 --> 00:01:48,130
really really loud for a few minutes

00:01:46,369 --> 00:01:49,850
until we get into might fix because

00:01:48,130 --> 00:01:52,899
that's the only way I'm going to get it

00:01:49,850 --> 00:01:52,899
alright so we got to build

00:01:56,720 --> 00:02:03,830
kick alright so here's the thing dr. one

00:02:01,880 --> 00:02:07,870
point ojas was released last week and

00:02:03,830 --> 00:02:07,870
it's no longer doctor its dr. Dyer

00:02:08,500 --> 00:02:11,260
so what we're doing is we're going

00:02:10,240 --> 00:02:13,720
through and actually going to build this

00:02:11,260 --> 00:02:15,930
container out real quick it's pretty

00:02:13,720 --> 00:02:15,930
fast

00:02:15,950 --> 00:02:18,670
alright

00:02:19,210 --> 00:02:24,520
so

00:02:21,470 --> 00:02:24,520
just doing some at

00:02:33,010 --> 00:02:37,390
alright can you hear me alright cool so

00:02:36,010 --> 00:02:40,560
we're gonna let this build for just a

00:02:37,390 --> 00:02:43,329
couple hopefully a few more seconds and

00:02:40,560 --> 00:02:44,950
then we'll launch it and we'll actually

00:02:43,329 --> 00:02:49,079
jump into what really doctor is all

00:02:44,950 --> 00:02:52,530
about which is actually why I'm here

00:02:49,079 --> 00:03:01,000
alright so we're going to do dr dot io r

00:02:52,530 --> 00:03:02,409
on dash D dash p 8000 8000 south I there

00:03:01,000 --> 00:03:04,989
will be a test on this command at the

00:03:02,409 --> 00:03:08,609
end of the presentation you will not be

00:03:04,989 --> 00:03:11,609
allowed to leave until you successfully

00:03:08,609 --> 00:03:11,609
sorry

00:03:13,240 --> 00:03:19,480
alright so if you look down here I got

00:03:16,090 --> 00:03:22,090
this really really long essentially it's

00:03:19,480 --> 00:03:25,330
a hash what this is is this is basically

00:03:22,090 --> 00:03:28,110
the unique ID for my container so let's

00:03:25,330 --> 00:03:28,110
exit out of this

00:03:29,020 --> 00:03:36,810
and open up a browser and now we'll

00:03:30,940 --> 00:03:36,810
start the actual presentation hopefully

00:03:42,180 --> 00:03:44,840
tomorrow

00:03:46,010 --> 00:03:49,870
I knew this was going to bite me in the

00:03:47,720 --> 00:03:49,870
butt

00:03:51,860 --> 00:03:58,740
because because I screwed my graphics up

00:03:54,660 --> 00:04:01,610
on my actual laptop so yeah this seems

00:03:58,740 --> 00:04:01,610
like a really good fix

00:04:09,860 --> 00:04:12,790
yeah probably not

00:04:13,360 --> 00:04:28,150
I don't even know what I just went to so

00:04:15,250 --> 00:04:31,380
that's not good yeah what is it doing

00:04:28,150 --> 00:04:31,380
this is not going well

00:04:40,260 --> 00:04:50,470
actually I think this one's going to be

00:04:42,040 --> 00:04:55,060
one dot one yeah that's dr. y'all have a

00:04:50,470 --> 00:04:59,380
good night as i am done this is already

00:04:55,060 --> 00:05:00,880
gone really really badly so at least we

00:04:59,380 --> 00:05:06,310
can have fun in y'all can laugh at my

00:05:00,880 --> 00:05:08,350
expense I'll cry I'll cry later so okay

00:05:06,310 --> 00:05:10,570
so now the actual meat of the

00:05:08,350 --> 00:05:14,160
presentation docker container izing the

00:05:10,570 --> 00:05:19,030
revolution and it actually says dr. logo

00:05:14,160 --> 00:05:21,340
because I broke the Internet Who am I I

00:05:19,030 --> 00:05:23,680
am Tim Fowler networking our project

00:05:21,340 --> 00:05:26,680
engineer I was a network now in project

00:05:23,680 --> 00:05:28,270
engineers biotechnology we do open

00:05:26,680 --> 00:05:30,640
source routing platforms and things like

00:05:28,270 --> 00:05:32,380
that you can find me on twitter at rubik

00:05:30,640 --> 00:05:35,320
please no hate comments after the last

00:05:32,380 --> 00:05:37,990
five minutes I'm a little bit about me

00:05:35,320 --> 00:05:41,170
I'm Christian I do frequent least speak

00:05:37,990 --> 00:05:43,240
at different events both in kind of the

00:05:41,170 --> 00:05:45,520
enterprise environment as well as

00:05:43,240 --> 00:05:48,600
InfoSec security do a lot of wireless

00:05:45,520 --> 00:05:51,860
talks um if you see me in starbucks

00:05:48,600 --> 00:05:55,099
smiling run

00:05:51,860 --> 00:05:56,689
I love Wi-Fi packets open-source

00:05:55,099 --> 00:06:00,289
enthusiasts and i'm founder of dr.

00:05:56,689 --> 00:06:03,319
greenville so let's quickly what is

00:06:00,289 --> 00:06:05,800
doctor doctor is an open source project

00:06:03,319 --> 00:06:07,580
to easily create lightweight portable

00:06:05,800 --> 00:06:12,080
self-sufficient containers from any

00:06:07,580 --> 00:06:14,030
application everybody with me so the

00:06:12,080 --> 00:06:16,639
same container that a developer builds

00:06:14,030 --> 00:06:18,650
in and test in on a laptop can be

00:06:16,639 --> 00:06:20,599
deployed into production regardless of

00:06:18,650 --> 00:06:22,610
whether it's a vm their metal OpenStack

00:06:20,599 --> 00:06:25,909
public clouds personal class doesn't

00:06:22,610 --> 00:06:28,159
matter whatever we develop in is the

00:06:25,909 --> 00:06:31,669
same thing that we're pushing out into

00:06:28,159 --> 00:06:33,050
production so a little bit about doctor

00:06:31,669 --> 00:06:35,449
doctor was created by a company called

00:06:33,050 --> 00:06:38,300
cloud incorporated that later changed

00:06:35,449 --> 00:06:42,439
her name to docker it was a written him

00:06:38,300 --> 00:06:47,270
go any go fans here all right you know

00:06:42,439 --> 00:06:49,610
we're weird no no the current version is

00:06:47,270 --> 00:06:52,490
one point 0 just released last Monday

00:06:49,610 --> 00:06:53,990
this is the first production release so

00:06:52,490 --> 00:06:55,789
they're finally like hey everybody

00:06:53,990 --> 00:06:57,500
that's been using dr. in production for

00:06:55,789 --> 00:07:00,560
the last eight months you can now use it

00:06:57,500 --> 00:07:03,650
in production they introduce a lot of

00:07:00,560 --> 00:07:07,729
really good fixes so currently there's

00:07:03,650 --> 00:07:10,370
about 426 contributors on github there's

00:07:07,729 --> 00:07:12,770
over I think now there's over 8,500

00:07:10,370 --> 00:07:15,229
commits and about sixty percent of those

00:07:12,770 --> 00:07:16,940
now are outside the company which is

00:07:15,229 --> 00:07:19,669
really really awesome the community

00:07:16,940 --> 00:07:21,050
behind dr. is really huge and they're

00:07:19,669 --> 00:07:23,509
really passionate and they're just

00:07:21,050 --> 00:07:24,889
moving this thing forward a lot so it's

00:07:23,509 --> 00:07:27,740
not just the company it's actually the

00:07:24,889 --> 00:07:29,960
Kamini there's over 11,000 github stars

00:07:27,740 --> 00:07:32,229
forked over two thousand times for

00:07:29,960 --> 00:07:34,699
applications and currently there's over

00:07:32,229 --> 00:07:36,969
14,000 applications today built off

00:07:34,699 --> 00:07:39,460
docker these are like standalone

00:07:36,969 --> 00:07:41,710
applications and these are also entire

00:07:39,460 --> 00:07:43,539
built a round docker and so it's a

00:07:41,710 --> 00:07:45,009
really really fast developing community

00:07:43,539 --> 00:07:49,960
and it's becoming really really thorough

00:07:45,009 --> 00:07:51,729
and robust community so if doctor is

00:07:49,960 --> 00:07:53,740
something cool there has to be a problem

00:07:51,729 --> 00:07:55,150
like this new technology it's obviously

00:07:53,740 --> 00:07:57,550
going to have to solve some kind of

00:07:55,150 --> 00:08:03,210
dilemma and so what specifically is the

00:07:57,550 --> 00:08:03,210
dilemma the doctor solves no image

00:08:03,930 --> 00:08:10,800
awesome this is not going well

00:08:15,619 --> 00:08:18,619
army

00:08:18,659 --> 00:08:28,740
yeah let me let me see if I'm on I'm on

00:08:24,639 --> 00:08:28,740
a Chromebook I don't have Ethernet

00:08:30,100 --> 00:08:38,830
I'm own Wi-Fi you're right because

00:08:36,900 --> 00:08:47,260
somebody's that kinda would put a catch

00:08:38,830 --> 00:08:48,910
portal on this thing so this rough

00:08:47,260 --> 00:08:50,860
presentation as far as brought to you by

00:08:48,910 --> 00:08:52,150
global vision no I'm just kidding

00:08:50,860 --> 00:08:54,670
they're they're really awesome company

00:08:52,150 --> 00:08:58,470
and I should have said that so let's

00:08:54,670 --> 00:08:58,470
actually get a legitimate

00:09:02,460 --> 00:09:05,390
probably

00:09:09,070 --> 00:09:11,970
connected

00:09:24,620 --> 00:09:29,839
it's just being slow to load

00:09:26,870 --> 00:09:32,330
I do apologize guys okay so here's the

00:09:29,839 --> 00:09:33,950
problem okay if you look on the top half

00:09:32,330 --> 00:09:35,660
we have all these different services

00:09:33,950 --> 00:09:38,060
into these things we've got static

00:09:35,660 --> 00:09:41,960
websites we've got user databases Q's

00:09:38,060 --> 00:09:45,589
analytic databases API endpoints web

00:09:41,960 --> 00:09:47,600
front-ends all this stuff all this code

00:09:45,589 --> 00:09:49,250
we've got stuff in job well we've got

00:09:47,600 --> 00:09:52,070
stuff in Python we've got something Ruby

00:09:49,250 --> 00:09:54,529
and JavaScript and HTML and all this

00:09:52,070 --> 00:09:56,510
other stuff and we've got to deploy it

00:09:54,529 --> 00:09:58,490
on the bottom half so we've got

00:09:56,510 --> 00:10:00,950
development VMs we've got QA servers

00:09:58,490 --> 00:10:02,900
production clusters contributor laptops

00:10:00,950 --> 00:10:05,240
and stuff so the real problem is how do

00:10:02,900 --> 00:10:08,810
we make all that stuff on the top work

00:10:05,240 --> 00:10:10,460
on everything on the bottom and it's

00:10:08,810 --> 00:10:13,760
it's not it's not exactly an easy

00:10:10,460 --> 00:10:16,880
solution to this problem but it's not a

00:10:13,760 --> 00:10:19,100
unique problem just that we have in our

00:10:16,880 --> 00:10:20,900
industry so what happens you have this

00:10:19,100 --> 00:10:22,370
matrix from Hell which is a really cool

00:10:20,900 --> 00:10:24,110
thing to dr. kind of coin and

00:10:22,370 --> 00:10:26,540
interesting it's like how do you do this

00:10:24,110 --> 00:10:29,410
how do i get the static website to

00:10:26,540 --> 00:10:32,360
deploy in a unified manner on

00:10:29,410 --> 00:10:33,890
development and in production like these

00:10:32,360 --> 00:10:37,190
are things that we actually battle with

00:10:33,890 --> 00:10:39,440
on a on a daily basis especially if

00:10:37,190 --> 00:10:41,630
you're in DevOps like it's a nightmare

00:10:39,440 --> 00:10:45,740
it's just an absolute nightmare to go

00:10:41,630 --> 00:10:47,089
Willie well it worked on my machine it

00:10:45,740 --> 00:10:48,650
would then work on mine so it's useless

00:10:47,089 --> 00:10:50,959
and so this is really what the problem

00:10:48,650 --> 00:10:52,940
that word doc are trying to solve but as

00:10:50,959 --> 00:10:55,610
I said dr. was this is not a unique

00:10:52,940 --> 00:10:59,660
problem to our industry this problem is

00:10:55,610 --> 00:11:00,620
actually solved about 50 years ago so

00:10:59,660 --> 00:11:04,970
we're gonna look at another interest

00:11:00,620 --> 00:11:08,029
industry cargo transport pre-1960 was a

00:11:04,970 --> 00:11:11,000
nightmare so you have a let's say

00:11:08,029 --> 00:11:12,770
anybody like coffee coffee fans most of

00:11:11,000 --> 00:11:13,440
us probably because we we live on

00:11:12,770 --> 00:11:16,260
computer so

00:11:13,440 --> 00:11:18,840
have to so if you're if you're a coffee

00:11:16,260 --> 00:11:21,900
plantation owner prior to nineteen you

00:11:18,840 --> 00:11:23,910
know 58 in South America and you want to

00:11:21,900 --> 00:11:25,620
ship coffee to charlotte north carolina

00:11:23,910 --> 00:11:27,480
here's how you did it well you harvest

00:11:25,620 --> 00:11:29,850
the coffee you put it in bag put bags

00:11:27,480 --> 00:11:31,290
into a truck the truck goes to a train

00:11:29,850 --> 00:11:33,540
the train that takes it to a port the

00:11:31,290 --> 00:11:35,760
port then floated on ship the ship goes

00:11:33,540 --> 00:11:37,110
to a port then you reversal process and

00:11:35,760 --> 00:11:40,050
it's finally delivered to the southeast

00:11:37,110 --> 00:11:42,210
linux fest 2014 which if you paid

00:11:40,050 --> 00:11:46,680
attention that was like a 68 year trip

00:11:42,210 --> 00:11:49,290
oh it's not very fresh so what in the

00:11:46,680 --> 00:11:51,690
problem is is the plantation owner the

00:11:49,290 --> 00:11:54,150
person selling is coffee has to worry

00:11:51,690 --> 00:11:56,100
about every single of those

00:11:54,150 --> 00:11:57,990
transportation modes as far what is his

00:11:56,100 --> 00:12:01,560
product going to be like because coffee

00:11:57,990 --> 00:12:04,770
is impact and you don't know what coffee

00:12:01,560 --> 00:12:06,480
is being shipped next to it may be

00:12:04,770 --> 00:12:08,580
shipped to a baby grant next to a baby

00:12:06,480 --> 00:12:10,290
grand piano that falls over in the

00:12:08,580 --> 00:12:13,860
middle of transit across the ocean and

00:12:10,290 --> 00:12:16,020
crushes the beans so the buyer doesn't

00:12:13,860 --> 00:12:17,880
want to pay for crush beans and the

00:12:16,020 --> 00:12:19,710
sellers add up a bunch of money and so

00:12:17,880 --> 00:12:22,860
that the the problem is that you have to

00:12:19,710 --> 00:12:25,140
worry about every connection every

00:12:22,860 --> 00:12:27,120
segment of the chain from beginning to

00:12:25,140 --> 00:12:28,860
end and that's mark in the traditional

00:12:27,120 --> 00:12:30,390
sense of development all the way to

00:12:28,860 --> 00:12:32,910
deployment that's what we have to worry

00:12:30,390 --> 00:12:35,040
about we have to worry about the the

00:12:32,910 --> 00:12:37,320
distribution in the transportation and

00:12:35,040 --> 00:12:42,030
how it runs in each of these

00:12:37,320 --> 00:12:43,650
environments so at around 1958 and you

00:12:42,030 --> 00:12:45,330
can see we had this is the exact thing

00:12:43,650 --> 00:12:48,060
problem how do we transport all these

00:12:45,330 --> 00:12:50,700
different goods in the same seamless

00:12:48,060 --> 00:12:52,620
manner without putting them all at risk

00:12:50,700 --> 00:12:54,450
so they came up with this really cool

00:12:52,620 --> 00:12:57,870
idea

00:12:54,450 --> 00:13:00,510
to solve their matrix of hail called the

00:12:57,870 --> 00:13:03,060
intermodal shipping container sometime

00:13:00,510 --> 00:13:04,350
around 1958 they came up with a standard

00:13:03,060 --> 00:13:07,350
of three different sizes shipping

00:13:04,350 --> 00:13:11,790
containers and what it basically allowed

00:13:07,350 --> 00:13:15,780
is for as a as a proprietary of some

00:13:11,790 --> 00:13:19,590
product I can pack that container with

00:13:15,780 --> 00:13:21,540
it to the brim with my product and then

00:13:19,590 --> 00:13:23,130
a truck can come pick it up and take it

00:13:21,540 --> 00:13:25,140
to the train the train takes it to the

00:13:23,130 --> 00:13:27,330
port port and put loads it onto the

00:13:25,140 --> 00:13:28,800
ship takes that same process but guess

00:13:27,330 --> 00:13:31,290
what I don't have to worry what's packed

00:13:28,800 --> 00:13:34,650
next to it because I'm in a protected

00:13:31,290 --> 00:13:37,890
environment my product is safe so if

00:13:34,650 --> 00:13:41,310
I've got coffee and somebody else is

00:13:37,890 --> 00:13:43,890
shipping a pack of wolves which is a I

00:13:41,310 --> 00:13:46,200
don't care it doesn't matter you know

00:13:43,890 --> 00:13:47,310
the other thing that it did for the

00:13:46,200 --> 00:13:49,800
shipping industry not only does it

00:13:47,310 --> 00:13:52,080
protect you know kind of the end points

00:13:49,800 --> 00:13:53,730
of both the consumer and the provider

00:13:52,080 --> 00:13:55,080
but it did something really

00:13:53,730 --> 00:13:57,710
revolutionary for the actual

00:13:55,080 --> 00:14:01,670
transportation our transportation system

00:13:57,710 --> 00:14:04,670
it made it so much more efficient

00:14:01,670 --> 00:14:07,010
they started making boats this wide by

00:14:04,670 --> 00:14:08,840
this wide because they knew exactly how

00:14:07,010 --> 00:14:10,460
many containers they could put on it the

00:14:08,840 --> 00:14:12,620
same things with trains same thing with

00:14:10,460 --> 00:14:14,510
trucks you could actually plan and

00:14:12,620 --> 00:14:16,730
officially coordinate the transportation

00:14:14,510 --> 00:14:18,140
of goods because you had a standard unit

00:14:16,730 --> 00:14:20,450
of measurement that you were operating

00:14:18,140 --> 00:14:22,430
in it doesn't matter what's in it as

00:14:20,450 --> 00:14:24,890
long as it fits in there I'm going to

00:14:22,430 --> 00:14:26,960
ship it well I think UPS had that if it

00:14:24,890 --> 00:14:29,180
fits it ships or something oh yeah

00:14:26,960 --> 00:14:31,250
that's exactly what what the industry

00:14:29,180 --> 00:14:34,580
did and so that's the approach that

00:14:31,250 --> 00:14:36,920
doctor has taken so you put everything

00:14:34,580 --> 00:14:39,710
into these containers and then you ship

00:14:36,920 --> 00:14:42,800
them doesn't matter if I rail train our

00:14:39,710 --> 00:14:45,020
railing train is the same thing ship it

00:14:42,800 --> 00:14:47,180
doesn't matter it just works I can put

00:14:45,020 --> 00:14:48,890
my product in I don't have to worry that

00:14:47,180 --> 00:14:52,580
you know Jim's over here trippin

00:14:48,890 --> 00:14:55,370
Wolverines it just doesn't matter so

00:14:52,580 --> 00:14:58,850
what dr. ultimately is it's a container

00:14:55,370 --> 00:15:01,550
for shipping code so by putting all of

00:14:58,850 --> 00:15:03,800
these elements these top elements of

00:15:01,550 --> 00:15:07,750
static websites db's all this stuff into

00:15:03,800 --> 00:15:10,940
this container so I've got a uniform

00:15:07,750 --> 00:15:15,520
standardized prot container that I can

00:15:10,940 --> 00:15:18,920
now put on a development vm a QA server

00:15:15,520 --> 00:15:21,500
public cloud production cluster doesn't

00:15:18,920 --> 00:15:24,770
matter I can take the same container and

00:15:21,500 --> 00:15:27,680
ship it so if I develop in a container

00:15:24,770 --> 00:15:30,490
and everything works out everything test

00:15:27,680 --> 00:15:32,500
good i'm sending it

00:15:30,490 --> 00:15:35,100
and when they deploy when when my

00:15:32,500 --> 00:15:38,560
operations team deploys a container in

00:15:35,100 --> 00:15:41,709
production it's the exact same as it is

00:15:38,560 --> 00:15:45,010
when I very first started it highly

00:15:41,709 --> 00:15:46,870
portable highly efficient and easily

00:15:45,010 --> 00:15:51,399
controlled because you know everything

00:15:46,870 --> 00:15:53,230
self-contained so in this pretend this

00:15:51,399 --> 00:15:54,580
production code environment that we you

00:15:53,230 --> 00:15:56,170
know we're always we especially with

00:15:54,580 --> 00:15:58,660
like continuous integration and stuff

00:15:56,170 --> 00:16:01,649
we're always pushing code we've got to

00:15:58,660 --> 00:16:05,110
have a methodology that allows us to

00:16:01,649 --> 00:16:06,550
quickly and efficiently pump our code

00:16:05,110 --> 00:16:08,529
from development all the way into

00:16:06,550 --> 00:16:10,570
production continuously and stuff

00:16:08,529 --> 00:16:12,850
without worrying about what's going to

00:16:10,570 --> 00:16:14,320
happen all these it does anybody tried

00:16:12,850 --> 00:16:15,670
running multiple applications on the

00:16:14,320 --> 00:16:20,740
same server and then have dependency

00:16:15,670 --> 00:16:22,120
conflicts happens all the time well if I

00:16:20,740 --> 00:16:24,459
can wrap all the dependencies in a

00:16:22,120 --> 00:16:26,410
container now it can have application

00:16:24,459 --> 00:16:28,750
152 application three application for

00:16:26,410 --> 00:16:31,029
all was a different set of dependencies

00:16:28,750 --> 00:16:34,750
and they're happy because they're all

00:16:31,029 --> 00:16:40,850
within their container so why developers

00:16:34,750 --> 00:16:43,130
care built once finally run anywhere

00:16:40,850 --> 00:16:45,019
that alone is really really awesome

00:16:43,130 --> 00:16:47,779
knowing that I can only have to build

00:16:45,019 --> 00:16:49,759
this thing one time and I can run it

00:16:47,779 --> 00:16:51,949
anywhere that this infrastructure is

00:16:49,759 --> 00:16:53,899
supported which doctor is basically

00:16:51,949 --> 00:16:57,440
supported in every minute major linux

00:16:53,899 --> 00:17:01,040
distribution now the boom to has it in

00:16:57,440 --> 00:17:04,130
the native 1404 repose Debbie ins got it

00:17:01,040 --> 00:17:06,770
a red hat she's got it fodor's got it

00:17:04,130 --> 00:17:09,230
basically most of the major ones you can

00:17:06,770 --> 00:17:11,030
get it it's really really easy in fact

00:17:09,230 --> 00:17:14,360
you can run dr on a raspberry pi if you

00:17:11,030 --> 00:17:17,360
want to it's a little walking but you

00:17:14,360 --> 00:17:20,480
can do it um but why you want to i'm not

00:17:17,360 --> 00:17:22,069
sure so you have a clean safe hygienic

00:17:20,480 --> 00:17:25,339
and portable runtime environment for

00:17:22,069 --> 00:17:27,020
your app I don't worry about what this

00:17:25,339 --> 00:17:28,429
other application is doing what kind of

00:17:27,020 --> 00:17:30,500
dependencies what kind of service is

00:17:28,429 --> 00:17:33,440
running I just don't worry about I want

00:17:30,500 --> 00:17:36,260
to build what I need to build and that's

00:17:33,440 --> 00:17:38,179
it I'm shipping it because I've wrapped

00:17:36,260 --> 00:17:41,120
everything in this nice you know nice

00:17:38,179 --> 00:17:43,760
bow and send it off to dev ops and

00:17:41,120 --> 00:17:44,780
they're like thank you probably you

00:17:43,760 --> 00:17:46,700
don't have to worry about missing

00:17:44,780 --> 00:17:49,130
dependencies packages or other pain

00:17:46,700 --> 00:17:51,490
points you got an application deployed

00:17:49,130 --> 00:17:54,119
and also in a bunch of update strong

00:17:51,490 --> 00:17:57,269
break your application

00:17:54,119 --> 00:18:00,599
anybody been there I definitely have

00:17:57,269 --> 00:18:02,579
been there this prevents that because in

00:18:00,599 --> 00:18:04,829
a container you basically said the

00:18:02,579 --> 00:18:06,719
environment so it's imagine setting all

00:18:04,829 --> 00:18:08,489
these environmental variables it's

00:18:06,719 --> 00:18:11,789
locked in there so unless you actually

00:18:08,489 --> 00:18:13,619
go and do the upgrade yourself that

00:18:11,789 --> 00:18:16,349
container the application inside that

00:18:13,619 --> 00:18:18,539
container will continue to run as the

00:18:16,349 --> 00:18:19,739
first day you developed in so you don't

00:18:18,539 --> 00:18:21,779
have to worry about all these missing

00:18:19,739 --> 00:18:23,489
dependencies and you also don't have to

00:18:21,779 --> 00:18:26,189
worry about alright how do I build out

00:18:23,489 --> 00:18:29,789
the production cluster to mimic the

00:18:26,189 --> 00:18:31,709
development environment like I don't

00:18:29,789 --> 00:18:32,689
have to worry about i don't care i just

00:18:31,709 --> 00:18:36,739
need to be able to suppose that

00:18:32,689 --> 00:18:39,149
container and let it do its job so

00:18:36,739 --> 00:18:40,949
another reason why developers care is

00:18:39,149 --> 00:18:43,409
that you can run each app in its own

00:18:40,949 --> 00:18:45,059
isolated container so you can run

00:18:43,409 --> 00:18:47,669
various versions of libraries and other

00:18:45,059 --> 00:18:50,159
dependencies with apps within each app

00:18:47,669 --> 00:18:53,489
without worry i can run Python 2 and

00:18:50,159 --> 00:18:54,809
Python 30 i can run different versions

00:18:53,489 --> 00:18:57,960
of Ruby

00:18:54,809 --> 00:18:59,249
all in the same all of the same host but

00:18:57,960 --> 00:19:00,929
they're in different containers so I

00:18:59,249 --> 00:19:02,970
don't have to worry about that so if

00:19:00,929 --> 00:19:05,730
I've got a legacy application that

00:19:02,970 --> 00:19:08,580
requires an early version of Ruby also

00:19:05,730 --> 00:19:11,070
or if I need set forgot one to sit

00:19:08,580 --> 00:19:13,740
beside it that's using a bleeding edge

00:19:11,070 --> 00:19:16,039
doesn't matter because the container

00:19:13,740 --> 00:19:18,779
contains all the dependencies and

00:19:16,039 --> 00:19:22,529
library that it needs and it doesn't

00:19:18,779 --> 00:19:24,360
worry about the externals so automatic

00:19:22,529 --> 00:19:28,320
testing and integration packaging

00:19:24,360 --> 00:19:31,730
anything you can script you can show so

00:19:28,320 --> 00:19:31,730
really cool yes question

00:19:55,580 --> 00:20:01,520
I will actually get to that a little bit

00:19:57,710 --> 00:20:04,730
later okay so just just just hold on to

00:20:01,520 --> 00:20:06,380
that on you reduce eliminate the

00:20:04,730 --> 00:20:10,130
concerns and compatibility on different

00:20:06,380 --> 00:20:11,960
platforms specifically your customers if

00:20:10,130 --> 00:20:14,180
you've ever had to deploy I'd have a

00:20:11,960 --> 00:20:17,810
custom application on a customer's box

00:20:14,180 --> 00:20:20,630
that can be a real pain point well with

00:20:17,810 --> 00:20:23,210
utilizing dr. it's not because as long

00:20:20,630 --> 00:20:25,250
as their their system actually supports

00:20:23,210 --> 00:20:28,040
stalker so a relatively new system

00:20:25,250 --> 00:20:30,440
running kernel 38 later you basically

00:20:28,040 --> 00:20:33,430
have full support of this thing you can

00:20:30,440 --> 00:20:36,770
deploy it's not a pain point any longer

00:20:33,430 --> 00:20:40,200
cheap zero penalty containers to deploy

00:20:36,770 --> 00:20:44,429
services very cheap

00:20:40,200 --> 00:20:47,340
nearly free containers it's a vm without

00:20:44,429 --> 00:20:49,440
the head over head of a vm now

00:20:47,340 --> 00:20:51,149
understand docker containers is not

00:20:49,440 --> 00:20:52,649
virtualization you have some

00:20:51,149 --> 00:20:54,179
virtualization going on specifically

00:20:52,649 --> 00:20:56,429
like in the network and stuff like this

00:20:54,179 --> 00:21:00,240
but it is not it is not an actual

00:20:56,429 --> 00:21:02,070
virtualization solution it also allows

00:21:00,240 --> 00:21:05,159
for instant replay and reset of image

00:21:02,070 --> 00:21:06,840
snapshots and that's really powerful i

00:21:05,159 --> 00:21:08,760
can go to up an appt destroy it

00:21:06,840 --> 00:21:11,480
immediately and then spin up the same

00:21:08,760 --> 00:21:13,710
exact version in a matter of seconds and

00:21:11,480 --> 00:21:15,750
seconds really matter i mean everybody

00:21:13,710 --> 00:21:16,950
we loves VMS because they're their facts

00:21:15,750 --> 00:21:19,139
like there's so much faster than bare

00:21:16,950 --> 00:21:23,250
metal in terms of deploying and stuff

00:21:19,139 --> 00:21:26,279
like that doctors just makes VMS look

00:21:23,250 --> 00:21:30,240
like what we're because i can typically

00:21:26,279 --> 00:21:31,890
deploy a web server in about 30

00:21:30,240 --> 00:21:35,400
milliseconds

00:21:31,890 --> 00:21:39,210
running on ubuntu 1404 1204 1004 if I

00:21:35,400 --> 00:21:42,060
want to Fedora CentOS doesn't matter I

00:21:39,210 --> 00:21:44,310
mean do it really really fast doctor

00:21:42,060 --> 00:21:45,870
because of the nature of dr. its

00:21:44,310 --> 00:21:47,400
operating basically at better mental

00:21:45,870 --> 00:21:50,880
performance and we'll get into that just

00:21:47,400 --> 00:21:54,470
a little bit the other question that you

00:21:50,880 --> 00:21:58,110
really have to ask is why do DevOps care

00:21:54,470 --> 00:22:00,270
configure what to run anything that's

00:21:58,110 --> 00:22:02,070
that in itself to me is all I need to

00:22:00,270 --> 00:22:05,940
know like the fact that I can just I can

00:22:02,070 --> 00:22:08,100
set this up one time and I can run it

00:22:05,940 --> 00:22:09,810
anywhere I can put it on your laptop I

00:22:08,100 --> 00:22:14,130
can put it in your production server it

00:22:09,810 --> 00:22:16,440
just works it makes my job easier the

00:22:14,130 --> 00:22:19,020
entire life cycle is much more efficient

00:22:16,440 --> 00:22:20,700
consistent and repeatable specifically

00:22:19,020 --> 00:22:23,070
with continuous integration stuff we're

00:22:20,700 --> 00:22:24,720
always pushing codes and stuff and

00:22:23,070 --> 00:22:27,330
changes and modifications and

00:22:24,720 --> 00:22:30,150
potentially security updates this is a

00:22:27,330 --> 00:22:33,060
very fast system so i can see here i can

00:22:30,150 --> 00:22:34,860
make a change I can commit it to a new

00:22:33,060 --> 00:22:37,920
image and then I can deploy that image

00:22:34,860 --> 00:22:39,450
just really really fast so as you get

00:22:37,920 --> 00:22:41,160
into security vulnerabilities and things

00:22:39,450 --> 00:22:44,100
like that you actually can be very very

00:22:41,160 --> 00:22:46,320
responsive you can increase the quality

00:22:44,100 --> 00:22:47,880
of code produced by developers because

00:22:46,320 --> 00:22:49,940
they don't have to worry about how

00:22:47,880 --> 00:22:52,220
you're deploying it

00:22:49,940 --> 00:22:53,419
they're not the coffee plantation owner

00:22:52,220 --> 00:22:55,159
that's worried about how you're going to

00:22:53,419 --> 00:22:57,950
transport they're just not worried about

00:22:55,159 --> 00:23:00,440
it they get to focus on the code you get

00:22:57,950 --> 00:23:02,870
to focus on how to actually do the

00:23:00,440 --> 00:23:07,220
deployment which in theory should offer

00:23:02,870 --> 00:23:09,200
better code but developers eliminate

00:23:07,220 --> 00:23:11,539
inconsistencies between development test

00:23:09,200 --> 00:23:13,990
production and customer environments it

00:23:11,539 --> 00:23:17,210
works on my machine it works on yours

00:23:13,990 --> 00:23:19,730
the biggest thing is this does support

00:23:17,210 --> 00:23:21,200
segregation of duties which is most of

00:23:19,730 --> 00:23:23,779
you guys in the enterprise know this is

00:23:21,200 --> 00:23:25,399
actually a really big deal well letting

00:23:23,779 --> 00:23:27,009
specific people do their specific job

00:23:25,399 --> 00:23:30,830
instead of having everybody do one thing

00:23:27,009 --> 00:23:32,299
doctor help support this it

00:23:30,830 --> 00:23:35,450
significantly improves the speed and

00:23:32,299 --> 00:23:37,370
reliability of continuous deployment and

00:23:35,450 --> 00:23:39,830
continuous integration systems as I said

00:23:37,370 --> 00:23:42,320
and because the containers are so

00:23:39,830 --> 00:23:43,909
lightweight it addresses significant

00:23:42,320 --> 00:23:46,100
performance cost deployment and

00:23:43,909 --> 00:23:48,830
portability issues that are normally

00:23:46,100 --> 00:23:50,509
associated with beams okay the perfect

00:23:48,830 --> 00:23:53,330
example if I got if I got a two terabyte

00:23:50,509 --> 00:23:58,279
vm database vm and i want to duplicate

00:23:53,330 --> 00:24:01,279
it so now i have two two terabyte themes

00:23:58,279 --> 00:24:02,570
and all right that's really really

00:24:01,279 --> 00:24:04,490
painful or better yet I want to

00:24:02,570 --> 00:24:07,039
duplicate it and make one change so now

00:24:04,490 --> 00:24:10,700
i have a two terabyte vm and a two

00:24:07,039 --> 00:24:12,500
terabyte and for meg vm well I actually

00:24:10,700 --> 00:24:16,120
have now I've consumed there were four

00:24:12,500 --> 00:24:18,400
gigs of space dr. doesn't do that

00:24:16,120 --> 00:24:20,590
it actually will get into how it uses

00:24:18,400 --> 00:24:22,690
the layered file system it actually can

00:24:20,590 --> 00:24:25,390
share resources if it needs to so I have

00:24:22,690 --> 00:24:28,540
one copy and then only copy the Delta

00:24:25,390 --> 00:24:29,800
changes so if I've got application a and

00:24:28,540 --> 00:24:33,580
then I make a change to couplet

00:24:29,800 --> 00:24:35,230
application a and commit that I just I'm

00:24:33,580 --> 00:24:37,480
all I'm do any storing the day of delta

00:24:35,230 --> 00:24:40,150
so literally my application will be for

00:24:37,480 --> 00:24:42,940
mix on top of the base image it will

00:24:40,150 --> 00:24:45,820
actually show how that works

00:24:42,940 --> 00:24:47,650
why it works the biggest thing is

00:24:45,820 --> 00:24:52,780
because it does allow for separation of

00:24:47,650 --> 00:24:54,350
concerns anybody here named Dane are you

00:24:52,780 --> 00:24:57,049
a developer

00:24:54,350 --> 00:24:59,600
ah a witness I was I was one for one

00:24:57,049 --> 00:25:02,150
last time so the sedan and developer

00:24:59,600 --> 00:25:03,919
this is this is his role he worries

00:25:02,150 --> 00:25:07,010
about what's inside the container the

00:25:03,919 --> 00:25:09,530
library's the code how it all runs does

00:25:07,010 --> 00:25:11,960
it actually run all that stuff his

00:25:09,530 --> 00:25:14,720
package management his abs as data and

00:25:11,960 --> 00:25:17,740
because we all know all linux servers

00:25:14,720 --> 00:25:17,740
look the same right

00:25:17,910 --> 00:25:23,390
yo with me no it's it's their their

00:25:21,810 --> 00:25:24,780
common but they're not all the same

00:25:23,390 --> 00:25:26,310
especially if you're dealing with

00:25:24,780 --> 00:25:28,350
customer servers that they don't know

00:25:26,310 --> 00:25:30,480
what they're doing so he has to be

00:25:28,350 --> 00:25:32,730
concerned about this stuff like okay

00:25:30,480 --> 00:25:35,610
well i know that if i do this this works

00:25:32,730 --> 00:25:37,320
and stuff and this it but all these edge

00:25:35,610 --> 00:25:39,990
cases that you have to account for and

00:25:37,320 --> 00:25:41,880
stuff it's really burdensome for dan the

00:25:39,990 --> 00:25:43,740
developer he's actually worrying about

00:25:41,880 --> 00:25:45,630
things that's not his job like deploying

00:25:43,740 --> 00:25:48,480
this code how is he going to deploy

00:25:45,630 --> 00:25:51,390
write the code make it work send it off

00:25:48,480 --> 00:25:54,950
to the next guy peter anybody named

00:25:51,390 --> 00:25:54,950
peter a question

00:26:01,700 --> 00:26:07,860
absolutely absolutely so the question

00:26:05,789 --> 00:26:11,010
was if you develop something on that in

00:26:07,860 --> 00:26:15,590
a boon to box container can you deploy

00:26:11,010 --> 00:26:15,590
it on a red hat yes absolutely

00:26:16,450 --> 00:26:21,840
No

00:26:18,029 --> 00:26:23,129
well it right now dr. 64-bit so I and

00:26:21,840 --> 00:26:24,869
that's really about you mean you can't

00:26:23,129 --> 00:26:26,700
you can do some 30 to get stuff and all

00:26:24,869 --> 00:26:30,919
but know that architecture doesn t have

00:26:26,700 --> 00:26:30,919
to be the same um what

00:26:31,890 --> 00:26:37,950
I don't I'm actually not a home person I

00:26:35,730 --> 00:26:39,720
don't think so on that but yet so the

00:26:37,950 --> 00:26:43,020
action yet you're right the x86 would

00:26:39,720 --> 00:26:45,660
have to be the same but outside of that

00:26:43,020 --> 00:26:49,440
the operating system all that stuff is

00:26:45,660 --> 00:26:50,820
kind of agnostic so that's that's the

00:26:49,440 --> 00:26:53,070
beauty so that if you've got somebody

00:26:50,820 --> 00:26:54,870
that you know they like doing all their

00:26:53,070 --> 00:26:57,210
development in fedora but all of your

00:26:54,870 --> 00:26:59,640
production servers are a boon to it

00:26:57,210 --> 00:27:01,800
doesn't matter because they're working

00:26:59,640 --> 00:27:05,220
inside of this and whatever's inside is

00:27:01,800 --> 00:27:07,350
what actually matters so the ops guy

00:27:05,220 --> 00:27:10,800
Peter he worries about everything that's

00:27:07,350 --> 00:27:13,170
outside the containment things such as

00:27:10,800 --> 00:27:15,840
like logging and how you going to do

00:27:13,170 --> 00:27:18,330
remote access monitoring what's going on

00:27:15,840 --> 00:27:19,830
inside and outside the container get

00:27:18,330 --> 00:27:21,660
work configurations where is this thing

00:27:19,830 --> 00:27:23,940
going to live on the network what kind

00:27:21,660 --> 00:27:28,110
of access is going to be there how do I

00:27:23,940 --> 00:27:30,270
start stop access migrate all this stuff

00:27:28,110 --> 00:27:32,700
these containers okay this is what the

00:27:30,270 --> 00:27:34,520
operations guys job this is his job

00:27:32,700 --> 00:27:37,350
description to worry about these things

00:27:34,520 --> 00:27:40,440
and this is dr. helps facilitate this

00:27:37,350 --> 00:27:42,420
he's not so much concerned that you know

00:27:40,440 --> 00:27:45,000
it's a java application inside the

00:27:42,420 --> 00:27:47,610
container versus you know a python

00:27:45,000 --> 00:27:49,500
application doesn't matter all he has to

00:27:47,610 --> 00:27:51,570
do is build his build a systems building

00:27:49,500 --> 00:27:53,220
infrastructure based off this common

00:27:51,570 --> 00:27:55,470
variable did it supports the docker

00:27:53,220 --> 00:27:56,850
containers and then you can focus on all

00:27:55,470 --> 00:27:58,269
of the administrative stuff of

00:27:56,850 --> 00:28:00,369
maintaining you know

00:27:58,269 --> 00:28:03,999
the monitoring and remote access and

00:28:00,369 --> 00:28:06,070
things like that so one of the common

00:28:03,999 --> 00:28:08,559
questions is don't VMS actually solve

00:28:06,070 --> 00:28:11,919
everything we've talked about I mean

00:28:08,559 --> 00:28:16,299
they you get it you essentially put it

00:28:11,919 --> 00:28:17,739
in a package the vm vm so if i don't

00:28:16,299 --> 00:28:19,979
have to worry about dependencies or

00:28:17,739 --> 00:28:23,619
anything because it's all in there

00:28:19,979 --> 00:28:24,820
beam's aren't really portable um once

00:28:23,619 --> 00:28:27,639
you get into large but they are

00:28:24,820 --> 00:28:30,369
technically portable so it solves a lot

00:28:27,639 --> 00:28:33,190
of the problems right well no not even

00:28:30,369 --> 00:28:38,679
close because one VMs do it so

00:28:33,190 --> 00:28:41,889
inefficiently so here we have kind of

00:28:38,679 --> 00:28:44,469
this traditional vm infrastructure on

00:28:41,889 --> 00:28:45,999
the left so you've got your server your

00:28:44,469 --> 00:28:50,070
bare metal you bet your host operating

00:28:45,999 --> 00:28:52,570
system then you have a hypervisor which

00:28:50,070 --> 00:28:55,919
even the best of hypervisors eat

00:28:52,570 --> 00:28:58,539
resources that alone can be a problem

00:28:55,919 --> 00:29:00,399
and so then we have we look at

00:28:58,539 --> 00:29:03,219
application a we have a new guest

00:29:00,399 --> 00:29:06,129
operating system we have all our bins

00:29:03,219 --> 00:29:07,959
libraries and all that stuff needed and

00:29:06,129 --> 00:29:10,539
then we have our actual application

00:29:07,959 --> 00:29:12,669
sitting on top so so we've got this

00:29:10,539 --> 00:29:15,759
entire is for this vertical stack of

00:29:12,669 --> 00:29:18,279
application a well and then you jump

00:29:15,759 --> 00:29:20,709
over and so we've got a that we've made

00:29:18,279 --> 00:29:23,320
a slight modification to well in order

00:29:20,709 --> 00:29:25,479
to make a slight modification on a vm

00:29:23,320 --> 00:29:27,429
and still have the existing one there

00:29:25,479 --> 00:29:29,440
you have to do it you have to do a

00:29:27,429 --> 00:29:31,450
replication or a clone you have to copy

00:29:29,440 --> 00:29:32,709
it then make your change which means you

00:29:31,450 --> 00:29:35,379
have a full version of the operating

00:29:32,709 --> 00:29:37,239
system a second version of the libraries

00:29:35,379 --> 00:29:39,359
and bins and the second version of the

00:29:37,239 --> 00:29:39,359
application

00:29:39,929 --> 00:29:45,119
and so every time you do this you're

00:29:43,080 --> 00:29:47,999
you're eating a lot of resources that

00:29:45,119 --> 00:29:49,590
are 100-percent necessary and so the

00:29:47,999 --> 00:29:51,119
same thing when you get to application B

00:29:49,590 --> 00:29:53,429
which is a completely different thing

00:29:51,119 --> 00:29:55,679
you've got a new guest operating system

00:29:53,429 --> 00:29:57,029
a new set of bins and libraries and then

00:29:55,679 --> 00:29:58,409
you've got the application on that so if

00:29:57,029 --> 00:30:01,129
you make changes you've got to do it

00:29:58,409 --> 00:30:01,129
again yeah

00:30:03,990 --> 00:30:10,050
you could do that and that does make it

00:30:06,870 --> 00:30:11,640
a lot more efficient but not everybody

00:30:10,050 --> 00:30:15,450
does that and that's the biggest thing

00:30:11,640 --> 00:30:19,230
is that so the question was why not use

00:30:15,450 --> 00:30:20,280
like the vice- and stuff and the

00:30:19,230 --> 00:30:22,110
specifically the reason why I'm putting

00:30:20,280 --> 00:30:23,760
this isn't my presentation is because I

00:30:22,110 --> 00:30:26,250
don't find that people actually do that

00:30:23,760 --> 00:30:30,000
most of our actually just doing straight

00:30:26,250 --> 00:30:31,910
clones and eating up the resources so

00:30:30,000 --> 00:30:35,130
but that is that is a very valid point

00:30:31,910 --> 00:30:37,650
so if we jump over to the the right side

00:30:35,130 --> 00:30:40,800
in the app the container we have our

00:30:37,650 --> 00:30:43,410
server we have our host operating system

00:30:40,800 --> 00:30:45,179
which is agnostic as long as it's

00:30:43,410 --> 00:30:47,640
running a relatively modern kernel and

00:30:45,179 --> 00:30:49,490
has the go I mean the doctor binary

00:30:47,640 --> 00:30:53,130
installed on it you're pretty well good

00:30:49,490 --> 00:30:56,130
and so what happens is now you've got up

00:30:53,130 --> 00:30:58,710
if you look we've got application a and

00:30:56,130 --> 00:31:01,679
then we have essentially a modified

00:30:58,710 --> 00:31:03,240
version of application a and they're

00:31:01,679 --> 00:31:07,820
sharing the same bins and libraries

00:31:03,240 --> 00:31:07,820
because well I only need one copy

00:31:07,940 --> 00:31:12,379
it just makes it a lot more efficient so

00:31:09,950 --> 00:31:14,809
I don't have all this overhead of an

00:31:12,379 --> 00:31:16,070
entire operating system and all these

00:31:14,809 --> 00:31:18,259
you know multiple copies of the same

00:31:16,070 --> 00:31:21,080
library on the hose I have it one time

00:31:18,259 --> 00:31:23,779
or if I need a different version of a

00:31:21,080 --> 00:31:26,090
library then it actually makes that in

00:31:23,779 --> 00:31:29,059
the change so that'll be a differential

00:31:26,090 --> 00:31:30,830
between a and the change of a and then

00:31:29,059 --> 00:31:33,049
you jump over to be so in this case we

00:31:30,830 --> 00:31:35,299
got four applications of me or four

00:31:33,049 --> 00:31:38,600
versions of be with the libraries are

00:31:35,299 --> 00:31:43,700
the same so the example of this is like

00:31:38,600 --> 00:31:44,899
if you had like a customer another thing

00:31:43,700 --> 00:31:46,580
of something where you have multiple

00:31:44,899 --> 00:31:49,100
instances for four different customers

00:31:46,580 --> 00:31:50,750
like the underlying is the same you just

00:31:49,100 --> 00:31:52,940
they're logging into a different place

00:31:50,750 --> 00:31:54,799
or something like that I don't need for

00:31:52,940 --> 00:31:58,129
exact duplicate copies of all of this

00:31:54,799 --> 00:32:00,129
stuff just to make it run so I can

00:31:58,129 --> 00:32:02,570
actually share all these libraries and

00:32:00,129 --> 00:32:04,490
Bend and stuff and then you have docker

00:32:02,570 --> 00:32:06,110
to the side that's actually acting as

00:32:04,490 --> 00:32:08,830
your controller to do all of this stuff

00:32:06,110 --> 00:32:08,830
yes

00:32:23,750 --> 00:32:29,630
yes you can run it in I mean so let's

00:32:27,140 --> 00:32:32,270
say you've got a rail vm rail seven

00:32:29,630 --> 00:32:33,860
because I just dropped so we've got a

00:32:32,270 --> 00:32:35,240
rail seven vm yeah you put doctor in

00:32:33,860 --> 00:32:38,150
that and then run the containers on top

00:32:35,240 --> 00:32:40,820
of that sorry the question was if you've

00:32:38,150 --> 00:32:42,650
got a vm can you actually run dr inside

00:32:40,820 --> 00:32:44,270
of that and then do all the container

00:32:42,650 --> 00:32:48,650
support and the quittin it's absolutely

00:32:44,270 --> 00:32:50,810
yes so we'll move on so a little bit of

00:32:48,650 --> 00:32:52,610
how the doctor actually works and

00:32:50,810 --> 00:32:56,240
there's been some great talks on some of

00:32:52,610 --> 00:32:59,270
the elements is the biggest things it

00:32:56,240 --> 00:33:01,760
one potential pitfall of doctor is it as

00:32:59,270 --> 00:33:03,500
a shared colonel whatever colonel the

00:33:01,760 --> 00:33:07,280
host is is the eternal that all the

00:33:03,500 --> 00:33:10,430
containers has so if you do require a a

00:33:07,280 --> 00:33:12,980
unique kernel that can be a problem and

00:33:10,430 --> 00:33:15,680
that's a solution that vm salt better

00:33:12,980 --> 00:33:17,480
than containers containers are not the

00:33:15,680 --> 00:33:18,710
end-all be-all solution and the reason

00:33:17,480 --> 00:33:21,110
why it's not because we still have bare

00:33:18,710 --> 00:33:22,270
metal servers when virtual machines are

00:33:21,110 --> 00:33:24,680
the best thing that's ever been created

00:33:22,270 --> 00:33:27,680
there's that there's application for all

00:33:24,680 --> 00:33:29,870
of it but it uses linux namespaces and

00:33:27,680 --> 00:33:34,190
see groups as well as a union and file

00:33:29,870 --> 00:33:36,260
system which gives it a unique p ids

00:33:34,190 --> 00:33:38,390
process trees you have unique mount

00:33:36,260 --> 00:33:40,700
points network inter-process

00:33:38,390 --> 00:33:43,220
communication user accounts hostnames

00:33:40,700 --> 00:33:46,700
memory cpu disk i/o all that stuff all

00:33:43,220 --> 00:33:49,420
the really cool stuff that I had on

00:33:46,700 --> 00:33:52,460
Grimm I believe plugs button see groups

00:33:49,420 --> 00:33:54,920
yesterday that's what doctors built off

00:33:52,460 --> 00:33:57,290
of being able to control and utilize

00:33:54,920 --> 00:34:01,880
these see groups for isolation as well

00:33:57,290 --> 00:34:03,890
as the innate the colonel namespaces so

00:34:01,880 --> 00:34:06,290
dr. combines and standardize a number of

00:34:03,890 --> 00:34:09,620
existing links components both of them

00:34:06,290 --> 00:34:11,889
are from Linux containers lxc which is

00:34:09,620 --> 00:34:14,149
what dr. was originally built off of

00:34:11,889 --> 00:34:18,470
Alexia's for the most part been

00:34:14,149 --> 00:34:19,220
deprecated and the doctor world for lib

00:34:18,470 --> 00:34:22,680
container

00:34:19,220 --> 00:34:24,360
which is basically it replaces a lot of

00:34:22,680 --> 00:34:25,560
LXE it has direct interaction with the

00:34:24,360 --> 00:34:27,540
colonel instead of having the kind of

00:34:25,560 --> 00:34:29,700
that middle layer and it's a project

00:34:27,540 --> 00:34:32,940
that's actually being it's been split

00:34:29,700 --> 00:34:35,610
off of dr. and they're maintaining it as

00:34:32,940 --> 00:34:37,830
a separate project so but basically

00:34:35,610 --> 00:34:41,220
anything 38 Colonel wise you can pretty

00:34:37,830 --> 00:34:42,870
much support so how does the Union file

00:34:41,220 --> 00:34:46,200
system because this is where the the

00:34:42,870 --> 00:34:47,700
really everything truly happens now that

00:34:46,200 --> 00:34:50,280
we've actually got our name space we've

00:34:47,700 --> 00:34:52,310
got you know dedicated see groups for

00:34:50,280 --> 00:34:55,140
cpu utilization memory utilization

00:34:52,310 --> 00:34:57,240
utilization all that stuff how do we

00:34:55,140 --> 00:35:00,360
actually get it to do the cool stuff

00:34:57,240 --> 00:35:02,250
that makes docker so each layer of the

00:35:00,360 --> 00:35:05,310
file system is mounted on top of the

00:35:02,250 --> 00:35:07,410
previous layer so when I build a docker

00:35:05,310 --> 00:35:10,320
application I start off with a base

00:35:07,410 --> 00:35:12,420
image and so typically I live in a boon

00:35:10,320 --> 00:35:15,120
to a world and so I typically we use a

00:35:12,420 --> 00:35:16,320
boon to so what I'll do is I if I don't

00:35:15,120 --> 00:35:18,300
already have it I'll download the boot

00:35:16,320 --> 00:35:22,010
at boo to image and I'll start there and

00:35:18,300 --> 00:35:26,460
then let's say I want to install a patch

00:35:22,010 --> 00:35:28,350
so I go and I install Apache into the on

00:35:26,460 --> 00:35:31,440
top of the doctor layer and it actually

00:35:28,350 --> 00:35:33,270
writes it out as a new layer on top of

00:35:31,440 --> 00:35:35,640
the base image

00:35:33,270 --> 00:35:37,740
and then if I commit that now I've got a

00:35:35,640 --> 00:35:40,050
whole new image instead Apache image but

00:35:37,740 --> 00:35:43,290
what's happening is the abou two bays is

00:35:40,050 --> 00:35:45,930
bare minimal like it is smaller than the

00:35:43,290 --> 00:35:47,490
minimum server installation like a lot

00:35:45,930 --> 00:35:50,400
of the stuff you're used to having it in

00:35:47,490 --> 00:35:52,770
a boon to you don't because it turns out

00:35:50,400 --> 00:35:54,270
you don't actually need it the concept

00:35:52,770 --> 00:35:55,980
behind these things to keep them

00:35:54,270 --> 00:35:57,810
lightweight and efficient is you install

00:35:55,980 --> 00:35:59,910
what you need we're not going to give

00:35:57,810 --> 00:36:02,610
you what we think you need so things

00:35:59,910 --> 00:36:07,740
like I'm a nano guy don't kill me please

00:36:02,610 --> 00:36:09,450
um nano doesn't exist in docker like you

00:36:07,740 --> 00:36:11,430
have to have to actually sudo apt-get

00:36:09,450 --> 00:36:13,620
install Nana if I want to use nano it's

00:36:11,430 --> 00:36:16,920
very very very minimal so then I go and

00:36:13,620 --> 00:36:19,110
do an Apache install so now I've got a

00:36:16,920 --> 00:36:22,950
web server I've got a really lightweight

00:36:19,110 --> 00:36:25,730
and I commit that also so now I can use

00:36:22,950 --> 00:36:30,750
that Apache image and I can send out

00:36:25,730 --> 00:36:33,390
65,000 you know the entire class r / 16

00:36:30,750 --> 00:36:35,850
of web servers based off this one little

00:36:33,390 --> 00:36:39,060
image and it's all it's doing is

00:36:35,850 --> 00:36:43,320
actually sharing the base image and just

00:36:39,060 --> 00:36:45,560
using the Apache layer 60 5300 whatever

00:36:43,320 --> 00:36:45,560
times

00:36:46,000 --> 00:36:51,040
so the first layer is always the base

00:36:48,070 --> 00:36:53,740
image there are fourteen thousand plus

00:36:51,040 --> 00:36:56,170
base images right now that's actually in

00:36:53,740 --> 00:36:58,720
the docker hub you can actually create

00:36:56,170 --> 00:37:00,490
your own do whatever look you want so

00:36:58,720 --> 00:37:04,480
the current base images include debian

00:37:00,490 --> 00:37:07,720
kubuntu busybox for doro centos see

00:37:04,480 --> 00:37:14,650
we've got no Jas with God PHP we've got

00:37:07,720 --> 00:37:16,240
a Python Redis memcache I mean just

00:37:14,650 --> 00:37:17,950
anything that most people are using

00:37:16,240 --> 00:37:21,520
there's actually already based images to

00:37:17,950 --> 00:37:25,030
do these things with

00:37:21,520 --> 00:37:27,610
so each read-only layer is called an

00:37:25,030 --> 00:37:29,200
image and the container which is

00:37:27,610 --> 00:37:33,820
actually the very top layer is the only

00:37:29,200 --> 00:37:35,440
thing that's actually writable the top

00:37:33,820 --> 00:37:37,540
layer is only modifiable and it's

00:37:35,440 --> 00:37:39,610
actually termed the container so

00:37:37,540 --> 00:37:41,590
basically any changes off that base

00:37:39,610 --> 00:37:42,910
image that I make that's what we're

00:37:41,590 --> 00:37:44,560
actually classifying as the container

00:37:42,910 --> 00:37:47,550
the other everything under that shows

00:37:44,560 --> 00:37:47,550
resources yes

00:37:49,680 --> 00:37:54,630
yes yes I know actually so the question

00:37:52,800 --> 00:37:57,360
is then by testing the base images that

00:37:54,630 --> 00:37:59,190
are uploaded so dr. has partnered with

00:37:57,360 --> 00:38:01,560
github to do what's called trusted

00:37:59,190 --> 00:38:03,660
builds and so in order to actually get a

00:38:01,560 --> 00:38:06,180
trusted build all the code it's been

00:38:03,660 --> 00:38:08,130
specifically the docker file that was

00:38:06,180 --> 00:38:09,780
used to build the image has to be

00:38:08,130 --> 00:38:11,040
submitted on github so that they can

00:38:09,780 --> 00:38:13,380
actually they've got their team can go

00:38:11,040 --> 00:38:14,730
and validate that it's you're not doing

00:38:13,380 --> 00:38:17,820
something stupid or anything like that

00:38:14,730 --> 00:38:19,830
that you're doing it running a system

00:38:17,820 --> 00:38:21,930
with escalated privileges and trying to

00:38:19,830 --> 00:38:24,450
run everything its root and potentially

00:38:21,930 --> 00:38:26,040
causing chaos and stuff so yeah there is

00:38:24,450 --> 00:38:29,490
there is a way to kind of validate that

00:38:26,040 --> 00:38:31,470
the containers are trustworthy one point

00:38:29,490 --> 00:38:33,360
of note if you don't know where the

00:38:31,470 --> 00:38:35,190
docker containers are came from and

00:38:33,360 --> 00:38:39,690
they're not trusted built other than

00:38:35,190 --> 00:38:43,170
yourself because I can upload a to the

00:38:39,690 --> 00:38:45,120
hub that I built myself with zero

00:38:43,170 --> 00:38:47,640
documentation and without with a docker

00:38:45,120 --> 00:38:49,260
file and I just tell you hey this is

00:38:47,640 --> 00:38:51,330
what's in it you actually have no idea

00:38:49,260 --> 00:38:53,430
what's in it the good thing is they made

00:38:51,330 --> 00:38:56,840
it extremely easy to build your own so

00:38:53,430 --> 00:38:56,840
you don't have to really trust anybody

00:39:01,210 --> 00:39:06,470
no not yet and i don't i don't know if

00:39:05,690 --> 00:39:07,819
that's something they're looking

00:39:06,470 --> 00:39:09,890
question was is there any digital

00:39:07,819 --> 00:39:13,910
signing and as you build containers and

00:39:09,890 --> 00:39:16,160
stuff not that i'm aware of so it could

00:39:13,910 --> 00:39:19,190
be so now we're actually going to try to

00:39:16,160 --> 00:39:21,400
do a hopefully not failed demos this

00:39:19,190 --> 00:39:21,400
time

00:39:26,710 --> 00:39:31,150
is that good all right so I got to

00:39:29,680 --> 00:39:36,250
remember dr. I oh because they just

00:39:31,150 --> 00:39:38,020
changed it so yeah I had just said I had

00:39:36,250 --> 00:39:40,300
to reboot do my Chromebook yesterday so

00:39:38,020 --> 00:39:43,660
yeah so this is this is the current

00:39:40,300 --> 00:39:44,920
version it's a actually i'm not even

00:39:43,660 --> 00:39:49,510
running the latest current that's

00:39:44,920 --> 00:39:51,700
awesome so the current is one point 0 it

00:39:49,510 --> 00:39:55,390
is the production release on they did a

00:39:51,700 --> 00:39:57,369
lot of let's see they increase their

00:39:55,390 --> 00:39:59,950
butter FS performance all right and

00:39:57,369 --> 00:40:01,630
support so if you need butter FS guides

00:39:59,950 --> 00:40:03,070
doctor actually played really really

00:40:01,630 --> 00:40:05,650
well with that so if you're doing

00:40:03,070 --> 00:40:07,859
replication snapshots and stuff really

00:40:05,650 --> 00:40:10,630
really cool to pair those two together

00:40:07,859 --> 00:40:13,900
they did away with the dependency of

00:40:10,630 --> 00:40:15,430
using linux bridging so i can actually

00:40:13,900 --> 00:40:18,460
bridge all the containers network

00:40:15,430 --> 00:40:21,190
directly to my physical host interface

00:40:18,460 --> 00:40:24,580
so if I've got a host it's just you know

00:40:21,190 --> 00:40:27,310
80 I can actually pull the HCP off of 80

00:40:24,580 --> 00:40:29,349
from the rest of my route or so or i can

00:40:27,310 --> 00:40:30,849
have a localized network if I want and I

00:40:29,349 --> 00:40:32,650
can actually do localized networks

00:40:30,849 --> 00:40:34,060
within the networks and stuff so it's

00:40:32,650 --> 00:40:37,330
actually got a lot of networking

00:40:34,060 --> 00:40:38,859
capability and stuff and it's been

00:40:37,330 --> 00:40:40,420
really impressive it's really awesome if

00:40:38,859 --> 00:40:42,490
you combine it with like open V switch

00:40:40,420 --> 00:40:45,330
for doing software switching and stuff

00:40:42,490 --> 00:40:47,950
it's just really really impressive so

00:40:45,330 --> 00:40:49,359
here I've got just two images currently

00:40:47,950 --> 00:40:50,950
right now I've got the self image which

00:40:49,359 --> 00:40:53,050
is what we're actually we're just

00:40:50,950 --> 00:40:55,650
looking at and so I've got the up bhuntu

00:40:53,050 --> 00:41:00,930
so if I want to actually pull

00:40:55,650 --> 00:41:03,770
an image that I don't have a pool one I

00:41:00,930 --> 00:41:03,770
want to do with the Foley

00:41:06,870 --> 00:41:08,990
I

00:41:20,300 --> 00:41:24,130
oh my morals got turned off

00:41:24,460 --> 00:41:27,020
in the middle of the presentation that's

00:41:25,869 --> 00:41:30,750
cool

00:41:27,020 --> 00:41:33,690
yeah so with within the the doctor has a

00:41:30,750 --> 00:41:36,420
really really good API which you can

00:41:33,690 --> 00:41:38,370
connect to both you obviously get a

00:41:36,420 --> 00:41:41,130
great command line interface but they

00:41:38,370 --> 00:41:44,250
also got a really robust API any digital

00:41:41,130 --> 00:41:45,750
ocean fans here I personally love

00:41:44,250 --> 00:41:47,400
digital ocean nothing against one note

00:41:45,750 --> 00:41:49,140
if you guys are here y'all we're cool

00:41:47,400 --> 00:41:51,180
too I just like digital ocean just a

00:41:49,140 --> 00:41:55,260
little bit better they actually have a

00:41:51,180 --> 00:41:56,730
entire docker VPS that you can buy it's

00:41:55,260 --> 00:42:00,390
like five dollars a month and it's ready

00:41:56,730 --> 00:42:02,700
to go you can use the remote ap IPS and

00:42:00,390 --> 00:42:04,800
so like if I want to deploy applications

00:42:02,700 --> 00:42:06,720
I can actually just remotely from from

00:42:04,800 --> 00:42:09,000
my Chromebook or any other laptop is set

00:42:06,720 --> 00:42:13,520
them straight to digital ocean and their

00:42:09,000 --> 00:42:13,520
rock and roll and ready to run let's see

00:42:24,230 --> 00:42:26,670
all right so I'm not going to pull an

00:42:25,520 --> 00:42:29,750
image

00:42:26,670 --> 00:42:29,750
because I don't need to

00:42:31,150 --> 00:42:38,480
I quit my job

00:42:36,010 --> 00:42:41,240
not yet

00:42:38,480 --> 00:42:43,430
yeah we'll go with that thank you for

00:42:41,240 --> 00:42:45,260
this exact um so yeah let's do let's

00:42:43,430 --> 00:42:47,900
just do quickly and I'm not going to

00:42:45,260 --> 00:42:49,400
actually pull the whole thing because it

00:42:47,900 --> 00:42:51,320
will take more time than I actually want

00:42:49,400 --> 00:42:53,240
to but if you look you'll see a bunch of

00:42:51,320 --> 00:42:54,830
these like random number sets it's

00:42:53,240 --> 00:42:58,460
actually pulling it's pulling it later

00:42:54,830 --> 00:43:02,240
by layer so if somebody built this they

00:42:58,460 --> 00:43:04,070
would do it make a change and it would

00:43:02,240 --> 00:43:05,420
save a layer and they'd sable their sale

00:43:04,070 --> 00:43:07,160
layer sale later and what actually

00:43:05,420 --> 00:43:08,720
happens is because the way it's done in

00:43:07,160 --> 00:43:10,550
later you actually can download in

00:43:08,720 --> 00:43:12,560
parallel so you're actually instead of

00:43:10,550 --> 00:43:14,450
pulling this entire like I so at a time

00:43:12,560 --> 00:43:16,310
I'm actually able to pull layer after

00:43:14,450 --> 00:43:17,420
layer after layer after layer and then

00:43:16,310 --> 00:43:19,369
it stitches them together at the very

00:43:17,420 --> 00:43:22,330
end so that's just one cool it's kind of

00:43:19,369 --> 00:43:22,330
fast yes

00:43:24,090 --> 00:43:28,290
I'm not sure the question was is a

00:43:26,100 --> 00:43:29,640
downloading sequential or random i I'm

00:43:28,290 --> 00:43:32,370
not sure I haven't actually gone through

00:43:29,640 --> 00:43:34,980
and looked what I basically what they

00:43:32,370 --> 00:43:36,780
could do is just calc at the output to a

00:43:34,980 --> 00:43:38,070
file and then look at the history of the

00:43:36,780 --> 00:43:40,320
container and then I could probably find

00:43:38,070 --> 00:43:43,050
out but my guess is that my guess is

00:43:40,320 --> 00:43:45,890
sequential but I'm just not actually

00:43:43,050 --> 00:43:45,890
sure yes

00:43:49,740 --> 00:43:52,940
yes yes

00:43:57,900 --> 00:44:02,400
yes that that's correct yeah yeah each

00:44:00,570 --> 00:44:04,140
of those layers is applied is a it's

00:44:02,400 --> 00:44:06,060
literally just a series of files it may

00:44:04,140 --> 00:44:07,830
just be a single file or it could be a

00:44:06,060 --> 00:44:10,380
bunch of files simultaneously depending

00:44:07,830 --> 00:44:14,570
on how large that actual layer of change

00:44:10,380 --> 00:44:14,570
was so

00:44:16,110 --> 00:44:21,079
yeah yeah

00:44:18,420 --> 00:44:21,079
yeah so

00:44:27,840 --> 00:44:31,650
scroll it so if we if we just look at

00:44:30,240 --> 00:44:33,570
some of the options within the doctor

00:44:31,650 --> 00:44:35,790
command line you've got attached which

00:44:33,570 --> 00:44:38,580
is essentially like ssh i can actually

00:44:35,790 --> 00:44:41,130
elite latch on to a running container

00:44:38,580 --> 00:44:44,820
and i can look at its processes do all

00:44:41,130 --> 00:44:46,770
that stuff build commit it uses kind of

00:44:44,820 --> 00:44:49,950
a burgeoning system very much like get

00:44:46,770 --> 00:44:51,750
as that you can it is you can actually I

00:44:49,950 --> 00:44:54,960
can roll back an entire image if I need

00:44:51,750 --> 00:44:57,090
to to a specific later so if like we

00:44:54,960 --> 00:44:58,860
make a change and it just doesn't work

00:44:57,090 --> 00:45:00,540
right I can actually can actually go

00:44:58,860 --> 00:45:02,070
back but most people don't do that

00:45:00,540 --> 00:45:04,620
because it's just so easy just to spin

00:45:02,070 --> 00:45:06,840
up a new version of the existing image

00:45:04,620 --> 00:45:09,870
one that's really cool is I can import

00:45:06,840 --> 00:45:11,820
existing tar balls and convert them into

00:45:09,870 --> 00:45:13,650
a docker container so if I've got a file

00:45:11,820 --> 00:45:17,180
system like on a physical machine I

00:45:13,650 --> 00:45:20,160
can't rball that and then import it into

00:45:17,180 --> 00:45:23,640
docker and then I'll have basic alike a

00:45:20,160 --> 00:45:25,730
poor man's p2b system

00:45:23,640 --> 00:45:25,730
um

00:45:26,090 --> 00:45:29,930
let's see

00:45:27,920 --> 00:45:35,180
somebody somebody give me an application

00:45:29,930 --> 00:45:36,380
that they use that saltstack that's not

00:45:35,180 --> 00:45:38,270
they're not going to have they've got

00:45:36,380 --> 00:45:42,530
support but there it's not gonna be a

00:45:38,270 --> 00:45:46,780
standalone container I heard Brett asst

00:45:42,530 --> 00:45:46,780
somebody say rat us all right let's see

00:45:51,820 --> 00:45:54,570
one day

00:45:54,720 --> 00:45:57,990
so what this is going to do is this is

00:45:56,490 --> 00:46:00,180
actually going to reach out to the to

00:45:57,990 --> 00:46:01,710
the docker index which is now docker hub

00:46:00,180 --> 00:46:04,590
and it's not actually going to search

00:46:01,710 --> 00:46:06,510
for all of the the titles of Redis and

00:46:04,590 --> 00:46:08,460
stuff and on this wireless it may be a

00:46:06,510 --> 00:46:11,490
little bit slow but yeah so we've got

00:46:08,460 --> 00:46:12,900
lots and lots of entries for people that

00:46:11,490 --> 00:46:14,940
have created their own reddits

00:46:12,900 --> 00:46:16,200
installations and stuff some of them

00:46:14,940 --> 00:46:18,030
were telling you hey this is running on

00:46:16,200 --> 00:46:21,150
1204 and this is where it can get a

00:46:18,030 --> 00:46:24,420
little tricky because most like the best

00:46:21,150 --> 00:46:25,950
solution is to build it yourself figure

00:46:24,420 --> 00:46:27,690
it out unless there's a very

00:46:25,950 --> 00:46:30,750
well-documented container you probably

00:46:27,690 --> 00:46:34,320
want to do it yourself because well I

00:46:30,750 --> 00:46:36,240
just don't trust people sorry I just

00:46:34,320 --> 00:46:38,220
don't I mean if it's my application and

00:46:36,240 --> 00:46:40,109
my services my customers and I'm

00:46:38,220 --> 00:46:42,359
dependent on it I want to make sure that

00:46:40,109 --> 00:46:43,590
i did it's actually so you have the

00:46:42,359 --> 00:46:47,849
ability to search for existing

00:46:43,590 --> 00:46:49,770
containers and things like that so um

00:46:47,849 --> 00:46:53,900
what we'll do quickly is we're just

00:46:49,770 --> 00:46:57,540
going to spin up a brand new ubuntu

00:46:53,900 --> 00:46:59,640
container just to show you how fast it

00:46:57,540 --> 00:47:01,500
is so we could dr. brian i'm going to

00:46:59,640 --> 00:47:04,050
dash I for interactive so I can actually

00:47:01,500 --> 00:47:06,270
see inside the container dash T so they

00:47:04,050 --> 00:47:08,099
get a TTYL and I can actually type and

00:47:06,270 --> 00:47:10,109
I'm going to do a boon to and I do have

00:47:08,099 --> 00:47:11,310
to pass it a command or it won't know

00:47:10,109 --> 00:47:15,359
what to do so we're just going to do bin

00:47:11,310 --> 00:47:17,810
slash bash not dot but slash bash all

00:47:15,359 --> 00:47:22,280
right so understand this doesn't exist

00:47:17,810 --> 00:47:22,280
we haven't created this Ubuntu container

00:47:23,430 --> 00:47:27,589
what bellagrog

00:47:28,210 --> 00:47:30,810
hey

00:47:33,410 --> 00:47:39,480
ah

00:47:35,280 --> 00:47:42,570
yeah there we go all right it's up if

00:47:39,480 --> 00:47:45,270
you notice my my bosch prompt changed

00:47:42,570 --> 00:47:48,210
and so i've got i've now got a true dat

00:47:45,270 --> 00:47:53,940
this 546 this is the host name of this

00:47:48,210 --> 00:47:57,630
container so if i do let's see if i do

00:47:53,940 --> 00:48:00,620
it you name I'm on 13.3 this is actually

00:47:57,630 --> 00:48:00,620
the colonel of the host

00:48:11,120 --> 00:48:16,250
so I'm 1404 LTS which just happens to be

00:48:14,210 --> 00:48:18,650
the same because I didn't indicate I

00:48:16,250 --> 00:48:22,690
didn't put a tag of latest or anything

00:48:18,650 --> 00:48:22,690
like that somebody asked about interface

00:48:22,810 --> 00:48:25,810
interesting

00:48:27,300 --> 00:48:33,470
so the 172 17 now 0-3

00:48:34,440 --> 00:48:39,980
if it's running if I open up another

00:48:37,500 --> 00:48:39,980
contain

00:48:42,680 --> 00:48:45,730
and see

00:48:46,080 --> 00:48:51,540
if you look and see the dr dot 0 that's

00:48:50,160 --> 00:48:53,610
actually a linux bridge that it

00:48:51,540 --> 00:48:55,320
automatically set up so i have the

00:48:53,610 --> 00:48:56,760
option of running an internal network or

00:48:55,320 --> 00:48:59,340
i can actually send it out to the host

00:48:56,760 --> 00:49:01,320
network if i want to for whatever always

00:48:59,340 --> 00:49:05,240
for the most part for development I just

00:49:01,320 --> 00:49:08,280
do it so you know if I jump back in here

00:49:05,240 --> 00:49:11,090
and clean this up you know i can ping

00:49:08,280 --> 00:49:11,090
google

00:49:11,569 --> 00:49:16,930
eventually and stuff so I'm operating

00:49:14,959 --> 00:49:21,069
inside of this container so if I exit

00:49:16,930 --> 00:49:21,069
into a doctor I oh

00:49:22,319 --> 00:49:27,230
and PS which is

00:49:25,490 --> 00:49:32,420
you can see that I have a container

00:49:27,230 --> 00:49:34,340
running and it's called self latest and

00:49:32,420 --> 00:49:36,020
it's and you can actually see the

00:49:34,340 --> 00:49:39,590
command here a little bit that I'm just

00:49:36,020 --> 00:49:43,270
running Python dash M HTTP server that

00:49:39,590 --> 00:49:48,410
is actually hosting the the presentation

00:49:43,270 --> 00:49:51,440
if I do a doctor PSA for all I can look

00:49:48,410 --> 00:49:54,860
and see I can actually see this 546 EF

00:49:51,440 --> 00:49:56,660
that I had just started and exited i can

00:49:54,860 --> 00:49:59,710
see that i created it two minutes ago I

00:49:56,660 --> 00:50:03,020
ran bin slash bash and then I accident

00:49:59,710 --> 00:50:05,960
so now that I've got I've got that

00:50:03,020 --> 00:50:09,460
existing container and it stopped I can

00:50:05,960 --> 00:50:09,460
actually just start it back

00:50:11,770 --> 00:50:16,520
which ill

00:50:14,010 --> 00:50:16,520
so actually

00:50:22,570 --> 00:50:28,120
I didn't the in dr. you have dash I for

00:50:26,500 --> 00:50:30,250
interactive and dash d for diamond eyes

00:50:28,120 --> 00:50:32,620
one thing is very important and doctor

00:50:30,250 --> 00:50:35,320
is you have to have a long running

00:50:32,620 --> 00:50:38,890
process as soon as the last process and

00:50:35,320 --> 00:50:42,280
exits you container exits so when I pass

00:50:38,890 --> 00:50:45,040
it bin slash bash and i typed exit that

00:50:42,280 --> 00:50:47,470
ended the batch session it ended the

00:50:45,040 --> 00:50:51,240
batch process so the container actually

00:50:47,470 --> 00:50:51,240
cease to exist at that point

00:50:53,080 --> 00:50:58,090
yep as I attached to it yes so I it was

00:50:56,380 --> 00:50:59,890
actually stopped so I just attached back

00:50:58,090 --> 00:51:02,530
to it which actually caused it to spin

00:50:59,890 --> 00:51:05,550
back up and now i'm back in back in my

00:51:02,530 --> 00:51:05,550
batter session yes

00:51:08,100 --> 00:51:11,630
I'm sorry can you repeat that

00:51:13,550 --> 00:51:20,680
no the doctor itself does not manage the

00:51:16,280 --> 00:51:20,680
processes so inside the container

00:51:29,630 --> 00:51:35,809
ya know so docker there's two options

00:51:32,630 --> 00:51:37,490
docker has its own basic and yes system

00:51:35,809 --> 00:51:39,559
that it can use which you can actually

00:51:37,490 --> 00:51:41,809
like if you specifically if you heavily

00:51:39,559 --> 00:51:43,730
rely on like upstart for a boon to

00:51:41,809 --> 00:51:46,039
there's actually kind of a way of

00:51:43,730 --> 00:51:49,220
passing in an argument that'll allow you

00:51:46,039 --> 00:51:51,410
to use the the containers onion system

00:51:49,220 --> 00:51:54,049
versus the Dockers what it wants to do

00:51:51,410 --> 00:51:55,759
so you do have that option so inside the

00:51:54,049 --> 00:51:59,150
container it has its own process tree

00:51:55,759 --> 00:52:04,450
and everything like that but if I jump

00:51:59,150 --> 00:52:04,450
over maximize

00:52:05,470 --> 00:52:07,590
and

00:52:08,560 --> 00:52:12,880
somewhere if you actually look right

00:52:10,900 --> 00:52:15,160
here you'll see the dr dot io attached

00:52:12,880 --> 00:52:18,880
has its own process you'll see the slash

00:52:15,160 --> 00:52:20,680
bin slash so from the host i can see all

00:52:18,880 --> 00:52:22,930
the processes that are running in all of

00:52:20,680 --> 00:52:24,610
my containers but inside the container i

00:52:22,930 --> 00:52:29,460
can only see the processes that have

00:52:24,610 --> 00:52:29,460
been assigned to that secret question

00:52:33,530 --> 00:52:36,160
yes

00:52:41,339 --> 00:52:47,460
it's lighter weight it's much more

00:52:43,920 --> 00:52:50,099
resource of friendly in fact a engineer

00:52:47,460 --> 00:52:55,979
from IBM did some comparison testing of

00:52:50,099 --> 00:52:57,779
docker versus a kvm and understand your

00:52:55,979 --> 00:52:58,979
you've got basically kind of a pseudo

00:52:57,779 --> 00:53:01,279
virtualized versus that truly

00:52:58,979 --> 00:53:05,819
virtualized stuff from a cpu performance

00:53:01,279 --> 00:53:08,640
dr was 26 times more efficient 3x of

00:53:05,819 --> 00:53:10,829
memory performance it's not going to be

00:53:08,640 --> 00:53:13,950
as much with openvz the thing with oppz

00:53:10,829 --> 00:53:16,200
is you still have a full system and so

00:53:13,950 --> 00:53:17,489
so you have all the libraries and stuff

00:53:16,200 --> 00:53:19,410
like that it's just a lighter form of

00:53:17,489 --> 00:53:21,450
virtualization so that's the biggest

00:53:19,410 --> 00:53:22,920
thing understand for the most part

00:53:21,450 --> 00:53:24,749
you're not going to use dr. to replace

00:53:22,920 --> 00:53:26,910
entire servers you're going to use dr.

00:53:24,749 --> 00:53:29,309
to deploy an application if I need to

00:53:26,910 --> 00:53:32,099
deploy wordpress I won't the minimum

00:53:29,309 --> 00:53:33,660
stuff to deploy WordPress that's it I

00:53:32,099 --> 00:53:34,950
don't need all this ancillary stuff I

00:53:33,660 --> 00:53:36,479
want to be able to reduce my

00:53:34,950 --> 00:53:38,309
dependencies the things that could

00:53:36,479 --> 00:53:41,910
potentially go wrong like my

00:53:38,309 --> 00:53:44,160
presentation oh and so I want to

00:53:41,910 --> 00:53:46,739
minimize that that that focus and stuff

00:53:44,160 --> 00:53:48,809
so with openvz you have you just have

00:53:46,739 --> 00:53:50,470
you have everything there it's just not

00:53:48,809 --> 00:53:53,440
quite as expensive as

00:53:50,470 --> 00:53:56,490
like a kvm or something like that all

00:53:53,440 --> 00:53:56,490
right we've got 30 seconds

00:53:57,080 --> 00:54:00,010
yes if

00:54:04,500 --> 00:54:08,450
um sysadmin

00:54:09,110 --> 00:54:14,970
possibly i do it a lot for because the

00:54:13,140 --> 00:54:16,230
do lotsa 7 stuff i do a lot for hacking

00:54:14,970 --> 00:54:17,520
together scripts and stuff in an

00:54:16,230 --> 00:54:19,290
environment that i can quickly test

00:54:17,520 --> 00:54:21,120
instead of having to actually run it on

00:54:19,290 --> 00:54:23,760
the machine dime probably about a break

00:54:21,120 --> 00:54:27,060
and stuff but this is really more

00:54:23,760 --> 00:54:29,400
designed for from the production

00:54:27,060 --> 00:54:31,230
standpoint of actually releasing

00:54:29,400 --> 00:54:33,330
applications and things like that there

00:54:31,230 --> 00:54:34,920
are some potential use cases i'm going

00:54:33,330 --> 00:54:36,930
to dress your security question right

00:54:34,920 --> 00:54:39,750
quick so like the perfect example is

00:54:36,930 --> 00:54:41,040
open SSL okay it's been a thorn in all

00:54:39,750 --> 00:54:42,210
of our sides of late if you've done

00:54:41,040 --> 00:54:44,280
anything with it with all the security

00:54:42,210 --> 00:54:46,920
updates so if I've got an application is

00:54:44,280 --> 00:54:49,200
relying on open SSL a new vulnerability

00:54:46,920 --> 00:54:52,800
as release which one's coming out like

00:54:49,200 --> 00:54:55,080
every six days now so what you can what

00:54:52,800 --> 00:54:56,060
you can do is so you've got this base

00:54:55,080 --> 00:54:58,650
image that you've got deployed

00:54:56,060 --> 00:55:02,070
everywhere okay which is you take that

00:54:58,650 --> 00:55:05,600
base image you spin up a new one you go

00:55:02,070 --> 00:55:08,820
in you patch openssl you make a commit

00:55:05,600 --> 00:55:10,500
indicating what you've done and then you

00:55:08,820 --> 00:55:12,930
just take and push that out to all that

00:55:10,500 --> 00:55:14,610
servers so you still have the existing

00:55:12,930 --> 00:55:17,220
you can you can actually keep that

00:55:14,610 --> 00:55:18,840
original image so for some reason oh it

00:55:17,220 --> 00:55:20,610
actually wasn't vulnerable you another

00:55:18,840 --> 00:55:22,230
instance you didn't have to do the

00:55:20,610 --> 00:55:23,310
update so what it does is you can

00:55:22,230 --> 00:55:25,440
actually do

00:55:23,310 --> 00:55:27,690
update the images based off of

00:55:25,440 --> 00:55:30,780
individual fixes so like if I need to

00:55:27,690 --> 00:55:32,820
update a patchy and open SSL I can do

00:55:30,780 --> 00:55:34,530
that repackage it and then just send it

00:55:32,820 --> 00:55:38,040
out to all to send it back to production

00:55:34,530 --> 00:55:40,530
and so it allows for this continuous

00:55:38,040 --> 00:55:42,180
development cycle as issues come up you

00:55:40,530 --> 00:55:43,860
just repackage it and send it back out

00:55:42,180 --> 00:55:46,850
again repackage it and send it back out

00:55:43,860 --> 00:55:46,850
a question

00:55:49,930 --> 00:55:53,520
yes that will actually what they would

00:55:51,880 --> 00:55:57,940
do is you would actually just replace

00:55:53,520 --> 00:55:59,230
the so you eat in this one takes a

00:55:57,940 --> 00:56:00,880
little bit of coordination but you could

00:55:59,230 --> 00:56:03,339
actually just pull down the running

00:56:00,880 --> 00:56:04,839
container and put the new one in place

00:56:03,339 --> 00:56:07,450
so yeah you would have to have some kind

00:56:04,839 --> 00:56:09,809
of orchestration to do that and there's

00:56:07,450 --> 00:56:11,859
plenty of tools to actually work on that

00:56:09,809 --> 00:56:15,599
but that's just a little bit out of

00:56:11,859 --> 00:56:15,599
scope of what I do yes

00:56:18,789 --> 00:56:20,849
Oh

00:56:24,549 --> 00:56:30,109
okay so if the ho if the host gets

00:56:27,650 --> 00:56:31,549
infected you're hosed because most

00:56:30,109 --> 00:56:32,329
likely they're going to it's going to do

00:56:31,549 --> 00:56:39,349
something that's going to be really

00:56:32,329 --> 00:56:40,849
really bad it very well could because

00:56:39,349 --> 00:56:42,229
understand the host is controlling

00:56:40,849 --> 00:56:45,410
everything's happening in the doctor

00:56:42,229 --> 00:56:48,019
container that's potentially as far as

00:56:45,410 --> 00:56:49,819
the other way around if you look in the

00:56:48,019 --> 00:56:52,400
news last week there was a bleed out

00:56:49,819 --> 00:56:55,430
proof of concept that was published

00:56:52,400 --> 00:56:57,410
against dr. it was only existent in one

00:56:55,430 --> 00:56:59,210
version and it was patched two weeks

00:56:57,410 --> 00:57:01,519
before they actually released that the

00:56:59,210 --> 00:57:03,890
guy released one point 0 doesn't have

00:57:01,519 --> 00:57:06,349
that problem they actually left a bunch

00:57:03,890 --> 00:57:09,140
of colonel options open so if you Ray in

00:57:06,349 --> 00:57:11,569
a docker container as a privileged root

00:57:09,140 --> 00:57:13,190
user which you should never do advert

00:57:11,569 --> 00:57:16,349
then you could potentially actually

00:57:13,190 --> 00:57:18,779
bleed out into the host environment and

00:57:16,349 --> 00:57:20,460
cause a lot of nasty stuff that's the

00:57:18,779 --> 00:57:21,779
only security case that has been

00:57:20,460 --> 00:57:24,299
documented and has already been

00:57:21,779 --> 00:57:26,400
mitigated the good thing is there's

00:57:24,299 --> 00:57:28,979
actually an entire team that is focusing

00:57:26,400 --> 00:57:31,680
on doing security testing of this system

00:57:28,979 --> 00:57:33,420
because we've relied on like chroot and

00:57:31,680 --> 00:57:35,160
jails and all this stuff for many many

00:57:33,420 --> 00:57:37,499
years but there hasn't really been

00:57:35,160 --> 00:57:40,829
comprehensive studies as to in research

00:57:37,499 --> 00:57:43,200
as to what the security implications of

00:57:40,829 --> 00:57:45,329
these things are so you know Michael my

00:57:43,200 --> 00:57:46,799
thought is used cautiously because

00:57:45,329 --> 00:57:50,099
there's always a chance there's always a

00:57:46,799 --> 00:57:51,960
chance with VMs too and if somebody says

00:57:50,099 --> 00:57:54,150
that you can't bleed out of a vm you're

00:57:51,960 --> 00:57:59,890
a liar because I've seen it I've done it

00:57:54,150 --> 00:58:02,519
so yeah any other questions

00:57:59,890 --> 00:58:02,519
yes

00:58:04,130 --> 00:58:07,450
yes hug

00:58:13,680 --> 00:58:19,350
yes so so it's called a registry and you

00:58:17,160 --> 00:58:21,120
can't have a private registry the funny

00:58:19,350 --> 00:58:24,030
thing about it is the registry runs in a

00:58:21,120 --> 00:58:25,740
docker container of course yeah but yeah

00:58:24,030 --> 00:58:27,900
you can't have in fact I we've got one

00:58:25,740 --> 00:58:29,670
in my I've got one at my office I've got

00:58:27,900 --> 00:58:31,800
one at home I've got one on my personal

00:58:29,670 --> 00:58:34,830
system so i have all my my development

00:58:31,800 --> 00:58:37,110
of containers and images and then i can

00:58:34,830 --> 00:58:38,670
just push those up whenever I need if I

00:58:37,110 --> 00:58:41,070
want them publicly available but yeah

00:58:38,670 --> 00:58:43,680
you certainly can run this entire

00:58:41,070 --> 00:58:46,500
ecosystem in house which I highly

00:58:43,680 --> 00:58:49,010
recommend it so we're done I'm at a time

00:58:46,500 --> 00:58:49,010
I'll be outside

00:59:27,150 --> 00:59:31,420
your customers rely on your website or

00:59:29,920 --> 00:59:33,819
application if it's slower

00:59:31,420 --> 00:59:36,760
non-responsive it infuriates your users

00:59:33,819 --> 00:59:38,559
and costs you money keeping your

00:59:36,760 --> 00:59:42,080
business critical systems humming along

00:59:38,559 --> 00:59:44,390
requires insight into what they're doing

00:59:42,080 --> 00:59:46,340
your system metrics tells stories

00:59:44,390 --> 00:59:48,350
stories that can reveal performance

00:59:46,340 --> 00:59:50,690
bottlenecks resource limitations and

00:59:48,350 --> 00:59:52,250
other problems but how do you keep an

00:59:50,690 --> 00:59:54,890
eye on all of your systems performance

00:59:52,250 --> 00:59:57,920
metrics in real-time and record this

00:59:54,890 --> 00:59:59,690
data for later analysis enter longview

00:59:57,920 --> 01:00:01,700
the new way to see what's really going

00:59:59,690 --> 01:00:03,860
on under the hood the long view

01:00:01,700 --> 01:00:05,930
dashboard lets you visualize the status

01:00:03,860 --> 01:00:08,390
of all your systems providing you with a

01:00:05,930 --> 01:00:11,750
bird's-eye view of your entire fleet you

01:00:08,390 --> 01:00:14,330
can sort by cpu memory swap processes

01:00:11,750 --> 01:00:16,100
load and network usage click a specific

01:00:14,330 --> 01:00:18,500
system to access its individual

01:00:16,100 --> 01:00:21,010
dashboard then click and drag to zoom in

01:00:18,500 --> 01:00:23,420
on chokepoints and get more detail

01:00:21,010 --> 01:00:25,100
comprehensive network data including

01:00:23,420 --> 01:00:27,410
inbound and outbound traffic is

01:00:25,100 --> 01:00:28,970
available on the network tab and disk

01:00:27,410 --> 01:00:30,890
rights and free space on the disk

01:00:28,970 --> 01:00:33,740
stabbed while the process Explorer

01:00:30,890 --> 01:00:36,260
displays usage statistics for individual

01:00:33,740 --> 01:00:38,420
processes the system info tab shows

01:00:36,260 --> 01:00:40,670
listening services active connections

01:00:38,420 --> 01:00:42,800
and available updates adding long view

01:00:40,670 --> 01:00:44,510
to a system is easy just click the

01:00:42,800 --> 01:00:46,640
button copy the one line installation

01:00:44,510 --> 01:00:49,100
command then run the command on your

01:00:46,640 --> 01:00:50,780
linux system to complete the process the

01:00:49,100 --> 01:00:53,000
agent will begin collecting data and

01:00:50,780 --> 01:00:54,810
sending it to longview then the graphs

01:00:53,000 --> 01:00:57,390
start rolling

01:00:54,810 --> 01:00:59,760
use longview to gain visibility into

01:00:57,390 --> 01:01:03,500
your servers so when your website or app

01:00:59,760 --> 01:01:03,500

YouTube URL: https://www.youtube.com/watch?v=q5gFDUJDqj8


