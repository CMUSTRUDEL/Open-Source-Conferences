Title: 2012 SouthEast LinuxFest - Russell Bryant - Getting Started With OpenStack Essex on Fedora
Publication date: 2013-04-13
Playlist: 2012 SouthEast LinuxFest
Description: 
	2012 SouthEast LinuxFest
Russell Bryant
Getting Started With OpenStack Essex on Fedora
Captions: 
	00:00:00,000 --> 00:00:05,310
the following presentation was recorded

00:00:02,520 --> 00:00:08,069
the 2012 southeast linux fest in

00:00:05,310 --> 00:00:10,440
charlotte north carolina it is licensed

00:00:08,069 --> 00:00:12,120
under a creative commons license for

00:00:10,440 --> 00:00:17,609
more information about the southeast

00:00:12,120 --> 00:00:19,470
linux fest visit w wh linux pc org the

00:00:17,609 --> 00:00:22,350
southeast linux fest would like to thank

00:00:19,470 --> 00:00:26,480
the following diamond sponsors in 2012

00:00:22,350 --> 00:00:26,480
for helping make these videos possible

00:00:38,290 --> 00:00:42,670
everybody welcome to Southeast linux

00:00:40,060 --> 00:00:46,300
best just a minute here before Russell

00:00:42,670 --> 00:00:47,470
starts off there are surveys you have a

00:00:46,300 --> 00:00:49,810
full amount available at the

00:00:47,470 --> 00:00:51,910
registration desk fill out the survey

00:00:49,810 --> 00:00:53,830
put it in as a cardboard box stuff it in

00:00:51,910 --> 00:00:56,230
across the administration is this

00:00:53,830 --> 00:00:58,239
magically becomes your raffle ticket for

00:00:56,230 --> 00:01:00,489
this evening after the keynote speech

00:00:58,239 --> 00:01:02,530
will be a raffle giving away all kinds

00:01:00,489 --> 00:01:04,030
of cool prizes then the whole thing

00:01:02,530 --> 00:01:06,670
repeats again tomorrow there's another

00:01:04,030 --> 00:01:08,890
survey on Sunday and another raffle

00:01:06,670 --> 00:01:11,340
after lunch time on sunday with more

00:01:08,890 --> 00:01:14,050
crisis so you win lots of stuff so

00:01:11,340 --> 00:01:17,680
Russell bryant from red hats to talk

00:01:14,050 --> 00:01:19,600
about open sack so let's go great thank

00:01:17,680 --> 00:01:22,960
you very much thank you all for coming I

00:01:19,600 --> 00:01:25,450
appreciate you being here so my name is

00:01:22,960 --> 00:01:28,180
Russell Bryant I'm an engineer at Red

00:01:25,450 --> 00:01:29,830
Hat i joined Red Hat late last year and

00:01:28,180 --> 00:01:33,040
I've been working on the OpenStack

00:01:29,830 --> 00:01:35,560
project since roughly December of two

00:01:33,040 --> 00:01:38,770
thousand of last year and so before that

00:01:35,560 --> 00:01:40,720
I spent many years working for digium on

00:01:38,770 --> 00:01:42,880
the asterisk project and I still

00:01:40,720 --> 00:01:45,729
contribute some of that too so that's by

00:01:42,880 --> 00:01:47,530
my open source experience on on

00:01:45,729 --> 00:01:50,710
OpenStack I do a number of things

00:01:47,530 --> 00:01:52,630
primarily I work on the component called

00:01:50,710 --> 00:01:54,970
nova which I'll talk about more later

00:01:52,630 --> 00:01:57,729
explained us plane which what Nova is

00:01:54,970 --> 00:01:59,409
but I work on Nova a lot and I'm on the

00:01:57,729 --> 00:02:01,180
Nova Corps team which is the team of

00:01:59,409 --> 00:02:02,620
people responsible for reviewing all the

00:02:01,180 --> 00:02:05,110
changes that are submitted to Nova

00:02:02,620 --> 00:02:06,880
before they go in i'm also on the

00:02:05,110 --> 00:02:09,130
vulnerability management team so I

00:02:06,880 --> 00:02:11,769
handle the responsible disclosure

00:02:09,130 --> 00:02:13,000
process for any security vulnerabilities

00:02:11,769 --> 00:02:16,900
that are reported to the OpenStack

00:02:13,000 --> 00:02:20,290
project so with that so what I'm going

00:02:16,900 --> 00:02:22,750
to talk about today so my goal is you

00:02:20,290 --> 00:02:23,950
know is for people that may be a part of

00:02:22,750 --> 00:02:25,450
OpenStack but haven't really spent much

00:02:23,950 --> 00:02:26,830
time looking at it or working with it I

00:02:25,450 --> 00:02:29,380
want to give you a high-level idea of

00:02:26,830 --> 00:02:30,489
what it is so to start there and then

00:02:29,380 --> 00:02:32,110
I'm going to dive in because you know

00:02:30,489 --> 00:02:33,730
I'm an engineer and the way I like to

00:02:32,110 --> 00:02:36,010
learn about things is I want to start

00:02:33,730 --> 00:02:37,180
using it so i want to show you if if

00:02:36,010 --> 00:02:39,910
you're interested in trying out

00:02:37,180 --> 00:02:40,930
OpenStack i'm going to show you how to

00:02:39,910 --> 00:02:43,239
do that how to get it up and running

00:02:40,930 --> 00:02:46,389
roll pretty fast and start playing with

00:02:43,239 --> 00:02:48,070
it and hopefully i'm going to so after i

00:02:46,389 --> 00:02:50,139
go through that process and explain how

00:02:48,070 --> 00:02:51,580
to set it up i'm going to do it on my

00:02:50,139 --> 00:02:55,930
laptop here

00:02:51,580 --> 00:02:59,860
oh and and as live demos go you know of

00:02:55,930 --> 00:03:03,970
course it's going to work right so let's

00:02:59,860 --> 00:03:05,800
dive in so what is OpenStack I would say

00:03:03,970 --> 00:03:08,920
that it's the collection of services

00:03:05,800 --> 00:03:11,650
that provide infrastructure as a service

00:03:08,920 --> 00:03:13,560
so someone help me out here and tell me

00:03:11,650 --> 00:03:16,170
what infrastructure as a service is

00:03:13,560 --> 00:03:18,970
because I'm an engineer and not a

00:03:16,170 --> 00:03:21,100
marketing Wizards so I'd like to hear

00:03:18,970 --> 00:03:42,910
I'm sure someone here can give me a

00:03:21,100 --> 00:03:45,400
really good definition of great so you

00:03:42,910 --> 00:03:46,690
know he identified it as a service it

00:03:45,400 --> 00:03:49,870
provides virtual hardware that's

00:03:46,690 --> 00:03:55,180
providing you machines machines on

00:03:49,870 --> 00:03:56,680
demand and it is that and and and it had

00:03:55,180 --> 00:03:58,150
provide some other things too so so

00:03:56,680 --> 00:03:59,890
let's dive through and start looking at

00:03:58,150 --> 00:04:01,360
what what what specific services

00:03:59,890 --> 00:04:02,860
OpenStack down can provide well actually

00:04:01,360 --> 00:04:04,239
before we do that let's talk about the

00:04:02,860 --> 00:04:05,980
history of the project because it's um

00:04:04,239 --> 00:04:08,769
it's pretty interesting and it is fairly

00:04:05,980 --> 00:04:13,110
new still it was launched publicly at

00:04:08,769 --> 00:04:16,989
least in July 2010 by Rackspace and NASA

00:04:13,110 --> 00:04:20,260
and the project does six monthly cycles

00:04:16,989 --> 00:04:22,180
and the latest release Essex which was

00:04:20,260 --> 00:04:25,419
released in April had over 200

00:04:22,180 --> 00:04:26,919
contributors from 50 companies so in

00:04:25,419 --> 00:04:29,200
just a couple of years it's the

00:04:26,919 --> 00:04:30,580
community is really exploding there's a

00:04:29,200 --> 00:04:32,440
foundation that's been announced of the

00:04:30,580 --> 00:04:34,590
governance model while primarily driven

00:04:32,440 --> 00:04:36,669
by Rackspace up to this point is

00:04:34,590 --> 00:04:39,640
transitioning to a foundation model and

00:04:36,669 --> 00:04:40,870
a good number of large companies have

00:04:39,640 --> 00:04:43,030
signed up to participate in that

00:04:40,870 --> 00:04:45,729
foundation effort including my employer

00:04:43,030 --> 00:04:47,350
Red Hat who's signed on to be a platinum

00:04:45,729 --> 00:04:54,010
member but a number of others which you

00:04:47,350 --> 00:04:56,020
can see there so open stock is a sort of

00:04:54,010 --> 00:04:58,030
an umbrella project it's not you know

00:04:56,020 --> 00:04:59,650
OpenStack isn't is so it's not just like

00:04:58,030 --> 00:05:03,039
one piece of code that you get right

00:04:59,650 --> 00:05:04,270
it's a it's a collection of projects so

00:05:03,039 --> 00:05:04,780
let's go through and talk about what

00:05:04,270 --> 00:05:06,610
those were

00:05:04,780 --> 00:05:08,290
so I mentioned before that Nova is the

00:05:06,610 --> 00:05:12,130
the project that I primarily work on an

00:05:08,290 --> 00:05:14,440
OpenStack and it's the compute service

00:05:12,130 --> 00:05:17,919
so if you're familiar with Amazon's

00:05:14,440 --> 00:05:21,190
services Nova would be a somewhat

00:05:17,919 --> 00:05:23,770
analogous to Amazon ec2 so it provides

00:05:21,190 --> 00:05:26,200
you the virtual machines networking

00:05:23,770 --> 00:05:27,970
amongst those virtual machines storage

00:05:26,200 --> 00:05:30,639
for the virtual machines that sort of

00:05:27,970 --> 00:05:33,010
thing it's the largest project with an

00:05:30,639 --> 00:05:34,510
OpenStack some of the proximal the other

00:05:33,010 --> 00:05:37,030
projects oh it's actually a lot of them

00:05:34,510 --> 00:05:38,740
sort of come out of Nova so like we sort

00:05:37,030 --> 00:05:40,390
of Nova keeps growing and then we

00:05:38,740 --> 00:05:42,160
identify a piece that's as you know what

00:05:40,390 --> 00:05:43,720
that that would be a good thing that

00:05:42,160 --> 00:05:47,080
they can be self-contained we can split

00:05:43,720 --> 00:05:50,770
that out make it a new project it

00:05:47,080 --> 00:05:52,480
supports so you know opens Nova is sort

00:05:50,770 --> 00:05:55,120
of this orchestration management layer

00:05:52,480 --> 00:05:57,850
it's not the hypervisor the hypervisor

00:05:55,120 --> 00:06:00,510
is the layer below that and supports

00:05:57,850 --> 00:06:03,790
multiple hypervisors at sports kvm and

00:06:00,510 --> 00:06:05,440
lxc ends in I would say you know those

00:06:03,790 --> 00:06:08,169
hypervisors are the ones that are most

00:06:05,440 --> 00:06:09,669
supported supposedly it supports VMware

00:06:08,169 --> 00:06:12,280
let's be honest i don't know that i've

00:06:09,669 --> 00:06:15,100
seen anyone actually using it so i

00:06:12,280 --> 00:06:16,870
wouldn't I don't I don't know that I can

00:06:15,100 --> 00:06:19,300
trust it or vouch for it in any way and

00:06:16,870 --> 00:06:21,750
hyper-v support used to be there got

00:06:19,300 --> 00:06:24,760
removed and is supposedly coming back

00:06:21,750 --> 00:06:27,160
once it got Microsoft's attention when

00:06:24,760 --> 00:06:28,780
it got removed so because it wasn't

00:06:27,160 --> 00:06:32,590
being maintained and didn't work anymore

00:06:28,780 --> 00:06:34,180
so we'll see there there are a number of

00:06:32,590 --> 00:06:39,370
other project open source projects in

00:06:34,180 --> 00:06:41,020
this space and some of them like you

00:06:39,370 --> 00:06:44,530
collapse fleet eucalyptus for example

00:06:41,020 --> 00:06:47,080
focuses on the ec2 API OpenStack has

00:06:44,530 --> 00:06:51,160
supports the ec2 API but has its own API

00:06:47,080 --> 00:06:52,780
the open the OpenStack API that there's

00:06:51,160 --> 00:06:56,740
the ones primarily focused on but easy

00:06:52,780 --> 00:06:59,919
to is supported as well ok so that was

00:06:56,740 --> 00:07:02,710
no bus Swift is the the next piece so

00:06:59,919 --> 00:07:05,560
it's analogous to Amazon's s3 service it

00:07:02,710 --> 00:07:08,470
is object storage there's a native Swift

00:07:05,560 --> 00:07:10,180
API but does offer the Amazon API

00:07:08,470 --> 00:07:14,380
compatibility as well so it supports the

00:07:10,180 --> 00:07:16,930
s3 API Rackspace cloud files uses this

00:07:14,380 --> 00:07:18,610
another example user of Swift is

00:07:16,930 --> 00:07:21,189
Wikipedia Wikipedia is

00:07:18,610 --> 00:07:23,229
images are served up from or maybe only

00:07:21,189 --> 00:07:25,060
the image thumbnails in any case some

00:07:23,229 --> 00:07:30,479
subset of their images at least or

00:07:25,060 --> 00:07:33,490
served up by a swift next component is

00:07:30,479 --> 00:07:35,919
glance so glance is an image service so

00:07:33,490 --> 00:07:38,800
when you need to start a virtual machine

00:07:35,919 --> 00:07:40,210
in Nova you need to have what you need

00:07:38,800 --> 00:07:42,370
to have an image to start that from and

00:07:40,210 --> 00:07:45,699
so glances is a service that's the

00:07:42,370 --> 00:07:47,020
registry of those images so you can you

00:07:45,699 --> 00:07:49,150
create your images locally using

00:07:47,020 --> 00:07:51,159
whatever image creation tools you'd like

00:07:49,150 --> 00:07:52,599
to use and you upload them to glance and

00:07:51,159 --> 00:07:55,900
then they are available to for you to

00:07:52,599 --> 00:07:58,870
use to create so now the images can be

00:07:55,900 --> 00:08:00,250
stored it has this concept of storage

00:07:58,870 --> 00:08:01,990
backends and there's multiple storage

00:08:00,250 --> 00:08:03,610
backends the most common ones to use or

00:08:01,990 --> 00:08:05,349
just file system storage the uploaded

00:08:03,610 --> 00:08:07,900
image it's just stored on the local file

00:08:05,349 --> 00:08:10,900
system we're swept I mean where glance

00:08:07,900 --> 00:08:12,279
is running and a swift is the most

00:08:10,900 --> 00:08:14,020
common one to use once you start scaling

00:08:12,279 --> 00:08:16,810
glance up and you need much more massive

00:08:14,020 --> 00:08:18,430
storage for images then it just uses

00:08:16,810 --> 00:08:20,169
Swift on the backend for storing that

00:08:18,430 --> 00:08:24,659
and let's Swift deal with the

00:08:20,169 --> 00:08:27,400
scalability Keystone so Keystone is a

00:08:24,659 --> 00:08:31,120
service that provides common

00:08:27,400 --> 00:08:33,099
authentication for all the services so

00:08:31,120 --> 00:08:34,599
before you talk to any of the api's of

00:08:33,099 --> 00:08:38,169
any of these services you authenticate

00:08:34,599 --> 00:08:42,250
with Keystone that's its purpose in life

00:08:38,169 --> 00:08:44,320
and there is a web UI and that projects

00:08:42,250 --> 00:08:47,670
code name is horizon and it's often

00:08:44,320 --> 00:08:50,949
referred to as the dashboard here's a

00:08:47,670 --> 00:08:53,079
screenshot that somewhat can see most of

00:08:50,949 --> 00:08:54,579
it but you know I'll pull it up later

00:08:53,079 --> 00:08:57,220
once i get it running on my laptop to

00:08:54,579 --> 00:08:58,769
show you but it's pretty web UI i didn't

00:08:57,220 --> 00:09:00,940
mention this but you know if you're a

00:08:58,769 --> 00:09:03,130
you're a developer i mean all of

00:09:00,940 --> 00:09:08,519
OpenStack is written in python and so

00:09:03,130 --> 00:09:12,970
this is a django project the web UI so

00:09:08,519 --> 00:09:15,579
these five components are the major

00:09:12,970 --> 00:09:16,959
components of open stock the one up top

00:09:15,579 --> 00:09:19,089
there the dashboard that's the web UI

00:09:16,959 --> 00:09:21,160
and then the 33 there and the middle

00:09:19,089 --> 00:09:23,110
ours from the core services the compute

00:09:21,160 --> 00:09:25,360
stuff managing virtual machines the

00:09:23,110 --> 00:09:28,390
image service for managing or virtual

00:09:25,360 --> 00:09:29,740
machine images and Swift the the object

00:09:28,390 --> 00:09:31,270
store the object storage and then

00:09:29,740 --> 00:09:32,140
they're all using this common common

00:09:31,270 --> 00:09:35,850
identity server

00:09:32,140 --> 00:09:38,920
for authentication now when i get to

00:09:35,850 --> 00:09:41,730
doing the the example set up of this i'm

00:09:38,920 --> 00:09:46,570
going to do everything except for swift

00:09:41,730 --> 00:09:48,490
mainly because of time constraints okay

00:09:46,570 --> 00:09:51,880
so i'm going to go through a basic

00:09:48,490 --> 00:09:54,460
installation and i'm going to do this in

00:09:51,880 --> 00:09:55,840
a fairly manual way because i think this

00:09:54,460 --> 00:09:57,310
is a good way if you're just getting

00:09:55,840 --> 00:09:58,540
started you want to learn about it you

00:09:57,310 --> 00:10:01,810
know getting the install the package

00:09:58,540 --> 00:10:03,730
sins installed manually and configuring

00:10:01,810 --> 00:10:05,020
that the stuff manually is a good way to

00:10:03,730 --> 00:10:07,450
learn about the pieces and how they fit

00:10:05,020 --> 00:10:08,860
together we know when you move to a

00:10:07,450 --> 00:10:09,880
production environment first of all you

00:10:08,860 --> 00:10:12,310
probably not going to just run it on

00:10:09,880 --> 00:10:13,630
like a laptop like I'm doing and there's

00:10:12,310 --> 00:10:15,850
you know there's good ways to automatic

00:10:13,630 --> 00:10:18,010
there's really good puppet modules for

00:10:15,850 --> 00:10:21,220
deploying an OpenStack people use chef

00:10:18,010 --> 00:10:24,340
for it things like that but we're going

00:10:21,220 --> 00:10:25,570
to do it as at least a way for what I

00:10:24,340 --> 00:10:26,620
think is a really good way if you just

00:10:25,570 --> 00:10:28,000
you know what I've heard about this

00:10:26,620 --> 00:10:29,440
thing I'm interested now I want to

00:10:28,000 --> 00:10:34,380
actually get it running and start

00:10:29,440 --> 00:10:36,850
playing with it so let's dive in to that

00:10:34,380 --> 00:10:38,590
so the first thing that you got to do is

00:10:36,850 --> 00:10:40,960
install some packages so and by the way

00:10:38,590 --> 00:10:42,040
i'm using fedora 17 is the base here so

00:10:40,960 --> 00:10:44,830
well you know all these commands are

00:10:42,040 --> 00:10:47,470
going to eat and test it on i have i'm

00:10:44,830 --> 00:10:51,900
going to run on floor 17 install

00:10:47,470 --> 00:10:54,190
packages so all these bottom ones

00:10:51,900 --> 00:10:56,260
hopefully you can read that okay are all

00:10:54,190 --> 00:10:58,330
open stack packages you see Nova glance

00:10:56,260 --> 00:11:00,100
Keystone and dashboard and then this

00:10:58,330 --> 00:11:07,060
utilice package it has some utilities

00:11:00,100 --> 00:11:09,940
yes this is these all of these packages

00:11:07,060 --> 00:11:11,140
are in the corridor excuse me Lily

00:11:09,940 --> 00:11:12,040
repeat the question and by the way if

00:11:11,140 --> 00:11:15,160
you have any questions along the way

00:11:12,040 --> 00:11:16,660
please feel free to to ask you know

00:11:15,160 --> 00:11:18,280
don't need to hold him off so his

00:11:16,660 --> 00:11:20,080
question was are these are these

00:11:18,280 --> 00:11:22,120
packages all in fedora or do you have to

00:11:20,080 --> 00:11:24,070
enable some other repository and all of

00:11:22,120 --> 00:11:28,770
these packages are in fedora so this is

00:11:24,070 --> 00:11:28,770
a just on a base fedora 17 install yeah

00:11:30,480 --> 00:11:35,949
the question was are these packages also

00:11:32,980 --> 00:11:39,220
in centos orrell these packages are in

00:11:35,949 --> 00:11:40,720
the Apple repository which is something

00:11:39,220 --> 00:11:42,459
provided if you're familiar that it

00:11:40,720 --> 00:11:45,999
stands for extra packages for enterprise

00:11:42,459 --> 00:11:47,980
linux so they are available for use with

00:11:45,999 --> 00:11:50,980
those platforms by through the apple and

00:11:47,980 --> 00:11:52,360
it's the same the same packages as the

00:11:50,980 --> 00:11:54,040
one I'm using here are the same version

00:11:52,360 --> 00:11:59,170
of OpenStack and so forth is available

00:11:54,040 --> 00:12:02,949
there yes question I can make them

00:11:59,170 --> 00:12:05,049
available I haven't planned sure there's

00:12:02,949 --> 00:12:06,759
also there's also a really good wiki

00:12:05,049 --> 00:12:09,100
page that has these instructions which

00:12:06,759 --> 00:12:11,309
maybe it will be a much easier format to

00:12:09,100 --> 00:12:13,600
follow and i'll have a link to that

00:12:11,309 --> 00:12:14,889
later but like if you google the title

00:12:13,600 --> 00:12:17,410
of the talk getting started with

00:12:14,889 --> 00:12:24,579
OpenStack on fedora 17 you'll probably

00:12:17,410 --> 00:12:26,230
find the wiki page yes Robin Robin asked

00:12:24,579 --> 00:12:28,420
what version of OpenStack is this is

00:12:26,230 --> 00:12:31,269
that the new one or the old one it's the

00:12:28,420 --> 00:12:34,809
newest one it is OpenStack Essex the one

00:12:31,269 --> 00:12:44,939
that was released in April any other

00:12:34,809 --> 00:12:47,079
questions for week two you yes sure sure

00:12:44,939 --> 00:12:49,239
sure so his question was how does

00:12:47,079 --> 00:12:50,589
OpenStack fit with cloud forms because

00:12:49,239 --> 00:12:52,480
when he thinks of red hat he thinks of

00:12:50,589 --> 00:12:56,410
cloud forms so there are different

00:12:52,480 --> 00:12:58,779
layers so so Claude forms is a is more

00:12:56,410 --> 00:13:00,489
of an orchestration layer before for

00:12:58,779 --> 00:13:02,649
doing deployments on different clouds

00:13:00,489 --> 00:13:05,019
and OpenStack is a layer below that it

00:13:02,649 --> 00:13:07,600
would be infrastructure we're actually

00:13:05,019 --> 00:13:11,019
building a cloud deployment so you would

00:13:07,600 --> 00:13:12,309
use you could say have an example would

00:13:11,019 --> 00:13:14,499
be you could have OpenStack running

00:13:12,309 --> 00:13:18,269
internally in your organization and then

00:13:14,499 --> 00:13:21,040
you could use cloud forms to you know

00:13:18,269 --> 00:13:25,989
deploy to your open OpenStack instance

00:13:21,040 --> 00:13:27,970
or deploy to whatever other all I mean

00:13:25,989 --> 00:13:31,509
it sports a bunch of different platforms

00:13:27,970 --> 00:13:33,220
it would allow you to migrate your stuff

00:13:31,509 --> 00:13:35,319
between you know your local openstack

00:13:33,220 --> 00:13:39,600
cloud and some public cloud and sort of

00:13:35,319 --> 00:13:41,750
thing so it makes sense cool okay so

00:13:39,600 --> 00:13:44,090
OpenStack packages

00:13:41,750 --> 00:13:46,130
a group of packages refer to as

00:13:44,090 --> 00:13:48,860
virtualization that's going to get all

00:13:46,130 --> 00:13:52,600
the stuff to require to run kvm virtual

00:13:48,860 --> 00:13:56,090
machines libvirt that's where stuff and

00:13:52,600 --> 00:13:57,290
then a couple of other services that are

00:13:56,090 --> 00:13:59,450
going to utilize which I'll talk about

00:13:57,290 --> 00:14:01,250
how their use later well my sequel

00:13:59,450 --> 00:14:05,090
server I'm in it's a database so it's

00:14:01,250 --> 00:14:08,540
uses the database but cupid is a message

00:14:05,090 --> 00:14:12,560
queue system it's it's an implementation

00:14:08,540 --> 00:14:15,260
of the amqp spec the advanced message

00:14:12,560 --> 00:14:19,550
queuing protocol so OpenStack being a

00:14:15,260 --> 00:14:21,500
highly scalable distributed system amqp

00:14:19,550 --> 00:14:23,690
is used as the messaging framework

00:14:21,500 --> 00:14:26,510
between these services talk about so

00:14:23,690 --> 00:14:28,430
more about that later too ok so we have

00:14:26,510 --> 00:14:31,340
packages installed at least in theory we

00:14:28,430 --> 00:14:34,520
do so we're starting to set up some

00:14:31,340 --> 00:14:39,950
supporting services start libvirt and

00:14:34,520 --> 00:14:43,420
start cupid and start my sequel and load

00:14:39,950 --> 00:14:46,010
a kernel module network block device

00:14:43,420 --> 00:14:51,860
which is used for doing some injection

00:14:46,010 --> 00:14:53,300
into machines like injecting SSH keys so

00:14:51,860 --> 00:14:54,230
here's what we have so far exon terribly

00:14:53,300 --> 00:14:55,670
exciting because it doesn't include

00:14:54,230 --> 00:14:56,900
OpenStack at all we have three

00:14:55,670 --> 00:14:59,360
supporting services running we have

00:14:56,900 --> 00:15:00,970
libvirt which is an service provides an

00:14:59,360 --> 00:15:04,640
API for starting virtual machines a

00:15:00,970 --> 00:15:08,420
database and a message system messaging

00:15:04,640 --> 00:15:10,670
system ok so now we get to dive into

00:15:08,420 --> 00:15:12,680
setting up OpenStack components and

00:15:10,670 --> 00:15:15,710
Keystone does anyone remember what

00:15:12,680 --> 00:15:17,780
Keystone is identity ok excellent so

00:15:15,710 --> 00:15:20,510
Keystone is the common identity service

00:15:17,780 --> 00:15:21,650
for OpenStack and so since it's used by

00:15:20,510 --> 00:15:24,830
all these other services we're gonna

00:15:21,650 --> 00:15:27,220
start with the first setup Keystone ok

00:15:24,830 --> 00:15:30,290
first command willing to run is a

00:15:27,220 --> 00:15:32,330
utility called an OpenStack DB which is

00:15:30,290 --> 00:15:34,339
in the comes from the OpenStack utilice

00:15:32,330 --> 00:15:37,520
package it's something we added in our

00:15:34,339 --> 00:15:38,870
and Fedora just to make setting up the

00:15:37,520 --> 00:15:42,440
databases for these components easier

00:15:38,870 --> 00:15:43,339
yes question yes they're all in a wiki

00:15:42,440 --> 00:15:46,970
page and i'll have a link to the wiki

00:15:43,339 --> 00:15:48,860
page when i get to the end yes so run

00:15:46,970 --> 00:15:50,780
its OpenStack DB thing and it's going to

00:15:48,860 --> 00:15:54,860
create the database for Keystone and

00:15:50,780 --> 00:15:55,720
initialize the tables and now so we're

00:15:54,860 --> 00:15:59,500
going to create this

00:15:55,720 --> 00:16:04,180
l called Keystone RC because I mean

00:15:59,500 --> 00:16:05,470
OpenStack has a web a web UI I think but

00:16:04,180 --> 00:16:07,209
I'm going to do everything for most

00:16:05,470 --> 00:16:09,189
things from the command line and this is

00:16:07,209 --> 00:16:11,050
just going to set I'm gonna have a file

00:16:09,189 --> 00:16:13,509
sitting on the system that's going to

00:16:11,050 --> 00:16:15,850
set up my environment for running the

00:16:13,509 --> 00:16:18,699
command line tools the most important

00:16:15,850 --> 00:16:22,149
things being the these last ones a

00:16:18,699 --> 00:16:28,389
username a very bad password and the URL

00:16:22,149 --> 00:16:30,250
for how to talk to Keystone and I can so

00:16:28,389 --> 00:16:32,230
now i'm going to you know source that

00:16:30,250 --> 00:16:35,370
file so i have those variables in my

00:16:32,230 --> 00:16:39,339
environment and start setting some

00:16:35,370 --> 00:16:42,100
values in the Keystone config will set

00:16:39,339 --> 00:16:44,920
one value so when you first start

00:16:42,100 --> 00:16:46,449
Keystone and has no users so when it has

00:16:44,920 --> 00:16:48,310
no users you can't authenticate as a

00:16:46,449 --> 00:16:49,810
user to create users so there's sort of

00:16:48,310 --> 00:16:52,389
this chicken and egg problem so that's

00:16:49,810 --> 00:16:53,769
what this admin token thing is about you

00:16:52,389 --> 00:16:56,079
put this advant oak in the configuration

00:16:53,769 --> 00:16:57,699
and the very first you know time you

00:16:56,079 --> 00:16:59,470
need to go create that first user

00:16:57,699 --> 00:17:06,750
probably an administrator you use this

00:16:59,470 --> 00:17:06,750
admin token to talk to Keystone yes yes

00:17:07,550 --> 00:17:17,120
a very bad pass that's I mean no it's

00:17:15,530 --> 00:17:18,740
it's it's it's plain text in the

00:17:17,120 --> 00:17:21,200
environment I mean this isn't the only

00:17:18,740 --> 00:17:23,780
way to do it this is just like you know

00:17:21,200 --> 00:17:26,390
getting started quickly on my laptop so

00:17:23,780 --> 00:17:29,480
you don't have to put a plaintext

00:17:26,390 --> 00:17:32,330
password in your environment but I do

00:17:29,480 --> 00:17:34,370
because it's quick and easy for testing

00:17:32,330 --> 00:17:37,400
here okay and we're to start the

00:17:34,370 --> 00:17:40,520
Keystone service ok so there's another

00:17:37,400 --> 00:17:42,730
script in in fedora that makes getting

00:17:40,520 --> 00:17:45,800
started a bit easier it's called the

00:17:42,730 --> 00:17:47,960
OpenStack Keystone sample data script so

00:17:45,800 --> 00:17:50,750
this goes through and creates a few

00:17:47,960 --> 00:17:53,630
users creates an administrator creates a

00:17:50,750 --> 00:17:55,190
demo user that sort of stuff it would be

00:17:53,630 --> 00:17:56,360
maybe like 20 commands to do this

00:17:55,190 --> 00:17:57,800
manually so we're just gonna run this

00:17:56,360 --> 00:17:59,030
little helper and get some users created

00:17:57,800 --> 00:18:03,530
so that we can move on to the more fun

00:17:59,030 --> 00:18:06,200
stuff so Keystone is started and running

00:18:03,530 --> 00:18:08,870
we think to verify it you can run this

00:18:06,200 --> 00:18:10,730
command Keystone user list and this is

00:18:08,870 --> 00:18:12,770
the output you should see and these are

00:18:10,730 --> 00:18:14,990
the four users that that that sample

00:18:12,770 --> 00:18:18,530
data script created it created a glance

00:18:14,990 --> 00:18:20,630
user and a nova user those two are used

00:18:18,530 --> 00:18:23,450
so the glance and Nova services

00:18:20,630 --> 00:18:25,090
themselves will have a username and

00:18:23,450 --> 00:18:29,210
password that they use to talk to

00:18:25,090 --> 00:18:31,580
Keystone and then these two others which

00:18:29,210 --> 00:18:33,410
would be a demo user which be sort of an

00:18:31,580 --> 00:18:38,870
example regular user and an

00:18:33,410 --> 00:18:42,620
administrator so here's a picture of

00:18:38,870 --> 00:18:45,290
what we have set up so far we have the

00:18:42,620 --> 00:18:47,870
single Keystone service running which is

00:18:45,290 --> 00:18:49,820
using database on the back end and then

00:18:47,870 --> 00:18:51,710
it has a public rest interface that you

00:18:49,820 --> 00:18:54,680
can use to talk to it the command line

00:18:51,710 --> 00:18:57,650
tools of course are just an easy way to

00:18:54,680 --> 00:19:01,340
talk to that API and so that's what i'll

00:18:57,650 --> 00:19:06,800
be using next service glance what's

00:19:01,340 --> 00:19:08,240
glance image Amit image creation so it's

00:19:06,800 --> 00:19:10,190
not quite an image creation it's it's an

00:19:08,240 --> 00:19:11,960
image registry so you have to image

00:19:10,190 --> 00:19:14,930
creation is left up to you there's no

00:19:11,960 --> 00:19:16,670
OpenStack services that help really help

00:19:14,930 --> 00:19:18,410
you create your images but there's lots

00:19:16,670 --> 00:19:20,210
of tools that available to do that but

00:19:18,410 --> 00:19:21,140
it's the so you've made an image and now

00:19:20,210 --> 00:19:23,450
you want to upload it so

00:19:21,140 --> 00:19:25,760
it's usable when you want to go to

00:19:23,450 --> 00:19:29,030
create a virtual machine so set up

00:19:25,760 --> 00:19:30,560
glance again run this OpenStack DB

00:19:29,030 --> 00:19:32,750
utility it's going to create the glance

00:19:30,560 --> 00:19:37,400
my sequel database and initialize the

00:19:32,750 --> 00:19:39,830
tables and now we have to tell glance to

00:19:37,400 --> 00:19:44,870
use Keystone so there's a number of

00:19:39,830 --> 00:19:46,820
config options here it you really don't

00:19:44,870 --> 00:19:48,440
have to look you don't have to look at

00:19:46,820 --> 00:19:50,480
these in painful detail but the

00:19:48,440 --> 00:19:51,800
high-level idea here is we're going to

00:19:50,480 --> 00:19:53,330
tell it we're going to tell glance that

00:19:51,800 --> 00:19:55,490
yes we're using Keystone for

00:19:53,330 --> 00:19:58,670
authentication and here is your account

00:19:55,490 --> 00:20:00,670
to for talking to Keystone because what

00:19:58,670 --> 00:20:03,590
happens is when when you make a request

00:20:00,670 --> 00:20:05,540
well first so as a user I authenticate

00:20:03,590 --> 00:20:07,340
to Keystone in keystone gives me a token

00:20:05,540 --> 00:20:08,990
and that so that's what I hold on to

00:20:07,340 --> 00:20:10,790
after I've authenticated and then I go

00:20:08,990 --> 00:20:12,800
talk to glance and I say hey glance I

00:20:10,790 --> 00:20:14,480
want to do this action and here's my

00:20:12,800 --> 00:20:16,640
token and glance has to turn into

00:20:14,480 --> 00:20:18,200
keystone say is this token valid and so

00:20:16,640 --> 00:20:21,200
that's when the glance that's when

00:20:18,200 --> 00:20:26,030
glances account for Keystone comes in

00:20:21,200 --> 00:20:27,860
that flow makes some sense ok so we're

00:20:26,030 --> 00:20:29,750
start so glance has two services there's

00:20:27,860 --> 00:20:32,920
a glance API service and a glance

00:20:29,750 --> 00:20:35,810
registry service and we start them both

00:20:32,920 --> 00:20:37,970
it's a bit of a side note you're asking

00:20:35,810 --> 00:20:40,580
about support on centos and rail all

00:20:37,970 --> 00:20:43,580
these instructions should work on that

00:20:40,580 --> 00:20:45,440
too except for these these commands that

00:20:43,580 --> 00:20:49,280
mean it's just service star instead of

00:20:45,440 --> 00:20:50,720
the new system B version so i think i

00:20:49,280 --> 00:20:53,570
think that's that should be the only

00:20:50,720 --> 00:20:55,190
difference than the instructions ok so

00:20:53,570 --> 00:20:56,720
we started the services now we want to

00:20:55,190 --> 00:20:58,910
verify it so we'll run this command

00:20:56,720 --> 00:21:00,590
called glance index and it provides no

00:20:58,910 --> 00:21:01,850
output what glance index should show is

00:21:00,590 --> 00:21:03,890
a list of all the images that have been

00:21:01,850 --> 00:21:06,530
uploaded but i haven't uploaded any so

00:21:03,890 --> 00:21:08,810
it's empty but if glance wasn't working

00:21:06,530 --> 00:21:11,480
we'd get some error but no output means

00:21:08,810 --> 00:21:13,520
it's good so next so what do we have set

00:21:11,480 --> 00:21:14,900
up so far we've installed and started

00:21:13,520 --> 00:21:16,100
Keystone will actually have installed

00:21:14,900 --> 00:21:17,930
everything but whatever we configured

00:21:16,100 --> 00:21:19,670
and started we configured in started

00:21:17,930 --> 00:21:22,520
Keystone and we configured it started

00:21:19,670 --> 00:21:24,890
glance and so like before we still have

00:21:22,520 --> 00:21:27,130
we have Keystone using the database we

00:21:24,890 --> 00:21:30,020
have a glance API service that's this

00:21:27,130 --> 00:21:32,570
exposing the rest api to the to the

00:21:30,020 --> 00:21:33,680
world and then then behind that as a

00:21:32,570 --> 00:21:35,990
private

00:21:33,680 --> 00:21:38,390
interface there's this client registry

00:21:35,990 --> 00:21:40,370
service that's responsible for keeping

00:21:38,390 --> 00:21:47,650
track of image metadata which is stored

00:21:40,370 --> 00:21:47,650
in the database on to Nova what's Nova

00:21:48,160 --> 00:21:54,350
compute yes Nova is the compute service

00:21:50,660 --> 00:21:59,990
so for starting virtual machines Nova is

00:21:54,350 --> 00:22:02,330
a it's the most complicated one so the

00:21:59,990 --> 00:22:04,040
setup starts the same as the others is

00:22:02,330 --> 00:22:05,390
an OpenStack DB utility in four door

00:22:04,040 --> 00:22:11,210
that you can use that creates innova

00:22:05,390 --> 00:22:14,480
database and initializes tables we had

00:22:11,210 --> 00:22:16,640
to configure glance to talk to Keystone

00:22:14,480 --> 00:22:18,170
so there's a number of these

00:22:16,640 --> 00:22:20,750
configuration options are about the same

00:22:18,170 --> 00:22:23,030
thing except for this last one this last

00:22:20,750 --> 00:22:24,800
one is worth mentioning there's an

00:22:23,030 --> 00:22:27,020
option we have to set called fixed range

00:22:24,800 --> 00:22:28,850
for nova which says here's a range of IP

00:22:27,020 --> 00:22:30,080
addresses that you get you can use to

00:22:28,850 --> 00:22:32,510
assign to virtual machines when you

00:22:30,080 --> 00:22:34,880
start virtual machines so that's what

00:22:32,510 --> 00:22:37,760
that option is and I did check and that

00:22:34,880 --> 00:22:40,130
does not conflict with the with any

00:22:37,760 --> 00:22:41,320
network my laptop is using show that's

00:22:40,130 --> 00:22:44,240
what I'll use here in a minute and

00:22:41,320 --> 00:22:49,330
should be fine so we have to set up an L

00:22:44,240 --> 00:22:53,180
volume group Nova supports so similar to

00:22:49,330 --> 00:22:55,310
Amazon's EBS supports volumes that you

00:22:53,180 --> 00:22:57,020
can attach two instances and there's

00:22:55,310 --> 00:22:59,480
lots of different like backends for

00:22:57,020 --> 00:23:02,150
supporting that the default one just

00:22:59,480 --> 00:23:05,000
expects that there's a lvm volume group

00:23:02,150 --> 00:23:08,150
called Nova volume and I mean it carves

00:23:05,000 --> 00:23:10,600
out volumes within that volume group to

00:23:08,150 --> 00:23:13,220
expose two instances so this is

00:23:10,600 --> 00:23:15,230
certainly not what I'm going to these

00:23:13,220 --> 00:23:17,600
commands are certainly for testing only

00:23:15,230 --> 00:23:19,130
and not for what you should do in any

00:23:17,600 --> 00:23:20,690
sort of real installation but it's cool

00:23:19,130 --> 00:23:24,800
way to get up and running in for testing

00:23:20,690 --> 00:23:26,810
so this first command truncate it's

00:23:24,800 --> 00:23:30,440
creating a sparse twenty gigabyte file

00:23:26,810 --> 00:23:31,760
in the file system so it's not actually

00:23:30,440 --> 00:23:34,940
going to take out 20 gigs until you

00:23:31,760 --> 00:23:37,340
actually until you start using it and

00:23:34,940 --> 00:23:38,960
then this sort of embedded command here

00:23:37,340 --> 00:23:41,840
at the ello set up it's going to create

00:23:38,960 --> 00:23:44,240
a loopback device on that file and then

00:23:41,840 --> 00:23:46,410
create a volume group well called Nova

00:23:44,240 --> 00:23:48,850
volumes using that device so

00:23:46,410 --> 00:23:52,660
it's a way it's a quick way to get up

00:23:48,850 --> 00:23:56,110
and running for growing volumes but now

00:23:52,660 --> 00:24:02,920
you wouldn't do this in production okay

00:23:56,110 --> 00:24:04,360
so yes question yeah yes so this

00:24:02,920 --> 00:24:05,680
question was you can just use a real

00:24:04,360 --> 00:24:09,310
logical volume off the hard drive right

00:24:05,680 --> 00:24:10,600
and absolutely you can so that would be

00:24:09,310 --> 00:24:12,700
that would be that yeah this is sort of

00:24:10,600 --> 00:24:14,890
the quickie like like I've got my laptop

00:24:12,700 --> 00:24:17,380
setup and I'm using all the hard drive

00:24:14,890 --> 00:24:18,880
space and I just want to all my laptop

00:24:17,380 --> 00:24:20,080
right now get it up installed up and

00:24:18,880 --> 00:24:24,210
running and so this is just you know

00:24:20,080 --> 00:24:24,210
quick hackney way to do it yes question

00:24:31,320 --> 00:24:35,440
does it neat the question was does it

00:24:33,460 --> 00:24:39,520
need a dedicated lvm volume group and it

00:24:35,440 --> 00:24:44,170
does it expects a its own volume group

00:24:39,520 --> 00:24:47,470
that it can carve stuff out of ok so

00:24:44,170 --> 00:24:51,100
Nova has these seven services that I'm

00:24:47,470 --> 00:24:52,600
going to start so you start them all

00:24:51,100 --> 00:24:53,950
normally you wouldn't you wouldn't

00:24:52,600 --> 00:24:55,330
necessarily be run all these on one

00:24:53,950 --> 00:24:57,040
machine if you're building out a more

00:24:55,330 --> 00:24:59,350
complex deployment involve multiple

00:24:57,040 --> 00:25:01,300
machines but for my laptop just how to

00:24:59,350 --> 00:25:03,850
start everything so so we're going to do

00:25:01,300 --> 00:25:05,890
and now that it's all running let's make

00:25:03,850 --> 00:25:07,960
sure it actually works run one command

00:25:05,890 --> 00:25:09,940
real quick no the list which should list

00:25:07,960 --> 00:25:13,720
the running instances there are none yet

00:25:09,940 --> 00:25:16,420
so it's empty and here's a picture of

00:25:13,720 --> 00:25:18,910
Nova so it doesn't it didn't even bother

00:25:16,420 --> 00:25:21,970
including a keystone and glance here

00:25:18,910 --> 00:25:23,710
because sort of only so much room at all

00:25:21,970 --> 00:25:24,940
I'll walk through this this architecture

00:25:23,710 --> 00:25:27,220
an event please feel free to stop me and

00:25:24,940 --> 00:25:29,590
ask any questions of the different

00:25:27,220 --> 00:25:32,230
components here but starting on on the

00:25:29,590 --> 00:25:35,140
left you have there's a REST API that's

00:25:32,230 --> 00:25:37,320
HTTP so in this lb would be a load

00:25:35,140 --> 00:25:39,940
balancer so perhaps in a much more

00:25:37,320 --> 00:25:42,130
scaled out deployment you might load

00:25:39,940 --> 00:25:44,830
balance across multiple instances of the

00:25:42,130 --> 00:25:46,420
API service then here this would be the

00:25:44,830 --> 00:25:48,340
API service there's a few different

00:25:46,420 --> 00:25:50,020
api's there's well there's an API for

00:25:48,340 --> 00:25:51,490
managing volumes there's an API for

00:25:50,020 --> 00:25:53,200
managing the virtual machines and of

00:25:51,490 --> 00:25:55,900
course there's compatibility with ec2 so

00:25:53,200 --> 00:25:57,190
then you see to API there and then

00:25:55,900 --> 00:25:59,590
everything else is sort of all the

00:25:57,190 --> 00:25:59,890
internal stuff of Nova how it's all how

00:25:59,590 --> 00:26:04,720
it were

00:25:59,890 --> 00:26:06,760
some talks to itself internally amqp so

00:26:04,720 --> 00:26:10,030
all these serve all the services use am

00:26:06,760 --> 00:26:13,420
computer talk to each other which is

00:26:10,030 --> 00:26:16,480
very very highly scalable message system

00:26:13,420 --> 00:26:19,450
it says Cupid on fedora that's that's

00:26:16,480 --> 00:26:22,330
the message system used by default

00:26:19,450 --> 00:26:23,830
stupid it also supports rabbitmq I think

00:26:22,330 --> 00:26:25,810
more people are using rabbitmq because

00:26:23,830 --> 00:26:27,310
that's what people have been using in

00:26:25,810 --> 00:26:29,110
OpenStack since the beginning Cupid

00:26:27,310 --> 00:26:34,900
support was added in December January

00:26:29,110 --> 00:26:37,800
time frame does it support activemq I

00:26:34,900 --> 00:26:40,960
don't think so so the thing about amqp

00:26:37,800 --> 00:26:42,010
it's it's a standard in theory but

00:26:40,960 --> 00:26:46,720
there's lots of different versions of

00:26:42,010 --> 00:26:48,490
the standard before well there's a 1

00:26:46,720 --> 00:26:50,860
point 0 but no one implements it yet and

00:26:48,490 --> 00:26:53,170
then all the pre all the versions prior

00:26:50,860 --> 00:26:55,690
to 1 point 0 aren't compatible with each

00:26:53,170 --> 00:26:59,320
other and so the implementations of amqp

00:26:55,690 --> 00:27:01,240
like rabbitmq or or Cupid implement

00:26:59,320 --> 00:27:03,790
different versions so what you end up

00:27:01,240 --> 00:27:06,070
having to do is write different code to

00:27:03,790 --> 00:27:08,680
support each one so it's sort of the

00:27:06,070 --> 00:27:10,480
same protocol concepts with the same but

00:27:08,680 --> 00:27:12,460
the codes different the protocol is

00:27:10,480 --> 00:27:13,870
different or at least different enough

00:27:12,460 --> 00:27:15,370
that you can't use the same code so i

00:27:13,870 --> 00:27:16,480
don't think it's sports activemq because

00:27:15,370 --> 00:27:18,910
of that problem would probably have to

00:27:16,480 --> 00:27:29,350
write some specific code for it yes

00:27:18,910 --> 00:27:30,940
question are they the question is are

00:27:29,350 --> 00:27:35,590
these different API is listening on

00:27:30,940 --> 00:27:41,640
different ports no well the ec2 API is

00:27:35,590 --> 00:27:41,640
the others are not the

00:27:46,950 --> 00:27:52,630
okay so the question was so expanding

00:27:50,620 --> 00:27:54,610
from just these api to what about glance

00:27:52,630 --> 00:27:56,500
and keystone the other api's from other

00:27:54,610 --> 00:27:58,870
services are those on different point

00:27:56,500 --> 00:28:00,370
ports and then if you have to answer

00:27:58,870 --> 00:28:02,710
that question yes they are different

00:28:00,370 --> 00:28:04,360
ports and then wow you have a lot of

00:28:02,710 --> 00:28:07,960
api's let's say on different ports how

00:28:04,360 --> 00:28:10,090
the heck do you deal with that and so

00:28:07,960 --> 00:28:11,230
Keystone in addition to providing it

00:28:10,090 --> 00:28:12,730
identity I don't think I mentioned this

00:28:11,230 --> 00:28:16,270
before it has another purpose in life

00:28:12,730 --> 00:28:19,570
which is a sort of a discovery service

00:28:16,270 --> 00:28:22,360
so Keystone also has a registry of all

00:28:19,570 --> 00:28:24,250
the API is not talk to them so as a

00:28:22,360 --> 00:28:26,140
client application all you have to know

00:28:24,250 --> 00:28:27,940
is how to talk to Keystone because you

00:28:26,140 --> 00:28:30,309
go there and you can authenticate and

00:28:27,940 --> 00:28:32,110
then you can say okay well tell me where

00:28:30,309 --> 00:28:36,220
all the other api's are and then it

00:28:32,110 --> 00:28:40,169
gives you a URL or a set of URL for

00:28:36,220 --> 00:28:40,169
these HB eyes so they getting the clown

00:28:40,650 --> 00:28:45,580
no it literally gives the client

00:28:43,299 --> 00:28:49,240
application like here's the no here are

00:28:45,580 --> 00:28:51,250
the the API endpoints and then and then

00:28:49,240 --> 00:28:54,160
the client says okay now I know where

00:28:51,250 --> 00:28:55,929
the glance API is and then makes the

00:28:54,160 --> 00:28:57,760
request there and then there would be a

00:28:55,929 --> 00:28:59,940
load balancer or whatever however you

00:28:57,760 --> 00:28:59,940
want to

00:29:04,050 --> 00:29:09,040
yeah yeah so the question was you know

00:29:06,580 --> 00:29:10,630
you get a response he was sort of I

00:29:09,040 --> 00:29:12,880
guess getting clarification that you get

00:29:10,630 --> 00:29:15,730
you get back sort of a data structure

00:29:12,880 --> 00:29:17,800
that lists the where they all the api's

00:29:15,730 --> 00:29:18,820
are and that's correct so you know all

00:29:17,800 --> 00:29:20,590
you have to know is how to get the

00:29:18,820 --> 00:29:22,090
Keystone you start there and then it

00:29:20,590 --> 00:29:30,670
tells you how to get to everything else

00:29:22,090 --> 00:29:37,810
so yes another question where does the

00:29:30,670 --> 00:29:39,430
gluster file system fit in the great

00:29:37,810 --> 00:29:40,450
thing about a distributed flexible

00:29:39,430 --> 00:29:42,880
architecture there's so many different

00:29:40,450 --> 00:29:44,020
ways you can use it no so so what you

00:29:42,880 --> 00:29:45,820
know I guess one you know one way you

00:29:44,020 --> 00:29:47,770
could do it is I guess a couple of

00:29:45,820 --> 00:29:49,990
things you can do it could it would

00:29:47,770 --> 00:29:52,930
certainly fit in here with glance and

00:29:49,990 --> 00:29:55,780
the volume service I think well in case

00:29:52,930 --> 00:29:57,760
so the glance you could stores images on

00:29:55,780 --> 00:30:00,340
a file system back end so you could just

00:29:57,760 --> 00:30:03,840
have that file system back end just be

00:30:00,340 --> 00:30:07,420
big luster and just dump them all into

00:30:03,840 --> 00:30:11,770
into that that could be your back in

00:30:07,420 --> 00:30:13,000
store for that I don't I don't I don't

00:30:11,770 --> 00:30:14,710
know if you can car I don't know I've

00:30:13,000 --> 00:30:16,450
never set up the volume service with

00:30:14,710 --> 00:30:18,730
with cluster I'm not sure if you can use

00:30:16,450 --> 00:30:20,080
it with that gemellus I don't even I've

00:30:18,730 --> 00:30:21,160
rarely I don't think I've really touched

00:30:20,080 --> 00:30:25,180
the volume code too much I don't know

00:30:21,160 --> 00:30:26,470
very much about it so i don't know i

00:30:25,180 --> 00:30:31,150
guess i don't have been too great of an

00:30:26,470 --> 00:30:32,650
answer okay so let me start talk about

00:30:31,150 --> 00:30:34,210
some of these other services here so

00:30:32,650 --> 00:30:35,470
this metal stuff you know Cupid the

00:30:34,210 --> 00:30:37,210
database that's just for a common

00:30:35,470 --> 00:30:38,230
infrastructure for everything and then

00:30:37,210 --> 00:30:41,380
we'll just sort of go around the circle

00:30:38,230 --> 00:30:43,390
here the scheduler so you make a request

00:30:41,380 --> 00:30:44,980
I want to start a virtual machine this

00:30:43,390 --> 00:30:46,360
is service called the schedule their

00:30:44,980 --> 00:30:49,030
scheduler that's sort of the business

00:30:46,360 --> 00:30:51,820
logic about well customer X has

00:30:49,030 --> 00:30:53,910
requested a virtual machine you know

00:30:51,820 --> 00:30:56,980
where am I going to put it I have a

00:30:53,910 --> 00:31:00,850
thousand compute nodes that can run

00:30:56,980 --> 00:31:02,800
virtual machines using whatever rules

00:31:00,850 --> 00:31:04,210
you want to use figure out where to put

00:31:02,800 --> 00:31:07,480
it that's sort of the main thing that

00:31:04,210 --> 00:31:10,660
the scheduler does it's one of those

00:31:07,480 --> 00:31:12,190
things that's lots of people want to

00:31:10,660 --> 00:31:14,440
customize so it's one of you know it's

00:31:12,190 --> 00:31:15,220
it's a common area where a provider

00:31:14,440 --> 00:31:17,320
would probably

00:31:15,220 --> 00:31:19,780
right there custom scheduler and put it

00:31:17,320 --> 00:31:22,450
there but there are some built-in ones i

00:31:19,780 --> 00:31:24,700
think the default one is pretty basic

00:31:22,450 --> 00:31:26,890
but just kind of like distributes things

00:31:24,700 --> 00:31:28,659
round robin fashion not do anything too

00:31:26,890 --> 00:31:32,559
terribly intelligent but you certainly

00:31:28,659 --> 00:31:34,530
want to get smarter about that you know

00:31:32,559 --> 00:31:37,600
there's some built-in stuff where it can

00:31:34,530 --> 00:31:39,100
distribute instances to wherever to

00:31:37,600 --> 00:31:41,470
whatever compute node has the most ram

00:31:39,100 --> 00:31:47,590
free ram available stuff like that so

00:31:41,470 --> 00:31:50,770
yes so my question yeah it ships with

00:31:47,590 --> 00:31:54,340
multiple and the default has changed a

00:31:50,770 --> 00:31:56,559
couple times so i think the default is

00:31:54,340 --> 00:31:58,659
this one called the chance scheduler

00:31:56,559 --> 00:32:00,850
which i mean as far as you're concerned

00:31:58,659 --> 00:32:02,320
it's just kind of random but in practice

00:32:00,850 --> 00:32:03,460
it's just sort of distributes them in a

00:32:02,320 --> 00:32:06,400
round-robin fashion amongst your

00:32:03,460 --> 00:32:08,289
computers but you know I think that's

00:32:06,400 --> 00:32:11,679
the boat I could pull I could pull up

00:32:08,289 --> 00:32:14,350
the code but I mean excuse me any

00:32:11,679 --> 00:32:15,970
interesting algorithms that stand out I

00:32:14,350 --> 00:32:19,299
think the ones that are built in our

00:32:15,970 --> 00:32:22,720
fair Lee basic you know they'd let you

00:32:19,299 --> 00:32:24,250
do things like well distribute based on

00:32:22,720 --> 00:32:29,309
the amount of resources consumed me

00:32:24,250 --> 00:32:29,309
that's a fairly common use case and then

00:32:30,900 --> 00:32:36,400
yeah and there's there's some other ones

00:32:33,429 --> 00:32:38,770
where you can set custom properties on

00:32:36,400 --> 00:32:40,419
on compute nodes I think and sort of

00:32:38,770 --> 00:32:43,059
distribute things but based on those

00:32:40,419 --> 00:32:45,929
properties I don't know I've really only

00:32:43,059 --> 00:32:45,929
used the basic ones

00:32:58,790 --> 00:33:01,790
mhm

00:33:11,180 --> 00:33:16,510
I guess I'm not quite sure I fully

00:33:13,460 --> 00:33:16,510
understood the question

00:33:16,520 --> 00:33:19,520
yes

00:33:29,340 --> 00:33:31,910
songs

00:33:57,600 --> 00:34:02,919
okay yeah so I guess okay so if the

00:34:00,250 --> 00:34:04,809
question is certain classes deployments

00:34:02,919 --> 00:34:06,490
either based on you know maybe based on

00:34:04,809 --> 00:34:08,530
the user or whatever you want to

00:34:06,490 --> 00:34:10,000
dedicate hardware to them so they maybe

00:34:08,530 --> 00:34:11,919
have some guaranteed service not sort of

00:34:10,000 --> 00:34:13,030
thing yeah that you can absolutely do

00:34:11,919 --> 00:34:14,409
that in the schedule or be the place to

00:34:13,030 --> 00:34:16,570
do it I mean you have lots of

00:34:14,409 --> 00:34:18,520
information about what sort of instances

00:34:16,570 --> 00:34:19,840
are being requested and all the

00:34:18,520 --> 00:34:23,500
attributes associated with them and then

00:34:19,840 --> 00:34:24,639
who's requesting it and then you know

00:34:23,500 --> 00:34:28,060
it's the only software you can do

00:34:24,639 --> 00:34:29,560
anything it's yeah whatever so that's

00:34:28,060 --> 00:34:31,750
sort of the place where we sort of punt

00:34:29,560 --> 00:34:33,700
all of that business logic I don't know

00:34:31,750 --> 00:34:34,389
that there's like something I don't know

00:34:33,700 --> 00:34:35,679
if there's something necessarily

00:34:34,389 --> 00:34:37,200
built-in that's going to solve exactly

00:34:35,679 --> 00:34:40,330
what you have to what you need or

00:34:37,200 --> 00:34:42,730
probably not but there's an extension

00:34:40,330 --> 00:34:45,090
point at least where you could do it yes

00:34:42,730 --> 00:34:45,090
question

00:34:51,730 --> 00:34:56,419
okay so his point was that maybe you

00:34:55,190 --> 00:34:57,950
know with maybe you're dealing with

00:34:56,419 --> 00:35:00,410
HIPAA regulations or something similar

00:34:57,950 --> 00:35:03,769
and that maybe availability zones would

00:35:00,410 --> 00:35:11,240
be sufficient or you just in maybe so so

00:35:03,769 --> 00:35:13,430
I don't know okay cool all right so

00:35:11,240 --> 00:35:16,670
scheduler business logic about where

00:35:13,430 --> 00:35:18,920
stuff goes over here you have a compute

00:35:16,670 --> 00:35:21,079
service the compute service is it would

00:35:18,920 --> 00:35:23,029
run on every single machine that is

00:35:21,079 --> 00:35:25,940
capable of starting virtual machines and

00:35:23,029 --> 00:35:27,259
it's that's his job it receives your

00:35:25,940 --> 00:35:30,349
quest to start a virtual machine and

00:35:27,259 --> 00:35:31,519
starts it so it talks to at least like

00:35:30,349 --> 00:35:35,180
in the case of what i'm going to set up

00:35:31,519 --> 00:35:38,680
in my laptop yeah then uses libvirt

00:35:35,180 --> 00:35:41,150
starts kvm brooklyn machines and also

00:35:38,680 --> 00:35:45,289
has to do some networking stuff amongst

00:35:41,150 --> 00:35:47,450
those virtual machines and yeah glance

00:35:45,289 --> 00:35:49,279
Oh notifications so there's

00:35:47,450 --> 00:35:50,839
notifications sped out on the message

00:35:49,279 --> 00:35:52,130
bus about everything that's going on so

00:35:50,839 --> 00:35:55,039
you can write applications to sit

00:35:52,130 --> 00:35:58,309
outside the system to monitor it and for

00:35:55,039 --> 00:36:01,700
things like billing data and that sort

00:35:58,309 --> 00:36:04,940
of stuff ok but so let's let's pull back

00:36:01,700 --> 00:36:08,509
out of the weeds here and so what you

00:36:04,940 --> 00:36:09,920
saw or set up here it's a cloud no no so

00:36:08,509 --> 00:36:11,839
you have your application and you have

00:36:09,920 --> 00:36:13,789
rest api is you have a common identity

00:36:11,839 --> 00:36:15,470
API you can talk to you have an images

00:36:13,789 --> 00:36:16,910
API you can talk to to upload images and

00:36:15,470 --> 00:36:18,410
then you have a computer API that you

00:36:16,910 --> 00:36:21,920
can talk to it to create some some

00:36:18,410 --> 00:36:24,140
machines so that is what we've set up

00:36:21,920 --> 00:36:28,009
setting up horizon this is the easiest

00:36:24,140 --> 00:36:30,769
one of all horizon is the the web UI all

00:36:28,009 --> 00:36:33,710
you have to do is start httpd if you've

00:36:30,769 --> 00:36:35,900
installed the horizon package then all

00:36:33,710 --> 00:36:38,900
the all the config necessary is all set

00:36:35,900 --> 00:36:41,539
up for you to start start apache so cool

00:36:38,900 --> 00:36:44,240
all right so at this point I'm going to

00:36:41,539 --> 00:36:45,799
dive into into a terminal and try to

00:36:44,240 --> 00:36:46,940
actually run all this stuff and have a

00:36:45,799 --> 00:36:48,109
script that's just going to like do it

00:36:46,940 --> 00:36:50,900
all I'm not going to have to go through

00:36:48,109 --> 00:36:52,130
and type it on manual but also a good

00:36:50,900 --> 00:36:54,740
time to start asking questions while I

00:36:52,130 --> 00:36:55,900
do that in real quick and super tiny

00:36:54,740 --> 00:36:58,839
font

00:36:55,900 --> 00:37:00,730
apparently there's a on the Fedora

00:36:58,839 --> 00:37:04,420
project wiki getting started with

00:37:00,730 --> 00:37:05,680
OpenStack on fedora 17 it would be where

00:37:04,420 --> 00:37:08,619
you can find all of these instructions

00:37:05,680 --> 00:37:09,910
and more and then there of course

00:37:08,619 --> 00:37:12,369
there's there's good documentation

00:37:09,910 --> 00:37:15,010
that's not specifically about OpenStack

00:37:12,369 --> 00:37:17,500
on fedora on the OpenStack site there's

00:37:15,010 --> 00:37:19,839
a docs that OpenStack dot org and then

00:37:17,500 --> 00:37:21,789
an API reference site API to cut

00:37:19,839 --> 00:37:25,750
OpenStack gorg so those are good good

00:37:21,789 --> 00:37:37,650
size check out ok but not thanked you

00:37:25,750 --> 00:37:37,650
yet not done to a terminal whoops

00:37:40,020 --> 00:37:47,730
now let's make it so you can actually

00:37:41,760 --> 00:37:52,500
see it sort of that readable I can't

00:37:47,730 --> 00:37:54,780
read it break my neck what do we have

00:37:52,500 --> 00:37:57,990
here a make demo script so I'm going to

00:37:54,780 --> 00:38:03,180
run make demo which is just going to do

00:37:57,990 --> 00:38:04,590
all the stuff I just showed you so do I

00:38:03,180 --> 00:38:05,850
wanted to update the packages no I

00:38:04,590 --> 00:38:07,380
already installed them just in case

00:38:05,850 --> 00:38:11,480
internet wasn't working which of course

00:38:07,380 --> 00:38:14,400
it's not so I'm going to skip that

00:38:11,480 --> 00:38:16,800
enable cupid the message bus enable

00:38:14,400 --> 00:38:22,560
libvirt for starting virtual machines

00:38:16,800 --> 00:38:27,540
load the NBD kernel module and i think

00:38:22,560 --> 00:38:32,910
it ran off the screen yeah it did and I

00:38:27,540 --> 00:38:35,300
skip some stuff alright so how do I I'm

00:38:32,910 --> 00:38:38,570
minimize this when I can't see the top

00:38:35,300 --> 00:38:38,570
that's nice

00:38:39,990 --> 00:38:42,050
Oh

00:38:43,440 --> 00:38:51,670
is there like a minimized keyboard

00:38:46,510 --> 00:39:00,030
shortcut because i can't i just made the

00:38:51,670 --> 00:39:00,030
font smaller so yeah it's true

00:39:01,610 --> 00:39:07,860
don't see that I'll talk to keep Reese

00:39:04,590 --> 00:39:10,940
that's going to be annoying all right

00:39:07,860 --> 00:39:10,940
we're just gonna do this smaller then

00:39:11,450 --> 00:39:15,390
well I know but I already did and I

00:39:13,560 --> 00:39:22,790
can't unmask amaizing to the camp get to

00:39:15,390 --> 00:39:22,790
the okay

00:39:24,750 --> 00:39:29,790
Nabel Cupid and enable libvirt and load

00:39:27,870 --> 00:39:34,440
the mvd kernel module and set up

00:39:29,790 --> 00:39:39,950
Keystone and so it's going to create the

00:39:34,440 --> 00:39:45,270
database and instrum and start service

00:39:39,950 --> 00:39:48,870
and now I can't see anything but if I

00:39:45,270 --> 00:39:56,430
keep hitting c4 continue and it's just

00:39:48,870 --> 00:39:58,200
going to do it all so it just has to go

00:39:56,430 --> 00:40:00,390
through and it means all the commands i

00:39:58,200 --> 00:40:01,530
said before so it's going to create all

00:40:00,390 --> 00:40:04,910
the databases for each of the surfaces

00:40:01,530 --> 00:40:04,910
and start them all

00:40:13,100 --> 00:40:19,620
so the question was if you wanted to

00:40:15,420 --> 00:40:22,290
back up an OpenStack server the what is

00:40:19,620 --> 00:40:23,580
you know what's what's the data it sound

00:40:22,290 --> 00:40:25,250
and he said it sounds like there's

00:40:23,580 --> 00:40:27,630
config files yes there's config files

00:40:25,250 --> 00:40:29,070
you know i'd probably have that in like

00:40:27,630 --> 00:40:30,960
puppet recipes or something right or

00:40:29,070 --> 00:40:34,770
puppet modules or something like that

00:40:30,960 --> 00:40:36,180
and said it you know and then yeah and

00:40:34,770 --> 00:40:38,610
there's and there's my sequel databases

00:40:36,180 --> 00:40:41,940
but there is more stuff I mean there's

00:40:38,610 --> 00:40:43,080
you know the actual images that well you

00:40:41,940 --> 00:40:44,880
know if you start a virtual machine

00:40:43,080 --> 00:40:49,370
there's like you know the virtual

00:40:44,880 --> 00:40:49,370
machine image that's on the host itself

00:40:56,480 --> 00:41:06,890
where are we it is starting Apache yes

00:41:00,619 --> 00:41:10,520
question what excuse me what was the

00:41:06,890 --> 00:41:14,390
question Oh what so what other databases

00:41:10,520 --> 00:41:16,400
can use so all the OpenStack projects

00:41:14,390 --> 00:41:18,619
use a Python library called sequel

00:41:16,400 --> 00:41:20,900
alchemy which if you go to their website

00:41:18,619 --> 00:41:23,300
supports quite a few whole bunch of

00:41:20,900 --> 00:41:25,790
different databases it's mostly used

00:41:23,300 --> 00:41:28,220
with my scene in OpenStack land my my

00:41:25,790 --> 00:41:31,130
signals use the most teams postgres is

00:41:28,220 --> 00:41:33,410
supported I know and those well those

00:41:31,130 --> 00:41:36,080
are the two ice you use the most and in

00:41:33,410 --> 00:41:39,740
theory sequel alchemy abstracts all that

00:41:36,080 --> 00:41:42,230
away and practice not always so

00:41:39,740 --> 00:41:44,990
sometimes since post graphs is not used

00:41:42,230 --> 00:41:48,380
as much sometimes postgres specific bug

00:41:44,990 --> 00:41:50,030
scrap up almost only actually about

00:41:48,380 --> 00:41:53,330
about the only place i really think I've

00:41:50,030 --> 00:41:56,150
seen those bugs come up is in the schema

00:41:53,330 --> 00:41:58,850
migrations so the the database schemas

00:41:56,150 --> 00:42:00,830
are versioned and then anytime you need

00:41:58,850 --> 00:42:03,050
to make a change to the schema you have

00:42:00,830 --> 00:42:04,190
to write code that migrates the schema

00:42:03,050 --> 00:42:07,430
from the last version to the new version

00:42:04,190 --> 00:42:14,119
and some of that code doesn't always

00:42:07,430 --> 00:42:15,530
work on every database type oh we have

00:42:14,119 --> 00:42:19,100
an error that's because I hit see a

00:42:15,530 --> 00:42:22,250
whole bunch of times to continue while

00:42:19,100 --> 00:42:26,359
it was a when I couldn't see it so I

00:42:22,250 --> 00:42:29,210
just have a whole bunch of failed to

00:42:26,359 --> 00:42:32,440
search for file the back end exited

00:42:29,210 --> 00:42:35,000
unexpectedly this is a serious error as

00:42:32,440 --> 00:42:38,560
the spawn back-end do not I don't know

00:42:35,000 --> 00:42:38,560
what that is no

00:42:38,680 --> 00:42:44,589
all tabs which you're just gonna go back

00:42:41,900 --> 00:42:44,589
to something else

00:42:48,349 --> 00:42:55,230
yeah no more air it's gone so it didn't

00:42:50,730 --> 00:42:58,769
happen okay so I had some more scripts

00:42:55,230 --> 00:43:00,420
here so there's one called add image so

00:42:58,769 --> 00:43:02,130
before I can start a virtual machine I

00:43:00,420 --> 00:43:04,049
have to add an image to start a virtual

00:43:02,130 --> 00:43:06,839
machine from so this first line of the

00:43:04,049 --> 00:43:10,380
script puts the the Keystone our stuff

00:43:06,839 --> 00:43:11,940
in keystone RC in my environment so I

00:43:10,380 --> 00:43:14,309
can authenticate and so forth and

00:43:11,940 --> 00:43:17,579
there's a command called glance add and

00:43:14,309 --> 00:43:20,160
I have a fedora 16 image not afford or

00:43:17,579 --> 00:43:21,750
17 image sadly but this is the image

00:43:20,160 --> 00:43:23,700
that I don't have been using with

00:43:21,750 --> 00:43:25,529
testing for months so I already had our

00:43:23,700 --> 00:43:28,740
machine so I'm going to add it there's a

00:43:25,529 --> 00:43:31,470
few you know options here specify that

00:43:28,740 --> 00:43:33,180
it's a public image so I'm uploading it

00:43:31,470 --> 00:43:34,349
and then any user on the system will be

00:43:33,180 --> 00:43:37,170
able to see it and use it if they want

00:43:34,349 --> 00:43:41,970
to a disk format it's a queue Cal to

00:43:37,170 --> 00:43:42,720
image container format bear well I don't

00:43:41,970 --> 00:43:44,730
we don't need to get into the

00:43:42,720 --> 00:43:46,410
nitty-gritty details of different image

00:43:44,730 --> 00:43:47,970
formats but you have to tell it what

00:43:46,410 --> 00:43:49,890
type of format what type of image it is

00:43:47,970 --> 00:43:52,289
and then the file and it's going to

00:43:49,890 --> 00:43:54,000
upload it and then glanced index that

00:43:52,289 --> 00:43:57,750
command should tell me the list of

00:43:54,000 --> 00:43:59,099
images that have been added and it

00:43:57,750 --> 00:44:04,529
should list this one because I will have

00:43:59,099 --> 00:44:06,599
just added it so add image and it's

00:44:04,529 --> 00:44:08,970
super fast cuz it's all local and then

00:44:06,599 --> 00:44:11,160
this is the output of glance index here

00:44:08,970 --> 00:44:14,819
at the end saying that there's a an

00:44:11,160 --> 00:44:17,460
image called f-16 j off which stands for

00:44:14,819 --> 00:44:21,380
just enough operating system I don't

00:44:17,460 --> 00:44:21,380
know if that's a red hat ISM or not but

00:44:23,910 --> 00:44:28,180
that's the disk format and it's a bear

00:44:26,800 --> 00:44:33,400
it doesn't have a container so it's just

00:44:28,180 --> 00:44:37,390
a raw yeah two to two different things

00:44:33,400 --> 00:44:38,619
there so like it could be ovf for

00:44:37,390 --> 00:44:41,380
example but it's not it's just a cute

00:44:38,619 --> 00:44:42,790
cal to file okay so now i have an

00:44:41,380 --> 00:44:45,670
imaging glance that's cool i can start

00:44:42,790 --> 00:44:49,359
an image from it but before i start an

00:44:45,670 --> 00:44:51,040
image i want to create an ssh key pair I

00:44:49,359 --> 00:44:53,349
mean this is so you have to do the same

00:44:51,040 --> 00:44:56,710
thing on amazon if you use a c2 yep you

00:44:53,349 --> 00:44:58,240
have a key pair and then the the public

00:44:56,710 --> 00:45:00,099
key from that key pair gets injected

00:44:58,240 --> 00:45:03,070
into the image for you so that you have

00:45:00,099 --> 00:45:04,869
a way to log into it so I'm going to

00:45:03,070 --> 00:45:06,550
tell Nova creep you know create a key

00:45:04,869 --> 00:45:08,589
pair then I'm going to save the the

00:45:06,550 --> 00:45:12,990
private key off to a file so that's what

00:45:08,589 --> 00:45:18,820
this Nova keep hair add command is for

00:45:12,990 --> 00:45:23,890
what is it make keep it cool I was done

00:45:18,820 --> 00:45:26,290
ok and now boot server let's build a

00:45:23,890 --> 00:45:29,349
server so I'm going to do a few commands

00:45:26,290 --> 00:45:31,540
here the first one flavor list so again

00:45:29,349 --> 00:45:33,190
if you're familiar with amazon you know

00:45:31,540 --> 00:45:36,880
you can create this a micro image or

00:45:33,190 --> 00:45:38,260
tiny or whatever they call them and nova

00:45:36,880 --> 00:45:40,839
has this ain't the same sort of concept

00:45:38,260 --> 00:45:42,640
and they're basically profiles of

00:45:40,839 --> 00:45:43,900
machines so how much ram is going to

00:45:42,640 --> 00:45:45,880
have how much disk it's going to have

00:45:43,900 --> 00:45:47,230
how many cpus you're going to let it

00:45:45,880 --> 00:45:48,280
have and that sort of thing and so I'm

00:45:47,230 --> 00:45:51,210
going to just go and put that the output

00:45:48,280 --> 00:45:54,970
just to show you and one second and then

00:45:51,210 --> 00:45:56,230
I spent because I'm going to just to

00:45:54,970 --> 00:45:58,210
explain with this so I'm going to say

00:45:56,230 --> 00:46:02,280
flavor 1 i'm choosing the smallest

00:45:58,210 --> 00:46:02,280
flavor what was question

00:46:03,480 --> 00:46:18,970
the question was can it use openvz

00:46:06,130 --> 00:46:20,530
instead of kvm no okay yeah so so his

00:46:18,970 --> 00:46:22,240
point was it can use Linux containers

00:46:20,530 --> 00:46:24,850
which is somewhere and that's absolutely

00:46:22,240 --> 00:46:27,640
correct so then it uses the libvirt

00:46:24,850 --> 00:46:30,640
driver for both of those for both linux

00:46:27,640 --> 00:46:32,560
containers and kvm there's a natives in

00:46:30,640 --> 00:46:36,150
driver and doesn't use to it open fact

00:46:32,560 --> 00:46:36,150
doesn't use my per person

00:46:36,160 --> 00:46:40,250
no no you don't have to use them no you

00:46:38,480 --> 00:46:43,000
choose one of you know you just choose

00:46:40,250 --> 00:46:43,000
one out of those

00:46:46,070 --> 00:46:53,190
yes you still have to have yeah sort of

00:46:51,870 --> 00:46:56,000
that you know your template for what

00:46:53,190 --> 00:46:56,000
your what your bidding up

00:47:00,299 --> 00:47:06,599
question was can you mix and match

00:47:03,180 --> 00:47:06,599
hypervisor types

00:47:08,859 --> 00:47:20,380
I don't think so well yeah well I don't

00:47:17,880 --> 00:47:23,769
yeah i don't i don't think so I'm trying

00:47:20,380 --> 00:47:24,970
I'm just trying to think about them well

00:47:23,769 --> 00:47:27,609
certainly not on the same physical

00:47:24,970 --> 00:47:28,690
machine but I mean it it might work I

00:47:27,609 --> 00:47:31,059
just don't know if that really should be

00:47:28,690 --> 00:47:32,170
a supportive configuration I don't know

00:47:31,059 --> 00:47:33,789
i don't know that i don't know if i

00:47:32,170 --> 00:47:35,319
don't think it sported though I actually

00:47:33,789 --> 00:47:38,220
take be honest I don't really don't know

00:47:35,319 --> 00:47:40,720
if Tom had I don't think so and he said

00:47:38,220 --> 00:47:50,499
okay so not as the released prior to

00:47:40,720 --> 00:47:53,190
this one it wasn't supported this

00:47:50,499 --> 00:47:53,190
cluster is

00:47:56,020 --> 00:48:00,310
sure so he was saying he was comparing

00:47:58,870 --> 00:48:03,820
it to CloudStack where that's a that's

00:48:00,310 --> 00:48:06,070
capability and so it sounds like I'm not

00:48:03,820 --> 00:48:07,360
talking of juveniles CloudStack but

00:48:06,070 --> 00:48:08,590
there's a there's a capability at least

00:48:07,360 --> 00:48:09,670
being worked on for OpenStack called

00:48:08,590 --> 00:48:11,500
cells which sounds like a sort of

00:48:09,670 --> 00:48:13,630
similar concept where you have sort of

00:48:11,500 --> 00:48:15,730
this this group of servers all of your

00:48:13,630 --> 00:48:17,650
compute nodes in a database and message

00:48:15,730 --> 00:48:21,910
queue stuff and they're sort of almost

00:48:17,650 --> 00:48:23,890
independent you know it's yes yeah sort

00:48:21,910 --> 00:48:28,000
of federated stuff so there's some of

00:48:23,890 --> 00:48:29,140
that coming but any case okay actually

00:48:28,000 --> 00:48:30,400
let me go ahead and start this because

00:48:29,140 --> 00:48:34,000
it actually take the first time you

00:48:30,400 --> 00:48:36,010
start an instance it takes a little bit

00:48:34,000 --> 00:48:38,590
because it has to download the image

00:48:36,010 --> 00:48:40,120
back out of glance even though it's

00:48:38,590 --> 00:48:43,690
actually on the same file system doesn't

00:48:40,120 --> 00:48:45,160
know that so it takes a little bit so

00:48:43,690 --> 00:48:48,550
this output that's going to fly by

00:48:45,160 --> 00:48:50,680
forcing it um scroll back up though show

00:48:48,550 --> 00:48:54,570
us the flavors so i'm using this first

00:48:50,680 --> 00:48:58,540
row here one it's called tiny so 512

00:48:54,570 --> 00:49:00,040
megabytes of ram one cpu and then so i

00:48:58,540 --> 00:49:02,560
did this Nova boot and that's what all

00:49:00,040 --> 00:49:04,750
this output is from its tell me all

00:49:02,560 --> 00:49:07,690
these parameters from the server I

00:49:04,750 --> 00:49:10,510
started and then it ran noble list and

00:49:07,690 --> 00:49:13,330
it's saying that the there's an instance

00:49:10,510 --> 00:49:15,180
created and it's in the build state so

00:49:13,330 --> 00:49:19,050
it's going to be in that state while it

00:49:15,180 --> 00:49:21,280
has to download the image from glance

00:49:19,050 --> 00:49:23,170
create the virtual machine the virtual

00:49:21,280 --> 00:49:24,520
machine is going to boot up and then the

00:49:23,170 --> 00:49:28,030
virtual machine has to do some sort of

00:49:24,520 --> 00:49:30,750
like first boot configuration stuff it

00:49:28,030 --> 00:49:33,550
actually it's um center of cloud in it

00:49:30,750 --> 00:49:37,030
sure some people have but so its climate

00:49:33,550 --> 00:49:39,280
it's a really cool application that that

00:49:37,030 --> 00:49:42,400
this image is using so it talks to a

00:49:39,280 --> 00:49:43,660
metadata service which is basically

00:49:42,400 --> 00:49:47,050
equivalent to this metod a service that

00:49:43,660 --> 00:49:48,520
ec2 has and that's where it's going to

00:49:47,050 --> 00:49:50,350
get the ssh key from so it's going to

00:49:48,520 --> 00:49:51,850
talk to it and get the ssh key and

00:49:50,350 --> 00:49:55,930
install it and then so once it's all

00:49:51,850 --> 00:49:59,640
done you know / no initializing itself

00:49:55,930 --> 00:49:59,640
will be able to login next question

00:50:01,789 --> 00:50:08,369
the question is could you do a kick

00:50:04,259 --> 00:50:11,160
start on the fly image for this not to

00:50:08,369 --> 00:50:12,990
not directly an open stock but you could

00:50:11,160 --> 00:50:15,059
that you could create an image that way

00:50:12,990 --> 00:50:17,579
and then upload the resulting image to

00:50:15,059 --> 00:50:21,859
glance and then then create a server

00:50:17,579 --> 00:50:21,859
that's pretty much how that work comment

00:50:35,089 --> 00:50:46,289
yea once again okay so so the suggestion

00:50:43,769 --> 00:50:50,730
was check out box grinder for cool image

00:50:46,289 --> 00:50:52,559
creation so check that out so no

00:50:50,730 --> 00:50:58,470
volition shows and it started but he

00:50:52,559 --> 00:51:02,249
said can you do it rxtx facts factor no

00:50:58,470 --> 00:51:07,410
I can't tell you what that is so not

00:51:02,249 --> 00:51:11,489
enough huh yeah I will go with received

00:51:07,410 --> 00:51:15,170
transmit but yeah maybe it's for

00:51:11,489 --> 00:51:15,170
throttling network I honestly don't know

00:51:16,549 --> 00:51:20,730
so he was mentioning that rackspace has

00:51:18,779 --> 00:51:22,890
that capability instance Rackspace has

00:51:20,730 --> 00:51:24,869
been a primary driver of this it's very

00:51:22,890 --> 00:51:26,249
likely they would want the same sort of

00:51:24,869 --> 00:51:29,130
functionality for network throttling and

00:51:26,249 --> 00:51:33,390
OpenStack and not very well maybe what

00:51:29,130 --> 00:51:35,400
that is I haven't touched it so okay

00:51:33,390 --> 00:51:38,640
let's see if I can log into the instance

00:51:35,400 --> 00:51:39,960
that would be cool so this tells me that

00:51:38,640 --> 00:51:46,249
the IP address that was assigned to it

00:51:39,960 --> 00:51:51,200
is that so I should be able to ssh to it

00:51:46,249 --> 00:51:54,779
using the key that we created in the

00:51:51,200 --> 00:51:58,190
user that's that's set up to be able to

00:51:54,779 --> 00:51:58,190
login as is ec2 user

00:52:00,700 --> 00:52:08,480
so I'll check that out we have an

00:52:04,670 --> 00:52:11,210
instance that's cool now I got to show

00:52:08,480 --> 00:52:12,650
you the webui a little bit yeah that's

00:52:11,210 --> 00:52:16,990
the presenter view of my slides that's

00:52:12,650 --> 00:52:22,040
not what I wanted to show you but

00:52:16,990 --> 00:52:25,310
localhost dashboard cool so here's the

00:52:22,040 --> 00:52:31,550
dashboard log is the administer an admin

00:52:25,310 --> 00:52:33,500
and very bad pass well so we go to

00:52:31,550 --> 00:52:35,090
instances will see that there's this one

00:52:33,500 --> 00:52:38,450
instance running and tells you the stuff

00:52:35,090 --> 00:52:40,250
about it we can edit some stuff pull up

00:52:38,450 --> 00:52:44,030
a VNC console I don't think I have that

00:52:40,250 --> 00:52:48,619
setup though you'd suspend it and reboot

00:52:44,030 --> 00:52:49,850
it or kill it completely because almost

00:52:48,619 --> 00:52:51,050
all the stuff that we went through on

00:52:49,850 --> 00:52:52,610
the command line you know you see here

00:52:51,050 --> 00:52:54,800
so I collect images and you see that

00:52:52,610 --> 00:52:58,520
there's just one image here the fedora

00:52:54,800 --> 00:53:01,040
16 image that i uploaded which we could

00:52:58,520 --> 00:53:05,570
delete or you know upload a new one or

00:53:01,040 --> 00:53:08,540
whatever excuse me um can you clone

00:53:05,570 --> 00:53:09,710
images I don't think so I'm not sure I

00:53:08,540 --> 00:53:11,450
mean if you cloned it it would just be

00:53:09,710 --> 00:53:13,520
exact copy of itself you know so

00:53:11,450 --> 00:53:16,010
wouldn't really do I don't know what

00:53:13,520 --> 00:53:17,420
that would be so once you may be

00:53:16,010 --> 00:53:19,160
thinking what what you may be thinking

00:53:17,420 --> 00:53:20,960
about and what is useful and what you

00:53:19,160 --> 00:53:23,000
can do is you can take snapshots of

00:53:20,960 --> 00:53:24,800
instances so what i can do is so I've

00:53:23,000 --> 00:53:27,350
created this instance now and let's say

00:53:24,800 --> 00:53:29,270
I want to create a new instance app so

00:53:27,350 --> 00:53:31,190
this was just a very bare fedora image

00:53:29,270 --> 00:53:33,170
that I started and so I could go to it

00:53:31,190 --> 00:53:34,790
and I could install Apache and then I

00:53:33,170 --> 00:53:36,590
could take a snapshot of it and then

00:53:34,790 --> 00:53:39,470
from that snapshot launched new

00:53:36,590 --> 00:53:40,940
instances so so the snap that's so that

00:53:39,470 --> 00:53:43,910
snapshot becomes a new image so you can

00:53:40,940 --> 00:53:47,080
do that so that's sort of a manual way

00:53:43,910 --> 00:53:47,080
of creating custom images

00:53:52,300 --> 00:53:56,020
do you lose all the data

00:53:56,590 --> 00:54:01,910
the question is do you lose all the data

00:53:59,860 --> 00:54:05,030
from an instance when you shut it down

00:54:01,910 --> 00:54:06,500
by default you do okay so me back up if

00:54:05,030 --> 00:54:08,510
you take a snapshot of it then all the

00:54:06,500 --> 00:54:10,160
data is preserved in the snapshot and by

00:54:08,510 --> 00:54:11,630
default once you terminate an instance

00:54:10,160 --> 00:54:13,790
all the stores associated with it is

00:54:11,630 --> 00:54:17,240
gone it's the same thing same case with

00:54:13,790 --> 00:54:19,670
ec2 but then there's the there's the

00:54:17,240 --> 00:54:22,280
Nova volume service where you create

00:54:19,670 --> 00:54:26,150
volumes and attach it to an instance

00:54:22,280 --> 00:54:26,990
those are persistent so that's that's

00:54:26,150 --> 00:54:31,220
hype that's where you get your

00:54:26,990 --> 00:54:33,560
persistent storage from that makes sense

00:54:31,220 --> 00:54:35,450
so you create you create a new storage

00:54:33,560 --> 00:54:36,770
device and attach it and then you could

00:54:35,450 --> 00:54:38,240
destroy that instance and start a new

00:54:36,770 --> 00:54:39,860
instance and then attach that volume to

00:54:38,240 --> 00:54:41,060
the new instance or you can detach it

00:54:39,860 --> 00:54:43,880
from one and attach it to a different

00:54:41,060 --> 00:54:49,480
one so the persistent storage is a sort

00:54:43,880 --> 00:54:49,480
of a separate thing yes

00:54:54,760 --> 00:54:59,140
so the question was if you wanted to add

00:54:57,340 --> 00:55:02,290
a second physical machine do you have to

00:54:59,140 --> 00:55:04,120
go through this whole mess again no not

00:55:02,290 --> 00:55:05,650
necessarily because on the second

00:55:04,120 --> 00:55:06,880
machine you're probably not going to run

00:55:05,650 --> 00:55:08,230
you're not gonna run everything you

00:55:06,880 --> 00:55:10,360
don't you don't have to run Keystone on

00:55:08,230 --> 00:55:12,400
both of them you don't so yeah so

00:55:10,360 --> 00:55:13,600
basically assuming their second machine

00:55:12,400 --> 00:55:15,460
is for being able to run more virtual

00:55:13,600 --> 00:55:17,020
machines really you have to yeah you

00:55:15,460 --> 00:55:19,030
install Nova and there's just a couple

00:55:17,020 --> 00:55:22,360
of Nova services you start to think you

00:55:19,030 --> 00:55:26,200
run the compute service and the network

00:55:22,360 --> 00:55:27,850
service will be so so it's much smaller

00:55:26,200 --> 00:55:29,320
and further once you start I mean if

00:55:27,850 --> 00:55:31,660
you're doing this for real and starting

00:55:29,320 --> 00:55:33,190
to scale it out then do it all manually

00:55:31,660 --> 00:55:34,120
like I'm doing here just probably not

00:55:33,190 --> 00:55:35,980
the way you want to do it I mean there's

00:55:34,120 --> 00:55:41,980
there's ways to automate it so at five

00:55:35,980 --> 00:55:43,630
minutes thanks so how do you how do you

00:55:41,980 --> 00:55:49,000
communicate the existence of the second

00:55:43,630 --> 00:55:50,680
machine to the first one it's what you

00:55:49,000 --> 00:55:52,330
do is you well you point them at the

00:55:50,680 --> 00:55:53,950
same database and the same message queue

00:55:52,330 --> 00:55:54,910
and that's all you have to do and then

00:55:53,950 --> 00:55:55,840
they just sort when they sort of

00:55:54,910 --> 00:56:02,200
discover each other and know that

00:55:55,840 --> 00:56:03,820
they're there yes the question was am i

00:56:02,200 --> 00:56:06,250
running selinux and enforcing mode

00:56:03,820 --> 00:56:12,940
probably not no but I mean we do tested

00:56:06,250 --> 00:56:14,470
under selinux and it does have the right

00:56:12,940 --> 00:56:18,230
permissions I the script set the

00:56:14,470 --> 00:56:25,670
permissions yeah

00:56:18,230 --> 00:56:27,560
oh I don't think I'm running no it

00:56:25,670 --> 00:56:30,380
doesn't set the selinux context on that

00:56:27,560 --> 00:56:34,640
ssh key and and i probably have it

00:56:30,380 --> 00:56:39,410
disabled so may not i don't know why but

00:56:34,640 --> 00:56:41,330
in case yeah yeah but i mean we do we

00:56:39,410 --> 00:56:43,670
try to usually run it you know in

00:56:41,330 --> 00:56:46,010
enforcing mode and keep all the the

00:56:43,670 --> 00:56:48,440
selinux issues fixed up so it's it's

00:56:46,010 --> 00:56:52,460
supposed to work both on you know in

00:56:48,440 --> 00:56:54,410
fedora and and the apple package it's

00:56:52,460 --> 00:57:00,109
supposed to work actually I think there

00:56:54,410 --> 00:57:01,790
may be anyways question do you question

00:57:00,109 --> 00:57:05,240
was do you run a user interface from the

00:57:01,790 --> 00:57:08,210
computer you can run it anywhere the the

00:57:05,240 --> 00:57:09,920
user interface only talks to the rest

00:57:08,210 --> 00:57:11,630
api is the same rest api is that the

00:57:09,920 --> 00:57:13,310
command line tools use so you can

00:57:11,630 --> 00:57:14,930
literally run it anywhere as long as it

00:57:13,310 --> 00:57:19,520
can talk to those rest api you can run

00:57:14,930 --> 00:57:23,720
it anywhere can you run would you be

00:57:19,520 --> 00:57:25,609
able to run the run the UI and a vm i

00:57:23,720 --> 00:57:28,040
suppose so as long as the vm has

00:57:25,609 --> 00:57:30,080
networking access to all the api's which

00:57:28,040 --> 00:57:31,970
it probably would because the api's are

00:57:30,080 --> 00:57:33,920
intended to be public interfaces and

00:57:31,970 --> 00:57:35,570
maybe you do maybe you don't but as long

00:57:33,920 --> 00:57:37,550
as no you can run it anywhere including

00:57:35,570 --> 00:57:44,270
in a vm as long as it has access to the

00:57:37,550 --> 00:57:46,600
to the rest it guys cool another

00:57:44,270 --> 00:57:46,600
question

00:57:50,579 --> 00:57:56,529
how do you get to the console on one of

00:57:53,229 --> 00:57:58,479
the running instances well in this case

00:57:56,529 --> 00:57:59,979
I don't really need to because what

00:57:58,479 --> 00:58:01,809
because the way it got initialized with

00:57:59,979 --> 00:58:05,229
an ssh key so I can just assess agent to

00:58:01,809 --> 00:58:09,689
it if you need to get to the console

00:58:05,229 --> 00:58:14,439
then it supports exposing it via VNC

00:58:09,689 --> 00:58:16,809
yeah there's a don't remember the name

00:58:14,439 --> 00:58:22,779
of thumb ahead so there's there's an API

00:58:16,809 --> 00:58:26,229
call not no help oh I'm in the vm so

00:58:22,779 --> 00:58:28,299
doesn't have no game story okay Nova I

00:58:26,229 --> 00:58:33,880
think it's get VNC console or something

00:58:28,299 --> 00:58:35,109
like that and anyways it is expose from

00:58:33,880 --> 00:58:38,949
the web UI i don't think i have it set

00:58:35,109 --> 00:58:41,319
up because it uses so actually it's kind

00:58:38,949 --> 00:58:45,579
of interesting the way it works so it's

00:58:41,319 --> 00:58:49,150
B and C inside of you know with that

00:58:45,579 --> 00:58:53,170
Nova but then it's it's tunneled over

00:58:49,150 --> 00:58:55,630
HTTP and web sockets and then it the web

00:58:53,170 --> 00:58:57,819
UI actually uses this two minutes all

00:58:55,630 --> 00:59:00,759
right we'll wrap it up here soon it uses

00:58:57,819 --> 00:59:06,069
a an app called novi and see which is

00:59:00,759 --> 00:59:07,449
this fancy html5 VNC client so and so

00:59:06,069 --> 00:59:09,609
that's what it pulled up although I

00:59:07,449 --> 00:59:11,349
don't we don't have no VNC package in a

00:59:09,609 --> 00:59:12,309
fedora well though someone's working on

00:59:11,349 --> 00:59:14,890
it so that's why it's not going to work

00:59:12,309 --> 00:59:17,189
because I didn't install it manually

00:59:14,890 --> 00:59:17,189
yeah

00:59:26,860 --> 00:59:38,660
yeah okay a few questions packed into

00:59:36,920 --> 00:59:41,330
their which I don't know if I can answer

00:59:38,660 --> 00:59:42,560
in 30 seconds well let me listen maybe

00:59:41,330 --> 00:59:43,670
we can talk to pretty much I think I

00:59:42,560 --> 00:59:46,400
have to wrap it up but you mentioned

00:59:43,670 --> 00:59:48,050
devstack and you know what would be good

00:59:46,400 --> 00:59:49,250
or bad about using devstack so let me at

00:59:48,050 --> 00:59:51,110
least just mention what devstack is

00:59:49,250 --> 00:59:52,940
maybe about a lot of time poor but def

00:59:51,110 --> 00:59:54,290
stock is um I use it quite often I

00:59:52,940 --> 00:59:55,940
probably use that more than I use this

00:59:54,290 --> 00:59:59,300
sort of method what's what's cool about

00:59:55,940 --> 01:00:00,890
devstack is that well it's good for

00:59:59,300 --> 01:00:02,600
development purposes when I'm hacking on

01:00:00,890 --> 01:00:03,890
the code it's running all the OpenStack

01:00:02,600 --> 01:00:06,080
stuff straight out of get checkouts

01:00:03,890 --> 01:00:07,610
which is cool for a developer but not

01:00:06,080 --> 01:00:10,130
necessarily good for a repeatable

01:00:07,610 --> 01:00:12,160
production deployment so that's what's

01:00:10,130 --> 01:00:14,840
bad about it it's great for really quick

01:00:12,160 --> 01:00:16,910
it's it's one script you run that starts

01:00:14,840 --> 01:00:18,950
all this stuff up but it doesn't use

01:00:16,910 --> 01:00:20,060
it's not using packages for OpenStack

01:00:18,950 --> 01:00:26,420
it's just using the latest stuff how to

01:00:20,060 --> 01:00:27,620
get what's the newest stuff in yeah i

01:00:26,420 --> 01:00:28,970
don't know let's let's talk afterwards

01:00:27,620 --> 01:00:33,700
probably putting on time to run through

01:00:28,970 --> 01:00:37,130
all that but um okay maybe like one

01:00:33,700 --> 01:00:42,500
super quick lens doesn't support ipv6

01:00:37,130 --> 01:00:47,090
yes so cool well I think that's about

01:00:42,500 --> 01:00:48,980
all the time I had we have if you'd like

01:00:47,090 --> 01:00:50,810
to talk more feel free to contact me

01:00:48,980 --> 01:00:53,390
it's my email address and i'm on twitter

01:00:50,810 --> 01:00:54,620
feel free to get me there too and thank

01:00:53,390 --> 01:00:56,210
you very much for your time and your and

01:00:54,620 --> 01:00:58,330
your attention i ever appreciate it very

01:00:56,210 --> 01:00:58,330
much

01:01:01,799 --> 01:01:03,859
you

01:01:09,549 --> 01:01:14,359
when we created asterisk over a decade

01:01:12,259 --> 01:01:16,579
ago we could not have imagined that

01:01:14,359 --> 01:01:18,769
asterisk would not only become the most

01:01:16,579 --> 01:01:20,930
widely adopted open source communication

01:01:18,769 --> 01:01:22,940
software on the planet but that it would

01:01:20,930 --> 01:01:25,460
impact the entire industry in the way

01:01:22,940 --> 01:01:27,440
that it has today asterisk has found its

01:01:25,460 --> 01:01:30,079
way into more than 170 countries and

01:01:27,440 --> 01:01:32,029
virtually every fortune 1000 company the

01:01:30,079 --> 01:01:34,130
success of asterisk has enabled a

01:01:32,029 --> 01:01:35,539
transition of power from the hands of

01:01:34,130 --> 01:01:37,819
the traditional proprietary phone

01:01:35,539 --> 01:01:40,220
vendors into the hands of the users and

01:01:37,819 --> 01:01:42,289
administrators of phone systems using

01:01:40,220 --> 01:01:43,940
this power our customers have traded all

01:01:42,289 --> 01:01:46,009
sorts of business changing applications

01:01:43,940 --> 01:01:47,809
from small office phone systems to

01:01:46,009 --> 01:01:49,940
mission-critical call centers the

01:01:47,809 --> 01:01:51,740
international carrier networks in fact

01:01:49,940 --> 01:01:53,210
there's even an entire country those

01:01:51,740 --> 01:01:55,460
communications infrastructure runs on

01:01:53,210 --> 01:01:57,589
esters the gym has always been about

01:01:55,460 --> 01:01:59,299
creating technology that expands

01:01:57,589 --> 01:02:01,490
communications capabilities in ways that

01:01:59,299 --> 01:02:02,660
we could never have imagined and that's

01:02:01,490 --> 01:02:05,059
part of what's game-changing about

01:02:02,660 --> 01:02:07,759
Digium today we're doing it again this

01:02:05,059 --> 01:02:09,859
time by introducing a new family of HD

01:02:07,759 --> 01:02:11,960
IP phones that extends control of the

01:02:09,859 --> 01:02:13,730
user all the way to the desktop the

01:02:11,960 --> 01:02:15,440
launch of these new products represents

01:02:13,730 --> 01:02:17,539
the next phase indigenous history of

01:02:15,440 --> 01:02:19,940
innovation these are the first and only

01:02:17,539 --> 01:02:21,650
IP phones designed to fully leverage the

01:02:19,940 --> 01:02:23,210
power of Astra's when we first discussed

01:02:21,650 --> 01:02:25,250
our expectations for building a family

01:02:23,210 --> 01:02:27,380
of phones for use with asterisk our

01:02:25,250 --> 01:02:29,119
requirements were pretty simple we asked

01:02:27,380 --> 01:02:30,769
the team to build the phones such that

01:02:29,119 --> 01:02:32,960
they were easy to install integrate

01:02:30,769 --> 01:02:34,819
provision and use I think you'll soon

01:02:32,960 --> 01:02:37,369
agree our engineers have delivered on

01:02:34,819 --> 01:02:38,990
that goal user feedback is validating

01:02:37,369 --> 01:02:41,119
that when it comes to operation with

01:02:38,990 --> 01:02:43,549
Astra space systems including our own

01:02:41,119 --> 01:02:46,099
Switchvox based product these are the

01:02:43,549 --> 01:02:47,420
easiest to use best integrated most

01:02:46,099 --> 01:02:50,000
interoperable products on the market

01:02:47,420 --> 01:02:52,000
today the digitally of phones will

01:02:50,000 --> 01:02:54,049
initially include three IP des hommes

01:02:52,000 --> 01:02:56,000
uniquely designed to complement any

01:02:54,049 --> 01:02:57,859
asterisks or Switchvox based solution

01:02:56,000 --> 01:03:00,529
these phones are different for a number

01:02:57,859 --> 01:03:03,200
of reasons first there is clue sively

01:03:00,529 --> 01:03:04,609
designed for use with esters secondly

01:03:03,200 --> 01:03:06,220
we've made it really easy to

01:03:04,609 --> 01:03:08,630
autodiscover and provision the phones

01:03:06,220 --> 01:03:10,309
next we've made it easy for the phones

01:03:08,630 --> 01:03:12,270
to access information inside of

01:03:10,309 --> 01:03:14,270
asterisks allowing tight coupling

01:03:12,270 --> 01:03:16,260
between an application and the phone

01:03:14,270 --> 01:03:18,390
additionally we've created an

01:03:16,260 --> 01:03:20,520
applications engine that allows users

01:03:18,390 --> 01:03:23,760
and developers to create and run their

01:03:20,520 --> 01:03:25,530
own apps on the phone and finally we've

01:03:23,760 --> 01:03:27,480
done all of this at a very compelling

01:03:25,530 --> 01:03:29,160
price point at Digium we're always

01:03:27,480 --> 01:03:31,260
thinking of ways to give our customers

01:03:29,160 --> 01:03:33,840
the best value in business phone systems

01:03:31,260 --> 01:03:35,490
and also give them the power to create

01:03:33,840 --> 01:03:37,530
their own solutions for eating

01:03:35,490 --> 01:03:39,240
communications challenge will continue

01:03:37,530 --> 01:03:40,680
to push the boundaries not only to make

01:03:39,240 --> 01:03:42,690
Astra's cooler bastard more

01:03:40,680 --> 01:03:44,340
technologically feature-rich but to make

01:03:42,690 --> 01:03:46,830
asterisk and what communications even

01:03:44,340 --> 01:03:50,540
easier and together we'll change the way

01:03:46,830 --> 01:03:50,540
the world communicates again

01:03:55,680 --> 01:03:57,740
you

01:04:00,930 --> 01:04:07,750
how's that sigh every way this is the

01:04:04,450 --> 01:04:09,910
way to better utilize all your resources

01:04:07,750 --> 01:04:13,390
and it makes managing all your resources

01:04:09,910 --> 01:04:17,220
pretty easy all of the innovation is

01:04:13,390 --> 01:04:20,680
happening in open source the

01:04:17,220 --> 01:04:22,540
collaborative nature and of the you know

01:04:20,680 --> 01:04:24,640
of the community and the speed at which

01:04:22,540 --> 01:04:26,620
these are these you know these these

01:04:24,640 --> 01:04:28,510
deficiencies these bugs are getting

01:04:26,620 --> 01:04:30,610
discovered and then fixed is it

01:04:28,510 --> 01:04:32,320
everything that really shows the power

01:04:30,610 --> 01:04:35,080
of the you know of the open source

01:04:32,320 --> 01:04:37,230
community it is global and it's

01:04:35,080 --> 01:04:40,780
definitely because of the users

01:04:37,230 --> 01:04:46,660
community people are extremely friendly

01:04:40,780 --> 01:04:48,490
and always ready to help if you go an

01:04:46,660 --> 01:04:50,680
entire see any day you'll see these guys

01:04:48,490 --> 01:04:53,320
helping each other out and they're all

01:04:50,680 --> 01:04:55,000
doing it like in a selfless manner the

01:04:53,320 --> 01:04:58,020
product is transparent for everyone

01:04:55,000 --> 01:05:01,210
everyone can look at the code base

01:04:58,020 --> 01:05:03,420
everyone can see how CloudStack is being

01:05:01,210 --> 01:05:08,950
built nothing nothing is proprietary

01:05:03,420 --> 01:05:11,590
everything is open in many ways it's

01:05:08,950 --> 01:05:16,030
absolutely vital to the tea ongoing

01:05:11,590 --> 01:05:20,230
health card stack the most exciting

01:05:16,030 --> 01:05:23,050
event in recent memory for me was our

01:05:20,230 --> 01:05:25,720
first developer boot camp

01:05:23,050 --> 01:05:28,360
and our call gave people I gave me two

01:05:25,720 --> 01:05:32,320
weeks notice to come attend I was

01:05:28,360 --> 01:05:36,490
expecting 25 or 30 people so we ended up

01:05:32,320 --> 01:05:39,340
with 87 people and had to go get more

01:05:36,490 --> 01:05:41,860
chairs in the room twice everything

01:05:39,340 --> 01:05:45,100
within cloud computing is commodity and

01:05:41,860 --> 01:05:48,190
is open source and so I don't think that

01:05:45,100 --> 01:05:49,930
you will you'll see anywhere where open

01:05:48,190 --> 01:05:52,960
source is not pervasive in cloud

01:05:49,930 --> 01:05:55,690
computing and so i think it's i think

01:05:52,960 --> 01:05:57,040
it's an assumption i think when you talk

01:05:55,690 --> 01:06:00,750
about cloud computing you're really

01:05:57,040 --> 01:06:00,750
talking about a source cloud computing

01:06:01,050 --> 01:06:07,090
cloud sac is a robust solution for large

01:06:04,330 --> 01:06:09,490
deployments you'll have dozens of data

01:06:07,090 --> 01:06:13,510
centers and thousands of servers in each

01:06:09,490 --> 01:06:16,780
data centers these hardware is going to

01:06:13,510 --> 01:06:19,990
fail and CloudStack is designed to

01:06:16,780 --> 01:06:22,450
handle number one that mass scale number

01:06:19,990 --> 01:06:25,180
two it's designed to handle the failure

01:06:22,450 --> 01:06:27,520
that inevitably happens in large

01:06:25,180 --> 01:06:30,280
deployments we started working on a

01:06:27,520 --> 01:06:33,790
college attack over four years ago and

01:06:30,280 --> 01:06:36,370
it was the original set of people

01:06:33,790 --> 01:06:38,560
working on it had a background of

01:06:36,370 --> 01:06:42,370
delivering software telcos and service

01:06:38,560 --> 01:06:46,780
providers lots of QA lots of users

01:06:42,370 --> 01:06:50,850
actually using it high availability is a

01:06:46,780 --> 01:06:53,770
key feature multiple hypervisors support

01:06:50,850 --> 01:06:56,200
different network models you can pick up

01:06:53,770 --> 01:06:58,210
whatever suits you better while step

01:06:56,200 --> 01:07:01,870
management server can be deployed in

01:06:58,210 --> 01:07:03,670
different physical machines it

01:07:01,870 --> 01:07:05,290
definitely has a huge footprint it's

01:07:03,670 --> 01:07:09,600
being deployed everywhere there's a

01:07:05,290 --> 01:07:09,600
major movie studio that

01:07:09,619 --> 01:07:15,410
were using cloudstack they were using it

01:07:12,200 --> 01:07:17,480
to transcode video and I thought that

01:07:15,410 --> 01:07:19,130
was terribly fascinating what I found

01:07:17,480 --> 01:07:22,400
more fascinating is what they did during

01:07:19,130 --> 01:07:25,190
lunch where they would spin up you know

01:07:22,400 --> 01:07:26,539
50 or 60 game servers then as soon as

01:07:25,190 --> 01:07:28,309
lunch was over they would destroy all

01:07:26,539 --> 01:07:32,299
the instances and get back to doing a

01:07:28,309 --> 01:07:33,950
lil work cloudstack is vast it touches

01:07:32,299 --> 01:07:36,019
so many different aspects and there's no

01:07:33,950 --> 01:07:38,390
one person that's kind of like a master

01:07:36,019 --> 01:07:42,499
of all those realms I think cloudstack

01:07:38,390 --> 01:07:44,720
as a project is going to be one of the

01:07:42,499 --> 01:07:48,799
leaders simply because it's some of the

01:07:44,720 --> 01:07:54,230
most feature pulling and and robust

01:07:48,799 --> 01:07:57,130
platforms out they were Adam senior

01:07:54,230 --> 01:07:57,130
living for the clouds dag

01:08:40,710 --> 01:08:42,770

YouTube URL: https://www.youtube.com/watch?v=Fx5DINgGYMM


