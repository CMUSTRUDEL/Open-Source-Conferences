Title: 2012 SouthEast LinuxFest - MySQL Training - Ronald Bradford - Avoid MySQL Disasters
Publication date: 2013-12-02
Playlist: 2012 SouthEast LinuxFest
Description: 
	2012 SouthEast LinuxFest
MySQL Beginner Training
Ronald Bradford
MySQL Disasters and How To Avoid Yours
Captions: 
	00:00:00,000 --> 00:00:05,279
the following presentation was recorded

00:00:02,490 --> 00:00:08,040
the 2012 southeast linux fest in

00:00:05,279 --> 00:00:10,410
charlotte north carolina it is licensed

00:00:08,040 --> 00:00:12,090
under a creative commons license for

00:00:10,410 --> 00:00:16,859
more information about the southeast

00:00:12,090 --> 00:00:19,230
linux fest visit www.lend expense org

00:00:16,859 --> 00:00:21,320
the southeast linux fest would like to

00:00:19,230 --> 00:00:23,279
thank the following diamond sponsors in

00:00:21,320 --> 00:00:29,220
2012 for helping make these videos

00:00:23,279 --> 00:00:31,700
possible we'll get started welcome is

00:00:29,220 --> 00:00:34,200
everyone enjoying southeast linux fist

00:00:31,700 --> 00:00:36,960
who's a newbie who's like here for the

00:00:34,200 --> 00:00:41,399
first time okay well i'm the first time

00:00:36,960 --> 00:00:43,020
or two so don't feel bad okay after you

00:00:41,399 --> 00:00:44,610
start going to conferences for a while

00:00:43,020 --> 00:00:47,129
and you go to them six seven eight years

00:00:44,610 --> 00:00:50,730
in a row meet people but it's always

00:00:47,129 --> 00:00:54,020
good to go to a new one so i'm here

00:00:50,730 --> 00:00:56,520
today and i know the title the talked

00:00:54,020 --> 00:01:01,859
actually was called disasters inevitable

00:00:56,520 --> 00:01:03,809
and disaster is inevitable however since

00:01:01,859 --> 00:01:06,090
presenting the talk i actually changed

00:01:03,809 --> 00:01:08,070
the title a little bit to make it a

00:01:06,090 --> 00:01:10,380
little bit more marketing friendly

00:01:08,070 --> 00:01:15,390
however it's the same talk don't be

00:01:10,380 --> 00:01:17,130
alarmed today what I'm going to do is

00:01:15,390 --> 00:01:21,240
I'm going to talk about some quite

00:01:17,130 --> 00:01:22,350
notable mysql disasters I there are

00:01:21,240 --> 00:01:24,000
quite a few that one could talk about

00:01:22,350 --> 00:01:26,729
like I spend an entire session just

00:01:24,000 --> 00:01:30,869
talking about interesting things but the

00:01:26,729 --> 00:01:32,970
premise of this talk is to scare you to

00:01:30,869 --> 00:01:36,180
realize that these disasters are real

00:01:32,970 --> 00:01:40,790
any type of disaster is real and you

00:01:36,180 --> 00:01:40,790
should work towards avoiding your own

00:01:49,850 --> 00:01:55,750
in this presentation I'm going to

00:01:53,330 --> 00:01:58,790
provide a little bit of philosophy

00:01:55,750 --> 00:02:01,850
things that will stick in your mind keep

00:01:58,790 --> 00:02:03,799
you awake at night words you may be able

00:02:01,850 --> 00:02:07,220
to use to scare your management team

00:02:03,799 --> 00:02:11,360
with or ways to try and get more funding

00:02:07,220 --> 00:02:14,030
so this is one of many quite simply it

00:02:11,360 --> 00:02:17,150
is no one cares if you can back up only

00:02:14,030 --> 00:02:18,290
that you can restore so even though

00:02:17,150 --> 00:02:20,690
we're going to be talking about backup

00:02:18,290 --> 00:02:22,340
procedures and people create backup

00:02:20,690 --> 00:02:24,530
procedures and test backup procedures

00:02:22,340 --> 00:02:27,140
then put them on remote control it

00:02:24,530 --> 00:02:32,110
really doesn't help when you find out

00:02:27,140 --> 00:02:35,060
you can't actually use your backup so

00:02:32,110 --> 00:02:36,890
there are some initial steps that I want

00:02:35,060 --> 00:02:41,450
to talk about and I highlight five steps

00:02:36,890 --> 00:02:43,069
that I use the five steps to recovery we

00:02:41,450 --> 00:02:46,549
can come up with a better term for that

00:02:43,069 --> 00:02:49,700
no five steps for it you know databases

00:02:46,549 --> 00:02:51,049
anonymous or something I have a couple

00:02:49,700 --> 00:02:52,750
of examples I want to share with you

00:02:51,049 --> 00:02:54,260
just to show you what happens in a

00:02:52,750 --> 00:02:57,650
well-prepared and less prepared

00:02:54,260 --> 00:03:00,200
environment and I really want to point

00:02:57,650 --> 00:03:02,090
out two important aspects in the

00:03:00,200 --> 00:03:04,519
recovery process that are specific to

00:03:02,090 --> 00:03:06,230
most well one is understanding

00:03:04,519 --> 00:03:09,820
interpreting and using the concept of

00:03:06,230 --> 00:03:13,810
point in time and how mysql replication

00:03:09,820 --> 00:03:16,250
works in the use of backup and recovery

00:03:13,810 --> 00:03:18,560
because the higher vailable system

00:03:16,250 --> 00:03:22,420
doesn't start with one server I

00:03:18,560 --> 00:03:25,700
availability starts with two or 10 or

00:03:22,420 --> 00:03:27,890
something like that so replication is an

00:03:25,700 --> 00:03:29,720
important factor in having a highly

00:03:27,890 --> 00:03:33,049
available environment with backup and

00:03:29,720 --> 00:03:34,010
recovery I think some of you are some of

00:03:33,049 --> 00:03:35,810
you weren't here from the first

00:03:34,010 --> 00:03:38,030
presentation so here's the blurb about

00:03:35,810 --> 00:03:40,130
me I've been doing this my school stuff

00:03:38,030 --> 00:03:42,590
a little while now I've written a couple

00:03:40,130 --> 00:03:46,910
books someone said I was the all-time

00:03:42,590 --> 00:03:49,970
top bloggers I work for MySQL I do a lot

00:03:46,910 --> 00:03:52,310
of speaking in fact last year I managed

00:03:49,970 --> 00:03:55,459
13 different countries in terms of being

00:03:52,310 --> 00:03:58,489
invited to go speak in mysql related

00:03:55,459 --> 00:04:00,430
talks and I do my escort consulting on

00:03:58,489 --> 00:04:02,019
my own as an individual so

00:04:00,430 --> 00:04:06,129
if you have a problem later come and

00:04:02,019 --> 00:04:07,780
talk to me and we can talk terms so here

00:04:06,129 --> 00:04:10,120
are five steps that I want to talk about

00:04:07,780 --> 00:04:12,730
in terms of backup and recovery and I

00:04:10,120 --> 00:04:14,079
want to describe these first before I

00:04:12,730 --> 00:04:16,180
start talking about certain

00:04:14,079 --> 00:04:18,699
circumstances so that I can reinforce

00:04:16,180 --> 00:04:21,430
the things that you should be doing with

00:04:18,699 --> 00:04:24,009
mysql and if you're not doing these with

00:04:21,430 --> 00:04:26,320
mysql you should be up front in saying

00:04:24,009 --> 00:04:29,410
that you're not so that you can work

00:04:26,320 --> 00:04:33,400
through them and get on to knowing that

00:04:29,410 --> 00:04:37,690
your system is safe the first is you

00:04:33,400 --> 00:04:40,240
have to have a backup strategy now I

00:04:37,690 --> 00:04:41,560
guess really point zero is you have to

00:04:40,240 --> 00:04:43,780
have thought about creating a backup

00:04:41,560 --> 00:04:47,110
strategy in a recovery strategy and at

00:04:43,780 --> 00:04:48,970
least tried something that's important

00:04:47,110 --> 00:04:52,539
to start with when it comes to backups

00:04:48,970 --> 00:04:56,560
there are two essential components to a

00:04:52,539 --> 00:05:00,370
mysql backup the first is a static and

00:04:56,560 --> 00:05:02,169
consistent backup of your data and I'll

00:05:00,370 --> 00:05:04,120
talk a little bit more about static and

00:05:02,169 --> 00:05:06,340
consistent later because both of those

00:05:04,120 --> 00:05:09,000
words are important you can have a

00:05:06,340 --> 00:05:12,820
static backup that's not consistent and

00:05:09,000 --> 00:05:17,110
the second most important thing is the

00:05:12,820 --> 00:05:19,330
master binary logs these are the archive

00:05:17,110 --> 00:05:22,060
redo logs or transactions that have

00:05:19,330 --> 00:05:26,740
occurred since your static consistent

00:05:22,060 --> 00:05:30,039
backup correspondingly if you have a

00:05:26,740 --> 00:05:33,880
recovery process follows a similar

00:05:30,039 --> 00:05:36,340
pattern you perform a recovery of the

00:05:33,880 --> 00:05:41,139
static portion and then you do a

00:05:36,340 --> 00:05:42,909
point-in-time recovery which is taking

00:05:41,139 --> 00:05:45,009
the data from the time in which the last

00:05:42,909 --> 00:05:50,620
backup occurred for example two o'clock

00:05:45,009 --> 00:05:52,900
this morning up until now 245 p.m. all

00:05:50,620 --> 00:05:54,490
those orders all those transactions all

00:05:52,900 --> 00:05:56,530
those customer comments tweets

00:05:54,490 --> 00:05:59,289
everything that you have that you really

00:05:56,530 --> 00:06:03,699
want to keep that is what's necessary to

00:05:59,289 --> 00:06:07,720
do a point-in-time recovery the third

00:06:03,699 --> 00:06:10,000
step which may sound like it doesn't

00:06:07,720 --> 00:06:12,370
need to be a point but really is is that

00:06:10,000 --> 00:06:14,340
you have to verify every step that you

00:06:12,370 --> 00:06:17,230
take in your process

00:06:14,340 --> 00:06:19,450
every command that you execute you have

00:06:17,230 --> 00:06:22,600
to look at the status you have to look

00:06:19,450 --> 00:06:25,420
at the errors and you also have to look

00:06:22,600 --> 00:06:26,890
at creating expectations of the results

00:06:25,420 --> 00:06:30,330
that you're actually getting both

00:06:26,890 --> 00:06:32,470
approximate and precise what do you

00:06:30,330 --> 00:06:34,450
approximately expect in a particular

00:06:32,470 --> 00:06:38,470
step how long do you expect it to take

00:06:34,450 --> 00:06:41,650
for example this is important because if

00:06:38,470 --> 00:06:44,110
you skip one of these steps then a great

00:06:41,650 --> 00:06:46,260
backup and recovery process could become

00:06:44,110 --> 00:06:49,180
useless because you can verify one step

00:06:46,260 --> 00:06:53,620
so it's very important that's why it's

00:06:49,180 --> 00:06:56,380
reiterated here now in my time of

00:06:53,620 --> 00:06:59,740
dealing with customers and I've been

00:06:56,380 --> 00:07:02,800
doing consulting both in Oracle in the

00:06:59,740 --> 00:07:05,160
90s and mysql in the 2000s so I've been

00:07:02,800 --> 00:07:08,700
doing this for a while very few people

00:07:05,160 --> 00:07:10,720
understand what testing actually is

00:07:08,700 --> 00:07:12,310
people go you know how teachers are

00:07:10,720 --> 00:07:14,230
software well you know we make sure that

00:07:12,310 --> 00:07:16,750
it starts and stops and does this and

00:07:14,230 --> 00:07:19,180
does that and that's fine if you want to

00:07:16,750 --> 00:07:21,250
do a smoke test but testing is about

00:07:19,180 --> 00:07:24,100
trying to break your software or break

00:07:21,250 --> 00:07:25,870
your process so with every backup and

00:07:24,100 --> 00:07:27,310
recovery process you're doing you have

00:07:25,870 --> 00:07:29,050
to look at these edge cases because

00:07:27,310 --> 00:07:32,680
they're the things that will cause pain

00:07:29,050 --> 00:07:35,470
when you least expect it so it's an

00:07:32,680 --> 00:07:38,170
important thing to realize that testing

00:07:35,470 --> 00:07:41,610
the process and testing all of those

00:07:38,170 --> 00:07:45,940
exception cases is what you work on and

00:07:41,610 --> 00:07:49,570
finally it's important that you have

00:07:45,940 --> 00:07:51,820
applicable redundancy in place people

00:07:49,570 --> 00:07:54,070
use braid five and raid 10 and jewel

00:07:51,820 --> 00:07:57,670
network cards because they want to

00:07:54,070 --> 00:08:00,970
create redundancy and redundancy is not

00:07:57,670 --> 00:08:05,200
a replacement for backup and recovery

00:08:00,970 --> 00:08:06,970
it's just an ability to reduce the

00:08:05,200 --> 00:08:10,620
different types of scenarios that you

00:08:06,970 --> 00:08:12,550
have to cater for mysql is no different

00:08:10,620 --> 00:08:15,760
particularly having copies of the data

00:08:12,550 --> 00:08:18,010
not on the server in question if you

00:08:15,760 --> 00:08:19,120
have a server and you do a backup on the

00:08:18,010 --> 00:08:21,040
server you leave the files and that

00:08:19,120 --> 00:08:23,110
server or leave the copies of the binary

00:08:21,040 --> 00:08:25,450
log on that server doesn't work if you

00:08:23,110 --> 00:08:27,220
can't access the server whether

00:08:25,450 --> 00:08:30,310
someone's powered it off the hard drive

00:08:27,220 --> 00:08:34,150
fail the building burnt down you need to

00:08:30,310 --> 00:08:36,849
have copies of your data elsewhere so

00:08:34,150 --> 00:08:39,960
gone through those five steps and as you

00:08:36,849 --> 00:08:43,060
were drawn to this presentation today

00:08:39,960 --> 00:08:46,480
disaster is inevitable it will happen

00:08:43,060 --> 00:08:49,960
there is an absolute guarantee that it

00:08:46,480 --> 00:08:51,940
will happen however total failure of

00:08:49,960 --> 00:08:55,650
your system is avoidable with

00:08:51,940 --> 00:08:58,510
appropriate planning you can avoid

00:08:55,650 --> 00:09:01,060
common scenarios if you actually know

00:08:58,510 --> 00:09:03,820
about them you can avoid less common

00:09:01,060 --> 00:09:07,180
scenarios now there is no way to avoid

00:09:03,820 --> 00:09:08,800
everything sooner or later you know the

00:09:07,180 --> 00:09:10,870
world will run out of power every

00:09:08,800 --> 00:09:12,390
computer will stop and then doesn't

00:09:10,870 --> 00:09:15,580
matter what backup strategy you have or

00:09:12,390 --> 00:09:19,060
an earthquake or a power problem will

00:09:15,580 --> 00:09:21,160
take out a whole West Coast and you have

00:09:19,060 --> 00:09:23,140
to have like geo redundancy so every

00:09:21,160 --> 00:09:25,210
time you have a particular strategy in

00:09:23,140 --> 00:09:26,740
place you know you can go one step

00:09:25,210 --> 00:09:29,020
further they can go from one server to

00:09:26,740 --> 00:09:30,610
server you can go to end servers but

00:09:29,020 --> 00:09:32,110
then servers in one rack and then

00:09:30,610 --> 00:09:34,300
there's a power problem on the rack and

00:09:32,110 --> 00:09:35,890
you go to two racks or two data centers

00:09:34,300 --> 00:09:38,290
and so forth so there are

00:09:35,890 --> 00:09:41,920
ever-increasing ways to improve your

00:09:38,290 --> 00:09:43,810
system at greater cost so you have to

00:09:41,920 --> 00:09:47,020
determine what's also acceptable for

00:09:43,810 --> 00:09:48,820
your business I have two stories i want

00:09:47,020 --> 00:09:52,800
to share with you because now I've given

00:09:48,820 --> 00:09:54,610
you the steps that you need to undertake

00:09:52,800 --> 00:09:55,810
haven't talked about how to do them but

00:09:54,610 --> 00:09:57,550
i'm giving you the steps to think about

00:09:55,810 --> 00:10:01,240
what's involved and i want to go through

00:09:57,550 --> 00:10:05,530
two examples the first example is a

00:10:01,240 --> 00:10:08,170
customer who has mysql replication place

00:10:05,530 --> 00:10:10,110
a master and two slaves so they've

00:10:08,170 --> 00:10:12,339
already thought about high availability

00:10:10,110 --> 00:10:13,960
they've got a dedicated machine that

00:10:12,339 --> 00:10:15,760
they can take offline and do a copy on

00:10:13,960 --> 00:10:17,860
the slave so they don't have to worry

00:10:15,760 --> 00:10:21,130
about any blocking operations so they

00:10:17,860 --> 00:10:23,740
can have 24 by 7 operations they make

00:10:21,130 --> 00:10:26,170
copies of the binary logs and they put

00:10:23,740 --> 00:10:27,520
them on another machine every five

00:10:26,170 --> 00:10:29,380
minutes so they've got copies of the

00:10:27,520 --> 00:10:31,240
data in case that primary machine is a

00:10:29,380 --> 00:10:34,150
way they don't want to use a slave

00:10:31,240 --> 00:10:36,190
machine to failover to they've actually

00:10:34,150 --> 00:10:38,380
tested the process they've actually gone

00:10:36,190 --> 00:10:39,160
through and like recreated in your

00:10:38,380 --> 00:10:40,930
server and

00:10:39,160 --> 00:10:42,699
walk back the backup file and restored

00:10:40,930 --> 00:10:45,100
the backup file done a point in time

00:10:42,699 --> 00:10:46,720
recovery and they actually also have

00:10:45,100 --> 00:10:50,379
monitoring in place so that if the

00:10:46,720 --> 00:10:52,180
system goes down or replication fail or

00:10:50,379 --> 00:10:55,300
something then an alert will be

00:10:52,180 --> 00:10:57,759
presented if you don't have those things

00:10:55,300 --> 00:10:59,560
in place then you should this

00:10:57,759 --> 00:11:02,110
organization has all these things in

00:10:59,560 --> 00:11:03,759
place so you would assume that their

00:11:02,110 --> 00:11:10,089
backup when Co recovery strategy will

00:11:03,759 --> 00:11:11,259
work yes no maybe put it this way if you

00:11:10,089 --> 00:11:12,910
don't have all those things in place

00:11:11,259 --> 00:11:15,759
you're at a higher risk than this

00:11:12,910 --> 00:11:18,670
customer who has all of those things in

00:11:15,759 --> 00:11:22,029
place with their MySQL any brave soul

00:11:18,670 --> 00:11:23,920
one brave soul excellent i don't think i

00:11:22,029 --> 00:11:26,740
have it in these slides but i have on my

00:11:23,920 --> 00:11:29,170
website that the first ten things that

00:11:26,740 --> 00:11:30,610
you should do it to review your backup

00:11:29,170 --> 00:11:32,230
and recovery it's like a quiz the first

00:11:30,610 --> 00:11:34,300
ten points it's not all of the points

00:11:32,230 --> 00:11:36,730
it's just the first ten and I've yet to

00:11:34,300 --> 00:11:40,060
find a customer including myself who

00:11:36,730 --> 00:11:41,769
does all ten you know my blog i can

00:11:40,060 --> 00:11:43,810
afford not to check the backup log every

00:11:41,769 --> 00:11:46,029
day no reproduction customer you can't

00:11:43,810 --> 00:11:47,230
do that so here's a customer here's an

00:11:46,029 --> 00:11:48,550
example they've thought about that

00:11:47,230 --> 00:11:51,310
backup and recovery process they have a

00:11:48,550 --> 00:11:56,589
full-time DBA on staff they have system

00:11:51,310 --> 00:12:00,389
ministration team but here's what

00:11:56,589 --> 00:12:04,870
happens at some time in the morning

00:12:00,389 --> 00:12:07,420
never when you expect it to happen the

00:12:04,870 --> 00:12:10,120
system was trying to write the binary

00:12:07,420 --> 00:12:12,189
log which is the log that keeps a record

00:12:10,120 --> 00:12:16,170
of all the transactions on the master

00:12:12,189 --> 00:12:19,000
and the disk filled up and so MySQL

00:12:16,170 --> 00:12:22,779
turns off the logging for the entire

00:12:19,000 --> 00:12:25,720
duration of the process now if anyone

00:12:22,779 --> 00:12:29,230
understands how replication works Master

00:12:25,720 --> 00:12:31,000
writes its changes to the data writes

00:12:29,230 --> 00:12:33,790
its changes to the binary log and the

00:12:31,000 --> 00:12:36,250
binary log is what's transferred to the

00:12:33,790 --> 00:12:38,740
slaves to replay that operation on the

00:12:36,250 --> 00:12:40,689
two slaves but if it's not writing

00:12:38,740 --> 00:12:42,579
binary log transactions but it's writing

00:12:40,689 --> 00:12:44,860
data because the data is on a different

00:12:42,579 --> 00:12:47,319
petition the slaves aren't getting the

00:12:44,860 --> 00:12:51,130
changes so the master is now different

00:12:47,319 --> 00:12:52,090
to the two slaves not where you want to

00:12:51,130 --> 00:12:54,950
be

00:12:52,090 --> 00:12:59,770
now as I mentioned having masters and

00:12:54,950 --> 00:12:59,770
slaves and cut in place for a reason I

00:13:01,330 --> 00:13:06,770
already started talking so it'll be a

00:13:03,440 --> 00:13:10,580
shortish sure to a story so they have

00:13:06,770 --> 00:13:13,760
masters and slaves they have system

00:13:10,580 --> 00:13:17,720
monitoring in place don't they have a

00:13:13,760 --> 00:13:21,230
monitoring alert for just full close to

00:13:17,720 --> 00:13:24,290
disk full of course they do and did that

00:13:21,230 --> 00:13:25,850
alert fire of course it did but the

00:13:24,290 --> 00:13:29,480
problem is the system administrators on

00:13:25,850 --> 00:13:31,820
vacation and the person who need trained

00:13:29,480 --> 00:13:33,410
to do that was actually looking at the

00:13:31,820 --> 00:13:36,020
areas but didn't really know what to do

00:13:33,410 --> 00:13:37,390
and in this particular organization

00:13:36,020 --> 00:13:40,220
there was a very fine line between

00:13:37,390 --> 00:13:42,800
system administration and database

00:13:40,220 --> 00:13:45,560
administration and one of the procedural

00:13:42,800 --> 00:13:47,660
problem was is that the dbas were not

00:13:45,560 --> 00:13:49,460
given the alerts to the system because

00:13:47,660 --> 00:13:51,230
that's the role of the system

00:13:49,460 --> 00:13:53,480
administration team we know how to do

00:13:51,230 --> 00:13:56,300
that so you don't need to know and have

00:13:53,480 --> 00:13:57,920
access to those things so the system

00:13:56,300 --> 00:13:59,930
administration team have their fancy

00:13:57,920 --> 00:14:01,670
procedures their things to say the disk

00:13:59,930 --> 00:14:04,640
is filling up but no one acted on

00:14:01,670 --> 00:14:06,980
something for four hours so the disk

00:14:04,640 --> 00:14:09,740
filled up what it really does this mean

00:14:06,980 --> 00:14:13,760
well first of all you have a production

00:14:09,740 --> 00:14:16,580
system that is still writing data so the

00:14:13,760 --> 00:14:19,310
data is there but the two slaves are now

00:14:16,580 --> 00:14:20,720
completely useless you can't use them

00:14:19,310 --> 00:14:24,290
because they don't have an ability to

00:14:20,720 --> 00:14:26,870
catch up to the master there's a backup

00:14:24,290 --> 00:14:29,030
process in place it backs up the slaves

00:14:26,870 --> 00:14:31,090
or the can't back up a slave anymore

00:14:29,030 --> 00:14:35,390
because the slave is no longer

00:14:31,090 --> 00:14:37,760
consistent so we now have a working

00:14:35,390 --> 00:14:40,640
environment that is almost completely

00:14:37,760 --> 00:14:42,800
broken the system can continue to work

00:14:40,640 --> 00:14:44,450
but the slaves that are being using for

00:14:42,800 --> 00:14:46,880
reading and reporting can no longer work

00:14:44,450 --> 00:14:48,710
the backup strategy will no longer work

00:14:46,880 --> 00:14:51,470
there no longer an ability to be able to

00:14:48,710 --> 00:14:53,630
recover their system so the issue here

00:14:51,470 --> 00:14:56,270
is that they have to fix this problem to

00:14:53,630 --> 00:14:58,130
fix this problem have to stop the master

00:14:56,270 --> 00:15:01,250
database which you don't normally do

00:14:58,130 --> 00:15:03,290
because we have redundancy in place they

00:15:01,250 --> 00:15:05,810
also have to take a backup of the master

00:15:03,290 --> 00:15:08,090
database because they have to read

00:15:05,810 --> 00:15:10,520
we ate the two slaves now they haven't

00:15:08,090 --> 00:15:13,970
tested this because the backup process

00:15:10,520 --> 00:15:16,940
runs on the slave software doesn't even

00:15:13,970 --> 00:15:18,980
exist on the master the slave with the

00:15:16,940 --> 00:15:20,270
backups actually has more disk based in

00:15:18,980 --> 00:15:22,880
the master and they can't actually even

00:15:20,270 --> 00:15:25,130
run a backup on the master so there's

00:15:22,880 --> 00:15:27,680
this whole cascading effect of problems

00:15:25,130 --> 00:15:31,550
all because of one alert that wasn't

00:15:27,680 --> 00:15:32,960
looked at so disasters can happen when

00:15:31,550 --> 00:15:35,060
you least expect it and it doesn't have

00:15:32,960 --> 00:15:36,230
to be something serious and you may

00:15:35,060 --> 00:15:39,589
already have all these procedures in

00:15:36,230 --> 00:15:42,440
place and you can still fail so the

00:15:39,589 --> 00:15:45,020
triage of this problem was bureaucracy

00:15:42,440 --> 00:15:46,100
was a problem information wasn't being

00:15:45,020 --> 00:15:48,440
shared that it should be this is

00:15:46,100 --> 00:15:51,380
actually ironically a common problem in

00:15:48,440 --> 00:15:53,720
larger organizations even though an

00:15:51,380 --> 00:15:55,760
appropriate person was trained that

00:15:53,720 --> 00:15:57,170
person wasn't really knowledgeable and

00:15:55,760 --> 00:15:58,960
didn't really know what to do didn't

00:15:57,170 --> 00:16:01,550
disseminate the information and

00:15:58,960 --> 00:16:04,970
information really has to be accessible

00:16:01,550 --> 00:16:06,290
to all parties you know if their

00:16:04,970 --> 00:16:08,180
problems in the system the more eyes

00:16:06,290 --> 00:16:10,670
they can see a dashboard of information

00:16:08,180 --> 00:16:12,980
the more eyes that can alert to someone

00:16:10,670 --> 00:16:15,470
that is a problem and organizations that

00:16:12,980 --> 00:16:17,270
do these particular segmentations of we

00:16:15,470 --> 00:16:18,410
have to have a group that does this we

00:16:17,270 --> 00:16:19,880
have to have a group that does that and

00:16:18,410 --> 00:16:21,380
they're not allowed to touch the system

00:16:19,880 --> 00:16:23,780
and then a legend log in and I've had a

00:16:21,380 --> 00:16:28,339
look at it this is counterproductive for

00:16:23,780 --> 00:16:30,200
a disaster so there's an example of a

00:16:28,339 --> 00:16:33,589
procedure that was in place tested a

00:16:30,200 --> 00:16:35,360
highly-paid DBA dead in the water he

00:16:33,589 --> 00:16:37,550
couldn't do anything because he'd been

00:16:35,360 --> 00:16:38,960
let down by someone else but he's in

00:16:37,550 --> 00:16:42,050
charge of the database so he's the one

00:16:38,960 --> 00:16:46,190
at fault here's another example that

00:16:42,050 --> 00:16:48,260
happened just a few weeks ago where a

00:16:46,190 --> 00:16:50,020
customer emails me and in the morning

00:16:48,260 --> 00:16:53,330
i'm reading my email over breakfast and

00:16:50,020 --> 00:16:55,790
I see subject emergency are you around

00:16:53,330 --> 00:17:02,750
my production system is crashed and I'm

00:16:55,790 --> 00:17:05,540
traveling now here's a customer who runs

00:17:02,750 --> 00:17:07,130
a single machine he does have binary

00:17:05,540 --> 00:17:09,410
logging enabled because I reviewed his

00:17:07,130 --> 00:17:10,760
system some time ago and explained the

00:17:09,410 --> 00:17:13,160
importance of why you have binary

00:17:10,760 --> 00:17:14,439
logging the person who does millions of

00:17:13,160 --> 00:17:18,159
dollars of orders in

00:17:14,439 --> 00:17:19,779
a on his system but he had a problem and

00:17:18,159 --> 00:17:21,279
he'd actually turn binary logging off

00:17:19,779 --> 00:17:22,659
because he was trying to address this

00:17:21,279 --> 00:17:25,329
problem but he's running with a single

00:17:22,659 --> 00:17:27,279
server he does backups does a static

00:17:25,329 --> 00:17:29,379
copy of the backup he makes a copy of

00:17:27,279 --> 00:17:31,779
the back up in another system so is he's

00:17:29,379 --> 00:17:36,070
going down the right path in terms of

00:17:31,779 --> 00:17:37,480
having some procedures in place what

00:17:36,070 --> 00:17:42,340
happened was he started getting these

00:17:37,480 --> 00:17:44,110
types of errors which talk about a table

00:17:42,340 --> 00:17:46,960
being crashed or multiple tables being

00:17:44,110 --> 00:17:51,149
crashed has anyone seen that problem

00:17:46,960 --> 00:17:54,429
before yes I see a few acknowledgments

00:17:51,149 --> 00:17:56,080
here is a problem when my ice am one of

00:17:54,429 --> 00:17:58,590
the internal storage engines one of the

00:17:56,080 --> 00:18:04,269
ways in which you store data in mysql

00:17:58,590 --> 00:18:07,269
what's happened is mysql has actually

00:18:04,269 --> 00:18:09,639
crashed the mysql demon processes

00:18:07,269 --> 00:18:12,429
crashed now there is what's known as an

00:18:09,639 --> 00:18:14,259
angel process called mysqld safe which

00:18:12,429 --> 00:18:18,629
will detect that my squirrel has crashed

00:18:14,259 --> 00:18:20,679
for some reason and will restart mysql

00:18:18,629 --> 00:18:22,419
now in the system that's not a high

00:18:20,679 --> 00:18:24,340
volume this can actually happen and no

00:18:22,419 --> 00:18:25,450
one never actually ever knows if you

00:18:24,340 --> 00:18:27,309
don't look at the error log you don't

00:18:25,450 --> 00:18:29,649
actually know it's happened because it

00:18:27,309 --> 00:18:30,879
may happen you know next PHP connection

00:18:29,649 --> 00:18:33,659
comes in it's a new connection it

00:18:30,879 --> 00:18:36,639
collects the database it doesn't work a

00:18:33,659 --> 00:18:39,580
result of that if you use my I Sam is

00:18:36,639 --> 00:18:42,970
you can get a situation like this where

00:18:39,580 --> 00:18:44,649
a tables market has crashed now I don't

00:18:42,970 --> 00:18:47,289
to go into much detail but the message

00:18:44,649 --> 00:18:50,950
is actually a little bit misleading that

00:18:47,289 --> 00:18:54,279
the data itself is actually intact my I

00:18:50,950 --> 00:18:56,740
am consists of a file called my ID which

00:18:54,279 --> 00:19:00,159
is a data file my eye which is an index

00:18:56,740 --> 00:19:01,929
file when you make a change the data the

00:19:00,159 --> 00:19:04,750
data is written to disk and flush the

00:19:01,929 --> 00:19:06,850
disk you make a change to the index it's

00:19:04,750 --> 00:19:09,850
written to disk but not flushed it's

00:19:06,850 --> 00:19:12,009
held in memory and on disk so if mysql

00:19:09,850 --> 00:19:14,409
shuts down abnormally what happens is

00:19:12,009 --> 00:19:17,440
the indexes are inconsistent with the

00:19:14,409 --> 00:19:19,960
data the my I Sam that the b-tree

00:19:17,440 --> 00:19:22,059
indexes or the full text indexes and so

00:19:19,960 --> 00:19:26,190
crashed actually means I have a data

00:19:22,059 --> 00:19:29,639
inconsistency between indexes and data

00:19:26,190 --> 00:19:32,370
not a problem it does happen there's a

00:19:29,639 --> 00:19:35,820
tool that allow you to check your my I

00:19:32,370 --> 00:19:37,860
am index files and see if a table is

00:19:35,820 --> 00:19:39,809
crashed or not you can run a check in

00:19:37,860 --> 00:19:43,320
this case hey there's a check tables

00:19:39,809 --> 00:19:45,029
fine not a problem okay you have to do

00:19:43,320 --> 00:19:46,980
this when the system is down those so

00:19:45,029 --> 00:19:48,059
the system did crash and come back up

00:19:46,980 --> 00:19:51,149
again you have to actually stop the

00:19:48,059 --> 00:19:53,009
system stop access to the database tell

00:19:51,149 --> 00:19:57,389
you users that is unavailable to run the

00:19:53,009 --> 00:19:58,980
check but if you run a check and there

00:19:57,389 --> 00:20:01,860
are some level of corruption in the

00:19:58,980 --> 00:20:03,750
table then Maya Scrolls going to throw

00:20:01,860 --> 00:20:06,299
an error message and mention to you that

00:20:03,750 --> 00:20:08,929
the index file i just talked about is

00:20:06,299 --> 00:20:12,480
corrupt and that you have to repair that

00:20:08,929 --> 00:20:17,940
again nothing critical because there is

00:20:12,480 --> 00:20:24,870
an ability to repair tables ooh that was

00:20:17,940 --> 00:20:29,269
a bit of a mistake I don't exactly know

00:20:24,870 --> 00:20:29,269
how that happened but we all learn

00:20:35,840 --> 00:20:42,080
I have to confess I do run linux this is

00:20:39,650 --> 00:20:43,789
the linux fest this laptop does run

00:20:42,080 --> 00:20:47,480
linux natively and i do use this in my

00:20:43,789 --> 00:20:52,159
travel machine but i do still write my

00:20:47,480 --> 00:20:54,620
flights in keynote on my back whoa hold

00:20:52,159 --> 00:20:55,940
on we've done that again sorry my

00:20:54,620 --> 00:21:01,789
mistake maybe that's something all of

00:20:55,940 --> 00:21:05,419
the button let me do things this way so

00:21:01,789 --> 00:21:07,850
as I said we can do a we have somethings

00:21:05,419 --> 00:21:09,770
crashed we can do a recover and what

00:21:07,850 --> 00:21:12,559
recovery will do will rebuild the index

00:21:09,770 --> 00:21:13,820
for us a problem here is if your tables

00:21:12,559 --> 00:21:16,159
are really large this can take a long

00:21:13,820 --> 00:21:22,909
amount of time but as you can see not a

00:21:16,159 --> 00:21:25,159
problem index recovered good stuff what

00:21:22,909 --> 00:21:27,770
happens when the tool that's used and

00:21:25,159 --> 00:21:30,169
provided by mysql to perform a recovery

00:21:27,770 --> 00:21:32,929
comes back and says i'm sorry i can't

00:21:30,169 --> 00:21:35,090
recover this then you start to get a

00:21:32,929 --> 00:21:36,950
little bit worried there are some more

00:21:35,090 --> 00:21:38,870
significant options that you can look at

00:21:36,950 --> 00:21:40,940
and if you look at the manual page it'll

00:21:38,870 --> 00:21:43,309
say well i'll be careful if you run this

00:21:40,940 --> 00:21:44,720
because you may lose data so we're in a

00:21:43,309 --> 00:21:48,169
point now where we have to you know

00:21:44,720 --> 00:21:50,360
understand what's going on but what

00:21:48,169 --> 00:21:52,309
happens if you run that recovery tool

00:21:50,360 --> 00:21:56,360
that they tell you about to recover the

00:21:52,309 --> 00:21:58,309
data and it gives you a core dump then

00:21:56,360 --> 00:22:03,440
what are you going to do your

00:21:58,309 --> 00:22:08,110
suggestions hey should've prayed before

00:22:03,440 --> 00:22:10,159
hand backup and restore good choice so

00:22:08,110 --> 00:22:12,950
we're going through this initial

00:22:10,159 --> 00:22:15,080
recovery process now when i talked

00:22:12,950 --> 00:22:17,450
earlier about backup and recovery and

00:22:15,080 --> 00:22:19,070
the steps what I didn't say is is that

00:22:17,450 --> 00:22:20,929
there's another intermediate step where

00:22:19,070 --> 00:22:24,110
you do some Diagnostics to see if you

00:22:20,929 --> 00:22:27,440
can repair or restart before you do a

00:22:24,110 --> 00:22:29,210
full recovery so in this situation we've

00:22:27,440 --> 00:22:31,640
gone through this triage where we're

00:22:29,210 --> 00:22:33,799
trying to work out can we get the system

00:22:31,640 --> 00:22:36,140
back online without have to do a full

00:22:33,799 --> 00:22:38,450
restore the system because that's a

00:22:36,140 --> 00:22:41,029
third option it's generally going to be

00:22:38,450 --> 00:22:42,919
more quickly and with this customer I

00:22:41,029 --> 00:22:44,510
was you know we'd be going through as

00:22:42,919 --> 00:22:46,610
getting these error messages and I've

00:22:44,510 --> 00:22:48,230
been saying well you know we can

00:22:46,610 --> 00:22:48,999
continue down this path to a point but

00:22:48,230 --> 00:22:50,379
then we're going to have

00:22:48,999 --> 00:22:52,839
start considering doing a full restore

00:22:50,379 --> 00:22:54,999
and so we were still discussing this and

00:22:52,839 --> 00:22:57,639
it wasn't until we get to a point like

00:22:54,999 --> 00:22:59,799
this where we've tried to do a recovery

00:22:57,639 --> 00:23:01,389
it says it's recovered then you try to

00:22:59,799 --> 00:23:03,309
access and it says it's crashed and then

00:23:01,389 --> 00:23:04,629
it won't recover that we're at a point

00:23:03,309 --> 00:23:06,909
where we were at a point of no return

00:23:04,629 --> 00:23:12,249
here we have to do a full database

00:23:06,909 --> 00:23:13,779
recovery and so as you can see we've

00:23:12,249 --> 00:23:15,399
been going through this process we would

00:23:13,779 --> 00:23:17,139
spend some time doing this we're trying

00:23:15,399 --> 00:23:18,279
to do tests we do some other there are

00:23:17,139 --> 00:23:20,859
some other tests that you can do because

00:23:18,279 --> 00:23:22,389
the may i sem files are individual flat

00:23:20,859 --> 00:23:24,789
files you'd actually create a new

00:23:22,389 --> 00:23:27,939
version of the table without any indexes

00:23:24,789 --> 00:23:30,039
and copy over the my d file run a check

00:23:27,939 --> 00:23:32,829
and then you can recreate the indexes on

00:23:30,039 --> 00:23:34,929
the table you can actually do that and

00:23:32,829 --> 00:23:37,059
we tried that and it and the first time

00:23:34,929 --> 00:23:39,249
I tried it actually worked select from

00:23:37,059 --> 00:23:42,699
table limit 10 10 rows came back

00:23:39,249 --> 00:23:45,789
excellent so then we try to like select

00:23:42,699 --> 00:23:47,859
all the data and the table crashes so

00:23:45,789 --> 00:23:50,019
we're going to these testings point in

00:23:47,859 --> 00:23:54,429
time we go okay we're done we really

00:23:50,019 --> 00:23:56,049
have to consider I was going to hope

00:23:54,429 --> 00:23:58,899
that I was just seeing if I had the

00:23:56,049 --> 00:23:59,889
information in we didn't and then we go

00:23:58,899 --> 00:24:01,089
okay well now we have to consider

00:23:59,889 --> 00:24:03,429
looking at a recovery from the database

00:24:01,089 --> 00:24:04,779
so as I mentioned the backup files are

00:24:03,429 --> 00:24:07,329
copied from one machine to another

00:24:04,779 --> 00:24:09,189
machine so I start looking at the backup

00:24:07,329 --> 00:24:12,909
files in this particular server and I

00:24:09,189 --> 00:24:15,129
try to unzip the file lo and behold I

00:24:12,909 --> 00:24:17,919
get five different error messages from

00:24:15,129 --> 00:24:20,399
gzip about files being truncated or

00:24:17,919 --> 00:24:26,649
corrupt or not uncompressing properly

00:24:20,399 --> 00:24:28,659
which is not a good thing and so the guy

00:24:26,649 --> 00:24:29,799
who runs the organization had put the

00:24:28,659 --> 00:24:31,539
files another system look at the Battle

00:24:29,799 --> 00:24:33,459
app look at the previous backup looked

00:24:31,539 --> 00:24:35,139
at the backups files from last night and

00:24:33,459 --> 00:24:39,309
was also trying to uncompress the file

00:24:35,139 --> 00:24:41,349
so getting errors unzipping the files so

00:24:39,309 --> 00:24:43,899
now he doesn't even have a backup from

00:24:41,349 --> 00:24:46,449
last night which is consistent to be

00:24:43,899 --> 00:24:48,339
able to get back from and remember i

00:24:46,449 --> 00:24:49,509
mentioned to you that the first time he

00:24:48,339 --> 00:24:52,089
discovered this problem he decided to

00:24:49,509 --> 00:24:53,709
turn binary logging off for some reason

00:24:52,089 --> 00:24:56,319
now he's not actually getting copies of

00:24:53,709 --> 00:24:59,829
the transactions now he has to go back

00:24:56,319 --> 00:25:01,630
to two nights backups ago to start doing

00:24:59,829 --> 00:25:05,020
a restore and then work out how far

00:25:01,630 --> 00:25:07,180
can move forward to recover his data so

00:25:05,020 --> 00:25:09,820
when you look at that situation you have

00:25:07,180 --> 00:25:13,390
to be prepared for a gain more than one

00:25:09,820 --> 00:25:17,860
problem now there are several faults in

00:25:13,390 --> 00:25:20,980
this strategy one was not verifying his

00:25:17,860 --> 00:25:24,310
backup even by making sure that he could

00:25:20,980 --> 00:25:27,130
uncompress the files his second fault

00:25:24,310 --> 00:25:29,680
was he didn't have a copy of his binary

00:25:27,130 --> 00:25:33,910
logs what happened if the system that

00:25:29,680 --> 00:25:36,610
did have the binary log went away now

00:25:33,910 --> 00:25:38,920
what happened was that system went away

00:25:36,610 --> 00:25:42,460
it crashed into the kernel panic died

00:25:38,920 --> 00:25:44,830
and so now he's left with the backup

00:25:42,460 --> 00:25:46,660
from two nights ago and no way to get

00:25:44,830 --> 00:25:50,320
through a whole day and a half's worth

00:25:46,660 --> 00:25:51,790
of transactions now several things had

00:25:50,320 --> 00:25:53,950
happened in the time that I've been

00:25:51,790 --> 00:25:55,660
studying within the system which led me

00:25:53,950 --> 00:25:57,910
to believe that the problem he was

00:25:55,660 --> 00:26:00,700
having was not my ask you all related

00:25:57,910 --> 00:26:02,550
but was hardware related this is

00:26:00,700 --> 00:26:04,540
difficult to prove and if any of you

00:26:02,550 --> 00:26:07,000
experienced the next people out there

00:26:04,540 --> 00:26:09,100
would understand sometimes you can see

00:26:07,000 --> 00:26:10,810
symptoms but you're not getting any

00:26:09,100 --> 00:26:13,150
messages to indicate that you're having

00:26:10,810 --> 00:26:14,410
some type of hardware problem it's not

00:26:13,150 --> 00:26:16,030
until you actually have a kernel panic

00:26:14,410 --> 00:26:17,650
where you actually see what's happening

00:26:16,030 --> 00:26:19,570
on the console that something is

00:26:17,650 --> 00:26:21,430
actually bad system messaging is not

00:26:19,570 --> 00:26:22,900
really giving you any feedback and maybe

00:26:21,430 --> 00:26:24,790
you haven't run some level of higher

00:26:22,900 --> 00:26:28,600
Diagnostics in this particular case

00:26:24,790 --> 00:26:30,280
system crashed kernel panic in a data

00:26:28,600 --> 00:26:31,660
center they have to get the ops people

00:26:30,280 --> 00:26:33,670
to come around look out I'm not too sure

00:26:31,660 --> 00:26:35,650
why they had a console but there was a

00:26:33,670 --> 00:26:36,790
console and it was a photograph because

00:26:35,650 --> 00:26:38,620
it's hard to get information of a

00:26:36,790 --> 00:26:40,630
console sometimes and there it is

00:26:38,620 --> 00:26:43,150
there's a hardware failure on the system

00:26:40,630 --> 00:26:47,830
he was very lucky because the hardware

00:26:43,150 --> 00:26:48,790
failure was memory and not disk system

00:26:47,830 --> 00:26:51,490
actually could come up without the

00:26:48,790 --> 00:26:53,050
memory you could actually run through we

00:26:51,490 --> 00:26:55,510
could do the same things I was doing

00:26:53,050 --> 00:26:57,130
before to recover the tables the tables

00:26:55,510 --> 00:27:00,610
would recover the database would come

00:26:57,130 --> 00:27:03,070
back up very lucky if it had had been a

00:27:00,610 --> 00:27:04,180
disc problem then you know his business

00:27:03,070 --> 00:27:08,320
could have suffered a catastrophic

00:27:04,180 --> 00:27:12,149
problem irrespective of the gaps so I

00:27:08,320 --> 00:27:14,620
can't say often enough and be prepared

00:27:12,149 --> 00:27:17,470
disasters can happen anywhere at any

00:27:14,620 --> 00:27:20,070
time they are going to happen when you

00:27:17,470 --> 00:27:22,149
are not ready for them to happen

00:27:20,070 --> 00:27:25,269
guaranteed they're not going to happen

00:27:22,149 --> 00:27:26,259
at midday on Monday afternoon when

00:27:25,269 --> 00:27:27,490
you've been at your desk for three hours

00:27:26,259 --> 00:27:30,159
and you've checked everything and

00:27:27,490 --> 00:27:32,919
everything is fine one problem will

00:27:30,159 --> 00:27:36,700
generally lead to a cascading series of

00:27:32,919 --> 00:27:39,879
problems in this particular case was a

00:27:36,700 --> 00:27:43,539
single server high availability does not

00:27:39,879 --> 00:27:45,220
start with one machine okay even if you

00:27:43,539 --> 00:27:47,350
just want to have copies of your data

00:27:45,220 --> 00:27:48,759
that requires at least two machines even

00:27:47,350 --> 00:27:50,919
if you don't want to have to operational

00:27:48,759 --> 00:27:54,460
systems and you should always have a

00:27:50,919 --> 00:27:56,289
contingency play in a place in this case

00:27:54,460 --> 00:27:57,369
the individual was lucky it was a good

00:27:56,289 --> 00:27:59,970
customer I've worked with it before

00:27:57,369 --> 00:28:02,559
several times i happened to be home

00:27:59,970 --> 00:28:06,220
happy reading my emails haven't be able

00:28:02,559 --> 00:28:08,409
to share a few hours of helping him it

00:28:06,220 --> 00:28:11,019
was with a sense of irony that the most

00:28:08,409 --> 00:28:12,879
recent book that I've written which is

00:28:11,019 --> 00:28:14,110
actually in print right now as I was

00:28:12,879 --> 00:28:16,419
hoping it was available for this

00:28:14,110 --> 00:28:19,059
conference but it's a few weeks away is

00:28:16,419 --> 00:28:22,629
actually called backup and recovery how

00:28:19,059 --> 00:28:24,700
apropos and that this situation was so

00:28:22,629 --> 00:28:27,070
unique that it actually made it into the

00:28:24,700 --> 00:28:29,559
book because I was actually had it was

00:28:27,070 --> 00:28:33,730
doing proof change to the book and I had

00:28:29,559 --> 00:28:35,440
to squeeze this in so there are many

00:28:33,730 --> 00:28:37,389
other examples and actually in the book

00:28:35,440 --> 00:28:40,600
I go through a lot of examples I've only

00:28:37,389 --> 00:28:41,710
touched on two of them if you don't have

00:28:40,600 --> 00:28:43,090
bio logging turned on if you have a

00:28:41,710 --> 00:28:44,590
single servo if you don't have

00:28:43,090 --> 00:28:46,480
appropriate mysql security and

00:28:44,590 --> 00:28:48,129
application users can delete data or

00:28:46,480 --> 00:28:50,259
change configuration or turn off the

00:28:48,129 --> 00:28:52,119
binary logs what happens if you actually

00:28:50,259 --> 00:28:55,059
delete data what happens if something

00:28:52,119 --> 00:28:58,389
goes delete from table you know there's

00:28:55,059 --> 00:29:02,019
ways to recover that even on a single

00:28:58,389 --> 00:29:07,809
server but if you shut down the database

00:29:02,019 --> 00:29:09,220
then you've lost it or maybe you have to

00:29:07,809 --> 00:29:12,039
shut down the database to recover it

00:29:09,220 --> 00:29:14,139
depends same with actions leading a

00:29:12,039 --> 00:29:15,820
mysql i need to be data file you can

00:29:14,139 --> 00:29:18,610
actually physically delete the file is

00:29:15,820 --> 00:29:20,350
no longer there but if you actually are

00:29:18,610 --> 00:29:22,899
aware of it you could actually dumped

00:29:20,350 --> 00:29:24,269
the data on the running server but once

00:29:22,899 --> 00:29:26,700
you shut the server down the file

00:29:24,269 --> 00:29:29,129
gone the inode is cleared up and your

00:29:26,700 --> 00:29:32,039
your history what happens we delete

00:29:29,129 --> 00:29:34,709
binary logs another interesting problem

00:29:32,039 --> 00:29:36,059
is people do upgrades they've tested the

00:29:34,709 --> 00:29:37,859
backup script they've tested the

00:29:36,059 --> 00:29:39,419
recovery script then they've upgraded

00:29:37,859 --> 00:29:40,830
the software but they forgot to retest

00:29:39,419 --> 00:29:41,729
the backup script again and now it's

00:29:40,830 --> 00:29:43,499
actually throwing an error message

00:29:41,729 --> 00:29:46,109
because they change the version of

00:29:43,499 --> 00:29:50,940
software a common problem between mysql

00:29:46,109 --> 00:29:54,690
5.1 and 5.5 using mysql dump i have

00:29:50,940 --> 00:29:57,509
warned you corruption cases where the

00:29:54,690 --> 00:29:59,099
schemer may differ most world has copies

00:29:57,509 --> 00:30:01,440
of data and metadata and particularly

00:29:59,099 --> 00:30:07,619
with ona tebe inconsistencies between

00:30:01,440 --> 00:30:09,570
those things I know DB in mysql has a

00:30:07,619 --> 00:30:11,399
thing called automatic crash recovery so

00:30:09,570 --> 00:30:13,169
if Michael does crash it will come back

00:30:11,399 --> 00:30:15,539
up and we'll go through a recovery

00:30:13,169 --> 00:30:18,209
process the example I showed you before

00:30:15,539 --> 00:30:20,669
is with my i Sam that's a manual

00:30:18,209 --> 00:30:22,349
recovery process what happens if the

00:30:20,669 --> 00:30:26,329
automatic crash recovery process doesn't

00:30:22,349 --> 00:30:28,709
work or was actually interesting was

00:30:26,329 --> 00:30:29,729
there are several ways to do backup and

00:30:28,709 --> 00:30:32,429
recovery and I'm going to cut discuss

00:30:29,729 --> 00:30:35,849
those in a second but you have to work

00:30:32,429 --> 00:30:38,309
out whether to do a restore MySQL has to

00:30:35,849 --> 00:30:40,200
be running or not running some require

00:30:38,309 --> 00:30:44,579
it to be running some require it not to

00:30:40,200 --> 00:30:46,379
be running but in some cases you can use

00:30:44,579 --> 00:30:48,719
my exploded price back up or extra DP

00:30:46,379 --> 00:30:49,769
and do a restore it doesn't check to

00:30:48,719 --> 00:30:51,269
make sure it's not running and actually

00:30:49,769 --> 00:30:52,679
restore the data into running database

00:30:51,269 --> 00:30:55,799
but actually corrupted eight or even

00:30:52,679 --> 00:31:00,239
worse so there are all these cases so

00:30:55,799 --> 00:31:02,309
what are your actual tools for backup

00:31:00,239 --> 00:31:04,559
and recovery to do a backup these are

00:31:02,309 --> 00:31:06,809
the options that you have you can use

00:31:04,559 --> 00:31:10,739
MySQL dump it's an included command it

00:31:06,809 --> 00:31:13,589
comes with mysql command line client can

00:31:10,739 --> 00:31:15,749
run remotely I can run under working on

00:31:13,589 --> 00:31:18,059
a running database or has to run on the

00:31:15,749 --> 00:31:20,759
running database has locking issues

00:31:18,059 --> 00:31:23,190
depending on how you use it and how your

00:31:20,759 --> 00:31:26,429
data is stored so their implications

00:31:23,190 --> 00:31:29,429
there to consider you can do a file copy

00:31:26,429 --> 00:31:31,440
of your data you can do that while the

00:31:29,429 --> 00:31:34,019
database is running well the world a

00:31:31,440 --> 00:31:36,450
database is not running you do it while

00:31:34,019 --> 00:31:37,200
it's running you are not going to get a

00:31:36,450 --> 00:31:40,549
consist

00:31:37,200 --> 00:31:44,039
back up before I talked about static

00:31:40,549 --> 00:31:45,720
consistent back up a file copy of a

00:31:44,039 --> 00:31:50,130
running database will not be consistent

00:31:45,720 --> 00:31:51,360
because files are copied sequentially if

00:31:50,130 --> 00:31:53,010
you shut it down then you're going to

00:31:51,360 --> 00:31:56,250
get a consistent version but you have to

00:31:53,010 --> 00:31:57,659
make sure you copy the right files my

00:31:56,250 --> 00:31:58,980
doctor is pretty good because you can

00:31:57,659 --> 00:32:00,480
sort of move it between different

00:31:58,980 --> 00:32:03,990
systems different operating systems

00:32:00,480 --> 00:32:05,039
different versions file copy is a little

00:32:03,990 --> 00:32:06,179
bit more specific you've got to make

00:32:05,039 --> 00:32:09,630
sure you restore it into the same

00:32:06,179 --> 00:32:11,399
configuration now at an operating system

00:32:09,630 --> 00:32:14,370
level you can use snap showing

00:32:11,399 --> 00:32:16,049
technology you know lvm or if you have

00:32:14,370 --> 00:32:18,179
some sort of seen on network storage

00:32:16,049 --> 00:32:19,919
device you can some level of files are

00:32:18,179 --> 00:32:22,470
snapshots you know maybe if you're

00:32:19,919 --> 00:32:24,240
running ZFS or something like that or

00:32:22,470 --> 00:32:26,820
butter FS I'm sure there's a few others

00:32:24,240 --> 00:32:27,750
that are snapshot friendly but you need

00:32:26,820 --> 00:32:30,269
to make sure you've configured your

00:32:27,750 --> 00:32:31,559
system to do that and particularly ever

00:32:30,269 --> 00:32:35,250
set up lvm then you can't actually

00:32:31,559 --> 00:32:37,440
implement that from a from a tools

00:32:35,250 --> 00:32:39,690
perspective extra backup is a product

00:32:37,440 --> 00:32:42,570
from pakona there's one patron a person

00:32:39,690 --> 00:32:46,260
in the audience Peter and Baron were

00:32:42,570 --> 00:32:48,330
here before and that can actually

00:32:46,260 --> 00:32:50,070
perform a hot running back up on an I

00:32:48,330 --> 00:32:52,860
know DB system and can actually also

00:32:50,070 --> 00:32:55,409
backup tables in a blocking nature for

00:32:52,860 --> 00:32:57,779
other tables in Europe instance as well

00:32:55,409 --> 00:33:01,799
my dumper is an open source product

00:32:57,779 --> 00:33:04,440
which is like my SQL dump but supports

00:33:01,799 --> 00:33:06,059
parallel ISM my SQL dump is a single

00:33:04,440 --> 00:33:09,450
thread is called ambra can support

00:33:06,059 --> 00:33:11,429
multiple threads but has the limitations

00:33:09,450 --> 00:33:14,429
similar to my SQL dump in terms of

00:33:11,429 --> 00:33:16,919
locking not locking cetera and from the

00:33:14,429 --> 00:33:18,929
commercial side mysql enterprise backup

00:33:16,919 --> 00:33:22,500
he made listen to some of the talks this

00:33:18,929 --> 00:33:27,990
morning is the former i nodi be hot

00:33:22,500 --> 00:33:29,309
backup tool i'm not going to go through

00:33:27,990 --> 00:33:32,549
these options the purpose of this

00:33:29,309 --> 00:33:35,250
presentation is really to show you what

00:33:32,549 --> 00:33:37,019
you need to know about backups there is

00:33:35,250 --> 00:33:39,389
actually an entire presentation that

00:33:37,019 --> 00:33:41,610
I've given which talks about each one of

00:33:39,389 --> 00:33:43,500
these particular points individually

00:33:41,610 --> 00:33:45,480
goes through the pros and the cons and

00:33:43,500 --> 00:33:47,100
examples and I would encourage you to

00:33:45,480 --> 00:33:49,980
check that out on the

00:33:47,100 --> 00:33:53,850
effect of MySQL website the short link

00:33:49,980 --> 00:33:58,110
is available there I do however want to

00:33:53,850 --> 00:33:59,549
talk about a couple of things one is you

00:33:58,110 --> 00:34:01,890
have a backup and recovery strategy in

00:33:59,549 --> 00:34:03,419
place and I want to focus on point in

00:34:01,890 --> 00:34:06,330
time recovery and replication in a

00:34:03,419 --> 00:34:09,570
moment but before I do there are many

00:34:06,330 --> 00:34:11,490
things that can improve your process and

00:34:09,570 --> 00:34:13,169
I haven't talked about these but you

00:34:11,490 --> 00:34:15,270
have to consider even though you go

00:34:13,169 --> 00:34:18,119
through those options I talked about in

00:34:15,270 --> 00:34:21,960
the previous page which support

00:34:18,119 --> 00:34:24,389
compression what can run remotely what

00:34:21,960 --> 00:34:27,179
para los options exist can you

00:34:24,389 --> 00:34:29,159
incrementally do backups all of these

00:34:27,179 --> 00:34:31,710
things can affect the strategy have in

00:34:29,159 --> 00:34:34,820
place and more importantly the recovery

00:34:31,710 --> 00:34:38,190
process and the recovery time because

00:34:34,820 --> 00:34:40,440
what normally happens is the actual time

00:34:38,190 --> 00:34:43,230
to recovery is the most important step

00:34:40,440 --> 00:34:45,629
and the most step people don't time and

00:34:43,230 --> 00:34:47,429
the only thing that management and the

00:34:45,629 --> 00:34:49,190
business wants to know is how long and

00:34:47,429 --> 00:34:52,580
if you don't know that answer then

00:34:49,190 --> 00:34:54,899
you're forever going to be hounded I

00:34:52,580 --> 00:34:57,420
just want to point out one thing from my

00:34:54,899 --> 00:35:00,740
benchmarking of various types of

00:34:57,420 --> 00:35:03,180
compression and decompression objects

00:35:00,740 --> 00:35:05,970
you know gzip is the default for most

00:35:03,180 --> 00:35:09,540
examples there is a parallel version of

00:35:05,970 --> 00:35:11,820
gzip called Pig Z which does the same

00:35:09,540 --> 00:35:14,760
thing as gzip but runs in parallel and

00:35:11,820 --> 00:35:16,800
can be three or four times faster that

00:35:14,760 --> 00:35:18,960
one change alone can make a big

00:35:16,800 --> 00:35:21,450
difference in a strategy some of the

00:35:18,960 --> 00:35:24,119
other options can take ten times longer

00:35:21,450 --> 00:35:27,330
and give you like five or ten percent

00:35:24,119 --> 00:35:30,810
improvement and ironically we were just

00:35:27,330 --> 00:35:32,820
talking about lzma recently with another

00:35:30,810 --> 00:35:36,630
product and the time it actually takes

00:35:32,820 --> 00:35:39,210
on larger files and I didn't consider it

00:35:36,630 --> 00:35:41,609
but we're backing up here effectively

00:35:39,210 --> 00:35:43,530
one large file and maybe some

00:35:41,609 --> 00:35:45,500
compression tools will work more

00:35:43,530 --> 00:35:47,910
efficiently with a lot of smaller files

00:35:45,500 --> 00:35:49,440
the type of data that you're backing up

00:35:47,910 --> 00:35:51,960
whether it's integers or strings or

00:35:49,440 --> 00:35:53,190
blobs will also affect this is actually

00:35:51,960 --> 00:35:56,490
just one example in the book which is

00:35:53,190 --> 00:35:57,839
about a it's a 2.9 it's a 5 gigabyte

00:35:56,490 --> 00:35:59,730
database it sort of comes down to about

00:35:57,839 --> 00:36:01,560
2.9 gig as a MySQL

00:35:59,730 --> 00:36:04,650
file and this is the compression of that

00:36:01,560 --> 00:36:05,760
dump file so again testing is important

00:36:04,650 --> 00:36:09,630
to work out what works and what doesn't

00:36:05,760 --> 00:36:12,000
work people think about backup and

00:36:09,630 --> 00:36:13,650
recovery they don't think about the

00:36:12,000 --> 00:36:15,740
individual components and point in time

00:36:13,650 --> 00:36:18,960
is the most important thing to work with

00:36:15,740 --> 00:36:22,020
point in time tells you that you can

00:36:18,960 --> 00:36:23,700
recover the data to either the most

00:36:22,020 --> 00:36:26,430
recent amount of transactions that you

00:36:23,700 --> 00:36:28,470
have available or to a certain time for

00:36:26,430 --> 00:36:30,510
example the minute or two before someone

00:36:28,470 --> 00:36:33,109
deleted all your data or someone hacked

00:36:30,510 --> 00:36:35,970
your system or something and so forth if

00:36:33,109 --> 00:36:39,150
you care about your data you have to

00:36:35,970 --> 00:36:40,680
enable binary logging this enables point

00:36:39,150 --> 00:36:43,230
and time recovery and enables

00:36:40,680 --> 00:36:44,790
replication I know customers who run

00:36:43,230 --> 00:36:47,190
production systems and do not have

00:36:44,790 --> 00:36:48,750
binary logging turned on even if you

00:36:47,190 --> 00:36:50,820
don't back them up if you don't have it

00:36:48,750 --> 00:36:53,160
turned on that tells me you don't care

00:36:50,820 --> 00:36:55,740
about your data you don't care if you

00:36:53,160 --> 00:36:58,020
lose a day's worth of data maybe you

00:36:55,740 --> 00:37:00,300
don't care but if you do you should have

00:36:58,020 --> 00:37:03,680
binary logging turned on you need to

00:37:00,300 --> 00:37:06,780
have just one option log been defined

00:37:03,680 --> 00:37:09,090
expire logs days isn't one also good to

00:37:06,780 --> 00:37:11,220
define because that gives you a default

00:37:09,090 --> 00:37:13,740
setting where older files will

00:37:11,220 --> 00:37:15,330
automatically be deleted because if you

00:37:13,740 --> 00:37:17,190
don't have binary logging turned on I'm

00:37:15,330 --> 00:37:19,230
pretty sure you don't have system

00:37:17,190 --> 00:37:20,869
monitoring turned on so you won't know

00:37:19,230 --> 00:37:23,490
what to do when your disk fills up the

00:37:20,869 --> 00:37:26,280
show by no drugs command shows you what

00:37:23,490 --> 00:37:29,580
files exist and you can compare those

00:37:26,280 --> 00:37:32,040
file names and file sizes with actual

00:37:29,580 --> 00:37:34,440
files on the file system I don't think

00:37:32,040 --> 00:37:38,010
those two actually line up I should fix

00:37:34,440 --> 00:37:39,480
that the file size and the position of

00:37:38,010 --> 00:37:42,150
the binary log matches the size of the

00:37:39,480 --> 00:37:43,950
file now if you want to back these up

00:37:42,150 --> 00:37:47,910
there are several easy options these are

00:37:43,950 --> 00:37:50,640
right once incrementing files so a copy

00:37:47,910 --> 00:37:52,950
and sync can really help you in keeping

00:37:50,640 --> 00:37:56,400
consistent versions of these files if

00:37:52,950 --> 00:37:58,800
you run a martyr and a slave you can

00:37:56,400 --> 00:38:00,690
actually turn on what's known as log

00:37:58,800 --> 00:38:03,090
slave updates on the slave and that will

00:38:00,690 --> 00:38:06,560
give you a version of the Maya squirrel

00:38:03,090 --> 00:38:08,580
binary log files not exactly the same

00:38:06,560 --> 00:38:10,190
because the positions can be different

00:38:08,580 --> 00:38:11,859
but at least it's going to give you a

00:38:10,190 --> 00:38:13,599
reproducible version

00:38:11,859 --> 00:38:18,339
data to replay if you're using that

00:38:13,599 --> 00:38:21,190
slave for recovery drbd or dis

00:38:18,339 --> 00:38:25,029
replicated block device is asynchronous

00:38:21,190 --> 00:38:27,220
block level writing of data and some

00:38:25,029 --> 00:38:29,289
people use this for mysql however it

00:38:27,220 --> 00:38:30,880
really isn't practical for a high

00:38:29,289 --> 00:38:33,700
availability solution because it's a

00:38:30,880 --> 00:38:36,160
passive system you can't use it and it

00:38:33,700 --> 00:38:39,009
does have a certain amount of a restore

00:38:36,160 --> 00:38:42,369
time and a failover situation however it

00:38:39,009 --> 00:38:45,759
is ideal for creating binary mirrored

00:38:42,369 --> 00:38:48,059
binary logs you get them for free by

00:38:45,759 --> 00:38:51,069
using the rbd you have a copy of those

00:38:48,059 --> 00:38:52,359
files on another system so even though

00:38:51,069 --> 00:38:53,619
the system that you may be using you

00:38:52,359 --> 00:38:56,950
could actually use a separate disk and

00:38:53,619 --> 00:38:58,539
have a copy of them and new in mysql 5.6

00:38:56,950 --> 00:39:02,109
you can actually read the binary log

00:38:58,539 --> 00:39:03,249
files remotely from the mysql binlog

00:39:02,109 --> 00:39:04,720
which is the command that reads the

00:39:03,249 --> 00:39:06,999
binary logs and you can actually stream

00:39:04,720 --> 00:39:08,109
them so you can actually read them from

00:39:06,999 --> 00:39:10,900
the remote server and run them

00:39:08,109 --> 00:39:15,700
continuously to get a copy so these are

00:39:10,900 --> 00:39:17,349
other ways to get those files now in the

00:39:15,700 --> 00:39:19,450
static backup I talked you have to do a

00:39:17,349 --> 00:39:22,630
static backup and you have to copy the

00:39:19,450 --> 00:39:24,190
binary log files this little caveat to

00:39:22,630 --> 00:39:27,190
that is like when you do the static

00:39:24,190 --> 00:39:29,859
backup you need to know at what time you

00:39:27,190 --> 00:39:32,680
did that and what position it was with

00:39:29,859 --> 00:39:35,380
the binary logs if you don't record that

00:39:32,680 --> 00:39:36,789
status then you can't actually restore

00:39:35,380 --> 00:39:41,589
successful because there are no where to

00:39:36,789 --> 00:39:44,170
start so an important note here is is

00:39:41,589 --> 00:39:47,170
that if you have a master and if you

00:39:44,170 --> 00:39:50,529
have a slave and you do a show master

00:39:47,170 --> 00:39:53,289
status on the slave and you're doing a

00:39:50,529 --> 00:39:55,359
backup on the slave sorry you do a show

00:39:53,289 --> 00:39:57,279
must set us on this leg you may get a

00:39:55,359 --> 00:39:58,930
binary log position but it's not the

00:39:57,279 --> 00:40:02,440
binary log position of the master

00:39:58,930 --> 00:40:03,700
because a slave can also be a master so

00:40:02,440 --> 00:40:04,989
you have to be very careful that when

00:40:03,700 --> 00:40:06,910
you run that command you run it on the

00:40:04,989 --> 00:40:11,019
right server and it's a problem that

00:40:06,910 --> 00:40:13,380
I've seen with customers the tools i

00:40:11,019 --> 00:40:16,720
talked about mysql damp extra backup

00:40:13,380 --> 00:40:18,759
enterprise manager enterprise backup my

00:40:16,720 --> 00:40:20,440
dumper they basically all keep it

00:40:18,759 --> 00:40:22,509
information for you in various types of

00:40:20,440 --> 00:40:23,290
files so if you're using one of those

00:40:22,509 --> 00:40:25,450
commands

00:40:23,290 --> 00:40:28,120
or in the case of my school dump using

00:40:25,450 --> 00:40:30,790
the master data or on a slave using

00:40:28,120 --> 00:40:33,070
slave data you're actually going to get

00:40:30,790 --> 00:40:36,850
the right position to work with so just

00:40:33,070 --> 00:40:39,670
be aware of capturing that to restore

00:40:36,850 --> 00:40:42,310
that the MySQL binlog command is the way

00:40:39,670 --> 00:40:44,020
to replay binary logs and you can say i

00:40:42,310 --> 00:40:46,030
want to start from a certain file in a

00:40:44,020 --> 00:40:48,220
certain position and i can replay those

00:40:46,030 --> 00:40:50,980
and then i can reply all following files

00:40:48,220 --> 00:40:53,830
a tip that some people do is when they

00:40:50,980 --> 00:40:55,420
do a backup they do a flush logs so

00:40:53,830 --> 00:40:57,490
therefore actually flushes the log so it

00:40:55,420 --> 00:40:58,540
moves it to the next file if you don't

00:40:57,490 --> 00:40:59,890
really need to have to keep the

00:40:58,540 --> 00:41:02,950
positions that they keep the file you

00:40:59,890 --> 00:41:05,230
want to start on another way to recover

00:41:02,950 --> 00:41:07,750
if you're recovering a slave is let

00:41:05,230 --> 00:41:09,340
replication do it because as long as you

00:41:07,750 --> 00:41:11,620
have the position of where it is in the

00:41:09,340 --> 00:41:13,210
mass that it belongs to and the binary

00:41:11,620 --> 00:41:14,470
logs will exist in the machine and you

00:41:13,210 --> 00:41:16,990
start that slave it'll just catch up

00:41:14,470 --> 00:41:18,960
automatically by effectively doing what

00:41:16,990 --> 00:41:21,370
you're doing manually with MySQL binlog

00:41:18,960 --> 00:41:23,320
so there are two ways in which you could

00:41:21,370 --> 00:41:28,000
actually get them back from the binary

00:41:23,320 --> 00:41:31,240
logs now I want to conclude in this

00:41:28,000 --> 00:41:34,300
discussion about working with MySQL the

00:41:31,240 --> 00:41:35,470
importance of mysql replication if you

00:41:34,300 --> 00:41:37,390
have a production system and you have

00:41:35,470 --> 00:41:40,060
one server you are not running in a

00:41:37,390 --> 00:41:41,710
highly available environment and if you

00:41:40,060 --> 00:41:43,210
can accept the downtime when the server

00:41:41,710 --> 00:41:45,340
is not available to restore the database

00:41:43,210 --> 00:41:47,500
and that's great but what happens if the

00:41:45,340 --> 00:41:49,180
hardware fails how long does it take to

00:41:47,500 --> 00:41:51,720
replace the hardware even though you

00:41:49,180 --> 00:41:54,100
might have the data somewhere else

00:41:51,720 --> 00:41:55,780
replication is practical for many

00:41:54,100 --> 00:41:59,140
different options in terms of

00:41:55,780 --> 00:42:00,820
scalability testing fail over there are

00:41:59,140 --> 00:42:03,010
lots of ways in which you can use it you

00:42:00,820 --> 00:42:04,960
can use in your backup strategy but I

00:42:03,010 --> 00:42:08,890
want to highlight the replication is not

00:42:04,960 --> 00:42:11,620
a backup strategy by itself okay it's

00:42:08,890 --> 00:42:14,020
just moving you one step away from a

00:42:11,620 --> 00:42:15,760
single point of failure it's important

00:42:14,020 --> 00:42:17,920
that you use it in a total strategy may

00:42:15,760 --> 00:42:22,510
have a slave but then you have a

00:42:17,920 --> 00:42:23,530
failover process in place so this is

00:42:22,510 --> 00:42:24,790
something to consider when you start

00:42:23,530 --> 00:42:28,420
moving towards more highly available

00:42:24,790 --> 00:42:29,890
systems how do I support okay this

00:42:28,420 --> 00:42:33,090
hardware goes away or the static

00:42:29,890 --> 00:42:35,530
crashing happens what is the recovery

00:42:33,090 --> 00:42:37,420
data objective

00:42:35,530 --> 00:42:40,030
I do and the recovery point objective

00:42:37,420 --> 00:42:43,030
the time it takes for your business to

00:42:40,030 --> 00:42:47,410
make a restore process these things are

00:42:43,030 --> 00:42:49,600
important some of the problems with

00:42:47,410 --> 00:42:52,990
replication is is that there are many

00:42:49,600 --> 00:42:55,360
ways for you to assume slave is

00:42:52,990 --> 00:42:59,050
consistent with the master and then many

00:42:55,360 --> 00:43:02,320
ways for it to be not consistent here is

00:42:59,050 --> 00:43:04,930
just a list of a few of those by default

00:43:02,320 --> 00:43:06,940
with asynchronous nature there's no

00:43:04,930 --> 00:43:10,240
guarantee that the slave is actually the

00:43:06,940 --> 00:43:12,400
same as the master if you get an error

00:43:10,240 --> 00:43:14,110
and you skip over things if you actually

00:43:12,400 --> 00:43:16,810
have defined particular error messages

00:43:14,110 --> 00:43:18,400
that you want to ignore on the slave if

00:43:16,810 --> 00:43:20,350
someone is connected to the slave as a

00:43:18,400 --> 00:43:22,210
super privilege by accident the

00:43:20,350 --> 00:43:24,940
application and deleted or change data

00:43:22,210 --> 00:43:26,620
there now inconsistent you can change

00:43:24,940 --> 00:43:28,480
the structure on a slave and providing

00:43:26,620 --> 00:43:30,910
SQL statement executes it's actually

00:43:28,480 --> 00:43:33,790
valid you can actually tell the binary

00:43:30,910 --> 00:43:36,400
logging to ignore certain tables or data

00:43:33,790 --> 00:43:38,050
on the master and on the replication

00:43:36,400 --> 00:43:40,390
save you can say ignore data that's

00:43:38,050 --> 00:43:42,190
coming in and out so all of these things

00:43:40,390 --> 00:43:44,320
can mean that your slave is not the same

00:43:42,190 --> 00:43:47,200
as your master and if you back up your

00:43:44,320 --> 00:43:49,150
slave in the assumption that it is the

00:43:47,200 --> 00:43:51,040
same as the master then you may come to

00:43:49,150 --> 00:43:52,950
be surprised when you do a restoration

00:43:51,040 --> 00:43:55,450
and you find something has changed

00:43:52,950 --> 00:43:57,370
particularly over time things change

00:43:55,450 --> 00:43:58,900
people may have introduced settings and

00:43:57,370 --> 00:44:01,300
not considered the ramifications of

00:43:58,900 --> 00:44:07,030
their backup strategy they can all

00:44:01,300 --> 00:44:10,180
affect replication now there are some

00:44:07,030 --> 00:44:12,550
advantages in using different tools and

00:44:10,180 --> 00:44:14,980
right now I'm actually looking at glare

00:44:12,550 --> 00:44:17,830
this week which is asynchronous backup

00:44:14,980 --> 00:44:21,070
solution tungsten replicator is another

00:44:17,830 --> 00:44:23,070
one of those that provide extra benefits

00:44:21,070 --> 00:44:26,500
to some of those things i mentioned

00:44:23,070 --> 00:44:28,930
mysql 5.6 is doing a lot of work in

00:44:26,500 --> 00:44:31,270
making it a lot better replication

00:44:28,930 --> 00:44:33,700
supporting crash safe slaves for example

00:44:31,270 --> 00:44:35,830
by storing the position in the database

00:44:33,700 --> 00:44:37,480
within a transaction rather than on the

00:44:35,830 --> 00:44:40,440
file system and a lot of other things

00:44:37,480 --> 00:44:43,300
here in terms of global transaction ids

00:44:40,440 --> 00:44:44,090
replication checksums the remote binary

00:44:43,300 --> 00:44:46,880
log back up to

00:44:44,090 --> 00:44:48,350
about before and even now there are some

00:44:46,880 --> 00:44:50,690
failover utilities that come out of

00:44:48,350 --> 00:44:53,840
MySQL workbench they can allow you to

00:44:50,690 --> 00:44:55,610
failover in mysql now natively without

00:44:53,840 --> 00:44:59,750
for example using some other third-party

00:44:55,610 --> 00:45:03,770
product so if you have not upgraded to

00:44:59,750 --> 00:45:07,100
5.5 I recommend strongly that you do

00:45:03,770 --> 00:45:09,800
that if you're running on a 5.0 and 5.1

00:45:07,100 --> 00:45:12,170
you should really get to 5.5 because 5.5

00:45:09,800 --> 00:45:14,770
is the platform moving forward all the

00:45:12,170 --> 00:45:17,930
great work that's being done on 5.6 is

00:45:14,770 --> 00:45:21,200
extending the base of 5.5 is a big jump

00:45:17,930 --> 00:45:23,870
from 5.1 to 5.5 internally in terms of

00:45:21,200 --> 00:45:25,070
features and performance so you should

00:45:23,870 --> 00:45:28,190
be getting there so that you can in

00:45:25,070 --> 00:45:29,840
consider using 5.6 another thing is if

00:45:28,190 --> 00:45:31,760
you use replication what people don't

00:45:29,840 --> 00:45:34,610
realize is you could for example be

00:45:31,760 --> 00:45:37,400
running mysql 5.5 on a master and you

00:45:34,610 --> 00:45:38,570
can run 5.6 on the slave so you could

00:45:37,400 --> 00:45:40,670
take advantage of for example that

00:45:38,570 --> 00:45:42,890
remote binary log backup option which

00:45:40,670 --> 00:45:45,740
was only recently released I was running

00:45:42,890 --> 00:45:47,720
a 5.1 test server i just installed 5.6

00:45:45,740 --> 00:45:50,450
on my slave and could leverage that

00:45:47,720 --> 00:45:53,090
particular tool because slaves can be a

00:45:50,450 --> 00:45:55,640
head inversion its forward compatible to

00:45:53,090 --> 00:45:57,260
the master so sometimes maybe you can

00:45:55,640 --> 00:46:00,770
get some benefits like that if you have

00:45:57,260 --> 00:46:04,910
master slave environment so to wrap up

00:46:00,770 --> 00:46:10,220
here leave you with a very memorable

00:46:04,910 --> 00:46:11,960
quote San is not a backup solution Josh

00:46:10,220 --> 00:46:13,400
burkas I'm sure several post cuz people

00:46:11,960 --> 00:46:14,870
they would understand right a very good

00:46:13,400 --> 00:46:19,640
article recently and that there are many

00:46:14,870 --> 00:46:22,190
other references if you assume that

00:46:19,640 --> 00:46:24,110
you're fine with the same it's the

00:46:22,190 --> 00:46:27,250
bigger you are the harder you will fall

00:46:24,110 --> 00:46:29,350
I have seen it in reality with a

00:46:27,250 --> 00:46:31,640
organization running a hundred servers

00:46:29,350 --> 00:46:38,570
does not work very well when they're

00:46:31,640 --> 00:46:42,650
sand crashes a common problem is is that

00:46:38,570 --> 00:46:44,420
human error leads to issues and doesn't

00:46:42,650 --> 00:46:47,810
matter what sort of redundancy you have

00:46:44,420 --> 00:46:49,610
in place for software for a hardware is

00:46:47,810 --> 00:46:51,020
that a human will cause a problem

00:46:49,610 --> 00:46:54,350
whether intentionally or unintentionally

00:46:51,020 --> 00:46:57,210
and quite often if you actually analyze

00:46:54,350 --> 00:46:59,430
the issues of intentional

00:46:57,210 --> 00:47:02,100
problems with data it's usually internal

00:46:59,430 --> 00:47:03,540
more regularly than external so it's

00:47:02,100 --> 00:47:07,230
important that you understand those

00:47:03,540 --> 00:47:09,990
situations this actually comes from

00:47:07,230 --> 00:47:12,360
return of white paper which discussed

00:47:09,990 --> 00:47:15,090
from their support calls what they

00:47:12,360 --> 00:47:17,790
actually did to analyze things and what

00:47:15,090 --> 00:47:20,070
they basically came up with was there

00:47:17,790 --> 00:47:23,070
were lots of problems that occurred that

00:47:20,070 --> 00:47:24,750
could have been easily avoided before

00:47:23,070 --> 00:47:28,290
they occurred if they'd gone through a

00:47:24,750 --> 00:47:30,300
simple process of having an appropriate

00:47:28,290 --> 00:47:32,430
strategy and testing that appropriate

00:47:30,300 --> 00:47:36,210
strategy and knowing different types of

00:47:32,430 --> 00:47:37,920
situations that are common I find many

00:47:36,210 --> 00:47:40,170
situations that are common problems that

00:47:37,920 --> 00:47:44,160
if only you you know follow the basic

00:47:40,170 --> 00:47:46,830
rules of you know not DB 101 but you

00:47:44,160 --> 00:47:52,430
know DB 102 in terms of securing your

00:47:46,830 --> 00:47:52,430
mysql data for business continuity I

00:47:53,840 --> 00:47:58,650
touched very briefly on the advanced

00:47:56,250 --> 00:47:59,940
features and the other presentation that

00:47:58,650 --> 00:48:01,530
I go through when I go through each

00:47:59,940 --> 00:48:03,690
particular case and I show you the pros

00:48:01,530 --> 00:48:05,190
and cons of examples I still don't go in

00:48:03,690 --> 00:48:08,250
the advanced features so you have to

00:48:05,190 --> 00:48:10,260
understand the benefits of each one the

00:48:08,250 --> 00:48:14,130
time it takes the locking strategy it

00:48:10,260 --> 00:48:15,480
might have how you can recover it the

00:48:14,130 --> 00:48:16,950
advanced features become more and more

00:48:15,480 --> 00:48:20,780
important when you have to back up more

00:48:16,950 --> 00:48:24,090
data how long's are going to take etc I

00:48:20,780 --> 00:48:26,460
can't give you the one unbreakable

00:48:24,090 --> 00:48:29,520
backup solution for MySQL because there

00:48:26,460 --> 00:48:31,620
is not one there are different options

00:48:29,520 --> 00:48:34,380
and those options depend on various

00:48:31,620 --> 00:48:35,580
factors the size of your database how

00:48:34,380 --> 00:48:38,010
many service do you have in the system

00:48:35,580 --> 00:48:42,080
storage engines that you're using these

00:48:38,010 --> 00:48:43,770
all change the choices that you have

00:48:42,080 --> 00:48:45,180
replication is important if you're not

00:48:43,770 --> 00:48:48,510
using replication I strongly recommend

00:48:45,180 --> 00:48:52,170
that you consider the cost of having

00:48:48,510 --> 00:48:55,410
that is less important than the cost of

00:48:52,170 --> 00:48:57,420
not having it in a disaster and until

00:48:55,410 --> 00:48:59,670
recently I hadn't heard of something I'd

00:48:57,420 --> 00:49:02,040
already I talked before about the

00:48:59,670 --> 00:49:04,110
importance of testing and the adventure

00:49:02,040 --> 00:49:06,440
of the cloud has actually produced two

00:49:04,110 --> 00:49:09,650
things of worth

00:49:06,440 --> 00:49:11,690
one is that there's no longer an excuse

00:49:09,650 --> 00:49:13,940
that you can't test your backup because

00:49:11,690 --> 00:49:15,589
you don't have sufficient hardware only

00:49:13,940 --> 00:49:18,530
thing you need is your managers credit

00:49:15,589 --> 00:49:20,770
card okay because then you can get as

00:49:18,530 --> 00:49:23,150
much hardware as you want in the cloud

00:49:20,770 --> 00:49:24,650
notwithstanding security and all those

00:49:23,150 --> 00:49:26,240
other pros and cons and everything like

00:49:24,650 --> 00:49:28,700
that you can test your backup on

00:49:26,240 --> 00:49:31,130
recovery strategy and netflix has this

00:49:28,700 --> 00:49:33,500
concept called the chaos monkey or the

00:49:31,130 --> 00:49:35,329
simian army where they actually go

00:49:33,500 --> 00:49:38,630
through in their production system and

00:49:35,329 --> 00:49:41,450
regularly test scenarios of crashing

00:49:38,630 --> 00:49:44,420
certain things so they're proactively

00:49:41,450 --> 00:49:45,829
testing their strategy so I always used

00:49:44,420 --> 00:49:47,359
to say that backup and recovery was the

00:49:45,829 --> 00:49:49,490
poor cousin to scalability and

00:49:47,359 --> 00:49:51,260
performance but now it can be a really

00:49:49,490 --> 00:49:52,670
hot trending topic where you can

00:49:51,260 --> 00:49:55,280
actually have fun you know destroying

00:49:52,670 --> 00:49:57,020
things in the real life and going how

00:49:55,280 --> 00:49:59,300
does the organization perform and we

00:49:57,020 --> 00:50:02,020
take out this server or this is entire

00:49:59,300 --> 00:50:04,040
data center in our infrastructure and

00:50:02,020 --> 00:50:07,250
netflix has a lot of information that so

00:50:04,040 --> 00:50:08,930
i encourage you to check that out you'll

00:50:07,250 --> 00:50:11,270
find my presentations generally on the

00:50:08,930 --> 00:50:14,000
effect of mysql site which is these

00:50:11,270 --> 00:50:16,880
things now or some older ones at my own

00:50:14,000 --> 00:50:18,500
site Laura Banford calm these ones will

00:50:16,880 --> 00:50:22,630
be available on that side and they'll be

00:50:18,500 --> 00:50:24,410
available also itself so don't feel

00:50:22,630 --> 00:50:27,619
disappointed if you can't type fast

00:50:24,410 --> 00:50:28,910
right now because there will be other

00:50:27,619 --> 00:50:32,839
opportunities to find that information

00:50:28,910 --> 00:50:33,859
out everyone's happy you can just have

00:50:32,839 --> 00:50:35,510
the URLs because you can click on

00:50:33,859 --> 00:50:39,440
presentation in the menu you'll get

00:50:35,510 --> 00:50:43,099
there too hopefully all this will

00:50:39,440 --> 00:50:44,990
encourage you I need to know more and I

00:50:43,099 --> 00:50:47,420
was actually planning on having some of

00:50:44,990 --> 00:50:50,180
these to give away but we'll have some

00:50:47,420 --> 00:50:52,700
of my ebook versions to give away in the

00:50:50,180 --> 00:50:54,410
gifts from the soft thing but there's a

00:50:52,700 --> 00:50:56,869
dedicated book just on backup and

00:50:54,410 --> 00:50:59,420
recovery includes five point five point

00:50:56,869 --> 00:51:01,520
six and if you're using the cloud for

00:50:59,420 --> 00:51:05,119
using RDS if you're using looking at

00:51:01,520 --> 00:51:07,520
hp's cloud service or google has a cloud

00:51:05,119 --> 00:51:08,839
SQL offering now as well you know you

00:51:07,520 --> 00:51:11,170
can look at some of those things and

00:51:08,839 --> 00:51:13,970
some of those are actually beneficial

00:51:11,170 --> 00:51:16,010
rds-a google cloud for example have

00:51:13,970 --> 00:51:17,950
offerings that give you synchronous

00:51:16,010 --> 00:51:20,690
replication of your

00:51:17,950 --> 00:51:22,849
mysql by default is asynchronous so

00:51:20,690 --> 00:51:25,880
there may be an option but all of those

00:51:22,849 --> 00:51:27,890
things come with risks in terms of loss

00:51:25,880 --> 00:51:35,029
of control and access to instrumentation

00:51:27,890 --> 00:51:36,019
etc and I will just leave it there thank

00:51:35,029 --> 00:51:38,599
you for listening is anyone have any

00:51:36,019 --> 00:51:40,749
questions hard questions you know what

00:51:38,599 --> 00:51:43,579
disaster that I have that I didn't cover

00:51:40,749 --> 00:51:48,410
if it's my asst if it's if it's sequel

00:51:43,579 --> 00:51:50,690
server related I will not answer just

00:51:48,410 --> 00:51:52,549
wondering if in a situation where you

00:51:50,690 --> 00:51:54,440
have a hosted website that you don't

00:51:52,549 --> 00:51:59,450
have direct access to the file system

00:51:54,440 --> 00:52:01,309
are there what's a decent strategy in

00:51:59,450 --> 00:52:03,799
case they go out of business that you

00:52:01,309 --> 00:52:07,190
can preserve your website if it's my

00:52:03,799 --> 00:52:11,299
service yes so your website is hosted

00:52:07,190 --> 00:52:14,210
somewhere else I'll give you first of

00:52:11,299 --> 00:52:16,609
all some philosophy that is if you care

00:52:14,210 --> 00:52:19,160
about your data keep your important data

00:52:16,609 --> 00:52:20,930
as close to you as possible so that

00:52:19,160 --> 00:52:23,809
might change the strategy and where of

00:52:20,930 --> 00:52:26,210
where you keep certain data a good

00:52:23,809 --> 00:52:28,609
example is RDS Amazon's RDS service

00:52:26,210 --> 00:52:32,720
which is MySQL service provided by them

00:52:28,609 --> 00:52:34,460
it's a hosted service so they will give

00:52:32,720 --> 00:52:36,859
you an interface to access to the system

00:52:34,460 --> 00:52:39,589
to retrieve data you can use tools maybe

00:52:36,859 --> 00:52:42,140
you can use MySQL dump to extract the

00:52:39,589 --> 00:52:43,579
data to the server for example but if

00:52:42,140 --> 00:52:45,769
you don't have access to the binary logs

00:52:43,579 --> 00:52:48,049
RDS doesn't give you access you have no

00:52:45,769 --> 00:52:49,970
way to do a point-in-time recovery so

00:52:48,049 --> 00:52:52,279
you're limited there you have no way to

00:52:49,970 --> 00:52:53,569
actually look at the hardware itself to

00:52:52,279 --> 00:52:55,460
see if you're having a performance

00:52:53,569 --> 00:52:57,799
problem you know whether it whether the

00:52:55,460 --> 00:52:59,420
disk is filling up for example so there

00:52:57,799 --> 00:53:02,180
are all these things that are a higher

00:52:59,420 --> 00:53:04,039
risk if you've chosen to use a hosted

00:53:02,180 --> 00:53:07,339
service and you need to consider those

00:53:04,039 --> 00:53:10,130
and I'll further add the impact of using

00:53:07,339 --> 00:53:13,489
hosted services is they will say to you

00:53:10,130 --> 00:53:17,210
well we run raid okay what raid do you

00:53:13,489 --> 00:53:18,499
run we run raid 10 and i have been to an

00:53:17,210 --> 00:53:19,819
organization where i've asked that

00:53:18,499 --> 00:53:21,619
question and then i've got access the

00:53:19,819 --> 00:53:23,989
system and i've done looking to go wow

00:53:21,619 --> 00:53:25,759
you're hardware's running on raid 5 did

00:53:23,989 --> 00:53:27,410
you know that oh no the host provider

00:53:25,759 --> 00:53:29,569
said we're running on ray 10 and they

00:53:27,410 --> 00:53:30,779
weren't host provider also says yes we

00:53:29,569 --> 00:53:32,309
back up your data

00:53:30,779 --> 00:53:35,429
but do they really back it up where's

00:53:32,309 --> 00:53:36,929
the proof and I've had two organizations

00:53:35,429 --> 00:53:38,640
that claim that they're running rate

00:53:36,929 --> 00:53:40,380
systems and when I've investigated them

00:53:38,640 --> 00:53:42,329
they've both been running degraded raid

00:53:40,380 --> 00:53:44,189
so therefore a disk has failed and

00:53:42,329 --> 00:53:45,779
they're one step closer to failure

00:53:44,189 --> 00:53:48,599
because they're relying on a hosted

00:53:45,779 --> 00:53:51,479
service so my advice to you is don't

00:53:48,599 --> 00:53:53,130
believe anything they say make sure that

00:53:51,479 --> 00:53:55,229
you have a strategy to be able to get

00:53:53,130 --> 00:53:57,449
data out of there because there are many

00:53:55,229 --> 00:54:00,419
memorable examples and i have several in

00:53:57,449 --> 00:54:02,429
the book of the database goes away and

00:54:00,419 --> 00:54:04,109
you've lost all your data and it doesn't

00:54:02,429 --> 00:54:05,939
happen to a small organization and also

00:54:04,109 --> 00:54:08,579
happen to the sidekick for example

00:54:05,939 --> 00:54:11,069
t-mobile this isn't a MySQL example but

00:54:08,579 --> 00:54:13,140
it shows you that large organizations

00:54:11,069 --> 00:54:15,449
can also have pawns if you rely on them

00:54:13,140 --> 00:54:17,999
as a hosting service there been some

00:54:15,449 --> 00:54:22,529
memorable Maya squirrel examples as well

00:54:17,999 --> 00:54:24,179
crowd surfing and a few others but can't

00:54:22,529 --> 00:54:25,499
think of right this very second where

00:54:24,179 --> 00:54:27,979
they've shut down because they were they

00:54:25,499 --> 00:54:30,959
relied on hosting service providers or

00:54:27,979 --> 00:54:33,289
not had procedures in place sorry that

00:54:30,959 --> 00:54:35,669
was the long answer to a short question

00:54:33,289 --> 00:54:42,479
hey I've got to put some philosophy in

00:54:35,669 --> 00:54:44,279
there the Zen of backup and recovery no

00:54:42,479 --> 00:54:47,729
more questions no more game Souls out

00:54:44,279 --> 00:54:52,849
there everyone else has you know a fully

00:54:47,729 --> 00:54:55,529
functional working you know royalty free

00:54:52,849 --> 00:54:58,949
media system running on FreeBSD that

00:54:55,529 --> 00:55:01,229
doesn't need my ethical backups I've got

00:54:58,949 --> 00:55:06,179
one question yes nobody nobody else from

00:55:01,229 --> 00:55:09,119
the crowd yesterday a FileMaker Pro guy

00:55:06,179 --> 00:55:11,969
comes into my my sequel table he blows

00:55:09,119 --> 00:55:14,159
away all the rows because that's very

00:55:11,969 --> 00:55:16,979
easy to do in FileMaker Pro i'm not sure

00:55:14,159 --> 00:55:19,799
if him for me I don't have been logging

00:55:16,979 --> 00:55:21,209
enabled so I just really weren't working

00:55:19,799 --> 00:55:24,929
in transactions either so you couldn't

00:55:21,209 --> 00:55:28,109
do roll back no so I just restored the

00:55:24,929 --> 00:55:30,749
mdy MDI files and started back the

00:55:28,109 --> 00:55:33,209
server but if I had been logging enabled

00:55:30,749 --> 00:55:36,059
yes does the bin lock and and he just

00:55:33,209 --> 00:55:39,179
after lunch told me when he blew away

00:55:36,059 --> 00:55:41,540
all the records he waited a while how

00:55:39,179 --> 00:55:45,650
would I know when to go back to the

00:55:41,540 --> 00:55:47,810
start is the binlog to do is it so human

00:55:45,650 --> 00:55:49,910
readable so I can know when to say the

00:55:47,810 --> 00:55:52,400
start so the question is someone ran a

00:55:49,910 --> 00:55:54,650
destructive command on your database in

00:55:52,400 --> 00:55:59,030
this case a delete from table and didn't

00:55:54,650 --> 00:56:01,730
tell you exactly when if binary logging

00:55:59,030 --> 00:56:03,560
is enabled you it's in a binary format

00:56:01,730 --> 00:56:06,460
so you can't look at it natively but you

00:56:03,560 --> 00:56:08,920
can run the Myo score binlog command and

00:56:06,460 --> 00:56:11,980
providing a using statement level

00:56:08,920 --> 00:56:14,060
logging now there's this statement and

00:56:11,980 --> 00:56:15,410
row and mixed and that's a little

00:56:14,060 --> 00:56:17,690
complicated by the default is tool

00:56:15,410 --> 00:56:19,760
statement you can actually see an ASCII

00:56:17,690 --> 00:56:21,140
version of everything that's happen so

00:56:19,760 --> 00:56:23,510
you can actually like look at it and you

00:56:21,140 --> 00:56:24,860
can do a search for delete and you can

00:56:23,510 --> 00:56:27,170
find when it actually happens and then

00:56:24,860 --> 00:56:29,390
that in the binary log it will actually

00:56:27,170 --> 00:56:31,340
tell you before that you'll get a hash

00:56:29,390 --> 00:56:33,650
mark or a comment that'll say the actual

00:56:31,340 --> 00:56:37,760
position and the time so then you could

00:56:33,650 --> 00:56:40,730
for example run mysql binlog to that

00:56:37,760 --> 00:56:42,740
particular end date time or end position

00:56:40,730 --> 00:56:45,770
to catch all the data up until that

00:56:42,740 --> 00:56:48,950
point in time so you can do some data

00:56:45,770 --> 00:56:51,590
analysis to work that out now I will

00:56:48,950 --> 00:56:54,950
highlight that the binary log records

00:56:51,590 --> 00:56:56,450
all the operations assuming that you are

00:56:54,950 --> 00:56:59,420
logging all of the operations you

00:56:56,450 --> 00:57:00,740
haven't put any ignores in there and the

00:56:59,420 --> 00:57:02,780
person that did the work didn't have

00:57:00,740 --> 00:57:04,730
super privilege because of an

00:57:02,780 --> 00:57:07,400
application if you've done grant all on

00:57:04,730 --> 00:57:09,170
star dot star which I guarantee you at

00:57:07,400 --> 00:57:13,190
least one person the audience has that

00:57:09,170 --> 00:57:14,900
that is bad very very bad because in one

00:57:13,190 --> 00:57:16,970
step it gives you super and one thing

00:57:14,900 --> 00:57:19,430
that super can do is turn off binary

00:57:16,970 --> 00:57:21,920
logging so if I wanted to be devious and

00:57:19,430 --> 00:57:24,650
I had that access I'd go set by logging

00:57:21,920 --> 00:57:26,360
off delete from table said binary log on

00:57:24,650 --> 00:57:28,340
wouldn't be in your binary log you

00:57:26,360 --> 00:57:31,160
wouldn't know when they did it so

00:57:28,340 --> 00:57:36,020
another reason why my oh school security

00:57:31,160 --> 00:57:38,360
is also important now i will also just

00:57:36,020 --> 00:57:39,650
be just to do that one of the things you

00:57:38,360 --> 00:57:42,200
want to consider in a backup and

00:57:39,650 --> 00:57:43,550
recovery strategy is keeping copies of

00:57:42,200 --> 00:57:45,410
your scheme and keeping copies of your

00:57:43,550 --> 00:57:46,760
data you know my score dump is good

00:57:45,410 --> 00:57:49,460
another thing you can do is you can also

00:57:46,760 --> 00:57:50,510
look at the status variables and the

00:57:49,460 --> 00:57:52,390
status variables will give you

00:57:50,510 --> 00:57:55,000
information particularly about alter

00:57:52,390 --> 00:57:56,140
earth drop create statements so you can

00:57:55,000 --> 00:57:59,049
actually see if someone's actually

00:57:56,140 --> 00:58:00,460
modified the structure of of some object

00:57:59,049 --> 00:58:02,529
and then you can use the binary log to

00:58:00,460 --> 00:58:04,059
go looking for it you can't really use

00:58:02,529 --> 00:58:05,380
com delete because a normal delete

00:58:04,059 --> 00:58:07,420
statement would show up in there as well

00:58:05,380 --> 00:58:09,549
but sometimes more destructive things

00:58:07,420 --> 00:58:11,079
you can use the status variables even in

00:58:09,549 --> 00:58:13,420
like daily backups and keeping copies

00:58:11,079 --> 00:58:15,119
icing to see if something may have

00:58:13,420 --> 00:58:17,799
happened that you may not be aware of

00:58:15,119 --> 00:58:19,329
and that's important for backup and

00:58:17,799 --> 00:58:23,230
recovery it's important for performance

00:58:19,329 --> 00:58:26,529
auditability etc yes question sir hi my

00:58:23,230 --> 00:58:32,859
name is sing well tools would you

00:58:26,529 --> 00:58:38,140
recommend to back up to 100 + turnkey

00:58:32,859 --> 00:58:41,650
lamps tax virtual VPS is right kind of

00:58:38,140 --> 00:58:43,720
automated easy you could manually do 100

00:58:41,650 --> 00:58:47,049
but why would you want to do that for

00:58:43,720 --> 00:58:49,119
take days maybe sure so we have 100

00:58:47,049 --> 00:58:50,710
databases there in a hundred different

00:58:49,119 --> 00:58:53,260
instances like there's actually a

00:58:50,710 --> 00:58:54,789
separate VPS instance yes okay well so

00:58:53,260 --> 00:58:57,400
that's a good start if they're all

00:58:54,789 --> 00:58:59,230
running on like a SAS model in one skin

00:58:57,400 --> 00:59:00,640
one instance then you're having problems

00:58:59,230 --> 00:59:02,440
because you won't be able to restore

00:59:00,640 --> 00:59:03,700
appropriately but if you have a separate

00:59:02,440 --> 00:59:05,920
dedicated instance and you're running

00:59:03,700 --> 00:59:08,589
that if the size of it is relatively

00:59:05,920 --> 00:59:11,920
small and I defined small as less than

00:59:08,589 --> 00:59:14,170
10 or maybe 20 gigabytes then a MySQL

00:59:11,920 --> 00:59:16,480
dump will probably be fine okay the

00:59:14,170 --> 00:59:19,660
impact of mayest will dump is is that if

00:59:16,480 --> 00:59:22,299
you just run it by default it will lock

00:59:19,660 --> 00:59:24,940
your tables because it will actually

00:59:22,299 --> 00:59:26,890
turn on lock all tables under the opt

00:59:24,940 --> 00:59:29,500
option which is enabled by default if

00:59:26,890 --> 00:59:31,900
it's all I know DB then you can do

00:59:29,500 --> 00:59:34,690
actually single transaction to relieve

00:59:31,900 --> 00:59:36,369
that blocking potential so in all your

00:59:34,690 --> 00:59:38,230
VPS environments the question would be

00:59:36,369 --> 00:59:39,640
is there a maintenance window can we

00:59:38,230 --> 00:59:41,410
afford five or ten minutes and I have

00:59:39,640 --> 00:59:44,049
access to the data if it's maybe like

00:59:41,410 --> 00:59:47,259
you know one gig then maybe it takes 20

00:59:44,049 --> 00:59:48,569
seconds and so it that may be okay you

00:59:47,259 --> 00:59:51,099
know it will depend on the circumstances

00:59:48,569 --> 00:59:53,259
but in a small environment that's

00:59:51,099 --> 00:59:55,869
probably the quickest and easiest option

00:59:53,259 --> 00:59:57,880
you can run it remotely it's pretty easy

00:59:55,869 --> 00:59:59,859
service or as long as doesn't take too

00:59:57,880 --> 01:00:01,839
long to restore it's not too large you

00:59:59,859 --> 01:00:03,730
can schedule them across any deeper

01:00:01,839 --> 01:00:04,779
ticular time you know you can run them

01:00:03,730 --> 01:00:05,240
at different times the data and we'll

01:00:04,779 --> 01:00:07,730
have to

01:00:05,240 --> 01:00:09,560
same time you can use it to like my

01:00:07,730 --> 01:00:11,270
great things live more easily it'll give

01:00:09,560 --> 01:00:13,880
you some flexibility and it's included

01:00:11,270 --> 01:00:16,550
in the tools by default the biggest

01:00:13,880 --> 01:00:19,880
caveat is size as it gets too large

01:00:16,550 --> 01:00:21,440
it'll take too long to restore and also

01:00:19,880 --> 01:00:24,020
the locking their the two things you

01:00:21,440 --> 01:00:26,510
want to worry about anyway thank you all

01:00:24,020 --> 01:00:29,390
for attending my time is up I'm going to

01:00:26,510 --> 01:00:31,400
be here all weekend including the open

01:00:29,390 --> 01:00:33,650
database camp we have on Sunday which is

01:00:31,400 --> 01:00:35,300
an unconference so you want to know if

01:00:33,650 --> 01:00:37,550
your God sticking around but there will

01:00:35,300 --> 01:00:41,750
be mysql people that'll be here we could

01:00:37,550 --> 01:00:44,710
talk about anything now or later as well

01:00:41,750 --> 01:00:44,710
thank you

01:00:51,840 --> 01:00:58,320
how's that sigh every way this is the

01:00:54,990 --> 01:01:00,480
way to better utilize all your resources

01:00:58,320 --> 01:01:03,930
and it makes managing all your resources

01:01:00,480 --> 01:01:07,760
pretty easy all of the innovation is

01:01:03,930 --> 01:01:11,250
happening in open source the

01:01:07,760 --> 01:01:13,080
collaborative nature and of the you know

01:01:11,250 --> 01:01:15,000
of the community and the speed at which

01:01:13,080 --> 01:01:17,190
these are these you know these

01:01:15,000 --> 01:01:19,500
deficiencies these bugs are getting

01:01:17,190 --> 01:01:22,080
discovered and then fixed is it like

01:01:19,500 --> 01:01:24,810
that really shows the power of the you

01:01:22,080 --> 01:01:26,430
know of the open source community it is

01:01:24,810 --> 01:01:30,630
global and it's definitely because of

01:01:26,430 --> 01:01:36,960
the users community people are extremely

01:01:30,630 --> 01:01:38,880
friendly and always ready to help if you

01:01:36,960 --> 01:01:41,160
go on tire see any day you'll see these

01:01:38,880 --> 01:01:42,890
guys helping each other out and they're

01:01:41,160 --> 01:01:45,570
all doing it like in a selfless manner

01:01:42,890 --> 01:01:48,560
the product is transparent for everyone

01:01:45,570 --> 01:01:51,510
everyone can look at the code base

01:01:48,560 --> 01:01:53,250
everyone can see how close that is is

01:01:51,510 --> 01:01:59,100
being built nothing nothing is

01:01:53,250 --> 01:02:01,740
proprietary everything is open in many

01:01:59,100 --> 01:02:05,940
ways it's absolutely vital to the the

01:02:01,740 --> 01:02:09,690
unborn health cloudstack the most

01:02:05,940 --> 01:02:13,619
exciting event in recent memory for he

01:02:09,690 --> 01:02:16,259
was our first developer boot camp

01:02:13,619 --> 01:02:18,900
and our call gave people a gave me two

01:02:16,259 --> 01:02:22,859
weeks notice to come attend I was

01:02:18,900 --> 01:02:27,059
expecting 25 or 30 people so we ended up

01:02:22,859 --> 01:02:29,880
with 87 people and had to go get more

01:02:27,059 --> 01:02:32,400
chairs in the room twice everything

01:02:29,880 --> 01:02:35,670
within cloud computing is commodity and

01:02:32,400 --> 01:02:38,730
is open source and so I don't think that

01:02:35,670 --> 01:02:40,499
you will you'll see anywhere where open

01:02:38,730 --> 01:02:43,529
source is not pervasive in cloud

01:02:40,499 --> 01:02:46,079
computing and so i think it's i think

01:02:43,529 --> 01:02:47,579
it's an assumption i think when you talk

01:02:46,079 --> 01:02:48,720
about cloud computing you're really

01:02:47,579 --> 01:02:54,269
talking about open source cloud

01:02:48,720 --> 01:02:57,299
computing cloud sac is a robust solution

01:02:54,269 --> 01:02:59,430
for large deployments you'll have dozens

01:02:57,299 --> 01:03:03,690
of data centers and thousands of servers

01:02:59,430 --> 01:03:06,390
in each data center is these hardware is

01:03:03,690 --> 01:03:09,869
going to fail and CloudStack is designed

01:03:06,390 --> 01:03:12,569
to handle number one that mass scale

01:03:09,869 --> 01:03:15,749
number two it's designed to handle the

01:03:12,569 --> 01:03:18,299
failure that inevitably happens in large

01:03:15,749 --> 01:03:22,799
deployments we started working on cloud

01:03:18,299 --> 01:03:26,099
tech over four years ago and it was the

01:03:22,799 --> 01:03:27,839
original set of people working on it had

01:03:26,099 --> 01:03:31,950
a background of delivering software

01:03:27,839 --> 01:03:36,180
telcos and service providers lots of QA

01:03:31,950 --> 01:03:39,809
lots of users actually using it high

01:03:36,180 --> 01:03:42,900
availability is the key feature multiple

01:03:39,809 --> 01:03:45,059
hypervisors support different network

01:03:42,900 --> 01:03:48,089
models we can pick up whatever suits you

01:03:45,059 --> 01:03:49,859
better while step management server can

01:03:48,089 --> 01:03:53,549
be deployed in different physical

01:03:49,859 --> 01:03:55,200
machines it definitely has a huge

01:03:53,549 --> 01:04:00,180
footprint it's being deployed everywhere

01:03:55,200 --> 01:04:02,759
there's a major movie studio that they

01:04:00,180 --> 01:04:06,059
were using cloudstack they were using it

01:04:02,759 --> 01:04:08,039
to transcode video and i thought that

01:04:06,059 --> 01:04:09,690
was terribly fascinating what i found

01:04:08,039 --> 01:04:12,960
more fascinating is what they did during

01:04:09,690 --> 01:04:15,749
lunch where they would spin up you know

01:04:12,960 --> 01:04:17,099
50 or 60 game servers then as soon as

01:04:15,749 --> 01:04:18,640
lunch was over they would destroy all

01:04:17,099 --> 01:04:22,660
the instances and good

01:04:18,640 --> 01:04:24,099
doing real work CloudStack is vast it

01:04:22,660 --> 01:04:25,630
touches so many different aspects and

01:04:24,099 --> 01:04:27,819
there's no one person that's kind of

01:04:25,630 --> 01:04:31,299
like a master of all those realms I

01:04:27,819 --> 01:04:34,000
think clouds stack as a project is going

01:04:31,299 --> 01:04:37,769
to be one of the leaders simply because

01:04:34,000 --> 01:04:44,440
it's some of the most feature folan and

01:04:37,769 --> 01:04:47,700
and robust platforms out they were Adam

01:04:44,440 --> 01:04:47,700
senior living through the clouds dag

01:05:00,520 --> 01:05:02,580
you

01:05:05,880 --> 01:05:10,960
when we created asterisk over a decade

01:05:08,590 --> 01:05:12,910
ago we could not have imagined that

01:05:10,960 --> 01:05:15,100
asterisk would not only become the most

01:05:12,910 --> 01:05:17,260
widely adopted open source communication

01:05:15,100 --> 01:05:19,300
software on the planet but that it would

01:05:17,260 --> 01:05:21,820
impact the entire industry in the way

01:05:19,300 --> 01:05:23,770
that it has today asterisk has found its

01:05:21,820 --> 01:05:26,410
way in the more than 170 countries and

01:05:23,770 --> 01:05:28,390
virtually every fortune 1000 company the

01:05:26,410 --> 01:05:30,490
success of asterisk has enabled a

01:05:28,390 --> 01:05:31,870
transition of power from the hands of

01:05:30,490 --> 01:05:34,150
the traditional proprietary phone

01:05:31,870 --> 01:05:36,550
vendors into the hands of the users and

01:05:34,150 --> 01:05:38,470
administrators of phone systems using

01:05:36,550 --> 01:05:39,700
this power our customers have created

01:05:38,470 --> 01:05:41,650
all sorts of business changing

01:05:39,700 --> 01:05:43,510
applications from small office phone

01:05:41,650 --> 01:05:46,000
systems to mission-critical call centers

01:05:43,510 --> 01:05:47,620
the international carrier networks in

01:05:46,000 --> 01:05:49,420
fact there's even an entire country

01:05:47,620 --> 01:05:51,790
those communications infrastructure runs

01:05:49,420 --> 01:05:53,920
on esters the gym has always been about

01:05:51,790 --> 01:05:55,630
creating technology that expands

01:05:53,920 --> 01:05:57,820
communications capabilities in ways that

01:05:55,630 --> 01:05:59,020
we could never have imagined and that's

01:05:57,820 --> 01:06:01,750
part of what's game-changing about

01:05:59,020 --> 01:06:04,090
Digium today we're doing it again this

01:06:01,750 --> 01:06:06,190
time by introducing a new family of HD

01:06:04,090 --> 01:06:08,320
IP phones that extends control of the

01:06:06,190 --> 01:06:10,060
user all the way to the desktop the

01:06:08,320 --> 01:06:11,770
launch of these new products represents

01:06:10,060 --> 01:06:13,750
the next phase indigenous history of

01:06:11,770 --> 01:06:16,270
innovation these are the first and only

01:06:13,750 --> 01:06:17,980
IP phones designed to fully leverage the

01:06:16,270 --> 01:06:19,540
power of esters when we first discussed

01:06:17,980 --> 01:06:21,580
our expectations for building a family

01:06:19,540 --> 01:06:23,740
of phones for use with asterisks our

01:06:21,580 --> 01:06:25,450
requirements were pretty simple we asked

01:06:23,740 --> 01:06:27,100
the team to build the phones such that

01:06:25,450 --> 01:06:29,290
they were easy to install integrate

01:06:27,100 --> 01:06:31,150
provision and use I think you'll soon

01:06:29,290 --> 01:06:33,700
agree our engineers have delivered on

01:06:31,150 --> 01:06:35,560
that goal user feedback is validating

01:06:33,700 --> 01:06:37,450
that when it comes to operation with a

01:06:35,560 --> 01:06:39,880
through space systems including our own

01:06:37,450 --> 01:06:42,460
Switchvox based product these are the

01:06:39,880 --> 01:06:43,750
easiest to use best integrated most

01:06:42,460 --> 01:06:46,360
interoperable products on the market

01:06:43,750 --> 01:06:48,340
today the Digium family of phones will

01:06:46,360 --> 01:06:50,410
initially include three IP desk phones

01:06:48,340 --> 01:06:52,330
uniquely designed to complement any

01:06:50,410 --> 01:06:54,220
asterisk or Switchvox based solution

01:06:52,330 --> 01:06:56,860
these phones are different for a number

01:06:54,220 --> 01:06:59,530
of reasons first there is clue sively

01:06:56,860 --> 01:07:00,940
designed for use with asterisks secondly

01:06:59,530 --> 01:07:02,580
we've made it really easy to

01:07:00,940 --> 01:07:04,960
autodiscover and provision the phones

01:07:02,580 --> 01:07:06,640
next we've made it easy for the phones

01:07:04,960 --> 01:07:08,670
to access information inside of

01:07:06,640 --> 01:07:10,609
asterisks allowing tight coupling

01:07:08,670 --> 01:07:12,569
between an application and the phone

01:07:10,609 --> 01:07:14,730
additionally we've created an

01:07:12,569 --> 01:07:16,859
applications engine that allows users

01:07:14,730 --> 01:07:20,099
and developers to create and run their

01:07:16,859 --> 01:07:21,839
own apps on the phone and finally we've

01:07:20,099 --> 01:07:23,819
done all of this at a very compelling

01:07:21,839 --> 01:07:25,500
price point at Digium we're always

01:07:23,819 --> 01:07:27,599
thinking of ways to give our customers

01:07:25,500 --> 01:07:30,150
the best value in business phone systems

01:07:27,599 --> 01:07:31,710
and also give them the power to create

01:07:30,150 --> 01:07:33,839
their own solutions or any

01:07:31,710 --> 01:07:35,579
communications challenge well continue

01:07:33,839 --> 01:07:36,990
to push the boundaries not only to make

01:07:35,579 --> 01:07:39,059
Astros cooler faster and more

01:07:36,990 --> 01:07:40,680
technologically feature-rich but to make

01:07:39,059 --> 01:07:43,170
asterisk and what communications even

01:07:40,680 --> 01:07:46,280
easier and together we'll change the way

01:07:43,170 --> 01:07:46,280

YouTube URL: https://www.youtube.com/watch?v=HWgWwLi0wfQ


