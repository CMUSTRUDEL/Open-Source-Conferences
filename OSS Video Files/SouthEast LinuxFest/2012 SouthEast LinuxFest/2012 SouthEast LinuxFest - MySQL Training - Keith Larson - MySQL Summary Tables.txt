Title: 2012 SouthEast LinuxFest - MySQL Training - Keith Larson - MySQL Summary Tables
Publication date: 2013-08-28
Playlist: 2012 SouthEast LinuxFest
Description: 
	2012 SouthEast LinuxFest
Advanced MySQL Training 
Keith Larson
MySQL Summary Tables
Captions: 
	00:00:00,000 --> 00:00:05,279
the following presentation was recorded

00:00:02,490 --> 00:00:08,040
the 2012 southeast linux fest in

00:00:05,279 --> 00:00:10,410
charlotte north carolina it is licensed

00:00:08,040 --> 00:00:12,090
under a creative commons license for

00:00:10,410 --> 00:00:17,609
more information about the southeast

00:00:12,090 --> 00:00:19,439
linux fest visit w wh linux pc org the

00:00:17,609 --> 00:00:22,320
southeast linux fest would like to thank

00:00:19,439 --> 00:00:26,090
the following diamond sponsors in 2012

00:00:22,320 --> 00:00:26,090
for helping make these videos possible

00:00:44,650 --> 00:00:46,710
you

00:00:48,300 --> 00:00:53,129
good evening and welcome to southeast

00:00:49,890 --> 00:00:55,470
linux fest 2012 this session we're going

00:00:53,129 --> 00:00:57,270
to have keith larsen from oracle ease

00:00:55,470 --> 00:01:00,239
through talking to us about summary

00:00:57,270 --> 00:01:04,110
tables thank you very much can everybody

00:01:00,239 --> 00:01:08,220
hear me just wait you love you good make

00:01:04,110 --> 00:01:11,670
sure all right so I realized that this

00:01:08,220 --> 00:01:14,640
talk is a the very end of a long day so

00:01:11,670 --> 00:01:17,970
trust me is the goal this is to give you

00:01:14,640 --> 00:01:19,979
some for yourself some questions on how

00:01:17,970 --> 00:01:24,630
you want to proceed with things but also

00:01:19,979 --> 00:01:26,789
have fun so first and foremost don't

00:01:24,630 --> 00:01:29,880
believe anything I say employers won't

00:01:26,789 --> 00:01:32,039
back me up later so if you've seen any

00:01:29,880 --> 00:01:34,050
of our Oracle presentation potentially

00:01:32,039 --> 00:01:36,390
we have today this is just a quick blurb

00:01:34,050 --> 00:01:38,550
of everything we talked about as feature

00:01:36,390 --> 00:01:42,720
release but mine's more theories that

00:01:38,550 --> 00:01:45,149
only matter but who am i I'm a community

00:01:42,720 --> 00:01:46,560
manager from I see well I've started

00:01:45,149 --> 00:01:49,409
with my scroll back around the three-dot

00:01:46,560 --> 00:01:51,780
to three days and a lot of my work has

00:01:49,409 --> 00:01:55,319
primarily been with a marketing company

00:01:51,780 --> 00:01:57,780
that did a lot of had an OD be my scroll

00:01:55,319 --> 00:02:01,050
representation with delayed replication

00:01:57,780 --> 00:02:04,319
and what we did we did a lot a lot of

00:02:01,050 --> 00:02:06,899
data mining because marketing folks need

00:02:04,319 --> 00:02:09,750
to follow trends and find trends wanted

00:02:06,899 --> 00:02:12,470
detail every community information so we

00:02:09,750 --> 00:02:15,510
did a lot of digging in fine tuning now

00:02:12,470 --> 00:02:17,040
with that I kind of wrote a blog spot

00:02:15,510 --> 00:02:20,040
when I came on the Vice ql side which is

00:02:17,040 --> 00:02:21,870
here which this originally started the

00:02:20,040 --> 00:02:23,010
spurred for the abstract for this for

00:02:21,870 --> 00:02:24,420
this talk so if you guys want to go see

00:02:23,010 --> 00:02:28,709
that there's a whole example someone not

00:02:24,420 --> 00:02:30,650
for that as well but what I did for this

00:02:28,709 --> 00:02:33,390
talk because when i looked at the agenda

00:02:30,650 --> 00:02:34,739
which is my original agenda I was like

00:02:33,390 --> 00:02:37,020
okay well let's just actually break this

00:02:34,739 --> 00:02:39,420
out a little bit more a funner way and

00:02:37,020 --> 00:02:41,459
have more fun with it so we're going to

00:02:39,420 --> 00:02:43,530
go through a little situation some

00:02:41,459 --> 00:02:46,680
solutions to it and then some resources

00:02:43,530 --> 00:02:48,150
to how to solve the situation now we are

00:02:46,680 --> 00:02:51,870
the Linux festival so hopefully you guys

00:02:48,150 --> 00:02:52,860
all get the concept you probably

00:02:51,870 --> 00:02:54,090
shouldn't have to read too much more to

00:02:52,860 --> 00:02:57,390
that to understand what is this from I

00:02:54,090 --> 00:03:01,230
assume you're all matrix fans so the

00:02:57,390 --> 00:03:04,290
real question out of this is not the top

00:03:01,230 --> 00:03:05,760
one but more of this one here's are you

00:03:04,290 --> 00:03:07,950
asking like questions when you approach

00:03:05,760 --> 00:03:10,920
your databases because a lot of people

00:03:07,950 --> 00:03:12,210
here summary tables and materialized

00:03:10,920 --> 00:03:13,800
views and all this and they think that

00:03:12,210 --> 00:03:15,930
that's the best solution to go I have to

00:03:13,800 --> 00:03:18,360
do faster I have to do this and that's

00:03:15,930 --> 00:03:21,060
not always the case there's certainly a

00:03:18,360 --> 00:03:22,590
case but it's not always the case so

00:03:21,060 --> 00:03:24,600
listen to fine tune to make sure how you

00:03:22,590 --> 00:03:26,190
guys want to come and you go forward and

00:03:24,600 --> 00:03:28,740
really benchmark and find out what's

00:03:26,190 --> 00:03:32,130
going on to find the best thing so with

00:03:28,740 --> 00:03:33,180
that do you know your own data is the

00:03:32,130 --> 00:03:34,410
biggest question when you hit when you

00:03:33,180 --> 00:03:36,120
have your data and you're dealing with

00:03:34,410 --> 00:03:38,130
your databases is how well do you know

00:03:36,120 --> 00:03:40,380
it a lot of people assume that this is

00:03:38,130 --> 00:03:42,180
you know one factor is how to do things

00:03:40,380 --> 00:03:43,440
but I realize that there's actually a

00:03:42,180 --> 00:03:46,020
whole of the scope over here the AXA

00:03:43,440 --> 00:03:47,130
graphs where all the big tables are will

00:03:46,020 --> 00:03:48,690
go through some table structures and

00:03:47,130 --> 00:03:51,090
whatnot to see how people kind of get

00:03:48,690 --> 00:03:53,430
carried away versus tough at times but

00:03:51,090 --> 00:03:56,280
the question is not picture didn't shut

00:03:53,430 --> 00:03:57,959
too well but what if your data was as

00:03:56,280 --> 00:04:01,020
bigger than is the matrix what if you

00:03:57,959 --> 00:04:02,580
did have to have a database that held

00:04:01,020 --> 00:04:04,140
all that stuff so they so you could

00:04:02,580 --> 00:04:06,180
render out the matrix for that in that

00:04:04,140 --> 00:04:09,000
example how would you sort data

00:04:06,180 --> 00:04:10,709
efficiently how would you define in date

00:04:09,000 --> 00:04:14,400
of mind all that information all the

00:04:10,709 --> 00:04:16,139
users in ground pool etc how would you

00:04:14,400 --> 00:04:17,489
report trends if your word and that

00:04:16,139 --> 00:04:20,009
scope to have a data space that size

00:04:17,489 --> 00:04:23,280
it's a lot of data if you actually think

00:04:20,009 --> 00:04:26,430
back to the movie structure speaking of

00:04:23,280 --> 00:04:28,349
suckers um if you did have to have a

00:04:26,430 --> 00:04:30,569
database you might start off of luck in

00:04:28,349 --> 00:04:33,270
Taylor all the people and all the Scopes

00:04:30,569 --> 00:04:35,250
of the sub matrix type environment you

00:04:33,270 --> 00:04:37,380
would start off with just the big towers

00:04:35,250 --> 00:04:38,610
that they have all the pods in and you

00:04:37,380 --> 00:04:40,139
might have information like the

00:04:38,610 --> 00:04:42,030
structure ideas on that long so you know

00:04:40,139 --> 00:04:43,530
where they are might have dates that

00:04:42,030 --> 00:04:45,180
came online how many levels are now how

00:04:43,530 --> 00:04:48,330
many maximum pods would fit on those

00:04:45,180 --> 00:04:52,169
structures how many well I peel it might

00:04:48,330 --> 00:04:53,669
be for the call information there's a

00:04:52,169 --> 00:04:55,560
numerous amounts of information that

00:04:53,669 --> 00:04:57,930
people gather when they start building

00:04:55,560 --> 00:05:00,150
differences situations now do you need

00:04:57,930 --> 00:05:02,069
all this information all time no but

00:05:00,150 --> 00:05:03,479
sometimes you're going to tie this

00:05:02,069 --> 00:05:05,189
information to do data mining and

00:05:03,479 --> 00:05:06,719
digging into this stuff so this might

00:05:05,189 --> 00:05:08,490
become relevant you have to make sure

00:05:06,719 --> 00:05:10,740
you're keeping your tables with

00:05:08,490 --> 00:05:12,660
information you actually need now this

00:05:10,740 --> 00:05:14,789
is in the summary table but this is a

00:05:12,660 --> 00:05:17,789
scope of or your you're going to start

00:05:14,789 --> 00:05:20,400
brinstar beginning one note this is

00:05:17,789 --> 00:05:24,750
because it comes up a lot is a IP for

00:05:20,400 --> 00:05:26,190
example a lot of people put in a bar

00:05:24,750 --> 00:05:29,160
chart sometimes for eye peas are they

00:05:26,190 --> 00:05:31,560
put in the humongous introduces like you

00:05:29,160 --> 00:05:32,970
don't need that this is ever examples in

00:05:31,560 --> 00:05:34,770
select segments will touch base when you

00:05:32,970 --> 00:05:37,169
see it later but this is actually a

00:05:34,770 --> 00:05:43,650
faster way to store at p's is the

00:05:37,169 --> 00:05:45,509
structure here and again do up well

00:05:43,650 --> 00:05:50,849
that's not for rtv6 though that wouldn't

00:05:45,509 --> 00:05:52,110
be for that so next case is once you had

00:05:50,849 --> 00:05:54,030
your table for the structures you can

00:05:52,110 --> 00:05:56,610
have all your data or all the pods that

00:05:54,030 --> 00:05:58,080
hold all these people okay now we have a

00:05:56,610 --> 00:05:59,310
whole other realm of scopes and

00:05:58,080 --> 00:06:02,190
information that you all send you would

00:05:59,310 --> 00:06:03,360
need and you keep track of again you're

00:06:02,190 --> 00:06:05,250
going to know where that where is that

00:06:03,360 --> 00:06:06,659
pod what structure is that pot in you

00:06:05,250 --> 00:06:08,250
have a structure ID we need to go online

00:06:06,659 --> 00:06:10,319
when you go offline what level of the

00:06:08,250 --> 00:06:14,580
structure is it in positions and again

00:06:10,319 --> 00:06:16,650
etc referred IP communication etc all

00:06:14,580 --> 00:06:18,780
this is a whole another realm of data

00:06:16,650 --> 00:06:22,169
that we end up in our databases in this

00:06:18,780 --> 00:06:23,820
theoretical environment but we realize

00:06:22,169 --> 00:06:24,930
that we might need one day but then if

00:06:23,820 --> 00:06:28,199
you start date of mind it's going to get

00:06:24,930 --> 00:06:30,810
bigger and bigger and bigger and of

00:06:28,199 --> 00:06:33,659
course the real situation is when we get

00:06:30,810 --> 00:06:36,270
our Neil's all the people that live in

00:06:33,659 --> 00:06:38,310
these worlds yet to have humans you

00:06:36,270 --> 00:06:40,860
might have a key for reference them with

00:06:38,310 --> 00:06:43,650
pas de león then you have to realize of

00:06:40,860 --> 00:06:46,110
well that's just who they are but what

00:06:43,650 --> 00:06:48,300
about them there's a whole structure of

00:06:46,110 --> 00:06:49,889
world of information that we might start

00:06:48,300 --> 00:06:54,330
digging into the actual people that are

00:06:49,889 --> 00:06:55,710
there for example his hair color is his

00:06:54,330 --> 00:06:57,599
first name last name is generators

00:06:55,710 --> 00:06:59,419
address all of a sudden our data is

00:06:57,599 --> 00:07:03,240
starts growing and growing and growing

00:06:59,419 --> 00:07:05,699
now in this example this is a simple

00:07:03,240 --> 00:07:07,440
concept that we're going to build a data

00:07:05,699 --> 00:07:09,539
table so we're going to have a table of

00:07:07,440 --> 00:07:13,740
this is the questions we're going to ask

00:07:09,539 --> 00:07:16,500
about the human in this case and you

00:07:13,740 --> 00:07:18,839
might tie that to a table that has the

00:07:16,500 --> 00:07:20,460
data about them so now we know that

00:07:18,839 --> 00:07:22,860
Thomas Anderson

00:07:20,460 --> 00:07:25,500
lives in Chicago one west addison street

00:07:22,860 --> 00:07:27,090
and he's in lower downtown cuts where he

00:07:25,500 --> 00:07:28,560
went to high school of it was junior

00:07:27,090 --> 00:07:30,210
high school against with o's in

00:07:28,560 --> 00:07:33,180
patterson high school so we have this

00:07:30,210 --> 00:07:36,630
full seven is one person now this is the

00:07:33,180 --> 00:07:37,740
easy simple query for just one guy but

00:07:36,630 --> 00:07:39,539
if you're going to serve data mining the

00:07:37,740 --> 00:07:41,130
world of the matrix it's going to get

00:07:39,539 --> 00:07:43,020
bigger and bigger and bigger and of

00:07:41,130 --> 00:07:46,680
course what else are you going to ask

00:07:43,020 --> 00:07:49,259
about this guy you might have a job

00:07:46,680 --> 00:07:51,330
table what salary does make was kind of

00:07:49,259 --> 00:07:52,710
south in the title is he have what color

00:07:51,330 --> 00:07:55,320
was his hair or do you want to break

00:07:52,710 --> 00:07:56,729
that out into hair color you and leave a

00:07:55,320 --> 00:07:57,900
table separated for just color in

00:07:56,729 --> 00:08:00,449
general so you can reference it again

00:07:57,900 --> 00:08:02,039
all sudden again tables start growing

00:08:00,449 --> 00:08:04,080
and growing and growing and you're going

00:08:02,039 --> 00:08:08,280
to need a date of mind calm by all this

00:08:04,080 --> 00:08:11,099
data together again I color maybe he has

00:08:08,280 --> 00:08:13,169
shapes of eyes if might have eyes for

00:08:11,099 --> 00:08:14,550
cats and if species is he who knows what

00:08:13,169 --> 00:08:16,949
kind of data you guys start tying things

00:08:14,550 --> 00:08:17,909
together anything with hair and

00:08:16,949 --> 00:08:20,250
therefore know how you're going to grow

00:08:17,909 --> 00:08:22,590
so all of a sudden you've built

00:08:20,250 --> 00:08:24,990
something out and you have this huge

00:08:22,590 --> 00:08:28,080
query just to find out a couple

00:08:24,990 --> 00:08:29,699
informations about this guy and you're

00:08:28,080 --> 00:08:31,080
like okay great and it's pretty quick

00:08:29,699 --> 00:08:32,789
it's just one course just one guy you

00:08:31,080 --> 00:08:35,669
have it on human ID so it's pretty quick

00:08:32,789 --> 00:08:37,409
to finance its pretty easy but if you

00:08:35,669 --> 00:08:40,500
start data mining this running this

00:08:37,409 --> 00:08:41,789
query for all kinds of people it's going

00:08:40,500 --> 00:08:44,279
to take a while because you join and

00:08:41,789 --> 00:08:46,200
scan on the whole world here now in the

00:08:44,279 --> 00:08:48,000
relevance that query just pulled up a

00:08:46,200 --> 00:08:52,100
simple general information about the guy

00:08:48,000 --> 00:08:56,270
in these structures of the world here

00:08:52,100 --> 00:08:58,800
but in this case here we have one that

00:08:56,270 --> 00:09:01,250
you're scanning for a lots of lots of

00:08:58,800 --> 00:09:03,930
data so now we're going to say okay well

00:09:01,250 --> 00:09:05,940
what about you want to scan for a bigger

00:09:03,930 --> 00:09:08,220
range and everybody has the name of

00:09:05,940 --> 00:09:09,930
starts with MC so also now you're

00:09:08,220 --> 00:09:13,200
digging across a full scan that wasn't

00:09:09,930 --> 00:09:14,760
an index before annualize it okay was

00:09:13,200 --> 00:09:18,240
pretty quickly pull a bunch of keys and

00:09:14,760 --> 00:09:20,520
data and you're pulling by gender but so

00:09:18,240 --> 00:09:23,399
this is an example of 1400 like okay

00:09:20,520 --> 00:09:25,770
that's a simple start but my point here

00:09:23,399 --> 00:09:28,560
is when we're going here is how many

00:09:25,770 --> 00:09:31,709
knows what a snowflake table is just no

00:09:28,560 --> 00:09:33,820
flight schema you're having tables all

00:09:31,709 --> 00:09:36,280
over the place and it builds

00:09:33,820 --> 00:09:38,800
replication of a snowflake now that's

00:09:36,280 --> 00:09:41,020
always not what you want to do in some

00:09:38,800 --> 00:09:42,850
time in the sense of you want to build

00:09:41,020 --> 00:09:44,110
that to start if you normalize in your

00:09:42,850 --> 00:09:46,000
data and best you can but sometimes

00:09:44,110 --> 00:09:48,460
that's not always the best practice of

00:09:46,000 --> 00:09:51,580
you haven't speedy data in the sense of

00:09:48,460 --> 00:09:53,680
you need to get data faster might as

00:09:51,580 --> 00:09:56,350
well for example when it was there was

00:09:53,680 --> 00:09:58,420
companies that went in head took longer

00:09:56,350 --> 00:10:01,030
than three seconds to get a result they

00:09:58,420 --> 00:10:03,460
basically consider that an outage so

00:10:01,030 --> 00:10:05,170
sometimes snowflakes worked fantastic

00:10:03,460 --> 00:10:08,410
sometimes you want to consolidate data

00:10:05,170 --> 00:10:09,730
make sure it's faster a lot of that is

00:10:08,410 --> 00:10:10,810
usually called data warehousing we

00:10:09,730 --> 00:10:13,780
started to date or what else the data

00:10:10,810 --> 00:10:15,190
and consolidate josh is actually given

00:10:13,780 --> 00:10:16,780
the same talk tomorrow about the

00:10:15,190 --> 00:10:21,010
warehousing in this exact same location

00:10:16,780 --> 00:10:22,450
same time take place tomorrow a couple

00:10:21,010 --> 00:10:23,770
concept of the data warehouse though is

00:10:22,450 --> 00:10:26,410
the large statement the committee data

00:10:23,770 --> 00:10:28,270
in wide range there's a different

00:10:26,410 --> 00:10:31,330
theories on how to and the best way to

00:10:28,270 --> 00:10:32,920
use a deer warehouse bill Aman's and

00:10:31,330 --> 00:10:34,030
Ralph Gimbels both have different realms

00:10:32,920 --> 00:10:36,340
of it if you haven't seen either one

00:10:34,030 --> 00:10:40,990
ralph kimball for example as a humongous

00:10:36,340 --> 00:10:42,820
stack of books that cover this topic I'm

00:10:40,990 --> 00:10:47,140
more on the ralphs side of the world

00:10:42,820 --> 00:10:48,820
just you know the summary table concept

00:10:47,140 --> 00:10:50,770
within that is basically the same as a

00:10:48,820 --> 00:10:52,450
materialized view is the same thing

00:10:50,770 --> 00:10:55,210
that's the term to kind of go in and out

00:10:52,450 --> 00:10:56,500
at the same but we're going to type to

00:10:55,210 --> 00:10:58,660
collect some of this data to make it

00:10:56,500 --> 00:10:59,740
easier to use and if you're going to use

00:10:58,660 --> 00:11:01,240
this going forward we're going to stuff

00:10:59,740 --> 00:11:03,550
through of how you can use this in ETL

00:11:01,240 --> 00:11:05,410
processes to have this in your system so

00:11:03,550 --> 00:11:07,030
it a great data and make it easier to do

00:11:05,410 --> 00:11:11,230
but the same time asking the question of

00:11:07,030 --> 00:11:12,940
do you need this so let's say we're

00:11:11,230 --> 00:11:15,730
going to build a table called the matrix

00:11:12,940 --> 00:11:18,460
and it has these are the top queries

00:11:15,730 --> 00:11:21,520
that the CEO and the marketing teams ask

00:11:18,460 --> 00:11:23,800
for out of this series now when we build

00:11:21,520 --> 00:11:26,980
a matrix in our summary tables in this

00:11:23,800 --> 00:11:29,830
case this does not have to be the only

00:11:26,980 --> 00:11:32,380
one just because you build a data

00:11:29,830 --> 00:11:35,110
warehouse or summary table that doesn't

00:11:32,380 --> 00:11:36,670
have to be one summary table you have to

00:11:35,110 --> 00:11:37,870
summarize the data that you're asking

00:11:36,670 --> 00:11:39,670
you're getting the most questions asked

00:11:37,870 --> 00:11:41,650
and white to speed the process along in

00:11:39,670 --> 00:11:42,420
this case these are the questions we are

00:11:41,650 --> 00:11:44,730
asked a lot

00:11:42,420 --> 00:11:47,160
now later on I'm coming in and there's

00:11:44,730 --> 00:11:48,930
15 more questions it might not be the

00:11:47,160 --> 00:11:50,850
best case to add 15 more calm so this

00:11:48,930 --> 00:11:52,200
but take advantage of and do your

00:11:50,850 --> 00:11:54,420
research ahead of time to realize what

00:11:52,200 --> 00:11:58,139
questions you need to be asking and what

00:11:54,420 --> 00:12:00,570
can you consolidate to benefit from and

00:11:58,139 --> 00:12:05,279
how many here know what an ETL processes

00:12:00,570 --> 00:12:07,699
so example okay good so we're going to

00:12:05,279 --> 00:12:11,940
start with the extract and load process

00:12:07,699 --> 00:12:13,440
now I didn't transform anything that's

00:12:11,940 --> 00:12:16,310
why I can put tea in the in the middle

00:12:13,440 --> 00:12:20,790
of that but this is a simple example of

00:12:16,310 --> 00:12:23,519
a stored procedure and this is where I'm

00:12:20,790 --> 00:12:26,550
extracting the data from the quarry

00:12:23,519 --> 00:12:29,459
above and I'm going to replace it into

00:12:26,550 --> 00:12:32,040
the matrix for example this is a simple

00:12:29,459 --> 00:12:34,889
concept of I find out the last time that

00:12:32,040 --> 00:12:36,240
they ran for the matrix so the max date

00:12:34,889 --> 00:12:38,339
I have in there and I'm replacing data

00:12:36,240 --> 00:12:40,620
in there and also now I'm starting to

00:12:38,339 --> 00:12:41,850
gather data for the question is now is

00:12:40,620 --> 00:12:43,740
like okay well hell and I'm loading data

00:12:41,850 --> 00:12:46,019
but how often and how do you did sir

00:12:43,740 --> 00:12:47,790
just to run you're not going to cook

00:12:46,019 --> 00:12:48,899
this all time is it you can run into the

00:12:47,790 --> 00:12:51,800
shell script you know what the perl

00:12:48,899 --> 00:12:55,050
script how do you want to do it happen

00:12:51,800 --> 00:12:56,490
we have events inside minus well which

00:12:55,050 --> 00:12:58,290
is basically the concept being if you

00:12:56,490 --> 00:13:01,680
can run it like an internal krong

00:12:58,290 --> 00:13:03,480
process for lack of a better term so in

00:13:01,680 --> 00:13:06,390
this case we're building the matrix

00:13:03,480 --> 00:13:08,250
every 10 minutes and you can on schedule

00:13:06,390 --> 00:13:10,040
run every 10 minutes and comment it for

00:13:08,250 --> 00:13:12,630
future use so it's a good thing to do in

00:13:10,040 --> 00:13:16,019
this case we're calling bilder matrix

00:13:12,630 --> 00:13:17,970
which is the procedure i just built you

00:13:16,019 --> 00:13:19,290
can start and stop this is to check if

00:13:17,970 --> 00:13:21,660
the rates fin run in your system by

00:13:19,290 --> 00:13:23,480
showing the variables like events it

00:13:21,660 --> 00:13:27,839
under smart ass and go pull the right up

00:13:23,480 --> 00:13:32,250
and you can see it's ryan just a brief

00:13:27,839 --> 00:13:33,930
example so now that we have all this

00:13:32,250 --> 00:13:35,449
data run in our system with the vents

00:13:33,930 --> 00:13:39,269
are starting to build and gather data

00:13:35,449 --> 00:13:42,029
like okay well i can look at this and I

00:13:39,269 --> 00:13:45,389
gathered from no cash antenna complicate

00:13:42,029 --> 00:13:50,499
data to find out who has you know sort

00:13:45,389 --> 00:13:52,959
an x value of hair color and states and

00:13:50,499 --> 00:13:54,459
gender starting to find a good little

00:13:52,959 --> 00:13:56,919
data mine to see if there's any trends

00:13:54,459 --> 00:13:58,329
and I'm matrix realm of my building too

00:13:56,919 --> 00:14:01,989
many people in one spot versus together

00:13:58,329 --> 00:14:04,929
for example now I realize that this took

00:14:01,989 --> 00:14:09,819
five seconds that would basically be an

00:14:04,929 --> 00:14:11,439
outage in some calm realms so in this

00:14:09,819 --> 00:14:14,109
one we're like okay well if I pull that

00:14:11,439 --> 00:14:16,809
data from the matrix side of stuff it

00:14:14,109 --> 00:14:20,409
only put point 6 6 X ok it's a lot

00:14:16,809 --> 00:14:21,519
faster that's great but something Rose a

00:14:20,409 --> 00:14:23,229
little bit different in this case I'm

00:14:21,519 --> 00:14:26,949
shining a little bit different is it

00:14:23,229 --> 00:14:30,219
actually the best thing for me so I

00:14:26,949 --> 00:14:32,889
joined it again moving my data from the

00:14:30,219 --> 00:14:35,199
where and all sudden what took five

00:14:32,889 --> 00:14:38,589
analysis only 14 seconds flexi faster

00:14:35,199 --> 00:14:42,069
than the first one the second one so in

00:14:38,589 --> 00:14:43,899
this case is what I actually wanted the

00:14:42,069 --> 00:14:46,899
best way to prime it dig in what I was

00:14:43,899 --> 00:14:48,159
actually after it's more of just because

00:14:46,899 --> 00:14:52,269
you read the query the first time one

00:14:48,159 --> 00:14:53,379
way tear it apart and tested a different

00:14:52,269 --> 00:14:55,989
way to make sure you benchmark in your

00:14:53,379 --> 00:14:57,789
processes because there's a lot of times

00:14:55,989 --> 00:14:59,979
people will put some of this data and

00:14:57,789 --> 00:15:01,239
the we're here upon the joint and that's

00:14:59,979 --> 00:15:02,859
not always going to actually lock it

00:15:01,239 --> 00:15:04,359
down of course in this example they've

00:15:02,859 --> 00:15:07,919
ever left join so when the block number

00:15:04,359 --> 00:15:07,919
well anyway which is why it took longer

00:15:08,429 --> 00:15:13,599
there's also the process and sometimes

00:15:10,720 --> 00:15:15,279
if you don't want to build a new table

00:15:13,599 --> 00:15:17,559
for everything but somebody just want to

00:15:15,279 --> 00:15:19,379
build a view which is a view into it

00:15:17,559 --> 00:15:21,489
table it's kind of like a summary table

00:15:19,379 --> 00:15:24,729
so in this case we're going to create a

00:15:21,489 --> 00:15:26,169
view matrix matrix view and we're just

00:15:24,729 --> 00:15:28,239
going to select the statement of it and

00:15:26,169 --> 00:15:30,839
you drop it into here pretty same data

00:15:28,239 --> 00:15:32,979
just a different angle to pull it out of

00:15:30,839 --> 00:15:36,099
this isn't always going to be as fresh

00:15:32,979 --> 00:15:38,949
of data though I'm going to execute this

00:15:36,099 --> 00:15:43,329
and run this little bit more often but

00:15:38,949 --> 00:15:47,229
you can populate the table and continue

00:15:43,329 --> 00:15:48,489
on this I mean it still work this is the

00:15:47,229 --> 00:15:49,629
case here where have another the same

00:15:48,489 --> 00:15:52,319
procedure I believe justice should give

00:15:49,629 --> 00:15:52,319
you a reference point

00:15:53,329 --> 00:15:58,670
so now again we have our events and

00:15:57,290 --> 00:15:59,959
we're going to go through and build the

00:15:58,670 --> 00:16:01,639
matrix every two minutes and we're going

00:15:59,959 --> 00:16:03,350
to see this is how it actually look into

00:16:01,639 --> 00:16:05,779
the show events to see more data in the

00:16:03,350 --> 00:16:07,220
events hoops now if you want to dig in a

00:16:05,779 --> 00:16:09,499
little further it's even more data about

00:16:07,220 --> 00:16:13,220
events you can go to information schema

00:16:09,499 --> 00:16:14,689
and you'll get a full set of a lot more

00:16:13,220 --> 00:16:16,699
detailed information about the process

00:16:14,689 --> 00:16:17,899
of events and whatnot how many people

00:16:16,699 --> 00:16:20,959
ever ran events or knew they even

00:16:17,899 --> 00:16:22,309
existed all right good good because

00:16:20,959 --> 00:16:26,269
sometimes people never knew the avett

00:16:22,309 --> 00:16:28,339
ran okay there's an something else that

00:16:26,269 --> 00:16:29,899
people run and often rope can use our

00:16:28,339 --> 00:16:31,160
triggers I didn't build a trigger

00:16:29,899 --> 00:16:34,069
example out of this because I never ran

00:16:31,160 --> 00:16:35,329
them in this scope but because of the

00:16:34,069 --> 00:16:36,949
scope were building and date of might a

00:16:35,329 --> 00:16:38,269
little bit differently but this is a

00:16:36,949 --> 00:16:39,439
simple example of how we can build a

00:16:38,269 --> 00:16:42,379
trigger for those who have never built a

00:16:39,439 --> 00:16:44,540
trigger inside mysql if you wanted to

00:16:42,379 --> 00:16:46,100
pull one data if you view tune your

00:16:44,540 --> 00:16:47,509
tables a little bit differently to every

00:16:46,100 --> 00:16:48,290
time something changes I'd color for

00:16:47,509 --> 00:16:50,089
example and you want to update

00:16:48,290 --> 00:16:54,019
everybody's you change it from lower

00:16:50,089 --> 00:16:55,369
case from blue to violet or something

00:16:54,019 --> 00:16:56,869
and you want to trigger it to change

00:16:55,369 --> 00:17:03,139
data you could go through and set data

00:16:56,869 --> 00:17:05,240
like that so transform data extract etl

00:17:03,139 --> 00:17:08,809
is the exact attract transform and load

00:17:05,240 --> 00:17:10,730
so you need to realize what you want to

00:17:08,809 --> 00:17:13,069
do and how you want to do it there's

00:17:10,730 --> 00:17:14,539
realms of sometimes when normalized a

00:17:13,069 --> 00:17:17,600
little bit differently sometimes you

00:17:14,539 --> 00:17:20,209
want to process this data or valuate

00:17:17,600 --> 00:17:22,850
this data third-party tools there's a

00:17:20,209 --> 00:17:25,909
lot in our case we did a lot of with

00:17:22,850 --> 00:17:28,669
postgres we'd pull data out verify that

00:17:25,909 --> 00:17:29,899
the user data via third-party tools and

00:17:28,669 --> 00:17:31,669
transform that data back when I put it

00:17:29,899 --> 00:17:33,740
in because we verified who was who was

00:17:31,669 --> 00:17:35,960
validated who wasn't who put in false

00:17:33,740 --> 00:17:37,519
information who didn't falsin you know

00:17:35,960 --> 00:17:40,130
valid email versa didn't value emails

00:17:37,519 --> 00:17:42,230
stuff like that you can define all your

00:17:40,130 --> 00:17:44,269
data and transform to your data and

00:17:42,230 --> 00:17:47,149
after the fact and put that in summary

00:17:44,269 --> 00:17:49,730
tables to confirm knowledgebase what you

00:17:47,149 --> 00:17:51,200
want to do again this goes back to

00:17:49,730 --> 00:17:53,659
knowing your data and how do you want to

00:17:51,200 --> 00:17:59,840
proceed going forward an example there

00:17:53,659 --> 00:18:01,789
was the script process so on top of that

00:17:59,840 --> 00:18:03,350
you have all this data but then your

00:18:01,789 --> 00:18:05,610
CEOs come in and the marketing teams

00:18:03,350 --> 00:18:08,130
come in and they want to know more about

00:18:05,610 --> 00:18:10,260
orion i need to build data they want to

00:18:08,130 --> 00:18:13,080
know the number so they can process and

00:18:10,260 --> 00:18:15,660
good further with this so in this case

00:18:13,080 --> 00:18:19,080
you pick a little between 8-9 85 and

00:18:15,660 --> 00:18:22,590
1998 we pull out just based on gender to

00:18:19,080 --> 00:18:24,660
know who's who do we have out there and

00:18:22,590 --> 00:18:26,850
I'm also pulling this based on views

00:18:24,660 --> 00:18:29,690
notice I'm tying in those pod structures

00:18:26,850 --> 00:18:32,700
and the structure itself and the pause

00:18:29,690 --> 00:18:34,230
now I'm using the matrix in one kills

00:18:32,700 --> 00:18:37,440
scope because I can gather a lot of data

00:18:34,230 --> 00:18:39,419
and then I just one day's toss in a

00:18:37,440 --> 00:18:41,549
couple of the tables to quickly rectify

00:18:39,419 --> 00:18:46,799
some solutions there this will know ever

00:18:41,549 --> 00:18:48,840
took two seconds now maybe I want to

00:18:46,799 --> 00:18:51,809
build out a structure table you notice

00:18:48,840 --> 00:18:53,280
we have our data here we're going to

00:18:51,809 --> 00:18:55,260
start with a lowest common denominator

00:18:53,280 --> 00:18:57,360
because we're going to build processes

00:18:55,260 --> 00:19:00,210
in different tables to smaller summary

00:18:57,360 --> 00:19:01,440
tables so we're going to start a lowest

00:19:00,210 --> 00:19:05,820
common denominator which we know that's

00:19:01,440 --> 00:19:09,299
one is now if we wanted to go just last

00:19:05,820 --> 00:19:11,700
24 hours for example we could have a

00:19:09,299 --> 00:19:14,370
same table and report into here just

00:19:11,700 --> 00:19:15,960
last 24 hours notice by placing

00:19:14,370 --> 00:19:17,490
everything out and we could build

00:19:15,960 --> 00:19:19,260
structures and more events to just keep

00:19:17,490 --> 00:19:21,630
that as just 24 hour tables would

00:19:19,260 --> 00:19:23,820
naturally be very small tables depending

00:19:21,630 --> 00:19:25,530
on the scope of everything and you can

00:19:23,820 --> 00:19:28,620
query this a report you have data very

00:19:25,530 --> 00:19:32,010
fast for your CEOs whatnot how many have

00:19:28,620 --> 00:19:36,450
had CEOs that s four-year-long reports

00:19:32,010 --> 00:19:38,669
during demos during peak times when the

00:19:36,450 --> 00:19:40,049
database is altered in somewhere another

00:19:38,669 --> 00:19:42,179
because the slave went down or something

00:19:40,049 --> 00:19:45,900
and then what you'd normally query off

00:19:42,179 --> 00:19:48,000
of here you have a ceo's concept of a

00:19:45,900 --> 00:19:49,860
multi-million dollar deal if this one

00:19:48,000 --> 00:19:52,890
report runs you know like no that's not

00:19:49,860 --> 00:19:53,940
really true but I've been in that

00:19:52,890 --> 00:19:56,220
situation where they think the whole

00:19:53,940 --> 00:19:57,900
calm realms going to not buy their

00:19:56,220 --> 00:20:00,450
system if they don't get this report

00:19:57,900 --> 00:20:03,030
done building the structures out so you

00:20:00,450 --> 00:20:04,320
can query faster and easier helps us it

00:20:03,030 --> 00:20:06,630
gives you summary tables to gather data

00:20:04,320 --> 00:20:08,669
quickly is the concept behind them now

00:20:06,630 --> 00:20:11,169
this is just 24 hours so

00:20:08,669 --> 00:20:13,390
we can continue on the ok well now risk

00:20:11,169 --> 00:20:15,610
when we want to 24 hour one and we're

00:20:13,390 --> 00:20:17,110
going to build it per day 12 so which is

00:20:15,610 --> 00:20:19,539
basically the last 24 hours but this is

00:20:17,110 --> 00:20:21,730
we're going to keep so you have broken

00:20:19,539 --> 00:20:23,260
down per day so we're going to get rid

00:20:21,730 --> 00:20:25,570
of this data this is just every day

00:20:23,260 --> 00:20:27,370
you'll given you roll with new data and

00:20:25,570 --> 00:20:29,549
you'll have it easily transformed today

00:20:27,370 --> 00:20:35,110
to use it now you can take this data as

00:20:29,549 --> 00:20:37,830
you go forward and both per month as you

00:20:35,110 --> 00:20:41,740
see structure per month selecting from

00:20:37,830 --> 00:20:42,909
per day and I've been did two months is

00:20:41,740 --> 00:20:45,880
to make sure we can easily pull it up

00:20:42,909 --> 00:20:48,159
and runs every month or so every couple

00:20:45,880 --> 00:20:51,159
weeks which is on my offense next litter

00:20:48,159 --> 00:20:53,169
on so the point being is that you can

00:20:51,159 --> 00:20:56,049
build off your your tables and your data

00:20:53,169 --> 00:20:58,059
and keep summarized in that down and if

00:20:56,049 --> 00:21:00,490
you wanted to go back and because you

00:20:58,059 --> 00:21:01,990
change something in your initial table

00:21:00,490 --> 00:21:04,690
your lowest coming out and they

00:21:01,990 --> 00:21:06,640
denominator table you could simply run

00:21:04,690 --> 00:21:08,820
these procedures again and they've just

00:21:06,640 --> 00:21:11,200
built up on each other again so your

00:21:08,820 --> 00:21:13,570
refix your data have it roll into your

00:21:11,200 --> 00:21:14,980
24 hours or your day one run it again

00:21:13,570 --> 00:21:18,159
for the same timeframe for just your

00:21:14,980 --> 00:21:19,929
days your month data and you easily can

00:21:18,159 --> 00:21:23,100
compact all your data in different

00:21:19,929 --> 00:21:23,100
summary tables good

00:21:29,899 --> 00:21:33,779
when you build it when you build it it's

00:21:32,309 --> 00:21:35,250
going to take a little bit but

00:21:33,779 --> 00:21:37,110
everything everything after that is

00:21:35,250 --> 00:21:39,570
going to be KS some of those days gonna

00:21:37,110 --> 00:21:41,340
be cached and that then you because I'm

00:21:39,570 --> 00:21:43,049
putting no cash in place select

00:21:41,340 --> 00:21:45,950
statements just to force force it to be

00:21:43,049 --> 00:21:48,390
slower as ass lowest common denominator

00:21:45,950 --> 00:21:49,440
but beyond that then you can clear this

00:21:48,390 --> 00:21:51,299
data really quick because you're not

00:21:49,440 --> 00:21:53,100
going to go full digging off the last

00:21:51,299 --> 00:21:58,799
two months for example is a lot faster

00:21:53,100 --> 00:22:02,250
here exactly exactly to count everybody

00:21:58,799 --> 00:22:04,799
it's all right here really quick so then

00:22:02,250 --> 00:22:06,750
for example we did this per month now

00:22:04,799 --> 00:22:09,299
let's do it for a year so now for

00:22:06,750 --> 00:22:10,860
exactly with these are tied to the

00:22:09,299 --> 00:22:12,809
question with the CEO for example or

00:22:10,860 --> 00:22:14,460
marketing when I might be asking these

00:22:12,809 --> 00:22:16,919
are questions based off we need to know

00:22:14,460 --> 00:22:20,730
amounts genders and date online that a

00:22:16,919 --> 00:22:22,919
very simple a first example I gave in

00:22:20,730 --> 00:22:25,200
this in this scope again we're corian

00:22:22,919 --> 00:22:26,940
off our per month table to build the

00:22:25,200 --> 00:22:29,639
year data and we might easily pull off

00:22:26,940 --> 00:22:31,470
and query data off multiple years in our

00:22:29,639 --> 00:22:34,799
corporation to give these numbers we can

00:22:31,470 --> 00:22:37,679
tell my our CEOs and whoever or not

00:22:34,799 --> 00:22:40,200
breakouts of genders and ages who we had

00:22:37,679 --> 00:22:42,179
in our system per year very fast because

00:22:40,200 --> 00:22:45,029
we've calculated in solid this data over

00:22:42,179 --> 00:22:46,559
time you went back to the human table to

00:22:45,029 --> 00:22:48,570
break all that down in group by years

00:22:46,559 --> 00:22:51,659
and you're trying to do insert data into

00:22:48,570 --> 00:22:53,399
this in the same table or replicate data

00:22:51,659 --> 00:22:55,130
and you're selecting big locks off of it

00:22:53,399 --> 00:22:57,539
you're going to slow some systems out

00:22:55,130 --> 00:22:58,830
this way you can do a small quickly and

00:22:57,539 --> 00:23:02,419
you have full sets of data you can

00:22:58,830 --> 00:23:02,419
easily use for your purposes later

00:23:05,950 --> 00:23:15,170
yeah just keep going breaks it all up so

00:23:12,470 --> 00:23:16,730
in this scope here's the basic ways a

00:23:15,170 --> 00:23:19,640
lot of the stuff was built for example

00:23:16,730 --> 00:23:22,280
we have our reporting per day it goes

00:23:19,640 --> 00:23:27,890
back and report replace into this table

00:23:22,280 --> 00:23:30,950
simple event to build it per day again

00:23:27,890 --> 00:23:32,780
these are the same scope per month I go

00:23:30,950 --> 00:23:35,060
through and build it every two months

00:23:32,780 --> 00:23:38,330
I'm going to go back and grab that data

00:23:35,060 --> 00:23:40,400
again the concept being is that I go

00:23:38,330 --> 00:23:43,280
back over time to make sure of any

00:23:40,400 --> 00:23:45,050
changes if somebody goes soon that core

00:23:43,280 --> 00:23:46,610
data sets and has changed data I'm

00:23:45,050 --> 00:23:47,900
always capturing the newest data to make

00:23:46,610 --> 00:23:51,980
sure it's fresh and up-to-date when I'm

00:23:47,900 --> 00:23:53,740
querying data / / date ranges because

00:23:51,980 --> 00:23:56,240
there's time if you did something where

00:23:53,740 --> 00:23:58,160
some day you did it for the last week

00:23:56,240 --> 00:24:00,290
and then every Sunday just for last week

00:23:58,160 --> 00:24:02,480
what if somebody changed data that was a

00:24:00,290 --> 00:24:04,580
little bit earlier and there was a lot

00:24:02,480 --> 00:24:06,020
earlier than yet step latinos you can

00:24:04,580 --> 00:24:08,450
actually process data on different ways

00:24:06,020 --> 00:24:10,370
but for this concept it's if you build

00:24:08,450 --> 00:24:11,810
out your date update stamps and how you

00:24:10,370 --> 00:24:13,580
query the data additionally you should

00:24:11,810 --> 00:24:16,880
always have the scope of through fresh

00:24:13,580 --> 00:24:20,030
data which is part of the initial of

00:24:16,880 --> 00:24:22,850
some of their initial Dave queries of

00:24:20,030 --> 00:24:25,700
how it gathered who how I knew what was

00:24:22,850 --> 00:24:27,770
the most update data there's a procedure

00:24:25,700 --> 00:24:33,080
that has the data one of the reference

00:24:27,770 --> 00:24:36,200
it front examples later um so again this

00:24:33,080 --> 00:24:37,700
is a simple concept per year so some of

00:24:36,200 --> 00:24:39,680
this all the scope here is basically

00:24:37,700 --> 00:24:43,400
built on a lot of stuff we actually did

00:24:39,680 --> 00:24:44,930
in the company to work for we again this

00:24:43,400 --> 00:24:46,820
we didn't have the matrix tables but it

00:24:44,930 --> 00:24:49,550
was a marketing type scope dig use your

00:24:46,820 --> 00:24:53,360
data and concepts like this was made it

00:24:49,550 --> 00:24:55,700
really easy to go through tables that we

00:24:53,360 --> 00:24:58,220
felt if we filled the maximum integer

00:24:55,700 --> 00:25:00,800
for example in the auto increment which

00:24:58,220 --> 00:25:02,660
is a billion billions of rows we had

00:25:00,800 --> 00:25:05,990
over four billion rows easily in this

00:25:02,660 --> 00:25:09,860
one table of just user data which is my

00:25:05,990 --> 00:25:12,620
initials example front we captured stuff

00:25:09,860 --> 00:25:14,120
for everybody and there was numerous

00:25:12,620 --> 00:25:15,320
different ways of these reports were

00:25:14,120 --> 00:25:17,150
built out to

00:25:15,320 --> 00:25:19,160
summarize all this user data it could

00:25:17,150 --> 00:25:22,910
have been everything from clothing type

00:25:19,160 --> 00:25:23,930
2 to gender to the smoker if they who

00:25:22,910 --> 00:25:26,750
knows what it was all this marketing

00:25:23,930 --> 00:25:28,250
type data but you can call bed this down

00:25:26,750 --> 00:25:30,650
and summarize it in different ways you

00:25:28,250 --> 00:25:32,900
can ask the right questions to easily

00:25:30,650 --> 00:25:36,740
find out the best and fastest answer for

00:25:32,900 --> 00:25:38,330
you again this is a theoretical quick

00:25:36,740 --> 00:25:43,130
example of this but this give you a

00:25:38,330 --> 00:25:44,300
scope no like I said before I want to

00:25:43,130 --> 00:25:46,120
make sure you guys can call it good to

00:25:44,300 --> 00:25:50,120
God because you've been here all day so

00:25:46,120 --> 00:25:52,420
the quick example here is if you ask the

00:25:50,120 --> 00:25:56,510
right questions and your other at DBA is

00:25:52,420 --> 00:26:00,140
who you want to be you want to be the

00:25:56,510 --> 00:26:01,880
matrix neo or John Anderson sighs who do

00:26:00,140 --> 00:26:04,340
you want your CEO to think you are is a

00:26:01,880 --> 00:26:06,050
better example in this case but you can

00:26:04,340 --> 00:26:07,160
step in and you are the one to solve the

00:26:06,050 --> 00:26:08,750
problems you are the one to have the

00:26:07,160 --> 00:26:09,650
best answers because it's very quick to

00:26:08,750 --> 00:26:13,640
find those answers because you've done

00:26:09,650 --> 00:26:15,380
to work in the past if you want

00:26:13,640 --> 00:26:16,670
resources for this type of and this type

00:26:15,380 --> 00:26:19,850
of scopes are actually digging a lot

00:26:16,670 --> 00:26:21,140
deeper beyond talk tomorrow this is

00:26:19,850 --> 00:26:22,760
Kimball's book that talked about he's a

00:26:21,140 --> 00:26:25,220
whole series of books this

00:26:22,760 --> 00:26:27,200
high-performance book we have pentaho

00:26:25,220 --> 00:26:29,240
and different solutions here in all of

00:26:27,200 --> 00:26:32,450
length to go dig dig in for more

00:26:29,240 --> 00:26:33,470
information and that's my quick example

00:26:32,450 --> 00:26:37,130
because I knew you guys wanted to get

00:26:33,470 --> 00:26:40,280
down here tonight so any questions

00:26:37,130 --> 00:26:41,180
it was a theoretical world example but I

00:26:40,280 --> 00:26:46,730
want to take a little different approach

00:26:41,180 --> 00:26:48,830
so anything else I can back up and shoot

00:26:46,730 --> 00:26:51,010
tables what not to do you want any want

00:26:48,830 --> 00:26:51,010
to see

00:27:00,060 --> 00:27:03,450
the user I mean you can do views I'm not

00:27:02,250 --> 00:27:05,460
saying you can't do views you can still

00:27:03,450 --> 00:27:07,020
do a views in an ETL processes to

00:27:05,460 --> 00:27:08,400
populate them I'm gonna say this because

00:27:07,020 --> 00:27:10,620
you build a view once doesn't mean that

00:27:08,400 --> 00:27:13,080
you're done with it because you want to

00:27:10,620 --> 00:27:16,530
build and process some of this data for

00:27:13,080 --> 00:27:19,260
example my the 24 hour table I built

00:27:16,530 --> 00:27:22,800
versus the day table was also in it was

00:27:19,260 --> 00:27:24,870
also a memory engine which means if the

00:27:22,800 --> 00:27:26,010
date if the table did race crash you

00:27:24,870 --> 00:27:27,810
didn't you'd lose all that information

00:27:26,010 --> 00:27:28,830
you just build it back up again but you

00:27:27,810 --> 00:27:30,810
were fine with added features are built

00:27:28,830 --> 00:27:31,680
against just 24 hours the day one was an

00:27:30,810 --> 00:27:33,630
engine because you're going to store

00:27:31,680 --> 00:27:35,760
that to the disc itself different types

00:27:33,630 --> 00:27:39,150
of engines you can pull data faster and

00:27:35,760 --> 00:27:42,390
use this data a lot more easier in the

00:27:39,150 --> 00:27:44,100
views case it was a set build we did

00:27:42,390 --> 00:27:45,960
stuff like Korea so only that one two

00:27:44,100 --> 00:27:48,060
sets of data and you could build a view

00:27:45,960 --> 00:27:51,120
if you want it to in this example it

00:27:48,060 --> 00:27:52,590
which is actually slower then using the

00:27:51,120 --> 00:27:54,090
database engine and the memory engine in

00:27:52,590 --> 00:27:55,890
that example I felt was why I show the

00:27:54,090 --> 00:27:57,930
differences just because to ask the

00:27:55,890 --> 00:28:00,660
question to find out is a faster usually

00:27:57,930 --> 00:28:02,070
region not for them that is is just a

00:28:00,660 --> 00:28:03,510
matter of to ask the right questions

00:28:02,070 --> 00:28:06,330
that dig in to really find out if it's

00:28:03,510 --> 00:28:10,310
which one did use is it was the concept

00:28:06,330 --> 00:28:10,310
there you know

00:28:14,590 --> 00:28:18,620
it depends on what you want that was

00:28:16,910 --> 00:28:19,940
it's a case of what you need to do a lot

00:28:18,620 --> 00:28:21,980
of times if you're just summarizing us

00:28:19,940 --> 00:28:23,570
extracting you're loading data if you're

00:28:21,980 --> 00:28:26,300
going if you need to transform data in

00:28:23,570 --> 00:28:30,580
different ways like let's say um give a

00:28:26,300 --> 00:28:32,510
website and you're capturing gender and

00:28:30,580 --> 00:28:34,610
you build it and you have a whole team

00:28:32,510 --> 00:28:36,470
of developers that let people input data

00:28:34,610 --> 00:28:38,360
so you might have female you might have

00:28:36,470 --> 00:28:40,250
mail you might have capital m you might

00:28:38,360 --> 00:28:42,080
have capital F might have lower case ham

00:28:40,250 --> 00:28:43,610
and lower case out you have a whole set

00:28:42,080 --> 00:28:46,250
of data that you need to actually know

00:28:43,610 --> 00:28:47,780
which is just mail it female so in that

00:28:46,250 --> 00:28:49,610
scope it might feel like okay well now

00:28:47,780 --> 00:28:53,660
I'm going to slug get out of this sets

00:28:49,610 --> 00:28:55,280
I'm going to look it over and compel me

00:28:53,660 --> 00:28:57,290
I'm a case statement to find all these

00:28:55,280 --> 00:28:59,720
different cases and just equals mrf

00:28:57,290 --> 00:29:01,910
capital what I wanted to do and you set

00:28:59,720 --> 00:29:03,800
that into your database and now you've

00:29:01,910 --> 00:29:05,990
actually gathered the scope of data you

00:29:03,800 --> 00:29:07,340
summarized it in to normalize didn't

00:29:05,990 --> 00:29:09,470
scope but you actually know what it is

00:29:07,340 --> 00:29:11,240
and you've transformed the actual data

00:29:09,470 --> 00:29:16,310
into what you're going to actually use

00:29:11,240 --> 00:29:18,200
it better later that would do a third

00:29:16,310 --> 00:29:19,700
party that sets a third-party example

00:29:18,200 --> 00:29:21,170
you might have a perl script for example

00:29:19,700 --> 00:29:24,730
or python script or something that

00:29:21,170 --> 00:29:26,990
Corey's a bunch of tables and then in

00:29:24,730 --> 00:29:28,750
councilman finds it and inserts again we

00:29:26,990 --> 00:29:30,980
did a lot of that in the scope of like

00:29:28,750 --> 00:29:33,320
ballet email addresses or something and

00:29:30,980 --> 00:29:34,610
this out dis record this data we found

00:29:33,320 --> 00:29:36,890
out this email address was you know six

00:29:34,610 --> 00:29:38,570
months old this email address is too

00:29:36,890 --> 00:29:40,250
weak Souls I'm at that is it valid you

00:29:38,570 --> 00:29:41,540
not care about a different scopes like

00:29:40,250 --> 00:29:47,120
that use third-party it with third-party

00:29:41,540 --> 00:29:48,620
tools for example anything like I said

00:29:47,120 --> 00:29:49,340
it was a little dumb want to take a

00:29:48,620 --> 00:29:52,000
different approach a little different

00:29:49,340 --> 00:29:52,000
but good

00:29:56,530 --> 00:29:59,530
dope

00:29:59,720 --> 00:30:06,390
one of the things that we keep trying to

00:30:03,390 --> 00:30:06,390
sure

00:30:07,030 --> 00:30:13,290
so I can summarize listening to

00:30:13,380 --> 00:30:24,250
unique years facilities that not okay

00:30:17,790 --> 00:30:27,130
but when they over four and all the

00:30:24,250 --> 00:30:29,830
other informations to end up summary but

00:30:27,130 --> 00:30:33,160
only names that means I've to collect

00:30:29,830 --> 00:30:36,850
any original title and a distinct

00:30:33,160 --> 00:30:42,730
account on the original later said it's

00:30:36,850 --> 00:30:44,920
their way for me to well let me sort of

00:30:42,730 --> 00:30:57,850
way of representing evenings in a way

00:30:44,920 --> 00:30:59,620
that they can be something in there so

00:30:57,850 --> 00:31:00,610
let me I'll repeat the play i'm sure i

00:30:59,620 --> 00:31:03,520
understood that question in for the

00:31:00,610 --> 00:31:06,310
video as well so you're looking for how

00:31:03,520 --> 00:31:09,640
can you summarize unique users is it

00:31:06,310 --> 00:31:12,460
users or is it or entities okay unique

00:31:09,640 --> 00:31:14,260
users or entities in a way that you Mike

00:31:12,460 --> 00:31:16,090
you're gonna have numerous non-unique

00:31:14,260 --> 00:31:17,770
data but you want to count be able to

00:31:16,090 --> 00:31:21,100
count do unique users out of it it's

00:31:17,770 --> 00:31:22,690
like some basically correct are you

00:31:21,100 --> 00:31:24,940
summarize it when you can you summarize

00:31:22,690 --> 00:31:29,310
you non-unique totals but you wanted

00:31:24,940 --> 00:31:29,310
unique users in this simple easy way

00:31:30,420 --> 00:31:33,420
okay

00:31:36,470 --> 00:31:45,780
talib I monthly for the entire month now

00:31:41,010 --> 00:31:48,180
I can't I can't creep summarize that

00:31:45,780 --> 00:31:50,550
because I don't worry it could be like

00:31:48,180 --> 00:31:55,310
some days it could be over the last six

00:31:50,550 --> 00:31:58,320
months that total time during could bear

00:31:55,310 --> 00:32:00,480
so sad a a table of you if you're doing

00:31:58,320 --> 00:32:01,800
that per day if you want to if you don't

00:32:00,480 --> 00:32:03,390
know if you're going to need a per day

00:32:01,800 --> 00:32:05,490
per weeks you want to build that table

00:32:03,390 --> 00:32:08,100
but you can calculate it up it you can

00:32:05,490 --> 00:32:10,500
build a different table you can build

00:32:08,100 --> 00:32:13,260
your scope of just the daily counts for

00:32:10,500 --> 00:32:16,290
example and you can always count and

00:32:13,260 --> 00:32:18,750
date format that pretty quick if it was

00:32:16,290 --> 00:32:20,190
just six months or longer if you're and

00:32:18,750 --> 00:32:21,450
if you wanted to do that in a way that

00:32:20,190 --> 00:32:23,820
it was only unique you might have a

00:32:21,450 --> 00:32:25,770
totals and the same version of just

00:32:23,820 --> 00:32:27,030
unique totals per day and those tables

00:32:25,770 --> 00:32:29,790
should be relatively small you're just

00:32:27,030 --> 00:32:33,230
your counts and should be fast to query

00:32:29,790 --> 00:32:33,230
if you just summarizing off those rows

00:32:37,790 --> 00:32:41,850
you should go you should be able to

00:32:39,660 --> 00:32:44,190
count your son your uniques by year by

00:32:41,850 --> 00:32:52,290
30 if you know what's the last 36 up 25

00:32:44,190 --> 00:32:53,820
days which would be telling you oh so

00:32:52,290 --> 00:32:55,410
i'll fuse okay you're talking about

00:32:53,820 --> 00:32:58,860
across different days not just predict

00:32:55,410 --> 00:33:00,270
okay okay yeah that had feel a little

00:32:58,860 --> 00:33:02,310
digging on your table so see what would

00:33:00,270 --> 00:33:03,300
be unique overall but in this example

00:33:02,310 --> 00:33:06,300
and how we used to do something like

00:33:03,300 --> 00:33:08,790
that we actually broke it out for we

00:33:06,300 --> 00:33:11,070
could count for a unique user ID as they

00:33:08,790 --> 00:33:12,750
came in just one table I just uniques if

00:33:11,070 --> 00:33:14,250
you always knew where they were and a

00:33:12,750 --> 00:33:16,500
time stamp on that so we knew when they

00:33:14,250 --> 00:33:20,220
were there so we just count off that one

00:33:16,500 --> 00:33:22,260
scope so your initial like you might

00:33:20,220 --> 00:33:25,020
have a user ID table and then like a

00:33:22,260 --> 00:33:27,900
scope of users sessions or entities

00:33:25,020 --> 00:33:29,370
whatever I want to do if you timestamps

00:33:27,900 --> 00:33:30,510
that user ID when they your int first

00:33:29,370 --> 00:33:32,060
enter to them you would always know when

00:33:30,510 --> 00:33:34,080
they were there you maybe have a

00:33:32,060 --> 00:33:35,970
timestamp when they'll last there have

00:33:34,080 --> 00:33:37,920
you wanted to count I mean wherever data

00:33:35,970 --> 00:33:40,290
you might need you can reference that

00:33:37,920 --> 00:33:43,380
one table tease the councilman a stuff

00:33:40,290 --> 00:33:44,520
you've had to dig a little bit deeper if

00:33:43,380 --> 00:33:45,140
you're doing something like that which

00:33:44,520 --> 00:33:46,970
is a different

00:33:45,140 --> 00:33:48,110
if you don't know that's where your

00:33:46,970 --> 00:33:49,400
exactly you have to sometimes have to

00:33:48,110 --> 00:33:51,890
dig all the way down to your granule

00:33:49,400 --> 00:33:54,140
data and that might be a case where yeah

00:33:51,890 --> 00:33:55,760
you want to build a bot that runs

00:33:54,140 --> 00:33:57,620
overnight and then you're going to see

00:33:55,760 --> 00:33:59,990
that and realize how you can I build a

00:33:57,620 --> 00:34:02,120
different table but it have to see you

00:33:59,990 --> 00:34:03,350
data to know which this to know the

00:34:02,120 --> 00:34:05,900
right question asking somebody how you

00:34:03,350 --> 00:34:08,419
really want to go but it is sometimes

00:34:05,900 --> 00:34:09,740
there's the CEO wants unique users

00:34:08,419 --> 00:34:11,260
across the last six years and you're

00:34:09,740 --> 00:34:14,950
like well that's going to take a while

00:34:11,260 --> 00:34:21,770
but that's the case where maybe you can

00:34:14,950 --> 00:34:25,960
build an event that just does it a set

00:34:21,770 --> 00:34:25,960
of users yeah the net slov Ashla harder

00:34:27,940 --> 00:34:34,040
it's so there's the scope of we had a

00:34:32,060 --> 00:34:36,020
lot of you of data where it was people

00:34:34,040 --> 00:34:37,640
coming in and I gathered like example

00:34:36,020 --> 00:34:40,100
their gender and hair color and all type

00:34:37,640 --> 00:34:41,360
stuff across the front end so we knew

00:34:40,100 --> 00:34:42,620
when they last hear what the questions

00:34:41,360 --> 00:34:44,240
they were coming in and when they were

00:34:42,620 --> 00:34:46,940
last dated when they were literally came

00:34:44,240 --> 00:34:49,220
in and when they last came in so if it's

00:34:46,940 --> 00:34:50,690
the case where you can realize he had

00:34:49,220 --> 00:34:52,760
some general scope of it and they came

00:34:50,690 --> 00:34:54,440
back through you could go okay well this

00:34:52,760 --> 00:34:57,050
when their first year there you first

00:34:54,440 --> 00:34:58,820
unique at this date near last year then

00:34:57,050 --> 00:35:00,260
somebody that might be able to help but

00:34:58,820 --> 00:35:02,300
you would always do a replace into that

00:35:00,260 --> 00:35:04,190
table you'll be updated anything so you

00:35:02,300 --> 00:35:06,130
still always had your unique first date

00:35:04,190 --> 00:35:08,360
was always sets you if you add account

00:35:06,130 --> 00:35:10,790
one is it how long ago to somebody come

00:35:08,360 --> 00:35:11,870
in or you have to scope it out again has

00:35:10,790 --> 00:35:14,150
depends on some of the questions you're

00:35:11,870 --> 00:35:15,950
asking your data I just see the

00:35:14,150 --> 00:35:18,470
architecture schema it actually to take

00:35:15,950 --> 00:35:20,349
okay that's that's an S&S but it's not

00:35:18,470 --> 00:35:24,940
exactly easy questions

00:35:20,349 --> 00:35:30,849
created a lesson in their day is

00:35:24,940 --> 00:35:33,160
different what's the last time they're

00:35:30,849 --> 00:35:34,450
there and now in essence to you but

00:35:33,160 --> 00:35:35,589
there's the questions like okay I want

00:35:34,450 --> 00:35:37,839
to know every time they were here and

00:35:35,589 --> 00:35:41,700
that's like the session table you feel

00:35:37,839 --> 00:35:41,700
okay there's always hear you come up

00:35:42,720 --> 00:35:49,839
this is there's a lot of the skis of we

00:35:48,369 --> 00:35:51,729
had a lot of issues with the dates and

00:35:49,839 --> 00:35:53,079
tracking users and there's then one of

00:35:51,729 --> 00:35:56,410
those scenarios is it was exactly that

00:35:53,079 --> 00:35:57,789
of wits bölüm izle were they here six

00:35:56,410 --> 00:35:59,979
months ago if you just do replace it all

00:35:57,789 --> 00:36:02,829
time on just a session table for example

00:35:59,979 --> 00:36:04,479
it's like well they were here just one

00:36:02,829 --> 00:36:06,640
city view place recession or no actually

00:36:04,479 --> 00:36:08,170
you add another session into it so you

00:36:06,640 --> 00:36:10,239
have all their user IDs and their

00:36:08,170 --> 00:36:12,029
session IDs for example and that's a big

00:36:10,239 --> 00:36:13,869
scope she up every time they were there

00:36:12,029 --> 00:36:15,789
but you're going to count a lot of that

00:36:13,869 --> 00:36:18,039
stuff a lot so in that sculpt you maybe

00:36:15,789 --> 00:36:19,359
you're going to break it out and however

00:36:18,039 --> 00:36:21,160
you want to partition that out or

00:36:19,359 --> 00:36:24,579
colgate a little bit differently to make

00:36:21,160 --> 00:36:26,739
that look easier to do the same time of

00:36:24,579 --> 00:36:29,650
trying to give partitioning would bacon

00:36:26,739 --> 00:36:31,029
make an easy way to break down some of

00:36:29,650 --> 00:36:32,739
your data to make it easier to dig into

00:36:31,029 --> 00:36:43,049
bed would be by date not by user though

00:36:32,739 --> 00:36:43,049
so that makes you hungry

00:36:48,950 --> 00:36:53,300
yeah the same you could go listen to the

00:36:51,290 --> 00:36:56,859
car or listen to its nut how women have

00:36:53,300 --> 00:36:56,859
different IP addresses that's insane you

00:37:00,940 --> 00:37:06,890
yeah that might be a I don't know how

00:37:04,970 --> 00:37:08,660
the other the data points that you have

00:37:06,890 --> 00:37:09,589
coming in to maybe define a little bit

00:37:08,660 --> 00:37:14,480
differently to make it a little easier

00:37:09,589 --> 00:37:26,000
way to track it but it's you can email

00:37:14,480 --> 00:37:31,810
me I try to help you out but billions a

00:37:26,000 --> 00:37:31,810
rose yeah yeah exactly one unique will

00:37:38,829 --> 00:37:44,329
do is they will say I want to see the

00:37:41,810 --> 00:37:48,560
stats for last month and we'll give them

00:37:44,329 --> 00:37:50,750
a daily granular so we'll give them you

00:37:48,560 --> 00:37:52,460
know for each day these were the unique

00:37:50,750 --> 00:37:56,480
listeners they listen to an average of

00:37:52,460 --> 00:37:58,369
this lawn mowed and that's easy no and

00:37:56,480 --> 00:38:02,359
because the time periods are set

00:37:58,369 --> 00:38:04,539
midnight to midnight I can summarize

00:38:02,359 --> 00:38:07,359
that I have survived said

00:38:04,539 --> 00:38:10,449
okay but then at the bottom vers total

00:38:07,359 --> 00:38:15,929
you know how many you need blisters that

00:38:10,449 --> 00:38:15,929
we have for the last 30 days so

00:38:17,630 --> 00:38:23,460
yeah so let me ask you this question

00:38:20,039 --> 00:38:26,999
then could you build into a row in the

00:38:23,460 --> 00:38:29,039
summary table that had a unique users

00:38:26,999 --> 00:38:31,680
and non unique users in it may be for

00:38:29,039 --> 00:38:33,539
example per day so you had to go to

00:38:31,680 --> 00:38:34,769
account and when you did account you

00:38:33,539 --> 00:38:37,230
knew if the user was coming back or not

00:38:34,769 --> 00:38:39,150
so you've inserted into that table you

00:38:37,230 --> 00:38:40,920
knew you know at that point if they've

00:38:39,150 --> 00:38:44,039
been here before not because you have

00:38:40,920 --> 00:38:47,700
user ID or not so you've flag that data

00:38:44,039 --> 00:38:50,190
maybe it's 15 people today of non-unique

00:38:47,700 --> 00:38:52,200
and 15 people that are unique so you can

00:38:50,190 --> 00:38:54,930
count those datas if you depend on what

00:38:52,200 --> 00:38:56,430
you know you can just decide don't for

00:38:54,930 --> 00:38:58,170
this day don't count non-unique so

00:38:56,430 --> 00:39:00,509
they've been here before only give me

00:38:58,170 --> 00:39:02,190
non unique data which would be your full

00:39:00,509 --> 00:39:04,980
scope of people who are just unique

00:39:02,190 --> 00:39:12,200
users because you broke the data out and

00:39:04,980 --> 00:39:15,630
you already knew you would desist mm-hmm

00:39:12,200 --> 00:39:17,489
all right that woodsy counts across so I

00:39:15,630 --> 00:39:20,249
knew how many people had came back that

00:39:17,489 --> 00:39:22,410
day of new users and how many were

00:39:20,249 --> 00:39:23,849
duplicate users so if you're just doing

00:39:22,410 --> 00:39:25,559
account you can break it off and decide

00:39:23,849 --> 00:39:27,869
what type of data you want how many were

00:39:25,559 --> 00:39:29,880
there total that year and how many

00:39:27,869 --> 00:39:31,109
people were brand new that year within

00:39:29,880 --> 00:39:33,119
the same table you just didn't count

00:39:31,109 --> 00:39:37,470
uniques or not so they came back but I

00:39:33,119 --> 00:39:39,470
didn't care sep to you you know it's a

00:39:37,470 --> 00:39:41,670
matter of how you suffer separate it out

00:39:39,470 --> 00:39:45,950
it's on the fly me think about right

00:39:41,670 --> 00:39:45,950
here so matter just looking at the data

00:39:53,680 --> 00:40:00,799
okay if you have only 10 users and you

00:39:59,329 --> 00:40:04,970
want to know how many of them showed up

00:40:00,799 --> 00:40:08,180
today are you keep track of each other

00:40:04,970 --> 00:40:13,880
and then you can set a bit you know a

00:40:08,180 --> 00:40:16,910
number for each user and then if you

00:40:13,880 --> 00:40:19,819
want sum those up and keeps a unique

00:40:16,910 --> 00:40:23,869
pray and just or all together and then

00:40:19,819 --> 00:40:27,859
you do a vid cam Wow right you talk

00:40:23,869 --> 00:40:30,369
about somebody's in the county and then

00:40:27,859 --> 00:40:37,489
I'm looking for something similar that

00:40:30,369 --> 00:40:39,229
handle you know sure and that's in the

00:40:37,489 --> 00:40:41,749
concept of that summer I think you might

00:40:39,229 --> 00:40:43,910
get that you just summarize your totals

00:40:41,749 --> 00:40:45,619
of that of the data you gather so you

00:40:43,910 --> 00:40:47,599
broke it out and how you don't know

00:40:45,619 --> 00:40:49,519
because you did my correct in saying

00:40:47,599 --> 00:40:51,799
that your boss or whoever might say I

00:40:49,519 --> 00:40:53,630
need to honey we're here the last year

00:40:51,799 --> 00:40:55,190
and then come back and say okay how many

00:40:53,630 --> 00:41:01,190
people here that were unique the last

00:40:55,190 --> 00:41:02,539
year so correct see how likely to be

00:41:01,190 --> 00:41:06,650
more fab off style we can't figure it

00:41:02,539 --> 00:41:10,690
out so that's good everybody has balls

00:41:06,650 --> 00:41:10,690
like this oh ok

00:41:14,670 --> 00:41:22,500
a from a start date to anything to start

00:41:20,240 --> 00:41:24,120
you know they have a commercial for

00:41:22,500 --> 00:41:25,440
example and they want to listen to how

00:41:24,120 --> 00:41:26,850
many people listen to my commercial

00:41:25,440 --> 00:41:34,140
across these date range from there ran

00:41:26,850 --> 00:41:43,740
the okay so you have entity ID for your

00:41:34,140 --> 00:41:46,050
commercial sure that concept could do

00:41:43,740 --> 00:41:49,940
that then you have a commercial ID you

00:41:46,050 --> 00:41:52,350
have date ranges you have counts per

00:41:49,940 --> 00:41:54,960
either unique counts for that day and

00:41:52,350 --> 00:42:00,570
then just total comps for that day so I

00:41:54,960 --> 00:42:02,130
forget you would just wipe out email

00:42:00,570 --> 00:42:04,080
means some scope and i'll type it up

00:42:02,130 --> 00:42:07,800
into the back to you it's a concept of

00:42:04,080 --> 00:42:13,980
it may they'll help in the middle I'm

00:42:07,800 --> 00:42:15,060
Carrie welcome to say we should had a

00:42:13,980 --> 00:42:20,640
whiteboard be like drawing all over

00:42:15,060 --> 00:42:25,080
things but there you go like whiteboards

00:42:20,640 --> 00:42:27,780
go on I never honey but that's the

00:42:25,080 --> 00:42:30,840
concept of it I have it in my head of

00:42:27,780 --> 00:42:35,370
what I'm thinking of immediately but but

00:42:30,840 --> 00:42:40,230
yeah no II mom have a turn somewhere yes

00:42:35,370 --> 00:42:42,300
oh cool see other questions third I mean

00:42:40,230 --> 00:42:44,430
everybody is data everybody has to like

00:42:42,300 --> 00:42:45,480
dig it and your data is this big once

00:42:44,430 --> 00:42:47,490
then one day and just going to be this

00:42:45,480 --> 00:42:49,470
big later so you know make sure you can

00:42:47,490 --> 00:42:50,520
define it the best way you get the

00:42:49,470 --> 00:42:53,670
answers that you think you're going to

00:42:50,520 --> 00:42:58,010
get me later so anything else any other

00:42:53,670 --> 00:43:02,720
questions come on that be something no

00:42:58,010 --> 00:43:02,720
alright cool thanks that's quick

00:43:40,970 --> 00:43:43,030
you

00:43:46,250 --> 00:43:51,329
when we created asterisk over a decade

00:43:48,960 --> 00:43:53,279
ago we could not have imagined that

00:43:51,329 --> 00:43:55,470
asterisk would not only become the most

00:43:53,279 --> 00:43:57,630
widely adopted open source communication

00:43:55,470 --> 00:43:59,640
software on the planet but that it would

00:43:57,630 --> 00:44:02,160
impact the entire industry in the way

00:43:59,640 --> 00:44:04,170
that it has today asterisk has found its

00:44:02,160 --> 00:44:06,779
way in the more than 170 countries and

00:44:04,170 --> 00:44:08,730
virtually every fortune 1000 company the

00:44:06,779 --> 00:44:10,799
success of asterisk has enabled a

00:44:08,730 --> 00:44:12,240
transition of power from the hands of

00:44:10,799 --> 00:44:14,519
the traditional proprietary phone

00:44:12,240 --> 00:44:16,920
vendors into the hands of the users and

00:44:14,519 --> 00:44:18,839
administrators of phone systems using

00:44:16,920 --> 00:44:20,069
this power our customers have created

00:44:18,839 --> 00:44:22,019
all sorts of business changing

00:44:20,069 --> 00:44:23,849
applications from small office phone

00:44:22,019 --> 00:44:26,369
systems to mission-critical call centers

00:44:23,849 --> 00:44:27,990
the international carrier networks in

00:44:26,369 --> 00:44:29,760
fact there's even an entire country

00:44:27,990 --> 00:44:32,369
those communications infrastructure runs

00:44:29,760 --> 00:44:34,289
on esters the gym has always been about

00:44:32,369 --> 00:44:36,000
creating technology that expands

00:44:34,289 --> 00:44:38,190
communications capabilities in ways that

00:44:36,000 --> 00:44:39,359
we could never have imagined and that's

00:44:38,190 --> 00:44:41,760
part of what's game-changing about

00:44:39,359 --> 00:44:44,460
Digium today we're doing it again this

00:44:41,760 --> 00:44:46,559
time by introducing a new family of HD

00:44:44,460 --> 00:44:48,660
IP phones that extends control of the

00:44:46,559 --> 00:44:50,430
user all the way to the desktop the

00:44:48,660 --> 00:44:52,140
launch of these new products represents

00:44:50,430 --> 00:44:54,119
the next phase indigenous history of

00:44:52,140 --> 00:44:56,640
innovation these are the first and only

00:44:54,119 --> 00:44:58,349
IP phones designed to fully leverage the

00:44:56,640 --> 00:44:59,910
power of estrus when we first discussed

00:44:58,349 --> 00:45:01,950
our expectations for building a family

00:44:59,910 --> 00:45:04,079
of phones for use with asterisk our

00:45:01,950 --> 00:45:05,819
requirements were pretty simple we asked

00:45:04,079 --> 00:45:07,470
the team to build the phones such that

00:45:05,819 --> 00:45:09,660
they were easy to install integrate

00:45:07,470 --> 00:45:11,490
provision and use I think you'll soon

00:45:09,660 --> 00:45:14,069
agree our engineers have delivered on

00:45:11,490 --> 00:45:15,690
that goal user feedback is validating

00:45:14,069 --> 00:45:17,819
that when it comes to operation with

00:45:15,690 --> 00:45:20,250
Astra space systems including our own

00:45:17,819 --> 00:45:22,799
switchvox based product these are the

00:45:20,250 --> 00:45:24,119
easiest to use best integrated most

00:45:22,799 --> 00:45:26,700
interoperable products on the market

00:45:24,119 --> 00:45:28,710
today the digitally phones will

00:45:26,700 --> 00:45:30,750
initially include three IP desk phones

00:45:28,710 --> 00:45:32,700
uniquely designed to complement any

00:45:30,750 --> 00:45:34,559
asterisks or switch box based solution

00:45:32,700 --> 00:45:37,230
these phones are different for a number

00:45:34,559 --> 00:45:39,900
of reasons first there is clue sively

00:45:37,230 --> 00:45:41,309
designed for use with esters secondly

00:45:39,900 --> 00:45:42,920
we've made it really easy to

00:45:41,309 --> 00:45:45,329
autodiscover and provision the phones

00:45:42,920 --> 00:45:47,009
next we've made it easy for the phones

00:45:45,329 --> 00:45:48,940
to access information inside of

00:45:47,009 --> 00:45:50,970
asterisks allowing tight coupling

00:45:48,940 --> 00:45:52,930
between the application and the phone

00:45:50,970 --> 00:45:55,089
additionally we've created an

00:45:52,930 --> 00:45:57,220
applications engine that allows users

00:45:55,089 --> 00:45:59,800
and developers to create and run their

00:45:57,220 --> 00:46:01,869
own apps on the following and finally

00:45:59,800 --> 00:46:03,940
we've done all of this at a very

00:46:01,869 --> 00:46:05,619
compelling price point at Digium we're

00:46:03,940 --> 00:46:07,390
always thinking of ways to give our

00:46:05,619 --> 00:46:09,790
customers the best value in business

00:46:07,390 --> 00:46:11,650
phone systems and also give them the

00:46:09,790 --> 00:46:13,810
power to create their own solutions or

00:46:11,650 --> 00:46:15,609
any communications challenge well

00:46:13,810 --> 00:46:17,349
continue to push the boundaries not only

00:46:15,609 --> 00:46:19,390
to make Astra's cooler faster and more

00:46:17,349 --> 00:46:21,040
technologically feature-rich but to make

00:46:19,390 --> 00:46:23,530
asterisk and what communications even

00:46:21,040 --> 00:46:27,210
easier and together we'll change the way

00:46:23,530 --> 00:46:27,210
the world communicates again

00:46:37,630 --> 00:46:44,450
how's that sigh every way this is the

00:46:41,210 --> 00:46:46,609
way to better utilize all your resources

00:46:44,450 --> 00:46:50,060
and it makes managing all your resources

00:46:46,609 --> 00:46:53,890
pretty easy all of the innovation is

00:46:50,060 --> 00:46:57,380
happening in open source the

00:46:53,890 --> 00:46:59,210
collaborative nature and of the you know

00:46:57,380 --> 00:47:01,339
of the community and the speed at which

00:46:59,210 --> 00:47:03,320
these are these you know these these

00:47:01,339 --> 00:47:05,660
deficiencies these bugs are getting

00:47:03,320 --> 00:47:08,480
discovered and then fixed is it I think

00:47:05,660 --> 00:47:11,480
that really shows the power of the of

00:47:08,480 --> 00:47:13,930
the open source community it is global

00:47:11,480 --> 00:47:17,480
and it's definitely because of the users

00:47:13,930 --> 00:47:23,359
community people are extremely friendly

00:47:17,480 --> 00:47:25,160
and always ready to help if you go on

00:47:23,359 --> 00:47:27,349
tire see any day you'll see these guys

00:47:25,160 --> 00:47:30,020
helping each other out and they're all

00:47:27,349 --> 00:47:31,700
doing it like in a selfless manner the

00:47:30,020 --> 00:47:34,720
product is transparent for everyone

00:47:31,700 --> 00:47:37,640
everyone can look at the code base

00:47:34,720 --> 00:47:39,380
everyone can see how close duck is is

00:47:37,640 --> 00:47:45,230
being built nothing nothing is

00:47:39,380 --> 00:47:47,900
proprietary everything is open in many

00:47:45,230 --> 00:47:52,099
ways it's absolutely vital to the the

00:47:47,900 --> 00:47:55,849
unborn health CloudStack the most

00:47:52,099 --> 00:47:59,770
exciting event in recent memory for he

00:47:55,849 --> 00:48:02,410
was our first developer boot camp

00:47:59,770 --> 00:48:05,050
and our call gave people I gave me two

00:48:02,410 --> 00:48:09,010
weeks notice to come attend I was

00:48:05,050 --> 00:48:13,180
expecting 25 or 30 people so we ended up

00:48:09,010 --> 00:48:16,030
with 87 people and had to go get more

00:48:13,180 --> 00:48:18,550
chairs into the room twice everything

00:48:16,030 --> 00:48:21,790
within cloud computing is commodity and

00:48:18,550 --> 00:48:24,880
is open source and so I don't think that

00:48:21,790 --> 00:48:26,620
you will you'll see anywhere where open

00:48:24,880 --> 00:48:29,650
source is not pervasive in cloud

00:48:26,620 --> 00:48:32,200
computing and so i think it's i think

00:48:29,650 --> 00:48:33,730
it's an assumption i think when you talk

00:48:32,200 --> 00:48:34,840
about cloud computing you're really

00:48:33,730 --> 00:48:40,390
talking about open source cloud

00:48:34,840 --> 00:48:43,540
computing cloud sac is a robust solution

00:48:40,390 --> 00:48:45,940
for large deployments you have dozens of

00:48:43,540 --> 00:48:49,840
data centers and thousands of servers in

00:48:45,940 --> 00:48:52,510
each data centers these hardware is

00:48:49,840 --> 00:48:55,990
going to fail and CloudStack is designed

00:48:52,510 --> 00:48:58,720
to handle number one that mass scale

00:48:55,990 --> 00:49:01,870
number two it's designed to handle the

00:48:58,720 --> 00:49:04,720
failure that inevitably happens in large

00:49:01,870 --> 00:49:08,950
deployments started working on cod tech

00:49:04,720 --> 00:49:12,220
over four years ago and it was the

00:49:08,950 --> 00:49:13,990
original set of people working on it had

00:49:12,220 --> 00:49:18,100
a background of delivering software

00:49:13,990 --> 00:49:22,330
telcos and service providers lots of QA

00:49:18,100 --> 00:49:25,960
lots of users actually using it high

00:49:22,330 --> 00:49:29,020
availability is a key feature multiple

00:49:25,960 --> 00:49:31,030
hypervisors support different network

00:49:29,020 --> 00:49:33,730
models you can pick up whatever suits

00:49:31,030 --> 00:49:35,980
you better while step management server

00:49:33,730 --> 00:49:39,670
can be deployed in different physical

00:49:35,980 --> 00:49:41,320
machines it definitely has a huge

00:49:39,670 --> 00:49:46,330
footprint it's being deployed everywhere

00:49:41,320 --> 00:49:48,910
there's a major movie studio that they

00:49:46,330 --> 00:49:52,210
were using cloudstack they were using it

00:49:48,910 --> 00:49:54,190
to transcode video and i thought that

00:49:52,210 --> 00:49:55,810
was terribly fascinating what i found

00:49:54,190 --> 00:49:59,080
more fascinating is what they did during

00:49:55,810 --> 00:50:01,870
lunch where they would spin up you know

00:49:59,080 --> 00:50:03,250
50 or 60 game servers then as soon as

00:50:01,870 --> 00:50:04,810
lunch was over they would destroy all

00:50:03,250 --> 00:50:09,010
the instances and go back

00:50:04,810 --> 00:50:10,630
real world cloudstack is vast it touches

00:50:09,010 --> 00:50:12,730
so many different aspects and there's no

00:50:10,630 --> 00:50:15,100
one person that's kind of like a master

00:50:12,730 --> 00:50:19,210
of all those realms I think clouds stack

00:50:15,100 --> 00:50:21,430
as a project is going to be one of the

00:50:19,210 --> 00:50:25,480
leaders simply because it's some of the

00:50:21,430 --> 00:50:30,910
most feature Folan and and robust

00:50:25,480 --> 00:50:33,810
platforms out they were Adam senior

00:50:30,910 --> 00:50:33,810

YouTube URL: https://www.youtube.com/watch?v=bU9aTtzHq8I


