Title: 2012 SouthEast LinuxFest - John Rose - Demoggification
Publication date: 2013-04-12
Playlist: 2012 SouthEast LinuxFest
Description: 
	2012 SouthEast LinuxFest
John Rose
Demoggification
Captions: 
	00:00:00,060 --> 00:00:05,279
the following presentation was recorded

00:00:02,490 --> 00:00:08,040
the 2012 southeast Linux Fest in

00:00:05,279 --> 00:00:10,410
Charlotte North Carolina it is licensed

00:00:08,040 --> 00:00:12,090
under a Creative Commons license for

00:00:10,410 --> 00:00:17,609
more information about the south east

00:00:12,090 --> 00:00:19,439
linux fest visit www.ccltss.org the

00:00:17,609 --> 00:00:22,320
south east linux best we'd like to thank

00:00:19,439 --> 00:00:26,060
the following diamond sponsors in 2012

00:00:22,320 --> 00:00:26,060
for helping make these videos possible

00:00:41,480 --> 00:00:46,050
so okay well welcome and I'm really

00:00:44,190 --> 00:00:48,120
happy to be here itself for the first

00:00:46,050 --> 00:00:51,120
time I've wanted to come since I don't

00:00:48,120 --> 00:00:53,789
know I met Dave five years ago or six

00:00:51,120 --> 00:00:55,649
years ago at the Ohio Linux fest and we

00:00:53,789 --> 00:00:58,920
had a chat then about his idea to have

00:00:55,649 --> 00:01:00,510
self so I've been wanting to come for

00:00:58,920 --> 00:01:04,199
years and this is the first opportunity

00:01:00,510 --> 00:01:05,670
I've had I'm from right in the middle of

00:01:04,199 --> 00:01:09,600
the United States so it's not

00:01:05,670 --> 00:01:13,380
conveniently located for me today's talk

00:01:09,600 --> 00:01:17,700
is a little bit odd and it's about cats

00:01:13,380 --> 00:01:19,890
as you now know before we talk about

00:01:17,700 --> 00:01:22,009
cats so I want to have a brief interlude

00:01:19,890 --> 00:01:25,799
where we talk a little bit about dogs

00:01:22,009 --> 00:01:28,140
and I'm here as a way of introducing

00:01:25,799 --> 00:01:30,900
myself I'm here with the Fedora project

00:01:28,140 --> 00:01:34,710
and we're celebrating the recent release

00:01:30,900 --> 00:01:38,130
of Fedora 17 which is the beefy miracle

00:01:34,710 --> 00:01:41,430
release so if you come by the far booth

00:01:38,130 --> 00:01:44,939
which is just outside these doors you'll

00:01:41,430 --> 00:01:48,119
see a gigantic six-foot tall hot dog and

00:01:44,939 --> 00:01:52,320
a bunch of crazy people please stop by

00:01:48,119 --> 00:01:54,780
and visit with the floor folks find out

00:01:52,320 --> 00:01:56,909
about the beefy miracle take your

00:01:54,780 --> 00:01:59,100
picture with a gigantic hot dog how many

00:01:56,909 --> 00:02:02,909
chances do you get to go home with a

00:01:59,100 --> 00:02:04,340
picture with a 6-foot hot dog a couple

00:02:02,909 --> 00:02:07,020
of others sort of brief announcements

00:02:04,340 --> 00:02:08,000
one you should have gotten a card like

00:02:07,020 --> 00:02:10,250
this

00:02:08,000 --> 00:02:13,370
your bag if you didn't you don't need

00:02:10,250 --> 00:02:16,510
the card but across the street at

00:02:13,370 --> 00:02:20,000
Marshall Park starting at 12:30 today

00:02:16,510 --> 00:02:23,330
there'll be a dog cart and a bunch of

00:02:20,000 --> 00:02:25,550
crazy Fedora people and we'll have you

00:02:23,330 --> 00:02:27,050
know well we're gonna break a rule that

00:02:25,550 --> 00:02:29,660
there's no free lunches there are free

00:02:27,050 --> 00:02:33,470
lunches today come over have some hot

00:02:29,660 --> 00:02:35,090
dogs with us it'll start at 12:30 and go

00:02:33,470 --> 00:02:38,990
until we're out of hot dogs and we have

00:02:35,090 --> 00:02:42,260
hundreds of them so get there early

00:02:38,990 --> 00:02:45,739
avoid the lines the other thing I wanted

00:02:42,260 --> 00:02:48,200
to mention briefly was that open source

00:02:45,739 --> 00:02:51,590
communities and Fedora being one of them

00:02:48,200 --> 00:02:54,350
are particularly interested in community

00:02:51,590 --> 00:02:56,480
aspects of things and giving back to

00:02:54,350 --> 00:03:00,440
communities you know we do that all the

00:02:56,480 --> 00:03:01,670
time and open source and in Charlotte

00:03:00,440 --> 00:03:04,100
we're going to try to give something

00:03:01,670 --> 00:03:07,640
back to the community of Charlotte for

00:03:04,100 --> 00:03:09,739
hosting this event so we have a food

00:03:07,640 --> 00:03:13,880
drive the beefy miracle food drive and

00:03:09,739 --> 00:03:17,030
next a beefy out in the in the hall will

00:03:13,880 --> 00:03:19,970
be a gigantic bin to collect food for

00:03:17,030 --> 00:03:22,489
the loaves & Fishes food pantry here in

00:03:19,970 --> 00:03:24,860
Charlotte so if you have a chance if you

00:03:22,489 --> 00:03:26,900
heard about it in advance please please

00:03:24,860 --> 00:03:29,890
drop off some food to help people here

00:03:26,900 --> 00:03:32,360
in Charlotte if you didn't have a chance

00:03:29,890 --> 00:03:34,820
or didn't hear about it and it's not

00:03:32,360 --> 00:03:36,080
convenient to go grab some food

00:03:34,820 --> 00:03:39,410
you can make another kind of

00:03:36,080 --> 00:03:41,780
contribution if you're so inclined as

00:03:39,410 --> 00:03:44,540
well as a gift back to you for doing

00:03:41,780 --> 00:03:48,130
that you'll receive one of these beefy

00:03:44,540 --> 00:03:51,620
miracle buttons they're extremely rare

00:03:48,130 --> 00:03:54,049
very few people have these so it'll be a

00:03:51,620 --> 00:04:00,010
collectible you'll see them on eBay in a

00:03:54,049 --> 00:04:02,720
couple of years ok enough about hot dogs

00:04:00,010 --> 00:04:07,070
so now we'll get into the talk about

00:04:02,720 --> 00:04:08,810
demographer keishon back to cats you've

00:04:07,070 --> 00:04:12,230
already seen the slide for the brief

00:04:08,810 --> 00:04:14,140
history of demographic ation so I don't

00:04:12,230 --> 00:04:17,450
know if I need to talk about it anymore

00:04:14,140 --> 00:04:19,489
but back in the 1990's and it actually

00:04:17,450 --> 00:04:24,169
started happening much earlier than

00:04:19,489 --> 00:04:28,759
1990s but in the 1990s Merlin on Usenet

00:04:24,169 --> 00:04:31,370
news in comp UNIX shell started awarding

00:04:28,759 --> 00:04:34,190
a prize for the useless use of cat and

00:04:31,370 --> 00:04:38,000
what happened how many people remember

00:04:34,190 --> 00:04:42,289
to use net anybody still use Usenet

00:04:38,000 --> 00:04:44,389
a few people well this was a I don't

00:04:42,289 --> 00:04:47,930
know I think of it as the social media

00:04:44,389 --> 00:04:51,139
of 20 years ago we used to hang out in

00:04:47,930 --> 00:04:54,740
places on Usenet and discuss various

00:04:51,139 --> 00:04:57,110
things about well everything you could

00:04:54,740 --> 00:05:02,090
imagine so it was it was a wide open

00:04:57,110 --> 00:05:05,000
free-for-all sort of media people who

00:05:02,090 --> 00:05:07,909
wrote shell programs or even just we're

00:05:05,000 --> 00:05:10,669
learning how to just navigate a UNIX

00:05:07,909 --> 00:05:12,530
shell often visited comp UNIX shell and

00:05:10,669 --> 00:05:14,840
helped each other so it's just like a

00:05:12,530 --> 00:05:17,690
forum today where people get together or

00:05:14,840 --> 00:05:18,470
an IRC to help people with their

00:05:17,690 --> 00:05:21,979
problems

00:05:18,470 --> 00:05:24,610
and one of the things that Merlyn

00:05:21,979 --> 00:05:27,139
noticed was that people kept telling

00:05:24,610 --> 00:05:32,080
other people to do they kept using

00:05:27,139 --> 00:05:35,030
examples of something that annoyed him

00:05:32,080 --> 00:05:37,130
it was really quite a harmless thing but

00:05:35,030 --> 00:05:40,039
it was still annoying to him and it was

00:05:37,130 --> 00:05:42,530
annoying to a lot of other people we'll

00:05:40,039 --> 00:05:44,870
talk about exactly what a useless use of

00:05:42,530 --> 00:05:48,500
cat is next

00:05:44,870 --> 00:05:52,219
but this spawned sort of a later

00:05:48,500 --> 00:05:53,030
enterprise of people who tried to go

00:05:52,219 --> 00:05:55,190
around the internet

00:05:53,030 --> 00:05:59,419
removing useless uses of cat and that

00:05:55,190 --> 00:06:02,180
process is called de modification for

00:05:59,419 --> 00:06:04,460
this talk we can you know get through

00:06:02,180 --> 00:06:06,919
how to deal with a useless use of cat in

00:06:04,460 --> 00:06:09,530
two minutes so we're really going to be

00:06:06,919 --> 00:06:14,539
demography and useless uses of a lot of

00:06:09,530 --> 00:06:18,009
other things as well so here's the

00:06:14,539 --> 00:06:21,050
classic example of a useless use of cat

00:06:18,009 --> 00:06:23,509
week at some a file and we pipe that

00:06:21,050 --> 00:06:26,020
into another program and it does

00:06:23,509 --> 00:06:29,120
something with it

00:06:26,020 --> 00:06:30,770
the file name doesn't really matter and

00:06:29,120 --> 00:06:32,460
what the filter is on the other side of

00:06:30,770 --> 00:06:37,780
the pipe doesn't really matter

00:06:32,460 --> 00:06:39,729
although it could in theory so the

00:06:37,780 --> 00:06:42,939
construct that kind of tips us off that

00:06:39,729 --> 00:06:46,960
something's fishy here is cat filename

00:06:42,939 --> 00:06:50,050
pipe and then some washed off and what I

00:06:46,960 --> 00:06:52,030
kind of like to do is have have sort of

00:06:50,050 --> 00:06:54,280
a visual image we want to recognize that

00:06:52,030 --> 00:06:56,889
pattern so that we can rewrite it in a

00:06:54,280 --> 00:06:59,439
more suitable way later and so when I

00:06:56,889 --> 00:07:04,020
see that what I might see in my mind is

00:06:59,439 --> 00:07:07,330
this which isn't coming out very good

00:07:04,020 --> 00:07:11,860
but that's that's a vicious cat doing

00:07:07,330 --> 00:07:14,289
nasty things to a penguin we're gonna

00:07:11,860 --> 00:07:19,990
put an end to that at the end of this

00:07:14,289 --> 00:07:23,080
talk so adamah defied version here 2d

00:07:19,990 --> 00:07:26,770
modified versions of this sort of

00:07:23,080 --> 00:07:29,469
classic case one you just let the filter

00:07:26,770 --> 00:07:32,439
read the file directly which almost all

00:07:29,469 --> 00:07:34,930
of them do the other is rather than

00:07:32,439 --> 00:07:37,000
rather than using cat and a pipe you

00:07:34,930 --> 00:07:40,860
just redirect the input from the file

00:07:37,000 --> 00:07:45,400
into the standard input of the filter

00:07:40,860 --> 00:07:49,120
okay so we'd be done now if we just

00:07:45,400 --> 00:07:51,069
wanted to get rid of cats but there's

00:07:49,120 --> 00:07:53,259
lots of other useless stuff that we see

00:07:51,069 --> 00:07:55,690
over and over and over in shell scripts

00:07:53,259 --> 00:07:57,610
and in shawl programming so we want to

00:07:55,690 --> 00:08:00,759
get rid of as much of that as we can -

00:07:57,610 --> 00:08:02,819
or at least today just a little bit so

00:08:00,759 --> 00:08:08,979
I'm going to talk about kind of five

00:08:02,819 --> 00:08:11,289
features in bash that allow us to do

00:08:08,979 --> 00:08:13,990
some things in different ways that clean

00:08:11,289 --> 00:08:18,669
up scripts and stop annoying people like

00:08:13,990 --> 00:08:20,349
Merlin and me and a lot of others one

00:08:18,669 --> 00:08:25,659
thing to note about this talk is that

00:08:20,349 --> 00:08:29,020
it's not it's not about portable shell

00:08:25,659 --> 00:08:30,610
scripting right I don't if you have to

00:08:29,020 --> 00:08:31,930
write portable shell scripts you have to

00:08:30,610 --> 00:08:34,539
take a lot of other things into account

00:08:31,930 --> 00:08:37,240
and they're actually peculiar to the

00:08:34,539 --> 00:08:39,039
things you're porting to so we don't

00:08:37,240 --> 00:08:41,529
care about portable shell scripting

00:08:39,039 --> 00:08:42,789
today we're just talking about features

00:08:41,529 --> 00:08:44,649
that are in bash

00:08:42,789 --> 00:08:45,250
they happen to overlap with some other

00:08:44,649 --> 00:08:49,900
shells

00:08:45,250 --> 00:08:52,750
as well so here's one feature of Bosch

00:08:49,900 --> 00:08:55,660
that I almost never see used by anyone

00:08:52,750 --> 00:08:59,710
but it's a very nice feature

00:08:55,660 --> 00:09:01,810
they're called hair strings almost

00:08:59,710 --> 00:09:04,990
everybody who's written shell programs

00:09:01,810 --> 00:09:08,560
in the last 30 years is familiar with

00:09:04,990 --> 00:09:11,740
hair documents which are kind of an

00:09:08,560 --> 00:09:13,480
inline file that you stick into your

00:09:11,740 --> 00:09:16,000
shell script that you can redirect into

00:09:13,480 --> 00:09:17,680
another program I hear string is

00:09:16,000 --> 00:09:21,550
something that's been made available

00:09:17,680 --> 00:09:24,520
more recently and it's kind of a sort of

00:09:21,550 --> 00:09:26,560
a version of a hair document so

00:09:24,520 --> 00:09:32,320
it's just this triple redirection

00:09:26,560 --> 00:09:34,360
operator which is on the left you have a

00:09:32,320 --> 00:09:36,820
command and what you're redirecting into

00:09:34,360 --> 00:09:39,490
it is the output of the string and when

00:09:36,820 --> 00:09:43,420
I say output of a string this does

00:09:39,490 --> 00:09:49,720
expand the string before it passes it on

00:09:43,420 --> 00:09:52,510
standard input to the command yeah so if

00:09:49,720 --> 00:09:55,110
you have a dollar sign shell as part of

00:09:52,510 --> 00:10:02,950
this string you probably get been bash

00:09:55,110 --> 00:10:05,170
pastor so here's a useless use of echo

00:10:02,950 --> 00:10:06,880
echo is not a very offensive command

00:10:05,170 --> 00:10:10,210
because it's built-in but it's still

00:10:06,880 --> 00:10:12,490
useless to echo string into pipe and

00:10:10,210 --> 00:10:15,520
then pass that to standard input of a

00:10:12,490 --> 00:10:17,860
program that could take a hear string as

00:10:15,520 --> 00:10:19,360
an argument instead so here I'm just

00:10:17,860 --> 00:10:24,060
wanting to do a little bit of real

00:10:19,360 --> 00:10:27,070
arithmetic so I echo something into BC

00:10:24,060 --> 00:10:28,839
the demography version which is now off

00:10:27,070 --> 00:10:31,740
our screen is there anybody here that

00:10:28,839 --> 00:10:31,740
can adjust this

00:10:39,990 --> 00:10:44,730
wrong one yeah that's the one back there

00:11:07,149 --> 00:11:10,149
we

00:11:36,589 --> 00:11:39,670
well it just got worse

00:11:43,490 --> 00:11:49,369
okay well the demography version is BC

00:11:47,480 --> 00:11:51,709
than the triple redirection operator and

00:11:49,369 --> 00:11:54,199
then just the contents of the string

00:11:51,709 --> 00:11:57,529
that I had before if you can't read that

00:11:54,199 --> 00:12:02,869
at the bottom this is gonna get worse on

00:11:57,529 --> 00:12:06,199
a slide later but we'll wing it so a

00:12:02,869 --> 00:12:09,499
second group of special redirections

00:12:06,199 --> 00:12:13,809
that's really very useful and also

00:12:09,499 --> 00:12:17,149
almost never used by programmers is

00:12:13,809 --> 00:12:22,369
redirecting to slash dev slash tcp or

00:12:17,149 --> 00:12:24,439
UDP slash host slash port and what this

00:12:22,369 --> 00:12:29,839
allows us to do is open sockets to other

00:12:24,439 --> 00:12:32,209
places directly from the shell I will

00:12:29,839 --> 00:12:35,389
mention that there are some this is a

00:12:32,209 --> 00:12:37,429
compile time option to bash and so not

00:12:35,389 --> 00:12:41,089
all versions of bash that you run into

00:12:37,429 --> 00:12:44,540
will have this enabled as far as I know

00:12:41,089 --> 00:12:47,329
Debian which has a 10-year old bug filed

00:12:44,540 --> 00:12:49,100
against it for not enabling this is the

00:12:47,329 --> 00:12:52,040
only distribution I'm aware of that

00:12:49,100 --> 00:12:54,139
doesn't have it enabled and there are

00:12:52,040 --> 00:12:59,899
similar features to this in corn modern

00:12:54,139 --> 00:13:04,519
corn shells and even in awk you can open

00:12:59,899 --> 00:13:07,879
sockets directly so what happens here is

00:13:04,519 --> 00:13:10,939
you can this is for the syntax you dev

00:13:07,879 --> 00:13:14,269
TCP or dev UDP those things don't really

00:13:10,939 --> 00:13:16,819
exist in the file system it's just that

00:13:14,269 --> 00:13:19,309
the shell recognizes when it sees it

00:13:16,819 --> 00:13:21,799
this is something special and the shells

00:13:19,309 --> 00:13:26,509
being requested to open a socket so it

00:13:21,799 --> 00:13:28,610
goes and tries to do that the hostname

00:13:26,509 --> 00:13:32,119
can either be a hostname or an IP

00:13:28,610 --> 00:13:35,480
address and the port can either be a

00:13:32,119 --> 00:13:38,360
port number or a service name so there's

00:13:35,480 --> 00:13:40,369
a lot of flexibility although if you use

00:13:38,360 --> 00:13:41,480
a service name instead of a port then it

00:13:40,369 --> 00:13:43,220
depends on what you have in taxi

00:13:41,480 --> 00:13:45,860
services whether or not things are going

00:13:43,220 --> 00:13:51,589
to work the way you expect if you use an

00:13:45,860 --> 00:13:53,299
IP number versus a hostname we'll see

00:13:51,589 --> 00:13:54,390
that that can make a difference in terms

00:13:53,299 --> 00:13:56,610
of

00:13:54,390 --> 00:13:58,740
whether this succeeds or fails depending

00:13:56,610 --> 00:14:04,920
upon whether DNS is working on your

00:13:58,740 --> 00:14:07,980
system or not so what happens when bash

00:14:04,920 --> 00:14:12,290
sees this redirection is it tries to

00:14:07,980 --> 00:14:15,240
open a socket using either TCP or UDP

00:14:12,290 --> 00:14:18,810
two whatever that host is on whatever

00:14:15,240 --> 00:14:20,730
port you've requested a couple of places

00:14:18,810 --> 00:14:23,400
where we often do networking kind of

00:14:20,730 --> 00:14:25,620
related stuff in shell scripts are we

00:14:23,400 --> 00:14:27,930
might use ping to just ping someplace

00:14:25,620 --> 00:14:30,860
and see if we can reach it

00:14:27,930 --> 00:14:34,830
see if it's live see if it's answering

00:14:30,860 --> 00:14:36,690
we often sometimes see net cat used to

00:14:34,830 --> 00:14:38,610
check for something more particular like

00:14:36,690 --> 00:14:43,920
is there an Apache server running on

00:14:38,610 --> 00:14:47,340
port 80 somewhere so we're not gonna go

00:14:43,920 --> 00:14:50,930
to useless uses of net cat although you

00:14:47,340 --> 00:14:54,210
could substitute ping in here as well

00:14:50,930 --> 00:14:56,970
here's a conflict this is more often you

00:14:54,210 --> 00:15:00,510
would see this net cat command embedded

00:14:56,970 --> 00:15:02,280
inside an if test so if this works then

00:15:00,510 --> 00:15:06,570
you do something if it doesn't you might

00:15:02,280 --> 00:15:09,360
take remedial action so we're going to

00:15:06,570 --> 00:15:12,540
do sort of a quiet net cat just to scan

00:15:09,360 --> 00:15:15,120
we're not going to send any data to the

00:15:12,540 --> 00:15:16,560
flora project or GaN port 80 we're just

00:15:15,120 --> 00:15:17,850
checking to see whether we can open a

00:15:16,560 --> 00:15:21,210
connection to it well there's some

00:15:17,850 --> 00:15:23,700
things on the other end we get back a

00:15:21,210 --> 00:15:30,510
zero if that works and we get back a one

00:15:23,700 --> 00:15:34,110
if it doesn't work now for another sort

00:15:30,510 --> 00:15:38,970
of visual reminder of this sort of

00:15:34,110 --> 00:15:43,530
situation this guy really comes out bad

00:15:38,970 --> 00:15:45,570
in this resolution well this is a cat

00:15:43,530 --> 00:15:48,870
sitting on top of a computer a network

00:15:45,570 --> 00:15:51,660
savvy cat with evil intentions which are

00:15:48,870 --> 00:15:57,690
clear in his eyes if you can see his

00:15:51,660 --> 00:16:01,080
eyes so here's a demography version of

00:15:57,690 --> 00:16:03,300
this there's a few things interesting

00:16:01,080 --> 00:16:05,920
about this and unusual and kind of

00:16:03,300 --> 00:16:09,370
confusing it for

00:16:05,920 --> 00:16:12,640
one is there isn't actually any command

00:16:09,370 --> 00:16:14,760
here there's just two redirections the

00:16:12,640 --> 00:16:17,230
first redirection doesn't really matter

00:16:14,760 --> 00:16:20,500
unless you you know if you don't care

00:16:17,230 --> 00:16:22,990
about seeing a little bit of information

00:16:20,500 --> 00:16:26,890
about what was attempted printed out on

00:16:22,990 --> 00:16:28,900
the screen so one thing that's a little

00:16:26,890 --> 00:16:31,600
unusual is that we redirected up now

00:16:28,900 --> 00:16:33,490
before the other redirects in and in

00:16:31,600 --> 00:16:36,790
normal with normal redirection if you

00:16:33,490 --> 00:16:38,650
redirect standard error to Devon all and

00:16:36,790 --> 00:16:40,540
standard output some other file it

00:16:38,650 --> 00:16:42,390
normally doesn't matter which order you

00:16:40,540 --> 00:16:45,310
do that in and most people do it

00:16:42,390 --> 00:16:46,000
redirect standard I'll then redirect

00:16:45,310 --> 00:16:48,880
standardin

00:16:46,000 --> 00:16:52,150
error here it does make a difference

00:16:48,880 --> 00:16:55,150
because this thing is not a normal file

00:16:52,150 --> 00:16:58,210
redirection so when this redirection

00:16:55,150 --> 00:17:00,700
gets processed it may output some stuff

00:16:58,210 --> 00:17:05,800
so you want to redirect standard error

00:17:00,700 --> 00:17:08,260
first another weird thing is there's no

00:17:05,800 --> 00:17:12,310
program on this line it's just it tries

00:17:08,260 --> 00:17:14,680
to open this and when bash seized of TCP

00:17:12,310 --> 00:17:16,750
it says okay I'm gonna go look this

00:17:14,680 --> 00:17:20,980
thing up if it's a hostname see what the

00:17:16,750 --> 00:17:23,470
IP is try to open a TCP connection to

00:17:20,980 --> 00:17:26,620
the socket on that host and if that

00:17:23,470 --> 00:17:32,740
works it returns zero and if it fails is

00:17:26,620 --> 00:17:34,720
it in this case it returns a one now

00:17:32,740 --> 00:17:38,410
again more often something like this

00:17:34,720 --> 00:17:41,590
would be embedded also in an if test or

00:17:38,410 --> 00:17:48,130
something so you could react one way or

00:17:41,590 --> 00:17:53,530
another if it if it succeeds now this is

00:17:48,130 --> 00:17:57,060
a kind of a clever simple way to just

00:17:53,530 --> 00:17:59,410
test is something answering somewhere

00:17:57,060 --> 00:18:01,870
you can do all sorts of socket

00:17:59,410 --> 00:18:05,860
programming directly and bash using this

00:18:01,870 --> 00:18:07,300
construct so I I'm not gonna talk much

00:18:05,860 --> 00:18:09,520
about that but I do want to give you

00:18:07,300 --> 00:18:11,620
just one quick example of how you might

00:18:09,520 --> 00:18:15,010
do something a bit more complicated and

00:18:11,620 --> 00:18:16,690
this isn't complicated at all but the

00:18:15,010 --> 00:18:18,460
first that says like four lines on the

00:18:16,690 --> 00:18:21,190
first line and the last line

00:18:18,460 --> 00:18:23,620
basically open socket connect it to a

00:18:21,190 --> 00:18:26,530
file descriptor and the last line closes

00:18:23,620 --> 00:18:29,410
the socket and closes the file

00:18:26,530 --> 00:18:32,580
descriptor so we're gonna open file

00:18:29,410 --> 00:18:38,350
descriptor 3 for reading and writing to

00:18:32,580 --> 00:18:40,450
the FTP port at kernel.org all I'm doing

00:18:38,350 --> 00:18:43,630
is sending a quit for that file

00:18:40,450 --> 00:18:47,230
descriptor and then I read whatever came

00:18:43,630 --> 00:18:52,240
back so I find out that they're running

00:18:47,230 --> 00:18:53,860
the SFTP de 2.3.4 now I think you could

00:18:52,240 --> 00:18:56,020
probably imagine just from this very

00:18:53,860 --> 00:18:59,020
little tiny example of how you might use

00:18:56,020 --> 00:19:04,810
this to do various things with mail

00:18:59,020 --> 00:19:08,380
servers or other things so a lot of

00:19:04,810 --> 00:19:16,000
power here to directly manipulate socket

00:19:08,380 --> 00:19:19,360
connections in bash next up is brace

00:19:16,000 --> 00:19:21,040
expansion and brace expansion is

00:19:19,360 --> 00:19:24,340
something that it seems like almost

00:19:21,040 --> 00:19:27,850
everybody learns how to use it this way

00:19:24,340 --> 00:19:30,190
and while we might learn how to use it

00:19:27,850 --> 00:19:33,300
another way we either forget or didn't

00:19:30,190 --> 00:19:35,970
learn it so this is just kind of

00:19:33,300 --> 00:19:38,800
commonly you know people know how to

00:19:35,970 --> 00:19:40,840
expand strings so that they can do like

00:19:38,800 --> 00:19:45,100
1 make their command and create 5

00:19:40,840 --> 00:19:47,620
directories with one simple command or

00:19:45,100 --> 00:19:49,360
you can expand things so you have missed

00:19:47,620 --> 00:19:54,070
a little string that expands into a

00:19:49,360 --> 00:19:57,510
bunch of different words less commonly

00:19:54,070 --> 00:20:01,390
brace expansion is used for expanding

00:19:57,510 --> 00:20:04,840
sequences of numbers and this is this is

00:20:01,390 --> 00:20:06,190
a pretty powerful way to use it but it

00:20:04,840 --> 00:20:07,150
does have a limitation that's

00:20:06,190 --> 00:20:10,120
unfortunate

00:20:07,150 --> 00:20:11,560
but here they're well you see three

00:20:10,120 --> 00:20:14,710
examples but there are really four

00:20:11,560 --> 00:20:18,310
examples here so the first one just

00:20:14,710 --> 00:20:20,380
shows how to generate a number sequence

00:20:18,310 --> 00:20:22,840
from 1 to 10 and then you can go the

00:20:20,380 --> 00:20:26,770
other direction from 9 back down to 1 so

00:20:22,840 --> 00:20:28,940
the order that you the order that you

00:20:26,770 --> 00:20:31,370
have these two arguments

00:20:28,940 --> 00:20:35,090
around the dots indicates whether you're

00:20:31,370 --> 00:20:37,880
going up or down through the sequins in

00:20:35,090 --> 00:20:40,010
the second case we have a lead 0 is the

00:20:37,880 --> 00:20:42,770
only thing that's notable about it and

00:20:40,010 --> 00:20:44,600
that causes the sequence to be padded so

00:20:42,770 --> 00:20:48,140
that everything's the same length so

00:20:44,600 --> 00:20:50,420
there's zero padding for people who are

00:20:48,140 --> 00:20:53,960
familiar with the sequence command it

00:20:50,420 --> 00:20:56,420
does all these things with arguments the

00:20:53,960 --> 00:20:58,520
third one has a third option where you

00:20:56,420 --> 00:21:01,070
have a third number on the end and

00:20:58,520 --> 00:21:03,140
that's a step number so it'll expand the

00:21:01,070 --> 00:21:08,690
sequence but only in this case print

00:21:03,140 --> 00:21:10,490
every third one the missing example is

00:21:08,690 --> 00:21:13,960
similar to this first one but it doesn't

00:21:10,490 --> 00:21:17,750
have a space here and when you have them

00:21:13,960 --> 00:21:20,590
connected it expands them both at once

00:21:17,750 --> 00:21:24,770
and so you get a much more complicated

00:21:20,590 --> 00:21:26,840
expansion so if we did this without this

00:21:24,770 --> 00:21:29,900
space what we would get is a one from

00:21:26,840 --> 00:21:33,620
there and then nine down through one so

00:21:29,900 --> 00:21:35,300
we'd get one we get 19 18 17 16 15 after

00:21:33,620 --> 00:21:36,650
we got down to 11 it would go over there

00:21:35,300 --> 00:21:38,750
and get the two again and then go

00:21:36,650 --> 00:21:43,610
through this whole expansion again so we

00:21:38,750 --> 00:21:45,170
get 29 28 27 and if you do it with more

00:21:43,610 --> 00:21:51,190
than two things concatenated you're

00:21:45,170 --> 00:21:51,190
really I don't know what to say

00:21:57,830 --> 00:22:03,919
the question was can it new letters and

00:22:00,789 --> 00:22:10,269
I'm actually not sure if somebody test

00:22:03,919 --> 00:22:10,269
it right now so it was a seashell okay

00:22:11,980 --> 00:22:22,179
okay that's that's great so you can do a

00:22:14,509 --> 00:22:27,169
dot dot F okay so yes

00:22:22,179 --> 00:22:28,730
okay so we're can we use this well one

00:22:27,169 --> 00:22:31,279
of the things I learned very early on

00:22:28,730 --> 00:22:33,590
was that in for and you when I write a

00:22:31,279 --> 00:22:35,809
for statement you can just make a list

00:22:33,590 --> 00:22:38,720
and it'll iterate through that list and

00:22:35,809 --> 00:22:40,609
sometimes all you want is to know how

00:22:38,720 --> 00:22:42,859
many times you're iterating you're not

00:22:40,609 --> 00:22:45,289
iterating over Bob Carol Ted and Alice

00:22:42,859 --> 00:22:47,749
or something so you can just list them

00:22:45,289 --> 00:22:49,970
and you also very quickly learned that

00:22:47,749 --> 00:22:51,889
that doesn't scale very well if you want

00:22:49,970 --> 00:22:54,830
to have a lot of things that you're

00:22:51,889 --> 00:22:58,419
iterating over and that's where people

00:22:54,830 --> 00:23:03,529
find the sequence command normally and

00:22:58,419 --> 00:23:05,450
this is a well a way to change the six

00:23:03,529 --> 00:23:09,950
to six hundred and have it still work

00:23:05,450 --> 00:23:12,019
without having to do a lot of typing one

00:23:09,950 --> 00:23:13,730
thing I'll mention here is that a lot of

00:23:12,019 --> 00:23:17,029
the examples like all of the examples

00:23:13,730 --> 00:23:18,489
we've looked at so yeah well almost all

00:23:17,029 --> 00:23:23,299
of the examples we've looked at so far

00:23:18,489 --> 00:23:25,519
the the offending bit has been some

00:23:23,299 --> 00:23:28,730
programs some external program piped

00:23:25,519 --> 00:23:31,309
into something else this is another

00:23:28,730 --> 00:23:34,940
common kind of place where we see things

00:23:31,309 --> 00:23:37,399
that can be demography when you have a

00:23:34,940 --> 00:23:39,889
construct like a loop and an inside of

00:23:37,399 --> 00:23:44,090
it you have back ticks call you know

00:23:39,889 --> 00:23:45,590
invoking a separate command and in this

00:23:44,090 --> 00:23:47,629
case I'm sure no one's going to be

00:23:45,590 --> 00:23:56,359
surprised that we can demography this

00:23:47,629 --> 00:23:58,639
using brace expansion generally cleaner

00:23:56,359 --> 00:24:03,259
easier to read doesn't require external

00:23:58,639 --> 00:24:06,950
programs to be available no reason not

00:24:03,259 --> 00:24:08,730
to use it the one the one sort of thing

00:24:06,950 --> 00:24:12,419
that's annoying about it to me

00:24:08,730 --> 00:24:15,630
is that an insight of race expansion

00:24:12,419 --> 00:24:19,890
there is no parameter expansion so

00:24:15,630 --> 00:24:21,690
things like trying to do this where

00:24:19,890 --> 00:24:23,370
instead of one you have dollar sign low

00:24:21,690 --> 00:24:26,970
and instead of six you have dollar sign

00:24:23,370 --> 00:24:36,690
high those variables won't be expanded

00:24:26,970 --> 00:24:38,520
unless you do an eval okay well we've

00:24:36,690 --> 00:24:40,500
talked a little bit about parameters so

00:24:38,520 --> 00:24:45,660
let's talk a little bit about parameter

00:24:40,500 --> 00:24:47,820
expansion there are three three kind

00:24:45,660 --> 00:24:50,880
they're there many other kinds this is

00:24:47,820 --> 00:24:54,090
really unfortunate there are many other

00:24:50,880 --> 00:24:57,090
kinds of parameter expansion but three

00:24:54,090 --> 00:25:00,000
kinds that are especially useful at

00:24:57,090 --> 00:25:04,490
least in my world are prefix matching

00:25:00,000 --> 00:25:12,000
suffix matching and pattern substitution

00:25:04,490 --> 00:25:14,340
with prefix matching what happens is you

00:25:12,000 --> 00:25:16,169
have a pattern after the you have to

00:25:14,340 --> 00:25:18,000
have the curly braces which is a little

00:25:16,169 --> 00:25:21,390
annoying so you have a dollar sign curly

00:25:18,000 --> 00:25:23,580
braces the name of the variable and then

00:25:21,390 --> 00:25:27,929
either a hash or double hash followed by

00:25:23,580 --> 00:25:30,120
a pattern and a close curly brace in all

00:25:27,929 --> 00:25:33,809
of these cases the Pat pattern is going

00:25:30,120 --> 00:25:36,630
to be somewhat limited because this is

00:25:33,809 --> 00:25:38,760
path name expansion that's allowed here

00:25:36,630 --> 00:25:42,840
so it's not full extended regular

00:25:38,760 --> 00:25:45,000
expressions right but generally what

00:25:42,840 --> 00:25:46,530
you're doing is taking a string and

00:25:45,000 --> 00:25:47,910
you're just if you're using this so

00:25:46,530 --> 00:25:49,350
you're just trying to hack off something

00:25:47,910 --> 00:25:51,450
from the end of it or something from the

00:25:49,350 --> 00:25:57,929
beginning of it and path name expansion

00:25:51,450 --> 00:26:01,230
actually quite adequate to do that for

00:25:57,929 --> 00:26:03,840
the syntax and stuff for matching

00:26:01,230 --> 00:26:06,240
suffixes or prefixes is identical except

00:26:03,840 --> 00:26:09,990
that we use percents instead of hashes

00:26:06,240 --> 00:26:12,360
and had well I mentioned once to

00:26:09,990 --> 00:26:16,010
somebody else that I didn't remember I

00:26:12,360 --> 00:26:16,010
couldn't ever remember which was which

00:26:17,630 --> 00:26:23,850
okay you're the second person who's told

00:26:21,840 --> 00:26:26,370
me that it's really simple to remember

00:26:23,850 --> 00:26:29,820
which is which and and for years I'll

00:26:26,370 --> 00:26:32,280
admit four years I just pick one because

00:26:29,820 --> 00:26:33,690
I don't remember and then if I get the

00:26:32,280 --> 00:26:35,660
wrong end of the string or it doesn't

00:26:33,690 --> 00:26:41,570
work right I switch to the other one

00:26:35,660 --> 00:26:45,210
so but yeah so you do think of it as the

00:26:41,570 --> 00:26:48,240
pound sign is to the left of the percent

00:26:45,210 --> 00:26:50,130
sign on the keyboard so it takes the

00:26:48,240 --> 00:26:52,490
left side of the string and this one

00:26:50,130 --> 00:26:55,559
takes the right side of the string off

00:26:52,490 --> 00:26:58,049
whether you have one or two makes a

00:26:55,559 --> 00:26:59,850
difference as well and if you have one

00:26:58,049 --> 00:27:02,070
it matches the shortest pattern that

00:26:59,850 --> 00:27:05,299
matches and if you have two it matches

00:27:02,070 --> 00:27:09,690
the longest pattern that matches

00:27:05,299 --> 00:27:13,530
similarly below the I wish I had a

00:27:09,690 --> 00:27:16,410
chalkboard right on now but the last one

00:27:13,530 --> 00:27:20,970
pattern substitution is very similar to

00:27:16,410 --> 00:27:22,559
such a substitution command so very

00:27:20,970 --> 00:27:26,280
often you'll see that it can be used

00:27:22,559 --> 00:27:29,010
instead of using said the syntax is

00:27:26,280 --> 00:27:35,910
dollar sign bracket parameter slash

00:27:29,010 --> 00:27:39,299
pattern slash string close bracket and

00:27:35,910 --> 00:27:41,820
so the idea with it is you look in the

00:27:39,299 --> 00:27:44,160
pattern you look in the parameter to

00:27:41,820 --> 00:27:46,559
match the pattern and when you get a

00:27:44,160 --> 00:27:51,840
match you substitute the string for what

00:27:46,559 --> 00:27:55,110
got matched so we have I think three

00:27:51,840 --> 00:27:57,210
examples to look at quickly here I very

00:27:55,110 --> 00:27:59,910
often see bass name used in scripts

00:27:57,210 --> 00:28:01,590
especially with dollar signs zero to

00:27:59,910 --> 00:28:06,320
determine just the name of the program

00:28:01,590 --> 00:28:10,559
itself and so you'll see something like

00:28:06,320 --> 00:28:13,919
program name equals back kick bass name

00:28:10,559 --> 00:28:15,990
dollar sign zero back tick and the

00:28:13,919 --> 00:28:19,160
demography version of that is saying

00:28:15,990 --> 00:28:24,030
program name equals dollar sign zero

00:28:19,160 --> 00:28:26,130
hash hash star slash though we don't

00:28:24,030 --> 00:28:29,419
need to spawn sub shell so we don't need

00:28:26,130 --> 00:28:29,419
to call external programs

00:28:54,680 --> 00:29:00,420
yeah there was all mention also the the

00:28:57,870 --> 00:29:03,120
demography version is not exactly the

00:29:00,420 --> 00:29:04,620
same as base name so in normal cases

00:29:03,120 --> 00:29:06,420
that would work the same as you would

00:29:04,620 --> 00:29:10,410
expect based name to work but the edge

00:29:06,420 --> 00:29:15,660
cases aren't the same that normally

00:29:10,410 --> 00:29:16,920
doesn't matter to anybody so we can do

00:29:15,660 --> 00:29:21,780
something similar going the other

00:29:16,920 --> 00:29:24,090
direction so for doing their name in

00:29:21,780 --> 00:29:25,920
this case I want to take off well the

00:29:24,090 --> 00:29:27,930
shortest string that Matt that starts

00:29:25,920 --> 00:29:30,390
with a slash I don't really care what's

00:29:27,930 --> 00:29:32,630
after it the previous one I took off the

00:29:30,390 --> 00:29:35,160
longest string that ended in a slash

00:29:32,630 --> 00:29:37,050
these look a little strange to people

00:29:35,160 --> 00:29:39,630
when they first start looking at them

00:29:37,050 --> 00:29:44,330
but once you understand how the pattern

00:29:39,630 --> 00:29:44,330
bit works becomes quite intuitive

00:29:57,430 --> 00:30:01,340
there are a million white history

00:29:59,390 --> 00:30:03,530
remember this well I think this proves

00:30:01,340 --> 00:30:06,250
that I was not abnormal not being able

00:30:03,530 --> 00:30:06,250
to remember it

00:30:08,500 --> 00:30:17,930
okay so last example in this section

00:30:13,450 --> 00:30:20,360
deals with a useless use have said

00:30:17,930 --> 00:30:25,880
although it could be a useless use of TR

00:30:20,360 --> 00:30:27,230
something else what we have often in a

00:30:25,880 --> 00:30:30,320
shell script you'll get a variable that

00:30:27,230 --> 00:30:32,390
has a list of stuff in it and a list of

00:30:30,320 --> 00:30:36,380
stuff normally is going to be separated

00:30:32,390 --> 00:30:39,110
by a space very often when we print that

00:30:36,380 --> 00:30:41,300
out or we save it to a file we want that

00:30:39,110 --> 00:30:43,580
list to be separated by colons or

00:30:41,300 --> 00:30:47,540
semicolons or commas or something else

00:30:43,580 --> 00:30:50,090
other than the space so so here's an

00:30:47,540 --> 00:30:53,540
example that shows how I most often see

00:30:50,090 --> 00:30:56,360
that done I'll mention just as a

00:30:53,540 --> 00:30:58,340
digression this top part isn't really

00:30:56,360 --> 00:31:01,780
part of the talk but it's just a way to

00:30:58,340 --> 00:31:04,610
get a list into a variable for us to use

00:31:01,780 --> 00:31:08,330
but this this thing might look weird to

00:31:04,610 --> 00:31:12,310
some people and that's another another

00:31:08,330 --> 00:31:15,110
strange Shale expansion if you have a

00:31:12,310 --> 00:31:17,960
dollar sign bracket exclamation point

00:31:15,110 --> 00:31:22,010
followed by a pattern what the shell is

00:31:17,960 --> 00:31:24,560
going to do is expand that to be all the

00:31:22,010 --> 00:31:28,220
environment variable names that match

00:31:24,560 --> 00:31:30,140
the pattern so that was just an easy way

00:31:28,220 --> 00:31:35,030
for me to get a shortlist of something

00:31:30,140 --> 00:31:37,430
to work with here so the common solution

00:31:35,030 --> 00:31:41,180
is to echo that variable into either

00:31:37,430 --> 00:31:44,810
said or TR I'm gonna use said because it

00:31:41,180 --> 00:31:48,410
kind of matches structurally how we're

00:31:44,810 --> 00:31:51,370
going to modify it so we do a substitute

00:31:48,410 --> 00:31:55,720
command and just replace the spaces with

00:31:51,370 --> 00:31:55,720
commas when we do that globally

00:31:56,920 --> 00:32:00,460
demography version

00:32:02,340 --> 00:32:10,530
the top parts identical the bottom part

00:32:04,679 --> 00:32:12,750
is a lot shorter we can notice that it

00:32:10,530 --> 00:32:16,650
doesn't quite look right because there's

00:32:12,750 --> 00:32:19,770
more slashes than we had before the

00:32:16,650 --> 00:32:22,860
structure of this substitution is going

00:32:19,770 --> 00:32:25,740
to be you're going to look at this

00:32:22,860 --> 00:32:27,750
variable which is got this stuff in it

00:32:25,740 --> 00:32:30,030
and then there's supposed to be a

00:32:27,750 --> 00:32:34,140
pattern in here followed by a slash

00:32:30,030 --> 00:32:36,240
followed by a string to substitute so

00:32:34,140 --> 00:32:39,270
the string here is the comma I get that

00:32:36,240 --> 00:32:41,370
much and the variable name I get I get

00:32:39,270 --> 00:32:46,070
that much but I have an extra slash

00:32:41,370 --> 00:32:49,679
before the space and that's just a funny

00:32:46,070 --> 00:32:53,040
syntactical thing the space is actually

00:32:49,679 --> 00:32:54,809
the pattern and the slash is a special

00:32:53,040 --> 00:32:59,100
symbol so if the pattern starts with a

00:32:54,809 --> 00:33:01,170
slash then it it matches all occurrences

00:32:59,100 --> 00:33:05,370
that it can find so it's like the G at

00:33:01,170 --> 00:33:07,140
the end of the sudden command but it can

00:33:05,370 --> 00:33:10,620
be a little bit confusing when you look

00:33:07,140 --> 00:33:14,010
at it and see extra slices I'll just

00:33:10,620 --> 00:33:17,580
mention as an aside that if you want to

00:33:14,010 --> 00:33:20,190
chop off the end of a string you can

00:33:17,580 --> 00:33:23,880
also just leave off the last slash and

00:33:20,190 --> 00:33:25,920
the string to delete a hunk and that

00:33:23,880 --> 00:33:27,809
doesn't necessarily delete the end of

00:33:25,920 --> 00:33:33,240
the string it deletes the part that was

00:33:27,809 --> 00:33:37,620
matched anywhere in the string ok we

00:33:33,240 --> 00:33:39,720
have one more one more idea to look at

00:33:37,620 --> 00:33:43,530
where we can do modifies a little bit of

00:33:39,720 --> 00:33:46,050
other stuff bash has some match

00:33:43,530 --> 00:33:48,179
operators and I'm not really going to

00:33:46,050 --> 00:33:50,580
talk about these first two except to say

00:33:48,179 --> 00:33:52,740
that most people use these as if they

00:33:50,580 --> 00:33:54,390
weren't match operators most people use

00:33:52,740 --> 00:33:57,120
them to just test for equality or

00:33:54,390 --> 00:34:01,550
inequality and scripts but the thing on

00:33:57,120 --> 00:34:04,200
the right of these is actually a pattern

00:34:01,550 --> 00:34:07,020
if you just have a string there it's

00:34:04,200 --> 00:34:09,629
going to match for like an exact match

00:34:07,020 --> 00:34:11,850
but you could have a string followed by

00:34:09,629 --> 00:34:13,379
a star for instance and then it would

00:34:11,850 --> 00:34:16,950
match things that match that pre

00:34:13,379 --> 00:34:18,929
Fix so so those are a little bit more

00:34:16,950 --> 00:34:22,589
powerful than most people make them out

00:34:18,929 --> 00:34:25,559
to be those are also restricted to a

00:34:22,589 --> 00:34:29,549
limited kind of pattern matching but

00:34:25,559 --> 00:34:32,609
this one which is very lightly used in

00:34:29,549 --> 00:34:35,009
programs that I see anyway does full

00:34:32,609 --> 00:34:38,909
extended regular expression matching so

00:34:35,009 --> 00:34:41,720
it's it's a very powerful one so equals

00:34:38,909 --> 00:34:47,759
followed by a twiddle lets you match

00:34:41,720 --> 00:34:50,789
arbitrary regular expressions so here's

00:34:47,759 --> 00:34:53,789
an example of well I have some variable

00:34:50,789 --> 00:34:57,539
I'm calling it distro it's got some

00:34:53,789 --> 00:34:59,519
distro name in it and I'm gonna try it I

00:34:57,539 --> 00:35:03,960
want to do something special if it's

00:34:59,519 --> 00:35:05,700
Debian Ubuntu or mint since I'm from the

00:35:03,960 --> 00:35:07,829
Fedora project I'm going to be polite

00:35:05,700 --> 00:35:09,660
and not say what we do something yet

00:35:07,829 --> 00:35:12,380
we're going to do something but I'm not

00:35:09,660 --> 00:35:12,380
going to say what it is

00:35:28,480 --> 00:35:31,590
I'm sorry say that again

00:35:34,950 --> 00:35:52,240
yeah okay well yeah I've been I've been

00:35:47,320 --> 00:35:59,860
optimized is that a case of demographer

00:35:52,240 --> 00:36:01,090
KT demography in the speaker yeah so

00:35:59,860 --> 00:36:03,540
yeah sure there are other ways to

00:36:01,090 --> 00:36:09,970
construct this regular expression and

00:36:03,540 --> 00:36:11,320
some might be better so okay so yeah now

00:36:09,970 --> 00:36:12,790
I thought I was gonna be polite and I'd

00:36:11,320 --> 00:36:14,470
say what we're gonna do if we find one

00:36:12,790 --> 00:36:15,910
of these things but but we need to do

00:36:14,470 --> 00:36:19,450
something special that's all we need to

00:36:15,910 --> 00:36:23,950
know common ways I see things like this

00:36:19,450 --> 00:36:26,980
done in script one is like this which

00:36:23,950 --> 00:36:31,900
works works fine but is a little bit

00:36:26,980 --> 00:36:36,460
awkward and repetitive another way I see

00:36:31,900 --> 00:36:40,270
it done frequently is this which is I

00:36:36,460 --> 00:36:44,230
find more awkward and often I see it

00:36:40,270 --> 00:36:47,680
with the match here on separate lines so

00:36:44,230 --> 00:36:49,090
it is even more awkward if if you're

00:36:47,680 --> 00:36:50,830
gonna do different cases if you're gonna

00:36:49,090 --> 00:36:52,990
actually have different cases using a

00:36:50,830 --> 00:36:55,420
case statement seems to make sense in my

00:36:52,990 --> 00:36:56,920
brain but if all you want to do is if

00:36:55,420 --> 00:36:59,110
it's one of these things do something

00:36:56,920 --> 00:37:01,860
then a case statement doesn't really

00:36:59,110 --> 00:37:05,890
seem to be the right solution

00:37:01,860 --> 00:37:10,000
so my suggestion for a nice way to do

00:37:05,890 --> 00:37:12,040
this at well those other two things do

00:37:10,000 --> 00:37:16,810
demography it right they get rid of the

00:37:12,040 --> 00:37:20,500
grab a nicer way to do this is this way

00:37:16,810 --> 00:37:23,440
where we have a single if statement it

00:37:20,500 --> 00:37:25,870
reads very natural to me and if if

00:37:23,440 --> 00:37:28,330
you're if your instinct was to solve

00:37:25,870 --> 00:37:30,550
this using grep with this regular

00:37:28,330 --> 00:37:33,700
expression or another regular expression

00:37:30,550 --> 00:37:37,210
right doing the same thing here is very

00:37:33,700 --> 00:37:40,260
natural for you because this already

00:37:37,210 --> 00:37:40,260
made sense to you

00:37:43,869 --> 00:37:51,940
okay I think are there any questions

00:37:53,829 --> 00:38:00,789
I'm not sure what time we're supposed to

00:37:55,839 --> 00:38:03,430
be finishing up okay well let me let me

00:38:00,789 --> 00:38:06,999
thank you all for coming and being nice

00:38:03,430 --> 00:38:08,680
to me I want to thank the self people

00:38:06,999 --> 00:38:09,609
for being nice to me they've been very

00:38:08,680 --> 00:38:12,459
nice to me

00:38:09,609 --> 00:38:15,779
please remember to come help out the

00:38:12,459 --> 00:38:19,329
folks in Charlotte at our food drive and

00:38:15,779 --> 00:38:22,779
I just leave you with one last picture

00:38:19,329 --> 00:38:42,039
to kind of remember that this is what

00:38:22,779 --> 00:38:44,799
we're trying to stamp out thank you okay

00:38:42,039 --> 00:38:47,200
that's it's a little it's a little bit

00:38:44,799 --> 00:38:52,119
of a mystery where that came from

00:38:47,200 --> 00:38:53,859
my understanding is that in Britain the

00:38:52,119 --> 00:38:58,029
colonel I should have this actually

00:38:53,859 --> 00:39:01,959
filmed a Margaret it was derived from

00:38:58,029 --> 00:39:06,219
the name of Margaret Maggie Maggie got

00:39:01,959 --> 00:39:10,959
changed into Bloggie and there was a

00:39:06,219 --> 00:39:17,940
little bit of a mmm catty sort of nature

00:39:10,959 --> 00:39:17,940
to that so is that enough

00:39:23,890 --> 00:39:35,090
yeah so so I think like a well I'll let

00:39:31,490 --> 00:39:38,720
the Brits explain it so it came from

00:39:35,090 --> 00:39:41,890
British slang and a group of hackers who

00:39:38,720 --> 00:39:47,090
like get annoyed by useless uses of cat

00:39:41,890 --> 00:39:49,780
coined that term to be the process of

00:39:47,090 --> 00:39:49,780
removing them

00:40:17,930 --> 00:40:23,040
when we created asterisk over a decade

00:40:20,640 --> 00:40:24,960
ago we could not have imagined that

00:40:23,040 --> 00:40:27,150
asterisk would not only become the most

00:40:24,960 --> 00:40:29,250
widely adopted open-source communication

00:40:27,150 --> 00:40:31,320
software on the planet but that it would

00:40:29,250 --> 00:40:32,670
impact the entire industry in the way

00:40:31,320 --> 00:40:34,320
that it has today

00:40:32,670 --> 00:40:36,690
asterisk has found its way in the more

00:40:34,320 --> 00:40:38,940
than 170 countries and virtually every

00:40:36,690 --> 00:40:41,070
Fortune 1000 company the success of

00:40:38,940 --> 00:40:43,170
asterisk has enabled a transition of

00:40:41,070 --> 00:40:45,420
power from the hands of the traditional

00:40:43,170 --> 00:40:47,220
proprietary phone vendors into the hands

00:40:45,420 --> 00:40:50,070
of the users and administrators of phone

00:40:47,220 --> 00:40:51,420
systems using this power our customers

00:40:50,070 --> 00:40:53,550
have created all sorts of business

00:40:51,420 --> 00:40:55,200
changing applications from small office

00:40:53,550 --> 00:40:57,120
phone systems to mission-critical call

00:40:55,200 --> 00:40:59,130
centers the international carrier

00:40:57,120 --> 00:41:00,750
networks in fact there's even an entire

00:40:59,130 --> 00:41:02,760
country those communications

00:41:00,750 --> 00:41:04,500
infrastructure runs on asters the Jim

00:41:02,760 --> 00:41:06,660
has always been about creating

00:41:04,500 --> 00:41:08,100
technology that expands communications

00:41:06,660 --> 00:41:10,140
capabilities and ways that we could

00:41:08,100 --> 00:41:12,180
never have imagined and that's part of

00:41:10,140 --> 00:41:14,310
what's game-changing about Digium today

00:41:12,180 --> 00:41:16,710
we're doing it again this time by

00:41:14,310 --> 00:41:18,990
introducing a new family of HD IP phones

00:41:16,710 --> 00:41:20,850
that extends control of the user all the

00:41:18,990 --> 00:41:22,650
way to the desktop the launch of these

00:41:20,850 --> 00:41:24,990
new products represents the next phase

00:41:22,650 --> 00:41:26,640
indigenous history of innovation these

00:41:24,990 --> 00:41:28,590
are the first and only IP phones

00:41:26,640 --> 00:41:30,180
designed to fully leverage the power of

00:41:28,590 --> 00:41:31,800
Astra's when we first discussed our

00:41:30,180 --> 00:41:33,630
expectations for building a family of

00:41:31,800 --> 00:41:35,760
phones for use with asterisk our

00:41:33,630 --> 00:41:37,500
requirements were pretty simple we asked

00:41:35,760 --> 00:41:39,150
the team to build the phones such that

00:41:37,500 --> 00:41:41,340
they were easy to install integrate

00:41:39,150 --> 00:41:43,170
provision and use I think you'll soon

00:41:41,340 --> 00:41:45,750
agree our engineers have delivered on

00:41:43,170 --> 00:41:47,400
that goal user feedback is validating

00:41:45,750 --> 00:41:49,650
that when it comes to operation with

00:41:47,400 --> 00:41:51,930
Astro space systems including our own

00:41:49,650 --> 00:41:54,510
Switchvox based product these are the

00:41:51,930 --> 00:41:56,040
easiest to use best integrated most

00:41:54,510 --> 00:41:58,800
interoperable products on the market

00:41:56,040 --> 00:42:01,380
today the digital phones will initially

00:41:58,800 --> 00:42:03,150
include three IP des foams uniquely

00:42:01,380 --> 00:42:05,460
designed to complement any asterisk or

00:42:03,150 --> 00:42:06,990
switch box based solution these phones

00:42:05,460 --> 00:42:09,750
are different for a number of reasons

00:42:06,990 --> 00:42:12,180
first there is cluesive Lee designed for

00:42:09,750 --> 00:42:13,800
use with esters secondly we've made it

00:42:12,180 --> 00:42:16,260
really easy to auto discover and

00:42:13,800 --> 00:42:17,370
provision the phones next we've made it

00:42:16,260 --> 00:42:19,890
easy for the phones to access

00:42:17,370 --> 00:42:21,540
information inside of asterisk allowing

00:42:19,890 --> 00:42:22,640
tight coupling between an application

00:42:21,540 --> 00:42:24,600
and

00:42:22,640 --> 00:42:25,770
additionally we've created an

00:42:24,600 --> 00:42:27,840
applications engine

00:42:25,770 --> 00:42:30,030
that allows users and developers to

00:42:27,840 --> 00:42:32,850
create and run their own apps on the

00:42:30,030 --> 00:42:34,860
phone and finally we've done all of this

00:42:32,850 --> 00:42:36,870
at a very compelling price point at

00:42:34,860 --> 00:42:38,790
Digium were always thinking of ways to

00:42:36,870 --> 00:42:41,130
give our customers the best value in

00:42:38,790 --> 00:42:42,450
business phone systems and also give

00:42:41,130 --> 00:42:44,550
them the power to create their own

00:42:42,450 --> 00:42:46,350
solutions or any communications

00:42:44,550 --> 00:42:48,000
challenge well continue to push the

00:42:46,350 --> 00:42:49,710
boundaries not only to make Astra's

00:42:48,000 --> 00:42:51,810
cooler bastard more technologically

00:42:49,710 --> 00:42:54,090
feature-rich but to make asterisk avoid

00:42:51,810 --> 00:42:55,410
communications even easier and together

00:42:54,090 --> 00:42:58,910
we'll change the way the world

00:42:55,410 --> 00:42:58,910
communicates again

00:43:39,980 --> 00:43:47,339
how's that so every way this is the way

00:43:43,680 --> 00:43:49,079
to better utilize all your resources and

00:43:47,339 --> 00:43:52,410
it makes managing all your resources

00:43:49,079 --> 00:43:56,549
pretty easy all of the innovation is

00:43:52,410 --> 00:43:59,730
happening in open source the the

00:43:56,549 --> 00:44:01,559
collaborative nature and of the you know

00:43:59,730 --> 00:44:03,480
of the community and then the speed at

00:44:01,559 --> 00:44:05,400
which these are these you know these

00:44:03,480 --> 00:44:07,559
these deficiencies these bugs are

00:44:05,400 --> 00:44:09,930
getting discovered and then fixed is it

00:44:07,559 --> 00:44:11,369
I think that really shows the power of

00:44:09,930 --> 00:44:14,130
the you know of the open source

00:44:11,369 --> 00:44:16,190
community it is global and it's

00:44:14,130 --> 00:44:19,680
definitely because of the users

00:44:16,190 --> 00:44:25,440
community people are extremely friendly

00:44:19,680 --> 00:44:27,210
and they're always ready to help if you

00:44:25,440 --> 00:44:28,859
go an entire see any day you'll see

00:44:27,210 --> 00:44:30,750
these guys helping each other out and

00:44:28,859 --> 00:44:33,660
they're all doing it like in a selfless

00:44:30,750 --> 00:44:35,250
manner the product is transparent for

00:44:33,660 --> 00:44:39,480
everyone everyone can look at the

00:44:35,250 --> 00:44:41,760
codebase everyone can see how cows duck

00:44:39,480 --> 00:44:42,569
is being built nothing nothing is

00:44:41,760 --> 00:44:47,970
proprietary

00:44:42,569 --> 00:44:50,579
everything is open in many ways it's

00:44:47,970 --> 00:44:55,079
absolutely vital to the to the unborn

00:44:50,579 --> 00:44:59,279
health child stack the most exciting

00:44:55,079 --> 00:45:02,109
event in recent memory for me was our

00:44:59,279 --> 00:45:04,509
first developer boot camp

00:45:02,109 --> 00:45:07,390
and our call gave people I think maybe

00:45:04,509 --> 00:45:11,259
two weeks notice to come attend I was

00:45:07,390 --> 00:45:15,549
expecting 25 or 30 people so if we ended

00:45:11,259 --> 00:45:18,369
up with 87 people and had to go get more

00:45:15,549 --> 00:45:20,890
chairs in the room twice everything

00:45:18,369 --> 00:45:24,160
within cloud computing is commodity and

00:45:20,890 --> 00:45:27,190
is open-source and so I don't think that

00:45:24,160 --> 00:45:28,989
you will you'll see anywhere where open

00:45:27,190 --> 00:45:32,019
source is not pervasive in cloud

00:45:28,989 --> 00:45:34,720
computing and so I think it's I think

00:45:32,019 --> 00:45:36,069
it's an assumption I think when you talk

00:45:34,720 --> 00:45:37,239
about cloud computing you're really

00:45:36,069 --> 00:45:42,190
talking about open source cloud

00:45:37,239 --> 00:45:45,339
computing cloud sack is a robust

00:45:42,190 --> 00:45:47,650
solution for large deployments you have

00:45:45,339 --> 00:45:50,940
dozens of data centers and thousands of

00:45:47,650 --> 00:45:53,890
servers in each data centers these

00:45:50,940 --> 00:45:57,220
hardware is going to fail and cloud

00:45:53,890 --> 00:46:00,400
stack is designed to handle number one

00:45:57,220 --> 00:46:02,499
that mass scale number two it's designed

00:46:00,400 --> 00:46:06,130
to handle the failure that inevitably

00:46:02,499 --> 00:46:08,309
happens in large deployments we started

00:46:06,130 --> 00:46:12,970
working on contact over four years ago

00:46:08,309 --> 00:46:14,220
and it was the original set of people

00:46:12,970 --> 00:46:17,019
working on it

00:46:14,220 --> 00:46:21,130
background delivering software to telcos

00:46:17,019 --> 00:46:24,670
and service providers lots of QA lots of

00:46:21,130 --> 00:46:28,569
users actually using it high

00:46:24,670 --> 00:46:31,390
availability is a key feature multiple

00:46:28,569 --> 00:46:33,430
hypervisor support different network

00:46:31,390 --> 00:46:33,960
models we can pick up what I was just

00:46:33,430 --> 00:46:36,730
you better

00:46:33,960 --> 00:46:39,930
well tech management server can be

00:46:36,730 --> 00:46:42,700
deployed in different physical machines

00:46:39,930 --> 00:46:44,349
it definitely has a huge footprint it's

00:46:42,700 --> 00:46:49,869
being deployed everywhere there's a

00:46:44,349 --> 00:46:51,359
major movie studio that they were using

00:46:49,869 --> 00:46:54,700
cloud stack they were using it to

00:46:51,359 --> 00:46:56,859
transmit video and I thought that was

00:46:54,700 --> 00:46:58,210
terribly fascinating what I found more

00:46:56,859 --> 00:47:01,450
fascinating is what they did during

00:46:58,210 --> 00:47:04,239
lunch where they would spin up you know

00:47:01,450 --> 00:47:05,589
50 or 60 game servers then as soon as

00:47:04,239 --> 00:47:06,230
lunch was over they would destroy all

00:47:05,589 --> 00:47:09,050
the instance

00:47:06,230 --> 00:47:11,810
and get back to doing real work cloud

00:47:09,050 --> 00:47:13,190
stack is vast it touches so many

00:47:11,810 --> 00:47:15,109
different aspects and there's no one

00:47:13,190 --> 00:47:16,250
person that's kind of like a master of

00:47:15,109 --> 00:47:19,490
all those realms

00:47:16,250 --> 00:47:22,099
I think cloud stack as a project is

00:47:19,490 --> 00:47:24,470
going to be one of the leaders simply

00:47:22,099 --> 00:47:29,390
because it's some of the most feature

00:47:24,470 --> 00:47:33,410
full and and and robust platforms I hope

00:47:29,390 --> 00:47:36,190
they learn I don't see you living

00:47:33,410 --> 00:47:36,190

YouTube URL: https://www.youtube.com/watch?v=_ta47TtZ6XQ


