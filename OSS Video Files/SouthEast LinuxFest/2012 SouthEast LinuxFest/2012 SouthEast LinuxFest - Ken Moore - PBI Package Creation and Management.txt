Title: 2012 SouthEast LinuxFest - Ken Moore - PBI Package Creation and Management
Publication date: 2013-05-06
Playlist: 2012 SouthEast LinuxFest
Description: 
	2012 SouthEast LinuxFest
Ken Moore
PBI Package Creation and Management
Captions: 
	00:00:00,000 --> 00:00:05,310
the following presentation was recorded

00:00:02,520 --> 00:00:08,069
the 2012 southeast linux fest in

00:00:05,310 --> 00:00:10,440
charlotte north carolina it is licensed

00:00:08,069 --> 00:00:12,120
under a creative commons license for

00:00:10,440 --> 00:00:17,609
more information about the southeast

00:00:12,120 --> 00:00:19,470
linux fest visit w wh linux pc org the

00:00:17,609 --> 00:00:22,350
southeast linux fest would like to thank

00:00:19,470 --> 00:00:26,119
the following diamond sponsors in 2012

00:00:22,350 --> 00:00:26,119
for helping make these videos possible

00:00:55,489 --> 00:00:58,489
yes

00:00:59,910 --> 00:01:07,690
eztv I yes all right well thank you for

00:01:05,950 --> 00:01:10,480
coming today I'm going to talk

00:01:07,690 --> 00:01:13,240
specifically about the pbi or push

00:01:10,480 --> 00:01:16,290
button installer format but I'm going to

00:01:13,240 --> 00:01:19,570
focus specifically on creating your own

00:01:16,290 --> 00:01:21,220
push button installer packages and even

00:01:19,570 --> 00:01:22,870
how to manage them for instance you're a

00:01:21,220 --> 00:01:24,580
small business and want to have your own

00:01:22,870 --> 00:01:26,560
little repository of packages that you

00:01:24,580 --> 00:01:30,190
maintain I'm going to show you how to do

00:01:26,560 --> 00:01:32,140
all of that here in this coming talk so

00:01:30,190 --> 00:01:34,780
I'm going to start with just doing a

00:01:32,140 --> 00:01:36,600
quick summary of the pbi format for

00:01:34,780 --> 00:01:39,810
those of you who don't know what it is

00:01:36,600 --> 00:01:42,580
I'd like then to go on and talk about

00:01:39,810 --> 00:01:45,520
actually pbi creation there are two main

00:01:42,580 --> 00:01:48,460
parts to that building a module and then

00:01:45,520 --> 00:01:52,630
building the actual startup pbi file

00:01:48,460 --> 00:01:55,390
itself after that we would like to do

00:01:52,630 --> 00:01:57,070
pbi management this is again as I said

00:01:55,390 --> 00:02:00,009
what if you're a small business and

00:01:57,070 --> 00:02:02,890
there are five programs that you really

00:02:00,009 --> 00:02:04,750
really want everybody in your company to

00:02:02,890 --> 00:02:07,330
run and you want the absolute bleeding

00:02:04,750 --> 00:02:09,429
edge versions of these packages you can

00:02:07,330 --> 00:02:11,709
maintain that yourself and build them

00:02:09,429 --> 00:02:13,330
yourself as soon as they're updated and

00:02:11,709 --> 00:02:14,920
I'm going to show you how to do that and

00:02:13,330 --> 00:02:18,040
push them out so that all the people in

00:02:14,920 --> 00:02:20,620
your company can get ahold of them next

00:02:18,040 --> 00:02:23,170
and finally I'm going to talk about easy

00:02:20,620 --> 00:02:26,560
pbi this is a program that I helped

00:02:23,170 --> 00:02:29,650
co-create and it just makes it extremely

00:02:26,560 --> 00:02:31,570
easy to build PBIS on your local system

00:02:29,650 --> 00:02:34,660
so that you don't need to worry about

00:02:31,570 --> 00:02:36,580
some you know all-powerful distribution

00:02:34,660 --> 00:02:38,320
center waiting for them to finally

00:02:36,580 --> 00:02:40,840
release the proper version of the

00:02:38,320 --> 00:02:42,459
program X that you are looking for you

00:02:40,840 --> 00:02:44,019
can build it yourself and it shouldn't

00:02:42,459 --> 00:02:45,400
take all that long and it should be

00:02:44,019 --> 00:02:47,500
really really easy and that's the

00:02:45,400 --> 00:02:49,420
purpose of easy pbi so I'll give you a

00:02:47,500 --> 00:02:50,709
brief run-through on that and then if we

00:02:49,420 --> 00:02:55,060
have time at the end I might also

00:02:50,709 --> 00:02:56,890
demonstrate how to use it so first let's

00:02:55,060 --> 00:02:59,049
go through the pbi format let's just do

00:02:56,890 --> 00:03:02,590
a quick summary of this first off the

00:02:59,049 --> 00:03:06,160
pbi format is system independent by this

00:03:02,590 --> 00:03:09,310
I mean aside from the dependencies

00:03:06,160 --> 00:03:11,080
required from running freebsd in the

00:03:09,310 --> 00:03:15,190
local system which current

00:03:11,080 --> 00:03:17,560
that is the main dependencies pbis do

00:03:15,190 --> 00:03:19,450
not interact with any other packages

00:03:17,560 --> 00:03:21,250
that you have installed in your main

00:03:19,450 --> 00:03:22,900
system it doesn't matter what window

00:03:21,250 --> 00:03:24,970
managers you are running it doesn't

00:03:22,900 --> 00:03:26,710
matter what desktop environments as long

00:03:24,970 --> 00:03:29,110
as you have that base FreeBSD

00:03:26,710 --> 00:03:32,200
installation pbi system will work

00:03:29,110 --> 00:03:34,840
completely independently so there is a

00:03:32,200 --> 00:03:36,220
ppi framework that will depend on the

00:03:34,840 --> 00:03:40,060
local system as well but then each

00:03:36,220 --> 00:03:42,850
individual pbi itself does not depend

00:03:40,060 --> 00:03:46,630
upon any of the other PB is the reason

00:03:42,850 --> 00:03:48,700
for this the pbi format specifically

00:03:46,630 --> 00:03:50,890
contains not only the program think

00:03:48,700 --> 00:03:53,730
we're interested in but also all

00:03:50,890 --> 00:03:58,030
necessary dependencies for that PB I

00:03:53,730 --> 00:04:01,030
into one small package that well

00:03:58,030 --> 00:04:02,590
sometimes it's small as you'll see some

00:04:01,030 --> 00:04:04,410
packages can get quite large when you

00:04:02,590 --> 00:04:07,180
wrap up all the dependencies themselves

00:04:04,410 --> 00:04:10,450
but the reason for this is once you have

00:04:07,180 --> 00:04:13,240
that one package that pbi you can then

00:04:10,450 --> 00:04:14,290
transport to any system that you want it

00:04:13,240 --> 00:04:16,000
doesn't need to have an internet

00:04:14,290 --> 00:04:18,400
connection you don't need any kind of

00:04:16,000 --> 00:04:20,560
outside external influences on that

00:04:18,400 --> 00:04:23,169
system and you can install this PB I to

00:04:20,560 --> 00:04:25,419
your system it will go into its own

00:04:23,169 --> 00:04:26,860
directory under the pbi format it does

00:04:25,419 --> 00:04:29,710
not interact with the rest of your

00:04:26,860 --> 00:04:31,780
system as I mentioned earlier all of the

00:04:29,710 --> 00:04:33,220
things in that directory it's everything

00:04:31,780 --> 00:04:36,940
it contains completely self-contained

00:04:33,220 --> 00:04:39,460
there which leads us to the next one pbi

00:04:36,940 --> 00:04:42,100
number one let's say its application a

00:04:39,460 --> 00:04:44,950
it has a dependency of say application

00:04:42,100 --> 00:04:48,970
be and then a couple other libraries Lib

00:04:44,950 --> 00:04:51,130
C would d alright pbi number two well

00:04:48,970 --> 00:04:53,020
that might be application x it might

00:04:51,130 --> 00:04:55,600
have a saint one of the same libraries

00:04:53,020 --> 00:04:57,550
as application a for instance Lib C is

00:04:55,600 --> 00:05:00,910
what I have here but then additional

00:04:57,550 --> 00:05:03,430
libraries lib d live e each pbi contains

00:05:00,910 --> 00:05:05,740
everything that it needs it does not

00:05:03,430 --> 00:05:09,040
care what other ppl have on your system

00:05:05,740 --> 00:05:14,050
it doesn't even care what other ppl them

00:05:09,040 --> 00:05:16,870
is completely self-contained when pbis

00:05:14,050 --> 00:05:18,910
are installed they actually utilize a

00:05:16,870 --> 00:05:21,100
system of sharing memories so that you

00:05:18,910 --> 00:05:22,270
were only running one copy of each

00:05:21,100 --> 00:05:25,270
library at

00:05:22,270 --> 00:05:27,550
time in order to accomplish this when

00:05:25,270 --> 00:05:29,710
pbis are installed into your system in

00:05:27,550 --> 00:05:31,390
this framework that we have here there's

00:05:29,710 --> 00:05:33,340
actually what's called a hash dirt

00:05:31,390 --> 00:05:35,500
inside that framework where the

00:05:33,340 --> 00:05:37,630
libraries are actually placed then

00:05:35,500 --> 00:05:40,720
through a system of hard links linked

00:05:37,630 --> 00:05:42,940
into the appropriate PBIS is needed the

00:05:40,720 --> 00:05:44,410
pbi framework itself has a daemon that

00:05:42,940 --> 00:05:47,140
runs in the background and it keeps

00:05:44,410 --> 00:05:49,270
track of this hash door removing any

00:05:47,140 --> 00:05:52,150
libraries or files that are no longer

00:05:49,270 --> 00:05:55,690
needed by installed PBIS for instance if

00:05:52,150 --> 00:05:58,390
you were to remove pbi number one here

00:05:55,690 --> 00:06:00,280
which has lib d number three once you

00:05:58,390 --> 00:06:02,770
remove that pbi you'll see that my other

00:06:00,280 --> 00:06:04,360
program doesn't depend on it so the pbi

00:06:02,770 --> 00:06:06,670
Damon that is running in the framework

00:06:04,360 --> 00:06:08,860
will recognize that and remove and trim

00:06:06,670 --> 00:06:12,640
out any files that are no longer needed

00:06:08,860 --> 00:06:15,220
anyway there however what about lib a

00:06:12,640 --> 00:06:17,560
dot one both programs require that so

00:06:15,220 --> 00:06:20,800
once it's removed from if pbi number one

00:06:17,560 --> 00:06:22,690
is removed live a dot one will still

00:06:20,800 --> 00:06:25,240
remain because it recognizes the

00:06:22,690 --> 00:06:27,100
inherent dependency from pbi number two

00:06:25,240 --> 00:06:30,130
in order to keep that shared library it

00:06:27,100 --> 00:06:33,460
really only keeps one copy on your file

00:06:30,130 --> 00:06:35,800
system this means that while the pbi

00:06:33,460 --> 00:06:37,690
package itself the single file that you

00:06:35,800 --> 00:06:40,690
can transfer around between computers

00:06:37,690 --> 00:06:43,870
might be large let's say the Firefox pbi

00:06:40,690 --> 00:06:45,340
it might be 200 megabytes or so once you

00:06:43,870 --> 00:06:47,710
install it however it doesn't

00:06:45,340 --> 00:06:49,570
necessarily take up 200 megabytes or so

00:06:47,710 --> 00:06:51,280
of your hard drive space it really

00:06:49,570 --> 00:06:53,530
depends on what you already have

00:06:51,280 --> 00:06:55,630
installed and it will only move over the

00:06:53,530 --> 00:06:58,300
ones that it needs at that time and then

00:06:55,630 --> 00:06:59,620
bump up how many applications are using

00:06:58,300 --> 00:07:08,830
the other libraries if there are already

00:06:59,620 --> 00:07:11,380
there another nice format thing about

00:07:08,830 --> 00:07:13,900
the PBIS is they're extremely easy to

00:07:11,380 --> 00:07:16,420
install and remove because they are kept

00:07:13,900 --> 00:07:19,510
separate from your main operating system

00:07:16,420 --> 00:07:21,520
your main system it doesn't really

00:07:19,510 --> 00:07:23,230
depend upon anything else there so you

00:07:21,520 --> 00:07:26,830
don't have to worry about incompatible

00:07:23,230 --> 00:07:30,040
libraries or just version conflicts or

00:07:26,830 --> 00:07:31,810
anything like that so you can just add

00:07:30,040 --> 00:07:33,880
them remove them update them all without

00:07:31,810 --> 00:07:34,510
worry of breaking anything else in your

00:07:33,880 --> 00:07:37,270
mains this

00:07:34,510 --> 00:07:39,130
done in order to utilize adding them

00:07:37,270 --> 00:07:41,350
removing them easily there's two main

00:07:39,130 --> 00:07:44,230
methods you can do that the first is via

00:07:41,350 --> 00:07:47,350
a CLI command line interface command

00:07:44,230 --> 00:07:49,840
variant simple it's pbi underscore add

00:07:47,350 --> 00:07:53,680
and then you give it the pbi file that

00:07:49,840 --> 00:07:55,150
you have that will it check the file for

00:07:53,680 --> 00:07:57,160
some security stuff which I'll talk

00:07:55,150 --> 00:07:59,190
about in a moment and then it will

00:07:57,160 --> 00:08:02,080
extract it onto your system and be done

00:07:59,190 --> 00:08:04,120
that's simple to remove it exactly the

00:08:02,080 --> 00:08:05,890
same thang pbi underscore remove and

00:08:04,120 --> 00:08:07,750
then you give it the name of the pbi

00:08:05,890 --> 00:08:09,280
that's on your system and it will go

00:08:07,750 --> 00:08:11,800
ahead and remove that and clean up all

00:08:09,280 --> 00:08:13,780
the dependencies and everything so it's

00:08:11,800 --> 00:08:15,310
very simple to remove and that's all via

00:08:13,780 --> 00:08:17,800
command line but what if you don't want

00:08:15,310 --> 00:08:21,190
to run the command line there is also a

00:08:17,800 --> 00:08:23,560
QT GUI installer so if you ever just

00:08:21,190 --> 00:08:25,990
double-click on a pbi file from your

00:08:23,560 --> 00:08:28,900
desktop it will open up this nice little

00:08:25,990 --> 00:08:30,970
interface simple installer box and

00:08:28,900 --> 00:08:35,020
basically it's just a next next done and

00:08:30,970 --> 00:08:38,680
that's all it takes to install nice

00:08:35,020 --> 00:08:42,729
quick easy and simple that's the way we

00:08:38,680 --> 00:08:44,740
like it now I mentioned before there are

00:08:42,729 --> 00:08:48,550
some security methods built-in to the

00:08:44,740 --> 00:08:50,950
pbi system the first of these is sha-256

00:08:48,550 --> 00:08:53,920
checksum verification whenever you

00:08:50,950 --> 00:08:56,920
download APB I it will actually compare

00:08:53,920 --> 00:09:00,400
the checksum for that file to the

00:08:56,920 --> 00:09:02,230
checksum that it should have that is the

00:09:00,400 --> 00:09:04,860
easy way to tell whether or not it has

00:09:02,230 --> 00:09:07,270
been tampered with before downloading or

00:09:04,860 --> 00:09:08,710
maybe it got corrupted during download

00:09:07,270 --> 00:09:10,350
or something didn't get copied right

00:09:08,710 --> 00:09:12,370
it's a nice way to check for that an

00:09:10,350 --> 00:09:14,230
additional method of security that's

00:09:12,370 --> 00:09:16,420
available within the pbi system is

00:09:14,230 --> 00:09:21,370
actual digital key signatures using

00:09:16,420 --> 00:09:23,830
openssl keys when somebody builds a pbi

00:09:21,370 --> 00:09:27,160
you actually have the option to include

00:09:23,830 --> 00:09:29,380
a digital signature in that pbi that

00:09:27,160 --> 00:09:30,940
signs all the important files so any

00:09:29,380 --> 00:09:33,100
scripts that would be run during

00:09:30,940 --> 00:09:35,380
installation or after installation

00:09:33,100 --> 00:09:38,920
anything like that gets signed by this

00:09:35,380 --> 00:09:41,410
digital key so that if the pbi is

00:09:38,920 --> 00:09:44,470
tampered with before you get a copy of

00:09:41,410 --> 00:09:46,030
it it will fail these key checks to make

00:09:44,470 --> 00:09:47,350
and let you know that someone has

00:09:46,030 --> 00:09:47,900
tampered with this because it no longer

00:09:47,350 --> 00:09:50,390
mad

00:09:47,900 --> 00:09:51,890
those some files have been changed since

00:09:50,390 --> 00:09:55,190
the time it was built and you received

00:09:51,890 --> 00:09:56,990
it so for instance here is a quick pbi

00:09:55,190 --> 00:09:59,300
that i put together and i didn't put any

00:09:56,990 --> 00:10:02,240
signature in it whatsoever and of course

00:09:59,300 --> 00:10:03,860
it failed the key checks so it warns you

00:10:02,240 --> 00:10:05,990
right here during the GUI installing

00:10:03,860 --> 00:10:08,570
that there's no digital signature now

00:10:05,990 --> 00:10:10,640
you can if you would like go ahead and

00:10:08,570 --> 00:10:12,140
install it anyway generally not

00:10:10,640 --> 00:10:14,000
recommended unless you trust the source

00:10:12,140 --> 00:10:18,080
in this case I built it so I trust

00:10:14,000 --> 00:10:19,970
myself from the command line interface

00:10:18,080 --> 00:10:21,800
there is another way it also checks that

00:10:19,970 --> 00:10:23,870
it there it will not necessarily give

00:10:21,800 --> 00:10:26,750
you the option to continue on it simply

00:10:23,870 --> 00:10:28,760
stops and says key check mismatch you

00:10:26,750 --> 00:10:30,950
have to run it with an extra option to

00:10:28,760 --> 00:10:34,760
not check signature and then you can

00:10:30,950 --> 00:10:36,830
install it alright so those are a couple

00:10:34,760 --> 00:10:41,330
the nice security features that are

00:10:36,830 --> 00:10:43,100
built into the pbi format finally what

00:10:41,330 --> 00:10:46,280
if you have that two hundred megabyte

00:10:43,100 --> 00:10:49,040
Firefox pbi that you installed but a new

00:10:46,280 --> 00:10:50,960
version comes out it's really a pain to

00:10:49,040 --> 00:10:53,150
have to download another 200 plus

00:10:50,960 --> 00:10:54,980
megabyte version of Firefox just to get

00:10:53,150 --> 00:10:58,640
the latest version and reinstall it on

00:10:54,980 --> 00:11:01,610
your system so PB is also utilize what

00:10:58,640 --> 00:11:03,860
we call binary patching this is simply

00:11:01,610 --> 00:11:05,240
once you have two PB is safe or two

00:11:03,860 --> 00:11:07,850
different versions of the same program

00:11:05,240 --> 00:11:10,550
you can create a patch from the first

00:11:07,850 --> 00:11:12,800
version to the second version that patch

00:11:10,550 --> 00:11:15,350
contains only the files that have

00:11:12,800 --> 00:11:17,840
actually changed within the pbi so for

00:11:15,350 --> 00:11:19,820
instance in an update of firefox from

00:11:17,840 --> 00:11:21,710
you know version whatever to the next

00:11:19,820 --> 00:11:23,780
version there might only be like five

00:11:21,710 --> 00:11:25,790
files that have changed in that case

00:11:23,780 --> 00:11:28,610
your patch file could be easily under a

00:11:25,790 --> 00:11:30,680
megabyte or two so this makes it much

00:11:28,610 --> 00:11:32,150
easier to keep your system up to date

00:11:30,680 --> 00:11:34,310
keep your applications up to date

00:11:32,150 --> 00:11:35,990
without huge downloads even though the

00:11:34,310 --> 00:11:38,060
initial download of a PB I might be

00:11:35,990 --> 00:11:40,450
larger than you expect for regular

00:11:38,060 --> 00:11:40,450
programs

00:11:44,139 --> 00:11:48,499
okay now let's move on that was just a

00:11:46,519 --> 00:11:50,240
brief summary of the pbi format now

00:11:48,499 --> 00:11:53,930
let's actually talk about how to create

00:11:50,240 --> 00:11:56,660
your own PBIS the pbi system actually

00:11:53,930 --> 00:11:58,910
consists of two different pieces the

00:11:56,660 --> 00:12:01,480
first is what's called the pbi module

00:11:58,910 --> 00:12:04,639
this is kind of like your roadmap or

00:12:01,480 --> 00:12:06,860
your yeah your roadmap basically for how

00:12:04,639 --> 00:12:09,680
to build the pbi it contains all the

00:12:06,860 --> 00:12:12,860
instructions for what program you're

00:12:09,680 --> 00:12:14,930
going to build what version is it what

00:12:12,860 --> 00:12:16,819
is the program author does the program

00:12:14,930 --> 00:12:18,889
author have a website and things like

00:12:16,819 --> 00:12:20,749
that that's where you put all of the

00:12:18,889 --> 00:12:25,009
information that you need for that

00:12:20,749 --> 00:12:27,499
particular program and application you

00:12:25,009 --> 00:12:29,329
can also put in custom graphics that's

00:12:27,499 --> 00:12:31,189
where you would place any special icons

00:12:29,329 --> 00:12:33,170
that are used for the program so for

00:12:31,189 --> 00:12:36,379
instance the Firefox icon for a Firefox

00:12:33,170 --> 00:12:37,819
pbi you all can also place desktop and

00:12:36,379 --> 00:12:39,759
menu entries these are the things that

00:12:37,819 --> 00:12:42,620
would appear on your desktop or in the

00:12:39,759 --> 00:12:44,089
menu on the side so that you can just

00:12:42,620 --> 00:12:46,100
run the program easily without i'm going

00:12:44,089 --> 00:12:48,589
to resort to the command line and then

00:12:46,100 --> 00:12:50,990
finally mimetypes if the program has

00:12:48,589 --> 00:12:53,029
specific is specifically supposed to run

00:12:50,990 --> 00:12:55,309
for a particular type of extension you

00:12:53,029 --> 00:12:58,670
can set that within xdg compliant mime

00:12:55,309 --> 00:13:00,620
types as well once you have the module

00:12:58,670 --> 00:13:02,600
which is fairly small and fairly easy to

00:13:00,620 --> 00:13:06,019
make I'll show you an easy way to do it

00:13:02,600 --> 00:13:08,449
use an easy PPI later then you can use

00:13:06,019 --> 00:13:10,100
the module to actually build the pbi

00:13:08,449 --> 00:13:12,620
this is what takes up a bulk of your

00:13:10,100 --> 00:13:14,990
time because it runs and compiles your

00:13:12,620 --> 00:13:18,110
entire program plus all the dependencies

00:13:14,990 --> 00:13:19,759
for that program so it might take a lot

00:13:18,110 --> 00:13:21,529
longer than just doing the program

00:13:19,759 --> 00:13:22,790
itself because it also has to go through

00:13:21,529 --> 00:13:24,980
and do you know however many

00:13:22,790 --> 00:13:27,949
dependencies are there are for that

00:13:24,980 --> 00:13:30,679
program however once it is done

00:13:27,949 --> 00:13:33,529
compiling them all sometimes and in fact

00:13:30,679 --> 00:13:35,990
usually there are a lot of dependencies

00:13:33,529 --> 00:13:38,300
for programs that do not necessarily

00:13:35,990 --> 00:13:40,459
need to be there for the program to run

00:13:38,300 --> 00:13:43,370
simply for it to build so for instance

00:13:40,459 --> 00:13:45,439
some compilers and things like that so

00:13:43,370 --> 00:13:46,999
what the pbi is do is it actually goes

00:13:45,439 --> 00:13:49,309
through and it cleans the packages

00:13:46,999 --> 00:13:51,620
afterwards to remove any programs that

00:13:49,309 --> 00:13:54,019
are not necessary for running the main

00:13:51,620 --> 00:13:55,769
program this helps to shrink down the

00:13:54,019 --> 00:13:58,499
number of files and the

00:13:55,769 --> 00:14:01,290
eyes of the initial PPI itself and then

00:13:58,499 --> 00:14:03,929
finally it compresses it all again to

00:14:01,290 --> 00:14:06,389
decrease the file size and then it

00:14:03,929 --> 00:14:07,980
packages it as a PPI using everything

00:14:06,389 --> 00:14:10,769
else that you have in the module like

00:14:07,980 --> 00:14:13,259
the icons the menu desktop and menu

00:14:10,769 --> 00:14:17,329
entries etc then it puts it all together

00:14:13,259 --> 00:14:17,329
in a nice format that can be used in red

00:14:17,389 --> 00:14:22,529
all right so let's talk about how to

00:14:20,009 --> 00:14:26,309
build modules and specifically the

00:14:22,529 --> 00:14:29,939
module format first the main thing that

00:14:26,309 --> 00:14:32,670
you won't want is your PB I com this is

00:14:29,939 --> 00:14:34,589
simply a shell configuration script that

00:14:32,670 --> 00:14:37,199
sets all the internal variables that are

00:14:34,589 --> 00:14:39,569
needed for a PB I for instance program

00:14:37,199 --> 00:14:43,499
author program website program name

00:14:39,569 --> 00:14:45,269
program version things like that this is

00:14:43,499 --> 00:14:48,410
where you would set all those is also

00:14:45,269 --> 00:14:52,319
where you would set what FreeBSD port

00:14:48,410 --> 00:14:55,079
PBIS are easily created from FreeBSD

00:14:52,319 --> 00:14:57,059
ports using a few of these configuration

00:14:55,079 --> 00:14:58,980
options and I'll go into more detail

00:14:57,059 --> 00:15:01,649
about this configuration file here in

00:14:58,980 --> 00:15:04,949
just a little bit second is the external

00:15:01,649 --> 00:15:07,439
links file some programs do not like

00:15:04,949 --> 00:15:10,019
being in a separate directory from your

00:15:07,439 --> 00:15:13,559
file system in fact they really won't

00:15:10,019 --> 00:15:16,589
run so in that case there is an external

00:15:13,559 --> 00:15:19,769
links file system or external links file

00:15:16,589 --> 00:15:21,569
list this is where you can put a list of

00:15:19,769 --> 00:15:23,490
any of those files that need to be

00:15:21,569 --> 00:15:25,410
symbolically linked into your heart

00:15:23,490 --> 00:15:28,019
system in order for them to run properly

00:15:25,410 --> 00:15:29,399
the main files are still kept in their

00:15:28,019 --> 00:15:31,319
own directory but you're basically

00:15:29,399 --> 00:15:35,939
tricking it into thinking it's in your

00:15:31,319 --> 00:15:37,829
main system this might be useful if you

00:15:35,939 --> 00:15:41,299
have some kind of main binary you want

00:15:37,829 --> 00:15:44,069
to copy into a slash user local bin or

00:15:41,299 --> 00:15:45,240
you have some kind of man page or

00:15:44,069 --> 00:15:46,860
whatever that isn't automatically

00:15:45,240 --> 00:15:51,839
detected you can link it into the system

00:15:46,860 --> 00:15:53,519
man pages the resources directory this

00:15:51,839 --> 00:15:56,249
is the directory where you would put any

00:15:53,519 --> 00:15:58,709
extra files that you want included into

00:15:56,249 --> 00:16:00,569
pbi for instance the icon file that you

00:15:58,709 --> 00:16:02,369
want to use you just place it in the

00:16:00,569 --> 00:16:04,860
resources directory and that will put it

00:16:02,369 --> 00:16:09,390
in the base directory for the pbi when

00:16:04,860 --> 00:16:10,890
its installed xdg menu that is

00:16:09,390 --> 00:16:15,180
category where you would put your menu

00:16:10,890 --> 00:16:16,560
entry files and similarly xdg desktop

00:16:15,180 --> 00:16:18,000
that's where you put your desktop entry

00:16:16,560 --> 00:16:19,290
files they're very similar and I'll go

00:16:18,000 --> 00:16:21,150
into all of these here in the next

00:16:19,290 --> 00:16:23,310
couple slides and then find the ex DG

00:16:21,150 --> 00:16:27,150
mine that's where you put your XML mime

00:16:23,310 --> 00:16:30,230
type configuration files so let's go

00:16:27,150 --> 00:16:34,230
through some of the options for pbi comp

00:16:30,230 --> 00:16:36,840
first off your program name you set pbi

00:16:34,230 --> 00:16:38,880
i underscore prog name equals and then

00:16:36,840 --> 00:16:43,050
give it the name of your program it's

00:16:38,880 --> 00:16:45,270
fairly easy next prog web that's what's

00:16:43,050 --> 00:16:47,880
the website for this this means that

00:16:45,270 --> 00:16:51,510
when you're looking at the GUI installer

00:16:47,880 --> 00:16:53,700
for a ppi you will notice that the name

00:16:51,510 --> 00:16:55,530
of the program author is highlighted by

00:16:53,700 --> 00:17:02,010
clicking on it it will immediately take

00:16:55,530 --> 00:17:04,680
you to the program website as well pbi

00:17:02,010 --> 00:17:06,510
prog author prog icon this is where you

00:17:04,680 --> 00:17:08,220
would tell it what icon you want to use

00:17:06,510 --> 00:17:10,949
usually you give it the icon that you

00:17:08,220 --> 00:17:13,020
just put in the resources directory pbi

00:17:10,949 --> 00:17:15,600
make port this is one of the main ones

00:17:13,020 --> 00:17:18,930
that we use because this is if you want

00:17:15,600 --> 00:17:21,780
to link a freebsd port and convert use

00:17:18,930 --> 00:17:23,280
that to convert into a PB i hear you

00:17:21,780 --> 00:17:26,130
would just place whatever the particular

00:17:23,280 --> 00:17:28,440
port is that you're looking for so for

00:17:26,130 --> 00:17:33,120
instance Firefox in the freebsd ports

00:17:28,440 --> 00:17:35,730
category is in the ww directory so you

00:17:33,120 --> 00:17:38,910
would just put in this line pbi

00:17:35,730 --> 00:17:42,930
underscore make port equals and then in

00:17:38,910 --> 00:17:45,030
quotes ww / firefox and that would be

00:17:42,930 --> 00:17:47,370
tell it which port it is that you wish

00:17:45,030 --> 00:17:49,380
to build the port contains all the

00:17:47,370 --> 00:17:51,660
information that you need for what

00:17:49,380 --> 00:17:53,970
dependencies are required for Firefox to

00:17:51,660 --> 00:17:56,520
build to run and any additional

00:17:53,970 --> 00:17:58,440
libraries that it might need the port

00:17:56,520 --> 00:18:00,630
contains all that information so this is

00:17:58,440 --> 00:18:02,640
a very simple way to build a ppi from a

00:18:00,630 --> 00:18:04,800
freebsd port just by really using that

00:18:02,640 --> 00:18:07,230
one line in the pbi com you don't need

00:18:04,800 --> 00:18:09,090
to set anything else it will

00:18:07,230 --> 00:18:10,620
automatically pull the version of the

00:18:09,090 --> 00:18:12,030
program from the port it'll

00:18:10,620 --> 00:18:15,540
automatically pull a lot of the other

00:18:12,030 --> 00:18:18,540
stuff it needs from the port pbi

00:18:15,540 --> 00:18:20,370
underscore make port before or after

00:18:18,540 --> 00:18:22,780
these are two options that you can use

00:18:20,370 --> 00:18:26,020
if for instance you find an error

00:18:22,780 --> 00:18:28,390
in a freebsd port say that you build

00:18:26,020 --> 00:18:30,760
Firefox and when you try to run it as a

00:18:28,390 --> 00:18:32,950
PPI it complains that it's missing some

00:18:30,760 --> 00:18:35,020
kind of library or dependency when you

00:18:32,950 --> 00:18:37,210
first run it this is probably due to an

00:18:35,020 --> 00:18:38,530
error in the FreeBSD port itself it

00:18:37,210 --> 00:18:41,260
might have something missing from this

00:18:38,530 --> 00:18:43,300
dependency list so what you could do is

00:18:41,260 --> 00:18:45,160
you could add it add that additional

00:18:43,300 --> 00:18:47,830
port that you need to build either

00:18:45,160 --> 00:18:50,170
before or after the main port to one of

00:18:47,830 --> 00:18:52,600
these lines this is also an easy way to

00:18:50,170 --> 00:18:54,400
include extra plugins that you might

00:18:52,600 --> 00:18:57,730
need for specific programs so for

00:18:54,400 --> 00:18:59,890
instance Emacs if you let's say you

00:18:57,730 --> 00:19:03,490
build a PB I for a max and you want to

00:18:59,890 --> 00:19:06,250
include one one or two of those numerous

00:19:03,490 --> 00:19:08,380
and wonderful Emacs peak plugins you

00:19:06,250 --> 00:19:10,990
could just add that the port for that

00:19:08,380 --> 00:19:12,580
plug in to your make port after line and

00:19:10,990 --> 00:19:14,770
it'll go ahead and build that and use

00:19:12,580 --> 00:19:16,660
that include that in the pbi as well so

00:19:14,770 --> 00:19:21,820
that when you install the pbi has a max

00:19:16,660 --> 00:19:24,520
plus all those plugins finally you have

00:19:21,820 --> 00:19:26,440
PB i underscore make ops this is where

00:19:24,520 --> 00:19:29,290
you want to set any specific make

00:19:26,440 --> 00:19:31,840
options or build options freebsd ports

00:19:29,290 --> 00:19:33,570
generally have a very good set of

00:19:31,840 --> 00:19:36,220
defaults when you just want to build it

00:19:33,570 --> 00:19:37,810
however say there's some other option

00:19:36,220 --> 00:19:40,030
that's off by default but you really

00:19:37,810 --> 00:19:42,820
want it like some kind of security

00:19:40,030 --> 00:19:45,760
setting you can go ahead and set it here

00:19:42,820 --> 00:19:48,490
and say turn on this option usually it's

00:19:45,760 --> 00:19:50,500
with underscore let's say SSL or

00:19:48,490 --> 00:19:52,180
something like that with underscore SSL

00:19:50,500 --> 00:19:53,500
equals true that's all you would need to

00:19:52,180 --> 00:19:55,240
put in here and then when it goes

00:19:53,500 --> 00:19:57,130
through and builds the ports it will

00:19:55,240 --> 00:20:04,660
automatically turn that option on when

00:19:57,130 --> 00:20:08,250
it comes to the port that needs it okay

00:20:04,660 --> 00:20:12,130
let's move on to external links file in

00:20:08,250 --> 00:20:15,460
this one as I mentioned earlier you can

00:20:12,130 --> 00:20:18,700
link some files from your PB I actually

00:20:15,460 --> 00:20:20,860
into your user local system so here is

00:20:18,700 --> 00:20:22,480
basically just a quick list of some of

00:20:20,860 --> 00:20:24,220
the files that you want to do so for

00:20:22,480 --> 00:20:27,610
instance if you would want to keep some

00:20:24,220 --> 00:20:31,090
kind of specific binary binh phu from

00:20:27,610 --> 00:20:33,010
your ppi directory you put its location

00:20:31,090 --> 00:20:36,070
in the pbi into the first one target

00:20:33,010 --> 00:20:38,470
directory so a pvi directory slash bin

00:20:36,070 --> 00:20:41,130
foo is the one that you want copied and

00:20:38,470 --> 00:20:44,410
it will link it into the local base in

00:20:41,130 --> 00:20:47,560
the directory called slash bin slash

00:20:44,410 --> 00:20:51,310
food and usually the local basis slash

00:20:47,560 --> 00:20:53,590
user slash local so in this case pbi

00:20:51,310 --> 00:20:56,380
directory slash bin slash foo would be

00:20:53,590 --> 00:20:59,920
copied into slash user slash local slash

00:20:56,380 --> 00:21:02,710
bin slash foo that way if you just scan

00:20:59,920 --> 00:21:05,620
user local bin you should be able to see

00:21:02,710 --> 00:21:07,780
application foo in there and then you

00:21:05,620 --> 00:21:09,820
can also set some specific options for

00:21:07,780 --> 00:21:12,340
any links that you put into your system

00:21:09,820 --> 00:21:13,810
one of them being is it a binary in

00:21:12,340 --> 00:21:16,270
other words is it executable is it

00:21:13,810 --> 00:21:19,300
something that needs to be run keep if

00:21:16,270 --> 00:21:21,310
it already exists in your local system

00:21:19,300 --> 00:21:23,770
do you want to keep the old one or do

00:21:21,310 --> 00:21:25,990
you want to replace the new one replaces

00:21:23,770 --> 00:21:27,370
another option so usually you only have

00:21:25,990 --> 00:21:31,390
one of those too i don't recommend

00:21:27,370 --> 00:21:34,660
putting both and then finally there's an

00:21:31,390 --> 00:21:37,240
option there called no crash as well PB

00:21:34,660 --> 00:21:39,310
is also include the capability to open

00:21:37,240 --> 00:21:42,580
up some kind of crash handler in case

00:21:39,310 --> 00:21:44,740
the program has a problem and exits it

00:21:42,580 --> 00:21:46,540
will actually display any errors that

00:21:44,740 --> 00:21:49,360
occurred or display to the command line

00:21:46,540 --> 00:21:51,310
in a crash handler and here if you want

00:21:49,360 --> 00:21:53,560
to you can say no crash I don't want the

00:21:51,310 --> 00:21:57,400
crash handler to work with this with

00:21:53,560 --> 00:21:59,710
this link so it's in simple and easy way

00:21:57,400 --> 00:22:06,430
to link certain files from your PB I

00:21:59,710 --> 00:22:10,420
into your local system now xdg desktop

00:22:06,430 --> 00:22:12,100
and menu entries these are xdg compliant

00:22:10,420 --> 00:22:15,160
which means they here to the free

00:22:12,100 --> 00:22:18,250
desktop org standards for menu and

00:22:15,160 --> 00:22:22,120
desktop entries an example of a menu

00:22:18,250 --> 00:22:24,430
entry here is like this you give it a

00:22:22,120 --> 00:22:26,800
type of an application in this case I'm

00:22:24,430 --> 00:22:29,320
saying it is program opera and I'm going

00:22:26,800 --> 00:22:32,470
to give it a generic name opera and then

00:22:29,320 --> 00:22:34,030
you give it what the application where

00:22:32,470 --> 00:22:37,150
the binary is that you're going to run

00:22:34,030 --> 00:22:40,330
for this desktop entry in this case

00:22:37,150 --> 00:22:44,710
you'll notice that we always put pbi exe

00:22:40,330 --> 00:22:47,560
der and then the binary alright that

00:22:44,710 --> 00:22:49,370
will automatically go and grab the

00:22:47,560 --> 00:22:51,650
directory that contains

00:22:49,370 --> 00:22:53,090
all of the executables for the pbi and

00:22:51,650 --> 00:22:55,550
then you can just give it the name of

00:22:53,090 --> 00:22:57,500
the particular one that you want for the

00:22:55,550 --> 00:22:59,690
path and the icon you just give it the

00:22:57,500 --> 00:23:02,000
Apter instead that gives it the base pbi

00:22:59,690 --> 00:23:03,620
directory and it will look in there for

00:23:02,000 --> 00:23:05,450
anything else that it needs six it can

00:23:03,620 --> 00:23:08,809
follow the hierarchical path within the

00:23:05,450 --> 00:23:12,080
pbi of libs binaries share everything

00:23:08,809 --> 00:23:14,720
like that finally if you have an icon

00:23:12,080 --> 00:23:17,030
again pbi Apter and then if you put the

00:23:14,720 --> 00:23:19,309
icon in the resources directory it'll

00:23:17,030 --> 00:23:22,490
just be in the base so you can just do /

00:23:19,309 --> 00:23:24,140
the name of the icon and then you can

00:23:22,490 --> 00:23:27,410
tell it whether you want to notify when

00:23:24,140 --> 00:23:29,420
it starts up and for menu categories you

00:23:27,410 --> 00:23:32,480
can give it network for instance because

00:23:29,420 --> 00:23:35,000
it's a web browser so this is a very

00:23:32,480 --> 00:23:36,920
easy way just to keep desktop menu

00:23:35,000 --> 00:23:39,200
entries and actually build those into

00:23:36,920 --> 00:23:41,300
the pbi so that when somebody installs

00:23:39,200 --> 00:23:43,760
them you can actually run a command to

00:23:41,300 --> 00:23:46,010
say i want to put menu entries from the

00:23:43,760 --> 00:23:47,390
pbi onto my system i want to put desktop

00:23:46,010 --> 00:23:49,250
entries and in case the user ever

00:23:47,390 --> 00:23:54,590
removes them they can just rerun that

00:23:49,250 --> 00:23:56,390
command and put them right back all

00:23:54,590 --> 00:23:59,660
right now let's move on to actually

00:23:56,390 --> 00:24:01,400
building the pbi all right there are

00:23:59,660 --> 00:24:04,309
many things that go into the pbi but

00:24:01,400 --> 00:24:06,380
thankfully within the pbi format itself

00:24:04,309 --> 00:24:08,360
a lot of it has been simplified for you

00:24:06,380 --> 00:24:11,179
you don't have to run every step of the

00:24:08,360 --> 00:24:12,890
command line command tree yourself there

00:24:11,179 --> 00:24:15,500
are just a couple simple commands in

00:24:12,890 --> 00:24:18,320
order to run them first one pbi make

00:24:15,500 --> 00:24:21,410
port this is like I mentioned earlier an

00:24:18,320 --> 00:24:25,250
easy and simple way to convert a freebsd

00:24:21,410 --> 00:24:27,530
port into a ppi format so for instance

00:24:25,250 --> 00:24:30,290
this one you give it a module and if you

00:24:27,530 --> 00:24:32,600
have that PB i underscore make port line

00:24:30,290 --> 00:24:35,090
filled out in the pbi comp it'll use

00:24:32,600 --> 00:24:37,280
that mod that port and convert that into

00:24:35,090 --> 00:24:38,809
a PB I module with all the list of

00:24:37,280 --> 00:24:41,090
dependencies all the runtime

00:24:38,809 --> 00:24:45,830
dependencies that are listed in that

00:24:41,090 --> 00:24:48,350
port pbi create you do not need freebsd

00:24:45,830 --> 00:24:49,760
ports in order to build pbis say you

00:24:48,350 --> 00:24:52,309
have an application that you've been

00:24:49,760 --> 00:24:54,170
developing yourself in this case you

00:24:52,309 --> 00:24:56,090
would just have it in some directory on

00:24:54,170 --> 00:24:58,970
your system and you can say i want to

00:24:56,090 --> 00:25:00,860
create and package that as a PB I you

00:24:58,970 --> 00:25:02,179
can simply link it to that particular

00:25:00,860 --> 00:25:04,639
directory on your sis

00:25:02,179 --> 00:25:07,580
say pbi create to give me a ppi from

00:25:04,639 --> 00:25:10,700
everything in that directory in fact in

00:25:07,580 --> 00:25:12,110
the ppi com if you wanted to I haven't

00:25:10,700 --> 00:25:13,999
tested this myself but I think it'll

00:25:12,110 --> 00:25:16,669
work just fine for a PB i underscore

00:25:13,999 --> 00:25:18,499
make port after you could be able to add

00:25:16,669 --> 00:25:20,090
freebsd ports in there if you want to

00:25:18,499 --> 00:25:22,399
add some extra dependencies that you

00:25:20,090 --> 00:25:23,779
needed for your own program it could

00:25:22,399 --> 00:25:26,090
still go through there and grab the

00:25:23,779 --> 00:25:28,820
freebsd ports for your dependencies but

00:25:26,090 --> 00:25:30,710
not for the main program so that's an

00:25:28,820 --> 00:25:32,899
easy way to use to actually convert your

00:25:30,710 --> 00:25:35,360
own programs and stuff into PB is as

00:25:32,899 --> 00:25:37,490
well finally what if you're a small

00:25:35,360 --> 00:25:39,889
business and you have a certain set of

00:25:37,490 --> 00:25:41,539
programs that you need to have all the

00:25:39,889 --> 00:25:43,249
time and you just want to constantly

00:25:41,539 --> 00:25:45,950
build the latest version whenever

00:25:43,249 --> 00:25:49,039
there's a new version available in that

00:25:45,950 --> 00:25:51,889
case there's also a ppi auto build this

00:25:49,039 --> 00:25:53,929
will basically search a directory for

00:25:51,889 --> 00:25:55,129
all the modules in that directory and it

00:25:53,929 --> 00:25:57,080
will cycle through those modules

00:25:55,129 --> 00:25:58,639
building them if there is updates

00:25:57,080 --> 00:26:01,340
available and if there's any changes to

00:25:58,639 --> 00:26:03,950
it this allows you to just basically

00:26:01,340 --> 00:26:05,690
create a PB I build server so you can

00:26:03,950 --> 00:26:07,730
put in any modules that you want throw

00:26:05,690 --> 00:26:09,259
them in that directory and your server

00:26:07,730 --> 00:26:13,999
will automatically go through and build

00:26:09,259 --> 00:26:15,830
PBIS whenever it can I'm actually going

00:26:13,999 --> 00:26:17,690
to talk a little bit more about PB I

00:26:15,830 --> 00:26:19,820
auto bild here in a moment because that

00:26:17,690 --> 00:26:22,190
ties in directly to what happens if you

00:26:19,820 --> 00:26:23,570
want to manage a PB I repository what if

00:26:22,190 --> 00:26:25,869
you were running your own build server

00:26:23,570 --> 00:26:30,139
and want to make it available for others

00:26:25,869 --> 00:26:33,350
so let's give an example of how you

00:26:30,139 --> 00:26:35,899
would actually run pbi auto built this

00:26:33,350 --> 00:26:40,519
is a simple fairly simple command it's a

00:26:35,899 --> 00:26:42,440
little long where for instance the dash

00:26:40,519 --> 00:26:44,299
see you then you can give it the

00:26:42,440 --> 00:26:45,830
directory where you contain all your

00:26:44,299 --> 00:26:47,919
modules that will follow down through

00:26:45,830 --> 00:26:51,139
the path trying to find all the modules

00:26:47,919 --> 00:26:53,240
dash D the alternate ports directory say

00:26:51,139 --> 00:26:55,549
that you installed the FreeBSD ports on

00:26:53,240 --> 00:26:57,259
your system in a non-standard location

00:26:55,549 --> 00:27:00,230
the standard location is slash user

00:26:57,259 --> 00:27:03,679
slash ports but what if you put it in my

00:27:00,230 --> 00:27:05,059
home directory / whatever / ports or

00:27:03,679 --> 00:27:06,919
whatever you can point it to that

00:27:05,059 --> 00:27:10,609
directory just as long as it knows where

00:27:06,919 --> 00:27:14,029
the port's directory is it's fine dash H

00:27:10,609 --> 00:27:15,800
helper script you can give it and write

00:27:14,029 --> 00:27:19,250
your own shell scripts

00:27:15,800 --> 00:27:21,890
to run at either after or before every

00:27:19,250 --> 00:27:23,840
single PB I built so for instance if you

00:27:21,890 --> 00:27:26,480
want to clean things up or move the

00:27:23,840 --> 00:27:28,190
files around put them someplace else you

00:27:26,480 --> 00:27:30,200
can put whatever you want in that helper

00:27:28,190 --> 00:27:33,680
script and that will run during the auto

00:27:30,200 --> 00:27:36,560
built all right finally the output

00:27:33,680 --> 00:27:38,030
directory with the dash 0 flac where do

00:27:36,560 --> 00:27:39,620
you want to put the PB eyes once they're

00:27:38,030 --> 00:27:41,300
done do you just want to leave them in

00:27:39,620 --> 00:27:42,740
the directory of the module or do you

00:27:41,300 --> 00:27:47,690
want to put them someplace specific on

00:27:42,740 --> 00:27:50,390
your system dash dash gen patch this is

00:27:47,690 --> 00:27:53,660
a simple way for producing the PB peas

00:27:50,390 --> 00:27:55,820
or patch directory patch files to

00:27:53,660 --> 00:27:59,180
upgrade from version to version if that

00:27:55,820 --> 00:28:00,740
flag is enabled the PPI auto bild will

00:27:59,180 --> 00:28:02,900
automatically generate the patch is

00:28:00,740 --> 00:28:05,510
necessary if it looks in the output

00:28:02,900 --> 00:28:06,860
directory and sees the same program but

00:28:05,510 --> 00:28:08,150
different versions in there it will

00:28:06,860 --> 00:28:12,350
immediately generate the patches for

00:28:08,150 --> 00:28:14,780
those also the dash dash keep none pbi

00:28:12,350 --> 00:28:16,850
you can have it automatically clean how

00:28:14,780 --> 00:28:20,120
many versions of a particular program

00:28:16,850 --> 00:28:21,830
you want to keep because PB eyes can get

00:28:20,120 --> 00:28:23,990
quite large I don't recommend keeping

00:28:21,830 --> 00:28:26,000
over a hundred and fifty versions of

00:28:23,990 --> 00:28:28,790
save Firefox if they're 200 megabytes of

00:28:26,000 --> 00:28:30,890
peace by setting the number of PBIS you

00:28:28,790 --> 00:28:35,810
want to keep to say to you only keep to

00:28:30,890 --> 00:28:38,150
PB is around dash dash prune that will

00:28:35,810 --> 00:28:40,700
actually again clean things up to in

00:28:38,150 --> 00:28:43,370
order to minimize the amount of hard

00:28:40,700 --> 00:28:46,910
drive that you're using afterwards dash

00:28:43,370 --> 00:28:49,940
dash T of tmpfs this is an option that

00:28:46,910 --> 00:28:51,620
allows you to actually use and save a

00:28:49,940 --> 00:28:53,900
lot of the builds a lot of the

00:28:51,620 --> 00:28:55,970
compilations into your memory instead of

00:28:53,900 --> 00:28:58,070
onto the hard drive thus instead of

00:28:55,970 --> 00:29:00,200
relying on rewrite speeds to your hard

00:28:58,070 --> 00:29:02,150
drive it can work much faster just by

00:29:00,200 --> 00:29:05,450
saving it in memory and recalling it

00:29:02,150 --> 00:29:07,220
this is very very useful for small

00:29:05,450 --> 00:29:10,430
programs though it is not recommended

00:29:07,220 --> 00:29:12,470
for huge programs like Open Office

00:29:10,430 --> 00:29:16,250
especially if you don't have a lot of

00:29:12,470 --> 00:29:18,020
memory on your system so there's

00:29:16,250 --> 00:29:21,380
actually a flag that I did not mention

00:29:18,020 --> 00:29:24,200
earlier about the pbi com where you can

00:29:21,380 --> 00:29:27,680
specifically set certain PB is to not

00:29:24,200 --> 00:29:28,559
use tmpfs even if this flag is enabled

00:29:27,680 --> 00:29:31,409
with your

00:29:28,559 --> 00:29:32,940
auto built that's another way just to

00:29:31,409 --> 00:29:37,139
make sure that your PB is we'll always

00:29:32,940 --> 00:29:39,450
build what if you want to sign it with

00:29:37,139 --> 00:29:41,850
your digital signature well we can do

00:29:39,450 --> 00:29:44,879
dash dash sign and then give it the file

00:29:41,850 --> 00:29:46,139
for your openssl key identifier again if

00:29:44,879 --> 00:29:47,940
you're running a build server and you're

00:29:46,139 --> 00:29:50,190
specifically building those PD is for

00:29:47,940 --> 00:29:51,720
distribution to all sorts of people you

00:29:50,190 --> 00:29:54,179
want to include that extra layer

00:29:51,720 --> 00:29:59,730
security by digitally signing all of the

00:29:54,179 --> 00:30:00,840
files of thin your PB is finally as I

00:29:59,730 --> 00:30:02,369
mentioned before if you want to

00:30:00,840 --> 00:30:04,139
distribute it and generally when you run

00:30:02,369 --> 00:30:05,460
a build server I would think that you

00:30:04,139 --> 00:30:07,919
were planning on distributing those

00:30:05,460 --> 00:30:09,990
ppi's you want to make sure that

00:30:07,919 --> 00:30:11,519
somebody can get to them whoever hears

00:30:09,990 --> 00:30:13,619
is supposed to get them will get them as

00:30:11,519 --> 00:30:16,649
examples we actually have for the pc-bsd

00:30:13,619 --> 00:30:18,779
project we have two different areas that

00:30:16,649 --> 00:30:23,279
you can get to on the web pbi build

00:30:18,779 --> 00:30:27,779
pc-bsd org for 32-bit PBIS mpb I build

00:30:23,279 --> 00:30:30,840
64 dot pc-bsd org for 64-bit PP is this

00:30:27,779 --> 00:30:32,490
is simply where our build servers put

00:30:30,840 --> 00:30:34,350
the PBIS once they're done with them as

00:30:32,490 --> 00:30:36,720
well as any relevant build logs and

00:30:34,350 --> 00:30:38,129
stuff so if they fail we can just open

00:30:36,720 --> 00:30:45,929
them up and see what happened what went

00:30:38,129 --> 00:30:48,600
wrong now next step in the pbi

00:30:45,929 --> 00:30:52,139
management process is once a ppi is

00:30:48,600 --> 00:30:54,210
built for the applications that are

00:30:52,139 --> 00:30:57,090
available in what we call the app cafe

00:30:54,210 --> 00:30:58,619
they're also all of them are tested

00:30:57,090 --> 00:31:01,679
before they are actually made available

00:30:58,619 --> 00:31:04,409
in the App cafe in testing what that

00:31:01,679 --> 00:31:07,049
involves is that we have to have a clean

00:31:04,409 --> 00:31:08,879
testing environment what I usually do

00:31:07,049 --> 00:31:11,460
for this is what I have is the example I

00:31:08,879 --> 00:31:15,389
use virtualbox to create a virtualized

00:31:11,460 --> 00:31:17,700
installation of in our case pc-bsd and I

00:31:15,389 --> 00:31:21,990
specifically include the absolute bare

00:31:17,700 --> 00:31:24,210
minimum bare-bones install so that I can

00:31:21,990 --> 00:31:26,399
test a ppi and make sure that it isn't

00:31:24,210 --> 00:31:28,830
trying to use some files in the local

00:31:26,399 --> 00:31:31,110
system that aren't included in the pbi

00:31:28,830 --> 00:31:32,700
or that should be included in the PPI

00:31:31,110 --> 00:31:34,830
just to make sure that they really are

00:31:32,700 --> 00:31:39,269
including absolutely everything right

00:31:34,830 --> 00:31:40,210
there so that's the first thing that I

00:31:39,269 --> 00:31:42,970
recommend

00:31:40,210 --> 00:31:45,220
second then you go through you download

00:31:42,970 --> 00:31:48,580
the pbi from wherever your build server

00:31:45,220 --> 00:31:51,040
is and then you run it and the things

00:31:48,580 --> 00:31:54,400
that you generally look for our first

00:31:51,040 --> 00:31:55,870
off do the binaries actually work that's

00:31:54,400 --> 00:31:57,370
always the number one thing if the

00:31:55,870 --> 00:31:59,230
program doesn't actually run it's not

00:31:57,370 --> 00:32:00,910
worth it you got to fix the module in

00:31:59,230 --> 00:32:02,770
some way to try and tweak it either

00:32:00,910 --> 00:32:04,300
adding packages or changing things

00:32:02,770 --> 00:32:06,190
sometimes we have to write our own

00:32:04,300 --> 00:32:07,540
wrapper scripts in order to start the

00:32:06,190 --> 00:32:10,570
program's to get them to work properly

00:32:07,540 --> 00:32:12,880
in that case you always want to check

00:32:10,570 --> 00:32:16,000
that PB is are usually installed in

00:32:12,880 --> 00:32:19,350
slash user slash pbi and then the name

00:32:16,000 --> 00:32:24,730
of the pbi dash the architecture either

00:32:19,350 --> 00:32:26,740
amd64 i386 and then the actual binaries

00:32:24,730 --> 00:32:29,560
that you want to run are actually in the

00:32:26,740 --> 00:32:31,870
hidden s bin folder inside there the

00:32:29,560 --> 00:32:33,940
main binaries are located in slash bin

00:32:31,870 --> 00:32:35,350
but we actually can create some

00:32:33,940 --> 00:32:37,990
automatically generate some rapper

00:32:35,350 --> 00:32:40,300
scripts or create a generic see binaries

00:32:37,990 --> 00:32:42,430
in order to run these and we place all

00:32:40,300 --> 00:32:44,140
of those inside that hidden espen folder

00:32:42,430 --> 00:32:47,830
so that's where all the main binaries

00:32:44,140 --> 00:32:49,480
are that you would want to run other

00:32:47,830 --> 00:32:51,520
things you want to check are the icons

00:32:49,480 --> 00:32:53,650
files there if you're instead of adding

00:32:51,520 --> 00:32:55,690
your own icon file and instead of using

00:32:53,650 --> 00:32:58,510
one that was already included in the

00:32:55,690 --> 00:33:00,670
program somewhere else like / share /

00:32:58,510 --> 00:33:04,570
firefox slash you know whatever it is

00:33:00,670 --> 00:33:05,710
icon 36 x 36 whatever it is you always

00:33:04,570 --> 00:33:07,450
want to check the icons just to make

00:33:05,710 --> 00:33:09,490
sure that the program didn't move around

00:33:07,450 --> 00:33:12,510
where all their icons are and stuff like

00:33:09,490 --> 00:33:16,570
that so that's why I generally use

00:33:12,510 --> 00:33:18,310
static linking for the icons and just

00:33:16,570 --> 00:33:20,290
throw it in the resources directory so

00:33:18,310 --> 00:33:22,870
that I know that that one icon file is

00:33:20,290 --> 00:33:24,310
always in the same spot every time so I

00:33:22,870 --> 00:33:26,050
don't have to worry about them shuffling

00:33:24,310 --> 00:33:28,960
things around in the main program for on

00:33:26,050 --> 00:33:31,390
me and then again desktop menu entries

00:33:28,960 --> 00:33:33,850
if you specifically set for there to be

00:33:31,390 --> 00:33:35,290
desktop and menu entries in your pbi you

00:33:33,850 --> 00:33:36,760
want to make sure that those are working

00:33:35,290 --> 00:33:38,500
properly are they linking to the proper

00:33:36,760 --> 00:33:40,780
binary did the binary name change

00:33:38,500 --> 00:33:41,860
without you realizing it so you just

00:33:40,780 --> 00:33:44,110
want to make sure that some things like

00:33:41,860 --> 00:33:46,330
that are all working properly and that's

00:33:44,110 --> 00:33:48,610
all that goes into our pbi testing

00:33:46,330 --> 00:33:50,380
process we generally don't test we

00:33:48,610 --> 00:33:52,240
aren't experts on every single program

00:33:50,380 --> 00:33:53,990
that comes out of the app cafe what we

00:33:52,240 --> 00:34:00,230
run it just for some simple

00:33:53,990 --> 00:34:02,270
does it work being the main one next

00:34:00,230 --> 00:34:04,730
step and this is the hardest step what

00:34:02,270 --> 00:34:06,980
about the approval process once you have

00:34:04,730 --> 00:34:08,419
the PBIS built and you've tested them

00:34:06,980 --> 00:34:10,760
and you're satisfied that they work to

00:34:08,419 --> 00:34:12,500
your satisfaction what do you do with

00:34:10,760 --> 00:34:16,100
them then this is what we call the

00:34:12,500 --> 00:34:18,110
approval process so first off we create

00:34:16,100 --> 00:34:19,879
the patches if you're using the auto

00:34:18,110 --> 00:34:21,379
build command you might not have to do

00:34:19,879 --> 00:34:24,290
this it might already be done for you

00:34:21,379 --> 00:34:26,030
all right if you aren't you can generate

00:34:24,290 --> 00:34:29,270
those patches yourself using the pbi

00:34:26,030 --> 00:34:30,679
underscore make patch command you can

00:34:29,270 --> 00:34:33,440
give it the output directory with the

00:34:30,679 --> 00:34:36,530
dash 0 flag you can again can sign it

00:34:33,440 --> 00:34:38,090
with your openssl key and then you say

00:34:36,530 --> 00:34:39,950
which to PB is you want to make the

00:34:38,090 --> 00:34:42,260
patch between the old pbi and the new PB

00:34:39,950 --> 00:34:45,919
I it will make a patch from one to the

00:34:42,260 --> 00:34:47,480
other the next thing is that when you

00:34:45,919 --> 00:34:50,000
are running some kind of repository

00:34:47,480 --> 00:34:51,980
there is what is called to fought well

00:34:50,000 --> 00:34:53,840
there are two files that are important

00:34:51,980 --> 00:34:56,869
for managing that repository the first

00:34:53,840 --> 00:34:58,940
refers to meta information this is the

00:34:56,869 --> 00:35:00,770
term that we use for kind of displaying

00:34:58,940 --> 00:35:03,290
all the relevant information about a

00:35:00,770 --> 00:35:06,200
particular program not necessarily a

00:35:03,290 --> 00:35:09,320
particular pbi so for instance you would

00:35:06,200 --> 00:35:11,510
say what category this PB I would fall

00:35:09,320 --> 00:35:14,900
under let's look at the first one PB i

00:35:11,510 --> 00:35:17,720
underscore meta tool add dash dash caps

00:35:14,900 --> 00:35:21,830
so here you can add different categories

00:35:17,720 --> 00:35:23,510
of PB is similar to the way that freebsd

00:35:21,830 --> 00:35:26,570
has different categories for all their

00:35:23,510 --> 00:35:29,570
programs such as the ww directory where

00:35:26,570 --> 00:35:31,040
most of the web browsers are so here you

00:35:29,570 --> 00:35:33,530
can add the category give it a

00:35:31,040 --> 00:35:36,350
description with the dash D flag give it

00:35:33,530 --> 00:35:38,450
a name with the dash n give it a special

00:35:36,350 --> 00:35:40,340
icon you know grab the grab the

00:35:38,450 --> 00:35:41,990
applications icon and throw it in there

00:35:40,340 --> 00:35:43,609
and then you say okay where's the

00:35:41,990 --> 00:35:46,600
metafile and it will point that to it

00:35:43,609 --> 00:35:49,220
and add that entry to the metafile

00:35:46,600 --> 00:35:50,180
similarly that's just a category what if

00:35:49,220 --> 00:35:52,340
we want to add the particular

00:35:50,180 --> 00:35:55,130
application if this application has

00:35:52,340 --> 00:35:56,869
never been on your repository before

00:35:55,130 --> 00:35:58,790
you're going to have to add an entry for

00:35:56,869 --> 00:36:00,920
that actual program itself and there's

00:35:58,790 --> 00:36:04,970
this is the tool for that PPI underscore

00:36:00,920 --> 00:36:07,180
met a tool add dash dash app and then

00:36:04,970 --> 00:36:09,099
there are a number of additional option

00:36:07,180 --> 00:36:11,980
that go into applications for instance

00:36:09,099 --> 00:36:14,680
author category what category it's in

00:36:11,980 --> 00:36:18,099
the description of the particular pbi

00:36:14,680 --> 00:36:20,380
the icon any keywords so that when

00:36:18,099 --> 00:36:22,329
people are searching for programs and

00:36:20,380 --> 00:36:24,430
applications they might not always type

00:36:22,329 --> 00:36:26,290
in Firefox if they're looking for the

00:36:24,430 --> 00:36:27,819
Firefox pbi let's just say they're just

00:36:26,290 --> 00:36:30,220
doing a general search for web browsers

00:36:27,819 --> 00:36:31,750
so you might type web browsers and for

00:36:30,220 --> 00:36:34,000
keywords so that when people search for

00:36:31,750 --> 00:36:36,550
that this will come up under there as

00:36:34,000 --> 00:36:38,740
well what particular license is this

00:36:36,550 --> 00:36:40,900
program under so for instance the BSD

00:36:38,740 --> 00:36:42,970
license or the GPL license here you can

00:36:40,900 --> 00:36:45,099
actually display what licenses are there

00:36:42,970 --> 00:36:48,579
even commercial licenses you just that's

00:36:45,099 --> 00:36:50,559
what it's there for the name the type of

00:36:48,579 --> 00:36:52,390
pbi this is where you would put well is

00:36:50,559 --> 00:36:55,300
it a command line only program is it a

00:36:52,390 --> 00:36:57,010
graphical utility is it a server there

00:36:55,300 --> 00:36:58,720
you can display what different types of

00:36:57,010 --> 00:36:59,980
programs are so that when people are

00:36:58,720 --> 00:37:01,960
again are just browsing through your

00:36:59,980 --> 00:37:06,339
repository they can see particular

00:37:01,960 --> 00:37:08,470
program is a particular type um how

00:37:06,339 --> 00:37:10,390
about the URL what about the program

00:37:08,470 --> 00:37:12,849
website again here you can just put

00:37:10,390 --> 00:37:17,020
their program website and then dash are

00:37:12,849 --> 00:37:21,369
this is an option what happens if a

00:37:17,020 --> 00:37:24,490
program somehow does require access to

00:37:21,369 --> 00:37:26,380
the main system in order to install say

00:37:24,490 --> 00:37:29,230
a kernel module or something like that

00:37:26,380 --> 00:37:31,329
in that case it needs we're called root

00:37:29,230 --> 00:37:32,740
permissions because most PBIS because

00:37:31,329 --> 00:37:34,750
they're in a separate category can be

00:37:32,740 --> 00:37:37,240
installed with just user permissions you

00:37:34,750 --> 00:37:39,640
don't need to do sudo you don't need to

00:37:37,240 --> 00:37:42,220
be running as root in order to install

00:37:39,640 --> 00:37:44,619
most of them occasionally PBIS do

00:37:42,220 --> 00:37:46,720
require root permissions in order to

00:37:44,619 --> 00:37:48,790
perform the install process VirtualBox

00:37:46,720 --> 00:37:51,400
being a good example of that because it

00:37:48,790 --> 00:37:53,920
utilizes a number of kernel modules so

00:37:51,400 --> 00:37:55,630
in order to install that one what you

00:37:53,920 --> 00:37:58,329
would have to do in the meta is you

00:37:55,630 --> 00:38:00,849
would write hit this dash our flag that

00:37:58,329 --> 00:38:03,369
says that route is required to install

00:38:00,849 --> 00:38:04,420
this program properly so instead of

00:38:03,369 --> 00:38:06,880
waiting for the person to actually

00:38:04,420 --> 00:38:08,200
download the pbi and try to add it in

00:38:06,880 --> 00:38:10,180
order to find out that they need to be

00:38:08,200 --> 00:38:12,730
route to install it this simply says up

00:38:10,180 --> 00:38:15,640
front this pbi needs to be root in order

00:38:12,730 --> 00:38:18,220
to install and then finally you give it

00:38:15,640 --> 00:38:20,140
the metafile again so for managing your

00:38:18,220 --> 00:38:21,080
own repository this is just a quick and

00:38:20,140 --> 00:38:23,300
easy way to

00:38:21,080 --> 00:38:25,970
things easy to search your repository

00:38:23,300 --> 00:38:27,440
and easy to find whatever applications

00:38:25,970 --> 00:38:29,660
that you might be looking for with all

00:38:27,440 --> 00:38:34,520
of the relevant information for all the

00:38:29,660 --> 00:38:37,700
programs that your supply now what about

00:38:34,520 --> 00:38:39,680
the specific pbi that you just built the

00:38:37,700 --> 00:38:42,200
meta is great for just in general this

00:38:39,680 --> 00:38:44,540
is the program this is the category so

00:38:42,200 --> 00:38:47,540
for the specific PB is that are

00:38:44,540 --> 00:38:49,850
available from a repository we use what

00:38:47,540 --> 00:38:52,220
is called the index file this is what

00:38:49,850 --> 00:38:54,290
constantly changes as to the actual pbi

00:38:52,220 --> 00:38:56,210
files that are available for

00:38:54,290 --> 00:38:59,120
distribution available for download at

00:38:56,210 --> 00:39:02,270
that time that you can create or edit

00:38:59,120 --> 00:39:05,420
this index file by using the tool PB i

00:39:02,270 --> 00:39:08,960
underscore index tool add just like meta

00:39:05,420 --> 00:39:11,480
tool add here you can specifically just

00:39:08,960 --> 00:39:14,150
point it to the pbi using ask in a set

00:39:11,480 --> 00:39:15,530
of flags dash b do you have any other

00:39:14,150 --> 00:39:18,350
versions that you're specifically

00:39:15,530 --> 00:39:20,270
supplying patches to as well in that

00:39:18,350 --> 00:39:22,880
case if you have somebody that already

00:39:20,270 --> 00:39:24,920
has it installed it will display to them

00:39:22,880 --> 00:39:27,020
if they have access to your repository

00:39:24,920 --> 00:39:31,090
there are new versions of your program

00:39:27,020 --> 00:39:34,750
available patch to particular version X

00:39:31,090 --> 00:39:38,090
dash F you give it the actual pbi itself

00:39:34,750 --> 00:39:40,310
dash K again how many PBIS do you want

00:39:38,090 --> 00:39:43,460
to keep on your distribution side of

00:39:40,310 --> 00:39:45,290
your thing so you sit let's say that you

00:39:43,460 --> 00:39:47,180
only want to have that single pbi

00:39:45,290 --> 00:39:49,670
available you could put just you know

00:39:47,180 --> 00:39:52,490
one in there and it would keep one PDI

00:39:49,670 --> 00:39:53,990
file for you or you could put five say

00:39:52,490 --> 00:39:56,540
you want to keep the latest version of a

00:39:53,990 --> 00:39:57,800
ppi plus the previous four just in case

00:39:56,540 --> 00:39:59,300
one of them doesn't work and they

00:39:57,800 --> 00:40:01,490
specifically need a particular version

00:39:59,300 --> 00:40:05,180
you can keep as many versions of each

00:40:01,490 --> 00:40:08,840
pbi that you need dash you again give it

00:40:05,180 --> 00:40:11,750
the URL on the distribution server to

00:40:08,840 --> 00:40:16,940
that particular pbi so let's say that

00:40:11,750 --> 00:40:20,480
your distribution server is ww / my

00:40:16,940 --> 00:40:23,390
distribution com you would not include

00:40:20,480 --> 00:40:25,850
that base in this URL but you put

00:40:23,390 --> 00:40:27,680
everything after that to get to the file

00:40:25,850 --> 00:40:34,130
so it would be in so for instance the

00:40:27,680 --> 00:40:36,470
pbi directory / w w / firefox PBS

00:40:34,130 --> 00:40:38,150
that would be the URL that you would put

00:40:36,470 --> 00:40:42,650
in there you would just leave off the ww

00:40:38,150 --> 00:40:45,579
my closet or ecom part of it and then

00:40:42,650 --> 00:40:47,809
finally you give it the index file again

00:40:45,579 --> 00:40:49,910
the last thing that you would want to do

00:40:47,809 --> 00:40:52,250
for ppi management is once all of that

00:40:49,910 --> 00:40:53,720
has been done you then just simply need

00:40:52,250 --> 00:40:55,940
to make sure that those files are on

00:40:53,720 --> 00:40:58,579
your distribution server so you'd want

00:40:55,940 --> 00:41:01,009
to upload the pbi the any patches and

00:40:58,579 --> 00:41:03,529
then the index and meta files to your

00:41:01,009 --> 00:41:06,079
distribution server as well then any

00:41:03,529 --> 00:41:08,359
users that are using your repository to

00:41:06,079 --> 00:41:10,099
keep track of what Phoebe is are

00:41:08,359 --> 00:41:12,349
available what versions of each programs

00:41:10,099 --> 00:41:14,990
and stuff they will automatically fetch

00:41:12,349 --> 00:41:16,730
and use and parse the index and

00:41:14,990 --> 00:41:18,710
metafiles just to see what's available

00:41:16,730 --> 00:41:21,619
they can use that using the built-in app

00:41:18,710 --> 00:41:23,509
cafe program within pc-bsd and they can

00:41:21,619 --> 00:41:26,779
just browse and see oh well this this

00:41:23,509 --> 00:41:29,960
repository has pbi version 1 of

00:41:26,779 --> 00:41:31,609
application x available so they can add

00:41:29,960 --> 00:41:33,109
in whatever repositories you want you

00:41:31,609 --> 00:41:34,910
don't have to write your own front end

00:41:33,109 --> 00:41:36,380
for your repository that's already done

00:41:34,910 --> 00:41:38,000
you just need to create the proposed

00:41:36,380 --> 00:41:42,079
ettore and then add the index and meta

00:41:38,000 --> 00:41:43,910
files and that's it so once that's all

00:41:42,079 --> 00:41:45,650
done and up on your distribution server

00:41:43,910 --> 00:41:50,960
you're done it's up to everything else

00:41:45,650 --> 00:41:53,029
the pbi format to do the rest now there

00:41:50,960 --> 00:41:54,589
are a few other tools that are also

00:41:53,029 --> 00:41:56,470
useful so I just kind of threw them in

00:41:54,589 --> 00:41:59,119
here under a miscellaneous category

00:41:56,470 --> 00:42:01,220
let's say for instance well how to

00:41:59,119 --> 00:42:03,680
create a repository file if you're

00:42:01,220 --> 00:42:06,799
running your own repository you can

00:42:03,680 --> 00:42:10,400
actually create a dot RPO specifically

00:42:06,799 --> 00:42:12,500
for your repository sign it with your

00:42:10,400 --> 00:42:15,230
openssl key file again that way when

00:42:12,500 --> 00:42:17,210
they download the pbis they will check

00:42:15,230 --> 00:42:18,799
that signature with the signature from

00:42:17,210 --> 00:42:21,410
your particular repository to make sure

00:42:18,799 --> 00:42:23,420
that everything matches and then you can

00:42:21,410 --> 00:42:25,369
also give it descriptions and keys that

00:42:23,420 --> 00:42:28,579
way when you're in a production setting

00:42:25,369 --> 00:42:30,769
you create the RPO all that anybody else

00:42:28,579 --> 00:42:32,900
needs to do is they simply need to add

00:42:30,769 --> 00:42:35,990
the repository to their system running

00:42:32,900 --> 00:42:37,400
pbi add repo it's very easy to add

00:42:35,990 --> 00:42:39,859
different types of repose to your own

00:42:37,400 --> 00:42:41,930
system if you're running a pc-bsd system

00:42:39,859 --> 00:42:44,390
all you have to do is say i want to add

00:42:41,930 --> 00:42:46,849
this repo in my app cafe the browser

00:42:44,390 --> 00:42:47,540
utility will automatically be searching

00:42:46,849 --> 00:42:49,880
your

00:42:47,540 --> 00:42:52,130
tori then for any updates to pv is and

00:42:49,880 --> 00:42:53,690
it will keep that on file so that you

00:42:52,130 --> 00:42:57,530
can they can get the pbis from your

00:42:53,690 --> 00:42:59,270
servers and everything so again here

00:42:57,530 --> 00:43:01,280
would be some of the commands for how to

00:42:59,270 --> 00:43:02,780
do that so for instance making a repo

00:43:01,280 --> 00:43:05,030
what's the name of your repository you

00:43:02,780 --> 00:43:07,700
would give it a description do you have

00:43:05,030 --> 00:43:09,620
a key what's the base URL that would be

00:43:07,700 --> 00:43:11,300
for instance the distribution server

00:43:09,620 --> 00:43:15,650
that you would have in the example that

00:43:11,300 --> 00:43:19,280
I had earlier wwm I district my repo com

00:43:15,650 --> 00:43:20,930
that would be the base URL and then do

00:43:19,280 --> 00:43:22,670
you have any mirrors for your

00:43:20,930 --> 00:43:25,880
distribution server you could add a

00:43:22,670 --> 00:43:31,100
whole list of mirror URLs as well if you

00:43:25,880 --> 00:43:33,890
have mirror system finally what if you

00:43:31,100 --> 00:43:35,750
test a ppi you approve it you think it's

00:43:33,890 --> 00:43:37,580
working great and then you have a couple

00:43:35,750 --> 00:43:40,520
people come to you and say it's just not

00:43:37,580 --> 00:43:42,590
working properly so you retest it and

00:43:40,520 --> 00:43:45,470
you find out hey there right I missed

00:43:42,590 --> 00:43:48,950
something during testing you can remove

00:43:45,470 --> 00:43:50,840
that file from the index in order so

00:43:48,950 --> 00:43:53,510
that nobody else is downloading a broken

00:43:50,840 --> 00:43:56,450
pbi to give you time to fix things and

00:43:53,510 --> 00:43:58,400
upload a new one a fresh one in order to

00:43:56,450 --> 00:44:00,500
remove things from the index file you

00:43:58,400 --> 00:44:03,920
can do PB i underscore index tool and

00:44:00,500 --> 00:44:06,410
then do REM just remove you give it the

00:44:03,920 --> 00:44:10,040
architecture of the specific pbi so for

00:44:06,410 --> 00:44:12,380
instance I 386 or AMD 64 you give it

00:44:10,040 --> 00:44:13,970
again the pbi name what's the program

00:44:12,380 --> 00:44:17,030
name for the particular ppi that you're

00:44:13,970 --> 00:44:18,410
looking for what version of the ppi what

00:44:17,030 --> 00:44:21,080
if you have multiple versions available

00:44:18,410 --> 00:44:24,680
on your system on your distribution

00:44:21,080 --> 00:44:26,750
server and then again the index file and

00:44:24,680 --> 00:44:29,090
it will remove that this means that

00:44:26,750 --> 00:44:31,130
instead of having that file say you had

00:44:29,090 --> 00:44:33,680
an earlier version of the same program

00:44:31,130 --> 00:44:35,150
it will now display that earlier version

00:44:33,680 --> 00:44:37,880
as the one that is available for

00:44:35,150 --> 00:44:39,980
download and anybody that had the broken

00:44:37,880 --> 00:44:41,990
version on their system will get a

00:44:39,980 --> 00:44:43,370
little update thing saying warning

00:44:41,990 --> 00:44:44,750
updates are available and it will

00:44:43,370 --> 00:44:47,840
regress them back to the older version

00:44:44,750 --> 00:44:50,000
that works if they choose to apply it so

00:44:47,840 --> 00:44:52,190
this is a very nice way of keeping track

00:44:50,000 --> 00:44:53,900
and keeping things working in your

00:44:52,190 --> 00:44:55,460
repository allowing you to remove

00:44:53,900 --> 00:44:58,820
anything that's broken or any errors

00:44:55,460 --> 00:45:00,829
that come up for additional details on

00:44:58,820 --> 00:45:03,259
some of the additional tools I'm

00:45:00,829 --> 00:45:04,940
I didn't cover all of them but those are

00:45:03,259 --> 00:45:07,309
all the main ones but there are a lot of

00:45:04,940 --> 00:45:10,279
other little nice fancy tools and

00:45:07,309 --> 00:45:12,319
utilities for the pbi system and you can

00:45:10,279 --> 00:45:15,859
find a lot of them on the wiki page for

00:45:12,319 --> 00:45:18,890
the pc-bsd project wiki pc-bsd org and

00:45:15,859 --> 00:45:21,979
then / index.php and then underscore pbi

00:45:18,890 --> 00:45:24,170
manager those are all the pbi underscore

00:45:21,979 --> 00:45:26,809
commands with a full list of what they

00:45:24,170 --> 00:45:32,930
do how you can use them and stuff it's

00:45:26,809 --> 00:45:35,930
just a lot of information there now I'd

00:45:32,930 --> 00:45:41,209
like to move on and talk about easy PDI

00:45:35,930 --> 00:45:44,329
just a little bit in 2011 Jesse Smith

00:45:41,209 --> 00:45:46,309
had a program called make a PB I that he

00:45:44,329 --> 00:45:48,709
kind of put together on his own using

00:45:46,309 --> 00:45:50,959
see it was a command-line utility a

00:45:48,709 --> 00:45:53,509
quick script to kind of scan a port and

00:45:50,959 --> 00:45:58,130
try to convert it into a PDF into a PB I

00:45:53,509 --> 00:46:01,999
module he came to the list and emailed

00:45:58,130 --> 00:46:05,089
us with a quick example of what he

00:46:01,999 --> 00:46:07,369
called easy pbi as something as simple

00:46:05,089 --> 00:46:09,769
graphical utility for anybody to point

00:46:07,369 --> 00:46:11,390
to a freebsd port and say I want a PV I

00:46:09,769 --> 00:46:14,150
out of that and it'll automatically

00:46:11,390 --> 00:46:16,130
generate the pbi module for that filling

00:46:14,150 --> 00:46:19,759
and all the necessary information from

00:46:16,130 --> 00:46:21,890
the FreeBSD port that it could so I came

00:46:19,759 --> 00:46:23,719
on board at that I saw the inherent use

00:46:21,890 --> 00:46:25,819
of it this would make things credibly ez

00:46:23,719 --> 00:46:27,619
for standard users to be able to create

00:46:25,819 --> 00:46:29,359
PBIS you don't have to know all that

00:46:27,619 --> 00:46:30,469
format stuff that I just talked about if

00:46:29,359 --> 00:46:32,180
you just wanted to build something on

00:46:30,469 --> 00:46:34,099
your system even if you don't want to

00:46:32,180 --> 00:46:35,959
distribute it to other people and you

00:46:34,099 --> 00:46:37,640
just want to have a particular program

00:46:35,959 --> 00:46:39,170
in the pbi format so that it's

00:46:37,640 --> 00:46:40,670
completely separate from the rest of

00:46:39,170 --> 00:46:46,190
your system you can now build it

00:46:40,670 --> 00:46:49,249
yourself using easy PPI so in December

00:46:46,190 --> 00:46:52,549
of 2011 he Jesse Smith handed control of

00:46:49,249 --> 00:46:54,680
easy pbi over to the pc-bsd team since

00:46:52,549 --> 00:46:58,849
then I have continuously been updating

00:46:54,680 --> 00:47:01,489
it an improving easy pbi to be version

00:46:58,849 --> 00:47:03,199
now 1.2 which is what i'm going to show

00:47:01,489 --> 00:47:05,119
you here in the next couple slides and

00:47:03,199 --> 00:47:08,299
just show you how simple it has become

00:47:05,119 --> 00:47:11,059
to create a PV I on your own system even

00:47:08,299 --> 00:47:12,829
if you don't necessarily have root

00:47:11,059 --> 00:47:14,170
permissions you can still create pbi

00:47:12,829 --> 00:47:16,060
modules and then some

00:47:14,170 --> 00:47:17,770
to a root administrator in order to

00:47:16,060 --> 00:47:19,090
build them if you would like so you can

00:47:17,770 --> 00:47:22,000
auto generate those and send them off to

00:47:19,090 --> 00:47:28,540
whatever project to help them supply

00:47:22,000 --> 00:47:32,620
PBIS so this is the first page of easy

00:47:28,540 --> 00:47:35,530
pbi when you start it up it's quite

00:47:32,620 --> 00:47:37,930
simple you just if you want to create a

00:47:35,530 --> 00:47:42,250
new module you click the new module in

00:47:37,930 --> 00:47:45,190
the upper left corner and it will open

00:47:42,250 --> 00:47:47,350
immediately open up a file manager to

00:47:45,190 --> 00:47:49,330
the particular ports directory that it

00:47:47,350 --> 00:47:51,700
auto detected on your system it looks in

00:47:49,330 --> 00:47:53,980
a couple different places standard place

00:47:51,700 --> 00:47:56,170
and user ports and then there's also a

00:47:53,980 --> 00:47:59,410
way to install the port's tree directly

00:47:56,170 --> 00:48:01,450
in the into your easy pbi directory on

00:47:59,410 --> 00:48:03,010
your system easy pbi creates its own

00:48:01,450 --> 00:48:05,500
little directory in your home direct in

00:48:03,010 --> 00:48:07,150
your home folder called easy pbi that's

00:48:05,500 --> 00:48:09,070
where it places any modules that it

00:48:07,150 --> 00:48:10,540
builds or any PB is that it builds by

00:48:09,070 --> 00:48:13,990
default you can change where those

00:48:10,540 --> 00:48:17,260
outputs are if you want later so once

00:48:13,990 --> 00:48:19,750
you select a particular freebsd port

00:48:17,260 --> 00:48:22,690
from hitting that button it will

00:48:19,750 --> 00:48:25,030
automatically read that freebsd port and

00:48:22,690 --> 00:48:28,510
try to pull all the information it can

00:48:25,030 --> 00:48:30,130
out of it and put it here for you so for

00:48:28,510 --> 00:48:33,580
instance the port that i selected here

00:48:30,130 --> 00:48:36,190
was the ww / opera port say i want to

00:48:33,580 --> 00:48:38,110
build the opera web browser it detected

00:48:36,190 --> 00:48:40,630
from the port the program name was just

00:48:38,110 --> 00:48:42,760
opera you can change that if you want

00:48:40,630 --> 00:48:45,490
edit it for capitalization or spelling

00:48:42,760 --> 00:48:47,950
or anything like that some ports have

00:48:45,490 --> 00:48:49,870
different numbers on the end as well but

00:48:47,950 --> 00:48:51,490
it tries to be smart about how it

00:48:49,870 --> 00:48:55,240
detects the program name to keep those

00:48:51,490 --> 00:48:56,710
numbers off of it and everything program

00:48:55,240 --> 00:48:58,600
website what was the website that was

00:48:56,710 --> 00:49:00,010
listed in the port it tries to display

00:48:58,600 --> 00:49:01,690
all of this right away so you don't need

00:49:00,010 --> 00:49:03,400
to look anything up you can just run

00:49:01,690 --> 00:49:05,830
this and immediately grab all the

00:49:03,400 --> 00:49:07,990
information for you the thing that takes

00:49:05,830 --> 00:49:11,710
the longest about building a PPI module

00:49:07,990 --> 00:49:14,200
is this one the icon most FreeBSD ports

00:49:11,710 --> 00:49:16,270
generally don't come with a simple icon

00:49:14,200 --> 00:49:19,420
for the program you have to go find that

00:49:16,270 --> 00:49:21,490
yourself so the majority of the time

00:49:19,420 --> 00:49:24,730
that it takes to build a PPI module

00:49:21,490 --> 00:49:26,410
really comes down to simply okay go find

00:49:24,730 --> 00:49:27,099
the icon for the particular program

00:49:26,410 --> 00:49:30,249
let's go get

00:49:27,099 --> 00:49:32,170
at a PNG file for opera and we'll throw

00:49:30,249 --> 00:49:34,420
that in there once you have it you can

00:49:32,170 --> 00:49:36,609
just hit choose icon go to the directory

00:49:34,420 --> 00:49:39,220
where you would save that file select it

00:49:36,609 --> 00:49:41,559
and it will add include that icon in

00:49:39,220 --> 00:49:44,920
your PB I as the default icon for the

00:49:41,559 --> 00:49:46,660
program and then you can also check do

00:49:44,920 --> 00:49:49,509
you want to create desktop menu entries

00:49:46,660 --> 00:49:52,239
easy pbi will automatically scan the

00:49:49,509 --> 00:49:55,140
port try to detect any of the main

00:49:52,239 --> 00:49:57,519
binaries for that program and

00:49:55,140 --> 00:50:00,069
automatically generate your desktop and

00:49:57,519 --> 00:50:02,259
menu entries putting them in in this

00:50:00,069 --> 00:50:05,140
case the network category for the menu

00:50:02,259 --> 00:50:07,479
and everything else it'll automatically

00:50:05,140 --> 00:50:09,970
create all that for you once you are

00:50:07,479 --> 00:50:11,829
satisfied with the number with labels

00:50:09,970 --> 00:50:14,190
that are all here you can again change

00:50:11,829 --> 00:50:17,319
any of these by hand if you would like

00:50:14,190 --> 00:50:20,799
you can just hit create module and it'll

00:50:17,319 --> 00:50:23,739
create that module I'll put it in / your

00:50:20,799 --> 00:50:25,660
home directory / easy pbi / modules and

00:50:23,739 --> 00:50:30,789
it will have the name of the program

00:50:25,660 --> 00:50:33,039
that you are trying to build now let's

00:50:30,789 --> 00:50:34,450
move on it can actually build PBIS for

00:50:33,039 --> 00:50:36,279
you as well you don't need to know all

00:50:34,450 --> 00:50:39,789
those fancy commands in order to build

00:50:36,279 --> 00:50:43,329
the actual PBIS on your system you can

00:50:39,789 --> 00:50:44,890
simply build it here in the GUI first

00:50:43,329 --> 00:50:47,170
thing at the very top but this is your

00:50:44,890 --> 00:50:49,660
settings for building your PB I the

00:50:47,170 --> 00:50:51,609
default output directory again is in

00:50:49,660 --> 00:50:56,019
your home directory in my case slash

00:50:51,609 --> 00:50:57,700
home slash Kenmore / easy pbi / pbi so

00:50:56,019 --> 00:50:59,950
once the PB eyes are done it'll just put

00:50:57,700 --> 00:51:01,779
them in that directory for me you can

00:50:59,950 --> 00:51:04,119
also point it to a digital signature

00:51:01,779 --> 00:51:05,859
file generally if you're just a standard

00:51:04,119 --> 00:51:07,479
user who's building a PB I for yourself

00:51:05,859 --> 00:51:10,089
you don't need to give it one and it

00:51:07,479 --> 00:51:11,349
won't do that so you'll still get the

00:51:10,089 --> 00:51:13,239
little warning that there's no digital

00:51:11,349 --> 00:51:16,809
signature for the PPI but you built it

00:51:13,239 --> 00:51:19,450
yourself you don't care all right you

00:51:16,809 --> 00:51:21,160
can also set it to use temp FS if you

00:51:19,450 --> 00:51:22,809
have a lot of RAM on your system

00:51:21,160 --> 00:51:24,789
generally 4 gigabytes of RAM is pretty

00:51:22,809 --> 00:51:26,829
good for most programs except for like I

00:51:24,789 --> 00:51:28,180
said programs like open office or Libre

00:51:26,829 --> 00:51:30,519
Office really something is huge like

00:51:28,180 --> 00:51:33,160
that I just hold off on using temp

00:51:30,519 --> 00:51:34,630
a--this but you can set all that and if

00:51:33,160 --> 00:51:37,269
it's something if you plan on building

00:51:34,630 --> 00:51:38,349
PB is quite often on your system you can

00:51:37,269 --> 00:51:40,239
hit the little Save button it'll

00:51:38,349 --> 00:51:40,930
automatically save that configuration so

00:51:40,239 --> 00:51:42,910
that the next time

00:51:40,930 --> 00:51:44,890
open up easy pbi it'll keep your

00:51:42,910 --> 00:51:48,190
defaults it'll save those as your

00:51:44,890 --> 00:51:50,020
defaults for building PBIS finally just

00:51:48,190 --> 00:51:52,869
select the what module do you want to

00:51:50,020 --> 00:51:55,510
build so in this case I'm going to build

00:51:52,869 --> 00:51:58,900
the Opera module that was put in my home

00:51:55,510 --> 00:52:00,250
directory / easy pbi / modules that's

00:51:58,900 --> 00:52:02,079
where Donna Michael looks you just

00:52:00,250 --> 00:52:05,349
select which one by hitting the select

00:52:02,079 --> 00:52:07,660
module button finally you hit build pbi

00:52:05,349 --> 00:52:10,540
once all this is detected you can click

00:52:07,660 --> 00:52:13,480
the build pbi button this will warn you

00:52:10,540 --> 00:52:15,280
that in order to build a PPI you will

00:52:13,480 --> 00:52:17,740
need an active internet connection and

00:52:15,280 --> 00:52:19,630
you will also need to supply your root

00:52:17,740 --> 00:52:21,460
password because it needs root

00:52:19,630 --> 00:52:24,760
permissions in order to build a PPI on

00:52:21,460 --> 00:52:28,119
your system so if you agree and hit

00:52:24,760 --> 00:52:29,890
continue it will pop up gks you to just

00:52:28,119 --> 00:52:31,960
ask for your root permission to switch

00:52:29,890 --> 00:52:34,030
user / to root and then it will

00:52:31,960 --> 00:52:36,069
immediately run the pbi build process

00:52:34,030 --> 00:52:37,510
displaying all the outputs from the

00:52:36,069 --> 00:52:41,500
build process here in this little box

00:52:37,510 --> 00:52:44,050
for you while a previa is building you

00:52:41,500 --> 00:52:47,020
can click the stop build button this

00:52:44,050 --> 00:52:48,579
will immediately stop the build and it

00:52:47,020 --> 00:52:49,960
will try to clean it up a little bit if

00:52:48,579 --> 00:52:51,520
it doesn't clean it up then it'll be

00:52:49,960 --> 00:52:53,490
clean it up the next time you try to

00:52:51,520 --> 00:52:56,579
build a PPI it will clean up any old

00:52:53,490 --> 00:52:59,260
directories where it was building PBIS

00:52:56,579 --> 00:53:01,450
all right so while this is working

00:52:59,260 --> 00:53:03,430
however it's actually working in the

00:53:01,450 --> 00:53:06,670
background of easy pbi you can continue

00:53:03,430 --> 00:53:08,500
to build pbi modules you can continue to

00:53:06,670 --> 00:53:10,299
edit pbi modules which is what the next

00:53:08,500 --> 00:53:12,670
thing I'm going to show you is you can

00:53:10,299 --> 00:53:14,589
do all of that while you have a PPI

00:53:12,670 --> 00:53:16,240
building in the background once it is

00:53:14,589 --> 00:53:19,319
done it will pop up a little window

00:53:16,240 --> 00:53:22,869
saying build PPI build process completed

00:53:19,319 --> 00:53:25,270
successfully or unsuccessfully all right

00:53:22,869 --> 00:53:27,940
if it is unsuccessful sometimes you

00:53:25,270 --> 00:53:29,740
might need some help actually you know

00:53:27,940 --> 00:53:31,540
fixing your pbi module if it's out of

00:53:29,740 --> 00:53:34,359
your league or you just can't see it for

00:53:31,540 --> 00:53:36,130
some reason in that case you can save a

00:53:34,359 --> 00:53:37,960
bill blog this will basically save

00:53:36,130 --> 00:53:39,400
everything that you have in this box so

00:53:37,960 --> 00:53:42,010
that you can send it to somebody else is

00:53:39,400 --> 00:53:44,530
a simple text file this allows you to

00:53:42,010 --> 00:53:47,849
get help on building a PB I or tweaking

00:53:44,530 --> 00:53:50,710
the module to do what you need with it

00:53:47,849 --> 00:53:54,309
now let's go on to editing PPI modules

00:53:50,710 --> 00:53:56,349
really quick some the older version of

00:53:54,309 --> 00:53:58,749
pbi which is version 1 point 0 and ports

00:53:56,349 --> 00:54:00,249
does not have the capability to edit

00:53:58,749 --> 00:54:04,239
modules this is something that is fairly

00:54:00,249 --> 00:54:07,660
new with version 1.2 an easy ppi this

00:54:04,239 --> 00:54:10,749
simply allows you to again check your PB

00:54:07,660 --> 00:54:12,219
I comp file in this case and change

00:54:10,749 --> 00:54:13,900
anything such as the program name

00:54:12,219 --> 00:54:17,650
website all the stuff that we talked

00:54:13,900 --> 00:54:19,599
about earlier with PB I conf here unlike

00:54:17,650 --> 00:54:21,759
the main create module page though you

00:54:19,599 --> 00:54:23,019
can also add additional ports so for

00:54:21,759 --> 00:54:24,489
instance if there are ports that are

00:54:23,019 --> 00:54:26,439
plugins for their program that you're

00:54:24,489 --> 00:54:27,969
building you can come to the Edit module

00:54:26,439 --> 00:54:30,400
editor and simply add those ports in

00:54:27,969 --> 00:54:32,709
here afterwards additionally make

00:54:30,400 --> 00:54:35,349
options one of the things the easy PPI

00:54:32,709 --> 00:54:36,910
does when reading a freebsd port is it

00:54:35,349 --> 00:54:38,769
will automatically try to read what

00:54:36,910 --> 00:54:41,469
build options are actually set in that

00:54:38,769 --> 00:54:43,689
port or what ones are available so we'll

00:54:41,469 --> 00:54:45,279
display here a drop-down list of any of

00:54:43,689 --> 00:54:47,170
the options that are available for that

00:54:45,279 --> 00:54:48,849
particular port and if you simply hit

00:54:47,170 --> 00:54:50,769
the up arrow it'll immediately add that

00:54:48,849 --> 00:54:52,239
to your make options line so you don't

00:54:50,769 --> 00:54:53,709
have to go and do the research to figure

00:54:52,239 --> 00:54:56,380
out what options are available for for

00:54:53,709 --> 00:54:58,180
for particular ports easy pbi is pretty

00:54:56,380 --> 00:54:59,650
good it might not get all of them but

00:54:58,180 --> 00:55:02,199
I'd say it gets about ninety percent of

00:54:59,650 --> 00:55:03,939
all the make options and then finally

00:55:02,199 --> 00:55:06,069
does it require root permissions you can

00:55:03,939 --> 00:55:09,339
set that yes or no here as well and then

00:55:06,069 --> 00:55:13,359
save it and it will save the pbi calm in

00:55:09,339 --> 00:55:14,979
your module resources again this is just

00:55:13,359 --> 00:55:16,449
a front end to the resources directory

00:55:14,979 --> 00:55:19,329
in your PB I module what if you want to

00:55:16,449 --> 00:55:20,829
add a different icon for say you have

00:55:19,329 --> 00:55:22,869
two different binaries or our program

00:55:20,829 --> 00:55:25,179
that has two front ends a server and a

00:55:22,869 --> 00:55:28,029
and client and both them have different

00:55:25,179 --> 00:55:31,269
icons or logos you can add as many files

00:55:28,029 --> 00:55:34,329
in here as you would need any PNG files

00:55:31,269 --> 00:55:36,670
that you have here actually will be

00:55:34,329 --> 00:55:38,469
linked in to all the rest of the editor

00:55:36,670 --> 00:55:40,150
when you're selecting icons for programs

00:55:38,469 --> 00:55:42,219
as well any dot PNG so they're

00:55:40,150 --> 00:55:43,869
automatically detected by eztv I and say

00:55:42,219 --> 00:55:46,869
oh well these are the available icons

00:55:43,869 --> 00:55:49,509
that you have for a particular in this

00:55:46,869 --> 00:55:51,189
case desktop or menu entry here it's

00:55:49,509 --> 00:55:53,469
very simple you select your binary easy

00:55:51,189 --> 00:55:55,420
PPI tries to read and detect what the

00:55:53,469 --> 00:55:56,829
automat automatically what the binaries

00:55:55,420 --> 00:55:59,979
are that are available for a particular

00:55:56,829 --> 00:56:01,779
port so you can select that or leave it

00:55:59,979 --> 00:56:03,729
as custom and write it in yourself say

00:56:01,779 --> 00:56:06,309
that eztv I didn't detect it for some

00:56:03,729 --> 00:56:10,059
reason you can just write in bin slash

00:56:06,309 --> 00:56:12,640
Firefox and it will do it and then say

00:56:10,059 --> 00:56:15,130
okay what label do you want and then

00:56:12,640 --> 00:56:16,809
your icon and what menu category the

00:56:15,130 --> 00:56:20,430
menu category of course is only used

00:56:16,809 --> 00:56:24,069
when you actually creating menu entries

00:56:20,430 --> 00:56:25,959
finally external links what if you have

00:56:24,069 --> 00:56:27,849
external links that you want to do here

00:56:25,959 --> 00:56:30,339
you can just easily add them again in

00:56:27,849 --> 00:56:31,689
the file list it'll automatically list

00:56:30,339 --> 00:56:33,759
any binaries that are automatically

00:56:31,689 --> 00:56:35,769
detected this is useful for text

00:56:33,759 --> 00:56:37,390
commands or whatever things that don't

00:56:35,769 --> 00:56:39,009
have a graphical interface that you just

00:56:37,390 --> 00:56:40,329
want to run from the command line you

00:56:39,009 --> 00:56:41,619
might want to link those into your local

00:56:40,329 --> 00:56:43,599
system and you can do that here easily

00:56:41,619 --> 00:56:45,459
again with all the options there a

00:56:43,599 --> 00:56:49,719
binary no crash they just hit the arrow

00:56:45,459 --> 00:56:52,839
to add them in alright so that was a

00:56:49,719 --> 00:56:54,459
quick introduction to building PBIS how

00:56:52,839 --> 00:56:56,650
to do everything on your own system

00:56:54,459 --> 00:56:59,009
including easy pbi do you have any

00:56:56,650 --> 00:56:59,009
questions

00:57:07,010 --> 00:57:12,360
the question was are there any types of

00:57:09,720 --> 00:57:14,910
applications that are not good as PB is

00:57:12,360 --> 00:57:17,250
in that format and the answer is yes

00:57:14,910 --> 00:57:19,800
there are some one that I have run

00:57:17,250 --> 00:57:22,890
across is applications that aren't

00:57:19,800 --> 00:57:25,680
necessarily programs per se but instead

00:57:22,890 --> 00:57:27,300
are like collections of PHP scripts that

00:57:25,680 --> 00:57:29,850
need to be installed into a web server

00:57:27,300 --> 00:57:32,130
those things I would wreak generally

00:57:29,850 --> 00:57:34,830
recommend not making us PBIS because it

00:57:32,130 --> 00:57:37,170
doesn't include the server itself so i

00:57:34,830 --> 00:57:42,140
would say leave those alone install them

00:57:37,170 --> 00:57:42,140
as regular files into your server itself

00:57:42,380 --> 00:57:47,390
all right got just a few more seconds

00:57:45,030 --> 00:57:47,390
anymore

00:58:01,510 --> 00:58:07,010
yes the question was or is there a big

00:58:04,700 --> 00:58:09,080
push to convert freebsd ports into PB is

00:58:07,010 --> 00:58:11,390
and yes there is there are a number of

00:58:09,080 --> 00:58:13,640
people that send in huge batches of pbi

00:58:11,390 --> 00:58:15,020
modules created using easy pbi and we

00:58:13,640 --> 00:58:18,470
actively put those into our build

00:58:15,020 --> 00:58:20,480
servers to churn out PBIS for them well

00:58:18,470 --> 00:58:23,240
thank you for your time thank you for

00:58:20,480 --> 00:58:26,740
coming I hope you have fun building PBIS

00:58:23,240 --> 00:58:26,740
and using freebsd

00:58:41,680 --> 00:58:48,160
how's that sigh every way this is the

00:58:44,859 --> 00:58:50,349
way to better utilize all your resources

00:58:48,160 --> 00:58:53,800
and it makes managing all your resources

00:58:50,349 --> 00:58:57,630
pretty easy all of the innovation is

00:58:53,800 --> 00:59:01,119
happening in open source the

00:58:57,630 --> 00:59:02,920
collaborative nature and of the you know

00:59:01,119 --> 00:59:04,869
of the community and and the speed at

00:59:02,920 --> 00:59:06,760
which these are these you know these

00:59:04,869 --> 00:59:08,890
these deficiencies these bugs are

00:59:06,760 --> 00:59:11,680
getting discovered and then fixed is the

00:59:08,890 --> 00:59:14,470
thing that really shows the power of the

00:59:11,680 --> 00:59:16,300
you know of the open source community it

00:59:14,470 --> 00:59:20,500
is global and it's definitely because of

00:59:16,300 --> 00:59:26,829
the users community people are extremely

00:59:20,500 --> 00:59:28,720
friendly and always ready to help if you

00:59:26,829 --> 00:59:31,000
go on tire see any day you'll see these

00:59:28,720 --> 00:59:32,730
guys helping each other out and they're

00:59:31,000 --> 00:59:35,440
all doing it like in a selfless manner

00:59:32,730 --> 00:59:38,430
the product is transparent for everyone

00:59:35,440 --> 00:59:41,050
everyone can look at the code base

00:59:38,430 --> 00:59:43,089
everyone can see how growth dark is

00:59:41,050 --> 00:59:48,970
being built nothing nothing is

00:59:43,089 --> 00:59:51,609
proprietary everything is open in many

00:59:48,970 --> 00:59:55,809
ways it's absolutely vital to the the

00:59:51,609 --> 00:59:59,559
ongoing health I'll stack the most

00:59:55,809 --> 01:00:03,339
exciting event in recent memory for me

00:59:59,559 --> 01:00:06,280
was our first developer boot camp and

01:00:03,339 --> 01:00:09,760
our call gave people a gave me two weeks

01:00:06,280 --> 01:00:13,930
notice to come attend I was expecting 25

01:00:09,760 --> 01:00:17,260
or 30 people so we ended up with 87

01:00:13,930 --> 01:00:20,079
people and had to go get more chairs

01:00:17,260 --> 01:00:23,260
into the room twice everything within

01:00:20,079 --> 01:00:25,780
cloud computing is commodity and is open

01:00:23,260 --> 01:00:28,599
source and so I don't think that you

01:00:25,780 --> 01:00:30,339
will you'll see anywhere where open

01:00:28,599 --> 01:00:33,400
source is not pervasive in cloud

01:00:30,339 --> 01:00:36,099
computing and so i think it's i think

01:00:33,400 --> 01:00:37,450
it's an assumption i think when you talk

01:00:36,099 --> 01:00:38,559
about cloud computing you're really

01:00:37,450 --> 01:00:41,160
talking about open source cloud

01:00:38,559 --> 01:00:41,160
computing

01:00:41,770 --> 01:00:47,270
CloudStack is a robust solution for

01:00:44,570 --> 01:00:49,670
large deployments you have dozens of

01:00:47,270 --> 01:00:53,570
data centers and thousands of servers in

01:00:49,670 --> 01:00:56,240
each data centers these hardware is

01:00:53,570 --> 01:00:59,720
going to fail and cloudstack is designed

01:00:56,240 --> 01:01:02,420
to handle number one that mass scale

01:00:59,720 --> 01:01:05,600
number two it's designed to handle the

01:01:02,420 --> 01:01:08,480
failure that inevitably happens in large

01:01:05,600 --> 01:01:12,680
deployments started working on contact

01:01:08,480 --> 01:01:15,920
over four years ago and it was the

01:01:12,680 --> 01:01:17,720
original set of people working on it had

01:01:15,920 --> 01:01:21,830
a background of delivering software

01:01:17,720 --> 01:01:26,060
telcos and service providers lots of QA

01:01:21,830 --> 01:01:29,660
lots of users actually using it high

01:01:26,060 --> 01:01:32,750
availability is the key feature multiple

01:01:29,660 --> 01:01:34,760
hypervisors support different network

01:01:32,750 --> 01:01:37,460
models you can pick up whatever suits

01:01:34,760 --> 01:01:39,710
you better while step management server

01:01:37,460 --> 01:01:43,400
can be deployed in different physical

01:01:39,710 --> 01:01:45,050
machines it definitely has a huge

01:01:43,400 --> 01:01:50,030
footprint it's being deployed everywhere

01:01:45,050 --> 01:01:52,640
there's a major movie studio that they

01:01:50,030 --> 01:01:55,910
were using CloudStack they were using it

01:01:52,640 --> 01:01:57,890
to transcode video and I thought that

01:01:55,910 --> 01:01:59,540
was terribly fascinating what I found

01:01:57,890 --> 01:02:02,810
more fascinating is what they did during

01:01:59,540 --> 01:02:05,600
lunch where they would spin up you know

01:02:02,810 --> 01:02:06,980
50 or 60 game servers then as soon as

01:02:05,600 --> 01:02:08,900
lunch was over they would destroy all

01:02:06,980 --> 01:02:13,040
the instances and go back to doing real

01:02:08,900 --> 01:02:14,360
work CloudStack is vast it touches so

01:02:13,040 --> 01:02:16,430
many different aspects and there's no

01:02:14,360 --> 01:02:18,830
one person that's kind of like a master

01:02:16,430 --> 01:02:22,940
of all those realms I think cloudstack

01:02:18,830 --> 01:02:25,160
as a project is going to be one of the

01:02:22,940 --> 01:02:27,000
leaders simply because it's some of the

01:02:25,160 --> 01:02:33,020
most feature Poland

01:02:27,000 --> 01:02:33,020
and and robust platforms out they were

01:02:33,080 --> 01:02:37,550
out on seeing your limits of the clouds

01:02:35,280 --> 01:02:37,550
tag

01:02:50,380 --> 01:02:52,440
you

01:02:55,750 --> 01:03:00,799
when we created asterisk over a decade

01:02:58,460 --> 01:03:02,779
ago we could not have imagined that

01:03:00,799 --> 01:03:04,970
asterisk would not only become the most

01:03:02,779 --> 01:03:07,130
widely adopted open source communication

01:03:04,970 --> 01:03:09,140
software on the planet but that it would

01:03:07,130 --> 01:03:11,660
impact the entire industry in the way

01:03:09,140 --> 01:03:13,640
that it has today asterisk has found its

01:03:11,660 --> 01:03:16,279
way in the more than 170 countries and

01:03:13,640 --> 01:03:18,230
virtually every fortune 1000 company the

01:03:16,279 --> 01:03:20,299
success of asterisk has enabled a

01:03:18,230 --> 01:03:21,740
transition of power from the hands of

01:03:20,299 --> 01:03:24,019
the traditional proprietary phone

01:03:21,740 --> 01:03:26,420
vendors into the hands of the users and

01:03:24,019 --> 01:03:28,339
administrators of phone systems using

01:03:26,420 --> 01:03:29,569
this power our customers have created

01:03:28,339 --> 01:03:31,519
all sorts of business changing

01:03:29,569 --> 01:03:33,349
applications from small office phone

01:03:31,519 --> 01:03:35,900
systems to mission-critical call centers

01:03:33,349 --> 01:03:37,490
the international carrier networks in

01:03:35,900 --> 01:03:39,260
fact there's even an entire country

01:03:37,490 --> 01:03:41,869
those communications infrastructure runs

01:03:39,260 --> 01:03:43,789
on esters the gym has always been about

01:03:41,869 --> 01:03:45,500
creating technology that expands

01:03:43,789 --> 01:03:47,690
communications capabilities in ways that

01:03:45,500 --> 01:03:48,859
we could never have imagined and that's

01:03:47,690 --> 01:03:51,619
part of what's game-changing about

01:03:48,859 --> 01:03:53,960
Digium today we're doing it again this

01:03:51,619 --> 01:03:56,059
time by introducing a new family of HD

01:03:53,960 --> 01:03:58,160
IP phones that extends control of the

01:03:56,059 --> 01:03:59,930
user all the way to the desktop the

01:03:58,160 --> 01:04:01,640
launch of these new products represents

01:03:59,930 --> 01:04:03,740
the next phase indigenous history of

01:04:01,640 --> 01:04:06,140
innovation these are the first and only

01:04:03,740 --> 01:04:07,849
IP phones designed to fully leverage the

01:04:06,140 --> 01:04:09,529
power of estrus when we first discussed

01:04:07,849 --> 01:04:11,420
our expectations for building a family

01:04:09,529 --> 01:04:13,579
of phones for use with asterisk our

01:04:11,420 --> 01:04:15,319
requirements were pretty simple we asked

01:04:13,579 --> 01:04:16,970
the team to build the phones such that

01:04:15,319 --> 01:04:19,160
they were easy to install integrate

01:04:16,970 --> 01:04:21,019
provision and use I think you'll soon

01:04:19,160 --> 01:04:23,569
agree our engineers have delivered on

01:04:21,019 --> 01:04:25,190
that goal user feedback is validating

01:04:23,569 --> 01:04:27,319
that when it comes to operation with

01:04:25,190 --> 01:04:29,750
astro space systems including our own

01:04:27,319 --> 01:04:32,329
Switchvox based product these are the

01:04:29,750 --> 01:04:33,619
easiest to use best integrated most

01:04:32,329 --> 01:04:36,200
interoperable products on the market

01:04:33,619 --> 01:04:38,200
today the digitally of phones will

01:04:36,200 --> 01:04:40,250
initially include three IP des hommes

01:04:38,200 --> 01:04:42,200
uniquely designed to complement any

01:04:40,250 --> 01:04:44,059
asterisks or switch box based solution

01:04:42,200 --> 01:04:46,730
these phones are different for a number

01:04:44,059 --> 01:04:49,400
of reasons first there is clue sively

01:04:46,730 --> 01:04:50,809
designed for use with esters secondly

01:04:49,400 --> 01:04:52,420
we've made it really easy to

01:04:50,809 --> 01:04:54,829
autodiscover and provision the phones

01:04:52,420 --> 01:04:56,509
next we've made it easy for the phones

01:04:54,829 --> 01:04:58,220
to access information inside of

01:04:56,509 --> 01:04:59,840
asterisks allowing tight coupling

01:04:58,220 --> 01:05:02,420
between an application and

01:04:59,840 --> 01:05:04,580
phone additionally we've created an

01:05:02,420 --> 01:05:06,710
applications engine that allows users

01:05:04,580 --> 01:05:09,950
and developers to create and run their

01:05:06,710 --> 01:05:11,720
own apps on the phone and finally we've

01:05:09,950 --> 01:05:13,670
done all of this at a very compelling

01:05:11,720 --> 01:05:15,350
price point at Digium we're always

01:05:13,670 --> 01:05:17,450
thinking of ways to give our customers

01:05:15,350 --> 01:05:20,030
the best value in business phone systems

01:05:17,450 --> 01:05:21,560
and also give them the power to create

01:05:20,030 --> 01:05:23,720
their own solutions or any

01:05:21,560 --> 01:05:25,430
communications challenge will continue

01:05:23,720 --> 01:05:26,900
to push the boundaries not only to make

01:05:25,430 --> 01:05:28,940
Astra's cooler bastard more

01:05:26,900 --> 01:05:30,680
technologically feature-rich but to make

01:05:28,940 --> 01:05:33,200
asterisk and communications even easier

01:05:30,680 --> 01:05:36,730
and together we'll change the way the

01:05:33,200 --> 01:05:36,730
world communicates again

01:05:52,740 --> 01:05:54,800
you

01:06:12,180 --> 01:06:14,240

YouTube URL: https://www.youtube.com/watch?v=AOu5yz599KU


