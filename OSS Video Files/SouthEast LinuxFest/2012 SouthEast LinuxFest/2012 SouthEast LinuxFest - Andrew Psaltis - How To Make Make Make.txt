Title: 2012 SouthEast LinuxFest - Andrew Psaltis - How To Make Make Make
Publication date: 2013-04-13
Playlist: 2012 SouthEast LinuxFest
Description: 
	2012 SouthEast LinuxFest
Andrew Psaltis
How To Make Make Make
Captions: 
	00:00:00,000 --> 00:00:05,310
the following presentation was recorded

00:00:02,520 --> 00:00:08,069
the 2012 southeast linux fest in

00:00:05,310 --> 00:00:10,440
charlotte north carolina it is licensed

00:00:08,069 --> 00:00:12,120
under a creative commons license for

00:00:10,440 --> 00:00:17,609
more information about the southeast

00:00:12,120 --> 00:00:19,470
linux fest visit WWF is linux pc org the

00:00:17,609 --> 00:00:22,350
southeast linux fest would like to thank

00:00:19,470 --> 00:00:25,010
the following diamond sponsors in 2012

00:00:22,350 --> 00:00:27,480
for helping make these videos possible

00:00:25,010 --> 00:00:30,560
sure every single one of you at some

00:00:27,480 --> 00:00:34,079
point has seen these three lines their

00:00:30,560 --> 00:00:37,140
vision center the the go this is the

00:00:34,079 --> 00:00:39,420
traditional setup sequence for a or many

00:00:37,140 --> 00:00:42,510
open-source projects that use the new

00:00:39,420 --> 00:00:46,280
auto tools set and configured a shell

00:00:42,510 --> 00:00:48,120
script make and make is well make and

00:00:46,280 --> 00:00:50,129
considering that make is itself

00:00:48,120 --> 00:00:52,440
two-thirds of this process it's probably

00:00:50,129 --> 00:00:55,469
the very very very important part of

00:00:52,440 --> 00:00:57,780
this and even for response project small

00:00:55,469 --> 00:01:01,320
and large you will see you see this sort

00:00:57,780 --> 00:01:04,979
of setup used but usually the make files

00:01:01,320 --> 00:01:07,500
there are automatically generated its is

00:01:04,979 --> 00:01:09,390
because of some things i will discuss

00:01:07,500 --> 00:01:11,790
later but there are still plenty of

00:01:09,390 --> 00:01:14,310
reasons for you to write your own make

00:01:11,790 --> 00:01:16,140
files so what am i going to talk about

00:01:14,310 --> 00:01:17,939
here i'm going to go get into will

00:01:16,140 --> 00:01:21,780
detail about what make is some

00:01:17,939 --> 00:01:24,390
introductory how two variables how to

00:01:21,780 --> 00:01:29,520
make make generic some functions anymore

00:01:24,390 --> 00:01:31,020
couple key to use and oh and some useful

00:01:29,520 --> 00:01:34,909
information that is conveniently not on

00:01:31,020 --> 00:01:37,560
the bottom of the slides the projector

00:01:34,909 --> 00:01:40,829
okay well that's on the bottom of my

00:01:37,560 --> 00:01:43,649
screen so what is make make is a tool

00:01:40,829 --> 00:01:45,149
for automating tasks and which files

00:01:43,649 --> 00:01:46,710
need to be updated if some other files

00:01:45,149 --> 00:01:48,630
are can change the quintessential

00:01:46,710 --> 00:01:51,420
example this is of course software is

00:01:48,630 --> 00:01:53,130
it's designed by the original make not

00:01:51,420 --> 00:01:54,240
new make was designed by us to her

00:01:53,130 --> 00:01:57,060
Feldman in nineteen nineteen

00:01:54,240 --> 00:01:59,579
seventy-seven for this purpose and canoe

00:01:57,060 --> 00:02:01,979
make was made by richard stallman and

00:01:59,579 --> 00:02:05,640
Raul McGrath 1987 1988 and is still

00:02:01,979 --> 00:02:09,170
maintained to this day so what do I mean

00:02:05,640 --> 00:02:09,170
when I say tasks that need to be

00:02:11,670 --> 00:02:17,140
okay well well if this would be seen

00:02:15,819 --> 00:02:18,459
there there be two there's two little

00:02:17,140 --> 00:02:21,219
circles in the bottom there also blue

00:02:18,459 --> 00:02:22,930
the idea is that you start out with

00:02:21,219 --> 00:02:24,519
there were two swords on everything d

00:02:22,930 --> 00:02:27,459
and e if you're to update file if you

00:02:24,519 --> 00:02:29,530
update the files d and e you need to

00:02:27,459 --> 00:02:32,530
update B which never returned need to

00:02:29,530 --> 00:02:35,349
update a if you update see you would

00:02:32,530 --> 00:02:38,650
also need to update a but since b is not

00:02:35,349 --> 00:02:42,930
any way related to see you doesn't need

00:02:38,650 --> 00:02:45,340
to be able to rebuild be dependencies

00:02:42,930 --> 00:02:47,650
dissolve is all about dependency trees

00:02:45,340 --> 00:02:50,230
make its when you run make it builds a

00:02:47,650 --> 00:02:52,569
internal structure like this and builds

00:02:50,230 --> 00:02:55,480
and figures out what needs to be updated

00:02:52,569 --> 00:03:00,700
based on file timestamps i'll update

00:02:55,480 --> 00:03:03,010
times so throwing up make is a pretty

00:03:00,700 --> 00:03:05,079
common and there's a lot of ways to

00:03:03,010 --> 00:03:07,180
generate make files your feet and there

00:03:05,079 --> 00:03:11,129
there's a fight it quick number things

00:03:07,180 --> 00:03:14,799
name to make there's a bunch of them

00:03:11,129 --> 00:03:17,349
automake is the new McFall generator as

00:03:14,799 --> 00:03:19,959
user thought oh tools see make is the

00:03:17,349 --> 00:03:21,310
cross is kit where's cross-platform make

00:03:19,959 --> 00:03:23,829
follow generator also during raised

00:03:21,310 --> 00:03:27,519
Xcode project files and Microsoft Visual

00:03:23,829 --> 00:03:29,139
Studio files you need to do that I think

00:03:27,519 --> 00:03:30,220
it's kind of nice sometimes a G make is

00:03:29,139 --> 00:03:33,220
going to make what I'm going to be

00:03:30,220 --> 00:03:35,560
talking about here I make is the make

00:03:33,220 --> 00:03:38,590
file generator that was used in the old

00:03:35,560 --> 00:03:41,620
x.x projects it has since been replaced

00:03:38,590 --> 00:03:44,169
by using Auto tools probably because

00:03:41,620 --> 00:03:46,449
everything else is using Auto tools and

00:03:44,169 --> 00:03:49,540
make depending on where you're from is

00:03:46,449 --> 00:03:53,829
either old 18t unix make or a Mick

00:03:49,540 --> 00:03:55,329
variant for microsoft windows I have

00:03:53,829 --> 00:03:57,699
only seen one case and then make ever

00:03:55,329 --> 00:04:00,159
views to Microsoft Windows that was a

00:03:57,699 --> 00:04:03,040
very very weird thing and most people

00:04:00,159 --> 00:04:05,500
aj's pretty sure use visual studio omake

00:04:03,040 --> 00:04:08,500
is an objective camel variant on make

00:04:05,500 --> 00:04:10,090
its has its own will feature said though

00:04:08,500 --> 00:04:12,970
it's kind of it kind of more resembles

00:04:10,090 --> 00:04:16,329
see make or scons if you've ever used

00:04:12,970 --> 00:04:18,549
those tools p make is BST parallel make

00:04:16,329 --> 00:04:20,739
it's also make it's very similar to

00:04:18,549 --> 00:04:22,750
canoe make except it has a different

00:04:20,739 --> 00:04:23,800
feature set some of the has some things

00:04:22,750 --> 00:04:26,259
that make does not

00:04:23,800 --> 00:04:27,490
that canoe makers not provide but then

00:04:26,259 --> 00:04:28,960
again make and who make also provide

00:04:27,490 --> 00:04:30,610
some things that PSD make this offer but

00:04:28,960 --> 00:04:33,129
I have not to come too much into the

00:04:30,610 --> 00:04:36,129
internals of bsd make but there I've

00:04:33,129 --> 00:04:38,560
heard that the fact is a little more I'm

00:04:36,129 --> 00:04:41,080
nice with conditionals i'll get i'll

00:04:38,560 --> 00:04:44,379
talk about that we do make later and q

00:04:41,080 --> 00:04:48,190
make is a key tool you by the Qt project

00:04:44,379 --> 00:04:51,789
to generate make files from a set of C++

00:04:48,190 --> 00:04:55,120
files for their server projects and it's

00:04:51,789 --> 00:04:57,039
also very nice and simple to use and so

00:04:55,120 --> 00:04:58,509
the pores are like half of these are

00:04:57,039 --> 00:05:00,639
make all generators so we don't care

00:04:58,509 --> 00:05:04,840
about them they're gone Boosh BAM

00:05:00,639 --> 00:05:07,750
disappeared Oh make is itself a strange

00:05:04,840 --> 00:05:09,729
entity it kind of contains its instead

00:05:07,750 --> 00:05:11,680
of having a bunch of target rules as I

00:05:09,729 --> 00:05:12,969
specify later it's more based on you

00:05:11,680 --> 00:05:14,469
have a set of files and glop them

00:05:12,969 --> 00:05:16,000
together and say make a seed program out

00:05:14,469 --> 00:05:18,699
of this we're making a camel program out

00:05:16,000 --> 00:05:20,500
of this so we can ignore that what we

00:05:18,699 --> 00:05:23,289
have left here or considered to be true

00:05:20,500 --> 00:05:25,750
makes do you make and make P make but

00:05:23,289 --> 00:05:27,849
since you're either up with you of m

00:05:25,750 --> 00:05:30,009
maker using a really old system or using

00:05:27,849 --> 00:05:33,120
Windows and if you're using Windows your

00:05:30,009 --> 00:05:35,740
problem using visual studio so goodbye

00:05:33,120 --> 00:05:38,469
between G make and Pima canoe make is

00:05:35,740 --> 00:05:40,630
significantly more common Elmo time I've

00:05:38,469 --> 00:05:45,190
seen parallel make you bsd parallel make

00:05:40,630 --> 00:05:47,289
used is on a bsd and some rare cases in

00:05:45,190 --> 00:05:48,930
which some guy liked p make better for

00:05:47,289 --> 00:05:51,789
some reason I never really got a doubt

00:05:48,930 --> 00:05:54,009
so we can get rid of two so all we're

00:05:51,789 --> 00:05:55,509
left now is the most common making

00:05:54,009 --> 00:05:57,190
existence whenever someone says make

00:05:55,509 --> 00:05:59,500
it's ninety-nine percent of time it's

00:05:57,190 --> 00:06:01,659
good new mate it's G make organ ooh make

00:05:59,500 --> 00:06:03,699
if you're on bsd actually is called g

00:06:01,659 --> 00:06:06,490
make every one every other system it is

00:06:03,699 --> 00:06:10,029
just plain old make mac OS is first half

00:06:06,490 --> 00:06:11,289
was also a plane i'll make so first time

00:06:10,029 --> 00:06:13,389
using agree why you might want to use

00:06:11,289 --> 00:06:15,330
make it is awesome because it is simple

00:06:13,389 --> 00:06:18,129
and powerful it is the equivalent of

00:06:15,330 --> 00:06:20,050
coop it is the is pretty much shell

00:06:18,129 --> 00:06:24,759
scripting with that has knowledge of

00:06:20,050 --> 00:06:26,199
dependencies and this also has the this

00:06:24,759 --> 00:06:27,490
is all the benefits of being simple and

00:06:26,199 --> 00:06:29,469
powerful of shell scripting however it

00:06:27,490 --> 00:06:32,589
also has all the non benefits of shell

00:06:29,469 --> 00:06:37,270
scripting like the first one the

00:06:32,589 --> 00:06:37,720
literalness if o make mix when it makes

00:06:37,270 --> 00:06:41,410
known

00:06:37,720 --> 00:06:42,970
language there are ways to confuse it so

00:06:41,410 --> 00:06:45,820
when i get to variable with declarations

00:06:42,970 --> 00:06:47,260
later you can have a variable say foo

00:06:45,820 --> 00:06:48,760
equals bar and if you actually leave a

00:06:47,260 --> 00:06:51,160
space on the end of the line it will

00:06:48,760 --> 00:06:53,980
include the space in the variable what

00:06:51,160 --> 00:06:56,590
you may or may not want if you

00:06:53,980 --> 00:06:57,880
accidentally do that and wonder why it's

00:06:56,590 --> 00:07:01,350
trying to resolve a following with a

00:06:57,880 --> 00:07:03,520
space on the end of it it's going to be

00:07:01,350 --> 00:07:06,130
going to be confused for a little while

00:07:03,520 --> 00:07:07,420
enable your enable white a white space

00:07:06,130 --> 00:07:09,880
viewing mode in your favorite text

00:07:07,420 --> 00:07:13,300
editor its pulse are prone in

00:07:09,880 --> 00:07:15,070
consistency if you there are met all

00:07:13,300 --> 00:07:16,150
programming Lee we suffer them to suffer

00:07:15,070 --> 00:07:17,410
from the problem that if they're all

00:07:16,150 --> 00:07:19,870
programmed and consistently they're

00:07:17,410 --> 00:07:23,140
going to be inconsistent so but make

00:07:19,870 --> 00:07:24,760
doesn't help this effect it's very easy

00:07:23,140 --> 00:07:27,010
to write inconsistent make files waiting

00:07:24,760 --> 00:07:28,630
you can start writing implicit things

00:07:27,010 --> 00:07:30,760
that are picked up by other parts of the

00:07:28,630 --> 00:07:33,190
program part of the program other parts

00:07:30,760 --> 00:07:34,360
of the make file that other developers

00:07:33,190 --> 00:07:36,310
might not know about their having to

00:07:34,360 --> 00:07:38,470
read a bunch of other make files that

00:07:36,310 --> 00:07:41,530
you have lying around it's hard to debug

00:07:38,470 --> 00:07:43,990
I'll imagine your cell scripting except

00:07:41,530 --> 00:07:45,690
you can't tell it to fail if you don't

00:07:43,990 --> 00:07:49,440
have if you have undefined variables or

00:07:45,690 --> 00:07:51,640
you can't give or you can get all the

00:07:49,440 --> 00:07:53,580
internal stuff set by make without

00:07:51,640 --> 00:07:57,130
getting is humongous blob of memory

00:07:53,580 --> 00:07:58,419
stuff it's rather messily i can give you

00:07:57,130 --> 00:08:00,490
there are some tips to help with that

00:07:58,419 --> 00:08:05,380
but it's mostly do it right the first

00:08:00,490 --> 00:08:07,930
time sorry and mega also has its own set

00:08:05,380 --> 00:08:09,460
of quirks a lot of the there's a lot of

00:08:07,930 --> 00:08:12,810
implicit stuff that's going on the

00:08:09,460 --> 00:08:16,660
literal part is also a quirk there and

00:08:12,810 --> 00:08:19,810
the only way to really learn these is to

00:08:16,660 --> 00:08:22,690
experience them for yourself but the a

00:08:19,810 --> 00:08:24,880
lot of the quirks are also well

00:08:22,690 --> 00:08:29,890
documented make manual is a hey vis a

00:08:24,880 --> 00:08:32,140
very very very well-documented make is

00:08:29,890 --> 00:08:34,330
very very very well-documented even one

00:08:32,140 --> 00:08:36,190
of the advantages of make manual how you

00:08:34,330 --> 00:08:39,130
look at it describes every single error

00:08:36,190 --> 00:08:41,469
that make itself will spit out and gives

00:08:39,130 --> 00:08:44,830
a reason why it happened most that

00:08:41,469 --> 00:08:46,510
cannot be given for that bandage cannot

00:08:44,830 --> 00:08:48,370
be given to most software these days

00:08:46,510 --> 00:08:51,040
every single possible error making give

00:08:48,370 --> 00:08:51,580
out is described of course the reasons

00:08:51,040 --> 00:08:53,800
why it's

00:08:51,580 --> 00:08:55,090
opening it will say like oh yeah you

00:08:53,800 --> 00:08:56,680
have a colon in this line that you

00:08:55,090 --> 00:08:58,810
weren't supposed to have but then you

00:08:56,680 --> 00:09:01,720
say I don't have a colon on this line or

00:08:58,810 --> 00:09:03,850
this colon come from and that's usually

00:09:01,720 --> 00:09:05,320
not require just it helps you figure out

00:09:03,850 --> 00:09:07,300
where the problem is and then you can

00:09:05,320 --> 00:09:13,980
then you can go figure out what it is

00:09:07,300 --> 00:09:16,780
yourself later so now on to make 101 so

00:09:13,980 --> 00:09:18,640
how many people so out of the people

00:09:16,780 --> 00:09:23,380
here how many people how software is

00:09:18,640 --> 00:09:25,510
made from source code okay for the

00:09:23,380 --> 00:09:27,160
benefit of those who don't the it's

00:09:25,510 --> 00:09:29,380
traditionally done in two steps there's

00:09:27,160 --> 00:09:31,300
a compiling stage in a linking stage in

00:09:29,380 --> 00:09:34,240
the compiling stage the source code is

00:09:31,300 --> 00:09:36,700
turned into binary and the linking stage

00:09:34,240 --> 00:09:38,740
copies of the binary files are taken and

00:09:36,700 --> 00:09:41,940
combined into a library or an executable

00:09:38,740 --> 00:09:44,770
or whatever you're trying to make so and

00:09:41,940 --> 00:09:47,140
when you can pop each compilation step

00:09:44,770 --> 00:09:50,230
for each file is independent of each

00:09:47,140 --> 00:09:52,480
other file in a certain set of files so

00:09:50,230 --> 00:09:57,240
if you have so like I said like that

00:09:52,480 --> 00:10:00,100
reorder or if you have if you update be

00:09:57,240 --> 00:10:01,840
be the tree of the node on its own and

00:10:00,100 --> 00:10:03,970
you don't need to go and update the

00:10:01,840 --> 00:10:07,090
other the other targets see it depends

00:10:03,970 --> 00:10:08,560
on it just you can only need to do the

00:10:07,090 --> 00:10:11,140
step that can put the compilation step

00:10:08,560 --> 00:10:12,940
only when it's needed if it's nothing

00:10:11,140 --> 00:10:16,300
there or hasn't been up or it has been

00:10:12,940 --> 00:10:18,850
updated since the files changed and this

00:10:16,300 --> 00:10:23,500
is why soft make is used for software a

00:10:18,850 --> 00:10:25,360
lot so this is an example of a simple

00:10:23,500 --> 00:10:27,820
pic foul target that doesn't really do

00:10:25,360 --> 00:10:30,460
much the target is on the first

00:10:27,820 --> 00:10:32,350
character first line the starts in the

00:10:30,460 --> 00:10:35,470
first part of the line said it's just a

00:10:32,350 --> 00:10:37,390
name without spaces and you can have

00:10:35,470 --> 00:10:38,950
space but that's much much much more

00:10:37,390 --> 00:10:41,290
complicated I can't really get into that

00:10:38,950 --> 00:10:43,390
and then you have a space separated list

00:10:41,290 --> 00:10:44,830
of dependencies after the fact and the

00:10:43,390 --> 00:10:47,350
East dependency and make will try to

00:10:44,830 --> 00:10:50,340
resolve these dependencies upon before

00:10:47,350 --> 00:10:53,410
it tries to do anything with target and

00:10:50,340 --> 00:10:55,360
the end there is a there's a bunch of

00:10:53,410 --> 00:10:57,980
commands see that space in front of

00:10:55,360 --> 00:11:00,890
their see this space here

00:10:57,980 --> 00:11:03,650
this is a tab these are not eight spaces

00:11:00,890 --> 00:11:05,390
a lot of people make this assay a lot of

00:11:03,650 --> 00:11:08,180
people make this mistake if you you're a

00:11:05,390 --> 00:11:11,240
lot of editors do not know intelligently

00:11:08,180 --> 00:11:13,280
no to insert a tab here make will make

00:11:11,240 --> 00:11:15,830
will get angry you and say you will put

00:11:13,280 --> 00:11:19,940
a spaces here not a tab fix it if you do

00:11:15,830 --> 00:11:21,950
that and it it's a it's what you can

00:11:19,940 --> 00:11:23,810
change it technically by it's a

00:11:21,950 --> 00:11:28,930
convention so please note and for

00:11:23,810 --> 00:11:32,420
emphasis there it is again in large text

00:11:28,930 --> 00:11:36,050
so here is a simple make file that I

00:11:32,420 --> 00:11:38,390
made for a wonderful poor a up so Paul

00:11:36,050 --> 00:11:41,720
program i may just a bit to file hello

00:11:38,390 --> 00:11:43,310
world program in this case the first

00:11:41,720 --> 00:11:45,500
target in the file is all depends on

00:11:43,310 --> 00:11:47,060
holo by convention the first target and

00:11:45,500 --> 00:11:48,920
make file is all it doesn't have to be

00:11:47,060 --> 00:11:51,410
it could be the driver just made hello

00:11:48,920 --> 00:11:53,570
it to put the put the hello thing at the

00:11:51,410 --> 00:11:55,340
top of it well if I wanted to but it's

00:11:53,570 --> 00:11:58,760
all it's considered a good convention

00:11:55,340 --> 00:12:01,580
and hello in this case depends on two

00:11:58,760 --> 00:12:03,440
targets hello 20 and say oh say ho toh

00:12:01,580 --> 00:12:06,440
which are two bike which are binary

00:12:03,440 --> 00:12:09,080
object files those in turn depend on

00:12:06,440 --> 00:12:12,440
their source files and the rules for

00:12:09,080 --> 00:12:14,720
each one of them are called GCC there is

00:12:12,440 --> 00:12:20,450
also what you can't see there which I

00:12:14,720 --> 00:12:26,440
will show you all in them ah why'd you

00:12:20,450 --> 00:12:26,440
do that so here's the

00:12:32,450 --> 00:12:38,990
see that better fortunately playing the

00:12:36,530 --> 00:12:44,600
projector so here at the bottom there is

00:12:38,990 --> 00:12:46,910
a rule to clean and this rule and this

00:12:44,600 --> 00:12:51,110
rule just goes and removes the target

00:12:46,910 --> 00:12:52,550
excuse all the stuff that make made this

00:12:51,110 --> 00:12:53,810
is off what's different about this

00:12:52,550 --> 00:12:55,700
target is that this target doesn't

00:12:53,810 --> 00:12:57,020
actually generate a file named clean if

00:12:55,700 --> 00:12:58,580
you type in make clean you can type in

00:12:57,020 --> 00:13:00,140
McLean all you want it will keep on

00:12:58,580 --> 00:13:01,730
trying to clean over and over and over

00:13:00,140 --> 00:13:03,920
again because the cleaning target is

00:13:01,730 --> 00:13:06,050
actually never made every time you go in

00:13:03,920 --> 00:13:08,030
to make it just well the window clean

00:13:06,050 --> 00:13:10,310
file isn't it so make won't see that

00:13:08,030 --> 00:13:14,240
needs to update the cleaning target so

00:13:10,310 --> 00:13:19,690
it just 12 try to call clean so can you

00:13:14,240 --> 00:13:19,690
see this that better

00:13:37,600 --> 00:13:41,040
I one sec

00:13:44,329 --> 00:13:50,299
better I wasn't expecting that if

00:13:48,350 --> 00:13:52,220
there's some cases the colors my sweet

00:13:50,299 --> 00:13:56,480
hard to read and I apologize for can't

00:13:52,220 --> 00:14:00,139
we do much about it so here's my make

00:13:56,480 --> 00:14:06,829
here's that make file i was aware the so

00:14:00,139 --> 00:14:09,379
I'm did that's the projector I can't do

00:14:06,829 --> 00:14:12,709
anything but it's shifted over to the

00:14:09,379 --> 00:14:20,379
site in the projector oh you want it to

00:14:12,709 --> 00:14:20,379
be the top of screen that ok

00:14:36,320 --> 00:14:41,130
so if i get back to it if i just type

00:14:39,570 --> 00:14:45,450
and make here it will try to resolve a

00:14:41,130 --> 00:14:46,890
target all and i'm not apparently had a

00:14:45,450 --> 00:14:49,650
bunch of stuff of mirror so if I do make

00:14:46,890 --> 00:14:51,690
it will make all which depends on those

00:14:49,650 --> 00:14:53,460
optic files like these are it prints out

00:14:51,690 --> 00:14:56,190
all the commands it just executed to the

00:14:53,460 --> 00:14:57,780
file all to the console which can be

00:14:56,190 --> 00:15:02,250
helpful for figuring out what's going on

00:14:57,780 --> 00:15:06,300
same deal if I did clean I know is how

00:15:02,250 --> 00:15:08,400
you just do clean over over and over it

00:15:06,300 --> 00:15:09,480
over unfortunately it's running kind of

00:15:08,400 --> 00:15:11,790
running off the bottom of the terminal

00:15:09,480 --> 00:15:13,140
so it taking a lock or show it up but

00:15:11,790 --> 00:15:14,520
since clean the clean file has ever

00:15:13,140 --> 00:15:17,250
written it's never going to be updated I

00:15:14,520 --> 00:15:20,120
can also target other I can also call

00:15:17,250 --> 00:15:20,120
hello directly

00:15:28,490 --> 00:15:34,640
hello directly and if i call it again it

00:15:31,520 --> 00:15:36,370
will say hello is up to date i call just

00:15:34,640 --> 00:15:42,170
plain i'll make again they'll also say

00:15:36,370 --> 00:15:44,000
nothing done it's all make calling make

00:15:42,170 --> 00:15:46,610
itself is a pretty simple process which

00:15:44,000 --> 00:15:48,620
is conveniently i'm going to next so

00:15:46,610 --> 00:15:51,260
there are many ways to call make these

00:15:48,620 --> 00:15:53,540
are there are some make as a bunch of

00:15:51,260 --> 00:15:54,470
command-line flags much of all things

00:15:53,540 --> 00:15:56,360
you can throw out the command line so

00:15:54,470 --> 00:15:59,240
plain ol make will look for a file named

00:15:56,360 --> 00:16:02,000
nick file or good new make file could

00:15:59,240 --> 00:16:03,890
make file first and it will it will try

00:16:02,000 --> 00:16:07,370
to find the first target that make file

00:16:03,890 --> 00:16:09,560
and run make on it you can also specify

00:16:07,370 --> 00:16:11,120
a list of targets these bay separated

00:16:09,560 --> 00:16:12,709
list of targets you can say like i said

00:16:11,120 --> 00:16:14,420
hello you can also say you can also have

00:16:12,709 --> 00:16:16,160
just built a lob jaques hello oh and say

00:16:14,420 --> 00:16:17,870
dash hello dot oh and it would have

00:16:16,160 --> 00:16:20,570
built them those two objects and not the

00:16:17,870 --> 00:16:23,029
not the executable and i'll specify an

00:16:20,570 --> 00:16:24,649
arbitrary target file is to be used

00:16:23,029 --> 00:16:26,870
instead of make file or going to make

00:16:24,649 --> 00:16:28,490
file its may be useful when you're make

00:16:26,870 --> 00:16:31,310
file is a different name or you need to

00:16:28,490 --> 00:16:37,300
or you calling make file an executable

00:16:31,310 --> 00:16:40,010
make file oh the first are gonna pop

00:16:37,300 --> 00:16:43,579
note no targets means first hearted in

00:16:40,010 --> 00:16:46,459
the file no file means make file or good

00:16:43,579 --> 00:16:48,500
evening file and alternatively you can

00:16:46,459 --> 00:16:50,570
set variables on the command on the

00:16:48,500 --> 00:16:53,890
command line to this is used most useful

00:16:50,570 --> 00:16:56,570
when you start dealing with gesture is a

00:16:53,890 --> 00:16:59,740
very very very commonly used convention

00:16:56,570 --> 00:17:02,990
for packages for a package installation

00:16:59,740 --> 00:17:07,010
so one more thing before I leave make

00:17:02,990 --> 00:17:09,319
101 so make has a funky wit there's

00:17:07,010 --> 00:17:10,760
comments or handle in this in sometimes

00:17:09,319 --> 00:17:13,309
in a strange way so the first comment

00:17:10,760 --> 00:17:14,809
there is a on the first line the pound

00:17:13,309 --> 00:17:17,929
signs on the first line of the first

00:17:14,809 --> 00:17:19,400
part of the line its is the is a make

00:17:17,929 --> 00:17:20,990
file comment make will not read anything

00:17:19,400 --> 00:17:23,780
on that line we'll just skip the line

00:17:20,990 --> 00:17:25,640
however when you have a tab followed by

00:17:23,780 --> 00:17:29,030
the Paul that how inside that it will

00:17:25,640 --> 00:17:30,559
make will still do stuff on that line it

00:17:29,030 --> 00:17:32,390
will pass out line to the shell and the

00:17:30,559 --> 00:17:34,760
she'll say oh it's a comment I'll do

00:17:32,390 --> 00:17:36,950
nothing with it but make will still do

00:17:34,760 --> 00:17:38,690
some things with it when i get to make

00:17:36,950 --> 00:17:40,970
functions later if you have functions in

00:17:38,690 --> 00:17:42,080
your shell comments it will so try to

00:17:40,970 --> 00:17:43,669
expand the comment

00:17:42,080 --> 00:17:50,779
expand them in the comments which you

00:17:43,669 --> 00:17:52,340
may not want case so variables here's a

00:17:50,779 --> 00:17:55,580
simplest way to may set a variable you

00:17:52,340 --> 00:17:57,769
have a variable colon equals value you

00:17:55,580 --> 00:17:59,059
do not need to quote the variable it

00:17:57,769 --> 00:18:00,649
will read it until the it will read

00:17:59,059 --> 00:18:03,740
until it finds the first unescape new

00:18:00,649 --> 00:18:06,019
line this case you in that cave it's

00:18:03,740 --> 00:18:08,029
just literally it would be the variable

00:18:06,019 --> 00:18:11,450
food we contain bar parenthesis food

00:18:08,029 --> 00:18:13,010
contains bar but that's not but I'm just

00:18:11,450 --> 00:18:15,679
making assumption error just showing

00:18:13,010 --> 00:18:17,809
what it contains alternatively but this

00:18:15,679 --> 00:18:19,130
assignment is done instantly these bit

00:18:17,809 --> 00:18:22,220
disturbed food contains a valuable bar

00:18:19,130 --> 00:18:24,470
right Nick bar right now but then it can

00:18:22,220 --> 00:18:27,409
also append to the variable so plus

00:18:24,470 --> 00:18:30,409
equals Baz pool now contains these bar

00:18:27,409 --> 00:18:32,809
space pads the space is added on by a

00:18:30,409 --> 00:18:35,120
plus equals operator it's you a lot of

00:18:32,809 --> 00:18:37,130
make stuffed handle is dealing with

00:18:35,120 --> 00:18:41,330
space separated lists or white space

00:18:37,130 --> 00:18:42,799
separated lists so in this case use

00:18:41,330 --> 00:18:44,600
there's a way here's here's how you get

00:18:42,799 --> 00:18:46,850
access to a maker when you put a dollar

00:18:44,600 --> 00:18:48,950
sign a parenthesis a variable name in a

00:18:46,850 --> 00:18:50,779
temper entha see and it will pull up the

00:18:48,950 --> 00:18:53,360
string actually it wishes that should be

00:18:50,779 --> 00:18:55,490
read bar baz and notice how is the

00:18:53,360 --> 00:19:00,529
parentheses there if you do not do that

00:18:55,490 --> 00:19:02,600
it will read it will read just that will

00:19:00,529 --> 00:19:04,100
happen so if you put a dollar sign the

00:19:02,600 --> 00:19:06,350
beginning or the dollar signs only

00:19:04,100 --> 00:19:08,299
associated with the next character so

00:19:06,350 --> 00:19:10,130
it'll look for a variable F and then the

00:19:08,299 --> 00:19:14,000
rest of the string will just be it be

00:19:10,130 --> 00:19:15,889
kept there as low which is in a lot of

00:19:14,000 --> 00:19:17,059
cases what you do not want there are

00:19:15,889 --> 00:19:19,490
some casing which it is what you want i

00:19:17,059 --> 00:19:23,149
will show you one later but it's this

00:19:19,490 --> 00:19:24,710
but to form also concerns be considered

00:19:23,149 --> 00:19:27,350
convention to put even single letter

00:19:24,710 --> 00:19:30,049
variables inside parenthesis is for ease

00:19:27,350 --> 00:19:32,210
of reading it you don't have to but it's

00:19:30,049 --> 00:19:35,240
it can be gets very nice i usually don't

00:19:32,210 --> 00:19:37,159
do it also there's an option for all

00:19:35,240 --> 00:19:39,019
lazy assignment you can just make up you

00:19:37,159 --> 00:19:39,980
can assign a variable value and then the

00:19:39,019 --> 00:19:41,269
first time you actually use that

00:19:39,980 --> 00:19:44,120
variable there it will be given that

00:19:41,269 --> 00:19:45,950
value this is useful for things that if

00:19:44,120 --> 00:19:48,139
you want have a variable represent a

00:19:45,950 --> 00:19:52,039
particular value say an operation on a

00:19:48,139 --> 00:19:53,419
file it isn't ready yet you and the file

00:19:52,039 --> 00:19:54,679
is operating in a make file and you want

00:19:53,419 --> 00:19:55,230
you to access that variable at the end

00:19:54,679 --> 00:19:57,419
you don't

00:19:55,230 --> 00:20:00,080
just dump the command in a large print

00:19:57,419 --> 00:20:03,299
statement just say you say print

00:20:00,080 --> 00:20:07,590
whatever it will call that and sort of

00:20:03,299 --> 00:20:09,480
string it's is it kind of can be kind of

00:20:07,590 --> 00:20:12,630
tricky which is why most people will

00:20:09,480 --> 00:20:13,919
just stick to that if you don't if you

00:20:12,630 --> 00:20:16,320
don't need to use the late assignment

00:20:13,919 --> 00:20:25,650
you probably shouldn't be sometimes at

00:20:16,320 --> 00:20:27,840
least two funny things happening um you

00:20:25,650 --> 00:20:29,370
can actually use them for number use

00:20:27,840 --> 00:20:39,540
them for parameterize subroutines too

00:20:29,370 --> 00:20:41,370
I'll get to that later um Vincent as

00:20:39,540 --> 00:20:44,160
soon as the make file reads to get to

00:20:41,370 --> 00:20:45,600
that line in the file it will reads over

00:20:44,160 --> 00:20:48,840
the breeds over and finds all make

00:20:45,600 --> 00:20:53,160
related stuff first inside the that are

00:20:48,840 --> 00:20:56,880
inside targets yeah I don't know much

00:20:53,160 --> 00:20:58,380
about Pascal yeah it's kind of like it's

00:20:56,880 --> 00:21:00,690
kind of like make make runs a bunch of

00:20:58,380 --> 00:21:03,480
pre-processing it's a huge pretty much

00:21:00,690 --> 00:21:08,880
like you shall preprocessor with some

00:21:03,480 --> 00:21:10,559
built-in extra magic yeah magic so in

00:21:08,880 --> 00:21:12,929
this case we can make a lot of extra

00:21:10,559 --> 00:21:15,059
stuff generic and make poly can make you

00:21:12,929 --> 00:21:16,440
can give the program variable to put the

00:21:15,059 --> 00:21:18,299
source files on the list the object

00:21:16,440 --> 00:21:20,220
files in the list the compile with

00:21:18,299 --> 00:21:25,250
cflags in the list and the compiler

00:21:20,220 --> 00:21:25,250
analyst so what do we have

00:21:28,169 --> 00:21:41,340
cool you can see all of it much better

00:21:35,399 --> 00:21:43,440
right so I have taken the program name

00:21:41,340 --> 00:21:45,179
and give it put the bear below and sign

00:21:43,440 --> 00:21:48,179
into the program name put all the

00:21:45,179 --> 00:21:49,679
sources into a list it only they will

00:21:48,179 --> 00:21:51,779
attempt to read the variable until it

00:21:49,679 --> 00:21:54,059
gets to a non escape new line first ones

00:21:51,779 --> 00:21:55,919
right here this will be read in as a

00:21:54,059 --> 00:21:57,480
list it's this will be interpreted as a

00:21:55,919 --> 00:22:00,629
space within make single space with and

00:21:57,480 --> 00:22:02,220
make when you print it out doesn't make

00:22:00,629 --> 00:22:03,659
it may go just see usually sees a block

00:22:02,220 --> 00:22:05,489
of white space as a single space anyway

00:22:03,659 --> 00:22:08,489
using probably uses scanning for

00:22:05,489 --> 00:22:11,220
something and same deal with the lists

00:22:08,489 --> 00:22:13,859
of op shop up put object files then the

00:22:11,220 --> 00:22:16,830
compiler and the sea flags you can put

00:22:13,859 --> 00:22:18,600
variables anywhere you can have all

00:22:16,830 --> 00:22:21,059
depends on a ver all depends on the

00:22:18,600 --> 00:22:25,679
variable program hello this case program

00:22:21,059 --> 00:22:28,889
hello depends on the object files here

00:22:25,679 --> 00:22:31,499
you can you put them anywhere it's just

00:22:28,889 --> 00:22:33,779
why make is considered be very powerful

00:22:31,499 --> 00:22:37,200
but then again if you say accidentally

00:22:33,779 --> 00:22:39,869
put a colon in program name you know

00:22:37,200 --> 00:22:41,460
make will say actually up here it will

00:22:39,869 --> 00:22:45,029
say you have a rate in colon at the end

00:22:41,460 --> 00:22:46,409
of your line get rid of it you would

00:22:45,029 --> 00:22:48,869
need to escape that you need you would

00:22:46,409 --> 00:22:49,950
need to escape the cold same deal when

00:22:48,869 --> 00:22:51,809
here if you start including random

00:22:49,950 --> 00:22:53,549
random junk in these commands if you try

00:22:51,809 --> 00:22:55,619
to if you say evaluate a shell commands

00:22:53,549 --> 00:22:58,019
determines what the compiler is you're

00:22:55,619 --> 00:23:00,509
going to end of it and it fails that

00:22:58,019 --> 00:23:01,889
make will and improve say it returns

00:23:00,509 --> 00:23:03,840
nothing then you'll then it will just

00:23:01,889 --> 00:23:06,269
try to call they'll just be playing it

00:23:03,840 --> 00:23:09,690
will call to a show which is not a

00:23:06,269 --> 00:23:11,999
command and it will fail so it's just a

00:23:09,690 --> 00:23:13,950
matter of a lot of its figuring out is a

00:23:11,999 --> 00:23:18,179
person célèbres if I make is a bother to

00:23:13,950 --> 00:23:23,549
debug same deal with all the other fun

00:23:18,179 --> 00:23:25,649
targets but wait there's more so a lot

00:23:23,549 --> 00:23:28,379
of that stuff you saw in there is a P is

00:23:25,649 --> 00:23:31,289
repetitive you go on saying like I'm

00:23:28,379 --> 00:23:32,970
compiling hello to oh I'm calling hold

00:23:31,289 --> 00:23:35,369
at 0 depending on hold at sea I'm

00:23:32,970 --> 00:23:36,509
compiling hablo go from hello got see it

00:23:35,369 --> 00:23:39,359
just seems to be like I'm repeating

00:23:36,509 --> 00:23:42,160
myself I even have well yeah that's the

00:23:39,359 --> 00:23:45,160
idea it's simple it's a consider

00:23:42,160 --> 00:23:50,230
common paradigm in programming is that

00:23:45,160 --> 00:23:51,790
so here's the problem so these targets

00:23:50,230 --> 00:23:53,980
are pretty much the same thing or is

00:23:51,790 --> 00:23:55,480
operating on different files they're

00:23:53,980 --> 00:23:57,820
just saying all this being your done is

00:23:55,480 --> 00:23:59,890
placing pretty much placing hello with

00:23:57,820 --> 00:24:01,500
say hello and every single a statement

00:23:59,890 --> 00:24:04,890
actually I've never run that program

00:24:01,500 --> 00:24:04,890
let's run that program

00:24:12,809 --> 00:24:21,690
Go Go audience you're my hero so let's

00:24:19,679 --> 00:24:23,580
take up let's take a let's take a look

00:24:21,690 --> 00:24:26,610
at this problem one step at a time so

00:24:23,580 --> 00:24:29,789
let's say the hello to Owens hello duck

00:24:26,610 --> 00:24:32,580
hello and hello got see say hello to say

00:24:29,789 --> 00:24:35,610
hello at sea these are all right

00:24:32,580 --> 00:24:38,360
specified right here so why can't we get

00:24:35,610 --> 00:24:41,429
why can't we look at them all you can

00:24:38,360 --> 00:24:44,070
solution is to use or termed automatic

00:24:41,429 --> 00:24:45,960
variables this case is this case these

00:24:44,070 --> 00:24:49,080
these variables always point at variance

00:24:45,960 --> 00:24:51,360
of the target or their dependencies some

00:24:49,080 --> 00:24:52,889
sort of space separated list that can

00:24:51,360 --> 00:24:54,659
there can be substituted anywhere within

00:24:52,889 --> 00:24:58,429
a target they are not valid outside of a

00:24:54,659 --> 00:25:00,059
target they are they will be just empty

00:24:58,429 --> 00:25:02,100
alternatively you can use delayed

00:25:00,059 --> 00:25:04,049
assignment to delay assignment with

00:25:02,100 --> 00:25:06,059
these variables and it will evaluate and

00:25:04,049 --> 00:25:09,210
it will evaluate them when at the moment

00:25:06,059 --> 00:25:11,909
it reaches the target in this case this

00:25:09,210 --> 00:25:14,100
is the this is a photo this is this we

00:25:11,909 --> 00:25:19,799
translate a whole grad see this say

00:25:14,100 --> 00:25:26,179
hello to say hello dot C and I can show

00:25:19,799 --> 00:25:30,289
you that this does the exact same thing

00:25:26,179 --> 00:25:30,289
so same deal

00:25:36,500 --> 00:25:43,970
so this is the only relevant sections

00:25:39,530 --> 00:25:45,770
that are changed so the adult dollar

00:25:43,970 --> 00:25:47,270
sign carrots the first is the list of

00:25:45,770 --> 00:25:50,330
all the dependencies of the file and

00:25:47,270 --> 00:25:54,590
Allah is the name of the first pendency

00:25:50,330 --> 00:25:56,750
so it does the exact same thing prints

00:25:54,590 --> 00:26:00,740
out the exact same bunch of exact same

00:25:56,750 --> 00:26:03,730
text and produces the exact same program

00:26:00,740 --> 00:26:06,980
because it's the exact same program

00:26:03,730 --> 00:26:08,180
complain me blame me for that it's like

00:26:06,980 --> 00:26:09,290
ooh what's bit would make it more

00:26:08,180 --> 00:26:10,970
complicated let's have a whole but

00:26:09,290 --> 00:26:11,930
separate hello world the two files and

00:26:10,970 --> 00:26:13,640
have one to the make a command-line

00:26:11,930 --> 00:26:19,160
argument just says it as a function says

00:26:13,640 --> 00:26:21,650
print go me so yeah I just talked about

00:26:19,160 --> 00:26:23,420
I talked about this you make fun at

00:26:21,650 --> 00:26:25,520
variable czar not really that outside

00:26:23,420 --> 00:26:27,680
that make file targets you can you can

00:26:25,520 --> 00:26:28,970
set them using delate you can most often

00:26:27,680 --> 00:26:30,620
use them using dual set them up using

00:26:28,970 --> 00:26:33,350
delayed assignment and then get at them

00:26:30,620 --> 00:26:36,530
later within them within the big hall

00:26:33,350 --> 00:26:38,870
target statement so here's a bunch of

00:26:36,530 --> 00:26:42,170
them given a target called derp Thank

00:26:38,870 --> 00:26:45,050
You Vincent it depends on four different

00:26:42,170 --> 00:26:47,870
to other targets foo bar baz and foo it

00:26:45,050 --> 00:26:49,820
will go and here's just a bunch of

00:26:47,870 --> 00:26:51,230
example so the dollar sign a slip is the

00:26:49,820 --> 00:26:56,540
target name which will be resolved to

00:26:51,230 --> 00:26:59,030
derp the dollar sign a lesson sign will

00:26:56,540 --> 00:27:01,160
be set to the first dependency of the

00:26:59,030 --> 00:27:02,990
list sometimes you like a source file

00:27:01,160 --> 00:27:05,420
you can have all the other you know

00:27:02,990 --> 00:27:08,270
other steps of the other files be

00:27:05,420 --> 00:27:10,850
document said written down as say other

00:27:08,270 --> 00:27:12,740
targets that need to be prepared before

00:27:10,850 --> 00:27:15,230
the compilers run for example I might be

00:27:12,740 --> 00:27:17,600
used for that dollar sign dollar sign

00:27:15,230 --> 00:27:19,760
carrot is a just a list of all

00:27:17,600 --> 00:27:21,740
dependencies the McCall has about two

00:27:19,760 --> 00:27:24,620
pockets and then dollar sign plus says

00:27:21,740 --> 00:27:26,930
keeps them all has all the dependencies

00:27:24,620 --> 00:27:28,550
there with or preserve this is the make

00:27:26,930 --> 00:27:30,310
manual says that would be useful if you

00:27:28,550 --> 00:27:32,390
were dealing with shared libraries I

00:27:30,310 --> 00:27:34,030
haven't really made any shared libraries

00:27:32,390 --> 00:27:37,400
with Nick files and mostly done

00:27:34,030 --> 00:27:40,580
executables so I will take their word

00:27:37,400 --> 00:27:42,770
for it on that so now we get to the

00:27:40,580 --> 00:27:44,480
other problem so you see that pretty

00:27:42,770 --> 00:27:47,060
much o Dabo files are made from dot C

00:27:44,480 --> 00:27:48,920
files right and these are pretty this is

00:27:47,060 --> 00:27:49,700
this this is the charge of the same

00:27:48,920 --> 00:27:51,350
thing

00:27:49,700 --> 00:27:54,080
so come on I can't wait just recycle

00:27:51,350 --> 00:27:57,350
those well here's another way you

00:27:54,080 --> 00:28:01,460
pattern matching so instead of so we

00:27:57,350 --> 00:28:04,039
make gives an option to use a % in a

00:28:01,460 --> 00:28:07,100
targeting to represent a pattern match

00:28:04,039 --> 00:28:10,250
you can go and this case you will try to

00:28:07,100 --> 00:28:11,870
match anything that ends in dot 0 and

00:28:10,250 --> 00:28:14,149
see you if there's a dot C file that

00:28:11,870 --> 00:28:16,850
associates with it and then it will

00:28:14,149 --> 00:28:19,870
generate internally a rule assess for

00:28:16,850 --> 00:28:21,769
example hello depends on hope dot C and

00:28:19,870 --> 00:28:23,630
you can do this you can put the

00:28:21,769 --> 00:28:25,190
Princeton sign anywhere in the string

00:28:23,630 --> 00:28:26,059
you just cannot have more than one of

00:28:25,190 --> 00:28:27,740
them otherwise it will lead to a

00:28:26,059 --> 00:28:31,360
combinatorial explosion and make well um

00:28:27,740 --> 00:28:36,409
not even bother to compile it for you

00:28:31,360 --> 00:28:40,070
there are there are many many many uses

00:28:36,409 --> 00:28:41,659
these you can make arbitrary compile

00:28:40,070 --> 00:28:44,240
statements with these and then don't

00:28:41,659 --> 00:28:45,470
have to worry about right but worried

00:28:44,240 --> 00:28:46,690
about writing specific kampala

00:28:45,470 --> 00:28:49,760
statements for each one of your files

00:28:46,690 --> 00:28:52,039
there's a you can also customize the

00:28:49,760 --> 00:28:56,029
composite say adding variables within

00:28:52,039 --> 00:28:59,510
the make file target they fall target

00:28:56,029 --> 00:29:02,149
statement the rules to make it I will

00:28:59,510 --> 00:29:04,220
discuss that in a moment but there's

00:29:02,149 --> 00:29:08,179
another solution to this problem that

00:29:04,220 --> 00:29:15,940
you do first I'll show you what it looks

00:29:08,179 --> 00:29:15,940
like hmm that is the question

00:29:22,300 --> 00:29:25,110
I didn't open

00:29:26,830 --> 00:29:33,349
okay so you're probably wondering why I

00:29:30,859 --> 00:29:35,960
commented that out I'll explain that

00:29:33,349 --> 00:29:45,340
I'll explain it curly but this once

00:29:35,960 --> 00:29:56,479
again so again it does the exact same

00:29:45,340 --> 00:29:58,549
thing does the exact same stuff so as

00:29:56,479 --> 00:29:59,779
you probably just guessed the next thing

00:29:58,549 --> 00:30:00,919
i want to do we show you in hopes of

00:29:59,779 --> 00:30:03,559
what happens if you get rid of that

00:30:00,919 --> 00:30:04,580
statement well turns out you can solve

00:30:03,559 --> 00:30:08,799
this problem which it's not even

00:30:04,580 --> 00:30:13,700
including a compile statement at all so

00:30:08,799 --> 00:30:19,869
let's see that you know why you fail me

00:30:13,700 --> 00:30:19,869
you max curse you

00:30:20,179 --> 00:30:33,399
yes yes I am huh yes and that is why he

00:30:28,100 --> 00:30:40,490
max is awesome I can do that long yep

00:30:33,399 --> 00:30:42,710
yes it is so BAM they just knew I was

00:30:40,490 --> 00:30:45,049
compiling see files you might ask

00:30:42,710 --> 00:30:48,200
yourself self how did it make no I was

00:30:45,049 --> 00:30:52,850
compiling see files that's because make

00:30:48,200 --> 00:30:54,679
has implicit rules yeah that uh already

00:30:52,850 --> 00:30:56,929
know how to handle certain common

00:30:54,679 --> 00:30:59,809
compilation tasks like say it knows how

00:30:56,929 --> 00:31:01,879
to compile see no apollon see files

00:30:59,809 --> 00:31:03,350
those how is it compiled from C++ files

00:31:01,879 --> 00:31:05,299
and it was compiled from for files

00:31:03,350 --> 00:31:07,840
pretty much owns the compile stuff from

00:31:05,299 --> 00:31:10,309
GC anything our GCC knows how to do

00:31:07,840 --> 00:31:12,950
there's a lot of the making annual has a

00:31:10,309 --> 00:31:14,149
full list of them but if the advantage

00:31:12,950 --> 00:31:16,369
is you can make something simple really

00:31:14,149 --> 00:31:21,519
quickly should you want to but if you

00:31:16,369 --> 00:31:21,519
wanted to say customize it and say

00:31:28,890 --> 00:31:32,190
why do something like that you would

00:31:30,810 --> 00:31:34,520
have to use up some a statement like

00:31:32,190 --> 00:31:34,520
this

00:31:43,220 --> 00:31:50,940
in the same directory I'm oh so what

00:31:48,540 --> 00:31:52,860
happens we so just asked what happens if

00:31:50,940 --> 00:31:56,160
you have the if the patterns come up

00:31:52,860 --> 00:31:59,330
with two choices I honestly don't know

00:31:56,160 --> 00:32:02,550
I've never tried it it's probably

00:31:59,330 --> 00:32:04,560
probably documented I'm really sorry I

00:32:02,550 --> 00:32:08,870
had to say a look at the manual but the

00:32:04,560 --> 00:32:08,870
manual is truly the best resource on me

00:32:15,050 --> 00:32:21,810
yeah now or what needs to be updated

00:32:19,340 --> 00:32:24,030
perhaps I haven't I haven't tried doing

00:32:21,810 --> 00:32:27,900
that I wouldn't recommend trying to do

00:32:24,030 --> 00:32:30,510
that you could you could also you could

00:32:27,900 --> 00:32:33,120
also explicitly say that the explicitly

00:32:30,510 --> 00:32:34,470
say what file you want in addition to

00:32:33,120 --> 00:32:37,530
having the implicit pattern you can say

00:32:34,470 --> 00:32:40,950
hello to pens in a whole f instead of C

00:32:37,530 --> 00:32:44,250
or for some reason so where I was just

00:32:40,950 --> 00:32:45,570
add so this case it's going to assist

00:32:44,250 --> 00:32:47,640
say you can print out a little message

00:32:45,570 --> 00:32:49,530
to if you're compiling this is they

00:32:47,640 --> 00:32:51,990
redefine they make a new rule for

00:32:49,530 --> 00:32:54,390
example the colonel has some as a rule

00:32:51,990 --> 00:32:56,130
that prints out make role of forks comp

00:32:54,390 --> 00:33:01,080
compiling see files it prints out just

00:32:56,130 --> 00:33:02,940
CC filename that's it's done entirely by

00:33:01,080 --> 00:33:06,210
may having a custom compiling custom

00:33:02,940 --> 00:33:09,420
rule to compile it least according to

00:33:06,210 --> 00:33:11,880
the source and I read so and so if you

00:33:09,420 --> 00:33:16,050
need to custom so in the case of having

00:33:11,880 --> 00:33:18,150
lots of implicitly this if you need to

00:33:16,050 --> 00:33:20,400
go say customize your compiler your

00:33:18,150 --> 00:33:24,540
cflags depending on what targa are

00:33:20,400 --> 00:33:27,810
looking at you can set no you can set

00:33:24,540 --> 00:33:28,980
the variable to the you set you can do

00:33:27,810 --> 00:33:31,620
something like this so you can have the

00:33:28,980 --> 00:33:33,660
file there's a coal in there you can't

00:33:31,620 --> 00:33:36,480
really see it where the file depends on

00:33:33,660 --> 00:33:38,640
variables value this will just be kept

00:33:36,480 --> 00:33:40,230
in this in this case it was being that

00:33:38,640 --> 00:33:42,300
the variable cflags will equal 0 to

00:33:40,230 --> 00:33:44,790
within that particular thin that

00:33:42,300 --> 00:33:46,110
statement or you can set it to nothing

00:33:44,790 --> 00:33:47,970
because I've seen some writing a file

00:33:46,110 --> 00:33:50,220
that had to disable a lot of

00:33:47,970 --> 00:33:52,799
optimization when a compiled a person

00:33:50,220 --> 00:33:56,730
reason not just an example I came to

00:33:52,799 --> 00:33:58,260
mind so another thing you probably just

00:33:56,730 --> 00:33:59,880
notice is the another thing in the pile

00:33:58,260 --> 00:34:01,200
is that there that this is these are

00:33:59,880 --> 00:34:05,400
also pretty much to placate Saul you're

00:34:01,200 --> 00:34:07,650
doing here is changing dot C dot oh and

00:34:05,400 --> 00:34:09,330
you think yourself itself there's

00:34:07,650 --> 00:34:11,159
probably way to do that and indeed there

00:34:09,330 --> 00:34:12,389
is but i have to go explains another

00:34:11,159 --> 00:34:17,040
have to go into completely different

00:34:12,389 --> 00:34:19,940
topic which is i am talking I my slides

00:34:17,040 --> 00:34:23,429
particular i'm going to say that's scary

00:34:19,940 --> 00:34:24,990
to either to go with them functions deal

00:34:23,429 --> 00:34:27,659
with what what make has its own a little

00:34:24,990 --> 00:34:30,690
text processing function set that you

00:34:27,659 --> 00:34:33,389
can use that they're pretty powerful and

00:34:30,690 --> 00:34:35,280
some and a lot of cases very useful so

00:34:33,389 --> 00:34:37,230
here's how you call them so you have so

00:34:35,280 --> 00:34:39,899
it's kind of like a variable except you

00:34:37,230 --> 00:34:41,399
put the name of the function before and

00:34:39,899 --> 00:34:45,330
then just have a comma separated list of

00:34:41,399 --> 00:34:47,220
arguments in some kit and like

00:34:45,330 --> 00:34:49,889
everything else you can have you have to

00:34:47,220 --> 00:34:51,720
have the you i would not recommend

00:34:49,889 --> 00:34:53,760
putting spaces between the commas

00:34:51,720 --> 00:34:55,889
because make may read them into the

00:34:53,760 --> 00:34:58,349
variables and if you're doing something

00:34:55,889 --> 00:35:01,980
quoted with them in shell commands it

00:34:58,349 --> 00:35:03,900
may not be happy with them later nope

00:35:01,980 --> 00:35:06,810
there's a person to function someone's

00:35:03,900 --> 00:35:08,730
do with file names your one base name

00:35:06,810 --> 00:35:11,040
will strip off the file and it will

00:35:08,730 --> 00:35:15,030
strip up the extension from a file list

00:35:11,040 --> 00:35:16,589
of files e dot whatever and the ad

00:35:15,030 --> 00:35:18,960
suffix a ladder particular suffix to the

00:35:16,589 --> 00:35:20,609
end of the file give to a list of files

00:35:18,960 --> 00:35:22,890
if this isn't actually a defect any

00:35:20,609 --> 00:35:25,740
files just strings is stored internally

00:35:22,890 --> 00:35:26,910
within make and same prefix is the same

00:35:25,740 --> 00:35:28,859
thing is that stuff except the house

00:35:26,910 --> 00:35:31,020
prefixes there are a lot more of these

00:35:28,859 --> 00:35:34,140
describing the manual these are the ones

00:35:31,020 --> 00:35:35,910
i've seen most commonly used and in base

00:35:34,140 --> 00:35:37,680
name and add suffix we have the solution

00:35:35,910 --> 00:35:42,570
to the previous trusted that previous

00:35:37,680 --> 00:35:44,380
problem you can see you can at shame on

00:35:42,570 --> 00:35:48,470
me

00:35:44,380 --> 00:35:49,640
so that's supposed to be suffix you just

00:35:48,470 --> 00:35:51,710
have you have the list of sources and

00:35:49,640 --> 00:35:55,940
then you can go opt-in you can go say at

00:35:51,710 --> 00:35:59,780
suffix zero to the to the list of the

00:35:55,940 --> 00:36:02,720
base names of the source files this is a

00:35:59,780 --> 00:36:08,180
paradigm i have seen used often in make

00:36:02,720 --> 00:36:09,920
files it's simple nice and compact it's

00:36:08,180 --> 00:36:11,480
also a command called shell which

00:36:09,920 --> 00:36:13,520
returns a littles all of a shell command

00:36:11,480 --> 00:36:17,030
and stores it into a variable you can

00:36:13,520 --> 00:36:21,320
for example get the value of the system

00:36:17,030 --> 00:36:23,510
type the unity of linux or Darwin or bsd

00:36:21,320 --> 00:36:25,280
or whatever is you're using and store it

00:36:23,510 --> 00:36:27,020
immediately sometimes you can evaluate

00:36:25,280 --> 00:36:29,030
them when needed you can have if you can

00:36:27,020 --> 00:36:32,450
get you can say the compression ratio

00:36:29,030 --> 00:36:35,120
from a compressed file at the end so you

00:36:32,450 --> 00:36:38,210
can go and say I want this variable T

00:36:35,120 --> 00:36:39,830
equal shell gzip a little blah blah blah

00:36:38,210 --> 00:36:42,320
and then you get all the way to this

00:36:39,830 --> 00:36:43,910
little statement at the end here this is

00:36:42,320 --> 00:36:45,560
different because make file does not

00:36:43,910 --> 00:36:46,850
consider does not think make this not

00:36:45,560 --> 00:36:48,170
think about quoting things it doesn't

00:36:46,850 --> 00:36:50,330
really care this is all passed to the

00:36:48,170 --> 00:36:51,890
shell and me directly so if you don't

00:36:50,330 --> 00:36:54,530
put two dollar signs here make will

00:36:51,890 --> 00:36:56,840
think that it's a variable called three

00:36:54,530 --> 00:36:58,700
and which is census it's probably going

00:36:56,840 --> 00:37:01,070
to be nothing it's going to be

00:36:58,700 --> 00:37:03,290
considered it's going to be returned

00:37:01,070 --> 00:37:07,250
blanket and aqua whining you when it

00:37:03,290 --> 00:37:09,880
runs in addition you could also do this

00:37:07,250 --> 00:37:13,360
with back anyway this with tactics

00:37:09,880 --> 00:37:15,890
there's also the all-powerful for each

00:37:13,360 --> 00:37:18,950
for each element for each element in a

00:37:15,890 --> 00:37:20,810
list output the value of text with

00:37:18,950 --> 00:37:23,660
variable set to the curt to the current

00:37:20,810 --> 00:37:25,730
element in the list this is in a way how

00:37:23,660 --> 00:37:27,710
you can redefine every single one of

00:37:25,730 --> 00:37:32,780
almost the polity in functions using for

00:37:27,710 --> 00:37:40,700
each example you can I did it here too

00:37:32,780 --> 00:37:42,560
ah go me so add prefix food ash food ash

00:37:40,700 --> 00:37:47,060
to the list is the same thing as for

00:37:42,560 --> 00:37:49,220
each app enlist do food a chef and your

00:37:47,060 --> 00:37:50,720
pal and it will I believe in search

00:37:49,220 --> 00:37:53,330
space on the end of space on the

00:37:50,720 --> 00:37:56,150
internet for each one you can always do

00:37:53,330 --> 00:37:56,790
one yourself i'm not entirely sure on

00:37:56,150 --> 00:37:58,350
that

00:37:56,790 --> 00:38:05,220
at the top of my head but it's pretty

00:37:58,350 --> 00:38:06,660
easy to find out so there's also make as

00:38:05,220 --> 00:38:09,090
also options as poor conditionals you

00:38:06,660 --> 00:38:14,700
can do in equality testing or inequality

00:38:09,090 --> 00:38:16,140
testing you can you can support what you

00:38:14,700 --> 00:38:17,700
can also detect whether a variable is or

00:38:16,140 --> 00:38:20,910
is not defined and I will show you a

00:38:17,700 --> 00:38:22,770
good example of that shortly there's

00:38:20,910 --> 00:38:24,300
also control functions you can have make

00:38:22,770 --> 00:38:26,550
print out my other messages within make

00:38:24,300 --> 00:38:28,860
as opposed to having target and target

00:38:26,550 --> 00:38:30,510
rules say you have an invalid condition

00:38:28,860 --> 00:38:34,860
or you haven't run your configure script

00:38:30,510 --> 00:38:36,330
yet so error will print out message to

00:38:34,860 --> 00:38:39,390
the terminal and then immediately crash

00:38:36,330 --> 00:38:41,070
make or not crash stop make I'd also

00:38:39,390 --> 00:38:43,170
give you a line where it happened and

00:38:41,070 --> 00:38:44,280
the message is not needy quoted like

00:38:43,170 --> 00:38:47,520
everything else and make it just reads

00:38:44,280 --> 00:38:49,050
to the end of the parentheses Warren is

00:38:47,520 --> 00:38:52,560
not fatal it just goes and prints out

00:38:49,050 --> 00:38:55,520
says we fail said prince allies prints

00:38:52,560 --> 00:38:58,980
line wherever the line is message and

00:38:55,520 --> 00:39:01,020
info just print out the message it's

00:38:58,980 --> 00:39:04,740
useful for saying variable who you have

00:39:01,020 --> 00:39:05,670
set variable to value example also if

00:39:04,740 --> 00:39:08,490
you want to you can make your own

00:39:05,670 --> 00:39:09,960
functions as let's discuss earlier you

00:39:08,490 --> 00:39:11,700
can have but you need to use delayed

00:39:09,960 --> 00:39:13,500
assignment here otherwise it will try to

00:39:11,700 --> 00:39:15,240
if you have to leave if you do not use

00:39:13,500 --> 00:39:19,950
the late assignment will resolve one and

00:39:15,240 --> 00:39:22,380
two to nothing which will not do what

00:39:19,950 --> 00:39:24,240
you want so in this case you use them

00:39:22,380 --> 00:39:27,510
you have to use the all-powerful call

00:39:24,240 --> 00:39:29,490
function call function name list of

00:39:27,510 --> 00:39:32,790
arguments the Worcester area which will

00:39:29,490 --> 00:39:35,280
be in view by the function as dollar one

00:39:32,790 --> 00:39:38,550
dollar to dollar three dollar for etc

00:39:35,280 --> 00:39:41,040
until it runs out of until it runs out

00:39:38,550 --> 00:39:44,340
of our sign up sometime I think make is

00:39:41,040 --> 00:39:46,500
becomes unhappy when you don't give it

00:39:44,340 --> 00:39:51,150
too many arguments or too few arguments

00:39:46,500 --> 00:39:52,950
I haven't tried it but it's once again

00:39:51,150 --> 00:39:54,360
it's pretty easy to yourself and so this

00:39:52,950 --> 00:39:56,010
what this will do it will print out to

00:39:54,360 --> 00:40:00,240
the terminal when it reaches is it will

00:39:56,010 --> 00:40:02,720
print out foo since bar so now we have

00:40:00,240 --> 00:40:02,720
gotten through

00:40:03,369 --> 00:40:09,020
now that we've gotten through the basics

00:40:07,310 --> 00:40:11,540
of make the unfortunately result waters

00:40:09,020 --> 00:40:13,369
a make is a very complicated tool

00:40:11,540 --> 00:40:14,810
there's a lot of stuff that I'm not

00:40:13,369 --> 00:40:18,079
gonna be able to go over I'm gonna show

00:40:14,810 --> 00:40:21,130
you a rather abruptly a complicated use

00:40:18,079 --> 00:40:25,550
of make that is there's actually

00:40:21,130 --> 00:40:27,200
commonly used so but we are not the core

00:40:25,550 --> 00:40:29,720
of them of a debian package system is a

00:40:27,200 --> 00:40:31,579
makefile the rules fall within the

00:40:29,720 --> 00:40:33,440
Debian directory is in fact a make file

00:40:31,579 --> 00:40:39,819
usually has she being money is saying

00:40:33,440 --> 00:40:42,170
user bin make dash up and this sue em

00:40:39,819 --> 00:40:43,750
uses make it goes to the set of rules

00:40:42,170 --> 00:40:45,650
for going and building packages

00:40:43,750 --> 00:40:47,420
compiling them installing them to

00:40:45,650 --> 00:40:49,270
particular directories cleaning them

00:40:47,420 --> 00:40:52,579
patching them on patching them all

00:40:49,270 --> 00:40:54,520
operations that are all operations to

00:40:52,579 --> 00:40:58,250
handle by programs call from a make file

00:40:54,520 --> 00:41:01,359
and I thought to myself self let's do

00:40:58,250 --> 00:41:05,630
that with a slacker package so I did

00:41:01,359 --> 00:41:09,290
there are so a brief brief aside again

00:41:05,630 --> 00:41:12,290
the sucker package is simply a tarball

00:41:09,290 --> 00:41:14,480
with it with a route the route that

00:41:12,290 --> 00:41:16,609
contains a bunch of directories that

00:41:14,480 --> 00:41:18,410
will be as hold the system and the

00:41:16,609 --> 00:41:20,630
directory / install is reserved by the

00:41:18,410 --> 00:41:21,980
package manager to force package

00:41:20,630 --> 00:41:24,109
descriptions and install scripts and

00:41:21,980 --> 00:41:27,829
other various things the package manager

00:41:24,109 --> 00:41:29,859
there aren't very many of them here it

00:41:27,829 --> 00:41:29,859
is

00:41:39,240 --> 00:41:44,460
obligatory copyright statement there's a

00:41:42,480 --> 00:41:46,890
bunch of variables being set these all

00:41:44,460 --> 00:41:48,960
be noted in the big follow you i'll be

00:41:46,890 --> 00:41:53,490
using them when i call and make fall

00:41:48,960 --> 00:41:57,000
targets and rules later the current

00:41:53,490 --> 00:41:59,490
directory is set to the shell of shell

00:41:57,000 --> 00:42:01,020
PWD the current directory perverted

00:41:59,490 --> 00:42:12,450
directory sometimes considered be called

00:42:01,020 --> 00:42:16,500
top okay so I didn't go over this but

00:42:12,450 --> 00:42:18,540
there is what this dollar sign this ?

00:42:16,500 --> 00:42:20,100
equals does it detects whether the

00:42:18,540 --> 00:42:22,260
variable has been defined if the

00:42:20,100 --> 00:42:24,869
variable has not been defined I will

00:42:22,260 --> 00:42:26,130
assign it this value this case the

00:42:24,869 --> 00:42:28,110
there's a command that determines the

00:42:26,130 --> 00:42:29,190
architects the slackware package

00:42:28,110 --> 00:42:31,830
architecture for that system

00:42:29,190 --> 00:42:34,830
alternatively I could have just used if

00:42:31,830 --> 00:42:38,160
in def arch Archie Clark colon equals

00:42:34,830 --> 00:42:44,190
that value and then end if that is the

00:42:38,160 --> 00:42:45,630
but is the test forum test for

00:42:44,190 --> 00:42:49,770
conditionals in that case just forward

00:42:45,630 --> 00:42:52,859
variable definitions here I got a bunch

00:42:49,770 --> 00:42:57,180
of this is business block a humongous

00:42:52,859 --> 00:42:59,880
block of if if then else so if there are

00:42:57,180 --> 00:43:01,250
four ways to write if statements you can

00:42:59,880 --> 00:43:05,460
woke up will come up in to make manual

00:43:01,250 --> 00:43:08,580
there I chose this one because I looks

00:43:05,460 --> 00:43:11,670
more like see so if the value of arch

00:43:08,580 --> 00:43:15,869
equals I 46 you can have the space here

00:43:11,670 --> 00:43:17,850
I don't know why it'll send the variable

00:43:15,869 --> 00:43:19,320
sexy flags with this string i quoted

00:43:17,850 --> 00:43:21,690
here because it's going to be used by

00:43:19,320 --> 00:43:23,369
the shell later I didn't have to i could

00:43:21,690 --> 00:43:25,920
just quote the variable when I encounter

00:43:23,369 --> 00:43:30,330
it in the program rather I encounter in

00:43:25,920 --> 00:43:34,050
the mix in the make rule and same and

00:43:30,330 --> 00:43:35,310
then else condition if it's say if

00:43:34,050 --> 00:43:38,340
you're running on a mainframe for some

00:43:35,310 --> 00:43:40,859
reason that it will set to dash 0 2 or

00:43:38,340 --> 00:43:45,270
64-bit machine or if they can't find

00:43:40,859 --> 00:43:48,640
anything else to say else then they said

00:43:45,270 --> 00:43:52,220
to just generic optimization

00:43:48,640 --> 00:43:54,380
set some more variables the first target

00:43:52,220 --> 00:43:57,950
in the file is of course the almighty

00:43:54,380 --> 00:43:59,840
all all depends on the package build one

00:43:57,950 --> 00:44:02,390
just whether the package build succeed

00:43:59,840 --> 00:44:04,670
or not if it's just in the package is

00:44:02,390 --> 00:44:07,940
called temp packaging immersion Arch

00:44:04,670 --> 00:44:10,790
built exe all stock can your phone where

00:44:07,940 --> 00:44:12,710
packages RT some letter Z extension on

00:44:10,790 --> 00:44:15,950
the end of it because that's what pat

00:44:12,710 --> 00:44:18,980
walker ding liked and you might be

00:44:15,950 --> 00:44:21,230
wondering what is this at thing doing at

00:44:18,980 --> 00:44:22,970
the beginning of line what this will do

00:44:21,230 --> 00:44:25,520
is that this suppresses the printing of

00:44:22,970 --> 00:44:28,190
the command to the terminal this case it

00:44:25,520 --> 00:44:29,330
will say echo it worked twice it don't

00:44:28,190 --> 00:44:31,760
want to see that twice the console it's

00:44:29,330 --> 00:44:33,710
kind of redundant right you can also use

00:44:31,760 --> 00:44:37,850
it to silence the compiler community you

00:44:33,710 --> 00:44:39,290
just want to say CC for example here

00:44:37,850 --> 00:44:44,420
instead of a bunch of package install

00:44:39,290 --> 00:44:47,600
directories I just go in as really

00:44:44,420 --> 00:44:49,430
annoying then we go extract them let me

00:44:47,600 --> 00:44:52,400
go extract the package to the temporary

00:44:49,430 --> 00:44:55,490
route as you can set variables of

00:44:52,400 --> 00:44:58,430
anywhere within the file outside of tar

00:44:55,490 --> 00:45:02,260
outside of rules here where you go and

00:44:58,430 --> 00:45:05,540
check permission check file permissions

00:45:02,260 --> 00:45:08,330
now here's where the fun begins here's

00:45:05,540 --> 00:45:10,130
where we go and build it's just pretty

00:45:08,330 --> 00:45:15,890
much a cell script with everything split

00:45:10,130 --> 00:45:17,330
into tiny until two concise steps or in

00:45:15,890 --> 00:45:18,920
some cases not some person cannot so

00:45:17,330 --> 00:45:22,490
concise who's this one is rather long

00:45:18,920 --> 00:45:24,590
you know it's only one command one thing

00:45:22,490 --> 00:45:26,150
to note is that if you need to do an

00:45:24,590 --> 00:45:29,080
operation in another directory you

00:45:26,150 --> 00:45:31,790
cannot do a global change directory

00:45:29,080 --> 00:45:33,950
period each one each line is considered

00:45:31,790 --> 00:45:37,010
an independent shell command able like

00:45:33,950 --> 00:45:39,380
run say run system on each line by

00:45:37,010 --> 00:45:41,240
itself so if you need to go change to

00:45:39,380 --> 00:45:43,820
another change of never directory to run

00:45:41,240 --> 00:45:46,310
a command you do that first so you just

00:45:43,820 --> 00:45:49,000
do it do the standard shell and and to

00:45:46,310 --> 00:45:52,460
say if it succeeded it succeeded then

00:45:49,000 --> 00:45:55,040
succeeded then run command and if make

00:45:52,460 --> 00:45:56,930
and if and something fails in the make

00:45:55,040 --> 00:45:59,480
file for example it returns a nonzero

00:45:56,930 --> 00:46:00,270
rexha code it will make will just give

00:45:59,480 --> 00:46:02,130
up immediately

00:46:00,270 --> 00:46:04,650
unless you tell it not to you can read

00:46:02,130 --> 00:46:09,180
the nail and figure out do that here's

00:46:04,650 --> 00:46:12,540
week your jewelry call make to build and

00:46:09,180 --> 00:46:14,280
install the package I'm you recursive

00:46:12,540 --> 00:46:16,350
make is consider yourself is a rather

00:46:14,280 --> 00:46:17,490
common use of make you can some make off

00:46:16,350 --> 00:46:18,960
and calls itself when dealing with

00:46:17,490 --> 00:46:21,840
different source directories within the

00:46:18,960 --> 00:46:23,430
hierarchy it is how the new auto tools

00:46:21,840 --> 00:46:25,320
does it just have one make file /

00:46:23,430 --> 00:46:27,060
directory then it goes and generates all

00:46:25,320 --> 00:46:30,480
the templates and it goes it descends

00:46:27,060 --> 00:46:32,910
into each directory and it does make in

00:46:30,480 --> 00:46:35,250
there in some cases this is dessert this

00:46:32,910 --> 00:46:36,930
is simple buttons it has some

00:46:35,250 --> 00:46:38,400
performance issues when you have when

00:46:36,930 --> 00:46:41,340
you're doing it lots and lots of times

00:46:38,400 --> 00:46:42,990
it can bog down the system bog down make

00:46:41,340 --> 00:46:45,390
a little bit there have been performance

00:46:42,990 --> 00:46:47,370
comparisons between see make which uses

00:46:45,390 --> 00:46:49,560
non recursive January make files versus

00:46:47,370 --> 00:46:52,500
make which does which is auto make which

00:46:49,560 --> 00:46:55,530
does and see tool see make was consider

00:46:52,500 --> 00:46:58,100
to be significantly faster well maybe

00:46:55,530 --> 00:47:03,630
not significantly but noticeably and

00:46:58,100 --> 00:47:05,250
here we just have here we have a generic

00:47:03,630 --> 00:47:06,810
post an assault step in this case I have

00:47:05,250 --> 00:47:10,110
just elected to make the post install

00:47:06,810 --> 00:47:14,820
step depend on three steps that do not

00:47:10,110 --> 00:47:17,250
have an associated a file i just i call

00:47:14,820 --> 00:47:18,510
them TS because they have on time stamps

00:47:17,250 --> 00:47:20,220
it was done at this point you can go

00:47:18,510 --> 00:47:22,590
check the file update time to figure

00:47:20,220 --> 00:47:24,540
that out or i could just output the

00:47:22,590 --> 00:47:26,970
output of the command date to the file

00:47:24,540 --> 00:47:29,280
and then have a easier to reversion of

00:47:26,970 --> 00:47:30,720
it this case if post install depends on

00:47:29,280 --> 00:47:33,810
whether the install is completed and

00:47:30,720 --> 00:47:36,390
three operations that i have chosen to

00:47:33,810 --> 00:47:43,440
do strip binaries some compressed man

00:47:36,390 --> 00:47:45,770
pages and install documentation so here

00:47:43,440 --> 00:47:45,770
they are

00:47:53,200 --> 00:47:59,590
so this is pretty is just a strip

00:47:57,820 --> 00:48:01,810
commanders I stole from the slack let's

00:47:59,590 --> 00:48:05,260
lie per package conscripted just to find

00:48:01,810 --> 00:48:07,120
just a glorified find and man pages goes

00:48:05,260 --> 00:48:09,130
and does another because they called a

00:48:07,120 --> 00:48:11,440
shelf for loop no cell I've got the

00:48:09,130 --> 00:48:15,370
backslashes on the end of the lines to

00:48:11,440 --> 00:48:19,300
indicate some same wine and then Jame

00:48:15,370 --> 00:48:27,850
deal down there behind and more writing

00:48:19,300 --> 00:48:32,890
files and bam we're done damn this and

00:48:27,850 --> 00:48:35,220
then we call make package so let's test

00:48:32,890 --> 00:48:35,220
this out

00:48:46,040 --> 00:48:53,420
I didn't clean the last time I did it

00:48:48,640 --> 00:48:54,740
this is a or rather dis commute so the

00:48:53,420 --> 00:48:56,240
reason why I did it like this is that

00:48:54,740 --> 00:48:57,860
the way stock or package bill scripts

00:48:56,240 --> 00:48:59,510
often do is that it goes from beginning

00:48:57,860 --> 00:49:01,910
to the end and then if it breaks say in

00:48:59,510 --> 00:49:03,320
the build step towards the end you have

00:49:01,910 --> 00:49:04,550
to go it goes and wipes out everything

00:49:03,320 --> 00:49:06,370
at the beginning and add to start all

00:49:04,550 --> 00:49:10,300
over again from scratch this case I have

00:49:06,370 --> 00:49:13,520
elected to make it possible to go and

00:49:10,300 --> 00:49:15,650
just if it breaks if it breaks in the

00:49:13,520 --> 00:49:18,140
middle of it it will go and you can go

00:49:15,650 --> 00:49:20,570
and restart it from where it was last at

00:49:18,140 --> 00:49:22,820
you can update the step afterward and it

00:49:20,570 --> 00:49:23,840
will sometime it will fix it sometimes

00:49:22,820 --> 00:49:25,610
it won't work sometimes you have to

00:49:23,840 --> 00:49:26,930
clean it up and do it all over again but

00:49:25,610 --> 00:49:30,290
you will have to re extract them the

00:49:26,930 --> 00:49:37,160
attract all stop this is pretty much

00:49:30,290 --> 00:49:40,730
over BAM done so one thing you can't

00:49:37,160 --> 00:49:43,280
really see here I'll bring I'll bring

00:49:40,730 --> 00:49:47,090
the line up here this isn't in the clean

00:49:43,280 --> 00:49:48,860
target so this is just the command that

00:49:47,090 --> 00:49:50,450
goes and say if the foie if we have

00:49:48,860 --> 00:49:53,120
actually made the program before call

00:49:50,450 --> 00:49:55,480
make this clean just clean up all the

00:49:53,120 --> 00:49:58,040
other all the package build stuff and

00:49:55,480 --> 00:50:00,350
this dash at the beginning of the line

00:49:58,040 --> 00:50:02,090
here is no you may not be able to see

00:50:00,350 --> 00:50:04,850
indicates that if the command fails

00:50:02,090 --> 00:50:06,920
continue anyway it's direct enforcement

00:50:04,850 --> 00:50:09,710
that in this case if the if configure

00:50:06,920 --> 00:50:12,500
80s does not exist it will return

00:50:09,710 --> 00:50:14,900
command it will return a bad error code

00:50:12,500 --> 00:50:22,640
indicating a failure and we do not want

00:50:14,900 --> 00:50:24,440
that in this case so done with that so

00:50:22,640 --> 00:50:25,820
you can't see it the header is useful

00:50:24,440 --> 00:50:29,140
information just some things that I

00:50:25,820 --> 00:50:32,780
found useful from using make a lot so

00:50:29,140 --> 00:50:34,700
when writing make files you mace I have

00:50:32,780 --> 00:50:40,510
a because it make the file that i have

00:50:34,700 --> 00:50:40,510
written up so we have

00:50:43,690 --> 00:50:47,680
so we have a this case we have two

00:50:46,240 --> 00:50:49,839
programs that were compiled from two

00:50:47,680 --> 00:50:53,460
files I've decided to make them generic

00:50:49,839 --> 00:50:57,329
so that the the compiled executable exe

00:50:53,460 --> 00:50:59,950
depends on the compile file dot o

00:50:57,329 --> 00:51:02,740
directly as a pen don't even we don't

00:50:59,950 --> 00:51:05,109
even mention hello and hello dot C and

00:51:02,740 --> 00:51:08,050
this it's all compile derived from the

00:51:05,109 --> 00:51:11,740
program names I've chosen da Lexi here

00:51:08,050 --> 00:51:13,710
because it's because you can even have a

00:51:11,740 --> 00:51:16,530
pattern with nothing else on the line

00:51:13,710 --> 00:51:21,069
except if you start calling make on

00:51:16,530 --> 00:51:23,800
unknown targets it will try to resolve

00:51:21,069 --> 00:51:25,780
that pattern they'll try to if you try

00:51:23,800 --> 00:51:28,540
to say if you make program foo and there

00:51:25,780 --> 00:51:29,890
is no food see it will say like it's

00:51:28,540 --> 00:51:31,270
like I'm trying to compile Fugazi but

00:51:29,890 --> 00:51:42,280
food us he doesn't think but Fugazi

00:51:31,270 --> 00:51:48,760
doesn't exist so what happen this right

00:51:42,280 --> 00:51:52,599
sorry it's clean first make so a compile

00:51:48,760 --> 00:51:54,880
bling compile blinked and you can't see

00:51:52,599 --> 00:51:57,640
the RM here but just deleted my to

00:51:54,880 --> 00:52:02,530
object files with what the heck just

00:51:57,640 --> 00:52:05,260
happened there unfort make is saying

00:52:02,530 --> 00:52:07,270
seeing that it is seeing that you have a

00:52:05,260 --> 00:52:09,700
chain of dependencies that are implicit

00:52:07,270 --> 00:52:12,220
so it's saying like oh yeah the dot oh

00:52:09,700 --> 00:52:14,290
you're just making that from a dot C and

00:52:12,220 --> 00:52:16,210
if we don't need to keep that around

00:52:14,290 --> 00:52:19,060
because it's the only thing we're willed

00:52:16,210 --> 00:52:22,390
here so just gets rid of it it's trying

00:52:19,060 --> 00:52:26,050
to be it's trying to be clean and nice

00:52:22,390 --> 00:52:28,210
you can there are ways to specify this

00:52:26,050 --> 00:52:29,589
it sometimes can be hard to food such as

00:52:28,210 --> 00:52:33,369
if you encounter this can be hard to

00:52:29,589 --> 00:52:34,660
diagnose what's going on the best source

00:52:33,369 --> 00:52:36,520
for documentation this is the make

00:52:34,660 --> 00:52:40,150
manual under a chain of them chains of

00:52:36,520 --> 00:52:42,490
implicit rules um if I try to explain

00:52:40,150 --> 00:52:44,740
this if I would be talking for a good

00:52:42,490 --> 00:52:47,079
half hour this is amiss is an

00:52:44,740 --> 00:52:48,460
unfortunate side effect of a for

00:52:47,079 --> 00:52:50,140
unfortunate thing that make does

00:52:48,460 --> 00:52:52,329
sometimes desirable sometimes does not

00:52:50,140 --> 00:52:53,770
it also the documentation also describe

00:52:52,329 --> 00:52:55,300
two ways to get around the little

00:52:53,770 --> 00:52:56,680
problem get around this if you do not

00:52:55,300 --> 00:53:00,160
what you want to preserve the other

00:52:56,680 --> 00:53:01,359
for example so some tips and debugging

00:53:00,160 --> 00:53:03,940
make follows you can use control

00:53:01,359 --> 00:53:06,579
functions to deliberately you can you

00:53:03,940 --> 00:53:09,309
put error everywhere in the file and

00:53:06,579 --> 00:53:11,380
have make stop in a certain state to say

00:53:09,309 --> 00:53:12,460
like I am stopping in the middle of a

00:53:11,380 --> 00:53:14,230
statement because i'm not sure where

00:53:12,460 --> 00:53:15,760
this is whether i set up this command to

00:53:14,230 --> 00:53:18,490
this rule right you can check the state

00:53:15,760 --> 00:53:21,910
of the command say to the rule in the

00:53:18,490 --> 00:53:24,130
middle of it which can have some which

00:53:21,910 --> 00:53:26,980
you have some benefits make dash n will

00:53:24,130 --> 00:53:29,410
attempt to run the make command will

00:53:26,980 --> 00:53:30,520
attempt to make but then it won't but

00:53:29,410 --> 00:53:32,980
doesn't actually do anything it just is

00:53:30,520 --> 00:53:35,710
what it would do sometimes doesn't this

00:53:32,980 --> 00:53:38,140
is some work but it depending on how you

00:53:35,710 --> 00:53:40,420
say up your make file but it can be

00:53:38,140 --> 00:53:42,579
useful for there again useful for

00:53:40,420 --> 00:53:44,470
figuring out what their say what

00:53:42,579 --> 00:53:47,470
variables are being set to what values

00:53:44,470 --> 00:53:50,349
at a particular time also that's

00:53:47,470 --> 00:53:52,990
supposed to be two dashes make can have

00:53:50,349 --> 00:53:54,670
a function as a command option that

00:53:52,990 --> 00:53:56,710
warns you if you have undefined

00:53:54,670 --> 00:54:00,970
variables lying around which can be

00:53:56,710 --> 00:54:05,109
useful if you have say typos so some

00:54:00,970 --> 00:54:06,790
tips be consistent and this is general

00:54:05,109 --> 00:54:08,950
rule and programming general make it if

00:54:06,790 --> 00:54:10,809
you start going into an indigent going

00:54:08,950 --> 00:54:13,240
to a loop of making your program

00:54:10,809 --> 00:54:15,069
and make all inconsistent you will get

00:54:13,240 --> 00:54:17,109
stuck in it forever and it will look

00:54:15,069 --> 00:54:18,579
worse than a pearl pro of Perl program

00:54:17,109 --> 00:54:22,450
written by someone who likes to be also

00:54:18,579 --> 00:54:24,369
be very concise lots of random dollar

00:54:22,450 --> 00:54:28,150
sign underscore errs and that sign

00:54:24,369 --> 00:54:29,950
underscores everywhere and four and four

00:54:28,150 --> 00:54:33,150
if you ever make a project it uses a

00:54:29,950 --> 00:54:36,190
make file directly um yep for installing

00:54:33,150 --> 00:54:39,160
always used Esther it makes package your

00:54:36,190 --> 00:54:42,010
packages will love you if you do if you

00:54:39,160 --> 00:54:43,540
don't packagers will hate you what they

00:54:42,010 --> 00:54:45,220
will hate you worse for is that if you

00:54:43,540 --> 00:54:46,809
use it but then forget to put it in some

00:54:45,220 --> 00:54:48,369
other parts of your file there's nothing

00:54:46,809 --> 00:54:50,410
worse than having a program that half

00:54:48,369 --> 00:54:55,319
installs to your package and it happens

00:54:50,410 --> 00:54:57,250
all to your file system like what I

00:54:55,319 --> 00:55:00,069
wasted a good half hour of my life

00:54:57,250 --> 00:55:03,480
trying to debug that once and the

00:55:00,069 --> 00:55:03,480
perfect response to that is

00:55:05,619 --> 00:55:14,989
yeah so some resources the almighty

00:55:11,599 --> 00:55:16,400
manual it is your friend it is something

00:55:14,989 --> 00:55:17,920
it is one of the best manuals I've ever

00:55:16,400 --> 00:55:21,589
had the pleasure of reading or

00:55:17,920 --> 00:55:23,809
referencing you can also be other

00:55:21,589 --> 00:55:27,439
peoples make files i will eventually be

00:55:23,809 --> 00:55:32,089
publishing these big follows it calls to

00:55:27,439 --> 00:55:33,349
my personal website which i can't really

00:55:32,089 --> 00:55:34,549
get to right now because you'll have a

00:55:33,349 --> 00:55:37,339
really good internet accent number lab

00:55:34,549 --> 00:55:39,589
my share and access there's also plenty

00:55:37,339 --> 00:55:41,509
of like good new hello is also a good

00:55:39,589 --> 00:55:53,689
example it's just all so simple program

00:55:41,509 --> 00:55:56,199
just a little world yeah yes canoe for

00:55:53,689 --> 00:55:58,759
new folks internal lab info files

00:55:56,199 --> 00:56:00,859
but what he was saying was that you

00:55:58,759 --> 00:56:02,569
should all that info files contain the

00:56:00,859 --> 00:56:04,789
info files were may contain a lot more

00:56:02,569 --> 00:56:07,219
information in the man pages and pages

00:56:04,789 --> 00:56:10,910
usually can usually and I usually

00:56:07,219 --> 00:56:22,069
reserve by canoe for brief how do call

00:56:10,910 --> 00:56:24,009
this come out i call this command yeah

00:56:22,069 --> 00:56:26,449
the for example the man page on tar

00:56:24,009 --> 00:56:28,759
wasn't John is not automatically

00:56:26,449 --> 00:56:31,009
generated by Debian because enough

00:56:28,759 --> 00:56:32,719
people got into the fuel start following

00:56:31,009 --> 00:56:38,499
bugs and deming saying like tar has no

00:56:32,719 --> 00:56:43,249
man page Laurie what do we do but that's

00:56:38,499 --> 00:56:45,640
pretty much it so now question time yes

00:56:43,249 --> 00:56:45,640
back

00:56:59,790 --> 00:57:02,790
yep

00:57:04,619 --> 00:57:07,619
they

00:57:20,470 --> 00:57:28,450
II yet some there isn't really a good

00:57:27,130 --> 00:57:31,960
way of doing that sometimes you can just

00:57:28,450 --> 00:57:33,910
go and you can go and like Purdue like

00:57:31,960 --> 00:57:39,700
print lots of print debugging to see

00:57:33,910 --> 00:57:41,260
where things are you can you can just

00:57:39,700 --> 00:57:42,910
print say you can go at the you can go

00:57:41,260 --> 00:57:44,320
pipe it to like say if you need to go

00:57:42,910 --> 00:57:47,560
write a command to a file and standard

00:57:44,320 --> 00:57:49,750
out at the same time you can use T if

00:57:47,560 --> 00:57:52,150
you if you're saying stupid say storing

00:57:49,750 --> 00:57:53,500
it variable to l value value to a

00:57:52,150 --> 00:57:55,570
variable you can t have it write to a

00:57:53,500 --> 00:57:58,750
file and see what the value of the file

00:57:55,570 --> 00:58:00,790
is it's yep you have to it it's it

00:57:58,750 --> 00:58:04,570
requires you to be creative sometimes

00:58:00,790 --> 00:58:15,840
I'm sorry I can't really give much a

00:58:04,570 --> 00:58:15,840
good solution for that oh go go on go

00:58:27,210 --> 00:58:41,680
yeah so they are doing they are making a

00:58:37,690 --> 00:58:43,300
function as far as I can tell so in my

00:58:41,680 --> 00:58:46,480
infinite wisdom I have made a make file

00:58:43,300 --> 00:58:50,160
to kampala emacs config as I am crazy

00:58:46,480 --> 00:58:53,950
like that they do something like that

00:58:50,160 --> 00:58:58,840
they echo the day just do an echo let's

00:58:53,950 --> 00:59:03,550
echo the CC filename and call the

00:58:58,840 --> 00:59:07,660
compiler but they keep it silent the

00:59:03,550 --> 00:59:09,520
putting a sign the game line yeah it's I

00:59:07,660 --> 00:59:10,840
want a silence is the command it does

00:59:09,520 --> 00:59:12,250
not make it an Aubree v8 just makes it

00:59:10,840 --> 00:59:14,620
silence so if you put a print in there

00:59:12,250 --> 00:59:16,240
you say print something and call this

00:59:14,620 --> 00:59:18,520
command it will print that something but

00:59:16,240 --> 00:59:20,970
it will never see if never see the

00:59:18,520 --> 00:59:20,970
command called

00:59:24,559 --> 00:59:27,219
yes

00:59:45,570 --> 00:59:53,470
so he is asking the asking whether how

00:59:51,310 --> 00:59:57,310
well make determines how its updates

00:59:53,470 --> 01:00:00,520
files in this case you are still it

00:59:57,310 --> 01:00:02,920
works on file update times whether the

01:00:00,520 --> 01:00:04,420
as in the goes and ask the it goes and

01:00:02,920 --> 01:00:06,580
does a statin the file and say when was

01:00:04,420 --> 01:00:08,230
this file last updated and then it does

01:00:06,580 --> 01:00:11,890
comparisons from there so if you update

01:00:08,230 --> 01:00:13,450
the metadata on the file then in the

01:00:11,890 --> 01:00:15,580
file itself then it would pick it up if

01:00:13,450 --> 01:00:17,140
you needed to if you up is admitted it

01:00:15,580 --> 01:00:19,360
was an external file you would need to

01:00:17,140 --> 01:00:22,690
go make a rule that checks for whether

01:00:19,360 --> 01:00:24,970
the external file was updated and then

01:00:22,690 --> 01:00:29,980
do an incall information on the image

01:00:24,970 --> 01:00:38,050
call damage update unfortunately our

01:00:29,980 --> 01:00:42,820
we're out of time no I'll take 0 for my

01:00:38,050 --> 01:00:45,840
stuff I haven't posted yet but I I but I

01:00:42,820 --> 01:00:45,840
I will

01:00:51,070 --> 01:00:57,310
yeah i'll put i'll put everything up but

01:00:59,230 --> 01:01:06,340
yes yes if you if you up it is

01:01:15,430 --> 01:01:18,430
it

01:01:18,490 --> 01:01:44,750
that you can read that am assalto said

01:01:22,730 --> 01:01:56,290
gmail.com yes make make make yep yes so

01:01:44,750 --> 01:01:56,290
like as well I guess that is good yeah

01:02:03,790 --> 01:02:16,870
yeah I did it by myself yeah

01:02:52,900 --> 01:02:54,960
you

01:02:58,179 --> 01:03:02,989
when we created asterisk over a decade

01:03:00,890 --> 01:03:05,209
ago we could not have imagined that

01:03:02,989 --> 01:03:07,400
asterisk would not only become the most

01:03:05,209 --> 01:03:09,559
widely adopted open source communication

01:03:07,400 --> 01:03:11,569
software on the planet but that it would

01:03:09,559 --> 01:03:14,089
impact the entire industry in the way

01:03:11,569 --> 01:03:16,069
that it has today asterisk has found its

01:03:14,089 --> 01:03:18,709
way into more than 170 countries and

01:03:16,069 --> 01:03:20,660
virtually every fortune 1000 company the

01:03:18,709 --> 01:03:22,759
success of asterisk has enabled a

01:03:20,660 --> 01:03:24,169
transition of power from the hands of

01:03:22,759 --> 01:03:26,449
the traditional proprietary phone

01:03:24,169 --> 01:03:28,849
vendors into the hands of the users and

01:03:26,449 --> 01:03:30,919
administrators of phone systems using

01:03:28,849 --> 01:03:32,569
this power our customers have traded all

01:03:30,919 --> 01:03:34,640
sorts of business changing applications

01:03:32,569 --> 01:03:36,439
from small office phone systems to

01:03:34,640 --> 01:03:38,569
mission-critical call centers the

01:03:36,439 --> 01:03:40,369
international carrier networks in fact

01:03:38,569 --> 01:03:41,839
there's even an entire country those

01:03:40,369 --> 01:03:44,299
communications infrastructure runs on

01:03:41,839 --> 01:03:46,219
esters the gym has always been about

01:03:44,299 --> 01:03:47,929
creating technology that expands

01:03:46,219 --> 01:03:50,119
communications capabilities in ways that

01:03:47,929 --> 01:03:51,289
we could never have imagined and that's

01:03:50,119 --> 01:03:53,689
part of what's game-changing about

01:03:51,289 --> 01:03:56,390
Digium today we're doing it again this

01:03:53,689 --> 01:03:58,489
time by introducing a new family of HD

01:03:56,390 --> 01:04:00,589
IP phones that extends control of the

01:03:58,489 --> 01:04:02,359
user all the way to the desktop the

01:04:00,589 --> 01:04:04,069
launch of these new products represents

01:04:02,359 --> 01:04:06,169
the next phase indigenous history of

01:04:04,069 --> 01:04:08,569
innovation these are the first and only

01:04:06,169 --> 01:04:10,279
IP phones designed to fully leverage the

01:04:08,569 --> 01:04:11,839
power of Astra's when we first discussed

01:04:10,279 --> 01:04:13,849
our expectations for building a family

01:04:11,839 --> 01:04:16,009
of phones for use with asterisk our

01:04:13,849 --> 01:04:17,749
requirements were pretty simple we asked

01:04:16,009 --> 01:04:19,400
the team to build the phones such that

01:04:17,749 --> 01:04:21,589
they were easy to install integrate

01:04:19,400 --> 01:04:23,449
provision and use I think you'll soon

01:04:21,589 --> 01:04:25,999
agree our engineers have delivered on

01:04:23,449 --> 01:04:27,619
that goal user feedback is validating

01:04:25,999 --> 01:04:29,749
that when it comes to operation with

01:04:27,619 --> 01:04:32,179
Astra space systems including our own

01:04:29,749 --> 01:04:34,729
Switchvox based product these are the

01:04:32,179 --> 01:04:36,049
easiest to use best integrated most

01:04:34,729 --> 01:04:39,049
interoperable products on the market

01:04:36,049 --> 01:04:41,630
today the digital phones will initially

01:04:39,049 --> 01:04:43,369
include three IP des hommes uniquely

01:04:41,630 --> 01:04:45,709
designed to complement any asterisks or

01:04:43,369 --> 01:04:46,959
Switchvox based solution these phones

01:04:45,709 --> 01:04:50,029
are different for a number of reasons

01:04:46,959 --> 01:04:52,429
first there is clue sively designed for

01:04:50,029 --> 01:04:54,049
use with esters secondly we've made it

01:04:52,429 --> 01:04:56,509
really easy to autodiscover and

01:04:54,049 --> 01:04:57,619
provision the phones next we've made it

01:04:56,509 --> 01:05:00,140
easy for the phones to access

01:04:57,619 --> 01:05:02,170
information inside of asterisks allowing

01:05:00,140 --> 01:05:04,870
tight coupling between an application

01:05:02,170 --> 01:05:07,030
the phone additionally we've created an

01:05:04,870 --> 01:05:09,160
applications engineer that allows users

01:05:07,030 --> 01:05:12,370
and developers to create and run their

01:05:09,160 --> 01:05:14,140
own apps on the phone and finally we've

01:05:12,370 --> 01:05:16,120
done all of this at a very compelling

01:05:14,140 --> 01:05:17,770
price point at Digium we're always

01:05:16,120 --> 01:05:19,870
thinking of ways to give our customers

01:05:17,770 --> 01:05:22,450
the best value in business phone systems

01:05:19,870 --> 01:05:24,010
and also give them the power to create

01:05:22,450 --> 01:05:26,140
their own solutions or any

01:05:24,010 --> 01:05:27,880
communications challenge well continue

01:05:26,140 --> 01:05:29,290
to push the boundaries not only to make

01:05:27,880 --> 01:05:31,360
astros cooler faster and more

01:05:29,290 --> 01:05:32,980
technologically feature-rich but to make

01:05:31,360 --> 01:05:35,440
asterisk and web communications even

01:05:32,980 --> 01:05:38,880
easier and together we'll change the way

01:05:35,440 --> 01:05:38,880
the world communication again

01:05:44,310 --> 01:05:46,370
you

01:05:49,549 --> 01:05:56,369
how's that sigh every way this is the

01:05:53,069 --> 01:05:58,559
way to better utilize all your resources

01:05:56,369 --> 01:06:02,010
and it makes managing all your resources

01:05:58,559 --> 01:06:05,839
pretty easy all of the innovation is

01:06:02,010 --> 01:06:09,359
happening in open source the

01:06:05,839 --> 01:06:11,130
collaborative nature and of the you know

01:06:09,359 --> 01:06:13,079
of the community and and the speed at

01:06:11,130 --> 01:06:15,240
which these are these you know these

01:06:13,079 --> 01:06:17,549
deficiencies these bugs are getting

01:06:15,240 --> 01:06:20,400
discovered and then fixed is the thing

01:06:17,549 --> 01:06:23,400
that really shows the power of the of

01:06:20,400 --> 01:06:25,880
the open source community it is global

01:06:23,400 --> 01:06:29,400
and it's definitely because of the users

01:06:25,880 --> 01:06:35,279
community people are extremely friendly

01:06:29,400 --> 01:06:37,109
and always ready to help if you go an

01:06:35,279 --> 01:06:39,329
entire see any day you'll see these guys

01:06:37,109 --> 01:06:41,940
helping each other out and they're all

01:06:39,329 --> 01:06:43,650
doing it like in a selfless manner the

01:06:41,940 --> 01:06:46,640
product is transparent for everyone

01:06:43,650 --> 01:06:49,799
everyone can look at the code base

01:06:46,640 --> 01:06:52,069
everyone can see how close that is being

01:06:49,799 --> 01:06:57,569
built nothing nothing is proprietary

01:06:52,069 --> 01:07:00,240
everything is open in many ways it's

01:06:57,569 --> 01:07:04,650
absolutely vital to the the ongoing

01:07:00,240 --> 01:07:08,849
health I'll stack the most exciting

01:07:04,650 --> 01:07:11,710
event in recent memory for me was our

01:07:08,849 --> 01:07:14,349
first developer boot camp

01:07:11,710 --> 01:07:16,990
and our call gave people I gave you two

01:07:14,349 --> 01:07:20,950
weeks notice to come attend I was

01:07:16,990 --> 01:07:25,119
expecting 25 or 30 people so we ended up

01:07:20,950 --> 01:07:27,970
with 87 people and had to go get more

01:07:25,119 --> 01:07:30,490
chairs in the room twice everything

01:07:27,970 --> 01:07:33,820
within cloud computing is commodity and

01:07:30,490 --> 01:07:36,820
is open source and so I don't think that

01:07:33,820 --> 01:07:38,560
you will you'll see anywhere where open

01:07:36,820 --> 01:07:41,589
source is not pervasive in cloud

01:07:38,560 --> 01:07:44,320
computing and so i think it's i think

01:07:41,589 --> 01:07:45,670
it's an assumption i think when you talk

01:07:44,320 --> 01:07:49,380
about cloud computing you're really

01:07:45,670 --> 01:07:49,380
talking about a source cloud computing

01:07:49,680 --> 01:07:55,720
cloud sac is a robust solution for large

01:07:52,960 --> 01:07:58,119
deployments you'll have dozens of data

01:07:55,720 --> 01:08:02,140
centers and thousands of servers in each

01:07:58,119 --> 01:08:05,410
data centers these hardware is going to

01:08:02,140 --> 01:08:08,619
fail and CloudStack is designed to

01:08:05,410 --> 01:08:11,080
handle number one that mass scale number

01:08:08,619 --> 01:08:13,810
two it's designed to handle the failure

01:08:11,080 --> 01:08:16,359
that inevitably happens in large

01:08:13,810 --> 01:08:19,900
deployments started working on college

01:08:16,359 --> 01:08:23,230
attack over four years ago and it was

01:08:19,900 --> 01:08:25,930
the original set of people working on it

01:08:23,230 --> 01:08:30,040
had a background of delivering software

01:08:25,930 --> 01:08:34,270
telcos and service providers lots of QA

01:08:30,040 --> 01:08:37,870
lots of users actually using it high

01:08:34,270 --> 01:08:40,960
availability is a key feature multiple

01:08:37,870 --> 01:08:42,969
hypervisors support different network

01:08:40,960 --> 01:08:45,670
models you can pick up whatever suits

01:08:42,969 --> 01:08:47,920
you better while step management server

01:08:45,670 --> 01:08:51,609
can be deployed in different physical

01:08:47,920 --> 01:08:53,259
machines it definitely has a huge

01:08:51,609 --> 01:08:58,239
footprint it's being deployed everywhere

01:08:53,259 --> 01:09:00,819
there's a major movie studio that they

01:08:58,239 --> 01:09:04,150
were using cloudstack they were using it

01:09:00,819 --> 01:09:06,100
to transcode video and i thought that

01:09:04,150 --> 01:09:07,750
was terribly fascinating what i found

01:09:06,100 --> 01:09:11,020
more fascinating is what they did during

01:09:07,750 --> 01:09:13,810
lunch where they would spin up you know

01:09:11,020 --> 01:09:15,190
50 or 60 game servers then as soon as

01:09:13,810 --> 01:09:15,760
lunch was over they would destroy all

01:09:15,190 --> 01:09:17,880
the essays

01:09:15,760 --> 01:09:21,280
this and go back to doing real work

01:09:17,880 --> 01:09:22,810
CloudStack is vast it touches so many

01:09:21,280 --> 01:09:24,670
different aspects and there's no one

01:09:22,810 --> 01:09:27,340
person that's kind of like a master of

01:09:24,670 --> 01:09:31,150
all those realms I think clouds stack as

01:09:27,340 --> 01:09:33,370
a project is going to be one of the

01:09:31,150 --> 01:09:37,420
leaders simply because it's some of the

01:09:33,370 --> 01:09:42,850
most feature fallen and and robust

01:09:37,420 --> 01:09:45,750
platforms out they were Adam senior

01:09:42,850 --> 01:09:45,750
limits of the clouds dag

01:09:58,570 --> 01:10:00,630

YouTube URL: https://www.youtube.com/watch?v=djQOL1KXDW0


