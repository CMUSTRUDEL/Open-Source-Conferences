Title: 2012 SouthEast LinuxFest - Garrett Honeycutt - Advanced Topics in Puppet
Publication date: 2013-04-13
Playlist: 2012 SouthEast LinuxFest
Description: 
	2012 SouthEast LinuxFest
Garrett Honeycutt
Advanced Topics in Puppet
Captions: 
	00:00:00,480 --> 00:00:03,919
the following presentation was recorded

00:00:02,399 --> 00:00:06,080
at the 2012

00:00:03,919 --> 00:00:07,200
southeast linux fest in charlotte north

00:00:06,080 --> 00:00:09,360
carolina

00:00:07,200 --> 00:00:10,240
it is licensed under a creative commons

00:00:09,360 --> 00:00:12,160
license

00:00:10,240 --> 00:00:15,440
for more information about the southeast

00:00:12,160 --> 00:00:17,359
linux fest visit www.southeast

00:00:15,440 --> 00:00:19,199
lennoxville

00:00:17,359 --> 00:00:21,119
the southeast linux fest would like to

00:00:19,199 --> 00:00:25,760
thank the following diamond sponsors

00:00:21,119 --> 00:00:25,760
in 2012 for helping make these videos

00:00:28,840 --> 00:00:31,840
possible

00:00:42,960 --> 00:00:46,079
okay everybody welcome to southeast

00:00:44,239 --> 00:00:47,200
linux fest um a couple little

00:00:46,079 --> 00:00:49,600
housekeeping items

00:00:47,200 --> 00:00:51,520
uh the first thing is at the

00:00:49,600 --> 00:00:53,840
registration table there are surveys

00:00:51,520 --> 00:00:54,719
please fill one out put it in the box

00:00:53,840 --> 00:00:58,079
that will

00:00:54,719 --> 00:01:00,480
magically become a raffle ticket uh

00:00:58,079 --> 00:01:02,239
this evening uh after the keynote

00:01:00,480 --> 00:01:04,239
address will be a raffle on surprises

00:01:02,239 --> 00:01:08,159
that's why i use a question on that

00:01:04,239 --> 00:01:09,520
yeah in years past you did but i'm not

00:01:08,159 --> 00:01:12,479
certain

00:01:09,520 --> 00:01:13,840
but in years past yes it was it was you

00:01:12,479 --> 00:01:14,159
have not been to one of the raffles

00:01:13,840 --> 00:01:17,360
that's

00:01:14,159 --> 00:01:18,320
slightly amusing normally there's lots

00:01:17,360 --> 00:01:20,479
of stuff

00:01:18,320 --> 00:01:22,720
so they could do it fast so it's a fast

00:01:20,479 --> 00:01:22,720
ride

00:01:24,840 --> 00:01:27,840
so

00:01:37,759 --> 00:01:41,360
and good to go everybody thanks for

00:01:40,640 --> 00:01:44,960
coming out

00:01:41,360 --> 00:01:46,560
uh i had stickers left in schwag and the

00:01:44,960 --> 00:01:49,439
rest of the shirts went

00:01:46,560 --> 00:01:51,200
super fast yesterday so uh they're

00:01:49,439 --> 00:01:52,560
they're they're doing the raffle i think

00:01:51,200 --> 00:01:53,360
there's a bunch of puppet books in there

00:01:52,560 --> 00:01:55,040
too

00:01:53,360 --> 00:01:57,280
there's probably cooler stuff in there

00:01:55,040 --> 00:01:58,799
that turns on

00:01:57,280 --> 00:02:00,560
thanks thanks thanks for having me out

00:01:58,799 --> 00:02:02,560
and attending

00:02:00,560 --> 00:02:04,960
i'm really excited to be itself again

00:02:02,560 --> 00:02:04,960
and so

00:02:05,600 --> 00:02:09,039
yesterday was an intro talk and a few of

00:02:07,840 --> 00:02:10,479
you were able to make it

00:02:09,039 --> 00:02:13,760
to that today is going to be an advanced

00:02:10,479 --> 00:02:17,440
talk and tomorrow i'm doing a 9 to 5

00:02:13,760 --> 00:02:19,920
tutorial so i'm taking the class that

00:02:17,440 --> 00:02:20,959
we normally charge for and takes three

00:02:19,920 --> 00:02:24,000
days i'm going to

00:02:20,959 --> 00:02:25,599
try and condense it into one day and so

00:02:24,000 --> 00:02:26,480
it'll be a quick bootstrap and you'll

00:02:25,599 --> 00:02:30,160
walk away with

00:02:26,480 --> 00:02:30,640
a working working vms have puppet master

00:02:30,160 --> 00:02:32,879
going

00:02:30,640 --> 00:02:34,480
have written some code it's definitely

00:02:32,879 --> 00:02:35,519
not going to be like this like

00:02:34,480 --> 00:02:37,519
i'm going to say something and then

00:02:35,519 --> 00:02:38,319
we're all going to type for a while so

00:02:37,519 --> 00:02:40,480
it's going to be really

00:02:38,319 --> 00:02:42,640
hands-on so encourage you guys to do

00:02:40,480 --> 00:02:42,640
that

00:02:44,560 --> 00:02:48,480
first thing about me i'm an engineer not

00:02:47,120 --> 00:02:49,360
a graphic designer or somebody in

00:02:48,480 --> 00:02:51,040
marketing

00:02:49,360 --> 00:02:53,599
and i think that'll be pretty apparent

00:02:51,040 --> 00:02:56,400
for my slides

00:02:53,599 --> 00:02:57,920
i work for puppet labs i spend all my

00:02:56,400 --> 00:03:00,879
time on the road

00:02:57,920 --> 00:03:02,000
when i'm not on the road a few days a

00:03:00,879 --> 00:03:05,040
month i get to go home

00:03:02,000 --> 00:03:08,800
and play with my truck uh i

00:03:05,040 --> 00:03:11,760
i started using puppet in uh 2007

00:03:08,800 --> 00:03:13,440
i was building out a nationwide uh

00:03:11,760 --> 00:03:15,519
career grade voip system

00:03:13,440 --> 00:03:16,720
and so i had a lot of kit different

00:03:15,519 --> 00:03:19,360
cities

00:03:16,720 --> 00:03:19,920
a lot of pre-production environments

00:03:19,360 --> 00:03:22,319
voice

00:03:19,920 --> 00:03:24,480
is real time you can't just like restart

00:03:22,319 --> 00:03:27,360
things or hope people don't notice

00:03:24,480 --> 00:03:27,360
so it had to work

00:03:27,920 --> 00:03:32,400
so i started using config management got

00:03:30,239 --> 00:03:34,159
into puppet uh

00:03:32,400 --> 00:03:35,680
within about 30 minutes it was doing

00:03:34,159 --> 00:03:38,720
something useful and

00:03:35,680 --> 00:03:40,640
away i went so

00:03:38,720 --> 00:03:42,319
now i work for him for about a year and

00:03:40,640 --> 00:03:46,159
a half now

00:03:42,319 --> 00:03:48,560
cool puppet labs is hiring uh

00:03:46,159 --> 00:03:49,200
professional services if you two want to

00:03:48,560 --> 00:03:51,760
live

00:03:49,200 --> 00:03:52,720
out of hotels and travel there's that

00:03:51,760 --> 00:03:54,239
opportunity

00:03:52,720 --> 00:03:57,360
not everybody actually like no one

00:03:54,239 --> 00:03:59,200
travels as much as i do there so uh

00:03:57,360 --> 00:04:00,640
like you don't have to live out of them

00:03:59,200 --> 00:04:01,680
we also have software developer

00:04:00,640 --> 00:04:04,000
positions and

00:04:01,680 --> 00:04:06,000
tons of other pot spots open we have

00:04:04,000 --> 00:04:08,720
remote people like we have kelsey

00:04:06,000 --> 00:04:09,599
in uh atlanta uh i'm based out of

00:04:08,720 --> 00:04:12,280
indianapolis

00:04:09,599 --> 00:04:14,080
so there's that opportunity or to be

00:04:12,280 --> 00:04:16,560
relocated um

00:04:14,080 --> 00:04:17,680
sure this talk's meant to jump around a

00:04:16,560 --> 00:04:19,680
bunch

00:04:17,680 --> 00:04:20,720
this is a small group and i'm hoping

00:04:19,680 --> 00:04:24,320
people

00:04:20,720 --> 00:04:24,320
are going to participate like with me

00:04:24,400 --> 00:04:28,080
how many folks here are already using

00:04:27,520 --> 00:04:31,520
some config

00:04:28,080 --> 00:04:33,440
management okay and how many folks are

00:04:31,520 --> 00:04:36,000
using puppet

00:04:33,440 --> 00:04:39,120
right on uh how many folks have used m

00:04:36,000 --> 00:04:43,120
collective in their environments

00:04:39,120 --> 00:04:46,479
none okay uh hira

00:04:43,120 --> 00:04:48,800
right on cool so it's gonna be different

00:04:46,479 --> 00:04:48,800
um

00:04:50,000 --> 00:04:54,800
yeah let's go through so have you

00:04:53,120 --> 00:04:56,240
checked out our style guide for folks

00:04:54,800 --> 00:05:00,320
that are writing

00:04:56,240 --> 00:05:01,919
code i recommend looking at that

00:05:00,320 --> 00:05:03,840
it has the sort of boring stuff you'd

00:05:01,919 --> 00:05:04,080
expect to see in a style guide like you

00:05:03,840 --> 00:05:06,800
use

00:05:04,080 --> 00:05:09,039
two space tabs and soft tabs not literal

00:05:06,800 --> 00:05:11,680
tabs etc

00:05:09,039 --> 00:05:12,479
that stuff's important uh kind of so we

00:05:11,680 --> 00:05:14,560
have to maybe

00:05:12,479 --> 00:05:16,160
put that in there but it also has more

00:05:14,560 --> 00:05:19,360
useful things such as

00:05:16,160 --> 00:05:21,199
best practices around coding style um

00:05:19,360 --> 00:05:22,639
how to how to achieve certain things

00:05:21,199 --> 00:05:24,880
what that should look like

00:05:22,639 --> 00:05:26,720
uh so it's definitely worth looking at

00:05:24,880 --> 00:05:28,880
for that

00:05:26,720 --> 00:05:30,800
the style guide itself is versioned and

00:05:28,880 --> 00:05:31,759
that way you can say you're compliant

00:05:30,800 --> 00:05:33,919
with version

00:05:31,759 --> 00:05:35,120
x of the software it's especially

00:05:33,919 --> 00:05:36,639
helpful

00:05:35,120 --> 00:05:39,039
if you're a system man and you're kind

00:05:36,639 --> 00:05:40,560
of new to developing

00:05:39,039 --> 00:05:43,199
if people all sort of have their own

00:05:40,560 --> 00:05:45,680
styles it can make it really hard to

00:05:43,199 --> 00:05:48,240
write good and coherent code so that'll

00:05:45,680 --> 00:05:48,240
help with that

00:05:49,520 --> 00:05:53,600
i would recommend documenting like on

00:05:51,199 --> 00:05:55,919
your wiki or something like we use

00:05:53,600 --> 00:05:56,880
you know version like whatever of the

00:05:55,919 --> 00:05:58,080
style guide

00:05:56,880 --> 00:06:00,560
if you don't like what the style guide

00:05:58,080 --> 00:06:03,840
has to say you can say we use version x

00:06:00,560 --> 00:06:05,280
the style guide except for section 4.2.3

00:06:03,840 --> 00:06:06,400
because we think public labs is crazy

00:06:05,280 --> 00:06:10,639
and we do it this way

00:06:06,400 --> 00:06:10,639
right but at least then it's understood

00:06:12,479 --> 00:06:14,639
right

00:06:16,960 --> 00:06:20,160
looks like i'm cutting off the top but

00:06:18,639 --> 00:06:21,919
uh all right so

00:06:20,160 --> 00:06:23,759
uh i'm just gonna go through a few

00:06:21,919 --> 00:06:24,800
things on style like that i see that pop

00:06:23,759 --> 00:06:27,440
up all the time

00:06:24,800 --> 00:06:29,039
uh is to use four digit modes uh you're

00:06:27,440 --> 00:06:30,720
being more explicit

00:06:29,039 --> 00:06:32,479
as opposed to three digit modes if you

00:06:30,720 --> 00:06:34,800
just use a three digit mode

00:06:32,479 --> 00:06:36,319
we'll we'll just manage those three

00:06:34,800 --> 00:06:38,639
digits

00:06:36,319 --> 00:06:40,720
so you should just be explicit and do

00:06:38,639 --> 00:06:43,120
all four

00:06:40,720 --> 00:06:44,639
can anyone read my slides i'm having a

00:06:43,120 --> 00:06:49,840
hard time reading them

00:06:44,639 --> 00:06:49,840
yeah okay

00:06:52,800 --> 00:06:59,120
yeah that stinks okay so

00:06:56,240 --> 00:06:59,440
uh this slide's about default fail and

00:06:59,120 --> 00:07:03,199
the

00:06:59,440 --> 00:07:05,440
idea here is that you have different uh

00:07:03,199 --> 00:07:06,400
like this example uses uh like case

00:07:05,440 --> 00:07:10,160
entries

00:07:06,400 --> 00:07:11,759
and so i have a case based on something

00:07:10,160 --> 00:07:13,599
and i have a few entries

00:07:11,759 --> 00:07:15,199
and then i have a default so you always

00:07:13,599 --> 00:07:16,479
want to have a default for your

00:07:15,199 --> 00:07:19,440
conditional logic

00:07:16,479 --> 00:07:20,240
so they're using case or selector etc

00:07:19,440 --> 00:07:22,880
and the

00:07:20,240 --> 00:07:24,400
the default is to use the fail function

00:07:22,880 --> 00:07:24,880
and so in this example that you can't

00:07:24,400 --> 00:07:27,360
read

00:07:24,880 --> 00:07:29,280
i'm doing a case on the operating system

00:07:27,360 --> 00:07:31,360
and so i'm saying if you're red hat

00:07:29,280 --> 00:07:33,280
include the red hat class if you're a

00:07:31,360 --> 00:07:36,639
debian system include the debian

00:07:33,280 --> 00:07:38,560
class but then my default is fail

00:07:36,639 --> 00:07:39,759
and i say well i failed and i only

00:07:38,560 --> 00:07:42,000
support

00:07:39,759 --> 00:07:42,800
debian and red hat so if another system

00:07:42,000 --> 00:07:46,000
was to connect

00:07:42,800 --> 00:07:47,680
it would just fail this is

00:07:46,000 --> 00:07:49,919
this is a great practice as you're doing

00:07:47,680 --> 00:07:51,680
your logic i know when i started off i

00:07:49,919 --> 00:07:52,000
was like well most of my systems are red

00:07:51,680 --> 00:07:53,919
hat

00:07:52,000 --> 00:07:55,440
and some of my systems are solaris so

00:07:53,919 --> 00:07:57,120
i'll just make my default red hat

00:07:55,440 --> 00:07:58,479
because that's the default for me

00:07:57,120 --> 00:08:00,400
and then i'll have these things like

00:07:58,479 --> 00:08:01,520
case you know if it's solaris do this

00:08:00,400 --> 00:08:03,840
and the default

00:08:01,520 --> 00:08:05,440
it'll just do the red hat stuff so

00:08:03,840 --> 00:08:07,520
that's that's not really good practice

00:08:05,440 --> 00:08:10,840
like you want to be more explicit and so

00:08:07,520 --> 00:08:13,840
that's why we have the default fail for

00:08:10,840 --> 00:08:13,840
things

00:08:14,319 --> 00:08:20,720
next is inheritance and so here we see

00:08:18,879 --> 00:08:21,919
these different classes we have class

00:08:20,720 --> 00:08:25,759
ssh

00:08:21,919 --> 00:08:29,440
ssh client inherits ssh

00:08:25,759 --> 00:08:30,479
ssh server inherits ssh ssh server

00:08:29,440 --> 00:08:33,680
solaris inherits

00:08:30,479 --> 00:08:40,080
ssh like server what's

00:08:33,680 --> 00:08:42,560
what's the same with all of these this

00:08:40,080 --> 00:08:42,560
one doesn't

00:08:49,200 --> 00:08:53,360
they they are uh what i'm like getting

00:08:51,920 --> 00:08:55,680
at here is that

00:08:53,360 --> 00:08:56,959
they're all inheriting within their

00:08:55,680 --> 00:08:59,360
class structure so they're all

00:08:56,959 --> 00:09:02,399
inheriting within that module

00:08:59,360 --> 00:09:05,839
so ssh doesn't inherit uh

00:09:02,399 --> 00:09:08,240
the server class nothing inherits some

00:09:05,839 --> 00:09:10,160
magical base class that does things

00:09:08,240 --> 00:09:12,160
all the inheritance is done within the

00:09:10,160 --> 00:09:12,480
given module like how many folks now

00:09:12,160 --> 00:09:15,040
have

00:09:12,480 --> 00:09:16,399
inheritance that goes between modules

00:09:15,040 --> 00:09:18,000
yep

00:09:16,399 --> 00:09:19,440
and what you probably notice from that

00:09:18,000 --> 00:09:22,560
is it's really hard to

00:09:19,440 --> 00:09:24,240
track down like how variables and data

00:09:22,560 --> 00:09:26,800
is like getting set or there's other

00:09:24,240 --> 00:09:30,160
resources that just show up and you get

00:09:26,800 --> 00:09:32,320
the problems and it makes it hard yeah

00:09:30,160 --> 00:09:34,080
so we don't want to do this so here i

00:09:32,320 --> 00:09:36,959
have ssh inheriting server

00:09:34,080 --> 00:09:39,120
ssh client inherits workstation

00:09:36,959 --> 00:09:42,320
wordpress inherits apache

00:09:39,120 --> 00:09:45,519
so we want to stay away from inheriting

00:09:42,320 --> 00:09:45,519
outside of our modules

00:09:46,399 --> 00:09:51,920
who uses inheritance with their nodes

00:09:50,800 --> 00:09:53,920
we're all not going to point and laugh

00:09:51,920 --> 00:09:56,000
it's okay and so

00:09:53,920 --> 00:09:57,200
this is really common to have something

00:09:56,000 --> 00:09:59,920
like node

00:09:57,200 --> 00:10:00,800
app1 inherits base and then you have

00:09:59,920 --> 00:10:03,279
some base

00:10:00,800 --> 00:10:04,800
node there that does a bunch of includes

00:10:03,279 --> 00:10:08,000
and so you're including

00:10:04,800 --> 00:10:10,480
those common things like ntp

00:10:08,000 --> 00:10:11,600
dns client all that kind of basic stuff

00:10:10,480 --> 00:10:15,440
right

00:10:11,600 --> 00:10:17,200
so instead of using inherits there

00:10:15,440 --> 00:10:19,200
i said i would use include so you can

00:10:17,200 --> 00:10:20,720
have node ww1

00:10:19,200 --> 00:10:23,440
i'm going to include apache and i'm

00:10:20,720 --> 00:10:25,839
going to include that common class

00:10:23,440 --> 00:10:28,480
on most people have this you have got

00:10:25,839 --> 00:10:31,120
something called generic or common or

00:10:28,480 --> 00:10:32,079
base or something instead of inheriting

00:10:31,120 --> 00:10:35,440
from it i'd include

00:10:32,079 --> 00:10:38,079
it if if you don't uh

00:10:35,440 --> 00:10:38,800
i would create a common class and set it

00:10:38,079 --> 00:10:41,600
up so that

00:10:38,800 --> 00:10:42,160
every system uses the common class and

00:10:41,600 --> 00:10:43,519
there

00:10:42,160 --> 00:10:46,399
is where i'd put all the things that are

00:10:43,519 --> 00:10:48,560
coming to all of your systems

00:10:46,399 --> 00:10:49,920
so all of your systems probably have

00:10:48,560 --> 00:10:51,200
time being managed they probably all

00:10:49,920 --> 00:10:52,640
have a resolver

00:10:51,200 --> 00:10:54,240
they probably all have some sort of

00:10:52,640 --> 00:10:58,000
kernel tuning

00:10:54,240 --> 00:11:00,240
monitoring backups uh etc and so there's

00:10:58,000 --> 00:11:03,120
lots of things that all your systems do

00:11:00,240 --> 00:11:04,800
package management within my common

00:11:03,120 --> 00:11:06,959
class i do things like

00:11:04,800 --> 00:11:09,680
we should before with the case operating

00:11:06,959 --> 00:11:12,160
system and so based on

00:11:09,680 --> 00:11:14,079
the os if it's solaris i'll include my

00:11:12,160 --> 00:11:16,399
solaris class which just does

00:11:14,079 --> 00:11:18,320
solaris related things but it's red hat

00:11:16,399 --> 00:11:20,480
it'll get my red hat class which

00:11:18,320 --> 00:11:22,320
also includes yum and does things that

00:11:20,480 --> 00:11:25,680
red hat systems care about

00:11:22,320 --> 00:11:26,240
right another thing i do there my common

00:11:25,680 --> 00:11:29,279
class

00:11:26,240 --> 00:11:31,519
is do like a case statement

00:11:29,279 --> 00:11:34,079
based on is virtual and so if it's

00:11:31,519 --> 00:11:35,760
virtual i'll include a vm class

00:11:34,079 --> 00:11:38,000
and maybe within that i'll do a case

00:11:35,760 --> 00:11:40,000
statement on different hypervisors

00:11:38,000 --> 00:11:41,600
and if it's physical system maybe i call

00:11:40,000 --> 00:11:42,240
out things that all my physical boxes

00:11:41,600 --> 00:11:44,079
needed

00:11:42,240 --> 00:11:46,959
maybe they need some ipmi tools

00:11:44,079 --> 00:11:46,959
installed things like that

00:11:52,880 --> 00:11:57,839
well nothing inherits the include yeah

00:12:02,480 --> 00:12:06,880
yeah so i just use like a case statement

00:12:04,800 --> 00:12:07,279
on operating system and so i'll have

00:12:06,880 --> 00:12:09,200
like

00:12:07,279 --> 00:12:11,200
you know red hat solaire submit to etc

00:12:09,200 --> 00:12:13,519
and then i'll have that default fail

00:12:11,200 --> 00:12:15,600
you know i only support these in my

00:12:13,519 --> 00:12:17,279
environment

00:12:15,600 --> 00:12:19,040
and that way you have one place that's

00:12:17,279 --> 00:12:21,279
really including all those things that

00:12:19,040 --> 00:12:22,880
are common to all your systems

00:12:21,279 --> 00:12:25,360
and then you would have maybe other

00:12:22,880 --> 00:12:26,480
things here that are more role specific

00:12:25,360 --> 00:12:28,399
like apache

00:12:26,480 --> 00:12:29,920
i just want on dub dub dub or this could

00:12:28,399 --> 00:12:31,600
be you know the name of

00:12:29,920 --> 00:12:33,600
your application that you're putting on

00:12:31,600 --> 00:12:36,079
your app servers and you have those

00:12:33,600 --> 00:12:37,279
modules that are higher up in the stack

00:12:36,079 --> 00:12:40,320
that start to describe

00:12:37,279 --> 00:12:40,320
roles of your systems

00:12:41,040 --> 00:12:45,600
like how many folks use the import

00:12:43,920 --> 00:12:49,519
statement

00:12:45,600 --> 00:12:53,600
to uh get get

00:12:49,519 --> 00:12:57,200
get code in no one

00:12:53,600 --> 00:13:00,160
yeah uh so the the import statement

00:12:57,200 --> 00:13:01,200
uh if you have that in your code i

00:13:00,160 --> 00:13:02,800
recommend like gripping through your

00:13:01,200 --> 00:13:06,160
code if you have it get rid of it

00:13:02,800 --> 00:13:06,959
today it's like the first thing i rip

00:13:06,160 --> 00:13:08,800
out

00:13:06,959 --> 00:13:10,399
client engagements because it causes a

00:13:08,800 --> 00:13:13,200
ton of problem

00:13:10,399 --> 00:13:14,880
like problems so instead we look at

00:13:13,200 --> 00:13:17,440
using the autoloader

00:13:14,880 --> 00:13:18,480
so that's using modules and the module

00:13:17,440 --> 00:13:21,600
system

00:13:18,480 --> 00:13:22,560
layout it's just a directory structure

00:13:21,600 --> 00:13:25,839
and if you

00:13:22,560 --> 00:13:27,839
adhere to it for your code then

00:13:25,839 --> 00:13:29,120
puppet knows how to find classes on

00:13:27,839 --> 00:13:31,760
disks you can say like

00:13:29,120 --> 00:13:32,800
include ssh and it knows where to find

00:13:31,760 --> 00:13:37,040
that

00:13:32,800 --> 00:13:37,040
so use that don't use import

00:13:43,519 --> 00:13:49,279
what sort of version control systems do

00:13:45,279 --> 00:13:53,360
people are people using with puppet

00:13:49,279 --> 00:13:53,360
i heard git anything else

00:13:53,760 --> 00:13:59,519
what's that subversion we got any uh

00:13:57,199 --> 00:14:03,519
bizarre people here

00:13:59,519 --> 00:14:06,480
mercurial force

00:14:03,519 --> 00:14:07,680
uh yeah that's good glad you're not

00:14:06,480 --> 00:14:11,199
using perforce

00:14:07,680 --> 00:14:13,279
uh so uh i recommend uh

00:14:11,199 --> 00:14:14,880
adding pre-commit hooks to your system

00:14:13,279 --> 00:14:17,839
like who's using pre-commit hooks with

00:14:14,880 --> 00:14:17,839
their puppet code now

00:14:21,920 --> 00:14:24,399
what's that

00:14:30,399 --> 00:14:34,079
one one piece of software to check out

00:14:32,399 --> 00:14:37,360
uh is puppet lent

00:14:34,079 --> 00:14:38,000
by tim sharp uh and you can run puppet

00:14:37,360 --> 00:14:40,399
lent

00:14:38,000 --> 00:14:41,519
over your code and it will tell you if

00:14:40,399 --> 00:14:45,839
uh

00:14:41,519 --> 00:14:45,839
there are issues with style

00:15:02,639 --> 00:15:06,800
maybe i have network access we'll see

00:15:07,600 --> 00:15:14,800
nope all right

00:15:11,680 --> 00:15:16,320
anyways uh it wouldn't

00:15:14,800 --> 00:15:18,240
it wouldn't be a good like demo

00:15:16,320 --> 00:15:20,240
something didn't work uh

00:15:18,240 --> 00:15:21,360
but check out uh the puppet lent

00:15:20,240 --> 00:15:24,959
software so it's

00:15:21,360 --> 00:15:28,079
it's going to let your code for uh style

00:15:24,959 --> 00:15:29,519
and so if you go against the style guide

00:15:28,079 --> 00:15:30,800
and do things it'll give you either

00:15:29,519 --> 00:15:34,000
warnings or errors

00:15:30,800 --> 00:15:36,000
and then you can suppress those as

00:15:34,000 --> 00:15:37,600
necessary so if you're okay with certain

00:15:36,000 --> 00:15:38,959
things coming up

00:15:37,600 --> 00:15:40,959
that's cool with your style you can

00:15:38,959 --> 00:15:41,519
suppress all that i recommend sticking

00:15:40,959 --> 00:15:44,639
this on

00:15:41,519 --> 00:15:47,600
as a pre-commit hook and that way uh

00:15:44,639 --> 00:15:48,880
if if code's not passing the lint you

00:15:47,600 --> 00:15:54,079
can just reject it

00:15:48,880 --> 00:15:56,720
before it even gets committed uh yeah

00:15:54,079 --> 00:15:57,519
an another one to use is puppet parser

00:15:56,720 --> 00:15:59,440
validate

00:15:57,519 --> 00:16:00,639
uh so if you're using old versions of

00:15:59,440 --> 00:16:03,120
puppet uh

00:16:00,639 --> 00:16:03,920
it was like puppet dash dash parts only

00:16:03,120 --> 00:16:05,920
something

00:16:03,920 --> 00:16:07,440
newer versions puppet parser validate

00:16:05,920 --> 00:16:10,480
and then your manifest file

00:16:07,440 --> 00:16:12,800
and this will check for syntax it's

00:16:10,480 --> 00:16:14,880
really easy to write bad puppet code or

00:16:12,800 --> 00:16:16,639
code that does dumb things but let's at

00:16:14,880 --> 00:16:17,519
least not accept it into the repo if it

00:16:16,639 --> 00:16:23,199
doesn't pass

00:16:17,519 --> 00:16:27,120
a syntax checker right

00:16:23,199 --> 00:16:30,000
you can also syntax check uh ruby with

00:16:27,120 --> 00:16:30,959
this gibberish and that'll are sorry the

00:16:30,000 --> 00:16:33,040
templates

00:16:30,959 --> 00:16:34,880
with like that gibberish and it'll do

00:16:33,040 --> 00:16:36,800
the uh check your erb

00:16:34,880 --> 00:16:39,279
files i recommend also having this in

00:16:36,800 --> 00:16:40,959
your pre-commit hooks

00:16:39,279 --> 00:16:43,680
i would start with these three things

00:16:40,959 --> 00:16:45,360
and then as you mature

00:16:43,680 --> 00:16:47,040
and what you're managing with puppets

00:16:45,360 --> 00:16:49,279
start adding more

00:16:47,040 --> 00:16:51,600
so like if you have sudo in there you

00:16:49,279 --> 00:16:52,800
can use vice sudo-c-f to check your

00:16:51,600 --> 00:16:54,560
pseudoers file

00:16:52,800 --> 00:16:55,920
you can do things like if you're running

00:16:54,560 --> 00:16:59,600
bind

00:16:55,920 --> 00:17:01,839
bind comes with like uh name d like

00:16:59,600 --> 00:17:03,759
check zone and check conf and so there's

00:17:01,839 --> 00:17:06,240
there's different ways that you can

00:17:03,759 --> 00:17:07,120
you know check check your code and so i

00:17:06,240 --> 00:17:11,120
recommend

00:17:07,120 --> 00:17:11,120
putting those in your pre-commit hooks

00:17:16,839 --> 00:17:21,120
yep

00:17:18,720 --> 00:17:22,240
i've got a i've got a pre-commit hook in

00:17:21,120 --> 00:17:25,520
my

00:17:22,240 --> 00:17:28,960
uh g honeycut dash svn module

00:17:25,520 --> 00:17:32,640
uh has a pre-commit hook code in there

00:17:28,960 --> 00:17:33,520
uh yeah then a gentleman uh robert long

00:17:32,640 --> 00:17:36,559
wrote in pearl

00:17:33,520 --> 00:17:36,559
uh years ago

00:17:38,320 --> 00:17:43,520
that's a one and that's a pipe yeah

00:17:45,600 --> 00:17:49,039
cool so it's the best some best

00:17:48,400 --> 00:17:51,520
practices

00:17:49,039 --> 00:17:52,880
uh starting from a known base when

00:17:51,520 --> 00:17:55,440
creating systems

00:17:52,880 --> 00:17:56,799
uh how many folks here are dealing with

00:17:55,440 --> 00:18:00,240
uh

00:17:56,799 --> 00:18:02,640
or use pixie yeah uh

00:18:00,240 --> 00:18:04,640
and how many folks are using uh some

00:18:02,640 --> 00:18:06,320
other like cloudy tools to spin up

00:18:04,640 --> 00:18:08,480
instances

00:18:06,320 --> 00:18:10,880
yeah right on so starting from that

00:18:08,480 --> 00:18:14,160
known base knowing what's going on there

00:18:10,880 --> 00:18:15,919
um you want to provision systems

00:18:14,160 --> 00:18:18,320
should be small and they should be

00:18:15,919 --> 00:18:20,880
common so you shouldn't have different

00:18:18,320 --> 00:18:21,440
images if you're going uh some of that

00:18:20,880 --> 00:18:23,360
like

00:18:21,440 --> 00:18:24,559
that route with like cloudy solutions or

00:18:23,360 --> 00:18:26,320
vmware

00:18:24,559 --> 00:18:28,080
that where you have a different image

00:18:26,320 --> 00:18:31,120
for your web server versus your database

00:18:28,080 --> 00:18:32,799
versus your app server things like that

00:18:31,120 --> 00:18:34,960
same with if you're using kickstart

00:18:32,799 --> 00:18:38,080
jumpstart things like that you want

00:18:34,960 --> 00:18:39,200
uh to have that one kickstart file that

00:18:38,080 --> 00:18:41,600
sets up

00:18:39,200 --> 00:18:43,120
the smallest thing of what it means to

00:18:41,600 --> 00:18:44,880
be a node on your network

00:18:43,120 --> 00:18:46,559
so you don't want to kick start for the

00:18:44,880 --> 00:18:48,080
web server and another kickstart for the

00:18:46,559 --> 00:18:49,679
database server

00:18:48,080 --> 00:18:50,960
in actuality you might have different

00:18:49,679 --> 00:18:52,799
kickstarts for different types of

00:18:50,960 --> 00:18:55,039
hardware that you support

00:18:52,799 --> 00:18:56,160
but the functionality that comes out is

00:18:55,039 --> 00:19:00,000
going to be that same

00:18:56,160 --> 00:19:01,360
small base node

00:19:00,000 --> 00:19:03,360
and then we're going to build on top of

00:19:01,360 --> 00:19:05,200
that with puppet so

00:19:03,360 --> 00:19:07,360
here we have blank hardware a lack of a

00:19:05,200 --> 00:19:08,480
vm it gets provisioned through our

00:19:07,360 --> 00:19:11,600
provisioning process

00:19:08,480 --> 00:19:14,000
and we have this base install

00:19:11,600 --> 00:19:16,080
and then puppet is going to configure

00:19:14,000 --> 00:19:18,960
and manage that system after that

00:19:16,080 --> 00:19:20,799
that way you know where the

00:19:18,960 --> 00:19:22,240
configuration takes place

00:19:20,799 --> 00:19:24,080
it's not well part of it's in the

00:19:22,240 --> 00:19:25,200
provisioning process and part of it's in

00:19:24,080 --> 00:19:28,320
puppet

00:19:25,200 --> 00:19:28,320
it's one place to go

00:19:28,960 --> 00:19:34,160
like how many folks have this part

00:19:32,240 --> 00:19:35,840
built where they have this base

00:19:34,160 --> 00:19:36,960
installed and then maybe they run some

00:19:35,840 --> 00:19:39,200
scripts or

00:19:36,960 --> 00:19:40,799
there's like a big post section and it

00:19:39,200 --> 00:19:43,200
creates a box

00:19:40,799 --> 00:19:44,400
yeah so puppet's going to get past there

00:19:43,200 --> 00:19:45,760
because it's going to do that

00:19:44,400 --> 00:19:47,760
but it's also going to maintain the

00:19:45,760 --> 00:19:52,559
system so to ensure

00:19:47,760 --> 00:19:54,400
that state

00:19:52,559 --> 00:19:55,600
uh so by moving on to software

00:19:54,400 --> 00:19:57,600
repositories

00:19:55,600 --> 00:19:59,600
how many folks uh run their own software

00:19:57,600 --> 00:20:01,360
repos

00:19:59,600 --> 00:20:03,679
right on how many people connect out to

00:20:01,360 --> 00:20:08,240
the internet

00:20:03,679 --> 00:20:09,600
yeah uh who uses ensure latest in their

00:20:08,240 --> 00:20:12,720
code

00:20:09,600 --> 00:20:15,280
yeah uh and what's what's

00:20:12,720 --> 00:20:16,880
what's that by you it it gives you the

00:20:15,280 --> 00:20:19,919
ability for packages

00:20:16,880 --> 00:20:22,799
you drop a new package in your repo next

00:20:19,919 --> 00:20:26,320
puppet run it gets updated right

00:20:22,799 --> 00:20:27,480
the issue with that is especially if

00:20:26,320 --> 00:20:30,559
you're running uh

00:20:27,480 --> 00:20:33,840
repositories that are connected

00:20:30,559 --> 00:20:35,600
to the internet somebody updates a

00:20:33,840 --> 00:20:38,640
package and some repo

00:20:35,600 --> 00:20:39,520
and suddenly your systems are getting

00:20:38,640 --> 00:20:43,120
updated

00:20:39,520 --> 00:20:44,720
so one of the probably most

00:20:43,120 --> 00:20:47,120
change inducing things you can do to

00:20:44,720 --> 00:20:49,360
your system is start patching software

00:20:47,120 --> 00:20:50,640
and so you want to have some like

00:20:49,360 --> 00:20:54,880
testing

00:20:50,640 --> 00:20:59,440
around that also with ensure latest

00:20:54,880 --> 00:20:59,440
in your code you might have systems

00:20:59,840 --> 00:21:03,600
update out of out of step with each

00:21:01,919 --> 00:21:05,919
other so imagine you

00:21:03,600 --> 00:21:08,640
you're running some application and it

00:21:05,919 --> 00:21:11,600
needs a specific version of some library

00:21:08,640 --> 00:21:13,600
and then half your systems update and

00:21:11,600 --> 00:21:17,039
the other half have it you know your

00:21:13,600 --> 00:21:17,039
your app might start doing weird stuff

00:21:24,720 --> 00:21:28,960
i'm glad you asked so that'll be the

00:21:27,039 --> 00:21:31,760
next slide

00:21:28,960 --> 00:21:33,600
who who puts uh specific version strings

00:21:31,760 --> 00:21:36,480
in their code

00:21:33,600 --> 00:21:38,159
and so like those are even worse because

00:21:36,480 --> 00:21:41,360
now you're duplicating data

00:21:38,159 --> 00:21:43,520
and so now when you add a package to

00:21:41,360 --> 00:21:44,880
your packet to your like software repo

00:21:43,520 --> 00:21:46,559
you also have to go in there and like

00:21:44,880 --> 00:21:47,280
copy and paste some string into your

00:21:46,559 --> 00:21:49,520
code

00:21:47,280 --> 00:21:52,880
and so you're duplicating all of this

00:21:49,520 --> 00:21:52,880
and it's just a ton of overhead

00:21:53,600 --> 00:21:57,200
so you want to run your own software

00:21:55,360 --> 00:22:00,240
repositories

00:21:57,200 --> 00:22:02,400
connecting to the internet's

00:22:00,240 --> 00:22:04,080
like not good you could have packages

00:22:02,400 --> 00:22:06,400
that are mysteriously missing

00:22:04,080 --> 00:22:08,240
maybe there's some security issue and

00:22:06,400 --> 00:22:10,320
somebody pulls a package from the repo

00:22:08,240 --> 00:22:11,679
but you really need that package to

00:22:10,320 --> 00:22:13,440
build your systems maybe you're not

00:22:11,679 --> 00:22:16,880
really affected by the security thing

00:22:13,440 --> 00:22:17,600
but now it's gone you get much faster

00:22:16,880 --> 00:22:19,360
provisioning

00:22:17,600 --> 00:22:20,720
obviously if you're connecting to local

00:22:19,360 --> 00:22:23,919
systems as opposed to

00:22:20,720 --> 00:22:24,880
boxes on the net and you really want the

00:22:23,919 --> 00:22:26,960
ability to

00:22:24,880 --> 00:22:29,840
version control your software

00:22:26,960 --> 00:22:29,840
repositories

00:22:30,000 --> 00:22:34,159
when i say version control my software

00:22:31,760 --> 00:22:37,760
repos that's not to

00:22:34,159 --> 00:22:40,799
say that i use svn or git etc

00:22:37,760 --> 00:22:41,520
with my repos those those systems really

00:22:40,799 --> 00:22:44,799
aren't meant to

00:22:41,520 --> 00:22:46,240
hold a bunch of binary data but what i

00:22:44,799 --> 00:22:49,280
do is something simple

00:22:46,240 --> 00:22:51,600
where i'll have a directory

00:22:49,280 --> 00:22:53,280
that i'm keeping my data in and then

00:22:51,600 --> 00:22:55,600
i'll create sim links

00:22:53,280 --> 00:22:56,640
and so like what i can do is i can

00:22:55,600 --> 00:22:59,360
mirror

00:22:56,640 --> 00:22:59,919
you know centos to here and then maybe i

00:22:59,360 --> 00:23:02,480
have some

00:22:59,919 --> 00:23:03,280
updates i should probably be updates

00:23:02,480 --> 00:23:05,280
instead of base

00:23:03,280 --> 00:23:07,120
but then when i want to do an update

00:23:05,280 --> 00:23:08,400
i'll do an update into a different

00:23:07,120 --> 00:23:11,360
directory

00:23:08,400 --> 00:23:11,760
and now i can just point the sim link

00:23:11,360 --> 00:23:15,280
from

00:23:11,760 --> 00:23:17,919
from this directory to my new one

00:23:15,280 --> 00:23:18,880
and i can do that per environment so i

00:23:17,919 --> 00:23:22,080
could say well in

00:23:18,880 --> 00:23:25,679
dev i want to change the sim link

00:23:22,080 --> 00:23:28,480
to this uh to these new rpms i just

00:23:25,679 --> 00:23:28,880
like downloaded see how that works run

00:23:28,480 --> 00:23:31,039
my

00:23:28,880 --> 00:23:32,880
you know app to get update uh give

00:23:31,039 --> 00:23:34,640
update etc

00:23:32,880 --> 00:23:38,240
and if that's good like then i can do my

00:23:34,640 --> 00:23:38,240
next environment et cetera

00:23:47,679 --> 00:23:51,120
yep that's what i'm saying so you might

00:23:49,120 --> 00:23:54,080
have prod pointing here

00:23:51,120 --> 00:23:55,440
devs pointing to some other directory

00:23:54,080 --> 00:23:56,320
staging is pointing into some other

00:23:55,440 --> 00:23:58,559
directory

00:23:56,320 --> 00:24:00,640
and then you can put it through your

00:23:58,559 --> 00:24:01,279
change management process so you can say

00:24:00,640 --> 00:24:03,600
well

00:24:01,279 --> 00:24:05,679
instead of just up like running updates

00:24:03,600 --> 00:24:06,640
uh and prod you know i can uh test them

00:24:05,679 --> 00:24:08,559
out and and

00:24:06,640 --> 00:24:10,880
like this environment i could test them

00:24:08,559 --> 00:24:13,039
there um

00:24:10,880 --> 00:24:15,039
and then by doing this you also get the

00:24:13,039 --> 00:24:18,159
side effect of knowing

00:24:15,039 --> 00:24:18,960
when things changed and what changed and

00:24:18,159 --> 00:24:21,440
if you keep a

00:24:18,960 --> 00:24:23,679
change log i usually just keep a real

00:24:21,440 --> 00:24:25,760
simple just a change text file here

00:24:23,679 --> 00:24:27,039
then you'll know why things change so

00:24:25,760 --> 00:24:29,840
was this just your

00:24:27,039 --> 00:24:30,720
whatever weekly quarterly etc patch

00:24:29,840 --> 00:24:33,919
update

00:24:30,720 --> 00:24:34,960
uh was this a specific thing that solved

00:24:33,919 --> 00:24:38,799
the problem

00:24:34,960 --> 00:24:38,799
and you can have that information

00:24:38,960 --> 00:24:42,880
this makes it like really easy to know

00:24:40,400 --> 00:24:45,120
at any point in time what

00:24:42,880 --> 00:24:46,559
software you were using and what your

00:24:45,120 --> 00:24:49,919
patch levels were

00:24:46,559 --> 00:24:52,559
uh yeah so to use this i also use uh

00:24:49,919 --> 00:24:54,480
hard blinks uh which will set up hard

00:24:52,559 --> 00:24:56,960
links between the directories so

00:24:54,480 --> 00:24:58,000
uh you won't have a ton of like disk

00:24:56,960 --> 00:25:00,000
usage

00:24:58,000 --> 00:25:01,840
if you're not using a deduplicating file

00:25:00,000 --> 00:25:04,080
system

00:25:01,840 --> 00:25:07,120
like any questions on software repos

00:25:04,080 --> 00:25:07,120
before we move on

00:25:09,840 --> 00:25:13,360
great so this is just a bind style

00:25:12,400 --> 00:25:17,120
serial

00:25:13,360 --> 00:25:18,640
so this is saying 2012 june 9th

00:25:17,120 --> 00:25:20,880
and that would be my first one of the

00:25:18,640 --> 00:25:20,880
day

00:25:24,559 --> 00:25:31,760
cool so next is hera

00:25:27,760 --> 00:25:33,600
here is the the new hotness and puppet

00:25:31,760 --> 00:25:36,400
it's not it's not that new though we

00:25:33,600 --> 00:25:38,640
i've been using it with clients all year

00:25:36,400 --> 00:25:39,440
it ships as a part of puppet enterprise

00:25:38,640 --> 00:25:41,440
now

00:25:39,440 --> 00:25:42,880
you can download it by doing like gem

00:25:41,440 --> 00:25:46,240
install

00:25:42,880 --> 00:25:47,039
hera and like set it up and what here it

00:25:46,240 --> 00:25:51,200
does is

00:25:47,039 --> 00:25:51,200
it allows for you to

00:25:51,279 --> 00:25:56,559
decouple data from your modules

00:25:54,480 --> 00:25:57,600
so i can do a call to hear and say get

00:25:56,559 --> 00:25:59,120
this data

00:25:57,600 --> 00:26:01,279
as opposed to putting it right in my

00:25:59,120 --> 00:26:02,480
module like how many folks in their

00:26:01,279 --> 00:26:05,600
modules

00:26:02,480 --> 00:26:07,279
they have uh business logic

00:26:05,600 --> 00:26:10,480
type things stuck in there so i'm saying

00:26:07,279 --> 00:26:14,720
like if you're in this environment

00:26:10,480 --> 00:26:17,360
and it's uh you're in this data center

00:26:14,720 --> 00:26:19,679
then you need to pull this kind of data

00:26:17,360 --> 00:26:22,400
like does anyone do that stuff now

00:26:19,679 --> 00:26:22,799
uh but you would see where you might

00:26:22,400 --> 00:26:24,960
want to

00:26:22,799 --> 00:26:26,320
change data based on different

00:26:24,960 --> 00:26:28,240
parameters so maybe

00:26:26,320 --> 00:26:30,000
if you're in one data center versus

00:26:28,240 --> 00:26:31,440
another like data center maybe things

00:26:30,000 --> 00:26:35,279
like your

00:26:31,440 --> 00:26:39,600
name servers and ldap servers etc change

00:26:35,279 --> 00:26:41,919
maybe between environments things

00:26:39,600 --> 00:26:43,440
change like you want to change your my

00:26:41,919 --> 00:26:46,320
sequel passwords

00:26:43,440 --> 00:26:48,640
so that the devs could possibly see it

00:26:46,320 --> 00:26:50,080
but when it goes to production

00:26:48,640 --> 00:26:52,799
it pulls a different password that they

00:26:50,080 --> 00:26:54,320
don't know like how many folks have

00:26:52,799 --> 00:26:56,080
like passwords and stuff in their puppet

00:26:54,320 --> 00:26:57,840
code which is keeping them from being

00:26:56,080 --> 00:27:01,440
able to publish it

00:26:57,840 --> 00:27:01,440
no okay

00:27:02,240 --> 00:27:07,840
is everyone still super confused on what

00:27:04,000 --> 00:27:07,840
here is

00:27:14,400 --> 00:27:16,880
i wouldn't

00:27:18,159 --> 00:27:25,279
it depends on you but uh i win uh

00:27:22,000 --> 00:27:27,200
so like really uh allowing me to

00:27:25,279 --> 00:27:29,919
decouple data from modules

00:27:27,200 --> 00:27:30,240
so when we started uh down this road of

00:27:29,919 --> 00:27:31,600
really

00:27:30,240 --> 00:27:34,000
like wanting to write modules that were

00:27:31,600 --> 00:27:35,600
really portable what we found out was we

00:27:34,000 --> 00:27:37,760
could write a great module

00:27:35,600 --> 00:27:39,679
but then you would need to edit it and

00:27:37,760 --> 00:27:40,559
put in values for things that meant

00:27:39,679 --> 00:27:41,840
something to you

00:27:40,559 --> 00:27:44,159
like i could give you a module that

00:27:41,840 --> 00:27:47,279
would manage your etsy resolve conf

00:27:44,159 --> 00:27:49,039
but then you need to go in and like

00:27:47,279 --> 00:27:50,880
change that to you know put in your name

00:27:49,039 --> 00:27:53,520
server your search path etc

00:27:50,880 --> 00:27:55,120
right and then we move to using

00:27:53,520 --> 00:27:56,880
parameterized classes

00:27:55,120 --> 00:27:58,960
and so now i could instantiate this

00:27:56,880 --> 00:28:00,960
class with some parameters so i could

00:27:58,960 --> 00:28:02,720
call dns client

00:28:00,960 --> 00:28:04,720
class and then give it a parameter of

00:28:02,720 --> 00:28:07,919
name servers and some

00:28:04,720 --> 00:28:11,120
array so that that that moved me closer

00:28:07,919 --> 00:28:12,480
to decoupling data from my code

00:28:11,120 --> 00:28:17,840
but it still wasn't there you would

00:28:12,480 --> 00:28:17,840
still have to like modify things

00:28:17,919 --> 00:28:21,279
and so now we have hira we can just ask

00:28:20,159 --> 00:28:31,840
hira so let me

00:28:21,279 --> 00:28:31,840
show some actual code here

00:28:33,440 --> 00:28:40,799
can people read these lines here

00:28:37,520 --> 00:28:43,120
does that help if i highlight them

00:28:40,799 --> 00:28:44,159
so like what i have going on here is i

00:28:43,120 --> 00:28:46,960
have dollar sign

00:28:44,159 --> 00:28:47,840
test equals hera and then it's looking

00:28:46,960 --> 00:28:50,080
up for a key

00:28:47,840 --> 00:28:51,600
called test and then i'm just using a

00:28:50,080 --> 00:28:55,760
notify

00:28:51,600 --> 00:28:55,760
to give me that output and so

00:28:56,559 --> 00:29:01,200
some other place you might like use this

00:28:59,440 --> 00:29:03,520
is um

00:29:01,200 --> 00:29:03,520
really

00:29:09,600 --> 00:29:13,600
and of course you can't read anything

00:29:11,360 --> 00:29:15,360
here

00:29:13,600 --> 00:29:17,360
so like what i'm doing here is i've got

00:29:15,360 --> 00:29:20,640
user root and i'm saying

00:29:17,360 --> 00:29:22,399
password and i'm looking it up from here

00:29:20,640 --> 00:29:23,840
this says root password it's looking up

00:29:22,399 --> 00:29:27,600
this key

00:29:23,840 --> 00:29:29,200
and then i have a default md5 hash

00:29:27,600 --> 00:29:32,000
so i could set this to set root

00:29:29,200 --> 00:29:33,679
passwords for my systems

00:29:32,000 --> 00:29:35,840
like how many folks now regularly change

00:29:33,679 --> 00:29:40,080
their root password even

00:29:35,840 --> 00:29:43,520
yeah and how long does that take

00:29:40,080 --> 00:29:43,520
yeah yep

00:29:44,320 --> 00:29:50,159
so let's show a bit more of what hira

00:29:47,279 --> 00:29:50,159
looks like here

00:29:50,480 --> 00:29:59,039
so i've got this here a data directory

00:29:53,679 --> 00:30:00,399
and underneath it uh i have a hero.yaml

00:29:59,039 --> 00:30:02,240
folks read this light doesn't need to be

00:30:00,399 --> 00:30:03,760
larger i can't make it brighter

00:30:02,240 --> 00:30:05,760
unfortunately

00:30:03,760 --> 00:30:07,279
so what's going on here as i'm telling

00:30:05,760 --> 00:30:10,320
it that the back end is yaml

00:30:07,279 --> 00:30:13,520
that's our default back end uh hira

00:30:10,320 --> 00:30:16,320
is pluggable so you could also have

00:30:13,520 --> 00:30:16,880
json my sequel whatever else you wanted

00:30:16,320 --> 00:30:20,000
to

00:30:16,880 --> 00:30:22,159
write uh the the back ends for these i

00:30:20,000 --> 00:30:25,760
think are like 50 lines of code or so

00:30:22,159 --> 00:30:27,360
in ruby so it would be

00:30:25,760 --> 00:30:29,039
not so hard to write your own if you

00:30:27,360 --> 00:30:31,679
wanted to i think someone also wrote one

00:30:29,039 --> 00:30:32,720
for like gpg and they'll do gpg

00:30:31,679 --> 00:30:36,399
encryption

00:30:32,720 --> 00:30:38,320
uh for their like ammo files

00:30:36,399 --> 00:30:40,720
so here's the interesting place i'm

00:30:38,320 --> 00:30:43,760
defining my hierarchy

00:30:40,720 --> 00:30:45,520
here it is hierarchical and so

00:30:43,760 --> 00:30:46,880
what it's doing is it's going to look in

00:30:45,520 --> 00:30:48,640
these different places

00:30:46,880 --> 00:30:50,559
for that key that i looked up so the key

00:30:48,640 --> 00:30:51,520
i was looking up was test

00:30:50,559 --> 00:30:53,600
and it's going to look in these

00:30:51,520 --> 00:30:56,320
different spots and just like

00:30:53,600 --> 00:30:56,799
a path statement in unix it's going to

00:30:56,320 --> 00:31:00,159
stop

00:30:56,799 --> 00:31:02,480
on that first match so here

00:31:00,159 --> 00:31:03,519
each of these bits in the percent are

00:31:02,480 --> 00:31:05,760
variables

00:31:03,519 --> 00:31:07,440
and so these are all facts and so i have

00:31:05,760 --> 00:31:10,880
a custom fact called dc

00:31:07,440 --> 00:31:11,919
for data center a custom fact env for

00:31:10,880 --> 00:31:15,600
what environment

00:31:11,919 --> 00:31:17,279
i'm in my example here is dev qa and

00:31:15,600 --> 00:31:19,279
prod

00:31:17,279 --> 00:31:20,559
so here i could actually do one offs per

00:31:19,279 --> 00:31:23,919
individual nodes

00:31:20,559 --> 00:31:26,080
so i've got fqdn fqdn uh

00:31:23,919 --> 00:31:27,120
percent fqdn and so that would actually

00:31:26,080 --> 00:31:30,480
look up

00:31:27,120 --> 00:31:31,120
in that system's uh fully qualified

00:31:30,480 --> 00:31:33,679
domain

00:31:31,120 --> 00:31:36,559
dot yaml and look for a value so i could

00:31:33,679 --> 00:31:39,600
put values based on that one system

00:31:36,559 --> 00:31:41,919
here i could say if you're in uh given

00:31:39,600 --> 00:31:42,799
a like data center and a given

00:31:41,919 --> 00:31:46,720
environment

00:31:42,799 --> 00:31:48,320
i could load up data from there so maybe

00:31:46,720 --> 00:31:49,440
when you're in this data center and

00:31:48,320 --> 00:31:50,640
you're in this environment you have

00:31:49,440 --> 00:31:52,880
different data

00:31:50,640 --> 00:31:54,159
i can just do like then i just look at

00:31:52,880 --> 00:31:56,320
just the environment

00:31:54,159 --> 00:31:57,679
so like maybe i have things that just

00:31:56,320 --> 00:32:02,720
change per environment

00:31:57,679 --> 00:32:02,720
like uh my sql passwords is a great one

00:32:03,120 --> 00:32:06,240
then maybe i just have things that are

00:32:04,480 --> 00:32:07,519
just common to the data center

00:32:06,240 --> 00:32:09,840
themselves so

00:32:07,519 --> 00:32:11,919
if you're ever in the sca like data

00:32:09,840 --> 00:32:13,919
center you use these sets of servers

00:32:11,919 --> 00:32:15,519
if you're in clt you use these sets of

00:32:13,919 --> 00:32:18,159
servers

00:32:15,519 --> 00:32:19,120
and then i have just a common file that

00:32:18,159 --> 00:32:20,640
i look for

00:32:19,120 --> 00:32:22,480
and so that's that's the last one so

00:32:20,640 --> 00:32:29,840
this is going to be most

00:32:22,480 --> 00:32:29,840
most specific to least specific

00:32:31,360 --> 00:32:34,880
so in each of these

00:32:36,559 --> 00:32:42,399
they're just like yaml and so

00:32:39,760 --> 00:32:45,760
here i have the key and then i have the

00:32:42,399 --> 00:32:45,760
value after the key

00:32:46,799 --> 00:32:54,840
so i also have fqdn test the tld

00:32:50,640 --> 00:32:57,840
underneath my data centers i then have

00:32:54,840 --> 00:32:57,840
environments

00:33:02,159 --> 00:33:06,080
right and then i have a common class as

00:33:04,960 --> 00:33:08,880
well

00:33:06,080 --> 00:33:09,440
i recommend sticking a key like test at

00:33:08,880 --> 00:33:12,640
the top

00:33:09,440 --> 00:33:14,559
of all of your gamble files that you use

00:33:12,640 --> 00:33:15,760
because then you can use it to quickly

00:33:14,559 --> 00:33:17,440
look things up

00:33:15,760 --> 00:33:19,200
so i'll show how to do that on the

00:33:17,440 --> 00:33:21,760
command line

00:33:19,200 --> 00:33:23,279
and then i think that'll demonstrate it

00:33:21,760 --> 00:33:27,679
in the code

00:33:23,279 --> 00:33:30,720
so here i can say hira look up test

00:33:27,679 --> 00:33:33,840
let me show this to you first

00:33:30,720 --> 00:33:35,360
so if i do hira look up test

00:33:33,840 --> 00:33:36,799
it's going to read it from common

00:33:35,360 --> 00:33:38,559
because it doesn't know about my data

00:33:36,799 --> 00:33:40,960
center or my environment or my fully

00:33:38,559 --> 00:33:44,320
qualified domain name

00:33:40,960 --> 00:33:44,320
now if i tell it test

00:33:45,279 --> 00:33:51,360
and vehicles prod

00:33:49,039 --> 00:33:52,559
then we see it returns prod because it's

00:33:51,360 --> 00:33:56,159
it's reading

00:33:52,559 --> 00:34:00,480
from this prod dot like yaml and we see

00:33:56,159 --> 00:34:00,480
test is is prod right

00:34:04,399 --> 00:34:10,159
so i can do like data center is seattle

00:34:07,600 --> 00:34:10,720
and we see it's reading from that yaml

00:34:10,159 --> 00:34:13,200
file

00:34:10,720 --> 00:34:13,760
right i could do what would happen if i

00:34:13,200 --> 00:34:16,639
put my

00:34:13,760 --> 00:34:16,639
fqdn here

00:34:16,879 --> 00:34:24,079
what's that

00:34:20,159 --> 00:34:27,679
we see it comes from the fqdn yeah

00:34:24,079 --> 00:34:29,599
or if i put maybe just my data center

00:34:27,679 --> 00:34:31,919
it's reading just from that file and

00:34:29,599 --> 00:34:34,800
since we're hierarchical

00:34:31,919 --> 00:34:35,119
um we're just using the file system to

00:34:34,800 --> 00:34:37,679
store

00:34:35,119 --> 00:34:38,240
to store these uh for like this one for

00:34:37,679 --> 00:34:40,879
the

00:34:38,240 --> 00:34:42,560
by gamble back end you could use file

00:34:40,879 --> 00:34:45,200
system permissions

00:34:42,560 --> 00:34:46,480
to change who has access to what uh so

00:34:45,200 --> 00:34:49,119
you could put this on like an

00:34:46,480 --> 00:34:50,800
nfs share or something export it out

00:34:49,119 --> 00:34:51,440
change the permissions so that maybe

00:34:50,800 --> 00:34:55,919
only

00:34:51,440 --> 00:34:57,680
developers can edit the dev.yamls

00:34:55,919 --> 00:35:00,560
that way they could do things like set

00:34:57,680 --> 00:35:02,560
you know application passwords etc

00:35:00,560 --> 00:35:03,680
and it would be that what like they

00:35:02,560 --> 00:35:05,920
could see

00:35:03,680 --> 00:35:06,880
but then for other environments you

00:35:05,920 --> 00:35:16,400
could set

00:35:06,880 --> 00:35:18,720
things like passwords etc yeah to cover

00:35:16,400 --> 00:35:18,720
a what

00:35:22,320 --> 00:35:25,680
sure so you have some data you could

00:35:24,320 --> 00:35:28,839
store that in

00:35:25,680 --> 00:35:30,079
these like ammo files and then look them

00:35:28,839 --> 00:35:34,000
up

00:35:30,079 --> 00:35:36,640
i i think yaml will support binary

00:35:34,000 --> 00:35:38,560
uh another way to do it might just be to

00:35:36,640 --> 00:35:41,200
have here be telling it which

00:35:38,560 --> 00:35:42,240
blob to pick off the disk and use it

00:35:41,200 --> 00:35:46,160
with a source

00:35:42,240 --> 00:35:48,720
uh attribute for like a final resource

00:35:46,160 --> 00:35:49,440
all right so uh other things that you

00:35:48,720 --> 00:35:53,280
can do with this

00:35:49,440 --> 00:35:55,040
uh empower folks to make changes in the

00:35:53,280 --> 00:35:58,000
environment so

00:35:55,040 --> 00:35:59,280
let's say you're running a website and

00:35:58,000 --> 00:36:02,320
you want to

00:35:59,280 --> 00:36:03,119
allow developers to tune to tune things

00:36:02,320 --> 00:36:06,000
or like change

00:36:03,119 --> 00:36:06,720
stuff so you could have templates that

00:36:06,000 --> 00:36:08,320
use

00:36:06,720 --> 00:36:09,760
these variables that are getting pulled

00:36:08,320 --> 00:36:12,480
from by kira

00:36:09,760 --> 00:36:13,839
and let and let some teams you know work

00:36:12,480 --> 00:36:16,240
on like tuning those

00:36:13,839 --> 00:36:18,000
and so they might not have to know how

00:36:16,240 --> 00:36:20,160
the code actually works

00:36:18,000 --> 00:36:22,079
but they could go and tune that data so

00:36:20,160 --> 00:36:24,240
you really decoupled

00:36:22,079 --> 00:36:25,760
data from the code and now you have this

00:36:24,240 --> 00:36:28,800
data driven

00:36:25,760 --> 00:36:30,240
model of your environment and now people

00:36:28,800 --> 00:36:32,160
can just start changing data

00:36:30,240 --> 00:36:33,760
and they don't necessarily have to know

00:36:32,160 --> 00:36:37,359
what the code is

00:36:33,760 --> 00:36:37,359
which is great i'll show an example of

00:36:38,839 --> 00:36:42,720
that

00:36:40,480 --> 00:36:42,720
ah

00:36:46,240 --> 00:36:54,240
so here i have a dns client

00:36:50,000 --> 00:36:56,240
so it just manages uh resolve confirm

00:36:54,240 --> 00:36:57,680
and so i have a class and it's going to

00:36:56,240 --> 00:37:00,640
include dns client

00:36:57,680 --> 00:37:00,640
colon colon data

00:37:00,800 --> 00:37:05,280
and notice here i don't have any data i

00:37:04,320 --> 00:37:08,560
don't even have

00:37:05,280 --> 00:37:09,680
the path so maybe it's yours isn't etsy

00:37:08,560 --> 00:37:11,839
resolve comp

00:37:09,680 --> 00:37:13,680
uh you can put it somewhere else uh

00:37:11,839 --> 00:37:16,800
owner group and mode

00:37:13,680 --> 00:37:17,200
probably root route oh six four four but

00:37:16,800 --> 00:37:19,520
that

00:37:17,200 --> 00:37:21,119
that and of itself is data uh maybe

00:37:19,520 --> 00:37:23,520
somebody else wants theirs to be

00:37:21,119 --> 00:37:24,720
like different so in this way i've

00:37:23,520 --> 00:37:28,240
written a module

00:37:24,720 --> 00:37:29,280
that's truly portable i can hand you

00:37:28,240 --> 00:37:31,520
like this module

00:37:29,280 --> 00:37:33,040
and you can never touch the code but

00:37:31,520 --> 00:37:36,079
still have access to

00:37:33,040 --> 00:37:40,160
override any of these values and so

00:37:36,079 --> 00:37:40,160
let's look at the data class

00:37:42,320 --> 00:37:45,440
let's see what this looks like

00:37:47,920 --> 00:37:54,800
yeah so here i have name servers

00:37:51,760 --> 00:37:56,800
equal and i'm doing a hero lookup

00:37:54,800 --> 00:38:00,000
uh let me just let me turn off the

00:37:56,800 --> 00:38:00,000
syntax and see if that helps

00:38:01,280 --> 00:38:06,000
yeah so here i've got dollar sign name

00:38:04,400 --> 00:38:08,560
servers equihera

00:38:06,000 --> 00:38:10,000
and i'm doing a lookup on this key and

00:38:08,560 --> 00:38:11,839
so if i've specified what my name

00:38:10,000 --> 00:38:13,839
servers are it'll use that

00:38:11,839 --> 00:38:15,599
and then i've put in saying defaults and

00:38:13,839 --> 00:38:16,960
so if you don't specify

00:38:15,599 --> 00:38:18,880
anything i'm just going to use a few

00:38:16,960 --> 00:38:21,920
name servers from google

00:38:18,880 --> 00:38:26,079
that they make publicly accessible

00:38:21,920 --> 00:38:29,760
same thing with my owner group and mode

00:38:26,079 --> 00:38:31,119
for the etsy resolve conf i put in a key

00:38:29,760 --> 00:38:34,079
so if you wanted to overwrite it you

00:38:31,119 --> 00:38:37,119
could and then the second

00:38:34,079 --> 00:38:39,359
perimeter is just a

00:38:37,119 --> 00:38:41,839
default so you know root root of six

00:38:39,359 --> 00:38:41,839
four four

00:38:42,160 --> 00:38:46,560
so something else that i'm doing here is

00:38:44,839 --> 00:38:50,079
setting

00:38:46,560 --> 00:38:52,960
certain options to unset by default

00:38:50,079 --> 00:38:54,720
and so there's multiple ways to check if

00:38:52,960 --> 00:38:56,800
a variable is set

00:38:54,720 --> 00:38:57,839
which can get kind of confusing and look

00:38:56,800 --> 00:39:00,320
really crazy

00:38:57,839 --> 00:39:02,240
in your uh and your template files so

00:39:00,320 --> 00:39:05,599
what i do is i just set it to a string

00:39:02,240 --> 00:39:15,839
uppercase unset as a design pattern

00:39:05,599 --> 00:39:15,839
let's take a look at our template file

00:39:18,400 --> 00:39:29,839
so here i have a lot of syntax checking

00:39:34,800 --> 00:39:39,280
right so here i have a template and so

00:39:38,000 --> 00:39:42,480
i'm saying if search

00:39:39,280 --> 00:39:44,960
path is not unset then i'm going to put

00:39:42,480 --> 00:39:47,359
search and the search path like variable

00:39:44,960 --> 00:39:50,480
same thing with options

00:39:47,359 --> 00:39:52,800
if it's not on set put in options

00:39:50,480 --> 00:39:54,240
if you haven't supplied anything you

00:39:52,800 --> 00:39:57,520
know those lines just won't

00:39:54,240 --> 00:40:00,079
show up in your resolve conf here

00:39:57,520 --> 00:40:01,200
i have code that's just iterating over

00:40:00,079 --> 00:40:02,880
an array

00:40:01,200 --> 00:40:04,319
and so it's just doing a for loop of the

00:40:02,880 --> 00:40:07,680
array and printing out

00:40:04,319 --> 00:40:10,720
name server and the elements there so

00:40:07,680 --> 00:40:14,000
we can see this in action

00:40:10,720 --> 00:40:17,040
um so

00:40:14,000 --> 00:40:18,400
i already have this uh associated with

00:40:17,040 --> 00:40:22,079
my code

00:40:18,400 --> 00:40:23,440
i'll show that in the uh

00:40:22,079 --> 00:40:25,520
maybe i'll show that here in the

00:40:23,440 --> 00:40:28,319
dashboard

00:40:25,520 --> 00:40:28,319
oh crap

00:40:31,839 --> 00:40:43,040
so here i have a default group

00:40:39,200 --> 00:40:46,319
and i've associated the ntp and dns

00:40:43,040 --> 00:40:48,319
client uh are like like classes

00:40:46,319 --> 00:40:50,800
so just to show those are associated

00:40:48,319 --> 00:40:53,440
with all my nodes

00:40:50,800 --> 00:40:54,160
so i get the defaults from uh from the

00:40:53,440 --> 00:40:55,520
module right

00:40:54,160 --> 00:40:57,359
so you can just download this module

00:40:55,520 --> 00:40:58,800
like use it you never made any changes

00:40:57,359 --> 00:41:02,000
and it's useful to

00:40:58,800 --> 00:41:03,359
to you because it works i could also say

00:41:02,000 --> 00:41:06,000
well

00:41:03,359 --> 00:41:06,000
if i'm in

00:41:06,480 --> 00:41:09,200
the seattle

00:41:10,240 --> 00:41:17,200
data center i want to

00:41:14,800 --> 00:41:18,480
do something different so if we call

00:41:17,200 --> 00:41:21,520
them dns

00:41:18,480 --> 00:41:23,040
client name servers

00:41:21,520 --> 00:41:24,720
and then here's how you would specify an

00:41:23,040 --> 00:41:28,400
array in yaml

00:41:24,720 --> 00:41:28,400
just with the dashes

00:41:31,119 --> 00:41:34,720
so i'll use some other like name servers

00:41:33,200 --> 00:41:38,800
out there

00:41:34,720 --> 00:41:40,480
and so that'll just change systems that

00:41:38,800 --> 00:41:43,520
are in seattle

00:41:40,480 --> 00:41:46,240
so let's look and see what my systems

00:41:43,520 --> 00:41:49,359
are so i've got factory dash p

00:41:46,240 --> 00:41:52,079
data center

00:41:49,359 --> 00:41:52,079
here in charlotte

00:41:54,400 --> 00:42:02,000
charlotte and my centaur six box

00:41:58,000 --> 00:42:04,480
i think is in seattle

00:42:02,000 --> 00:42:06,400
right so what we would expect is that

00:42:04,480 --> 00:42:10,240
only this box would change the

00:42:06,400 --> 00:42:10,240
resolve conf so

00:42:10,720 --> 00:42:14,319
we'll just go ahead and kick off some

00:42:14,839 --> 00:42:17,839
runs

00:42:22,800 --> 00:42:26,560
we've all seen this a million times

00:42:28,880 --> 00:42:45,680
i'm running all these on my laptop here

00:42:30,640 --> 00:42:48,319
so it's a little slow

00:42:45,680 --> 00:42:51,680
so that's dhcp messing with me here i

00:42:48,319 --> 00:42:51,680
like fighting it out with puppet

00:42:52,800 --> 00:42:59,200
so here we see this box in is in

00:42:56,079 --> 00:43:00,880
charlotte so it gets the defaults

00:42:59,200 --> 00:43:03,520
this box is in charlotte it gets the

00:43:00,880 --> 00:43:03,520
defaults

00:43:03,680 --> 00:43:07,040
this one already had puppet running

00:43:09,040 --> 00:43:13,119
but we would expect since this one is in

00:43:11,040 --> 00:43:14,960
seattle that it's going to get

00:43:13,119 --> 00:43:19,119
the new name servers that we specified

00:43:14,960 --> 00:43:19,119
the 4.2.2.1.2

00:43:22,160 --> 00:43:25,440
yeah so you don't have to specify

00:43:23,520 --> 00:43:26,079
default so you might make it to where

00:43:25,440 --> 00:43:28,400
somebody really

00:43:26,079 --> 00:43:29,280
has to fill in that data to use your

00:43:28,400 --> 00:43:32,079
module

00:43:29,280 --> 00:43:33,839
uh and that's okay but you you've at

00:43:32,079 --> 00:43:36,720
least built a module now

00:43:33,839 --> 00:43:37,599
that isn't specific to you and really is

00:43:36,720 --> 00:43:40,640
portable

00:43:37,599 --> 00:43:44,000
to me that's that's that's the litmus of

00:43:40,640 --> 00:43:46,079
is my module a good module

00:43:44,000 --> 00:43:47,200
is could somebody else drop it in place

00:43:46,079 --> 00:43:50,960
and use it

00:43:47,200 --> 00:43:54,160
as is and here we see

00:43:50,960 --> 00:43:54,720
it's 4.2.2.2 so imagine like using this

00:43:54,160 --> 00:43:57,760
for you know

00:43:54,720 --> 00:43:58,800
passwords uh like root password etc you

00:43:57,760 --> 00:44:02,000
could use this

00:43:58,800 --> 00:44:03,280
for uh you know your configs i mean

00:44:02,000 --> 00:44:04,720
really i try and use this for every

00:44:03,280 --> 00:44:06,800
piece of the data

00:44:04,720 --> 00:44:07,920
itself like all my attributes i want to

00:44:06,800 --> 00:44:12,319
be

00:44:07,920 --> 00:44:12,319
overridable and so i use hira

00:44:15,280 --> 00:44:23,839
i've got another one another module show

00:44:17,839 --> 00:44:23,839
which is ntp

00:44:30,400 --> 00:44:35,680
so here i'm saying you can set things

00:44:34,000 --> 00:44:37,520
like package latest

00:44:35,680 --> 00:44:39,119
and so i've got logic there so by

00:44:37,520 --> 00:44:41,760
default it'll just say

00:44:39,119 --> 00:44:43,119
ensure present but if i wanted to turn

00:44:41,760 --> 00:44:47,200
on this like latest

00:44:43,119 --> 00:44:47,200
i can make it do ensure like latest

00:44:48,400 --> 00:44:51,760
so here i've got the same defaults here

00:44:50,240 --> 00:44:53,680
i've got some template

00:44:51,760 --> 00:44:55,119
like data so by default with my ntp

00:44:53,680 --> 00:44:59,280
module you'll get

00:44:55,119 --> 00:45:02,160
you know one and two dot us.pull.mtp.org

00:44:59,280 --> 00:45:04,960
you can optionally set server options

00:45:02,160 --> 00:45:06,720
orphan mode stratum fudge stratum

00:45:04,960 --> 00:45:08,800
and there's a ton of other ntp options

00:45:06,720 --> 00:45:10,720
that just aren't in here yet

00:45:08,800 --> 00:45:13,280
this one's a little more in depth in

00:45:10,720 --> 00:45:16,800
that i have some code here that's doing

00:45:13,280 --> 00:45:20,240
conditional logic to set uh

00:45:16,800 --> 00:45:21,839
some same defaults and so here

00:45:20,240 --> 00:45:24,160
we know if you're in a debian system

00:45:21,839 --> 00:45:26,960
it's called the services ntp

00:45:24,160 --> 00:45:29,920
whereas a red hat it's ntpd and so i can

00:45:26,960 --> 00:45:33,440
set these sort of same defaults

00:45:29,920 --> 00:45:35,359
again there's my default fail

00:45:33,440 --> 00:45:38,800
so now i have the same default i'm

00:45:35,359 --> 00:45:41,839
saying the package name is hira

00:45:38,800 --> 00:45:43,680
and i'm looking it up or i'm using that

00:45:41,839 --> 00:45:46,319
same default that i took

00:45:43,680 --> 00:45:50,079
based on my operating system right so

00:45:46,319 --> 00:45:50,079
i'm able to abstract those things

00:45:58,839 --> 00:46:01,839
out

00:46:09,520 --> 00:46:13,839
so so here it would be on your puppet

00:46:12,440 --> 00:46:15,920
master

00:46:13,839 --> 00:46:18,000
and then you would need to take

00:46:15,920 --> 00:46:20,000
appropriate measures to you know lock

00:46:18,000 --> 00:46:29,839
down file system level security

00:46:20,000 --> 00:46:29,839
who has access et cetera

00:46:32,960 --> 00:46:36,079
yes you could you could you could

00:46:34,400 --> 00:46:38,880
revision it if you wanted to

00:46:36,079 --> 00:46:40,880
uh and so that could be in its own repo

00:46:38,880 --> 00:46:42,800
depending on how you want to like set it

00:46:40,880 --> 00:46:45,040
up

00:46:42,800 --> 00:46:46,480
yeah yeah you might even look at using

00:46:45,040 --> 00:46:48,480
something like svn that's not

00:46:46,480 --> 00:46:52,240
distributed so that you can do

00:46:48,480 --> 00:46:52,240
access control things like that

00:46:53,200 --> 00:46:57,440
so here i'm doing that same pattern that

00:46:55,119 --> 00:46:58,240
we saw in the resolver so i'm doing a

00:46:57,440 --> 00:47:01,200
for loop

00:46:58,240 --> 00:47:01,680
so server servers dot each do like

00:47:01,200 --> 00:47:03,359
server

00:47:01,680 --> 00:47:05,520
and so this is going to put my time

00:47:03,359 --> 00:47:07,040
servers and then for each line i also

00:47:05,520 --> 00:47:09,839
have conditional logic

00:47:07,040 --> 00:47:11,520
so if server options is not on set then

00:47:09,839 --> 00:47:13,920
i put in the server options

00:47:11,520 --> 00:47:14,560
so by default it will just say like uh

00:47:13,920 --> 00:47:17,839
server

00:47:14,560 --> 00:47:19,599
you know odot pool.ntp.org

00:47:17,839 --> 00:47:22,400
but if i had set server options it would

00:47:19,599 --> 00:47:22,400
stick those in

00:47:22,839 --> 00:47:27,280
etc

00:47:25,359 --> 00:47:28,800
does anyone see where they could use

00:47:27,280 --> 00:47:32,160
here or here might be

00:47:28,800 --> 00:47:33,359
like valuable what are some some spots

00:47:32,160 --> 00:47:38,079
where people are thinking

00:47:33,359 --> 00:47:42,079
hey i could use here to solve a problem

00:47:38,079 --> 00:47:44,559
no one it's the time for coffee and beer

00:47:42,079 --> 00:47:44,559
like what's

00:47:50,839 --> 00:47:53,839
this

00:47:54,960 --> 00:47:58,800
so if everything's one off and different

00:47:57,040 --> 00:48:01,200
i've only have two of those

00:47:58,800 --> 00:48:02,559
i have it it's a little hard to believe

00:48:01,200 --> 00:48:04,839
but it's that's definitely not

00:48:02,559 --> 00:48:06,079
like not a good thing but that gets back

00:48:04,839 --> 00:48:08,240
to

00:48:06,079 --> 00:48:10,160
to like the hero like.yaml so you could

00:48:08,240 --> 00:48:11,920
put those in by the fqdn

00:48:10,160 --> 00:48:13,760
and this you can change too and the

00:48:11,920 --> 00:48:15,440
great thing about this is

00:48:13,760 --> 00:48:16,800
maybe you just care about the

00:48:15,440 --> 00:48:18,319
environment in common

00:48:16,800 --> 00:48:19,760
and then you move and now you have

00:48:18,319 --> 00:48:20,000
multiple like data centers you need to

00:48:19,760 --> 00:48:22,000
put

00:48:20,000 --> 00:48:24,079
like those in so that just means you

00:48:22,000 --> 00:48:26,079
change the file system

00:48:24,079 --> 00:48:28,160
like hierarchy so you made a couple

00:48:26,079 --> 00:48:30,880
directories you copied some data

00:48:28,160 --> 00:48:31,280
around so it makes it really easy to

00:48:30,880 --> 00:48:33,599
change

00:48:31,280 --> 00:48:35,280
what this hierarchy looks like people

00:48:33,599 --> 00:48:37,520
also like use this for um

00:48:35,280 --> 00:48:39,280
like if you're managing multiple sites

00:48:37,520 --> 00:48:39,839
you might have some custom facts for

00:48:39,280 --> 00:48:41,440
that

00:48:39,839 --> 00:48:43,680
or maybe you're using puppet to manage

00:48:41,440 --> 00:48:45,520
multiple customers and so you might have

00:48:43,680 --> 00:48:47,440
this based on like customer

00:48:45,520 --> 00:48:48,720
just like something like that so it

00:48:47,440 --> 00:48:51,839
makes it really easy to

00:48:48,720 --> 00:48:51,839
modify and change up

00:49:00,839 --> 00:49:03,839
cool

00:49:02,559 --> 00:49:05,599
does anyone know how long we have in

00:49:03,839 --> 00:49:09,359
here

00:49:05,599 --> 00:49:10,079
okay uh so in 10 minutes uh i've got m

00:49:09,359 --> 00:49:11,839
collective

00:49:10,079 --> 00:49:13,359
that i can show or we can probably spend

00:49:11,839 --> 00:49:14,319
some more time talking about change

00:49:13,359 --> 00:49:16,640
management

00:49:14,319 --> 00:49:18,000
and version control do you guys want to

00:49:16,640 --> 00:49:21,040
talk about version control do you guys

00:49:18,000 --> 00:49:21,040
want to talk about them collectives

00:49:23,440 --> 00:49:29,359
okay so m collective itself uh

00:49:26,880 --> 00:49:30,960
it works with a message boss we use

00:49:29,359 --> 00:49:34,960
activemq

00:49:30,960 --> 00:49:38,480
and it gives us the ability to trigger

00:49:34,960 --> 00:49:40,160
actions on a subset of our systems or

00:49:38,480 --> 00:49:42,960
all the systems

00:49:40,160 --> 00:49:44,079
this is really great so that you can

00:49:42,960 --> 00:49:45,200
automate what's going on

00:49:44,079 --> 00:49:47,920
so that you're not going to make those

00:49:45,200 --> 00:49:50,400
errors at 3am uh for instance

00:49:47,920 --> 00:49:52,240
ari the fellow that wrote m collective

00:49:50,400 --> 00:49:54,000
he was managing a lot of mail servers so

00:49:52,240 --> 00:49:56,720
he has tasks that would

00:49:54,000 --> 00:49:58,240
like flush mail cues etc and so he could

00:49:56,720 --> 00:49:59,920
do that on

00:49:58,240 --> 00:50:01,280
all the systems or maybe just the

00:49:59,920 --> 00:50:03,119
systems in africa

00:50:01,280 --> 00:50:04,960
or maybe all the systems that are in the

00:50:03,119 --> 00:50:13,839
prod environment

00:50:04,960 --> 00:50:13,839
i'll show how that works

00:50:15,280 --> 00:50:18,960
so we can do things like mco ping and so

00:50:18,319 --> 00:50:22,160
it's going to

00:50:18,960 --> 00:50:27,839
tell us all the systems

00:50:22,160 --> 00:50:27,839
out there

00:50:29,359 --> 00:50:33,680
so now i could say well i can start to

00:50:31,680 --> 00:50:35,599
do filters and i could say well i just

00:50:33,680 --> 00:50:37,920
want to return systems

00:50:35,599 --> 00:50:40,160
that are in charlotte and so we can

00:50:37,920 --> 00:50:41,920
start start to take actions on those

00:50:40,160 --> 00:50:47,680
systems

00:50:41,920 --> 00:50:47,680
let me show that through our console

00:50:52,839 --> 00:50:55,839
awesome

00:51:01,200 --> 00:51:05,440
here we go so it's finding these nodes

00:51:03,520 --> 00:51:08,240
in real time here

00:51:05,440 --> 00:51:09,359
which is real time is not awesome on my

00:51:08,240 --> 00:51:11,599
laptop

00:51:09,359 --> 00:51:13,280
and so here's like things i can do is i

00:51:11,599 --> 00:51:16,240
can manage resources from here

00:51:13,280 --> 00:51:18,720
so i can look and see differences on my

00:51:16,240 --> 00:51:18,720
systems

00:51:20,240 --> 00:51:24,960
so let's check out the root user across

00:51:23,599 --> 00:51:26,800
all of here

00:51:24,960 --> 00:51:29,280
so here i see there's some differences

00:51:26,800 --> 00:51:31,440
on some of my systems

00:51:29,280 --> 00:51:34,000
uh but it allows me to go in there and

00:51:31,440 --> 00:51:35,280
check those out

00:51:34,000 --> 00:51:37,839
other things that you can do with m

00:51:35,280 --> 00:51:40,000
collective is to control puppet

00:51:37,839 --> 00:51:41,040
so i could disable the puppet agent on

00:51:40,000 --> 00:51:42,240
all my systems

00:51:41,040 --> 00:51:44,000
which is great if you're about to do a

00:51:42,240 --> 00:51:44,319
maintenance event i mean if you're about

00:51:44,000 --> 00:51:46,319
to

00:51:44,319 --> 00:51:48,000
stop my sql so you can do something to

00:51:46,319 --> 00:51:50,720
the data set you really don't want

00:51:48,000 --> 00:51:51,920
puppet just starting it back up right uh

00:51:50,720 --> 00:51:54,319
so here i could do like

00:51:51,920 --> 00:51:55,280
like disable go do my maintenance event

00:51:54,319 --> 00:51:59,520
come back

00:51:55,280 --> 00:52:01,520
enable it like turn it back on um

00:51:59,520 --> 00:52:05,119
i can get last run like summary so i

00:52:01,520 --> 00:52:09,200
could see like what happened uh

00:52:05,119 --> 00:52:09,200
i can't actually see this window come on

00:52:13,760 --> 00:52:19,760
uh no and the reason for that is uh m

00:52:16,720 --> 00:52:22,880
collect is not meant to just

00:52:19,760 --> 00:52:26,800
run shell commands it's meant to take

00:52:22,880 --> 00:52:28,400
actions and get back specific data

00:52:26,800 --> 00:52:30,400
and so you're dealing with data and not

00:52:28,400 --> 00:52:34,240
free-form text

00:52:30,400 --> 00:52:36,800
also with m collective it

00:52:34,240 --> 00:52:37,359
it returns you back uh text to the

00:52:36,800 --> 00:52:40,000
output

00:52:37,359 --> 00:52:41,599
when something fails not when it works i

00:52:40,000 --> 00:52:44,559
mean imagine trying to run yum

00:52:41,599 --> 00:52:45,520
update across 10 different machines and

00:52:44,559 --> 00:52:47,760
getting all that

00:52:45,520 --> 00:52:49,680
output piped back to your terminal like

00:52:47,760 --> 00:52:53,200
how useful would that be to look at

00:52:49,680 --> 00:52:55,520
right so instead it's going to run yum

00:52:53,200 --> 00:52:56,720
update expect certain returns or certain

00:52:55,520 --> 00:52:58,720
like data back

00:52:56,720 --> 00:53:01,359
and then if it if it failed it would

00:52:58,720 --> 00:53:04,800
give you those

00:53:01,359 --> 00:53:05,680
like messages other things we could do

00:53:04,800 --> 00:53:09,760
is like run

00:53:05,680 --> 00:53:15,839
run once we could get the status

00:53:09,760 --> 00:53:15,839
of all the systems

00:53:16,160 --> 00:53:21,680
yeah here i can filter

00:53:19,680 --> 00:53:23,920
so i can filter based on a node name i

00:53:21,680 --> 00:53:25,680
can filter based on class so maybe i

00:53:23,920 --> 00:53:27,119
only want to mess with systems that are

00:53:25,680 --> 00:53:30,720
in development

00:53:27,119 --> 00:53:32,319
so let's filter and so

00:53:30,720 --> 00:53:34,319
now this should just show me just those

00:53:32,319 --> 00:53:37,839
systems so i've got just the p

00:53:34,319 --> 00:53:41,680
ubuntu or maybe i want to just operate

00:53:37,839 --> 00:53:41,680
on systems that are in charlotte

00:53:41,839 --> 00:53:46,079
so this really gives you this ability to

00:53:44,400 --> 00:53:49,200
manage your

00:53:46,079 --> 00:53:52,240
uh to orchestrate what you're doing on

00:53:49,200 --> 00:53:52,240
these different systems

00:53:52,880 --> 00:53:58,240
so i could do something like justin dev

00:53:55,520 --> 00:54:00,640
i want to or just in charlotte

00:53:58,240 --> 00:54:02,640
we have package tasks and so i talked

00:54:00,640 --> 00:54:03,200
about not having ensure latest in your

00:54:02,640 --> 00:54:05,040
code

00:54:03,200 --> 00:54:07,520
instead i would want an out of band

00:54:05,040 --> 00:54:09,359
process to say i want to update my

00:54:07,520 --> 00:54:11,280
systems at this point in time

00:54:09,359 --> 00:54:13,119
and so you could use m collective as

00:54:11,280 --> 00:54:15,520
that out-of-band process

00:54:13,119 --> 00:54:16,960
so i could say i want to run you know

00:54:15,520 --> 00:54:19,760
app update or

00:54:16,960 --> 00:54:21,359
young check updates etc another thing

00:54:19,760 --> 00:54:22,559
you might do is like yum clean

00:54:21,359 --> 00:54:24,400
when you've been changing your like

00:54:22,559 --> 00:54:29,200
repos around so i can trigger that

00:54:24,400 --> 00:54:29,200
on all my systems subsets etc

00:54:34,960 --> 00:54:40,160
yeah so you would write new agents

00:54:38,000 --> 00:54:41,359
that are written in ruby and you could

00:54:40,160 --> 00:54:43,920
define new agents

00:54:41,359 --> 00:54:43,920
that would

00:54:45,200 --> 00:54:48,640
like run these different commands

00:54:49,359 --> 00:54:52,000
once you define the agent they

00:54:50,559 --> 00:54:52,799
automatically populate into this

00:54:52,000 --> 00:54:55,440
interface

00:54:52,799 --> 00:54:56,400
nope nope this is uh this is the

00:54:55,440 --> 00:54:59,920
interface for the

00:54:56,400 --> 00:55:03,200
enterprise console so you can't expand

00:54:59,920 --> 00:55:05,119
these service tasks package tasks

00:55:03,200 --> 00:55:07,040
you could you just have to modify what's

00:55:05,119 --> 00:55:08,799
going on here or like modify the

00:55:07,040 --> 00:55:11,440
dashboard

00:55:08,799 --> 00:55:13,359
but they just don't pop up you can also

00:55:11,440 --> 00:55:17,359
do service administration here

00:55:13,359 --> 00:55:21,839
so i might get the status of a service

00:55:17,359 --> 00:55:21,839
on my systems

00:55:22,880 --> 00:55:28,400
or use this to run our stop and start

00:55:26,640 --> 00:55:30,240
like services so maybe about to do a

00:55:28,400 --> 00:55:31,040
maintenance event i want to disable

00:55:30,240 --> 00:55:34,000
puppet

00:55:31,040 --> 00:55:35,520
i want to go to systems that are you

00:55:34,000 --> 00:55:36,240
know in this environment and i want to

00:55:35,520 --> 00:55:38,079
stop

00:55:36,240 --> 00:55:39,599
these services then maybe i do like

00:55:38,079 --> 00:55:40,640
whatever maintenance then i can start

00:55:39,599 --> 00:55:42,880
things back up

00:55:40,640 --> 00:55:44,079
so it allows me to sort of manage that

00:55:42,880 --> 00:55:46,839
orchestration

00:55:44,079 --> 00:55:49,839
that you need to do when working on

00:55:46,839 --> 00:55:49,839
systems

00:55:50,000 --> 00:55:53,280
yep so i can i can remove them from here

00:55:52,480 --> 00:55:54,960
i can just

00:55:53,280 --> 00:56:03,839
click on them and say i you know i just

00:55:54,960 --> 00:56:03,839
want that one et cetera

00:56:11,760 --> 00:56:16,000
uh yeah so that we don't do that out of

00:56:14,720 --> 00:56:17,760
the box now

00:56:16,000 --> 00:56:19,119
but you could also just interact

00:56:17,760 --> 00:56:20,720
directly with m collective on the

00:56:19,119 --> 00:56:22,960
command line

00:56:20,720 --> 00:56:24,000
and then perhaps write filters around

00:56:22,960 --> 00:56:26,240
that so you could use like

00:56:24,000 --> 00:56:27,680
sudo for example and only give people

00:56:26,240 --> 00:56:31,839
access to run certain

00:56:27,680 --> 00:56:31,839
like commands via sudo

00:56:32,480 --> 00:56:35,760
so the last few minutes here

00:56:36,720 --> 00:56:39,760
i've only got a couple do uh folks want

00:56:38,880 --> 00:56:43,200
to go through the

00:56:39,760 --> 00:56:46,240
change management stuff quickly or

00:56:43,200 --> 00:56:46,240
do you guys want to do q a

00:56:46,960 --> 00:56:53,920
okay so here's the structure i use

00:56:50,799 --> 00:56:56,000
for a version control system this is

00:56:53,920 --> 00:56:59,280
given an svn view

00:56:56,000 --> 00:57:00,400
this could just as well be get here i

00:56:59,280 --> 00:57:03,200
have trunk

00:57:00,400 --> 00:57:05,920
for master and this is where my best

00:57:03,200 --> 00:57:07,680
working code is

00:57:05,920 --> 00:57:09,520
i don't actually ever make changes here

00:57:07,680 --> 00:57:11,680
i only make changes via merging

00:57:09,520 --> 00:57:13,440
but this is supposed to be best known

00:57:11,680 --> 00:57:15,760
working code

00:57:13,440 --> 00:57:17,520
i have tags here i'm using tags i'm

00:57:15,760 --> 00:57:20,720
doing the bind style serials

00:57:17,520 --> 00:57:23,119
again so i know what's going on the the

00:57:20,720 --> 00:57:25,599
tags here are just tags of trunk

00:57:23,119 --> 00:57:27,680
and so i'm saying at this point in time

00:57:25,599 --> 00:57:29,599
trunk was good

00:57:27,680 --> 00:57:30,799
tags are meant to be immutable they're

00:57:29,599 --> 00:57:33,760
not in subversion

00:57:30,799 --> 00:57:35,119
they're not really in git but that's

00:57:33,760 --> 00:57:37,119
what they're like meant to be you're not

00:57:35,119 --> 00:57:39,200
meant to change tags

00:57:37,119 --> 00:57:41,200
then the other directory is branches and

00:57:39,200 --> 00:57:44,240
so underneath like branches

00:57:41,200 --> 00:57:46,240
i have numbers and these numbers

00:57:44,240 --> 00:57:48,799
correspond to the ticket number for the

00:57:46,240 --> 00:57:48,799
request

00:57:50,160 --> 00:57:54,000
you might also have like an underscore

00:57:52,240 --> 00:57:55,680
and then some like short

00:57:54,000 --> 00:57:57,520
blurbs so you could remember what those

00:57:55,680 --> 00:57:59,200
are but the idea here is that you have

00:57:57,520 --> 00:58:02,319
topical branches

00:57:59,200 --> 00:58:03,520
uh and not long-lived branches so when i

00:58:02,319 --> 00:58:05,920
first started off with this

00:58:03,520 --> 00:58:07,359
i had a branch for each of the people

00:58:05,920 --> 00:58:08,799
that were working on the code

00:58:07,359 --> 00:58:10,640
so there's like a garrett branch and

00:58:08,799 --> 00:58:13,839
eric branch etc

00:58:10,640 --> 00:58:15,599
and that quickly got us into mergel

00:58:13,839 --> 00:58:17,200
you don't want to run these long live

00:58:15,599 --> 00:58:19,200
sort of nebulous branches you want very

00:58:17,200 --> 00:58:21,760
short topical ones and so here

00:58:19,200 --> 00:58:23,119
a change request might like come in we

00:58:21,760 --> 00:58:25,920
need to change

00:58:23,119 --> 00:58:27,040
my apache config to do x which might be

00:58:25,920 --> 00:58:28,240
a change request

00:58:27,040 --> 00:58:29,920
somebody like you would put in because

00:58:28,240 --> 00:58:31,280
you know what you're talking about

00:58:29,920 --> 00:58:32,559
somebody else might put in some change

00:58:31,280 --> 00:58:35,440
requests whether it's like

00:58:32,559 --> 00:58:36,720
the web servers are slow and so you know

00:58:35,440 --> 00:58:39,760
you would work with that

00:58:36,720 --> 00:58:41,359
you would know that you need to modify

00:58:39,760 --> 00:58:44,079
and tune your apache configs or

00:58:41,359 --> 00:58:46,559
something so you would do the work here

00:58:44,079 --> 00:58:47,520
uh test it and then you would want to

00:58:46,559 --> 00:58:50,960
merge it

00:58:47,520 --> 00:58:50,960
into trunk

00:58:51,040 --> 00:58:54,720
when you do this merge so you got the

00:58:53,040 --> 00:58:56,319
topic branch and you merge back into

00:58:54,720 --> 00:58:58,799
trunk

00:58:56,319 --> 00:58:59,520
there's two methodologies for this you

00:58:58,799 --> 00:59:02,559
might use

00:58:59,520 --> 00:59:04,160
one or the other or both and one is to

00:59:02,559 --> 00:59:06,720
enforce a bottleneck

00:59:04,160 --> 00:59:08,480
for quality so you say one person or

00:59:06,720 --> 00:59:11,200
this type of person

00:59:08,480 --> 00:59:12,559
needs to be the person that merges it in

00:59:11,200 --> 00:59:14,640
this is great

00:59:12,559 --> 00:59:16,160
if you're on a team where like one or a

00:59:14,640 --> 00:59:16,880
few people have a lot of puppet

00:59:16,160 --> 00:59:18,319
experience

00:59:16,880 --> 00:59:20,240
and then you have other folks that don't

00:59:18,319 --> 00:59:21,520
have the experience you don't want them

00:59:20,240 --> 00:59:22,880
just merging into trunk

00:59:21,520 --> 00:59:25,119
so you say somebody that knows what

00:59:22,880 --> 00:59:28,319
they're doing needs to do it

00:59:25,119 --> 00:59:30,400
and the other way is to use plus one

00:59:28,319 --> 00:59:32,559
and so the idea there is if you have

00:59:30,400 --> 00:59:34,079
people that have similar puppet

00:59:32,559 --> 00:59:36,000
knowledge

00:59:34,079 --> 00:59:37,680
having one person or small group be a

00:59:36,000 --> 00:59:38,960
bottleneck is just that's just a

00:59:37,680 --> 00:59:40,240
bottleneck at that point you're not

00:59:38,960 --> 00:59:42,079
getting extra quality

00:59:40,240 --> 00:59:44,559
so the idea there is that if you wrote

00:59:42,079 --> 00:59:45,760
the code somebody else has to merge it

00:59:44,559 --> 00:59:47,280
in

00:59:45,760 --> 00:59:49,599
then you get two sets of eyes on the

00:59:47,280 --> 00:59:53,040
code and you also get

00:59:49,599 --> 00:59:55,040
the perspective of uh it's not

00:59:53,040 --> 00:59:57,040
one person that broke the code and so it

00:59:55,040 --> 00:59:58,799
changes the team dynamic a bit so it's

00:59:57,040 --> 01:00:00,799
because multiple people have signed off

00:59:58,799 --> 01:00:03,040
on it

01:00:00,799 --> 01:00:04,400
once you get code into trunk i would

01:00:03,040 --> 01:00:08,079
have a separate

01:00:04,400 --> 01:00:10,720
testing environment where you have

01:00:08,079 --> 01:00:13,119
one representative system of every roll

01:00:10,720 --> 01:00:16,079
type that you have

01:00:13,119 --> 01:00:18,319
that way you can test on those i would

01:00:16,079 --> 01:00:21,760
provision those from scratch

01:00:18,319 --> 01:00:23,520
run the test like do that uh

01:00:21,760 --> 01:00:25,520
you want this to be different than maybe

01:00:23,520 --> 01:00:26,160
like a dev environment that developers

01:00:25,520 --> 01:00:28,000
actually use

01:00:26,160 --> 01:00:29,680
i'm totally like going over for a while

01:00:28,000 --> 01:00:31,359
and uh

01:00:29,680 --> 01:00:32,720
the reason for that is you don't want to

01:00:31,359 --> 01:00:34,160
break stuff that the developers are

01:00:32,720 --> 01:00:36,799
actively like working against or they're

01:00:34,160 --> 01:00:36,799
not going to like you

01:00:37,119 --> 01:00:40,559
so here i've got the pump a test

01:00:38,400 --> 01:00:41,520
environment everything's good and i take

01:00:40,559 --> 01:00:43,200
a tag

01:00:41,520 --> 01:00:45,119
of trunk because i know our master

01:00:43,200 --> 01:00:47,839
because i know at that point in time

01:00:45,119 --> 01:00:50,079
my code was good so i take a tag of it

01:00:47,839 --> 01:00:53,680
and then i'm going to associate that tag

01:00:50,079 --> 01:00:55,839
with my different environments yeah

01:00:53,680 --> 01:00:57,599
like any questions on this or questions

01:00:55,839 --> 01:01:11,839
in general

01:00:57,599 --> 01:01:11,839
as i'm running way over

01:01:17,440 --> 01:01:21,040
uh to appease your security folks you

01:01:19,680 --> 01:01:23,359
might want to have them

01:01:21,040 --> 01:01:24,559
in the loop of what's being changed and

01:01:23,359 --> 01:01:25,839
so

01:01:24,559 --> 01:01:28,799
since you can do things like just look

01:01:25,839 --> 01:01:30,480
at diffs as opposed to you know

01:01:28,799 --> 01:01:32,640
just trusting admins to do the right

01:01:30,480 --> 01:01:34,079
thing it does make it easier that way

01:01:32,640 --> 01:01:35,760
and that you can actually just show them

01:01:34,079 --> 01:01:36,559
dips and say look here's how the code's

01:01:35,760 --> 01:01:39,200
like changing

01:01:36,559 --> 01:01:40,880
we did this in dev what do you think

01:01:39,200 --> 01:01:45,040
about it and they can sign off and

01:01:40,880 --> 01:01:45,040
look at the code yeah

01:01:45,359 --> 01:01:50,640
cool all right i'm getting the hook to

01:01:47,839 --> 01:01:50,640
get off stage here

01:01:51,359 --> 01:01:54,480
again i'm doing the tutorial tomorrow if

01:01:53,359 --> 01:01:57,039
you want to come to that

01:01:54,480 --> 01:01:58,480
uh and if you have more questions for me

01:01:57,039 --> 01:02:02,559
i'm sure you'll be able to find me

01:01:58,480 --> 01:02:04,240
in in the bar after the next talks

01:02:02,559 --> 01:02:07,839
yep the slides will be available at

01:02:04,240 --> 01:02:07,839
garrett honeycutt.com

01:02:13,920 --> 01:02:19,359
plum stacks are everywhere this is the

01:02:16,720 --> 01:02:21,599
way to better utilize

01:02:19,359 --> 01:02:24,559
all your resources and it makes managing

01:02:21,599 --> 01:02:26,240
all your resources pretty easy

01:02:24,559 --> 01:02:28,799
all of the innovation is happening in

01:02:26,240 --> 01:02:28,799
open source

01:02:29,280 --> 01:02:34,240
the collaborative nature and of the

01:02:32,720 --> 01:02:36,160
you know of the community and and the

01:02:34,240 --> 01:02:37,920
speed at which these uh

01:02:36,160 --> 01:02:39,680
these you know these these deficiencies

01:02:37,920 --> 01:02:40,000
these bugs are getting discovered and

01:02:39,680 --> 01:02:42,720
then

01:02:40,000 --> 01:02:43,200
fixed is a thing that really shows the

01:02:42,720 --> 01:02:44,720
power

01:02:43,200 --> 01:02:46,319
of the you know of the open source

01:02:44,720 --> 01:02:48,000
community

01:02:46,319 --> 01:02:49,920
it is global and it's definitely because

01:02:48,000 --> 01:02:53,440
of the users

01:02:49,920 --> 01:02:54,000
community people are extremely friendly

01:02:53,440 --> 01:02:57,200
and

01:02:54,000 --> 01:02:57,200
always ready to help

01:02:58,319 --> 01:03:02,000
if you go on to rc any day you'll see

01:03:00,400 --> 01:03:03,680
these guys helping each other out

01:03:02,000 --> 01:03:05,440
and they're all doing it like in a

01:03:03,680 --> 01:03:07,359
selfless manner

01:03:05,440 --> 01:03:10,880
the product is transparent for everyone

01:03:07,359 --> 01:03:13,280
everyone can look at the code base

01:03:10,880 --> 01:03:14,480
everyone can see how cloud stack is is

01:03:13,280 --> 01:03:16,880
being built nothing

01:03:14,480 --> 01:03:19,119
nothing is proprietary everything is

01:03:16,880 --> 01:03:19,119
open

01:03:20,480 --> 01:03:26,799
in many ways it's absolutely vital to

01:03:22,319 --> 01:03:26,799
the to the ongoing health of cloud stack

01:03:27,280 --> 01:03:32,160
the most exciting event in recent memory

01:03:31,119 --> 01:03:35,200
for me

01:03:32,160 --> 01:03:37,839
was our first developer boot camp

01:03:35,200 --> 01:03:38,640
and our call gave people i think maybe

01:03:37,839 --> 01:03:41,680
two weeks

01:03:38,640 --> 01:03:42,240
notice to come attend i was expecting 25

01:03:41,680 --> 01:03:45,280
or

01:03:42,240 --> 01:03:49,839
30 people so we ended up with

01:03:45,280 --> 01:03:52,079
87 people and had to go get more chairs

01:03:49,839 --> 01:03:53,200
into the room twice everything within

01:03:52,079 --> 01:03:56,880
cloud computing

01:03:53,200 --> 01:03:58,799
is commodity and is open source and so i

01:03:56,880 --> 01:04:00,799
don't think that you will uh

01:03:58,799 --> 01:04:01,839
you'll see anywhere where open source is

01:04:00,799 --> 01:04:04,480
not pervasive

01:04:01,839 --> 01:04:05,119
in cloud computing and so i i think it's

01:04:04,480 --> 01:04:07,599
uh

01:04:05,119 --> 01:04:09,039
i think it's an assumption i think when

01:04:07,599 --> 01:04:10,839
you talk about cloud computing you're

01:04:09,039 --> 01:04:13,839
really talking about open source cloud

01:04:10,839 --> 01:04:13,839
computing

01:04:14,079 --> 01:04:18,160
cloud stack is a robust solution for

01:04:16,319 --> 01:04:20,240
large deployments

01:04:18,160 --> 01:04:22,160
you have dozens of data centers and

01:04:20,240 --> 01:04:23,599
thousands of servers in each data

01:04:22,160 --> 01:04:26,799
centers

01:04:23,599 --> 01:04:29,920
these hardware is going to fail and

01:04:26,799 --> 01:04:33,039
cloud stack is designed to handle

01:04:29,920 --> 01:04:35,119
number one that mass scale number two

01:04:33,039 --> 01:04:37,039
it's designed to handle the failure that

01:04:35,119 --> 01:04:39,599
inevitably happens

01:04:37,039 --> 01:04:42,480
in large deployments we started working

01:04:39,599 --> 01:04:45,839
on cloud stack over four years ago

01:04:42,480 --> 01:04:47,599
and you know it was the original set of

01:04:45,839 --> 01:04:49,680
people working on it

01:04:47,599 --> 01:04:53,039
had a background of delivering software

01:04:49,680 --> 01:04:55,839
to telcos and service providers

01:04:53,039 --> 01:04:57,680
lots of qa lots of users actually using

01:04:55,839 --> 01:05:01,359
it

01:04:57,680 --> 01:05:04,240
high availability is the key feature

01:05:01,359 --> 01:05:04,720
multiple hypervisor support different

01:05:04,240 --> 01:05:06,640
network

01:05:04,720 --> 01:05:09,599
models you can pick up whatever suits

01:05:06,640 --> 01:05:11,599
you better cloud step management server

01:05:09,599 --> 01:05:14,000
can be deployed in different physical

01:05:11,599 --> 01:05:15,920
machines

01:05:14,000 --> 01:05:17,280
it definitely has a huge footprint it's

01:05:15,920 --> 01:05:21,760
being deployed everywhere

01:05:17,280 --> 01:05:24,000
there's a major movie studio that

01:05:21,760 --> 01:05:25,200
they were using cloud stack they were

01:05:24,000 --> 01:05:27,920
using it to

01:05:25,200 --> 01:05:29,280
transcode video and i thought that was

01:05:27,920 --> 01:05:30,880
terribly fascinating

01:05:29,280 --> 01:05:32,400
what i found more fascinating is what

01:05:30,880 --> 01:05:35,200
they did during lunch

01:05:32,400 --> 01:05:36,000
where they would spin up uh you know 50

01:05:35,200 --> 01:05:37,839
or 60

01:05:36,000 --> 01:05:38,960
game servers then as soon as lunch was

01:05:37,839 --> 01:05:39,839
over they would destroy all the

01:05:38,960 --> 01:05:42,640
instances and

01:05:39,839 --> 01:05:42,880
go back to doing real work cloud stack

01:05:42,640 --> 01:05:45,280
is

01:05:42,880 --> 01:05:47,039
vast uh it touches so many different

01:05:45,280 --> 01:05:47,760
aspects and there's no one person that's

01:05:47,039 --> 01:05:49,680
kind of like

01:05:47,760 --> 01:05:51,119
a master of all those realms i think

01:05:49,680 --> 01:05:54,400
cloud stack

01:05:51,119 --> 01:05:56,640
as a project is going to be

01:05:54,400 --> 01:05:58,559
one of the leaders simply because it's

01:05:56,640 --> 01:06:02,400
some of the most featureful and

01:05:58,559 --> 01:06:05,760
and robust platforms

01:06:02,400 --> 01:06:09,200
out there

01:06:05,760 --> 01:06:09,200
i don't see any limits with the class

01:06:16,839 --> 01:06:19,839
tag

01:06:59,039 --> 01:07:03,119
when we created asterisk over a decade

01:07:00,960 --> 01:07:05,039
ago we could not have imagined

01:07:03,119 --> 01:07:06,240
that asterisk would not only become the

01:07:05,039 --> 01:07:08,000
most widely adopted

01:07:06,240 --> 01:07:09,839
open source communication software on

01:07:08,000 --> 01:07:11,680
the planet but that it would

01:07:09,839 --> 01:07:13,119
impact the entire industry in the way

01:07:11,680 --> 01:07:14,640
that it has today

01:07:13,119 --> 01:07:16,960
asterisk has found its way into more

01:07:14,640 --> 01:07:18,640
than 170 countries and virtually every

01:07:16,960 --> 01:07:20,799
fortune 1000 company

01:07:18,640 --> 01:07:22,079
the success of asterisks has enabled a

01:07:20,799 --> 01:07:23,440
transition of power

01:07:22,079 --> 01:07:25,760
from the hands of the traditional

01:07:23,440 --> 01:07:27,520
proprietary phone vendors into the hands

01:07:25,760 --> 01:07:28,720
of the users and administrators of phone

01:07:27,520 --> 01:07:30,559
systems

01:07:28,720 --> 01:07:32,079
using this power our customers have

01:07:30,559 --> 01:07:33,039
created all sorts of business changing

01:07:32,079 --> 01:07:34,640
applications

01:07:33,039 --> 01:07:36,319
from small office phone systems to

01:07:34,640 --> 01:07:38,400
mission critical call centers

01:07:36,319 --> 01:07:40,240
to international carrier networks in

01:07:38,400 --> 01:07:41,760
fact there's even an entire country

01:07:40,240 --> 01:07:44,160
whose communications infrastructure runs

01:07:41,760 --> 01:07:46,319
on asterisks digium has always been

01:07:44,160 --> 01:07:48,240
about creating technology that expands

01:07:46,319 --> 01:07:49,839
communications capabilities in ways we

01:07:48,240 --> 01:07:51,200
could never have imagined

01:07:49,839 --> 01:07:54,000
and that's part of what's game changing

01:07:51,200 --> 01:07:56,079
about digium today we're doing it again

01:07:54,000 --> 01:07:57,359
this time by introducing a new family of

01:07:56,079 --> 01:07:59,280
hdip phones

01:07:57,359 --> 01:08:00,480
that extends control of the user all the

01:07:59,280 --> 01:08:01,920
way to the desktop

01:08:00,480 --> 01:08:03,760
the launch of these new products

01:08:01,920 --> 01:08:05,119
represents the next phase in digium's

01:08:03,760 --> 01:08:07,280
history of innovation

01:08:05,119 --> 01:08:09,039
these are the first and only iphones

01:08:07,280 --> 01:08:10,559
designed to fully leverage the power of

01:08:09,039 --> 01:08:12,079
asterisks when we first discussed our

01:08:10,559 --> 01:08:13,760
expectations for building a family of

01:08:12,079 --> 01:08:15,920
phones for use with asterisk

01:08:13,760 --> 01:08:17,679
our requirements were pretty simple we

01:08:15,920 --> 01:08:19,040
asked the team to build the phones such

01:08:17,679 --> 01:08:21,279
that they were easy to install

01:08:19,040 --> 01:08:22,319
integrate provision and use i think

01:08:21,279 --> 01:08:23,679
you'll soon agree

01:08:22,319 --> 01:08:26,239
our engineers have delivered on that

01:08:23,679 --> 01:08:27,759
goal user feedback is validating

01:08:26,239 --> 01:08:30,239
that when it comes to operation with

01:08:27,759 --> 01:08:32,239
astro space systems including our own

01:08:30,239 --> 01:08:33,520
switchvox based product these are the

01:08:32,239 --> 01:08:35,440
easiest to use

01:08:33,520 --> 01:08:37,120
best integrated most interoperable

01:08:35,440 --> 01:08:38,719
products on the market today

01:08:37,120 --> 01:08:41,199
the digium family of phones will

01:08:38,719 --> 01:08:42,880
initially include three ip desk phones

01:08:41,199 --> 01:08:45,279
uniquely designed to complement any

01:08:42,880 --> 01:08:46,640
asterisk or switchvox based solution

01:08:45,279 --> 01:08:49,279
these phones are different for a number

01:08:46,640 --> 01:08:49,839
of reasons first they're exclusively

01:08:49,279 --> 01:08:52,159
designed

01:08:49,839 --> 01:08:54,000
for use with asterisks secondly we've

01:08:52,159 --> 01:08:55,600
made it really easy to auto discover and

01:08:54,000 --> 01:08:57,440
provision the phones

01:08:55,600 --> 01:08:59,759
next we've made it easy for the phones

01:08:57,440 --> 01:09:01,359
to access information inside of asterisk

01:08:59,759 --> 01:09:03,359
allowing tight coupling between an

01:09:01,359 --> 01:09:04,960
application and the phone

01:09:03,359 --> 01:09:07,120
additionally we've created an

01:09:04,960 --> 01:09:08,000
applications engine that allows users

01:09:07,120 --> 01:09:10,319
and developers

01:09:08,000 --> 01:09:11,199
to create and run their own apps on the

01:09:10,319 --> 01:09:13,600
phone

01:09:11,199 --> 01:09:15,120
and finally we've done all of this at a

01:09:13,600 --> 01:09:17,120
very compelling price point

01:09:15,120 --> 01:09:19,120
at digium we're always thinking of ways

01:09:17,120 --> 01:09:20,480
to give our customers the best value in

01:09:19,120 --> 01:09:22,560
business phone systems

01:09:20,480 --> 01:09:23,600
and also give them the power to create

01:09:22,560 --> 01:09:25,759
their own solutions

01:09:23,600 --> 01:09:27,199
for any communications challenge we'll

01:09:25,759 --> 01:09:28,799
continue to push the boundaries

01:09:27,199 --> 01:09:30,080
not only to make asterisks cooler and

01:09:28,799 --> 01:09:30,960
faster and more technologically

01:09:30,080 --> 01:09:32,799
feature-rich

01:09:30,960 --> 01:09:34,080
but to make asterisk voip communications

01:09:32,799 --> 01:09:35,600
even easier

01:09:34,080 --> 01:09:46,480
and together we'll change the way the

01:09:35,600 --> 01:09:46,480

YouTube URL: https://www.youtube.com/watch?v=cUEgm0nCkk8


