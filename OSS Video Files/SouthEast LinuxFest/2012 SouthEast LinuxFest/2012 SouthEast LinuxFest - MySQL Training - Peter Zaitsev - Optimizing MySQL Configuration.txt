Title: 2012 SouthEast LinuxFest - MySQL Training - Peter Zaitsev - Optimizing MySQL Configuration
Publication date: 2013-12-05
Playlist: 2012 SouthEast LinuxFest
Description: 
	2012 SouthEast LinuxFest
MySQL Beginner Training
Peter Zaitsev
Optimizing MySQL Configuration
Captions: 
	00:00:00,000 --> 00:00:05,279
the following presentation was recorded

00:00:02,490 --> 00:00:08,040
the 2012 southeast linux fest in

00:00:05,279 --> 00:00:10,410
charlotte north carolina it is licensed

00:00:08,040 --> 00:00:12,090
under a creative commons license for

00:00:10,410 --> 00:00:17,609
more information about the southeast

00:00:12,090 --> 00:00:19,439
linux fest visit www.azpbs.org the

00:00:17,609 --> 00:00:22,320
southeast linux fest would like to thank

00:00:19,439 --> 00:00:24,800
the following diamond sponsors in 2012

00:00:22,320 --> 00:00:28,740
for helping make these videos possible

00:00:24,800 --> 00:00:30,949
if I am founder and CEO to a corner and

00:00:28,740 --> 00:00:34,649
I will talk to the devoted to their

00:00:30,949 --> 00:00:39,660
optimizing my own configuration so we'll

00:00:34,649 --> 00:00:43,350
talk about you basic things okay well if

00:00:39,660 --> 00:00:45,989
you then we will talk about a few things

00:00:43,350 --> 00:00:48,719
such as approach to getting decent

00:00:45,989 --> 00:00:51,600
Muslim my school configuration my school

00:00:48,719 --> 00:00:53,969
configuration our auctions different

00:00:51,600 --> 00:00:55,920
tools to configure mysql and then this

00:00:53,969 --> 00:01:00,530
point the most amount of time look at

00:00:55,920 --> 00:01:03,090
the most poor in high school now let's

00:01:00,530 --> 00:01:06,090
ask you if you guys are responsible for

00:01:03,090 --> 00:01:09,180
two in mind well how freakin how many

00:01:06,090 --> 00:01:18,650
options do have in stowe config file

00:01:09,180 --> 00:01:18,650
anybody has more than 50 more than 20 10

00:01:18,979 --> 00:01:26,210
okay now now anyway runs if

00:01:29,650 --> 00:01:38,210
and how if useful to think that default

00:01:33,290 --> 00:01:40,580
my school configuration is okay okay

00:01:38,210 --> 00:01:42,860
well yeah it does well for running your

00:01:40,580 --> 00:01:45,920
home dvd collect well let's think about

00:01:42,860 --> 00:01:50,000
this right when you have a content in

00:01:45,920 --> 00:01:51,680
the MySQL buffer pool right the access

00:01:50,000 --> 00:01:53,810
we have a page miss we have to read the

00:01:51,680 --> 00:01:56,300
page from memory now imagine what you

00:01:53,810 --> 00:01:59,390
have the large buffer pool instead and

00:01:56,300 --> 00:02:01,340
we try to access the page it was removed

00:01:59,390 --> 00:02:03,350
from a memory right by the kernel and we

00:02:01,340 --> 00:02:07,100
have a page fault and it's been brought

00:02:03,350 --> 00:02:08,899
back from from a subspace in both cases

00:02:07,100 --> 00:02:11,390
we are speaking about just one eye

00:02:08,899 --> 00:02:18,739
operation right what is wrong if it's

00:02:11,390 --> 00:02:20,630
logic anybody can tell me no well the

00:02:18,739 --> 00:02:24,620
thing here is where the databases are

00:02:20,630 --> 00:02:27,170
designed with very much thinking put

00:02:24,620 --> 00:02:29,870
into what stuff is a memory in waters on

00:02:27,170 --> 00:02:33,769
disk completely different algorithms are

00:02:29,870 --> 00:02:36,140
employed in particular database no it

00:02:33,769 --> 00:02:40,280
should not hold any important locks

00:02:36,140 --> 00:02:42,110
while doing the I oh right because I can

00:02:40,280 --> 00:02:43,790
take a lot of time and the database is

00:02:42,110 --> 00:02:45,290
typically do creating highly concurrent

00:02:43,790 --> 00:02:47,540
environment so there is a lot of queries

00:02:45,290 --> 00:02:50,530
and tasks are going on at the same time

00:02:47,540 --> 00:02:53,510
right if you have swapping going on then

00:02:50,530 --> 00:02:56,030
when database will often be found

00:02:53,510 --> 00:02:59,480
holding the locks while doing the ayah

00:02:56,030 --> 00:03:02,180
right which often will essentially stall

00:02:59,480 --> 00:03:04,730
database completely and and restrict

00:03:02,180 --> 00:03:07,190
other threads which have very content

00:03:04,730 --> 00:03:10,040
and Ibaka poop from processing that is

00:03:07,190 --> 00:03:12,140
why even the relatively modest amount of

00:03:10,040 --> 00:03:17,600
swapping can really hurt database

00:03:12,140 --> 00:03:21,019
performance makes sense okay now let me

00:03:17,600 --> 00:03:22,220
talk a little bit about the MySQL of

00:03:21,019 --> 00:03:25,460
tonight it

00:03:22,220 --> 00:03:28,190
configuration to in and I would split

00:03:25,460 --> 00:03:31,670
the tools which exist out there in into

00:03:28,190 --> 00:03:36,170
kind of a three different groups one

00:03:31,670 --> 00:03:38,840
which I would say is the configuration

00:03:36,170 --> 00:03:41,090
tuyen tools you can find a number of

00:03:38,840 --> 00:03:43,670
thousand in the internet which they say

00:03:41,090 --> 00:03:46,370
hey well around this tool and it will

00:03:43,670 --> 00:03:49,780
give you advice about your MySQL

00:03:46,370 --> 00:03:53,000
configuration how to change and fix it

00:03:49,780 --> 00:03:54,820
the other tools we would i would call

00:03:53,000 --> 00:03:57,200
advisory tools will check your

00:03:54,820 --> 00:04:00,020
configuration file for typical errors

00:03:57,200 --> 00:04:02,800
and emissions right providing more like

00:04:00,020 --> 00:04:05,930
advice to what to look into then exact

00:04:02,800 --> 00:04:08,209
magic best variables and then the third

00:04:05,930 --> 00:04:10,730
one would be something like a template

00:04:08,209 --> 00:04:12,830
or tools which pro which provides you an

00:04:10,730 --> 00:04:17,470
easy way to create a basic configuration

00:04:12,830 --> 00:04:20,840
to to get going the probably

00:04:17,470 --> 00:04:23,060
configuration tools the first time is my

00:04:20,840 --> 00:04:25,790
first type is really what they are

00:04:23,060 --> 00:04:29,390
trying to take a complex decision we're

00:04:25,790 --> 00:04:33,169
looking at relatively small amount of

00:04:29,390 --> 00:04:35,419
information such as status variables try

00:04:33,169 --> 00:04:37,700
to make the database size and that makes

00:04:35,419 --> 00:04:41,660
them dangerous in a sense we can often

00:04:37,700 --> 00:04:44,630
provide very reasonable advice and get

00:04:41,660 --> 00:04:48,169
you off guard then they follow you

00:04:44,630 --> 00:04:51,290
finally follow the advice with results

00:04:48,169 --> 00:04:54,380
which are not so well and as example I

00:04:51,290 --> 00:04:57,530
took where my school to nurse cleavage a

00:04:54,380 --> 00:04:59,270
run on one of the servers and I want

00:04:57,530 --> 00:05:01,910
just to go over here what it prints out

00:04:59,270 --> 00:05:03,260
and why some recommendations are good

00:05:01,910 --> 00:05:06,740
and some bad which is friends with

00:05:03,260 --> 00:05:09,700
interest and exercise so if you look

00:05:06,740 --> 00:05:15,550
from the store it prints out a lot of

00:05:09,700 --> 00:05:15,550
basic information right so we can see

00:05:16,370 --> 00:05:21,680
current information about the current

00:05:19,100 --> 00:05:23,570
version of a mysql information about

00:05:21,680 --> 00:05:25,490
operating environment like 64 bit

00:05:23,570 --> 00:05:29,300
operating system storage engines and

00:05:25,490 --> 00:05:33,020
Sons of all then we come to this stuff a

00:05:29,300 --> 00:05:35,990
marked in red oh my gosh you have 110

00:05:33,020 --> 00:05:38,979
fragmented tables I can tell you I just

00:05:35,990 --> 00:05:44,540
run my optimized table five minutes

00:05:38,979 --> 00:05:47,120
before writing the script what could be

00:05:44,540 --> 00:05:50,900
wrong why does it tell me about 110

00:05:47,120 --> 00:05:57,050
optimized tonight and fragmented tables

00:05:50,900 --> 00:06:00,919
anybody knows well because these two

00:05:57,050 --> 00:06:03,410
assumes my son in my son fragmented

00:06:00,919 --> 00:06:05,720
table or we tell that fragmented table

00:06:03,410 --> 00:06:09,380
vendor in some free space right as a

00:06:05,720 --> 00:06:11,570
report in energy be in majority of cases

00:06:09,380 --> 00:06:13,850
where is going to be free space right

00:06:11,570 --> 00:06:15,580
even after optimized you quite likely to

00:06:13,850 --> 00:06:18,470
have some free space which does not

00:06:15,580 --> 00:06:25,789
correspond to fragmented tables right so

00:06:18,470 --> 00:06:28,220
in this case that can be rather raw what

00:06:25,789 --> 00:06:32,419
are other interesting things here we can

00:06:28,220 --> 00:06:37,900
see performance metrics a lot of a lot

00:06:32,419 --> 00:06:40,880
of interesting interesting stuff here

00:06:37,900 --> 00:06:43,250
one of the things i would say a lot of

00:06:40,880 --> 00:06:46,910
tools and mentions in the internet you

00:06:43,250 --> 00:06:48,590
will find is about reads and writes in

00:06:46,910 --> 00:06:50,270
all of cases what we will look at the

00:06:48,590 --> 00:06:53,900
same oh how many selects you have

00:06:50,270 --> 00:06:57,110
compared to updates in all of cases that

00:06:53,900 --> 00:06:59,479
is not really meaningful because way too

00:06:57,110 --> 00:07:02,479
much depend on the complexity of

00:06:59,479 --> 00:07:05,770
Aquarius right I mean often you would

00:07:02,479 --> 00:07:09,530
find the database we should CEO is

00:07:05,770 --> 00:07:11,650
ninety percent rights while all your

00:07:09,530 --> 00:07:14,240
rights essentially single row insert

00:07:11,650 --> 00:07:16,550
while all your reads are a very

00:07:14,240 --> 00:07:20,090
expensive reporting queries right and

00:07:16,550 --> 00:07:20,710
that so you can't really measure that by

00:07:20,090 --> 00:07:24,870
the

00:07:20,710 --> 00:07:29,770
by the queries if you want to meaningful

00:07:24,870 --> 00:07:31,960
stand by okay and now I think what I

00:07:29,770 --> 00:07:34,720
think the tools all should say is

00:07:31,960 --> 00:07:37,960
something like maximum possible memory

00:07:34,720 --> 00:07:42,100
usage do you guys know what is wrong

00:07:37,960 --> 00:07:45,310
with it so in this case of tool does it

00:07:42,100 --> 00:07:48,250
looks at my total number of buffers + na

00:07:45,310 --> 00:07:50,650
certain number of threads by 2.7

00:07:48,250 --> 00:07:53,680
megabytes here Fred right which is looks

00:07:50,650 --> 00:07:56,860
as a sum of your Fred buffers and then I

00:07:53,680 --> 00:08:01,360
didn't goes up together we get four

00:07:56,860 --> 00:08:04,420
point eight gigs come on guys wake up

00:08:01,360 --> 00:08:06,790
it's so fast and o'clock already feeling

00:08:04,420 --> 00:08:17,110
is a bit more active so what is rounded

00:08:06,790 --> 00:08:21,460
4.88 huh now why four point eight gigs

00:08:17,110 --> 00:08:22,930
is wrong right that is oh I would say

00:08:21,460 --> 00:08:25,840
it's not even wrong it's a million

00:08:22,930 --> 00:08:28,110
Lestrade well the thing here is what a

00:08:25,840 --> 00:08:30,940
lot of buffers which is specified here

00:08:28,110 --> 00:08:33,460
mysql do not really always allocate them

00:08:30,940 --> 00:08:35,320
for example mysql would allocate sort

00:08:33,460 --> 00:08:37,870
buffer size only when it needs to do a

00:08:35,320 --> 00:08:42,640
sword right so in a lot of cases that is

00:08:37,870 --> 00:08:46,210
not a representative for what your

00:08:42,640 --> 00:08:48,070
workload luxury require but the second

00:08:46,210 --> 00:08:52,150
important thing here is what those

00:08:48,070 --> 00:08:56,050
numbers are also it's not an upper limit

00:08:52,150 --> 00:08:58,540
either because running store procedures

00:08:56,050 --> 00:09:01,150
or complicated words it's off select I

00:08:58,540 --> 00:09:03,850
can have multiple temporary tables

00:09:01,150 --> 00:09:05,980
multiple sword buffers unlimited amount

00:09:03,850 --> 00:09:08,800
of memory allocated as stored procedures

00:09:05,980 --> 00:09:12,520
variables allocated fear Fred so that is

00:09:08,800 --> 00:09:16,930
really absolutely meaningless what are

00:09:12,520 --> 00:09:18,580
the better way to see how much her

00:09:16,930 --> 00:09:22,210
wherever we are tuned in my school

00:09:18,580 --> 00:09:25,240
server properly I would argue what the

00:09:22,210 --> 00:09:27,550
best way is actually to look at the

00:09:25,240 --> 00:09:29,770
value all right you can look at the VCC

00:09:27,550 --> 00:09:32,860
like we're told size memory in the PS

00:09:29,770 --> 00:09:34,779
output of the top often you can graph is

00:09:32,860 --> 00:09:36,940
value and see how it changes all the

00:09:34,779 --> 00:09:39,760
time so you can understand how much

00:09:36,940 --> 00:09:42,520
memory my school uses in your workload

00:09:39,760 --> 00:09:44,380
and if you have too much remember you

00:09:42,520 --> 00:09:46,720
can increase that if it get goes to

00:09:44,380 --> 00:09:48,010
light well you can I gesture and workers

00:09:46,720 --> 00:09:54,760
appropriately that's a lot more

00:09:48,010 --> 00:09:58,690
meaningful okay slow queries anybody

00:09:54,760 --> 00:10:13,810
knows how do we get to seven percent of

00:09:58,690 --> 00:10:15,820
slow queries yeah well that's right so

00:10:13,810 --> 00:10:17,950
what my squirrel looks at here is a

00:10:15,820 --> 00:10:20,080
queries which a long given amount of

00:10:17,950 --> 00:10:22,990
certain amount of time in our practice

00:10:20,080 --> 00:10:26,470
in very many cases with temporary enable

00:10:22,990 --> 00:10:29,020
full slow query log file or to get the

00:10:26,470 --> 00:10:32,410
old queries logged right so you'll send

00:10:29,020 --> 00:10:34,570
set alone query time 20 get a log of all

00:10:32,410 --> 00:10:36,370
the queries alright and that is there a

00:10:34,570 --> 00:10:38,110
lot of monitoring system starts to

00:10:36,370 --> 00:10:39,610
scream oh my gosh you have hundred

00:10:38,110 --> 00:10:43,330
percent of the slow queries somebody's

00:10:39,610 --> 00:10:46,180
must be dying right well not exactly it

00:10:43,330 --> 00:10:52,420
just a question of how my school

00:10:46,180 --> 00:10:54,010
interprets feels right it's a lot I've

00:10:52,420 --> 00:11:01,660
seen all the people being being

00:10:54,010 --> 00:11:03,250
surprised by by that one okay a lot the

00:11:01,660 --> 00:11:07,240
next thing I would point out is this one

00:11:03,250 --> 00:11:12,300
query cache is disabled should we just

00:11:07,240 --> 00:11:12,300
always go ahead and enable query cache

00:11:13,490 --> 00:11:24,870
well query cache is evil right I mean it

00:11:19,350 --> 00:11:26,700
does for the four small installations

00:11:24,870 --> 00:11:29,570
right especially if you don't have any

00:11:26,700 --> 00:11:32,340
other cash like memcache support web

00:11:29,570 --> 00:11:36,390
application your onion but it doesn't

00:11:32,340 --> 00:11:40,080
really scale the query cache was written

00:11:36,390 --> 00:11:43,080
in the time there are two CPUs or two

00:11:40,080 --> 00:11:45,300
cores both as much as you would get into

00:11:43,080 --> 00:11:48,470
the expensive commodity hardware right

00:11:45,300 --> 00:11:50,610
and it stayed there from with design

00:11:48,470 --> 00:11:53,970
applications it doesn't really scale

00:11:50,610 --> 00:11:57,900
with multicores it also has doesn't

00:11:53,970 --> 00:12:00,870
really scale if a query cache sciences

00:11:57,900 --> 00:12:04,230
you have to be very careful Satan will

00:12:00,870 --> 00:12:06,060
catch the large amount okay and

00:12:04,230 --> 00:12:12,120
everything I would like to point out

00:12:06,060 --> 00:12:15,990
here is a table cache hit rate alright

00:12:12,120 --> 00:12:18,510
so one of the things here I'm is a

00:12:15,990 --> 00:12:22,890
little bit concern is how table cache

00:12:18,510 --> 00:12:25,440
hit ratio is mentioned as number of open

00:12:22,890 --> 00:12:28,830
tables decided by the way which is

00:12:25,440 --> 00:12:31,620
essentially table cache size decide /

00:12:28,830 --> 00:12:33,420
table opened but that is not in the main

00:12:31,620 --> 00:12:36,450
point here right even if you take

00:12:33,420 --> 00:12:39,390
computer miss rate correctly not all

00:12:36,450 --> 00:12:45,840
nieces are avoidable in the first place

00:12:39,390 --> 00:12:49,470
right so a table cash is a structured if

00:12:45,840 --> 00:12:51,810
you know which keeps their new

00:12:49,470 --> 00:12:53,550
information about open tables at my

00:12:51,810 --> 00:12:56,070
school's to access the tables will check

00:12:53,550 --> 00:12:57,630
the table cash first and if not the

00:12:56,070 --> 00:13:01,530
missile happens we'll go and open the

00:12:57,630 --> 00:13:04,680
table right now in a lot of cases you

00:13:01,530 --> 00:13:07,380
indeed want to got to happen really as

00:13:04,680 --> 00:13:10,320
possible but it's not avoidable in all

00:13:07,380 --> 00:13:14,089
cases can anybody tell me in which case

00:13:10,320 --> 00:13:14,089
I can't avoid the table cache miss

00:13:15,960 --> 00:13:21,390
well then I'm creating the table right

00:13:19,440 --> 00:13:24,420
in a number of for clothes when you

00:13:21,390 --> 00:13:25,950
create and drop a lot of tables you have

00:13:24,420 --> 00:13:28,770
a lot of table cache misses because I

00:13:25,950 --> 00:13:31,590
create a table it's great on disk when

00:13:28,770 --> 00:13:34,260
I'm going to open that table there will

00:13:31,590 --> 00:13:36,240
be table cache miss because that newly

00:13:34,260 --> 00:13:39,690
created table cannot be in the cash

00:13:36,240 --> 00:13:41,760
right so I've seen people again chasing

00:13:39,690 --> 00:13:46,830
the table cache size two very very very

00:13:41,760 --> 00:13:51,300
high value as well because of this okay

00:13:46,830 --> 00:13:53,610
let me move on and then you can see also

00:13:51,300 --> 00:13:56,700
some other stuff here in terms of

00:13:53,610 --> 00:14:00,270
recommendations run up to my stable well

00:13:56,700 --> 00:14:01,890
we already did that and then it tells us

00:14:00,270 --> 00:14:06,240
to increase the table cache size which

00:14:01,890 --> 00:14:11,490
is already one of a decent memory and we

00:14:06,240 --> 00:14:14,370
can see a bunch of recommendations which

00:14:11,490 --> 00:14:19,260
are something which we discussed may not

00:14:14,370 --> 00:14:22,980
be the really needed another two I would

00:14:19,260 --> 00:14:26,850
mention this is a tool from York want to

00:14:22,980 --> 00:14:31,320
keep a set of tools for our DBS and what

00:14:26,850 --> 00:14:35,220
we try to create at large extent by our

00:14:31,320 --> 00:14:38,370
own kind of consultants use is to have

00:14:35,220 --> 00:14:40,860
something like lint 230 something which

00:14:38,370 --> 00:14:42,980
would do some static check in to check

00:14:40,860 --> 00:14:46,320
configuration files for a number of

00:14:42,980 --> 00:14:49,020
known conditions which we may want to

00:14:46,320 --> 00:14:51,090
pay attention to we don't apply in this

00:14:49,020 --> 00:14:53,220
case what you want to follow every

00:14:51,090 --> 00:14:55,550
single advice because a lot of systems

00:14:53,220 --> 00:14:58,530
are a lot more complicated and too can

00:14:55,550 --> 00:15:01,020
advise us for example it tells Havel

00:14:58,530 --> 00:15:06,000
energy flash lubbock TX commit is not

00:15:01,020 --> 00:15:09,150
set to 1 which is means it's not fully

00:15:06,000 --> 00:15:13,410
AZ it may or may not the problem for you

00:15:09,150 --> 00:15:15,030
if you are writing the bank application

00:15:13,410 --> 00:15:17,630
powered by my squirrel that's probably

00:15:15,030 --> 00:15:20,250
is a problem if you just me great it off

00:15:17,630 --> 00:15:23,529
my son right or having something like

00:15:20,250 --> 00:15:25,480
store non critical data

00:15:23,529 --> 00:15:27,790
on the underpowered server right the

00:15:25,480 --> 00:15:29,680
slow disks that may not be a problem for

00:15:27,790 --> 00:15:36,730
you right and you can see in a lot of

00:15:29,680 --> 00:15:39,249
other of advice as well right it would

00:15:36,730 --> 00:15:43,059
print as different kinds of warnings

00:15:39,249 --> 00:15:46,269
like oh using the old passwords which is

00:15:43,059 --> 00:15:49,029
unsecure right do you really understand

00:15:46,269 --> 00:15:52,540
that maybe you are using so old client

00:15:49,029 --> 00:15:56,040
that's required or maybe you just get

00:15:52,540 --> 00:15:59,170
the system and security risk the next

00:15:56,040 --> 00:16:03,670
tool without mention is you have created

00:15:59,170 --> 00:16:06,600
via my MySQL configuration adviser and

00:16:03,670 --> 00:16:09,370
frankly I will be honored to be thought

00:16:06,600 --> 00:16:11,680
initially about you creating the two how

00:16:09,370 --> 00:16:16,029
we can really tune my school

00:16:11,680 --> 00:16:19,689
configuration so you would get both a

00:16:16,029 --> 00:16:22,689
set of your variables right you're maybe

00:16:19,689 --> 00:16:24,220
database size your status counters and

00:16:22,689 --> 00:16:27,550
that will do some magic and create the

00:16:24,220 --> 00:16:29,500
tools but now as we go through that it

00:16:27,550 --> 00:16:31,540
is essentially in a way trying to

00:16:29,500 --> 00:16:33,279
compare the configuration of your able

00:16:31,540 --> 00:16:35,620
to get from the tools compared to what

00:16:33,279 --> 00:16:38,709
consultants will generate we found there

00:16:35,620 --> 00:16:41,559
are so much different conditions what

00:16:38,709 --> 00:16:45,839
that is not really possible there are

00:16:41,559 --> 00:16:50,019
just so many cases which you cannot

00:16:45,839 --> 00:16:52,420
grasp from getting just variables and

00:16:50,019 --> 00:16:55,180
status counters you have to really spend

00:16:52,420 --> 00:16:56,800
significant time look in a database so

00:16:55,180 --> 00:16:59,019
we could get a 2 which would give you

00:16:56,800 --> 00:17:01,089
right advice maybe ninety percent but we

00:16:59,019 --> 00:17:02,680
thought but damaging advice in and have

00:17:01,089 --> 00:17:05,770
a time that you thought that wasn't good

00:17:02,680 --> 00:17:07,240
enough so instead we can verify to a to

00:17:05,770 --> 00:17:09,610
which creates you set of basic

00:17:07,240 --> 00:17:11,140
configuration template which often will

00:17:09,610 --> 00:17:14,409
get you going right which can add you

00:17:11,140 --> 00:17:16,990
adjust for your own needs very quickly

00:17:14,409 --> 00:17:19,240
so it will just ask you some sort of

00:17:16,990 --> 00:17:22,240
questions like hardware number of CPUs

00:17:19,240 --> 00:17:24,670
memory and then we'll get you the

00:17:22,240 --> 00:17:27,490
good configuration file right which

00:17:24,670 --> 00:17:29,590
would specify a lot of the most

00:17:27,490 --> 00:17:31,900
meaningful options which you we expect

00:17:29,590 --> 00:17:34,480
you to go over and adjust to your

00:17:31,900 --> 00:17:38,170
conditions because you know your system

00:17:34,480 --> 00:17:42,550
we don't but I can tell you this stuff

00:17:38,170 --> 00:17:44,850
can often get you started and we we

00:17:42,550 --> 00:17:48,490
ourselves use number of templates a lot

00:17:44,850 --> 00:17:50,920
okay so for the next half an hour we'll

00:17:48,490 --> 00:17:53,620
have a very boring part of presentation

00:17:50,920 --> 00:17:56,050
and I will go over about probably 50

00:17:53,620 --> 00:18:00,429
different configuration options and try

00:17:56,050 --> 00:18:03,040
to explain you what they mean so unless

00:18:00,429 --> 00:18:06,100
you've bored to death in the end I

00:18:03,040 --> 00:18:10,300
didn't do my job well before we get two

00:18:06,100 --> 00:18:13,690
variables though we should look at the

00:18:10,300 --> 00:18:16,900
status counters because I will refer to

00:18:13,690 --> 00:18:19,030
them a lot what are the status counters

00:18:16,900 --> 00:18:22,150
in my squirrel well since it's very

00:18:19,030 --> 00:18:23,880
early days of MySQL it has number of

00:18:22,150 --> 00:18:27,100
status counters which are basically

00:18:23,880 --> 00:18:31,990
incremented when different events would

00:18:27,100 --> 00:18:35,350
happen right and you can get them by

00:18:31,990 --> 00:18:40,840
Ryan show global status and looking at

00:18:35,350 --> 00:18:43,090
the output now that is one way to look

00:18:40,840 --> 00:18:45,309
at them which will give values from

00:18:43,090 --> 00:18:47,470
stark in a lot of cases you what you

00:18:45,309 --> 00:18:50,290
want to understand is information about

00:18:47,470 --> 00:18:52,510
where values kind of per second and how

00:18:50,290 --> 00:18:54,130
they grow in a lot of cases you also

00:18:52,510 --> 00:18:56,590
want to look at the multiple samples

00:18:54,130 --> 00:18:59,380
because in many cases you may be running

00:18:56,590 --> 00:19:02,860
some specific query in that very moment

00:18:59,380 --> 00:19:04,870
when you took a sample which can be very

00:19:02,860 --> 00:19:07,980
much outlier compared to normal workload

00:19:04,870 --> 00:19:11,890
to do that we've created is very simple

00:19:07,980 --> 00:19:14,260
next to what it does it essentially ran

00:19:11,890 --> 00:19:16,000
to my school admin few times and tablets

00:19:14,260 --> 00:19:19,179
values right so we can see these are

00:19:16,000 --> 00:19:20,770
values which are since startup and in

00:19:19,179 --> 00:19:23,770
some cases you want to see that and

00:19:20,770 --> 00:19:26,020
these are a number of events for each

00:19:23,770 --> 00:19:29,620
100 second right in this case we are

00:19:26,020 --> 00:19:33,910
taking two more examples of

00:19:29,620 --> 00:19:38,050
100 seconds each right and then you can

00:19:33,910 --> 00:19:40,500
obviously look at those values / hundred

00:19:38,050 --> 00:19:44,140
to get per second widest if you want

00:19:40,500 --> 00:19:46,780
okay so let's now look at the general

00:19:44,140 --> 00:19:49,690
options marks connections that is

00:19:46,780 --> 00:19:51,070
something you often need to check right

00:19:49,690 --> 00:19:52,360
by default my school comes with

00:19:51,070 --> 00:19:54,820
typically something like Connor

00:19:52,360 --> 00:19:59,200
connections to load which is well may

00:19:54,820 --> 00:20:00,490
not be enough how did unit variable well

00:19:59,200 --> 00:20:02,500
you should look at marks used

00:20:00,490 --> 00:20:05,760
connections this is a number of

00:20:02,500 --> 00:20:09,700
connections which my school maxim had

00:20:05,760 --> 00:20:11,860
since start typically I would look to

00:20:09,700 --> 00:20:14,559
have marks use connections no more than

00:20:11,860 --> 00:20:17,350
75 percent of your marks connections

00:20:14,559 --> 00:20:20,380
right so you have some slack out here

00:20:17,350 --> 00:20:22,330
now note though you shouldn't be just

00:20:20,380 --> 00:20:24,610
raised in max connections more and more

00:20:22,330 --> 00:20:28,000
and more right the tens of thousands in

00:20:24,610 --> 00:20:29,530
many cases if you are using too many

00:20:28,000 --> 00:20:31,210
connections the answer is not to

00:20:29,530 --> 00:20:34,150
increase number of connections that go

00:20:31,210 --> 00:20:36,460
back to application and configure that

00:20:34,150 --> 00:20:38,290
to use less connections for example

00:20:36,460 --> 00:20:42,550
reduce the number of party children

00:20:38,290 --> 00:20:45,030
reducing your size of the JDBC

00:20:42,550 --> 00:20:51,300
connection pole and things like that

00:20:45,030 --> 00:20:54,760
Fred cash so what Fred cash is is there

00:20:51,300 --> 00:20:57,820
in structure in MySQL to prevent

00:20:54,760 --> 00:21:00,010
creating all threads right Baku on each

00:20:57,820 --> 00:21:04,320
connections why well because creating

00:21:00,010 --> 00:21:04,320
Fred's is an expensive operation

00:21:04,350 --> 00:21:11,610
especially it was few years back with

00:21:08,070 --> 00:21:11,610
Linux fret of

00:21:12,880 --> 00:21:17,900
and typically you would want to tune

00:21:15,680 --> 00:21:19,970
this variable so there are no more than

00:21:17,900 --> 00:21:25,220
couple of threads being created every

00:21:19,970 --> 00:21:27,530
single every seconds i would say 50 to

00:21:25,220 --> 00:21:30,200
100 is typically good default value for

00:21:27,530 --> 00:21:35,150
most applications but sometimes you want

00:21:30,200 --> 00:21:37,640
to go higher now the next one's is

00:21:35,150 --> 00:21:41,870
stable cash and table open cash with a

00:21:37,640 --> 00:21:46,520
kind of twin brothers were to find very

00:21:41,870 --> 00:21:48,500
important difference table can oh no

00:21:46,520 --> 00:21:50,270
when table cash for a table open cash

00:21:48,500 --> 00:21:53,240
has actually seen in of speaking out

00:21:50,270 --> 00:21:58,160
some files so what is a cache contains

00:21:53,240 --> 00:22:01,160
is it's a cache of open table instances

00:21:58,160 --> 00:22:03,500
what does instances mean well that mean

00:22:01,160 --> 00:22:06,950
what if you have two queries going in

00:22:03,500 --> 00:22:10,160
parallel which operate with with single

00:22:06,950 --> 00:22:12,530
table right then we will have two

00:22:10,160 --> 00:22:14,200
instances of the same table and each of

00:22:12,530 --> 00:22:18,380
em will need an entry in table cash

00:22:14,200 --> 00:22:20,630
right so you would need to watch

00:22:18,380 --> 00:22:23,930
opentable status were able to see how

00:22:20,630 --> 00:22:26,900
many misses you have and and assume you

00:22:23,930 --> 00:22:28,970
don't have a lot of clear tables being

00:22:26,900 --> 00:22:31,640
created and dropped all the time you

00:22:28,970 --> 00:22:35,110
don't want more than a handful of table

00:22:31,640 --> 00:22:38,540
cache misses per second right that I

00:22:35,110 --> 00:22:40,010
should be a go if you want to start of

00:22:38,540 --> 00:22:42,140
something I think values like about

00:22:40,010 --> 00:22:46,010
4,000 to the decent start for many

00:22:42,140 --> 00:22:48,590
workloads if you like the value is open

00:22:46,010 --> 00:22:52,310
files limit how we do are they related

00:22:48,590 --> 00:22:54,110
for my some tables and only for my some

00:22:52,310 --> 00:22:57,830
tables

00:22:54,110 --> 00:23:04,100
the table cache entry would require file

00:22:57,830 --> 00:23:06,049
descriptors right it will be up to to

00:23:04,100 --> 00:23:08,450
the strip twister table well actually

00:23:06,049 --> 00:23:10,549
more if had to merge my son table right

00:23:08,450 --> 00:23:14,720
then it can be up to two file

00:23:10,549 --> 00:23:17,360
descriptors for each underline match

00:23:14,720 --> 00:23:20,480
table so what you want to typically do

00:23:17,360 --> 00:23:22,880
is you want to boost open files images

00:23:20,480 --> 00:23:26,690
on high value for more than operating

00:23:22,880 --> 00:23:32,059
systems you can essentially get as many

00:23:26,690 --> 00:23:33,830
open files as you need that's it's not

00:23:32,059 --> 00:23:38,090
practical to try to limit your database

00:23:33,830 --> 00:23:41,750
errors this way table definition cash

00:23:38,090 --> 00:23:44,299
this is a item which is very related to

00:23:41,750 --> 00:23:47,270
the table open cash but it contains

00:23:44,299 --> 00:23:50,059
information otta bout the instances of a

00:23:47,270 --> 00:23:51,679
table butter tables themselves right so

00:23:50,059 --> 00:23:54,169
it contains something like what you'll

00:23:51,679 --> 00:23:56,270
get a show create table statement the

00:23:54,169 --> 00:23:59,000
list of fields right in the table and

00:23:56,270 --> 00:24:01,610
I've information now table definition

00:23:59,000 --> 00:24:04,309
cash has appropriate status variables

00:24:01,610 --> 00:24:07,460
called open table definition right which

00:24:04,309 --> 00:24:11,210
will be increased appropriately when

00:24:07,460 --> 00:24:13,309
table definition is open I try to set

00:24:11,210 --> 00:24:15,290
table definition cash large enough to

00:24:13,309 --> 00:24:19,130
cover all tables of heaven database

00:24:15,290 --> 00:24:22,100
typically just easy enough to do and

00:24:19,130 --> 00:24:25,820
it's won't take a lot of memory and less

00:24:22,100 --> 00:24:28,429
you have millions and millions of tables

00:24:25,820 --> 00:24:34,490
in your in your database right so unless

00:24:28,429 --> 00:24:37,429
you have overrun maybe hundred K tables

00:24:34,490 --> 00:24:40,010
in the instance just set it large enough

00:24:37,429 --> 00:24:44,809
so it covers everything whether let's

00:24:40,010 --> 00:24:46,940
chat let's check on this item now we'll

00:24:44,809 --> 00:24:49,250
try to find who here has the most amount

00:24:46,940 --> 00:24:54,770
of tables in my school instance anybody

00:24:49,250 --> 00:24:58,480
has more than a thousand no no more than

00:24:54,770 --> 00:24:58,480
a thousand tables in my school instance

00:24:58,930 --> 00:25:14,320
oh I guess okay well okay okay so what I

00:25:11,560 --> 00:25:18,160
can tell you than what I've seen it some

00:25:14,320 --> 00:25:20,320
people become a creative enough or not

00:25:18,160 --> 00:25:22,060
enough as we probably know there's like

00:25:20,320 --> 00:25:25,200
not much difference between those two

00:25:22,060 --> 00:25:29,320
what they get to 10 million or more

00:25:25,200 --> 00:25:31,860
tables / my school instance and that is

00:25:29,320 --> 00:25:34,930
the case where a lot of things which are

00:25:31,860 --> 00:25:38,170
expected to work and more kind of normal

00:25:34,930 --> 00:25:40,180
environment may start to break right and

00:25:38,170 --> 00:25:43,090
that is in this case you want to have a

00:25:40,180 --> 00:25:45,040
lot more a lot small table open caption

00:25:43,090 --> 00:25:48,750
10 minutes of this right over I've asked

00:25:45,040 --> 00:25:53,230
you this weighs too much memory okay

00:25:48,750 --> 00:25:59,200
backlog that is the variable which

00:25:53,230 --> 00:26:01,240
doesn't need adjustment unless you have

00:25:59,200 --> 00:26:04,330
a very high number of connections per

00:26:01,240 --> 00:26:08,260
second I would say if you're getting

00:26:04,330 --> 00:26:10,330
more than 10,000 thousands of

00:26:08,260 --> 00:26:12,490
connections per second not queries per

00:26:10,330 --> 00:26:14,590
second but connections where things were

00:26:12,490 --> 00:26:16,660
different then you don't need to change

00:26:14,590 --> 00:26:20,980
it if you have you may boost it to

00:26:16,660 --> 00:26:23,740
something like 2,000 or something like

00:26:20,980 --> 00:26:25,330
that what backlog is that is essentially

00:26:23,740 --> 00:26:27,850
depth of a listen pew right which is

00:26:25,330 --> 00:26:29,020
passed to listen cold and my school

00:26:27,850 --> 00:26:32,850
starts to work in twin current

00:26:29,020 --> 00:26:36,160
connections you want technical details

00:26:32,850 --> 00:26:38,800
max load packet that isn't having poor

00:26:36,160 --> 00:26:41,140
I've important variable what I defined

00:26:38,800 --> 00:26:44,140
essentially is a maximum size of a query

00:26:41,140 --> 00:26:47,230
the fault is one Meg but if I want to

00:26:44,140 --> 00:26:49,780
run some Vulcans in such statements or

00:26:47,230 --> 00:26:52,930
insert some light globes I may need

00:26:49,780 --> 00:26:55,350
larger values for that right I will be

00:26:52,930 --> 00:26:57,820
careful you probably don't want to get

00:26:55,350 --> 00:27:00,340
queries which have like a gigabyte in

00:26:57,820 --> 00:27:03,220
size in my school that will be very very

00:27:00,340 --> 00:27:05,990
slow so I would limit up to 16 eggs

00:27:03,220 --> 00:27:08,030
maybe sixty four mags right to keep fit

00:27:05,990 --> 00:27:11,210
open team and change for in check from

00:27:08,030 --> 00:27:13,780
doing something very stupid but it also

00:27:11,210 --> 00:27:16,910
should note what this variable defines

00:27:13,780 --> 00:27:21,860
some internal limits such as ass teen

00:27:16,910 --> 00:27:23,750
limit right where size of variables

00:27:21,860 --> 00:27:26,390
which are used in things like stored

00:27:23,750 --> 00:27:31,510
procedure and what's not so if you set

00:27:26,390 --> 00:27:34,040
this variable way too high when certain

00:27:31,510 --> 00:27:37,700
application developer mistakes they can

00:27:34,040 --> 00:27:41,450
essentially push my school to run out of

00:27:37,700 --> 00:27:44,300
memory so be careful with that another

00:27:41,450 --> 00:27:47,390
related variable is called max connect

00:27:44,300 --> 00:27:50,120
errors and this is a very important

00:27:47,390 --> 00:27:52,100
we're able to stay i would say set

00:27:50,120 --> 00:27:54,490
especially these days when a lot of

00:27:52,100 --> 00:27:57,290
people around in my school in the cloud

00:27:54,490 --> 00:27:59,900
what is it's very able to well this

00:27:57,290 --> 00:28:02,179
variable source or designed to serve as

00:27:59,900 --> 00:28:05,360
a protection from a brute force attack

00:28:02,179 --> 00:28:08,150
on your password if you have more than

00:28:05,360 --> 00:28:09,710
10 by default right connection attempt

00:28:08,150 --> 00:28:13,460
with your own passwords when the host

00:28:09,710 --> 00:28:15,530
this connection originates from gets

00:28:13,460 --> 00:28:17,840
blocked right and nobody can connect

00:28:15,530 --> 00:28:20,090
from that until you run flash horse or

00:28:17,840 --> 00:28:22,550
to start my squirrel now what is the

00:28:20,090 --> 00:28:25,100
problem with this well the froyo phase

00:28:22,550 --> 00:28:28,340
is what if you have any number of

00:28:25,100 --> 00:28:30,440
network errors then those aboard

00:28:28,340 --> 00:28:33,170
connections often would be also counter

00:28:30,440 --> 00:28:34,970
dagger across with limits right and then

00:28:33,170 --> 00:28:37,100
things like a cloud very an odd can

00:28:34,970 --> 00:28:39,500
completely can in control of our

00:28:37,100 --> 00:28:41,450
infrastructure that may happen every so

00:28:39,500 --> 00:28:43,640
often right and in many cases people and

00:28:41,450 --> 00:28:45,260
say oh my gosh my mind squirrel just

00:28:43,640 --> 00:28:46,970
stopped a certain connections if it's

00:28:45,260 --> 00:28:48,920
stupid error message for whatever reason

00:28:46,970 --> 00:28:51,410
right and that obviously happens at

00:28:48,920 --> 00:28:53,660
three o'clock in the morning right of

00:28:51,410 --> 00:28:55,820
some other very sensible time because

00:28:53,660 --> 00:28:57,410
that is exactly the time the data center

00:28:55,820 --> 00:28:59,720
digital network maintenance which caused

00:28:57,410 --> 00:29:02,090
the problem the first place right so i

00:28:59,720 --> 00:29:04,010
would suggest instead to set that to

00:29:02,090 --> 00:29:06,020
significantly high value you know

00:29:04,010 --> 00:29:08,990
million 10 million siphon and use strong

00:29:06,020 --> 00:29:11,570
passwords you know any meaningful strong

00:29:08,990 --> 00:29:13,059
passwords can handle brute force attack

00:29:11,570 --> 00:29:16,590
with you know even

00:29:13,059 --> 00:29:21,159
sighs dictionary right seriously so

00:29:16,590 --> 00:29:25,649
strong posture is the answer skip name

00:29:21,159 --> 00:29:29,110
resolve that is another network related

00:29:25,649 --> 00:29:31,740
variable what it does is its instruct my

00:29:29,110 --> 00:29:35,730
squirrel to avoid dns lookups on

00:29:31,740 --> 00:29:39,429
connection attempt this gives us faster

00:29:35,730 --> 00:29:41,139
connections and safer what I mean very

00:29:39,429 --> 00:29:43,509
safer is what you are not going to

00:29:41,139 --> 00:29:48,190
depend on your DNS and especially if

00:29:43,509 --> 00:29:50,289
your DNS infrastructure and I would say

00:29:48,190 --> 00:29:53,169
two very simple things about this first

00:29:50,289 --> 00:29:55,929
of all everybody like almost everybody

00:29:53,169 --> 00:29:58,570
believes we're DNS infrastructure is

00:29:55,929 --> 00:30:00,759
bulletproof because they never had any

00:29:58,570 --> 00:30:02,980
product of that and the second thing is

00:30:00,759 --> 00:30:05,860
that lots and lots of people really have

00:30:02,980 --> 00:30:10,090
problems originate from the readiness

00:30:05,860 --> 00:30:12,249
problems right because well my squirrel

00:30:10,090 --> 00:30:16,749
can be doing just tones of DNS lookups

00:30:12,249 --> 00:30:18,519
and in some cases so unless you really

00:30:16,749 --> 00:30:22,419
need to grant permission see if your

00:30:18,519 --> 00:30:26,200
names in the hosts I would use that skip

00:30:22,419 --> 00:30:30,220
name results finally old password right

00:30:26,200 --> 00:30:32,379
aust old passwords will use 3m is well

00:30:30,220 --> 00:30:35,710
for that one so that's a very very very

00:30:32,379 --> 00:30:39,369
old password hash which was it means

00:30:35,710 --> 00:30:41,470
dream lee insecure right so if somebody

00:30:39,369 --> 00:30:48,399
would get your encrypted passwords from

00:30:41,470 --> 00:30:50,350
mysql 40 or below they could find out

00:30:48,399 --> 00:30:53,320
the password to match was hashes in a

00:30:50,350 --> 00:30:57,659
fraction the fraction of a second it's

00:30:53,320 --> 00:31:03,009
it was so much insecure okay let mr.

00:30:57,659 --> 00:31:05,230
speed up our options log bin useful

00:31:03,009 --> 00:31:07,570
application but also is used for point

00:31:05,230 --> 00:31:09,820
in time recovery right if you want even

00:31:07,570 --> 00:31:11,320
if you don't use replication but you

00:31:09,820 --> 00:31:13,779
want to be able to have meaningful

00:31:11,320 --> 00:31:15,850
backups so you can actually recover to a

00:31:13,779 --> 00:31:18,009
current point in time not just last

00:31:15,850 --> 00:31:21,700
Saturday then you need to have work been

00:31:18,009 --> 00:31:23,820
enabled right sin-bin log that makes

00:31:21,700 --> 00:31:25,980
been look durable what I mean is what

00:31:23,820 --> 00:31:27,980
every transaction it commits is going to

00:31:25,980 --> 00:31:31,770
be reflected in the scene in the bin log

00:31:27,980 --> 00:31:34,200
by default in a gb transaction log will

00:31:31,770 --> 00:31:37,860
be flash right so it's persistent energy

00:31:34,200 --> 00:31:39,570
be but writes the bandar-log are

00:31:37,860 --> 00:31:43,290
buffered so you may lose the date in a

00:31:39,570 --> 00:31:46,950
very low all right so no though it can

00:31:43,290 --> 00:31:49,830
cause significant performance penalty if

00:31:46,950 --> 00:31:51,750
you enable this option expire log days

00:31:49,830 --> 00:31:55,590
this is an option used for purging

00:31:51,750 --> 00:31:57,990
binary logs it's often a very good

00:31:55,590 --> 00:32:01,440
option especially in a belief some with

00:31:57,990 --> 00:32:04,440
some binary log backup process because

00:32:01,440 --> 00:32:07,410
it helps you to protect from unlimited

00:32:04,440 --> 00:32:09,140
space use right typically I would set

00:32:07,410 --> 00:32:11,550
something in two weeks or maybe month

00:32:09,140 --> 00:32:14,370
one-fourth of binary log on the database

00:32:11,550 --> 00:32:15,930
host itself typically it's good enough

00:32:14,370 --> 00:32:18,780
for most cases and then i will keep

00:32:15,930 --> 00:32:23,610
compressed archived binary log copies

00:32:18,780 --> 00:32:25,580
for a longer period of time jean-pierre

00:32:23,610 --> 00:32:28,650
table size and Max his table size

00:32:25,580 --> 00:32:32,330
typically are set to same value which is

00:32:28,650 --> 00:32:36,180
workload based which are responsible for

00:32:32,330 --> 00:32:38,090
which limited size of temporary table in

00:32:36,180 --> 00:32:44,280
memory temperate about my school can use

00:32:38,090 --> 00:32:46,560
now what is very important to know here

00:32:44,280 --> 00:32:49,980
is what my school does has its creating

00:32:46,560 --> 00:32:52,290
these table variables and you can look

00:32:49,980 --> 00:32:56,130
at that to see how many tables my school

00:32:52,290 --> 00:33:01,020
had to create on disk what is important

00:32:56,130 --> 00:33:04,020
to know that is it's not only not enough

00:33:01,020 --> 00:33:06,870
memory what can cause that in many cases

00:33:04,020 --> 00:33:09,330
it simply has to do it because temperate

00:33:06,870 --> 00:33:12,420
tables have to contain blob or text

00:33:09,330 --> 00:33:15,390
fields if you have any of those when

00:33:12,420 --> 00:33:17,760
mysql cannot use in memory tables it has

00:33:15,390 --> 00:33:21,570
to use temporary my some tables on disk

00:33:17,760 --> 00:33:23,640
right so don't just blindly get them lot

00:33:21,570 --> 00:33:27,750
to larger and larger values trying to

00:33:23,640 --> 00:33:32,280
get this get this down size may not have

00:33:27,750 --> 00:33:35,870
anything to do a fat query cache size we

00:33:32,280 --> 00:33:38,480
spoke about that be very not careful

00:33:35,870 --> 00:33:41,510
set it to very high values and i would

00:33:38,480 --> 00:33:44,290
recommend access to validate and then

00:33:41,510 --> 00:33:47,270
you have to enable that so if you and

00:33:44,290 --> 00:33:50,440
want to enable query cache try it but

00:33:47,270 --> 00:33:52,220
make sure it does really provides and

00:33:50,440 --> 00:33:56,150
performance improvement for your

00:33:52,220 --> 00:33:59,300
application not just enable that without

00:33:56,150 --> 00:34:02,330
test in a few minute will do sort buffer

00:33:59,300 --> 00:34:07,280
size that's in buffer memory which is

00:34:02,330 --> 00:34:10,280
used for certain data in this case you

00:34:07,280 --> 00:34:13,909
can watch sort merge passes were able to

00:34:10,280 --> 00:34:16,639
see whatever that was enough or wherever

00:34:13,909 --> 00:34:19,100
it had to go to disk what I would worry

00:34:16,639 --> 00:34:22,460
though is what very high values make

00:34:19,100 --> 00:34:25,370
small sort query slower so if you have

00:34:22,460 --> 00:34:28,310
my Georgie of a small queries keep small

00:34:25,370 --> 00:34:30,740
sort buffer size but for large roots a

00:34:28,310 --> 00:34:33,080
portion queries you can set it as a

00:34:30,740 --> 00:34:35,600
session variable just for that the

00:34:33,080 --> 00:34:37,790
session or even just before that

00:34:35,600 --> 00:34:39,470
bigquery right to use lighter sort

00:34:37,790 --> 00:34:43,520
buffer virtually the most performance

00:34:39,470 --> 00:34:46,820
advantages join buffer size it helps

00:34:43,520 --> 00:34:48,290
performance of joints if no indexes well

00:34:46,820 --> 00:34:52,280
you know what about the joints with no

00:34:48,290 --> 00:34:55,460
indexes huh anybody you don't want to

00:34:52,280 --> 00:34:59,180
have joints if out indices are bad right

00:34:55,460 --> 00:35:01,070
so joy I mean typically I wouldn't do

00:34:59,180 --> 00:35:04,400
anything with this variable but rather

00:35:01,070 --> 00:35:06,320
fix your queries if you have some very

00:35:04,400 --> 00:35:09,170
nasty code that you have no control over

00:35:06,320 --> 00:35:13,880
you may and need to do something very

00:35:09,170 --> 00:35:16,130
below a read aren t buffer this is also

00:35:13,880 --> 00:35:19,400
a buffer which is used is in conjunction

00:35:16,130 --> 00:35:21,110
with a file sort for it in the data many

00:35:19,400 --> 00:35:23,030
people kind of mixes a little bit with

00:35:21,110 --> 00:35:25,340
read buffer size and reader and D buffer

00:35:23,030 --> 00:35:28,370
size very differently and even though I

00:35:25,340 --> 00:35:31,610
would leave read read buffer size and

00:35:28,370 --> 00:35:33,230
default in most cases a debugger often

00:35:31,610 --> 00:35:35,960
makes sense to increase the surfing like

00:35:33,230 --> 00:35:38,330
16 eggs or so what is important about

00:35:35,960 --> 00:35:40,430
this is what my school is often smart

00:35:38,330 --> 00:35:45,380
enough not to allocate more memory than

00:35:40,430 --> 00:35:46,720
needed team PG that is a variable there

00:35:45,380 --> 00:35:49,660
my school creates

00:35:46,720 --> 00:35:51,820
stem temporary files the most important

00:35:49,660 --> 00:35:55,450
are sort files and temporary tables

00:35:51,820 --> 00:35:59,320
right in most cases unless you happen to

00:35:55,450 --> 00:36:02,230
have some very huge a need for tempers

00:35:59,320 --> 00:36:06,820
the for temporary storage I try to use

00:36:02,230 --> 00:36:09,190
tmpfs for that why well because that

00:36:06,820 --> 00:36:13,180
allows me in most cases to use memory

00:36:09,190 --> 00:36:16,030
for temporary files and only go to swap

00:36:13,180 --> 00:36:20,500
space if I start to consume too much

00:36:16,030 --> 00:36:23,260
memory like often on many Linux system

00:36:20,500 --> 00:36:26,950
you can just use already to make this

00:36:23,260 --> 00:36:31,000
kind of shared memory space which is

00:36:26,950 --> 00:36:36,340
already created mountain for you my some

00:36:31,000 --> 00:36:38,830
options key buffer size this is a cash

00:36:36,340 --> 00:36:42,099
for my some tables anybody here still

00:36:38,830 --> 00:36:44,890
using my some tables anybody come on

00:36:42,099 --> 00:36:47,140
don't be shy that's okay that's okay if

00:36:44,890 --> 00:36:50,320
you are just lager than this you know

00:36:47,140 --> 00:36:52,619
technology used curve well we also still

00:36:50,320 --> 00:37:01,330
use my son that is an important butter

00:36:52,619 --> 00:37:04,150
it's it caches my squirrel it is a cache

00:37:01,330 --> 00:37:05,530
which catches my some indexes and index

00:37:04,150 --> 00:37:10,300
is only right it doesn't catch us the

00:37:05,530 --> 00:37:13,180
data for my exam tables if you using

00:37:10,300 --> 00:37:15,339
only my some tables you may want to set

00:37:13,180 --> 00:37:18,339
it up to something like thirty percent

00:37:15,339 --> 00:37:20,440
of memory if not if you use my some and

00:37:18,339 --> 00:37:22,260
in gb as a mix or something you

00:37:20,440 --> 00:37:27,040
typically want to set it to a lot

00:37:22,260 --> 00:37:28,750
smaller spaces Silas I often set it to

00:37:27,040 --> 00:37:30,580
something like sixty four mags to make

00:37:28,750 --> 00:37:33,790
sure there is enough space for my

00:37:30,580 --> 00:37:36,220
temporary tables if I needed my son

00:37:33,790 --> 00:37:38,950
recover that is something which after my

00:37:36,220 --> 00:37:43,570
tea is enabled to automatically check

00:37:38,950 --> 00:37:46,000
and repair corrupted my some tables very

00:37:43,570 --> 00:37:47,440
nice options right because you don't

00:37:46,000 --> 00:37:49,780
really want to

00:37:47,440 --> 00:37:51,760
around with corrupted my some tables

00:37:49,780 --> 00:37:55,180
after crash because a result can be

00:37:51,760 --> 00:37:57,310
quite an unpredictable but at the same

00:37:55,180 --> 00:38:00,030
time you have to be careful you go to

00:37:57,310 --> 00:38:02,650
the practical limits right if you have

00:38:00,030 --> 00:38:05,230
high native gigabyte if you know many

00:38:02,650 --> 00:38:07,390
many tables in my son if I start my

00:38:05,230 --> 00:38:10,390
school if this option I will probably

00:38:07,390 --> 00:38:12,430
have it trying to check and repair tens

00:38:10,390 --> 00:38:15,040
of tables at the same time which will be

00:38:12,430 --> 00:38:17,740
very very slow so if I'm running the

00:38:15,040 --> 00:38:20,590
instance if a large amount of my son I

00:38:17,740 --> 00:38:23,620
would rather have some custom start

00:38:20,590 --> 00:38:26,020
scripts which would sort of check and

00:38:23,620 --> 00:38:28,120
repair all the mine some tables before

00:38:26,020 --> 00:38:30,580
getting my school online right maybe

00:38:28,120 --> 00:38:33,690
something like start to skip networking

00:38:30,580 --> 00:38:36,820
run with check and then started back on

00:38:33,690 --> 00:38:39,700
into the neural port and the mine some

00:38:36,820 --> 00:38:42,850
sort buffer size this is the buffer

00:38:39,700 --> 00:38:45,040
which my son will use for check repair

00:38:42,850 --> 00:38:49,330
and optimize table you can set that up

00:38:45,040 --> 00:38:52,510
to a few gigabytes in size if you have

00:38:49,330 --> 00:38:56,800
to another important options is low

00:38:52,510 --> 00:38:58,980
priority updates this helps make in mind

00:38:56,800 --> 00:39:02,320
some tables a little bit more concurrent

00:38:58,980 --> 00:39:04,690
you can't really do anything about the

00:39:02,320 --> 00:39:06,820
my skill having a table level locks but

00:39:04,690 --> 00:39:09,910
you have low priority updates then

00:39:06,820 --> 00:39:13,210
single waiting update want to prevent

00:39:09,910 --> 00:39:17,500
all other selects from starting that in

00:39:13,210 --> 00:39:20,740
Tehran right so that's an good good

00:39:17,500 --> 00:39:22,450
variable to to work with and Vulcans of

00:39:20,740 --> 00:39:24,400
buffer size something you may increase

00:39:22,450 --> 00:39:27,070
it have a very large bulk insert

00:39:24,400 --> 00:39:28,890
statements for my some tables but it

00:39:27,070 --> 00:39:34,440
only half of this kind of statements

00:39:28,890 --> 00:39:37,600
okay energy beam energy here is

00:39:34,440 --> 00:39:40,000
significantly more to in variables but

00:39:37,600 --> 00:39:42,340
you may not need to change many of em

00:39:40,000 --> 00:39:44,800
ever the most important one is the

00:39:42,340 --> 00:39:46,810
energy buffer pool science and this is

00:39:44,800 --> 00:39:48,610
essentially what you buy your stereo

00:39:46,810 --> 00:39:51,160
memory for if you Ryan energy be right

00:39:48,610 --> 00:39:52,490
you get another 16 gigs of memory well

00:39:51,160 --> 00:39:54,650
that's very

00:39:52,490 --> 00:39:56,330
you will spend them to have large energy

00:39:54,650 --> 00:39:59,180
buffer pool size it's extremely

00:39:56,330 --> 00:40:00,290
important for for performance typically

00:39:59,180 --> 00:40:02,720
we will use something like eighty

00:40:00,290 --> 00:40:04,730
percent of memory sometimes for educated

00:40:02,720 --> 00:40:06,550
my school instance sometimes on large

00:40:04,730 --> 00:40:09,170
memory size you can go to the favor

00:40:06,550 --> 00:40:11,420
energy buffer pool instances that helps

00:40:09,170 --> 00:40:15,020
us to reduce contention and you want to

00:40:11,420 --> 00:40:18,040
set that to four or more that's in new

00:40:15,020 --> 00:40:22,060
version new variable in nine square 55

00:40:18,040 --> 00:40:25,390
energy be log buffer size this is a

00:40:22,060 --> 00:40:27,950
buffer for right into the log file the

00:40:25,390 --> 00:40:32,930
values between four and hundred twenty

00:40:27,950 --> 00:40:35,300
eight mins make sense and what is

00:40:32,930 --> 00:40:38,240
important here to note it's not all only

00:40:35,300 --> 00:40:41,990
depends on amount helps with avoiding

00:40:38,240 --> 00:40:44,060
the excessive kind of rides log flashes

00:40:41,990 --> 00:40:47,180
but it also internally healthy

00:40:44,060 --> 00:40:49,310
contentions when they go in over 16 eggs

00:40:47,180 --> 00:40:54,560
typically that is not the cause of

00:40:49,310 --> 00:40:58,790
flashes but to travel contention in a

00:40:54,560 --> 00:41:01,970
DVI bookmark sighs this is their size

00:40:58,790 --> 00:41:05,000
which limits the size of the insert

00:41:01,970 --> 00:41:09,410
buffer in energy V this is a buffer

00:41:05,000 --> 00:41:11,240
which helps with inserts updates and

00:41:09,410 --> 00:41:12,770
deletes for very large tables on

00:41:11,240 --> 00:41:15,500
conventional hard drives right which

00:41:12,770 --> 00:41:20,150
have a lot of see it helps to reduce the

00:41:15,500 --> 00:41:22,850
six now if you're Ryan SSDs often you

00:41:20,150 --> 00:41:26,030
would want to reduce that memory because

00:41:22,850 --> 00:41:30,920
for ssds it makes more sense to use

00:41:26,030 --> 00:41:33,830
buffer buffer pool for caches right

00:41:30,920 --> 00:41:36,260
revenue inside buffer and inside buffer

00:41:33,830 --> 00:41:40,869
is allocated out of energy buffer pool

00:41:36,260 --> 00:41:44,349
size right it's not a separate buffer ok

00:41:40,869 --> 00:41:47,349
another important values flash log the

00:41:44,349 --> 00:41:52,420
t-rex commit that is variables which

00:41:47,349 --> 00:41:56,019
helps us with the durability the

00:41:52,420 --> 00:41:58,799
variable one means fully durable value

00:41:56,019 --> 00:42:01,839
variable 2 and 0 means not so durable

00:41:58,799 --> 00:42:03,339
typically value to is their best option

00:42:01,839 --> 00:42:06,990
which kind of offers us a compromise

00:42:03,339 --> 00:42:10,359
between performance and durability

00:42:06,990 --> 00:42:14,440
energy flash method defines how energy

00:42:10,359 --> 00:42:17,230
we desire in majority of cases it is

00:42:14,440 --> 00:42:20,289
especially at this point of my school 55

00:42:17,230 --> 00:42:22,930
you said that 20 direct right that helps

00:42:20,289 --> 00:42:26,710
you with performance over long run has

00:42:22,930 --> 00:42:28,539
some other benefits in a DB after L are

00:42:26,710 --> 00:42:32,200
you dump this is actually work on a

00:42:28,539 --> 00:42:36,039
server our a variant of MySQL feature

00:42:32,200 --> 00:42:38,470
which helps to warm up quickly right you

00:42:36,039 --> 00:42:40,480
may know if you operate my school on the

00:42:38,470 --> 00:42:42,519
very large memory size and then you

00:42:40,480 --> 00:42:45,519
started and the buffer pool content is

00:42:42,519 --> 00:42:47,680
lost it may take it a lot of time to get

00:42:45,519 --> 00:42:50,130
to a decent performance that option

00:42:47,680 --> 00:42:53,980
allows to reduce our time dramatically

00:42:50,130 --> 00:42:56,259
and energy bi or capacity is variable

00:42:53,980 --> 00:42:58,690
which students how much I owe in a DV

00:42:56,259 --> 00:43:01,749
should expect from the hard drives right

00:42:58,690 --> 00:43:04,239
so you should set that up to approximate

00:43:01,749 --> 00:43:07,630
value of how many iOS UI or subsystem

00:43:04,239 --> 00:43:09,670
can handle read I own RIT of Fred's

00:43:07,630 --> 00:43:12,339
variable which specifies number of

00:43:09,670 --> 00:43:14,680
threads to my supposed to do is for your

00:43:12,339 --> 00:43:17,289
I oh I would say in the new versions of

00:43:14,680 --> 00:43:19,180
MySQL 55 you want just to leave them

00:43:17,289 --> 00:43:21,640
alone because it uses a synchronous i/o

00:43:19,180 --> 00:43:25,630
anyway so default number of riders

00:43:21,640 --> 00:43:28,539
typically just fine energy flash

00:43:25,630 --> 00:43:32,380
neighbor pages that is an interesting

00:43:28,539 --> 00:43:34,660
variable specifies how energy optimizes

00:43:32,380 --> 00:43:39,549
I on what is the most important to know

00:43:34,660 --> 00:43:41,589
what that is if using SSD set that to 20

00:43:39,549 --> 00:43:43,770
because there is no point of trying to

00:43:41,589 --> 00:43:48,270
merge request together as

00:43:43,770 --> 00:43:50,430
there is no 64 solid-state storage log

00:43:48,270 --> 00:43:54,450
file size this is the size of redo log

00:43:50,430 --> 00:43:58,200
file you want that to be a rather large

00:43:54,450 --> 00:43:59,730
right the lies you get it the right

00:43:58,200 --> 00:44:02,010
performance your database you'll be able

00:43:59,730 --> 00:44:05,100
to handle but the longer your recovery

00:44:02,010 --> 00:44:07,020
time will take if you have a crash so

00:44:05,100 --> 00:44:09,330
that is something you have one to

00:44:07,020 --> 00:44:11,430
balance and in many key is simply check

00:44:09,330 --> 00:44:14,310
right but seen how long do I scoville

00:44:11,430 --> 00:44:16,830
recover log files and group i will leave

00:44:14,310 --> 00:44:21,140
the default oh and then energy falter

00:44:16,830 --> 00:44:21,140
table this is an yeah

00:44:34,380 --> 00:44:40,390
no I mean essentially it is like there

00:44:38,559 --> 00:44:42,309
is no difference more than filesystems

00:44:40,390 --> 00:44:44,410
deal with phil large files pretty

00:44:42,309 --> 00:44:46,480
reasonably I typically just leave it to

00:44:44,410 --> 00:45:04,000
log files which is default and just work

00:44:46,480 --> 00:45:05,950
with a local file size well yeah but the

00:45:04,000 --> 00:45:07,900
thing here is a log files and Tony are

00:45:05,950 --> 00:45:11,519
concatenated anyway right so that

00:45:07,900 --> 00:45:14,470
doesn't have anything to do at problem

00:45:11,519 --> 00:45:17,259
right so flashes have to happen in the

00:45:14,470 --> 00:45:20,859
table spaces right not to the log files

00:45:17,259 --> 00:45:22,420
so then the flash happens is then you

00:45:20,859 --> 00:45:26,920
have to do flashes from buffer pool to a

00:45:22,420 --> 00:45:29,259
data files okay now energy files per

00:45:26,920 --> 00:45:33,990
table that is also pretty good option to

00:45:29,259 --> 00:45:40,329
have which helps us to you to keep mysql

00:45:33,990 --> 00:45:42,549
in each table in in its own file instead

00:45:40,329 --> 00:45:47,799
of just one guy insured tablespace and

00:45:42,549 --> 00:45:50,680
in most cases that is a very good good

00:45:47,799 --> 00:45:52,509
thing to do all right unless you again

00:45:50,680 --> 00:45:55,180
have very large amount of tables if you

00:45:52,509 --> 00:45:57,339
have all the 50,000 tables I will think

00:45:55,180 --> 00:46:00,609
about that in our case I will just use

00:45:57,339 --> 00:46:03,309
for outdoor table energy fire data file

00:46:00,609 --> 00:46:06,400
path defined where table main table

00:46:03,309 --> 00:46:12,269
space is going to be to be located

00:46:06,400 --> 00:46:12,269
typically just leave that now at default

00:46:12,420 --> 00:46:18,069
energy bill low great time out is also

00:46:16,059 --> 00:46:20,470
something you typically would like to

00:46:18,069 --> 00:46:23,259
wait to 40-fold sometimes you want to

00:46:20,470 --> 00:46:24,849
reduce it to smaller numbers for

00:46:23,259 --> 00:46:28,509
interactive applications that you don't

00:46:24,849 --> 00:46:30,250
want to have to long waits for rose then

00:46:28,509 --> 00:46:33,039
they can be locked right for whatever

00:46:30,250 --> 00:46:35,890
reason in the gpo blocks time right that

00:46:33,039 --> 00:46:37,359
is an interest in variable which few

00:46:35,890 --> 00:46:39,830
people know about that that can really

00:46:37,359 --> 00:46:43,010
help a lot it if the effective

00:46:39,830 --> 00:46:44,720
usage especially if you have some bulky

00:46:43,010 --> 00:46:46,970
queries like bad jokes which otherwise

00:46:44,720 --> 00:46:48,500
would wash away buffer pool right so

00:46:46,970 --> 00:46:54,440
staging that does something like a

00:46:48,500 --> 00:46:56,990
thousand is very good good value in a

00:46:54,440 --> 00:47:00,170
defiled format were able to find switch

00:46:56,990 --> 00:47:02,690
format is to use until Opie default or

00:47:00,170 --> 00:47:04,940
you can often want to set it to boricua

00:47:02,690 --> 00:47:07,220
which allows you to use some advantage

00:47:04,940 --> 00:47:09,740
energy be features such as compression

00:47:07,220 --> 00:47:12,800
right that is typically why people

00:47:09,740 --> 00:47:17,560
change it to to barracuda and file per

00:47:12,800 --> 00:47:22,130
table in a DB starts on metadata that is

00:47:17,560 --> 00:47:24,860
also important very able to deal with

00:47:22,130 --> 00:47:27,220
which few people know about did you ever

00:47:24,860 --> 00:47:32,020
experience slowness with working with

00:47:27,220 --> 00:47:36,050
information schema in nice girl anybody

00:47:32,020 --> 00:47:39,200
well if you have very salient is very

00:47:36,050 --> 00:47:40,490
able to zero that probably will will

00:47:39,200 --> 00:47:44,480
help you to speed up a lot if

00:47:40,490 --> 00:47:48,140
essentially know that side effects some

00:47:44,480 --> 00:47:50,150
visibility options i would say log slope

00:47:48,140 --> 00:47:55,100
where is the slope at a time that is

00:47:50,150 --> 00:47:58,580
your biggest friends I think working the

00:47:55,100 --> 00:48:02,500
fair slope a log right performance knife

00:47:58,580 --> 00:48:05,960
is the most powerful my school features

00:48:02,500 --> 00:48:07,880
okay and I'm teaching some reminders

00:48:05,960 --> 00:48:11,900
from I back but I better speed up and

00:48:07,880 --> 00:48:14,510
get out right so i will still answer

00:48:11,900 --> 00:48:17,660
your questions but probably outside of

00:48:14,510 --> 00:48:19,160
going to catching another important

00:48:17,660 --> 00:48:21,800
variable that you want the checkpoint is

00:48:19,160 --> 00:48:24,110
a user start runnin this variable

00:48:21,800 --> 00:48:26,210
hollows it which is available in the

00:48:24,110 --> 00:48:29,690
corner server allows you to track which

00:48:26,210 --> 00:48:31,930
tables and indexes are actively accessed

00:48:29,690 --> 00:48:35,050
that is a very

00:48:31,930 --> 00:48:40,240
very helpful to understand your workload

00:48:35,050 --> 00:48:44,050
of mysql okay you know right on time if

00:48:40,240 --> 00:48:47,490
a summary that's my email if you want to

00:48:44,050 --> 00:48:51,220
have some follow-up questions being sent

00:48:47,490 --> 00:48:56,140
yes somebody mentioned before we are

00:48:51,220 --> 00:48:59,230
hiring if you are with my school and I

00:48:56,140 --> 00:49:02,110
also wanted to note a randomized school

00:48:59,230 --> 00:49:05,380
conference later this year in New York

00:49:02,110 --> 00:49:08,050
and we would love to see you there if

00:49:05,380 --> 00:49:10,650
you want to learn more about my spell

00:49:08,050 --> 00:49:10,650
thank you

00:49:20,680 --> 00:49:27,160
how's that sigh every way this is the

00:49:23,859 --> 00:49:29,319
way to better utilize all your resources

00:49:27,160 --> 00:49:32,770
and it makes managing all your resources

00:49:29,319 --> 00:49:36,630
pretty easy all of the innovation is

00:49:32,770 --> 00:49:40,089
happening in open source the

00:49:36,630 --> 00:49:41,920
collaborative nature and of the you know

00:49:40,089 --> 00:49:44,050
of the community and the speed at which

00:49:41,920 --> 00:49:46,030
these are these you know these these

00:49:44,050 --> 00:49:48,369
deficiencies these bugs are getting

00:49:46,030 --> 00:49:51,190
discovered and then fixed is it I think

00:49:48,369 --> 00:49:54,190
that really shows the power of the of

00:49:51,190 --> 00:49:56,640
the open source community it is global

00:49:54,190 --> 00:50:00,190
and it's definitely because of the users

00:49:56,640 --> 00:50:06,160
community people are extremely friendly

00:50:00,190 --> 00:50:07,869
and always ready to help if you go on

00:50:06,160 --> 00:50:10,089
tire see any day you'll see these guys

00:50:07,869 --> 00:50:12,730
helping each other out and they're all

00:50:10,089 --> 00:50:14,410
doing it like in a selfless manner the

00:50:12,730 --> 00:50:17,430
product is transparent for everyone

00:50:14,410 --> 00:50:20,619
everyone can look at the code base

00:50:17,430 --> 00:50:22,829
everyone can see how cloud tech is being

00:50:20,619 --> 00:50:28,329
built nothing nothing is proprietary

00:50:22,829 --> 00:50:30,940
everything is open in many ways it's

00:50:28,329 --> 00:50:35,440
absolutely vital to the the unborn

00:50:30,940 --> 00:50:39,640
health I'll stack the most exciting

00:50:35,440 --> 00:50:42,450
event in recent memory for he was our

00:50:39,640 --> 00:50:45,119
first developer boot camp

00:50:42,450 --> 00:50:47,760
and our call gave people a gave me two

00:50:45,119 --> 00:50:51,630
weeks notice to come attend I was

00:50:47,760 --> 00:50:55,890
expecting 25 or 30 people so if we ended

00:50:51,630 --> 00:50:58,740
up with 87 people and had to go get more

00:50:55,890 --> 00:51:01,260
chairs in the room twice everything

00:50:58,740 --> 00:51:04,530
within cloud computing is commodity and

00:51:01,260 --> 00:51:07,589
is open source and so I don't think that

00:51:04,530 --> 00:51:09,329
you will you'll see anywhere where open

00:51:07,589 --> 00:51:12,359
source is not pervasive in cloud

00:51:09,329 --> 00:51:15,089
computing and so i think it's i think

00:51:12,359 --> 00:51:16,440
it's an assumption i think when you talk

00:51:15,089 --> 00:51:17,550
about cloud computing you're really

00:51:16,440 --> 00:51:23,099
talking about open source cloud

00:51:17,550 --> 00:51:26,250
computing cloud sac is a robust solution

00:51:23,099 --> 00:51:28,650
for large deployments you have dozens of

00:51:26,250 --> 00:51:32,579
data centers and thousands of servers in

00:51:28,650 --> 00:51:35,220
each data center is these hardware is

00:51:32,579 --> 00:51:38,700
going to fail and CloudStack is designed

00:51:35,220 --> 00:51:41,430
to handle number one that mass scale

00:51:38,700 --> 00:51:44,579
number two it's designed to handle the

00:51:41,430 --> 00:51:47,430
failure that inevitably happens in large

00:51:44,579 --> 00:51:51,660
deployments started working on pod tech

00:51:47,430 --> 00:51:54,930
over four years ago and it was the

00:51:51,660 --> 00:51:56,700
original set of people working on it had

00:51:54,930 --> 00:52:00,810
a background of delivering software

00:51:56,700 --> 00:52:05,040
telcos and service providers lots of QA

00:52:00,810 --> 00:52:08,670
lots of users actually using it high

00:52:05,040 --> 00:52:11,730
availability is a key feature multiple

00:52:08,670 --> 00:52:13,920
hypervisors support different network

00:52:11,730 --> 00:52:16,920
models we can pick up whatever suits you

00:52:13,920 --> 00:52:18,690
better well step management server can

00:52:16,920 --> 00:52:22,380
be deployed in different physical

00:52:18,690 --> 00:52:24,030
machines it definitely has a huge

00:52:22,380 --> 00:52:29,040
footprint it's being deployed everywhere

00:52:24,030 --> 00:52:31,619
there's a major movie studio that they

00:52:29,040 --> 00:52:34,800
were using cloudstack they were using it

00:52:31,619 --> 00:52:36,900
to transcode video and I thought that

00:52:34,800 --> 00:52:38,550
was terribly fascinating what I found

00:52:36,900 --> 00:52:41,790
more fascinating is what they did during

00:52:38,550 --> 00:52:44,579
lunch where they would spin up you know

00:52:41,790 --> 00:52:45,780
50 or 60 game servers then as soon as

00:52:44,579 --> 00:52:47,580
lunch was over they would

00:52:45,780 --> 00:52:51,720
all the instances and go back to doing

00:52:47,580 --> 00:52:53,340
real work CloudStack is vast it touches

00:52:51,720 --> 00:52:55,440
so many different aspects and there's no

00:52:53,340 --> 00:52:57,810
one person that's kind of like a master

00:52:55,440 --> 00:53:01,920
of all those realms I think clouds stack

00:52:57,810 --> 00:53:04,140
as a project is going to be one of the

00:53:01,920 --> 00:53:08,190
leaders simply because it's some of the

00:53:04,140 --> 00:53:13,620
most feature fallen and and robust

00:53:08,190 --> 00:53:16,550
platforms out they were Adam senior

00:53:13,620 --> 00:53:16,550
living through the clouds dag

00:53:29,349 --> 00:53:31,410
you

00:53:34,740 --> 00:53:39,819
when we created a stir discover a decade

00:53:37,450 --> 00:53:41,769
ago we could not have imagined that

00:53:39,819 --> 00:53:43,960
asterisk would not only become the most

00:53:41,769 --> 00:53:46,089
widely adopted open source communication

00:53:43,960 --> 00:53:48,130
software on the planet but that it would

00:53:46,089 --> 00:53:50,650
impact the entire industry in the way

00:53:48,130 --> 00:53:52,630
that it has today asterisk has found its

00:53:50,650 --> 00:53:55,269
way in the more than 170 countries and

00:53:52,630 --> 00:53:57,220
virtually every fortune 1000 company the

00:53:55,269 --> 00:53:59,289
success of asterisk has enabled a

00:53:57,220 --> 00:54:00,730
transition of power from the hands of

00:53:59,289 --> 00:54:02,980
the traditional proprietary phone

00:54:00,730 --> 00:54:05,380
vendors into the hands of the users and

00:54:02,980 --> 00:54:07,329
administrators of phone systems using

00:54:05,380 --> 00:54:08,559
this power our customers have created

00:54:07,329 --> 00:54:10,509
all sorts of business changing

00:54:08,559 --> 00:54:12,339
applications from small office phone

00:54:10,509 --> 00:54:14,859
systems to mission-critical call centers

00:54:12,339 --> 00:54:16,480
the international carrier networks in

00:54:14,859 --> 00:54:18,250
fact there's even an entire country

00:54:16,480 --> 00:54:20,859
those communications infrastructure runs

00:54:18,250 --> 00:54:22,779
on esters the gym has always been about

00:54:20,859 --> 00:54:24,490
creating technology that expands

00:54:22,779 --> 00:54:26,650
communications capabilities in ways that

00:54:24,490 --> 00:54:27,849
we could never have imagined and that's

00:54:26,650 --> 00:54:30,250
part of what's game-changing about

00:54:27,849 --> 00:54:32,950
Digium today we're doing it again this

00:54:30,250 --> 00:54:35,049
time by introducing a new family of HD

00:54:32,950 --> 00:54:37,150
IP phones that extends control of the

00:54:35,049 --> 00:54:38,920
user all the way to the desktop the

00:54:37,150 --> 00:54:40,630
launch of these new products represents

00:54:38,920 --> 00:54:42,730
the next phase indigenous history of

00:54:40,630 --> 00:54:45,130
innovation these are the first and only

00:54:42,730 --> 00:54:46,839
IP phones designed to fully leverage the

00:54:45,130 --> 00:54:48,369
power of estrus when we first discussed

00:54:46,839 --> 00:54:50,410
our expectations for building a family

00:54:48,369 --> 00:54:52,569
of phones for use with asterisk our

00:54:50,410 --> 00:54:54,309
requirements were pretty simple we asked

00:54:52,569 --> 00:54:55,930
the team to build the phones such that

00:54:54,309 --> 00:54:58,150
they were easy to install integrate

00:54:55,930 --> 00:54:59,980
provision and use I think you'll soon

00:54:58,150 --> 00:55:02,559
agree our engineers have delivered on

00:54:59,980 --> 00:55:04,180
that goal user feedback is validating

00:55:02,559 --> 00:55:06,309
that when it comes to operation with

00:55:04,180 --> 00:55:08,740
astro space systems including our own

00:55:06,309 --> 00:55:11,289
Switchvox based product these are the

00:55:08,740 --> 00:55:12,609
easiest to use best integrated most

00:55:11,289 --> 00:55:15,190
interoperable products on the market

00:55:12,609 --> 00:55:17,190
today the digitally phones will

00:55:15,190 --> 00:55:19,240
initially include three IP des hommes

00:55:17,190 --> 00:55:21,190
uniquely designed to complement any

00:55:19,240 --> 00:55:23,049
asterisks or Switchvox based solution

00:55:21,190 --> 00:55:25,720
these phones are different for a number

00:55:23,049 --> 00:55:28,390
of reasons first there is clue sively

00:55:25,720 --> 00:55:29,799
designed for use with esters secondly

00:55:28,390 --> 00:55:31,410
we've made it really easy to

00:55:29,799 --> 00:55:33,819
autodiscover and provision the phones

00:55:31,410 --> 00:55:35,890
next we've made it easy for the phones

00:55:33,819 --> 00:55:37,500
to access information inside of asterisk

00:55:35,890 --> 00:55:39,440
allowing tight coupling

00:55:37,500 --> 00:55:41,400
between an application and the phone

00:55:39,440 --> 00:55:43,590
additionally we've created an

00:55:41,400 --> 00:55:45,690
applications engine that allows users

00:55:43,590 --> 00:55:48,300
and developers to create and run their

00:55:45,690 --> 00:55:50,370
own apps on the following and finally

00:55:48,300 --> 00:55:52,440
we've done all of this at a very

00:55:50,370 --> 00:55:54,120
compelling price point at Digium we're

00:55:52,440 --> 00:55:55,890
always thinking of ways to give our

00:55:54,120 --> 00:55:58,260
customers the best value in business

00:55:55,890 --> 00:56:00,210
phone systems and also give them the

00:55:58,260 --> 00:56:02,280
power to create their own solutions or

00:56:00,210 --> 00:56:04,170
any communications challenge well

00:56:02,280 --> 00:56:05,850
continue to push the boundaries not only

00:56:04,170 --> 00:56:07,920
to make Astra's cooler faster and more

00:56:05,850 --> 00:56:09,660
technologically feature-rich but to make

00:56:07,920 --> 00:56:12,210
asterisk and communications even easier

00:56:09,660 --> 00:56:15,710
and together we'll change the way the

00:56:12,210 --> 00:56:15,710

YouTube URL: https://www.youtube.com/watch?v=0UKQHfQBgr4


