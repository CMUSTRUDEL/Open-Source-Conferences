Title: 2012 SouthEast LinuxFest - Daniel Bartholomew - Anatomy of an Open Source Release
Publication date: 2013-05-06
Playlist: 2012 SouthEast LinuxFest
Description: 
	2012 SouthEast LinuxFest
Daniel Bartholomew
Anatomy of an Open Source Release
Captions: 
	00:00:00,000 --> 00:00:05,279
the following presentation was recorded

00:00:02,490 --> 00:00:08,040
the 2012 southeast linux fest in

00:00:05,279 --> 00:00:10,410
charlotte north carolina it is licensed

00:00:08,040 --> 00:00:12,090
under a creative commons license for

00:00:10,410 --> 00:00:16,859
more information about the southeast

00:00:12,090 --> 00:00:19,230
linux fest visit www.lend expense org

00:00:16,859 --> 00:00:21,320
the southeast linux fest would like to

00:00:19,230 --> 00:00:23,279
thank the following diamond sponsors in

00:00:21,320 --> 00:00:33,570
2012 for helping make these videos

00:00:23,279 --> 00:00:37,890
possible ok hello everyone my name is

00:00:33,570 --> 00:00:40,980
Daniel Bartholomew welcome to anatomy of

00:00:37,890 --> 00:00:43,469
an open source release I work for a

00:00:40,980 --> 00:00:47,539
company called Monte program we make a

00:00:43,469 --> 00:00:50,309
product called Maria DB but that's not

00:00:47,539 --> 00:00:53,699
what this talk is about really be just

00:00:50,309 --> 00:00:57,210
to be brief is a enhanced drop in

00:00:53,699 --> 00:00:58,489
replacement for mysql we'll be having a

00:00:57,210 --> 00:01:02,039
ball eight ER on this evening

00:00:58,489 --> 00:01:06,360
seven-thirty in the HP room where we

00:01:02,039 --> 00:01:07,979
will be me and a few of the people from

00:01:06,360 --> 00:01:09,540
sky schoo will be there can answer all

00:01:07,979 --> 00:01:15,630
your questions about maria DB if you

00:01:09,540 --> 00:01:18,869
have any this talk is well let's start

00:01:15,630 --> 00:01:21,720
with an open source open source project

00:01:18,869 --> 00:01:29,869
open source begins and for some people

00:01:21,720 --> 00:01:32,369
ends with the source code right and the

00:01:29,869 --> 00:01:34,409
output of this source code when you run

00:01:32,369 --> 00:01:37,710
it through a compiler is you either end

00:01:34,409 --> 00:01:39,240
up with binary that you then tore up and

00:01:37,710 --> 00:01:42,570
you can distribute that or you end up

00:01:39,240 --> 00:01:46,649
with a package RPM package a debian

00:01:42,570 --> 00:01:49,290
package whatever and so at some point

00:01:46,649 --> 00:01:51,119
you have to go from the source code to

00:01:49,290 --> 00:02:00,299
the package and that's what this talk is

00:01:51,119 --> 00:02:02,579
about sodes that begs the question why

00:02:00,299 --> 00:02:05,540
do we even bother with packages at all

00:02:02,579 --> 00:02:08,310
why can't you just take the source code

00:02:05,540 --> 00:02:10,920
tarde up into a tarball and stamp done

00:02:08,310 --> 00:02:12,780
on it and call it a day well there's

00:02:10,920 --> 00:02:13,830
they're always going to be some people

00:02:12,780 --> 00:02:17,460
out there

00:02:13,830 --> 00:02:21,300
who don't mind compiling everything but

00:02:17,460 --> 00:02:23,850
for many people they either don't know

00:02:21,300 --> 00:02:29,970
how to compile the software themselves

00:02:23,850 --> 00:02:31,680
or they just don't have the time I have

00:02:29,970 --> 00:02:34,410
happily compiled many pieces of software

00:02:31,680 --> 00:02:36,620
in my day but for day-to-day use aloft

00:02:34,410 --> 00:02:39,270
many times I just don't want to bother

00:02:36,620 --> 00:02:46,170
I'd rather get the package from the

00:02:39,270 --> 00:02:48,750
developer and install it install that so

00:02:46,170 --> 00:02:51,270
for the Murray to be project we try to

00:02:48,750 --> 00:02:57,000
provide packages for as many projects as

00:02:51,270 --> 00:02:58,530
we can without them you know going

00:02:57,000 --> 00:03:01,860
overboard I mean we have a finite amount

00:02:58,530 --> 00:03:03,900
of resources right so we for as many

00:03:01,860 --> 00:03:05,490
package for as many different operating

00:03:03,900 --> 00:03:07,050
systems many district distributions as

00:03:05,490 --> 00:03:09,930
we can we try to provide packages as

00:03:07,050 --> 00:03:15,450
many ways you can realistically do so

00:03:09,930 --> 00:03:19,050
the centerpiece of our build and test

00:03:15,450 --> 00:03:23,880
system is a product called buildbot we

00:03:19,050 --> 00:03:30,930
use that to automate our maria DB build

00:03:23,880 --> 00:03:32,970
test repeat cycle what Bill but does is

00:03:30,930 --> 00:03:35,310
build bought watches oh you can find out

00:03:32,970 --> 00:03:38,430
more about buildbot at their website I'm

00:03:35,310 --> 00:03:41,430
not a build about guru by any stretch so

00:03:38,430 --> 00:03:45,690
you can find out more about buildbot

00:03:41,430 --> 00:03:49,100
itself and the details about how to

00:03:45,690 --> 00:03:52,260
configure it for your own projects there

00:03:49,100 --> 00:03:55,680
so what Bill but does is it watches

00:03:52,260 --> 00:03:58,769
various trees we use then we need to be

00:03:55,680 --> 00:04:00,870
project uses launchpad and when I say

00:03:58,769 --> 00:04:03,930
Bill bought watches the various trees

00:04:00,870 --> 00:04:08,550
what that is is we have a special Maria

00:04:03,930 --> 00:04:11,820
DB buildbot user on launch pad and that

00:04:08,550 --> 00:04:14,580
Maria DB Bill bought user is subscribed

00:04:11,820 --> 00:04:16,739
on launch pad to those trees and every

00:04:14,580 --> 00:04:20,070
time a developer pushes into one of

00:04:16,739 --> 00:04:22,200
those trees an email gets sent and then

00:04:20,070 --> 00:04:24,240
bill bot is just watching that incoming

00:04:22,200 --> 00:04:26,160
emails it sees the email and it knows

00:04:24,240 --> 00:04:29,220
okay we're

00:04:26,160 --> 00:04:30,900
for one of the 51 52 53 55 trees those

00:04:29,220 --> 00:04:33,590
are our standard trees and then it's

00:04:30,900 --> 00:04:36,870
also watching various developer trees

00:04:33,590 --> 00:04:38,040
the 55 Serb tree belongs to Sergey

00:04:36,870 --> 00:04:39,600
galoob chick who is one of our primary

00:04:38,040 --> 00:04:42,750
developers there's but there's a bunch

00:04:39,600 --> 00:04:48,120
of others that it watches and when it's

00:04:42,750 --> 00:04:49,920
when it sees an update it'll-it'll the

00:04:48,120 --> 00:04:51,840
email come in it'll see hey there's

00:04:49,920 --> 00:04:54,870
there's someone's pushed in to say the

00:04:51,840 --> 00:04:56,820
55 tree and so then what what it does

00:04:54,870 --> 00:04:59,970
bill bot has a client-server

00:04:56,820 --> 00:05:02,250
architecture so or master-slave

00:04:59,970 --> 00:05:04,230
architecture that's not as politically

00:05:02,250 --> 00:05:06,270
correct as it once was but there's

00:05:04,230 --> 00:05:08,580
there's a bunch of build slaves and then

00:05:06,270 --> 00:05:11,700
there's the bill bought master and so

00:05:08,580 --> 00:05:13,500
the bill but master says okay you need

00:05:11,700 --> 00:05:20,820
to build this here's what you need to

00:05:13,500 --> 00:05:22,920
build and then and then out comes the

00:05:20,820 --> 00:05:25,920
packages it's kind of a high-level

00:05:22,920 --> 00:05:28,020
overview of it for these build slaves we

00:05:25,920 --> 00:05:30,780
have a lot of them some of them are

00:05:28,020 --> 00:05:32,940
going to be physical boxes things like

00:05:30,780 --> 00:05:35,520
for our windows builds that's a physical

00:05:32,940 --> 00:05:38,490
server for our solaris builds that's a

00:05:35,520 --> 00:05:40,920
physical server for our mac OS builds

00:05:38,490 --> 00:05:44,120
that's of course a physical server but

00:05:40,920 --> 00:05:46,310
we have a lot more virtual servers

00:05:44,120 --> 00:05:51,060
especially for all of our Linux builds

00:05:46,310 --> 00:05:55,800
the virtual solution that we that we use

00:05:51,060 --> 00:05:59,900
is kvm and we use a wrapper around that

00:05:55,800 --> 00:06:03,090
we call it run vm which bill bot

00:05:59,900 --> 00:06:06,000
basically sends a command to run vm run

00:06:03,090 --> 00:06:08,090
vm handles spinning up the vm sending

00:06:06,000 --> 00:06:11,190
the vm the commands pulling out the

00:06:08,090 --> 00:06:14,850
output the package or the the binary

00:06:11,190 --> 00:06:16,680
whatever what have you run vm is open

00:06:14,850 --> 00:06:20,940
source we've released it under the GPL

00:06:16,680 --> 00:06:26,220
it's in our maria DB tools project on

00:06:20,940 --> 00:06:28,470
launch pad it is i I find it very handy

00:06:26,220 --> 00:06:33,890
it automates a lot of the the drudgery

00:06:28,470 --> 00:06:33,890
of trying to to manage all the VMS

00:06:37,260 --> 00:06:42,270
so basically what's happening with when

00:06:40,050 --> 00:06:45,920
Bill bought and run vm are interacting

00:06:42,270 --> 00:06:48,480
with these VMs is is taking the tarball

00:06:45,920 --> 00:06:52,920
the source star ball that you export

00:06:48,480 --> 00:06:56,040
from Bazaar the source source code

00:06:52,920 --> 00:06:59,070
management system that we use it takes

00:06:56,040 --> 00:07:01,850
that tar ball and it spins up of spins

00:06:59,070 --> 00:07:05,010
up of build vm that build vm then

00:07:01,850 --> 00:07:08,160
creates the package it could be a Debian

00:07:05,010 --> 00:07:11,730
package it could be a red hat package

00:07:08,160 --> 00:07:13,440
what have you and then what what Bill

00:07:11,730 --> 00:07:16,470
bought will do is it will take those

00:07:13,440 --> 00:07:18,960
packages it'll take it'll copy copy the

00:07:16,470 --> 00:07:21,000
source in to the vm copy the result out

00:07:18,960 --> 00:07:24,000
of the vm the package file and then

00:07:21,000 --> 00:07:27,000
it'll spin up new VMs we have VMs that

00:07:24,000 --> 00:07:31,760
are configured like say a base install

00:07:27,000 --> 00:07:34,530
of ubuntu 1200 for it'll spin up that

00:07:31,760 --> 00:07:37,890
it'll copy the packages in and it'll

00:07:34,530 --> 00:07:40,410
test installing maria DB on a base

00:07:37,890 --> 00:07:42,570
install of ubuntu and then they'll have

00:07:40,410 --> 00:07:44,580
another vm that has my SQL installed and

00:07:42,570 --> 00:07:45,960
it'll do this do that it'll have a vm

00:07:44,580 --> 00:07:49,140
that hasn't really be installed and

00:07:45,960 --> 00:07:50,400
you'll test upgrading just all sorts of

00:07:49,140 --> 00:07:53,550
different VMs in different

00:07:50,400 --> 00:07:55,920
configurations it'll spin those up it'll

00:07:53,550 --> 00:07:57,930
test and basically you'll either come

00:07:55,920 --> 00:08:01,080
back it succeeded or you'll come back it

00:07:57,930 --> 00:08:03,240
failed we also run the entire MySQL test

00:08:01,080 --> 00:08:06,180
suite which runs all sorts of various

00:08:03,240 --> 00:08:09,300
queries every time there's a bug

00:08:06,180 --> 00:08:12,270
reported we write a we write a test for

00:08:09,300 --> 00:08:15,120
that bug that can reliably trigger the

00:08:12,270 --> 00:08:16,800
bug so that we make sure that you know

00:08:15,120 --> 00:08:19,380
when the bugs fixed the test will pass

00:08:16,800 --> 00:08:21,720
and then also for any subsequent pushes

00:08:19,380 --> 00:08:25,590
you know week weakens we can find

00:08:21,720 --> 00:08:28,230
regressions very quickly the goal is to

00:08:25,590 --> 00:08:30,780
make sure that you know we want it we

00:08:28,230 --> 00:08:33,210
want it to be completely bug free even

00:08:30,780 --> 00:08:37,919
we even spent a good amount of time in

00:08:33,210 --> 00:08:39,840
when we were first prior to our first

00:08:37,919 --> 00:08:43,380
release of Maria DB getting rid of a lot

00:08:39,840 --> 00:08:45,210
of warnings we haven't eliminated all

00:08:43,380 --> 00:08:47,130
the warnings but we considered you know

00:08:45,210 --> 00:08:48,100
if it's warning us about something then

00:08:47,130 --> 00:08:50,449
you know

00:08:48,100 --> 00:08:52,250
likely there's something that's it's not

00:08:50,449 --> 00:08:54,769
quite right so we want to fix that too

00:08:52,250 --> 00:08:57,440
so we we try to spend a lot of time

00:08:54,769 --> 00:08:59,870
making sure that I've you know we want

00:08:57,440 --> 00:09:01,610
all the tests to pass not you know we

00:08:59,870 --> 00:09:03,410
don't want you know oh this test is

00:09:01,610 --> 00:09:06,079
failing but it's okay no that's not okay

00:09:03,410 --> 00:09:08,180
there's a reason the test exists you

00:09:06,079 --> 00:09:09,829
know I mean sure there could be a test

00:09:08,180 --> 00:09:12,290
that's wrong well then you fix the test

00:09:09,829 --> 00:09:14,480
you know and you want to get all the

00:09:12,290 --> 00:09:24,589
tests to pass and so buildbot helps us

00:09:14,480 --> 00:09:30,230
automatically built our buildbot is

00:09:24,589 --> 00:09:33,199
available publicly accessible URL it's

00:09:30,230 --> 00:09:34,850
one of these things we're sure we could

00:09:33,199 --> 00:09:37,430
put it behind a firewall or something

00:09:34,850 --> 00:09:40,940
but that's more work than just putting

00:09:37,430 --> 00:09:45,380
it up our developers need to access this

00:09:40,940 --> 00:09:48,529
so that they can debug things when when

00:09:45,380 --> 00:09:51,199
something fails so anyone can look at it

00:09:48,529 --> 00:09:52,160
if they want I mean a lot of the

00:09:51,199 --> 00:09:53,720
information is going to be boring

00:09:52,160 --> 00:09:58,130
especially when you know everything's

00:09:53,720 --> 00:10:04,399
hunky-dory but there was just no sense

00:09:58,130 --> 00:10:09,589
in hiding it oh now one thing that you

00:10:04,399 --> 00:10:11,870
can do we don't believe in secret sauce

00:10:09,589 --> 00:10:13,610
in open source you know there shouldn't

00:10:11,870 --> 00:10:15,170
be something magical that happens it's

00:10:13,610 --> 00:10:16,910
like well we do this and we do this we

00:10:15,170 --> 00:10:18,439
do this that's all open then we do this

00:10:16,910 --> 00:10:20,569
little magical bit and here's your

00:10:18,439 --> 00:10:22,790
product we don't believe in that in fact

00:10:20,569 --> 00:10:27,380
in buildbot you can click on any of

00:10:22,790 --> 00:10:32,259
these and so say I click on one of these

00:10:27,380 --> 00:10:35,209
this is the Builder that's building for

00:10:32,259 --> 00:10:37,130
Debian I know it's a Debian package its

00:10:35,209 --> 00:10:39,980
Ubuntu precise it's on amd64

00:10:37,130 --> 00:10:43,970
architecture it's building the five dot

00:10:39,980 --> 00:10:45,860
five tree and there was a there was a

00:10:43,970 --> 00:10:47,329
compile warning when it did the make

00:10:45,860 --> 00:10:50,420
dubstep I don't know if you can read

00:10:47,329 --> 00:10:52,009
that or not that compile warning you can

00:10:50,420 --> 00:10:54,170
go in you can click on that first link

00:10:52,009 --> 00:10:56,019
underneath that and you can see every

00:10:54,170 --> 00:10:58,939
single command that it got sent

00:10:56,019 --> 00:11:00,830
including the kvm command that spun up

00:10:58,939 --> 00:11:02,690
the vm

00:11:00,830 --> 00:11:05,420
see everything you know that it untoward

00:11:02,690 --> 00:11:08,330
the package its seed into the into the

00:11:05,420 --> 00:11:11,390
untoward directory it ran this Auto bake

00:11:08,330 --> 00:11:13,430
Debian sh script it you know you can see

00:11:11,390 --> 00:11:15,710
everything that it did there's no if you

00:11:13,430 --> 00:11:19,460
want to completely replicate how we

00:11:15,710 --> 00:11:21,760
build our packages it's all there very

00:11:19,460 --> 00:11:24,530
easy you're not very easy to get to well

00:11:21,760 --> 00:11:31,370
somewhat easy to get to but definitely

00:11:24,530 --> 00:11:34,220
not hidden so I'm going back to the

00:11:31,370 --> 00:11:36,560
going back to the web interface we we we

00:11:34,220 --> 00:11:39,200
run this cycle continuously it runs for

00:11:36,560 --> 00:11:41,510
every single push every time a developer

00:11:39,200 --> 00:11:44,420
does a commit and pushes it up to launch

00:11:41,510 --> 00:11:46,690
pad bill bought gets the email and fires

00:11:44,420 --> 00:11:49,010
it fires it off and does the builds

00:11:46,690 --> 00:11:53,630
naturally when whenever we comes time

00:11:49,010 --> 00:11:54,530
for a release we want to make sure that

00:11:53,630 --> 00:12:06,730
everything is grieved you have a

00:11:54,530 --> 00:12:06,730
question mmhmm yeah

00:12:12,899 --> 00:12:28,889
I mean how many distros to use yep

00:12:26,360 --> 00:12:31,410
basically basically the the built bill

00:12:28,889 --> 00:12:34,439
BOTS always running always running we

00:12:31,410 --> 00:12:38,069
have we have for the VMS we have to vm

00:12:34,439 --> 00:12:41,129
machines vm hosts we're going to we're

00:12:38,069 --> 00:12:43,050
going to add a third and basically all

00:12:41,129 --> 00:12:47,009
those vm host of doing is just it'll

00:12:43,050 --> 00:12:50,069
spin out it can spin up probably seven

00:12:47,009 --> 00:12:51,809
or eight VMS simultaneously and so it'll

00:12:50,069 --> 00:12:53,970
spin little spin all those up with

00:12:51,809 --> 00:12:56,100
various things you know it's it's

00:12:53,970 --> 00:12:58,079
parsing out the bill bots handling all

00:12:56,100 --> 00:13:00,720
that you know when does it spin things

00:12:58,079 --> 00:13:03,389
up and when does it take things down but

00:13:00,720 --> 00:13:05,040
it handles okay we run through we have a

00:13:03,389 --> 00:13:06,869
list of builders and you can see we have

00:13:05,040 --> 00:13:09,149
we have a bunch of Debian builders a

00:13:06,869 --> 00:13:11,970
bunch of ubuntu builders we have some

00:13:09,149 --> 00:13:13,980
fedora builders which sent OS fedora

00:13:11,970 --> 00:13:16,679
that's really hard to read but they were

00:13:13,980 --> 00:13:19,350
failing they're all of our rpm builders

00:13:16,679 --> 00:13:24,029
were failing this rpm builder wasn't and

00:13:19,350 --> 00:13:29,459
then some other other various ones so we

00:13:24,029 --> 00:13:33,029
try to have as many Ubuntu builders as

00:13:29,459 --> 00:13:35,100
ubuntu has supported versions you know

00:13:33,029 --> 00:13:37,649
so when when when when something in

00:13:35,100 --> 00:13:39,420
ubuntu goes you know stops getting

00:13:37,649 --> 00:13:46,910
security updates then we'll consider

00:13:39,420 --> 00:13:46,910
taking that one down mm-hmm

00:13:46,970 --> 00:13:54,769
it's built and packaged on in a bunch of

00:13:49,310 --> 00:13:56,689
1104 vm so so we we you know like i said

00:13:54,769 --> 00:13:59,149
we try to do as many as we can ubuntu

00:13:56,689 --> 00:14:00,709
was easy because we had we had a we had

00:13:59,149 --> 00:14:04,310
a few guys who were very familiar with

00:14:00,709 --> 00:14:06,980
Debian packages and so they they did the

00:14:04,310 --> 00:14:10,339
work to get it all get you know how

00:14:06,980 --> 00:14:13,250
we're going to do it set up and then I'm

00:14:10,339 --> 00:14:15,259
kind of in charge now of whenever new

00:14:13,250 --> 00:14:18,980
bun to version comes out I build a vm

00:14:15,259 --> 00:14:21,920
and then I take that VM and I make

00:14:18,980 --> 00:14:23,930
Delta's off of that vm you have a base

00:14:21,920 --> 00:14:25,610
vm and then i make a delta off of that

00:14:23,930 --> 00:14:26,930
for the install test i make a delta off

00:14:25,610 --> 00:14:28,160
of that install all the build tools

00:14:26,930 --> 00:14:30,439
that's our bill to the end then i make a

00:14:28,160 --> 00:14:33,319
delta off of that install mysql that's

00:14:30,439 --> 00:14:34,579
our MySQL test vm and so on you know and

00:14:33,319 --> 00:14:37,279
they're all they're all set up so that

00:14:34,579 --> 00:14:40,420
bill bot can seamlessly SSH into them

00:14:37,279 --> 00:14:46,310
SCP stuff in and out that sort of thing

00:14:40,420 --> 00:14:48,079
so when we do a release we want we want

00:14:46,310 --> 00:14:50,149
bill but has to be green I mean that's

00:14:48,079 --> 00:14:52,220
that's not the only criteria for at

00:14:50,149 --> 00:14:54,079
least of course you have various goals

00:14:52,220 --> 00:14:56,569
you'll have a list of bullet points you

00:14:54,079 --> 00:14:58,459
know they say well this 55 release we're

00:14:56,569 --> 00:15:00,199
putting in this new optimization for sub

00:14:58,459 --> 00:15:03,620
queries and we're we're going to improve

00:15:00,199 --> 00:15:05,089
this something or other and you know

00:15:03,620 --> 00:15:07,189
we'll have a we'll have our to-do list

00:15:05,089 --> 00:15:08,509
for the release and so they have the to

00:15:07,189 --> 00:15:10,399
do list for the release then you also

00:15:08,509 --> 00:15:13,910
have built what bill but is saying for

00:15:10,399 --> 00:15:15,949
our test suite and so basically over

00:15:13,910 --> 00:15:18,319
time those will come together you know

00:15:15,949 --> 00:15:19,970
the to-do list will be done and then if

00:15:18,319 --> 00:15:21,620
bill bot isn't green when the do list is

00:15:19,970 --> 00:15:23,540
done then you know you're fixing some

00:15:21,620 --> 00:15:26,000
bugs until buildbot is also green and

00:15:23,540 --> 00:15:30,170
then when both of them are meat then

00:15:26,000 --> 00:15:32,959
it's like okay buildbot screen bill BOTS

00:15:30,170 --> 00:15:36,170
green and the to do list is done so now

00:15:32,959 --> 00:15:40,430
we can release Maria Maria db5 dot 524

00:15:36,170 --> 00:15:41,990
we're ready to go woohoo so that's

00:15:40,430 --> 00:15:45,529
that's kind of how we determine okay now

00:15:41,990 --> 00:15:48,170
we're ready to do to do a release so at

00:15:45,529 --> 00:15:51,740
this point we've got a bunch of files

00:15:48,170 --> 00:15:54,319
out there we have we have binary

00:15:51,740 --> 00:15:56,959
tarballs we have a source tarball we

00:15:54,319 --> 00:15:58,670
have a windows installer package a

00:15:56,959 --> 00:16:02,240
windows zip file we have

00:15:58,670 --> 00:16:04,190
a solaris tarballs we have a bsd tarball

00:16:02,240 --> 00:16:05,660
we have a whole bunch of debian and

00:16:04,190 --> 00:16:09,290
ubuntu packages and we have a whole

00:16:05,660 --> 00:16:11,840
bunch of red hat packages so the next

00:16:09,290 --> 00:16:13,670
step that we do it's like okay we got

00:16:11,840 --> 00:16:15,950
the packages build bots green we have

00:16:13,670 --> 00:16:17,530
all of our to-do list checked off so now

00:16:15,950 --> 00:16:20,780
we need to get into the hands of users

00:16:17,530 --> 00:16:23,390
all of our build well our vm build

00:16:20,780 --> 00:16:25,810
machines are located in finland in

00:16:23,390 --> 00:16:29,450
Monty's basement Monty would any asst

00:16:25,810 --> 00:16:31,460
he's got a it's a really good internet

00:16:29,450 --> 00:16:34,310
connection for especially from us

00:16:31,460 --> 00:16:36,590
standards but it would totally fall over

00:16:34,310 --> 00:16:37,880
if a thousand people decided to click on

00:16:36,590 --> 00:16:39,950
a download link at once that just

00:16:37,880 --> 00:16:42,800
wouldn't work so we use mirrors like

00:16:39,950 --> 00:16:45,650
many distributions so our primary mirror

00:16:42,800 --> 00:16:48,730
is the open-source development lab at

00:16:45,650 --> 00:16:52,120
the Oregon State University go beavers

00:16:48,730 --> 00:16:55,840
they there are primary mirrors so I

00:16:52,120 --> 00:16:58,400
upload so starting starting with the

00:16:55,840 --> 00:16:59,960
binary tar balls the source tar balls

00:16:58,400 --> 00:17:02,480
anything that doesn't need a repository

00:16:59,960 --> 00:17:05,480
I upload those to the open-source

00:17:02,480 --> 00:17:07,430
development lab and then all of our

00:17:05,480 --> 00:17:10,580
other mirrors use rsync to pull from

00:17:07,430 --> 00:17:12,620
there because even though the number of

00:17:10,580 --> 00:17:15,680
mirrors isn't as many as the number of

00:17:12,620 --> 00:17:17,960
users by a long shot even just the

00:17:15,680 --> 00:17:21,260
mirrors pulling from our primary build

00:17:17,960 --> 00:17:25,280
system can bring Monty's connection to

00:17:21,260 --> 00:17:27,140
its knees because all of our mirrors of

00:17:25,280 --> 00:17:30,620
course run nice big fat pipes and they

00:17:27,140 --> 00:17:32,720
try to pull really fast well OSU the

00:17:30,620 --> 00:17:38,090
open-source lab there has a nice big fat

00:17:32,720 --> 00:17:40,820
you know education sighs pipe and so

00:17:38,090 --> 00:17:43,460
from there it uses our sink to rsync it

00:17:40,820 --> 00:17:46,160
out to all of our mirrors now one note

00:17:43,460 --> 00:17:47,570
about this map I wish this map was

00:17:46,160 --> 00:17:52,550
inaccurate but it's actually quite

00:17:47,570 --> 00:17:55,340
accurate we have one active Maria DB

00:17:52,550 --> 00:17:57,110
mirror in the US and we have a whole

00:17:55,340 --> 00:17:59,780
bunch in Europe and then we have one in

00:17:57,110 --> 00:18:01,940
Japan and one in Australia there's

00:17:59,780 --> 00:18:05,240
actually more there's actually a few

00:18:01,940 --> 00:18:06,830
more mirrors in Europe than are shown on

00:18:05,240 --> 00:18:08,870
the map but yeah there's only one in the

00:18:06,830 --> 00:18:12,659
u.s. so you have to get some big

00:18:08,870 --> 00:18:15,220
institutions in the u.s. to step up

00:18:12,659 --> 00:18:19,779
so anyway that gets pushed out to the

00:18:15,220 --> 00:18:28,960
mirrors and from there those files then

00:18:19,779 --> 00:18:33,549
you know become become available so what

00:18:28,960 --> 00:18:36,580
about the other packages those packages

00:18:33,549 --> 00:18:40,899
as many as probably all of you know are

00:18:36,580 --> 00:18:42,639
not equal to repositories you have

00:18:40,899 --> 00:18:44,619
dependency resolution all sorts of

00:18:42,639 --> 00:18:47,470
things that go into making a repository

00:18:44,619 --> 00:18:49,840
which makes it for many people better

00:18:47,470 --> 00:18:53,080
than just a binary file that you want

00:18:49,840 --> 00:18:57,070
our and then run you want you want to

00:18:53,080 --> 00:18:58,600
startup script you want a dependency

00:18:57,070 --> 00:19:00,580
resolution you want to make sure you're

00:18:58,600 --> 00:19:02,619
pulling in all the dependence other

00:19:00,580 --> 00:19:04,690
libraries that you need things like that

00:19:02,619 --> 00:19:06,789
and so for many people they want they

00:19:04,690 --> 00:19:10,450
want these repositories well to create

00:19:06,789 --> 00:19:14,649
the repositories we use a script the

00:19:10,450 --> 00:19:16,629
script handles there's there's nothing

00:19:14,649 --> 00:19:18,970
fancy in these scripts they use the

00:19:16,629 --> 00:19:21,909
system's tools to create the scripts

00:19:18,970 --> 00:19:23,889
there's a the Debian has there has a

00:19:21,909 --> 00:19:26,019
script that creates repositories for apt

00:19:23,889 --> 00:19:29,649
Red Hat has a script that creates

00:19:26,019 --> 00:19:31,149
repositories for young we use those with

00:19:29,649 --> 00:19:33,190
a few extra things I mean the scripts

00:19:31,149 --> 00:19:36,070
are nothing special but just like our

00:19:33,190 --> 00:19:39,190
run vm script we I stuck them all into

00:19:36,070 --> 00:19:40,450
our Maria DB tools project on launch pad

00:19:39,190 --> 00:19:41,769
just in case anyone wants to look at

00:19:40,450 --> 00:19:43,929
them if everyone's interested in

00:19:41,769 --> 00:19:45,220
creating a repository this is those are

00:19:43,929 --> 00:19:48,879
the scripts we use to create our

00:19:45,220 --> 00:19:52,090
repositories are there so you can use

00:19:48,879 --> 00:19:58,210
them on the scripts also handle signing

00:19:52,090 --> 00:20:02,350
all of the packages for the what do you

00:19:58,210 --> 00:20:04,899
call it the the binary tar balls the

00:20:02,350 --> 00:20:08,679
single files distributions of amarilla

00:20:04,899 --> 00:20:11,919
DB the windows the mac the solaris all

00:20:08,679 --> 00:20:14,559
those we provide checksums but for

00:20:11,919 --> 00:20:15,789
repositories they use gpg and so for

00:20:14,559 --> 00:20:17,289
those of you who are interested the

00:20:15,789 --> 00:20:20,470
scripts handle that and for those of you

00:20:17,289 --> 00:20:22,240
who are interested here's our gpg ID and

00:20:20,470 --> 00:20:23,900
the short form which is easier to write

00:20:22,240 --> 00:20:26,660
down but not as secure

00:20:23,900 --> 00:20:29,650
and then the full fingerprint just in

00:20:26,660 --> 00:20:34,520
case anyone's GP likes their gpg keys

00:20:29,650 --> 00:20:37,130
and so we create those folders those

00:20:34,520 --> 00:20:40,220
folders get uploaded and then mirrored

00:20:37,130 --> 00:20:43,490
and then on our download site we have a

00:20:40,220 --> 00:20:45,830
repository configurator which just

00:20:43,490 --> 00:20:48,800
basically you you choose you know what

00:20:45,830 --> 00:20:51,080
distribution what architecture and it'll

00:20:48,800 --> 00:20:55,790
spit out the text that you need to add

00:20:51,080 --> 00:20:58,250
to apt or too young you know the young

00:20:55,790 --> 00:21:07,480
repos d or you're at your etsy app

00:20:58,250 --> 00:21:07,480
sources list dot d file so so now with

00:21:14,830 --> 00:21:20,180
for the repositories we don't went on

00:21:18,080 --> 00:21:22,040
our downloads page when you click on a

00:21:20,180 --> 00:21:24,800
download link for like that taught the

00:21:22,040 --> 00:21:28,040
source tarball and the binary tarball we

00:21:24,800 --> 00:21:32,210
do collect those i'm trying to think

00:21:28,040 --> 00:21:33,650
where they're publicly available i don't

00:21:32,210 --> 00:21:37,010
know if we have those download

00:21:33,650 --> 00:21:40,390
statistics publicly available and the

00:21:37,010 --> 00:21:40,390
repos we don't get anything from them

00:21:42,100 --> 00:21:47,030
yeah especially once once someone in

00:21:44,810 --> 00:21:49,970
sweet we can tell when someone has used

00:21:47,030 --> 00:21:52,700
our repository configurator to generate

00:21:49,970 --> 00:21:55,510
sources list entry but after that we

00:21:52,700 --> 00:21:59,270
have no way of knowing because the the

00:21:55,510 --> 00:22:07,610
the mirrors they you know we don't have

00:21:59,270 --> 00:22:08,780
any access to their statistics I don't

00:22:07,610 --> 00:22:13,850
know we've never had a complaint like

00:22:08,780 --> 00:22:17,270
when we dropped the yeah when we still

00:22:13,850 --> 00:22:19,010
do hardy we still do hardy but like the

00:22:17,270 --> 00:22:20,990
one that came after hardy intrepid we

00:22:19,010 --> 00:22:24,140
don't do anymore and at least I don't

00:22:20,990 --> 00:22:25,850
know of any complaints so cuz I I guess

00:22:24,140 --> 00:22:28,130
with with those types of distributions

00:22:25,850 --> 00:22:32,180
the bunt is especially people are very

00:22:28,130 --> 00:22:34,010
quick to upgrade so so in fact the the

00:22:32,180 --> 00:22:35,540
main complaints that we got just a few

00:22:34,010 --> 00:22:36,990
months back was when we didn't have

00:22:35,540 --> 00:22:40,230
precise

00:22:36,990 --> 00:23:04,740
repose up as soon as precise was

00:22:40,230 --> 00:23:09,570
available they are configured to act as

00:23:04,740 --> 00:23:12,000
an upgrade so the way the way the the

00:23:09,570 --> 00:23:13,530
way in the dependency resolution we

00:23:12,000 --> 00:23:15,990
consider ourselves an upgrade which

00:23:13,530 --> 00:23:17,900
causes its own set of problems because

00:23:15,990 --> 00:23:20,220
of it I'm familiar with Ubuntu

00:23:17,900 --> 00:23:24,150
especially in ubuntu there are some

00:23:20,220 --> 00:23:26,940
packages that rely on the specific

00:23:24,150 --> 00:23:29,070
version that's packaged in a bun to not

00:23:26,940 --> 00:23:32,400
this specific version or greater it's

00:23:29,070 --> 00:23:35,640
this specific version and for those it's

00:23:32,400 --> 00:23:39,270
you know there's nothing we can do apart

00:23:35,640 --> 00:23:41,010
from you know we we do a couple hackish

00:23:39,270 --> 00:23:42,690
things in our repositories to try to get

00:23:41,010 --> 00:23:44,280
around that but I've heard that even

00:23:42,690 --> 00:23:51,720
that isn't a hundred percent successful

00:23:44,280 --> 00:23:54,510
a hundred percent of the time mm-hmm

00:23:51,720 --> 00:23:56,429
mm-hmm yep yep you would start at the

00:23:54,510 --> 00:24:00,679
same way all of the all the command line

00:23:56,429 --> 00:24:00,679
tools are named the same yeah

00:24:14,150 --> 00:24:38,520
mm hmm hmm hmm hmm we ran into that on

00:24:32,299 --> 00:24:41,669
Ubuntu when there was a there was a

00:24:38,520 --> 00:24:44,520
there was a bug that we fixed and we

00:24:41,669 --> 00:24:46,590
gave the patch to Oracle and then they

00:24:44,520 --> 00:24:49,770
patched theirs and then who bunt who

00:24:46,590 --> 00:24:51,540
came out with a version they incremented

00:24:49,770 --> 00:24:53,940
their number and we hadn't incremented

00:24:51,540 --> 00:24:56,309
our number we came out with our patch

00:24:53,940 --> 00:24:58,950
and Murray DB was upgraded and you know

00:24:56,309 --> 00:25:00,299
protected against this bug but then they

00:24:58,950 --> 00:25:02,340
came out and they incremented their

00:25:00,299 --> 00:25:05,610
number to be one greater it was our five

00:25:02,340 --> 00:25:09,600
dot one package and so are our five dot

00:25:05,610 --> 00:25:11,429
one dot 63 package Ubuntu wanted to

00:25:09,600 --> 00:25:15,600
replace it with MySQL five dot one dot

00:25:11,429 --> 00:25:19,350
64 and so we try to minimize that sort

00:25:15,600 --> 00:25:22,200
of thing so we we quickly released a

00:25:19,350 --> 00:25:23,850
five dot 10 64 that's fixed that we

00:25:22,200 --> 00:25:26,640
incremented our number basically all we

00:25:23,850 --> 00:25:29,280
did because we'd already fixed it but we

00:25:26,640 --> 00:25:30,990
incremented our number so that it's so

00:25:29,280 --> 00:25:33,929
that that went away but anyone who is

00:25:30,990 --> 00:25:35,850
running maria DB 52 or 53 didn't run

00:25:33,929 --> 00:25:38,309
into that because it was the number was

00:25:35,850 --> 00:25:39,900
higher but yes that that's something we

00:25:38,309 --> 00:25:44,250
try to it's just something we have to

00:25:39,900 --> 00:25:45,840
deal with because we are replacement so

00:25:44,250 --> 00:25:49,710
it's there's I don't think there's an

00:25:45,840 --> 00:25:51,870
easy answer to get around it so we just

00:25:49,710 --> 00:25:53,580
we just kind of us one of the things

00:25:51,870 --> 00:25:57,059
that were that we're doing with the next

00:25:53,580 --> 00:25:58,740
version of MySQL next version of Maria

00:25:57,059 --> 00:26:02,220
DB because marine the next version of

00:25:58,740 --> 00:26:06,030
MySQL will be mysql 56 right but mysql

00:26:02,220 --> 00:26:08,130
56 isn't out i don't know when it'll be

00:26:06,030 --> 00:26:09,660
out and we have features now that

00:26:08,130 --> 00:26:13,679
developers are working on that will be

00:26:09,660 --> 00:26:14,290
done probably long before mysql 56 comes

00:26:13,679 --> 00:26:17,830
out

00:26:14,290 --> 00:26:21,870
and so for our next major release of

00:26:17,830 --> 00:26:23,770
Maria DB we can't call it Maria DB 56

00:26:21,870 --> 00:26:26,770
because that would cause all sorts of

00:26:23,770 --> 00:26:30,520
problems when mysql 56 comes out so

00:26:26,770 --> 00:26:31,780
we're on really be 55 so we're trying to

00:26:30,520 --> 00:26:36,190
come up with some sort of numbering

00:26:31,780 --> 00:26:41,440
scheme where yes we're based on MySQL

00:26:36,190 --> 00:26:44,140
five dot 524 but you know that then we

00:26:41,440 --> 00:26:46,510
have Maria db5 dot 5 224 but we want to

00:26:44,140 --> 00:26:48,700
add new stuff before mysql comes out

00:26:46,510 --> 00:26:53,110
with either a mysql five dot five about

00:26:48,700 --> 00:26:55,270
25 or a mysql five dot six and so we're

00:26:53,110 --> 00:26:56,980
we're running into the issue where we we

00:26:55,270 --> 00:26:58,690
have to come up with a divergent

00:26:56,980 --> 00:27:00,430
numbering scheme and so there's we're

00:26:58,690 --> 00:27:02,890
trying to discuss that with some of the

00:27:00,430 --> 00:27:05,290
core contributing contributors and

00:27:02,890 --> 00:27:06,760
people who are interested trying to come

00:27:05,290 --> 00:27:09,790
up with something that works maybe at

00:27:06,760 --> 00:27:12,400
maybe a five dot 524 dash something I

00:27:09,790 --> 00:27:15,210
don't know you know or just something

00:27:12,400 --> 00:27:15,210
completely different

00:27:33,580 --> 00:27:42,620
yeah yeah that that's what we are we're

00:27:40,700 --> 00:27:46,100
working with like people like ubuntu on

00:27:42,620 --> 00:27:49,100
that trying to especially get away from

00:27:46,100 --> 00:27:52,040
their hard coding a specific version

00:27:49,100 --> 00:27:53,840
into their requirements and and doing it

00:27:52,040 --> 00:27:57,590
more like they do with things like text

00:27:53,840 --> 00:28:00,940
editor or web server you know do the

00:27:57,590 --> 00:28:03,800
same thing you know database you know or

00:28:00,940 --> 00:28:06,440
mysql like database or something like

00:28:03,800 --> 00:28:08,060
that i don't know so yeah yeah that's

00:28:06,440 --> 00:28:10,130
something that we're dealing with and

00:28:08,060 --> 00:28:11,840
developers are working hard on it trying

00:28:10,130 --> 00:28:14,660
to come up with something that that

00:28:11,840 --> 00:28:16,640
works for everybody because even even

00:28:14,660 --> 00:28:24,350
things like third-party tools like like

00:28:16,640 --> 00:28:26,990
a GUI client that has to use they'll

00:28:24,350 --> 00:28:29,870
enable certain features based on the the

00:28:26,990 --> 00:28:31,640
version of mysql that they detect or the

00:28:29,870 --> 00:28:32,900
version of maria DB that they detect and

00:28:31,640 --> 00:28:35,210
so we want to make sure that they can

00:28:32,900 --> 00:28:37,580
detect the correct version so that you

00:28:35,210 --> 00:28:39,590
know the version that has the sub query

00:28:37,580 --> 00:28:41,420
optimization that has these extra flags

00:28:39,590 --> 00:28:42,890
that they're gooey client supports that

00:28:41,420 --> 00:28:45,380
when it detects it so it has to have a

00:28:42,890 --> 00:28:46,910
way to detect it so yeah the whole

00:28:45,380 --> 00:28:49,130
version numbering thing I'm glad I'm not

00:28:46,910 --> 00:28:53,840
involved in the discussions because a

00:28:49,130 --> 00:28:55,310
big fat mess yeah and I don't think

00:28:53,840 --> 00:28:58,000
there's any easy answers for how to get

00:28:55,310 --> 00:29:01,760
around it especially since we're kind of

00:28:58,000 --> 00:29:04,010
you know we're a replacement we don't we

00:29:01,760 --> 00:29:05,540
don't want to completely fork I mean

00:29:04,010 --> 00:29:07,130
that we've always resisted that because

00:29:05,540 --> 00:29:08,900
we don't want to just completely diverge

00:29:07,130 --> 00:29:10,460
it may or may come a point where we'll

00:29:08,900 --> 00:29:13,430
have to because there's no other way

00:29:10,460 --> 00:29:15,320
around it but as long as we can we want

00:29:13,430 --> 00:29:17,120
to maintain us so that either one you

00:29:15,320 --> 00:29:19,970
know you can just drop in Moorea DB and

00:29:17,120 --> 00:29:21,590
it just replaces it out of the box we

00:29:19,970 --> 00:29:23,390
want to maintain that compatibility as

00:29:21,590 --> 00:29:27,290
long as we can and so solving this is

00:29:23,390 --> 00:29:29,950
one thing that we have to do but someone

00:29:27,290 --> 00:29:29,950
else has to do it

00:29:31,230 --> 00:29:38,850
okay so let's see looking at my notes

00:29:39,030 --> 00:29:44,410
okay so once we're at this point in the

00:29:42,160 --> 00:29:46,420
release process by the way this release

00:29:44,410 --> 00:29:48,250
process that I'm talking about is all on

00:29:46,420 --> 00:29:49,630
our knowledge base i'll give you a link

00:29:48,250 --> 00:29:51,070
to the knowledge base and if you go to

00:29:49,630 --> 00:29:53,830
the knowledge base and search for

00:29:51,070 --> 00:29:55,480
release process you'll get this and it

00:29:53,830 --> 00:29:57,430
lists everything that i do i actually

00:29:55,480 --> 00:29:59,080
follow it from top to bottom every time

00:29:57,430 --> 00:30:02,290
we do and release that's what this talk

00:29:59,080 --> 00:30:03,850
is is taken from down to the commands

00:30:02,290 --> 00:30:05,320
that i use to pull out things like the

00:30:03,850 --> 00:30:07,930
change log which I'll get into in a

00:30:05,320 --> 00:30:11,370
minute so anyway at this point we've got

00:30:07,930 --> 00:30:15,550
our repositories mirrored we've got our

00:30:11,370 --> 00:30:18,190
the the binary files mirrored so are we

00:30:15,550 --> 00:30:19,630
we've got them one the files are

00:30:18,190 --> 00:30:22,510
mirrored we put them into our download

00:30:19,630 --> 00:30:25,690
system so at our download system we can

00:30:22,510 --> 00:30:27,310
track downloads and we can we try to and

00:30:25,690 --> 00:30:29,260
there's even one of those annoying

00:30:27,310 --> 00:30:31,450
surveys that you can either fill out or

00:30:29,260 --> 00:30:35,230
click no thanks on our marketing guys

00:30:31,450 --> 00:30:37,000
wanted one of those but so they're in

00:30:35,230 --> 00:30:40,600
the download system so all ready to go

00:30:37,000 --> 00:30:43,600
are we ready to release no we still have

00:30:40,600 --> 00:30:45,130
to do documentation there's a lot of

00:30:43,600 --> 00:30:46,890
little things that you have to do when

00:30:45,130 --> 00:30:49,300
you're trying to coordinate a release

00:30:46,890 --> 00:30:51,250
hopefully most of the documentation will

00:30:49,300 --> 00:30:52,870
have already been written because the

00:30:51,250 --> 00:30:55,330
developers are supposed to do that and

00:30:52,870 --> 00:30:57,130
we ask them nicely six months ago to

00:30:55,330 --> 00:30:59,110
document the feature that they were

00:30:57,130 --> 00:31:02,110
coding you know it's like you're adding

00:30:59,110 --> 00:31:04,090
you're adding new newcomb a new options

00:31:02,110 --> 00:31:06,700
to create table we need to know what

00:31:04,090 --> 00:31:08,200
those are and we try to can we try to

00:31:06,700 --> 00:31:09,730
keep out in front of the release and

00:31:08,200 --> 00:31:11,110
document them with a nice little banner

00:31:09,730 --> 00:31:14,140
saying this feature is that is

00:31:11,110 --> 00:31:16,120
unreleased yet but it will be but

00:31:14,140 --> 00:31:17,740
sometimes things slip through and some

00:31:16,120 --> 00:31:19,270
developer will come to me on the day of

00:31:17,740 --> 00:31:20,740
the release and say oh we haven't

00:31:19,270 --> 00:31:22,780
documented this we don't have any

00:31:20,740 --> 00:31:24,580
documentation on it and then I'll say

00:31:22,780 --> 00:31:26,410
well you know where to work and I find

00:31:24,580 --> 00:31:27,520
this stuff and well here I'll send you

00:31:26,410 --> 00:31:29,290
something you know and then I'll quick

00:31:27,520 --> 00:31:31,810
write up something so we have something

00:31:29,290 --> 00:31:33,190
and expand upon it later but there's

00:31:31,810 --> 00:31:35,350
always there's always going to be a lot

00:31:33,190 --> 00:31:37,060
of little things even if it's just going

00:31:35,350 --> 00:31:38,410
through our knowledge base and removing

00:31:37,060 --> 00:31:41,380
all those little banners because it's

00:31:38,410 --> 00:31:43,300
released now there's also the release

00:31:41,380 --> 00:31:44,640
notes which has kind of a summary of the

00:31:43,300 --> 00:31:46,870
release that has to be

00:31:44,640 --> 00:31:49,990
and then there's the changelog the

00:31:46,870 --> 00:31:51,820
changelog is is is a bigger thing the

00:31:49,990 --> 00:31:55,000
raw changelog you can export directly

00:31:51,820 --> 00:31:58,570
from Bazaar and it looks kind of like

00:31:55,000 --> 00:32:00,430
this it's it's basically a record it has

00:31:58,570 --> 00:32:04,660
every single release every every single

00:32:00,430 --> 00:32:06,790
push into the tree and it says who who

00:32:04,660 --> 00:32:08,560
pushed it in what time they pushed it in

00:32:06,790 --> 00:32:10,030
what branch they push it into and then

00:32:08,560 --> 00:32:11,800
the message that's the important bit

00:32:10,030 --> 00:32:13,120
that says what they did now of course

00:32:11,800 --> 00:32:16,900
some developers are better at others

00:32:13,120 --> 00:32:19,210
that writing their messages but this

00:32:16,900 --> 00:32:20,530
this this is very useful information and

00:32:19,210 --> 00:32:22,210
this is probably the way that the

00:32:20,530 --> 00:32:24,130
developers like to look at it because

00:32:22,210 --> 00:32:25,870
they're just using bazaar on the command

00:32:24,130 --> 00:32:27,670
line and they say okay what was in this

00:32:25,870 --> 00:32:29,770
release and they do their little magic

00:32:27,670 --> 00:32:31,420
bizarre string and it spits out what

00:32:29,770 --> 00:32:33,010
they want to know but for brick

00:32:31,420 --> 00:32:35,710
regularly users it's not the most

00:32:33,010 --> 00:32:37,990
user-friendly so one of the things that

00:32:35,710 --> 00:32:40,330
that I do for each release is I take

00:32:37,990 --> 00:32:42,160
this raw change lie export it I export

00:32:40,330 --> 00:32:44,980
all of the pushes between the previous

00:32:42,160 --> 00:32:47,980
release and this new release and then I

00:32:44,980 --> 00:32:51,730
format it so that it looks something

00:32:47,980 --> 00:32:54,520
like this the main thing I add is I add

00:32:51,730 --> 00:32:56,770
links to everything so the revision

00:32:54,520 --> 00:32:58,000
links to launch pad so you can click on

00:32:56,770 --> 00:33:00,040
that you can go to launch pad you can

00:32:58,000 --> 00:33:02,080
see that push you can see which files

00:33:00,040 --> 00:33:04,510
are changed you can see what code was

00:33:02,080 --> 00:33:06,220
changed on the line by line basis you

00:33:04,510 --> 00:33:10,330
can also see when there's bugs that were

00:33:06,220 --> 00:33:11,860
fixed you can see the bug you can click

00:33:10,330 --> 00:33:15,940
on the bug you can see the bug report

00:33:11,860 --> 00:33:17,020
see the test case whatever that that was

00:33:15,940 --> 00:33:18,370
in there so just make it a little bit

00:33:17,020 --> 00:33:20,380
more user-friendly we stick that in our

00:33:18,370 --> 00:33:22,120
knowledge base so that those who are

00:33:20,380 --> 00:33:24,040
interested I mean a lot of people aren't

00:33:22,120 --> 00:33:26,230
interested at all in the change log but

00:33:24,040 --> 00:33:28,900
for those that want to see you know I

00:33:26,230 --> 00:33:30,340
this bug-eyed was I want to see what

00:33:28,900 --> 00:33:31,930
they did to fix this bug do you're

00:33:30,340 --> 00:33:35,200
interested so this this is a quick way

00:33:31,930 --> 00:33:36,730
to get to it through the change log so

00:33:35,200 --> 00:33:38,620
that that's another big thing that we do

00:33:36,730 --> 00:33:40,630
is part of the release so eventually

00:33:38,620 --> 00:33:42,400
you're going to get to the point where

00:33:40,630 --> 00:33:44,800
you can actually do the release you have

00:33:42,400 --> 00:33:46,780
the files you have the repositories

00:33:44,800 --> 00:33:48,760
everything's mirrored you have your

00:33:46,780 --> 00:33:52,870
documentation all updated and then you

00:33:48,760 --> 00:33:57,470
can release and so the guests the final

00:33:52,870 --> 00:34:00,590
step in our release process is we

00:33:57,470 --> 00:34:02,690
send an email as basically the release

00:34:00,590 --> 00:34:06,020
and that that we at we have an

00:34:02,690 --> 00:34:07,520
announcement at inria DB org you can

00:34:06,020 --> 00:34:09,369
sign up for it there it's just just for

00:34:07,520 --> 00:34:12,470
announcements just release announcements

00:34:09,369 --> 00:34:15,669
and so that's that's basically when I

00:34:12,470 --> 00:34:17,869
consider the release done or happening

00:34:15,669 --> 00:34:19,970
of course there's always going to be a

00:34:17,869 --> 00:34:22,159
few niggly things like doing some blog

00:34:19,970 --> 00:34:26,149
posts about the release or posting on

00:34:22,159 --> 00:34:27,859
google+ and facebook and twitter but at

00:34:26,149 --> 00:34:30,230
this at this point when i send out the

00:34:27,859 --> 00:34:31,790
email that's when I ok ok this release

00:34:30,230 --> 00:34:37,040
is done i can find the go to bed it's

00:34:31,790 --> 00:34:38,869
one in the morning we're through here so

00:34:37,040 --> 00:34:40,429
here's some links we have Maria to be

00:34:38,869 --> 00:34:43,280
adored of course that's that's the

00:34:40,429 --> 00:34:46,730
primary landing page it has links to the

00:34:43,280 --> 00:34:49,040
downloads to the knowledgebase various

00:34:46,730 --> 00:34:53,720
other things our knowledge base itself

00:34:49,040 --> 00:34:57,680
is at kb asked Monte org asked Monte is

00:34:53,720 --> 00:35:01,550
you know for Monte with Enys the CEO

00:34:57,680 --> 00:35:05,540
Monte program co-creator of MySQL and

00:35:01,550 --> 00:35:06,680
creator of Maria DB so KBS Monte drug

00:35:05,540 --> 00:35:08,300
that's our knowledge base that's where

00:35:06,680 --> 00:35:11,210
we stick all of our documentation and

00:35:08,300 --> 00:35:13,130
everything else we have a few mailing

00:35:11,210 --> 00:35:16,609
lists that some of you may be interested

00:35:13,130 --> 00:35:18,859
in there at launch pad launchpad.net /

00:35:16,609 --> 00:35:21,230
tilde Maria discuss is the main one for

00:35:18,859 --> 00:35:23,780
users of Maria DB if you replace the

00:35:21,230 --> 00:35:25,849
discuss with developers that's the main

00:35:23,780 --> 00:35:27,920
developer mailing list if you want to

00:35:25,849 --> 00:35:29,810
get ahold of the developers that's

00:35:27,920 --> 00:35:33,020
probably one of the better ways the

00:35:29,810 --> 00:35:37,220
other way is through IRC on freenode

00:35:33,020 --> 00:35:40,070
it's pound Maria that's that's our IRC

00:35:37,220 --> 00:35:43,520
channel and then of course we have you

00:35:40,070 --> 00:35:47,690
know we're social media fight I guess we

00:35:43,520 --> 00:35:53,330
have our Maria DB pages on Twitter and

00:35:47,690 --> 00:35:55,690
Facebook and Google+ so anyway any

00:35:53,330 --> 00:35:55,690
questions

00:35:57,490 --> 00:36:02,440
I've been with them for a couple years

00:36:09,010 --> 00:36:13,360
yeah there's no there's no PDF manual

00:36:18,080 --> 00:36:22,520
yeah mm-hmm

00:36:28,000 --> 00:36:38,180
yeah mmhmm yeah I wasn't part of the

00:36:35,060 --> 00:36:40,160
decision to go to use a knowledge base

00:36:38,180 --> 00:36:41,930
instead of psych like say doing

00:36:40,160 --> 00:36:44,150
everything in doc book and exporting it

00:36:41,930 --> 00:36:47,480
to different formats I wasn't involved

00:36:44,150 --> 00:36:49,190
in that process I think I think it's

00:36:47,480 --> 00:36:51,380
like you said they wanted something or

00:36:49,190 --> 00:36:54,080
Monte and some of the other developers

00:36:51,380 --> 00:36:57,080
wanted something that was always up to

00:36:54,080 --> 00:37:01,850
date where you could ask questions get

00:36:57,080 --> 00:37:04,130
answers where it was somewhat wiki like

00:37:01,850 --> 00:37:07,520
where you could you know people could

00:37:04,130 --> 00:37:09,710
anyone with an account can can go in and

00:37:07,520 --> 00:37:29,800
fix typos or add new content if they

00:37:09,710 --> 00:37:31,910
want yeah mmhmm yeah yeah yeah and and

00:37:29,800 --> 00:37:33,860
anything that's not in the knowledge

00:37:31,910 --> 00:37:37,460
base yeah we ought we will just say you

00:37:33,860 --> 00:37:39,470
know that it's in the manual the manual

00:37:37,460 --> 00:37:42,890
is one thing we would love to have the

00:37:39,470 --> 00:37:45,610
entire MySQL manual but that is one part

00:37:42,890 --> 00:37:48,980
of MySQL that's never been open source

00:37:45,610 --> 00:37:52,010
it's it's always been copyright mysql AV

00:37:48,980 --> 00:37:54,590
copyright sun copyright oracle so we

00:37:52,010 --> 00:37:56,420
there's no way that we can use the

00:37:54,590 --> 00:37:58,820
manual and we don't have the resources

00:37:56,420 --> 00:38:02,450
to lock someone in a room and completely

00:37:58,820 --> 00:38:03,860
rewrite the manual so so it's basically

00:38:02,450 --> 00:38:09,340
the knowledge but in the knowledge base

00:38:03,860 --> 00:38:12,710
we primarily document the changes and we

00:38:09,340 --> 00:38:15,080
if we're if we documents say changes to

00:38:12,710 --> 00:38:16,640
alter table will often go in and put in

00:38:15,080 --> 00:38:19,010
all the options to alter table anyway

00:38:16,640 --> 00:38:20,600
you know so slowly over time hopefully

00:38:19,010 --> 00:38:26,500
it'll be a complete replacement but it's

00:38:20,600 --> 00:38:26,500
not at this point yeah

00:38:30,770 --> 00:38:39,150
mm-hmm it's hard to tell because there's

00:38:37,349 --> 00:38:41,369
always going to be several trees being

00:38:39,150 --> 00:38:43,650
built at the same time but for any

00:38:41,369 --> 00:38:48,809
individual one you're looking at a few

00:38:43,650 --> 00:38:52,109
hours it's just you know they'll push

00:38:48,809 --> 00:38:54,740
into a lot of times what happens is the

00:38:52,109 --> 00:38:57,839
bug exists say in five dot too and

00:38:54,740 --> 00:39:00,089
they'll fix the bug in 52 then

00:38:57,839 --> 00:39:02,730
immediately after that they'll merge the

00:39:00,089 --> 00:39:04,829
five dot to fix into 53 and then learns

00:39:02,730 --> 00:39:08,160
to fight a 3x fix into five dot five so

00:39:04,829 --> 00:39:09,930
kind of cascades up the tree and so then

00:39:08,160 --> 00:39:12,720
all of those builds are happening kind

00:39:09,930 --> 00:39:14,579
of you know simultaneously and Bill

00:39:12,720 --> 00:39:20,099
bought manages it just it looks at the

00:39:14,579 --> 00:39:21,540
load averages on the two VMS and it will

00:39:20,099 --> 00:39:23,520
spin up you know there's certain number

00:39:21,540 --> 00:39:25,290
that it can run simultaneously and it

00:39:23,520 --> 00:39:27,450
has a list of every everything that

00:39:25,290 --> 00:39:29,910
still needs to be done every build slave

00:39:27,450 --> 00:39:32,400
that needs to needs to build this these

00:39:29,910 --> 00:39:33,780
changes and it just keeps a queue and it

00:39:32,400 --> 00:39:36,530
just keeps you know going through the

00:39:33,780 --> 00:39:36,530
queue one after another

00:39:47,430 --> 00:39:55,000
mm-hmm-hmm well if you see on mm-hmm not

00:39:52,930 --> 00:39:57,520
necessarily if you go let's see where

00:39:55,000 --> 00:40:01,330
I'll here it is if you notice these

00:39:57,520 --> 00:40:04,510
white spaces that that was a developer

00:40:01,330 --> 00:40:06,910
canceling it so the bill for basically

00:40:04,510 --> 00:40:09,040
going in we have the build system you

00:40:06,910 --> 00:40:11,950
can the the publicly accessible is

00:40:09,040 --> 00:40:13,390
read-only for natural reasons because we

00:40:11,950 --> 00:40:16,570
don't want some punk coming in and

00:40:13,390 --> 00:40:18,670
pressing rebuild on everything because

00:40:16,570 --> 00:40:20,650
but the developers can go and they can

00:40:18,670 --> 00:40:23,800
they can restart a build they can cancel

00:40:20,650 --> 00:40:26,050
a build so so in this case they were

00:40:23,800 --> 00:40:28,870
doing a lot of changes to the Red Hat

00:40:26,050 --> 00:40:31,600
packages to get them to work so so they

00:40:28,870 --> 00:40:33,760
made a change that was here and then

00:40:31,600 --> 00:40:35,260
they were like oh that doesn't fix it so

00:40:33,760 --> 00:40:37,270
they did another one and they you know

00:40:35,260 --> 00:40:38,890
it had already built these ones by the

00:40:37,270 --> 00:40:41,080
time they noticed it it had already

00:40:38,890 --> 00:40:42,760
built and tested these ones or already

00:40:41,080 --> 00:40:44,860
started them so it can went ahead and

00:40:42,760 --> 00:40:46,960
completed them but then it's the then

00:40:44,860 --> 00:40:49,750
like oh no that's not it and so then

00:40:46,960 --> 00:40:53,440
they went did this now this was going to

00:40:49,750 --> 00:40:56,290
be the release until our windows guy

00:40:53,440 --> 00:41:00,070
came back and said oh you know we still

00:40:56,290 --> 00:41:01,960
need this and then our are really are we

00:41:00,070 --> 00:41:03,790
always we always designate a coordinator

00:41:01,960 --> 00:41:05,440
for our major releases the release

00:41:03,790 --> 00:41:06,490
coordinator gave him a big hard time

00:41:05,440 --> 00:41:07,990
it's like well why didn't you tell

00:41:06,490 --> 00:41:10,870
anybody you know blah blah blah ninth

00:41:07,990 --> 00:41:12,850
hour all that so so then so then they

00:41:10,870 --> 00:41:14,470
had this push and then there was there

00:41:12,850 --> 00:41:16,330
was some other little niggly thing that

00:41:14,470 --> 00:41:18,340
they caught and so then they then so

00:41:16,330 --> 00:41:25,170
then they canceled this and then they

00:41:18,340 --> 00:41:28,720
did the final each column is is a push

00:41:25,170 --> 00:41:32,410
so so this is 3 can't even hardly read

00:41:28,720 --> 00:41:35,920
that 34 31 or something like that and it

00:41:32,410 --> 00:41:38,080
goes you know just keeps going up so

00:41:35,920 --> 00:41:39,400
yeah the developers on the backside can

00:41:38,080 --> 00:41:42,960
go in and they could they can totally

00:41:39,400 --> 00:41:42,960
control what Bill BOTS doing

00:41:42,990 --> 00:41:49,360
yeah yeah yeah you can see everything in

00:41:46,120 --> 00:41:51,010
one big huge list but that's really

00:41:49,360 --> 00:41:52,780
confusing to look at because you have to

00:41:51,010 --> 00:41:54,190
have to pay attention to which branch in

00:41:52,780 --> 00:41:56,830
which trees so this is this is a

00:41:54,190 --> 00:42:00,850
gridview just for the five dot five

00:41:56,830 --> 00:42:02,200
branch so you can view it by branch you

00:42:00,850 --> 00:42:04,480
can view it but you know you can view

00:42:02,200 --> 00:42:06,220
all the ones that just build packages

00:42:04,480 --> 00:42:11,490
you can just build all the ones that are

00:42:06,220 --> 00:42:11,490
just testing you can split things out I

00:42:14,880 --> 00:42:34,450
have no idea yeah that's probably why

00:42:32,560 --> 00:42:36,610
they did it because the developer

00:42:34,450 --> 00:42:49,840
whoever the guy who implemented our bill

00:42:36,610 --> 00:42:51,450
bought system yeah haha you know he's

00:42:49,840 --> 00:42:56,020
actually he's actually building a house

00:42:51,450 --> 00:42:57,370
in near he lives outside of Helsinki now

00:42:56,020 --> 00:43:00,070
but he's building one closer to the city

00:42:57,370 --> 00:43:02,770
and he's specially building a server

00:43:00,070 --> 00:43:07,900
room in the middle that is going to heat

00:43:02,770 --> 00:43:09,730
the house so he's actually that is I

00:43:07,900 --> 00:43:13,540
think I think he said he's going to put

00:43:09,730 --> 00:43:15,850
his like his sauna on top of it and hate

00:43:13,540 --> 00:43:18,250
the sauna using the excess waste heat

00:43:15,850 --> 00:43:19,870
from the bills yeah because yeah his

00:43:18,250 --> 00:43:23,500
basement just has all these servers in

00:43:19,870 --> 00:43:25,810
it and yeah we give him a hard time

00:43:23,500 --> 00:43:27,760
about it because he won't move with him

00:43:25,810 --> 00:43:29,170
anywhere else because he he wants to

00:43:27,760 --> 00:43:32,080
have them right there because he likes

00:43:29,170 --> 00:43:34,210
them right there it's just like oh well

00:43:32,080 --> 00:43:36,610
our web servers our email servers where

00:43:34,210 --> 00:43:41,560
they're there at a regular hosting

00:43:36,610 --> 00:43:43,840
facility because the the developers got

00:43:41,560 --> 00:43:46,420
mad about you know what Bill bought you

00:43:43,840 --> 00:43:48,010
know wood or there be a power outage or

00:43:46,420 --> 00:43:50,140
or build about be taking all the

00:43:48,010 --> 00:43:52,630
resources or there be a release and all

00:43:50,140 --> 00:43:53,980
that that anyway so it was just you know

00:43:52,630 --> 00:43:54,710
we have there's a few things we need to

00:43:53,980 --> 00:43:58,119
have and

00:43:54,710 --> 00:44:00,349
need to be outside of your shore house

00:43:58,119 --> 00:44:02,089
this actually when you go to build

00:44:00,349 --> 00:44:05,599
bought that s money or that is a server

00:44:02,089 --> 00:44:07,220
at his house so because that's where the

00:44:05,599 --> 00:44:09,109
server is running that server is

00:44:07,220 --> 00:44:10,430
basically dedicated to build body used

00:44:09,109 --> 00:44:12,140
to have a few other things running on it

00:44:10,430 --> 00:44:14,390
but it's basically been pared down to

00:44:12,140 --> 00:44:17,960
just running buildbot because with all

00:44:14,390 --> 00:44:23,150
the builds that we do it's that says

00:44:17,960 --> 00:44:29,560
that's enough for that server any other

00:44:23,150 --> 00:44:29,560
questions all right well thank

00:45:10,070 --> 00:45:16,520
how's that sigh every way this is the

00:45:13,220 --> 00:45:18,680
way to better utilize all your resources

00:45:16,520 --> 00:45:22,130
and it makes managing all your resources

00:45:18,680 --> 00:45:25,960
pretty easy all of the innovation is

00:45:22,130 --> 00:45:29,480
happening in open source the

00:45:25,960 --> 00:45:31,280
collaborative nature and of the you know

00:45:29,480 --> 00:45:33,200
of the community and the speed at which

00:45:31,280 --> 00:45:35,390
these are these you know these

00:45:33,200 --> 00:45:37,700
deficiencies these bugs are getting

00:45:35,390 --> 00:45:40,280
discovered and then fixed is it like

00:45:37,700 --> 00:45:43,010
that really shows the power of the you

00:45:40,280 --> 00:45:44,630
know of the open source community it is

00:45:43,010 --> 00:45:48,830
global and it's definitely because of

00:45:44,630 --> 00:45:55,160
the users community people are extremely

00:45:48,830 --> 00:45:57,050
friendly and always ready to help if you

00:45:55,160 --> 00:45:59,360
go on tire see any day you'll see these

00:45:57,050 --> 00:46:01,090
guys helping each other out and they're

00:45:59,360 --> 00:46:03,770
all doing it like in a selfless manner

00:46:01,090 --> 00:46:06,760
the product is transparent for everyone

00:46:03,770 --> 00:46:09,980
everyone can look at the code base

00:46:06,760 --> 00:46:12,190
everyone can see how close that is being

00:46:09,980 --> 00:46:17,690
built nothing nothing is proprietary

00:46:12,190 --> 00:46:20,360
everything is open in many ways it's

00:46:17,690 --> 00:46:24,770
absolutely vital to the the ongoing

00:46:20,360 --> 00:46:29,000
health cloudstack the most exciting

00:46:24,770 --> 00:46:31,720
event in recent memory for he was our

00:46:29,000 --> 00:46:34,480
first developer boot camp

00:46:31,720 --> 00:46:37,119
and our call gave people I gave me two

00:46:34,480 --> 00:46:41,080
weeks notice to come attend I was

00:46:37,119 --> 00:46:45,250
expecting 25 or 30 people so we ended up

00:46:41,080 --> 00:46:48,099
with 87 people and had to go get more

00:46:45,250 --> 00:46:50,619
chairs in the room twice everything

00:46:48,099 --> 00:46:53,859
within cloud computing is commodity and

00:46:50,619 --> 00:46:56,950
is open source and so I don't think that

00:46:53,859 --> 00:46:58,690
you will you'll see anywhere where open

00:46:56,950 --> 00:47:01,720
source is not pervasive in cloud

00:46:58,690 --> 00:47:04,270
computing and so i think it's i think

00:47:01,720 --> 00:47:05,800
it's an assumption i think when you talk

00:47:04,270 --> 00:47:09,510
about cloud computing you're really

00:47:05,800 --> 00:47:09,510
talking about a source cloud computing

00:47:09,810 --> 00:47:15,849
cloud sac is a robust solution for large

00:47:13,090 --> 00:47:18,250
deployments you'll have dozens of data

00:47:15,849 --> 00:47:22,270
centers and thousands of servers in each

00:47:18,250 --> 00:47:25,540
data centers these hardware is going to

00:47:22,270 --> 00:47:28,750
fail and CloudStack is designed to

00:47:25,540 --> 00:47:31,240
handle number one that mass scale number

00:47:28,750 --> 00:47:33,940
two it's designed to handle the failure

00:47:31,240 --> 00:47:36,490
that inevitably happens in large

00:47:33,940 --> 00:47:40,030
deployments started working on college

00:47:36,490 --> 00:47:43,359
attack over four years ago and it was

00:47:40,030 --> 00:47:46,060
the original set of people working on it

00:47:43,359 --> 00:47:50,170
had a background of delivering software

00:47:46,060 --> 00:47:54,400
telcos and service providers lots of QA

00:47:50,170 --> 00:47:58,000
lots of users actually using it high

00:47:54,400 --> 00:48:01,089
availability is a key feature multiple

00:47:58,000 --> 00:48:03,099
hypervisors support different network

00:48:01,089 --> 00:48:05,800
models you can pick up whatever suits

00:48:03,099 --> 00:48:08,050
you better while step management server

00:48:05,800 --> 00:48:11,740
can be deployed in different physical

00:48:08,050 --> 00:48:13,390
machines it definitely has a huge

00:48:11,740 --> 00:48:18,369
footprint it's being deployed everywhere

00:48:13,390 --> 00:48:20,980
there's a major movie studio that they

00:48:18,369 --> 00:48:24,250
were using cloudstack they were using it

00:48:20,980 --> 00:48:26,230
to transcode video and i thought that

00:48:24,250 --> 00:48:27,880
was terribly fascinating what i found

00:48:26,230 --> 00:48:31,150
more fascinating is what they did during

00:48:27,880 --> 00:48:33,940
lunch where they would spin up you know

00:48:31,150 --> 00:48:35,320
50 or 60 game servers then as soon as

00:48:33,940 --> 00:48:36,920
lunch was over they would destroy all

00:48:35,320 --> 00:48:41,060
the instances and go back

00:48:36,920 --> 00:48:42,680
it'll work CloudStack is vast it touches

00:48:41,060 --> 00:48:44,780
so many different aspects and there's no

00:48:42,680 --> 00:48:47,150
one person that's kind of like a master

00:48:44,780 --> 00:48:51,230
of all those realms I think cloudstack

00:48:47,150 --> 00:48:53,480
as a project is going to be one of the

00:48:51,230 --> 00:48:57,560
leaders simply because it's some of the

00:48:53,480 --> 00:49:02,990
most feature fallen and and robust

00:48:57,560 --> 00:49:05,890
platforms out they were I don't senior

00:49:02,990 --> 00:49:05,890
living through the clouds dag

00:49:18,700 --> 00:49:20,760
you

00:49:24,090 --> 00:49:29,170
when we created asterisk over a decade

00:49:26,800 --> 00:49:31,119
ago we could not have imagined that

00:49:29,170 --> 00:49:33,310
asterisk would not only become the most

00:49:31,119 --> 00:49:35,470
widely adopted open source communication

00:49:33,310 --> 00:49:37,480
software on the planet but that it would

00:49:35,470 --> 00:49:40,000
impact the entire industry in the way

00:49:37,480 --> 00:49:41,980
that it has today asterisk has found its

00:49:40,000 --> 00:49:44,619
way in the more than 170 countries and

00:49:41,980 --> 00:49:46,570
virtually every fortune 1000 company the

00:49:44,619 --> 00:49:48,670
success of asterisk has enabled a

00:49:46,570 --> 00:49:50,080
transition of power from the hands of

00:49:48,670 --> 00:49:52,359
the traditional proprietary phone

00:49:50,080 --> 00:49:54,760
vendors into the hands of the users and

00:49:52,359 --> 00:49:56,680
administrators of phone systems using

00:49:54,760 --> 00:49:57,910
this power our customers have created

00:49:56,680 --> 00:49:59,859
all sorts of business changing

00:49:57,910 --> 00:50:01,690
applications from small office phone

00:49:59,859 --> 00:50:04,240
systems to mission-critical call centers

00:50:01,690 --> 00:50:05,830
the international carrier networks in

00:50:04,240 --> 00:50:07,600
fact there's even an entire country

00:50:05,830 --> 00:50:10,000
those communications infrastructure runs

00:50:07,600 --> 00:50:12,130
on esters the gym has always been about

00:50:10,000 --> 00:50:13,840
creating technology that expands

00:50:12,130 --> 00:50:16,030
communications capabilities in ways that

00:50:13,840 --> 00:50:17,200
we could never have imagined and that's

00:50:16,030 --> 00:50:19,600
part of what's game-changing about

00:50:17,200 --> 00:50:22,300
Digium today we're doing it again this

00:50:19,600 --> 00:50:24,400
time by introducing a new family of HD

00:50:22,300 --> 00:50:26,500
IP phones that extends control of the

00:50:24,400 --> 00:50:28,270
user all the way to the desktop the

00:50:26,500 --> 00:50:29,980
launch of these new products represents

00:50:28,270 --> 00:50:32,080
the next phase indigenous history of

00:50:29,980 --> 00:50:34,480
innovation these are the first and only

00:50:32,080 --> 00:50:36,190
IP phones designed to fully leverage the

00:50:34,480 --> 00:50:37,750
power of estrus when we first discussed

00:50:36,190 --> 00:50:39,760
our expectations for building a family

00:50:37,750 --> 00:50:41,920
of phones for use with asterisk our

00:50:39,760 --> 00:50:43,660
requirements were pretty simple we asked

00:50:41,920 --> 00:50:45,310
the team to build the phones such that

00:50:43,660 --> 00:50:47,500
they were easy to install integrate

00:50:45,310 --> 00:50:49,330
provision and use I think you'll soon

00:50:47,500 --> 00:50:51,910
agree our engineers have delivered on

00:50:49,330 --> 00:50:53,530
that goal user feedback is validating

00:50:51,910 --> 00:50:55,660
that when it comes to operation with

00:50:53,530 --> 00:50:58,090
Astra space systems including our own

00:50:55,660 --> 00:51:00,640
Switchvox based product these are the

00:50:58,090 --> 00:51:01,960
easiest to use best integrated most

00:51:00,640 --> 00:51:04,540
interoperable products on the market

00:51:01,960 --> 00:51:06,540
today the digitally phones will

00:51:04,540 --> 00:51:08,590
initially include three IP des hommes

00:51:06,540 --> 00:51:10,540
uniquely designed to complement any

00:51:08,590 --> 00:51:12,400
asterisk or switch box based solution

00:51:10,540 --> 00:51:15,070
these phones are different for a number

00:51:12,400 --> 00:51:17,740
of reasons first there is clue sively

00:51:15,070 --> 00:51:19,150
designed for use with esters secondly

00:51:17,740 --> 00:51:20,760
we've made it really easy to

00:51:19,150 --> 00:51:23,170
autodiscover and provision the phones

00:51:20,760 --> 00:51:24,850
next we've made it easy for the phones

00:51:23,170 --> 00:51:26,779
to access information inside of

00:51:24,850 --> 00:51:28,809
asterisks allowing tight coupling

00:51:26,779 --> 00:51:30,769
between the application and the phone

00:51:28,809 --> 00:51:32,929
additionally we've created an

00:51:30,769 --> 00:51:35,059
applications engineer that allows users

00:51:32,929 --> 00:51:38,299
and developers to create and run their

00:51:35,059 --> 00:51:40,069
own apps on the phone and finally we've

00:51:38,299 --> 00:51:42,019
done all of this at a very compelling

00:51:40,069 --> 00:51:43,699
price point at Digium we're always

00:51:42,019 --> 00:51:45,799
thinking of ways to give our customers

00:51:43,699 --> 00:51:48,319
the best value in business phone systems

00:51:45,799 --> 00:51:49,909
and also give them the power to create

00:51:48,319 --> 00:51:52,039
their own solutions or any

00:51:49,909 --> 00:51:53,779
communications challenge well continue

00:51:52,039 --> 00:51:55,189
to push the boundaries not only to make

00:51:53,779 --> 00:51:57,259
Astra's cooler faster and more

00:51:55,189 --> 00:51:58,880
technologically feature-rich but to make

00:51:57,259 --> 00:52:01,339
asterisk and what communications even

00:51:58,880 --> 00:52:04,479
easier and together we'll change the way

00:52:01,339 --> 00:52:04,479

YouTube URL: https://www.youtube.com/watch?v=TrfaYqeNGfI


