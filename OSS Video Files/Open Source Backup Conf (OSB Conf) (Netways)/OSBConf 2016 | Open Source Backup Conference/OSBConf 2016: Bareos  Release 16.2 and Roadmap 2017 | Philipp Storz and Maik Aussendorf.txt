Title: OSBConf 2016: Bareos  Release 16.2 and Roadmap 2017 | Philipp Storz and Maik Aussendorf
Publication date: 2016-10-06
Playlist: OSBConf 2016 | Open Source Backup Conference
Description: 
	Overview of Bareos 16.2 features, among them: always incremental, active client, NDMP Enhancements, new configuration API, media and autochanger handling in the Web UI. We will also give an insight to what is planned for 2017: Perfmormance Enhancements for very large environments, tape and media housekeeping and Windows Desaster Recovery.
Captions: 
	00:00:13,580 --> 00:00:17,720
okay we continue with the next talk our

00:00:16,250 --> 00:00:20,000
next talk for the

00:00:17,720 --> 00:00:23,810
and mike island off and they're talking

00:00:20,000 --> 00:00:26,480
about Piraeus released 16.2 and the

00:00:23,810 --> 00:00:29,960
roadmap for the next year yeah so no

00:00:26,480 --> 00:00:33,730
let's start we have a lot of new

00:00:29,960 --> 00:00:35,989
features in Baguio 1602 today we have

00:00:33,730 --> 00:00:39,530
launched it officially as release

00:00:35,989 --> 00:00:41,510
candidate and when I was started to

00:00:39,530 --> 00:00:43,070
prepare this presentation I thought well

00:00:41,510 --> 00:00:44,780
it's a really long list and the change

00:00:43,070 --> 00:00:47,239
lock so what what to put here so this is

00:00:44,780 --> 00:00:49,399
just an excerpt of what's new so I'll

00:00:47,239 --> 00:00:52,250
give you a brief overview and then we

00:00:49,399 --> 00:00:56,119
have some points that we will talk about

00:00:52,250 --> 00:00:57,290
a little bit more in detail so first and

00:00:56,119 --> 00:00:59,510
that is what Philip is going to talk

00:00:57,290 --> 00:01:01,909
about is the new always incremental

00:00:59,510 --> 00:01:05,750
backup scheme that is really interesting

00:01:01,909 --> 00:01:08,060
for people was a huge amount of data now

00:01:05,750 --> 00:01:11,119
and second we have client initiated

00:01:08,060 --> 00:01:12,890
connection that was sponsored by global

00:01:11,119 --> 00:01:17,200
ways and we have a dedicated talk up

00:01:12,890 --> 00:01:17,200
from Tobias Krause later today

00:01:18,110 --> 00:01:23,390
then we have fixed some yeah let's call

00:01:21,409 --> 00:01:26,060
it legacy problems so the ACL

00:01:23,390 --> 00:01:28,400
implementation had some gaps that we

00:01:26,060 --> 00:01:31,490
have now filled so it was sixteen or two

00:01:28,400 --> 00:01:33,170
we have really multi-tenancy so we have

00:01:31,490 --> 00:01:36,520
a little bit more details about that

00:01:33,170 --> 00:01:38,800
later then we have a lot of performance

00:01:36,520 --> 00:01:43,880
enhancements especially for larger

00:01:38,800 --> 00:01:46,100
installations we have a Frank or

00:01:43,880 --> 00:01:48,560
developers at the back has made a lot of

00:01:46,100 --> 00:01:52,570
progress with the web UI which are at

00:01:48,560 --> 00:01:56,360
some points now later we've also made

00:01:52,570 --> 00:02:00,290
good progress in the MP implementation

00:01:56,360 --> 00:02:03,200
and we have a new configuration scheme

00:02:00,290 --> 00:02:05,390
and the intention to do that was mostly

00:02:03,200 --> 00:02:07,580
to make it more suitable for automatic

00:02:05,390 --> 00:02:09,470
configuration and to have some

00:02:07,580 --> 00:02:12,319
configuration API so this is kind of

00:02:09,470 --> 00:02:16,700
prerequisite that we get a really good

00:02:12,319 --> 00:02:18,650
configuration API and then lastly we

00:02:16,700 --> 00:02:23,150
have also some new plugins and one of

00:02:18,650 --> 00:02:25,670
them is the new my sequel plug-in using

00:02:23,150 --> 00:02:29,030
peak owners extra backup technology to

00:02:25,670 --> 00:02:30,770
make incremental backups and point in

00:02:29,030 --> 00:02:31,450
time recovery of nodb

00:02:30,770 --> 00:02:34,370
table

00:02:31,450 --> 00:02:39,260
so that's the big picture or the main

00:02:34,370 --> 00:02:41,030
points so I now hand over to Philip our

00:02:39,260 --> 00:02:45,620
head of development who will explain you

00:02:41,030 --> 00:02:48,829
in detail what it means to have our new

00:02:45,620 --> 00:02:52,819
always an incremental backup scheme okay

00:02:48,829 --> 00:02:55,370
mmm thank you very much yeah I hope that

00:02:52,819 --> 00:02:57,290
that I managed today to make it

00:02:55,370 --> 00:02:59,299
understandable what it is all about the

00:02:57,290 --> 00:03:03,349
always incremental backup scheme so the

00:02:59,299 --> 00:03:05,180
basic idea behind it is the software

00:03:03,349 --> 00:03:07,010
let's first have a look at how the

00:03:05,180 --> 00:03:09,170
conventional backup scheme that we have

00:03:07,010 --> 00:03:12,319
and the configuration works so that we

00:03:09,170 --> 00:03:15,549
then can have a look what is changed for

00:03:12,319 --> 00:03:17,930
the always incremental backup scheme so

00:03:15,549 --> 00:03:20,510
in the conventional backup scheme we

00:03:17,930 --> 00:03:23,569
have usually a daily incremental backup

00:03:20,510 --> 00:03:25,129
that every day only backs up what was

00:03:23,569 --> 00:03:28,639
changed and this is copied from the

00:03:25,129 --> 00:03:30,500
client then usually weekly we have a

00:03:28,639 --> 00:03:32,750
differential backup which is then kept

00:03:30,500 --> 00:03:35,870
for three weeks for example for a longer

00:03:32,750 --> 00:03:37,609
period of time and then we have for

00:03:35,870 --> 00:03:40,280
example a monthly backup that is kept

00:03:37,609 --> 00:03:44,500
for half a year this is usually what we

00:03:40,280 --> 00:03:48,250
have in the standard configuration and

00:03:44,500 --> 00:03:53,449
if we make it like that and this is a

00:03:48,250 --> 00:03:56,930
picture that shows how the available

00:03:53,449 --> 00:03:59,870
jobs at every point in time so I think

00:03:56,930 --> 00:04:02,930
first I have to explain how this plot

00:03:59,870 --> 00:04:05,569
works so from left to right goes at the

00:04:02,930 --> 00:04:12,019
time that is evolving during during the

00:04:05,569 --> 00:04:14,540
year and vertically you see what jobs of

00:04:12,019 --> 00:04:17,030
what type are available so for example

00:04:14,540 --> 00:04:19,370
first a full backup is done here which

00:04:17,030 --> 00:04:22,580
is the red cross and this is kept for

00:04:19,370 --> 00:04:25,280
all the time so it keeps staying down

00:04:22,580 --> 00:04:27,830
here then every day an incremental

00:04:25,280 --> 00:04:31,340
backup is done which is this blue star

00:04:27,830 --> 00:04:34,340
and you see every day what one more is

00:04:31,340 --> 00:04:36,139
added so you have here one full and the

00:04:34,340 --> 00:04:38,479
second day and one incremental based on

00:04:36,139 --> 00:04:40,039
that and and it goes on like that until

00:04:38,479 --> 00:04:42,680
you have a certain amount of

00:04:40,039 --> 00:04:44,690
incrementals and then differential

00:04:42,680 --> 00:04:45,169
backup is done which is kept longer than

00:04:44,690 --> 00:04:47,449
the income

00:04:45,169 --> 00:04:50,539
but not as long as the full so you have

00:04:47,449 --> 00:04:53,599
this green X's here that live for a

00:04:50,539 --> 00:04:55,759
longer time so if you want to know at

00:04:53,599 --> 00:04:57,620
each point in time what jobs you have

00:04:55,759 --> 00:04:59,650
when you're dis get available for

00:04:57,620 --> 00:05:02,090
restore you have to see a look in the

00:04:59,650 --> 00:05:03,770
vertical line and you see except for

00:05:02,090 --> 00:05:05,409
example at this point in time you have

00:05:03,770 --> 00:05:07,669
this full available yeah this

00:05:05,409 --> 00:05:09,620
differential available here to

00:05:07,669 --> 00:05:13,279
incrementals differential and this is a

00:05:09,620 --> 00:05:14,629
history of the last incremental so this

00:05:13,279 --> 00:05:20,689
is the newest backup that you have

00:05:14,629 --> 00:05:22,819
available at this point in time okay if

00:05:20,689 --> 00:05:25,219
you look a bit closer what happens in

00:05:22,819 --> 00:05:28,159
the conventional backup scheme then we

00:05:25,219 --> 00:05:31,310
see that we have here the full backup

00:05:28,159 --> 00:05:34,370
that that starts the first time the

00:05:31,310 --> 00:05:37,699
backup is done for this machine and then

00:05:34,370 --> 00:05:39,800
you have the second day that you do a

00:05:37,699 --> 00:05:42,349
backup it's incremental backup so you

00:05:39,800 --> 00:05:46,400
get it here and everything goes on until

00:05:42,349 --> 00:05:50,629
you have the better with the pointer

00:05:46,400 --> 00:05:53,300
until you have the retention period of

00:05:50,629 --> 00:05:56,149
your incremental as past which is the

00:05:53,300 --> 00:06:00,740
fact at this day and what happens now is

00:05:56,149 --> 00:06:02,659
the incremental backup is deleted so in

00:06:00,740 --> 00:06:06,199
principle you have for data loss here

00:06:02,659 --> 00:06:08,060
because in theory if you want to restore

00:06:06,199 --> 00:06:10,789
at this point in time everything that

00:06:08,060 --> 00:06:13,819
was stored later than this differential

00:06:10,789 --> 00:06:16,069
one then here the hole is punched into

00:06:13,819 --> 00:06:18,409
into your backup history this is what

00:06:16,069 --> 00:06:20,120
happens right now and this is one of the

00:06:18,409 --> 00:06:23,270
biggest problems of the conventional

00:06:20,120 --> 00:06:25,039
backup scheme if we look at the data

00:06:23,270 --> 00:06:32,870
that was being transferred in this

00:06:25,039 --> 00:06:36,379
backup scheme we see that okay yeah

00:06:32,870 --> 00:06:38,270
thank you so if we look at the data that

00:06:36,379 --> 00:06:40,699
is being transferred during the backup

00:06:38,270 --> 00:06:42,830
scheme you see that always when a full

00:06:40,699 --> 00:06:45,229
backup is done of course the complete

00:06:42,830 --> 00:06:48,399
backup that has to be backup data that

00:06:45,229 --> 00:06:50,810
has to be backed up is transferred then

00:06:48,399 --> 00:06:52,990
the incremental run every day which is

00:06:50,810 --> 00:06:55,250
really a minimum amount of data and the

00:06:52,990 --> 00:06:56,750
differentials in between are growing

00:06:55,250 --> 00:06:58,240
because they always contain the complete

00:06:56,750 --> 00:07:02,020
history still since the

00:06:58,240 --> 00:07:03,940
last full so this is here you can see

00:07:02,020 --> 00:07:05,590
what data is transferred and this data

00:07:03,940 --> 00:07:07,150
is always transferred from the client so

00:07:05,590 --> 00:07:08,860
in regular basis you have a full backup

00:07:07,150 --> 00:07:09,460
that's completely being transferred over

00:07:08,860 --> 00:07:11,800
the network

00:07:09,460 --> 00:07:14,500
and then you have daily a very small

00:07:11,800 --> 00:07:16,240
amount which is incremental and then in

00:07:14,500 --> 00:07:21,370
a bigger period of time you have the

00:07:16,240 --> 00:07:22,660
differentials which are growing so the

00:07:21,370 --> 00:07:25,360
problems with the conventional backup

00:07:22,660 --> 00:07:29,460
scheme are the full data is always

00:07:25,360 --> 00:07:29,460
copied over the network completely

00:07:29,669 --> 00:07:34,509
usually the identical data is copied

00:07:32,889 --> 00:07:36,820
from the client multiple times because

00:07:34,509 --> 00:07:39,340
if you usually not everything has

00:07:36,820 --> 00:07:42,849
changed between 1 and 2 in another full

00:07:39,340 --> 00:07:46,060
backup and what we also have seen is

00:07:42,849 --> 00:07:49,870
that the job history gets lost because

00:07:46,060 --> 00:07:53,650
we delete incremental after certain risk

00:07:49,870 --> 00:07:54,940
retention period and this is also a

00:07:53,650 --> 00:07:58,990
problem because you cannot really

00:07:54,940 --> 00:08:06,400
restore the status of your disk at that

00:07:58,990 --> 00:08:10,330
point in time so what the Oh secure

00:08:06,400 --> 00:08:12,310
mental backup scheme should make these

00:08:10,330 --> 00:08:16,120
things better so the basic concept

00:08:12,310 --> 00:08:17,919
behind it is that only changes are

00:08:16,120 --> 00:08:19,840
copied from the client so we really

00:08:17,919 --> 00:08:22,180
always only do incremental backups

00:08:19,840 --> 00:08:23,680
copied from the clients or no full

00:08:22,180 --> 00:08:27,099
backups and all differentials are copied

00:08:23,680 --> 00:08:31,659
from the client anymore the existing

00:08:27,099 --> 00:08:34,750
data on the client is consolidated with

00:08:31,659 --> 00:08:36,250
a new incremental information so from

00:08:34,750 --> 00:08:38,800
the client so the data we already have

00:08:36,250 --> 00:08:40,750
inside of our backup data pool is

00:08:38,800 --> 00:08:42,640
consolidated with the last incremental

00:08:40,750 --> 00:08:46,089
that comes in so that we create a new

00:08:42,640 --> 00:08:49,380
virtual status which should be exactly

00:08:46,089 --> 00:08:52,270
the same what is currently on the client

00:08:49,380 --> 00:08:54,220
the consolidation should happen without

00:08:52,270 --> 00:08:56,260
client interaction so that we don't need

00:08:54,220 --> 00:08:57,520
to have any connection to the client and

00:08:56,260 --> 00:09:02,020
the client does not have to do anything

00:08:57,520 --> 00:09:04,720
during the consolidation and we want to

00:09:02,020 --> 00:09:07,350
keep a defined number of incrementals

00:09:04,720 --> 00:09:10,480
because we always want to have a certain

00:09:07,350 --> 00:09:11,560
history of our backup of the status of

00:09:10,480 --> 00:09:14,350
the client usually

00:09:11,560 --> 00:09:17,050
defined amount of time you want to

00:09:14,350 --> 00:09:23,140
really be able to have the history on

00:09:17,050 --> 00:09:25,060
the daily basis so how does the always

00:09:23,140 --> 00:09:27,820
incremental backup scheme work so

00:09:25,060 --> 00:09:30,720
there's basically two main tasks one is

00:09:27,820 --> 00:09:33,130
what usually is also also done in the

00:09:30,720 --> 00:09:35,230
conventional backup scheme is we make an

00:09:33,130 --> 00:09:37,710
incremental backup every night usually

00:09:35,230 --> 00:09:40,540
when the backup window is is and

00:09:37,710 --> 00:09:43,210
secondly we have a consolidation job

00:09:40,540 --> 00:09:45,550
which does all the work to consolidate

00:09:43,210 --> 00:09:47,470
what we have already stored and what

00:09:45,550 --> 00:09:57,100
just came in to create a new virtual

00:09:47,470 --> 00:10:00,640
backup sorry so to be able to configure

00:09:57,100 --> 00:10:03,550
the always incremental scheme we edit to

00:10:00,640 --> 00:10:09,700
some directors through the job so first

00:10:03,550 --> 00:10:12,040
one is accurate so far for always super

00:10:09,700 --> 00:10:13,779
metal backup it's important to have

00:10:12,040 --> 00:10:15,400
accurate backups because only accurate

00:10:13,779 --> 00:10:17,770
backups will detect if a certain file

00:10:15,400 --> 00:10:19,720
has been deleted from the client because

00:10:17,770 --> 00:10:21,910
if we would never run an accurate backup

00:10:19,720 --> 00:10:25,330
from the client all data that has been

00:10:21,910 --> 00:10:27,280
deleted will be will stay in our backup

00:10:25,330 --> 00:10:29,350
a pool for ever because we would not

00:10:27,280 --> 00:10:30,670
detect that it's already old and can be

00:10:29,350 --> 00:10:34,930
deleted so that's why we need an

00:10:30,670 --> 00:10:37,060
accurate backup and we can configure

00:10:34,930 --> 00:10:39,730
always incremental yes which means that

00:10:37,060 --> 00:10:41,290
this job should be treated as an always

00:10:39,730 --> 00:10:44,970
incremental job which means that during

00:10:41,290 --> 00:10:47,920
the consolidation just jobs of this job

00:10:44,970 --> 00:10:51,070
so jobs of this job type need to be

00:10:47,920 --> 00:10:52,780
consolidated and we have a parameter

00:10:51,070 --> 00:10:56,620
that's called always incremental job

00:10:52,780 --> 00:10:58,380
retention this is the age of the

00:10:56,620 --> 00:11:00,370
incremental jobs that are kept and

00:10:58,380 --> 00:11:05,650
everything that is order will then be

00:11:00,370 --> 00:11:08,140
consolidated and we consolidate job

00:11:05,650 --> 00:11:09,910
itself as a new job type itself type

00:11:08,140 --> 00:11:12,279
consolidate and this is the top when

00:11:09,910 --> 00:11:14,620
it's triggered is it goes over all jobs

00:11:12,279 --> 00:11:16,690
that are defined as an always

00:11:14,620 --> 00:11:18,430
incremental job and we'll have a look at

00:11:16,690 --> 00:11:19,930
the parameters like they're always

00:11:18,430 --> 00:11:22,390
incremental job retention and then

00:11:19,930 --> 00:11:27,120
automatically start the consolidation

00:11:22,390 --> 00:11:27,120
job that does exactly what is configured

00:11:29,220 --> 00:11:34,930
yeah I think that's what I already told

00:11:33,180 --> 00:11:37,330
so yeah

00:11:34,930 --> 00:11:39,640
consolidation job goes over all backup

00:11:37,330 --> 00:11:41,260
jobs that are con configured as always

00:11:39,640 --> 00:11:43,030
incremental jobs and will then start

00:11:41,260 --> 00:11:50,610
virtual backups that do the

00:11:43,030 --> 00:11:55,200
consolidation ok looking a bit closer

00:11:50,610 --> 00:11:58,030
how the always incremental backup jobs

00:11:55,200 --> 00:12:00,670
works looking at the job availability

00:11:58,030 --> 00:12:02,920
and there we also have of course the

00:12:00,670 --> 00:12:06,190
first time we run it we have an

00:12:02,920 --> 00:12:07,510
incremental backup that has an

00:12:06,190 --> 00:12:09,340
incremental backup to something that

00:12:07,510 --> 00:12:10,900
never has been done before is of course

00:12:09,340 --> 00:12:14,260
like a full backup so the first backup

00:12:10,900 --> 00:12:16,780
will be like a full backup before and we

00:12:14,260 --> 00:12:18,670
have here the is always incremental

00:12:16,780 --> 00:12:22,330
period how long we want to keep

00:12:18,670 --> 00:12:25,330
incrementals and when this period is

00:12:22,330 --> 00:12:29,170
over in the conventional backup scheme

00:12:25,330 --> 00:12:31,300
the incremental backup was deleted

00:12:29,170 --> 00:12:33,640
because it was out of our retention

00:12:31,300 --> 00:12:37,690
period what happens now is we

00:12:33,640 --> 00:12:40,840
consolidate the oldest incremental with

00:12:37,690 --> 00:12:43,870
the full to a new virtual full so we

00:12:40,840 --> 00:12:46,570
always keep the complete history here

00:12:43,870 --> 00:12:50,230
but we do not delete anything so we

00:12:46,570 --> 00:12:53,680
always have to define a backup history

00:12:50,230 --> 00:13:01,600
but we still always only run incremental

00:12:53,680 --> 00:13:03,490
backups so compared the two ways of

00:13:01,600 --> 00:13:06,220
doing backups so on the left side again

00:13:03,490 --> 00:13:09,460
we have the overview of the conventional

00:13:06,220 --> 00:13:11,040
backup scheme and I think it's not so

00:13:09,460 --> 00:13:14,620
easy to understand that's why I thought

00:13:11,040 --> 00:13:18,970
how can I show it in a bit more plastic

00:13:14,620 --> 00:13:21,640
way to understand so we have the

00:13:18,970 --> 00:13:27,220
different backups here as little trains

00:13:21,640 --> 00:13:32,440
and in the conventional way each wagon

00:13:27,220 --> 00:13:34,990
here is closed one of these backups so

00:13:32,440 --> 00:13:38,320
first we have a full backup and we put

00:13:34,990 --> 00:13:39,190
the data and our full backup then the

00:13:38,320 --> 00:13:40,930
next day we

00:13:39,190 --> 00:13:43,090
we have an incremental one which is a

00:13:40,930 --> 00:13:44,710
bit smaller and then again we have

00:13:43,090 --> 00:13:47,770
another incremental of course I don't

00:13:44,710 --> 00:13:49,960
have so much so many wagons here to

00:13:47,770 --> 00:13:52,060
simulate everything that's printed there

00:13:49,960 --> 00:13:55,690
but the basic idea should be clear and

00:13:52,060 --> 00:13:57,730
what happens then is we have a certain

00:13:55,690 --> 00:13:59,620
age that's defined how long we keep the

00:13:57,730 --> 00:14:02,350
incremental backups and if we then

00:13:59,620 --> 00:14:04,480
create a new one the oldest one is

00:14:02,350 --> 00:14:07,870
simply deleted and the data that was

00:14:04,480 --> 00:14:09,430
stored here is lost so that's how works

00:14:07,870 --> 00:14:12,040
the conventional backup scheme you see

00:14:09,430 --> 00:14:14,320
the things are not linked together but

00:14:12,040 --> 00:14:16,690
if we do the OS incremental backup

00:14:14,320 --> 00:14:20,250
scheme we have a link between all the

00:14:16,690 --> 00:14:30,100
backups that we do so it's like a train

00:14:20,250 --> 00:14:32,140
sorry should have trained before so the

00:14:30,100 --> 00:14:33,700
basic idea here is it's exactly the same

00:14:32,140 --> 00:14:36,130
the first backup is a full backup of our

00:14:33,700 --> 00:14:38,470
client then we do the incremental and

00:14:36,130 --> 00:14:41,260
then again we do an incremental but what

00:14:38,470 --> 00:14:43,300
happens then if the incremental time is

00:14:41,260 --> 00:14:46,330
over like before then we create a new

00:14:43,300 --> 00:14:48,490
one and then the next day during the day

00:14:46,330 --> 00:14:51,250
the consolidation job comes and what it

00:14:48,490 --> 00:14:53,500
does is it looks into the oldest backups

00:14:51,250 --> 00:14:56,800
it consolidates what is here together

00:14:53,500 --> 00:14:59,920
with the oldest incremental and this

00:14:56,800 --> 00:15:03,070
goes away so you see you did not lose

00:14:59,920 --> 00:15:05,590
any data the data is direct behind

00:15:03,070 --> 00:15:07,360
that's the basic idea and if you have

00:15:05,590 --> 00:15:09,550
for example double data so here

00:15:07,360 --> 00:15:11,110
something is deleted then because of the

00:15:09,550 --> 00:15:11,800
accurate we understand that this is not

00:15:11,110 --> 00:15:14,140
there anymore

00:15:11,800 --> 00:15:16,120
and we only copy over what really needs

00:15:14,140 --> 00:15:19,150
to be kept that's the idea how it works

00:15:16,120 --> 00:15:22,120
and this way we really always drag

00:15:19,150 --> 00:15:24,670
behind us the the oldest HM so we have

00:15:22,120 --> 00:15:31,510
always a defiant history and you never

00:15:24,670 --> 00:15:33,730
lose any data doing this okay

00:15:31,510 --> 00:15:35,380
now looking at the data that needs to be

00:15:33,730 --> 00:15:39,460
transferred when we do always

00:15:35,380 --> 00:15:41,500
incrementals there's two times two types

00:15:39,460 --> 00:15:43,839
of data that's being transferred two

00:15:41,500 --> 00:15:45,339
types of transfer one is coming from the

00:15:43,839 --> 00:15:48,370
client that's something we already saw

00:15:45,339 --> 00:15:50,230
this is the first one is like a full

00:15:48,370 --> 00:15:52,180
backup because we copy over everything

00:15:50,230 --> 00:15:53,020
and then we always run incremental

00:15:52,180 --> 00:15:55,630
backup jobs

00:15:53,020 --> 00:15:57,250
which is very small here that's perfect

00:15:55,630 --> 00:15:59,620
and this is also what's going on all the

00:15:57,250 --> 00:16:02,740
time we have a minimum amount of data

00:15:59,620 --> 00:16:04,900
being copied from the client but when

00:16:02,740 --> 00:16:07,060
the age is over and we start to

00:16:04,900 --> 00:16:09,940
consolidate we have a problem because

00:16:07,060 --> 00:16:12,630
you see here the green one is the

00:16:09,940 --> 00:16:16,960
virtual backup so we are consolidating

00:16:12,630 --> 00:16:19,570
as I just chose so short all data that

00:16:16,960 --> 00:16:21,970
comes from the client plus the oldest

00:16:19,570 --> 00:16:25,450
incremental which means more or less

00:16:21,970 --> 00:16:28,900
that if you do it like the concept was

00:16:25,450 --> 00:16:31,240
just the school described is that during

00:16:28,900 --> 00:16:33,820
the consolidation job I'm moving all the

00:16:31,240 --> 00:16:36,580
data that is on the client more more or

00:16:33,820 --> 00:16:39,550
less minimum amount so plus plus an

00:16:36,580 --> 00:16:41,350
incremental if we do it like this we

00:16:39,550 --> 00:16:43,600
would have and we had four big

00:16:41,350 --> 00:16:45,700
installation then the local machine

00:16:43,600 --> 00:16:48,040
would have to copy more or less all the

00:16:45,700 --> 00:16:49,750
data that we have in our complete

00:16:48,040 --> 00:16:52,180
environment and this would be a big

00:16:49,750 --> 00:16:56,320
problem because even if it's a local

00:16:52,180 --> 00:16:58,390
copy it's too slow so the always

00:16:56,320 --> 00:17:00,970
incremental job data problem is we only

00:16:58,390 --> 00:17:02,590
get minimum data from the client but the

00:17:00,970 --> 00:17:04,540
problem is that we have to more or less

00:17:02,590 --> 00:17:06,700
mangle all the data that we do have and

00:17:04,540 --> 00:17:11,890
that's of course impossible for a large

00:17:06,700 --> 00:17:14,920
number of clients so the idea behind the

00:17:11,890 --> 00:17:18,310
data then had how can we work on this

00:17:14,920 --> 00:17:22,209
problem is instead of consolidating

00:17:18,310 --> 00:17:24,940
everything so we have the biggest

00:17:22,209 --> 00:17:26,800
problem is the last full the full is the

00:17:24,940 --> 00:17:28,290
biggest problem but what we really want

00:17:26,800 --> 00:17:30,670
to have is we want to have a certain

00:17:28,290 --> 00:17:33,900
incremental history that's what we need

00:17:30,670 --> 00:17:36,310
to keep so what we can do is instead of

00:17:33,900 --> 00:17:38,680
consolidating the full always with

00:17:36,310 --> 00:17:41,440
everything I just consolidate the

00:17:38,680 --> 00:17:44,260
incrementals when I get a new and it's a

00:17:41,440 --> 00:17:45,910
new one so I always keep this history of

00:17:44,260 --> 00:17:51,060
incrementals but I don't touch the full

00:17:45,910 --> 00:17:53,260
I leave it so that way I can keep

00:17:51,060 --> 00:17:56,320
minimize the amount of data that I need

00:17:53,260 --> 00:17:58,240
to copy and if I look it into the job

00:17:56,320 --> 00:17:59,890
availability graph it look like looks

00:17:58,240 --> 00:18:02,380
like this so you always have this

00:17:59,890 --> 00:18:04,150
diagonal with the job history that you

00:18:02,380 --> 00:18:05,890
want in it at each point in time you

00:18:04,150 --> 00:18:10,900
have to define history of incremental

00:18:05,890 --> 00:18:13,540
but I simply do not we just leave the

00:18:10,900 --> 00:18:16,510
phone for a certain time and then if

00:18:13,540 --> 00:18:19,210
this age for we define how old it can

00:18:16,510 --> 00:18:21,580
become and this only this time we

00:18:19,210 --> 00:18:24,760
consolidated with the a oldest

00:18:21,580 --> 00:18:26,440
incremental so the foulest kept longer

00:18:24,760 --> 00:18:28,330
but we still always have the history

00:18:26,440 --> 00:18:31,900
want so we don't lose any data but we

00:18:28,330 --> 00:18:35,080
have to move much less data than we did

00:18:31,900 --> 00:18:37,720
before before we had the full copying of

00:18:35,080 --> 00:18:39,990
everything locally every day and if we

00:18:37,720 --> 00:18:42,220
do it like this we only have to do this

00:18:39,990 --> 00:18:43,660
whatever once a month once a week or

00:18:42,220 --> 00:18:48,070
something and this is of course doable

00:18:43,660 --> 00:18:50,170
and if we have multiple clients that are

00:18:48,070 --> 00:18:51,610
configured exactly the same this would

00:18:50,170 --> 00:18:54,160
then mean that of course they all have

00:18:51,610 --> 00:18:56,200
at the same time this maximum age

00:18:54,160 --> 00:18:59,140
reached and then they all would at the

00:18:56,200 --> 00:19:01,240
same time start to copy everything which

00:18:59,140 --> 00:19:08,440
also is nothing we want to achieve and

00:19:01,240 --> 00:19:10,360
therefore oh sorry we have I invented

00:19:08,440 --> 00:19:12,340
another parameter that says okay what

00:19:10,360 --> 00:19:15,220
what what is the maximum of nor amount

00:19:12,340 --> 00:19:18,310
of full incrementals a full jobs that

00:19:15,220 --> 00:19:19,710
you want to consolidate per day so so

00:19:18,310 --> 00:19:22,570
then you can configure okay never

00:19:19,710 --> 00:19:24,190
consolidate a full more than one full

00:19:22,570 --> 00:19:28,930
per day for example and then it will

00:19:24,190 --> 00:19:31,960
only start one full and the next day the

00:19:28,930 --> 00:19:33,850
next client will be consolidated and the

00:19:31,960 --> 00:19:37,750
next day of the third one so you can

00:19:33,850 --> 00:19:43,090
then still also don't have the peak load

00:19:37,750 --> 00:19:45,130
on one day hope that this came clear ok

00:19:43,090 --> 00:19:47,830
so here's a short overview how to do the

00:19:45,130 --> 00:19:50,200
configuration so you can configure that

00:19:47,830 --> 00:19:52,660
the job should be an always incremental

00:19:50,200 --> 00:19:54,730
backup then you can say what is the

00:19:52,660 --> 00:19:56,830
always incremental job retain retention

00:19:54,730 --> 00:20:03,160
this defines how long is the job history

00:19:56,830 --> 00:20:06,250
that I always want to have then then I

00:20:03,160 --> 00:20:09,790
can also okay I did I think I didn't

00:20:06,250 --> 00:20:12,270
explain that so I can also make a

00:20:09,790 --> 00:20:14,830
guarantee that a certain amount of

00:20:12,270 --> 00:20:16,720
history always has kept even if for

00:20:14,830 --> 00:20:18,910
example for a week or something a client

00:20:16,720 --> 00:20:19,660
has not been backed up and this problem

00:20:18,910 --> 00:20:23,170
can

00:20:19,660 --> 00:20:26,260
happen and this is the max full age so

00:20:23,170 --> 00:20:28,690
that it says okay I will keep I will

00:20:26,260 --> 00:20:30,970
leave the full backup for 21 days and if

00:20:28,690 --> 00:20:33,520
it's older than 21 days then I will do

00:20:30,970 --> 00:20:35,050
the consolidation of the last full

00:20:33,520 --> 00:20:43,480
backup also together with the last

00:20:35,050 --> 00:20:46,750
incremental backup yeah so this is

00:20:43,480 --> 00:20:50,590
always incremental backup then with the

00:20:46,750 --> 00:20:52,540
tricks I just mentioned will really only

00:20:50,590 --> 00:20:55,090
do incremental backups from the client

00:20:52,540 --> 00:20:57,100
the network load is minimized because

00:20:55,090 --> 00:21:00,280
you really only transfer what has been

00:20:57,100 --> 00:21:02,830
changed the backup type is minimum and

00:21:00,280 --> 00:21:07,090
this is done this all is done during the

00:21:02,830 --> 00:21:09,160
backup window while the the

00:21:07,090 --> 00:21:10,510
consolidation job can be done outside of

00:21:09,160 --> 00:21:13,030
the backup window usually the backups

00:21:10,510 --> 00:21:16,030
server has nothing to do over the day or

00:21:13,030 --> 00:21:18,790
not much and then the consolidation can

00:21:16,030 --> 00:21:20,680
be started this is outside of the backup

00:21:18,790 --> 00:21:24,120
window the good thing is we all have it

00:21:20,680 --> 00:21:26,710
in our local storage which is very fast

00:21:24,120 --> 00:21:29,500
the existing backups are consolidated

00:21:26,710 --> 00:21:30,760
into new backups we do not have holds

00:21:29,500 --> 00:21:33,940
and the backup history like it was

00:21:30,760 --> 00:21:35,500
before and we have really a defined

00:21:33,940 --> 00:21:39,460
incremental backup history that is

00:21:35,500 --> 00:21:42,400
always kept and also important is that

00:21:39,460 --> 00:21:45,040
this is only adequate for file backups

00:21:42,400 --> 00:21:47,050
because pluck and backups like Microsoft

00:21:45,040 --> 00:21:49,810
SQL Server or something they rely on

00:21:47,050 --> 00:21:51,370
having full and differential or

00:21:49,810 --> 00:21:53,530
incremental themselves because they

00:21:51,370 --> 00:21:55,180
really do backups like that and if you

00:21:53,530 --> 00:22:00,970
would consolidate them of course that

00:21:55,180 --> 00:22:10,200
doesn't wouldn't make sense ok that's it

00:22:00,970 --> 00:22:10,200
from my side any questions ok

00:22:11,820 --> 00:22:17,560
no this doesn't have any influence on

00:22:15,250 --> 00:22:20,320
the client the client is always doing

00:22:17,560 --> 00:22:36,730
incremental backups nothing else no

00:22:20,320 --> 00:22:38,320
changes needed there during the

00:22:36,730 --> 00:22:44,140
consolidation you need to you need to

00:22:38,320 --> 00:22:48,060
double place yes yeah that that is true

00:22:44,140 --> 00:22:48,060
yes that is that is the case

00:23:02,210 --> 00:23:08,009
yeah that would be of course not so

00:23:04,919 --> 00:23:09,779
optimal because the good thing is if you

00:23:08,009 --> 00:23:11,279
have it all local on one machine then

00:23:09,779 --> 00:23:13,379
it's much faster than if you have to

00:23:11,279 --> 00:23:15,360
copy it over but of course it would be

00:23:13,379 --> 00:23:17,249
print principle possible also to do it

00:23:15,360 --> 00:23:19,320
like this I guess but I don't think that

00:23:17,249 --> 00:23:21,240
it makes sense because the idea is

00:23:19,320 --> 00:23:23,100
especially if you make it bigger setups

00:23:21,240 --> 00:23:49,619
that you really have to do local fast

00:23:23,100 --> 00:23:52,529
copying okay yeah it will not be able to

00:23:49,619 --> 00:23:55,110
cope up so it will so the things that it

00:23:52,529 --> 00:23:57,899
cannot come solid it will stay there so

00:23:55,110 --> 00:23:59,820
of course it's it's your so you need to

00:23:57,899 --> 00:24:02,129
do the calculation right but the good

00:23:59,820 --> 00:24:05,070
thing is that if you you can at any time

00:24:02,129 --> 00:24:07,649
start the consolidation job again and it

00:24:05,070 --> 00:24:10,499
will it's this time again look and see

00:24:07,649 --> 00:24:12,029
okay I can now start another migration

00:24:10,499 --> 00:24:13,940
or something but of course doing the

00:24:12,029 --> 00:24:17,009
parameters right in a certain setup is

00:24:13,940 --> 00:24:19,830
needs to be done by looking at how fast

00:24:17,009 --> 00:24:22,769
how much consolidation jobs with Falls

00:24:19,830 --> 00:24:24,269
can I run during the between the backup

00:24:22,769 --> 00:24:26,070
windows that I have that's that's the

00:24:24,269 --> 00:24:28,279
idea and that's depends on how much data

00:24:26,070 --> 00:24:31,279
you have and how fast your machine is

00:24:28,279 --> 00:24:31,279
please

00:24:36,579 --> 00:24:43,929
no because the old data is only freed if

00:24:41,149 --> 00:24:49,699
the consolidation job was correctly

00:24:43,929 --> 00:24:52,789
finished so what the consolidation job

00:24:49,699 --> 00:24:55,699
does it really starts in the end of

00:24:52,789 --> 00:24:58,339
virtual backup of the job ideas that

00:24:55,699 --> 00:25:00,019
determines and only if this is correct

00:24:58,339 --> 00:25:02,839
then it deletes the jobs that were

00:25:00,019 --> 00:25:05,299
copied from the from the catalog so that

00:25:02,839 --> 00:25:07,159
if they are lying on a certain volume

00:25:05,299 --> 00:25:17,629
this volume is free and can be recycled

00:25:07,159 --> 00:25:21,289
to next time that the cap runs in

00:25:17,629 --> 00:25:23,509
principle yes because it's it just looks

00:25:21,289 --> 00:25:25,579
into the backup history what's available

00:25:23,509 --> 00:25:27,679
of this job and it will then determine

00:25:25,579 --> 00:25:35,749
which job IDs need to be consolidated

00:25:27,679 --> 00:25:38,539
and consolidate them together ok I'm

00:25:35,749 --> 00:25:39,949
also here for more questions if you have

00:25:38,539 --> 00:25:42,919
something later at the coffee break

00:25:39,949 --> 00:25:45,589
thanks I'll see the biggest new feature

00:25:42,919 --> 00:25:47,119
and now we have some minutes left so I

00:25:45,589 --> 00:25:50,749
can give you a short overview of some of

00:25:47,119 --> 00:25:52,929
the other things that are new one was

00:25:50,749 --> 00:25:57,859
already mentioned as a new configuration

00:25:52,929 --> 00:25:59,659
scheme so see I used to do it until now

00:25:57,859 --> 00:26:01,869
and the good thing is you can keep your

00:25:59,659 --> 00:26:04,519
existing scheme if you want so this is

00:26:01,869 --> 00:26:05,809
kind of optional to use a new one so if

00:26:04,519 --> 00:26:07,609
you have new configuration or new

00:26:05,809 --> 00:26:10,209
installations you'll probably use a new

00:26:07,609 --> 00:26:12,949
scheme if you have your existing

00:26:10,209 --> 00:26:15,109
installation and you do an update it

00:26:12,949 --> 00:26:16,789
will in almost all cases just work as

00:26:15,109 --> 00:26:18,559
you were used to I will tell you in

00:26:16,789 --> 00:26:22,419
which part it probably will need

00:26:18,559 --> 00:26:25,039
adaptions but so until now we have

00:26:22,419 --> 00:26:28,549
configuration files for for each demon

00:26:25,039 --> 00:26:30,889
one and each configuration file has had

00:26:28,549 --> 00:26:33,409
the option to include other files which

00:26:30,889 --> 00:26:37,579
most of you probably are using and there

00:26:33,409 --> 00:26:39,499
was also the option to do some scripting

00:26:37,579 --> 00:26:41,629
year - for example automatically include

00:26:39,499 --> 00:26:44,779
all configuration files from other

00:26:41,629 --> 00:26:46,100
directories so that was already possible

00:26:44,779 --> 00:26:48,650
but little bit

00:26:46,100 --> 00:26:54,919
educated if you did this scripting pipe

00:26:48,650 --> 00:26:57,950
stuff so what's new as we have one

00:26:54,919 --> 00:27:01,280
configuration directory pure demon so

00:26:57,950 --> 00:27:03,320
they those directories already existed

00:27:01,280 --> 00:27:05,960
before but now we say okay we look

00:27:03,320 --> 00:27:10,630
what's inside this directory and then we

00:27:05,960 --> 00:27:16,780
have for every resource of that type

00:27:10,630 --> 00:27:18,950
another subdirectory and there we have

00:27:16,780 --> 00:27:20,530
configuration files and all these

00:27:18,950 --> 00:27:23,360
configuration files gets included

00:27:20,530 --> 00:27:26,240
automatically if you follow the new

00:27:23,360 --> 00:27:28,970
configuration schema so on that makes

00:27:26,240 --> 00:27:30,110
things a little bit easier you just drop

00:27:28,970 --> 00:27:33,020
your stuff there if you have a new

00:27:30,110 --> 00:27:35,750
client or have another pool and you just

00:27:33,020 --> 00:27:38,419
drop in another file and it will be

00:27:35,750 --> 00:27:42,590
included on director reload or restart

00:27:38,419 --> 00:27:46,340
so that is a basic change one of the

00:27:42,590 --> 00:27:49,130
reason we've did this is to help people

00:27:46,340 --> 00:27:50,870
who are automating their configuration

00:27:49,130 --> 00:27:52,130
so they just have to drop new files if

00:27:50,870 --> 00:27:54,970
they have in your client or something in

00:27:52,130 --> 00:28:03,020
order to a certain place do a reload and

00:27:54,970 --> 00:28:05,510
then this is done okay so I said if you

00:28:03,020 --> 00:28:07,159
have something like this and well

00:28:05,510 --> 00:28:10,370
usually you have it you have an existing

00:28:07,159 --> 00:28:13,820
like varios da conf so if this file and

00:28:10,370 --> 00:28:17,000
the use directory exists then it is used

00:28:13,820 --> 00:28:19,190
and if it does not exist the other new

00:28:17,000 --> 00:28:21,590
schema will be used so that means the

00:28:19,190 --> 00:28:23,030
director or the daemon which is to be

00:28:21,590 --> 00:28:24,820
configured will scan the subdirectories

00:28:23,030 --> 00:28:29,809
and include all the files so that is

00:28:24,820 --> 00:28:36,380
basically the change if someone of you

00:28:29,809 --> 00:28:38,120
already uses these subdirectories here

00:28:36,380 --> 00:28:39,950
and has a script that automatically

00:28:38,120 --> 00:28:42,620
includes everything that is below those

00:28:39,950 --> 00:28:45,169
sub directories that might lead to a

00:28:42,620 --> 00:28:47,090
little problem if you update because

00:28:45,169 --> 00:28:49,220
then some new configuration files from

00:28:47,090 --> 00:28:51,140
the let's say RPM packages will get into

00:28:49,220 --> 00:28:54,799
that directory so in this case you have

00:28:51,140 --> 00:28:57,730
to be you have to look and maybe change

00:28:54,799 --> 00:28:59,500
some links or something but in I expect

00:28:57,730 --> 00:29:02,260
99% of the

00:28:59,500 --> 00:29:04,720
there won't be problems so that means

00:29:02,260 --> 00:29:08,440
you have the choice to use either the

00:29:04,720 --> 00:29:09,100
old way or the new way okay questions

00:29:08,440 --> 00:29:24,340
Molly

00:29:09,100 --> 00:29:29,440
nice name yeah okay for this up yeah we

00:29:24,340 --> 00:29:31,830
have it yeah it's a lowest line so from

00:29:29,440 --> 00:29:36,070
my understanding is it it goes like this

00:29:31,830 --> 00:29:37,600
yoke it's not recursively right no it's

00:29:36,070 --> 00:29:46,809
just like this like it's like it's here

00:29:37,600 --> 00:29:48,610
yeah yeah yeah okay okay so and well the

00:29:46,809 --> 00:29:51,220
others one reason was ought to make it

00:29:48,610 --> 00:29:52,600
making automation easier if you drop

00:29:51,220 --> 00:29:55,169
your configuration files you know and

00:29:52,600 --> 00:29:57,820
the other reason is that we have a

00:29:55,169 --> 00:30:01,960
long-standing feature on our roadmap

00:29:57,820 --> 00:30:04,809
called configuration API and now we have

00:30:01,960 --> 00:30:07,539
the first steps with that and the the

00:30:04,809 --> 00:30:10,600
new structure is yeah the base work to

00:30:07,539 --> 00:30:13,299
have the configuration API because now

00:30:10,600 --> 00:30:17,320
we have in be console commands for

00:30:13,299 --> 00:30:19,270
example add client and if you configure

00:30:17,320 --> 00:30:20,980
and give all the parameters and the big

00:30:19,270 --> 00:30:23,020
concert was in your client it will then

00:30:20,980 --> 00:30:25,539
automatically create the corresponding

00:30:23,020 --> 00:30:28,330
configuration files in the proper

00:30:25,539 --> 00:30:30,789
position and the subdirectory here ok so

00:30:28,330 --> 00:30:32,890
that is the basic idea there are some

00:30:30,789 --> 00:30:36,460
things already implemented and we will

00:30:32,890 --> 00:30:40,390
grow that and the plan is of course that

00:30:36,460 --> 00:30:42,539
we also use the web UI to use this API

00:30:40,390 --> 00:30:45,580
so that you can in the long run

00:30:42,539 --> 00:30:50,200
configure well not all but most things

00:30:45,580 --> 00:30:51,220
using the WI and the base what's

00:30:50,200 --> 00:30:52,720
happening then that there are

00:30:51,220 --> 00:31:01,809
configuration files created and the

00:30:52,720 --> 00:31:03,820
subdirectory feature ok so then yeah

00:31:01,809 --> 00:31:06,010
enhanced ACL supports

00:31:03,820 --> 00:31:10,179
um I don't know who of you is using se

00:31:06,010 --> 00:31:12,340
else inside Palio's already oh that was

00:31:10,179 --> 00:31:18,370
more or less what Alex

00:31:12,340 --> 00:31:21,880
little bits okay yeah so it's not really

00:31:18,370 --> 00:31:23,740
easy to to configure it but it's really

00:31:21,880 --> 00:31:26,530
good docu manage and once you get

00:31:23,740 --> 00:31:29,440
through the documentation it's not that

00:31:26,530 --> 00:31:31,650
complicated anymore but the biggest

00:31:29,440 --> 00:31:35,110
problem was that some things weren't

00:31:31,650 --> 00:31:39,130
implemented consistently or consequently

00:31:35,110 --> 00:31:40,900
so what worked before also was that if

00:31:39,130 --> 00:31:44,380
you had the proper role and rule

00:31:40,900 --> 00:31:47,290
definition and the usual use cases that

00:31:44,380 --> 00:31:49,480
you want to allow a certain user to

00:31:47,290 --> 00:31:51,820
restore his data belonging to his

00:31:49,480 --> 00:31:55,600
personal computer or whatever so if you

00:31:51,820 --> 00:31:58,540
had this the ACL set up properly it was

00:31:55,600 --> 00:32:01,690
already working that this guy only could

00:31:58,540 --> 00:32:04,120
restore his data but was what was

00:32:01,690 --> 00:32:06,670
missing and some complaint

00:32:04,120 --> 00:32:09,180
of course was that he could still see

00:32:06,670 --> 00:32:12,640
other computer's data which is also not

00:32:09,180 --> 00:32:15,430
good enough and now we fix this gap and

00:32:12,640 --> 00:32:19,000
now if roles and rules are configured

00:32:15,430 --> 00:32:21,760
properly this is a requirement to build

00:32:19,000 --> 00:32:25,270
kind of self-service portals or to allow

00:32:21,760 --> 00:32:27,420
users to really only see see and restore

00:32:25,270 --> 00:32:36,100
data belonging to the computers they are

00:32:27,420 --> 00:32:38,110
allowed to access okay then we have firm

00:32:36,100 --> 00:32:41,560
maybe the biggest change in the web view

00:32:38,110 --> 00:32:44,620
I said it's no multi-language capable we

00:32:41,560 --> 00:32:47,730
already have translations for German

00:32:44,620 --> 00:32:51,310
French and Russian and it uses the usual

00:32:47,730 --> 00:32:53,500
source mechanism of Pio files and we

00:32:51,310 --> 00:32:55,660
already get first people being

00:32:53,500 --> 00:32:58,480
interested in doing what transistor

00:32:55,660 --> 00:33:00,280
translations like Spanish came from the

00:32:58,480 --> 00:33:02,980
community and of course we are looking

00:33:00,280 --> 00:33:06,520
for more contributions for other

00:33:02,980 --> 00:33:08,530
languages as well and in other news and

00:33:06,520 --> 00:33:10,840
the web UI is that in the list of

00:33:08,530 --> 00:33:13,060
clients it shows you not only which

00:33:10,840 --> 00:33:14,980
version of Subbarao sft software is

00:33:13,060 --> 00:33:16,420
installed it also shows you are there

00:33:14,980 --> 00:33:19,690
updates available so and gives you a

00:33:16,420 --> 00:33:23,650
little hint so now I can see that in one

00:33:19,690 --> 00:33:25,690
you then we have introduced media

00:33:23,650 --> 00:33:26,080
handling so you can see what tapes and

00:33:25,690 --> 00:33:27,730
stuff

00:33:26,080 --> 00:33:32,169
there are and get some information and

00:33:27,730 --> 00:33:33,669
how to change a support so when Frank is

00:33:32,169 --> 00:33:36,220
here and the exhibition area we will

00:33:33,669 --> 00:33:37,980
have a little demo points or he can show

00:33:36,220 --> 00:33:40,390
you how it looks like he has just

00:33:37,980 --> 00:33:42,309
screenshot of the auto change of view so

00:33:40,390 --> 00:33:44,679
you can import and export tapes you can

00:33:42,309 --> 00:33:48,309
label tapes and you can see what's in

00:33:44,679 --> 00:33:52,510
your drives actually and another

00:33:48,309 --> 00:33:56,860
screenshot with this Karelian fonts in

00:33:52,510 --> 00:34:03,070
the Russian language okay questions

00:33:56,860 --> 00:34:06,100
what's a rep you I until now okay then

00:34:03,070 --> 00:34:08,560
we've also worked on the ndmp stuff so

00:34:06,100 --> 00:34:10,510
one one or two things here is that we

00:34:08,560 --> 00:34:14,919
now support this to this to tape support

00:34:10,510 --> 00:34:18,339
in the ndmp world and one thing that was

00:34:14,919 --> 00:34:21,210
really a problem for people having n dnp

00:34:18,339 --> 00:34:24,070
searches and large amount of files and

00:34:21,210 --> 00:34:26,020
well funny enough but it's not a

00:34:24,070 --> 00:34:28,149
surprise that most people having n dnp

00:34:26,020 --> 00:34:31,240
have lots of files so mostly all of them

00:34:28,149 --> 00:34:35,169
were affected by this so and if it then

00:34:31,240 --> 00:34:38,379
comes to to restore it was kind of slow

00:34:35,169 --> 00:34:42,119
or impossible to find a file information

00:34:38,379 --> 00:34:44,740
so that was at the back a piano okay

00:34:42,119 --> 00:34:46,960
that guy was slow yeah and so that was

00:34:44,740 --> 00:34:49,960
improved and now I don't know do we have

00:34:46,960 --> 00:34:51,310
any numbers how many files you could

00:34:49,960 --> 00:35:07,060
take out we have some large and

00:34:51,310 --> 00:35:08,410
insulations but but maybe you learn a

00:35:07,060 --> 00:35:22,710
little bit later and your presentation

00:35:08,410 --> 00:35:25,119
about that yeah okay yeah yeah so it's

00:35:22,710 --> 00:35:29,560
that's now in this in this release of

00:35:25,119 --> 00:35:32,280
course okay good yeah and then we we

00:35:29,560 --> 00:35:35,920
have one new plugin that was also

00:35:32,280 --> 00:35:38,650
sponsored using extra bracket from

00:35:35,920 --> 00:35:40,720
takuna anybody here who has used

00:35:38,650 --> 00:35:43,420
to announce about that come on i-64 back

00:35:40,720 --> 00:35:46,720
up before some yeah so what you can do

00:35:43,420 --> 00:35:49,839
now you can with the plug-in uses extra

00:35:46,720 --> 00:35:52,000
backup on this really nice tool can do

00:35:49,839 --> 00:35:55,329
incremental backups at least if you have

00:35:52,000 --> 00:35:57,039
nodb tables with my eyes on tables it

00:35:55,329 --> 00:36:00,010
won't to increment it will always do

00:35:57,039 --> 00:36:01,630
full if you use it but if you stay on in

00:36:00,010 --> 00:36:04,000
ODB it really can make incremental

00:36:01,630 --> 00:36:07,809
backups without stopping or interfering

00:36:04,000 --> 00:36:09,760
the database so let's back up and it can

00:36:07,809 --> 00:36:12,490
also do point the time recovery if you

00:36:09,760 --> 00:36:14,619
have the locks included and enabled and

00:36:12,490 --> 00:36:20,980
in your my sequel or mariadb

00:36:14,619 --> 00:36:24,520
database yeah okay so then some words

00:36:20,980 --> 00:36:26,650
about roadmap this does not mean that

00:36:24,520 --> 00:36:28,930
this will be in the next release it will

00:36:26,650 --> 00:36:31,809
be in hopefully one of the next releases

00:36:28,930 --> 00:36:35,380
so we don't have made up full plans what

00:36:31,809 --> 00:36:37,809
will be done for the next release but

00:36:35,380 --> 00:36:42,010
one thing where we are going to work on

00:36:37,809 --> 00:36:45,010
heavily is the ndnp backup to storage

00:36:42,010 --> 00:36:46,720
attached tape drives so what's now the

00:36:45,010 --> 00:36:50,289
case is that it goes through the storage

00:36:46,720 --> 00:36:53,859
daemon and then to the tape drive but if

00:36:50,289 --> 00:36:55,900
you have ndmp tape drives then it's also

00:36:53,859 --> 00:36:57,339
possible from the protocol to directly

00:36:55,900 --> 00:36:58,539
write from the storage to the tape drive

00:36:57,339 --> 00:37:03,970
and that is something that we are going

00:36:58,539 --> 00:37:05,849
to support we also have new performance

00:37:03,970 --> 00:37:09,809
enhancements for large environments

00:37:05,849 --> 00:37:15,849
especially if you have millions of files

00:37:09,809 --> 00:37:17,650
then the file name table is quite big so

00:37:15,849 --> 00:37:19,809
the problem is that there's there's a

00:37:17,650 --> 00:37:23,940
link that the table is splitted and we

00:37:19,809 --> 00:37:26,799
got phoning from customer who had a good

00:37:23,940 --> 00:37:29,079
suggestion how to solve this problem and

00:37:26,799 --> 00:37:31,119
that's already running in a pilot

00:37:29,079 --> 00:37:33,279
environment at that customer and we will

00:37:31,119 --> 00:37:36,700
going to move that into the next release

00:37:33,279 --> 00:37:39,549
and that will really increase speed if

00:37:36,700 --> 00:37:43,109
it comes to backup and restore off large

00:37:39,549 --> 00:37:46,990
file sets then we are going to work on

00:37:43,109 --> 00:37:49,329
plugin to directly backup rachet

00:37:46,990 --> 00:37:52,179
enterprise at a price virtualization

00:37:49,329 --> 00:37:55,869
virtual machines

00:37:52,179 --> 00:37:59,229
we have some concepts to do block based

00:37:55,869 --> 00:38:00,849
deduplication that's questionable if you

00:37:59,229 --> 00:38:02,229
do this or if you can finish this and

00:38:00,849 --> 00:38:04,329
the next year but it's definitely on our

00:38:02,229 --> 00:38:06,880
list and we have plans on a concept how

00:38:04,329 --> 00:38:11,069
to do it of course we will continue to

00:38:06,880 --> 00:38:14,349
enhance configuration API and the web UI

00:38:11,069 --> 00:38:16,299
so for example the grass you have seen

00:38:14,349 --> 00:38:19,389
and Philips presentation are really good

00:38:16,299 --> 00:38:21,999
if you want to know from what time

00:38:19,389 --> 00:38:24,159
period can I do potentially restore us

00:38:21,999 --> 00:38:28,229
from what times do I have the full

00:38:24,159 --> 00:38:30,249
history and those kind of graphs can be

00:38:28,229 --> 00:38:31,929
automatically created from the

00:38:30,249 --> 00:38:34,449
information that are in the catalog and

00:38:31,929 --> 00:38:36,369
it would be nice to have so for example

00:38:34,449 --> 00:38:38,499
in the view and the client view of a

00:38:36,369 --> 00:38:40,259
machine in the web UI that you can see

00:38:38,499 --> 00:38:42,969
okay I have for this client I have data

00:38:40,259 --> 00:38:46,119
available from this time period and so

00:38:42,969 --> 00:38:49,449
this is something on the list as well as

00:38:46,119 --> 00:38:52,419
performance graphs included those of you

00:38:49,449 --> 00:38:54,639
having attended the monitoring workshop

00:38:52,419 --> 00:38:57,369
yesterday maybe have seen the graph Anna

00:38:54,639 --> 00:39:00,579
interface so there are already ways to

00:38:57,369 --> 00:39:04,659
show performance graphs and we will

00:39:00,579 --> 00:39:07,799
somehow think about to have performance

00:39:04,659 --> 00:39:11,619
graphs as well as the vacui yeah so now

00:39:07,799 --> 00:39:13,479
basically the points on our list and of

00:39:11,619 --> 00:39:16,049
course we are open to hear other

00:39:13,479 --> 00:39:22,599
suggestions other feature requests and

00:39:16,049 --> 00:39:25,059
also Co funding opportunities questions

00:39:22,599 --> 00:39:27,539
regarding these points and the road map

00:39:25,059 --> 00:39:27,539
yeah

00:39:40,820 --> 00:39:50,850
yep I know yes of course yeah I think

00:39:49,500 --> 00:39:53,580
that is one of the point we have a

00:39:50,850 --> 00:39:55,680
website for co-funding project with some

00:39:53,580 --> 00:39:58,890
ideas because you're not the first one

00:39:55,680 --> 00:40:01,200
having this great idea and there were I

00:39:58,890 --> 00:40:05,670
think it was also clear lemony work done

00:40:01,200 --> 00:40:07,590
so the concept is to first have an app

00:40:05,670 --> 00:40:09,510
um back-end for scientific ation then

00:40:07,590 --> 00:40:12,240
you can have your LDAP or ID or

00:40:09,510 --> 00:40:15,300
something and reuse this and and somehow

00:40:12,240 --> 00:40:27,450
I think the concept is there but time

00:40:15,300 --> 00:40:28,860
and money not already yeah yeah yeah

00:40:27,450 --> 00:40:32,000
that is the idea to have at least the

00:40:28,860 --> 00:40:32,000
same functionality yeah

00:41:13,520 --> 00:41:23,660
okay so then it's out just three minutes

00:41:16,680 --> 00:41:28,190
overtime so then we can continue with

00:41:23,660 --> 00:41:28,190

YouTube URL: https://www.youtube.com/watch?v=IylN_f1Oqro


