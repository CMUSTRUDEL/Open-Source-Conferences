Title: OSBConf 2015 | VM backup beyond Bacula by Christian Theune
Publication date: 2015-10-05
Playlist: OSBConf 2015 | Open Source Backup Conference
Description: 
	The Flying Circus is an Operations-as-a-Service platform that supports project development teams to run their custom-develop software for clients. Earlier in 2014 we experienced a major data loss and had to perform massive disaster recovery. Unfortunately our Bacula setup was not up to the task and it took us longer and more effort to restore the data than we and our customers expected.
In this case study I’d like to present our public and very honest root cause analysis on how we managed to lose a lot of VMs’ data, how the restore happened, what we learned and how we’re trying to get better. After investigating our options for the future we decided to move away from Bacula’s file and VTL-oriented model and are currently implementing a solution based on CoW-filesystems (ZFS/btrfs), block-layer snapshots and diffing, and a small utility to glue things together.
Captions: 
	00:00:10,200 --> 00:00:16,139
okay welcome back everybody our next

00:00:13,650 --> 00:00:20,689
talk will be about vm backup beyond

00:00:16,139 --> 00:00:23,970
bakla presented by Christian toner enjoy

00:00:20,689 --> 00:00:25,560
thank you alright I hope you all had a

00:00:23,970 --> 00:00:28,199
good lunch break and instead of being

00:00:25,560 --> 00:00:32,850
like well fed and very sleepy you're all

00:00:28,199 --> 00:00:34,769
excited and very wide awake now the

00:00:32,850 --> 00:00:36,750
first thing I'd like to say is I'm

00:00:34,769 --> 00:00:38,540
really sorry this talk is kind of a

00:00:36,750 --> 00:00:40,710
little bit later than expected because

00:00:38,540 --> 00:00:46,050
originally it should have been last year

00:00:40,710 --> 00:00:50,280
and last year I boarded the wrong train

00:00:46,050 --> 00:00:52,230
and I went to Nuremberg and I noticed by

00:00:50,280 --> 00:00:54,269
finishing my slides that the logo was

00:00:52,230 --> 00:00:55,649
always saying like cologne colors like

00:00:54,269 --> 00:00:57,660
white why did they put cologne in the on

00:00:55,649 --> 00:01:02,579
the on the logo I'm going to know work

00:00:57,660 --> 00:01:04,979
and and I just got damn it so um looks

00:01:02,579 --> 00:01:06,330
like I made it this year and I'm happy

00:01:04,979 --> 00:01:07,890
that I got a second chance I didn't even

00:01:06,330 --> 00:01:10,649
have to fill out the form anymore again

00:01:07,890 --> 00:01:14,310
he just took the one from last year but

00:01:10,649 --> 00:01:16,200
I almost missed it again because my son

00:01:14,310 --> 00:01:18,570
to be who is a doing about four weeks

00:01:16,200 --> 00:01:20,970
decided to give us the first sign of he

00:01:18,570 --> 00:01:22,770
might come around on sunday so yesterday

00:01:20,970 --> 00:01:25,380
I was busy and trying to arrange whether

00:01:22,770 --> 00:01:28,170
i can come here or not um ok so I'm not

00:01:25,380 --> 00:01:32,130
a dad yet I still I'm very very relaxed

00:01:28,170 --> 00:01:34,680
I can give this talk all right back up

00:01:32,130 --> 00:01:39,140
um I've been doing back up since ages

00:01:34,680 --> 00:01:41,630
like 98 99 of servers workstations

00:01:39,140 --> 00:01:44,579
applications databases file systems

00:01:41,630 --> 00:01:47,340
whatever and it's always been painful

00:01:44,579 --> 00:01:49,920
it's always painful and I remember that

00:01:47,340 --> 00:01:52,110
back in 99 we used a tandberg drive with

00:01:49,920 --> 00:01:53,700
Amanda or something I think was Amanda

00:01:52,110 --> 00:01:56,520
and there's something like Zeman back

00:01:53,700 --> 00:01:59,039
then and we moved on and we get a small

00:01:56,520 --> 00:02:03,119
tape library with multiple multiple

00:01:59,039 --> 00:02:05,610
tapes and when whenever we stumbled into

00:02:03,119 --> 00:02:07,459
any kind of issue there was like

00:02:05,610 --> 00:02:10,019
hardware related or what we chose to use

00:02:07,459 --> 00:02:11,880
one of the answers of vendors would

00:02:10,019 --> 00:02:15,870
always be like yeah you have to spend

00:02:11,880 --> 00:02:17,310
more money and that is like my first my

00:02:15,870 --> 00:02:18,989
first response to you have to spend more

00:02:17,310 --> 00:02:21,120
money is okay i'm going to use different

00:02:18,989 --> 00:02:23,160
vendor because why do you sell me

00:02:21,120 --> 00:02:24,870
something in the first place where you

00:02:23,160 --> 00:02:29,819
tell me doesn't work i have to spend

00:02:24,870 --> 00:02:31,019
more money I'd it no today I work for

00:02:29,819 --> 00:02:33,239
opening called the Flying Circus i'm

00:02:31,019 --> 00:02:36,239
co-founder and we operate custom web

00:02:33,239 --> 00:02:38,549
applications we have a public cluster

00:02:36,239 --> 00:02:40,439
but we run private clusters too and we

00:02:38,549 --> 00:02:42,930
manage a couple of dozen like maybe 40

00:02:40,439 --> 00:02:45,329
50 physical servers and actually a

00:02:42,930 --> 00:02:48,239
couple hundred 404 and 50 virtual

00:02:45,329 --> 00:02:50,400
machines and the sizes of these machines

00:02:48,239 --> 00:02:53,549
they vary a lot and the work load varies

00:02:50,400 --> 00:02:55,950
a lot and we've been using bakula for a

00:02:53,549 --> 00:02:57,329
long time like five or six years on this

00:02:55,950 --> 00:03:01,019
setup and we've been using back there

00:02:57,329 --> 00:03:03,000
before and we always used like right six

00:03:01,019 --> 00:03:06,569
array we never really use tapes there

00:03:03,000 --> 00:03:08,939
this is going to be a recurring theme we

00:03:06,569 --> 00:03:10,620
use SEF as our primary storage for the

00:03:08,939 --> 00:03:13,590
virtual machine disks we used to use I

00:03:10,620 --> 00:03:15,389
skazhi and when staff became stable

00:03:13,590 --> 00:03:18,629
enough moved over there and we've been

00:03:15,389 --> 00:03:20,430
pretty happy and up until now we've been

00:03:18,629 --> 00:03:23,790
taking backups directly from the safe

00:03:20,430 --> 00:03:27,150
storage servers and the file demands

00:03:23,790 --> 00:03:29,760
don't run inside the the vm they run on

00:03:27,150 --> 00:03:32,430
the on the backup server actually that

00:03:29,760 --> 00:03:35,759
accesses the safe rbd volumes from a

00:03:32,430 --> 00:03:37,709
snapshot and not in the inside vm we we

00:03:35,759 --> 00:03:41,340
run the file descriptor in the VMS at

00:03:37,709 --> 00:03:42,840
the moment to restore into the vm but

00:03:41,340 --> 00:03:45,959
that is actually one of the complexities

00:03:42,840 --> 00:03:47,639
i'm going to ramble about and we also

00:03:45,959 --> 00:03:50,370
have some pre post scripting for

00:03:47,639 --> 00:03:51,930
triggering snapshots and setting

00:03:50,370 --> 00:03:56,250
databases to backup mode and stuff like

00:03:51,930 --> 00:03:59,189
that this talk is mostly going to be an

00:03:56,250 --> 00:04:01,290
excursion into ok so why the hell did

00:03:59,189 --> 00:04:05,489
you abandon bakula something we big and

00:04:01,290 --> 00:04:07,079
proven and build your own thing and all

00:04:05,489 --> 00:04:08,879
of that all the things that I'm going to

00:04:07,079 --> 00:04:11,579
say our perpetual work it's like

00:04:08,879 --> 00:04:13,739
everything's in progress but at the

00:04:11,579 --> 00:04:16,289
moment we feel that build your own for

00:04:13,739 --> 00:04:18,000
our case ends up with higher quality and

00:04:16,289 --> 00:04:19,759
less maintenance than we had with bakula

00:04:18,000 --> 00:04:21,930
whether that's true in the long run

00:04:19,759 --> 00:04:24,360
we'll see i don't know i mean

00:04:21,930 --> 00:04:25,740
everything's changing all the time maybe

00:04:24,360 --> 00:04:28,199
in five years we go back to something

00:04:25,740 --> 00:04:31,080
bill pre-build but at the moment we we

00:04:28,199 --> 00:04:34,919
didn't find anything so let's start with

00:04:31,080 --> 00:04:36,449
the question of how did we white white

00:04:34,919 --> 00:04:40,840
why did we get to the point where we

00:04:36,449 --> 00:04:45,160
asked how can we get away from bakula

00:04:40,840 --> 00:04:47,290
part one the pain all the tools always

00:04:45,160 --> 00:04:48,850
have nice things bad things that's you

00:04:47,290 --> 00:04:50,650
have a rough time you're in love with

00:04:48,850 --> 00:04:53,710
the tool and then you get a new big

00:04:50,650 --> 00:04:55,510
fight and the issue is bakula has been

00:04:53,710 --> 00:04:58,690
on our naughty list for quite a while

00:04:55,510 --> 00:05:01,360
and I'm going to go to that one incident

00:04:58,690 --> 00:05:05,260
that spilled over the bucket and that

00:05:01,360 --> 00:05:08,080
caused us to take action so we had a

00:05:05,260 --> 00:05:11,680
relatively slow day and this is in April

00:05:08,080 --> 00:05:13,900
in March last year it was a pretty slow

00:05:11,680 --> 00:05:15,910
day everybody was just working on their

00:05:13,900 --> 00:05:18,010
things and suddenly naggers would start

00:05:15,910 --> 00:05:20,979
giving us alerts about file system

00:05:18,010 --> 00:05:25,419
errors in the virtual machines first one

00:05:20,979 --> 00:05:29,200
second one 3 5 10 50 100 and you're like

00:05:25,419 --> 00:05:30,729
okay something's wrong so it's not

00:05:29,200 --> 00:05:32,410
such a slow day anymore and this is

00:05:30,729 --> 00:05:35,919
about like ten minutes to three in the

00:05:32,410 --> 00:05:39,130
afternoon we pretty quickly found a

00:05:35,919 --> 00:05:41,949
quite complex back that caused a rogue's

00:05:39,130 --> 00:05:43,870
f server that was not supposed to be

00:05:41,949 --> 00:05:46,479
part of our storage cluster anymore that

00:05:43,870 --> 00:05:49,510
we tear down and moved over to a

00:05:46,479 --> 00:05:53,620
customer's installation it reconnected

00:05:49,510 --> 00:05:56,050
to our main cluster and for a very

00:05:53,620 --> 00:05:57,430
complicated reason both the cluster and

00:05:56,050 --> 00:05:59,169
the server still had the credentials

00:05:57,430 --> 00:06:02,410
there that shouldn't have happened but

00:05:59,169 --> 00:06:04,660
accidents happen and it triggered

00:06:02,410 --> 00:06:06,220
lesions for all the pools and I think we

00:06:04,660 --> 00:06:07,389
lost about fifty percent of all the

00:06:06,220 --> 00:06:09,340
virtual machines that we were running in

00:06:07,389 --> 00:06:12,460
production at that point and it was only

00:06:09,340 --> 00:06:14,380
fifty percent because the deletion

00:06:12,460 --> 00:06:16,240
commands came in so fast to set that

00:06:14,380 --> 00:06:20,800
Seth was kind of overloaded an image to

00:06:16,240 --> 00:06:22,479
actually delete things like okay these

00:06:20,800 --> 00:06:25,710
things happen that's what we have backup

00:06:22,479 --> 00:06:29,410
for so we go ahead and we restore right

00:06:25,710 --> 00:06:31,539
about one and a half hours later we

00:06:29,410 --> 00:06:33,789
fixed the back and we decide with all

00:06:31,539 --> 00:06:36,490
the code in our instrumentation that

00:06:33,789 --> 00:06:40,690
actually starts deleting things and we

00:06:36,490 --> 00:06:42,700
started restore because this is very big

00:06:40,690 --> 00:06:43,990
thing like 200 300 machines you've got

00:06:42,700 --> 00:06:45,460
to decide where you're going to start

00:06:43,990 --> 00:06:47,680
you have a couple of customers with an

00:06:45,460 --> 00:06:49,719
SLA and they need to pray I need to be

00:06:47,680 --> 00:06:51,490
prioritized you have a couple of central

00:06:49,719 --> 00:06:52,930
services like monitoring all mail server

00:06:51,490 --> 00:06:54,449
stuff like that but you also want to get

00:06:52,930 --> 00:06:56,490
going initially

00:06:54,449 --> 00:06:59,219
so that you can communicate with the

00:06:56,490 --> 00:07:03,809
customers etc and we started that and

00:06:59,219 --> 00:07:05,819
things were felt quite smooth however if

00:07:03,809 --> 00:07:10,860
anybody if you can read like the great

00:07:05,819 --> 00:07:13,349
things they're 11 hours later um we were

00:07:10,860 --> 00:07:15,059
pretty much done from the number of

00:07:13,349 --> 00:07:16,949
machines that we had to restore but we

00:07:15,059 --> 00:07:20,150
were already also quite exhausted like

00:07:16,949 --> 00:07:22,860
it's taking 11 hours to restore that and

00:07:20,150 --> 00:07:25,669
the one big thing that was missing was

00:07:22,860 --> 00:07:28,740
our most valuable customers database vm

00:07:25,669 --> 00:07:31,409
it just didn't want to restore um we

00:07:28,740 --> 00:07:33,240
were already on a multi shift cycle

00:07:31,409 --> 00:07:37,009
three people that were overlapping

00:07:33,240 --> 00:07:40,680
taking passes going to sleep coming back

00:07:37,009 --> 00:07:42,930
but bakula was hitting a limit where

00:07:40,680 --> 00:07:45,899
either we could continue restoring a

00:07:42,930 --> 00:07:48,449
restoring smaller VMs or try to figure

00:07:45,899 --> 00:07:52,289
out why this one big vm was inconsistent

00:07:48,449 --> 00:07:54,240
and it always ended up failing around

00:07:52,289 --> 00:07:56,069
the 70 gigabyte mark it's like okay I

00:07:54,240 --> 00:07:58,259
can't do this and stops and when we try

00:07:56,069 --> 00:07:59,969
to fill around and change director

00:07:58,259 --> 00:08:01,409
settings we had to restart to drop from

00:07:59,969 --> 00:08:03,330
the beginning it would run another hour

00:08:01,409 --> 00:08:04,589
or enough to tell me yeah i can't

00:08:03,330 --> 00:08:07,560
restore that it's inconsistent i like

00:08:04,589 --> 00:08:09,389
goddamn inconsistency just keep running

00:08:07,560 --> 00:08:11,069
and whenever we had to fiddle with that

00:08:09,389 --> 00:08:13,979
we also had to stop the jobs that were

00:08:11,069 --> 00:08:19,259
restoring in parallel that so that was

00:08:13,979 --> 00:08:22,349
getting on our nerves and overall about

00:08:19,259 --> 00:08:24,509
20 hours later we had all the customer

00:08:22,349 --> 00:08:27,419
services back online there was almost a

00:08:24,509 --> 00:08:29,669
day our most valuable caster at the most

00:08:27,419 --> 00:08:32,699
downtime even though we spent a lot of

00:08:29,669 --> 00:08:35,069
manpower on it and it was just like okay

00:08:32,699 --> 00:08:36,300
this is this is crude this this does not

00:08:35,069 --> 00:08:40,319
work we can't we can't live with that

00:08:36,300 --> 00:08:42,029
any longer and we sit down and we try to

00:08:40,319 --> 00:08:45,300
figure out what's the root of all evil

00:08:42,029 --> 00:08:47,040
and it's not a single thing it's

00:08:45,300 --> 00:08:48,899
actually pretty long list of small

00:08:47,040 --> 00:08:51,449
things medium sized things maybe a

00:08:48,899 --> 00:08:54,540
couple of big ones and if you want to

00:08:51,449 --> 00:08:56,160
get all the details you're going to find

00:08:54,540 --> 00:08:58,860
the slides online and there's this link

00:08:56,160 --> 00:09:01,290
and this is the PDF of our eight-page

00:08:58,860 --> 00:09:03,029
document that says in detail what

00:09:01,290 --> 00:09:04,769
happened when did we do what and what

00:09:03,029 --> 00:09:06,149
are the findings that stopped us doing

00:09:04,769 --> 00:09:07,630
things how did we fail in the first

00:09:06,149 --> 00:09:10,600
place and

00:09:07,630 --> 00:09:14,230
what is in our way and vacuole is a big

00:09:10,600 --> 00:09:18,360
thing there the first thing that failed

00:09:14,230 --> 00:09:21,010
us was our restore script arm turns out

00:09:18,360 --> 00:09:23,170
this script has evolved over time where

00:09:21,010 --> 00:09:25,240
we can say okay here's the script you go

00:09:23,170 --> 00:09:26,980
to the backup server give the name of

00:09:25,240 --> 00:09:28,900
the virtual machine and it's going to do

00:09:26,980 --> 00:09:31,240
a full restore it recreates the image

00:09:28,900 --> 00:09:33,490
and SEF it figures out what was the last

00:09:31,240 --> 00:09:36,550
successful job instructs the director to

00:09:33,490 --> 00:09:38,950
restore etc etc the problem was we

00:09:36,550 --> 00:09:40,840
figured we noticed after it evolved we

00:09:38,950 --> 00:09:44,680
had a global lock where this script

00:09:40,840 --> 00:09:45,820
could only run once at a time so we had

00:09:44,680 --> 00:09:48,880
to sit down and look through this

00:09:45,820 --> 00:09:51,100
through the script and a big part was

00:09:48,880 --> 00:09:53,890
that we had to instruct the director in

00:09:51,100 --> 00:09:56,080
a way that was kind of hard and it took

00:09:53,890 --> 00:09:57,880
us about three hours to get this lock go

00:09:56,080 --> 00:10:02,680
away so we could then start ramping up

00:09:57,880 --> 00:10:04,990
parallel restores this undetected

00:10:02,680 --> 00:10:09,390
inconsistency that stopped to restore

00:10:04,990 --> 00:10:11,950
the biggest vm there was just insane um

00:10:09,390 --> 00:10:13,720
having to sit down and see okay yes

00:10:11,950 --> 00:10:15,220
there's like one bite and consistent in

00:10:13,720 --> 00:10:17,350
the middle and then trying to figure out

00:10:15,220 --> 00:10:19,750
and the manual wasn't wasn't helpful and

00:10:17,350 --> 00:10:21,820
internet wasn't helpful stackoverflow so

00:10:19,750 --> 00:10:24,430
fall wasn't helpful to get ages until we

00:10:21,820 --> 00:10:26,650
get like for this special case just

00:10:24,430 --> 00:10:28,750
right knobs turn for the director to

00:10:26,650 --> 00:10:31,180
actually ignore this inconsistency and

00:10:28,750 --> 00:10:33,430
consent continued and there was actually

00:10:31,180 --> 00:10:35,760
around the clock one one person of our

00:10:33,430 --> 00:10:38,290
team just looking into this one issue

00:10:35,760 --> 00:10:39,820
and also every now and then we had to

00:10:38,290 --> 00:10:43,240
stop all the other backups to try out

00:10:39,820 --> 00:10:45,370
whether we actually fix the issue one

00:10:43,240 --> 00:10:47,410
thing in the aftermath when we restored

00:10:45,370 --> 00:10:50,680
when we got to run this global lock

00:10:47,410 --> 00:10:52,320
thing we noticed that instrumentation

00:10:50,680 --> 00:10:56,050
around bakula is also kind of

00:10:52,320 --> 00:10:58,120
complicated because of this of the

00:10:56,050 --> 00:11:01,060
virtual tape library the virtual tape

00:10:58,120 --> 00:11:02,920
library concept is from the time when we

00:11:01,060 --> 00:11:05,170
used to do tape backups which we don't

00:11:02,920 --> 00:11:08,230
do so we're getting additional

00:11:05,170 --> 00:11:10,480
complexity where does the actual data

00:11:08,230 --> 00:11:12,670
end up and it's like we've got all these

00:11:10,480 --> 00:11:14,470
virtual machine images and they end up

00:11:12,670 --> 00:11:18,760
in actual files that emulate to be

00:11:14,470 --> 00:11:21,520
virtual tape drives that behave like

00:11:18,760 --> 00:11:24,730
okay I'm going to intermingle differ

00:11:21,520 --> 00:11:26,290
and data from different customers every

00:11:24,730 --> 00:11:31,000
2 megabytes stuff like that it's like

00:11:26,290 --> 00:11:32,980
what why I don't think that we are ever

00:11:31,000 --> 00:11:34,630
going to get to the point where scripts

00:11:32,980 --> 00:11:36,550
that you write are going to be perfect

00:11:34,630 --> 00:11:39,070
for all the situations to run into is

00:11:36,550 --> 00:11:41,280
always going to have like this one thing

00:11:39,070 --> 00:11:43,540
that's going to break your neck and any

00:11:41,280 --> 00:11:45,910
complexity that you don't actually need

00:11:43,540 --> 00:11:47,080
is going to increase the chance you're

00:11:45,910 --> 00:11:50,890
going to hit something that you can't

00:11:47,080 --> 00:11:52,330
remedy at that point it's really am in

00:11:50,890 --> 00:11:53,980
the morning you already blind drunk

00:11:52,330 --> 00:11:58,120
you're on duty and you have to fix

00:11:53,980 --> 00:11:59,410
something so I really I really wish the

00:11:58,120 --> 00:12:03,330
scripting stuff and all these small

00:11:59,410 --> 00:12:06,970
moving parts would be much much simpler

00:12:03,330 --> 00:12:09,820
at some point we decided that we don't

00:12:06,970 --> 00:12:11,980
have to back up everything because most

00:12:09,820 --> 00:12:15,430
of our customers have like the same

00:12:11,980 --> 00:12:16,450
virtual machine 10 20 times because

00:12:15,430 --> 00:12:18,130
they're just application server

00:12:16,450 --> 00:12:19,750
instances that don't have any local data

00:12:18,130 --> 00:12:21,850
so we just back up like two or three of

00:12:19,750 --> 00:12:23,380
them and for the others we say hey we've

00:12:21,850 --> 00:12:25,630
got automatic deployments we just

00:12:23,380 --> 00:12:28,210
rebuilt the VMS when we need them the

00:12:25,630 --> 00:12:30,220
problem was obviously that kind of

00:12:28,210 --> 00:12:32,890
rebuilding also didn't work quite that

00:12:30,220 --> 00:12:35,380
way under disaster recovery conditions

00:12:32,890 --> 00:12:38,350
as you imagined when you're in normal

00:12:35,380 --> 00:12:41,980
operations so we were already loaded

00:12:38,350 --> 00:12:44,110
with actually fixing our our restore

00:12:41,980 --> 00:12:45,870
where we also had to fix automatic

00:12:44,110 --> 00:12:51,130
deployment stuff that wasn't quite as

00:12:45,870 --> 00:12:52,810
usual and why did we not backup

00:12:51,130 --> 00:12:55,330
everything obviously we thought we could

00:12:52,810 --> 00:12:57,250
get away with are getting some load of

00:12:55,330 --> 00:13:01,320
the backcolor server and and save disk

00:12:57,250 --> 00:13:03,970
space I mean who doesn't want that

00:13:01,320 --> 00:13:07,680
another thing we noticed was 24 hour

00:13:03,970 --> 00:13:10,840
backup cycle is not a sufficient RPO a

00:13:07,680 --> 00:13:12,520
recovery point objective like how far do

00:13:10,840 --> 00:13:15,700
you have to travel in time back to to

00:13:12,520 --> 00:13:17,800
get a consistent data set back most

00:13:15,700 --> 00:13:19,960
cases daily backups are okay but in

00:13:17,800 --> 00:13:24,730
quite a few others are not for example

00:13:19,960 --> 00:13:26,170
mail servers honestly your customers

00:13:24,730 --> 00:13:28,330
care about all the data within the last

00:13:26,170 --> 00:13:29,920
24 hours and not before so you're

00:13:28,330 --> 00:13:31,300
actually if you differ on a daily cycle

00:13:29,920 --> 00:13:33,480
you're actually backing up all the stuff

00:13:31,300 --> 00:13:35,000
your customers don't actually very about

00:13:33,480 --> 00:13:36,620
and

00:13:35,000 --> 00:13:38,930
we'd actually like to give customers the

00:13:36,620 --> 00:13:42,530
option for hourly backups or maybe every

00:13:38,930 --> 00:13:44,810
minute or something like that with

00:13:42,530 --> 00:13:47,030
bakula we didn't see any feasible way to

00:13:44,810 --> 00:13:48,800
do that because the whole scheduling the

00:13:47,030 --> 00:13:51,200
amount of jobs we were running and stuff

00:13:48,800 --> 00:13:54,680
like that it just didn't fit any longer

00:13:51,200 --> 00:13:58,490
also um we have a couple of pathological

00:13:54,680 --> 00:14:01,550
cases where the applications have append

00:13:58,490 --> 00:14:04,210
only files that grow very large like 100

00:14:01,550 --> 00:14:06,320
gigabytes for and gigabytes and if

00:14:04,210 --> 00:14:08,590
nothing has happened in the universe in

00:14:06,320 --> 00:14:11,180
the last 12 months and please if anybody

00:14:08,590 --> 00:14:12,500
figures figures that back leg changed in

00:14:11,180 --> 00:14:14,720
between in a way that I'm completely

00:14:12,500 --> 00:14:19,010
stupid and just using it wrong tell me

00:14:14,720 --> 00:14:21,920
later publicly but append only databases

00:14:19,010 --> 00:14:24,080
you always get a fresh copy every time

00:14:21,920 --> 00:14:26,630
I've got a differential or incremental

00:14:24,080 --> 00:14:29,300
and every time you've get you change two

00:14:26,630 --> 00:14:32,090
bites and you get 100 gigabyte copy

00:14:29,300 --> 00:14:35,870
again great and this is just insane

00:14:32,090 --> 00:14:38,720
right amplification and then there's

00:14:35,870 --> 00:14:40,310
this list of paper cuts um yes we're

00:14:38,720 --> 00:14:41,690
still running Cyrus because we didn't

00:14:40,310 --> 00:14:45,589
get around to replace it with something

00:14:41,690 --> 00:14:47,330
better but still we've always had

00:14:45,589 --> 00:14:49,130
whenever we had to restore this virtual

00:14:47,330 --> 00:14:52,220
machine running Cyrus who ran into some

00:14:49,130 --> 00:14:54,770
bugs where you had to restore hard link

00:14:52,220 --> 00:14:57,980
farms we're back to that just missed a

00:14:54,770 --> 00:15:00,050
couple of them and your Cyrus is just

00:14:57,980 --> 00:15:03,050
not even noticing and just doing random

00:15:00,050 --> 00:15:06,710
things I hate that and that actually

00:15:03,050 --> 00:15:09,560
made us thing is okay so bakula is

00:15:06,710 --> 00:15:11,570
rebuilding and building a new format an

00:15:09,560 --> 00:15:13,910
archive format that has to replicate all

00:15:11,570 --> 00:15:15,830
the logic that file systems with acls

00:15:13,910 --> 00:15:19,040
extended attributes and everything else

00:15:15,830 --> 00:15:22,040
it has to get right under the semantics

00:15:19,040 --> 00:15:26,150
of differentials and all kinds of other

00:15:22,040 --> 00:15:29,690
abstractions that are in there too

00:15:26,150 --> 00:15:32,120
complicated um we're missing boot

00:15:29,690 --> 00:15:35,330
loaders because with backe from the

00:15:32,120 --> 00:15:37,670
images we were taking file level backups

00:15:35,330 --> 00:15:39,820
right that's what bakula is for but that

00:15:37,670 --> 00:15:42,620
means that when we reboot strap a

00:15:39,820 --> 00:15:46,400
virtual machine we have to first create

00:15:42,620 --> 00:15:48,380
an empty machine with a file system that

00:15:46,400 --> 00:15:51,320
has the boot loaders in there

00:15:48,380 --> 00:15:54,080
or the data back in and then run group

00:15:51,320 --> 00:15:56,090
or something something similar and

00:15:54,080 --> 00:15:57,380
something we notice is that you can get

00:15:56,090 --> 00:15:59,270
to the point where your automation

00:15:57,380 --> 00:16:01,760
changes how the bootloader works in your

00:15:59,270 --> 00:16:03,860
environment and you restore an older

00:16:01,760 --> 00:16:05,810
version into the new version because a

00:16:03,860 --> 00:16:07,250
few days earlier we actually had a

00:16:05,810 --> 00:16:09,290
change in how our bootloader is

00:16:07,250 --> 00:16:10,850
configured so a couple of the VMS would

00:16:09,290 --> 00:16:12,740
actually not start correctly with the

00:16:10,850 --> 00:16:14,030
restore vm script because the way it was

00:16:12,740 --> 00:16:16,130
setting up the bootloader wasn't

00:16:14,030 --> 00:16:21,230
compatible with what's in the back up

00:16:16,130 --> 00:16:23,900
great and overall the director is a

00:16:21,230 --> 00:16:26,180
single process for hundreds of jobs and

00:16:23,900 --> 00:16:27,500
you can't reload it on the fly you have

00:16:26,180 --> 00:16:31,010
to stop and start it if you make a

00:16:27,500 --> 00:16:34,340
change to the to the configuration which

00:16:31,010 --> 00:16:35,960
in our case the text files of the

00:16:34,340 --> 00:16:39,290
configuration and we are making use of

00:16:35,960 --> 00:16:41,510
all the templating stuff and not like

00:16:39,290 --> 00:16:44,510
generating things too much it's still

00:16:41,510 --> 00:16:48,140
two megabytes of txt files for popular

00:16:44,510 --> 00:16:51,080
configuration honestly and I can never

00:16:48,140 --> 00:16:53,540
predict how schedules will work out I

00:16:51,080 --> 00:16:55,460
have no idea like you make rules and at

00:16:53,540 --> 00:16:58,310
some point customer asks you like oh

00:16:55,460 --> 00:17:04,579
yeah that oh yeah that that didn't quite

00:16:58,310 --> 00:17:07,280
work that way okay so we had a fiddly

00:17:04,579 --> 00:17:09,920
script we had an inconsistency that we

00:17:07,280 --> 00:17:11,569
did it took us 20 hours to get right we

00:17:09,920 --> 00:17:13,760
had blind spots that we didn't back up

00:17:11,569 --> 00:17:15,380
correctly like the bootloader the daily

00:17:13,760 --> 00:17:16,730
inter wall was killing us and the

00:17:15,380 --> 00:17:17,900
overall complexity and whenever we

00:17:16,730 --> 00:17:19,490
changed something predicting how it's

00:17:17,900 --> 00:17:21,560
going to work out on all these paper

00:17:19,490 --> 00:17:22,760
cuts when it's three or four a.m. in the

00:17:21,560 --> 00:17:24,380
morning and you already had a regular

00:17:22,760 --> 00:17:27,589
shift you're on your second night shift

00:17:24,380 --> 00:17:31,820
and so it's like I want to make a wish

00:17:27,589 --> 00:17:34,300
poor to okay I want everything to be

00:17:31,820 --> 00:17:37,790
much more simpler for our case um

00:17:34,300 --> 00:17:40,820
restore if I can make a wish works

00:17:37,790 --> 00:17:44,960
without anything that has anything to do

00:17:40,820 --> 00:17:49,940
with the backup tool restore should work

00:17:44,960 --> 00:17:54,350
from a mostly no config needed life

00:17:49,940 --> 00:17:55,880
budet linux distribution like DD DD the

00:17:54,350 --> 00:17:58,460
disk image from here to there and then

00:17:55,880 --> 00:18:00,380
start it something like that I don't

00:17:58,460 --> 00:18:01,610
want complexity like the virtual tape

00:18:00,380 --> 00:18:06,620
library

00:18:01,610 --> 00:18:08,630
we have we I don't want to even I think

00:18:06,620 --> 00:18:11,000
I forgot to write this down here I don't

00:18:08,630 --> 00:18:14,390
even want to deal with files I just want

00:18:11,000 --> 00:18:16,429
to deal with this big huge image it's an

00:18:14,390 --> 00:18:19,730
image this something in there I don't I

00:18:16,429 --> 00:18:21,260
don't care and I don't want to mix data

00:18:19,730 --> 00:18:23,500
of different VMs I don't want to have a

00:18:21,260 --> 00:18:26,420
file on the file system where there's

00:18:23,500 --> 00:18:29,559
data of multiple VMs in there I just

00:18:26,420 --> 00:18:32,780
don't want that any longer our

00:18:29,559 --> 00:18:35,360
reliability wise I want something with

00:18:32,780 --> 00:18:37,669
better verification scrubbing repair

00:18:35,360 --> 00:18:40,429
maybe I wouldn't we have laughed if

00:18:37,669 --> 00:18:43,460
bakula could have given us a heads up of

00:18:40,429 --> 00:18:46,370
hey you've got bit rot and you won't be

00:18:43,460 --> 00:18:47,690
able to restore what you had today the

00:18:46,370 --> 00:18:49,910
problem there is I think there is an

00:18:47,690 --> 00:18:53,390
option around that but band width wise

00:18:49,910 --> 00:18:55,040
and storage I oys that's just not

00:18:53,390 --> 00:18:57,710
possible to run for us for all the time

00:18:55,040 --> 00:18:59,840
because doubles the amount of work we

00:18:57,710 --> 00:19:02,900
have to do to take the backups I want

00:18:59,840 --> 00:19:04,640
much higher frequency arm I want a more

00:19:02,900 --> 00:19:07,429
direct integration with how do you

00:19:04,640 --> 00:19:11,150
create snapshots with with the back end

00:19:07,429 --> 00:19:13,790
the way to do pre post trip shirts at

00:19:11,150 --> 00:19:15,770
the moment is like ah you can't really

00:19:13,790 --> 00:19:17,120
signal many many special situations of

00:19:15,770 --> 00:19:18,710
okay should you retry this or should you

00:19:17,120 --> 00:19:21,140
do this or should you do that and we've

00:19:18,710 --> 00:19:22,520
got this huge chain off we have one job

00:19:21,140 --> 00:19:24,169
that is the precondition of another one

00:19:22,520 --> 00:19:26,270
a precondition another 10 per usual now

00:19:24,169 --> 00:19:27,890
one poster up and post ship so so

00:19:26,270 --> 00:19:29,960
actually if you look at our list of jobs

00:19:27,890 --> 00:19:31,580
that director runs all these pre post

00:19:29,960 --> 00:19:35,210
jobs for a single drop you have you have

00:19:31,580 --> 00:19:36,950
like six entries and it just explodes I

00:19:35,210 --> 00:19:39,169
don't want to invent new formats

00:19:36,950 --> 00:19:41,780
everything everything I have to invent

00:19:39,169 --> 00:19:44,630
new is going to break so let's not

00:19:41,780 --> 00:19:46,760
invent new things as good as we can I

00:19:44,630 --> 00:19:48,410
want to avoid bottlenecks I want to get

00:19:46,760 --> 00:19:50,630
a head of line blocking I don't wanna

00:19:48,410 --> 00:19:52,970
like when when you have a big job

00:19:50,630 --> 00:19:54,530
restoring at the moment or backing up at

00:19:52,970 --> 00:19:56,390
the moment and you want to restore and

00:19:54,530 --> 00:19:57,950
you're at your limit of how many drops

00:19:56,390 --> 00:19:59,210
drops did you configure to run in

00:19:57,950 --> 00:20:02,120
parallel you have to wait for that to

00:19:59,210 --> 00:20:03,830
end it's like okay I can either stop the

00:20:02,120 --> 00:20:05,990
backup for this customer to restore that

00:20:03,830 --> 00:20:10,280
customer right now or reconfigure which

00:20:05,990 --> 00:20:12,230
also means to it um I want to be able to

00:20:10,280 --> 00:20:14,790
paralyze it's much easier to rub just

00:20:12,230 --> 00:20:16,200
have like two or three machines

00:20:14,790 --> 00:20:17,460
they don't know anything of each other

00:20:16,200 --> 00:20:19,530
that back up different parts of our

00:20:17,460 --> 00:20:20,910
infrastructure scripting should be much

00:20:19,530 --> 00:20:22,710
simpler environment specific

00:20:20,910 --> 00:20:24,720
configuration integrate integration

00:20:22,710 --> 00:20:26,760
should be much simpler and this whole

00:20:24,720 --> 00:20:29,340
coordination thing like okay you're

00:20:26,760 --> 00:20:31,140
taking a backup of this disk image and

00:20:29,340 --> 00:20:32,970
you have to talk to the storage layer

00:20:31,140 --> 00:20:34,860
and the hypervisor and the vm in there

00:20:32,970 --> 00:20:39,150
it's like coordinating stuff like that

00:20:34,860 --> 00:20:41,040
should be much much less fiddly wish

00:20:39,150 --> 00:20:43,200
list the last last last thing a wish

00:20:41,040 --> 00:20:45,780
list is getting pretty long I want a

00:20:43,200 --> 00:20:48,630
much more straightforward integration

00:20:45,780 --> 00:20:51,660
with nag years to ensure that when we

00:20:48,630 --> 00:20:55,040
are able to hit our recovery point

00:20:51,660 --> 00:20:57,540
objective like is everything newness and

00:20:55,040 --> 00:21:00,810
are we going to kill any SLA said we

00:20:57,540 --> 00:21:03,810
have our customer and also annemasse

00:21:00,810 --> 00:21:05,490
restore I want to be movie I want to be

00:21:03,810 --> 00:21:08,460
able to figure out whether I'm complying

00:21:05,490 --> 00:21:11,520
towards the top the time I target to be

00:21:08,460 --> 00:21:13,530
done with the restore and maybe even

00:21:11,520 --> 00:21:18,270
save service for customers we have a

00:21:13,530 --> 00:21:21,690
shared environment okay let's do this

00:21:18,270 --> 00:21:26,190
how would this look like the first thing

00:21:21,690 --> 00:21:29,430
um that I'd like to talk about this size

00:21:26,190 --> 00:21:33,930
and I think somebody probably said one

00:21:29,430 --> 00:21:36,600
size fits all not bakula in piraeus our

00:21:33,930 --> 00:21:39,170
general solutions to a really big

00:21:36,600 --> 00:21:40,770
problem of backing up and restoring data

00:21:39,170 --> 00:21:42,600
they've got advanced capabilities

00:21:40,770 --> 00:21:44,340
they've got a large installed base

00:21:42,600 --> 00:21:49,580
they've got the support many features

00:21:44,340 --> 00:21:52,950
contributions look very stable awesome

00:21:49,580 --> 00:21:55,140
but again the complexity is what gives

00:21:52,950 --> 00:21:56,670
us the pain and I want to drive down

00:21:55,140 --> 00:21:59,130
complexity as far as I can I want to

00:21:56,670 --> 00:22:03,060
build on existing tools and then maybe

00:21:59,130 --> 00:22:05,640
add a little bit of our own so what I'm

00:22:03,060 --> 00:22:08,010
going to present is not back up for each

00:22:05,640 --> 00:22:09,960
and every one it's back up for us and

00:22:08,010 --> 00:22:12,900
how we figured I'd like where should we

00:22:09,960 --> 00:22:18,950
spend our time to end up with something

00:22:12,900 --> 00:22:22,740
that's reliable and operate able right

00:22:18,950 --> 00:22:24,240
talking about sighs um backe that's the

00:22:22,740 --> 00:22:27,420
name of the source project we started

00:22:24,240 --> 00:22:28,610
and that we're using is this is slack

00:22:27,420 --> 00:22:30,230
count like

00:22:28,610 --> 00:22:33,049
one of the worst ways to measure a

00:22:30,230 --> 00:22:35,600
complexity or size but still Bucky at

00:22:33,049 --> 00:22:36,830
the moment as we are moving into what's

00:22:35,600 --> 00:22:38,360
production and we've been running it

00:22:36,830 --> 00:22:40,370
partially in production for couple

00:22:38,360 --> 00:22:43,130
months is about three thousand lines of

00:22:40,370 --> 00:22:46,790
code in Python and about fifty percent

00:22:43,130 --> 00:22:50,210
of loose of this coat about 1500 lines I

00:22:46,790 --> 00:22:52,760
think maybe even 60 there's a couple of

00:22:50,210 --> 00:22:57,520
files in there that current

00:22:52,760 --> 00:22:59,780
miscounted our tests so it's only about

00:22:57,520 --> 00:23:02,900
1500 lines of code that actually do

00:22:59,780 --> 00:23:04,220
backup and the coverage analyzes tells

00:23:02,900 --> 00:23:05,990
me that we have about ninety four

00:23:04,220 --> 00:23:08,090
percent of branch coverage in the code

00:23:05,990 --> 00:23:10,549
like almost every part of the code is

00:23:08,090 --> 00:23:12,919
actually executed in tests that run in

00:23:10,549 --> 00:23:14,540
like I think the overall times two

00:23:12,919 --> 00:23:15,890
minutes I can run the whole test suite

00:23:14,540 --> 00:23:19,299
for everything in two minutes I make a

00:23:15,890 --> 00:23:21,980
change and run at we've got a server

00:23:19,299 --> 00:23:24,350
running online that does that all the

00:23:21,980 --> 00:23:26,150
time so you don't have so we see whether

00:23:24,350 --> 00:23:30,250
runs not only on the developers machine

00:23:26,150 --> 00:23:33,290
if i compare that to bakula or Boreas

00:23:30,250 --> 00:23:36,679
bakula has about 150 thousand lines of

00:23:33,290 --> 00:23:39,679
code in c that's about 50 times the size

00:23:36,679 --> 00:23:41,419
and if i consider intellectual

00:23:39,679 --> 00:23:44,299
complexity I think that raises

00:23:41,419 --> 00:23:47,750
geometrically this isn't n this is n

00:23:44,299 --> 00:23:49,760
square so that means it would be about

00:23:47,750 --> 00:23:52,280
to nine thousand times more complicated

00:23:49,760 --> 00:23:57,559
um obviously I'm making that number up

00:23:52,280 --> 00:24:00,500
but still I need I need I all ready to

00:23:57,559 --> 00:24:02,870
deal with all that it is a lot of code

00:24:00,500 --> 00:24:04,910
and I try to figure out whether this any

00:24:02,870 --> 00:24:06,919
automated test is there anybody in here

00:24:04,910 --> 00:24:08,240
who can tell me that there are automated

00:24:06,919 --> 00:24:10,850
tests like unit tests of functional

00:24:08,240 --> 00:24:16,580
tests integration test run for bakula or

00:24:10,850 --> 00:24:24,200
barriers awesome why didn't I why didn't

00:24:16,580 --> 00:24:26,210
I find that ok I need your glasses um ok

00:24:24,200 --> 00:24:28,010
so what I what I found I just crept

00:24:26,210 --> 00:24:29,270
around through the code base so it

00:24:28,010 --> 00:24:36,049
doesn't it's not part of the main

00:24:29,270 --> 00:24:38,570
repository right ok ok i grabbed i grep

00:24:36,049 --> 00:24:40,650
through both of them using a simple find

00:24:38,570 --> 00:24:42,090
grep test

00:24:40,650 --> 00:24:45,210
and then whether that's a directory or

00:24:42,090 --> 00:24:48,060
file past it to count for bakula I

00:24:45,210 --> 00:24:55,940
found 1500 lines of code that maybe our

00:24:48,060 --> 00:24:59,490
tests it's about 2% arm Barrios

00:24:55,940 --> 00:25:02,130
apparently is better there they look

00:24:59,490 --> 00:25:04,620
real good from a project perspective

00:25:02,130 --> 00:25:06,120
they grew the code base by a hundred

00:25:04,620 --> 00:25:07,650
thousand more lines of code so you've

00:25:06,120 --> 00:25:09,780
got active contribution that's awesome

00:25:07,650 --> 00:25:12,690
this weather when there is an active

00:25:09,780 --> 00:25:16,590
open source project thumbs up it's all

00:25:12,690 --> 00:25:18,480
good and my insanely damn test script to

00:25:16,590 --> 00:25:20,100
figure out how many tests are there show

00:25:18,480 --> 00:25:22,770
me there's five point five thousand

00:25:20,100 --> 00:25:27,120
lines of test code could that be right

00:25:22,770 --> 00:25:29,940
would there be wrong see you don't know

00:25:27,120 --> 00:25:31,800
okay the good news is you've got from my

00:25:29,940 --> 00:25:35,520
numbers you've got Oh point two percent

00:25:31,800 --> 00:25:37,350
more coverage ok so I would love to see

00:25:35,520 --> 00:25:39,420
if you can afterwards point me out or

00:25:37,350 --> 00:25:44,220
Twitter where those tests are I would

00:25:39,420 --> 00:25:47,850
love to see them okay so sighs

00:25:44,220 --> 00:25:50,640
everything is much smaller but it's more

00:25:47,850 --> 00:25:52,680
because we chose to use specific tools

00:25:50,640 --> 00:25:57,180
that we built under do specific parts

00:25:52,680 --> 00:25:59,700
that we don't have to do first we're

00:25:57,180 --> 00:26:01,080
reducing the problem space right the

00:25:59,700 --> 00:26:04,860
only thing I'm going to back up our

00:26:01,080 --> 00:26:06,420
queue emu virtual machine images so part

00:26:04,860 --> 00:26:08,910
of the job that I'm going that we're

00:26:06,420 --> 00:26:11,310
doing is already done by Q EMU because

00:26:08,910 --> 00:26:13,110
they have a couple of API is like f is

00:26:11,310 --> 00:26:14,940
freeze to talk to the Linux kernel to

00:26:13,110 --> 00:26:17,880
make things consistent on amount of

00:26:14,940 --> 00:26:21,090
filesystem stuff like that all our disk

00:26:17,880 --> 00:26:25,800
images are stolen SEF and SEF has cheap

00:26:21,090 --> 00:26:29,220
snapshots even the ability to give us

00:26:25,800 --> 00:26:31,020
cheap Delta so i can i can make two

00:26:29,220 --> 00:26:32,460
snapshots and SEF of a disk imaging i

00:26:31,020 --> 00:26:35,310
can ask if please give me a

00:26:32,460 --> 00:26:38,040
space-efficient delta of what has

00:26:35,310 --> 00:26:40,320
changed between a and B and we're also

00:26:38,040 --> 00:26:42,980
using butter of s as the target system

00:26:40,320 --> 00:26:46,320
to store these images as plain files

00:26:42,980 --> 00:26:48,870
where we use copy and riot from the last

00:26:46,320 --> 00:26:51,120
snapshot to the new snapshot then we get

00:26:48,870 --> 00:26:53,130
the Delta from Seth and we just

00:26:51,120 --> 00:26:54,480
integrate that Delta into the files are

00:26:53,130 --> 00:26:56,490
basically we've got

00:26:54,480 --> 00:26:59,580
image file sitting there that are quite

00:26:56,490 --> 00:27:01,980
exact copies of the disk image in SEF so

00:26:59,580 --> 00:27:04,290
we just have to DD this thing I can run

00:27:01,980 --> 00:27:05,669
stuff like k port or loop loop back

00:27:04,290 --> 00:27:08,280
mounts on these things if I really want

00:27:05,669 --> 00:27:10,830
to touch them but I don't need my backup

00:27:08,280 --> 00:27:14,640
utility to access the back up data and

00:27:10,830 --> 00:27:17,220
that was one of the big things limits um

00:27:14,640 --> 00:27:19,440
I can only drive down complexity by

00:27:17,220 --> 00:27:21,600
limiting what I want to do it's not a

00:27:19,440 --> 00:27:24,150
general backup purposes general purpose

00:27:21,600 --> 00:27:27,660
backup system we don't do weird hardware

00:27:24,150 --> 00:27:31,049
we don't do tapes we explicitly said we

00:27:27,660 --> 00:27:32,700
want to restore without tools and also

00:27:31,049 --> 00:27:35,010
we wanted to have the configuration much

00:27:32,700 --> 00:27:37,830
more simple so our current target is

00:27:35,010 --> 00:27:40,830
that we have in our shared environment a

00:27:37,830 --> 00:27:43,470
single server with 50 terabyte of space

00:27:40,830 --> 00:27:46,200
and write six with hot spare and stuff

00:27:43,470 --> 00:27:48,600
and the only thing I want to do is get

00:27:46,200 --> 00:27:54,809
data out of SEF and get data back into

00:27:48,600 --> 00:27:58,470
SF all right let's take a tour there's

00:27:54,809 --> 00:28:01,020
four things involved at the moment and

00:27:58,470 --> 00:28:02,730
the only thing that's Bucky are these

00:28:01,020 --> 00:28:05,790
two things these are processes we've got

00:28:02,730 --> 00:28:08,309
a server called the Bucky demon and what

00:28:05,790 --> 00:28:11,910
it does is it regularly starts other

00:28:08,309 --> 00:28:13,590
processes like small jobs that make the

00:28:11,910 --> 00:28:17,400
back at one specific backup for one

00:28:13,590 --> 00:28:20,160
virtual machine and the point is loose

00:28:17,400 --> 00:28:22,350
or separate in a way that the only thing

00:28:20,160 --> 00:28:25,290
the damage does is start them regularly

00:28:22,350 --> 00:28:27,210
I can always go ahead and just call this

00:28:25,290 --> 00:28:29,370
command directly there's no under the

00:28:27,210 --> 00:28:31,790
hood things going on there and the

00:28:29,370 --> 00:28:35,309
backup consists of the following

00:28:31,790 --> 00:28:38,760
workflow the job itself requests

00:28:35,309 --> 00:28:43,410
snapshot by writing a specific key into

00:28:38,760 --> 00:28:46,980
console which we use for disputed events

00:28:43,410 --> 00:28:50,910
and inventory management and console in

00:28:46,980 --> 00:28:53,190
forms an agent running on a QE MOOC a vm

00:28:50,910 --> 00:28:56,070
server that we want to have a snapshot

00:28:53,190 --> 00:28:57,840
of a specific virtual machine that agent

00:28:56,070 --> 00:28:59,880
talks to the kemah process the kemah

00:28:57,840 --> 00:29:02,370
process triggers f is freeze in the

00:28:59,880 --> 00:29:05,190
linux kernel inside then it takes a

00:29:02,370 --> 00:29:07,510
snapshot does the unfreeze the snapshot

00:29:05,190 --> 00:29:10,150
then is stored in Seth

00:29:07,510 --> 00:29:13,330
and the bucket job notices when the

00:29:10,150 --> 00:29:16,560
snapshot comes into life called rbd diff

00:29:13,330 --> 00:29:21,700
and stores that into a batter 4s file

00:29:16,560 --> 00:29:25,720
that's it arm still you might argue

00:29:21,700 --> 00:29:28,150
there's lots of moving parts there yes

00:29:25,720 --> 00:29:32,440
it is and it's still quite complicated

00:29:28,150 --> 00:29:36,190
it's the quite involved but the point

00:29:32,440 --> 00:29:40,570
here is all of the tools like SEF and

00:29:36,190 --> 00:29:43,630
Huey mu and console they exist not just

00:29:40,570 --> 00:29:47,470
for backup we manage them and use them

00:29:43,630 --> 00:29:49,690
anyway for multi-purpose stuff this is

00:29:47,470 --> 00:29:52,120
they all these parts they just

00:29:49,690 --> 00:29:55,660
contribute to us being able to do smooth

00:29:52,120 --> 00:29:58,120
backups we use came in anyway we use

00:29:55,660 --> 00:30:02,110
this agent the FCA agent anyway we use F

00:29:58,120 --> 00:30:04,510
anyway in that sense the environment is

00:30:02,110 --> 00:30:06,520
very unix oriented we're trying to use

00:30:04,510 --> 00:30:08,860
composable tools that have very specific

00:30:06,520 --> 00:30:11,590
jobs that can be used for multiple

00:30:08,860 --> 00:30:13,840
different tasks so we invest in running

00:30:11,590 --> 00:30:16,210
a nice console cluster a nice F cluster

00:30:13,840 --> 00:30:18,100
and into running q mu right and then we

00:30:16,210 --> 00:30:22,560
just want to go ahead and say and this

00:30:18,100 --> 00:30:22,560
is what we spend to do backup for that

00:30:22,650 --> 00:30:28,120
overall I found that plugging these

00:30:25,390 --> 00:30:30,100
things together and testing them with a

00:30:28,120 --> 00:30:33,400
little bit of Python code like one half

00:30:30,100 --> 00:30:35,590
thousand lines and treating that not as

00:30:33,400 --> 00:30:38,470
this is an admin who runs a shell script

00:30:35,590 --> 00:30:41,080
but this is software development of

00:30:38,470 --> 00:30:44,700
course and we've got to run tests on it

00:30:41,080 --> 00:30:47,170
and we've got to do quality assurance

00:30:44,700 --> 00:30:48,640
tying that together feels much more

00:30:47,170 --> 00:30:50,020
straightforward and intellectually less

00:30:48,640 --> 00:30:52,270
challenging than trying to figure out

00:30:50,020 --> 00:30:58,510
the right backlog configuration for us

00:30:52,270 --> 00:31:01,840
arm and we realized that we have stopped

00:30:58,510 --> 00:31:04,690
shopping for one stop solution tools

00:31:01,840 --> 00:31:08,560
that do like everything we don't want a

00:31:04,690 --> 00:31:10,390
cooking oven microwave TV lon Moore we

00:31:08,560 --> 00:31:12,700
want sent paper and hammer and nails

00:31:10,390 --> 00:31:14,230
electricity and then we want to build

00:31:12,700 --> 00:31:16,030
something that we know how it works

00:31:14,230 --> 00:31:19,710
because we have to give back and take it

00:31:16,030 --> 00:31:19,710
apart in the middle of night

00:31:20,269 --> 00:31:27,320
so here's how it looks like um sushma

00:31:23,959 --> 00:31:29,539
it's a small unix relativity is what

00:31:27,320 --> 00:31:31,219
that should help looks like it uses the

00:31:29,539 --> 00:31:34,299
typical subcommand style you know might

00:31:31,219 --> 00:31:36,889
know that from puppet or other tools and

00:31:34,299 --> 00:31:39,950
intentionally on a daily basis you will

00:31:36,889 --> 00:31:42,080
never have to touch that calling that

00:31:39,950 --> 00:31:46,940
it's basically optional in the times of

00:31:42,080 --> 00:31:49,159
need one thing I'm going to show you

00:31:46,940 --> 00:31:52,070
first is the thing that you're never

00:31:49,159 --> 00:31:59,079
going to use usually is how to do a

00:31:52,070 --> 00:31:59,079
backup so this is how you do backup um

00:31:59,889 --> 00:32:04,700
there's a directory lid prods ero 0 is a

00:32:03,019 --> 00:32:07,429
directory that's a working directory

00:32:04,700 --> 00:32:09,469
right now lid prodigy row 0 is the name

00:32:07,429 --> 00:32:13,009
of a virtual machine or environment and

00:32:09,469 --> 00:32:15,709
I run Bucky minus V for actually having

00:32:13,009 --> 00:32:18,320
you to something that something appears

00:32:15,709 --> 00:32:21,519
that I can show it to you and I tell it

00:32:18,320 --> 00:32:24,769
make a backup and give it the tag test

00:32:21,519 --> 00:32:26,089
it goes ahead and it says ok I'm going

00:32:24,769 --> 00:32:27,649
to make a new revision and we're going

00:32:26,089 --> 00:32:30,379
to requesting a snapshot and I'm gonna

00:32:27,649 --> 00:32:32,149
make differential backup partial

00:32:30,379 --> 00:32:35,419
verification and says everything's ok

00:32:32,149 --> 00:32:39,049
and it took about eight seconds to back

00:32:35,419 --> 00:32:42,409
up a 10 gigabyte volume and there's two

00:32:39,049 --> 00:32:44,599
pieces in there that are slow one is 7

00:32:42,409 --> 00:32:47,719
sep takes a little bit of time to

00:32:44,599 --> 00:32:49,809
compute the Delta and we take extra time

00:32:47,719 --> 00:32:52,940
to make a partial verification of

00:32:49,809 --> 00:32:55,459
verifying that the Delta was integrated

00:32:52,940 --> 00:32:57,469
in a way that it reflects the original

00:32:55,459 --> 00:32:59,989
source so we just take like three or

00:32:57,469 --> 00:33:03,409
four percent of the source images and

00:32:59,989 --> 00:33:08,419
the anti backup file and just take

00:33:03,409 --> 00:33:10,669
random blocks and compare them there's

00:33:08,419 --> 00:33:15,139
utility you can use for looking at the

00:33:10,669 --> 00:33:17,359
status so each backup we call that a

00:33:15,139 --> 00:33:19,940
revision and you can see that it has

00:33:17,359 --> 00:33:25,759
tags and texts are things like daily

00:33:19,940 --> 00:33:28,879
weekly monthly or test it's got a uuid

00:33:25,759 --> 00:33:32,239
short uuid so that can be put into your

00:33:28,879 --> 00:33:33,799
else if needed and we store a little bit

00:33:32,239 --> 00:33:37,629
of statistics like nothing nothing

00:33:33,799 --> 00:33:37,629
important they're not nothing exciting

00:33:40,389 --> 00:33:47,679
but you can also inspect the back up by

00:33:44,960 --> 00:33:50,480
just going to that directory and run LS

00:33:47,679 --> 00:33:53,090
so as we decided we didn't want to

00:33:50,480 --> 00:33:56,269
mingle data of different VMs we came up

00:33:53,090 --> 00:33:58,970
with okay let's have a master directory

00:33:56,269 --> 00:34:00,739
where the batter of s volume starts but

00:33:58,970 --> 00:34:03,379
this is not even tied into Bucky it's

00:34:00,739 --> 00:34:06,739
just like how we use it and the demen

00:34:03,379 --> 00:34:08,510
can then create one directory per vm

00:34:06,739 --> 00:34:11,329
that we back up and within that

00:34:08,510 --> 00:34:13,099
directory all the data of that related

00:34:11,329 --> 00:34:16,220
to that virtual machine will show up so

00:34:13,099 --> 00:34:17,809
the logging output of Bucky related to

00:34:16,220 --> 00:34:20,869
that virtual machine sits in a large

00:34:17,809 --> 00:34:23,629
file in that directory every reversion

00:34:20,869 --> 00:34:27,020
has like one big file arm where is it

00:34:23,629 --> 00:34:30,589
like 10 gigabyte that is the actual data

00:34:27,020 --> 00:34:32,569
and shortly ml 5 with some metadata and

00:34:30,589 --> 00:34:34,190
if you're looking for the last backup of

00:34:32,569 --> 00:34:35,899
this thing there's assuming that is

00:34:34,190 --> 00:34:38,149
automatically maintained so in the

00:34:35,899 --> 00:34:39,710
middle of the night I can go there I can

00:34:38,149 --> 00:34:44,359
take that file it can DD it somewhere

00:34:39,710 --> 00:34:46,819
else and I'll be happy and the log

00:34:44,359 --> 00:34:48,770
actually contains all the output of all

00:34:46,819 --> 00:34:50,869
Becky lucuma a Becky commands that you

00:34:48,770 --> 00:34:53,720
run for that vm even if I run Becky

00:34:50,869 --> 00:34:56,359
status or something else is around the

00:34:53,720 --> 00:34:58,069
demon it will always write stuff into

00:34:56,359 --> 00:35:01,089
that file so you can see that an admin

00:34:58,069 --> 00:35:04,089
was there and actually did manual things

00:35:01,089 --> 00:35:06,049
we have demen very simple thing

00:35:04,089 --> 00:35:09,140
originally I didn't even want to have a

00:35:06,049 --> 00:35:11,210
demon but figuring out how to do load

00:35:09,140 --> 00:35:13,640
management to make sure that not all all

00:35:11,210 --> 00:35:18,530
400 virtual machines try to back up

00:35:13,640 --> 00:35:21,109
their volume at the same time we decided

00:35:18,530 --> 00:35:23,690
to not just create a cron job for all of

00:35:21,109 --> 00:35:26,869
them so it's a small dam and it has a

00:35:23,690 --> 00:35:30,980
couple of small clever tricks to keep

00:35:26,869 --> 00:35:32,599
config simple but also smart arm and I'm

00:35:30,980 --> 00:35:34,010
actually pretty happy just if anybody

00:35:32,599 --> 00:35:37,130
you should be programmed this kind of

00:35:34,010 --> 00:35:38,920
stuff Python 3.4 and a sink io are

00:35:37,130 --> 00:35:41,480
really awesome for this kind of stuff

00:35:38,920 --> 00:35:44,359
because it has low overhead and we just

00:35:41,480 --> 00:35:46,400
start a CO routine which has very small

00:35:44,359 --> 00:35:47,780
memory over it that has an infinite loop

00:35:46,400 --> 00:35:50,090
that is easy to read

00:35:47,780 --> 00:35:51,530
that says figure out for this virtual

00:35:50,090 --> 00:35:53,720
machine so every virtual machine gets

00:35:51,530 --> 00:35:59,000
its own loop figure out the next time to

00:35:53,720 --> 00:36:01,760
do a backup wait for it do it figure out

00:35:59,000 --> 00:36:04,580
the next backup wait for it do it and

00:36:01,760 --> 00:36:05,960
this can the whole code is like maybe

00:36:04,580 --> 00:36:07,760
200 thread lines of code for the

00:36:05,960 --> 00:36:09,830
scheduling thing and it's really easy to

00:36:07,760 --> 00:36:15,830
test and you really easy to think about

00:36:09,830 --> 00:36:17,540
so yeah quite happy with that also this

00:36:15,830 --> 00:36:19,370
schedule is completely stateless there's

00:36:17,540 --> 00:36:22,160
no database nothing at any point in time

00:36:19,370 --> 00:36:24,800
you can kill it start it again and it's

00:36:22,160 --> 00:36:26,900
going to figure out the exact same times

00:36:24,800 --> 00:36:29,200
when the next back up with you it's

00:36:26,900 --> 00:36:32,710
going to catch up stuff that it missed

00:36:29,200 --> 00:36:36,380
there's no queue that you can lose ah

00:36:32,710 --> 00:36:39,230
nothing um also again the schedule is

00:36:36,380 --> 00:36:41,530
completely irrelevant is restoring while

00:36:39,230 --> 00:36:45,110
it's taking backups you can do resource

00:36:41,530 --> 00:36:46,490
doesn't care you can stop it if you want

00:36:45,110 --> 00:36:50,120
to like would use load or something like

00:36:46,490 --> 00:36:51,740
that but you don't need it this is what

00:36:50,120 --> 00:36:53,960
configuration looks like you've got

00:36:51,740 --> 00:36:55,340
three sections um there's a global

00:36:53,960 --> 00:36:57,140
option thing where you can say okay how

00:36:55,340 --> 00:37:00,080
many how many jobs should the scheduled

00:36:57,140 --> 00:37:02,450
start at the same time where does the

00:37:00,080 --> 00:37:04,160
base directory go it defines schedules

00:37:02,450 --> 00:37:08,210
I'm going to talk about your schedules

00:37:04,160 --> 00:37:10,220
in a second and it defines jobs and a

00:37:08,210 --> 00:37:11,990
job config is really just this is the

00:37:10,220 --> 00:37:13,640
name of job this is the type of the

00:37:11,990 --> 00:37:17,150
source and we've got three simple things

00:37:13,640 --> 00:37:20,570
as it's a general copy those files over

00:37:17,150 --> 00:37:23,000
then a generic takes take back up some

00:37:20,570 --> 00:37:26,510
staff and a plugin that we wrote on top

00:37:23,000 --> 00:37:28,250
of that for take a snapchat SEF snapshot

00:37:26,510 --> 00:37:29,570
in the way that this diagram was showing

00:37:28,250 --> 00:37:32,780
that is specific to the Flying Circus

00:37:29,570 --> 00:37:34,760
and then it gets a parameter the virtual

00:37:32,780 --> 00:37:36,860
machine name maybe if it's our

00:37:34,760 --> 00:37:39,620
environment and which schedule it should

00:37:36,860 --> 00:37:41,510
here two and one thing on the scheduling

00:37:39,620 --> 00:37:44,240
is it only references that schedules

00:37:41,510 --> 00:37:46,900
name and automatically based on the name

00:37:44,240 --> 00:37:51,740
of the of the of the job it does a an

00:37:46,900 --> 00:37:54,110
offset a modulo offset like if you know

00:37:51,740 --> 00:37:57,290
puppet fqdn rand like you do for

00:37:54,110 --> 00:38:00,320
distributing cron jobs that what means

00:37:57,290 --> 00:38:03,540
daily is different for each job

00:38:00,320 --> 00:38:05,550
so scheduling is a three level thing you

00:38:03,540 --> 00:38:09,300
have a schedule that gets a name a

00:38:05,550 --> 00:38:12,180
schedule has tags and each tag has an

00:38:09,300 --> 00:38:14,340
interval and to keep we never keep

00:38:12,180 --> 00:38:15,450
references to absolute times that they

00:38:14,340 --> 00:38:18,270
don't make sense on a broad platform

00:38:15,450 --> 00:38:20,220
like ours we have to adjust backups in a

00:38:18,270 --> 00:38:21,810
way we have to that doesn't make sense

00:38:20,220 --> 00:38:23,520
we've got customers in different time

00:38:21,810 --> 00:38:25,440
zones and they've got different load

00:38:23,520 --> 00:38:29,580
profiles and honestly I just want

00:38:25,440 --> 00:38:31,410
backups to be so so low impact I'll just

00:38:29,580 --> 00:38:35,100
keep running them and distribute them

00:38:31,410 --> 00:38:37,260
all over the day there's no logic for

00:38:35,100 --> 00:38:39,660
like referencing weekdays or holidays or

00:38:37,260 --> 00:38:42,210
whatever it's really this it's

00:38:39,660 --> 00:38:46,890
predictable pattern of every text says I

00:38:42,210 --> 00:38:49,200
want to run every 24 hours or every

00:38:46,890 --> 00:38:51,740
seven days or stuff like that and I want

00:38:49,200 --> 00:38:55,560
to keep it nine times or five times

00:38:51,740 --> 00:38:57,480
that's it and when buck you run the

00:38:55,560 --> 00:38:59,400
backup you saw that the command it

00:38:57,480 --> 00:39:03,990
simply says make it back up and put that

00:38:59,400 --> 00:39:05,460
tag on it that's it and this is what it

00:39:03,990 --> 00:39:06,960
looks like later on if you look at the

00:39:05,460 --> 00:39:10,440
status thing you see like there's our

00:39:06,960 --> 00:39:12,690
lease and dailies daily weeklies and it

00:39:10,440 --> 00:39:14,460
always gets exactly the same time it's

00:39:12,690 --> 00:39:16,290
like it catches up these seconds

00:39:14,460 --> 00:39:18,750
perfectly so you can see hey ever since

00:39:16,290 --> 00:39:21,680
beautiful as always the same time this

00:39:18,750 --> 00:39:26,190
is really important under stress but

00:39:21,680 --> 00:39:27,720
unregular during regular times it's

00:39:26,190 --> 00:39:35,100
quite nice to see that everything's on

00:39:27,720 --> 00:39:39,450
schedule arm we also don't differentiate

00:39:35,100 --> 00:39:42,570
full and differential or deltas if we

00:39:39,450 --> 00:39:44,850
don't have a set a base image or if the

00:39:42,570 --> 00:39:48,450
snapshot and stuff is missing we just

00:39:44,850 --> 00:39:50,730
make a full copy um if we have a

00:39:48,450 --> 00:39:52,260
snapshot we use our BD div and then we

00:39:50,730 --> 00:39:55,730
integrate it and we keep verifying it

00:39:52,260 --> 00:39:58,020
that's that's it nothing to configure

00:39:55,730 --> 00:40:00,840
purging how do we get rid of stuff um

00:39:58,020 --> 00:40:05,760
well as the slide says there's nothing

00:40:00,840 --> 00:40:08,670
to see there um almost so purging is the

00:40:05,760 --> 00:40:11,820
back side of the schedule it's the other

00:40:08,670 --> 00:40:13,660
end the key value and the key value

00:40:11,820 --> 00:40:15,609
means two things first don't

00:40:13,660 --> 00:40:18,819
move this tech from a revision as long

00:40:15,609 --> 00:40:20,230
as we have n revision less than any

00:40:18,819 --> 00:40:22,930
revisions with this tech if I want to

00:40:20,230 --> 00:40:25,690
keep seven dailies then it will never

00:40:22,930 --> 00:40:27,640
take away a daily tech from a vision if

00:40:25,690 --> 00:40:29,920
there's less than seven daily tags

00:40:27,640 --> 00:40:31,510
around and the second thing means is

00:40:29,920 --> 00:40:34,900
don't remove this tech from revisions as

00:40:31,510 --> 00:40:39,099
long as the last the oldest revision is

00:40:34,900 --> 00:40:41,589
still younger than interval x n so if I

00:40:39,099 --> 00:40:43,690
want to keep it daily seven times and

00:40:41,589 --> 00:40:45,880
daily means 24 hours it means first you

00:40:43,690 --> 00:40:49,510
have to have seven and the oldest one

00:40:45,880 --> 00:40:54,549
has to be older than seven times 24

00:40:49,510 --> 00:40:56,260
hours and then when it when I'm going to

00:40:54,549 --> 00:40:59,140
give them tag runs out of that it gets

00:40:56,260 --> 00:41:01,799
removed and when a revision doesn't have

00:40:59,140 --> 00:41:09,130
any tags any longer we just delete it

00:41:01,799 --> 00:41:11,140
which means RM scrubbing well three

00:41:09,130 --> 00:41:12,970
levels um during a backup we do a

00:41:11,140 --> 00:41:15,400
percentage-based like two three four

00:41:12,970 --> 00:41:18,430
five percent comparison between original

00:41:15,400 --> 00:41:21,069
and target randomly so over time like

00:41:18,430 --> 00:41:23,859
over 10 20 backups you get a full

00:41:21,069 --> 00:41:25,599
verification for free butter for s

00:41:23,859 --> 00:41:27,279
scrubbing obviously can tell us whether

00:41:25,599 --> 00:41:29,470
something's going wrong and we're

00:41:27,279 --> 00:41:32,250
running right right 6 under that um I

00:41:29,470 --> 00:41:33,910
feel pretty safe with that at the moment

00:41:32,250 --> 00:41:35,500
maybe we're going to have another

00:41:33,910 --> 00:41:40,089
disaster where I come back and say this

00:41:35,500 --> 00:41:42,160
is too um how do I get it how do i

00:41:40,089 --> 00:41:43,930
get rid of vm and the point here is that

00:41:42,160 --> 00:41:46,180
if customer says i don't want the vm

00:41:43,930 --> 00:41:48,250
anymore i also wanted to stick the

00:41:46,180 --> 00:41:50,349
backup data around for infinite time and

00:41:48,250 --> 00:41:53,349
I don't want to do complicated stuff so

00:41:50,349 --> 00:41:55,930
what do we do Automation rewrites the

00:41:53,349 --> 00:42:00,640
config reloads the master and then we do

00:41:55,930 --> 00:42:03,849
arm differ RF end of story how do we

00:42:00,640 --> 00:42:05,710
monitor this was also a big point I kind

00:42:03,849 --> 00:42:08,470
of proud here because we tried multiple

00:42:05,710 --> 00:42:10,210
things to back up to monitor bakula in

00:42:08,470 --> 00:42:12,069
the past and it always got a little bit

00:42:10,210 --> 00:42:13,990
complicated like make makes temp files

00:42:12,069 --> 00:42:15,819
of when was the last full and last this

00:42:13,990 --> 00:42:17,650
job and when did these things happen it

00:42:15,819 --> 00:42:19,690
was always brittle and didn't trigger at

00:42:17,650 --> 00:42:22,930
the right times or due to delays our our

00:42:19,690 --> 00:42:24,670
H computation was wrong and actually I

00:42:22,930 --> 00:42:26,850
want to have a single test that tells me

00:42:24,670 --> 00:42:28,320
in the morning your admin

00:42:26,850 --> 00:42:31,170
you have to do something or don't you

00:42:28,320 --> 00:42:34,170
have to do something and here's what I

00:42:31,170 --> 00:42:36,600
built that simple talent console you can

00:42:34,170 --> 00:42:37,770
you can turn it into Bucky and it gives

00:42:36,600 --> 00:42:40,110
you an overview of what's going on and

00:42:37,770 --> 00:42:43,470
the SLI column is what's interesting and

00:42:40,110 --> 00:42:44,910
SLA means the last backup is not older

00:42:43,470 --> 00:42:46,350
than one hundred and fifty percent of

00:42:44,910 --> 00:42:49,020
the interval time of the smallest

00:42:46,350 --> 00:42:50,990
interval so if you do an hourly then the

00:42:49,020 --> 00:42:53,850
oldest backup shouldn't be older than

00:42:50,990 --> 00:42:57,500
one and half hours and that's everything

00:42:53,850 --> 00:43:00,420
I check for Bucky has a small subcommand

00:42:57,500 --> 00:43:02,850
check that aggregates that for all bm's

00:43:00,420 --> 00:43:07,770
and it conforms to the nagas plugin api

00:43:02,850 --> 00:43:09,570
and the scheduler runs dumps its status

00:43:07,770 --> 00:43:11,580
every 30 seconds into a static files so

00:43:09,570 --> 00:43:13,770
the check can actually look at the file

00:43:11,580 --> 00:43:18,180
and not talk to the to the demon and

00:43:13,770 --> 00:43:19,620
that's it that's really simple um so the

00:43:18,180 --> 00:43:21,090
most important part here is I don't care

00:43:19,620 --> 00:43:23,670
about history I don't care about any old

00:43:21,090 --> 00:43:25,410
backups if I fail the backup last week I

00:43:23,670 --> 00:43:27,060
don't want to be I want to see that

00:43:25,410 --> 00:43:30,450
monitoring any longer because I can't

00:43:27,060 --> 00:43:33,270
change that last week's done I always

00:43:30,450 --> 00:43:36,060
want to see are we good at the moment ok

00:43:33,270 --> 00:43:38,700
so that was a fast tour um I hope you

00:43:36,060 --> 00:43:42,660
don't feel like that kid let's wrap it

00:43:38,700 --> 00:43:45,540
up um what did we leave out um physical

00:43:42,660 --> 00:43:47,190
host backup oh I don't really care about

00:43:45,540 --> 00:43:49,290
packing up physically host that much

00:43:47,190 --> 00:43:51,540
because they are automated and the

00:43:49,290 --> 00:43:52,890
installation anyway but important stuff

00:43:51,540 --> 00:43:55,050
because you do have one else here and

00:43:52,890 --> 00:43:58,170
there we are seeing them into a virtual

00:43:55,050 --> 00:44:01,470
machine and then we put that into backe

00:43:58,170 --> 00:44:03,120
that's it also I don't really care much

00:44:01,470 --> 00:44:05,610
about backup storage pressure at the

00:44:03,120 --> 00:44:07,320
moment obviously storing a hundred

00:44:05,610 --> 00:44:10,020
percent every day or every hour for

00:44:07,320 --> 00:44:11,790
three months is not feasible storing

00:44:10,020 --> 00:44:16,470
maybe two to four times original volume

00:44:11,790 --> 00:44:19,200
at fine probably even ten times space is

00:44:16,470 --> 00:44:23,190
cheap compared to that I'd rather have

00:44:19,200 --> 00:44:24,510
all the other parts done right for the

00:44:23,190 --> 00:44:27,270
future what we're currently working on

00:44:24,510 --> 00:44:29,880
trym ready so bakula is happy to do

00:44:27,270 --> 00:44:34,470
sparse file sparse images the whole

00:44:29,880 --> 00:44:36,690
stack of the vm in the vm side the guest

00:44:34,470 --> 00:44:38,640
Colonel and the guests file system and

00:44:36,690 --> 00:44:40,090
hypervisor and staff we still need to

00:44:38,640 --> 00:44:42,370
tune there to actually

00:44:40,090 --> 00:44:44,890
pass the trim through so that volumes

00:44:42,370 --> 00:44:47,620
will actually shrink if the customer

00:44:44,890 --> 00:44:49,240
deletes data we currently don't do hot

00:44:47,620 --> 00:44:51,490
reload which isn't that much that

00:44:49,240 --> 00:44:52,930
important to us because we can kill and

00:44:51,490 --> 00:44:55,390
restart the scheduler without any

00:44:52,930 --> 00:44:57,100
negative effects and something I would

00:44:55,390 --> 00:44:59,290
really love to see and have to play with

00:44:57,100 --> 00:45:01,180
better FS for that is whether we can

00:44:59,290 --> 00:45:03,550
export the whole copy and write data

00:45:01,180 --> 00:45:05,230
structures of one directory from a ho

00:45:03,550 --> 00:45:09,400
from a backup server to another backup

00:45:05,230 --> 00:45:12,430
server without too much hassle all right

00:45:09,400 --> 00:45:14,650
um so the biggest thing I wanted to get

00:45:12,430 --> 00:45:17,650
off my chest here is bakula has been

00:45:14,650 --> 00:45:19,300
good to us for a long time it's always

00:45:17,650 --> 00:45:22,720
been a little bit annoying when it came

00:45:19,300 --> 00:45:24,370
to restore and obviously we all know

00:45:22,720 --> 00:45:27,190
nobody wants back up everybody wants

00:45:24,370 --> 00:45:29,140
restore and but that is but we had the

00:45:27,190 --> 00:45:30,280
biggest pain and that's why we set out

00:45:29,140 --> 00:45:32,110
to figure out whether we can do

00:45:30,280 --> 00:45:37,450
something different and where would we

00:45:32,110 --> 00:45:39,820
end up and I think we have grown out of

00:45:37,450 --> 00:45:42,790
Bakula from two perspectives the amount

00:45:39,820 --> 00:45:46,120
of data at some point is just too too

00:45:42,790 --> 00:45:48,570
slow um frolf and and it feels like it's

00:45:46,120 --> 00:45:52,720
overhead like trying to select files

00:45:48,570 --> 00:45:54,720
from a large file system with 203 and

00:45:52,720 --> 00:45:57,210
gigabytes and lots of small files

00:45:54,720 --> 00:45:59,500
computing that over like four disks

00:45:57,210 --> 00:46:01,470
sometimes takes 10 minutes 15 minutes

00:45:59,500 --> 00:46:05,500
and you can see that postgres is running

00:46:01,470 --> 00:46:06,790
insanely on the cpu and a disk and we

00:46:05,500 --> 00:46:08,650
need to move faster we need to integrate

00:46:06,790 --> 00:46:11,440
more closely with our environment and we

00:46:08,650 --> 00:46:12,700
want to solve policy oriented stuff on a

00:46:11,440 --> 00:46:15,130
completely different level than trying

00:46:12,700 --> 00:46:18,850
to script a static API like we have here

00:46:15,130 --> 00:46:22,420
with bakula all of that is my personal

00:46:18,850 --> 00:46:24,880
experience um I love knowing how the

00:46:22,420 --> 00:46:26,590
individual pieces work and that also

00:46:24,880 --> 00:46:29,970
that is something that bakula doesn't do

00:46:26,590 --> 00:46:32,020
very well for me because the p so big

00:46:29,970 --> 00:46:33,580
and we're happy to contribute our

00:46:32,020 --> 00:46:35,860
experiments if you want to try it out

00:46:33,580 --> 00:46:38,890
and look at it and have some ideas I

00:46:35,860 --> 00:46:42,190
would love to see more experimentation I

00:46:38,890 --> 00:46:44,020
think small is beautiful I might be

00:46:42,190 --> 00:46:46,390
completely wrong I might say the

00:46:44,020 --> 00:46:49,990
opposite opposite thing tomorrow so

00:46:46,390 --> 00:46:51,859
customer be rare arm I'm admitted

00:46:49,990 --> 00:46:55,930
overdue so I'm not sure whether we have

00:46:51,859 --> 00:46:55,930
for questions but thanks for having me

00:46:59,380 --> 00:47:14,900
thank you are there any questions did

00:47:11,720 --> 00:47:16,999
you ensure in any way before that backup

00:47:14,900 --> 00:47:19,430
method with the VM snapshot that the

00:47:16,999 --> 00:47:21,559
virus is that the file system backup was

00:47:19,430 --> 00:47:24,369
consistent before so before you had to

00:47:21,559 --> 00:47:27,559
crash the file system backup yeah of

00:47:24,369 --> 00:47:29,900
example did you use backup agents for

00:47:27,559 --> 00:47:34,700
medical databases or something like that

00:47:29,900 --> 00:47:37,039
um we did run fsck on the read-only file

00:47:34,700 --> 00:47:38,390
system I think I think we ran a we

00:47:37,039 --> 00:47:41,630
didn't we weren't able to use F is

00:47:38,390 --> 00:47:46,579
freeze before so I think what we did was

00:47:41,630 --> 00:47:48,049
run a sink and then run an fsck to

00:47:46,579 --> 00:47:52,759
figure out whether it's completely

00:47:48,049 --> 00:47:55,430
broken or not so not not perfectly we

00:47:52,759 --> 00:47:58,430
had a couple of trip wires like we take

00:47:55,430 --> 00:48:00,529
the safe snapshot on the snapshot we run

00:47:58,430 --> 00:48:01,759
fsck and then we had a small script that

00:48:00,529 --> 00:48:06,890
goes through and says like okay this is

00:48:01,759 --> 00:48:08,749
okay or not okay thanks we are we doing

00:48:06,890 --> 00:48:10,670
that now right with the queuing

00:48:08,749 --> 00:48:12,230
integration f is freeze that gives you a

00:48:10,670 --> 00:48:14,299
guarantee that the file system is clean

00:48:12,230 --> 00:48:15,950
I think he even has a couple of bucks

00:48:14,299 --> 00:48:18,249
here and there i think the freeze

00:48:15,950 --> 00:48:22,130
doesn't flash all the buffers but

00:48:18,249 --> 00:48:24,259
overall i keep poking at it i see pretty

00:48:22,130 --> 00:48:27,920
clean file systems over time even with

00:48:24,259 --> 00:48:30,369
the diff integration that beckett is

00:48:27,920 --> 00:48:33,769
that open source obviously it is yes

00:48:30,369 --> 00:48:36,559
sorry for not being more explicit than

00:48:33,769 --> 00:48:39,380
that as i think it's bc license or maybe

00:48:36,559 --> 00:48:41,809
GPL I I inherited a little bit of code

00:48:39,380 --> 00:48:44,509
from a friend and ohm who was doing

00:48:41,809 --> 00:48:46,039
something similar but different and he

00:48:44,509 --> 00:48:47,989
gave it to me to open source that and

00:48:46,039 --> 00:48:51,999
then work in that MF it might be that he

00:48:47,989 --> 00:48:55,220
has required to be L on it ok nice

00:48:51,999 --> 00:48:57,739
really personally open source is the

00:48:55,220 --> 00:49:00,140
default I only closed source any of my

00:48:57,739 --> 00:49:02,829
code if somebody beats me and he's got

00:49:00,140 --> 00:49:02,829
to beat me with money

00:49:03,350 --> 00:49:09,080
any other questions um otherwise I'll be

00:49:06,600 --> 00:49:13,050
around for not that long anymore because

00:49:09,080 --> 00:49:18,680
not because of my child but more places

00:49:13,050 --> 00:49:18,680

YouTube URL: https://www.youtube.com/watch?v=PZXp9dxcLcU


