Title: OSBConf 2018 | Restore and Backup Elasticsearch Indices by Daniel Neuberger
Publication date: 2018-10-04
Playlist: OSBConf 2018 | Open Source Backup Conference 2018
Description: 
	Elasticsearch Indices are fast growing nosql structured databases, based on apache lucene. They are storing so called documents with their properties and make them search able. This fast growing databases are used in search technologies or in log-management environments. Mostly elasticsearch indices are big sized and they also needed to be online again in time. This talk will give you an idea about providing reliable backups which you can restore easily. You will see some examples to generate valid snapshot and restore scenarios with different types of storage formats and strategies. And of course you see a short example how to do this automated with bareos.
Captions: 
	00:00:00,090 --> 00:00:11,740
[Music]

00:00:14,080 --> 00:00:21,550
I will stop with the first talk so it's

00:00:19,240 --> 00:00:22,810
called restore and a backup of

00:00:21,550 --> 00:00:25,689
elasticsearch dater

00:00:22,810 --> 00:00:28,570
so why restore and backup a backup and

00:00:25,689 --> 00:00:30,369
restore so there's this joke about that

00:00:28,570 --> 00:00:32,710
and nobody wants to talk about the

00:00:30,369 --> 00:00:35,710
backup now everybody wants to talk about

00:00:32,710 --> 00:00:38,470
the restore so that's why I decided to

00:00:35,710 --> 00:00:41,739
name it like that and why we are

00:00:38,470 --> 00:00:45,460
creating the holy art you will hear it

00:00:41,739 --> 00:00:48,670
later there's a tool called corridor and

00:00:45,460 --> 00:00:51,489
maybe I tried to explain this whole

00:00:48,670 --> 00:00:53,949
elasticsearch stuff and restoring and

00:00:51,489 --> 00:00:57,129
packing up elasticsearch data or indices

00:00:53,949 --> 00:00:59,469
like something like walking through

00:00:57,129 --> 00:01:06,820
masoom I tried so we'll see if it works

00:00:59,469 --> 00:01:08,890
so so Who I am

00:01:06,820 --> 00:01:12,700
I'm see I'm senior open source

00:01:08,890 --> 00:01:15,459
consultant I'm working for net vice

00:01:12,700 --> 00:01:17,289
actually and I'm at a tuner why I'm at a

00:01:15,459 --> 00:01:20,500
to note so I've worked many many years

00:01:17,289 --> 00:01:23,080
also at the set aside and parasite as an

00:01:20,500 --> 00:01:25,959
observer cup consultant and today I'm

00:01:23,080 --> 00:01:28,780
primarily working in the sector of doing

00:01:25,959 --> 00:01:32,289
elastic stack consulting and crellick

00:01:28,780 --> 00:01:35,289
consulting so I cover most of the topics

00:01:32,289 --> 00:01:39,039
I cover are going about so collecting

00:01:35,289 --> 00:01:42,459
informations events in in the company so

00:01:39,039 --> 00:01:45,670
from every node from everywhere and to

00:01:42,459 --> 00:01:47,709
analyze them and to visualize them so

00:01:45,670 --> 00:01:50,310
that's actually my main field I'm

00:01:47,709 --> 00:01:53,140
working in and if I'm not doing my

00:01:50,310 --> 00:01:56,979
professional I'm doing some beekeeping

00:01:53,140 --> 00:02:00,239
stuff as well so it's also a bit related

00:01:56,979 --> 00:02:03,069
to the topic of analyzing or of

00:02:00,239 --> 00:02:05,530
distributed data so because in a high if

00:02:03,069 --> 00:02:07,239
you have a lot of piece and all the

00:02:05,530 --> 00:02:10,690
informations are going through the hive

00:02:07,239 --> 00:02:13,920
you know crossing the waves and yeah

00:02:10,690 --> 00:02:18,040
it's all a bit connected so in theory

00:02:13,920 --> 00:02:20,469
and elasticsearch first I'd like to

00:02:18,040 --> 00:02:22,719
explain elasticsearch so we do a little

00:02:20,469 --> 00:02:24,280
venice ash of a distributed information

00:02:22,719 --> 00:02:28,060
storage so

00:02:24,280 --> 00:02:30,990
elasticsearch is Apache an Apache Lucent

00:02:28,060 --> 00:02:34,600
based distributed storage engine so it's

00:02:30,990 --> 00:02:38,580
it's a no SQL based storage engine and

00:02:34,600 --> 00:02:41,860
it's designed to store informations you

00:02:38,580 --> 00:02:46,420
know as it as I already said in a

00:02:41,860 --> 00:02:48,850
distributed way and it's part of the

00:02:46,420 --> 00:02:51,670
elastic stack so first it was a single

00:02:48,850 --> 00:02:53,410
product so it was the first of elastic

00:02:51,670 --> 00:02:59,260
and then there comes the stack around it

00:02:53,410 --> 00:03:01,720
so with tools to catch and to analyze or

00:02:59,260 --> 00:03:05,290
filter information and then to store

00:03:01,720 --> 00:03:08,140
them in elastic search so you can also

00:03:05,290 --> 00:03:10,780
use elastic search without those tools

00:03:08,140 --> 00:03:13,510
you can use elastic search as a storage

00:03:10,780 --> 00:03:16,269
format for search engines as well you

00:03:13,510 --> 00:03:19,959
don't need to use them in this context

00:03:16,269 --> 00:03:24,670
of the elastic stack so that means you

00:03:19,959 --> 00:03:28,269
can use it also at an indexing engine or

00:03:24,670 --> 00:03:32,820
something else for applications who need

00:03:28,269 --> 00:03:36,820
a fast and reliable storage which is

00:03:32,820 --> 00:03:40,180
fully searchable like a website search

00:03:36,820 --> 00:03:45,040
engine like a web shop search engine and

00:03:40,180 --> 00:03:50,230
so on so how is it working in inside so

00:03:45,040 --> 00:03:53,920
there's this elastic search index and he

00:03:50,230 --> 00:03:56,019
household so-called documents so entity

00:03:53,920 --> 00:03:59,530
is a document so you have this document

00:03:56,019 --> 00:04:01,450
and this document consists of fields so

00:03:59,530 --> 00:04:04,299
that's the smallest unit of a document

00:04:01,450 --> 00:04:07,239
so this documents are stored in this

00:04:04,299 --> 00:04:13,000
indices and indices are divided into

00:04:07,239 --> 00:04:15,160
shards that means you have one in DC but

00:04:13,000 --> 00:04:17,320
you have several shots where the

00:04:15,160 --> 00:04:19,750
information is distributed stored in it

00:04:17,320 --> 00:04:24,580
so that brings you in the position that

00:04:19,750 --> 00:04:27,130
you can spread your data over more than

00:04:24,580 --> 00:04:30,700
one know it so keep that in mind more

00:04:27,130 --> 00:04:32,710
than one note yeah so and these shots

00:04:30,700 --> 00:04:35,260
are also divided and so called

00:04:32,710 --> 00:04:37,670
segments so you can have only one

00:04:35,260 --> 00:04:45,950
segment you have you can have more

00:04:37,670 --> 00:04:47,840
in one segment so it's all possible so

00:04:45,950 --> 00:04:53,990
and that means an indian sea will be

00:04:47,840 --> 00:04:56,780
created and it is divided in shards so i

00:04:53,990 --> 00:04:59,270
can say how many shots i want so i want

00:04:56,780 --> 00:05:01,700
for example three or five primary shots

00:04:59,270 --> 00:05:06,730
so that will mean the data is splitted

00:05:01,700 --> 00:05:10,090
over five charts for example so then i

00:05:06,730 --> 00:05:13,520
also want to say i need more performance

00:05:10,090 --> 00:05:17,270
then there came the thing like the

00:05:13,520 --> 00:05:19,870
ability to balance the charts over notes

00:05:17,270 --> 00:05:26,780
if i have more than one so that means

00:05:19,870 --> 00:05:30,200
every node receives a shard and actions

00:05:26,780 --> 00:05:32,270
like writing and reading so searches for

00:05:30,200 --> 00:05:35,780
example as spread out over the notes and

00:05:32,270 --> 00:05:38,870
the shots so then we have also the

00:05:35,780 --> 00:05:42,230
possibility to have replicas of this

00:05:38,870 --> 00:05:43,880
shot so that means the data has primary

00:05:42,230 --> 00:05:48,440
shots and replica shots so that means

00:05:43,880 --> 00:05:52,790
you already have your data not once you

00:05:48,440 --> 00:05:56,120
have it twice or third times so three

00:05:52,790 --> 00:05:59,440
times so you can have many replicas as

00:05:56,120 --> 00:06:05,120
you want or as your cluster can handle

00:05:59,440 --> 00:06:11,180
so that means of course they are already

00:06:05,120 --> 00:06:15,050
maybe save for and for using some state

00:06:11,180 --> 00:06:20,090
data because and primary shot can never

00:06:15,050 --> 00:06:23,120
be on the same note like his replica so

00:06:20,090 --> 00:06:25,130
that means in all effects your shots and

00:06:23,120 --> 00:06:27,350
your informations are everywhere in this

00:06:25,130 --> 00:06:30,880
cluster if you're running a multi node

00:06:27,350 --> 00:06:34,430
cluster so they are totally distributed

00:06:30,880 --> 00:06:39,440
so yeah then is the question where I

00:06:34,430 --> 00:06:41,480
should back up then because Tosh sorry

00:06:39,440 --> 00:06:44,900
for that you told me yesterday so you

00:06:41,480 --> 00:06:47,090
had a total loss in your data center you

00:06:44,900 --> 00:06:50,120
not can prevent a total loss in your

00:06:47,090 --> 00:06:51,440
data center so it doesn't matter over

00:06:50,120 --> 00:06:54,620
how many nodes

00:06:51,440 --> 00:06:57,110
your data is spread so if your data

00:06:54,620 --> 00:07:02,470
center is gone through tsunami for

00:06:57,110 --> 00:07:07,610
example its loss then on the other side

00:07:02,470 --> 00:07:11,240
historical archiving or outage or some

00:07:07,610 --> 00:07:14,450
ezel proposes you know and each index

00:07:11,240 --> 00:07:20,300
and shard you you are keeping in your

00:07:14,450 --> 00:07:22,670
cluster is using performance or he

00:07:20,300 --> 00:07:27,620
raises up the performance usage so that

00:07:22,670 --> 00:07:32,000
means you need resources to to help

00:07:27,620 --> 00:07:35,630
index open and readable so that means

00:07:32,000 --> 00:07:37,850
which every new shot this performance

00:07:35,630 --> 00:07:40,040
raise up and you need more performance

00:07:37,850 --> 00:07:44,180
more performance and you also need more

00:07:40,040 --> 00:07:49,060
storage so you should backup them also

00:07:44,180 --> 00:07:52,010
for building up an historical archive or

00:07:49,060 --> 00:07:54,560
not only historical archive proposes to

00:07:52,010 --> 00:07:58,730
violate them so there are also some

00:07:54,560 --> 00:08:01,310
audits and easels which are giving you

00:07:58,730 --> 00:08:04,430
the advice or which brings you in the

00:08:01,310 --> 00:08:08,330
position that you need to keep data on

00:08:04,430 --> 00:08:11,270
more than a year more than two years or

00:08:08,330 --> 00:08:15,200
maybe up to ten years for example and

00:08:11,270 --> 00:08:17,000
then then it comes in the hand that you

00:08:15,200 --> 00:08:19,850
also need to do some housekeeping

00:08:17,000 --> 00:08:22,790
cause after performance costs because of

00:08:19,850 --> 00:08:32,780
the resources maybe you have to handle

00:08:22,790 --> 00:08:36,800
in in an elastic search cluster so the

00:08:32,780 --> 00:08:40,789
backup method behind so so explain yard

00:08:36,800 --> 00:08:43,969
so what is the art behind so it works

00:08:40,789 --> 00:08:45,860
like a snapshot so it is a snapshot not

00:08:43,969 --> 00:08:49,030
not like its natural it is really a

00:08:45,860 --> 00:08:52,490
snapshot so you have self indices and

00:08:49,030 --> 00:08:56,240
you trigger a snapshot of them so that

00:08:52,490 --> 00:08:58,550
means during the production time so you

00:08:56,240 --> 00:09:00,260
don't have to stop you elasticsearch

00:08:58,550 --> 00:09:03,650
cluster during the production you can do

00:09:00,260 --> 00:09:05,870
a snapshot it will read out the files

00:09:03,650 --> 00:09:10,550
and it builds up

00:09:05,870 --> 00:09:13,220
in the repository of file tree where it

00:09:10,550 --> 00:09:16,070
orders the different segments and

00:09:13,220 --> 00:09:20,060
informations and so on so if you do it

00:09:16,070 --> 00:09:22,250
your next backup it is not a full backup

00:09:20,060 --> 00:09:26,149
again or incremental or something else

00:09:22,250 --> 00:09:29,240
it's also a snapshot and the first and

00:09:26,149 --> 00:09:31,130
the second snapshot will be merged so

00:09:29,240 --> 00:09:33,890
that happens every time if you do a

00:09:31,130 --> 00:09:36,440
snapshot it will be merged the

00:09:33,890 --> 00:09:41,950
informations will be merged and will be

00:09:36,440 --> 00:09:46,360
tied up together so for example if you

00:09:41,950 --> 00:09:49,519
keep an in depth in your cluster for

00:09:46,360 --> 00:09:54,950
four months and you do daily backup base

00:09:49,519 --> 00:09:58,370
yeah and after months you delete the

00:09:54,950 --> 00:10:01,790
oldest from the first so you have a 30

00:09:58,370 --> 00:10:04,610
day retention retention then it will be

00:10:01,790 --> 00:10:07,399
in your backup 90 days because the

00:10:04,610 --> 00:10:10,040
snapshot tool builds up a relation to

00:10:07,399 --> 00:10:14,089
the first snapshot so that means after

00:10:10,040 --> 00:10:18,110
90 days you first snapshot will be also

00:10:14,089 --> 00:10:21,970
deleted in your repository so in fact

00:10:18,110 --> 00:10:26,839
you increase with that technology the

00:10:21,970 --> 00:10:29,870
amount of retention time and besides to

00:10:26,839 --> 00:10:32,270
production so that is something also you

00:10:29,870 --> 00:10:34,579
have to keep in mind so it compares it

00:10:32,270 --> 00:10:37,100
both the informations from the in

00:10:34,579 --> 00:10:43,240
details which are opened live in the

00:10:37,100 --> 00:10:46,220
cluster then it's also repository based

00:10:43,240 --> 00:10:50,839
and it's distributed we need to tie this

00:10:46,220 --> 00:10:53,750
information together why we have most

00:10:50,839 --> 00:10:59,959
elasticsearch clusters and Multi multi

00:10:53,750 --> 00:11:03,880
node setups and the information is

00:10:59,959 --> 00:11:06,920
stored divided into shards on each node

00:11:03,880 --> 00:11:12,320
so that means you have a part of your

00:11:06,920 --> 00:11:16,820
information on each of them that means

00:11:12,320 --> 00:11:18,499
all nodes in the cluster have to reach a

00:11:16,820 --> 00:11:22,249
repository

00:11:18,499 --> 00:11:26,089
where they can ride in or work they can

00:11:22,249 --> 00:11:29,149
read from because all nodes in the

00:11:26,089 --> 00:11:34,909
cluster during a snapshot time have to

00:11:29,149 --> 00:11:38,239
do some work that means in otherwise one

00:11:34,909 --> 00:11:41,719
node the fighter gap of one node is not

00:11:38,239 --> 00:11:50,539
enough so because all the shots together

00:11:41,719 --> 00:11:53,509
our picture in the museum so what is the

00:11:50,539 --> 00:11:55,369
conclusion file backups from a single

00:11:53,509 --> 00:11:58,399
node are not valid because there are

00:11:55,369 --> 00:12:00,319
only a part of the data and you you

00:11:58,399 --> 00:12:03,109
don't can rely on them because they are

00:12:00,319 --> 00:12:05,689
not constant arnold's must be read a

00:12:03,109 --> 00:12:08,689
repository that means the repository

00:12:05,689 --> 00:12:12,259
must be online for each elasticsearch

00:12:08,689 --> 00:12:15,859
node in your cluster and you need a

00:12:12,259 --> 00:12:18,559
storage with a shared read and write

00:12:15,859 --> 00:12:30,220
access so that means for example a

00:12:18,559 --> 00:12:35,319
shared file system or an object store so

00:12:30,220 --> 00:12:35,319
the repository the first thing

00:12:37,320 --> 00:12:42,600
there are different representatives and

00:12:39,660 --> 00:12:46,230
as I started to take a deeper look into

00:12:42,600 --> 00:12:50,540
the back up stuff on elasticsearch

00:12:46,230 --> 00:12:54,450
entities I decided to try all of them I

00:12:50,540 --> 00:12:58,020
decided to try all of them because all

00:12:54,450 --> 00:13:00,540
the time I choose Davina

00:12:58,020 --> 00:13:04,590
wait for the winner so there are the

00:13:00,540 --> 00:13:08,460
possibilities to use I start first s3

00:13:04,590 --> 00:13:12,770
object stores but the conclusion is yeah

00:13:08,460 --> 00:13:20,220
it was possible to use s3 object stores

00:13:12,770 --> 00:13:22,860
other than hws as a Amazon Cloud it was

00:13:20,220 --> 00:13:25,830
possible until the mid of last year

00:13:22,860 --> 00:13:28,290
there was a single line option and one

00:13:25,830 --> 00:13:31,500
of the developers decide to remove this

00:13:28,290 --> 00:13:33,660
option because they never tested it and

00:13:31,500 --> 00:13:38,930
since then you are only in the position

00:13:33,660 --> 00:13:44,520
to ease to use real a vs s3 object store

00:13:38,930 --> 00:13:46,080
so in other words burning money I that

00:13:44,520 --> 00:13:50,760
was the preferred way I wanted to show

00:13:46,080 --> 00:13:52,590
you but I decided not to give obvious my

00:13:50,760 --> 00:13:55,050
credit card information and so on that's

00:13:52,590 --> 00:13:57,570
the reason why you will not see it today

00:13:55,050 --> 00:14:00,840
sorry for that then there is the other

00:13:57,570 --> 00:14:03,330
position you can use HDFS so the Hadoop

00:14:00,840 --> 00:14:08,210
file system which is of course a source

00:14:03,330 --> 00:14:11,430
but who has an Hadoop file system

00:14:08,210 --> 00:14:14,670
instead of someone in the room has

00:14:11,430 --> 00:14:17,790
someone ever worked with it so it's not

00:14:14,670 --> 00:14:21,930
common alright ok then you also can use

00:14:17,790 --> 00:14:26,040
the aysia object store so who has access

00:14:21,930 --> 00:14:29,190
to an era object store great you work a

00:14:26,040 --> 00:14:29,900
lot of that stuff you work a lot with

00:14:29,190 --> 00:14:34,500
Azure

00:14:29,900 --> 00:14:39,150
yeah me too and then there's the last

00:14:34,500 --> 00:14:42,570
thing I never saw it in real life the GS

00:14:39,150 --> 00:14:46,140
the Google Cloud Storage I never used it

00:14:42,570 --> 00:14:50,730
so the winner is the good old file

00:14:46,140 --> 00:14:54,870
shared system like NFS welcome it's

00:14:50,730 --> 00:14:59,160
proof everybody has it's cheap yeah it's

00:14:54,870 --> 00:15:07,290
really cheap and it comes with no costs

00:14:59,160 --> 00:15:09,060
so or other way who has an Amazon

00:15:07,290 --> 00:15:15,149
account obvious who's working with

00:15:09,060 --> 00:15:20,220
obvious okay then next year I will show

00:15:15,149 --> 00:15:22,560
the obvious stuff so okay so I choose

00:15:20,220 --> 00:15:24,300
because it's for me cheaper faster and

00:15:22,560 --> 00:15:26,970
it's easier to shout because I don't

00:15:24,300 --> 00:15:31,620
know how the connection is and to choose

00:15:26,970 --> 00:15:34,170
NFS and the important stuff is that this

00:15:31,620 --> 00:15:39,060
NFS file share needs to be mounted on

00:15:34,170 --> 00:15:44,070
each node so each node has this share

00:15:39,060 --> 00:15:46,230
mounted in his Miss filesystem so and it

00:15:44,070 --> 00:15:48,570
needs to be also configured on each note

00:15:46,230 --> 00:15:53,490
that that means that each elasticsearch

00:15:48,570 --> 00:15:57,420
node needs the exact path to this mound

00:15:53,490 --> 00:15:59,430
in the filesystem to use it so but

00:15:57,420 --> 00:16:01,680
that's only the half so but you have to

00:15:59,430 --> 00:16:06,000
configure it in the elasticsearch

00:16:01,680 --> 00:16:09,899
service so building the base so that's

00:16:06,000 --> 00:16:11,430
means you can configure it already in

00:16:09,899 --> 00:16:13,470
the elasticsearch channel that means you

00:16:11,430 --> 00:16:20,010
can start the service already with a

00:16:13,470 --> 00:16:23,010
configured repo path and if you

00:16:20,010 --> 00:16:25,410
configure multiple then you have also

00:16:23,010 --> 00:16:29,490
named it in your repository when you

00:16:25,410 --> 00:16:33,329
announce it to the cluster if not and

00:16:29,490 --> 00:16:36,449
you don't announce it with the full path

00:16:33,329 --> 00:16:40,410
to the classes and elasticsearch will be

00:16:36,449 --> 00:16:42,660
used every time the first hit for the

00:16:40,410 --> 00:16:49,769
pass repo configuration of your

00:16:42,660 --> 00:16:56,370
elasticsearch yema so then the second

00:16:49,769 --> 00:16:58,980
part is to to provide this repository

00:16:56,370 --> 00:17:03,240
and to the cluster so that means you

00:16:58,980 --> 00:17:05,299
need to you need to announce it you can

00:17:03,240 --> 00:17:07,770
do that with curve

00:17:05,299 --> 00:17:09,720
I'm normally I have some answerable

00:17:07,770 --> 00:17:11,669
roles for that so it's a one-time thing

00:17:09,720 --> 00:17:14,880
you know you have to initiate initialize

00:17:11,669 --> 00:17:17,339
the key repository so I see the content

00:17:14,880 --> 00:17:20,490
is cut off so you will see it in in a

00:17:17,339 --> 00:17:23,010
real life demo other way so it only

00:17:20,490 --> 00:17:25,799
describes the start of the chase and

00:17:23,010 --> 00:17:28,230
body so you need to define the type if

00:17:25,799 --> 00:17:31,380
you're an answer to the cluster then you

00:17:28,230 --> 00:17:33,840
need to do some settings so you see I

00:17:31,380 --> 00:17:37,650
put there in the location the exact

00:17:33,840 --> 00:17:42,179
string so that's what you have to do if

00:17:37,650 --> 00:17:45,030
you have no configuration in in your

00:17:42,179 --> 00:17:47,850
elasticsearch service or you have

00:17:45,030 --> 00:17:52,200
multiple ones then you have to need the

00:17:47,850 --> 00:17:54,540
exact string of the amount then I also

00:17:52,200 --> 00:17:59,730
activate already decompression for this

00:17:54,540 --> 00:18:03,600
repository so so far it's the only good

00:17:59,730 --> 00:18:07,710
way to influence the usage of a

00:18:03,600 --> 00:18:09,330
compression in elasticsearch at least so

00:18:07,710 --> 00:18:12,390
and then you can also use some other

00:18:09,330 --> 00:18:15,929
settings so you can you can swaddle the

00:18:12,390 --> 00:18:19,590
transfer size of for reading and writing

00:18:15,929 --> 00:18:24,000
so you can that's for example important

00:18:19,590 --> 00:18:25,980
so it depends on your proposals and the

00:18:24,000 --> 00:18:29,880
size of your elasticsearch glossary data

00:18:25,980 --> 00:18:31,620
stored and you have a lot of traffic and

00:18:29,880 --> 00:18:39,270
performance usage during your production

00:18:31,620 --> 00:18:43,350
hours so maybe you want not to lose much

00:18:39,270 --> 00:18:45,630
resources on on your backup so that

00:18:43,350 --> 00:18:49,530
means you can throttle your backup you

00:18:45,630 --> 00:18:52,350
can swaddle the in megabytes the per

00:18:49,530 --> 00:18:54,840
second the to read and to write usage of

00:18:52,350 --> 00:18:59,790
the repository for example and you can

00:18:54,840 --> 00:19:05,179
also split the tea transfer rates into

00:18:59,790 --> 00:19:07,770
different chunks before you store them

00:19:05,179 --> 00:19:13,860
so there are different set of proposals

00:19:07,770 --> 00:19:15,630
for repositories because there is also

00:19:13,860 --> 00:19:18,000
the fact that you can do with

00:19:15,630 --> 00:19:19,980
snapshotting or backing up elastic

00:19:18,000 --> 00:19:22,940
cluster also my creation stuff and

00:19:19,980 --> 00:19:27,540
things or you can transfer easily data

00:19:22,940 --> 00:19:31,350
into other clusters and that means you

00:19:27,540 --> 00:19:34,050
can you can use a repository for read

00:19:31,350 --> 00:19:37,590
and write so in your production cluster

00:19:34,050 --> 00:19:39,780
and for example you can announce such

00:19:37,590 --> 00:19:42,480
repository also as a read-only

00:19:39,780 --> 00:19:46,260
repository in another clusters at the

00:19:42,480 --> 00:19:49,770
same time or with an L so that means you

00:19:46,260 --> 00:19:54,120
can do for example if you switch major

00:19:49,770 --> 00:19:56,310
releases you can you can transfer your

00:19:54,120 --> 00:19:59,190
data into a new cluster of the newer

00:19:56,310 --> 00:20:01,910
version so there are some major release

00:19:59,190 --> 00:20:07,500
upgrade paths too as well so you can

00:20:01,910 --> 00:20:12,060
upgrade a version two data into five and

00:20:07,500 --> 00:20:15,210
five into six for example and that means

00:20:12,060 --> 00:20:18,660
you can use one repository with an well

00:20:15,210 --> 00:20:20,850
in multiple clusters so for example if

00:20:18,660 --> 00:20:24,930
you have your production cluster and

00:20:20,850 --> 00:20:27,540
then you have and so call it archive

00:20:24,930 --> 00:20:30,240
cluster yeah where you restore for

00:20:27,540 --> 00:20:33,150
example your data if you need some if

00:20:30,240 --> 00:20:36,390
you have to do some researchers for data

00:20:33,150 --> 00:20:37,860
from the last year or some years ago so

00:20:36,390 --> 00:20:40,530
that you can use for example a single

00:20:37,860 --> 00:20:42,000
stack cluster and you can restore it

00:20:40,530 --> 00:20:44,190
there and then you can do your per

00:20:42,000 --> 00:20:48,630
search operations and all the stuff in

00:20:44,190 --> 00:20:52,950
this second cluster for example so

00:20:48,630 --> 00:20:55,860
working with snapshots so tooltips you

00:20:52,950 --> 00:20:58,620
will see first the powerful two will

00:20:55,860 --> 00:21:03,390
curl so because elasticsearch has this

00:20:58,620 --> 00:21:06,150
rich full HTTP api on part nine thousand

00:21:03,390 --> 00:21:09,750
two hundred and you can use it totally

00:21:06,150 --> 00:21:12,270
fully with curls so the whole snapshot

00:21:09,750 --> 00:21:15,300
api is handling over it so that means

00:21:12,270 --> 00:21:18,390
you can can you can do scripting stuff

00:21:15,300 --> 00:21:21,270
as well and at least there's also an

00:21:18,390 --> 00:21:25,290
elastic search pison library bind to

00:21:21,270 --> 00:21:28,010
snapshot and it's the base of the tool

00:21:25,290 --> 00:21:32,180
we will talk today about it's called

00:21:28,010 --> 00:21:37,010
corridor and corridor is

00:21:32,180 --> 00:21:41,400
at least a good choice and if you need

00:21:37,010 --> 00:21:43,170
fast fast success in restoring

00:21:41,400 --> 00:21:46,110
snapshotting or housekeeping your

00:21:43,170 --> 00:21:50,070
elastic swatch clusters without doing

00:21:46,110 --> 00:21:53,070
some scripting stuff or doing a deeper

00:21:50,070 --> 00:21:56,480
dive into the Pisan libraries or

00:21:53,070 --> 00:22:00,180
something else or developing your own

00:21:56,480 --> 00:22:02,520
pison client so the karate oh he's the

00:22:00,180 --> 00:22:04,680
one who runs the museum he is

00:22:02,520 --> 00:22:08,040
responsible for all the picture

00:22:04,680 --> 00:22:11,430
collections so his skills are he's based

00:22:08,040 --> 00:22:15,870
on pison so he also provides a pison api

00:22:11,430 --> 00:22:18,900
so there are a lot of pison functions

00:22:15,870 --> 00:22:21,630
you can use also as a single tons you

00:22:18,900 --> 00:22:24,600
can use it also as a CLI tool so maybe

00:22:21,630 --> 00:22:27,150
it's from interests to make a plugin

00:22:24,600 --> 00:22:30,960
also you can also you write your own

00:22:27,150 --> 00:22:33,300
plugin with that through this API so it

00:22:30,960 --> 00:22:39,510
also provides automation with a y'know

00:22:33,300 --> 00:22:42,030
config what we will do later and it can

00:22:39,510 --> 00:22:47,760
be used for housekeeping stuff like

00:22:42,030 --> 00:22:51,300
closing or opening indices and renaming

00:22:47,760 --> 00:22:55,280
or reindex indices besides from doing

00:22:51,300 --> 00:22:55,280
restores and snapshots so

00:22:59,740 --> 00:23:08,080
consideration for snapshots if you want

00:23:05,950 --> 00:23:12,460
to snapshot an indeed see your daters so

00:23:08,080 --> 00:23:15,279
it will be do a snapshot per default

00:23:12,460 --> 00:23:18,730
from all your Altman active entities in

00:23:15,279 --> 00:23:27,880
your elasticsearch cluster so that means

00:23:18,730 --> 00:23:28,510
for example I hope it's good in Plex so

00:23:27,880 --> 00:23:31,000
you see that

00:23:28,510 --> 00:23:32,679
so all this indices so per default all

00:23:31,000 --> 00:23:35,830
these indices you are seeing there I

00:23:32,679 --> 00:23:38,080
don't know if it's good in plank so no

00:23:35,830 --> 00:23:43,110
there is no light version so it will be

00:23:38,080 --> 00:23:46,899
hard later on so maybe we can close the

00:23:43,110 --> 00:23:50,590
shallows huh or turn off client skintone

00:23:46,899 --> 00:23:53,020
Thanks so the default is if I trigger

00:23:50,590 --> 00:23:57,039
snapshot so all my indices which are

00:23:53,020 --> 00:24:09,309
open that I actually four will be stored

00:23:57,039 --> 00:24:13,029
in a snapshot so that means the default

00:24:09,309 --> 00:24:16,390
is very pragmatic and it it guesses that

00:24:13,029 --> 00:24:19,960
you want to do snapshot of all your

00:24:16,390 --> 00:24:26,140
indices so it's also important to note

00:24:19,960 --> 00:24:29,350
that if you triggering a snapshot the

00:24:26,140 --> 00:24:32,620
global cluster State will be included so

00:24:29,350 --> 00:24:36,330
you can have templates for indices and

00:24:32,620 --> 00:24:38,830
you can have cluster settings which are

00:24:36,330 --> 00:24:42,279
persistent and it will be also stored

00:24:38,830 --> 00:24:45,940
with a snapshot each snapshot so this is

00:24:42,279 --> 00:24:51,580
an option which is per default set to

00:24:45,940 --> 00:24:54,760
true that means if you do a restore you

00:24:51,580 --> 00:24:56,620
are able to also reproduce the clusters

00:24:54,760 --> 00:24:59,049
so with the original persistence

00:24:56,620 --> 00:25:04,750
settings and templates and all the stuff

00:24:59,049 --> 00:25:08,950
what's behind and index so the nexus if

00:25:04,750 --> 00:25:11,919
shards are not available from an index

00:25:08,950 --> 00:25:13,570
so they are corrupt already a lost so

00:25:11,919 --> 00:25:16,600
the normal behavior

00:25:13,570 --> 00:25:18,760
of a snapshot is that it fails so

00:25:16,600 --> 00:25:21,610
there's a small option which is called

00:25:18,760 --> 00:25:25,450
partial that means if you said partial

00:25:21,610 --> 00:25:29,110
to true you are able to do a snapshot of

00:25:25,450 --> 00:25:32,490
a corrupted index with so while

00:25:29,110 --> 00:25:36,370
smoothing shards or procure shards so

00:25:32,490 --> 00:25:40,270
through ignoring them and later if you

00:25:36,370 --> 00:25:43,690
are restore such partial backups it will

00:25:40,270 --> 00:25:46,150
create recreate the shards which are

00:25:43,690 --> 00:25:48,190
missing but they are empty so that

00:25:46,150 --> 00:25:54,370
brings you for example in the position

00:25:48,190 --> 00:25:58,360
to to rest right corrupted index for

00:25:54,370 --> 00:26:02,010
example or to migrate indexes which are

00:25:58,360 --> 00:26:06,750
not working as expected

00:26:02,010 --> 00:26:11,790
so considerations for restore so and

00:26:06,750 --> 00:26:15,370
index can only be restored if it's

00:26:11,790 --> 00:26:18,400
closed or it's exist in the cluster but

00:26:15,370 --> 00:26:21,480
it must be in the state closed if you

00:26:18,400 --> 00:26:29,320
restore an index the index will be

00:26:21,480 --> 00:26:32,050
opened again exactly like before and if

00:26:29,320 --> 00:26:39,310
it not exists the index will be

00:26:32,050 --> 00:26:42,400
recreated so on the other side restore

00:26:39,310 --> 00:26:46,860
cluster states can also be activated

00:26:42,400 --> 00:26:49,540
than the default concurrent's you to

00:26:46,860 --> 00:26:55,150
snapshotting is during a restore to

00:26:49,540 --> 00:26:58,870
false and that means you it prevents

00:26:55,150 --> 00:27:01,540
that you may be by accident overwrite

00:26:58,870 --> 00:27:04,120
your templates and your persistence

00:27:01,540 --> 00:27:07,240
settings in the new cluster so you have

00:27:04,120 --> 00:27:12,940
to you have the options what you want to

00:27:07,240 --> 00:27:16,780
restore so you can also use to restore

00:27:12,940 --> 00:27:19,920
functions for example to rename or re

00:27:16,780 --> 00:27:24,070
index and index so to alter it for

00:27:19,920 --> 00:27:27,460
example as I explained you have a

00:27:24,070 --> 00:27:30,549
document with fields as smallest unit

00:27:27,460 --> 00:27:33,100
and each of that fields happen for

00:27:30,549 --> 00:27:36,250
example in data mapping a type so that

00:27:33,100 --> 00:27:39,370
means you can also alter the the

00:27:36,250 --> 00:27:44,020
definitions of your mapping so of your

00:27:39,370 --> 00:27:46,390
entity types and you can also alter some

00:27:44,020 --> 00:27:49,899
minimal settings like how many replicas

00:27:46,390 --> 00:27:55,539
you want so what's also important during

00:27:49,899 --> 00:27:58,809
restores across and leave the tagua this

00:27:55,539 --> 00:28:01,029
is the reasons why you want to restore

00:27:58,809 --> 00:28:03,610
so a disaster recovery or my creation

00:28:01,029 --> 00:28:06,159
for example so that means you have a

00:28:03,610 --> 00:28:10,870
total loss so then for example I will

00:28:06,159 --> 00:28:14,980
let all the entities in my snapshot

00:28:10,870 --> 00:28:18,789
should be recreated and maybe if I don't

00:28:14,980 --> 00:28:23,820
remember the cluster settings as well I

00:28:18,789 --> 00:28:27,399
want to set the global state to true and

00:28:23,820 --> 00:28:29,980
the other thing is if you restore a

00:28:27,399 --> 00:28:31,990
snapshot then the new class if you're

00:28:29,980 --> 00:28:36,159
using it and then you should be in the

00:28:31,990 --> 00:28:42,159
position to use a cluster exactly like

00:28:36,159 --> 00:28:47,679
the old one cause for example if you

00:28:42,159 --> 00:28:52,390
have a tonal cluster and you have two

00:28:47,679 --> 00:28:55,870
charts or three or five shots and you

00:28:52,390 --> 00:28:58,809
have two replicas and replicas cannot be

00:28:55,870 --> 00:29:03,549
on the same note like a primary then you

00:28:58,809 --> 00:29:06,580
have a yellow state because you getting

00:29:03,549 --> 00:29:14,320
the fault that the replica shots cannot

00:29:06,580 --> 00:29:16,330
be assigned ya to any node that means if

00:29:14,320 --> 00:29:18,669
you have two shots and you have a

00:29:16,330 --> 00:29:21,610
replica set of two that means to store

00:29:18,669 --> 00:29:25,600
the data once primary and two times as a

00:29:21,610 --> 00:29:29,890
replicas so one node holds the first

00:29:25,600 --> 00:29:32,529
primaries the second the two first

00:29:29,890 --> 00:29:36,070
replicas and the other two replicas

00:29:32,529 --> 00:29:39,789
cannot be assigned to any host because

00:29:36,070 --> 00:29:41,410
they cannot be on the same host for

00:29:39,789 --> 00:29:43,780
example that's maybe there is

00:29:41,410 --> 00:29:46,660
why you should alter for example replica

00:29:43,780 --> 00:29:50,980
settings during restore maybe because

00:29:46,660 --> 00:29:53,770
you have not enough notes then for

00:29:50,980 --> 00:29:57,220
historical search so you only want to

00:29:53,770 --> 00:29:59,470
restore specific index you set replica

00:29:57,220 --> 00:30:02,950
shots to zero because you have a single

00:29:59,470 --> 00:30:04,450
stack and you need no replication sets

00:30:02,950 --> 00:30:07,350
because you need no high availability

00:30:04,450 --> 00:30:10,120
and you need no search performance and

00:30:07,350 --> 00:30:13,570
you also do not want to include the

00:30:10,120 --> 00:30:16,210
cluster State for example yeah because

00:30:13,570 --> 00:30:18,190
you only want to have the index to

00:30:16,210 --> 00:30:30,010
search in it and you don't want to

00:30:18,190 --> 00:30:38,790
rebuild a cluster or for restore for

00:30:30,010 --> 00:30:41,710
housekeeping so so that means you may be

00:30:38,790 --> 00:30:44,710
so housekeeping stuff so you may set the

00:30:41,710 --> 00:30:47,200
oldest index to one single shot so that

00:30:44,710 --> 00:30:51,910
means we create a single shot before you

00:30:47,200 --> 00:30:54,400
snapshot it so you compress the data to

00:30:51,910 --> 00:30:56,680
one chart then you can snapshot it and

00:30:54,400 --> 00:30:59,920
then you can delete it and you have a

00:30:56,680 --> 00:31:01,390
valid backup for restoring so for

00:30:59,920 --> 00:31:05,410
example if you have not spayed

00:31:01,390 --> 00:31:08,200
not enough space in your cluster so

00:31:05,410 --> 00:31:11,440
there are many proposes so and there are

00:31:08,200 --> 00:31:13,810
also many pitfalls so that's why we will

00:31:11,440 --> 00:31:18,100
take a look in the Praxis so we will

00:31:13,810 --> 00:31:21,570
leave the theory on that so I try to

00:31:18,100 --> 00:31:21,570
share the

00:31:28,960 --> 00:31:35,890
so all what we do now I already checked

00:31:32,050 --> 00:31:38,680
it in into github so even all what we do

00:31:35,890 --> 00:31:43,750
today is on github with the slides and

00:31:38,680 --> 00:31:52,810
you can you can read it later and you

00:31:43,750 --> 00:31:57,660
can maybe use it for some help so the

00:31:52,810 --> 00:31:57,660
first thing what we have to do is to the

00:32:01,590 --> 00:32:12,070
first thing what we have to do is to

00:32:04,000 --> 00:32:21,030
create your repository so we do that as

00:32:12,070 --> 00:32:21,030
in curl operation not like that

00:32:26,960 --> 00:32:35,580
seven means retired car X so that's

00:32:31,910 --> 00:32:40,100
important and I'm off one of my house a

00:32:35,580 --> 00:32:40,100
local house 9,000

00:32:51,139 --> 00:33:08,360
9200 and then I request a snapshot white

00:33:00,360 --> 00:33:08,360
background it's better of course I can

00:33:13,840 --> 00:33:16,840
that

00:33:25,620 --> 00:33:31,740
no I'm not a snitch

00:33:40,040 --> 00:33:50,450
better okay better us no us so we call

00:33:46,780 --> 00:33:53,540
we do request you this snapshot APA so

00:33:50,450 --> 00:33:55,460
now I have to give the repository a name

00:33:53,540 --> 00:34:02,870
so that's that's the part where I named

00:33:55,460 --> 00:34:12,080
a repository repository I called it NFS

00:34:02,870 --> 00:34:14,330
repository so - aged and I've content so

00:34:12,080 --> 00:34:24,760
that's that the thing that we have to

00:34:14,330 --> 00:34:24,760
type all this application like Jason so

00:34:31,330 --> 00:34:35,110
sand and return

00:34:42,040 --> 00:34:48,750
so I gift type file system so down

00:34:49,350 --> 00:34:54,840
yes comma Wow

00:35:07,510 --> 00:35:14,850
so on time let me do it in a one-liner

00:35:12,340 --> 00:35:14,850
time

00:35:30,329 --> 00:35:38,099
so time hmm

00:35:47,790 --> 00:35:50,790
No

00:35:52,900 --> 00:36:05,140
type FS comma settings

00:36:08,960 --> 00:36:31,820
then I put in the location an elastic

00:36:21,830 --> 00:36:34,430
data backup then I do compress I hope it

00:36:31,820 --> 00:36:36,250
will work as a single liner I never did

00:36:34,430 --> 00:36:50,750
this before

00:36:36,250 --> 00:36:57,580
so like true hmm just know during the

00:36:50,750 --> 00:36:57,580
settings do you need no commerce oh yeah

00:36:59,440 --> 00:37:13,099
so it's so not true so that means now we

00:37:08,660 --> 00:37:26,560
have to repository online and then we

00:37:13,099 --> 00:37:26,560
can create

00:37:37,220 --> 00:37:40,250
so we can verify them we will see if

00:37:39,410 --> 00:37:47,359
they are sopretty

00:37:40,250 --> 00:37:50,000
so I don't have to try but no there's no

00:37:47,359 --> 00:37:52,339
pretty for that option so I can't pop it

00:37:50,000 --> 00:37:56,119
in the shaker is tough but doesn't

00:37:52,339 --> 00:37:59,869
matter so so we'll see the repositories

00:37:56,119 --> 00:38:03,130
verify as announced to all the notes so

00:37:59,869 --> 00:38:06,020
we have three notes node 1 node 2 node 3

00:38:03,130 --> 00:38:09,579
so on and the other hand you can also do

00:38:06,020 --> 00:38:13,329
this with for example a tool like

00:38:09,579 --> 00:38:15,619
cerebro so you'll see them there

00:38:13,329 --> 00:38:19,490
repositories there should be in your

00:38:15,619 --> 00:38:25,540
repository and you can alter also the

00:38:19,490 --> 00:38:28,160
settings there you can also delete it so

00:38:25,540 --> 00:38:35,510
you will see this RINO --tz-- we have

00:38:28,160 --> 00:38:37,880
verified D and that the repository

00:38:35,510 --> 00:38:42,800
exists so that means we are finished

00:38:37,880 --> 00:38:45,260
here so we created a repository we have

00:38:42,800 --> 00:38:49,839
no snapshots actually so we can do list

00:38:45,260 --> 00:38:58,810
snapshot but there's nothing to list

00:38:49,839 --> 00:38:58,810
actually so

00:39:03,810 --> 00:39:10,849
we'll be empty missing exception

00:39:15,020 --> 00:39:31,560
some journal snapshots in itself

00:39:18,710 --> 00:39:33,599
let's do first snapshot so doing a

00:39:31,560 --> 00:39:36,599
snapshot is very simple with curls so

00:39:33,599 --> 00:39:39,990
there are there are several options can

00:39:36,599 --> 00:39:44,300
you see can you see it good or should I

00:39:39,990 --> 00:39:44,300
make it bigger and something missing

00:39:44,599 --> 00:39:56,490
okay so are you can trigger it with an

00:39:52,040 --> 00:40:00,180
with a with the call repository name a

00:39:56,490 --> 00:40:02,609
snapshot and that this part is the name

00:40:00,180 --> 00:40:04,440
of the snapshot so if you if you write

00:40:02,609 --> 00:40:06,660
your own scripts and so on and you have

00:40:04,440 --> 00:40:11,300
to take care about that you have their

00:40:06,660 --> 00:40:15,589
need and increment or something else so

00:40:11,300 --> 00:40:21,180
because you have to hard code in every

00:40:15,589 --> 00:40:23,220
curl the name of the snapshot you want

00:40:21,180 --> 00:40:25,650
to trigger so you have to take care

00:40:23,220 --> 00:40:28,349
about with the bash variable or

00:40:25,650 --> 00:40:30,140
something else that it will be change

00:40:28,349 --> 00:40:34,740
every time you trigger the snapshot and

00:40:30,140 --> 00:40:36,990
the way for completion to means that it

00:40:34,740 --> 00:40:40,440
waits until it's finish and you get an

00:40:36,990 --> 00:40:42,180
something like a response so you can you

00:40:40,440 --> 00:40:45,810
can do it like that so that's a trigger

00:40:42,180 --> 00:40:48,450
for all indices or you can do some

00:40:45,810 --> 00:40:51,390
advanced stuff you can only backup

00:40:48,450 --> 00:40:55,020
single in this case with naming them and

00:40:51,390 --> 00:40:57,480
you can also say if and indeed say it's

00:40:55,020 --> 00:41:00,720
not available you can ignore them you

00:40:57,480 --> 00:41:03,869
can exclude or include the Clovis State

00:41:00,720 --> 00:41:07,440
and you can also set do your partial

00:41:03,869 --> 00:41:10,920
setting here for example saw it no

00:41:07,440 --> 00:41:16,859
unavailable means if one of the indices

00:41:10,920 --> 00:41:19,680
is for example Pro are not valid in the

00:41:16,859 --> 00:41:22,920
cluster then it ignores it and it goes

00:41:19,680 --> 00:41:26,040
over to the next so if you don't set

00:41:22,920 --> 00:41:29,940
this option the whole snapshot will be

00:41:26,040 --> 00:41:32,460
failed if one index is not online or

00:41:29,940 --> 00:41:34,800
analogy condition to doing a snapshot so

00:41:32,460 --> 00:41:37,910
then I already explained to include

00:41:34,800 --> 00:41:37,910
Clovis state so to

00:41:38,570 --> 00:41:45,290
a snapshot also a persistence settings

00:41:41,330 --> 00:41:48,830
and templates for your indices and then

00:41:45,290 --> 00:41:54,860
the partial setting to ignore corrupted

00:41:48,830 --> 00:42:01,730
or missing shots for example take a

00:41:54,860 --> 00:42:05,210
snapshot so Dan yeah

00:42:01,730 --> 00:42:09,860
VI automate snapshot name okay so yeah

00:42:05,210 --> 00:42:12,890
close to the end out of my it's natural

00:42:09,860 --> 00:42:18,830
snapshot names so there's one thing you

00:42:12,890 --> 00:42:22,190
can do besides yeah handle this stuff in

00:42:18,830 --> 00:42:25,300
your scripts you can also use when

00:42:22,190 --> 00:42:29,270
you're when you do it with curl you can

00:42:25,300 --> 00:42:36,350
use some building variables but you have

00:42:29,270 --> 00:42:40,070
to use encoding of course and you can

00:42:36,350 --> 00:42:44,300
use some date math functions as well so

00:42:40,070 --> 00:42:47,780
that's one way to doing some automated

00:42:44,300 --> 00:42:54,020
stuff on a daily backup base for example

00:42:47,780 --> 00:42:59,360
so and if we pull all that together we

00:42:54,020 --> 00:43:02,630
will end into the carotid stuff so back

00:42:59,360 --> 00:43:05,120
up Yunel so then we have a Kurata and

00:43:02,630 --> 00:43:10,790
here you can define how your backup

00:43:05,120 --> 00:43:12,560
should go and you can you can have some

00:43:10,790 --> 00:43:14,750
you can set some options you have to

00:43:12,560 --> 00:43:17,000
name the repository as well then you

00:43:14,750 --> 00:43:18,650
have to give it a name if you leave it

00:43:17,000 --> 00:43:21,320
blank there will be a default it's

00:43:18,650 --> 00:43:27,590
listed here and then you can use all

00:43:21,320 --> 00:43:29,900
your settings and you can also do some

00:43:27,590 --> 00:43:32,570
advanced filtering stuff so you can tie

00:43:29,900 --> 00:43:35,300
up multiple filters Jim what I doing

00:43:32,570 --> 00:43:38,240
here is I'm filtering for pattern and

00:43:35,300 --> 00:43:42,890
perfect so yeah prefix is the beginning

00:43:38,240 --> 00:43:44,930
of the index name yeah it should be

00:43:42,890 --> 00:43:47,930
named suffix but they called it prefix

00:43:44,930 --> 00:43:51,950
and the filter type at on the second

00:43:47,930 --> 00:43:53,540
hand um is H and

00:43:51,950 --> 00:43:55,700
sources creation to aid in the

00:43:53,540 --> 00:43:59,330
directions Ola that means I want to back

00:43:55,700 --> 00:44:03,650
up all in the seas that are older than

00:43:59,330 --> 00:44:06,320
one day and the date for this math

00:44:03,650 --> 00:44:22,610
should be retrieved through the name of

00:44:06,320 --> 00:44:25,450
the index so let's do that with Corrado

00:44:22,610 --> 00:44:28,250
and then we give it the action Jana

00:44:25,450 --> 00:44:30,610
let's have a look there's our action

00:44:28,250 --> 00:44:30,610
Jana

00:44:40,460 --> 00:44:44,240
I'm still various

00:45:04,380 --> 00:45:13,450
so it is you see the configuration of

00:45:07,210 --> 00:45:15,900
your crater to reach this and then you

00:45:13,450 --> 00:45:15,900
see

00:45:28,340 --> 00:45:32,050
so you see it if file

00:45:37,430 --> 00:45:47,930
socarrat on so we will alter their

00:45:49,459 --> 00:45:56,940
meanings - try run so we can test it

00:45:52,469 --> 00:46:11,489
before run back up Yama so let's do a

00:45:56,940 --> 00:46:14,930
lass and then we should see let's do so

00:46:11,489 --> 00:46:18,949
that goes very fast we will see if there

00:46:14,930 --> 00:46:18,949
for example in the

00:46:39,900 --> 00:46:47,870
it's a test my repository and there

00:46:42,120 --> 00:46:47,870
should be no there is no why there is no

00:46:48,380 --> 00:46:54,000
so name age so I'm missing something

00:46:51,360 --> 00:46:56,700
here there's the - missing prefix

00:46:54,000 --> 00:47:01,730
pattern older than one day there should

00:46:56,700 --> 00:47:01,730
be one at least

00:47:14,040 --> 00:47:21,380
that's all phonons from 6 o'clock to TC

00:47:17,369 --> 00:47:21,380
and now it's eight o'clock UTC

00:47:46,500 --> 00:47:57,730
okay then let's try it with Barrios I

00:47:51,270 --> 00:48:12,339
already prepared it we consume so I

00:47:57,730 --> 00:48:15,339
already prepare to bury yes chip so

00:48:12,339 --> 00:48:17,170
elastic backup so we'll cut off to try

00:48:15,339 --> 00:48:20,440
run so what I used in various for

00:48:17,170 --> 00:48:35,770
example I am configured an admin job

00:48:20,440 --> 00:48:47,589
and I only run the script you know run

00:48:35,770 --> 00:48:51,550
job elastic background yes sadly there

00:48:47,589 --> 00:48:53,410
should be one so fed to complete action

00:48:51,550 --> 00:48:56,740
snapshot can a snapshot let me see to

00:48:53,410 --> 00:49:14,590
missing repository so

00:48:56,740 --> 00:49:25,130
did not get a repository why Stan Erina

00:49:14,590 --> 00:49:28,300
and if repository of type okay then I

00:49:25,130 --> 00:49:28,300
will use the old one

00:50:02,880 --> 00:50:16,680
so sorry for that it worked as I tried

00:50:06,580 --> 00:50:16,680
it yeah

00:50:23,380 --> 00:50:25,980
nope

00:50:26,560 --> 00:50:29,490
got it

00:50:34,530 --> 00:50:37,130
yeah

00:50:46,510 --> 00:50:49,680
so it's good

00:50:57,840 --> 00:51:06,280
what

00:51:00,170 --> 00:51:06,280
what happened there nothing why

00:51:20,450 --> 00:51:27,760
so let's see what's going wrong if the

00:51:23,720 --> 00:51:31,970
repository is corrupted or not select so

00:51:27,760 --> 00:51:37,490
snapshot name backup one so we took one

00:51:31,970 --> 00:51:47,390
by hands or if that so create snapshot

00:51:37,490 --> 00:51:50,320
successfully created so it did not I got

00:51:47,390 --> 00:51:50,320
one created

00:52:11,780 --> 00:52:29,930
company database - so no time string is

00:52:27,349 --> 00:52:32,930
also in there so sorry for that I don't

00:52:29,930 --> 00:52:34,579
know what's going on there so no I would

00:52:32,930 --> 00:52:37,160
correct that and I will put it in the

00:52:34,579 --> 00:52:38,750
github repository so I tried it before

00:52:37,160 --> 00:52:43,369
with that llaman configuration and it

00:52:38,750 --> 00:52:44,900
worked so curious anyway so that's so

00:52:43,369 --> 00:52:49,520
that's the action for a snapshot at

00:52:44,900 --> 00:52:51,470
least so I want as I try to backup all

00:52:49,520 --> 00:52:54,200
indices which are called company

00:52:51,470 --> 00:52:57,109
database with often times during which

00:52:54,200 --> 00:52:59,720
are not only older than or which are

00:52:57,109 --> 00:53:01,940
older than one day and on the other hand

00:52:59,720 --> 00:53:04,040
there was this restore file for

00:53:01,940 --> 00:53:07,190
restoring them where it looks in the

00:53:04,040 --> 00:53:11,510
repository for the init is called

00:53:07,190 --> 00:53:14,290
company database and and it's restoring

00:53:11,510 --> 00:53:19,490
them without the cloak class estate and

00:53:14,290 --> 00:53:22,310
it searches for backups with snapshots

00:53:19,490 --> 00:53:26,510
which starting with the backup prefix

00:53:22,310 --> 00:53:30,220
and then restore them to renew clusters

00:53:26,510 --> 00:53:32,630
so that's what I try to show but

00:53:30,220 --> 00:53:35,240
actually sorry for that it went wrong I

00:53:32,630 --> 00:53:40,160
will correct it and you will see in the

00:53:35,240 --> 00:53:42,859
github resource so so that's there are

00:53:40,160 --> 00:53:45,319
some things about about backing up

00:53:42,859 --> 00:53:50,210
elasticsearch at least and how to do

00:53:45,319 --> 00:53:52,040
that and some stuff about corrado which

00:53:50,210 --> 00:53:56,410
you can use instead of scripting your

00:53:52,040 --> 00:53:56,410
own and yeah thanks

00:53:57,070 --> 00:54:02,789

YouTube URL: https://www.youtube.com/watch?v=YwdF6JZtnRs


