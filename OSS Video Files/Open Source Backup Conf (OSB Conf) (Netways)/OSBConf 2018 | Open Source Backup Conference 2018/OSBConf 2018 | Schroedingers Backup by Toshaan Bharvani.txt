Title: OSBConf 2018 | Schroedingers Backup by Toshaan Bharvani
Publication date: 2018-10-04
Playlist: OSBConf 2018 | Open Source Backup Conference 2018
Description: 
	
Captions: 
	00:00:00,090 --> 00:00:11,740
[Music]

00:00:12,910 --> 00:00:18,619
so welcome back from the lunch break I

00:00:15,500 --> 00:00:21,110
hope everybody's doing well so far we

00:00:18,619 --> 00:00:26,150
will start right now with the second

00:00:21,110 --> 00:00:29,990
part of this day and we will hear two

00:00:26,150 --> 00:00:33,710
more talks until our next coffee break

00:00:29,990 --> 00:00:39,019
so then you will receive coffee like

00:00:33,710 --> 00:00:41,449
expected next so the next talk will be

00:00:39,019 --> 00:00:45,830
held by someone who is coming from

00:00:41,449 --> 00:00:48,949
unwell he is doing a lot of community

00:00:45,830 --> 00:00:51,290
open-source community stuff he is well

00:00:48,949 --> 00:00:57,920
known for a lot of talks and conferences

00:00:51,290 --> 00:01:00,049
and he's also yeah responsible for major

00:00:57,920 --> 00:01:03,439
sauce IT infrastructure in a lot of

00:01:00,049 --> 00:01:06,439
companies and today he will talk about

00:01:03,439 --> 00:01:09,080
shooting us back up so we will see if

00:01:06,439 --> 00:01:13,990
Tosh will present as some nice cat

00:01:09,080 --> 00:01:13,990
pictures or not so please welcome Tosh

00:01:15,700 --> 00:01:20,179
so yeah I'm from Belgium I'm

00:01:17,960 --> 00:01:23,890
self-employed a consultant I have done

00:01:20,179 --> 00:01:27,439
some open source stuff I do some

00:01:23,890 --> 00:01:29,990
conferences also I do the conflict

00:01:27,439 --> 00:01:33,259
management camp after Falls Dam we have

00:01:29,990 --> 00:01:35,899
load days also in Belgium I've been

00:01:33,259 --> 00:01:38,929
involved with some of the projects I

00:01:35,899 --> 00:01:41,270
typically do more the hardware and the

00:01:38,929 --> 00:01:42,770
lower software stuff so the operation

00:01:41,270 --> 00:01:48,289
stuff I don't do that much development

00:01:42,770 --> 00:01:51,079
anymore but that's well if you want to

00:01:48,289 --> 00:01:52,880
know more you can ask me so I'll give

00:01:51,079 --> 00:01:56,509
you a short introduction I'll talk about

00:01:52,880 --> 00:01:59,689
some of the techniques I'm not that

00:01:56,509 --> 00:02:01,819
heavy user of barrows we have some

00:01:59,689 --> 00:02:04,929
customers who use it I'm going to talk

00:02:01,819 --> 00:02:11,630
more abstract and how to check things

00:02:04,929 --> 00:02:14,569
and first yeah I called my presentation

00:02:11,630 --> 00:02:16,700
Schrodinger's back up so we first have

00:02:14,569 --> 00:02:18,650
to introduce whoever in starting Aires I

00:02:16,700 --> 00:02:22,190
presume everybody knows this already but

00:02:18,650 --> 00:02:24,319
he is the father of quantum physics he

00:02:22,190 --> 00:02:27,560
won the Nobel Prize in 1933

00:02:24,319 --> 00:02:30,409
for quantum physics that's how he looked

00:02:27,560 --> 00:02:33,980
and that equation is what is on his

00:02:30,409 --> 00:02:36,650
gravestone so it was so important for

00:02:33,980 --> 00:02:39,680
him that he put it on his great well his

00:02:36,650 --> 00:02:42,980
wife put it for him on his gravestone so

00:02:39,680 --> 00:02:49,180
yes he was very well known for quantum

00:02:42,980 --> 00:02:55,489
physics now here also in his spare time

00:02:49,180 --> 00:02:59,180
devised a certain idea as in the

00:02:55,489 --> 00:03:01,639
Schrodinger's cat so he had this problem

00:02:59,180 --> 00:03:05,329
that in quantum physics you could be at

00:03:01,639 --> 00:03:07,849
two places at the same time you had a

00:03:05,329 --> 00:03:11,209
lot of these ideas which are unrealistic

00:03:07,849 --> 00:03:13,760
and actually quite improbable for a

00:03:11,209 --> 00:03:17,750
normal human being to understand I mean

00:03:13,760 --> 00:03:19,609
it is very difficult to explain that you

00:03:17,750 --> 00:03:22,519
could have molecules in you which could

00:03:19,609 --> 00:03:24,919
transfer to Mars within a next second

00:03:22,519 --> 00:03:27,319
now of course the likelihood of that

00:03:24,919 --> 00:03:29,810
happening is very small you would have

00:03:27,319 --> 00:03:32,169
to wait the lifespan of the universe for

00:03:29,810 --> 00:03:35,269
such a thing to happen but

00:03:32,169 --> 00:03:38,060
mathematically it is possible so he

00:03:35,269 --> 00:03:40,579
devised this a little bit more easier

00:03:38,060 --> 00:03:44,079
thing to understand he said that if we

00:03:40,579 --> 00:03:47,659
put a cat in a box and we add some

00:03:44,079 --> 00:03:50,150
radioactive poison which we do not know

00:03:47,659 --> 00:03:52,879
it has broken or hasn't broken then the

00:03:50,150 --> 00:03:56,359
cat would be at the same time dead and

00:03:52,879 --> 00:03:59,359
alive because we wouldn't know what is

00:03:56,359 --> 00:04:02,359
happening in the box now when we make

00:03:59,359 --> 00:04:05,659
backups we'd typically do backups we get

00:04:02,359 --> 00:04:07,280
a verification varios or arcing or

00:04:05,659 --> 00:04:10,189
whatever tool you're using we'll say the

00:04:07,280 --> 00:04:12,560
backup is done but how many people

00:04:10,189 --> 00:04:17,269
actually go and check the contents of

00:04:12,560 --> 00:04:19,789
that backup and that is why I named my

00:04:17,269 --> 00:04:21,799
presentation as such because most people

00:04:19,789 --> 00:04:24,409
have backups but we do not know what the

00:04:21,799 --> 00:04:29,560
state of this backup is can this backup

00:04:24,409 --> 00:04:32,510
be restored or not and I've well as

00:04:29,560 --> 00:04:35,620
daniel said this morning I have a small

00:04:32,510 --> 00:04:37,969
data center of my own nine servers in it

00:04:35,620 --> 00:04:40,610
beginning of July you know

00:04:37,969 --> 00:04:44,659
span of two weeks seven of them crashed

00:04:40,610 --> 00:04:48,069
at well within two weeks span I was able

00:04:44,659 --> 00:04:50,919
to rebuild and re restore everything

00:04:48,069 --> 00:04:55,339
even though I hadn't tested everything

00:04:50,919 --> 00:04:57,409
necessarily in that detail but I was

00:04:55,339 --> 00:05:00,289
lucky to be able to do this and that is

00:04:57,409 --> 00:05:02,929
why I wanted to present this to give

00:05:00,289 --> 00:05:05,419
more understanding that doing a backup

00:05:02,929 --> 00:05:07,849
is important but being able to check

00:05:05,419 --> 00:05:10,489
this backup and to be able to make sure

00:05:07,849 --> 00:05:12,769
that you can restore this backup in

00:05:10,489 --> 00:05:18,529
whichever way that works for you is also

00:05:12,769 --> 00:05:22,399
important now for this backup we

00:05:18,529 --> 00:05:27,259
typically need to understand what your

00:05:22,399 --> 00:05:29,179
system is built off a typical machine be

00:05:27,259 --> 00:05:33,439
it bare metal via the virtual machine

00:05:29,179 --> 00:05:37,909
via the container is typically made out

00:05:33,439 --> 00:05:40,999
of four types of systems I mean four

00:05:37,909 --> 00:05:46,159
types of integrations the operating

00:05:40,999 --> 00:05:49,579
system build Linux UNIX or Windows an

00:05:46,159 --> 00:05:52,269
application the configuration for this

00:05:49,579 --> 00:05:54,709
application and the actual data

00:05:52,269 --> 00:05:58,639
typically people will make a backup of

00:05:54,709 --> 00:06:00,679
the data and that will work but if you

00:05:58,639 --> 00:06:03,169
can't restore your configuration then

00:06:00,679 --> 00:06:05,119
you need to think at the point that you

00:06:03,169 --> 00:06:08,149
are in this state of restore and maybe

00:06:05,119 --> 00:06:10,129
even in panic with your boss hanging

00:06:08,149 --> 00:06:12,849
over you asking you when will it be

00:06:10,129 --> 00:06:15,199
ready if you can automate these things

00:06:12,849 --> 00:06:17,719
then again you are a step further

00:06:15,199 --> 00:06:18,949
because you press a button and magic

00:06:17,719 --> 00:06:20,929
happens

00:06:18,949 --> 00:06:23,239
and if you have tested this magic then

00:06:20,929 --> 00:06:25,429
you can sit down peacefully while your

00:06:23,239 --> 00:06:27,469
boss is also sitting down peacefully and

00:06:25,429 --> 00:06:30,489
maybe even have a conversation on how

00:06:27,469 --> 00:06:34,699
you should do it next time even better

00:06:30,489 --> 00:06:37,159
but again we need to look at these four

00:06:34,699 --> 00:06:39,379
points to understand how to do a full

00:06:37,159 --> 00:06:42,199
restore I am a game presuming that you

00:06:39,379 --> 00:06:44,179
have a complete burnout of your data

00:06:42,199 --> 00:06:49,999
center so we need to be able to build

00:06:44,179 --> 00:06:51,409
everything from scratch again so some of

00:06:49,999 --> 00:06:55,710
the techniques

00:06:51,409 --> 00:06:57,870
you have snapshotting you can do that of

00:06:55,710 --> 00:07:00,479
an operating system you can do that of a

00:06:57,870 --> 00:07:03,509
file system you have dumping which is

00:07:00,479 --> 00:07:05,849
mostly for databases so most of the

00:07:03,509 --> 00:07:09,060
major databases support some kind of

00:07:05,849 --> 00:07:16,550
dumping you will have copying which is

00:07:09,060 --> 00:07:19,169
basically some copy or arcing type of a

00:07:16,550 --> 00:07:21,210
application and then you have some of

00:07:19,169 --> 00:07:25,469
the newer application that actually have

00:07:21,210 --> 00:07:27,990
built-in features we saw this morning

00:07:25,469 --> 00:07:31,740
that elasticsearch has one of these type

00:07:27,990 --> 00:07:34,560
of backup tools which can actually also

00:07:31,740 --> 00:07:36,270
backup all the type of data so you don't

00:07:34,560 --> 00:07:38,580
need to worry about configuration about

00:07:36,270 --> 00:07:42,360
data about anything else it creates a

00:07:38,580 --> 00:07:46,400
single package with all your data

00:07:42,360 --> 00:07:46,400
configuration and so on in it

00:07:47,120 --> 00:07:51,840
snapshotting if it's machine based if

00:07:49,650 --> 00:07:54,150
you want to do it metal you can use a

00:07:51,840 --> 00:07:56,370
tool like clear grati and we'll be

00:07:54,150 --> 00:07:58,440
talking later more about that you can

00:07:56,370 --> 00:08:04,529
use Clonezilla if you really want to

00:07:58,440 --> 00:08:06,569
have a different type of cloning there

00:08:04,529 --> 00:08:08,880
are people who use puppet or unstable in

00:08:06,569 --> 00:08:11,099
my case i use ansible for all of these

00:08:08,880 --> 00:08:14,069
things but again this depends on your

00:08:11,099 --> 00:08:16,080
setup whichever tool works for you

00:08:14,069 --> 00:08:17,729
if you want to be sure you might even

00:08:16,080 --> 00:08:20,599
want to use two or three of these tools

00:08:17,729 --> 00:08:24,779
to combine for on-site and off-site

00:08:20,599 --> 00:08:28,710
backup for virtual machines you

00:08:24,779 --> 00:08:30,750
typically have the snapshotting so KVM

00:08:28,710 --> 00:08:33,899
has snapshot rate as which will create a

00:08:30,750 --> 00:08:35,880
snapshot of your VM and then if you have

00:08:33,899 --> 00:08:38,729
applications that don't segregate data

00:08:35,880 --> 00:08:41,459
configuration that well it might be even

00:08:38,729 --> 00:08:44,099
easier for you to do this and to create

00:08:41,459 --> 00:08:46,260
a snapshot of that than to have to

00:08:44,099 --> 00:08:49,230
recreate or rebuild everything if you

00:08:46,260 --> 00:08:52,709
don't know how it is built up VMware has

00:08:49,230 --> 00:08:54,930
the same for this based you have LVM

00:08:52,709 --> 00:08:57,480
snapshots which basically take a

00:08:54,930 --> 00:08:59,490
snapshot of the file system so you will

00:08:57,480 --> 00:09:01,589
typically have all the data on that file

00:08:59,490 --> 00:09:04,710
system there are a lot of other ones so

00:09:01,589 --> 00:09:08,610
most of the major file systems if

00:09:04,710 --> 00:09:11,460
windows unix's all have this features

00:09:08,610 --> 00:09:15,300
built-in which means you can take a

00:09:11,460 --> 00:09:17,730
snapshot and you can actually have the

00:09:15,300 --> 00:09:23,010
image as it was on that machine at that

00:09:17,730 --> 00:09:26,580
point now how do you test nap shots and

00:09:23,010 --> 00:09:29,279
that is the more complicated part if you

00:09:26,580 --> 00:09:33,330
want you can test them outside of the

00:09:29,279 --> 00:09:35,190
business hours this is easy for VMs you

00:09:33,330 --> 00:09:37,230
can actually shut down the original VM

00:09:35,190 --> 00:09:38,640
take the snapshot booted up and see if

00:09:37,230 --> 00:09:42,360
you can get to your data from your

00:09:38,640 --> 00:09:46,940
clients you can if you have a very rich

00:09:42,360 --> 00:09:49,339
employer buy extra metal just for this

00:09:46,940 --> 00:09:52,080
you can create new virtualized

00:09:49,339 --> 00:09:54,330
environments for testing recovery which

00:09:52,080 --> 00:09:56,490
is something I mostly now do for

00:09:54,330 --> 00:09:58,500
customers if they have applications

00:09:56,490 --> 00:10:02,040
which are a combination of data and

00:09:58,500 --> 00:10:04,020
configuration or are based in such a way

00:10:02,040 --> 00:10:08,459
that we cannot separate data and

00:10:04,020 --> 00:10:10,350
application that well typically larger

00:10:08,459 --> 00:10:12,930
companies have these drills where they

00:10:10,350 --> 00:10:15,270
will have the recovery day where they

00:10:12,930 --> 00:10:17,040
will test it once every three months

00:10:15,270 --> 00:10:18,870
once every six months once every year

00:10:17,040 --> 00:10:21,810
where they will see can we actually

00:10:18,870 --> 00:10:25,110
restore now and get back all our

00:10:21,810 --> 00:10:27,570
infrastructure each one of these

00:10:25,110 --> 00:10:29,580
techniques have their own disadvantage

00:10:27,570 --> 00:10:32,279
and advantages based on your

00:10:29,580 --> 00:10:35,810
infrastructure you need to decide what

00:10:32,279 --> 00:10:35,810
is possible and what isn't possible

00:10:36,950 --> 00:10:42,839
configuration so typically today

00:10:39,920 --> 00:10:47,760
configuration should be templated and

00:10:42,839 --> 00:10:49,320
automated so installing an application

00:10:47,760 --> 00:10:51,810
and manually going at writing the

00:10:49,320 --> 00:10:55,320
configuration file shouldn't be done any

00:10:51,810 --> 00:10:57,270
more we see this still a lot well I

00:10:55,320 --> 00:10:59,100
still see this a lot with companies that

00:10:57,270 --> 00:11:02,579
they actually tried to manually

00:10:59,100 --> 00:11:04,200
configure each service if you're doing

00:11:02,579 --> 00:11:06,300
that there is a very good conference

00:11:04,200 --> 00:11:09,149
after for them conflict management camp

00:11:06,300 --> 00:11:12,779
which describes how to do this

00:11:09,149 --> 00:11:15,300
no but seriously it if you're still

00:11:12,779 --> 00:11:17,250
building your configuration manually it

00:11:15,300 --> 00:11:18,120
you need to think about how you automate

00:11:17,250 --> 00:11:20,490
that

00:11:18,120 --> 00:11:22,730
not only from a perspective of restoring

00:11:20,490 --> 00:11:25,260
but also from a perspective of

00:11:22,730 --> 00:11:27,690
reproducibility you want to have always

00:11:25,260 --> 00:11:31,620
the same configuration you want to be

00:11:27,690 --> 00:11:33,420
able to predict what will happen

00:11:31,620 --> 00:11:36,089
and with templating you can actually do

00:11:33,420 --> 00:11:38,160
that so there are some tools on symbol

00:11:36,089 --> 00:11:41,070
puppet chef which can actually help you

00:11:38,160 --> 00:11:44,339
to do that depending again on what you

00:11:41,070 --> 00:11:46,410
want and they can actually build a

00:11:44,339 --> 00:11:52,620
configuration for you and deploy it on

00:11:46,410 --> 00:11:55,050
that specific machine so an example most

00:11:52,620 --> 00:11:58,080
of my examples are unstable but this is

00:11:55,050 --> 00:11:59,970
as applicable for puppet chef salt or

00:11:58,080 --> 00:12:03,420
whatever your favorite configuration

00:11:59,970 --> 00:12:07,710
management tool is in this case it

00:12:03,420 --> 00:12:11,730
Spivak it's a an open-source google

00:12:07,710 --> 00:12:13,589
analytics tool so in this case we get

00:12:11,730 --> 00:12:18,810
the latest version of P week from the

00:12:13,589 --> 00:12:20,820
internet we deploy it there and we unzip

00:12:18,810 --> 00:12:24,660
it and then we copy the configuration

00:12:20,820 --> 00:12:27,000
file so in this simple three steps we

00:12:24,660 --> 00:12:28,380
actually are configuring well we are

00:12:27,000 --> 00:12:30,540
deploying our application and

00:12:28,380 --> 00:12:32,100
configuring our application now the

00:12:30,540 --> 00:12:34,830
configuration would look something like

00:12:32,100 --> 00:12:38,850
this so this is the standard

00:12:34,830 --> 00:12:40,980
configuration and you template it given

00:12:38,850 --> 00:12:43,830
that it's an unstable example it's with

00:12:40,980 --> 00:12:47,640
Jinja - if you would be using puppet or

00:12:43,830 --> 00:12:50,940
chef it's a ruby taz syntax if you're

00:12:47,640 --> 00:12:52,589
using salt it's also ginger - so it

00:12:50,940 --> 00:12:54,540
depends on your tool but it basically

00:12:52,589 --> 00:12:57,150
means that you get to put in variables

00:12:54,540 --> 00:13:00,150
and these variables come from your

00:12:57,150 --> 00:13:02,730
central database and they get filled in

00:13:00,150 --> 00:13:06,089
once they are deployed on that specific

00:13:02,730 --> 00:13:09,510
machine this means that you have this

00:13:06,089 --> 00:13:13,560
data already stored somewhere externally

00:13:09,510 --> 00:13:16,790
and you can backup that to a separate

00:13:13,560 --> 00:13:19,950
instance but it means that your

00:13:16,790 --> 00:13:27,600
deployment is not the only place you

00:13:19,950 --> 00:13:31,650
have this logic for another application

00:13:27,600 --> 00:13:33,000
I've just generated because a generic

00:13:31,650 --> 00:13:34,950
version

00:13:33,000 --> 00:13:37,200
we have some customers who have Windows

00:13:34,950 --> 00:13:39,510
applications so you need to be able to

00:13:37,200 --> 00:13:42,810
install them also again ansible can do

00:13:39,510 --> 00:13:45,060
that you can get it install it you can

00:13:42,810 --> 00:13:47,310
even put all the registry keys right

00:13:45,060 --> 00:13:48,750
because typically they don't work with

00:13:47,310 --> 00:13:50,880
configuration files they work in a

00:13:48,750 --> 00:13:54,540
different way so you can even get your

00:13:50,880 --> 00:13:56,700
registry set up properly and hold your

00:13:54,540 --> 00:13:59,610
application running so regardless

00:13:56,700 --> 00:14:01,290
whether you're Linux UNIX or Windows the

00:13:59,610 --> 00:14:03,090
tool applies for all of them and that's

00:14:01,290 --> 00:14:06,000
the same for all the other open source

00:14:03,090 --> 00:14:11,340
configuration tools all of them support

00:14:06,000 --> 00:14:14,400
the major platforms so that's from a

00:14:11,340 --> 00:14:16,980
perspective of the application itself if

00:14:14,400 --> 00:14:18,180
you have a normal application then you

00:14:16,980 --> 00:14:20,660
will have your application or

00:14:18,180 --> 00:14:23,550
configuration and your data separated

00:14:20,660 --> 00:14:28,200
I'm giving here a few examples of data

00:14:23,550 --> 00:14:29,640
from Postgres MySQL so this one is

00:14:28,200 --> 00:14:33,060
opposed to list so you basically just

00:14:29,640 --> 00:14:37,440
dump your data of your specific file of

00:14:33,060 --> 00:14:41,070
your specific database to a file the the

00:14:37,440 --> 00:14:43,310
diffing is what we use to actually get

00:14:41,070 --> 00:14:46,140
the extract to know what has changed

00:14:43,310 --> 00:14:48,540
that will be used in the automation

00:14:46,140 --> 00:14:50,640
tools for testing purpose so we can

00:14:48,540 --> 00:14:52,770
actually see let's say if it is a simple

00:14:50,640 --> 00:14:56,100
invoicing application you know that you

00:14:52,770 --> 00:14:57,660
always get new sequences of numbers so

00:14:56,100 --> 00:14:59,190
there's some logic you need to apply in

00:14:57,660 --> 00:15:01,320
this and you need to know something of

00:14:59,190 --> 00:15:04,440
your application also to be able to do

00:15:01,320 --> 00:15:07,310
this and then we compress it because it

00:15:04,440 --> 00:15:10,350
saves us a little bit on storage

00:15:07,310 --> 00:15:14,310
similarly we we do the same for the

00:15:10,350 --> 00:15:17,100
MySQL and Friends so MariaDB Percona

00:15:14,310 --> 00:15:19,830
basically all the same we do the dump we

00:15:17,100 --> 00:15:25,830
again do the diff and we compress it and

00:15:19,830 --> 00:15:29,910
store it if you have a Microsoft sequel

00:15:25,830 --> 00:15:32,930
server you can do exactly the same you

00:15:29,910 --> 00:15:36,030
can skip this and get it automatically

00:15:32,930 --> 00:15:38,400
backed up to a specific place that can

00:15:36,030 --> 00:15:40,650
be a shared storage that can be a local

00:15:38,400 --> 00:15:43,170
space which you right away that can be

00:15:40,650 --> 00:15:45,120
even somewhere by barrios puts that on a

00:15:43,170 --> 00:15:47,480
tape or whatever you want to do with

00:15:45,120 --> 00:15:47,480
that data

00:15:48,960 --> 00:15:54,990
some of the other applications I know

00:15:51,000 --> 00:15:58,950
are mostly good based applications so if

00:15:54,990 --> 00:16:01,800
you run your own get installation then

00:15:58,950 --> 00:16:04,320
you can use gobs backup or get e or get

00:16:01,800 --> 00:16:09,350
lamp and will actually create a zip file

00:16:04,320 --> 00:16:09,350
with all the repository data the

00:16:09,560 --> 00:16:16,200
database application and all its

00:16:13,260 --> 00:16:18,900
configuration in that one zip file which

00:16:16,200 --> 00:16:20,700
means that if you run now GOx restore it

00:16:18,900 --> 00:16:23,760
will actually restore everything to that

00:16:20,700 --> 00:16:27,500
point of the backup including all data

00:16:23,760 --> 00:16:30,240
all configuration all databases and

00:16:27,500 --> 00:16:32,190
there there will be other applications

00:16:30,240 --> 00:16:34,410
that can do this also most of the newer

00:16:32,190 --> 00:16:38,700
applications typically want to create a

00:16:34,410 --> 00:16:41,550
backup solution that is more compact and

00:16:38,700 --> 00:16:44,460
that is that gives the user the ability

00:16:41,550 --> 00:16:46,050
to backup without having to understand

00:16:44,460 --> 00:16:51,690
each of the sub components of an

00:16:46,050 --> 00:16:55,290
application if you're using files yeah

00:16:51,690 --> 00:16:57,150
you can do our sync you can our sync it

00:16:55,290 --> 00:17:00,540
there are other tools which are also

00:16:57,150 --> 00:17:02,010
quite popular but we still use arcing

00:17:00,540 --> 00:17:05,130
because it's it's quite easy and

00:17:02,010 --> 00:17:07,980
convenient and it gives us the ability

00:17:05,130 --> 00:17:10,560
to send this over the Internet in a

00:17:07,980 --> 00:17:11,900
secure fashion because it uses SSH by

00:17:10,560 --> 00:17:16,740
default we don't need to worry about

00:17:11,900 --> 00:17:22,800
encryption or setting up TLS everything

00:17:16,740 --> 00:17:25,080
is done out of the box now we have

00:17:22,800 --> 00:17:26,700
created all these backups and we would

00:17:25,080 --> 00:17:30,360
like to know that the backup is actually

00:17:26,700 --> 00:17:34,620
done properly and that is the part which

00:17:30,360 --> 00:17:36,900
is more complicated so there is no one

00:17:34,620 --> 00:17:39,870
solution for this you need to know your

00:17:36,900 --> 00:17:42,030
application you need to know what you're

00:17:39,870 --> 00:17:49,500
doing which makes it much more

00:17:42,030 --> 00:17:51,810
complicated the the thing that we have

00:17:49,500 --> 00:17:54,330
now been doing a lot for customers is

00:17:51,810 --> 00:17:56,280
creating virtual environments where the

00:17:54,330 --> 00:17:58,350
customer can go and test it so you

00:17:56,280 --> 00:17:59,640
create the server application the client

00:17:58,350 --> 00:18:03,000
application and you can actually

00:17:59,640 --> 00:18:05,250
test that data from yesterday or from a

00:18:03,000 --> 00:18:08,940
week ago and actually even see what has

00:18:05,250 --> 00:18:10,890
changed we are trying to automate that

00:18:08,940 --> 00:18:13,530
to create that in a pipeline where the

00:18:10,890 --> 00:18:15,740
automation tool would actually know what

00:18:13,530 --> 00:18:18,000
data has changed and how it has changed

00:18:15,740 --> 00:18:20,910
for that you need to understand the data

00:18:18,000 --> 00:18:23,820
itself which is why there is no one

00:18:20,910 --> 00:18:25,710
solution for this if you are having like

00:18:23,820 --> 00:18:26,070
I said in an inviting application it's

00:18:25,710 --> 00:18:27,809
easy

00:18:26,070 --> 00:18:31,530
you always know that your sequence

00:18:27,809 --> 00:18:34,320
numbers will go up if you have a price

00:18:31,530 --> 00:18:35,760
calculation then well you don't know

00:18:34,320 --> 00:18:40,410
what the price yesterday was or how you

00:18:35,760 --> 00:18:42,270
can verify that if you're backing up GPS

00:18:40,410 --> 00:18:44,790
locations it becomes even more

00:18:42,270 --> 00:18:47,340
complicated because if tomorrow this GPS

00:18:44,790 --> 00:18:50,190
module goes out of country how can you

00:18:47,340 --> 00:18:53,610
verify that so knowing the application

00:18:50,190 --> 00:18:56,640
is very important creating this type of

00:18:53,610 --> 00:18:59,540
isolated environments gives the user the

00:18:56,640 --> 00:19:06,360
ability to log in and to actually verify

00:18:59,540 --> 00:19:09,240
manually that it's not 100% but it works

00:19:06,360 --> 00:19:12,150
and it gives them a feeling of what it

00:19:09,240 --> 00:19:15,150
would be if we would restore it without

00:19:12,150 --> 00:19:20,490
having to invest too much into new metal

00:19:15,150 --> 00:19:22,860
or new setups so for the invoicing

00:19:20,490 --> 00:19:25,830
program what we typically do is we we

00:19:22,860 --> 00:19:27,480
select all the sequences and we check

00:19:25,830 --> 00:19:30,750
whether there are any sequences missing

00:19:27,480 --> 00:19:32,850
so we know that from for for most of

00:19:30,750 --> 00:19:34,890
these legal requirements the numbering

00:19:32,850 --> 00:19:38,640
has to be sequential so it has to go

00:19:34,890 --> 00:19:40,110
from one to let's say a thousand and if

00:19:38,640 --> 00:19:42,870
there's any number missing then there's

00:19:40,110 --> 00:19:45,809
something gone wrong these are course

00:19:42,870 --> 00:19:47,520
simple examples like I said you need to

00:19:45,809 --> 00:19:49,950
know that your application to understand

00:19:47,520 --> 00:19:55,320
what the the thing is you're trying to

00:19:49,950 --> 00:19:58,230
achieve and what you want to do for

00:19:55,320 --> 00:20:01,169
mariadb cluster we typically just do a

00:19:58,230 --> 00:20:02,790
restore to a different database name and

00:20:01,169 --> 00:20:06,030
then we can actually compare the two

00:20:02,790 --> 00:20:09,990
databases running selects or whatever

00:20:06,030 --> 00:20:12,000
the internal data is you can actually

00:20:09,990 --> 00:20:14,310
see if the products are still there you

00:20:12,000 --> 00:20:16,680
can actually see if the data is

00:20:14,310 --> 00:20:18,980
again an understanding of the data is

00:20:16,680 --> 00:20:21,150
quite important to be able to do this

00:20:18,980 --> 00:20:26,310
which makes it a little bit more

00:20:21,150 --> 00:20:29,330
complicated which shared files we

00:20:26,310 --> 00:20:32,040
typically do checksum verifications

00:20:29,330 --> 00:20:35,100
which is good if you have let's say like

00:20:32,040 --> 00:20:36,690
letters typically people write a letter

00:20:35,100 --> 00:20:40,760
in a word document you can do

00:20:36,690 --> 00:20:43,650
checksumming if they don't edit the

00:20:40,760 --> 00:20:45,630
letter and only create new ones we can

00:20:43,650 --> 00:20:49,170
always keep this checksum and valid

00:20:45,630 --> 00:20:52,080
about validate against that we could do

00:20:49,170 --> 00:20:54,390
content checking so we have a well I

00:20:52,080 --> 00:20:59,340
have a customer which does everything in

00:20:54,390 --> 00:21:02,220
Excel they actually have a specific

00:20:59,340 --> 00:21:04,050
logic in Excel so there is a Python

00:21:02,220 --> 00:21:06,180
module that we call which actually

00:21:04,050 --> 00:21:08,100
verifies that the data was set properly

00:21:06,180 --> 00:21:11,370
based on the input that the customer

00:21:08,100 --> 00:21:12,990
gave and checks every day whether the

00:21:11,370 --> 00:21:14,760
backup was done properly if it's not

00:21:12,990 --> 00:21:19,550
done properly he gets an email and then

00:21:14,760 --> 00:21:22,740
he can check that timestamp verification

00:21:19,550 --> 00:21:27,140
is is another option if you have no

00:21:22,740 --> 00:21:30,630
other way to verify and yeah human eyes

00:21:27,140 --> 00:21:33,510
typically telling an end user to go and

00:21:30,630 --> 00:21:35,250
verify data is maybe the first one or

00:21:33,510 --> 00:21:37,560
two days he will do that and after that

00:21:35,250 --> 00:21:39,060
he will stop doing it

00:21:37,560 --> 00:21:41,550
he will presume that it's done

00:21:39,060 --> 00:21:43,620
automatically because he got a green

00:21:41,550 --> 00:21:46,280
sign in his monitoring tool that backup

00:21:43,620 --> 00:21:50,730
was done but you don't know the content

00:21:46,280 --> 00:21:52,760
and also sometimes users don't know the

00:21:50,730 --> 00:21:55,980
content that they need to verify

00:21:52,760 --> 00:21:57,630
typically if we ask initially when when

00:21:55,980 --> 00:21:59,370
we are checking backups we go and ask

00:21:57,630 --> 00:22:01,530
customers what did you do yesterday

00:21:59,370 --> 00:22:04,050
evening last so I can verify that the

00:22:01,530 --> 00:22:06,930
last entry whatever you did was what

00:22:04,050 --> 00:22:08,760
what is in the backup most of them will

00:22:06,930 --> 00:22:11,160
look at you as if you're asking some

00:22:08,760 --> 00:22:12,930
alien question because they don't

00:22:11,160 --> 00:22:14,210
remember what the last thing they did

00:22:12,930 --> 00:22:16,740
was yesterday

00:22:14,210 --> 00:22:18,420
which makes it also difficult for us to

00:22:16,740 --> 00:22:21,680
verify that this data is done actually

00:22:18,420 --> 00:22:21,680
quite correctly

00:22:24,090 --> 00:22:30,120
and yes do not trust your end user and

00:22:27,620 --> 00:22:32,850
that goes both from an end-user

00:22:30,120 --> 00:22:36,990
perspective I come from operations I

00:22:32,850 --> 00:22:39,390
don't trust the developers also and and

00:22:36,990 --> 00:22:41,460
I see people laughing but I've had this

00:22:39,390 --> 00:22:43,890
happen that's why I wants to give the

00:22:41,460 --> 00:22:46,640
presentation we have an external company

00:22:43,890 --> 00:22:50,370
which supplies a bookkeeping software

00:22:46,640 --> 00:22:52,350
the end user in perspective ask them

00:22:50,370 --> 00:22:55,350
officially by mail how do we need to

00:22:52,350 --> 00:22:58,860
back this up they gave a specific method

00:22:55,350 --> 00:23:02,040
of backing up we followed their

00:22:58,860 --> 00:23:05,370
instructions I wrote our script based on

00:23:02,040 --> 00:23:08,990
that luckily we were using also rear

00:23:05,370 --> 00:23:12,300
there as a disaster recovery their

00:23:08,990 --> 00:23:14,100
backup could not be restored when we

00:23:12,300 --> 00:23:15,300
called them and told them here is the

00:23:14,100 --> 00:23:17,730
backup please do it

00:23:15,300 --> 00:23:19,530
they were not able to do that so the

00:23:17,730 --> 00:23:22,170
customer lost one day of work because

00:23:19,530 --> 00:23:24,990
the DRP only runs once a day not every

00:23:22,170 --> 00:23:27,780
hour most of these data dumps we do

00:23:24,990 --> 00:23:31,910
every hour so you can lose up to 59

00:23:27,780 --> 00:23:34,380
minutes but if we hadn't done the DRP

00:23:31,910 --> 00:23:36,960
exercise the customer would have lost

00:23:34,380 --> 00:23:39,050
much more so trusting end users and

00:23:36,960 --> 00:23:41,880
developers is sometimes very risky

00:23:39,050 --> 00:23:45,600
because typically the operations guys

00:23:41,880 --> 00:23:47,760
get blamed which is one of the reasons

00:23:45,600 --> 00:23:50,340
why I also showed the VM snapshotting

00:23:47,760 --> 00:23:53,070
it's it's very cumbersome and you're not

00:23:50,340 --> 00:23:54,990
going to keep ten days of backup of that

00:23:53,070 --> 00:23:57,750
but it gives you the ability to go to

00:23:54,990 --> 00:24:01,200
yesterday state and to get something at

00:23:57,750 --> 00:24:03,060
least from your backup solution and I

00:24:01,200 --> 00:24:06,690
know barrios can do many of these things

00:24:03,060 --> 00:24:10,590
also but it will typically backup data

00:24:06,690 --> 00:24:12,390
or or applications if you need really

00:24:10,590 --> 00:24:14,160
the complete set

00:24:12,390 --> 00:24:16,440
there are only very limited tools that

00:24:14,160 --> 00:24:18,530
can actually do that and guarantee the

00:24:16,440 --> 00:24:26,070
state that it was in before and

00:24:18,530 --> 00:24:29,070
guarantee consistency yeah

00:24:26,070 --> 00:24:31,200
automate your backup solution I don't

00:24:29,070 --> 00:24:33,960
think I need to tell you that but also

00:24:31,200 --> 00:24:36,810
try to automate your restore process try

00:24:33,960 --> 00:24:37,830
to automate the restoring of data try to

00:24:36,810 --> 00:24:40,980
test that

00:24:37,830 --> 00:24:44,370
and to verify that those restoring

00:24:40,980 --> 00:24:45,750
processes actually work like I said

00:24:44,370 --> 00:24:47,429
there is no one solution because you

00:24:45,750 --> 00:24:49,169
need to know the content of your data

00:24:47,429 --> 00:24:52,190
and that makes it a little bit more

00:24:49,169 --> 00:24:57,330
complicated to to give one solution for

00:24:52,190 --> 00:24:59,460
that data is different if it's database

00:24:57,330 --> 00:25:01,049
dumps it's it's a little bit easier even

00:24:59,460 --> 00:25:03,059
then we need to know the content of the

00:25:01,049 --> 00:25:05,399
data which given that we are not the

00:25:03,059 --> 00:25:08,720
application developers we don't always

00:25:05,399 --> 00:25:08,720
know all these details

00:25:17,580 --> 00:25:23,429
yeah I don't know there's time left

00:25:21,029 --> 00:25:24,119
yes time left you're finished okay

00:25:23,429 --> 00:25:30,960
thanks

00:25:24,119 --> 00:25:33,090
are there any questions yes hey you've

00:25:30,960 --> 00:25:34,799
got an idea how to test such kind of

00:25:33,090 --> 00:25:37,049
multi server environments and in a

00:25:34,799 --> 00:25:38,639
special test environment let's say you

00:25:37,049 --> 00:25:40,799
got a database server an application

00:25:38,639 --> 00:25:43,320
server and let's say front office PC or

00:25:40,799 --> 00:25:44,909
whatever each of them has got different

00:25:43,320 --> 00:25:49,190
IP address in the testing environment

00:25:44,909 --> 00:25:52,109
and also a different server key or

00:25:49,190 --> 00:25:54,480
certificate is there any way to do this

00:25:52,109 --> 00:25:57,659
automatically a role so what what I've

00:25:54,480 --> 00:26:00,029
now done and we have this now for one

00:25:57,659 --> 00:26:02,309
customer only for the moment where we

00:26:00,029 --> 00:26:04,340
are testing this is exactly the setup

00:26:02,309 --> 00:26:06,720
like you described you have an end-user

00:26:04,340 --> 00:26:08,639
client you have an application server

00:26:06,720 --> 00:26:11,190
and a database server and we have

00:26:08,639 --> 00:26:13,980
virtualized that in an isolated instance

00:26:11,190 --> 00:26:17,429
where the customer can log in as if he's

00:26:13,980 --> 00:26:20,820
on an client and actually see all that

00:26:17,429 --> 00:26:23,940
data and because we are doing a VM

00:26:20,820 --> 00:26:26,100
snapshot we can actually do the VM

00:26:23,940 --> 00:26:29,570
snapshot one time to create this

00:26:26,100 --> 00:26:33,509
instance and then dumb the database

00:26:29,570 --> 00:26:35,340
every hour and dump the application

00:26:33,509 --> 00:26:37,859
sessions or any statefulness that you

00:26:35,340 --> 00:26:40,080
need also every hour so you can actually

00:26:37,859 --> 00:26:42,840
go back an hour or even two hours or

00:26:40,080 --> 00:26:44,129
three hours because you can that part of

00:26:42,840 --> 00:26:46,259
the interface is not yet working

00:26:44,129 --> 00:26:47,730
properly but we I would like to have it

00:26:46,259 --> 00:26:50,429
that you could actually say I want to go

00:26:47,730 --> 00:26:52,769
to the state of two hours ago and verify

00:26:50,429 --> 00:26:55,320
that for the moment we can only show one

00:26:52,769 --> 00:26:58,470
state at a time we don't have a selector

00:26:55,320 --> 00:27:00,149
yet but that's the instance that I'm

00:26:58,470 --> 00:27:04,320
trying to build so that you can actually

00:27:00,149 --> 00:27:06,600
have this verification it's more or less

00:27:04,320 --> 00:27:09,029
automatic except the client verification

00:27:06,600 --> 00:27:10,529
the problem with the client verification

00:27:09,029 --> 00:27:12,330
is you need to know what data you need

00:27:10,529 --> 00:27:13,919
to verify if it's let's say like an

00:27:12,330 --> 00:27:17,639
application server and you want to know

00:27:13,919 --> 00:27:19,889
the what what I've tried to do is if

00:27:17,639 --> 00:27:21,720
it's a web server you typically can put

00:27:19,889 --> 00:27:23,489
the version at the bottom and then you

00:27:21,720 --> 00:27:25,889
can have some call script which actually

00:27:23,489 --> 00:27:28,649
detects the version or detects whether

00:27:25,889 --> 00:27:30,119
certain entries are there but then again

00:27:28,649 --> 00:27:32,380
you need to know the data you need to

00:27:30,119 --> 00:27:35,230
know the application

00:27:32,380 --> 00:27:38,139
for the moment we are allowing end-users

00:27:35,230 --> 00:27:40,269
to login and to verify that okay I need

00:27:38,139 --> 00:27:43,990
to have my quarterly reporting was my

00:27:40,269 --> 00:27:46,539
quarterly reporting backed up or not I'm

00:27:43,990 --> 00:27:48,340
just worrying about about the the the

00:27:46,539 --> 00:27:49,960
initial set up of the test environment

00:27:48,340 --> 00:27:52,240
because I've got house keys different

00:27:49,960 --> 00:27:54,580
and stuff like that just to get it

00:27:52,240 --> 00:27:56,500
working initially you just take a

00:27:54,580 --> 00:28:00,580
snapshot and you create an isolated

00:27:56,500 --> 00:28:02,830
Network and because it's isolated in its

00:28:00,580 --> 00:28:05,549
instance it can actually have the same

00:28:02,830 --> 00:28:06,700
IP range same hostname same everything

00:28:05,549 --> 00:28:10,480
okay

00:28:06,700 --> 00:28:11,799
so we basically copy the existing

00:28:10,480 --> 00:28:13,090
infrastructure to a virtual

00:28:11,799 --> 00:28:15,190
infrastructure which is completely

00:28:13,090 --> 00:28:18,399
isolated and segregated from the

00:28:15,190 --> 00:28:20,549
production network but because it looks

00:28:18,399 --> 00:28:22,299
exactly the same and because it has no

00:28:20,549 --> 00:28:24,250
connectivity with the other ones it

00:28:22,299 --> 00:28:27,340
doesn't conflict in IP ranges or host

00:28:24,250 --> 00:28:30,460
names and it allows you to copy the data

00:28:27,340 --> 00:28:32,049
also at any time because if you change

00:28:30,460 --> 00:28:33,909
IP s you might have to change the

00:28:32,049 --> 00:28:35,919
configuration then you need again an

00:28:33,909 --> 00:28:39,460
external tool to do that given that it's

00:28:35,919 --> 00:28:41,320
a complete replica it's basically the

00:28:39,460 --> 00:28:42,730
same but how do you restore the

00:28:41,320 --> 00:28:45,730
information in the data into the

00:28:42,730 --> 00:28:47,710
isolated environment I mean it's the

00:28:45,730 --> 00:28:49,419
same IP address but without any access

00:28:47,710 --> 00:28:51,399
from the outside so how do you get your

00:28:49,419 --> 00:28:53,950
backup system restore your data within

00:28:51,399 --> 00:28:54,909
this virtual environment you do that

00:28:53,950 --> 00:28:58,299
through the hypervisor

00:28:54,909 --> 00:29:00,970
so the hypervisor so I can only tell you

00:28:58,299 --> 00:29:04,210
from a KVM point of view in KVM you can

00:29:00,970 --> 00:29:07,299
create a lipfird Network and isolated

00:29:04,210 --> 00:29:09,429
from the outside Network which means

00:29:07,299 --> 00:29:14,049
that the hypervisor still can copy data

00:29:09,429 --> 00:29:16,120
into it but the the application server

00:29:14,049 --> 00:29:19,419
sees only that database over in its

00:29:16,120 --> 00:29:21,309
verge in its isolated Network country so

00:29:19,419 --> 00:29:23,620
that's how you create it it's it's a

00:29:21,309 --> 00:29:25,720
little bit complicated if you want I can

00:29:23,620 --> 00:29:27,279
draw it out afterwards you if you see it

00:29:25,720 --> 00:29:34,049
visually you'll understand it better I

00:29:27,279 --> 00:29:34,049
think any other questions

00:29:37,600 --> 00:29:43,539
just one small question about the hit

00:29:39,999 --> 00:29:45,639
lab wreck stuff what what did you mean

00:29:43,539 --> 00:29:49,450
with the with these kind of tools to

00:29:45,639 --> 00:29:51,309
back up you mean with the these ones

00:29:49,450 --> 00:29:53,769
yeah indeed

00:29:51,309 --> 00:29:56,649
so these are tools that the application

00:29:53,769 --> 00:29:58,419
provides which is basically so I know

00:29:56,649 --> 00:30:00,490
the ones of cogs by heart

00:29:58,419 --> 00:30:03,840
they're basically they copy the

00:30:00,490 --> 00:30:06,970
repository in a zip file they add the

00:30:03,840 --> 00:30:12,029
data dump of the Postgres or the mysql

00:30:06,970 --> 00:30:16,289
that you're using in they don't use the

00:30:12,029 --> 00:30:19,600
the typical MySQL or PostgreSQL

00:30:16,289 --> 00:30:22,059
descriptors so they do data definition

00:30:19,600 --> 00:30:23,909
descriptors and then the change data

00:30:22,059 --> 00:30:26,379
they keep so that they can actually

00:30:23,909 --> 00:30:28,230
compress it a little bit more than

00:30:26,379 --> 00:30:30,820
typically what you do with a data dump

00:30:28,230 --> 00:30:31,389
and that is one zip file that gets

00:30:30,820 --> 00:30:34,899
created

00:30:31,389 --> 00:30:38,470
even your GOx config file gets put into

00:30:34,899 --> 00:30:40,960
that so if you install dogs which is a

00:30:38,470 --> 00:30:43,720
go application so it's typically only

00:30:40,960 --> 00:30:45,789
one binary you can actually just take

00:30:43,720 --> 00:30:49,690
the binary do a restore and will put

00:30:45,789 --> 00:30:51,700
everything in the right place again for

00:30:49,690 --> 00:30:55,090
gitlab that's nearly the same thing the

00:30:51,700 --> 00:30:57,879
only difference there is you need to

00:30:55,090 --> 00:31:06,279
have omnibus before you can do the

00:30:57,879 --> 00:31:10,419
restore that's all okay there's still

00:31:06,279 --> 00:31:15,509
questions left so then I have one so

00:31:10,419 --> 00:31:18,909
what do you use to automate the testing

00:31:15,509 --> 00:31:23,820
which which tool are you using for so

00:31:18,909 --> 00:31:28,990
you made two tests we are I'm using MQTT

00:31:23,820 --> 00:31:32,669
so I'm so basically MQTT sends a message

00:31:28,990 --> 00:31:35,679
on the bus and then whoever is the

00:31:32,669 --> 00:31:39,369
receiver receives it and execute a

00:31:35,679 --> 00:31:44,379
specific command based on the MQTT

00:31:39,369 --> 00:31:48,340
message that was sent it's typically you

00:31:44,379 --> 00:31:50,740
would use Jenkins are built bots I use

00:31:48,340 --> 00:31:52,420
this because it's much smaller it allows

00:31:50,740 --> 00:31:54,730
me to have it over multiple data centers

00:31:52,420 --> 00:31:57,550
it allows me also to connect to my

00:31:54,730 --> 00:31:59,740
clients data center with Jenkins you

00:31:57,550 --> 00:32:02,590
need to have SSH then to secure all of

00:31:59,740 --> 00:32:05,429
that MQTT has TLS built-in so it's a

00:32:02,590 --> 00:32:09,940
little bit easier okay sounds good

00:32:05,429 --> 00:32:12,840
questions left ok then thanks Josh for

00:32:09,940 --> 00:32:12,840
this talk so

00:32:12,970 --> 00:32:16,390

YouTube URL: https://www.youtube.com/watch?v=AQFiwHTRAQk


