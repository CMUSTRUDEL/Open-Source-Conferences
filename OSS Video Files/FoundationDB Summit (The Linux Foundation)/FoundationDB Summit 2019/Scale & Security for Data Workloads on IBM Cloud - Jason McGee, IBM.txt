Title: Scale & Security for Data Workloads on IBM Cloud - Jason McGee, IBM
Publication date: 2019-11-25
Playlist: FoundationDB Summit 2019
Description: 
	Scale & Security for Data Workloads on IBM Cloud - Jason McGee, IBM 

Every containerized app needs scalable and secure data. In this talk, you’ll hear about our container journey. When IBM began moving workloads to Kubernetes, scale and security were our foremost necessities. Today, we manage 16,000+ clusters on our public cloud. And those clusters are driving some immense workloads, such as The Weather Company's 25 billion forecasts a day. Kubernetes clusters provide multiple tools to handle elasticity: worker pools, pod autoscaling, and Knative serverless compute, to name a few.  But scale is only part of our story. Financial Services and Healthcare companies also trust IBM Cloud with sensitive persistent data. These companies leverage our automated expertise of cloud services for patching, vulnerability detection, network isolation, and encryption, so they're free to focus on apps.  With years of running enterprise workloads in our public cloud, open-source tools like FoundationDB and OpenShift are the kind of secure and scalable technologies our users count on.
Captions: 
	00:00:00,030 --> 00:00:05,370
all right better you can hear me all

00:00:03,090 --> 00:00:08,099
right hi I'm Jason McGee I'm the CTO for

00:00:05,370 --> 00:00:10,110
Cobb platform at IBM and I think I'm the

00:00:08,099 --> 00:00:12,179
I'm the only not database guy and the

00:00:10,110 --> 00:00:14,759
speaking agenda today so think of this

00:00:12,179 --> 00:00:17,220
it's like your seven minute break from

00:00:14,759 --> 00:00:20,789
databases what I thought I'd actually

00:00:17,220 --> 00:00:21,900
talk about is where a cube con so you're

00:00:20,789 --> 00:00:23,580
not allowed to go to anything without

00:00:21,900 --> 00:00:25,140
having kubernetes come up at some point

00:00:23,580 --> 00:00:27,510
during the conversation so I'm going to

00:00:25,140 --> 00:00:30,269
talk about kubernetes and the role that

00:00:27,510 --> 00:00:32,309
it plays in running data workloads at

00:00:30,269 --> 00:00:36,450
IBM and why I think it's a good platform

00:00:32,309 --> 00:00:39,809
for the compute side of building hosted

00:00:36,450 --> 00:00:41,460
data systems just by way background as a

00:00:39,809 --> 00:00:43,440
public cloud provider at IBM we have a

00:00:41,460 --> 00:00:46,200
large catalog of hosted database

00:00:43,440 --> 00:00:47,730
services Adam spoke this morning about

00:00:46,200 --> 00:00:49,289
the work we're doing around CouchDB

00:00:47,730 --> 00:00:51,660
which is the underpinnings for our cloud

00:00:49,289 --> 00:00:53,760
and service and it's moved a foundation

00:00:51,660 --> 00:00:56,660
DB but we also have a rich catalog of

00:00:53,760 --> 00:00:59,430
other as a service database technologies

00:00:56,660 --> 00:01:00,480
that we make available to clients to run

00:00:59,430 --> 00:01:04,199
on our cloud and build their

00:01:00,480 --> 00:01:05,460
applications now we got Kubb con and

00:01:04,199 --> 00:01:07,080
part of the reason there's I think

00:01:05,460 --> 00:01:10,880
13,000 people here this week is this

00:01:07,080 --> 00:01:13,080
which is that over the last four years

00:01:10,880 --> 00:01:15,180
kubernetes has emerged as the dominant

00:01:13,080 --> 00:01:20,000
compute platform for building workloads

00:01:15,180 --> 00:01:22,530
in IBM we made a decision back in 2016

00:01:20,000 --> 00:01:24,750
to kind of pivot our entire cloud

00:01:22,530 --> 00:01:27,990
strategy to leverage kubernetes as our

00:01:24,750 --> 00:01:29,970
core platform we started to build a as a

00:01:27,990 --> 00:01:32,159
service kubernetes offering as part of

00:01:29,970 --> 00:01:34,799
our cloud which we released in the

00:01:32,159 --> 00:01:38,340
middle of 18 sorry in the middle of 17

00:01:34,799 --> 00:01:39,689
2017 and then in 2018 we made I think a

00:01:38,340 --> 00:01:41,850
somewhat crazy decision that we were

00:01:39,689 --> 00:01:44,220
going to move all of our cloud services

00:01:41,850 --> 00:01:45,659
onto kubernetes meaning we're going to

00:01:44,220 --> 00:01:46,920
take that same service that we make

00:01:45,659 --> 00:01:49,079
available for clients and we're going to

00:01:46,920 --> 00:01:50,610
use it as the hosting platform for

00:01:49,079 --> 00:01:52,680
running all of the rest of our cloud

00:01:50,610 --> 00:01:54,689
services including all of our data

00:01:52,680 --> 00:01:56,340
workloads and I think many people think

00:01:54,689 --> 00:01:58,320
of platforms like kubernetes as

00:01:56,340 --> 00:02:00,960
predominantly being for stateless

00:01:58,320 --> 00:02:03,060
systems for non data systems but we

00:02:00,960 --> 00:02:04,920
decided in 2017 we're going to move

00:02:03,060 --> 00:02:08,819
everything there and so we started a

00:02:04,920 --> 00:02:12,110
journey to move a lot of data databases

00:02:08,819 --> 00:02:13,650
and data back workloads onto kubernetes

00:02:12,110 --> 00:02:14,909
the service

00:02:13,650 --> 00:02:17,099
we run them on is something called IBM

00:02:14,909 --> 00:02:20,970
cloud kubernetes service it's a as a

00:02:17,099 --> 00:02:22,920
service hosted kubernetes platform it

00:02:20,970 --> 00:02:24,870
provides all of the infrastructure

00:02:22,920 --> 00:02:26,390
abstraction for the services that right

00:02:24,870 --> 00:02:29,400
on top it provides

00:02:26,390 --> 00:02:30,900
multi zone deployment capabilities you

00:02:29,400 --> 00:02:33,030
can kind of automatically get high

00:02:30,900 --> 00:02:34,620
availability within a region it sets up

00:02:33,030 --> 00:02:36,450
all the network and network routing it

00:02:34,620 --> 00:02:38,640
secures the workloads and kind of

00:02:36,450 --> 00:02:40,769
provides the core execution environment

00:02:38,640 --> 00:02:44,220
that we use to run everything and over

00:02:40,769 --> 00:02:47,159
the last two and a half years we've gone

00:02:44,220 --> 00:02:49,590
from nothing to running over 19,000

00:02:47,159 --> 00:02:51,569
kubernetes clusters and production that

00:02:49,590 --> 00:02:54,629
are running this vast array of workloads

00:02:51,569 --> 00:02:57,030
from simple stateless websites to AI

00:02:54,629 --> 00:02:59,459
machine learning environments to you

00:02:57,030 --> 00:03:00,930
know very large scale databases and so

00:02:59,459 --> 00:03:02,340
at this point if you looked at IBM cloud

00:03:00,930 --> 00:03:05,879
you'd see all these different kinds of

00:03:02,340 --> 00:03:08,639
workloads that run on kubernetes now why

00:03:05,879 --> 00:03:11,549
do you care let's zoom in for a second

00:03:08,639 --> 00:03:13,049
and just like a data workload so over

00:03:11,549 --> 00:03:16,170
the last couple of years we've gained

00:03:13,049 --> 00:03:18,449
all this experience on running Kafka for

00:03:16,170 --> 00:03:20,310
our event stream service at running a

00:03:18,449 --> 00:03:23,340
whole variety of open source database

00:03:20,310 --> 00:03:26,040
systems running our machine learning and

00:03:23,340 --> 00:03:28,859
Watson AI systems running our data

00:03:26,040 --> 00:03:31,199
warehousing systems all on top of this

00:03:28,859 --> 00:03:32,970
platform so I thought I'd spend just two

00:03:31,199 --> 00:03:35,069
minutes and kind of talk about what I

00:03:32,970 --> 00:03:36,329
think communities helps with when it

00:03:35,069 --> 00:03:38,639
comes to running data work codes like

00:03:36,329 --> 00:03:40,470
that and and some of the unique needs

00:03:38,639 --> 00:03:42,120
that data workloads had as the guy

00:03:40,470 --> 00:03:45,840
providing the compute infrastructure

00:03:42,120 --> 00:03:47,750
underneath the positive side I think is

00:03:45,840 --> 00:03:50,489
a few things I mean obviously kubernetes

00:03:47,750 --> 00:03:53,129
one of its key values is infrastructure

00:03:50,489 --> 00:03:55,099
abstraction that it isolates you from

00:03:53,129 --> 00:03:58,290
the physical infrastructure underneath

00:03:55,099 --> 00:04:00,419
allows us to more easily provision and

00:03:58,290 --> 00:04:02,370
leverage that infrastructure and

00:04:00,419 --> 00:04:04,549
therefore allows the data service teams

00:04:02,370 --> 00:04:06,569
to really focus on the database

00:04:04,549 --> 00:04:08,340
orchestration and management logic that

00:04:06,569 --> 00:04:09,750
control planes they're building and the

00:04:08,340 --> 00:04:11,849
core data management problems

00:04:09,750 --> 00:04:14,069
it helps automate availability and

00:04:11,849 --> 00:04:16,409
provides a model for failure recovery

00:04:14,069 --> 00:04:19,979
both within a single zone and across

00:04:16,409 --> 00:04:23,310
zones and provides a networking model to

00:04:19,979 --> 00:04:26,520
allow us to at scale distribute network

00:04:23,310 --> 00:04:27,370
traffic into those data systems and to

00:04:26,520 --> 00:04:30,430
recover from tile

00:04:27,370 --> 00:04:32,139
in componentry as those requests are

00:04:30,430 --> 00:04:33,850
routing through the system it also

00:04:32,139 --> 00:04:35,500
provides a common tool chain for the

00:04:33,850 --> 00:04:38,229
development teams to allow them to more

00:04:35,500 --> 00:04:41,229
quickly build and iterate on the data

00:04:38,229 --> 00:04:43,270
systems that they're they're creating it

00:04:41,229 --> 00:04:45,370
does a lot for us around security you

00:04:43,270 --> 00:04:47,650
know simple things like vulnerability

00:04:45,370 --> 00:04:49,570
scanning of images and ensuring that you

00:04:47,650 --> 00:04:52,300
can only update running production

00:04:49,570 --> 00:04:54,660
systems with good code that passes

00:04:52,300 --> 00:04:57,130
security audits and vulnerability scans

00:04:54,660 --> 00:04:58,750
baking that into the tool chains that

00:04:57,130 --> 00:04:59,919
people use so that the average developer

00:04:58,750 --> 00:05:02,410
doesn't have to spend their time

00:04:59,919 --> 00:05:04,449
thinking about those things and of

00:05:02,410 --> 00:05:06,190
course handle scaling both scaling

00:05:04,449 --> 00:05:08,680
within kubernetes and scaling of

00:05:06,190 --> 00:05:10,780
physical infrastructure underneath and

00:05:08,680 --> 00:05:12,220
that's an area where data workloads kind

00:05:10,780 --> 00:05:13,479
of depending on what kind of data base

00:05:12,220 --> 00:05:15,130
you're talking about deal with scaling

00:05:13,479 --> 00:05:17,380
differently and so we're having a

00:05:15,130 --> 00:05:19,690
variety of state management models and

00:05:17,380 --> 00:05:21,240
kubernetes and a variety of auto scaling

00:05:19,690 --> 00:05:24,130
approaches both vertical and horizontal

00:05:21,240 --> 00:05:26,110
and physical infrastructure scaling

00:05:24,130 --> 00:05:27,610
allow us to make the right trade-offs on

00:05:26,110 --> 00:05:30,820
how to apply resources to that

00:05:27,610 --> 00:05:32,860
environment operators is a new thing

00:05:30,820 --> 00:05:35,229
operators you can think of as a way to

00:05:32,860 --> 00:05:38,620
extend kubernetes itself with new api's

00:05:35,229 --> 00:05:40,060
that allow you to manage the software or

00:05:38,620 --> 00:05:42,490
system running inside of kubernetes and

00:05:40,060 --> 00:05:44,860
we've done a ton of work in our database

00:05:42,490 --> 00:05:47,710
teams building a set of operators to

00:05:44,860 --> 00:05:49,570
allow you to operate the life cycle of a

00:05:47,710 --> 00:05:51,490
variety of database systems running in

00:05:49,570 --> 00:05:53,139
that you can go to places like operator

00:05:51,490 --> 00:05:55,510
hub bio and get access to those

00:05:53,139 --> 00:05:57,099
operators and kind of have the control

00:05:55,510 --> 00:05:59,710
plane to manage a database system

00:05:57,099 --> 00:06:01,510
running inside of kubernetes and then of

00:05:59,710 --> 00:06:03,430
course it allowed us to put some common

00:06:01,510 --> 00:06:05,680
architecture in place across a variety

00:06:03,430 --> 00:06:07,539
of database systems so for example in

00:06:05,680 --> 00:06:09,250
our IBM cloud database service we're

00:06:07,539 --> 00:06:12,160
running well over 10,000 database

00:06:09,250 --> 00:06:14,110
instances all of them use the same kind

00:06:12,160 --> 00:06:16,090
of operations model the same execution

00:06:14,110 --> 00:06:18,280
the same core architecture whether it's

00:06:16,090 --> 00:06:21,370
running or Postgres or Redis or

00:06:18,280 --> 00:06:24,280
something else right now running data

00:06:21,370 --> 00:06:25,840
workloads isn't always the same of

00:06:24,280 --> 00:06:27,490
course as running stateless or codes and

00:06:25,840 --> 00:06:28,599
there were some unique needs I didn't

00:06:27,490 --> 00:06:30,550
pull out a lot of them but there were

00:06:28,599 --> 00:06:33,340
kind of three that stuck out to me one

00:06:30,550 --> 00:06:36,039
was a higher demand on vertical auto

00:06:33,340 --> 00:06:37,659
scaling for some database systems adding

00:06:36,039 --> 00:06:39,640
more CPU or memory into the running

00:06:37,659 --> 00:06:40,080
system is the easier approach to scaling

00:06:39,640 --> 00:06:42,449
and adding

00:06:40,080 --> 00:06:44,310
more instances and so kubernetes

00:06:42,449 --> 00:06:46,710
specially two years ago had a pretty

00:06:44,310 --> 00:06:49,379
nascent vertical auto scaling capability

00:06:46,710 --> 00:06:51,479
that we had to help mature and evolve to

00:06:49,379 --> 00:06:52,740
handle these kinds of workloads dynamic

00:06:51,479 --> 00:06:54,389
storage provisioning of course is really

00:06:52,740 --> 00:06:56,099
important and then some unique worker

00:06:54,389 --> 00:06:57,900
flavors like being able to run on bare

00:06:56,099 --> 00:06:59,789
metal servers and take hypervisors out

00:06:57,900 --> 00:07:02,699
of the mix to get the i/o agency out of

00:06:59,789 --> 00:07:03,689
the path being able to use GPUs in the

00:07:02,699 --> 00:07:06,060
case of a lot of machine learning

00:07:03,689 --> 00:07:07,830
learning workloads and then being able

00:07:06,060 --> 00:07:10,979
to have direct access to things like

00:07:07,830 --> 00:07:13,740
fast local SSDs those were capabilities

00:07:10,979 --> 00:07:15,270
that kubernetes was able to surface in a

00:07:13,740 --> 00:07:18,030
consistent way across the infrastructure

00:07:15,270 --> 00:07:20,610
to help run these data workloads so the

00:07:18,030 --> 00:07:22,259
moral of the story is one kubernetes is

00:07:20,610 --> 00:07:24,479
actually a proven platform for running

00:07:22,259 --> 00:07:25,620
data workloads we're doing we and many

00:07:24,479 --> 00:07:28,650
other people in the industry are doing

00:07:25,620 --> 00:07:31,529
this at scale with mission-critical

00:07:28,650 --> 00:07:33,180
production data systems and I think it's

00:07:31,529 --> 00:07:34,919
the perfect platform for a data service

00:07:33,180 --> 00:07:37,259
developer to use to allow them to focus

00:07:34,919 --> 00:07:39,180
on building the core database system and

00:07:37,259 --> 00:07:40,760
not the mechanics of running compute

00:07:39,180 --> 00:07:45,550
thank you very much

00:07:40,760 --> 00:07:45,550

YouTube URL: https://www.youtube.com/watch?v=Sm7b3GtjtpI


