Title: !!Con West 2020 - Lito Nicolai: ba-ding!
Publication date: 2020-03-23
Playlist: !!Con West 2020
Description: 
	Presented at !!Con West 2020: http://bangbangcon.com/west

This is a talk about what happens when you turn on a Nintendo Game Boy, see the logo scroll down the screen, and hear the *ba-ding!* sound. It’s about why it happens, and how we know what happens. It involves a clever and litigious company, trademark law, a microscope, nitric acid, and a very dedicated materials science student.

#bangbangcon #bangbangconwest #bangbangconwest2020
Captions: 
	00:00:26,900 --> 00:00:27,820
Well, hello!

00:00:27,980 --> 00:00:29,680
You all hear me all right?

00:00:29,820 --> 00:00:30,320
Okay.

00:00:30,520 --> 00:00:31,840
This is ba-ding!

00:00:31,849 --> 00:00:33,180
I am Lito.

00:00:33,180 --> 00:00:36,910
I go by litonico_ on Twitter, I work for Destroy All Software.

00:00:36,910 --> 00:00:39,110
I help run a conference called Deconstruct.

00:00:39,110 --> 00:00:42,730
If you like !!Con, you might like that one.

00:00:42,730 --> 00:00:44,460
So hope to see you all in Seattle.

00:00:44,460 --> 00:00:49,280
This is a story on what happens when you turn on a Game Boy.

00:00:49,280 --> 00:00:55,360
So this involves a clever and litigious company, trademark law, a microscope, nitric acid,

00:00:55,370 --> 00:01:00,490
and a very dedicated materials science student.

00:01:00,490 --> 00:01:01,490
This is a Game Boy.

00:01:01,490 --> 00:01:03,030
Have you all seen one of these before?

00:01:03,030 --> 00:01:04,030
They're a good time.

00:01:04,030 --> 00:01:05,030
Right?

00:01:05,030 --> 00:01:08,520
You can play Pokemon Red on them, and also Pokemon Blue, and also probably some other

00:01:08,520 --> 00:01:11,609
games.

00:01:11,609 --> 00:01:14,090
And when you turn a Game Boy on, this happens.

00:01:14,090 --> 00:01:15,899
I think we have audio, I think?

00:01:15,899 --> 00:01:16,899
We might.

00:01:16,899 --> 00:01:24,020
The Nintendo logo scrolls down the screen and when it hits the middle, it goes ba-ding.

00:01:24,020 --> 00:01:26,359
That's what this talk is about.

00:01:26,359 --> 00:01:27,380
So what is going on here?

00:01:27,380 --> 00:01:30,170
Like how does this process work?

00:01:30,170 --> 00:01:32,020
All of that happens in the boot ROM.

00:01:32,020 --> 00:01:36,820
Drawing the Nintendo logo on the screen, the scroll -- all of that happens in the bootrom

00:01:36,820 --> 00:01:41,460
which is read-only memory that lives inside the Game Boy's CPU.

00:01:41,460 --> 00:01:46,600
CPU does other things, like calculations, and that's what your game programs to run.

00:01:46,600 --> 00:01:49,130
So that thing up in the middle, the large chip, it says CPU on it.

00:01:49,130 --> 00:01:51,770
It's the CPU.

00:01:51,770 --> 00:01:56,009
Inside that, there is some read-only memory that is running when you turn on the game.

00:01:56,009 --> 00:02:02,840
The weird thing is the bootrom has a copy of the Nintendo logo and doesn't use it.

00:02:02,840 --> 00:02:05,740
Instead, it reads from the game.

00:02:05,740 --> 00:02:09,810
It issues a read to the game to get a copy of the Nintendo logo that it then draws on

00:02:09,810 --> 00:02:13,470
screen and scrolls down.

00:02:13,470 --> 00:02:16,799
So why is it like that?

00:02:16,799 --> 00:02:17,799
Well...

00:02:17,799 --> 00:02:20,900
Turns out this Nintendo logo is a registered trademark.

00:02:20,900 --> 00:02:24,189
You can tell, because it has a little R in the circle in the corner.

00:02:24,189 --> 00:02:29,061
And once the Nintendo logo hits the middle of the screen, the bootrom compares:

00:02:29,061 --> 00:02:33,349
Did you draw the correct Nintendo logo on the screen?

00:02:33,349 --> 00:02:38,079
So if you did not -- it doesn't even stop or halt using the correct instruction.

00:02:38,079 --> 00:02:39,400
It'll just loop forever.

00:02:39,400 --> 00:02:44,030
If you did draw the correct logo, your Game Boy will go on to play Pokemon Red after

00:02:44,030 --> 00:02:47,560
it's compared every pixel in that logo correctly.

00:02:47,560 --> 00:02:52,360
The reason you do that is so you have a copy of the Nintendo logo in your game, so if they

00:02:52,360 --> 00:02:56,490
didn't like your game they could sue you for trademark infringement.

00:02:56,490 --> 00:02:58,890
Which is a really really clever form of copy protection.

00:02:58,890 --> 00:03:01,700
They didn't need to give you a secret key or something.

00:03:01,700 --> 00:03:06,209
They say: Put the Nintendo logo in your game and if we hate this, we won't let you release

00:03:06,209 --> 00:03:08,480
the game.

00:03:08,480 --> 00:03:13,840
So that's clever and kind of icky, in a way.

00:03:13,840 --> 00:03:18,280
That's the kind of solution you come up with if you have a legal department.

00:03:18,280 --> 00:03:22,200
But... that's neat.

00:03:22,200 --> 00:03:24,240
But that's not the thing I would like to tell you about.

00:03:24,240 --> 00:03:29,519
The actual thing I would like to tell you about is: How did someone figure out what

00:03:29,519 --> 00:03:32,440
the boomrom was?

00:03:32,440 --> 00:03:33,519
Games are meant to be read from.

00:03:33,519 --> 00:03:37,450
You can take the game out of the Game Boy and put it in a thing that has the correct

00:03:37,450 --> 00:03:42,760
pins and issue some reads and it will tell you, all right, that's a 1, that's a 0, and

00:03:42,760 --> 00:03:45,129
you can get the whole Game Boy's ROM.

00:03:45,129 --> 00:03:48,610
But the bootrom exists inside the CPU.

00:03:48,610 --> 00:03:52,760
The CPU's inputs and outputs are not the bootrom’s inputs and outputs.

00:03:52,760 --> 00:03:55,250
So what is going on there?

00:03:55,250 --> 00:03:58,689
In general, not too many people cared.

00:03:58,689 --> 00:04:01,540
By 2005, this was a minor mystery.

00:04:01,540 --> 00:04:05,409
If you're writing an emulator, you're fine with the whole situation because you write

00:04:05,409 --> 00:04:07,269
your bootrom to jump right into the game.

00:04:07,269 --> 00:04:08,840
You don't need to scroll the Nintendo logo.

00:04:08,840 --> 00:04:14,409
Besides, it makes it less likely for you to get sued.

00:04:14,409 --> 00:04:19,180
The Game Boy by 2005 had become the Game Boy Color and then the Game Boy Advance and Game

00:04:19,180 --> 00:04:25,479
Boy Advance SP and Nintendo DS, and no one was paying attention until someone goes online

00:04:25,479 --> 00:04:32,850
by the name neviksti, who was a materials science student at the University of Illinois, Urbana Champain

00:04:32,850 --> 00:04:40,500
and got access in his materials science lab to a scanning electron microscope.

00:04:40,500 --> 00:04:44,000
He immediately thought: I know what I want to do with this.

00:04:44,000 --> 00:04:45,949
I want to look at video games.

00:04:45,949 --> 00:04:47,949
It's a great thought process.

00:04:47,949 --> 00:04:53,669
He first started with SuperNintendo chips and he needed to get the resin off the CPU

00:04:53,669 --> 00:04:55,740
because the silicon was encased with resin.

00:04:55,740 --> 00:05:00,139
He was going at it with a file, which he quickly learned it destroys the whole thing, not just

00:05:00,139 --> 00:05:01,560
the resin.

00:05:01,560 --> 00:05:04,870
So he asked a friend in the chemistry department.

00:05:04,870 --> 00:05:06,330
Could I get some acid?

00:05:06,330 --> 00:05:07,330
Some strong acid?

00:05:07,330 --> 00:05:12,970
In fact, he asked: Could I get some hydrofluoric acid to dissolve the chip in?

00:05:12,970 --> 00:05:17,180
Hydrofluoric acid is a thing that is so corrosive that if you get it on your skin, it will dissolve

00:05:17,180 --> 00:05:19,740
your bones.

00:05:19,740 --> 00:05:20,949
His friend told him...

00:05:20,949 --> 00:05:23,210
No sorry, absolutely not.

00:05:23,210 --> 00:05:26,699
in fact, the friend probably used stronger language than that, because chemists know to respect

00:05:26,699 --> 00:05:27,740
fluorinated compounds.

00:05:27,740 --> 00:05:32,380
But the chemist friend did give him nitric acid.

00:05:32,380 --> 00:05:34,889
Nitric acid is not great either.

00:05:34,889 --> 00:05:39,770
If you get it on your lab gloves as you're working, your gloves will catch on fire.

00:05:39,770 --> 00:05:45,680
So people tend to work without gloves.

00:05:45,680 --> 00:05:53,250
neviksti just took a sample vial of nitric acid out onto the university lawn on a sunny day in May

00:05:53,250 --> 00:05:58,530
put it in a pot of boiling water I guess just on a burner, and dropped a Game

00:05:58,530 --> 00:06:02,120
Boy chip, a Game Boy CPU, that someone had sent him.

00:06:02,120 --> 00:06:06,310
And the nitric acid reacts with the resin and makes a horrible smoke.

00:06:06,310 --> 00:06:08,080
Probably smelled awful.

00:06:08,080 --> 00:06:11,639
But he got a beautiful chip decapsulation out of that.

00:06:11,639 --> 00:06:12,639
This is the actual picture.

00:06:12,639 --> 00:06:15,539
It's still up online.

00:06:15,539 --> 00:06:22,110
This is a Game Boy CPU. neviksti helpfully labeled it with many question marks.

00:06:22,110 --> 00:06:29,919
The green things are logic units, processors, the red is SRAM, the yellow are question marks,

00:06:29,919 --> 00:06:33,160
and the blue, the blue is what we're interested in looking at.

00:06:33,160 --> 00:06:36,819
Which is the Game Boy's boot ROM itself.

00:06:36,819 --> 00:06:39,509
This is masked ROM.

00:06:39,509 --> 00:06:45,110
Masked ROM is, you start out with a grid of dots of solder, all of which represent 1s

00:06:45,110 --> 00:06:49,450
and you burn off the places you want to be 0s for the bits.

00:06:49,450 --> 00:06:53,920
You can make this quickly because you can make a mask of what you want to keep, so it

00:06:53,920 --> 00:06:57,919
was used in early electronics, often.

00:06:57,919 --> 00:06:59,120
It looks like this.

00:06:59,120 --> 00:07:04,610
And you can count out the bits by eye, if you happen to have a scanning electron microscope.

00:07:04,610 --> 00:07:06,979
So you can see you read it bottom to top, left to right.

00:07:06,979 --> 00:07:09,569
You can see the first bit at the very bottom is an empty space.

00:07:09,569 --> 00:07:10,569
That's a zero.

00:07:10,569 --> 00:07:12,990
And above that is a one.

00:07:12,990 --> 00:07:15,520
And it keeps going.

00:07:15,520 --> 00:07:17,560
I find this really hard to see.

00:07:17,560 --> 00:07:19,690
This one does not look like a one.

00:07:19,690 --> 00:07:23,000
It's like a shadow on the dot of solder that prevents you from seeing it.

00:07:23,000 --> 00:07:30,020
So neviksti did that by eye, carefully error checking, carefully going through, bead of

00:07:30,020 --> 00:07:35,569
solder by bead of solder, to read out all of the data on this chip.

00:07:35,569 --> 00:07:37,300
First of all, that's not a Z80 instruction.

00:07:37,300 --> 00:07:38,830
Game Boy Z80 CPU.

00:07:38,830 --> 00:07:40,479
Or, it’s not a sensical one.

00:07:40,479 --> 00:07:45,210
It's a load from a register that isn't initialized yet to another register that isn't initialized

00:07:45,210 --> 00:07:46,210
yet.

00:07:46,210 --> 00:07:47,860
So something is going on here.

00:07:47,860 --> 00:07:49,979
I was trying to figure out what the code was running.

00:07:49,979 --> 00:07:53,979
I was in fact trying to read this whole thing by eye.

00:07:53,979 --> 00:07:55,260
And you get out a bunch of garbage.

00:07:55,260 --> 00:07:59,270
It probably means that data is interleaved in some way.

00:07:59,270 --> 00:08:01,669
I spent a solid couple of days trying to figure out...

00:08:01,669 --> 00:08:03,129
Is it every other one?

00:08:03,129 --> 00:08:04,129
Every other row?

00:08:04,129 --> 00:08:09,069
Eventually I gave up and wrote to someone online: Luna, lunaSorcery on Twitter.

00:08:09,069 --> 00:08:12,229
Go follow her for good tweets about computers.

00:08:12,229 --> 00:08:13,909
And she figured it out within an hour.

00:08:13,909 --> 00:08:14,909
Wow.

00:08:14,909 --> 00:08:15,909
Good job.

00:08:15,909 --> 00:08:17,780
Stan Luna.

00:08:17,780 --> 00:08:20,479
Here's what Luna figured out.

00:08:20,479 --> 00:08:24,970
So we read this all -- the entire chip -- from bottom to top, left to right.

00:08:24,970 --> 00:08:26,200
And I'll just show you the data.

00:08:26,200 --> 00:08:27,500
Each block after each block.

00:08:27,500 --> 00:08:32,190
You can kind of see across the top there delineations there, which is one block of data.

00:08:32,190 --> 00:08:35,479
This whole thing is 256 bytes.

00:08:35,479 --> 00:08:37,010
Here's the first block.

00:08:37,010 --> 00:08:43,690
And Luna discovered that you read the top right bit of every other block, and then for

00:08:43,690 --> 00:08:46,850
the next byte, you take the ones that you didn't read the last time, and moving left

00:08:46,850 --> 00:08:47,850
from there.

00:08:47,850 --> 00:08:48,850
So we'll read it out.

00:08:48,850 --> 00:08:50,870
Here's a zero on the top right.

00:08:50,870 --> 00:08:52,240
Then skip a block.

00:08:52,240 --> 00:08:54,040
A zero.

00:08:54,040 --> 00:08:55,430
Skip a block.

00:08:55,430 --> 00:08:56,660
One.

00:08:56,660 --> 00:08:57,899
One.

00:08:57,899 --> 00:08:59,130
Zero.

00:08:59,130 --> 00:09:00,360
Zero.

00:09:00,360 --> 00:09:01,600
Zero.

00:09:01,600 --> 00:09:02,829
One.

00:09:02,829 --> 00:09:05,300
Skip one.

00:09:05,300 --> 00:09:09,540
And that is a z80 instruction.

00:09:09,540 --> 00:09:14,760
That's hexadecimal 31, which is ‘load the stack pointer’, to a 2-byte value, which

00:09:14,760 --> 00:09:17,269
is exactly what you want to be doing when you start a computer.

00:09:17,269 --> 00:09:18,850
You want a stack to work with.

00:09:18,850 --> 00:09:23,290
And neviksti figured this out just by looking at pictures that look like this.

00:09:23,290 --> 00:09:24,290
Looking through a microscope.

00:09:24,290 --> 00:09:26,600
It looks like this.

00:09:26,600 --> 00:09:32,890
Now, there's a section in the Game Boy emulator developer's wiki about this.

00:09:32,890 --> 00:09:36,529
And the impact section starts: “Apart from amazement…”

00:09:36,529 --> 00:09:39,290
I love that.

00:09:39,290 --> 00:09:44,760
I hope someday I do something so neat that in the end, impact section of Wikipedia goes...

00:09:44,760 --> 00:09:49,040
Well, first, it was cool.

00:09:49,040 --> 00:09:53,410
And then goes on to say: That feature is now included in several emulators.

00:09:53,410 --> 00:09:57,140
Unfortunately, doing this is probably too hard now.

00:09:57,140 --> 00:10:00,180
Devices no longer use masked ROM, because it's very big.

00:10:00,180 --> 00:10:02,120
People use nand ROM, which...

00:10:02,120 --> 00:10:06,340
You could look at it, but it would take a really long time, and ROM is much larger now.

00:10:06,340 --> 00:10:14,180
But the moral of the story is you can learn a lot from a computer by looking at it.

00:10:14,180 --> 00:10:15,970
And there are still researchers who take this approach!

00:10:15,970 --> 00:10:22,220
There are still security researchers who are able to read data from chips by looking at

00:10:22,220 --> 00:10:23,220
them under a microscope.

00:10:23,220 --> 00:10:25,380
It's a very invasive form of penetration testing.

00:10:25,380 --> 00:10:28,610
You need to take the computer apart.

00:10:28,610 --> 00:10:30,050
But people still take this approach.

00:10:30,050 --> 00:10:35,350
Also, if you're interested, the original Cherry ROMs thread about this is extremely funny,

00:10:35,350 --> 00:10:39,700
because it's a mix of people who really know what they were doing and really don't know

00:10:39,700 --> 00:10:43,340
what they're doing in the same time in the same person.

00:10:43,340 --> 00:10:44,410
People correctly identifying...

00:10:44,410 --> 00:10:46,810
Man, we could get this if we had a scanning electron microscope.

00:10:46,810 --> 00:10:49,690
Do you think we could buy one from eBay?

00:10:49,690 --> 00:10:52,470
Thank you!

00:10:52,470 --> 00:10:53,470
That's all I got.

00:10:53,470 --> 00:10:53,970

YouTube URL: https://www.youtube.com/watch?v=RkABpp-YL1I


