Title: !!Con West 2020 - Jordan Hendricks: Tex-Mex and malloc(3C): Restaurant Hosts and Memory Allocators!
Publication date: 2020-03-23
Playlist: !!Con West 2020
Description: 
	Presented at !!Con West 2020: http://bangbangcon.com/west

Before my life as a systems engineer, I worked for years as a hostess at an extremely popular Oklahoman Tex-Mex restaurant, whose wait list would routinely top 20-40 parties in length and 1-2 hour wait times. The host staff had a challenging task: seat waiting parties efficiently as other customers left, while keeping hangry customers happy and efficiency-obsessed managers off of our backs. Adding to our worries, the restaurant management would never turn a party away based on size, creating puzzles for the hosts: Where does one seat large parties – for instance, a group of 10 – when the largest table in the restaurant only holds 4 people? A clue: This problem looks a lot like the problems that memory allocators like malloc(3C) solve!

In this talk, I will explore some parallels between my job as a hostess, where I decided how to seat people given a set of restaurant tables and a wait list, and implementing a memory allocator, which chooses how to give out pieces of a larger region of memory to requesting programs. We will explore questions like: What does fragmentation look like in a restaurant? What are heuristics we can use to estimate when a table will be free? Do all relevant stakeholders – customers, managers, host staff, servers – equally benefit from the same allocation strategies?

#bangbangcon #bangbangconwest #bangbangconwest2020
Captions: 
	00:00:26,500 --> 00:00:28,040
Okay.

00:00:28,040 --> 00:00:29,040
So yeah.

00:00:29,050 --> 00:00:30,050
This is Tex-Mex and malloc3C().

00:00:30,050 --> 00:00:35,750
The problems that restaurant hosts and reallocators share.

00:00:35,750 --> 00:00:36,750
My name is Jordan.

00:00:36,750 --> 00:00:37,750
I'm a software engineer.

00:00:37,750 --> 00:00:40,899
I have a lot of interests in systems software in particular.

00:00:40,899 --> 00:00:43,350
So operating systems, distributed systems.

00:00:43,350 --> 00:00:48,649
But my very first job was actually working as a restaurant hostess in a Tex-Mex restaurant.

00:00:48,649 --> 00:00:49,649
Surprise.

00:00:49,649 --> 00:00:55,480
And this job taught me a lot, and I got really good at seating people from a wait to tables

00:00:55,480 --> 00:01:00,840
as people left and I think about this problem all the time, because it's kind of hard.

00:01:00,840 --> 00:01:04,570
We don't take reservations, and this restaurant was really busy.

00:01:04,570 --> 00:01:12,010
We would have 40 parties, 120 people, waiting for a table at a restaurant where we would

00:01:12,010 --> 00:01:15,220
only have 35 tables.

00:01:15,220 --> 00:01:21,690
Large parties did not fit in the restaurant, and it was really customer service oriented.

00:01:21,690 --> 00:01:24,160
We would not turn down a party regardless of size.

00:01:24,160 --> 00:01:26,560
You didn't have to call ahead.

00:01:26,560 --> 00:01:29,420
Make our lives miserable, basically.

00:01:29,420 --> 00:01:34,360
And the way we would make tables for larger parties is by pushing smaller tables together.

00:01:34,360 --> 00:01:39,860
You might be able to see where this is going, if you're familiar with memory allocation.

00:01:39,860 --> 00:01:42,090
Yeah.

00:01:42,090 --> 00:01:44,610
So we also don't know how long people are gonna stay.

00:01:44,610 --> 00:01:46,600
We can come up with some metrics to predict it.

00:01:46,600 --> 00:01:51,810
But as a host, which is what my job was, I had to interface with customers, managers,

00:01:51,810 --> 00:01:52,810
servers.

00:01:52,810 --> 00:01:55,250
All these people who kind of had different views of the world.

00:01:55,250 --> 00:01:56,640
As you might see.

00:01:56,640 --> 00:01:59,290
So what does this have to do with malloc?

00:01:59,290 --> 00:02:03,570
Memory allocators, if you're unfamiliar, take a region of memory and they split it up into

00:02:03,570 --> 00:02:07,100
pieces and give it to programs requesting some size.

00:02:07,100 --> 00:02:11,280
So you might request 10 bytes, but you get a 16 byte chunk.

00:02:11,280 --> 00:02:13,000
It's not necessarily what you ask for.

00:02:13,000 --> 00:02:15,200
But that's how it works internally.

00:02:15,200 --> 00:02:21,060
You can also do things like combine free memory regions together so you have bigger pieces.

00:02:21,060 --> 00:02:26,810
This is similar to the problem of taking small tables, pushing them together, et cetera.

00:02:26,810 --> 00:02:29,350
So this was the literal restaurant layout.

00:02:29,350 --> 00:02:33,560
This is how much I remember this, even though it's more than 10 years ago.

00:02:33,560 --> 00:02:35,270
It doesn't look like this anymore.

00:02:35,270 --> 00:02:36,270
I've been back.

00:02:36,270 --> 00:02:41,100
So the smaller ones are what we call two-tops, which means they have two seats.

00:02:41,100 --> 00:02:44,010
And the larger ones are four-tops, four seats.

00:02:44,010 --> 00:02:47,790
And everything in this restaurant is small.

00:02:47,790 --> 00:02:49,060
As you can see.

00:02:49,060 --> 00:02:51,520
And then we can fit big parties in these sections.

00:02:51,520 --> 00:02:58,321
So, like, maybe table 10 and 38 can seat 6 to 9 people, this section was for people who

00:02:58,321 --> 00:03:00,440
would come in with their whole soccer team.

00:03:00,440 --> 00:03:06,380
The way we would operate when the restaurant was full is like -- say maybe tables 8 and

00:03:06,380 --> 00:03:08,330
36 sat down at the same time.

00:03:08,330 --> 00:03:11,140
We know they're probably gonna get up around the same time.

00:03:11,140 --> 00:03:15,090
And we can kind of observe that too, by whether they paid, et cetera.

00:03:15,090 --> 00:03:20,491
And so if table 36 gets up and we have a party of 6 coming up, we might hold table 36 so

00:03:20,491 --> 00:03:22,930
we can take 8 and 36 and push them together.

00:03:22,930 --> 00:03:25,770
That's kind of the idea of how this would work.

00:03:25,770 --> 00:03:27,180
And this is a wait list.

00:03:27,180 --> 00:03:32,920
Just an example like -- names, sizes, time spent waiting, and so on.

00:03:32,920 --> 00:03:33,920
So the rules...

00:03:33,920 --> 00:03:36,130
Rules?

00:03:36,130 --> 00:03:37,440
No one knows that reference?

00:03:37,440 --> 00:03:40,890
You guys seem young.

00:03:40,890 --> 00:03:43,980
We seat parties in order of the wait.

00:03:43,980 --> 00:03:45,060
It's a queue.

00:03:45,060 --> 00:03:46,060
Generally.

00:03:46,060 --> 00:03:50,840
But people typically understand if they're a larger party, smaller parties can go ahead

00:03:50,840 --> 00:03:53,510
of them, because they might be able to fit in different places.

00:03:53,510 --> 00:03:58,340
But in practice, we would actually announce the party's table being ready over a loudspeaker.

00:03:58,340 --> 00:04:03,140
So everyone in the waiting area can hear when people are seated ahead of them, and will

00:04:03,140 --> 00:04:06,360
maybe notice.

00:04:06,360 --> 00:04:08,290
So I had to work with managers a lot.

00:04:08,290 --> 00:04:09,890
They would watch what we were doing.

00:04:09,890 --> 00:04:10,890
Keep tabs on us.

00:04:10,890 --> 00:04:12,720
Tell us what to do.

00:04:12,720 --> 00:04:16,380
And this is kind of like the way that they thought about the world, simplified.

00:04:16,380 --> 00:04:20,479
They liked to see tables seated if we were on a wait, because that means money.

00:04:20,479 --> 00:04:23,210
And if they don't, then we're losing money.

00:04:23,210 --> 00:04:27,659
And also, they have this special power, where they can give free guacamole to unhappy customers

00:04:27,659 --> 00:04:28,659
and make them happy.

00:04:28,659 --> 00:04:33,090
Which helps.

00:04:33,090 --> 00:04:35,490
Servers are another group of people I had to deal with.

00:04:35,490 --> 00:04:37,379
Who were making money by waiting tables.

00:04:37,379 --> 00:04:39,340
So they also like to have a full section.

00:04:39,340 --> 00:04:41,350
The tables they're responsible for.

00:04:41,350 --> 00:04:45,879
But they also really like high turnover, because that means they're getting multiple parties,

00:04:45,879 --> 00:04:47,240
more tips throughout the night.

00:04:47,240 --> 00:04:50,930
And they don't like to be double or triple sat, which means sat with two or three tables

00:04:50,930 --> 00:04:54,629
at the same time, because there's a lot of work up front when you first get seated, like

00:04:54,629 --> 00:04:57,499
taking drink orders, saying hello, all those things.

00:04:57,499 --> 00:05:02,629
This means they really don't like big tops, because we have to hold their tables and that

00:05:02,629 --> 00:05:06,529
might mean they're double or triple sat when we separate those tables later in the night.

00:05:06,529 --> 00:05:10,440
My incentives, though, as a host, are a little bit different.

00:05:10,440 --> 00:05:12,030
I'm dealing with customers.

00:05:12,030 --> 00:05:13,500
And I like them to be happy.

00:05:13,500 --> 00:05:16,199
I like to not have them yell or be upset.

00:05:16,199 --> 00:05:20,770
They generally like to see the wait seated in order.

00:05:20,770 --> 00:05:22,099
But they don't have the full context.

00:05:22,099 --> 00:05:26,189
So it's hard for them to tell if maybe a bunch of parties of two get sat ahead of them -- they

00:05:26,189 --> 00:05:29,379
don't realize that those are only for tables of two and we can't push them together and

00:05:29,379 --> 00:05:31,059
give them that table or something like that.

00:05:31,059 --> 00:05:35,860
And I don't have free guacamole, which is a shame.

00:05:35,860 --> 00:05:38,569
So now we're getting to the good stuff.

00:05:38,569 --> 00:05:41,879
Allocation strategies and the properties of the system.

00:05:41,879 --> 00:05:44,240
So as seated parties leave, we have free tables.

00:05:44,240 --> 00:05:49,240
How do we allocate those free tables to parties on the wait, and how can we measure that effectiveness?

00:05:49,240 --> 00:05:51,770
One of the properties you might look at is throughput.

00:05:51,770 --> 00:05:55,529
Here the number of people served per unit of time.

00:05:55,529 --> 00:05:57,630
Maybe 400 people during dinner.

00:05:57,630 --> 00:06:01,590
This can have direct impact on sales for the day, which affects manager pay, because they're

00:06:01,590 --> 00:06:07,830
compensated in part for sales and tipped wages for servers, who also get wages based on sales.

00:06:07,830 --> 00:06:09,479
Utilization.

00:06:09,479 --> 00:06:11,210
Another memory thing.

00:06:11,210 --> 00:06:13,499
Percentage of tables seated at a given time.

00:06:13,499 --> 00:06:19,439
So maybe for the average minute during dinner, 95% of tables are occupied.

00:06:19,439 --> 00:06:23,259
Lower utilization can probably mean that we're holding tables for big tops if we're on a

00:06:23,259 --> 00:06:28,589
wait, and that could have impact on sales, but also large parties spend more money.

00:06:28,589 --> 00:06:31,949
They also have to pay an extra fee, because they're a big group.

00:06:31,949 --> 00:06:34,620
So maybe that kind of works out.

00:06:34,620 --> 00:06:38,500
The next is time to leave.

00:06:38,500 --> 00:06:42,169
Which is how long it takes for a table to leave.

00:06:42,169 --> 00:06:43,379
So...

00:06:43,379 --> 00:06:44,589
Expire.

00:06:44,589 --> 00:06:45,800
Whatever.

00:06:45,800 --> 00:06:49,279
Or table turnover may be a more reasonable thing to call it.

00:06:49,279 --> 00:06:51,289
Usually smaller parties leave more quickly.

00:06:51,289 --> 00:06:55,580
Low TTL is probably higher throughput, at least for that table, and that's gonna be

00:06:55,580 --> 00:06:58,199
higher sales.

00:06:58,199 --> 00:06:59,199
This is a metric that...

00:06:59,199 --> 00:07:00,939
I don't know if it's used anywhere else.

00:07:00,939 --> 00:07:03,180
I kind of just came up with it for this talk.

00:07:03,180 --> 00:07:09,149
FIFO fidelity, first in, first out fidelity, as in: How close are we to seating the wait

00:07:09,149 --> 00:07:10,149
in order?

00:07:10,149 --> 00:07:16,659
65% FIFO fidelity might mean that 35% of parties were seated ahead of their spot.

00:07:16,659 --> 00:07:20,439
And the impact of this is a little bit more indirect, because it's about customer perception.

00:07:20,439 --> 00:07:26,420
So that might make my job harder and it might worsen how much customers come back, if they

00:07:26,420 --> 00:07:30,639
feel like we're unfair or uneffective.

00:07:30,639 --> 00:07:31,899
Internal fragmentation.

00:07:31,899 --> 00:07:33,899
The seats used within a single table.

00:07:33,899 --> 00:07:39,479
So party of two seated at a table of four is wasting two seats, and this is not necessarily

00:07:39,479 --> 00:07:42,960
like a bad thing if we only have parties of two.

00:07:42,960 --> 00:07:44,509
That's probably the most efficient way to use it.

00:07:44,509 --> 00:07:47,139
But it was usually better to minimize this.

00:07:47,139 --> 00:07:50,960
Maybe hold this table for a party of four that's a little further down and seat this

00:07:50,960 --> 00:07:54,710
table of two at one that's about to get up or something like that.

00:07:54,710 --> 00:07:58,729
External fragmentation is the number of tables that we cannot use for big tops, because the

00:07:58,729 --> 00:08:00,590
seating times don't line up well.

00:08:00,590 --> 00:08:05,150
If table nine has paid and they're about to leave but 37 just sat down, we're probably

00:08:05,150 --> 00:08:09,449
not gonna use that for a big top, because we would have to hold that until the party

00:08:09,449 --> 00:08:11,150
ordered and ate and left.

00:08:11,150 --> 00:08:15,949
So this impacts FIFO fidelity, because it makes it harder to seat big tops in particular

00:08:15,949 --> 00:08:20,309
as the number of them on the wait increases and we have fewer options to put them at.

00:08:20,309 --> 00:08:25,550
So putting this all together, we know the incentives of each group of people and we

00:08:25,550 --> 00:08:29,309
can probably guess what the allocation strategy will be.

00:08:29,309 --> 00:08:32,300
How will this impact the system?

00:08:32,300 --> 00:08:35,000
Managers want to optimize for high utilization.

00:08:35,000 --> 00:08:40,060
Seeing lots of tables seated, and high throughput, high sales.

00:08:40,060 --> 00:08:43,190
And this ends up looking a little bit closer to a first fit strategy.

00:08:43,190 --> 00:08:48,680
So as soon as there's a table available for a party waiting, the first one, seat tables

00:08:48,680 --> 00:08:54,529
as soon as they're free -- but this can lead to higher fragmentation and lower FIFO fidelity.

00:08:54,529 --> 00:08:55,870
Servers look pretty similar.

00:08:55,870 --> 00:09:03,630
They like low TTL, high throughput, high utilization, also closer to a first fit and want their

00:09:03,630 --> 00:09:09,769
tables seated as soon as they're available, higher fragmentation and lower fidelity.

00:09:09,769 --> 00:09:18,480
Hosts, on the other hand, are way on the FIFO fidelity side and lower external fragmentation,

00:09:18,480 --> 00:09:20,870
so we have spots for big tops.

00:09:20,870 --> 00:09:23,050
We treat them as special.

00:09:23,050 --> 00:09:27,149
And this ends up looking more like a slab allocation memory strategy.

00:09:27,149 --> 00:09:32,440
So we hold those tables aggressively, really reserve them for fixed sized parties like

00:09:32,440 --> 00:09:34,529
9 to 10 or whatever.

00:09:34,529 --> 00:09:37,649
And we also double and triple seat to make that happen in the future.

00:09:37,649 --> 00:09:40,410
So in an hour, they'll all get up -- all these three tables will get up at the same time

00:09:40,410 --> 00:09:43,740
and we can use it for a 15-top.

00:09:43,740 --> 00:09:45,670
And that can lead to lower utilization.

00:09:45,670 --> 00:09:46,800
Maybe lower throughput.

00:09:46,800 --> 00:09:49,830
It's all really dependent on what the wait looks like.

00:09:49,830 --> 00:09:53,440
And customers don't get to seat people.

00:09:53,440 --> 00:09:57,319
But they might have a preference on one of these, depending on their party size.

00:09:57,319 --> 00:10:00,759
So if you're a big party, you're definitely gonna benefit from slab, because you'll probably

00:10:00,759 --> 00:10:04,449
be seated in about the order that you came in, which is great.

00:10:04,449 --> 00:10:07,490
Come in with 12 people and get to be sat within an hour.

00:10:07,490 --> 00:10:08,490
That's great.

00:10:08,490 --> 00:10:12,269
But for smaller parties, you're gonna benefit more from a first fit strategy, because you'll

00:10:12,269 --> 00:10:17,959
probably jump in the queue, since you can fit many more tables than big parties.

00:10:17,959 --> 00:10:19,459
So thank you!

00:10:19,459 --> 00:10:24,079
This is a good paper about slab allocation by Jeff Bonwick, and a talk from Ryan Zezeski

00:10:24,079 --> 00:10:25,079
from Papers We Love.

00:10:25,079 --> 00:10:28,210
I watched it again before this talk to make sure I remember the details.

00:10:28,210 --> 00:10:29,879
I work at Fastly.

00:10:29,879 --> 00:10:32,440

YouTube URL: https://www.youtube.com/watch?v=ML6gPvtH2Dg


