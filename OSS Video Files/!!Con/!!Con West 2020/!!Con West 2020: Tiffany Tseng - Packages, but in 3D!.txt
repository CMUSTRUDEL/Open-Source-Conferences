Title: !!Con West 2020: Tiffany Tseng - Packages, but in 3D!
Publication date: 2020-03-23
Playlist: !!Con West 2020
Description: 
	Presented at !!Con West 2020: http://bangbangcon.com/west

Ever received a beautiful geometric gift box (from a Japanese pastry shop, for example) and wondered how it was made? It turns out there’s a whole world of packaging design techniques and patterns! Unfortunately, many of these patterns exist only in print via packaging design books. These diagrams need to be translated to digital formats before they can be easily cut on a machine and assembled by hand!

In this talk, I’ll share how I built a web app called SVG Tracer (https://svg-tracer.glitch.me/) to translate photos of packaging diagrams to digital SVGs that can be directly sent to any Computer Numeric Controlled (CNC) desktop cutter. I’ll introduce some useful JavaScript SVG libraries and show some pretty boxes that I created with the tool! By the end of the talk, you’ll learn about how SVGs are an awesome medium for bridging art, programming, and fabrication.

#bangbangcon #bangbangconwest #bangbangconwest2020
Captions: 
	00:00:26,420 --> 00:00:27,560
Alright.

00:00:27,560 --> 00:00:30,880
Today I get to talk to you about one of my favorite things in the whole world.

00:00:30,880 --> 00:00:32,240
Packaging design!

00:00:32,780 --> 00:00:39,270
It combines a few things I really love, including design, digital fabrication, code, and snacks.

00:00:39,270 --> 00:00:44,230
So some of the coolest examples of packaging design that I've seen are in the food industry,

00:00:44,230 --> 00:00:48,840
where decorative boxes are used to package things like cakes.

00:00:49,860 --> 00:00:54,800
So if you go to the arts section of a bookstore, you can often find packaging diagram books,

00:00:54,800 --> 00:00:56,270
and they read like art books.

00:00:56,270 --> 00:00:58,830
So there's often very little instruction in them.

00:00:58,830 --> 00:01:03,440
They just have the diagrams, and photographs of the final box that you'll be able to create,

00:01:03,440 --> 00:01:05,580
if you learn how to assemble them.

00:01:06,550 --> 00:01:10,060
So the diagrams typically consist of two different types of lines.

00:01:10,060 --> 00:01:15,140
Solid lines, which is where you cut the paper, and then scored lines, where you fold them

00:01:15,140 --> 00:01:17,220
to create something like this doughnut box.

00:01:18,000 --> 00:01:22,740
People who get to create packages for a living are usually industrial designers, and they

00:01:22,740 --> 00:01:28,620
use professional tools like flatbed cutter plotters, which are on the order of $10,000.

00:01:29,100 --> 00:01:33,380
And the way they work is usually you print out your design on card stock first, and then

00:01:33,380 --> 00:01:39,729
the machine holds the card stock to the bed, using vacuum or static, and you send it a

00:01:39,729 --> 00:01:45,909
digital file, and it uses a blade and a scoring tool so that you can then assemble your design

00:01:45,909 --> 00:01:47,800
like this popcorn box.

00:01:49,090 --> 00:01:51,020
Those are really expensive, as I mentioned.

00:01:51,020 --> 00:01:52,020
Around $10K.

00:01:52,020 --> 00:01:53,590
But there are more consumer friendly options.

00:01:53,590 --> 00:01:58,109
There are things like desktop cutters that you can get for around $200.

00:01:58,109 --> 00:02:02,200
They're even available at craft stores like Michael's, but you can buy them online, of course.

00:02:02,780 --> 00:02:06,600
And similar to the plotters, they have holders for two different types of tools.

00:02:06,610 --> 00:02:08,709
Usually a blade and a scoring tool.

00:02:08,709 --> 00:02:12,660
And in this example, I've replaced a scoring tool with a marker so you can better see what's

00:02:12,660 --> 00:02:13,980
going on.

00:02:13,980 --> 00:02:18,409
So typically the process is: You first do all the scoring.

00:02:18,409 --> 00:02:22,709
And then you cut out the outline of whatever package that you're going to assemble.

00:02:22,709 --> 00:02:24,000
Like this rocket ship.

00:02:25,240 --> 00:02:29,540
So the problem I identified when I started working and looking at these packaging books

00:02:29,540 --> 00:02:33,920
is that typically there are images in the books, but they're not in a format that you

00:02:33,960 --> 00:02:35,760
can actually send to a machine.

00:02:35,760 --> 00:02:40,380
So how do you translate those 2D diagrams into something that a machine can actually understand?

00:02:41,120 --> 00:02:43,120
And that's where SVGs come in.

00:02:43,129 --> 00:02:48,180
So SVGs are an XML vector-based image format, and they're used in graphics more generally.

00:02:48,180 --> 00:02:53,769
A lot of designers might use them to create vector artwork on the web or even animations,

00:02:53,769 --> 00:02:57,140
but they're especially useful for digital fabrication.

00:02:58,370 --> 00:03:01,780
You can open up an SVG file in any text editor.

00:03:01,780 --> 00:03:04,680
Which is really awesome, because then you can see exactly what the machine is going

00:03:04,680 --> 00:03:07,459
to do, when you send it that SVG file.

00:03:07,459 --> 00:03:10,540
So we're gonna walk through an example of SVG.

00:03:10,540 --> 00:03:14,600
There's always an enclosing SVG element that has some basic properties like the

00:03:14,600 --> 00:03:16,480
width and height of your design.

00:03:16,480 --> 00:03:20,220
And then the most common element within an SVG is a path.

00:03:21,880 --> 00:03:24,430
So let's walk through what a path looks like.

00:03:24,430 --> 00:03:28,740
Everything is with respect to a coordinate plane, where the origin is in the top left.

00:03:28,740 --> 00:03:33,969
So if we look at this path, the first thing in it is M, which stands for move.

00:03:33,969 --> 00:03:37,189
And that defines essentially where your starting coordinate is going to be.

00:03:37,189 --> 00:03:40,240
So in this example, x = 10 and y = 10.

00:03:40,960 --> 00:03:44,620
H stands for horizontal, so you just have to give it one parameter, which is how far

00:03:44,630 --> 00:03:46,099
to move in the x direction.

00:03:46,099 --> 00:03:47,909
In this example, 90.

00:03:47,909 --> 00:03:53,469
V is vertical, so I'm moving 90, and notice that I'm moving down, because y is positive

00:03:53,469 --> 00:03:55,220
in the down direction.

00:03:55,220 --> 00:03:56,370
I'm moving 10 again.

00:03:56,370 --> 00:03:58,629
So I'm moving to x = 10.

00:03:58,629 --> 00:04:00,069
And then L stands for line.

00:04:00,069 --> 00:04:05,080
So you're drawing a line to the final coordinate, which is (10,10), which gives us a nice little square.

00:04:06,080 --> 00:04:09,080
Unfortunately, most SVGs are not that clean.

00:04:09,080 --> 00:04:09,780
(laughter)

00:04:09,780 --> 00:04:14,849
So SVGs are often exported from something like a CAD program or graphics program

00:04:14,849 --> 00:04:21,220
like Illustrator, and you might have thousands of commands in a packaging SVG or a packaging file

00:04:21,220 --> 00:04:22,510
like this one.

00:04:22,510 --> 00:04:27,700
So one thing you might notice in this SVG code is the command C, which we haven't covered yet.

00:04:28,340 --> 00:04:31,160
So C stands for curve, and it's pretty easy, actually.

00:04:31,160 --> 00:04:35,610
There's just three different coordinate pairs for C. Two control points and an endpoint.

00:04:35,610 --> 00:04:39,580
So we kind of walk through this one -- we're starting, again, at (10,10).

00:04:39,580 --> 00:04:43,940
And the last pair in the curve code is your endpoint.

00:04:43,940 --> 00:04:47,720
So my endpoint here is at x = 90, y = 10.

00:04:48,260 --> 00:04:53,020
What the control points do is they define the slope of the curve at the start and the end.

00:04:53,740 --> 00:04:57,551
I can draw my first control point and draw a line between that control point

00:04:57,551 --> 00:05:00,400
and my starting point to define the slope of the start.

00:05:00,400 --> 00:05:03,000
And then I can do the same for the end of the curve.

00:05:03,000 --> 00:05:07,920
And then what it'll do is actually draw a smooth curve through the start and end points,

00:05:09,220 --> 00:05:13,740
respecting the slope that you defined through your two control points.

00:05:13,740 --> 00:05:17,420
So now you basically know how to read most SVG files at this point.

00:05:17,800 --> 00:05:22,140
Where I started with this process is I wanted to see what libraries already existed for

00:05:22,150 --> 00:05:26,970
taking image input, basically images from the packaging diagram book, and converting

00:05:26,970 --> 00:05:28,449
them to SVGs.

00:05:28,449 --> 00:05:33,700
So I found this library that's been maintained since 2003, by a Canadian math professor named

00:05:33,700 --> 00:05:34,700
Peter Selinger.

00:05:34,700 --> 00:05:37,560
It's called Potrace and it does exactly that.

00:05:37,560 --> 00:05:41,000
You give it this bitmap image and it creates an SVG.

00:05:41,949 --> 00:05:47,260
The first thing I did is you have to take an image -- this is an image from the book.

00:05:47,270 --> 00:05:49,070
You can open it up in any free software.

00:05:49,070 --> 00:05:52,350
I'm using Preview here, but you could use Inkscape, for example.

00:05:52,350 --> 00:05:56,650
And what I'm doing is I'm just removing the background and upping the contrast a bit so

00:05:56,650 --> 00:06:00,120
that the line work is as clear as possible.

00:06:00,120 --> 00:06:02,880
And then I built an app that's called SVG Tracer.

00:06:02,880 --> 00:06:04,069
It's a webapp.

00:06:04,069 --> 00:06:10,240
What you do with SVG Tracer is that you upload that image that you just cleaned -- this is

00:06:10,240 --> 00:06:15,080
in realtime, it takes anywhere between 5 and 10 seconds to process that image.

00:06:15,080 --> 00:06:19,800
And then it gives you an SVG that you can export and send directly to a machine.

00:06:21,000 --> 00:06:24,960
Unfortunately, it's not as easy as just using the Potrace output, because as I mentioned

00:06:25,080 --> 00:06:29,080
before, when you send it to a machine, you have to specify what is going to be scored

00:06:29,080 --> 00:06:30,490
and what's going to be cut.

00:06:30,490 --> 00:06:35,000
So I need to actually take that Potrace output and separate the scoring path from the cut path.

00:06:35,600 --> 00:06:39,840
So I looked at the Potrace documentation, and there's all these different options, and

00:06:39,840 --> 00:06:42,660
one of them, intriguingly, is called turd size.

00:06:42,660 --> 00:06:44,240
(laughter)

00:06:44,320 --> 00:06:46,020
I don't know that much about image processing

00:06:46,020 --> 00:06:49,360
but I figured maybe that was like a common term for image processing?

00:06:49,680 --> 00:06:51,539
And it's not at all.

00:06:51,539 --> 00:06:52,400
(laughter)

00:06:52,400 --> 00:06:56,000
I honestly think it's just like a math professor having fun.

00:06:56,840 --> 00:07:02,180
Turd size is basically specifying what size speck in an image to ignore.

00:07:02,190 --> 00:07:08,629
So I can use turd size, specifically a turd size of 25, to eliminate all the scoring paths

00:07:08,629 --> 00:07:10,770
from my SVG.

00:07:10,770 --> 00:07:13,669
So that's only step one.

00:07:13,669 --> 00:07:18,009
Because as I mentioned, I still need to figure out and isolate the scoring path.

00:07:18,009 --> 00:07:21,849
And what I did for that is I used this library called Clipper, and it lets you perform Boolean

00:07:21,849 --> 00:07:24,789
operations on a pair of SVG paths.

00:07:24,789 --> 00:07:26,819
So this is from their documentation.

00:07:26,819 --> 00:07:32,342
You can see I can switch between intersection, union, difference, or XOR, and then it will

00:07:32,342 --> 00:07:35,319
actually clip the SVGs relative to one another.

00:07:35,319 --> 00:07:38,750
So then what I do is I have this SVG of the Potrace output.

00:07:38,750 --> 00:07:40,700
I have the SVG of the cut path.

00:07:40,700 --> 00:07:42,129
And I then take the difference.

00:07:42,129 --> 00:07:43,449
That gives me the score path.

00:07:43,449 --> 00:07:46,710
And I can combine those two paths to create the final SVG.

00:07:46,710 --> 00:07:51,220
So with SVG Tracer, you kind of saw before I exported the SVG file.

00:07:51,220 --> 00:07:53,550
I can import it into a design tool.

00:07:53,550 --> 00:07:59,240
This is a proprietary tool called Cricut Design Space, that is for the plotter that I showed before.

00:07:59,240 --> 00:08:00,240
The desktop one.

00:08:00,780 --> 00:08:03,720
And you can see that there are very clearly two paths.

00:08:03,729 --> 00:08:05,650
One for the scoring and one for cutting.

00:08:05,650 --> 00:08:10,500
And that makes it really easy to then tell the machine: Use this path to use the scoring

00:08:10,500 --> 00:08:12,050
tool and this one for the blade.

00:08:12,050 --> 00:08:13,080
But wait!

00:08:13,080 --> 00:08:15,289
There's even more to this.

00:08:15,289 --> 00:08:20,150
So one thing that I won't be able to have time to talk through in completion, but I

00:08:20,150 --> 00:08:25,280
just wanted to briefly discuss, because it was interesting: Is when you look at the potrace output

00:08:25,640 --> 00:08:28,819
it looks at the scoring paths as blobs.

00:08:28,819 --> 00:08:32,510
And when you think about a machine cutting around a blob, it's going to be really slow

00:08:32,510 --> 00:08:36,040
to cut hundreds of blobs, compared to cutting straight lines.

00:08:36,329 --> 00:08:40,780
So what I wanted to do is figure out a way to simplify those blobs into lines.

00:08:40,780 --> 00:08:46,740
And what I did is I used this library called svg-path-bounds, and I made some basic mathematical assumptions

00:08:46,740 --> 00:08:51,040
and I'm happy to chat with anyone about what those assumptions were.

00:08:51,040 --> 00:08:55,839
But I wanted to test: How much faster is it, if you use these simplified lines in place

00:08:55,839 --> 00:08:57,019
of those blobs?

00:08:57,019 --> 00:09:01,519
So I went through the books, and I found the most complicated design I could find that

00:09:01,520 --> 00:09:03,560
has 75 scoring lines.

00:09:04,240 --> 00:09:06,750
And I cut it using my desktop plotter.

00:09:06,750 --> 00:09:09,140
And of course, there are no instructions.

00:09:09,140 --> 00:09:11,020
I didn't know how I was gonna put this together.

00:09:11,020 --> 00:09:15,959
I think it took me six times as long to assemble it as it did for me to fabricate it.

00:09:15,960 --> 00:09:18,160
But it makes this nice little cube.

00:09:19,310 --> 00:09:22,760
And what I did is I took many different examples from the book and I wanted to see: How much

00:09:22,779 --> 00:09:26,760
time do you save, depending on how many scoring paths there are in the design?

00:09:26,760 --> 00:09:30,330
So for the sphere, there were 75 lines.

00:09:30,330 --> 00:09:34,690
And what this table is showing is: The Potrace Default is basically -- if you just cut a

00:09:34,690 --> 00:09:36,390
bunch of blobs, how long does it take?

00:09:36,390 --> 00:09:40,300
And the Simplified Path is: If you convert those blobs into lines, how much time do you save?

00:09:40,920 --> 00:09:44,970
And I found for designs where there are just a few scoring lines, it's kind of negligible,

00:09:44,970 --> 00:09:50,080
but if you have a lot of them, you save up to 35% in terms of cutting time, which is pretty cool.

00:09:51,480 --> 00:09:56,060
So if you want to learn more about packaging diagrams, these are books that I highly recommend,

00:09:56,070 --> 00:09:57,260
and I used...

00:09:57,260 --> 00:10:01,231
I think the first two are out of print, unfortunately, but I went to the Strand in New York, which

00:10:01,231 --> 00:10:05,470
is an amazing bookstore for art, used books, and they were there.

00:10:05,470 --> 00:10:06,580
Hopefully they're still there.

00:10:06,580 --> 00:10:07,420
I don't know.

00:10:07,600 --> 00:10:09,160
You can probably find them online, though.

00:10:09,340 --> 00:10:13,860
And this is a free app, so you can find it at this URL.

00:10:14,020 --> 00:10:18,139
And if you click on the fish and click the view source button, you can actually view

00:10:18,139 --> 00:10:19,139
all the code.

00:10:19,139 --> 00:10:23,500
It's a Node app, so the things that are probably the most interesting to people here is in

00:10:23,500 --> 00:10:25,620
the server.js file.

00:10:25,620 --> 00:10:27,950
So you can check that out, if you want to learn more.

00:10:27,950 --> 00:10:32,240
And if you do anything interesting with it, you actually don't need to use it for packaging diagrams.

00:10:32,240 --> 00:10:34,560
You can use it just to convert any image to a bitmap.

00:10:34,560 --> 00:10:37,990
So I know a lot of people who use it for laser cutting, for example.

00:10:37,990 --> 00:10:41,060
So if you do anything interesting with it, please share it with me.

00:10:41,060 --> 00:10:42,060
That's my handle.

00:10:42,060 --> 00:10:43,740
scientiffic, with two Fs.

00:10:43,740 --> 00:10:44,920
Thanks everyone for your attention!

00:10:45,840 --> 00:10:49,080

YouTube URL: https://www.youtube.com/watch?v=hVtiC6JBWKc


