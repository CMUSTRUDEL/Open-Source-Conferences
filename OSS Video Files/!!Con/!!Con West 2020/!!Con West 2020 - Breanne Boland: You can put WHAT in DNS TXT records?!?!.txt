Title: !!Con West 2020 - Breanne Boland: You can put WHAT in DNS TXT records?!?!
Publication date: 2020-03-23
Playlist: !!Con West 2020
Description: 
	Presented at !!Con West 2020: http://bangbangcon.com/west

DNS TXT resource records have several more common uses: SPF records, contact information, randomized strings put in place so hosting services can verify that someone does indeed control a domain. But the spec for them in RFC 1035 is pretty short: “TXT RRs are used to hold descriptive text. The semantics of the text depends on the domain where it is found.” And Corey Quinn calls Route 53, the AWS DNS service, his favorite database, because it has a 100% SLA. There’s room for a LOT of mischief in between those two descriptions. This talk will give a brief explanation of DNS and its record types, discuss the officially endorsed uses of TXT records… and then look into what kind of fun someone can have with the more off-brand uses (like thwarting attempts at internet censorship!).

#bangbangcon #bangbangconwest #bangbangconwest2020
Captions: 
	00:00:27,100 --> 00:00:28,450
Happy leap day.

00:00:28,450 --> 00:00:30,630
We are living on bonus time.

00:00:30,630 --> 00:00:33,450
So I wanted to talk about a little bonus space within DNS.

00:00:33,450 --> 00:00:38,840
And let's start by talking about what DNS is.

00:00:38,840 --> 00:00:42,050
It is the domain name system.

00:00:42,050 --> 00:00:44,590
People like to use the phone book metaphor to explain DNS.

00:00:44,590 --> 00:00:49,180
It makes sense because it's immediately understandable by a lot of people, though I suspect less

00:00:49,180 --> 00:00:51,220
and less as time goes on.

00:00:51,220 --> 00:00:52,360
(laughter)

00:00:52,360 --> 00:00:56,410
The full picture of it, if you're really going with the metaphor, though, is more complicated.

00:00:56,410 --> 00:01:00,239
Like Mario 3 Level 8 complicated.

00:01:00,239 --> 00:01:03,070
(Mario noises)

00:01:03,070 --> 00:01:05,920
Got it.

00:01:05,920 --> 00:01:06,990
So let's go back over that.

00:01:06,990 --> 00:01:10,060
You start by typing a URL in your browser and hitting enter.

00:01:10,060 --> 00:01:14,360
You move further onto the map with the recursive resolver.

00:01:14,360 --> 00:01:18,380
Often it's provided by your ISP, but you might opt to use something else, like Google’s

00:01:18,380 --> 00:01:19,380
quad 8.

00:01:19,380 --> 00:01:22,640
Your nearby resolver will also have some DNS information cached.

00:01:22,640 --> 00:01:27,360
If it doesn’t find your record there, it'll start a greater journey onto the map.

00:01:27,360 --> 00:01:32,500
First it'll move to the root server and figure out what top level domain server to send the

00:01:32,500 --> 00:01:33,500
query through.

00:01:33,500 --> 00:01:36,649
At this point it’s more of a short list that says root at the top than a full on thick

00:01:36,649 --> 00:01:37,649
phone book.

00:01:37,649 --> 00:01:43,140
Then you go to the TLD server, which looks at your .horse domain, and it finds the nameserver

00:01:43,140 --> 00:01:45,880
that’s holding the specific record that you’re seeking.

00:01:45,880 --> 00:01:51,000
So next is the nameserver, which tells you which IP you can find your extremely important

00:01:51,000 --> 00:01:52,030
domain at.

00:01:52,030 --> 00:02:00,290
Then your well traveled query returns to you, asserting that endless.horse is at 104.236.181.76.

00:02:00,290 --> 00:02:12,380
At last your princess is not in another castle.

00:02:12,380 --> 00:02:16,700
Big dynamic DNS as we know it replaced the old convention of static hosts.txt files,

00:02:16,700 --> 00:02:19,300
which were closer to the literal definition of a phone book.

00:02:19,300 --> 00:02:23,440
They were maintained by the Stanford research institute for the ARPANET membership.

00:02:23,440 --> 00:02:28,260
These static files were periodically updated and sent out weekly-ish, and were retrieved

00:02:28,260 --> 00:02:29,660
or replaced as needed.

00:02:29,660 --> 00:02:36,250
DNS was described in 1983 and started to be implemented in 1984, which exchanged this

00:02:36,250 --> 00:02:42,010
file that explained the small proto-internet for lots and lots of individual queries.

00:02:42,010 --> 00:02:45,300
So the internet could scale more gracefully and people wouldn't be stymied by stale hosts.txt

00:02:45,300 --> 00:02:46,300
files.

00:02:46,300 --> 00:02:51,780
Hosts.txt gave way to /etc/hosts, which is on your computer by default, and includes

00:02:51,780 --> 00:02:56,700
things like your preferred IP for localhost, but you can edit them to override -- via DNS

00:02:56,700 --> 00:02:57,700
too.

00:02:57,700 --> 00:03:01,810
It's handy for local networks, but maybe if you're distractible, and you want to redirect

00:03:01,810 --> 00:03:06,460
Twitter.com to something more related to your job.

00:03:06,460 --> 00:03:13,550
Let’s have a moment of obligatory Zen, because we're talking about DNS.

00:03:13,550 --> 00:03:17,250
The great and terrible thing about DNS is that so many things rely on it.

00:03:17,250 --> 00:03:23,170
If DNS is having a bad day, a much used recursive server is down, for instance, it can ruin

00:03:23,170 --> 00:03:24,810
a lot of things.

00:03:24,810 --> 00:03:27,930
That means it can also be used to do all kinds of interesting stuff.

00:03:27,930 --> 00:03:33,170
For instance, there's one kind of server attack that involves many, many sources, making DNS

00:03:33,170 --> 00:03:37,451
queries and spoofing the source IP so all those queries go back to one source and can

00:03:37,451 --> 00:03:39,260
possibly take it out.

00:03:39,260 --> 00:03:42,590
Just because you wanted to get the IP for a URL.

00:03:42,590 --> 00:03:46,950
There are ten DNS record types.

00:03:46,950 --> 00:03:51,900
The one you see if you use dig in your terminal with no flags is A record, which returns the

00:03:51,900 --> 00:03:55,830
IPv4 address for a URL, but we're here to talk about only one.

00:03:55,830 --> 00:03:56,960
TXT records!

00:03:56,960 --> 00:04:00,040
They can have basically anything in them.

00:04:00,040 --> 00:04:04,340
They're constrained by length and you're restricted to the original set of ASCII characters, that’s

00:04:04,340 --> 00:04:05,540
the original 128.

00:04:05,540 --> 00:04:09,270
Emoji, alas, are right out.

00:04:09,270 --> 00:04:14,650
Beyond that, I quote from RFC1035: the semantics of the text depends on the domain where it

00:04:14,650 --> 00:04:17,040
is found.

00:04:17,040 --> 00:04:19,310
(laughter)

00:04:19,310 --> 00:04:21,489
I know that feel.

00:04:21,489 --> 00:04:26,840
These are the grab bag of DNS, and that why I love them.

00:04:26,840 --> 00:04:30,871
RFC1464 presents the idea of a key value format, which is pretty often what you're gonna find

00:04:30,871 --> 00:04:32,210
when you look these up.

00:04:32,210 --> 00:04:36,000
But they're not required, like so many internet standards -- it's just an optional format

00:04:36,000 --> 00:04:37,509
that's become normal.

00:04:37,509 --> 00:04:40,760
But you can do what you want with them.

00:04:40,760 --> 00:04:44,960
Some common ones you're likely to see if you dig at domains TXT records include domain

00:04:44,960 --> 00:04:50,560
ownership verification for different services, marketing, web hosting things.

00:04:50,560 --> 00:04:55,280
It's also where you're going to see DKIM and DMARC and SPF for encrypted emails and spam

00:04:55,280 --> 00:04:56,280
handling.

00:04:56,280 --> 00:04:57,570
Stuff like that.

00:04:57,570 --> 00:05:02,500
The most creative still generally on brand use I saw -- I read about a university that

00:05:02,500 --> 00:05:07,500
put lat and lon in the text records for their server so they could more quickly figure out

00:05:07,500 --> 00:05:10,860
where the server lived on their campus.

00:05:10,860 --> 00:05:13,910
There's also this one.

00:05:13,910 --> 00:05:16,540
Let's see how fuzzy this is.

00:05:16,540 --> 00:05:17,540
A bit small.

00:05:17,540 --> 00:05:18,540
All right.

00:05:18,540 --> 00:05:19,780
So it's a dig text for DNS.Google.

00:05:19,780 --> 00:05:20,780
You have an SPF record.

00:05:20,780 --> 00:05:27,200
But there’s also an XKCD URL.

00:05:27,200 --> 00:05:38,970
Because someone at Google got cute.

00:05:38,970 --> 00:05:39,970
So maybe you're with me.

00:05:39,970 --> 00:05:42,600
And you're already envisioning some of the weird stuff you can get up to with this.

00:05:42,600 --> 00:05:46,280
I'm gonna tell you about a few more.

00:05:46,280 --> 00:05:48,080
The classic one -- DNS tunneling.

00:05:48,080 --> 00:05:52,540
It's a bit more than 20 years old, so far as we can officially tell, presented at Black

00:05:52,540 --> 00:05:57,750
Hat in 2004 by Dan Kominski, which if you like DNS shenanigans, he's an excellent Google.

00:05:57,750 --> 00:06:01,630
There are a few ways to do this, but the cenral part is always about smuggling things that

00:06:01,630 --> 00:06:05,490
are not supposed to be there in a DNS packet.

00:06:05,490 --> 00:06:11,340
They're not monitored in the same way as regular HTTP traffic and that permissiveness of their

00:06:11,340 --> 00:06:16,580
movement makes it a great vector for exfiltrating data or getting malware into places that otherwise

00:06:16,580 --> 00:06:18,670
it would be hard to get to.

00:06:18,670 --> 00:06:24,240
With this method, data is sometimes smuggled via nonexistent subdomains in the URLs the

00:06:24,240 --> 00:06:31,820
packet seems to be querying for, long random string.evil.com, but if your packet is designed

00:06:31,820 --> 00:06:36,280
to return a nice chunk of text records, you can really stuff some information or code

00:06:36,280 --> 00:06:37,280
in there.

00:06:37,280 --> 00:06:43,090
DNS queries: they smuggle stuff and evade firewalls!

00:06:43,090 --> 00:06:44,530
Awesome.

00:06:44,530 --> 00:06:48,020
Then there is sidestepping internet censorship.

00:06:48,020 --> 00:06:53,540
The most common way of doing this involves sidestepping -- usually government DNS poisoning

00:06:53,540 --> 00:06:56,590
by setting your resolver to quad 8.

00:06:56,590 --> 00:07:00,669
This is getting less useful as more sophisticated technology is put to monitoring and controlling

00:07:00,669 --> 00:07:01,880
the tech we all rely on.

00:07:01,880 --> 00:07:04,389
However, there is another way.

00:07:04,389 --> 00:07:09,400
Like David Ledbetter's 2008 project, which put truncated Wikipedia articles in projects.

00:07:09,400 --> 00:07:13,240
Like this one.

00:07:13,240 --> 00:07:20,400
So sadly, they're not up anymore.

00:07:20,400 --> 00:07:23,770
But there's no reason that we can't exploit what David referred to as basically a huge

00:07:23,770 --> 00:07:26,840
associative array for great good.

00:07:26,840 --> 00:07:28,410
Right?

00:07:28,410 --> 00:07:30,250
Then there's this one.

00:07:30,250 --> 00:07:32,730
DNS FS.

00:07:32,730 --> 00:07:38,960
So a British programmer found DNS resolvers that were open to the public internet, and

00:07:38,960 --> 00:07:42,389
used text records to cache a blog post on servers all around the world.

00:07:42,389 --> 00:07:48,610
He used 250 character base 64 strings that came out to 187 bytes each to accomplish this

00:07:48,610 --> 00:07:52,250
and worked out that the caches would be valid for at least a day.

00:07:52,250 --> 00:07:54,060
This is probably my favorite.

00:07:54,060 --> 00:07:57,820
I linked to the post in the blog post about this.

00:07:57,820 --> 00:08:01,070
He has an animation of proof of concept and I actually yelled in my apartment when I saw

00:08:01,070 --> 00:08:02,250
it.

00:08:02,250 --> 00:08:05,620
It is glorious.

00:08:05,620 --> 00:08:08,460
So naturally, I wanted to play.

00:08:08,460 --> 00:08:11,500
I found some interesting things when I was experimenting for this presentation, and there's

00:08:11,500 --> 00:08:14,400
stuff I still want to dig into.

00:08:14,400 --> 00:08:18,970
Different providers handle uncommon numbers of DNS TXT records differently.

00:08:18,970 --> 00:08:22,870
I found this just working with Dreamhost and AWS.

00:08:22,870 --> 00:08:25,139
Dreamhost has a clunky UI for it that I haven't gotten to yet.

00:08:25,139 --> 00:08:28,199
They also have an API that I didn’t get to use yet.

00:08:28,199 --> 00:08:30,440
They're content to make tons of text records.

00:08:30,440 --> 00:08:32,330
I topped out at 50.

00:08:32,330 --> 00:08:41,070
AWS will let you make a single one per domain or subdomain, but still has some of those

00:08:41,070 --> 00:08:44,959
limits, the 255 characters, the length, that kind of thing.

00:08:44,959 --> 00:08:49,480
Adding a ton of these records does seem to cause some delays on DNS propagation.

00:08:49,480 --> 00:08:53,420
When I was experimenting with it, I was finding stale things fully an hour later after clearing

00:08:53,420 --> 00:08:54,760
cache and resetting things.

00:08:54,760 --> 00:08:55,760
Yeah.

00:08:55,760 --> 00:08:59,149
I had the unique pleasure of constipating the internet.

00:08:59,149 --> 00:09:00,149
(laughter)

00:09:00,149 --> 00:09:06,240
Although honestly, vanilla DNS is enough to be responsible for all of that, minus adding

00:09:06,240 --> 00:09:08,579
50 records to a single domain.

00:09:08,579 --> 00:09:14,339
So I toyed with lots of ideas, but I made what I hope is an unsticking tool for when

00:09:14,339 --> 00:09:17,110
you're trying to think through something.

00:09:17,110 --> 00:09:18,910
So it's connected to maybethiscould.work.

00:09:18,910 --> 00:09:23,160
There are subdomains from 0 to 50, and each one includes a little messages that I’m

00:09:23,160 --> 00:09:27,272
hoping will get you to rethink things if you’re trying to finish a project or thought or a

00:09:27,272 --> 00:09:30,970
writing thing, just to help you change your perspective or alter your reality a little

00:09:30,970 --> 00:09:33,329
bit so that maybe you can keep moving forward..

00:09:33,329 --> 00:09:37,600
I wanted it to be 0 to 49, but Dreamhost for reasons that I do not know yet does not let

00:09:37,600 --> 00:09:40,089
you do a subdomain that's just a zero.

00:09:40,089 --> 00:09:41,089
It just blanks it out.

00:09:41,089 --> 00:09:43,379
It allowed double zero, though!

00:09:43,379 --> 00:09:44,379
So...

00:09:44,379 --> 00:09:45,379
Hm.

00:09:45,379 --> 00:09:50,329
You can go and start doing some digging, and find all of them, or they're all in a gist,

00:09:50,329 --> 00:09:52,569
that's linked in my blog post for this.

00:09:52,569 --> 00:09:54,769

YouTube URL: https://www.youtube.com/watch?v=15kNl-qPmf0


