Title: !!Con West 2020 - Jeremy Apthorp: Curses!!
Publication date: 2020-03-23
Playlist: !!Con West 2020
Description: 
	Presented at !!Con West 2020: http://bangbangcon.com/west

Okay, so you’ve probably called print() and seen some text appear in a terminal. Cool cool cool. But some programs print COLORS??? And move the cursor around and stuff? How in the heck does all that work?

I got curious and went digging, and to really answer this we need to go back to 1835 and the first application of electrical engineering.

#bangbangcon #bangbangconwest #bangbangconwest2020
Captions: 
	00:00:27,000 --> 00:00:28,280
All righty.

00:00:28,280 --> 00:00:29,280
Hi.

00:00:29,280 --> 00:00:30,280
My name is Jeremy.

00:00:30,280 --> 00:00:34,110
Let me just start my presentation here.

00:00:34,110 --> 00:00:37,300
So I want to talk to you today about terminals.

00:00:37,300 --> 00:00:42,090
So if you're a programmer, you've probably encountered the terminal before.

00:00:42,090 --> 00:00:43,090
Looks like this.

00:00:43,090 --> 00:00:44,090
It's a prompt.

00:00:44,090 --> 00:00:46,870
You know, the computer asks you to type something in.

00:00:46,870 --> 00:00:53,910
And then maybe you type something, and the computer does something and prints a response

00:00:53,910 --> 00:00:54,910
back.

00:00:54,910 --> 00:00:58,640
So if you've written code before, you might have written something that looks like this.

00:00:58,640 --> 00:01:03,130
You invoke the name, the secret name of your program, and in this case, hello, in the computer

00:01:03,130 --> 00:01:06,690
-- your program writes something out to the terminal.

00:01:06,690 --> 00:01:08,080
Hello world.

00:01:08,080 --> 00:01:13,830
Traditional incantation to the UNIX demons to bless your programming career.

00:01:13,830 --> 00:01:14,830
But like...

00:01:14,830 --> 00:01:17,750
Some terminal programs do some really wild stuff.

00:01:17,750 --> 00:01:22,320
They do colors, animations, move the cursor around, take over the screen.

00:01:22,320 --> 00:01:25,229
Some even have mouse support.

00:01:25,229 --> 00:01:29,610
So how the heck does that work?

00:01:29,610 --> 00:01:33,500
So this talk is an unreasonably detailed answer to that question.

00:01:33,500 --> 00:01:39,290
Or at least as unreasonable as I possibly could be within ten minutes.

00:01:39,290 --> 00:01:44,580
So to really start at the beginning of answering this question, we need to go back to about

00:01:44,580 --> 00:01:46,820
1840.

00:01:46,820 --> 00:01:49,060
(laughter)

00:01:49,060 --> 00:01:54,490
And the beginnings of the electrical telegraph, one of the first uses of electrical engineering.

00:01:54,490 --> 00:02:00,710
So this is a telegraph key, something that a highly trained operator would use to transmit

00:02:00,710 --> 00:02:06,510
Morse code over a wire, and another trained operator on the other end would listen to

00:02:06,510 --> 00:02:11,220
the incoming sequence of, like, long and short dashes, and would transcribe it as text.

00:02:11,220 --> 00:02:15,690
They would write it down into something that somebody like a normal human could read.

00:02:15,690 --> 00:02:17,200
And it was slow.

00:02:17,200 --> 00:02:18,200
It was laborious.

00:02:18,200 --> 00:02:22,150
You needed trained operators on both ends.

00:02:22,150 --> 00:02:28,690
And so in the early 1900s, a group of engineers pitched to the Morton Salt Company of all

00:02:28,690 --> 00:02:37,110
things this idea they had of making telegraphs easier and faster to send.

00:02:37,110 --> 00:02:42,980
And so their idea was that they would hook up two electromechanical typewriters to each

00:02:42,980 --> 00:02:49,030
other, and you could just type on a keyboard, like a regular typewriter, and on the other

00:02:49,030 --> 00:02:52,720
end, those characters would appear instantly readable.

00:02:52,720 --> 00:02:57,090
And so they developed this machine, and that allowed the electrical telegraph to really

00:02:57,090 --> 00:02:58,480
take off.

00:02:58,480 --> 00:03:04,660
And it was especially -- starting in about the '20s, it was really used a lot by the

00:03:04,660 --> 00:03:09,690
press, newspaper companies, and by financial companies.

00:03:09,690 --> 00:03:11,230
So that exploded.

00:03:11,230 --> 00:03:17,340
And that actually -- this system kind of remained popular well into the '80s.

00:03:17,340 --> 00:03:25,390
So 50 years after the invention of the teletypewriter, this guy, Douglas T Ross, in 1956, was working

00:03:25,390 --> 00:03:28,730
on this computer called the Whirlwind at MIT.

00:03:28,730 --> 00:03:31,800
And this was like this marvel of engineering.

00:03:31,800 --> 00:03:36,380
It took 200 people two years to build this computer.

00:03:36,380 --> 00:03:38,400
It had 5,000 vacuum tubes.

00:03:38,400 --> 00:03:46,319
It ran at, like, a blistering 20 kilohertz and weighed 10 tons and crashed about every

00:03:46,319 --> 00:03:48,349
20 minutes.

00:03:48,349 --> 00:03:53,430
But it was special in this one really important way, which is that it was one of the first

00:03:53,430 --> 00:03:57,160
computers that was ever designed for real time input.

00:03:57,160 --> 00:04:02,099
So instead of writing your commands to the computer on a stack of punch cards, putting

00:04:02,099 --> 00:04:05,940
it in the queue and sort of coming back and collecting the output later, the Whirlwind

00:04:05,940 --> 00:04:11,500
was designed for flight simulators, to control dials in a simulated cockpit, which is not

00:04:11,500 --> 00:04:17,709
what Doug Ross was doing with it, but that is what it was paid for to do.

00:04:17,709 --> 00:04:22,490
And so Doug had this idea that this computer was fast enough that you could sort of have

00:04:22,490 --> 00:04:23,760
a conversation with it.

00:04:23,760 --> 00:04:31,560
You could have this realtime back and forth between computer and human.

00:04:31,560 --> 00:04:37,160
So he hooked up a teletypewriter, a Freedom Flexawriter, to be specific, to the computer.

00:04:37,160 --> 00:04:39,160
It says PDP-11 on the top.

00:04:39,160 --> 00:04:42,090
They were used on PDPs as well, but he hooked it up to the Whirlwind.

00:04:42,090 --> 00:04:47,131
So he would write a message and the computer would write back instead of a human operator

00:04:47,131 --> 00:04:49,050
on the end.

00:04:49,050 --> 00:04:50,820
This worked really really well.

00:04:50,820 --> 00:04:52,150
People loved it.

00:04:52,150 --> 00:04:56,900
Within a few years, Teletypewriters were in every computer lab around the world.

00:04:56,900 --> 00:05:01,060
People would hook them up over telephone lines so the students and researchers could access

00:05:01,060 --> 00:05:04,780
the computer from their home.

00:05:04,780 --> 00:05:06,520
Super popular.

00:05:06,520 --> 00:05:13,710
CRTs did exist at this time, but they were not used for terminals, because memory was

00:05:13,710 --> 00:05:15,080
really, really expensive.

00:05:15,080 --> 00:05:19,660
That core memory that you saw earlier was the state of the art in RAM.

00:05:19,660 --> 00:05:28,389
Until about 1969, when RAM finally became cheap enough that you could reasonably build

00:05:28,389 --> 00:05:31,139
almost consumer grade hardware.

00:05:31,139 --> 00:05:39,600
This is the DataPoint 3300, one of the first video terminals.

00:05:39,600 --> 00:05:44,030
So at first, these video terminals just sort of emulated the paper and ink terminals.

00:05:44,030 --> 00:05:49,370
You would type into them, and instead of the response from the computer being printed out

00:05:49,370 --> 00:05:53,630
on paper, it was just displayed on the screen.

00:05:53,630 --> 00:06:02,160
So because VTs, video terminals, displayed characters on a screen, it meant they were

00:06:02,160 --> 00:06:06,340
a lot more flexible than a teletypewriter.

00:06:06,340 --> 00:06:11,900
You could move the cursor around, delete and insert characters, you could scroll through

00:06:11,900 --> 00:06:13,949
a long document without having to print the whole thing out.

00:06:13,949 --> 00:06:19,970
It would enable this whole new class of interactions that humans could use computers through.

00:06:19,970 --> 00:06:23,280
So Teletypewriters were still popular, though.

00:06:23,280 --> 00:06:28,330
To stay compatible with the Teletypewriters, video terminals used the same protocol, which

00:06:28,330 --> 00:06:32,479
was more or less ASCII.

00:06:32,479 --> 00:06:37,960
The computer would send ASCII characters and they would be displayed on screen.

00:06:37,960 --> 00:06:42,680
But ASCII is only 128 characters, and there are...

00:06:42,680 --> 00:06:46,610
So 32 and up are all printable characters.

00:06:46,610 --> 00:06:50,990
And these are the control characters that were available to the computer for things

00:06:50,990 --> 00:06:52,090
that are not printing characters.

00:06:52,090 --> 00:06:53,690
There are 33 of them.

00:06:53,690 --> 00:06:59,419
The DataPoint 3300, one of the first video terminals, already used 18 of these to do

00:06:59,419 --> 00:07:00,419
things.

00:07:00,419 --> 00:07:05,949
And the manufacturers wanted to do more than 33 different things.

00:07:05,949 --> 00:07:07,710
So they used this escape hatch.

00:07:07,710 --> 00:07:12,990
The hexcode 1b in ASCII is “escape”.

00:07:12,990 --> 00:07:17,140
When the terminal wanted to do something that was not print a character, it would send this

00:07:17,140 --> 00:07:22,020
escape code, and then followed by a sequence of instructions that would sort of describe

00:07:22,020 --> 00:07:23,020
what to do next.

00:07:23,020 --> 00:07:29,849
So in this case, it sends escape and then [1d, and on my terminal at least, this means

00:07:29,849 --> 00:07:35,199
move the cursor one step to the left.

00:07:35,199 --> 00:07:36,199
So there was like...

00:07:36,199 --> 00:07:41,960
One standard that all of the terminal manufacturers got together and agreed on a series of escape

00:07:41,960 --> 00:07:44,139
codes, and what each one would do.

00:07:44,139 --> 00:07:45,509
No, no.

00:07:45,509 --> 00:07:48,710
That's not at all what happened.

00:07:48,710 --> 00:07:50,110
(laughter)

00:07:50,110 --> 00:07:54,580
There are hundreds of different companies manufacturing terminals, and hundreds of different

00:07:54,580 --> 00:07:58,229
models and they all had different capabilities and every one of them wanted to differentiate

00:07:58,229 --> 00:08:03,240
their terminal so they would invent something their terminal could do that no one else's

00:08:03,240 --> 00:08:11,580
could do and they would choose whatever escape code they thought made sense for their terminal.

00:08:11,580 --> 00:08:17,090
So in 1978, this guy, Bill Joy, was writing a text editor, and he wanted it to work on

00:08:17,090 --> 00:08:18,430
lots of different terminals.

00:08:18,430 --> 00:08:21,840
No matter what lab you were in, what computer you’re using, what terminal you were using

00:08:21,840 --> 00:08:28,150
to access it, he wanted that text editor to work on that terminal.

00:08:28,150 --> 00:08:32,250
So he started out by hard coding tests for, like, are you using a DeckWriter?

00:08:32,250 --> 00:08:33,650
Are you using a DataPoint?

00:08:33,650 --> 00:08:38,450
And he would program in the appropriate escape codes to use for that terminal.

00:08:38,450 --> 00:08:43,240
But then he got sick of that and he invented terminfo.

00:08:43,240 --> 00:08:48,740
So terminfo is this database of escape codes, sequences, and some other information about

00:08:48,740 --> 00:08:51,940
a whole bunch of different terminals, and it's on all of your computers right now in

00:08:51,940 --> 00:08:53,010
this directory.

00:08:53,010 --> 00:08:55,550
You can go check it out.

00:08:55,550 --> 00:09:02,200
It is actually complicated enough to describe all these different ways of handling different

00:09:02,200 --> 00:09:06,850
kinds of terminal escape codes that it has its own programming language with conditionals

00:09:06,850 --> 00:09:09,610
and variables and arithmetic and stuff.

00:09:09,610 --> 00:09:12,830
And compatibility bugs.

00:09:12,830 --> 00:09:15,420
And there's a tool called infocomp that you can run.

00:09:15,420 --> 00:09:17,740
At least on Macs.

00:09:17,740 --> 00:09:20,700
I think this also comes on most Linux distributions installed by default.

00:09:20,700 --> 00:09:25,880
And by default, it'll show you the information for the terminal that you're currently running.

00:09:25,880 --> 00:09:27,510
You can also ask it for a different terminal.

00:09:27,510 --> 00:09:32,170
So this one -- you can actually see the terminal I'm using is called iTerm 2, but it has given

00:09:32,170 --> 00:09:37,870
me the information for xterm 256 color, so my terminal is pretending to be an xterm even

00:09:37,870 --> 00:09:39,570
though it isn't.

00:09:39,570 --> 00:09:45,720
And here you can see clear screen is ‘escape [H escape [2J’.

00:09:45,720 --> 00:09:50,510
So if I send that sequence of characters, my terminal should clear the screen.

00:09:50,510 --> 00:09:55,190
At least, that's what the database says I should send if I want to clear the screen.

00:09:55,190 --> 00:10:00,990
So the terminfo database on my screen has 2500 entries in it, including for the DataPoint

00:10:00,990 --> 00:10:03,370
3300, which is super cool.

00:10:03,370 --> 00:10:12,540
My 2019 Macbook Pro knows how to control a 1965 video terminal that I don't know if any

00:10:12,540 --> 00:10:14,430
of them even exist anymore.

00:10:14,430 --> 00:10:18,250
But in case somebody hooks it up to my computer, don't worry.

00:10:18,250 --> 00:10:20,750
It knows how to drive it!

00:10:20,750 --> 00:10:24,790
Also, your computer comes with a manual on this format and a bunch of the other tools.

00:10:24,790 --> 00:10:30,959
So if you just type ‘man terminfo’, you'll get this really quite good description of

00:10:30,959 --> 00:10:34,800
this database and how it's arranged and how to read it.

00:10:34,800 --> 00:10:37,170
So you now know everything about ncurses.

00:10:37,170 --> 00:10:41,400
No, there's a ton more that's not stored in terminfo.

00:10:41,400 --> 00:10:42,740
But ncurses is Open Source.

00:10:42,740 --> 00:10:45,860
You can just go and read the code.

00:10:45,860 --> 00:10:49,140
Mouseinfo is something that's not in terminfo.

00:10:49,140 --> 00:10:50,910
I think that's super cool.

00:10:50,910 --> 00:10:58,440
All this information is available and it's not beyond your grasp to know.

00:10:58,440 --> 00:11:00,079
So thanks for listening.

00:11:00,079 --> 00:11:04,910
You can follow me on Mastodon, and source code for this talk, which is all custom, is

00:11:04,910 --> 00:11:07,269
JavaScript pretending to be ncurses.

00:11:07,269 --> 00:11:10,640
So it reads the terminfo database and everything.

00:11:10,640 --> 00:11:14,230
You can find the code for that there.

00:11:14,230 --> 00:11:15,230
And go read some code!

00:11:15,230 --> 00:11:16,230
Nothing is beyond your grasp.

00:11:16,230 --> 00:11:17,060

YouTube URL: https://www.youtube.com/watch?v=dGs7vDeGS7U


