Title: !!Con West 2020 - Jason Orendorff: Wolf, Goat, and Cabbage In Two Styles!!
Publication date: 2020-03-23
Playlist: !!Con West 2020
Description: 
	Presented at !!Con West 2020: http://bangbangcon.com/west

Consider two programming languages, both delightfully strange, but for good reasons. What if comparing them sheds light on how different programming languages enable thinking about time and data?

Inform 7 is an unusual programming language that looks a bit like English prose. Alloy is a model specification language that looks kind of like advanced math. They are languages from two different worlds, but both are about objects and their relationships. Both come with interesting visualization tools. And both have some issues dealing with change. In this talk, we’ll implement an ancient puzzle in both languages, explore their unique charms, and reflect on whether it’s possible to step into the same river twice.

#bangbangcon #bangbangconwest #bangbangconwest2020
Captions: 
	00:00:27,310 --> 00:00:31,610
Once upon a time, there was a farmer named you.

00:00:31,610 --> 00:00:37,090
You went to a fair and bought some cabbages and a goat.

00:00:37,090 --> 00:00:38,370
And a wolf.

00:00:38,370 --> 00:00:40,079
You were at the fair.

00:00:40,079 --> 00:00:42,600
You were in a good mood.

00:00:42,600 --> 00:00:44,280
You bought a wolf.

00:00:44,280 --> 00:00:50,510
But it complicates your return journey, because your boat can only carry one thing at a time.

00:00:50,510 --> 00:00:53,570
And wolves eat goats, so that was no good.

00:00:53,570 --> 00:00:55,710
And goats eat cabbages.

00:00:55,710 --> 00:01:00,910
So that's no good.

00:01:00,910 --> 00:01:02,200
Maybe you've heard this puzzle before.

00:01:02,200 --> 00:01:04,620
How do you get all three things safely to the other side?

00:01:04,620 --> 00:01:09,600
Today we're gonna tackle this puzzle using two different programming languages.

00:01:09,600 --> 00:01:10,600
My name is Jason.

00:01:10,600 --> 00:01:15,730
And I don't think of myself as a programming language hipster, but I have to admit...

00:01:15,730 --> 00:01:18,020
I kind of collect them.

00:01:18,020 --> 00:01:23,680
I'm cursed with good taste in programming languages.

00:01:23,680 --> 00:01:28,110
And I flew across the country to hook y'all up with two amazing indie languages that you've

00:01:28,110 --> 00:01:31,359
probably never heard of.

00:01:31,359 --> 00:01:34,270
These two languages -- I picked them because they're full of surprises.

00:01:34,270 --> 00:01:38,420
You won't learn two whole languages in the next nine minutes, but you will go...

00:01:38,420 --> 00:01:39,420
What?!

00:01:39,420 --> 00:01:41,729
Half a dozen times.

00:01:41,729 --> 00:01:45,000
Inform 7...

00:01:45,000 --> 00:01:46,499
Some of you know this one.

00:01:46,499 --> 00:01:52,710
Inform 7 is a language for describing small finite virtual worlds with rooms and objects

00:01:52,710 --> 00:01:53,759
in those rooms.

00:01:53,759 --> 00:01:56,460
And then running interactive simulations in them.

00:01:56,460 --> 00:02:00,701
Also, for some reason, Inform 7 code looks kind of like English, so you can start an

00:02:00,701 --> 00:02:03,100
Inform project like this.

00:02:03,100 --> 00:02:04,119
Chapter one.

00:02:04,119 --> 00:02:06,119
The East river bank is a room.

00:02:06,119 --> 00:02:09,030
You can also add some documentation.

00:02:09,030 --> 00:02:11,600
So we're saying...

00:02:11,600 --> 00:02:12,600
Okay.

00:02:12,600 --> 00:02:13,600
New room.

00:02:13,600 --> 00:02:17,950
It's called the East riverbank and Inform knows a room is a type of object, a place

00:02:17,950 --> 00:02:20,540
we can put stuff.

00:02:20,540 --> 00:02:21,740
Chapter 2.

00:02:21,740 --> 00:02:23,700
The boat is an enterable container.

00:02:23,700 --> 00:02:26,410
Inform knows what enterable and container means.

00:02:26,410 --> 00:02:30,490
So we're defining another object called a boat, and telling Inform what type it is and

00:02:30,490 --> 00:02:32,510
where it is.

00:02:32,510 --> 00:02:39,819
There's a class hierarchy, so we can define types by saying a treasure is a kind of thing.

00:02:39,819 --> 00:02:42,840
And if we define a wolf and so on and say...

00:02:42,840 --> 00:02:47,840
The wolf, the goat, and the cabbages are treasures, that means that...

00:02:47,840 --> 00:02:50,890
Well, it means exactly what it looks like!

00:02:50,890 --> 00:02:52,849
They're treasures.

00:02:52,849 --> 00:02:55,340
Why am I explaining English to you?

00:02:55,340 --> 00:03:00,930
Now, if you've kicked around for a while, you know that there are other programming

00:03:00,930 --> 00:03:02,760
languages that have this same gimmick.

00:03:02,760 --> 00:03:04,290
They look sort of like English.

00:03:04,290 --> 00:03:05,490
Here are a couple of them.

00:03:05,490 --> 00:03:08,069
But I could fill a lot of slides with these.

00:03:08,069 --> 00:03:13,709
What these all have in common is: They are not fooling anyone!

00:03:13,709 --> 00:03:16,000
You can tell it's code!

00:03:16,000 --> 00:03:18,970
Every word is a different stinking color!

00:03:18,970 --> 00:03:20,490
(laughter)

00:03:20,490 --> 00:03:25,940
Well, Inform 7 isn't fooling anyone either, but it does take English grammar a little

00:03:25,940 --> 00:03:27,140
more seriously.

00:03:27,140 --> 00:03:33,000
It maps interesting bits of English to interesting programming concepts, so learning Inform means

00:03:33,000 --> 00:03:37,010
seeing both programming and English in a new light.

00:03:37,010 --> 00:03:42,920
For example, Inform knows that the word "is" has a few meanings, so you can use it to define

00:03:42,920 --> 00:03:48,079
words, express physical relationships, or say what type something is.

00:03:48,079 --> 00:03:54,030
Inform knows that adjectives indicate characteristics of things and you can use "is" to attach adjectives

00:03:54,030 --> 00:04:00,980
to a noun, like a boat.

00:04:00,980 --> 00:04:02,099
All of this is very natural.

00:04:02,099 --> 00:04:03,099
It works great.

00:04:03,099 --> 00:04:04,159
It reads great.

00:04:04,159 --> 00:04:06,019
More on this later.

00:04:06,019 --> 00:04:08,520
I have to spring something on you.

00:04:08,520 --> 00:04:16,090
When you actually run an Inform project, you get this.

00:04:16,090 --> 00:04:18,019
The prompt awaits your command.

00:04:18,019 --> 00:04:21,500
Because Inform 7 is a programming language for writing interactive fiction.

00:04:21,500 --> 00:04:24,120
Text adventure games.

00:04:24,120 --> 00:04:25,870
So you can say things like...

00:04:25,870 --> 00:04:26,870
Oops.

00:04:26,870 --> 00:04:28,540
Excuse me.

00:04:28,540 --> 00:04:30,320
So you type simple commands.

00:04:30,320 --> 00:04:33,970
The game responds.

00:04:33,970 --> 00:04:37,110
And Inform lets you customize how commands are handled.

00:04:37,110 --> 00:04:40,470
You can write something like: Instead of taking the boat, say there's no point carrying a

00:04:40,470 --> 00:04:42,080
boat around.

00:04:42,080 --> 00:04:43,930
This is called a rule.

00:04:43,930 --> 00:04:45,740
Inform has this unusual execution model.

00:04:45,740 --> 00:04:48,310
It starts out a little like React, if you've used that.

00:04:48,310 --> 00:04:54,060
When the user types pick up the boat, Inform creates an object called an action that represents

00:04:54,060 --> 00:04:55,680
the user intent.

00:04:55,680 --> 00:04:59,440
And then it runs the action through a bunch of rules to decide how to respond.

00:04:59,440 --> 00:05:00,479
First it checks your rules.

00:05:00,479 --> 00:05:04,390
So if the current action is taking the boat, it sees this.

00:05:04,390 --> 00:05:08,020
And it stops and prints this message instead.

00:05:08,020 --> 00:05:10,500
But Inform also has some built-in rules.

00:05:10,500 --> 00:05:11,630
The standard rules.

00:05:11,630 --> 00:05:14,540
Which are kind of like a standard library for common sense.

00:05:14,540 --> 00:05:21,370
It contains such wonders as the can't take scenery rule.

00:05:21,370 --> 00:05:24,460
The can't take what's already taken rule.

00:05:24,460 --> 00:05:27,310
And the can't take yourself rule.

00:05:27,310 --> 00:05:28,310
(laughter)

00:05:28,310 --> 00:05:31,710
I knew this would happen.

00:05:31,710 --> 00:05:36,150
I'm disappointed in everyone who laughed at that joke.

00:05:36,150 --> 00:05:39,930
A more complex rule can use syntax kind of like Python with if statements and colons

00:05:39,930 --> 00:05:43,340
and indentations to indicate structure.

00:05:43,340 --> 00:05:47,990
So there is also a normal programming language in here.

00:05:47,990 --> 00:05:48,990
Surprise!

00:05:48,990 --> 00:05:50,770
Inform also reminds me a little bit of CSS.

00:05:50,770 --> 00:05:53,220
This first line is kind of like a selector.

00:05:53,220 --> 00:05:55,520
They can be simple like this or complicated.

00:05:55,520 --> 00:05:58,150
There are standard rules, which do something.

00:05:58,150 --> 00:06:00,729
And you can override them if they're not doing what you want.

00:06:00,729 --> 00:06:04,910
When multiple rules match, there's a system to decide precedence, and so on.

00:06:04,910 --> 00:06:08,849
When you want something to apply and it's not applying for some reason, it feels exactly

00:06:08,849 --> 00:06:10,290
like CSS.

00:06:10,290 --> 00:06:13,410
Still, overall, Inform is brilliant.

00:06:13,410 --> 00:06:16,800
The amount of work and love and innovation that went into it is mind boggling.

00:06:16,800 --> 00:06:17,800
Check it out.

00:06:17,800 --> 00:06:18,800
You'll love it.

00:06:18,800 --> 00:06:22,720
Two last surprises about Inform -- the documentation is the best time you'll ever have reading

00:06:22,720 --> 00:06:24,030
a software manual.

00:06:24,030 --> 00:06:25,480
I promise.

00:06:25,480 --> 00:06:27,669
It's witty, charming, full of wonderful examples.

00:06:27,669 --> 00:06:29,099
Unreasonably good.

00:06:29,099 --> 00:06:33,970
And if you take one thing away from this talk, remember that Inform has syntax for enabling

00:06:33,970 --> 00:06:35,620
the Oxford comma.

00:06:35,620 --> 00:06:36,620
(applause)

00:06:36,620 --> 00:06:40,940
Which is the nerdiest feature of any programming language ever.

00:06:40,940 --> 00:06:45,661
The other language I would like to show you is called Alloy.

00:06:45,661 --> 00:06:46,661
(scattered whoops from audience)

00:06:46,661 --> 00:06:47,661
Now, Alloy...

00:06:47,661 --> 00:06:50,050
Alloy is a little different.

00:06:50,050 --> 00:06:51,810
It looks like code.

00:06:51,810 --> 00:06:52,810
It has classes.

00:06:52,810 --> 00:06:55,660
You can say class person has a field loves.

00:06:55,660 --> 00:06:57,690
Which is a set of people.

00:06:57,690 --> 00:07:01,300
Except Alloy is a little too cool for classes.

00:07:01,300 --> 00:07:03,720
So they're called signatures.

00:07:03,720 --> 00:07:05,120
I don't make the rules.

00:07:05,120 --> 00:07:08,460
The other funny thing is there is no new operator in Alloy.

00:07:08,460 --> 00:07:12,800
You can't directly create person objects, because Alloy creates all the objects for

00:07:12,800 --> 00:07:13,800
you.

00:07:13,800 --> 00:07:15,120
You describe the world you want to see.

00:07:15,120 --> 00:07:21,159
One where there are people and there is love, and then you click the button and Alloy creates

00:07:21,159 --> 00:07:22,560
that world for you.

00:07:22,560 --> 00:07:24,560
Or many worlds.

00:07:24,560 --> 00:07:27,960
So we're gonna run this model for three to see worlds containing up to three people.

00:07:27,960 --> 00:07:29,970
Alloy draws these graphs for you.

00:07:29,970 --> 00:07:31,720
And there's a next button.

00:07:31,720 --> 00:07:32,720
So you click it.

00:07:32,720 --> 00:07:33,990
It shows you another picture.

00:07:33,990 --> 00:07:34,990
Aw.

00:07:34,990 --> 00:07:37,230
And another.

00:07:37,230 --> 00:07:46,800
And something I learned while making these slides is that love is rough.

00:07:46,800 --> 00:07:50,850
We could of course show this kind of data using a table with two columns.

00:07:50,850 --> 00:07:51,850
Right?

00:07:51,850 --> 00:07:53,960
Instead of a picture with arrows, we could use a table.

00:07:53,960 --> 00:07:55,419
Same data, different form.

00:07:55,419 --> 00:07:56,419
Right?

00:07:56,419 --> 00:07:58,199
And this is a very big deal in Alloy.

00:07:58,199 --> 00:08:02,550
Tables are the same thing as object fields.

00:08:02,550 --> 00:08:03,880
Which are the same thing as graphs.

00:08:03,880 --> 00:08:09,860
The common idea here is called a relation, and Alloy is all about some relations.

00:08:09,860 --> 00:08:12,699
Surprisingly, Inform is too.

00:08:12,699 --> 00:08:15,220
Both languages go real deep on relations.

00:08:15,220 --> 00:08:18,150
In Alloy, you write sig person loves set person.

00:08:18,150 --> 00:08:22,120
In Inform, you write love relates various people to various people.

00:08:22,120 --> 00:08:25,539
And it really means exactly the same thing.

00:08:25,539 --> 00:08:28,360
And then you define a verb.

00:08:28,360 --> 00:08:30,539
The verb "to love" means the love relation.

00:08:30,539 --> 00:08:34,400
And this lets you use the word "love" when writing out the source code of your game,

00:08:34,400 --> 00:08:36,880
which is a really satisfying thing.

00:08:36,880 --> 00:08:40,080
In school, you may have learned that verbs are actions.

00:08:40,080 --> 00:08:43,080
Hit, kick, run, jump, swim.

00:08:43,080 --> 00:08:47,110
But Inform knows that many English verbs express relations.

00:08:47,110 --> 00:08:48,450
Verbs like love.

00:08:48,450 --> 00:08:51,200
And Inform supports both kinds of verb.

00:08:51,200 --> 00:08:54,070
As a result, you can write some pretty amazing ideas very simply.

00:08:54,070 --> 00:08:56,930
I don't have time to explain all of this, but the point is English has some powerful

00:08:56,930 --> 00:08:58,910
relational calculus built into it.

00:08:58,910 --> 00:09:03,320
It's pretty awesome that Inform has that too.

00:09:03,320 --> 00:09:08,110
The standard rules of Inform begins with a long list of relations that underpin the simulation.

00:09:08,110 --> 00:09:13,500
This sentence defining the verb "to carry" is the reason I can write "the player is carrying

00:09:13,500 --> 00:09:16,220
a sack of cabbages" and Inform understands.

00:09:16,220 --> 00:09:20,990
Anyway, we're not here to make friends.

00:09:20,990 --> 00:09:26,110
We're here to tell a story about four specific things, called objects, and instead of loving

00:09:26,110 --> 00:09:29,610
each other, they want to eat each other.

00:09:29,610 --> 00:09:30,790
And here they are.

00:09:30,790 --> 00:09:36,510
Now, if I ran this right now, it would create maybe three wolves, which I don't want.

00:09:36,510 --> 00:09:39,470
So we have to tell Alloy there's just one of each.

00:09:39,470 --> 00:09:42,630
Now if I push the button, what is gonna happen?

00:09:42,630 --> 00:09:45,370
Alloy is gonna create food webs.

00:09:45,370 --> 00:09:50,380
It's just a Battle Royale of cannibalism here.

00:09:50,380 --> 00:09:58,640
They say goats will eat anything, but I've never seen a goat try to eat itself.

00:09:58,640 --> 00:10:00,150
(laughter)

00:10:00,150 --> 00:10:03,100
Alloy is a little bit creative.

00:10:03,100 --> 00:10:07,130
And if you want it to tone it down a little bit, you have to tell it what you want to

00:10:07,130 --> 00:10:09,600
see, using something called a fact.

00:10:09,600 --> 00:10:10,940
This fact says: Okay, Alloy.

00:10:10,940 --> 00:10:14,630
I'm gonna tell you exactly what this "eats" relation contains.

00:10:14,630 --> 00:10:15,630
Wolf eats goat.

00:10:15,630 --> 00:10:17,200
Goat eats cabbages.

00:10:17,200 --> 00:10:19,100
That's all.

00:10:19,100 --> 00:10:21,380
And now we get just the one picture.

00:10:21,380 --> 00:10:22,580
Okay.

00:10:22,580 --> 00:10:24,130
So now the interesting part.

00:10:24,130 --> 00:10:27,700
This puzzle is about getting across the river, which is something that unfolds in space and

00:10:27,700 --> 00:10:28,700
time.

00:10:28,700 --> 00:10:30,140
The space part is pretty easy.

00:10:30,140 --> 00:10:31,560
We say there's such a thing as a riverbank.

00:10:31,560 --> 00:10:34,110
But what about time?

00:10:34,110 --> 00:10:38,660
In most languages, things happen in a certain order, defined by the language.

00:10:38,660 --> 00:10:41,290
Or things at least happen.

00:10:41,290 --> 00:10:47,100
In Alloy, the existence of time is a library feature that you have to import.

00:10:47,100 --> 00:10:51,290
And the way it works is super weird.

00:10:51,290 --> 00:10:54,260
We're going to have to declare something that I'm gonna call a snapshot.

00:10:54,260 --> 00:10:57,240
See, once we have time in our model, Alloy isn't just gonna generate pictures.

00:10:57,240 --> 00:10:59,139
It's gonna make a movie for us.

00:10:59,139 --> 00:11:01,480
A snapshot is one frame of this movie.

00:11:01,480 --> 00:11:02,480
What's in this snapshot?

00:11:02,480 --> 00:11:06,050
The only thing we need to track is the location of everything.

00:11:06,050 --> 00:11:11,260
Each snapshot has a field that maps each object to the one riverbank where it is.

00:11:11,260 --> 00:11:15,450
That arrow means relation and it shows up literally as an arrow pointing from each object

00:11:15,450 --> 00:11:17,720
to its relation in the graph.

00:11:17,720 --> 00:11:22,829
And then we open the ordering module, which just says that there's a linear sequence of

00:11:22,829 --> 00:11:24,700
these snapshots.

00:11:24,700 --> 00:11:29,070
It gives us something called first, something called last, and so on.

00:11:29,070 --> 00:11:31,560
What does Alloy show us now?

00:11:31,560 --> 00:11:36,290
At the bottom, you can see there's a control for clicking through the sequence of snapshots.

00:11:36,290 --> 00:11:39,149
And Alloy is showing the location relation, as advertised.

00:11:39,149 --> 00:11:40,880
But notice something funny.

00:11:40,880 --> 00:11:44,839
There's only one riverbank, which is unusual for rivers.

00:11:44,839 --> 00:11:47,139
They usually have two.

00:11:47,139 --> 00:11:48,139
Maybe it's a Mobius River.

00:11:48,139 --> 00:11:49,250
I don't know.

00:11:49,250 --> 00:11:51,310
So we'll give it another fact.

00:11:51,310 --> 00:11:54,380
Saying the number of riverbanks is two.

00:11:54,380 --> 00:11:55,380
There we go!

00:11:55,380 --> 00:11:56,380
That's better.

00:11:56,380 --> 00:11:59,970
Except the goat is starting out on the other side of the river.

00:11:59,970 --> 00:12:01,840
What is it doing over there?

00:12:01,840 --> 00:12:04,070
We add a fact that says...

00:12:04,070 --> 00:12:05,070
Okay.

00:12:05,070 --> 00:12:08,810
There's one bank that's the first location of all objects and one that's the last location

00:12:08,810 --> 00:12:12,130
of all objects, and they're different banks.

00:12:12,130 --> 00:12:17,000
And sure enough, all four objects start out on one river bank, and if we click through,

00:12:17,000 --> 00:12:19,720
they end up on the other.

00:12:19,720 --> 00:12:22,000
We have to tell Alloy every little thing.

00:12:22,000 --> 00:12:25,940
Inform has a bunch of common sense rules in its standard library.

00:12:25,940 --> 00:12:28,139
Alloy doesn't have that.

00:12:28,139 --> 00:12:29,139
What other rules are we missing?

00:12:29,139 --> 00:12:33,350
Well, maybe you could figure that out for yourself, but for example, we haven't written

00:12:33,350 --> 00:12:35,690
any rules about movement yet.

00:12:35,690 --> 00:12:41,810
So these objects are all free to teleport back and forth across the river at their leisure.

00:12:41,810 --> 00:12:42,950
There are a few other bits missing too.

00:12:42,950 --> 00:12:45,470
All in all, the solution is 40 lines of code, and it does work.

00:12:45,470 --> 00:12:47,660
I'll link to it later.

00:12:47,660 --> 00:12:50,190
So what is Alloy for?

00:12:50,190 --> 00:12:52,480
It's not for solving old logic puzzles.

00:12:52,480 --> 00:12:54,560
That's not what this language is for.

00:12:54,560 --> 00:12:58,950
The idea is you're designing a complex system, pick an aspect of it that is interesting,

00:12:58,950 --> 00:13:03,850
make an Alloy model of that part and say: This is broken if all threads get blocked

00:13:03,850 --> 00:13:08,430
or if two different servers can give different answers or whatever.

00:13:08,430 --> 00:13:14,050
And say run broken for 10, and if it's broken, Alloy shows you a picture of the exact test

00:13:14,050 --> 00:13:15,260
case that breaks your design.

00:13:15,260 --> 00:13:16,560
Pretty cool.

00:13:16,560 --> 00:13:20,519
You have to have a system that's complicated enough that you want help but simple enough

00:13:20,519 --> 00:13:24,760
that you want to model it in Alloy, which is a lot of work.

00:13:24,760 --> 00:13:27,070
Is this useful in the real world?

00:13:27,070 --> 00:13:29,139
I don't know.

00:13:29,139 --> 00:13:30,139
Maybe?

00:13:30,139 --> 00:13:32,800
Why am I even talking about this?

00:13:32,800 --> 00:13:36,180
I love weird programming languages.

00:13:36,180 --> 00:13:38,610
I love having to think in weird ways.

00:13:38,610 --> 00:13:42,640
But what I love best is when a weird language is trying to do something.

00:13:42,640 --> 00:13:46,980
It has a mission that explains why it's like that.

00:13:46,980 --> 00:13:50,829
I aspire to be that kind of person myself.

00:13:50,829 --> 00:13:53,589
So far, I'm just weird.

00:13:53,589 --> 00:13:57,910
I love that Inform is a huge language, with a 27 chapter manual and a rich set of standard

00:13:57,910 --> 00:14:03,250
rules because English is a really good language for talking about rooms and people and everyday

00:14:03,250 --> 00:14:04,360
things.

00:14:04,360 --> 00:14:11,010
I love how Alloy reduces fields and data structures and time to a single unifying idea, the relation.

00:14:11,010 --> 00:14:16,149
Because then it can use powerful logical analysis tools to find bugs in software before it's

00:14:16,149 --> 00:14:18,110
built.

00:14:18,110 --> 00:14:21,870
These languages surprise me.

00:14:21,870 --> 00:14:27,200
Languages like this remind me that there are whole other kinds of programming.

00:14:27,200 --> 00:14:28,200
There's more out there.

00:14:28,200 --> 00:14:31,380
There is more delight left in programming.

00:14:31,380 --> 00:14:34,550
There are more surprises waiting to be discovered.

00:14:34,550 --> 00:14:36,000
Some days, I need that reminder.

00:14:36,000 --> 00:14:37,780
Thank you.

00:14:37,780 --> 00:14:41,900

YouTube URL: https://www.youtube.com/watch?v=KyAHtqi3PUY


