Title: !!Con 2020 - Printing floating point numbers is surprisingly hard!! by Gargi Sharma
Publication date: 2020-05-28
Playlist: !!Con 2020
Description: 
	Printing floating point numbers is surprisingly hard!! by Gargi Sharma

Not many of us have wondered “how are floating-point numbers rendered as text strings?” and for good reason! This doesn’t seem like a hard problem to solve! But even in 2020, you don’t have guarantees in some languages that when you convert a string to float and vice versa you will get the same number! In this talk we will explore why printing floating point numbers is hard, arbitrary precision arithmetic, and the state-of-the-art dragon algorithms for printing floating point numbers!

Gargi is a software engineer who loves systems programming, planning elaborate city walks and Modern Art.
Captions: 
	00:00:12,920 --> 00:00:19,560
hi hi my name is gurgi and I'm going to

00:00:17,520 --> 00:00:23,029
be talking about how pretty loading part

00:00:19,560 --> 00:00:25,710
in our system basically hurt

00:00:23,029 --> 00:00:29,039
so you might have an experience with

00:00:25,710 --> 00:00:31,170
this like you have a piping wrapper on

00:00:29,039 --> 00:00:34,350
you in writing so point 1 ended up and

00:00:31,170 --> 00:00:36,090
you can say point 1 as the effort and

00:00:34,350 --> 00:00:39,750
then unit serpentine and they rapidly

00:00:36,090 --> 00:00:44,370
cancer by two - Danny after your point

00:00:39,750 --> 00:00:47,460
one and zero and again so three zero

00:00:44,370 --> 00:00:50,610
zero zero zero zero zero seven zero zero

00:00:47,460 --> 00:00:53,070
zero zero zero zero zero four that's the

00:00:50,610 --> 00:00:55,200
effort which is surprising guide because

00:00:53,070 --> 00:00:57,660
the answer should be zero plenty like

00:00:55,200 --> 00:01:01,379
it's time 20 where computers tell me

00:00:57,660 --> 00:01:04,289
okay I haven't a compiler or the

00:01:01,379 --> 00:01:07,560
interpreter here but more often than not

00:01:04,289 --> 00:01:12,690
in step operating or Gordon that's the

00:01:07,560 --> 00:01:15,539
problem so what is that human slop

00:01:12,690 --> 00:01:18,360
decimal so if you have certain point two

00:01:15,539 --> 00:01:21,599
five you can represent it as 25 we'd

00:01:18,360 --> 00:01:24,720
finished 4-2 in decibel and it came up a

00:01:21,599 --> 00:01:27,119
computer's love binary so if you have

00:01:24,720 --> 00:01:30,569
2.5 occator percent aghast

00:01:27,119 --> 00:01:33,349
hello an interest for my stood and you

00:01:30,569 --> 00:01:36,690
have an exact binary representation and

00:01:33,349 --> 00:01:38,670
that's two binary is simplifying

00:01:36,690 --> 00:01:45,860
teachers because you have a limited

00:01:38,670 --> 00:01:48,840
range but if you have let's se 0.3 and

00:01:45,860 --> 00:01:51,599
according to I Triple E 754 floating

00:01:48,840 --> 00:01:53,729
point standard you have the same bit in

00:01:51,599 --> 00:01:56,520
the need of some distressful exponent

00:01:53,729 --> 00:01:58,860
and so for the mantissa and you have the

00:01:56,520 --> 00:02:02,880
representation for seven three in that

00:01:58,860 --> 00:02:05,910
and if we convert it back to decimal

00:02:02,880 --> 00:02:08,160
from the binary representation we get

00:02:05,910 --> 00:02:14,310
zero point three zero zero zero four

00:02:08,160 --> 00:02:17,400
eight a to a 25 which is because

00:02:14,310 --> 00:02:19,050
Desmond to find a is one making fat

00:02:17,400 --> 00:02:22,330
ability for filling

00:02:19,050 --> 00:02:25,240
so all binary numbers have a

00:02:22,330 --> 00:02:26,980
corresponding decimal representation but

00:02:25,240 --> 00:02:31,290
oil doesn't emerge did not have

00:02:26,980 --> 00:02:34,270
corresponding binary representation and

00:02:31,290 --> 00:02:37,300
one thing that you come across a lot

00:02:34,270 --> 00:02:39,280
when we talk about algorithms for

00:02:37,300 --> 00:02:42,460
printing floating point numbers is the

00:02:39,280 --> 00:02:46,210
idea and the concept of correctness so

00:02:42,460 --> 00:02:48,970
let's say you have a number we that maps

00:02:46,210 --> 00:02:52,060
to zero point one zero zero zero zero

00:02:48,970 --> 00:02:54,340
zero zero zero five but when you were

00:02:52,060 --> 00:02:56,740
treated what were what is the correct

00:02:54,340 --> 00:02:59,110
number to train so there's an entire

00:02:56,740 --> 00:03:02,410
range in the number on the number line

00:02:59,110 --> 00:03:04,240
that will map to me and in that entire

00:03:02,410 --> 00:03:05,950
range what we want to create is the

00:03:04,240 --> 00:03:10,330
shortest number which will be the

00:03:05,950 --> 00:03:12,640
correct answer for printing this filling

00:03:10,330 --> 00:03:15,190
this floating point number

00:03:12,640 --> 00:03:18,840
so the first algorithm to come around

00:03:15,190 --> 00:03:23,790
for a finishing point now I was in 1990

00:03:18,840 --> 00:03:27,010
called dragon fort so in the early 1970s

00:03:23,790 --> 00:03:29,680
systems prettiest incorrect decimal

00:03:27,010 --> 00:03:32,470
bodies with binary numbers and they did

00:03:29,680 --> 00:03:36,340
provided and he found on her own they

00:03:32,470 --> 00:03:39,400
might be and in nineteen eighty eighty

00:03:36,340 --> 00:03:42,120
the activity seventy seventy seven fifty

00:03:39,400 --> 00:03:45,130
four thirty point started came around

00:03:42,120 --> 00:03:48,250
but people weren't more less passive

00:03:45,130 --> 00:03:50,650
working code for reading or writing

00:03:48,250 --> 00:03:53,470
floating-point hours and they get by too

00:03:50,650 --> 00:03:56,830
much about correctness because the idea

00:03:53,470 --> 00:04:00,040
was that thirty point is the impact

00:03:56,830 --> 00:04:04,709
inaccurate anyway so to practice like

00:04:00,040 --> 00:04:08,620
that guys he wrote this paper on

00:04:04,709 --> 00:04:10,600
printing floating point numbers so and

00:04:08,620 --> 00:04:14,049
they put across like folk like you are

00:04:10,600 --> 00:04:16,630
to say like what how have their creep

00:04:14,049 --> 00:04:20,140
out how do you print the correct of

00:04:16,630 --> 00:04:23,640
sorting point number four how do you

00:04:20,140 --> 00:04:23,640
print the correct representation

00:04:23,660 --> 00:04:29,120
so the first was information Kaz ovation

00:04:27,110 --> 00:04:33,650
or you can also come father

00:04:29,120 --> 00:04:36,470
dr. dr. probability so the idea is that

00:04:33,650 --> 00:04:39,470
whatever you died and read back should

00:04:36,470 --> 00:04:41,800
be the same it should be the same

00:04:39,470 --> 00:04:45,440
decimal

00:04:41,800 --> 00:04:49,490
should be the same number a second is

00:04:45,440 --> 00:04:52,910
minimum and so minimum length is

00:04:49,490 --> 00:04:54,710
whatever in the interval you get the

00:04:52,910 --> 00:04:57,950
shortest number possible could actually

00:04:54,710 --> 00:05:00,620
rounded me mind even added a left too

00:04:57,950 --> 00:05:03,980
generous right relation will be when you

00:05:00,620 --> 00:05:06,620
were generating the the correct

00:05:03,980 --> 00:05:09,320
floating-point number you study you

00:05:06,620 --> 00:05:15,860
generate the decimal

00:05:09,320 --> 00:05:18,950
whenever accepted right so the idea the

00:05:15,860 --> 00:05:22,010
idea a dragon for is that for a number

00:05:18,950 --> 00:05:25,760
of easier you have a range which goes

00:05:22,010 --> 00:05:26,860
from value and margin is the difference

00:05:25,760 --> 00:05:30,950
between

00:05:26,860 --> 00:05:32,930
the next now where is the difference

00:05:30,950 --> 00:05:37,430
between the next and previous number on

00:05:32,930 --> 00:05:40,070
the floating point sorry the margin is

00:05:37,430 --> 00:05:41,990
the difference between the next number

00:05:40,070 --> 00:05:45,460
I'm the number and the period somewhere

00:05:41,990 --> 00:05:48,800
had a number on the number line so

00:05:45,460 --> 00:05:51,320
between so what the number that we want

00:05:48,800 --> 00:05:53,930
lies somewhere between value minus

00:05:51,320 --> 00:05:57,520
measure that you and Molly was merchand

00:05:53,930 --> 00:06:00,169
by 2 and we will sweep across this

00:05:57,520 --> 00:06:04,430
interval and find the shortest number

00:06:00,169 --> 00:06:06,530
and that's the number that we want so

00:06:04,430 --> 00:06:09,389
this this will go through this 100%

00:06:06,530 --> 00:06:12,599
right but it's relatively slow

00:06:09,389 --> 00:06:17,310
uses our retreat such an automatic so it

00:06:12,599 --> 00:06:22,650
uses no it uses the integers to find you

00:06:17,310 --> 00:06:26,909
generate the numbers the next algorithm

00:06:22,650 --> 00:06:30,090
in this job came here are two thousand

00:06:26,909 --> 00:06:32,069
tons and it's called fishing three this

00:06:30,090 --> 00:06:35,099
is like one of the most widely used

00:06:32,069 --> 00:06:38,460
algorithm so JavaScript engine uses it

00:06:35,099 --> 00:06:42,509
yeah the JavaScript and uses it okay

00:06:38,460 --> 00:06:46,439
assisted by pond has like different

00:06:42,509 --> 00:06:49,889
standards for what makes a good footing

00:06:46,439 --> 00:06:52,680
of good finding floating point and I was

00:06:49,889 --> 00:06:56,750
reading focus on but then decided to

00:06:52,680 --> 00:07:00,330
focus on simplicity of here for them

00:06:56,750 --> 00:07:05,270
yeah so to shoot three solutions we have

00:07:00,330 --> 00:07:08,099
again a similar idea where it will find

00:07:05,270 --> 00:07:10,409
very happy and then you have the

00:07:08,099 --> 00:07:13,229
previous number lands me in my previous

00:07:10,409 --> 00:07:15,360
number is V minus unemployed amigas

00:07:13,229 --> 00:07:20,400
purchased the next number on the number

00:07:15,360 --> 00:07:24,060
line and you have and person and - which

00:07:20,400 --> 00:07:27,360
is the range in which the range in which

00:07:24,060 --> 00:07:29,940
all the numbers stand up to me and what

00:07:27,360 --> 00:07:33,389
we do in between the string in this rain

00:07:29,940 --> 00:07:35,789
is that we do an i/o approximation so if

00:07:33,389 --> 00:07:37,529
you imagine like it's a brush sweeping

00:07:35,789 --> 00:07:41,400
through this number line you know we

00:07:37,529 --> 00:07:44,969
have a relatively bigger brush so to do

00:07:41,400 --> 00:07:47,400
a big to do a bigger approximations and

00:07:44,969 --> 00:07:49,710
faster oscillations then you have a

00:07:47,400 --> 00:07:54,330
wider approximation that's outside this

00:07:49,710 --> 00:07:56,490
range of envy but what happens is that

00:07:54,330 --> 00:07:58,229
there's an uncovered in term and it's

00:07:56,490 --> 00:08:00,990
the narrow approximation in my

00:07:58,229 --> 00:08:03,029
approximation matches and we found out

00:08:00,990 --> 00:08:05,580
the number in this range that's the

00:08:03,029 --> 00:08:08,909
shortest number but it's the surest

00:08:05,580 --> 00:08:12,360
number flies in this uncovered interval

00:08:08,909 --> 00:08:13,250
then we cannot guarantee that we found

00:08:12,360 --> 00:08:17,060
today

00:08:13,250 --> 00:08:19,430
and let's all back to driving for us so

00:08:17,060 --> 00:08:21,710
this is 12 and a half times faster than

00:08:19,430 --> 00:08:24,620
dragging for because in dust on trees

00:08:21,710 --> 00:08:27,590
are believed to be traumatic mrs. Machin

00:08:24,620 --> 00:08:31,670
teachers and it's good for an 89% five

00:08:27,590 --> 00:08:33,469
of the 99.5% of the columns and the rest

00:08:31,670 --> 00:08:36,200
was the same when five percent of the

00:08:33,469 --> 00:08:39,940
time if he is Australian for as a

00:08:36,200 --> 00:08:42,500
fallback so it's readily complex complex

00:08:39,940 --> 00:08:45,680
algorithm I can say really excited

00:08:42,500 --> 00:08:49,550
simplicity trainee and Python has two

00:08:45,680 --> 00:08:53,510
five movies are stupid algorithm and the

00:08:49,550 --> 00:08:56,270
new star core than a lot of floating

00:08:53,510 --> 00:09:01,510
point of pinning floating point numbers

00:08:56,270 --> 00:09:05,330
is called for you so that's it I wish

00:09:01,510 --> 00:09:08,690
came around in 2018 so let's say if we

00:09:05,330 --> 00:09:10,820
have number that people to round up that

00:09:08,690 --> 00:09:12,890
we would print and the number is seven

00:09:10,820 --> 00:09:15,560
point three zero zero zero four eight

00:09:12,890 --> 00:09:17,360
eight two eight fun toy and again we

00:09:15,560 --> 00:09:19,160
have a previous number on the number

00:09:17,360 --> 00:09:24,230
line and the next time on the number

00:09:19,160 --> 00:09:28,250
line and the fourth criteria that we had

00:09:24,230 --> 00:09:30,470
from before from trying for like our

00:09:28,250 --> 00:09:32,810
star being followed all the algorithms

00:09:30,470 --> 00:09:35,330
for these four criteria but if you have

00:09:32,810 --> 00:09:36,590
information preservation you have you

00:09:35,330 --> 00:09:38,600
have the minimum and turkey-lurkey

00:09:36,590 --> 00:09:41,900
learning and you have enough

00:09:38,600 --> 00:09:44,990
predetermination so how do works is you

00:09:41,900 --> 00:09:48,050
keep cutting off ditches I tell you so

00:09:44,990 --> 00:09:51,140
you get but until you get to a point

00:09:48,050 --> 00:09:54,470
where one of the numbers out of the

00:09:51,140 --> 00:09:57,710
these looks like upper bound and for the

00:09:54,470 --> 00:09:59,780
lower bound the criteria is that if you

00:09:57,710 --> 00:10:02,300
have nonzero and if you have nonzero

00:09:59,780 --> 00:10:07,610
numbers and the lower bond you dumb them

00:10:02,300 --> 00:10:11,660
up and on up ground you look you you're

00:10:07,610 --> 00:10:15,290
shutting down and you keep cutting off

00:10:11,660 --> 00:10:17,690
as made just as possible and you the

00:10:15,290 --> 00:10:20,900
recording decide decides how many dishes

00:10:17,690 --> 00:10:22,830
are cleared to cut off and if you soon

00:10:20,900 --> 00:10:25,860
in teacher of relations and

00:10:22,830 --> 00:10:28,950
it's three times five it's almost three

00:10:25,860 --> 00:10:33,440
times faster than her shoe so one of the

00:10:28,950 --> 00:10:36,510
challenges with all the floating-point

00:10:33,440 --> 00:10:38,580
clinical boredoms is that there are two

00:10:36,510 --> 00:10:40,230
problems here there's an improv problem

00:10:38,580 --> 00:10:42,270
we're like what is the number that

00:10:40,230 --> 00:10:44,850
you're reading to train and the other

00:10:42,270 --> 00:10:46,530
problem is the alcohol which is like

00:10:44,850 --> 00:10:48,660
what is the number that you're kidding

00:10:46,530 --> 00:10:52,280
so all the recordings have seen that the

00:10:48,660 --> 00:10:55,410
employed problem is already solved and

00:10:52,280 --> 00:10:58,980
that what they're what they are solving

00:10:55,410 --> 00:11:02,070
is the opening problem so if you now do

00:10:58,980 --> 00:11:04,740
you go to like other I was all the

00:11:02,070 --> 00:11:07,560
languages when actually prints friend

00:11:04,740 --> 00:11:10,140
know like frenzy appointment purse they

00:11:07,560 --> 00:11:12,450
appoint you you will get two point three

00:11:10,140 --> 00:11:16,110
because the printing of Gordon's are not

00:11:12,450 --> 00:11:21,560
I was fast year enough to do this to do

00:11:16,110 --> 00:11:21,560

YouTube URL: https://www.youtube.com/watch?v=qpklTOWEM9E


