Title: !!Con 2020 - 89 characters of base-11?! Mobile networking in rural Ethiopia! by Ben Kuhn
Publication date: 2020-05-28
Playlist: !!Con 2020
Description: 
	89 characters of base-11?! Mobile networking in rural Ethiopia! by Ben Kuhn

Suppose you’re trying to build a client-server app that works in rural Ethiopia. Mobile data there doesn’t work most of the time! Of course, you’re not going to let that stop you… but how will you manage?! How many strange protocols will you need to abuse to make it work??

We’ll start our journey with a standard Android app using standard HTTP calls, and slowly descend into the abyss through a soup of acronyms including SSL, UDP, SMS, and even USSD. By the end, we’ll have encoded our entire network request into a string of less than 89 characters which are either digits or the letter N, and also understood why the heck we need to do that?!

Ben works on helping unbanked people in Sub-Saharan Africa send and save money. When not bashing his head against obscure network protocols, he enjoys reading, climbing, hiking, making music, contra dancing, trying to improve the world, and various other strange activities. You can find him on the Internet at benkuhn.net.
Captions: 
	00:00:13,820 --> 00:00:20,119
so I'm Ben and I'm going to tell you

00:00:17,689 --> 00:00:23,090
about a series of increasingly silly

00:00:20,119 --> 00:00:26,480
things I've done to make an app work

00:00:23,090 --> 00:00:28,900
when the network is bad this photo by

00:00:26,480 --> 00:00:31,340
the way is of some of my co-workers

00:00:28,900 --> 00:00:36,110
climbing on the roof of the house that

00:00:31,340 --> 00:00:37,460
we all lived in in Ethiopia it was fun

00:00:36,110 --> 00:00:39,350
it turns out the roof could barely

00:00:37,460 --> 00:00:43,790
support our weight I thought it was kind

00:00:39,350 --> 00:00:46,850
of an appropriate image so for some

00:00:43,790 --> 00:00:49,580
context I work on an app called wave

00:00:46,850 --> 00:00:52,580
which is a mobile money system so

00:00:49,580 --> 00:00:54,400
imagine you live in a village in say

00:00:52,580 --> 00:00:58,220
like the Somali region of Ethiopia and

00:00:54,400 --> 00:01:01,309
your local bank local in quotes is like

00:00:58,220 --> 00:01:03,470
three hours away so with mobile money

00:01:01,309 --> 00:01:06,080
instead of going to like withdraw your

00:01:03,470 --> 00:01:08,030
money at that Bank branch you could

00:01:06,080 --> 00:01:10,100
withdraw at like you would find a local

00:01:08,030 --> 00:01:13,340
shopkeeper who's signed up to be a wave

00:01:10,100 --> 00:01:15,530
agent and you can withdraw your cash at

00:01:13,340 --> 00:01:17,420
that agent and they would give you like

00:01:15,530 --> 00:01:19,219
their like spare cash on hand and we

00:01:17,420 --> 00:01:20,630
would reimburse them later so if you

00:01:19,219 --> 00:01:22,729
wanted to be like really stereotypical

00:01:20,630 --> 00:01:25,820
startup bro you could call it goober for

00:01:22,729 --> 00:01:30,140
bank tellers anyway we also have this

00:01:25,820 --> 00:01:31,670
cute penguin mascot so the first problem

00:01:30,140 --> 00:01:33,979
we ran into while we were trying to

00:01:31,670 --> 00:01:36,590
build this was that a lot of our biggest

00:01:33,979 --> 00:01:38,649
users were in really rural areas the

00:01:36,590 --> 00:01:41,329
Somali region in general is pretty

00:01:38,649 --> 00:01:44,299
non-urbanized so this is my coworker

00:01:41,329 --> 00:01:47,359
Achmed taking his motorbike full of cash

00:01:44,299 --> 00:01:50,299
across river to reach one of our

00:01:47,359 --> 00:01:51,979
remotest agents in East EMA and the

00:01:50,299 --> 00:01:54,560
other thing about Ethiopia is that there

00:01:51,979 --> 00:01:57,889
is only a single telecom Ethio tell

00:01:54,560 --> 00:02:00,799
which is a state-owned monopoly and it's

00:01:57,889 --> 00:02:02,240
really bad so in many of these more

00:02:00,799 --> 00:02:04,189
rural areas mobile data would be

00:02:02,240 --> 00:02:07,100
basically totally down for most of the

00:02:04,189 --> 00:02:09,649
day and only working in like the early

00:02:07,100 --> 00:02:10,940
morning and late evening so fortunately

00:02:09,649 --> 00:02:12,680
during those other times there was

00:02:10,940 --> 00:02:16,910
something else that did still work which

00:02:12,680 --> 00:02:18,860
was SMS um so we decided to use that

00:02:16,910 --> 00:02:20,930
instead we would take all the network

00:02:18,860 --> 00:02:22,460
requests that our app was sending and

00:02:20,930 --> 00:02:24,560
instead of sending them over mobile data

00:02:22,460 --> 00:02:25,880
like normal people we just squeezed them

00:02:24,560 --> 00:02:26,610
down until they fit inside a text

00:02:25,880 --> 00:02:29,880
message

00:02:26,610 --> 00:02:32,580
um so a wrinkle with this is that text

00:02:29,880 --> 00:02:33,900
messages obviously aren't very big we

00:02:32,580 --> 00:02:36,420
wanted to fit everything inside a single

00:02:33,900 --> 00:02:37,590
message because otherwise like piecing

00:02:36,420 --> 00:02:40,410
them back together would be really hard

00:02:37,590 --> 00:02:43,280
and we had to encode the data in like

00:02:40,410 --> 00:02:46,680
this set of 64 characters that are

00:02:43,280 --> 00:02:49,500
actually like safe to be used and

00:02:46,680 --> 00:02:51,900
interpreted in text messages so each of

00:02:49,500 --> 00:02:54,240
those that means if a character has 64

00:02:51,900 --> 00:02:59,280
options um it can represent like 6 bits

00:02:54,240 --> 00:03:01,380
per character and that meant that with

00:02:59,280 --> 00:03:04,470
like the 151 characters we had we got

00:03:01,380 --> 00:03:06,510
about 113 bytes for our messages which

00:03:04,470 --> 00:03:10,230
is not great but you can fit a lot in

00:03:06,510 --> 00:03:12,210
113 bytes if you try hard enough so I

00:03:10,230 --> 00:03:13,740
hope you remember that log base 2

00:03:12,210 --> 00:03:16,890
equation because it will return as like

00:03:13,740 --> 00:03:18,540
the final boss anyway so the other

00:03:16,890 --> 00:03:20,070
wrinkle after we like packed all our

00:03:18,540 --> 00:03:22,080
messages down was actually building this

00:03:20,070 --> 00:03:23,970
thing so at first we thought to

00:03:22,080 --> 00:03:27,210
ourselves oh we can use Twilio like we

00:03:23,970 --> 00:03:28,680
always do for this kind of thing well it

00:03:27,210 --> 00:03:30,690
turns out that the whole like

00:03:28,680 --> 00:03:33,200
state-owned monopoly telecom thing also

00:03:30,690 --> 00:03:36,150
Made Easy Hotel a pain to integrate with

00:03:33,200 --> 00:03:38,370
so as you can see Twilio does not let

00:03:36,150 --> 00:03:41,100
you even receive messages from Ethiopia

00:03:38,370 --> 00:03:43,760
just like at all instead of doing that

00:03:41,100 --> 00:03:46,680
we had to build our own SMS integration

00:03:43,760 --> 00:03:48,239
from scratch so that meant we needed a

00:03:46,680 --> 00:03:50,489
computer that was connected to Ethio

00:03:48,239 --> 00:03:51,989
Telles internal network and that minute

00:03:50,489 --> 00:03:54,720
had to be inside the country and that

00:03:51,989 --> 00:03:58,020
meant we needed our own data center well

00:03:54,720 --> 00:04:00,450
for some value of data center so this

00:03:58,020 --> 00:04:02,640
building was our actual data center our

00:04:00,450 --> 00:04:05,940
servers are running in a little closet

00:04:02,640 --> 00:04:08,250
off to the right of the frame here it

00:04:05,940 --> 00:04:09,959
ain't much but it's home thankfully it

00:04:08,250 --> 00:04:12,390
did have one nice thing which was a

00:04:09,959 --> 00:04:14,760
backup generator for the many times that

00:04:12,390 --> 00:04:18,870
the municipal power went down for 8 plus

00:04:14,760 --> 00:04:21,000
hours of time but sadly the backup

00:04:18,870 --> 00:04:22,680
generator also often broke and at that

00:04:21,000 --> 00:04:25,500
point we would need to failover to our

00:04:22,680 --> 00:04:27,450
backup backup system which is that our

00:04:25,500 --> 00:04:29,880
customers would call our employees

00:04:27,450 --> 00:04:31,919
personal cell phones and we would use

00:04:29,880 --> 00:04:37,140
slack slash commands to enter their

00:04:31,919 --> 00:04:40,260
transfer details ok so that works fine

00:04:37,140 --> 00:04:41,640
for like some value of fine for a while

00:04:40,260 --> 00:04:44,730
soon we started having an even worse

00:04:41,640 --> 00:04:46,260
problem which is that like even during

00:04:44,730 --> 00:04:48,480
normal periods our agents couldn't do

00:04:46,260 --> 00:04:49,800
transactions fast enough because they

00:04:48,480 --> 00:04:52,290
were spending too much time staring at

00:04:49,800 --> 00:04:53,970
the loading spinner on their phones even

00:04:52,290 --> 00:04:56,670
in the areas with relatively good

00:04:53,970 --> 00:04:59,130
network like Gigi go to the capital so

00:04:56,670 --> 00:05:00,960
when I tested in Gigi ge' I found that

00:04:59,130 --> 00:05:04,340
things were taking something like five

00:05:00,960 --> 00:05:06,810
seconds which is like a normal ping time

00:05:04,340 --> 00:05:08,730
but our apps requests were taking more

00:05:06,810 --> 00:05:11,280
like 30 seconds and that was confusing

00:05:08,730 --> 00:05:13,980
to me we were sending like somewhat more

00:05:11,280 --> 00:05:16,170
data than just a ping command but

00:05:13,980 --> 00:05:19,680
remember it all fit in a single SMS so

00:05:16,170 --> 00:05:21,660
it wasn't that much data so to explain

00:05:19,680 --> 00:05:24,150
why this is going on I need to take a

00:05:21,660 --> 00:05:25,830
detour to explain how normal mobile apps

00:05:24,150 --> 00:05:27,420
team metric requests

00:05:25,830 --> 00:05:30,360
you think of it as using the protocol

00:05:27,420 --> 00:05:31,950
HTTP but that's actually made of a stack

00:05:30,360 --> 00:05:33,270
of a few different protocols that

00:05:31,950 --> 00:05:36,570
operate at different layers of

00:05:33,270 --> 00:05:38,880
abstraction so the the lowest level

00:05:36,570 --> 00:05:41,160
protocol is called IP for internet

00:05:38,880 --> 00:05:44,190
protocol and that gives you only a

00:05:41,160 --> 00:05:46,410
single operation which is do your best

00:05:44,190 --> 00:05:48,990
to send this small packet of data to

00:05:46,410 --> 00:05:50,220
this given address but it like the

00:05:48,990 --> 00:05:51,420
packet is allowed to fail you can just

00:05:50,220 --> 00:05:55,200
sort of drop it on the floor if you feel

00:05:51,420 --> 00:05:58,220
like it um so on top of that there's

00:05:55,200 --> 00:06:00,420
built TCP transmission control protocol

00:05:58,220 --> 00:06:02,720
which gives you two things that IP

00:06:00,420 --> 00:06:04,950
doesn't one of them is reliability so

00:06:02,720 --> 00:06:07,680
you know that the sender received the

00:06:04,950 --> 00:06:09,960
packet and the other is unbounded size

00:06:07,680 --> 00:06:15,690
so TCP lets you send a potentially

00:06:09,960 --> 00:06:18,180
infinite stream of data then HTTP runs

00:06:15,690 --> 00:06:19,530
on top of TCP but it's actually within

00:06:18,180 --> 00:06:23,940
that it's a stack of two other different

00:06:19,530 --> 00:06:28,860
protocols so the lower level is TLS

00:06:23,940 --> 00:06:31,470
transport layer security which is like

00:06:28,860 --> 00:06:33,030
TCP but the stream is encrypted so that

00:06:31,470 --> 00:06:35,790
the data is only readable by the

00:06:33,030 --> 00:06:40,020
intended recipient and then on top of

00:06:35,790 --> 00:06:43,890
that is HTTP good old HTTP which gives

00:06:40,020 --> 00:06:45,450
you the actually lets you say like get

00:06:43,890 --> 00:06:47,250
me the document at this URL and then you

00:06:45,450 --> 00:06:49,140
got a document or if you're a mobile app

00:06:47,250 --> 00:06:53,060
you can use that to mean things like

00:06:49,140 --> 00:06:53,060
send a payment unlike the payment worked

00:06:53,340 --> 00:06:57,510
okay so because these protocols are all

00:06:56,280 --> 00:06:59,700
stacked on top of each other like this

00:06:57,510 --> 00:07:02,970
um that introduces quite a bit of

00:06:59,700 --> 00:07:06,650
overhead so TCP requires you to send an

00:07:02,970 --> 00:07:09,090
empty packet back and forth before you

00:07:06,650 --> 00:07:10,950
an empty IP packet that is back and

00:07:09,090 --> 00:07:15,150
forth before you start sending actual

00:07:10,950 --> 00:07:18,150
data then on top of that TLS adds an

00:07:15,150 --> 00:07:20,400
additional - back and forth to do things

00:07:18,150 --> 00:07:23,580
like public key exchange and cipher

00:07:20,400 --> 00:07:25,620
suite negotiation and so it's not

00:07:23,580 --> 00:07:27,210
actually until the fourth packet

00:07:25,620 --> 00:07:28,710
round-trip that you can start sending

00:07:27,210 --> 00:07:31,470
the data that you wanted to send in your

00:07:28,710 --> 00:07:34,830
HTTP request and that's why our requests

00:07:31,470 --> 00:07:37,230
were so slow if a single packet

00:07:34,830 --> 00:07:39,180
round-trip like ping would take five or

00:07:37,230 --> 00:07:40,860
ten seconds and then these three like

00:07:39,180 --> 00:07:43,440
round trips that do nothing for us at

00:07:40,860 --> 00:07:45,810
the beginning of this sequence are

00:07:43,440 --> 00:07:48,150
adding 15 to 30 seconds of overhead so

00:07:45,810 --> 00:07:50,340
can we do better than that um well yes

00:07:48,150 --> 00:07:52,860
these intermediate protocols are giving

00:07:50,340 --> 00:07:54,870
us a lot of stuff that we don't need so

00:07:52,860 --> 00:07:56,760
in our case we're talking to a single

00:07:54,870 --> 00:07:58,170
server that we know ahead of time that

00:07:56,760 --> 00:08:01,020
doesn't mean that means we don't need

00:07:58,170 --> 00:08:01,830
key exchange or cipher suite negotiation

00:08:01,020 --> 00:08:04,170
um

00:08:01,830 --> 00:08:07,080
and because we'd already packed our data

00:08:04,170 --> 00:08:09,240
down to fit inside a single SMS it also

00:08:07,080 --> 00:08:11,430
fits inside a single IP packet so we

00:08:09,240 --> 00:08:18,480
don't need the stream abstraction that

00:08:11,430 --> 00:08:19,590
TCP provides us so in order to like slim

00:08:18,480 --> 00:08:21,060
down there our protocol we ended up

00:08:19,590 --> 00:08:22,860
building our own based on a different

00:08:21,060 --> 00:08:25,620
lower level protocol called UDP which

00:08:22,860 --> 00:08:27,690
stands for unreliable Datagram protocol

00:08:25,620 --> 00:08:29,610
so that's a very thin wrapper around IP

00:08:27,690 --> 00:08:31,830
that doesn't incur any additional round

00:08:29,610 --> 00:08:34,920
trips unfortunately as the name might

00:08:31,830 --> 00:08:37,860
suggest a UDP sacrifices one thing that

00:08:34,920 --> 00:08:39,420
we do need which is reliable delivery so

00:08:37,860 --> 00:08:41,940
you do packets are allowed to be dropped

00:08:39,420 --> 00:08:44,040
just like IP packets well uh

00:08:41,940 --> 00:08:46,590
implementing reliable delivery the right

00:08:44,040 --> 00:08:49,260
way is seemed hard so we took the

00:08:46,590 --> 00:08:54,390
coward's way out and just sent every

00:08:49,260 --> 00:08:58,110
packet in response four times and that

00:08:54,390 --> 00:09:00,930
pretty much worked okay um so UDP worked

00:08:58,110 --> 00:09:03,000
great for us for a while um until a

00:09:00,930 --> 00:09:04,680
point later when we started getting taxi

00:09:03,000 --> 00:09:07,170
drivers to use wave to accept payments

00:09:04,680 --> 00:09:10,050
so these drivers often worked in

00:09:07,170 --> 00:09:12,240
a downtown area where there were so many

00:09:10,050 --> 00:09:14,220
people on the network that mobile data

00:09:12,240 --> 00:09:17,940
was too congested even for UDP to work

00:09:14,220 --> 00:09:19,380
well um and because the customer was

00:09:17,940 --> 00:09:20,970
sitting in their car waiting for the

00:09:19,380 --> 00:09:24,120
payment to finish before they got out um

00:09:20,970 --> 00:09:25,740
SMS was too slow for this use case by

00:09:24,120 --> 00:09:26,730
the way the taxi product was in Senegal

00:09:25,740 --> 00:09:28,589
and that's why there's water in this

00:09:26,730 --> 00:09:31,290
picture this is the fish market near

00:09:28,589 --> 00:09:33,720
where I lived okay

00:09:31,290 --> 00:09:36,420
so fortunately we have one more weird

00:09:33,720 --> 00:09:40,350
protocol up our sleeve which is USSD

00:09:36,420 --> 00:09:42,360
unstructured supplementary data so USS G

00:09:40,350 --> 00:09:45,649
is primarily used in developing

00:09:42,360 --> 00:09:48,930
countries and it's used for things like

00:09:45,649 --> 00:09:50,850
topping up your prepaid airtime on your

00:09:48,930 --> 00:09:52,350
phone so you would like buy a scratch

00:09:50,850 --> 00:09:53,880
card in the corner store and it would

00:09:52,350 --> 00:09:55,860
have some magic digits that you dial and

00:09:53,880 --> 00:09:57,570
then you dial them it pops up a loading

00:09:55,860 --> 00:10:00,269
spinner and eventually you've got a text

00:09:57,570 --> 00:10:01,860
box it's like you've got airtime um at

00:10:00,269 --> 00:10:03,510
the protocol level it works pretty

00:10:01,860 --> 00:10:05,459
similarly to SMS but the traffic is

00:10:03,510 --> 00:10:07,110
prioritized more highly because um the

00:10:05,459 --> 00:10:08,579
customer just paid the telco money and

00:10:07,110 --> 00:10:10,350
like the telco probably wants to like

00:10:08,579 --> 00:10:13,740
receive it and I'll say they're looking

00:10:10,350 --> 00:10:17,519
at a loading spinner so we decided to

00:10:13,740 --> 00:10:19,949
try sending a request over ussd so

00:10:17,519 --> 00:10:22,470
unfortunately USSD has even worse

00:10:19,949 --> 00:10:24,149
message size limitations than SMS it

00:10:22,470 --> 00:10:26,279
actually goes through the same parts of

00:10:24,149 --> 00:10:28,470
your phone stack as when you dial a

00:10:26,279 --> 00:10:31,199
phone number and believe it or not phone

00:10:28,470 --> 00:10:33,230
numbers are limited to a mere 98

00:10:31,199 --> 00:10:35,339
characters on the network that we tested

00:10:33,230 --> 00:10:38,760
I've watched nine were consumed by our

00:10:35,339 --> 00:10:43,980
prefix so um furthermore the dial string

00:10:38,760 --> 00:10:45,870
needs to be numbers um so each number

00:10:43,980 --> 00:10:47,940
gives you three point three two bits

00:10:45,870 --> 00:10:50,370
um it turns out the log base two formula

00:10:47,940 --> 00:10:52,769
works with fractional bits per character

00:10:50,370 --> 00:10:54,779
as well and that works out to about

00:10:52,769 --> 00:10:59,190
thirty six bytes if you do the math um

00:10:54,779 --> 00:11:00,630
so that's cutting it really close so I

00:10:59,190 --> 00:11:03,060
wanted to see if it was possible to use

00:11:00,630 --> 00:11:04,470
any alphabetic characters instead I

00:11:03,060 --> 00:11:06,930
tried the docs for this but of course

00:11:04,470 --> 00:11:09,630
nobody had foreseen possibly wanting to

00:11:06,930 --> 00:11:11,459
you abuse you SSD in this way so I was

00:11:09,630 --> 00:11:15,240
out of luck and that meant the next step

00:11:11,459 --> 00:11:16,980
was source diving so Android is open

00:11:15,240 --> 00:11:18,750
source you can just read most of the

00:11:16,980 --> 00:11:20,769
source code of the Android operating

00:11:18,750 --> 00:11:22,149
system on the Internet

00:11:20,769 --> 00:11:24,309
and that meant they turned out actually

00:11:22,149 --> 00:11:25,449
to be relatively easy to track but I'm

00:11:24,309 --> 00:11:27,610
going to go through it fairly quickly

00:11:25,449 --> 00:11:30,069
because it's not that exciting so I'll

00:11:27,610 --> 00:11:36,670
just like dive through some garbage

00:11:30,069 --> 00:11:40,569
wrapper layers and it turns out that so

00:11:36,670 --> 00:11:42,249
eventually I found that the operating

00:11:40,569 --> 00:11:44,170
system was sanitizing any number that

00:11:42,249 --> 00:11:46,360
was dialed with this is diable viola

00:11:44,170 --> 00:11:49,239
Bowl function which allows digits 0

00:11:46,360 --> 00:11:52,350
through 9 the asterisk the pound sign

00:11:49,239 --> 00:11:59,730
the plus sign and this wild thing um

00:11:52,350 --> 00:12:02,199
which turns out to be the letter n so I

00:11:59,730 --> 00:12:07,269
don't know why I don't know why n is

00:12:02,199 --> 00:12:07,959
wild but it is pretty wild so where does

00:12:07,269 --> 00:12:10,360
that leave us

00:12:07,959 --> 00:12:12,489
well the asterisk of the pound sign have

00:12:10,360 --> 00:12:15,429
like special ussd meanings like a piece

00:12:12,489 --> 00:12:18,549
of middleware so we couldn't use those

00:12:15,429 --> 00:12:20,049
um the plus sign didn't work and none of

00:12:18,549 --> 00:12:22,119
my co-workers remembers why it didn't

00:12:20,049 --> 00:12:23,829
work but the character n works so we've

00:12:22,119 --> 00:12:26,049
gotten ourselves one whole extra

00:12:23,829 --> 00:12:28,269
character taking us up to three point

00:12:26,049 --> 00:12:30,600
four five bits per character and 38

00:12:28,269 --> 00:12:30,600
bytes

00:12:30,720 --> 00:12:37,209
um so not a huge gain but we're

00:12:35,709 --> 00:12:40,540
celebrating this is us doing a

00:12:37,209 --> 00:12:41,799
traditional Somali dance so I thought

00:12:40,540 --> 00:12:43,869
I'd close by explaining where we ended

00:12:41,799 --> 00:12:45,759
up with on each of these things we're

00:12:43,869 --> 00:12:47,619
not using USSD today because it requires

00:12:45,759 --> 00:12:51,279
deals with every telecom that you use it

00:12:47,619 --> 00:12:53,679
with and some of them run competing

00:12:51,279 --> 00:12:55,540
Mobile Money systems we're not using SMS

00:12:53,679 --> 00:12:57,699
because in Senegal Internet is like

00:12:55,540 --> 00:12:59,649
mostly good enough and that Senegal is

00:12:57,699 --> 00:13:03,809
where most of our business is today we

00:12:59,649 --> 00:13:06,279
do still use UDP but the next version of

00:13:03,809 --> 00:13:09,309
HTTP the normal protocol that everyone

00:13:06,279 --> 00:13:10,660
uses contains many similar optimizations

00:13:09,309 --> 00:13:12,759
to the ones that we made so we're

00:13:10,660 --> 00:13:14,350
excited to replace it with something

00:13:12,759 --> 00:13:17,709
like slightly more normal

00:13:14,350 --> 00:13:19,209
once that's mature and yeah this is a

00:13:17,709 --> 00:13:20,829
fishing boat doing donuts into the

00:13:19,209 --> 00:13:23,980
sunset because that's how I felt when I

00:13:20,829 --> 00:13:26,619
finished this project great all right

00:13:23,980 --> 00:13:29,169
well thanks for listening you can find

00:13:26,619 --> 00:13:31,059
the slides at Ben net slash base 11

00:13:29,169 --> 00:13:34,520
and some links to further reading

00:13:31,059 --> 00:13:36,560
resources and thank

00:13:34,520 --> 00:13:38,800
so much it was fun to tell you about

00:13:36,560 --> 00:13:38,800

YouTube URL: https://www.youtube.com/watch?v=EAxnA9L5rS8


