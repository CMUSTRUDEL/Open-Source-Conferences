Title: !!Con 2020 - Keynote: computational stichography! (or: connecting lines) by  Allison Parrish
Publication date: 2020-05-28
Playlist: !!Con 2020
Description: 
	Keynote: computational stichography! (or: connecting lines) by  Allison Parrish

Allison Parrish is a computer programmer, poet, educator and game designer whose teaching and practice address the unusual phenomena that blossom when language and computers meet. She is an Assistant Arts Professor at NYU’s Interactive Telecommunications Program, where she earned her master’s degree in 2008.
Captions: 
	00:00:13,160 --> 00:00:21,650
um I'm hoping everyone can see my slides

00:00:16,610 --> 00:00:24,710
now um so my name is Alison Parrish and

00:00:21,650 --> 00:00:27,320
this talk is called computational stick

00:00:24,710 --> 00:00:28,550
ography or connecting lines I am an

00:00:27,320 --> 00:00:30,169
assistant arts professor at New York

00:00:28,550 --> 00:00:32,599
University in the interactive

00:00:30,169 --> 00:00:35,150
telecommunications / interactive media

00:00:32,599 --> 00:00:36,770
arts program and I am overjoyed to be

00:00:35,150 --> 00:00:39,079
here today bing-bang khan is an amazing

00:00:36,770 --> 00:00:41,000
conference and this is actually my first

00:00:39,079 --> 00:00:43,100
time speaking here believe it or not and

00:00:41,000 --> 00:00:44,840
it is an honor to deliver one of the

00:00:43,100 --> 00:00:47,120
keynote talks this year I'm f---ing

00:00:44,840 --> 00:00:49,150
forward to luxuriate in the extra time

00:00:47,120 --> 00:00:51,530
that I have instead of just 10 minutes

00:00:49,150 --> 00:00:53,600
so thank you to the organizers and to

00:00:51,530 --> 00:00:56,960
all the other speakers and everyone in

00:00:53,600 --> 00:01:00,650
attendance for helping to carry on just

00:00:56,960 --> 00:01:03,920
really important event this year so I'm

00:01:00,650 --> 00:01:05,449
a computer programmer and a poet and I'm

00:01:03,920 --> 00:01:08,780
here today to talk about something that

00:01:05,449 --> 00:01:13,009
I'm enthusiastic about which is lions

00:01:08,780 --> 00:01:14,900
lines of text in particular in fact an

00:01:13,009 --> 00:01:16,729
interest in lines of text is one of the

00:01:14,900 --> 00:01:18,829
things that poets and computer

00:01:16,729 --> 00:01:21,020
programmers have in common and this talk

00:01:18,829 --> 00:01:22,700
I'm going to share a little bit about

00:01:21,020 --> 00:01:24,799
why I think the line is so interesting

00:01:22,700 --> 00:01:26,030
and then show some of the projects I've

00:01:24,799 --> 00:01:28,789
been working on that engage with the

00:01:26,030 --> 00:01:32,630
lioness each unit of text and so line

00:01:28,789 --> 00:01:34,939
one between poets and programmers the

00:01:32,630 --> 00:01:36,799
importance of the line two poets may

00:01:34,939 --> 00:01:38,659
already be clear to you it's widely

00:01:36,799 --> 00:01:39,950
understood as the fundamental unit of

00:01:38,659 --> 00:01:42,469
poetry as the poet

00:01:39,950 --> 00:01:44,600
James Longden backfoot said poetry is

00:01:42,469 --> 00:01:47,509
the sound of language organized in lines

00:01:44,600 --> 00:01:49,039
more than metre more than rhyme line is

00:01:47,509 --> 00:01:51,200
what distinguishes our experience of

00:01:49,039 --> 00:01:54,109
poetry as poetry rather than some other

00:01:51,200 --> 00:01:55,850
kind of writing poets make use of the

00:01:54,109 --> 00:01:59,090
line in a remarkable variety of ways

00:01:55,850 --> 00:02:01,069
just a few examples Emily Dickinson's

00:01:59,090 --> 00:02:03,319
lines a carefully interweave rhyme

00:02:01,069 --> 00:02:05,149
clause and punctuation William Carlos

00:02:03,319 --> 00:02:07,249
Williams lines that have tense and

00:02:05,149 --> 00:02:09,950
dramatic enjambment right syntax across

00:02:07,249 --> 00:02:11,870
lines your bass a Philips knee rejection

00:02:09,950 --> 00:02:15,560
of the line altogether in favor of more

00:02:11,870 --> 00:02:17,569
free and expressive layout in song you

00:02:15,560 --> 00:02:20,000
can make rough texts on music how poets

00:02:17,569 --> 00:02:23,230
use the line but no formalism can

00:02:20,000 --> 00:02:25,670
entirely capture all of these techniques

00:02:23,230 --> 00:02:27,050
just as a quick review of terminology so

00:02:25,670 --> 00:02:29,210
I don't lose some of you

00:02:27,050 --> 00:02:32,170
the word that poets use for the way that

00:02:29,210 --> 00:02:35,240
poem is divided into lines is called is

00:02:32,170 --> 00:02:37,550
Linnaean frustratingly this is also a

00:02:35,240 --> 00:02:39,230
term of art in geology so whenever you

00:02:37,550 --> 00:02:40,550
search the library database for lineage

00:02:39,230 --> 00:02:43,760
n' you get a lot of results about

00:02:40,550 --> 00:02:46,460
sandstone another common term is

00:02:43,760 --> 00:02:48,590
enjambment which is a technique for

00:02:46,460 --> 00:02:50,600
lineage that involves introducing line

00:02:48,590 --> 00:02:52,010
breaks in unexpected places like in the

00:02:50,600 --> 00:02:54,260
middle of a sentence or the middle of a

00:02:52,010 --> 00:02:56,150
word while researching this talk I

00:02:54,260 --> 00:02:57,680
discovered from the Oxford English

00:02:56,150 --> 00:02:59,900
Dictionary that you can also say this

00:02:57,680 --> 00:03:02,420
word in a fancy French way long haul

00:02:59,900 --> 00:03:04,310
malt which is a nice way to feel learned

00:03:02,420 --> 00:03:06,550
and important so I might say it that way

00:03:04,310 --> 00:03:10,220
for the rest of the talk

00:03:06,550 --> 00:03:11,960
programming isn't all about lines the

00:03:10,220 --> 00:03:14,000
way the poetry is but programmers do

00:03:11,960 --> 00:03:16,160
deal with lines a lot in their

00:03:14,000 --> 00:03:18,380
coursework the line is of course an

00:03:16,160 --> 00:03:20,180
important mathematical abstraction used

00:03:18,380 --> 00:03:22,370
in both computer graphics and statistics

00:03:20,180 --> 00:03:24,620
but the line as a unit of text is

00:03:22,370 --> 00:03:26,930
actually equally important to computer

00:03:24,620 --> 00:03:28,790
programming code is conventionally

00:03:26,930 --> 00:03:30,770
written in plain text files which are

00:03:28,790 --> 00:03:35,150
sequences of characters delimited with

00:03:30,770 --> 00:03:37,010
the language character version control

00:03:35,150 --> 00:03:39,980
software like git uses the line as the

00:03:37,010 --> 00:03:42,080
atomic unit of change when you apply a

00:03:39,980 --> 00:03:44,570
patch to a file with get you're applying

00:03:42,080 --> 00:03:46,460
that patch based on lines of text not

00:03:44,570 --> 00:03:49,010
some other unit like characters or bytes

00:03:46,460 --> 00:03:50,050
or functions or parts of a syntax tree

00:03:49,010 --> 00:03:52,430
or anything like that

00:03:50,050 --> 00:03:55,550
dozens of UNIX data processing tools

00:03:52,430 --> 00:03:57,320
like grep sort head tail cut all use

00:03:55,550 --> 00:04:00,440
lines is their fundamental unit of

00:03:57,320 --> 00:04:02,540
processing so poets programmers have in

00:04:00,440 --> 00:04:05,900
common this interest in the lioness unit

00:04:02,540 --> 00:04:09,920
of text line number two a ski and

00:04:05,900 --> 00:04:12,230
stichometry the code isn't the only part

00:04:09,920 --> 00:04:14,660
of programming where the line pops up

00:04:12,230 --> 00:04:17,840
the line is also the go-to unit for

00:04:14,660 --> 00:04:19,970
organizing data many file formats both

00:04:17,840 --> 00:04:23,510
official and ad-hoc make use of the line

00:04:19,970 --> 00:04:26,210
break the ASCII line feed character as a

00:04:23,510 --> 00:04:29,000
record delimiter and this is on the

00:04:26,210 --> 00:04:31,250
slide you see an example of data in CSV

00:04:29,000 --> 00:04:34,010
format in which the data is stored in a

00:04:31,250 --> 00:04:36,320
plain text file and each each datum each

00:04:34,010 --> 00:04:38,900
line of data is stored as an individual

00:04:36,320 --> 00:04:40,729
line and the line feed character is

00:04:38,900 --> 00:04:43,400
arguably the most popular way to

00:04:40,729 --> 00:04:45,770
limit records in data despite the fact

00:04:43,400 --> 00:04:47,659
that the ASCII standard actually has

00:04:45,770 --> 00:04:49,309
included from its inception a control

00:04:47,659 --> 00:04:52,189
code specifically set aside for

00:04:49,309 --> 00:04:54,490
separating records hexadecimal 1e the

00:04:52,189 --> 00:04:56,360
record separator control code checked

00:04:54,490 --> 00:04:59,779
highlighted in this list on the slide

00:04:56,360 --> 00:05:01,249
but nobody actually uses that record

00:04:59,779 --> 00:05:03,650
separator control code to separate

00:05:01,249 --> 00:05:08,139
records and I think a reason that people

00:05:03,650 --> 00:05:10,610
use the line feed character instead is

00:05:08,139 --> 00:05:12,169
instead even when there's this like tool

00:05:10,610 --> 00:05:14,449
that's been set apart specifically for

00:05:12,169 --> 00:05:16,149
that purpose I'm not like ambiguously

00:05:14,449 --> 00:05:18,169
the way that the line feed character is

00:05:16,149 --> 00:05:20,629
the reason that I think that's the case

00:05:18,169 --> 00:05:22,759
is that the spatial metaphor of the line

00:05:20,629 --> 00:05:24,439
is just too well established like we

00:05:22,759 --> 00:05:26,449
already think about data in terms of

00:05:24,439 --> 00:05:28,909
lines so it's difficult to resist using

00:05:26,449 --> 00:05:31,460
the line feed characters lab purpose the

00:05:28,909 --> 00:05:34,189
visual line as much on a sheet of paper

00:05:31,460 --> 00:05:35,360
as on a computer screen is already used

00:05:34,189 --> 00:05:38,149
everywhere as a way of organizing

00:05:35,360 --> 00:05:40,189
information the convention of having

00:05:38,149 --> 00:05:42,979
rows of data arranged vertically from

00:05:40,189 --> 00:05:44,810
top to bottom by time dates back to pen

00:05:42,979 --> 00:05:47,149
and paper Ledger's and even as far back

00:05:44,810 --> 00:05:49,610
as ancient Mesopotamia others that on

00:05:47,149 --> 00:05:52,270
the right there you see a cuneiform

00:05:49,610 --> 00:05:56,449
tablet that's showing tabular data from

00:05:52,270 --> 00:06:00,259
1295 BCE that looks exactly like a

00:05:56,449 --> 00:06:01,789
spreadsheet and arguably maybe even goes

00:06:00,259 --> 00:06:04,399
back to the to the origin of writing

00:06:01,789 --> 00:06:06,379
itself so the line break is already a

00:06:04,399 --> 00:06:10,459
record separator we didn't really need a

00:06:06,379 --> 00:06:12,680
separate character for that lines are a

00:06:10,459 --> 00:06:14,300
way of organizing information but

00:06:12,680 --> 00:06:17,209
they're also likely the earliest unit

00:06:14,300 --> 00:06:19,909
used to measure text itself ancient

00:06:17,209 --> 00:06:21,740
Greek scribes divided text up into lines

00:06:19,909 --> 00:06:23,990
and then counted those lines up in order

00:06:21,740 --> 00:06:25,909
to better catalog text and to make it

00:06:23,990 --> 00:06:28,370
possible to refer to sections of text by

00:06:25,909 --> 00:06:30,860
their parts is sort of the original page

00:06:28,370 --> 00:06:32,509
number and of course that would be

00:06:30,860 --> 00:06:35,930
useful with Scrolls where there are

00:06:32,509 --> 00:06:38,930
pages hmm this process of counting lines

00:06:35,930 --> 00:06:41,389
is called stoichiometry from the ancient

00:06:38,930 --> 00:06:44,389
Greek speakers which means a row of

00:06:41,389 --> 00:06:47,120
soldiers or a line of poetry one scholar

00:06:44,389 --> 00:06:49,009
I read argues that the US - commentary

00:06:47,120 --> 00:06:51,019
was the birth of text analysis and

00:06:49,009 --> 00:06:53,420
corpus linguistics saying that on

00:06:51,019 --> 00:06:55,970
segmentation of text into formal similar

00:06:53,420 --> 00:06:57,860
Tech and leader syntactic units not

00:06:55,970 --> 00:06:59,750
related to the physical data carrier was

00:06:57,860 --> 00:07:01,610
at that time a great achievement allowed

00:06:59,750 --> 00:07:03,140
future generations of philologist and

00:07:01,610 --> 00:07:06,080
grammarians to create the first real

00:07:03,140 --> 00:07:09,080
corpus and statistical tools by which I

00:07:06,080 --> 00:07:11,780
mean concordance --is and indexes so the

00:07:09,080 --> 00:07:13,850
limeade didn't like the beginning of you

00:07:11,780 --> 00:07:16,370
know being able to do statistical

00:07:13,850 --> 00:07:18,380
analysis of text that leads us to things

00:07:16,370 --> 00:07:20,690
like tf-idf and things like that today

00:07:18,380 --> 00:07:22,940
the photograph in the slide shows a line

00:07:20,690 --> 00:07:24,800
number and the margin of a manuscript

00:07:22,940 --> 00:07:28,640
copy of a text by Plato that's from the

00:07:24,800 --> 00:07:30,770
ninth century in ancient Greece and

00:07:28,640 --> 00:07:33,260
medieval Europe books were often

00:07:30,770 --> 00:07:35,240
cataloged by name and line count and

00:07:33,260 --> 00:07:37,250
book buyers used the line counts to

00:07:35,240 --> 00:07:39,050
ensure that the copies they were buying

00:07:37,250 --> 00:07:41,870
were complete sort of an ancient

00:07:39,050 --> 00:07:44,090
checksum technique the image on the left

00:07:41,870 --> 00:07:47,180
is a list of books in the Codex Clara

00:07:44,090 --> 00:07:50,240
man Montana's from the fifth or sixth

00:07:47,180 --> 00:07:52,400
centuries I see common era in which

00:07:50,240 --> 00:07:54,470
titles of various Christian texts are

00:07:52,400 --> 00:07:56,330
listed next to the number of lines in

00:07:54,470 --> 00:07:58,700
the corresponding text in Roman numerals

00:07:56,330 --> 00:08:01,880
to me this looks a lot like the output

00:07:58,700 --> 00:08:04,610
of the UNIX word count command WC - L

00:08:01,880 --> 00:08:07,550
the line count option enabled so

00:08:04,610 --> 00:08:11,870
stichometry is alive and well in the

00:08:07,550 --> 00:08:14,240
21st century on the command line another

00:08:11,870 --> 00:08:17,330
like interesting fun parallelism between

00:08:14,240 --> 00:08:20,390
ancient scribes and computer programmers

00:08:17,330 --> 00:08:23,600
is that according to this often cited

00:08:20,390 --> 00:08:26,630
paper by Jay Randall Harris scribes in

00:08:23,600 --> 00:08:29,240
ancient Rome were paid by the line and

00:08:26,630 --> 00:08:31,300
also programmers of course there their

00:08:29,240 --> 00:08:33,350
productivity has in the past been

00:08:31,300 --> 00:08:35,590
evaluated based on the number of code

00:08:33,350 --> 00:08:38,270
number of lines of code that they write

00:08:35,590 --> 00:08:40,940
and thus of the image just shows like a

00:08:38,270 --> 00:08:43,729
paper that I found about using lines of

00:08:40,940 --> 00:08:45,680
code as productivity metric lines are

00:08:43,729 --> 00:08:48,580
one of the two ways that language

00:08:45,680 --> 00:08:53,090
becomes data and wherever you have data

00:08:48,580 --> 00:08:56,990
money isn't far behind next line is

00:08:53,090 --> 00:09:00,260
between linen and cannabis and earlier I

00:08:56,990 --> 00:09:04,100
mentioned the etymology of the ancient

00:09:00,260 --> 00:09:07,250
Greek word for line dicus which also is

00:09:04,100 --> 00:09:08,480
the word for a row of soldiers and

00:09:07,250 --> 00:09:10,370
and that actually comes from the same

00:09:08,480 --> 00:09:11,330
proto-indo-european indo-european root

00:09:10,370 --> 00:09:13,430
that gives us the English word for

00:09:11,330 --> 00:09:15,260
stairs because you're walking up on your

00:09:13,430 --> 00:09:16,970
climbing up I'm in an alternate reality

00:09:15,260 --> 00:09:18,620
the word for lying

00:09:16,970 --> 00:09:20,960
poetry in English might have been a

00:09:18,620 --> 00:09:23,270
stair of poetry which i think is

00:09:20,960 --> 00:09:25,310
interesting but the word for line in

00:09:23,270 --> 00:09:27,620
English ultimately derives from the word

00:09:25,310 --> 00:09:29,870
for the flax plant which produces a

00:09:27,620 --> 00:09:32,450
fiber that remains rigid without having

00:09:29,870 --> 00:09:36,320
to be held taut unlike other fibers need

00:09:32,450 --> 00:09:41,120
to be on that is a flax fiber is on its

00:09:36,320 --> 00:09:44,210
own mystery wine to me this etymology of

00:09:41,120 --> 00:09:46,730
the line explains the main metaphorical

00:09:44,210 --> 00:09:49,880
difference between a line and say a rope

00:09:46,730 --> 00:09:51,740
a cord or a string straightness in

00:09:49,880 --> 00:09:55,220
nature is the exception and not the rule

00:09:51,740 --> 00:09:57,080
a rope a corridor a string becomes a

00:09:55,220 --> 00:09:59,840
line when someone holds it taut and

00:09:57,080 --> 00:10:02,240
rigid like a linen fibre thereby

00:09:59,840 --> 00:10:03,950
removing the slack likewise with the

00:10:02,240 --> 00:10:05,450
ancient Greek word a row of soldiers

00:10:03,950 --> 00:10:07,280
stays information only through

00:10:05,450 --> 00:10:10,220
discipline you have to exert effort in

00:10:07,280 --> 00:10:11,660
order to keep the lines straight in

00:10:10,220 --> 00:10:14,150
computer programming we used both the

00:10:11,660 --> 00:10:16,280
words line and string to refer to

00:10:14,150 --> 00:10:17,839
sequences of characters but they're not

00:10:16,280 --> 00:10:19,400
interchangeable and I think there's a

00:10:17,839 --> 00:10:22,130
reason that we call it the command line

00:10:19,400 --> 00:10:24,050
and not the command string a string can

00:10:22,130 --> 00:10:25,790
contain an arbitrary sequence of

00:10:24,050 --> 00:10:28,010
characters but a line is text that has

00:10:25,790 --> 00:10:30,560
already been set apart as having some

00:10:28,010 --> 00:10:32,510
intention a record in a file or user

00:10:30,560 --> 00:10:35,570
input in response to a prompt or

00:10:32,510 --> 00:10:37,580
something like that well I'm on the

00:10:35,570 --> 00:10:39,830
topic of etymology one of my favorite

00:10:37,580 --> 00:10:41,900
topics I'll point out that the English

00:10:39,830 --> 00:10:45,470
word read originates from a word that

00:10:41,900 --> 00:10:47,720
means govern or counsel the word file

00:10:45,470 --> 00:10:50,060
comes from a Latin word for thread and

00:10:47,720 --> 00:10:52,339
so a fair ademma logical and

00:10:50,060 --> 00:10:55,310
metaphorical translation of reading a

00:10:52,339 --> 00:10:58,880
line from a file is um governing a

00:10:55,310 --> 00:11:01,400
thread by pulling it taut um one one

00:10:58,880 --> 00:11:03,110
more at analogical aside just as the

00:11:01,400 --> 00:11:05,570
word line comes from the word for flax

00:11:03,110 --> 00:11:08,780
the word canvas is cognate with the word

00:11:05,570 --> 00:11:11,390
cannabis plant whose fibers are often

00:11:08,780 --> 00:11:14,240
used to make durable fabric so the next

00:11:11,390 --> 00:11:16,670
time you are using javascript sage but a

00:11:14,240 --> 00:11:19,130
line on a canvas you can think of it as

00:11:16,670 --> 00:11:20,950
like gently setting a flax plant on top

00:11:19,130 --> 00:11:25,120
of a cannabis plant

00:11:20,950 --> 00:11:28,000
um I think is a nice image the next line

00:11:25,120 --> 00:11:32,260
that I want to draw it's between oxen

00:11:28,000 --> 00:11:36,330
and typewriters and getting back to

00:11:32,260 --> 00:11:39,370
literature and writing more specifically

00:11:36,330 --> 00:11:40,930
in the history of the written word you

00:11:39,370 --> 00:11:43,720
can actually distinguish two different

00:11:40,930 --> 00:11:46,420
kinds of line the graphic line and the

00:11:43,720 --> 00:11:49,690
poetic line the poetic line is also

00:11:46,420 --> 00:11:51,850
called a verse a graphic line is just

00:11:49,690 --> 00:11:53,650
what you call on on a writing surface

00:11:51,850 --> 00:11:55,900
when you see a number of glyphs placed

00:11:53,650 --> 00:11:57,310
in sequence sharing the same base line

00:11:55,900 --> 00:11:59,190
as they progressed across the writing

00:11:57,310 --> 00:12:01,630
surface in some writing systems

00:11:59,190 --> 00:12:03,370
glyphs and lines are arranged from left

00:12:01,630 --> 00:12:05,650
to right and others from right to left

00:12:03,370 --> 00:12:07,060
and others still on top to bottom and

00:12:05,650 --> 00:12:08,490
then moving across the page from right

00:12:07,060 --> 00:12:12,040
to left or left right

00:12:08,490 --> 00:12:14,500
this image shows an inscription on a

00:12:12,040 --> 00:12:18,250
fragment of stone plates in archaic

00:12:14,500 --> 00:12:21,070
cretton script written in boustrophedon

00:12:18,250 --> 00:12:22,930
style in which characters and lines

00:12:21,070 --> 00:12:24,490
alternate between being arranged from

00:12:22,930 --> 00:12:26,830
left to right and right to left and you

00:12:24,490 --> 00:12:29,170
can actually see that the orientation of

00:12:26,830 --> 00:12:30,340
the characters change as the writing

00:12:29,170 --> 00:12:34,030
progressed from the top to the bottom

00:12:30,340 --> 00:12:36,430
those to feed on means in the manner of

00:12:34,030 --> 00:12:39,040
oxen plowing to get to the end of one

00:12:36,430 --> 00:12:43,930
row and then you move back to the next

00:12:39,040 --> 00:12:47,740
starting from where you were the graphic

00:12:43,930 --> 00:12:50,190
line I think originates just as kind of

00:12:47,740 --> 00:12:53,020
like a side effect of the need to adapt

00:12:50,190 --> 00:12:55,870
media a different dimensionality to each

00:12:53,020 --> 00:12:58,660
other we tend to perceive each as a

00:12:55,870 --> 00:13:01,600
one-dimensional medium a sequence of

00:12:58,660 --> 00:13:02,710
sounds and and words most writing

00:13:01,600 --> 00:13:05,500
surfaces on the other hand are

00:13:02,710 --> 00:13:07,060
understood to be two-dimensional so when

00:13:05,500 --> 00:13:08,920
you're writing speech on to a writing

00:13:07,060 --> 00:13:11,740
surface like a scroll or a sheet of

00:13:08,920 --> 00:13:13,960
paper you have to find some way to fold

00:13:11,740 --> 00:13:16,030
the one-dimensional sequence onto the

00:13:13,960 --> 00:13:17,740
two-dimensional surface and as efficient

00:13:16,030 --> 00:13:19,720
a matter as possible and that's what a

00:13:17,740 --> 00:13:22,630
line is it's a way of like folding one

00:13:19,720 --> 00:13:24,910
dimensional data onto a two-dimensional

00:13:22,630 --> 00:13:27,670
surface in this slide I'm showing a

00:13:24,910 --> 00:13:29,490
hilbert curve as an example of another

00:13:27,670 --> 00:13:32,890
way to fill a 2d service with the line

00:13:29,490 --> 00:13:34,660
no writing system that I'm aware of uses

00:13:32,890 --> 00:13:36,790
Hilbert curves to lay out text on

00:13:34,660 --> 00:13:41,980
but I think it would be cool if there

00:13:36,790 --> 00:13:43,990
was one that do that in a purely oral

00:13:41,980 --> 00:13:46,990
literature I would try mean literature

00:13:43,990 --> 00:13:49,900
that isn't written down poetry also has

00:13:46,990 --> 00:13:52,420
lines in this case usually where aligned

00:13:49,900 --> 00:13:54,640
ends is determined not by space

00:13:52,420 --> 00:13:56,410
limitations of the writing surface of

00:13:54,640 --> 00:13:58,600
course but by metrical phonetic

00:13:56,410 --> 00:14:01,480
syntactic and semantic characteristics

00:13:58,600 --> 00:14:03,250
of the words themselves what's

00:14:01,480 --> 00:14:04,600
interesting to me is that when poems

00:14:03,250 --> 00:14:07,840
from the oral tradition were first

00:14:04,600 --> 00:14:10,680
written down in antiquity and in the

00:14:07,840 --> 00:14:13,390
Middle Ages in Europe for example

00:14:10,680 --> 00:14:15,520
apparently there was no consensus that

00:14:13,390 --> 00:14:18,730
one poetic line should correspond to one

00:14:15,520 --> 00:14:20,680
graphic line instead you see a variety

00:14:18,730 --> 00:14:23,200
of conventions for separating poetic

00:14:20,680 --> 00:14:25,960
lines and manuscripts including things

00:14:23,200 --> 00:14:28,150
like placing a point after the last word

00:14:25,960 --> 00:14:30,010
in a verse putting spaces in line

00:14:28,150 --> 00:14:32,860
between verses we'll see an example of

00:14:30,010 --> 00:14:35,890
that later or using capital letters at

00:14:32,860 --> 00:14:38,560
the beginning of each verse catherine

00:14:35,890 --> 00:14:42,070
o'brien O'Keefe points out that the

00:14:38,560 --> 00:14:44,050
technique of starting verses flush with

00:14:42,070 --> 00:14:47,410
the left margin and leaving blank space

00:14:44,050 --> 00:14:50,890
up to the right margin for a single

00:14:47,410 --> 00:14:53,110
verse was may be used only as a last

00:14:50,890 --> 00:14:55,120
resort in medieval manuscripts because

00:14:53,110 --> 00:14:57,720
it was a waste of the expensive writing

00:14:55,120 --> 00:15:00,580
material leaving all of that expensive

00:14:57,720 --> 00:15:04,060
like all of that expensive vellum you're

00:15:00,580 --> 00:15:06,550
leaving it blank so that that thing that

00:15:04,060 --> 00:15:08,740
we think of as being the usual way that

00:15:06,550 --> 00:15:11,410
lines of text are written especially

00:15:08,740 --> 00:15:13,870
lines of poetry are written where you

00:15:11,410 --> 00:15:16,120
have one graphic line per poetic line is

00:15:13,870 --> 00:15:17,230
actually like you know not the only way

00:15:16,120 --> 00:15:18,490
that you do it and that's kind of

00:15:17,230 --> 00:15:20,430
something that's only become the

00:15:18,490 --> 00:15:23,800
standard and a contemporary modern

00:15:20,430 --> 00:15:25,660
context in fact we still use graphical

00:15:23,800 --> 00:15:28,750
inventions like putting a point after

00:15:25,660 --> 00:15:30,340
the last word in a verse and when we use

00:15:28,750 --> 00:15:32,530
the slash character to separate lines

00:15:30,340 --> 00:15:36,180
and poems or lyrics when you're quoting

00:15:32,530 --> 00:15:38,620
a poem or a song in line and prose and

00:15:36,180 --> 00:15:41,050
as far as I can tell it wasn't until

00:15:38,620 --> 00:15:42,810
centuries later that the conflation of

00:15:41,050 --> 00:15:46,330
the kwatak line with the graphic line

00:15:42,810 --> 00:15:48,610
became as universal as it is today and I

00:15:46,330 --> 00:15:50,470
might argue that the conflation was only

00:15:48,610 --> 00:15:52,930
really complete after the invention of

00:15:50,470 --> 00:15:56,470
the typewriter a technology that allowed

00:15:52,930 --> 00:15:58,600
poets to essentially typeset their own

00:15:56,470 --> 00:16:01,060
texts and quickly experiment with how

00:15:58,600 --> 00:16:03,670
Linnaean affected the process of reading

00:16:01,060 --> 00:16:07,300
and composing poetry the poet Ryles

00:16:03,670 --> 00:16:10,149
Olson in his well-known 1950s manifesto

00:16:07,300 --> 00:16:13,060
projected verse basically claims this

00:16:10,149 --> 00:16:15,100
and says the line is equated with the

00:16:13,060 --> 00:16:17,560
breath and the typewriter is the first

00:16:15,100 --> 00:16:20,079
technology that the poet has had that

00:16:17,560 --> 00:16:22,540
allows allows them to indicate their

00:16:20,079 --> 00:16:26,740
breath as precisely as they want to on

00:16:22,540 --> 00:16:32,019
the written page um the next line is

00:16:26,740 --> 00:16:36,100
between tidiness and fleshiness so

00:16:32,019 --> 00:16:37,870
taking all of that into account we've

00:16:36,100 --> 00:16:40,570
seen the line in many different forms in

00:16:37,870 --> 00:16:42,870
context so what makes the line is such a

00:16:40,570 --> 00:16:46,540
powerful and persistent unit of

00:16:42,870 --> 00:16:49,300
organization and text on this question I

00:16:46,540 --> 00:16:51,010
think the poets themselves have some

00:16:49,300 --> 00:16:52,660
good answers the most elegant

00:16:51,010 --> 00:16:55,480
formulation about the line I've come

00:16:52,660 --> 00:16:57,160
across in my reading and research comes

00:16:55,480 --> 00:17:01,480
from the poet lineage in Ian who writes

00:16:57,160 --> 00:17:02,829
the line fixes detailed time the writing

00:17:01,480 --> 00:17:04,600
of the line begins as an act of

00:17:02,829 --> 00:17:06,010
observation and it is completed by

00:17:04,600 --> 00:17:08,439
recognition of the thought that it

00:17:06,010 --> 00:17:10,569
achieves their I understand this to mean

00:17:08,439 --> 00:17:14,079
that in the process of translating

00:17:10,569 --> 00:17:16,390
sequences to surfaces the line is how a

00:17:14,079 --> 00:17:18,640
writer notes detail and anticipation of

00:17:16,390 --> 00:17:21,010
how the reader will approach and

00:17:18,640 --> 00:17:23,260
perceive the text as it unfolds in real

00:17:21,010 --> 00:17:24,669
time in the process of reading the line

00:17:23,260 --> 00:17:26,470
is our writer draws attention to

00:17:24,669 --> 00:17:28,840
particular characteristics or an

00:17:26,470 --> 00:17:30,820
engineer's terms particular observations

00:17:28,840 --> 00:17:35,620
of the language in question and how it

00:17:30,820 --> 00:17:37,780
operates the poet and scholar Johanna

00:17:35,620 --> 00:17:40,000
Drucker emphasizes not the temporal

00:17:37,780 --> 00:17:42,760
aspect of lines lines in time but

00:17:40,000 --> 00:17:43,720
instead their visual and spatial aspect

00:17:42,760 --> 00:17:47,290
she writes

00:17:43,720 --> 00:17:49,660
as visual forms the lines create their

00:17:47,290 --> 00:17:51,820
own order in the text a frame which

00:17:49,660 --> 00:17:53,980
introduces the struggle of hierarchy

00:17:51,820 --> 00:17:55,390
into the words the breaks become a force

00:17:53,980 --> 00:17:57,340
against which the whole must be

00:17:55,390 --> 00:17:59,980
recovered or against which the whole can

00:17:57,340 --> 00:18:01,779
be fractured it dissolved let go the

00:17:59,980 --> 00:18:03,969
visual line strains the litter

00:18:01,779 --> 00:18:06,789
very Authority with its vulgarity its

00:18:03,969 --> 00:18:10,059
crudeness its fleshiness which pollutes

00:18:06,789 --> 00:18:13,029
the material of cure language Drucker is

00:18:10,059 --> 00:18:14,529
arguing here that the spatial layout of

00:18:13,029 --> 00:18:16,570
text on the page has its own

00:18:14,529 --> 00:18:17,979
significance which demonstrates that

00:18:16,570 --> 00:18:20,190
written language is never simply a

00:18:17,979 --> 00:18:22,570
straightforward transcription of speech

00:18:20,190 --> 00:18:24,159
but something more that has its own

00:18:22,570 --> 00:18:26,769
affordances and operates with its own

00:18:24,159 --> 00:18:28,809
conventions in other words the text

00:18:26,769 --> 00:18:31,479
always carries traces of the fleshy

00:18:28,809 --> 00:18:33,309
physical world with it not just the

00:18:31,479 --> 00:18:35,469
decisions the writer made in adapting

00:18:33,309 --> 00:18:37,239
language to the visual form but also the

00:18:35,469 --> 00:18:38,950
material of the page and the physical

00:18:37,239 --> 00:18:40,479
gestures of the writing process and

00:18:38,950 --> 00:18:42,669
whether that means the writers

00:18:40,479 --> 00:18:43,749
penmanship or their keystrokes or any of

00:18:42,669 --> 00:18:48,940
the other things that go into producing

00:18:43,749 --> 00:18:52,179
a physical text finally Ron Suleiman the

00:18:48,940 --> 00:18:53,799
poet Ron silliman wrote this and which I

00:18:52,179 --> 00:18:55,599
think it's like important for talking

00:18:53,799 --> 00:18:58,570
about the line as it regards computer

00:18:55,599 --> 00:19:00,700
programming the line is the sole unit of

00:18:58,570 --> 00:19:02,499
punctuation whose sister whose use

00:19:00,700 --> 00:19:04,749
historically has not been determined by

00:19:02,499 --> 00:19:06,849
its potential for submitting chains of

00:19:04,749 --> 00:19:08,830
words to the hierarchic orders of logic

00:19:06,849 --> 00:19:10,539
descended from the classical grammars

00:19:08,830 --> 00:19:12,759
Greek and Latin which have become our

00:19:10,539 --> 00:19:15,519
normative contemporary model for clarity

00:19:12,759 --> 00:19:18,309
and writing in other words one roll of

00:19:15,519 --> 00:19:19,749
the line is specifically to cut across

00:19:18,309 --> 00:19:22,059
grammar and syntax

00:19:19,749 --> 00:19:24,249
especially when grammar and syntax alone

00:19:22,059 --> 00:19:28,809
don't give us the expressive tools to do

00:19:24,249 --> 00:19:31,779
what we need to do with the text all of

00:19:28,809 --> 00:19:34,089
these statements about the use and

00:19:31,779 --> 00:19:36,269
lineage of poetry apply equally to the

00:19:34,089 --> 00:19:38,619
use of lineage in computer programming

00:19:36,269 --> 00:19:41,109
most programming languages understand

00:19:38,619 --> 00:19:43,839
their input as just an unbroken stream

00:19:41,109 --> 00:19:45,729
of choke ins from which any characters

00:19:43,839 --> 00:19:48,429
representing visual layout like spaces

00:19:45,729 --> 00:19:50,609
tabs and line breaks are stripped before

00:19:48,429 --> 00:19:53,080
the program is compiled or interpreted

00:19:50,609 --> 00:19:55,089
nevertheless programmers make use of

00:19:53,080 --> 00:19:57,759
visual layout in their source code and

00:19:55,089 --> 00:20:00,849
line breaks in particular in order I

00:19:57,759 --> 00:20:02,320
think to afix detail to time and make

00:20:00,849 --> 00:20:05,049
the source code more readable for

00:20:02,320 --> 00:20:06,879
themselves over other programmers what's

00:20:05,049 --> 00:20:08,830
considered readable code is however

00:20:06,879 --> 00:20:11,139
highly conventionalized and often

00:20:08,830 --> 00:20:13,629
algorithmically enforced with tools like

00:20:11,139 --> 00:20:15,100
linters and autocomplete in this

00:20:13,629 --> 00:20:17,950
animation I'm using the key

00:20:15,100 --> 00:20:20,919
jazz web editor to make this creatively

00:20:17,950 --> 00:20:25,780
formatted code more tidy in the word of

00:20:20,919 --> 00:20:27,100
the of the editor and in my experience

00:20:25,780 --> 00:20:30,789
as a programmer I may be in your

00:20:27,100 --> 00:20:32,380
experience I found that not all code is

00:20:30,789 --> 00:20:33,970
making more readable by adhering to

00:20:32,380 --> 00:20:36,760
convention and sometimes there are bits

00:20:33,970 --> 00:20:38,320
of code that require unconventional in

00:20:36,760 --> 00:20:40,059
iation in order to make their inner

00:20:38,320 --> 00:20:43,140
workings more evidence sometimes as a

00:20:40,059 --> 00:20:45,400
programmer you have to in jail your code

00:20:43,140 --> 00:20:48,460
and many programmers also know that

00:20:45,400 --> 00:20:50,350
readability can be an arbitrary concern

00:20:48,460 --> 00:20:53,080
which is the among the reasons that the

00:20:50,350 --> 00:20:56,080
International obfuscated C code contests

00:20:53,080 --> 00:20:58,000
exists in which contestants often make

00:20:56,080 --> 00:21:00,549
use of line breaks and layout towards

00:20:58,000 --> 00:21:03,370
more aesthetic ends this is Edward Giles

00:21:00,549 --> 00:21:06,789
entry from the 2019 competition that has

00:21:03,370 --> 00:21:09,100
some little waves the code is broken up

00:21:06,789 --> 00:21:10,390
into these little waves switching is

00:21:09,100 --> 00:21:16,120
nice it's actually it's a program that

00:21:10,390 --> 00:21:17,950
applies reverb to to a wav file and even

00:21:16,120 --> 00:21:19,690
in a language like Python which is

00:21:17,950 --> 00:21:22,030
somewhat unusual by virtue of the fact

00:21:19,690 --> 00:21:25,059
that whitespace is actually a part of

00:21:22,030 --> 00:21:27,070
the languages syntax and Python still

00:21:25,059 --> 00:21:29,169
provides so many resources for creative

00:21:27,070 --> 00:21:32,409
ending expression with line breaks that

00:21:29,169 --> 00:21:33,789
entire PE PS have to be written in order

00:21:32,409 --> 00:21:36,789
to guide people in the right way to do

00:21:33,789 --> 00:21:39,340
things as with other languages there's

00:21:36,789 --> 00:21:41,200
even a module of probably many different

00:21:39,340 --> 00:21:43,240
modules for automatically reformatted in

00:21:41,200 --> 00:21:46,000
your code in order to conform to these

00:21:43,240 --> 00:21:50,080
conventional standards personally as a

00:21:46,000 --> 00:21:51,700
poet and a Python programmer I would

00:21:50,080 --> 00:21:54,070
never use one of these libraries I have

00:21:51,700 --> 00:21:56,650
too much fun playing with the layouts

00:21:54,070 --> 00:21:58,539
and so making delay how to do exactly

00:21:56,650 --> 00:22:02,140
what I wanted to do inside of a Python

00:21:58,539 --> 00:22:05,740
program and so that's some historical

00:22:02,140 --> 00:22:09,039
backgrounds with that in mind I want to

00:22:05,740 --> 00:22:11,080
talk and and speaking about Python

00:22:09,039 --> 00:22:12,250
programming I want to show off some of

00:22:11,080 --> 00:22:18,100
the stuff I've been working on recently

00:22:12,250 --> 00:22:19,690
the concerns lines of poetry and as a

00:22:18,100 --> 00:22:23,380
poet I've been interested in putting the

00:22:19,690 --> 00:22:26,559
idea of lines as freestanding textual

00:22:23,380 --> 00:22:28,690
units test removing lines of poetry from

00:22:26,559 --> 00:22:31,540
the original context and then figuring

00:22:28,690 --> 00:22:35,710
ways to just oppose them in unusual ways

00:22:31,540 --> 00:22:38,230
um this sort of line of research started

00:22:35,710 --> 00:22:40,380
a few years ago and I made something

00:22:38,230 --> 00:22:42,970
that I call the Gutenberg poetry corpus

00:22:40,380 --> 00:22:44,500
that corpus consists of around three

00:22:42,970 --> 00:22:47,350
million lines of poetry generated from

00:22:44,500 --> 00:22:48,370
Project Gutenberg which is a database of

00:22:47,350 --> 00:22:50,740
texts that are in the public domain

00:22:48,370 --> 00:22:54,460
around like 70,000 books that are in

00:22:50,740 --> 00:22:55,810
public domain that are all available in

00:22:54,460 --> 00:22:59,290
plain text format that makes them really

00:22:55,810 --> 00:23:02,590
easy to manipulate for text analysis and

00:22:59,290 --> 00:23:05,140
creative purposes to build the Gutenberg

00:23:02,590 --> 00:23:06,790
poetry corpus I wrote a program that

00:23:05,140 --> 00:23:08,710
goes through all of the metadata and

00:23:06,790 --> 00:23:11,380
Project Gutenberg and finds all the

00:23:08,710 --> 00:23:13,780
books that are listed as poetry and then

00:23:11,380 --> 00:23:15,520
I scan through those my programs can

00:23:13,780 --> 00:23:17,920
stir them line by line extracts line of

00:23:15,520 --> 00:23:20,080
texts that look like poetry as opposed

00:23:17,920 --> 00:23:23,830
to introductions or commentary or folks

00:23:20,080 --> 00:23:25,450
or other other pair of texts and then

00:23:23,830 --> 00:23:28,900
collect them together and it ends up

00:23:25,450 --> 00:23:30,370
being a fifty-two megabyte file that

00:23:28,900 --> 00:23:32,530
contains three million lines of poetry

00:23:30,370 --> 00:23:34,660
from all of the included books and other

00:23:32,530 --> 00:23:36,280
gutenberg or at least the books that

00:23:34,660 --> 00:23:38,130
were in project gutenberg a couple of

00:23:36,280 --> 00:23:40,780
years ago as of a couple of years ago

00:23:38,130 --> 00:23:42,400
along with a number that identifies the

00:23:40,780 --> 00:23:45,160
volume that it originates from this is

00:23:42,400 --> 00:23:46,960
actually stored in JSON format but the

00:23:45,160 --> 00:23:48,990
particular kind of JSON format where you

00:23:46,960 --> 00:23:51,130
separate JSON records with a new line

00:23:48,990 --> 00:23:52,570
which I think even know if that format

00:23:51,130 --> 00:23:54,850
it's used all over the place but I don't

00:23:52,570 --> 00:23:56,680
know if it has an official name and this

00:23:54,850 --> 00:23:59,710
is a diagram of the process of creating

00:23:56,680 --> 00:24:02,800
that corpus and the most sophisticated

00:23:59,710 --> 00:24:05,020
part of the code is the is the rules to

00:24:02,800 --> 00:24:07,540
determine what counts as poetry and

00:24:05,020 --> 00:24:09,070
which is just a bunch of ad-hoc criteria

00:24:07,540 --> 00:24:11,740
that I'd eventually like to replace with

00:24:09,070 --> 00:24:12,820
something more well reasoned but this

00:24:11,740 --> 00:24:15,460
program works pretty well

00:24:12,820 --> 00:24:18,640
and does what I want it does what I

00:24:15,460 --> 00:24:23,290
wanted to do the corpus just to give you

00:24:18,640 --> 00:24:24,730
an idea of what it looks like this is an

00:24:23,290 --> 00:24:26,590
animation of what happens when you make

00:24:24,730 --> 00:24:28,810
a program that just prints out lines at

00:24:26,590 --> 00:24:31,180
random so it's just like a big stream of

00:24:28,810 --> 00:24:35,050
lines of poetry that have been taken out

00:24:31,180 --> 00:24:36,790
of their context actually the reason

00:24:35,050 --> 00:24:38,290
that I made the gutenberg poetry corpus

00:24:36,790 --> 00:24:40,120
in the first place was because I was

00:24:38,290 --> 00:24:42,700
teaching a creative writing class in

00:24:40,120 --> 00:24:44,680
2015 and I wanted to give my stew

00:24:42,700 --> 00:24:47,230
it's an assignment to write autocomplete

00:24:44,680 --> 00:24:49,360
poetry which is usually you go to Google

00:24:47,230 --> 00:24:51,810
and you type in some words and then you

00:24:49,360 --> 00:24:54,790
make a poem from what Google suggests

00:24:51,810 --> 00:24:56,470
after what you typed but I didn't want

00:24:54,790 --> 00:24:59,650
my students have to use Google to do

00:24:56,470 --> 00:25:02,650
this if they didn't want to and so I

00:24:59,650 --> 00:25:04,780
made a quick tool with nginx and Redis

00:25:02,650 --> 00:25:06,880
that sort of works like Google search

00:25:04,780 --> 00:25:10,900
autocomplete except it autocompletes

00:25:06,880 --> 00:25:13,630
your typing with a line of poetry from

00:25:10,900 --> 00:25:15,010
the Project Gutenberg poetry corpus the

00:25:13,630 --> 00:25:16,960
search resisting letter so you can

00:25:15,010 --> 00:25:20,140
search to write and it completes it with

00:25:16,960 --> 00:25:24,040
the line that matches that prefix this

00:25:20,140 --> 00:25:27,540
is actually believed so hoping and it's

00:25:24,040 --> 00:25:30,550
five years old which is an eternity and

00:25:27,540 --> 00:25:34,960
online art project terms but I think you

00:25:30,550 --> 00:25:37,900
can still go there and use it once I had

00:25:34,960 --> 00:25:40,570
that thought corpus other applications

00:25:37,900 --> 00:25:42,070
started to stress themselves the poetic

00:25:40,570 --> 00:25:45,010
line as you discussed is often

00:25:42,070 --> 00:25:46,810
determined by sound meter rhyme

00:25:45,010 --> 00:25:50,440
assonance alliteration these are things

00:25:46,810 --> 00:25:52,140
that like set one line of verse from set

00:25:50,440 --> 00:25:54,880
apart one line at first from another

00:25:52,140 --> 00:25:56,920
starting with this insights I wanted to

00:25:54,880 --> 00:25:58,900
make a project that could sort cluster

00:25:56,920 --> 00:26:02,110
and juxtapose poetic lines based on

00:25:58,900 --> 00:26:05,560
their genetic characteristics basically

00:26:02,110 --> 00:26:07,000
what I wanted to do was first of all

00:26:05,560 --> 00:26:09,130
find a way to represent the sound of

00:26:07,000 --> 00:26:11,440
words as vectors so that I could draw

00:26:09,130 --> 00:26:13,240
like a scatterplot like this where words

00:26:11,440 --> 00:26:14,680
with similar sounds like octopus and

00:26:13,240 --> 00:26:15,430
apocalypse would be closer together on

00:26:14,680 --> 00:26:17,530
the scatterplot

00:26:15,430 --> 00:26:20,260
and words that are dissimilar like

00:26:17,530 --> 00:26:21,520
inking Kinki would be further away even

00:26:20,260 --> 00:26:25,240
though there would be clustered together

00:26:21,520 --> 00:26:27,670
and so finding a way to like turn a word

00:26:25,240 --> 00:26:31,120
of the phonetic information forward into

00:26:27,670 --> 00:26:32,710
a vector to do this I made the program

00:26:31,120 --> 00:26:34,780
using the CMU pronouncing dictionary

00:26:32,710 --> 00:26:36,700
which is a database of English words and

00:26:34,780 --> 00:26:38,920
their pronunciations which you need in

00:26:36,700 --> 00:26:40,510
English because the way that words spell

00:26:38,920 --> 00:26:43,050
the way the words are spelled doesn't

00:26:40,510 --> 00:26:45,850
really have much with how they sound and

00:26:43,050 --> 00:26:51,790
then I wrote sort of like a weird kind

00:26:45,850 --> 00:26:55,389
of ad hoc feature detection manual

00:26:51,790 --> 00:26:57,820
feature extraction algorithm that uses

00:26:55,389 --> 00:27:01,419
grams of phonetic features in order to

00:26:57,820 --> 00:27:03,549
produce a big public matrix of counts of

00:27:01,419 --> 00:27:06,070
features use principal components

00:27:03,549 --> 00:27:08,469
analysis so that I ended up for every

00:27:06,070 --> 00:27:10,149
word of English a single 50 dimensional

00:27:08,469 --> 00:27:14,409
vector that represents the sound of that

00:27:10,149 --> 00:27:16,779
word I used that same algorithm then to

00:27:14,409 --> 00:27:19,329
determine to get a 50 dimensional vector

00:27:16,779 --> 00:27:21,399
for every line of poetry in the Project

00:27:19,329 --> 00:27:23,399
Gutenberg corpus so I had a for every

00:27:21,399 --> 00:27:25,869
line of poetry I had a number a

00:27:23,399 --> 00:27:28,989
coordinate in space that indicated the

00:27:25,869 --> 00:27:31,719
sound of that poem and with that I made

00:27:28,989 --> 00:27:34,179
this book called articulations this is a

00:27:31,719 --> 00:27:36,339
book of computer-generated poetry it was

00:27:34,179 --> 00:27:38,139
published by counter path Press two

00:27:36,339 --> 00:27:40,539
years ago as part of Nick Montfort using

00:27:38,139 --> 00:27:42,039
electricity series which consists all

00:27:40,539 --> 00:27:44,950
all of the books in the series are

00:27:42,039 --> 00:27:46,599
computer-generated and I've included an

00:27:44,950 --> 00:27:47,859
example of the output here I don't have

00:27:46,599 --> 00:27:50,940
time to read it even though I love read

00:27:47,859 --> 00:27:53,440
English and so the book has composed a

00:27:50,940 --> 00:27:55,059
random and automated random walk through

00:27:53,440 --> 00:27:57,999
the phonetic space of the Project

00:27:55,059 --> 00:27:59,889
Gutenberg poetry corpus I start with a

00:27:57,999 --> 00:28:01,119
random line of poetry and then I find

00:27:59,889 --> 00:28:02,979
the line that is most phonetically

00:28:01,119 --> 00:28:05,139
similar to it based on its calculated

00:28:02,979 --> 00:28:06,909
vector and then add that to the output

00:28:05,139 --> 00:28:08,469
find the line that's most phonetically

00:28:06,909 --> 00:28:11,169
similar to that add that to the output

00:28:08,469 --> 00:28:14,229
and so forth excluding any line that has

00:28:11,169 --> 00:28:16,690
previously been in the output the end

00:28:14,229 --> 00:28:18,279
result is this kind of poetry where

00:28:16,690 --> 00:28:20,739
cohesion is achieved only through

00:28:18,279 --> 00:28:22,450
phonetic similarity on one one key

00:28:20,739 --> 00:28:25,029
decision here that has to do with the

00:28:22,450 --> 00:28:27,669
topic of this talk is that I decided to

00:28:25,029 --> 00:28:30,479
format the output as prose by by running

00:28:27,669 --> 00:28:32,469
the lines together into into paragraphs

00:28:30,479 --> 00:28:34,629
instead of retaining the original

00:28:32,469 --> 00:28:36,700
formatting of the lines and the reason

00:28:34,629 --> 00:28:38,289
for doing that is I wanted to blur the

00:28:36,700 --> 00:28:40,299
distinction between lines and draw

00:28:38,289 --> 00:28:44,019
attention to how they're similar to each

00:28:40,299 --> 00:28:48,279
other so that's one experiment with that

00:28:44,019 --> 00:28:52,289
corpus a more recent project which I'm

00:28:48,279 --> 00:28:54,669
calling variational cest annoyed spirals

00:28:52,289 --> 00:28:57,909
this is less about the sound of words

00:28:54,669 --> 00:29:00,489
and more about the meaning and syntax of

00:28:57,909 --> 00:29:02,229
lines of poetry and the ways that

00:29:00,489 --> 00:29:04,200
machine learning can facilitate the

00:29:02,229 --> 00:29:06,519
invention of new poetic forms

00:29:04,200 --> 00:29:07,749
computer-generated poetry of course is a

00:29:06,519 --> 00:29:09,309
whole field of practice and

00:29:07,749 --> 00:29:11,499
computational creativity you

00:29:09,309 --> 00:29:13,690
get on Google Scholar and find you know

00:29:11,499 --> 00:29:16,269
hundreds of papers about generating

00:29:13,690 --> 00:29:17,830
poems with computers but the question I

00:29:16,269 --> 00:29:20,230
started out with was not how do i

00:29:17,830 --> 00:29:22,809
generate new poems but how do i generate

00:29:20,230 --> 00:29:24,399
new lines of poetry how do i how do i

00:29:22,809 --> 00:29:27,279
make a generator that knows how to

00:29:24,399 --> 00:29:29,649
produce just a single line of poetry and

00:29:27,279 --> 00:29:34,149
what does it mean to write a generator

00:29:29,649 --> 00:29:37,870
that produces a single line to do this I

00:29:34,149 --> 00:29:39,759
made use of a kind of neural network

00:29:37,870 --> 00:29:45,909
architecture called a variational auto

00:29:39,759 --> 00:29:47,649
encoder sort of akin to again in the

00:29:45,909 --> 00:29:49,330
sense that it is a model that kind of

00:29:47,649 --> 00:29:51,429
essentially learns how to compress data

00:29:49,330 --> 00:29:53,889
the encoder produces a fixed length

00:29:51,429 --> 00:29:55,269
vector for each item the Train set and

00:29:53,889 --> 00:29:57,129
then the decoder learns how to produce

00:29:55,269 --> 00:30:01,269
the original data from that fixed link

00:29:57,129 --> 00:30:02,799
vector in a variational auto encoder the

00:30:01,269 --> 00:30:04,299
values in the fixed length vector are

00:30:02,799 --> 00:30:06,190
constrained to conform to particular

00:30:04,299 --> 00:30:07,740
statistical distribution and the benefit

00:30:06,190 --> 00:30:09,970
of this is that the model becomes

00:30:07,740 --> 00:30:11,980
generative you can generate new data

00:30:09,970 --> 00:30:13,570
that looks like the original data by

00:30:11,980 --> 00:30:15,610
picking a random numbers and feeding

00:30:13,570 --> 00:30:17,440
them to the decoder similar random

00:30:15,610 --> 00:30:19,090
numbers produced similar outputs and you

00:30:17,440 --> 00:30:23,889
end up with a latent space that can be

00:30:19,090 --> 00:30:25,629
explored this like the coming up with

00:30:23,889 --> 00:30:29,139
Katie I did not invent the idea of a

00:30:25,629 --> 00:30:32,259
variational auto encoder and I'm only a

00:30:29,139 --> 00:30:35,409
beginner machine learning engineer so I

00:30:32,259 --> 00:30:38,649
relied very heavily on research from

00:30:35,409 --> 00:30:45,059
from these researchers from ginge from

00:30:38,649 --> 00:30:48,519
Pei and Benjamin Hynes Earthlings

00:30:45,059 --> 00:30:50,320
pre-trained embeddings for four-bike

00:30:48,519 --> 00:30:52,570
pairs were also a big part of this

00:30:50,320 --> 00:30:54,369
project I should also note that I was

00:30:52,570 --> 00:30:57,249
like super inspired by Robin Sloan's

00:30:54,369 --> 00:30:58,539
sentence space project from a couple of

00:30:57,249 --> 00:31:00,999
years ago which should look at and I

00:30:58,539 --> 00:31:02,799
have a link to my fork of the

00:31:00,999 --> 00:31:04,869
variational auto encoder or code that

00:31:02,799 --> 00:31:08,679
you can actually launch in your notebook

00:31:04,869 --> 00:31:12,700
in your browser if you want so once you

00:31:08,679 --> 00:31:14,470
train this model you end up with a model

00:31:12,700 --> 00:31:16,960
where you can feed a random number into

00:31:14,470 --> 00:31:19,360
the decoder and get back a line of

00:31:16,960 --> 00:31:21,629
poetry part of the reason that I wanted

00:31:19,360 --> 00:31:23,320
to do this was to be able to explore

00:31:21,629 --> 00:31:26,410
poetry space

00:31:23,320 --> 00:31:27,940
last summer runway funded my work on

00:31:26,410 --> 00:31:29,470
this model and part of the reason that I

00:31:27,940 --> 00:31:31,270
wanted to make it so that I could use

00:31:29,470 --> 00:31:33,610
their leading space explorer in the

00:31:31,270 --> 00:31:36,960
runway up what you're seeing here is

00:31:33,610 --> 00:31:39,280
like a a single sample from that space

00:31:36,960 --> 00:31:41,020
surrounded by samples that have that are

00:31:39,280 --> 00:31:44,050
from similar numbers and you can sort of

00:31:41,020 --> 00:31:46,390
move over at like Google Maps so each

00:31:44,050 --> 00:31:49,060
box contains a line of poetry that is

00:31:46,390 --> 00:31:51,760
generated by the model from nearby

00:31:49,060 --> 00:31:53,530
points in look in value in space and

00:31:51,760 --> 00:31:55,420
once you have a model like this there's

00:31:53,530 --> 00:31:57,640
all kinds of fun stuff that's and stuff

00:31:55,420 --> 00:31:59,260
that you can do one is creating

00:31:57,640 --> 00:32:01,900
interpolations between two different

00:31:59,260 --> 00:32:03,460
lines of poetry so you encode one line

00:32:01,900 --> 00:32:06,100
of poetry and encode another line of

00:32:03,460 --> 00:32:08,320
poetry and then decode from points along

00:32:06,100 --> 00:32:09,370
the line that connects them the line

00:32:08,320 --> 00:32:11,950
connects them

00:32:09,370 --> 00:32:14,590
so this is interpolation from the first

00:32:11,950 --> 00:32:16,870
line to the last line of Robert Frost's

00:32:14,590 --> 00:32:18,610
the road not taken' I'm taking a more

00:32:16,870 --> 00:32:21,640
direct Road from the beginning to the

00:32:18,610 --> 00:32:23,830
end of this poem and so this is sort of

00:32:21,640 --> 00:32:26,110
like the result of drawing a line

00:32:23,830 --> 00:32:30,370
through a leaden space of lines it's

00:32:26,110 --> 00:32:32,590
like a meta of line in a sense when I

00:32:30,370 --> 00:32:34,360
showed this project on on master

00:32:32,590 --> 00:32:36,400
Donahue's door there suggested circular

00:32:34,360 --> 00:32:38,500
interpolation meaning pick a random

00:32:36,400 --> 00:32:41,080
hyperplane and then decode from a circle

00:32:38,500 --> 00:32:43,120
drawn in the hyperplane and using this

00:32:41,080 --> 00:32:44,770
technique you get lovely lines of poetry

00:32:43,120 --> 00:32:46,540
that seem to return to where they

00:32:44,770 --> 00:32:50,020
started and it's just a little interface

00:32:46,540 --> 00:32:53,950
I made in p5.js to explore one of these

00:32:50,020 --> 00:32:55,300
circling circular interpolations the

00:32:53,950 --> 00:32:58,420
poetry generator that I made with this

00:32:55,300 --> 00:33:00,940
technique produces poems by sampling

00:32:58,420 --> 00:33:02,590
lines from points on concentric circles

00:33:00,940 --> 00:33:04,990
that gradually increase in size in the

00:33:02,590 --> 00:33:07,450
Leighton space it closes schematic that

00:33:04,990 --> 00:33:09,430
looks like this and each circle

00:33:07,450 --> 00:33:11,320
represents a stanza and as the circles

00:33:09,430 --> 00:33:12,850
get bigger the stanzas get longer and

00:33:11,320 --> 00:33:16,750
less once each stanza is an elaboration

00:33:12,850 --> 00:33:20,200
on the last I might read just a little

00:33:16,750 --> 00:33:22,360
bit from this one this is a moment that

00:33:20,200 --> 00:33:25,600
is a moment full of a moment could be

00:33:22,360 --> 00:33:27,580
seen that is made that chose a moment

00:33:25,600 --> 00:33:30,880
having been pure as a little heart was

00:33:27,580 --> 00:33:32,530
seen that is made that shows a moment

00:33:30,880 --> 00:33:34,750
having been full of a moment still had

00:33:32,530 --> 00:33:36,539
seen her eyes making a little heart of

00:33:34,750 --> 00:33:38,400
man the

00:33:36,539 --> 00:33:40,980
that shows some salt however that space

00:33:38,400 --> 00:33:43,799
moment had been gone in sweet as a smile

00:33:40,980 --> 00:33:46,049
at beauty's eyes praised my heart the

00:33:43,799 --> 00:33:47,970
present that shows perhaps the latter of

00:33:46,049 --> 00:33:50,880
this moment having been as sweet as thou

00:33:47,970 --> 00:33:53,760
shalt have seen his eyes sweet o my love

00:33:50,880 --> 00:33:56,070
my heart is bright only the heart the

00:33:53,760 --> 00:33:57,929
latter that shows perhaps the books of

00:33:56,070 --> 00:34:00,179
being haven't been for such a different

00:33:57,929 --> 00:34:03,000
hours had passed and all shuddering with

00:34:00,179 --> 00:34:06,000
her fair eyes of her eyes sweet a smile

00:34:03,000 --> 00:34:09,810
of my dear face seeing the word that is

00:34:06,000 --> 00:34:11,820
a moment which I like I think that's a

00:34:09,810 --> 00:34:13,859
pretty good result

00:34:11,820 --> 00:34:15,440
all of this finally brings me back to

00:34:13,859 --> 00:34:19,830
the title of the talk

00:34:15,440 --> 00:34:22,379
computational stick ography so making

00:34:19,830 --> 00:34:23,879
that poetry variational autoencoder was

00:34:22,379 --> 00:34:25,619
fun but at this point it means so many

00:34:23,879 --> 00:34:27,020
projects with a good word poetry corpus

00:34:25,619 --> 00:34:29,220
that I'm getting kind of sick of it

00:34:27,020 --> 00:34:31,589
because it consists of poetry in the

00:34:29,220 --> 00:34:33,960
public domain specifically in the domain

00:34:31,589 --> 00:34:36,450
in the United States it mostly consists

00:34:33,960 --> 00:34:38,129
of 18th and 19th century white male

00:34:36,450 --> 00:34:41,010
American and British poets

00:34:38,129 --> 00:34:44,010
there's poetics by and large let's say

00:34:41,010 --> 00:34:47,129
are not especially expansive in subject

00:34:44,010 --> 00:34:48,659
matter or style so a lot of what comes

00:34:47,129 --> 00:34:49,379
out of variation a model has a pretty

00:34:48,659 --> 00:34:51,720
monotonous

00:34:49,379 --> 00:34:53,609
diction it all sort of sounds like a

00:34:51,720 --> 00:34:55,139
mishmash we'll have cholera Gin

00:34:53,609 --> 00:34:59,339
Wordsworth like falling asleep in your

00:34:55,139 --> 00:35:02,250
high school English class and so I could

00:34:59,339 --> 00:35:03,690
just make another corpus you may say but

00:35:02,250 --> 00:35:05,400
the issue is that this is the only

00:35:03,690 --> 00:35:07,349
corpus of poetry that I know of that is

00:35:05,400 --> 00:35:09,810
both freely available and entirely

00:35:07,349 --> 00:35:11,490
unencumbered by copyright I could scrape

00:35:09,810 --> 00:35:13,619
the web or scans of books for

00:35:11,490 --> 00:35:14,940
contemporary poetry but then I wouldn't

00:35:13,619 --> 00:35:16,500
feel like I had any real ownership in

00:35:14,940 --> 00:35:18,540
the output of the program and I'd be

00:35:16,500 --> 00:35:20,099
obligated to seek out the permission of

00:35:18,540 --> 00:35:21,990
every poet whose work was used a

00:35:20,099 --> 00:35:24,720
training model and I don't have time for

00:35:21,990 --> 00:35:26,670
that so the solution in pursuing is to

00:35:24,720 --> 00:35:29,760
find some way to introduce poetic line

00:35:26,670 --> 00:35:32,460
breaks into arbitrary text that way I

00:35:29,760 --> 00:35:34,440
can use any kind of text to train or at

00:35:32,460 --> 00:35:38,040
least fine-tune the the model that I

00:35:34,440 --> 00:35:39,599
made and if I wanted to I could train a

00:35:38,040 --> 00:35:42,900
variational auto-encoder decreased lines

00:35:39,599 --> 00:35:44,580
of poetry about flowers by grabbing all

00:35:42,900 --> 00:35:47,970
of the Wikipedia pages about flowers

00:35:44,580 --> 00:35:49,590
splitting that prose into lines and then

00:35:47,970 --> 00:35:51,600
use those lines to train

00:35:49,590 --> 00:35:53,990
model and then publish the resulting

00:35:51,600 --> 00:35:56,280
poems under the same licenses Wikipedia

00:35:53,990 --> 00:35:59,670
so I've made some progress on this and I

00:35:56,280 --> 00:36:01,710
want to show you that progress I'm using

00:35:59,670 --> 00:36:03,540
this word stick ography to describe the

00:36:01,710 --> 00:36:06,900
process of adding poetic line breaks to

00:36:03,540 --> 00:36:08,970
arbitrary texts that term comes from

00:36:06,900 --> 00:36:11,450
biblical studies where scholars use it

00:36:08,970 --> 00:36:14,010
to describe how scribes copied certain

00:36:11,450 --> 00:36:18,060
poetic or musical passages in Scripture

00:36:14,010 --> 00:36:20,070
not in the regular continuous script but

00:36:18,060 --> 00:36:22,440
with graphic devices to separate poetic

00:36:20,070 --> 00:36:26,460
lines like spaces or Lang breaks between

00:36:22,440 --> 00:36:27,900
the verses showing here an example of

00:36:26,460 --> 00:36:30,630
the same passage from two different

00:36:27,900 --> 00:36:32,370
Scrolls one in which subscribe has

00:36:30,630 --> 00:36:34,530
copied the passage in continuous script

00:36:32,370 --> 00:36:36,620
and another in which describe is written

00:36:34,530 --> 00:36:39,690
the passage in a sticky graphic fashion

00:36:36,620 --> 00:36:41,100
with the blank spaces to denote to note

00:36:39,690 --> 00:36:42,360
the ends of poetic lines these are

00:36:41,100 --> 00:36:44,340
written in lining these aren't line

00:36:42,360 --> 00:36:47,100
breaks there the lines are separated by

00:36:44,340 --> 00:36:49,380
spaces the skull fragment isn't from the

00:36:47,100 --> 00:36:50,910
same passage but it shows what the empty

00:36:49,380 --> 00:36:55,350
spaces looks like in the original

00:36:50,910 --> 00:36:56,730
manuscript so as I understand it

00:36:55,350 --> 00:36:59,250
different scribes had different

00:36:56,730 --> 00:37:01,080
techniques for writing these passages to

00:36:59,250 --> 00:37:03,300
who graphically they applied a set of

00:37:01,080 --> 00:37:04,500
criteria to determine which passages

00:37:03,300 --> 00:37:06,990
should be written and sticky'

00:37:04,500 --> 00:37:08,880
graphically but came up with their own

00:37:06,990 --> 00:37:10,920
strategies for performing this to ghagra

00:37:08,880 --> 00:37:12,870
fee based on their own ideas about how

00:37:10,920 --> 00:37:15,510
the text worked phonetically

00:37:12,870 --> 00:37:16,830
semantically syntactically so what I

00:37:15,510 --> 00:37:18,630
need is to be able to do what these

00:37:16,830 --> 00:37:21,180
scribes did but in an automated fashion

00:37:18,630 --> 00:37:23,580
so I can do it on you know thousands and

00:37:21,180 --> 00:37:25,140
thousands if we keep PDF pages so I

00:37:23,580 --> 00:37:28,500
trained machine learning level to do it

00:37:25,140 --> 00:37:31,800
I treated this as a sequence prediction

00:37:28,500 --> 00:37:33,690
task the input to the model is sequences

00:37:31,800 --> 00:37:36,420
of tokens from the Gutenberg poetry

00:37:33,690 --> 00:37:38,520
corpus and the labels are either a 0 or

00:37:36,420 --> 00:37:40,230
a 1 with a 1 indicating that there

00:37:38,520 --> 00:37:45,000
should be a line break directly

00:37:40,230 --> 00:37:47,670
following that Chokin my my my theory is

00:37:45,000 --> 00:37:50,700
that most Linnaean relies on the sounds

00:37:47,670 --> 00:37:52,170
of words so I used pencil 8 to find

00:37:50,700 --> 00:37:54,240
phonetic embeddings from each word

00:37:52,170 --> 00:37:56,850
instead of using just like numerical

00:37:54,240 --> 00:37:58,890
indexes in a vocabulary pencil 8 by the

00:37:56,850 --> 00:38:00,720
way is the graph game - phoneme model

00:37:58,890 --> 00:38:03,060
that I actually talked about in my bank

00:38:00,720 --> 00:38:04,590
on talk last year

00:38:03,060 --> 00:38:06,480
I think that using the phonetic

00:38:04,590 --> 00:38:08,520
embeddings makes the model more accurate

00:38:06,480 --> 00:38:10,050
and it also makes it possible for the

00:38:08,520 --> 00:38:11,430
model to deal with out of vocabulary

00:38:10,050 --> 00:38:14,550
words or even like made-up nonsense

00:38:11,430 --> 00:38:16,350
words which is definitely a benefit the

00:38:14,550 --> 00:38:18,840
network architecture is a stack of

00:38:16,350 --> 00:38:21,210
bi-directional recurrent neural networks

00:38:18,840 --> 00:38:23,400
I know that everyone has moved on to

00:38:21,210 --> 00:38:25,170
transformers or whatever but it took me

00:38:23,400 --> 00:38:27,180
like two years to understand our own

00:38:25,170 --> 00:38:29,550
ends well enough to be able to just like

00:38:27,180 --> 00:38:31,530
whip up a model like this on a whim and

00:38:29,550 --> 00:38:34,250
I am planning to make the most of that

00:38:31,530 --> 00:38:36,870
investment and I'm still working on this

00:38:34,250 --> 00:38:38,400
but my little test models accomplish the

00:38:36,870 --> 00:38:41,970
tasks that I that I wanted to do pretty

00:38:38,400 --> 00:38:45,570
well achieving 93% accuracy on my

00:38:41,970 --> 00:38:49,140
validation set after training on my 2013

00:38:45,570 --> 00:38:50,940
MacBook Air overnight which isn't that I

00:38:49,140 --> 00:38:54,390
only like to make neural network models

00:38:50,940 --> 00:38:56,580
when I can train them on my laptop this

00:38:54,390 --> 00:38:58,680
is a video of a live typing interface

00:38:56,580 --> 00:39:01,770
that I made with an early version of the

00:38:58,680 --> 00:39:03,690
model you type continuous text on the

00:39:01,770 --> 00:39:06,320
left there and get back text with models

00:39:03,690 --> 00:39:09,000
stick agraphia applied on the right on

00:39:06,320 --> 00:39:11,820
the model does pretty well with these

00:39:09,000 --> 00:39:15,600
two light nonsense poems neither of

00:39:11,820 --> 00:39:17,250
these were in the training set I never

00:39:15,600 --> 00:39:18,810
saw a purple cow and number hope to see

00:39:17,250 --> 00:39:20,970
one but you can tell but I can tell you

00:39:18,810 --> 00:39:22,440
anyhow I'd rather see than eat one I eat

00:39:20,970 --> 00:39:22,800
my Peas with honey I've done it all my

00:39:22,440 --> 00:39:25,200
life

00:39:22,800 --> 00:39:26,580
it makes the peas taste funny or keeps

00:39:25,200 --> 00:39:28,140
them on the knife so just pretty well

00:39:26,580 --> 00:39:32,610
actually I'm finding reasonable line

00:39:28,140 --> 00:39:34,320
breaks in this test as another proof of

00:39:32,610 --> 00:39:36,450
concept this is some of the text from

00:39:34,320 --> 00:39:38,670
the Wikipedia page for zinnia the flower

00:39:36,450 --> 00:39:41,130
is ania with the original continuous

00:39:38,670 --> 00:39:43,890
text there on the left and the models

00:39:41,130 --> 00:39:45,510
geographic output on the right and I

00:39:43,890 --> 00:39:47,940
think this is actually pretty good if

00:39:45,510 --> 00:39:51,180
you read over it I think it's finding

00:39:47,940 --> 00:39:53,100
like you know places to break the text

00:39:51,180 --> 00:39:55,050
that sort of fall in line with your

00:39:53,100 --> 00:39:59,670
expectations about where line breaks

00:39:55,050 --> 00:40:01,590
should go in poetry I haven't actually

00:39:59,670 --> 00:40:03,720
used this to retrain my variational

00:40:01,590 --> 00:40:07,050
model yet but that's the next step so

00:40:03,720 --> 00:40:10,020
this is still a work in progress so to

00:40:07,050 --> 00:40:12,660
conclude what draws me to the line as a

00:40:10,020 --> 00:40:15,630
unit of language is that it's it's

00:40:12,660 --> 00:40:17,090
really the interface between language in

00:40:15,630 --> 00:40:19,990
the world

00:40:17,090 --> 00:40:21,860
the line is language held taut and

00:40:19,990 --> 00:40:22,970
someone has to be doing the work of

00:40:21,860 --> 00:40:25,430
holding a tech pod

00:40:22,970 --> 00:40:28,010
so whether line we're talking about is a

00:40:25,430 --> 00:40:30,020
poetic line based on rhyme and meter or

00:40:28,010 --> 00:40:32,240
line in a spreadsheet recording a single

00:40:30,020 --> 00:40:34,910
data point or the line of code carefully

00:40:32,240 --> 00:40:37,190
crafted to elucidate or obfuscate the

00:40:34,910 --> 00:40:39,350
inner workings of a computer program the

00:40:37,190 --> 00:40:42,620
line demonstrates the language is in

00:40:39,350 --> 00:40:45,740
Johanna Drucker's words fleshy line

00:40:42,620 --> 00:40:48,680
language is always situated in physical

00:40:45,740 --> 00:40:51,400
and social reality and that is my talk

00:40:48,680 --> 00:40:51,400

YouTube URL: https://www.youtube.com/watch?v=B4GR6JILVq4


