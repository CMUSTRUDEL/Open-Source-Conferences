Title: !!Con 2020 - We used a MIDI CONTROLLER to tune our GAMEFEEL! by Em Lazer Walker
Publication date: 2020-05-28
Playlist: !!Con 2020
Description: 
	We used a MIDI CONTROLLER to tune our GAMEFEEL! by Em Lazer Walker

My game designer partner and I had a seemingly-impossible challenge: we needed to take the traditionally-arduous process of fine-tuning the way a game ““feels””, and short-circuit that feedback cycle so it could happen in hours or days rather than weeks.

Our solution: a physical MIDI controller! We wired up the sliders and knobs wired up to control the various ““gamefeel”” variables in our prototypes: things like how quickly you can turn, how powerful gravity is, how big explosions are when you hit something.

This talk will dive into the design philosophy of why being able to tune and tweak our games kinaesthetically with chunky physical knobs was so much more effective than changing numbers in a text file, explain how you too can use cheap MIDI controllers for unintended productive purposes, and above all emphasize the importance of designing tools that foster creativity and play rather than simply optimizing for effectiveness.

Em is a Toronto-based artist, engineer, and game designer! Most of her work focuses on using nontraditional interfaces to reframe everyday objects and spaces as playful experiences, and to inspire people to become self-motivated learners. She currently works as a cloud advocate at Microsoft focused on spatial computing.
Captions: 
	00:00:13,340 --> 00:00:17,540
hey everybody how's it goin hope you're

00:00:15,470 --> 00:00:19,369
all doing great today so my name is

00:00:17,540 --> 00:00:21,740
Amelia I use she/her they/them pronouns

00:00:19,369 --> 00:00:23,840
and I work for Microsoft as a cloud

00:00:21,740 --> 00:00:26,240
advocate focused on games and spatial

00:00:23,840 --> 00:00:28,070
computing but I'm actually here to talk

00:00:26,240 --> 00:00:30,800
about what I was doing before Microsoft

00:00:28,070 --> 00:00:32,900
which was working on a new games

00:00:30,800 --> 00:00:35,540
hardware platform where we were trying

00:00:32,900 --> 00:00:38,239
to figure out we built this new hardware

00:00:35,540 --> 00:00:39,860
with our own hands we don't quite know

00:00:38,239 --> 00:00:41,420
what games work for it yet so we're

00:00:39,860 --> 00:00:43,160
spending a lot of time building a

00:00:41,420 --> 00:00:45,470
prototype or two a week to explore

00:00:43,160 --> 00:00:47,360
different interfaces and see what was

00:00:45,470 --> 00:00:50,930
fun what wasn't fun we could conceivably

00:00:47,360 --> 00:00:53,540
actually commercialize and in doing this

00:00:50,930 --> 00:00:55,790
we ran into a really classic game design

00:00:53,540 --> 00:00:59,120
problem which is if you have a prototype

00:00:55,790 --> 00:01:02,329
and it is fun and it is working that is

00:00:59,120 --> 00:01:04,910
immediately obvious within 30 seconds of

00:01:02,329 --> 00:01:06,860
playing it often but if it's not quite

00:01:04,910 --> 00:01:08,840
working it's really hard to figure out

00:01:06,860 --> 00:01:10,700
if it's because it is not good and you

00:01:08,840 --> 00:01:12,050
need to leave the prototype alone or if

00:01:10,700 --> 00:01:13,580
it's because you just didn't spend

00:01:12,050 --> 00:01:15,170
enough time polishing it and getting it

00:01:13,580 --> 00:01:19,700
to that point where you could see how

00:01:15,170 --> 00:01:20,810
good it was and this is where like a lot

00:01:19,700 --> 00:01:22,640
of types of games you can usually

00:01:20,810 --> 00:01:24,259
prototype them with paper components

00:01:22,640 --> 00:01:28,280
even if it's a digital game you can use

00:01:24,259 --> 00:01:30,380
cards and dice and paper things but

00:01:28,280 --> 00:01:33,110
because we were specifically working on

00:01:30,380 --> 00:01:35,209
these twitchy action games and exploring

00:01:33,110 --> 00:01:36,679
like novel Hardware interfaces and

00:01:35,209 --> 00:01:39,170
thinking about like how do you actually

00:01:36,679 --> 00:01:40,610
interface with the game that put us in

00:01:39,170 --> 00:01:43,490
the realm of a game designers called

00:01:40,610 --> 00:01:45,679
game feel the sort of art of tuning you

00:01:43,490 --> 00:01:47,599
know what is this moment to moment

00:01:45,679 --> 00:01:50,390
enjoyment of interacting with this

00:01:47,599 --> 00:01:51,979
digital system you know 10 minute talk I

00:01:50,390 --> 00:01:54,200
don't really have a lot of time to get

00:01:51,979 --> 00:01:55,700
into what game feel is or how you deal

00:01:54,200 --> 00:01:57,830
with it you're a bunch of references you

00:01:55,700 --> 00:01:59,209
can look up I particularly recommend a

00:01:57,830 --> 00:02:01,009
less talk from last year's banging Bank

00:01:59,209 --> 00:02:03,380
on because bing bang con is awesome and

00:02:01,009 --> 00:02:05,599
ellas awesome and her talk was awesome

00:02:03,380 --> 00:02:07,789
but long story short that meant we

00:02:05,599 --> 00:02:09,619
couldn't just reduce the scope of our

00:02:07,789 --> 00:02:11,630
prototypes by making them lower fidelity

00:02:09,619 --> 00:02:14,390
we actually needed to figure out well

00:02:11,630 --> 00:02:17,930
how can we polish them more quickly and

00:02:14,390 --> 00:02:19,760
make game design happen faster and so

00:02:17,930 --> 00:02:21,140
the way we cut through that Gordian knot

00:02:19,760 --> 00:02:22,459
as you might be able to guess from the

00:02:21,140 --> 00:02:26,030
title of the talk and the first slide

00:02:22,459 --> 00:02:29,930
was with MIDI controllers so this

00:02:26,030 --> 00:02:32,510
here is a Korg nano control - costs

00:02:29,930 --> 00:02:34,100
about 50 bucks online bunch of knobs and

00:02:32,510 --> 00:02:36,680
sliders connects to your computer by USB

00:02:34,100 --> 00:02:39,530
and you can control them using use them

00:02:36,680 --> 00:02:40,730
to control MIDI interfaces so we would

00:02:39,530 --> 00:02:42,920
take our games that were written in

00:02:40,730 --> 00:02:44,390
unity and wire up all of our physics

00:02:42,920 --> 00:02:46,580
constants and all these other magic

00:02:44,390 --> 00:02:49,760
numbers that we needed to tune to knobs

00:02:46,580 --> 00:02:52,550
and sliders on this MIDI controller so

00:02:49,760 --> 00:02:55,880
what did this actually get us a whole

00:02:52,550 --> 00:02:57,830
bunch of things the first is making it

00:02:55,880 --> 00:02:59,750
so we can much more effectively Tony and

00:02:57,830 --> 00:03:01,250
on proper values so if you think about

00:02:59,750 --> 00:03:03,769
the naive way you'd do something like

00:03:01,250 --> 00:03:05,750
this you would have a value in your code

00:03:03,769 --> 00:03:07,370
or maybe like a config file you would

00:03:05,750 --> 00:03:09,290
set it to a value you would run your

00:03:07,370 --> 00:03:11,360
game play it for a bit go back make some

00:03:09,290 --> 00:03:12,680
changes play it again that's really

00:03:11,360 --> 00:03:14,300
really slow

00:03:12,680 --> 00:03:15,800
unity is a little better because it has

00:03:14,300 --> 00:03:17,030
the sort of visual inspector window so

00:03:15,800 --> 00:03:18,830
you can change the value while you're

00:03:17,030 --> 00:03:20,330
playing but you're still fundamentally

00:03:18,830 --> 00:03:23,720
in this state of bouncing between

00:03:20,330 --> 00:03:25,190
playing and editing whereas when we have

00:03:23,720 --> 00:03:27,319
this actual MIDI controller where you

00:03:25,190 --> 00:03:28,819
can tune the values with your hands it

00:03:27,319 --> 00:03:30,470
can become much more immediate and

00:03:28,819 --> 00:03:32,180
actually in many cases depending on the

00:03:30,470 --> 00:03:34,010
game and what we were doing like we

00:03:32,180 --> 00:03:35,510
would find we could be playing the game

00:03:34,010 --> 00:03:37,190
with one hand while tuning it with the

00:03:35,510 --> 00:03:39,620
other which gets you immediately into

00:03:37,190 --> 00:03:43,040
this flow state of honing in on what the

00:03:39,620 --> 00:03:44,600
right values are and what feels right it

00:03:43,040 --> 00:03:46,790
also helped a lot we got to much more

00:03:44,600 --> 00:03:49,160
complex situations involving

00:03:46,790 --> 00:03:50,630
interdependent variables so we spent a

00:03:49,160 --> 00:03:53,239
bunch of time on this prototype that was

00:03:50,630 --> 00:03:56,060
a like cartoony kart racer kind of like

00:03:53,239 --> 00:03:58,160
Mario Kart and for that we were tuning

00:03:56,060 --> 00:04:00,489
values like acceleration and max speed

00:03:58,160 --> 00:04:03,109
sorry not velocity and your turn radius

00:04:00,489 --> 00:04:04,970
and while each individual value is

00:04:03,109 --> 00:04:06,650
really important what's a lot more

00:04:04,970 --> 00:04:09,109
important is the relationship between

00:04:06,650 --> 00:04:10,780
the two and that's really hard to model

00:04:09,109 --> 00:04:12,829
when you're changing one value at a time

00:04:10,780 --> 00:04:14,420
you know we played around a little bit

00:04:12,829 --> 00:04:16,669
with you know maybe instead of tuning

00:04:14,420 --> 00:04:18,979
the acceleration or the max speed you're

00:04:16,669 --> 00:04:22,190
tuning a variable that represents the

00:04:18,979 --> 00:04:24,169
ratio between them but that's way above

00:04:22,190 --> 00:04:26,750
my paygrade to deal with and instead it

00:04:24,169 --> 00:04:28,820
was much easier to say hey look we have

00:04:26,750 --> 00:04:30,470
this physical thing that has three

00:04:28,820 --> 00:04:31,880
different sliders that I can control all

00:04:30,470 --> 00:04:34,820
three of them with my fingers at the

00:04:31,880 --> 00:04:37,460
same time what if I could do that and

00:04:34,820 --> 00:04:39,360
then very very quickly and much more

00:04:37,460 --> 00:04:40,889
like intuitively

00:04:39,360 --> 00:04:43,259
like what is the actual relationship

00:04:40,889 --> 00:04:46,560
between these variables so that was

00:04:43,259 --> 00:04:49,409
awesome it's also really fun it makes

00:04:46,560 --> 00:04:52,229
you feel like this DJ code wizard while

00:04:49,409 --> 00:04:54,479
you're doing it I love my collaborator

00:04:52,229 --> 00:04:56,400
used to make all of these sort of proper

00:04:54,479 --> 00:04:58,229
Misa on PLAs before starting a tuning

00:04:56,400 --> 00:04:59,819
session or they would write out you know

00:04:58,229 --> 00:05:01,310
what is each variable they're tuning and

00:04:59,819 --> 00:05:03,930
how does it relate to the physical board

00:05:01,310 --> 00:05:05,099
and I think this is not just frivolous I

00:05:03,930 --> 00:05:07,139
think this actually really really

00:05:05,099 --> 00:05:09,990
matters because game design is a

00:05:07,139 --> 00:05:12,539
creative art and something that can get

00:05:09,990 --> 00:05:14,460
you into this playful state where you're

00:05:12,539 --> 00:05:16,949
willing to explore and try new things is

00:05:14,460 --> 00:05:20,310
actually really really important to

00:05:16,949 --> 00:05:22,319
doing good work but also on a more

00:05:20,310 --> 00:05:24,030
numerical level it actually did

00:05:22,319 --> 00:05:26,159
concretely help because humans have a

00:05:24,030 --> 00:05:27,990
lot of really bad cognitive biases

00:05:26,159 --> 00:05:31,169
around numbers and so it's really

00:05:27,990 --> 00:05:33,270
unlikely that the proper value for like

00:05:31,169 --> 00:05:37,169
friction if an object is gonna be a nice

00:05:33,270 --> 00:05:40,349
beautiful integer or like goes one or

00:05:37,169 --> 00:05:42,199
two places and the decimals but if

00:05:40,349 --> 00:05:44,460
you're just typing numbers into your IDE

00:05:42,199 --> 00:05:46,110
you're gonna be biased against using

00:05:44,460 --> 00:05:48,090
those or if you have this nice analog

00:05:46,110 --> 00:05:49,650
interface you're gonna hone in on what

00:05:48,090 --> 00:05:52,949
actually feels right rather than what

00:05:49,650 --> 00:05:54,330
looks right in the text editor worth

00:05:52,949 --> 00:05:56,069
calling out though that this is all a

00:05:54,330 --> 00:05:57,810
bit of a hack some of you may be

00:05:56,069 --> 00:05:59,669
familiar with Brett Victor's work this

00:05:57,810 --> 00:06:02,310
is an example from his talk in finding

00:05:59,669 --> 00:06:04,469
on principal Murray hypothesizes this

00:06:02,310 --> 00:06:07,020
for a Super Mario Brothers style 2d

00:06:04,469 --> 00:06:09,659
platformer and uses this sort of IDE he

00:06:07,020 --> 00:06:12,000
is built or hypothesized that as you

00:06:09,659 --> 00:06:14,909
change like you're wired jump velocity

00:06:12,000 --> 00:06:16,500
you can see see it happen on screen as

00:06:14,909 --> 00:06:19,050
you sort of abstracted away the variable

00:06:16,500 --> 00:06:21,089
of time and so ideally this is the sort

00:06:19,050 --> 00:06:22,710
of stuff you'd be dealing with like the

00:06:21,089 --> 00:06:24,300
fact that you can use design tools to

00:06:22,710 --> 00:06:25,860
sort of so cleanly cut through

00:06:24,300 --> 00:06:28,529
complexity and just take your entire

00:06:25,860 --> 00:06:30,270
possibility space and lay it bare that's

00:06:28,529 --> 00:06:31,919
really really cool and what I would love

00:06:30,270 --> 00:06:33,589
to see game design tools and other

00:06:31,919 --> 00:06:36,300
design tools go

00:06:33,589 --> 00:06:38,460
but until we reach that point a media

00:06:36,300 --> 00:06:42,690
controller is like 50 bucks and does the

00:06:38,460 --> 00:06:46,110
job pretty well so concretely what did I

00:06:42,690 --> 00:06:47,550
actually do so the dirty secret that I

00:06:46,110 --> 00:06:49,409
learned as I started looking into this

00:06:47,550 --> 00:06:52,020
is game designers have been using MIDI

00:06:49,409 --> 00:06:52,620
controllers for ever they just don't

00:06:52,020 --> 00:06:54,120
talk

00:06:52,620 --> 00:06:56,100
it's not like it's not like they're

00:06:54,120 --> 00:06:58,020
afraid to let their secret out they just

00:06:56,100 --> 00:06:59,220
don't blog about it they don't give

00:06:58,020 --> 00:07:01,169
talks about it's just not part of the

00:06:59,220 --> 00:07:02,729
culture so the only thing I could really

00:07:01,169 --> 00:07:05,220
find was this talk that William your

00:07:02,729 --> 00:07:06,690
blog post the William Scheer posted in

00:07:05,220 --> 00:07:08,880
2015 when he was working on his

00:07:06,690 --> 00:07:11,880
beautiful game manifold garden about how

00:07:08,880 --> 00:07:13,740
we used a nano control to to do that so

00:07:11,880 --> 00:07:15,360
I basically took his work took sort of

00:07:13,740 --> 00:07:17,790
his design ideas and formalized them

00:07:15,360 --> 00:07:19,949
into this unity library where if you

00:07:17,790 --> 00:07:21,990
have a nano control too and your game is

00:07:19,949 --> 00:07:23,729
in unity you just drop this into your

00:07:21,990 --> 00:07:27,419
unity project and it gives you a lovely

00:07:23,729 --> 00:07:28,949
UI to set things up saying that a piece

00:07:27,419 --> 00:07:31,110
of tech just works is really dangerous

00:07:28,949 --> 00:07:32,100
I'm aware so I'm going to attempt to

00:07:31,110 --> 00:07:35,580
give you a live demo

00:07:32,100 --> 00:07:36,930
I couldn't easily set up the custom

00:07:35,580 --> 00:07:39,090
hardware we were working on it's a major

00:07:36,930 --> 00:07:41,970
pain so this is just a very simple

00:07:39,090 --> 00:07:45,570
flappy bird demo I can click the mouse a

00:07:41,970 --> 00:07:47,520
new flap exciting but if I go to the

00:07:45,570 --> 00:07:49,830
media controller mapping window that I

00:07:47,520 --> 00:07:52,020
built and you can see here's a nano

00:07:49,830 --> 00:07:54,060
control - they also make it in black so

00:07:52,020 --> 00:07:55,440
we have a dark mode each of the knobs

00:07:54,060 --> 00:07:57,389
and sliders has a space where you can

00:07:55,440 --> 00:07:59,760
add mappings so this one we already have

00:07:57,389 --> 00:08:01,770
a mapping in place to the bird game

00:07:59,760 --> 00:08:04,320
object which is the player's bird in the

00:08:01,770 --> 00:08:06,599
scene the Unity uses was called entity

00:08:04,320 --> 00:08:08,220
component model so each game object has

00:08:06,599 --> 00:08:09,599
a bunch of components attached to it

00:08:08,220 --> 00:08:12,389
that each control behavior for like

00:08:09,599 --> 00:08:13,950
rendering the 2d sprite for doing rigid

00:08:12,389 --> 00:08:15,930
body physics for doing collision

00:08:13,950 --> 00:08:18,660
detection and the bird is our custom

00:08:15,930 --> 00:08:20,610
component that handles flapping and from

00:08:18,660 --> 00:08:22,410
there this drop-down is dynamically

00:08:20,610 --> 00:08:24,120
going into that bird component and

00:08:22,410 --> 00:08:25,770
finding any value that we could

00:08:24,120 --> 00:08:28,710
conceivably control with the controller

00:08:25,770 --> 00:08:30,810
so in this case just up for is this how

00:08:28,710 --> 00:08:34,140
much you jump the current value in the

00:08:30,810 --> 00:08:36,870
game is 100 range is just when the knob

00:08:34,140 --> 00:08:38,130
is at 0 that value is 0 when it's all

00:08:36,870 --> 00:08:39,870
the way at the top it's going to be this

00:08:38,130 --> 00:08:42,029
value so if the slider is up at full

00:08:39,870 --> 00:08:44,279
it's gonna be a thousand so the value

00:08:42,029 --> 00:08:46,830
for the bird is gonna be 1,100 instead

00:08:44,279 --> 00:08:48,480
of a hundred so with that set if we've

00:08:46,830 --> 00:08:49,529
then gonna play the game and I grab my

00:08:48,480 --> 00:08:53,459
movie controller

00:08:49,529 --> 00:08:56,370
oops so I'm playing is normal but then

00:08:53,459 --> 00:08:57,990
as I turn this knob whoops

00:08:56,370 --> 00:09:02,339
maybe air jumps a little bit too high

00:08:57,990 --> 00:09:04,380
but it works so I don't have a lot of

00:09:02,339 --> 00:09:06,120
time but I do want to talk about one

00:09:04,380 --> 00:09:08,700
design decision of this of all them

00:09:06,120 --> 00:09:10,410
is really really important which is

00:09:08,700 --> 00:09:12,630
these dropdowns to show you the

00:09:10,410 --> 00:09:14,310
different components I can also show it

00:09:12,630 --> 00:09:18,600
to you in the side here you can access

00:09:14,310 --> 00:09:21,360
it this way so when I built this my

00:09:18,600 --> 00:09:23,220
intention was great the amount of time

00:09:21,360 --> 00:09:24,630
I'm gonna spend metaprogramming grabbing

00:09:23,220 --> 00:09:26,850
all the components and grabbing all of

00:09:24,630 --> 00:09:28,560
the editable properties that's going to

00:09:26,850 --> 00:09:31,110
be less engineering time then I will

00:09:28,560 --> 00:09:33,390
probably lose two typos if these are

00:09:31,110 --> 00:09:36,839
just empty boxes you can type in which i

00:09:33,390 --> 00:09:38,160
think is true but also this turned out

00:09:36,839 --> 00:09:40,440
to be a way more important design

00:09:38,160 --> 00:09:42,960
decision because now that this is like

00:09:40,440 --> 00:09:45,779
if this was a this was two empty text

00:09:42,960 --> 00:09:47,730
boxes this would be a very like

00:09:45,779 --> 00:09:49,740
purpose-built tool that I would come to

00:09:47,730 --> 00:09:51,660
you and I would say this is what I want

00:09:49,740 --> 00:09:52,920
a tune I care about these variables I'm

00:09:51,660 --> 00:09:55,170
gonna do that and then I'm gonna leave

00:09:52,920 --> 00:09:57,120
where as now this is now a tool for

00:09:55,170 --> 00:09:59,670
exploration where I can look around and

00:09:57,120 --> 00:10:03,870
say well what things can I actually

00:09:59,670 --> 00:10:06,180
change and this now becomes not just a

00:10:03,870 --> 00:10:08,040
tool to allow me to do things more

00:10:06,180 --> 00:10:09,900
effectively but again it puts me in this

00:10:08,040 --> 00:10:11,550
space for play where I can explore the

00:10:09,900 --> 00:10:13,890
possibility space and see what I can do

00:10:11,550 --> 00:10:15,360
and this is gonna help me be creative in

00:10:13,890 --> 00:10:18,600
the way that the tool otherwise wouldn't

00:10:15,360 --> 00:10:20,990
have like what happens if I play around

00:10:18,600 --> 00:10:24,480
with the angular velocity of the bird

00:10:20,990 --> 00:10:26,430
and so I think that is actually really

00:10:24,480 --> 00:10:28,350
important when you think about making

00:10:26,430 --> 00:10:31,020
tools for design for game design for

00:10:28,350 --> 00:10:32,730
engineering usually we're hyper focused

00:10:31,020 --> 00:10:34,980
on augmenting human productivity and

00:10:32,730 --> 00:10:39,510
making things and tools that let us do

00:10:34,980 --> 00:10:42,360
tasks and jobs faster whereas again game

00:10:39,510 --> 00:10:43,830
design as a creative practice I'm much

00:10:42,360 --> 00:10:46,110
more interested in thinking about how to

00:10:43,830 --> 00:10:48,870
augment human creativity and how can I

00:10:46,110 --> 00:10:50,430
build this tool to enable me to come up

00:10:48,870 --> 00:10:51,870
with game designs and make decisions

00:10:50,430 --> 00:10:56,570
that I otherwise wouldn't have even

00:10:51,870 --> 00:10:59,339
considered or to put it one more way

00:10:56,570 --> 00:11:00,990
pianos and hammers are both really

00:10:59,339 --> 00:11:04,140
effective tools if you're a composer or

00:11:00,990 --> 00:11:05,670
a building contractor but there are a

00:11:04,140 --> 00:11:07,500
lot of hammers in the world and not

00:11:05,670 --> 00:11:10,170
enough pianos if you're someone building

00:11:07,500 --> 00:11:13,250
design tools you should make more pianos

00:11:10,170 --> 00:11:13,250

YouTube URL: https://www.youtube.com/watch?v=stM33UcLPJ0


