Title: !!Con 2021 - Changing a Single Byte Saves Me Seconds Every Day! by Sven Dahlstrand
Publication date: 2021-07-06
Playlist: !!Con 2021
Description: 
	Changing a Single Byte Saves Me Seconds Every Day! by Sven Dahlstrand

Have you ever stumbled upon a piece of software that’s almost perfect? Loving everything about it except that teeny-tiny little detail. Sticking out, like a sore thumb.

For me, that almost-perfect piece of software is Tetris, for the original Game Boy. My grudge? Every time the game boots up, you have to stare at an 8-second long copyright notice before being allowed to play. One summer, during an intense Tetris tournament against my BFF, I got super-duper-feed-up with that notice and asked myself: “Is it possible to hack Tetris and get rid of that screen forever?”

This talk is about saving precious time. But it’s also about friendship, falling blocks, reverse-engineering and hacking games. I hope it will inspire you to look under the hood of software you love and make it even lovelier.

Sven is a curious human being who loves acquiring new skills and shares what he has learned with other people. He knows enough to be dangerous around soldering irons, crochet hooks, pen plotters, and paddles. For a living, Sven builds accessible and performant websites.
Captions: 
	00:00:15,679 --> 00:00:20,480
happy bang bang khan

00:00:17,600 --> 00:00:22,000
i'm svan and i love computers in all

00:00:20,480 --> 00:00:25,039
shapes and forms

00:00:22,000 --> 00:00:28,720
like this game boy i'm also a fan

00:00:25,039 --> 00:00:29,840
of tetris i play that game for a long

00:00:28,720 --> 00:00:33,520
time now

00:00:29,840 --> 00:00:36,160
almost about a quarter century

00:00:33,520 --> 00:00:37,600
it's probably just nostalgia but to me

00:00:36,160 --> 00:00:40,879
churches for game boy is an

00:00:37,600 --> 00:00:42,960
almost perfect piece of software except

00:00:40,879 --> 00:00:45,200
for one stupid thing

00:00:42,960 --> 00:00:47,920
this annoying copyright screen you have

00:00:45,200 --> 00:00:51,360
to watch before being allowed to play

00:00:47,920 --> 00:00:51,360
for 8 seconds

00:00:56,239 --> 00:01:02,559
8 seconds is a pretty long time when all

00:00:58,960 --> 00:01:05,040
you want to do is play some tetris

00:01:02,559 --> 00:01:05,840
that copyright notice has stolen hours

00:01:05,040 --> 00:01:09,439
of my life

00:01:05,840 --> 00:01:11,119
that i never will get back but maybe

00:01:09,439 --> 00:01:14,159
my girlfriend and i could save some

00:01:11,119 --> 00:01:16,320
precious time in the future

00:01:14,159 --> 00:01:18,159
we have a traditional tetris summer

00:01:16,320 --> 00:01:20,479
tournament every year

00:01:18,159 --> 00:01:22,240
it's a friendly competition nothing too

00:01:20,479 --> 00:01:24,720
serious

00:01:22,240 --> 00:01:25,840
just for fun when when playing with

00:01:24,720 --> 00:01:29,280
friends

00:01:25,840 --> 00:01:32,479
everyone's a winner right

00:01:29,280 --> 00:01:34,880
so anyway i saw potential to save time

00:01:32,479 --> 00:01:35,680
and ask myself is it possible to hack

00:01:34,880 --> 00:01:38,840
tetris

00:01:35,680 --> 00:01:40,320
and get rid of that copyright screen

00:01:38,840 --> 00:01:43,200
forever

00:01:40,320 --> 00:01:44,079
well spoiler alert it is possible i just

00:01:43,200 --> 00:01:46,960
had to spend

00:01:44,079 --> 00:01:49,600
countless hours learning the basics of

00:01:46,960 --> 00:01:52,079
reverse engineering first

00:01:49,600 --> 00:01:54,479
that's what i did i'm going to tell you

00:01:52,079 --> 00:01:55,920
a short reverse engineering story and

00:01:54,479 --> 00:01:59,119
hopefully in about

00:01:55,920 --> 00:02:01,680
8 minutes or so you will know enough to

00:01:59,119 --> 00:02:04,560
get started hacking on your favorite

00:02:01,680 --> 00:02:04,560
game boy game

00:02:06,719 --> 00:02:11,760
so first of all i learned as much as i

00:02:09,360 --> 00:02:13,599
could about the console itself

00:02:11,760 --> 00:02:16,319
and there's a lot of information out

00:02:13,599 --> 00:02:18,000
there i watched the ultimate game boy

00:02:16,319 --> 00:02:21,599
talk by michael steele

00:02:18,000 --> 00:02:24,800
he explains everything in that one

00:02:21,599 --> 00:02:26,959
highly recommended the

00:02:24,800 --> 00:02:29,120
official programming manual is also

00:02:26,959 --> 00:02:31,920
floating around on the interwebs

00:02:29,120 --> 00:02:34,000
i guess nintendo is not too happy about

00:02:31,920 --> 00:02:36,400
that

00:02:34,000 --> 00:02:38,319
and believe it or not i learned some

00:02:36,400 --> 00:02:42,080
exciting and useful stuff

00:02:38,319 --> 00:02:42,080
from the american gameboy patent

00:02:42,720 --> 00:02:46,160
and after feeding my brain with all that

00:02:45,440 --> 00:02:48,400
information

00:02:46,160 --> 00:02:52,000
my next step was to get the game from

00:02:48,400 --> 00:02:55,120
its physical game pack onto my computer

00:02:52,000 --> 00:02:55,680
for that i used yoyobags a gadget that

00:02:55,120 --> 00:02:57,760
lets you

00:02:55,680 --> 00:03:00,400
read gameboy games and dump them to your

00:02:57,760 --> 00:03:02,879
computer over usb

00:03:00,400 --> 00:03:03,680
this also works the other way around

00:03:02,879 --> 00:03:05,840
enabling

00:03:03,680 --> 00:03:07,120
playing modified games on a real game

00:03:05,840 --> 00:03:10,560
boy

00:03:07,120 --> 00:03:13,280
i bought an empty flashcard for that

00:03:10,560 --> 00:03:16,560
and thanks to yoyobags i managed to get

00:03:13,280 --> 00:03:19,360
a copy of tetris onto my computer

00:03:16,560 --> 00:03:21,040
now i could use a hex editor to inspect

00:03:19,360 --> 00:03:24,400
that file

00:03:21,040 --> 00:03:26,879
every file i've created images text

00:03:24,400 --> 00:03:30,400
files and copies of tetris

00:03:26,879 --> 00:03:32,959
is just a bunch of numbers bytes

00:03:30,400 --> 00:03:36,640
and hexeltors makes it possible to view

00:03:32,959 --> 00:03:36,640
and shuffle those numbers around

00:03:36,720 --> 00:03:43,760
it looks like this behold

00:03:40,400 --> 00:03:45,920
the first few bytes of tetris

00:03:43,760 --> 00:03:47,760
all these numbers have meaning some

00:03:45,920 --> 00:03:51,120
represents game assets

00:03:47,760 --> 00:03:51,760
like graphics most numbers are machine

00:03:51,120 --> 00:03:54,799
code

00:03:51,760 --> 00:03:54,799
the actual program

00:03:56,080 --> 00:04:00,239
here are three things i learned during

00:03:58,000 --> 00:04:02,319
my research phase

00:04:00,239 --> 00:04:04,720
the patent told me that every gameboy

00:04:02,319 --> 00:04:08,400
program starts at memory location

00:04:04,720 --> 00:04:12,319
100 hexadecimal at that location

00:04:08,400 --> 00:04:12,319
you will find machine code

00:04:12,879 --> 00:04:16,079
in the programming manual i read about

00:04:14,640 --> 00:04:17,120
the instructions available to

00:04:16,079 --> 00:04:19,359
programmers

00:04:17,120 --> 00:04:20,959
like my favorite instruction the the

00:04:19,359 --> 00:04:25,919
knob instruction

00:04:20,959 --> 00:04:27,759
or no operation it does nothing

00:04:25,919 --> 00:04:29,840
lastly the slides from michael steel's

00:04:27,759 --> 00:04:31,919
talk have this handy lookup table

00:04:29,840 --> 00:04:33,600
that lists the actual value of each

00:04:31,919 --> 00:04:36,479
instruction

00:04:33,600 --> 00:04:38,720
remember everything is a number the no

00:04:36,479 --> 00:04:39,840
operation instruction is encoded using

00:04:38,720 --> 00:04:43,120
the number zero

00:04:39,840 --> 00:04:45,199
for example

00:04:43,120 --> 00:04:48,240
i know what you are thinking right now

00:04:45,199 --> 00:04:51,440
what's the first instruction of tetris

00:04:48,240 --> 00:04:54,960
it must be something clever right

00:04:51,440 --> 00:04:59,040
well the memory location 100 contains

00:04:54,960 --> 00:05:01,680
wait for it the number zero

00:04:59,040 --> 00:05:03,520
the first instruction of tetris is no

00:05:01,680 --> 00:05:06,639
operation

00:05:03,520 --> 00:05:09,039
crazy but true

00:05:06,639 --> 00:05:10,000
hex editors are great and we will get

00:05:09,039 --> 00:05:13,759
back to it later

00:05:10,000 --> 00:05:16,240
but i also downloaded same way

00:05:13,759 --> 00:05:18,240
a cross-platform game boy emulator that

00:05:16,240 --> 00:05:21,280
comes with a debugger

00:05:18,240 --> 00:05:23,440
memory inspector and other tools

00:05:21,280 --> 00:05:25,840
it's an impressive piece of open source

00:05:23,440 --> 00:05:25,840
software

00:05:26,560 --> 00:05:30,320
but before digging into same boy i took

00:05:29,360 --> 00:05:33,680
a step back

00:05:30,320 --> 00:05:37,440
and came up with a theory i knew

00:05:33,680 --> 00:05:40,160
two things about a copyright notice

00:05:37,440 --> 00:05:40,960
that it shows for about eight seconds

00:05:40,160 --> 00:05:43,520
and that

00:05:40,960 --> 00:05:45,039
you could skip ahead after about four

00:05:43,520 --> 00:05:48,800
seconds

00:05:45,039 --> 00:05:50,960
just spam the buttons on the gameboy

00:05:48,800 --> 00:05:52,320
my theory was that the game keeps track

00:05:50,960 --> 00:05:55,759
of time somewhere

00:05:52,320 --> 00:05:57,199
in memory a counter that when it reaches

00:05:55,759 --> 00:06:01,039
a certain value

00:05:57,199 --> 00:06:04,240
the game knows 8 seconds has passed

00:06:01,039 --> 00:06:05,680
if i could find this theoretical place

00:06:04,240 --> 00:06:09,360
in memory

00:06:05,680 --> 00:06:12,880
maybe i could alter it to trick tetris

00:06:09,360 --> 00:06:15,360
into showing the game manual right away

00:06:12,880 --> 00:06:16,400
that was my theory anyway maybe it was

00:06:15,360 --> 00:06:19,440
dumb but

00:06:16,400 --> 00:06:19,440
at least it was mine

00:06:19,520 --> 00:06:23,759
and with that freshly baked theory in

00:06:21,440 --> 00:06:27,360
mind i started tetris and open

00:06:23,759 --> 00:06:28,240
up the memory inspector i then used my

00:06:27,360 --> 00:06:30,960
eyeballs

00:06:28,240 --> 00:06:33,039
to watch out for anything resembling a

00:06:30,960 --> 00:06:36,479
counter in memory

00:06:33,039 --> 00:06:38,560
because you know of my theory

00:06:36,479 --> 00:06:42,240
i saw nothing like that instead my eyes

00:06:38,560 --> 00:06:44,720
fixated on the memory location here

00:06:42,240 --> 00:06:45,840
i'm going to play back what i saw so

00:06:44,720 --> 00:06:47,440
keep

00:06:45,840 --> 00:06:48,960
close attention to the highlighted

00:06:47,440 --> 00:06:51,440
memory

00:06:48,960 --> 00:06:52,720
when the game first boots the value is

00:06:51,440 --> 00:06:55,680
fb

00:06:52,720 --> 00:06:57,120
it changes to 25 when the copyright

00:06:55,680 --> 00:07:00,160
notice shows up and

00:06:57,120 --> 00:07:03,120
again after about 4 seconds

00:07:00,160 --> 00:07:03,440
and then twice to six rapidly followed

00:07:03,120 --> 00:07:07,440
by

00:07:03,440 --> 00:07:09,360
seven those last two changes happens in

00:07:07,440 --> 00:07:11,919
sync with the copyright notice

00:07:09,360 --> 00:07:13,520
disappearing it was not that counter i

00:07:11,919 --> 00:07:15,520
thought i would stumble upon

00:07:13,520 --> 00:07:16,560
but maybe i had found something even

00:07:15,520 --> 00:07:18,400
better

00:07:16,560 --> 00:07:21,360
my gut was telling me this memory

00:07:18,400 --> 00:07:23,680
location controlled game state

00:07:21,360 --> 00:07:24,639
you know when 25 is written to the

00:07:23,680 --> 00:07:27,840
location

00:07:24,639 --> 00:07:28,800
show the copyright screen on 6 show the

00:07:27,840 --> 00:07:32,000
game menu

00:07:28,800 --> 00:07:35,120
and so on so

00:07:32,000 --> 00:07:38,720
bye bye old theory and welcome

00:07:35,120 --> 00:07:40,720
new theory i was now convinced there

00:07:38,720 --> 00:07:42,160
must be a section in the original

00:07:40,720 --> 00:07:45,280
assembly source code

00:07:42,160 --> 00:07:47,199
looking something like this the last two

00:07:45,280 --> 00:07:48,720
lines sets the current game state to the

00:07:47,199 --> 00:07:51,840
value 25

00:07:48,720 --> 00:07:54,560
being the copyright screen

00:07:51,840 --> 00:07:57,360
for fun let's assemble this source code

00:07:54,560 --> 00:08:00,080
to actual machine code

00:07:57,360 --> 00:08:01,680
it's just 8 bytes and one of those bytes

00:08:00,080 --> 00:08:04,960
has the value 25

00:08:01,680 --> 00:08:07,440
as one might expect

00:08:04,960 --> 00:08:08,319
now let's pretend for a while that these

00:08:07,440 --> 00:08:12,639
exact bytes

00:08:08,319 --> 00:08:16,240
actually do exist in the tetris binary

00:08:12,639 --> 00:08:19,440
then couldn't i just make a change

00:08:16,240 --> 00:08:22,639
replacing 25 with 6

00:08:19,440 --> 00:08:24,960
the game manual screen that should

00:08:22,639 --> 00:08:27,360
trick tetris into skipping the copyright

00:08:24,960 --> 00:08:29,280
notice

00:08:27,360 --> 00:08:32,159
let's go back to the hex editor and

00:08:29,280 --> 00:08:35,760
search for those bytes

00:08:32,159 --> 00:08:38,560
and there's exactly one hit

00:08:35,760 --> 00:08:40,159
almost too good to be true but back then

00:08:38,560 --> 00:08:43,440
i felt confident

00:08:40,159 --> 00:08:46,560
this new theory was probably right

00:08:43,440 --> 00:08:49,760
i made a change i replaced number 25

00:08:46,560 --> 00:08:52,959
with the number 6 and then

00:08:49,760 --> 00:08:55,360
saved the modified copy of the game

00:08:52,959 --> 00:08:57,279
back then when this actually happened i

00:08:55,360 --> 00:08:58,800
tested this version of tetris in the

00:08:57,279 --> 00:09:02,240
emulator

00:08:58,800 --> 00:09:05,519
but it's much cooler if i just use

00:09:02,240 --> 00:09:07,760
a real gameboy so i have

00:09:05,519 --> 00:09:10,160
my modified version of tetris on this

00:09:07,760 --> 00:09:12,800
cassette

00:09:10,160 --> 00:09:13,760
and now when i start up this game boy i

00:09:12,800 --> 00:09:16,959
expect to see

00:09:13,760 --> 00:09:18,480
the nintendo logo but then be taken

00:09:16,959 --> 00:09:22,320
directly to the game

00:09:18,480 --> 00:09:25,200
menu no copyright screen let's see what

00:09:22,320 --> 00:09:25,200
what what happens

00:09:27,399 --> 00:09:30,399
success

00:09:32,000 --> 00:09:39,760
so that's my story i learned a lot

00:09:35,120 --> 00:09:41,600
and here's my five takeaways number one

00:09:39,760 --> 00:09:43,279
patterns can actually be helpful

00:09:41,600 --> 00:09:46,480
sometimes

00:09:43,279 --> 00:09:50,800
number two when it comes to computing

00:09:46,480 --> 00:09:53,279
everything is just numbers number three

00:09:50,800 --> 00:09:55,680
it's great to have theories sometimes

00:09:53,279 --> 00:09:59,200
they will turn out to be wrong though

00:09:55,680 --> 00:10:01,680
that's okay just come up with a new one

00:09:59,200 --> 00:10:03,680
number four you can stumble upon

00:10:01,680 --> 00:10:06,000
interesting things by just eyeballing

00:10:03,680 --> 00:10:09,760
memory locations

00:10:06,000 --> 00:10:11,680
and last but not least sometimes

00:10:09,760 --> 00:10:12,880
changing a single bite will save you

00:10:11,680 --> 00:10:15,680
seconds

00:10:12,880 --> 00:10:16,839
every day at least every day that you

00:10:15,680 --> 00:10:20,640
decide to play

00:10:16,839 --> 00:10:22,320
tetris now get out there and hack some

00:10:20,640 --> 00:10:24,720
gamer games on your own

00:10:22,320 --> 00:10:26,000
and then tell me all about it you can

00:10:24,720 --> 00:10:30,000
reach me at sven

00:10:26,000 --> 00:10:35,279
dawson.net i love getting emails

00:10:30,000 --> 00:10:35,279

YouTube URL: https://www.youtube.com/watch?v=8A3AdFzxkG8


