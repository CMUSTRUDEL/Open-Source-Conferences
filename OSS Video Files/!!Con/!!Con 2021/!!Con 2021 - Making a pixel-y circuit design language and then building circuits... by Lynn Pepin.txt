Title: !!Con 2021 - Making a pixel-y circuit design language and then building circuits... by Lynn Pepin
Publication date: 2021-07-06
Playlist: !!Con 2021
Description: 
	Making a pixel-y circuit design language and then building circuits in it!! by Lynn Pepin

Have you ever made a complicated Redstone machine in Minecraft, graphed out a complicated boolean expression, or taken a philosophy or digital-logic-design course? If so, then you’re probably familiar with the ORs, XORs, and ANDs of digital logic circuits!! From these basic elements, one can build layer upon layer of abstraction.

In this talk, I’ll introduce Reso, an esoterical graphical logic circuit design language. It is inspired by Piet, Conway’s Game of Life, and Redstone. Reso programs are circuits defined by bitmaps, where components are inherently modular and can be copy-and-pasted with ease. Your favorite graphics editor (be it GIMP, Paint, or Photoshop) is your IDE and the world (er, bitmap) is your oyster!!

In this talk, you’ll see what a circuit looks like, you’ll see how it works, and you’ll see the execution of one of these bitmap circuits!!

Lynn is a software engineer, a data scientist, and a big fan of interpreted and interactive languages. During COVID times, they became enthusiastic about aromatic brewed beverages and about taking nature walks while sipping said beverages. They spend the rest of their time making digital art, videogames, and poorly-done crochet.
Captions: 
	00:00:12,719 --> 00:00:16,960
hello so just a heads up to anyone with

00:00:14,799 --> 00:00:19,680
photosensitive epilepsy

00:00:16,960 --> 00:00:21,600
there are some strobing elements

00:00:19,680 --> 00:00:23,680
throughout this presentation uh this is

00:00:21,600 --> 00:00:26,800
that's two hertz or less

00:00:23,680 --> 00:00:29,119
um so if that is something that might

00:00:26,800 --> 00:00:31,439
trigger your photosensitive epilepsy

00:00:29,119 --> 00:00:33,280
you might want to sit this out or

00:00:31,439 --> 00:00:34,640
minimize the window for the next 10

00:00:33,280 --> 00:00:36,960
minutes or so

00:00:34,640 --> 00:00:38,719
with that said this next slide and the

00:00:36,960 --> 00:00:39,280
following slides will have some strobing

00:00:38,719 --> 00:00:42,719
elements

00:00:39,280 --> 00:00:44,879
so let us begin so hello everybody

00:00:42,719 --> 00:00:46,719
my name is lin and as the title of

00:00:44,879 --> 00:00:48,399
implies i'm here to show you

00:00:46,719 --> 00:00:49,840
this little side project of mine that

00:00:48,399 --> 00:00:53,440
i've worked on for a while

00:00:49,840 --> 00:00:54,559
that lets you build a digital logic

00:00:53,440 --> 00:00:58,320
circuits

00:00:54,559 --> 00:01:00,399
in a bitmap image the inputs and outputs

00:00:58,320 --> 00:01:02,079
of this language are bitmap images and

00:01:00,399 --> 00:01:04,159
what you're looking at right now is

00:01:02,079 --> 00:01:06,000
actually a simple circuit inside of this

00:01:04,159 --> 00:01:07,840
language

00:01:06,000 --> 00:01:09,280
so before i can show you much more about

00:01:07,840 --> 00:01:11,280
this language i want to do a quick

00:01:09,280 --> 00:01:14,560
little refresher on digital logic

00:01:11,280 --> 00:01:17,200
circuits so digital logic circuits

00:01:14,560 --> 00:01:17,920
or boolean operators as you might know

00:01:17,200 --> 00:01:21,040
them

00:01:17,920 --> 00:01:24,159
are kind of the basic building blocks of

00:01:21,040 --> 00:01:24,159
circuits that we have

00:01:25,439 --> 00:01:32,400
these four operators and xor

00:01:29,119 --> 00:01:34,640
or and not are

00:01:32,400 --> 00:01:36,479
kind of a basic mathematical toolbox

00:01:34,640 --> 00:01:39,200
that you can use when operating with

00:01:36,479 --> 00:01:42,560
bits or booleans in programming

00:01:39,200 --> 00:01:45,680
or with wires uh when making actual you

00:01:42,560 --> 00:01:47,920
know little logic circuits

00:01:45,680 --> 00:01:49,200
with this as our kind of tool box we can

00:01:47,920 --> 00:01:52,799
put these together

00:01:49,200 --> 00:01:55,360
and create memory cells we can

00:01:52,799 --> 00:01:56,159
store you can store data do boolean

00:01:55,360 --> 00:01:57,759
functions

00:01:56,159 --> 00:02:00,000
and it's enough to make what we call

00:01:57,759 --> 00:02:01,360
turing complete uh this is really rad

00:02:00,000 --> 00:02:03,119
because you can build it up to create

00:02:01,360 --> 00:02:06,159
calculators computers

00:02:03,119 --> 00:02:08,239
um any cool thing you might imagine

00:02:06,159 --> 00:02:09,679
now when i was taking a digital logics

00:02:08,239 --> 00:02:12,879
course i was also playing

00:02:09,679 --> 00:02:13,520
a lot of minecraft minecraft has this

00:02:12,879 --> 00:02:15,760
feature called

00:02:13,520 --> 00:02:18,400
redstone that also lets you make uh

00:02:15,760 --> 00:02:21,120
circuits and it's also turing complete

00:02:18,400 --> 00:02:22,319
kind of the intended purpose of redstone

00:02:21,120 --> 00:02:25,280
in minecraft

00:02:22,319 --> 00:02:27,040
is to create you know automated farms or

00:02:25,280 --> 00:02:29,920
automated doorways

00:02:27,040 --> 00:02:31,280
and you can also create computers and

00:02:29,920 --> 00:02:33,440
calculators in it

00:02:31,280 --> 00:02:35,519
because again it's turing complete and

00:02:33,440 --> 00:02:36,959
people have done that i highly recommend

00:02:35,519 --> 00:02:38,160
maybe you search it up on youtube or

00:02:36,959 --> 00:02:38,640
something when you have free time

00:02:38,160 --> 00:02:40,400
because

00:02:38,640 --> 00:02:43,120
it's really cool what some people can do

00:02:40,400 --> 00:02:45,920
in it but i was playing minecraft

00:02:43,120 --> 00:02:46,560
building my farm and i thought to myself

00:02:45,920 --> 00:02:49,040
um

00:02:46,560 --> 00:02:50,959
hey i have this little diagram that i'm

00:02:49,040 --> 00:02:51,599
working with as i debug my farm but it'd

00:02:50,959 --> 00:02:56,239
be really

00:02:51,599 --> 00:02:59,120
useful if i could just execute

00:02:56,239 --> 00:02:59,680
run down and i kept that at the end of

00:02:59,120 --> 00:03:01,360
my head

00:02:59,680 --> 00:03:03,280
i eventually finished that course

00:03:01,360 --> 00:03:06,000
stopped playing minecraft

00:03:03,280 --> 00:03:07,360
and started getting really into you know

00:03:06,000 --> 00:03:08,400
other programming languages and i

00:03:07,360 --> 00:03:11,440
thought hey

00:03:08,400 --> 00:03:13,360
it'd be really cool if i could um

00:03:11,440 --> 00:03:16,480
you know continue with that idea i want

00:03:13,360 --> 00:03:19,840
to execute this bitmap image

00:03:16,480 --> 00:03:21,599
and so i created what i call riso

00:03:19,840 --> 00:03:23,760
so what you're looking at here is

00:03:21,599 --> 00:03:27,599
actually the um

00:03:23,760 --> 00:03:30,720
diagram and sorry actually the logo

00:03:27,599 --> 00:03:32,319
of riso and it's also a circuit inside

00:03:30,720 --> 00:03:33,879
the reso language

00:03:32,319 --> 00:03:36,400
you're looking at a circuit that's being

00:03:33,879 --> 00:03:38,799
executed or an animation of a circuit

00:03:36,400 --> 00:03:40,400
that was executed

00:03:38,799 --> 00:03:42,640
i'm not going to explain what every part

00:03:40,400 --> 00:03:44,959
of this is and especially because

00:03:42,640 --> 00:03:45,680
during the stream you probably can't see

00:03:44,959 --> 00:03:47,680
every element

00:03:45,680 --> 00:03:49,200
individually we zoom in there's some

00:03:47,680 --> 00:03:52,720
elements here that are

00:03:49,200 --> 00:03:54,239
you know very small to the eye but

00:03:52,720 --> 00:03:56,640
there's an explanation of what's going

00:03:54,239 --> 00:03:57,920
on in logan the git repository but i

00:03:56,640 --> 00:04:00,720
want to show you now

00:03:57,920 --> 00:04:02,480
how to actually build circuits inside of

00:04:00,720 --> 00:04:04,080
this language

00:04:02,480 --> 00:04:06,560
re-implement those four gates that we

00:04:04,080 --> 00:04:10,879
saw so i'm going to shrink the logo

00:04:06,560 --> 00:04:13,760
and go over the basic elements of this

00:04:10,879 --> 00:04:14,319
so first like we want to be able to

00:04:13,760 --> 00:04:17,600
store

00:04:14,319 --> 00:04:18,079
and transmit logical values uh ons or

00:04:17,600 --> 00:04:20,799
offs

00:04:18,079 --> 00:04:22,079
and so there are wires there's three

00:04:20,799 --> 00:04:24,479
colors of the wires

00:04:22,079 --> 00:04:26,160
lime sapphire and orange so that you can

00:04:24,479 --> 00:04:28,720
make a kind of colorful

00:04:26,160 --> 00:04:30,320
pretty circuits and also so that you can

00:04:28,720 --> 00:04:32,160
cross them diagonally

00:04:30,320 --> 00:04:33,919
because see if a blue wire and an orange

00:04:32,160 --> 00:04:36,320
wire touch one another

00:04:33,919 --> 00:04:37,680
then sorry if a blue wire and a blue

00:04:36,320 --> 00:04:39,360
wire touch one another

00:04:37,680 --> 00:04:40,720
then that'll just be one wire and you

00:04:39,360 --> 00:04:42,880
can't have that they're not

00:04:40,720 --> 00:04:46,000
insulated but they are insulated from

00:04:42,880 --> 00:04:49,280
one another when they cross diagonally

00:04:46,000 --> 00:04:51,440
we also need logic so we have

00:04:49,280 --> 00:04:53,040
dark and light teal for logical hand and

00:04:51,440 --> 00:04:55,440
logical xor

00:04:53,040 --> 00:04:58,960
and this is enough for us and i have a

00:04:55,440 --> 00:04:58,960
fan going let me turn that off

00:05:00,160 --> 00:05:05,440
logical and logical xor but

00:05:03,520 --> 00:05:07,520
while this circuit diagram will have

00:05:05,440 --> 00:05:09,520
logic flowing from left to right

00:05:07,520 --> 00:05:10,880
we still need a way in general to define

00:05:09,520 --> 00:05:13,360
directionality

00:05:10,880 --> 00:05:14,080
inputs and outputs so we add two more

00:05:13,360 --> 00:05:17,039
colors

00:05:14,080 --> 00:05:18,080
to our palettes dark and light purple

00:05:17,039 --> 00:05:22,080
for input and

00:05:18,080 --> 00:05:25,199
outputs so we have these two gates here

00:05:22,080 --> 00:05:27,360
and we're finally able to uh

00:05:25,199 --> 00:05:29,120
actually put things into our logic gates

00:05:27,360 --> 00:05:32,160
which is really great

00:05:29,120 --> 00:05:34,080
um and you'll see the

00:05:32,160 --> 00:05:35,600
inputs and outputs uh for example the

00:05:34,080 --> 00:05:37,280
and gate if you look you'll notice that

00:05:35,600 --> 00:05:40,639
when all the three inputs are on

00:05:37,280 --> 00:05:43,520
you know bright the and output is on

00:05:40,639 --> 00:05:44,800
one time step later that means timing is

00:05:43,520 --> 00:05:47,120
really difficult you have to work with

00:05:44,800 --> 00:05:48,880
it which we'll see later on

00:05:47,120 --> 00:05:51,199
you can also use these to implement the

00:05:48,880 --> 00:05:53,759
other two logic gates that we want

00:05:51,199 --> 00:05:55,680
not and or for not to just put an input

00:05:53,759 --> 00:05:58,800
and an output next to one another

00:05:55,680 --> 00:06:00,160
and for or sorry for or you put an input

00:05:58,800 --> 00:06:03,360
and output next to one another

00:06:00,160 --> 00:06:06,720
for not you put a one an on input

00:06:03,360 --> 00:06:09,680
straight into the input to an xor and

00:06:06,720 --> 00:06:13,280
then you can use the xor as a not gates

00:06:09,680 --> 00:06:13,280
by just adding one more input to that

00:06:13,360 --> 00:06:17,919
so there's one big problem here that i

00:06:16,080 --> 00:06:21,440
haven't made over solve yet

00:06:17,919 --> 00:06:23,680
is that riso is not super accessible um

00:06:21,440 --> 00:06:24,720
if you have if you're color blind or you

00:06:23,680 --> 00:06:27,919
have any vision

00:06:24,720 --> 00:06:28,479
problems um this might be really

00:06:27,919 --> 00:06:31,680
difficult

00:06:28,479 --> 00:06:32,400
and even if you aren't color blinds um a

00:06:31,680 --> 00:06:35,600
problem i

00:06:32,400 --> 00:06:38,720
had was that the logical hands and the

00:06:35,600 --> 00:06:42,560
lime wires are too similar

00:06:38,720 --> 00:06:42,560
in terms of color to one another

00:06:42,720 --> 00:06:46,479
on some monitors so that's something i'm

00:06:45,520 --> 00:06:48,880
still trying to

00:06:46,479 --> 00:06:51,039
fix uh earlier versions of this had a

00:06:48,880 --> 00:06:54,080
textual representation

00:06:51,039 --> 00:06:56,720
of the circuits that would make it

00:06:54,080 --> 00:06:58,400
you know easier to use in you know

00:06:56,720 --> 00:07:01,440
whatever text editor to use

00:06:58,400 --> 00:07:03,840
i haven't reimplemented that yet

00:07:01,440 --> 00:07:04,479
um but some of the original goals with

00:07:03,840 --> 00:07:07,520
riso

00:07:04,479 --> 00:07:09,440
have still kind of uh followed through i

00:07:07,520 --> 00:07:11,039
kind of wanted to be like python in that

00:07:09,440 --> 00:07:13,280
it's kind of simple enough

00:07:11,039 --> 00:07:14,240
it's kind of like an executed uh

00:07:13,280 --> 00:07:17,440
pseudocode

00:07:14,240 --> 00:07:18,720
or in this case diagram or sketch and i

00:07:17,440 --> 00:07:21,199
also want it to be like c

00:07:18,720 --> 00:07:22,639
in that the syntax of language is kind

00:07:21,199 --> 00:07:25,039
of small enough

00:07:22,639 --> 00:07:27,360
to fit in one's head you know if you've

00:07:25,039 --> 00:07:29,039
worked with c for maybe a year you might

00:07:27,360 --> 00:07:30,160
remember almost every nook and cranny of

00:07:29,039 --> 00:07:31,680
the language

00:07:30,160 --> 00:07:34,960
i'm short of actually being able to

00:07:31,680 --> 00:07:36,400
write machine code and even then

00:07:34,960 --> 00:07:38,080
because all the other digital logic

00:07:36,400 --> 00:07:40,240
tools i worked with while way more

00:07:38,080 --> 00:07:42,960
useful and much faster than this

00:07:40,240 --> 00:07:44,879
were kind of a pain to use now this is

00:07:42,960 --> 00:07:47,440
also a pain but i have an excuse that

00:07:44,879 --> 00:07:49,759
i'm not selling this for profits

00:07:47,440 --> 00:07:51,680
now i want to um now that we've these

00:07:49,759 --> 00:07:53,520
four gates we have our tool box

00:07:51,680 --> 00:07:55,280
and i want to show you a game of life

00:07:53,520 --> 00:07:57,039
circuit that i try to make

00:07:55,280 --> 00:07:59,120
now if you haven't seen game of life

00:07:57,039 --> 00:07:59,680
before conway's game of life i should

00:07:59,120 --> 00:08:02,960
say

00:07:59,680 --> 00:08:06,000
it looks kind of like this um you have

00:08:02,960 --> 00:08:06,479
all these cells that you can set up and

00:08:06,000 --> 00:08:08,319
it's

00:08:06,479 --> 00:08:09,680
kind of the cellular automata that's

00:08:08,319 --> 00:08:12,960
meant to simulate what's

00:08:09,680 --> 00:08:14,400
maybe a petri dish might look like

00:08:12,960 --> 00:08:16,080
uh there's this one thing that's kind of

00:08:14,400 --> 00:08:19,120
iconic in conway's game of life

00:08:16,080 --> 00:08:20,800
a digital glider or just a glider

00:08:19,120 --> 00:08:22,800
that does this kind of thing it repeats

00:08:20,800 --> 00:08:23,919
in a pattern of sliding downwards into

00:08:22,800 --> 00:08:27,599
the right

00:08:23,919 --> 00:08:28,479
now this here is not my um this is not

00:08:27,599 --> 00:08:31,520
my projects

00:08:28,479 --> 00:08:33,919
this is copy.sh life's

00:08:31,520 --> 00:08:35,360
implementation of conway's game of life

00:08:33,919 --> 00:08:36,640
uh definitely go check out

00:08:35,360 --> 00:08:38,880
game of life if you've not seen it

00:08:36,640 --> 00:08:41,919
before um

00:08:38,880 --> 00:08:42,320
but back to this i learned when making

00:08:41,919 --> 00:08:44,080
this

00:08:42,320 --> 00:08:45,680
uh game of life circuit that again

00:08:44,080 --> 00:08:48,320
didn't work that timing is really

00:08:45,680 --> 00:08:50,160
important and it's really hard to do

00:08:48,320 --> 00:08:51,839
to repeat the goal was to create this

00:08:50,160 --> 00:08:53,040
kind of glider that went down the screen

00:08:51,839 --> 00:08:54,399
that was my like

00:08:53,040 --> 00:08:56,000
what i really wanted to see and i

00:08:54,399 --> 00:08:57,920
couldn't get it done in time for bang

00:08:56,000 --> 00:08:59,760
bing con because it was really hard

00:08:57,920 --> 00:09:01,040
but i think the end result was really

00:08:59,760 --> 00:09:03,519
pretty

00:09:01,040 --> 00:09:06,160
what you're looking at here is a 16 by 9

00:09:03,519 --> 00:09:07,600
grid of game of life cells

00:09:06,160 --> 00:09:09,440
if we zoom in we can see some of the

00:09:07,600 --> 00:09:11,760
detail in the circuits

00:09:09,440 --> 00:09:13,040
here i have adders around the periphery

00:09:11,760 --> 00:09:16,240
of each cell

00:09:13,040 --> 00:09:17,200
that bundle together to the more

00:09:16,240 --> 00:09:20,320
complicated

00:09:17,200 --> 00:09:21,920
game of life logic now there's some

00:09:20,320 --> 00:09:25,200
problems here that i haven't

00:09:21,920 --> 00:09:28,240
been able to bang out this is the

00:09:25,200 --> 00:09:30,080
kind of the later iterations uh aren't

00:09:28,240 --> 00:09:32,560
shown here so you might actually spot

00:09:30,080 --> 00:09:33,839
some problems saying the sr latch

00:09:32,560 --> 00:09:35,519
if you've seen these before you know

00:09:33,839 --> 00:09:37,360
that both of these lines aren't supposed

00:09:35,519 --> 00:09:39,519
to be on at once

00:09:37,360 --> 00:09:41,120
but if i show you the execution and this

00:09:39,519 --> 00:09:44,959
is the part that has strobing

00:09:41,120 --> 00:09:44,959
at the full screen at one hertz

00:09:45,200 --> 00:09:48,640
if we show the execution you'll see

00:09:46,560 --> 00:09:50,800
immediately things that aren't supposed

00:09:48,640 --> 00:09:52,560
to happen in conway's game of life

00:09:50,800 --> 00:09:54,640
we're not supposed to have everything

00:09:52,560 --> 00:09:56,880
disappear then come back

00:09:54,640 --> 00:09:58,720
and then flash like this but this was

00:09:56,880 --> 00:10:02,880
really satisfying for me to see

00:09:58,720 --> 00:10:06,160
the um the values push forward through

00:10:02,880 --> 00:10:09,279
each gate or each

00:10:06,160 --> 00:10:11,279
each wire just seeing them passed along

00:10:09,279 --> 00:10:13,040
now thankfully unlike my digital logic

00:10:11,279 --> 00:10:14,320
course i will not be getting a grade

00:10:13,040 --> 00:10:16,800
from bing bing con

00:10:14,320 --> 00:10:18,480
for the quality of my circuits and when

00:10:16,800 --> 00:10:19,839
everything flashes on and off like it's

00:10:18,480 --> 00:10:21,680
not supposed to do

00:10:19,839 --> 00:10:24,079
i don't have to feel too much anxiety

00:10:21,680 --> 00:10:26,079
about failing at class

00:10:24,079 --> 00:10:28,320
at any rate that's all i have for you

00:10:26,079 --> 00:10:30,320
here today if you want to see the source

00:10:28,320 --> 00:10:31,760
code i have a link to the git lab and

00:10:30,320 --> 00:10:33,680
amir on github

00:10:31,760 --> 00:10:35,920
if you have any questions or anything

00:10:33,680 --> 00:10:38,000
you want to ask me

00:10:35,920 --> 00:10:39,279
feel free to contact me on discord i

00:10:38,000 --> 00:10:43,120
have the uh

00:10:39,279 --> 00:10:44,880
discord here but i haven't looked too

00:10:43,120 --> 00:10:45,760
closely at it for questions so if you

00:10:44,880 --> 00:10:47,040
ask me

00:10:45,760 --> 00:10:49,120
actually i don't think i have time to

00:10:47,040 --> 00:10:50,720
answer questions during the presentation

00:10:49,120 --> 00:10:53,360
so i'll be in the discord

00:10:50,720 --> 00:10:54,959
um i'm also uh you can contact me on

00:10:53,360 --> 00:10:56,880
twitter as well

00:10:54,959 --> 00:10:58,480
and also if you make anything in this i

00:10:56,880 --> 00:11:00,560
would really really love to see that i

00:10:58,480 --> 00:11:03,519
think that would be awesome

00:11:00,560 --> 00:11:04,800
and that is all i have for you today uh

00:11:03,519 --> 00:11:05,519
thank you so much for watching and i

00:11:04,800 --> 00:11:10,800
hope you have a great

00:11:05,519 --> 00:11:10,800

YouTube URL: https://www.youtube.com/watch?v=2Mst6EWqQJc


