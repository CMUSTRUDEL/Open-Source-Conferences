Title: !!Con 2021 - Numeric Data Types in the Wild; or: Let’s Look at Last Night’s.... by Michael Woods
Publication date: 2021-07-06
Playlist: !!Con 2021
Description: 
	Numeric Data Types in the Wild; or: Let’s Look at Last Night’s Dinner Receipt! by Michael Woods

You won’t believe the wild things we’ll find by taking a good look at a dinner receipt.

Come and spend ten minutes having a laugh at some of the pitfalls and travails embedded in a simple POS (point of sale) device printout. And remember: this was the real output of a launched-and-shipped software program that was written by living, thinking, and breathing human beings. How could it have gone so wrong?

Michael is a physicist-turned-inventor out in California. He works by day as a Principal Systems Architect at Magic Leap, and spends his evenings studying everything under the sun. His perfect vacation is spending a couple weeks in a new city, ensconced in cafes, speed-running an online class. And he believes that self-improvement, in every form, is simultaneously an art, a skill, and a lot of fun.
Captions: 
	00:00:13,200 --> 00:00:15,360
hi

00:00:13,840 --> 00:00:17,279
i'm michael woods and i want to start

00:00:15,360 --> 00:00:19,199
this talk off with a moment of honesty

00:00:17,279 --> 00:00:20,800
which is to say that

00:00:19,199 --> 00:00:23,279
we're all really here because we're

00:00:20,800 --> 00:00:25,279
interested in shiny complicated things

00:00:23,279 --> 00:00:28,000
at the cutting edge of technology

00:00:25,279 --> 00:00:29,760
and this talk is about none of that

00:00:28,000 --> 00:00:32,160
instead this talk is about going back to

00:00:29,760 --> 00:00:33,520
the basics back to the very fundamentals

00:00:32,160 --> 00:00:35,040
of the things you started to learn to

00:00:33,520 --> 00:00:36,160
deal with when you first began to

00:00:35,040 --> 00:00:38,879
program

00:00:36,160 --> 00:00:40,559
numbers okay and numbers come along with

00:00:38,879 --> 00:00:42,079
numeric data types and there's many

00:00:40,559 --> 00:00:42,719
numeric data types out there in the

00:00:42,079 --> 00:00:44,399
world

00:00:42,719 --> 00:00:45,760
from any number of integer

00:00:44,399 --> 00:00:48,399
representations to single

00:00:45,760 --> 00:00:49,200
double precision floats to more complex

00:00:48,399 --> 00:00:52,320
things like

00:00:49,200 --> 00:00:54,800
well complex numbers or quaternions or

00:00:52,320 --> 00:00:56,160
the whole menagerie of time stamp

00:00:54,800 --> 00:00:57,440
formats

00:00:56,160 --> 00:00:58,879
and when you're working with these you

00:00:57,440 --> 00:01:00,239
have to face the decision of which ones

00:00:58,879 --> 00:01:02,239
do you use

00:01:00,239 --> 00:01:04,080
and how do you make that decision well

00:01:02,239 --> 00:01:05,360
some people make that decision based on

00:01:04,080 --> 00:01:07,200
memory footprint

00:01:05,360 --> 00:01:08,880
other ones may make that decision based

00:01:07,200 --> 00:01:10,640
off of compute performance

00:01:08,880 --> 00:01:12,400
or maybe you're making that decision

00:01:10,640 --> 00:01:14,000
based off of library support maybe

00:01:12,400 --> 00:01:14,960
there's some complicated function out

00:01:14,000 --> 00:01:16,240
there in the world that

00:01:14,960 --> 00:01:18,080
you really just don't want to have to

00:01:16,240 --> 00:01:20,479
write for yourself

00:01:18,080 --> 00:01:21,520
those are all fine but i think there's

00:01:20,479 --> 00:01:23,520
actually

00:01:21,520 --> 00:01:24,799
some far more fundamental concerns that

00:01:23,520 --> 00:01:27,280
you should have

00:01:24,799 --> 00:01:27,840
okay and first of all it's that the

00:01:27,280 --> 00:01:29,200
numbers

00:01:27,840 --> 00:01:31,920
and the numeric data types you're using

00:01:29,200 --> 00:01:33,920
produce correct results

00:01:31,920 --> 00:01:35,600
second that they produce legible results

00:01:33,920 --> 00:01:37,040
which is that a human being has to be

00:01:35,600 --> 00:01:37,280
able to understand what it's telling

00:01:37,040 --> 00:01:38,960
them

00:01:37,280 --> 00:01:41,360
that's the difference between printing

00:01:38,960 --> 00:01:44,720
out something that says a circle has an

00:01:41,360 --> 00:01:46,560
area of 12.566 square meters and saying

00:01:44,720 --> 00:01:49,040
a circle has an area of four pi

00:01:46,560 --> 00:01:50,560
square meters one of those gives you a

00:01:49,040 --> 00:01:52,000
much better intuitive understanding of

00:01:50,560 --> 00:01:54,479
what's going on

00:01:52,000 --> 00:01:56,000
and third they have to produce coherent

00:01:54,479 --> 00:01:57,840
results

00:01:56,000 --> 00:02:00,320
okay coherent meaning that when you look

00:01:57,840 --> 00:02:01,040
at the body of results produced by the

00:02:00,320 --> 00:02:03,200
program

00:02:01,040 --> 00:02:04,640
it has to tell a single story it has to

00:02:03,200 --> 00:02:06,799
tell a story that makes sense

00:02:04,640 --> 00:02:08,399
and can be interpreted correctly by the

00:02:06,799 --> 00:02:09,840
uh by the user

00:02:08,399 --> 00:02:11,680
so we're going to dive in and we're

00:02:09,840 --> 00:02:14,000
going to look at a dinner receipt not

00:02:11,680 --> 00:02:15,680
technically last night's dinner receipt

00:02:14,000 --> 00:02:18,400
it actually comes from uh

00:02:15,680 --> 00:02:19,760
one night of an outing after one of the

00:02:18,400 --> 00:02:21,200
nights of the strange loop conference

00:02:19,760 --> 00:02:23,360
back in 2019 in st

00:02:21,200 --> 00:02:24,720
louis but it is a real dinner receipt

00:02:23,360 --> 00:02:25,360
nonetheless and i want you to keep in

00:02:24,720 --> 00:02:28,000
mind

00:02:25,360 --> 00:02:29,280
that this is something produced by a

00:02:28,000 --> 00:02:31,599
software program that was

00:02:29,280 --> 00:02:32,319
actually written by actual people who

00:02:31,599 --> 00:02:34,720
had their own

00:02:32,319 --> 00:02:35,440
hopes and dreams and livelihoods and

00:02:34,720 --> 00:02:37,680
goals

00:02:35,440 --> 00:02:39,360
who thought they were making reasonable

00:02:37,680 --> 00:02:43,120
choices

00:02:39,360 --> 00:02:47,519
and that because of that there

00:02:43,120 --> 00:02:47,519
but for the grace of god go we all

00:02:48,840 --> 00:02:55,440
so let's talk about floats

00:02:53,599 --> 00:02:57,360
does anyone recognize this number does

00:02:55,440 --> 00:02:58,159
anyone have any idea what this number is

00:02:57,360 --> 00:03:00,319
telling them

00:02:58,159 --> 00:03:01,920
maybe maybe some of you if you do you

00:03:00,319 --> 00:03:03,599
were a math nerd as a kid

00:03:01,920 --> 00:03:05,440
and that's okay because i was a math

00:03:03,599 --> 00:03:07,440
nerd as a kid and that's the only reason

00:03:05,440 --> 00:03:10,560
that i recognized this number

00:03:07,440 --> 00:03:12,400
um but this is kind of a crazy number in

00:03:10,560 --> 00:03:14,080
kind of a number you wouldn't expect

00:03:12,400 --> 00:03:17,280
people to recognize on the street that

00:03:14,080 --> 00:03:19,840
you know this is actually representing

00:03:17,280 --> 00:03:19,840
two sevenths

00:03:20,080 --> 00:03:23,440
but even if you did recognize this

00:03:21,760 --> 00:03:25,599
number and and by the way

00:03:23,440 --> 00:03:26,799
we failed on legibility here right here

00:03:25,599 --> 00:03:28,480
line number two

00:03:26,799 --> 00:03:30,720
we failed on legibility the average

00:03:28,480 --> 00:03:31,920
person is not going to interpret this

00:03:30,720 --> 00:03:34,159
correctly

00:03:31,920 --> 00:03:35,760
but even if you did recognize this

00:03:34,159 --> 00:03:36,720
number you would have to do some

00:03:35,760 --> 00:03:39,440
sleuthing

00:03:36,720 --> 00:03:41,280
to figure out that well okay this is two

00:03:39,440 --> 00:03:43,120
sevens if that's two sevenths maybe that

00:03:41,280 --> 00:03:45,920
means the check is being divided seven

00:03:43,120 --> 00:03:47,040
ways and that after some more steps

00:03:45,920 --> 00:03:49,519
we'll let you figure out these other

00:03:47,040 --> 00:03:52,560
mega cryptic numbers here

00:03:49,519 --> 00:03:57,599
there are a few of them in this receipt

00:03:52,560 --> 00:04:00,400
um but that's about legibility

00:03:57,599 --> 00:04:02,799
so let's talk about something else let's

00:04:00,400 --> 00:04:06,000
talk about floats

00:04:02,799 --> 00:04:07,120
now there is another serious problem

00:04:06,000 --> 00:04:09,360
with this number

00:04:07,120 --> 00:04:10,720
okay and that is in its correctness

00:04:09,360 --> 00:04:14,560
because this number

00:04:10,720 --> 00:04:17,440
is unbelievably precise it is

00:04:14,560 --> 00:04:18,079
ridiculously crazily unbelievably

00:04:17,440 --> 00:04:20,000
precise

00:04:18,079 --> 00:04:21,680
literally it is too precise to be

00:04:20,000 --> 00:04:22,800
believed and i've tried to give some

00:04:21,680 --> 00:04:24,479
examples here

00:04:22,800 --> 00:04:26,320
uh to help you think your teeth into it

00:04:24,479 --> 00:04:28,960
but i admit even i don't

00:04:26,320 --> 00:04:30,880
really have any idea what something you

00:04:28,960 --> 00:04:33,360
know being 1200 times

00:04:30,880 --> 00:04:35,120
uh greater precision than the weight of

00:04:33,360 --> 00:04:37,199
a single human cell means so i'm going

00:04:35,120 --> 00:04:39,040
to try to put this in different terms

00:04:37,199 --> 00:04:40,240
it turns out that if you as a human

00:04:39,040 --> 00:04:42,080
being tried to weigh

00:04:40,240 --> 00:04:43,600
this plate of brisket to this precision

00:04:42,080 --> 00:04:45,919
even if you had a machine

00:04:43,600 --> 00:04:46,880
that could produce that many digits on

00:04:45,919 --> 00:04:48,960
its output

00:04:46,880 --> 00:04:50,960
a fancy the best scale in the world and

00:04:48,960 --> 00:04:53,600
you put this plate of brisket on it

00:04:50,960 --> 00:04:55,040
you could not get this number and the

00:04:53,600 --> 00:04:56,880
reason you cannot get this number

00:04:55,040 --> 00:04:59,280
is because the numbers the output of

00:04:56,880 --> 00:05:01,680
your infinitely precise weighing machine

00:04:59,280 --> 00:05:03,039
will vary by more than the precision of

00:05:01,680 --> 00:05:04,880
this number based on whether or not

00:05:03,039 --> 00:05:06,320
you're looking at your plate of brisket

00:05:04,880 --> 00:05:07,759
that you're trying to weigh

00:05:06,320 --> 00:05:09,280
and that's because the pupils of your

00:05:07,759 --> 00:05:10,400
eyes are dark and the whites of your

00:05:09,280 --> 00:05:12,479
eyes are light

00:05:10,400 --> 00:05:13,440
and the whites of your eyes have greater

00:05:12,479 --> 00:05:15,360
reflectivity

00:05:13,440 --> 00:05:17,120
than the pupils of your eyes do which

00:05:15,360 --> 00:05:19,199
means that when you look at the plate of

00:05:17,120 --> 00:05:21,199
brisket there is less light reflected

00:05:19,199 --> 00:05:21,520
off of your eyeballs that then bounces

00:05:21,199 --> 00:05:23,360
off

00:05:21,520 --> 00:05:24,800
and hits the plate and because there's

00:05:23,360 --> 00:05:25,360
less light being reflected off your

00:05:24,800 --> 00:05:27,120
eyeballs

00:05:25,360 --> 00:05:28,400
there are less photons hitting the plane

00:05:27,120 --> 00:05:29,680
because there are less photons hitting

00:05:28,400 --> 00:05:32,639
the plate when you're looking at it

00:05:29,680 --> 00:05:34,320
there is a lesser photon pressure

00:05:32,639 --> 00:05:35,600
literally pushing down on that food on

00:05:34,320 --> 00:05:37,360
that scale

00:05:35,600 --> 00:05:39,199
and that amount that that photon

00:05:37,360 --> 00:05:39,840
pressure differs whether you're looking

00:05:39,199 --> 00:05:43,120
at it

00:05:39,840 --> 00:05:45,199
or looking away is more than four

00:05:43,120 --> 00:05:47,440
times the precision implied by this

00:05:45,199 --> 00:05:50,240
number

00:05:47,440 --> 00:05:51,759
so you can't get it you literally cannot

00:05:50,240 --> 00:05:55,199
measure this number

00:05:51,759 --> 00:05:55,199
and we failed on correctness

00:05:56,319 --> 00:06:00,400
but that's a mouthful so let's take a

00:05:58,960 --> 00:06:02,240
step back and let's talk about something

00:06:00,400 --> 00:06:07,840
different

00:06:02,240 --> 00:06:07,840
let's talk about fractions

00:06:09,199 --> 00:06:15,199
so just as i try to piece this together

00:06:12,960 --> 00:06:17,440
after all of that hubbub with mega

00:06:15,199 --> 00:06:22,479
cryptic fractions trying to figure out

00:06:17,440 --> 00:06:24,639
what 0.4285 actually means

00:06:22,479 --> 00:06:25,600
we could have just had the program print

00:06:24,639 --> 00:06:30,639
out

00:06:25,600 --> 00:06:33,680
one slash seven how does this happen

00:06:30,639 --> 00:06:33,680
and more importantly

00:06:33,759 --> 00:06:38,160
what's going on under the hood because

00:06:36,479 --> 00:06:41,360
if you think about it

00:06:38,160 --> 00:06:44,240
printing out one slash seven

00:06:41,360 --> 00:06:46,160
is not actually an easy thing to do

00:06:44,240 --> 00:06:49,360
necessarily

00:06:46,160 --> 00:06:50,880
um it's a weird thing to do maybe

00:06:49,360 --> 00:06:52,400
there's a whole computer algebra system

00:06:50,880 --> 00:06:54,080
hiding under there that's only applied

00:06:52,400 --> 00:06:55,360
to coleslaw but not the brisket

00:06:54,080 --> 00:06:56,880
so we know we've got to figure out like

00:06:55,360 --> 00:06:57,840
what is the internal logic here that's

00:06:56,880 --> 00:06:58,960
going on

00:06:57,840 --> 00:07:00,240
and i think there is a clue to the

00:06:58,960 --> 00:07:02,080
internal logic here and it's the fact

00:07:00,240 --> 00:07:04,000
that this is coleslaw because coleslaw

00:07:02,080 --> 00:07:07,520
on the menu was a side dish

00:07:04,000 --> 00:07:09,759
okay and side dishes

00:07:07,520 --> 00:07:10,800
at this barbecue restaurant were sold by

00:07:09,759 --> 00:07:12,560
the unit

00:07:10,800 --> 00:07:13,840
as opposed to the meats which are sold

00:07:12,560 --> 00:07:15,280
by the pound

00:07:13,840 --> 00:07:17,120
and you can obviously order a fractional

00:07:15,280 --> 00:07:18,400
pound but you can't order a fractional

00:07:17,120 --> 00:07:21,599
unit of coleslaw

00:07:18,400 --> 00:07:23,120
so um maybe our idea our mental

00:07:21,599 --> 00:07:24,960
construct of the internal logic of this

00:07:23,120 --> 00:07:27,280
program is that all of the main dishes

00:07:24,960 --> 00:07:28,800
the meats and such are sold in

00:07:27,280 --> 00:07:30,960
by the pound so you get a fractional

00:07:28,800 --> 00:07:31,919
number when you divide them and all of

00:07:30,960 --> 00:07:33,599
the side dishes

00:07:31,919 --> 00:07:35,280
are sold by the unit and so of course

00:07:33,599 --> 00:07:36,080
all the side dishes have to be

00:07:35,280 --> 00:07:39,120
represented

00:07:36,080 --> 00:07:40,319
in all cases by um by an exact

00:07:39,120 --> 00:07:44,080
fractional number

00:07:40,319 --> 00:07:45,599
so let's talk about side dishes

00:07:44,080 --> 00:07:47,520
as we can see we've got a side dish that

00:07:45,599 --> 00:07:50,400
is represented by an exact

00:07:47,520 --> 00:07:50,879
fractional okay in all cases inside

00:07:50,400 --> 00:07:52,960
which is

00:07:50,879 --> 00:07:54,960
represented by exact fractional numbers

00:07:52,960 --> 00:07:57,759
except when that number would be

00:07:54,960 --> 00:08:00,080
1 in which case we have extra control

00:07:57,759 --> 00:08:02,000
logic to omit it

00:08:00,080 --> 00:08:03,360
and that's our new logic that that makes

00:08:02,000 --> 00:08:13,840
sense here right

00:08:03,360 --> 00:08:13,840
so let's talk about side dishes

00:08:20,800 --> 00:08:27,039
what just just what

00:08:24,160 --> 00:08:27,759
after all of that after all of that

00:08:27,039 --> 00:08:29,120
trouble

00:08:27,759 --> 00:08:31,199
figuring out the side dishes are

00:08:29,120 --> 00:08:31,759
represented by exact fractional numbers

00:08:31,199 --> 00:08:35,120
except

00:08:31,759 --> 00:08:35,120
when that number would be one

00:08:35,839 --> 00:08:43,120
we get this

00:08:40,000 --> 00:08:44,399
all right that's a lot of hubbub but

00:08:43,120 --> 00:08:45,360
we're just about to the crux of this

00:08:44,399 --> 00:08:46,959
because now

00:08:45,360 --> 00:08:49,200
we're going to get to look at what has

00:08:46,959 --> 00:08:51,760
to be my single favorite number

00:08:49,200 --> 00:08:52,240
on this whole receipt okay the single

00:08:51,760 --> 00:08:55,040
number

00:08:52,240 --> 00:08:56,240
that puts to the test our understanding

00:08:55,040 --> 00:08:58,320
of the internal

00:08:56,240 --> 00:09:00,240
or or maybe frankly at this point the

00:08:58,320 --> 00:09:03,360
infernal logic

00:09:00,240 --> 00:09:09,040
inside of this receipt printer

00:09:03,360 --> 00:09:11,040
so let's talk about floats

00:09:09,040 --> 00:09:12,080
okay thank you very much i hope you all

00:09:11,040 --> 00:09:14,080
enjoyed this

00:09:12,080 --> 00:09:15,519
if you did i've got some social media

00:09:14,080 --> 00:09:17,040
contact information out there you can

00:09:15,519 --> 00:09:19,279
feel free to say hi

00:09:17,040 --> 00:09:21,040
um there's lots of other great talks

00:09:19,279 --> 00:09:24,959
here so keep enjoying the conference

00:09:21,040 --> 00:09:24,959
and just remember as you go

00:09:25,360 --> 00:09:29,279
make sure that even in the simplest

00:09:28,320 --> 00:09:30,720
things

00:09:29,279 --> 00:09:32,640
your numeric data types can produce

00:09:30,720 --> 00:09:36,160
correct results legible results

00:09:32,640 --> 00:09:37,440
and coherent results because stuff like

00:09:36,160 --> 00:09:42,399
this happens and

00:09:37,440 --> 00:09:42,399
there but for the grace of god go we all

00:09:44,160 --> 00:09:47,680

YouTube URL: https://www.youtube.com/watch?v=JDwg2rpCCzI


