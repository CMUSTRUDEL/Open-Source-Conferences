Title: !!Con 2021 - Beware the Dreaded Dead End!! by Richard Schneeman
Publication date: 2021-07-06
Playlist: !!Con 2021
Description: 
	Beware the Dreaded Dead End!! by Richard Schneeman

Nothing stops a program from executing quite as fast as a syntax error. After years of “unexpected end” in my dev life I decided to “do” something about it. I built an over-the-top AI driven solution that finds syntax errors in Ruby code.

Discover why this 100% ridiculous solution was 100% worth-it. Bring your sense of adventure and you’ll walk away with an intro to AI, a short primer on Ruby syntax, and all the friends we made along the way.

Schneems is an open-source junkie that loves community building. He created and maintains CodeTriage.com, a tool for helping people contribute to open-source. When he’s not working on that you might find him building developer tooling at Heroku or working on his own OSS contributions. He is in the top 50 Rails contributors and is an accidental maintainer of Sprockets and Puma. Last time he checked, he had over a 1.2 billion library downloads on RubyGems. When he isn’t obsessively compulsively refactoring code for performance he spends his time reminding his kids to wash their hands.
Captions: 
	00:00:13,200 --> 00:00:16,720
all right

00:00:13,759 --> 00:00:19,760
all right hello uh hello everyone i am

00:00:16,720 --> 00:00:22,880
coming to you live from

00:00:19,760 --> 00:00:26,320
wait a second you you hear that

00:00:22,880 --> 00:00:29,840
you hear that everyone

00:00:26,320 --> 00:00:33,200
ron ah

00:00:29,840 --> 00:00:35,600
okay oh there there there

00:00:33,200 --> 00:00:36,480
there are more of them more of them

00:00:35,600 --> 00:00:40,559
everyone

00:00:36,480 --> 00:00:43,200
save yourselves okay all right okay whoo

00:00:40,559 --> 00:00:44,559
okay wow i am i'm so glad we are all

00:00:43,200 --> 00:00:47,280
safe uh

00:00:44,559 --> 00:00:48,000
i'm so glad we're all safe uh my name is

00:00:47,280 --> 00:00:50,480
richard

00:00:48,000 --> 00:00:52,399
and uh people like to tell me that i am

00:00:50,480 --> 00:00:55,199
an exceptional programmer

00:00:52,399 --> 00:00:58,079
largely because uh my programs they

00:00:55,199 --> 00:01:00,160
generate a lot of exceptions

00:00:58,079 --> 00:01:01,680
i love exceptions though especially when

00:01:00,160 --> 00:01:04,879
they help me

00:01:01,680 --> 00:01:07,680
for example this this is beautiful

00:01:04,879 --> 00:01:08,159
okay name error did i mean to use ch der

00:01:07,680 --> 00:01:12,400
yes

00:01:08,159 --> 00:01:15,920
i did okay this error it brings me joy

00:01:12,400 --> 00:01:18,240
but what about this code huh syntax

00:01:15,920 --> 00:01:20,720
error all right where's the syntax error

00:01:18,240 --> 00:01:22,880
it says it wasn't expecting an end okay

00:01:20,720 --> 00:01:24,640
but but where's the problem you might as

00:01:22,880 --> 00:01:26,240
well just throw up a giant sign that

00:01:24,640 --> 00:01:27,840
says dead end

00:01:26,240 --> 00:01:29,280
the error points to the last line but

00:01:27,840 --> 00:01:30,320
the problem is actually on the first i'm

00:01:29,280 --> 00:01:33,040
i'm missing a do

00:01:30,320 --> 00:01:34,240
here if you're not familiar with ruby

00:01:33,040 --> 00:01:36,479
syntax here

00:01:34,240 --> 00:01:37,520
are keywords that can trigger a required

00:01:36,479 --> 00:01:39,280
end if you have an

00:01:37,520 --> 00:01:41,360
end statement that doesn't match a valid

00:01:39,280 --> 00:01:44,799
keyword it triggers a syntax

00:01:41,360 --> 00:01:48,399
error the trickiest one of these is

00:01:44,799 --> 00:01:50,880
do in ruby do starts a block this

00:01:48,399 --> 00:01:52,840
is valid ruby code ch dur with a block

00:01:50,880 --> 00:01:54,960
changes the working directory of the

00:01:52,840 --> 00:01:56,479
process ch star

00:01:54,960 --> 00:01:58,159
with a block also changes the working

00:01:56,479 --> 00:01:58,640
directory of the process but switches

00:01:58,159 --> 00:02:01,040
back

00:01:58,640 --> 00:02:02,880
once the block is done if we remove the

00:02:01,040 --> 00:02:07,439
do from the source code

00:02:02,880 --> 00:02:10,399
it generates a syntax error and so

00:02:07,439 --> 00:02:11,760
any method can take an optional block um

00:02:10,399 --> 00:02:12,400
you can you can pass a block to just

00:02:11,760 --> 00:02:15,440
about any

00:02:12,400 --> 00:02:17,120
any method um

00:02:15,440 --> 00:02:18,560
when you get a syntax error ruby will

00:02:17,120 --> 00:02:20,560
tell you that the problem is at the

00:02:18,560 --> 00:02:21,760
bottom of the file no matter where

00:02:20,560 --> 00:02:22,239
you're missing a keyword it's not

00:02:21,760 --> 00:02:24,239
helpful

00:02:22,239 --> 00:02:26,959
it's very confusing we're gonna we're

00:02:24,239 --> 00:02:28,160
gonna fix this dead end problem

00:02:26,959 --> 00:02:30,160
so first i'd like to tell you about a

00:02:28,160 --> 00:02:33,360
scientific study i did on

00:02:30,160 --> 00:02:35,599
a time loss to syntax error exceptions

00:02:33,360 --> 00:02:38,000
i found the average developer loses

00:02:35,599 --> 00:02:39,680
about 100 hours of productivity due to

00:02:38,000 --> 00:02:41,519
these errors

00:02:39,680 --> 00:02:43,080
when i asked developers what they wished

00:02:41,519 --> 00:02:45,440
for most in life

00:02:43,080 --> 00:02:47,280
78.3 percent of them told me that they

00:02:45,440 --> 00:02:50,000
wanted an ai algorithm to tell them

00:02:47,280 --> 00:02:51,920
where their syntax errors are

00:02:50,000 --> 00:02:53,280
so let's do that first though how does a

00:02:51,920 --> 00:02:56,400
computer convert

00:02:53,280 --> 00:02:58,480
text into a program all right well

00:02:56,400 --> 00:03:00,319
you start off with some code like here's

00:02:58,480 --> 00:03:02,720
just a really simple string it's

00:03:00,319 --> 00:03:04,000
hello world the programming language

00:03:02,720 --> 00:03:06,319
passes your source code

00:03:04,000 --> 00:03:08,720
to alexa ruby ships with a parser and

00:03:06,319 --> 00:03:11,599
lexer which is pretty sweet it's called

00:03:08,720 --> 00:03:13,120
ripper which to me sounds like you know

00:03:11,599 --> 00:03:17,120
something from an album cover

00:03:13,120 --> 00:03:19,040
could be a band it's pretty sweet

00:03:17,120 --> 00:03:20,319
uh ripper takes the source code and then

00:03:19,040 --> 00:03:23,760
converts it into

00:03:20,319 --> 00:03:24,799
tokens with significance it will tell

00:03:23,760 --> 00:03:26,080
you the type of the character at the

00:03:24,799 --> 00:03:28,080
start of the string is a double quote

00:03:26,080 --> 00:03:29,840
and the contents are hello world

00:03:28,080 --> 00:03:31,519
so we can we can use this lexing

00:03:29,840 --> 00:03:33,519
technology to tell us

00:03:31,519 --> 00:03:36,080
uh whenever our source code has a

00:03:33,519 --> 00:03:37,760
keyword in it

00:03:36,080 --> 00:03:39,280
after the source code is passed through

00:03:37,760 --> 00:03:39,840
a lecture it's then fed to the parser

00:03:39,280 --> 00:03:42,319
where

00:03:39,840 --> 00:03:42,879
those significant groups are turned into

00:03:42,319 --> 00:03:46,000
a

00:03:42,879 --> 00:03:46,000
syntax tree

00:03:46,970 --> 00:03:51,440
[Music]

00:03:49,200 --> 00:03:54,480
there we go so this ruby source code

00:03:51,440 --> 00:03:56,239
generates that syntax tree

00:03:54,480 --> 00:03:58,080
at this stage we can detect syntax

00:03:56,239 --> 00:03:59,040
errors if we try to comment out a

00:03:58,080 --> 00:04:01,200
critical line

00:03:59,040 --> 00:04:03,040
then our parser will generate an invalid

00:04:01,200 --> 00:04:04,319
syntax tree

00:04:03,040 --> 00:04:06,640
an important trick that we're going to

00:04:04,319 --> 00:04:07,519
use later is that if you keep commenting

00:04:06,640 --> 00:04:09,120
outlines

00:04:07,519 --> 00:04:10,720
from invalid source code you'll

00:04:09,120 --> 00:04:12,959
eventually be able to build a

00:04:10,720 --> 00:04:15,439
valid syntax tree which also means that

00:04:12,959 --> 00:04:17,519
your code is valid

00:04:15,439 --> 00:04:18,639
okay let's uh let's switch gears though

00:04:17,519 --> 00:04:20,560
for a second who here

00:04:18,639 --> 00:04:21,680
knows what ai is raise your hand in your

00:04:20,560 --> 00:04:24,800
homes

00:04:21,680 --> 00:04:25,280
i can see no i can't see you uh comment

00:04:24,800 --> 00:04:28,000
something

00:04:25,280 --> 00:04:29,680
say say me emoji i don't know i don't

00:04:28,000 --> 00:04:32,800
see anything nobody

00:04:29,680 --> 00:04:35,759
nobody real hat yes

00:04:32,800 --> 00:04:36,880
yes this is live okay nobody knows what

00:04:35,759 --> 00:04:39,440
ai is

00:04:36,880 --> 00:04:41,440
um art ai is artificial intelligence

00:04:39,440 --> 00:04:44,560
it's a fancy word of saying

00:04:41,440 --> 00:04:47,840
oh there we go algorithm i am

00:04:44,560 --> 00:04:53,280
more than an algorithm oh come on

00:04:47,840 --> 00:04:53,280
no you're not fine

00:04:54,000 --> 00:05:00,160
okay so more specifically ai is a goal

00:04:57,280 --> 00:05:03,120
seeking algorithm

00:05:00,160 --> 00:05:04,960
a common example of ai is pathfinding

00:05:03,120 --> 00:05:06,479
you want to get from point a to point b

00:05:04,960 --> 00:05:08,960
how would you tell a computer in order

00:05:06,479 --> 00:05:10,880
to do this you need a way to break down

00:05:08,960 --> 00:05:11,680
the problem into discrete actions that

00:05:10,880 --> 00:05:13,680
either get you

00:05:11,680 --> 00:05:15,120
closer or further away from the goal in

00:05:13,680 --> 00:05:16,320
path finding that would be deciding what

00:05:15,120 --> 00:05:19,440
turns to take

00:05:16,320 --> 00:05:21,440
what roads to drive on and then ai also

00:05:19,440 --> 00:05:22,960
also needs a goal it needs to know when

00:05:21,440 --> 00:05:25,199
it can stop looking for driving the

00:05:22,960 --> 00:05:27,919
algorithm stops once the destination has

00:05:25,199 --> 00:05:27,919
been reached

00:05:28,000 --> 00:05:31,520
now we can blend these two topics

00:05:29,840 --> 00:05:33,680
together we start with

00:05:31,520 --> 00:05:34,960
bad source code first of all what's our

00:05:33,680 --> 00:05:38,000
goal our goal

00:05:34,960 --> 00:05:40,960
is to transform the source code until

00:05:38,000 --> 00:05:42,479
it can parse again once we've done that

00:05:40,960 --> 00:05:44,400
we can stop searching

00:05:42,479 --> 00:05:46,320
we know that the syntax error has to be

00:05:44,400 --> 00:05:48,639
within those lines

00:05:46,320 --> 00:05:51,520
we can use our lecture to determine if

00:05:48,639 --> 00:05:54,080
our source code has a keyword

00:05:51,520 --> 00:05:55,360
there's one other thing one other piece

00:05:54,080 --> 00:05:57,440
we are missing

00:05:55,360 --> 00:05:59,199
um which which is intent so how does

00:05:57,440 --> 00:06:02,639
source code convey intent what's

00:05:59,199 --> 00:06:05,360
a way this code here is ambiguous

00:06:02,639 --> 00:06:06,960
the end on the very last line could

00:06:05,360 --> 00:06:09,759
belong to either line

00:06:06,960 --> 00:06:10,160
above one of these lines is missing a do

00:06:09,759 --> 00:06:14,240
but

00:06:10,160 --> 00:06:14,240
we don't know it's impossible to know

00:06:14,560 --> 00:06:17,199
this code on the other hand is a little

00:06:16,000 --> 00:06:19,280
bit more clear that the developer

00:06:17,199 --> 00:06:22,479
intended line two to be a block

00:06:19,280 --> 00:06:26,400
due to the indentation we

00:06:22,479 --> 00:06:28,160
so source code

00:06:26,400 --> 00:06:29,520
sorry about that that's where that's

00:06:28,160 --> 00:06:31,120
where our do goes

00:06:29,520 --> 00:06:32,639
so indentation is going to carry

00:06:31,120 --> 00:06:34,319
programmer intent

00:06:32,639 --> 00:06:36,870
at this point we've got all of the

00:06:34,319 --> 00:06:39,440
pieces that we need

00:06:36,870 --> 00:06:43,919
[Music]

00:06:39,440 --> 00:06:44,560
okay this is real ruby source code with

00:06:43,919 --> 00:06:48,240
a real

00:06:44,560 --> 00:06:51,039
syntax error in it it's organic organic

00:06:48,240 --> 00:06:52,639
syntax error we will use the dead end

00:06:51,039 --> 00:06:55,759
gem in order to find the problem using

00:06:52,639 --> 00:06:56,960
the tools that we've discussed

00:06:55,759 --> 00:06:59,759
all right the algorithm finds the

00:06:56,960 --> 00:07:01,520
largest indentation with 10 spaces on it

00:06:59,759 --> 00:07:04,400
it finds the last of those lines and

00:07:01,520 --> 00:07:04,400
works its way up

00:07:05,199 --> 00:07:08,400
here we've hit a change in indentation

00:07:06,880 --> 00:07:09,680
all the code is valid we're going to

00:07:08,400 --> 00:07:11,520
check it with ripper

00:07:09,680 --> 00:07:13,120
we know the valid code cannot contain

00:07:11,520 --> 00:07:14,240
the syntax error so we can comment it

00:07:13,120 --> 00:07:15,840
out safely

00:07:14,240 --> 00:07:17,680
this block is going to be added to our

00:07:15,840 --> 00:07:20,400
frontier for future expansion and

00:07:17,680 --> 00:07:20,400
exploration

00:07:20,720 --> 00:07:24,160
there's still more large indentations to

00:07:22,880 --> 00:07:24,880
explore before we can revisit the

00:07:24,160 --> 00:07:28,000
frontier

00:07:24,880 --> 00:07:30,319
this line is valid and that's that's

00:07:28,000 --> 00:07:31,120
it for code with 10 indentations so so

00:07:30,319 --> 00:07:32,720
now what

00:07:31,120 --> 00:07:34,479
rather than start exploring the eight

00:07:32,720 --> 00:07:37,759
indentations we can pop

00:07:34,479 --> 00:07:39,440
a code block out and expand it

00:07:37,759 --> 00:07:41,120
these lines were generated when code

00:07:39,440 --> 00:07:44,240
already on our frontier were expanded

00:07:41,120 --> 00:07:46,639
up and down when that happened our lexer

00:07:44,240 --> 00:07:47,680
saw that we hit a keyword on line 51

00:07:46,639 --> 00:07:50,800
with the if

00:07:47,680 --> 00:07:52,000
and an end on line 60 and so it pauses

00:07:50,800 --> 00:07:54,160
and checks it

00:07:52,000 --> 00:07:55,680
it's valid we can add the expanded block

00:07:54,160 --> 00:07:57,599
back to our frontier

00:07:55,680 --> 00:08:00,720
we pop the same block expanded the same

00:07:57,599 --> 00:08:03,280
block it hit a change in indentation

00:08:00,720 --> 00:08:06,000
repeat again we stopped do uh an

00:08:03,280 --> 00:08:08,879
indentation change again

00:08:06,000 --> 00:08:10,639
and at this point in time the a i or uh

00:08:08,879 --> 00:08:12,160
algorithm has successfully found a valid

00:08:10,639 --> 00:08:14,000
lexical block that starts with death and

00:08:12,160 --> 00:08:15,680
correctly ends with an end

00:08:14,000 --> 00:08:17,280
we could keep expanding that block but

00:08:15,680 --> 00:08:18,960
we've got other unexplored code at

00:08:17,280 --> 00:08:22,240
higher indentation now

00:08:18,960 --> 00:08:22,240
we go back to our add phase

00:08:23,440 --> 00:08:27,840
valid again keep looking

00:08:30,240 --> 00:08:35,120
see the problem yet anybody

00:08:33,360 --> 00:08:38,000
okay back to our frontier expanding

00:08:35,120 --> 00:08:40,959
blocks up and out

00:08:38,000 --> 00:08:42,880
again the code here looks dangerously

00:08:40,959 --> 00:08:45,039
suspicious what happens when we remove

00:08:42,880 --> 00:08:45,039
it

00:08:45,200 --> 00:08:50,720
right syntax is okay great so our goal

00:08:48,880 --> 00:08:52,720
seeking algorithm successfully found the

00:08:50,720 --> 00:08:54,640
invalid syntax nodes and remove them

00:08:52,720 --> 00:08:56,399
it can stop searching we then present

00:08:54,640 --> 00:08:58,480
these findings to the user

00:08:56,399 --> 00:09:00,160
this is the actual output that you get

00:08:58,480 --> 00:09:03,120
from inputting that

00:09:00,160 --> 00:09:04,320
file into uh into dead end there are

00:09:03,120 --> 00:09:07,200
extra lines on

00:09:04,320 --> 00:09:08,399
38 and 45 added in for a little bit of

00:09:07,200 --> 00:09:09,760
extra context and to

00:09:08,399 --> 00:09:11,920
accommodate an edge case i don't have

00:09:09,760 --> 00:09:13,839
time to fully go into here

00:09:11,920 --> 00:09:16,480
uh since release dead end has been

00:09:13,839 --> 00:09:19,920
downloaded over 144 thousand times and

00:09:16,480 --> 00:09:22,959
counting by exception connoisseurs

00:09:19,920 --> 00:09:26,320
and uh today we talked about um

00:09:22,959 --> 00:09:29,680
lexing parsing syntax errors um syntax

00:09:26,320 --> 00:09:32,560
ai pathfinding goal seeking um

00:09:29,680 --> 00:09:33,839
but really though i just want to take a

00:09:32,560 --> 00:09:37,760
second

00:09:33,839 --> 00:09:38,320
and just think about the non-technical

00:09:37,760 --> 00:09:39,920
pieces

00:09:38,320 --> 00:09:41,680
it's the technical pieces aren't really

00:09:39,920 --> 00:09:44,160
what i want you to focus on the

00:09:41,680 --> 00:09:46,000
the important thing for me is that

00:09:44,160 --> 00:09:46,560
everyone sitting in this virtual room

00:09:46,000 --> 00:09:49,440
together

00:09:46,560 --> 00:09:50,959
is the future of developer tooling

00:09:49,440 --> 00:09:52,880
programming

00:09:50,959 --> 00:09:55,519
is inherently difficult but it doesn't

00:09:52,880 --> 00:09:57,920
mean our tools can't help us

00:09:55,519 --> 00:09:59,680
one of the best ways to judge a system

00:09:57,920 --> 00:10:01,920
is to see how it fails

00:09:59,680 --> 00:10:03,760
when we give care and grace and beauty

00:10:01,920 --> 00:10:05,519
to our failure modes then we can create

00:10:03,760 --> 00:10:07,920
experiences that delight us

00:10:05,519 --> 00:10:09,120
experiences that teach us experiences

00:10:07,920 --> 00:10:12,240
that elevate our code

00:10:09,120 --> 00:10:12,959
and our consciousness a syntax error

00:10:12,240 --> 00:10:17,519
doesn't have

00:10:12,959 --> 00:10:21,040
to be an ending it can be a beginning

00:10:17,519 --> 00:10:21,040
to a beautiful programming story

00:10:21,519 --> 00:10:25,440
my name is richard schniemann i go by

00:10:23,519 --> 00:10:28,240
schneems on the internet

00:10:25,440 --> 00:10:31,760
i created cotriage.com easiest way to

00:10:28,240 --> 00:10:35,040
get started contributing to open source

00:10:31,760 --> 00:10:39,120
want you to go forth and be an

00:10:35,040 --> 00:10:39,120
exceptional programmer

00:10:39,279 --> 00:10:47,839
bye bye zoom wave everybody zoomwave

00:10:47,959 --> 00:10:50,959

YouTube URL: https://www.youtube.com/watch?v=cmBu1ah_o2Y


