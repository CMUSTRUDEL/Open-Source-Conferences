Title: !!Con 2021 - The musical password manifesto: you have nothing to lose but your... by Amara Jaeger
Publication date: 2021-07-06
Playlist: !!Con 2021
Description: 
	The musical password manifesto: you have nothing to lose but your FRcK7y23ckdqwCYPq! by Amara Jaeger

You’ve probably typed at least one plain text password today, but have you stopped to question why it had to be this way?? Who decided we should hide our most intimate data behind a secret phrase of characters– the more random and meaningless the better?? Seems pretty arbitrary, and really not that fun. Want to know what’s equally arbitrary and way more fun?? Musical passwords!!! In this talk, I’ll extol the virtues and mostly the fun of musical passwords, and explain a simple scheme for encoding them. By the end of this talk, you’ll hopefully have an understanding of how to easily map password data to some fun variables. This will leave you with no good excuse not to implement fun authentication in your future password-protected projects!

Amara lives in Brooklyn and can often be found rollerblading through local grocery stores. A recent Recurse Center alum, she likes to pet dogs, make beats, and ride her bike.
Captions: 
	00:00:12,639 --> 00:00:15,599
hi

00:00:12,960 --> 00:00:16,640
everyone today i'm really excited to

00:00:15,599 --> 00:00:18,560
tell you all about

00:00:16,640 --> 00:00:20,400
musical passwords and how you can make

00:00:18,560 --> 00:00:22,640
authentication more fun

00:00:20,400 --> 00:00:24,480
um this topic is pretty new to me and i

00:00:22,640 --> 00:00:26,160
had a lot of fun learning about it

00:00:24,480 --> 00:00:27,840
and i wanted to also let you know that

00:00:26,160 --> 00:00:30,160
this talk came out of a project

00:00:27,840 --> 00:00:33,679
completed at the recur center that i

00:00:30,160 --> 00:00:33,679
co-created with my friend azad

00:00:34,160 --> 00:00:38,160
so to start off with you've probably

00:00:36,239 --> 00:00:40,320
already typed a plain text password

00:00:38,160 --> 00:00:42,079
today i know i have

00:00:40,320 --> 00:00:43,920
and while a lot of people are advocating

00:00:42,079 --> 00:00:46,800
for switches to more modern solutions

00:00:43,920 --> 00:00:48,320
like biometric ids like face or

00:00:46,800 --> 00:00:51,520
fingerprint recognition

00:00:48,320 --> 00:00:52,719
or else two-factor authentication those

00:00:51,520 --> 00:00:54,079
come with their own drawbacks and

00:00:52,719 --> 00:00:55,840
concerns

00:00:54,079 --> 00:00:57,360
and either way for now plain text

00:00:55,840 --> 00:00:58,000
passwords still really dominate the

00:00:57,360 --> 00:00:59,520
landscape

00:00:58,000 --> 00:01:02,719
and they don't seem to be going anywhere

00:00:59,520 --> 00:01:02,719
in the very immediate future

00:01:03,520 --> 00:01:07,040
so there are all kinds of historical

00:01:05,199 --> 00:01:08,960
reasons why we ended up here

00:01:07,040 --> 00:01:10,960
talking about plain text passwords as

00:01:08,960 --> 00:01:12,880
opposed to any other kind

00:01:10,960 --> 00:01:14,080
the ancient roman military actually used

00:01:12,880 --> 00:01:16,640
passwords

00:01:14,080 --> 00:01:17,759
um but that being said this particular

00:01:16,640 --> 00:01:20,479
type of authentication

00:01:17,759 --> 00:01:21,680
is at least in my opinion totally

00:01:20,479 --> 00:01:23,920
arbitrary

00:01:21,680 --> 00:01:25,360
um and for me it's kind of fundamental

00:01:23,920 --> 00:01:27,280
to my view of the world

00:01:25,360 --> 00:01:29,439
to question why things are the way they

00:01:27,280 --> 00:01:32,400
are and just explore and imagine ways

00:01:29,439 --> 00:01:32,400
that they could be different

00:01:33,200 --> 00:01:37,439
so in summary authenticating with a

00:01:36,079 --> 00:01:40,159
plain text password

00:01:37,439 --> 00:01:40,960
is a pretty arbitrary convention and for

00:01:40,159 --> 00:01:42,799
most of us

00:01:40,960 --> 00:01:46,320
typing out a randomly generated sequence

00:01:42,799 --> 00:01:47,759
of characters does not spark joy

00:01:46,320 --> 00:01:50,880
um authenticating with a musical

00:01:47,759 --> 00:01:52,840
password is definitely equally arbitrary

00:01:50,880 --> 00:01:55,040
and in my opinion it's also a lot more

00:01:52,840 --> 00:01:56,880
fun

00:01:55,040 --> 00:01:58,479
so i've created a stripped-down

00:01:56,880 --> 00:01:59,600
implementation of musical password

00:01:58,479 --> 00:02:00,960
authentication

00:01:59,600 --> 00:02:03,119
which should give you what you need to

00:02:00,960 --> 00:02:05,200
implement it in your own project

00:02:03,119 --> 00:02:07,360
the link to explore interact with this

00:02:05,200 --> 00:02:09,039
code is up on the screen here

00:02:07,360 --> 00:02:10,560
so i encourage you to just play around

00:02:09,039 --> 00:02:11,840
with that

00:02:10,560 --> 00:02:15,360
and i'll also throw that link in the

00:02:11,840 --> 00:02:15,360
chat so that you can check it out later

00:02:15,440 --> 00:02:19,120
so broadly removed from any one specific

00:02:17,680 --> 00:02:20,720
login context

00:02:19,120 --> 00:02:22,959
here are the pieces that we're actually

00:02:20,720 --> 00:02:24,879
gonna need for this to start working

00:02:22,959 --> 00:02:28,319
so firstly we're going to need a way to

00:02:24,879 --> 00:02:30,400
record encode and store musical data

00:02:28,319 --> 00:02:31,440
and then for authentication we're going

00:02:30,400 --> 00:02:34,879
to need a function

00:02:31,440 --> 00:02:36,720
that takes in two pieces of musical data

00:02:34,879 --> 00:02:38,879
compares them and evaluates whether the

00:02:36,720 --> 00:02:41,040
two are sufficiently similar

00:02:38,879 --> 00:02:42,239
and then returns an output of true or

00:02:41,040 --> 00:02:44,160
false

00:02:42,239 --> 00:02:46,239
in answer to the question did you pass

00:02:44,160 --> 00:02:47,840
authentication

00:02:46,239 --> 00:02:49,760
um and the third thing that it would be

00:02:47,840 --> 00:02:51,840
nice to have would be

00:02:49,760 --> 00:02:53,840
a way to play back or hear what we

00:02:51,840 --> 00:02:55,920
recorded just to make sure that

00:02:53,840 --> 00:02:58,480
the password we set was actually the one

00:02:55,920 --> 00:02:58,480
we wanted

00:02:59,040 --> 00:03:02,400
so let's dive right in with um the first

00:03:00,879 --> 00:03:04,480
item on this checklist

00:03:02,400 --> 00:03:06,959
so firstly we're going to need a way to

00:03:04,480 --> 00:03:08,800
record encode and store our musical data

00:03:06,959 --> 00:03:11,200
so um this implementation that i've

00:03:08,800 --> 00:03:13,040
created maps keyboard presses to pitches

00:03:11,200 --> 00:03:15,120
that are then interpreted and played by

00:03:13,040 --> 00:03:16,640
a tone synth in javascript

00:03:15,120 --> 00:03:18,319
um there are any number of other

00:03:16,640 --> 00:03:19,519
possibilities for other ways to build

00:03:18,319 --> 00:03:20,879
this mapping

00:03:19,519 --> 00:03:22,879
and this implementation is kind of

00:03:20,879 --> 00:03:24,560
structured around making the computer

00:03:22,879 --> 00:03:25,360
keyboard feel similar to a piano

00:03:24,560 --> 00:03:28,400
keyboard

00:03:25,360 --> 00:03:29,200
so it's going to map the first two rows

00:03:28,400 --> 00:03:33,840
of your keyboard

00:03:29,200 --> 00:03:33,840
to some notes on the piano keyboard

00:03:34,239 --> 00:03:37,599
so it's easier than you might think to

00:03:35,760 --> 00:03:38,799
record this data um

00:03:37,599 --> 00:03:40,879
the first thing that we're going to need

00:03:38,799 --> 00:03:42,879
is a variable that tells us whether we

00:03:40,879 --> 00:03:44,480
currently are or aren't recording

00:03:42,879 --> 00:03:46,400
so you can see that in the code up on

00:03:44,480 --> 00:03:49,200
the screen i'm just initializing

00:03:46,400 --> 00:03:50,080
that variable um and as a side note in

00:03:49,200 --> 00:03:51,280
react

00:03:50,080 --> 00:03:52,879
we're going to need to use a sort of a

00:03:51,280 --> 00:03:53,599
workaround to make sure that we can

00:03:52,879 --> 00:03:55,040
access

00:03:53,599 --> 00:03:57,439
the most updated version of that

00:03:55,040 --> 00:03:58,879
variable from an event listener

00:03:57,439 --> 00:04:01,280
conceptually it's not hugely important

00:03:58,879 --> 00:04:03,599
to the idea of musical authentication

00:04:01,280 --> 00:04:04,879
um but it is going to be important if

00:04:03,599 --> 00:04:06,319
you're trying to implement this in react

00:04:04,879 --> 00:04:08,640
so an example of that is just up on the

00:04:06,319 --> 00:04:08,640
screen

00:04:09,200 --> 00:04:12,239
the second thing that we'll need for

00:04:10,400 --> 00:04:14,000
recording is an event listener that

00:04:12,239 --> 00:04:15,680
notices when we press a key

00:04:14,000 --> 00:04:17,600
and then maps it to a pitch and plays

00:04:15,680 --> 00:04:19,600
that pitch

00:04:17,600 --> 00:04:20,720
and then it checks whether the value of

00:04:19,600 --> 00:04:22,720
the variable that

00:04:20,720 --> 00:04:23,840
determines if we're recording is set to

00:04:22,720 --> 00:04:25,919
true or false

00:04:23,840 --> 00:04:28,560
and if we are recording it pushes the

00:04:25,919 --> 00:04:31,680
value that we pressed to an array

00:04:28,560 --> 00:04:34,560
specifically it pushes a tuple where

00:04:31,680 --> 00:04:35,919
the first element of the tuple is the

00:04:34,560 --> 00:04:37,680
current time

00:04:35,919 --> 00:04:39,120
and the second element is the note so

00:04:37,680 --> 00:04:40,240
this is how we'll kind of get our rhythm

00:04:39,120 --> 00:04:43,840
and pitch information

00:04:40,240 --> 00:04:43,840
how we'll encode that

00:04:44,240 --> 00:04:47,520
so we now have this array that we've

00:04:45,840 --> 00:04:48,400
been pushing to with our date pitch

00:04:47,520 --> 00:04:50,080
tuples

00:04:48,400 --> 00:04:52,479
um and we want to feed this into a

00:04:50,080 --> 00:04:55,199
function to play back our performance

00:04:52,479 --> 00:04:56,800
so to do that we're gonna write this

00:04:55,199 --> 00:04:57,840
function called play that you'll see up

00:04:56,800 --> 00:05:00,320
on the screen

00:04:57,840 --> 00:05:00,960
um and we'll just use the set timeout

00:05:00,320 --> 00:05:02,639
method

00:05:00,960 --> 00:05:04,080
to play our synth at the times that we

00:05:02,639 --> 00:05:06,400
wrote to the array

00:05:04,080 --> 00:05:07,919
um so this should totally work because

00:05:06,400 --> 00:05:09,280
the set timeout function just allows you

00:05:07,919 --> 00:05:11,759
to delay actions

00:05:09,280 --> 00:05:13,199
a certain amount of milliseconds um

00:05:11,759 --> 00:05:14,880
unfortunately

00:05:13,199 --> 00:05:17,120
we have one problem that's a pretty

00:05:14,880 --> 00:05:19,600
significant one

00:05:17,120 --> 00:05:22,080
um which is that recall that our date

00:05:19,600 --> 00:05:23,360
our dates are in the date.now format

00:05:22,080 --> 00:05:25,199
and so what this is going to end up

00:05:23,360 --> 00:05:27,600
meaning um

00:05:25,199 --> 00:05:29,759
is that since this returns the number of

00:05:27,600 --> 00:05:31,039
milliseconds elapsed since january 1st

00:05:29,759 --> 00:05:33,039
00:05:31,039 --> 00:05:35,120
we will have to sit around for about 50

00:05:33,039 --> 00:05:38,880
years before these notes start to play

00:05:35,120 --> 00:05:40,960
so that's not a deal um but

00:05:38,880 --> 00:05:42,639
50 years is a lot of time to think at

00:05:40,960 --> 00:05:43,919
some point within that 50 years

00:05:42,639 --> 00:05:46,560
while you're waiting for those notes to

00:05:43,919 --> 00:05:48,720
start playing it might occur to you that

00:05:46,560 --> 00:05:50,479
you could just write a function to solve

00:05:48,720 --> 00:05:52,160
this problem

00:05:50,479 --> 00:05:55,440
and the function that you end up writing

00:05:52,160 --> 00:05:57,360
might look something like this

00:05:55,440 --> 00:05:58,960
um so this is a process performance

00:05:57,360 --> 00:06:00,639
function that um

00:05:58,960 --> 00:06:02,400
its purpose is just to solve this issue

00:06:00,639 --> 00:06:04,000
of having to wait 50 years

00:06:02,400 --> 00:06:06,720
um and what it does is it basically

00:06:04,000 --> 00:06:07,520
subtracts the initial date off each date

00:06:06,720 --> 00:06:09,120
in the array

00:06:07,520 --> 00:06:10,960
so that gets us the time intervals

00:06:09,120 --> 00:06:12,960
between notes starting at zero for the

00:06:10,960 --> 00:06:14,639
first note played

00:06:12,960 --> 00:06:17,840
and we'll just call this function right

00:06:14,639 --> 00:06:20,960
when we press a stop recording button

00:06:17,840 --> 00:06:22,479
and after that if we click play we won't

00:06:20,960 --> 00:06:23,919
have to sit there for 50 years

00:06:22,479 --> 00:06:26,880
our performance will have been processed

00:06:23,919 --> 00:06:26,880
and it will start right away

00:06:27,600 --> 00:06:31,039
so just to revisit our checklist here's

00:06:29,360 --> 00:06:33,600
where we're at um

00:06:31,039 --> 00:06:34,960
we have found a way to record encode and

00:06:33,600 --> 00:06:36,639
store musical data

00:06:34,960 --> 00:06:38,000
and we've even found a way to play back

00:06:36,639 --> 00:06:40,479
and hear what we recorded

00:06:38,000 --> 00:06:42,400
instantly so that's great and the only

00:06:40,479 --> 00:06:44,400
piece that remains

00:06:42,400 --> 00:06:45,600
is the second item so we're going to

00:06:44,400 --> 00:06:46,960
need to write a function for

00:06:45,600 --> 00:06:48,960
authentication that

00:06:46,960 --> 00:06:50,160
is going to take as input two pieces of

00:06:48,960 --> 00:06:52,240
musical data

00:06:50,160 --> 00:06:53,599
and decide whether they are sufficiently

00:06:52,240 --> 00:06:56,800
similar

00:06:53,599 --> 00:06:58,160
so let's dive into that so for

00:06:56,800 --> 00:07:00,560
authentication

00:06:58,160 --> 00:07:02,080
um now that we have our musical data

00:07:00,560 --> 00:07:03,759
encoded in an array

00:07:02,080 --> 00:07:06,319
this is really no problem it just

00:07:03,759 --> 00:07:07,039
amounts to comparing two arrays to one

00:07:06,319 --> 00:07:08,560
another

00:07:07,039 --> 00:07:11,520
so let's kind of build this up step by

00:07:08,560 --> 00:07:13,440
step as to what we're looking for

00:07:11,520 --> 00:07:15,360
so first we'll need a function kind of

00:07:13,440 --> 00:07:16,560
like this one um i called it compare

00:07:15,360 --> 00:07:18,080
notes

00:07:16,560 --> 00:07:19,680
because that's what it does it compares

00:07:18,080 --> 00:07:21,919
each note in the two arrays

00:07:19,680 --> 00:07:23,919
so if any of the two notes are different

00:07:21,919 --> 00:07:24,800
um the two array the two entries aren't

00:07:23,919 --> 00:07:27,199
the same

00:07:24,800 --> 00:07:28,240
um and we'll be pretty strict about this

00:07:27,199 --> 00:07:31,120
so we'll say that

00:07:28,240 --> 00:07:31,520
if any note in the two arrays doesn't

00:07:31,120 --> 00:07:34,720
match

00:07:31,520 --> 00:07:36,080
with another note um then you've failed

00:07:34,720 --> 00:07:38,560
authentication it's not the same

00:07:36,080 --> 00:07:38,560
password

00:07:38,639 --> 00:07:42,560
and next we'll need a function kind of

00:07:40,319 --> 00:07:43,840
like this that compares the times which

00:07:42,560 --> 00:07:46,479
represent the rhythms

00:07:43,840 --> 00:07:47,039
in each array so the big question here

00:07:46,479 --> 00:07:48,879
is

00:07:47,039 --> 00:07:51,360
how similar do we need the two arrays to

00:07:48,879 --> 00:07:54,160
be to actually pass authentication

00:07:51,360 --> 00:07:55,919
um it's kind of unreasonably hard to get

00:07:54,160 --> 00:07:57,360
this right to the millisecond level on

00:07:55,919 --> 00:08:00,400
two takes on our little

00:07:57,360 --> 00:08:02,879
plastic computer keyboards which is why

00:08:00,400 --> 00:08:04,879
this function has a threshold parameter

00:08:02,879 --> 00:08:08,160
so this means you can set how many

00:08:04,879 --> 00:08:10,319
milliseconds of error you'll allow

00:08:08,160 --> 00:08:12,560
so putting that all together we can use

00:08:10,319 --> 00:08:14,160
our function to compare pitches and our

00:08:12,560 --> 00:08:16,400
function to compare rhythms

00:08:14,160 --> 00:08:18,560
inside our bigger comparison function

00:08:16,400 --> 00:08:20,160
and here i'm allowing for 500

00:08:18,560 --> 00:08:21,039
milliseconds of difference between

00:08:20,160 --> 00:08:24,160
functions

00:08:21,039 --> 00:08:26,000
which i found to be pretty reasonable

00:08:24,160 --> 00:08:27,360
we also include one more step at the

00:08:26,000 --> 00:08:30,000
beginning which is just to make sure

00:08:27,360 --> 00:08:31,440
that the two arrays are the same length

00:08:30,000 --> 00:08:33,120
because if they're not we don't even

00:08:31,440 --> 00:08:34,320
bother to compare note or rhythm

00:08:33,120 --> 00:08:35,839
if they're not the same length it would

00:08:34,320 --> 00:08:37,440
mean that one of them has an extra note

00:08:35,839 --> 00:08:38,800
that the other doesn't have and in that

00:08:37,440 --> 00:08:39,680
case you just automatically fail

00:08:38,800 --> 00:08:42,640
authentication

00:08:39,680 --> 00:08:43,919
those two are not the same so we've

00:08:42,640 --> 00:08:45,360
covered everything in our checklist

00:08:43,919 --> 00:08:46,000
which means we have everything we need

00:08:45,360 --> 00:08:48,800
to set up

00:08:46,000 --> 00:08:50,240
musical password authentication um so

00:08:48,800 --> 00:08:52,839
i'm just going to give you a quick demo

00:08:50,240 --> 00:08:54,959
of what it looks like in my

00:08:52,839 --> 00:08:56,399
implementation

00:08:54,959 --> 00:08:58,000
cool so going through the demo here i'm

00:08:56,399 --> 00:08:58,690
first going to show you um a failed

00:08:58,000 --> 00:09:01,799
authentication

00:08:58,690 --> 00:09:01,799
[Music]

00:09:01,920 --> 00:09:09,839
and the computer plays it back for me

00:09:08,160 --> 00:09:11,519
and here's a second take of a completely

00:09:09,839 --> 00:09:15,200
different phrase

00:09:11,519 --> 00:09:17,490
playing it back and we get false because

00:09:15,200 --> 00:09:21,760
they were not the same

00:09:17,490 --> 00:09:23,360
[Music]

00:09:21,760 --> 00:09:24,450
now for an example of true i just played

00:09:23,360 --> 00:09:30,320
one phrase

00:09:24,450 --> 00:09:36,080
[Music]

00:09:30,320 --> 00:09:38,160
now let's play it one more time

00:09:36,080 --> 00:09:42,399
and have it play back just make sure

00:09:38,160 --> 00:09:44,320
[Music]

00:09:42,399 --> 00:09:46,880
and compare them and they're true

00:09:44,320 --> 00:09:51,200
because they're the same

00:09:46,880 --> 00:09:52,880
and lastly thank you for coming

00:09:51,200 --> 00:09:54,959
i hope this talk has given you some

00:09:52,880 --> 00:09:56,480
ideas for how to add fun authentication

00:09:54,959 --> 00:09:58,480
into your own projects

00:09:56,480 --> 00:10:04,959
um and thanks again thank you so much

00:09:58,480 --> 00:10:04,959

YouTube URL: https://www.youtube.com/watch?v=mx0ZhHrCSvY


