Title: !!Con 2021 - making our own napster so we can party like it’s 1999! by Martin Gaston
Publication date: 2021-07-06
Playlist: !!Con 2021
Description: 
	making our own napster so we can party like it’s 1999! by Martin Gaston

Shamefully, the first MP3 I ever downloaded was Ricky Martin’s Livin Da Vida Loca. And I downloaded it from this magical new application called Napster.

Using Napster felt bold, daring, and exciting. It peaked at the dawn of the 21st century, where we felt like the future was right now. Napster introduced peer-to-peer software to a mainstream audience, creating an unspoken community of punk outsiders (some of whom downloaded Ricky Martin hits) who felt like they were about to start playing society by a new set of rules.

In this talk, we’ll look back at the tech which powered the core of Napster - a centralised, peer-to-peer network. We’ll explore how a P2P connection works, how to create a protocol to send data between two computers and then we’ll create our own toy project that really whips the llama’s ass!

Between frequent conversations about the magic of the 90s, Martin works as a software consultant at 8th Light. He likes fiddling around with fussy protocols, wants everyone to feel like they can pursue a career in tech, and is absolutely no good at writing a personal bio.
Captions: 
	00:00:13,440 --> 00:00:17,840
hi everyone

00:00:14,320 --> 00:00:20,240
um it's so intimidating to follow uh

00:00:17,840 --> 00:00:21,119
so many great talks um i'm kind of just

00:00:20,240 --> 00:00:25,039
composing myself

00:00:21,119 --> 00:00:28,160
after those three amazing talks um

00:00:25,039 --> 00:00:31,279
but uh but yes hello um i

00:00:28,160 --> 00:00:33,880
am proud to admit that the first mp3

00:00:31,279 --> 00:00:35,200
i ever downloaded was ricky martin's

00:00:33,880 --> 00:00:38,960
00:00:35,200 --> 00:00:41,360
pop banger live in la vida loca

00:00:38,960 --> 00:00:42,079
which i would then play dozens of times

00:00:41,360 --> 00:00:46,079
a day

00:00:42,079 --> 00:00:49,680
on an outstanding program called winamp

00:00:46,079 --> 00:00:53,520
and i downloaded this hit from the mp3

00:00:49,680 --> 00:00:56,480
file sharing service napster

00:00:53,520 --> 00:00:58,000
and if you missed napster it introduced

00:00:56,480 --> 00:01:01,480
peer-to-peer networks to the

00:00:58,000 --> 00:01:04,320
world it felt edgy and

00:01:01,480 --> 00:01:06,400
anti-establishment and despite what the

00:01:04,320 --> 00:01:08,960
music industry was saying at the time

00:01:06,400 --> 00:01:11,600
it was so obviously like staring at a

00:01:08,960 --> 00:01:14,080
portal into the future

00:01:11,600 --> 00:01:14,799
and recently i've been trying to

00:01:14,080 --> 00:01:17,600
recreate

00:01:14,799 --> 00:01:18,080
my own napster it's been a really fun

00:01:17,600 --> 00:01:20,720
journey

00:01:18,080 --> 00:01:22,000
and it's taken me into internet sockets

00:01:20,720 --> 00:01:25,040
numerous servers

00:01:22,000 --> 00:01:27,759
and eventually playing an mp3

00:01:25,040 --> 00:01:30,159
and today i'm really excited to share

00:01:27,759 --> 00:01:32,479
that with you

00:01:30,159 --> 00:01:34,640
and i'll start at the beginning via a

00:01:32,479 --> 00:01:37,759
pretty amazing reference from a reverse

00:01:34,640 --> 00:01:39,520
engineered napster called open nap so if

00:01:37,759 --> 00:01:41,360
we imagine her in 1999

00:01:39,520 --> 00:01:43,280
and we just booted up our napster client

00:01:41,360 --> 00:01:45,360
on our windows 98 machine

00:01:43,280 --> 00:01:47,600
the application would call a redirector

00:01:45,360 --> 00:01:49,360
server which was like a load balancer

00:01:47,600 --> 00:01:51,840
and this would point you to a nearby

00:01:49,360 --> 00:01:54,240
server that hopefully wasn't overloaded

00:01:51,840 --> 00:01:55,119
you'll then connect directly to that

00:01:54,240 --> 00:01:56,640
server

00:01:55,119 --> 00:01:58,560
and you won't worry about the redirector

00:01:56,640 --> 00:02:00,159
anymore but all of these connections

00:01:58,560 --> 00:02:02,799
whether that is to the redirector

00:02:00,159 --> 00:02:03,680
to your main maps to servers or even to

00:02:02,799 --> 00:02:05,759
another client

00:02:03,680 --> 00:02:07,439
which is known as appear these are all

00:02:05,759 --> 00:02:09,200
handled by sockets

00:02:07,439 --> 00:02:11,280
which are provided to us by our

00:02:09,200 --> 00:02:13,280
operating systems

00:02:11,280 --> 00:02:14,959
and you probably have a bunch of socket

00:02:13,280 --> 00:02:17,440
connections going right now

00:02:14,959 --> 00:02:18,640
with at least one being used to watch

00:02:17,440 --> 00:02:21,440
this talk

00:02:18,640 --> 00:02:22,720
sockets basically power the whole of the

00:02:21,440 --> 00:02:25,360
internet

00:02:22,720 --> 00:02:27,280
and if you have netstat installed you

00:02:25,360 --> 00:02:30,480
can run that command now to take a peep

00:02:27,280 --> 00:02:33,360
of what you've got on your machine

00:02:30,480 --> 00:02:34,800
now much of this incredible socket api

00:02:33,360 --> 00:02:36,480
is written in c

00:02:34,800 --> 00:02:38,319
but almost all languages have an

00:02:36,480 --> 00:02:40,319
abstraction of it as part of their

00:02:38,319 --> 00:02:42,319
standard library

00:02:40,319 --> 00:02:43,680
we'll be using python today but if

00:02:42,319 --> 00:02:45,599
you've never used python

00:02:43,680 --> 00:02:47,200
please don't worry hopefully a lot of

00:02:45,599 --> 00:02:49,280
the syntax will be pretty

00:02:47,200 --> 00:02:50,879
pretty familiar-ish if you've used

00:02:49,280 --> 00:02:54,319
another dynamic language like

00:02:50,879 --> 00:02:56,239
ruby or javascript so if we quickly dive

00:02:54,319 --> 00:02:57,280
into some code we can load up our socket

00:02:56,239 --> 00:02:59,440
library

00:02:57,280 --> 00:03:01,200
we can declare a variable to represent

00:02:59,440 --> 00:03:03,200
an internet socket

00:03:01,200 --> 00:03:05,360
now there are other types but the

00:03:03,200 --> 00:03:07,200
internet is what we're after today

00:03:05,360 --> 00:03:09,120
and we'll also strictly be communicating

00:03:07,200 --> 00:03:11,599
with the tcp protocol

00:03:09,120 --> 00:03:12,720
again there are other types but this one

00:03:11,599 --> 00:03:15,599
creates a reliable

00:03:12,720 --> 00:03:17,280
two-way connection now with those we can

00:03:15,599 --> 00:03:19,440
create a socket

00:03:17,280 --> 00:03:22,159
and before we jump into napster we'll

00:03:19,440 --> 00:03:24,640
start with an example using http

00:03:22,159 --> 00:03:25,280
by firing some binary data to the bang

00:03:24,640 --> 00:03:28,720
bang con

00:03:25,280 --> 00:03:29,280
server and we can even add a couple of

00:03:28,720 --> 00:03:32,560
headers

00:03:29,280 --> 00:03:34,159
to make it look especially legitimate

00:03:32,560 --> 00:03:35,840
and we can get a really cool response

00:03:34,159 --> 00:03:38,080
back and

00:03:35,840 --> 00:03:38,959
this turns out uh to be a nifty piece of

00:03:38,080 --> 00:03:42,480
html

00:03:38,959 --> 00:03:45,040
telling us to use https

00:03:42,480 --> 00:03:46,640
now look this is all really cool we're

00:03:45,040 --> 00:03:48,959
using the sockets api

00:03:46,640 --> 00:03:50,319
and tcp and all of this stuff and we're

00:03:48,959 --> 00:03:51,040
just we're not really worrying about it

00:03:50,319 --> 00:03:52,799
at all

00:03:51,040 --> 00:03:54,080
the operating system is doing most of

00:03:52,799 --> 00:03:56,640
the work here

00:03:54,080 --> 00:03:58,080
what we've done is taken some data and

00:03:56,640 --> 00:04:00,959
wrapped it with some http

00:03:58,080 --> 00:04:02,720
protocol headers and which in turn gets

00:04:00,959 --> 00:04:03,920
wrapped in some tcp headers by our

00:04:02,720 --> 00:04:06,080
socket library

00:04:03,920 --> 00:04:07,120
and then some ip data gets added again

00:04:06,080 --> 00:04:10,159
none of this is being done

00:04:07,120 --> 00:04:11,360
actively by us and then some hardware

00:04:10,159 --> 00:04:13,599
data gets wrapped around

00:04:11,360 --> 00:04:15,120
a lot of it like your ethernet port or

00:04:13,599 --> 00:04:16,639
your wi-fi connection this gets popped

00:04:15,120 --> 00:04:19,120
on at the end

00:04:16,639 --> 00:04:21,600
and now when we whiz this packet of data

00:04:19,120 --> 00:04:23,759
down the magical internet pipes

00:04:21,600 --> 00:04:25,360
and the bang bang con server picks it up

00:04:23,759 --> 00:04:27,520
and does the same in reverse

00:04:25,360 --> 00:04:29,840
stripping off headers until we're down

00:04:27,520 --> 00:04:31,840
to the original data that we sent

00:04:29,840 --> 00:04:33,600
this layered network model means that we

00:04:31,840 --> 00:04:35,440
can focus on our application

00:04:33,600 --> 00:04:37,520
and it also means i can give this talk

00:04:35,440 --> 00:04:38,080
without having to understand about 1500

00:04:37,520 --> 00:04:41,040
pages

00:04:38,080 --> 00:04:42,160
of network programming and so when it

00:04:41,040 --> 00:04:43,520
comes to our

00:04:42,160 --> 00:04:45,199
sorry when it comes to our napster

00:04:43,520 --> 00:04:48,080
server we're still using

00:04:45,199 --> 00:04:49,919
ip and sockets and tcp all of those

00:04:48,080 --> 00:04:52,400
parts are the exact same

00:04:49,919 --> 00:04:54,479
but while bangbangcon.com knew how to

00:04:52,400 --> 00:04:56,720
speak in http

00:04:54,479 --> 00:04:57,600
we need to make a server and a client

00:04:56,720 --> 00:05:00,320
that can speak

00:04:57,600 --> 00:05:02,240
in napster now actually setting up the

00:05:00,320 --> 00:05:03,680
socket infrastructure is very similar in

00:05:02,240 --> 00:05:05,199
both

00:05:03,680 --> 00:05:07,600
for the client we once again create a

00:05:05,199 --> 00:05:08,800
socket we connect to the ip and port of

00:05:07,600 --> 00:05:11,280
an appstore server

00:05:08,800 --> 00:05:12,800
we send a special maps the data packet

00:05:11,280 --> 00:05:13,280
and then we read the response from the

00:05:12,800 --> 00:05:16,400
server

00:05:13,280 --> 00:05:18,479
and we're done now we'd need to code a

00:05:16,400 --> 00:05:20,160
little more to keep our connection alive

00:05:18,479 --> 00:05:22,000
but this handles a single send and

00:05:20,160 --> 00:05:24,560
receive flow

00:05:22,000 --> 00:05:26,560
and over on the server side we start by

00:05:24,560 --> 00:05:27,120
booting it up with python socket server

00:05:26,560 --> 00:05:28,720
library

00:05:27,120 --> 00:05:30,800
which is another abstraction on top of

00:05:28,720 --> 00:05:32,400
socket and it will sit and wait for

00:05:30,800 --> 00:05:33,919
connections

00:05:32,400 --> 00:05:36,880
we can set up a handler for when a

00:05:33,919 --> 00:05:39,199
client connects we can grab our socket

00:05:36,880 --> 00:05:42,479
we can receive data from the client we

00:05:39,199 --> 00:05:45,440
can process it however we see fit

00:05:42,479 --> 00:05:47,199
and then we can return a response now

00:05:45,440 --> 00:05:49,120
there's a lot more we would need to do

00:05:47,199 --> 00:05:50,639
in a big production system with

00:05:49,120 --> 00:05:52,479
thousands of active users

00:05:50,639 --> 00:05:54,720
but this is already quite a potent

00:05:52,479 --> 00:05:56,400
client server connection as it is

00:05:54,720 --> 00:05:58,800
and we can now start to think about what

00:05:56,400 --> 00:06:00,960
the actual data we're supposed to send

00:05:58,800 --> 00:06:03,680
between the client and the server would

00:06:00,960 --> 00:06:03,680
need to look like

00:06:04,080 --> 00:06:08,639
all messages in napster take the form of

00:06:06,160 --> 00:06:11,360
a packet that be that can be divided up

00:06:08,639 --> 00:06:12,479
into length type and data sections with

00:06:11,360 --> 00:06:15,520
length and type

00:06:12,479 --> 00:06:18,639
in two bytes each the value of length

00:06:15,520 --> 00:06:20,800
is the size of the data section in bytes

00:06:18,639 --> 00:06:24,240
so our nats the client and server know

00:06:20,800 --> 00:06:26,639
how many bytes to read from the socket

00:06:24,240 --> 00:06:28,000
now the ones and zeroes of binary aren't

00:06:26,639 --> 00:06:28,800
something we really have to think about

00:06:28,000 --> 00:06:30,880
today

00:06:28,800 --> 00:06:32,560
but i did do a talk last year about

00:06:30,880 --> 00:06:33,039
reading files from a playstation memory

00:06:32,560 --> 00:06:35,280
card

00:06:33,039 --> 00:06:38,160
which goes into it in a lot more detail

00:06:35,280 --> 00:06:39,840
if you'd like to know more

00:06:38,160 --> 00:06:41,840
what we do need to know is that we can

00:06:39,840 --> 00:06:43,440
encode these ones and zeros into human

00:06:41,840 --> 00:06:44,639
readable characters using a mapping

00:06:43,440 --> 00:06:46,400
called ascii

00:06:44,639 --> 00:06:48,080
we'll use this in the data portion of

00:06:46,400 --> 00:06:49,599
our napster packets

00:06:48,080 --> 00:06:51,360
and we will also need to know that we

00:06:49,599 --> 00:06:51,759
write our length and type bytes which

00:06:51,360 --> 00:06:54,319
are

00:06:51,759 --> 00:06:55,120
remember two bytes each in hexadecimal

00:06:54,319 --> 00:06:57,919
format

00:06:55,120 --> 00:07:00,080
which is like counting from 0 to 15 only

00:06:57,919 --> 00:07:01,759
we can do that with one digit

00:07:00,080 --> 00:07:03,599
as we have six more digits added from a

00:07:01,759 --> 00:07:04,720
to f it's a little bit sort of a mind

00:07:03,599 --> 00:07:06,800
bendy thing

00:07:04,720 --> 00:07:08,639
but the zero x part is just a way of

00:07:06,800 --> 00:07:11,680
making all the hexadecimalliness

00:07:08,639 --> 00:07:13,199
a bit more explicit

00:07:11,680 --> 00:07:15,599
with this in hand we can start to

00:07:13,199 --> 00:07:18,240
assemble our napster messages

00:07:15,599 --> 00:07:19,759
there's about 130 odd in napster but

00:07:18,240 --> 00:07:20,720
will only really be using a handful

00:07:19,759 --> 00:07:23,680
today

00:07:20,720 --> 00:07:24,960
these three logging in registering files

00:07:23,680 --> 00:07:27,360
and searching for files

00:07:24,960 --> 00:07:29,280
are the core ones for now we use the

00:07:27,360 --> 00:07:31,440
length type and data sections of our

00:07:29,280 --> 00:07:32,960
message to create tiny little agreements

00:07:31,440 --> 00:07:36,400
between the client and server

00:07:32,960 --> 00:07:39,039
and how to communicate with one another

00:07:36,400 --> 00:07:39,840
and the next step is gluing together our

00:07:39,039 --> 00:07:41,680
connection

00:07:39,840 --> 00:07:43,759
and our protocol and actually

00:07:41,680 --> 00:07:45,440
downloading an mp3

00:07:43,759 --> 00:07:47,039
so napster is centralized which

00:07:45,440 --> 00:07:47,599
essentially means it takes on the role

00:07:47,039 --> 00:07:50,879
of a big

00:07:47,599 --> 00:07:52,000
mp3 librarian and when we connect to our

00:07:50,879 --> 00:07:54,479
napster server

00:07:52,000 --> 00:07:55,360
we register a list of all of the mp3

00:07:54,479 --> 00:07:57,599
files

00:07:55,360 --> 00:07:58,479
on our hard drive which the server plops

00:07:57,599 --> 00:08:01,199
a record of

00:07:58,479 --> 00:08:02,080
into that index server details on the

00:08:01,199 --> 00:08:04,240
specific

00:08:02,080 --> 00:08:05,120
implementation are hazy but i would

00:08:04,240 --> 00:08:08,639
imagine

00:08:05,120 --> 00:08:08,639
it was probably a big database

00:08:08,800 --> 00:08:12,000
and so when a user runs a search for a

00:08:10,560 --> 00:08:14,000
certain file

00:08:12,000 --> 00:08:16,400
the napster server queries the index

00:08:14,000 --> 00:08:18,479
server to see if there are any matches

00:08:16,400 --> 00:08:20,240
and if there are it returns a big list

00:08:18,479 --> 00:08:22,400
of all the users it found

00:08:20,240 --> 00:08:24,160
and inside this list will be the details

00:08:22,400 --> 00:08:27,599
needed to connect to the user

00:08:24,160 --> 00:08:30,160
who had the file that you wanted

00:08:27,599 --> 00:08:30,879
allowing you to then initiate a direct

00:08:30,160 --> 00:08:34,399
transfer

00:08:30,879 --> 00:08:34,880
with them and then finally to get the

00:08:34,399 --> 00:08:38,719
file

00:08:34,880 --> 00:08:39,039
you were after so actually implementing

00:08:38,719 --> 00:08:40,959
this

00:08:39,039 --> 00:08:42,000
is once again a very similar pattern to

00:08:40,959 --> 00:08:42,800
what we've already seen a couple of

00:08:42,000 --> 00:08:46,240
times now

00:08:42,800 --> 00:08:47,760
an internet socket using tcp we set up a

00:08:46,240 --> 00:08:48,560
little data class that would have the

00:08:47,760 --> 00:08:50,399
file name

00:08:48,560 --> 00:08:53,120
ip of the server with the file and the

00:08:50,399 --> 00:08:53,680
port and we set up a little acknowledge

00:08:53,120 --> 00:08:55,680
function

00:08:53,680 --> 00:08:57,680
which reads a single byte and returns a

00:08:55,680 --> 00:08:58,160
boolean as to whether it was a string of

00:08:57,680 --> 00:09:00,800
one

00:08:58,160 --> 00:09:02,399
which we'll use in just a second then we

00:09:00,800 --> 00:09:04,320
set up a socket again

00:09:02,399 --> 00:09:06,640
we connect to the p who has the file we

00:09:04,320 --> 00:09:08,240
want to download

00:09:06,640 --> 00:09:10,080
we acknowledge that the first byte we

00:09:08,240 --> 00:09:11,760
receive is that one which is like our

00:09:10,080 --> 00:09:13,440
little secret message

00:09:11,760 --> 00:09:15,600
then we ask for the file name that we

00:09:13,440 --> 00:09:19,920
want and then we download it

00:09:15,600 --> 00:09:21,839
in nice little 1024 byte chunks

00:09:19,920 --> 00:09:23,279
meanwhile the user we're trying to

00:09:21,839 --> 00:09:25,120
download the file from

00:09:23,279 --> 00:09:26,720
has got their own little tcp server

00:09:25,120 --> 00:09:28,399
running as well

00:09:26,720 --> 00:09:31,040
and in their handler that fires when a

00:09:28,399 --> 00:09:33,440
user connects they get a socket

00:09:31,040 --> 00:09:35,760
they send a single byte of one they

00:09:33,440 --> 00:09:38,800
receive the file name from the user

00:09:35,760 --> 00:09:42,640
and if they have the file they send it

00:09:38,800 --> 00:09:45,120
in nice 1024 byte chunks

00:09:42,640 --> 00:09:46,160
and again we haven't really written too

00:09:45,120 --> 00:09:48,320
much code today

00:09:46,160 --> 00:09:49,600
and while this certainly isn't

00:09:48,320 --> 00:09:52,160
production ready

00:09:49,600 --> 00:09:52,880
these are the same fundamental blocks

00:09:52,160 --> 00:09:55,839
for a

00:09:52,880 --> 00:09:57,200
genuine napster server and so i think we

00:09:55,839 --> 00:09:58,640
should run it

00:09:57,200 --> 00:09:59,920
and this is the bit i'm super nervous

00:09:58,640 --> 00:10:01,120
about because while i'm pretty sure i

00:09:59,920 --> 00:10:02,399
set my sound up and i don't want to

00:10:01,120 --> 00:10:06,000
spoil what's coming

00:10:02,399 --> 00:10:10,079
um i just hope i've set my sound up

00:10:06,000 --> 00:10:13,440
um so to see it in action

00:10:10,079 --> 00:10:15,440
i deployed my server to aws i set up a

00:10:13,440 --> 00:10:16,399
client with a shared mp3 on another

00:10:15,440 --> 00:10:17,680
computer

00:10:16,399 --> 00:10:19,519
and i can show you the client running

00:10:17,680 --> 00:10:21,360
from my computer

00:10:19,519 --> 00:10:22,880
ricky martin is copyright of course so i

00:10:21,360 --> 00:10:24,880
didn't want to tempt fate here

00:10:22,880 --> 00:10:26,959
instead i'm looking to download the

00:10:24,880 --> 00:10:29,680
distinctive and iconic mp3

00:10:26,959 --> 00:10:30,560
that came with all winamp installs the

00:10:29,680 --> 00:10:33,680
powerful

00:10:30,560 --> 00:10:34,640
llama whipping intro and after

00:10:33,680 --> 00:10:37,440
downloading it

00:10:34,640 --> 00:10:37,839
i can add the file to winamp and i can

00:10:37,440 --> 00:10:40,240
click

00:10:37,839 --> 00:10:40,240
play

00:10:42,079 --> 00:10:47,839
it really whips the llama's ass

00:10:50,720 --> 00:10:53,760
those five seconds are kind of my payoff

00:10:52,480 --> 00:10:56,880
for watching

00:10:53,760 --> 00:10:58,240
uh the rest of this talk um if you used

00:10:56,880 --> 00:11:00,560
winap back in the day

00:10:58,240 --> 00:11:02,560
hearing that is probably a concentrated

00:11:00,560 --> 00:11:05,519
blast of nostalgia

00:11:02,560 --> 00:11:08,800
if you did not that was probably a very

00:11:05,519 --> 00:11:08,800
confusing five seconds

00:11:08,959 --> 00:11:13,839
but with that we created our own little

00:11:11,519 --> 00:11:16,320
version of napster

00:11:13,839 --> 00:11:17,839
networking is such a fun and broad topic

00:11:16,320 --> 00:11:18,880
and while we only really scratch the

00:11:17,839 --> 00:11:20,720
surface today

00:11:18,880 --> 00:11:22,160
it's been so exciting for me to work on

00:11:20,720 --> 00:11:23,279
this and to have the opportunity to

00:11:22,160 --> 00:11:25,040
share it with you

00:11:23,279 --> 00:11:26,800
hopefully it's piqued your own interest

00:11:25,040 --> 00:11:28,959
a little bit into the sockets and

00:11:26,800 --> 00:11:30,480
protocols that underpin so much of our

00:11:28,959 --> 00:11:32,320
day-to-day lives

00:11:30,480 --> 00:11:33,680
i have the code and some resources for

00:11:32,320 --> 00:11:35,279
more information for anyone who is

00:11:33,680 --> 00:11:36,640
interested on my github

00:11:35,279 --> 00:11:38,320
and please feel free to drop me a

00:11:36,640 --> 00:11:39,440
message on twitter if you'd like to talk

00:11:38,320 --> 00:11:40,880
about this some more

00:11:39,440 --> 00:11:42,880
and i would just very quickly like to

00:11:40,880 --> 00:11:44,880
end by saying a special thank you for

00:11:42,880 --> 00:11:46,240
all of the amazing organizers

00:11:44,880 --> 00:11:48,160
for putting together this wonderful

00:11:46,240 --> 00:11:50,320
conference which always feels

00:11:48,160 --> 00:11:51,760
like such an inviting and comfortable

00:11:50,320 --> 00:11:54,880
space to be in

00:11:51,760 --> 00:11:54,880

YouTube URL: https://www.youtube.com/watch?v=VqhEFIEAM8Q


