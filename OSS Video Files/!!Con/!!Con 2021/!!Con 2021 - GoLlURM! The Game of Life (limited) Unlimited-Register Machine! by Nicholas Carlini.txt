Title: !!Con 2021 - GoLlURM! The Game of Life (limited) Unlimited-Register Machine! by Nicholas Carlini
Publication date: 2021-07-06
Playlist: !!Con 2021
Description: 
	GoLlURM! The Game of Life (limited) Unlimited-Register Machine! by Nicholas Carlini

In this talk I introduce the Game of Life (limited) Unlimited-Register Machine (GoLlURM), a powerful 3-instruction CPU with instructions such as INC, DEC, and JUMP_IF_ZERO. GoLlURM is built entirely on top of Conway’s Game of Life (with gliders!), making it the world’s most cross-platform CPU ever developed.

This amazing computation engine manages an impressive FIVE HERTZ of performance (* requires a latest-generation overclocked 4.5GHz CPU). Some may say that this factor-of-a-billion reduction in performance will limit its utility to giving sarcastic talks on the Internet. I would agree.

Nicholas is, by day, employed as research scientist at a large search engine company in the hope that he will produce new and useful research. He also does this by night as well, but disregards the qualifier “useful”.
Captions: 
	00:00:13,120 --> 00:00:16,240
so

00:00:13,840 --> 00:00:17,199
yeah i'm going to talk about the game of

00:00:16,240 --> 00:00:19,600
life limited

00:00:17,199 --> 00:00:20,720
unlimited register machine this is

00:00:19,600 --> 00:00:21,359
something that i've been working on for

00:00:20,720 --> 00:00:24,880
a while

00:00:21,359 --> 00:00:27,119
that i'm really excited to talk about

00:00:24,880 --> 00:00:29,439
so maybe to get started with a little

00:00:27,119 --> 00:00:32,160
bit of a weird question

00:00:29,439 --> 00:00:33,280
what is a computer and this is a little

00:00:32,160 --> 00:00:34,320
bit weird

00:00:33,280 --> 00:00:36,480
because you know there's lots of

00:00:34,320 --> 00:00:38,640
different definitions of computers and

00:00:36,480 --> 00:00:40,480
for this talk i'm going to exclusively

00:00:38,640 --> 00:00:42,719
think about computers

00:00:40,480 --> 00:00:45,039
just as a collection of digital logic

00:00:42,719 --> 00:00:46,559
gates in some interesting configuration

00:00:45,039 --> 00:00:49,360
this here's a schematic for an intel

00:00:46,559 --> 00:00:50,960
4004 it's one of the first microchips

00:00:49,360 --> 00:00:53,280
that was produced

00:00:50,960 --> 00:00:55,280
and really all they are is just a

00:00:53,280 --> 00:00:58,399
collection of digital logic gates

00:00:55,280 --> 00:00:59,359
and so for example we can have here just

00:00:58,399 --> 00:01:00,719
an and gate

00:00:59,359 --> 00:01:03,359
you all have probably seen this at some

00:01:00,719 --> 00:01:04,799
point in the past all in and gate is

00:01:03,359 --> 00:01:06,640
it's just a function that takes two

00:01:04,799 --> 00:01:09,760
inputs and returns one output

00:01:06,640 --> 00:01:11,439
um if neither of the inputs or if both

00:01:09,760 --> 00:01:12,000
of the inputs are one then the output is

00:01:11,439 --> 00:01:14,240
one

00:01:12,000 --> 00:01:15,680
otherwise the output is zero so only in

00:01:14,240 --> 00:01:16,880
the configuration one one do you get

00:01:15,680 --> 00:01:18,560
output one

00:01:16,880 --> 00:01:20,159
there are lots of other logic gates but

00:01:18,560 --> 00:01:22,560
maybe one that's interesting to consider

00:01:20,159 --> 00:01:24,479
for a moment there's also the not gate

00:01:22,560 --> 00:01:26,240
it goes from an input of zero to an

00:01:24,479 --> 00:01:27,040
output of one and an input of 1 to an

00:01:26,240 --> 00:01:30,079
output of 0.

00:01:27,040 --> 00:01:31,759
so it just inverts the input okay

00:01:30,079 --> 00:01:33,600
and really like i promise that is all

00:01:31,759 --> 00:01:34,320
there is to developing these complicated

00:01:33,600 --> 00:01:35,520
circuits

00:01:34,320 --> 00:01:37,520
and gates and not gates can do

00:01:35,520 --> 00:01:41,680
everything

00:01:37,520 --> 00:01:42,799
okay now most computers today are built

00:01:41,680 --> 00:01:44,799
with something like

00:01:42,799 --> 00:01:46,079
you know billions of transistors even

00:01:44,799 --> 00:01:46,880
there are some that are like bordering

00:01:46,079 --> 00:01:48,720
on trillions

00:01:46,880 --> 00:01:50,640
but the smallest recognizable computer

00:01:48,720 --> 00:01:52,399
that uses as few transistors as possible

00:01:50,640 --> 00:01:54,000
two of these logic gates is possible

00:01:52,399 --> 00:01:55,920
is probably the unlimited register

00:01:54,000 --> 00:01:57,119
machine and the way this works

00:01:55,920 --> 00:01:59,360
is it's a computer with three

00:01:57,119 --> 00:02:01,200
instructions you can increment

00:01:59,360 --> 00:02:03,040
a value started a register you can

00:02:01,200 --> 00:02:04,960
decrement a value stored at a register

00:02:03,040 --> 00:02:06,960
or you can test if a register is equal

00:02:04,960 --> 00:02:08,479
to zero and if it's not equal to zero

00:02:06,960 --> 00:02:10,319
jump to a given address

00:02:08,479 --> 00:02:12,080
there's only three things you can do but

00:02:10,319 --> 00:02:15,440
it turns out this is enough to perform

00:02:12,080 --> 00:02:16,959
arbitrary turn complete computation

00:02:15,440 --> 00:02:20,080
okay hold on to that thought for a

00:02:16,959 --> 00:02:22,720
minute we'll come back to that

00:02:20,080 --> 00:02:23,680
this is conway's game of life um kami's

00:02:22,720 --> 00:02:26,160
game of life

00:02:23,680 --> 00:02:27,360
is a two-dimensional cellular automata

00:02:26,160 --> 00:02:28,560
it's this thing with the glider that

00:02:27,360 --> 00:02:29,280
moves across the screen if you've seen

00:02:28,560 --> 00:02:30,959
it before

00:02:29,280 --> 00:02:32,720
and the way it works is very simple you

00:02:30,959 --> 00:02:34,480
have a series of

00:02:32,720 --> 00:02:36,160
what are called generations and in each

00:02:34,480 --> 00:02:37,680
generation you have every cell is either

00:02:36,160 --> 00:02:41,040
alive or dead

00:02:37,680 --> 00:02:42,319
a cell becomes alive if it has exactly

00:02:41,040 --> 00:02:43,840
three neighbors this one has three

00:02:42,319 --> 00:02:45,360
neighbors so this cell will become alive

00:02:43,840 --> 00:02:46,879
at the next generation

00:02:45,360 --> 00:02:48,959
this one has five and so it will not

00:02:46,879 --> 00:02:51,200
become alive on the other hand

00:02:48,959 --> 00:02:52,640
a cell that is currently alive gets to

00:02:51,200 --> 00:02:53,760
stay alive if it has two or three

00:02:52,640 --> 00:02:55,280
neighbors

00:02:53,760 --> 00:02:57,440
this one has three neighbors so it gets

00:02:55,280 --> 00:02:58,800
to stay alive so we should expect that

00:02:57,440 --> 00:03:00,319
the next generation we will have the

00:02:58,800 --> 00:03:00,959
sequence alive there alive for these

00:03:00,319 --> 00:03:03,920
three middle

00:03:00,959 --> 00:03:04,879
um cells and that's exactly what we get

00:03:03,920 --> 00:03:06,879
and we're going to do this

00:03:04,879 --> 00:03:07,840
for every single cell in the entire

00:03:06,879 --> 00:03:10,480
thing and we're going to go through as

00:03:07,840 --> 00:03:12,080
many generations as we want

00:03:10,480 --> 00:03:14,000
okay so that's commonly game of life

00:03:12,080 --> 00:03:15,680
what can you do with it here's maybe one

00:03:14,000 --> 00:03:17,200
of the most famous um configurations

00:03:15,680 --> 00:03:18,800
this is called the glider gun

00:03:17,200 --> 00:03:20,159
it creates these glider patterns going

00:03:18,800 --> 00:03:23,440
down to the right relatively

00:03:20,159 --> 00:03:25,840
continuously for as long as you want

00:03:23,440 --> 00:03:27,280
okay this seems pretty you know

00:03:25,840 --> 00:03:29,519
interesting to see but like what's the

00:03:27,280 --> 00:03:31,599
what the purpose of this well you can do

00:03:29,519 --> 00:03:33,280
not only that but you can also make it

00:03:31,599 --> 00:03:35,599
go horizontally this is called a

00:03:33,280 --> 00:03:36,400
spaceship instead of just going down to

00:03:35,599 --> 00:03:37,440
the right you can make it

00:03:36,400 --> 00:03:38,720
horizontal you can make them go

00:03:37,440 --> 00:03:40,480
vertically if you rotate the spaceship

00:03:38,720 --> 00:03:42,560
the other way around

00:03:40,480 --> 00:03:44,799
okay so where am i going with this well

00:03:42,560 --> 00:03:46,959
let's consider what happens

00:03:44,799 --> 00:03:48,480
if we have a glider that runs into a

00:03:46,959 --> 00:03:50,400
spaceship

00:03:48,480 --> 00:03:51,599
normally and you know they just hit each

00:03:50,400 --> 00:03:53,680
other and then they go

00:03:51,599 --> 00:03:55,680
they both go away but if we have another

00:03:53,680 --> 00:03:57,920
spaceship coming in from the bottom

00:03:55,680 --> 00:03:59,360
this spaceship hits the glider first and

00:03:57,920 --> 00:04:00,239
then the other spaceship coming in from

00:03:59,360 --> 00:04:04,959
the left gets to

00:04:00,239 --> 00:04:07,040
continue on to the right okay

00:04:04,959 --> 00:04:08,720
wait a second that sounds remarkably

00:04:07,040 --> 00:04:10,799
similar to an and gate

00:04:08,720 --> 00:04:12,080
where only if both patterns are present

00:04:10,799 --> 00:04:13,040
is the one the spaceship

00:04:12,080 --> 00:04:16,400
coming from the left allowed to go

00:04:13,040 --> 00:04:19,519
through to the right and in fact it is

00:04:16,400 --> 00:04:20,959
so i mean can we do a not gate also okay

00:04:19,519 --> 00:04:21,759
here's a not gate there's no input on

00:04:20,959 --> 00:04:23,680
the left

00:04:21,759 --> 00:04:25,600
and there's an output on the right we

00:04:23,680 --> 00:04:28,160
send an input in from the left

00:04:25,600 --> 00:04:29,759
and after a short propagation delay we

00:04:28,160 --> 00:04:30,960
end up with this glider stream colliding

00:04:29,759 --> 00:04:32,720
with the output and now there's no

00:04:30,960 --> 00:04:34,720
output on the right

00:04:32,720 --> 00:04:36,320
and so we have again input on the left

00:04:34,720 --> 00:04:38,320
now i'll put on the right

00:04:36,320 --> 00:04:40,240
which seems you know very similar to

00:04:38,320 --> 00:04:41,680
exactly this sort of knot configuration

00:04:40,240 --> 00:04:43,120
we want

00:04:41,680 --> 00:04:44,560
and i said there was this sort of

00:04:43,120 --> 00:04:46,000
theorem that if you have enough and and

00:04:44,560 --> 00:04:49,360
not gates

00:04:46,000 --> 00:04:51,199
you can build anything you want and

00:04:49,360 --> 00:04:52,880
in particular you could build an

00:04:51,199 --> 00:04:54,000
unlimited registered machine

00:04:52,880 --> 00:04:55,680
and you know you have to limit it

00:04:54,000 --> 00:04:56,160
because you know computers in reality

00:04:55,680 --> 00:04:58,960
aren't

00:04:56,160 --> 00:05:00,479
infinite size but let's go with that

00:04:58,960 --> 00:05:01,759
okay so what do you need for a computer

00:05:00,479 --> 00:05:02,639
well i mean if you ask some people

00:05:01,759 --> 00:05:04,240
they'll tell you the first thing you

00:05:02,639 --> 00:05:05,600
need is a clock

00:05:04,240 --> 00:05:07,520
a clock you know if you're an electrical

00:05:05,600 --> 00:05:09,680
engineer means you're going to oscillate

00:05:07,520 --> 00:05:11,680
some crystal at some high frequency but

00:05:09,680 --> 00:05:12,960
we're in the game of life so we don't

00:05:11,680 --> 00:05:14,800
need to worry about physics

00:05:12,960 --> 00:05:16,880
we can just connect to not gate unto

00:05:14,800 --> 00:05:18,000
itself and like all of the electrical

00:05:16,880 --> 00:05:18,720
engineers out there are going to be

00:05:18,000 --> 00:05:20,080
screaming

00:05:18,720 --> 00:05:21,680
saying like you know where is the power

00:05:20,080 --> 00:05:22,639
coming from you can't just like you know

00:05:21,680 --> 00:05:24,880
make a thing connect

00:05:22,639 --> 00:05:26,320
to itself but like this is a simulation

00:05:24,880 --> 00:05:27,759
in the game of life we can do whatever

00:05:26,320 --> 00:05:30,080
we want

00:05:27,759 --> 00:05:31,120
so here it is this is a not gate

00:05:30,080 --> 00:05:32,400
connected onto itself

00:05:31,120 --> 00:05:34,240
you know you have to rotate the stream

00:05:32,400 --> 00:05:35,120
accordingly because gliders don't bend

00:05:34,240 --> 00:05:37,039
you can't just

00:05:35,120 --> 00:05:38,639
curve a trace and what you end up with

00:05:37,039 --> 00:05:41,199
is this very nice pattern

00:05:38,639 --> 00:05:42,960
where it will cycle on and off and on

00:05:41,199 --> 00:05:44,240
and off essentially forever

00:05:42,960 --> 00:05:45,600
eventually i'll have to move on to the

00:05:44,240 --> 00:05:47,919
next slide but it will just do this as

00:05:45,600 --> 00:05:50,400
long as we ask it to

00:05:47,919 --> 00:05:52,560
okay so there's a clock now we need

00:05:50,400 --> 00:05:54,400
memory some way to store data for

00:05:52,560 --> 00:05:55,759
for sort of a time to retrieve it later

00:05:54,400 --> 00:05:57,759
in the future

00:05:55,759 --> 00:05:58,960
so here's our memory cell by default

00:05:57,759 --> 00:06:00,880
doesn't do anything interesting

00:05:58,960 --> 00:06:02,240
it's an or gate and a not gate connected

00:06:00,880 --> 00:06:04,080
into each other but if you have input

00:06:02,240 --> 00:06:06,319
that comes in from the upper left

00:06:04,080 --> 00:06:07,520
then you set this glide these gliders

00:06:06,319 --> 00:06:09,199
going in this loop

00:06:07,520 --> 00:06:10,560
even after the input is gone the gliders

00:06:09,199 --> 00:06:11,680
are still looping here

00:06:10,560 --> 00:06:13,919
and if you send something in from the

00:06:11,680 --> 00:06:16,160
bottom left then it clears it out

00:06:13,919 --> 00:06:17,680
and makes this now have the empty state

00:06:16,160 --> 00:06:18,880
and it stays empty

00:06:17,680 --> 00:06:21,039
and it's just going to continue in this

00:06:18,880 --> 00:06:22,800
empty pattern until eventually

00:06:21,039 --> 00:06:26,000
from the upper left again we're going to

00:06:22,800 --> 00:06:27,360
have this new glider stream come on in

00:06:26,000 --> 00:06:29,199
and the glider stream will come from the

00:06:27,360 --> 00:06:31,680
upper left and reset this gate back

00:06:29,199 --> 00:06:33,440
in and now we'll continue looping and

00:06:31,680 --> 00:06:34,720
have this one until eventually later we

00:06:33,440 --> 00:06:37,759
have another zero coming in from the

00:06:34,720 --> 00:06:40,400
left from the lower left

00:06:37,759 --> 00:06:41,680
okay so there's our memory now we need

00:06:40,400 --> 00:06:43,120
some way to do arithmetic and this is

00:06:41,680 --> 00:06:44,000
like the third piece of a computer you

00:06:43,120 --> 00:06:45,520
need to build

00:06:44,000 --> 00:06:47,520
at a regularly scheduled interval store

00:06:45,520 --> 00:06:52,639
and load data

00:06:47,520 --> 00:06:53,520
so here is our arithmetic function

00:06:52,639 --> 00:06:55,599
what it's going to do is it's going to

00:06:53,520 --> 00:06:56,720
add 1. so we have 0 on the left add to 1

00:06:55,599 --> 00:06:58,800
we have 1 to 2

00:06:56,720 --> 00:07:00,800
this is counting in binary we're going 2

00:06:58,800 --> 00:07:02,000
to 3 and this is just a very simple

00:07:00,800 --> 00:07:04,639
circuit construction that's going

00:07:02,000 --> 00:07:05,280
to add two three plus one is four so

00:07:04,639 --> 00:07:07,280
we're having

00:07:05,280 --> 00:07:08,880
now we're going four plus one is five

00:07:07,280 --> 00:07:09,360
and this will just count up as long as

00:07:08,880 --> 00:07:10,960
we want

00:07:09,360 --> 00:07:12,400
so this is a very simple arithmetic

00:07:10,960 --> 00:07:14,000
circuit which

00:07:12,400 --> 00:07:15,520
for the unlimited register machine is

00:07:14,000 --> 00:07:17,360
all that we need we need only the

00:07:15,520 --> 00:07:19,759
increment decrement is also very simple

00:07:17,360 --> 00:07:21,680
once you have increment

00:07:19,759 --> 00:07:22,720
okay then it turns out you know there

00:07:21,680 --> 00:07:23,599
are lots of other things that you have

00:07:22,720 --> 00:07:24,800
to build but

00:07:23,599 --> 00:07:27,599
unfortunately we don't really don't have

00:07:24,800 --> 00:07:30,240
time for those in this talk

00:07:27,599 --> 00:07:31,280
so this is everything that we need for a

00:07:30,240 --> 00:07:35,039
computer

00:07:31,280 --> 00:07:36,560
so here one is this is

00:07:35,039 --> 00:07:38,720
the unlimited register machine

00:07:36,560 --> 00:07:39,840
implemented on the game of life

00:07:38,720 --> 00:07:42,840
i'm going to pause here for a second

00:07:39,840 --> 00:07:45,840
because i think it's just nice to watch

00:07:42,840 --> 00:07:45,840
it

00:07:48,479 --> 00:07:53,120
okay so the way that it works is

00:07:51,599 --> 00:07:54,319
in the upper left here we have our clock

00:07:53,120 --> 00:07:55,520
this is what counts just to not get

00:07:54,319 --> 00:07:58,240
connected to itself

00:07:55,520 --> 00:08:00,080
at the top we have 16 4-bit registers

00:07:58,240 --> 00:08:01,680
each register can be four bits

00:08:00,080 --> 00:08:02,879
we then have an alu over on the right

00:08:01,680 --> 00:08:03,680
this is what does the incrementer

00:08:02,879 --> 00:08:05,039
decrement

00:08:03,680 --> 00:08:07,039
we have a program counter to keep track

00:08:05,039 --> 00:08:09,680
of where we are a seven segment display

00:08:07,039 --> 00:08:11,360
decoder to send some output to the right

00:08:09,680 --> 00:08:12,879
we have the program rom this is the code

00:08:11,360 --> 00:08:13,919
that we actually implement there's the

00:08:12,879 --> 00:08:14,879
instructions we're going to run on the

00:08:13,919 --> 00:08:17,520
bottom

00:08:14,879 --> 00:08:18,879
and because i wanted to we have a two

00:08:17,520 --> 00:08:21,039
two stage pipeline

00:08:18,879 --> 00:08:22,720
so this computer can actually fetch and

00:08:21,039 --> 00:08:23,759
execute two instructions at the same

00:08:22,720 --> 00:08:27,039
time

00:08:23,759 --> 00:08:28,080
this makes it twice as fast here we're

00:08:27,039 --> 00:08:28,720
going to do we're going to write a

00:08:28,080 --> 00:08:32,640
program

00:08:28,720 --> 00:08:34,320
in order to factor the number 15.

00:08:32,640 --> 00:08:35,599
so why are we going to factor 15 well

00:08:34,320 --> 00:08:37,120
because i think that's just a sort of a

00:08:35,599 --> 00:08:39,120
fun thing to do

00:08:37,120 --> 00:08:40,399
this is the instructions you would need

00:08:39,120 --> 00:08:42,959
in order to do that

00:08:40,399 --> 00:08:44,800
and um so we run it it would take

00:08:42,959 --> 00:08:46,560
actually quite some time to run

00:08:44,800 --> 00:08:48,640
so let me just skip towards near the end

00:08:46,560 --> 00:08:49,279
and let me just let it go i've sped it

00:08:48,640 --> 00:08:55,839
up a little while

00:08:49,279 --> 00:08:55,839
using hash life and letting it run

00:08:56,320 --> 00:09:00,320
and it tells me the answer is that 15 is

00:08:58,640 --> 00:09:04,000
equal to three times five

00:09:00,320 --> 00:09:06,000
which it is and so if you look up

00:09:04,000 --> 00:09:08,000
you know from the news you know you find

00:09:06,000 --> 00:09:12,240
that like the best quantum computers

00:09:08,000 --> 00:09:14,320
from 2012 could almost always maybe a 50

00:09:12,240 --> 00:09:15,760
probability calculate that 15 was equal

00:09:14,320 --> 00:09:17,680
to 3 times 5.

00:09:15,760 --> 00:09:18,880
and you know i've just introduced a

00:09:17,680 --> 00:09:21,839
computer here

00:09:18,880 --> 00:09:23,680
that's able to do exactly the same thing

00:09:21,839 --> 00:09:26,480
with 100 accuracy

00:09:23,680 --> 00:09:27,120
so i'm not exactly saying that the game

00:09:26,480 --> 00:09:28,800
of life

00:09:27,120 --> 00:09:30,160
unlimited register machine is going to

00:09:28,800 --> 00:09:31,920
beat quantum computers

00:09:30,160 --> 00:09:33,440
um at their own game in the next decade

00:09:31,920 --> 00:09:35,040
but you know i think the evidence is

00:09:33,440 --> 00:09:36,399
probably pretty compelling here

00:09:35,040 --> 00:09:40,080
so thank you very much and happy to take

00:09:36,399 --> 00:09:40,080

YouTube URL: https://www.youtube.com/watch?v=9aF7oKz-frE


