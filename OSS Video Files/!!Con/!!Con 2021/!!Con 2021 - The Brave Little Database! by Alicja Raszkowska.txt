Title: !!Con 2021 - The Brave Little Database! by Alicja Raszkowska
Publication date: 2021-07-06
Playlist: !!Con 2021
Description: 
	The Brave Little Database! by Alicja Raszkowska

This is a story about the adventures of the Brave Little Database, who tirelessly handles incoming requests, indexes tables, manages its buffer pool, and works together with its replicas and a proxy server to deliver the best service it can. Weâ€™re going to accompany the hero as it tackles obstacles and learns to be more resilient.

Alicja likes to learn by drawing things. They work on all things infrastructure and have a soft spot for data stores and metrics. Outside of tech, Alicja tirelessly covers everything in yarn and plays ukulele.
Captions: 
	00:00:13,200 --> 00:00:17,680
long time no see

00:00:15,120 --> 00:00:20,000
so as you heard from the intro i really

00:00:17,680 --> 00:00:21,840
really like databases and data stores

00:00:20,000 --> 00:00:24,400
and one of the things that i find

00:00:21,840 --> 00:00:27,599
helpful in my daily job as a devops

00:00:24,400 --> 00:00:29,199
sre whatever you call it is imagining

00:00:27,599 --> 00:00:31,359
those elements and infrastructure that

00:00:29,199 --> 00:00:33,120
i'm taking care of as little characters

00:00:31,359 --> 00:00:34,559
because then i can communicate with them

00:00:33,120 --> 00:00:36,239
and i can care about them

00:00:34,559 --> 00:00:38,000
and i can actually think about their

00:00:36,239 --> 00:00:38,719
journey and i wanted to share that

00:00:38,000 --> 00:00:41,200
journey

00:00:38,719 --> 00:00:43,040
of a little database with you today

00:00:41,200 --> 00:00:45,200
before we dig into it i wanted to

00:00:43,040 --> 00:00:48,480
present our hero

00:00:45,200 --> 00:00:49,600
and other personas that are going to

00:00:48,480 --> 00:00:51,680
appear in this talk

00:00:49,600 --> 00:00:53,840
um partially because i think it's cute

00:00:51,680 --> 00:00:55,520
but also because my drawings are maybe

00:00:53,840 --> 00:00:56,640
not that great so you might not be able

00:00:55,520 --> 00:00:58,960
to recognize them

00:00:56,640 --> 00:00:59,680
so the little database is now our main

00:00:58,960 --> 00:01:02,079
hero

00:00:59,680 --> 00:01:03,359
on the journey it's working with the app

00:01:02,079 --> 00:01:05,519
who is evolving

00:01:03,359 --> 00:01:07,520
and growing and it's getting some

00:01:05,519 --> 00:01:08,159
replicas it's meeting orchestrators to

00:01:07,520 --> 00:01:11,200
help out

00:01:08,159 --> 00:01:13,520
with with the increased growth and

00:01:11,200 --> 00:01:15,680
traffic coming from the app and it also

00:01:13,520 --> 00:01:16,240
gets to me proxy's equal because at some

00:01:15,680 --> 00:01:18,799
point

00:01:16,240 --> 00:01:19,520
it's just not enough to have replicas so

00:01:18,799 --> 00:01:22,560
join me

00:01:19,520 --> 00:01:26,000
on the journey the lone

00:01:22,560 --> 00:01:27,759
hero in not so far in distant land

00:01:26,000 --> 00:01:29,759
an app prepares to handle brand new

00:01:27,759 --> 00:01:32,640
traffic for the brand new day

00:01:29,759 --> 00:01:33,920
it's monday morning who can say how many

00:01:32,640 --> 00:01:36,880
users will there be

00:01:33,920 --> 00:01:38,400
app is impatient to wait and see the

00:01:36,880 --> 00:01:41,119
first login request comes

00:01:38,400 --> 00:01:42,320
in username password always an occult

00:01:41,119 --> 00:01:44,159
backend api

00:01:42,320 --> 00:01:45,840
now app can try to verify if the

00:01:44,159 --> 00:01:48,240
connection can be placed

00:01:45,840 --> 00:01:50,320
sends to the little database the

00:01:48,240 --> 00:01:52,240
database opens one eye

00:01:50,320 --> 00:01:54,399
a new request comes through the wire

00:01:52,240 --> 00:01:56,320
excited reads the message quick

00:01:54,399 --> 00:01:57,840
the sql query does the trick it sends a

00:01:56,320 --> 00:02:00,399
response right away

00:01:57,840 --> 00:02:00,880
the user cannot start their day as

00:02:00,399 --> 00:02:03,680
morning

00:02:00,880 --> 00:02:05,040
travels coast to coast the app has more

00:02:03,680 --> 00:02:07,520
and more to post

00:02:05,040 --> 00:02:08,800
the db works with all its might ensuring

00:02:07,520 --> 00:02:10,879
very acid rates

00:02:08,800 --> 00:02:13,120
while latency is kept down low so app

00:02:10,879 --> 00:02:15,840
can work with even flow

00:02:13,120 --> 00:02:17,840
it indexes its every table to make sure

00:02:15,840 --> 00:02:18,480
that it is able to answer any query

00:02:17,840 --> 00:02:21,599
quick

00:02:18,480 --> 00:02:23,280
a between is a neat neat new trick is

00:02:21,599 --> 00:02:25,200
learned from theory of graphs

00:02:23,280 --> 00:02:26,560
it goes ahead and always grabs primary

00:02:25,200 --> 00:02:28,480
index for its store

00:02:26,560 --> 00:02:30,080
then uses it to compare the whole table

00:02:28,480 --> 00:02:32,800
space traversing through

00:02:30,080 --> 00:02:34,160
only the most relevant of roots it also

00:02:32,800 --> 00:02:35,760
tries to use the ram

00:02:34,160 --> 00:02:37,440
to make sure it can quickly scan the

00:02:35,760 --> 00:02:39,200
most popular of the requests

00:02:37,440 --> 00:02:40,640
whenever then the app in quest with a

00:02:39,200 --> 00:02:42,480
repeated query pattern

00:02:40,640 --> 00:02:44,080
it can response get from the buffer

00:02:42,480 --> 00:02:46,640
instead of reading from the disk

00:02:44,080 --> 00:02:47,760
it's how it keeps itself so brisk as day

00:02:46,640 --> 00:02:50,640
goes by the

00:02:47,760 --> 00:02:51,760
buffer pool gets significantly less cool

00:02:50,640 --> 00:02:53,680
decreasing miss rates

00:02:51,760 --> 00:02:54,800
as it goes improving speed of data

00:02:53,680 --> 00:02:57,680
stores

00:02:54,800 --> 00:02:58,959
suddenly the traffic spikes the app has

00:02:57,680 --> 00:03:00,319
gotten many likes and shares from

00:02:58,959 --> 00:03:02,720
influential folk

00:03:00,319 --> 00:03:04,319
now many people want to poke and use the

00:03:02,720 --> 00:03:06,959
app in their new flow

00:03:04,319 --> 00:03:08,959
things are starting to get slow the

00:03:06,959 --> 00:03:09,680
database can barely run the queries

00:03:08,959 --> 00:03:12,720
coming in

00:03:09,680 --> 00:03:14,879
it slammed as apple's scaling to respond

00:03:12,720 --> 00:03:16,959
two new instances get spawned more

00:03:14,879 --> 00:03:19,760
connections are flowing in

00:03:16,959 --> 00:03:21,760
the little db strives to breathe and in

00:03:19,760 --> 00:03:24,159
this pair it tries to cram

00:03:21,760 --> 00:03:25,440
all the new threads into its ram unless

00:03:24,159 --> 00:03:28,080
the instance type it's on

00:03:25,440 --> 00:03:29,280
only has so much ram in store a new

00:03:28,080 --> 00:03:33,760
connection comes and

00:03:29,280 --> 00:03:37,840
dooms our little hero to an um

00:03:33,760 --> 00:03:38,959
they crash as app is trying to serve its

00:03:37,840 --> 00:03:41,599
pages

00:03:38,959 --> 00:03:43,360
it seems like it is taking ages what's

00:03:41,599 --> 00:03:46,159
the cause of this delay

00:03:43,360 --> 00:03:48,000
database server has gone away the app

00:03:46,159 --> 00:03:50,640
starts sending hundred fives

00:03:48,000 --> 00:03:52,560
waiting for data store to come online

00:03:50,640 --> 00:03:54,239
the db was able to reboot

00:03:52,560 --> 00:03:55,920
it seems the failure was pretty acute

00:03:54,239 --> 00:03:58,720
alas what is this

00:03:55,920 --> 00:03:59,280
odd exception it can't handle a right

00:03:58,720 --> 00:04:01,280
connection

00:03:59,280 --> 00:04:02,799
it seems that after the reboot any

00:04:01,280 --> 00:04:05,360
rights are kind of nut

00:04:02,799 --> 00:04:07,680
the app throws errors left and right the

00:04:05,360 --> 00:04:10,560
user stuck without the right

00:04:07,680 --> 00:04:12,879
db remembers back in the day it has

00:04:10,560 --> 00:04:13,680
decided on a way to secure its data

00:04:12,879 --> 00:04:15,840
stash

00:04:13,680 --> 00:04:17,840
after a very sudden crash and to have

00:04:15,840 --> 00:04:18,400
some time to check that there isn't any

00:04:17,840 --> 00:04:21,040
rack

00:04:18,400 --> 00:04:22,800
it says read only on its store now it

00:04:21,040 --> 00:04:24,000
just needs to restore the proper config

00:04:22,800 --> 00:04:27,040
in its place

00:04:24,000 --> 00:04:28,960
the app no longer sees the trace finally

00:04:27,040 --> 00:04:31,440
it can do some rights it's going to be

00:04:28,960 --> 00:04:32,080
slow as it tries to handle all the dlh

00:04:31,440 --> 00:04:34,639
jobs

00:04:32,080 --> 00:04:36,240
after i failure the coming gods all the

00:04:34,639 --> 00:04:37,840
reports to generate all these

00:04:36,240 --> 00:04:39,759
subscriptions to activate

00:04:37,840 --> 00:04:41,280
all the indexing to dissipate all the

00:04:39,759 --> 00:04:43,759
values to calculate

00:04:41,280 --> 00:04:46,320
every thing has to propagate to make up

00:04:43,759 --> 00:04:48,800
for the time the app had to wait

00:04:46,320 --> 00:04:50,560
once all the jobs have been handled now

00:04:48,800 --> 00:04:52,479
it has time to finally untangle

00:04:50,560 --> 00:04:55,199
how to make sure the app can connect

00:04:52,479 --> 00:04:57,440
even when db is currently wrecked

00:04:55,199 --> 00:04:59,280
it looks in the mirror as it ponders in

00:04:57,440 --> 00:05:01,840
size

00:04:59,280 --> 00:05:02,400
what could it do if it suddenly tries to

00:05:01,840 --> 00:05:04,800
answer

00:05:02,400 --> 00:05:06,639
too many requests all at once ensuring

00:05:04,800 --> 00:05:09,039
that none of them bounce

00:05:06,639 --> 00:05:10,240
it would need a way to be still able to

00:05:09,039 --> 00:05:12,800
see what is happening

00:05:10,240 --> 00:05:13,840
and react to it too is there maybe a way

00:05:12,800 --> 00:05:17,120
it could start to be

00:05:13,840 --> 00:05:18,639
two if one instance drops the other

00:05:17,120 --> 00:05:21,680
steps in

00:05:18,639 --> 00:05:24,560
how could it get a hold of a twin

00:05:21,680 --> 00:05:26,320
mirror mirror on the wall can i make

00:05:24,560 --> 00:05:27,600
myself a clone

00:05:26,320 --> 00:05:29,759
it would need to be able to have

00:05:27,600 --> 00:05:31,600
conflict of mine but that's all in a

00:05:29,759 --> 00:05:33,440
source code so it should be just fine

00:05:31,600 --> 00:05:35,520
we can spin up an instance allocate all

00:05:33,440 --> 00:05:36,479
the ram make sure that it is ready for

00:05:35,520 --> 00:05:39,199
the bad

00:05:36,479 --> 00:05:40,560
if i'm jammed and then every time i read

00:05:39,199 --> 00:05:42,400
something in store

00:05:40,560 --> 00:05:44,400
it should always transcribe it words for

00:05:42,400 --> 00:05:46,000
word like it's lore

00:05:44,400 --> 00:05:48,560
it spins up to a new host with its

00:05:46,000 --> 00:05:50,000
configuration now all that is left is to

00:05:48,560 --> 00:05:52,240
set up replication

00:05:50,000 --> 00:05:54,560
creating a user and passwords for each

00:05:52,240 --> 00:05:57,440
so they can both primary easily reach

00:05:54,560 --> 00:05:59,280
and get access to bin logs or gtids

00:05:57,440 --> 00:06:00,160
replicating everything little database

00:05:59,280 --> 00:06:02,000
did

00:06:00,160 --> 00:06:03,919
it also wants to make sure failovers

00:06:02,000 --> 00:06:06,400
work to ensure that the app can get a

00:06:03,919 --> 00:06:09,360
network connection to a writable store

00:06:06,400 --> 00:06:10,880
orchestrator could help with this chore

00:06:09,360 --> 00:06:13,039
monitoring all instances

00:06:10,880 --> 00:06:15,520
making sure that a host can handle

00:06:13,039 --> 00:06:18,000
connections if the primary is toast

00:06:15,520 --> 00:06:19,680
it adds a new host into its vpc now

00:06:18,000 --> 00:06:22,319
orchestrator is all set up to see how

00:06:19,680 --> 00:06:24,000
the db is doing and reacting to queries

00:06:22,319 --> 00:06:26,400
how much is replication lagging behind

00:06:24,000 --> 00:06:28,160
primary is there need for a replica to

00:06:26,400 --> 00:06:30,639
come up to speed

00:06:28,160 --> 00:06:32,639
now that failovers work automatically

00:06:30,639 --> 00:06:33,360
the database is dramatically less

00:06:32,639 --> 00:06:35,840
worried about

00:06:33,360 --> 00:06:37,919
its resilience very proud of it so

00:06:35,840 --> 00:06:38,720
brilliance it looks forward to a traffic

00:06:37,919 --> 00:06:41,840
spike

00:06:38,720 --> 00:06:44,639
now it's unstoppable feels like

00:06:41,840 --> 00:06:45,360
but the traffic comes and source growing

00:06:44,639 --> 00:06:46,960
strong

00:06:45,360 --> 00:06:48,880
strong and even more and more

00:06:46,960 --> 00:06:50,880
connections from db

00:06:48,880 --> 00:06:52,960
failovers work yet it must decree it's

00:06:50,880 --> 00:06:56,319
not enough to keep reacting

00:06:52,960 --> 00:06:59,919
it must become more proactive even

00:06:56,319 --> 00:07:02,160
more growth as the user base

00:06:59,919 --> 00:07:04,160
of app still grows it seems that more

00:07:02,160 --> 00:07:06,479
and more inflows are coming through

00:07:04,160 --> 00:07:08,160
through from every angle while database

00:07:06,479 --> 00:07:09,120
can mostly handle connections that are

00:07:08,160 --> 00:07:11,599
flowing in

00:07:09,120 --> 00:07:12,160
and always fail over back to a twin it

00:07:11,599 --> 00:07:15,039
seems that

00:07:12,160 --> 00:07:16,960
it's just not enough when traffic spikes

00:07:15,039 --> 00:07:19,919
things still get rough

00:07:16,960 --> 00:07:21,759
it starts to ponder about resources

00:07:19,919 --> 00:07:23,599
could it potentially limit the sources

00:07:21,759 --> 00:07:25,120
of traffic to the data store

00:07:23,599 --> 00:07:27,280
with the same assets serve more

00:07:25,120 --> 00:07:30,560
connections and not topple over

00:07:27,280 --> 00:07:32,400
can the user needs easily cover

00:07:30,560 --> 00:07:34,560
the reads could all probably go to

00:07:32,400 --> 00:07:36,560
replicas log is kept so low

00:07:34,560 --> 00:07:38,479
and then the rights will what wary of

00:07:36,560 --> 00:07:40,160
has to be only the primary

00:07:38,479 --> 00:07:42,000
the connections can probably also be

00:07:40,160 --> 00:07:43,199
shared without the user experience

00:07:42,000 --> 00:07:46,080
impaired

00:07:43,199 --> 00:07:48,240
it needs to find a wise new friend to

00:07:46,080 --> 00:07:50,160
whom the app can always send requests

00:07:48,240 --> 00:07:52,240
and let that friend decide how is it

00:07:50,160 --> 00:07:54,319
going to then guide them to the database

00:07:52,240 --> 00:07:55,280
using multiplexing without a need for

00:07:54,319 --> 00:07:57,680
refusing

00:07:55,280 --> 00:07:58,400
any connections from the app who has the

00:07:57,680 --> 00:08:01,440
skills

00:07:58,400 --> 00:08:02,080
to bridge this gap orchestrator raises a

00:08:01,440 --> 00:08:04,479
hand

00:08:02,080 --> 00:08:06,160
it has a wise and helpful friend proxy

00:08:04,479 --> 00:08:08,400
sql can join the crew to handle

00:08:06,160 --> 00:08:10,800
connections and multiplex too

00:08:08,400 --> 00:08:12,479
assigning the replicas to a reader group

00:08:10,800 --> 00:08:14,879
allowing the database to recoup

00:08:12,479 --> 00:08:16,720
resources for writing to the store

00:08:14,879 --> 00:08:17,520
enabling the cluster to handle more

00:08:16,720 --> 00:08:20,560
requests

00:08:17,520 --> 00:08:22,720
and send responses quick add to it the

00:08:20,560 --> 00:08:23,919
multiplexing trick and now the app can

00:08:22,720 --> 00:08:28,479
grow and grow

00:08:23,919 --> 00:08:30,400
without the db getting slow epi load

00:08:28,479 --> 00:08:32,640
everything is running smoothly the

00:08:30,400 --> 00:08:34,640
database is absolutely thrilled with how

00:08:32,640 --> 00:08:36,640
well it responds the traffic spikes no

00:08:34,640 --> 00:08:39,279
longer spawned complex threads

00:08:36,640 --> 00:08:40,479
eating up all the ram now it's time to

00:08:39,279 --> 00:08:43,680
have some fun

00:08:40,479 --> 00:08:45,920
oh joy the app just got a new deploy

00:08:43,680 --> 00:08:47,200
new features for users to enjoy can't

00:08:45,920 --> 00:08:50,000
wait to get a search of

00:08:47,200 --> 00:08:50,880
data it's a glimpse of it from beta

00:08:50,000 --> 00:08:53,680
testing

00:08:50,880 --> 00:08:54,080
of the all new flaws it seems they only

00:08:53,680 --> 00:08:57,680
come

00:08:54,080 --> 00:09:00,480
they come up with only pros alas

00:08:57,680 --> 00:09:01,920
something's on this no requests coming

00:09:00,480 --> 00:09:04,560
deploy is misconfigured

00:09:01,920 --> 00:09:06,160
and the app has crashed the db threads

00:09:04,560 --> 00:09:08,399
are being slashed

00:09:06,160 --> 00:09:10,000
where are all the connections database

00:09:08,399 --> 00:09:12,480
has no directions

00:09:10,000 --> 00:09:13,040
it tries to calm down and not feel bad

00:09:12,480 --> 00:09:15,920
surely

00:09:13,040 --> 00:09:17,680
the app is coming back long seconds pass

00:09:15,920 --> 00:09:20,080
and silence looms

00:09:17,680 --> 00:09:20,959
nothing can stop the impending doom

00:09:20,080 --> 00:09:23,279
sudden

00:09:20,959 --> 00:09:24,959
it plops itself on the ground and then

00:09:23,279 --> 00:09:26,959
meekly looks around

00:09:24,959 --> 00:09:29,279
trying hard not to give in to sadness

00:09:26,959 --> 00:09:31,440
and crack it start singing a song for

00:09:29,279 --> 00:09:34,080
the app to come back

00:09:31,440 --> 00:09:36,240
it's there singing a song for the app to

00:09:34,080 --> 00:09:39,120
come back

00:09:36,240 --> 00:09:41,600
it starts singing a song for the app to

00:09:39,120 --> 00:09:41,600
come back

00:09:42,660 --> 00:09:51,839
[Music]

00:09:45,839 --> 00:09:51,839
do you want to store some data come on

00:09:54,050 --> 00:09:58,309
[Music]

00:09:58,800 --> 00:10:05,200
i wish you could tell me why

00:10:02,480 --> 00:10:08,399
do you want to start some data doesn't

00:10:05,200 --> 00:10:08,399
have to be your data

00:10:09,040 --> 00:10:11,839
okay bye

00:10:13,279 --> 00:10:19,440
do you want to store some data your

00:10:18,160 --> 00:10:22,640
queries are long already

00:10:19,440 --> 00:10:25,040
my buffer pages are no longer even hot

00:10:22,640 --> 00:10:26,320
it gets a little lonely all this idle

00:10:25,040 --> 00:10:29,920
round

00:10:26,320 --> 00:10:32,480
just watching the hours stick by

00:10:29,920 --> 00:10:33,820
do you wanna store some data it doesn't

00:10:32,480 --> 00:10:39,100
have to be your data

00:10:33,820 --> 00:10:39,100
[Music]

00:10:40,399 --> 00:10:45,360
please i know you're out there

00:10:43,930 --> 00:10:49,120
[Music]

00:10:45,360 --> 00:10:49,120
proxy's asking where you've been

00:10:49,519 --> 00:10:57,920
they say be ready and i'm trying to

00:10:52,640 --> 00:10:57,920
i'm right here for you send queries in

00:10:58,640 --> 00:11:05,680
we only have each other it's just

00:11:02,240 --> 00:11:09,600
you and me what

00:11:05,680 --> 00:11:09,600
are you gonna store

00:11:10,160 --> 00:11:15,839

YouTube URL: https://www.youtube.com/watch?v=ZIH7X6wmAL8


