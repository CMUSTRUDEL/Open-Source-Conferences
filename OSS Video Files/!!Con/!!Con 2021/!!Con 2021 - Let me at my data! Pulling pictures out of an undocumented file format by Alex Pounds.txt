Title: !!Con 2021 - Let me at my data! Pulling pictures out of an undocumented file format by Alex Pounds
Publication date: 2021-07-06
Playlist: !!Con 2021
Description: 
	Let me at my data! Pulling pictures out of an undocumented file format by Alex Pounds

RTS games have a concept called “fog of war”, where the map is hidden until your units explore it. For years I’ve used an app that brings that to the real world. I wanted to transform my unfogging data into wall art, but it’s a small indie app with no export function. Could I, a web developer who’s never reverse-engineered a binary format before, figure it out? I could! Kind of!

This is a detective story and a science story: a story of making guesses, figuring out how to test them, and piecing together the puzzle so I could generate my own images outside of the app.

Alex is a web developer and photographer who lives in Toronto, Canada. He’s particularly interested in social software and human-centred product design. When not coding for work he likes to code for fun, practice piano, and get out into nature. You can find out more about him at https://alexpounds.com/.
Captions: 
	00:00:13,679 --> 00:00:17,039
hello

00:00:14,559 --> 00:00:18,640
i'm alex i'm a web developer and today

00:00:17,039 --> 00:00:20,240
i'm going to tell you all about my first

00:00:18,640 --> 00:00:22,240
ever attempt at reverse engineering a

00:00:20,240 --> 00:00:23,600
data file

00:00:22,240 --> 00:00:25,119
if you've ever played a real-time

00:00:23,600 --> 00:00:26,880
strategy game you'll be familiar with

00:00:25,119 --> 00:00:28,840
the concept of fog of war

00:00:26,880 --> 00:00:30,400
you can't see the map until your unit's

00:00:28,840 --> 00:00:31,840
explored

00:00:30,400 --> 00:00:33,920
there's an app called fog of world that

00:00:31,840 --> 00:00:35,440
brings this concept into real life

00:00:33,920 --> 00:00:37,680
when you install it the world is covered

00:00:35,440 --> 00:00:38,960
in fog and as you move around the fog is

00:00:37,680 --> 00:00:40,879
cleared away

00:00:38,960 --> 00:00:42,480
i installed it on a whim years ago but

00:00:40,879 --> 00:00:43,360
it's really changed my relationship with

00:00:42,480 --> 00:00:45,440
geography

00:00:43,360 --> 00:00:46,719
for instance it inspires me to take new

00:00:45,440 --> 00:00:48,000
routes around town

00:00:46,719 --> 00:00:49,840
and it's particularly cool when

00:00:48,000 --> 00:00:51,520
traveling

00:00:49,840 --> 00:00:52,879
here's a trip i took to quebec city a

00:00:51,520 --> 00:00:55,840
few years ago

00:00:52,879 --> 00:00:57,120
this is my own custom map of the city

00:00:55,840 --> 00:00:58,000
and it's detailed enough to show

00:00:57,120 --> 00:01:00,399
individual streets

00:00:58,000 --> 00:01:02,719
and parks that we visited but the app

00:01:00,399 --> 00:01:04,720
can only export screenshots like these

00:01:02,719 --> 00:01:07,040
i wanted access to the data so i could

00:01:04,720 --> 00:01:08,799
draw my own maps

00:01:07,040 --> 00:01:11,119
although there's no official data export

00:01:08,799 --> 00:01:12,880
photovolt syncs with icloud and dropbox

00:01:11,119 --> 00:01:14,159
if you look in the sync directory you'll

00:01:12,880 --> 00:01:16,479
see a whole bunch of files

00:01:14,159 --> 00:01:18,159
of varying sizes and they don't have

00:01:16,479 --> 00:01:20,240
file extensions so i had to figure out

00:01:18,159 --> 00:01:21,840
their contents another way

00:01:20,240 --> 00:01:23,920
there's a utility called file that can

00:01:21,840 --> 00:01:25,840
detect file types and that identified

00:01:23,920 --> 00:01:27,520
them as compressed files

00:01:25,840 --> 00:01:29,040
after i decompressed them i ran file

00:01:27,520 --> 00:01:31,600
again and file

00:01:29,040 --> 00:01:33,439
did not recognize them now another

00:01:31,600 --> 00:01:35,040
useful utility for identifying files is

00:01:33,439 --> 00:01:36,240
strings which looks for human readable

00:01:35,040 --> 00:01:38,079
text in data

00:01:36,240 --> 00:01:39,600
but that didn't find anything either so

00:01:38,079 --> 00:01:40,799
my last resort was to look at the raw

00:01:39,600 --> 00:01:43,920
data

00:01:40,799 --> 00:01:45,360
let's open the file in hexdump hexdump

00:01:43,920 --> 00:01:47,520
shows three things

00:01:45,360 --> 00:01:49,600
it shows an offset into the file it

00:01:47,520 --> 00:01:51,200
shows the data itself in bytes

00:01:49,600 --> 00:01:54,000
and a human readable printout if you

00:01:51,200 --> 00:01:55,680
interpreted those bytes as ascii text

00:01:54,000 --> 00:01:58,159
now this is the start of the file what

00:01:55,680 --> 00:01:58,719
do you notice i noticed it's mostly

00:01:58,159 --> 00:02:00,079
empty

00:01:58,719 --> 00:02:01,520
and the stars on the left mean

00:02:00,079 --> 00:02:02,799
everything between the above and below

00:02:01,520 --> 00:02:06,000
offsets is the same

00:02:02,799 --> 00:02:07,759
so it's even emptier than it looks if i

00:02:06,000 --> 00:02:09,679
highlight the non-zero bytes the data

00:02:07,759 --> 00:02:11,280
seems to form a line

00:02:09,679 --> 00:02:13,520
now this is the top of the file let's

00:02:11,280 --> 00:02:15,120
look at the bottom

00:02:13,520 --> 00:02:17,040
the end of the files look different

00:02:15,120 --> 00:02:18,400
they're much less fast and the data

00:02:17,040 --> 00:02:18,959
starts to reach the printable ascii

00:02:18,400 --> 00:02:21,760
range

00:02:18,959 --> 00:02:23,040
and it also falls along straight lines

00:02:21,760 --> 00:02:24,800
now i didn't notice these lines in

00:02:23,040 --> 00:02:26,560
hexdomp because they only stand out when

00:02:24,800 --> 00:02:28,000
you show zero bytes differently

00:02:26,560 --> 00:02:29,840
but i did know the files were mostly

00:02:28,000 --> 00:02:31,440
empty and i wanted to look for patterns

00:02:29,840 --> 00:02:33,440
so i wrote some code to print out ascii

00:02:31,440 --> 00:02:35,599
diagrams and i made the character

00:02:33,440 --> 00:02:37,680
wrapping point configurable

00:02:35,599 --> 00:02:38,800
wrapping up 32 characters we don't get

00:02:37,680 --> 00:02:40,400
much

00:02:38,800 --> 00:02:44,160
64 character app looks a bit more

00:02:40,400 --> 00:02:46,480
promising rapping at 128 looks great

00:02:44,160 --> 00:02:49,280
and 256 characters looks a bit weird

00:02:46,480 --> 00:02:50,640
again so that wrap point at 128 seems

00:02:49,280 --> 00:02:52,480
like a good bet

00:02:50,640 --> 00:02:53,760
and seeing tracks so early was a really

00:02:52,480 --> 00:02:55,840
encouraging start

00:02:53,760 --> 00:02:57,360
but this is just the top of the file

00:02:55,840 --> 00:03:00,560
what does the rest of the file look like

00:02:57,360 --> 00:03:04,159
wrapped at 128 characters

00:03:00,560 --> 00:03:05,680
not great not great at all and it

00:03:04,159 --> 00:03:06,800
stumped me for a while because there was

00:03:05,680 --> 00:03:08,239
clearly a pattern

00:03:06,800 --> 00:03:10,000
there's this diagonal line which runs

00:03:08,239 --> 00:03:12,640
through the data and the data itself is

00:03:10,000 --> 00:03:14,879
too regular to be random

00:03:12,640 --> 00:03:16,879
beyond 128 characters per line it's

00:03:14,879 --> 00:03:18,400
easier to see this data as an image

00:03:16,879 --> 00:03:20,080
let's discard the initial track at the

00:03:18,400 --> 00:03:21,760
top of the file and see the rest wrapped

00:03:20,080 --> 00:03:23,519
at 128 characters

00:03:21,760 --> 00:03:25,040
i've rotated at 90 degrees to fit more

00:03:23,519 --> 00:03:26,560
on the side

00:03:25,040 --> 00:03:28,239
and the diagonal lines are even more

00:03:26,560 --> 00:03:30,080
apparent and they suggest we're wrapping

00:03:28,239 --> 00:03:31,519
at the wrong point

00:03:30,080 --> 00:03:34,720
i discovered my diagonals changed

00:03:31,519 --> 00:03:36,319
direction between 257 and 258 characters

00:03:34,720 --> 00:03:38,799
and i thought for a while the data was

00:03:36,319 --> 00:03:40,080
tick-tocking back and forth between 257

00:03:38,799 --> 00:03:42,400
and 258

00:03:40,080 --> 00:03:43,760
is that did a line better but a clever

00:03:42,400 --> 00:03:46,560
friend suggested that maybe it was

00:03:43,760 --> 00:03:50,000
really rapping at 515 characters

00:03:46,560 --> 00:03:52,400
257 plus 258

00:03:50,000 --> 00:03:53,840
and that looks a lot better this solid

00:03:52,400 --> 00:03:54,560
black line at the bottom is our former

00:03:53,840 --> 00:03:56,080
diagonal

00:03:54,560 --> 00:03:57,840
and finding this alignment was also

00:03:56,080 --> 00:04:00,000
really encouraging but

00:03:57,840 --> 00:04:02,319
i still didn't know what the data was i

00:04:00,000 --> 00:04:03,120
thought must be location metadata of

00:04:02,319 --> 00:04:06,000
some kind

00:04:03,120 --> 00:04:08,319
but the theory didn't feel quite right

00:04:06,000 --> 00:04:10,400
so i had theories but no insights and i

00:04:08,319 --> 00:04:13,280
pondered the facts for a day or so

00:04:10,400 --> 00:04:14,080
let's review the clues first up

00:04:13,280 --> 00:04:16,079
something was weird

00:04:14,080 --> 00:04:18,239
about all the tracks i'd found here's

00:04:16,079 --> 00:04:20,000
them all in one image

00:04:18,239 --> 00:04:21,440
now these are definitely tracks but

00:04:20,000 --> 00:04:23,280
they're not very detailed

00:04:21,440 --> 00:04:25,600
the app lets us see individual streets

00:04:23,280 --> 00:04:27,199
and that's not visible here

00:04:25,600 --> 00:04:29,280
next let's have another look at the

00:04:27,199 --> 00:04:31,759
start of the file in hexdump

00:04:29,280 --> 00:04:32,479
this is the track data but why store it

00:04:31,759 --> 00:04:33,919
as numbers

00:04:32,479 --> 00:04:35,680
the app doesn't need to know about track

00:04:33,919 --> 00:04:37,680
ordering

00:04:35,680 --> 00:04:39,360
and lastly the ratio of tracks to

00:04:37,680 --> 00:04:40,960
metadata seemed off

00:04:39,360 --> 00:04:42,400
here's the non-zero bytes of our file

00:04:40,960 --> 00:04:44,000
again but with the track included this

00:04:42,400 --> 00:04:46,000
time

00:04:44,000 --> 00:04:47,600
now fog of world is about tracks and

00:04:46,000 --> 00:04:49,520
pretty much only tracks

00:04:47,600 --> 00:04:50,720
and yet this was my theory about the

00:04:49,520 --> 00:04:52,800
file layout

00:04:50,720 --> 00:04:54,880
but what if my theory is exactly

00:04:52,800 --> 00:04:55,680
backwards what if what i thought were

00:04:54,880 --> 00:04:57,680
tracks

00:04:55,680 --> 00:05:00,479
a metadata and what i thought was

00:04:57,680 --> 00:05:02,160
metadata was really tracks

00:05:00,479 --> 00:05:03,919
now this idea came to me one day at work

00:05:02,160 --> 00:05:05,120
and i was really excited to go home and

00:05:03,919 --> 00:05:06,720
try it out

00:05:05,120 --> 00:05:08,639
i already had some throwaway code that

00:05:06,720 --> 00:05:10,560
just kind of poked at the data files

00:05:08,639 --> 00:05:12,160
it would read the data and try things

00:05:10,560 --> 00:05:13,919
like divide the file size by common

00:05:12,160 --> 00:05:15,520
divisors and count the most frequently

00:05:13,919 --> 00:05:17,120
occurring values

00:05:15,520 --> 00:05:19,600
and my new guess was each number in the

00:05:17,120 --> 00:05:20,800
top track referred to a 515 byte chunk

00:05:19,600 --> 00:05:23,039
below

00:05:20,800 --> 00:05:24,000
and this held true for all the files i

00:05:23,039 --> 00:05:27,199
call this initial track

00:05:24,000 --> 00:05:30,880
an overmap each chunk was 515 bytes

00:05:27,199 --> 00:05:34,000
or 512 bytes with three left over

00:05:30,880 --> 00:05:35,840
512 bytes is enough for a 64 by 64 pixel

00:05:34,000 --> 00:05:36,479
square where each pixel is either on or

00:05:35,840 --> 00:05:38,880
off

00:05:36,479 --> 00:05:40,400
and on or off is all fog of world cares

00:05:38,880 --> 00:05:41,840
about

00:05:40,400 --> 00:05:43,520
now we already had code to draw the

00:05:41,840 --> 00:05:45,440
overmaps so it wasn't much work to try

00:05:43,520 --> 00:05:46,720
this out and it was extremely satisfying

00:05:45,440 --> 00:05:48,080
when it worked

00:05:46,720 --> 00:05:49,840
the file we've looked at so far is

00:05:48,080 --> 00:05:51,280
really boring visually so let's look at

00:05:49,840 --> 00:05:53,360
a more intricate one

00:05:51,280 --> 00:05:55,759
first let's see one of the 64 by 64

00:05:53,360 --> 00:05:57,360
pixel subtiles

00:05:55,759 --> 00:05:58,960
i've shown several pixely images at

00:05:57,360 --> 00:06:01,199
various scales so far so it's not

00:05:58,960 --> 00:06:02,960
more obvious how small this image is

00:06:01,199 --> 00:06:05,440
it's only two super marios tall

00:06:02,960 --> 00:06:07,120
or four fifths of a street fighter and

00:06:05,440 --> 00:06:08,319
the subtiles only work when assembled

00:06:07,120 --> 00:06:10,479
into a bigger map

00:06:08,319 --> 00:06:13,039
here's the overmap for the whole tile

00:06:10,479 --> 00:06:14,800
and there's not much detail visible

00:06:13,039 --> 00:06:16,479
if we draw each subtile into its overmap

00:06:14,800 --> 00:06:19,039
location there's a lot more detail

00:06:16,479 --> 00:06:20,880
and this is a low res preview zooming in

00:06:19,039 --> 00:06:23,039
further i can show you the subtitles

00:06:20,880 --> 00:06:24,560
and this is as granular as it gets

00:06:23,039 --> 00:06:26,479
there's a subtitle we saw before in

00:06:24,560 --> 00:06:27,919
context

00:06:26,479 --> 00:06:30,240
now you might remember that our data

00:06:27,919 --> 00:06:32,240
chunks are 515 bytes each but each

00:06:30,240 --> 00:06:33,520
subtitle is made from 512 bytes of

00:06:32,240 --> 00:06:35,039
pixels

00:06:33,520 --> 00:06:36,960
what's the story with the last three

00:06:35,039 --> 00:06:38,800
bytes well

00:06:36,960 --> 00:06:40,720
i don't know entirely but i figured out

00:06:38,800 --> 00:06:42,240
one of them let's look at a small part

00:06:40,720 --> 00:06:45,039
of a different tile with the mystery

00:06:42,240 --> 00:06:46,800
three bytes printed as numbers

00:06:45,039 --> 00:06:48,880
almost all the subtitles have the same

00:06:46,800 --> 00:06:50,639
first mystery bite not just in this crop

00:06:48,880 --> 00:06:53,680
but the entire file

00:06:50,639 --> 00:06:55,360
except for one sub-tile on the right now

00:06:53,680 --> 00:06:57,039
this tracks from niagara falls and i've

00:06:55,360 --> 00:06:57,680
only ever visited the canadian side of

00:06:57,039 --> 00:06:59,599
the falls

00:06:57,680 --> 00:07:02,400
but that right-most subtile that i've

00:06:59,599 --> 00:07:03,759
barely visited is mostly america

00:07:02,400 --> 00:07:05,919
so it seemed like it was related to

00:07:03,759 --> 00:07:07,599
countries i pulled the country by

00:07:05,919 --> 00:07:08,479
smaller files into a list and sorted

00:07:07,599 --> 00:07:09,599
them

00:07:08,479 --> 00:07:12,319
and then identified some of those

00:07:09,599 --> 00:07:13,680
countries because i know where i've been

00:07:12,319 --> 00:07:15,840
and it seems a safe bet these are

00:07:13,680 --> 00:07:18,479
positions in an alphabetized list of iso

00:07:15,840 --> 00:07:20,000
3166 country codes

00:07:18,479 --> 00:07:21,120
now the other two bytes are different

00:07:20,000 --> 00:07:22,400
and they don't seem tied to the

00:07:21,120 --> 00:07:24,000
underlying geography

00:07:22,400 --> 00:07:25,840
i have some older backups from fog of

00:07:24,000 --> 00:07:27,360
world so i can compare an older tile

00:07:25,840 --> 00:07:28,800
with a newer version

00:07:27,360 --> 00:07:31,039
and the last two bytes change when the

00:07:28,800 --> 00:07:32,800
pixel data changes but i don't know more

00:07:31,039 --> 00:07:34,639
than that yet

00:07:32,800 --> 00:07:36,720
regardless the bytes don't seem related

00:07:34,639 --> 00:07:38,080
to drawing maps let's return to the file

00:07:36,720 --> 00:07:39,759
naming

00:07:38,080 --> 00:07:41,360
i can render each tile and i can piece

00:07:39,759 --> 00:07:43,039
the tasks together by eye

00:07:41,360 --> 00:07:45,520
i figure the tile names must be related

00:07:43,039 --> 00:07:46,800
to its real-world location

00:07:45,520 --> 00:07:48,720
and i wrote some code to help me

00:07:46,800 --> 00:07:51,360
assemble these tiles into a bigger quilt

00:07:48,720 --> 00:07:52,639
here's a chunk of canada as code and

00:07:51,360 --> 00:07:54,560
here's the output

00:07:52,639 --> 00:07:55,759
now there are definite patterns here the

00:07:54,560 --> 00:07:57,039
first four characters seem to be a

00:07:55,759 --> 00:07:58,400
hexadecimal id

00:07:57,039 --> 00:08:00,319
and then the next four characters are

00:07:58,400 --> 00:08:02,000
mostly stable by row

00:08:00,319 --> 00:08:03,759
which would suggest the last characters

00:08:02,000 --> 00:08:06,080
are to do with vertical position but

00:08:03,759 --> 00:08:08,720
they have more differences and some

00:08:06,080 --> 00:08:10,800
places have longer tile names too

00:08:08,720 --> 00:08:12,319
so there's really two problems here is

00:08:10,800 --> 00:08:13,120
there a tile for this real world

00:08:12,319 --> 00:08:15,440
location

00:08:13,120 --> 00:08:16,960
and does this tile have any neighbors

00:08:15,440 --> 00:08:18,319
and i haven't solved either but i am

00:08:16,960 --> 00:08:20,160
looking for patterns

00:08:18,319 --> 00:08:21,440
here's an example let's see all the file

00:08:20,160 --> 00:08:23,199
names again but with some duplicate

00:08:21,440 --> 00:08:24,560
files removed

00:08:23,199 --> 00:08:26,639
different character positions in the

00:08:24,560 --> 00:08:28,720
file names have different possibilities

00:08:26,639 --> 00:08:30,240
the first four are clearly hexadecimal

00:08:28,720 --> 00:08:31,680
and the next character has only four

00:08:30,240 --> 00:08:32,880
possibilities which should make you

00:08:31,680 --> 00:08:36,719
think of a layout scheme

00:08:32,880 --> 00:08:38,959
like this or like this or like this

00:08:36,719 --> 00:08:40,399
unfortunately my tiles are laid out like

00:08:38,959 --> 00:08:42,000
this

00:08:40,399 --> 00:08:44,240
but in practice this hasn't been a

00:08:42,000 --> 00:08:45,680
problem sorting tiles by country

00:08:44,240 --> 00:08:47,519
combined with the most stable with the

00:08:45,680 --> 00:08:48,959
mostly stable row identifier makes it

00:08:47,519 --> 00:08:50,160
straightforward to assemble these quilts

00:08:48,959 --> 00:08:53,279
by hand

00:08:50,160 --> 00:08:54,000
and i can now make big maps journey to

00:08:53,279 --> 00:08:56,959
ottawa is about

00:08:54,000 --> 00:08:59,120
220 miles or 350 kilometers so each of

00:08:56,959 --> 00:09:02,560
these tiles is about 30 miles square or

00:08:59,120 --> 00:09:03,839
50 kilometers square now i've made

00:09:02,560 --> 00:09:04,399
enough progress to give a talk about

00:09:03,839 --> 00:09:06,640
this and

00:09:04,399 --> 00:09:08,480
i can draw my own maps now but there are

00:09:06,640 --> 00:09:09,600
still some open questions

00:09:08,480 --> 00:09:11,360
i don't know the meaning of the file

00:09:09,600 --> 00:09:12,080
naming or how each file is pinned to the

00:09:11,360 --> 00:09:13,920
real world

00:09:12,080 --> 00:09:16,080
and i also have those two bytes for each

00:09:13,920 --> 00:09:18,240
subtitle that are still a mystery

00:09:16,080 --> 00:09:20,399
now maybe you figured it out already but

00:09:18,240 --> 00:09:22,160
if you have please don't tell me

00:09:20,399 --> 00:09:24,399
the fog of world author seems nice and

00:09:22,160 --> 00:09:25,839
has some unrelated code on github so i

00:09:24,399 --> 00:09:26,640
could probably have just emailed them

00:09:25,839 --> 00:09:28,560
and asked

00:09:26,640 --> 00:09:30,959
but i like puzzles and i want to solve

00:09:28,560 --> 00:09:32,160
it on my own

00:09:30,959 --> 00:09:33,839
now this was my first reverse

00:09:32,160 --> 00:09:34,959
engineering project so my tips are

00:09:33,839 --> 00:09:37,040
rudimentary but

00:09:34,959 --> 00:09:38,399
it was really fun so if you like puzzles

00:09:37,040 --> 00:09:39,920
and you have some mystery data

00:09:38,399 --> 00:09:41,920
i definitely recommend trying to figure

00:09:39,920 --> 00:09:43,200
it out for yourself

00:09:41,920 --> 00:09:45,279
one thing that struck me is the power of

00:09:43,200 --> 00:09:47,279
visualizing data people often think

00:09:45,279 --> 00:09:48,880
visualization means charts but ascii

00:09:47,279 --> 00:09:50,399
pictures were enough to confirm i was on

00:09:48,880 --> 00:09:51,920
the right track

00:09:50,399 --> 00:09:54,080
drawing red squares and numbers on my

00:09:51,920 --> 00:09:56,000
maps also helped a graphical equivalent

00:09:54,080 --> 00:09:58,240
of console.log debugging

00:09:56,000 --> 00:10:01,279
and similarly summarizing data also

00:09:58,240 --> 00:10:02,720
helped me find patterns and differences

00:10:01,279 --> 00:10:04,160
keeping scratch notes with a stream of

00:10:02,720 --> 00:10:04,640
consciousness speculation was really

00:10:04,160 --> 00:10:05,760
useful

00:10:04,640 --> 00:10:08,399
especially when i returned to the

00:10:05,760 --> 00:10:10,079
project after a break and lastly

00:10:08,399 --> 00:10:11,600
even if you're a programmer don't forget

00:10:10,079 --> 00:10:13,279
you have other tools too

00:10:11,600 --> 00:10:15,680
i used a spreadsheet for some parts of

00:10:13,279 --> 00:10:17,120
this and that was a lot quicker

00:10:15,680 --> 00:10:18,480
and that's everything if you have

00:10:17,120 --> 00:10:20,240
questions or want more details i'm

00:10:18,480 --> 00:10:20,959
hanging out in the bang bangkong discord

00:10:20,240 --> 00:10:25,200
server

00:10:20,959 --> 00:10:25,200

YouTube URL: https://www.youtube.com/watch?v=hrxY4svRnzQ


