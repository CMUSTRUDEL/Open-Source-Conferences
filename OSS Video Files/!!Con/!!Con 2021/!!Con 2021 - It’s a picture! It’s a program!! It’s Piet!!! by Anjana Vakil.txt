Title: !!Con 2021 - It’s a picture! It’s a program!! It’s Piet!!! by Anjana Vakil
Publication date: 2021-07-06
Playlist: !!Con 2021
Description: 
	It’s a picture! It’s a program!! It’s Piet!!! by Anjana Vakil

What if you didn’t write a program, but drew it instead?!? What if you could learn about programming languages and models of computation by playing with pixel art?!? Spoiler alert: you can!!

Piet, named after the artist Piet Mondrian, is an esoteric programming language, aka “esolang”, where programs are abstract pixel art(!), blocks of color are data(!!), and programmers use variations in color to send instructions to a stack-based interpreter to compute… anything!!! (Really, it’s Turing complete! You can even write an interpreter for another language in it!!)

Let’s learn how Piet works through a visual exploration of the basic concepts of the language, take a look at a few amazing programs, and see how this pixel-perfect esolang can teach & inspire us to learn more about the art of computing (pun intended!).

Anjana suffers from a chronic case of curiosity, which led her from philosophy to English teaching to computational linguistics to software development. As a developer advocate at Observable, these days she codes & teaches from her home base in San Francisco; in the before-times, you could find her speaking at events around the world. She loves to share the joy of programming and advocate for a more diverse, equitable, and ethical tech industry. Ask her about the Recurse Center & Outreachy, she’s an alumna of both!
Captions: 
	00:00:13,679 --> 00:00:18,400
hello

00:00:14,880 --> 00:00:21,520
hi folks hi oh my gosh

00:00:18,400 --> 00:00:23,840
big mancon so excited to be back um

00:00:21,520 --> 00:00:25,920
well i am so glad pete has already come

00:00:23,840 --> 00:00:28,240
up a couple of times at the conference

00:00:25,920 --> 00:00:30,560
i uh hope everybody is just as excited

00:00:28,240 --> 00:00:32,079
as i am to talk about pete today i'm

00:00:30,560 --> 00:00:33,760
anjana vacheel you can find me at

00:00:32,079 --> 00:00:35,760
anjanovacio on twitter

00:00:33,760 --> 00:00:37,200
um and i'm really stoked to talk about

00:00:35,760 --> 00:00:39,760
pete uh

00:00:37,200 --> 00:00:41,920
so let's dive in the slides are up on

00:00:39,760 --> 00:00:42,879
observable where i work as a developer

00:00:41,920 --> 00:00:46,160
advocate

00:00:42,879 --> 00:00:47,520
and i am really stoked that i think a

00:00:46,160 --> 00:00:49,200
lot of people already are familiar with

00:00:47,520 --> 00:00:51,520
pete but i hope for the folks that are

00:00:49,200 --> 00:00:54,640
new that this will be illuminating so

00:00:51,520 --> 00:00:56,079
um pete mondrian might be a name that

00:00:54,640 --> 00:00:57,920
you recognize but if you don't recognize

00:00:56,079 --> 00:00:58,719
the name i'm pretty sure you recognize

00:00:57,920 --> 00:01:01,039
his art

00:00:58,719 --> 00:01:02,399
so here's a dutch painter famous for

00:01:01,039 --> 00:01:05,519
doing these um

00:01:02,399 --> 00:01:07,439
very uh very striking compositions

00:01:05,519 --> 00:01:09,360
abstract paintings with large color

00:01:07,439 --> 00:01:12,400
blocks and and lots of white

00:01:09,360 --> 00:01:14,400
space and um the question that we as

00:01:12,400 --> 00:01:17,040
intrepid programmers might be asking

00:01:14,400 --> 00:01:20,080
ourselves is cuckoo cool art is nice

00:01:17,040 --> 00:01:24,240
but what if we could run

00:01:20,080 --> 00:01:27,520
a piece of art like this as a program

00:01:24,240 --> 00:01:31,439
uh so this is exactly the question

00:01:27,520 --> 00:01:33,840
that um david morgenmar posed when he

00:01:31,439 --> 00:01:35,759
invented the programming language called

00:01:33,840 --> 00:01:37,439
pete named after pete mondrian

00:01:35,759 --> 00:01:39,119
so pete is an esoteric programming

00:01:37,439 --> 00:01:41,200
language or islang

00:01:39,119 --> 00:01:42,799
or slang depending how you pronounce it

00:01:41,200 --> 00:01:45,520
um i think a lot of folks are

00:01:42,799 --> 00:01:46,960
are uh familiar with uh eso length but

00:01:45,520 --> 00:01:48,960
in case you're not that's essentially a

00:01:46,960 --> 00:01:51,439
language that's not intended for

00:01:48,960 --> 00:01:53,119
practical programming and getting work

00:01:51,439 --> 00:01:56,240
done but rather for

00:01:53,119 --> 00:01:56,799
joy and excitement and exploration and

00:01:56,240 --> 00:01:58,560
learning

00:01:56,799 --> 00:02:00,640
and in many cases pushing the boundaries

00:01:58,560 --> 00:02:02,240
of our notions of computing and what

00:02:00,640 --> 00:02:04,880
programming even is

00:02:02,240 --> 00:02:06,240
and so this is definitely the case um

00:02:04,880 --> 00:02:08,800
for the language pete

00:02:06,240 --> 00:02:10,080
where we are going to treat abstract art

00:02:08,800 --> 00:02:12,800
as the source code

00:02:10,080 --> 00:02:14,480
for programs what does that even mean

00:02:12,800 --> 00:02:16,319
how what does the program look like in

00:02:14,480 --> 00:02:19,360
pete well here are some examples

00:02:16,319 --> 00:02:22,000
um all of these are different

00:02:19,360 --> 00:02:22,480
ways that you can code a hello word

00:02:22,000 --> 00:02:25,440
world

00:02:22,480 --> 00:02:27,440
program in excuse me and pete um so all

00:02:25,440 --> 00:02:28,959
of these programs print the output hello

00:02:27,440 --> 00:02:30,800
world to centered out

00:02:28,959 --> 00:02:32,640
and this animated one has three

00:02:30,800 --> 00:02:33,360
different versions of ways you can uh

00:02:32,640 --> 00:02:35,599
you can

00:02:33,360 --> 00:02:37,280
color this program so as you can see

00:02:35,599 --> 00:02:39,599
they're all very colorful they're made

00:02:37,280 --> 00:02:42,879
up of blocks of bright colors

00:02:39,599 --> 00:02:46,080
and uh we're going to see how we can

00:02:42,879 --> 00:02:47,920
execute images like this as code thanks

00:02:46,080 --> 00:02:51,360
to the pete interpreter

00:02:47,920 --> 00:02:54,000
so how does pete interpret these

00:02:51,360 --> 00:02:54,879
pixels these pixel art pictures as

00:02:54,000 --> 00:02:58,159
programs

00:02:54,879 --> 00:02:58,640
well it's all about colors so uh as we

00:02:58,159 --> 00:03:00,239
saw

00:02:58,640 --> 00:03:02,560
pete programs are made up of bright

00:03:00,239 --> 00:03:03,200
colors um and this is the set of colors

00:03:02,560 --> 00:03:05,440
that can go

00:03:03,200 --> 00:03:06,720
into a peep program so we have the kind

00:03:05,440 --> 00:03:08,560
of rainbow color

00:03:06,720 --> 00:03:10,319
six rainbow colors here a lighter

00:03:08,560 --> 00:03:11,920
version and darker version of each

00:03:10,319 --> 00:03:13,599
and then white and black which are kind

00:03:11,920 --> 00:03:14,959
of special colors which we'll talk about

00:03:13,599 --> 00:03:18,319
in a moment

00:03:14,959 --> 00:03:20,480
um and so the uh

00:03:18,319 --> 00:03:23,040
idea is that in a pete program and here

00:03:20,480 --> 00:03:23,920
we've got a a very simple little 10 by

00:03:23,040 --> 00:03:27,120
10 pixel

00:03:23,920 --> 00:03:30,159
uh blown up program here in a program

00:03:27,120 --> 00:03:32,720
the blocks of a contiguous uh

00:03:30,159 --> 00:03:34,400
group of pixels of the same color

00:03:32,720 --> 00:03:37,120
represent a piece of data

00:03:34,400 --> 00:03:38,879
so an integer value and that is going to

00:03:37,120 --> 00:03:40,879
be the number of pixels

00:03:38,879 --> 00:03:42,640
making up that block so in this case

00:03:40,879 --> 00:03:44,239
we've got a magenta block here and

00:03:42,640 --> 00:03:45,519
you'll notice it has some holes in it

00:03:44,239 --> 00:03:46,799
there's some black areas and other

00:03:45,519 --> 00:03:48,400
colors inside of it

00:03:46,799 --> 00:03:50,640
but all of these pixels make up a

00:03:48,400 --> 00:03:52,319
contiguous area that has 33

00:03:50,640 --> 00:03:54,640
pixels so this is going to be a magenta

00:03:52,319 --> 00:03:58,000
block of value 33.

00:03:54,640 --> 00:03:59,439
and then um we have a dark magenta one

00:03:58,000 --> 00:04:01,760
here which is has a

00:03:59,439 --> 00:04:03,120
11 pixel so 10 here and then one more

00:04:01,760 --> 00:04:06,159
there's also a couple more

00:04:03,120 --> 00:04:06,640
one pixel blocks of of uh dark magenta

00:04:06,159 --> 00:04:08,159
there

00:04:06,640 --> 00:04:10,000
and so on and so forth for the different

00:04:08,159 --> 00:04:10,480
colors now keep in mind this is all

00:04:10,000 --> 00:04:13,040
about

00:04:10,480 --> 00:04:14,319
the um the contiguous series of blocks

00:04:13,040 --> 00:04:16,720
of pixels so

00:04:14,319 --> 00:04:17,359
for example here we have uh two

00:04:16,720 --> 00:04:19,359
different

00:04:17,359 --> 00:04:21,120
dark cyan blocks one that has a value

00:04:19,359 --> 00:04:23,199
five and one that has value one

00:04:21,120 --> 00:04:24,960
they're separated by this white now as i

00:04:23,199 --> 00:04:25,680
said white and black are kind of special

00:04:24,960 --> 00:04:27,600
colors

00:04:25,680 --> 00:04:29,120
white is essentially like a void it's

00:04:27,600 --> 00:04:31,520
like a filler it's kind of

00:04:29,120 --> 00:04:32,800
empty space um and we're going to see

00:04:31,520 --> 00:04:33,520
what that means in a moment and then

00:04:32,800 --> 00:04:35,919
black

00:04:33,520 --> 00:04:36,880
is essentially like a like a stop it's a

00:04:35,919 --> 00:04:39,040
it's sort of a

00:04:36,880 --> 00:04:40,720
it's also not a value but it's more like

00:04:39,040 --> 00:04:43,440
the edge of a per of the

00:04:40,720 --> 00:04:44,479
image so essentially it's a no-go zone

00:04:43,440 --> 00:04:48,000
we'll see what that means

00:04:44,479 --> 00:04:50,080
in a moment all right so the way

00:04:48,000 --> 00:04:51,520
a pete program is interpreted is thanks

00:04:50,080 --> 00:04:52,720
to the help of something called a

00:04:51,520 --> 00:04:54,560
direction pointer

00:04:52,720 --> 00:04:56,800
the way the direction pointer works is

00:04:54,560 --> 00:04:58,400
when we start execution of a program

00:04:56,800 --> 00:05:00,320
the direction pointer starts out in the

00:04:58,400 --> 00:05:03,360
top left pixel of the image

00:05:00,320 --> 00:05:05,680
and it starts out pointing right and

00:05:03,360 --> 00:05:06,880
uh what it does is if it's in a color

00:05:05,680 --> 00:05:09,840
block area

00:05:06,880 --> 00:05:11,199
it's going to try to move to the edge of

00:05:09,840 --> 00:05:13,520
that colored area that

00:05:11,199 --> 00:05:15,039
that same color block that is in the

00:05:13,520 --> 00:05:16,479
direction that it's pointing so in this

00:05:15,039 --> 00:05:18,240
case to the right so here it's going to

00:05:16,479 --> 00:05:20,720
move from the top left corner

00:05:18,240 --> 00:05:21,600
uh five pixels over or to the fifth

00:05:20,720 --> 00:05:23,360
pixel over

00:05:21,600 --> 00:05:24,880
um and this is this is the rightmost

00:05:23,360 --> 00:05:27,360
edge of this magenta

00:05:24,880 --> 00:05:27,919
block then it's going to try to move on

00:05:27,360 --> 00:05:29,840
from there

00:05:27,919 --> 00:05:31,280
into the next block in this case into

00:05:29,840 --> 00:05:32,960
this dark magenta one

00:05:31,280 --> 00:05:34,720
and so on and so forth now here i don't

00:05:32,960 --> 00:05:36,160
need to move to the edge of the dark

00:05:34,720 --> 00:05:38,000
magenta block that i'm in because it's

00:05:36,160 --> 00:05:38,639
only one pixel wide so i'm already at

00:05:38,000 --> 00:05:41,199
the edge

00:05:38,639 --> 00:05:43,039
so i can go into the dark cyan go into

00:05:41,199 --> 00:05:45,039
the next one eventually the green

00:05:43,039 --> 00:05:46,639
and so on until i reach this light

00:05:45,039 --> 00:05:48,479
yellow block now here

00:05:46,639 --> 00:05:49,759
the furthest edge in the direction the

00:05:48,479 --> 00:05:52,000
pointer is pointing

00:05:49,759 --> 00:05:53,680
is actually not here but further down

00:05:52,000 --> 00:05:54,639
the image it's going to be this lower

00:05:53,680 --> 00:05:56,560
rightmost

00:05:54,639 --> 00:05:57,840
pixel here that's the furthest edge in

00:05:56,560 --> 00:05:58,720
the direction of pointing so we jump

00:05:57,840 --> 00:06:00,000
down there

00:05:58,720 --> 00:06:02,479
and now we've reached the edge of the

00:06:00,000 --> 00:06:03,120
image so we can't go anywhere else can't

00:06:02,479 --> 00:06:04,880
move on

00:06:03,120 --> 00:06:06,479
so what the pointer does in that case is

00:06:04,880 --> 00:06:07,759
it turns 90 degrees

00:06:06,479 --> 00:06:09,840
clockwise so it's going to start

00:06:07,759 --> 00:06:10,240
pointing down and then it's going to

00:06:09,840 --> 00:06:11,520
move

00:06:10,240 --> 00:06:13,919
sorry we just jumped ahead a little bit

00:06:11,520 --> 00:06:15,680
it's going to move uh to the to the edge

00:06:13,919 --> 00:06:17,520
that's furthest in the down direction

00:06:15,680 --> 00:06:19,120
it hits the edge again of the image so

00:06:17,520 --> 00:06:20,639
it has to rotate once more

00:06:19,120 --> 00:06:22,160
it's going to move again to the furthest

00:06:20,639 --> 00:06:23,440
edge now it's pointing left so it's

00:06:22,160 --> 00:06:24,639
going to move that way which is this

00:06:23,440 --> 00:06:27,199
block over here

00:06:24,639 --> 00:06:28,560
now it's run into black which as we said

00:06:27,199 --> 00:06:30,560
operates sort of like the edge of an

00:06:28,560 --> 00:06:31,199
image so it can't pass through the black

00:06:30,560 --> 00:06:34,400
area

00:06:31,199 --> 00:06:34,880
it has to turn again and move to the

00:06:34,400 --> 00:06:36,960
next

00:06:34,880 --> 00:06:38,080
uh the edge in the in the new direction

00:06:36,960 --> 00:06:39,520
which is now up

00:06:38,080 --> 00:06:41,280
so it's going to move back up to this

00:06:39,520 --> 00:06:42,880
top pixel here

00:06:41,280 --> 00:06:45,039
which again is the edge of the image it

00:06:42,880 --> 00:06:46,479
can't move on um from there so it turns

00:06:45,039 --> 00:06:48,400
again

00:06:46,479 --> 00:06:49,759
turns again but at this point it has

00:06:48,400 --> 00:06:52,479
done a full rotation

00:06:49,759 --> 00:06:54,560
in this light yellow block and it hasn't

00:06:52,479 --> 00:06:56,800
been able to get out so it's stuck

00:06:54,560 --> 00:06:58,400
and that is how we tell a p program to

00:06:56,800 --> 00:07:00,800
stop executing

00:06:58,400 --> 00:07:02,560
so this means the program is over and

00:07:00,800 --> 00:07:04,000
execution is finished now we didn't look

00:07:02,560 --> 00:07:05,919
at this one but the white pixels

00:07:04,000 --> 00:07:07,039
essentially are sort of empty space so

00:07:05,919 --> 00:07:10,560
the pointer moves

00:07:07,039 --> 00:07:14,000
unhindered through any white pixels okay

00:07:10,560 --> 00:07:15,280
so now how do we uh take this pointer

00:07:14,000 --> 00:07:18,400
movement and turn it into

00:07:15,280 --> 00:07:21,039
doing something well turns out that

00:07:18,400 --> 00:07:22,720
changes between one block of color and

00:07:21,039 --> 00:07:24,319
the next block of color

00:07:22,720 --> 00:07:26,560
changes between those colors are

00:07:24,319 --> 00:07:27,840
actually corresponding to commands to

00:07:26,560 --> 00:07:30,720
the peat interpreter

00:07:27,840 --> 00:07:32,479
so the colors are arranged in two cycles

00:07:30,720 --> 00:07:34,080
on the one hand we have a hue cycle

00:07:32,479 --> 00:07:34,880
which moves through the rainbow colors

00:07:34,080 --> 00:07:37,440
from red

00:07:34,880 --> 00:07:40,000
yellow green cyan blue to magenta and

00:07:37,440 --> 00:07:42,800
then back to red and goes on in that

00:07:40,000 --> 00:07:44,639
cycle and this is called the hue cycle

00:07:42,800 --> 00:07:46,240
we also have the lighter and darker

00:07:44,639 --> 00:07:47,840
versions of each color and that makes up

00:07:46,240 --> 00:07:49,680
another cycle called the lightness cycle

00:07:47,840 --> 00:07:51,120
where we go from light to normal to dark

00:07:49,680 --> 00:07:53,599
and back to light

00:07:51,120 --> 00:07:54,720
so if we're um let's say moving out of a

00:07:53,599 --> 00:07:58,160
light red block

00:07:54,720 --> 00:08:00,400
and moving into a dark magenta block

00:07:58,160 --> 00:08:02,800
that difference in colors is going to

00:08:00,400 --> 00:08:05,840
represent five steps in the hue cycle

00:08:02,800 --> 00:08:08,879
and two steps in the light cycle

00:08:05,840 --> 00:08:12,400
and uh the way that

00:08:08,879 --> 00:08:14,000
these steps work is the number of hue

00:08:12,400 --> 00:08:17,360
and lightness steps

00:08:14,000 --> 00:08:20,879
for a given color change corresponds to

00:08:17,360 --> 00:08:22,720
a command that the

00:08:20,879 --> 00:08:24,560
interpreter is going to run to actually

00:08:22,720 --> 00:08:26,160
do something so in this case if i were

00:08:24,560 --> 00:08:28,000
to go from light red to

00:08:26,160 --> 00:08:29,520
uh dark magenta that's gonna correspond

00:08:28,000 --> 00:08:30,800
to the out car command

00:08:29,520 --> 00:08:33,279
and we're gonna see what that means in a

00:08:30,800 --> 00:08:35,360
second um and keep in mind that

00:08:33,279 --> 00:08:37,039
these are not absolute the color like

00:08:35,360 --> 00:08:38,719
each color does not correspond to a

00:08:37,039 --> 00:08:41,519
particular command but rather

00:08:38,719 --> 00:08:43,200
the difference between them is what

00:08:41,519 --> 00:08:45,279
creates a command so if the color

00:08:43,200 --> 00:08:46,080
changes if now i'm in a dark magenta

00:08:45,279 --> 00:08:49,120
block

00:08:46,080 --> 00:08:50,800
then uh moving to the light red color

00:08:49,120 --> 00:08:52,560
would be a subtract command or

00:08:50,800 --> 00:08:54,640
moving one step in the lightness cycle

00:08:52,560 --> 00:08:56,800
to light magenta would be a push

00:08:54,640 --> 00:08:59,120
and two steps in the lightness cycle to

00:08:56,800 --> 00:09:01,440
regular magenta would be a pop

00:08:59,120 --> 00:09:02,160
okay so moving fast through all of this

00:09:01,440 --> 00:09:03,760
but

00:09:02,160 --> 00:09:05,279
um we're not gonna have time to look at

00:09:03,760 --> 00:09:06,560
all of these commands but what do these

00:09:05,279 --> 00:09:07,279
commands do let's take a look at a

00:09:06,560 --> 00:09:08,800
couple

00:09:07,279 --> 00:09:10,959
what they do is they tell the

00:09:08,800 --> 00:09:11,839
interpreter how to manipulate values on

00:09:10,959 --> 00:09:14,880
a stack

00:09:11,839 --> 00:09:17,360
so a peak program runs by means of a

00:09:14,880 --> 00:09:19,920
stack which has integer values onto it

00:09:17,360 --> 00:09:20,720
and each command gives the program

00:09:19,920 --> 00:09:22,800
something to do

00:09:20,720 --> 00:09:25,279
with that stack so for example the push

00:09:22,800 --> 00:09:25,920
command says okay take the value the

00:09:25,279 --> 00:09:27,920
number

00:09:25,920 --> 00:09:30,160
of pixels in the block of color that you

00:09:27,920 --> 00:09:32,959
just exited in that previous block

00:09:30,160 --> 00:09:34,480
and push that value onto the stack then

00:09:32,959 --> 00:09:36,000
we have a pop command that says take

00:09:34,480 --> 00:09:37,600
whatever's on top of the stack and

00:09:36,000 --> 00:09:40,000
throw it out take it off and throw it

00:09:37,600 --> 00:09:41,839
away there are some commands like add

00:09:40,000 --> 00:09:44,160
which assumes that there are at least

00:09:41,839 --> 00:09:46,399
two values on the stack and says take

00:09:44,160 --> 00:09:48,240
those take the top two values

00:09:46,399 --> 00:09:50,000
remove them add them together and then

00:09:48,240 --> 00:09:50,959
push the sum as a new value onto the

00:09:50,000 --> 00:09:52,880
stack

00:09:50,959 --> 00:09:54,240
there are also some more commands um

00:09:52,880 --> 00:09:56,640
like uh that have

00:09:54,240 --> 00:09:58,240
various operations like duplicate for

00:09:56,640 --> 00:09:59,360
example is one where we read the top

00:09:58,240 --> 00:10:02,160
value on the stack

00:09:59,360 --> 00:10:03,600
and then we push another copy of it to

00:10:02,160 --> 00:10:05,440
the top of the stack

00:10:03,600 --> 00:10:07,200
we can also do input and output so we

00:10:05,440 --> 00:10:08,640
can read from standard in with the in

00:10:07,200 --> 00:10:11,200
commands and without

00:10:08,640 --> 00:10:14,079
commands we can take the top value on

00:10:11,200 --> 00:10:16,000
the stack and print it to standard out

00:10:14,079 --> 00:10:17,279
interpreting it either as a number

00:10:16,000 --> 00:10:18,480
because everything on the stack is going

00:10:17,279 --> 00:10:20,240
to be integer numbers

00:10:18,480 --> 00:10:21,839
or we can take that integer and

00:10:20,240 --> 00:10:23,120
interpret it as a character code

00:10:21,839 --> 00:10:25,279
and print the character that it

00:10:23,120 --> 00:10:27,360
represents instead of the number

00:10:25,279 --> 00:10:29,040
so you can uh check out the references

00:10:27,360 --> 00:10:31,680
in the slides for a link to

00:10:29,040 --> 00:10:32,959
um dave morgenmar's description of all

00:10:31,680 --> 00:10:36,880
of these commands

00:10:32,959 --> 00:10:37,440
okay so let's see how this works and try

00:10:36,880 --> 00:10:40,880
to run

00:10:37,440 --> 00:10:43,200
a program okay so we have our little um

00:10:40,880 --> 00:10:44,320
our little image here a 10 by 10 image

00:10:43,200 --> 00:10:46,480
and we know uh

00:10:44,320 --> 00:10:47,440
how our color commands work now and we

00:10:46,480 --> 00:10:49,120
know how our

00:10:47,440 --> 00:10:51,360
uh pointer works so let's put it all

00:10:49,120 --> 00:10:53,040
together okay when i start execution the

00:10:51,360 --> 00:10:53,920
pointer starts out in the top left as we

00:10:53,040 --> 00:10:55,760
saw before

00:10:53,920 --> 00:10:57,120
it's in the magenta block which has a

00:10:55,760 --> 00:10:58,880
value of 33.

00:10:57,120 --> 00:11:00,480
it moves to the edge of that magenta

00:10:58,880 --> 00:11:02,160
block so it's still in the same block

00:11:00,480 --> 00:11:03,920
this magenta 33

00:11:02,160 --> 00:11:06,079
then as we saw it moves into the dark

00:11:03,920 --> 00:11:07,839
magenta now that difference from the

00:11:06,079 --> 00:11:10,560
previous colored magenta

00:11:07,839 --> 00:11:11,440
to dark magenta that's a lightness step

00:11:10,560 --> 00:11:13,839
of one

00:11:11,440 --> 00:11:15,600
and zero steps in the hue cycle that

00:11:13,839 --> 00:11:17,600
corresponds to the push command

00:11:15,600 --> 00:11:19,440
so it takes the previous value this 33

00:11:17,600 --> 00:11:20,720
and pushes it onto the stack so now we

00:11:19,440 --> 00:11:23,200
have something on our stack

00:11:20,720 --> 00:11:25,120
started out as empty uh okay we keep

00:11:23,200 --> 00:11:28,160
moving into dark cyan

00:11:25,120 --> 00:11:30,000
so now the difference between the

00:11:28,160 --> 00:11:32,560
dark magenta that we were in before and

00:11:30,000 --> 00:11:34,560
the dark cyan that we're in now

00:11:32,560 --> 00:11:36,000
corresponds to that duplicate command so

00:11:34,560 --> 00:11:38,399
what we've done is we've taken with the

00:11:36,000 --> 00:11:39,440
the previous topmost uh value which was

00:11:38,399 --> 00:11:41,200
that 33

00:11:39,440 --> 00:11:42,800
and created a new copy put it on the

00:11:41,200 --> 00:11:43,920
stack so now we have two 33s on our

00:11:42,800 --> 00:11:47,600
stack

00:11:43,920 --> 00:11:49,680
then we're going to move into this green

00:11:47,600 --> 00:11:51,200
where the difference between dark cyan

00:11:49,680 --> 00:11:52,160
and green even though all these colors

00:11:51,200 --> 00:11:54,800
look totally different

00:11:52,160 --> 00:11:55,600
the number of steps is um is is going to

00:11:54,800 --> 00:11:57,680
be what

00:11:55,600 --> 00:11:58,880
corresponds to the next command we're

00:11:57,680 --> 00:12:01,519
going to do and that is

00:11:58,880 --> 00:12:03,279
out as a character so now what we've

00:12:01,519 --> 00:12:06,240
done and let's just go back to see here

00:12:03,279 --> 00:12:08,880
well we we took the topmost uh value

00:12:06,240 --> 00:12:10,000
and when we moved into that green that

00:12:08,880 --> 00:12:12,079
out command

00:12:10,000 --> 00:12:13,680
told us to print it as a character to

00:12:12,079 --> 00:12:14,000
standard out and guess what character it

00:12:13,680 --> 00:12:16,160
made

00:12:14,000 --> 00:12:17,279
an exclamation point oh my gosh how

00:12:16,160 --> 00:12:20,079
unpredictable

00:12:17,279 --> 00:12:20,959
uh and then we move into this light

00:12:20,079 --> 00:12:23,120
yellow

00:12:20,959 --> 00:12:24,160
and that difference is actually going to

00:12:23,120 --> 00:12:26,079
be the same

00:12:24,160 --> 00:12:28,079
difference as we saw from dark cyan into

00:12:26,079 --> 00:12:28,959
green so we get that same out command

00:12:28,079 --> 00:12:31,120
and we print

00:12:28,959 --> 00:12:33,040
that uh last 33 that we had there as

00:12:31,120 --> 00:12:35,200
another exclamation point

00:12:33,040 --> 00:12:36,959
now we're in our light yellow block

00:12:35,200 --> 00:12:39,920
again and we saw how that goes

00:12:36,959 --> 00:12:41,760
we try to move we have to turn we try to

00:12:39,920 --> 00:12:42,480
move we have to turn and so on and so

00:12:41,760 --> 00:12:45,440
forth

00:12:42,480 --> 00:12:47,120
until we realize that we're stuck we've

00:12:45,440 --> 00:12:48,639
retraced our steps gone in a complete

00:12:47,120 --> 00:12:49,200
circle in this same block and we can't

00:12:48,639 --> 00:12:51,920
get out

00:12:49,200 --> 00:12:53,200
so we exit the program and we are done

00:12:51,920 --> 00:12:56,079
bang bang

00:12:53,200 --> 00:12:57,839
so oh my gosh we did it we saw pete run

00:12:56,079 --> 00:13:00,399
now this was a really simple program

00:12:57,839 --> 00:13:00,959
but you can do anything impeat that you

00:13:00,399 --> 00:13:02,880
can do

00:13:00,959 --> 00:13:05,120
with a computer you could write an

00:13:02,880 --> 00:13:08,000
interpreter for an entirely different

00:13:05,120 --> 00:13:08,480
isolang for example which matthias ernst

00:13:08,000 --> 00:13:09,920
did

00:13:08,480 --> 00:13:11,839
uh when he wrote a brain

00:13:09,920 --> 00:13:15,200
interpreter in pete like

00:13:11,839 --> 00:13:16,880
oh my gosh you could even develop sergey

00:13:15,200 --> 00:13:20,320
lewis developed an assembler

00:13:16,880 --> 00:13:22,079
to basically like compile to pete and

00:13:20,320 --> 00:13:23,680
can create even more complex programs

00:13:22,079 --> 00:13:25,519
that way this what we're looking at and

00:13:23,680 --> 00:13:28,079
it's very it's very small here

00:13:25,519 --> 00:13:29,839
but this is a text adventure game

00:13:28,079 --> 00:13:32,000
written in pete

00:13:29,839 --> 00:13:34,079
amazing so i think this is just like so

00:13:32,000 --> 00:13:37,600
cool that you can

00:13:34,079 --> 00:13:39,199
re like really force your mind to expand

00:13:37,600 --> 00:13:39,839
in terms of the notion of what is a

00:13:39,199 --> 00:13:42,160
program

00:13:39,839 --> 00:13:43,279
what could execution be how could the

00:13:42,160 --> 00:13:47,600
act of programming

00:13:43,279 --> 00:13:49,680
be more like the art of programming

00:13:47,600 --> 00:13:51,600
and i just think that that pete is just

00:13:49,680 --> 00:13:53,760
such a great example of like bringing

00:13:51,600 --> 00:13:55,440
joy and excitement to programming and so

00:13:53,760 --> 00:13:57,120
i am really happy that everyone has been

00:13:55,440 --> 00:13:57,920
excited about it thank you all for

00:13:57,120 --> 00:14:00,320
listening

00:13:57,920 --> 00:14:01,360
and i have some resources for you all in

00:14:00,320 --> 00:14:03,959
these slides

00:14:01,360 --> 00:14:05,440
um which you can find on

00:14:03,959 --> 00:14:08,880
observablehq.com

00:14:05,440 --> 00:14:10,959
slash anjana slash pete minus bangmancon

00:14:08,880 --> 00:14:12,880
so yeah go check out the resources

00:14:10,959 --> 00:14:13,680
listed here to learn more about all of

00:14:12,880 --> 00:14:15,040
the details of p

00:14:13,680 --> 00:14:16,639
and see some other really awesome

00:14:15,040 --> 00:14:17,760
programs there are some really great um

00:14:16,639 --> 00:14:20,160
online tools

00:14:17,760 --> 00:14:22,560
excuse me and interpreters um including

00:14:20,160 --> 00:14:24,399
an amazing web ide called masterpiece

00:14:22,560 --> 00:14:25,519
that uh wreaker center alumna gabrielle

00:14:24,399 --> 00:14:27,600
cinco dio made

00:14:25,519 --> 00:14:29,040
which you can play around and make p

00:14:27,600 --> 00:14:30,639
programs and try them out with an

00:14:29,040 --> 00:14:34,320
interactive debugger so

00:14:30,639 --> 00:14:34,959
go forth play with pete enjoy and i hope

00:14:34,320 --> 00:14:38,399
it brings you

00:14:34,959 --> 00:14:42,000
lots of excitement surprise and joy

00:14:38,399 --> 00:14:42,000

YouTube URL: https://www.youtube.com/watch?v=Y27LcXB553Q


