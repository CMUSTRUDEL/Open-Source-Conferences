Title: Deploying webapps on Jelastic   Weird uses of Docker
Publication date: 2020-02-23
Playlist: MiniDebConf Vaumarcus 2019
Description: 
	by Didier Raboud

At: MiniDebConf Vaumarcus 2019
https://wiki.debian.org/DebianEvents/ch/2019/Vaumarcus
Room: main
Scheduled start: 2019-10-26 15:00:00
Captions: 
	00:00:05,460 --> 00:00:14,349
thank you so welcome to my talk

00:00:08,650 --> 00:00:16,180
I suck at slides so I also had not my

00:00:14,349 --> 00:00:17,820
problems not my network problems to

00:00:16,180 --> 00:00:21,130
solve this morning

00:00:17,820 --> 00:00:22,930
so yeah let's try to do this in a smart

00:00:21,130 --> 00:00:26,980
way the talk will be about rethinking

00:00:22,930 --> 00:00:28,989
Moodle hosting I work at leap we're a

00:00:26,980 --> 00:00:30,970
web agency and we do moodle hosting for

00:00:28,989 --> 00:00:33,070
quite some time now and I think it's the

00:00:30,970 --> 00:00:35,500
first time we redo it differently again

00:00:33,070 --> 00:00:37,150
so we thought it might be a good

00:00:35,500 --> 00:00:40,870
opportunity to talk about it and maybe

00:00:37,150 --> 00:00:45,280
try to link with where Debian interacts

00:00:40,870 --> 00:00:49,180
with this so who we are so as I said

00:00:45,280 --> 00:00:50,770
we're Swiss company lapaki of 150

00:00:49,180 --> 00:00:53,410
employees across Switzerland in five

00:00:50,770 --> 00:00:58,120
offices now and we have had the Moodle

00:00:53,410 --> 00:01:01,200
team since 2005 in various places in

00:00:58,120 --> 00:01:04,869
leap but it has been we've have had we

00:01:01,200 --> 00:01:07,030
have had a moodle team continuously

00:01:04,869 --> 00:01:10,450
since then and that team provides

00:01:07,030 --> 00:01:12,820
consulting and topics development of

00:01:10,450 --> 00:01:18,310
plugins themes customizations

00:01:12,820 --> 00:01:21,580
integrations and SAS hosting hosting so

00:01:18,310 --> 00:01:24,159
we have provided hosting both on our

00:01:21,580 --> 00:01:29,549
infrastructure and also on the client

00:01:24,159 --> 00:01:33,520
premises when it made more sense since

00:01:29,549 --> 00:01:35,799
also me I've worked at leap since 2012

00:01:33,520 --> 00:01:38,950
and I have always been involved in the

00:01:35,799 --> 00:01:41,500
Moodle team since the team has had

00:01:38,950 --> 00:01:42,850
various names but internal names let's

00:01:41,500 --> 00:01:46,450
say it was the Moodle team all the time

00:01:42,850 --> 00:01:50,200
and I'm also doing other things handling

00:01:46,450 --> 00:01:52,030
about internal internal IT and accounts

00:01:50,200 --> 00:01:56,470
handling and other infrastructure topics

00:01:52,030 --> 00:01:58,540
also in inside leap so the first thing I

00:01:56,470 --> 00:02:00,369
wanted to talk about is what we do in

00:01:58,540 --> 00:02:04,390
terms of hosting so and and well also

00:02:00,369 --> 00:02:06,009
what we had so our our topic the the

00:02:04,390 --> 00:02:09,849
problem we try to solve is that we have

00:02:06,009 --> 00:02:12,370
50 different clients sometimes less

00:02:09,849 --> 00:02:14,829
sometimes a little more and we always

00:02:12,370 --> 00:02:16,840
manage in this fleet of 50 clients we

00:02:14,829 --> 00:02:18,460
always manage to two to three sometimes

00:02:16,840 --> 00:02:23,020
more different Moodle made

00:02:18,460 --> 00:02:25,840
releases and despite we might have had

00:02:23,020 --> 00:02:27,220
this hope some times in the past all the

00:02:25,840 --> 00:02:29,470
client codes are actually different

00:02:27,220 --> 00:02:31,330
because they want a different theme they

00:02:29,470 --> 00:02:32,890
have a different customization so it's

00:02:31,330 --> 00:02:34,420
always like the upstream code plus

00:02:32,890 --> 00:02:35,380
something that is client specific

00:02:34,420 --> 00:02:38,370
sometimes it's just a little

00:02:35,380 --> 00:02:42,550
configuration sometimes it's some

00:02:38,370 --> 00:02:45,160
several Sprint's of development so it's

00:02:42,550 --> 00:02:48,660
50 different codes that are mostly

00:02:45,160 --> 00:02:48,660
similar but just different enough

00:02:48,960 --> 00:02:54,700
historically we've have had different

00:02:51,880 --> 00:02:58,390
hosting methods we used to have client

00:02:54,700 --> 00:03:00,280
specific VMs we also did shared hosting

00:02:58,390 --> 00:03:02,770
with Debian packages so we would build

00:03:00,280 --> 00:03:05,230
client specific Debian packages push

00:03:02,770 --> 00:03:07,990
them to a package rep three and then

00:03:05,230 --> 00:03:10,120
accesses routes to the hosting machine

00:03:07,990 --> 00:03:12,280
install the new packages there and

00:03:10,120 --> 00:03:14,830
packages pre instant postings would do

00:03:12,280 --> 00:03:17,470
the backup and all the things that you

00:03:14,830 --> 00:03:19,780
need when you deploy new code and then

00:03:17,470 --> 00:03:25,210
reload the Apache and then everyone's

00:03:19,780 --> 00:03:27,760
happy some years ago we had this push

00:03:25,210 --> 00:03:33,100
internally to focus more on our core

00:03:27,760 --> 00:03:35,200
competence as leap to reduce the time we

00:03:33,100 --> 00:03:39,820
take for doing hosting and focus on

00:03:35,200 --> 00:03:41,860
doing web development and and services

00:03:39,820 --> 00:03:44,740
around Web Services and not necessarily

00:03:41,860 --> 00:03:47,320
around managing machines that I don't

00:03:44,740 --> 00:03:49,690
like doing managing machines is just

00:03:47,320 --> 00:03:51,820
that it's not leaps core vision core

00:03:49,690 --> 00:03:53,710
business so the idea was to move away

00:03:51,820 --> 00:03:55,840
from needing root level access it's also

00:03:53,710 --> 00:03:58,030
linked to the SLA you get because

00:03:55,840 --> 00:03:59,320
usually if you have roots provider will

00:03:58,030 --> 00:04:01,840
say well you can do whatever you want

00:03:59,320 --> 00:04:04,120
but if there is a problem on a Saturday

00:04:01,840 --> 00:04:08,770
then you're also responsible to fix it

00:04:04,120 --> 00:04:11,620
so we we code around then and try to

00:04:08,770 --> 00:04:14,530
find a provider that could say we make

00:04:11,620 --> 00:04:16,690
sure that the apache is up and if

00:04:14,530 --> 00:04:18,489
something happens on the server then we

00:04:16,690 --> 00:04:20,710
will take care of it during the weekend

00:04:18,489 --> 00:04:23,350
and then we would focus on providing

00:04:20,710 --> 00:04:25,900
codes at the right place to do the right

00:04:23,350 --> 00:04:27,750
thing but not having to have a picket

00:04:25,900 --> 00:04:32,260
service or something like that

00:04:27,750 --> 00:04:34,450
so we basically rewrote

00:04:32,260 --> 00:04:37,930
all our deployment codes away from the

00:04:34,450 --> 00:04:40,030
bin packages and we went to so we

00:04:37,930 --> 00:04:42,940
basically have two web servers and one

00:04:40,030 --> 00:04:46,150
shared DB server as a large DB server

00:04:42,940 --> 00:04:47,560
and we spread half the clients on once

00:04:46,150 --> 00:04:49,600
one of the two server and the other half

00:04:47,560 --> 00:04:52,870
on the other server so it's it's a quite

00:04:49,600 --> 00:04:55,360
simple debian like server setup because

00:04:52,870 --> 00:04:58,050
we just put code at the right place a

00:04:55,360 --> 00:05:04,060
configure apache and reload apache and

00:04:58,050 --> 00:05:06,340
it mostly works that said if we want if

00:05:04,060 --> 00:05:09,250
you as we wanted to not have root or not

00:05:06,340 --> 00:05:12,580
need root to deploy we still needed some

00:05:09,250 --> 00:05:15,100
of the things that are needed so we had

00:05:12,580 --> 00:05:16,810
a job to reload apache when i watch fire

00:05:15,100 --> 00:05:18,880
was present so the idea is that at the

00:05:16,810 --> 00:05:20,890
end of your deployment just write a file

00:05:18,880 --> 00:05:24,130
somewhere in temp with a known name and

00:05:20,890 --> 00:05:26,380
a cron job watches temp and says oh

00:05:24,130 --> 00:05:28,990
there is a file name you should reload

00:05:26,380 --> 00:05:30,790
Apache so I reload Apache as root so

00:05:28,990 --> 00:05:34,450
we're not route but we trigger some

00:05:30,790 --> 00:05:36,640
things that happen is root so we need to

00:05:34,450 --> 00:05:40,600
attach it to include load to include

00:05:36,640 --> 00:05:42,760
configuration files from non et Cie pass

00:05:40,600 --> 00:05:46,420
that's easy if you don't have selinux

00:05:42,760 --> 00:05:49,090
for example and then we often have to

00:05:46,420 --> 00:05:52,780
debug things so we needed to be able to

00:05:49,090 --> 00:05:56,680
sudo 2ww data so we have password less

00:05:52,780 --> 00:05:59,160
access to w WD t for debugging purposes

00:05:56,680 --> 00:06:02,350
and stuff and then we also realize that

00:05:59,160 --> 00:06:04,210
reloading trying to reload or attempting

00:06:02,350 --> 00:06:06,070
to reload apache every five minutes is

00:06:04,210 --> 00:06:08,830
slow because five minute can be long

00:06:06,070 --> 00:06:11,350
after deployment watching a file every

00:06:08,830 --> 00:06:13,450
one minute is kind of too fast so we

00:06:11,350 --> 00:06:16,150
figured we can also just system control

00:06:13,450 --> 00:06:17,770
reload and we have a password less sudo

00:06:16,150 --> 00:06:20,590
to call system control reload which

00:06:17,770 --> 00:06:24,390
achieves exactly the same result so it's

00:06:20,590 --> 00:06:29,340
smarter pseudo configuration rather than

00:06:24,390 --> 00:06:29,340
turning around what we need so basically

00:06:30,420 --> 00:06:36,610
so what a deployment cut code does now

00:06:33,520 --> 00:06:38,770
is it does client specific Moodle

00:06:36,610 --> 00:06:40,690
configuration so we generates Apache

00:06:38,770 --> 00:06:43,120
configuration files that are also

00:06:40,690 --> 00:06:45,580
specific to the clients we can add some

00:06:43,120 --> 00:06:46,240
configurations that are specific we can

00:06:45,580 --> 00:06:50,830
configure

00:06:46,240 --> 00:06:52,360
Shibboleth for example we added over the

00:06:50,830 --> 00:06:54,520
course of time we added to the handling

00:06:52,360 --> 00:06:56,319
of let's encrypt certificates we clean

00:06:54,520 --> 00:06:57,910
the cache before that we download or

00:06:56,319 --> 00:07:01,419
update the Moodle specific language

00:06:57,910 --> 00:07:03,190
packs so initially it started like well

00:07:01,419 --> 00:07:05,770
deploying Moodle code is easy we just

00:07:03,190 --> 00:07:07,810
put a PHP somewhere you write the Apache

00:07:05,770 --> 00:07:09,430
server server configuration and you

00:07:07,810 --> 00:07:11,289
reload Apache and then you realize that

00:07:09,430 --> 00:07:13,210
you need to clean the cash you need to

00:07:11,289 --> 00:07:15,389
make sure that the language pads are

00:07:13,210 --> 00:07:18,220
updated you need to write scripts and

00:07:15,389 --> 00:07:25,419
you add all these little things there

00:07:18,220 --> 00:07:28,090
are things in this in this codebase the

00:07:25,419 --> 00:07:30,070
advantages of this setup is that the

00:07:28,090 --> 00:07:32,289
cost is shared so we buy two large

00:07:30,070 --> 00:07:33,699
servers and we put the clients we can

00:07:32,289 --> 00:07:37,060
put on these servers is the better

00:07:33,699 --> 00:07:40,780
because we pay for the server and then

00:07:37,060 --> 00:07:43,090
we just shard all the clients in there

00:07:40,780 --> 00:07:46,150
and we don't pay more just because we

00:07:43,090 --> 00:07:48,220
have more clients the Linux operations

00:07:46,150 --> 00:07:49,900
are classic so if you log in on the

00:07:48,220 --> 00:07:50,590
server it's quite easy to find your way

00:07:49,900 --> 00:07:53,860
around

00:07:50,590 --> 00:07:56,470
it's just that Apache was PHP that runs

00:07:53,860 --> 00:07:58,210
and we're not root so it's whenever it

00:07:56,470 --> 00:08:02,949
fails it's basically none of our

00:07:58,210 --> 00:08:04,360
business there are some cons and that's

00:08:02,949 --> 00:08:06,669
also why we looked for something

00:08:04,360 --> 00:08:09,580
different the deployment is procedural

00:08:06,669 --> 00:08:13,180
so it's a set of actually it was

00:08:09,580 --> 00:08:16,870
Capistrano - so it's old Ruby it was not

00:08:13,180 --> 00:08:19,659
old back then but now it's old so it

00:08:16,870 --> 00:08:22,419
goes through a set of steps and if one

00:08:19,659 --> 00:08:25,000
of the steps break then they break

00:08:22,419 --> 00:08:28,570
sufficiently rarely that we'd never

00:08:25,000 --> 00:08:31,509
really finished the rope back so if it

00:08:28,570 --> 00:08:34,839
fails somewhere then you have done six

00:08:31,509 --> 00:08:36,490
of the ten steps and it you're there so

00:08:34,839 --> 00:08:39,099
you have to fix by yourself because the

00:08:36,490 --> 00:08:41,979
rollback you kind of know how you do it

00:08:39,099 --> 00:08:46,300
but it's not scripted it's kind of slow

00:08:41,979 --> 00:08:49,600
we use a mechanism that is based on on

00:08:46,300 --> 00:08:51,700
get to push the new code updates but our

00:08:49,600 --> 00:08:53,260
idea is was that you need to be able to

00:08:51,700 --> 00:08:56,079
push the server that does not have

00:08:53,260 --> 00:08:59,860
internet access so what we did is we

00:08:56,079 --> 00:09:01,600
create a local branch for that server

00:08:59,860 --> 00:09:03,190
so before pushing to that server we

00:09:01,600 --> 00:09:03,610
asked the server what version of the

00:09:03,190 --> 00:09:05,950
kashi

00:09:03,610 --> 00:09:07,900
it has we've downloaded if we don't have

00:09:05,950 --> 00:09:10,330
it and then we create the new new

00:09:07,900 --> 00:09:12,790
version on top that's but the Moodle

00:09:10,330 --> 00:09:15,220
code is 150 Meg's and sometimes now we

00:09:12,790 --> 00:09:17,650
have sub modules so creating the new

00:09:15,220 --> 00:09:22,270
diff to be able to push it slow so

00:09:17,650 --> 00:09:24,760
deployment can take some minutes it's

00:09:22,270 --> 00:09:27,070
fragile because it's old ruby plus some

00:09:24,760 --> 00:09:27,970
shell scripts plus cron manual cron jobs

00:09:27,070 --> 00:09:31,060
to make sure the let's encrypt

00:09:27,970 --> 00:09:33,280
certificates are renewed so as all

00:09:31,060 --> 00:09:35,890
things fragile as long as you don't push

00:09:33,280 --> 00:09:40,710
the vase away from the table it's nice

00:09:35,890 --> 00:09:45,430
it works but you're always not so sure

00:09:40,710 --> 00:09:47,850
it will survive all so that's probably

00:09:45,430 --> 00:09:51,730
our fault but client isolation is weak

00:09:47,850 --> 00:09:54,670
we did not use PHP fpm back then so all

00:09:51,730 --> 00:09:58,510
the clients run under the same apache

00:09:54,670 --> 00:10:01,420
user the resource per shared so we

00:09:58,510 --> 00:10:04,960
didn't do continent continent container

00:10:01,420 --> 00:10:07,210
irritation so when one client suddenly

00:10:04,960 --> 00:10:10,060
says oh I have a classroom with 150

00:10:07,210 --> 00:10:12,370
students let's all ask them to load the

00:10:10,060 --> 00:10:15,270
same Moodle course well then it effects

00:10:12,370 --> 00:10:17,890
the other clients on the same server and

00:10:15,270 --> 00:10:19,900
things like it's a VM so whenever you

00:10:17,890 --> 00:10:21,970
want to enlarge the disk you have to ask

00:10:19,900 --> 00:10:23,680
the provider to give you more disk and

00:10:21,970 --> 00:10:25,750
they would enlarge of the filesystem and

00:10:23,680 --> 00:10:29,410
you take Apache down for all the 30

00:10:25,750 --> 00:10:31,450
clients on that server so and we have no

00:10:29,410 --> 00:10:33,100
live up scale so whenever you want more

00:10:31,450 --> 00:10:35,410
performance then you either have to

00:10:33,100 --> 00:10:37,360
coordinate with the hoster to give you

00:10:35,410 --> 00:10:39,940
more CPUs for some time and then reboot

00:10:37,360 --> 00:10:44,700
to get less CPUs whenever your etcetera

00:10:39,940 --> 00:10:47,310
and you cannot down scale this basically

00:10:44,700 --> 00:10:50,530
so basically it's a system that works

00:10:47,310 --> 00:10:52,780
it's been working with we still have

00:10:50,530 --> 00:10:58,870
most of our clients on this system it

00:10:52,780 --> 00:11:02,740
works but it's it shows its age so then

00:10:58,870 --> 00:11:05,020
we open the whiteboard and try to figure

00:11:02,740 --> 00:11:07,900
what what would be our ideal setup in an

00:11:05,020 --> 00:11:10,600
ideal world what what we try to achieve

00:11:07,900 --> 00:11:13,840
is to be able to manage these instances

00:11:10,600 --> 00:11:16,180
not at as individual snowflakes but

00:11:13,840 --> 00:11:19,870
to see them as a fleet so that we can

00:11:16,180 --> 00:11:23,590
say I want to deploy the minor upgrade

00:11:19,870 --> 00:11:25,180
for all the Moodle 35 so we want things

00:11:23,590 --> 00:11:26,920
to happen and not the developer to have

00:11:25,180 --> 00:11:29,170
to go through the loop of all the

00:11:26,920 --> 00:11:30,970
clients and do the merge themselves and

00:11:29,170 --> 00:11:34,110
do the deployment themself hoping it

00:11:30,970 --> 00:11:36,850
doesn't break building and testing in CI

00:11:34,110 --> 00:11:39,430
sounds like the thing to be done but

00:11:36,850 --> 00:11:42,930
it's not that easy also automatically

00:11:39,430 --> 00:11:45,400
deploy in continuous deployment

00:11:42,930 --> 00:11:47,290
currently a developer needs to have his

00:11:45,400 --> 00:11:49,630
key on the server and he will run the

00:11:47,290 --> 00:11:51,250
code on his machine to do the deployment

00:11:49,630 --> 00:11:53,470
so it's good because we know who is

00:11:51,250 --> 00:11:55,110
deploying but on the other hand it needs

00:11:53,470 --> 00:11:59,890
a special setup on the developer machine

00:11:55,110 --> 00:12:01,990
so it's it's again it's fragile we want

00:11:59,890 --> 00:12:03,790
the instances to be independent at least

00:12:01,990 --> 00:12:05,800
more independent than they are now we

00:12:03,790 --> 00:12:07,350
want more scalability and the thing we

00:12:05,800 --> 00:12:10,330
were looking for is also paper use

00:12:07,350 --> 00:12:12,610
because with two large servers whenever

00:12:10,330 --> 00:12:14,770
you want an increase in disk space you

00:12:12,610 --> 00:12:17,410
will pay that increased disk space and

00:12:14,770 --> 00:12:19,810
the backup and the SLA and all the

00:12:17,410 --> 00:12:21,850
things that go along before you really

00:12:19,810 --> 00:12:24,640
know you will be using it so sometimes

00:12:21,850 --> 00:12:25,839
you try to to play the game that to

00:12:24,640 --> 00:12:28,210
increase but not too much because

00:12:25,839 --> 00:12:29,470
increasing too much is costly but then

00:12:28,210 --> 00:12:31,960
you have to increase again two months

00:12:29,470 --> 00:12:35,380
later so we wanted something that would

00:12:31,960 --> 00:12:37,720
be paper use and also something that is

00:12:35,380 --> 00:12:39,339
that was for us completely logical it is

00:12:37,720 --> 00:12:41,650
also part of what if we offer is hosting

00:12:39,339 --> 00:12:45,670
in Switzerland just because of data loss

00:12:41,650 --> 00:12:47,350
and all of that first it's important so

00:12:45,670 --> 00:12:49,990
there's a there is a set of obvious

00:12:47,350 --> 00:12:52,540
candidates so of course if you ask

00:12:49,990 --> 00:12:58,770
around everyone says docker containers

00:12:52,540 --> 00:13:02,440
do cornutus openshift a document in sure

00:12:58,770 --> 00:13:04,240
the thing is as a web agency it's we

00:13:02,440 --> 00:13:06,630
didn't really have enough experience

00:13:04,240 --> 00:13:08,950
there so installing a kubernetes cluster

00:13:06,630 --> 00:13:11,709
sounds fun and then you start reading

00:13:08,950 --> 00:13:13,900
and then it's not fun so it's and also

00:13:11,709 --> 00:13:16,600
it's not our job it's not what we do I

00:13:13,900 --> 00:13:18,880
might enjoy it in my debian or private

00:13:16,600 --> 00:13:21,940
time but and that's not necessarily our

00:13:18,880 --> 00:13:25,300
focus also we don't want to maintain

00:13:21,940 --> 00:13:27,360
things at this layer what we provide is

00:13:25,300 --> 00:13:29,610
a Moodle that is up and run

00:13:27,360 --> 00:13:31,440
I don't want to care about discs based

00:13:29,610 --> 00:13:33,540
disk usage io problems

00:13:31,440 --> 00:13:37,589
CPU problems it's all very interesting

00:13:33,540 --> 00:13:40,740
but it's none of my business as leaper

00:13:37,589 --> 00:13:42,480
and often at least what we when we

00:13:40,740 --> 00:13:44,910
looked for it often you pay for a whole

00:13:42,480 --> 00:13:47,370
cluster so oh you want kubernetes how

00:13:44,910 --> 00:13:51,149
many terabytes you want how many virtual

00:13:47,370 --> 00:13:53,310
CPUs in dozens do you want and also for

00:13:51,149 --> 00:13:55,140
upscaling and investigating it sounded

00:13:53,310 --> 00:13:57,089
like way too expensive for us to just

00:13:55,140 --> 00:13:58,980
investigate and see if that's really

00:13:57,089 --> 00:14:02,850
what we want to do and it so it's not

00:13:58,980 --> 00:14:07,019
paper use some research later we found

00:14:02,850 --> 00:14:09,950
this jelastic jelastic is actually an

00:14:07,019 --> 00:14:17,279
American company they they provide a

00:14:09,950 --> 00:14:20,880
system it's partially proprietary but it

00:14:17,279 --> 00:14:22,740
has this paper use it has an API so we

00:14:20,880 --> 00:14:25,769
can talk to it or without having to

00:14:22,740 --> 00:14:27,240
access the interface it does docker more

00:14:25,769 --> 00:14:29,550
on that later

00:14:27,240 --> 00:14:31,860
and there's not only one but there are

00:14:29,550 --> 00:14:34,980
multiple hosters in switzerland that use

00:14:31,860 --> 00:14:36,839
the same jelastic thingy so for us it

00:14:34,980 --> 00:14:39,329
was also good to not be tied to only one

00:14:36,839 --> 00:14:42,060
provider we are we had also investigated

00:14:39,329 --> 00:14:43,350
other types of hosting but there would

00:14:42,060 --> 00:14:45,329
be in Germany and they would be

00:14:43,350 --> 00:14:47,100
promising to come in Switzerland but

00:14:45,329 --> 00:14:49,740
only if we would commit to that amount

00:14:47,100 --> 00:14:50,430
of clients so it's also hard to get

00:14:49,740 --> 00:14:51,930
bootstrapped

00:14:50,430 --> 00:14:57,779
before you really know that's the thing

00:14:51,930 --> 00:15:00,630
you want to do all good then so why we

00:14:57,779 --> 00:15:03,839
picked it now that we have a little

00:15:00,630 --> 00:15:06,089
experience with it I can maybe show how

00:15:03,839 --> 00:15:08,040
it looks like so basically jelastic is

00:15:06,089 --> 00:15:10,430
looks like that I don't know if you see

00:15:08,040 --> 00:15:10,430
something

00:15:13,089 --> 00:15:22,419
it's a clicky clicky interface where you

00:15:15,759 --> 00:15:25,649
can let's refresh for the web thingy to

00:15:22,419 --> 00:15:28,809
be in this at the center of the screen

00:15:25,649 --> 00:15:32,529
it's a clicky click interface in which

00:15:28,809 --> 00:15:36,969
you can say well I want to have a PHP

00:15:32,529 --> 00:15:40,589
application with SSL I want an edge Enix

00:15:36,969 --> 00:15:44,889
for load balancing I want my DB and

00:15:40,589 --> 00:15:46,959
maybe there's some storage I know the

00:15:44,889 --> 00:15:49,269
Apache will consume a lot of CPU so

00:15:46,959 --> 00:15:54,399
let's go up to 13 gigabytes of memory

00:15:49,269 --> 00:15:55,839
and create and then it orchestrates it

00:15:54,399 --> 00:15:57,819
does a lot of things behind the scenes

00:15:55,839 --> 00:15:59,229
and it would provide you this

00:15:57,819 --> 00:16:02,529
environment basically in minutes and

00:15:59,229 --> 00:16:06,879
then you can pose it stop it restarted

00:16:02,529 --> 00:16:12,969
and do other things so that's that's the

00:16:06,879 --> 00:16:14,649
interface it supports our containers it

00:16:12,969 --> 00:16:17,709
has this auto scaling idea that

00:16:14,649 --> 00:16:20,499
basically you pay per use so if you

00:16:17,709 --> 00:16:22,629
commit to more than than the minimum you

00:16:20,499 --> 00:16:24,999
would get a discount on the amount of

00:16:22,629 --> 00:16:26,769
the resources used so if you say I'm not

00:16:24,999 --> 00:16:29,349
going to use one but I'm gone I'm gonna

00:16:26,769 --> 00:16:31,899
use five then the additional thing you

00:16:29,349 --> 00:16:34,629
would pay is slightly less expensive and

00:16:31,899 --> 00:16:37,029
you can say I'm ready to pay this

00:16:34,629 --> 00:16:39,099
minimum and I only want to go up to this

00:16:37,029 --> 00:16:44,129
maximum so if the resource usage is more

00:16:39,099 --> 00:16:46,779
than this then it doesn't happen the the

00:16:44,129 --> 00:16:50,589
layers are preparatory some parts are on

00:16:46,779 --> 00:16:56,529
github it's apparently a large bunch of

00:16:50,589 --> 00:16:58,269
shell scripts that do stuff but for us

00:16:56,529 --> 00:17:00,369
the counter-argument is that it's as

00:16:58,269 --> 00:17:03,159
proprietary as VMware is so when you

00:17:00,369 --> 00:17:04,899
have a VM it's hosted on VMware I don't

00:17:03,159 --> 00:17:09,009
know how VMware works but what matters

00:17:04,899 --> 00:17:12,039
is that my VM is Debian so jelastic has

00:17:09,009 --> 00:17:14,649
an interface has an API it's proprietary

00:17:12,039 --> 00:17:21,159
but well I guess I can survive that or

00:17:14,649 --> 00:17:23,169
at least we can survive so far so docker

00:17:21,159 --> 00:17:25,509
is wonderful right so you just take

00:17:23,169 --> 00:17:26,300
Apache PHP you just add the Moodle code

00:17:25,509 --> 00:17:31,240
and your

00:17:26,300 --> 00:17:37,040
right you see parties hosting is hard

00:17:31,240 --> 00:17:38,830
Hosting is a hard problem maybe more on

00:17:37,040 --> 00:17:43,220
that later

00:17:38,830 --> 00:17:45,260
well yeah maybe not Brody's not that the

00:17:43,220 --> 00:17:47,120
point I want to make here is that the I

00:17:45,260 --> 00:17:49,700
think there's a fallacy in the docker

00:17:47,120 --> 00:17:51,050
worlds that if it works in your dev

00:17:49,700 --> 00:17:54,190
machine you can just go to production

00:17:51,050 --> 00:17:56,030
and I think that's totally wrong and

00:17:54,190 --> 00:17:57,950
actually what I try to push my

00:17:56,030 --> 00:17:59,840
colleagues to is like we can do Tucker

00:17:57,950 --> 00:18:02,180
in dev that's fine and we should have

00:17:59,840 --> 00:18:03,830
images fantastic for local development

00:18:02,180 --> 00:18:05,690
and we can also use the current

00:18:03,830 --> 00:18:07,100
production and we can optimize the

00:18:05,690 --> 00:18:08,630
machines to be fine for depth for

00:18:07,100 --> 00:18:11,240
production but they don't have to be the

00:18:08,630 --> 00:18:15,170
same because the constraint are not at

00:18:11,240 --> 00:18:17,410
all the same and as its for examples you

00:18:15,170 --> 00:18:19,820
don't necessarily want emails to be sent

00:18:17,410 --> 00:18:22,640
when you do local development but you

00:18:19,820 --> 00:18:25,670
want them to be sent reliably if you go

00:18:22,640 --> 00:18:27,170
in production PHP don't want PHP X the

00:18:25,670 --> 00:18:30,560
bug to be installed on the production

00:18:27,170 --> 00:18:33,980
instances the thing we also discovered

00:18:30,560 --> 00:18:37,010
or that we knew but that became a fun

00:18:33,980 --> 00:18:39,770
problem to debug was that Moodle can and

00:18:37,010 --> 00:18:42,530
should use a local clamavi antivirus

00:18:39,770 --> 00:18:45,020
daemon locally certain it expects or it

00:18:42,530 --> 00:18:47,600
can expect a local sockets to use an

00:18:45,020 --> 00:18:53,420
anti-virus but it has to be in the same

00:18:47,600 --> 00:18:55,550
machine and when you use the default

00:18:53,420 --> 00:18:57,010
images that are either jelastic or the

00:18:55,550 --> 00:18:59,930
one you find in on the docker hub

00:18:57,010 --> 00:19:01,820
sometimes you have default settings that

00:18:59,930 --> 00:19:03,940
don't exactly fit what you want to do

00:19:01,820 --> 00:19:06,560
for example the default PostgreSQL

00:19:03,940 --> 00:19:08,660
container is fine but as soon as you

00:19:06,560 --> 00:19:10,280
load it then you realize that a little

00:19:08,660 --> 00:19:14,170
more memory here or changing these

00:19:10,280 --> 00:19:17,750
settings here could make sense and you'd

00:19:14,170 --> 00:19:20,060
you quite soon you discover that you

00:19:17,750 --> 00:19:24,560
want to build your custom images to do

00:19:20,060 --> 00:19:27,020
some of the things also jelastic says we

00:19:24,560 --> 00:19:28,900
support darker but jurassic is not the

00:19:27,020 --> 00:19:31,010
dog demon

00:19:28,900 --> 00:19:33,950
actually if you look behind the scenes

00:19:31,010 --> 00:19:37,760
it's more virtuozzo than docker that

00:19:33,950 --> 00:19:39,440
means that actually it's there VMs what

00:19:37,760 --> 00:19:42,230
it means by that is that

00:19:39,440 --> 00:19:43,490
when jelastic takes a vm it would try to

00:19:42,230 --> 00:19:45,770
guess what

00:19:43,490 --> 00:19:48,650
on what OS or what OS it was made based

00:19:45,770 --> 00:19:51,230
on would put a vm template of that and

00:19:48,650 --> 00:19:53,750
unzip or extracts your docker container

00:19:51,230 --> 00:19:57,440
on top of that and execute the docker

00:19:53,750 --> 00:20:00,800
entry point and command to protect

00:19:57,440 --> 00:20:03,470
stucker so it's not actually darker but

00:20:00,800 --> 00:20:05,600
it can run a stretch based docker

00:20:03,470 --> 00:20:07,760
container but it cannot run a busser

00:20:05,600 --> 00:20:12,590
based docker container because they just

00:20:07,760 --> 00:20:15,470
haven't made the Buster template yet and

00:20:12,590 --> 00:20:18,100
also you rapidly discover that some

00:20:15,470 --> 00:20:22,250
templates are broken for example the

00:20:18,100 --> 00:20:24,620
last we looked the stretch the stretch

00:20:22,250 --> 00:20:26,690
template has exome for that's broken so

00:20:24,620 --> 00:20:31,240
just doesn't boot because the config

00:20:26,690 --> 00:20:33,440
file the log file and has wrong data

00:20:31,240 --> 00:20:39,080
apparently I'm very shorten time I'm

00:20:33,440 --> 00:20:42,440
surprised so instead of looking at this

00:20:39,080 --> 00:20:45,910
as a problem we more looked at this as a

00:20:42,440 --> 00:20:50,570
solution and the fact that instead of

00:20:45,910 --> 00:20:52,580
sticking to the docker concept that it

00:20:50,570 --> 00:20:54,590
has to run only one service we just

00:20:52,580 --> 00:20:57,980
consider docker to be basically a

00:20:54,590 --> 00:21:01,190
template it's a VM templates so we start

00:20:57,980 --> 00:21:05,230
some of the things as would be expected

00:21:01,190 --> 00:21:07,850
in the darker world we launch apache

00:21:05,230 --> 00:21:09,950
without forking but we also make sure

00:21:07,850 --> 00:21:12,500
that our docker container has

00:21:09,950 --> 00:21:17,300
configuration for X and for at when it

00:21:12,500 --> 00:21:20,090
said in the VM we can send emails we can

00:21:17,300 --> 00:21:22,220
use system Li timers so we can actually

00:21:20,090 --> 00:21:23,660
run the moodle cron directly in the vm b

00:21:22,220 --> 00:21:26,000
and we don't have to orchestrates the

00:21:23,660 --> 00:21:28,820
cron otherwise because it just happens

00:21:26,000 --> 00:21:33,470
to work the vm have system control and

00:21:28,820 --> 00:21:37,610
system D so they do what we want so what

00:21:33,470 --> 00:21:42,320
we did is built Debian stable based

00:21:37,610 --> 00:21:45,530
containers so we take the I think

00:21:42,320 --> 00:21:47,420
stretch slim from the docker hub because

00:21:45,530 --> 00:21:50,060
they are built by known Debian

00:21:47,420 --> 00:21:53,780
developers we make sure that they are

00:21:50,060 --> 00:21:57,830
upgraded in our CI and then we add

00:21:53,780 --> 00:22:01,730
would code the thing we also do is that

00:21:57,830 --> 00:22:03,470
we use the layered approach so initially

00:22:01,730 --> 00:22:05,660
we just started with one or two images

00:22:03,470 --> 00:22:07,550
and then we realize we had many things

00:22:05,660 --> 00:22:11,440
in common in all these images things

00:22:07,550 --> 00:22:13,760
like fixing xm4 or setting the time zone

00:22:11,440 --> 00:22:16,160
if you don't set the time zone then your

00:22:13,760 --> 00:22:18,050
image is UTC and whenever you log in the

00:22:16,160 --> 00:22:20,360
day it is weird or the formats are weird

00:22:18,050 --> 00:22:21,610
so you want to set the time zone

00:22:20,360 --> 00:22:24,830
something that makes sense

00:22:21,610 --> 00:22:27,380
so we built a jelastic base image that's

00:22:24,830 --> 00:22:30,260
just basically Debian stretch plus

00:22:27,380 --> 00:22:34,060
whatever we needs to play nicely there

00:22:30,260 --> 00:22:36,620
and then we build a whole fleet of of

00:22:34,060 --> 00:22:38,930
soccer images that are built on top of

00:22:36,620 --> 00:22:43,610
each other so that we don't have to redo

00:22:38,930 --> 00:22:47,300
everything every time one thing that was

00:22:43,610 --> 00:22:52,130
important for us was to measure we

00:22:47,300 --> 00:22:53,930
already had some monitoring's setup but

00:22:52,130 --> 00:22:56,960
in that monitoring setup we had a lot of

00:22:53,930 --> 00:22:58,730
noise because we used Manan and by

00:22:56,960 --> 00:23:00,850
default manning will measure if you have

00:22:58,730 --> 00:23:03,830
io problems on your machine or other

00:23:00,850 --> 00:23:07,640
things and we often had warnings for

00:23:03,830 --> 00:23:09,350
things that we didn't care about after

00:23:07,640 --> 00:23:12,680
looking for some different metric things

00:23:09,350 --> 00:23:16,310
we fell back on running again because

00:23:12,680 --> 00:23:17,900
money is easy actually it's easy to

00:23:16,310 --> 00:23:20,330
write plug-ins for basically have to

00:23:17,900 --> 00:23:22,430
just say this is the value and this is

00:23:20,330 --> 00:23:24,890
the number and the configuration is some

00:23:22,430 --> 00:23:28,750
line so it's quite straightforward to

00:23:24,890 --> 00:23:32,390
write a Python based plug-in from onion

00:23:28,750 --> 00:23:34,400
so what we measure now is is a complete

00:23:32,390 --> 00:23:37,370
email loop so we ask the Moodle instance

00:23:34,400 --> 00:23:39,470
tandem Gmail and then we orchestrates

00:23:37,370 --> 00:23:41,450
the gmail account to check if the mail

00:23:39,470 --> 00:23:44,540
arrived so we can make sure that the

00:23:41,450 --> 00:23:45,860
mood whenever Moodle sends emails we can

00:23:44,540 --> 00:23:47,780
make sure that they actually cross the

00:23:45,860 --> 00:23:50,240
internet and arrive where we want them

00:23:47,780 --> 00:23:52,640
to arrive and suddenly you discover that

00:23:50,240 --> 00:23:54,830
some client have configured weird SMTP

00:23:52,640 --> 00:23:58,370
servers so you can know before them that

00:23:54,830 --> 00:24:00,080
the Mail's don't actually go out we

00:23:58,370 --> 00:24:02,929
measure cloudlets and disk usage per

00:24:00,080 --> 00:24:04,700
node these are jelastic specific we

00:24:02,929 --> 00:24:06,920
measure the application response time on

00:24:04,700 --> 00:24:07,520
very small endpoints just to see if it's

00:24:06,920 --> 00:24:10,460
still there

00:24:07,520 --> 00:24:12,500
and it gives us stats back we measure

00:24:10,460 --> 00:24:15,230
the time since the last cron job was run

00:24:12,500 --> 00:24:18,230
since the last backup rather on some

00:24:15,230 --> 00:24:22,070
measures about usage we apply our own

00:24:18,230 --> 00:24:26,150
quotas about disk and about users so we

00:24:22,070 --> 00:24:28,850
measure we measure that but paper use

00:24:26,150 --> 00:24:33,470
has drawbacks if I if I can show you

00:24:28,850 --> 00:24:36,230
quickly one example so this is a

00:24:33,470 --> 00:24:38,030
measurements on that so that's the fancy

00:24:36,230 --> 00:24:39,520
man in front end but it's basically the

00:24:38,030 --> 00:24:42,800
monographs

00:24:39,520 --> 00:24:46,100
that's the marine measurements and these

00:24:42,800 --> 00:24:47,960
Peaks are actually when we when someone

00:24:46,100 --> 00:24:50,980
a plop file and needs clamavi the

00:24:47,960 --> 00:24:53,570
antivirus so we move from three

00:24:50,980 --> 00:24:56,120
cloudlets so that's basically 600

00:24:53,570 --> 00:24:58,430
megabytes of memory to 9 so we tripled

00:24:56,120 --> 00:25:00,800
the memory usage because climate clamavi

00:24:58,430 --> 00:25:04,040
loads the whole antivirus database in

00:25:00,800 --> 00:25:08,600
memory so it just uses 750 megabytes of

00:25:04,040 --> 00:25:11,330
memory just to sit there which is good

00:25:08,600 --> 00:25:13,760
because then it's there but on an

00:25:11,330 --> 00:25:16,010
instance that's barely used we would pay

00:25:13,760 --> 00:25:18,170
for that memory usage because it would

00:25:16,010 --> 00:25:21,830
not be released because clamavi wants it

00:25:18,170 --> 00:25:23,990
to be readily available other things

00:25:21,830 --> 00:25:26,960
that are visible on the right here is

00:25:23,990 --> 00:25:29,660
that we use so to have a higher database

00:25:26,960 --> 00:25:33,500
usage is it's because we used money to

00:25:29,660 --> 00:25:35,120
ask for stats so and money runs by

00:25:33,500 --> 00:25:38,750
default every five minutes so you run

00:25:35,120 --> 00:25:41,060
heavies SQL requests every 5 minutes so

00:25:38,750 --> 00:25:42,590
your PostgreSQL server is like yeah I

00:25:41,060 --> 00:25:45,170
will just put that everything in memory

00:25:42,590 --> 00:25:47,390
so that everything is faster that also

00:25:45,170 --> 00:25:49,550
means that you consume seven more

00:25:47,390 --> 00:25:52,550
cloudlets so you just pay more because

00:25:49,550 --> 00:25:54,590
you want measures like how many users

00:25:52,550 --> 00:25:55,730
were connected in the last year and you

00:25:54,590 --> 00:25:58,340
ask that every 5 minutes

00:25:55,730 --> 00:26:00,710
so then you introduce a little cap and

00:25:58,340 --> 00:26:03,880
when you're caching hits then use less

00:26:00,710 --> 00:26:03,880
memory and less money

00:26:04,040 --> 00:26:11,510
apparently I'm way out of time so I'll

00:26:06,770 --> 00:26:13,700
try to focus and try to finish so yeah

00:26:11,510 --> 00:26:14,900
one learning here is that it's also the

00:26:13,700 --> 00:26:17,240
uncertainty principle

00:26:14,900 --> 00:26:20,410
you cannot sometimes you affect what you

00:26:17,240 --> 00:26:23,680
measure so

00:26:20,410 --> 00:26:27,130
we actually patched clamavi - to react

00:26:23,680 --> 00:26:31,000
on socket activation to ping the system

00:26:27,130 --> 00:26:32,740
the system D watchdog every time you

00:26:31,000 --> 00:26:35,740
upload a file and if there was no

00:26:32,740 --> 00:26:39,390
watchdog ping in one hour it would shut

00:26:35,740 --> 00:26:42,070
down that's why the peak come back down

00:26:39,390 --> 00:26:43,630
apparently it works sometimes we have

00:26:42,070 --> 00:26:48,490
errors that we haven't debugged yet but

00:26:43,630 --> 00:26:51,040
it does what we expect it to do and also

00:26:48,490 --> 00:26:55,270
yeah we introduced caching - to reduce

00:26:51,040 --> 00:26:57,820
the usage one word of warning about the

00:26:55,270 --> 00:27:04,390
jelastic api the documentation is often

00:26:57,820 --> 00:27:06,340
bad yeah I know I'm over time yeah so

00:27:04,390 --> 00:27:08,560
yeah the api is bad

00:27:06,340 --> 00:27:11,290
sometimes just says this is a method

00:27:08,560 --> 00:27:13,510
that does this no information about the

00:27:11,290 --> 00:27:15,790
arguments nor the outputs but we

00:27:13,510 --> 00:27:17,140
orchestrated all of these to be able to

00:27:15,790 --> 00:27:20,140
clone to trigger redeploys

00:27:17,140 --> 00:27:24,100
Lounge commands and measure let me see

00:27:20,140 --> 00:27:28,660
what I wanted to talk about yeah let's

00:27:24,100 --> 00:27:31,000
move directly to the conclusions redoing

00:27:28,660 --> 00:27:33,190
hosting initially we were like yeah poof

00:27:31,000 --> 00:27:36,220
containers that's the new thing in one

00:27:33,190 --> 00:27:39,550
week we will be done easy well actually

00:27:36,220 --> 00:27:41,830
get lab C is hard building docker images

00:27:39,550 --> 00:27:44,170
is not so easy if you want to build them

00:27:41,830 --> 00:27:46,660
in a non privileged way so we used Kanak

00:27:44,170 --> 00:27:49,030
oh that's a Google thing to build images

00:27:46,660 --> 00:27:51,430
in a non privileged way if you want to

00:27:49,030 --> 00:27:54,880
tag images docker login needs a docker

00:27:51,430 --> 00:27:56,860
demon so you use crane that's another go

00:27:54,880 --> 00:27:59,460
daemon to actually log into the docker

00:27:56,860 --> 00:28:01,810
registry to be able to tag images of

00:27:59,460 --> 00:28:06,130
course you discover the specialties of

00:28:01,810 --> 00:28:07,750
jelastic as we go and yuri also realized

00:28:06,130 --> 00:28:09,430
that you take on more responsibility

00:28:07,750 --> 00:28:11,620
before the holster would be doing the

00:28:09,430 --> 00:28:13,600
backups for us and we would pay quite

00:28:11,620 --> 00:28:15,130
some money every year so that we could

00:28:13,600 --> 00:28:17,740
phone them and they would give us a

00:28:15,130 --> 00:28:19,180
backup pack now if we want to have a

00:28:17,740 --> 00:28:24,010
moodle specific backup then we have to

00:28:19,180 --> 00:28:28,900
build the backup system ourselves that I

00:28:24,010 --> 00:28:31,180
said jelastic is not perfect but for now

00:28:28,900 --> 00:28:33,650
we're sticking with it for for these

00:28:31,180 --> 00:28:35,630
three reasons in the

00:28:33,650 --> 00:28:38,870
instances are clearly independent now

00:28:35,630 --> 00:28:40,909
it's just different VMs it has this

00:28:38,870 --> 00:28:43,130
scalability we did quite some load

00:28:40,909 --> 00:28:46,730
testing and it reacts as you would

00:28:43,130 --> 00:28:48,980
expect up to several dozens of gigabytes

00:28:46,730 --> 00:28:51,830
of memory for PHP suddenly and then it

00:28:48,980 --> 00:28:53,330
reduces back to not costing much so you

00:28:51,830 --> 00:28:56,870
have this up and down scalability which

00:28:53,330 --> 00:28:58,640
is good for us we have a lot of small

00:28:56,870 --> 00:29:00,980
clients that barely use their instances

00:28:58,640 --> 00:29:03,500
so this paper use is first a good way to

00:29:00,980 --> 00:29:04,909
spare a lot of money because when they

00:29:03,500 --> 00:29:06,230
want to use it then it has all the

00:29:04,909 --> 00:29:11,659
performance it needs and the rest of the

00:29:06,230 --> 00:29:12,529
year is just sleeping around and if it

00:29:11,659 --> 00:29:15,140
looks like docker

00:29:12,529 --> 00:29:17,690
it smells like Tucker well it's it's

00:29:15,140 --> 00:29:19,640
still not Tucker so as soon as you know

00:29:17,690 --> 00:29:21,529
this then you consider the docker idea

00:29:19,640 --> 00:29:25,399
differently but actually we use or abuse

00:29:21,529 --> 00:29:28,610
this to use actual VMs but from docker

00:29:25,399 --> 00:29:30,409
containers images and we also had to

00:29:28,610 --> 00:29:32,270
change the semantics before we had

00:29:30,409 --> 00:29:35,510
scripts to synchronize prod to staging

00:29:32,270 --> 00:29:40,940
and now we use API clones a API call to

00:29:35,510 --> 00:29:44,570
clone prods to a temporary clone but I'm

00:29:40,940 --> 00:29:46,940
really out of time so thank you for your

00:29:44,570 --> 00:29:50,380
attention and sorry for blowing up the

00:29:46,940 --> 00:29:50,380
time I hope you learned something

00:29:50,760 --> 00:29:57,450

YouTube URL: https://www.youtube.com/watch?v=Rk_wo9AiN04


