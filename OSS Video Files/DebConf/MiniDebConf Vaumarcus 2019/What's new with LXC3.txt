Title: What's new with LXC3
Publication date: 2020-02-24
Playlist: MiniDebConf Vaumarcus 2019
Description: 
	by Pierre-Elliott BÃ©cue

At: MiniDebConf Vaumarcus 2019
https://wiki.debian.org/DebianEvents/ch/2019/Vaumarcus

Three months before the buster soft freeze I got the weird idea of providing LXC 3 in the archive. Let's talk about what it brings, and what's left to do!

Room: main
Scheduled start: 2019-10-26 16:15:00
Captions: 
	00:00:04,700 --> 00:00:12,350
well what's new with Alex c3i tip you

00:00:10,160 --> 00:00:14,870
know I'm keen on packages with a free in

00:00:12,350 --> 00:00:21,590
the names as you saw main man 3 Alexa

00:00:14,870 --> 00:00:24,590
free so first of all what is Alexi it's

00:00:21,590 --> 00:00:26,539
just because I want to make sure that we

00:00:24,590 --> 00:00:29,060
all start with the same knowledge about

00:00:26,539 --> 00:00:31,250
it I'm pretty sure it's useless but I

00:00:29,060 --> 00:00:34,280
will still do it

00:00:31,250 --> 00:00:38,930
Alexis so it stands for Linux containers

00:00:34,280 --> 00:00:42,650
originally it's essentially a process

00:00:38,930 --> 00:00:46,309
that allows to run a new PID and mount

00:00:42,650 --> 00:00:53,180
namespace to in order to have a whole

00:00:46,309 --> 00:00:55,580
tree of processes and just one it's not

00:00:53,180 --> 00:01:01,610
full virtualization because it depends

00:00:55,580 --> 00:01:04,610
on the host kernel and henceforth you

00:01:01,610 --> 00:01:06,890
cannot run a Windows container on Debian

00:01:04,610 --> 00:01:09,109
or things like that you have to run

00:01:06,890 --> 00:01:12,430
something which is sensibly compatible

00:01:09,109 --> 00:01:14,539
with the kernel you're running right now

00:01:12,430 --> 00:01:16,759
it's a good compromise with

00:01:14,539 --> 00:01:18,109
virtualization in many cases because you

00:01:16,759 --> 00:01:22,310
don't have the performance set of your

00:01:18,109 --> 00:01:27,740
hypervisor and because it's quite it's

00:01:22,310 --> 00:01:30,380
quite easy to dive in actually so in

00:01:27,740 --> 00:01:34,130
October 2018 I became a developer and I

00:01:30,380 --> 00:01:36,439
was like very celexa free no one in the

00:01:34,130 --> 00:01:38,899
alexey team has the time to package

00:01:36,439 --> 00:01:42,140
alexei free which is quite fine with me

00:01:38,899 --> 00:01:43,520
so i offered to join the team and try to

00:01:42,140 --> 00:01:49,030
package alexei free and it's

00:01:43,520 --> 00:01:53,710
dependencies it was out for six months

00:01:49,030 --> 00:01:59,679
the feedback was quite good actually and

00:01:53,710 --> 00:02:04,159
as the as it was an LTS release for all

00:01:59,679 --> 00:02:05,630
3.0 release I was like it could be

00:02:04,159 --> 00:02:07,549
interesting to have it in burster but

00:02:05,630 --> 00:02:10,490
the freeze was coming in January so I

00:02:07,549 --> 00:02:12,560
had roughly three months to package the

00:02:10,490 --> 00:02:18,530
thing test it and have it in testing

00:02:12,560 --> 00:02:20,510
properly working so I was like okay if I

00:02:18,530 --> 00:02:22,220
try to motivate people it won't work I

00:02:20,510 --> 00:02:27,260
have to do it by myself or we miss the

00:02:22,220 --> 00:02:29,810
train first of all let's talk a little

00:02:27,260 --> 00:02:33,590
about the major changes so as I said I'm

00:02:29,810 --> 00:02:37,430
a and software I'm a system and network

00:02:33,590 --> 00:02:40,910
administrator and engineer so when I

00:02:37,430 --> 00:02:42,800
command as a weird argument like a - n

00:02:40,910 --> 00:02:44,780
to say the name of the container which

00:02:42,800 --> 00:02:46,670
is mandatory for each and I recommend

00:02:44,780 --> 00:02:49,700
I'm happy because I have to type more

00:02:46,670 --> 00:02:51,800
letters so when I realized that there

00:02:49,700 --> 00:02:54,560
were removing the need to the - and

00:02:51,800 --> 00:02:56,480
arguments I was like oh that's nice it's

00:02:54,560 --> 00:03:01,280
it's really the best reason to get

00:02:56,480 --> 00:03:03,620
aleksef in Debian and on a more serious

00:03:01,280 --> 00:03:06,170
tense it has a full C group to support

00:03:03,620 --> 00:03:10,250
and I really like unified say groups

00:03:06,170 --> 00:03:12,620
which are in my opinion more intuitive I

00:03:10,250 --> 00:03:16,730
don't I know that many people disagree

00:03:12,620 --> 00:03:19,640
but in my opinions more intuitive they

00:03:16,730 --> 00:03:21,650
remember removing the bindings in UN

00:03:19,640 --> 00:03:23,660
Python free from the main package and I

00:03:21,650 --> 00:03:25,549
agree that this code was useless in the

00:03:23,660 --> 00:03:27,140
main package it has to be offered

00:03:25,549 --> 00:03:30,950
separately because it's not needed for

00:03:27,140 --> 00:03:32,810
Alex Alex it work they were removing a

00:03:30,950 --> 00:03:36,799
lot of that code I will come back to it

00:03:32,810 --> 00:03:40,220
and the Pam - C GFS model which creates

00:03:36,799 --> 00:03:43,160
the C groups for the unprivileged users

00:03:40,220 --> 00:03:45,230
upon login was merged into Alexa free

00:03:43,160 --> 00:03:47,329
from Alex AFS and it's a great

00:03:45,230 --> 00:03:49,750
improvement because you don't really

00:03:47,329 --> 00:03:53,030
need Eric CFS anymore to run a container

00:03:49,750 --> 00:04:00,410
still it's Alex EFS is still useful but

00:03:53,030 --> 00:04:03,680
it just does prot masking the

00:04:00,410 --> 00:04:05,720
configuration changed a little some

00:04:03,680 --> 00:04:09,200
obsolete config was removed new config

00:04:05,720 --> 00:04:10,760
were created upstream was nice enough to

00:04:09,200 --> 00:04:12,350
provide a binary to update your

00:04:10,760 --> 00:04:15,769
configuration so it was quite easy to

00:04:12,350 --> 00:04:18,590
handle and they were dropping okay so

00:04:15,769 --> 00:04:21,109
it's definitely too small my bad for

00:04:18,590 --> 00:04:22,970
that they did a lot of cleaning very

00:04:21,109 --> 00:04:25,460
moved to drivers that's what not we are

00:04:22,970 --> 00:04:28,550
not useful anymore they removed a lot of

00:04:25,460 --> 00:04:30,950
code lines that were creative that were

00:04:28,550 --> 00:04:32,190
written because of these drivers and so

00:04:30,950 --> 00:04:35,900
it made the whole pod

00:04:32,190 --> 00:04:38,010
it's a little smaller moment enable so

00:04:35,900 --> 00:04:39,750
regardless of the functionalities for

00:04:38,010 --> 00:04:41,340
the users it was still a great

00:04:39,750 --> 00:04:46,470
improvement because it made the code

00:04:41,340 --> 00:04:48,240
more maintainable it had some impacts on

00:04:46,470 --> 00:04:50,820
the packaging because we had to include

00:04:48,240 --> 00:04:57,660
new source packages for the Python free

00:04:50,820 --> 00:05:00,840
and low abiding bindings we had to sew

00:04:57,660 --> 00:05:02,640
on the good side the patches that we had

00:05:00,840 --> 00:05:06,080
in the debian package were all included

00:05:02,640 --> 00:05:12,270
upstream so we didn't need it anymore

00:05:06,080 --> 00:05:14,430
and on the bad side adding to the free

00:05:12,270 --> 00:05:16,500
source packages to add we had to take

00:05:14,430 --> 00:05:21,450
care about epimer support which was

00:05:16,500 --> 00:05:30,290
quite moot so we had to do a lot of

00:05:21,450 --> 00:05:33,030
patching happily some people kind of

00:05:30,290 --> 00:05:36,840
made the work more easy I will come back

00:05:33,030 --> 00:05:42,510
to it so why was I motivated despite

00:05:36,840 --> 00:05:44,669
this workload at the same time I became

00:05:42,510 --> 00:05:47,160
a developer I was trying to move from my

00:05:44,669 --> 00:05:49,890
dedicated server to the new one so I was

00:05:47,160 --> 00:05:52,950
rethinking my whole architecture and I

00:05:49,890 --> 00:05:56,240
decided that Alexey would be the basic

00:05:52,950 --> 00:06:01,410
stone so I wanted to have something

00:05:56,240 --> 00:06:03,240
up-to-date with my needs as I said I

00:06:01,410 --> 00:06:06,300
don't like the - and argument so it was

00:06:03,240 --> 00:06:09,720
really good incentive to to update the

00:06:06,300 --> 00:06:11,820
packages and as a new didi I was like ok

00:06:09,720 --> 00:06:14,040
I should try to dive in some new

00:06:11,820 --> 00:06:16,710
projects because oops

00:06:14,040 --> 00:06:18,570
because Manman free is was a done job

00:06:16,710 --> 00:06:21,090
maintaining the dependencies of my mind

00:06:18,570 --> 00:06:24,930
free was really nice but I wanted to to

00:06:21,090 --> 00:06:27,210
try new new new projects so it was

00:06:24,930 --> 00:06:32,840
really interesting to start with this

00:06:27,210 --> 00:06:36,030
one let speak a little about

00:06:32,840 --> 00:06:38,430
unprivileged container so specific parts

00:06:36,030 --> 00:06:40,470
of the changes in alexa free was to make

00:06:38,430 --> 00:06:43,530
and privileged containers more reliable

00:06:40,470 --> 00:06:45,870
and more working an impervious container

00:06:43,530 --> 00:06:48,750
also known as a user container is

00:06:45,870 --> 00:06:51,060
a container that relies on user name

00:06:48,750 --> 00:06:54,240
spaces so user name spaces were merged

00:06:51,060 --> 00:06:57,480
in the canal in 2013 so it's a six years

00:06:54,240 --> 00:07:01,980
old technology there were some issues

00:06:57,480 --> 00:07:04,680
that got solved in this secures the idea

00:07:01,980 --> 00:07:07,800
is that root under container is not root

00:07:04,680 --> 00:07:11,070
anymore only hosts it looks like a small

00:07:07,800 --> 00:07:13,650
change but it implies a lot of coding

00:07:11,070 --> 00:07:16,770
and it also implies a lot of things in

00:07:13,650 --> 00:07:18,720
case you arrived to you succeed at

00:07:16,770 --> 00:07:20,640
evading from the container because

00:07:18,720 --> 00:07:23,400
instead of being root on the server you

00:07:20,640 --> 00:07:26,190
will be like a random user on the server

00:07:23,400 --> 00:07:29,460
if this user is properly confined it can

00:07:26,190 --> 00:07:32,700
help to avoid kind of a hard privilege

00:07:29,460 --> 00:07:35,190
escalation as for an example here's one

00:07:32,700 --> 00:07:40,320
of the containers I run on my on my

00:07:35,190 --> 00:07:42,600
server which is hosting a webmail so I

00:07:40,320 --> 00:07:45,200
have a room cube user actually the one

00:07:42,600 --> 00:07:48,630
made is not Ron cube but I don't care

00:07:45,200 --> 00:07:50,040
with running the main Aleksey process

00:07:48,630 --> 00:07:52,830
and after that you see that we have a

00:07:50,040 --> 00:07:55,500
lot of few ideas that are kind of big

00:07:52,830 --> 00:07:57,450
and not associated with any user name so

00:07:55,500 --> 00:07:59,970
that's the sub view edges and sub G IDs

00:07:57,450 --> 00:08:04,440
feature of the kernel which is at work

00:07:59,970 --> 00:08:08,190
here it allows to have a full user space

00:08:04,440 --> 00:08:11,010
in the container so if I were to do SSH

00:08:08,190 --> 00:08:13,770
or Alexei attach all these new IDs would

00:08:11,010 --> 00:08:17,340
resolve to a specific user like www -

00:08:13,770 --> 00:08:22,680
data often said that the main idea is

00:08:17,340 --> 00:08:25,560
that this user has no right to go

00:08:22,680 --> 00:08:28,470
outside of his home directory and he has

00:08:25,560 --> 00:08:30,540
a really constrained resources on the

00:08:28,470 --> 00:08:33,180
server he cannot use more than a

00:08:30,540 --> 00:08:35,870
specific volume of ram it can as he

00:08:33,180 --> 00:08:39,480
can't write anything except on a

00:08:35,870 --> 00:08:41,850
dedicated filesystem it is emitted in

00:08:39,480 --> 00:08:44,160
the user is emitting in the number of

00:08:41,850 --> 00:08:46,320
process emails pound and all the sub

00:08:44,160 --> 00:08:48,630
view edges and JD's here are tied to the

00:08:46,320 --> 00:08:51,390
user so they are also limited in so

00:08:48,630 --> 00:08:53,310
actually the user plus the sub view a DS

00:08:51,390 --> 00:08:55,740
and JT's can spawn up to a hundred

00:08:53,310 --> 00:08:58,290
process at the same time so it also

00:08:55,740 --> 00:08:59,650
avoids the issues with fall bombs and

00:08:58,290 --> 00:09:02,830
things like that

00:08:59,650 --> 00:09:05,290
it takes little configuration to arrive

00:09:02,830 --> 00:09:07,090
to something like that the main issue is

00:09:05,290 --> 00:09:08,980
that when you start your container you

00:09:07,090 --> 00:09:11,170
have to bind a network interface so you

00:09:08,980 --> 00:09:14,260
have to use a set your ad binary which

00:09:11,170 --> 00:09:17,950
is Alexia - nets to bind a network card

00:09:14,260 --> 00:09:21,730
to the to the container it's probably

00:09:17,950 --> 00:09:27,570
the only place where you have to involve

00:09:21,730 --> 00:09:27,570
actual routes to the job loop

00:09:28,320 --> 00:09:36,370
why is it an interesting to pick because

00:09:30,790 --> 00:09:37,060
at LSS 2019 in the US which was a little

00:09:36,370 --> 00:09:39,570
months ago

00:09:37,060 --> 00:09:42,010
the LHC developers recommended to use

00:09:39,570 --> 00:09:44,380
preferentially preferably and privileged

00:09:42,010 --> 00:09:47,500
containers over privileged containers

00:09:44,380 --> 00:09:50,980
the argument is that in any case when

00:09:47,500 --> 00:09:52,930
you succeed at having a privileged

00:09:50,980 --> 00:09:55,930
escalation on a privileged container

00:09:52,930 --> 00:09:58,210
it's always a mess and when you succeed

00:09:55,930 --> 00:10:01,090
to have a privileged escalation as an

00:09:58,210 --> 00:10:06,850
unprivileged container it's less of a

00:10:01,090 --> 00:10:08,680
mess generally the main issue we've used

00:10:06,850 --> 00:10:12,070
on previous container is that the

00:10:08,680 --> 00:10:14,650
apparmor integration is actually no so

00:10:12,070 --> 00:10:17,140
you have to run the container the

00:10:14,650 --> 00:10:19,510
container as uncontained for apparmor

00:10:17,140 --> 00:10:24,490
it's something that should be solved in

00:10:19,510 --> 00:10:27,880
the next LTS release I guess and we

00:10:24,490 --> 00:10:30,010
already we saw that some tricky evasions

00:10:27,880 --> 00:10:32,530
with privilege escalation where possible

00:10:30,010 --> 00:10:35,890
a good example is encourage container

00:10:32,530 --> 00:10:38,410
Plus over AFS you can go and have a read

00:10:35,890 --> 00:10:40,060
with a little human article it's it's

00:10:38,410 --> 00:10:43,480
quite nice and interesting to see how

00:10:40,060 --> 00:10:45,490
people can think about how to mess up

00:10:43,480 --> 00:10:50,140
with something which is supposed to work

00:10:45,490 --> 00:10:53,020
properly so to come back to the specific

00:10:50,140 --> 00:10:54,490
apparmor issues for n3h containers

00:10:53,020 --> 00:10:55,000
there's nothing to say it's not working

00:10:54,490 --> 00:10:57,610
right now

00:10:55,000 --> 00:11:05,050
for privileged containers we had issues

00:10:57,610 --> 00:11:07,270
with system DV 240 and and later which

00:11:05,050 --> 00:11:09,970
we are preventing us to have a proper

00:11:07,270 --> 00:11:12,540
ybarra integration with alexa free it's

00:11:09,970 --> 00:11:16,290
the part that took me the more

00:11:12,540 --> 00:11:20,400
patching and work on the package we used

00:11:16,290 --> 00:11:22,500
snippets of cards from the 3.1 version

00:11:20,400 --> 00:11:27,090
of Alexi that we back posted in the

00:11:22,500 --> 00:11:29,730
three point 0.3 and happily proxmox

00:11:27,090 --> 00:11:32,690
developers already done part of this

00:11:29,730 --> 00:11:37,470
work so it made the thing easier for me

00:11:32,690 --> 00:11:39,690
and I got some from other developers so

00:11:37,470 --> 00:11:42,690
when you run a privileged container you

00:11:39,690 --> 00:11:44,520
probably won't want to use the Alexi

00:11:42,690 --> 00:11:46,860
that up a modded profile equals

00:11:44,520 --> 00:11:48,930
generated in your configuration so the

00:11:46,860 --> 00:11:54,570
uppermost post push support is properly

00:11:48,930 --> 00:11:59,670
handled and oh that's funny my slide is

00:11:54,570 --> 00:12:03,780
messed up and you can also use the allow

00:11:59,670 --> 00:12:07,470
and the underscore nesting configuration

00:12:03,780 --> 00:12:09,360
viable to enable nested containers I

00:12:07,470 --> 00:12:15,180
don't know what's written down but I'm

00:12:09,360 --> 00:12:18,090
pretty sure it's not interesting let's

00:12:15,180 --> 00:12:21,270
come back to what's missing because

00:12:18,090 --> 00:12:23,520
right now I was not able before Buster

00:12:21,270 --> 00:12:25,560
to do all the things I wanted to do for

00:12:23,520 --> 00:12:30,770
Alexi so there are two components that

00:12:25,560 --> 00:12:35,310
are missing the first one is lxd lxd is

00:12:30,770 --> 00:12:39,810
its kind of an Orchestrator for Alexi

00:12:35,310 --> 00:12:41,520
it's Ingo which is the main reason I

00:12:39,810 --> 00:12:44,640
failed to include it properly in the

00:12:41,520 --> 00:12:47,040
archive because as every go packages it

00:12:44,640 --> 00:12:49,290
depends on the whole planet to be

00:12:47,040 --> 00:12:51,570
included in the project and some

00:12:49,290 --> 00:12:55,650
dependencies included EQ lights I will

00:12:51,570 --> 00:12:59,870
come back to it we're not package' belen

00:12:55,650 --> 00:13:06,510
the in the in the current state of

00:12:59,870 --> 00:13:09,570
weather so Alexi is mostly rest api

00:13:06,510 --> 00:13:12,450
which it's a server with a recipe api

00:13:09,570 --> 00:13:16,440
that can do whatever you ask it to do

00:13:12,450 --> 00:13:18,930
provided you authenticate against it it

00:13:16,440 --> 00:13:21,260
works remotely which is quite nice so

00:13:18,930 --> 00:13:26,400
you can have kind of a cluster of

00:13:21,260 --> 00:13:28,830
containers hosts and it features more

00:13:26,400 --> 00:13:31,620
resource control that's what Alexi can

00:13:28,830 --> 00:13:34,470
do with cgroups basically so you can tie

00:13:31,620 --> 00:13:38,430
a container to specific CPUs you can

00:13:34,470 --> 00:13:39,540
properly swap and network cards or

00:13:38,430 --> 00:13:42,810
things like that it's it's really

00:13:39,540 --> 00:13:44,970
interesting to see but as I said I was

00:13:42,810 --> 00:13:48,390
not able to have it in the archive

00:13:44,970 --> 00:13:50,130
because of GQ lights decried is a

00:13:48,390 --> 00:13:53,700
technology from canonical which is

00:13:50,130 --> 00:13:56,160
supposed to enable SQLite to be a

00:13:53,700 --> 00:13:58,740
distributed database system so between

00:13:56,160 --> 00:14:02,460
many hosts it's supposed to offer a

00:13:58,740 --> 00:14:05,280
distributed infrastructure abstract the

00:14:02,460 --> 00:14:09,150
first thing I thought when I saw that is

00:14:05,280 --> 00:14:10,560
what the I still think that but

00:14:09,150 --> 00:14:12,960
that's not the reason I want to talk

00:14:10,560 --> 00:14:14,700
about it the thing is depends on a

00:14:12,960 --> 00:14:19,140
patched version of SQLite

00:14:14,700 --> 00:14:21,330
which still is installed as Lib SQLite

00:14:19,140 --> 00:14:22,860
so actually it conflicts with the

00:14:21,330 --> 00:14:25,400
current version of SQLite we have in

00:14:22,860 --> 00:14:30,420
Debian so there are two solutions either

00:14:25,400 --> 00:14:34,680
I try to have the patches canonical did

00:14:30,420 --> 00:14:37,440
into various collides into our SQLite

00:14:34,680 --> 00:14:42,720
I'm not really keen on this solution or

00:14:37,440 --> 00:14:45,060
I include this as a SQLite - next-gen I

00:14:42,720 --> 00:14:46,980
don't know exactly and you have to

00:14:45,060 --> 00:14:48,810
choose between this one and the original

00:14:46,980 --> 00:14:54,660
one when you installed your system and

00:14:48,810 --> 00:14:57,090
it's kind of messy - so for now the the

00:14:54,660 --> 00:15:01,170
the current solution was to not package

00:14:57,090 --> 00:15:04,800
it and so not have lxd in Debian the

00:15:01,170 --> 00:15:07,920
idea of canonical in particular of one

00:15:04,800 --> 00:15:11,940
of the developers was to propose the

00:15:07,920 --> 00:15:14,790
patch set to escalate upstream and to

00:15:11,940 --> 00:15:19,100
have it included in the original slides

00:15:14,790 --> 00:15:22,290
I have fears that this method won't work

00:15:19,100 --> 00:15:23,940
as great are quite conservative of the

00:15:22,290 --> 00:15:28,440
on the changes we accept from the

00:15:23,940 --> 00:15:30,330
community the second thing I want to

00:15:28,440 --> 00:15:32,760
talk about is distributed struggle there

00:15:30,330 --> 00:15:35,220
is a technology that is supposed to

00:15:32,760 --> 00:15:39,330
replace Aleksey - templates which is the

00:15:35,220 --> 00:15:40,140
common way to build images for Alexi so

00:15:39,330 --> 00:15:43,410
it's not so common

00:15:40,140 --> 00:15:47,280
it's more like deprecated it's also an

00:15:43,410 --> 00:15:49,650
NGO and it's allows to build images for

00:15:47,280 --> 00:15:51,390
both Alexei and lxd in particular it's

00:15:49,650 --> 00:15:53,670
useful because an unprivileged user

00:15:51,390 --> 00:15:57,810
could with images for his container with

00:15:53,670 --> 00:16:00,210
that what's interesting is that

00:15:57,810 --> 00:16:01,950
currently when an unprivileged user want

00:16:00,210 --> 00:16:04,470
to build a to make a container he

00:16:01,950 --> 00:16:09,260
has to download a prefetched image which

00:16:04,470 --> 00:16:12,990
is a table it will unpack right in place

00:16:09,260 --> 00:16:15,510
it's not as good as being able to run at

00:16:12,990 --> 00:16:17,490
the bootstrap but we don't have a fine

00:16:15,510 --> 00:16:23,460
solution for that and this uh builder is

00:16:17,490 --> 00:16:25,620
one of the answers it was not really

00:16:23,460 --> 00:16:27,450
unpackage able but on the time I had

00:16:25,620 --> 00:16:29,730
having all the dependencies of

00:16:27,450 --> 00:16:32,280
distributor in Debian was really not

00:16:29,730 --> 00:16:34,260
possible so it's something that probably

00:16:32,280 --> 00:16:37,890
should be seen in bullseye without any

00:16:34,260 --> 00:16:44,280
issue but lxd will be probably more of a

00:16:37,890 --> 00:16:47,820
hard work so about Alex III it's all I

00:16:44,280 --> 00:16:49,710
wanted to present but I have specific

00:16:47,820 --> 00:16:51,540
requests if some people are interested

00:16:49,710 --> 00:16:53,430
in the technology please donate that to

00:16:51,540 --> 00:16:56,940
come and offer you help because we have

00:16:53,430 --> 00:16:59,130
a lot of things to do to get the Alexi

00:16:56,940 --> 00:17:02,820
and its dependencies in a more stable

00:16:59,130 --> 00:17:04,680
shape shape it's it's a nice technology

00:17:02,820 --> 00:17:06,360
it's not it's not really hard to package

00:17:04,680 --> 00:17:09,750
actually I didn't have to change

00:17:06,360 --> 00:17:11,459
anything in the Debian slash rules files

00:17:09,750 --> 00:17:13,410
or things is that it was more about

00:17:11,459 --> 00:17:16,130
patching and including features that

00:17:13,410 --> 00:17:19,410
were missing to have a stable release

00:17:16,130 --> 00:17:21,030
and if some people like go it's it would

00:17:19,410 --> 00:17:23,310
be a good idea to find people who like

00:17:21,030 --> 00:17:25,440
go and we wanted to package some things

00:17:23,310 --> 00:17:27,959
in order to get this rebuilding @xd in

00:17:25,440 --> 00:17:29,370
the archive so please don't hesitate to

00:17:27,959 --> 00:17:32,550
come and if you have questions regarding

00:17:29,370 --> 00:17:33,690
either alexa free or packaging feel free

00:17:32,550 --> 00:17:36,650
to ask we have something like eight

00:17:33,690 --> 00:17:36,650
minutes in front of us

00:17:49,510 --> 00:17:55,429
might be a provocative question but what

00:17:53,270 --> 00:17:58,850
is the problem with the current snap

00:17:55,429 --> 00:18:01,309
packages because I use lxd and I just

00:17:58,850 --> 00:18:05,150
had to opt in so snap and snap instil

00:18:01,309 --> 00:18:06,890
lxd and i was up and running i don't

00:18:05,150 --> 00:18:07,520
think it's a provocative question it's a

00:18:06,890 --> 00:18:11,660
good one

00:18:07,520 --> 00:18:17,480
I'm not really in front of snap and it's

00:18:11,660 --> 00:18:19,850
more personal opinion I guess it was a

00:18:17,480 --> 00:18:23,630
choice for canonical which was quite

00:18:19,850 --> 00:18:25,910
rational they have many LTS releases at

00:18:23,630 --> 00:18:28,640
the same time many versions I want to

00:18:25,910 --> 00:18:31,010
provide the same software in in and so a

00:18:28,640 --> 00:18:33,170
snap was a way to insert that very

00:18:31,010 --> 00:18:35,210
specific issue in Debian we have we have

00:18:33,170 --> 00:18:37,550
to be an LCS but I won't talk about it

00:18:35,210 --> 00:18:39,620
because I'm not really working in it but

00:18:37,550 --> 00:18:42,710
actually we have one stable version at

00:18:39,620 --> 00:18:45,050
the time and to this matter I think it's

00:18:42,710 --> 00:18:48,200
more interesting to have packages that

00:18:45,050 --> 00:18:50,059
are designed to work all together you

00:18:48,200 --> 00:18:54,800
know stable release instead of having

00:18:50,059 --> 00:18:57,230
kind of artifacts that you can install

00:18:54,800 --> 00:18:59,360
whenever you want but where that you are

00:18:57,230 --> 00:19:01,460
not sure that we work properly with over

00:18:59,360 --> 00:19:03,470
artifacts made by other people so it's

00:19:01,460 --> 00:19:06,980
it's more way of thinking on the long

00:19:03,470 --> 00:19:09,500
run but I think Snap is quite a decent

00:19:06,980 --> 00:19:11,960
solution and I won't advise against it

00:19:09,500 --> 00:19:14,720
as long as we don't we are not able to

00:19:11,960 --> 00:19:21,610
provide something as interesting in the

00:19:14,720 --> 00:19:28,330
archive we still have a few minutes

00:19:21,610 --> 00:19:28,330
Alexei free is nice it's a good software

00:19:28,600 --> 00:19:35,590
okay so I think everybody wants a break

00:19:31,429 --> 00:19:35,590
Thank You Pierre that's welcome

00:19:37,820 --> 00:19:39,880

YouTube URL: https://www.youtube.com/watch?v=CWeuwhsBLUI


