Title: Techniques for using git for Debian packaging
Publication date: 2017-12-06
Playlist: DebConf 17
Description: 
	by David Bremner
by Sean Whitton

At: DebConf17
https://debconf17.debconf.org/
Room: Bo
Scheduled start: 2017-08-07 10:00:00
Captions: 
	00:00:04,740 --> 00:00:10,140
all right so well

00:00:07,170 --> 00:00:13,260
come to the enth annual packaging and

00:00:10,140 --> 00:00:19,200
get buff for some value of n greater

00:00:13,260 --> 00:00:23,009
than 5 I think so I hope we can have a

00:00:19,200 --> 00:00:27,449
buff buff and not a lecture

00:00:23,009 --> 00:00:29,880
buff both of us are employed to lecture

00:00:27,449 --> 00:00:32,970
that's right so if we lecture you have

00:00:29,880 --> 00:00:34,230
to pay us basically so so you have to

00:00:32,970 --> 00:00:38,280
ask lots of questions

00:00:34,230 --> 00:00:39,989
or we'll charge you money and the

00:00:38,280 --> 00:00:41,940
tuition where I teach is frankly

00:00:39,989 --> 00:00:47,100
exorbitant so hopefully my boss isn't

00:00:41,940 --> 00:00:53,670
watching this um ok so we don't have a

00:00:47,100 --> 00:00:57,659
lot of fixed material but I think part

00:00:53,670 --> 00:01:00,629
of of what we want to do is or what Sean

00:00:57,659 --> 00:01:05,210
wants to do is talk a bit about diecut

00:01:00,629 --> 00:01:08,610
which is one aspect of packaging and get

00:01:05,210 --> 00:01:11,850
widely misunderstood including by me so

00:01:08,610 --> 00:01:13,799
that's why we're going to talk about a

00:01:11,850 --> 00:01:17,659
little bit but I think just a quick demo

00:01:13,799 --> 00:01:21,119
and we'll see where the discussion goes

00:01:17,659 --> 00:01:24,689
from there do we do we have someone to

00:01:21,119 --> 00:01:26,159
take questions from IRC I mean I guess I

00:01:24,689 --> 00:01:27,450
can do it if nobody else wants to oh

00:01:26,159 --> 00:01:32,189
yeah sure

00:01:27,450 --> 00:01:37,200
ok all right well I've got a quick demo

00:01:32,189 --> 00:01:40,710
of how git packaging workflows can make

00:01:37,200 --> 00:01:44,759
people's lives easier it's worth drawing

00:01:40,710 --> 00:01:47,609
a distinction between get workflows for

00:01:44,759 --> 00:01:51,210
package maintainer and get workflows for

00:01:47,609 --> 00:01:53,130
everyone else writes because often the

00:01:51,210 --> 00:01:55,649
workflow that a patient maintains uses

00:01:53,130 --> 00:01:57,030
is different from the workflow someone

00:01:55,649 --> 00:02:00,569
uses you just wants to hack on that

00:01:57,030 --> 00:02:03,600
package and this demo is an example of a

00:02:00,569 --> 00:02:07,679
git workflow for a non maintainer in

00:02:03,600 --> 00:02:12,090
particular it's using git to sponsor and

00:02:07,679 --> 00:02:15,120
NMU okay so I made this fake NMU last

00:02:12,090 --> 00:02:18,510
night it's better I make it is because

00:02:15,120 --> 00:02:20,500
it's David's package we can see this guy

00:02:18,510 --> 00:02:23,070
a contributor has

00:02:20,500 --> 00:02:25,780
commit on this not much repository and

00:02:23,070 --> 00:02:28,930
the were you're meant to imagine is that

00:02:25,780 --> 00:02:32,170
I'm a DD and I've cloned this repository

00:02:28,930 --> 00:02:34,570
from github and this guy has said hey

00:02:32,170 --> 00:02:35,890
can you sponsor this upload I think it

00:02:34,570 --> 00:02:37,480
makes things better and the nor much

00:02:35,890 --> 00:02:38,500
maintainer is ignoring my emails or

00:02:37,480 --> 00:02:44,350
something like that

00:02:38,500 --> 00:02:46,930
I'm totally unrealistic and and if I'm

00:02:44,350 --> 00:02:49,300
not DD one thing I need to do is this

00:02:46,930 --> 00:02:51,910
this repository is essentially untrusted

00:02:49,300 --> 00:02:54,100
right I just got this off github I need

00:02:51,910 --> 00:02:57,489
to diff this against the archive to see

00:02:54,100 --> 00:03:00,130
that the NMU doesn't sneak in some some

00:02:57,489 --> 00:03:01,690
other changes that I know that David

00:03:00,130 --> 00:03:05,140
definitely doesn't want to go into his

00:03:01,690 --> 00:03:07,450
package how do I do that without gates

00:03:05,140 --> 00:03:09,580
well I have to build a sauce package

00:03:07,450 --> 00:03:14,430
from the repository and then I have to

00:03:09,580 --> 00:03:14,430
so I have to do package build package

00:03:14,550 --> 00:03:19,090
chess pray and then I have to go to the

00:03:17,260 --> 00:03:21,070
parent directory and then I have to

00:03:19,090 --> 00:03:23,410
apt-get source not much make sure I get

00:03:21,070 --> 00:03:25,810
it from SIDS and then finally I can use

00:03:23,410 --> 00:03:28,000
dev DIF and I have to tab complete to

00:03:25,810 --> 00:03:31,060
horrible source package names and I can

00:03:28,000 --> 00:03:34,480
finally see what this guy is doing and

00:03:31,060 --> 00:03:36,670
that thief is is cool but it's simple

00:03:34,480 --> 00:03:38,700
it'll only just give you a straight one

00:03:36,670 --> 00:03:41,110
straight death of the whole thing

00:03:38,700 --> 00:03:43,450
wouldn't be great if we could use git

00:03:41,110 --> 00:03:45,730
there to do this in set right git diff

00:03:43,450 --> 00:03:48,519
has lots of options you can filter by

00:03:45,730 --> 00:03:50,829
filename you can ignore things include

00:03:48,519 --> 00:03:54,610
things well with D gate you can do that

00:03:50,829 --> 00:03:58,450
so I'm not going to touch out get source

00:03:54,610 --> 00:04:01,690
or dev dev to do this so I type you get

00:03:58,450 --> 00:04:05,220
fetch CID which means take what's an

00:04:01,690 --> 00:04:13,720
unstable and make it accessible to get

00:04:05,220 --> 00:04:21,459
hilarious yeah a reads the changelog I'm

00:04:13,720 --> 00:04:24,528
gonna try to you fetch on stable oh yes

00:04:21,459 --> 00:04:24,528
[Music]

00:04:24,870 --> 00:04:29,310
video team guy used the microphone

00:04:30,900 --> 00:04:37,360
yeah that's telling me sorry about that

00:04:34,020 --> 00:04:39,759
could you do this in script and then

00:04:37,360 --> 00:04:46,180
publish the log afterwards so that

00:04:39,759 --> 00:04:48,460
people can read that script who do I

00:04:46,180 --> 00:04:51,610
need to redirect it no no it'll open a

00:04:48,460 --> 00:04:56,110
file can I do that to put it something

00:04:51,610 --> 00:05:02,400
okay okay cool um thank you right we'll

00:04:56,110 --> 00:05:02,400
try that again directory but in that was

00:05:05,699 --> 00:05:10,389
okay so it's we managed to work around

00:05:08,379 --> 00:05:12,490
that bug which is good so you can see

00:05:10,389 --> 00:05:15,879
it's pulling the not much DSC out of the

00:05:12,490 --> 00:05:19,689
archive but you can ignore that and it's

00:05:15,879 --> 00:05:21,400
telling you that add a git commit has

00:05:19,689 --> 00:05:24,580
been synthesized from the DSC and that's

00:05:21,400 --> 00:05:25,960
deterministic so you can do that as many

00:05:24,580 --> 00:05:28,629
times as you want it'll always give you

00:05:25,960 --> 00:05:32,740
the same commit and then to review the

00:05:28,629 --> 00:05:35,729
NMU we just use get there so get this if

00:05:32,740 --> 00:05:38,979
you get sliced you get so CID dot heads

00:05:35,729 --> 00:05:40,719
hmm okay so let's review this dip yeah

00:05:38,979 --> 00:05:44,319
they seem to be hijacking the package

00:05:40,719 --> 00:05:46,389
good and mmm if we if we scroll up to

00:05:44,319 --> 00:05:48,159
the well let's see what they did to the

00:05:46,389 --> 00:05:50,560
change log so we can filter the diff

00:05:48,159 --> 00:05:52,870
because you can usually do it get to see

00:05:50,560 --> 00:05:54,759
what they do to the change log wha-ha-ha

00:05:52,870 --> 00:05:59,680
and not much is mine okay so I'm not

00:05:54,759 --> 00:06:03,460
gonna upload this but you know what d

00:05:59,680 --> 00:06:06,659
get let us do here was difficult I've in

00:06:03,460 --> 00:06:09,729
a secure way without having to leave get

00:06:06,659 --> 00:06:12,909
which i think is very nice okay that was

00:06:09,729 --> 00:06:15,879
that was my demo and then in order to

00:06:12,909 --> 00:06:18,039
possibly help us talk i made a single

00:06:15,879 --> 00:06:19,800
flight hopefully covering all the

00:06:18,039 --> 00:06:23,740
workflows that currently exist in debian

00:06:19,800 --> 00:06:26,050
and this is for well

00:06:23,740 --> 00:06:27,730
the main ones Oh oh so I have to

00:06:26,050 --> 00:06:30,130
interject here I wanted to call this

00:06:27,730 --> 00:06:30,910
slide we are all special snowflakes oh

00:06:30,130 --> 00:06:32,830
yeah I forgot

00:06:30,910 --> 00:06:41,050
oh sorry and I completely forgot here we

00:06:32,830 --> 00:06:44,890
go very good there we go okay so these

00:06:41,050 --> 00:06:47,560
are debian get workflows for maintainer

00:06:44,890 --> 00:06:49,660
right so the demo was a debian get

00:06:47,560 --> 00:06:51,340
workflow for a sponsor who's not the

00:06:49,660 --> 00:06:53,440
main necessary the maintainer a package

00:06:51,340 --> 00:06:54,850
these are workflows for maintainer which

00:06:53,440 --> 00:06:57,700
is probably what we're more interested

00:06:54,850 --> 00:07:01,750
in talking about I split them into three

00:06:57,700 --> 00:07:05,080
groups firstly there's the gits

00:07:01,750 --> 00:07:08,380
or do you get plus a helper so get Bill

00:07:05,080 --> 00:07:13,750
package get DPM and David's favorite get

00:07:08,380 --> 00:07:16,150
package there are the workflows that you

00:07:13,750 --> 00:07:17,940
can do with git but you get can't handle

00:07:16,150 --> 00:07:20,410
and these are on the way out I would say

00:07:17,940 --> 00:07:22,030
it's set for the Haskell team which has

00:07:20,410 --> 00:07:27,310
several hundred of them which is Shawn's

00:07:22,030 --> 00:07:29,080
favorite team yeah so repositories which

00:07:27,310 --> 00:07:30,550
contain more than one package and one

00:07:29,080 --> 00:07:33,610
git repository do you get can't deal

00:07:30,550 --> 00:07:36,010
with those um sub modules can't handle

00:07:33,610 --> 00:07:39,040
those and never will it's enclosed it as

00:07:36,010 --> 00:07:40,870
won't fix and repositories which only

00:07:39,040 --> 00:07:42,760
have the packaging in and not the

00:07:40,870 --> 00:07:46,120
upstream source ID it can't deal with

00:07:42,760 --> 00:07:49,630
those and then more recently we have

00:07:46,120 --> 00:07:51,700
these new pure workflows right and what

00:07:49,630 --> 00:07:54,460
I mean by pure is you can think of

00:07:51,700 --> 00:07:56,770
diggit as an add-on to almost any

00:07:54,460 --> 00:07:59,230
existing workflow but these are the ones

00:07:56,770 --> 00:08:03,190
where you only need get in do you get

00:07:59,230 --> 00:08:05,110
rather than GBP or DPM or something one

00:08:03,190 --> 00:08:06,910
of them is a merge based workflow which

00:08:05,110 --> 00:08:09,430
is usable now and the man page explains

00:08:06,910 --> 00:08:14,410
it I mean one of them is is no usable

00:08:09,430 --> 00:08:16,390
yet it's a rebasing workflow I can talk

00:08:14,410 --> 00:08:17,830
about that more if you want but I'm not

00:08:16,390 --> 00:08:19,870
going to say anything now so hopefully

00:08:17,830 --> 00:08:25,030
this slide will be useful to our

00:08:19,870 --> 00:08:26,380
discussion and that's all I wanted to

00:08:25,030 --> 00:08:28,600
say that's where we're gonna stop

00:08:26,380 --> 00:08:31,600
talking yeah they pay us right okay

00:08:28,600 --> 00:08:34,570
great you got a hat to collect coins oh

00:08:31,600 --> 00:08:36,570
yeah yeah I hope that works better than

00:08:34,570 --> 00:08:44,740
why I tried in class

00:08:36,570 --> 00:08:48,670
so discussion Antwon with a mic with a

00:08:44,740 --> 00:08:52,870
microphone so I tried to get a while

00:08:48,670 --> 00:08:56,170
back and stumbled upon a few bugs which

00:08:52,870 --> 00:08:59,430
I believe I've been fixed now but that I

00:08:56,170 --> 00:09:01,750
didn't see them as much as bugs as

00:08:59,430 --> 00:09:04,120
peculiar issues with my peculiar

00:09:01,750 --> 00:09:07,930
workflow and I think there are so many

00:09:04,120 --> 00:09:11,410
ways of doing this that I wonder if part

00:09:07,930 --> 00:09:13,930
of dig its goal is to encompass all of

00:09:11,410 --> 00:09:16,240
those eventually or just restrict

00:09:13,930 --> 00:09:19,690
ourselves to a certain set of best

00:09:16,240 --> 00:09:22,540
practices or do we claim there are best

00:09:19,690 --> 00:09:24,310
practices or where do we play in there

00:09:22,540 --> 00:09:27,460
like for example only there in

00:09:24,310 --> 00:09:28,270
subdirectory I use this sometimes you're

00:09:27,460 --> 00:09:34,000
a bad person

00:09:28,270 --> 00:09:35,830
yeah I know I'm bad but yeah like if

00:09:34,000 --> 00:09:37,120
it's if it's a wrong practice I'm ready

00:09:35,830 --> 00:09:38,500
to change but if it's just a matter of

00:09:37,120 --> 00:09:40,840
like oh maybe we'll support this

00:09:38,500 --> 00:09:42,400
eventually then that's fine too you know

00:09:40,840 --> 00:09:46,890
so I'm curious what do you think about

00:09:42,400 --> 00:09:50,530
that yeah so first thing to say is that

00:09:46,890 --> 00:09:53,050
one confusion people have when talking

00:09:50,530 --> 00:09:56,170
about vegan is that they think it's a

00:09:53,050 --> 00:09:57,880
tool on the same level as like qbp or D

00:09:56,170 --> 00:10:00,580
p.m. which gives you a workflow

00:09:57,880 --> 00:10:02,650
basically and it's although we've got

00:10:00,580 --> 00:10:04,060
these these pure workflows where I we're

00:10:02,650 --> 00:10:07,090
saying okay we're going to invent a new

00:10:04,060 --> 00:10:10,180
workflow that capitalizes on do you get

00:10:07,090 --> 00:10:12,310
the tool itself imposes basically one

00:10:10,180 --> 00:10:14,940
requirement right and the only

00:10:12,310 --> 00:10:18,130
requirements it imposes on you is that

00:10:14,940 --> 00:10:20,230
if you take your get heads and pack it

00:10:18,130 --> 00:10:24,160
into a sauce package and unpack it again

00:10:20,230 --> 00:10:25,450
you get the same thing does it so you

00:10:24,160 --> 00:10:27,370
can see why it's not going to be

00:10:25,450 --> 00:10:29,260
compatible with these because if you

00:10:27,370 --> 00:10:30,940
only have a debian subdirectory if you

00:10:29,260 --> 00:10:31,750
pack get heads well you can't pack get

00:10:30,940 --> 00:10:34,530
head because it doesn't have any

00:10:31,750 --> 00:10:34,530
upstream source

00:10:35,970 --> 00:10:44,260
well you wouldn't be packing get head G

00:10:38,290 --> 00:10:47,020
oh I suppose you could okay okay okay so

00:10:44,260 --> 00:10:49,150
pack and unpack and it's still the

00:10:47,020 --> 00:10:51,220
package recipe wanted I suppose that

00:10:49,150 --> 00:10:53,800
ends that source package builds I think

00:10:51,220 --> 00:10:59,400
is it something that he left out but is

00:10:53,800 --> 00:10:59,400
also true you'd have to build yes okay

00:11:02,610 --> 00:11:13,900
what do you mean there's a microphone

00:11:09,940 --> 00:11:15,850
right beside you Sam okay in get the

00:11:13,900 --> 00:11:17,080
question about whether get GPM actually

00:11:15,850 --> 00:11:21,820
meets that requirement either and get

00:11:17,080 --> 00:11:26,380
TPM my sources have the patches applied

00:11:21,820 --> 00:11:29,590
in my get head whereas oh no I guess

00:11:26,380 --> 00:11:32,590
they know yeah but I thought there was

00:11:29,590 --> 00:11:36,370
magic to make that okay there is some

00:11:32,590 --> 00:11:38,260
very slight magic going on to deal with

00:11:36,370 --> 00:11:39,910
some small corner cases that most of us

00:11:38,260 --> 00:11:42,910
even aren't even aware of until we bump

00:11:39,910 --> 00:11:45,400
into them but if you're trying to decide

00:11:42,910 --> 00:11:46,960
whether your workflows do compatible

00:11:45,400 --> 00:11:49,900
what you need to think about is that

00:11:46,960 --> 00:11:51,550
requirement that it can be round tripped

00:11:49,900 --> 00:11:54,790
through packing into a source package

00:11:51,550 --> 00:11:58,060
and unpacking so just to show my

00:11:54,790 --> 00:12:00,430
ignorance as both co-organizer what does

00:11:58,060 --> 00:12:03,100
this mean about patches applied I mean

00:12:00,430 --> 00:12:05,140
there is hackery in D get to work with

00:12:03,100 --> 00:12:07,140
catch it patches on apply right there is

00:12:05,140 --> 00:12:10,180
some hackery to deal with that okay

00:12:07,140 --> 00:12:14,500
basically you just pass an option and it

00:12:10,180 --> 00:12:16,180
does it right okay but if you think of

00:12:14,500 --> 00:12:18,210
it if you think of a patches on applied

00:12:16,180 --> 00:12:21,340
repository it's still the case that

00:12:18,210 --> 00:12:22,960
everything's there and right when you

00:12:21,340 --> 00:12:24,340
pack it you get all the same stuff back

00:12:22,960 --> 00:12:26,770
well they're supposed to get a bit

00:12:24,340 --> 00:12:30,490
philosophical right what's everything

00:12:26,770 --> 00:12:31,750
there is a URL enough I mean well I mean

00:12:30,490 --> 00:12:33,280
as compared to the packages where

00:12:31,750 --> 00:12:36,460
there's only the Debian subdirectory

00:12:33,280 --> 00:12:38,410
and a link to the tarball right right

00:12:36,460 --> 00:12:41,520
yeah I mean how much magic is allowed

00:12:38,410 --> 00:12:44,350
okay I'd like to come is diecut

00:12:41,520 --> 00:12:46,959
yesterday or the day before to upload

00:12:44,350 --> 00:12:51,970
something in great choice

00:12:46,959 --> 00:12:55,869
I was really testing it out for my

00:12:51,970 --> 00:12:59,050
package it did so it did manipulate of

00:12:55,869 --> 00:13:04,389
course what I had in my repository if I

00:12:59,050 --> 00:13:07,480
now will push this to my my team's get

00:13:04,389 --> 00:13:10,839
repository it does look weird it has

00:13:07,480 --> 00:13:14,129
more history because it I think what I

00:13:10,839 --> 00:13:18,249
saw is that it made a branch where it

00:13:14,129 --> 00:13:21,040
applied the patches so it created git

00:13:18,249 --> 00:13:24,399
commits for every patch and then in the

00:13:21,040 --> 00:13:26,439
merge it basically reverted those such

00:13:24,399 --> 00:13:28,569
that I had a merge commit which didn't

00:13:26,439 --> 00:13:31,749
do anything on my master branch but now

00:13:28,569 --> 00:13:34,209
I had an extra commit and didn't do

00:13:31,749 --> 00:13:36,819
anything and I have an extra piece of

00:13:34,209 --> 00:13:38,649
history I think this is at least worth

00:13:36,819 --> 00:13:40,929
mentioning if you have this unapplied

00:13:38,649 --> 00:13:44,949
history it is this actually if I would

00:13:40,929 --> 00:13:47,470
do it multiple times is this going to

00:13:44,949 --> 00:13:50,559
keep on adding more sisters to one time

00:13:47,470 --> 00:13:54,610
only kind of I does your team use

00:13:50,559 --> 00:13:56,079
patches on applied or applied ok did you

00:13:54,610 --> 00:14:00,819
tell do you get that you were using

00:13:56,079 --> 00:14:02,050
patches on applied yes ok um well I mean

00:14:00,819 --> 00:14:05,679
I have to look at it what I'm guessing

00:14:02,050 --> 00:14:07,779
is going on is that he gets big it wants

00:14:05,679 --> 00:14:09,879
to make sure that what you've got is a

00:14:07,779 --> 00:14:13,059
fast-forward of what it thinks is in the

00:14:09,879 --> 00:14:15,579
archive so but it lets you override adds

00:14:13,059 --> 00:14:17,290
so it creates a branch representing what

00:14:15,579 --> 00:14:19,360
I just did there with ticket fetch and

00:14:17,290 --> 00:14:22,209
then merges what you did on top of that

00:14:19,360 --> 00:14:24,730
but that'll it did merge it into my

00:14:22,209 --> 00:14:27,790
master branch your master branch changed

00:14:24,730 --> 00:14:29,740
yes with one commit which didn't do

00:14:27,790 --> 00:14:31,480
anything ok

00:14:29,740 --> 00:14:33,819
oh so it would have been a pseudo merge

00:14:31,480 --> 00:14:37,379
commit right so it was just joining the

00:14:33,819 --> 00:14:40,689
histories that will only happen if

00:14:37,379 --> 00:14:42,790
someone does an on D get upload before

00:14:40,689 --> 00:14:45,309
you do your next D get upload so so the

00:14:42,790 --> 00:14:47,350
first D get upload will always have this

00:14:45,309 --> 00:14:50,649
little bit of history strangeness I

00:14:47,350 --> 00:14:52,449
guess for most people so but I guess but

00:14:50,649 --> 00:14:56,290
also I guess if there's a new upstream

00:14:52,449 --> 00:14:58,329
or not know as long as every upload to

00:14:56,290 --> 00:15:00,940
the archive is made with you get then it

00:14:58,329 --> 00:15:03,760
won't do that but on most teams

00:15:00,940 --> 00:15:05,830
I guess you could expect they expect

00:15:03,760 --> 00:15:08,290
some skills some back and forth

00:15:05,830 --> 00:15:11,830
yeah people using do you get people not

00:15:08,290 --> 00:15:13,420
using do you get I mean that's Oh Gregor

00:15:11,830 --> 00:15:16,140
knows we're always trying interesting

00:15:13,420 --> 00:15:20,350
things in the Perl team and sometimes

00:15:16,140 --> 00:15:23,050
it's you know the coolest technique is

00:15:20,350 --> 00:15:28,390
only useful if it's useful to the people

00:15:23,050 --> 00:15:31,570
on the team right so I was also

00:15:28,390 --> 00:15:36,640
wondering which I haven't dare to try

00:15:31,570 --> 00:15:39,370
yet by really pushing because afraid of

00:15:36,640 --> 00:15:41,620
messing too much with my history I have

00:15:39,370 --> 00:15:46,480
a couple of patches which actually carry

00:15:41,620 --> 00:15:49,440
a big patch set which typically of

00:15:46,480 --> 00:15:56,700
course with new upstream needs to be

00:15:49,440 --> 00:15:56,700
that the patch needs to be patched in a

00:15:58,440 --> 00:16:05,980
way so ready because basically I'm

00:16:01,960 --> 00:16:08,950
afraid that I get one one merge where I

00:16:05,980 --> 00:16:11,380
have to resolve all my conflicts which I

00:16:08,950 --> 00:16:13,750
don't think is good for inspection later

00:16:11,380 --> 00:16:16,120
on because it does include upstream

00:16:13,750 --> 00:16:18,310
changes as well there's basically two

00:16:16,120 --> 00:16:21,990
choices in this situation if you have so

00:16:18,310 --> 00:16:23,920
a package which has a substantial and

00:16:21,990 --> 00:16:25,980
semi-permanent series of big

00:16:23,920 --> 00:16:28,600
modifications which we have in Debian

00:16:25,980 --> 00:16:32,290
there's basically two choices you either

00:16:28,600 --> 00:16:34,720
do patches apply it and use GBP which do

00:16:32,290 --> 00:16:36,280
you get supports or you wait a little

00:16:34,720 --> 00:16:40,210
bit longer and then we'll have this

00:16:36,280 --> 00:16:41,080
rebasing workflow but yeah unfortunately

00:16:40,210 --> 00:16:44,500
at the moment if you're in that

00:16:41,080 --> 00:16:46,270
situation it's not the best tool but

00:16:44,500 --> 00:16:48,250
this isn't this is not a digger you get

00:16:46,270 --> 00:16:51,100
buff so we talked about all the other

00:16:48,250 --> 00:16:54,339
options that there are also currently

00:16:51,100 --> 00:16:58,210
Indy done in this workflow I'm manually

00:16:54,339 --> 00:17:01,060
doing that the get up the kilt updating

00:16:58,210 --> 00:17:02,950
of the patches by applying it one by one

00:17:01,060 --> 00:17:07,930
to see every time what I'm actually

00:17:02,950 --> 00:17:10,740
doing right you can use GB ppq to make

00:17:07,930 --> 00:17:10,740
that a little bit easier

00:17:11,679 --> 00:17:19,600
so I'm curious how many teams or people

00:17:16,279 --> 00:17:23,389
are using patches applied workflows in

00:17:19,600 --> 00:17:36,289
okay me but so it's a minority of people

00:17:23,389 --> 00:17:39,350
still to the ball for to their cognition

00:17:36,289 --> 00:17:42,590
to use microphones can we get a

00:17:39,350 --> 00:17:51,379
microphone sound needs a mic actually

00:17:42,590 --> 00:17:58,519
why don't we trade um so um is there any

00:17:51,379 --> 00:18:01,129
easy way no no I I'm I'm I'm I'm

00:17:58,519 --> 00:18:06,350
unlikely to need a mic it will be good

00:18:01,129 --> 00:18:09,200
for me to not have a mic that's so um is

00:18:06,350 --> 00:18:11,440
there a way to convert like if I have a

00:18:09,200 --> 00:18:15,529
check out that currently has patches

00:18:11,440 --> 00:18:17,179
applied um and I'd really like to at

00:18:15,529 --> 00:18:20,600
least for the moment look at it patches

00:18:17,179 --> 00:18:22,759
unapplied for easier diff stuff is there

00:18:20,600 --> 00:18:24,230
a way to get that I don't I don't need

00:18:22,759 --> 00:18:25,609
to commit it I just there are times

00:18:24,230 --> 00:18:27,830
we're looking at a diff it would be

00:18:25,609 --> 00:18:30,049
really nice to actually get a patches

00:18:27,830 --> 00:18:34,609
unapplied version of a tree even though

00:18:30,049 --> 00:18:37,519
that's not what get DPM gives me so I

00:18:34,609 --> 00:18:40,220
might be able to help there so I wrote a

00:18:37,519 --> 00:18:41,989
tool called get dev cherry which is

00:18:40,220 --> 00:18:44,690
included in get package but it's not

00:18:41,989 --> 00:18:49,700
especially tied to get package and it

00:18:44,690 --> 00:18:52,489
can extract a quilt patch series from a

00:18:49,700 --> 00:18:56,659
patch apply patches applied repository

00:18:52,489 --> 00:18:58,730
and of course that's sometimes a little

00:18:56,659 --> 00:19:02,059
tricky to do with with complicated

00:18:58,730 --> 00:19:04,210
history so no no no I've got a good

00:19:02,059 --> 00:19:06,619
patch series already

00:19:04,210 --> 00:19:09,889
this is Getty I have a get DPM

00:19:06,619 --> 00:19:12,440
repository oh I I just wished to I want

00:19:09,889 --> 00:19:14,779
to turn my perfectly good I have a great

00:19:12,440 --> 00:19:16,519
Debian slash passions directory I don't

00:19:14,779 --> 00:19:19,940
have the quilt metadata to do a quilt

00:19:16,519 --> 00:19:20,899
pop - a right yeah I don't know the tool

00:19:19,940 --> 00:19:23,179
that does that

00:19:20,899 --> 00:19:23,840
apart from unpacking via rich tar and

00:19:23,179 --> 00:19:27,020
another day

00:19:23,840 --> 00:19:29,169
or something okay but the other

00:19:27,020 --> 00:19:31,820
direction is definitely possible yeah

00:19:29,169 --> 00:19:33,440
but I used to get DPM so that's not the

00:19:31,820 --> 00:19:35,120
problem ever I see I see

00:19:33,440 --> 00:19:39,820
yeah if you're someone who prefers

00:19:35,120 --> 00:19:41,029
patches applied and you sorry yeah yeah

00:19:39,820 --> 00:19:43,309
right

00:19:41,029 --> 00:19:47,360
you prefer patches applied you can

00:19:43,309 --> 00:20:07,250
always get that pretty straightforwardly

00:19:47,360 --> 00:20:09,529
yeah hang on if it's just a one-shot

00:20:07,250 --> 00:20:11,659
thing I'm pretty sure but I have to

00:20:09,529 --> 00:20:14,149
check there's a git command you could

00:20:11,659 --> 00:20:16,159
run to basically check out everything

00:20:14,149 --> 00:20:17,480
but the Debian directory relative to

00:20:16,159 --> 00:20:20,929
upstream and you'd get the tree you

00:20:17,480 --> 00:20:25,610
wanted but that may or may not be that

00:20:20,929 --> 00:20:29,200
may be too much surgery do you think

00:20:25,610 --> 00:20:29,200
probably thinking like a get work tree

00:20:30,880 --> 00:20:35,419
there's an option to get check out that

00:20:33,200 --> 00:20:36,409
you can you know just tell it I think

00:20:35,419 --> 00:20:37,789
you didn't even tell it I know you can

00:20:36,409 --> 00:20:39,260
tell the individual files but you can

00:20:37,789 --> 00:20:41,179
also tell a subtree and give it a commit

00:20:39,260 --> 00:20:43,399
and I think it'll just revert that part

00:20:41,179 --> 00:20:45,529
of the tree but some would need to have

00:20:43,399 --> 00:20:47,840
the upstream the whole upstream history

00:20:45,529 --> 00:20:51,789
in his get repository well he's using

00:20:47,840 --> 00:20:51,789
get DPM he probably does okay

00:20:58,170 --> 00:21:06,510
we got lots of time don't worry what but

00:21:00,870 --> 00:21:08,850
what I want here is so you're saying I

00:21:06,510 --> 00:21:11,100
should check out the upstream tree then

00:21:08,850 --> 00:21:13,350
graft in the Debian tree from the commit

00:21:11,100 --> 00:21:17,130
I want well I was actually proposing the

00:21:13,350 --> 00:21:20,549
opposite but how can I do the opposite I

00:21:17,130 --> 00:21:23,280
you you basically tell check out you

00:21:20,549 --> 00:21:25,260
would tell get to check out the upstream

00:21:23,280 --> 00:21:29,820
tree ignore accepting the Debian

00:21:25,260 --> 00:21:31,980
directory ah I think we have some

00:21:29,820 --> 00:21:39,480
feedback back here on this topic

00:21:31,980 --> 00:21:43,620
pass the mic if he's just add if you're

00:21:39,480 --> 00:21:47,190
after the other approach is just useful

00:21:43,620 --> 00:21:49,140
to deaf right or I think it has the

00:21:47,190 --> 00:21:51,150
ability to filter by paths if all you

00:21:49,140 --> 00:21:54,360
want is a DIF of the Debian directory in

00:21:51,150 --> 00:21:56,309
the patches and you don't care about the

00:21:54,360 --> 00:21:58,559
direct changes in upstream you can just

00:21:56,309 --> 00:22:02,400
you need a filtered if it or specify a

00:21:58,559 --> 00:22:09,450
path or get deaf and that should give

00:22:02,400 --> 00:22:13,230
you that if you want you can notice a

00:22:09,450 --> 00:22:16,169
food ticket here all right I mean so

00:22:13,230 --> 00:22:18,929
this is getting a bit narrow I mean so

00:22:16,169 --> 00:22:24,710
so Gregor no no worries

00:22:18,929 --> 00:22:24,710
I mean it's a narrow bomb

00:22:32,950 --> 00:22:39,440
so let I'd like to ask a simple question

00:22:35,960 --> 00:22:41,240
I haven't really paid attention to the

00:22:39,440 --> 00:22:44,090
key development in the last three years

00:22:41,240 --> 00:22:46,340
or something so what is actually the

00:22:44,090 --> 00:22:49,910
advantage of using ticket as a

00:22:46,340 --> 00:22:54,770
maintainer for one's own packages over

00:22:49,910 --> 00:22:57,950
just package okay I'll try mention as

00:22:54,770 --> 00:23:01,760
many as I can they can remember you get

00:22:57,950 --> 00:23:03,710
a bunch of extra safety checks so there

00:23:01,760 --> 00:23:05,810
are certain things that keep happening

00:23:03,710 --> 00:23:07,280
in Debian like your changes file has

00:23:05,810 --> 00:23:08,900
different distribution to your change

00:23:07,280 --> 00:23:12,650
log or something like that and you get

00:23:08,900 --> 00:23:15,680
protects you from those and secondly

00:23:12,650 --> 00:23:19,730
you're sharing your full get history

00:23:15,680 --> 00:23:21,530
with your users so that's good for them

00:23:19,730 --> 00:23:23,050
but also if they send you patches

00:23:21,530 --> 00:23:32,750
they're going to be based on your

00:23:23,050 --> 00:23:36,220
history so okay what I have it we need

00:23:32,750 --> 00:23:36,220
Mike sorry it's big room

00:23:56,330 --> 00:24:13,220
okay so why don't you rephrase that make

00:24:08,490 --> 00:24:16,050
your history accessible via ad get clone

00:24:13,220 --> 00:24:18,630
whereas right now if someone wants to

00:24:16,050 --> 00:24:20,250
get the source of your package they have

00:24:18,630 --> 00:24:23,700
to try and find it on Alli oath right

00:24:20,250 --> 00:24:26,550
and for Deb right when Deb checkout can

00:24:23,700 --> 00:24:30,030
try and find it on earlier for them but

00:24:26,550 --> 00:24:32,070
Deb checkout will give can give you a

00:24:30,030 --> 00:24:33,420
different thing every time so if I take

00:24:32,070 --> 00:24:35,070
checkout a pearl repository it's

00:24:33,420 --> 00:24:36,870
probably going to be pretty sane if I

00:24:35,070 --> 00:24:39,030
check out a Haskell package I'm gonna

00:24:36,870 --> 00:24:42,030
get all the Haskell packages

00:24:39,030 --> 00:24:43,680
that's quite a confusing interface if

00:24:42,030 --> 00:24:46,920
you get cloners always gives you the

00:24:43,680 --> 00:24:48,960
same thing and that means that's good

00:24:46,920 --> 00:24:51,110
for attracting new contributors and

00:24:48,960 --> 00:24:54,060
probably contributors to your package

00:24:51,110 --> 00:24:56,490
someone can always do get clone but if

00:24:54,060 --> 00:25:02,040
you do get pushed they get a more useful

00:24:56,490 --> 00:25:04,050
history which is what's going to add

00:25:02,040 --> 00:25:05,790
that maybe we need to fix the cases when

00:25:04,050 --> 00:25:08,190
you do Deb checkout you get something

00:25:05,790 --> 00:25:12,330
that changes but like with their current

00:25:08,190 --> 00:25:14,910
control file fields we should be getting

00:25:12,330 --> 00:25:17,700
just the package repository and I think

00:25:14,910 --> 00:25:20,790
we should aim for that sure it's it's an

00:25:17,700 --> 00:25:23,910
interesting aim but okay hands up

00:25:20,790 --> 00:25:27,230
everybody who has ever forgotten to push

00:25:23,910 --> 00:25:30,090
their changes alright come on

00:25:27,230 --> 00:25:33,480
alright and hands up everybody who's

00:25:30,090 --> 00:25:36,330
done an upload without a VCS the correct

00:25:33,480 --> 00:25:44,700
VCS field right I mean these things

00:25:36,330 --> 00:25:47,430
happen so even if and I'm asked this

00:25:44,700 --> 00:25:50,160
same question and work but I think this

00:25:47,430 --> 00:25:53,940
actually this uniformity is a big

00:25:50,160 --> 00:25:57,270
benefit even if the git checkout you get

00:25:53,940 --> 00:26:00,510
is this rather crude history of one

00:25:57,270 --> 00:26:04,440
commits per upload it still makes it

00:26:00,510 --> 00:26:04,990
easier for somebody not knowing the

00:26:04,440 --> 00:26:10,030
intricate

00:26:04,990 --> 00:26:13,570
seas of quilt and source packages to

00:26:10,030 --> 00:26:15,220
patch the Debian package I mean the

00:26:13,570 --> 00:26:17,140
underlying assumption here is that there

00:26:15,220 --> 00:26:20,260
are more people in the world that no get

00:26:17,140 --> 00:26:23,620
then that no quilt I think that's a fair

00:26:20,260 --> 00:26:25,360
assumption and just to expand on that so

00:26:23,620 --> 00:26:27,429
you asked about benefits for maintainer

00:26:25,360 --> 00:26:30,240
x' this is more of a benefit for users

00:26:27,429 --> 00:26:33,550
but it's connected so worth mentioning

00:26:30,240 --> 00:26:36,130
if you're if you're someone who's

00:26:33,550 --> 00:26:37,510
moderately new to free software and

00:26:36,130 --> 00:26:39,340
you're just getting into the idea that

00:26:37,510 --> 00:26:41,470
you can modify the stuff on your own

00:26:39,340 --> 00:26:45,940
machine you're going to be wanting to do

00:26:41,470 --> 00:26:47,620
that and get so suppose I I find a

00:26:45,940 --> 00:26:49,450
package and I find a bug and there's

00:26:47,620 --> 00:26:52,630
some be a bureaucratic reason why it

00:26:49,450 --> 00:26:54,070
can't be fixed upstream right now but I

00:26:52,630 --> 00:26:56,800
want to share that modification with my

00:26:54,070 --> 00:26:59,500
friends PGI lets me do that and get so I

00:26:56,800 --> 00:27:01,120
can DX load in the package apply my fix

00:26:59,500 --> 00:27:03,610
with the git commit and then just push

00:27:01,120 --> 00:27:04,990
that to github or wherever and share

00:27:03,610 --> 00:27:08,020
that with someone else who has the same

00:27:04,990 --> 00:27:10,000
problem whereas right now because we

00:27:08,020 --> 00:27:12,490
have this is one of Debian's guarantees

00:27:10,000 --> 00:27:15,520
with a stable release we say look you

00:27:12,490 --> 00:27:17,320
can modify any of the packages in the

00:27:15,520 --> 00:27:19,960
stable release and we provide the build

00:27:17,320 --> 00:27:21,910
dependencies so you can rebuild them but

00:27:19,960 --> 00:27:22,809
we only provide that in the form of our

00:27:21,910 --> 00:27:27,280
to get sauce

00:27:22,809 --> 00:27:32,590
which is hard to share to get improves

00:27:27,280 --> 00:27:35,290
on that and you just said you get raw

00:27:32,590 --> 00:27:38,320
history of what commit per release is

00:27:35,290 --> 00:27:40,270
that already the case because I think it

00:27:38,320 --> 00:27:42,370
just gives you the latest one right does

00:27:40,270 --> 00:27:44,770
there's a there's a bug that it so I'd

00:27:42,370 --> 00:27:47,380
open bug that it could give you a one

00:27:44,770 --> 00:27:48,580
commit pair whatever he can find but

00:27:47,380 --> 00:27:50,230
right now it only gives you the latest

00:27:48,580 --> 00:27:53,050
one yeah I guess you have to implement

00:27:50,230 --> 00:27:54,370
that first on the decayed server inject

00:27:53,050 --> 00:27:56,350
all the packages or something like that

00:27:54,370 --> 00:27:58,150
right there's this some if there's some

00:27:56,350 --> 00:28:02,010
ideas but if people are using do you get

00:27:58,150 --> 00:28:02,010
push then this this becomes irrelevant a

00:28:02,700 --> 00:28:10,690
question about that if you I think there

00:28:07,570 --> 00:28:14,200
was this this overwrite kind of option

00:28:10,690 --> 00:28:17,530
in the yet does that mean that on the D

00:28:14,200 --> 00:28:21,010
get few in the you you lose all

00:28:17,530 --> 00:28:23,740
the alt history and just my my kid tree

00:28:21,010 --> 00:28:26,200
as I now have it is the turkey tree that

00:28:23,740 --> 00:28:29,110
you know you can't override what song do

00:28:26,200 --> 00:28:32,260
you get service because then the history

00:28:29,110 --> 00:28:34,810
wouldn't be fast-forwarding what oh what

00:28:32,260 --> 00:28:36,400
the override option is saying is do you

00:28:34,810 --> 00:28:38,020
get thinks you're going to lose

00:28:36,400 --> 00:28:40,600
something here and you're saying no it's

00:28:38,020 --> 00:28:41,980
okay I've got all the changes it's it's

00:28:40,600 --> 00:28:43,990
mainly designed to prevent you from

00:28:41,980 --> 00:28:45,670
accidentally failing to incorporate an N

00:28:43,990 --> 00:28:48,160
mu so actually that's another advantage

00:28:45,670 --> 00:28:49,810
you get won't let you push if it thinks

00:28:48,160 --> 00:28:58,660
you might have missed an N mu you have

00:28:49,810 --> 00:29:02,560
to tell it but how can I now then upload

00:28:58,660 --> 00:29:06,220
my package history that I currently have

00:29:02,560 --> 00:29:09,040
if you already have a ticket push once

00:29:06,220 --> 00:29:11,230
before then you would just use over I

00:29:09,040 --> 00:29:19,810
and it would merge your stuff over the

00:29:11,230 --> 00:29:21,610
top of the stuff that's that I know that

00:29:19,810 --> 00:29:25,570
you have a thought this over because

00:29:21,610 --> 00:29:27,400
well I know who you are but a one thing

00:29:25,570 --> 00:29:30,610
that I have left pending here is that

00:29:27,400 --> 00:29:33,490
how is this integrated for a groups

00:29:30,610 --> 00:29:36,070
working say a say that the parallel the

00:29:33,490 --> 00:29:39,040
Ruby all those groups that use way

00:29:36,070 --> 00:29:42,250
version control to handle large amounts

00:29:39,040 --> 00:29:48,540
of packages is something thought for it

00:29:42,250 --> 00:29:51,850
for the work flows sorry can you repeat

00:29:48,540 --> 00:29:55,630
I mean what I'm missing here is that a

00:29:51,850 --> 00:29:58,830
well I know that of I am NOT active as I

00:29:55,630 --> 00:30:02,950
was once in a in those communities but I

00:29:58,830 --> 00:30:07,150
still follow more or less tried to

00:30:02,950 --> 00:30:09,760
follow what's done there a how does this

00:30:07,150 --> 00:30:12,580
workflows integrate with things that go

00:30:09,760 --> 00:30:17,700
beyond individual packages to to the

00:30:12,580 --> 00:30:22,090
workings of whole groups I guess in I

00:30:17,700 --> 00:30:25,780
mean I the only set up like that I know

00:30:22,090 --> 00:30:29,680
is the Perl team but essentially it has

00:30:25,780 --> 00:30:30,910
tools to iterate across repos and so the

00:30:29,680 --> 00:30:35,590
iteration is happening

00:30:30,910 --> 00:30:37,960
at a level above get right as opposed to

00:30:35,590 --> 00:30:40,120
with SVN when you would say commit

00:30:37,960 --> 00:30:46,270
changes to a bunch of packages that

00:30:40,120 --> 00:30:52,510
wants atomic ish Li so I guess you would

00:30:46,270 --> 00:30:55,830
have to do the the same changes but I

00:30:52,510 --> 00:30:59,950
think that a there's two different

00:30:55,830 --> 00:31:03,220
questions here there's how you arrive at

00:30:59,950 --> 00:31:07,090
the thing you're ready to upload and how

00:31:03,220 --> 00:31:09,640
you upload it and the how you arrive for

00:31:07,090 --> 00:31:15,730
example by running said across two

00:31:09,640 --> 00:31:18,760
thousand packages doesn't change but

00:31:15,730 --> 00:31:21,910
then instead of doing two thousand

00:31:18,760 --> 00:31:24,940
uploads with the put you could also do

00:31:21,910 --> 00:31:26,980
them with D get push that will be an

00:31:24,940 --> 00:31:30,840
interesting would be an interesting test

00:31:26,980 --> 00:31:30,840
of it do you get service yes it would

00:31:31,050 --> 00:31:36,610
well it is two thousand commits now for

00:31:34,150 --> 00:31:38,970
for for the Perl team and they're only

00:31:36,610 --> 00:31:41,920
they happen more or less

00:31:38,970 --> 00:31:44,410
contemporaneously at the same time but

00:31:41,920 --> 00:31:46,860
they're not atomic in any sense they're

00:31:44,410 --> 00:31:50,380
only as atomic as the tools are bug free

00:31:46,860 --> 00:31:57,000
right I don't know Gregor do you have

00:31:50,380 --> 00:31:57,000
any disagreement not on this topic okay

00:31:57,960 --> 00:32:02,820
more questions yes in the back

00:32:05,049 --> 00:32:10,759
hey is Deegan a good tool for me to use

00:32:08,749 --> 00:32:12,559
if i want to collaborate with other

00:32:10,759 --> 00:32:14,450
people who are not Debian developers

00:32:12,559 --> 00:32:17,089
like I'm working inside a company or

00:32:14,450 --> 00:32:20,419
just with my friends or something sorry

00:32:17,089 --> 00:32:21,799
yeah if I'm working at a company or with

00:32:20,419 --> 00:32:24,200
my friends or something and I want to

00:32:21,799 --> 00:32:26,419
add local patches to Debian repositories

00:32:24,200 --> 00:32:28,820
is dgood a good place to start

00:32:26,419 --> 00:32:30,409
I've had good success using git

00:32:28,820 --> 00:32:32,359
repositories for packages where the

00:32:30,409 --> 00:32:35,179
upstream that is the Debian team is

00:32:32,359 --> 00:32:37,759
using it but sticking things in to get

00:32:35,179 --> 00:32:39,499
at work like importing it from an Espeon

00:32:37,759 --> 00:32:40,700
or just not packaged it all workflow is

00:32:39,499 --> 00:32:42,549
sort of weird and I would like to use D

00:32:40,700 --> 00:32:46,070
it are the tools there for me to do that

00:32:42,549 --> 00:32:48,559
so do you get one of the design

00:32:46,070 --> 00:32:50,869
philosophies of tiga is that it you only

00:32:48,559 --> 00:32:53,659
have to use D gets when source packages

00:32:50,869 --> 00:32:55,789
are involved if you're not dealing with

00:32:53,659 --> 00:32:57,529
source packages it should just be part

00:32:55,789 --> 00:32:59,239
something you can do with git what do

00:32:57,529 --> 00:33:00,679
you get right so we are generating

00:32:59,239 --> 00:33:03,289
source packages because we're building

00:33:00,679 --> 00:33:05,599
locally patch Debian packages so I'm

00:33:03,289 --> 00:33:07,249
gonna generate version 1.0 plus my

00:33:05,599 --> 00:33:08,869
company 1 or something and we're gonna

00:33:07,249 --> 00:33:11,059
have some weirdo local patch in there

00:33:08,869 --> 00:33:13,849
right right yeah I mean diga would let

00:33:11,059 --> 00:33:15,829
you obtain would let you obtain from

00:33:13,849 --> 00:33:18,919
Debian the thing you're gonna base your

00:33:15,829 --> 00:33:21,499
work on already and get ok no matter

00:33:18,919 --> 00:33:23,599
what's the Debian maintainer does okay

00:33:21,499 --> 00:33:25,369
so that that's an advantage is it going

00:33:23,599 --> 00:33:28,070
to give me any tooling for managing

00:33:25,369 --> 00:33:34,639
source packages in my own repository my

00:33:28,070 --> 00:33:36,619
own private repository what to say but

00:33:34,639 --> 00:33:39,409
I'm not I don't think I know why thing I

00:33:36,619 --> 00:33:43,519
think I might be have enough distance

00:33:39,409 --> 00:33:47,989
here to see where you're going so I

00:33:43,519 --> 00:33:50,049
think the the managing source packages

00:33:47,989 --> 00:33:52,940
in a repository isn't really a thing

00:33:50,049 --> 00:33:55,249
according to it really likes to think

00:33:52,940 --> 00:33:59,839
that they're ephemeral that Dec source

00:33:55,249 --> 00:34:01,669
packages are disposed oh okay go so this

00:33:59,839 --> 00:34:05,349
is like goes to the question of how to

00:34:01,669 --> 00:34:08,690
build a derivative distribution right

00:34:05,349 --> 00:34:10,339
and and the point is that in ticket it

00:34:08,690 --> 00:34:12,260
doesn't care where it's pushing things

00:34:10,339 --> 00:34:14,329
and where it's uploading things as long

00:34:12,260 --> 00:34:17,450
as you tell it the right URLs to upload

00:34:14,329 --> 00:34:21,260
to so by default it uploads to

00:34:17,450 --> 00:34:25,070
debian dot URL four-digit repository URL

00:34:21,260 --> 00:34:28,520
for debian archive URL for ftp master

00:34:25,070 --> 00:34:30,290
and etc and in your dig it packages you

00:34:28,520 --> 00:34:33,740
could change that config to pull from

00:34:30,290 --> 00:34:36,589
debian yet upload into your own private

00:34:33,740 --> 00:34:39,050
repository and it will if you provide

00:34:36,589 --> 00:34:41,450
the api switch match the bigot server

00:34:39,050 --> 00:34:43,310
api s-- and if your repository looks

00:34:41,450 --> 00:34:45,770
somewhat like debian then it should be

00:34:43,310 --> 00:34:48,950
quite easy to tell it pull from here but

00:34:45,770 --> 00:34:56,119
push there you just have to buy an

00:34:48,950 --> 00:34:57,680
enterprise license for the d gets okay

00:34:56,119 --> 00:35:01,579
in case anybody didn't get that was a

00:34:57,680 --> 00:35:03,500
job not attack en for ya however like

00:35:01,579 --> 00:35:05,810
for example for a boon to we haven't yet

00:35:03,500 --> 00:35:09,320
worked out how to integrate the merge

00:35:05,810 --> 00:35:11,329
workflow for merging from digit history

00:35:09,320 --> 00:35:13,910
of debian and basing a bun two-digit

00:35:11,329 --> 00:35:15,950
history on top off and merged with

00:35:13,910 --> 00:35:19,000
debian to get history because for us we

00:35:15,950 --> 00:35:23,599
want to merge packages they do right

00:35:19,000 --> 00:35:25,609
that's not clear yet we won't get merge

00:35:23,599 --> 00:35:28,430
to do the right thing with all the patch

00:35:25,609 --> 00:35:30,940
queues and everything right that's

00:35:28,430 --> 00:35:30,940
really hard

00:35:40,530 --> 00:35:49,560
more questions complaints people who

00:35:45,720 --> 00:35:54,930
want to revive get 3.0 who remembers get

00:35:49,560 --> 00:35:59,910
3.0 who here's an FTP master okay good

00:35:54,930 --> 00:36:06,950
it's safe to talk about it Sam needs a

00:35:59,910 --> 00:36:10,830
mic despite his previous claims I guess

00:36:06,950 --> 00:36:13,410
I'll say that I certainly there are

00:36:10,830 --> 00:36:16,830
times when I find dealing with get 3.0

00:36:13,410 --> 00:36:22,950
or with 3.0 quilt and get frustrating

00:36:16,830 --> 00:36:25,080
enough that I am so tempted to go

00:36:22,950 --> 00:36:27,750
randomly hook the package to override e

00:36:25,080 --> 00:36:31,620
package source so that it'll accept the

00:36:27,750 --> 00:36:33,570
native version somehow and then use 3.0

00:36:31,620 --> 00:36:35,660
native or just you know drop Debian

00:36:33,570 --> 00:36:39,120
revisions from my packages because if

00:36:35,660 --> 00:36:42,420
gilliam is going to be that way then I

00:36:39,120 --> 00:36:46,350
can be that way too because like

00:36:42,420 --> 00:36:49,140
seriously there are times where 3.0

00:36:46,350 --> 00:36:51,210
quilt just gets to be such a pain so

00:36:49,140 --> 00:36:54,060
you're proposing a social solution to a

00:36:51,210 --> 00:36:58,260
technical problems dub dub helper taught

00:36:54,060 --> 00:37:00,660
me that works well um so the when it I

00:36:58,260 --> 00:37:02,610
mean I could talk about the he gets MAME

00:37:00,660 --> 00:37:04,470
to rebase workflow just for a minute

00:37:02,610 --> 00:37:07,200
because that might be what you want

00:37:04,470 --> 00:37:10,710
um so I do not fully understand this

00:37:07,200 --> 00:37:13,740
head because it will because it's not

00:37:10,710 --> 00:37:15,960
done basically but how this do you get

00:37:13,740 --> 00:37:17,880
main rebase workflow will work as your

00:37:15,960 --> 00:37:20,640
opposed tree will have the upstream

00:37:17,880 --> 00:37:23,460
source and an impetus on applied with a

00:37:20,640 --> 00:37:26,190
Debian directory and then each patch

00:37:23,460 --> 00:37:28,260
will be represented by a commit and that

00:37:26,190 --> 00:37:30,150
will get pushed to the D get servers now

00:37:28,260 --> 00:37:32,640
obviously you're going to want to rebase

00:37:30,150 --> 00:37:34,560
and move those around especially when

00:37:32,640 --> 00:37:37,020
you emerge a new upstream version how is

00:37:34,560 --> 00:37:38,910
that gonna work well roughly do you get

00:37:37,020 --> 00:37:40,590
or well it's actually not going to be

00:37:38,910 --> 00:37:43,800
part of do you get because it's not

00:37:40,590 --> 00:37:46,980
about source packages rewind to the

00:37:43,800 --> 00:37:49,740
upstream source and rebase your patches

00:37:46,980 --> 00:37:53,750
however you want and then merge that on

00:37:49,740 --> 00:37:57,950
top of the old patch queue so do we

00:37:53,750 --> 00:37:59,900
monka okay um you will you'll get a

00:37:57,950 --> 00:38:03,500
trapeze a trapezoid patent and you'll

00:37:59,900 --> 00:38:05,480
get history but and then in the sauce

00:38:03,500 --> 00:38:08,510
package the package will probably just

00:38:05,480 --> 00:38:10,340
be squashed because the thought is well

00:38:08,510 --> 00:38:12,830
if the patch history is a beautiful

00:38:10,340 --> 00:38:14,660
series of commits on the D get server it

00:38:12,830 --> 00:38:19,580
doesn't really matter what goes into the

00:38:14,660 --> 00:38:22,460
sauce package so that's coming soon so

00:38:19,580 --> 00:38:24,110
so our video overlords and foremost we

00:38:22,460 --> 00:38:27,530
have five minutes so if you've been

00:38:24,110 --> 00:38:30,860
working up the courage to ask a question

00:38:27,530 --> 00:38:33,290
and you're really bored of do you get it

00:38:30,860 --> 00:38:38,920
now is your chance yes always has

00:38:33,290 --> 00:38:38,920
something to do with get up there we go

00:38:39,550 --> 00:38:46,850
so is there a plan for how to deal with

00:38:44,450 --> 00:38:50,840
packages and get the tar in conveniently

00:38:46,850 --> 00:38:52,460
large so like data for games that kind

00:38:50,840 --> 00:38:55,330
of thing I'm thinking of opener in a

00:38:52,460 --> 00:39:03,710
data here which is enormous

00:38:55,330 --> 00:39:05,810
there is no plan is a hard problem but I

00:39:03,710 --> 00:39:09,200
mean if you if we're using if we're

00:39:05,810 --> 00:39:11,140
using get work like we've got good get

00:39:09,200 --> 00:39:15,260
workflows for ninety percent packages

00:39:11,140 --> 00:39:17,290
that's enough for me is there a plan for

00:39:15,260 --> 00:39:21,680
dealing with those packages in Debian I

00:39:17,290 --> 00:39:23,630
mean the they work yeah I guess that's

00:39:21,680 --> 00:39:28,100
off topic sorry I'm breaking my own rule

00:39:23,630 --> 00:39:30,490
about having something to do any other

00:39:28,100 --> 00:39:30,490
yes

00:39:33,690 --> 00:39:38,190
maybe switching gears just a little bit

00:39:36,210 --> 00:39:42,329
is there any has anybody thought about

00:39:38,190 --> 00:39:44,220
how we might indicate or better connect

00:39:42,329 --> 00:39:48,869
when bugs something that I care about

00:39:44,220 --> 00:39:52,170
are closed in specific get commits to

00:39:48,869 --> 00:39:54,390
two packages I mean one of the things

00:39:52,170 --> 00:39:58,049
that I keep wishing that somebody would

00:39:54,390 --> 00:40:03,450
make easy is the ability to graft on the

00:39:58,049 --> 00:40:04,980
get tree onto a set of bugs so that you

00:40:03,450 --> 00:40:08,869
know that is it was found in this

00:40:04,980 --> 00:40:12,900
version and in this commit ish it was

00:40:08,869 --> 00:40:16,410
fixed so the BTS could in theory track

00:40:12,900 --> 00:40:19,069
the Debian directed graph of versions

00:40:16,410 --> 00:40:23,099
that depend on which mapped on to the

00:40:19,069 --> 00:40:24,750
git tree at the same time so if anybody

00:40:23,099 --> 00:40:26,940
thinks that's exciting or has comments

00:40:24,750 --> 00:40:31,680
on that I'd love to see somebody give me

00:40:26,940 --> 00:40:34,650
patches that do all that so it sounds

00:40:31,680 --> 00:40:39,210
like a job for get notes which are

00:40:34,650 --> 00:40:44,069
unfortunately sort of half implemented I

00:40:39,210 --> 00:40:46,500
mean they're getting better but but so

00:40:44,069 --> 00:40:48,660
we did make some tools which I don't

00:40:46,500 --> 00:40:50,970
think we're very widely deployed but we

00:40:48,660 --> 00:40:55,020
made some tools to experiment with in

00:40:50,970 --> 00:40:58,349
the package Perl team to track not bug

00:40:55,020 --> 00:40:59,099
metadata per se but a patch workflow

00:40:58,349 --> 00:41:02,339
like this

00:40:59,099 --> 00:41:06,029
patches forwarded and attach that to

00:41:02,339 --> 00:41:09,210
specific git commits and that more or

00:41:06,029 --> 00:41:13,380
less worked from a technical point of

00:41:09,210 --> 00:41:16,349
view I mean it's a question of did we

00:41:13,380 --> 00:41:20,299
end up using it no but or I say we

00:41:16,349 --> 00:41:20,299
loosely did the team end up using

00:41:25,510 --> 00:41:30,339
seems like a reasonable place to and if

00:41:28,660 --> 00:41:33,460
you have anything else - sure

00:41:30,339 --> 00:41:38,079
so Oh Elvis always has a question

00:41:33,460 --> 00:41:39,549
good run out the clock I just an idea

00:41:38,079 --> 00:41:42,880
that popped into my mind would this be a

00:41:39,549 --> 00:41:45,730
good way of converting your latest SVN

00:41:42,880 --> 00:41:47,500
repository to get repository but just

00:41:45,730 --> 00:41:49,690
going to the yet

00:41:47,500 --> 00:41:52,030
oh you mean like just doing gig at cloud

00:41:49,690 --> 00:41:53,829
I'm working from that it would be the

00:41:52,030 --> 00:41:55,990
throw away all your history approach

00:41:53,829 --> 00:41:57,670
which I mean given the way most people

00:41:55,990 --> 00:42:03,369
use SVN that's probably perfectly

00:41:57,670 --> 00:42:07,020
reasonable I said most people not

00:42:03,369 --> 00:42:07,020
including anyone in this room of course

00:42:07,470 --> 00:42:16,440
thanks for coming all right thanks a lot

00:42:09,819 --> 00:42:16,440

YouTube URL: https://www.youtube.com/watch?v=yhoxXfSHc7Y


