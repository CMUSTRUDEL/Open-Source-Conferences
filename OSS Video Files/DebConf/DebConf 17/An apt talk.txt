Title: An apt talk
Publication date: 2017-12-06
Playlist: DebConf 17
Description: 
	by Julian Andres Klode

At: DebConf17
https://debconf17.debconf.org/
Room: Rex
Scheduled start: 2017-08-07 15:30:00
Captions: 
	00:00:04,380 --> 00:00:13,350
I guess we're ready so welcome to a nap

00:00:10,440 --> 00:00:18,529
talk you might have wondered about the

00:00:13,350 --> 00:00:22,140
name because it's not very clever but

00:00:18,529 --> 00:00:24,840
there's obviously a story because apt is

00:00:22,140 --> 00:00:29,460
an adjective but apt is also short for

00:00:24,840 --> 00:00:32,579
advanced package tool and how could you

00:00:29,460 --> 00:00:37,140
call it you could spell it apt you could

00:00:32,579 --> 00:00:39,150
just pronounce it as the word apt but

00:00:37,140 --> 00:00:41,760
it's also confusing because there's also

00:00:39,150 --> 00:00:43,500
a command called app now which you

00:00:41,760 --> 00:00:45,990
really should try because it's a bit

00:00:43,500 --> 00:00:48,360
easier and it has nice progress

00:00:45,990 --> 00:00:50,640
reporting and stuff a lot of people

00:00:48,360 --> 00:00:55,230
don't know about it but try it out it's

00:00:50,640 --> 00:00:58,079
nice and this is an app talk because

00:00:55,230 --> 00:01:02,400
it's about apt and apt is part of Debian

00:00:58,079 --> 00:01:04,939
so hence the name app an app talk but

00:01:02,400 --> 00:01:08,909
let's talk about more important stuff

00:01:04,939 --> 00:01:12,479
and the first one is actually be is

00:01:08,909 --> 00:01:15,749
deporting because I figured portability

00:01:12,479 --> 00:01:19,249
is a great way to ensure that stuff

00:01:15,749 --> 00:01:22,319
works and to find bugs in software and

00:01:19,249 --> 00:01:25,950
we use continuous integration for

00:01:22,319 --> 00:01:28,229
testing apt regularly and particularly

00:01:25,950 --> 00:01:32,039
we use Travis which is a free service

00:01:28,229 --> 00:01:37,979
available on github and it only supports

00:01:32,039 --> 00:01:41,280
Windows Linux and Mac OS and I don't

00:01:37,979 --> 00:01:44,389
really have a Mac I initially had a port

00:01:41,280 --> 00:01:46,829
of app to FreeBSD but it's someone

00:01:44,389 --> 00:01:52,289
requests at some point and stopped

00:01:46,829 --> 00:01:57,029
working but I could get it working on

00:01:52,289 --> 00:02:00,630
the Mac with help on the IRC channel so

00:01:57,029 --> 00:02:02,459
I just provided some patches and our

00:02:00,630 --> 00:02:06,270
users tested it and compiled it and

00:02:02,459 --> 00:02:08,190
report it back test suit now runs that

00:02:06,270 --> 00:02:09,990
was nice but it's not really done yet

00:02:08,190 --> 00:02:14,210
and it's missing a lot of functions on

00:02:09,990 --> 00:02:17,630
the Mac especially the one in PASOK's

00:02:14,210 --> 00:02:21,080
2008 so the whole at femme

00:02:17,630 --> 00:02:22,910
is mostly missing and when using more

00:02:21,080 --> 00:02:27,770
functions now so it's even request

00:02:22,910 --> 00:02:30,260
request more than it used to but that's

00:02:27,770 --> 00:02:36,050
not really an interesting thing to talk

00:02:30,260 --> 00:02:44,570
about and a much more interesting topic

00:02:36,050 --> 00:02:50,240
is unattended upgrading and yes we did a

00:02:44,570 --> 00:02:53,420
lot of work on that and it started with

00:02:50,240 --> 00:02:55,130
a crunch up in 1.2 point 10 or before

00:02:53,420 --> 00:02:57,230
one point two point 10 it was a crunch

00:02:55,130 --> 00:03:00,950
up then ran daily and a crunch up a

00:02:57,230 --> 00:03:03,710
daily cron job runs I think between 6:00

00:03:00,950 --> 00:03:08,510
and 7:00 in the morning and we had a

00:03:03,710 --> 00:03:12,110
random sleep of 30 minutes which helped

00:03:08,510 --> 00:03:14,180
to distribute the load on the mirrors so

00:03:12,110 --> 00:03:16,310
you don't want all machines updating at

00:03:14,180 --> 00:03:20,300
the same time because then the mirror

00:03:16,310 --> 00:03:23,060
just you know explodes but that was not

00:03:20,300 --> 00:03:26,860
enough for everyone especially some

00:03:23,060 --> 00:03:29,990
ubuntu cloud mirrors where it overloaded

00:03:26,860 --> 00:03:32,690
so what we did and one point two point

00:03:29,990 --> 00:03:36,020
10 was we switched from a crunch up to

00:03:32,690 --> 00:03:39,110
system D timer and the system D timer

00:03:36,020 --> 00:03:41,570
ran up two times during the day at 6:00

00:03:39,110 --> 00:03:42,100
and in the morning and 6:00 in the

00:03:41,570 --> 00:03:46,610
evening

00:03:42,100 --> 00:03:49,580
but we added a random delay or F 12

00:03:46,610 --> 00:03:52,520
hours so basically it ran any time

00:03:49,580 --> 00:03:55,400
during the day but it ran twice during a

00:03:52,520 --> 00:03:56,959
day and we had a check-in site the

00:03:55,400 --> 00:04:01,490
script which made sure that it only

00:03:56,959 --> 00:04:03,860
updated if it EV 24 hours had passed and

00:04:01,490 --> 00:04:07,190
the whole thing was persistent so the

00:04:03,860 --> 00:04:11,120
timer was restarted at boot and I'd

00:04:07,190 --> 00:04:13,580
resumed if it should have run with in by

00:04:11,120 --> 00:04:14,260
of the machine was off and we still have

00:04:13,580 --> 00:04:17,510
a cron job

00:04:14,260 --> 00:04:20,209
so that's still a compatibility to

00:04:17,510 --> 00:04:23,900
wrapper for systems that do not use

00:04:20,209 --> 00:04:26,350
system D because obviously we don't want

00:04:23,900 --> 00:04:26,350
to break them

00:04:26,370 --> 00:04:34,530
and there are a few problems with this

00:04:29,630 --> 00:04:36,690
first of all it rents at any time during

00:04:34,530 --> 00:04:38,669
the other day and that's fine for

00:04:36,690 --> 00:04:42,449
downloading really but not for upgrading

00:04:38,669 --> 00:04:47,340
because well if your database upgrades

00:04:42,449 --> 00:04:49,139
during the day and its stops accessing

00:04:47,340 --> 00:04:51,720
connections then your site breaks down

00:04:49,139 --> 00:04:54,210
for some time or if the database gets

00:04:51,720 --> 00:04:57,919
corrupted or something it's just

00:04:54,210 --> 00:05:00,060
completely broken until you fix it and

00:04:57,919 --> 00:05:02,040
you don't want you to have that young

00:05:00,060 --> 00:05:04,850
business hours where you actually rely

00:05:02,040 --> 00:05:08,460
on your service being available and

00:05:04,850 --> 00:05:11,400
another problem is that the service

00:05:08,460 --> 00:05:13,440
starting at boot and resume doesn't wait

00:05:11,400 --> 00:05:17,370
for network because we did not have a

00:05:13,440 --> 00:05:18,930
dependency or networking so we improve

00:05:17,370 --> 00:05:21,000
that a bit in one point for point one

00:05:18,930 --> 00:05:23,580
one point four point two one by four

00:05:21,000 --> 00:05:26,490
point three point four point five and

00:05:23,580 --> 00:05:27,949
point six so you see it took quite a few

00:05:26,490 --> 00:05:30,030
iterations to get this right

00:05:27,949 --> 00:05:32,190
basically we broke the time line two

00:05:30,030 --> 00:05:34,889
timers one for the updating and the

00:05:32,190 --> 00:05:38,970
other did upgrading and cleanup of list

00:05:34,889 --> 00:05:41,900
tips and packages and stuff and we made

00:05:38,970 --> 00:05:45,780
the update job run throughout the day

00:05:41,900 --> 00:05:50,820
randomly as good job before but the

00:05:45,780 --> 00:05:53,669
upgrade job now became run Ning now was

00:05:50,820 --> 00:05:57,800
running at six and to 7:00 a.m. actually

00:05:53,669 --> 00:06:00,270
at 6:00 a.m. plus minus one hour and

00:05:57,800 --> 00:06:02,789
that way it was reliable again

00:06:00,270 --> 00:06:06,060
so the upgrades always happen at the

00:06:02,789 --> 00:06:09,419
same time but there's some problem with

00:06:06,060 --> 00:06:12,479
that as well because when the update

00:06:09,419 --> 00:06:16,080
runs unless the update is distributed

00:06:12,479 --> 00:06:17,580
over 24 hours the up Craig could if you

00:06:16,080 --> 00:06:19,470
have multiple machines the up guy could

00:06:17,580 --> 00:06:22,680
install different upgrades on different

00:06:19,470 --> 00:06:26,450
machines and that's not entirely optimal

00:06:22,680 --> 00:06:27,840
but I think it's the best we can get and

00:06:26,450 --> 00:06:29,280
the timer

00:06:27,840 --> 00:06:30,840
we made the time I depend on the network

00:06:29,280 --> 00:06:33,240
online target so the network online

00:06:30,840 --> 00:06:36,539
target is a target that basically

00:06:33,240 --> 00:06:38,310
depends on various helpers for network

00:06:36,539 --> 00:06:40,380
managing services like network manager

00:06:38,310 --> 00:06:42,840
wait on line and system D Network T

00:06:40,380 --> 00:06:45,930
right online and it started at boot and

00:06:42,840 --> 00:06:49,280
waits until the network is available but

00:06:45,930 --> 00:06:52,680
that doesn't really work as because

00:06:49,280 --> 00:06:55,920
it only helps at boot it doesn't work at

00:06:52,680 --> 00:06:58,290
resume because as I said the target only

00:06:55,920 --> 00:07:00,560
starts when you're booting and then it

00:06:58,290 --> 00:07:04,140
is started and the Reba Nancy says

00:07:00,560 --> 00:07:07,640
satisfied and it won't wait anymore to

00:07:04,140 --> 00:07:11,100
resume so what we can do about this is

00:07:07,640 --> 00:07:12,900
we can build a script on our own which

00:07:11,100 --> 00:07:15,630
basically just checks which network

00:07:12,900 --> 00:07:19,110
managers running and then just says

00:07:15,630 --> 00:07:22,410
calls the wait online helpers of these

00:07:19,110 --> 00:07:26,250
network managers but that's not done yet

00:07:22,410 --> 00:07:29,880
and will come later and another

00:07:26,250 --> 00:07:34,020
alternative we had was to build our own

00:07:29,880 --> 00:07:36,690
online waiting helper that just tries

00:07:34,020 --> 00:07:39,570
host and the sources.list file until it

00:07:36,690 --> 00:07:41,880
connects to one and just tries that for

00:07:39,570 --> 00:07:44,160
30 minutes or so well that's even more

00:07:41,880 --> 00:07:48,000
complicated so I guess we'll start with

00:07:44,160 --> 00:07:50,370
the whole weight online help are running

00:07:48,000 --> 00:07:57,390
in the script so you at least get it

00:07:50,370 --> 00:08:01,140
right a bit another thing this is very

00:07:57,390 --> 00:08:06,630
reason is HTTP support which I rewrote

00:08:01,140 --> 00:08:10,050
so in 2006 we had a curl based HTTP

00:08:06,630 --> 00:08:11,430
method and this was completely separate

00:08:10,050 --> 00:08:14,820
from the HTTP method

00:08:11,430 --> 00:08:19,190
it had no pipelining support it had no

00:08:14,820 --> 00:08:22,470
support for using HTTP proxies in HTTP

00:08:19,190 --> 00:08:25,860
requests I don't think HTTP proxies are

00:08:22,470 --> 00:08:28,350
very common but I guess you should

00:08:25,860 --> 00:08:32,610
support them it's getting even more

00:08:28,350 --> 00:08:35,310
important these days I think and well

00:08:32,610 --> 00:08:38,520
that was not optimal so this year I

00:08:35,310 --> 00:08:40,229
think last month or so I rewrote

00:08:38,520 --> 00:08:43,800
actually best support and I basically

00:08:40,229 --> 00:08:48,000
just added a compatibility layer to the

00:08:43,800 --> 00:08:49,920
HTTP method so now you can use HTTP

00:08:48,000 --> 00:08:53,070
support in the HTTP method it's

00:08:49,920 --> 00:08:54,120
installed by default and it's basically

00:08:53,070 --> 00:08:58,290
just one

00:08:54,120 --> 00:09:00,420
tiny wrapper around a socket so it's

00:08:58,290 --> 00:09:03,750
completely transparent if you use HTTP

00:09:00,420 --> 00:09:08,100
on HTTP it's the same code apart from

00:09:03,750 --> 00:09:10,890
calling a few TLS functions if something

00:09:08,100 --> 00:09:14,660
broke please tell us because obviously

00:09:10,890 --> 00:09:14,660
we can't check all configurations

00:09:16,790 --> 00:09:30,839
um oops yeah stop using it key why of

00:09:25,950 --> 00:09:33,600
course in stretch we deprecated the F

00:09:30,839 --> 00:09:34,320
key basically because we did not want to

00:09:33,600 --> 00:09:36,750
have

00:09:34,320 --> 00:09:38,040
gbt installed all the time on small

00:09:36,750 --> 00:09:42,240
systems because it has a lot of

00:09:38,040 --> 00:09:45,930
dependencies for like the agent the gbg

00:09:42,240 --> 00:09:47,820
agent and stuff but a lot of features in

00:09:45,930 --> 00:09:51,800
fq required so it has a list command

00:09:47,820 --> 00:09:54,960
which shows you keys and hearings and

00:09:51,800 --> 00:09:59,130
these this only works if you have gbt

00:09:54,960 --> 00:10:02,430
installed and in stretch we demoted the

00:09:59,130 --> 00:10:04,529
dependency and gbg to recommence which

00:10:02,430 --> 00:10:06,420
normally means it's installed by default

00:10:04,529 --> 00:10:09,230
but that actually doesn't work because

00:10:06,420 --> 00:10:12,990
app is installed by the bootstrap and

00:10:09,230 --> 00:10:15,350
that does not install recommends so you

00:10:12,990 --> 00:10:21,690
might not have gbg installed on you

00:10:15,350 --> 00:10:24,570
current systems and now it's suggest so

00:10:21,690 --> 00:10:30,240
it's not going to be installed and even

00:10:24,570 --> 00:10:32,490
more cases I think and previously people

00:10:30,240 --> 00:10:35,670
install new keys basically by using app

00:10:32,490 --> 00:10:37,170
key at or app key advanced the Advanced

00:10:35,670 --> 00:10:39,720
Mode we have received keys on key

00:10:37,170 --> 00:10:42,060
servers which is or was a bit dangerous

00:10:39,720 --> 00:10:45,930
because gbg doesn't really or didn't

00:10:42,060 --> 00:10:49,290
really check key IDs if they were if the

00:10:45,930 --> 00:10:53,450
key matched the key ID you requested so

00:10:49,290 --> 00:10:56,550
um what you should do instead is drop a

00:10:53,450 --> 00:11:00,510
keyring into a gbg file in the trusted

00:10:56,550 --> 00:11:04,079
gbg dot d directory what you can do

00:11:00,510 --> 00:11:05,430
since squeeze or alternatively if you

00:11:04,079 --> 00:11:07,710
only need to spot stretch and newer

00:11:05,430 --> 00:11:10,710
versions you can use ask

00:11:07,710 --> 00:11:15,029
my files as well just named Len ASC and

00:11:10,710 --> 00:11:17,690
it will work and you can use the gbg

00:11:15,029 --> 00:11:21,360
exports you generate the files and

00:11:17,690 --> 00:11:24,779
previously people used EBG keyring but

00:11:21,360 --> 00:11:28,920
gbg keyring switched the format in GPT

00:11:24,779 --> 00:11:31,380
2.1 i think to key box format and that's

00:11:28,920 --> 00:11:33,060
not compatible so you get completely

00:11:31,380 --> 00:11:35,970
weird errors where you can't find

00:11:33,060 --> 00:11:48,630
keyring keys and everything just breaks

00:11:35,970 --> 00:11:50,520
down which is not really optimal oh yes

00:11:48,630 --> 00:11:54,630
why I didn't make up key drop the file

00:11:50,520 --> 00:11:58,130
and well we should do that eventually

00:11:54,630 --> 00:12:00,750
but we can't identify he brings because

00:11:58,130 --> 00:12:03,270
the old keyrings they don't have magic

00:12:00,750 --> 00:12:06,540
header so they you can't really identify

00:12:03,270 --> 00:12:08,459
their gbg caring so not where we can at

00:12:06,540 --> 00:12:25,130
least check if a file is a key box and

00:12:08,459 --> 00:12:25,130
then drop the key box ok why

00:12:26,250 --> 00:12:30,700
[Laughter]

00:12:38,150 --> 00:12:41,520
[Laughter]

00:12:46,430 --> 00:12:53,880
is it on yes okay so I know now it's too

00:12:51,600 --> 00:12:55,680
late but what I'm trying to say is it

00:12:53,880 --> 00:12:58,530
would have been nice for everything that

00:12:55,680 --> 00:13:02,040
was using up key if a key had been

00:12:58,530 --> 00:13:04,320
changed to now that you have to put the

00:13:02,040 --> 00:13:06,240
file in the directory you have up key do

00:13:04,320 --> 00:13:08,430
that for you so that you didn't have to

00:13:06,240 --> 00:13:11,430
change the things that we're using up

00:13:08,430 --> 00:13:12,900
key right since I know now it's too late

00:13:11,430 --> 00:13:15,990
now we have already changed all our

00:13:12,900 --> 00:13:18,270
tools but I'm asking like why wasn't

00:13:15,990 --> 00:13:19,830
this considered well I think one of the

00:13:18,270 --> 00:13:23,880
problems is how do you name the file

00:13:19,830 --> 00:13:26,730
you're putting the key in so if you have

00:13:23,880 --> 00:13:29,700
if you I don't have gbg you can't know

00:13:26,730 --> 00:13:31,620
the key ID and then you don't have a

00:13:29,700 --> 00:13:33,660
name you could pick a random name or a

00:13:31,620 --> 00:13:36,000
you idea or a hash or something but

00:13:33,660 --> 00:13:44,100
that's not really optimal and you forget

00:13:36,000 --> 00:13:49,860
duplicate keys and you don't you need to

00:13:44,100 --> 00:13:53,040
validate we don't validate the key at

00:13:49,860 --> 00:13:55,370
all we just concatenate the files

00:13:53,040 --> 00:14:03,450
together and then we run G B G V on it

00:13:55,370 --> 00:14:07,550
I'm verifying something a small version

00:14:03,450 --> 00:14:07,550
of G B G that just can verify stuff

00:14:11,660 --> 00:14:19,770
let's talk about something else yeah in

00:14:18,060 --> 00:14:21,240
one point for obviously the most

00:14:19,770 --> 00:14:25,110
important feature is that mu is now

00:14:21,240 --> 00:14:30,990
reproducible they can use the sauce

00:14:25,110 --> 00:14:35,580
dataport thing and of course sha-1 is

00:14:30,990 --> 00:14:41,240
now completely untrusted but if you do

00:14:35,580 --> 00:14:44,730
need to use sha-1 a bit so I think we

00:14:41,240 --> 00:14:47,880
made and I'm not entirely sure which

00:14:44,730 --> 00:14:49,890
part of the sha-1 we made untrusted but

00:14:47,880 --> 00:14:51,990
there's an option for you to make it

00:14:49,890 --> 00:14:56,019
weak again then it only warned so that

00:14:51,990 --> 00:14:59,350
there's an sha-1 signature and no sha-2

00:14:56,019 --> 00:15:02,290
signature instead of airing out so you

00:14:59,350 --> 00:15:04,509
can revert to the previous behavior any

00:15:02,290 --> 00:15:07,300
1.5 we introduced a new feature that

00:15:04,509 --> 00:15:11,739
checks if value sink and release files

00:15:07,300 --> 00:15:14,529
change like the code name or the well

00:15:11,739 --> 00:15:16,660
the other fields read to the release so

00:15:14,529 --> 00:15:18,850
if the release changed you installed

00:15:16,660 --> 00:15:20,889
stable and you name your source list

00:15:18,850 --> 00:15:22,989
entry stable and it's a new stable now

00:15:20,889 --> 00:15:26,319
it will ask you hey do you want to

00:15:22,989 --> 00:15:28,269
upgrade to this new stable basically and

00:15:26,319 --> 00:15:31,420
we also documented the off dot conf

00:15:28,269 --> 00:15:34,329
format which is basically net RC for apt

00:15:31,420 --> 00:15:37,269
I don't know if it's actually I'm

00:15:34,329 --> 00:15:41,829
released yet but if not it will happen

00:15:37,269 --> 00:15:53,049
later today and I think that's it if any

00:15:41,829 --> 00:15:54,519
more questions like please ask thank you

00:15:53,049 --> 00:15:56,259
for your talk in your work on that

00:15:54,519 --> 00:15:58,989
that's really appreciated and I

00:15:56,259 --> 00:16:03,459
especially appreciate the switch from AB

00:15:58,989 --> 00:16:05,470
jet plane apt it's just amazing to say

00:16:03,459 --> 00:16:08,170
four keystrokes another command that I

00:16:05,470 --> 00:16:12,309
use all the time like that so thank you

00:16:08,170 --> 00:16:15,069
very much regarding that one problem I

00:16:12,309 --> 00:16:19,540
have now as I am constantly typing

00:16:15,069 --> 00:16:22,809
things like apt policy and app random

00:16:19,540 --> 00:16:25,779
whatever that I that fail because I need

00:16:22,809 --> 00:16:28,509
to use apt cash or AB get or I do still

00:16:25,779 --> 00:16:36,220
some things that are not in the just apt

00:16:28,509 --> 00:16:38,919
command so a policy works for example ok

00:16:36,220 --> 00:16:43,169
so if I find one like that that annoys

00:16:38,919 --> 00:16:43,169
me I can file a bug against it yeah

00:16:51,660 --> 00:17:00,270
hello yeah hello Julian

00:16:56,580 --> 00:17:04,260
thank you for the talk and one problem I

00:17:00,270 --> 00:17:07,890
have is when I have multi arc foreign

00:17:04,260 --> 00:17:09,839
architecture then the with the our call

00:17:07,890 --> 00:17:13,680
packages you get different versions and

00:17:09,839 --> 00:17:17,690
then there's some uninstall ability yep

00:17:13,680 --> 00:17:23,310
issues could we are you thinking or

00:17:17,690 --> 00:17:25,890
working on using the binary alcohol but

00:17:23,310 --> 00:17:30,300
it is file that FTP master is providing

00:17:25,890 --> 00:17:34,920
and try to not use the alcohol versions

00:17:30,300 --> 00:17:36,930
from the binary architecture I'm not

00:17:34,920 --> 00:17:40,620
sure if we want to do that but we

00:17:36,930 --> 00:17:43,560
probably could do that okay so but it's

00:17:40,620 --> 00:17:46,740
not nothing I really worked on so okay

00:17:43,560 --> 00:17:50,570
this is not in their roadmap then and

00:17:46,740 --> 00:17:50,570
it's not in my roadmap okay

00:18:01,710 --> 00:18:05,820
so if that is not on your roadmap what

00:18:03,960 --> 00:18:09,150
is on the roadmap so what are the next

00:18:05,820 --> 00:18:14,280
things that we can see or weight in apt

00:18:09,150 --> 00:18:16,080
or up that's a good question I think

00:18:14,280 --> 00:18:19,260
more sandboxing features from the done

00:18:16,080 --> 00:18:21,300
method and maybe reworked sandboxing so

00:18:19,260 --> 00:18:22,830
currently you need to make files

00:18:21,300 --> 00:18:25,710
available for the underscore app user

00:18:22,830 --> 00:18:29,100
like your net RC file which is actually

00:18:25,710 --> 00:18:32,640
fixed now and keys if you use private

00:18:29,100 --> 00:18:34,140
keys with the HTTP support then you need

00:18:32,640 --> 00:18:36,390
to make those readable for the

00:18:34,140 --> 00:18:38,520
underscore app user and it would be

00:18:36,390 --> 00:18:42,920
nicer to just open the files as root and

00:18:38,520 --> 00:18:45,450
then pass them to the protected method

00:18:42,920 --> 00:18:49,470
so you don't need to make them available

00:18:45,450 --> 00:18:52,550
to the apt user in general that improves

00:18:49,470 --> 00:18:52,550
things a bit I think

00:18:57,070 --> 00:19:02,450
they're probably other staff on the

00:18:58,660 --> 00:19:05,579
roadmap but I can't remember all of it I

00:19:02,450 --> 00:19:05,579
[Music]

00:19:08,160 --> 00:19:16,300
forgot what my real question was so I

00:19:13,590 --> 00:19:18,700
used on attended upgrades regularly on

00:19:16,300 --> 00:19:20,380
most servers I deploy and I think that's

00:19:18,700 --> 00:19:22,330
great that it's there and it's working

00:19:20,380 --> 00:19:25,750
very well in general especially in the

00:19:22,330 --> 00:19:29,050
later versions what my problem is when I

00:19:25,750 --> 00:19:31,630
need to upgrade 250 servers between

00:19:29,050 --> 00:19:33,280
major releases I end up doing constantly

00:19:31,630 --> 00:19:35,470
the same things over and over again I

00:19:33,280 --> 00:19:38,380
need to use all sorts of tricks and

00:19:35,470 --> 00:19:39,790
tools and various devices to automate

00:19:38,380 --> 00:19:43,360
that thing those things and I was

00:19:39,790 --> 00:19:46,660
wondering if people on the debit side

00:19:43,360 --> 00:19:48,250
were working on things like what it

00:19:46,660 --> 00:19:50,830
wouldn't do is doing with the do release

00:19:48,250 --> 00:19:53,470
of great script and things like that and

00:19:50,830 --> 00:19:58,090
we can work together on a solution that

00:19:53,470 --> 00:20:00,370
would allow some automation for major

00:19:58,090 --> 00:20:03,130
releases and if that was on the roadmap

00:20:00,370 --> 00:20:07,390
for you I think it would be nice to have

00:20:03,130 --> 00:20:10,380
something like that but we don't have a

00:20:07,390 --> 00:20:10,380
plan for that currently

00:20:15,670 --> 00:20:21,850
but I also have the idea of having some

00:20:18,720 --> 00:20:24,370
weak conflicts or something then you

00:20:21,850 --> 00:20:27,100
could just do the removals of packages

00:20:24,370 --> 00:20:30,310
say this package is obsolete and remove

00:20:27,100 --> 00:20:32,590
that if you want to that would be nice

00:20:30,310 --> 00:20:34,300
as a first step maybe they could have a

00:20:32,590 --> 00:20:36,280
metre package release upgrade or

00:20:34,300 --> 00:20:40,710
something at the install and then it

00:20:36,280 --> 00:20:40,710
just automatically removes all old stuff

00:20:48,000 --> 00:20:52,560
okay I think we're done thanks for

00:20:51,390 --> 00:21:01,339
coming

00:20:52,560 --> 00:21:01,339

YouTube URL: https://www.youtube.com/watch?v=mZlYVYAfHZQ


