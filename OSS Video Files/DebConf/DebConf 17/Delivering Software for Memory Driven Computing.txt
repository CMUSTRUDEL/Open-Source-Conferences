Title: Delivering Software for Memory Driven Computing
Publication date: 2017-12-05
Playlist: DebConf 17
Description: 
	by Keith Packard

At: DebConf17
https://debconf17.debconf.org/
Room: Buzz
Scheduled start: 2017-08-06 11:00:00
Captions: 
	00:00:08,840 --> 00:00:16,290
so our first talk about first regular

00:00:13,440 --> 00:00:19,020
talk of the official death comm schedule

00:00:16,290 --> 00:00:21,180
will be very Keith Packard from Hewlett

00:00:19,020 --> 00:00:24,119
Packard Enterprise and Debian project

00:00:21,180 --> 00:00:27,170
and he'll be talking about delivering

00:00:24,119 --> 00:00:30,679
software for memory driven computing

00:00:27,170 --> 00:00:30,679
please give it up applause

00:00:35,660 --> 00:00:46,239
good morning everybody I've been here in

00:00:37,969 --> 00:00:46,239
Montreal for about six hours where is

00:00:48,070 --> 00:00:55,089
just in Vancouver Canada and is heading

00:00:52,699 --> 00:00:59,839
for the airport so I'll let you know

00:00:55,089 --> 00:01:11,210
those of the day and we should see you

00:00:59,839 --> 00:01:15,520
here tomorrow do appreciate that but the

00:01:11,210 --> 00:01:15,520
only question I have been asked so far

00:01:18,970 --> 00:01:23,539
okay so I'm going to talk about how

00:01:22,039 --> 00:01:24,830
we're delivering some how we using

00:01:23,539 --> 00:01:28,130
getting in to deliver software from

00:01:24,830 --> 00:01:31,610
every different computing and I want to

00:01:28,130 --> 00:01:33,200
first give a you know the 30,000 foot

00:01:31,610 --> 00:01:36,500
view of what we think every different

00:01:33,200 --> 00:01:38,509
computing is I'll show a little demo a

00:01:36,500 --> 00:01:45,200
little video demo that we did it's

00:01:38,509 --> 00:01:48,110
really boring it's literally a video but

00:01:45,200 --> 00:01:50,270
it you know it's memory computing it's a

00:01:48,110 --> 00:01:52,189
giant box it's got a bunch of LEDs on

00:01:50,270 --> 00:01:55,009
the front they blink a little bit and

00:01:52,189 --> 00:01:57,079
that's all you get to see I mean my life

00:01:55,009 --> 00:01:58,700
my life of computer graphics 30 years of

00:01:57,079 --> 00:02:01,219
computer graphics it was really easy to

00:01:58,700 --> 00:02:02,840
do demos and now I think maybe different

00:02:01,219 --> 00:02:09,070
computing and it's like what do you do

00:02:02,840 --> 00:02:11,480
for a demo okay

00:02:09,070 --> 00:02:14,350
so memory computing what is very

00:02:11,480 --> 00:02:20,030
different beauties it's a our food our

00:02:14,350 --> 00:02:21,829
vision of the future of computing and

00:02:20,030 --> 00:02:24,530
why are we doing this stuff right well

00:02:21,829 --> 00:02:27,290
the basic motivation is this gap that

00:02:24,530 --> 00:02:28,820
we've seen and I'm sorry for the

00:02:27,290 --> 00:02:30,590
corporate slides but this really does

00:02:28,820 --> 00:02:32,630
kind of give the introduction of why

00:02:30,590 --> 00:02:33,150
we're doing this why would they get

00:02:32,630 --> 00:02:35,519
support

00:02:33,150 --> 00:02:37,379
and then I'll show you what we're

00:02:35,519 --> 00:02:39,180
actually doing so we're seeing a gap

00:02:37,379 --> 00:02:41,459
between the amount of babies being

00:02:39,180 --> 00:02:43,530
generated and the processing speed of

00:02:41,459 --> 00:02:46,680
computing right this is basic basic gap

00:02:43,530 --> 00:02:47,940
Moore's Law has ended computers aren't

00:02:46,680 --> 00:02:50,129
getting any faster we have seen

00:02:47,940 --> 00:02:52,620
significant improvements and processors

00:02:50,129 --> 00:02:53,190
be for what ten years now it's been

00:02:52,620 --> 00:02:55,799
amazing

00:02:53,190 --> 00:02:57,780
oh and meanwhile all of us seem to be

00:02:55,799 --> 00:03:00,060
uploading cat videos and even never

00:02:57,780 --> 00:03:01,470
faster rate the amount of native they

00:03:00,060 --> 00:03:03,239
were capturing continues to increase

00:03:01,470 --> 00:03:04,470
network bandwidth continued to go up I

00:03:03,239 --> 00:03:06,569
mean we're shipping you know how did

00:03:04,470 --> 00:03:08,609
they give it a network now who would

00:03:06,569 --> 00:03:10,709
have thought I lived through the the

00:03:08,609 --> 00:03:13,489
early user Ethernet we went from three

00:03:10,709 --> 00:03:15,959
megabits 10 megabits in like 12 years

00:03:13,489 --> 00:03:17,750
and now that working is getting faster a

00:03:15,959 --> 00:03:21,180
regular that a fairly good clip

00:03:17,750 --> 00:03:23,549
but our computers are the ability to

00:03:21,180 --> 00:03:25,159
compute is not keeping up and the basic

00:03:23,549 --> 00:03:27,480
problem is one of computer architecture

00:03:25,159 --> 00:03:30,120
right we've had essentially the same

00:03:27,480 --> 00:03:32,489
computer architecture for 60 years you

00:03:30,120 --> 00:03:34,709
have a processor and there's some memory

00:03:32,489 --> 00:03:37,650
and the only only way that you can talk

00:03:34,709 --> 00:03:39,540
to that memory is from a processor you

00:03:37,650 --> 00:03:41,310
have those offline data storage and

00:03:39,540 --> 00:03:43,260
these networks you can communicate in

00:03:41,310 --> 00:03:45,150
other fashions but all your

00:03:43,260 --> 00:03:47,459
communication is very structured and

00:03:45,150 --> 00:03:49,440
very much software riveters no hardware

00:03:47,459 --> 00:03:50,459
assists for them for the communication

00:03:49,440 --> 00:03:52,230
if you want to do if you want to

00:03:50,459 --> 00:03:53,910
communicate with another computer you

00:03:52,230 --> 00:03:58,530
have to put together a little different

00:03:53,910 --> 00:04:00,450
packet and spit out on your face we

00:03:58,530 --> 00:04:02,430
would like to think about large-scale

00:04:00,450 --> 00:04:03,480
systems as being much more tightly

00:04:02,430 --> 00:04:04,620
integrated than that

00:04:03,480 --> 00:04:06,209
all right we're trying to get to the

00:04:04,620 --> 00:04:08,430
point where you can actually put a lot

00:04:06,209 --> 00:04:11,250
of data in one place and have a lot of

00:04:08,430 --> 00:04:13,470
computers a lot of applying arbitrary

00:04:11,250 --> 00:04:15,449
months of computing power to it so what

00:04:13,470 --> 00:04:19,940
we're trying move try to move from us

00:04:15,449 --> 00:04:22,860
noting where the memory is kind of a

00:04:19,940 --> 00:04:24,419
peripheral the processor well the memory

00:04:22,860 --> 00:04:25,800
is we're all in our data is we're trying

00:04:24,419 --> 00:04:27,950
to take the memory out of this

00:04:25,800 --> 00:04:29,930
peripheral notion to put it into this

00:04:27,950 --> 00:04:31,790
the computer so right now we have kind

00:04:29,930 --> 00:04:33,920
of two notions of computer you have

00:04:31,790 --> 00:04:35,900
scale-up computing where you get a

00:04:33,920 --> 00:04:36,830
bigger bigger bigger processor in board

00:04:35,900 --> 00:04:38,450
more and more memory

00:04:36,830 --> 00:04:40,310
well Moore's law kind of says that's

00:04:38,450 --> 00:04:43,430
kind of over we're not able to do all of

00:04:40,310 --> 00:04:46,130
that or you have you have this

00:04:43,430 --> 00:04:50,390
distributive mode you take the notions

00:04:46,130 --> 00:04:52,760
we built and you just make a bigger

00:04:50,390 --> 00:04:54,380
bigger bigger cluster well probably the

00:04:52,760 --> 00:04:56,000
bigger bigger bigger cluster is now on

00:04:54,380 --> 00:04:58,220
the set your data is getting sharded it

00:04:56,000 --> 00:05:02,180
kind of your tiny little fragments so

00:04:58,220 --> 00:05:04,400
every processor problem so you have to

00:05:02,180 --> 00:05:05,660
work very hard at your problem to the

00:05:04,400 --> 00:05:08,060
point where you can actually do useful

00:05:05,660 --> 00:05:10,670
work on you know a thousandth of 1% of

00:05:08,060 --> 00:05:12,260
your data or or less as your as your

00:05:10,670 --> 00:05:13,640
dataset to get larger the only way

00:05:12,260 --> 00:05:16,310
you're able to satisfy that it's like

00:05:13,640 --> 00:05:18,230
breaking into smaller smaller pieces so

00:05:16,310 --> 00:05:20,450
share you everything very difficult from

00:05:18,230 --> 00:05:23,120
a hardware perspective we're trying to

00:05:20,450 --> 00:05:25,010
do that HPD has a couple of products we

00:05:23,120 --> 00:05:27,950
have the Superdome next platform which

00:05:25,010 --> 00:05:31,100
it goes up into 24 terabytes 24

00:05:27,950 --> 00:05:33,770
terabytes and then we have the unit's

00:05:31,100 --> 00:05:36,470
are hard in my world I apologize by if I

00:05:33,770 --> 00:05:39,980
misstated and then we have what we see

00:05:36,470 --> 00:05:42,500
acquired SGI and their NC 990 x hardware

00:05:39,980 --> 00:05:44,840
is quality HP product line and that one

00:05:42,500 --> 00:05:46,760
goes even further than up to you know 60

00:05:44,840 --> 00:05:48,620
or 100 terabytes of memory so we're

00:05:46,760 --> 00:05:49,940
starting to get pretty big scalable

00:05:48,620 --> 00:05:53,060
systems but those are really reaching

00:05:49,940 --> 00:05:54,800
the ends of liability and so shared

00:05:53,060 --> 00:05:56,240
everything is not very viable either and

00:05:54,800 --> 00:05:57,650
so we're trying to do if I can get

00:05:56,240 --> 00:05:59,990
something in the middle something where

00:05:57,650 --> 00:06:02,360
we have something something we have the

00:05:59,990 --> 00:06:03,980
characteristics of scale up computing in

00:06:02,360 --> 00:06:06,050
terms of every processor being able to

00:06:03,980 --> 00:06:07,790
touch all the memory on something in

00:06:06,050 --> 00:06:09,830
this carriage of characteristics of

00:06:07,790 --> 00:06:11,720
scale-out computing where you can add

00:06:09,830 --> 00:06:14,180
arbitrary methods of computation and

00:06:11,720 --> 00:06:15,950
have it be able to integrate into the

00:06:14,180 --> 00:06:17,870
system's smoothly so we're trying to

00:06:15,950 --> 00:06:18,950
kind of find something in the middle

00:06:17,870 --> 00:06:20,720
like new computer

00:06:18,950 --> 00:06:23,330
attention some places between these two

00:06:20,720 --> 00:06:24,980
extremes so that's what every different

00:06:23,330 --> 00:06:26,510
computing is we're putting them in the

00:06:24,980 --> 00:06:29,390
set of the computer and they were being

00:06:26,510 --> 00:06:31,070
able to attach computing to it and so

00:06:29,390 --> 00:06:32,660
we're building we've obviously built

00:06:31,070 --> 00:06:34,790
something called the memory fabric

00:06:32,660 --> 00:06:38,360
testbed you know our machinery research

00:06:34,790 --> 00:06:40,280
program and that's kind of an example of

00:06:38,360 --> 00:06:41,180
that and I'm gonna show you what that

00:06:40,280 --> 00:06:44,150
looks like it/i

00:06:41,180 --> 00:06:45,800
cool pictures you can see this is this

00:06:44,150 --> 00:06:48,380
is actually an for pilots and the

00:06:45,800 --> 00:06:51,350
offices all my co-workers work in you

00:06:48,380 --> 00:06:54,140
can see that the the rack it's a very

00:06:51,350 --> 00:06:56,030
deep rack and the and the hardware that

00:06:54,140 --> 00:06:57,740
we built it it doesn't fit in this very

00:06:56,030 --> 00:07:00,920
deep breath it sticks out the front and

00:06:57,740 --> 00:07:02,660
it sticks out the back so it's kind of

00:07:00,920 --> 00:07:04,160
maximally sized to that with the

00:07:02,660 --> 00:07:07,370
original plan was to actually fill an

00:07:04,160 --> 00:07:10,880
entire rack but we had power and cooling

00:07:07,370 --> 00:07:12,980
issues and we have actually another

00:07:10,880 --> 00:07:15,800
interesting issues very difficult to

00:07:12,980 --> 00:07:17,870
find to take this new computing

00:07:15,800 --> 00:07:20,360
architecture and immediately find

00:07:17,870 --> 00:07:23,410
problems to a to attack it with it right

00:07:20,360 --> 00:07:25,430
so we spent you know 50 or 60 years

00:07:23,410 --> 00:07:26,750
charting our programs into this

00:07:25,430 --> 00:07:28,340
scale-out computing all the

00:07:26,750 --> 00:07:30,410
supercomputers to plan that our scale

00:07:28,340 --> 00:07:32,330
out computers all the problems in the

00:07:30,410 --> 00:07:33,860
world are designed to scale our systems

00:07:32,330 --> 00:07:36,350
so it's actually difficult to find

00:07:33,860 --> 00:07:38,450
problems big problems that need this

00:07:36,350 --> 00:07:39,440
kind of hardware today and that's what

00:07:38,450 --> 00:07:40,970
we're actually spinning this you're

00:07:39,440 --> 00:07:43,910
doing is actually going out and finding

00:07:40,970 --> 00:07:46,730
some new interesting big problems we

00:07:43,910 --> 00:07:49,070
have we but we do have Hardware working

00:07:46,730 --> 00:07:52,100
and it's pretty cool here's one of those

00:07:49,070 --> 00:07:54,890
little notes you can see it has this is

00:07:52,100 --> 00:07:56,450
just one of the there were 40 of these

00:07:54,890 --> 00:08:00,530
that rack and this is just one of those

00:07:56,450 --> 00:08:05,660
has four terabytes of RAM and a mini

00:08:00,530 --> 00:08:08,180
mini mini core arm 64 processor on it we

00:08:05,660 --> 00:08:10,010
put you put 48 center back we designed

00:08:08,180 --> 00:08:12,330
it could scale up to 80 in a single

00:08:10,010 --> 00:08:15,659
accidents so this is

00:08:12,330 --> 00:08:17,189
the systems we built 160 terabytes you

00:08:15,659 --> 00:08:19,110
can obviously scale up beyond that and

00:08:17,189 --> 00:08:21,199
the way that it connects all these racks

00:08:19,110 --> 00:08:24,270
connect us through this interesting new

00:08:21,199 --> 00:08:26,840
memory interconnect we did this memory

00:08:24,270 --> 00:08:30,000
interconnect as a prototype of a new new

00:08:26,840 --> 00:08:32,250
system in turkette called Gen Z this is

00:08:30,000 --> 00:08:35,159
not gen C but it's a lot of the same

00:08:32,250 --> 00:08:37,919
ideas are in the two systems it's

00:08:35,159 --> 00:08:40,200
designed to be a load store fabric which

00:08:37,919 --> 00:08:41,909
means you plug all these 40 nodes

00:08:40,200 --> 00:08:44,459
together and you can execute

00:08:41,909 --> 00:08:47,010
instructions on the processor fetch data

00:08:44,459 --> 00:08:50,220
over that over the fabric so unlike a

00:08:47,010 --> 00:08:52,730
network unlike even you know Araki and

00:08:50,220 --> 00:08:54,990
enhance Ethernet where you have this DMA

00:08:52,730 --> 00:08:56,519
capabilities those still require

00:08:54,990 --> 00:08:58,649
software intervention for every

00:08:56,519 --> 00:08:59,970
transaction over the fabric with this

00:08:58,649 --> 00:09:02,160
architecture you literally just

00:08:59,970 --> 00:09:03,870
executing CPU instructions and it's

00:09:02,160 --> 00:09:06,390
going in to fetch the data over the

00:09:03,870 --> 00:09:08,700
traffic so your latency is very low your

00:09:06,390 --> 00:09:10,890
bandwidth is obviously very high and the

00:09:08,700 --> 00:09:13,170
complexity of the software is very very

00:09:10,890 --> 00:09:15,839
low you don't have to do any complicated

00:09:13,170 --> 00:09:17,699
mediation of buffering data or figuring

00:09:15,839 --> 00:09:19,829
out where the data is gone now you can

00:09:17,699 --> 00:09:21,149
just execute the instructions and take

00:09:19,829 --> 00:09:24,029
advantage of the enormous amount of

00:09:21,149 --> 00:09:25,350
memory this is a this is one of the

00:09:24,029 --> 00:09:27,690
network back lanes you can see there's a

00:09:25,350 --> 00:09:30,209
lot of wires in it this combination of

00:09:27,690 --> 00:09:31,980
copper copper interconnects and optical

00:09:30,209 --> 00:09:33,600
interconnects obviously we're doing a

00:09:31,980 --> 00:09:35,339
lot of work with optics to try to make

00:09:33,600 --> 00:09:37,350
sure that we can we could reach beyond

00:09:35,339 --> 00:09:39,120
the rack scale and go to data center

00:09:37,350 --> 00:09:41,910
scale where the same kind of bandwidth

00:09:39,120 --> 00:09:44,790
and latency you can't get there with

00:09:41,910 --> 00:09:46,589
copper it's too big it's too slow and it

00:09:44,790 --> 00:09:48,630
takes a lot of power and so we've got a

00:09:46,589 --> 00:09:50,630
bunch of work with optics one of the

00:09:48,630 --> 00:09:54,800
chips we made is this two little x1

00:09:50,630 --> 00:09:58,500
optical interconnect it's literally

00:09:54,800 --> 00:10:00,209
silicon that has lasers xpod to ensue we

00:09:58,500 --> 00:10:04,170
using silicon fabrication

00:10:00,209 --> 00:10:07,019
these little little green lasers TED

00:10:04,170 --> 00:10:08,790
talk last year HP internal talk about

00:10:07,019 --> 00:10:11,249
this it was I was just you know blown

00:10:08,790 --> 00:10:13,139
away by what they're able to do in terms

00:10:11,249 --> 00:10:14,699
of improving the performance of getting

00:10:13,139 --> 00:10:19,139
a bandwidth out of the chip so it's a

00:10:14,699 --> 00:10:20,910
it's a multi land multi ring laser on a

00:10:19,139 --> 00:10:22,920
single piece of silicon it all feeds

00:10:20,910 --> 00:10:26,029
into this signal optical fiber coming

00:10:22,920 --> 00:10:29,369
off of it it's just like you can do that

00:10:26,029 --> 00:10:32,999
it's really cool so we take advantage of

00:10:29,369 --> 00:10:34,980
that of course and then we go and then

00:10:32,999 --> 00:10:37,860
we try to find problems one of the

00:10:34,980 --> 00:10:39,990
bubbles that HP has HP has these days is

00:10:37,860 --> 00:10:41,970
we run a big network and we have a lot

00:10:39,990 --> 00:10:43,050
of data coming out of our system and

00:10:41,970 --> 00:10:45,540
then we have a lot of people trying to

00:10:43,050 --> 00:10:48,360
attack that network and trying to do the

00:10:45,540 --> 00:10:50,220
analytics on the patterns of attack that

00:10:48,360 --> 00:10:52,019
are coming in is very difficult because

00:10:50,220 --> 00:10:54,600
you have to be doing in real time

00:10:52,019 --> 00:10:56,189
you can't this is not a bad process you

00:10:54,600 --> 00:10:58,189
really have to be updating your database

00:10:56,189 --> 00:11:00,480
in real time you really have to be doing

00:10:58,189 --> 00:11:01,949
analysis of the data set that's coming

00:11:00,480 --> 00:11:03,059
in and the technique that one of the

00:11:01,949 --> 00:11:04,649
techniques that were using is this

00:11:03,059 --> 00:11:06,959
large-scale graph conference

00:11:04,649 --> 00:11:08,549
people used to sorry social never graphs

00:11:06,959 --> 00:11:10,709
they use it for you know to figure out

00:11:08,549 --> 00:11:11,819
advertising the users are all conjugated

00:11:10,709 --> 00:11:13,740
or what you have is a bunch of

00:11:11,819 --> 00:11:15,360
independent agents that have

00:11:13,740 --> 00:11:17,429
relationships and you want to find out

00:11:15,360 --> 00:11:19,769
how those relationships affect what the

00:11:17,429 --> 00:11:21,809
what the what the operator operators are

00:11:19,769 --> 00:11:24,149
doing and so what you want to do is you

00:11:21,809 --> 00:11:25,709
want to you want to balance balance this

00:11:24,149 --> 00:11:27,480
enormous crowd let's go well this has

00:11:25,709 --> 00:11:29,639
got this way to this come this way and

00:11:27,480 --> 00:11:31,470
there's this enormous computation the

00:11:29,639 --> 00:11:33,540
thing about large-scale graph inference

00:11:31,470 --> 00:11:35,790
is that it's it's you could do local

00:11:33,540 --> 00:11:38,129
computations but every every iteration

00:11:35,790 --> 00:11:40,740
of that local computation changes what

00:11:38,129 --> 00:11:42,360
your locality is which is to say through

00:11:40,740 --> 00:11:44,279
every step of the graph you have to

00:11:42,360 --> 00:11:46,499
completely change the data that you're

00:11:44,279 --> 00:11:48,299
operating on and Anna traditional scale

00:11:46,499 --> 00:11:49,720
out architecture that means you do a

00:11:48,299 --> 00:11:51,850
little step with your look of your

00:11:49,720 --> 00:11:53,529
prince and the new shuffle data data

00:11:51,850 --> 00:11:56,079
across the network and then you another

00:11:53,529 --> 00:11:58,060
step the steps in this problem are very

00:11:56,079 --> 00:12:00,790
small which means you're spending most

00:11:58,060 --> 00:12:02,439
of your time doing communication in a

00:12:00,790 --> 00:12:04,449
traditional scale and architecture with

00:12:02,439 --> 00:12:07,449
memory good computing gives us it's the

00:12:04,449 --> 00:12:09,310
ability to just do those do a step and

00:12:07,449 --> 00:12:11,589
then say Oh any different data well let

00:12:09,310 --> 00:12:13,839
me just go fetch the data the memory

00:12:11,589 --> 00:12:16,529
pool I don't have to do any any any

00:12:13,839 --> 00:12:18,910
distribution and shuffling of the data

00:12:16,529 --> 00:12:24,759
let's see the problem that we're working

00:12:18,910 --> 00:12:27,790
on here we have let's see that's the

00:12:24,759 --> 00:12:29,439
numbers for you three and a half billion

00:12:27,790 --> 00:12:31,990
web pages hundreds of billions of

00:12:29,439 --> 00:12:33,279
computers so that's you know the scale

00:12:31,990 --> 00:12:36,189
of the problem is starting to get

00:12:33,279 --> 00:12:37,629
interesting of the public particular

00:12:36,189 --> 00:12:39,550
problem we were working on here is

00:12:37,629 --> 00:12:43,990
actually a security analytics problem at

00:12:39,550 --> 00:12:45,879
HP analyzing a single hour of data and a

00:12:43,990 --> 00:12:50,410
single hour of data that we have it's

00:12:45,879 --> 00:12:59,019
like I think it's like not tell lies

00:12:50,410 --> 00:13:03,670
about the numbers here and yes I can't

00:12:59,019 --> 00:13:06,670
see my screen so we have we have we have

00:13:03,670 --> 00:13:09,459
a single hour worth of data which is 20

00:13:06,670 --> 00:13:11,559
billion points in a data set and what

00:13:09,459 --> 00:13:13,569
we're trying to problem is this is that

00:13:11,559 --> 00:13:15,790
you're looking at traffic analysis of a

00:13:13,569 --> 00:13:18,699
single hour you're missing any sort of

00:13:15,790 --> 00:13:20,199
long term long term amount of data what

00:13:18,699 --> 00:13:21,550
we really need to be able to do we think

00:13:20,199 --> 00:13:23,769
is to be able to get it out to about a

00:13:21,550 --> 00:13:25,600
weeks where the data and so you take an

00:13:23,769 --> 00:13:28,660
hour alt apply it into a single week

00:13:25,600 --> 00:13:30,790
you're getting significantly more data

00:13:28,660 --> 00:13:33,490
so this is particularly do that I can

00:13:30,790 --> 00:13:35,230
show you here it's just a single hours

00:13:33,490 --> 00:13:37,689
worth of data and you can see how little

00:13:35,230 --> 00:13:39,750
of the memory fabric test set may

00:13:37,689 --> 00:13:47,390
actually need to use may actually go

00:13:39,750 --> 00:13:52,590
here locate that by dragon here

00:13:47,390 --> 00:13:56,070
of course external monitors the delight

00:13:52,590 --> 00:13:58,110
of modern high resolution graphics see

00:13:56,070 --> 00:14:01,190
if I can actually make it not overfill

00:13:58,110 --> 00:14:01,190
the extra water

00:14:12,280 --> 00:14:17,230
here we go okay so this is just going to

00:14:14,500 --> 00:14:18,760
show you our little livery the look

00:14:17,230 --> 00:14:20,620
memory fabric that's in executing this

00:14:18,760 --> 00:14:23,350
problem with an hour's worth of videoed

00:14:20,620 --> 00:14:25,990
rates data so you can see I have 40

00:14:23,350 --> 00:14:27,550
nodes 160 terabytes of memory and you're

00:14:25,990 --> 00:14:29,500
going to see just how much memory is

00:14:27,550 --> 00:14:30,970
required what percentage of the system

00:14:29,500 --> 00:14:33,610
memory is required for this Palo so

00:14:30,970 --> 00:14:36,940
there's 20 million data points there's

00:14:33,610 --> 00:14:38,170
55 million connections and I have an

00:14:36,940 --> 00:14:40,990
enormous amount of memory and you can

00:14:38,170 --> 00:14:42,880
see here the little blue spots those

00:14:40,990 --> 00:14:44,350
indicate the data that we actually using

00:14:42,880 --> 00:14:46,690
with this problem and they're scattered

00:14:44,350 --> 00:14:51,130
across the entire machine and it's going

00:14:46,690 --> 00:14:54,280
to execute this fine fine plan analysis

00:14:51,130 --> 00:14:56,620
problem so the algorithm is obviously

00:14:54,280 --> 00:15:00,160
computing you can see it talking between

00:14:56,620 --> 00:15:01,960
the nodes to find find data across the

00:15:00,160 --> 00:15:03,700
fabric and it's going in collecting data

00:15:01,960 --> 00:15:08,440
for various points that it's it's doing

00:15:03,700 --> 00:15:10,210
a single step here it's not terribly

00:15:08,440 --> 00:15:12,430
like I said what do you do when you have

00:15:10,210 --> 00:15:15,070
that computer the only thing it does is

00:15:12,430 --> 00:15:16,420
it's fetched from memory and store back

00:15:15,070 --> 00:15:17,740
to memory it doesn't do a lot of fun

00:15:16,420 --> 00:15:19,930
stuff so you can see here the problem is

00:15:17,740 --> 00:15:21,940
actually starting to reach out and using

00:15:19,930 --> 00:15:23,980
the the fabric to take advantage of the

00:15:21,940 --> 00:15:26,140
fact that it can fetch data from all the

00:15:23,980 --> 00:15:28,600
way around the system and not have to do

00:15:26,140 --> 00:15:29,860
any any complicated communication and so

00:15:28,600 --> 00:15:32,560
you can see this is actually showing

00:15:29,860 --> 00:15:34,160
each node each computing node going out

00:15:32,560 --> 00:15:36,200
and touching memory from the other

00:15:34,160 --> 00:15:38,030
again for the analysis step with a

00:15:36,200 --> 00:15:39,680
problem you can see how much is the

00:15:38,030 --> 00:15:43,010
memory bandwidth of the system we're

00:15:39,680 --> 00:15:44,420
using right now we using point 61% so

00:15:43,010 --> 00:15:46,010
there's a lot of headroom available here

00:15:44,420 --> 00:15:47,840
and this is an hour's with the data so

00:15:46,010 --> 00:15:49,220
we think we can competently do you know

00:15:47,840 --> 00:15:50,720
weeks where the data in the system

00:15:49,220 --> 00:15:53,690
without too much trouble which is pretty

00:15:50,720 --> 00:15:58,630
cool and so that's kind of one of the

00:15:53,690 --> 00:16:01,010
problems we're looking at right now so

00:15:58,630 --> 00:16:03,080
the bar charts here is showing you the

00:16:01,010 --> 00:16:05,480
convergence the problem show you how the

00:16:03,080 --> 00:16:06,860
actual solution of it and it's getting

00:16:05,480 --> 00:16:09,080
better and better and better we're

00:16:06,860 --> 00:16:11,180
converging you know 32 percent and

00:16:09,080 --> 00:16:13,130
that's to say any new each iteration the

00:16:11,180 --> 00:16:14,780
graph gets weighted and rebalance and

00:16:13,130 --> 00:16:16,520
into another iteration the weights

00:16:14,780 --> 00:16:18,500
updating and slowly converges on the

00:16:16,520 --> 00:16:20,540
solution you can see it's it's nearly

00:16:18,500 --> 00:16:23,270
converge by now and it's not a lot of

00:16:20,540 --> 00:16:26,770
computation and that's the excitement of

00:16:23,270 --> 00:16:31,250
demos on the system this particular

00:16:26,770 --> 00:16:32,780
graphic right here we've since updated

00:16:31,250 --> 00:16:35,390
the underlying system there this summer

00:16:32,780 --> 00:16:37,460
get a couple of interns making that

00:16:35,390 --> 00:16:38,210
software more reliable show you what

00:16:37,460 --> 00:16:39,950
they've been doing

00:16:38,210 --> 00:16:47,270
oh it's almost encourage it's so

00:16:39,950 --> 00:16:49,250
exciting yeah we got to show this demo

00:16:47,270 --> 00:16:53,960
over and over and over again in Las

00:16:49,250 --> 00:16:55,700
Vegas a couple of months ago yeah that's

00:16:53,960 --> 00:17:00,440
that's the excitement of demos on the

00:16:55,700 --> 00:17:02,120
machine so you can see we're getting a

00:17:00,440 --> 00:17:04,339
significant speed up though we ran into

00:17:02,120 --> 00:17:05,890
problem in a scalar architecture the

00:17:04,339 --> 00:17:08,230
scale out architecture

00:17:05,890 --> 00:17:10,060
128 times slower so we really have got

00:17:08,230 --> 00:17:12,190
some pretty impressive you know it

00:17:10,060 --> 00:17:14,800
really is all about getting rid of that

00:17:12,190 --> 00:17:15,790
communication overhead and getting the

00:17:14,800 --> 00:17:18,010
place where you can take your

00:17:15,790 --> 00:17:19,270
computation and apply it on the data

00:17:18,010 --> 00:17:26,650
without moving your data to the

00:17:19,270 --> 00:17:31,600
computation okay not actually to talk

00:17:26,650 --> 00:17:34,030
about this software that we built I have

00:17:31,600 --> 00:17:36,850
another one do I have a Monte Carlo

00:17:34,030 --> 00:17:41,290
simulation here's a money Carlo

00:17:36,850 --> 00:17:42,940
financial simulation so the Monte Carlo

00:17:41,290 --> 00:17:44,500
simulation obviously one of the one of

00:17:42,940 --> 00:17:46,150
the goals there is is to be able to do a

00:17:44,500 --> 00:17:48,160
bunch of random analysis on your data

00:17:46,150 --> 00:17:50,620
well it turns out that if you pre

00:17:48,160 --> 00:17:52,390
compute a bunch of a bunch of the data

00:17:50,620 --> 00:17:55,240
at some of this in this financial model

00:17:52,390 --> 00:17:57,250
and use use interpolation with you your

00:17:55,240 --> 00:17:59,590
pre computed set you can generate

00:17:57,250 --> 00:18:01,420
results a lot faster and in fact if you

00:17:59,590 --> 00:18:03,490
pre compute a lot like a hundred

00:18:01,420 --> 00:18:05,530
terabytes of data it's about ten

00:18:03,490 --> 00:18:07,270
thousand times faster than computing and

00:18:05,530 --> 00:18:08,920
program from scratch every time who

00:18:07,270 --> 00:18:10,960
would have thought of it so the

00:18:08,920 --> 00:18:13,210
availability of an enormous amount of

00:18:10,960 --> 00:18:14,710
memory just an enormous amount of rain

00:18:13,210 --> 00:18:16,930
without it without a huge amount of

00:18:14,710 --> 00:18:18,610
computation it speed up subproblems

00:18:16,930 --> 00:18:19,990
dramatically you kind of look at the

00:18:18,610 --> 00:18:21,640
problem a different way instead of

00:18:19,990 --> 00:18:23,950
thinking well instead of thinking that

00:18:21,640 --> 00:18:26,620
memory is just being you know painting

00:18:23,950 --> 00:18:28,780
memory like you know 10 20 terabytes I

00:18:26,620 --> 00:18:30,190
think that adición actual reasonable

00:18:28,780 --> 00:18:32,230
scale memory of a couple hundred

00:18:30,190 --> 00:18:34,750
terabytes and you can start really

00:18:32,230 --> 00:18:37,180
computing some stuff in advance and and

00:18:34,750 --> 00:18:39,280
change your ability to change if change

00:18:37,180 --> 00:18:41,770
of problem from having to operate in in

00:18:39,280 --> 00:18:43,780
batch mode to be able to operate in real

00:18:41,770 --> 00:18:45,820
time so we did seven financial risk

00:18:43,780 --> 00:18:46,990
modeling and were able to take it from

00:18:45,820 --> 00:18:48,760
something which used to take several

00:18:46,990 --> 00:18:51,130
hours to finished a few seconds who's

00:18:48,760 --> 00:18:52,720
literally 10,000 times faster just by

00:18:51,130 --> 00:18:54,700
having a machine with the door with an

00:18:52,720 --> 00:18:56,500
enormous amount of memory you had to do

00:18:54,700 --> 00:18:58,390
that in a cluster again the problem of

00:18:56,500 --> 00:18:59,980
doing it in cluster is you have to

00:18:58,390 --> 00:19:01,990
distribute the problem to the entire

00:18:59,980 --> 00:19:03,149
cluster and somehow figure out which

00:19:01,990 --> 00:19:04,979
parts that game

00:19:03,149 --> 00:19:06,479
relevant for that particular for that

00:19:04,979 --> 00:19:09,359
particular request that would take a

00:19:06,479 --> 00:19:11,339
bunch of time to transmit that data and

00:19:09,359 --> 00:19:14,249
in that cluster bottle is fast to do

00:19:11,339 --> 00:19:16,169
compute that cache but in a memory

00:19:14,249 --> 00:19:22,859
driven model it's faster to cache the

00:19:16,169 --> 00:19:24,389
computer ok I want to just get beyond

00:19:22,859 --> 00:19:25,619
this stuff and talk about what I

00:19:24,389 --> 00:19:27,629
actually came here to talk about which

00:19:25,619 --> 00:19:29,969
is Linux remember given computing

00:19:27,629 --> 00:19:32,999
Debian is all we use from every rivet

00:19:29,969 --> 00:19:34,799
computing and because what else would

00:19:32,999 --> 00:19:41,039
one uses the universal operating system

00:19:34,799 --> 00:19:45,539
obviously scales to the biggest computer

00:19:41,039 --> 00:19:46,859
because computers to play so all the

00:19:45,539 --> 00:19:49,139
software packing on right now is off

00:19:46,859 --> 00:19:50,820
like github and we're and we're doing

00:19:49,139 --> 00:19:52,019
all the development we're trying to do

00:19:50,820 --> 00:19:54,269
all the development in the open it's

00:19:52,019 --> 00:19:57,690
really hard to take a corporate

00:19:54,269 --> 00:20:00,239
structure and move it from development

00:19:57,690 --> 00:20:02,339
in a little closed silo to say you know

00:20:00,239 --> 00:20:04,830
actually your commits are available if

00:20:02,339 --> 00:20:06,389
have all the time so we're teaching

00:20:04,830 --> 00:20:08,299
people how to do that right now the last

00:20:06,389 --> 00:20:10,979
stuff that what we have is we have some

00:20:08,299 --> 00:20:13,019
Jenkins infrastructure which is tied to

00:20:10,979 --> 00:20:15,179
our github Enterprise instance inside

00:20:13,019 --> 00:20:17,789
the firewall which automatically does

00:20:15,179 --> 00:20:20,099
our CI our continuous integration and

00:20:17,789 --> 00:20:22,109
testing stuff we have got that

00:20:20,099 --> 00:20:23,219
replicated externals the developers like

00:20:22,109 --> 00:20:24,929
I'm not going to push it it's not

00:20:23,219 --> 00:20:26,429
getting tested I'm like oh I really hate

00:20:24,929 --> 00:20:27,960
telling people that they have to move

00:20:26,429 --> 00:20:30,239
external and they don't get testing

00:20:27,960 --> 00:20:31,769
anymore so we're fixing that but that's

00:20:30,239 --> 00:20:33,239
literally the only stumbling block we

00:20:31,769 --> 00:20:34,679
have this point is trying to get to the

00:20:33,239 --> 00:20:38,279
point where we have keke news

00:20:34,679 --> 00:20:40,460
integration and testing outside but most

00:20:38,279 --> 00:20:43,019
of our stuff is being done externally

00:20:40,460 --> 00:20:45,059
this is assistant we've built we have

00:20:43,019 --> 00:20:46,799
hardware we have Linux we have a bunch

00:20:45,059 --> 00:20:51,259
of libraries and I'm going to talk about

00:20:46,799 --> 00:20:53,820
some of those so we we came to dead hot

00:20:51,259 --> 00:20:55,559
three years ago in Portland four years

00:20:53,820 --> 00:20:55,950
ago three years ago I think it was three

00:20:55,559 --> 00:20:58,200
years ago

00:20:55,950 --> 00:20:59,200
I just talk about each Linux what we

00:20:58,200 --> 00:21:02,710
were doing

00:20:59,200 --> 00:21:05,770
Linux in HPE H Linux was something we're

00:21:02,710 --> 00:21:07,240
building for our Helion system Helion

00:21:05,770 --> 00:21:10,630
was a kind of an openstack

00:21:07,240 --> 00:21:12,340
deployment vehicle and we were using we

00:21:10,630 --> 00:21:14,950
were taking Debian and customizing it

00:21:12,340 --> 00:21:16,420
for that we took a bunch of work to make

00:21:14,950 --> 00:21:18,820
Debian suitable for that not because

00:21:16,420 --> 00:21:21,880
Debian wasn't ready but because he

00:21:18,820 --> 00:21:24,040
OpenStack has specific dependencies on a

00:21:21,880 --> 00:21:26,650
lot of the packages so we actually take

00:21:24,040 --> 00:21:30,070
Debian and like you know taking random

00:21:26,650 --> 00:21:32,410
versions of various - packages room you

00:21:30,070 --> 00:21:34,450
know anything from really sale to really

00:21:32,410 --> 00:21:36,730
brand-new to try to construct a

00:21:34,450 --> 00:21:38,500
horizontal static and support OpenStack

00:21:36,730 --> 00:21:40,600
above it and that's what each lineage

00:21:38,500 --> 00:21:42,430
was all about how do we take a Debian

00:21:40,600 --> 00:21:44,440
system and make it be able to be very

00:21:42,430 --> 00:21:47,080
purpose-built for supporting a specific

00:21:44,440 --> 00:21:48,850
OpenStack deployment and we did that

00:21:47,080 --> 00:21:51,880
Killian OpenStack Helion OpenStack

00:21:48,850 --> 00:21:54,580
basically got sold for not my employer

00:21:51,880 --> 00:21:56,620
off to micro focus in souza and it's all

00:21:54,580 --> 00:21:59,010
very complicated right now but so H

00:21:56,620 --> 00:22:01,150
Linux no longer really has a role in

00:21:59,010 --> 00:22:03,370
organization in terms of supporting the

00:22:01,150 --> 00:22:04,900
Hylian system and so what we're doing

00:22:03,370 --> 00:22:07,330
what we're doing right now is are

00:22:04,900 --> 00:22:09,370
transitioning that from this H Linux

00:22:07,330 --> 00:22:11,980
base which is how we started the Linux

00:22:09,370 --> 00:22:13,480
for the machine because the Cadi Debian

00:22:11,980 --> 00:22:15,220
system that we needed to support it

00:22:13,480 --> 00:22:16,900
other architectures so we kind of built

00:22:15,220 --> 00:22:18,640
on top of each Linux and we're

00:22:16,900 --> 00:22:21,190
transitioning from that purpose-built

00:22:18,640 --> 00:22:23,380
horizontal Debian distribution to just

00:22:21,190 --> 00:22:25,870
running Debian and taking a small pile

00:22:23,380 --> 00:22:28,630
of packages and adding a minute so we

00:22:25,870 --> 00:22:31,240
have a debian unstable system and then

00:22:28,630 --> 00:22:32,650
we just have probably 15 or 20 packages

00:22:31,240 --> 00:22:34,690
that we've built including some new

00:22:32,650 --> 00:22:36,970
kernel modules new device drivers is

00:22:34,690 --> 00:22:39,370
that kind of stuff so it really is just

00:22:36,970 --> 00:22:40,870
Debbie and running in most of our

00:22:39,370 --> 00:22:43,320
environments we're not running this on

00:22:40,870 --> 00:22:45,780
the MFP yet because we need men colonel

00:22:43,320 --> 00:22:47,490
a bunch of newer stuff that it's not

00:22:45,780 --> 00:22:49,800
quite a heavy even double unit stable

00:22:47,490 --> 00:22:51,810
yet but we're getting closer and closer

00:22:49,800 --> 00:22:53,460
so we're taking this transition from an

00:22:51,810 --> 00:22:55,530
hour very purpose-built horizontal aged

00:22:53,460 --> 00:22:57,030
Linux distribution to just crunching it

00:22:55,530 --> 00:22:58,860
down and saying okay we're just running

00:22:57,030 --> 00:23:00,390
Debian and then we're just gonna add a

00:22:58,860 --> 00:23:04,200
few packages I want to talk about the

00:23:00,390 --> 00:23:06,000
packages we're petting so we have two

00:23:04,200 --> 00:23:07,350
systems that we need to run Debian on we

00:23:06,000 --> 00:23:09,450
have our external management circuit

00:23:07,350 --> 00:23:12,590
system which runs management services

00:23:09,450 --> 00:23:14,970
and our file system metadata management

00:23:12,590 --> 00:23:16,920
and this is where all the kind of

00:23:14,970 --> 00:23:17,730
interesting packaging stuff and a lot of

00:23:16,920 --> 00:23:19,650
the stuff that I'm going to be talking

00:23:17,730 --> 00:23:21,390
about in a few minutes is about and then

00:23:19,650 --> 00:23:23,610
on each of the nodes each of those 40

00:23:21,390 --> 00:23:25,200
things they're green lights they run

00:23:23,610 --> 00:23:28,410
another nevian system it's running

00:23:25,200 --> 00:23:31,290
entirely in memory so this is not it's

00:23:28,410 --> 00:23:34,830
this kind of like an NFS root

00:23:31,290 --> 00:23:37,050
environment but kind of not because we

00:23:34,830 --> 00:23:39,270
don't have we are actually just we're

00:23:37,050 --> 00:23:42,060
building in an in madness and that's

00:23:39,270 --> 00:23:44,730
what's your honor the nodes are entirely

00:23:42,060 --> 00:23:46,650
stateless that way from the perspective

00:23:44,730 --> 00:23:48,510
of the individual node of course they

00:23:46,650 --> 00:23:50,370
have access to this fabric attached

00:23:48,510 --> 00:23:52,830
memory this enormous pool of memory

00:23:50,370 --> 00:23:54,330
which is persistent and persists beyond

00:23:52,830 --> 00:23:56,670
the life of the snow so it's kind of a

00:23:54,330 --> 00:23:59,610
weird little world they delivers we have

00:23:56,670 --> 00:24:01,980
to we have any very ephemeral entire

00:23:59,610 --> 00:24:03,120
operating system instances so in a lot

00:24:01,980 --> 00:24:05,400
of ways it kind of looks like a

00:24:03,120 --> 00:24:07,290
container is sort of thing we've kind of

00:24:05,400 --> 00:24:08,970
spring this node into existence or

00:24:07,290 --> 00:24:11,160
what's an operating system pool and then

00:24:08,970 --> 00:24:12,750
it gets shut down but the data that it's

00:24:11,160 --> 00:24:15,840
computed is stored in memory in this

00:24:12,750 --> 00:24:17,670
persistent memory and so we needed to

00:24:15,840 --> 00:24:19,950
build a way of getting things up and

00:24:17,670 --> 00:24:21,840
running and I think I'm hopeful that the

00:24:19,950 --> 00:24:23,700
the piece of technology will kind of

00:24:21,840 --> 00:24:25,200
inspired so many things wait a minute

00:24:23,700 --> 00:24:26,760
that's a neat hat I wonder if I could

00:24:25,200 --> 00:24:28,680
use that for what I need to do over here

00:24:26,760 --> 00:24:29,940
so I wanted to talk about that we have

00:24:28,680 --> 00:24:31,530
three hardware targets that we're

00:24:29,940 --> 00:24:34,050
targeting for this system we obviously

00:24:31,530 --> 00:24:36,630
have a memory fabric test in that giant

00:24:34,050 --> 00:24:38,400
piece of hardware they show you I'll be

00:24:36,630 --> 00:24:38,870
come in an emulated environment that I

00:24:38,400 --> 00:24:41,570
can run

00:24:38,870 --> 00:24:43,850
I can actually build a machine on my

00:24:41,570 --> 00:24:46,250
laptop obviously it does have a hundreds

00:24:43,850 --> 00:24:48,290
of terabytes every but it does have all

00:24:46,250 --> 00:24:50,600
the same architectural characteristics I

00:24:48,290 --> 00:24:53,270
did a whole bunch of testing for a

00:24:50,600 --> 00:24:55,670
program that we'll be showcasing later

00:24:53,270 --> 00:24:57,500
this fall with the German German

00:24:55,670 --> 00:24:59,060
Research Institute I did a whole bunch

00:24:57,500 --> 00:25:00,590
of prototyping of that you know my

00:24:59,060 --> 00:25:02,900
laptop it's like okay that's kind of

00:25:00,590 --> 00:25:04,340
cool I can do memory develop remember

00:25:02,900 --> 00:25:06,170
you know driven computing development

00:25:04,340 --> 00:25:08,180
you know on the airplane it's always

00:25:06,170 --> 00:25:11,440
nice when another piece of art that we

00:25:08,180 --> 00:25:16,670
have is this MC 9 19 X which is this

00:25:11,440 --> 00:25:20,840
just this scale-up ish computer from the

00:25:16,670 --> 00:25:23,090
SGI division and it's it is normally

00:25:20,840 --> 00:25:25,460
that Dillard is a pure scaling system up

00:25:23,090 --> 00:25:27,410
to 128 processes up to a bazillion bytes

00:25:25,460 --> 00:25:29,330
of memory I really don't know how much

00:25:27,410 --> 00:25:30,500
of everything can hold but in here it's

00:25:29,330 --> 00:25:32,660
out then you can actually take the

00:25:30,500 --> 00:25:34,340
second partition it and break it up into

00:25:32,660 --> 00:25:36,800
individual little little virtual

00:25:34,340 --> 00:25:38,240
computers with a collection of

00:25:36,800 --> 00:25:39,470
processors and a networking interface

00:25:38,240 --> 00:25:41,000
and a bit of their own little local

00:25:39,470 --> 00:25:44,930
memory and then they can communicate

00:25:41,000 --> 00:25:47,300
over this openness over the fabric that

00:25:44,930 --> 00:25:49,280
that is in the hardware with other nodes

00:25:47,300 --> 00:25:50,960
in the same box so we can build

00:25:49,280 --> 00:25:52,580
something it looks very much like memory

00:25:50,960 --> 00:25:54,710
vivid computing with the hardware that

00:25:52,580 --> 00:25:55,940
we're shipping today and that means we

00:25:54,710 --> 00:25:57,680
can actually do a bunch of memory

00:25:55,940 --> 00:25:59,120
different computing research with

00:25:57,680 --> 00:26:01,070
hardware that we have available today

00:25:59,120 --> 00:26:02,630
Noura marker coming out is going to

00:26:01,070 --> 00:26:04,190
enable it we'll stay on it up a little

00:26:02,630 --> 00:26:06,500
bit bigger I might have some other

00:26:04,190 --> 00:26:07,290
characteristics interesting but it lets

00:26:06,500 --> 00:26:10,130
us kind of

00:26:07,290 --> 00:26:12,540
do research in the software and systems

00:26:10,130 --> 00:26:14,940
development we need with hardware that

00:26:12,540 --> 00:26:17,010
we're shipping today as well as this

00:26:14,940 --> 00:26:18,570
prototype part of it we have obviously

00:26:17,010 --> 00:26:20,670
with the prototype hardware the big

00:26:18,570 --> 00:26:23,490
problem is availability there's like you

00:26:20,670 --> 00:26:25,170
know four of them whereas with this NC

00:26:23,490 --> 00:26:28,320
nine ninety you know can make as many to

00:26:25,170 --> 00:26:31,290
one because it's a shipping product so

00:26:28,320 --> 00:26:32,730
that's the three targets we have so one

00:26:31,290 --> 00:26:34,290
of the other things we lost on all of

00:26:32,730 --> 00:26:36,900
our software resources went off the

00:26:34,290 --> 00:26:38,910
micro focus was we lost our kind of our

00:26:36,900 --> 00:26:41,040
car system integration and development

00:26:38,910 --> 00:26:42,990
team we no longer have anybody working

00:26:41,040 --> 00:26:45,480
with us that it maintains our build

00:26:42,990 --> 00:26:47,100
system we don't have anybody working for

00:26:45,480 --> 00:26:50,280
us that means our build Hardware in

00:26:47,100 --> 00:26:51,600
particular so what we're trying to do is

00:26:50,280 --> 00:26:54,060
we're trying to build kind of a virtual

00:26:51,600 --> 00:26:55,710
build environment using containers we

00:26:54,060 --> 00:26:58,470
actually had some interns over the

00:26:55,710 --> 00:27:01,050
summer build us a container that you

00:26:58,470 --> 00:27:04,820
drop it on a random machine running a

00:27:01,050 --> 00:27:04,820
random operating system that supports

00:27:05,330 --> 00:27:10,410
you just drop it into a random random

00:27:08,400 --> 00:27:13,080
machine and it springs up a debian

00:27:10,410 --> 00:27:14,700
container and you you say go and it goes

00:27:13,080 --> 00:27:16,950
into fetches all the software that we

00:27:14,700 --> 00:27:19,590
need for the system downloads we'll get

00:27:16,950 --> 00:27:21,570
compiled it and admits debts so it's

00:27:19,590 --> 00:27:23,150
kind of a build in a box it's just you

00:27:21,570 --> 00:27:25,440
dump it under a machine if we should go

00:27:23,150 --> 00:27:26,850
that was set by a couple of interns a

00:27:25,440 --> 00:27:29,040
summer that's been really useful because

00:27:26,850 --> 00:27:30,840
it means that we can just go out and

00:27:29,040 --> 00:27:32,190
find a random piece of hardware

00:27:30,840 --> 00:27:34,170
somewhere that happens to be working

00:27:32,190 --> 00:27:35,880
today and get our software built we

00:27:34,170 --> 00:27:37,680
don't have to depend upon having the

00:27:35,880 --> 00:27:39,690
magic build server that's off in the

00:27:37,680 --> 00:27:41,250
corner it's you know gold-plated it

00:27:39,690 --> 00:27:43,860
never touched by anybody and that's been

00:27:41,250 --> 00:27:45,300
very personal to us and then we also

00:27:43,860 --> 00:27:46,680
have another little container that we

00:27:45,300 --> 00:27:49,310
run and can actually stand up and

00:27:46,680 --> 00:27:50,630
deliver a debian Debian packages that

00:27:49,310 --> 00:27:52,670
that's a container who's got a bunch of

00:27:50,630 --> 00:27:55,730
athlete attacks in it and you just

00:27:52,670 --> 00:27:59,360
handed a pilot dibs to say go and it you

00:27:55,730 --> 00:28:01,520
know serves Debian constructs a repo and

00:27:59,360 --> 00:28:09,950
serves W bits out of that which is kind

00:28:01,520 --> 00:28:11,810
of cool get a question okay and then we

00:28:09,950 --> 00:28:14,030
have this we have external management

00:28:11,810 --> 00:28:15,710
services that actually kind of brought

00:28:14,030 --> 00:28:17,300
on this external server and we actually

00:28:15,710 --> 00:28:20,150
have another container that runs all of

00:28:17,300 --> 00:28:21,770
these but we have the library which is

00:28:20,150 --> 00:28:24,560
our metadata service they'll talk about

00:28:21,770 --> 00:28:26,120
our filesystem metadata service we have

00:28:24,560 --> 00:28:27,800
this as manifesting thing and that's the

00:28:26,120 --> 00:28:30,110
services we've built that actually

00:28:27,800 --> 00:28:32,060
construct season it ran this it takes

00:28:30,110 --> 00:28:33,680
packages and builds and customizes and

00:28:32,060 --> 00:28:34,850
reach node and that is kind of the

00:28:33,680 --> 00:28:37,400
software that I want to spend a bunch of

00:28:34,850 --> 00:28:39,410
time talking about in a few minutes and

00:28:37,400 --> 00:28:40,610
then we have that pretty dashboard which

00:28:39,410 --> 00:28:42,260
shows all this stuff and then we have

00:28:40,610 --> 00:28:48,530
the usual selection of random network

00:28:42,260 --> 00:28:50,750
services so this is where all the bits

00:28:48,530 --> 00:28:54,620
live there down at github of all the

00:28:50,750 --> 00:28:56,210
packages are there some of the think

00:28:54,620 --> 00:28:59,420
there's probably two or three packages

00:28:56,210 --> 00:29:02,000
if aren't currently currently being kind

00:28:59,420 --> 00:29:03,320
of develop externally we're rearing and

00:29:02,000 --> 00:29:05,060
externally currently we're not actually

00:29:03,320 --> 00:29:06,590
actively developing them out there and

00:29:05,060 --> 00:29:07,700
we're trying with the sites that we're

00:29:06,590 --> 00:29:08,840
trying to get to the point where it can

00:29:07,700 --> 00:29:10,760
do that because obviously then other

00:29:08,840 --> 00:29:12,390
people can contribute and until we do

00:29:10,760 --> 00:29:15,840
that makes more difficult

00:29:12,390 --> 00:29:18,210
people to contribute and that's our

00:29:15,840 --> 00:29:19,380
current plan so this is the this is all

00:29:18,210 --> 00:29:20,780
the stuff that we're shipping and I'm

00:29:19,380 --> 00:29:22,620
going to go through a bunch of these

00:29:20,780 --> 00:29:23,700
tell you what they are the ones the

00:29:22,620 --> 00:29:25,140
stars here are the ones that are

00:29:23,700 --> 00:29:27,030
actually that's where the project is

00:29:25,140 --> 00:29:29,280
there's no it there's no clothes and

00:29:27,030 --> 00:29:32,760
elsewhere and we're working on making

00:29:29,280 --> 00:29:34,110
that happen for all of them so this is

00:29:32,760 --> 00:29:37,170
the little container I talked about the

00:29:34,110 --> 00:29:39,180
build to cater so it's just a docker

00:29:37,170 --> 00:29:41,790
container of the building for building

00:29:39,180 --> 00:29:43,890
our all of our packages just got a

00:29:41,790 --> 00:29:48,480
script that runs through and you know

00:29:43,890 --> 00:29:50,310
get clothes and then de builds them all

00:29:48,480 --> 00:29:52,050
the packages that get admitted or

00:29:50,310 --> 00:29:53,970
unsigned of course because there's no

00:29:52,050 --> 00:29:56,160
signing authority here so the thought is

00:29:53,970 --> 00:29:57,270
useful for testing well we need to

00:29:56,160 --> 00:29:58,680
figure out how to make it useful for

00:29:57,270 --> 00:30:01,020
actual employment how we can actually

00:29:58,680 --> 00:30:03,150
get the packages sign and how to

00:30:01,020 --> 00:30:05,700
actually make you know make it part of

00:30:03,150 --> 00:30:08,340
the the continuous integration system as

00:30:05,700 --> 00:30:10,200
well so this is this is what we're going

00:30:08,340 --> 00:30:11,910
to be replacing our currently creaky

00:30:10,200 --> 00:30:14,940
internal Jenkins instance which runs on

00:30:11,910 --> 00:30:19,470
a box it has no assisted in 84 right now

00:30:14,940 --> 00:30:20,760
god I hope it doesn't crash so this

00:30:19,470 --> 00:30:22,320
build of all the packages that are

00:30:20,760 --> 00:30:24,540
necessary to kind of stand up a little

00:30:22,320 --> 00:30:25,770
one of our little instances I doesn't it

00:30:24,540 --> 00:30:28,620
doesn't build with a bunch of random

00:30:25,770 --> 00:30:30,470
stuff that we don't need for testing and

00:30:28,620 --> 00:30:34,020
it was done by an intern this summer

00:30:30,470 --> 00:30:35,580
austin worked on this it is really cool

00:30:34,020 --> 00:30:38,550
to work at a corporation it has a very

00:30:35,580 --> 00:30:40,590
strong history and policy of bringing in

00:30:38,550 --> 00:30:42,510
high school or college interns i think

00:30:40,590 --> 00:30:44,700
we had a tour canada yeah we have a

00:30:42,510 --> 00:30:47,100
group of 18 engineers now and we had

00:30:44,700 --> 00:30:48,990
like 8 or 10 interns working with us it

00:30:47,100 --> 00:30:50,910
was really cool all of a sudden doubled

00:30:48,990 --> 00:30:52,710
in size from the summer with a bunch of

00:30:50,910 --> 00:30:56,010
high school and college students which

00:30:52,710 --> 00:31:01,710
was great to see here's the repo

00:30:56,010 --> 00:31:03,300
container that david did either called

00:31:01,710 --> 00:31:06,370
dead sir or just the name you started

00:31:03,300 --> 00:31:08,110
with and then some marketing guy

00:31:06,370 --> 00:31:09,970
and said we have to put our corporate

00:31:08,110 --> 00:31:12,520
branding on that and call to the ill for

00:31:09,970 --> 00:31:16,390
fame repo container with this this is

00:31:12,520 --> 00:31:18,160
not specific to ELQ or fame or our

00:31:16,390 --> 00:31:20,140
remember to give you stuff at all it's

00:31:18,160 --> 00:31:22,630
literally just a container that you

00:31:20,140 --> 00:31:24,550
throw pile of Deb's app and it stands up

00:31:22,630 --> 00:31:26,530
ass about Debbie about the W package

00:31:24,550 --> 00:31:28,809
repository for it it automatically

00:31:26,530 --> 00:31:30,340
generates indices automatic starts up an

00:31:28,809 --> 00:31:33,130
Apache instance it will serve it about

00:31:30,340 --> 00:31:34,990
so it's kind of convenient if you just

00:31:33,130 --> 00:31:36,280
want to build a bunch of devs and don't

00:31:34,990 --> 00:31:38,290
want to have to have to go through the

00:31:36,280 --> 00:31:42,190
problem I knew somethin I use a mini

00:31:38,290 --> 00:31:43,600
deep what it says Mini Mini something I

00:31:42,190 --> 00:31:46,179
don't even read what it's called anymore

00:31:43,600 --> 00:31:47,380
just to do that on my local laptop and

00:31:46,179 --> 00:31:48,910
this looks like it's probably even

00:31:47,380 --> 00:31:50,980
easier than that because it's all

00:31:48,910 --> 00:31:53,530
automated and you all you have to do is

00:31:50,980 --> 00:31:56,170
build the deficit hand them to it very

00:31:53,530 --> 00:31:59,230
convenient when you update devs on a

00:31:56,170 --> 00:32:01,390
tracks changes oh look at dem change so

00:31:59,230 --> 00:32:03,700
they go rebuild the index so Canada

00:32:01,390 --> 00:32:06,250
mini-cons I think it's called that's the

00:32:03,700 --> 00:32:08,559
thing I was using this use is a play of

00:32:06,250 --> 00:32:11,500
course to generate all this data it's

00:32:08,559 --> 00:32:14,110
all nicely automated in package and the

00:32:11,500 --> 00:32:16,240
other another container that the couple

00:32:14,110 --> 00:32:18,820
of ignorants did my medicine worked on

00:32:16,240 --> 00:32:20,290
was this our men all of our management

00:32:18,820 --> 00:32:22,990
services are down to containers to be

00:32:20,290 --> 00:32:24,610
just kind of you know they can pull down

00:32:22,990 --> 00:32:26,380
the dead automatically build up a little

00:32:24,610 --> 00:32:27,640
container and just say go and I couple

00:32:26,380 --> 00:32:30,130
that with all the management services

00:32:27,640 --> 00:32:32,080
this means that we can kind of stand up

00:32:30,130 --> 00:32:33,130
test instances or infrastructure really

00:32:32,080 --> 00:32:36,190
quickly without having anything

00:32:33,130 --> 00:32:37,450
customized on your own box so if you

00:32:36,190 --> 00:32:39,490
want to do memory different computing

00:32:37,450 --> 00:32:40,120
development you can get this Tauranga

00:32:39,490 --> 00:32:42,010
box

00:32:40,120 --> 00:32:45,010
stick that container to machine

00:32:42,010 --> 00:32:47,280
instantiate a couple of VMs that run the

00:32:45,010 --> 00:32:47,280
nodes

00:32:48,500 --> 00:32:52,220
your laptop in a matter of minutes

00:32:50,480 --> 00:32:54,320
without touching your based operating

00:32:52,220 --> 00:32:56,090
system at all so for people who want to

00:32:54,320 --> 00:32:58,610
just come and you know toy with a little

00:32:56,090 --> 00:33:00,560
bit when it's like working at making it

00:32:58,610 --> 00:33:02,900
very convenient I know the thinking work

00:33:00,560 --> 00:33:06,500
upon bye bye Lilly and Annie this summer

00:33:02,900 --> 00:33:08,540
was our PM dashboard and that - what is

00:33:06,500 --> 00:33:11,570
that it's that pretty UI you saw before

00:33:08,540 --> 00:33:13,970
trying to generate actionable

00:33:11,570 --> 00:33:16,250
intelligence about the state of the

00:33:13,970 --> 00:33:18,500
memory dividend fabric it's really hard

00:33:16,250 --> 00:33:19,610
and trying to capture what's going on

00:33:18,500 --> 00:33:20,780
and figure out where the bandwidth

00:33:19,610 --> 00:33:22,220
problems are where the performance

00:33:20,780 --> 00:33:24,110
issues are where your application

00:33:22,220 --> 00:33:26,630
bottlenecks are and so we're trying to

00:33:24,110 --> 00:33:28,790
build some infrastructure and so this is

00:33:26,630 --> 00:33:30,950
this is little webs it's all web-based

00:33:28,790 --> 00:33:32,480
little Web Services goes it touches all

00:33:30,950 --> 00:33:34,430
of the nodes of all the infrastructure

00:33:32,480 --> 00:33:36,200
and says what's going on with you so we

00:33:34,430 --> 00:33:38,720
have a bunch of monitoring and logging

00:33:36,200 --> 00:33:41,180
hooks there and it captures all that

00:33:38,720 --> 00:33:43,040
data presents it in a pretty little web

00:33:41,180 --> 00:33:46,310
UI that looks like this you saw that

00:33:43,040 --> 00:33:48,350
before so you can see we're trying to

00:33:46,310 --> 00:33:53,120
generate data that show the user what's

00:33:48,350 --> 00:33:55,160
going on in real time and how it's done

00:33:53,120 --> 00:33:56,960
by a couple of inferences sorry the new

00:33:55,160 --> 00:34:00,140
version of that the old version from the

00:33:56,960 --> 00:34:02,240
demo was done by a teaming in Bristol

00:34:00,140 --> 00:34:04,780
who are now looking now doing something

00:34:02,240 --> 00:34:08,179
else so it's nice to have that kind of

00:34:04,780 --> 00:34:10,639
very customized assistant brought in

00:34:08,179 --> 00:34:12,500
house the library monitoring protocol

00:34:10,639 --> 00:34:15,620
that's what this my management tool uses

00:34:12,500 --> 00:34:18,639
it goes out and touches all all the

00:34:15,620 --> 00:34:18,639
nodes and brings of data

00:34:18,829 --> 00:34:23,989
chair set out to that to that dashboard

00:34:20,929 --> 00:34:27,109
so the emulation shell script this is

00:34:23,989 --> 00:34:28,879
kind of the first stuff we released it's

00:34:27,109 --> 00:34:30,829
literally just a shell script that takes

00:34:28,879 --> 00:34:33,979
the Debian packages that we deliver and

00:34:30,829 --> 00:34:37,129
constructs a synthetic set of memory

00:34:33,979 --> 00:34:41,059
vivid computing nodes by using this this

00:34:37,129 --> 00:34:43,429
Q mu k VN hat called the inter VM shared

00:34:41,059 --> 00:34:45,469
memory system right so you you generate

00:34:43,429 --> 00:34:50,450
you take a pile of memory on your host

00:34:45,469 --> 00:34:52,759
machine on the host machine and you then

00:34:50,450 --> 00:34:55,159
make that visible as a device you know

00:34:52,759 --> 00:34:56,539
all of the pins and now all the VMS can

00:34:55,159 --> 00:34:59,239
touch this memory but that looks a lot

00:34:56,539 --> 00:35:00,589
like memory do it computing to me and it

00:34:59,239 --> 00:35:02,479
looks like a lot like fabric attached

00:35:00,589 --> 00:35:04,700
memory so that's the environment that we

00:35:02,479 --> 00:35:09,380
use to do all of our development for all

00:35:04,700 --> 00:35:11,660
of these tools so that the initial

00:35:09,380 --> 00:35:13,219
project we put together is so simple

00:35:11,660 --> 00:35:14,930
shell scripts that generate these nodes

00:35:13,219 --> 00:35:16,430
and we're working on improving at

00:35:14,930 --> 00:35:19,489
automated point where you can actually

00:35:16,430 --> 00:35:24,319
stand up a memory vivid computing test

00:35:19,489 --> 00:35:26,209
infrastructure on a single machine so

00:35:24,319 --> 00:35:29,509
the librarian is kind of the heart of

00:35:26,209 --> 00:35:30,799
our the way that we take this fabric

00:35:29,509 --> 00:35:33,890
attached memory and presented

00:35:30,799 --> 00:35:35,479
applications normally applications think

00:35:33,890 --> 00:35:37,670
about remembering you think about malloc

00:35:35,479 --> 00:35:40,130
or maybe in that as a way of getting

00:35:37,670 --> 00:35:42,709
into memory well and that takes files

00:35:40,130 --> 00:35:44,239
and when I started when we started this

00:35:42,709 --> 00:35:45,680
project a couple years ago the

00:35:44,239 --> 00:35:47,719
researchers came and said well what we

00:35:45,680 --> 00:35:50,329
really want is every that persists

00:35:47,719 --> 00:35:52,969
across the file system reboots and

00:35:50,329 --> 00:35:55,910
chunks of memory that every size would

00:35:52,969 --> 00:35:57,769
have names and have access rights so we

00:35:55,910 --> 00:36:00,109
know this really complicated new system

00:35:57,769 --> 00:36:03,229
called the called the code what do they

00:36:00,109 --> 00:36:05,539
call the wholesale memory broker and it

00:36:03,229 --> 00:36:08,539
had this eight API that we call you pass

00:36:05,539 --> 00:36:11,239
it a name this little master the access

00:36:08,539 --> 00:36:14,479
rights and then we map that army to your

00:36:11,239 --> 00:36:16,330
process and I looked at that you know

00:36:14,479 --> 00:36:18,100
that looks like like a lot of

00:36:16,330 --> 00:36:21,060
that looks a lot like something that we

00:36:18,100 --> 00:36:24,460
have in the posix system called the five

00:36:21,060 --> 00:36:28,570
like no no no it's not it's different

00:36:24,460 --> 00:36:30,430
and I'm like yes storage it has an

00:36:28,570 --> 00:36:33,460
extent that it hasn't they even has

00:36:30,430 --> 00:36:35,530
access rights it looks like a file to be

00:36:33,460 --> 00:36:37,570
so we created a file system and the file

00:36:35,530 --> 00:36:40,090
system is entirely in memory but it's in

00:36:37,570 --> 00:36:42,910
persistent memory and it's distributed

00:36:40,090 --> 00:36:45,510
across all these zones and that's what

00:36:42,910 --> 00:36:49,900
the librarian does librarian manages we

00:36:45,510 --> 00:36:51,850
grouped the chunks memory into a group

00:36:49,900 --> 00:36:54,430
of pages what several pages it's called

00:36:51,850 --> 00:36:56,410
a book our books are exercised there you

00:36:54,430 --> 00:36:59,020
know the smallest allocatable unit of

00:36:56,410 --> 00:37:02,980
memory in the MFP which is only 8

00:36:59,020 --> 00:37:04,600
gigabytes and then you can collect a

00:37:02,980 --> 00:37:07,180
bunch of those so you have a substantial

00:37:04,600 --> 00:37:09,430
better memory into into something called

00:37:07,180 --> 00:37:11,650
a shelf and a shelf is the same thing as

00:37:09,430 --> 00:37:13,420
a spot so when you talk about shelves

00:37:11,650 --> 00:37:15,520
files sometimes you'll see is talking

00:37:13,420 --> 00:37:17,410
about that a shelf is justifiable but a

00:37:15,520 --> 00:37:20,890
shelf is a specific kind of file it's a

00:37:17,410 --> 00:37:22,930
file in fabric attached to memory so the

00:37:20,890 --> 00:37:25,210
file system is visible across all the

00:37:22,930 --> 00:37:27,520
nodes so now we have a distributed file

00:37:25,210 --> 00:37:29,590
system well what's the easiest way to

00:37:27,520 --> 00:37:31,240
write the distributed file system well

00:37:29,590 --> 00:37:33,190
the easiest way to do that is to have a

00:37:31,240 --> 00:37:35,770
single central server that serves out

00:37:33,190 --> 00:37:37,300
all the data file system so that's how

00:37:35,770 --> 00:37:39,310
we built our first instance which is

00:37:37,300 --> 00:37:41,080
what the library is the cool thing about

00:37:39,310 --> 00:37:42,430
the librarian is library it doesn't

00:37:41,080 --> 00:37:44,740
actually care about the data because the

00:37:42,430 --> 00:37:46,570
data itself that's all just a memory map

00:37:44,740 --> 00:37:48,520
right so the library doesn't actually

00:37:46,570 --> 00:37:50,680
have to serve the data it only has to

00:37:48,520 --> 00:37:53,380
serve the metadata so it has to be able

00:37:50,680 --> 00:37:56,680
to allocations cause you're sure you can

00:37:53,380 --> 00:37:58,810
have book 27 I can't see book 27 but you

00:37:56,680 --> 00:38:00,580
can you can play with it so the library

00:37:58,810 --> 00:38:01,840
actually went outside of the fabric

00:38:00,580 --> 00:38:03,700
environment on a separate machine

00:38:01,840 --> 00:38:05,710
doesn't even have to run within the

00:38:03,700 --> 00:38:07,450
machine itself I mean all it does is

00:38:05,710 --> 00:38:09,670
serve the meditative serves you know

00:38:07,450 --> 00:38:11,170
allocations and it's access rights oh

00:38:09,670 --> 00:38:13,869
sure you can advance into them

00:38:11,170 --> 00:38:16,180
there's hardware support in the MFP next

00:38:13,869 --> 00:38:18,010
prevent the nose from accessing memory

00:38:16,180 --> 00:38:20,260
they're not supposed to I don't really

00:38:18,010 --> 00:38:21,790
want to go into that today but that

00:38:20,260 --> 00:38:23,349
means the librarian running externally

00:38:21,790 --> 00:38:26,980
is actually literally able to control

00:38:23,349 --> 00:38:28,809
access to the famine intentionally the

00:38:26,980 --> 00:38:30,549
way that we built this it's a it's a

00:38:28,809 --> 00:38:33,430
it's written in Python Python 3 of

00:38:30,549 --> 00:38:35,319
course and the way that it cooks into

00:38:33,430 --> 00:38:38,380
the known operating system is biased

00:38:35,319 --> 00:38:40,720
views obviously the read and write

00:38:38,380 --> 00:38:42,849
paths or not do don't go through the old

00:38:40,720 --> 00:38:45,849
fuse pad thing they go directly to the

00:38:42,849 --> 00:38:47,470
memory and we also added and network

00:38:45,849 --> 00:38:50,200
which to use doesn't typically bother to

00:38:47,470 --> 00:38:51,760
do and so it's literally just a fork and

00:38:50,200 --> 00:38:53,470
the fuse code before the kernel bands

00:38:51,760 --> 00:38:55,180
before the library wins we work the

00:38:53,470 --> 00:38:58,329
Python library bits we created wrong

00:38:55,180 --> 00:39:03,099
parallel universe of queues that does

00:38:58,329 --> 00:39:04,630
this librarian thing and there's this

00:39:03,099 --> 00:39:08,109
what library class system looks like

00:39:04,630 --> 00:39:10,720
this uses the VFS layer is the the fuse

00:39:08,109 --> 00:39:12,670
the fuse bits to to talk to the thing

00:39:10,720 --> 00:39:15,480
and the awesome part is the metadata is

00:39:12,670 --> 00:39:17,530
stored in a little sequined like babies

00:39:15,480 --> 00:39:20,829
because we wanted to make sure that we

00:39:17,530 --> 00:39:23,470
had it was persistent and transactional

00:39:20,829 --> 00:39:25,020
kind of stuff and I am running out of

00:39:23,470 --> 00:39:26,520
time

00:39:25,020 --> 00:39:28,680
way too much time show you about cool

00:39:26,520 --> 00:39:31,890
they were doing computing and not enough

00:39:28,680 --> 00:39:34,140
about what we're doing here metadata we

00:39:31,890 --> 00:39:35,670
have a little Atomics I pray or hello we

00:39:34,140 --> 00:39:37,020
rolled the thing I want to send a bit of

00:39:35,670 --> 00:39:39,059
time talking about the toast bit of

00:39:37,020 --> 00:39:41,520
wrestling yeah it's about the Semana

00:39:39,059 --> 00:39:43,260
festive thing so what we do for

00:39:41,520 --> 00:39:45,329
manifesting is we need to generate a

00:39:43,260 --> 00:39:48,059
kernel and an integrand this for an hour

00:39:45,329 --> 00:39:50,130
for the nodes and that's the only data

00:39:48,059 --> 00:39:52,740
that note gets no does not have a real a

00:39:50,130 --> 00:39:55,380
real root filesystem anywhere it runs

00:39:52,740 --> 00:39:57,000
right out of a tremendous the

00:39:55,380 --> 00:39:58,619
manifesting service runs this little

00:39:57,000 --> 00:40:01,650
restful service somewhere the network

00:39:58,619 --> 00:40:03,000
and it contains this little retro

00:40:01,650 --> 00:40:05,609
service that you talk to to generate

00:40:03,000 --> 00:40:11,730
those images and it also talks to the

00:40:05,609 --> 00:40:14,730
FTP server and and so bootp if TP all

00:40:11,730 --> 00:40:17,640
those usual boot system and it also

00:40:14,730 --> 00:40:20,220
talks to a DNS service to get the name

00:40:17,640 --> 00:40:23,430
sound up a TV service give the IP

00:40:20,220 --> 00:40:25,500
addresses allocated then we have CL our

00:40:23,430 --> 00:40:28,790
application that talks to the service

00:40:25,500 --> 00:40:32,040
and it stores the kernels Commandments

00:40:28,790 --> 00:40:34,710
for pixie to use and so what we do is we

00:40:32,040 --> 00:40:37,380
create this golden image that contains

00:40:34,710 --> 00:40:40,170
kind of an usual Debian installer ready

00:40:37,380 --> 00:40:42,299
usual Debian in Atlantis and then we and

00:40:40,170 --> 00:40:44,490
then we purposely modify that image for

00:40:42,299 --> 00:40:45,420
each node we unpack the golden image go

00:40:44,490 --> 00:40:47,160
in and play with it

00:40:45,420 --> 00:40:49,230
to set the hostname and to set all of

00:40:47,160 --> 00:40:51,089
its IP addresses and to give it all of

00:40:49,230 --> 00:40:52,130
its TLS key that it's going to need to

00:40:51,089 --> 00:40:54,359
be able to operate in the environment

00:40:52,130 --> 00:40:56,520
and then we just can't got that

00:40:54,359 --> 00:40:59,849
randomness to the nodes of boots and so

00:40:56,520 --> 00:41:01,920
the R and the node is the notice and

00:40:59,849 --> 00:41:04,140
able to operate on in the environment

00:41:01,920 --> 00:41:06,450
and have whatever customization needs oh

00:41:04,140 --> 00:41:08,430
you should also add in packages to that

00:41:06,450 --> 00:41:11,220
like oh this node needs to have an

00:41:08,430 --> 00:41:13,470
Apache server in what back and so you

00:41:11,220 --> 00:41:15,150
can actually put into the manifest which

00:41:13,470 --> 00:41:17,280
is why we call it manifest you put into

00:41:15,150 --> 00:41:21,869
that the package you need and the

00:41:17,280 --> 00:41:23,730
customizations require that system let's

00:41:21,869 --> 00:41:26,089
see obviously we don't have the local

00:41:23,730 --> 00:41:28,890
storage so they run entirely on the RAM

00:41:26,089 --> 00:41:29,440
so on the torch we have the DHD server

00:41:28,890 --> 00:41:31,420
that he

00:41:29,440 --> 00:41:34,960
a server and then it just serves out the

00:41:31,420 --> 00:41:37,240
stuff to the over pixie and that's uh

00:41:34,960 --> 00:41:38,950
pretty simple technique obviously a

00:41:37,240 --> 00:41:40,750
usual system at that point is going to

00:41:38,950 --> 00:41:42,069
get that in in reminiscing you the only

00:41:40,750 --> 00:41:45,040
thing that's going to use it for is to

00:41:42,069 --> 00:41:46,869
go finance real root filesystem and it's

00:41:45,040 --> 00:41:49,119
gonna go into fest now it's gonna go

00:41:46,869 --> 00:41:51,490
quite some device or it's gonna go do

00:41:49,119 --> 00:41:53,560
whatever what's to do but I was just

00:41:51,490 --> 00:41:55,900
really actually truly distance there's

00:41:53,560 --> 00:41:58,210
no it's just running out a ramp with the

00:41:55,900 --> 00:42:00,010
operating this is crash as well it's

00:41:58,210 --> 00:42:04,359
state is persisted in whatever fan

00:42:00,010 --> 00:42:05,980
operations it's done and so we're able

00:42:04,359 --> 00:42:07,750
to actually run entirely have a brand

00:42:05,980 --> 00:42:10,060
which is pretty cool so manifesting

00:42:07,750 --> 00:42:12,010
overview uses the end the bootstrap

00:42:10,060 --> 00:42:14,319
obviously we're just standing on the

00:42:12,010 --> 00:42:16,450
shoulders of giants as usual it's got so

00:42:14,319 --> 00:42:17,920
Vestal service consent command and said

00:42:16,450 --> 00:42:19,450
oh I need to build a manifest for this

00:42:17,920 --> 00:42:21,970
and I want that manifest to be run on

00:42:19,450 --> 00:42:24,400
these 27 notes so it really quickly

00:42:21,970 --> 00:42:26,800
really lets you quickly configure the

00:42:24,400 --> 00:42:28,210
entire machine to run the software that

00:42:26,800 --> 00:42:30,430
you need and then you can quickly

00:42:28,210 --> 00:42:32,829
transition the machine from one state to

00:42:30,430 --> 00:42:34,510
another by just changing which manifests

00:42:32,829 --> 00:42:36,550
each of each of the nodes are running

00:42:34,510 --> 00:42:38,619
and getting a system reconfigured very

00:42:36,550 --> 00:42:40,300
rapidly so the goal is to be able to

00:42:38,619 --> 00:42:43,089
print to transition from one project to

00:42:40,300 --> 00:42:44,410
the next by just rebooting all the nodes

00:42:43,089 --> 00:42:47,380
and having to come up with all the new

00:42:44,410 --> 00:42:49,599
software that we need so and that's

00:42:47,380 --> 00:42:51,130
about what I have time for today thank

00:42:49,599 --> 00:42:52,660
you all very very much for coming out

00:42:51,130 --> 00:42:53,829
this morning and I hope we have a great

00:42:52,660 --> 00:42:56,250
week this week I know I'm certainly

00:42:53,829 --> 00:42:56,250
looking forward

00:43:03,760 --> 00:43:14,390
if you have questions please line up at

00:43:06,320 --> 00:43:15,980
the microphone hello hi Kate Brandon

00:43:14,390 --> 00:43:21,220
Robinson here I have several questions

00:43:15,980 --> 00:43:23,540
but may not have time for all of them

00:43:21,220 --> 00:43:25,340
probably digging into some of the stuff

00:43:23,540 --> 00:43:28,180
you were skipping our I was curious

00:43:25,340 --> 00:43:30,560
about what aspects of the hardware

00:43:28,180 --> 00:43:32,960
because of this innovative new design

00:43:30,560 --> 00:43:34,640
often in engineering we finally shift

00:43:32,960 --> 00:43:37,850
our choke points in one place to another

00:43:34,640 --> 00:43:39,110
so in this fabric attached memory are

00:43:37,850 --> 00:43:42,410
you finding that the memory controller

00:43:39,110 --> 00:43:46,430
or controllers are threatened threatened

00:43:42,410 --> 00:43:48,890
to be your design to a point it's very

00:43:46,430 --> 00:43:50,540
likely and the reason of course is if

00:43:48,890 --> 00:43:52,580
you have a lot of contention for data in

00:43:50,540 --> 00:43:54,890
the same location then you can have a

00:43:52,580 --> 00:43:57,680
lot of people accessing it's a true

00:43:54,890 --> 00:43:59,870
fabric with with with you know with

00:43:57,680 --> 00:44:02,450
enough bandwidth to handle anybody

00:43:59,870 --> 00:44:04,340
anybody - anybody in at full speed but

00:44:02,450 --> 00:44:05,990
if everybody is focused on a single

00:44:04,340 --> 00:44:07,250
piece of memory and obviously you're

00:44:05,990 --> 00:44:08,960
going to be limited by bandwidth and

00:44:07,250 --> 00:44:11,570
that single piece of memory yeah the

00:44:08,960 --> 00:44:13,460
goal of the librarian is to spread the

00:44:11,570 --> 00:44:15,530
data across the fabric so you don't have

00:44:13,460 --> 00:44:17,750
a single choke point like that and says

00:44:15,530 --> 00:44:19,970
you get fairly fairly flat access but

00:44:17,750 --> 00:44:21,590
obviously depending you're gonna now you

00:44:19,970 --> 00:44:23,780
have to design your data so that it's

00:44:21,590 --> 00:44:25,460
spread across the network spread across

00:44:23,780 --> 00:44:27,290
the fabric to avoid those kind of two

00:44:25,460 --> 00:44:30,760
points present and then you run into

00:44:27,290 --> 00:44:30,760
replication challenge

00:44:39,869 --> 00:44:45,400
it must be wet oblique Whitford doing

00:44:43,599 --> 00:44:50,589
password cracking and stuff when they

00:44:45,400 --> 00:44:51,579
say things you would think okay table

00:44:50,589 --> 00:44:55,650
can you get the other thing the other

00:44:51,579 --> 00:44:55,650
problem that I looked at in such things

00:44:55,740 --> 00:45:00,549
very similar problem yeah any problem I

00:44:58,599 --> 00:45:02,049
have an enormous amount of data and you

00:45:00,549 --> 00:45:05,280
don't know what about that data you're

00:45:02,049 --> 00:45:07,240
going to eat today yep thank you

00:45:05,280 --> 00:45:16,030
obviously I should go into password

00:45:07,240 --> 00:45:19,930
cracking okay going forward following

00:45:16,030 --> 00:45:22,240
this question all computer science all

00:45:19,930 --> 00:45:27,910
data structures and so we're assuming

00:45:22,240 --> 00:45:31,360
that memory is in cash we have slow

00:45:27,910 --> 00:45:35,530
memory fast memory all the databases

00:45:31,360 --> 00:45:38,170
are are to be dealt with that this is

00:45:35,530 --> 00:45:40,990
around when everything fits in the RAM

00:45:38,170 --> 00:45:44,190
and it as far as idlers of there is no

00:45:40,990 --> 00:45:49,450
enough to access this persistent memory

00:45:44,190 --> 00:45:51,520
do you think we are on the third row of

00:45:49,450 --> 00:45:54,040
proportion that is databases will need

00:45:51,520 --> 00:45:56,050
to behave differently so well we've got

00:45:54,040 --> 00:45:57,820
a bit of a bunch of the storage - so

00:45:56,050 --> 00:46:00,190
we've got rid of yours your disks in

00:45:57,820 --> 00:46:04,690
your networks but we still have a lot of

00:46:00,190 --> 00:46:07,540
caches of course the machine is the MFP

00:46:04,690 --> 00:46:10,240
is not cache coherent between nodes and

00:46:07,540 --> 00:46:11,680
so you have an having explicit points

00:46:10,240 --> 00:46:13,810
where you're introducing latency

00:46:11,680 --> 00:46:16,840
delaying the system to synchronize data

00:46:13,810 --> 00:46:18,670
across the across the fabric and so

00:46:16,840 --> 00:46:20,860
there are there are new challenges and

00:46:18,670 --> 00:46:24,120
plenty of employment for our computer

00:46:20,860 --> 00:46:26,590
scientists going forward so you're not I

00:46:24,120 --> 00:46:28,420
think that's a last question we had time

00:46:26,590 --> 00:46:28,870
for I'm really sorry I'll be here all

00:46:28,420 --> 00:46:30,520
week

00:46:28,870 --> 00:46:32,800
more questions just come and come and

00:46:30,520 --> 00:46:34,720
bug me and lunch or whatever I really

00:46:32,800 --> 00:46:36,270
great to see all of you and thanks for

00:46:34,720 --> 00:46:39,590
coming

00:46:36,270 --> 00:46:39,590
[Music]

00:46:41,960 --> 00:46:44,020

YouTube URL: https://www.youtube.com/watch?v=e8-0H_n8x-M


