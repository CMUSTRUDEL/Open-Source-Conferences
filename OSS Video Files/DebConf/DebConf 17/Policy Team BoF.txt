Title: Policy Team BoF
Publication date: 2017-12-05
Playlist: DebConf 17
Description: 
	by Sean Whitton
by Russ Allbery

At: DebConf17
https://debconf17.debconf.org/
Room: Rex
Scheduled start: 2017-08-06 18:00:00
Captions: 
	00:00:04,939 --> 00:00:11,209
thanks for coming to the party buff I'm

00:00:08,069 --> 00:00:13,290
Shawn Witten and I'm russell berrie

00:00:11,209 --> 00:00:15,420
perhaps one of those needs more

00:00:13,290 --> 00:00:18,210
introduction than the other and we have

00:00:15,420 --> 00:00:20,460
50% of the policy team I realized about

00:00:18,210 --> 00:00:21,960
10 minutes ago the police team is four

00:00:20,460 --> 00:00:24,869
people so we actually have enough people

00:00:21,960 --> 00:00:27,119
to second our own proposals it's a good

00:00:24,869 --> 00:00:29,640
job that is never the case that the

00:00:27,119 --> 00:00:33,420
entire team is active because that could

00:00:29,640 --> 00:00:35,519
cause problems we thought it might be

00:00:33,420 --> 00:00:39,600
useful to start by giving an overview of

00:00:35,519 --> 00:00:41,100
the process that policy has yeah show

00:00:39,600 --> 00:00:43,140
hands like how many people here already

00:00:41,100 --> 00:00:46,590
know how changes to Debian policy are

00:00:43,140 --> 00:00:49,140
made okay

00:00:46,590 --> 00:00:53,010
actually not actually not all that many

00:00:49,140 --> 00:00:56,100
people okay so so let me let me give a

00:00:53,010 --> 00:00:57,390
kind of a rundown of the Strad the way

00:00:56,100 --> 00:00:59,280
that we go about doing this

00:00:57,390 --> 00:01:00,629
and this is this has been around for a

00:00:59,280 --> 00:01:02,760
long time

00:01:00,629 --> 00:01:05,700
Manoj and I were the ones who sort of

00:01:02,760 --> 00:01:08,100
hammered it out way back in the day so

00:01:05,700 --> 00:01:10,440
the the way this works is that somebody

00:01:08,100 --> 00:01:11,789
puts forward a proposal to change Debian

00:01:10,440 --> 00:01:15,330
policy or to add something that we

00:01:11,789 --> 00:01:17,750
currently don't have documented and and

00:01:15,330 --> 00:01:20,369
that we make sure that's open to the bug

00:01:17,750 --> 00:01:21,840
against the Debian policy package which

00:01:20,369 --> 00:01:23,479
is also the thing you can install to get

00:01:21,840 --> 00:01:25,560
a copy of the current version of policy

00:01:23,479 --> 00:01:27,149
and then there's some amount of

00:01:25,560 --> 00:01:28,470
discussion around you know is this a

00:01:27,149 --> 00:01:29,819
problem that we need to solve is this

00:01:28,470 --> 00:01:33,209
the right way to solve it so on and so

00:01:29,819 --> 00:01:37,530
forth and then hopefully that process

00:01:33,209 --> 00:01:39,599
culminates in some proposed wording like

00:01:37,530 --> 00:01:41,789
here's an actual piece of text that

00:01:39,599 --> 00:01:42,959
would go into the document or text that

00:01:41,789 --> 00:01:46,259
should be removed from the document or

00:01:42,959 --> 00:01:48,810
whatever else the point that that's goes

00:01:46,259 --> 00:01:52,440
forward we look for people to second

00:01:48,810 --> 00:01:55,920
that so the the general process is is

00:01:52,440 --> 00:01:59,520
that anything that gets committed it

00:01:55,920 --> 00:02:01,379
becomes part of policy should have three

00:01:59,520 --> 00:02:03,929
Debian developers who have agreed with

00:02:01,379 --> 00:02:05,759
it so frequently that means two seconds

00:02:03,929 --> 00:02:08,270
because the often the person proposing

00:02:05,759 --> 00:02:10,289
the language is that Debian developer I

00:02:08,270 --> 00:02:11,580
usually I'll ask for another Debian

00:02:10,289 --> 00:02:12,780
developer if the person proposing the

00:02:11,580 --> 00:02:13,730
language is a contributor who is not a

00:02:12,780 --> 00:02:16,620
developer

00:02:13,730 --> 00:02:18,090
it which is probably more formality than

00:02:16,620 --> 00:02:20,840
we really need but that's kind of the

00:02:18,090 --> 00:02:24,060
process we've been using for a long time

00:02:20,840 --> 00:02:27,230
the the other thing that can happen of

00:02:24,060 --> 00:02:30,590
course is that somebody can object and

00:02:27,230 --> 00:02:35,340
then we don't have a process anymore

00:02:30,590 --> 00:02:37,620
that's kind of a summary oh I mean oh

00:02:35,340 --> 00:02:38,760
yeah yeah it happens quite a lot it's

00:02:37,620 --> 00:02:40,709
actually one of the frustrations about

00:02:38,760 --> 00:02:45,080
working on policy so we we don't really

00:02:40,709 --> 00:02:48,900
have a disagreement resolution mechanism

00:02:45,080 --> 00:02:51,959
we talk a lot is mostly the disagreement

00:02:48,900 --> 00:02:53,459
record resolution mechanisms the hope is

00:02:51,959 --> 00:02:55,829
that we can find something that everyone

00:02:53,459 --> 00:02:59,670
will agree to so it's kind of government

00:02:55,829 --> 00:03:02,849
by consensus I'm a big fan of consensus

00:02:59,670 --> 00:03:05,130
I really like consensus often that will

00:03:02,849 --> 00:03:07,049
work often when it doesn't work and we

00:03:05,130 --> 00:03:09,349
can't reach consensus on any kind of

00:03:07,049 --> 00:03:11,760
particular change that Debian policy

00:03:09,349 --> 00:03:13,110
that often can indicate that they're

00:03:11,760 --> 00:03:14,730
just that we actually shouldn't be

00:03:13,110 --> 00:03:16,349
changing anything they're like we don't

00:03:14,730 --> 00:03:17,850
have an agreement on a project as to

00:03:16,349 --> 00:03:20,850
exactly how things should be working and

00:03:17,850 --> 00:03:25,889
so like it's perfectly okay to just

00:03:20,850 --> 00:03:27,959
leave it alone but the there are cases

00:03:25,889 --> 00:03:30,600
where it's I think we have some general

00:03:27,959 --> 00:03:32,579
agreement that like this description in

00:03:30,600 --> 00:03:33,989
policy is is wrong like if this is what

00:03:32,579 --> 00:03:35,250
what we have in policy right now is not

00:03:33,989 --> 00:03:37,319
what people are doing but there's some

00:03:35,250 --> 00:03:39,870
disagreement over what we should say in

00:03:37,319 --> 00:03:41,700
policy but there's no agreement on any

00:03:39,870 --> 00:03:44,250
particular thing to say in policy and

00:03:41,700 --> 00:03:47,280
then we have a bug that's been open for

00:03:44,250 --> 00:03:50,579
14 years it's usually the way that's up

00:03:47,280 --> 00:03:52,109
recently so that's kind of that's kind

00:03:50,579 --> 00:03:54,810
of the summary it's designed to be very

00:03:52,109 --> 00:03:57,420
uncontroversial there's a couple of

00:03:54,810 --> 00:04:00,810
other sort of meta rules around this one

00:03:57,420 --> 00:04:04,019
of them is that policy is not a stick to

00:04:00,810 --> 00:04:05,430
beat maintain errs with so that it's I

00:04:04,019 --> 00:04:08,430
think I was Manoah its phrasing

00:04:05,430 --> 00:04:10,319
originally but the idea is is that you

00:04:08,430 --> 00:04:12,540
don't if you don't like how something is

00:04:10,319 --> 00:04:14,489
being done in Debian please do not come

00:04:12,540 --> 00:04:16,289
and propose policy that says doing it

00:04:14,489 --> 00:04:17,549
the way you don't like is wrong like

00:04:16,289 --> 00:04:20,010
that's that's not how we want to

00:04:17,549 --> 00:04:21,989
function as a project there should be

00:04:20,010 --> 00:04:24,030
some project consensus that that what

00:04:21,989 --> 00:04:26,039
you're doing is wrong if you can't if

00:04:24,030 --> 00:04:26,410
there if it needs to make a decision you

00:04:26,039 --> 00:04:27,880
can't

00:04:26,410 --> 00:04:29,740
consensus then that's what the Technical

00:04:27,880 --> 00:04:32,830
Committee is for or are various other

00:04:29,740 --> 00:04:36,030
project governance things but the intent

00:04:32,830 --> 00:04:38,380
is that for policy to be a technical

00:04:36,030 --> 00:04:39,970
repository of the decisions that we've

00:04:38,380 --> 00:04:41,710
made about how to make packages

00:04:39,970 --> 00:04:44,020
interoperate as part of an operating

00:04:41,710 --> 00:04:47,410
system but not as a dispute resolution

00:04:44,020 --> 00:04:49,120
mechanism that's one and the other one

00:04:47,410 --> 00:04:50,740
is is that we try not to make changes to

00:04:49,120 --> 00:04:53,110
policy that immediately make a bunch of

00:04:50,740 --> 00:04:54,640
packages buggy so the idea is is that if

00:04:53,110 --> 00:04:56,140
something is currently widely being done

00:04:54,640 --> 00:04:57,880
in Debian even if everybody agrees it

00:04:56,140 --> 00:04:59,410
shouldn't be done in Debian we generally

00:04:57,880 --> 00:05:00,910
encourage people to go fix it in Debian

00:04:59,410 --> 00:05:03,190
first and then when we're down to like

00:05:00,910 --> 00:05:10,240
the long tail of unmaintained packages

00:05:03,190 --> 00:05:12,550
make changes in Debian policy yeah there

00:05:10,240 --> 00:05:16,780
looks good some mics over here for folks

00:05:12,550 --> 00:05:19,540
to use for questions and stuff even or

00:05:16,780 --> 00:05:23,440
the things that are on the level of

00:05:19,540 --> 00:05:25,210
shoot yeah even for things that are on

00:05:23,440 --> 00:05:28,090
the level of should I say that we would

00:05:25,210 --> 00:05:30,850
we're a little bit more willing to

00:05:28,090 --> 00:05:31,870
incorporate new shoulds even if there we

00:05:30,850 --> 00:05:33,820
know that there's a bunch of packages

00:05:31,870 --> 00:05:35,500
that don't follow them as long as it's a

00:05:33,820 --> 00:05:37,270
pretty strong consensus that we really

00:05:35,500 --> 00:05:40,810
do don't want those packages to do those

00:05:37,270 --> 00:05:42,340
things this used to be a lot harder back

00:05:40,810 --> 00:05:44,590
when I first originally started working

00:05:42,340 --> 00:05:47,740
on policy these days for most things

00:05:44,590 --> 00:05:50,890
that we want to add the policy the the

00:05:47,740 --> 00:05:52,030
the first step is Olympian check and if

00:05:50,890 --> 00:05:54,250
there's a Lindsey in check we can get

00:05:52,030 --> 00:05:57,280
concrete numbers which is fantastic and

00:05:54,250 --> 00:05:58,900
we can get we get a lot of movement

00:05:57,280 --> 00:06:00,370
already in the archive as soon as Lynne

00:05:58,900 --> 00:06:02,590
thean starts complaining about something

00:06:00,370 --> 00:06:04,510
a lot of people just fix it and so that

00:06:02,590 --> 00:06:07,240
tends to flush out these things that

00:06:04,510 --> 00:06:10,780
otherwise sit around forever I think the

00:06:07,240 --> 00:06:14,910
original header of Linton was something

00:06:10,780 --> 00:06:18,419
like love the policy of beta policy oh

00:06:14,910 --> 00:06:18,419
that's funny

00:06:18,450 --> 00:06:23,740
is there something lower than the shoot

00:06:21,220 --> 00:06:27,009
in the policy a recommendation

00:06:23,740 --> 00:06:28,990
have that somewhere I guess there there

00:06:27,009 --> 00:06:32,020
are there are things in policy that are

00:06:28,990 --> 00:06:36,699
like this would this this is a good idea

00:06:32,020 --> 00:06:39,759
or you know consider doing this there

00:06:36,699 --> 00:06:41,830
isn't a word one of the things that it's

00:06:39,759 --> 00:06:43,870
been kind of a long-standing minor

00:06:41,830 --> 00:06:47,080
irritation about policy is is that it

00:06:43,870 --> 00:06:50,650
kind of stole RFC 29:11 language or

00:06:47,080 --> 00:06:52,570
29:19 language but not really so if

00:06:50,650 --> 00:06:54,460
you're used to IETF standards process

00:06:52,570 --> 00:06:56,470
everything looks familiar up until the

00:06:54,460 --> 00:06:58,090
point where it like we don't treat it

00:06:56,470 --> 00:07:01,690
the same way and it isn't familiar and

00:06:58,090 --> 00:07:03,639
it's just sort of weird although to be

00:07:01,690 --> 00:07:06,400
fair IETF has the same problem that they

00:07:03,639 --> 00:07:08,590
don't have a word for this was this is a

00:07:06,400 --> 00:07:11,050
best practice but isn't actually a

00:07:08,590 --> 00:07:14,020
standards problem the lowest they have

00:07:11,050 --> 00:07:15,699
it should and I various people have

00:07:14,020 --> 00:07:18,639
attempted to introduce other words

00:07:15,699 --> 00:07:20,139
without a lot of success and have run

00:07:18,639 --> 00:07:22,240
into odd corners of English attempting

00:07:20,139 --> 00:07:26,289
to find a word that will fit somewhere

00:07:22,240 --> 00:07:27,820
below should I there was some big

00:07:26,289 --> 00:07:29,110
argument over OTT and then everyone

00:07:27,820 --> 00:07:35,229
decided that thought was stronger than

00:07:29,110 --> 00:07:36,099
should and so that didn't work um one

00:07:35,229 --> 00:07:38,380
thing I wanted to add to your

00:07:36,099 --> 00:07:40,539
description is that seconding a proposal

00:07:38,380 --> 00:07:42,610
is not just to say that you agree with

00:07:40,539 --> 00:07:48,930
it but that you think there's consensus

00:07:42,610 --> 00:07:48,930
on it um that's worth mentioning yeah

00:07:50,460 --> 00:07:55,539
right in a project with a thousand

00:07:52,840 --> 00:07:56,860
people yeah yeah the three people is not

00:07:55,539 --> 00:07:59,229
very much to make a change the Debian

00:07:56,860 --> 00:08:04,270
but there aren't very many active people

00:07:59,229 --> 00:08:06,070
who follow policy closely and yeah but

00:08:04,270 --> 00:08:09,699
generally the people who do have a

00:08:06,070 --> 00:08:11,710
pretty good feel for what is a problem

00:08:09,699 --> 00:08:13,599
what isn't the problem one of the things

00:08:11,710 --> 00:08:15,250
that I find really rewarding about

00:08:13,599 --> 00:08:18,370
working on policy is that you get a

00:08:15,250 --> 00:08:19,690
really interesting understanding of

00:08:18,370 --> 00:08:22,000
what's going on across the entire

00:08:19,690 --> 00:08:23,650
distribution and also what goes into

00:08:22,000 --> 00:08:24,820
making a set of packages that can work

00:08:23,650 --> 00:08:29,770
together and so it's quite the education

00:08:24,820 --> 00:08:32,169
sometimes I think you said making a

00:08:29,770 --> 00:08:34,150
change but I also heard you say it

00:08:32,169 --> 00:08:36,880
shouldn't be making a change to just be

00:08:34,150 --> 00:08:39,979
documenting whatever happened before

00:08:36,880 --> 00:08:41,839
yeah to some extent that's that's well

00:08:39,979 --> 00:08:42,890
so there's a couple of things well one

00:08:41,839 --> 00:08:44,450
is is that I think there is an

00:08:42,890 --> 00:08:47,750
understanding that be from time to time

00:08:44,450 --> 00:08:49,910
Debian needs to make changes and once to

00:08:47,750 --> 00:08:50,899
introduce major new features or wants to

00:08:49,910 --> 00:08:53,390
change the way that we have historically

00:08:50,899 --> 00:08:55,490
done things or something about the

00:08:53,390 --> 00:08:57,290
underlying ecosystem has changed in a

00:08:55,490 --> 00:08:58,940
way that requires us to document new

00:08:57,290 --> 00:09:01,370
ways to do things like one very obvious

00:08:58,940 --> 00:09:02,750
example would be introducing it with

00:09:01,370 --> 00:09:04,029
introduction of system D in the archive

00:09:02,750 --> 00:09:06,320
there's a whole other way of managing

00:09:04,029 --> 00:09:08,420
what used to just be fairly straight

00:09:06,320 --> 00:09:09,680
well used to be an it script so that

00:09:08,420 --> 00:09:10,880
everyone understood which were not at

00:09:09,680 --> 00:09:12,680
all fairly straightforward there's a

00:09:10,880 --> 00:09:19,779
giant chapter in policy about writing

00:09:12,680 --> 00:09:22,190
init scripts oh sorry I I apologize I

00:09:19,779 --> 00:09:24,950
speak extremely fast when I start

00:09:22,190 --> 00:09:30,740
talking a lot so I'll try to like slow

00:09:24,950 --> 00:09:33,260
it down so there's a good example of a

00:09:30,740 --> 00:09:35,420
place where we we actually wanted to

00:09:33,260 --> 00:09:37,310
change something is that if you

00:09:35,420 --> 00:09:39,800
introduced system D now their system to

00:09:37,310 --> 00:09:41,540
units we need some documentation about

00:09:39,800 --> 00:09:44,209
how you deal with system to units how

00:09:41,540 --> 00:09:46,910
you do transition from an it scripts

00:09:44,209 --> 00:09:50,320
into system D or transition back how

00:09:46,910 --> 00:09:53,180
init system helpers works with all this

00:09:50,320 --> 00:09:56,000
so that's a good example on the other

00:09:53,180 --> 00:10:00,589
front as well because as you might know

00:09:56,000 --> 00:10:02,750
none of that is in policy so some of it

00:10:00,589 --> 00:10:08,089
is now some of it some of it is now as

00:10:02,750 --> 00:10:09,980
of yesterday so we have been playing

00:10:08,089 --> 00:10:11,600
catch-up for a long time and there's all

00:10:09,980 --> 00:10:13,100
there's a ton of things that are

00:10:11,600 --> 00:10:15,230
happening that have happened in Debian

00:10:13,100 --> 00:10:17,120
that are not yet documented in policy so

00:10:15,230 --> 00:10:18,410
even if we just focused on documenting

00:10:17,120 --> 00:10:20,120
the things that people have already done

00:10:18,410 --> 00:10:22,730
we would have quite a bit of work to do

00:10:20,120 --> 00:10:25,040
I think that we all would aspire to

00:10:22,730 --> 00:10:26,300
being in a spot where policy would be a

00:10:25,040 --> 00:10:29,720
little bit closer to the beginning of

00:10:26,300 --> 00:10:32,089
that process a good my two favourite

00:10:29,720 --> 00:10:34,790
Bugaboos on that front are multi arch

00:10:32,089 --> 00:10:37,310
which we have had in Debian for forever

00:10:34,790 --> 00:10:40,070
it feels like at this point and still is

00:10:37,310 --> 00:10:42,260
only slightly represented in policy and

00:10:40,070 --> 00:10:43,730
triggers which completely change how a

00:10:42,260 --> 00:10:45,500
maintainer scripts work and are

00:10:43,730 --> 00:10:48,110
completely not mentioned in policy

00:10:45,500 --> 00:10:51,150
except that there's like a side document

00:10:48,110 --> 00:10:52,620
text file that says here's how triggers

00:10:51,150 --> 00:10:56,670
which is more of an implementation

00:10:52,620 --> 00:10:57,930
detail than a spec so that's kind of

00:10:56,670 --> 00:11:00,900
where we've been at just in terms of

00:10:57,930 --> 00:11:03,180
resourcing one of my goals for this boss

00:11:00,900 --> 00:11:05,340
is hopefully the as well as educate

00:11:03,180 --> 00:11:06,570
people about how policy works to maybe

00:11:05,340 --> 00:11:08,970
get some more people who would be

00:11:06,570 --> 00:11:10,440
interested in contributing in trying to

00:11:08,970 --> 00:11:14,130
close that gap

00:11:10,440 --> 00:11:16,710
I guess I'll make my pitch for why I

00:11:14,130 --> 00:11:18,390
think policy is important one of the big

00:11:16,710 --> 00:11:20,820
reasons why I started working on Debbie

00:11:18,390 --> 00:11:22,290
and originally instead of because I had

00:11:20,820 --> 00:11:25,080
started with Slackware and then went the

00:11:22,290 --> 00:11:27,450
Red Hat which is was kind of a often

00:11:25,080 --> 00:11:30,120
common thing to do at the time and then

00:11:27,450 --> 00:11:31,320
I had a version of Red Hat installed and

00:11:30,120 --> 00:11:33,390
then they released the next version of

00:11:31,320 --> 00:11:35,160
Red Hat and then I wanted to upgrade to

00:11:33,390 --> 00:11:38,240
the next version of Red Hat and then

00:11:35,160 --> 00:11:42,150
that that was not a thing that you did

00:11:38,240 --> 00:11:44,220
and so I end of mine and there was like

00:11:42,150 --> 00:11:46,140
in the late 1990s and a friend of mine

00:11:44,220 --> 00:11:47,730
pointed out that that was the reason why

00:11:46,140 --> 00:11:49,560
he was Debian because you could upgrade

00:11:47,730 --> 00:11:51,390
from one version to the next and that

00:11:49,560 --> 00:11:52,589
was why I switched to Debian and got

00:11:51,390 --> 00:11:55,860
involved in the project in the first

00:11:52,589 --> 00:11:57,960
place and policy is a big chunk of what

00:11:55,860 --> 00:12:02,790
makes that happen I think policy is a is

00:11:57,960 --> 00:12:05,940
an under underappreciated reason why

00:12:02,790 --> 00:12:07,980
Debian is what it is and I think that

00:12:05,940 --> 00:12:09,360
like other folks have other

00:12:07,980 --> 00:12:10,980
distributions have started picking up

00:12:09,360 --> 00:12:13,020
that idea that you really do need to

00:12:10,980 --> 00:12:14,760
write this stuff down but I we have a

00:12:13,020 --> 00:12:16,440
fairly comprehensive understanding of

00:12:14,760 --> 00:12:20,100
what a Debian packages and how it works

00:12:16,440 --> 00:12:23,040
with other Debian packages and the back

00:12:20,100 --> 00:12:25,140
in the day if you look like if you read

00:12:23,040 --> 00:12:27,990
through some of the details of say

00:12:25,140 --> 00:12:29,700
chapter 11 in policy which is the one

00:12:27,990 --> 00:12:32,070
that goes into the specific details of

00:12:29,700 --> 00:12:36,080
here's the how Usenet news programs work

00:12:32,070 --> 00:12:39,060
here's how X programs work here's how

00:12:36,080 --> 00:12:40,830
you handle terminal emulators here is

00:12:39,060 --> 00:12:44,760
exactly how the backspace key should

00:12:40,830 --> 00:12:48,870
function in a Debian system that stuff

00:12:44,760 --> 00:12:51,930
is actually really cool and I think that

00:12:48,870 --> 00:12:55,140
we you know it's hard to keep that level

00:12:51,930 --> 00:12:57,420
of detail and thoughtfulness around a

00:12:55,140 --> 00:12:59,400
growing project with tons and tons of

00:12:57,420 --> 00:13:01,620
packages but I think it's a great ideal

00:12:59,400 --> 00:13:03,630
to aspire to that

00:13:01,620 --> 00:13:05,910
you can run an arbitrary program inside

00:13:03,630 --> 00:13:08,940
Debian and hit the backspace key and it

00:13:05,910 --> 00:13:11,610
will delete a character that way and not

00:13:08,940 --> 00:13:13,680
do some other random thing and I you

00:13:11,610 --> 00:13:15,839
know I started using UNIX back in the

00:13:13,680 --> 00:13:20,040
day when that was not a guarantee that

00:13:15,839 --> 00:13:22,170
you could rely on so can you explain a

00:13:20,040 --> 00:13:28,760
little bit why you think that policy has

00:13:22,170 --> 00:13:31,020
a big chunk of that because I I did

00:13:28,760 --> 00:13:34,020
because you write down that that is

00:13:31,020 --> 00:13:37,880
something that you want I mean another

00:13:34,020 --> 00:13:43,589
distribution could as well be upgradable

00:13:37,880 --> 00:13:45,330
yeah I think it's because so there are

00:13:43,589 --> 00:13:46,740
some mistake right yeah I mean there's

00:13:45,330 --> 00:13:48,450
kind of two ways that you achieve those

00:13:46,740 --> 00:13:50,190
sorts of goals one is to test everything

00:13:48,450 --> 00:13:51,720
very thoroughly and the other one is to

00:13:50,190 --> 00:13:53,420
write down what you expect people to do

00:13:51,720 --> 00:13:56,550
and you kind of have to do both of those

00:13:53,420 --> 00:13:58,670
and I think that the testing is probably

00:13:56,550 --> 00:14:00,750
deserves the lion's share of the credit

00:13:58,670 --> 00:14:03,930
because that's what it uncovers the

00:14:00,750 --> 00:14:05,400
actual bugs but if you don't have it

00:14:03,930 --> 00:14:07,890
written down how you're supposed to do

00:14:05,400 --> 00:14:09,180
something and you've got a project of

00:14:07,890 --> 00:14:10,500
thousands of people who are all

00:14:09,180 --> 00:14:12,240
contributing little pieces here and

00:14:10,500 --> 00:14:13,740
there then the testing is going to

00:14:12,240 --> 00:14:15,000
uncover the fact that no one had any

00:14:13,740 --> 00:14:16,320
idea how to make their packages

00:14:15,000 --> 00:14:18,570
upgradable and then it will just not

00:14:16,320 --> 00:14:19,709
work like the number of bugs you're

00:14:18,570 --> 00:14:22,170
going to get out of the testing process

00:14:19,709 --> 00:14:25,860
will be just like oh okay well we're not

00:14:22,170 --> 00:14:26,790
going to do that then so there's one of

00:14:25,860 --> 00:14:28,700
the things that really because I've

00:14:26,790 --> 00:14:31,230
worked on lint Ian as well a whole bunch

00:14:28,700 --> 00:14:33,089
and would love to get back to doing that

00:14:31,230 --> 00:14:36,330
again when my day job stops eating all

00:14:33,089 --> 00:14:38,190
of my free time the one of the things

00:14:36,330 --> 00:14:41,040
I'm working on both lint Ian andand

00:14:38,190 --> 00:14:44,060
alien policy showed me is the vast power

00:14:41,040 --> 00:14:47,430
of just writing something down somewhere

00:14:44,060 --> 00:14:49,440
it's amazing how much folks in Debian

00:14:47,430 --> 00:14:51,750
who are consuming the Debian packages

00:14:49,440 --> 00:14:54,209
really want to do the right thing they

00:14:51,750 --> 00:14:56,820
really want to write great packages they

00:14:54,209 --> 00:15:00,000
want to follow a coding style they want

00:14:56,820 --> 00:15:01,860
to follow a packaging style they want to

00:15:00,000 --> 00:15:03,870
make a package that works the way

00:15:01,860 --> 00:15:07,740
everyone expects the package to work and

00:15:03,870 --> 00:15:11,370
if you just tell them that somewhere and

00:15:07,740 --> 00:15:13,950
ideally test it as well Linton is like

00:15:11,370 --> 00:15:15,329
it probably 75% of that and writing it

00:15:13,950 --> 00:15:18,929
down it's like 25 percent of

00:15:15,329 --> 00:15:21,269
they'll actually just go do it the 90%

00:15:18,929 --> 00:15:23,339
of the time and the remaining 10% are

00:15:21,269 --> 00:15:26,819
mostly miss misunderstandings and so if

00:15:23,339 --> 00:15:28,949
you write it down then you like most of

00:15:26,819 --> 00:15:30,899
the work just gets magically done and

00:15:28,949 --> 00:15:33,660
then you can chase the the variations

00:15:30,899 --> 00:15:36,660
and get all the way to the quality bar

00:15:33,660 --> 00:15:38,929
you want to make but just amazingly

00:15:36,660 --> 00:15:38,929
powerful

00:15:57,230 --> 00:16:03,689
yeah it is referred to several places

00:16:01,230 --> 00:16:07,100
where it says it the easiest way to

00:16:03,689 --> 00:16:10,019
achieve this is to use this th tool yeah

00:16:07,100 --> 00:16:12,360
so there's an interesting set of things

00:16:10,019 --> 00:16:19,439
that policies are trying to achieve

00:16:12,360 --> 00:16:20,910
there the the and some of it so there's

00:16:19,439 --> 00:16:22,919
a set of things that are happening there

00:16:20,910 --> 00:16:24,629
and some of them are just an era from

00:16:22,919 --> 00:16:26,339
which in which most of policy was

00:16:24,629 --> 00:16:29,040
written and some of them are conscious

00:16:26,339 --> 00:16:30,540
decisions and I actually am too close to

00:16:29,040 --> 00:16:32,129
it to be able to tease those apart so I

00:16:30,540 --> 00:16:33,419
can just kind of give you all the

00:16:32,129 --> 00:16:36,899
reasons and I'm not sure which one

00:16:33,419 --> 00:16:39,089
counts for more so when when policy was

00:16:36,899 --> 00:16:40,259
first written and and even when I first

00:16:39,089 --> 00:16:44,790
started working on it which was quite

00:16:40,259 --> 00:16:46,980
some time later the debhelper I think

00:16:44,790 --> 00:16:49,410
was just being was just getting started

00:16:46,980 --> 00:16:51,749
there were a pile of other helper

00:16:49,410 --> 00:16:53,610
programs like debhelper that were around

00:16:51,749 --> 00:16:56,699
it was not at all clear which of those

00:16:53,610 --> 00:16:58,619
people would mostly use and then see DBS

00:16:56,699 --> 00:17:00,509
came along later than that and also was

00:16:58,619 --> 00:17:02,759
he kind of uses debhelper under the hood

00:17:00,509 --> 00:17:06,419
but it's not like the user facing

00:17:02,759 --> 00:17:10,350
interface for it so policy was kind of

00:17:06,419 --> 00:17:12,000
neutral policy was what let Joey write

00:17:10,350 --> 00:17:13,679
debhelper in the first place and to some

00:17:12,000 --> 00:17:16,289
extent in the sense that policy was a

00:17:13,679 --> 00:17:17,610
specification for debhelper they keep

00:17:16,289 --> 00:17:19,919
this here's all the things that you're

00:17:17,610 --> 00:17:21,510
supposed to do in a package and you can

00:17:19,919 --> 00:17:24,240
write a program that does those things

00:17:21,510 --> 00:17:28,169
and there's some value in not losing

00:17:24,240 --> 00:17:29,730
that like if if if we don't document

00:17:28,169 --> 00:17:32,850
what debhelper is doing under the hood

00:17:29,730 --> 00:17:36,179
it makes it very hard to write another

00:17:32,850 --> 00:17:37,889
debhelper and it's I kind of have a I

00:17:36,179 --> 00:17:40,080
kind of don't want to lock that out like

00:17:37,889 --> 00:17:41,999
I think I can't imagine the world in

00:17:40,080 --> 00:17:43,799
which I would not use Delbert for a new

00:17:41,999 --> 00:17:46,289
package but at the same time like yeah

00:17:43,799 --> 00:17:48,059
there's always it's like knowing what

00:17:46,289 --> 00:17:49,559
the bits are actually supposed to look

00:17:48,059 --> 00:17:52,289
like at the end of the day is is still

00:17:49,559 --> 00:17:54,509
kind of important so there's that angle

00:17:52,289 --> 00:17:57,359
of it that they kind of the underlying

00:17:54,509 --> 00:17:59,309
spec thing the other one is is that is

00:17:57,359 --> 00:18:01,379
just the era in which it was written

00:17:59,309 --> 00:18:03,269
that did help her was not the commonly

00:18:01,379 --> 00:18:05,720
agreed-upon everybody was using this

00:18:03,269 --> 00:18:09,169
that it is now so a lot of it is just

00:18:05,720 --> 00:18:12,330
legacy from before debhelper existed so

00:18:09,169 --> 00:18:15,659
you know there there is some appeal to

00:18:12,330 --> 00:18:17,639
having like a here's policy for people

00:18:15,659 --> 00:18:19,499
using debhelper and then here's the the

00:18:17,639 --> 00:18:21,109
the more detailed spec that's of what's

00:18:19,499 --> 00:18:23,399
under the hood and it's actually doing

00:18:21,109 --> 00:18:25,830
but a lot of that it just comes down to

00:18:23,399 --> 00:18:27,980
it's a lot of work to try to rejigger

00:18:25,830 --> 00:18:32,070
the document in that sort of fashion I

00:18:27,980 --> 00:18:34,289
mean touches that just add references

00:18:32,070 --> 00:18:36,960
developer without using should or must a

00:18:34,289 --> 00:18:41,960
completely uncontroversial we can add

00:18:36,960 --> 00:18:44,730
more of those I in my it was sort of a

00:18:41,960 --> 00:18:46,769
very odd attempt to try to provoke

00:18:44,730 --> 00:18:50,789
menage to come back and start working on

00:18:46,769 --> 00:18:52,470
policy again sort of I didn't think it

00:18:50,789 --> 00:18:55,200
was gonna work but you know for shot I

00:18:52,470 --> 00:18:58,549
actually converted Debian policy over to

00:18:55,200 --> 00:19:02,309
using debhelper for the 400 release

00:18:58,549 --> 00:19:04,080
until prior to that on it it was

00:19:02,309 --> 00:19:07,590
something that Manoj has started way

00:19:04,080 --> 00:19:09,869
back when it didn't use any packaging

00:19:07,590 --> 00:19:12,090
help or whatsoever and it did the actual

00:19:09,869 --> 00:19:13,970
underlying package construction directly

00:19:12,090 --> 00:19:16,409
with D package tools inside Debian rules

00:19:13,970 --> 00:19:17,480
and I maintained that for years and

00:19:16,409 --> 00:19:20,190
years and years because I thought

00:19:17,480 --> 00:19:23,039
there's some appeal to that like your

00:19:20,190 --> 00:19:25,200
policy package should just use policy

00:19:23,039 --> 00:19:26,940
and then I decided I was being silly and

00:19:25,200 --> 00:19:28,889
no one else could maintain it and you

00:19:26,940 --> 00:19:30,539
know it would be a lot easier for people

00:19:28,889 --> 00:19:33,059
to contribute if it just looked like any

00:19:30,539 --> 00:19:34,799
other Debian package so it does now but

00:19:33,059 --> 00:19:36,929
Manoj do I was kind of half expecting

00:19:34,799 --> 00:19:37,670
Manoj to show up and say like what what

00:19:36,929 --> 00:19:42,690
what

00:19:37,670 --> 00:19:45,580
[Laughter]

00:19:42,690 --> 00:19:48,850
he didn't look at the source yeah

00:19:45,580 --> 00:19:50,669
possibly not I he's busy I think he's

00:19:48,850 --> 00:19:54,610
gotten drifted off to doing other things

00:19:50,669 --> 00:19:57,820
um dev as a dependency dip helpers kind

00:19:54,610 --> 00:20:00,640
of a blip do you know that policy

00:19:57,820 --> 00:20:02,830
depends on tech live flying link to

00:20:00,640 --> 00:20:04,809
build I mean nothing against Greek as a

00:20:02,830 --> 00:20:08,520
language but I think it's not really

00:20:04,809 --> 00:20:11,080
anyway just a little poke yeah it's so

00:20:08,520 --> 00:20:13,029
well I mean we've never made any real

00:20:11,080 --> 00:20:15,250
attempts the purpose of that was never

00:20:13,029 --> 00:20:18,460
to minimize the dependency tree for for

00:20:15,250 --> 00:20:20,169
Debian policy like Debian policy that it

00:20:18,460 --> 00:20:23,049
doesn't really matter how many tools it

00:20:20,169 --> 00:20:24,700
takes to build it the all of those

00:20:23,049 --> 00:20:26,740
dependencies come from the fact that we

00:20:24,700 --> 00:20:30,490
have docbook xml and we want to produce

00:20:26,740 --> 00:20:33,130
PDF so if if the world stopped caring

00:20:30,490 --> 00:20:34,450
about PDF and PostScript then most of

00:20:33,130 --> 00:20:36,159
that stuff could go away but it seems

00:20:34,450 --> 00:20:40,779
like all of the really good tools for

00:20:36,159 --> 00:20:42,460
generating decent PDF files from some

00:20:40,779 --> 00:20:44,380
kind of a markup language pass-through

00:20:42,460 --> 00:20:46,480
tech because nobody wants to reproduce

00:20:44,380 --> 00:20:50,919
what tech is doing because what tech is

00:20:46,480 --> 00:20:54,039
doing is scary I actually think that

00:20:50,919 --> 00:20:55,659
even even if you use like Sphinx with

00:20:54,039 --> 00:20:57,909
restructured text you may end up with

00:20:55,659 --> 00:20:59,230
tech under the hood there somewhere if

00:20:57,909 --> 00:21:04,450
you want a PDF file

00:20:59,230 --> 00:21:07,779
oh we should say that someone is working

00:21:04,450 --> 00:21:09,640
on making policy into to build with

00:21:07,779 --> 00:21:14,049
Sphinx and be written in rst so

00:21:09,640 --> 00:21:16,630
hopefully that'll that'll go through we

00:21:14,049 --> 00:21:18,159
want to I mean it'll be sorry it'll be

00:21:16,630 --> 00:21:20,529
much more appealing people to write

00:21:18,159 --> 00:21:23,309
patches in rst than dog book so

00:21:20,529 --> 00:21:26,169
hopefully we can make that happen

00:21:23,309 --> 00:21:28,690
yeah I used restructured text for the

00:21:26,169 --> 00:21:31,179
first time for a work project about like

00:21:28,690 --> 00:21:32,590
three weeks ago and I was like okay why

00:21:31,179 --> 00:21:34,929
have I been using markdown all these

00:21:32,590 --> 00:21:36,840
years and what was wrong with me and why

00:21:34,929 --> 00:21:41,049
didn't I switch to this a long time ago

00:21:36,840 --> 00:21:42,789
and if anyone wants to help policy but

00:21:41,049 --> 00:21:44,919
is less interested in writing patches to

00:21:42,789 --> 00:21:48,240
the text then you should let us know if

00:21:44,919 --> 00:21:48,240
you want to help with that conversion

00:21:53,630 --> 00:22:02,130
we so the other thing is we have about

00:21:59,130 --> 00:22:04,920
15 to 20 bugs that we think we can close

00:22:02,130 --> 00:22:07,020
pretty quickly this week so if anyone is

00:22:04,920 --> 00:22:10,320
interested in doing any policy work this

00:22:07,020 --> 00:22:13,280
week in person let us know and we can

00:22:10,320 --> 00:22:13,280
try and get through those

00:22:18,800 --> 00:22:27,950
is everything we had on our list so you

00:22:25,460 --> 00:22:29,720
mentioned lien and how when like you add

00:22:27,950 --> 00:22:33,590
something to Lin Chen then it's easier

00:22:29,720 --> 00:22:36,800
to then get policy to include this thing

00:22:33,590 --> 00:22:40,490
yeah but like the process for other

00:22:36,800 --> 00:22:43,550
things too Incheon is more arbitrary I

00:22:40,490 --> 00:22:46,430
guess like sometimes you get an Indian

00:22:43,550 --> 00:22:48,770
error and you think like why is this an

00:22:46,430 --> 00:22:50,420
error like it maybe should be a warning

00:22:48,770 --> 00:22:54,140
or it should be like an informative

00:22:50,420 --> 00:22:57,710
thing and it's like I don't know it's

00:22:54,140 --> 00:23:01,130
unclear to me how the level of warning

00:22:57,710 --> 00:23:03,140
of Olympian thing is applied and like

00:23:01,130 --> 00:23:06,830
someone managed to put an error there

00:23:03,140 --> 00:23:08,780
and so now you can say okay now there

00:23:06,830 --> 00:23:11,660
was an engine error now let's put it in

00:23:08,780 --> 00:23:14,120
policy see what I'm saying it's like a

00:23:11,660 --> 00:23:17,030
loophole of introducing something in

00:23:14,120 --> 00:23:20,000
policy through first introducing it in

00:23:17,030 --> 00:23:22,970
Indian without the three developer

00:23:20,000 --> 00:23:24,710
succumbing thing yeah well I mean even

00:23:22,970 --> 00:23:26,240
if it was in Linnton we would still want

00:23:24,710 --> 00:23:29,750
to have seconds before it went into

00:23:26,240 --> 00:23:31,310
policy the the severity levels in

00:23:29,750 --> 00:23:32,780
Linnton are actually kind of an

00:23:31,310 --> 00:23:34,370
interesting topic they're a little bit

00:23:32,780 --> 00:23:36,710
more complicated than they look like

00:23:34,370 --> 00:23:40,240
under the hood Linton actually tracks

00:23:36,710 --> 00:23:42,380
internally tracks to two different

00:23:40,240 --> 00:23:46,550
variables and collapses it into a

00:23:42,380 --> 00:23:48,380
severity for you so it tracks it tracks

00:23:46,550 --> 00:23:52,160
a it tracks an internal severity which

00:23:48,380 --> 00:23:54,560
is about how how serious of a problem

00:23:52,160 --> 00:23:56,750
does Linton in the viewpoint of whoever

00:23:54,560 --> 00:23:58,390
wrote the check think that this thing

00:23:56,750 --> 00:24:00,800
that it's trying to detect actually is

00:23:58,390 --> 00:24:04,160
and it tracks the second variable which

00:24:00,800 --> 00:24:06,200
is how house yeah certainty which is how

00:24:04,160 --> 00:24:08,450
likely does Lin thean think that it's

00:24:06,200 --> 00:24:10,670
actually correct about the the thing

00:24:08,450 --> 00:24:12,710
that it's checking and so the the errors

00:24:10,670 --> 00:24:14,360
warnings info frequently the reason why

00:24:12,710 --> 00:24:16,730
something shows up as a higher one than

00:24:14,360 --> 00:24:19,220
it should is because the problem is

00:24:16,730 --> 00:24:21,230
actually real but the check is is very

00:24:19,220 --> 00:24:24,500
hard if the check is wrong and the

00:24:21,230 --> 00:24:27,260
certainty level should drop I think that

00:24:24,500 --> 00:24:29,380
the general goal for the linty and stuff

00:24:27,260 --> 00:24:34,480
is that it should reflect

00:24:29,380 --> 00:24:38,080
priorities so errors should be like at

00:24:34,480 --> 00:24:39,700
least important and and normal Indian

00:24:38,080 --> 00:24:43,990
checks should be like normal bugs and

00:24:39,700 --> 00:24:46,390
and so on the one of the the huge

00:24:43,990 --> 00:24:50,110
advantages of Lin thean though is is not

00:24:46,390 --> 00:24:51,790
even so much the doing it on individual

00:24:50,110 --> 00:24:53,320
packages and getting people to change

00:24:51,790 --> 00:24:56,590
things based on individual packages as

00:24:53,320 --> 00:24:58,330
it is that once the check gets

00:24:56,590 --> 00:25:00,040
introduced into linty and then Lin teen

00:24:58,330 --> 00:25:02,530
Debian dot org will run it on the entire

00:25:00,040 --> 00:25:04,660
archive so one of the things that would

00:25:02,530 --> 00:25:06,220
we would look at to incorporate

00:25:04,660 --> 00:25:08,890
something that Lin tiem found in the

00:25:06,220 --> 00:25:11,380
policy is how many packages actually

00:25:08,890 --> 00:25:13,630
fail this check so even if it's an error

00:25:11,380 --> 00:25:15,190
in lint Ian if if there's like five

00:25:13,630 --> 00:25:17,950
thousand packages in the archive that

00:25:15,190 --> 00:25:20,860
are firing this error it's not ready for

00:25:17,950 --> 00:25:22,480
policy or even if it's a few but the

00:25:20,860 --> 00:25:24,040
check is narrow and it's most of the

00:25:22,480 --> 00:25:26,710
packages in the area that the check is

00:25:24,040 --> 00:25:28,930
trying to check it's it's one of the big

00:25:26,710 --> 00:25:30,190
ways in which we figure out is the

00:25:28,930 --> 00:25:32,980
policy change you're going to declare a

00:25:30,190 --> 00:25:35,110
bunch of packages buggy you check lint

00:25:32,980 --> 00:25:37,030
in first and see okay so Lin thean says

00:25:35,110 --> 00:25:38,200
there's only this tail of packages that

00:25:37,030 --> 00:25:40,510
haven't been uploaded in a while

00:25:38,200 --> 00:25:42,730
probably okay at this point to just go

00:25:40,510 --> 00:25:45,880
ahead and incorporate it as long as it

00:25:42,730 --> 00:25:49,900
meets the other bar of policy beyond

00:25:45,880 --> 00:25:51,520
that the and of course the it goes both

00:25:49,900 --> 00:25:53,620
ways sometimes we incorporate stuff in

00:25:51,520 --> 00:25:55,540
the in the policy just based on policy

00:25:53,620 --> 00:25:57,160
conversation and then the it gets added

00:25:55,540 --> 00:25:59,770
to lint in some kind of a check

00:25:57,160 --> 00:26:02,920
afterwards when I was active on both

00:25:59,770 --> 00:26:04,180
projects I would try to write each time

00:26:02,920 --> 00:26:06,370
I released a new version of policy I

00:26:04,180 --> 00:26:07,870
would try to write Lin thean checks for

00:26:06,370 --> 00:26:09,250
everything new and that version of

00:26:07,870 --> 00:26:11,770
policy that one team wasn't already

00:26:09,250 --> 00:26:13,150
checking that one of those things that

00:26:11,770 --> 00:26:16,870
like that you can do when you have a

00:26:13,150 --> 00:26:19,480
more free time now but it's still a good

00:26:16,870 --> 00:26:21,640
exercise to like always run through the

00:26:19,480 --> 00:26:23,830
upgrading checklist and go okay can I

00:26:21,640 --> 00:26:26,610
write a lengthy and check for this if so

00:26:23,830 --> 00:26:29,770
like let's get that in there

00:26:26,610 --> 00:26:31,270
Lin the--and i is to me just one of the

00:26:29,770 --> 00:26:33,370
best things about debian development

00:26:31,270 --> 00:26:37,690
like having a really good winter super

00:26:33,370 --> 00:26:39,550
important and it has to also partly

00:26:37,690 --> 00:26:42,830
answer your point it has it has the

00:26:39,550 --> 00:26:44,690
override structure so policy kind of

00:26:42,830 --> 00:26:46,370
like if we have to write in exceptions

00:26:44,690 --> 00:26:47,450
we have to actually write English text

00:26:46,370 --> 00:26:50,210
in the exceptions the nice thing about

00:26:47,450 --> 00:26:51,770
linton is that if this rule doesn't

00:26:50,210 --> 00:26:53,810
apply to your package for some reason

00:26:51,770 --> 00:26:55,430
you can just add an override file that

00:26:53,810 --> 00:26:58,340
explains exactly why this rule doesn't

00:26:55,430 --> 00:27:00,710
apply to your package and now the the

00:26:58,340 --> 00:27:03,770
comment and the override file is lifted

00:27:00,710 --> 00:27:05,720
up as actual text on the linting debian

00:27:03,770 --> 00:27:07,280
org page when you look at the tags so

00:27:05,720 --> 00:27:09,800
you not only can read through and see

00:27:07,280 --> 00:27:12,410
which packages fail you can also see oh

00:27:09,800 --> 00:27:14,660
these the here's the reasons that people

00:27:12,410 --> 00:27:16,700
gave for why these packages fail and

00:27:14,660 --> 00:27:19,340
which is super valuable information for

00:27:16,700 --> 00:27:30,920
tuning Olympian check but also for like

00:27:19,340 --> 00:27:33,080
policy conversations discussion I think

00:27:30,920 --> 00:27:43,850
a lot of people are using the linking

00:27:33,080 --> 00:27:47,390
overrides I've checked in my package it

00:27:43,850 --> 00:27:50,120
will remain there but if I have ten or

00:27:47,390 --> 00:27:52,490
twenty million messages and every time

00:27:50,120 --> 00:27:54,860
that I have looked I go through them

00:27:52,490 --> 00:27:57,770
that that's a lot of my time so I I

00:27:54,860 --> 00:28:01,040
document that yes I looked at it in

00:27:57,770 --> 00:28:04,750
walnuts or whatever reason we thinks

00:28:01,040 --> 00:28:04,750
they might package it's not

00:28:05,120 --> 00:28:11,400
against the Indian was basically you

00:28:09,240 --> 00:28:13,170
actually want to have two things say yes

00:28:11,400 --> 00:28:32,610
this check is not valid for my packets

00:28:13,170 --> 00:28:34,820
and yes yeah yeah that's probably true I

00:28:32,610 --> 00:28:37,350
mean if the check is just flat-out

00:28:34,820 --> 00:28:40,620
incorrect and it's made an error on your

00:28:37,350 --> 00:28:42,330
package I mean at least one when I was

00:28:40,620 --> 00:28:44,010
active in plenty and maintenance and I

00:28:42,330 --> 00:28:45,170
think this is what the current lateen

00:28:44,010 --> 00:28:47,610
maintainer was still doing the

00:28:45,170 --> 00:28:49,740
recommendation is just file a bug in Lin

00:28:47,610 --> 00:28:52,260
thean and say like this check is just

00:28:49,740 --> 00:28:54,870
wrong please just fix it and in those

00:28:52,260 --> 00:28:56,850
cases I would advise people to not add

00:28:54,870 --> 00:29:00,780
the override just let Lin thean fix the

00:28:56,850 --> 00:29:02,190
bug and have the thing go away but if

00:29:00,780 --> 00:29:04,620
they've been open for a couple of years

00:29:02,190 --> 00:29:05,760
then people will obviously oops what you

00:29:04,620 --> 00:29:07,290
over to over eyes for the reason that

00:29:05,760 --> 00:29:09,870
you said because they don't they get

00:29:07,290 --> 00:29:12,090
tired of seeing the thing all the time I

00:29:09,870 --> 00:29:13,590
think that I mean they're I don't have a

00:29:12,090 --> 00:29:15,030
great answer for you I would say that's

00:29:13,590 --> 00:29:17,010
what the comments are for though like

00:29:15,030 --> 00:29:19,980
having a comment for the overrides is

00:29:17,010 --> 00:29:22,080
super useful I there were some talk a

00:29:19,980 --> 00:29:23,820
while back about having there be

00:29:22,080 --> 00:29:25,920
Olympian tag for having a linty and

00:29:23,820 --> 00:29:30,470
override without comments I was a little

00:29:25,920 --> 00:29:30,470
meta but but

00:29:39,980 --> 00:29:49,490
oh there's a there's a bug in the

00:29:46,669 --> 00:29:50,929
current there there's a bug in the

00:29:49,490 --> 00:29:53,990
current version of Linton that added to

00:29:50,929 --> 00:29:55,549
check for the brand new supportive way

00:29:53,990 --> 00:29:57,080
of attaching the upstream signature to

00:29:55,549 --> 00:29:59,450
the source package and it was

00:29:57,080 --> 00:30:09,500
erroneously set to air which was not the

00:29:59,450 --> 00:30:12,110
intent I think they're fixing yeah yeah

00:30:09,500 --> 00:30:13,730
another one that showed that shows up

00:30:12,110 --> 00:30:16,040
that's been even older than that one is

00:30:13,730 --> 00:30:17,840
like you didn't install the upstream

00:30:16,040 --> 00:30:19,549
change log file well there wasn't enough

00:30:17,840 --> 00:30:22,250
stream change log file for me to install

00:30:19,549 --> 00:30:28,450
I'm not going to go ask upstream to

00:30:22,250 --> 00:30:38,960
write a change log file like so yeah

00:30:28,450 --> 00:30:41,059
some of those are pedantic yeah yeah I

00:30:38,960 --> 00:30:42,860
mean III well I mean I'm with you I

00:30:41,059 --> 00:30:45,169
enable all pedantic warnings on all of

00:30:42,860 --> 00:30:47,150
my packages i-s I just mostly ignore

00:30:45,169 --> 00:30:50,630
them I I feel like adding overrides for

00:30:47,150 --> 00:30:52,340
pedantic tags is probably fine I mean

00:30:50,630 --> 00:30:54,710
the whole point of pedantic tags was

00:30:52,340 --> 00:30:56,090
that like this is probably not stuff

00:30:54,710 --> 00:30:59,630
that's ever gonna be a requirement it's

00:30:56,090 --> 00:31:00,830
just a best practices hint and you

00:30:59,630 --> 00:31:02,540
should feel free to ignore it completely

00:31:00,830 --> 00:31:05,510
which is why we're not even going to

00:31:02,540 --> 00:31:07,570
show it to you by default I I agree

00:31:05,510 --> 00:31:10,820
though that it would be nice to have a

00:31:07,570 --> 00:31:13,610
list of like here's the low level stuff

00:31:10,820 --> 00:31:15,140
that really I just for whatever reason

00:31:13,610 --> 00:31:16,880
structurally this package is never gonna

00:31:15,140 --> 00:31:18,620
care about these things like the

00:31:16,880 --> 00:31:21,620
upstream just doesn't have a change log

00:31:18,620 --> 00:31:23,690
and ceased development in 2012 and it's

00:31:21,620 --> 00:31:26,179
not going to add one now you know and

00:31:23,690 --> 00:31:27,950
there's epstein upstream change logs are

00:31:26,179 --> 00:31:30,700
dumb in the age of version control

00:31:27,950 --> 00:31:32,809
moving the light position also that

00:31:30,700 --> 00:31:35,450
there's there's a there's an ongoing

00:31:32,809 --> 00:31:36,980
discussion right now on the GFC

00:31:35,450 --> 00:31:39,320
maintenance list about whether they're

00:31:36,980 --> 00:31:42,140
going to continue to keep the canoe

00:31:39,320 --> 00:31:44,210
change log in the source package and

00:31:42,140 --> 00:31:46,160
what of one of the problems with

00:31:44,210 --> 00:31:49,309
continuing to keep it there is that the

00:31:46,160 --> 00:31:52,160
the change log referred GFC is so large

00:31:49,309 --> 00:31:53,990
that it is a substantial portion

00:31:52,160 --> 00:31:56,950
the repository when you are sinking

00:31:53,990 --> 00:32:00,740
around is just the change log file which

00:31:56,950 --> 00:32:05,360
is completely 100% duplicated in the get

00:32:00,740 --> 00:32:08,210
commit history but but because of the

00:32:05,360 --> 00:32:09,890
way that get works whenever they rotate

00:32:08,210 --> 00:32:12,230
the change log file it creates a new

00:32:09,890 --> 00:32:13,610
blob and that has to get our synced

00:32:12,230 --> 00:32:16,610
around everywhere when you are sick the

00:32:13,610 --> 00:32:20,510
repository around that I actually like I

00:32:16,610 --> 00:32:22,880
agree I think that there's a there's an

00:32:20,510 --> 00:32:24,560
open policy bug about the difference

00:32:22,880 --> 00:32:27,410
between a change log and a news file

00:32:24,560 --> 00:32:30,290
that has been around for forever

00:32:27,410 --> 00:32:31,910
I personally of the opinion that the

00:32:30,290 --> 00:32:33,800
only thing that's actually useful to put

00:32:31,910 --> 00:32:35,510
in user share doc is the news file and

00:32:33,800 --> 00:32:37,760
that the change log file is not

00:32:35,510 --> 00:32:41,030
sufficiently useful to be distributing

00:32:37,760 --> 00:32:43,280
in user share doc if if it's the old

00:32:41,030 --> 00:32:44,930
style good new change log that literally

00:32:43,280 --> 00:32:48,740
lists every single change to the source

00:32:44,930 --> 00:32:52,190
package but yeah we should sort that out

00:32:48,740 --> 00:32:53,570
at some point so just from personal

00:32:52,190 --> 00:32:55,940
experience I disagree completely with

00:32:53,570 --> 00:32:57,680
that okay because the first place where

00:32:55,940 --> 00:32:59,690
I look when I have an issue with new

00:32:57,680 --> 00:33:02,090
actual release is the change look file I

00:32:59,690 --> 00:33:03,950
don't want to visit some website and

00:33:02,090 --> 00:33:06,590
maybe I'm offline at the moment so it's

00:33:03,950 --> 00:33:08,840
really really helpful to have you right

00:33:06,590 --> 00:33:10,730
so so the distinction I'm drawing is

00:33:08,840 --> 00:33:12,560
between the news file which should

00:33:10,730 --> 00:33:18,830
actually list the things you would run

00:33:12,560 --> 00:33:23,360
into okay really helpful okay would you

00:33:18,830 --> 00:33:25,670
if so if the upstream version actual

00:33:23,360 --> 00:33:27,620
version control repository were readily

00:33:25,670 --> 00:33:28,640
available to you through like Deb

00:33:27,620 --> 00:33:30,590
checkout or something

00:33:28,640 --> 00:33:32,480
would that be a reasonable substitute

00:33:30,590 --> 00:33:34,880
where you can actually like do get blog

00:33:32,480 --> 00:33:37,430
and history and like see the whole thing

00:33:34,880 --> 00:33:41,060
well sometimes I work on a train or um

00:33:37,430 --> 00:33:43,370
otherwise offline and and then I have

00:33:41,060 --> 00:33:46,670
the lack of information immediately okay

00:33:43,370 --> 00:33:48,680
so so and with my apps from head of for

00:33:46,670 --> 00:33:50,750
different projects what I do when

00:33:48,680 --> 00:33:52,940
generating turbos is always generated

00:33:50,750 --> 00:33:55,870
log file a change log file from the get

00:33:52,940 --> 00:33:59,690
history and put it in the tar wall

00:33:55,870 --> 00:34:03,130
because if people then find my table or

00:33:59,690 --> 00:34:05,470
use that for follow something else

00:34:03,130 --> 00:34:07,360
and then they see an issue they also

00:34:05,470 --> 00:34:09,639
want to compare what are the actual

00:34:07,360 --> 00:34:14,399
changes that happen between what table 1

00:34:09,639 --> 00:34:17,169
and table 2 so there is there is I think

00:34:14,399 --> 00:34:20,020
a life on the planet that does not

00:34:17,169 --> 00:34:22,149
always look at the VCS so it's about

00:34:20,020 --> 00:34:25,060
documentation also when I when it comes

00:34:22,149 --> 00:34:26,679
to finding old software where the VCS

00:34:25,060 --> 00:34:28,630
reporters have gone for like 10 years

00:34:26,679 --> 00:34:31,419
I'm so glad that they have actually

00:34:28,630 --> 00:34:32,830
changed look in the files so doesn't

00:34:31,419 --> 00:34:37,389
mean that we have to ship it in though

00:34:32,830 --> 00:34:38,550
in Debian yeah yeah no it's it's a it is

00:34:37,389 --> 00:34:40,810
actually one of the things I like about

00:34:38,550 --> 00:34:42,429
policy work is that I'll have an opinion

00:34:40,810 --> 00:34:44,080
but then other people will have disagree

00:34:42,429 --> 00:34:47,770
with me and have interesting reasons and

00:34:44,080 --> 00:34:49,510
it's like I learn a lot the the problem

00:34:47,770 --> 00:34:50,860
the main problem that we run into is

00:34:49,510 --> 00:34:54,120
mostly is that these files tend to get

00:34:50,860 --> 00:34:57,250
really large so I used to ship the full

00:34:54,120 --> 00:34:59,020
changelog for MIT Kerberos because

00:34:57,250 --> 00:35:01,060
upstream did the same thing they send

00:34:59,020 --> 00:35:02,590
ran get logged and dumped it into a file

00:35:01,060 --> 00:35:04,960
it's part of the release it was

00:35:02,590 --> 00:35:07,960
subversion or something with time and it

00:35:04,960 --> 00:35:11,140
was 90% of the size of the entire

00:35:07,960 --> 00:35:13,600
kerbside dock package was it just that

00:35:11,140 --> 00:35:17,560
file that and it was because it was like

00:35:13,600 --> 00:35:19,600
like 20 megabytes or something so the I

00:35:17,560 --> 00:35:21,670
guess the question I would have is like

00:35:19,600 --> 00:35:23,620
can would you truncate it at some point

00:35:21,670 --> 00:35:24,940
like would you only keep the more recent

00:35:23,620 --> 00:35:28,930
releases for the purpose you're talking

00:35:24,940 --> 00:35:30,940
about so what comes to my mind is now we

00:35:28,930 --> 00:35:33,190
nowadays split up source packages into

00:35:30,940 --> 00:35:35,950
sever buying it binary packages and we

00:35:33,190 --> 00:35:38,560
actually WK the change look right yeah

00:35:35,950 --> 00:35:40,870
it's frequently you can you can avoid

00:35:38,560 --> 00:35:42,460
doing that but in order to do that you

00:35:40,870 --> 00:35:44,350
have to sim like some stuff around and

00:35:42,460 --> 00:35:46,540
the sim linking is a little obscure so

00:35:44,350 --> 00:35:49,750
oftentimes people just copy it because

00:35:46,540 --> 00:35:51,670
it's easier yeah so so so one thing

00:35:49,750 --> 00:35:54,130
actually could be a in addition to the

00:35:51,670 --> 00:35:56,140
policy that actually you have one main

00:35:54,130 --> 00:35:59,380
binary package which is a common package

00:35:56,140 --> 00:36:00,850
a notch or package and all other package

00:35:59,380 --> 00:36:02,800
have to assuming so that you don't have

00:36:00,850 --> 00:36:04,529
the cameras lock file that you were

00:36:02,800 --> 00:36:06,059
talking about or whatever

00:36:04,529 --> 00:36:07,829
like five times on the system because

00:36:06,059 --> 00:36:09,119
all the sub binary packages are

00:36:07,829 --> 00:36:15,179
installing the system so that would

00:36:09,119 --> 00:36:19,289
maybe reduce storage yeah so truncating

00:36:15,179 --> 00:36:23,429
yeah but it's it's the history it's the

00:36:19,289 --> 00:36:25,199
legacy so it's it's a question if it

00:36:23,429 --> 00:36:27,569
needs to be in Debian but but like the

00:36:25,199 --> 00:36:30,269
last two years are also often important

00:36:27,569 --> 00:36:32,279
for me when I look at stuff yeah I mean

00:36:30,269 --> 00:36:34,349
all the things that Bret I'll definitely

00:36:32,279 --> 00:36:36,929
make a pitch here for that I think that

00:36:34,349 --> 00:36:38,549
that version control repository is

00:36:36,929 --> 00:36:40,140
actually a good place to please

00:36:38,549 --> 00:36:42,299
additionally star that and I get your

00:36:40,140 --> 00:36:47,009
point about the offline access but like

00:36:42,299 --> 00:36:48,269
I'll pitch D get as a way of being able

00:36:47,009 --> 00:36:49,559
to make sure that like there is an

00:36:48,269 --> 00:36:50,880
actual gate repository that has the

00:36:49,559 --> 00:36:53,009
history of the package checked in that

00:36:50,880 --> 00:36:54,660
you can do reasonable get operations on

00:36:53,009 --> 00:36:57,509
and that you can clone if you need to

00:36:54,660 --> 00:36:59,459
get at it and I still from a long time

00:36:57,509 --> 00:37:01,709
back I've started always basing the

00:36:59,459 --> 00:37:03,539
Debian package repository on the

00:37:01,709 --> 00:37:05,309
upstream actual git repository so that

00:37:03,539 --> 00:37:07,949
you have all the background history and

00:37:05,309 --> 00:37:09,599
can do that stuff just two data points

00:37:07,949 --> 00:37:11,309
about the changelog thing I think the

00:37:09,599 --> 00:37:13,380
sim linking is an option to th in

00:37:11,309 --> 00:37:15,539
strange logs you can add to the rules

00:37:13,380 --> 00:37:17,429
file and the other one is I think you

00:37:15,539 --> 00:37:20,279
want to actually truncate the Debian

00:37:17,429 --> 00:37:23,099
change log just the last entry in their

00:37:20,279 --> 00:37:26,099
binary packages for some years now so

00:37:23,099 --> 00:37:27,479
it's actually interesting it took it

00:37:26,099 --> 00:37:29,670
kind of goes to your point there where

00:37:27,479 --> 00:37:32,249
she's like I I'm not convinced of the

00:37:29,670 --> 00:37:33,689
utility of the upstream change log but

00:37:32,249 --> 00:37:46,049
truncating the debian change log

00:37:33,689 --> 00:37:48,650
actually really bugs me if making the

00:37:46,049 --> 00:37:51,059
siblings is complicated I mean you said

00:37:48,650 --> 00:37:54,420
you made it look like it was some kind

00:37:51,059 --> 00:37:56,939
of dark magic maybe it could be made

00:37:54,420 --> 00:37:59,309
simpler or better documented somewhere

00:37:56,939 --> 00:38:01,410
so that people would tend to do that

00:37:59,309 --> 00:38:04,529
like you said just documenting things

00:38:01,410 --> 00:38:06,599
makes people follow it so maybe if that

00:38:04,529 --> 00:38:10,769
point would be better documented that

00:38:06,599 --> 00:38:12,569
would made use copies this exists is d-h

00:38:10,769 --> 00:38:14,859
link doc just does that

00:38:12,569 --> 00:38:17,739
yeah it default

00:38:14,859 --> 00:38:20,349
it's it's it's not people's favorite th

00:38:17,739 --> 00:38:22,299
tool because it it seems to cause bugs

00:38:20,349 --> 00:38:24,249
so I think that's why I think that's

00:38:22,299 --> 00:38:26,859
what Russ was alluding to but this does

00:38:24,249 --> 00:38:28,749
exist there's a tool also it's new it's

00:38:26,859 --> 00:38:30,999
relatively new and I had forgotten that

00:38:28,749 --> 00:38:35,609
has it gotten added and you have to be

00:38:30,999 --> 00:38:35,609
careful about the person constraints

00:38:39,209 --> 00:38:46,569
it's trading disk space for RC bugs

00:38:42,839 --> 00:38:49,509
yeah in my experience the the the root

00:38:46,569 --> 00:38:52,299
problem the reason why this is tricky is

00:38:49,509 --> 00:38:54,130
actually kind of interesting the the the

00:38:52,299 --> 00:38:56,920
problem is when you've got one source

00:38:54,130 --> 00:38:58,719
package that generates some binary

00:38:56,920 --> 00:39:02,859
packages and then some architecture

00:38:58,719 --> 00:39:07,689
independent packages the there are if

00:39:02,859 --> 00:39:09,989
you end up in a situation where the you

00:39:07,689 --> 00:39:12,670
have a binary NMU

00:39:09,989 --> 00:39:14,259
the version number of the binary

00:39:12,670 --> 00:39:15,459
packages has ends up being different

00:39:14,259 --> 00:39:19,089
than the version number of the source

00:39:15,459 --> 00:39:21,009
packages but if you want to symlink the

00:39:19,089 --> 00:39:23,679
entire user sharedoc directory that

00:39:21,009 --> 00:39:25,509
includes the copyright file which has to

00:39:23,679 --> 00:39:27,759
correspond to exactly the same version

00:39:25,509 --> 00:39:31,299
of the package that the copyright file

00:39:27,759 --> 00:39:33,339
is for so you end up with this problem

00:39:31,299 --> 00:39:35,109
where you it's hard to write the version

00:39:33,339 --> 00:39:36,670
constraint because the packages that

00:39:35,109 --> 00:39:38,529
doesn't contain the copyright file has

00:39:36,670 --> 00:39:39,699
to depend on the package that does so

00:39:38,529 --> 00:39:41,229
that when you install the package you'll

00:39:39,699 --> 00:39:43,630
have the copyright file on your system

00:39:41,229 --> 00:39:45,699
and it can be hard to write that version

00:39:43,630 --> 00:39:48,459
conversion constraint in the dependency

00:39:45,699 --> 00:39:50,499
in the presence of been nm use across

00:39:48,459 --> 00:39:51,910
when you've got binary packages and

00:39:50,499 --> 00:39:54,309
architecture independent packages

00:39:51,910 --> 00:39:56,259
there's probably some way to solve this

00:39:54,309 --> 00:39:58,449
I think the bun to had some way of

00:39:56,259 --> 00:40:00,099
solving this that just didn't they put

00:39:58,449 --> 00:40:01,420
the separate copyright file on every

00:40:00,099 --> 00:40:03,279
file and then sim linked to every other

00:40:01,420 --> 00:40:04,809
file in the directory which is kind of

00:40:03,279 --> 00:40:06,969
the brute force a way to do it to fix

00:40:04,809 --> 00:40:09,069
that problem it feels like there's some

00:40:06,969 --> 00:40:11,489
strategy here that we could make this

00:40:09,069 --> 00:40:11,489
better

00:40:19,140 --> 00:40:24,720
so now you can upload some source code

00:40:22,769 --> 00:40:26,880
so at some point approaching binaries

00:40:24,720 --> 00:40:29,849
will just be not done anymore

00:40:26,880 --> 00:40:31,319
I definitely hope that that's the case

00:40:29,849 --> 00:40:32,819
but that doesn't it unfortunately

00:40:31,319 --> 00:40:34,410
doesn't get around the bin and a new

00:40:32,819 --> 00:40:37,079
problem because what happens there is

00:40:34,410 --> 00:40:39,420
the the packages rebuilt on only one

00:40:37,079 --> 00:40:41,130
architecture sometimes because that one

00:40:39,420 --> 00:40:43,140
architecture needed newer libraries or

00:40:41,130 --> 00:40:45,450
something and then that one version will

00:40:43,140 --> 00:40:48,029
be different than the other versions it

00:40:45,450 --> 00:40:50,279
it turns out that that versioning is

00:40:48,029 --> 00:40:52,019
actually one of the harder problems in

00:40:50,279 --> 00:40:54,859
Debian and it's considerably harder than

00:40:52,019 --> 00:41:03,410
that it appears like at first glance I

00:40:54,859 --> 00:41:06,329
noticed that we're talking about so I

00:41:03,410 --> 00:41:07,440
guess that's a good thing that one of

00:41:06,329 --> 00:41:10,049
the other things we were gonna we were

00:41:07,440 --> 00:41:11,640
gonna ask about actually was so we'd

00:41:10,049 --> 00:41:14,609
love to have more people contribute to

00:41:11,640 --> 00:41:17,190
Debian policy what can we do to make

00:41:14,609 --> 00:41:18,660
that easier because here's a bunch of

00:41:17,190 --> 00:41:29,999
interested people who know a lot about

00:41:18,660 --> 00:41:32,880
Debian rst will probably be weekly or

00:41:29,999 --> 00:41:37,950
monthly reports on the planet I think

00:41:32,880 --> 00:41:40,499
the what producible team has a lot of

00:41:37,950 --> 00:41:43,079
new contributors all the time this last

00:41:40,499 --> 00:41:45,420
year and I think their weekly we posts

00:41:43,079 --> 00:41:49,489
will help so I think there are like a

00:41:45,420 --> 00:41:52,680
requirement for their sponsors but they

00:41:49,489 --> 00:41:54,960
actually really as a team benefit from

00:41:52,680 --> 00:41:57,329
doing that because kind it gives a

00:41:54,960 --> 00:41:59,309
window to the outside I mean I'm not a

00:41:57,329 --> 00:42:02,239
developer and just weeding the whip out

00:41:59,309 --> 00:42:05,130
sometimes I want to help so it's kind of

00:42:02,239 --> 00:42:08,249
it helps having an idea what people are

00:42:05,130 --> 00:42:10,680
doing if you just I don't know like made

00:42:08,249 --> 00:42:13,470
the list of the bugs you close those are

00:42:10,680 --> 00:42:18,319
lines of the policy you train tour it

00:42:13,470 --> 00:42:20,999
doesn't require a big writing the

00:42:18,319 --> 00:42:24,170
writing just these things the perks you

00:42:20,999 --> 00:42:28,619
serve things are last week or month so

00:42:24,170 --> 00:42:30,239
it might just give people but at least

00:42:28,619 --> 00:42:33,060
gets them interested in policy and know

00:42:30,239 --> 00:42:36,120
that it exists

00:42:33,060 --> 00:42:38,400
we every time we release policy we put

00:42:36,120 --> 00:42:40,650
the upgrading checklist on Debian

00:42:38,400 --> 00:42:43,770
developments that should probably go to

00:42:40,650 --> 00:42:48,660
planet as well yeah maybe I'll just stop

00:42:43,770 --> 00:42:51,450
posting on my blog yeah what sort of

00:42:48,660 --> 00:42:53,220
excite and it's embarrassing now because

00:42:51,450 --> 00:42:57,030
I tend to forget checking Devon Devon

00:42:53,220 --> 00:43:00,030
Devon ounce but the you know like the

00:42:57,030 --> 00:43:01,230
the dips the what you said for for

00:43:00,030 --> 00:43:03,810
upgrading checklist

00:43:01,230 --> 00:43:05,460
you know the upgrade yeah so so that

00:43:03,810 --> 00:43:09,510
checklist should really go to the planet

00:43:05,460 --> 00:43:11,070
because that's that's okay yeah half of

00:43:09,510 --> 00:43:12,390
this is posting that's a planet and the

00:43:11,070 --> 00:43:15,480
other harvest I suppose trying to

00:43:12,390 --> 00:43:18,750
release more often um I wouldn't want to

00:43:15,480 --> 00:43:20,280
release policy on a schedule so that we

00:43:18,750 --> 00:43:23,070
could post a planet on a schedule like

00:43:20,280 --> 00:43:24,300
reproducible builds do but if we were

00:43:23,070 --> 00:43:27,030
releasing often maybe that won't be an

00:43:24,300 --> 00:43:29,100
issue then thank thanks for that I think

00:43:27,030 --> 00:43:33,540
one thing that might make people

00:43:29,100 --> 00:43:36,780
contribute more is having vivid policy

00:43:33,540 --> 00:43:39,150
process and it was well mostly dead a

00:43:36,780 --> 00:43:40,890
year ago and now you're revived it and I

00:43:39,150 --> 00:43:43,290
think most of the work to actually

00:43:40,890 --> 00:43:45,450
motivate people is was just done in the

00:43:43,290 --> 00:43:47,010
last month that we actually have a

00:43:45,450 --> 00:43:48,920
process that works and we see updates

00:43:47,010 --> 00:43:51,860
and it's it's super cool to actually see

00:43:48,920 --> 00:43:59,640
progress on the policy front and I think

00:43:51,860 --> 00:44:03,300
thank you very much for that Sean was a

00:43:59,640 --> 00:44:08,190
big chunk of that we've plenty of people

00:44:03,300 --> 00:44:10,200
backing me up so that the fact that

00:44:08,190 --> 00:44:12,810
they're probably 100 bucks

00:44:10,200 --> 00:44:15,120
rather than 250 they're all old and that

00:44:12,810 --> 00:44:18,390
you're first have to rebase is

00:44:15,120 --> 00:44:21,120
discouraging right we are intending to

00:44:18,390 --> 00:44:23,460
mass close bugs that don't seem to be

00:44:21,120 --> 00:44:24,840
going anywhere and we personally don't

00:44:23,460 --> 00:44:27,330
think are important but you know they

00:44:24,840 --> 00:44:33,870
can be reopened um so to exactly that

00:44:27,330 --> 00:44:35,160
end the so going also go back to your

00:44:33,870 --> 00:44:37,620
point about more visibility of where

00:44:35,160 --> 00:44:39,420
things are at I at one point had this

00:44:37,620 --> 00:44:42,210
grand plan that I was going to send out

00:44:39,420 --> 00:44:43,410
regular status emails because I the time

00:44:42,210 --> 00:44:45,010
I was thinking more in terms of emailed

00:44:43,410 --> 00:44:47,380
in terms of plant Debian

00:44:45,010 --> 00:44:49,930
and particularly here's the list of of

00:44:47,380 --> 00:44:51,070
bugs that where we arrived at some

00:44:49,930 --> 00:44:53,110
conclusion that no one had written

00:44:51,070 --> 00:44:54,910
language and where we had some language

00:44:53,110 --> 00:44:56,920
but they hadn't been seconded and I even

00:44:54,910 --> 00:44:59,230
wrote a Perl script to generate those

00:44:56,920 --> 00:45:01,450
lists that's sitting in a Debian policy

00:44:59,230 --> 00:45:03,070
repository and I think I ran it once and

00:45:01,450 --> 00:45:07,150
sent out one email and then that was

00:45:03,070 --> 00:45:08,470
that was when that stopped but like we

00:45:07,150 --> 00:45:11,620
could probably do something along those

00:45:08,470 --> 00:45:13,420
lines we so all that policy process I

00:45:11,620 --> 00:45:15,520
talked about at the start that all those

00:45:13,420 --> 00:45:17,740
steps in the policy process are

00:45:15,520 --> 00:45:19,860
represented by user tags in the BTS so

00:45:17,740 --> 00:45:22,300
when you go to the default Debian policy

00:45:19,860 --> 00:45:25,210
BTS page it has everything all kind of

00:45:22,300 --> 00:45:26,770
laid out by what phase it's in so we do

00:45:25,210 --> 00:45:30,430
track that information and we could just

00:45:26,770 --> 00:45:32,530
publish it make it more available right

00:45:30,430 --> 00:45:35,230
we're also planning to simplify the

00:45:32,530 --> 00:45:37,690
process slightly by collapsing three of

00:45:35,230 --> 00:45:42,610
the stages into one so that'll probably

00:45:37,690 --> 00:45:44,970
help with that the we in terms of like

00:45:42,610 --> 00:45:46,930
what the biggest thing is like I

00:45:44,970 --> 00:45:49,270
personally I think the biggest open

00:45:46,930 --> 00:45:49,870
issues with policy are not areas of

00:45:49,270 --> 00:45:52,000
disagreement

00:45:49,870 --> 00:45:54,490
it's areas of where we just have things

00:45:52,000 --> 00:45:56,980
that clearly need to be documented that

00:45:54,490 --> 00:45:58,930
haven't been documented like if you go

00:45:56,980 --> 00:46:00,310
through the Debian policy bug list as we

00:45:58,930 --> 00:46:02,320
were doing earlier today

00:46:00,310 --> 00:46:06,400
like it's just multi arch multi arch

00:46:02,320 --> 00:46:08,770
multi are yeah I think triggers is

00:46:06,400 --> 00:46:10,420
mostly in like one or two bugs Multi

00:46:08,770 --> 00:46:15,190
Arts kind of spread itself over four or

00:46:10,420 --> 00:46:17,080
five or ten the init system stuff like

00:46:15,190 --> 00:46:19,480
the entire how do you deal with the new

00:46:17,080 --> 00:46:21,510
init system stuff we need to have some

00:46:19,480 --> 00:46:25,150
kind of a policy around when do you

00:46:21,510 --> 00:46:26,520
handle system D timer units Debian has a

00:46:25,150 --> 00:46:29,620
commitment to continuing to work with

00:46:26,520 --> 00:46:31,240
init systems that are not system D which

00:46:29,620 --> 00:46:34,150
me and that's the exactly the kind of

00:46:31,240 --> 00:46:35,530
problem that policy solves so the policy

00:46:34,150 --> 00:46:37,330
is really important I think in

00:46:35,530 --> 00:46:40,810
particularly for the kinds of things

00:46:37,330 --> 00:46:43,900
where the maintainer may not ever use

00:46:40,810 --> 00:46:46,510
some thing that Debian as a whole is

00:46:43,900 --> 00:46:49,000
committed to supporting if you don't and

00:46:46,510 --> 00:46:51,190
so they're gonna test their stuff and

00:46:49,000 --> 00:46:52,450
the fact that the thing runs

00:46:51,190 --> 00:46:54,790
periodically is something they're going

00:46:52,450 --> 00:46:56,860
to notice that that breaks but the fact

00:46:54,790 --> 00:46:58,340
that it runs periodically if you're

00:46:56,860 --> 00:47:00,500
running system D but not if you're

00:46:58,340 --> 00:47:01,820
Veon that they may never notice so

00:47:00,500 --> 00:47:03,260
that's where it's important to write

00:47:01,820 --> 00:47:04,700
that down and make sure that we've got

00:47:03,260 --> 00:47:06,740
checks for that

00:47:04,700 --> 00:47:08,000
so in that case like if you want to use

00:47:06,740 --> 00:47:09,620
a timer unit because there's some

00:47:08,000 --> 00:47:11,360
features of system designer units and

00:47:09,620 --> 00:47:13,040
there are some really nice features of

00:47:11,360 --> 00:47:15,620
system D timer units you can set set

00:47:13,040 --> 00:47:16,970
comp filters and namespaces and do some

00:47:15,620 --> 00:47:19,310
really nice security features with them

00:47:16,970 --> 00:47:20,900
you do have to also figure out how

00:47:19,310 --> 00:47:23,570
that's going to run under traditional

00:47:20,900 --> 00:47:26,240
cron when system D is not in the picture

00:47:23,570 --> 00:47:28,280
and that's something that the project

00:47:26,240 --> 00:47:29,690
can figure out how to do once right some

00:47:28,280 --> 00:47:31,100
helper scripts around document and

00:47:29,690 --> 00:47:33,290
policy and then you just do this thing

00:47:31,100 --> 00:47:35,720
when you install a timer unit and then

00:47:33,290 --> 00:47:37,370
everything works correctly so that's

00:47:35,720 --> 00:47:40,160
similar to all the work that went into

00:47:37,370 --> 00:47:42,470
in its system helpers for being able to

00:47:40,160 --> 00:47:43,850
maintain a service file and in its

00:47:42,470 --> 00:47:46,880
script and have them shadow together

00:47:43,850 --> 00:47:49,070
properly and when you disable the system

00:47:46,880 --> 00:47:50,390
the unit file it also disables the init

00:47:49,070 --> 00:47:52,430
script so that when you rebuild your

00:47:50,390 --> 00:47:54,530
system in the system in the SIS via net

00:47:52,430 --> 00:47:56,680
it's still disabled so that that's

00:47:54,530 --> 00:47:58,970
that's the kind of tricky little

00:47:56,680 --> 00:48:01,070
irritating problem that policy is there

00:47:58,970 --> 00:48:02,420
for and that then we write helper

00:48:01,070 --> 00:48:09,650
scripts that implement the policy and

00:48:02,420 --> 00:48:11,510
then that stuff just works anything else

00:48:09,650 --> 00:48:14,930
that you all think of that we can that

00:48:11,510 --> 00:48:18,070
we can be doing better that that you

00:48:14,930 --> 00:48:18,070
think policy should be tackling

00:48:20,890 --> 00:48:26,750
currently interact with the developers

00:48:23,270 --> 00:48:29,570
reference developers well developers

00:48:26,750 --> 00:48:32,930
reference isn't normative is not

00:48:29,570 --> 00:48:38,210
normative so it doesn't tell you what to

00:48:32,930 --> 00:48:41,410
do it just yeah I mean is it developers

00:48:38,210 --> 00:48:44,840
reference is more opinionated I guess

00:48:41,410 --> 00:48:46,130
it's not you can't really file a bug for

00:48:44,840 --> 00:48:48,440
not following the developers reference

00:48:46,130 --> 00:48:50,180
the other thing is that the the policy

00:48:48,440 --> 00:48:52,160
is about the contents of war we produce

00:48:50,180 --> 00:48:58,010
in developers references more about how

00:48:52,160 --> 00:48:59,810
we do it we sure a mailing list though

00:48:58,010 --> 00:49:02,150
like so we see each other's blog traffic

00:48:59,810 --> 00:49:04,400
be and that was to aid and like moving

00:49:02,150 --> 00:49:05,690
stuff back and forth policy gets quite a

00:49:04,400 --> 00:49:07,100
bit more traffic than developers

00:49:05,690 --> 00:49:08,810
reference does in terms of book traffic

00:49:07,100 --> 00:49:11,290
right now I think there was a question

00:49:08,810 --> 00:49:11,290
in the back

00:49:12,200 --> 00:49:19,079
one thing that one thing that may help

00:49:15,470 --> 00:49:22,349
related to policy is scripting their

00:49:19,079 --> 00:49:25,680
checklist so we could run a script on a

00:49:22,349 --> 00:49:28,619
source pack package and tell it's

00:49:25,680 --> 00:49:32,220
compliant to the policy according to the

00:49:28,619 --> 00:49:39,900
new checklist it's kind of a lynchin

00:49:32,220 --> 00:49:43,109
does yeah check is missing and has to be

00:49:39,900 --> 00:49:44,670
checked manually and if they were

00:49:43,109 --> 00:49:50,700
remarking that okay it's covered by

00:49:44,670 --> 00:49:51,089
LinkedIn so you check everything when

00:49:50,700 --> 00:49:54,779
you ollie

00:49:51,089 --> 00:49:59,970
so annotating the list wow that's a

00:49:54,779 --> 00:50:02,339
really good idea yeah yeah that actually

00:49:59,970 --> 00:50:03,839
is a really good idea we I mean we we

00:50:02,339 --> 00:50:05,759
could easily do that even just manually

00:50:03,839 --> 00:50:07,470
but I suspect that it would be possible

00:50:05,759 --> 00:50:09,480
for Lynn thean to carry metadata in the

00:50:07,470 --> 00:50:10,980
check that says hey I cover this area of

00:50:09,480 --> 00:50:14,880
the policy and then we could even

00:50:10,980 --> 00:50:17,490
automate that as part of it yeah so that

00:50:14,880 --> 00:50:20,130
there is something in the checklist that

00:50:17,490 --> 00:50:20,609
is not checked bellingham there are a

00:50:20,130 --> 00:50:22,289
round

00:50:20,609 --> 00:50:23,819
maybe two there there are a fair number

00:50:22,289 --> 00:50:25,049
of things in the checklist that aren't

00:50:23,819 --> 00:50:27,720
checked by linty and usually there are

00:50:25,049 --> 00:50:29,460
things that are really there I mean

00:50:27,720 --> 00:50:31,049
policy has a lot of like very specific

00:50:29,460 --> 00:50:32,640
technical things of like if you want a

00:50:31,049 --> 00:50:34,170
cron job to run daily then you install

00:50:32,640 --> 00:50:36,569
it and that's a cron daily and you know

00:50:34,170 --> 00:50:39,210
that kind of stuff you can check there

00:50:36,569 --> 00:50:41,369
are a fair number of things in in policy

00:50:39,210 --> 00:50:42,779
I don't have a good example it's coming

00:50:41,369 --> 00:50:46,559
immediately to mind but they're they're

00:50:42,779 --> 00:50:48,900
considerably more subtle Oh a good

00:50:46,559 --> 00:50:54,480
example would be that we added a

00:50:48,900 --> 00:50:56,700
requirement that if a shell proviso was

00:50:54,480 --> 00:50:59,339
a candidate for being slash bin slash SH

00:50:56,700 --> 00:51:02,670
on add any in system it had to support

00:50:59,339 --> 00:51:04,710
shell functions yeah but a particularly

00:51:02,670 --> 00:51:08,069
limited subset of shell functions that

00:51:04,710 --> 00:51:09,420
are specified in POSIX I like I don't

00:51:08,069 --> 00:51:10,890
know how you would write Olympian check

00:51:09,420 --> 00:51:14,009
for that I mean I guess you could kind

00:51:10,890 --> 00:51:15,599
of write a test suite for that that

00:51:14,009 --> 00:51:17,640
implementation of functions and then if

00:51:15,599 --> 00:51:19,470
you were been SH then try to run it

00:51:17,640 --> 00:51:20,300
there but there's stuff like that this

00:51:19,470 --> 00:51:22,280
kind of

00:51:20,300 --> 00:51:23,540
a little difficult to make sure it's

00:51:22,280 --> 00:51:27,560
checking there's also some kind of

00:51:23,540 --> 00:51:30,410
general advice stuff like who changed

00:51:27,560 --> 00:51:32,240
from a while back clarified exactly

00:51:30,410 --> 00:51:35,300
whose name and email address you should

00:51:32,240 --> 00:51:37,310
put in the the the end of the change log

00:51:35,300 --> 00:51:40,760
entry when you upload a package it's not

00:51:37,310 --> 00:51:42,440
really possible to check that and 1tn so

00:51:40,760 --> 00:51:46,040
so for the checklist it would be cool to

00:51:42,440 --> 00:51:48,650
to say okay we have like 10 items on the

00:51:46,040 --> 00:51:51,230
checklist and I don't 1 2 & 3 are

00:51:48,650 --> 00:51:53,180
covered and some are not covered so that

00:51:51,230 --> 00:51:55,610
you actually know what to check manually

00:51:53,180 --> 00:51:57,230
or what you just can playback and the

00:51:55,610 --> 00:52:02,000
latest engine version from backports and

00:51:57,230 --> 00:52:06,890
that's fine yeah instead of right it

00:52:02,000 --> 00:52:08,330
might be worth it might be like in

00:52:06,890 --> 00:52:11,360
square brackets the linty and check name

00:52:08,330 --> 00:52:14,900
that matches that then maybe obvious the

00:52:11,360 --> 00:52:18,080
ones that don't have it yeah yeah and

00:52:14,900 --> 00:52:20,990
also if you need to build a package to

00:52:18,080 --> 00:52:25,490
check the thing you are interested in I

00:52:20,990 --> 00:52:28,970
mean you if policy imposes restrictions

00:52:25,490 --> 00:52:32,480
on on binaries you can't tell it from

00:52:28,970 --> 00:52:37,790
source so you have to check the changes

00:52:32,480 --> 00:52:39,560
files oh you're saying you'd like the

00:52:37,790 --> 00:52:41,150
checklist to be annotated as to whether

00:52:39,560 --> 00:52:44,660
or not the package has to be built to

00:52:41,150 --> 00:52:48,590
determine maybe but olympian tag it's

00:52:44,660 --> 00:52:52,100
enough because yeah if you want to omit

00:52:48,590 --> 00:52:54,890
that tag from the source right and stuff

00:52:52,100 --> 00:52:58,450
which can be checked on a single source

00:52:54,890 --> 00:53:01,869
file could be added to the package test

00:52:58,450 --> 00:53:05,170
the policy so you can check the whole

00:53:01,869 --> 00:53:09,250
system installed in a VM if you are

00:53:05,170 --> 00:53:11,859
really interested in sorry I don't think

00:53:09,250 --> 00:53:15,160
I understand what he did there are they

00:53:11,859 --> 00:53:18,640
all the package tests so you can say

00:53:15,160 --> 00:53:21,520
okay if Dash is the default shell it

00:53:18,640 --> 00:53:26,250
must support functions and you can build

00:53:21,520 --> 00:53:26,250
you can write a test to check that

00:53:33,950 --> 00:53:39,890
I guess it could be in policy package

00:53:37,000 --> 00:53:43,910
say thank you test for an installed

00:53:39,890 --> 00:53:47,240
Debian system but it's far-reaching I

00:53:43,910 --> 00:53:48,530
think yeah that's monoi she wanted to do

00:53:47,240 --> 00:53:50,630
something along those lines like there

00:53:48,530 --> 00:53:52,790
was a there was a we talked about this

00:53:50,630 --> 00:53:54,500
like one of the Debian dev console are

00:53:52,790 --> 00:53:55,820
quite some time ago that one of the

00:53:54,500 --> 00:53:58,070
things it would be really nice would be

00:53:55,820 --> 00:54:00,380
in some respects would be to have a much

00:53:58,070 --> 00:54:02,390
more machine consumable way of doing

00:54:00,380 --> 00:54:04,579
policy that would look more like the way

00:54:02,390 --> 00:54:07,490
that they did the POSIX standard where

00:54:04,579 --> 00:54:08,810
you have a for every given requirement

00:54:07,490 --> 00:54:10,550
you have a normative section you have an

00:54:08,810 --> 00:54:12,500
informative explanation and you have

00:54:10,550 --> 00:54:16,970
like a test suite that you could

00:54:12,500 --> 00:54:18,230
potentially attach to that I love the

00:54:16,970 --> 00:54:20,690
document that would result from that

00:54:18,230 --> 00:54:23,000
would be very cool the amount of work

00:54:20,690 --> 00:54:27,170
required to get there seemed always seem

00:54:23,000 --> 00:54:28,730
very hard and you lose a bunch of you

00:54:27,170 --> 00:54:30,440
lose a bunch of narrative flow when you

00:54:28,730 --> 00:54:32,030
try to figure out how to write policy

00:54:30,440 --> 00:54:33,770
that way and I don't know how important

00:54:32,030 --> 00:54:35,990
the flow of Paula I don't know how many

00:54:33,770 --> 00:54:37,940
people actually just read policy anyway

00:54:35,990 --> 00:54:39,319
but there are parts of it that are in

00:54:37,940 --> 00:54:41,000
clot that are intended for that

00:54:39,319 --> 00:54:43,040
particularly like the first three or

00:54:41,000 --> 00:54:44,900
four chapters are sort of here's how the

00:54:43,040 --> 00:54:46,339
archive is laid out here's like some

00:54:44,900 --> 00:54:48,710
basic concepts you have to understand

00:54:46,339 --> 00:54:51,440
around the free and non-free and

00:54:48,710 --> 00:54:54,230
sections and priorities and and whatnot

00:54:51,440 --> 00:54:56,589
but I still like I keep having that in

00:54:54,230 --> 00:54:59,450
the back of my mind and think that

00:54:56,589 --> 00:55:02,089
serious standards bodies that actually

00:54:59,450 --> 00:55:03,710
have you know have put a lot more effort

00:55:02,089 --> 00:55:05,119
into this that have national bodies that

00:55:03,710 --> 00:55:06,890
have funding for people to come and work

00:55:05,119 --> 00:55:08,869
on this that right compliance suites and

00:55:06,890 --> 00:55:10,520
that kind of thing they tend to

00:55:08,869 --> 00:55:12,020
structure their standards in that

00:55:10,520 --> 00:55:13,880
fashion where there's very clear

00:55:12,020 --> 00:55:15,109
distinction between here's the the

00:55:13,880 --> 00:55:16,550
normative requirement here's the

00:55:15,109 --> 00:55:19,550
informative discussion of why that

00:55:16,550 --> 00:55:21,109
requirement is there and there's markup

00:55:19,550 --> 00:55:22,579
that clearly indicates that and there's

00:55:21,109 --> 00:55:24,890
some presentation that lays things out

00:55:22,579 --> 00:55:26,510
that way it would be really cool if we

00:55:24,890 --> 00:55:30,950
could get there I think it's a lot of

00:55:26,510 --> 00:55:33,319
work on shuffling stuff around but where

00:55:30,950 --> 00:55:39,829
does the Debian policy currently stand

00:55:33,319 --> 00:55:42,230
with regards to LSP and DHS so we are so

00:55:39,829 --> 00:55:45,050
on LSB we are not

00:55:42,230 --> 00:55:46,910
I don't think Debian policy really says

00:55:45,050 --> 00:55:48,640
a whole lot there except in the Anette

00:55:46,910 --> 00:55:50,170
system section

00:55:48,640 --> 00:55:52,510
I think we say that you're supposed to

00:55:50,170 --> 00:55:53,590
comply with forget if we say we

00:55:52,510 --> 00:55:56,680
completely supposed to comply with LSB

00:55:53,590 --> 00:55:59,080
in the unit system section or not we

00:55:56,680 --> 00:56:01,990
didn't we removed a bunch of stuff in

00:55:59,080 --> 00:56:03,070
this release because of the fact that in

00:56:01,990 --> 00:56:05,050
its script headers

00:56:03,070 --> 00:56:08,740
I generally I'm not sure we actually

00:56:05,050 --> 00:56:10,090
mandate that though yeah but other than

00:56:08,740 --> 00:56:13,030
that I don't think we talk about LSB for

00:56:10,090 --> 00:56:16,480
FHS were at two point three there's an

00:56:13,030 --> 00:56:18,610
open bug to move to 3.0 one of the

00:56:16,480 --> 00:56:20,110
things that I'm a little bit we actually

00:56:18,610 --> 00:56:22,450
just had this conversation today was the

00:56:20,110 --> 00:56:24,280
question of like is this a shoe this is

00:56:22,450 --> 00:56:25,660
this a priority for the project we don't

00:56:24,280 --> 00:56:28,750
have a good feel for how important three

00:56:25,660 --> 00:56:31,390
ow is to people the the reason why the

00:56:28,750 --> 00:56:33,730
bug was raised is because fh s3o allows

00:56:31,390 --> 00:56:35,440
user Lib exec and their apparent was

00:56:33,730 --> 00:56:38,440
apparently some desire to use user Lib

00:56:35,440 --> 00:56:41,800
exec in the archive we could handle that

00:56:38,440 --> 00:56:43,990
with just making an exception to FHS 2.3

00:56:41,800 --> 00:56:45,580
that says you can use the user live exec

00:56:43,990 --> 00:56:47,200
that would be the super easy way to fix

00:56:45,580 --> 00:56:50,740
that problem the more comprehensive

00:56:47,200 --> 00:56:52,120
would be to switch to 3.0 I don't know

00:56:50,740 --> 00:56:54,460
exactly how much work that is I haven't

00:56:52,120 --> 00:56:56,560
really looked at the diffs the FHS seems

00:56:54,460 --> 00:56:58,660
to be totally dead upstream like 3.0

00:56:56,560 --> 00:57:00,730
went out the door and then everything

00:56:58,660 --> 00:57:07,480
seems to have died so I don't know how

00:57:00,730 --> 00:57:08,650
much future there is yeah there's we

00:57:07,480 --> 00:57:13,960
have a lot we're carrying a lot of

00:57:08,650 --> 00:57:16,360
exceptions on FHS 2.3 FHS 2.3 hard-coded

00:57:13,960 --> 00:57:19,870
the red heart the red hat by arch

00:57:16,360 --> 00:57:22,810
approach so like we're never going to do

00:57:19,870 --> 00:57:24,760
that and the ongoing discussions on the

00:57:22,810 --> 00:57:26,260
FHS mailing list there's still people

00:57:24,760 --> 00:57:27,820
advocating for that being the most

00:57:26,260 --> 00:57:31,150
sensible way to do multi archana I don't

00:57:27,820 --> 00:57:32,470
all understand what they're thinking so

00:57:31,150 --> 00:57:37,330
there's a bunch of that and then some of

00:57:32,470 --> 00:57:39,670
the rest of it was just that I think

00:57:37,330 --> 00:57:41,470
that they mandated some really really

00:57:39,670 --> 00:57:43,840
restrictive compatibility with shells

00:57:41,470 --> 00:57:46,210
and we were like you know like I mean

00:57:43,840 --> 00:57:47,920
all the shells support this some amount

00:57:46,210 --> 00:57:49,840
of POSIX features let's not tell people

00:57:47,920 --> 00:57:52,960
not to use shell functions and some

00:57:49,840 --> 00:57:54,460
other stuff like that we also have a two

00:57:52,960 --> 00:57:56,650
or three of the exceptions are specific

00:57:54,460 --> 00:57:58,090
to the herd because they want to put

00:57:56,650 --> 00:58:00,870
things in different directories and have

00:57:58,090 --> 00:58:00,870
their own structure

00:58:02,720 --> 00:58:07,260
how are we doing on time well we're

00:58:05,670 --> 00:58:11,550
basically out of time

00:58:07,260 --> 00:58:13,780
yeah okay um thanks again for coming

00:58:11,550 --> 00:58:19,409
yes thank you very much

00:58:13,780 --> 00:58:19,409

YouTube URL: https://www.youtube.com/watch?v=gEWMH8QFAHw


