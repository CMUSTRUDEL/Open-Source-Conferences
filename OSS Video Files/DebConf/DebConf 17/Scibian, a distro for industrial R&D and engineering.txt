Title: Scibian, a distro for industrial R&D and engineering
Publication date: 2017-12-06
Playlist: DebConf 17
Description: 
	by Mehdi Dogguy

At: DebConf17
https://debconf17.debconf.org/
Room: Rex
Scheduled start: 2017-08-08 10:00:00
Captions: 
	00:00:05,030 --> 00:00:12,240
so hello everybody I'm MIDI dougie

00:00:09,360 --> 00:00:15,599
Dylan contributor I'm here to speak

00:00:12,240 --> 00:00:18,650
about seijin which is a distro for

00:00:15,599 --> 00:00:21,900
industrial rd needs and engineers

00:00:18,650 --> 00:00:22,890
another way to put it is this refers to

00:00:21,900 --> 00:00:26,489
computing

00:00:22,890 --> 00:00:28,290
so you're mainly interested the HPC

00:00:26,489 --> 00:00:31,919
clusters and the work station for

00:00:28,290 --> 00:00:33,720
scientific engineers and another simple

00:00:31,919 --> 00:00:36,900
way to look at it is just debian

00:00:33,720 --> 00:00:40,200
derivative so how why we did different

00:00:36,900 --> 00:00:44,550
derivative what's meant for what we did

00:00:40,200 --> 00:00:48,180
integrating it etc so a bit of history

00:00:44,550 --> 00:00:50,690
so I work for EDF which is a tricity

00:00:48,180 --> 00:00:55,320
explicity default so if this year France

00:00:50,690 --> 00:00:58,590
and C since 2003 we are using an

00:00:55,320 --> 00:01:04,159
internal disrobe based on Debian for our

00:00:58,590 --> 00:01:06,689
needs and we just thought that it should

00:01:04,159 --> 00:01:10,829
be useful to the community to publish it

00:01:06,689 --> 00:01:13,679
publicly and try to gather wider

00:01:10,829 --> 00:01:18,229
community around this this project and

00:01:13,679 --> 00:01:23,490
contribute all on the same basic basis

00:01:18,229 --> 00:01:26,969
so the image presentation I will briefly

00:01:23,490 --> 00:01:32,100
introduce our business context why you

00:01:26,969 --> 00:01:37,380
use it for and what we deploy using

00:01:32,100 --> 00:01:40,819
sibian siphon so our scientific needs IT

00:01:37,380 --> 00:01:44,909
needs and what we did in cyclin and how

00:01:40,819 --> 00:01:47,279
basically so just one little slide about

00:01:44,909 --> 00:01:50,549
EDF for those who don't know the company

00:01:47,279 --> 00:01:53,249
it's a large electricity producer and

00:01:50,549 --> 00:01:56,159
sailor it's a word nuclear energy leader

00:01:53,249 --> 00:02:01,740
either in the world and European hydro

00:01:56,159 --> 00:02:03,990
power leader we are not only implemented

00:02:01,740 --> 00:02:06,209
in France but all over the world so we

00:02:03,990 --> 00:02:11,459
do also business in Asia and the United

00:02:06,209 --> 00:02:13,700
States it has a big annual revenue but

00:02:11,459 --> 00:02:17,420
it's more impressive in

00:02:13,700 --> 00:02:20,209
in numbers but we are organizing small

00:02:17,420 --> 00:02:25,040
teams and another way to look at it is

00:02:20,209 --> 00:02:28,550
like many small business units with

00:02:25,040 --> 00:02:31,459
their own budget resources etc so we

00:02:28,550 --> 00:02:33,140
don't have sadly for Debian we don't

00:02:31,459 --> 00:02:38,239
have that budget for Simon we have a

00:02:33,140 --> 00:02:43,550
little just a little we have a large Rd

00:02:38,239 --> 00:02:45,470
division which does a lot of work on all

00:02:43,550 --> 00:02:47,870
things related to energy and how to

00:02:45,470 --> 00:02:52,100
implement that how to make it more

00:02:47,870 --> 00:02:54,410
I mean safer and cheaper and you have a

00:02:52,100 --> 00:02:56,120
nice webpage if you're interested in

00:02:54,410 --> 00:03:01,030
more to have more details about the

00:02:56,120 --> 00:03:05,060
company I put the link so our scientific

00:03:01,030 --> 00:03:09,920
computing needs so at IDF we have the

00:03:05,060 --> 00:03:11,989
rlg which works on the modeling stuff on

00:03:09,920 --> 00:03:14,810
the conception on the renewable

00:03:11,989 --> 00:03:18,980
renewable energies and electrical

00:03:14,810 --> 00:03:21,260
networks all that is necessary it

00:03:18,980 --> 00:03:25,100
produces electricity in safer and

00:03:21,260 --> 00:03:30,700
cheaper way and make it controllable by

00:03:25,100 --> 00:03:30,700
either engineering to make it efficient

00:03:30,850 --> 00:03:36,890
one of the things that is that silane is

00:03:34,430 --> 00:03:41,480
used for a TGIF it's for the power

00:03:36,890 --> 00:03:45,019
management we have computing chains with

00:03:41,480 --> 00:03:48,350
which make simulations to make us able

00:03:45,019 --> 00:03:53,150
to reduce downtime of nuclear power

00:03:48,350 --> 00:03:54,769
plants during the maintenance and we

00:03:53,150 --> 00:03:58,450
also have all the simulation of the

00:03:54,769 --> 00:03:58,450
renewable energies which is less

00:03:58,720 --> 00:04:06,460
computing

00:04:00,910 --> 00:04:08,380
intense sieve we are also trying to plan

00:04:06,460 --> 00:04:10,810
to plan for the conception and

00:04:08,380 --> 00:04:13,030
prediction weeks in advance because if

00:04:10,810 --> 00:04:16,390
you have a big Delta between the two you

00:04:13,030 --> 00:04:18,850
are losing much more money and it's not

00:04:16,390 --> 00:04:22,920
good for the business so we are trying

00:04:18,850 --> 00:04:28,870
to make that predictable and adjust

00:04:22,920 --> 00:04:32,710
either way to the to reduce the Delta so

00:04:28,870 --> 00:04:35,200
more concretely we do some modeling so

00:04:32,710 --> 00:04:38,650
we try to approximate reality with with

00:04:35,200 --> 00:04:40,450
models and then we use those models

00:04:38,650 --> 00:04:46,990
implement scientific codes to simulate

00:04:40,450 --> 00:04:51,430
what could happen any system and then

00:04:46,990 --> 00:04:55,660
try to visualize the results on on the

00:04:51,430 --> 00:05:02,560
hardware with with some big GPUs because

00:04:55,660 --> 00:05:04,480
that you have many big big simulations

00:05:02,560 --> 00:05:08,280
to visualize it takes a lot of romics at

00:05:04,480 --> 00:05:15,880
rest so you need the IT that comes with

00:05:08,280 --> 00:05:19,330
it necessary for that sorry yeah so what

00:05:15,880 --> 00:05:25,030
are the our typical IT users needs they

00:05:19,330 --> 00:05:27,250
use workstations laptops they so for

00:05:25,030 --> 00:05:32,620
modeling visualizing for developing

00:05:27,250 --> 00:05:34,960
codes and accessing the all the IT

00:05:32,620 --> 00:05:37,590
infrastructure we have the high

00:05:34,960 --> 00:05:42,220
performance clusters deployed internally

00:05:37,590 --> 00:05:45,070
which contain thousands of nodes of

00:05:42,220 --> 00:05:47,140
compute nodes and we have some small

00:05:45,070 --> 00:05:50,670
computing chains which are used for

00:05:47,140 --> 00:05:56,050
small simulations which doesn't

00:05:50,670 --> 00:06:00,730
necessarily need a big HPC cluster so

00:05:56,050 --> 00:06:02,830
all those are using siphon all those are

00:06:00,730 --> 00:06:06,430
using the same basis the same packages

00:06:02,830 --> 00:06:07,770
the same kernel and we have so single

00:06:06,430 --> 00:06:09,040
solution to deploy all those

00:06:07,770 --> 00:06:12,520
environments

00:06:09,040 --> 00:06:14,950
it's sigan so saving is heavily based on

00:06:12,520 --> 00:06:17,710
debian we actually don't

00:06:14,950 --> 00:06:21,880
for the colonel it's Debian's colonel we

00:06:17,710 --> 00:06:24,310
don't recompile the kernel modules we

00:06:21,880 --> 00:06:26,830
don't for Debian we take Debian we

00:06:24,310 --> 00:06:28,990
Debian stable actually or it's stable

00:06:26,830 --> 00:06:32,050
and we add on top of that some

00:06:28,990 --> 00:06:34,960
customizations to make it suitable for

00:06:32,050 --> 00:06:38,080
our IT needs to make it for example

00:06:34,960 --> 00:06:40,900
connected to the to the LDAP server to

00:06:38,080 --> 00:06:43,710
make it with the printers to be able to

00:06:40,900 --> 00:06:47,250
deploy it on the HPC clusters with the

00:06:43,710 --> 00:06:50,580
with the newer drivers because we have

00:06:47,250 --> 00:06:54,310
it's much more interesting to run I mean

00:06:50,580 --> 00:06:57,190
new hardware for the computing because

00:06:54,310 --> 00:07:00,430
it's less energy consuming it consumes

00:06:57,190 --> 00:07:03,850
less energy so we you have to follow the

00:07:00,430 --> 00:07:06,550
technology somehow and we use it on the

00:07:03,850 --> 00:07:09,610
same we do that with the same

00:07:06,550 --> 00:07:12,700
environment which is Simon so we have on

00:07:09,610 --> 00:07:15,400
one side our users and some applications

00:07:12,700 --> 00:07:18,040
that do some computation regularly like

00:07:15,400 --> 00:07:21,160
for example for predicting the

00:07:18,040 --> 00:07:25,240
consumption and production there is some

00:07:21,160 --> 00:07:28,990
codes running at different times time of

00:07:25,240 --> 00:07:31,000
the day which tries to make that make

00:07:28,990 --> 00:07:33,760
some of the numbers on the other side we

00:07:31,000 --> 00:07:36,040
have the ATM pressure deployed so a few

00:07:33,760 --> 00:07:38,500
servers few workstations and the few

00:07:36,040 --> 00:07:43,800
clusters to give to give you a rough

00:07:38,500 --> 00:07:48,880
idea we have I think like 1055 hundred

00:07:43,800 --> 00:07:51,400
workstations and something like 4000

00:07:48,880 --> 00:07:56,230
compute nodes deployed we using Debian

00:07:51,400 --> 00:08:00,610
and in production so why did we choose

00:07:56,230 --> 00:08:03,850
Debian we are firmly attached to Debian

00:08:00,610 --> 00:08:08,320
I wouldn't have worked on save even if

00:08:03,850 --> 00:08:11,650
it wasn't based on Debian so we use one

00:08:08,320 --> 00:08:13,810
us with the same stack on all the

00:08:11,650 --> 00:08:16,390
environments which gives you which gives

00:08:13,810 --> 00:08:19,870
us a full binary compatibility between

00:08:16,390 --> 00:08:21,490
all the environments so engineers can

00:08:19,870 --> 00:08:24,970
make their codes on their workstation

00:08:21,490 --> 00:08:27,250
and then go on servers and and the HPC

00:08:24,970 --> 00:08:28,180
classes and just run their code they

00:08:27,250 --> 00:08:30,970
don't have to port

00:08:28,180 --> 00:08:33,010
or tested otherwise because they're

00:08:30,970 --> 00:08:35,980
guaranteed to have binary compatibility

00:08:33,010 --> 00:08:38,920
and have the same suffer stack so that's

00:08:35,980 --> 00:08:40,990
interesting for us we don't want to have

00:08:38,920 --> 00:08:45,100
separate environments and separate and

00:08:40,990 --> 00:08:49,390
different Oasis between the cluster for

00:08:45,100 --> 00:08:51,580
example the release cycle we have so one

00:08:49,390 --> 00:09:00,000
major version every two three years

00:08:51,580 --> 00:09:02,440
which is okay for our ite planning

00:09:00,000 --> 00:09:05,290
Debian has just the largest scientific

00:09:02,440 --> 00:09:09,700
offering largest package repository with

00:09:05,290 --> 00:09:11,560
a lot of scientific software and it's so

00:09:09,700 --> 00:09:14,170
it's very convenient for us because when

00:09:11,560 --> 00:09:20,050
you need something you have 80% chance

00:09:14,170 --> 00:09:22,210
of finding it in the end archive so far

00:09:20,050 --> 00:09:25,300
there is only opened which was much as

00:09:22,210 --> 00:09:29,500
this criteria but basically by taking

00:09:25,300 --> 00:09:34,260
what Debian did one interesting question

00:09:29,500 --> 00:09:38,470
could be why Debian instead of Ubuntu

00:09:34,260 --> 00:09:40,450
which has some security not security

00:09:38,470 --> 00:09:41,740
password not only super security force

00:09:40,450 --> 00:09:43,470
but also

00:09:41,740 --> 00:09:46,510
[Music]

00:09:43,470 --> 00:09:49,540
contractural support for which might be

00:09:46,510 --> 00:09:52,540
interesting for industrial users so in

00:09:49,540 --> 00:09:54,310
Debian all what you find in maine is

00:09:52,540 --> 00:09:58,600
maintained with the same criteria with

00:09:54,310 --> 00:10:01,870
the same QA with the same expectations

00:09:58,600 --> 00:10:04,510
and with the same workflow while it's

00:10:01,870 --> 00:10:07,529
different in ubuntu we're going to so

00:10:04,510 --> 00:10:09,820
focuses its main on some core components

00:10:07,529 --> 00:10:11,649
which they maintain and then the

00:10:09,820 --> 00:10:14,709
community takes takes care of the rest

00:10:11,649 --> 00:10:19,320
of the packages so it makes some how

00:10:14,709 --> 00:10:22,180
some second-class packages and we don't

00:10:19,320 --> 00:10:26,709
find this solution suitable for us so we

00:10:22,180 --> 00:10:28,389
picked and stayed on Debian Devon is

00:10:26,709 --> 00:10:34,540
also designed for customization the

00:10:28,389 --> 00:10:36,339
Installer is very modular it's easy to

00:10:34,540 --> 00:10:39,250
get your stuff done in the Installer

00:10:36,339 --> 00:10:41,350
simply at least from my experience

00:10:39,250 --> 00:10:44,430
simpler than in kickstart for example if

00:10:41,350 --> 00:10:49,089
you want to adapt it to your needs

00:10:44,430 --> 00:10:51,399
you also have easy ways and many

00:10:49,089 --> 00:10:54,790
documentation to make your deployments

00:10:51,399 --> 00:11:00,250
and configuration easy the compute

00:10:54,790 --> 00:11:03,250
community is also quite open how do you

00:11:00,250 --> 00:11:05,829
see it it's it's a fully benevolent

00:11:03,250 --> 00:11:09,100
driven project so whenever you need

00:11:05,829 --> 00:11:12,790
something to get done in Debian you can

00:11:09,100 --> 00:11:14,889
just contribute it it's really do occur

00:11:12,790 --> 00:11:17,709
see so if you are interested in

00:11:14,889 --> 00:11:20,620
something and you have the resources and

00:11:17,709 --> 00:11:23,050
the skills to do it it's very easy to

00:11:20,620 --> 00:11:26,769
get it integrated in Debian and that's a

00:11:23,050 --> 00:11:30,000
way I mean that's very convenient for us

00:11:26,769 --> 00:11:32,560
because whenever we stabilize some

00:11:30,000 --> 00:11:35,199
integration integrated packages or

00:11:32,560 --> 00:11:38,740
development we can make sure to

00:11:35,199 --> 00:11:42,990
integrate it and have it also available

00:11:38,740 --> 00:11:46,360
to the community and have community

00:11:42,990 --> 00:11:51,399
contribute to its maintenance so we

00:11:46,360 --> 00:11:53,100
share the load with all the actors it's

00:11:51,399 --> 00:11:57,720
easy to integrate

00:11:53,100 --> 00:12:01,350
Neuer new applications because packaging

00:11:57,720 --> 00:12:04,020
helpers are really cool these days it

00:12:01,350 --> 00:12:07,440
used to be complicated and it's easier

00:12:04,020 --> 00:12:10,230
easier with time when you look at

00:12:07,440 --> 00:12:13,140
different rules today it's it's very

00:12:10,230 --> 00:12:17,100
simple you only need a few lines to make

00:12:13,140 --> 00:12:20,970
your package work and it's it's not the

00:12:17,100 --> 00:12:23,670
case for other distributions and you

00:12:20,970 --> 00:12:28,110
have also abundant documentation which

00:12:23,670 --> 00:12:33,210
gets it it's very easy to to start doing

00:12:28,110 --> 00:12:35,940
some stuff and contribute so all those

00:12:33,210 --> 00:12:38,820
are very reasons to pick Debian to use

00:12:35,940 --> 00:12:40,410
Debian and stay on Debian you might ask

00:12:38,820 --> 00:12:43,470
me why did you choose to make a

00:12:40,410 --> 00:12:48,930
derivative why not just using Debian

00:12:43,470 --> 00:12:52,050
proper so we used to have a six year

00:12:48,930 --> 00:12:56,330
support on our on each Debian release

00:12:52,050 --> 00:13:01,020
stable release or old stable release it

00:12:56,330 --> 00:13:03,780
Debian catches up a bit with Debian LTS

00:13:01,020 --> 00:13:06,600
so we are able to do five or six years

00:13:03,780 --> 00:13:12,540
support now but it was not the case

00:13:06,600 --> 00:13:15,030
before and we by doing it internally we

00:13:12,540 --> 00:13:17,280
have the choice to make it longer so for

00:13:15,030 --> 00:13:20,370
example for our IT needs we still

00:13:17,280 --> 00:13:22,260
support Debian squeeze and so in the

00:13:20,370 --> 00:13:25,020
total we will support it like for eight

00:13:22,260 --> 00:13:27,000
years because there are some business

00:13:25,020 --> 00:13:29,400
applications that are still needed and

00:13:27,000 --> 00:13:32,940
we cannot port the servers to newer

00:13:29,400 --> 00:13:36,900
versions of Debian so we still maintain

00:13:32,940 --> 00:13:42,090
the the support we have also our own

00:13:36,900 --> 00:13:46,410
security team inside Debian it's not a

00:13:42,090 --> 00:13:49,920
big team but enough for our needs so it

00:13:46,410 --> 00:13:51,870
has to it advantages you make you might

00:13:49,920 --> 00:13:53,760
make different choices that in Debian

00:13:51,870 --> 00:13:59,880
for example if Debian didn't qualify

00:13:53,760 --> 00:14:01,830
some vulnerability as as critical but at

00:13:59,880 --> 00:14:04,110
the same time it's important for us we

00:14:01,830 --> 00:14:05,520
can fix it internally we don't have to

00:14:04,110 --> 00:14:08,640
first Debian to

00:14:05,520 --> 00:14:11,570
to update stable for that and on the

00:14:08,640 --> 00:14:15,750
other side if you are proactive and

00:14:11,570 --> 00:14:17,520
wanted to fix a security bug that is

00:14:15,750 --> 00:14:19,710
also important for debian we can

00:14:17,520 --> 00:14:22,440
contribute it and we actually contribute

00:14:19,710 --> 00:14:24,960
to the LTS effort so it's one way also

00:14:22,440 --> 00:14:28,320
to give back to the community

00:14:24,960 --> 00:14:32,400
another big reason it's like because you

00:14:28,320 --> 00:14:35,190
saw in the scientific context when you

00:14:32,400 --> 00:14:37,590
buy hardware you get you want to get

00:14:35,190 --> 00:14:39,840
most of it you want to take advantage

00:14:37,590 --> 00:14:43,290
all the performance that the hardware is

00:14:39,840 --> 00:14:46,380
capable of doing so you have to deploy

00:14:43,290 --> 00:14:48,750
the new drivers with all the new

00:14:46,380 --> 00:14:51,510
versions and it's not very easy in

00:14:48,750 --> 00:14:56,510
Debian to make that happen for stable

00:14:51,510 --> 00:14:59,820
releases whenever the versions come out

00:14:56,510 --> 00:15:02,640
so it's mainly used for InfiniBand a new

00:14:59,820 --> 00:15:04,500
path nvidia on some other current

00:15:02,640 --> 00:15:08,640
drivers yeah

00:15:04,500 --> 00:15:10,880
Intel micro architectures that's

00:15:08,640 --> 00:15:17,000
basically it so the hardware part of the

00:15:10,880 --> 00:15:19,710
infrastructure and some storage stuff

00:15:17,000 --> 00:15:23,280
but at least we have the possibility

00:15:19,710 --> 00:15:26,720
it's it's flexible enough to be able to

00:15:23,280 --> 00:15:30,600
integrate anything in the repositories

00:15:26,720 --> 00:15:32,970
so it's not always easy also like you

00:15:30,600 --> 00:15:34,440
like I said we still support screens

00:15:32,970 --> 00:15:37,380
because some business applications that

00:15:34,440 --> 00:15:39,750
didn't were not ported to newer versions

00:15:37,380 --> 00:15:46,080
of Sipan it's also because there were

00:15:39,750 --> 00:15:48,090
some libs removed on Debian and so we

00:15:46,080 --> 00:15:51,600
keep them around to make the application

00:15:48,090 --> 00:15:58,590
still run because they are critical and

00:15:51,600 --> 00:16:05,060
we have some more time to yeah there is

00:15:58,590 --> 00:16:09,900
a leap tau if I recall correctly tau tau

00:16:05,060 --> 00:16:13,590
which got removed from wizzy correctly

00:16:09,900 --> 00:16:15,870
and so we so the question was can you

00:16:13,590 --> 00:16:16,840
give some example of some removed

00:16:15,870 --> 00:16:20,230
library

00:16:16,840 --> 00:16:24,400
and the most recent one that I'm recoil

00:16:20,230 --> 00:16:27,610
is Lib Dem it's a it's a crappy thing

00:16:24,400 --> 00:16:29,260
you don't want to use it but yeah we

00:16:27,610 --> 00:16:31,029
have some business applications that use

00:16:29,260 --> 00:16:40,560
it and the the scientific software is

00:16:31,029 --> 00:16:43,270
not known for using all new technologies

00:16:40,560 --> 00:16:46,089
and we have the choice to grate two new

00:16:43,270 --> 00:16:50,020
major versions of some software we are

00:16:46,089 --> 00:16:52,570
not forced to strictly comply with the

00:16:50,020 --> 00:16:54,750
backwards policy which force you for

00:16:52,570 --> 00:16:57,490
example to use testing versions or

00:16:54,750 --> 00:17:01,180
stable versions if you want to back port

00:16:57,490 --> 00:17:05,530
or unstable you we can pick whenever

00:17:01,180 --> 00:17:10,510
versions is useful for us package it and

00:17:05,530 --> 00:17:12,550
just use it in our repository so all

00:17:10,510 --> 00:17:18,490
those are the reasons why we did the

00:17:12,550 --> 00:17:23,290
derivative and all those reasons are

00:17:18,490 --> 00:17:28,660
equally important for us so the life

00:17:23,290 --> 00:17:32,350
cycle of distribution so each version is

00:17:28,660 --> 00:17:35,380
supported for some years let's say X so

00:17:32,350 --> 00:17:39,100
you have first version two years later

00:17:35,380 --> 00:17:41,140
there is another version and so on each

00:17:39,100 --> 00:17:45,070
time we receive a new hardware we can if

00:17:41,140 --> 00:17:49,500
I we qualify it with the latest stable

00:17:45,070 --> 00:17:52,929
release or much much recent one

00:17:49,500 --> 00:17:55,270
available so if so this one was created

00:17:52,929 --> 00:17:58,929
seven six and this one happened in the

00:17:55,270 --> 00:18:02,590
2015 so it qualification seven and then

00:17:58,929 --> 00:18:05,800
there is our users which develop and use

00:18:02,590 --> 00:18:09,220
some business applications and they when

00:18:05,800 --> 00:18:13,540
they start writing a business

00:18:09,220 --> 00:18:16,570
application they also are recommended at

00:18:13,540 --> 00:18:20,710
least to use the latest stable release

00:18:16,570 --> 00:18:22,600
available so that the life cycle of

00:18:20,710 --> 00:18:29,629
business their business application

00:18:22,600 --> 00:18:34,720
lasts longer when the the basic

00:18:29,629 --> 00:18:42,109
I mean when the OS which Wiz which was

00:18:34,720 --> 00:18:44,840
built on gets an end of support we have

00:18:42,109 --> 00:18:49,159
some mechanisms to make them available

00:18:44,840 --> 00:18:51,649
on the newer versions of Saban with some

00:18:49,159 --> 00:18:54,739
short mechanisms so whenever you upload

00:18:51,649 --> 00:18:58,999
for example a business app for Sabean X

00:18:54,739 --> 00:19:06,619
it gets it gets actually compiled for 7

00:18:58,999 --> 00:19:09,369
X and then the package is so there is

00:19:06,619 --> 00:19:12,649
somehow compatibility package which is

00:19:09,369 --> 00:19:16,190
generated for all other segment versions

00:19:12,649 --> 00:19:19,970
so you it's very convenient for users

00:19:16,190 --> 00:19:22,669
because they upload once and they can

00:19:19,970 --> 00:19:25,309
use it on every environment they don't

00:19:22,669 --> 00:19:28,940
care about which versions they are using

00:19:25,309 --> 00:19:31,849
on there of the other other ways on

00:19:28,940 --> 00:19:35,899
their workstation they just know that

00:19:31,849 --> 00:19:38,259
the applications is available they might

00:19:35,899 --> 00:19:40,999
not have all the performance that they

00:19:38,259 --> 00:19:42,830
could possibly get with a newer hardware

00:19:40,999 --> 00:19:48,499
but at least they can run the

00:19:42,830 --> 00:19:52,190
application so our engineers can upload

00:19:48,499 --> 00:19:56,710
business applications they can do it in

00:19:52,190 --> 00:20:00,590
an autonomous way and we wrote some

00:19:56,710 --> 00:20:02,509
specification for those applications so

00:20:00,590 --> 00:20:05,419
in first then for example to not have

00:20:02,509 --> 00:20:08,779
maintainer scripts no services to put

00:20:05,419 --> 00:20:12,619
all the files and something under slash

00:20:08,779 --> 00:20:18,789
apt to not collide with the systems

00:20:12,619 --> 00:20:23,229
system or Debian packages and so they

00:20:18,789 --> 00:20:26,690
just follow those rules and the building

00:20:23,229 --> 00:20:29,869
infrastructures structure runs

00:20:26,690 --> 00:20:32,749
automatically some tests to say if the

00:20:29,869 --> 00:20:35,749
business application complies with the

00:20:32,749 --> 00:20:38,779
spec or not so whether it's it complies

00:20:35,749 --> 00:20:42,130
it gets uploaded and published and if it

00:20:38,779 --> 00:20:46,190
doesn't comply it gets it gets removed

00:20:42,130 --> 00:20:49,370
and it's like I said each one is made

00:20:46,190 --> 00:20:55,429
available for each for every available

00:20:49,370 --> 00:20:59,600
version of Simon so this is what Simon

00:20:55,429 --> 00:21:01,250
is about what we use it for and how we

00:20:59,600 --> 00:21:04,970
do mainly stuff

00:21:01,250 --> 00:21:10,130
so now I just focus for on the HPC

00:21:04,970 --> 00:21:12,770
cluster side or the computing chains so

00:21:10,130 --> 00:21:19,640
there are some problems when you try to

00:21:12,770 --> 00:21:22,160
deploy HPC clusters with Debian so when

00:21:19,640 --> 00:21:26,600
you buy a solution of this of this size

00:21:22,160 --> 00:21:29,210
of thousands of nodes each manufacturer

00:21:26,600 --> 00:21:31,880
will come with its own solution there is

00:21:29,210 --> 00:21:34,549
no way to ensure any compatibility

00:21:31,880 --> 00:21:37,640
between all the clusters you have and

00:21:34,549 --> 00:21:40,400
for us it's a big business issue because

00:21:37,640 --> 00:21:45,679
you you have to port each application

00:21:40,400 --> 00:21:49,160
for each cluster and it takes just a

00:21:45,679 --> 00:21:53,929
crazy amount of time so for example for

00:21:49,160 --> 00:21:57,169
our engineers spend at least 20 or 30

00:21:53,929 --> 00:22:01,160
days to qualify a business application

00:21:57,169 --> 00:22:05,540
for each Debian version and they have

00:22:01,160 --> 00:22:07,370
like 500 applications so the if they do

00:22:05,540 --> 00:22:13,549
with that for every cluster

00:22:07,370 --> 00:22:19,970
they just can't follow so the this very

00:22:13,549 --> 00:22:20,840
critical first so yeah like so describe

00:22:19,970 --> 00:22:22,880
the point there is no better

00:22:20,840 --> 00:22:25,460
compatibility between clusters and you

00:22:22,880 --> 00:22:28,520
can even have some conflicting stacks so

00:22:25,460 --> 00:22:29,780
for example with networking stuff with

00:22:28,520 --> 00:22:34,160
InfiniBand and Mellanox

00:22:29,780 --> 00:22:36,320
or in finland and only fad sorry each

00:22:34,160 --> 00:22:39,190
manufacturer comes with this own stack

00:22:36,320 --> 00:22:43,600
so it's optimized for their hardware

00:22:39,190 --> 00:22:46,250
they use the same libraries at the other

00:22:43,600 --> 00:22:49,139
manufacturer but they integrate their

00:22:46,250 --> 00:22:53,429
own patches that are not

00:22:49,139 --> 00:22:57,360
directly put into the community so it

00:22:53,429 --> 00:23:00,299
takes time and you are first to deploy

00:22:57,360 --> 00:23:02,759
it the manufacturer version if you are

00:23:00,299 --> 00:23:05,809
expecting full performance from the hard

00:23:02,759 --> 00:23:11,779
way so it it's quite problematic because

00:23:05,809 --> 00:23:17,100
you are not I mean as a company with

00:23:11,779 --> 00:23:19,739
with public money we cannot enforce some

00:23:17,100 --> 00:23:23,090
specific technology we receive whatever

00:23:19,739 --> 00:23:24,980
technology qualifies for some technical

00:23:23,090 --> 00:23:29,009
parameters

00:23:24,980 --> 00:23:34,289
so first its makes things more

00:23:29,009 --> 00:23:36,529
complicated it gets better but it's not

00:23:34,289 --> 00:23:36,529
there yet

00:23:36,809 --> 00:23:42,299
there is also large number the number of

00:23:39,840 --> 00:23:44,159
compute nodes so it's nowhere near the

00:23:42,299 --> 00:23:46,409
scale of Google or Amazon or whatever

00:23:44,159 --> 00:23:50,820
but it's large enough to be complicated

00:23:46,409 --> 00:23:54,119
to deploy in a fast way and reliable way

00:23:50,820 --> 00:23:57,299
there is also it's also not easy to get

00:23:54,119 --> 00:24:02,609
Debian support so usually it's it's Red

00:23:57,299 --> 00:24:05,190
Hat or open or Susy is less it's so it's

00:24:02,609 --> 00:24:07,889
very common to to fight to find the

00:24:05,190 --> 00:24:10,529
support for our hell but for Debian they

00:24:07,889 --> 00:24:13,919
the first answer from a manufacturer is

00:24:10,529 --> 00:24:17,999
Deb what sorry they never heard of it

00:24:13,919 --> 00:24:20,399
and we it's even it was more complicated

00:24:17,999 --> 00:24:22,889
in the past because we had our own

00:24:20,399 --> 00:24:26,009
version of I mean Debian internally

00:24:22,889 --> 00:24:31,200
which wasn't published so what I had to

00:24:26,009 --> 00:24:35,690
qualify the the hardware which an OS

00:24:31,200 --> 00:24:40,559
that is private so we had to make some

00:24:35,690 --> 00:24:43,739
waste disk for Felicia but that's also

00:24:40,559 --> 00:24:46,049
something that we try to fix by

00:24:43,739 --> 00:24:47,700
publishing sabían to make it publicly

00:24:46,049 --> 00:24:51,029
available available so that

00:24:47,700 --> 00:24:52,919
manufacturers and integrators can use it

00:24:51,029 --> 00:24:56,620
and test it on their own hardware in

00:24:52,919 --> 00:25:09,050
their labs to qualify it and

00:24:56,620 --> 00:25:10,970
and use it so with such yeah sorry so

00:25:09,050 --> 00:25:12,830
the question is do you know

00:25:10,970 --> 00:25:14,630
manufacturers actually doing that doing

00:25:12,830 --> 00:25:18,890
what sorry well you said you've

00:25:14,630 --> 00:25:22,490
published sabaeans so they can chess it

00:25:18,890 --> 00:25:24,020
and or do you know of actually when

00:25:22,490 --> 00:25:26,000
they're doing that or is it just an

00:25:24,020 --> 00:25:32,540
offer that you send out and nobody

00:25:26,000 --> 00:25:38,360
picked up here so there are multiple

00:25:32,540 --> 00:25:41,390
things to say on this subject so for now

00:25:38,360 --> 00:25:43,540
Sabian is not fully published yet we

00:25:41,390 --> 00:25:47,300
don't have the repository published it's

00:25:43,540 --> 00:25:49,430
it's working progress it should be fully

00:25:47,300 --> 00:25:52,940
published by September October so you're

00:25:49,430 --> 00:25:56,600
almost there so manufacturers cannot use

00:25:52,940 --> 00:25:59,810
it yet but in the past in the past we

00:25:56,600 --> 00:26:03,290
made a lot of efforts to fully update

00:25:59,810 --> 00:26:06,470
and make off aid so the software stack

00:26:03,290 --> 00:26:10,180
for InfiniBand functionally in debian

00:26:06,470 --> 00:26:13,730
thanks to the work made by Ana here and

00:26:10,180 --> 00:26:17,120
in the last bit we just told them to use

00:26:13,730 --> 00:26:21,230
Debian 8 to see if the hardware is

00:26:17,120 --> 00:26:24,500
qualifies for us or not and it was it

00:26:21,230 --> 00:26:27,980
was okay for them they were able to to

00:26:24,500 --> 00:26:33,800
test it and propose some patches to make

00:26:27,980 --> 00:26:36,740
some newer drivers available and we hope

00:26:33,800 --> 00:26:41,390
to make it even more easier in the

00:26:36,740 --> 00:26:43,720
future to make the with by making the

00:26:41,390 --> 00:26:46,850
software stacks of those manufacturers

00:26:43,720 --> 00:26:50,680
integrated in some reports of Sabian so

00:26:46,850 --> 00:26:55,490
it will be much more easier to deploy

00:26:50,680 --> 00:26:59,140
clusters with it so I was saying that

00:26:55,490 --> 00:27:02,900
yeah with those big infrastructure so

00:26:59,140 --> 00:27:05,300
the business users invest some amount of

00:27:02,900 --> 00:27:07,330
money to May to 15 minutes okay thank

00:27:05,300 --> 00:27:07,330
you

00:27:07,580 --> 00:27:16,429
- to buy that hardware and they expected

00:27:12,019 --> 00:27:18,799
to use it rather quickly other quickly

00:27:16,429 --> 00:27:21,409
means that from the time that the

00:27:18,799 --> 00:27:23,630
hardware comes to the data center to the

00:27:21,409 --> 00:27:27,740
day that I use that are capable of

00:27:23,630 --> 00:27:34,130
running the first simulations there is

00:27:27,740 --> 00:27:36,320
at most three or four months delay so we

00:27:34,130 --> 00:27:42,980
have to prepare in advance some some

00:27:36,320 --> 00:27:45,289
stuff and make it the mo more make it

00:27:42,980 --> 00:27:50,240
more automatic and make it more easy to

00:27:45,289 --> 00:27:55,059
deploy and to test and at the end the

00:27:50,240 --> 00:27:59,179
ultimate goal is to get the mo AI mean

00:27:55,059 --> 00:28:01,370
the highest performance possible so you

00:27:59,179 --> 00:28:05,389
have to tune the system you have to get

00:28:01,370 --> 00:28:07,370
the drivers right you have to have the

00:28:05,389 --> 00:28:11,419
new I mean the correct versions of the

00:28:07,370 --> 00:28:15,860
stacks and integrating them takes time

00:28:11,419 --> 00:28:17,539
and can ask so if you say three months

00:28:15,860 --> 00:28:19,580
does it mean that the lender the happy

00:28:17,539 --> 00:28:21,529
winner is supposed to install Savion on

00:28:19,580 --> 00:28:24,320
it and just hand it over to you or are

00:28:21,529 --> 00:28:26,000
you going to deploy it on all the

00:28:24,320 --> 00:28:27,500
compute nodes and if so how what are you

00:28:26,000 --> 00:28:31,190
using actually for that fully automatic

00:28:27,500 --> 00:28:33,820
installation or something else we are

00:28:31,190 --> 00:28:38,929
using our own system deployment system

00:28:33,820 --> 00:28:41,570
which I will talk about and they we

00:28:38,929 --> 00:28:43,340
don't ask them to install Debian we ask

00:28:41,570 --> 00:28:46,039
them to make sure that the hardware is

00:28:43,340 --> 00:28:48,500
qualified for Debian or tell us where to

00:28:46,039 --> 00:28:51,019
find the driver and we do all the

00:28:48,500 --> 00:28:54,830
software installation and the software

00:28:51,019 --> 00:28:58,940
integration we only ask them to do the

00:28:54,830 --> 00:29:01,200
hardware installation because it's it

00:28:58,940 --> 00:29:03,430
can be tricky and

00:29:01,200 --> 00:29:06,100
but we take care of the software

00:29:03,430 --> 00:29:08,860
installation ourselves and buy and make

00:29:06,100 --> 00:29:13,780
sure that before the driver hardware

00:29:08,860 --> 00:29:17,650
comes it's already tested with Debian so

00:29:13,780 --> 00:29:20,710
with Sabian it's not only us we try to

00:29:17,650 --> 00:29:24,010
standardize how HPC clusters are

00:29:20,710 --> 00:29:26,640
installed and how so we define the

00:29:24,010 --> 00:29:31,180
pattern of architecture for a generic

00:29:26,640 --> 00:29:33,910
HPC cluster on which we describe how to

00:29:31,180 --> 00:29:36,580
install it using packages packages tools

00:29:33,910 --> 00:29:39,520
in Sabian and then how to configure it

00:29:36,580 --> 00:29:43,110
to make it usable by your users so we

00:29:39,520 --> 00:29:46,210
try to document that and on this

00:29:43,110 --> 00:29:48,870
installation guide which is which will

00:29:46,210 --> 00:29:52,110
be part of Saigon

00:29:48,870 --> 00:29:54,730
it will also be moved to the syphon

00:29:52,110 --> 00:29:55,210
namespace in github but it's not there

00:29:54,730 --> 00:29:59,380
yet

00:29:55,210 --> 00:30:02,290
anyway it's available and with all that

00:29:59,380 --> 00:30:08,850
we have our deployment system we called

00:30:02,290 --> 00:30:13,170
it puppet HPC the name is not I mean

00:30:08,850 --> 00:30:16,840
it's a deployment solution at first it's

00:30:13,170 --> 00:30:21,190
meant to deploy HPC clusters but it can

00:30:16,840 --> 00:30:23,650
be used to deploy anything you have many

00:30:21,190 --> 00:30:26,050
generic I mean when I did when I say

00:30:23,650 --> 00:30:30,280
generic is very generic like for example

00:30:26,050 --> 00:30:32,260
there is a module for a particular ng it

00:30:30,280 --> 00:30:34,330
only configures a bit occasionally and

00:30:32,260 --> 00:30:37,290
then you have another layer in pipette

00:30:34,330 --> 00:30:37,290
to make it

00:30:37,539 --> 00:30:46,129
adaptable to your infrastructure so it's

00:30:41,149 --> 00:30:48,820
it gets in two layers you have a model

00:30:46,129 --> 00:30:54,619
to represent the HPC configuration and

00:30:48,820 --> 00:30:57,200
era so you have on one side all the code

00:30:54,619 --> 00:30:58,999
that configures your infrastructure on

00:30:57,200 --> 00:31:01,909
the other side all the data needed to

00:30:58,999 --> 00:31:05,419
configure it and that's what allows us

00:31:01,909 --> 00:31:08,049
today to publish vivid HPC in open

00:31:05,419 --> 00:31:12,919
source but keep the private data on

00:31:08,049 --> 00:31:16,999
internally so it can be used by by

00:31:12,919 --> 00:31:20,649
everyone actually and for us it's

00:31:16,999 --> 00:31:25,460
another way to contribute to another to

00:31:20,649 --> 00:31:29,379
generic system installation for Debian

00:31:25,460 --> 00:31:32,419
and sy bein systems it should work I

00:31:29,379 --> 00:31:35,600
mean it works without any change with

00:31:32,419 --> 00:31:38,029
Debian systems because it's tested first

00:31:35,600 --> 00:31:40,279
with Debian and then there are some

00:31:38,029 --> 00:31:42,919
stuff that are packaged it only in sy

00:31:40,279 --> 00:31:45,470
bein so they're working there so no

00:31:42,919 --> 00:31:47,869
surprises there for first it's another

00:31:45,470 --> 00:31:52,359
way to contribute to meet with the

00:31:47,869 --> 00:31:52,359
community about around Seguin and

00:31:53,139 --> 00:32:02,929
and that's it's fully well yeah 70% of

00:32:00,529 --> 00:32:06,080
the modules are documented but they are

00:32:02,929 --> 00:32:07,879
easy enough for a system administration

00:32:06,080 --> 00:32:11,359
to have a look at the code and

00:32:07,879 --> 00:32:14,119
understand what it what it does and it's

00:32:11,359 --> 00:32:17,330
fully published and on github so you can

00:32:14,119 --> 00:32:23,029
have a look at it and and get your get

00:32:17,330 --> 00:32:27,649
you started quite easily so why should

00:32:23,029 --> 00:32:30,080
you use the Simon so first it's still

00:32:27,649 --> 00:32:31,929
Debian so we don't forget the bein it's

00:32:30,080 --> 00:32:35,210
still Debian we don't even change the

00:32:31,929 --> 00:32:38,090
change the kernel so you don't you stay

00:32:35,210 --> 00:32:41,989
compatible with the other machines

00:32:38,090 --> 00:32:44,650
installed in DB then since it's a

00:32:41,989 --> 00:32:48,250
derivative we have our own way

00:32:44,650 --> 00:32:50,380
own rules to do published when two gates

00:32:48,250 --> 00:32:54,160
traffic cetera so we don't have to

00:32:50,380 --> 00:32:56,110
follow the policy of Debian package for

00:32:54,160 --> 00:33:00,130
example you have you have more relaxed

00:32:56,110 --> 00:33:02,470
rules all the tools for deployment and

00:33:00,130 --> 00:33:06,250
other business applications are

00:33:02,470 --> 00:33:08,170
integrated in sagen so it's not the

00:33:06,250 --> 00:33:12,160
first open source project published by

00:33:08,170 --> 00:33:13,510
EDF we have also some business

00:33:12,160 --> 00:33:16,660
applications that are published like

00:33:13,510 --> 00:33:21,040
could set you on cadastre open turns

00:33:16,660 --> 00:33:24,670
salami Exeter which are very popular in

00:33:21,040 --> 00:33:27,550
their field and our aim is to also

00:33:24,670 --> 00:33:31,900
package those business applications

00:33:27,550 --> 00:33:35,230
inside sabian it's also an opportunity

00:33:31,900 --> 00:33:39,520
to meet other industrial users and have

00:33:35,230 --> 00:33:41,860
a base to contribute around it's a

00:33:39,520 --> 00:33:44,320
solution that we tested on production I

00:33:41,860 --> 00:33:47,140
mean we actually use old what what is

00:33:44,320 --> 00:33:52,270
presented today in projection so it's

00:33:47,140 --> 00:33:57,820
not some pet project but some IT team in

00:33:52,270 --> 00:34:01,570
their corner and it's also an area where

00:33:57,820 --> 00:34:04,720
we can integrate some specific property

00:34:01,570 --> 00:34:06,880
proprietary software stacks that is not

00:34:04,720 --> 00:34:10,030
possible to integrate Debian because you

00:34:06,880 --> 00:34:12,010
are making choice and preferring one

00:34:10,030 --> 00:34:14,530
manufacturer over the other so for

00:34:12,010 --> 00:34:17,800
example for the InfiniBand etc we have

00:34:14,530 --> 00:34:21,300
to deploy the community stack and not

00:34:17,800 --> 00:34:27,129
many Knox's or Intel stack to make it

00:34:21,300 --> 00:34:29,889
stay neutral and available for all type

00:34:27,129 --> 00:34:32,350
of hardware and you can find our own

00:34:29,889 --> 00:34:35,830
reasons to contribute to save and those

00:34:32,350 --> 00:34:41,370
are the ones that were obvious for me

00:34:35,830 --> 00:34:41,370
but you can have your own ones

00:34:42,429 --> 00:34:49,569
okay so what's next we have a lot of

00:34:47,319 --> 00:34:52,720
things to do we still have to update of

00:34:49,569 --> 00:34:56,289
our website we have to publish the

00:34:52,720 --> 00:34:58,059
packages we have to still discuss with

00:34:56,289 --> 00:35:00,910
the manufacturers to convince them to

00:34:58,059 --> 00:35:05,109
publish their software stack as the

00:35:00,910 --> 00:35:09,059
repositories and not only as tarballs to

00:35:05,109 --> 00:35:16,539
make it easier for everyone to to deploy

00:35:09,059 --> 00:35:18,940
clusters and we yeah we want to create

00:35:16,539 --> 00:35:21,339
some some community about around all

00:35:18,940 --> 00:35:24,430
that so it can be integrators it can be

00:35:21,339 --> 00:35:27,609
manufacturers it can be industrial users

00:35:24,430 --> 00:35:30,880
everyone is just welcome to join the

00:35:27,609 --> 00:35:33,339
efforts and contribute to save young and

00:35:30,880 --> 00:35:38,740
most importantly to make Debian used on

00:35:33,339 --> 00:35:40,990
this kind of IT infrastructures that was

00:35:38,740 --> 00:35:44,870
all for me thank you for listening and

00:35:40,990 --> 00:35:49,949
if you have questions I will be happy to

00:35:44,870 --> 00:35:49,949
[Applause]

00:35:58,940 --> 00:36:06,240
thank you for that talk and I have one

00:36:02,130 --> 00:36:08,250
question about from the business side is

00:36:06,240 --> 00:36:10,230
it possible to for the companies that

00:36:08,250 --> 00:36:12,360
have the hardware InfiniBand harder for

00:36:10,230 --> 00:36:16,050
example the to test a sapien in a beta

00:36:12,360 --> 00:36:19,200
mode yeah it's it will be I mean like I

00:36:16,050 --> 00:36:25,530
said earlier we will publish all our

00:36:19,200 --> 00:36:29,430
packages quite soon I can keep you touch

00:36:25,530 --> 00:36:33,900
it whenever it's it's done and when it's

00:36:29,430 --> 00:36:36,290
published you can grab it and test it we

00:36:33,900 --> 00:36:39,870
we have some Twitter account that is not

00:36:36,290 --> 00:36:44,760
very used but all announcements will go

00:36:39,870 --> 00:36:46,470
through it so you can stick still ok

00:36:44,760 --> 00:36:50,850
another question in there you get to the

00:36:46,470 --> 00:36:53,460
kernel side yeah so why you to use the

00:36:50,850 --> 00:36:58,670
kernel of debian instead of upstream

00:36:53,460 --> 00:37:02,760
kernel plus security patches from Devon

00:36:58,670 --> 00:37:04,800
I'm not sure I understand the question

00:37:02,760 --> 00:37:07,680
I mean Debian's kernel is the streams

00:37:04,800 --> 00:37:11,490
kernel with some security patches and

00:37:07,680 --> 00:37:13,560
some big fixes one thing that is

00:37:11,490 --> 00:37:16,430
important for us that to take into

00:37:13,560 --> 00:37:19,910
account all the environments so that

00:37:16,430 --> 00:37:22,980
includes servers and workstations so

00:37:19,910 --> 00:37:25,470
manufacturers might recommend some

00:37:22,980 --> 00:37:28,800
specific kernel version for HPC clusters

00:37:25,470 --> 00:37:32,460
but it's not suitable for workstations

00:37:28,800 --> 00:37:34,440
for example and we want to keep full

00:37:32,460 --> 00:37:37,380
binary compatibility between all the

00:37:34,440 --> 00:37:40,800
environments so we cannot diverge from

00:37:37,380 --> 00:37:45,290
Debian's kernel and yeah and sometimes

00:37:40,800 --> 00:37:48,210
we take manufacturers stacks and we

00:37:45,290 --> 00:37:51,450
blackboard them or port them to the

00:37:48,210 --> 00:37:55,320
table kernel because I already did that

00:37:51,450 --> 00:37:57,970
it's doable either for the storage

00:37:55,320 --> 00:38:02,799
software like GPFS or luster or

00:37:57,970 --> 00:38:05,589
offered the stuff okay I have a couple I

00:38:02,799 --> 00:38:07,480
have a couple of questions um so he said

00:38:05,589 --> 00:38:08,710
Debian has a three year release cycle

00:38:07,480 --> 00:38:13,059
but I think in the last couple years it

00:38:08,710 --> 00:38:15,099
was mostly two years so what would be F

00:38:13,059 --> 00:38:19,390
want Debian to have as a release cycle

00:38:15,099 --> 00:38:22,270
and or would it make sense to skip every

00:38:19,390 --> 00:38:24,130
second release have little LTS for if

00:38:22,270 --> 00:38:25,480
you have to Reese two-year release cycle

00:38:24,130 --> 00:38:28,569
skip every second release and then have

00:38:25,480 --> 00:38:31,720
a seven to 10-year support for that and

00:38:28,569 --> 00:38:35,680
so not to have LTS for every release we

00:38:31,720 --> 00:38:38,109
have any opinion on that we try to skip

00:38:35,680 --> 00:38:42,039
some releases in the past we skipped

00:38:38,109 --> 00:38:47,650
wizzy we went from squeezed with the

00:38:42,039 --> 00:38:52,720
three dot - Carole - Jesse yeah

00:38:47,650 --> 00:38:54,700
it was a bad experience because when

00:38:52,720 --> 00:38:57,670
you're trying to port business

00:38:54,700 --> 00:38:58,240
applications from Debian X to Debian X

00:38:57,670 --> 00:39:01,210
plus two

00:38:58,240 --> 00:39:04,690
it's harder than doing it gradually and

00:39:01,210 --> 00:39:08,289
for every release so if you want to make

00:39:04,690 --> 00:39:10,750
the maintenance and portage easier you

00:39:08,289 --> 00:39:12,700
have some how to follow Debian releases

00:39:10,750 --> 00:39:15,010
that could be done in development I mean

00:39:12,700 --> 00:39:16,180
you don't need to deploy it not sure I

00:39:15,010 --> 00:39:18,970
don't know

00:39:16,180 --> 00:39:24,220
yeah but they deploy new versions quite

00:39:18,970 --> 00:39:27,789
often at least every couple of years so

00:39:24,220 --> 00:39:30,849
for now the release cycle of Debian is

00:39:27,789 --> 00:39:34,210
well-suited for our needs and with what

00:39:30,849 --> 00:39:38,589
I showed earlier about the yeah this

00:39:34,210 --> 00:39:42,010
life cycle we found our ways to work

00:39:38,589 --> 00:39:43,869
around the few things that did it wasn't

00:39:42,010 --> 00:39:45,819
burns fit well for us I mean my main

00:39:43,869 --> 00:39:47,680
point is that there I talked to several

00:39:45,819 --> 00:39:51,930
other companies and they also need LTS

00:39:47,680 --> 00:39:54,910
and if it's way longer than five years

00:39:51,930 --> 00:39:56,289
telling the LTS team to support every W

00:39:54,910 --> 00:39:57,760
release for like seven years or

00:39:56,289 --> 00:40:00,220
something is not going to work so maybe

00:39:57,760 --> 00:40:02,529
it's useful that some companies come

00:40:00,220 --> 00:40:03,910
together and pick a Debian release or

00:40:02,529 --> 00:40:05,410
every second every release and say okay

00:40:03,910 --> 00:40:07,809
we want to have LTS for that but longer

00:40:05,410 --> 00:40:09,059
but I don't know okay we can discuss it

00:40:07,809 --> 00:40:11,720
oh I have another question actually

00:40:09,059 --> 00:40:14,300
actually reminds me of thumb

00:40:11,720 --> 00:40:17,270
that's another reason why people should

00:40:14,300 --> 00:40:22,700
can you can take advantage of Saigon I'm

00:40:17,270 --> 00:40:25,819
not pushing for using it but every when

00:40:22,700 --> 00:40:28,460
when when LTS stops for example really

00:40:25,819 --> 00:40:30,560
it start for squeeze

00:40:28,460 --> 00:40:32,990
we are still maintaining the security

00:40:30,560 --> 00:40:36,650
support for squeeze and all that will

00:40:32,990 --> 00:40:38,060
come into Saigon so it's another also

00:40:36,650 --> 00:40:40,339
reason to use it because it's still

00:40:38,060 --> 00:40:45,319
security supported it's still suitable

00:40:40,339 --> 00:40:49,250
for use in production right well okay

00:40:45,319 --> 00:40:50,540
another question is more about the the

00:40:49,250 --> 00:40:53,119
high performance computing in a sense

00:40:50,540 --> 00:40:55,369
that do you do any recompilation of

00:40:53,119 --> 00:40:56,869
packages I mean the problem sometimes I

00:40:55,369 --> 00:40:59,569
think is would there be in there okay we

00:40:56,869 --> 00:41:01,730
have MD 64 but still we don't we you

00:40:59,569 --> 00:41:05,300
don't use em to natives so basically

00:41:01,730 --> 00:41:08,420
it's a lowest common denominator is

00:41:05,300 --> 00:41:10,430
there any performance problems so that

00:41:08,420 --> 00:41:12,980
do people say no we have to recompile

00:41:10,430 --> 00:41:15,319
plus I don't know exactly what kind of

00:41:12,980 --> 00:41:17,060
scientific libraries you use but do you

00:41:15,319 --> 00:41:20,359
have to recompile them or are people

00:41:17,060 --> 00:41:23,000
less and less true it is less and less

00:41:20,359 --> 00:41:26,050
true that you need to recompile packages

00:41:23,000 --> 00:41:30,410
to get all the performance you can get

00:41:26,050 --> 00:41:34,640
so some R&D engineers do it because they

00:41:30,410 --> 00:41:37,040
want to test all things some weird the

00:41:34,640 --> 00:41:41,300
compilation flags or some stuff like

00:41:37,040 --> 00:41:45,109
that but it's mainly for Rd purposes our

00:41:41,300 --> 00:41:48,319
engineers use so the package at business

00:41:45,109 --> 00:41:50,859
applications we are not even compiled on

00:41:48,319 --> 00:41:53,810
real hardware it's a completely new VM

00:41:50,859 --> 00:41:59,090
and not even with

00:41:53,810 --> 00:42:01,960
with the HPC stack and it works fine and

00:41:59,090 --> 00:42:04,640
we made some conversion in terms of

00:42:01,960 --> 00:42:07,070
benchmarked the same applications

00:42:04,640 --> 00:42:11,120
compiled locally on the cluster and with

00:42:07,070 --> 00:42:15,620
the business diversion package it and we

00:42:11,120 --> 00:42:20,180
didn't find much difference between the

00:42:15,620 --> 00:42:23,990
two versions so it's actually quite ok

00:42:20,180 --> 00:42:27,710
to use some anybody else has a question

00:42:23,990 --> 00:42:29,960
before I totally check over the Q&A ok

00:42:27,710 --> 00:42:32,450
last question um what are you use for a

00:42:29,960 --> 00:42:36,260
PC management I mean just to schedule

00:42:32,450 --> 00:42:39,680
the workloads slurm and we use them on

00:42:36,260 --> 00:42:41,930
all all our HPC clusters ok and we

00:42:39,680 --> 00:42:46,280
contribute to slam a bit with new tools

00:42:41,930 --> 00:42:48,410
on the code inside slow ok I think we're

00:42:46,280 --> 00:42:50,420
running out of time anyway so let's

00:42:48,410 --> 00:42:51,070
thank MIDI again thank you for your

00:42:50,420 --> 00:42:56,500
attention

00:42:51,070 --> 00:42:56,500

YouTube URL: https://www.youtube.com/watch?v=CGxydGt1wNY


