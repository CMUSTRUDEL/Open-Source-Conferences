Title: Debian for Medical Software
Publication date: 2017-12-06
Playlist: DebConf 17
Description: 
	by AndrÃ© Roth

At: DebConf17
https://debconf17.debconf.org/
Room: Rex
Scheduled start: 2017-08-07 18:00:00
Captions: 
	00:00:05,460 --> 00:00:11,590
welcome I'd like to talk to you a little

00:00:08,530 --> 00:00:15,430
bit about how debian is used for medical

00:00:11,590 --> 00:00:17,800
software my name is Andre wrote I'm a

00:00:15,430 --> 00:00:20,529
they've been passionate since typing

00:00:17,800 --> 00:00:23,109
potato in the past I worked a software

00:00:20,529 --> 00:00:26,679
developer free software trainer and have

00:00:23,109 --> 00:00:28,720
a background in IT security since 2010

00:00:26,679 --> 00:00:33,040
I'm working as a software architect for

00:00:28,720 --> 00:00:36,460
Roche Diagnostics where we develop

00:00:33,040 --> 00:00:40,449
medical instruments in order to give you

00:00:36,460 --> 00:00:45,359
some context on where and how we use

00:00:40,449 --> 00:00:47,920
Debian let me introduce you my employer

00:00:45,359 --> 00:00:49,769
Roche is a global pioneer in

00:00:47,920 --> 00:00:52,059
pharmaceuticals and Diagnostics

00:00:49,769 --> 00:00:54,539
dedicated to advancing science to

00:00:52,059 --> 00:00:58,690
improve human health in meaningful ways

00:00:54,539 --> 00:01:02,530
in 2016 we had over 94 thousand

00:00:58,690 --> 00:01:05,080
employees worldwide and we have a strong

00:01:02,530 --> 00:01:08,350
and decentralized network of 22 RMG

00:01:05,080 --> 00:01:10,299
sites informant Diagnostics I won't go

00:01:08,350 --> 00:01:13,420
into the numbers too much here but I

00:01:10,299 --> 00:01:18,090
find it remarkable that the R&D budget

00:01:13,420 --> 00:01:24,180
in 2016 of about 10 billion US dollars

00:01:18,090 --> 00:01:28,600
puts Roche among the top investors in in

00:01:24,180 --> 00:01:34,810
research and development across the

00:01:28,600 --> 00:01:38,320
industries including the IT world I work

00:01:34,810 --> 00:01:39,610
in the Diagnostics division in central

00:01:38,320 --> 00:01:41,649
Switzerland worried of

00:01:39,610 --> 00:01:45,040
medical instruments for in vitro

00:01:41,649 --> 00:01:47,560
diagnostics now what is in vitro

00:01:45,040 --> 00:01:49,899
diagnostics basically if you go to the

00:01:47,560 --> 00:01:53,500
doctor there is a chance that you will

00:01:49,899 --> 00:01:55,960
have a blood sample taken and this blood

00:01:53,500 --> 00:01:58,000
sample is then analyzed either at the

00:01:55,960 --> 00:02:00,670
doctor's office or is being sent to

00:01:58,000 --> 00:02:03,460
laboratory and the test results then

00:02:00,670 --> 00:02:06,030
help the doctor to decide upon the

00:02:03,460 --> 00:02:06,030
treatment

00:02:06,070 --> 00:02:12,110
these blood samples or other samples are

00:02:09,649 --> 00:02:15,410
analyzed in diagnostic instruments and

00:02:12,110 --> 00:02:17,510
they range from small point-of-care

00:02:15,410 --> 00:02:20,480
devices which might be used in a

00:02:17,510 --> 00:02:23,299
pharmacy or at a hospital it can be

00:02:20,480 --> 00:02:26,330
bigger devices benchtop devices which

00:02:23,299 --> 00:02:28,819
can be used in hospitals there is

00:02:26,330 --> 00:02:31,280
devices used for medical research where

00:02:28,819 --> 00:02:35,209
scientists can develop new treatments

00:02:31,280 --> 00:02:37,030
and new tests and there is a very big

00:02:35,209 --> 00:02:41,349
instruments which are used in large

00:02:37,030 --> 00:02:41,349
laboratories and have a high throughput

00:02:41,799 --> 00:02:48,140
in 2016

00:02:44,599 --> 00:02:51,049
instruments from Roche performed over 17

00:02:48,140 --> 00:02:54,049
billion tests these instruments they

00:02:51,049 --> 00:02:56,750
have a lifetime between 10 and 20 years

00:02:54,049 --> 00:03:01,849
and therefore a variety of operating

00:02:56,750 --> 00:03:03,440
systems are used and these instruments

00:03:01,849 --> 00:03:06,829
you see here I have something in common

00:03:03,440 --> 00:03:09,200
they have there been inside now Debian

00:03:06,829 --> 00:03:11,359
might not be the only operating system

00:03:09,200 --> 00:03:15,049
they might be multiple of them inside

00:03:11,359 --> 00:03:16,810
especially for big instruments but Linux

00:03:15,049 --> 00:03:20,359
is used for instrument control

00:03:16,810 --> 00:03:24,849
controlling the mechatronics and the

00:03:20,359 --> 00:03:28,519
biomedical processes so in order to

00:03:24,849 --> 00:03:30,230
understand a little bit more and get an

00:03:28,519 --> 00:03:34,989
insight on what's going on in such

00:03:30,230 --> 00:03:41,709
instruments I brought you a small video

00:03:34,989 --> 00:03:41,709
maybe we had out your let me try this

00:03:44,209 --> 00:03:51,799
so do we have any Debian developers here

00:03:49,069 --> 00:03:54,709
Debian maintenance there is actually a

00:03:51,799 --> 00:03:57,950
chance that your package is inside such

00:03:54,709 --> 00:04:00,950
instruments and is involved in complex

00:03:57,950 --> 00:04:07,959
biomedical processes and is actually out

00:04:00,950 --> 00:04:07,959
there helping to save lives so enjoy

00:04:09,549 --> 00:04:15,969
oops come on you can do it

00:04:18,130 --> 00:04:22,680
I'm not sure if the audio is working

00:04:23,160 --> 00:04:27,180
otherwise we do it without audio

00:04:34,860 --> 00:04:37,939
[Music]

00:05:03,440 --> 00:05:07,389
[Music]

00:05:16,440 --> 00:05:25,730
[Music]

00:05:38,280 --> 00:05:41,440
[Music]

00:06:07,500 --> 00:06:12,689
[Music]

00:06:09,559 --> 00:06:14,969
so it might not be commonly known that

00:06:12,689 --> 00:06:16,529
Debian is used in medical instruments

00:06:14,969 --> 00:06:19,499
and I think it might be interesting to

00:06:16,529 --> 00:06:21,869
you to see what is going on this is a

00:06:19,499 --> 00:06:26,099
laboratory which is for example

00:06:21,869 --> 00:06:28,079
analyzing blood donations and blood I

00:06:26,099 --> 00:06:30,179
was amazed to find out it's actually

00:06:28,079 --> 00:06:34,079
among the top ten most expensive liquids

00:06:30,179 --> 00:06:36,629
in the world and you can imagine before

00:06:34,079 --> 00:06:39,389
a blood donation can be used it needs to

00:06:36,629 --> 00:06:47,479
be thoroughly tested and that's what

00:06:39,389 --> 00:06:47,479
these machines are for so

00:06:50,830 --> 00:06:55,780
a little bit of history in the past

00:06:53,730 --> 00:06:58,300
diagnostic instruments were very

00:06:55,780 --> 00:07:04,600
chemistry centric with lot of manual

00:06:58,300 --> 00:07:06,430
processing mono workflows and the

00:07:04,600 --> 00:07:09,040
technology used was basically

00:07:06,430 --> 00:07:11,560
electronics may be various real-time

00:07:09,040 --> 00:07:14,200
operating system a too-small controlling

00:07:11,560 --> 00:07:16,680
software on top with the demand for

00:07:14,200 --> 00:07:19,650
automation and higher throughput

00:07:16,680 --> 00:07:22,450
Diagnostics shifted towards being more

00:07:19,650 --> 00:07:24,790
process centric and with this came the

00:07:22,450 --> 00:07:27,610
need for more complex software standard

00:07:24,790 --> 00:07:33,850
libraries and of course a real operating

00:07:27,610 --> 00:07:35,770
system so because linux has actually

00:07:33,850 --> 00:07:39,100
real time capabilities with some

00:07:35,770 --> 00:07:42,610
patching we were able in 2007 to create

00:07:39,100 --> 00:07:45,850
all roche linux version 1 and was based

00:07:42,610 --> 00:07:47,620
on PTX test from Penghu tronics this is

00:07:45,850 --> 00:07:49,870
a distribution which is completely built

00:07:47,620 --> 00:07:51,910
from sources and we are using a

00:07:49,870 --> 00:07:54,220
real-time kernel with the RT preempt

00:07:51,910 --> 00:07:57,100
patch we had a development environment

00:07:54,220 --> 00:08:00,280
which is punto based where we cross

00:07:57,100 --> 00:08:02,640
compile some c++ modules with custom

00:08:00,280 --> 00:08:04,960
build scripts using cement

00:08:02,640 --> 00:08:10,480
remarkably the footprint of this ROG

00:08:04,960 --> 00:08:13,540
Linux was 24 megabytes and as time goes

00:08:10,480 --> 00:08:17,350
by there is suddenly a need for more

00:08:13,540 --> 00:08:21,070
computing power so in 2010 we released a

00:08:17,350 --> 00:08:26,770
rush Linux 2 which had support for a

00:08:21,070 --> 00:08:29,560
stronger industrial PI PC and this trend

00:08:26,770 --> 00:08:30,940
goes on a couple of years later again we

00:08:29,560 --> 00:08:33,100
had to need to change the hardware

00:08:30,940 --> 00:08:35,800
platform for some more computing power

00:08:33,100 --> 00:08:40,090
and we were thinking about what to do

00:08:35,800 --> 00:08:43,450
for a ROG Linux version 3 the goals were

00:08:40,090 --> 00:08:46,660
to have some modularity to support one

00:08:43,450 --> 00:08:50,140
one a multiple variety of internal

00:08:46,660 --> 00:08:52,740
projects multiple customers and we

00:08:50,140 --> 00:08:54,820
wanted also to have multiple use cases

00:08:52,740 --> 00:08:56,680
so we wanted to have a development

00:08:54,820 --> 00:08:58,690
environment a built-in testing

00:08:56,680 --> 00:09:02,740
environment as well as the production

00:08:58,690 --> 00:09:04,990
image security support and longtime

00:09:02,740 --> 00:09:07,960
support obviously were

00:09:04,990 --> 00:09:10,990
useful and we wanted to have more

00:09:07,960 --> 00:09:14,200
libraries and tools available all this

00:09:10,990 --> 00:09:15,670
by reducing the maintenance effort and

00:09:14,200 --> 00:09:17,800
you can imagine building a distribution

00:09:15,670 --> 00:09:21,390
form from source each time you have a

00:09:17,800 --> 00:09:25,690
new hardware platform that's not very

00:09:21,390 --> 00:09:31,060
ideal so we came up with some evaluation

00:09:25,690 --> 00:09:34,990
criterias for doing this and the main

00:09:31,060 --> 00:09:36,700
criteria was maybe cost efficiency we

00:09:34,990 --> 00:09:40,030
wanted to reduce the migration effort

00:09:36,700 --> 00:09:42,460
for our internal customers we wanted to

00:09:40,030 --> 00:09:44,560
look at what are the licenses and what

00:09:42,460 --> 00:09:47,830
is the commercial support for different

00:09:44,560 --> 00:09:50,380
Linux distributions out there we wanted

00:09:47,830 --> 00:09:52,810
also to have a look at legal issues and

00:09:50,380 --> 00:09:56,470
how much the developers would need

00:09:52,810 --> 00:09:59,170
training another criteria was

00:09:56,470 --> 00:10:00,970
flexibility as said before we wanted to

00:09:59,170 --> 00:10:02,830
have some modularity for supporting

00:10:00,970 --> 00:10:05,440
multiple intern clients

00:10:02,830 --> 00:10:07,710
easy add of new hardware support while

00:10:05,440 --> 00:10:10,230
keeping the footprint small

00:10:07,710 --> 00:10:12,940
configurability would help them to have

00:10:10,230 --> 00:10:15,880
development setups different test setups

00:10:12,940 --> 00:10:19,600
and things usability was very important

00:10:15,880 --> 00:10:22,330
as well we wanted to have many tools

00:10:19,600 --> 00:10:27,640
available and convenience for for the

00:10:22,330 --> 00:10:29,980
developers and for the users our

00:10:27,640 --> 00:10:34,000
instruments being very long in the field

00:10:29,980 --> 00:10:38,050
so long longevity was very important to

00:10:34,000 --> 00:10:39,790
long term support reproducibility and we

00:10:38,050 --> 00:10:42,460
wanted to have some kind of community

00:10:39,790 --> 00:10:44,950
around it so that it's a distribution

00:10:42,460 --> 00:10:48,940
that is useful and will be able

00:10:44,950 --> 00:10:52,210
available a long time last but not least

00:10:48,940 --> 00:10:55,810
reliability we wanted to have software

00:10:52,210 --> 00:11:00,190
upgrades and security support usually

00:10:55,810 --> 00:11:03,580
what you do then in a company setup you

00:11:00,190 --> 00:11:05,940
do a make or buy decision and make would

00:11:03,580 --> 00:11:10,180
be to build an embedded distribution

00:11:05,940 --> 00:11:14,110
like PTX test we had or maybe use a

00:11:10,180 --> 00:11:16,390
mainline distribution like Debian buy

00:11:14,110 --> 00:11:18,019
there are several commercial embedded

00:11:16,390 --> 00:11:20,829
products we could buy

00:11:18,019 --> 00:11:24,559
and the group of people then analyzing

00:11:20,829 --> 00:11:26,480
these options they they felt that this

00:11:24,559 --> 00:11:30,379
does not kind and that does not really

00:11:26,480 --> 00:11:32,989
reflect the reality so they came up with

00:11:30,379 --> 00:11:35,889
a way to present this to the management

00:11:32,989 --> 00:11:38,660
and they invented the extension of the

00:11:35,889 --> 00:11:42,199
make or buy decision it's to make take

00:11:38,660 --> 00:11:45,949
or buy decision because as well as for

00:11:42,199 --> 00:11:48,139
the free or commercial and better

00:11:45,949 --> 00:11:48,949
distribution you have to build it from

00:11:48,139 --> 00:11:52,489
scratch

00:11:48,949 --> 00:11:55,399
now maybe new make was not originally

00:11:52,489 --> 00:11:59,720
the idea p-tech be behind make or buy

00:11:55,399 --> 00:12:01,399
decision but for commercial and the free

00:11:59,720 --> 00:12:04,100
and bad distribution you need to build

00:12:01,399 --> 00:12:06,559
everything and the opposite to that

00:12:04,100 --> 00:12:08,839
would be to take pre-built binary

00:12:06,559 --> 00:12:12,439
packages something which our mainline

00:12:08,839 --> 00:12:14,929
distribution like turbine provides we

00:12:12,439 --> 00:12:17,029
were able to prove that the commercial

00:12:14,929 --> 00:12:21,529
vendors were not faster in releasing

00:12:17,029 --> 00:12:25,279
security fixes than Debian and so also

00:12:21,529 --> 00:12:29,449
with the other criterias we analyzed

00:12:25,279 --> 00:12:34,249
Debian was way ahead so we managed to

00:12:29,449 --> 00:12:40,639
choose Debian as a distribution for our

00:12:34,249 --> 00:12:45,170
ROG Linux version 3 so our lx3 came out

00:12:40,639 --> 00:12:47,779
in 2013 it was based on Debian wheezy we

00:12:45,170 --> 00:12:49,850
had the same real-time kernel we were

00:12:47,779 --> 00:12:53,420
using the same custom build scripts

00:12:49,850 --> 00:12:54,829
based on C make but we did not have to

00:12:53,420 --> 00:12:56,959
need any more to maintain the

00:12:54,829 --> 00:12:59,749
cross-compiling tool chain so the tool

00:12:56,959 --> 00:13:03,529
train is integrated in Debian which

00:12:59,749 --> 00:13:06,589
saved us a lot of efforts we were able

00:13:03,529 --> 00:13:09,589
to do internal repository mirrors with

00:13:06,589 --> 00:13:14,600
ugly ugly being the Swiss Army knife of

00:13:09,589 --> 00:13:16,970
Debian repositories and with this we

00:13:14,600 --> 00:13:20,029
could then provision with ansible and

00:13:16,970 --> 00:13:24,699
provide Linux containers and production

00:13:20,029 --> 00:13:24,699
images directly from those repositories

00:13:25,200 --> 00:13:30,720
what you also get from Debian is

00:13:27,600 --> 00:13:32,550
security support for free and we were

00:13:30,720 --> 00:13:38,220
very comfortable to the development

00:13:32,550 --> 00:13:40,680
environment based on Ubuntu in 2015 then

00:13:38,220 --> 00:13:43,320
we added the Debian chassis support to

00:13:40,680 --> 00:13:45,090
our Alex 3 and we were surprised to see

00:13:43,320 --> 00:13:55,530
that the transition to systemd was

00:13:45,090 --> 00:13:57,990
rather easy and well prepared so quick

00:13:55,530 --> 00:14:00,630
look at the development environment we

00:13:57,990 --> 00:14:05,160
had a local Ubuntu installation before

00:14:00,630 --> 00:14:08,160
and in last year actually Raj global IT

00:14:05,160 --> 00:14:10,830
then started providing the rush Linux

00:14:08,160 --> 00:14:15,180
client this is basically the laptop I

00:14:10,830 --> 00:14:19,070
have here based on Ubuntu 1604 again

00:14:15,180 --> 00:14:22,200
based on internal Debian repositories

00:14:19,070 --> 00:14:22,830
the staging is done with Foreman and

00:14:22,200 --> 00:14:25,020
ansible

00:14:22,830 --> 00:14:27,780
and with the configuration management

00:14:25,020 --> 00:14:31,830
allowed us then to automate the

00:14:27,780 --> 00:14:33,690
validation and qualification with this

00:14:31,830 --> 00:14:35,970
we were able to support rolling upgrade

00:14:33,690 --> 00:14:37,890
so all the future long-term support

00:14:35,970 --> 00:14:41,220
releases will be supported

00:14:37,890 --> 00:14:43,680
out-of-the-box the key features which I

00:14:41,220 --> 00:14:46,860
find pretty neat is that we have full

00:14:43,680 --> 00:14:49,920
enterprise integration I get from my

00:14:46,860 --> 00:14:52,560
company a Linux laptop where I'm able to

00:14:49,920 --> 00:14:56,070
have my user login I'm able to print

00:14:52,560 --> 00:14:58,650
I have wireless network access in every

00:14:56,070 --> 00:15:01,740
rush site and I can also have remote

00:14:58,650 --> 00:15:04,530
access using VPN I think this is pretty

00:15:01,740 --> 00:15:10,290
remarkable as well as we get worldwide

00:15:04,530 --> 00:15:12,240
support rush internally IT support just

00:15:10,290 --> 00:15:14,750
to put this in perspective

00:15:12,240 --> 00:15:18,870
Raj globe light is providing about

00:15:14,750 --> 00:15:22,580
120,000 Windows clients there is like 14

00:15:18,870 --> 00:15:27,890
15,000 Mac OS PI's clients and we have

00:15:22,580 --> 00:15:27,890
300 roughly new clients and Counting

00:15:28,100 --> 00:15:34,170
ok when you want to develop medical

00:15:32,100 --> 00:15:37,290
software medical instruments you're in a

00:15:34,170 --> 00:15:38,550
regulated environment this means each

00:15:37,290 --> 00:15:41,490
country has

00:15:38,550 --> 00:15:44,550
Nitori of 40 in u.s. this is the food

00:15:41,490 --> 00:15:46,950
and drug and his administration fda and

00:15:44,550 --> 00:15:49,769
you have to follow strict processes too

00:15:46,950 --> 00:15:52,410
extensive documentation every tool you

00:15:49,769 --> 00:15:56,100
wanna use needs to be validated and the

00:15:52,410 --> 00:15:58,470
developers needs to be trained in 2014

00:15:56,100 --> 00:16:00,630
we introduced get for a source code

00:15:58,470 --> 00:16:05,399
management for the linux based software

00:16:00,630 --> 00:16:08,220
and now if a developer needs to use it

00:16:05,399 --> 00:16:11,070
he has to do a training before his

00:16:08,220 --> 00:16:15,839
allowed to use it in order to be

00:16:11,070 --> 00:16:19,380
regulatory compliant also regulatory

00:16:15,839 --> 00:16:21,839
authority mites to audits and ask you to

00:16:19,380 --> 00:16:24,779
build the same version as seven years

00:16:21,839 --> 00:16:29,910
ago and then compared results to see if

00:16:24,779 --> 00:16:32,550
your processes are reproducible what

00:16:29,910 --> 00:16:35,970
does this mean for building medical

00:16:32,550 --> 00:16:39,600
software I found a nice study online

00:16:35,970 --> 00:16:42,959
which shows pretty similar thing to what

00:16:39,600 --> 00:16:44,630
we are doing we need to ensure the

00:16:42,959 --> 00:16:47,160
reproducibility of the build process

00:16:44,630 --> 00:16:49,950
which needs to be auditable and

00:16:47,160 --> 00:16:52,079
recordable we need to have a predictable

00:16:49,950 --> 00:16:57,149
environment for unit and integration

00:16:52,079 --> 00:17:00,000
testing we cannot use external sources

00:16:57,149 --> 00:17:03,089
so no internet downloads maybe you

00:17:00,000 --> 00:17:06,510
remember in an outsize incident left pad

00:17:03,089 --> 00:17:09,300
incident last year and that's of course

00:17:06,510 --> 00:17:11,429
no go so we need to have in-house

00:17:09,300 --> 00:17:15,120
internal sources for everything we do

00:17:11,429 --> 00:17:19,319
also for the tools and development

00:17:15,120 --> 00:17:22,640
machines also we need to provide audit

00:17:19,319 --> 00:17:25,290
information for regulatory authorities

00:17:22,640 --> 00:17:29,360
of course developers should then be able

00:17:25,290 --> 00:17:32,760
to easily and reliably perform builds

00:17:29,360 --> 00:17:35,040
this is how our raj linux redevelopment

00:17:32,760 --> 00:17:39,030
stack looks like we run on top of one

00:17:35,040 --> 00:17:40,800
two and we spawn a couple of Linux

00:17:39,030 --> 00:17:43,740
containers which then can run different

00:17:40,800 --> 00:17:46,650
versions for maybe different projects in

00:17:43,740 --> 00:17:48,929
some projects of this raj linux 3 where

00:17:46,650 --> 00:17:54,929
people can reliably

00:17:48,929 --> 00:17:58,740
work developing with it provisioning

00:17:54,929 --> 00:18:00,389
then looks as follows we have on an

00:17:58,740 --> 00:18:01,950
instrument maybe multiple software

00:18:00,389 --> 00:18:03,869
layers there might be a hardware

00:18:01,950 --> 00:18:07,139
abstraction layer might several

00:18:03,869 --> 00:18:10,769
frameworks we have a business logic and

00:18:07,139 --> 00:18:12,600
there might be other tools not to forget

00:18:10,769 --> 00:18:15,480
about software testing which does not

00:18:12,600 --> 00:18:17,940
end up on the final product but which is

00:18:15,480 --> 00:18:20,639
kind of urgent the same way as the rest

00:18:17,940 --> 00:18:27,360
of the software and with unstable we can

00:18:20,639 --> 00:18:29,580
then build images or Linux containers so

00:18:27,360 --> 00:18:33,200
the benefits from using Debian for

00:18:29,580 --> 00:18:35,429
medical software is that we have a high

00:18:33,200 --> 00:18:38,759
reproducibility by using internal

00:18:35,429 --> 00:18:43,649
mirrors we have security support for

00:18:38,759 --> 00:18:46,799
free and the reliability when Debian

00:18:43,649 --> 00:18:49,279
releases it stable so and this is a

00:18:46,799 --> 00:18:52,369
different stable as may be other

00:18:49,279 --> 00:18:54,360
distributions we really like that

00:18:52,369 --> 00:19:00,029
also that we have the tool chain

00:18:54,360 --> 00:19:03,690
integrated which means new compilers or

00:19:00,029 --> 00:19:05,549
even Java or even dotnet it's integrated

00:19:03,690 --> 00:19:08,369
into the distribution we do not need to

00:19:05,549 --> 00:19:12,539
maintain an external tool chain which is

00:19:08,369 --> 00:19:15,629
great that saves a lot of effort also we

00:19:12,539 --> 00:19:18,509
have high modularity which allows us to

00:19:15,629 --> 00:19:20,850
keep the footprint quite low we also

00:19:18,509 --> 00:19:24,740
have commercial support from a local

00:19:20,850 --> 00:19:29,240
company similar to some other Linux

00:19:24,740 --> 00:19:33,409
which helps us with doing Linux stuff

00:19:29,240 --> 00:19:36,149
then Debian has a great community and

00:19:33,409 --> 00:19:39,590
you can just google for a problem and

00:19:36,149 --> 00:19:43,619
almost everything find a good answer

00:19:39,590 --> 00:19:45,179
another plus is that for Debian based

00:19:43,619 --> 00:19:47,149
operating system there's a high

00:19:45,179 --> 00:19:50,159
acceptance factor people might have

00:19:47,149 --> 00:19:52,320
played around with raspbian or Ubuntu at

00:19:50,159 --> 00:19:54,840
home even if they are not Linux

00:19:52,320 --> 00:19:59,029
developers they might have gotten in

00:19:54,840 --> 00:19:59,029
touch with apt-get install and things

00:19:59,590 --> 00:20:04,100
then very important for a medical

00:20:02,240 --> 00:20:07,100
software we need to generate a lot of

00:20:04,100 --> 00:20:08,930
documentation each package which ends up

00:20:07,100 --> 00:20:12,560
on an instrument we need to put in a

00:20:08,930 --> 00:20:16,370
list of off-the-shelf software and have

00:20:12,560 --> 00:20:18,890
the license and version written down

00:20:16,370 --> 00:20:21,770
even if these crates of 500 pages

00:20:18,890 --> 00:20:26,540
document but having this automated is a

00:20:21,770 --> 00:20:28,940
great deal of course last but not least

00:20:26,540 --> 00:20:31,400
the cryptographic verification of the

00:20:28,940 --> 00:20:37,280
package sources and the packages itself

00:20:31,400 --> 00:20:40,460
are very interesting then there is all

00:20:37,280 --> 00:20:44,270
the tools all these tools T bootstrap

00:20:40,460 --> 00:20:48,200
debhelper for building levian packages

00:20:44,270 --> 00:20:51,290
or simply to like aptitude Y which which

00:20:48,200 --> 00:20:54,500
tells you why a package is installed on

00:20:51,290 --> 00:20:54,710
a system is very very handy for what we

00:20:54,500 --> 00:20:57,800
do

00:20:54,710 --> 00:21:00,080
also there is DEP SEC on a scanner

00:20:57,800 --> 00:21:01,820
security scanner for the packages on

00:21:00,080 --> 00:21:04,550
your installations which compares it

00:21:01,820 --> 00:21:09,290
with online vulnerabilities telling you

00:21:04,550 --> 00:21:15,170
exactly in what state your system is so

00:21:09,290 --> 00:21:17,900
it basically Debian is just fun using

00:21:15,170 --> 00:21:19,520
and and very helpful we launched several

00:21:17,900 --> 00:21:22,250
instruments successfully in the past

00:21:19,520 --> 00:21:31,100
years based on the setup you've just

00:21:22,250 --> 00:21:33,560
seen great so what now what about the

00:21:31,100 --> 00:21:37,880
future there's new challenges these

00:21:33,560 --> 00:21:40,010
laboratories are getting bigger and we

00:21:37,880 --> 00:21:42,890
are like other industries in a digital

00:21:40,010 --> 00:21:45,950
transformation we come from manual

00:21:42,890 --> 00:21:50,110
workflows we are process centric now the

00:21:45,950 --> 00:21:53,690
future will be much more data centric so

00:21:50,110 --> 00:21:56,720
things like containers and docker are a

00:21:53,690 --> 00:21:58,610
topic we will have maybe parts of an

00:21:56,720 --> 00:22:00,890
instrument running in the cloud running

00:21:58,610 --> 00:22:04,610
some algorithms in the clouds there is

00:22:00,890 --> 00:22:06,350
big and smart item instruments are

00:22:04,610 --> 00:22:09,500
getting smaller as well so ARM

00:22:06,350 --> 00:22:12,290
architecture is a topic and Microsoft

00:22:09,500 --> 00:22:14,930
really helped a lot in pushing

00:22:12,290 --> 00:22:17,540
don't net for Linux we have a lot of

00:22:14,930 --> 00:22:20,150
tonight software and so if we can this

00:22:17,540 --> 00:22:21,020
run on gnu/linux by using mono this is

00:22:20,150 --> 00:22:23,990
just great

00:22:21,020 --> 00:22:27,340
the list goes on this is just a small

00:22:23,990 --> 00:22:29,690
overview of what might happen and

00:22:27,340 --> 00:22:31,760
whenever there is a lot of software a

00:22:29,690 --> 00:22:36,340
lot of connectivity there is security

00:22:31,760 --> 00:22:36,340
issues I found a nice study from

00:22:37,420 --> 00:22:43,250
2015-2016 which actually shows that in

00:22:40,910 --> 00:22:45,310
u.s. thirty five percent of the

00:22:43,250 --> 00:22:48,110
certified percent of the cyber security

00:22:45,310 --> 00:22:51,650
incidents were actually targeted to the

00:22:48,110 --> 00:22:54,440
healthcare industry way above other

00:22:51,650 --> 00:22:57,350
industries need to relativize these

00:22:54,440 --> 00:22:59,510
numbers a bit the number rose but the

00:22:57,350 --> 00:23:03,770
actual size of the incident decreased

00:22:59,510 --> 00:23:06,140
and also this includes phishing and

00:23:03,770 --> 00:23:09,380
social engineering only fourteen percent

00:23:06,140 --> 00:23:12,830
are actually vendors of maybe medical

00:23:09,380 --> 00:23:15,440
infrastructure and instruments and you

00:23:12,830 --> 00:23:18,140
might have heard also the National

00:23:15,440 --> 00:23:20,930
Health Service in UK had some problems

00:23:18,140 --> 00:23:25,550
with ransomware so it's definitely a

00:23:20,930 --> 00:23:26,740
topic also and this is from 2015 from

00:23:25,550 --> 00:23:29,300
the study

00:23:26,740 --> 00:23:31,970
it showed that healthcare is nearly

00:23:29,300 --> 00:23:37,460
taking twice as long as other industries

00:23:31,970 --> 00:23:40,340
to respond to security threats that's a

00:23:37,460 --> 00:23:45,290
challenge and also the FDA regulatory

00:23:40,340 --> 00:23:46,370
authority recognized this and has new

00:23:45,290 --> 00:23:50,780
recommendations

00:23:46,370 --> 00:23:55,640
since 2016 which actually recommends us

00:23:50,780 --> 00:23:58,250
to fix the vulnerability validated and

00:23:55,640 --> 00:24:03,680
distributed to the customers in no less

00:23:58,250 --> 00:24:07,560
than sixty days not later than 60 days

00:24:03,680 --> 00:24:12,320
after learning from the vulnerability

00:24:07,560 --> 00:24:14,700
so how can we address those challenges

00:24:12,320 --> 00:24:18,330
there is multiple ways of addressing

00:24:14,700 --> 00:24:20,910
these probably but we need to somehow

00:24:18,330 --> 00:24:23,670
integrate new technologies we need to

00:24:20,910 --> 00:24:25,290
have more modularity in our software so

00:24:23,670 --> 00:24:28,140
that we can maybe support partial

00:24:25,290 --> 00:24:31,290
software upgrades and overall we need to

00:24:28,140 --> 00:24:34,740
do much more updates much more software

00:24:31,290 --> 00:24:38,490
testing and somehow embed security in

00:24:34,740 --> 00:24:41,310
the core automation DevOps is a topic

00:24:38,490 --> 00:24:44,520
and the list probably goes on there's a

00:24:41,310 --> 00:24:47,730
lot of solutions possible solutions out

00:24:44,520 --> 00:24:50,600
there we need to investigate so what we

00:24:47,730 --> 00:24:54,000
did from the software architecture

00:24:50,600 --> 00:24:56,820
having had so much benefits from dev

00:24:54,000 --> 00:25:00,350
Debian could experience we're thinking

00:24:56,820 --> 00:25:03,510
well how about doing it the Debian way

00:25:00,350 --> 00:25:05,520
how about we build trust deepen packages

00:25:03,510 --> 00:25:07,650
for everything native deepen packages

00:25:05,520 --> 00:25:10,410
and we provide them with Debian

00:25:07,650 --> 00:25:12,780
repositories this would mean that these

00:25:10,410 --> 00:25:16,950
software layers just become entries in

00:25:12,780 --> 00:25:18,870
Europe sources list version entries so

00:25:16,950 --> 00:25:21,750
each component is a version TP and

00:25:18,870 --> 00:25:24,000
repository and with this deep in

00:25:21,750 --> 00:25:26,810
repositories become the single source of

00:25:24,000 --> 00:25:29,790
truth which is always a good thing

00:25:26,810 --> 00:25:32,700
we could write a get rid of magic

00:25:29,790 --> 00:25:35,040
scripting around it get rid of glue code

00:25:32,700 --> 00:25:40,760
and and things and just use what their

00:25:35,040 --> 00:25:44,190
being is providing so this would then be

00:25:40,760 --> 00:25:46,320
like a full systemd bootstrap we could

00:25:44,190 --> 00:25:50,010
just up get install a top level package

00:25:46,320 --> 00:25:52,590
and this would install with dependencies

00:25:50,010 --> 00:25:55,680
everything we need including the whole

00:25:52,590 --> 00:25:57,870
configuration for a system remember

00:25:55,680 --> 00:26:00,990
we're making instruments so there's no

00:25:57,870 --> 00:26:03,690
user configuring and installing packages

00:26:00,990 --> 00:26:06,120
we know exactly what hardware is there

00:26:03,690 --> 00:26:08,760
what configurations we want to have so

00:26:06,120 --> 00:26:11,070
how about just providing the

00:26:08,760 --> 00:26:13,560
configuration with those d directories

00:26:11,070 --> 00:26:15,900
which are very handy doing some post

00:26:13,560 --> 00:26:19,350
install pray install script we even can

00:26:15,900 --> 00:26:21,890
use proceeding tab conf from within

00:26:19,350 --> 00:26:21,890
those

00:26:22,830 --> 00:26:29,590
how do we get there

00:26:24,809 --> 00:26:32,380
we cannot just ask department are please

00:26:29,590 --> 00:26:34,659
set up an a Debian repository and

00:26:32,380 --> 00:26:36,490
release your package is there we have

00:26:34,659 --> 00:26:38,200
multiple departments multiple groups

00:26:36,490 --> 00:26:41,080
providing different software layers

00:26:38,200 --> 00:26:43,090
maybe and we cannot manually create

00:26:41,080 --> 00:26:45,610
repositories we cannot just log into a

00:26:43,090 --> 00:26:48,730
server and type sum up the commands to

00:26:45,610 --> 00:26:50,380
create a repository we need also to

00:26:48,730 --> 00:26:52,570
manage somehow the dependencies and

00:26:50,380 --> 00:26:54,880
versions and in the end it would be nice

00:26:52,570 --> 00:26:57,460
if we could have some kind of unstable

00:26:54,880 --> 00:27:03,490
testing stable workflow as Debian is

00:26:57,460 --> 00:27:06,640
doing so for analyzing this we built the

00:27:03,490 --> 00:27:10,029
Debian build pipeline this basically is

00:27:06,640 --> 00:27:13,360
a web user interface who allows us to

00:27:10,029 --> 00:27:16,090
manage projects and versions this is the

00:27:13,360 --> 00:27:18,460
map to DPN repositories by using up

00:27:16,090 --> 00:27:22,419
click we can then add git source

00:27:18,460 --> 00:27:25,840
repositories to a project version and we

00:27:22,419 --> 00:27:29,080
of course have role-based access for

00:27:25,840 --> 00:27:32,620
regulatory reasons then behind this we

00:27:29,080 --> 00:27:35,080
have build nodes and if we commit a get

00:27:32,620 --> 00:27:38,020
tagged with a version so triple node

00:27:35,080 --> 00:27:44,049
will use s built in a predictable

00:27:38,020 --> 00:27:46,210
environment - we set up with s crude and

00:27:44,049 --> 00:27:51,580
then we can build for all these

00:27:46,210 --> 00:27:54,570
architectures and all these versions we

00:27:51,580 --> 00:27:58,210
managed to get this pipeline validated

00:27:54,570 --> 00:28:00,549
so we can now officially use it and two

00:27:58,210 --> 00:28:05,140
more tests and then maybe convince a

00:28:00,549 --> 00:28:08,020
project to go to Debian way the

00:28:05,140 --> 00:28:10,570
deployment end allows us to easily

00:28:08,020 --> 00:28:12,880
create from the single source of trust a

00:28:10,570 --> 00:28:14,890
variety of deployments we can create the

00:28:12,880 --> 00:28:17,140
images the containers we can even create

00:28:14,890 --> 00:28:20,169
or curl or virtual machines out of the

00:28:17,140 --> 00:28:25,299
box and this for multiple architectures

00:28:20,169 --> 00:28:28,679
and distributions so that's a lot I

00:28:25,299 --> 00:28:30,880
think we can learn from Debian

00:28:28,679 --> 00:28:33,080
especially the modularity and

00:28:30,880 --> 00:28:36,530
configurability

00:28:33,080 --> 00:28:40,280
the packaging simply outstanding

00:28:36,530 --> 00:28:42,710
the semantic versioning and the

00:28:40,280 --> 00:28:46,400
dependency management are things we

00:28:42,710 --> 00:28:51,020
really like to have in our in our

00:28:46,400 --> 00:28:53,060
software also how to support multiple

00:28:51,020 --> 00:28:56,420
architectures and distribution releases

00:28:53,060 --> 00:28:58,810
and adopt the unstable testing stable

00:28:56,420 --> 00:28:58,810
workflow

00:29:00,790 --> 00:29:06,230
doing some tests with this and playing

00:29:03,440 --> 00:29:08,870
around we have found some pain points so

00:29:06,230 --> 00:29:11,780
if you try to create a Debian package of

00:29:08,870 --> 00:29:13,550
your own kernel and have it in a way

00:29:11,780 --> 00:29:15,980
that you have a headless package as well

00:29:13,550 --> 00:29:17,860
and that you can then in other packages

00:29:15,980 --> 00:29:21,770
build kernel modules that's a bit tricky

00:29:17,860 --> 00:29:25,850
we managed to do it with a couple of

00:29:21,770 --> 00:29:27,650
workarounds also installing software in

00:29:25,850 --> 00:29:30,590
a change root environment can be quite

00:29:27,650 --> 00:29:32,990
tricky because some packages are doing

00:29:30,590 --> 00:29:35,420
modprobe or running sis control commands

00:29:32,990 --> 00:29:38,480
which then of course might mess with

00:29:35,420 --> 00:29:42,230
your hosts kernel and they're special

00:29:38,480 --> 00:29:44,090
packages doing mount procs they mount

00:29:42,230 --> 00:29:46,700
several thing in the proc file system

00:29:44,090 --> 00:29:50,540
like bean fmt support and then you have

00:29:46,700 --> 00:29:52,370
not a very consistent behavior in your

00:29:50,540 --> 00:29:57,260
chain root environment in your final

00:29:52,370 --> 00:30:00,110
setup also debconf if you tap conf in a

00:29:57,260 --> 00:30:02,720
package other package might then need to

00:30:00,110 --> 00:30:04,790
use pre depends in order that the

00:30:02,720 --> 00:30:09,410
configuration is then really applied to

00:30:04,790 --> 00:30:15,020
the system we try to use the source

00:30:09,410 --> 00:30:16,790
format kit and unfortunately there is no

00:30:15,020 --> 00:30:19,070
support for kit modules that's not a

00:30:16,790 --> 00:30:22,220
Debian problem but the kids bundle this

00:30:19,070 --> 00:30:27,320
is creating is actually not able to

00:30:22,220 --> 00:30:29,810
support get some modules so what about

00:30:27,320 --> 00:30:32,300
the future things which are definitely

00:30:29,810 --> 00:30:36,080
interesting to us is the Debian

00:30:32,300 --> 00:30:37,850
reproducible builds and I was very happy

00:30:36,080 --> 00:30:40,550
to see that there is a real-time coming

00:30:37,850 --> 00:30:42,560
back in Debian stretch I think in Jesse

00:30:40,550 --> 00:30:46,040
we didn't have one so this is definitely

00:30:42,560 --> 00:30:47,059
something we gonna check out and what is

00:30:46,040 --> 00:30:49,610
going on with

00:30:47,059 --> 00:30:52,159
a trait for actually building keeping

00:30:49,610 --> 00:30:55,639
packages out from kids that is also very

00:30:52,159 --> 00:30:59,720
interesting for us what I could imagine

00:30:55,639 --> 00:31:02,389
for the future is to use more deviant

00:30:59,720 --> 00:31:06,950
repositories to have a nicely versioned

00:31:02,389 --> 00:31:09,320
workflow and a single source of trust it

00:31:06,950 --> 00:31:11,749
would be nice if we could put regulatory

00:31:09,320 --> 00:31:13,820
information and give in repositories how

00:31:11,749 --> 00:31:15,559
about doing up get build locks and you

00:31:13,820 --> 00:31:18,409
get to build lock for your package or

00:31:15,559 --> 00:31:20,509
aapke test results or even requirements

00:31:18,409 --> 00:31:22,369
and specifications I think for

00:31:20,509 --> 00:31:30,799
regulatory purpose this might be very

00:31:22,369 --> 00:31:34,700
handy coming back to the make take buy

00:31:30,799 --> 00:31:37,460
decision we were able to convince the

00:31:34,700 --> 00:31:39,799
management that it is a give and take so

00:31:37,460 --> 00:31:41,960
we were sponsoring the arti preempt

00:31:39,799 --> 00:31:44,090
mainline project we are now called

00:31:41,960 --> 00:31:46,490
member of the open source automation

00:31:44,090 --> 00:31:52,190
development lab we are also sponsoring

00:31:46,490 --> 00:31:53,869
Debian OTS a long time support and we

00:31:52,190 --> 00:31:58,279
are for the first time sponsoring the

00:31:53,869 --> 00:32:00,470
DEP conf this year having a talk too so

00:31:58,279 --> 00:32:03,799
thank you guys what you do is amazing

00:32:00,470 --> 00:32:06,320
and we really appreciate we also

00:32:03,799 --> 00:32:10,690
contributing some features to some

00:32:06,320 --> 00:32:13,669
project like ugly where we implemented

00:32:10,690 --> 00:32:15,679
acquired by hash functionality and fixed

00:32:13,669 --> 00:32:19,460
on some other bugs and implemented some

00:32:15,679 --> 00:32:26,570
api's we support submit bug reports

00:32:19,460 --> 00:32:30,049
where we can and basically that's it

00:32:26,570 --> 00:32:33,490
from my presentation so now I would be

00:32:30,049 --> 00:32:33,490
happy to answer some of your questions

00:32:38,240 --> 00:32:42,950
there might be a microphone coming

00:32:40,620 --> 00:32:42,950
around

00:32:56,280 --> 00:33:01,770
okay thanks for your talk so this is

00:32:58,920 --> 00:33:04,020
amazing actually so and I have a pile of

00:33:01,770 --> 00:33:06,600
questions which I can't ask here because

00:33:04,020 --> 00:33:09,900
that would really you know explode the

00:33:06,600 --> 00:33:12,090
context but one question is do you have

00:33:09,900 --> 00:33:15,540
Debian developers on borer in your

00:33:12,090 --> 00:33:23,220
company if not could you imagine to have

00:33:15,540 --> 00:33:25,410
some and with regard to actually I mean

00:33:23,220 --> 00:33:27,960
this is amazing having more industries

00:33:25,410 --> 00:33:33,180
like that would be really really awesome

00:33:27,960 --> 00:33:35,430
for Debian so so if you said for example

00:33:33,180 --> 00:33:37,020
security report is for free no it's not

00:33:35,430 --> 00:33:38,790
people are working on that actually and

00:33:37,020 --> 00:33:41,040
we have like you know vention for

00:33:38,790 --> 00:33:43,530
example they actually pay someone on the

00:33:41,040 --> 00:33:46,520
security team I'm not sure how much he's

00:33:43,530 --> 00:33:49,860
paid for his work there but sort of it's

00:33:46,520 --> 00:33:52,470
based on you know okay okay so but so

00:33:49,860 --> 00:33:54,030
there are concepts like like supporting

00:33:52,470 --> 00:33:57,150
people in Debian with actually maybe

00:33:54,030 --> 00:33:59,330
even a home office and and actually

00:33:57,150 --> 00:34:02,510
stabilizing or consolidating your

00:33:59,330 --> 00:34:04,890
foundation of your work so so are there

00:34:02,510 --> 00:34:06,810
among the future plans is there anything

00:34:04,890 --> 00:34:09,330
that could be possible for that to I

00:34:06,810 --> 00:34:11,490
think that could be possible I don't

00:34:09,330 --> 00:34:13,409
know enough to really know I gave a

00:34:11,490 --> 00:34:16,350
qualified answer to this but maybe we

00:34:13,409 --> 00:34:18,000
can talk a bit offline about this we

00:34:16,350 --> 00:34:20,600
have a group of people it's not even

00:34:18,000 --> 00:34:23,460
developers but definitely they've been

00:34:20,600 --> 00:34:25,560
enthusiasts which which are helping with

00:34:23,460 --> 00:34:27,570
things and when we need we get in touch

00:34:25,560 --> 00:34:29,879
with companies external companies

00:34:27,570 --> 00:34:31,889
supporting us and they might then

00:34:29,879 --> 00:34:35,760
actually talk to deepen develop person

00:34:31,889 --> 00:34:38,610
and to things so so I heartily encourage

00:34:35,760 --> 00:34:41,490
you and the enthusiasts in your company

00:34:38,610 --> 00:34:43,020
that they not only as a company but also

00:34:41,490 --> 00:34:45,480
as individuals get in touch with the

00:34:43,020 --> 00:34:47,760
Debian community and that we because I'm

00:34:45,480 --> 00:34:49,560
so surprised actually to see that's why

00:34:47,760 --> 00:34:51,899
we are here yes exactly

00:34:49,560 --> 00:34:54,030
yeah but I'm not I'm not just not about

00:34:51,899 --> 00:34:55,889
the sponsoring level so that's the money

00:34:54,030 --> 00:34:57,750
is great and Deb comes wandering is

00:34:55,889 --> 00:34:59,970
great at Adyar sponsoring too but it

00:34:57,750 --> 00:35:04,140
seems you have quite an expertise in

00:34:59,970 --> 00:35:07,380
your house so and Debian loves and needs

00:35:04,140 --> 00:35:09,600
expertise so I'm looking forward to more

00:35:07,380 --> 00:35:11,490
thank you very much hi my name is Andrea

00:35:09,600 --> 00:35:15,840
Stiller I also thank you very much for

00:35:11,490 --> 00:35:17,910
sponsoring and I have three question I'd

00:35:15,840 --> 00:35:20,100
try to make it short one technical

00:35:17,910 --> 00:35:24,090
question is you are building native

00:35:20,100 --> 00:35:26,070
packages you are using native that's a

00:35:24,090 --> 00:35:29,040
versioning thing we like to have our own

00:35:26,070 --> 00:35:32,040
versions okay so your software and call

00:35:29,040 --> 00:35:33,720
it native or there's maybe the Debian

00:35:32,040 --> 00:35:35,940
source format could be tweaked in

00:35:33,720 --> 00:35:37,890
technical detail we can discuss it that

00:35:35,940 --> 00:35:41,310
exactly that's why use name what what

00:35:37,890 --> 00:35:43,220
I'm actually want to know is we we had

00:35:41,310 --> 00:35:45,930
this table and made team which is

00:35:43,220 --> 00:35:48,780
actually doing something for medical

00:35:45,930 --> 00:35:50,430
software in the widest sense you can

00:35:48,780 --> 00:35:54,020
imagine do you know this that we have

00:35:50,430 --> 00:35:57,540
this team the Debian made team yes okay

00:35:54,020 --> 00:36:01,950
what can we do for you to make your work

00:35:57,540 --> 00:36:03,780
even more let's together definitely we

00:36:01,950 --> 00:36:05,970
are here we are having this presentation

00:36:03,780 --> 00:36:09,870
because we'd like to reach out to young

00:36:05,970 --> 00:36:12,240
DPN guys to your community and let's

00:36:09,870 --> 00:36:16,740
talk okay thank you

00:36:12,240 --> 00:36:20,100
we even had on one of our Sprint's at

00:36:16,740 --> 00:36:22,320
some member from employee also from wall

00:36:20,100 --> 00:36:25,410
she was not obviously he had a lot wash

00:36:22,320 --> 00:36:27,960
email address but I don't know he was on

00:36:25,410 --> 00:36:30,900
one sprint do you know of him he was

00:36:27,960 --> 00:36:33,780
doing some library also maybe colleague

00:36:30,900 --> 00:36:35,730
of yours but you don't know okay then I

00:36:33,780 --> 00:36:37,890
need to dick for for this and then we

00:36:35,730 --> 00:36:40,440
can let's talk later I would yeah I'm

00:36:37,890 --> 00:36:43,050
sure I'm happy are you joining the

00:36:40,440 --> 00:36:46,920
cheese and wine party I think so this

00:36:43,050 --> 00:36:49,410
yeah okay I will also be here the rest

00:36:46,920 --> 00:36:51,720
of the week so I have a question maybe I

00:36:49,410 --> 00:36:54,390
miss it um so you have these labs and

00:36:51,720 --> 00:36:56,700
they're deployed at clients I guess our

00:36:54,390 --> 00:36:59,210
customers rather so how do you do the

00:36:56,700 --> 00:37:01,800
software updates for them are they

00:36:59,210 --> 00:37:03,930
automatically updating do you ship stuff

00:37:01,800 --> 00:37:06,720
to them or can you even talk about that

00:37:03,930 --> 00:37:09,090
is that a big pain point is it like

00:37:06,720 --> 00:37:11,730
quarterly pet releases are you as I said

00:37:09,090 --> 00:37:14,670
we have a lifespan of maybe 20 years for

00:37:11,730 --> 00:37:16,260
some instruments and various generations

00:37:14,670 --> 00:37:17,550
of instruments so there's not one answer

00:37:16,260 --> 00:37:19,350
I can give you

00:37:17,550 --> 00:37:20,500
there is manual updates there is

00:37:19,350 --> 00:37:21,880
automatic updates

00:37:20,500 --> 00:37:24,010
there's a little bit of everything and

00:37:21,880 --> 00:37:26,920
there's a little bit of every operating

00:37:24,010 --> 00:37:31,060
system and version as well so currently

00:37:26,920 --> 00:37:33,880
we are trying to investigate in how we

00:37:31,060 --> 00:37:36,130
could use Debian upgrade mechanisms into

00:37:33,880 --> 00:37:39,000
our instruments this answer your

00:37:36,130 --> 00:37:43,660
question thank you so final question

00:37:39,000 --> 00:37:45,250
yeah final question could you please go

00:37:43,660 --> 00:37:47,230
back to your first slices I think you

00:37:45,250 --> 00:37:53,500
were describing yourself your background

00:37:47,230 --> 00:37:54,790
I think okay I can do that never mind I

00:37:53,500 --> 00:37:58,480
think you mentioned you had a background

00:37:54,790 --> 00:38:05,050
in in training and yeah IT security

00:37:58,480 --> 00:38:07,630
right so is if it's okay for you can you

00:38:05,050 --> 00:38:11,320
describe what your previous role was or

00:38:07,630 --> 00:38:14,290
what her previous job I was in during my

00:38:11,320 --> 00:38:17,680
studies got in touch with Linux and the

00:38:14,290 --> 00:38:19,990
fever took me so my first job I wanted

00:38:17,680 --> 00:38:23,110
absolutely to work with Linux and the

00:38:19,990 --> 00:38:26,470
first job I got was at a startup who was

00:38:23,110 --> 00:38:29,560
giving gnu/linux courses you might know

00:38:26,470 --> 00:38:30,790
the al peek certifications so we were

00:38:29,560 --> 00:38:33,130
basically the first ones in Switzerland

00:38:30,790 --> 00:38:34,780
giving those courses okay

00:38:33,130 --> 00:38:38,140
and what would you say was the hardest

00:38:34,780 --> 00:38:40,960
for you transitioning from that to this

00:38:38,140 --> 00:38:45,160
big company environment using free

00:38:40,960 --> 00:38:47,070
software in this context well it I think

00:38:45,160 --> 00:38:50,740
it was an evolution I was really

00:38:47,070 --> 00:38:53,410
enthusiastic about Linux and then I

00:38:50,740 --> 00:38:55,540
found my way into security if you have a

00:38:53,410 --> 00:38:57,190
look good Linux background you know the

00:38:55,540 --> 00:38:59,080
operating system you know the network's

00:38:57,190 --> 00:39:01,870
you know all the tools and you can

00:38:59,080 --> 00:39:04,390
easily find a job in security and from

00:39:01,870 --> 00:39:07,000
security then you find maybe a way

00:39:04,390 --> 00:39:08,440
through to the medical software industry

00:39:07,000 --> 00:39:11,410
does this answer your question

00:39:08,440 --> 00:39:14,100
thank you okay so we're running out of

00:39:11,410 --> 00:39:17,240
time thanks again for the great talk

00:39:14,100 --> 00:39:19,300
thank you much

00:39:17,240 --> 00:39:19,300

YouTube URL: https://www.youtube.com/watch?v=CuZ_Q492nOM


