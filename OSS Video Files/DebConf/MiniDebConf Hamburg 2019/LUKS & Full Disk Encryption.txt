Title: LUKS & Full Disk Encryption
Publication date: 2019-06-16
Playlist: MiniDebConf Hamburg 2019
Description: 
	by Cyril Brulebois

At: MiniDebConf Hamburg 2019
https://wiki.debian.org/DebianEvents/de/2019/MiniDebConfHamburg
Room: main
Scheduled start: 2019-06-09 17:30:00
Captions: 
	00:00:06,279 --> 00:00:11,960
for the minute yep Kampf and it's cereal

00:00:09,710 --> 00:00:17,600
with his second talk about looks one

00:00:11,960 --> 00:00:19,670
where this looks - yeah thank you so

00:00:17,600 --> 00:00:21,080
let's dive in because there's so many

00:00:19,670 --> 00:00:25,420
things to say

00:00:21,080 --> 00:00:29,450
what is Lux Lux is an acronym for a

00:00:25,420 --> 00:00:32,149
Linux oriented way of earning keys what

00:00:29,450 --> 00:00:35,210
he does is basically providing you with

00:00:32,149 --> 00:00:37,850
disk encryption it works on the block

00:00:35,210 --> 00:00:40,579
device and not on the file system level

00:00:37,850 --> 00:00:43,970
no neither file or directory that's a

00:00:40,579 --> 00:00:47,960
block device so a disk or a partition or

00:00:43,970 --> 00:00:50,090
some of those stuff like that and that

00:00:47,960 --> 00:00:52,460
makes it possible to get full disk

00:00:50,090 --> 00:00:56,239
encryption yayyy let's go get an

00:00:52,460 --> 00:00:58,760
orthography no it seems possible because

00:00:56,239 --> 00:01:00,770
in the installer for many years we've

00:00:58,760 --> 00:01:02,559
got this guy deep partitioning that

00:01:00,770 --> 00:01:05,420
makes it possible to use the entire disk

00:01:02,559 --> 00:01:08,409
while setting a while setting up

00:01:05,420 --> 00:01:11,810
encrypted LVM that sounds good right

00:01:08,409 --> 00:01:14,119
except we've got this more area at the

00:01:11,810 --> 00:01:17,840
beginning of the disk so it's not really

00:01:14,119 --> 00:01:21,009
small with that decides on a VM but it's

00:01:17,840 --> 00:01:23,749
really a couple of hundred megabytes and

00:01:21,009 --> 00:01:26,779
what's inside this first partition is

00:01:23,749 --> 00:01:29,689
slash boot which is unencrypted so clear

00:01:26,779 --> 00:01:31,999
text slash boot partition with boot

00:01:29,689 --> 00:01:34,249
rotor configuration kernel and any

00:01:31,999 --> 00:01:39,770
trauma face so it's not really full disk

00:01:34,249 --> 00:01:42,319
encryption but we can use a feature in

00:01:39,770 --> 00:01:45,049
grub which is called crypto disk which

00:01:42,319 --> 00:01:47,289
makes it possible to actually get rid of

00:01:45,049 --> 00:01:49,189
this specific clear text partition

00:01:47,289 --> 00:01:51,799
basically what happens when that's

00:01:49,189 --> 00:01:52,310
enable is that grub itself is asking for

00:01:51,799 --> 00:01:54,859
the passphrase

00:01:52,310 --> 00:01:56,959
then unlocks the device to find its

00:01:54,859 --> 00:02:00,399
configuration doctrinal and you need to

00:01:56,959 --> 00:02:04,189
remove s so everything is good right

00:02:00,399 --> 00:02:06,469
it's it supports different backends they

00:02:04,189 --> 00:02:09,200
started implementing this crypto this

00:02:06,469 --> 00:02:15,890
feature with jelly for freebsd back in

00:02:09,200 --> 00:02:17,780
2011 and locks for linux since 2014 but

00:02:15,890 --> 00:02:18,500
we've got no support in Debian installer

00:02:17,780 --> 00:02:20,930
yet

00:02:18,500 --> 00:02:24,620
because nobody worked on making that a

00:02:20,930 --> 00:02:26,420
possibility so we had some regular

00:02:24,620 --> 00:02:29,300
complaints from user like why don't you

00:02:26,420 --> 00:02:30,680
provide this specific feature and why

00:02:29,300 --> 00:02:33,680
don't you support it and blah blah blah

00:02:30,680 --> 00:02:36,530
so my time is usually limited because

00:02:33,680 --> 00:02:38,840
many bugs to squash already to support

00:02:36,530 --> 00:02:40,640
new use cases but at some point I have

00:02:38,840 --> 00:02:44,030
people to actually provide me with

00:02:40,640 --> 00:02:48,290
detailed instruction how I could test

00:02:44,030 --> 00:02:50,480
this feature so I got this this posting

00:02:48,290 --> 00:02:53,209
on the Debian good minimus detailing how

00:02:50,480 --> 00:02:55,250
you would achieve it by working around

00:02:53,209 --> 00:02:58,400
the Installer we really want you to have

00:02:55,250 --> 00:03:00,560
a separate unencrypted boot partition or

00:02:58,400 --> 00:03:03,110
you could just follow the guided

00:03:00,560 --> 00:03:06,650
partitioning from Debian installer you

00:03:03,110 --> 00:03:10,400
don't you just leave the installer work

00:03:06,650 --> 00:03:13,370
and do its stuff and then you move the

00:03:10,400 --> 00:03:15,050
clear text slash boot partition from the

00:03:13,370 --> 00:03:18,560
first partition the contents you move it

00:03:15,050 --> 00:03:20,930
into the encrypted partition and then

00:03:18,560 --> 00:03:23,570
you enable crypto despot in grab and

00:03:20,930 --> 00:03:26,360
then you pretend that with wasted space

00:03:23,570 --> 00:03:29,420
and the clear tech stuff is not an issue

00:03:26,360 --> 00:03:32,660
anyway again it's a couple of hundred

00:03:29,420 --> 00:03:35,420
megabytes how you can do that is

00:03:32,660 --> 00:03:37,730
basically from your booted system you

00:03:35,420 --> 00:03:41,420
copy your boot directory somewhere else

00:03:37,730 --> 00:03:43,790
you amount the the partition the clear

00:03:41,420 --> 00:03:46,430
text partition you remove the moon point

00:03:43,790 --> 00:03:49,519
and move back your copy into place at

00:03:46,430 --> 00:03:50,720
this point slash boot it just directory

00:03:49,519 --> 00:03:54,019
in your root filesystem

00:03:50,720 --> 00:03:56,720
but then you need to make sure to tell

00:03:54,019 --> 00:04:00,680
your FS tab file that there is no longer

00:03:56,720 --> 00:04:03,590
partition to mount at this one point

00:04:00,680 --> 00:04:06,650
otherwise you would mask the actual

00:04:03,590 --> 00:04:08,900
contents of your of your disk and then

00:04:06,650 --> 00:04:11,540
enable encrypted e support is basically

00:04:08,900 --> 00:04:14,450
setting a specific option in Italy

00:04:11,540 --> 00:04:16,820
default grub then updating grubs

00:04:14,450 --> 00:04:21,019
configuration and reinstalling the

00:04:16,820 --> 00:04:23,240
needed grub bits onto your device if we

00:04:21,019 --> 00:04:25,729
look at the web configuration file after

00:04:23,240 --> 00:04:28,550
we have enable crypto disk we've got a

00:04:25,729 --> 00:04:31,010
couple of big differences basically we

00:04:28,550 --> 00:04:31,580
are using more modules with insmod

00:04:31,010 --> 00:04:33,590
in

00:04:31,580 --> 00:04:34,639
frictions so crypto discs that's the

00:04:33,590 --> 00:04:37,939
point lux

00:04:34,639 --> 00:04:41,060
that's the point as well G cry blah blah

00:04:37,939 --> 00:04:44,539
blah just crypto stuff that are needed

00:04:41,060 --> 00:04:48,889
for Lux support we are going to dive a

00:04:44,539 --> 00:04:51,860
little later into that and LVM y lv m

00:04:48,889 --> 00:04:54,919
because grub is now booting directly on

00:04:51,860 --> 00:04:59,300
your root filesystem which is on the

00:04:54,919 --> 00:05:00,530
encrypted l vm and that can be seen a

00:04:59,300 --> 00:05:02,840
little below because

00:05:00,530 --> 00:05:06,289
at first we were booting from the first

00:05:02,840 --> 00:05:09,979
disc and the first partition with an MBR

00:05:06,289 --> 00:05:12,500
ms-dos partition type now that's getting

00:05:09,979 --> 00:05:15,409
replaced with a crypt amount call which

00:05:12,500 --> 00:05:18,139
takes a UID so that we can locate the

00:05:15,409 --> 00:05:20,870
right disc and all partition so we don't

00:05:18,139 --> 00:05:23,629
need to specify the first disk and its

00:05:20,870 --> 00:05:27,979
first but partition and then the root

00:05:23,629 --> 00:05:30,919
now becomes some l vm ID and we we know

00:05:27,979 --> 00:05:33,229
what we want to look for and then we are

00:05:30,919 --> 00:05:36,409
trying to find the right device with the

00:05:33,229 --> 00:05:41,150
UID we had for the crypto mount and then

00:05:36,409 --> 00:05:44,360
when we possibly success succeed in

00:05:41,150 --> 00:05:47,659
unlocking this partition we check that

00:05:44,360 --> 00:05:51,020
the l vm ID is a white one some other

00:05:47,659 --> 00:05:53,990
consequence is also that the path to the

00:05:51,020 --> 00:05:56,719
linux kernel and it's in it from FS have

00:05:53,990 --> 00:05:59,539
the slash boot part added because we

00:05:56,719 --> 00:06:01,909
move them into the root filesystem so

00:05:59,539 --> 00:06:04,370
our route is no the really root

00:06:01,909 --> 00:06:08,509
filesystem so we have to mention the

00:06:04,370 --> 00:06:11,690
/boot path anyway what it looks like so

00:06:08,509 --> 00:06:13,909
that's booted with k vm you see some

00:06:11,690 --> 00:06:17,810
nines blah blah blah and booting from

00:06:13,909 --> 00:06:19,969
hard disk we see grab telling us that he

00:06:17,810 --> 00:06:22,310
wants to attempt decrypting the master

00:06:19,969 --> 00:06:24,319
key which unlocks our lock devices and

00:06:22,310 --> 00:06:28,159
now we are getting asked for the

00:06:24,319 --> 00:06:30,680
pathways for a g80 ms-dos 5 so that's an

00:06:28,159 --> 00:06:32,960
extended logical partition in the

00:06:30,680 --> 00:06:36,020
extended partition and we are no longer

00:06:32,960 --> 00:06:38,810
booting from amis ms-dos one it's really

00:06:36,020 --> 00:06:42,319
the the real partition with the

00:06:38,810 --> 00:06:44,240
encryption and LVM inside if we succeed

00:06:42,319 --> 00:06:48,139
in providing the

00:06:44,240 --> 00:06:51,380
a good pass phase we got the slot zero

00:06:48,139 --> 00:06:54,169
open and everything goes on as normal

00:06:51,380 --> 00:06:57,470
we get to see grab start because it has

00:06:54,169 --> 00:07:00,259
access with configuration and then we

00:06:57,470 --> 00:07:03,500
get the same kind of prompt we get when

00:07:00,259 --> 00:07:07,479
we do the regular normal encrypted EDM

00:07:03,500 --> 00:07:10,280
setup this is the do you need from FS

00:07:07,479 --> 00:07:13,669
asking us to provide the password again

00:07:10,280 --> 00:07:16,669
because what we did was unlocking stuff

00:07:13,669 --> 00:07:20,090
at the grub level so the kernel and the

00:07:16,669 --> 00:07:22,639
in the the user space don't have access

00:07:20,090 --> 00:07:25,310
to the keys secret or the unlock device

00:07:22,639 --> 00:07:27,710
so we have to type a second time in the

00:07:25,310 --> 00:07:31,310
pathways it's no big deal if we want

00:07:27,710 --> 00:07:33,199
your full disk to be encrypted and some

00:07:31,310 --> 00:07:36,620
workarounds that you can implement to

00:07:33,199 --> 00:07:39,650
actually skip that part or good then

00:07:36,620 --> 00:07:42,319
because it's been reported to work since

00:07:39,650 --> 00:07:46,009
wizzy which is basically the right

00:07:42,319 --> 00:07:50,289
timing compared to when the lock support

00:07:46,009 --> 00:07:52,550
was added into grab then we just need to

00:07:50,289 --> 00:07:55,430
finally implement self independence all

00:07:52,550 --> 00:07:59,000
right but as you can see there are some

00:07:55,430 --> 00:08:02,810
slides to go so not so quick because if

00:07:59,000 --> 00:08:04,669
you do that with Vesta you get that the

00:08:02,810 --> 00:08:07,310
first failure reading blah blah blah is

00:08:04,669 --> 00:08:09,520
I'm trying to find the right device and

00:08:07,310 --> 00:08:13,610
so I'm trying the floppy disk because

00:08:09,520 --> 00:08:17,449
KVM and then I'm out of devices because

00:08:13,610 --> 00:08:19,610
none of them had this LVM ID why because

00:08:17,449 --> 00:08:22,820
we couldn't find the right device to

00:08:19,610 --> 00:08:26,120
unlock looking them at the configuration

00:08:22,820 --> 00:08:29,690
changes between the the little dance I

00:08:26,120 --> 00:08:34,010
showed before we see that we trade the

00:08:29,690 --> 00:08:39,500
ms-dos so MBR partitioning module for

00:08:34,010 --> 00:08:42,260
LVM directly we remove HD FG 0 ms s1 and

00:08:39,500 --> 00:08:45,250
we switch it with lv m ID but there's no

00:08:42,260 --> 00:08:48,829
crypto mon stuff so it can just not work

00:08:45,250 --> 00:08:51,230
why because that's formatted with locks

00:08:48,829 --> 00:08:55,490
too and not locks one and grab to only

00:08:51,230 --> 00:08:58,070
supports locks one let's summarize that

00:08:55,490 --> 00:09:01,010
in a slide so crit setup default to

00:08:58,070 --> 00:09:04,580
looks to when it creates a new a new

00:09:01,010 --> 00:09:06,590
encrypted volume that's a new n of

00:09:04,580 --> 00:09:10,700
course different on this format which is

00:09:06,590 --> 00:09:13,010
not supported by grab two yet looking at

00:09:10,700 --> 00:09:15,260
it there's an upswing bug report has

00:09:13,010 --> 00:09:17,000
been for a while but basically

00:09:15,260 --> 00:09:18,680
interaction besides me too me too

00:09:17,000 --> 00:09:20,870
I want it it's real mandatory that

00:09:18,680 --> 00:09:23,710
blablablablabla so someone needs to work

00:09:20,870 --> 00:09:26,660
on it so I try to do that let's look

00:09:23,710 --> 00:09:30,260
quickly at the implementation details in

00:09:26,660 --> 00:09:32,750
grab basically we've got grab Co disk

00:09:30,260 --> 00:09:34,790
locks that see which is a couple of

00:09:32,750 --> 00:09:37,340
Android lines so it's not that big

00:09:34,790 --> 00:09:41,720
I don't speak C fluently but it seemed

00:09:37,340 --> 00:09:43,490
manageable if you look this little

00:09:41,720 --> 00:09:46,820
structure basically there are two two

00:09:43,490 --> 00:09:48,770
hooks that are the same for locks and

00:09:46,820 --> 00:09:51,020
for jelly you need to configure the

00:09:48,770 --> 00:09:53,240
ciphers and then you've got another

00:09:51,020 --> 00:09:57,710
function to recover the key when you

00:09:53,240 --> 00:10:00,740
need to type a password this is

00:09:57,710 --> 00:10:04,340
implemented with a c structure which is

00:10:00,740 --> 00:10:06,800
called grub locks physical either with

00:10:04,340 --> 00:10:10,070
many fields inside and those two

00:10:06,800 --> 00:10:12,440
functions the first functions so the

00:10:10,070 --> 00:10:14,540
ciphers configuration is about checking

00:10:12,440 --> 00:10:18,230
that there's a locks header somewhere

00:10:14,540 --> 00:10:22,850
and that you IDs match and that we can

00:10:18,230 --> 00:10:24,980
actually get the right setup for ciphers

00:10:22,850 --> 00:10:28,910
so a yes

00:10:24,980 --> 00:10:30,820
XG s plane 64 or some Kabbalistic name

00:10:28,910 --> 00:10:34,250
like that are enjoyed by this function

00:10:30,820 --> 00:10:38,690
log speakable he is what asked for the

00:10:34,250 --> 00:10:41,810
pathways and then unlocks to key and

00:10:38,690 --> 00:10:43,940
then you can you can try and unlock your

00:10:41,810 --> 00:10:45,500
device maybe it's going to be a failure

00:10:43,940 --> 00:10:47,420
because that doesn't match what was

00:10:45,500 --> 00:10:49,610
expected and you don't get access to the

00:10:47,420 --> 00:10:54,860
master key and you actually can't upload

00:10:49,610 --> 00:10:56,590
unlock your device so if we look it's

00:10:54,860 --> 00:10:59,960
really cabbalistic

00:10:56,590 --> 00:11:04,430
because yeah there are some truncation

00:10:59,960 --> 00:11:07,340
that basically we've got a magic part so

00:11:04,430 --> 00:11:09,980
reading the really first bytes of the of

00:11:07,340 --> 00:11:11,480
the disk there is a magic that tells us

00:11:09,980 --> 00:11:13,430
oh this is looks one

00:11:11,480 --> 00:11:18,440
and of course there's another magic for

00:11:13,430 --> 00:11:21,500
Lex - there's a version which is 1 or 2

00:11:18,440 --> 00:11:24,649
depending on which kind it is and then

00:11:21,500 --> 00:11:30,110
some cipher information so the AES XG s

00:11:24,649 --> 00:11:32,540
stuff some more stuff then we've got

00:11:30,110 --> 00:11:34,339
data about the master key which is what

00:11:32,540 --> 00:11:38,690
we want to unlock using the pass phase

00:11:34,339 --> 00:11:41,449
and then we've got key slots where when

00:11:38,690 --> 00:11:47,060
you set the pathways they are stored

00:11:41,449 --> 00:11:50,720
after some some some operation in key

00:11:47,060 --> 00:11:52,850
slots and when one of the key slots is

00:11:50,720 --> 00:11:57,560
unlocked you didn't get access to the

00:11:52,850 --> 00:12:01,250
master key if you want to to look closer

00:11:57,560 --> 00:12:03,199
at what's inside the key slot all of

00:12:01,250 --> 00:12:06,350
that for for the moment was used by

00:12:03,199 --> 00:12:08,959
configured ciphers so the first welcome

00:12:06,350 --> 00:12:12,170
to this encrypted device function but

00:12:08,959 --> 00:12:14,600
looking more closely at the actual key

00:12:12,170 --> 00:12:18,050
structure we see whether a slot is

00:12:14,600 --> 00:12:22,370
active or not how many iterations are

00:12:18,050 --> 00:12:26,480
done to actually secure your yo-yo kiss

00:12:22,370 --> 00:12:29,300
not the point of relax is making ink

00:12:26,480 --> 00:12:31,639
making it hard to actually boot for your

00:12:29,300 --> 00:12:35,350
your pal your passphrase or pass phrases

00:12:31,639 --> 00:12:38,690
so we got an algorithm called pbkdf2

00:12:35,350 --> 00:12:41,569
which is password-based key derivation

00:12:38,690 --> 00:12:42,970
so you don't have access to the key

00:12:41,569 --> 00:12:46,250
until you enter the right path for

00:12:42,970 --> 00:12:48,860
password and do many many many operation

00:12:46,250 --> 00:12:52,300
on it so you cannot just use the Ripper

00:12:48,860 --> 00:12:56,480
as you were doing 20 plus years ago and

00:12:52,300 --> 00:12:58,730
all of that happens with pbkdf2 that's a

00:12:56,480 --> 00:13:02,720
single algorithm supporting in locks 1

00:12:58,730 --> 00:13:04,760
and you cannot get another one now if we

00:13:02,720 --> 00:13:06,740
look at locks - it's a bit different

00:13:04,760 --> 00:13:08,720
because instead of having a single

00:13:06,740 --> 00:13:11,240
binary header like the one I just

00:13:08,720 --> 00:13:15,620
presented there is a primary binary

00:13:11,240 --> 00:13:18,350
header then a first jason area then a

00:13:15,620 --> 00:13:21,500
second binary later a second JSON area

00:13:18,350 --> 00:13:23,660
and then key slots are somewhere later

00:13:21,500 --> 00:13:24,950
on the disk then you've got some padding

00:13:23,660 --> 00:13:28,490
and then your

00:13:24,950 --> 00:13:31,150
actual encrypted device if we look at

00:13:28,490 --> 00:13:34,190
the proposed implementation from the

00:13:31,150 --> 00:13:36,020
looks to specification there is a see

00:13:34,190 --> 00:13:37,970
structure that makes it possible to

00:13:36,020 --> 00:13:42,470
actually get all the bits and pieces

00:13:37,970 --> 00:13:45,230
from the the binary header we recognize

00:13:42,470 --> 00:13:47,060
the magic so it can be magic first or

00:13:45,230 --> 00:13:49,490
magic second since there are two

00:13:47,060 --> 00:13:51,200
different binary header some other

00:13:49,490 --> 00:13:53,510
information make it impossible to

00:13:51,200 --> 00:13:56,810
validate that the header is actually

00:13:53,510 --> 00:14:00,230
intact there were no random bits written

00:13:56,810 --> 00:14:02,420
here and there but there's absolutely no

00:14:00,230 --> 00:14:04,910
indication regarding the key slots here

00:14:02,420 --> 00:14:07,190
because they are not there so reading

00:14:04,910 --> 00:14:09,530
that see structure is not sufficient to

00:14:07,190 --> 00:14:12,890
actually get access to the keys like it

00:14:09,530 --> 00:14:15,020
was possible in Lux one instead you've

00:14:12,890 --> 00:14:17,510
got to complement what you read from the

00:14:15,020 --> 00:14:21,320
binary header with what's inside the

00:14:17,510 --> 00:14:23,900
JSON header and here we can see there is

00:14:21,320 --> 00:14:26,000
a segment being defined of tie crypt

00:14:23,900 --> 00:14:30,890
with an upset so so that we know where

00:14:26,000 --> 00:14:33,290
it's going to start we are using a 60s

00:14:30,890 --> 00:14:35,510
plain blah blah blah as usual we've got

00:14:33,290 --> 00:14:38,330
some confirmation of those sides of the

00:14:35,510 --> 00:14:40,520
JSON so we can check that what we are

00:14:38,330 --> 00:14:43,280
reading from JSON is actually the right

00:14:40,520 --> 00:14:46,490
size we do not we are not missing some

00:14:43,280 --> 00:14:49,310
bits and pieces and then we've got some

00:14:46,490 --> 00:14:51,830
more information add we check that

00:14:49,310 --> 00:14:55,190
typing a passphrase with one of the

00:14:51,830 --> 00:14:58,100
right key slots we get the actual right

00:14:55,190 --> 00:15:00,320
master key so this is the digest part

00:14:58,100 --> 00:15:03,410
I'm going to skip it if you have more

00:15:00,320 --> 00:15:06,230
questions about that we can see that

00:15:03,410 --> 00:15:08,300
later but the important part are the key

00:15:06,230 --> 00:15:11,900
slots for example here we have a single

00:15:08,300 --> 00:15:16,100
key slot which is of type locks to its

00:15:11,900 --> 00:15:20,390
uses some other old locks one stuff AF

00:15:16,100 --> 00:15:22,160
is for auntie forensics stripes and

00:15:20,390 --> 00:15:25,190
whatever so that's something that

00:15:22,160 --> 00:15:27,530
prevents brute force from happening then

00:15:25,190 --> 00:15:30,620
we've got the location of the key slots

00:15:27,530 --> 00:15:34,670
so that we can go to the latest we are

00:15:30,620 --> 00:15:36,680
after the the four errors and then the

00:15:34,670 --> 00:15:38,810
hard part is the KDF

00:15:36,680 --> 00:15:40,990
so the key derivation function

00:15:38,810 --> 00:15:44,570
now we're not we're no longer using

00:15:40,990 --> 00:15:46,580
pbkdf2 that was static and mandatory as

00:15:44,570 --> 00:15:48,410
with lux one does

00:15:46,580 --> 00:15:50,540
that's our going to I which is a

00:15:48,410 --> 00:15:53,030
brand-new and really safe and really

00:15:50,540 --> 00:15:54,740
hard and blah blah blah I'm going to

00:15:53,030 --> 00:15:58,250
stop here for the JSON because you don't

00:15:54,740 --> 00:16:01,940
want to become lux to JSON exports I'm

00:15:58,250 --> 00:16:04,970
going to keep on and basically what I

00:16:01,940 --> 00:16:08,210
discovered when I saw Oh JSON plus

00:16:04,970 --> 00:16:11,360
binary plus okay maybe I need some more

00:16:08,210 --> 00:16:13,100
libraries but then Oh clip set on

00:16:11,360 --> 00:16:15,140
maintenance contacted us a while ago

00:16:13,100 --> 00:16:17,840
when they switch to crypt set up to as

00:16:15,140 --> 00:16:20,960
the version not the format yet that was

00:16:17,840 --> 00:16:25,700
Joe subversion that started implementing

00:16:20,960 --> 00:16:28,070
argon and JSON stuff so we had a request

00:16:25,700 --> 00:16:29,480
for review for new you DEP so we could

00:16:28,070 --> 00:16:32,210
double check that everything was still

00:16:29,480 --> 00:16:34,730
working fine with those new libraries

00:16:32,210 --> 00:16:36,440
but at that time we were still creating

00:16:34,730 --> 00:16:41,840
looks one devices so everything was

00:16:36,440 --> 00:16:45,170
great but then when I try to use G's and

00:16:41,840 --> 00:16:46,700
see into grub I've got many many

00:16:45,170 --> 00:16:49,910
different build failures because the

00:16:46,700 --> 00:16:51,500
build system is really peculiar because

00:16:49,910 --> 00:16:53,690
it's a bootloader you don't want to

00:16:51,500 --> 00:16:56,180
depend on too many staff and all of that

00:16:53,690 --> 00:16:59,180
must be static and blah blah blah so it

00:16:56,180 --> 00:17:01,670
was it was a no-go for me I didn't

00:16:59,180 --> 00:17:04,760
manage to get Jason C to work to pass

00:17:01,670 --> 00:17:06,740
the JSON area so I switched to another

00:17:04,760 --> 00:17:10,070
tool called Jasmine which is way easier

00:17:06,740 --> 00:17:12,710
because I just a single C other file

00:17:10,070 --> 00:17:16,220
that gets us the token so you don't have

00:17:12,710 --> 00:17:18,080
to use a scanf to actually find the

00:17:16,220 --> 00:17:20,630
strings and the right settings in the

00:17:18,080 --> 00:17:22,880
this long json string but then that's

00:17:20,630 --> 00:17:25,670
tokenizer you don't get a structure you

00:17:22,880 --> 00:17:28,070
don't really get the this is in a way

00:17:25,670 --> 00:17:29,660
this is a key this is an integer this is

00:17:28,070 --> 00:17:31,820
an integral inside the string because of

00:17:29,660 --> 00:17:34,430
course we can and stuff like that so you

00:17:31,820 --> 00:17:38,660
have to pass process the the tokens and

00:17:34,430 --> 00:17:41,210
actually build the actual data structure

00:17:38,660 --> 00:17:43,130
yourself which is a small matter of

00:17:41,210 --> 00:17:47,270
programming but still I'm not fluent in

00:17:43,130 --> 00:17:50,540
C are going to is a key derivation

00:17:47,270 --> 00:17:51,710
function similar to what I mentioned was

00:17:50,540 --> 00:17:55,220
a

00:17:51,710 --> 00:17:57,679
f2 much more recent like two years ago

00:17:55,220 --> 00:18:00,710
it's supposed to be memory hard so

00:17:57,679 --> 00:18:02,570
there's a high requirement on memory you

00:18:00,710 --> 00:18:04,760
need memory to unlock and do your

00:18:02,570 --> 00:18:07,909
calculation and so on to unlock you key

00:18:04,760 --> 00:18:12,110
and for example on this laptop be it

00:18:07,909 --> 00:18:15,559
with the the host or a VM with a small

00:18:12,110 --> 00:18:19,360
amount of RAM I needed more than 600

00:18:15,559 --> 00:18:22,159
megabytes to actually get the slot open

00:18:19,360 --> 00:18:25,100
thankfully grub is apparently able to

00:18:22,159 --> 00:18:28,039
locate up to 5 gigabytes so hopefully

00:18:25,100 --> 00:18:29,990
that should be sufficient and the

00:18:28,039 --> 00:18:33,080
integration challenges are basically

00:18:29,990 --> 00:18:35,990
that there is a static library like for

00:18:33,080 --> 00:18:40,159
Lib Jason C but it's actually not really

00:18:35,990 --> 00:18:42,860
usable because it's created with our RCS

00:18:40,159 --> 00:18:44,990
which basically bundles every build

00:18:42,860 --> 00:18:47,779
result so the dot o files that are

00:18:44,990 --> 00:18:50,899
compiled from the dot C files and then

00:18:47,779 --> 00:18:53,690
every single symbol inside all of those

00:18:50,899 --> 00:18:56,090
objects are visible from the users of

00:18:53,690 --> 00:18:58,429
the static library so you don't want to

00:18:56,090 --> 00:19:00,640
use that especially not in grab so

00:18:58,429 --> 00:19:03,380
usually you would use some lip tool

00:19:00,640 --> 00:19:04,940
linker script to make only this and that

00:19:03,380 --> 00:19:07,760
and that symbol that you need visible

00:19:04,940 --> 00:19:11,779
but that needs some build we'll see some

00:19:07,760 --> 00:19:13,760
changes in argon and even then when you

00:19:11,779 --> 00:19:16,010
try to use the theatres to actually use

00:19:13,760 --> 00:19:18,620
a functionality you need from argon into

00:19:16,010 --> 00:19:21,470
grub there are some system errors that

00:19:18,620 --> 00:19:23,929
are not available in Grubbs build system

00:19:21,470 --> 00:19:27,260
which is really self contained and is

00:19:23,929 --> 00:19:31,100
not using the old kind of user includes

00:19:27,260 --> 00:19:33,590
others you would offer so I've got some

00:19:31,100 --> 00:19:38,750
more built in some tricks to do to

00:19:33,590 --> 00:19:40,549
actually get that to work I got my

00:19:38,750 --> 00:19:43,190
current plan for grub is basically

00:19:40,549 --> 00:19:45,110
documenting my finding on the swing bug

00:19:43,190 --> 00:19:45,919
report like basically if the video is

00:19:45,110 --> 00:19:48,260
working fine

00:19:45,919 --> 00:19:50,809
hey look I'm talking about you making

00:19:48,260 --> 00:19:53,480
sure that we can actually link grub in

00:19:50,809 --> 00:19:56,419
somewhere or another against argon -

00:19:53,480 --> 00:19:58,789
maybe by embedding directly the argon -

00:19:56,419 --> 00:20:02,330
source files into the grub tree which is

00:19:58,789 --> 00:20:04,429
really bad but I'm trying to build a

00:20:02,330 --> 00:20:05,180
proof of concept so it's not that bad

00:20:04,429 --> 00:20:07,160
and

00:20:05,180 --> 00:20:10,850
going to to push up swing to actually

00:20:07,160 --> 00:20:13,640
include that then I need to use jasmine

00:20:10,850 --> 00:20:16,220
and build the data structure tried to

00:20:13,640 --> 00:20:20,420
actually get all the data from the JSON

00:20:16,220 --> 00:20:23,690
structure and then as a first easy step

00:20:20,420 --> 00:20:26,240
I modified the the function I mentioned

00:20:23,690 --> 00:20:28,220
before through a low Lux to because I

00:20:26,240 --> 00:20:29,600
know how to pass the letters and then

00:20:28,220 --> 00:20:32,810
I've got the data structure and so on

00:20:29,600 --> 00:20:34,490
but with pbkdf2 because that's already

00:20:32,810 --> 00:20:37,880
implemented in grab so i don't need to

00:20:34,490 --> 00:20:38,510
use argon right now and then if I manage

00:20:37,880 --> 00:20:43,370
to do that

00:20:38,510 --> 00:20:46,640
I can switch this pbkdf2 usage from the

00:20:43,370 --> 00:20:49,220
embedded code in grab externalize it to

00:20:46,640 --> 00:20:51,980
argon too and if that works I can do

00:20:49,220 --> 00:20:56,030
that for argon to I and I'll go to D

00:20:51,980 --> 00:20:59,390
which is the three algorithm algorithm

00:20:56,030 --> 00:21:01,910
that has supported right now and for

00:20:59,390 --> 00:21:04,960
booster the plan is to document that the

00:21:01,910 --> 00:21:08,150
trick I talked about doesn't work

00:21:04,960 --> 00:21:10,070
implement a new flag Indian solar to

00:21:08,150 --> 00:21:14,260
force the creation of rock Swan and

00:21:10,070 --> 00:21:16,550
update documentation and some more stuff

00:21:14,260 --> 00:21:18,590
that are going to be a bit too long for

00:21:16,550 --> 00:21:21,440
this talk but we can go back to that if

00:21:18,590 --> 00:21:22,760
you've got some specific question and I

00:21:21,440 --> 00:21:25,070
would like to thank them for providing

00:21:22,760 --> 00:21:28,120
another approach like you create your

00:21:25,070 --> 00:21:32,000
encrypted IBM unlocks - and then only

00:21:28,120 --> 00:21:34,190
message your own clear text slash boot

00:21:32,000 --> 00:21:36,230
partition interlocks one partition which

00:21:34,190 --> 00:21:40,190
is supported and then you've got two

00:21:36,230 --> 00:21:42,350
different encryption for /root and the

00:21:40,190 --> 00:21:46,100
rest of the system but the crypto this

00:21:42,350 --> 00:21:48,830
feature works again so thank you so much

00:21:46,100 --> 00:21:51,380
for more interesting things like that

00:21:48,830 --> 00:21:53,510
you can still follow me and blah blah

00:21:51,380 --> 00:21:58,160
blah questions are welcome

00:21:53,510 --> 00:22:01,080
[Applause]

00:21:58,160 --> 00:22:08,250
we have time for a few questions so

00:22:01,080 --> 00:22:10,640
please line up at the microphone one

00:22:08,250 --> 00:22:14,400
quick thing regarding the memory usage

00:22:10,640 --> 00:22:17,130
it's capped tip set up so it's never

00:22:14,400 --> 00:22:20,280
gonna use more than one gig so you're

00:22:17,130 --> 00:22:22,560
fine even so there is a benchmark and if

00:22:20,280 --> 00:22:24,420
you have a lot of if you have a tiny

00:22:22,560 --> 00:22:26,280
device is not gonna use that much memory

00:22:24,420 --> 00:22:28,860
if you have a big device it's gonna use

00:22:26,280 --> 00:22:31,290
more memory but it's kept okay that

00:22:28,860 --> 00:22:33,690
explains why on most I've got basically

00:22:31,290 --> 00:22:37,230
the same memory requirements as I had in

00:22:33,690 --> 00:22:40,080
my very small of yeah I suppose yeah

00:22:37,230 --> 00:22:41,520
it's like six hundred yes five hundred

00:22:40,080 --> 00:22:44,040
or whatever yeah it's not going to

00:22:41,520 --> 00:22:46,200
explode yeah but if you try with a very

00:22:44,040 --> 00:22:48,330
tiny one we'd like two hundred Meg's you

00:22:46,200 --> 00:22:51,960
will have its there is a cap there's a

00:22:48,330 --> 00:22:53,790
hard cap of one gig I think and another

00:22:51,960 --> 00:23:04,650
hard cap of half of the memory

00:22:53,790 --> 00:23:07,050
okay just one quick question do I have a

00:23:04,650 --> 00:23:09,300
security problem if I use full this

00:23:07,050 --> 00:23:11,940
encryption as it is provided right now

00:23:09,300 --> 00:23:15,870
in Debian with the password that is

00:23:11,940 --> 00:23:18,540
powerful enough you've got issues anyway

00:23:15,870 --> 00:23:20,760
if someone has access to your laptop and

00:23:18,540 --> 00:23:22,560
can replace the kernel and whatever but

00:23:20,760 --> 00:23:24,630
if they've got access to your laptop

00:23:22,560 --> 00:23:28,260
they can replace your firmware probably

00:23:24,630 --> 00:23:30,630
if you have no secret so there is an

00:23:28,260 --> 00:23:33,540
issue but that's the same kind of evil

00:23:30,630 --> 00:23:37,320
made attack issue that we've had without

00:23:33,540 --> 00:23:40,620
that kind of setup anyway so it's

00:23:37,320 --> 00:23:43,890
probably more mind appeasing to have the

00:23:40,620 --> 00:23:47,070
entire disk encrypted but then it's all

00:23:43,890 --> 00:23:55,080
about the your attack model anyway

00:23:47,070 --> 00:23:57,180
so more question I would like to extend

00:23:55,080 --> 00:23:59,700
my thanks to kill him again for the

00:23:57,180 --> 00:24:00,750
phone the challenges and more

00:23:59,700 --> 00:24:03,720
importantly the help

00:24:00,750 --> 00:24:06,030
he got me about the talk and all the

00:24:03,720 --> 00:24:06,870
bits I'm diving into right now so thanks

00:24:06,030 --> 00:24:11,750
to him as I

00:24:06,870 --> 00:24:11,750

YouTube URL: https://www.youtube.com/watch?v=YO2gzuZOS1M


