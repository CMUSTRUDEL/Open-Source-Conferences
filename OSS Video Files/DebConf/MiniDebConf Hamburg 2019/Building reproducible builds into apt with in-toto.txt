Title: Building reproducible builds into apt with in-toto
Publication date: 2019-06-13
Playlist: MiniDebConf Hamburg 2019
Description: 
	by Lukas Puehringer

At: MiniDebConf Hamburg 2019
https://wiki.debian.org/DebianEvents/de/2019/MiniDebConfHamburg
Room: main
Scheduled start: 2019-06-08 15:00:00
Captions: 
	00:00:04,570 --> 00:00:12,459
so welcome back everybody after lunch

00:00:09,900 --> 00:00:14,349
just as a short announcement dinner will

00:00:12,459 --> 00:00:16,330
also be in the cantina tonight if so

00:00:14,349 --> 00:00:19,480
everybody's on the same page and the

00:00:16,330 --> 00:00:22,660
first talk in our afternoon session is

00:00:19,480 --> 00:00:31,869
by Lucas on building reputable builds

00:00:22,660 --> 00:00:35,860
into app within toto it's the microphone

00:00:31,869 --> 00:00:38,680
on yeah yes welcome back from the lunch

00:00:35,860 --> 00:00:41,890
break thanks for having me here I always

00:00:38,680 --> 00:00:45,880
feel very welcome at these Debian events

00:00:41,890 --> 00:00:49,630
and I'm glad to to come my name is Lucas

00:00:45,880 --> 00:00:51,940
I am a developer at a research lab a

00:00:49,630 --> 00:00:52,660
security research lab at New York

00:00:51,940 --> 00:00:56,100
University

00:00:52,660 --> 00:00:58,989
and I will show you how we built

00:00:56,100 --> 00:01:01,980
reproducible builds verification into

00:00:58,989 --> 00:01:05,110
Debian apt using a supply chain

00:01:01,980 --> 00:01:06,700
verification framework that we developed

00:01:05,110 --> 00:01:10,900
and which is called in toto

00:01:06,700 --> 00:01:14,700
I have one slide about reproducible

00:01:10,900 --> 00:01:17,920
builds I suppose this is not used to you

00:01:14,700 --> 00:01:19,750
and still walk through it a build is

00:01:17,920 --> 00:01:21,549
reproducible if given the same source

00:01:19,750 --> 00:01:23,830
code build environment and build

00:01:21,549 --> 00:01:26,950
instructions any party can recreate the

00:01:23,830 --> 00:01:30,580
puppet identical copies of all specified

00:01:26,950 --> 00:01:33,280
artifacts so this is a feature that's

00:01:30,580 --> 00:01:35,140
pretty desirable for a bill because it

00:01:33,280 --> 00:01:39,040
allows us to compare builds or build

00:01:35,140 --> 00:01:41,440
results and that in turn allows us to

00:01:39,040 --> 00:01:44,680
establish a consensus on what the

00:01:41,440 --> 00:01:46,420
correct result of a build is and by a

00:01:44,680 --> 00:01:52,119
reverse conclusion it allows us to

00:01:46,420 --> 00:01:53,830
detect incorrect builds under quotes so

00:01:52,119 --> 00:01:57,000
why should we care about incorrect

00:01:53,830 --> 00:01:59,920
builds this is a fine selection of

00:01:57,000 --> 00:02:01,780
attacks and compromises on the software

00:01:59,920 --> 00:02:05,500
supply chain so somewhere between

00:02:01,780 --> 00:02:10,409
writing the code building package again

00:02:05,500 --> 00:02:12,280
packaging it releasing it attackers

00:02:10,409 --> 00:02:16,610
infiltrated the software supply chain

00:02:12,280 --> 00:02:18,830
and introduced backdoors malicious code

00:02:16,610 --> 00:02:21,260
four attackers this is very attractive

00:02:18,830 --> 00:02:25,880
because with a single successful

00:02:21,260 --> 00:02:29,690
compromise they can impact hundreds

00:02:25,880 --> 00:02:31,670
thousands millions of users so we should

00:02:29,690 --> 00:02:36,740
care about checking where that bill is

00:02:31,670 --> 00:02:39,440
correct so the question is how we how we

00:02:36,740 --> 00:02:41,870
how we check that how we should should

00:02:39,440 --> 00:02:44,330
we all build every software that we want

00:02:41,870 --> 00:02:47,360
to use ourselves and then then compare

00:02:44,330 --> 00:02:51,760
it to someone else so we need some

00:02:47,360 --> 00:02:55,280
tooling for that and we developed a a

00:02:51,760 --> 00:02:57,350
setup for rebuilders actually it was

00:02:55,280 --> 00:02:59,720
together with a few people from the

00:02:57,350 --> 00:03:01,760
reproducible builds community one of

00:02:59,720 --> 00:03:06,620
them is here this week he's not here

00:03:01,760 --> 00:03:09,980
today Kay pcard and some folks in Norway

00:03:06,620 --> 00:03:12,380
and at our university too

00:03:09,980 --> 00:03:16,970
they created the setup for rebuilders

00:03:12,380 --> 00:03:20,510
which are servers that periodically scan

00:03:16,970 --> 00:03:24,470
the Debian archive infrastructure for

00:03:20,510 --> 00:03:27,890
new reprobate

00:03:24,470 --> 00:03:31,580
take the bill info file from there and

00:03:27,890 --> 00:03:36,340
then just blindly rebuild them and make

00:03:31,580 --> 00:03:40,400
them available to to a client to too apt

00:03:36,340 --> 00:03:42,709
so that when so actually they make the

00:03:40,400 --> 00:03:44,269
results available to the client so that

00:03:42,709 --> 00:03:45,680
when you install your package you don't

00:03:44,269 --> 00:03:48,950
have to rebuild yourself you just

00:03:45,680 --> 00:03:52,820
consult threshold of trust rebuilders

00:03:48,950 --> 00:03:56,480
and ask them if they agree on the hash

00:03:52,820 --> 00:04:00,620
and and you can decide whether it's okay

00:03:56,480 --> 00:04:03,050
or not and in total provides the very

00:04:00,620 --> 00:04:06,530
case verification protocol for that in

00:04:03,050 --> 00:04:09,590
toto is I will it's not so much in total

00:04:06,530 --> 00:04:12,620
talk but more a rep like it reproducible

00:04:09,590 --> 00:04:15,380
builds apt in toto talk so I want do the

00:04:12,620 --> 00:04:17,630
whole in total feel but explain more

00:04:15,380 --> 00:04:20,090
with the example of reproducible builds

00:04:17,630 --> 00:04:22,880
but in general in total allows you to

00:04:20,090 --> 00:04:26,180
specify all the steps in the supply

00:04:22,880 --> 00:04:28,360
chain that you want to cover like

00:04:26,180 --> 00:04:34,449
tagging a release

00:04:28,360 --> 00:04:36,639
running tests creating a build putting

00:04:34,449 --> 00:04:40,750
in it some into some package you can

00:04:36,639 --> 00:04:43,689
define all of this in a so-called layout

00:04:40,750 --> 00:04:48,699
these steps in our case it's only one

00:04:43,689 --> 00:04:51,009
step it's called rebuild and then you

00:04:48,699 --> 00:04:53,879
say who's supposed to carry out that

00:04:51,009 --> 00:04:56,800
step we call those actors functionaries

00:04:53,879 --> 00:04:58,360
you just list the key in your project

00:04:56,800 --> 00:05:00,849
definition in your layout and say this

00:04:58,360 --> 00:05:03,490
person is allowed to provide rebuild

00:05:00,849 --> 00:05:05,319
results for me and you can also use

00:05:03,490 --> 00:05:07,629
thresholds where we do with the

00:05:05,319 --> 00:05:09,969
rebuilder so we say ok we want k out of

00:05:07,629 --> 00:05:12,460
n of our functionaries to provide us

00:05:09,969 --> 00:05:16,180
build results in our case we have we've

00:05:12,460 --> 00:05:18,460
currently run we have a rebuild a run at

00:05:16,180 --> 00:05:20,080
in our New York University

00:05:18,460 --> 00:05:23,319
infrastructure there is one running at

00:05:20,080 --> 00:05:24,909
the University of Bergen and I think it

00:05:23,319 --> 00:05:26,860
would be very good if Debian could run a

00:05:24,909 --> 00:05:29,680
rebuild there but basically anyone can

00:05:26,860 --> 00:05:33,279
run it a rebuild anyone who has a mildly

00:05:29,680 --> 00:05:35,259
powerful machine can just run rebuild

00:05:33,279 --> 00:05:37,629
isn't the more there are the easier or

00:05:35,259 --> 00:05:40,180
the less we have to trust individual

00:05:37,629 --> 00:05:43,599
regulars so we can define these

00:05:40,180 --> 00:05:48,099
thresholds in our in total layout and we

00:05:43,599 --> 00:05:49,779
can also define for for a step of the

00:05:48,099 --> 00:05:51,610
supply chain we can say what should go

00:05:49,779 --> 00:05:53,680
into a step and what should come out of

00:05:51,610 --> 00:05:56,169
a step so other materials and the

00:05:53,680 --> 00:05:59,069
products for a rebuild step we would

00:05:56,169 --> 00:06:01,900
define ok the sources go into the

00:05:59,069 --> 00:06:06,069
rebuild step and the binary comes out of

00:06:01,900 --> 00:06:09,550
the rebuild step and probably a building

00:06:06,069 --> 00:06:12,069
of a file or some other metadata and the

00:06:09,550 --> 00:06:14,770
lay out this project definition is the

00:06:12,069 --> 00:06:19,919
root of trust or not a layer itself but

00:06:14,770 --> 00:06:23,199
it's signed by a root of trust key and

00:06:19,919 --> 00:06:27,250
and serves also as PKI

00:06:23,199 --> 00:06:28,629
it ships out the functionary key so for

00:06:27,250 --> 00:06:31,629
instance the keys if the rebuilders

00:06:28,629 --> 00:06:33,759
are embedded in the layout so you don't

00:06:31,629 --> 00:06:36,909
have to worry about those keys you just

00:06:33,759 --> 00:06:38,949
need one key or if you sign the layer of

00:06:36,909 --> 00:06:41,710
multiple keels keys you only have to

00:06:38,949 --> 00:06:46,630
care about the worry about those keys

00:06:41,710 --> 00:06:49,270
and I said before each rebuilder just

00:06:46,630 --> 00:06:53,289
runs its regular command like s rebuild

00:06:49,270 --> 00:06:57,039
and wraps it in in our in toto tooling

00:06:53,289 --> 00:06:59,979
in order to generate evidence for the

00:06:57,039 --> 00:07:02,350
steps or this one step of the supply

00:06:59,979 --> 00:07:04,750
chain and this evidence lists all the

00:07:02,350 --> 00:07:06,280
files that went into the step by tesha's

00:07:04,750 --> 00:07:08,229
and all this the files that came out of

00:07:06,280 --> 00:07:11,110
the step by its hashes and puts a

00:07:08,229 --> 00:07:13,720
signature with its functionary key on it

00:07:11,110 --> 00:07:18,849
and when we want to verify it on the

00:07:13,720 --> 00:07:20,740
client we just grab all the evidence

00:07:18,849 --> 00:07:23,800
files the link files from the rebuilders

00:07:20,740 --> 00:07:27,009
we take the layout it's as I will show

00:07:23,800 --> 00:07:28,330
you best best way to handle this layout

00:07:27,009 --> 00:07:31,060
is already on the client

00:07:28,330 --> 00:07:33,900
it could be installed with apt and it

00:07:31,060 --> 00:07:36,370
takes the package from some mirror and

00:07:33,900 --> 00:07:43,300
runs the in toto verification routine

00:07:36,370 --> 00:07:51,370
and I have prepared a demo for this on

00:07:43,300 --> 00:07:56,349
my demo machine this is a little debian

00:07:51,370 --> 00:07:58,389
client that has Trent the apt are apt

00:07:56,349 --> 00:08:00,520
plugin for in todo and reproducible

00:07:58,389 --> 00:08:04,260
builds already installed and

00:08:00,520 --> 00:08:06,340
pre-configured there are two or three

00:08:04,260 --> 00:08:13,960
configuration file that we can take a

00:08:06,340 --> 00:08:16,570
look at there's one and here it lists

00:08:13,960 --> 00:08:18,789
our rebuilders where we can get the link

00:08:16,570 --> 00:08:21,009
evidence that the interlink files from

00:08:18,789 --> 00:08:24,729
that says I rebuilt this I came up with

00:08:21,009 --> 00:08:27,280
this result this doesn't establish any

00:08:24,729 --> 00:08:30,509
trust relationship as I said earlier the

00:08:27,280 --> 00:08:35,950
keys for the rebuilders are in our sign

00:08:30,509 --> 00:08:39,099
that layout is here this path I

00:08:35,950 --> 00:08:41,500
configured it with with my app client

00:08:39,099 --> 00:08:43,630
that the layout is already there and I

00:08:41,500 --> 00:08:45,310
will tell the app client to load it from

00:08:43,630 --> 00:08:50,220
there and this is the root key that's

00:08:45,310 --> 00:08:51,940
used to sign the layout so we can take a

00:08:50,220 --> 00:08:58,870
look

00:08:51,940 --> 00:09:01,600
at our GPG keychain oh yeah it's there

00:08:58,870 --> 00:09:05,350
it's just a demo key it's in the in the

00:09:01,600 --> 00:09:15,010
demo repo that's used to sign the layout

00:09:05,350 --> 00:09:19,570
and layout is to layout and it has this

00:09:15,010 --> 00:09:20,440
section with steps and as I said it's

00:09:19,570 --> 00:09:24,210
only one step

00:09:20,440 --> 00:09:27,370
that's called rebuilt and here are the

00:09:24,210 --> 00:09:29,920
the keys from the rebuilders it's only

00:09:27,370 --> 00:09:36,190
the key IDs the keys are themselves are

00:09:29,920 --> 00:09:41,080
a different different section in the

00:09:36,190 --> 00:09:46,780
layout and one very important thing that

00:09:41,080 --> 00:09:49,960
I want to show you is a rule that is

00:09:46,780 --> 00:09:55,870
executed during the verification routine

00:09:49,960 --> 00:09:58,180
on the client and that says ok match all

00:09:55,870 --> 00:10:00,310
the Deb files that I currently am

00:09:58,180 --> 00:10:01,900
downloading so it's a it's a generic

00:10:00,310 --> 00:10:04,750
rule that would work with any package

00:10:01,900 --> 00:10:06,280
match all match any dead files that I'm

00:10:04,750 --> 00:10:08,890
currently downloading and trying to

00:10:06,280 --> 00:10:13,510
install with the products that came out

00:10:08,890 --> 00:10:14,860
of the rebuild step and then there is

00:10:13,510 --> 00:10:16,210
another one it's like it's a little bit

00:10:14,860 --> 00:10:19,000
it works a little bit like a firewall

00:10:16,210 --> 00:10:23,140
there is another rule that says and just

00:10:19,000 --> 00:10:26,200
a lot of that files that I have here ok

00:10:23,140 --> 00:10:29,650
so we took a look at the config file we

00:10:26,200 --> 00:10:35,400
took a look at layout now we have to do

00:10:29,650 --> 00:10:39,370
one more configuration step we have to

00:10:35,400 --> 00:10:41,380
tell apt to not just download the

00:10:39,370 --> 00:10:45,730
package from the archive as it would do

00:10:41,380 --> 00:10:50,110
usually but use our in todo plugin it's

00:10:45,730 --> 00:10:58,740
called the transport to perform that

00:10:50,110 --> 00:11:01,810
verification and then we say get update

00:10:58,740 --> 00:11:04,000
so you can see here it's already doing

00:11:01,810 --> 00:11:04,750
something unusual it's trying to run in

00:11:04,000 --> 00:11:10,209
total

00:11:04,750 --> 00:11:12,879
on the files that are fetched by a while

00:11:10,209 --> 00:11:16,769
updating but we only care for that files

00:11:12,879 --> 00:11:19,329
at the moment so it skipped let's try to

00:11:16,769 --> 00:11:23,560
install a package

00:11:19,329 --> 00:11:32,560
it's an hour mirror get install demo

00:11:23,560 --> 00:11:34,600
package oh I made this bold and the most

00:11:32,560 --> 00:11:37,360
important thing blue so that you can

00:11:34,600 --> 00:11:40,629
distinguish it from the other parts in

00:11:37,360 --> 00:11:45,189
the app block that's just for the demo

00:11:40,629 --> 00:11:47,709
here so what it did here is it requested

00:11:45,189 --> 00:11:54,310
the metadata for the demo package from

00:11:47,709 --> 00:11:57,610
the two rebuilders the the in total link

00:11:54,310 --> 00:11:59,889
metadata and it got it and then it

00:11:57,610 --> 00:12:01,990
loaded the layout it verified the

00:11:59,889 --> 00:12:04,060
signature of the layer with a with root

00:12:01,990 --> 00:12:06,370
key that we configured and then it ran

00:12:04,060 --> 00:12:09,029
the in total verification with the with

00:12:06,370 --> 00:12:13,170
the rules for the artifacts and the

00:12:09,029 --> 00:12:16,230
hashes matched so everything's good

00:12:13,170 --> 00:12:16,230
[Music]

00:12:16,379 --> 00:12:22,959
now I will show what happens if our

00:12:19,389 --> 00:12:27,970
mirror is malicious that I will first

00:12:22,959 --> 00:12:28,649
remove the package to download it again

00:12:27,970 --> 00:12:36,449
later

00:12:28,649 --> 00:12:42,449
ooop package and then we update the

00:12:36,449 --> 00:12:47,069
sources list to not use our good mirror

00:12:42,449 --> 00:12:51,699
that are bad naira which will serve as a

00:12:47,069 --> 00:12:55,209
malicious that package for the for the

00:12:51,699 --> 00:12:58,990
demo program we have here and I do it

00:12:55,209 --> 00:13:02,259
and update to get the files from the bad

00:12:58,990 --> 00:13:07,709
neighbor and then I do and I'll get

00:13:02,259 --> 00:13:15,309
install demo package and it blew up

00:13:07,709 --> 00:13:18,160
which is good it did the same thing as

00:13:15,309 --> 00:13:21,430
before it asked same rebuilders as

00:13:18,160 --> 00:13:24,790
four for the same package to provide the

00:13:21,430 --> 00:13:27,540
evidence for the rebuild then it loads

00:13:24,790 --> 00:13:31,930
the layout it verifies the signature and

00:13:27,540 --> 00:13:35,139
it does the in total verification which

00:13:31,930 --> 00:13:39,189
as I said earlier when we looked at the

00:13:35,139 --> 00:13:41,920
layout tries to to match the binary that

00:13:39,189 --> 00:13:46,920
I'm trying to install with the binary

00:13:41,920 --> 00:13:49,019
that was created on the rebuilders and

00:13:46,920 --> 00:13:52,600
[Music]

00:13:49,019 --> 00:13:56,110
yeah we can we can also we can take a

00:13:52,600 --> 00:13:58,360
quick look we still have time yeah we

00:13:56,110 --> 00:14:00,639
can take a quick look at this link

00:13:58,360 --> 00:14:03,269
metadata the evidence that the rebuilder

00:14:00,639 --> 00:14:03,269
service

00:14:12,900 --> 00:14:18,930
huh it's it's really simple it's not a

00:14:16,080 --> 00:14:20,700
big file it's only because we only we

00:14:18,930 --> 00:14:23,820
only record it we don't do anything with

00:14:20,700 --> 00:14:25,529
the materials which are the sources so

00:14:23,820 --> 00:14:27,690
we don't record them right now but later

00:14:25,529 --> 00:14:30,420
we should record them so we at the

00:14:27,690 --> 00:14:32,040
moment we only care for what got spit

00:14:30,420 --> 00:14:35,400
out of a rebuilder and that was the

00:14:32,040 --> 00:14:39,660
debian package and we say we store the

00:14:35,400 --> 00:14:41,490
hash and we give it a signature and the

00:14:39,660 --> 00:14:43,470
in total verification routine can use

00:14:41,490 --> 00:14:50,850
that together with the layer to see if

00:14:43,470 --> 00:14:54,630
everything is good and I have one more

00:14:50,850 --> 00:14:55,950
slide so you might think okay and it

00:14:54,630 --> 00:14:56,940
looks cool but it's still kind of

00:14:55,950 --> 00:15:01,430
complicated

00:14:56,940 --> 00:15:04,320
I didn't Toto talk at Def Con 2017 and

00:15:01,430 --> 00:15:05,670
back then I showed how you use the

00:15:04,320 --> 00:15:08,370
command-line tools and you have

00:15:05,670 --> 00:15:10,740
thousands of command-line arguments and

00:15:08,370 --> 00:15:12,300
people told me back then that it looks

00:15:10,740 --> 00:15:15,870
really cool but it's way too complicated

00:15:12,300 --> 00:15:18,390
and I think it got a lot better now you

00:15:15,870 --> 00:15:20,550
have three or two config files that are

00:15:18,390 --> 00:15:25,500
maybe already in place when you install

00:15:20,550 --> 00:15:30,360
it and you just run apt install and you

00:15:25,500 --> 00:15:32,040
will need something to to compare the

00:15:30,360 --> 00:15:34,800
hashes locally with the hashes from

00:15:32,040 --> 00:15:38,630
rebuilders so that's tooling and the

00:15:34,800 --> 00:15:40,860
cool thing about in toto is that you can

00:15:38,630 --> 00:15:46,529
it'sit's really generic and you can

00:15:40,860 --> 00:15:49,709
arbitrarily extend it up the supply

00:15:46,529 --> 00:15:52,140
chain so you don't in this example we

00:15:49,709 --> 00:15:54,120
only check for evidence from rebuilders

00:15:52,140 --> 00:15:56,940
but the supply chain is longer there is

00:15:54,120 --> 00:15:58,980
a there is a downstream repo and we want

00:15:56,940 --> 00:16:00,660
to be sure that only what came out of

00:15:58,980 --> 00:16:02,550
the downstream repo went into the

00:16:00,660 --> 00:16:04,740
rebuilders and even before there there

00:16:02,550 --> 00:16:09,779
is an upstream repo and in toto allows

00:16:04,740 --> 00:16:11,430
for so tor is only concerned about steps

00:16:09,779 --> 00:16:12,990
and all of these are just steps for in

00:16:11,430 --> 00:16:15,959
toto and you can say I have these steps

00:16:12,990 --> 00:16:20,339
and and then we have this little rule

00:16:15,959 --> 00:16:21,690
language where where you say what came

00:16:20,339 --> 00:16:24,390
out of this step must go in this step

00:16:21,690 --> 00:16:25,890
and some other rules too and you

00:16:24,390 --> 00:16:31,130
have testing steps and other building

00:16:25,890 --> 00:16:33,630
steps and so on that's it for today

00:16:31,130 --> 00:16:36,570
thank you very much I'm open for

00:16:33,630 --> 00:16:38,910
questions please reach out to us I was

00:16:36,570 --> 00:16:42,210
able with help from some of you guys to

00:16:38,910 --> 00:16:45,180
package in toto and to transport this

00:16:42,210 --> 00:16:50,910
week it's not yet upload it but it

00:16:45,180 --> 00:16:54,420
builds with with us built so yeah I hope

00:16:50,910 --> 00:16:57,600
Holger and I can sit together later

00:16:54,420 --> 00:17:00,090
today or sometime and upload them so

00:16:57,600 --> 00:17:01,680
that it's really as easy as that get

00:17:00,090 --> 00:17:04,709
installed in toto and then up get

00:17:01,680 --> 00:17:06,870
install anything and it's verified

00:17:04,709 --> 00:17:08,940
against tree builders and also the

00:17:06,870 --> 00:17:12,839
rebuilders themself we need help with

00:17:08,940 --> 00:17:15,390
that they for this demo I just mocked

00:17:12,839 --> 00:17:18,209
them there are running rebuilders that

00:17:15,390 --> 00:17:20,910
actually rebuild but we could do do some

00:17:18,209 --> 00:17:23,040
more work on those if you have extra

00:17:20,910 --> 00:17:25,610
time and like the project reach out to

00:17:23,040 --> 00:17:31,300
me or my colleagues some of these

00:17:25,610 --> 00:17:37,360
friendly faces here yeah thanks

00:17:31,300 --> 00:17:39,470
[Applause]

00:17:37,360 --> 00:17:40,820
thanks for the talk we have time for a

00:17:39,470 --> 00:17:54,350
couple of questions if there's any

00:17:40,820 --> 00:17:56,090
please step up to the microphone just

00:17:54,350 --> 00:17:58,310
apt-get install this intro it's clear

00:17:56,090 --> 00:18:09,230
there it's easy it's super easy just

00:17:58,310 --> 00:18:10,940
wait for any oh there's one yes hi so

00:18:09,230 --> 00:18:15,410
I'm not sure if I totally understand so

00:18:10,940 --> 00:18:18,380
you replace normal apt repository with

00:18:15,410 --> 00:18:20,780
which is signed by the Yankees but by

00:18:18,380 --> 00:18:23,840
those repositories that are signed by

00:18:20,780 --> 00:18:26,150
other Keys basically because I've seen

00:18:23,840 --> 00:18:28,910
many keys and signatures and so on and

00:18:26,150 --> 00:18:32,900
currently in Debian we have this Debian

00:18:28,910 --> 00:18:34,870
keyring which which has all the keys

00:18:32,900 --> 00:18:38,150
which which are used to verify

00:18:34,870 --> 00:18:41,540
signatures of packages how do you yeah

00:18:38,150 --> 00:18:46,550
manage keys for rebuilders that's a good

00:18:41,540 --> 00:18:48,800
question so it's not not invasive it

00:18:46,550 --> 00:18:51,500
doesn't change anything with the Debian

00:18:48,800 --> 00:18:54,290
mirrors unless you want it to unless you

00:18:51,500 --> 00:18:56,900
want them to or the Debian archives to

00:18:54,290 --> 00:18:59,180
provide link metadata as well that can

00:18:56,900 --> 00:19:00,710
be matched with the what the rebuild is

00:18:59,180 --> 00:19:05,300
provide but those are different entities

00:19:00,710 --> 00:19:08,120
so you have let me see this was my

00:19:05,300 --> 00:19:11,300
attempt it's not really good there

00:19:08,120 --> 00:19:13,100
should be another component here that's

00:19:11,300 --> 00:19:15,230
where you fetched it that file from and

00:19:13,100 --> 00:19:16,880
the rebuilders they don't give you the

00:19:15,230 --> 00:19:19,100
depth file they don't give you the

00:19:16,880 --> 00:19:21,290
binary they just tell you I built the

00:19:19,100 --> 00:19:25,520
binary this binary that you're trying to

00:19:21,290 --> 00:19:29,750
install and I came up it yielded this

00:19:25,520 --> 00:19:32,780
hash so you just have something in

00:19:29,750 --> 00:19:35,570
addition that provides you metadata you

00:19:32,780 --> 00:19:40,310
can check against what you're trying to

00:19:35,570 --> 00:19:42,800
download from from Debian and and as I

00:19:40,310 --> 00:19:45,500
try to say in the layout you also ship

00:19:42,800 --> 00:19:48,659
out the keys of of these rebuilders so

00:19:45,500 --> 00:19:52,229
it has its own PP ki

00:19:48,659 --> 00:19:54,690
and you don't rely on the under Debian

00:19:52,229 --> 00:19:56,909
developer key chain so you just change

00:19:54,690 --> 00:19:57,479
the transport not the rest of you right

00:19:56,909 --> 00:20:00,259
exactly

00:19:57,479 --> 00:20:05,220
yeah so actually what I did is it's a

00:20:00,259 --> 00:20:08,609
man-in-the-middle apt and HTTP so I

00:20:05,220 --> 00:20:12,269
still use the HTTP transport but I just

00:20:08,609 --> 00:20:15,869
realizing that comes from apt apt asks

00:20:12,269 --> 00:20:19,849
me or tells me I want to download this

00:20:15,869 --> 00:20:22,799
thing from this HTTP URL and I tell it

00:20:19,849 --> 00:20:25,950
HTTP transport to do it and then when

00:20:22,799 --> 00:20:28,169
HTTP comes back to me telling me I

00:20:25,950 --> 00:20:30,359
downloaded this I wait to tell up to

00:20:28,169 --> 00:20:33,629
install it and do my verification only

00:20:30,359 --> 00:20:36,989
if it verifies properly will it a lap to

00:20:33,629 --> 00:20:38,759
go and install it I have a question

00:20:36,989 --> 00:20:41,399
whatever the package is not reproducible

00:20:38,759 --> 00:20:43,639
will you just refuse to install it all

00:20:41,399 --> 00:20:50,820
in that case it just installed fine

00:20:43,639 --> 00:20:52,710
there is a a country it's also a good

00:20:50,820 --> 00:20:55,529
question there is a because on our

00:20:52,710 --> 00:20:59,039
current rebuilders oh I removed that a

00:20:55,529 --> 00:21:01,169
bit bigger yeah and also I have to show

00:20:59,039 --> 00:21:08,239
you a different configuration file from

00:21:01,169 --> 00:21:08,239
the tests sorry

00:21:20,370 --> 00:21:31,980
I'll let let us show it no no whatever

00:21:29,480 --> 00:21:37,860
switching between via and sub Lawrence

00:21:31,980 --> 00:21:41,460
weird I have this no fail option just

00:21:37,860 --> 00:21:43,730
that just lets you still if even if you

00:21:41,460 --> 00:21:46,260
use to transport and do a verification

00:21:43,730 --> 00:21:50,190
still lets you install it even if it

00:21:46,260 --> 00:21:53,429
fails right but what if I wanted to fail

00:21:50,190 --> 00:21:55,649
if a package is reproducible but there's

00:21:53,429 --> 00:21:57,360
it's it's the wrong hash but if the

00:21:55,649 --> 00:21:58,880
package is not reproducible I they just

00:21:57,360 --> 00:22:02,850
want to install it without in total

00:21:58,880 --> 00:22:03,179
interfering it I mean yes and that's

00:22:02,850 --> 00:22:05,100
correct

00:22:03,179 --> 00:22:07,649
okay that's currently that that's

00:22:05,100 --> 00:22:11,820
possible currently it will also fail if

00:22:07,649 --> 00:22:14,010
there is no if there is no metadata or

00:22:11,820 --> 00:22:15,960
it doesn't it doesn't distinguish

00:22:14,010 --> 00:22:18,659
between packages that are reproducible

00:22:15,960 --> 00:22:21,659
or not but it could be it could be

00:22:18,659 --> 00:22:24,350
changed I mean ideally at some point

00:22:21,659 --> 00:22:29,279
everything is reproducible until then

00:22:24,350 --> 00:22:32,250
it's probably a good idea to but if

00:22:29,279 --> 00:22:33,570
people see either it fails on the first

00:22:32,250 --> 00:22:34,799
package they want to install which is

00:22:33,570 --> 00:22:37,320
not reproducible and then they just

00:22:34,799 --> 00:22:39,419
switch it off and then they switch it

00:22:37,320 --> 00:22:41,070
off you see what I mean it does make

00:22:39,419 --> 00:22:42,659
sense that's why that's that's why I

00:22:41,070 --> 00:22:45,960
have this option where it still it shows

00:22:42,659 --> 00:22:50,190
you the lock I think the law could be

00:22:45,960 --> 00:22:53,549
improved I could and it could even be

00:22:50,190 --> 00:22:55,980
maybe interact if the it tells you it

00:22:53,549 --> 00:22:57,990
failed either because it's not

00:22:55,980 --> 00:23:01,350
reproducible or because it is

00:22:57,990 --> 00:23:06,320
reproducible but there was another

00:23:01,350 --> 00:23:06,320
problem do you still want to install it

00:23:07,190 --> 00:23:10,890
you might have said it and I'm sorry if

00:23:09,510 --> 00:23:13,559
I missed it but what is actually taking

00:23:10,890 --> 00:23:16,080
into account when you compare packages

00:23:13,559 --> 00:23:17,940
is it just like it's probably not just a

00:23:16,080 --> 00:23:20,010
hash of the Debian of the deathfire but

00:23:17,940 --> 00:23:22,710
what is actually it is just the hash of

00:23:20,010 --> 00:23:25,560
the dev phone okay

00:23:22,710 --> 00:23:30,150
a regenerated DEP file would it can

00:23:25,560 --> 00:23:32,580
contain like AI times m change something

00:23:30,150 --> 00:23:33,830
that might not if it's reproducible so

00:23:32,580 --> 00:23:36,930
that's the goal of reproduce

00:23:33,830 --> 00:23:39,180
reproducible builds that when you build

00:23:36,930 --> 00:23:40,950
it under the same circumstances same

00:23:39,180 --> 00:23:43,890
build environment there was the first

00:23:40,950 --> 00:23:45,870
slide I had just apply to the contents

00:23:43,890 --> 00:23:51,570
of the package but this also applies to

00:23:45,870 --> 00:23:55,230
the packages health I think I'm not sure

00:23:51,570 --> 00:23:58,710
Holger can you can you repeat the

00:23:55,230 --> 00:24:00,270
question what is actually being looked

00:23:58,710 --> 00:24:03,930
at when you try to compare or when you

00:24:00,270 --> 00:24:05,280
try to to detect the video some

00:24:03,930 --> 00:24:07,890
abilities do you actually look at the

00:24:05,280 --> 00:24:10,230
contents of the package always or just a

00:24:07,890 --> 00:24:12,990
package as a whole so it's the capac

00:24:10,230 --> 00:24:14,910
Ajit's have also reproducible I think

00:24:12,990 --> 00:24:18,900
it's really that's the goal yeah that's

00:24:14,910 --> 00:24:20,490
the goal so in my demo as I said I just

00:24:18,900 --> 00:24:23,220
mock the rebuilders but we have

00:24:20,490 --> 00:24:26,370
rebuilders and I looked at some packages

00:24:23,220 --> 00:24:29,400
where both three builders rebuilt them

00:24:26,370 --> 00:24:31,590
and they have the same hash so I always

00:24:29,400 --> 00:24:33,330
figured that the dead file the goal of

00:24:31,590 --> 00:24:41,070
reproducible builds is that the DAT file

00:24:33,330 --> 00:24:44,430
is can be compared I think what you're

00:24:41,070 --> 00:24:47,480
doing I was worried about end users yeah

00:24:44,430 --> 00:24:51,030
how are we gonna get the configuration

00:24:47,480 --> 00:24:54,300
there and is it all guessable or

00:24:51,030 --> 00:25:01,680
discoverable and if it is discoverable

00:24:54,300 --> 00:25:03,660
how do you keep that secure I'm not sure

00:25:01,680 --> 00:25:13,590
I understand so it shouldn't be secure

00:25:03,660 --> 00:25:16,170
its secured by AB secure yeah you've got

00:25:13,590 --> 00:25:18,000
to get these rebuilders exactly and you

00:25:16,170 --> 00:25:20,400
got to find them and put them into your

00:25:18,000 --> 00:25:24,030
config yeah that doesn't sound like a

00:25:20,400 --> 00:25:27,690
very user friendly process at the moment

00:25:24,030 --> 00:25:30,000
at the moment so how I created the

00:25:27,690 --> 00:25:31,470
package now in the last days I copy a

00:25:30,000 --> 00:25:34,260
conflict with the rebuilders that

00:25:31,470 --> 00:25:36,040
currently exists and if you're my idea

00:25:34,260 --> 00:25:38,290
is that if your update

00:25:36,040 --> 00:25:41,140
this at transport in total app transport

00:25:38,290 --> 00:25:42,730
you updated with with new rebuilders

00:25:41,140 --> 00:25:45,240
that exist and that are endorsed by the

00:25:42,730 --> 00:25:49,500
Debian community and the the URLs

00:25:45,240 --> 00:25:52,660
themselves are not directly the trust

00:25:49,500 --> 00:25:56,260
they don't establish to trust a

00:25:52,660 --> 00:25:57,940
connection but it's the keys so the this

00:25:56,260 --> 00:26:00,970
route layout and there we have a

00:25:57,940 --> 00:26:04,270
discussion who who is allowed to sign a

00:26:00,970 --> 00:26:09,040
route layout is it the one who manages

00:26:04,270 --> 00:26:11,200
the the apt transport package or it

00:26:09,040 --> 00:26:16,900
could be a quorum of people so on the

00:26:11,200 --> 00:26:18,730
under github page let's give get a page

00:26:16,900 --> 00:26:23,020
where is an issue where we discussed

00:26:18,730 --> 00:26:25,870
this it's a it's not an easy question

00:26:23,020 --> 00:26:28,330
but I think most of the configuration

00:26:25,870 --> 00:26:31,450
can be shipped out when installing the

00:26:28,330 --> 00:26:33,940
transport some of the configuration

00:26:31,450 --> 00:26:38,380
should should the user should be able to

00:26:33,940 --> 00:26:40,870
put it there him or herself I'm always

00:26:38,380 --> 00:26:43,030
for security faults but it if you're if

00:26:40,870 --> 00:26:45,730
it then ends up that you can't use it as

00:26:43,030 --> 00:26:49,600
my cassette and it's not worth it so

00:26:45,730 --> 00:26:51,400
it's better to maybe have a an easy

00:26:49,600 --> 00:26:54,330
adoption or easy Rock rollout

00:26:51,400 --> 00:26:54,330
configuration

00:27:06,610 --> 00:27:08,670

YouTube URL: https://www.youtube.com/watch?v=hbHa4OFv7Qo


