Title: Salsa CI Debian Pipeline for Developers
Publication date: 2019-06-13
Playlist: MiniDebConf Hamburg 2019
Description: 
	by Augustin Henze
by IÃ±aki Malerba

At: MiniDebConf Hamburg 2019
https://wiki.debian.org/DebianEvents/de/2019/MiniDebConfHamburg
Room: main
Scheduled start: 2019-06-08 11:00:00
Captions: 
	00:00:04,810 --> 00:00:14,160
so next stop is by Jackie and Augustin

00:00:09,350 --> 00:00:18,950
on salsa see I thank you okay thank you

00:00:14,160 --> 00:00:25,320
[Applause]

00:00:18,950 --> 00:00:28,920
hello everyone well just straight to the

00:00:25,320 --> 00:00:31,980
question how long how long does it take

00:00:28,920 --> 00:00:35,030
you to realize that you have uploaded a

00:00:31,980 --> 00:00:40,559
broken package to the archive

00:00:35,030 --> 00:00:42,629
yeah too long yeah maybe minutes if you

00:00:40,559 --> 00:00:48,210
get rejected for everything master

00:00:42,629 --> 00:00:49,880
checks like I don't know you are yeah

00:00:48,210 --> 00:00:52,790
you are uploading with the wrong

00:00:49,880 --> 00:00:56,820
distribution with the I know whatever

00:00:52,790 --> 00:00:59,370
the f you master checks but probably

00:00:56,820 --> 00:01:02,060
it's not a good idea to get rejected for

00:00:59,370 --> 00:01:07,410
that but yeah you get feedback faster

00:01:02,060 --> 00:01:10,410
maybe hours it depends if you uploaded

00:01:07,410 --> 00:01:14,070
the package right before the the scripts

00:01:10,410 --> 00:01:16,770
run and install the your package into

00:01:14,070 --> 00:01:20,460
the archive and everything the magic

00:01:16,770 --> 00:01:25,409
behind the debian balls happen and

00:01:20,460 --> 00:01:29,850
usually yeah it takes one day more or

00:01:25,409 --> 00:01:38,130
less it depends of your package of

00:01:29,850 --> 00:01:40,500
course yeah they have an infrastructure

00:01:38,130 --> 00:01:42,930
we think that the debian infrastructure

00:01:40,500 --> 00:01:45,750
is really great it's really awesome but

00:01:42,930 --> 00:01:49,260
first you need to upload your package

00:01:45,750 --> 00:01:54,119
and intact your package intact your

00:01:49,260 --> 00:01:57,210
changes and then to get I don't know

00:01:54,119 --> 00:02:01,830
some feedback from the changes that you

00:01:57,210 --> 00:02:03,659
did the problem is that you are step in

00:02:01,830 --> 00:02:06,150
developer you have to change the context

00:02:03,659 --> 00:02:09,830
to another package or maybe to you real

00:02:06,150 --> 00:02:17,030
life whatever and switching contacts is

00:02:09,830 --> 00:02:20,280
something expensive and also you have to

00:02:17,030 --> 00:02:23,160
to have your own setup in your machine

00:02:20,280 --> 00:02:25,580
or your own infrastructure to test your

00:02:23,160 --> 00:02:30,440
package to build your package

00:02:25,580 --> 00:02:32,450
just if you get some contribution you

00:02:30,440 --> 00:02:36,170
have to take the patch apply the patch

00:02:32,450 --> 00:02:38,870
on your machine tested and then the

00:02:36,170 --> 00:02:46,130
upload to get the feedback from there

00:02:38,870 --> 00:02:48,290
from the Debian infrastructure well just

00:02:46,130 --> 00:02:51,530
in Mike in my case when I started in

00:02:48,290 --> 00:02:54,860
Debian my first packages before I

00:02:51,530 --> 00:02:58,160
uploaded I know I'd run like a ton of

00:02:54,860 --> 00:03:03,530
tests like okay I am going my first

00:02:58,160 --> 00:03:06,580
package was us flight simulator so yeah

00:03:03,530 --> 00:03:10,820
I don't know why I was just don't ask

00:03:06,580 --> 00:03:13,400
the I remember that in my first releases

00:03:10,820 --> 00:03:15,740
I I went to the package install of my

00:03:13,400 --> 00:03:18,620
machine and just play with the flight

00:03:15,740 --> 00:03:23,420
simulator a little bit so yeah it works

00:03:18,620 --> 00:03:27,290
then uploaded but then I know after 3-4

00:03:23,420 --> 00:03:31,100
releases I stopped doing that so because

00:03:27,290 --> 00:03:34,930
it is a repetitive task so you didn't do

00:03:31,100 --> 00:03:38,959
that for every package that you build

00:03:34,930 --> 00:03:42,260
and and over time I started maintaining

00:03:38,959 --> 00:03:44,750
like maybe more than 20 package so you

00:03:42,260 --> 00:03:53,269
cannot do that with all your packages

00:03:44,750 --> 00:03:59,480
all the time so just let me change my

00:03:53,269 --> 00:04:03,200
note yeah yeah

00:03:59,480 --> 00:04:06,200
the idea is to well I want to feel that

00:04:03,200 --> 00:04:09,290
every time that I spend time for Debian

00:04:06,200 --> 00:04:15,080
I want to make it worth it I want to

00:04:09,290 --> 00:04:18,350
deliver some value to the VN so yeah I

00:04:15,080 --> 00:04:21,979
don't want to wait for the for the other

00:04:18,350 --> 00:04:25,100
day to get the feedback I want to I know

00:04:21,979 --> 00:04:29,120
feel like okay I did something for

00:04:25,100 --> 00:04:32,300
Debian and I can just go to do something

00:04:29,120 --> 00:04:36,169
else but I stopped working in Debian and

00:04:32,300 --> 00:04:38,290
I did and I realized that I added value

00:04:36,169 --> 00:04:45,510
to my contribution

00:04:38,290 --> 00:04:48,070
so yeah I think well we take the the

00:04:45,510 --> 00:04:50,170
continuous integration from the internet

00:04:48,070 --> 00:04:53,050
actually the github page they have a

00:04:50,170 --> 00:04:55,060
really good definition their continuous

00:04:53,050 --> 00:04:57,700
integration is the practice of building

00:04:55,060 --> 00:05:01,330
and testing each change automatically as

00:04:57,700 --> 00:05:06,210
early as possible so yeah it's a

00:05:01,330 --> 00:05:10,630
definition just we put there to see if I

00:05:06,210 --> 00:05:14,050
know in the beginning we started in our

00:05:10,630 --> 00:05:15,430
former company like the it was really

00:05:14,050 --> 00:05:21,430
small

00:05:15,430 --> 00:05:26,280
we were like 20 people I was in charge

00:05:21,430 --> 00:05:29,560
to build the operating system they are

00:05:26,280 --> 00:05:31,890
satellites so I was building the

00:05:29,560 --> 00:05:36,280
operating system for the satellites and

00:05:31,890 --> 00:05:39,610
every time then someone needs to do a

00:05:36,280 --> 00:05:40,180
release I was building the the root

00:05:39,610 --> 00:05:45,390
filesystem

00:05:40,180 --> 00:05:49,090
on my machine so it was totally chaotic

00:05:45,390 --> 00:05:52,840
the company started growing and growing

00:05:49,090 --> 00:05:55,450
and in the beginning we were twenty

00:05:52,840 --> 00:06:02,170
peoples and then one year later we were

00:05:55,450 --> 00:06:04,680
like 100 or so I don't remember yeah I I

00:06:02,170 --> 00:06:08,650
did all the tests before the satellite

00:06:04,680 --> 00:06:11,230
lounge and it was awesome for this field

00:06:08,650 --> 00:06:14,350
satellite but then we started sending

00:06:11,230 --> 00:06:16,900
more satellites and it wasn't fun and

00:06:14,350 --> 00:06:21,820
the response I really it was really too

00:06:16,900 --> 00:06:24,070
much for me and the contributions or the

00:06:21,820 --> 00:06:27,790
workflow between developers was really

00:06:24,070 --> 00:06:30,040
hard I mean I was in the middle I was

00:06:27,790 --> 00:06:37,240
the man in the middle of the operating

00:06:30,040 --> 00:06:39,550
system and their releases so like we

00:06:37,240 --> 00:06:42,760
didn't know what continuous integration

00:06:39,550 --> 00:06:48,150
means in that time so that was the idea

00:06:42,760 --> 00:06:48,150
of why we put this lighter

00:06:49,089 --> 00:06:56,599
and yeah when we changed the model of

00:06:54,050 --> 00:06:58,939
the satellite we added like many boards

00:06:56,599 --> 00:07:01,869
in the satellite in the beginning we had

00:06:58,939 --> 00:07:07,490
only one poor but then the satellite

00:07:01,869 --> 00:07:10,069
became a little bit complex and it has

00:07:07,490 --> 00:07:13,180
right now it has like a 7 boards on

00:07:10,069 --> 00:07:16,099
something like that so we needed to test

00:07:13,180 --> 00:07:21,039
we needed to do some integration tests

00:07:16,099 --> 00:07:23,180
in there like what happens if I change a

00:07:21,039 --> 00:07:25,129
component in the Salah a software

00:07:23,180 --> 00:07:29,619
component in the satellite what happens

00:07:25,129 --> 00:07:33,110
with the rest so we build like an

00:07:29,619 --> 00:07:36,289
infrastructure to with JTACs for the

00:07:33,110 --> 00:07:39,800
embedded nose and every time that you

00:07:36,289 --> 00:07:43,909
push a change there all the free Noirs

00:07:39,800 --> 00:07:46,339
were built and were uploaded to the to

00:07:43,909 --> 00:07:48,110
the embedded now the operating system

00:07:46,339 --> 00:07:50,270
was 7 of course

00:07:48,110 --> 00:07:52,490
so the debian package was installed in

00:07:50,270 --> 00:07:55,519
the root filesystem and then we'd run

00:07:52,490 --> 00:07:57,379
like an integration test in the

00:07:55,519 --> 00:08:00,499
beginning it was just to see if

00:07:57,379 --> 00:08:03,289
everything was working but yeah at the

00:08:00,499 --> 00:08:13,219
end it was something more thoughtful

00:08:03,289 --> 00:08:16,219
more smart I guess and yeah we well in

00:08:13,219 --> 00:08:20,059
that time when we started using allah so

00:08:16,219 --> 00:08:22,869
when salsa was deployed in debian we

00:08:20,059 --> 00:08:28,699
thought ok we had like a lot of

00:08:22,869 --> 00:08:33,050
experience doing this we walked the path

00:08:28,699 --> 00:08:36,399
through the arnold we didn't know

00:08:33,050 --> 00:08:39,740
anything and we'll have like a really

00:08:36,399 --> 00:08:42,800
great GI like everyone in the company

00:08:39,740 --> 00:08:46,009
trust in the in the results every time

00:08:42,800 --> 00:08:48,889
that someone pushes come it they can see

00:08:46,009 --> 00:08:52,880
the the feedback they can see how the

00:08:48,889 --> 00:08:57,350
you set up the the infrastructure there

00:08:52,880 --> 00:08:59,920
is not nothing behind your test or you

00:08:57,350 --> 00:09:02,750
commit and your tests

00:08:59,920 --> 00:09:05,960
you can see the logs you can see the the

00:09:02,750 --> 00:09:08,600
comment executed there so you can fix

00:09:05,960 --> 00:09:12,110
the test if the text is broken but you

00:09:08,600 --> 00:09:18,890
can also fix your comment as well for

00:09:12,110 --> 00:09:22,130
sure yeah so we think that continuous

00:09:18,890 --> 00:09:28,160
integration adds a lot of value like in

00:09:22,130 --> 00:09:31,780
debian is well we want to we are going

00:09:28,160 --> 00:09:38,260
to that we are trying to go to that

00:09:31,780 --> 00:09:41,890
why because trusting in your CI pipeline

00:09:38,260 --> 00:09:44,780
may make it really easier to get to get

00:09:41,890 --> 00:09:47,960
contributions from outside not only from

00:09:44,780 --> 00:09:50,510
your core developers everyone can push

00:09:47,960 --> 00:09:53,630
commit to your project but forking the

00:09:50,510 --> 00:09:56,450
project first and they can see the

00:09:53,630 --> 00:09:59,930
result if the the commit breaks the

00:09:56,450 --> 00:10:02,540
package if it depend on the test of

00:09:59,930 --> 00:10:09,790
course that you have in your package but

00:10:02,540 --> 00:10:13,990
you have to make you pipeline solid or

00:10:09,790 --> 00:10:17,120
something that you want you can trust

00:10:13,990 --> 00:10:19,580
and then you can accept or take

00:10:17,120 --> 00:10:21,230
contributions really easily just taking

00:10:19,580 --> 00:10:23,570
a look to the changes and accept the

00:10:21,230 --> 00:10:31,310
merge because you should trust in your

00:10:23,570 --> 00:10:34,700
test like I said before the first patch

00:10:31,310 --> 00:10:37,010
that you get okay you take the patch and

00:10:34,700 --> 00:10:40,160
you see the virtual Oh awesome thank you

00:10:37,010 --> 00:10:42,800
I am going to test it in you ran a lot

00:10:40,160 --> 00:10:45,530
of tests in your machine and in the I

00:10:42,800 --> 00:10:47,660
don't know whatever you need to make

00:10:45,530 --> 00:10:50,570
sure that your package is not broken but

00:10:47,660 --> 00:10:53,330
then after a few years you undo that

00:10:50,570 --> 00:10:55,750
anymore in my case at least I am talking

00:10:53,330 --> 00:10:55,750
about myself

00:10:58,390 --> 00:11:03,050
yeah and and the contributor as well I

00:11:00,980 --> 00:11:05,450
can get feedback from the from the patch

00:11:03,050 --> 00:11:07,480
so yeah I think that that I really say

00:11:05,450 --> 00:11:07,480
that

00:11:10,640 --> 00:11:18,320
yeah I'm Yankee

00:11:14,510 --> 00:11:18,800
well what is this also CIA team what did

00:11:18,320 --> 00:11:22,460
we do

00:11:18,800 --> 00:11:24,550
we developed and attained a recipe for

00:11:22,460 --> 00:11:28,130
building and testing Debian packages

00:11:24,550 --> 00:11:31,670
what we did it's a recipe just file

00:11:28,130 --> 00:11:35,720
which your imports and allows it to

00:11:31,670 --> 00:11:38,630
build untested package on a generic way

00:11:35,720 --> 00:11:42,710
we tried to do it compatible with most

00:11:38,630 --> 00:11:45,950
of the Debian packages and trying always

00:11:42,710 --> 00:11:48,500
to keep it dry and kiss this is not

00:11:45,950 --> 00:11:51,950
hiding in the magic everything is

00:11:48,500 --> 00:11:54,140
explicit you can enter the definition

00:11:51,950 --> 00:11:56,410
you can read what it does and if you

00:11:54,140 --> 00:11:59,330
haven't a special case for example you

00:11:56,410 --> 00:12:01,490
package has different way of testing or

00:11:59,330 --> 00:12:03,980
something it's really easy to modify

00:12:01,490 --> 00:12:07,400
that because the definition it's really

00:12:03,980 --> 00:12:12,470
clean are we trying to do as clean as it

00:12:07,400 --> 00:12:14,390
possible what are our goals well as Tina

00:12:12,470 --> 00:12:16,610
said the first and main goal is to

00:12:14,390 --> 00:12:19,370
detect problems before the package gets

00:12:16,610 --> 00:12:21,440
to the archive we're trying our main

00:12:19,370 --> 00:12:23,900
goal is to have the same services Debian

00:12:21,440 --> 00:12:28,040
infrastructure provide us but inside

00:12:23,900 --> 00:12:31,730
good lasse CI well every time you push a

00:12:28,040 --> 00:12:34,190
change we want all the current debian

00:12:31,730 --> 00:12:36,770
tests that are run normally

00:12:34,190 --> 00:12:40,460
asynchronously on debian infrastructure

00:12:36,770 --> 00:12:44,240
to be run on good luck see CI and you

00:12:40,460 --> 00:12:46,090
can access the results the log on the

00:12:44,240 --> 00:12:51,410
shortest time possible

00:12:46,090 --> 00:12:54,020
also having reproducible environment to

00:12:51,410 --> 00:12:56,990
build and test your package this way the

00:12:54,020 --> 00:12:59,000
environment the the place were where the

00:12:56,990 --> 00:13:02,780
tests and the builds are run they are

00:12:59,000 --> 00:13:04,850
defined on our infrasound our work so

00:13:02,780 --> 00:13:05,390
anyone involved in the development of

00:13:04,850 --> 00:13:07,790
the project

00:13:05,390 --> 00:13:11,330
I mean you your contributors the forks

00:13:07,790 --> 00:13:14,470
can work on the same environment you do

00:13:11,330 --> 00:13:18,830
with the same dependencies with the same

00:13:14,470 --> 00:13:21,710
versions of everything also everyone can

00:13:18,830 --> 00:13:24,500
see the recipe as I said but also the

00:13:21,710 --> 00:13:28,220
logs so that's we think it's really

00:13:24,500 --> 00:13:31,640
for the ramp-up of the learning curve

00:13:28,220 --> 00:13:34,190
for the newcomers if you have a package

00:13:31,640 --> 00:13:36,560
when night well I started a really short

00:13:34,190 --> 00:13:39,290
time ago I don't have more than a year

00:13:36,560 --> 00:13:42,290
here at first it's a lot of black magic

00:13:39,290 --> 00:13:45,620
happening you know you run and you push

00:13:42,290 --> 00:13:48,410
and things happen on the background with

00:13:45,620 --> 00:13:51,410
this we want to to achieve having an

00:13:48,410 --> 00:13:54,380
explicit recipe on how the package is

00:13:51,410 --> 00:13:56,090
built and how the packages test and that

00:13:54,380 --> 00:14:00,200
people know that the developer uses the

00:13:56,090 --> 00:14:02,690
same recipe you are using that's to

00:14:00,200 --> 00:14:06,200
generate a bit of confidence on on the

00:14:02,690 --> 00:14:08,390
contributors well but what is the

00:14:06,200 --> 00:14:12,430
pipeline this is what the pipeline looks

00:14:08,390 --> 00:14:17,930
like on Debian it's quite white here

00:14:12,430 --> 00:14:18,830
here we can see two two stages the

00:14:17,930 --> 00:14:22,040
station the right

00:14:18,830 --> 00:14:24,590
it's the build we are now building with

00:14:22,040 --> 00:14:28,820
the get build package right now we see

00:14:24,590 --> 00:14:32,030
only build we have did method we have

00:14:28,820 --> 00:14:34,850
but we would like to have more so

00:14:32,030 --> 00:14:37,160
contributions are welcome once the

00:14:34,850 --> 00:14:40,370
package is built on the first stage all

00:14:37,160 --> 00:14:42,860
the the files that the result from that

00:14:40,370 --> 00:14:46,760
build are passed to the next stage where

00:14:42,860 --> 00:14:49,070
five tests are run in parallel we are

00:14:46,760 --> 00:14:51,980
running out of package tests that is the

00:14:49,070 --> 00:14:55,330
same that CIA definite runs which is a

00:14:51,980 --> 00:14:59,120
framework to run your the package tests

00:14:55,330 --> 00:15:01,910
also will be LHC let's build log

00:14:59,120 --> 00:15:07,700
hardener checks with checks for hardened

00:15:01,910 --> 00:15:09,980
flags also run by Debian Linnaean the

00:15:07,700 --> 00:15:13,700
Linnaean checks and reproducibility

00:15:09,980 --> 00:15:15,920
which now we're using repre test that

00:15:13,700 --> 00:15:19,090
it's the only thing that it's not the

00:15:15,920 --> 00:15:23,720
same as daven infrastructure does

00:15:19,090 --> 00:15:25,760
because reproducibility each test will

00:15:23,720 --> 00:15:27,770
different heart with different hardware

00:15:25,760 --> 00:15:30,280
and things but we are working on that

00:15:27,770 --> 00:15:34,970
and we would like to have the exact same

00:15:30,280 --> 00:15:37,190
things that Debian does all this takes

00:15:34,970 --> 00:15:38,000
no more than eight minutes for regular

00:15:37,190 --> 00:15:39,680
package

00:15:38,000 --> 00:15:42,710
don't package it means that when you

00:15:39,680 --> 00:15:44,300
push all this is run and in less than 10

00:15:42,710 --> 00:15:46,840
minutes you can have the feedback you

00:15:44,300 --> 00:15:50,180
need to know if the package works or not

00:15:46,840 --> 00:15:53,780
even less if fails the build or

00:15:50,180 --> 00:15:59,060
something before but it's we think it's

00:15:53,780 --> 00:16:01,130
really really fast it's important to

00:15:59,060 --> 00:16:02,870
note that every job is run on a clean

00:16:01,130 --> 00:16:05,780
and reproducible environment as I said

00:16:02,870 --> 00:16:08,590
previously that has the minimum required

00:16:05,780 --> 00:16:11,240
dependencies when you build the package

00:16:08,590 --> 00:16:14,090
the package the builds itself it's done

00:16:11,240 --> 00:16:15,950
on an environment which only has the

00:16:14,090 --> 00:16:17,690
build dependencies of your package it

00:16:15,950 --> 00:16:20,300
doesn't have anything else so maybe if

00:16:17,690 --> 00:16:23,600
you forgot to add a bill dependency that

00:16:20,300 --> 00:16:26,720
you happen to have because of the

00:16:23,600 --> 00:16:30,920
pendency of another thing you will

00:16:26,720 --> 00:16:33,680
notice that kind of problems there we

00:16:30,920 --> 00:16:36,590
would like to thank the salsa engine job

00:16:33,680 --> 00:16:41,210
because thanks to them we are capable of

00:16:36,590 --> 00:16:42,950
run all these in parallel because the

00:16:41,210 --> 00:16:47,690
infrastructure allows us to have a lot

00:16:42,950 --> 00:16:53,390
of runners at the same time well but how

00:16:47,690 --> 00:16:55,339
do I make my package CI that simple you

00:16:53,390 --> 00:16:57,830
only need to create a file of course

00:16:55,339 --> 00:17:03,260
under the Debian folder we are using

00:16:57,830 --> 00:17:06,890
salsa CI ml name but that's just because

00:17:03,260 --> 00:17:08,870
it's not mandatory which simplest

00:17:06,890 --> 00:17:11,930
definition it's just include those files

00:17:08,870 --> 00:17:13,699
those include the definition and

00:17:11,930 --> 00:17:16,490
implementation of all the jobs I show

00:17:13,699 --> 00:17:19,130
before this also of course can be

00:17:16,490 --> 00:17:20,959
modified you can read you can take a

00:17:19,130 --> 00:17:25,280
look at our readme you can modify each

00:17:20,959 --> 00:17:26,990
job or you can only use some of the jobs

00:17:25,280 --> 00:17:30,590
if you don't want everything to run you

00:17:26,990 --> 00:17:33,260
can just select some of them that's all

00:17:30,590 --> 00:17:34,880
well it's a little you need to change a

00:17:33,260 --> 00:17:39,080
little the configuration as I said

00:17:34,880 --> 00:17:42,290
because the results good laugh looks for

00:17:39,080 --> 00:17:44,300
this file on dot bid love CI the channel

00:17:42,290 --> 00:17:47,000
on the root of the project and in Debian

00:17:44,300 --> 00:17:48,110
we need to put it under Debian but we

00:17:47,000 --> 00:17:50,630
are trying to make that a default

00:17:48,110 --> 00:17:56,150
configuration somehow

00:17:50,630 --> 00:17:59,440
upstream our future plans well we would

00:17:56,150 --> 00:18:01,820
like to build and test on multi-textured

00:17:59,440 --> 00:18:05,270
right now we are only doing

00:18:01,820 --> 00:18:07,340
amd64 because that's where the runners

00:18:05,270 --> 00:18:09,919
are but we would like to have more

00:18:07,340 --> 00:18:12,289
runners on different architectures

00:18:09,919 --> 00:18:15,289
we'd love allows us to do to start a

00:18:12,289 --> 00:18:17,179
runner natively on an arm board or

00:18:15,289 --> 00:18:22,120
something like that so it would be

00:18:17,179 --> 00:18:24,950
possible also we would like to test

00:18:22,120 --> 00:18:28,070
upstream changes in Debian this means

00:18:24,950 --> 00:18:32,450
give upstream feedback about the package

00:18:28,070 --> 00:18:36,289
if they make a change the upstream on

00:18:32,450 --> 00:18:39,110
github to have a way to trigger our

00:18:36,289 --> 00:18:41,210
pipeline our building and let them know

00:18:39,110 --> 00:18:42,980
if they broke or not the package

00:18:41,210 --> 00:18:45,590
everything is okay or no you broke

00:18:42,980 --> 00:18:47,650
Debian packaging and someone had

00:18:45,590 --> 00:18:51,559
received some mail to have a feedback

00:18:47,650 --> 00:18:56,049
that we think upstream might like to

00:18:51,559 --> 00:19:00,440
know about the Debian packaging itself

00:18:56,049 --> 00:19:03,260
also well we're working on idea to

00:19:00,440 --> 00:19:06,200
propose new releases automatically this

00:19:03,260 --> 00:19:09,220
is when an upstream has a new release

00:19:06,200 --> 00:19:12,919
there's a version a new version on the

00:19:09,220 --> 00:19:15,500
watch the repository you're watching you

00:19:12,919 --> 00:19:18,650
can have a merge request opened on your

00:19:15,500 --> 00:19:20,840
project and the pipeline will run

00:19:18,650 --> 00:19:25,220
automatically so you know if the new

00:19:20,840 --> 00:19:28,549
upstream if importing the new upstream

00:19:25,220 --> 00:19:29,539
will run for Debian will break the tests

00:19:28,549 --> 00:19:33,020
will break something

00:19:29,539 --> 00:19:36,830
so as the pipeline runs for every commit

00:19:33,020 --> 00:19:39,470
if we bring upstream changes it will run

00:19:36,830 --> 00:19:42,440
against all your tests as you usually

00:19:39,470 --> 00:19:46,309
did and you at least you know if it

00:19:42,440 --> 00:19:47,659
breaks everything or doesn't also we

00:19:46,309 --> 00:19:50,600
will like to increase coverage right now

00:19:47,659 --> 00:19:53,120
we have these five tests inside we for

00:19:50,600 --> 00:19:55,880
example we don't have the FTP checks

00:19:53,120 --> 00:19:59,020
right now so we would like to to have

00:19:55,880 --> 00:20:03,360
more tests than to increase the the

00:19:59,020 --> 00:20:06,039
things we can test on on each commit

00:20:03,360 --> 00:20:08,350
if you want to help well we need the

00:20:06,039 --> 00:20:11,289
more use cases right now do we have some

00:20:08,350 --> 00:20:14,409
packages running the the pipeline but we

00:20:11,289 --> 00:20:16,900
know most package has have some

00:20:14,409 --> 00:20:20,200
differences between them so we would

00:20:16,900 --> 00:20:22,570
like everyone to let your package join

00:20:20,200 --> 00:20:28,679
the dark side right now we have more

00:20:22,570 --> 00:20:31,120
than 330 packages which is important but

00:20:28,679 --> 00:20:34,000
we would like everyone to use our

00:20:31,120 --> 00:20:36,190
pipeline we also need to improve the

00:20:34,000 --> 00:20:39,669
documentation if you take a look at our

00:20:36,190 --> 00:20:42,580
readme it's not the best thing it's

00:20:39,669 --> 00:20:46,090
quite hard for someone who doesn't know

00:20:42,580 --> 00:20:48,070
about get lucky I may be to understand

00:20:46,090 --> 00:20:50,350
what you have to do we're trying to work

00:20:48,070 --> 00:20:55,419
on that because it's really easy but we

00:20:50,350 --> 00:20:59,710
are not good writers so if anyone would

00:20:55,419 --> 00:21:01,780
like to is to discover what salsa CI

00:20:59,710 --> 00:21:05,200
means and document what they did to make

00:21:01,780 --> 00:21:07,330
it work that would help a lot we would

00:21:05,200 --> 00:21:12,070
like everyone involved on this project

00:21:07,330 --> 00:21:14,679
this our D is to help everyone so it's

00:21:12,070 --> 00:21:16,900
not something from us we would like you

00:21:14,679 --> 00:21:19,200
to bring your projects if something

00:21:16,900 --> 00:21:22,900
doesn't work for you to propose a change

00:21:19,200 --> 00:21:27,220
to report an issue well I don't use GBP

00:21:22,900 --> 00:21:31,570
I use another build method so that's the

00:21:27,220 --> 00:21:34,330
feedback we want this is how well our

00:21:31,570 --> 00:21:36,610
contributors so far we have like six

00:21:34,330 --> 00:21:40,260
months and many people got involved into

00:21:36,610 --> 00:21:42,460
making patches or issues or this is the

00:21:40,260 --> 00:21:46,330
people who has commit already

00:21:42,460 --> 00:21:50,520
so we are really thank to them well I

00:21:46,330 --> 00:21:50,520
would like to do a small demo

00:21:59,100 --> 00:22:08,590
so I picked randomly tested package I

00:22:04,330 --> 00:22:10,990
tried yesterday and the idea is to show

00:22:08,590 --> 00:22:13,180
how easy is to add the the pipeline to

00:22:10,990 --> 00:22:19,540
your project for example I got this

00:22:13,180 --> 00:22:22,780
project I'm gonna fork it my account

00:22:19,540 --> 00:22:25,000
Thank You teen yeah everything the first

00:22:22,780 --> 00:22:27,940
thing you need to do as I probably said

00:22:25,000 --> 00:22:30,250
is to change the CI path configuration

00:22:27,940 --> 00:22:33,790
in particularly this project hasn't got

00:22:30,250 --> 00:22:39,820
a CI enabled so the first thing you have

00:22:33,790 --> 00:22:42,220
to do it's to enable here CI a pipeline

00:22:39,820 --> 00:22:44,500
but anyway this comes on the defi

00:22:42,220 --> 00:22:54,190
default so you probably don't have to do

00:22:44,500 --> 00:23:01,180
it then on the CI configuration CI a CD

00:22:54,190 --> 00:23:02,920
you have this custom CI config path

00:23:01,180 --> 00:23:04,960
don't worry this is all documented on

00:23:02,920 --> 00:23:08,530
the read me but the idea here is you

00:23:04,960 --> 00:23:12,630
post the the file you want get let's see

00:23:08,530 --> 00:23:17,050
I will use also here but it's the same

00:23:12,630 --> 00:23:21,730
enter to put the changes and then you

00:23:17,050 --> 00:23:25,390
can add the pipeline example this is

00:23:21,730 --> 00:23:27,550
said it says set up set up CI CD but

00:23:25,390 --> 00:23:29,710
it's just because it offers you a

00:23:27,550 --> 00:23:32,050
template from grid lab it's just

00:23:29,710 --> 00:23:37,170
creating a file on on the possibly

00:23:32,050 --> 00:23:37,170
previously configured it but so this is

00:23:39,000 --> 00:23:44,140
and what you have to do is put this

00:23:42,610 --> 00:23:50,220
which is underneath me

00:23:44,140 --> 00:23:50,220
that's the text I put on the notes

00:23:51,320 --> 00:23:58,020
and this'll commit of course not the

00:23:55,020 --> 00:24:00,060
master this is just a test you can

00:23:58,020 --> 00:24:02,820
commit to any branch one of the features

00:24:00,060 --> 00:24:05,160
it has that the pipeline is defined on

00:24:02,820 --> 00:24:06,780
the branch not for the project so

00:24:05,160 --> 00:24:08,940
different branches can have different

00:24:06,780 --> 00:24:09,660
pipelines everything it's tracked on

00:24:08,940 --> 00:24:12,900
goodlove

00:24:09,660 --> 00:24:17,550
so okay I added this and now you can go

00:24:12,900 --> 00:24:21,300
to here this is CI CD pipelines and it's

00:24:17,550 --> 00:24:24,390
running that's all every time you push a

00:24:21,300 --> 00:24:27,270
commit to this ranch will start running

00:24:24,390 --> 00:24:29,220
this is it's running build whenever it

00:24:27,270 --> 00:24:32,040
finished building it will start testing

00:24:29,220 --> 00:24:34,470
the package just build and this is what

00:24:32,040 --> 00:24:36,270
it looks when it builds okay it's now is

00:24:34,470 --> 00:24:40,560
pounding the runner London is startled

00:24:36,270 --> 00:24:58,520
to build what is the control left you

00:24:40,560 --> 00:24:58,520
control a few questions

00:24:59,210 --> 00:25:03,500
we would love to have a lot of questions

00:25:08,630 --> 00:25:16,710
it wasn't that clear I hope doesn't have

00:25:14,160 --> 00:25:20,310
you thought out about scheduling the

00:25:16,710 --> 00:25:22,350
pipelines regularly over time I was

00:25:20,310 --> 00:25:24,660
looking into it and I think the only

00:25:22,350 --> 00:25:27,090
thing get lapis allowed allows you to do

00:25:24,660 --> 00:25:29,160
is to say I want to run this once each

00:25:27,090 --> 00:25:32,310
month and then it runs all drops on the

00:25:29,160 --> 00:25:35,040
first of the month a way to spread it

00:25:32,310 --> 00:25:40,440
out somehow you can configure on your

00:25:35,040 --> 00:25:42,990
project Krone runs jobs and it has you

00:25:40,440 --> 00:25:45,480
can run it whenever you want I mean you

00:25:42,990 --> 00:25:47,040
you say once in a month just because but

00:25:45,480 --> 00:25:50,130
you can run it I don't know every hour

00:25:47,040 --> 00:25:52,050
or every day it has the Quran syntax and

00:25:50,130 --> 00:25:55,590
you can write but I think then it's

00:25:52,050 --> 00:25:57,840
running in my account so I'm getting the

00:25:55,590 --> 00:26:00,530
notification yeah it's a way to get that

00:25:57,840 --> 00:26:00,530
to the team

00:26:00,730 --> 00:26:05,480
no I don't think so because how good lab

00:26:03,290 --> 00:26:09,710
handles it is that you are responsible

00:26:05,480 --> 00:26:12,170
for that and it uses your account to

00:26:09,710 --> 00:26:13,730
trigger so the pipeline has your it's as

00:26:12,170 --> 00:26:30,920
if you triggered it it has your

00:26:13,730 --> 00:26:34,760
permissions your team email for example

00:26:30,920 --> 00:26:38,180
with the user that has just like a

00:26:34,760 --> 00:26:40,100
workaround it's not the best but if an

00:26:38,180 --> 00:26:45,110
trigger trigger the Python is just cool

00:26:40,100 --> 00:26:48,130
with the token with the proper token so

00:26:45,110 --> 00:26:52,310
you can do that

00:26:48,130 --> 00:26:53,690
another question so I have a question so

00:26:52,310 --> 00:26:55,990
if I want to change something in this

00:26:53,690 --> 00:26:58,670
thing do I have to copy paste the whole

00:26:55,990 --> 00:27:00,680
llamÃ³ from you and then change it or is

00:26:58,670 --> 00:27:02,390
there a way to override something or

00:27:00,680 --> 00:27:03,980
maybe you can show how how that works if

00:27:02,390 --> 00:27:06,170
I for example want to remove one of the

00:27:03,980 --> 00:27:08,560
tests in my project how would that work

00:27:06,170 --> 00:27:12,140
out there it is it's everything here but

00:27:08,560 --> 00:27:14,720
you can for example here we have a

00:27:12,140 --> 00:27:17,000
different thing we are running Reaper

00:27:14,720 --> 00:27:19,160
tests without desculpe because it's need

00:27:17,000 --> 00:27:22,160
in it's a lot of RAM and some big

00:27:19,160 --> 00:27:25,120
projects won't build because the runners

00:27:22,160 --> 00:27:28,460
house have only one jjigae right and

00:27:25,120 --> 00:27:32,180
that's how you change for example a test

00:27:28,460 --> 00:27:35,750
you need to define a new job with the

00:27:32,180 --> 00:27:40,090
same name as the one we did and you make

00:27:35,750 --> 00:27:40,090
it do anything you want perfect thanks

00:27:43,270 --> 00:27:48,740
so I'm old-fashioned and I just upload

00:27:46,340 --> 00:27:50,630
doubles with cult patches and stuff to

00:27:48,740 --> 00:27:52,790
Debian's infrastructure they really use

00:27:50,630 --> 00:27:54,770
git if I can help it I don't have all my

00:27:52,790 --> 00:27:56,600
stuff in salsa but this sounds quite

00:27:54,770 --> 00:27:57,950
nice so what's the easiest way to use

00:27:56,600 --> 00:27:59,570
this without having to use git for

00:27:57,950 --> 00:28:06,140
everything or is that not really

00:27:59,570 --> 00:28:07,640
possible I've got to get into this whole

00:28:06,140 --> 00:28:19,220
kit world and start building things with

00:28:07,640 --> 00:28:21,380
get it works yeah kindig-it do it for me

00:28:19,220 --> 00:28:22,580
because that sort of made things between

00:28:21,380 --> 00:28:23,920
one world on the other without me having

00:28:22,580 --> 00:28:26,150
to learn all that

00:28:23,920 --> 00:28:28,160
can you can you connect this to dig its

00:28:26,150 --> 00:28:31,430
repository as well as Celsus repository

00:28:28,160 --> 00:28:34,760
there be a thing or honestly I don't

00:28:31,430 --> 00:28:36,980
know how you get core of work so I'd

00:28:34,760 --> 00:28:38,300
probably I think the point is that

00:28:36,980 --> 00:28:40,640
you're fine if you just upload things

00:28:38,300 --> 00:28:44,270
with addy gate it puts it in a git repo

00:28:40,640 --> 00:28:47,360
somewhere as well yeah exactly and then

00:28:44,270 --> 00:28:48,650
and then maybe the infrastructure could

00:28:47,360 --> 00:28:52,790
run on that repository too

00:28:48,650 --> 00:28:54,470
yeah it's possible yeah anyway that's

00:28:52,790 --> 00:28:56,020
that's the view of the world from like

00:28:54,470 --> 00:28:58,730
old-fashioned people who haven't really

00:28:56,020 --> 00:29:02,870
okay okay fair's probably still quite a

00:28:58,730 --> 00:29:05,140
lot of as I dunno I I just wanted to

00:29:02,870 --> 00:29:08,990
comment on the on your suggestion see

00:29:05,140 --> 00:29:11,960
who can on to dig it ah well it's sort

00:29:08,990 --> 00:29:16,160
of goes against the point of it because

00:29:11,960 --> 00:29:19,310
the point of see is as I seed is to take

00:29:16,160 --> 00:29:21,850
Tesla's changes before they go to the

00:29:19,310 --> 00:29:25,340
archive and to get indicated get things

00:29:21,850 --> 00:29:26,810
after well in the process are as they

00:29:25,340 --> 00:29:29,480
getting applauded they getting pushed it

00:29:26,810 --> 00:29:32,060
to get so it's basically defies the

00:29:29,480 --> 00:29:34,460
point a bit well it still still provide

00:29:32,060 --> 00:29:36,980
some value but much less value than it

00:29:34,460 --> 00:29:39,070
does when you actually use salsa thank

00:29:36,980 --> 00:29:39,070
you

00:29:41,780 --> 00:29:51,200
so if one of my tests breaks in that run

00:29:46,280 --> 00:29:53,950
how how do I get what exactly this

00:29:51,200 --> 00:29:53,950
broken

00:29:54,380 --> 00:29:58,400
you can see the logs it depends on what

00:29:56,570 --> 00:30:00,590
it's broken I don't know what do you

00:29:58,400 --> 00:30:03,230
mean if the test broke or your package

00:30:00,590 --> 00:30:04,700
is not compatible with the pipeline if

00:30:03,230 --> 00:30:06,320
the taste rope if anything in the

00:30:04,700 --> 00:30:10,460
pipeline broke you will get the mail

00:30:06,320 --> 00:30:12,680
with the last piece of the log hmm so

00:30:10,460 --> 00:30:14,780
you can see it anyway you can enter the

00:30:12,680 --> 00:30:19,610
pipeline and watch it and read the whole

00:30:14,780 --> 00:30:21,860
lot but there's no state of the of the

00:30:19,610 --> 00:30:28,730
runner or something that I can be back

00:30:21,860 --> 00:30:31,310
oh no there is a feature but it is not

00:30:28,730 --> 00:30:34,790
enabled because the salsa admins are

00:30:31,310 --> 00:30:37,490
waiting for Caleb come enabled because

00:30:34,790 --> 00:30:40,730
it has some problems but yeah in the

00:30:37,490 --> 00:30:44,420
future you will be able to to debug and

00:30:40,730 --> 00:30:46,430
inside the runner you'll have made a

00:30:44,420 --> 00:30:48,680
wait for you to attach to the same

00:30:46,430 --> 00:30:51,410
environment that is running so you can

00:30:48,680 --> 00:30:54,020
see what happened but they didn't even

00:30:51,410 --> 00:30:56,300
enabled it on github.com so such

00:30:54,020 --> 00:30:57,560
thousands are waiting so there's a

00:30:56,300 --> 00:31:00,020
reason they didn't enable it

00:30:57,560 --> 00:31:03,430
okay thanks but we will probably have it

00:31:00,020 --> 00:31:03,430
son it would be really helpful

00:31:14,520 --> 00:31:21,360
have time can you say a little bit more

00:31:19,410 --> 00:31:23,910
about your runner infrastructure how do

00:31:21,360 --> 00:31:26,220
they look like what do they consist how

00:31:23,910 --> 00:31:28,170
do they scale and maybe also how can you

00:31:26,220 --> 00:31:29,820
clone them I mean if you're not on salza

00:31:28,170 --> 00:31:32,970
directly so we a lot of downstream

00:31:29,820 --> 00:31:35,490
package work going on so I could imagine

00:31:32,970 --> 00:31:37,860
that this we run the same thing for our

00:31:35,490 --> 00:31:39,480
downstream stuff in our infrastructure

00:31:37,860 --> 00:31:42,660
of course we're using the same thing

00:31:39,480 --> 00:31:45,600
that you are doing well honestly we are

00:31:42,660 --> 00:31:48,240
not the salsa admins so but you can see

00:31:45,600 --> 00:31:50,700
the cold they are using ansible

00:31:48,240 --> 00:31:53,070
I guess so we are using what salsa

00:31:50,700 --> 00:31:54,900
provided us we don't have our custom

00:31:53,070 --> 00:31:58,679
runners we are just using what Debian

00:31:54,900 --> 00:32:01,770
has so anyone can use that but you can

00:31:58,679 --> 00:32:05,820
do the same that he did on Ghaleb calm

00:32:01,770 --> 00:32:09,990
and it will work fine or you can do that

00:32:05,820 --> 00:32:12,570
and your private instance and it will a

00:32:09,990 --> 00:32:19,790
doctor Runner and it would do everything

00:32:12,570 --> 00:32:23,040
just as we did yeah it's dr. white yeah

00:32:19,790 --> 00:32:26,780
or contain your base because maybe the

00:32:23,040 --> 00:32:26,780
future is going to change yeah

00:32:29,270 --> 00:32:34,670
Architects well in my case I use those

00:32:32,520 --> 00:32:37,740
two packages your sizes yeah I already

00:32:34,670 --> 00:32:39,870
but the thing is most of them my package

00:32:37,740 --> 00:32:40,890
breaks in architecture which are not

00:32:39,870 --> 00:32:44,429
amd64

00:32:40,890 --> 00:32:50,280
so do we have like an idea when the size

00:32:44,429 --> 00:32:53,190
of all supply no we we would like to

00:32:50,280 --> 00:32:56,520
talk about that with people already like

00:32:53,190 --> 00:33:00,120
boogie or someone that already have

00:32:56,520 --> 00:33:03,000
experience adding coverage for different

00:33:00,120 --> 00:33:06,059
architectures let's see if we can get

00:33:03,000 --> 00:33:07,590
machines dedicated to Gil that to sulfa

00:33:06,059 --> 00:33:09,630
I guess select some architectures like

00:33:07,590 --> 00:33:10,860
which are do down support like

00:33:09,630 --> 00:33:15,840
containers right now the probably not

00:33:10,860 --> 00:33:17,429
work but would be helpful and then the

00:33:15,840 --> 00:33:21,630
other point was from your future

00:33:17,429 --> 00:33:24,330
prospects this like pulling from

00:33:21,630 --> 00:33:26,790
upstream projects and testing it and my

00:33:24,330 --> 00:33:28,260
experience like even simpler projects do

00:33:26,790 --> 00:33:29,970
have like issues with

00:33:28,260 --> 00:33:33,780
patches like if you have at my local

00:33:29,970 --> 00:33:35,940
Petrus and my package is rebuilt like

00:33:33,780 --> 00:33:38,460
the oldest pagers need to be rebased on

00:33:35,940 --> 00:33:40,830
the news changes and I I don't know how

00:33:38,460 --> 00:33:44,280
you intend to do that well but yeah

00:33:40,830 --> 00:33:48,900
usually you usually you try to remove

00:33:44,280 --> 00:33:52,770
the patches from your package so if if

00:33:48,900 --> 00:33:54,540
upstream pushes comet and break your

00:33:52,770 --> 00:33:59,340
patches yeah you have to revise them

00:33:54,540 --> 00:34:00,900
yeah closer was me okay especially like

00:33:59,340 --> 00:34:04,620
with pictures like net data wherever we

00:34:00,900 --> 00:34:06,600
have like some ideas what default values

00:34:04,620 --> 00:34:08,550
should be and they don't apply to Debian

00:34:06,600 --> 00:34:10,070
operating system then we have an issue

00:34:08,550 --> 00:34:12,240
that we have to supply patches and

00:34:10,070 --> 00:34:14,220
that's why one of the points are like

00:34:12,240 --> 00:34:17,250
you there needs to be like either like

00:34:14,220 --> 00:34:20,760
turn off like the patches for these

00:34:17,250 --> 00:34:21,419
dream bells or actually we can talk

00:34:20,760 --> 00:34:24,530
about that later

00:34:21,419 --> 00:34:27,560
yeah we should think about that yeah

00:34:24,530 --> 00:34:27,560
thank you

00:34:42,110 --> 00:34:46,409
yeah you can you can show the demo that

00:34:44,580 --> 00:34:53,210
you made earlier whether it worked okay

00:34:46,409 --> 00:34:57,210
no no this is the this is the bill job

00:34:53,210 --> 00:35:00,450
it finished and for example I can show

00:34:57,210 --> 00:35:03,090
you this is the artifacts artifacts is

00:35:00,450 --> 00:35:05,580
well how good love calls the files which

00:35:03,090 --> 00:35:09,810
result from a job and they are passed to

00:35:05,580 --> 00:35:16,860
next one so this is what we are having

00:35:09,810 --> 00:35:19,740
as an artifact it's all the files

00:35:16,860 --> 00:35:23,670
generated plus for example I'll de log

00:35:19,740 --> 00:35:25,950
from the build if you like I can read it

00:35:23,670 --> 00:35:29,100
here but it's sometimes it's too big for

00:35:25,950 --> 00:35:31,350
good lab to display it so you we pipe it

00:35:29,100 --> 00:35:34,390
to the file so you can analyze it if

00:35:31,350 --> 00:35:36,440
something goes wrong and then Oh

00:35:34,390 --> 00:35:50,330
[Music]

00:35:36,440 --> 00:35:54,150
everything went well example test this

00:35:50,330 --> 00:35:55,980
has tests this package yeah did the test

00:35:54,150 --> 00:35:57,630
passed here you have this is the name of

00:35:55,980 --> 00:36:00,690
the death it passed this is a summary

00:35:57,630 --> 00:36:02,730
only one test or one test in fact when

00:36:00,690 --> 00:36:04,619
auto package test defines the test and

00:36:02,730 --> 00:36:06,960
you can done a lot of things yeah as you

00:36:04,619 --> 00:36:08,820
can see there there is we are running

00:36:06,960 --> 00:36:11,430
just out the package test is the same

00:36:08,820 --> 00:36:21,080
about boot is not like anything else I

00:36:11,430 --> 00:36:28,920
mean we like to see it's not see Indian

00:36:21,080 --> 00:36:31,350
it shows two warnings few parts run okay

00:36:28,920 --> 00:36:34,080
and you can for example just to point

00:36:31,350 --> 00:36:37,050
this out you can see this took almost

00:36:34,080 --> 00:36:40,170
three minutes to run which one minute

00:36:37,050 --> 00:36:43,260
and a half it's just turning on the very

00:36:40,170 --> 00:36:45,060
brutal machine for the get runner so

00:36:43,260 --> 00:36:47,670
it's quite fast

00:36:45,060 --> 00:36:52,580
and this is reproduced with the

00:36:47,670 --> 00:36:52,580
packaging so reproduce and that's the

00:36:53,360 --> 00:36:58,590
hope you can use this and give us

00:36:56,670 --> 00:37:01,050
feedback hope it works

00:36:58,590 --> 00:37:04,440
it gives it has some value to your

00:37:01,050 --> 00:37:09,750
project we are trying to make our lives

00:37:04,440 --> 00:37:11,430
easier okay if there are no more

00:37:09,750 --> 00:37:13,280
questions then let's thank the speakers

00:37:11,430 --> 00:37:19,859
again

00:37:13,280 --> 00:37:19,859

YouTube URL: https://www.youtube.com/watch?v=JSsXnyAdUW8


