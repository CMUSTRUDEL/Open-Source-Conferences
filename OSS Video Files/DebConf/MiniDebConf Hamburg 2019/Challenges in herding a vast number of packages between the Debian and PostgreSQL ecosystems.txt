Title: Challenges in herding a vast number of packages between the Debian and PostgreSQL ecosystems
Publication date: 2019-06-15
Playlist: MiniDebConf Hamburg 2019
Description: 
	by Christoph Berg

At: MiniDebConf Hamburg 2019
https://wiki.debian.org/DebianEvents/de/2019/MiniDebConfHamburg
Room: main
Scheduled start: 2019-06-09 12:00:00
Captions: 
	00:00:05,420 --> 00:00:12,330
okay so our next talk is by Chris off

00:00:09,889 --> 00:00:14,790
about and and actually I think it's the

00:00:12,330 --> 00:00:18,260
longest title yeah yeah I'm just in

00:00:14,790 --> 00:00:20,670
hurting Oh at least on screen sofa

00:00:18,260 --> 00:00:22,700
hurting a last number of packages

00:00:20,670 --> 00:00:30,420
between the Debian and PostgreSQL

00:00:22,700 --> 00:00:32,460
ecosystems okay hello welcome so this

00:00:30,420 --> 00:00:34,800
talk is again about something that

00:00:32,460 --> 00:00:36,300
Andrew and silico and probably something

00:00:34,800 --> 00:00:39,809
that someone else has been talking about

00:00:36,300 --> 00:00:43,559
about building packages in a structured

00:00:39,809 --> 00:00:46,170
way and getting it out to a number of

00:00:43,559 --> 00:00:48,719
users that are not directly inside

00:00:46,170 --> 00:00:53,819
Debian but also about inside Debian and

00:00:48,719 --> 00:00:57,109
on on the outside though yeah a few

00:00:53,819 --> 00:01:00,600
words about me have been Dedes since

00:00:57,109 --> 00:01:03,059
2005 shortly afterwards started working

00:01:00,600 --> 00:01:06,740
at creative where I'm working as a

00:01:03,059 --> 00:01:09,540
PostgreSQL consultant giving trainings

00:01:06,740 --> 00:01:13,710
doing remote administration and stuff

00:01:09,540 --> 00:01:16,740
and got involved also in post Cosco

00:01:13,710 --> 00:01:18,719
packaging in 2012 so it was quite a

00:01:16,740 --> 00:01:21,840
while later after I've started working

00:01:18,719 --> 00:01:24,479
on actual database stuff but have been

00:01:21,840 --> 00:01:28,350
the primary maintainer of Postgres and

00:01:24,479 --> 00:01:32,070
debian ever since taking over from

00:01:28,350 --> 00:01:34,649
martin bit back back at the time at the

00:01:32,070 --> 00:01:37,740
same time I started working on a project

00:01:34,649 --> 00:01:41,310
on the post crush site which is this a

00:01:37,740 --> 00:01:45,240
post Gospel Oak repository which is

00:01:41,310 --> 00:01:47,340
hosting all the post ghost versions

00:01:45,240 --> 00:01:50,759
compiled for all the debian and all the

00:01:47,340 --> 00:01:54,090
mobile versions out there so and this

00:01:50,759 --> 00:01:58,070
talk is about connecting the debian and

00:01:54,090 --> 00:02:01,590
the poster side of these two words and

00:01:58,070 --> 00:02:03,689
luckily my employer credit safe is

00:02:01,590 --> 00:02:09,050
paying for most of the packaging work

00:02:03,689 --> 00:02:12,870
I'm doing in there so that's quite nice

00:02:09,050 --> 00:02:15,400
okay so first we start with post press

00:02:12,870 --> 00:02:22,840
on the dev inside you all know this

00:02:15,400 --> 00:02:25,630
GDP overview there's at the moment 78

00:02:22,840 --> 00:02:30,180
packages in the post press maintainer

00:02:25,630 --> 00:02:32,500
team there's a few more related packages

00:02:30,180 --> 00:02:35,680
related to post close maintained by

00:02:32,500 --> 00:02:38,830
other teams by other individuals which

00:02:35,680 --> 00:02:43,810
I'm also looking at but luckily there's

00:02:38,830 --> 00:02:46,000
a few more people working on on that to

00:02:43,810 --> 00:02:48,790
look at the packages there are a few

00:02:46,000 --> 00:02:51,910
types at first there's the Postgres

00:02:48,790 --> 00:02:55,090
server packages then we have this post

00:02:51,910 --> 00:02:58,260
per square common management layer on

00:02:55,090 --> 00:03:01,150
top or maybe below the server packages

00:02:58,260 --> 00:03:04,360
then we have a few post costs

00:03:01,150 --> 00:03:06,370
application which are mostly boring in

00:03:04,360 --> 00:03:08,080
this context here because they just have

00:03:06,370 --> 00:03:10,840
to be compiled once and then they are

00:03:08,080 --> 00:03:12,810
there libraries are of course a bit more

00:03:10,840 --> 00:03:15,940
interesting because they have more

00:03:12,810 --> 00:03:17,830
dependencies in all directions and then

00:03:15,940 --> 00:03:21,700
what this talk is really about is how to

00:03:17,830 --> 00:03:23,950
get PostgreSQL serve our modules or post

00:03:21,700 --> 00:03:28,360
course extensions which is mostly the

00:03:23,950 --> 00:03:30,580
same thing compiled for post crests in

00:03:28,360 --> 00:03:32,470
Debian and in the other distributions

00:03:30,580 --> 00:03:36,010
and this is really where the interesting

00:03:32,470 --> 00:03:41,320
part happens here so the post post

00:03:36,010 --> 00:03:43,600
server is a huge C program which also

00:03:41,320 --> 00:03:46,750
has a huge built-in test suite which is

00:03:43,600 --> 00:03:51,400
just invoked by make check world at

00:03:46,750 --> 00:03:53,350
build time it has two major parts the

00:03:51,400 --> 00:03:56,860
largest part which has basically been

00:03:53,350 --> 00:04:00,220
there forever as Petri regress I also

00:03:56,860 --> 00:04:03,280
have a short screenshot here there which

00:04:00,220 --> 00:04:05,050
is basic about executing lots of SQL

00:04:03,280 --> 00:04:08,650
queries on the server side and then

00:04:05,050 --> 00:04:12,760
checking if the result is what the

00:04:08,650 --> 00:04:18,250
developers are expecting next to that

00:04:12,760 --> 00:04:20,859
there's a huge tap test suite this is

00:04:18,250 --> 00:04:25,150
quite new has been edits about two years

00:04:20,859 --> 00:04:27,550
ago or maybe three which is testing all

00:04:25,150 --> 00:04:29,440
the utilities around to survive

00:04:27,550 --> 00:04:32,530
in this example here the PG based makeup

00:04:29,440 --> 00:04:38,139
tool is executed in several ways to

00:04:32,530 --> 00:04:42,099
check if the result is what is expected

00:04:38,139 --> 00:04:43,870
there so yeah all these tests are

00:04:42,099 --> 00:04:46,560
running at Build time so each time the

00:04:43,870 --> 00:04:52,419
server's compiled that test suite is

00:04:46,560 --> 00:04:56,440
executed the interesting part about

00:04:52,419 --> 00:04:58,599
packaging Postgres is that there's

00:04:56,440 --> 00:05:01,569
different posters major versions and

00:04:58,599 --> 00:05:06,120
these are incompatible from a user

00:05:01,569 --> 00:05:10,120
viewpoint so this means that post cause

00:05:06,120 --> 00:05:12,280
extensions C libraries have to be

00:05:10,120 --> 00:05:15,250
compiled for each server versions and

00:05:12,280 --> 00:05:17,530
also the SQL features that is a bit

00:05:15,250 --> 00:05:20,169
different so users like to be able to

00:05:17,530 --> 00:05:23,080
choose which server versions they

00:05:20,169 --> 00:05:25,419
install so on the post goes on the

00:05:23,080 --> 00:05:28,590
Debian site we can support installing

00:05:25,419 --> 00:05:31,240
sever PG major versions in parallel

00:05:28,590 --> 00:05:33,759
which means we create separate source

00:05:31,240 --> 00:05:36,639
packages these are just called post

00:05:33,759 --> 00:05:40,330
press 9 6 posters 10 post cars drive and

00:05:36,639 --> 00:05:42,819
the upcoming posters 12 and so on we

00:05:40,330 --> 00:05:47,020
just put them put all files into

00:05:42,819 --> 00:05:49,419
separate directories so all directories

00:05:47,020 --> 00:05:52,210
have the the version number in there

00:05:49,419 --> 00:05:58,270
so these packages can be installed in

00:05:52,210 --> 00:06:00,729
parallel what we do at the same time is

00:05:58,270 --> 00:06:03,159
that there's only one the PQ 5 package

00:06:00,729 --> 00:06:06,430
which means the libraries library

00:06:03,159 --> 00:06:10,650
packages produced by the server packages

00:06:06,430 --> 00:06:13,210
have the same names or we're not

00:06:10,650 --> 00:06:16,180
supporting installing that installing

00:06:13,210 --> 00:06:18,099
that in parallel in India bein the nice

00:06:16,180 --> 00:06:21,509
thing about that scheme it's it's not

00:06:18,099 --> 00:06:24,759
how post press is it's starting itself

00:06:21,509 --> 00:06:26,229
natively but packaging is that way is

00:06:24,759 --> 00:06:31,240
supported by upstream so I'm getting

00:06:26,229 --> 00:06:32,800
super good support from upstream on that

00:06:31,240 --> 00:06:35,349
side so if there's any problems in that

00:06:32,800 --> 00:06:37,330
area they are willing to fix it so it's

00:06:35,349 --> 00:06:39,630
not just something we're that Debian is

00:06:37,330 --> 00:06:39,630
doing

00:06:39,850 --> 00:06:49,040
so on top of Postgres debian is putting

00:06:45,050 --> 00:06:52,160
a management layer which is called post

00:06:49,040 --> 00:06:56,660
Co Co common which means it's a set of

00:06:52,160 --> 00:06:59,450
scripts that manage this set of multiple

00:06:56,660 --> 00:07:03,050
polish versions and instances per host

00:06:59,450 --> 00:07:05,720
on on one machine it's a set of Perl

00:07:03,050 --> 00:07:07,820
scripts which are pretty messy they

00:07:05,720 --> 00:07:09,620
could be a bit shorter but yeah we're

00:07:07,820 --> 00:07:11,630
working on that

00:07:09,620 --> 00:07:13,250
so if we've been using post-course on

00:07:11,630 --> 00:07:15,530
debian you've seen these PG crate

00:07:13,250 --> 00:07:18,350
cluster PG LS clusters PG something

00:07:15,530 --> 00:07:20,360
cluster tools these are all added by

00:07:18,350 --> 00:07:24,380
Debian on top of Postgres they are not

00:07:20,360 --> 00:07:27,710
part of the original post press

00:07:24,380 --> 00:07:30,020
distribution post was become itself has

00:07:27,710 --> 00:07:32,980
a very large test suite with probably

00:07:30,020 --> 00:07:35,950
over thousands individual tests running

00:07:32,980 --> 00:07:40,100
on the post code server packages and

00:07:35,950 --> 00:07:43,220
what it does is to test that in

00:07:40,100 --> 00:07:46,130
infrastructure these PG cluster tools

00:07:43,220 --> 00:07:49,850
and it also tests some aspects of the

00:07:46,130 --> 00:07:52,580
post code server and the point where

00:07:49,850 --> 00:07:54,680
this is running is it's running using

00:07:52,580 --> 00:07:56,750
auto package tests only installed

00:07:54,680 --> 00:07:59,090
packages so it this is not running at

00:07:56,750 --> 00:08:05,390
ins at Build time but it's running at

00:07:59,090 --> 00:08:07,490
what at install time so this is one

00:08:05,390 --> 00:08:10,730
example for how it looks like so it's

00:08:07,490 --> 00:08:14,030
executing psql in very various ways and

00:08:10,730 --> 00:08:16,340
to see if the interface to these

00:08:14,030 --> 00:08:22,910
different posters clusters on that

00:08:16,340 --> 00:08:26,420
machine works so about building testing

00:08:22,910 --> 00:08:30,020
applications often testers are rare

00:08:26,420 --> 00:08:32,060
because it's it could be graphical

00:08:30,020 --> 00:08:35,750
applications which are which are hard to

00:08:32,060 --> 00:08:38,570
test so what were usually doing there is

00:08:35,750 --> 00:08:40,790
to do manual smoke tests like build a

00:08:38,570 --> 00:08:43,610
package starts the program once and if

00:08:40,790 --> 00:08:47,210
it runs it's okay we could be doing

00:08:43,610 --> 00:08:50,390
better in that regard but yeah if the

00:08:47,210 --> 00:08:51,540
application has a test suite we like to

00:08:50,390 --> 00:08:56,670
use it but

00:08:51,540 --> 00:08:59,459
often it's not that easy so libraries

00:08:56,670 --> 00:09:02,870
are yeah I usually stand up reading

00:08:59,459 --> 00:09:05,940
practice so if you have like library

00:09:02,870 --> 00:09:10,050
accessing post plus in some way just run

00:09:05,940 --> 00:09:12,630
the test suite at build time try to make

00:09:10,050 --> 00:09:17,269
up something that runs as auto package

00:09:12,630 --> 00:09:20,790
on the install packages and yeah we are

00:09:17,269 --> 00:09:24,509
mostly covering all libraries we are

00:09:20,790 --> 00:09:27,240
packaging there so I said the

00:09:24,509 --> 00:09:30,029
interesting part is testing the

00:09:27,240 --> 00:09:34,170
PostgreSQL server modules or extensions

00:09:30,029 --> 00:09:36,029
I said before the compiled modules are

00:09:34,170 --> 00:09:39,540
specific to the PostgreSQL server

00:09:36,029 --> 00:09:42,649
version so we have to compile each

00:09:39,540 --> 00:09:47,699
module once for each post course survey

00:09:42,649 --> 00:09:50,639
version that we will support so it means

00:09:47,699 --> 00:09:53,250
that the module packages need to be

00:09:50,639 --> 00:09:55,319
aware that there are several post cost

00:09:53,250 --> 00:09:58,110
versions out there or maybe there might

00:09:55,319 --> 00:09:59,790
be several versions out there and the

00:09:58,110 --> 00:10:01,589
common practice what we're doing in most

00:09:59,790 --> 00:10:05,310
packages is there that we have one

00:10:01,589 --> 00:10:09,050
source package like PostgreSQL foo that

00:10:05,310 --> 00:10:13,529
will produce a set of binary packages

00:10:09,050 --> 00:10:20,850
were the dollar version part is the

00:10:13,529 --> 00:10:23,190
Postgres version targeted so of course

00:10:20,850 --> 00:10:24,810
we are not manually updating all the

00:10:23,190 --> 00:10:27,060
packages for the list of postcode

00:10:24,810 --> 00:10:29,550
versions that we have at the moment so

00:10:27,060 --> 00:10:33,029
there's a packaging helper called PG

00:10:29,550 --> 00:10:35,040
bill text which makes they're being

00:10:33,029 --> 00:10:38,010
controlled I mean rules aware of the

00:10:35,040 --> 00:10:41,339
list of PG major versions that are

00:10:38,010 --> 00:10:43,319
supported there's a small control file

00:10:41,339 --> 00:10:45,510
there that's called Debian PG versions

00:10:43,319 --> 00:10:49,079
which lists the version that this

00:10:45,510 --> 00:10:51,480
package is able to support in the usual

00:10:49,079 --> 00:10:54,300
case it just says all which means all

00:10:51,480 --> 00:10:56,839
post cost versions could be used by that

00:10:54,300 --> 00:11:01,139
package or you can put something like

00:10:56,839 --> 00:11:02,910
9.5 plus in there to say that's a

00:11:01,139 --> 00:11:05,279
minimum post Coast version supported by

00:11:02,910 --> 00:11:09,089
this package and what then happens

00:11:05,279 --> 00:11:14,220
is that we have a Debian control dot in

00:11:09,089 --> 00:11:16,980
file which on the next slide you can see

00:11:14,220 --> 00:11:21,749
that we have a template in there which

00:11:16,980 --> 00:11:22,559
is just PG version and then if you say

00:11:21,749 --> 00:11:26,069
PG build

00:11:22,559 --> 00:11:31,620
update control it will generate the real

00:11:26,069 --> 00:11:37,490
Debian control file from that file at to

00:11:31,620 --> 00:11:37,490
be used really for building the package

00:11:38,269 --> 00:11:47,509
at the same time the Debian rules file

00:11:41,399 --> 00:11:53,160
is also using that PG bill text helper

00:11:47,509 --> 00:11:55,949
which yeah which takes care of building

00:11:53,160 --> 00:11:59,040
of looping over the installed post class

00:11:55,949 --> 00:12:02,809
versions to produce binaries for post

00:11:59,040 --> 00:12:07,649
cost ten eleven twelve and so on

00:12:02,809 --> 00:12:09,449
so we have two rules here the built rule

00:12:07,649 --> 00:12:13,170
and the install rule and as you can see

00:12:09,449 --> 00:12:16,649
the test rule here is empty the problem

00:12:13,170 --> 00:12:18,829
there is that at the moment we can't

00:12:16,649 --> 00:12:24,089
test post course modules at Build time

00:12:18,829 --> 00:12:28,139
because to really test packages we need

00:12:24,089 --> 00:12:30,990
to have the the module installed in the

00:12:28,139 --> 00:12:34,740
server in user shall post cross girl and

00:12:30,990 --> 00:12:36,209
that's it at the moment is or this is

00:12:34,740 --> 00:12:38,839
not possible at Build time because we

00:12:36,209 --> 00:12:41,610
can't put stuff into user share and

00:12:38,839 --> 00:12:44,670
unfortunately at the moment post course

00:12:41,610 --> 00:12:48,269
is not able to load modules from average

00:12:44,670 --> 00:12:51,559
relief files from the file system so we

00:12:48,269 --> 00:12:56,279
have to defer the real PG request run at

00:12:51,559 --> 00:13:01,230
Build time to be to run at the install

00:12:56,279 --> 00:13:05,329
time and also problem is that many make

00:13:01,230 --> 00:13:08,399
files out there usually not safe for

00:13:05,329 --> 00:13:11,879
building out of free usually we are

00:13:08,399 --> 00:13:15,480
creating separate directories for each

00:13:11,879 --> 00:13:16,679
post post version and many modules do

00:13:15,480 --> 00:13:19,530
not support that but we have a

00:13:16,679 --> 00:13:22,020
workaround there where it just loops or

00:13:19,530 --> 00:13:23,490
instead of building for all versions and

00:13:22,020 --> 00:13:26,160
then installing for all versions we have

00:13:23,490 --> 00:13:29,370
a loop that will do build install build

00:13:26,160 --> 00:13:37,080
install and so on so until all versions

00:13:29,370 --> 00:13:40,770
are coverage so how do we actually run

00:13:37,080 --> 00:13:42,300
these tests we have a rapid clip PG

00:13:40,770 --> 00:13:44,310
virtual end which is part of

00:13:42,300 --> 00:13:46,910
post-classical common so you will

00:13:44,310 --> 00:13:49,800
probably have it already in your

00:13:46,910 --> 00:13:50,970
installation if you have it in your post

00:13:49,800 --> 00:13:53,330
course installation if you ever

00:13:50,970 --> 00:13:56,160
installed post course on your machine

00:13:53,330 --> 00:14:00,480
what it does is to create a throwaway

00:13:56,160 --> 00:14:03,660
post post instance and give you shell to

00:14:00,480 --> 00:14:06,960
run commands in there so you just say PG

00:14:03,660 --> 00:14:10,680
virtual and make install check and it

00:14:06,960 --> 00:14:12,560
will run that command inside a shell

00:14:10,680 --> 00:14:16,830
environment where you have a temporary

00:14:12,560 --> 00:14:19,260
post post server that will be thrown

00:14:16,830 --> 00:14:23,030
away again at the end so the test can do

00:14:19,260 --> 00:14:23,030
every great things in there without

00:14:23,060 --> 00:14:27,720
destroying your actual data you might

00:14:25,290 --> 00:14:31,740
have on some post cause installation on

00:14:27,720 --> 00:14:34,589
that system so what you do in the usual

00:14:31,740 --> 00:14:37,050
instance for auto package tests would be

00:14:34,589 --> 00:14:41,490
just to loop over the supported post

00:14:37,050 --> 00:14:44,460
cause major version and then run this

00:14:41,490 --> 00:14:45,480
make install check a short version of

00:14:44,460 --> 00:14:49,890
that is pg build

00:14:45,480 --> 00:14:52,170
install check which would just fire up a

00:14:49,890 --> 00:14:55,140
server for each post close version and

00:14:52,170 --> 00:14:57,839
then run the tests there so in the most

00:14:55,140 --> 00:15:01,200
simple case you have a debian test

00:14:57,839 --> 00:15:04,800
control file where you say I'm depending

00:15:01,200 --> 00:15:07,140
on this server dev all package which is

00:15:04,800 --> 00:15:11,100
needs because it's containing the PG

00:15:07,140 --> 00:15:13,290
build X tool you say I want to run this

00:15:11,100 --> 00:15:16,020
text test called install check and then

00:15:13,290 --> 00:15:18,620
this file debian test install check you

00:15:16,020 --> 00:15:23,990
just say PG bill text whatever option

00:15:18,620 --> 00:15:26,760
install check this is for simple cases

00:15:23,990 --> 00:15:29,100
where I just want to run one command

00:15:26,760 --> 00:15:31,540
post close instance if it's more

00:15:29,100 --> 00:15:33,760
complicated

00:15:31,540 --> 00:15:37,870
or this is the simple case how it looks

00:15:33,760 --> 00:15:40,720
like PG virtual ends will create a new

00:15:37,870 --> 00:15:45,670
post class cluster called 11 requests

00:15:40,720 --> 00:15:51,250
and then do the usual steps for testing

00:15:45,670 --> 00:15:54,490
that package in a more complicated case

00:15:51,250 --> 00:15:56,890
you would say I want to loop over all

00:15:54,490 --> 00:15:59,800
supported versions you can say PG build

00:15:56,890 --> 00:16:03,460
X supported versions what this will do

00:15:59,800 --> 00:16:06,280
is to take the list of versions that the

00:16:03,460 --> 00:16:10,650
module package supports like maybe all

00:16:06,280 --> 00:16:13,360
or maybe something like 95 and later and

00:16:10,650 --> 00:16:16,930
we'll compute the intersection with what

00:16:13,360 --> 00:16:19,000
the system is supporting like if Debian

00:16:16,930 --> 00:16:21,850
is currently supporting post cos square

00:16:19,000 --> 00:16:25,120
11 but if you want to star 'get more a

00:16:21,850 --> 00:16:26,860
post Coast version at that point then PG

00:16:25,120 --> 00:16:31,960
build X supported version will give you

00:16:26,860 --> 00:16:34,030
a list of versions that is supposed to

00:16:31,960 --> 00:16:36,010
be targeted here then you can write a

00:16:34,030 --> 00:16:38,680
for loop over it and then call whatever

00:16:36,010 --> 00:16:41,380
command inside in there in that case it

00:16:38,680 --> 00:16:47,140
says give me a virtual and using that

00:16:41,380 --> 00:16:51,570
version run some commands and then the

00:16:47,140 --> 00:16:55,720
testing is done like year this is the

00:16:51,570 --> 00:16:58,810
the current example from testing the

00:16:55,720 --> 00:17:00,880
Petri routing package and actually I

00:16:58,810 --> 00:17:04,930
have at the moment a problem in there

00:17:00,880 --> 00:17:07,180
because the dependencies of that and yet

00:17:04,930 --> 00:17:15,430
quite right but we will get to that it's

00:17:07,180 --> 00:17:17,199
a bit complicated in that area okay this

00:17:15,430 --> 00:17:20,920
is the basic infrastructure we have for

00:17:17,199 --> 00:17:24,880
testing packages in in the yeah in the

00:17:20,920 --> 00:17:28,930
Debian packages we recently started

00:17:24,880 --> 00:17:32,020
introducing syat asti I pipelines for

00:17:28,930 --> 00:17:33,690
that this is a screenshot from the

00:17:32,020 --> 00:17:38,670
beginning of

00:17:33,690 --> 00:17:41,340
of the week there were only two tests

00:17:38,670 --> 00:17:44,640
running on each package I've added a

00:17:41,340 --> 00:17:47,340
third one in the meantime we are not

00:17:44,640 --> 00:17:49,830
using the size LCI pipeline but we

00:17:47,340 --> 00:17:52,830
should probably be looking into it into

00:17:49,830 --> 00:17:55,050
merging its will that what we are doing

00:17:52,830 --> 00:17:58,770
differently at the moment is that we are

00:17:55,050 --> 00:18:01,880
testing testing and unstable in parallel

00:17:58,770 --> 00:18:05,300
which desire a pipeline does not yet do

00:18:01,880 --> 00:18:09,240
and we need is a different build step

00:18:05,300 --> 00:18:12,780
because we need this PG build X update

00:18:09,240 --> 00:18:16,230
control step they are to tell the

00:18:12,780 --> 00:18:22,370
package you should be targeting this and

00:18:16,230 --> 00:18:22,370
that list of Postgres versions in there

00:18:22,610 --> 00:18:30,000
so the interface is yeah as simple as

00:18:27,180 --> 00:18:33,690
these odds are the pipeline there you

00:18:30,000 --> 00:18:35,880
just pointed at you say just include the

00:18:33,690 --> 00:18:37,080
skid lepsy I've Yama file which is

00:18:35,880 --> 00:18:39,300
thought in the poster square common

00:18:37,080 --> 00:18:44,250
package and then it will automatically

00:18:39,300 --> 00:18:47,190
run the pipeline on on that package what

00:18:44,250 --> 00:18:52,020
I just did a dip DEP camp is to put this

00:18:47,190 --> 00:18:55,620
really into all packages and then fix

00:18:52,020 --> 00:18:57,660
the deborah's that accumulated there

00:18:55,620 --> 00:19:00,570
there were about ten or something

00:18:57,660 --> 00:19:03,780
packages to fix mostly because of things

00:19:00,570 --> 00:19:07,500
that this build lock hardening checker

00:19:03,780 --> 00:19:09,600
found which probably before no one was

00:19:07,500 --> 00:19:14,100
looking at so this about problems that

00:19:09,600 --> 00:19:18,680
we didn't have on the screen yet what I

00:19:14,100 --> 00:19:22,680
also did yesterday is to trigger regular

00:19:18,680 --> 00:19:24,930
cron runs of these of all those tests so

00:19:22,680 --> 00:19:27,090
even if there's not an upload or not a

00:19:24,930 --> 00:19:29,340
good push through the package all

00:19:27,090 --> 00:19:33,120
packages will now be triggered once per

00:19:29,340 --> 00:19:35,640
month to see latent regressions I was

00:19:33,120 --> 00:19:38,460
talking to the size of the I people wat

00:19:35,640 --> 00:19:41,130
that before I hacked it in a way that

00:19:38,460 --> 00:19:44,810
works now it's we have to check if it's

00:19:41,130 --> 00:19:44,810
really a sane way to do that

00:19:45,070 --> 00:19:50,680
let's fi it looks promising yeah and I

00:19:49,060 --> 00:19:52,930
should probably also be looking into

00:19:50,680 --> 00:19:55,180
adding the other tests that the insides

00:19:52,930 --> 00:19:58,420
are CI team pipeline has in there like P

00:19:55,180 --> 00:20:03,270
apart Sandra protests it's probably easy

00:19:58,420 --> 00:20:09,630
to merge it but I one step after another

00:20:03,270 --> 00:20:13,780
okay that was the Debian side of things

00:20:09,630 --> 00:20:18,540
now we move to the poster side of things

00:20:13,780 --> 00:20:23,010
like where packages get built for all

00:20:18,540 --> 00:20:26,080
Debian and Ubuntu distributions

00:20:23,010 --> 00:20:30,370
supported there so what we're doing

00:20:26,080 --> 00:20:32,680
there is we build we take all packages

00:20:30,370 --> 00:20:35,860
from unstable or really the the kid

00:20:32,680 --> 00:20:39,000
version of the packages and build them

00:20:35,860 --> 00:20:43,720
for at the moment eight Debian Ubuntu

00:20:39,000 --> 00:20:49,830
releases that's from SID to Jesse and

00:20:43,720 --> 00:20:54,370
the Ubuntu releases notably the LTS once

00:20:49,830 --> 00:20:59,530
we do that for three architectures amd64

00:20:54,370 --> 00:21:05,080
I 386 and some years ago we also added

00:20:59,530 --> 00:21:07,360
PowerPC we do get regular requests so

00:21:05,080 --> 00:21:10,330
add more architectures but so far no one

00:21:07,360 --> 00:21:14,200
has decided if we want to target arm arm

00:21:10,330 --> 00:21:16,060
64 arm something and most importantly

00:21:14,200 --> 00:21:20,980
who's sponsoring the build hardware for

00:21:16,060 --> 00:21:24,190
that at the moment it's 5 post-post mer

00:21:20,980 --> 00:21:26,650
a major versions that are supported the

00:21:24,190 --> 00:21:30,550
oldest one is 94 at the moment up to an

00:21:26,650 --> 00:21:33,940
11 and if you multiply these numbers it

00:21:30,550 --> 00:21:37,960
means that each package gets compiled

00:21:33,940 --> 00:21:39,850
about 100 times it's not exactly the the

00:21:37,960 --> 00:21:44,140
product of these numbers because we

00:21:39,850 --> 00:21:46,570
exclude some combinations like the newer

00:21:44,140 --> 00:21:49,420
Ubuntu nan at us the releases are

00:21:46,570 --> 00:21:52,200
compiled on AMD 64 only because I figure

00:21:49,420 --> 00:21:55,810
that no one is going to use disco on

00:21:52,200 --> 00:21:56,990
32-bit or something but it's about have

00:21:55,810 --> 00:21:59,659
100 times

00:21:56,990 --> 00:22:02,210
so and of course no one is going to try

00:21:59,659 --> 00:22:05,419
that these package manually so we need

00:22:02,210 --> 00:22:07,580
all we need lots of tests to make sure

00:22:05,419 --> 00:22:11,750
that the packages are really working

00:22:07,580 --> 00:22:13,669
because we basically everything we are

00:22:11,750 --> 00:22:16,279
building there's immediately shipped to

00:22:13,669 --> 00:22:19,100
users and if something is problem they

00:22:16,279 --> 00:22:24,440
are we will break production systems of

00:22:19,100 --> 00:22:27,950
people out there so this is all being

00:22:24,440 --> 00:22:30,620
triggered by Jenkins which is yet

00:22:27,950 --> 00:22:34,820
another CI solution after the different

00:22:30,620 --> 00:22:37,340
ones we've seen earlier today what we're

00:22:34,820 --> 00:22:41,029
doing there is creating a group of drops

00:22:37,340 --> 00:22:42,590
for each source package if you've seen

00:22:41,029 --> 00:22:45,740
me couple cops

00:22:42,590 --> 00:22:48,559
Jenkins Debian clue this is basically

00:22:45,740 --> 00:22:51,679
the same thing I started using that but

00:22:48,559 --> 00:22:55,520
ended up rewriting all scripts so much

00:22:51,679 --> 00:22:59,960
so that it's it's no separate

00:22:55,520 --> 00:23:04,809
installation so for each source package

00:22:59,960 --> 00:23:08,419
we have a full source package which

00:23:04,809 --> 00:23:13,309
builds takes the the get input and

00:23:08,419 --> 00:23:15,909
builds source packages but it doesn't do

00:23:13,309 --> 00:23:20,090
that only once it do tasks this for each

00:23:15,909 --> 00:23:22,149
distribution separately which means or

00:23:20,090 --> 00:23:24,890
which is needed because we want to add

00:23:22,149 --> 00:23:27,799
this version number suffix to all

00:23:24,890 --> 00:23:30,289
packages to make sure that users can

00:23:27,799 --> 00:23:34,370
upgrade from one version of the

00:23:30,289 --> 00:23:37,490
distribution to the next one so this

00:23:34,370 --> 00:23:40,490
means each source package gets compiled

00:23:37,490 --> 00:23:44,020
or built at the moment eight times

00:23:40,490 --> 00:23:47,059
then we have a full binaries job which

00:23:44,020 --> 00:23:50,919
takes these source packages and compiles

00:23:47,059 --> 00:23:56,600
them for the distribution and

00:23:50,919 --> 00:24:00,620
architecture requires there I can show

00:23:56,600 --> 00:24:04,490
you that screenshot here it's a matrix

00:24:00,620 --> 00:24:06,559
drop which means that which is a very

00:24:04,490 --> 00:24:09,860
nice feature in Jenkins which is or

00:24:06,559 --> 00:24:10,950
still missing in get lab which means you

00:24:09,860 --> 00:24:15,930
can give it

00:24:10,950 --> 00:24:17,880
a configuration and say do this for this

00:24:15,930 --> 00:24:22,260
list of distributions and do this for

00:24:17,880 --> 00:24:25,170
this list of architectures and it will

00:24:22,260 --> 00:24:30,720
automatically use the cross product of

00:24:25,170 --> 00:24:34,320
these so this is a colorful but not so

00:24:30,720 --> 00:24:38,100
fortunate example peachy Laura is at the

00:24:34,320 --> 00:24:40,880
moment pretty broken it just compiles

00:24:38,100 --> 00:24:43,140
underneath and the newer amd64

00:24:40,880 --> 00:24:45,510
distributions

00:24:43,140 --> 00:24:47,700
it doesn't compile at all on the older

00:24:45,510 --> 00:24:49,860
distributions and the yellow button here

00:24:47,700 --> 00:24:54,780
means it compiles but doesn't pass the

00:24:49,860 --> 00:24:56,970
tests and it doesn't support PPC at all

00:24:54,780 --> 00:25:01,470
because it's Lisp and we don't have a

00:24:56,970 --> 00:25:05,130
list compiler for that okay so it's a

00:25:01,470 --> 00:25:07,200
matrix drop with these two x's it's

00:25:05,130 --> 00:25:09,630
Jenkins not restricted to two x's you

00:25:07,200 --> 00:25:13,110
can add every more that's a very nice

00:25:09,630 --> 00:25:15,960
feature there and what's still missing

00:25:13,110 --> 00:25:18,810
is the list of PG major version though

00:25:15,960 --> 00:25:22,260
the third axis is high handle inside the

00:25:18,810 --> 00:25:27,570
actual build which using that PG build X

00:25:22,260 --> 00:25:31,950
tool which we seen before all of that is

00:25:27,570 --> 00:25:33,780
happening in s built on temporary change

00:25:31,950 --> 00:25:35,820
food environments which is a very nice

00:25:33,780 --> 00:25:38,820
setup which I can recommend to everyone

00:25:35,820 --> 00:25:41,570
trying that which will give you very

00:25:38,820 --> 00:25:44,520
high performance build environments

00:25:41,570 --> 00:25:47,670
where you can do every very stuff and

00:25:44,520 --> 00:25:53,880
then throw away again so s build change

00:25:47,670 --> 00:25:55,860
s as chroot and actually overlay f FS on

00:25:53,880 --> 00:25:56,640
top FS is the combination there that's

00:25:55,860 --> 00:26:00,230
very nice

00:25:56,640 --> 00:26:03,150
so what we're also doing there is

00:26:00,230 --> 00:26:07,320
running Auto packaged in the very same

00:26:03,150 --> 00:26:10,260
session which means it's pretty fast

00:26:07,320 --> 00:26:12,960
because it really uses the same change

00:26:10,260 --> 00:26:16,620
fruit with the downside is that it still

00:26:12,960 --> 00:26:20,550
has the build dependencies installed but

00:26:16,620 --> 00:26:21,890
it's really a setup that has proved to

00:26:20,550 --> 00:26:27,290
be working over the

00:26:21,890 --> 00:26:29,690
time then for food source and binaries

00:26:27,290 --> 00:26:32,710
there's also called

00:26:29,690 --> 00:26:36,230
drop foo which is Jenkins pipeline

00:26:32,710 --> 00:26:39,320
orchestrating the sauce binaries and a

00:26:36,230 --> 00:26:40,940
Depot job to make sure the sources get

00:26:39,320 --> 00:26:41,900
built the binaries get built and people

00:26:40,940 --> 00:26:46,310
is only called

00:26:41,900 --> 00:26:48,830
if everything worked and next to these

00:26:46,310 --> 00:26:53,270
drops there's also a separate foo Auto

00:26:48,830 --> 00:26:56,420
packaged tests job which is independent

00:26:53,270 --> 00:27:00,470
from the build pipeline this job makes

00:26:56,420 --> 00:27:04,010
sure that the tests get re triggered on

00:27:00,470 --> 00:27:08,300
all packages each month so if there's

00:27:04,010 --> 00:27:10,850
latent problems in the repository we

00:27:08,300 --> 00:27:13,970
will notice because at some point auto

00:27:10,850 --> 00:27:16,970
packaged tests will be rerun and we can

00:27:13,970 --> 00:27:19,630
see that something broke in between

00:27:16,970 --> 00:27:29,270
even without the package have been

00:27:19,630 --> 00:27:31,280
triggered so that was the big overview

00:27:29,270 --> 00:27:34,910
the details are of course a bit more

00:27:31,280 --> 00:27:37,940
complicated we are using the same source

00:27:34,910 --> 00:27:41,050
for all distributions so which we take

00:27:37,940 --> 00:27:45,140
the package as uploaded to unstable and

00:27:41,050 --> 00:27:48,860
we build it for all these solutions with

00:27:45,140 --> 00:27:51,680
some version number attached but

00:27:48,860 --> 00:27:56,000
sometimes the package and unstable

00:27:51,680 --> 00:28:01,130
doesn't work with the older distribution

00:27:56,000 --> 00:28:03,800
so for example the bomb and package has

00:28:01,130 --> 00:28:06,220
been moved to Python 3 recently but

00:28:03,800 --> 00:28:09,350
jesse and trusty are still supporting

00:28:06,220 --> 00:28:13,040
Python to only or it works only with

00:28:09,350 --> 00:28:15,920
that on that distribution so we have a

00:28:13,040 --> 00:28:18,710
script called generate PG DG source

00:28:15,920 --> 00:28:23,600
which adds so-called tweaks to the

00:28:18,710 --> 00:28:25,910
package and in most cases or in all

00:28:23,600 --> 00:28:28,580
cases it's as simple as that it's

00:28:25,910 --> 00:28:31,340
usually just a few set calls on Debian

00:28:28,580 --> 00:28:33,820
will step in control usually it's just

00:28:31,340 --> 00:28:35,600
one or two lines

00:28:33,820 --> 00:28:38,870
yeah it looks

00:28:35,600 --> 00:28:41,690
what ugly but it is a way to just get

00:28:38,870 --> 00:28:45,890
the job done and it's not like we are

00:28:41,690 --> 00:28:49,039
doing pages of scripts there it's just

00:28:45,890 --> 00:28:51,110
one a few tweaks to the package to say

00:28:49,039 --> 00:28:56,120
this bill dependency isn't there on that

00:28:51,110 --> 00:28:59,960
machine usually it it works quite well

00:28:56,120 --> 00:29:02,120
like that to be honest some packages and

00:28:59,960 --> 00:29:05,330
unstable are prepared in a way that this

00:29:02,120 --> 00:29:07,240
is easier to do than not so like you

00:29:05,330 --> 00:29:10,179
can't

00:29:07,240 --> 00:29:12,830
it is usually written in a way that

00:29:10,179 --> 00:29:15,710
deleting lines from the control file

00:29:12,830 --> 00:29:19,429
like delete this bill it depends it just

00:29:15,710 --> 00:29:27,380
fixes the package to be to be used on

00:29:19,429 --> 00:29:31,700
the older distribution okay what else do

00:29:27,380 --> 00:29:33,860
we do there we need some trickery on the

00:29:31,700 --> 00:29:39,650
repository side which is using wrapper

00:29:33,860 --> 00:29:44,440
April the problem there is that we can't

00:29:39,650 --> 00:29:48,440
put several versions of one package into

00:29:44,440 --> 00:29:51,679
the same distribution as mentioned

00:29:48,440 --> 00:29:54,440
earlier we have several post-class nine

00:29:51,679 --> 00:29:58,520
six posters ten and so on sauce packages

00:29:54,440 --> 00:30:01,010
all of them build li PQ v package we

00:29:58,520 --> 00:30:04,039
can't all put them into the main section

00:30:01,010 --> 00:30:05,720
of the archive so what we do there is to

00:30:04,039 --> 00:30:10,549
move them to different components away

00:30:05,720 --> 00:30:12,710
so we have separate archive components

00:30:10,549 --> 00:30:16,280
just like non free or so on they are

00:30:12,710 --> 00:30:18,740
just called 9 6 10 11 and so on in the

00:30:16,280 --> 00:30:23,059
archive where these extra packages gets

00:30:18,740 --> 00:30:27,590
stowed away users usually don't need

00:30:23,059 --> 00:30:29,360
them anyway so the lip PQ lip ec p key

00:30:27,590 --> 00:30:32,059
and so on library packages across

00:30:29,360 --> 00:30:36,640
version compatible and so if i haven't

00:30:32,059 --> 00:30:36,640
seen any problems with worth doing that

00:30:39,850 --> 00:30:46,790
though for more quality assurance what

00:30:43,790 --> 00:30:51,220
we do is to run depth check on the whole

00:30:46,790 --> 00:30:57,670
archive depth rec is a tool from the

00:30:51,220 --> 00:31:00,260
eros guys that takes a packages file and

00:30:57,670 --> 00:31:02,990
computes install ability of all packages

00:31:00,260 --> 00:31:04,730
so for each package it will say this

00:31:02,990 --> 00:31:07,090
package can be installed in this

00:31:04,730 --> 00:31:09,140
repository given this other

00:31:07,090 --> 00:31:14,030
distributions like is this package

00:31:09,140 --> 00:31:18,050
installable on debian stable and this is

00:31:14,030 --> 00:31:20,720
really interesting to see if everything

00:31:18,050 --> 00:31:24,590
in your repository can be installed on

00:31:20,720 --> 00:31:26,270
real life systems we run depth check and

00:31:24,590 --> 00:31:31,100
build depth check which is just the same

00:31:26,270 --> 00:31:34,160
thing for built dependencies this is

00:31:31,100 --> 00:31:36,290
running every night so we can on the

00:31:34,160 --> 00:31:38,530
next morning we go we can see what broke

00:31:36,290 --> 00:31:42,520
overnight

00:31:38,530 --> 00:31:47,780
usually problems spotted they're

00:31:42,520 --> 00:31:51,560
incomplete dependencies of packages that

00:31:47,780 --> 00:31:53,270
got just got uploaded like the Pisan to

00:31:51,560 --> 00:31:56,570
problem I just showed with BOM and was

00:31:53,270 --> 00:31:58,820
spotted by the system because the bomb

00:31:56,570 --> 00:32:02,810
and package doesn't actually test

00:31:58,820 --> 00:32:05,440
installing the package so this just

00:32:02,810 --> 00:32:09,610
means we have to add more tests to see

00:32:05,440 --> 00:32:14,690
the Python dependencies better they are

00:32:09,610 --> 00:32:17,900
it's sometimes real problems are spotted

00:32:14,690 --> 00:32:21,080
but the auto package tests really catch

00:32:17,900 --> 00:32:23,630
most of them so this is just an adding

00:32:21,080 --> 00:32:26,630
in another layer but I can recommend

00:32:23,630 --> 00:32:30,140
only recommend running that to everyone

00:32:26,630 --> 00:32:32,330
or running a repository to to really run

00:32:30,140 --> 00:32:35,300
depth check on it it's a really really

00:32:32,330 --> 00:32:37,670
good nice tool yeah

00:32:35,300 --> 00:32:39,620
the output is in the amel format it's

00:32:37,670 --> 00:32:42,280
sometimes a bit weird to read it's a

00:32:39,620 --> 00:32:45,320
huge list of things that have problems

00:32:42,280 --> 00:32:49,880
in that problem in that case there was

00:32:45,320 --> 00:32:52,550
another pison problem there that was one

00:32:49,880 --> 00:32:53,590
report from from last week or so but it

00:32:52,550 --> 00:32:58,770
was also a new page

00:32:53,590 --> 00:32:58,770
which I could easily fix on the next day

00:33:00,420 --> 00:33:09,310
okay so yeah what do we do to get new

00:33:04,900 --> 00:33:11,440
packages into this repository these are

00:33:09,310 --> 00:33:14,410
still lots of manual steps so the

00:33:11,440 --> 00:33:17,110
emphasis is more on getting the tools

00:33:14,410 --> 00:33:19,870
right and not so much on automating

00:33:17,110 --> 00:33:22,210
everything so what usually happens is

00:33:19,870 --> 00:33:25,930
that you scan spots in you absol

00:33:22,210 --> 00:33:30,820
absolutely inversion then I upload it to

00:33:25,930 --> 00:33:33,780
unstable then I proceed to do it on the

00:33:30,820 --> 00:33:36,040
poster side or if someone else maybe

00:33:33,780 --> 00:33:39,760
uploaded something I didn't notice it

00:33:36,040 --> 00:33:42,970
there's a script which calls what's

00:33:39,760 --> 00:33:46,170
newer hence it which is a script to give

00:33:42,970 --> 00:33:50,140
to source files pretty simple thing

00:33:46,170 --> 00:33:52,030
which just tells us which package is new

00:33:50,140 --> 00:33:54,580
on one side or new on the other side

00:33:52,030 --> 00:33:58,570
then we can trigger a new build in the

00:33:54,580 --> 00:34:01,120
Jenkins pipelines and then we have an

00:33:58,570 --> 00:34:04,090
extra testing step there

00:34:01,120 --> 00:34:08,230
which means packages uploaded are not

00:34:04,090 --> 00:34:12,340
directly shipped to users but they are

00:34:08,230 --> 00:34:15,130
put into sweets called sit PG DG testing

00:34:12,340 --> 00:34:17,910
or as pasta and so testing and so on and

00:34:15,130 --> 00:34:22,060
to get from testing to the life

00:34:17,910 --> 00:34:27,340
distribution there are some we call it

00:34:22,060 --> 00:34:29,890
promotion in-between which copies the

00:34:27,340 --> 00:34:32,100
file over to the sweets that users are

00:34:29,890 --> 00:34:35,320
really using and again there are some

00:34:32,100 --> 00:34:37,270
the same Perl script in there that just

00:34:35,320 --> 00:34:39,310
tells us which is a difference between

00:34:37,270 --> 00:34:42,540
the life and the testing disappearances

00:34:39,310 --> 00:34:42,540
that at that point

00:34:44,120 --> 00:34:56,110
so yeah so we have this axis which means

00:34:52,460 --> 00:34:59,090
that everything gets compiled 100 times

00:34:56,110 --> 00:35:02,120
it gets even more interesting if we want

00:34:59,090 --> 00:35:05,990
to get a new major release added to

00:35:02,120 --> 00:35:08,570
Debian at the moment post goes 12 is in

00:35:05,990 --> 00:35:11,540
the beta testing phase and we are

00:35:08,570 --> 00:35:16,310
testing that and also providing modules

00:35:11,540 --> 00:35:19,340
for users to build - which means yeah we

00:35:16,310 --> 00:35:22,400
have to basically on the Debian side

00:35:19,340 --> 00:35:23,840
once this happens we have to upload all

00:35:22,400 --> 00:35:27,470
packages again because we have to

00:35:23,840 --> 00:35:30,200
regenerate the Debian control file from

00:35:27,470 --> 00:35:32,900
Debian controller in which is basically

00:35:30,200 --> 00:35:34,490
a sauce full bin NMU because no change

00:35:32,900 --> 00:35:38,540
in the package happens except for the

00:35:34,490 --> 00:35:43,250
list of binary is produced and on the

00:35:38,540 --> 00:35:45,740
post cross site we have more Jenkins

00:35:43,250 --> 00:35:50,530
drops there which are called foo

00:35:45,740 --> 00:35:55,190
binaries better which then target this

00:35:50,530 --> 00:35:58,780
new post was version only and the

00:35:55,190 --> 00:36:01,400
initial status when doing that was that

00:35:58,780 --> 00:36:07,880
only about half of the package actually

00:36:01,400 --> 00:36:11,900
worked with post was 12 12 packages

00:36:07,880 --> 00:36:15,920
built but the test failed about 20

00:36:11,900 --> 00:36:18,830
failed for some changes in header files

00:36:15,920 --> 00:36:20,930
and other stuff and some couldn't be

00:36:18,830 --> 00:36:24,200
tested yet because they depend on a

00:36:20,930 --> 00:36:27,800
module that fail yet so what I'm doing

00:36:24,200 --> 00:36:31,160
at the moment is to pester all people on

00:36:27,800 --> 00:36:36,020
github to publish new versions to post

00:36:31,160 --> 00:36:40,310
to target post was 12 of course we are

00:36:36,020 --> 00:36:43,790
also running the auto package tests on

00:36:40,310 --> 00:36:52,070
all these new packages which is

00:36:43,790 --> 00:36:54,320
especially important because sorry we

00:36:52,070 --> 00:36:54,830
are at post class 12 better one at the

00:36:54,320 --> 00:36:57,380
moment

00:36:54,830 --> 00:37:01,699
there will be more better versions

00:36:57,380 --> 00:37:03,440
and it is expected that a kettle dub

00:37:01,699 --> 00:37:06,650
version in the postcode server will be

00:37:03,440 --> 00:37:09,079
happening for posters 12 better - which

00:37:06,650 --> 00:37:12,109
means that we have to retest all

00:37:09,079 --> 00:37:13,999
binaries that we built before because it

00:37:12,109 --> 00:37:22,880
might not work anymore with the new

00:37:13,999 --> 00:37:27,199
server version okay so as a future

00:37:22,880 --> 00:37:29,809
lookout what's hurting at the moment I

00:37:27,199 --> 00:37:34,249
said before the most important thing I'd

00:37:29,809 --> 00:37:37,670
like to fix is to make sure that make

00:37:34,249 --> 00:37:39,979
install check could really be done at

00:37:37,670 --> 00:37:43,729
Build time and not just it in install

00:37:39,979 --> 00:37:45,709
time it requires either patching the

00:37:43,729 --> 00:37:47,989
poster server and making do it or

00:37:45,709 --> 00:37:49,999
talking to upstream about properly

00:37:47,989 --> 00:37:56,089
supporting it after yet to decide which

00:37:49,999 --> 00:37:58,039
one I'd want to do then to really make

00:37:56,089 --> 00:38:00,859
packages work on all distributions at

00:37:58,039 --> 00:38:03,769
once we need to target that paper

00:38:00,859 --> 00:38:05,299
version that is present everywhere so we

00:38:03,769 --> 00:38:09,859
are still using that pipe online for

00:38:05,299 --> 00:38:12,739
everything then we have some internal

00:38:09,859 --> 00:38:14,569
problem that the builds for Jessie take

00:38:12,739 --> 00:38:16,849
four minutes longer than everything else

00:38:14,569 --> 00:38:19,940
I have yet to figure out why that is the

00:38:16,849 --> 00:38:21,559
case so even if some builds that just

00:38:19,940 --> 00:38:24,410
take a few seconds we'll take four

00:38:21,559 --> 00:38:26,719
minutes in a few seconds on Jessie but

00:38:24,410 --> 00:38:28,160
luckily it's only a year to go until

00:38:26,719 --> 00:38:31,369
it's no longer in support maybe

00:38:28,160 --> 00:38:34,430
addresses through it okay

00:38:31,369 --> 00:38:37,640
the Jenkins setup is pretty complex I'm

00:38:34,430 --> 00:38:39,859
not sure if anyone except me understands

00:38:37,640 --> 00:38:42,949
it no michael has been working a bit

00:38:39,859 --> 00:38:45,709
with it but it's probably something that

00:38:42,949 --> 00:38:51,380
I should be look into to reduce the

00:38:45,709 --> 00:38:53,959
complexity yeah right and then there's

00:38:51,380 --> 00:38:58,160
some other problems on the repository

00:38:53,959 --> 00:39:00,199
site like what I would actually very

00:38:58,160 --> 00:39:03,789
much would like to have this to that

00:39:00,199 --> 00:39:07,099
repair yeah people should allow several

00:39:03,789 --> 00:39:09,799
versions of the same package in one in

00:39:07,099 --> 00:39:10,830
one archive which is important for users

00:39:09,799 --> 00:39:13,260
that want

00:39:10,830 --> 00:39:18,720
downgrades who the second-last versions

00:39:13,260 --> 00:39:20,790
or something it's it's a patch there by

00:39:18,720 --> 00:39:26,180
Ben I mean drunk

00:39:20,790 --> 00:39:29,730
I have yet to try it there are other

00:39:26,180 --> 00:39:32,610
repository software packages that could

00:39:29,730 --> 00:39:36,030
support it like Eppley but I'd rather

00:39:32,610 --> 00:39:38,160
stick to something that is very field

00:39:36,030 --> 00:39:42,630
proven and I think reputable was still

00:39:38,160 --> 00:39:45,090
the correct tool to use there yeah okay

00:39:42,630 --> 00:39:50,220
that was about the stuff I wanted to

00:39:45,090 --> 00:40:01,620
talk about so if there's any questions I

00:39:50,220 --> 00:40:04,200
left you here them just two things

00:40:01,620 --> 00:40:06,540
addressing your pain points we also use

00:40:04,200 --> 00:40:09,090
Jenkins and we use the Jenkins job

00:40:06,540 --> 00:40:12,210
dollar to automate all of the job

00:40:09,090 --> 00:40:14,340
building stuff that helps a lot yeah we

00:40:12,210 --> 00:40:17,640
have that as well yeah it's 600 jobs you

00:40:14,340 --> 00:40:20,610
can't do that manually we also use the

00:40:17,640 --> 00:40:22,140
Jenkins glue or why should we use it

00:40:20,610 --> 00:40:24,660
you said you kind of reimplemented

00:40:22,140 --> 00:40:26,790
afterwards but it works very well for us

00:40:24,660 --> 00:40:28,470
and we switched to aptly four years ago

00:40:26,790 --> 00:40:30,540
from red purple for the same reason

00:40:28,470 --> 00:40:33,030
because we needed to be able to roll

00:40:30,540 --> 00:40:35,100
back to all the versions and actually

00:40:33,030 --> 00:40:38,520
after at least supported everything we

00:40:35,100 --> 00:40:42,720
need except DPG verification and we had

00:40:38,520 --> 00:40:44,190
that edited by the author so for at

00:40:42,720 --> 00:40:46,950
least for us it does everything we need

00:40:44,190 --> 00:40:48,420
yeah we are also using a plea for this

00:40:46,950 --> 00:40:52,670
elephant chat project

00:40:48,420 --> 00:40:55,500
Michael was talking about last year I

00:40:52,670 --> 00:40:57,990
still don't get the whole command line

00:40:55,500 --> 00:41:01,980
it's I still have to look at everything

00:40:57,990 --> 00:41:05,400
and I think I better stick to something

00:41:01,980 --> 00:41:07,980
Rock stole it but maybe we should move

00:41:05,400 --> 00:41:09,750
over yeah good it is also rock solid but

00:41:07,980 --> 00:41:12,810
it has its own way of doing things

00:41:09,750 --> 00:41:18,210
yeah it has this giant pool of packages

00:41:12,810 --> 00:41:20,850
in somewhere in home something and it's

00:41:18,210 --> 00:41:23,290
probably just too much we need to be

00:41:20,850 --> 00:41:26,500
able to get rid of stuffs there we go

00:41:23,290 --> 00:41:32,620
it will be several hundreds of gigabytes

00:41:26,500 --> 00:41:35,170
and so like uploading a new round of PG

00:41:32,620 --> 00:41:37,540
minor releases is about adding one

00:41:35,170 --> 00:41:39,970
gigabyte of stuff to the repository so

00:41:37,540 --> 00:41:43,330
it's growing pretty fast over time that

00:41:39,970 --> 00:41:46,900
we keep I think we asked ten versions of

00:41:43,330 --> 00:41:48,550
packages so I I might be able to provide

00:41:46,900 --> 00:41:50,050
you some housekeeping scripts if you

00:41:48,550 --> 00:41:57,660
yeah that before once you look into that

00:41:50,050 --> 00:41:57,660
yeah okay any more questions

00:42:04,290 --> 00:42:11,370
so if I understood correctly this PG

00:42:07,170 --> 00:42:13,890
virtual and creates temporary Postgres

00:42:11,370 --> 00:42:17,490
instance with data director in some yes

00:42:13,890 --> 00:42:21,530
temp but it's totally visible in these

00:42:17,490 --> 00:42:25,620
PG LS clusters and all the stuff yes yes

00:42:21,530 --> 00:42:28,220
well to be to be precise if you are

00:42:25,620 --> 00:42:31,740
running it is route it will be visible

00:42:28,220 --> 00:42:33,870
if not it's created in some other

00:42:31,740 --> 00:42:35,760
directory where it's not visible yeah of

00:42:33,870 --> 00:42:39,180
course because you need to be able to

00:42:35,760 --> 00:42:41,430
add to it Isabel just something cool I

00:42:39,180 --> 00:42:45,780
didn't know that I just checked that

00:42:41,430 --> 00:42:47,970
Postgres 12 it's not yet in experimental

00:42:45,780 --> 00:42:50,940
so I guess it's only enough it's in you

00:42:47,970 --> 00:42:53,670
for experimental ah okay so if you knew

00:42:50,940 --> 00:42:56,150
FTP master to ask just tell them to

00:42:53,670 --> 00:42:56,150
process

00:43:07,430 --> 00:43:11,850
so thank you since you mentioned the bus

00:43:09,990 --> 00:43:14,840
factor how many people are in the post

00:43:11,850 --> 00:43:19,230
question also trust you it's mostly me

00:43:14,840 --> 00:43:22,560
Michael Archana colleague Marco Nancy

00:43:19,230 --> 00:43:26,280
rainy Marcos Vanna used to do stuff but

00:43:22,560 --> 00:43:33,870
I haven't seen him for a year so three

00:43:26,280 --> 00:43:36,830
and a half yeah we could use more people

00:43:33,870 --> 00:43:40,200
for looking at individual packages and

00:43:36,830 --> 00:43:43,680
also more people for looking at the bag

00:43:40,200 --> 00:43:46,430
of packages which is mostly handled by

00:43:43,680 --> 00:43:46,430
me to be honest

00:43:56,440 --> 00:44:02,810
hello as you mentioned merging with the

00:43:59,270 --> 00:44:04,850
gitlab pipeline provided by the society

00:44:02,810 --> 00:44:08,330
I wanted to comment that there's a clear

00:44:04,850 --> 00:44:11,600
separation between the various task

00:44:08,330 --> 00:44:13,310
steps definition and their invocation so

00:44:11,600 --> 00:44:15,170
it should be pretty easy to address

00:44:13,310 --> 00:44:18,230
import the definition and use the ones

00:44:15,170 --> 00:44:21,470
you're interested in like oh yeah yeah

00:44:18,230 --> 00:44:23,780
it's unclear if that works for testing

00:44:21,470 --> 00:44:26,060
and unstable yes I have just have to try

00:44:23,780 --> 00:44:28,070
it I haven't yet seen it I have just

00:44:26,060 --> 00:44:36,950
haven't tried it we were we were talking

00:44:28,070 --> 00:44:39,730
about that any further questions I also

00:44:36,950 --> 00:44:42,540
don't see any questions from I see so

00:44:39,730 --> 00:44:49,020
let's thank Chris again

00:44:42,540 --> 00:44:49,020

YouTube URL: https://www.youtube.com/watch?v=SAz03sBzvO0


