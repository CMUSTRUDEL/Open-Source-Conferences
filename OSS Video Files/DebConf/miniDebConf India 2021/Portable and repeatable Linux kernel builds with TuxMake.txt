Title: Portable and repeatable Linux kernel builds with TuxMake
Publication date: 2021-03-20
Playlist: miniDebConf India 2021
Description: 
	by Senthil Kumaran S
by Vishal Bhoj

At: MiniDebConf India 2021
https://in2021.mini.debconf.org/talks/15-portable-and-repeatable-linux-kernel-builds-with-tuxmake/

TuxMake is a command line tool that eases building Linux kernel. Though it is already simple to build Linux kernel using `make defconfig; make`, it becomes complicated when there are too many combinations that has to be supported, such as the following:

* Architectures
* Toolchains
* Configurations
* Targets
* Build-time validation

TuxMake simplifies building the Linux kernel by providing a consistent command line interface with different combinations listed above. TuxMake makes it more interesting by providing a curated, portable build environment that is distributed as Docker/Podman container images. Thus, it becomes easy to report and reproduce build failures using TuxMake's consistent command line.

### Who is your audience?

Those who have already built Linux kernel and know how to build Linux kernel in their local machines.

### What will they get out of it?

They will get to learn about TuxMake free software tool (soon to be included in Debian), that can ease their Linux kernel building workflow and provide an easy way to get reproducible command line with TuxMake.

### What will you cover?

In this presentation, we will take a look on how to use TuxMake. We will cover different use-cases starting with a simple build, then looking at cross builds, incremental builds, etc.

Room: Buzz
Scheduled start: 2021-01-24 16:00:00
Captions: 
	00:00:05,200 --> 00:00:09,200
welcome folks

00:00:06,319 --> 00:00:10,000
uh the next talk in our series of talk

00:00:09,200 --> 00:00:13,440
is

00:00:10,000 --> 00:00:17,359
portable and reptiple linux kernel with

00:00:13,440 --> 00:00:20,160
ducks make by vishal bhoj and senthil

00:00:17,359 --> 00:00:22,560
so taxmate is a command line tool that

00:00:20,160 --> 00:00:24,720
eases building the linux kernel

00:00:22,560 --> 00:00:25,599
through it is very simple to build linux

00:00:24,720 --> 00:00:28,400
kernel

00:00:25,599 --> 00:00:29,760
it becomes complicated with many other

00:00:28,400 --> 00:00:32,719
supported architecture

00:00:29,760 --> 00:00:33,200
so let's share it out what the folks

00:00:32,719 --> 00:00:37,440
here

00:00:33,200 --> 00:00:37,440
want to say so let's begin with the talk

00:00:38,719 --> 00:00:44,559
hello everyone we welcome you

00:00:42,239 --> 00:00:46,000
to the talk on portable and repeatable

00:00:44,559 --> 00:00:49,280
linux kernel builds

00:00:46,000 --> 00:00:53,199
with tuxmake in minidipconf india

00:00:49,280 --> 00:00:58,399
2021 this talk will be presented by

00:00:53,199 --> 00:01:01,840
vishal bhoj and myself sandal kumaran

00:00:58,399 --> 00:01:05,519
we both work for leonardo limited lenaro

00:01:01,840 --> 00:01:07,840
is the company which started the tuxmake

00:01:05,519 --> 00:01:07,840
project

00:01:10,960 --> 00:01:17,520
let's get into the agenda of this talk

00:01:14,880 --> 00:01:18,479
we'll be introdu introducing tax make

00:01:17,520 --> 00:01:22,560
and then we'll show

00:01:18,479 --> 00:01:24,640
how to install tax make and get

00:01:22,560 --> 00:01:27,119
the help and usage of tax make command

00:01:24,640 --> 00:01:30,240
line and we'll also demo

00:01:27,119 --> 00:01:32,159
simple bills using tax make

00:01:30,240 --> 00:01:34,799
and we'll also show the command

00:01:32,159 --> 00:01:37,920
execution details of tax make

00:01:34,799 --> 00:01:39,680
and also show how to build using

00:01:37,920 --> 00:01:42,880
containers

00:01:39,680 --> 00:01:43,759
we'll cover on how to cross compile the

00:01:42,880 --> 00:01:47,759
next kernel

00:01:43,759 --> 00:01:49,600
using text make we'll also show

00:01:47,759 --> 00:01:51,360
incremental bills and the python

00:01:49,600 --> 00:01:54,079
interface for tux make

00:01:51,360 --> 00:01:55,119
we'll touch upon contributing to text

00:01:54,079 --> 00:01:57,280
make

00:01:55,119 --> 00:01:59,439
since textbreak is open source project

00:01:57,280 --> 00:02:02,479
everyone is welcome to contribute

00:01:59,439 --> 00:02:06,560
to this project with this agenda

00:02:02,479 --> 00:02:06,560
we'll get into the tax make

00:02:06,840 --> 00:02:09,840
talk

00:02:10,319 --> 00:02:16,720
so let me introduce text make

00:02:13,680 --> 00:02:18,400
what is text make tuxmake is an open

00:02:16,720 --> 00:02:21,440
source project from linaroo

00:02:18,400 --> 00:02:22,480
that began in may 2020 and is designed

00:02:21,440 --> 00:02:25,360
to make

00:02:22,480 --> 00:02:27,680
building linux kernels easier it

00:02:25,360 --> 00:02:30,319
provides a command line interface

00:02:27,680 --> 00:02:30,959
and a python library along with a full

00:02:30,319 --> 00:02:33,840
set of

00:02:30,959 --> 00:02:34,640
curated portal built portable build

00:02:33,840 --> 00:02:38,000
environments

00:02:34,640 --> 00:02:40,560
distributed as container images

00:02:38,000 --> 00:02:41,840
with tux make a developer can build any

00:02:40,560 --> 00:02:44,000
supported combination

00:02:41,840 --> 00:02:47,440
of target architecture tool chain kernel

00:02:44,000 --> 00:02:52,160
configuration and make targets

00:02:47,440 --> 00:02:52,160
tucks make is based on mit license

00:02:52,239 --> 00:02:58,080
tax make was developed by

00:02:55,680 --> 00:02:59,440
antonio tercero who is a long term

00:02:58,080 --> 00:03:01,680
debian developer

00:02:59,440 --> 00:03:05,360
and he is also maintaining the project

00:03:01,680 --> 00:03:09,200
as of now

00:03:05,360 --> 00:03:11,920
so more about textbreak first thing is

00:03:09,200 --> 00:03:14,000
text make is not about building

00:03:11,920 --> 00:03:16,480
operating system distributions

00:03:14,000 --> 00:03:17,680
tax make is used for building the linux

00:03:16,480 --> 00:03:20,000
kernel

00:03:17,680 --> 00:03:21,200
so i want everyone to understand this

00:03:20,000 --> 00:03:23,360
difference so

00:03:21,200 --> 00:03:24,319
we are not talking about building

00:03:23,360 --> 00:03:26,879
operating systems

00:03:24,319 --> 00:03:27,680
or the operating system distributions

00:03:26,879 --> 00:03:30,640
tax make

00:03:27,680 --> 00:03:31,519
is specifically used for building linux

00:03:30,640 --> 00:03:34,000
kernel

00:03:31,519 --> 00:03:34,879
and you may ask building linux kernel is

00:03:34,000 --> 00:03:38,159
not difficult

00:03:34,879 --> 00:03:39,920
it's easy right so

00:03:38,159 --> 00:03:41,599
in order to build linux kernel you do

00:03:39,920 --> 00:03:42,799
make dev config make you follow the

00:03:41,599 --> 00:03:45,120
documentation

00:03:42,799 --> 00:03:46,560
install the dependencies and run a

00:03:45,120 --> 00:03:49,920
couple of make commands

00:03:46,560 --> 00:03:53,200
like make the def config and make

00:03:49,920 --> 00:03:55,439
and then you're done we can like

00:03:53,200 --> 00:03:56,640
build linux kernel as easy as that

00:03:55,439 --> 00:03:58,239
however

00:03:56,640 --> 00:03:59,760
if a developer wants to build for

00:03:58,239 --> 00:04:02,080
multiple architectures

00:03:59,760 --> 00:04:03,840
with multiple tool chains things get

00:04:02,080 --> 00:04:06,239
complicated

00:04:03,840 --> 00:04:08,080
most developers and maintainers have a

00:04:06,239 --> 00:04:10,239
set of custom scripts

00:04:08,080 --> 00:04:12,080
that they have written over time and

00:04:10,239 --> 00:04:13,120
maintained to perform their required set

00:04:12,080 --> 00:04:15,680
of builds

00:04:13,120 --> 00:04:17,680
so this how usually linux kernel

00:04:15,680 --> 00:04:19,759
developers

00:04:17,680 --> 00:04:21,600
solve the problem of building across

00:04:19,759 --> 00:04:23,919
different combinations

00:04:21,600 --> 00:04:24,639
but tuxmake provides a common layer of

00:04:23,919 --> 00:04:26,720
abstraction

00:04:24,639 --> 00:04:28,639
to reduce the need for every developer

00:04:26,720 --> 00:04:30,800
to write their own build scripts

00:04:28,639 --> 00:04:32,080
so it gives a common command line tool

00:04:30,800 --> 00:04:35,120
in order to like

00:04:32,080 --> 00:04:36,720
build for multiple combinations as

00:04:35,120 --> 00:04:38,400
listed in the slide

00:04:36,720 --> 00:04:39,919
so there are different architectures

00:04:38,400 --> 00:04:42,960
tool chains configurations

00:04:39,919 --> 00:04:45,919
targets and build time validation which

00:04:42,960 --> 00:04:48,160
is supported by taxmaker

00:04:45,919 --> 00:04:50,000
if you see the support matrix for text

00:04:48,160 --> 00:04:52,800
make it supports

00:04:50,000 --> 00:04:53,600
so many architectures and so many like

00:04:52,800 --> 00:04:55,520
tool chains

00:04:53,600 --> 00:04:58,560
with different versions of these tool

00:04:55,520 --> 00:05:01,360
chain combinations

00:04:58,560 --> 00:05:02,160
so building across this becomes really

00:05:01,360 --> 00:05:04,560
difficult

00:05:02,160 --> 00:05:05,680
when you want to scale to these number

00:05:04,560 --> 00:05:09,360
of combinations

00:05:05,680 --> 00:05:09,360
which that's makes solves for us

00:05:09,600 --> 00:05:13,120
let's see what taxmake provides so text

00:05:12,720 --> 00:05:15,120
make

00:05:13,120 --> 00:05:17,039
provides a consistent command line

00:05:15,120 --> 00:05:19,600
interface in order to

00:05:17,039 --> 00:05:21,759
build linux kernel for these multiple

00:05:19,600 --> 00:05:25,440
combinations which we saw

00:05:21,759 --> 00:05:27,199
just now so tucksmake publishes

00:05:25,440 --> 00:05:29,120
containers for various tool chain

00:05:27,199 --> 00:05:32,960
architecture combinations

00:05:29,120 --> 00:05:35,280
as docker or apartment container images

00:05:32,960 --> 00:05:36,800
these containers eliminate the need for

00:05:35,280 --> 00:05:39,440
individual developers

00:05:36,800 --> 00:05:40,160
to source and install multiple tool

00:05:39,440 --> 00:05:43,600
chains

00:05:40,160 --> 00:05:46,639
and tool chain versions on their systems

00:05:43,600 --> 00:05:48,400
so with this touch make helps us to have

00:05:46,639 --> 00:05:49,039
a sandbox kind of environment in order

00:05:48,400 --> 00:05:51,840
to

00:05:49,039 --> 00:05:52,720
do your complete linux builds that is

00:05:51,840 --> 00:05:56,720
doing builds

00:05:52,720 --> 00:06:00,560
within containers it also makes

00:05:56,720 --> 00:06:03,039
builds reproducible and portable because

00:06:00,560 --> 00:06:04,160
the environment in which a linux kernel

00:06:03,039 --> 00:06:06,319
is built

00:06:04,160 --> 00:06:08,160
is versioned and shareable across the

00:06:06,319 --> 00:06:10,960
internet and on mailing lists

00:06:08,160 --> 00:06:13,600
due to the usage of containers in which

00:06:10,960 --> 00:06:17,280
these linux kernel

00:06:13,600 --> 00:06:18,479
are built so there are two goals for

00:06:17,280 --> 00:06:21,199
tuxmake

00:06:18,479 --> 00:06:22,000
firstly it wants to remove the friction

00:06:21,199 --> 00:06:24,240
that may

00:06:22,000 --> 00:06:25,199
cause developers especially new

00:06:24,240 --> 00:06:27,759
developers

00:06:25,199 --> 00:06:29,919
to skip build testing for uncommon tool

00:06:27,759 --> 00:06:32,000
chain architecture combinations

00:06:29,919 --> 00:06:32,960
when developing the linux kernel

00:06:32,000 --> 00:06:35,440
secondly

00:06:32,960 --> 00:06:37,199
to make it easier for bills and build

00:06:35,440 --> 00:06:41,120
problems to be described

00:06:37,199 --> 00:06:44,560
and reproduced it also makes

00:06:41,120 --> 00:06:45,199
as i said before reproducing and

00:06:44,560 --> 00:06:47,280
reporting

00:06:45,199 --> 00:06:49,840
bills on mailing lists and different

00:06:47,280 --> 00:06:52,080
channels easier

00:06:49,840 --> 00:06:53,440
by passing on the text make command

00:06:52,080 --> 00:06:56,800
which they used

00:06:53,440 --> 00:07:00,160
for building a specific combination

00:06:56,800 --> 00:07:03,360
or a specific linux kernel

00:07:00,160 --> 00:07:03,919
let's see how to install and the basic

00:07:03,360 --> 00:07:07,680
usage

00:07:03,919 --> 00:07:07,680
of tex make command line

00:07:08,560 --> 00:07:15,759
let me pull up a terminal so as i said

00:07:12,400 --> 00:07:21,360
tux make is basically

00:07:15,759 --> 00:07:21,360
a python based command line tool

00:07:23,280 --> 00:07:28,639
so the latest version of tuxmake

00:07:29,520 --> 00:07:37,919
is 0.13.2 and it is available via

00:07:33,919 --> 00:07:40,000
the usual python pipeline repository

00:07:37,919 --> 00:07:44,720
text make requires python version

00:07:40,000 --> 00:07:47,039
greater than or equal to 3.6.x

00:07:44,720 --> 00:07:48,319
and most of you would have known how to

00:07:47,039 --> 00:07:51,440
like

00:07:48,319 --> 00:07:54,560
install python

00:07:51,440 --> 00:07:56,840
packages in your own systems

00:07:54,560 --> 00:07:59,520
i'm just going to show you how to

00:07:56,840 --> 00:08:03,520
install

00:07:59,520 --> 00:08:08,960
text make in

00:08:03,520 --> 00:08:08,960
your machines using the pip installer

00:08:10,840 --> 00:08:18,160
so let me create

00:08:14,800 --> 00:08:22,960
a virtual environment for

00:08:18,160 --> 00:08:22,960
installing this text make

00:08:24,000 --> 00:08:29,440
so i am creating a virtual environment

00:08:25,520 --> 00:08:29,440
with python 3.8.4

00:08:29,520 --> 00:08:33,919
and let me activate this virtual

00:08:31,440 --> 00:08:38,159
environment

00:08:33,919 --> 00:08:38,159
so now i have

00:08:38,599 --> 00:08:42,479
python3.8.4 virtual environment so in

00:08:41,279 --> 00:08:48,480
order to install text make

00:08:42,479 --> 00:08:52,720
i do pip install revenue that's made

00:08:48,480 --> 00:08:56,320
so that gets me touch make installed

00:08:52,720 --> 00:08:58,880
and if i see the version of text make

00:08:56,320 --> 00:09:01,279
it 0.13.2 which is the latest version of

00:08:58,880 --> 00:09:03,040
touchscreen

00:09:01,279 --> 00:09:04,560
and if you want to install in your own

00:09:03,040 --> 00:09:07,920
user home directory

00:09:04,560 --> 00:09:10,240
you need to use the hyphen hyphen user

00:09:07,920 --> 00:09:11,360
option in order to install in a user

00:09:10,240 --> 00:09:14,240
home directory

00:09:11,360 --> 00:09:15,839
and upgrading as you have as you can see

00:09:14,240 --> 00:09:17,760
you need to use the hyphen u

00:09:15,839 --> 00:09:19,440
in order to upgrade so it's normal like

00:09:17,760 --> 00:09:22,720
pip installation which

00:09:19,440 --> 00:09:24,240
you do for any other python package

00:09:22,720 --> 00:09:26,240
as far as distribution packages are

00:09:24,240 --> 00:09:27,279
concerned we already have the scripts in

00:09:26,240 --> 00:09:30,720
order to generate

00:09:27,279 --> 00:09:33,200
debian and rpm packages but we haven't

00:09:30,720 --> 00:09:34,839
published the debian rpm packages yet

00:09:33,200 --> 00:09:37,279
we'll soon be adding this to the

00:09:34,839 --> 00:09:41,279
respective distributions

00:09:37,279 --> 00:09:44,560
and then make it part of debian or other

00:09:41,279 --> 00:09:48,399
like operating system distributions

00:09:44,560 --> 00:09:51,839
so let me show you the help command of

00:09:48,399 --> 00:09:51,839
touch make

00:09:52,320 --> 00:09:57,680
text make has a lot of options

00:09:55,600 --> 00:09:58,720
so as you can see here it takes

00:09:57,680 --> 00:10:01,600
different options

00:09:58,720 --> 00:10:02,079
and different like parameters in order

00:10:01,600 --> 00:10:04,880
to like

00:10:02,079 --> 00:10:06,560
do linux kernel builds so you can pass

00:10:04,880 --> 00:10:07,200
the tool chain with which you want to

00:10:06,560 --> 00:10:09,519
build

00:10:07,200 --> 00:10:11,680
you can pass any environment variables

00:10:09,519 --> 00:10:15,040
that you want to like pass to the

00:10:11,680 --> 00:10:17,120
linux kernel build and also like you can

00:10:15,040 --> 00:10:21,600
specify the different architectures

00:10:17,120 --> 00:10:25,440
you want to like support or build with

00:10:21,600 --> 00:10:27,680
let me show you the support matrix

00:10:25,440 --> 00:10:28,720
which this version of touch makes

00:10:27,680 --> 00:10:32,079
supports

00:10:28,720 --> 00:10:35,600
so it supports these architectures

00:10:32,079 --> 00:10:37,839
and these tool chains

00:10:35,600 --> 00:10:39,920
this is how you can like see the support

00:10:37,839 --> 00:10:40,240
matrix and similarly if you want to like

00:10:39,920 --> 00:10:42,000
see

00:10:40,240 --> 00:10:43,680
what are the different run times this

00:10:42,000 --> 00:10:45,600
version of touch make supports

00:10:43,680 --> 00:10:47,120
you can see this here so it supports

00:10:45,600 --> 00:10:48,880
like docker apartment and different

00:10:47,120 --> 00:10:51,680
stuff

00:10:48,880 --> 00:10:54,399
so this is an overview on the tax make

00:10:51,680 --> 00:10:54,399
help command

00:10:54,480 --> 00:10:58,480
lot of other commands and the usage of

00:10:56,640 --> 00:11:03,040
this will be like

00:10:58,480 --> 00:11:03,040
covered by vishal bush during his

00:11:03,279 --> 00:11:07,360
demo with this introduction i'll pass it

00:11:06,959 --> 00:11:10,560
on

00:11:07,360 --> 00:11:15,839
to vishal in order to like show

00:11:10,560 --> 00:11:15,839
tax make in action

00:11:18,000 --> 00:11:24,720
hello everyone uh i'll be going through

00:11:21,040 --> 00:11:26,640
a few of the demo builds using tuxmake

00:11:24,720 --> 00:11:28,079
which will give you a practical

00:11:26,640 --> 00:11:32,160
experience about

00:11:28,079 --> 00:11:35,200
tux make let's start it simple by

00:11:32,160 --> 00:11:36,640
doing a default build uh here you just

00:11:35,200 --> 00:11:38,959
run the tuxmake command

00:11:36,640 --> 00:11:40,560
from the kernel source tree and it would

00:11:38,959 --> 00:11:42,000
build

00:11:40,560 --> 00:11:44,160
the kernel image for the host

00:11:42,000 --> 00:11:46,399
architecture using the host gcc tool

00:11:44,160 --> 00:11:46,399
chain

00:11:50,800 --> 00:11:57,279
yeah i've triggered the build and

00:11:53,839 --> 00:11:59,040
uh it will give you a lot of uh

00:11:57,279 --> 00:12:00,800
it will give you the output for each of

00:11:59,040 --> 00:12:03,920
the command that is executed

00:12:00,800 --> 00:12:06,959
so let's go through uh each of them

00:12:03,920 --> 00:12:10,079
one by one to start with uh

00:12:06,959 --> 00:12:12,959
it will give you a reproducer command

00:12:10,079 --> 00:12:13,440
while this build happens i can explain

00:12:12,959 --> 00:12:16,160
these

00:12:13,440 --> 00:12:17,519
output on the presentation slides itself

00:12:16,160 --> 00:12:20,320
yeah

00:12:17,519 --> 00:12:20,959
okay the first thing which it dumps out

00:12:20,320 --> 00:12:22,720
is

00:12:20,959 --> 00:12:25,279
basically it'll give you a reproducer

00:12:22,720 --> 00:12:29,519
command which you can share with others

00:12:25,279 --> 00:12:29,519
to do the same exact build

00:12:30,320 --> 00:12:33,440
the second thing it does is basically

00:12:32,320 --> 00:12:36,399
create a

00:12:33,440 --> 00:12:37,200
unique build directory where all the

00:12:36,399 --> 00:12:39,519
intermediate

00:12:37,200 --> 00:12:40,880
files as well as built artifacts are

00:12:39,519 --> 00:12:44,000
stored

00:12:40,880 --> 00:12:46,800
it would then go ahead and

00:12:44,000 --> 00:12:48,720
do a devconfig to generate make

00:12:46,800 --> 00:12:49,920
devconfig to generate the dot config

00:12:48,720 --> 00:12:53,279
file

00:12:49,920 --> 00:12:54,079
that will be used for the belt depending

00:12:53,279 --> 00:12:56,800
on

00:12:54,079 --> 00:12:58,240
other config config parameters that you

00:12:56,800 --> 00:13:00,560
set

00:12:58,240 --> 00:13:01,760
uh it would do other things but yeah

00:13:00,560 --> 00:13:05,040
let's stick to the

00:13:01,760 --> 00:13:06,880
basic uh build here so it would do a def

00:13:05,040 --> 00:13:08,959
config to generate dot config

00:13:06,880 --> 00:13:11,200
and the next step would be it would

00:13:08,959 --> 00:13:14,399
build the default kernel image

00:13:11,200 --> 00:13:18,320
and uh the bz image uh

00:13:14,399 --> 00:13:20,399
explicitly for x86 architecture

00:13:18,320 --> 00:13:21,519
so first it would do a default kernel

00:13:20,399 --> 00:13:24,320
build and then

00:13:21,519 --> 00:13:26,639
explicitly trigger a busy image built

00:13:24,320 --> 00:13:28,720
which is shown in this logs

00:13:26,639 --> 00:13:30,240
so let's check the status of the build

00:13:28,720 --> 00:13:30,800
yeah the build is still going on so

00:13:30,240 --> 00:13:34,639
let's go

00:13:30,800 --> 00:13:36,880
back so uh

00:13:34,639 --> 00:13:39,120
once the kernel breezy image is

00:13:36,880 --> 00:13:43,040
generated it would then go ahead and

00:13:39,120 --> 00:13:47,120
build vm linux explicitly and then

00:13:43,040 --> 00:13:50,399
compress the vm linux to reduce the

00:13:47,120 --> 00:13:50,399
storage space

00:13:50,720 --> 00:13:57,360
usage in this case it's it'll be a no-op

00:13:54,480 --> 00:14:00,480
because pm linux would have got built

00:13:57,360 --> 00:14:03,279
in the previous build step itself

00:14:00,480 --> 00:14:03,920
after the vm linux is created and

00:14:03,279 --> 00:14:05,920
compressed

00:14:03,920 --> 00:14:08,800
it would go ahead to build the modules

00:14:05,920 --> 00:14:10,720
if the modules are enabled in the build

00:14:08,800 --> 00:14:12,480
and it would compress the build the

00:14:10,720 --> 00:14:15,360
modules generated

00:14:12,480 --> 00:14:16,000
from the modules installed command so

00:14:15,360 --> 00:14:18,720
let's see i

00:14:16,000 --> 00:14:20,079
hope the build should be done yeah it's

00:14:18,720 --> 00:14:23,360
complete now

00:14:20,079 --> 00:14:26,079
so you can check uh to start with it did

00:14:23,360 --> 00:14:28,240
uh dump us the reproduce command and

00:14:26,079 --> 00:14:29,199
then it went on to generate our config

00:14:28,240 --> 00:14:32,240
using

00:14:29,199 --> 00:14:36,079
the def config the next was

00:14:32,240 --> 00:14:39,519
a default kernel build and

00:14:36,079 --> 00:14:42,639
explicitly it built the busy image

00:14:39,519 --> 00:14:44,639
it then checks for

00:14:42,639 --> 00:14:46,399
modules if they are enabled in the dot

00:14:44,639 --> 00:14:49,760
config and based on that

00:14:46,399 --> 00:14:53,199
it would do the modules uh

00:14:49,760 --> 00:14:57,839
build as well as uh it would then

00:14:53,199 --> 00:15:01,120
compress the generated modules into a

00:14:57,839 --> 00:15:04,959
it then checks for uh dtp's if

00:15:01,120 --> 00:15:05,279
there is uh dtbs available it would then

00:15:04,959 --> 00:15:07,360
uh

00:15:05,279 --> 00:15:09,120
generate the dtb's target but distance

00:15:07,360 --> 00:15:13,120
x86 for

00:15:09,120 --> 00:15:15,600
the test fails and it says skip the

00:15:13,120 --> 00:15:16,240
dtp generations now it would then go

00:15:15,600 --> 00:15:18,399
ahead and

00:15:16,240 --> 00:15:19,680
build the debug kernel and then compress

00:15:18,399 --> 00:15:22,720
it

00:15:19,680 --> 00:15:25,680
so once the build is done uh

00:15:22,720 --> 00:15:26,720
yeah once the build is done it would

00:15:25,680 --> 00:15:30,880
basically

00:15:26,720 --> 00:15:33,199
uh provide the pass fail skip state

00:15:30,880 --> 00:15:34,079
status for each of the targets that got

00:15:33,199 --> 00:15:36,560
uh

00:15:34,079 --> 00:15:38,160
built during this uh text making for

00:15:36,560 --> 00:15:40,160
invocation

00:15:38,160 --> 00:15:41,600
so you can look at this format it

00:15:40,160 --> 00:15:44,160
actually gives a

00:15:41,600 --> 00:15:45,120
conflict pass and the duration it took

00:15:44,160 --> 00:15:47,519
for

00:15:45,120 --> 00:15:48,320
the particular stage finally it would

00:15:47,519 --> 00:15:51,279
give us

00:15:48,320 --> 00:15:54,320
the output directory where the binaries

00:15:51,279 --> 00:15:56,880
are stored uh

00:15:54,320 --> 00:15:59,120
the details of the tool chain version

00:15:56,880 --> 00:16:01,040
build tools version artifacts and status

00:15:59,120 --> 00:16:05,199
are available in the metadata

00:16:01,040 --> 00:16:09,120
json so let's go back to the build

00:16:05,199 --> 00:16:12,160
and we can inspect the metadata file

00:16:09,120 --> 00:16:14,560
so the build done here is the build

00:16:12,160 --> 00:16:18,079
number 20 on this particular machine so

00:16:14,560 --> 00:16:22,560
let's go ahead and check

00:16:18,079 --> 00:16:26,560
the build artifacts as you can see the

00:16:22,560 --> 00:16:30,079
build log will have uh

00:16:26,560 --> 00:16:32,160
the actual uh build

00:16:30,079 --> 00:16:33,360
um and the locks generated during the

00:16:32,160 --> 00:16:36,560
build uh

00:16:33,360 --> 00:16:39,600
it has the bc image config metadata

00:16:36,560 --> 00:16:41,199
the modules generated and system map and

00:16:39,600 --> 00:16:44,320
vm linux file

00:16:41,199 --> 00:16:51,839
so let's inspect the

00:16:44,320 --> 00:16:51,839
metadata file

00:16:52,240 --> 00:16:57,920
so this dot cache text make is the

00:16:55,440 --> 00:17:01,040
default uh location where

00:16:57,920 --> 00:17:02,639
the uh binaries where the build

00:17:01,040 --> 00:17:05,760
directory is generated

00:17:02,639 --> 00:17:07,760
so if i open the metadata file it has

00:17:05,760 --> 00:17:10,959
different sections uh

00:17:07,760 --> 00:17:14,400
so the first one is built uh it

00:17:10,959 --> 00:17:16,319
gives us uh information about uh

00:17:14,400 --> 00:17:17,760
what happened during the build the

00:17:16,319 --> 00:17:20,160
targets that were built

00:17:17,760 --> 00:17:21,760
the architecture for which the kernel

00:17:20,160 --> 00:17:23,679
was built to chain and

00:17:21,760 --> 00:17:25,199
any environment variables that are set

00:17:23,679 --> 00:17:28,640
and any additional

00:17:25,199 --> 00:17:31,440
config parameters passed

00:17:28,640 --> 00:17:33,919
as well as the number of threads taken

00:17:31,440 --> 00:17:36,640
and if runtime was used

00:17:33,919 --> 00:17:37,120
and the reproduced command the next

00:17:36,640 --> 00:17:39,600
section

00:17:37,120 --> 00:17:40,320
next item here will be the results it

00:17:39,600 --> 00:17:42,720
will give the

00:17:40,320 --> 00:17:44,160
results for each of the target and the

00:17:42,720 --> 00:17:46,960
duration taken

00:17:44,160 --> 00:17:48,559
for this build and the same metadata is

00:17:46,960 --> 00:17:52,080
used

00:17:48,559 --> 00:17:55,360
on the cli to dump the information

00:17:52,080 --> 00:17:58,080
so the artifacts would

00:17:55,360 --> 00:17:58,960
give us the list of artifacts generated

00:17:58,080 --> 00:18:02,240
for each of the

00:17:58,960 --> 00:18:04,960
targets so you have the log config

00:18:02,240 --> 00:18:05,679
kernel image modules since the modules

00:18:04,960 --> 00:18:08,480
are compressed

00:18:05,679 --> 00:18:10,320
you have the archive i mentioned here

00:18:08,480 --> 00:18:12,080
for the debug kernel target

00:18:10,320 --> 00:18:13,520
the vm linux and system map are

00:18:12,080 --> 00:18:15,520
generated

00:18:13,520 --> 00:18:16,640
it also gives us the number of errors

00:18:15,520 --> 00:18:19,600
and warnings that

00:18:16,640 --> 00:18:21,360
were that occur during the build and

00:18:19,600 --> 00:18:22,799
this can be used for statistical

00:18:21,360 --> 00:18:25,039
purposes

00:18:22,799 --> 00:18:26,240
it will give the duration for each of

00:18:25,039 --> 00:18:28,320
the different

00:18:26,240 --> 00:18:29,360
stages which are there in part of text

00:18:28,320 --> 00:18:31,520
me

00:18:29,360 --> 00:18:32,640
other meta data information is the

00:18:31,520 --> 00:18:36,640
kernel version

00:18:32,640 --> 00:18:39,600
system map vm linux information

00:18:36,640 --> 00:18:41,200
and the git repository and the commit id

00:18:39,600 --> 00:18:43,679
that went into the build

00:18:41,200 --> 00:18:44,960
and we have the interesting bits here it

00:18:43,679 --> 00:18:46,960
gives the complete

00:18:44,960 --> 00:18:48,000
exact version of the compiler that was

00:18:46,960 --> 00:18:51,200
used

00:18:48,000 --> 00:18:52,559
and the version of the host os where the

00:18:51,200 --> 00:18:55,600
build was done

00:18:52,559 --> 00:18:57,600
and the versions of all the tools that

00:18:55,600 --> 00:19:00,559
were used during the build is gcc

00:18:57,600 --> 00:19:01,600
make and all the other tools which come

00:19:00,559 --> 00:19:04,799
into picture

00:19:01,600 --> 00:19:07,840
during building the curling uh

00:19:04,799 --> 00:19:11,360
lastly we have the artifacts section

00:19:07,840 --> 00:19:13,280
uh which gives us the actual

00:19:11,360 --> 00:19:14,720
details of uh artifacts that were

00:19:13,280 --> 00:19:17,840
generated in

00:19:14,720 --> 00:19:20,880
the module starball it will list all the

00:19:17,840 --> 00:19:22,480
uh path for all the kernel modules that

00:19:20,880 --> 00:19:26,400
were done and if it was

00:19:22,480 --> 00:19:29,760
dtbs it ddbs also generates an archive

00:19:26,400 --> 00:19:30,240
and all the files present in the tarball

00:19:29,760 --> 00:19:34,080
is

00:19:30,240 --> 00:19:38,640
listed in this artifact section

00:19:34,080 --> 00:19:42,799
so yeah this is all about

00:19:38,640 --> 00:19:42,799
a simple default tuxmake build

00:19:44,640 --> 00:19:50,880
tuxmake can also do the builds

00:19:48,320 --> 00:19:53,440
using the shareable environment and this

00:19:50,880 --> 00:19:56,640
is provided by using

00:19:53,440 --> 00:19:56,640
containers and

00:19:56,799 --> 00:20:00,080
to launch these containers you can do it

00:19:59,520 --> 00:20:02,480
with

00:20:00,080 --> 00:20:03,520
two different runtime one is the doc

00:20:02,480 --> 00:20:06,960
docker

00:20:03,520 --> 00:20:09,520
runtime which yeah i hope

00:20:06,960 --> 00:20:11,520
all of us know about the other one is

00:20:09,520 --> 00:20:16,799
spot man

00:20:11,520 --> 00:20:16,799
podman is a rootless demonless

00:20:17,840 --> 00:20:21,520
runtime which can be used to launch

00:20:19,919 --> 00:20:24,400
containers and

00:20:21,520 --> 00:20:26,720
do our builds to start with we'll just

00:20:24,400 --> 00:20:30,799
invoke

00:20:26,720 --> 00:20:35,840
the docker runtime and tiny config

00:20:30,799 --> 00:20:35,840
build for x86

00:20:38,799 --> 00:20:45,440
yeah so this will be doing

00:20:41,919 --> 00:20:46,480
an x86 64 build but this time it will be

00:20:45,440 --> 00:20:49,520
using

00:20:46,480 --> 00:20:51,840
the docker runtime uh

00:20:49,520 --> 00:20:53,840
yeah it will give the similar uh output

00:20:51,840 --> 00:20:56,960
as we saw in the first one

00:20:53,840 --> 00:21:00,320
first one is a reproducer command

00:20:56,960 --> 00:21:03,280
where you can see that since we use rock

00:21:00,320 --> 00:21:04,880
docker runtime it adds the docker

00:21:03,280 --> 00:21:06,880
runtime information as well

00:21:04,880 --> 00:21:08,080
and the image that was used during this

00:21:06,880 --> 00:21:11,360
build

00:21:08,080 --> 00:21:15,280
so here it's actually trying to

00:21:11,360 --> 00:21:19,280
pull the latest x864 taksmic

00:21:15,280 --> 00:21:23,520
container since it's already downloaded

00:21:19,280 --> 00:21:26,080
there was no update done during

00:21:23,520 --> 00:21:27,280
this check and after that it will

00:21:26,080 --> 00:21:30,480
actually

00:21:27,280 --> 00:21:34,400
do the build for us uh

00:21:30,480 --> 00:21:36,640
yeah uh in this case uh

00:21:34,400 --> 00:21:37,760
yeah we've used an existing build

00:21:36,640 --> 00:21:41,039
directory

00:21:37,760 --> 00:21:41,600
uh i'll tell you uh this was yeah we can

00:21:41,039 --> 00:21:45,039
i'll

00:21:41,600 --> 00:21:48,480
tell you more about this uh in the later

00:21:45,039 --> 00:21:48,480
uh slides

00:21:49,200 --> 00:21:52,640
yeah that is with respect to the run

00:21:51,520 --> 00:21:56,080
times we can either use

00:21:52,640 --> 00:21:56,080
a docker or podman

00:21:57,200 --> 00:22:05,679
the next one is uh cross compiling

00:22:01,200 --> 00:22:07,919
the yeah it's similar to the uh uh

00:22:05,679 --> 00:22:10,159
x86 compilation that we showed but uh it

00:22:07,919 --> 00:22:12,960
will use uh

00:22:10,159 --> 00:22:15,200
crosstool chains for the build tax make

00:22:12,960 --> 00:22:18,640
high function target

00:22:15,200 --> 00:22:22,320
arm64 will basically do a build

00:22:18,640 --> 00:22:22,720
for uh uh arm64 using the cross tool

00:22:22,320 --> 00:22:25,200
chain

00:22:22,720 --> 00:22:25,760
installed on that particular machine

00:22:25,200 --> 00:22:29,600
itself

00:22:25,760 --> 00:22:34,320
the second command is to do a build

00:22:29,600 --> 00:22:37,200
for m64 but the tool chain

00:22:34,320 --> 00:22:37,840
is used which is packaged inside our

00:22:37,200 --> 00:22:42,640
tuxmake

00:22:37,840 --> 00:22:55,840
docker container so i'll just

00:22:42,640 --> 00:22:55,840
do the build that will get me ready

00:23:05,679 --> 00:23:10,720
yeah i'm doing a tiny config build just

00:23:08,159 --> 00:23:14,159
to keep this

00:23:10,720 --> 00:23:15,600
fast and here we're using clank 11 tool

00:23:14,159 --> 00:23:18,960
chain

00:23:15,600 --> 00:23:20,960
for the build and

00:23:18,960 --> 00:23:23,490
now you can see it's again trying to

00:23:20,960 --> 00:23:24,559
fetch the arm 64 klang 11

00:23:23,490 --> 00:23:26,880
[Music]

00:23:24,559 --> 00:23:28,640
it has the klang 11 tool chain sorry

00:23:26,880 --> 00:23:32,720
about that it has a clank 11 tool chain

00:23:28,640 --> 00:23:32,720
uh inside that particular container

00:23:34,960 --> 00:23:41,440
yes uh i pulled the container and uh

00:23:38,880 --> 00:23:44,159
checked the sha and since it was already

00:23:41,440 --> 00:23:46,720
there in my machine did not have to pull

00:23:44,159 --> 00:23:48,080
uh more uh layers of that particular

00:23:46,720 --> 00:23:50,400
container

00:23:48,080 --> 00:23:51,279
uh since it was not updated so the build

00:23:50,400 --> 00:23:54,640
is going

00:23:51,279 --> 00:23:56,159
on as expected uh yeah let's go ahead

00:23:54,640 --> 00:23:59,120
with

00:23:56,159 --> 00:23:59,120
the next section

00:24:03,600 --> 00:24:07,120
yes uh yeah we've just given some more

00:24:06,480 --> 00:24:09,840
options and

00:24:07,120 --> 00:24:10,880
uh the way we can do with podman as well

00:24:09,840 --> 00:24:15,039
uh we'll go ahead with the

00:24:10,880 --> 00:24:15,039
partner example uh in

00:24:15,520 --> 00:24:22,640
later slides yeah the

00:24:18,799 --> 00:24:25,919
one where i did with the build directory

00:24:22,640 --> 00:24:28,320
uh dot slash build will be

00:24:25,919 --> 00:24:29,520
the one where it is actually doing the

00:24:28,320 --> 00:24:31,679
incremental build

00:24:29,520 --> 00:24:33,440
here you if you specify hyphenation

00:24:31,679 --> 00:24:36,000
build hyphen dir

00:24:33,440 --> 00:24:37,679
the directory it would basically do the

00:24:36,000 --> 00:24:39,200
build and store the artifact in that

00:24:37,679 --> 00:24:41,200
particular directory

00:24:39,200 --> 00:24:42,480
and if you specify the same directory

00:24:41,200 --> 00:24:46,080
again for the next

00:24:42,480 --> 00:24:48,080
build after updating your kernel or

00:24:46,080 --> 00:24:50,080
while you're making modifications to the

00:24:48,080 --> 00:24:51,200
kernel source it would do an incremental

00:24:50,080 --> 00:24:54,320
build

00:24:51,200 --> 00:24:56,480
so yeah this is happening

00:24:54,320 --> 00:25:01,840
but uh yeah that's what that's how you

00:24:56,480 --> 00:25:01,840
do the incremental builds

00:25:02,640 --> 00:25:09,679
uh yeah the main reason uh why

00:25:06,400 --> 00:25:13,600
uh tax make was developed was uh

00:25:09,679 --> 00:25:16,880
to make it easy for uh users to

00:25:13,600 --> 00:25:19,440
share the way they did the build

00:25:16,880 --> 00:25:22,000
with other users as well as some

00:25:19,440 --> 00:25:26,799
standardization

00:25:22,000 --> 00:25:29,360
for users while doing the builds

00:25:26,799 --> 00:25:30,640
irrespective of the os versions or the

00:25:29,360 --> 00:25:33,440
two chain versions that

00:25:30,640 --> 00:25:34,000
may be installed on the host machine so

00:25:33,440 --> 00:25:37,679
with

00:25:34,000 --> 00:25:40,320
the text make you get

00:25:37,679 --> 00:25:42,400
the you get user sharable built

00:25:40,320 --> 00:25:45,520
environments using containers

00:25:42,400 --> 00:25:48,720
and it also supports

00:25:45,520 --> 00:25:49,679
key conflicts or conflict fragments can

00:25:48,720 --> 00:25:53,120
be

00:25:49,679 --> 00:25:55,919
provided in the form of a url

00:25:53,120 --> 00:25:56,880
like you can have your own modified k

00:25:55,919 --> 00:26:00,159
config

00:25:56,880 --> 00:26:00,480
fragment which you can which you may

00:26:00,159 --> 00:26:03,840
have

00:26:00,480 --> 00:26:05,600
hosted online and you can just

00:26:03,840 --> 00:26:07,120
specify that to text make and it would

00:26:05,600 --> 00:26:10,400
fetch that particular

00:26:07,120 --> 00:26:12,000
config fragment and use it in the build

00:26:10,400 --> 00:26:13,919
at the same time it would give you a

00:26:12,000 --> 00:26:15,440
reproducer command which you can share

00:26:13,919 --> 00:26:17,919
with other users

00:26:15,440 --> 00:26:18,640
and they can reproduce that exact build

00:26:17,919 --> 00:26:21,679
using the

00:26:18,640 --> 00:26:23,120
reproducer command and this one line

00:26:21,679 --> 00:26:26,559
text make command

00:26:23,120 --> 00:26:29,440
communicates precisely the instructions

00:26:26,559 --> 00:26:30,240
that are needed for reproducing this

00:26:29,440 --> 00:26:32,000
build

00:26:30,240 --> 00:26:34,960
this way if you run into any build

00:26:32,000 --> 00:26:36,000
issues you can report it to the emailing

00:26:34,960 --> 00:26:38,960
list

00:26:36,000 --> 00:26:40,880
with just the taxmaker producer uh one

00:26:38,960 --> 00:26:43,120
line command

00:26:40,880 --> 00:26:44,000
and it would for other users could

00:26:43,120 --> 00:26:47,360
reproduce it

00:26:44,000 --> 00:26:52,080
easily tuxmake can also

00:26:47,360 --> 00:26:53,360
do bit for bit reproducible builds but

00:26:52,080 --> 00:26:56,400
for this you need to

00:26:53,360 --> 00:26:59,279
set other uh environment variables like

00:26:56,400 --> 00:26:59,919
k build build time stamp cable build

00:26:59,279 --> 00:27:03,360
user

00:26:59,919 --> 00:27:06,880
k build build host and stuff uh

00:27:03,360 --> 00:27:07,840
which affect the actual binary that is

00:27:06,880 --> 00:27:10,159
generated

00:27:07,840 --> 00:27:11,039
there are other caveats also involved

00:27:10,159 --> 00:27:14,159
with

00:27:11,039 --> 00:27:18,080
reproducible kernels uh more details are

00:27:14,159 --> 00:27:18,080
available in the url mentioned here

00:27:18,799 --> 00:27:25,360
so now we'll go ahead and uh

00:27:22,320 --> 00:27:29,200
do a belt using podman

00:27:25,360 --> 00:27:33,360
and uh no sorry we'll use the docker

00:27:29,200 --> 00:27:35,360
container uh or uh yeah we'll see where

00:27:33,360 --> 00:27:37,360
we'll use docker apartment and it would

00:27:35,360 --> 00:27:40,360
generate the same kernel binary

00:27:37,360 --> 00:27:42,679
with the same sha which is mentioned

00:27:40,360 --> 00:27:44,640
8d06

00:27:42,679 --> 00:27:48,080
f679eac

00:27:44,640 --> 00:27:51,679
the final generated image

00:27:48,080 --> 00:27:54,559
always have will always be bit forbid

00:27:51,679 --> 00:27:56,159
identical with this particular command

00:27:54,559 --> 00:28:03,520
on any machine

00:27:56,159 --> 00:28:06,640
so let's go ahead

00:28:03,520 --> 00:28:07,520
yeah so yeah this particular command is

00:28:06,640 --> 00:28:11,840
using uh

00:28:07,520 --> 00:28:14,159
podman so i have triggered the build

00:28:11,840 --> 00:28:15,520
so let's wait for this to complete and

00:28:14,159 --> 00:28:18,559
once it is completed

00:28:15,520 --> 00:28:22,240
we can verify uh the

00:28:18,559 --> 00:28:22,240
sha for that particular kernel image

00:28:23,039 --> 00:28:30,240
so yeah while that is happening uh

00:28:27,120 --> 00:28:31,440
i can tell you about the containers used

00:28:30,240 --> 00:28:33,200
in the e-belts

00:28:31,440 --> 00:28:35,600
the containers that are used in these

00:28:33,200 --> 00:28:37,600
builds are

00:28:35,600 --> 00:28:39,360
basically generated using docker files

00:28:37,600 --> 00:28:44,159
and the same are hosted in the

00:28:39,360 --> 00:28:46,559
tux make sources itself

00:28:44,159 --> 00:28:47,200
the tuxmake container images are built

00:28:46,559 --> 00:28:50,159
using the

00:28:47,200 --> 00:28:51,840
standard debian images that are provided

00:28:50,159 --> 00:28:55,200
by docker inc

00:28:51,840 --> 00:28:58,880
and these containers uh only use the

00:28:55,200 --> 00:29:01,679
official debian packages and

00:28:58,880 --> 00:29:03,120
except for the tool chains that are

00:29:01,679 --> 00:29:07,520
being uh

00:29:03,120 --> 00:29:09,760
used for daily uh daily 2 chain builds

00:29:07,520 --> 00:29:11,600
which come from the upstream project

00:29:09,760 --> 00:29:13,520
like the clang nightly

00:29:11,600 --> 00:29:14,720
tool chain which is used which is

00:29:13,520 --> 00:29:16,960
available

00:29:14,720 --> 00:29:18,559
this basically gets updated on a daily

00:29:16,960 --> 00:29:21,840
basis in the upstream

00:29:18,559 --> 00:29:23,279
project and the container gets updated

00:29:21,840 --> 00:29:25,679
on a daily

00:29:23,279 --> 00:29:28,159
basis pulling this particular updated

00:29:25,679 --> 00:29:30,320
tool chain from the upstream project

00:29:28,159 --> 00:29:31,279
and these containers are hosted on

00:29:30,320 --> 00:29:34,720
docker hub

00:29:31,279 --> 00:29:38,480
as well as aws

00:29:34,720 --> 00:29:42,159
public ecr repository and you could use

00:29:38,480 --> 00:29:45,039
either of those with tax make

00:29:42,159 --> 00:29:45,039
to do your bills

00:29:45,840 --> 00:29:50,480
so let's go back and check and so the

00:29:48,320 --> 00:29:55,200
build is done

00:29:50,480 --> 00:29:59,679
let's check them out

00:29:55,200 --> 00:29:59,679
yes so let's check the

00:29:59,840 --> 00:30:04,240
shaft for the tunnel image

00:30:06,799 --> 00:30:16,880
you can see it is a double 0x679ea

00:30:12,880 --> 00:30:19,919
c which is uh the one which is mentioned

00:30:16,880 --> 00:30:21,679
in the slides so this one was generated

00:30:19,919 --> 00:30:23,919
using the

00:30:21,679 --> 00:30:25,919
container on docker and the one which i

00:30:23,919 --> 00:30:29,919
did was spot man and

00:30:25,919 --> 00:30:29,919
we get the same hash

00:30:31,440 --> 00:30:36,640
okay and tuxmake also provides a python

00:30:35,039 --> 00:30:39,120
interface

00:30:36,640 --> 00:30:40,480
for performing linux kernel built from

00:30:39,120 --> 00:30:43,440
python

00:30:40,480 --> 00:30:44,159
this is extremely useful if you're

00:30:43,440 --> 00:30:47,200
building

00:30:44,159 --> 00:30:49,520
some ci system in python

00:30:47,200 --> 00:30:50,559
and you want to include the kernel

00:30:49,520 --> 00:30:55,279
builds

00:30:50,559 --> 00:30:55,279
part of the build process

00:30:56,960 --> 00:31:01,279
most of the arguments are available to

00:30:59,519 --> 00:31:04,320
the build constructor build

00:31:01,279 --> 00:31:06,240
and they are similar to the ones that

00:31:04,320 --> 00:31:08,799
are available in the cli

00:31:06,240 --> 00:31:09,760
so doing the build in python would just

00:31:08,799 --> 00:31:13,440
be these three

00:31:09,760 --> 00:31:16,799
uh these three commands in python

00:31:13,440 --> 00:31:19,440
and based on the

00:31:16,799 --> 00:31:20,159
arguments you can pass them in the to

00:31:19,440 --> 00:31:23,840
the build

00:31:20,159 --> 00:31:26,880
constructor on the

00:31:23,840 --> 00:31:28,679
contribution front uh the documentation

00:31:26,880 --> 00:31:31,360
is available on

00:31:28,679 --> 00:31:34,159
docs.taxmake.org the project itself is

00:31:31,360 --> 00:31:38,720
hosted on git lab

00:31:34,159 --> 00:31:41,360
and we use gitlab issues itself

00:31:38,720 --> 00:31:43,519
for tracking uh issues as well as

00:31:41,360 --> 00:31:47,600
feature requests

00:31:43,519 --> 00:31:50,960
and this active community around tuxmake

00:31:47,600 --> 00:31:53,919
so feel free to go and checking it out

00:31:50,960 --> 00:31:55,039
uh the contributions for the project uh

00:31:53,919 --> 00:31:58,399
can be done only

00:31:55,039 --> 00:32:00,480
uh as merge requests uh on the gitlab

00:31:58,399 --> 00:32:01,600
repository itself we have a code of

00:32:00,480 --> 00:32:04,559
conduct

00:32:01,600 --> 00:32:05,360
for the project and you can check it out

00:32:04,559 --> 00:32:09,679
on the

00:32:05,360 --> 00:32:15,840
link under docs.make.org

00:32:09,679 --> 00:32:15,840
the project itself is under mit license

00:32:16,320 --> 00:32:22,720
yeah on the references

00:32:19,600 --> 00:32:24,080
i've put all the links here

00:32:22,720 --> 00:32:26,000
basically it's the project as well as

00:32:24,080 --> 00:32:29,120
the documentation

00:32:26,000 --> 00:32:32,399
there is a very good lwn article

00:32:29,120 --> 00:32:33,519
on tuxmake which was published couple of

00:32:32,399 --> 00:32:37,600
weeks ago

00:32:33,519 --> 00:32:37,600
please go check it out and

00:32:37,919 --> 00:32:44,640
last year in lpc uh

00:32:42,159 --> 00:32:48,000
there was a presentation done on taxmake

00:32:44,640 --> 00:32:48,000
which you guys can check out

00:32:48,640 --> 00:32:52,399
the references has much more

00:32:51,220 --> 00:32:55,919
[Music]

00:32:52,399 --> 00:32:56,240
in-depth content as well as explanation

00:32:55,919 --> 00:32:59,279
for

00:32:56,240 --> 00:33:00,159
ducks make so you guys can go through

00:32:59,279 --> 00:33:03,440
them

00:33:00,159 --> 00:33:04,080
for more understanding at this point i

00:33:03,440 --> 00:33:07,519
want to

00:33:04,080 --> 00:33:10,559
share the link for tucksweet.com

00:33:07,519 --> 00:33:12,159
uh this is a commercial service provided

00:33:10,559 --> 00:33:17,279
by linaro

00:33:12,159 --> 00:33:20,320
this is built on top of a tux make

00:33:17,279 --> 00:33:23,440
and you can do around more than

00:33:20,320 --> 00:33:26,480
thousands of builds parallelly

00:33:23,440 --> 00:33:30,960
uh our tools uh

00:33:26,480 --> 00:33:34,159
tool called tax build so this tax suite

00:33:30,960 --> 00:33:39,120
itself is collection of uh

00:33:34,159 --> 00:33:42,480
tools which allow you to build kernel

00:33:39,120 --> 00:33:46,080
in parallel in a large scale as well as

00:33:42,480 --> 00:33:49,679
boot test them on kiamo

00:33:46,080 --> 00:33:52,720
yeah that is all i have

00:33:49,679 --> 00:34:06,720
thank you very much we are now

00:33:52,720 --> 00:34:09,280
we can now open up for taking questions

00:34:06,720 --> 00:34:09,839
thank you sentinel and vishal for the

00:34:09,280 --> 00:34:12,720
talk

00:34:09,839 --> 00:34:13,839
like i have less to no experience with

00:34:12,720 --> 00:34:16,720
the bills

00:34:13,839 --> 00:34:17,280
but i was following along the talk and i

00:34:16,720 --> 00:34:20,480
see

00:34:17,280 --> 00:34:22,639
like probably tax meat would be my way

00:34:20,480 --> 00:34:25,760
into building linux kernels

00:34:22,639 --> 00:34:27,200
so let's uh have some questions from the

00:34:25,760 --> 00:34:30,000
ether pad

00:34:27,200 --> 00:34:31,280
so one of the question like it's been

00:34:30,000 --> 00:34:34,480
answered on the pad also

00:34:31,280 --> 00:34:35,200
so for the video so it says what is the

00:34:34,480 --> 00:34:38,240
status of

00:34:35,200 --> 00:34:40,560
including tax mate in debian so

00:34:38,240 --> 00:34:42,960
vishal or central anyone want to take

00:34:40,560 --> 00:34:42,960
that up

00:34:45,520 --> 00:34:50,480
uh yeah i mean antonio has already

00:34:47,760 --> 00:34:53,599
created uh the deputy packaging

00:34:50,480 --> 00:34:55,440
for that uh i mean

00:34:53,599 --> 00:34:56,879
uh there are two things which is uh he

00:34:55,440 --> 00:34:59,200
was still thinking on whether it should

00:34:56,879 --> 00:35:02,640
go into the debian testing as well as

00:34:59,200 --> 00:35:06,160
since the project is very uh

00:35:02,640 --> 00:35:08,640
very much actively developed so making

00:35:06,160 --> 00:35:10,000
updates from debian also would take for

00:35:08,640 --> 00:35:12,960
time for him that's the reason

00:35:10,000 --> 00:35:13,920
uh he's created uh the packaging there

00:35:12,960 --> 00:35:15,680
and

00:35:13,920 --> 00:35:17,599
we're still checking on where it should

00:35:15,680 --> 00:35:21,680
be hosted

00:35:17,599 --> 00:35:24,640
and uh let's see uh

00:35:21,680 --> 00:35:25,280
i will check with him uh on what the

00:35:24,640 --> 00:35:27,359
timeline

00:35:25,280 --> 00:35:28,960
should be but if users want to create a

00:35:27,359 --> 00:35:31,760
debian package

00:35:28,960 --> 00:35:32,640
sentence posted the link for that people

00:35:31,760 --> 00:35:35,760
can use it

00:35:32,640 --> 00:35:39,599
to create the deviant packaging

00:35:35,760 --> 00:35:40,320
cool so there is a slight out of

00:35:39,599 --> 00:35:42,800
question

00:35:40,320 --> 00:35:43,359
slight out of context question but i

00:35:42,800 --> 00:35:46,640
think

00:35:43,359 --> 00:35:50,000
uh you people can uh yeah i was

00:35:46,640 --> 00:35:52,320
about to type the question was uh

00:35:50,000 --> 00:35:55,480
yeah you can ask questions yeah how to

00:35:52,320 --> 00:35:58,480
put a dot config that works with

00:35:55,480 --> 00:36:01,839
5.4.x2 5.10.x

00:35:58,480 --> 00:36:05,520
when old config does not work

00:36:01,839 --> 00:36:06,079
uh i would say it would be still manual

00:36:05,520 --> 00:36:09,839
process

00:36:06,079 --> 00:36:10,960
to first do a dev config for the 5.10

00:36:09,839 --> 00:36:14,480
kernel and

00:36:10,960 --> 00:36:18,000
check out the old dot config and

00:36:14,480 --> 00:36:20,560
go ahead and enabling uh the specifics

00:36:18,000 --> 00:36:22,240
which are there in the old conflict uh

00:36:20,560 --> 00:36:23,599
it would still be a manual process in my

00:36:22,240 --> 00:36:25,839
opinion where you would

00:36:23,599 --> 00:36:27,599
go ahead and see which features uh were

00:36:25,839 --> 00:36:30,079
enabled in 5.4

00:36:27,599 --> 00:36:31,119
and the same he would want to enable on

00:36:30,079 --> 00:36:33,040
fire 10

00:36:31,119 --> 00:36:34,160
at the same time if these conflicts had

00:36:33,040 --> 00:36:35,680
changed that would again

00:36:34,160 --> 00:36:37,359
that's a reason where old conflict

00:36:35,680 --> 00:36:39,599
wouldn't directly work

00:36:37,359 --> 00:36:40,800
because few of them may be missing

00:36:39,599 --> 00:36:42,640
across from

00:36:40,800 --> 00:36:45,200
while the kernel changed from 5.4 to

00:36:42,640 --> 00:36:45,200
5.10

00:36:45,760 --> 00:36:49,280
so i see the question was asked by a

00:36:48,720 --> 00:36:52,720
couple

00:36:49,280 --> 00:36:53,280
so just to add some context couple had a

00:36:52,720 --> 00:36:56,560
talk

00:36:53,280 --> 00:36:57,440
uh like he's working or porting debian

00:36:56,560 --> 00:37:01,359
to

00:36:57,440 --> 00:37:04,400
chromebook so he is presently using 5.4

00:37:01,359 --> 00:37:08,000
so he's uh like he want to put

00:37:04,400 --> 00:37:11,839
that 5.4 to 5.10 in that context

00:37:08,000 --> 00:37:15,040
yeah uh so

00:37:11,839 --> 00:37:17,359
anything you want to add and like where

00:37:15,040 --> 00:37:19,119
the people can reach you out if they

00:37:17,359 --> 00:37:22,079
want to know more or

00:37:19,119 --> 00:37:24,160
like your emails and stuff so where

00:37:22,079 --> 00:37:27,359
people can reach you out

00:37:24,160 --> 00:37:31,119
um yeah we have a

00:37:27,359 --> 00:37:34,400
generic uh email address

00:37:31,119 --> 00:37:36,000
tax suite at lindar.org

00:37:34,400 --> 00:37:37,760
i mean we are in the process of creating

00:37:36,000 --> 00:37:41,119
a mailing list as well

00:37:37,760 --> 00:37:43,839
uh for these uh

00:37:41,119 --> 00:37:45,280
so that is the place i mean my url my

00:37:43,839 --> 00:37:49,680
email address is vishal

00:37:45,280 --> 00:37:52,960
dot uh bhoj at lenaro dot org

00:37:49,680 --> 00:37:54,880
so you can reach out to us

00:37:52,960 --> 00:37:58,720
to me on that particular email address

00:37:54,880 --> 00:37:58,720
senthil can share his email address

00:38:00,320 --> 00:38:07,480
yeah my email address this

00:38:03,680 --> 00:38:11,520
central dot com around at leonardo.org

00:38:07,480 --> 00:38:15,359
s-e-n-t-h-i-l dot k-u-m-a-r-a-n

00:38:11,520 --> 00:38:17,520
at leonardo d so you can reach us there

00:38:15,359 --> 00:38:20,880
and as we shall respond to like uh there

00:38:17,520 --> 00:38:23,359
is a website called taxsuite.com

00:38:20,880 --> 00:38:24,000
so you can like visit there uh it has

00:38:23,359 --> 00:38:25,760
like uh

00:38:24,000 --> 00:38:27,040
apart from tuxmake we also have with

00:38:25,760 --> 00:38:29,839
different uh

00:38:27,040 --> 00:38:30,560
products uh which are listed some of

00:38:29,839 --> 00:38:33,359
them are

00:38:30,560 --> 00:38:34,400
commercial and which includes like uh

00:38:33,359 --> 00:38:36,320
tax make

00:38:34,400 --> 00:38:38,000
i mean ducks make is completely open

00:38:36,320 --> 00:38:40,800
source so you can like

00:38:38,000 --> 00:38:41,440
experiment with that and we can help you

00:38:40,800 --> 00:38:47,599
in

00:38:41,440 --> 00:38:50,960
different queries you have

00:38:47,599 --> 00:38:53,760
um okay so let me just now i've

00:38:50,960 --> 00:38:55,040
uh found that taxmate is mit license

00:38:53,760 --> 00:38:58,320
okay cool

00:38:55,040 --> 00:39:01,680
so that works uh so thank you

00:38:58,320 --> 00:39:03,920
uh senthil and vishal for the talk so

00:39:01,680 --> 00:39:05,200
we are about it's about time that we

00:39:03,920 --> 00:39:15,440
should end this talk so

00:39:05,200 --> 00:39:15,440

YouTube URL: https://www.youtube.com/watch?v=zugPfhKSac8


