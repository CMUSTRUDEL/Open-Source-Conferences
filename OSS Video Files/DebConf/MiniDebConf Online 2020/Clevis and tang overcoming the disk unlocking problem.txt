Title: Clevis and tang overcoming the disk unlocking problem
Publication date: 2020-06-02
Playlist: MiniDebConf Online 2020
Description: 
	by Christoph Biedl

At: MiniDebConfOnline 2020
https://wiki.debian.org/DebianEvents/internet/2020/MiniDebConfOnline
Room: main
Scheduled start: 2020-05-30 18:00:00
Captions: 
	00:00:04,580 --> 00:00:11,510
hello again everybody it is I the

00:00:07,070 --> 00:00:14,060
disembodied voice and this is Christoph

00:00:11,510 --> 00:00:17,360
beetle talking about clevis and tang

00:00:14,060 --> 00:00:20,000
just a reminder please put your

00:00:17,360 --> 00:00:23,950
questions on the IRC channel hash

00:00:20,000 --> 00:00:29,900
minilab cough - online on Oh FTC

00:00:23,950 --> 00:00:36,620
preceded by question : in capitals No

00:00:29,900 --> 00:00:39,980
welcome to stuff so thank you ah now

00:00:36,620 --> 00:00:41,510
let's get this show on the road so sorry

00:00:39,980 --> 00:00:43,969
for the good day thanks for waiting

00:00:41,510 --> 00:00:48,289
thanks for the organizers for providing

00:00:43,969 --> 00:00:49,399
yet another slot for me something went

00:00:48,289 --> 00:00:54,129
wrong and we got it fixed

00:00:49,399 --> 00:00:59,719
long story short but this is about

00:00:54,129 --> 00:01:03,559
clevis and tang I think this is

00:00:59,719 --> 00:01:06,890
something where if you know and so hence

00:01:03,559 --> 00:01:09,980
this presentation assuming you never

00:01:06,890 --> 00:01:13,510
really heard about these I'll start with

00:01:09,980 --> 00:01:17,960
a short explanation what they are about

00:01:13,510 --> 00:01:19,550
so clevis stealing from a package

00:01:17,960 --> 00:01:22,390
description clevis is a pluggable

00:01:19,550 --> 00:01:25,820
framework for automated decryption and

00:01:22,390 --> 00:01:30,110
Tang is a server for binding data to

00:01:25,820 --> 00:01:32,030
network presence so I think all

00:01:30,110 --> 00:01:35,600
questions answered in the Queen go back

00:01:32,030 --> 00:01:39,680
hacking those who disagree well I've

00:01:35,600 --> 00:01:42,590
prepared a little more this all is about

00:01:39,680 --> 00:01:44,360
hard disk encryption mostly so I think

00:01:42,590 --> 00:01:48,860
it's a good idea to give a few

00:01:44,360 --> 00:01:51,590
statements in advance why do we do how

00:01:48,860 --> 00:01:55,430
this contraption well it's not because

00:01:51,590 --> 00:01:58,520
we do sinister things but different

00:01:55,430 --> 00:02:01,130
story and quite frankly gdpr or German

00:01:58,520 --> 00:02:03,830
the Esquivel helped us a lot here since

00:02:01,130 --> 00:02:06,770
now we have a perfect excuse

00:02:03,830 --> 00:02:08,629
since this stressed how much

00:02:06,770 --> 00:02:11,420
responsibility you have for other

00:02:08,629 --> 00:02:16,130
people's data on your disk now if you

00:02:11,420 --> 00:02:18,769
lose your disk you may have a problem if

00:02:16,130 --> 00:02:21,379
I ever you can say yes I lost that they

00:02:18,769 --> 00:02:24,530
but the data is unavailable to heaven

00:02:21,379 --> 00:02:26,870
whoever has it now still a lot of

00:02:24,530 --> 00:02:29,200
trouble for you but not trouble with the

00:02:26,870 --> 00:02:32,989
data protection

00:02:29,200 --> 00:02:35,480
how does encryption work well we all

00:02:32,989 --> 00:02:40,459
refer now to looks that's the Linux

00:02:35,480 --> 00:02:43,700
unified key set up initially it created

00:02:40,459 --> 00:02:46,280
in 2004 it underwent a major on this

00:02:43,700 --> 00:02:48,620
format change that was that skillfully

00:02:46,280 --> 00:02:51,549
done thank you guys you barely even

00:02:48,620 --> 00:02:54,849
notice that we are now in version 2 and

00:02:51,549 --> 00:03:00,170
actually current there be unstable

00:02:54,849 --> 00:03:02,720
already uses the new format by default I

00:03:00,170 --> 00:03:08,000
will not going to discuss I will not go

00:03:02,720 --> 00:03:09,519
to do discuss the area of ciphers key

00:03:08,000 --> 00:03:12,920
lengths and all that stuff that's

00:03:09,519 --> 00:03:15,230
low-level cryptography completely

00:03:12,920 --> 00:03:20,450
different story and honestly not needed

00:03:15,230 --> 00:03:22,669
here we just rely on looks we have a

00:03:20,450 --> 00:03:27,250
passphrase we hand over to looks that

00:03:22,669 --> 00:03:31,430
will open the device and we're fine and

00:03:27,250 --> 00:03:34,519
mandatory xkcd reference those who know

00:03:31,430 --> 00:03:37,430
you should know it by number even that's

00:03:34,519 --> 00:03:39,980
the number five three eight if you need

00:03:37,430 --> 00:03:43,639
a short reminder I'll present it for a

00:03:39,980 --> 00:03:46,579
second that's honestly a not so funny

00:03:43,639 --> 00:03:48,949
story just because your data is

00:03:46,579 --> 00:03:52,790
encrypted does not mean your data is

00:03:48,949 --> 00:03:54,919
secure against everybody and if you're

00:03:52,790 --> 00:03:57,889
dealing some with someone who is reflets

00:03:54,919 --> 00:04:01,280
enough to break the laws or make the

00:03:57,889 --> 00:04:04,099
boss sometimes no big difference

00:04:01,280 --> 00:04:05,870
they will as always attack the weakest

00:04:04,099 --> 00:04:12,049
chain in your encryption scheme and that

00:04:05,870 --> 00:04:15,349
is you so brute force can be used

00:04:12,049 --> 00:04:17,539
against algorithms or and can be used

00:04:15,349 --> 00:04:21,019
against person as well against people as

00:04:17,539 --> 00:04:26,479
well not funny at all but just keep this

00:04:21,019 --> 00:04:28,969
in mind all the time so however I when I

00:04:26,479 --> 00:04:32,139
created this presentation I said we have

00:04:28,969 --> 00:04:35,080
an unlocking problem

00:04:32,139 --> 00:04:37,330
and it boils down to we have this

00:04:35,080 --> 00:04:42,699
passphrase that will open the looks

00:04:37,330 --> 00:04:45,189
partition and that passphrase must be

00:04:42,699 --> 00:04:48,430
accessible only to those who are allowed

00:04:45,189 --> 00:04:51,120
to actually use the machine else you

00:04:48,430 --> 00:04:55,180
completely defeat the idea of encryption

00:04:51,120 --> 00:04:59,469
so we have now an encrypted disk and it

00:04:55,180 --> 00:05:02,050
boots up and somehow we have to bring

00:04:59,469 --> 00:05:04,599
that passphrase to the machine if it's

00:05:02,050 --> 00:05:08,259
your computer your notebook right before

00:05:04,599 --> 00:05:10,240
you no big deal you can wait for a

00:05:08,259 --> 00:05:12,849
prompt to happen and then you can enter

00:05:10,240 --> 00:05:14,979
your passphrase if you have a single

00:05:12,849 --> 00:05:17,770
remote machine you can use techniques

00:05:14,979 --> 00:05:20,229
like drop it in a drum if s that

00:05:17,770 --> 00:05:23,349
provides the SSH server where you can

00:05:20,229 --> 00:05:27,330
log into and do quite the same however

00:05:23,349 --> 00:05:30,939
this doesn't scale and this all is about

00:05:27,330 --> 00:05:32,949
automating the pros this process and so

00:05:30,939 --> 00:05:36,580
easily do it for hundred or even

00:05:32,949 --> 00:05:40,089
thousands of machines another approach

00:05:36,580 --> 00:05:42,400
is to store the secret on a second

00:05:40,089 --> 00:05:46,529
medium not secret the passphrase I'm

00:05:42,400 --> 00:05:49,240
sorry so like a USB flash drive and

00:05:46,529 --> 00:05:52,960
instructed the bootloader to look for

00:05:49,240 --> 00:05:54,729
that secret over there works works like

00:05:52,960 --> 00:05:58,060
a charm actually I'm still using this in

00:05:54,729 --> 00:06:00,729
some places this is fine if your only

00:05:58,060 --> 00:06:04,110
concern is that your disc is dying and

00:06:00,729 --> 00:06:07,599
you want to throw it away or RMA it

00:06:04,110 --> 00:06:11,199
since without that medium that holds the

00:06:07,599 --> 00:06:14,259
encryption key the passphrase whoever

00:06:11,199 --> 00:06:18,279
has the disk can not benefit from the

00:06:14,259 --> 00:06:21,580
data on it it's however is a bit of a

00:06:18,279 --> 00:06:23,879
problem if somebody steals your entire

00:06:21,580 --> 00:06:27,310
computer with that flash drive connected

00:06:23,879 --> 00:06:29,620
and possibly it might be a problem if

00:06:27,310 --> 00:06:31,569
you have many many machines because this

00:06:29,620 --> 00:06:34,839
means dealing with more hardware and all

00:06:31,569 --> 00:06:39,219
that is along comes along so sampling

00:06:34,839 --> 00:06:41,709
sequence so you might want to how shall

00:06:39,219 --> 00:06:45,180
I say to have that's that passphrase

00:06:41,709 --> 00:06:45,180
storage as a service

00:06:45,580 --> 00:06:52,240
and put it on some special server that

00:06:49,240 --> 00:06:53,889
holds the passphrase and not for you but

00:06:52,240 --> 00:06:56,259
over all other machines in your data

00:06:53,889 --> 00:06:58,810
center and when you need it you can

00:06:56,259 --> 00:07:01,689
fetch it from there this goes by the

00:06:58,810 --> 00:07:05,620
name of key escrow and I cannot stress

00:07:01,689 --> 00:07:08,080
enough that this is a horrible idea it

00:07:05,620 --> 00:07:10,599
is possible to do it but I strongly

00:07:08,080 --> 00:07:12,580
advised against it so first you may not

00:07:10,599 --> 00:07:16,449
assume that your network is clean in

00:07:12,580 --> 00:07:19,419
2020 so you have to implement some kind

00:07:16,449 --> 00:07:22,690
of transport protection that's possibly

00:07:19,419 --> 00:07:25,539
a TLS you'll have to implement identity

00:07:22,690 --> 00:07:28,030
management possibly x.509 certificates

00:07:25,539 --> 00:07:31,120
so you have a certificate authority you

00:07:28,030 --> 00:07:33,250
have private keys a few things more

00:07:31,120 --> 00:07:36,460
eventually you have authentication then

00:07:33,250 --> 00:07:40,810
you need authorization yadda yadda yadda

00:07:36,460 --> 00:07:43,449
and in the end still that server has way

00:07:40,810 --> 00:07:46,419
too much knowledge about your network

00:07:43,449 --> 00:07:49,539
and your machines and therefore it will

00:07:46,419 --> 00:07:51,699
possibly the first goal for someone who

00:07:49,539 --> 00:07:56,430
is really interested in getting into

00:07:51,699 --> 00:08:01,150
your data center so long story short no

00:07:56,430 --> 00:08:03,699
Clarice and Tang try to find another

00:08:01,150 --> 00:08:07,839
approach for this problem and I think

00:08:03,699 --> 00:08:13,000
it's quite cool so first let me give you

00:08:07,839 --> 00:08:16,229
a big picture about this and it's a tart

00:08:13,000 --> 00:08:21,969
simple clever ease it's just a program

00:08:16,229 --> 00:08:29,020
that encrypts or decrypt message bake

00:08:21,969 --> 00:08:33,039
big deal why this is later clevis gets a

00:08:29,020 --> 00:08:37,659
little help from other programs and tang

00:08:33,039 --> 00:08:42,760
is one of them and now the connection

00:08:37,659 --> 00:08:44,680
with looks below box passphrase can be

00:08:42,760 --> 00:08:49,029
something that clevis encrypts as well

00:08:44,680 --> 00:08:53,920
later decrypt and so we can unlock the

00:08:49,029 --> 00:08:56,790
disk again and one design point is this

00:08:53,920 --> 00:09:02,580
is all about automating things

00:08:56,790 --> 00:09:03,990
so for setting up this manual inter

00:09:02,580 --> 00:09:06,720
interaction might be needed but

00:09:03,990 --> 00:09:10,490
decrypting should happened with should

00:09:06,720 --> 00:09:13,950
be possible without any intervention

00:09:10,490 --> 00:09:17,520
growing a bit more into detail and this

00:09:13,950 --> 00:09:20,820
is clevis so for the moment completely

00:09:17,520 --> 00:09:25,770
forget looks this is just about clevis

00:09:20,820 --> 00:09:29,580
we have clevis has a message thus and

00:09:25,770 --> 00:09:32,160
gets plaintext and we can encrypt it

00:09:29,580 --> 00:09:34,950
into some encrypted message and of

00:09:32,160 --> 00:09:37,710
course the reverse operation this is a

00:09:34,950 --> 00:09:41,520
symmetric encryption nothing new at all

00:09:37,710 --> 00:09:44,790
here perhaps just one thing when you

00:09:41,520 --> 00:09:49,020
might see I wrote a jwe to the critic

00:09:44,790 --> 00:09:52,400
describe the encrypted part that's a

00:09:49,020 --> 00:09:54,960
JSON web object this comes from the

00:09:52,400 --> 00:10:01,280
suite called JavaScript object notation

00:09:54,960 --> 00:10:07,290
and encryption or short Cosi Cosi Cosi

00:10:01,280 --> 00:10:10,050
this is a set of RFC's that describe how

00:10:07,290 --> 00:10:12,170
to store the bits and bytes related to

00:10:10,050 --> 00:10:14,730
cryptographic operation in Jason

00:10:12,170 --> 00:10:19,760
something for people who hate a s and

00:10:14,730 --> 00:10:22,590
not one like me and clevis uses this to

00:10:19,760 --> 00:10:29,070
handle the keys encryption all that

00:10:22,590 --> 00:10:31,950
stuff as well eventually josè the actual

00:10:29,070 --> 00:10:35,070
encryption operation oh yes there is a

00:10:31,950 --> 00:10:38,340
package by that name guess who that

00:10:35,070 --> 00:10:41,790
provides a program or suite of programs

00:10:38,340 --> 00:10:44,550
that do all the required operation

00:10:41,790 --> 00:10:49,950
especially encryption decryption using a

00:10:44,550 --> 00:10:52,260
provided key and parameters in the end

00:10:49,950 --> 00:10:56,250
all this is open SSL Josias just a

00:10:52,260 --> 00:11:00,570
wrapper for it now with every encryption

00:10:56,250 --> 00:11:04,890
we have this problem when there is this

00:11:00,570 --> 00:11:07,110
key and if you have the key you can

00:11:04,890 --> 00:11:10,000
decrypt the message so you have to keep

00:11:07,110 --> 00:11:12,070
the key somewhat confidential

00:11:10,000 --> 00:11:14,500
same problem as previously it's just has

00:11:12,070 --> 00:11:19,150
been just moved a bit around so how does

00:11:14,500 --> 00:11:22,240
clevis solve this problem clevis does a

00:11:19,150 --> 00:11:25,140
ball move it doesn't care it doesn't

00:11:22,240 --> 00:11:28,030
have to instead

00:11:25,140 --> 00:11:32,290
Clavis moves the problem yet another

00:11:28,030 --> 00:11:36,310
step away and this is something called a

00:11:32,290 --> 00:11:41,740
pin so when I said helpers that is what

00:11:36,310 --> 00:11:44,590
the pin does so now what is a pin the

00:11:41,740 --> 00:11:49,840
pin does the operation I previously

00:11:44,590 --> 00:11:53,380
mentioned it transforms it gets the

00:11:49,840 --> 00:11:57,010
plaintext it somehow gets the key

00:11:53,380 --> 00:12:00,820
usually it is randomly generated does

00:11:57,010 --> 00:12:03,760
the encryptions or tells JC Joe Hosey to

00:12:00,820 --> 00:12:06,720
do the encryption and then that's the

00:12:03,760 --> 00:12:09,790
logic of a pin Play stores the key

00:12:06,720 --> 00:12:12,150
somewhere where it can be found later

00:12:09,790 --> 00:12:15,550
and that later is of course a decryption

00:12:12,150 --> 00:12:21,220
then the pin gets the encrypted part

00:12:15,550 --> 00:12:23,680
that's a jwe the key the pin has to find

00:12:21,220 --> 00:12:28,930
the key weight has been stored earlier

00:12:23,680 --> 00:12:33,280
and can use that to decrypt so job of a

00:12:28,930 --> 00:12:35,800
pin is somehow manage the key and a

00:12:33,280 --> 00:12:38,140
really simple example it exists as a

00:12:35,800 --> 00:12:40,690
proof of concept somewhere is just to

00:12:38,140 --> 00:12:42,850
store it in a file hopefully I don't

00:12:40,690 --> 00:12:46,390
have to tell that this is not the best

00:12:42,850 --> 00:12:52,900
idea but it is something you can easily

00:12:46,390 --> 00:12:57,730
imagine now one step further into this

00:12:52,900 --> 00:13:01,720
whole story is Tang Tang is an

00:12:57,730 --> 00:13:04,030
implementation of such a pin and when I

00:13:01,720 --> 00:13:07,390
just mentioned the file pin there is a

00:13:04,030 --> 00:13:10,240
really really simple one Tang is quite

00:13:07,390 --> 00:13:14,020
at the end in hand it is quite frankly

00:13:10,240 --> 00:13:19,750
mind-blowing so let me start with the

00:13:14,020 --> 00:13:22,180
features of Tang tang is a pin so it has

00:13:19,750 --> 00:13:23,410
to store the key somewhere no it does

00:13:22,180 --> 00:13:29,829
not

00:13:23,410 --> 00:13:34,979
let me repeat the key is used to encrypt

00:13:29,829 --> 00:13:38,139
the input and then discard it

00:13:34,979 --> 00:13:40,449
however something else is kept and that

00:13:38,139 --> 00:13:45,159
is a bit of information that we somehow

00:13:40,449 --> 00:13:47,619
derived from the key using certain

00:13:45,159 --> 00:13:50,349
cryptographic functions and possibly you

00:13:47,619 --> 00:13:53,220
know that game a function that cannot be

00:13:50,349 --> 00:13:57,309
reversed so it is not possible to

00:13:53,220 --> 00:14:01,720
recreate the actual key from that

00:13:57,309 --> 00:14:07,149
derived information still this will not

00:14:01,720 --> 00:14:12,399
help us however it is possible to now

00:14:07,149 --> 00:14:14,379
suddenly to recreate that key trapdoor

00:14:12,399 --> 00:14:16,499
is this called if you get a little

00:14:14,379 --> 00:14:20,949
cryptographic help from somewhere else

00:14:16,499 --> 00:14:25,119
from another instance but that other is

00:14:20,949 --> 00:14:27,489
instance doesn't have the key either so

00:14:25,119 --> 00:14:31,389
it seems like out of thin air some lead

00:14:27,489 --> 00:14:36,249
and the this holy key reappears out of

00:14:31,389 --> 00:14:40,119
the blue you may ask yourself how can

00:14:36,249 --> 00:14:45,999
this ever work some of you may think

00:14:40,119 --> 00:14:49,869
that this sounds a bit familiar in I

00:14:45,999 --> 00:14:53,429
have seen parts of this before there is

00:14:49,869 --> 00:14:53,429
a few congratulations

00:14:53,579 --> 00:14:58,449
you know it if there is a story that is

00:14:56,319 --> 00:15:02,829
quite related and you hopefully had this

00:14:58,449 --> 00:15:07,359
in school is this el-gamal or a

00:15:02,829 --> 00:15:09,399
symmetric encryption and although this

00:15:07,359 --> 00:15:12,989
is not what we want it's fairly similar

00:15:09,399 --> 00:15:18,669
so I'd like to give a quick walk through

00:15:12,989 --> 00:15:21,879
elder mo this is like Alice has a secret

00:15:18,669 --> 00:15:24,519
message she wishes to send to buck but

00:15:21,879 --> 00:15:27,339
the transport cannot be trusted so it's

00:15:24,519 --> 00:15:29,379
not that easy however now what else can

00:15:27,339 --> 00:15:32,979
do and you should remember this

00:15:29,379 --> 00:15:35,079
Ellis creates a key pair key pair is two

00:15:32,979 --> 00:15:37,449
numbers two big numbers that are somehow

00:15:35,079 --> 00:15:39,639
related in a certain way

00:15:37,449 --> 00:15:43,839
one is called private the other one is

00:15:39,639 --> 00:15:46,089
public key point is the public key will

00:15:43,839 --> 00:15:48,069
be public and it is not possible to

00:15:46,089 --> 00:15:52,569
derive the private key from the public

00:15:48,069 --> 00:15:56,079
one Bob does quite the same and then

00:15:52,569 --> 00:15:58,799
Ellis can create something that is being

00:15:56,079 --> 00:16:01,209
derived from the original secret message

00:15:58,799 --> 00:16:04,720
again a function that cannot be reversed

00:16:01,209 --> 00:16:06,850
and part of the ingredients of this

00:16:04,720 --> 00:16:09,939
operation are of course the private

00:16:06,850 --> 00:16:14,589
message Alice's private key Bob's public

00:16:09,939 --> 00:16:16,959
key and s is not possible to create to

00:16:14,589 --> 00:16:18,899
restore either the secret key the my

00:16:16,959 --> 00:16:21,480
secret message nor Bob's public key

00:16:18,899 --> 00:16:25,359
alice can happily publish this and

00:16:21,480 --> 00:16:28,029
eventually bring this to Bob Bob however

00:16:25,359 --> 00:16:32,499
has another bit of information that is

00:16:28,029 --> 00:16:35,739
his private key and this is allowed him

00:16:32,499 --> 00:16:38,619
to in a way eliminate what Alice's

00:16:35,739 --> 00:16:41,939
private key did to the operation

00:16:38,619 --> 00:16:45,639
everything else Bob has at hand and

00:16:41,939 --> 00:16:49,149
therefore Bob can restore the secret

00:16:45,639 --> 00:16:51,970
message and now be honest when you saw

00:16:49,149 --> 00:16:54,939
this for the first time you stared at it

00:16:51,970 --> 00:16:55,679
in this belief and say this cannot be

00:16:54,939 --> 00:17:00,609
possible

00:16:55,679 --> 00:17:03,309
didn't you but hopefully you'll get used

00:17:00,609 --> 00:17:07,600
to it since you possibly use this every

00:17:03,309 --> 00:17:09,539
day so this is El Gamal and I'm but as I

00:17:07,600 --> 00:17:13,329
said this is not what we're looking for

00:17:09,539 --> 00:17:15,669
we have a different scenario Alice now

00:17:13,329 --> 00:17:21,610
has the secret message and wants to send

00:17:15,669 --> 00:17:26,529
it back for herself and it should

00:17:21,610 --> 00:17:30,299
comfort you to learn that the first six

00:17:26,529 --> 00:17:33,700
first five steps are exactly the same

00:17:30,299 --> 00:17:36,130
bitwise the same and the sixth step is

00:17:33,700 --> 00:17:38,889
almost the same it's just Alice does not

00:17:36,130 --> 00:17:42,639
send the encrypted message around but

00:17:38,889 --> 00:17:47,940
keeps it since the goal is Ellis wishes

00:17:42,639 --> 00:17:47,940
to recreate the secret message somehow

00:17:48,179 --> 00:17:54,780
one way to do is

00:17:50,680 --> 00:17:59,580
Ellis could ask Bob for private key

00:17:54,780 --> 00:18:02,980
somehow this is not acceptable

00:17:59,580 --> 00:18:04,890
what however Ellis can do and this is

00:18:02,980 --> 00:18:08,410
new

00:18:04,890 --> 00:18:13,660
Ellis now can create another number

00:18:08,410 --> 00:18:16,960
actually two of them one day again are

00:18:13,660 --> 00:18:20,140
somehow related send that number to Bob

00:18:16,960 --> 00:18:22,600
ask Bob to do again one of these

00:18:20,140 --> 00:18:25,150
cryptographic operations that involve

00:18:22,600 --> 00:18:28,120
the number Ellis Geist sent and Bob's

00:18:25,150 --> 00:18:32,440
private key and Bob sends the result

00:18:28,120 --> 00:18:35,560
back to Ellis and again it is not

00:18:32,440 --> 00:18:38,190
possible to crew to recreate Bob's

00:18:35,560 --> 00:18:40,720
private key so that is not in danger

00:18:38,190 --> 00:18:43,420
however we have now a situation that's

00:18:40,720 --> 00:18:48,880
like the previous one just with sides

00:18:43,420 --> 00:18:55,450
flipped so as a result now Ellis can

00:18:48,880 --> 00:18:59,220
eliminate what Bob put into the initial

00:18:55,450 --> 00:19:01,810
encryption and that was his public key

00:18:59,220 --> 00:19:03,820
and this is the part where you can

00:19:01,810 --> 00:19:06,310
happily ask a cryptographer whether it

00:19:03,820 --> 00:19:10,360
is is whether this makes sense

00:19:06,310 --> 00:19:15,550
I hope so in the end however now Ellis

00:19:10,360 --> 00:19:19,200
again has the secret message and this is

00:19:15,550 --> 00:19:21,430
what we have been looking for so

00:19:19,200 --> 00:19:23,590
hopefully this was not too much

00:19:21,430 --> 00:19:26,350
cryptography but I think it is important

00:19:23,590 --> 00:19:29,530
if you deal with cryptography you should

00:19:26,350 --> 00:19:31,930
have least a some idea of what's

00:19:29,530 --> 00:19:36,610
happening under the hood else you might

00:19:31,930 --> 00:19:39,610
even accidentally completely defeat the

00:19:36,610 --> 00:19:42,700
secret security of what you are doing

00:19:39,610 --> 00:19:47,920
here from now and it's about to get

00:19:42,700 --> 00:19:54,220
easier so putting this into this model

00:19:47,920 --> 00:19:58,680
of the pin Tang of the Tang pin we need

00:19:54,220 --> 00:19:58,680
the server the server takes Bob's role

00:19:59,100 --> 00:20:04,540
the server will happily publish or hand

00:20:03,220 --> 00:20:07,090
out here

00:20:04,540 --> 00:20:09,100
the server has a key pair of course and

00:20:07,090 --> 00:20:13,290
the server will happily hand out the

00:20:09,100 --> 00:20:20,130
public key and in order to later

00:20:13,290 --> 00:20:24,040
recreate that message Alice or the pin

00:20:20,130 --> 00:20:28,680
sense to us to itself it is required

00:20:24,040 --> 00:20:32,800
that this server must be in reach and

00:20:28,680 --> 00:20:35,740
nowadays the design to say this tank

00:20:32,800 --> 00:20:40,060
server is by design not worldwide

00:20:35,740 --> 00:20:43,330
reachable instead it's just in very

00:20:40,060 --> 00:20:45,400
limited reach ability like within the

00:20:43,330 --> 00:20:48,940
data center or within your office

00:20:45,400 --> 00:20:52,480
network or something like that since

00:20:48,940 --> 00:20:56,350
then and only then if your computer you

00:20:52,480 --> 00:20:58,450
wish to unlock eventually is within that

00:20:56,350 --> 00:21:01,210
network communication with the tank

00:20:58,450 --> 00:21:04,360
server is possible eventually all the

00:21:01,210 --> 00:21:07,300
chain-up it will be possible to recreate

00:21:04,360 --> 00:21:12,040
the encryption passphrase to unlock and

00:21:07,300 --> 00:21:17,650
proceed now this tank server I'd like to

00:21:12,040 --> 00:21:20,020
mention is nice because it is really

00:21:17,650 --> 00:21:23,110
really simple it and actually it's even

00:21:20,020 --> 00:21:26,110
stateless it's the servitors two things

00:21:23,110 --> 00:21:29,560
a test who calls the one is please give

00:21:26,110 --> 00:21:33,250
me your public key and the other one is

00:21:29,560 --> 00:21:34,660
here's a number please do that you

00:21:33,250 --> 00:21:36,850
previously defined cryptographic

00:21:34,660 --> 00:21:39,700
operation with your private key and send

00:21:36,850 --> 00:21:43,510
me back the result none of these is

00:21:39,700 --> 00:21:45,640
really complex and it can be done

00:21:43,510 --> 00:21:48,580
without any knowledge of the client so

00:21:45,640 --> 00:21:52,810
there is no database either it is just

00:21:48,580 --> 00:21:54,910
small and cheap and if you have an old

00:21:52,810 --> 00:21:56,710
first-generation Raspberry Pi running

00:21:54,910 --> 00:21:59,640
around lying around you could use it for

00:21:56,710 --> 00:22:04,930
that purpose it will be bored to tears

00:21:59,640 --> 00:22:08,080
and at the same time you can and you

00:22:04,930 --> 00:22:10,960
should use more of them how that works

00:22:08,080 --> 00:22:12,909
in a moment but right now I think I did

00:22:10,960 --> 00:22:16,440
a lot of talking

00:22:12,909 --> 00:22:22,450
I should take the time to do some

00:22:16,440 --> 00:22:26,080
presentation and let's have a look what

00:22:22,450 --> 00:22:28,330
I have prepared I have been told that it

00:22:26,080 --> 00:22:34,389
is a little bit too small to be good

00:22:28,330 --> 00:22:36,700
readable anyway I'll zoom into one of

00:22:34,389 --> 00:22:39,609
those screens when necessary just give

00:22:36,700 --> 00:22:42,340
you an explanation what we have on the

00:22:39,609 --> 00:22:45,809
top left is the tanks services Locke

00:22:42,340 --> 00:22:49,960
also requests will be locked there on

00:22:45,809 --> 00:22:52,440
the bottom left this is just TCP dump

00:22:49,960 --> 00:22:56,859
running showing activity on the network

00:22:52,440 --> 00:23:00,580
bottom right will lean lighter and top

00:22:56,859 --> 00:23:03,129
right is stressed a shell on another

00:23:00,580 --> 00:23:06,840
machine and actually I don't even need

00:23:03,129 --> 00:23:11,820
root privileges so let's drop them and

00:23:06,840 --> 00:23:15,190
now encrypting a message using clevis is

00:23:11,820 --> 00:23:17,919
well no big deal you say clevis encrypt

00:23:15,190 --> 00:23:21,669
you say what kind of pin you want to use

00:23:17,919 --> 00:23:26,799
this is a tank pin next is a bit awkward

00:23:21,669 --> 00:23:30,539
the configuration is a JSON object

00:23:26,799 --> 00:23:34,479
on the command line so you have to quote

00:23:30,539 --> 00:23:38,049
it's a good idea since such times that's

00:23:34,479 --> 00:23:41,080
such in configurations can become fairly

00:23:38,049 --> 00:23:45,399
complex so it's a good idea to have

00:23:41,080 --> 00:23:47,259
something that is extensible and this

00:23:45,399 --> 00:23:50,049
all works in a pipe so now we need a

00:23:47,259 --> 00:23:56,099
secret message that we want to encrypt

00:23:50,049 --> 00:23:56,099
so let me up make me up something like

00:24:07,700 --> 00:24:12,769
and what's happening now you see the

00:24:11,179 --> 00:24:15,260
tanks sir there has been some activity

00:24:12,769 --> 00:24:17,980
in the network oh I forgot I wanted to

00:24:15,260 --> 00:24:22,610
zoom that so that's a bit in bigger

00:24:17,980 --> 00:24:24,350
that's already pocket you've missed you

00:24:22,610 --> 00:24:27,110
can see there has been some activity in

00:24:24,350 --> 00:24:28,730
the network and there has been a so this

00:24:27,110 --> 00:24:31,940
was actually a request to the tank

00:24:28,730 --> 00:24:34,340
surveen now one time we have to confirm

00:24:31,940 --> 00:24:36,909
the identity of the tank server because

00:24:34,340 --> 00:24:39,490
that might else be an issue for our

00:24:36,909 --> 00:24:44,269
place where men in the middle might

00:24:39,490 --> 00:24:46,159
might happen so the server presents some

00:24:44,269 --> 00:24:48,470
kind of fingerprint you notice from the

00:24:46,159 --> 00:24:52,990
secure shell client so you do have to

00:24:48,470 --> 00:24:56,360
trust that one and we do and we're done

00:24:52,990 --> 00:24:59,179
you might have noticed there is no

00:24:56,360 --> 00:25:04,000
further network activity so the result

00:24:59,179 --> 00:25:07,429
of this operation is completely local

00:25:04,000 --> 00:25:10,730
let's have a look into this it got a

00:25:07,429 --> 00:25:15,710
little breaker so you see the original

00:25:10,730 --> 00:25:21,730
message with just say 20 30 bytes this

00:25:15,710 --> 00:25:24,260
is well partly because that's that's bad

00:25:21,730 --> 00:25:27,769
having a hack stamp we see this is a lot

00:25:24,260 --> 00:25:30,919
of currently base64 encoding there's an

00:25:27,769 --> 00:25:32,630
additional framing that's jwe I'm not

00:25:30,919 --> 00:25:43,450
going to explain this in detail just

00:25:32,630 --> 00:25:43,450
show you the first first record in this

00:25:48,220 --> 00:25:53,360
just right now I don't I did I would

00:25:51,710 --> 00:25:56,090
chose s that's wrong it should have been

00:25:53,360 --> 00:25:58,909
an e but it'll stay this way so this is

00:25:56,090 --> 00:26:01,190
space 64 let's decode it to let practice

00:25:58,909 --> 00:26:05,450
for JQ and and since I know it's a bit

00:26:01,190 --> 00:26:07,039
bigger I'll pop it less and I'm not

00:26:05,450 --> 00:26:10,940
going to plan explain everything here

00:26:07,039 --> 00:26:16,519
that's not needed but that is what jwe

00:26:10,940 --> 00:26:17,910
needs to understand how encryption had

00:26:16,519 --> 00:26:20,910
been done

00:26:17,910 --> 00:26:23,940
and so you have some algorithms and

00:26:20,910 --> 00:26:25,800
stuff and then clevis has a section in

00:26:23,940 --> 00:26:29,520
here for example the definition that

00:26:25,800 --> 00:26:31,110
says okay the pin used was tang and Tang

00:26:29,520 --> 00:26:34,350
dropped a lot of private information

00:26:31,110 --> 00:26:36,240
there are keys here you have my guess

00:26:34,350 --> 00:26:38,250
where they come from every day with

00:26:36,240 --> 00:26:42,600
arrived from and eventually the address

00:26:38,250 --> 00:26:44,940
of the Tang survey itself so the

00:26:42,600 --> 00:26:48,860
decryption now therefore is really

00:26:44,940 --> 00:26:56,640
really simple we just say clevis decrypt

00:26:48,860 --> 00:26:58,890
and read from that encrypted object and

00:26:56,640 --> 00:27:01,520
now I'll zoom back because now we'll

00:26:58,890 --> 00:27:05,250
have again some network activity I

00:27:01,520 --> 00:27:09,960
haven't started yet just preparing so

00:27:05,250 --> 00:27:12,600
now if I say I want to be crypt you see

00:27:09,960 --> 00:27:15,240
there has been some activity on the net

00:27:12,600 --> 00:27:20,010
this was a post request to the Tang

00:27:15,240 --> 00:27:22,800
server and the result allowed clevis to

00:27:20,010 --> 00:27:27,660
decrypt the secret message oh by the way

00:27:22,800 --> 00:27:29,610
don't ever tell it anyone so now I'm on

00:27:27,660 --> 00:27:38,550
the Tang server as well I can't just

00:27:29,610 --> 00:27:40,980
stop it if now I try to equipped secret

00:27:38,550 --> 00:27:44,670
I will fail because the connection to

00:27:40,980 --> 00:27:47,940
the server was interrupted just one bit

00:27:44,670 --> 00:27:51,060
I didn't mention the transport is in the

00:27:47,940 --> 00:27:53,450
eight plaintext HTTP but since the

00:27:51,060 --> 00:27:56,640
payload now is some cryptographic

00:27:53,450 --> 00:28:01,410
objects signed and all that stuff that's

00:27:56,640 --> 00:28:03,510
ok ish if you want to you can put HTTP

00:28:01,410 --> 00:28:16,590
on top of this but I think it is not

00:28:03,510 --> 00:28:19,650
necessary so black to the slides this is

00:28:16,590 --> 00:28:21,060
not the entire show of clevis it's just

00:28:19,650 --> 00:28:22,590
the start

00:28:21,060 --> 00:28:26,280
you might remember there was this word

00:28:22,590 --> 00:28:30,060
pluggable it is possible to have other

00:28:26,280 --> 00:28:30,540
pins instead of this tang although tanks

00:28:30,060 --> 00:28:33,810
certainly

00:28:30,540 --> 00:28:36,030
nice one right now there are not that

00:28:33,810 --> 00:28:40,050
many I'm in a process of changing this

00:28:36,030 --> 00:28:42,330
so the one that we have remember the job

00:28:40,050 --> 00:28:44,780
of a pin is to somehow hide an

00:28:42,330 --> 00:28:48,120
encryption key and to restore it later

00:28:44,780 --> 00:28:51,000
one way to do is is when a supported way

00:28:48,120 --> 00:29:03,150
is TPM so if your system has a TPM chip

00:28:51,000 --> 00:29:05,640
in or 10 minutes tomatoe sorry so you

00:29:03,150 --> 00:29:08,670
can store the secret in that TPM chip

00:29:05,640 --> 00:29:10,320
and later restore it as I said more to

00:29:08,670 --> 00:29:13,640
come for example if you want to store it

00:29:10,320 --> 00:29:16,830
on an external again USB flash drive

00:29:13,640 --> 00:29:20,540
that's waiting upstream we're in a pull

00:29:16,830 --> 00:29:23,340
request now these are possibly not that

00:29:20,540 --> 00:29:26,550
great but the other interesting thing

00:29:23,340 --> 00:29:29,910
you can do is you can combine them so

00:29:26,550 --> 00:29:32,250
with some redundancy so if you have

00:29:29,910 --> 00:29:35,810
that's what has just said you can set up

00:29:32,250 --> 00:29:40,830
set up several say tank service and say

00:29:35,810 --> 00:29:43,560
well I have free and I'm fine if I can

00:29:40,830 --> 00:29:47,460
and now let mother worrying

00:29:43,560 --> 00:29:49,890
let's spread that key among those free

00:29:47,460 --> 00:29:51,540
tank service in a way that it's

00:29:49,890 --> 00:29:54,030
sufficient to have a successful

00:29:51,540 --> 00:29:56,840
communication with two of them with any

00:29:54,030 --> 00:29:59,550
two of them and I can restore it

00:29:56,840 --> 00:30:02,760
likewise I can also do stacking so I

00:29:59,550 --> 00:30:07,830
could implement something like I either

00:30:02,760 --> 00:30:11,880
I can get it from a TPM chip or from any

00:30:07,830 --> 00:30:14,400
two of three tank servers and you can go

00:30:11,880 --> 00:30:17,250
further from there I've seen a set up

00:30:14,400 --> 00:30:19,170
that went down four levels and it had a

00:30:17,250 --> 00:30:21,690
complaint explanation why it was done

00:30:19,170 --> 00:30:25,200
this way I'm not going to repeat it

00:30:21,690 --> 00:30:28,260
because honestly I already forgot just

00:30:25,200 --> 00:30:30,270
one point I mentioned this is something

00:30:28,260 --> 00:30:33,660
not new at all that is Shamir's secret

00:30:30,270 --> 00:30:38,760
sharing quite a bit old and yes ramier

00:30:33,660 --> 00:30:41,370
is the s in RSA and another point worth

00:30:38,760 --> 00:30:44,400
to mention clevis is about encrypting a

00:30:41,370 --> 00:30:46,230
message and wherever you want to

00:30:44,400 --> 00:30:50,060
prep the message you can use it although

00:30:46,230 --> 00:30:52,860
for personal messages I'd stick to GPG

00:30:50,060 --> 00:30:56,460
but perhaps everywhere you want to store

00:30:52,860 --> 00:30:59,700
a passphrase you can instead of typing

00:30:56,460 --> 00:31:03,060
and manually use clevis so for example

00:30:59,700 --> 00:31:05,370
GPG has the possibility to provide the

00:31:03,060 --> 00:31:07,530
passphrase wire a file handle

00:31:05,370 --> 00:31:13,620
I haven't even tested I'm highly

00:31:07,530 --> 00:31:15,600
confident this is possible so I'll skip

00:31:13,620 --> 00:31:18,870
the emotive order for time reasons I'll

00:31:15,600 --> 00:31:23,820
just explain now going one up another

00:31:18,870 --> 00:31:26,310
level how to integrate this into looks

00:31:23,820 --> 00:31:30,480
so you have a Lux petition and you want

00:31:26,310 --> 00:31:34,590
to use clevis possibly Tang it goes as

00:31:30,480 --> 00:31:36,360
follows you create your looks petition

00:31:34,590 --> 00:31:40,110
as usual and you provide an initial

00:31:36,360 --> 00:31:44,220
passphrase then you bind that's how it's

00:31:40,110 --> 00:31:46,860
called that that device to looks you

00:31:44,220 --> 00:31:49,740
provide in order to do so you have to

00:31:46,860 --> 00:31:52,400
provide the pin you wish to use the pins

00:31:49,740 --> 00:31:55,710
configuration you have seen this before

00:31:52,400 --> 00:32:00,540
then clevis will create another looks

00:31:55,710 --> 00:32:04,230
passphrase and encrypt that passphrase

00:32:00,540 --> 00:32:07,020
using the configured pin or pins however

00:32:04,230 --> 00:32:10,320
this is done and this results in an

00:32:07,020 --> 00:32:13,440
encrypted pass phrase that is stored in

00:32:10,320 --> 00:32:16,290
the header of this looks petition

00:32:13,440 --> 00:32:19,020
there's a place for this unlocking now

00:32:16,290 --> 00:32:21,200
is straightforward you just tell clevis

00:32:19,020 --> 00:32:25,320
you wish to unlock a certain device a

00:32:21,200 --> 00:32:27,140
clevis locates that encrypted pass

00:32:25,320 --> 00:32:31,260
phrase in the header does the decryption

00:32:27,140 --> 00:32:33,510
results in the looks passphrase and this

00:32:31,260 --> 00:32:37,560
is handed over to crypt set up to do the

00:32:33,510 --> 00:32:40,830
unlocking you seldom do this by hand

00:32:37,560 --> 00:32:43,830
because we have some integration or

00:32:40,830 --> 00:32:47,040
automated creation around it so from an

00:32:43,830 --> 00:32:50,400
inner drum FS are formed record we have

00:32:47,040 --> 00:32:52,950
system lis support and also u disks to

00:32:50,400 --> 00:32:55,280
so the France of desktop environments

00:32:52,950 --> 00:32:59,000
can just happily click somewhere

00:32:55,280 --> 00:33:04,670
and that somehow magically the disk is

00:32:59,000 --> 00:33:07,340
usable so um I skipped demo too but I

00:33:04,670 --> 00:33:09,770
want to show you they more free which is

00:33:07,340 --> 00:33:14,030
now the holy grail we have a machine

00:33:09,770 --> 00:33:16,490
here oh no I'm letting you run over a

00:33:14,030 --> 00:33:17,690
little bit you still have you still have

00:33:16,490 --> 00:33:23,410
time I'm just going to give you a little

00:33:17,690 --> 00:33:25,790
extra time on the end oh thank you so

00:33:23,410 --> 00:33:29,090
it's actually the same machine I've been

00:33:25,790 --> 00:33:32,120
working on previously I'll speed up and

00:33:29,090 --> 00:33:33,830
just show you the pan config the pin

00:33:32,120 --> 00:33:36,890
configuration as you see it's a little

00:33:33,830 --> 00:33:41,600
more complex I think I had prepared it

00:33:36,890 --> 00:33:45,740
so let's use JQ to demonstrate it now

00:33:41,600 --> 00:33:48,080
this is a set of two pins combined the

00:33:45,740 --> 00:33:50,600
first line of tu defines the threshold

00:33:48,080 --> 00:33:53,150
so two pins must succeed or in this way

00:33:50,600 --> 00:33:56,180
both communication with a tank server

00:33:53,150 --> 00:34:00,320
and the TPM chip yes that machine has a

00:33:56,180 --> 00:34:05,420
virtual TPM chip inside so now if i

00:34:00,320 --> 00:34:06,290
reboot and I'm evil yester I've stopped

00:34:05,420 --> 00:34:13,100
the tank sorry

00:34:06,290 --> 00:34:16,750
so now if I reboot we can see here

00:34:13,100 --> 00:34:20,300
recording happening nothing new at all

00:34:16,750 --> 00:34:23,450
and then it boots up and what you'll see

00:34:20,300 --> 00:34:26,090
next is it requests an IP address and

00:34:23,450 --> 00:34:28,909
then priced contacts that should be in

00:34:26,090 --> 00:34:30,860
the lower left the tank server but the

00:34:28,909 --> 00:34:33,620
tank server does not respond because it

00:34:30,860 --> 00:34:41,450
has been switched off now it'll be nice

00:34:33,620 --> 00:34:42,890
and turn it back on and you've seen it

00:34:41,450 --> 00:34:44,510
with one line scroll that actually

00:34:42,890 --> 00:34:46,940
signalizes yes I got it

00:34:44,510 --> 00:34:51,020
then there is a crypt set up taking some

00:34:46,940 --> 00:34:53,750
time and we did nothing but the Machine

00:34:51,020 --> 00:34:55,960
boots up and this is where we wanted to

00:34:53,750 --> 00:34:55,960
get to

00:34:58,270 --> 00:35:03,559
so this

00:35:00,349 --> 00:35:07,999
is the whole story now just to end it a

00:35:03,559 --> 00:35:13,519
few more stories around it status in

00:35:07,999 --> 00:35:15,440
Debian well it a first appeared in

00:35:13,519 --> 00:35:16,910
Debian and what's now stable so that's

00:35:15,440 --> 00:35:19,220
Debian ten or buster

00:35:16,910 --> 00:35:20,839
somebody maintains it how to put it

00:35:19,220 --> 00:35:24,799
there must be a reason why I am standing

00:35:20,839 --> 00:35:27,739
here if you prefer to use stable that's

00:35:24,799 --> 00:35:30,319
okay for all the packages around clevis

00:35:27,739 --> 00:35:33,289
these are Tang cozy and looks matter

00:35:30,319 --> 00:35:36,710
which I didn't mention Friday climates

00:35:33,289 --> 00:35:39,440
itself is and not that good State

00:35:36,710 --> 00:35:42,319
there was no upstream support for in a

00:35:39,440 --> 00:35:44,239
drama fest yet and there are some really

00:35:42,319 --> 00:35:45,829
angry bugs and I'm not sure whether I

00:35:44,239 --> 00:35:47,539
want to fix them in a point release

00:35:45,829 --> 00:35:51,769
whether the stable release team will

00:35:47,539 --> 00:35:54,289
permit what I suggest is go to the

00:35:51,769 --> 00:35:57,140
version we currently have in unstable

00:35:54,289 --> 00:35:59,210
and testing that's 13-2 they're free

00:35:57,140 --> 00:36:01,630
will come soon and have a little bit

00:35:59,210 --> 00:36:04,430
improvement on the drug route side and

00:36:01,630 --> 00:36:09,950
quite frankly this is the first upload I

00:36:04,430 --> 00:36:12,920
consider mature so if you want to have

00:36:09,950 --> 00:36:15,710
it on stable I aim to create packages

00:36:12,920 --> 00:36:19,009
that are easily back portable so is

00:36:15,710 --> 00:36:20,960
clevis it's just not in the Debian

00:36:19,009 --> 00:36:22,910
backports because I didn't jump the bird

00:36:20,960 --> 00:36:25,789
because I do not have the rights to

00:36:22,910 --> 00:36:27,589
upload there if somebody trustworthy is

00:36:25,789 --> 00:36:27,799
willing to do this for me please get in

00:36:27,589 --> 00:36:33,049
touch

00:36:27,799 --> 00:36:40,130
it's just basically upload mmm how much

00:36:33,049 --> 00:36:41,869
time do I have left say technically two

00:36:40,130 --> 00:36:44,210
minutes but if you have a very quick

00:36:41,869 --> 00:36:47,210
point to make that'll be fine I do have

00:36:44,210 --> 00:36:49,609
one question waiting for you oh only one

00:36:47,210 --> 00:36:54,170
question so um then I'll take the chance

00:36:49,609 --> 00:36:56,569
to give credit who is behind this this

00:36:54,170 --> 00:37:00,109
is was initially developed by an

00:36:56,569 --> 00:37:02,180
ephemeral McCallum and some when in time

00:37:00,109 --> 00:37:03,489
some point of time handed over to Sara

00:37:02,180 --> 00:37:05,660
Leia

00:37:03,489 --> 00:37:08,029
that's upstream how you want to have

00:37:05,660 --> 00:37:10,880
them differently contact is very

00:37:08,029 --> 00:37:14,150
constructive the whole story goes by the

00:37:10,880 --> 00:37:16,160
name of network bound disc encryption

00:37:14,150 --> 00:37:18,349
so if you're more interested it in all

00:37:16,160 --> 00:37:21,799
this this is the term to look for so the

00:37:18,349 --> 00:37:24,140
tang part also I should mention these

00:37:21,799 --> 00:37:26,930
two guys work for red hats so that's

00:37:24,140 --> 00:37:28,849
obviously yet another attempt by red hat

00:37:26,930 --> 00:37:33,470
to take over there beyond wake up

00:37:28,849 --> 00:37:33,890
sheeple upstream project lives and

00:37:33,470 --> 00:37:37,220
github

00:37:33,890 --> 00:37:39,349
in letcher set with these four

00:37:37,220 --> 00:37:45,559
components as you can see clevis Tang

00:37:39,349 --> 00:37:50,270
Jose and looks matter and I'd say I came

00:37:45,559 --> 00:37:51,799
to in point here of course I'm telling

00:37:50,270 --> 00:37:53,690
you this first because I think it is

00:37:51,799 --> 00:37:56,869
really something you should know and you

00:37:53,690 --> 00:37:58,849
should use and of course I want people

00:37:56,869 --> 00:38:01,819
to use it more people to use it so we

00:37:58,849 --> 00:38:04,099
can learn more about the things that are

00:38:01,819 --> 00:38:06,619
not in the best shape we'll get more

00:38:04,099 --> 00:38:09,079
ideas and so on that we can make this a

00:38:06,619 --> 00:38:12,470
better thing there'll be a really

00:38:09,079 --> 00:38:15,559
someday and and finally on a very

00:38:12,470 --> 00:38:19,549
personal side don't ask me why just a

00:38:15,559 --> 00:38:21,589
recommendation your looks petition has a

00:38:19,549 --> 00:38:24,770
header that contains everything you need

00:38:21,589 --> 00:38:27,230
everything on now without that header

00:38:24,770 --> 00:38:29,900
all your data is lost especially in a

00:38:27,230 --> 00:38:31,700
format one there is no backup copy and

00:38:29,900 --> 00:38:34,190
anything like that so do this on your

00:38:31,700 --> 00:38:36,079
own so in case you somehow accidentally

00:38:34,190 --> 00:38:38,869
run the DD command on the wrong target

00:38:36,079 --> 00:38:44,480
device you have chance to get your

00:38:38,869 --> 00:38:48,650
valuable data back twisting so that

00:38:44,480 --> 00:38:50,960
should be it and thanks for watching and

00:38:48,650 --> 00:38:56,510
I assumed there will be some questions

00:38:50,960 --> 00:39:00,680
so two questions for you now the first

00:38:56,510 --> 00:39:02,240
one is if you need to tofu tansy does

00:39:00,680 --> 00:39:04,430
that mean it needs to keep its private

00:39:02,240 --> 00:39:12,940
key somewhere permanently and if it does

00:39:04,430 --> 00:39:16,849
isn't that technically state well ask

00:39:12,940 --> 00:39:19,849
computer scientist about this I consider

00:39:16,849 --> 00:39:22,160
state something that is immutable no

00:39:19,849 --> 00:39:24,650
that is that is constantly changing and

00:39:22,160 --> 00:39:26,390
I considered a key pair something that

00:39:24,650 --> 00:39:31,050
is more or less that

00:39:26,390 --> 00:39:33,330
so I don't think this is at least it's

00:39:31,050 --> 00:39:41,310
not my understanding of State people

00:39:33,330 --> 00:39:43,140
might disagree here and the other

00:39:41,310 --> 00:39:45,060
question is how's upstream had to

00:39:43,140 --> 00:39:48,770
demonstrate the securities response yet

00:39:45,060 --> 00:39:48,770
and if so how did it go

00:39:49,580 --> 00:39:57,390
perhaps rephrase that question I'm not

00:39:51,690 --> 00:39:58,860
sure but I got it right so as far as I

00:39:57,390 --> 00:40:03,630
know there haven't been any security

00:39:58,860 --> 00:40:08,340
issues yet so is this an answer to your

00:40:03,630 --> 00:40:11,850
question find out in a second we have

00:40:08,340 --> 00:40:13,590
some delay on the stream oh oh and

00:40:11,850 --> 00:40:18,830
apparently I don't have access to IAC

00:40:13,590 --> 00:40:22,320
right now so just we'll have to wait in

00:40:18,830 --> 00:40:25,380
preparing this presentation of course

00:40:22,320 --> 00:40:27,800
that's why I do this I had to think a

00:40:25,380 --> 00:40:30,260
lot about what's happening here and I

00:40:27,800 --> 00:40:34,370
found some places where I get that

00:40:30,260 --> 00:40:37,050
feeling often this possibly is a problem

00:40:34,370 --> 00:40:38,190
so I'll have a closer look into the

00:40:37,050 --> 00:40:41,580
whole story again

00:40:38,190 --> 00:40:44,670
and hopefully I'll find that no it's not

00:40:41,580 --> 00:40:49,530
an issue here but like in everything

00:40:44,670 --> 00:40:51,570
that the else we have ugh Rafi you might

00:40:49,530 --> 00:40:58,110
be surprised in the weirdest places

00:40:51,570 --> 00:41:04,140
about what is going on so perhaps now we

00:40:58,110 --> 00:41:07,910
have gapped the delay else I don't know

00:41:04,140 --> 00:41:12,090
what else to do I think that's it so

00:41:07,910 --> 00:41:15,660
thank you very much and thank you all

00:41:12,090 --> 00:41:18,320
for attending that's it for today we'll

00:41:15,660 --> 00:41:18,320

YouTube URL: https://www.youtube.com/watch?v=v7caQEcB6VU


