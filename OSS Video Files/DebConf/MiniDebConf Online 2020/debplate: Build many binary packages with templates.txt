Title: debplate: Build many binary packages with templates
Publication date: 2020-06-02
Playlist: MiniDebConf Online 2020
Description: 
	by Ben Hutchings

At: MiniDebConfOnline 2020
https://wiki.debian.org/DebianEvents/internet/2020/MiniDebConfOnline
Room: main
Scheduled start: 2020-05-31 13:00:00
Captions: 
	00:00:05,040 --> 00:00:08,960
okay

00:00:05,520 --> 00:00:08,960
uh can everybody hear me

00:00:09,280 --> 00:00:14,160
oh yes we can marvelous okay

00:00:12,400 --> 00:00:15,839
hello it is that once again i the

00:00:14,160 --> 00:00:18,560
disembodied voice

00:00:15,839 --> 00:00:19,119
the call is coming from inside the house

00:00:18,560 --> 00:00:21,520
um

00:00:19,119 --> 00:00:22,240
this is the deb plate talk by ben

00:00:21,520 --> 00:00:25,439
hutchings

00:00:22,240 --> 00:00:25,439
so welcome him

00:00:27,439 --> 00:00:30,560
hello so uh today i'm going to be

00:00:29,760 --> 00:00:32,719
talking about

00:00:30,560 --> 00:00:33,840
a project that i've been working on for

00:00:32,719 --> 00:00:37,280
a couple of months

00:00:33,840 --> 00:00:38,000
by myself so far uh it's a template

00:00:37,280 --> 00:00:40,399
system for

00:00:38,000 --> 00:00:41,040
debian packages and i'll explain what

00:00:40,399 --> 00:00:44,320
that means

00:00:41,040 --> 00:00:47,760
in a moment in case you don't know me

00:00:44,320 --> 00:00:49,719
i i i'm ben hutchings

00:00:47,760 --> 00:00:50,960
i've been working in debian since about

00:00:49,719 --> 00:00:53,840
00:00:50,960 --> 00:00:55,520
and most of that is concentrating uh on

00:00:53,840 --> 00:00:59,680
the linux kernel packaging

00:00:55,520 --> 00:01:02,079
and related packages

00:00:59,680 --> 00:01:04,559
so why would you want to use a template

00:01:02,079 --> 00:01:06,720
system for

00:01:04,559 --> 00:01:08,960
for your source package and what what

00:01:06,720 --> 00:01:11,600
does that actually do

00:01:08,960 --> 00:01:13,119
suppose that your source package builds

00:01:11,600 --> 00:01:16,240
multiple binary packages

00:01:13,119 --> 00:01:17,920
and they need to be um similar they need

00:01:16,240 --> 00:01:20,479
to be consistent

00:01:17,920 --> 00:01:21,759
uh for example uh if you have an

00:01:20,479 --> 00:01:24,240
application that has

00:01:21,759 --> 00:01:24,799
a number of plugins that are that are

00:01:24,240 --> 00:01:28,080
optional

00:01:24,799 --> 00:01:30,000
and they have uh perhaps a

00:01:28,080 --> 00:01:31,280
lot of dependencies of their own you

00:01:30,000 --> 00:01:32,720
could split those out into multiple

00:01:31,280 --> 00:01:35,600
separate packages

00:01:32,720 --> 00:01:36,479
and those plugins the packaging of those

00:01:35,600 --> 00:01:40,479
plugins

00:01:36,479 --> 00:01:42,079
should be extremely uh

00:01:40,479 --> 00:01:44,240
should be similar should be consistent

00:01:42,079 --> 00:01:46,320
across all the plugin packages

00:01:44,240 --> 00:01:48,159
uh you might be building server software

00:01:46,320 --> 00:01:49,360
that for some reason you want to offer

00:01:48,159 --> 00:01:52,560
linked with

00:01:49,360 --> 00:01:55,119
uh either open ssl or new tls again

00:01:52,560 --> 00:01:57,280
apart from that

00:01:55,119 --> 00:01:58,560
uh shared library link dependency

00:01:57,280 --> 00:02:01,600
they're going to be

00:01:58,560 --> 00:02:04,079
uh pretty much identical binary packages

00:02:01,600 --> 00:02:04,640
uh you might have a packaging compiler

00:02:04,079 --> 00:02:06,960
and you

00:02:04,640 --> 00:02:09,119
want to build a native compiler but also

00:02:06,960 --> 00:02:12,080
cross compilers for different targets

00:02:09,119 --> 00:02:14,560
again the binary packages should look

00:02:12,080 --> 00:02:16,879
very similar

00:02:14,560 --> 00:02:19,840
and if for any reason you need to have

00:02:16,879 --> 00:02:22,160
multiple build configurations

00:02:19,840 --> 00:02:23,040
that are useful on different systems uh

00:02:22,160 --> 00:02:25,599
obviously this is

00:02:23,040 --> 00:02:26,480
this is important for uh the linux

00:02:25,599 --> 00:02:29,599
kernel packaging

00:02:26,480 --> 00:02:30,400
sometimes a single configuration uh

00:02:29,599 --> 00:02:34,239
doesn't

00:02:30,400 --> 00:02:37,280
uh isn't suitable for all uh um

00:02:34,239 --> 00:02:40,400
uh for for all computers uh

00:02:37,280 --> 00:02:41,840
that use a single architecture

00:02:40,400 --> 00:02:43,599
another reason why you might want to

00:02:41,840 --> 00:02:46,959
template system is

00:02:43,599 --> 00:02:48,879
uh when you have frequent api changes

00:02:46,959 --> 00:02:50,560
um and those will require changing the

00:02:48,879 --> 00:02:52,319
package

00:02:50,560 --> 00:02:55,040
the binary package name in multiple

00:02:52,319 --> 00:02:58,400
places uh and in general

00:02:55,040 --> 00:02:59,680
uh there's a good principle of software

00:02:58,400 --> 00:03:00,800
development which is don't repeat

00:02:59,680 --> 00:03:04,560
yourself

00:03:00,800 --> 00:03:05,519
and a template system can can help to

00:03:04,560 --> 00:03:08,159
avoid that

00:03:05,519 --> 00:03:08,159
repetition

00:03:08,800 --> 00:03:13,680
so this is this is a problem that's um

00:03:12,400 --> 00:03:15,519
there are a lot of there are lots of

00:03:13,680 --> 00:03:17,040
packages that can benefit from a

00:03:15,519 --> 00:03:19,519
template system

00:03:17,040 --> 00:03:20,800
and of course this has been done before

00:03:19,519 --> 00:03:23,760
um

00:03:20,800 --> 00:03:24,640
the kernel team has uh i thought a

00:03:23,760 --> 00:03:28,319
template system

00:03:24,640 --> 00:03:31,519
for many years uh it's relatively

00:03:28,319 --> 00:03:33,280
the template uh substitution itself is

00:03:31,519 --> 00:03:34,959
relatively simple

00:03:33,280 --> 00:03:37,200
but the result of that is we need a lot

00:03:34,959 --> 00:03:39,200
of custom logic

00:03:37,200 --> 00:03:40,959
as well as the templates and variable

00:03:39,200 --> 00:03:43,840
definitions

00:03:40,959 --> 00:03:44,879
uh the tcc and gcc defaults source

00:03:43,840 --> 00:03:48,159
packages

00:03:44,879 --> 00:03:50,640
also have a 10-bit system

00:03:48,159 --> 00:03:51,840
uh it's as far as i could see it's even

00:03:50,640 --> 00:03:54,080
more limited than the

00:03:51,840 --> 00:03:55,760
kernel teams one i found it quite hard

00:03:54,080 --> 00:03:59,200
to work with when

00:03:55,760 --> 00:04:02,319
doing a gcc uh

00:03:59,200 --> 00:04:06,720
defaults package um

00:04:02,319 --> 00:04:09,120
there are probably others in use

00:04:06,720 --> 00:04:10,239
but i didn't find any general tool for

00:04:09,120 --> 00:04:15,840
this when i looked so

00:04:10,239 --> 00:04:15,840
i started writing my own one

00:04:21,040 --> 00:04:26,400
that played is intended to be a general

00:04:24,560 --> 00:04:28,000
tool it's intended to be usable by any

00:04:26,400 --> 00:04:31,199
source package that needs a template

00:04:28,000 --> 00:04:34,880
system um and

00:04:31,199 --> 00:04:37,600
if if it is generally usable and

00:04:34,880 --> 00:04:39,040
and is adopted then hopefully those

00:04:37,600 --> 00:04:42,720
packages will be

00:04:39,040 --> 00:04:46,560
less unusual and it will be easier

00:04:42,720 --> 00:04:46,560
to work on those for uh

00:04:48,800 --> 00:04:57,840
contributors that aren't the uh the

00:04:50,639 --> 00:04:57,840
regular maintainers

00:05:02,479 --> 00:05:07,520
so currently deplete can generate the

00:05:05,360 --> 00:05:11,840
debian control file

00:05:07,520 --> 00:05:11,840
and tibian test control

00:05:15,039 --> 00:05:21,840
it can generate a make file

00:05:18,479 --> 00:05:24,160
that would be included in debian rules

00:05:21,840 --> 00:05:25,120
it doesn't it doesn't generate debian

00:05:24,160 --> 00:05:26,400
rules because

00:05:25,120 --> 00:05:30,080
actually we want to have a static

00:05:26,400 --> 00:05:30,080
derivative rules to make it easier to

00:05:30,720 --> 00:05:33,840
to inform deflate

00:05:34,880 --> 00:05:38,560
and it can generate per package

00:05:37,199 --> 00:05:41,120
configuration files

00:05:38,560 --> 00:05:42,160
which are used like those used by dev

00:05:41,120 --> 00:05:45,360
helper

00:05:42,160 --> 00:05:49,280
so list of examples there

00:05:45,360 --> 00:05:50,320
um basically any any uh any text file

00:05:49,280 --> 00:05:52,800
that

00:05:50,320 --> 00:05:53,360
starts with the package by the binary

00:05:52,800 --> 00:05:57,840
package

00:05:53,360 --> 00:05:57,840
name can be generated from a template

00:05:58,960 --> 00:06:07,840
so here's an overview of the

00:06:02,560 --> 00:06:07,840
how you would

00:06:07,919 --> 00:06:12,000
here's an overview of how you would uh

00:06:12,400 --> 00:06:17,360
create your the files to uh to make

00:06:15,360 --> 00:06:19,520
template work

00:06:17,360 --> 00:06:21,840
so this is this example package is using

00:06:19,520 --> 00:06:25,840
dh and it has

00:06:21,840 --> 00:06:29,039
uh has the the standard

00:06:25,840 --> 00:06:32,479
um wildcard rule for running dh

00:06:29,039 --> 00:06:34,560
and we just have one extra

00:06:32,479 --> 00:06:37,280
line in there to include a makefile

00:06:34,560 --> 00:06:41,520
that's provided by template

00:06:37,280 --> 00:06:43,919
and that will ensure that the

00:06:41,520 --> 00:06:44,639
template is run at build time to

00:06:43,919 --> 00:06:48,080
generate

00:06:44,639 --> 00:06:49,199
uh the additional required files debian

00:06:48,080 --> 00:06:52,000
control and debian

00:06:49,199 --> 00:06:53,360
source control of uh sorry debian tests

00:06:52,000 --> 00:06:56,319
control

00:06:53,360 --> 00:06:58,160
uh of course have to exist uh in the

00:06:56,319 --> 00:07:03,840
source package so those

00:06:58,160 --> 00:07:03,840
would be generated separately

00:07:06,560 --> 00:07:09,599
and then you have configuration file

00:07:08,880 --> 00:07:12,960
debian

00:07:09,599 --> 00:07:13,360
deadplay config.yaml so that's as you

00:07:12,960 --> 00:07:16,479
can see

00:07:13,360 --> 00:07:18,319
yaml file and that would have all the

00:07:16,479 --> 00:07:19,440
variable definitions in it and it would

00:07:18,319 --> 00:07:23,680
specify

00:07:19,440 --> 00:07:25,919
uh groups of uh groups of templates to

00:07:23,680 --> 00:07:28,800
be expanded

00:07:25,919 --> 00:07:29,440
and the templates themselves would then

00:07:28,800 --> 00:07:33,039
exist in

00:07:29,440 --> 00:07:36,000
under a uh currently in the subdirectory

00:07:33,039 --> 00:07:36,000
deviant templates

00:07:37,440 --> 00:07:43,919
so this is what the configuration file

00:07:40,800 --> 00:07:47,280
this is a larger larger part of a uh

00:07:43,919 --> 00:07:51,280
configuration file for depth plate

00:07:47,280 --> 00:07:53,759
um all everything is organized into

00:07:51,280 --> 00:07:53,759
groups

00:07:54,000 --> 00:07:58,960
this top level group which may or may

00:07:57,280 --> 00:08:01,759
not contain packages

00:07:58,960 --> 00:08:04,160
uh in this example we have two groups

00:08:01,759 --> 00:08:06,960
under the top level called foo and bar

00:08:04,160 --> 00:08:07,440
uh both of them are applying the binary

00:08:06,960 --> 00:08:10,240
as

00:08:07,440 --> 00:08:12,080
a collection of templates called binary

00:08:10,240 --> 00:08:12,720
and they'll have different variables

00:08:12,080 --> 00:08:16,160
that will be

00:08:12,720 --> 00:08:16,160
uh used in those templates

00:08:17,520 --> 00:08:23,199
and so here's the binary dot control

00:08:20,240 --> 00:08:27,039
template that will be used for that

00:08:23,199 --> 00:08:30,479
um that's good that generates the

00:08:27,039 --> 00:08:34,399
uh binary package paragraph for a single

00:08:30,479 --> 00:08:37,039
single package um

00:08:34,399 --> 00:08:39,120
i don't know if you uh if you uh haven't

00:08:37,039 --> 00:08:42,719
recognized this syntax yet this is

00:08:39,120 --> 00:08:42,719
ginger templates

00:08:43,360 --> 00:08:47,279
so the simple the simplest substitution

00:08:46,000 --> 00:08:50,399
is put a variable name

00:08:47,279 --> 00:08:52,959
in double double braces

00:08:50,399 --> 00:08:54,000
and we've got some more complex use here

00:08:52,959 --> 00:08:58,080
for to do word

00:08:54,000 --> 00:08:59,760
wrapping of the description

00:08:58,080 --> 00:09:02,080
and then you have a conditional section

00:08:59,760 --> 00:09:02,080
there

00:09:03,279 --> 00:09:12,240
beginning with open brace percent if

00:09:08,320 --> 00:09:13,920
um and you can also

00:09:12,240 --> 00:09:15,600
there are also various filters you can

00:09:13,920 --> 00:09:16,959
use um

00:09:15,600 --> 00:09:18,720
you'll see on the recommends and

00:09:16,959 --> 00:09:22,320
suggests fields

00:09:18,720 --> 00:09:25,279
uh that they reference

00:09:22,320 --> 00:09:26,959
the recommends and suggests variables

00:09:25,279 --> 00:09:30,399
the suggests variable

00:09:26,959 --> 00:09:32,800
uh is not defined for foo

00:09:30,399 --> 00:09:34,480
but that's okay because we apply a

00:09:32,800 --> 00:09:36,880
filter there called

00:09:34,480 --> 00:09:40,800
default which can be used to provide the

00:09:36,880 --> 00:09:45,600
full value if the variable isn't defined

00:09:40,800 --> 00:09:45,600
um the um

00:09:45,839 --> 00:09:53,760
the ginger configuration i've used

00:09:50,720 --> 00:09:56,320
makes undefined variables uh

00:09:53,760 --> 00:09:56,320
an error

00:09:59,519 --> 00:10:03,440
so that hopefully if you make a typo

00:10:02,720 --> 00:10:04,959
that will be

00:10:03,440 --> 00:10:08,800
that will be caught and you need to

00:10:04,959 --> 00:10:08,800
explicitly provide a default

00:10:11,760 --> 00:10:15,760
and there are lots more features that i

00:10:13,519 --> 00:10:19,120
haven't shown here

00:10:15,760 --> 00:10:20,079
groups i can have chart groups down to

00:10:19,120 --> 00:10:22,240
any depth

00:10:20,079 --> 00:10:23,120
i expect that won't be needed by most

00:10:22,240 --> 00:10:26,959
packages but

00:10:23,120 --> 00:10:30,240
in the kernel we do have um

00:10:26,959 --> 00:10:32,560
we have feature sets which involve

00:10:30,240 --> 00:10:35,360
applying extra packages

00:10:32,560 --> 00:10:36,480
to the source and also flavors within

00:10:35,360 --> 00:10:38,640
that

00:10:36,480 --> 00:10:39,600
and then we have architecture specific

00:10:38,640 --> 00:10:43,040
settings as well

00:10:39,600 --> 00:10:46,160
so we would need that

00:10:43,040 --> 00:10:47,200
variables are inherited in child groups

00:10:46,160 --> 00:10:49,760
but they can

00:10:47,200 --> 00:10:50,560
be overridden or extended if necessary

00:10:49,760 --> 00:10:53,920
by the

00:10:50,560 --> 00:10:55,680
child groups it's also possible to

00:10:53,920 --> 00:10:57,680
specify

00:10:55,680 --> 00:10:58,720
that a set of templates that should be

00:10:57,680 --> 00:11:00,320
used in

00:10:58,720 --> 00:11:01,839
descendant groups so that you don't have

00:11:00,320 --> 00:11:04,240
to repeat the list of templates in

00:11:01,839 --> 00:11:08,160
multiple places

00:11:04,240 --> 00:11:11,600
uh you can restrict a group to be

00:11:08,160 --> 00:11:13,360
built on any specific architectures

00:11:11,600 --> 00:11:15,200
rather than putting that architecture

00:11:13,360 --> 00:11:16,160
restriction in multiple binary package

00:11:15,200 --> 00:11:19,360
templates

00:11:16,160 --> 00:11:21,040
you would put it applied to the group uh

00:11:19,360 --> 00:11:24,160
you can disable a group

00:11:21,040 --> 00:11:25,600
completely which i think

00:11:24,160 --> 00:11:27,360
obviously you could completely delete a

00:11:25,600 --> 00:11:30,000
group and that would prevent building

00:11:27,360 --> 00:11:32,720
those packages that the group describes

00:11:30,000 --> 00:11:33,600
um but uh if someone's maintaining a

00:11:32,720 --> 00:11:36,640
derivative

00:11:33,600 --> 00:11:40,320
or local build um

00:11:36,640 --> 00:11:41,680
then it's going to be more useful if

00:11:40,320 --> 00:11:42,000
they can just disable the group by

00:11:41,680 --> 00:11:45,440
adding

00:11:42,000 --> 00:11:46,480
a line and that should reduce the

00:11:45,440 --> 00:11:50,720
frequency of

00:11:46,480 --> 00:11:53,519
conflicts when they pull a later

00:11:50,720 --> 00:11:53,519
upstream version

00:11:54,160 --> 00:11:59,040
a control template for a binary package

00:11:57,120 --> 00:12:03,040
you can specify bill dependencies

00:11:59,040 --> 00:12:04,880
that are only apply if that binary

00:12:03,040 --> 00:12:06,800
package is being built

00:12:04,880 --> 00:12:08,320
and then those will be moved to the

00:12:06,800 --> 00:12:13,120
source

00:12:08,320 --> 00:12:14,320
control paragraph with um

00:12:13,120 --> 00:12:16,959
those will be qualified by the

00:12:14,320 --> 00:12:19,600
architecture and build profiles

00:12:16,959 --> 00:12:21,040
for that binary package there's also a

00:12:19,600 --> 00:12:22,560
way of specifying

00:12:21,040 --> 00:12:24,959
uh the binary package will be a

00:12:22,560 --> 00:12:27,279
dependency for tests

00:12:24,959 --> 00:12:28,399
if it's built again that will be moved

00:12:27,279 --> 00:12:30,480
to the tests

00:12:28,399 --> 00:12:32,880
dependencies with architecture

00:12:30,480 --> 00:12:36,399
qualification

00:12:32,880 --> 00:12:38,639
and i've added as well as the default

00:12:36,399 --> 00:12:40,399
filters available as part of ginger i've

00:12:38,639 --> 00:12:43,120
copied lots of extra filters

00:12:40,399 --> 00:12:43,920
from ansible that i thought could be

00:12:43,120 --> 00:12:46,959
usable

00:12:43,920 --> 00:12:49,200
that could be useful in this context as

00:12:46,959 --> 00:12:49,200
well

00:12:50,639 --> 00:12:57,600
so is this ready to use well no

00:12:53,839 --> 00:12:59,200
it's not um part of the purpose of this

00:12:57,600 --> 00:13:02,399
tour is to uh

00:12:59,200 --> 00:13:04,480
to uh attract people to uh

00:13:02,399 --> 00:13:05,920
try it out find out what's what's

00:13:04,480 --> 00:13:09,120
missing

00:13:05,920 --> 00:13:11,279
and maybe help me with development

00:13:09,120 --> 00:13:12,800
so at the moment it can't do everything

00:13:11,279 --> 00:13:15,040
that the kernel teams

00:13:12,800 --> 00:13:17,279
template system can do although it's

00:13:15,040 --> 00:13:20,399
it's gradually getting there

00:13:17,279 --> 00:13:24,160
i haven't yet tested it with any

00:13:20,399 --> 00:13:27,360
any other people's source packages

00:13:24,160 --> 00:13:29,839
and the configuration schema

00:13:27,360 --> 00:13:31,440
is not stable that is subject to change

00:13:29,839 --> 00:13:34,560
for a while

00:13:31,440 --> 00:13:37,519
my hope is that i'll be able to

00:13:34,560 --> 00:13:38,720
um get to a 1.0 release this year which

00:13:37,519 --> 00:13:41,360
will be usable

00:13:38,720 --> 00:13:42,720
for the kernel team and and other in

00:13:41,360 --> 00:13:46,880
other packages

00:13:42,720 --> 00:13:50,880
um and at that point the um

00:13:46,880 --> 00:13:53,839
configuration schema will be stabilized

00:13:50,880 --> 00:13:54,880
um from then on i'm intending to use

00:13:53,839 --> 00:13:58,480
versioned

00:13:54,880 --> 00:13:59,440
uh schemas similar to dependent compat

00:13:58,480 --> 00:14:03,600
levels so

00:13:59,440 --> 00:14:06,320
uh if any um incompatible changes are

00:14:03,600 --> 00:14:08,160
added later they'll be opt-in

00:14:06,320 --> 00:14:09,920
so if you have a soft package that you

00:14:08,160 --> 00:14:12,240
think could benefit from

00:14:09,920 --> 00:14:13,279
a template system or a better template

00:14:12,240 --> 00:14:15,360
system

00:14:13,279 --> 00:14:17,440
uh there's the template repository

00:14:15,360 --> 00:14:21,199
currently in my personal namespace

00:14:17,440 --> 00:14:24,240
on salsa binh slash deadplate

00:14:21,199 --> 00:14:26,959
um please do open issues

00:14:24,240 --> 00:14:28,800
and merge requests there are things that

00:14:26,959 --> 00:14:31,920
you want

00:14:28,800 --> 00:14:35,440
they should be changed uh

00:14:31,920 --> 00:14:45,839
and with that um i will

00:14:35,440 --> 00:14:45,839
look for questions

00:14:48,240 --> 00:14:54,399
yes i have one question to relay or

00:14:51,279 --> 00:14:58,000
rather i have information from nils

00:14:54,399 --> 00:15:02,240
saying fyi debian templates is also used

00:14:58,000 --> 00:15:03,519
by dh underscore install.conf like

00:15:02,240 --> 00:15:06,160
package templates we should probably

00:15:03,519 --> 00:15:10,800
avoid this clash somehow yeah i had

00:15:06,160 --> 00:15:12,160
i yes i think

00:15:10,800 --> 00:15:14,160
i'm not sure quite how we've avoided

00:15:12,160 --> 00:15:15,839
that in the in the kernel package

00:15:14,160 --> 00:15:17,760
because we have had

00:15:15,839 --> 00:15:18,880
uh depth of templates in there at one

00:15:17,760 --> 00:15:20,399
point but yes

00:15:18,880 --> 00:15:22,959
which i should probably move everything

00:15:20,399 --> 00:15:23,600
together into a uh something like david

00:15:22,959 --> 00:15:26,160
slash

00:15:23,600 --> 00:15:27,519
deb plate which as long as that plate

00:15:26,160 --> 00:15:31,279
doesn't build using itself

00:15:27,519 --> 00:15:31,279
will should be uh free

00:15:31,440 --> 00:15:37,440
okay uh one more question is it possible

00:15:35,120 --> 00:15:41,839
is it possible to populate variables by

00:15:37,440 --> 00:15:41,839
output from an external command

00:15:42,320 --> 00:15:47,199
uh no but i have a an open issue for

00:15:45,519 --> 00:15:51,199
that

00:15:47,199 --> 00:15:53,600
okay uh one more another two questions

00:15:51,199 --> 00:15:55,040
one is did you ask the gcc maintainer if

00:15:53,600 --> 00:15:58,240
they were interested

00:15:55,040 --> 00:15:59,519
no that's not an obvious test case so

00:15:58,240 --> 00:16:02,720
that's uh

00:15:59,519 --> 00:16:04,959
yeah and also

00:16:02,720 --> 00:16:06,240
um it's not totally clear how to mix

00:16:04,959 --> 00:16:09,600
these templates between different

00:16:06,240 --> 00:16:11,040
sources can you elaborate

00:16:09,600 --> 00:16:13,519
by the way you've got three minutes left

00:16:11,040 --> 00:16:13,519
officially

00:16:13,759 --> 00:16:22,800
uh do you mean sharing templates between

00:16:15,680 --> 00:16:26,160
source packages

00:16:22,800 --> 00:16:27,759
sorry does that mean sharing uh

00:16:26,160 --> 00:16:30,000
sharing templates between multiple

00:16:27,759 --> 00:16:32,480
source packages or

00:16:30,000 --> 00:16:33,519
i didn't i'm not sure i understand the

00:16:32,480 --> 00:16:36,720
question

00:16:33,519 --> 00:16:41,360
um hopefully

00:16:36,720 --> 00:16:41,360
hopefully the oscar can elaborate yes

00:16:42,000 --> 00:16:45,040
oh um i do have another question for you

00:16:44,160 --> 00:16:46,880
um

00:16:45,040 --> 00:16:48,399
i cannot imagine how this interacts with

00:16:46,880 --> 00:16:51,040
d package hyphen source

00:16:48,399 --> 00:16:52,800
uh or would i have to run some commands

00:16:51,040 --> 00:16:55,920
beforehand that do the temp

00:16:52,800 --> 00:16:58,399
that do the templation yes that uh

00:16:55,920 --> 00:17:00,320
slash control and deviance test control

00:16:58,399 --> 00:17:02,639
are generated separately from everything

00:17:00,320 --> 00:17:04,640
else

00:17:02,639 --> 00:17:05,919
so those are there's one command to

00:17:04,640 --> 00:17:07,360
generate those

00:17:05,919 --> 00:17:08,559
uh which need to be in the source

00:17:07,360 --> 00:17:09,360
package and then there are separate

00:17:08,559 --> 00:17:11,919
commands

00:17:09,360 --> 00:17:13,679
to uh to generate everything else from

00:17:11,919 --> 00:17:19,600
templates and then to clean up the

00:17:13,679 --> 00:17:21,280
generated files okay is that everything

00:17:19,600 --> 00:17:23,280
uh no i can see there's a follow-up from

00:17:21,280 --> 00:17:25,839
elbrus saying clarifying that he did

00:17:23,280 --> 00:17:28,000
mean sharing between source packages

00:17:25,839 --> 00:17:28,880
right yeah that's something i have i

00:17:28,000 --> 00:17:32,480
have thought about

00:17:28,880 --> 00:17:34,799
um the but this

00:17:32,480 --> 00:17:34,799
um

00:17:36,720 --> 00:17:39,919
um i can see it would be useful to be

00:17:38,720 --> 00:17:41,440
able to have some

00:17:39,919 --> 00:17:44,000
uh common templates that you share

00:17:41,440 --> 00:17:47,039
between source packages but

00:17:44,000 --> 00:17:47,440
uh the problem with that is again that

00:17:47,039 --> 00:17:49,360
the

00:17:47,440 --> 00:17:51,200
debian slash control debian slash test

00:17:49,360 --> 00:17:52,640
control needs to be generated as part of

00:17:51,200 --> 00:17:53,600
the source package

00:17:52,640 --> 00:17:55,840
and then everything else will be

00:17:53,600 --> 00:18:00,000
generated at build time

00:17:55,840 --> 00:18:02,400
and so if uh if the

00:18:00,000 --> 00:18:04,240
source of if wherever the common

00:18:02,400 --> 00:18:06,000
templates come from

00:18:04,240 --> 00:18:08,080
is updated between preparation of the

00:18:06,000 --> 00:18:08,720
source package and a build of the source

00:18:08,080 --> 00:18:11,679
package

00:18:08,720 --> 00:18:13,520
for example as a bin nmu later then it

00:18:11,679 --> 00:18:16,160
could be built using an inconsistent set

00:18:13,520 --> 00:18:16,160
of templates

00:18:16,640 --> 00:18:21,280
so i can definitely see that this will

00:18:19,520 --> 00:18:24,000
be a useful thing to be able to do i

00:18:21,280 --> 00:18:28,799
just don't know how to avoid that

00:18:24,000 --> 00:18:31,200
avoid that problem

00:18:28,799 --> 00:18:32,799
okay i think that's everything for now

00:18:31,200 --> 00:18:36,559
right

00:18:32,799 --> 00:18:36,559
so uh thank you all very much for

00:18:39,080 --> 00:18:42,080

YouTube URL: https://www.youtube.com/watch?v=cikK1CEXQhA


