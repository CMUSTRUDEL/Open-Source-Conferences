Title: BoF: running autopkgtest for your package
Publication date: 2020-06-02
Playlist: MiniDebConf Online 2020
Description: 
	by Paul Gevers

At: MiniDebConfOnline 2020
https://wiki.debian.org/DebianEvents/internet/2020/MiniDebConfOnline
Room: main
Scheduled start: 2020-05-31 12:00:00
Captions: 
	00:00:04,970 --> 00:00:14,150
welcome to the Otto package for your

00:00:08,630 --> 00:00:17,539
package buff and yeah if you anyone

00:00:14,150 --> 00:00:20,270
wants to join it too please comment in

00:00:17,539 --> 00:00:22,250
the IRC will be filled in questions from

00:00:20,270 --> 00:00:30,140
there but yeah

00:00:22,250 --> 00:00:33,219
take it away yes so OH

00:00:30,140 --> 00:00:33,219
[Music]

00:00:46,890 --> 00:00:53,940
like after they but just go first sir

00:00:53,280 --> 00:01:00,140
sure

00:00:53,940 --> 00:01:00,140
so you my dears already babies oh honey

00:01:01,159 --> 00:01:08,330
okay let's try my phone then once that

00:01:11,600 --> 00:01:25,550
this is a bit what I was fearing iPhone

00:01:22,110 --> 00:01:32,549
is hopefully starting well ironically

00:01:25,550 --> 00:01:35,569
now it you saw I'm just fine so it's

00:01:32,549 --> 00:01:39,659
better if I switch my phone on to join

00:01:35,569 --> 00:01:41,130
yeah Anthony I guess as soon as he

00:01:39,659 --> 00:01:46,039
actually starts talking about what it

00:01:41,130 --> 00:01:46,039
became without doing that again

00:04:16,190 --> 00:04:23,970
can you see my terminal window yes yes I

00:04:21,870 --> 00:04:27,289
think what we're waiting for let me show

00:04:23,970 --> 00:04:27,289
you one of the packages I'll maintain

00:04:30,139 --> 00:04:37,020
for female team extreme tech Jimmy

00:04:34,340 --> 00:04:40,289
basically it's a bunch of themes that

00:04:37,020 --> 00:04:42,000
you can use 40 marks in the description

00:04:40,289 --> 00:04:44,180
of the package I have an example of how

00:04:42,000 --> 00:04:47,490
what you can add to your climax

00:04:44,180 --> 00:04:51,810
configuration and to light one of these

00:04:47,490 --> 00:04:55,289
themes a pretty control V : I played

00:04:51,810 --> 00:04:56,520
that learning today and okay I'm using a

00:04:55,289 --> 00:04:59,520
terminal that doesn't use the right

00:04:56,520 --> 00:05:02,400
funds but you can see Mighty Max team

00:04:59,520 --> 00:05:04,139
has changed if you have the right power

00:05:02,400 --> 00:05:06,870
line funds installed and configured then

00:05:04,139 --> 00:05:08,219
you'll get nice glyphs that make it look

00:05:06,870 --> 00:05:10,409
really nice and there's a bunch of other

00:05:08,219 --> 00:05:12,389
themes included in that package to that

00:05:10,409 --> 00:05:14,729
that you can find out from the package

00:05:12,389 --> 00:05:18,650
description okay I presume in used to

00:05:14,729 --> 00:05:20,669
kill on the server end of client end

00:05:18,650 --> 00:05:28,590
that you need to install on the server

00:05:20,669 --> 00:05:31,370
end wherever you run the team axe you so

00:05:28,590 --> 00:05:31,370
Bruce Beckett

00:05:55,090 --> 00:06:06,710
there he is

00:05:57,040 --> 00:06:08,330
welcome back you are muted that if

00:06:06,710 --> 00:06:11,960
you're speaking we can't hear you

00:06:08,330 --> 00:06:19,120
how are you hearing us your stream you

00:06:11,960 --> 00:06:21,590
selected maybe we can try having him

00:06:19,120 --> 00:06:27,490
drawing again from his laptop and I can

00:06:21,590 --> 00:06:27,490
share the screen he only shows audio

00:06:29,650 --> 00:06:38,390
I've seen the intro Anthony that I'm

00:06:34,010 --> 00:06:40,010
sorry Antonia that it that you're part

00:06:38,390 --> 00:06:42,770
of this who are we maybe you can start

00:06:40,010 --> 00:06:52,460
if you can handle that parts of the bus

00:06:42,770 --> 00:06:56,360
and yeah intro so we can have a clean

00:06:52,460 --> 00:06:59,750
recording of this cool so welcome to the

00:06:56,360 --> 00:07:06,020
running Auto packaged test view package

00:06:59,750 --> 00:07:08,600
buff you want to take it away yeah thank

00:07:06,020 --> 00:07:10,790
you guys for organizing this mean Def

00:07:08,600 --> 00:07:11,600
Con and thanks all for submitting this

00:07:10,790 --> 00:07:13,640
ball

00:07:11,600 --> 00:07:16,640
po is having some connection problems

00:07:13,640 --> 00:07:21,790
you probably join us at some point I'm

00:07:16,640 --> 00:07:25,700
leading this this initial discussion so

00:07:21,790 --> 00:07:31,670
did they go off this path we plan to do

00:07:25,700 --> 00:07:36,290
a brief introduction to a CI and testing

00:07:31,670 --> 00:07:38,660
migration gating and the we have some

00:07:36,290 --> 00:07:40,850
potential material after that some

00:07:38,660 --> 00:07:44,510
tricks suggestions and best practices

00:07:40,850 --> 00:07:46,760
that we copied from the wiki and we will

00:07:44,510 --> 00:07:48,430
copy back to the week after I don't even

00:07:46,760 --> 00:07:50,770
if we have

00:07:48,430 --> 00:07:54,880
a good improvements to the documentation

00:07:50,770 --> 00:07:58,270
Oh about ourselves a little bit so I'm

00:07:54,880 --> 00:08:02,380
the original author of the BI in in the

00:07:58,270 --> 00:08:05,020
CIA dot ivanovna's service I also wrote

00:08:02,380 --> 00:08:11,790
out of the page which is a outer package

00:08:05,020 --> 00:08:15,190
this helper to automatically provide

00:08:11,790 --> 00:08:19,570
test with specifications for common pipe

00:08:15,190 --> 00:08:23,860
packages like for instance all Ruby

00:08:19,570 --> 00:08:25,270
packets have the same the same test

00:08:23,860 --> 00:08:29,050
suite specification instead of

00:08:25,270 --> 00:08:30,940
hard-coding it in every package century

00:08:29,050 --> 00:08:33,040
available now to that bridge and that's

00:08:30,940 --> 00:08:36,220
that's run by Auto package test meaner

00:08:33,040 --> 00:08:39,130
environment allows us to be able to

00:08:36,220 --> 00:08:41,770
change how how to run out of packages

00:08:39,130 --> 00:08:44,680
for all packets of a given time without

00:08:41,770 --> 00:08:48,010
having to touch all of them and I am

00:08:44,680 --> 00:08:53,140
also still maintaining see I determined

00:08:48,010 --> 00:08:56,830
that in oh he got involved with the CI

00:08:53,140 --> 00:09:00,460
because he wanted to have auto package -

00:08:56,830 --> 00:09:04,480
gate result gauging the test migration

00:09:00,460 --> 00:09:08,860
in Debian so Ubuntu does this for a long

00:09:04,480 --> 00:09:10,990
time and we needed several changes in

00:09:08,860 --> 00:09:16,410
the infrastructure for it working Debian

00:09:10,990 --> 00:09:20,950
so Paul took that working and after that

00:09:16,410 --> 00:09:22,960
after that started working and he said

00:09:20,950 --> 00:09:25,330
he contributed to Brittany to do that

00:09:22,960 --> 00:09:30,060
and then he he was asked to join the

00:09:25,330 --> 00:09:33,490
release team is no devil risk manager

00:09:30,060 --> 00:09:42,040
and then we are currently bitching that

00:09:33,490 --> 00:09:44,650
they maintains the dementia a service we

00:09:42,040 --> 00:09:48,640
have a few updates since the last time

00:09:44,650 --> 00:09:52,780
we talked about this so shall I give it

00:09:48,640 --> 00:10:02,380
a try yes yes go ahead let's see if my

00:09:52,780 --> 00:10:06,130
connection holds so yes on the CI Debbie

00:10:02,380 --> 00:10:11,430
that service we are currently supporting

00:10:06,130 --> 00:10:15,750
three architectures amd64 which is the

00:10:11,430 --> 00:10:19,540
first arch detected to be supported and

00:10:15,750 --> 00:10:23,670
we currently have 12 workers which seem

00:10:19,540 --> 00:10:23,670
to be able to handle quite nicely

00:10:23,830 --> 00:10:34,710
recently we we had quite a bit of

00:10:30,010 --> 00:10:39,730
workers from China things for those and

00:10:34,710 --> 00:10:45,220
one their metal worker where we actually

00:10:39,730 --> 00:10:50,410
run 8ci workers in parallel yielding

00:10:45,220 --> 00:10:55,900
interesting new challenges and there's

00:10:50,410 --> 00:11:04,450
one machine of PPC 64 al that runs two

00:10:55,900 --> 00:11:08,560
workers so amd64 and arm 64 are fully

00:11:04,450 --> 00:11:15,940
integrated into the unstable to testing

00:11:08,560 --> 00:11:22,300
migration and we're leaving out PPC 64

00:11:15,940 --> 00:11:27,030
al for that because it it's just not i

00:11:22,300 --> 00:11:33,040
able to keep up with the two CI workers

00:11:27,030 --> 00:11:39,790
we would definitely more for those but

00:11:33,040 --> 00:11:45,620
for the proper can scroll down a bit on

00:11:39,790 --> 00:11:47,649
history for

00:11:45,620 --> 00:11:54,590
all stay

00:11:47,649 --> 00:11:58,460
stable work using he

00:11:54,590 --> 00:12:06,800
before yell Oh careful progressions

00:11:58,460 --> 00:12:10,430
impose updates and what again let me

00:12:06,800 --> 00:12:13,130
just try once more if that works

00:12:10,430 --> 00:12:14,750
Oh me maybe it's better that I do it so

00:12:13,130 --> 00:12:19,390
we don't have connection problems on you

00:12:14,750 --> 00:12:19,390
okay yeah sure yeah I'll share my Street

00:12:19,750 --> 00:12:25,660
the one that's sharing a scroll of the

00:12:22,610 --> 00:12:25,660
town of theirs

00:12:34,000 --> 00:12:43,550
the religion is indeed using the results

00:12:41,270 --> 00:12:47,630
for proposed updates and all proposed

00:12:43,550 --> 00:12:53,270
updates to judge if packages can go into

00:12:47,630 --> 00:12:56,870
the stable release update so and that

00:12:53,270 --> 00:13:04,550
for that we also use a spoon for this

00:12:56,870 --> 00:13:07,250
excel next to that I'm on behalf of the

00:13:04,550 --> 00:13:12,500
release team writing the servlet who

00:13:07,250 --> 00:13:17,230
also test experimental so new upload to

00:13:12,500 --> 00:13:18,470
experimental are tested in the same way

00:13:17,230 --> 00:13:24,620
again

00:13:18,470 --> 00:13:35,810
unstable upload to unstable are tested

00:13:24,620 --> 00:13:40,850
in testing and in the data link you have

00:13:35,810 --> 00:13:46,630
no excuses which is also linked from the

00:13:40,850 --> 00:13:46,630
release debian dog released in webpage

00:13:47,350 --> 00:13:55,640
on the outer package test side of things

00:13:52,270 --> 00:13:59,110
over the last year there's a couple of

00:13:55,640 --> 00:14:04,330
things a couple of restrictions at it

00:13:59,110 --> 00:14:06,380
and indeed as Martin bit recently

00:14:04,330 --> 00:14:07,960
pointed out it shouldn't have been

00:14:06,380 --> 00:14:10,899
restrictions

00:14:07,960 --> 00:14:17,820
they are right now meaning that you can

00:14:10,899 --> 00:14:20,710
mark your test as being flaky to avoid

00:14:17,820 --> 00:14:26,709
walking other packages if your test

00:14:20,710 --> 00:14:30,760
isn't extremely reliable if the test

00:14:26,709 --> 00:14:34,959
fails it will not be hold against any

00:14:30,760 --> 00:14:39,010
other package so it's a way to say my

00:14:34,959 --> 00:14:41,070
package doesn't always pass when it

00:14:39,010 --> 00:14:45,459
should

00:14:41,070 --> 00:14:50,860
there's the superficial restriction

00:14:45,459 --> 00:14:52,930
which is a great way of saying I do have

00:14:50,860 --> 00:14:55,350
an outer package test but I'm not

00:14:52,930 --> 00:14:59,649
actually testing my package

00:14:55,350 --> 00:15:02,740
substantially which the release team

00:14:59,649 --> 00:15:06,510
very much appreciates if you had that to

00:15:02,740 --> 00:15:14,220
test that basically just run a help

00:15:06,510 --> 00:15:20,410
command on a binary test that needs

00:15:14,220 --> 00:15:23,950
internet outside of installing binary

00:15:20,410 --> 00:15:27,430
packages via opt really should mark

00:15:23,950 --> 00:15:31,990
themselves with new needs Internet

00:15:27,430 --> 00:15:34,720
restriction this is not deployed on CI

00:15:31,990 --> 00:15:40,420
de Debian on that but we really should

00:15:34,720 --> 00:15:45,820
do this on our main shine land chat in

00:15:40,420 --> 00:15:50,700
mainland China workers to avoid failing

00:15:45,820 --> 00:15:50,700
test when a surface cannot be reached

00:15:51,120 --> 00:16:03,220
and then we have a restriction which you

00:15:58,270 --> 00:16:05,770
can use for instance if your test

00:16:03,220 --> 00:16:07,570
dependencies don't migrate to testing

00:16:05,770 --> 00:16:12,339
but you want to attack package to

00:16:07,570 --> 00:16:16,120
migrate you can test it and unstable or

00:16:12,339 --> 00:16:20,650
maybe like one of my packages it runs

00:16:16,120 --> 00:16:21,790
against MySQL and against Maria DB but

00:16:20,650 --> 00:16:26,830
Debian

00:16:21,790 --> 00:16:30,190
have MySQL in testing so I do have the

00:16:26,830 --> 00:16:33,040
two tests especially for Ubuntu but I

00:16:30,190 --> 00:16:36,100
market skip not installable that the

00:16:33,040 --> 00:16:39,760
test is skipped if one of the

00:16:36,100 --> 00:16:43,210
requirements is not available and the

00:16:39,760 --> 00:16:48,370
last one is to mark a tests capable you

00:16:43,210 --> 00:16:51,910
can exit with 77 and the test well the

00:16:48,370 --> 00:16:56,020
result will be ignored if it fails this

00:16:51,910 --> 00:16:58,930
can for instance be done if you can only

00:16:56,020 --> 00:17:03,670
run a test on a certain our architecture

00:16:58,930 --> 00:17:05,410
oh yes you have a question I completely

00:17:03,670 --> 00:17:09,070
missed the skip not infallible

00:17:05,410 --> 00:17:12,070
restriction that's news to me

00:17:09,070 --> 00:17:15,400
it is it just for test dependencies or

00:17:12,070 --> 00:17:19,080
for also for the business of the package

00:17:15,400 --> 00:17:23,980
is being tested this restriction is on

00:17:19,080 --> 00:17:28,630
calls to opt so if opt fails to install

00:17:23,980 --> 00:17:34,180
the packages it will out of package test

00:17:28,630 --> 00:17:38,760
will exceed 77 internally and the test

00:17:34,180 --> 00:17:38,760
will be marked skipped okay nice

00:17:40,860 --> 00:17:53,010
recently out well actually I told f8 has

00:17:46,350 --> 00:17:57,130
got a bit better support for nearly

00:17:53,010 --> 00:18:01,180
default situations where the main one is

00:17:57,130 --> 00:18:05,020
Python modules if the Python module does

00:18:01,180 --> 00:18:08,760
not match the binary package name then

00:18:05,020 --> 00:18:11,380
you can actually tell how to debate so

00:18:08,760 --> 00:18:14,410
such that you can still use out of the

00:18:11,380 --> 00:18:19,810
eight even if the module doesn't match

00:18:14,410 --> 00:18:23,770
the binary package name a bit to say

00:18:19,810 --> 00:18:26,860
about that it also supports adding new

00:18:23,770 --> 00:18:31,510
test affinities and restrictions to any

00:18:26,860 --> 00:18:34,210
package type so for instance if you run

00:18:31,510 --> 00:18:36,210
the upstream test suite with any

00:18:34,210 --> 00:18:38,640
supported package type in there

00:18:36,210 --> 00:18:42,000
that's Whitney's internet connection you

00:18:38,640 --> 00:18:45,030
can declare that to need to add the

00:18:42,000 --> 00:18:47,880
needs internet restriction for instance

00:18:45,030 --> 00:18:51,180
or or any other one so that works for

00:18:47,880 --> 00:18:55,100
all package types in new package types

00:18:51,180 --> 00:18:55,100
will be mandated to support that as well

00:18:55,130 --> 00:19:06,840
right and last so then I go for the next

00:19:01,680 --> 00:19:11,790
point last year we had a outreach e

00:19:06,840 --> 00:19:16,190
student who worked on DEP see especially

00:19:11,790 --> 00:19:20,520
in the area of the self-service pages so

00:19:16,190 --> 00:19:24,720
anybody that has a self sign arms

00:19:20,520 --> 00:19:31,440
certificate can request tests on see

00:19:24,720 --> 00:19:34,350
idle Deb in dotnet and Antonio recently

00:19:31,440 --> 00:19:37,740
worked on a major overhaul of the FCI

00:19:34,350 --> 00:19:40,980
internally which enables us to make the

00:19:37,740 --> 00:19:44,180
webpages much more frequent and it was

00:19:40,980 --> 00:19:54,450
solving a bit of the infrastructure

00:19:44,180 --> 00:19:57,390
problems that we were seeing I we also

00:19:54,450 --> 00:20:04,250
added a whole bunch of links in the

00:19:57,390 --> 00:20:04,250
ether pad for reference to earlier buffs

00:20:05,840 --> 00:20:14,430
I'm not so much involved but I think ena

00:20:09,630 --> 00:20:19,290
is also in the in the meeting here so

00:20:14,430 --> 00:20:23,010
salsa reason Bob is supporting the outer

00:20:19,290 --> 00:20:26,250
packages test pipelines so you can run

00:20:23,010 --> 00:20:30,770
your outer package test also on every

00:20:26,250 --> 00:20:38,430
commit to salsa there's a couple of

00:20:30,770 --> 00:20:40,470
links to wiki pages more backups and in

00:20:38,430 --> 00:20:46,830
the last one and a half year I filed

00:20:40,470 --> 00:20:50,130
about 100 1070 regression bugs overall

00:20:46,830 --> 00:20:56,460
and they can be find with Debian

00:20:50,130 --> 00:21:00,270
see I use a tag in the BTS and actually

00:20:56,460 --> 00:21:02,850
the testing in stable and old stable

00:21:00,270 --> 00:21:05,790
already has prevented one package from

00:21:02,850 --> 00:21:09,240
being included in the stable release

00:21:05,790 --> 00:21:16,860
update because it was causing a

00:21:09,240 --> 00:21:22,820
regression so then I think we get to the

00:21:16,860 --> 00:21:27,090
point where we can go into discussion of

00:21:22,820 --> 00:21:31,470
tips and tricks so I already provided

00:21:27,090 --> 00:21:34,250
quite a few items in the ether pad but

00:21:31,470 --> 00:21:36,870
maybe people already have questions or

00:21:34,250 --> 00:21:41,100
great ideas what others should also

00:21:36,870 --> 00:21:45,800
follow so please if anybody has anything

00:21:41,100 --> 00:21:45,800
to contribute feel free

00:21:50,840 --> 00:21:57,470
I have to say that yesterday we noticed

00:21:55,220 --> 00:22:00,980
that there is a lot of gold in those old

00:21:57,470 --> 00:22:04,490
boss notes and we should do a better job

00:22:00,980 --> 00:22:07,640
of picking them up in putting them in

00:22:04,490 --> 00:22:11,110
the wiki documentation so if anyone is

00:22:07,640 --> 00:22:13,820
willing to help with that talk to us

00:22:11,110 --> 00:22:16,070
yeah I already went over a couple of

00:22:13,820 --> 00:22:20,540
them and already included a couple in

00:22:16,070 --> 00:22:23,050
the text below so how nice I'm not

00:22:20,540 --> 00:22:32,360
saying it's complete but at least a

00:22:23,050 --> 00:22:36,230
first attempt I'm not actually seeing

00:22:32,360 --> 00:22:38,810
what's in the stream anymore so I'll

00:22:36,230 --> 00:22:44,540
feel free to interrupt her heads above

00:22:38,810 --> 00:22:49,040
so really anybody can add but I can just

00:22:44,540 --> 00:22:59,720
continue with the tricks and the greater

00:22:49,040 --> 00:23:03,500
common practices so one of the ideas of

00:22:59,720 --> 00:23:07,010
how the release team runs the test

00:23:03,500 --> 00:23:13,400
Suites is by running an outer package

00:23:07,010 --> 00:23:15,830
test for a certain package sorry if you

00:23:13,400 --> 00:23:17,990
upload a package too unstable then all

00:23:15,830 --> 00:23:23,540
the reverse dependencies of your tests

00:23:17,990 --> 00:23:26,840
are tested but this also means that if

00:23:23,540 --> 00:23:31,310
you're interested to see if a certain

00:23:26,840 --> 00:23:35,680
package breaks your package you can

00:23:31,310 --> 00:23:38,930
actually add and if you're not a direct

00:23:35,680 --> 00:23:42,530
reverse dependency of it you can make a

00:23:38,930 --> 00:23:49,390
dummy test and add it to the test

00:23:42,530 --> 00:23:54,110
restrictions to the test dependencies so

00:23:49,390 --> 00:23:59,150
for instance diggit is doing this to

00:23:54,110 --> 00:24:01,700
test a couple of it's not direct

00:23:59,150 --> 00:24:04,310
dependencies because of alternatives but

00:24:01,700 --> 00:24:10,660
it wants to be sure that any other

00:24:04,310 --> 00:24:12,920
it gets tested and that does that in

00:24:10,660 --> 00:24:15,320
influence the testing migration for

00:24:12,920 --> 00:24:17,900
instance if some tool that I used just

00:24:15,320 --> 00:24:19,910
for running the tests causes a

00:24:17,900 --> 00:24:20,990
regression of my test is it blocked from

00:24:19,910 --> 00:24:28,730
my grading

00:24:20,990 --> 00:24:31,940
yes okay so the test that can block you

00:24:28,730 --> 00:24:38,270
from migrating are your reverse

00:24:31,940 --> 00:24:42,430
dependencies and packages that declare

00:24:38,270 --> 00:24:47,300
your package as being a test dependency

00:24:42,430 --> 00:24:49,760
so basically every any-any

00:24:47,300 --> 00:24:52,790
out package test that gets run because

00:24:49,760 --> 00:24:58,820
you upload a package can potentially

00:24:52,790 --> 00:25:02,420
block your vibration so that helps catch

00:24:58,820 --> 00:25:05,570
for instance testing tools that break

00:25:02,420 --> 00:25:08,350
compatibility and that is like direct

00:25:05,570 --> 00:25:12,140
dependency yes and that has happened

00:25:08,350 --> 00:25:15,590
already quite a bit especially I think

00:25:12,140 --> 00:25:24,440
in the Python area one of the Python

00:25:15,590 --> 00:25:30,080
helpers so that's also a thing too it

00:25:24,440 --> 00:25:32,210
may be good to make clear a when we say

00:25:30,080 --> 00:25:35,980
something is a regression it doesn't

00:25:32,210 --> 00:25:38,900
necessarily mean that the package that

00:25:35,980 --> 00:25:41,960
causes the so called regression needs to

00:25:38,900 --> 00:25:44,950
be fixed that's important to realize

00:25:41,960 --> 00:25:47,780
that it's just a test that fails and

00:25:44,950 --> 00:25:51,290
apparently the test was relying on old

00:25:47,780 --> 00:25:53,510
behavior that's not there anymore that

00:25:51,290 --> 00:25:57,020
can mean that either that behavior

00:25:53,510 --> 00:25:58,910
should come back or the test needs to be

00:25:57,020 --> 00:26:01,790
updated because of the changed behavior

00:25:58,910 --> 00:26:06,980
may be that the change behavior is due

00:26:01,790 --> 00:26:12,770
to a bug fix and then that the test is

00:26:06,980 --> 00:26:15,530
just wrong in blocking in that sense

00:26:12,770 --> 00:26:17,520
yeah yeah I think it happened with me

00:26:15,530 --> 00:26:20,910
recently also right

00:26:17,520 --> 00:26:24,630
it happens all the time yeah and that's

00:26:20,910 --> 00:26:27,540
one of the reasons why I file nearly all

00:26:24,630 --> 00:26:31,640
the books that I do file against both

00:26:27,540 --> 00:26:33,750
packages so I've been filing all my bugs

00:26:31,640 --> 00:26:37,260
against the package that just got

00:26:33,750 --> 00:26:40,710
uploaded and at the same time I file it

00:26:37,260 --> 00:26:44,120
against the package that has the outer

00:26:40,710 --> 00:26:47,730
package test that fails and say please

00:26:44,120 --> 00:26:50,100
align between the two of you what needs

00:26:47,730 --> 00:26:52,740
to happen because as a bystander it's

00:26:50,100 --> 00:26:57,630
most of the time extremely difficult to

00:26:52,740 --> 00:26:59,370
judge and the person that uploaded a

00:26:57,630 --> 00:27:02,430
package knows what changed in his

00:26:59,370 --> 00:27:04,140
package the person that has the outer

00:27:02,430 --> 00:27:09,540
package tears knows what he's actually

00:27:04,140 --> 00:27:13,110
testing and they need to communicate and

00:27:09,540 --> 00:27:17,790
align on on on what update needs to

00:27:13,110 --> 00:27:19,710
happen and what I make also when I found

00:27:17,790 --> 00:27:22,200
these bugs I filed them against the

00:27:19,710 --> 00:27:26,310
version of the just uploaded package

00:27:22,200 --> 00:27:29,790
which is in unstable and against the

00:27:26,310 --> 00:27:33,120
outer package test containing package

00:27:29,790 --> 00:27:36,770
which is in testing and the severity of

00:27:33,120 --> 00:27:39,120
the bugs is serious which means that the

00:27:36,770 --> 00:27:42,300
regression causing package will not

00:27:39,120 --> 00:27:47,720
migrate but also as long as it's not a

00:27:42,300 --> 00:27:50,960
key package the package that causes the

00:27:47,720 --> 00:27:56,910
contains the failing outer jacket test

00:27:50,960 --> 00:27:59,460
is legible for auto removal so basically

00:27:56,910 --> 00:28:02,450
also there's an incentive for both to

00:27:59,460 --> 00:28:02,450
actually fix the situation

00:28:11,650 --> 00:28:23,230
no questions to that the next trick

00:28:19,190 --> 00:28:28,000
that's on the list and it's still on my

00:28:23,230 --> 00:28:32,420
list to actually check how to do that is

00:28:28,000 --> 00:28:41,270
that Nome is using the accessibility bus

00:28:32,420 --> 00:28:44,330
to test Louise so that has a apart from

00:28:41,270 --> 00:28:46,100
being able to test if gue e works as you

00:28:44,330 --> 00:28:47,860
expect it to be it also has the

00:28:46,100 --> 00:28:52,730
advantage that you're actually testing

00:28:47,860 --> 00:28:56,210
accessibility so it's a great thing to

00:28:52,730 --> 00:28:59,120
consider if you if you want to test the

00:28:56,210 --> 00:29:08,840
GUI because you're testing two things at

00:28:59,120 --> 00:29:15,170
the same time which is great I entered a

00:29:08,840 --> 00:29:17,870
section in the ether pad for improvement

00:29:15,170 --> 00:29:21,429
suggestions and already wrote down a

00:29:17,870 --> 00:29:27,380
couple myself but please add items if

00:29:21,429 --> 00:29:31,790
people have some so a couple of things

00:29:27,380 --> 00:29:33,830
that I just came up with and some of

00:29:31,790 --> 00:29:37,360
them are already on our addition list

00:29:33,830 --> 00:29:43,490
for a while is we'd like to support

00:29:37,360 --> 00:29:46,250
isolation machine restriction obviously

00:29:43,490 --> 00:29:49,850
it needs work and it's not trivial

00:29:46,250 --> 00:29:57,080
but in yeah we would like to have that

00:29:49,850 --> 00:30:03,020
one of the things that recently started

00:29:57,080 --> 00:30:12,559
to come up is that some tests run fine

00:30:03,020 --> 00:30:17,630
on amd64 but may fail on arm 64 or PPC

00:30:12,559 --> 00:30:21,289
460 L even and for the maintainer it may

00:30:17,630 --> 00:30:25,580
just be too much work to go fix

00:30:21,289 --> 00:30:28,880
the test on on a different architecture

00:30:25,580 --> 00:30:32,480
so it would be nice if the framework

00:30:28,880 --> 00:30:35,380
would already support saying well this

00:30:32,480 --> 00:30:36,710
test is only support supposed to run on

00:30:35,380 --> 00:30:41,570
amd64

00:30:36,710 --> 00:30:42,830
or whatever architecture you want I have

00:30:41,570 --> 00:30:48,139
a question about that

00:30:42,830 --> 00:30:52,850
yes so on the portal boxes we have nice

00:30:48,139 --> 00:30:56,929
as change route integration to test

00:30:52,850 --> 00:30:59,059
build packages is there some recipe or s

00:30:56,929 --> 00:31:02,480
has some work done to include auto

00:30:59,059 --> 00:31:04,549
package tests into that because I'm not

00:31:02,480 --> 00:31:06,559
sure it would work just like that or can

00:31:04,549 --> 00:31:09,380
you just run the other package tests on

00:31:06,559 --> 00:31:10,899
the part of boxes and then debug it like

00:31:09,380 --> 00:31:15,350
this

00:31:10,899 --> 00:31:17,360
so if depends on your test so if your

00:31:15,350 --> 00:31:20,539
test just runs a two and checks the

00:31:17,360 --> 00:31:23,210
output and doesn't need services running

00:31:20,539 --> 00:31:26,299
or in your or anything else then it

00:31:23,210 --> 00:31:28,179
should work I mean you should be able to

00:31:26,299 --> 00:31:34,309
run the out of package test against a

00:31:28,179 --> 00:31:36,409
chroot or even running from inside the

00:31:34,309 --> 00:31:40,429
day's change route running with the new

00:31:36,409 --> 00:31:43,880
visualization so it should work but if

00:31:40,429 --> 00:31:45,440
your tests need it's not a tactical yeah

00:31:43,880 --> 00:31:50,600
yeah you need to restore the fact oh

00:31:45,440 --> 00:31:53,179
yeah there's this the SSD is a wrapper

00:31:50,600 --> 00:31:56,510
around so yeah we think it's not all

00:31:53,179 --> 00:31:58,519
arbitrary it would be nice to have some

00:31:56,510 --> 00:32:01,820
kind of integration there's otherwise

00:31:58,519 --> 00:32:06,799
sure you can copy/paste all but install

00:32:01,820 --> 00:32:09,740
these yeah but if you could work with

00:32:06,799 --> 00:32:11,299
DSA or whoever did this there is just

00:32:09,740 --> 00:32:15,909
one off command to run all the package

00:32:11,299 --> 00:32:15,909
tests automatically installs that

00:32:19,330 --> 00:32:26,210
another way of doing it would be to add

00:32:22,960 --> 00:32:28,549
or support for other architectures in

00:32:26,210 --> 00:32:31,309
the software

00:32:28,549 --> 00:32:33,920
add new salsa runners running these

00:32:31,309 --> 00:32:39,320
architectures

00:32:33,920 --> 00:32:48,770
that also works at work we use arm 64 CI

00:32:39,320 --> 00:32:55,360
runners on gitlab in just one yeah yeah

00:32:48,770 --> 00:32:57,560
you're right you know just say if

00:32:55,360 --> 00:33:00,140
distinction between things that aren't

00:32:57,560 --> 00:33:04,370
working today on other architectures or

00:33:00,140 --> 00:33:07,370
shouldn't work in other architectures in

00:33:04,370 --> 00:33:09,410
principle someone like me should come

00:33:07,370 --> 00:33:12,440
along and make you work out why doesn't

00:33:09,410 --> 00:33:15,230
work on I'm 64 if it should and fix

00:33:12,440 --> 00:33:19,970
things or Antonia or even some of us get

00:33:15,230 --> 00:33:22,040
paid for this stuff have but obviously

00:33:19,970 --> 00:33:24,710
maintain is you know they might just

00:33:22,040 --> 00:33:26,000
know this is x86 only sort of thing in

00:33:24,710 --> 00:33:27,620
general if it builds on the other

00:33:26,000 --> 00:33:29,420
architecture it should probably work as

00:33:27,620 --> 00:33:33,020
well and I can't the offhand think of

00:33:29,420 --> 00:33:39,440
tests which are specific but I guess you

00:33:33,020 --> 00:33:46,150
could write them yeah so my point here

00:33:39,440 --> 00:33:49,280
really is that so

00:33:46,150 --> 00:33:51,560
you may want to start using outer

00:33:49,280 --> 00:33:55,370
package tests but you're not ready to

00:33:51,560 --> 00:33:57,050
commit to all the architectures and you

00:33:55,370 --> 00:33:59,390
may just want to be able to say well

00:33:57,050 --> 00:34:01,130
these are I can now support and of

00:33:59,390 --> 00:34:06,050
course you in the end want to get rid of

00:34:01,130 --> 00:34:09,470
all of them yeah it is obviously already

00:34:06,050 --> 00:34:12,320
possible because of the skippable

00:34:09,470 --> 00:34:16,040
restriction but then everybody needs to

00:34:12,320 --> 00:34:19,280
start implementing detects the

00:34:16,040 --> 00:34:22,160
architecture and exit 77 in case of

00:34:19,280 --> 00:34:23,990
unsupported architecture yeah I guess my

00:34:22,160 --> 00:34:25,700
thinking is we should try to employ the

00:34:23,990 --> 00:34:28,160
same principle we did in Debian

00:34:25,700 --> 00:34:31,910
generally which is you know people go oh

00:34:28,160 --> 00:34:33,050
well only care about MD 64 so they set

00:34:31,910 --> 00:34:34,520
the architecture down and you build on

00:34:33,050 --> 00:34:35,960
that and you go no that's wrong you know

00:34:34,520 --> 00:34:38,240
it doesn't work under architectures

00:34:35,960 --> 00:34:40,850
leave it trying to build on all of them

00:34:38,240 --> 00:34:43,340
and it carries on failing and we shan't

00:34:40,850 --> 00:34:46,429
we shan't stop your thing migrating

00:34:43,340 --> 00:34:47,840
until unless it's regressed because he

00:34:46,429 --> 00:34:51,250
used to work and now it's broken

00:34:47,840 --> 00:34:53,480
if it's never fine so if we can try and

00:34:51,250 --> 00:34:55,610
think about it that way I think that's

00:34:53,480 --> 00:34:57,140
that's better in the long term rather

00:34:55,610 --> 00:34:58,430
than encouraging maintain is to just

00:34:57,140 --> 00:35:04,340
mark things now doesn't work on other

00:34:58,430 --> 00:35:09,320
architectures who cares even so in the

00:35:04,340 --> 00:35:12,170
release team we have well also written

00:35:09,320 --> 00:35:14,960
to the announce list that we consider

00:35:12,170 --> 00:35:18,940
all failures in testing currently

00:35:14,960 --> 00:35:26,350
already as RC bug we want lossing test

00:35:18,940 --> 00:35:32,030
and that counts for any 64 as well so ok

00:35:26,350 --> 00:35:35,090
it's sorry go ahead now one of one of

00:35:32,030 --> 00:35:39,140
the points is that sometimes also tests

00:35:35,090 --> 00:35:42,500
regress in testing without being caught

00:35:39,140 --> 00:35:46,640
by the migration tooling especially

00:35:42,500 --> 00:35:50,960
because we don't test the full reverse

00:35:46,640 --> 00:35:54,710
dependency tree but only one level and

00:35:50,960 --> 00:35:59,990
there's flaky tests and all that and you

00:35:54,710 --> 00:36:01,910
don't want to make that all vaguely and

00:35:59,990 --> 00:36:05,770
then basically the statement is if it

00:36:01,910 --> 00:36:05,770
fails it's not a good outer package test

00:36:06,370 --> 00:36:12,530
and obviously then that has the drawback

00:36:08,990 --> 00:36:21,830
that it should work on all or well

00:36:12,530 --> 00:36:23,720
cordially we say amd64 and arm 64 in

00:36:21,830 --> 00:36:25,970
your experience is it more common that

00:36:23,720 --> 00:36:29,990
the package itself fails or just is just

00:36:25,970 --> 00:36:40,850
an artifact of the tests which not be so

00:36:29,990 --> 00:36:42,740
good obviously in some tests and that's

00:36:40,850 --> 00:36:46,240
actually one of the items in the

00:36:42,740 --> 00:36:51,320
recommendations below is actually

00:36:46,240 --> 00:36:53,600
captures specific output and of course

00:36:51,320 --> 00:36:55,750
that sometimes depends on the

00:36:53,600 --> 00:36:58,550
architecture that you run the test on oh

00:36:55,750 --> 00:37:00,530
the person that wrote the task captured

00:36:58,550 --> 00:37:01,200
something on his architecture and

00:37:00,530 --> 00:37:03,630
embedded

00:37:01,200 --> 00:37:12,089
in the test and no work in another

00:37:03,630 --> 00:37:14,730
architecture so I have some stupid

00:37:12,089 --> 00:37:16,020
questions I'm not sure it's very useful

00:37:14,730 --> 00:37:17,400
because basically I haven't used auto

00:37:16,020 --> 00:37:19,049
packaged tests at all I've been vaguely

00:37:17,400 --> 00:37:20,490
aware that it existed for years and I

00:37:19,049 --> 00:37:22,829
really should use it and none of my

00:37:20,490 --> 00:37:24,839
packages do though in just read the

00:37:22,829 --> 00:37:26,160
instructions five minutes ago so it

00:37:24,839 --> 00:37:29,069
seems you basically run an arbitrary

00:37:26,160 --> 00:37:30,809
script yes yes that's what the tests are

00:37:29,069 --> 00:37:32,849
okay so you can write so do we have a

00:37:30,809 --> 00:37:35,270
set of standard tests you can stick in

00:37:32,849 --> 00:37:37,799
to save people writing shitty scripts

00:37:35,270 --> 00:37:43,020
the normal things like I don't know

00:37:37,799 --> 00:37:44,700
installs and yeah so one of the

00:37:43,020 --> 00:37:46,890
recommendations says please don't

00:37:44,700 --> 00:37:51,420
install stuff we have few parts for that

00:37:46,890 --> 00:37:54,480
right yeah okay but so the idea is you

00:37:51,420 --> 00:37:56,309
run an outer package test and that's in

00:37:54,480 --> 00:37:58,530
the best practices section in the

00:37:56,309 --> 00:38:04,500
important line it says you run on

00:37:58,530 --> 00:38:07,710
install packages that's the idea and you

00:38:04,500 --> 00:38:10,349
can have the your your install package

00:38:07,710 --> 00:38:18,390
do anything you want that you can think

00:38:10,349 --> 00:38:21,420
of I've seen huge variation of what is

00:38:18,390 --> 00:38:23,640
actually testing how do we check how do

00:38:21,420 --> 00:38:26,549
we have built-in things for looking in

00:38:23,640 --> 00:38:28,079
output for yeah because this problem the

00:38:26,549 --> 00:38:29,930
outputs not always absolutely consistent

00:38:28,079 --> 00:38:33,359
so you can't compare against a file

00:38:29,930 --> 00:38:36,089
necessarily well some people do or some

00:38:33,359 --> 00:38:38,270
touched you yeah there are several tools

00:38:36,089 --> 00:38:42,530
that can help you so that there's

00:38:38,270 --> 00:38:47,430
there's even unit test frameworks for

00:38:42,530 --> 00:38:49,710
shell scripts so you in writer said that

00:38:47,430 --> 00:38:55,410
there is a tool very nice - called CLI

00:38:49,710 --> 00:38:57,630
test where the input is a something that

00:38:55,410 --> 00:39:00,690
looks like a shell session so you have

00:38:57,630 --> 00:39:03,299
dollar sign space command and then below

00:39:00,690 --> 00:39:05,069
you have the expected output and then

00:39:03,299 --> 00:39:08,540
the test runs against that and checks

00:39:05,069 --> 00:39:12,420
that that that's what happens okay very

00:39:08,540 --> 00:39:14,609
cool yeah I guess examples of things is

00:39:12,420 --> 00:39:15,050
a good thing - getting people like me

00:39:14,609 --> 00:39:17,120
going

00:39:15,050 --> 00:39:25,040
like anybody should do this how does it

00:39:17,120 --> 00:39:27,140
work yeah it's it's the last item on

00:39:25,040 --> 00:39:32,300
this improvement suggestions to gather

00:39:27,140 --> 00:39:34,760
example somewhere yes I came up in the

00:39:32,300 --> 00:39:37,000
past before in the CIA I don't develop

00:39:34,760 --> 00:39:40,580
net documentation there is a tutorial

00:39:37,000 --> 00:39:43,640
there's a transcription of my Def Con 15

00:39:40,580 --> 00:39:46,520
talk and it's a little dated but it has

00:39:43,640 --> 00:39:47,900
some examples already right about even

00:39:46,520 --> 00:39:57,130
seen it already and ganya I should do

00:39:47,900 --> 00:40:00,110
that yeah okay yeah but to give a

00:39:57,130 --> 00:40:04,520
completely different example one of my

00:40:00,110 --> 00:40:09,080
packages just recursively curls over the

00:40:04,520 --> 00:40:12,380
web pages of the framework that I'm

00:40:09,080 --> 00:40:15,080
packaging so it just starts at the index

00:40:12,380 --> 00:40:16,460
dot HTML page and recursively goes over

00:40:15,080 --> 00:40:17,540
all of them and catches all kind of

00:40:16,460 --> 00:40:22,670
weird

00:40:17,540 --> 00:40:26,300
uttering bugs as well off I mean it's

00:40:22,670 --> 00:40:28,730
it's crude but it's extremely efficient

00:40:26,300 --> 00:40:29,600
already yeah yeah okay so Paul one thing

00:40:28,730 --> 00:40:31,460
you should know is I've been

00:40:29,600 --> 00:40:33,710
specifically tasked with make sure that

00:40:31,460 --> 00:40:36,830
CI works on arm 64 the same as it does

00:40:33,710 --> 00:40:38,120
on x86 so if there's anything I mean it

00:40:36,830 --> 00:40:40,430
seems that we have infrastructure now so

00:40:38,120 --> 00:40:43,010
that's the first thing fixed but if you

00:40:40,430 --> 00:40:45,980
if you come out of specific problems you

00:40:43,010 --> 00:40:47,120
know feel free to pester me there's

00:40:45,980 --> 00:40:49,280
people I would like this stuff to work

00:40:47,120 --> 00:40:53,510
well so you know we can get things done

00:40:49,280 --> 00:41:00,440
know are you on the nmj channel and no I

00:40:53,510 --> 00:41:02,950
don't suppose I am yeah I don't think

00:41:00,440 --> 00:41:02,950
I've seen

00:41:04,180 --> 00:41:12,110
very arm specific yeah I mean in general

00:41:08,570 --> 00:41:16,490
so she just worked right there is there

00:41:12,110 --> 00:41:18,080
are people who care and I'll prepared to

00:41:16,490 --> 00:41:22,160
spend engineering resource on it which

00:41:18,080 --> 00:41:23,750
is always the important bit no rookie on

00:41:22,160 --> 00:41:27,530
see I thought they were not met there's

00:41:23,750 --> 00:41:28,730
a if you if you feel from status one of

00:41:27,530 --> 00:41:32,230
the I think there

00:41:28,730 --> 00:41:36,820
architecture is platform specific issues

00:41:32,230 --> 00:41:42,050
so you can find stuff that passes on a

00:41:36,820 --> 00:41:44,720
ms-64 and failures on our 64 and the

00:41:42,050 --> 00:41:46,640
other way around as well I just joined

00:41:44,720 --> 00:41:49,460
hashtag Ian - CEO and there's nobody

00:41:46,640 --> 00:41:50,300
else this that can't be right drive it

00:41:49,460 --> 00:41:52,640
okay

00:41:50,300 --> 00:42:01,339
it's pretty exclusive cool it's just

00:41:52,640 --> 00:42:08,960
empty I not Debian - okay I'm sharing my

00:42:01,339 --> 00:42:12,260
screen so I can show it so right here we

00:42:08,960 --> 00:42:14,270
have platform specific issues so there's

00:42:12,260 --> 00:42:16,400
a list of stuff that has different

00:42:14,270 --> 00:42:24,220
results okay so give any motion like

00:42:16,400 --> 00:42:27,680
angel I mean maybe we should exclude the

00:42:24,220 --> 00:42:30,260
when it's the switch changes because

00:42:27,680 --> 00:42:33,740
here it's a test something that fails in

00:42:30,260 --> 00:42:38,900
testing doesn't have a resume stable but

00:42:33,740 --> 00:42:42,560
if you yeah if this G's listing should

00:42:38,900 --> 00:42:43,099
be cleaned up on each I I agree with

00:42:42,560 --> 00:42:49,130
that

00:42:43,099 --> 00:42:53,410
tonio ever yeah we should consider just

00:42:49,130 --> 00:42:55,730
architectures here in not suite because

00:42:53,410 --> 00:43:01,160
testing versus on stay with already

00:42:55,730 --> 00:43:05,810
caught in other places yeah so this is

00:43:01,160 --> 00:43:10,760
not so useful you know what I said it

00:43:05,810 --> 00:43:16,089
could be every week we can search for

00:43:10,760 --> 00:43:16,089
arm 64 here to see a new thing comes up

00:43:18,550 --> 00:43:24,950
well so for instance this one it fails

00:43:21,710 --> 00:43:33,109
on 164 but passes on unstable be

00:43:24,950 --> 00:43:35,869
successful okay okay well thank you time

00:43:33,109 --> 00:43:38,359
is unfortunately up but that has been a

00:43:35,869 --> 00:43:40,250
very interesting buff and yeah if

00:43:38,359 --> 00:43:42,110
anyone's got any more questions or want

00:43:40,250 --> 00:43:46,100
to discuss a bit further

00:43:42,110 --> 00:43:49,220
Dave see I on IRC or in the mini debconf

00:43:46,100 --> 00:43:52,280
online IRC channel there's going to be

00:43:49,220 --> 00:43:54,860
short break now and thank you for all

00:43:52,280 --> 00:43:57,740
those who participated in the buff and

00:43:54,860 --> 00:44:00,020
it all next our next talk would be dead

00:43:57,740 --> 00:44:03,350
plate building many binary packages with

00:44:00,020 --> 00:44:08,420
templates at or one o'clock UTC and

00:44:03,350 --> 00:44:10,750
that's by Benner thanks Jeff all right

00:44:08,420 --> 00:44:10,750

YouTube URL: https://www.youtube.com/watch?v=y5CMEuAo-5A


