Title: Debian Science BoF
Publication date: 2020-10-23
Playlist: DebConf 20
Description: 
	by Andreas Tille
by Anton Gladky
by Alastair McKinstry

At: DebConf20
https://debconf20.debconf.org/talks/53-debian-science-bof/

Informal meeting of Debian Science members. Agenda is being updated during the preparation time.

Room: Talks
Scheduled start: 2020-08-24 11:00:00
Captions: 
	00:00:05,839 --> 00:00:09,760
hi guys

00:00:06,640 --> 00:00:10,160
this is a debian science buff registered

00:00:09,760 --> 00:00:14,080
by

00:00:10,160 --> 00:00:17,119
anton gotki mcginty and me andres tiller

00:00:14,080 --> 00:00:19,039
and antoine will now show some a few

00:00:17,119 --> 00:00:19,680
slides for an introduction then we can

00:00:19,039 --> 00:00:22,320
discuss

00:00:19,680 --> 00:00:22,320
some issues

00:00:22,720 --> 00:00:26,960
yeah hello hello everybody my name is

00:00:25,119 --> 00:00:28,880
anton glatki

00:00:26,960 --> 00:00:31,039
and i would like to make a very very

00:00:28,880 --> 00:00:34,320
short introduction

00:00:31,039 --> 00:00:35,360
into this debian science both first of

00:00:34,320 --> 00:00:38,239
all a

00:00:35,360 --> 00:00:39,920
couple of thoughts about me i am working

00:00:38,239 --> 00:00:41,840
at the technical university

00:00:39,920 --> 00:00:43,680
flyback at the institute of mineral

00:00:41,840 --> 00:00:46,079
processing machines

00:00:43,680 --> 00:00:46,879
and i am part of my work is that i am

00:00:46,079 --> 00:00:49,120
doing some

00:00:46,879 --> 00:00:49,920
numerical simulations based on

00:00:49,120 --> 00:00:53,280
particular

00:00:49,920 --> 00:00:56,079
based methods and for my work i need

00:00:53,280 --> 00:00:56,719
an open open source software and that is

00:00:56,079 --> 00:00:59,840
why i'm

00:00:56,719 --> 00:01:03,280
connected to open source software yeah

00:00:59,840 --> 00:01:05,920
and uh yeah let's let's see

00:01:03,280 --> 00:01:06,640
a couple of uh slides about a debian

00:01:05,920 --> 00:01:08,000
science team

00:01:06,640 --> 00:01:11,280
[Music]

00:01:08,000 --> 00:01:13,600
as it's seen from the name it is mostly

00:01:11,280 --> 00:01:16,240
about science software not only science

00:01:13,600 --> 00:01:16,240
software but

00:01:16,400 --> 00:01:19,680
some of software is related to the

00:01:18,479 --> 00:01:22,799
science

00:01:19,680 --> 00:01:24,640
and uh we are a group inside of debian

00:01:22,799 --> 00:01:27,439
we are not an independent part we are

00:01:24,640 --> 00:01:28,159
we are part of debian and uh first of

00:01:27,439 --> 00:01:30,880
all we have

00:01:28,159 --> 00:01:32,079
um two mailing lists for the

00:01:30,880 --> 00:01:34,079
communication

00:01:32,079 --> 00:01:35,840
uh the first one you see here debian

00:01:34,079 --> 00:01:39,200
science maintainers

00:01:35,840 --> 00:01:41,840
at earlier at least debianet were mostly

00:01:39,200 --> 00:01:42,960
maintainer antenna questions are raising

00:01:41,840 --> 00:01:45,920
up and

00:01:42,960 --> 00:01:47,439
are discussing and the second list is uh

00:01:45,920 --> 00:01:50,960
mailing list more general

00:01:47,439 --> 00:01:52,880
it's debian science where a more general

00:01:50,960 --> 00:01:57,439
question can be asked and

00:01:52,880 --> 00:02:01,520
and answered also we have a salsa group

00:01:57,439 --> 00:02:04,799
it's a github gitlab gitlab based

00:02:01,520 --> 00:02:08,000
software where most of our packages are

00:02:04,799 --> 00:02:09,920
placed and maintained so if you want to

00:02:08,000 --> 00:02:11,039
contribute feel free to join this group

00:02:09,920 --> 00:02:14,160
and

00:02:11,039 --> 00:02:16,720
we have about 190 users at the moment

00:02:14,160 --> 00:02:18,239
and we have over 1000 packages there or

00:02:16,720 --> 00:02:21,360
at least projects there

00:02:18,239 --> 00:02:24,239
which are related to their science team

00:02:21,360 --> 00:02:25,200
also we have a wiki page it's not very

00:02:24,239 --> 00:02:28,400
frequently up

00:02:25,200 --> 00:02:31,200
updated but it's possible to

00:02:28,400 --> 00:02:31,680
to use it and to get some information

00:02:31,200 --> 00:02:35,040
about

00:02:31,680 --> 00:02:37,120
soup groups in our team

00:02:35,040 --> 00:02:39,200
also important that we have so-called

00:02:37,120 --> 00:02:42,319
debian science policy

00:02:39,200 --> 00:02:45,280
it's not very strict but some general

00:02:42,319 --> 00:02:46,319
rules are placed there how you can add

00:02:45,280 --> 00:02:48,560
your package in

00:02:46,319 --> 00:02:49,760
into the science team how you can

00:02:48,560 --> 00:02:51,760
maintain it

00:02:49,760 --> 00:02:54,080
what should what should be done in the

00:02:51,760 --> 00:02:55,040
package to be accepted by debian science

00:02:54,080 --> 00:02:58,560
policy

00:02:55,040 --> 00:03:00,560
and i have found that the first commit

00:02:58,560 --> 00:03:04,080
into this policy was done about

00:03:00,560 --> 00:03:07,120
12 years ago so we can say that our

00:03:04,080 --> 00:03:11,280
uh the science science team is about uh

00:03:07,120 --> 00:03:14,720
20 years uh 2012 12 years old

00:03:11,280 --> 00:03:16,080
so as your science team i would like to

00:03:14,720 --> 00:03:20,239
show a couple of

00:03:16,080 --> 00:03:23,599
statistics about the team

00:03:20,239 --> 00:03:27,519
well first slide is shown how many

00:03:23,599 --> 00:03:30,400
packages we have per release

00:03:27,519 --> 00:03:32,200
and the statistic i started from jesse

00:03:30,400 --> 00:03:36,319
release which was done in

00:03:32,200 --> 00:03:39,440
2015 so we had about 388 packages

00:03:36,319 --> 00:03:40,799
and then we had a large jump for about

00:03:39,440 --> 00:03:45,360
300 packages

00:03:40,799 --> 00:03:46,560
between 2015 and 20 2017. it's about 300

00:03:45,360 --> 00:03:49,599
packages

00:03:46,560 --> 00:03:51,280
and after that we have a growth about 20

00:03:49,599 --> 00:03:54,080
packages per release it's not

00:03:51,280 --> 00:03:54,799
a large but i think we are more or less

00:03:54,080 --> 00:03:58,080
stable

00:03:54,799 --> 00:04:01,840
and the team

00:03:58,080 --> 00:04:01,840
is growing slowly

00:04:01,920 --> 00:04:05,599
the next statistic about statistics

00:04:04,560 --> 00:04:08,239
about a number of

00:04:05,599 --> 00:04:10,000
uploaders per release so how many people

00:04:08,239 --> 00:04:12,400
are involved in this team

00:04:10,000 --> 00:04:14,400
to contribute into the software science

00:04:12,400 --> 00:04:16,880
scientific software

00:04:14,400 --> 00:04:19,440
you see also that there are some uh jump

00:04:16,880 --> 00:04:22,479
between jesse in 2015 and

00:04:19,440 --> 00:04:25,759
15 and straight 2017

00:04:22,479 --> 00:04:26,880
it's about 40 people and after that we

00:04:25,759 --> 00:04:32,000
have about 20 people

00:04:26,880 --> 00:04:32,000
uh more in each release

00:04:32,639 --> 00:04:38,800
yeah so this is the list of some

00:04:35,840 --> 00:04:40,320
packages which is packages who are

00:04:38,800 --> 00:04:42,800
having which are having

00:04:40,320 --> 00:04:43,840
the highest popcorn values it's not

00:04:42,800 --> 00:04:45,680
always very good

00:04:43,840 --> 00:04:47,120
number but at least you can see that

00:04:45,680 --> 00:04:49,759
most of packages are

00:04:47,120 --> 00:04:50,880
libraries uh at some mathematical

00:04:49,759 --> 00:04:54,400
libraries linear

00:04:50,880 --> 00:04:56,800
algebra libraries and some

00:04:54,400 --> 00:04:58,080
for example open cv is for a

00:04:56,800 --> 00:05:00,080
computational vision

00:04:58,080 --> 00:05:02,479
library and many others which we are

00:05:00,080 --> 00:05:05,520
maintaining in the team

00:05:02,479 --> 00:05:06,639
uh also we have a software like uh for

00:05:05,520 --> 00:05:09,840
example free card

00:05:06,639 --> 00:05:10,320
and power review are maintained also in

00:05:09,840 --> 00:05:14,320
this

00:05:10,320 --> 00:05:18,240
team yeah and uh the last uh

00:05:14,320 --> 00:05:20,639
statistic page is about uh how

00:05:18,240 --> 00:05:22,840
statistic uploaders and packages of it

00:05:20,639 --> 00:05:26,320
means

00:05:22,840 --> 00:05:29,680
every uh member of uh science team

00:05:26,320 --> 00:05:31,759
have a particular number of uh packages

00:05:29,680 --> 00:05:34,479
and as you can see

00:05:31,759 --> 00:05:34,960
some people are having over 80 packages

00:05:34,479 --> 00:05:36,720
which

00:05:34,960 --> 00:05:39,039
are maintained by them it's really huge

00:05:36,720 --> 00:05:41,840
number and some people are

00:05:39,039 --> 00:05:42,160
having less packages but at least yeah

00:05:41,840 --> 00:05:45,280
it's

00:05:42,160 --> 00:05:46,720
relatively large so it's almost

00:05:45,280 --> 00:05:48,479
everything from my inside

00:05:46,720 --> 00:05:50,160
i think andreas will continue with the

00:05:48,479 --> 00:05:53,840
statistic and we'll give some more

00:05:50,160 --> 00:05:53,840
information after his talk

00:05:58,560 --> 00:06:02,080
andreas yep yeah and i just switched my

00:06:01,360 --> 00:06:05,680
microphone

00:06:02,080 --> 00:06:07,600
online so here you see

00:06:05,680 --> 00:06:09,360
who are the members of the debian

00:06:07,600 --> 00:06:12,400
science team

00:06:09,360 --> 00:06:13,280
or at least 10 most active members you

00:06:12,400 --> 00:06:15,440
see

00:06:13,280 --> 00:06:17,520
those people who have uploaded over the

00:06:15,440 --> 00:06:20,160
years

00:06:17,520 --> 00:06:21,280
you see since 2000 there are some

00:06:20,160 --> 00:06:25,199
uploads

00:06:21,280 --> 00:06:28,880
and the uploads um became more in the

00:06:25,199 --> 00:06:32,160
2014 2015 and

00:06:28,880 --> 00:06:33,199
we have quite some peak here this is not

00:06:32,160 --> 00:06:36,000
really

00:06:33,199 --> 00:06:36,720
yeah this is not very astonishing

00:06:36,000 --> 00:06:39,039
because we

00:06:36,720 --> 00:06:40,000
we changed to earlier so this is an

00:06:39,039 --> 00:06:43,280
artifact

00:06:40,000 --> 00:06:45,600
in this statistics we have

00:06:43,280 --> 00:06:46,960
discussions on the um deviant science

00:06:45,600 --> 00:06:49,440
user mailing list

00:06:46,960 --> 00:06:51,199
there are other people discussing then

00:06:49,440 --> 00:06:51,599
uploading which is fine since we also

00:06:51,199 --> 00:06:53,599
have

00:06:51,599 --> 00:06:54,800
users who are interested in debian

00:06:53,599 --> 00:06:57,840
science

00:06:54,800 --> 00:07:01,120
we have a developer mailing list which

00:06:57,840 --> 00:07:04,720
is basically synchronizing

00:07:01,120 --> 00:07:07,759
uploads and bug reports

00:07:04,720 --> 00:07:10,880
in in one graph and

00:07:07,759 --> 00:07:12,880
we have people who are hunting bugs

00:07:10,880 --> 00:07:14,240
thanks to anton who is hunting the most

00:07:12,880 --> 00:07:17,840
of the bugs

00:07:14,240 --> 00:07:20,880
and other people are contributing

00:07:17,840 --> 00:07:24,400
as well a lot

00:07:20,880 --> 00:07:27,440
we have commits to our salsa instance

00:07:24,400 --> 00:07:30,319
which are also graphed here it is

00:07:27,440 --> 00:07:31,599
basically reflects people who are doing

00:07:30,319 --> 00:07:34,400
the uploads

00:07:31,599 --> 00:07:35,680
and the good thing is that we have kind

00:07:34,400 --> 00:07:38,560
of a solid

00:07:35,680 --> 00:07:40,639
base of people who are keep on

00:07:38,560 --> 00:07:42,160
contributing to the team and there are

00:07:40,639 --> 00:07:44,319
other teams which have

00:07:42,160 --> 00:07:45,199
single peaks in single years and then

00:07:44,319 --> 00:07:49,120
people are

00:07:45,199 --> 00:07:52,160
going away yeah this is um a graph

00:07:49,120 --> 00:07:54,319
which um represents

00:07:52,160 --> 00:07:55,919
the number of people who are committing

00:07:54,319 --> 00:07:59,199
to a package

00:07:55,919 --> 00:08:02,639
and in my opinion this is um this

00:07:59,199 --> 00:08:04,879
shows a worse situation because you see

00:08:02,639 --> 00:08:07,199
the the majority of package is

00:08:04,879 --> 00:08:09,680
maintained only by a single person

00:08:07,199 --> 00:08:10,879
and the optimal graph would like here's

00:08:09,680 --> 00:08:13,039
zero here

00:08:10,879 --> 00:08:15,039
increasing and then have a curve like

00:08:13,039 --> 00:08:17,360
this because um

00:08:15,039 --> 00:08:18,720
having only one maintainer per package

00:08:17,360 --> 00:08:21,440
means we have a very

00:08:18,720 --> 00:08:22,720
bad run over by bus factor in the demian

00:08:21,440 --> 00:08:26,080
science team

00:08:22,720 --> 00:08:26,560
so it would be great if more than one

00:08:26,080 --> 00:08:29,759
people

00:08:26,560 --> 00:08:31,680
could commit to one package

00:08:29,759 --> 00:08:32,880
well this is actually all i wanted to

00:08:31,680 --> 00:08:38,959
present

00:08:32,880 --> 00:08:43,440
and i now give hand over to alastair to

00:08:38,959 --> 00:08:43,440
continue with his short intro

00:08:46,640 --> 00:08:50,880
your mic is muted please please unmute

00:08:52,160 --> 00:08:55,519
i press the button twice too fast um

00:08:55,120 --> 00:08:57,760
yeah

00:08:55,519 --> 00:08:58,880
i apologize for not preparing for uh

00:08:57,760 --> 00:09:02,399
some slides for this

00:08:58,880 --> 00:09:04,080
uh we are uh

00:09:02,399 --> 00:09:05,600
i think the fact the packaging the

00:09:04,080 --> 00:09:09,200
statistics are good uh

00:09:05,600 --> 00:09:10,720
i think we have a slight um

00:09:09,200 --> 00:09:12,880
slightly misleading in that there is

00:09:10,720 --> 00:09:14,640
also some over there is a significant

00:09:12,880 --> 00:09:17,360
overlap today with

00:09:14,640 --> 00:09:19,040
other teams with the python and with the

00:09:17,360 --> 00:09:21,040
hpc teams which

00:09:19,040 --> 00:09:22,480
a bunch of the packages are not listed

00:09:21,040 --> 00:09:24,240
under um

00:09:22,480 --> 00:09:25,760
and you know there's a lot there's a lot

00:09:24,240 --> 00:09:28,080
of shared

00:09:25,760 --> 00:09:28,080
um

00:09:30,000 --> 00:09:33,040
shared work of course all of that work

00:09:31,839 --> 00:09:35,920
for example

00:09:33,040 --> 00:09:37,600
a lot of work gone and gone recently

00:09:35,920 --> 00:09:39,920
into providing

00:09:37,600 --> 00:09:41,279
python interfaces to all of the code and

00:09:39,920 --> 00:09:43,600
licenses within the

00:09:41,279 --> 00:09:45,360
meteorology community and so all of that

00:09:43,600 --> 00:09:47,040
packages are typically stored under

00:09:45,360 --> 00:09:50,959
python packages rather than the

00:09:47,040 --> 00:09:54,080
science but this is more a

00:09:50,959 --> 00:09:56,640
um uh uh

00:09:54,080 --> 00:09:57,120
a terminology issue we have a question

00:09:56,640 --> 00:09:59,040
we

00:09:57,120 --> 00:10:00,320
have a very active science group within

00:09:59,040 --> 00:10:02,560
both of those

00:10:00,320 --> 00:10:04,480
uh and i think that the from my

00:10:02,560 --> 00:10:07,120
perspective i should i should say that

00:10:04,480 --> 00:10:09,200
one of the key bases is i you know i'm a

00:10:07,120 --> 00:10:12,880
hpc developer working within the

00:10:09,200 --> 00:10:16,079
weather and meteorology community uh so

00:10:12,880 --> 00:10:17,760
we have a shared it's one of the sets of

00:10:16,079 --> 00:10:18,399
licenses are not showing up well in the

00:10:17,760 --> 00:10:21,600
science group

00:10:18,399 --> 00:10:23,120
is the mpi and pitch libraries to try

00:10:21,600 --> 00:10:25,200
and make those scale

00:10:23,120 --> 00:10:26,320
uh which would be the kind of key part

00:10:25,200 --> 00:10:27,600
of our

00:10:26,320 --> 00:10:30,560
of some of the work which i would be

00:10:27,600 --> 00:10:32,880
doing um and so we have

00:10:30,560 --> 00:10:34,160
i would like to see coming from the

00:10:32,880 --> 00:10:36,720
discussions

00:10:34,160 --> 00:10:38,000
from our discussion today uh how people

00:10:36,720 --> 00:10:40,959
think that that should work

00:10:38,000 --> 00:10:42,480
uh so we have a lot of you know what

00:10:40,959 --> 00:10:45,279
kind of things should we be doing

00:10:42,480 --> 00:10:46,320
in the debut in the debian science

00:10:45,279 --> 00:10:49,839
community

00:10:46,320 --> 00:10:51,920
um you know to to push the usage of

00:10:49,839 --> 00:10:54,000
debian science within our

00:10:51,920 --> 00:10:55,839
in our communities for example i'm in

00:10:54,000 --> 00:10:59,920
the hbc community debian

00:10:55,839 --> 00:11:01,839
is um increasingly used in containers

00:10:59,920 --> 00:11:02,320
and so containerization is going to be

00:11:01,839 --> 00:11:05,120
important

00:11:02,320 --> 00:11:05,920
particularly with singularity where it

00:11:05,120 --> 00:11:09,279
was

00:11:05,920 --> 00:11:11,040
only used before mostly on laptops so

00:11:09,279 --> 00:11:12,640
i mean for my case for example with you

00:11:11,040 --> 00:11:14,480
on the high performance computing center

00:11:12,640 --> 00:11:16,640
of ireland

00:11:14,480 --> 00:11:17,600
the operating system that gets used for

00:11:16,640 --> 00:11:20,959
most of our work

00:11:17,600 --> 00:11:23,760
is not debian because we need

00:11:20,959 --> 00:11:25,040
like technical support from a commercial

00:11:23,760 --> 00:11:26,720
vendor

00:11:25,040 --> 00:11:28,720
for the for the for the large machine

00:11:26,720 --> 00:11:30,480
but most of the work that gets done

00:11:28,720 --> 00:11:31,760
on the post-processing and by the

00:11:30,480 --> 00:11:34,320
individual users

00:11:31,760 --> 00:11:36,240
is debian and so the up into operation

00:11:34,320 --> 00:11:38,000
between those becomes key

00:11:36,240 --> 00:11:39,279
and it's kind of i think it's going to

00:11:38,000 --> 00:11:41,680
be important for us

00:11:39,279 --> 00:11:43,519
to work within uh but increasingly

00:11:41,680 --> 00:11:45,360
that's changing as we move to containers

00:11:43,519 --> 00:11:48,800
and we can run singularity and

00:11:45,360 --> 00:11:50,000
darker containers within our hpc systems

00:11:48,800 --> 00:11:52,160
and i think it's going to be important

00:11:50,000 --> 00:11:57,839
that we figure out how we develop

00:11:52,160 --> 00:11:57,839
we work towards that end okay

00:11:58,639 --> 00:12:02,399
uh thank you very much for for your

00:12:00,880 --> 00:12:05,519
interesting information

00:12:02,399 --> 00:12:07,200
uh i think we can uh if you have online

00:12:05,519 --> 00:12:09,360
users uh we can uh

00:12:07,200 --> 00:12:11,920
provide them a link to the other part so

00:12:09,360 --> 00:12:14,480
if you have a question feel free to

00:12:11,920 --> 00:12:15,120
add your information into other part

00:12:14,480 --> 00:12:18,720
which you

00:12:15,120 --> 00:12:22,800
and the link you'll find on the page of

00:12:18,720 --> 00:12:25,120
devconf debian science both

00:12:22,800 --> 00:12:26,320
okay i just wanted to say a couple of

00:12:25,120 --> 00:12:29,839
words about

00:12:26,320 --> 00:12:32,880
um how you can

00:12:29,839 --> 00:12:34,399
contribute and how you can join the

00:12:32,880 --> 00:12:36,320
debian science team

00:12:34,399 --> 00:12:38,399
most of people are common because they

00:12:36,320 --> 00:12:40,399
have a software and

00:12:38,399 --> 00:12:42,720
they want to have it uploaded into the

00:12:40,399 --> 00:12:45,279
archive and in most of cases

00:12:42,720 --> 00:12:46,560
they just upload their package into the

00:12:45,279 --> 00:12:49,360
mentors debian net

00:12:46,560 --> 00:12:50,800
and they just drop a message into the

00:12:49,360 --> 00:12:52,880
one of maiden lists

00:12:50,800 --> 00:12:54,560
and asking for a review and for

00:12:52,880 --> 00:12:56,639
sponsored sponsorship

00:12:54,560 --> 00:12:58,320
and in most of cases it works very good

00:12:56,639 --> 00:13:00,959
so if some

00:12:58,320 --> 00:13:02,240
debian developers are finding at finding

00:13:00,959 --> 00:13:04,079
the time to

00:13:02,240 --> 00:13:05,839
review the package and give a feedback

00:13:04,079 --> 00:13:09,040
or even

00:13:05,839 --> 00:13:11,040
upload the package without any uh any

00:13:09,040 --> 00:13:14,480
questions it works and

00:13:11,040 --> 00:13:18,240
so people can join group and

00:13:14,480 --> 00:13:20,160
it works so uh cool can

00:13:18,240 --> 00:13:23,040
alastair do you have any questions from

00:13:20,160 --> 00:13:23,040
users right now

00:13:26,880 --> 00:13:33,120
i would like to comment a bit on uh

00:13:30,000 --> 00:13:33,519
last year's statement that packages are

00:13:33,120 --> 00:13:37,600
also

00:13:33,519 --> 00:13:41,600
partly in python team and other teams

00:13:37,600 --> 00:13:43,279
from my perspective the debian science

00:13:41,600 --> 00:13:47,279
team

00:13:43,279 --> 00:13:50,320
has just those scientific software

00:13:47,279 --> 00:13:51,120
which it's not put somewhere else for

00:13:50,320 --> 00:13:53,600
instance

00:13:51,120 --> 00:13:55,600
in the deviant-made team we have a lot

00:13:53,600 --> 00:13:57,600
of biology software which is better than

00:13:55,600 --> 00:13:59,279
the deviant team in the debut chem team

00:13:57,600 --> 00:14:02,079
they have chemistry software

00:13:59,279 --> 00:14:03,199
which is better maintained by chemist

00:14:02,079 --> 00:14:06,480
chemistries

00:14:03,199 --> 00:14:09,920
and we have also debian astrology

00:14:06,480 --> 00:14:13,600
and if there is a good reason

00:14:09,920 --> 00:14:16,800
to put the python library under the

00:14:13,600 --> 00:14:18,079
control of the python team who they are

00:14:16,800 --> 00:14:20,160
the partner experts

00:14:18,079 --> 00:14:21,920
it's perfectly fine so the deviant

00:14:20,160 --> 00:14:24,959
science team is not

00:14:21,920 --> 00:14:27,760
fighting to get packages but

00:14:24,959 --> 00:14:31,839
not trying to care for what's not

00:14:27,760 --> 00:14:31,839
probably placed somewhere else

00:14:32,240 --> 00:14:38,079
i agree um i think you know the python

00:14:35,760 --> 00:14:39,920
is a good example because you know there

00:14:38,079 --> 00:14:41,040
are interoperability standards are very

00:14:39,920 --> 00:14:44,320
key there

00:14:41,040 --> 00:14:47,199
uh it's very very measured i think more

00:14:44,320 --> 00:14:50,399
important probably will be the

00:14:47,199 --> 00:14:53,600
hpc packages which are for me key

00:14:50,399 --> 00:14:56,480
underlying large scalability science

00:14:53,600 --> 00:14:57,360
for science software uh how we make that

00:14:56,480 --> 00:15:01,120
work

00:14:57,360 --> 00:15:04,360
um you know the so

00:15:01,120 --> 00:15:07,600
that's increasingly key for

00:15:04,360 --> 00:15:11,600
containerization uh but also

00:15:07,600 --> 00:15:15,920
the um the number of packages that

00:15:11,600 --> 00:15:19,600
will that will work on a multicore

00:15:15,920 --> 00:15:21,600
hpc machine it's simply growing

00:15:19,600 --> 00:15:22,959
the expectation of the packet that this

00:15:21,600 --> 00:15:26,240
is a unique thing

00:15:22,959 --> 00:15:29,279
that a machine is multi-core um

00:15:26,240 --> 00:15:31,680
is disappearing um

00:15:29,279 --> 00:15:32,560
and the expectation you know so the the

00:15:31,680 --> 00:15:35,839
number of package

00:15:32,560 --> 00:15:38,399
for example um i mean

00:15:35,839 --> 00:15:40,240
there's a package met view which is a

00:15:38,399 --> 00:15:43,120
visualization package

00:15:40,240 --> 00:15:43,680
for weather codes that will now work

00:15:43,120 --> 00:15:47,680
with

00:15:43,680 --> 00:15:49,440
uh mpi uh and so we'll scale across

00:15:47,680 --> 00:15:52,959
large numbers of cause

00:15:49,440 --> 00:15:53,360
um the we need you know that will work

00:15:52,959 --> 00:15:56,720
and

00:15:53,360 --> 00:16:00,240
we will be maintained within the

00:15:56,720 --> 00:16:02,480
within debian science uh but

00:16:00,240 --> 00:16:04,000
how that works are of course multiple

00:16:02,480 --> 00:16:05,600
cause um

00:16:04,000 --> 00:16:07,040
and how we test all of that is going to

00:16:05,600 --> 00:16:10,079
be a challenge

00:16:07,040 --> 00:16:10,560
um we can the number machine the number

00:16:10,079 --> 00:16:14,639
of

00:16:10,560 --> 00:16:16,959
uh multi uh multi uh

00:16:14,639 --> 00:16:18,399
infiniband systems etc becomes a

00:16:16,959 --> 00:16:22,079
challenge um

00:16:18,399 --> 00:16:26,560
to test with the hpc systems are

00:16:22,079 --> 00:16:26,560
relatively few of them use debian

00:16:26,720 --> 00:16:30,240
but that's going to be a core for a

00:16:28,720 --> 00:16:34,320
large number of the

00:16:30,240 --> 00:16:36,560
the key debian science packages

00:16:34,320 --> 00:16:38,240
and how we test out when we get to at

00:16:36,560 --> 00:16:40,000
larger scale

00:16:38,240 --> 00:16:41,360
um that's going to stretch our

00:16:40,000 --> 00:16:43,279
infrastructure problem

00:16:41,360 --> 00:16:45,440
questions and testing infrastructure i

00:16:43,279 --> 00:16:45,440
think

00:16:47,839 --> 00:16:55,040
yeah i fully agree about this um

00:16:51,759 --> 00:16:58,639
another example is the

00:16:55,040 --> 00:17:00,959
lapak infrastructure which was done by

00:16:58,639 --> 00:17:01,759
uh mozart in a google summer code

00:17:00,959 --> 00:17:04,640
project

00:17:01,759 --> 00:17:06,319
i just invited him in in this buff i

00:17:04,640 --> 00:17:09,520
hope he might join

00:17:06,319 --> 00:17:12,880
this is a similar topic and uh

00:17:09,520 --> 00:17:15,039
what also happened because um

00:17:12,880 --> 00:17:16,079
python was one example and we have a lot

00:17:15,039 --> 00:17:19,839
of stuff in

00:17:16,079 --> 00:17:22,160
our packages so we merged all the

00:17:19,839 --> 00:17:23,919
r packages from debian science debian

00:17:22,160 --> 00:17:25,039
mid and then we came into one our

00:17:23,919 --> 00:17:27,760
packaging team

00:17:25,039 --> 00:17:28,880
because it's extremely easy to

00:17:27,760 --> 00:17:32,080
synchronize

00:17:28,880 --> 00:17:33,600
everything to at one place and there is

00:17:32,080 --> 00:17:37,039
no point in

00:17:33,600 --> 00:17:37,039
maintaining even science

00:17:37,200 --> 00:17:41,200
to sort a question coming in are the

00:17:38,880 --> 00:17:43,120
debian veg and astrology teams

00:17:41,200 --> 00:17:44,720
part sub teams partner debian science

00:17:43,120 --> 00:17:48,640
teams are there any

00:17:44,720 --> 00:17:50,080
plans to bring them into one roof um

00:17:48,640 --> 00:17:51,919
i think the answer is that they are

00:17:50,080 --> 00:17:55,760
subjects

00:17:51,919 --> 00:17:57,280
and that basically it's interoperability

00:17:55,760 --> 00:18:00,160
is the key

00:17:57,280 --> 00:18:00,720
and maintains basically the key issues

00:18:00,160 --> 00:18:03,760
um

00:18:00,720 --> 00:18:05,840
and can you comment but i think it seems

00:18:03,760 --> 00:18:09,200
to be working okay

00:18:05,840 --> 00:18:10,400
yeah i i think well um a lot of people

00:18:09,200 --> 00:18:12,400
of the

00:18:10,400 --> 00:18:14,400
other scientific teams are reading the

00:18:12,400 --> 00:18:17,039
debian science meeting list and

00:18:14,400 --> 00:18:18,480
by well you are team member a member

00:18:17,039 --> 00:18:20,799
when reading the mailing list and

00:18:18,480 --> 00:18:22,880
commenting on it so there is um

00:18:20,799 --> 00:18:24,880
i think it's quite good networking

00:18:22,880 --> 00:18:26,320
between those teams on the deviant

00:18:24,880 --> 00:18:27,440
science list and this was the actual

00:18:26,320 --> 00:18:30,480
purpose to

00:18:27,440 --> 00:18:35,200
to find common issues of

00:18:30,480 --> 00:18:35,200
scientific teams and discuss it there

00:18:35,280 --> 00:18:38,320
i think we have one more question about

00:18:37,280 --> 00:18:41,600
imd

00:18:38,320 --> 00:18:43,120
64 packages from wookie okay are you

00:18:41,600 --> 00:18:45,760
able to

00:18:43,120 --> 00:18:45,760
say something

00:18:51,919 --> 00:18:58,400
you can't understand

00:18:54,960 --> 00:19:01,679
it's really terrible does it

00:18:58,400 --> 00:19:03,600
turn the video off any better do i make

00:19:01,679 --> 00:19:06,000
any sense

00:19:03,600 --> 00:19:07,360
hello could you please repeat your

00:19:06,000 --> 00:19:09,280
question because the connection is not

00:19:07,360 --> 00:19:11,600
quite good and we cannot understand what

00:19:09,280 --> 00:19:14,720
you're talking about

00:19:11,600 --> 00:19:17,760
okay uh i don't know if i can easily

00:19:14,720 --> 00:19:18,799
improve the connection except by talking

00:19:17,760 --> 00:19:25,520
slightly

00:19:18,799 --> 00:19:28,720
better no

00:19:25,520 --> 00:19:31,280
can you hear me already yeah i think so

00:19:28,720 --> 00:19:31,280
i think so

00:19:31,520 --> 00:19:38,720
just to say that arm64 is now more

00:19:34,960 --> 00:19:41,919
important in science stuff and

00:19:38,720 --> 00:19:46,080
there's hardware acceleration and

00:19:41,919 --> 00:19:48,400
uh i would i'm available to help

00:19:46,080 --> 00:19:49,440
you know get optics for support in

00:19:48,400 --> 00:19:51,840
packages

00:19:49,440 --> 00:19:53,760
which currently have it turned off

00:19:51,840 --> 00:19:54,880
there's a lot of things there at x86

00:19:53,760 --> 00:19:56,240
only

00:19:54,880 --> 00:19:58,320
sometimes there's a good reason

00:19:56,240 --> 00:20:01,520
sometimes there isn't

00:19:58,320 --> 00:20:04,240
um so uh yeah you know

00:20:01,520 --> 00:20:05,840
i i would like to help make some of that

00:20:04,240 --> 00:20:06,960
i know if something looks weak that

00:20:05,840 --> 00:20:08,799
wasn't

00:20:06,960 --> 00:20:11,520
it has obviously before turned up for no

00:20:08,799 --> 00:20:15,039
good reason i can see

00:20:11,520 --> 00:20:16,480
weird things slow uh if that's implicit

00:20:15,039 --> 00:20:19,520
directions missing

00:20:16,480 --> 00:20:20,960
and also connected into hardware support

00:20:19,520 --> 00:20:23,280
for direction

00:20:20,960 --> 00:20:24,960
comment and got loaded recently for the

00:20:23,280 --> 00:20:28,080
machine learning part

00:20:24,960 --> 00:20:28,080
the arm computer library

00:20:28,320 --> 00:20:32,640
and you know working how to connect that

00:20:30,159 --> 00:20:37,520
to the back ends of things so we get pro

00:20:32,640 --> 00:20:40,400
acceleration is some work

00:20:37,520 --> 00:20:42,559
that makes sense i'm i'm sorry i cannot

00:20:40,400 --> 00:20:49,039
say if it makes sense because i got two

00:20:42,559 --> 00:20:51,280
less information from from

00:20:49,039 --> 00:20:52,720
i i just understood machine learning and

00:20:51,280 --> 00:20:53,360
we are doing something about machine

00:20:52,720 --> 00:20:56,799
learning and

00:20:53,360 --> 00:20:59,840
and we we try the the only thing i know

00:20:56,799 --> 00:21:01,200
what uh is currently doing is what we

00:20:59,840 --> 00:21:04,400
are going to be doing is

00:21:01,200 --> 00:21:06,400
this md support and

00:21:04,400 --> 00:21:08,880
especially in the debian med team i

00:21:06,400 --> 00:21:10,400
think you joined the debian meet buff

00:21:08,880 --> 00:21:13,840
yesterday or you can

00:21:10,400 --> 00:21:17,520
review it if it's online and this is

00:21:13,840 --> 00:21:20,640
what i can say about arm64

00:21:17,520 --> 00:21:24,080
personally not really good informed

00:21:20,640 --> 00:21:27,039
about this status in general

00:21:24,080 --> 00:21:28,880
i think it's key for us with uh with

00:21:27,039 --> 00:21:31,039
machine learning and increasingly with

00:21:28,880 --> 00:21:32,159
the weather codes where we were

00:21:31,039 --> 00:21:35,600
increasingly using

00:21:32,159 --> 00:21:38,480
uh non uh non-standard

00:21:35,600 --> 00:21:38,480
double vote uh

00:21:39,039 --> 00:21:43,120
positions so we're going basically the

00:21:41,919 --> 00:21:45,760
lot of work going down to

00:21:43,120 --> 00:21:47,039
single position half precision and

00:21:45,760 --> 00:21:50,320
variable position

00:21:47,039 --> 00:21:53,840
um you know three or four bits even

00:21:50,320 --> 00:21:56,880
for some certain variables uh

00:21:53,840 --> 00:21:58,559
and the arm 64 architecture has

00:21:56,880 --> 00:22:02,799
specialized hardware for

00:21:58,559 --> 00:22:05,679
up for scaling uh the cmd operations on

00:22:02,799 --> 00:22:07,200
non-standard and smaller positions which

00:22:05,679 --> 00:22:09,840
is going to be key

00:22:07,200 --> 00:22:11,360
um one of the reasons why i'm why

00:22:09,840 --> 00:22:12,480
there's been a renewed interest in

00:22:11,360 --> 00:22:15,520
packaging a new

00:22:12,480 --> 00:22:15,840
fortran compiler flang has been that

00:22:15,520 --> 00:22:18,720
that

00:22:15,840 --> 00:22:20,000
that compiler came from pgi because the

00:22:18,720 --> 00:22:23,600
g4 trend compiler

00:22:20,000 --> 00:22:28,240
was optimized for x86 only

00:22:23,600 --> 00:22:31,520
and so as the new originally mont blanc

00:22:28,240 --> 00:22:34,320
hpc computer based alarm and

00:22:31,520 --> 00:22:35,760
a new new hardware based on the caviar

00:22:34,320 --> 00:22:38,799
etc

00:22:35,760 --> 00:22:42,320
will will need better support

00:22:38,799 --> 00:22:45,120
for arm processors going forward

00:22:42,320 --> 00:22:46,720
and that's going to be key so how we

00:22:45,120 --> 00:22:50,640
handle

00:22:46,720 --> 00:22:51,760
mixed and non-standard precision is

00:22:50,640 --> 00:22:54,640
going to be

00:22:51,760 --> 00:22:55,600
a challenge i think with the pack with

00:22:54,640 --> 00:22:57,760
the machine

00:22:55,600 --> 00:23:00,720
machine learning and with a lot of the

00:22:57,760 --> 00:23:00,720
underlying libraries

00:23:01,679 --> 00:23:06,840
i've just switched to chrome i don't

00:23:03,039 --> 00:23:09,840
know if i'm any more comprehensible now

00:23:06,840 --> 00:23:09,840
yes

00:23:14,720 --> 00:23:18,080
sorry i just say i switched to chromium

00:23:16,400 --> 00:23:18,640
to see how you can actually understand

00:23:18,080 --> 00:23:21,120
me

00:23:18,640 --> 00:23:22,480
please repeat now we have a real chance

00:23:21,120 --> 00:23:24,880
it was interesting i assume

00:23:22,480 --> 00:23:27,600
okay yeah sorry yeah so basically uh you

00:23:24,880 --> 00:23:30,080
know obviously arm cares about arm64

00:23:27,600 --> 00:23:31,760
support for all this science stuff and i

00:23:30,080 --> 00:23:32,080
hover on the edge of the science team

00:23:31,760 --> 00:23:34,159
i've

00:23:32,080 --> 00:23:36,159
helped package a few things like the

00:23:34,159 --> 00:23:39,120
cave surveying stuff um

00:23:36,159 --> 00:23:39,600
and mesh lab but anyway um i can spend

00:23:39,120 --> 00:23:42,240
time

00:23:39,600 --> 00:23:44,159
on trying to make sure stuff is enabled

00:23:42,240 --> 00:23:46,400
for arm64 and we're actually connected

00:23:44,159 --> 00:23:47,039
to hardware acceleration and back ends

00:23:46,400 --> 00:23:48,960
and

00:23:47,039 --> 00:23:50,640
whatever's necessary quite a lot of

00:23:48,960 --> 00:23:51,919
things have arm 64 turned off well

00:23:50,640 --> 00:23:54,159
everything except 86

00:23:51,919 --> 00:23:55,440
x86 turned off and sometimes there's

00:23:54,159 --> 00:23:56,720
good reasons for that and sometimes

00:23:55,440 --> 00:23:59,440
there aren't

00:23:56,720 --> 00:23:59,840
uh so uh you know i'm keen to enable

00:23:59,440 --> 00:24:02,000
more

00:23:59,840 --> 00:24:03,360
stuff and obviously there's getting it

00:24:02,000 --> 00:24:04,960
working and it's getting working at a

00:24:03,360 --> 00:24:07,360
useful speed

00:24:04,960 --> 00:24:08,960
um and those aren't necessarily the same

00:24:07,360 --> 00:24:12,159
thing

00:24:08,960 --> 00:24:14,640
um so yeah please pester me

00:24:12,159 --> 00:24:16,880
um and i'll pass to you people about i

00:24:14,640 --> 00:24:21,520
sent live insight toolkit for i noticed

00:24:16,880 --> 00:24:23,600
this week isn't enabled and it builds

00:24:21,520 --> 00:24:24,880
and seems to pass most of the tests one

00:24:23,600 --> 00:24:28,080
failed

00:24:24,880 --> 00:24:29,360
so we should probably just turn that on

00:24:28,080 --> 00:24:30,799
but i don't know whether in fact some

00:24:29,360 --> 00:24:32,400
things will be incredibly inefficient

00:24:30,799 --> 00:24:36,240
for example

00:24:32,400 --> 00:24:36,240
without specific accelerations

00:24:36,720 --> 00:24:40,640
it may be it may be important to do

00:24:38,799 --> 00:24:43,679
profiling uh

00:24:40,640 --> 00:24:45,760
profiling the tool support on arm 64.

00:24:43,679 --> 00:24:46,720
that would be slightly different lots of

00:24:45,760 --> 00:24:50,559
stuff that will

00:24:46,720 --> 00:25:01,840
build but only run incredibly slowly

00:24:50,559 --> 00:25:01,840
yeah uh and that would be a

00:25:05,600 --> 00:25:09,120
you know testing against all of that

00:25:07,200 --> 00:25:14,720
making sure that that works

00:25:09,120 --> 00:25:16,559
is going to be a challenge yeah

00:25:14,720 --> 00:25:17,760
okay so yeah that's all i really had to

00:25:16,559 --> 00:25:20,480
say um

00:25:17,760 --> 00:25:22,159
hi i'll try and get a bit more involved

00:25:20,480 --> 00:25:23,440
as you can see i'll hover on the edges

00:25:22,159 --> 00:25:25,919
of this team but

00:25:23,440 --> 00:25:27,360
occasionally do something useful but i i

00:25:25,919 --> 00:25:30,960
thought my perspective can say

00:25:27,360 --> 00:25:34,640
well we try really hard to

00:25:30,960 --> 00:25:36,240
um have um the package tests on all

00:25:34,640 --> 00:25:38,320
debian mid packages

00:25:36,240 --> 00:25:39,760
and auto package tests are also run on

00:25:38,320 --> 00:25:43,039
arm and

00:25:39,760 --> 00:25:43,919
in most cases this runs smoothly in most

00:25:43,039 --> 00:25:46,880
cases

00:25:43,919 --> 00:25:49,200
there are some cases where some floating

00:25:46,880 --> 00:25:52,400
point numbers are compared and

00:25:49,200 --> 00:25:52,799
not for this the the restrictions are

00:25:52,400 --> 00:25:55,360
set

00:25:52,799 --> 00:25:56,400
to to dense and so but in most cases

00:25:55,360 --> 00:25:59,919
it's working and

00:25:56,400 --> 00:26:03,200
but i will now learn the lessons that

00:25:59,919 --> 00:26:06,320
if we have some problems i will ask you

00:26:03,200 --> 00:26:08,240
yeah that's a good start good

00:26:06,320 --> 00:26:09,600
it's nice okay thank you very much for

00:26:08,240 --> 00:26:11,840
information and i hope

00:26:09,600 --> 00:26:12,799
you'll be able to contribute to our team

00:26:11,840 --> 00:26:16,720
to science team

00:26:12,799 --> 00:26:18,080
as well thank you okay i have some more

00:26:16,720 --> 00:26:20,559
information to discuss

00:26:18,080 --> 00:26:21,919
it's about uh salsa and continuance

00:26:20,559 --> 00:26:25,679
integration

00:26:21,919 --> 00:26:26,880
as you know at the end of 2017 we had a

00:26:25,679 --> 00:26:29,120
large immigration

00:26:26,880 --> 00:26:30,000
action and we have migrated almost all

00:26:29,120 --> 00:26:34,000
packages from

00:26:30,000 --> 00:26:36,320
aliot to uh to a new salsa

00:26:34,000 --> 00:26:39,600
server so it's a gitlab server and

00:26:36,320 --> 00:26:42,799
almost all packages are already in salsa

00:26:39,600 --> 00:26:46,080
and it worked very well and um

00:26:42,799 --> 00:26:46,720
a couple of months ago uh so i'm doing

00:26:46,080 --> 00:26:49,200
this work

00:26:46,720 --> 00:26:50,840
really in free time so i do not have too

00:26:49,200 --> 00:26:54,480
much time

00:26:50,840 --> 00:26:58,240
like and that is why i started to

00:26:54,480 --> 00:27:00,480
add continuous integration tests into

00:26:58,240 --> 00:27:02,480
some of packages which i maintain and

00:27:00,480 --> 00:27:05,760
packages which i implored in or

00:27:02,480 --> 00:27:07,679
sponsoring and i find it very very

00:27:05,760 --> 00:27:09,800
interesting and very useful because

00:27:07,679 --> 00:27:12,559
this auto package test and

00:27:09,800 --> 00:27:14,000
[Music]

00:27:12,559 --> 00:27:15,679
different tests which are already

00:27:14,000 --> 00:27:18,720
implemented in salsa

00:27:15,679 --> 00:27:19,520
ce are really good and they can find a

00:27:18,720 --> 00:27:21,279
lot of

00:27:19,520 --> 00:27:22,799
interesting information and a lot of

00:27:21,279 --> 00:27:26,159
stuff to be fixed

00:27:22,799 --> 00:27:28,720
and i propose that

00:27:26,159 --> 00:27:30,159
many people are trying to include this

00:27:28,720 --> 00:27:33,360
salsa ce

00:27:30,159 --> 00:27:34,159
scripts in their packages and thus you

00:27:33,360 --> 00:27:36,320
can

00:27:34,159 --> 00:27:38,159
uh make the quality of your package

00:27:36,320 --> 00:27:40,799
higher and you can see where the

00:27:38,159 --> 00:27:43,679
package is broken uh or not the only

00:27:40,799 --> 00:27:43,679
problem which is

00:27:45,919 --> 00:27:53,760
ci if i'm not misleaded

00:27:50,080 --> 00:27:56,880
every repository needs to have a switch

00:27:53,760 --> 00:27:59,840
that salsa ci is should really run

00:27:56,880 --> 00:28:02,399
it's not sufficient to add this salsa ci

00:27:59,840 --> 00:28:04,399
number file it is correct

00:28:02,399 --> 00:28:05,520
well in most of cases you just need to

00:28:04,399 --> 00:28:08,960
add this

00:28:05,520 --> 00:28:11,600
salsa ce file into your repository

00:28:08,960 --> 00:28:13,039
and sometimes you need to make to change

00:28:11,600 --> 00:28:15,200
the settings in your

00:28:13,039 --> 00:28:16,240
in your package and that's it and then

00:28:15,200 --> 00:28:18,960
you could you can

00:28:16,240 --> 00:28:21,039
change you can check the package or in

00:28:18,960 --> 00:28:23,039
the repository on sizer but because i

00:28:21,039 --> 00:28:26,159
have the impression that i'm adding

00:28:23,039 --> 00:28:28,159
automatically this salsa ci yaml file to

00:28:26,159 --> 00:28:31,520
every package i upload

00:28:28,159 --> 00:28:33,679
but this is not running i need to

00:28:31,520 --> 00:28:35,520
yeah you need to you need to you need to

00:28:33,679 --> 00:28:36,159
change the settings because i think

00:28:35,520 --> 00:28:38,799
there's

00:28:36,159 --> 00:28:41,360
uh you need to change the default uh

00:28:38,799 --> 00:28:44,480
place for your salsa ce yaml

00:28:41,360 --> 00:28:46,559
and it works but we can discuss it

00:28:44,480 --> 00:28:47,679
later so we can i can just show you how

00:28:46,559 --> 00:28:51,279
it works and

00:28:47,679 --> 00:28:53,279
it works but it's not

00:28:51,279 --> 00:28:55,120
the main part of the work you need to

00:28:53,279 --> 00:28:57,600
see whether your package is running

00:28:55,120 --> 00:28:59,360
on salsa ce and if it is running it's

00:28:57,600 --> 00:29:01,279
fine you need to do nothing you can

00:28:59,360 --> 00:29:04,000
be sure that your package more or less

00:29:01,279 --> 00:29:06,880
fine but in most of cases you need to

00:29:04,000 --> 00:29:07,520
make some fixes in the package maybe

00:29:06,880 --> 00:29:10,240
linkedin

00:29:07,520 --> 00:29:12,480
warnings or errors need to be fixed or

00:29:10,240 --> 00:29:15,760
out of package tests are not running

00:29:12,480 --> 00:29:18,399
and it also it is checking whether

00:29:15,760 --> 00:29:20,320
the package is binary reproducible so if

00:29:18,399 --> 00:29:22,320
it's not and it's also fading

00:29:20,320 --> 00:29:24,000
and there you have two options whether

00:29:22,320 --> 00:29:26,080
you fix it right now

00:29:24,000 --> 00:29:27,520
or you're just skipping this test for

00:29:26,080 --> 00:29:29,360
the moment and hoping that

00:29:27,520 --> 00:29:30,960
sometimes it will be better and it will

00:29:29,360 --> 00:29:33,440
pass the test so it's just

00:29:30,960 --> 00:29:35,120
the common information for for the

00:29:33,440 --> 00:29:36,159
science group and for maybe for other

00:29:35,120 --> 00:29:39,679
med group

00:29:36,159 --> 00:29:41,360
i find it very useful and it can really

00:29:39,679 --> 00:29:42,960
it can increase really the quality of

00:29:41,360 --> 00:29:47,679
packages and

00:29:42,960 --> 00:29:47,679
will get less failures in compilation

00:29:47,760 --> 00:29:51,840
the only problem which i see for our

00:29:49,679 --> 00:29:54,000
scientific packages is that some of them

00:29:51,840 --> 00:29:56,640
are really large and they require a lot

00:29:54,000 --> 00:29:57,760
of time to be built it's uh for example

00:29:56,640 --> 00:30:01,279
like vtk

00:29:57,760 --> 00:30:04,640
vt vtk packages that taken

00:30:01,279 --> 00:30:07,520
hours to be built and at the moment it's

00:30:04,640 --> 00:30:08,000
we have a limit about one hour on the

00:30:07,520 --> 00:30:10,240
salsa

00:30:08,000 --> 00:30:11,120
ce so i think we need to find a solution

00:30:10,240 --> 00:30:13,840
for these large

00:30:11,120 --> 00:30:15,919
packages maybe by installing some

00:30:13,840 --> 00:30:16,399
builders external builders where it will

00:30:15,919 --> 00:30:19,279
be

00:30:16,399 --> 00:30:21,360
possible to build such large packages

00:30:19,279 --> 00:30:23,919
somewhere externally

00:30:21,360 --> 00:30:27,919
but in theory you can just increase the

00:30:23,919 --> 00:30:27,919
timeout right at least for one package

00:30:28,240 --> 00:30:35,279
i mean you're allowed to you just

00:30:32,240 --> 00:30:38,559
are not very nice to the other people

00:30:35,279 --> 00:30:41,760
because you take the resources

00:30:38,559 --> 00:30:41,760
yeah that's true yeah

00:30:42,720 --> 00:30:46,080
so yeah i guess having a dedicated demon

00:30:45,200 --> 00:30:48,399
science runner

00:30:46,080 --> 00:30:49,600
or runners would be a great thing maybe

00:30:48,399 --> 00:30:52,320
we can get some

00:30:49,600 --> 00:30:53,600
um sponsorship for them for getting

00:30:52,320 --> 00:30:55,520
these really large because i'm also

00:30:53,600 --> 00:30:57,120
running into those problems where

00:30:55,520 --> 00:30:59,279
one hour is just not enough for my

00:30:57,120 --> 00:31:02,640
packages so maybe we could

00:30:59,279 --> 00:31:05,039
get some sponsored runners

00:31:02,640 --> 00:31:05,919
somewhere should be some companies maybe

00:31:05,039 --> 00:31:07,919
or

00:31:05,919 --> 00:31:10,399
institutions interested in doing this

00:31:07,919 --> 00:31:10,399
kind of thing

00:31:13,519 --> 00:31:18,000
we could uh i think it would be useful

00:31:17,519 --> 00:31:20,799
to do that

00:31:18,000 --> 00:31:21,760
particularly for uh for this for mpi

00:31:20,799 --> 00:31:24,880
testing

00:31:21,760 --> 00:31:27,519
uh for you know we are

00:31:24,880 --> 00:31:28,159
one of those areas where we are a very

00:31:27,519 --> 00:31:31,840
useful

00:31:28,159 --> 00:31:33,679
test for um for the underlying library

00:31:31,840 --> 00:31:34,880
to upstream because of that because of

00:31:33,679 --> 00:31:38,399
the scale

00:31:34,880 --> 00:31:39,440
uh so for example mpi has one of the

00:31:38,399 --> 00:31:41,760
best

00:31:39,440 --> 00:31:43,120
uh building best build chess

00:31:41,760 --> 00:31:45,919
infrastructures out there

00:31:43,120 --> 00:31:47,440
in the uh collaborative world for an

00:31:45,919 --> 00:31:51,360
open source project

00:31:47,440 --> 00:31:51,840
but we are very useful for them because

00:31:51,360 --> 00:31:54,559
we

00:31:51,840 --> 00:31:57,039
just or it's a lot of research stuff

00:31:54,559 --> 00:31:58,399
that other than the x86 and potentially

00:31:57,039 --> 00:32:00,720
arm

00:31:58,399 --> 00:32:02,880
so we find a lot of bugs that are you

00:32:00,720 --> 00:32:06,320
know 32-bit based or

00:32:02,880 --> 00:32:07,760
uh endian based or uh code weaknesses as

00:32:06,320 --> 00:32:10,159
they come through

00:32:07,760 --> 00:32:10,799
uh and compilation and compiler issues

00:32:10,159 --> 00:32:14,720
are coming too

00:32:10,799 --> 00:32:16,640
but we lack um the ability to run

00:32:14,720 --> 00:32:18,399
those of course military cause so trying

00:32:16,640 --> 00:32:20,000
to find the interesting

00:32:18,399 --> 00:32:21,519
trying to find architectures where we

00:32:20,000 --> 00:32:24,399
could do testing

00:32:21,519 --> 00:32:26,480
um hpc type architecture so you can test

00:32:24,399 --> 00:32:29,840
that the full science stack

00:32:26,480 --> 00:32:31,760
would be very useful um

00:32:29,840 --> 00:32:32,960
that you know potentially useful for our

00:32:31,760 --> 00:32:35,919
company for money

00:32:32,960 --> 00:32:36,720
we can do more of this if we have if you

00:32:35,919 --> 00:32:38,360
if you have

00:32:36,720 --> 00:32:40,000
if you have a strategy for

00:32:38,360 --> 00:32:42,080
containerization

00:32:40,000 --> 00:32:43,200
uh i mean like personally i'm working a

00:32:42,080 --> 00:32:47,200
lot with

00:32:43,200 --> 00:32:50,320
um singularity so our machine

00:32:47,200 --> 00:32:51,919
that we that we use is uh our

00:32:50,320 --> 00:32:53,519
hpc machine the pentaplot machine

00:32:51,919 --> 00:32:56,799
network is

00:32:53,519 --> 00:32:59,279
um red hat stroke um

00:32:56,799 --> 00:33:00,000
based uh as an operating system but we

00:32:59,279 --> 00:33:01,919
can run

00:33:00,000 --> 00:33:03,840
debian codes within a singularity

00:33:01,919 --> 00:33:05,279
container and then scale them of course

00:33:03,840 --> 00:33:08,480
with mpi

00:33:05,279 --> 00:33:09,840
um and i think we will see a lot more of

00:33:08,480 --> 00:33:11,679
that happening in the future where

00:33:09,840 --> 00:33:14,159
people develop their codes

00:33:11,679 --> 00:33:15,919
on a laptop or small building their own

00:33:14,159 --> 00:33:18,799
build machine

00:33:15,919 --> 00:33:20,640
and can use debian there and then strip

00:33:18,799 --> 00:33:24,080
them to large computers

00:33:20,640 --> 00:33:27,600
uh or other other scalable computers

00:33:24,080 --> 00:33:29,600
um as containers

00:33:27,600 --> 00:33:31,919
uh and i think we may see more science

00:33:29,600 --> 00:33:34,720
codes working that way

00:33:31,919 --> 00:33:35,200
to my knowledge only cnos and france are

00:33:34,720 --> 00:33:38,399
the only

00:33:35,200 --> 00:33:41,360
people using debian on at large scale on

00:33:38,399 --> 00:33:41,360
hpc machines

00:33:42,080 --> 00:33:48,240
it opens a small handful there but

00:33:45,360 --> 00:33:51,039
other than small in departmental

00:33:48,240 --> 00:33:54,320
clusters in universities etc

00:33:51,039 --> 00:33:55,360
but i think we will see a large scale up

00:33:54,320 --> 00:33:57,919
over time

00:33:55,360 --> 00:34:00,000
because the software stack is becoming

00:33:57,919 --> 00:34:01,760
so complex

00:34:00,000 --> 00:34:03,440
and if we pre-build a lot of the

00:34:01,760 --> 00:34:06,640
software stack

00:34:03,440 --> 00:34:10,000
that will be very increasingly valuable

00:34:06,640 --> 00:34:11,280
um so within work for example i would

00:34:10,000 --> 00:34:13,280
you know we will maintain a software

00:34:11,280 --> 00:34:16,639
stack of about 10 or 50 uh

00:34:13,280 --> 00:34:18,159
10 or 20 main libraries uh but if you're

00:34:16,639 --> 00:34:21,040
a billion of other codes there's

00:34:18,159 --> 00:34:23,280
increasingly a very complex stack of 20

00:34:21,040 --> 00:34:24,240
or 30 libraries with invariants and

00:34:23,280 --> 00:34:27,599
builds

00:34:24,240 --> 00:34:30,639
that they're compiler dependent that

00:34:27,599 --> 00:34:33,599
shipping a standard container

00:34:30,639 --> 00:34:35,280
based based on debian that people can

00:34:33,599 --> 00:34:38,639
build their own application on

00:34:35,280 --> 00:34:40,720
and then then run it on a large

00:34:38,639 --> 00:34:49,839
hpc machine becomes very important for

00:34:40,720 --> 00:34:49,839
their science purposes

00:34:50,560 --> 00:34:55,919
yeah okay thank you

00:34:53,679 --> 00:34:58,160
do we have some yeah do we have

00:34:55,919 --> 00:35:00,800
something else to discuss

00:34:58,160 --> 00:35:01,599
i'm seeing the some information about

00:35:00,800 --> 00:35:04,480
you know

00:35:01,599 --> 00:35:06,560
there's some questions i think luminous

00:35:04,480 --> 00:35:07,359
joins the channel but he is muted maybe

00:35:06,560 --> 00:35:09,280
he can say

00:35:07,359 --> 00:35:12,160
something about his google summer of

00:35:09,280 --> 00:35:12,160
code work

00:35:12,880 --> 00:35:16,000
i mean in case you are saying something

00:35:15,119 --> 00:35:19,760
you are muted

00:35:16,000 --> 00:35:19,760
you need to unmute your microphone

00:35:23,599 --> 00:35:30,079
maybe hello yes

00:35:27,040 --> 00:35:32,480
yes we can hear you okay actually

00:35:30,079 --> 00:35:34,480
actually tomorrow i have a short talk

00:35:32,480 --> 00:35:36,720
about deep learning and

00:35:34,480 --> 00:35:38,800
some scientific computing libraries such

00:35:36,720 --> 00:35:42,160
as

00:35:38,800 --> 00:35:45,359
so so we can talk about it tomorrow

00:35:42,160 --> 00:35:49,599
okay it's fine that's good

00:35:45,359 --> 00:35:49,599
yeah but good to have you on board here

00:35:52,240 --> 00:35:58,720
is anybody else doing container work

00:35:56,240 --> 00:36:00,960
or working within working within debian

00:35:58,720 --> 00:36:02,400
containers or

00:36:00,960 --> 00:36:04,560
deploying within containers such as

00:36:02,400 --> 00:36:12,480
singularity no i

00:36:04,560 --> 00:36:14,720
don't do it

00:36:12,480 --> 00:36:17,680
okay do we have something to discuss are

00:36:14,720 --> 00:36:17,680
there any questions

00:36:19,440 --> 00:36:24,000
one question i would have is um

00:36:22,560 --> 00:36:25,680
maintaining multiple versions of

00:36:24,000 --> 00:36:26,320
libraries and it'll be interesting to

00:36:25,680 --> 00:36:29,119
hear lumi

00:36:26,320 --> 00:36:30,240
lumens talk tomorrow on the back and how

00:36:29,119 --> 00:36:32,880
that works

00:36:30,240 --> 00:36:33,920
uh we have a challenge for example with

00:36:32,880 --> 00:36:37,359
um

00:36:33,920 --> 00:36:41,040
running different versions of of netcdf

00:36:37,359 --> 00:36:42,720
uh which is you know

00:36:41,040 --> 00:36:44,800
because the difficulty there is that

00:36:42,720 --> 00:36:46,400
there's

00:36:44,800 --> 00:36:49,040
different functionality provided by

00:36:46,400 --> 00:36:51,599
different variants of the of the package

00:36:49,040 --> 00:36:53,359
uh and no one version at the moment can

00:36:51,599 --> 00:36:55,280
provide all the functionality

00:36:53,359 --> 00:36:56,800
the compress compressed like a

00:36:55,280 --> 00:36:59,359
compressed file format so

00:36:56,800 --> 00:37:00,960
uh compressed file version is

00:36:59,359 --> 00:37:02,880
incompatible with running this in

00:37:00,960 --> 00:37:04,720
parallel so we have two separate builds

00:37:02,880 --> 00:37:06,480
of the libraries

00:37:04,720 --> 00:37:08,720
with the trouble is with this is you end

00:37:06,480 --> 00:37:11,040
up with a software

00:37:08,720 --> 00:37:12,400
an exponential explosion of sorcerer

00:37:11,040 --> 00:37:15,599
packages

00:37:12,400 --> 00:37:17,599
um now i've been building

00:37:15,599 --> 00:37:19,839
a test example of how to work with this

00:37:17,599 --> 00:37:21,440
within that cdf parallel

00:37:19,839 --> 00:37:23,280
but we're going to encounter a similar

00:37:21,440 --> 00:37:25,440
issue with the fortran libraries because

00:37:23,280 --> 00:37:28,400
they have a different api

00:37:25,440 --> 00:37:30,960
um has anybody else encountered this

00:37:28,400 --> 00:37:33,040
problem or should we document the best

00:37:30,960 --> 00:37:35,280
the best answers we have at the moment i

00:37:33,040 --> 00:37:38,160
think that's that topic was this case

00:37:35,280 --> 00:37:39,440
discussed on every debian science buff i

00:37:38,160 --> 00:37:42,079
remember

00:37:39,440 --> 00:37:43,359
uh it was this car but he never found

00:37:42,079 --> 00:37:46,560
any solution in the

00:37:43,359 --> 00:37:49,680
debian universe people

00:37:46,560 --> 00:37:52,000
say refer to

00:37:49,680 --> 00:37:53,760
houses environments modules or something

00:37:52,000 --> 00:37:57,040
like this

00:37:53,760 --> 00:37:59,119
which is i yeah but yeah

00:37:57,040 --> 00:38:01,440
i've been using environmental symbols uh

00:37:59,119 --> 00:38:01,440
sorry

00:38:01,920 --> 00:38:06,400
symbol uh variable method symbols within

00:38:04,800 --> 00:38:08,079
the libraries

00:38:06,400 --> 00:38:10,160
uh particularly because when you get to

00:38:08,079 --> 00:38:12,480
something like power view you end up

00:38:10,160 --> 00:38:13,599
eventually using both sets of the

00:38:12,480 --> 00:38:15,920
libraries

00:38:13,599 --> 00:38:17,119
in different plugins and so there's the

00:38:15,920 --> 00:38:18,400
namespace collisions

00:38:17,119 --> 00:38:20,240
and so the only way of merging them back

00:38:18,400 --> 00:38:22,240
together is using the symbols but

00:38:20,240 --> 00:38:25,040
effectively that requires upstream

00:38:22,240 --> 00:38:25,839
support and we need to work you know we

00:38:25,040 --> 00:38:29,359
need to work

00:38:25,839 --> 00:38:31,599
on a common policy on that i think but

00:38:29,359 --> 00:38:32,880
you now are popping up another question

00:38:31,599 --> 00:38:35,760
in my mind if it is

00:38:32,880 --> 00:38:37,440
somehow related rebecca this day asked

00:38:35,760 --> 00:38:40,880
on the mailing list

00:38:37,440 --> 00:38:43,280
uh about pandas python pandas we we can

00:38:40,880 --> 00:38:45,200
upgrade to the latest upstream version

00:38:43,280 --> 00:38:49,200
but we will break

00:38:45,200 --> 00:38:52,480
three or four leaf packages

00:38:49,200 --> 00:38:55,760
would you share my opinion that

00:38:52,480 --> 00:38:59,119
it's better to take the latest upstream

00:38:55,760 --> 00:39:00,800
and fix those leaf packages even if you

00:38:59,119 --> 00:39:03,040
don't know if we can

00:39:00,800 --> 00:39:04,240
fix them finally before the release but

00:39:03,040 --> 00:39:07,599
when we just

00:39:04,240 --> 00:39:10,079
lose some leave packages let's have the

00:39:07,599 --> 00:39:12,640
up up to date libraries what what do you

00:39:10,079 --> 00:39:12,640
think about this

00:39:12,960 --> 00:39:17,359
i would agree with that uh because a lot

00:39:15,359 --> 00:39:20,240
of our users actually use

00:39:17,359 --> 00:39:22,240
unstable uh and follow unstable

00:39:20,240 --> 00:39:24,720
particularly for science development

00:39:22,240 --> 00:39:26,079
and just one of our most useful cases is

00:39:24,720 --> 00:39:29,280
that we have we've become

00:39:26,079 --> 00:39:31,200
the integration beds for testing so we

00:39:29,280 --> 00:39:34,160
find those bugs

00:39:31,200 --> 00:39:36,160
yeah so i i think rebecca because you

00:39:34,160 --> 00:39:40,160
are also in this

00:39:36,160 --> 00:39:43,599
above just go for the latest upstream

00:39:40,160 --> 00:39:46,800
either 1.0 which you have packaged or

00:39:43,599 --> 00:39:47,839
1.1 which you intend to package and then

00:39:46,800 --> 00:39:51,119
we need to fix

00:39:47,839 --> 00:39:57,839
what what needs fixing

00:39:51,119 --> 00:39:57,839
yeah yeah i'll i'll give a shot hi then

00:40:00,000 --> 00:40:05,680
yeah sorry i thought the discussion

00:40:02,720 --> 00:40:05,680
before i was about

00:40:07,200 --> 00:40:12,000
different options like enabling and not

00:40:10,079 --> 00:40:12,640
the parallelism that changes that is the

00:40:12,000 --> 00:40:15,200
other

00:40:12,640 --> 00:40:18,319
yeah whatever and not about versions in

00:40:15,200 --> 00:40:19,920
actual different points in history

00:40:18,319 --> 00:40:24,000
which is why i suggested we should use a

00:40:19,920 --> 00:40:28,560
different word for that

00:40:24,000 --> 00:40:32,640
yeah i simply think we we we cannot

00:40:28,560 --> 00:40:35,839
use uh some broken

00:40:32,640 --> 00:40:39,599
leaf packages as an excuse to to ship

00:40:35,839 --> 00:40:41,760
old software this is

00:40:39,599 --> 00:40:43,119
either we can fix it or they are

00:40:41,760 --> 00:40:46,720
possibly not works

00:40:43,119 --> 00:40:50,000
fixing yeah

00:40:46,720 --> 00:40:53,839
uh number i seem to aim to pretty much

00:40:50,000 --> 00:40:53,839
ignore it

00:41:02,160 --> 00:41:06,079
interpreted language packages the it's

00:41:04,720 --> 00:41:08,640
the transition process

00:41:06,079 --> 00:41:09,200
seems to be it in fact or compelled to

00:41:08,640 --> 00:41:11,200
fall and

00:41:09,200 --> 00:41:12,720
even even though when i actually asked

00:41:11,200 --> 00:41:14,000
really streamed him said it's not

00:41:12,720 --> 00:41:16,400
supposed to be

00:41:14,000 --> 00:41:18,160
yeah but in any case thanks for blocking

00:41:16,400 --> 00:41:21,280
on this and all your effort to

00:41:18,160 --> 00:41:23,760
to check everything and so are you using

00:41:21,280 --> 00:41:25,280
uh this what does this check all these

00:41:23,760 --> 00:41:29,040
things or what what is this

00:41:25,280 --> 00:41:31,680
as a from from paul why is a script

00:41:29,040 --> 00:41:35,839
which rebuilds all dependencies are you

00:41:31,680 --> 00:41:38,640
using this

00:41:35,839 --> 00:41:39,520
no oh i think i think i haven't had my

00:41:38,640 --> 00:41:41,440
own little

00:41:39,520 --> 00:41:43,280
old script just run through all of

00:41:41,440 --> 00:41:48,960
thunder as dependencies this

00:41:43,280 --> 00:41:48,960
is 50-ish of them maybe a

00:41:49,119 --> 00:41:52,160
maybe maybe you just check i i forgot

00:41:51,520 --> 00:41:55,520
how it's

00:41:52,160 --> 00:41:58,319
named but there is some um

00:41:55,520 --> 00:42:00,160
package break all the things yeah i

00:41:58,319 --> 00:42:03,200
built all these things yeah yeah

00:42:00,160 --> 00:42:06,319
this is doing exactly what you need

00:42:03,200 --> 00:42:08,079
to to test new versions it's a solved

00:42:06,319 --> 00:42:12,160
problem

00:42:08,079 --> 00:42:12,480
i think idea oh we have only two minutes

00:42:12,160 --> 00:42:15,920
left

00:42:12,480 --> 00:42:16,480
so i think we need to uh summarize our

00:42:15,920 --> 00:42:19,040
meeting

00:42:16,480 --> 00:42:19,040
our talk

00:42:21,599 --> 00:42:27,200
okay can you put this in either pads

00:42:24,240 --> 00:42:31,119
this break all the things

00:42:27,200 --> 00:42:35,280
to make sure that it's conserved because

00:42:31,119 --> 00:42:35,280
when we leave this room

00:42:38,079 --> 00:42:42,400
so there's some more uh question about

00:42:40,960 --> 00:42:44,720
fortran policy

00:42:42,400 --> 00:42:47,440
is anybody working on a full turn policy

00:42:44,720 --> 00:42:52,240
for replacement for placement of 490

00:42:47,440 --> 00:42:52,240
models or do we have them already so

00:42:52,560 --> 00:42:57,760
okay yeah i can i've been doing that and

00:42:55,760 --> 00:42:59,520
also patches to make interoperability

00:42:57,760 --> 00:43:02,720
between g4 john and fang

00:42:59,520 --> 00:43:04,960
okay thank you very much okay we have

00:43:02,720 --> 00:43:06,720
one one more minute so i just wanted to

00:43:04,960 --> 00:43:08,640
summarize it's very good that so many

00:43:06,720 --> 00:43:10,480
people participated here and

00:43:08,640 --> 00:43:12,400
thank you very much everybody for the

00:43:10,480 --> 00:43:14,000
participation if somebody wants to join

00:43:12,400 --> 00:43:16,160
the science team we are

00:43:14,000 --> 00:43:17,280
always welcome we are almost a

00:43:16,160 --> 00:43:19,520
conflict-free

00:43:17,280 --> 00:43:21,920
team we don't have any usually don't

00:43:19,520 --> 00:43:24,079
have any problems and

00:43:21,920 --> 00:43:25,680
i hope it will be in the future exactly

00:43:24,079 --> 00:43:27,760
exactly the same

00:43:25,680 --> 00:43:28,880
thank you very much for information and

00:43:27,760 --> 00:43:31,119
for uh for

00:43:28,880 --> 00:43:32,640
your participation in this above and

00:43:31,119 --> 00:43:36,240
maybe see you next time

00:43:32,640 --> 00:43:40,560
offline face to face yeah

00:43:36,240 --> 00:43:40,560

YouTube URL: https://www.youtube.com/watch?v=Hk7S2XEYP4w


