Title: Building a Multilingual Command Line
Publication date: 2020-10-23
Playlist: DebConf 20
Description: 
	by John Samuel

At: DebConf20
https://debconf20.debconf.org/talks/45-building-a-multilingual-command-line/

A multilingual command-line allows the users to interact with the computers from the command-line in multiple languages. Up until now, the command-line interface mostly had commands that are more or less English-like or have mnemonics made out of English words. This makes it difficult for new command-line users, who are also non-English speakers to use this interface. Thus the major question is how to help non-English speakers to work with the command-line interface in their native languages. Is there a need to rewrite the command-line emulators so that they can support multiple human languages? This talk will present the different ways to extend the command line for interaction in multiple languages.

Room: Talks
Scheduled start: 2020-08-25 18:30:00
Captions: 
	00:00:06,240 --> 00:00:09,280
good morning

00:00:07,040 --> 00:00:11,200
good afternoon or good evening to all

00:00:09,280 --> 00:00:12,799
depending on your time zone

00:00:11,200 --> 00:00:14,920
first of all i am thankful to the

00:00:12,799 --> 00:00:17,279
organizers for giving me an

00:00:14,920 --> 00:00:18,880
opportunity to present this talk for

00:00:17,279 --> 00:00:20,640
depthcomp 2020.

00:00:18,880 --> 00:00:22,640
i would also like to acknowledge the

00:00:20,640 --> 00:00:25,680
team for incorporating the rainbow

00:00:22,640 --> 00:00:27,680
colors to this year's stepconf logo

00:00:25,680 --> 00:00:28,880
i'm john samuel and today i would like

00:00:27,680 --> 00:00:31,519
to talk about

00:00:28,880 --> 00:00:33,280
building a multilingual command line the

00:00:31,519 --> 00:00:34,960
goal of my talk is to look at the

00:00:33,280 --> 00:00:37,840
current implementations

00:00:34,960 --> 00:00:38,800
of the command line and explore one way

00:00:37,840 --> 00:00:41,280
to simplify

00:00:38,800 --> 00:00:42,559
command line focusing on natural

00:00:41,280 --> 00:00:44,960
language interface

00:00:42,559 --> 00:00:45,920
with multilingual support before

00:00:44,960 --> 00:00:48,559
continuing

00:00:45,920 --> 00:00:49,039
i would like to ask the first question

00:00:48,559 --> 00:00:52,239
is

00:00:49,039 --> 00:00:53,280
command line simple i would like you to

00:00:52,239 --> 00:00:56,079
think about the

00:00:53,280 --> 00:00:56,879
very first days when you start it using

00:00:56,079 --> 00:01:00,160
linux

00:00:56,879 --> 00:01:02,000
or other linux based systems where

00:01:00,160 --> 00:01:04,239
and your instructors told you to

00:01:02,000 --> 00:01:05,600
memorize some commands to interact with

00:01:04,239 --> 00:01:07,439
the command line

00:01:05,600 --> 00:01:09,360
in the next couple of slides i would

00:01:07,439 --> 00:01:12,000
like to show a very small

00:01:09,360 --> 00:01:12,799
subset of simple and commonly used

00:01:12,000 --> 00:01:15,600
commands

00:01:12,799 --> 00:01:16,479
to perform some basic operations for

00:01:15,600 --> 00:01:19,520
handling

00:01:16,479 --> 00:01:20,479
files processes or networks starting

00:01:19,520 --> 00:01:22,560
with files

00:01:20,479 --> 00:01:23,520
i'm very sure that all of you listening

00:01:22,560 --> 00:01:27,119
to this

00:01:23,520 --> 00:01:30,400
talk use ls at least once a day

00:01:27,119 --> 00:01:33,920
what is ls it's a command to list files

00:01:30,400 --> 00:01:36,880
or possibly a minimonic to list this was

00:01:33,920 --> 00:01:39,439
fine the first command memorized now

00:01:36,880 --> 00:01:42,560
let's move on to the second command

00:01:39,439 --> 00:01:45,119
how can i create a bank file

00:01:42,560 --> 00:01:46,560
there are several ways of course however

00:01:45,119 --> 00:01:49,920
once that's

00:01:46,560 --> 00:01:51,520
often suggested is touch how how can a

00:01:49,920 --> 00:01:54,960
newcomer ever remember

00:01:51,520 --> 00:01:56,640
touch moving on to the directories

00:01:54,960 --> 00:01:58,399
the first command you may have learned

00:01:56,640 --> 00:02:01,680
was to create a directory

00:01:58,399 --> 00:02:03,439
here comes mkdir mkdir

00:02:01,680 --> 00:02:06,159
coming from two words make hand

00:02:03,439 --> 00:02:09,039
directory hence the mnemonic mkdir

00:02:06,159 --> 00:02:10,000
now comes this command to change a

00:02:09,039 --> 00:02:13,680
directory

00:02:10,000 --> 00:02:17,680
going by the logic of the command mkdir

00:02:13,680 --> 00:02:20,879
it should be chdir or cgdir

00:02:17,680 --> 00:02:21,360
but no it's cd i'm wondering after how

00:02:20,879 --> 00:02:24,400
many

00:02:21,360 --> 00:02:26,239
petitions i have memorized these

00:02:24,400 --> 00:02:28,080
commands

00:02:26,239 --> 00:02:30,400
enough with files and directories now

00:02:28,080 --> 00:02:32,640
let's move on to the processes

00:02:30,400 --> 00:02:35,519
how can i see all the processes it's

00:02:32,640 --> 00:02:39,440
simple it should be lsp or lspr

00:02:35,519 --> 00:02:42,000
but once again i'm disappointed it's ps

00:02:39,440 --> 00:02:43,519
okay fine ps and processes are pretty

00:02:42,000 --> 00:02:47,120
close

00:02:43,519 --> 00:02:50,720
but you do learn that ps is interesting

00:02:47,120 --> 00:02:52,800
but it's much better to use top

00:02:50,720 --> 00:02:54,319
because it can give you a better view of

00:02:52,800 --> 00:02:58,000
the processes

00:02:54,319 --> 00:02:59,360
the main pitch of top says it displays

00:02:58,000 --> 00:03:01,920
processes

00:02:59,360 --> 00:03:03,760
one may try to associate it with top

00:03:01,920 --> 00:03:05,120
running processes to memorize this

00:03:03,760 --> 00:03:07,840
command

00:03:05,120 --> 00:03:08,959
moving on perform processes i wonder

00:03:07,840 --> 00:03:11,120
lsnet

00:03:08,959 --> 00:03:12,319
would correspond to see all the network

00:03:11,120 --> 00:03:16,800
connections

00:03:12,319 --> 00:03:18,800
again i was wrong it is netstat

00:03:16,800 --> 00:03:19,920
however i think i was lucky to guess the

00:03:18,800 --> 00:03:22,319
command for

00:03:19,920 --> 00:03:24,239
listing all the hardware indeed it is

00:03:22,319 --> 00:03:26,640
lshw

00:03:24,239 --> 00:03:28,480
again for cpu the guess was correct it

00:03:26,640 --> 00:03:30,799
is lscp

00:03:28,480 --> 00:03:32,400
but what about the time and date i was

00:03:30,799 --> 00:03:36,080
not disappointed and i could

00:03:32,400 --> 00:03:37,680
memorize this simple command date

00:03:36,080 --> 00:03:40,000
i think it's enough with these different

00:03:37,680 --> 00:03:41,200
commands i would like to show you a

00:03:40,000 --> 00:03:43,920
summary of the commands

00:03:41,200 --> 00:03:45,200
that we just saw is there any pattern

00:03:43,920 --> 00:03:46,799
that we can see

00:03:45,200 --> 00:03:49,440
that can reduce the learning curve of

00:03:46,799 --> 00:03:52,080
the newcomers

00:03:49,440 --> 00:03:54,400
we do see that some commands use ls

00:03:52,080 --> 00:03:56,159
which can simplify our learning process

00:03:54,400 --> 00:03:57,680
but it may not be true for all the

00:03:56,159 --> 00:03:59,519
commands

00:03:57,680 --> 00:04:01,360
as if remembering the commands was not

00:03:59,519 --> 00:04:02,799
enough and the professors told us about

00:04:01,360 --> 00:04:05,760
the options

00:04:02,799 --> 00:04:07,040
options what about them i want to give

00:04:05,760 --> 00:04:08,879
examples of

00:04:07,040 --> 00:04:10,480
some very commonly used options of the

00:04:08,879 --> 00:04:14,480
command line

00:04:10,480 --> 00:04:17,919
hyphen v is it verbose or is it version

00:04:14,480 --> 00:04:20,959
if i type hyphen v with python or r

00:04:17,919 --> 00:04:24,080
what would be the possible output

00:04:20,959 --> 00:04:25,600
what about hyphen r is it reverse or is

00:04:24,080 --> 00:04:29,040
it recursive

00:04:25,600 --> 00:04:32,000
and what about hyphen or double hyphen

00:04:29,040 --> 00:04:33,440
okay for help is it hyphen etch or is it

00:04:32,000 --> 00:04:36,479
hyphen hyphenate

00:04:33,440 --> 00:04:38,080
or is it hyphen help a lot has changed

00:04:36,479 --> 00:04:39,040
since these commands were initially

00:04:38,080 --> 00:04:41,199
developed

00:04:39,040 --> 00:04:43,520
the problems of hyphen edge or double

00:04:41,199 --> 00:04:45,840
iphone edge are now pretty much

00:04:43,520 --> 00:04:47,440
well handled by a good support from

00:04:45,840 --> 00:04:48,800
standard libraries

00:04:47,440 --> 00:04:50,800
this has helped towards the

00:04:48,800 --> 00:04:53,360
standardization of commands

00:04:50,800 --> 00:04:55,759
i wish to give a couple of examples of

00:04:53,360 --> 00:04:57,919
the support from standard libraries

00:04:55,759 --> 00:05:00,720
for example in c you have got the

00:04:57,919 --> 00:05:03,840
functions get top to get oblong

00:05:00,720 --> 00:05:06,160
in python you have got arc bars

00:05:03,840 --> 00:05:08,240
these functions or methods can now be

00:05:06,160 --> 00:05:10,240
used to ensure that there is only one

00:05:08,240 --> 00:05:12,720
hyphen with a short version

00:05:10,240 --> 00:05:14,400
that is hyphen edge and there are two

00:05:12,720 --> 00:05:15,919
hyphens for the long version of an

00:05:14,400 --> 00:05:19,039
option therefore we have

00:05:15,919 --> 00:05:22,800
double hyphen help for example in

00:05:19,039 --> 00:05:24,880
c get opt get oblong functions can be

00:05:22,800 --> 00:05:25,840
used to create commands with short and

00:05:24,880 --> 00:05:29,199
long options

00:05:25,840 --> 00:05:32,560
optional arguments etc and

00:05:29,199 --> 00:05:34,880
if and in python arc parse

00:05:32,560 --> 00:05:35,680
can be used by the developers to create

00:05:34,880 --> 00:05:37,600
commands with

00:05:35,680 --> 00:05:39,039
short and long options one or more

00:05:37,600 --> 00:05:41,759
optional arguments

00:05:39,039 --> 00:05:43,039
specify data types for arguments sub

00:05:41,759 --> 00:05:46,400
commands

00:05:43,039 --> 00:05:48,960
there are a lot of ways by which further

00:05:46,400 --> 00:05:50,080
enhancement of command line can be made

00:05:48,960 --> 00:05:53,360
possible

00:05:50,080 --> 00:05:56,800
most of you have heard about bash ksh

00:05:53,360 --> 00:05:57,199
jz it's another shell called fish that

00:05:56,800 --> 00:05:59,520
un

00:05:57,199 --> 00:06:01,680
incorporates colors to the command line

00:05:59,520 --> 00:06:04,080
making a clear distinction

00:06:01,680 --> 00:06:04,880
a wish clear visual distinction between

00:06:04,080 --> 00:06:08,720
commands

00:06:04,880 --> 00:06:10,800
and their options yet we need to

00:06:08,720 --> 00:06:11,759
see works to add progress bars to

00:06:10,800 --> 00:06:14,240
visualize the

00:06:11,759 --> 00:06:15,600
progress of command in action currently

00:06:14,240 --> 00:06:18,720
it is mostly handled

00:06:15,600 --> 00:06:20,720
by the command itself

00:06:18,720 --> 00:06:22,560
multilingual documentation has been

00:06:20,720 --> 00:06:24,639
suggested to

00:06:22,560 --> 00:06:26,240
help improve the learning curve of the

00:06:24,639 --> 00:06:28,560
command line users

00:06:26,240 --> 00:06:29,919
unfortunately this is mostly limited to

00:06:28,560 --> 00:06:33,120
a couple of languages

00:06:29,919 --> 00:06:35,680
and a very few commands

00:06:33,120 --> 00:06:36,880
this brings me to the second part of my

00:06:35,680 --> 00:06:39,039
talk

00:06:36,880 --> 00:06:40,319
instead of focusing only on multilingual

00:06:39,039 --> 00:06:43,039
documentation

00:06:40,319 --> 00:06:44,800
what if we ask but why not multilingual

00:06:43,039 --> 00:06:47,120
commands and options

00:06:44,800 --> 00:06:48,080
what if native language support is

00:06:47,120 --> 00:06:50,400
brought to the command

00:06:48,080 --> 00:06:52,639
line where people can write comments in

00:06:50,400 --> 00:06:55,199
their native languages

00:06:52,639 --> 00:06:57,280
but what are multilingual commands

00:06:55,199 --> 00:06:59,599
taking the example of three languages

00:06:57,280 --> 00:07:02,240
english french and malayalam i would i

00:06:59,599 --> 00:07:05,039
want to illustrate multilingual commands

00:07:02,240 --> 00:07:06,639
or imperative sentences to list all the

00:07:05,039 --> 00:07:09,039
processes

00:07:06,639 --> 00:07:10,080
first one in english list all the

00:07:09,039 --> 00:07:13,039
processes

00:07:10,080 --> 00:07:14,080
in french fish tula processes in

00:07:13,039 --> 00:07:17,039
malayalam

00:07:14,080 --> 00:07:19,120
prakriegal karnikugam please note that i

00:07:17,039 --> 00:07:21,199
have highlighted the action verbs

00:07:19,120 --> 00:07:22,240
in these three sentences not their

00:07:21,199 --> 00:07:24,319
position

00:07:22,240 --> 00:07:26,000
note that the action verb may not come

00:07:24,319 --> 00:07:28,880
in the first position

00:07:26,000 --> 00:07:30,400
look at the third example taking the

00:07:28,880 --> 00:07:34,000
example of bash

00:07:30,400 --> 00:07:36,639
a sell a kind of command line language

00:07:34,000 --> 00:07:37,680
command line language for unix or linux

00:07:36,639 --> 00:07:40,080
based systems

00:07:37,680 --> 00:07:42,840
let's explore how a shell can be

00:07:40,080 --> 00:07:45,440
extended to give a multilingual

00:07:42,840 --> 00:07:47,360
interface solution 1

00:07:45,440 --> 00:07:48,639
as the developers and maintainers to

00:07:47,360 --> 00:07:50,639
support their tools

00:07:48,639 --> 00:07:53,120
applications or commands in multiple

00:07:50,639 --> 00:07:55,120
languages and release executable in

00:07:53,120 --> 00:07:59,199
multiple languages

00:07:55,120 --> 00:08:00,879
solution 2 modify the shell

00:07:59,199 --> 00:08:02,960
so it's going to allow accepting

00:08:00,879 --> 00:08:04,080
translations of existing commands in

00:08:02,960 --> 00:08:05,680
such a manner that

00:08:04,080 --> 00:08:08,000
when a user types a command in the

00:08:05,680 --> 00:08:08,960
native language the shell searches for

00:08:08,000 --> 00:08:11,759
the command in

00:08:08,960 --> 00:08:13,520
all the translations and if it finds one

00:08:11,759 --> 00:08:15,680
checks whether translation is mapped to

00:08:13,520 --> 00:08:18,879
any existing command

00:08:15,680 --> 00:08:20,960
solution 3 extend the shell

00:08:18,879 --> 00:08:22,160
in transparent manner that does not

00:08:20,960 --> 00:08:25,360
require

00:08:22,160 --> 00:08:27,840
either any modification to the cell

00:08:25,360 --> 00:08:29,360
nor any modification to the individual

00:08:27,840 --> 00:08:32,479
applications

00:08:29,360 --> 00:08:34,479
solutions one and two require a lot of

00:08:32,479 --> 00:08:37,839
work for translating all the existing

00:08:34,479 --> 00:08:39,760
commands the arguments or options

00:08:37,839 --> 00:08:41,120
in real life we do not use all the

00:08:39,760 --> 00:08:43,120
available commands

00:08:41,120 --> 00:08:44,880
why not take a look at the regular use

00:08:43,120 --> 00:08:47,360
command and build a

00:08:44,880 --> 00:08:48,160
transparent multilingual solution using

00:08:47,360 --> 00:08:49,600
these commands

00:08:48,160 --> 00:08:51,440
and this is what brings us to the

00:08:49,600 --> 00:08:53,200
solution three and this is what i'm

00:08:51,440 --> 00:08:56,640
going to talk

00:08:53,200 --> 00:08:59,680
in the rest of my talk firstly

00:08:56,640 --> 00:09:02,640
i want to explore how we can get some

00:08:59,680 --> 00:09:04,320
inspiration from other domains and their

00:09:02,640 --> 00:09:06,480
approaches in reducing the learning

00:09:04,320 --> 00:09:09,519
curve of the newcomers

00:09:06,480 --> 00:09:11,920
let's consider the rest api or

00:09:09,519 --> 00:09:13,839
rest application programming interface

00:09:11,920 --> 00:09:16,480
of web services

00:09:13,839 --> 00:09:17,839
the rest architecture style has ensured

00:09:16,480 --> 00:09:20,880
a lot of simplification

00:09:17,839 --> 00:09:21,519
creating new web services and the way by

00:09:20,880 --> 00:09:24,000
which

00:09:21,519 --> 00:09:26,080
we can manipulate resources and when i

00:09:24,000 --> 00:09:28,399
say resource i mean online resources

00:09:26,080 --> 00:09:29,360
like user profiles or associated user

00:09:28,399 --> 00:09:31,760
data

00:09:29,360 --> 00:09:33,600
on social media networking site but you

00:09:31,760 --> 00:09:34,640
can also consider resources on your

00:09:33,600 --> 00:09:38,560
machines like

00:09:34,640 --> 00:09:40,240
process network files directories etc

00:09:38,560 --> 00:09:42,720
interestingly these are some of the

00:09:40,240 --> 00:09:45,360
actions of vocabulary

00:09:42,720 --> 00:09:46,480
popularized by rest web services like

00:09:45,360 --> 00:09:50,880
create

00:09:46,480 --> 00:09:54,240
read update delete list or simply crud l

00:09:50,880 --> 00:09:56,720
or crud continuing with the example of

00:09:54,240 --> 00:09:58,160
command line let's see how some of these

00:09:56,720 --> 00:10:01,120
commands may look like in

00:09:58,160 --> 00:10:02,720
english so you have the got the action

00:10:01,120 --> 00:10:05,040
and you have got the resource

00:10:02,720 --> 00:10:07,279
so you have create file rate file update

00:10:05,040 --> 00:10:09,680
file delete file list file etc

00:10:07,279 --> 00:10:11,839
and you can have additional actions like

00:10:09,680 --> 00:10:14,880
validate file if you are working with

00:10:11,839 --> 00:10:17,519
json files or xml files

00:10:14,880 --> 00:10:18,079
and in french they may look like cream

00:10:17,519 --> 00:10:20,640
fish

00:10:18,079 --> 00:10:22,560
efficient fishy modified fishy supreme

00:10:20,640 --> 00:10:24,560
fishy etc

00:10:22,560 --> 00:10:26,880
in case of english and french the

00:10:24,560 --> 00:10:30,560
imperatives or commands are of the form

00:10:26,880 --> 00:10:34,160
verb plus object subject plus object

00:10:30,560 --> 00:10:37,120
where or verb plus object or just

00:10:34,160 --> 00:10:38,079
verb however these imperative sentences

00:10:37,120 --> 00:10:40,800
follow a different

00:10:38,079 --> 00:10:42,160
order in languages like malayalam as we

00:10:40,800 --> 00:10:44,000
saw in the previous slide

00:10:42,160 --> 00:10:45,279
where the resource comes before the

00:10:44,000 --> 00:10:47,760
verbs thus

00:10:45,279 --> 00:10:50,160
the word order cannot be assumed and

00:10:47,760 --> 00:10:51,839
it's important to be flexible

00:10:50,160 --> 00:10:53,920
and figure one shows the first

00:10:51,839 --> 00:10:56,000
possibility where the verb

00:10:53,920 --> 00:10:57,040
comes first and the resources come at

00:10:56,000 --> 00:10:58,959
the second place

00:10:57,040 --> 00:11:00,079
so you have got list and you have got

00:10:58,959 --> 00:11:03,680
all the resources like

00:11:00,079 --> 00:11:05,519
files directories processes connections

00:11:03,680 --> 00:11:08,000
now the second possibility is shown in

00:11:05,519 --> 00:11:09,200
figure 2 where the resource comes in the

00:11:08,000 --> 00:11:12,399
first place so you have got

00:11:09,200 --> 00:11:16,320
files and all the possible actions like

00:11:12,399 --> 00:11:19,680
create show delete list as a second

00:11:16,320 --> 00:11:21,519
second option now while working with the

00:11:19,680 --> 00:11:23,200
command line and taking a look at

00:11:21,519 --> 00:11:24,800
some of the commands that people

00:11:23,200 --> 00:11:27,839
normally use we can

00:11:24,800 --> 00:11:29,600
obtain a list of possible resources and

00:11:27,839 --> 00:11:32,959
the actions that can

00:11:29,600 --> 00:11:36,320
be applied on them for example you got

00:11:32,959 --> 00:11:36,880
for uh resources like directory network

00:11:36,320 --> 00:11:40,000
connection

00:11:36,880 --> 00:11:42,800
file processes memory as a resource

00:11:40,000 --> 00:11:45,040
on your machine and you could take a sub

00:11:42,800 --> 00:11:48,720
a subset of the actions like create

00:11:45,040 --> 00:11:50,800
show delete and list for those of you

00:11:48,720 --> 00:11:53,200
who are further interested in this topic

00:11:50,800 --> 00:11:53,920
i would suggest you to take a look at

00:11:53,200 --> 00:11:57,360
the work of

00:11:53,920 --> 00:11:59,519
firefox of ubiquity which was a project

00:11:57,360 --> 00:12:00,480
done by mozilla labs couple of years

00:11:59,519 --> 00:12:02,560
before

00:12:00,480 --> 00:12:04,000
so so to conclude we need to have

00:12:02,560 --> 00:12:05,040
following groups of multilingual

00:12:04,000 --> 00:12:06,880
commands

00:12:05,040 --> 00:12:08,320
in the first group we have got a

00:12:06,880 --> 00:12:10,160
multilingual command

00:12:08,320 --> 00:12:11,760
which consists of an action and a

00:12:10,160 --> 00:12:14,000
resource that is

00:12:11,760 --> 00:12:15,600
action verbs comes first before the

00:12:14,000 --> 00:12:18,480
resource

00:12:15,600 --> 00:12:20,639
in the second group the multilingual

00:12:18,480 --> 00:12:23,839
command consists of a resource

00:12:20,639 --> 00:12:24,720
and an action that is the action verbs

00:12:23,839 --> 00:12:28,079
comes

00:12:24,720 --> 00:12:31,120
later after the resource

00:12:28,079 --> 00:12:32,959
finally the third group resources or

00:12:31,120 --> 00:12:34,800
actions can be in any order so you have

00:12:32,959 --> 00:12:37,519
got action plus resource plus

00:12:34,800 --> 00:12:38,720
options or resource plus actions plus

00:12:37,519 --> 00:12:40,720
options

00:12:38,720 --> 00:12:43,200
with these groups in mind we can now

00:12:40,720 --> 00:12:47,200
move on to the third part of this talk

00:12:43,200 --> 00:12:49,360
that is the development of these ideas

00:12:47,200 --> 00:12:51,040
let us explore a very simple way to

00:12:49,360 --> 00:12:52,959
implement this idea

00:12:51,040 --> 00:12:54,560
we want to implement commands as shown

00:12:52,959 --> 00:12:57,040
in figure 1

00:12:54,560 --> 00:12:59,120
where the action verbs comes first and

00:12:57,040 --> 00:13:02,079
the resource comes in the second place

00:12:59,120 --> 00:13:05,360
and as in figure 2 where the action verb

00:13:02,079 --> 00:13:07,200
comes in the second place

00:13:05,360 --> 00:13:08,880
the first solution is a very basic

00:13:07,200 --> 00:13:11,440
solution and we are going to use

00:13:08,880 --> 00:13:13,279
aliases for testing these commands you

00:13:11,440 --> 00:13:16,880
just have to add these commands

00:13:13,279 --> 00:13:18,399
in your bash rc files in the home

00:13:16,880 --> 00:13:20,639
directory

00:13:18,399 --> 00:13:23,360
the idea is to create a new word

00:13:20,639 --> 00:13:26,160
combining action words and resources

00:13:23,360 --> 00:13:26,959
so you have got four aliases here list

00:13:26,160 --> 00:13:29,519
file create

00:13:26,959 --> 00:13:31,279
file delete file and show file making

00:13:29,519 --> 00:13:34,639
use of existing commands

00:13:31,279 --> 00:13:36,560
ls touch rm and cat which

00:13:34,639 --> 00:13:38,880
have some of which we have discussed

00:13:36,560 --> 00:13:40,720
before and i'm sure many of you

00:13:38,880 --> 00:13:43,600
listening to this talk

00:13:40,720 --> 00:13:44,480
have many more complex commands using

00:13:43,600 --> 00:13:47,760
aliases

00:13:44,480 --> 00:13:50,399
the idea here is a newcomer wants to

00:13:47,760 --> 00:13:51,519
interact with the command line can only

00:13:50,399 --> 00:13:54,560
hand has to remember

00:13:51,519 --> 00:13:57,040
only the action verbs for example list

00:13:54,560 --> 00:13:58,959
create delete and show and they can

00:13:57,040 --> 00:14:00,160
concatenate the resource with these

00:13:58,959 --> 00:14:02,000
commands

00:14:00,160 --> 00:14:04,000
thus with the very basic solution of

00:14:02,000 --> 00:14:07,279
using aliases

00:14:04,000 --> 00:14:09,199
the user wishing to manipulate

00:14:07,279 --> 00:14:10,959
directories can simply write list

00:14:09,199 --> 00:14:13,440
directory create directory delete

00:14:10,959 --> 00:14:16,959
directory show directory etc

00:14:13,440 --> 00:14:20,560
however some may see the presence of big

00:14:16,959 --> 00:14:23,839
commands like let's directly create file

00:14:20,560 --> 00:14:26,800
uh not as a very interesting approach

00:14:23,839 --> 00:14:27,920
since these words do not exist in the

00:14:26,800 --> 00:14:31,120
dictionary

00:14:27,920 --> 00:14:33,199
so we may wish to create commands that

00:14:31,120 --> 00:14:34,160
are close to human language so the

00:14:33,199 --> 00:14:36,639
second approach

00:14:34,160 --> 00:14:37,839
is to separate action words and

00:14:36,639 --> 00:14:39,920
resources

00:14:37,839 --> 00:14:41,360
so that the user can run the following

00:14:39,920 --> 00:14:44,560
type of commands

00:14:41,360 --> 00:14:48,079
create space directory space

00:14:44,560 --> 00:14:51,760
there one show directory dir1 delete

00:14:48,079 --> 00:14:55,519
directory dr1 create file dir 51

00:14:51,760 --> 00:14:57,360
show file file 1 so the next solution is

00:14:55,519 --> 00:14:59,040
based on functions

00:14:57,360 --> 00:15:00,880
as you can see we have written a

00:14:59,040 --> 00:15:03,680
function called delete actions

00:15:00,880 --> 00:15:04,560
and it has got two resources file and

00:15:03,680 --> 00:15:07,199
directory

00:15:04,560 --> 00:15:07,760
we are also making use of x2 existing

00:15:07,199 --> 00:15:10,800
commands

00:15:07,760 --> 00:15:14,079
rm and rm directory got

00:15:10,800 --> 00:15:16,320
an alias called delete so this code

00:15:14,079 --> 00:15:17,600
shows how alias can be used to call a

00:15:16,320 --> 00:15:20,000
function

00:15:17,600 --> 00:15:21,199
although we are using a way to delete

00:15:20,000 --> 00:15:23,839
files and directories

00:15:21,199 --> 00:15:27,040
it can be used similarly for working

00:15:23,839 --> 00:15:29,040
with network connections processes etc

00:15:27,040 --> 00:15:30,399
now with the above code we can run the

00:15:29,040 --> 00:15:33,839
following commands

00:15:30,399 --> 00:15:37,279
delete space directory space there one

00:15:33,839 --> 00:15:39,360
delete space file space f1

00:15:37,279 --> 00:15:42,160
but what if we want to repeat the same

00:15:39,360 --> 00:15:43,839
process for the french language

00:15:42,160 --> 00:15:45,199
so we have got this function called

00:15:43,839 --> 00:15:47,120
supreme action

00:15:45,199 --> 00:15:49,279
and as you can see the code is similar

00:15:47,120 --> 00:15:50,240
to the one that we saw for the english

00:15:49,279 --> 00:15:52,560
language

00:15:50,240 --> 00:15:54,959
but we have replaced action words and

00:15:52,560 --> 00:15:57,279
resources by the translations

00:15:54,959 --> 00:15:58,079
in the french language so now we can run

00:15:57,279 --> 00:16:01,680
the following

00:15:58,079 --> 00:16:01,680
commands in the french language

00:16:06,399 --> 00:16:09,600
but what if we want to repeat this

00:16:08,480 --> 00:16:12,160
formalin

00:16:09,600 --> 00:16:14,639
if you remember in the case of malayalam

00:16:12,160 --> 00:16:16,240
the resource comes in the first position

00:16:14,639 --> 00:16:17,759
hence there is a slight change in the

00:16:16,240 --> 00:16:20,560
code notice

00:16:17,759 --> 00:16:22,160
how we have created a function for

00:16:20,560 --> 00:16:25,360
manipulating directories

00:16:22,160 --> 00:16:28,079
that is the creation and deletion using

00:16:25,360 --> 00:16:31,920
mkder and rmdata

00:16:28,079 --> 00:16:34,560
rm directory so we have got the resource

00:16:31,920 --> 00:16:36,320
in this case we have the directory and

00:16:34,560 --> 00:16:39,120
we have got the two actions

00:16:36,320 --> 00:16:40,959
creation and deletion with these

00:16:39,120 --> 00:16:44,079
functions we have succeeded

00:16:40,959 --> 00:16:46,240
in creating multilingual commands

00:16:44,079 --> 00:16:47,680
transparently using the existing

00:16:46,240 --> 00:16:50,720
commands

00:16:47,680 --> 00:16:51,680
you may ask that these are very long

00:16:50,720 --> 00:16:54,160
commands

00:16:51,680 --> 00:16:55,120
but what about shorter commands and

00:16:54,160 --> 00:16:57,519
options

00:16:55,120 --> 00:16:58,399
as you may observe that the function

00:16:57,519 --> 00:17:02,320
that has been

00:16:58,399 --> 00:17:03,440
crea created before is modified in this

00:17:02,320 --> 00:17:06,959
current slide

00:17:03,440 --> 00:17:08,880
to create shorter options so

00:17:06,959 --> 00:17:10,240
what if you want to have more options

00:17:08,880 --> 00:17:12,160
yes it's possible

00:17:10,240 --> 00:17:14,079
you can make use of the count variable

00:17:12,160 --> 00:17:14,959
to get the count of options and

00:17:14,079 --> 00:17:17,360
arguments

00:17:14,959 --> 00:17:19,360
and you can use dollar one dollar two

00:17:17,360 --> 00:17:20,880
dollar three exeter to handle each

00:17:19,360 --> 00:17:23,439
argument

00:17:20,880 --> 00:17:24,799
here we see shorter commands for the

00:17:23,439 --> 00:17:26,720
french users

00:17:24,799 --> 00:17:28,559
recall that the french users can easily

00:17:26,720 --> 00:17:31,840
associate s with supreme

00:17:28,559 --> 00:17:34,160
or delete in english f with fischer

00:17:31,840 --> 00:17:35,760
our file in english are with refer to

00:17:34,160 --> 00:17:38,880
our directory in english

00:17:35,760 --> 00:17:42,559
so we have got the commands sr rep1

00:17:38,880 --> 00:17:44,640
as ff1 finally i have come to the final

00:17:42,559 --> 00:17:47,600
part of my talk

00:17:44,640 --> 00:17:49,760
what can be the possible role for the

00:17:47,600 --> 00:17:51,120
debian community in the future

00:17:49,760 --> 00:17:52,799
because there are seven thousand

00:17:51,120 --> 00:17:53,280
languages and even if you decide to

00:17:52,799 --> 00:17:55,440
focus

00:17:53,280 --> 00:17:57,039
only on hundred to two or three hundred

00:17:55,440 --> 00:17:58,000
languages with the most number of

00:17:57,039 --> 00:17:59,440
speakers

00:17:58,000 --> 00:18:01,280
it is difficult to ensure the

00:17:59,440 --> 00:18:04,240
development translation of

00:18:01,280 --> 00:18:05,360
all commands tools and documentation

00:18:04,240 --> 00:18:07,440
sharing is

00:18:05,360 --> 00:18:09,039
sharing and collaboration is the way to

00:18:07,440 --> 00:18:10,559
ensure greater availability of

00:18:09,039 --> 00:18:12,480
multilingual commands

00:18:10,559 --> 00:18:13,760
the users can develop command line

00:18:12,480 --> 00:18:16,000
configuration files

00:18:13,760 --> 00:18:17,440
for the language or languages by making

00:18:16,000 --> 00:18:20,000
use of the existing commands

00:18:17,440 --> 00:18:22,160
as discussed in this presentation they

00:18:20,000 --> 00:18:24,400
can share these multilingual

00:18:22,160 --> 00:18:26,720
configuration files with other users

00:18:24,400 --> 00:18:28,880
using open source licenses

00:18:26,720 --> 00:18:31,039
and finally the debian community can

00:18:28,880 --> 00:18:32,640
imagine

00:18:31,039 --> 00:18:34,880
collaborating towards a flexible

00:18:32,640 --> 00:18:37,039
solution which not only promotes

00:18:34,880 --> 00:18:39,760
multiple commands and tools but also

00:18:37,039 --> 00:18:42,000
ensure the flexibility of the users

00:18:39,760 --> 00:18:43,760
in choosing their favorite commands

00:18:42,000 --> 00:18:44,080
there are several possible ways by which

00:18:43,760 --> 00:18:46,240
my

00:18:44,080 --> 00:18:47,280
multiple lingual command command line

00:18:46,240 --> 00:18:50,880
can be built

00:18:47,280 --> 00:18:53,360
this talk possible transparent solution

00:18:50,880 --> 00:18:55,280
discussed in this presentation may be

00:18:53,360 --> 00:18:56,240
used helpful to reduce the learning

00:18:55,280 --> 00:18:57,760
curve of

00:18:56,240 --> 00:18:59,360
the students who are very new to the

00:18:57,760 --> 00:19:01,200
command line

00:18:59,360 --> 00:19:03,200
there are efforts like os credit that

00:19:01,200 --> 00:19:05,120
aim to simplify the command line using

00:19:03,200 --> 00:19:06,960
sparkle-like commands

00:19:05,120 --> 00:19:08,799
some researchers have been exploring a

00:19:06,960 --> 00:19:11,520
natural language interface for the

00:19:08,799 --> 00:19:13,520
command line but these works are focused

00:19:11,520 --> 00:19:16,080
on english language and do not consider

00:19:13,520 --> 00:19:18,799
the linguistic diversity of the world

00:19:16,080 --> 00:19:21,840
finally future open source solutions

00:19:18,799 --> 00:19:23,440
need to be multilingual by design

00:19:21,840 --> 00:19:25,760
these are some of the references for

00:19:23,440 --> 00:19:27,679
this talk you can take a look at the

00:19:25,760 --> 00:19:30,400
dot files repository that i created

00:19:27,679 --> 00:19:32,559
recently if you are interested you can

00:19:30,400 --> 00:19:35,840
contribute to it or you can share your

00:19:32,559 --> 00:19:38,000
own to the open source community

00:19:35,840 --> 00:19:40,160
thank you once again for listening to my

00:19:38,000 --> 00:19:42,000
talk and giving me this opportunity

00:19:40,160 --> 00:19:43,360
i hope that this talk may inspire

00:19:42,000 --> 00:19:45,440
current and future

00:19:43,360 --> 00:19:46,960
open source contributors especially

00:19:45,440 --> 00:19:49,919
bilingual or multilingual

00:19:46,960 --> 00:19:50,960
contributors to develop multilingual

00:19:49,919 --> 00:19:53,039
solutions

00:19:50,960 --> 00:19:54,400
if you have any questions or remarks or

00:19:53,039 --> 00:19:57,600
if you want to

00:19:54,400 --> 00:19:59,360
point to some interesting works please

00:19:57,600 --> 00:20:07,200
do not hesitate to contact me

00:19:59,360 --> 00:20:07,200

YouTube URL: https://www.youtube.com/watch?v=69A-HTXy4zg


