Title: MySQL Replication Update
Publication date: 2020-10-23
Playlist: DebConf 20
Description: 
	by stoker

At: DebConf20
https://debconf20.debconf.org/talks/54-mysql-replication-update/

MySQL replication has been around for well over a decade and the latest version of MySQL has a lot of advancements.  InnoDB cluster provides a fault tolerant, highly available cluster. Groups can operate in a single-primary mode with automatic primary election, where only one server accepts updates at a time with read-only replicas to split the load. Alternatively, groups can be deployed in multi-primary mode, where all servers can accept updates, even if they are issued concurrently. And to make bringing a new cluster member online easier,there is a clone plugin permits cloning data locally or from a remote MySQL server instance. Cloned data is a physical snapshot of data stored in InnoDB that includes schemas, tables, tablespaces, and data dictionary metadata to have the new system operational as quickly as possible. MySQL Router is a Level 4 proxy to handle the flow of your data. Plus there are utilities in the New MySQL Shell, mysqlsh, for the easy administration of a cluster.  So if you have not looked at MySQL replication in a while your will be happily surprised with the new features and performance.

Room: Talks
Scheduled start: 2020-08-24 22:00:00
Captions: 
	00:00:05,560 --> 00:00:10,960
[Music]

00:00:09,280 --> 00:00:12,480
good morning good afternoon good evening

00:00:10,960 --> 00:00:14,719
depending where you are

00:00:12,480 --> 00:00:16,720
my name is dave stokes i am a mysql

00:00:14,719 --> 00:00:18,080
community manager which means before

00:00:16,720 --> 00:00:20,000
covid i used to travel all around

00:00:18,080 --> 00:00:21,279
evangelizing mysql products for oracle

00:00:20,000 --> 00:00:23,760
corporation

00:00:21,279 --> 00:00:25,519
and now i'm doing a lot of these video

00:00:23,760 --> 00:00:28,160
presentations and

00:00:25,519 --> 00:00:30,800
today i'm going to be covering mysql 8.0

00:00:28,160 --> 00:00:32,719
replication update

00:00:30,800 --> 00:00:34,000
please be advised the slides will be

00:00:32,719 --> 00:00:34,719
available i'll have the link to that

00:00:34,000 --> 00:00:37,360
later

00:00:34,719 --> 00:00:38,079
and hopefully i'll be able to answer

00:00:37,360 --> 00:00:40,160
your questions

00:00:38,079 --> 00:00:41,680
live during this presentation it's

00:00:40,160 --> 00:00:44,320
pre-recorded

00:00:41,680 --> 00:00:46,320
if i'll be monitoring that as it goes if

00:00:44,320 --> 00:00:50,239
not my contact information is here and

00:00:46,320 --> 00:00:50,239
we should do a q a sometime around this

00:00:50,800 --> 00:00:54,719
so let's go to the first slide i have to

00:00:53,600 --> 00:00:57,840
show

00:00:54,719 --> 00:00:59,840
oracle safe harbor agreement uh

00:00:57,840 --> 00:01:02,160
i am going to be speaking about the free

00:00:59,840 --> 00:01:04,239
open gpl licensed

00:01:02,160 --> 00:01:06,560
version 2 version of the mysql community

00:01:04,239 --> 00:01:08,320
edition uh if during the q a i get off

00:01:06,560 --> 00:01:09,600
on a future product

00:01:08,320 --> 00:01:11,600
please take it with a grain of salt

00:01:09,600 --> 00:01:12,400
that's what this legal document here

00:01:11,600 --> 00:01:13,439
says

00:01:12,400 --> 00:01:15,040
if i mention anything about the

00:01:13,439 --> 00:01:16,560
enterprise edition i will point that out

00:01:15,040 --> 00:01:19,479
the enterprise edition

00:01:16,560 --> 00:01:20,720
has an additional subscription cost but

00:01:19,479 --> 00:01:23,040
99.999

00:01:20,720 --> 00:01:23,759
of what i'm talking about today is the

00:01:23,040 --> 00:01:26,960
free

00:01:23,759 --> 00:01:31,840
open open source

00:01:26,960 --> 00:01:35,520
community edition so mysql80 was a big

00:01:31,840 --> 00:01:37,680
change it came out two years ago april

00:01:35,520 --> 00:01:39,520
a big advancement over our previous

00:01:37,680 --> 00:01:41,520
version which was five seven

00:01:39,520 --> 00:01:43,040
and you're gonna see just uh the tip of

00:01:41,520 --> 00:01:44,640
the iceberg of that

00:01:43,040 --> 00:01:46,720
and there are a lot of facets that i

00:01:44,640 --> 00:01:48,240
can't cover due to the uh

00:01:46,720 --> 00:01:51,840
the scope of this presentation but

00:01:48,240 --> 00:01:51,840
hopefully you can explore them later

00:01:52,079 --> 00:01:59,200
now if you're using mysql56 or earlier

00:01:56,479 --> 00:01:59,759
with specialty 5.6 uh please note it

00:01:59,200 --> 00:02:02,399
reaches

00:01:59,759 --> 00:02:04,320
end of life status for support and

00:02:02,399 --> 00:02:05,040
updates on february i believe it's the

00:02:04,320 --> 00:02:08,879
fifth

00:02:05,040 --> 00:02:10,800
of 2021 if you're using five six you

00:02:08,879 --> 00:02:13,360
need to get a

00:02:10,800 --> 00:02:14,000
light on and get upgrading to at least

00:02:13,360 --> 00:02:17,360
five seven

00:02:14,000 --> 00:02:17,360
if not hopefully to eight

00:02:17,520 --> 00:02:23,680
okay for those who don't know what mysql

00:02:19,280 --> 00:02:25,360
is it is 25 years old

00:02:23,680 --> 00:02:26,959
it's a relational database management

00:02:25,360 --> 00:02:29,120
system once again

00:02:26,959 --> 00:02:32,160
it's the community edition is licensed

00:02:29,120 --> 00:02:34,879
under the new public license version 2.

00:02:32,160 --> 00:02:36,080
we do have a licensed enterprise edition

00:02:34,879 --> 00:02:39,120
with that you get

00:02:36,080 --> 00:02:40,319
a great monitoring software a very fast

00:02:39,120 --> 00:02:42,560
backup

00:02:40,319 --> 00:02:44,319
at rest encryption data masking a

00:02:42,560 --> 00:02:45,760
firewall that learns your queries

00:02:44,319 --> 00:02:48,400
and queries don't don't match your

00:02:45,760 --> 00:02:50,000
normal pattern get rejected

00:02:48,400 --> 00:02:52,000
key change management and that all

00:02:50,000 --> 00:02:54,800
important support

00:02:52,000 --> 00:02:56,160
also mysql since version 5.7 has been a

00:02:54,800 --> 00:02:59,120
no sql

00:02:56,160 --> 00:02:59,680
json document store database what does

00:02:59,120 --> 00:03:01,920
this mean

00:02:59,680 --> 00:03:03,360
well if you need to start storing your

00:03:01,920 --> 00:03:04,080
data and you're on one of those projects

00:03:03,360 --> 00:03:06,000
so they say

00:03:04,080 --> 00:03:07,200
hey start coding this week and two weeks

00:03:06,000 --> 00:03:08,400
from now we'll tell you exactly what

00:03:07,200 --> 00:03:10,560
you're working on

00:03:08,400 --> 00:03:12,480
uh this is great for you you connect to

00:03:10,560 --> 00:03:14,000
the server you open a document

00:03:12,480 --> 00:03:18,480
collection and you start

00:03:14,000 --> 00:03:21,599
saving json documents which you can

00:03:18,480 --> 00:03:23,360
manipulate however you want do searches

00:03:21,599 --> 00:03:25,040
updates deletes however you want to do

00:03:23,360 --> 00:03:26,480
that without having some relational

00:03:25,040 --> 00:03:28,000
tables or

00:03:26,480 --> 00:03:29,760
indexes or any of the other stuff you're

00:03:28,000 --> 00:03:31,840
used to with a relational database

00:03:29,760 --> 00:03:33,360
by the way this json data is available

00:03:31,840 --> 00:03:34,959
from the sql side

00:03:33,360 --> 00:03:37,680
and the sql data is actually available

00:03:34,959 --> 00:03:39,760
from the nosql side if you want it

00:03:37,680 --> 00:03:40,959
also we have a lot of other software

00:03:39,760 --> 00:03:43,519
that you may know about

00:03:40,959 --> 00:03:45,120
our language connectors mysql router

00:03:43,519 --> 00:03:48,400
which i'll talk about a bit later

00:03:45,120 --> 00:03:50,080
mysql shell which is our new cli and uh

00:03:48,400 --> 00:03:51,200
things like energy cluster and there's a

00:03:50,080 --> 00:03:53,040
lot more out there but

00:03:51,200 --> 00:03:55,680
we're kind of limited in time so let me

00:03:53,040 --> 00:03:56,720
get going on that

00:03:55,680 --> 00:03:58,159
so the first question when i started

00:03:56,720 --> 00:04:00,000
talking about mysql80 and i mentioned

00:03:58,159 --> 00:04:02,400
our previous version was five seven

00:04:00,000 --> 00:04:04,319
people asked what happened to mysql six

00:04:02,400 --> 00:04:07,040
and mysql seven

00:04:04,319 --> 00:04:10,640
well back in the pre-sun micro system

00:04:07,040 --> 00:04:13,040
acquisition days uh we had a version 6.0

00:04:10,640 --> 00:04:15,280
it never really came to fruition and the

00:04:13,040 --> 00:04:18,799
good stuff was back ported into the

00:04:15,280 --> 00:04:22,960
5 series like 5 1 through 5 5.

00:04:18,799 --> 00:04:25,460
now our ndv cluster which is a

00:04:22,960 --> 00:04:26,880
5 9 availability shared nothing

00:04:25,460 --> 00:04:29,520
[Music]

00:04:26,880 --> 00:04:30,479
database that can replicate between data

00:04:29,520 --> 00:04:32,960
centers and all that

00:04:30,479 --> 00:04:34,560
it's used by companies like verizon and

00:04:32,960 --> 00:04:37,440
other cell phone carriers to track you

00:04:34,560 --> 00:04:40,160
as you move between cell phone towers

00:04:37,440 --> 00:04:42,000
it is um highly available but it's

00:04:40,160 --> 00:04:44,560
mainly an in-memory database has

00:04:42,000 --> 00:04:46,560
a lot of interesting features and it had

00:04:44,560 --> 00:04:47,120
been using the seven series for a long

00:04:46,560 --> 00:04:49,120
time

00:04:47,120 --> 00:04:50,160
so our engineering folks sat down saying

00:04:49,120 --> 00:04:52,080
well we've made

00:04:50,160 --> 00:04:53,199
much changes in the basic core product

00:04:52,080 --> 00:04:54,960
that we really earned

00:04:53,199 --> 00:04:58,160
the 8-0 series and hopefully you'll

00:04:54,960 --> 00:05:00,560
agree with that as we go along here

00:04:58,160 --> 00:05:01,680
so there were a lot of big changes in

00:05:00,560 --> 00:05:03,360
8.0

00:05:01,680 --> 00:05:05,199
um the the ones that probably will

00:05:03,360 --> 00:05:07,600
interest most of the folks here

00:05:05,199 --> 00:05:08,880
resource groups uh dedicate certain

00:05:07,600 --> 00:05:11,520
cores of your

00:05:08,880 --> 00:05:13,680
processors uh two classes of queries so

00:05:11,520 --> 00:05:15,759
if you have a low priority batch

00:05:13,680 --> 00:05:17,440
update that you want to do you can

00:05:15,759 --> 00:05:18,800
dedicate certain cpus for that set a

00:05:17,440 --> 00:05:20,720
little priority

00:05:18,800 --> 00:05:22,160
we also have a much faster backup now if

00:05:20,720 --> 00:05:24,800
you've been using mysql dump

00:05:22,160 --> 00:05:26,639
it's great but it's not exactly blazing

00:05:24,800 --> 00:05:28,400
our new shell has a lot of utilities in

00:05:26,639 --> 00:05:30,000
there including an update checker so if

00:05:28,400 --> 00:05:32,800
you're running 5.7

00:05:30,000 --> 00:05:33,440
you can check for update and it'll tell

00:05:32,800 --> 00:05:35,360
you

00:05:33,440 --> 00:05:38,479
what you need to change if anything

00:05:35,360 --> 00:05:39,520
between your 57 and your 8-0 upgrade

00:05:38,479 --> 00:05:42,160
people are running the problems with

00:05:39,520 --> 00:05:44,400
reserved words and using the old temp

00:05:42,160 --> 00:05:46,639
table and stuff like that

00:05:44,400 --> 00:05:48,479
also the new shell we have a dump schema

00:05:46,639 --> 00:05:51,520
and dump instance

00:05:48,479 --> 00:05:54,000
utilities that are very very very fast

00:05:51,520 --> 00:05:55,360
also we compress a lot of stuff like

00:05:54,000 --> 00:05:56,319
you'll hear later about the replication

00:05:55,360 --> 00:05:58,560
logs

00:05:56,319 --> 00:05:59,759
they can get compressed on the primary

00:05:58,560 --> 00:06:01,440
and transferred

00:05:59,759 --> 00:06:04,319
in a compressed format and read in a

00:06:01,440 --> 00:06:05,919
compressed format on the replicas

00:06:04,319 --> 00:06:07,759
we've got a new temp table that is

00:06:05,919 --> 00:06:08,639
extremely fast uh in the past if you

00:06:07,759 --> 00:06:11,199
were working on something

00:06:08,639 --> 00:06:12,639
and that hit the temp table max size

00:06:11,199 --> 00:06:14,880
processing would stop everything we

00:06:12,639 --> 00:06:18,240
copied over to nodb and then restarted

00:06:14,880 --> 00:06:20,400
uh slow inefficient and uh

00:06:18,240 --> 00:06:22,720
not the best way to do things uh

00:06:20,400 --> 00:06:23,520
everything's optimized around utf-8 and

00:06:22,720 --> 00:06:25,280
b4

00:06:23,520 --> 00:06:28,400
why well we wanted all four of the

00:06:25,280 --> 00:06:32,160
unicode characteristic planes

00:06:28,400 --> 00:06:32,160
and everyone loves emojis

00:06:32,400 --> 00:06:39,520
also we've been on a ci cd model for

00:06:36,160 --> 00:06:41,199
since release of 8.0 so every three or

00:06:39,520 --> 00:06:45,280
so months you see a new release

00:06:41,199 --> 00:06:48,720
this is a history last july we had 802.1

00:06:45,280 --> 00:06:51,759
april was 2-0 uh january's

00:06:48,720 --> 00:06:55,120
was uh 19 october was 18

00:06:51,759 --> 00:06:56,560
and a year ago was 17. well why are we

00:06:55,120 --> 00:06:59,520
doing this well

00:06:56,560 --> 00:07:00,080
um it's a better model for us because it

00:06:59,520 --> 00:07:01,440
used to be

00:07:00,080 --> 00:07:04,080
we had to wait years to put a lot of new

00:07:01,440 --> 00:07:05,599
features out there and uh

00:07:04,080 --> 00:07:06,800
customers didn't like that we didn't

00:07:05,599 --> 00:07:08,000
like that because we had a lot of neat

00:07:06,800 --> 00:07:09,759
stuff that we were working on that we

00:07:08,000 --> 00:07:11,919
couldn't quite share with you

00:07:09,759 --> 00:07:13,440
so we decided to share all this with you

00:07:11,919 --> 00:07:15,199
most of these are with plugins which is

00:07:13,440 --> 00:07:17,120
a simple shared object

00:07:15,199 --> 00:07:18,880
that you load into the server if you

00:07:17,120 --> 00:07:22,720
don't like it you can unload it

00:07:18,880 --> 00:07:25,599
it has no impact on you also

00:07:22,720 --> 00:07:27,039
we have in since oracle took over 10

00:07:25,599 --> 00:07:29,599
years ago

00:07:27,039 --> 00:07:31,120
hadn't placed a lot of engineering rigor

00:07:29,599 --> 00:07:32,800
that really makes it a much better

00:07:31,120 --> 00:07:35,919
product so not only were giving a better

00:07:32,800 --> 00:07:38,160
product faster sooner and earlier to you

00:07:35,919 --> 00:07:40,000
very well tested all the components are

00:07:38,160 --> 00:07:42,639
tested together

00:07:40,000 --> 00:07:45,039
anything that's 8.0.21 has been tested

00:07:42,639 --> 00:07:46,800
with all the other 8.0.21 software so we

00:07:45,039 --> 00:07:50,080
know that it works

00:07:46,800 --> 00:07:50,080
we figure it's a better product

00:07:50,879 --> 00:07:56,160
so this is a replication update so

00:07:54,240 --> 00:07:57,599
i'm going to spend most of my time on

00:07:56,160 --> 00:08:01,520
nodb cluster

00:07:57,599 --> 00:08:01,520
replica sets and router

00:08:03,440 --> 00:08:08,479
so what is mysql replication i hope you

00:08:06,800 --> 00:08:12,080
can see my little

00:08:08,479 --> 00:08:16,639
red icon here you have a primary machine

00:08:12,080 --> 00:08:18,639
a source and you have a database on here

00:08:16,639 --> 00:08:20,960
which you have transactions that are

00:08:18,639 --> 00:08:23,280
going on that changes the database

00:08:20,960 --> 00:08:26,879
well what changes in those transactions

00:08:23,280 --> 00:08:30,160
is copied to a binary log

00:08:26,879 --> 00:08:30,960
a second machine or a replica goes to

00:08:30,160 --> 00:08:33,919
the source

00:08:30,960 --> 00:08:35,599
and grabs a copy of that binary log and

00:08:33,919 --> 00:08:36,959
pulls it over and is now called a relay

00:08:35,599 --> 00:08:40,640
log

00:08:36,959 --> 00:08:43,279
now this in turn is red

00:08:40,640 --> 00:08:44,720
and it updates its copy of the database

00:08:43,279 --> 00:08:45,519
so if you start off with these two

00:08:44,720 --> 00:08:48,320
databases

00:08:45,519 --> 00:08:49,680
on the far left and right the same make

00:08:48,320 --> 00:08:52,080
a change over here

00:08:49,680 --> 00:08:54,000
the change gets replicated over here

00:08:52,080 --> 00:08:55,760
applied to this set of data

00:08:54,000 --> 00:08:57,040
and you have two machines with the same

00:08:55,760 --> 00:08:58,640
information

00:08:57,040 --> 00:09:00,399
now you can have multiple replicas you

00:08:58,640 --> 00:09:03,120
can have replicas off replicas

00:09:00,399 --> 00:09:04,720
uh you can replicate only certain files

00:09:03,120 --> 00:09:07,040
or certain schemas

00:09:04,720 --> 00:09:08,240
it's highly configurable and this has

00:09:07,040 --> 00:09:11,760
been around for

00:09:08,240 --> 00:09:14,320
i think just about 20 some odd years

00:09:11,760 --> 00:09:17,920
it's kind of the original industry

00:09:14,320 --> 00:09:20,160
standard for open source replication

00:09:17,920 --> 00:09:23,040
now we also added semi-sync replication

00:09:20,160 --> 00:09:25,680
about five years ago the primary

00:09:23,040 --> 00:09:27,760
pauses until a preset number of the

00:09:25,680 --> 00:09:29,600
replicas of knowledge that has received

00:09:27,760 --> 00:09:30,959
the log entries they may not have

00:09:29,600 --> 00:09:34,720
applied them but they have at least

00:09:30,959 --> 00:09:37,680
received them this keeps

00:09:34,720 --> 00:09:40,560
gives you a little bit more control over

00:09:37,680 --> 00:09:40,560
what gets processed

00:09:40,880 --> 00:09:44,480
so what is replication used for well

00:09:43,519 --> 00:09:47,600
it's used for

00:09:44,480 --> 00:09:50,000
for backups uh it's a great way to keep

00:09:47,600 --> 00:09:52,480
your primary machine flying

00:09:50,000 --> 00:09:54,800
while you copy it off to another machine

00:09:52,480 --> 00:09:58,720
which you can halt to make a quiescent

00:09:54,800 --> 00:10:01,839
full backup you can also use that as a

00:09:58,720 --> 00:10:03,440
for read write splits for scale outs

00:10:01,839 --> 00:10:06,720
and we'll see how you can use it for

00:10:03,440 --> 00:10:06,720
failover in just a little bit

00:10:08,160 --> 00:10:12,240
now energy cluster is a little more

00:10:10,399 --> 00:10:14,959
complex than our simple

00:10:12,240 --> 00:10:15,839
asynchronous replication uh the

00:10:14,959 --> 00:10:18,800
components

00:10:15,839 --> 00:10:19,839
are on your machines you're running

00:10:18,800 --> 00:10:23,120
group replication

00:10:19,839 --> 00:10:25,360
which is built on paxos and it's a

00:10:23,120 --> 00:10:28,160
communications protocol where

00:10:25,360 --> 00:10:29,120
all the machines in the group know what

00:10:28,160 --> 00:10:30,800
it's doing

00:10:29,120 --> 00:10:32,720
with the other machines and it has a

00:10:30,800 --> 00:10:35,920
continual updated status

00:10:32,720 --> 00:10:37,200
of what's going on above that we have

00:10:35,920 --> 00:10:39,200
mysql router

00:10:37,200 --> 00:10:40,480
which is a level four proxy very

00:10:39,200 --> 00:10:42,079
lightweight

00:10:40,480 --> 00:10:44,079
load that on your application servers

00:10:42,079 --> 00:10:47,360
your application servers talk to

00:10:44,079 --> 00:10:50,800
router router talks to

00:10:47,360 --> 00:10:53,839
group replication and

00:10:50,800 --> 00:10:55,120
the router can do round-robining

00:10:53,839 --> 00:10:57,279
it knows which machines are released

00:10:55,120 --> 00:10:59,920
heavily loaded so it knows how to

00:10:57,279 --> 00:11:01,360
address where your queries go to and it

00:10:59,920 --> 00:11:02,480
handles all that your applications

00:11:01,360 --> 00:11:03,680
doesn't need

00:11:02,480 --> 00:11:05,040
don't really need any knowledge of

00:11:03,680 --> 00:11:06,240
what's passed the router in the

00:11:05,040 --> 00:11:08,560
application

00:11:06,240 --> 00:11:09,519
and all this is administered by mysql

00:11:08,560 --> 00:11:11,440
cell

00:11:09,519 --> 00:11:12,480
so this is how you set it up this is how

00:11:11,440 --> 00:11:15,839
you manage it this is how you

00:11:12,480 --> 00:11:15,839
orchestrate it

00:11:15,920 --> 00:11:21,200
now i tend to be very cautious long time

00:11:19,680 --> 00:11:23,120
dba i tell people

00:11:21,200 --> 00:11:25,839
go out and play with group replication

00:11:23,120 --> 00:11:29,920
or the sandbox machine before you try it

00:11:25,839 --> 00:11:32,800
in production sandboxes are nice

00:11:29,920 --> 00:11:33,760
you have one machine typically you grab

00:11:32,800 --> 00:11:37,440
an old tower or

00:11:33,760 --> 00:11:38,560
laptop install mysql latest version 8021

00:11:37,440 --> 00:11:40,399
in this case

00:11:38,560 --> 00:11:42,560
and i'll show you how you easily set up

00:11:40,399 --> 00:11:46,160
a sandbox test and play with

00:11:42,560 --> 00:11:46,640
this nodb cluster before you actually

00:11:46,160 --> 00:11:49,839
have to

00:11:46,640 --> 00:11:51,519
make it work in production first thing

00:11:49,839 --> 00:11:52,160
you do is you fire up the new mysql

00:11:51,519 --> 00:11:55,760
shell

00:11:52,160 --> 00:11:58,079
a new my scale shelf name is mysqlsh

00:11:55,760 --> 00:11:59,440
give it your account and host where

00:11:58,079 --> 00:12:02,399
you're going to on this machine

00:11:59,440 --> 00:12:04,480
this example i did it on a laptop that i

00:12:02,399 --> 00:12:09,200
use for testing

00:12:04,480 --> 00:12:09,200
after you log in it's going to

00:12:09,360 --> 00:12:13,279
give you a prompt if it's js it's

00:12:11,200 --> 00:12:16,160
speaking javascript to you

00:12:13,279 --> 00:12:16,800
if it's py it's speaking python and if

00:12:16,160 --> 00:12:19,440
it's

00:12:16,800 --> 00:12:20,160
sql speaking sql the new shell has three

00:12:19,440 --> 00:12:22,480
modes

00:12:20,160 --> 00:12:23,920
so if you have libraries with in python

00:12:22,480 --> 00:12:24,800
or javascript you like to use with your

00:12:23,920 --> 00:12:27,760
data

00:12:24,800 --> 00:12:28,480
you don't have access to those so we've

00:12:27,760 --> 00:12:31,600
logged in

00:12:28,480 --> 00:12:34,320
and here we're talking javascript we use

00:12:31,600 --> 00:12:36,399
the dba library and we have we deploy a

00:12:34,320 --> 00:12:39,760
sandbox instance

00:12:36,399 --> 00:12:42,880
on port 3310

00:12:39,760 --> 00:12:44,720
and if you read through the uh

00:12:42,880 --> 00:12:46,959
the uh descriptions down here of what's

00:12:44,720 --> 00:12:48,240
going on it's gonna warn you sandboxes

00:12:46,959 --> 00:12:49,600
instances are only suitable for

00:12:48,240 --> 00:12:51,760
deploying or running your local machine

00:12:49,600 --> 00:12:55,120
for testing purposes

00:12:51,760 --> 00:12:57,040
it doesn't set up the networking rules

00:12:55,120 --> 00:12:58,320
for to be working from other machines

00:12:57,040 --> 00:12:59,600
you can't do that it's a little bit of

00:12:58,320 --> 00:13:02,240
pain

00:12:59,600 --> 00:13:03,440
set up a mysql root password for this

00:13:02,240 --> 00:13:04,639
new instance

00:13:03,440 --> 00:13:06,399
we're going to use three machines today

00:13:04,639 --> 00:13:08,560
so i recommend using the same password

00:13:06,399 --> 00:13:12,160
on all three machines

00:13:08,560 --> 00:13:14,399
and it sets up a new mysql instance

00:13:12,160 --> 00:13:17,839
and it tells you that it's been

00:13:14,399 --> 00:13:17,839
successfully deployed and started

00:13:19,120 --> 00:13:22,320
now we're going to start a second

00:13:20,399 --> 00:13:23,920
instance uh this one is i'm going to be

00:13:22,320 --> 00:13:25,360
on three three two zero

00:13:23,920 --> 00:13:27,600
the first one was on three three one

00:13:25,360 --> 00:13:29,519
zero

00:13:27,600 --> 00:13:30,639
by the way if you uh look down into your

00:13:29,519 --> 00:13:32,240
home directory

00:13:30,639 --> 00:13:34,320
you'll see there's a new directory

00:13:32,240 --> 00:13:35,519
called mysql dash sandboxes

00:13:34,320 --> 00:13:37,600
and you'll have one for each of the

00:13:35,519 --> 00:13:40,079
machines

00:13:37,600 --> 00:13:41,519
so after we got the second machine up we

00:13:40,079 --> 00:13:43,279
do the same thing for the third machine

00:13:41,519 --> 00:13:47,440
deploy sandbox instance

00:13:43,279 --> 00:13:51,440
at 3330 so now we have three machines

00:13:47,440 --> 00:13:51,440
all running mysql

00:13:51,839 --> 00:13:57,680
energy cluster now to get the cluster

00:13:55,360 --> 00:13:58,720
actually connected and started we have

00:13:57,680 --> 00:14:01,120
to connect

00:13:58,720 --> 00:14:02,720
so we're going to connect to root at the

00:14:01,120 --> 00:14:04,639
first machine we could have picked

00:14:02,720 --> 00:14:06,959
three three two zero or three three

00:14:04,639 --> 00:14:10,000
three zero it doesn't really matter

00:14:06,959 --> 00:14:13,360
put in the password we want and

00:14:10,000 --> 00:14:16,160
uh it's going to tell you that uh

00:14:13,360 --> 00:14:17,279
you've connected to the first machine

00:14:16,160 --> 00:14:20,480
and we're actually going to go out and

00:14:17,279 --> 00:14:23,519
create the actual cluster

00:14:20,480 --> 00:14:25,760
so in javascript we have var cluster

00:14:23,519 --> 00:14:27,519
equals dba.createcluster

00:14:25,760 --> 00:14:28,959
and this one we're calling cpanel this

00:14:27,519 --> 00:14:31,360
originally came from a demo i did for

00:14:28,959 --> 00:14:34,959
the good folks at cpanel

00:14:31,360 --> 00:14:36,959
so it starts up and it starts detecting

00:14:34,959 --> 00:14:39,199
that it is a sandbox which

00:14:36,959 --> 00:14:40,880
uh this is the same command you use for

00:14:39,199 --> 00:14:45,839
a non-sandbox version

00:14:40,880 --> 00:14:45,839
uh it reports its own instance at 127.0

00:14:46,399 --> 00:14:49,519
and it's saying the configuration is

00:14:48,320 --> 00:14:52,240
suitable

00:14:49,519 --> 00:14:52,639
when you're doing this in real life if

00:14:52,240 --> 00:14:54,560
the

00:14:52,639 --> 00:14:56,880
cluster hardware that you're trying to

00:14:54,560 --> 00:14:58,720
use is not suitable or you have settings

00:14:56,880 --> 00:15:00,240
that aren't right it will ask you if you

00:14:58,720 --> 00:15:02,320
want to change them then change them and

00:15:00,240 --> 00:15:05,199
reboot them for you

00:15:02,320 --> 00:15:06,560
so in this case the configuration is

00:15:05,199 --> 00:15:07,760
suitable one of the benefits of using

00:15:06,560 --> 00:15:10,480
the sandbox

00:15:07,760 --> 00:15:11,680
uh creates an enob cluster called cpanel

00:15:10,480 --> 00:15:14,800
at

00:15:11,680 --> 00:15:18,320
3310 and it

00:15:14,800 --> 00:15:19,760
takes the first instance of the seed and

00:15:18,320 --> 00:15:21,680
it warns you that at least three

00:15:19,760 --> 00:15:23,519
instances are needed for the cluster to

00:15:21,680 --> 00:15:25,600
be able to withstand up to one server

00:15:23,519 --> 00:15:28,639
failure

00:15:25,600 --> 00:15:31,560
okay add the second machine

00:15:28,639 --> 00:15:34,079
cluster.add instance root at localhost

00:15:31,560 --> 00:15:35,839
00:15:34,079 --> 00:15:38,079
it's going to say hey this machine has

00:15:35,839 --> 00:15:39,759
not been pre-provisioned

00:15:38,079 --> 00:15:41,519
we have three brand new machines so

00:15:39,759 --> 00:15:43,040
there's really nothing out there

00:15:41,519 --> 00:15:45,279
and it's going to warn me that the

00:15:43,040 --> 00:15:46,079
global transaction identifier set is

00:15:45,279 --> 00:15:48,560
empty

00:15:46,079 --> 00:15:50,720
every transaction has a unique

00:15:48,560 --> 00:15:53,839
identifier id

00:15:50,720 --> 00:15:56,079
and in this case the shell is warning us

00:15:53,839 --> 00:15:58,399
that we're not quite sure the state

00:15:56,079 --> 00:16:00,240
um of what's going on here you know you

00:15:58,399 --> 00:16:02,959
haven't had any transactions

00:16:00,240 --> 00:16:04,399
so we're kind of uh wondering and

00:16:02,959 --> 00:16:08,079
there's nothing in the old

00:16:04,399 --> 00:16:08,399
transaction log so kind of warns you

00:16:08,079 --> 00:16:09,519
that

00:16:08,399 --> 00:16:10,959
you know there's something funny going

00:16:09,519 --> 00:16:12,320
on here but in this case you don't have

00:16:10,959 --> 00:16:15,839
to worry about it

00:16:12,320 --> 00:16:16,560
now the next page you'll see it's going

00:16:15,839 --> 00:16:19,680
to ask you

00:16:16,560 --> 00:16:20,320
to select a recovery method uh in this

00:16:19,680 --> 00:16:23,519
case

00:16:20,320 --> 00:16:25,440
um we're going to pick c for clone

00:16:23,519 --> 00:16:29,199
clone you'll see in detail a little bit

00:16:25,440 --> 00:16:31,600
incremental it tends to go over to the

00:16:29,199 --> 00:16:34,240
the host machine the donor machine and

00:16:31,600 --> 00:16:36,079
grab over those transaction ids

00:16:34,240 --> 00:16:37,839
in small groups and apply them to its

00:16:36,079 --> 00:16:39,759
copy of the data

00:16:37,839 --> 00:16:41,360
so this second machine really has no

00:16:39,759 --> 00:16:42,399
idea at this point what's on the primary

00:16:41,360 --> 00:16:45,199
machine

00:16:42,399 --> 00:16:46,000
so it can either get spoon fed or it can

00:16:45,199 --> 00:16:50,240
get a whole bunch

00:16:46,000 --> 00:16:51,360
any one time now notice this here

00:16:50,240 --> 00:16:53,480
group replication is going to

00:16:51,360 --> 00:16:55,040
communicate with other members at port

00:16:53,480 --> 00:16:56,959
00:16:55,040 --> 00:16:58,160
uh so if you really are firewall happy

00:16:56,959 --> 00:16:59,440
yet please

00:16:58,160 --> 00:17:01,920
watch out for that but if you're just

00:16:59,440 --> 00:17:04,880
running this on a sandbox laptop

00:17:01,920 --> 00:17:05,760
or a tower don't worry about it so it's

00:17:04,880 --> 00:17:08,400
going to

00:17:05,760 --> 00:17:09,439
look at machine the second machine 3320

00:17:08,400 --> 00:17:11,039
make sure the

00:17:09,439 --> 00:17:12,880
configuration is correct for that

00:17:11,039 --> 00:17:17,120
instance

00:17:12,880 --> 00:17:19,120
and starts the instance at 3320

00:17:17,120 --> 00:17:20,480
and it tells you that the new assist

00:17:19,120 --> 00:17:21,679
will be added to the cluster

00:17:20,480 --> 00:17:23,199
depending on the amount of data this

00:17:21,679 --> 00:17:25,679
cluster might take a few seconds or

00:17:23,199 --> 00:17:28,720
several hours to get everything going

00:17:25,679 --> 00:17:30,799
so as this machine comes up it goes out

00:17:28,720 --> 00:17:33,840
to the primary

00:17:30,799 --> 00:17:36,559
and it does a big

00:17:33,840 --> 00:17:37,919
fast innodb tablespace copy from the

00:17:36,559 --> 00:17:39,280
donor machine

00:17:37,919 --> 00:17:40,559
since there's only one other machine on

00:17:39,280 --> 00:17:41,919
the cluster right now that's going to be

00:17:40,559 --> 00:17:44,840
our primary

00:17:41,919 --> 00:17:46,000
and goes out there and grabs the the

00:17:44,840 --> 00:17:48,720
files

00:17:46,000 --> 00:17:50,480
the pages and the redo copy talk a

00:17:48,720 --> 00:17:53,840
little bit more about that later

00:17:50,480 --> 00:17:58,320
and very quickly you have an exact

00:17:53,840 --> 00:18:00,960
clone of the primary machine

00:17:58,320 --> 00:18:01,520
now this is written to be a fast way to

00:18:00,960 --> 00:18:03,520
get

00:18:01,520 --> 00:18:05,360
new machines up now those of you who

00:18:03,520 --> 00:18:07,280
have been working in the cloud know that

00:18:05,360 --> 00:18:09,039
one of the big problems with databases

00:18:07,280 --> 00:18:10,480
is they're not designed to be ephemeral

00:18:09,039 --> 00:18:12,720
you kind of want your

00:18:10,480 --> 00:18:15,120
your permit data to be permanent uh

00:18:12,720 --> 00:18:18,160
bringing on a

00:18:15,120 --> 00:18:19,840
temporary copy can be very expensive

00:18:18,160 --> 00:18:23,360
if you're using mysql dump or something

00:18:19,840 --> 00:18:26,559
similar to bringing everything over it's

00:18:23,360 --> 00:18:29,679
slow and rather labor intensive

00:18:26,559 --> 00:18:30,240
with the clone plugin uh it allows you

00:18:29,679 --> 00:18:32,480
to

00:18:30,240 --> 00:18:34,320
take everything from a donor and put it

00:18:32,480 --> 00:18:36,720
on recipient as fast as you can get it

00:18:34,320 --> 00:18:36,720
over there

00:18:37,039 --> 00:18:41,840
so we're still in the process of adding

00:18:39,600 --> 00:18:44,160
the second node to the cluster

00:18:41,840 --> 00:18:46,880
the second cluster gets all the new data

00:18:44,160 --> 00:18:49,120
it restarts the second machine

00:18:46,880 --> 00:18:50,880
and it gives you some information on how

00:18:49,120 --> 00:18:54,720
much data was transferred

00:18:50,880 --> 00:18:58,320
and now we have two machines

00:18:54,720 --> 00:19:00,080
in our in our cluster

00:18:58,320 --> 00:19:01,200
so of course we add the third machine

00:19:00,080 --> 00:19:03,039
it's going to ask you whether you want

00:19:01,200 --> 00:19:06,240
to clone and do the normal backup

00:19:03,039 --> 00:19:08,960
hopefully you're using clone

00:19:06,240 --> 00:19:10,000
and if we type in cluster.status you're

00:19:08,960 --> 00:19:11,840
you're gonna see our cluster

00:19:10,000 --> 00:19:13,280
name and it's gonna tell us that we have

00:19:11,840 --> 00:19:15,280
three machines

00:19:13,280 --> 00:19:17,200
uh notice the status here clusters

00:19:15,280 --> 00:19:18,080
online and can tolerate up to one

00:19:17,200 --> 00:19:19,760
failure

00:19:18,080 --> 00:19:22,080
uh if we do have a failure for some

00:19:19,760 --> 00:19:24,000
reason or you take a machine offline

00:19:22,080 --> 00:19:25,200
uh these three machines or the two

00:19:24,000 --> 00:19:28,640
little machines left over

00:19:25,200 --> 00:19:30,160
will communicate and promote one to the

00:19:28,640 --> 00:19:32,799
primary

00:19:30,160 --> 00:19:33,679
and uh will warn you that it's no longer

00:19:32,799 --> 00:19:35,440
going to tolerate

00:19:33,679 --> 00:19:37,200
one failure so it's no longer highly

00:19:35,440 --> 00:19:40,679
available

00:19:37,200 --> 00:19:43,760
first machine 3310 is in read write mode

00:19:40,679 --> 00:19:46,400
3320 and 3330

00:19:43,760 --> 00:19:48,160
are in read only mode and our topology

00:19:46,400 --> 00:19:52,480
mode is single primary

00:19:48,160 --> 00:19:53,120
so when your query goes through mysql

00:19:52,480 --> 00:19:56,480
router

00:19:53,120 --> 00:19:58,960
to this cluster if it's going to be a

00:19:56,480 --> 00:20:00,000
write it's going to go to this machine

00:19:58,960 --> 00:20:02,000
if it's a read

00:20:00,000 --> 00:20:04,400
it's going to go to any of these three

00:20:02,000 --> 00:20:06,000
machines and it will round robin and it

00:20:04,400 --> 00:20:09,440
knows which ones are are

00:20:06,000 --> 00:20:09,760
busiest and will route your packets to

00:20:09,440 --> 00:20:14,400
the

00:20:09,760 --> 00:20:14,400
slower unload latent machines

00:20:14,880 --> 00:20:18,000
so let's start up moscow router router

00:20:17,280 --> 00:20:21,200
is a very

00:20:18,000 --> 00:20:22,640
simple level four proxy

00:20:21,200 --> 00:20:25,760
if you need something more advanced i

00:20:22,640 --> 00:20:25,760
recommend uh

00:20:26,480 --> 00:20:31,679
proxy sql it's a level level seven

00:20:30,480 --> 00:20:34,720
it's a little more complex to get

00:20:31,679 --> 00:20:35,120
running a little more hardware needed to

00:20:34,720 --> 00:20:37,360
get

00:20:35,120 --> 00:20:39,039
going but router's designed to be very

00:20:37,360 --> 00:20:41,280
quick and very simple to set up

00:20:39,039 --> 00:20:42,960
uh moscow router minus bootstrap for the

00:20:41,280 --> 00:20:45,919
first time which machine

00:20:42,960 --> 00:20:46,799
is your your primary and you need a

00:20:45,919 --> 00:20:47,840
directory to write out some

00:20:46,799 --> 00:20:52,000
configuration

00:20:47,840 --> 00:20:53,200
information now the next time you uh

00:20:52,000 --> 00:20:54,799
bring up router

00:20:53,200 --> 00:20:57,039
all i have to do is point it to the

00:20:54,799 --> 00:20:59,840
configuration information

00:20:57,039 --> 00:20:59,840
and away it goes

00:21:01,600 --> 00:21:07,039
now once you have router started uh

00:21:04,640 --> 00:21:08,240
it's going to uh need a little bit of

00:21:07,039 --> 00:21:11,679
adjustment already

00:21:08,240 --> 00:21:13,679
traditionally mysql listens on port 3306

00:21:11,679 --> 00:21:15,520
since you're using the proxy in front

00:21:13,679 --> 00:21:16,000
your application's going to want to talk

00:21:15,520 --> 00:21:19,360
to

00:21:16,000 --> 00:21:21,200
a set of addresses if you're using our

00:21:19,360 --> 00:21:24,840
classic protocol

00:21:21,200 --> 00:21:28,480
uh it's going to uh do localhost

00:21:24,840 --> 00:21:30,799
6446 for read writes reads to six

00:21:28,480 --> 00:21:31,679
six i mean six four four seven for read

00:21:30,799 --> 00:21:34,559
only

00:21:31,679 --> 00:21:36,480
now if you're using our no sql protocol

00:21:34,559 --> 00:21:38,000
uh the x protocol

00:21:36,480 --> 00:21:40,799
you're gonna see that you're gonna talk

00:21:38,000 --> 00:21:41,440
to uh those port numbers with a ten ad

00:21:40,799 --> 00:21:44,559
so

00:21:41,440 --> 00:21:48,000
six four four six zero and six

00:21:44,559 --> 00:21:48,000
four four seven zero

00:21:52,000 --> 00:21:55,200
now the architecture as i mentioned

00:21:54,240 --> 00:21:59,120
earlier

00:21:55,200 --> 00:22:03,360
is your application and mysql router

00:21:59,120 --> 00:22:04,960
are all on the same uh platform

00:22:03,360 --> 00:22:06,559
your application doesn't need to know

00:22:04,960 --> 00:22:08,880
any of the stuff down here just needs to

00:22:06,559 --> 00:22:10,159
know how to talk to router router in

00:22:08,880 --> 00:22:12,400
turn monitors

00:22:10,159 --> 00:22:13,919
all this so it knows how the group

00:22:12,400 --> 00:22:15,520
replication is running

00:22:13,919 --> 00:22:17,440
which machines are loaded which ones are

00:22:15,520 --> 00:22:21,440
unladen and it's all

00:22:17,440 --> 00:22:21,440
administered by mysql shell

00:22:22,559 --> 00:22:27,520
what if you want multi primary what if

00:22:24,320 --> 00:22:30,880
you want multiple uh primary machines

00:22:27,520 --> 00:22:33,600
uh very easy to do uh cluster dot switch

00:22:30,880 --> 00:22:36,960
to multi-primary mode there's also a

00:22:33,600 --> 00:22:39,520
uh switch to single primary mode if you

00:22:36,960 --> 00:22:40,080
want to do the read write split as you

00:22:39,520 --> 00:22:42,880
see

00:22:40,080 --> 00:22:45,200
um pretty quickly it switches the

00:22:42,880 --> 00:22:47,280
machines that were secondary to primary

00:22:45,200 --> 00:22:48,880
uh our primary stage primary and the

00:22:47,280 --> 00:22:52,559
other secondary screen

00:22:48,880 --> 00:22:53,520
becomes primary we checked the cluster

00:22:52,559 --> 00:22:56,000
status

00:22:53,520 --> 00:22:57,120
you'll see that our machine at 3310 is

00:22:56,000 --> 00:23:01,039
read write

00:22:57,120 --> 00:23:05,679
3330 is rewrite 33203 right

00:23:01,039 --> 00:23:05,679
and the topology mode is multi-primary

00:23:06,880 --> 00:23:10,480
mysql router uh detects if there is a

00:23:09,520 --> 00:23:12,640
failover

00:23:10,480 --> 00:23:14,480
a big change here is that when you do

00:23:12,640 --> 00:23:16,159
your rights check the return code

00:23:14,480 --> 00:23:19,760
if something has failed you'll get an

00:23:16,159 --> 00:23:19,760
error and you'll have to retry that

00:23:20,840 --> 00:23:25,200
right

00:23:22,480 --> 00:23:26,640
uh if you're doing this in production uh

00:23:25,200 --> 00:23:29,679
the the big difference here

00:23:26,640 --> 00:23:31,840
is that um you're gonna have to use dba

00:23:29,679 --> 00:23:32,559
to configure local instance to make sure

00:23:31,840 --> 00:23:35,840
that

00:23:32,559 --> 00:23:37,600
not only the hardware but these mysql

00:23:35,840 --> 00:23:40,320
settings are correct for

00:23:37,600 --> 00:23:41,919
running group replication and then it's

00:23:40,320 --> 00:23:44,400
very much the same as you saw earlier

00:23:41,919 --> 00:23:45,279
uh create the the cluster with create

00:23:44,400 --> 00:23:50,240
cluster

00:23:45,279 --> 00:23:53,279
and the instances in startup broader

00:23:50,240 --> 00:23:56,720
now a replica set is

00:23:53,279 --> 00:24:00,480
designed to make semi-synchronous

00:23:56,720 --> 00:24:01,919
and asynchronous replication easier

00:24:00,480 --> 00:24:03,520
in the early days of setting up

00:24:01,919 --> 00:24:04,000
replication what you do is you have your

00:24:03,520 --> 00:24:07,679
primary

00:24:04,000 --> 00:24:11,039
machine and you build the secondary

00:24:07,679 --> 00:24:14,159
you do a backup of the

00:24:11,039 --> 00:24:15,840
of the primary copy that over to the

00:24:14,159 --> 00:24:17,520
secondary

00:24:15,840 --> 00:24:20,159
get that version that's instance of

00:24:17,520 --> 00:24:22,559
mysql running find out where the

00:24:20,159 --> 00:24:23,600
log was set up the log pointer is on the

00:24:22,559 --> 00:24:25,760
primary

00:24:23,600 --> 00:24:27,440
and tell the replica to start

00:24:25,760 --> 00:24:30,559
replicating from that

00:24:27,440 --> 00:24:31,760
binary position in the log file and copy

00:24:30,559 --> 00:24:33,520
things over

00:24:31,760 --> 00:24:35,279
global transaction identifiers made that

00:24:33,520 --> 00:24:35,760
a little easier since everything had its

00:24:35,279 --> 00:24:38,320
own

00:24:35,760 --> 00:24:40,240
identifier number uh so the replica

00:24:38,320 --> 00:24:40,880
would be told okay go up to this primary

00:24:40,240 --> 00:24:43,440
machine

00:24:40,880 --> 00:24:45,279
and copy everything down from this

00:24:43,440 --> 00:24:46,400
identifier number identifier number can

00:24:45,279 --> 00:24:50,640
be the first one

00:24:46,400 --> 00:24:53,919
until you catch up a replica set

00:24:50,640 --> 00:24:56,559
automates a lot of the setup for that

00:24:53,919 --> 00:24:58,240
so you don't have to do a lot of the

00:24:56,559 --> 00:25:00,080
labor intensive stuff which makes this a

00:24:58,240 --> 00:25:03,840
lot easier for

00:25:00,080 --> 00:25:04,799
automation now replica set has several

00:25:03,840 --> 00:25:06,799
limitations

00:25:04,799 --> 00:25:08,720
and when in doubt please use nodb

00:25:06,799 --> 00:25:11,200
cluster

00:25:08,720 --> 00:25:11,760
that's what we highly recommend and

00:25:11,200 --> 00:25:14,640
there's no

00:25:11,760 --> 00:25:16,159
automatic failover so if you are looking

00:25:14,640 --> 00:25:17,120
for that you want a highly available

00:25:16,159 --> 00:25:22,960
system

00:25:17,120 --> 00:25:22,960
uh go to the energy cluster also there's

00:25:23,919 --> 00:25:26,960
no protection from data loss the other

00:25:26,159 --> 00:25:30,400
machine

00:25:26,960 --> 00:25:32,159
in your in your set uh it doesn't have

00:25:30,400 --> 00:25:32,720
the smarts to figure out how to recover

00:25:32,159 --> 00:25:35,200
from

00:25:32,720 --> 00:25:35,760
the first machine or the other machine

00:25:35,200 --> 00:25:38,480
going

00:25:35,760 --> 00:25:39,600
down also there's no way to handle a

00:25:38,480 --> 00:25:41,279
split brain

00:25:39,600 --> 00:25:43,440
you know nob cluster you have a split

00:25:41,279 --> 00:25:43,679
lane situation and the machines realize

00:25:43,440 --> 00:25:46,720
it

00:25:43,679 --> 00:25:49,440
almost instantaneous first thing they do

00:25:46,720 --> 00:25:51,200
is they go into a super read-owning mode

00:25:49,440 --> 00:25:51,840
so you still read the data you cannot do

00:25:51,200 --> 00:25:56,320
updates

00:25:51,840 --> 00:25:58,400
until someone repairs the system

00:25:56,320 --> 00:26:01,440
configuring replace cassette very simple

00:25:58,400 --> 00:26:04,559
uh dba not configure replica set

00:26:01,440 --> 00:26:07,679
uh create the replica set

00:26:04,559 --> 00:26:08,559
and then add the second machine now the

00:26:07,679 --> 00:26:10,480
benefit here

00:26:08,559 --> 00:26:11,840
is that you do get the benefit of the

00:26:10,480 --> 00:26:13,760
clone you don't have to go out there and

00:26:11,840 --> 00:26:16,720
make the backup copy things over

00:26:13,760 --> 00:26:20,640
and tell it to start reading from from a

00:26:16,720 --> 00:26:20,640
certain position or a certain gtid

00:26:21,440 --> 00:26:28,640
now if you have an existing replication

00:26:25,279 --> 00:26:32,159
setup out there you can do that

00:26:28,640 --> 00:26:35,679
you can adopt that one with an option on

00:26:32,159 --> 00:26:35,679
the create replica set command

00:26:35,840 --> 00:26:39,679
now something we've added with the

00:26:38,159 --> 00:26:40,960
latest release is you can turn off the

00:26:39,679 --> 00:26:44,240
redo log

00:26:40,960 --> 00:26:48,400
when you're setting up a replica

00:26:44,240 --> 00:26:50,880
one of the big problems is it wants to

00:26:48,400 --> 00:26:53,600
set up a redo log in case something gets

00:26:50,880 --> 00:26:55,600
rolled back in a transaction

00:26:53,600 --> 00:26:57,120
but if you're basically cloning another

00:26:55,600 --> 00:27:00,400
machine or

00:26:57,120 --> 00:27:01,679
or restoring an old machine you already

00:27:00,400 --> 00:27:02,880
have a copy of that out there you don't

00:27:01,679 --> 00:27:05,039
really need it so

00:27:02,880 --> 00:27:06,000
this is a lot of overhead so if you turn

00:27:05,039 --> 00:27:09,279
off the redo

00:27:06,000 --> 00:27:10,799
log while you're while you're restoring

00:27:09,279 --> 00:27:13,840
this machine

00:27:10,799 --> 00:27:15,120
it speeds things up dramatically

00:27:13,840 --> 00:27:18,559
this is something that we've had a

00:27:15,120 --> 00:27:18,559
request for for a long time

00:27:19,200 --> 00:27:24,000
also as i mentioned earlier uh the

00:27:20,799 --> 00:27:26,480
binary logs the ones where the

00:27:24,000 --> 00:27:28,080
changes are made to the data are written

00:27:26,480 --> 00:27:31,520
in a

00:27:28,080 --> 00:27:32,880
compressed fashion using zstd and that

00:27:31,520 --> 00:27:36,480
is copied over to

00:27:32,880 --> 00:27:38,080
the replica or replicas still compressed

00:27:36,480 --> 00:27:40,159
and the replicas read that while they're

00:27:38,080 --> 00:27:41,440
still compressed and do that which saves

00:27:40,159 --> 00:27:44,960
a little bit of disk space

00:27:41,440 --> 00:27:44,960
and a lot of network bandwidth

00:27:45,279 --> 00:27:48,640
by the way if you're really interested

00:27:46,880 --> 00:27:50,080
in mysql eight a

00:27:48,640 --> 00:27:52,480
former colleague of mine jesper

00:27:50,080 --> 00:27:53,760
whispered crow wrote the best book out

00:27:52,480 --> 00:27:56,720
there on the subject

00:27:53,760 --> 00:27:58,320
if you have something like the old high

00:27:56,720 --> 00:28:01,360
performance mysql

00:27:58,320 --> 00:28:02,799
uh books they're kind of along the tooth

00:28:01,360 --> 00:28:06,080
this one's written exact

00:28:02,799 --> 00:28:07,360
specifically from moscow 8.0 uh you need

00:28:06,080 --> 00:28:10,320
a copy of this book it is

00:28:07,360 --> 00:28:12,159
great uh also if you're looking for

00:28:10,320 --> 00:28:14,840
mysql on the internet you can get us

00:28:12,159 --> 00:28:16,159
on the our community slack

00:28:14,840 --> 00:28:18,000
mysqlcommunity.slack.com

00:28:16,159 --> 00:28:19,760
we still have our forums out there which

00:28:18,000 --> 00:28:20,960
is a good place to catch the eyeballs of

00:28:19,760 --> 00:28:23,919
our engineers a lot of them

00:28:20,960 --> 00:28:24,720
are on the slack we still have mysql.com

00:28:23,919 --> 00:28:27,120
and our blog

00:28:24,720 --> 00:28:28,000
aggregation at planet.lastic.com and you

00:28:27,120 --> 00:28:31,919
can follow us

00:28:28,000 --> 00:28:34,080
on twitter at mysql now

00:28:31,919 --> 00:28:36,200
if you need to get hot contact with me

00:28:34,080 --> 00:28:39,200
i'm at stoker on twitter

00:28:36,200 --> 00:28:41,760
emailsdavid.stokes oracle.com

00:28:39,200 --> 00:28:43,440
my blog is elephantdolphin.blogger.com

00:28:41,760 --> 00:28:46,000
and the slides for this and my other

00:28:43,440 --> 00:28:48,480
presentations will be at slideshare.net

00:28:46,000 --> 00:28:50,240
david m stokes and if you're using our

00:28:48,480 --> 00:28:51,600
json data type

00:28:50,240 --> 00:28:53,520
and you're really interested in some

00:28:51,600 --> 00:28:56,399
good examples i wrote a book called

00:28:53,520 --> 00:28:58,720
mysql json a practical programming guide

00:28:56,399 --> 00:29:00,159
it's uh the first edition i am working

00:28:58,720 --> 00:29:01,360
on a second edition hopefully i can get

00:29:00,159 --> 00:29:03,520
that out there soon

00:29:01,360 --> 00:29:06,320
and let's see if we can roll into q and

00:29:03,520 --> 00:29:08,720
a uh if you don't have any questions

00:29:06,320 --> 00:29:10,240
um or want to contact me otherwise uh

00:29:08,720 --> 00:29:13,919
thank you for your time

00:29:10,240 --> 00:29:18,159
and let's roll it thank you very much

00:29:13,919 --> 00:29:20,799
dave so now let's go to the

00:29:18,159 --> 00:29:21,600
questions and answers so the first

00:29:20,799 --> 00:29:25,360
question

00:29:21,600 --> 00:29:26,159
we have is last i heard my skewer was

00:29:25,360 --> 00:29:29,440
dropped

00:29:26,159 --> 00:29:31,360
from deviant during reservation from

00:29:29,440 --> 00:29:32,880
the security team about the mysql

00:29:31,360 --> 00:29:36,159
security patches

00:29:32,880 --> 00:29:37,279
only being provided in cumulon is that

00:29:36,159 --> 00:29:39,919
true

00:29:37,279 --> 00:29:41,120
still the case and oracle may be

00:29:39,919 --> 00:29:55,840
considering changing

00:29:41,120 --> 00:29:55,840
this in the future

00:30:31,440 --> 00:30:50,480
okay um just a small one here

00:30:35,039 --> 00:30:53,760
dave could you please unmute yourself

00:30:50,480 --> 00:30:53,760
there we go now can you hear me

00:30:56,559 --> 00:31:00,159
yes we can okay okay let me re-answer

00:30:59,600 --> 00:31:02,000
that

00:31:00,159 --> 00:31:04,000
uh part of the trouble is we were

00:31:02,000 --> 00:31:07,039
requested by the deviant security

00:31:04,000 --> 00:31:09,039
team to handle all our test case data

00:31:07,039 --> 00:31:10,080
we cannot do that some of our test case

00:31:09,039 --> 00:31:13,600
data is

00:31:10,080 --> 00:31:15,519
customer confidential and by contractual

00:31:13,600 --> 00:31:17,279
obligation in some cases as long as we

00:31:15,519 --> 00:31:20,960
cannot do that

00:31:17,279 --> 00:31:21,840
so if you uh water mysql8 we do have a

00:31:20,960 --> 00:31:24,640
db and rep

00:31:21,840 --> 00:31:26,240
repo out there and you download all the

00:31:24,640 --> 00:31:29,200
files and get it going

00:31:26,240 --> 00:31:33,840
uh unfortunately uh we cannot match what

00:31:29,200 --> 00:31:33,840
the security team wants

00:31:37,120 --> 00:31:44,720
okay let's go to the next um

00:31:41,279 --> 00:31:48,080
will be the slide available afterwards

00:31:44,720 --> 00:31:50,480
uh yes they are um i i

00:31:48,080 --> 00:31:52,159
uploaded that along the video uh if that

00:31:50,480 --> 00:31:53,200
doesn't work follow me on twitter at

00:31:52,159 --> 00:31:55,519
stoker i'll

00:31:53,200 --> 00:31:57,360
make sure i get them up there on my

00:31:55,519 --> 00:31:57,840
slideshare right away and i'll make sure

00:31:57,360 --> 00:32:02,720
that

00:31:57,840 --> 00:32:02,720
gets out there so that's at st ker

00:32:06,880 --> 00:32:12,880
next one is the mysql router

00:32:10,559 --> 00:32:13,679
execute in a different machine or is a

00:32:12,880 --> 00:32:16,799
process

00:32:13,679 --> 00:32:18,799
in one of the cluster nodes i recommend

00:32:16,799 --> 00:32:20,640
putting out your application nodes

00:32:18,799 --> 00:32:22,240
uh your application doesn't have to know

00:32:20,640 --> 00:32:23,519
anything other than how to talk router

00:32:22,240 --> 00:32:25,120
it shouldn't really know much about the

00:32:23,519 --> 00:32:27,919
data store past that

00:32:25,120 --> 00:32:29,760
so it's much easier to run it right

00:32:27,919 --> 00:32:31,440
alongside your application

00:32:29,760 --> 00:32:33,039
now if you need something more complex

00:32:31,440 --> 00:32:34,159
as a router runners on a level four

00:32:33,039 --> 00:32:35,039
router if you something like a level

00:32:34,159 --> 00:32:37,519
server router

00:32:35,039 --> 00:32:38,240
level four you need one level four

00:32:37,519 --> 00:32:41,360
router

00:32:38,240 --> 00:32:43,279
i recommend proxy sql and

00:32:41,360 --> 00:32:44,799
that runs at level seven and i do

00:32:43,279 --> 00:32:45,679
believe you need a dedicated machine or

00:32:44,799 --> 00:32:48,399
that for that

00:32:45,679 --> 00:32:48,399
or two of that

00:32:53,519 --> 00:32:58,720
right and finally please you name the

00:32:57,039 --> 00:33:02,240
book recommend at the end

00:32:58,720 --> 00:33:03,840
black one oh the black one um

00:33:02,240 --> 00:33:11,840
hold on one second let me see if i can

00:33:03,840 --> 00:33:11,840
grab it

00:33:14,399 --> 00:33:21,640
okay folks the

00:33:18,399 --> 00:33:25,039
the book you want is

00:33:21,640 --> 00:33:25,919
mysql8 performance tuning by jesper

00:33:25,039 --> 00:33:29,200
reborn

00:33:25,919 --> 00:33:31,600
crow uh he used to work for mysql he's

00:33:29,200 --> 00:33:35,760
now gone on to uh some different work

00:33:31,600 --> 00:33:38,320
uh this is the book on mysql8

00:33:35,760 --> 00:33:38,960
uh this is my third time reading through

00:33:38,320 --> 00:33:40,159
it

00:33:38,960 --> 00:33:41,840
and it's one of those things where

00:33:40,159 --> 00:33:43,600
there's an epiphany every couple pages

00:33:41,840 --> 00:33:44,720
for me and i've been using mysql since

00:33:43,600 --> 00:33:46,799
it came out

00:33:44,720 --> 00:33:48,720
uh used to be everyone loved mysql high

00:33:46,799 --> 00:33:51,120
performance by peter zaydev

00:33:48,720 --> 00:33:52,559
of vladimir jinko and baron schwartz

00:33:51,120 --> 00:33:55,600
unfortunately it's getting a bit

00:33:52,559 --> 00:33:58,240
long a tooth but this

00:33:55,600 --> 00:33:58,240
is the book

00:34:01,360 --> 00:34:07,600
and uh thank you for the folks i'm

00:34:02,720 --> 00:34:11,679
reading on irc thank you folks

00:34:07,600 --> 00:34:14,399
uh finally what is the dog's name um

00:34:11,679 --> 00:34:14,399
oh she's gone

00:34:18,720 --> 00:34:22,399
southern black mouth kerr let me see i

00:34:21,359 --> 00:34:25,280
get a picture of her

00:34:22,399 --> 00:34:25,280
unfortunately i gotta

00:34:27,440 --> 00:34:32,560
kill off the phone and bring it back um

00:34:30,800 --> 00:34:34,240
this is boo she is a southern black

00:34:32,560 --> 00:34:36,159
mouth kurt she is a very

00:34:34,240 --> 00:34:37,839
intelligent dog kind of scary how many

00:34:36,159 --> 00:34:39,520
dogs that first thing she does is go up

00:34:37,839 --> 00:34:41,760
start opening doorknobs

00:34:39,520 --> 00:34:44,800
uh also you'll see a old beetle water

00:34:41,760 --> 00:34:44,800
around his name is jack

00:34:47,359 --> 00:34:51,919
wonderful thank you very much thank you

00:34:50,480 --> 00:34:54,879
for having me

00:34:51,919 --> 00:34:54,879
thank you for having me

00:34:55,520 --> 00:35:03,839
see you bye adios amigos

00:35:05,520 --> 00:35:07,599

YouTube URL: https://www.youtube.com/watch?v=wlcKxu53LA4


