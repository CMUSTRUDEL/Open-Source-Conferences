Title: Debian Go Packaging Team BoF
Publication date: 2020-10-23
Playlist: DebConf 20
Description: 
	by ClÃ©ment Hermann

At: DebConf20
https://debconf20.debconf.org/talks/59-debian-go-packaging-team-bof/

Like last year, we will discuss the current state of Go packaging in Debian, try to resolve issues and decide how to move forward.

Please put items you'd like to discuss on https://wiki.debian.org/Teams/DebianGoTeam/2020/BoF

Room: Talks
Scheduled start: 2020-08-26 12:00:00
Captions: 
	00:00:06,080 --> 00:00:08,720
hi

00:00:06,640 --> 00:00:09,760
welcome to the damian golon packaging

00:00:08,720 --> 00:00:13,280
team both

00:00:09,760 --> 00:00:15,599
so like last year

00:00:13,280 --> 00:00:16,480
i decided to propose above to discuss

00:00:15,599 --> 00:00:18,960
the state of

00:00:16,480 --> 00:00:20,240
the team and what needs to be done what

00:00:18,960 --> 00:00:24,400
has been done

00:00:20,240 --> 00:00:27,840
so let's

00:00:24,400 --> 00:00:28,960
start so the idea is first to make like

00:00:27,840 --> 00:00:32,320
a

00:00:28,960 --> 00:00:45,840
current table i present oneself briefly

00:00:32,320 --> 00:00:45,840
hold on it doesn't seem to be going

00:00:46,960 --> 00:00:51,520
apologies it does seem to be going now

00:00:49,360 --> 00:00:53,680
okay go ahead

00:00:51,520 --> 00:00:56,719
hi so welcome to the debian golden

00:00:53,680 --> 00:00:56,719
packaging team buff

00:00:56,879 --> 00:01:01,920
so like last year i proposed this buff

00:01:00,719 --> 00:01:04,640
so that we could discuss

00:01:01,920 --> 00:01:04,640
the state of

00:01:09,280 --> 00:01:16,000
well uh how to move forward

00:01:12,720 --> 00:01:19,280
so my let's start by

00:01:16,000 --> 00:01:22,159
doing some a round of presentation

00:01:19,280 --> 00:01:23,680
just state uh who you are and what

00:01:22,159 --> 00:01:26,799
you're doing briefly

00:01:23,680 --> 00:01:26,799
so i'll start so i'm

00:01:27,600 --> 00:01:34,720
i'm not a real

00:01:30,960 --> 00:01:37,520
very active member of this team but well

00:01:34,720 --> 00:01:39,200
some stuff needs to be done and i try to

00:01:37,520 --> 00:01:42,479
at least help

00:01:39,200 --> 00:01:45,840
doing them so okay

00:01:42,479 --> 00:01:45,840
go ahead who's next

00:01:47,280 --> 00:01:52,399
i'm happy to go next my name is reinhard

00:01:50,560 --> 00:01:54,560
i've been in debian around for quite

00:01:52,399 --> 00:01:56,399
some time i've done a lot of working

00:01:54,560 --> 00:01:59,439
multimedia team and

00:01:56,399 --> 00:02:00,399
random other packages i started uh

00:01:59,439 --> 00:02:03,040
becoming active

00:02:00,399 --> 00:02:04,719
in the debian go community mostly

00:02:03,040 --> 00:02:06,880
because i'm interested in some container

00:02:04,719 --> 00:02:10,640
laser packages i have

00:02:06,880 --> 00:02:10,640
packaged the

00:02:11,360 --> 00:02:16,319
container-related tools the builder

00:02:13,920 --> 00:02:19,440
scopia and potman which aims to be

00:02:16,319 --> 00:02:22,800
docker replacements docker is also

00:02:19,440 --> 00:02:24,400
maintained inside of the debian golang

00:02:22,800 --> 00:02:26,959
team

00:02:24,400 --> 00:02:27,920
and there was quite a bit of work too

00:02:26,959 --> 00:02:30,560
for actually all the reverse

00:02:27,920 --> 00:02:34,160
dependencies that exposed me a lot of

00:02:30,560 --> 00:02:37,760
what the go team and debian is doing

00:02:34,160 --> 00:02:40,800
and i am attending this buff to

00:02:37,760 --> 00:02:44,400
learn more about eu folks and

00:02:40,800 --> 00:02:50,560
to see how we can

00:02:44,400 --> 00:02:52,879
make goal in debian better

00:02:50,560 --> 00:02:52,879
thanks

00:02:56,640 --> 00:03:01,760
i just called people anthony maybe

00:03:02,879 --> 00:03:08,800
hello hi can you hear me

00:03:06,080 --> 00:03:10,159
hello uh we can hear you very well thank

00:03:08,800 --> 00:03:12,720
you oh good oh thank you

00:03:10,159 --> 00:03:14,720
so sorry uh hi my name is dan anthony

00:03:12,720 --> 00:03:18,239
and i've been a

00:03:14,720 --> 00:03:21,920
developers type and developer since 1997

00:03:18,239 --> 00:03:25,120
uh i started out with like a chinese cjk

00:03:21,920 --> 00:03:26,159
and like musical type cutting software

00:03:25,120 --> 00:03:29,360
like uh

00:03:26,159 --> 00:03:33,440
like lily pond uh earlier on and i

00:03:29,360 --> 00:03:34,080
got involved with uh i joined the debian

00:03:33,440 --> 00:03:37,760
gold

00:03:34,080 --> 00:03:41,519
packaging team in i think 2016

00:03:37,760 --> 00:03:41,920
and 2016 uh uh when i started with hugo

00:03:41,519 --> 00:03:44,560
the

00:03:41,920 --> 00:03:46,720
static website generator um so i wanted

00:03:44,560 --> 00:03:47,040
to make a website for myself but i ended

00:03:46,720 --> 00:03:48,879
up

00:03:47,040 --> 00:03:50,239
doing the packaging work and not doing

00:03:48,879 --> 00:03:53,439
my website anyhow

00:03:50,239 --> 00:03:55,840
um and i'm just excited to be

00:03:53,439 --> 00:03:57,519
uh on this team and i see lots of work

00:03:55,840 --> 00:03:58,640
going on with all the other members and

00:03:57,519 --> 00:04:00,560
i'd like to hear

00:03:58,640 --> 00:04:02,080
this is my first bof with the go team

00:04:00,560 --> 00:04:06,000
and i like to learn more and

00:04:02,080 --> 00:04:09,040
uh thank you thank you for

00:04:06,000 --> 00:04:12,000
joining us

00:04:09,040 --> 00:04:14,480
yeah hello uh wow i mean uh anthony has

00:04:12,000 --> 00:04:15,599
been a dd since 97 i wasn't even born

00:04:14,480 --> 00:04:18,000
then

00:04:15,599 --> 00:04:20,160
so i'm a 20 year old computer science

00:04:18,000 --> 00:04:22,320
student and i've been a dd

00:04:20,160 --> 00:04:25,440
since december last year and i started

00:04:22,320 --> 00:04:28,479
continuing in 2019

00:04:25,440 --> 00:04:30,479
in the go team i maintain a couple of uh

00:04:28,479 --> 00:04:33,919
dependencies or i think around

00:04:30,479 --> 00:04:34,639
40 45 packages um i mostly maintain

00:04:33,919 --> 00:04:37,919
micro

00:04:34,639 --> 00:04:38,560
uh it's a it's a text editor uh which is

00:04:37,919 --> 00:04:41,840
which is some

00:04:38,560 --> 00:04:42,560
something between in micro uh nano and

00:04:41,840 --> 00:04:45,680
wimp

00:04:42,560 --> 00:04:49,120
uh so i maintain its dependencies

00:04:45,680 --> 00:04:50,880
and um i also maintain uh gitlab's

00:04:49,120 --> 00:04:54,000
dependencies the golang part

00:04:50,880 --> 00:04:58,080
and i keep sponsoring a lot of uploads

00:04:54,000 --> 00:05:01,440
um and i also uh patched some cv

00:04:58,080 --> 00:05:03,840
bugs for stable old stable and um

00:05:01,440 --> 00:05:05,680
of course bullseye and sick so that's my

00:05:03,840 --> 00:05:07,919
involvement with the goatee

00:05:05,680 --> 00:05:07,919
thanks

00:05:08,720 --> 00:05:12,400
do you want to say a few words about

00:05:10,720 --> 00:05:15,600
yourself

00:05:12,400 --> 00:05:17,520
uh yeah hi my name is nilesh uh i'm a

00:05:15,600 --> 00:05:20,240
member of the go team

00:05:17,520 --> 00:05:20,639
since the past few months i maintain a

00:05:20,240 --> 00:05:23,120
few

00:05:20,639 --> 00:05:25,680
packages in the golang team which is

00:05:23,120 --> 00:05:28,479
mostly the free dependencies of

00:05:25,680 --> 00:05:29,120
medical softwares and also from time to

00:05:28,479 --> 00:05:32,160
time keep

00:05:29,120 --> 00:05:35,039
fixing rc works uh for the coolant team

00:05:32,160 --> 00:05:35,039
that's my involvement

00:05:35,199 --> 00:05:41,680
okay thanks and i see we have

00:05:38,479 --> 00:05:45,919
luca can assure on the bed but

00:05:41,680 --> 00:05:45,919
is not in here apparently

00:05:48,479 --> 00:05:54,080
uh well anyone else want to present

00:05:51,759 --> 00:05:54,080
himself

00:05:54,960 --> 00:05:58,240
otherwise we'll just move on

00:06:02,720 --> 00:06:06,240
well i can quickly present myself i'm

00:06:04,800 --> 00:06:09,840
michael bank i'm

00:06:06,240 --> 00:06:11,520
mostly maintaining a fcd so it's a

00:06:09,840 --> 00:06:13,440
descriptive consensus store because one

00:06:11,520 --> 00:06:16,639
of my packages petroni

00:06:13,440 --> 00:06:17,600
um uses the best one and there were a

00:06:16,639 --> 00:06:19,120
couple of

00:06:17,600 --> 00:06:20,720
problems i think there's still a release

00:06:19,120 --> 00:06:23,280
critical bug fight cd

00:06:20,720 --> 00:06:25,840
so i'm mostly interested in that and due

00:06:23,280 --> 00:06:29,520
to that i joined the team

00:06:25,840 --> 00:06:30,240
great thank you okay so i think that's

00:06:29,520 --> 00:06:33,280
it for the

00:06:30,240 --> 00:06:36,400
active participant

00:06:33,280 --> 00:06:39,680
uh so okay let's start

00:06:36,400 --> 00:06:42,960
idea was to maybe review

00:06:39,680 --> 00:06:46,400
for some unsolved items from

00:06:42,960 --> 00:06:48,160
last year agenda uh whatever is still

00:06:46,400 --> 00:06:52,479
ongoing or unresolved

00:06:48,160 --> 00:06:55,210
and that was so i linked it

00:06:52,479 --> 00:06:56,400
in the pad but

00:06:55,210 --> 00:06:59,919
[Music]

00:06:56,400 --> 00:07:01,120
while discussing with reynard we decided

00:06:59,919 --> 00:07:04,560
to try to move

00:07:01,120 --> 00:07:08,560
up two items which is

00:07:04,560 --> 00:07:12,160
a go mode issue

00:07:08,560 --> 00:07:15,280
and the need to migrate away from

00:07:12,160 --> 00:07:18,800
build using in our packages

00:07:15,280 --> 00:07:23,440
so about gomod issue

00:07:18,800 --> 00:07:27,120
uh my understanding of the issue is that

00:07:23,440 --> 00:07:30,000
go might migrate away from using gopass

00:07:27,120 --> 00:07:34,319
and we use gopass extensively

00:07:30,000 --> 00:07:36,720
to build packages so we need to

00:07:34,319 --> 00:07:40,080
find a workaround and the workaround

00:07:36,720 --> 00:07:44,319
exists which is a good thing

00:07:40,080 --> 00:07:47,440
the thing is our tooling does not yet uh

00:07:44,319 --> 00:07:49,840
under that so yeah

00:07:47,440 --> 00:07:50,479
i post it uh before anyone wants to

00:07:49,840 --> 00:07:53,759
check it

00:07:50,479 --> 00:07:56,240
i post a link to the message from

00:07:53,759 --> 00:07:57,599
changing who unfortunately could not

00:07:56,240 --> 00:08:00,639
join us but

00:07:57,599 --> 00:08:03,280
he did some tests to

00:08:00,639 --> 00:08:04,319
validate that it is possible to build uh

00:08:03,280 --> 00:08:07,280
go

00:08:04,319 --> 00:08:08,560
the way we do it without using gopath

00:08:07,280 --> 00:08:11,599
but

00:08:08,560 --> 00:08:14,960
yeah it's so far nothing more

00:08:11,599 --> 00:08:14,960
has been done

00:08:15,759 --> 00:08:18,960
from the link myself

00:08:22,479 --> 00:08:29,280
so yeah the and the idea is to

00:08:30,240 --> 00:08:36,080
to use a a

00:08:33,360 --> 00:08:37,279
specific uh go build command line with

00:08:36,080 --> 00:08:39,599
some

00:08:37,279 --> 00:08:40,640
some platform i have to admit i don't

00:08:39,599 --> 00:08:43,519
really get

00:08:40,640 --> 00:08:45,519
what it implies so if anyone has more

00:08:43,519 --> 00:08:48,080
information about that

00:08:45,519 --> 00:08:49,839
could talk about it i mean i'm happy to

00:08:48,080 --> 00:08:52,880
try to hack the edge coding to

00:08:49,839 --> 00:08:53,680
handle that if needed but i mean it's

00:08:52,880 --> 00:08:56,959
better then i

00:08:53,680 --> 00:09:00,320
do do a bit of work but

00:08:56,959 --> 00:09:02,320
i would need help in understanding okay

00:09:00,320 --> 00:09:04,560
what's actually going on and what needs

00:09:02,320 --> 00:09:08,320
to be changed

00:09:04,560 --> 00:09:10,560
i did take a look at the implementation

00:09:08,320 --> 00:09:13,920
of the current goal and that helper um

00:09:10,560 --> 00:09:14,800
what it is currently doing is a very

00:09:13,920 --> 00:09:17,839
interesting hack

00:09:14,800 --> 00:09:21,120
um and very creative hack so um

00:09:17,839 --> 00:09:22,959
with go path um you

00:09:21,120 --> 00:09:24,720
how it usually works is you you do go

00:09:22,959 --> 00:09:26,880
get you uh populate your

00:09:24,720 --> 00:09:28,240
um your working director with all the

00:09:26,880 --> 00:09:30,240
dependencies and all the library that

00:09:28,240 --> 00:09:34,160
you have in a working directory

00:09:30,240 --> 00:09:36,480
and um do go build by setting goal paths

00:09:34,160 --> 00:09:39,760
to do okay build what i have right here

00:09:36,480 --> 00:09:41,120
in the debian context we don't want to

00:09:39,760 --> 00:09:42,640
download stuff randomly from the

00:09:41,120 --> 00:09:43,680
internet we want to use the package

00:09:42,640 --> 00:09:46,240
version so

00:09:43,680 --> 00:09:48,800
the the current tech what go mod is

00:09:46,240 --> 00:09:51,120
doing is it's creating a build directory

00:09:48,800 --> 00:09:52,880
it's creating a new um temporary

00:09:51,120 --> 00:09:54,800
directory in the build sources

00:09:52,880 --> 00:09:56,240
and will then sim link all the

00:09:54,800 --> 00:09:58,399
dependencies of

00:09:56,240 --> 00:10:00,320
um with placing something that are

00:09:58,399 --> 00:10:03,760
basically placing a sibling form

00:10:00,320 --> 00:10:07,120
to user share go

00:10:03,760 --> 00:10:09,519
whatever the libraries are um

00:10:07,120 --> 00:10:11,360
yeah and on top of that the actual

00:10:09,519 --> 00:10:14,959
sources are being copied in

00:10:11,360 --> 00:10:16,720
so what how i understood xinjiang's

00:10:14,959 --> 00:10:20,160
email what he was proposing instead of

00:10:16,720 --> 00:10:21,839
doing that it seems to be possible to

00:10:20,160 --> 00:10:23,279
use a completely different approach

00:10:21,839 --> 00:10:25,360
which to be frank i find very

00:10:23,279 --> 00:10:26,800
attractive and very interesting so

00:10:25,360 --> 00:10:28,959
instead of

00:10:26,800 --> 00:10:30,720
building this temporary directory we

00:10:28,959 --> 00:10:32,959
could instead

00:10:30,720 --> 00:10:34,560
rewrite the go mod file in a way that

00:10:32,959 --> 00:10:37,279
says well

00:10:34,560 --> 00:10:38,320
um instead um the gomod file contains

00:10:37,279 --> 00:10:41,760
the name

00:10:38,320 --> 00:10:43,680
and um um the one the

00:10:41,760 --> 00:10:45,279
text so what is the specific

00:10:43,680 --> 00:10:46,240
distribution of the dependencies that

00:10:45,279 --> 00:10:48,000
you want to use

00:10:46,240 --> 00:10:49,760
it seems to be impossible to replace

00:10:48,000 --> 00:10:54,320
them

00:10:49,760 --> 00:10:57,360
to use a share of um user ssd

00:10:54,320 --> 00:10:57,760
and and then have to go from that that

00:10:57,360 --> 00:11:00,560
would

00:10:57,760 --> 00:11:02,240
allow us to no longer have to copy this

00:11:00,560 --> 00:11:04,480
temporary directory it would allow

00:11:02,240 --> 00:11:06,560
to do incremental builds i find that

00:11:04,480 --> 00:11:07,360
approach very attractive but to be frank

00:11:06,560 --> 00:11:10,480
i

00:11:07,360 --> 00:11:12,160
did not have a chance to try hacking up

00:11:10,480 --> 00:11:13,440
the goldmine that's over to be frank i'm

00:11:12,160 --> 00:11:16,480
not even sure if it

00:11:13,440 --> 00:11:19,680
works um having two modes

00:11:16,480 --> 00:11:20,720
it might be um a case where we need to

00:11:19,680 --> 00:11:23,600
have a goal line

00:11:20,720 --> 00:11:25,200
depth or two or something um alternative

00:11:23,600 --> 00:11:29,120
implementations that implement

00:11:25,200 --> 00:11:32,560
completely outstanding portfolio

00:11:29,120 --> 00:11:33,360
so one of the main thing we need to

00:11:32,560 --> 00:11:35,040
decide is that

00:11:33,360 --> 00:11:37,440
do we have to do something about that

00:11:35,040 --> 00:11:40,959
before bullseye

00:11:37,440 --> 00:11:44,560
or can we still go by

00:11:40,959 --> 00:11:47,279
with one more release

00:11:44,560 --> 00:11:57,839
and make sure this is fixed for the

00:11:47,279 --> 00:11:57,839
release afterwards

00:12:01,519 --> 00:12:04,959
i guess the question is um right now we

00:12:03,680 --> 00:12:08,000
are using go

00:12:04,959 --> 00:12:11,600
lang 1.14 uh do we plan

00:12:08,000 --> 00:12:13,200
on moving to a newer version of go

00:12:11,600 --> 00:12:16,560
before

00:12:13,200 --> 00:12:16,560
bullseye release or not

00:12:16,720 --> 00:12:20,720
well my personal opinion on that is that

00:12:18,720 --> 00:12:25,600
if we don't absolutely need it for

00:12:20,720 --> 00:12:29,200
a very important package let's not but

00:12:25,600 --> 00:12:30,880
unless we have uh information about okay

00:12:29,200 --> 00:12:32,639
well this would be

00:12:30,880 --> 00:12:36,720
duplicated and there will be no security

00:12:32,639 --> 00:12:36,720
support in the next two years

00:12:37,200 --> 00:12:41,440
but yeah well anyway security support of

00:12:40,160 --> 00:12:44,959
the packages

00:12:41,440 --> 00:12:46,160
is also an issue and that would be the

00:12:44,959 --> 00:12:49,920
next item but maybe

00:12:46,160 --> 00:12:53,839
someone else wants to discuss a bit more

00:12:49,920 --> 00:12:53,839
about the gomod

00:13:00,160 --> 00:13:03,680
i think it kind of depends on how fast

00:13:02,240 --> 00:13:05,519
we can get this to work

00:13:03,680 --> 00:13:07,120
whether it is like well before the

00:13:05,519 --> 00:13:10,399
bullseye release or

00:13:07,120 --> 00:13:12,240
um because i don't foresee any security

00:13:10,399 --> 00:13:15,040
issues uh but it's just uh

00:13:12,240 --> 00:13:17,120
the time it takes to uh to test it out

00:13:15,040 --> 00:13:19,760
and make sure it works on all of the

00:13:17,120 --> 00:13:20,240
packages so um yeah i know we are all

00:13:19,760 --> 00:13:22,639
busy

00:13:20,240 --> 00:13:23,760
like with fixing bugs existing like

00:13:22,639 --> 00:13:26,079
other bugs in so

00:13:23,760 --> 00:13:27,360
uh these things takes time uh and for

00:13:26,079 --> 00:13:29,120
example like with the

00:13:27,360 --> 00:13:31,200
new so-called new packaging workflow

00:13:29,120 --> 00:13:33,519
with uh uh dh mexico like et cetera

00:13:31,200 --> 00:13:36,480
these this takes time for people to

00:13:33,519 --> 00:13:38,000
understand absorb and to write it like

00:13:36,480 --> 00:13:40,079
change the tools for them

00:13:38,000 --> 00:13:41,279
so i think that's that's the bottleneck

00:13:40,079 --> 00:13:42,639
and

00:13:41,279 --> 00:13:44,720
i guess we'll just see how fast we can

00:13:42,639 --> 00:13:45,360
get all things ready for for the next

00:13:44,720 --> 00:13:49,199
release

00:13:45,360 --> 00:13:51,680
either either debian 11 or 12 yeah

00:13:49,199 --> 00:13:53,440
i guess it would be it would be good in

00:13:51,680 --> 00:13:56,320
this uh

00:13:53,440 --> 00:13:57,760
i mean as you said uh those things takes

00:13:56,320 --> 00:14:02,000
time we have a lot of packages

00:13:57,760 --> 00:14:06,160
we're not sure how well this approach uh

00:14:02,000 --> 00:14:08,880
this workaround uh zenjing is proposing

00:14:06,160 --> 00:14:10,240
would work for all the packages so it

00:14:08,880 --> 00:14:13,760
would be nice to have

00:14:10,240 --> 00:14:15,839
uh to start early

00:14:13,760 --> 00:14:17,199
on the next ready cycle to work on that

00:14:15,839 --> 00:14:19,519
maybe

00:14:17,199 --> 00:14:21,839
or that for me that would be a sensible

00:14:19,519 --> 00:14:21,839
plan

00:14:29,360 --> 00:14:32,800
if i may share my personal opinion i i

00:14:32,240 --> 00:14:34,880
think

00:14:32,800 --> 00:14:36,079
you're right we have a lot of work to do

00:14:34,880 --> 00:14:39,120
um and

00:14:36,079 --> 00:14:41,440
i don't think that we can um have like a

00:14:39,120 --> 00:14:43,760
cut over date after which we will

00:14:41,440 --> 00:14:45,519
do a mass migration of package to one

00:14:43,760 --> 00:14:46,639
side for another i do think there needs

00:14:45,519 --> 00:14:49,360
to be an extended

00:14:46,639 --> 00:14:51,279
transitional period like we do for the

00:14:49,360 --> 00:14:55,440
proper compatibility levels

00:14:51,279 --> 00:14:59,040
i think we can start working

00:14:55,440 --> 00:15:01,519
on this novel way of of

00:14:59,040 --> 00:15:02,560
uh dealing with gold mods um like uh

00:15:01,519 --> 00:15:06,000
something uh

00:15:02,560 --> 00:15:06,480
um proposed and explore and experiment

00:15:06,000 --> 00:15:09,040
with that

00:15:06,480 --> 00:15:10,399
in parallel to existing packages and

00:15:09,040 --> 00:15:13,360
existing packages

00:15:10,399 --> 00:15:15,199
i mean i we do have quite some packages

00:15:13,360 --> 00:15:18,720
that don't even use gilmores at all

00:15:15,199 --> 00:15:20,399
um so we would need to keep the existing

00:15:18,720 --> 00:15:21,680
implementation around for those packages

00:15:20,399 --> 00:15:24,959
anyways

00:15:21,680 --> 00:15:27,920
um with that in mind i don't think

00:15:24,959 --> 00:15:30,399
there's um

00:15:27,920 --> 00:15:32,160
i mean it's a prioritization call um i

00:15:30,399 --> 00:15:33,360
think you propose to wait for that after

00:15:32,160 --> 00:15:36,399
 release um

00:15:33,360 --> 00:15:38,560
i don't think we need to wait i think

00:15:36,399 --> 00:15:41,360
if we feel this is something important

00:15:38,560 --> 00:15:43,199
because the next release of um

00:15:41,360 --> 00:15:44,959
upstream golang will drop the support

00:15:43,199 --> 00:15:46,639
for gopath we

00:15:44,959 --> 00:15:48,480
need to have something in place as soon

00:15:46,639 --> 00:15:49,680
as possible it would be prudent to start

00:15:48,480 --> 00:15:52,880
working on

00:15:49,680 --> 00:15:55,920
um this gomod

00:15:52,880 --> 00:15:57,279
dev helper sooner than later but it's a

00:15:55,920 --> 00:15:57,600
prioritization call because you also

00:15:57,279 --> 00:15:59,120
have

00:15:57,600 --> 00:16:00,800
other things to do like migrate from

00:15:59,120 --> 00:16:03,839
those using

00:16:00,800 --> 00:16:04,480
a part further down the road so i wonder

00:16:03,839 --> 00:16:08,320
if we

00:16:04,480 --> 00:16:11,120
and how we can achieve both goals um

00:16:08,320 --> 00:16:11,440
in a reasonable time frame yeah well i i

00:16:11,120 --> 00:16:13,839
i

00:16:11,440 --> 00:16:14,720
let me rephrase uh when i was saying uh

00:16:13,839 --> 00:16:17,839
start

00:16:14,720 --> 00:16:19,759
working on that i'm not

00:16:17,839 --> 00:16:21,680
suggesting well it was poly phrase

00:16:19,759 --> 00:16:23,519
because i'm not suggesting we

00:16:21,680 --> 00:16:26,079
should not work on that at all i mean

00:16:23,519 --> 00:16:29,120
i'm fine if anyone wants to

00:16:26,079 --> 00:16:33,040
start looking at that and start to

00:16:29,120 --> 00:16:34,959
hack some tools to work on that i mean

00:16:33,040 --> 00:16:36,800
i'm not going to disagree with that on

00:16:34,959 --> 00:16:40,480
the contrary it would be great

00:16:36,800 --> 00:16:42,480
the thing is we can't make in my opinion

00:16:40,480 --> 00:16:43,759
and it's only my opinion we can't make

00:16:42,480 --> 00:16:47,120
like a priority

00:16:43,759 --> 00:16:49,120
over other issues like

00:16:47,120 --> 00:16:50,160
stop using build choosing and stuff like

00:16:49,120 --> 00:16:52,079
that for the

00:16:50,160 --> 00:16:54,240
which are a requirement for the next

00:16:52,079 --> 00:16:55,279
release and the next release i mean the

00:16:54,240 --> 00:16:58,800
freeze is uh

00:16:55,279 --> 00:17:00,800
six months away less than that actually

00:16:58,800 --> 00:17:02,880
well i think you're right uh we can

00:17:00,800 --> 00:17:05,919
always uh start staging

00:17:02,880 --> 00:17:09,600
stuff in experimental and then uh do

00:17:05,919 --> 00:17:12,079
uh archive uh rebuild and see

00:17:09,600 --> 00:17:12,720
how much how much uh work that we have

00:17:12,079 --> 00:17:14,640
to do

00:17:12,720 --> 00:17:16,400
and then maybe from there we decide if

00:17:14,640 --> 00:17:19,600
it's a if it's a

00:17:16,400 --> 00:17:20,400
if it's compatible to go uh to with

00:17:19,600 --> 00:17:23,520
bullseye

00:17:20,400 --> 00:17:24,799
or we should uh let bullseye get

00:17:23,520 --> 00:17:27,120
released and then maybe

00:17:24,799 --> 00:17:29,200
upload it to save uh so maybe yeah

00:17:27,120 --> 00:17:31,120
starting uh this transition and staging

00:17:29,200 --> 00:17:34,320
and uploading to experimental would

00:17:31,120 --> 00:17:35,440
probably be the probably be a good way i

00:17:34,320 --> 00:17:38,960
think

00:17:35,440 --> 00:17:42,720
yeah okay

00:17:38,960 --> 00:17:44,720
so let's move on to the next item or

00:17:42,720 --> 00:17:47,840
anyone else want to chime on

00:17:44,720 --> 00:17:47,840
this one

00:17:49,520 --> 00:17:56,720
okay i guess we'll move on

00:17:52,720 --> 00:17:59,440
so yeah next item is migrate away

00:17:56,720 --> 00:18:00,720
from build choosing so a bit of context

00:17:59,440 --> 00:18:04,080
here

00:18:00,720 --> 00:18:05,520
we are using the build choosing control

00:18:04,080 --> 00:18:09,760
field in our packages

00:18:05,520 --> 00:18:13,520
to know which packages which

00:18:09,760 --> 00:18:15,840
packages are used to build a specific

00:18:13,520 --> 00:18:15,840
package

00:18:16,320 --> 00:18:23,200
we started using that before it was

00:18:20,160 --> 00:18:23,760
policy to not using it that way but only

00:18:23,200 --> 00:18:26,799
use it

00:18:23,760 --> 00:18:30,080
for the

00:18:26,799 --> 00:18:30,080
legal reason that is

00:18:31,760 --> 00:18:35,200
i mean telling okay well i did build

00:18:34,000 --> 00:18:36,640
this thing

00:18:35,200 --> 00:18:38,559
with this other thing and that's

00:18:36,640 --> 00:18:42,240
required for uh for instance

00:18:38,559 --> 00:18:45,440
uh by the apg license

00:18:42,240 --> 00:18:46,960
so policy now prevent us to use build

00:18:45,440 --> 00:18:49,679
using field

00:18:46,960 --> 00:18:50,559
this way just to say okay well i we use

00:18:49,679 --> 00:18:54,480
this in this

00:18:50,559 --> 00:18:57,200
package to to

00:18:54,480 --> 00:18:59,280
build this one but we since all our

00:18:57,200 --> 00:19:02,880
packages are aesthetically linked

00:18:59,280 --> 00:19:04,960
we do need a way to know which packages

00:19:02,880 --> 00:19:06,320
are have been used in building one

00:19:04,960 --> 00:19:09,440
specific package

00:19:06,320 --> 00:19:11,120
the reason is if we need to update for

00:19:09,440 --> 00:19:14,640
instance for a security update

00:19:11,120 --> 00:19:16,000
one package we need to rebuild uh or to

00:19:14,640 --> 00:19:20,400
build an mmu

00:19:16,000 --> 00:19:22,960
all the dependencies so that's

00:19:20,400 --> 00:19:24,400
we need some way to to know which

00:19:22,960 --> 00:19:25,280
packages are used in the building

00:19:24,400 --> 00:19:29,840
process

00:19:25,280 --> 00:19:33,600
so my proposal would be to

00:19:29,840 --> 00:19:35,520
create a new field which would be x go

00:19:33,600 --> 00:19:38,960
build choosing

00:19:35,520 --> 00:19:41,520
the idea is to mimic the way rust

00:19:38,960 --> 00:19:42,960
team do things they use x cargo bill

00:19:41,520 --> 00:19:45,840
choosing

00:19:42,960 --> 00:19:47,280
at first when discussing this with uh

00:19:45,840 --> 00:19:51,360
ivarde from

00:19:47,280 --> 00:19:53,280
relisting you got the dekker the

00:19:51,360 --> 00:19:55,760
i was thinking it would be nice to use

00:19:53,280 --> 00:19:57,520
the same field because it's the exact

00:19:55,760 --> 00:20:01,360
same usage

00:19:57,520 --> 00:20:04,480
on the other hand i don't think

00:20:01,360 --> 00:20:08,080
we need to

00:20:04,480 --> 00:20:08,480
change the stuff for both teams i mean

00:20:08,080 --> 00:20:11,760
that

00:20:08,480 --> 00:20:14,960
would be adding work for the rest team

00:20:11,760 --> 00:20:18,159
and for little to no benefit

00:20:14,960 --> 00:20:21,280
so just create our field

00:20:18,159 --> 00:20:23,679
check which tooling needs to change uh

00:20:21,280 --> 00:20:25,200
needs change i mean we definitely need

00:20:23,679 --> 00:20:28,640
to

00:20:25,200 --> 00:20:32,880
patch a dhca rank for that which

00:20:28,640 --> 00:20:36,240
is feelings in this uh this field

00:20:32,880 --> 00:20:39,679
uh i am not aware of any other tool that

00:20:36,240 --> 00:20:43,440
actively uses this a

00:20:39,679 --> 00:20:47,440
part maybe dhma golang which

00:20:43,440 --> 00:20:48,720
might request that on the ftp master api

00:20:47,440 --> 00:20:52,159
to

00:20:48,720 --> 00:20:54,880
check for what dependencies are

00:20:52,159 --> 00:20:57,280
for a specific package are already in

00:20:54,880 --> 00:20:57,280
debian

00:20:57,520 --> 00:21:17,840
so yeah

00:21:03,280 --> 00:21:17,840
everyone wants to

00:21:24,799 --> 00:21:29,919
well or you think about it i'll just uh

00:21:27,840 --> 00:21:31,760
and try to answer the questions that's

00:21:29,919 --> 00:21:33,919
occurring in the pad

00:21:31,760 --> 00:21:36,400
so yeah well is go ever moving away from

00:21:33,919 --> 00:21:39,679
static linking i don't think anyone any

00:21:36,400 --> 00:21:42,480
distribution is actually using

00:21:39,679 --> 00:21:43,360
the dynamic linking in go i've been

00:21:42,480 --> 00:21:47,200
talking

00:21:43,360 --> 00:21:49,679
with people from canonical and

00:21:47,200 --> 00:21:51,360
actually removed that from they started

00:21:49,679 --> 00:21:53,039
an experiment in that and they removed

00:21:51,360 --> 00:21:56,400
it because

00:21:53,039 --> 00:21:59,840
they say it's not ready yet i mean

00:21:56,400 --> 00:22:04,159
no one builds uh dynamic modules uh

00:21:59,840 --> 00:22:08,880
it is it exists in the in the go to link

00:22:04,159 --> 00:22:08,880
but no one is actually using that so

00:22:09,120 --> 00:22:13,360
the idea is that uh well upstream is not

00:22:12,640 --> 00:22:16,880
using it

00:22:13,360 --> 00:22:19,200
and we are probably going to have a lot

00:22:16,880 --> 00:22:20,880
of issues if we try to do that and i'm

00:22:19,200 --> 00:22:22,480
not sure it's worth the effort

00:22:20,880 --> 00:22:24,480
of course it would be nice to not have

00:22:22,480 --> 00:22:27,360
static linking

00:22:24,480 --> 00:22:28,080
but i don't see that happening in the go

00:22:27,360 --> 00:22:30,320
ecosystem

00:22:28,080 --> 00:22:30,320
soon

00:22:37,280 --> 00:22:42,080
no i mean at the end leaf from debian

00:22:40,080 --> 00:22:43,039
want to provide value by providing

00:22:42,080 --> 00:22:45,440
applications

00:22:43,039 --> 00:22:47,440
um from personal experience with talking

00:22:45,440 --> 00:22:50,880
to container upstreams

00:22:47,440 --> 00:22:52,799
they are sympathetic but

00:22:50,880 --> 00:22:54,880
frankly they are more focused on well

00:22:52,799 --> 00:22:57,520
how can they deliver value and

00:22:54,880 --> 00:22:59,360
for from their point of view um

00:22:57,520 --> 00:23:00,080
rendering and statically linking

00:22:59,360 --> 00:23:02,080
everything

00:23:00,080 --> 00:23:03,200
allows them to move at a much higher

00:23:02,080 --> 00:23:05,520
velocity um

00:23:03,200 --> 00:23:07,039
which makes problems downstream for

00:23:05,520 --> 00:23:08,640
distributions like us so we're saying

00:23:07,039 --> 00:23:10,080
well no we don't want to bundle we don't

00:23:08,640 --> 00:23:13,360
want to render everything

00:23:10,080 --> 00:23:15,600
um we want to provide a new universal

00:23:13,360 --> 00:23:17,440
operating system where we control what

00:23:15,600 --> 00:23:21,039
are the bits and pieces

00:23:17,440 --> 00:23:24,159
that we provide i

00:23:21,039 --> 00:23:27,520
think our effort is better spent

00:23:24,159 --> 00:23:29,360
in focusing on the build using issues in

00:23:27,520 --> 00:23:31,520
providing some tooling where we can

00:23:29,360 --> 00:23:34,080
support the security team with

00:23:31,520 --> 00:23:35,280
identifying what needs to be rebuilt and

00:23:34,080 --> 00:23:37,679
solving the

00:23:35,280 --> 00:23:38,559
duck issues that clemens was talking

00:23:37,679 --> 00:23:41,760
about before

00:23:38,559 --> 00:23:43,520
i think that would be a better

00:23:41,760 --> 00:23:46,000
investment of our time

00:23:43,520 --> 00:23:46,640
compared to convincing upstreams like

00:23:46,000 --> 00:23:49,919
fcd

00:23:46,640 --> 00:23:50,240
or other high-profile calling software

00:23:49,919 --> 00:24:05,840
to

00:23:50,240 --> 00:24:05,840
consider dynamically linking

00:24:06,159 --> 00:24:12,720
okay thanks i agree with you

00:24:10,320 --> 00:24:14,159
uh well and apparently no one disagrees

00:24:12,720 --> 00:24:16,720
if someone disagrees

00:24:14,159 --> 00:24:16,720
please shout

00:24:17,360 --> 00:24:24,320
okay so yeah well that's uh we are

00:24:20,960 --> 00:24:27,440
actually moving to the uh yeah

00:24:24,320 --> 00:24:29,679
what is the issue for the release team

00:24:27,440 --> 00:24:32,720
and the security team

00:24:29,679 --> 00:24:35,360
uh with nowadays

00:24:32,720 --> 00:24:35,919
it's the same issues that all statically

00:24:35,360 --> 00:24:38,559
built

00:24:35,919 --> 00:24:40,960
uh language have i mean rest has the

00:24:38,559 --> 00:24:44,080
same issue

00:24:40,960 --> 00:24:45,440
and any other language

00:24:44,080 --> 00:24:47,440
which works the same way we'll have the

00:24:45,440 --> 00:24:50,960
same issue the thing is

00:24:47,440 --> 00:24:55,440
go is much more ubiquitous than

00:24:50,960 --> 00:24:58,960
uh rust for instance and

00:24:55,440 --> 00:25:01,200
when you have to update one go package

00:24:58,960 --> 00:25:02,799
if it's a library and if it's a popular

00:25:01,200 --> 00:25:06,480
library

00:25:02,799 --> 00:25:07,279
well we will you will have to work on a

00:25:06,480 --> 00:25:12,240
lot

00:25:07,279 --> 00:25:12,240
of other packages and so

00:25:12,840 --> 00:25:19,360
the the problem is uh i

00:25:17,039 --> 00:25:20,960
i was uh so last year i was we were

00:25:19,360 --> 00:25:24,159
evoking this issue already

00:25:20,960 --> 00:25:25,200
uh meanwhile i've tried to summarize it

00:25:24,159 --> 00:25:28,640
by talking to

00:25:25,200 --> 00:25:32,000
people from release team

00:25:28,640 --> 00:25:35,120
mainly evo detector but also pearl brush

00:25:32,000 --> 00:25:38,640
and people like that so yeah it's uh

00:25:35,120 --> 00:25:38,640
there is a dark issue that

00:25:39,039 --> 00:25:42,240
means that not only you have to know

00:25:41,600 --> 00:25:46,400
which

00:25:42,240 --> 00:25:49,679
uh packages needs to be rebuilt for uh

00:25:46,400 --> 00:25:50,480
to make a billion view of them but the

00:25:49,679 --> 00:25:53,039
problem is

00:25:50,480 --> 00:25:54,480
uh dak when you try that that will

00:25:53,039 --> 00:25:57,120
scream at you

00:25:54,480 --> 00:25:57,840
if you do that in the security database

00:25:57,120 --> 00:26:01,360
of deck

00:25:57,840 --> 00:26:04,640
uh because it does not have the source

00:26:01,360 --> 00:26:07,440
retargeted for the

00:26:04,640 --> 00:26:07,840
other packet even if you don't modify

00:26:07,440 --> 00:26:09,679
this

00:26:07,840 --> 00:26:11,520
you you still need the source to build

00:26:09,679 --> 00:26:13,120
the others and

00:26:11,520 --> 00:26:15,120
so this is a dark issue i mean it's a

00:26:13,120 --> 00:26:17,279
bug it should be able to

00:26:15,120 --> 00:26:18,960
get them from the main archive which is

00:26:17,279 --> 00:26:22,240
complete and has all the shops

00:26:18,960 --> 00:26:22,240
needed but so far

00:26:22,720 --> 00:26:29,200
there is no ability for that to look for

00:26:26,640 --> 00:26:30,320
stuff in other archives i mean and the

00:26:29,200 --> 00:26:34,080
security archive

00:26:30,320 --> 00:26:37,760
and the main archive needs to be spread

00:26:34,080 --> 00:26:37,760
they need to be sprayed because

00:26:37,840 --> 00:26:41,120
well when you have security issue you

00:26:39,679 --> 00:26:45,200
might have um embargo

00:26:41,120 --> 00:26:47,600
on some issues and uh

00:26:45,200 --> 00:26:48,400
merging the archive would probably leak

00:26:47,600 --> 00:26:52,080
information

00:26:48,400 --> 00:26:54,240
that we can't click on an umbrella issue

00:26:52,080 --> 00:26:55,840
and there's mighty sun and there's a lot

00:26:54,240 --> 00:26:59,120
of other stuff that

00:26:55,840 --> 00:26:59,840
would appear and leak the stuff that's

00:26:59,120 --> 00:27:03,440
unborn good

00:26:59,840 --> 00:27:06,640
so it's not an option so i've

00:27:03,440 --> 00:27:10,720
been trying to move a bit forward

00:27:06,640 --> 00:27:14,159
by what we've been talking with why not

00:27:10,720 --> 00:27:18,320
to try to map this issue

00:27:14,159 --> 00:27:18,320
while patching back the way to do it

00:27:19,039 --> 00:27:23,440
duck is watching python and so yeah well

00:27:22,399 --> 00:27:24,960
we need someone that

00:27:23,440 --> 00:27:26,720
knows python and is uh

00:27:24,960 --> 00:27:28,559
[Music]

00:27:26,720 --> 00:27:30,159
he's ready to have a look at back i mean

00:27:28,559 --> 00:27:31,919
i've looked at the code it's much better

00:27:30,159 --> 00:27:35,039
than before but

00:27:31,919 --> 00:27:38,240
i'm not a python guy

00:27:35,039 --> 00:27:38,559
on the other hand uh that might not be

00:27:38,240 --> 00:27:41,039
the

00:27:38,559 --> 00:27:42,960
sole way of fixing this issue i mean

00:27:41,039 --> 00:27:46,000
maybe if we can just provide

00:27:42,960 --> 00:27:49,200
okay the list of all source package

00:27:46,000 --> 00:27:51,279
and a way to okay well here is

00:27:49,200 --> 00:27:52,320
all the rectangles that you will have to

00:27:51,279 --> 00:27:54,799
upload to

00:27:52,320 --> 00:27:55,919
to your archive to make the bin enemy

00:27:54,799 --> 00:27:57,679
possible

00:27:55,919 --> 00:27:59,440
maybe that would be that would be enough

00:27:57,679 --> 00:28:01,360
for the security team

00:27:59,440 --> 00:28:03,039
so i've sent in now recently uh

00:28:01,360 --> 00:28:06,240
crossbusting and

00:28:03,039 --> 00:28:08,559
well recently that's uh two hours ago uh

00:28:06,240 --> 00:28:10,720
crossbosting and debiango the

00:28:08,559 --> 00:28:14,559
biannualities and sexuality team

00:28:10,720 --> 00:28:14,559
ultimate security.org

00:28:14,720 --> 00:28:20,080
asking if there would be open to set up

00:28:18,080 --> 00:28:23,200
an adaptation so we can

00:28:20,080 --> 00:28:26,000
uh you know uh talk together and

00:28:23,200 --> 00:28:27,520
decide how we could uh make things

00:28:26,000 --> 00:28:29,600
better for everyone

00:28:27,520 --> 00:28:31,760
because so far i've been talking a bit

00:28:29,600 --> 00:28:36,240
with

00:28:31,760 --> 00:28:36,240
evod from the release team but

00:28:36,640 --> 00:28:41,919
he as he told me he can't really know

00:28:40,159 --> 00:28:44,480
okay what would be sufficient

00:28:41,919 --> 00:28:45,919
for a security team to be able to

00:28:44,480 --> 00:28:48,640
maintain properly

00:28:45,919 --> 00:28:48,640
go packages

00:28:49,600 --> 00:28:51,840
so

00:28:54,640 --> 00:28:59,120
so far that's where we are did not

00:28:56,320 --> 00:29:02,960
receive well i did receive a reply from

00:28:59,120 --> 00:29:06,159
walgree bastian blanc

00:29:02,960 --> 00:29:09,600
that stopping using using this

00:29:06,159 --> 00:29:10,240
would fix it but i'm not sure it would

00:29:09,600 --> 00:29:13,600
actually

00:29:10,240 --> 00:29:27,600
fix it well

00:29:13,600 --> 00:29:29,919
that's where we are for now

00:29:27,600 --> 00:29:31,840
so to be frank i i find the current

00:29:29,919 --> 00:29:35,600
situation a little bit confusing if we

00:29:31,840 --> 00:29:37,760
if you step a little back um the

00:29:35,600 --> 00:29:39,600
issue about supporting security support

00:29:37,760 --> 00:29:40,640
is clearly not specific to the golan

00:29:39,600 --> 00:29:42,880
community

00:29:40,640 --> 00:29:43,679
we also have other language communities

00:29:42,880 --> 00:29:45,840
that

00:29:43,679 --> 00:29:47,760
are pretty much in the same boat most

00:29:45,840 --> 00:29:49,600
notably are the haskell and ocam

00:29:47,760 --> 00:29:51,440
communities which also do statically

00:29:49,600 --> 00:29:54,320
linking and the release team has

00:29:51,440 --> 00:29:55,440
standing trackers for those i wonder can

00:29:54,320 --> 00:29:58,799
anyone report

00:29:55,440 --> 00:30:00,399
why this problem is so prominent for go

00:29:58,799 --> 00:30:03,279
and not for other ones i mean

00:30:00,399 --> 00:30:03,840
you're right we discussed about look

00:30:03,279 --> 00:30:06,399
there are

00:30:03,840 --> 00:30:07,120
issues with the build using there are i

00:30:06,399 --> 00:30:09,120
see on the

00:30:07,120 --> 00:30:10,159
ether pad there's a proposal to use

00:30:09,120 --> 00:30:12,960
built in for foss

00:30:10,159 --> 00:30:13,840
that i see um there was a request look

00:30:12,960 --> 00:30:17,279
we need to

00:30:13,840 --> 00:30:20,080
be able to do uh no a sourceful

00:30:17,279 --> 00:30:22,000
uh rebuild which i guess could be

00:30:20,080 --> 00:30:25,679
attached to spills we need to do some

00:30:22,000 --> 00:30:28,559
changes to duck um but i'm

00:30:25,679 --> 00:30:29,440
kind of getting lost in in the details

00:30:28,559 --> 00:30:32,320
what is the bigger

00:30:29,440 --> 00:30:33,360
biggest picture and why is it so hard

00:30:32,320 --> 00:30:35,200
for golan can

00:30:33,360 --> 00:30:36,399
someone share some thoughts on this

00:30:35,200 --> 00:30:39,520
please

00:30:36,399 --> 00:30:40,320
i do have at least a partial answer to

00:30:39,520 --> 00:30:41,840
this

00:30:40,320 --> 00:30:43,440
because i asked the same question i mean

00:30:41,840 --> 00:30:45,840
this is this is not

00:30:43,440 --> 00:30:47,440
a go problem it's a back problem and

00:30:45,840 --> 00:30:48,880
it's a problem for every statically

00:30:47,440 --> 00:30:52,240
linked language

00:30:48,880 --> 00:30:55,279
and but the answer was that uh

00:30:52,240 --> 00:30:57,519
every go package uh and some of them are

00:30:55,279 --> 00:31:00,399
quite prominent like i mean primitives

00:30:57,519 --> 00:31:02,240
or docker there are important package

00:31:00,399 --> 00:31:05,200
there is an app security update

00:31:02,240 --> 00:31:05,919
stuff like that the thing is there are

00:31:05,200 --> 00:31:09,039
lots

00:31:05,919 --> 00:31:10,320
of good packages there are rest packages

00:31:09,039 --> 00:31:13,279
or camera packages

00:31:10,320 --> 00:31:13,600
there are a lot less of them and they

00:31:13,279 --> 00:31:16,240
are

00:31:13,600 --> 00:31:17,440
not as critical as some group packages

00:31:16,240 --> 00:31:21,840
are

00:31:17,440 --> 00:31:24,799
so it adds i mean the

00:31:21,840 --> 00:31:26,080
wizard go without the sheer amount of

00:31:24,799 --> 00:31:29,039
packages that go

00:31:26,080 --> 00:31:31,039
it's manageable for the team so no one

00:31:29,039 --> 00:31:32,720
said okay well it's annoying but it's

00:31:31,039 --> 00:31:34,960
manageable the problem is

00:31:32,720 --> 00:31:34,960
with

00:31:36,000 --> 00:31:39,840
the problem is with go there are lots

00:31:38,240 --> 00:31:41,200
and lots and lots of dependency i mean

00:31:39,840 --> 00:31:42,799
everyone who has tried to package

00:31:41,200 --> 00:31:46,559
something and go

00:31:42,799 --> 00:31:51,279
as notices that's always a lot of work

00:31:46,559 --> 00:31:54,640
so it's not really a girl problem it's a

00:31:51,279 --> 00:32:01,840
it's a fact that it starts to be

00:31:54,640 --> 00:32:01,840
too much for the security team to change

00:32:18,240 --> 00:32:22,720
i mean i mean at the bottom line clayman

00:32:20,480 --> 00:32:24,720
and i discussed yesterday two days ago

00:32:22,720 --> 00:32:27,360
actually um

00:32:24,720 --> 00:32:29,600
some of these details and i think we

00:32:27,360 --> 00:32:31,840
both agreed that

00:32:29,600 --> 00:32:33,200
this is a topic that needs to have the

00:32:31,840 --> 00:32:35,840
right people involved

00:32:33,200 --> 00:32:37,679
and this is a topic that has a lot of

00:32:35,840 --> 00:32:39,679
angles to look at that would easily

00:32:37,679 --> 00:32:42,080
exceed the scope of this buff

00:32:39,679 --> 00:32:43,760
i would strongly suggest that we come up

00:32:42,080 --> 00:32:45,600
with a follow-up gt session where we're

00:32:43,760 --> 00:32:47,039
discussing that specifically with the

00:32:45,600 --> 00:32:49,120
right people involved i

00:32:47,039 --> 00:32:51,120
don't think this meeting right now is

00:32:49,120 --> 00:32:53,600
the best use of our time to discuss the

00:32:51,120 --> 00:32:56,320
specific details unless you

00:32:53,600 --> 00:32:59,279
have a clear plan or have something to

00:32:56,320 --> 00:32:59,279
present um i

00:33:01,600 --> 00:33:04,880
yeah well i totally agree with that i

00:33:03,679 --> 00:33:07,519
mean that's uh

00:33:04,880 --> 00:33:09,279
the meaning of my email to my cross

00:33:07,519 --> 00:33:11,679
busting for me

00:33:09,279 --> 00:33:13,200
a while ago yeah it was good that you

00:33:11,679 --> 00:33:16,480
brought it up because i didn't even know

00:33:13,200 --> 00:33:18,480
about these issues so whether

00:33:16,480 --> 00:33:20,000
i've heard of it about these from last

00:33:18,480 --> 00:33:22,720
uh like from

00:33:20,000 --> 00:33:24,320
previous release but uh these were put

00:33:22,720 --> 00:33:25,200
in focus so it's good that you have this

00:33:24,320 --> 00:33:26,880
list and

00:33:25,200 --> 00:33:28,960
i think it would be great to even put

00:33:26,880 --> 00:33:31,440
this up on our team websites

00:33:28,960 --> 00:33:34,240
and uh so is there some place for us to

00:33:31,440 --> 00:33:37,600
look at as a to-do list

00:33:34,240 --> 00:33:40,720
for wide exposure and etc uh so it's a

00:33:37,600 --> 00:33:43,919
i sent an email summarizing this issue

00:33:40,720 --> 00:33:46,960
in last february and

00:33:43,919 --> 00:33:47,760
the email has been someone took the

00:33:46,960 --> 00:33:51,200
email to

00:33:47,760 --> 00:33:56,320
create a wiki page

00:33:51,200 --> 00:33:59,919
which i can probably link on the pad

00:33:56,320 --> 00:34:03,600
awesome thank you and

00:33:59,919 --> 00:34:04,320
here it is so yeah so i mean it's not a

00:34:03,600 --> 00:34:06,080
to-do list

00:34:04,320 --> 00:34:08,000
yet because i'm not sure exactly what

00:34:06,080 --> 00:34:10,560
needs to be done it's just as a okay

00:34:08,000 --> 00:34:13,679
summarizing the issue as i understand it

00:34:10,560 --> 00:34:18,639
and it's uh

00:34:13,679 --> 00:34:22,079
let's say a start so the idea is to

00:34:18,639 --> 00:34:26,240
as we were saying we spin up to try to

00:34:22,079 --> 00:34:26,240
talk with the right person and

00:34:26,399 --> 00:34:32,240
so that uh i mean as always in debian i

00:34:30,399 --> 00:34:33,760
mean working in a team is sometimes

00:34:32,240 --> 00:34:35,359
already difficult but working across

00:34:33,760 --> 00:34:37,200
team we know it's uh

00:34:35,359 --> 00:34:39,200
it might be difficult so let's try to

00:34:37,200 --> 00:34:43,599
take opportunities in the comf

00:34:39,200 --> 00:34:48,560
to put the right people together and

00:34:43,599 --> 00:34:52,560
actually transform this um

00:34:48,560 --> 00:34:55,679
this issue that i will

00:34:52,560 --> 00:34:55,679
link the wiki page here

00:34:56,960 --> 00:35:03,920
and transform this into the list because

00:35:00,640 --> 00:35:06,560
yeah i agree that uh it's still a bit

00:35:03,920 --> 00:35:08,480
vague for everyone and i mean i don't

00:35:06,560 --> 00:35:10,240
claim i have a complete understanding of

00:35:08,480 --> 00:35:13,119
the issues i mean i don't

00:35:10,240 --> 00:35:14,160
don't know much about how the archive

00:35:13,119 --> 00:35:18,079
work

00:35:14,160 --> 00:35:20,000
in a dd for less than a year and

00:35:18,079 --> 00:35:21,839
yeah i mean i want to help but i'm not

00:35:20,000 --> 00:35:24,960
sure what i can actually do

00:35:21,839 --> 00:35:28,640
and i think we're quite a few

00:35:24,960 --> 00:35:31,200
with the same issue but yeah

00:35:28,640 --> 00:35:32,880
for sure since i've been organizing the

00:35:31,200 --> 00:35:36,160
both last year i've gained some

00:35:32,880 --> 00:35:39,440
exposure in debian uh to go like

00:35:36,160 --> 00:35:41,680
people consider me oh it's a good person

00:35:39,440 --> 00:35:42,480
and uh well why i don't consider that

00:35:41,680 --> 00:35:45,599
tour

00:35:42,480 --> 00:35:48,320
it means that people came to me

00:35:45,599 --> 00:35:49,520
to ask me oh well when are you going to

00:35:48,320 --> 00:35:54,400
do something about this

00:35:49,520 --> 00:35:54,400
and usually people from the release team

00:35:55,680 --> 00:36:00,160
now this could could you try to then try

00:35:58,560 --> 00:36:02,880
to bring the right people

00:36:00,160 --> 00:36:03,760
and schedule an ad hoc session until the

00:36:02,880 --> 00:36:05,680
end of the week

00:36:03,760 --> 00:36:07,359
to discuss about those things and get

00:36:05,680 --> 00:36:10,480
some extra action

00:36:07,359 --> 00:36:11,040
items instead of just well if you're in

00:36:10,480 --> 00:36:13,760
the

00:36:11,040 --> 00:36:14,720
if you're in the on the go debian go

00:36:13,760 --> 00:36:16,960
mailing list

00:36:14,720 --> 00:36:18,560
uh you probably you you can probably see

00:36:16,960 --> 00:36:21,520
the email i sent

00:36:18,560 --> 00:36:21,520
a couple hours ago

00:36:21,839 --> 00:36:25,200
which was sent to the release team while

00:36:24,720 --> 00:36:27,680
the

00:36:25,200 --> 00:36:30,000
debian release mailing list and the team

00:36:27,680 --> 00:36:33,040
at security.

00:36:30,000 --> 00:36:34,000
so that's the idea let's uh let's try to

00:36:33,040 --> 00:36:38,880
set up this session

00:36:34,000 --> 00:36:42,400
and if and when

00:36:38,880 --> 00:36:42,720
hopefully one uh i have uh people saying

00:36:42,400 --> 00:36:45,280
uh

00:36:42,720 --> 00:36:47,599
from this team saying hey yeah uh i'm

00:36:45,280 --> 00:36:51,040
okay to

00:36:47,599 --> 00:36:54,240
let's do that well i

00:36:51,040 --> 00:36:55,200
i will of course report back on the list

00:36:54,240 --> 00:36:58,000
and everywhere i think

00:36:55,200 --> 00:36:59,040
well let's set up a agency session and

00:36:58,000 --> 00:37:04,160
something and

00:36:59,040 --> 00:37:04,160
well people please join i can't do that

00:37:06,839 --> 00:37:09,839
alone

00:37:16,720 --> 00:37:19,839
yeah good to see you join us at hinting

00:37:18,640 --> 00:37:23,200
if you have any uh

00:37:19,839 --> 00:37:25,280
feedback uh um on the this issue we

00:37:23,200 --> 00:37:27,920
discussed or anything uh please speak up

00:37:25,280 --> 00:37:29,200
uh uh also i think we all have only

00:37:27,920 --> 00:37:32,320
eight minutes left

00:37:29,200 --> 00:37:35,599
is it the case it's uh is it

00:37:32,320 --> 00:37:36,400
do we end it yeah yeah the buff is 45

00:37:35,599 --> 00:37:38,640
minutes but

00:37:36,400 --> 00:37:40,079
i was expecting uh this talking about

00:37:38,640 --> 00:37:43,040
this taking much time and

00:37:40,079 --> 00:37:44,480
yes i suggest we move on because well we

00:37:43,040 --> 00:37:48,480
probably

00:37:44,480 --> 00:37:48,480
exhausted the project from now

00:37:49,680 --> 00:37:57,599
so the next uh items

00:37:53,200 --> 00:38:01,359
we had last year what let's go

00:37:57,599 --> 00:38:03,599
quickly on them so there was a

00:38:01,359 --> 00:38:05,599
go library transition rebuild issue that

00:38:03,599 --> 00:38:08,160
was evolved and

00:38:05,599 --> 00:38:09,760
so yeah the issue was that there were

00:38:08,160 --> 00:38:12,800
some new option releases

00:38:09,760 --> 00:38:16,839
that were released and uploaded to sid

00:38:12,800 --> 00:38:19,760
during the stream during the freeze and

00:38:16,839 --> 00:38:22,079
the of course that

00:38:19,760 --> 00:38:23,440
is a problem because if then if they

00:38:22,079 --> 00:38:26,640
don't

00:38:23,440 --> 00:38:29,680
migrate well they will

00:38:26,640 --> 00:38:30,720
migrate if we fix another package that

00:38:29,680 --> 00:38:34,079
depend on them

00:38:30,720 --> 00:38:36,560
so we absolutely need to refrain doing

00:38:34,079 --> 00:38:38,160
new observations during the freezes new

00:38:36,560 --> 00:38:39,520
absolutely should be done only on

00:38:38,160 --> 00:38:41,200
experimental

00:38:39,520 --> 00:38:43,760
uh as long as the phrase is going

00:38:41,200 --> 00:38:46,640
otherwise it's a nightmare for everyone

00:38:43,760 --> 00:38:48,880
uh changing last three days i had to

00:38:46,640 --> 00:38:49,520
re-upload a lot of package with uh ugly

00:38:48,880 --> 00:38:52,560
versions

00:38:49,520 --> 00:38:54,480
like uh something something something

00:38:52,560 --> 00:38:56,320
uh dash really something something

00:38:54,480 --> 00:38:58,640
something uh yeah let's try to not do

00:38:56,320 --> 00:39:02,079
that again this release

00:38:58,640 --> 00:39:05,200
and the problem is we of course we can't

00:39:02,079 --> 00:39:07,920
prevent people to make mistakes but

00:39:05,200 --> 00:39:09,280
we need to maybe try to communicate more

00:39:07,920 --> 00:39:11,599
about

00:39:09,280 --> 00:39:14,800
all this so that this mistake is not

00:39:11,599 --> 00:39:18,000
done and i

00:39:14,800 --> 00:39:21,119
i don't know uh if there is a way to

00:39:18,000 --> 00:39:21,920
maybe prevent or at least not prevent

00:39:21,119 --> 00:39:25,359
that but at least

00:39:21,920 --> 00:39:25,760
uh make people aware that they are doing

00:39:25,359 --> 00:39:28,079
that

00:39:25,760 --> 00:39:29,440
uh maybe lynchian czech or autopika g

00:39:28,079 --> 00:39:43,839
test check

00:39:29,440 --> 00:39:43,839
if anyone has idea it would be great

00:39:54,839 --> 00:39:59,440
hi

00:39:56,720 --> 00:39:59,839
i think i heard some starving talking

00:39:59,440 --> 00:40:02,880
but

00:39:59,839 --> 00:40:05,119
i can't hear anymore

00:40:02,880 --> 00:40:05,119
uh

00:40:06,560 --> 00:40:13,200
hi um uh came here

00:40:10,480 --> 00:40:14,480
yeah yeah yeah it's okay okay okay so

00:40:13,200 --> 00:40:18,000
the problem of the

00:40:14,480 --> 00:40:20,319
during the freeze time is because we uh

00:40:18,000 --> 00:40:21,040
uh i think you do you have to talk to

00:40:20,319 --> 00:40:25,119
the

00:40:21,040 --> 00:40:28,960
issue about the uh using issue

00:40:25,119 --> 00:40:32,560
so this is the same problem because

00:40:28,960 --> 00:40:36,240
the risk team will

00:40:32,560 --> 00:40:39,920
uh a package can't migrate to

00:40:36,240 --> 00:40:43,119
testing because it has a bluetooth using

00:40:39,920 --> 00:40:44,480
field and it needs to wait all the

00:40:43,119 --> 00:40:47,920
packages

00:40:44,480 --> 00:40:51,040
which the build using refers so

00:40:47,920 --> 00:40:54,319
right if one of the

00:40:51,040 --> 00:40:55,119
library is bumped against uh during the

00:40:54,319 --> 00:40:58,800
free time

00:40:55,119 --> 00:41:02,240
sen and the race team is not happy to

00:40:58,800 --> 00:41:05,680
uh uh set a allowance for it

00:41:02,240 --> 00:41:08,079
so all the reverse dependencies will be

00:41:05,680 --> 00:41:08,079
blocked

00:41:08,400 --> 00:41:14,240
so this is a

00:41:11,680 --> 00:41:15,680
major problem why we can't allow people

00:41:14,240 --> 00:41:18,839
to

00:41:15,680 --> 00:41:20,560
uploading any packages not intending for

00:41:18,839 --> 00:41:24,000
the

00:41:20,560 --> 00:41:24,000
testing during the freeze time

00:41:26,079 --> 00:41:30,000
yeah i agree it's kind of the same

00:41:27,839 --> 00:41:30,720
problem as well it's not the same

00:41:30,000 --> 00:41:33,599
problem as

00:41:30,720 --> 00:41:34,720
all the whole build using issue that it

00:41:33,599 --> 00:41:38,240
has connections and

00:41:34,720 --> 00:41:41,599
uh i mean fixing the bill choosing

00:41:38,240 --> 00:41:44,240
his age will probably help

00:41:41,599 --> 00:41:44,720
somehow but yes it's still uh we still

00:41:44,240 --> 00:41:47,920
need to

00:41:44,720 --> 00:41:50,560
avoid those unwanted potential

00:41:47,920 --> 00:41:50,560
transitions

00:41:51,040 --> 00:41:54,960
so maybe an experience report um while

00:41:53,520 --> 00:41:57,440
working on

00:41:54,960 --> 00:41:58,000
the dependencies that i had to update

00:41:57,440 --> 00:42:00,880
for

00:41:58,000 --> 00:42:01,839
apartment two i was using the wrath tool

00:42:00,880 --> 00:42:05,040
the ri

00:42:01,839 --> 00:42:07,520
tt tool a lot and i was surprised that

00:42:05,040 --> 00:42:10,000
some of the different

00:42:07,520 --> 00:42:10,720
dependencies that i had to upload were

00:42:10,000 --> 00:42:13,280
as much as

00:42:10,720 --> 00:42:15,040
50 rebuilds that were necessary i went

00:42:13,280 --> 00:42:16,720
through all of that and

00:42:15,040 --> 00:42:19,280
stage them in experimental and it's

00:42:16,720 --> 00:42:22,319
totally doable even on

00:42:19,280 --> 00:42:24,960
a laptop but it is tedious and it's

00:42:22,319 --> 00:42:27,599
something that i think could benefit a

00:42:24,960 --> 00:42:30,079
lot from automation maybe that

00:42:27,599 --> 00:42:30,640
could help people making more informed

00:42:30,079 --> 00:42:33,520
decisions

00:42:30,640 --> 00:42:35,200
whether um a new upstream upgrade or

00:42:33,520 --> 00:42:36,319
whether an update of a goaling package

00:42:35,200 --> 00:42:38,640
would be

00:42:36,319 --> 00:42:40,240
appropriate or not appropriate um i see

00:42:38,640 --> 00:42:43,520
there was an item on the

00:42:40,240 --> 00:42:45,440
agenda on the bot agenda about um maybe

00:42:43,520 --> 00:42:48,079
we can use some salsa ci

00:42:45,440 --> 00:42:49,599
um pipelines uh to assist with these

00:42:48,079 --> 00:42:50,319
rebuilds so that you don't have to run

00:42:49,599 --> 00:42:53,440
rap

00:42:50,319 --> 00:42:54,319
on your local laptop um shenzhen do you

00:42:53,440 --> 00:42:57,040
think that would be

00:42:54,319 --> 00:42:59,839
an effective means to help with that

00:42:57,040 --> 00:42:59,839
particular issue

00:43:05,920 --> 00:43:10,000
some days ago maybe months ago some

00:43:09,119 --> 00:43:13,680
people

00:43:10,000 --> 00:43:15,040
proposed on the dependable male needs to

00:43:13,680 --> 00:43:18,079
set up a right as a

00:43:15,040 --> 00:43:21,359
service but i don't think

00:43:18,079 --> 00:43:24,839
someone is working on it it's a

00:43:21,359 --> 00:43:26,000
it's better than the southern ci because

00:43:24,839 --> 00:43:29,440
it

00:43:26,000 --> 00:43:32,960
we reviewed all the dependencies

00:43:29,440 --> 00:43:36,560
is not um i don't think

00:43:32,960 --> 00:43:40,240
uh someone say i can rebuild uh

00:43:36,560 --> 00:43:42,560
the reverse dependencies because it

00:43:40,240 --> 00:43:45,440
takes so long and uh

00:43:42,560 --> 00:43:47,440
i think it's better uh another service

00:43:45,440 --> 00:43:50,880
and

00:43:47,440 --> 00:43:52,400
and i think so the person who proposed

00:43:50,880 --> 00:43:54,720
the services

00:43:52,400 --> 00:43:57,760
from the python team because they also

00:43:54,720 --> 00:43:57,760
meet the same problem

00:43:58,960 --> 00:44:02,400
yeah i think many many teams face the

00:44:00,960 --> 00:44:04,480
same problem and

00:44:02,400 --> 00:44:05,440
one another issue about salsa ci is

00:44:04,480 --> 00:44:07,599
because

00:44:05,440 --> 00:44:09,680
some people's workflow usually people

00:44:07,599 --> 00:44:12,880
first upload and then get push

00:44:09,680 --> 00:44:13,920
their chains so sometimes people do that

00:44:12,880 --> 00:44:17,200
and

00:44:13,920 --> 00:44:17,200
yeah i know it's

00:44:17,920 --> 00:44:23,839
not the best thing but some people do

00:44:19,839 --> 00:44:23,839
that anyway

00:44:24,240 --> 00:44:30,160
well we might want to agree as a team to

00:44:27,040 --> 00:44:33,359
not do that in our team

00:44:30,160 --> 00:44:36,960
that would be good and yeah maybe

00:44:33,359 --> 00:44:39,280
if we could use a ci to at least check

00:44:36,960 --> 00:44:41,920
if there are issues uh i mean even if

00:44:39,280 --> 00:44:45,060
it's only x86

00:44:41,920 --> 00:44:46,800
that would be already something i guess

00:44:45,060 --> 00:44:49,119
[Laughter]

00:44:46,800 --> 00:44:50,240
using rat as a service if it happens

00:44:49,119 --> 00:44:53,680
someday of course

00:44:50,240 --> 00:44:55,200
it could be great but i'm not seeing

00:44:53,680 --> 00:44:58,079
that happening before

00:44:55,200 --> 00:44:59,200
next release well i mean let's be

00:44:58,079 --> 00:45:03,119
realistic

00:44:59,200 --> 00:45:05,760
but uh yeah maybe we could maybe someone

00:45:03,119 --> 00:45:07,280
would be open to start a discussion with

00:45:05,760 --> 00:45:10,000
a buy something for instance

00:45:07,280 --> 00:45:11,520
so that okay well let's try to find a

00:45:10,000 --> 00:45:14,640
solution for that uh

00:45:11,520 --> 00:45:18,480
since we have the same problem let's

00:45:14,640 --> 00:45:20,640
try to see if we can fix for

00:45:18,480 --> 00:45:22,160
both bison and go and maybe probably

00:45:20,640 --> 00:45:24,640
others as well

00:45:22,160 --> 00:45:27,280
yeah in the ruby team we have our own

00:45:24,640 --> 00:45:29,839
tool that we have to rebuild everything

00:45:27,280 --> 00:45:31,040
uh when we are uploading a package it's

00:45:29,839 --> 00:45:33,280
kind of the same thing we

00:45:31,040 --> 00:45:34,880
rebuild and run we run out of package

00:45:33,280 --> 00:45:37,119
tests so

00:45:34,880 --> 00:45:39,520
i think we should join efforts because

00:45:37,119 --> 00:45:39,520
it's a

00:45:39,760 --> 00:45:43,760
it's a problem across teams now yeah i

00:45:42,079 --> 00:45:46,079
mean if there's already a tool for ruby

00:45:43,760 --> 00:45:50,079
maybe it could be modified to be

00:45:46,079 --> 00:45:52,640
to do the same for patent and go yeah

00:45:50,079 --> 00:45:53,520
um so we're running out of time uh i

00:45:52,640 --> 00:45:55,760
just have

00:45:53,520 --> 00:45:57,599
i just want to quickly uh point to one

00:45:55,760 --> 00:45:59,599
thing that i want to talk about but we

00:45:57,599 --> 00:46:01,599
can take this to iris as well uh there's

00:45:59,599 --> 00:46:03,599
there are two packages called golang xtx

00:46:01,599 --> 00:46:04,480
and golang golang xtx which i think is

00:46:03,599 --> 00:46:07,119
the same thing

00:46:04,480 --> 00:46:08,720
i'm not sure why is there a split uh

00:46:07,119 --> 00:46:09,839
anthony i think you packaged golden

00:46:08,720 --> 00:46:12,240
golem x text

00:46:09,839 --> 00:46:13,440
even though golang xtx was available in

00:46:12,240 --> 00:46:16,480
the archive

00:46:13,440 --> 00:46:17,280
um oh sorry i i renamed the package to

00:46:16,480 --> 00:46:20,480
fit the

00:46:17,280 --> 00:46:22,800
the naming convent sorry um it's

00:46:20,480 --> 00:46:24,319
the the old one is supposed to be

00:46:22,800 --> 00:46:26,880
removed

00:46:24,319 --> 00:46:27,599
uh okay so we essentially want to file

00:46:26,880 --> 00:46:30,880
an rm

00:46:27,599 --> 00:46:32,560
right for golden x text uh i i

00:46:30,880 --> 00:46:34,400
think so i forgot if i did that or not

00:46:32,560 --> 00:46:38,800
sorry

00:46:34,400 --> 00:46:39,760
um some of the very old gold packages do

00:46:38,800 --> 00:46:42,880
not follow the

00:46:39,760 --> 00:46:44,079
the uh the naming convention and so i

00:46:42,880 --> 00:46:46,160
was

00:46:44,079 --> 00:46:48,720
change i changed some of them but then

00:46:46,160 --> 00:46:50,960
 found it to be a lot of work

00:46:48,720 --> 00:46:52,720
and so i think it's something to discuss

00:46:50,960 --> 00:46:53,359
whether we want to do that in the future

00:46:52,720 --> 00:46:56,640
but i think

00:46:53,359 --> 00:46:59,280
we move that to irc um

00:46:56,640 --> 00:47:01,359
well we are out of time we're already

00:46:59,280 --> 00:47:04,079
moving

00:47:01,359 --> 00:47:05,760
after the time so yes well yeah thank

00:47:04,079 --> 00:47:09,680
everyone for attending

00:47:05,760 --> 00:47:11,680
thanks a lot lina for taking notes and

00:47:09,680 --> 00:47:14,240
yeah well let's continue discussion on

00:47:11,680 --> 00:47:16,240
ic or mailing this and stuff like that

00:47:14,240 --> 00:47:18,800
yeah or maybe we could have more uh uh

00:47:16,240 --> 00:47:20,960
like a gtc meeting after that conf and i

00:47:18,800 --> 00:47:23,599
think it's good to meet uh in pers like

00:47:20,960 --> 00:47:24,079
face-to-face more often over the years i

00:47:23,599 --> 00:47:26,079
mean

00:47:24,079 --> 00:47:27,920
throughout the year well yeah that would

00:47:26,079 --> 00:47:29,440
be great yeah please uh propose that on

00:47:27,920 --> 00:47:31,440
the mailing list and we'll try to stop

00:47:29,440 --> 00:47:34,559
the time that fits everyone

00:47:31,440 --> 00:47:38,160
yeah well thanks

00:47:34,559 --> 00:47:49,359
everyone see ya

00:47:38,160 --> 00:47:49,359

YouTube URL: https://www.youtube.com/watch?v=uECKN7xTri8


