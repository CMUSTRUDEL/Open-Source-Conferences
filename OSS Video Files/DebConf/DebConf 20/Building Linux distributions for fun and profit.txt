Title: Building Linux distributions for fun and profit
Publication date: 2020-10-23
Playlist: DebConf 20
Description: 
	by Margarita Manterola

At: DebConf20
https://debconf20.debconf.org/talks/70-building-linux-distributions-for-fun-and-profit/

Marga has been working in the Linux industry for over 15 years. On top of being a Debian Developer, she was the co-head of IT of a company in Argentina that migrated from Windows to Debian, she was an engineer in the team that maintained the internal Linux distribution at Google, and she's now working on Flatcar Container Linux (a successor to CoreOS), which is a container-optimized Linux distribution.

Each of these roles has brought on different challenges, and has meant applying different approaches to getting the results that most closely reflects user's expectations.

This talk will explore these challenges, discuss how some approaches can serve on one problem-domain but not another and look into the future to try to figure out the relevance of the OS in the coming years.

Room: Talks
Scheduled start: 2020-08-24 10:00:00
Captions: 
	00:00:08,160 --> 00:00:11,040
hi

00:00:08,960 --> 00:00:13,200
welcome to building linux distributions

00:00:11,040 --> 00:00:15,360
for fan and profit

00:00:13,200 --> 00:00:16,480
i'm super excited about giving this talk

00:00:15,360 --> 00:00:18,080
at devconf today

00:00:16,480 --> 00:00:21,039
i wish we could all be together in

00:00:18,080 --> 00:00:22,800
person but 2020 is what it is so here we

00:00:21,039 --> 00:00:24,880
are

00:00:22,800 --> 00:00:26,480
many of you know me but this talk will

00:00:24,880 --> 00:00:30,320
go out into the world so

00:00:26,480 --> 00:00:32,320
if you haven't met before hi i'm marga

00:00:30,320 --> 00:00:34,719
i'm a deviant developer and a software

00:00:32,320 --> 00:00:36,800
engineer working at kinfolk which is a

00:00:34,719 --> 00:00:40,320
small startup based in berlin

00:00:36,800 --> 00:00:42,000
focusing on linux and kubernetes

00:00:40,320 --> 00:00:44,399
this talk is a collection of my

00:00:42,000 --> 00:00:46,800
experiences working with linux for the

00:00:44,399 --> 00:00:48,640
past 20 years

00:00:46,800 --> 00:00:49,840
i'll first tell you about how my career

00:00:48,640 --> 00:00:52,079
with linux developed

00:00:49,840 --> 00:00:54,239
working at small and big companies as

00:00:52,079 --> 00:00:55,360
well as being a deviant developer for 15

00:00:54,239 --> 00:00:57,600
years

00:00:55,360 --> 00:00:59,600
then i will try to summarize the lessons

00:00:57,600 --> 00:01:01,920
i've learned throughout this time

00:00:59,600 --> 00:01:04,000
my experiences and my opinions are my

00:01:01,920 --> 00:01:05,600
own but i'm hoping we can all learn from

00:01:04,000 --> 00:01:08,960
them

00:01:05,600 --> 00:01:11,520
so let's start at the beginning

00:01:08,960 --> 00:01:13,920
i grew up in buenos aires argentina

00:01:11,520 --> 00:01:15,600
where i studied electronic engineering

00:01:13,920 --> 00:01:17,119
if you haven't heard of this degree you

00:01:15,600 --> 00:01:20,400
can think of it as a mix between

00:01:17,119 --> 00:01:22,400
electrical and computer engineering

00:01:20,400 --> 00:01:24,880
professionally though i always worked in

00:01:22,400 --> 00:01:27,280
it i started as an i.t support

00:01:24,880 --> 00:01:29,439
technician and then move on to software

00:01:27,280 --> 00:01:32,240
engineering system administration

00:01:29,439 --> 00:01:34,240
site reliability engineering i installed

00:01:32,240 --> 00:01:35,360
my first linux distribution in the year

00:01:34,240 --> 00:01:38,079
00:01:35,360 --> 00:01:39,840
this was a mandrake installation if you

00:01:38,079 --> 00:01:41,840
haven't heard of vandraka before that's

00:01:39,840 --> 00:01:42,640
okay it hasn't been around for a long

00:01:41,840 --> 00:01:44,640
time

00:01:42,640 --> 00:01:46,720
but mandrake wasn't for me so a few

00:01:44,640 --> 00:01:48,960
months later it got replaced by a shiny

00:01:46,720 --> 00:01:52,079
new debian potato installation

00:01:48,960 --> 00:01:53,200
and i've stuck with devin since then for

00:01:52,079 --> 00:01:55,119
a couple of years

00:01:53,200 --> 00:01:57,040
i worked as a java developer for a

00:01:55,119 --> 00:01:59,040
consulting company

00:01:57,040 --> 00:02:01,119
as i was running linux on all of my home

00:01:59,040 --> 00:02:02,159
computers i managed to convince my boss

00:02:01,119 --> 00:02:03,920
that

00:02:02,159 --> 00:02:06,719
i should also run linux on my work

00:02:03,920 --> 00:02:08,160
computer but i was still working mostly

00:02:06,719 --> 00:02:11,200
with proprietary software

00:02:08,160 --> 00:02:13,840
so that wasn't making me happy so

00:02:11,200 --> 00:02:16,400
in 2003 i quit this show and joined the

00:02:13,840 --> 00:02:19,200
it department at my family's company

00:02:16,400 --> 00:02:21,280
this was my first job doing linux at

00:02:19,200 --> 00:02:23,360
this company we were deploying linux

00:02:21,280 --> 00:02:26,000
installations to all users

00:02:23,360 --> 00:02:28,640
replacing legacy proprietary software

00:02:26,000 --> 00:02:30,560
with open source software

00:02:28,640 --> 00:02:33,360
this company was pretty tight on money

00:02:30,560 --> 00:02:34,800
so we were the paragon of scrappy

00:02:33,360 --> 00:02:37,360
the computers that we deployed on the

00:02:34,800 --> 00:02:40,160
network were mostly thin clients

00:02:37,360 --> 00:02:42,720
these were old used machines that would

00:02:40,160 --> 00:02:45,040
be considered useless by most people

00:02:42,720 --> 00:02:46,560
but we gave them a new life by running a

00:02:45,040 --> 00:02:48,480
very small linux os

00:02:46,560 --> 00:02:50,480
on them that would just control mouse

00:02:48,480 --> 00:02:53,120
keyboard video and network

00:02:50,480 --> 00:02:54,080
and run an x server and this x server

00:02:53,120 --> 00:02:57,120
would then connect

00:02:54,080 --> 00:02:59,519
to a more powerful machine that was

00:02:57,120 --> 00:03:01,599
running all the x client applications

00:02:59,519 --> 00:03:04,080
this way we only needed one powerful

00:03:01,599 --> 00:03:06,400
machine per 10 or so think lines

00:03:04,080 --> 00:03:08,080
this allowed us to deploy computers to

00:03:06,400 --> 00:03:10,159
many more users that would have been

00:03:08,080 --> 00:03:13,360
possible with standalone workstations

00:03:10,159 --> 00:03:13,360
given our tight budget

00:03:13,760 --> 00:03:17,519
an interesting fact is that some of the

00:03:15,920 --> 00:03:18,720
users that were getting these thing

00:03:17,519 --> 00:03:21,200
clients

00:03:18,720 --> 00:03:23,440
hadn't had any workstation before in

00:03:21,200 --> 00:03:26,319
fact i recall one person telling me

00:03:23,440 --> 00:03:27,840
with pride that they had never used a

00:03:26,319 --> 00:03:31,680
computer before

00:03:27,840 --> 00:03:32,000
like at all the upside of this was that

00:03:31,680 --> 00:03:33,920
people

00:03:32,000 --> 00:03:35,680
didn't care about linux or windows we

00:03:33,920 --> 00:03:38,400
taught them how to use the system

00:03:35,680 --> 00:03:39,599
to do what they needed and that was it

00:03:38,400 --> 00:03:41,680
the downside

00:03:39,599 --> 00:03:44,080
was that when something went wrong the

00:03:41,680 --> 00:03:46,159
reports were usually not very helpful

00:03:44,080 --> 00:03:47,519
one typical complaint was it doesn't

00:03:46,159 --> 00:03:50,480
give me access

00:03:47,519 --> 00:03:52,159
and this could mean anything maybe the

00:03:50,480 --> 00:03:55,040
keyboard or mouse weren't working

00:03:52,159 --> 00:03:57,200
maybe the network was down and so the

00:03:55,040 --> 00:03:58,720
connection to the x client failed

00:03:57,200 --> 00:04:00,640
maybe the login screen told them that

00:03:58,720 --> 00:04:03,439
their password was wrong

00:04:00,640 --> 00:04:05,040
so really it could be anything anyway we

00:04:03,439 --> 00:04:05,760
kept deploying more and more thin

00:04:05,040 --> 00:04:07,760
clients

00:04:05,760 --> 00:04:09,519
and some standalone workstations as well

00:04:07,760 --> 00:04:10,560
when the users needed more processing

00:04:09,519 --> 00:04:14,080
power

00:04:10,560 --> 00:04:14,879
and we ended up deploying 300 to 350

00:04:14,080 --> 00:04:17,840
computers

00:04:14,879 --> 00:04:20,160
and at the time i felt like a lot to me

00:04:17,840 --> 00:04:23,040
i was really proud of how i was adding

00:04:20,160 --> 00:04:25,520
more linux users to the world

00:04:23,040 --> 00:04:27,199
i didn't feel like we had our own distro

00:04:25,520 --> 00:04:29,520
we were just using debian

00:04:27,199 --> 00:04:31,600
but looking back we basically had all

00:04:29,520 --> 00:04:33,840
the traits of the debian derivative

00:04:31,600 --> 00:04:35,840
except for a cool name we had our own

00:04:33,840 --> 00:04:39,040
internal repo where we kept

00:04:35,840 --> 00:04:40,880
a few packages four packages that had

00:04:39,040 --> 00:04:42,080
patches applied that were not in debian

00:04:40,880 --> 00:04:44,639
or packages that were not

00:04:42,080 --> 00:04:46,639
in debian at all or maybe even packages

00:04:44,639 --> 00:04:50,000
that we had developed specially for our

00:04:46,639 --> 00:04:51,840
needs and were not relevant for debian

00:04:50,000 --> 00:04:54,479
we also maintain our configuration in

00:04:51,840 --> 00:04:55,440
puppet keeping all the customizations in

00:04:54,479 --> 00:04:58,479
sync throughout the

00:04:55,440 --> 00:05:00,479
fleet so yeah we basically had all the

00:04:58,479 --> 00:05:03,039
traits of a deviant derivative

00:05:00,479 --> 00:05:04,400
and it's a bit of a philosophical

00:05:03,039 --> 00:05:07,039
question don't you think

00:05:04,400 --> 00:05:08,000
uh where does uh customized deviant

00:05:07,039 --> 00:05:10,880
deployment end

00:05:08,000 --> 00:05:12,560
and deviant derivative begin anyway it's

00:05:10,880 --> 00:05:14,240
not really the subject of this talk so

00:05:12,560 --> 00:05:16,400
let's move on

00:05:14,240 --> 00:05:18,400
i've been talking about deviant a lot

00:05:16,400 --> 00:05:18,800
and i mentioned i'm a deviant developer

00:05:18,400 --> 00:05:22,000
so

00:05:18,800 --> 00:05:24,160
how did i get there i started using

00:05:22,000 --> 00:05:26,080
debian at the end of the year 2000.

00:05:24,160 --> 00:05:27,600
with time i became more and more

00:05:26,080 --> 00:05:30,639
involved with the distro

00:05:27,600 --> 00:05:33,440
by 2003 i consider myself a debian

00:05:30,639 --> 00:05:35,600
back reporter i took great pride in

00:05:33,440 --> 00:05:37,199
creating good back reports with clear

00:05:35,600 --> 00:05:40,800
reproduction instructions

00:05:37,199 --> 00:05:42,720
log and so on that was my way of

00:05:40,800 --> 00:05:45,280
contributing back to debian and i was

00:05:42,720 --> 00:05:47,120
happy with that i didn't want more

00:05:45,280 --> 00:05:49,199
but then in 2004 a couple of

00:05:47,120 --> 00:05:51,440
life-changing events happen

00:05:49,199 --> 00:05:53,280
the first one is that i got married and

00:05:51,440 --> 00:05:55,199
those of you who are recurring devcon

00:05:53,280 --> 00:05:57,520
fatigues know that maxie and i have gone

00:05:55,199 --> 00:06:00,160
through our debian journey together

00:05:57,520 --> 00:06:01,199
and then we went to debconfour for our

00:06:00,160 --> 00:06:02,960
honeymoon

00:06:01,199 --> 00:06:04,840
this was definitely a life-changing

00:06:02,960 --> 00:06:06,160
experience maybe even more than getting

00:06:04,840 --> 00:06:08,560
married

00:06:06,160 --> 00:06:10,960
up until webcom4 i saw deviant

00:06:08,560 --> 00:06:12,319
developers as some sort of elite geeks

00:06:10,960 --> 00:06:16,080
that were kind of super

00:06:12,319 --> 00:06:18,080
human completely out of my league

00:06:16,080 --> 00:06:20,240
i felt that maintaining packages was

00:06:18,080 --> 00:06:22,319
such a difficult and complicated task

00:06:20,240 --> 00:06:24,800
that i couldn't be able to do it

00:06:22,319 --> 00:06:26,960
i was already sending patches to bugs

00:06:24,800 --> 00:06:29,840
but i felt that that was the maximum of

00:06:26,960 --> 00:06:32,319
what i could do for debian

00:06:29,840 --> 00:06:34,400
but then i met all these awesome people

00:06:32,319 --> 00:06:36,319
they made me feel welcome they valued my

00:06:34,400 --> 00:06:37,840
input they explained how things were not

00:06:36,319 --> 00:06:40,639
so complicated

00:06:37,840 --> 00:06:41,520
they became my friends and so when i

00:06:40,639 --> 00:06:43,680
came home

00:06:41,520 --> 00:06:45,759
i was a different person i wanted to

00:06:43,680 --> 00:06:47,280
become a deviant developer i no longer

00:06:45,759 --> 00:06:49,280
thought that maintaining packages was

00:06:47,280 --> 00:06:50,880
reserved for elite hackers

00:06:49,280 --> 00:06:52,319
so a few months later i started

00:06:50,880 --> 00:06:54,080
maintaining my first package

00:06:52,319 --> 00:06:56,080
and the following year i officially

00:06:54,080 --> 00:06:59,120
became a deviant developer

00:06:56,080 --> 00:07:01,039
of course i didn't do this on my own the

00:06:59,120 --> 00:07:02,800
debian women project in particular

00:07:01,039 --> 00:07:04,400
helped me a lot at the beginning

00:07:02,800 --> 00:07:05,840
the people in that group made me feel

00:07:04,400 --> 00:07:07,919
that i belonged

00:07:05,840 --> 00:07:09,440
encouraging me to keep learning keep

00:07:07,919 --> 00:07:10,560
growing and getting more and more

00:07:09,440 --> 00:07:12,479
involved

00:07:10,560 --> 00:07:14,479
once i was a little bit more subtle i

00:07:12,479 --> 00:07:16,880
helped others get started as well which

00:07:14,479 --> 00:07:18,400
was also very satisfying

00:07:16,880 --> 00:07:20,400
the packages that i maintained for

00:07:18,400 --> 00:07:21,919
debian have mostly been around things i

00:07:20,400 --> 00:07:23,919
cared about or needed

00:07:21,919 --> 00:07:26,000
i started with some electronics related

00:07:23,919 --> 00:07:29,199
packages that i needed for university

00:07:26,000 --> 00:07:31,759
and either were not available or offered

00:07:29,199 --> 00:07:33,599
later on i picked up different stuff as

00:07:31,759 --> 00:07:34,560
i needed it like the cinema desktop

00:07:33,599 --> 00:07:35,919
environment

00:07:34,560 --> 00:07:38,400
which was the default desktop

00:07:35,919 --> 00:07:40,240
environment at google but let's not jump

00:07:38,400 --> 00:07:41,440
ahead i'll tell you more about that in a

00:07:40,240 --> 00:07:43,360
bit

00:07:41,440 --> 00:07:44,960
throughout the years i've done many

00:07:43,360 --> 00:07:47,680
different things for debian

00:07:44,960 --> 00:07:48,240
in particular i enjoy fixing bugs so for

00:07:47,680 --> 00:07:50,319
a while

00:07:48,240 --> 00:07:52,639
i spent significant amount of my free

00:07:50,319 --> 00:07:55,840
time fixing release critical bugs

00:07:52,639 --> 00:07:57,840
on other people's packages i also helped

00:07:55,840 --> 00:07:59,840
organize a few

00:07:57,840 --> 00:08:02,639
in particular i was part of the main

00:07:59,840 --> 00:08:04,160
orga team for devconf 8 in argentina and

00:08:02,639 --> 00:08:06,879
devcon 15

00:08:04,160 --> 00:08:08,560
in germany and i'm currently the chair

00:08:06,879 --> 00:08:10,879
of the technical committee which

00:08:08,560 --> 00:08:12,479
sometimes i find hard to believe

00:08:10,879 --> 00:08:14,479
i think back to those days in puerto

00:08:12,479 --> 00:08:15,280
alegre when i felt like i was the only

00:08:14,479 --> 00:08:17,520
human being

00:08:15,280 --> 00:08:20,879
among a bunch of superheroes and it's

00:08:17,520 --> 00:08:23,599
amazing how my journey has been

00:08:20,879 --> 00:08:26,319
anyway back to my professional life i

00:08:23,599 --> 00:08:28,000
work at my family's company until 2012

00:08:26,319 --> 00:08:29,840
when i moved to munich to work for a

00:08:28,000 --> 00:08:31,520
team of the team that maintains the

00:08:29,840 --> 00:08:33,440
internal linux distribution used at

00:08:31,520 --> 00:08:35,599
google

00:08:33,440 --> 00:08:37,360
there's actually more than one internal

00:08:35,599 --> 00:08:39,760
linux distribution at google

00:08:37,360 --> 00:08:40,479
my team was in charge of the one used by

00:08:39,760 --> 00:08:43,440
humans

00:08:40,479 --> 00:08:44,399
in their workstations not by contagious

00:08:43,440 --> 00:08:47,760
applications

00:08:44,399 --> 00:08:50,000
running in servers in the data centers

00:08:47,760 --> 00:08:51,360
obviously moving to google was a huge

00:08:50,000 --> 00:08:53,440
change

00:08:51,360 --> 00:08:55,040
one thing that was very different was

00:08:53,440 --> 00:08:57,600
that new hardware was not

00:08:55,040 --> 00:08:59,839
an issue all users got beefy

00:08:57,600 --> 00:09:01,839
workstations and they could even refresh

00:08:59,839 --> 00:09:04,720
them after a few years

00:09:01,839 --> 00:09:05,920
just because the hardware was old took

00:09:04,720 --> 00:09:09,440
me a while to get

00:09:05,920 --> 00:09:11,200
over the shock from this to be fair

00:09:09,440 --> 00:09:13,440
lots of googlers are conscious about

00:09:11,200 --> 00:09:15,680
squeezed and won't really refresh their

00:09:13,440 --> 00:09:17,600
hardware until they actually need it

00:09:15,680 --> 00:09:19,600
but still the fact that people could

00:09:17,600 --> 00:09:22,240
replace a perfectly working machine

00:09:19,600 --> 00:09:23,600
just because it was old was bonkers to

00:09:22,240 --> 00:09:25,200
me

00:09:23,600 --> 00:09:28,240
more mind-blowing was the size

00:09:25,200 --> 00:09:30,560
difference in my previous show

00:09:28,240 --> 00:09:32,480
we started a nigeria with two people and

00:09:30,560 --> 00:09:33,040
it had grown to five people by the time

00:09:32,480 --> 00:09:35,279
i left

00:09:33,040 --> 00:09:37,360
and as i said we were in charge of 300

00:09:35,279 --> 00:09:39,519
350 computers

00:09:37,360 --> 00:09:40,800
so we had less than 100 computers per

00:09:39,519 --> 00:09:43,440
team member

00:09:40,800 --> 00:09:44,800
after nine years working there i knew

00:09:43,440 --> 00:09:47,680
all the computers by name

00:09:44,800 --> 00:09:48,160
i knew who used which computer i knew

00:09:47,680 --> 00:09:50,480
the

00:09:48,160 --> 00:09:52,560
keyboard layout i knew if the mouse had

00:09:50,480 --> 00:09:54,959
had issues i even knew the internal ip

00:09:52,560 --> 00:09:57,680
address for most of them

00:09:54,959 --> 00:09:58,720
at google my team of 12 people was in

00:09:57,680 --> 00:10:01,760
charge of 10th

00:09:58,720 --> 00:10:02,640
of thousands of computers while the team

00:10:01,760 --> 00:10:04,800
grew a bit

00:10:02,640 --> 00:10:06,320
over time the amount of hosts on our

00:10:04,800 --> 00:10:09,360
fleet grew a lot

00:10:06,320 --> 00:10:09,680
faster at any point in time we had more

00:10:09,360 --> 00:10:12,320
than

00:10:09,680 --> 00:10:13,920
5 000 computers per team member to care

00:10:12,320 --> 00:10:16,160
for

00:10:13,920 --> 00:10:17,440
this meant that it was no longer

00:10:16,160 --> 00:10:20,640
possible to know than

00:10:17,440 --> 00:10:22,480
hosts by name and more importantly that

00:10:20,640 --> 00:10:24,959
everything needed to be automated

00:10:22,480 --> 00:10:26,399
not just the obvious like managing

00:10:24,959 --> 00:10:29,519
configuration with puppet

00:10:26,399 --> 00:10:31,680
or having automatic upgrades

00:10:29,519 --> 00:10:33,760
but also things like automated health

00:10:31,680 --> 00:10:35,760
checking and log collection

00:10:33,760 --> 00:10:37,680
on top of that we've provided a bunch of

00:10:35,760 --> 00:10:39,360
tools and documentation to help users

00:10:37,680 --> 00:10:41,360
deal with issues themselves

00:10:39,360 --> 00:10:43,200
without needing to contact our team

00:10:41,360 --> 00:10:43,760
including being able to reinstall their

00:10:43,200 --> 00:10:47,680
computer

00:10:43,760 --> 00:10:50,399
without having to feel a single prompt

00:10:47,680 --> 00:10:52,399
on automation is not enough if it's not

00:10:50,399 --> 00:10:53,519
complemented with robust and thorough

00:10:52,399 --> 00:10:55,920
testing

00:10:53,519 --> 00:10:58,000
in my team we had a pretty thorough test

00:10:55,920 --> 00:11:01,279
suit that verified that a lot of the

00:10:58,000 --> 00:11:02,959
different use cases worked as expected

00:11:01,279 --> 00:11:04,800
this allowed us to push changes to the

00:11:02,959 --> 00:11:06,720
fleet on a weekly cadence

00:11:04,800 --> 00:11:08,399
without panicking that we would break

00:11:06,720 --> 00:11:10,160
everything

00:11:08,399 --> 00:11:11,600
another difference was that at google

00:11:10,160 --> 00:11:13,279
there were a lot of teams maintaining

00:11:11,600 --> 00:11:14,880
different parts of the stack

00:11:13,279 --> 00:11:16,480
my team was in charge of the linux

00:11:14,880 --> 00:11:18,000
platform but there were a lot of other

00:11:16,480 --> 00:11:18,880
teams providing software on that

00:11:18,000 --> 00:11:20,560
platform

00:11:18,880 --> 00:11:23,279
and an important part of what my team

00:11:20,560 --> 00:11:25,120
did was enabling them to do that

00:11:23,279 --> 00:11:26,959
this meant that some changes needed to

00:11:25,120 --> 00:11:27,440
be coordinated across many different

00:11:26,959 --> 00:11:30,640
people

00:11:27,440 --> 00:11:31,519
across many different time zones and

00:11:30,640 --> 00:11:33,440
finally

00:11:31,519 --> 00:11:35,680
one difference that i really enjoyed was

00:11:33,440 --> 00:11:38,320
that our users were technical people

00:11:35,680 --> 00:11:39,680
many of them also using linux at home

00:11:38,320 --> 00:11:41,120
this meant that back reports were

00:11:39,680 --> 00:11:44,560
usually pretty good

00:11:41,120 --> 00:11:46,640
including production cases and sometimes

00:11:44,560 --> 00:11:49,360
even a patch to fix the issue at hand

00:11:46,640 --> 00:11:51,279
no more it doesn't give me access but

00:11:49,360 --> 00:11:54,639
rather good technical reports

00:11:51,279 --> 00:11:56,240
well mostly of course nobody's perfect

00:11:54,639 --> 00:11:58,240
putting aside these differences there

00:11:56,240 --> 00:12:00,320
were many things that were the same

00:11:58,240 --> 00:12:02,399
when asked what i did before working at

00:12:00,320 --> 00:12:03,200
google i would reply that mostly the

00:12:02,399 --> 00:12:06,240
same

00:12:03,200 --> 00:12:08,480
just as a much much smaller scale

00:12:06,240 --> 00:12:10,160
in both cases we were keeping a rep of

00:12:08,480 --> 00:12:11,200
packages on top of what the dristro

00:12:10,160 --> 00:12:13,200
provided

00:12:11,200 --> 00:12:14,480
managing the configuration with puppet

00:12:13,200 --> 00:12:15,360
keeping all our changes and

00:12:14,480 --> 00:12:18,000
configuration

00:12:15,360 --> 00:12:19,120
inversion control enabling our users to

00:12:18,000 --> 00:12:20,720
do our job

00:12:19,120 --> 00:12:22,800
and all of this using a distribution

00:12:20,720 --> 00:12:27,040
that was based on debian

00:12:22,800 --> 00:12:27,600
well sort of the team i joined in 2012

00:12:27,040 --> 00:12:30,399
was called

00:12:27,600 --> 00:12:32,399
gubuntu it was a linux distribution

00:12:30,399 --> 00:12:34,079
based on ubuntu that followed the long

00:12:32,399 --> 00:12:36,079
term support releases

00:12:34,079 --> 00:12:38,079
right when i joined the team my team was

00:12:36,079 --> 00:12:40,959
going through the migration from lucid

00:12:38,079 --> 00:12:42,639
to precise a couple of years later i was

00:12:40,959 --> 00:12:44,720
the one leading the migration from

00:12:42,639 --> 00:12:47,040
precise to trustee

00:12:44,720 --> 00:12:48,639
and i mentioned our feet had tens of

00:12:47,040 --> 00:12:51,040
thousands of computers

00:12:48,639 --> 00:12:52,079
so you might imagine how big an effort

00:12:51,040 --> 00:12:54,480
it was to migrate

00:12:52,079 --> 00:12:55,440
such a large fleet from one lts to the

00:12:54,480 --> 00:12:58,079
next

00:12:55,440 --> 00:12:59,040
we had tools to help us with that but

00:12:58,079 --> 00:13:01,440
even then

00:12:59,040 --> 00:13:02,800
it was painful too many things had

00:13:01,440 --> 00:13:04,480
changed in between

00:13:02,800 --> 00:13:05,760
lots and lots of things needed to be

00:13:04,480 --> 00:13:07,360
fixed before we could get the new

00:13:05,760 --> 00:13:10,000
release out

00:13:07,360 --> 00:13:10,480
a lot of effort got spent on getting the

00:13:10,000 --> 00:13:12,880
fleet

00:13:10,480 --> 00:13:14,320
updated only to have to do the same

00:13:12,880 --> 00:13:17,519
thing all over again

00:13:14,320 --> 00:13:18,320
two years later so after going through

00:13:17,519 --> 00:13:21,120
this

00:13:18,320 --> 00:13:21,680
painful migration twice i convinced my

00:13:21,120 --> 00:13:24,079
teammate

00:13:21,680 --> 00:13:25,360
and other interested parties that we

00:13:24,079 --> 00:13:28,480
didn't want to keep doing that

00:13:25,360 --> 00:13:29,760
anymore instead we should switch to a

00:13:28,480 --> 00:13:32,720
rolling release model

00:13:29,760 --> 00:13:34,880
where packages got updated progressively

00:13:32,720 --> 00:13:36,399
we would no longer have a huge jump

00:13:34,880 --> 00:13:39,440
every two years

00:13:36,399 --> 00:13:41,440
but rather small increases every week

00:13:39,440 --> 00:13:43,360
and what better target to follow than

00:13:41,440 --> 00:13:45,440
debian testing

00:13:43,360 --> 00:13:46,880
well i don't know other people might

00:13:45,440 --> 00:13:49,440
disagree with that last part

00:13:46,880 --> 00:13:50,240
but i convinced the power that b that

00:13:49,440 --> 00:13:52,800
this was a

00:13:50,240 --> 00:13:53,920
good idea so we decided to stop tracking

00:13:52,800 --> 00:13:57,839
ubuntu lts

00:13:53,920 --> 00:13:59,040
and track devin testing instead in 2017

00:13:57,839 --> 00:14:01,440
we renamed our team

00:13:59,040 --> 00:14:02,800
and our product to g-linux we migrated

00:14:01,440 --> 00:14:06,240
the fleet from trustee

00:14:02,800 --> 00:14:08,160
to stretch or kinda stretch because

00:14:06,240 --> 00:14:10,240
as we were working on it stretch got

00:14:08,160 --> 00:14:12,000
released and it became faster

00:14:10,240 --> 00:14:13,360
and we kept tracking it and it kept

00:14:12,000 --> 00:14:15,440
changing and

00:14:13,360 --> 00:14:16,480
i'm not going to lie there was a lot of

00:14:15,440 --> 00:14:19,839
work involved here

00:14:16,480 --> 00:14:22,560
and not of all of all was easy or fun

00:14:19,839 --> 00:14:24,800
but in the end when bastard got released

00:14:22,560 --> 00:14:25,440
as table jay linux users at google had

00:14:24,800 --> 00:14:27,839
received

00:14:25,440 --> 00:14:29,120
the updates progressively without having

00:14:27,839 --> 00:14:31,839
to actually do

00:14:29,120 --> 00:14:33,440
any manual action whatsoever just as

00:14:31,839 --> 00:14:35,519
part of the normal weekly release

00:14:33,440 --> 00:14:37,680
process

00:14:35,519 --> 00:14:39,040
all of this was super fun i learned a

00:14:37,680 --> 00:14:40,800
lot and grew a lot

00:14:39,040 --> 00:14:43,120
in the almost eight years that worked at

00:14:40,800 --> 00:14:44,160
google but eventually it was time for a

00:14:43,120 --> 00:14:46,399
change

00:14:44,160 --> 00:14:48,000
so earlier this year i took on a

00:14:46,399 --> 00:14:50,079
position at kim folk

00:14:48,000 --> 00:14:51,040
as i mentioned kim folk is a startup

00:14:50,079 --> 00:14:53,279
based in berlin

00:14:51,040 --> 00:14:54,959
it's a small company that is based on

00:14:53,279 --> 00:14:57,519
working on open source software

00:14:54,959 --> 00:14:58,000
with a focus on kubernetes linux and

00:14:57,519 --> 00:15:00,320
everything

00:14:58,000 --> 00:15:01,920
that has to do with containers in my

00:15:00,320 --> 00:15:04,560
case i've been focusing

00:15:01,920 --> 00:15:06,000
mostly on the development of flatcar

00:15:04,560 --> 00:15:08,240
container linux

00:15:06,000 --> 00:15:10,720
if you haven't heard of flatcar before

00:15:08,240 --> 00:15:13,040
it's a container optimized os

00:15:10,720 --> 00:15:15,040
based on core os which was another

00:15:13,040 --> 00:15:18,399
container optimized os

00:15:15,040 --> 00:15:21,519
which itself was based on chrome os

00:15:18,399 --> 00:15:25,279
which was based on shenter

00:15:21,519 --> 00:15:27,519
yes shento moving to kinfoll was again

00:15:25,279 --> 00:15:29,519
a big change for me the thing that

00:15:27,519 --> 00:15:31,600
impressed me the most was the speed at

00:15:29,519 --> 00:15:34,399
which one could get things done

00:15:31,600 --> 00:15:36,639
at google time is measured in quarters a

00:15:34,399 --> 00:15:39,199
medium-sized project might take

00:15:36,639 --> 00:15:41,519
one quarter to get planned then another

00:15:39,199 --> 00:15:44,959
quarter to get a prototype out

00:15:41,519 --> 00:15:45,839
then another pro quarter to get this

00:15:44,959 --> 00:15:48,000
into beta

00:15:45,839 --> 00:15:49,199
and then finally one last quarter to get

00:15:48,000 --> 00:15:51,199
this into ga

00:15:49,199 --> 00:15:52,399
which is a password that means general

00:15:51,199 --> 00:15:54,720
acceptance

00:15:52,399 --> 00:15:55,519
working at a startup there's a lot less

00:15:54,720 --> 00:15:58,480
red tape

00:15:55,519 --> 00:15:59,759
less inertia less stakeholders so things

00:15:58,480 --> 00:16:01,519
just move faster

00:15:59,759 --> 00:16:02,880
you can measure how long a project will

00:16:01,519 --> 00:16:05,600
take in weeks

00:16:02,880 --> 00:16:06,000
and sure timelines might slip a bit but

00:16:05,600 --> 00:16:09,360
still

00:16:06,000 --> 00:16:12,000
a lot faster the other big change

00:16:09,360 --> 00:16:12,560
what that was that while i was still

00:16:12,000 --> 00:16:14,880
working

00:16:12,560 --> 00:16:17,120
on linux i moved from working on a

00:16:14,880 --> 00:16:20,000
distro used by humans

00:16:17,120 --> 00:16:22,160
to a distro used by containers there's a

00:16:20,000 --> 00:16:26,639
lot of differences there the big one

00:16:22,160 --> 00:16:28,720
is how security weighs against usability

00:16:26,639 --> 00:16:30,639
with any software out there there's

00:16:28,720 --> 00:16:31,759
usually a struggle between security and

00:16:30,639 --> 00:16:33,680
usability

00:16:31,759 --> 00:16:36,079
you need things as locked down as

00:16:33,680 --> 00:16:37,920
possible while still allowing you to get

00:16:36,079 --> 00:16:39,759
things done in a reasonable amount of

00:16:37,920 --> 00:16:42,079
time

00:16:39,759 --> 00:16:44,399
and when security and usability clash

00:16:42,079 --> 00:16:46,399
you need to make some hard choices

00:16:44,399 --> 00:16:48,320
i found that the choices made for

00:16:46,399 --> 00:16:49,680
g-linux were different than the ones

00:16:48,320 --> 00:16:51,920
made for flatcar

00:16:49,680 --> 00:16:53,440
one example of this is the read-only

00:16:51,920 --> 00:16:56,720
user partition

00:16:53,440 --> 00:16:59,600
in flatcar as in chrome os and coreos

00:16:56,720 --> 00:17:01,440
the slash user partition is read-only

00:16:59,600 --> 00:17:03,839
you can't install new software on it

00:17:01,440 --> 00:17:04,480
there's no package management system of

00:17:03,839 --> 00:17:08,640
any kind

00:17:04,480 --> 00:17:10,959
the os image stays exactly as it is

00:17:08,640 --> 00:17:13,439
you can still customize things in etsy

00:17:10,959 --> 00:17:15,439
and side load software via containers

00:17:13,439 --> 00:17:16,480
but you can't install new programs in

00:17:15,439 --> 00:17:18,400
slash user

00:17:16,480 --> 00:17:20,400
nor can you tamper with the programs

00:17:18,400 --> 00:17:23,199
that are already installed

00:17:20,400 --> 00:17:24,240
for a human user this might be really

00:17:23,199 --> 00:17:26,799
limiting

00:17:24,240 --> 00:17:27,919
but for ios that's used to run

00:17:26,799 --> 00:17:29,760
containers on it

00:17:27,919 --> 00:17:31,520
as long as the necessary tools to run

00:17:29,760 --> 00:17:34,640
these containers are installed

00:17:31,520 --> 00:17:37,280
this might be exactly what you want

00:17:34,640 --> 00:17:39,200
alright so here we are i've taken you on

00:17:37,280 --> 00:17:42,400
a quick journey through my career

00:17:39,200 --> 00:17:44,720
as a linux engineer i started as a young

00:17:42,400 --> 00:17:45,600
inexperienced techie and through time

00:17:44,720 --> 00:17:48,799
and effort

00:17:45,600 --> 00:17:49,679
i became an old timer now my goal with

00:17:48,799 --> 00:17:52,320
this talk

00:17:49,679 --> 00:17:54,320
was not just to admit how old i am but

00:17:52,320 --> 00:17:57,440
to share lessons i've learned with you

00:17:54,320 --> 00:17:58,320
so let's get to that as a software

00:17:57,440 --> 00:18:00,640
engineer

00:17:58,320 --> 00:18:01,919
system administrator site reliability

00:18:00,640 --> 00:18:05,039
engineer i love

00:18:01,919 --> 00:18:05,520
automation automation is what enables us

00:18:05,039 --> 00:18:08,240
to do

00:18:05,520 --> 00:18:09,679
interesting things with our time we can

00:18:08,240 --> 00:18:11,360
automate the boring stuff

00:18:09,679 --> 00:18:13,520
and move on to do something that's a

00:18:11,360 --> 00:18:15,280
little bit more challenging

00:18:13,520 --> 00:18:16,640
but there is such thing as too much

00:18:15,280 --> 00:18:19,760
automation

00:18:16,640 --> 00:18:21,600
how can we tell say it takes you

00:18:19,760 --> 00:18:23,760
five minutes to write a script that will

00:18:21,600 --> 00:18:25,840
save you one minute of manual work

00:18:23,760 --> 00:18:27,840
in this case it makes sense to write the

00:18:25,840 --> 00:18:29,840
script if you are going to do this task

00:18:27,840 --> 00:18:32,400
more than five times

00:18:29,840 --> 00:18:34,080
but what if it takes you two hours to

00:18:32,400 --> 00:18:36,799
write the script that will save

00:18:34,080 --> 00:18:38,000
the same one minute of manual work the

00:18:36,799 --> 00:18:40,400
method is simple

00:18:38,000 --> 00:18:43,039
it only makes sense to do this if you

00:18:40,400 --> 00:18:45,360
will apply this script more than 120

00:18:43,039 --> 00:18:47,520
times

00:18:45,360 --> 00:18:49,120
this example is rather obvious but

00:18:47,520 --> 00:18:50,880
unfortunately in real life

00:18:49,120 --> 00:18:52,559
we usually don't know how long things

00:18:50,880 --> 00:18:55,120
will take to

00:18:52,559 --> 00:18:57,120
write the automation nor how many times

00:18:55,120 --> 00:19:00,880
we will execute it until it becomes

00:18:57,120 --> 00:19:02,160
obsolete still we can try to use some

00:19:00,880 --> 00:19:03,840
rough estimates

00:19:02,160 --> 00:19:05,200
knowing that they won't necessarily be

00:19:03,840 --> 00:19:07,440
accurate but

00:19:05,200 --> 00:19:08,640
they can help us decide how we spend our

00:19:07,440 --> 00:19:10,960
time

00:19:08,640 --> 00:19:12,960
when faced with a boring task some of us

00:19:10,960 --> 00:19:14,720
will start thinking how to automate it

00:19:12,960 --> 00:19:16,799
before we even complete the first manual

00:19:14,720 --> 00:19:18,880
run so if you're in that camp

00:19:16,799 --> 00:19:19,840
it's a good idea to ask yourself how

00:19:18,880 --> 00:19:22,000
long

00:19:19,840 --> 00:19:24,000
do i think it will take me to roughly

00:19:22,000 --> 00:19:26,720
write and debug

00:19:24,000 --> 00:19:28,880
the script that will automate this how

00:19:26,720 --> 00:19:31,360
much time will it save

00:19:28,880 --> 00:19:32,160
and how many times will i use it before

00:19:31,360 --> 00:19:34,320
it's up to

00:19:32,160 --> 00:19:36,000
obsolete and i need to rewrite it from

00:19:34,320 --> 00:19:38,240
scratch

00:19:36,000 --> 00:19:39,440
if after asking yourself all these

00:19:38,240 --> 00:19:41,280
questions the math

00:19:39,440 --> 00:19:42,559
tells you that you should spend time

00:19:41,280 --> 00:19:45,039
writing the automation

00:19:42,559 --> 00:19:47,280
then by all means go for it automation

00:19:45,039 --> 00:19:49,200
is awesome

00:19:47,280 --> 00:19:51,520
now let's illustrate this with an

00:19:49,200 --> 00:19:54,080
example from my experience

00:19:51,520 --> 00:19:55,360
handling upgrades is a challenging task

00:19:54,080 --> 00:19:58,160
that i had to deal with

00:19:55,360 --> 00:19:58,799
at all of my jobs the kind of automation

00:19:58,160 --> 00:20:01,760
applied

00:19:58,799 --> 00:20:02,720
is different because the operations and

00:20:01,760 --> 00:20:06,240
sizes involved

00:20:02,720 --> 00:20:08,799
are different at the small company in

00:20:06,240 --> 00:20:10,400
argentina we were tracking devin's table

00:20:08,799 --> 00:20:12,559
so whenever there was a new stable

00:20:10,400 --> 00:20:14,960
release we would start by upgrading an

00:20:12,559 --> 00:20:17,200
unused test machine followed probably by

00:20:14,960 --> 00:20:18,400
our own workstations followed by the

00:20:17,200 --> 00:20:20,240
computers of

00:20:18,400 --> 00:20:21,760
people that for some reason needed the

00:20:20,240 --> 00:20:23,280
tools first

00:20:21,760 --> 00:20:26,000
throughout this process we would

00:20:23,280 --> 00:20:28,080
document any issues that we ran into

00:20:26,000 --> 00:20:29,360
creating a script that took care of most

00:20:28,080 --> 00:20:31,520
of the work

00:20:29,360 --> 00:20:33,360
and then we would move on to applying

00:20:31,520 --> 00:20:34,000
this script to the workstations of

00:20:33,360 --> 00:20:36,480
people that were

00:20:34,000 --> 00:20:38,720
on vacation which would help us find any

00:20:36,480 --> 00:20:40,320
bugs in our scripts and finally

00:20:38,720 --> 00:20:43,360
we would spend a weekend or two

00:20:40,320 --> 00:20:46,400
upgrading all the other machines

00:20:43,360 --> 00:20:48,080
so this script i mentioned automated the

00:20:46,400 --> 00:20:51,280
most common basic steps

00:20:48,080 --> 00:20:52,400
but they were optimistic scripts which

00:20:51,280 --> 00:20:55,440
means that

00:20:52,400 --> 00:20:57,360
if while eyebrowsing anything broke it

00:20:55,440 --> 00:20:59,520
was up to the person doing the upgrade

00:20:57,360 --> 00:21:02,400
to figure out how to fix it

00:20:59,520 --> 00:21:03,760
it just wasn't wasn't worth creating a

00:21:02,400 --> 00:21:06,720
script that would take care of

00:21:03,760 --> 00:21:08,559
all the possible problems handling each

00:21:06,720 --> 00:21:10,400
and every problem would have taken

00:21:08,559 --> 00:21:12,720
way longer than the amount of manual

00:21:10,400 --> 00:21:15,679
work involved multiplied by the times

00:21:12,720 --> 00:21:17,919
these problems would have surfaced

00:21:15,679 --> 00:21:19,600
at my shop at google this of course

00:21:17,919 --> 00:21:21,520
wouldn't work there just couldn't be

00:21:19,600 --> 00:21:23,440
enough weekends in the year

00:21:21,520 --> 00:21:24,640
to upgrade all of the machines in the

00:21:23,440 --> 00:21:27,280
fleet

00:21:24,640 --> 00:21:28,400
but when i joined in 2012 the main way

00:21:27,280 --> 00:21:31,600
of upgrading from

00:21:28,400 --> 00:21:33,679
lts to lts was to reinstall and it was

00:21:31,600 --> 00:21:35,679
done by the users themselves

00:21:33,679 --> 00:21:38,320
as i mentioned earlier the install

00:21:35,679 --> 00:21:40,240
itself was fully automated the user just

00:21:38,320 --> 00:21:40,799
decided when to do it and the machine

00:21:40,240 --> 00:21:44,080
would get

00:21:40,799 --> 00:21:46,159
re-imaged users would be asked to

00:21:44,080 --> 00:21:48,080
reinstall their machine with the new lts

00:21:46,159 --> 00:21:50,400
during a time period

00:21:48,080 --> 00:21:51,679
and would look would lose access to the

00:21:50,400 --> 00:21:55,360
network resources

00:21:51,679 --> 00:21:55,360
if they failed to do it before the

00:21:56,840 --> 00:22:01,200
deadline but reinstalling their

00:21:58,960 --> 00:22:04,159
workstations with the new lts

00:22:01,200 --> 00:22:05,840
was not popular among our users so

00:22:04,159 --> 00:22:06,640
during the transition from lucid to

00:22:05,840 --> 00:22:08,799
precise

00:22:06,640 --> 00:22:10,960
one of my teammates started a project to

00:22:08,799 --> 00:22:12,799
develop an in-place upgrade

00:22:10,960 --> 00:22:14,240
that would let users upgrade without

00:22:12,799 --> 00:22:16,320
reinstalling

00:22:14,240 --> 00:22:18,480
as this was an experimental tool not

00:22:16,320 --> 00:22:19,520
everybody used it but it did get some

00:22:18,480 --> 00:22:21,520
traction

00:22:19,520 --> 00:22:22,960
when the migration to trusty came around

00:22:21,520 --> 00:22:24,880
this script got improved

00:22:22,960 --> 00:22:27,120
we released it as an official way to

00:22:24,880 --> 00:22:29,760
upgrade and plenty of users used it

00:22:27,120 --> 00:22:31,360
and it got around 95 success rate in

00:22:29,760 --> 00:22:34,080
upgrading the machines without

00:22:31,360 --> 00:22:37,360
any manual intervention which is quite

00:22:34,080 --> 00:22:39,600
good given how diverse our fleet was

00:22:37,360 --> 00:22:41,440
finally when we moved to a rolling

00:22:39,600 --> 00:22:43,600
release based on deviant testing the

00:22:41,440 --> 00:22:44,320
in-place upgrade tool got improved even

00:22:43,600 --> 00:22:46,480
more

00:22:44,320 --> 00:22:48,400
and it was able to handle the migration

00:22:46,480 --> 00:22:52,240
from ubuntu trustee

00:22:48,400 --> 00:22:55,760
to a moving target of stretch ambassador

00:22:52,240 --> 00:22:58,720
also with more than 95 success rate

00:22:55,760 --> 00:22:59,440
this was three years later so not only

00:22:58,720 --> 00:23:01,760
was

00:22:59,440 --> 00:23:05,520
a bigger jump in the software stack the

00:23:01,760 --> 00:23:07,520
fleet had grown significantly

00:23:05,520 --> 00:23:09,200
and this with a fleet of machines where

00:23:07,520 --> 00:23:12,240
users were allowed to install

00:23:09,200 --> 00:23:15,200
all kinds of different software so yeah

00:23:12,240 --> 00:23:15,600
it was now easy fit to get to that 95

00:23:15,200 --> 00:23:18,320
plus

00:23:15,600 --> 00:23:19,280
success rate it was possible thanks to

00:23:18,320 --> 00:23:22,240
the script being

00:23:19,280 --> 00:23:24,240
extremely pessimistic it expected that

00:23:22,240 --> 00:23:26,559
any actions it took could fail

00:23:24,240 --> 00:23:27,360
and ways to recover from these possible

00:23:26,559 --> 00:23:30,000
failures were

00:23:27,360 --> 00:23:32,480
in the script it included code to fix

00:23:30,000 --> 00:23:32,799
the most common problems but also when

00:23:32,480 --> 00:23:34,640
an

00:23:32,799 --> 00:23:36,720
unknown error was encountered it had a

00:23:34,640 --> 00:23:38,799
bunch of different healing techniques

00:23:36,720 --> 00:23:40,000
to attempt to get the machine back into

00:23:38,799 --> 00:23:43,919
a working state

00:23:40,000 --> 00:23:46,080
kind of like a broad spectrum antibiotic

00:23:43,919 --> 00:23:48,000
and it was not just this extremely

00:23:46,080 --> 00:23:49,679
pessimistic coding it wouldn't have been

00:23:48,000 --> 00:23:52,799
possible to achieve this high success

00:23:49,679 --> 00:23:55,440
rates without a ton of testing

00:23:52,799 --> 00:23:57,039
we had a battery of automatic tests that

00:23:55,440 --> 00:23:59,600
run the in-place upgrade

00:23:57,039 --> 00:24:01,200
from different initial trustee states to

00:23:59,600 --> 00:24:02,960
whatever the current state of the

00:24:01,200 --> 00:24:05,360
rolling release was

00:24:02,960 --> 00:24:06,080
so that if something that worked stopped

00:24:05,360 --> 00:24:08,320
working

00:24:06,080 --> 00:24:10,640
we could detect it before it reached any

00:24:08,320 --> 00:24:13,200
users

00:24:10,640 --> 00:24:15,200
and finally the tool included automatic

00:24:13,200 --> 00:24:17,039
reporting of what it had done

00:24:15,200 --> 00:24:18,400
this allowed us to investigate any

00:24:17,039 --> 00:24:21,120
unsolved failures and

00:24:18,400 --> 00:24:23,919
add whichever solution we found for them

00:24:21,120 --> 00:24:25,760
to the battery of fixes that it applied

00:24:23,919 --> 00:24:27,520
every morning we could look at the

00:24:25,760 --> 00:24:28,080
dashboard of updates done the previous

00:24:27,520 --> 00:24:30,240
day

00:24:28,080 --> 00:24:32,320
and check if any of them had ended in

00:24:30,240 --> 00:24:34,240
failure looking at the logs

00:24:32,320 --> 00:24:36,000
and information collected by the tool we

00:24:34,240 --> 00:24:38,320
could try to solve issues like where

00:24:36,000 --> 00:24:39,200
dependency problems or phi collisions or

00:24:38,320 --> 00:24:41,039
whatever

00:24:39,200 --> 00:24:43,039
and this solutions could get

00:24:41,039 --> 00:24:44,080
incorporated into the next version of

00:24:43,039 --> 00:24:46,159
the tool

00:24:44,080 --> 00:24:48,240
unless the package management was out of

00:24:46,159 --> 00:24:50,159
commission the affected users would then

00:24:48,240 --> 00:24:52,720
be able to update to the latest version

00:24:50,159 --> 00:24:55,039
of the in-place upgrade and re-run it

00:24:52,720 --> 00:24:56,000
the tool was able to restart from where

00:24:55,039 --> 00:24:57,520
it had left off

00:24:56,000 --> 00:24:59,200
and get the machine successfully

00:24:57,520 --> 00:25:01,360
upgraded

00:24:59,200 --> 00:25:02,400
of course developing this tool took

00:25:01,360 --> 00:25:04,880
quite some time

00:25:02,400 --> 00:25:05,760
several quarters time of a few different

00:25:04,880 --> 00:25:07,440
engineers

00:25:05,760 --> 00:25:09,200
and as i mentioned it took three

00:25:07,440 --> 00:25:11,360
iterations to get there

00:25:09,200 --> 00:25:12,320
but by allowing users to upgrade their

00:25:11,360 --> 00:25:14,559
machines in place

00:25:12,320 --> 00:25:16,799
my team saved these users the time that

00:25:14,559 --> 00:25:18,880
they would have spent on reinstalling

00:25:16,799 --> 00:25:20,640
any custom software or reapplying their

00:25:18,880 --> 00:25:23,200
custom settings

00:25:20,640 --> 00:25:25,200
if they had started from scratch given

00:25:23,200 --> 00:25:27,360
the sheer number of users

00:25:25,200 --> 00:25:28,960
even if you estimate only a couple of

00:25:27,360 --> 00:25:32,000
hours say per user

00:25:28,960 --> 00:25:33,919
the total amount of hours saved is huge

00:25:32,000 --> 00:25:35,919
i don't have the numbers but one of my

00:25:33,919 --> 00:25:39,080
colleagues had calculated roughly

00:25:35,919 --> 00:25:41,679
how much they had saved and it was

00:25:39,080 --> 00:25:44,960
significantly more than what had been

00:25:41,679 --> 00:25:44,960
spent on developing the tool

00:25:45,200 --> 00:25:49,679
my point with this long story is to show

00:25:47,600 --> 00:25:52,000
how the effort spent on automation pays

00:25:49,679 --> 00:25:53,679
off when the numbers are big enough

00:25:52,000 --> 00:25:55,120
when the fleet i was in charge of were

00:25:53,679 --> 00:25:56,799
300 computers

00:25:55,120 --> 00:25:58,960
it made sense to have a simple

00:25:56,799 --> 00:26:01,120
optimistic script that would save us

00:25:58,960 --> 00:26:03,120
most of the work and then we would fix

00:26:01,120 --> 00:26:04,960
any one of problems manually

00:26:03,120 --> 00:26:07,919
with a fit two orders of magnitude

00:26:04,960 --> 00:26:09,360
larger it made a lot more sense to spend

00:26:07,919 --> 00:26:12,000
time developing robust

00:26:09,360 --> 00:26:13,279
automation because the time saved got

00:26:12,000 --> 00:26:16,480
multiplied by a much

00:26:13,279 --> 00:26:17,840
larger factor now the case of flat car

00:26:16,480 --> 00:26:20,000
is pretty different

00:26:17,840 --> 00:26:22,080
as i mentioned earlier flat car uses one

00:26:20,000 --> 00:26:24,640
of the main ideas behind chrome os

00:26:22,080 --> 00:26:25,760
which is the read-only user partition

00:26:24,640 --> 00:26:28,559
not only that

00:26:25,760 --> 00:26:28,960
it actually has two user partition user

00:26:28,559 --> 00:26:31,760
a

00:26:28,960 --> 00:26:32,240
and user b when a new release comes

00:26:31,760 --> 00:26:33,840
around

00:26:32,240 --> 00:26:35,600
it's deployed on the partition that's

00:26:33,840 --> 00:26:37,440
not currently being used

00:26:35,600 --> 00:26:38,799
when the machine reboots it tries to

00:26:37,440 --> 00:26:40,960
boot on the new version

00:26:38,799 --> 00:26:43,200
but if for some reason this new version

00:26:40,960 --> 00:26:45,200
fails it falls back to the previous

00:26:43,200 --> 00:26:45,760
partition that one that was known to be

00:26:45,200 --> 00:26:49,520
working

00:26:45,760 --> 00:26:51,600
before the reboot so it's not like there

00:26:49,520 --> 00:26:53,520
are never problems with upgrades

00:26:51,600 --> 00:26:55,440
but whenever there is a problem the

00:26:53,520 --> 00:26:56,960
machine keeps working by reverting to

00:26:55,440 --> 00:26:58,799
the previous version

00:26:56,960 --> 00:27:00,080
this minimizes breakage and is

00:26:58,799 --> 00:27:03,120
completely transparent

00:27:00,080 --> 00:27:05,919
for the user i don't know

00:27:03,120 --> 00:27:06,559
how many hours were spent by chromos and

00:27:05,919 --> 00:27:09,120
chorus

00:27:06,559 --> 00:27:11,600
engineers on this mechanism although i'm

00:27:09,120 --> 00:27:12,640
sure it was several quarters of quite a

00:27:11,600 --> 00:27:15,520
few people

00:27:12,640 --> 00:27:16,559
what i know is that this has saved tons

00:27:15,520 --> 00:27:19,760
of time

00:27:16,559 --> 00:27:21,120
of many different users because these

00:27:19,760 --> 00:27:23,520
users

00:27:21,120 --> 00:27:24,799
just don't have to spend hours trying to

00:27:23,520 --> 00:27:27,279
recover from a bad

00:27:24,799 --> 00:27:29,360
upgrade that break their machines this

00:27:27,279 --> 00:27:31,760
just doesn't happen

00:27:29,360 --> 00:27:33,919
so i mentioned a few times that we need

00:27:31,760 --> 00:27:35,679
to decide how we spend our time and

00:27:33,919 --> 00:27:37,039
whether spending time in automation is

00:27:35,679 --> 00:27:39,279
worth it or not

00:27:37,039 --> 00:27:40,960
this is one of the most important skills

00:27:39,279 --> 00:27:43,039
for people in it in general

00:27:40,960 --> 00:27:44,559
that we need to learn to deal with

00:27:43,039 --> 00:27:48,159
managing priorities

00:27:44,559 --> 00:27:50,320
so let's talk about that

00:27:48,159 --> 00:27:51,440
one of the things that i've learned in

00:27:50,320 --> 00:27:53,600
my different jobs

00:27:51,440 --> 00:27:54,799
is that there's always more to do than

00:27:53,600 --> 00:27:56,720
time allows

00:27:54,799 --> 00:27:57,840
you are never going to get to the bottom

00:27:56,720 --> 00:27:59,760
of the backlog

00:27:57,840 --> 00:28:02,000
because new things that have more

00:27:59,760 --> 00:28:04,080
priority will come around before you

00:28:02,000 --> 00:28:06,320
have time to do them

00:28:04,080 --> 00:28:08,320
i mean i've heard from people that claim

00:28:06,320 --> 00:28:10,080
they are idle and bored in their jobs

00:28:08,320 --> 00:28:10,640
and have nothing to do but in my

00:28:10,080 --> 00:28:12,399
experience

00:28:10,640 --> 00:28:14,720
and the experience of others working in

00:28:12,399 --> 00:28:17,279
the it industry that i've heard from

00:28:14,720 --> 00:28:18,399
this mostly doesn't happen there's just

00:28:17,279 --> 00:28:20,399
too much stuff to do

00:28:18,399 --> 00:28:24,000
too many bugs to fix too many features

00:28:20,399 --> 00:28:25,520
to add so we need to learn to prioritize

00:28:24,000 --> 00:28:28,000
in a business that's trying to make a

00:28:25,520 --> 00:28:29,919
profit the priorities are generally

00:28:28,000 --> 00:28:31,520
going to be driven by whatever brings in

00:28:29,919 --> 00:28:33,679
the money

00:28:31,520 --> 00:28:35,600
back at my shop in argentina the first

00:28:33,679 --> 00:28:37,120
priority was to have the invoicing

00:28:35,600 --> 00:28:39,520
system online

00:28:37,120 --> 00:28:41,760
if invoicing wasn't working anything

00:28:39,520 --> 00:28:44,080
else had lower priority

00:28:41,760 --> 00:28:45,840
if there was a new government regulation

00:28:44,080 --> 00:28:47,120
that needed to be in place in order to

00:28:45,840 --> 00:28:49,279
generate influences

00:28:47,120 --> 00:28:50,480
and this being argentina it wasn't the

00:28:49,279 --> 00:28:52,480
real thing

00:28:50,480 --> 00:28:53,679
we would drop everything and make sure

00:28:52,480 --> 00:28:56,159
that worked

00:28:53,679 --> 00:28:57,039
and after invoices bug fixes and

00:28:56,159 --> 00:28:59,279
features

00:28:57,039 --> 00:29:01,600
got prioritized according to how much

00:28:59,279 --> 00:29:03,919
they would influence the bottom line

00:29:01,600 --> 00:29:06,480
as myit team was in charge of anything

00:29:03,919 --> 00:29:07,200
it related we had to do this balancing

00:29:06,480 --> 00:29:09,440
job

00:29:07,200 --> 00:29:11,600
for all the staff regarding system

00:29:09,440 --> 00:29:15,200
administration software engineering

00:29:11,600 --> 00:29:17,039
and user support at my job at google

00:29:15,200 --> 00:29:18,480
i was thankfully far removed from

00:29:17,039 --> 00:29:20,080
invoicing but

00:29:18,480 --> 00:29:22,640
still we needed to deal with a huge

00:29:20,080 --> 00:29:24,880
backlog and struggled with priorities

00:29:22,640 --> 00:29:26,559
in that team usually the criteria for

00:29:24,880 --> 00:29:28,480
what priority to give to different

00:29:26,559 --> 00:29:30,080
issues was related to how many people

00:29:28,480 --> 00:29:32,320
the issue was affecting

00:29:30,080 --> 00:29:34,960
was it one percent of the fleet five

00:29:32,320 --> 00:29:37,360
percent the wall fleet

00:29:34,960 --> 00:29:39,200
of course it was not the only criteria

00:29:37,360 --> 00:29:41,440
if the issue was making a team of 10

00:29:39,200 --> 00:29:43,360
people completely unable to work

00:29:41,440 --> 00:29:45,520
it would have a higher priority than if

00:29:43,360 --> 00:29:46,799
it was only mildly inconveniencing a

00:29:45,520 --> 00:29:50,159
hundred or maybe even a

00:29:46,799 --> 00:29:53,440
thousand people one thing that we

00:29:50,159 --> 00:29:55,440
struggled with was laptop related issues

00:29:53,440 --> 00:29:57,600
if you've dealt with laptops running

00:29:55,440 --> 00:29:58,480
linux in the past you probably know that

00:29:57,600 --> 00:30:02,080
they can have

00:29:58,480 --> 00:30:04,480
a myriad of different hardware issues

00:30:02,080 --> 00:30:06,960
maybe the wi-fi driver doesn't work

00:30:04,480 --> 00:30:08,000
maybe the fancy touchpad doesn't respond

00:30:06,960 --> 00:30:10,480
correctly

00:30:08,000 --> 00:30:12,960
maybe the laptop drains the battery at a

00:30:10,480 --> 00:30:15,600
high speed while it's suspended

00:30:12,960 --> 00:30:17,840
or worst of all maybe it comes with this

00:30:15,600 --> 00:30:21,120
horrible 2500 display

00:30:17,840 --> 00:30:23,760
that is higher than hd but lower than 4k

00:30:21,120 --> 00:30:25,840
and looks horrible when running gtk

00:30:23,760 --> 00:30:28,000
applications

00:30:25,840 --> 00:30:29,760
and if you're wondering yes all of those

00:30:28,000 --> 00:30:31,279
problems were things that we had to fix

00:30:29,760 --> 00:30:33,360
throughout the years

00:30:31,279 --> 00:30:35,200
so fixing these issues takes time and

00:30:33,360 --> 00:30:36,000
expertise and sometimes you're not even

00:30:35,200 --> 00:30:38,720
sure that we

00:30:36,000 --> 00:30:39,039
you will be able to fix them so this can

00:30:38,720 --> 00:30:42,080
get

00:30:39,039 --> 00:30:44,159
really frustrating in our case laptops

00:30:42,080 --> 00:30:46,559
were a small part of the fleet and so

00:30:44,159 --> 00:30:47,919
sometimes it felt like a bad investment

00:30:46,559 --> 00:30:50,080
of our time

00:30:47,919 --> 00:30:52,080
but we had taken the explicit decision

00:30:50,080 --> 00:30:53,679
of supporting these linux laptops and

00:30:52,080 --> 00:30:56,559
that meant they were a priority

00:30:53,679 --> 00:30:58,320
regardless of the fleet size

00:30:56,559 --> 00:30:59,840
working with the flat card team now the

00:30:58,320 --> 00:31:01,039
issues that we have to deal with are

00:30:59,840 --> 00:31:02,960
pretty different

00:31:01,039 --> 00:31:05,039
but still we need to find a way to

00:31:02,960 --> 00:31:08,000
prioritize what to work on

00:31:05,039 --> 00:31:09,440
as if as flatcar is container oriented

00:31:08,000 --> 00:31:11,440
enabling users to run their

00:31:09,440 --> 00:31:12,799
containerized workflows and supporting

00:31:11,440 --> 00:31:16,240
more cloud platforms

00:31:12,799 --> 00:31:18,880
both get high priority but security

00:31:16,240 --> 00:31:20,240
trumps everything else

00:31:18,880 --> 00:31:22,399
one thing i learned throughout my

00:31:20,240 --> 00:31:24,159
journey was that even if i agree with

00:31:22,399 --> 00:31:24,640
the person reporting the issue that it's

00:31:24,159 --> 00:31:26,799
a bug

00:31:24,640 --> 00:31:28,720
and it should be fixed it's better if

00:31:26,799 --> 00:31:32,080
i'm upfront about the fact that

00:31:28,720 --> 00:31:33,919
i just won't get to it if someone files

00:31:32,080 --> 00:31:35,679
a bag report about a problem they

00:31:33,919 --> 00:31:38,399
encounter it and i respond saying

00:31:35,679 --> 00:31:40,720
yeah this is a bug we should fix it and

00:31:38,399 --> 00:31:43,519
that put it at the bottom of the backlog

00:31:40,720 --> 00:31:46,080
and never get to it that someone isn't

00:31:43,519 --> 00:31:48,559
going to be very happy

00:31:46,080 --> 00:31:50,720
if instead i tell them that it's totally

00:31:48,559 --> 00:31:53,440
a bug and i understand their frustration

00:31:50,720 --> 00:31:55,200
but unfortunately i won't have time to

00:31:53,440 --> 00:31:56,880
solve it because there are other things

00:31:55,200 --> 00:31:58,799
that are higher priority

00:31:56,880 --> 00:32:00,399
it's almost certain that they will

00:31:58,799 --> 00:32:03,519
understand and thank me

00:32:00,399 --> 00:32:05,519
for my honesty the user can then figure

00:32:03,519 --> 00:32:07,200
out how else to solve their problem

00:32:05,519 --> 00:32:08,880
without waiting for a fix that will

00:32:07,200 --> 00:32:10,640
never come

00:32:08,880 --> 00:32:12,960
this is a skill that takes time to

00:32:10,640 --> 00:32:15,679
master or at least it took me

00:32:12,960 --> 00:32:16,880
time to master admitting that i won't be

00:32:15,679 --> 00:32:19,440
able to do something

00:32:16,880 --> 00:32:21,600
feels like i'm not good enough when it's

00:32:19,440 --> 00:32:22,880
just recognizing that there's only so

00:32:21,600 --> 00:32:25,440
many hours in the day

00:32:22,880 --> 00:32:27,120
and so much time that can be done in

00:32:25,440 --> 00:32:29,360
that time

00:32:27,120 --> 00:32:30,320
some people summarize this as patches

00:32:29,360 --> 00:32:33,039
welcome

00:32:30,320 --> 00:32:34,960
which works but it's kind of short and

00:32:33,039 --> 00:32:36,080
it might be misunderstood as passive

00:32:34,960 --> 00:32:38,640
aggressive because

00:32:36,080 --> 00:32:40,480
some others have used it that way i

00:32:38,640 --> 00:32:41,840
prefer to be a little bit more verbose

00:32:40,480 --> 00:32:44,480
and make sure that the other party

00:32:41,840 --> 00:32:47,039
understands what i'm trying to say

00:32:44,480 --> 00:32:48,320
all right so i've covered dealing with

00:32:47,039 --> 00:32:52,159
priorities at work

00:32:48,320 --> 00:32:54,240
what about debian debian's motto is that

00:32:52,159 --> 00:32:56,559
we are the universal os

00:32:54,240 --> 00:32:57,360
we aim to create an os that serves

00:32:56,559 --> 00:32:59,679
everybody

00:32:57,360 --> 00:33:01,279
not just end users not just system

00:32:59,679 --> 00:33:04,000
administrators

00:33:01,279 --> 00:33:05,360
everybody this is really nice but it's

00:33:04,000 --> 00:33:08,399
also really hard

00:33:05,360 --> 00:33:10,240
how do you set priorities which use case

00:33:08,399 --> 00:33:11,279
is more important when you have to make

00:33:10,240 --> 00:33:13,919
a choice

00:33:11,279 --> 00:33:15,760
this is an unsolved conundrum it's

00:33:13,919 --> 00:33:17,600
basically left to the maintainers of

00:33:15,760 --> 00:33:19,519
each package to the side

00:33:17,600 --> 00:33:21,519
which means that we have thousands of

00:33:19,519 --> 00:33:23,919
different people making

00:33:21,519 --> 00:33:24,640
a thousand or more different decisions

00:33:23,919 --> 00:33:26,320
because

00:33:24,640 --> 00:33:27,760
they might apply different priorities to

00:33:26,320 --> 00:33:29,679
different packages

00:33:27,760 --> 00:33:30,880
sometimes maintainers will pick one

00:33:29,679 --> 00:33:33,039
default that they

00:33:30,880 --> 00:33:35,840
consider saying and possibly document

00:33:33,039 --> 00:33:37,519
how other use cases can be implemented

00:33:35,840 --> 00:33:39,600
sometimes they will just not make a

00:33:37,519 --> 00:33:41,679
decision and force users to make the

00:33:39,600 --> 00:33:43,440
decision themselves

00:33:41,679 --> 00:33:44,799
i believe this is possibly the reason

00:33:43,440 --> 00:33:45,600
why there are so many deviant

00:33:44,799 --> 00:33:48,320
derivatives

00:33:45,600 --> 00:33:49,919
debian is great as a basis for creating

00:33:48,320 --> 00:33:52,159
a specialized distro

00:33:49,919 --> 00:33:53,919
because options are not forced upon you

00:33:52,159 --> 00:33:54,720
you can choose what you want to do with

00:33:53,919 --> 00:33:56,559
it

00:33:54,720 --> 00:33:59,120
but most users don't want to spend the

00:33:56,559 --> 00:34:01,760
time making those decisions themselves

00:33:59,120 --> 00:34:02,799
which makes it hard to use it as is in

00:34:01,760 --> 00:34:05,039
large deployments

00:34:02,799 --> 00:34:06,960
someone needs to be the one applying the

00:34:05,039 --> 00:34:10,560
customizations to make the district work

00:34:06,960 --> 00:34:12,240
out of the box in the description of

00:34:10,560 --> 00:34:13,679
this talk i promised that i would talk

00:34:12,240 --> 00:34:16,240
about the relevance of the os

00:34:13,679 --> 00:34:17,200
in the years to come of course i'm no

00:34:16,240 --> 00:34:19,040
fortune teller

00:34:17,200 --> 00:34:21,599
i don't really know what the future

00:34:19,040 --> 00:34:24,720
would bring but there are tendencies

00:34:21,599 --> 00:34:26,480
and we can talk about those tendencies

00:34:24,720 --> 00:34:28,399
it's possible that you're old-fashioned

00:34:26,480 --> 00:34:29,040
like me and you would prefer that things

00:34:28,399 --> 00:34:32,879
stayed like

00:34:29,040 --> 00:34:34,079
they were 10 years ago but it's just not

00:34:32,879 --> 00:34:36,560
going to happen

00:34:34,079 --> 00:34:37,839
the tendency is that linux distribution

00:34:36,560 --> 00:34:41,119
are becoming

00:34:37,839 --> 00:34:41,679
less and less important over the past 10

00:34:41,119 --> 00:34:43,839
years

00:34:41,679 --> 00:34:45,760
installing libraries and modules outside

00:34:43,839 --> 00:34:48,800
of the main os became the norm

00:34:45,760 --> 00:34:52,159
rather than the exception there's pi pi

00:34:48,800 --> 00:34:54,320
the ruby gems and node.js ships separate

00:34:52,159 --> 00:34:56,800
packages for everything including how to

00:34:54,320 --> 00:34:58,960
check if a number is even

00:34:56,800 --> 00:35:00,960
but it's not just about programming

00:34:58,960 --> 00:35:02,800
languages this tendency to ignore the

00:35:00,960 --> 00:35:04,560
underlying this draw means that a

00:35:02,800 --> 00:35:06,640
growing number of programs come with

00:35:04,560 --> 00:35:09,839
their own package management system

00:35:06,640 --> 00:35:12,160
for extensions or plugins this includes

00:35:09,839 --> 00:35:15,359
a wide array of programs like

00:35:12,160 --> 00:35:17,119
firefox cinnamon and veeam has like four

00:35:15,359 --> 00:35:20,000
of them

00:35:17,119 --> 00:35:21,200
so including their own way to install

00:35:20,000 --> 00:35:23,520
add-ons has

00:35:21,200 --> 00:35:25,280
has some advantages for example it

00:35:23,520 --> 00:35:27,520
avoids the bottleneck of packages

00:35:25,280 --> 00:35:29,839
getting ingested by the distribution

00:35:27,520 --> 00:35:31,920
everything just goes faster and it

00:35:29,839 --> 00:35:33,599
abstracts installing these addons from

00:35:31,920 --> 00:35:35,359
the underlying destroy it doesn't matter

00:35:33,599 --> 00:35:36,160
if you have to use apt or yam or

00:35:35,359 --> 00:35:37,839
whatever

00:35:36,160 --> 00:35:39,440
because you just use their own package

00:35:37,839 --> 00:35:41,280
management system

00:35:39,440 --> 00:35:42,960
of course there's a reason why linux

00:35:41,280 --> 00:35:44,640
distribution exists in the first place

00:35:42,960 --> 00:35:47,680
so bypassing them

00:35:44,640 --> 00:35:48,079
comes with disadvantages there's less or

00:35:47,680 --> 00:35:50,320
no

00:35:48,079 --> 00:35:51,440
quality control there's less or no

00:35:50,320 --> 00:35:54,720
security updates

00:35:51,440 --> 00:35:56,480
in particular for older versions and

00:35:54,720 --> 00:35:59,440
there's no integration with the rest of

00:35:56,480 --> 00:36:01,200
the system in other words by making it

00:35:59,440 --> 00:36:03,599
super easy for users

00:36:01,200 --> 00:36:05,680
to install the latest flashy thing it

00:36:03,599 --> 00:36:08,000
also makes it super easy for them to

00:36:05,680 --> 00:36:10,560
install random buggy insecure or even

00:36:08,000 --> 00:36:12,720
malicious software

00:36:10,560 --> 00:36:15,440
but users want the flashy things so they

00:36:12,720 --> 00:36:18,079
will mostly ignore these concerns

00:36:15,440 --> 00:36:19,520
the next step on this trend towards

00:36:18,079 --> 00:36:20,480
making distributions less and less

00:36:19,520 --> 00:36:22,240
relevant

00:36:20,480 --> 00:36:24,240
is running some form of contained

00:36:22,240 --> 00:36:25,520
applications on top of a thin layer of

00:36:24,240 --> 00:36:27,200
the os

00:36:25,520 --> 00:36:29,839
the contained applications could be

00:36:27,200 --> 00:36:32,880
docker container snaps flat

00:36:29,839 --> 00:36:35,359
flat packs or what have you i remember

00:36:32,880 --> 00:36:37,839
back in 2015 i attended the talk by a

00:36:35,359 --> 00:36:40,079
docker developer who showed how she ran

00:36:37,839 --> 00:36:42,400
each of her graphical applications

00:36:40,079 --> 00:36:44,880
inside a separate container

00:36:42,400 --> 00:36:45,680
back then this sounded rather over the

00:36:44,880 --> 00:36:48,640
top

00:36:45,680 --> 00:36:50,560
today this sounds normal i do this

00:36:48,640 --> 00:36:51,920
myself for applications that i don't

00:36:50,560 --> 00:36:54,079
trust

00:36:51,920 --> 00:36:55,599
running everything inside containers has

00:36:54,079 --> 00:36:57,760
a bunch of bad consequences

00:36:55,599 --> 00:36:59,520
which could probably feel its own talk

00:36:57,760 --> 00:37:00,720
personally the thing that worries me the

00:36:59,520 --> 00:37:02,400
most is security

00:37:00,720 --> 00:37:04,000
because you need to make sure that all

00:37:02,400 --> 00:37:07,599
the software inside those boxes

00:37:04,000 --> 00:37:09,440
is updated on top of that there's also a

00:37:07,599 --> 00:37:12,000
disk a network blocked

00:37:09,440 --> 00:37:13,520
most people don't care it's 2020 why

00:37:12,000 --> 00:37:15,920
should we care about a few hundred

00:37:13,520 --> 00:37:17,839
megabytes of wasted space

00:37:15,920 --> 00:37:19,599
i feel this excludes people that are in

00:37:17,839 --> 00:37:21,440
less privileged parts of the world where

00:37:19,599 --> 00:37:22,640
network and this space are still

00:37:21,440 --> 00:37:24,800
expensive

00:37:22,640 --> 00:37:26,400
and it's also wasteful transmitting and

00:37:24,800 --> 00:37:27,760
storing this data uses valuable

00:37:26,400 --> 00:37:29,440
resources that could be used for

00:37:27,760 --> 00:37:32,720
something else

00:37:29,440 --> 00:37:35,040
and again even if you and me don't like

00:37:32,720 --> 00:37:37,359
this tendency it's here to stay

00:37:35,040 --> 00:37:39,440
so we need to deal with it instead of

00:37:37,359 --> 00:37:41,200
ranting about how all these millennials

00:37:39,440 --> 00:37:43,119
don't know what it was like to install

00:37:41,200 --> 00:37:44,720
debian from boot floppies

00:37:43,119 --> 00:37:47,440
we need to figure out how to keep

00:37:44,720 --> 00:37:50,400
enabling our users to do what they want

00:37:47,440 --> 00:37:52,320
and keep our distribution relevant how

00:37:50,400 --> 00:37:54,320
can deviant provide value in this new

00:37:52,320 --> 00:37:56,000
containerized world

00:37:54,320 --> 00:37:58,320
there's a bunch of things we can do once

00:37:56,000 --> 00:38:00,000
we stop denying reality

00:37:58,320 --> 00:38:02,720
and i don't claim to have the answers

00:38:00,000 --> 00:38:04,800
here but i might have a few suggestions

00:38:02,720 --> 00:38:06,640
for example we can make it easy for

00:38:04,800 --> 00:38:07,760
users to update the contents of their

00:38:06,640 --> 00:38:10,079
containers

00:38:07,760 --> 00:38:11,440
we could perhaps have some system

00:38:10,079 --> 00:38:14,400
managed containers

00:38:11,440 --> 00:38:15,280
and then have tooling like upgrade

00:38:14,400 --> 00:38:17,599
containers

00:38:15,280 --> 00:38:19,599
that take care of upgrading everything

00:38:17,599 --> 00:38:21,680
inside these containers

00:38:19,599 --> 00:38:23,760
we can also provide tools to manage like

00:38:21,680 --> 00:38:25,040
these different arrays of like snaps

00:38:23,760 --> 00:38:28,640
flagstars docker

00:38:25,040 --> 00:38:32,000
etc in the system or keep track

00:38:28,640 --> 00:38:35,359
of where things got installed from so

00:38:32,000 --> 00:38:37,680
if a user use pi pi or npm

00:38:35,359 --> 00:38:39,520
keep track of everything and then make

00:38:37,680 --> 00:38:43,520
sure it gets updated

00:38:39,520 --> 00:38:44,320
as necessary and we could also make it

00:38:43,520 --> 00:38:46,960
easy to

00:38:44,320 --> 00:38:47,680
save space by avoiding repeated code and

00:38:46,960 --> 00:38:49,599
i know

00:38:47,680 --> 00:38:50,720
that share libraries is the answer but

00:38:49,599 --> 00:38:52,320
it's the old answer

00:38:50,720 --> 00:38:54,800
and it's less relevant in the current

00:38:52,320 --> 00:38:56,800
world so maybe we can help deliver

00:38:54,800 --> 00:38:59,359
something like shared libraries but

00:38:56,800 --> 00:39:00,240
for containers i don't know what the

00:38:59,359 --> 00:39:02,240
answer there is

00:39:00,240 --> 00:39:04,480
but maybe someone in the audience does

00:39:02,240 --> 00:39:06,079
so if if you are thinking about this

00:39:04,480 --> 00:39:07,920
maybe it's time to start your own

00:39:06,079 --> 00:39:09,440
project

00:39:07,920 --> 00:39:11,760
something that we could do to make it

00:39:09,440 --> 00:39:15,920
really easy to for users to generate

00:39:11,760 --> 00:39:18,880
minimal images for system would be to

00:39:15,920 --> 00:39:20,800
allow to not have all these essential

00:39:18,880 --> 00:39:22,640
packages which are not necessarily

00:39:20,800 --> 00:39:23,920
essential if what you are going to run

00:39:22,640 --> 00:39:26,240
on top of that

00:39:23,920 --> 00:39:28,079
is a frozen system so if you are not

00:39:26,240 --> 00:39:31,359
going to install packages

00:39:28,079 --> 00:39:34,800
on your deviant image you don't need apt

00:39:31,359 --> 00:39:34,800
you maybe even don't need perl

00:39:36,079 --> 00:39:39,599
and these are just some suggestions i'm

00:39:37,760 --> 00:39:41,040
sure you can come up with more

00:39:39,599 --> 00:39:42,880
i don't believe i have the actual

00:39:41,040 --> 00:39:44,800
answers to the problems i've had but i

00:39:42,880 --> 00:39:46,640
do know that if we want to keep deviant

00:39:44,800 --> 00:39:47,920
relevant we want to keep delivering

00:39:46,640 --> 00:39:50,079
value to our users

00:39:47,920 --> 00:39:51,200
and we need to start thinking about this

00:39:50,079 --> 00:39:53,680
hard

00:39:51,200 --> 00:39:53,680
and now

00:39:55,359 --> 00:39:58,800
thanks for listening i hope you enjoyed

00:39:57,839 --> 00:40:02,640
it and

00:39:58,800 --> 00:40:02,640
i'm now ready to answer your questions

00:40:05,040 --> 00:40:08,960
so the first question in the etherpad is

00:40:07,760 --> 00:40:10,880
what happened to the

00:40:08,960 --> 00:40:12,319
linux system at google to chillin what's

00:40:10,880 --> 00:40:14,160
the state now so

00:40:12,319 --> 00:40:16,000
i'm no longer working at google so i

00:40:14,160 --> 00:40:18,240
can't tell for sure but

00:40:16,000 --> 00:40:19,200
the last i've heard it's still being

00:40:18,240 --> 00:40:22,880
used still

00:40:19,200 --> 00:40:24,319
tracking the testing uh sort of of

00:40:22,880 --> 00:40:28,079
course like

00:40:24,319 --> 00:40:28,079
problems happen but uh

00:40:28,240 --> 00:40:35,119
as they heard it's still on track

00:40:31,599 --> 00:40:37,760
um okay uh

00:40:35,119 --> 00:40:40,480
talk meister do you want to ask me the

00:40:37,760 --> 00:40:40,480
second question

00:40:40,880 --> 00:40:45,839
all right sorry about that um so the

00:40:43,680 --> 00:40:49,280
next question what

00:40:45,839 --> 00:40:51,440
okay true name what is this thing was

00:40:49,280 --> 00:40:54,000
supported by our co-os

00:40:51,440 --> 00:40:55,280
and it's now to put back the red x do

00:40:54,000 --> 00:40:57,040
you know if there's something similar

00:40:55,280 --> 00:41:00,160
that will run on debian

00:40:57,040 --> 00:41:03,359
to get matches or another

00:41:00,160 --> 00:41:06,800
platform uh so right uh

00:41:03,359 --> 00:41:08,960
this is a slightly small product bug uh

00:41:06,800 --> 00:41:10,480
kim fox the company that i work at also

00:41:08,960 --> 00:41:12,880
has coordinators

00:41:10,480 --> 00:41:14,560
uh product similar to tectonic except

00:41:12,880 --> 00:41:16,240
it's all open source because tectonic

00:41:14,560 --> 00:41:19,200
was not all open source

00:41:16,240 --> 00:41:20,000
uh and it's called locomotive with a k

00:41:19,200 --> 00:41:23,760
and

00:41:20,000 --> 00:41:27,040
it's not debian it uses flutter for the

00:41:23,760 --> 00:41:30,079
os in the containers i do not know of

00:41:27,040 --> 00:41:32,839
any system that uses debian

00:41:30,079 --> 00:41:34,000
in particular as i mentioned in the talk

00:41:32,839 --> 00:41:36,560
uh

00:41:34,000 --> 00:41:38,880
would need to make some steps in order

00:41:36,560 --> 00:41:42,160
to become a little bit more immutable

00:41:38,880 --> 00:41:44,800
to make a good os for running

00:41:42,160 --> 00:41:44,800
kubernetes

00:41:46,880 --> 00:41:52,160
thank you very much um the next question

00:41:50,319 --> 00:41:56,640
that we have is what kind of

00:41:52,160 --> 00:41:58,480
quality uh weekly release

00:41:56,640 --> 00:42:00,880
uh yeah so i mentioned a little bit

00:41:58,480 --> 00:42:04,160
about this we had attitude

00:42:00,880 --> 00:42:04,560
that run on hardware on actual hardware

00:42:04,160 --> 00:42:07,440
and

00:42:04,560 --> 00:42:08,079
visualize machines as well and it

00:42:07,440 --> 00:42:10,160
included

00:42:08,079 --> 00:42:11,119
a lot of different tests for a lot of

00:42:10,160 --> 00:42:14,400
different

00:42:11,119 --> 00:42:15,520
cases and so every time that we would

00:42:14,400 --> 00:42:17,520
put out a release

00:42:15,520 --> 00:42:20,079
it would go through this test suit and

00:42:17,520 --> 00:42:21,359
only go out if all the tests passed if

00:42:20,079 --> 00:42:23,440
it has failed

00:42:21,359 --> 00:42:24,560
then we would like investigate what was

00:42:23,440 --> 00:42:26,720
the problem

00:42:24,560 --> 00:42:27,839
sometimes it was that the test needed to

00:42:26,720 --> 00:42:30,160
be fixed but

00:42:27,839 --> 00:42:31,599
most usually it was something in the

00:42:30,160 --> 00:42:36,000
software stack was broken

00:42:31,599 --> 00:42:36,000
and so we got that fixed

00:42:39,760 --> 00:42:43,760
okay thank you thank you let's see we

00:42:42,720 --> 00:42:46,640
should have a little

00:42:43,760 --> 00:42:47,680
a few more minutes the next question is

00:42:46,640 --> 00:42:51,280
is there anything

00:42:47,680 --> 00:42:52,960
in the liner trust me

00:42:51,280 --> 00:42:54,720
actually we should be available

00:42:52,960 --> 00:42:56,800
especially

00:42:54,720 --> 00:42:57,760
yeah so this is a hard question because

00:42:56,800 --> 00:43:01,839
like

00:42:57,760 --> 00:43:03,200
yes there's a lot of things that we use

00:43:01,839 --> 00:43:04,880
that the genius uh

00:43:03,200 --> 00:43:06,640
indigenous team in our infrastructure

00:43:04,880 --> 00:43:09,599
that i wished could be

00:43:06,640 --> 00:43:11,520
available as free software um this

00:43:09,599 --> 00:43:13,680
testing infrastructure that i mentioned

00:43:11,520 --> 00:43:14,800
that was harnessing all these different

00:43:13,680 --> 00:43:17,920
machines

00:43:14,800 --> 00:43:19,760
and uh the one of the systems i wrote

00:43:17,920 --> 00:43:22,240
was the system that orchestrated

00:43:19,760 --> 00:43:23,920
ingesting new badges into the system

00:43:22,240 --> 00:43:27,200
like packages for testing

00:43:23,920 --> 00:43:29,920
test deviant testing got built and

00:43:27,200 --> 00:43:31,040
uh then tested and then if they passed

00:43:29,920 --> 00:43:34,720
all the tests they got

00:43:31,040 --> 00:43:36,880
into the next release and the problem

00:43:34,720 --> 00:43:38,720
one of the problems that makes it hard

00:43:36,880 --> 00:43:39,760
to release this kind of software is that

00:43:38,720 --> 00:43:41,760
it's very much

00:43:39,760 --> 00:43:43,280
intertwined with internal google

00:43:41,760 --> 00:43:45,839
technologies that are not free

00:43:43,280 --> 00:43:47,040
so even if that code could be free it

00:43:45,839 --> 00:43:51,680
wouldn't work

00:43:47,040 --> 00:43:51,680
without this whole stack of non-free

00:43:52,839 --> 00:43:58,800
software

00:43:54,160 --> 00:44:04,000
thank you very much it looks like we

00:43:58,800 --> 00:44:04,000
might just take one last question okay

00:44:06,079 --> 00:44:09,599
okay ripping answered maybe please read

00:44:08,800 --> 00:44:13,040
over there

00:44:09,599 --> 00:44:16,160
what means using a container theme

00:44:13,040 --> 00:44:19,119
do you use it on workstations uh

00:44:16,160 --> 00:44:21,839
right so i do not use that car on my

00:44:19,119 --> 00:44:25,359
workstation i use debian

00:44:21,839 --> 00:44:28,480
i've heard of people that use container

00:44:25,359 --> 00:44:30,319
optimized oss in their workstations or

00:44:28,480 --> 00:44:32,160
laptops

00:44:30,319 --> 00:44:33,839
and in that case it would mean that

00:44:32,160 --> 00:44:34,319
absolutely everything that you're

00:44:33,839 --> 00:44:37,920
running

00:44:34,319 --> 00:44:40,720
is container and so this hang will work

00:44:37,920 --> 00:44:42,400
but it takes a lot of effort and while

00:44:40,720 --> 00:44:44,960
it's possible and maybe

00:44:42,400 --> 00:44:45,680
like for someone that is geeky enough uh

00:44:44,960 --> 00:44:48,640
it's

00:44:45,680 --> 00:44:49,520
a fun project it's not it's not the

00:44:48,640 --> 00:44:52,720
intention of the

00:44:49,520 --> 00:44:55,839
sdos is to be used in a server to run

00:44:52,720 --> 00:44:57,839
containerized applications so uh

00:44:55,839 --> 00:44:59,599
you're kind of pushing the limits and

00:44:57,839 --> 00:45:02,480
for that reason you're

00:44:59,599 --> 00:45:03,359
going to have a rough time but again if

00:45:02,480 --> 00:45:06,240
it's something that's

00:45:03,359 --> 00:45:06,240
for you that's great

00:45:09,200 --> 00:45:12,400
thank you very much for the well you

00:45:12,079 --> 00:45:16,000
heard

00:45:12,400 --> 00:45:18,319
all the pet talk and the penguins and

00:45:16,000 --> 00:45:20,160
perhaps the if we still want to answer

00:45:18,319 --> 00:45:21,119
for the other questions you can see them

00:45:20,160 --> 00:45:32,720
on the tent

00:45:21,119 --> 00:45:32,720

YouTube URL: https://www.youtube.com/watch?v=okn1jU6mzKc


