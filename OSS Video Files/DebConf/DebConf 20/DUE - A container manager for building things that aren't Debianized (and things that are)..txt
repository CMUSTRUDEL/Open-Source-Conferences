Title: DUE - A container manager for building things that aren't Debianized (and things that are).
Publication date: 2020-10-23
Playlist: DebConf 20
Description: 
	by Alex Doyle

At: DebConf20
https://debconf20.debconf.org/talks/7-due-a-container-manager-for-building-things-that-arent-debianized-and-things-that-are/

Dedicated User Environment (DUE) is an open source tool for creating and supporting different Debian based build environments.
Written in Bash, it is both a collection of wrapper scripts that allow for the configuration of build environments in Docker containers, and a launcher application that makes managing and working inside those containers as user friendly as possible. In addition, DUE supports  configurations that can make building most software for any Debian based operating system as easy as building a package.

Its user base can range from novice developers who want to try building something without changing their host machine configuration, to build systems engineers deploying it on shared user systems and integrating it with build automation.

In this talk I'll discuss the number of problems that DUE solves, why it used internally at Cumulus Networks/Nvidia to support our Jessie and Buster based releases of Cumulus Linux, and how it became the recommended build environment for the ONIE open source project.

Room: Talks
Scheduled start: 2020-08-23 22:00:00
Captions: 
	00:00:05,600 --> 00:00:08,480
hi everybody

00:00:06,399 --> 00:00:09,440
thanks for watching my talk on dedicated

00:00:08,480 --> 00:00:12,320
user environment

00:00:09,440 --> 00:00:12,880
or do creating build environments for

00:00:12,320 --> 00:00:16,320
debian

00:00:12,880 --> 00:00:17,840
and pretty much everything else i always

00:00:16,320 --> 00:00:18,400
like to start my talk with a summary

00:00:17,840 --> 00:00:21,199
just so

00:00:18,400 --> 00:00:22,560
everyone knows where i'm going so in

00:00:21,199 --> 00:00:25,279
this talk we'll have a

00:00:22,560 --> 00:00:26,960
project introduction describing it by

00:00:25,279 --> 00:00:28,560
make the case for why we should be using

00:00:26,960 --> 00:00:30,560
another build tool

00:00:28,560 --> 00:00:31,840
i provide a little bit of background on

00:00:30,560 --> 00:00:34,399
docker because do

00:00:31,840 --> 00:00:36,079
is a front end for that i provide some

00:00:34,399 --> 00:00:38,000
examples of problem build cases you

00:00:36,079 --> 00:00:40,000
might have encountered and how do can be

00:00:38,000 --> 00:00:41,680
used to resolve them

00:00:40,000 --> 00:00:43,280
i'll do a demonstration which is

00:00:41,680 --> 00:00:45,120
building a debian package for a

00:00:43,280 --> 00:00:47,840
different distribution than the one i'm

00:00:45,120 --> 00:00:49,120
currently building from i'll have a

00:00:47,840 --> 00:00:51,840
little discussion

00:00:49,120 --> 00:00:53,039
on how do can be used to build firmware

00:00:51,840 --> 00:00:54,719
and in conclusion

00:00:53,039 --> 00:00:58,320
do has solved a bunch of problems for me

00:00:54,719 --> 00:01:01,120
and i think it can do the same for you

00:00:58,320 --> 00:01:02,160
a little bit of project history here i'm

00:01:01,120 --> 00:01:04,159
alex doyle

00:01:02,160 --> 00:01:05,840
i am a build tools engineer who works on

00:01:04,159 --> 00:01:06,880
cumulus linux which is a debian

00:01:05,840 --> 00:01:09,520
derivative

00:01:06,880 --> 00:01:12,880
that currently ships versions based off

00:01:09,520 --> 00:01:14,000
of debian 8 jesse and debian 10 buster

00:01:12,880 --> 00:01:16,159
so you can see where i'd have an

00:01:14,000 --> 00:01:18,560
interest in building debian packages for

00:01:16,159 --> 00:01:20,320
different releases i also work on the

00:01:18,560 --> 00:01:22,320
open network install environment

00:01:20,320 --> 00:01:24,080
oni which is an open source firmware

00:01:22,320 --> 00:01:26,960
project for network switches

00:01:24,080 --> 00:01:29,119
that allows users to install network

00:01:26,960 --> 00:01:30,799
operating systems of their choice

00:01:29,119 --> 00:01:32,799
this becomes relevant a little bit later

00:01:30,799 --> 00:01:34,479
on

00:01:32,799 --> 00:01:36,479
and do came out of work i was already

00:01:34,479 --> 00:01:38,159
doing to support different releases

00:01:36,479 --> 00:01:40,720
cumulus which was recently acquired by

00:01:38,159 --> 00:01:42,159
nvidia let me open source this because

00:01:40,720 --> 00:01:44,079
they saw the value in making this sort

00:01:42,159 --> 00:01:46,240
of a tool publicly available

00:01:44,079 --> 00:01:48,000
it's had a lot of beta testing and if

00:01:46,240 --> 00:01:50,159
you ever need beta testers what you got

00:01:48,000 --> 00:01:51,680
to do is tell your co-workers i really

00:01:50,159 --> 00:01:55,200
shouldn't let you use this

00:01:51,680 --> 00:01:56,399
but and it works great i've been working

00:01:55,200 --> 00:01:58,320
on getting due into

00:01:56,399 --> 00:02:00,320
debian i've been working with debian

00:01:58,320 --> 00:02:01,840
developer gear at staffers

00:02:00,320 --> 00:02:03,280
to make a part of debian i hope i

00:02:01,840 --> 00:02:03,680
pronounced his name right because he has

00:02:03,280 --> 00:02:05,040
been

00:02:03,680 --> 00:02:07,680
excellent and incredibly helpful and

00:02:05,040 --> 00:02:09,840
professional in the whole process

00:02:07,680 --> 00:02:11,200
and as for the name why dedicated user

00:02:09,840 --> 00:02:14,319
environment

00:02:11,200 --> 00:02:15,120
well it builds purpose-built container

00:02:14,319 --> 00:02:17,599
environments

00:02:15,120 --> 00:02:18,959
so it's kind of descriptive for there do

00:02:17,599 --> 00:02:20,879
is quick to type

00:02:18,959 --> 00:02:22,560
and it wasn't already in use by anything

00:02:20,879 --> 00:02:24,560
else in linux that i could find

00:02:22,560 --> 00:02:25,920
probably because all the clever names

00:02:24,560 --> 00:02:28,400
have been taken

00:02:25,920 --> 00:02:29,599
yes i'm looking at you whale builder i'm

00:02:28,400 --> 00:02:30,959
just jealous i didn't think of that

00:02:29,599 --> 00:02:32,959
first

00:02:30,959 --> 00:02:34,879
and it is open source so i've got the

00:02:32,959 --> 00:02:37,840
url there and it'll show up a couple

00:02:34,879 --> 00:02:37,840
more times in my talk

00:02:38,000 --> 00:02:41,760
so why do we never need another build

00:02:39,680 --> 00:02:43,040
tool and this is

00:02:41,760 --> 00:02:45,040
not going to be a replacement for

00:02:43,040 --> 00:02:46,720
existing build tools but it's really

00:02:45,040 --> 00:02:48,319
more of a way to get the pre-configured

00:02:46,720 --> 00:02:51,360
build environment that you need

00:02:48,319 --> 00:02:53,040
for whatever you happen to be building

00:02:51,360 --> 00:02:55,840
let's look at some cases here getting

00:02:53,040 --> 00:02:58,720
progressively worse left to right

00:02:55,840 --> 00:03:00,800
if you're building a package for your

00:02:58,720 --> 00:03:04,080
current debian distribution

00:03:00,800 --> 00:03:04,480
and it's already debianized then you're

00:03:04,080 --> 00:03:07,200
set

00:03:04,480 --> 00:03:09,360
you just use apt to build it if you need

00:03:07,200 --> 00:03:12,080
to build for a different debian release

00:03:09,360 --> 00:03:13,360
that gets a little more complicated if

00:03:12,080 --> 00:03:15,680
you need to build

00:03:13,360 --> 00:03:16,800
for a package that is not debianized

00:03:15,680 --> 00:03:18,959
then you have to run

00:03:16,800 --> 00:03:20,239
make and configure maybe that works out

00:03:18,959 --> 00:03:21,599
and maybe it doesn't

00:03:20,239 --> 00:03:23,519
it doesn't always go as smoothly as it

00:03:21,599 --> 00:03:25,280
does when you're using apt

00:03:23,519 --> 00:03:27,120
and at the end of it what if you have to

00:03:25,280 --> 00:03:27,760
build something for a totally different

00:03:27,120 --> 00:03:30,400
target

00:03:27,760 --> 00:03:32,319
that is not at all debianized that

00:03:30,400 --> 00:03:33,680
becomes way more complicated

00:03:32,319 --> 00:03:35,599
but yet all of these things have the

00:03:33,680 --> 00:03:36,400
same steps you have to set up a build

00:03:35,599 --> 00:03:37,519
environment

00:03:36,400 --> 00:03:42,000
and then you have to build for your

00:03:37,519 --> 00:03:42,000
target so why is this difficult

00:03:42,239 --> 00:03:45,360
and i think that's the second question

00:03:43,680 --> 00:03:47,440
to ask why is it hard

00:03:45,360 --> 00:03:49,040
no the real question is why is building

00:03:47,440 --> 00:03:50,959
for debian easy

00:03:49,040 --> 00:03:53,200
and the answer is because debian tools

00:03:50,959 --> 00:03:54,560
make it as easy as it possibly could be

00:03:53,200 --> 00:03:56,400
to build anything

00:03:54,560 --> 00:03:58,560
your environmental setup is handled by

00:03:56,400 --> 00:04:00,879
apt because the author who

00:03:58,560 --> 00:04:03,040
wants you to build their code put build

00:04:00,879 --> 00:04:05,280
dependencies in it with a package

00:04:03,040 --> 00:04:06,959
build is handled by the d package tools

00:04:05,280 --> 00:04:08,319
because the author set up a rules file

00:04:06,959 --> 00:04:10,000
as a starting point

00:04:08,319 --> 00:04:11,680
and thus the user doesn't have to care

00:04:10,000 --> 00:04:13,120
because this just builds with the same

00:04:11,680 --> 00:04:15,280
set of steps for everything

00:04:13,120 --> 00:04:16,160
three steps get your source and install

00:04:15,280 --> 00:04:19,440
your dependencies

00:04:16,160 --> 00:04:19,440
and you build you're done

00:04:19,759 --> 00:04:23,280
why is everything else hard because

00:04:21,759 --> 00:04:25,759
while it has these same steps

00:04:23,280 --> 00:04:27,040
it's still the user's problem to get an

00:04:25,759 --> 00:04:29,360
environment to build in

00:04:27,040 --> 00:04:31,199
and configure it to build what would be

00:04:29,360 --> 00:04:32,479
nice here is a tool that lets the user

00:04:31,199 --> 00:04:34,000
create an environment

00:04:32,479 --> 00:04:36,560
that's already configured to build the

00:04:34,000 --> 00:04:38,080
software for whatever that operating

00:04:36,560 --> 00:04:39,840
system is

00:04:38,080 --> 00:04:42,560
and the first solution that most

00:04:39,840 --> 00:04:43,440
developers come up with when presented

00:04:42,560 --> 00:04:45,680
with this

00:04:43,440 --> 00:04:47,680
is use virtualization something like

00:04:45,680 --> 00:04:49,360
docker

00:04:47,680 --> 00:04:51,280
if you're not familiar with docker a

00:04:49,360 --> 00:04:53,520
quick background here it's a program for

00:04:51,280 --> 00:04:55,759
creating virtual build environments

00:04:53,520 --> 00:04:57,440
it creates these image files the docker

00:04:55,759 --> 00:04:59,199
runs as containers

00:04:57,440 --> 00:05:01,440
comes with debian 10 buster but it's

00:04:59,199 --> 00:05:02,800
also available as a download for earlier

00:05:01,440 --> 00:05:04,639
debian releases

00:05:02,800 --> 00:05:06,400
a docker container is a virtual

00:05:04,639 --> 00:05:07,680
computing environment that gets run from

00:05:06,400 --> 00:05:10,080
an image file

00:05:07,680 --> 00:05:11,440
many containers can be run from the same

00:05:10,080 --> 00:05:14,160
docker image

00:05:11,440 --> 00:05:16,560
a docker image file is all the binaries

00:05:14,160 --> 00:05:18,320
to define a virtual environment

00:05:16,560 --> 00:05:20,479
and the image files get created by

00:05:18,320 --> 00:05:22,160
docker files which spec out exactly what

00:05:20,479 --> 00:05:24,479
goes in and what sort of configuration

00:05:22,160 --> 00:05:26,320
has to happen there

00:05:24,479 --> 00:05:28,320
now pre-built image files containing

00:05:26,320 --> 00:05:30,560
applications and operating systems are

00:05:28,320 --> 00:05:32,560
available for download on docker hub

00:05:30,560 --> 00:05:33,680
or you can build your own but the point

00:05:32,560 --> 00:05:35,680
is the docker is

00:05:33,680 --> 00:05:36,720
fairly well proved out it's available

00:05:35,680 --> 00:05:38,479
everywhere

00:05:36,720 --> 00:05:40,960
and if you're running buster or later

00:05:38,479 --> 00:05:45,039
it's just an app get to install it

00:05:40,960 --> 00:05:45,039
but it does require some level of effort

00:05:45,360 --> 00:05:50,639
in my experience docker is more of a

00:05:48,320 --> 00:05:52,240
programming language than an application

00:05:50,639 --> 00:05:54,639
it's incredibly powerful and very

00:05:52,240 --> 00:05:55,440
flexible but it has a cost and ease of

00:05:54,639 --> 00:05:56,880
use

00:05:55,440 --> 00:05:58,479
and this is fine if you're only using it

00:05:56,880 --> 00:06:01,600
to configure something once

00:05:58,479 --> 00:06:02,960
and you're done with it however i

00:06:01,600 --> 00:06:04,800
frequently want to do the same thing

00:06:02,960 --> 00:06:06,000
with slight variations i need to build

00:06:04,800 --> 00:06:08,560
deviant packages

00:06:06,000 --> 00:06:10,160
but i need to build them for a different

00:06:08,560 --> 00:06:12,479
operating system release

00:06:10,160 --> 00:06:14,240
i need to build for an operating system

00:06:12,479 --> 00:06:16,000
release but i need to use a different

00:06:14,240 --> 00:06:17,360
sources list to pull in development

00:06:16,000 --> 00:06:20,479
versions of packages

00:06:17,360 --> 00:06:23,120
or release versions of packages or

00:06:20,479 --> 00:06:24,560
as the project lead for oni i need to

00:06:23,120 --> 00:06:26,240
build something that doesn't remotely

00:06:24,560 --> 00:06:29,680
build for debian but i'd like it to be

00:06:26,240 --> 00:06:32,319
as easy as it is to build for debian

00:06:29,680 --> 00:06:34,160
so in order to get docker to do this i

00:06:32,319 --> 00:06:35,360
needed a tool that would allow settings

00:06:34,160 --> 00:06:38,080
of defaults

00:06:35,360 --> 00:06:39,520
for image creation and for runtime

00:06:38,080 --> 00:06:41,440
there's a lot of typing and setting up a

00:06:39,520 --> 00:06:44,319
docker file to create an image file

00:06:41,440 --> 00:06:45,520
there's a lot of typing to get a docker

00:06:44,319 --> 00:06:47,360
file to run

00:06:45,520 --> 00:06:49,440
and be convenient to use at the same

00:06:47,360 --> 00:06:50,240
time this is especially true if you

00:06:49,440 --> 00:06:52,479
happen to

00:06:50,240 --> 00:06:54,000
need to be in the docker file if it's a

00:06:52,479 --> 00:06:55,039
build environment where you're debugging

00:06:54,000 --> 00:06:56,080
something

00:06:55,039 --> 00:06:57,840
you're going to be spending a lot of

00:06:56,080 --> 00:06:59,840
time in there it would be nice it was if

00:06:57,840 --> 00:07:02,960
it was comfortable

00:06:59,840 --> 00:07:04,800
so the point is all of this can be done

00:07:02,960 --> 00:07:07,039
without wrapping docker but it's a lot

00:07:04,800 --> 00:07:08,720
of typing it's a lot of edge cases it's

00:07:07,039 --> 00:07:10,160
a lot of things that are mostly one-offs

00:07:08,720 --> 00:07:12,720
for people and really

00:07:10,160 --> 00:07:14,240
nobody's gonna want to do that unless

00:07:12,720 --> 00:07:15,840
you're somebody like me who's dealing

00:07:14,240 --> 00:07:18,160
with it constantly

00:07:15,840 --> 00:07:21,120
then the investment in getting that one

00:07:18,160 --> 00:07:22,639
thing right pays off

00:07:21,120 --> 00:07:24,160
so right now i'd like to do a quick

00:07:22,639 --> 00:07:25,199
demonstration just to show you what this

00:07:24,160 --> 00:07:27,680
looks like

00:07:25,199 --> 00:07:28,560
i'll build package watchdog for debian

00:07:27,680 --> 00:07:31,599
10 buster

00:07:28,560 --> 00:07:34,319
from ubuntu 18 system this will

00:07:31,599 --> 00:07:35,440
illustrate the build workflow how we

00:07:34,319 --> 00:07:37,840
create

00:07:35,440 --> 00:07:40,080
an image to then run as a container some

00:07:37,840 --> 00:07:41,759
of the container runtime features

00:07:40,080 --> 00:07:43,520
in the aspects of building inside the

00:07:41,759 --> 00:07:44,960
container and using it as a debug

00:07:43,520 --> 00:07:47,039
environment

00:07:44,960 --> 00:07:48,720
uh it does not demonstrate a whole bunch

00:07:47,039 --> 00:07:49,360
of other things that do does that are

00:07:48,720 --> 00:07:51,360
basically

00:07:49,360 --> 00:07:52,479
clever docker tricks that i figured out

00:07:51,360 --> 00:07:54,639
at one point and

00:07:52,479 --> 00:07:56,479
wrote down to make easy it's got

00:07:54,639 --> 00:07:57,919
automation features so you can run

00:07:56,479 --> 00:07:59,759
a command in the container without

00:07:57,919 --> 00:08:01,039
having to log into it

00:07:59,759 --> 00:08:02,960
there's commands from managing

00:08:01,039 --> 00:08:05,120
containers adding deleting

00:08:02,960 --> 00:08:06,720
observing and a bunch of other nice to

00:08:05,120 --> 00:08:08,160
have features like being able to log

00:08:06,720 --> 00:08:10,080
into a running container

00:08:08,160 --> 00:08:11,599
without a whole lot of typing whole

00:08:10,080 --> 00:08:12,800
bunch of stuff it's in the man pages and

00:08:11,599 --> 00:08:16,240
the documentation

00:08:12,800 --> 00:08:16,240
but it's beyond the scope of this talk

00:08:16,319 --> 00:08:20,319
so if we take a look at my demo system

00:08:18,080 --> 00:08:20,319
here

00:08:21,599 --> 00:08:25,680
you can see that it's an ubuntu system

00:08:23,680 --> 00:08:27,360
and if i had to build a package for say

00:08:25,680 --> 00:08:29,199
debbie and buster

00:08:27,360 --> 00:08:30,960
it'd be rather difficult but fortunately

00:08:29,199 --> 00:08:31,599
do will create a virtual environment for

00:08:30,960 --> 00:08:34,000
me

00:08:31,599 --> 00:08:35,039
so since i can't remember exactly how it

00:08:34,000 --> 00:08:37,440
does that

00:08:35,039 --> 00:08:37,440
i type

00:08:38,959 --> 00:08:43,120
take a look at the help from my

00:08:40,000 --> 00:08:46,160
installed copy of do i see down here oh

00:08:43,120 --> 00:08:47,519
there's one for debian 10. so i will

00:08:46,160 --> 00:08:55,839
just copy

00:08:47,519 --> 00:08:55,839
that example

00:08:56,480 --> 00:09:03,200
and what it will do is now download a

00:09:00,000 --> 00:09:05,600
debian 10 docker image from

00:09:03,200 --> 00:09:07,360
docker hub and then it will run a couple

00:09:05,600 --> 00:09:10,880
of modifications on that to

00:09:07,360 --> 00:09:13,920
add some nice to have features and

00:09:10,880 --> 00:09:13,920
create me a container

00:09:14,880 --> 00:09:18,720
okay here we are a few minutes later

00:09:16,959 --> 00:09:20,480
it's downloaded a bunch of packages and

00:09:18,720 --> 00:09:22,640
installed them

00:09:20,480 --> 00:09:25,040
and created my container now if i take a

00:09:22,640 --> 00:09:26,720
look at the

00:09:25,040 --> 00:09:28,880
command i'd originally run here just to

00:09:26,720 --> 00:09:31,680
break this down um

00:09:28,880 --> 00:09:33,279
do takes the argument uh from debian 10

00:09:31,680 --> 00:09:35,200
that's the name of the base docker image

00:09:33,279 --> 00:09:38,480
that it used to create the

00:09:35,200 --> 00:09:40,240
its new docker image off of uh

00:09:38,480 --> 00:09:41,760
provides a description of what the

00:09:40,240 --> 00:09:44,399
docker container will look like

00:09:41,760 --> 00:09:45,920
that names it sets a prompt within the

00:09:44,399 --> 00:09:47,519
docker container so it's obvious that

00:09:45,920 --> 00:09:49,519
you're in a docker container or at least

00:09:47,519 --> 00:09:51,839
you have the chance of noticing that

00:09:49,519 --> 00:09:53,760
and then tags the image and then uses

00:09:51,839 --> 00:09:55,440
template debian package which is part of

00:09:53,760 --> 00:09:58,720
do that tells it to configure itself to

00:09:55,440 --> 00:09:58,720
build debian packages

00:09:59,519 --> 00:10:05,839
so let me split into two windows here so

00:10:01,440 --> 00:10:05,839
if i do

00:10:06,320 --> 00:10:08,640
great

00:10:11,839 --> 00:10:14,800
so in one i'll stay on my host system

00:10:13,440 --> 00:10:16,839
and the other will go into the container

00:10:14,800 --> 00:10:20,320
so if i type do

00:10:16,839 --> 00:10:21,600
run i had a

00:10:20,320 --> 00:10:24,079
docker image already set up and

00:10:21,600 --> 00:10:25,360
configured here to build for ubuntu

00:10:24,079 --> 00:10:26,880
but it's giving me a choice of the one i

00:10:25,360 --> 00:10:29,680
want to run so i want to build for our

00:10:26,880 --> 00:10:29,680
debian 10.

00:10:31,600 --> 00:10:34,800
and so let's take a quick look at what

00:10:32,800 --> 00:10:35,519
it just did here so this wraps docker

00:10:34,800 --> 00:10:36,880
commands

00:10:35,519 --> 00:10:39,360
and what it's done here is set up a

00:10:36,880 --> 00:10:42,320
docker container instance that is

00:10:39,360 --> 00:10:45,440
interactive uh set up for terminal it

00:10:42,320 --> 00:10:46,880
will delete it when it's done

00:10:45,440 --> 00:10:48,480
it's mounted my home directory here

00:10:46,880 --> 00:10:50,000
which is incredibly useful

00:10:48,480 --> 00:10:51,600
and it's also running this script called

00:10:50,000 --> 00:10:53,200
container create user

00:10:51,600 --> 00:10:55,519
which creates an account for me within

00:10:53,200 --> 00:10:57,440
the container so i retain my user id

00:10:55,519 --> 00:10:58,880
so it's basically like i'm still on the

00:10:57,440 --> 00:11:00,240
same system

00:10:58,880 --> 00:11:02,240
it tells me how many containers i'm

00:11:00,240 --> 00:11:03,440
currently running

00:11:02,240 --> 00:11:05,440
let's me know that i've been created as

00:11:03,440 --> 00:11:07,600
a user id

00:11:05,440 --> 00:11:10,880
and now i'm logged in so if i take a

00:11:07,600 --> 00:11:10,880
look at my directory in the container

00:11:11,519 --> 00:11:16,000
that's all of what i've got in my home

00:11:13,360 --> 00:11:21,279
directory if i take a look at my

00:11:16,000 --> 00:11:24,240
account on my demo system

00:11:21,279 --> 00:11:25,600
we can see it's the same directory so

00:11:24,240 --> 00:11:26,480
now that we've got the container running

00:11:25,600 --> 00:11:27,680
in the right pane

00:11:26,480 --> 00:11:30,160
we can see that we're in a buster

00:11:27,680 --> 00:11:30,160
environment

00:11:31,279 --> 00:11:35,680
and the pain on the left continues to be

00:11:32,959 --> 00:11:35,680
the host system

00:11:38,160 --> 00:11:42,079
which is still running ubuntu now to

00:11:40,399 --> 00:11:44,240
build a package like watchdog you may

00:11:42,079 --> 00:11:46,160
have to edit the app sources list file

00:11:44,240 --> 00:11:47,600
to add debian source entries

00:11:46,160 --> 00:11:49,120
a lot of the containers that you'll pull

00:11:47,600 --> 00:11:51,360
out of docker hub do not seem to have

00:11:49,120 --> 00:11:51,360
this

00:11:54,399 --> 00:11:57,839
but i've edited that off screen to add

00:11:56,000 --> 00:12:00,880
the dev source entries so if we get the

00:11:57,839 --> 00:12:00,880
source for watchdog

00:12:05,839 --> 00:12:11,839
okay you can see it's pulled from the

00:12:07,279 --> 00:12:11,839
debian buster repository there

00:12:13,680 --> 00:12:25,839
and we'll get the app sources build

00:12:15,760 --> 00:12:25,839
dependencies for that

00:12:31,839 --> 00:12:39,839
so we're in the watchdog directory let's

00:12:36,839 --> 00:12:39,839
build

00:12:42,959 --> 00:12:46,399
and this will take a minute so i'm going

00:12:44,320 --> 00:12:52,079
to jump cut

00:12:46,399 --> 00:12:54,079
now if we take a look at our build area

00:12:52,079 --> 00:12:57,440
as is typical with debian package builds

00:12:54,079 --> 00:12:57,440
it puts the debs one level up

00:12:59,279 --> 00:13:03,120
and there we can see we have a dab

00:13:03,200 --> 00:13:08,720
now what's nice about this because it's

00:13:04,839 --> 00:13:08,720
due is it on the host

00:13:08,880 --> 00:13:14,160
we also have the same dev because it

00:13:10,800 --> 00:13:14,160
mounted the user's home directory

00:13:15,760 --> 00:13:20,160
and to exit the container all i have to

00:13:17,440 --> 00:13:21,519
do is type exit

00:13:20,160 --> 00:13:25,279
and you can see from the prompt change

00:13:21,519 --> 00:13:25,279
that i'm back on the ubuntu host

00:13:26,800 --> 00:13:30,480
so that was building watchdog for a

00:13:28,639 --> 00:13:32,320
different debian distribution

00:13:30,480 --> 00:13:33,760
let's take a closer look at what was

00:13:32,320 --> 00:13:36,240
going on in some of those steps where

00:13:33,760 --> 00:13:38,959
the docker image was actually created

00:13:36,240 --> 00:13:39,600
so our base image was a debian buster

00:13:38,959 --> 00:13:41,120
image

00:13:39,600 --> 00:13:43,120
so that's most of the operating system

00:13:41,120 --> 00:13:44,959
right there we added some

00:13:43,120 --> 00:13:46,880
do features that are common to all do

00:13:44,959 --> 00:13:48,320
containers that it expects to be there

00:13:46,880 --> 00:13:51,199
things like the script that creates the

00:13:48,320 --> 00:13:53,120
user in the container with the same user

00:13:51,199 --> 00:13:53,519
id they have outside of the container so

00:13:53,120 --> 00:13:55,519
that

00:13:53,519 --> 00:13:56,880
all files created by the container that

00:13:55,519 --> 00:13:59,839
are left behind on the host

00:13:56,880 --> 00:14:01,040
are owned by them we add some stuff to

00:13:59,839 --> 00:14:03,120
configure it

00:14:01,040 --> 00:14:05,600
in its role as a debian package build

00:14:03,120 --> 00:14:05,600
container

00:14:05,920 --> 00:14:11,680
and then we use the do runtime app to

00:14:09,839 --> 00:14:13,199
define the image we're going to create

00:14:11,680 --> 00:14:17,839
and actually run it and supply a bunch

00:14:13,199 --> 00:14:19,839
of defaults to make that easier

00:14:17,839 --> 00:14:21,920
however we can take this a step further

00:14:19,839 --> 00:14:23,839
building debian packages is still

00:14:21,920 --> 00:14:25,360
pretty familiar let's add a little bit

00:14:23,839 --> 00:14:27,199
more out to the extremes and build

00:14:25,360 --> 00:14:28,959
something that isn't debianized

00:14:27,199 --> 00:14:31,440
doesn't build a package and won't even

00:14:28,959 --> 00:14:33,040
run on debian

00:14:31,440 --> 00:14:34,800
this is where i get back to my role as

00:14:33,040 --> 00:14:37,279
project lead for ony

00:14:34,800 --> 00:14:38,480
which is firmware that runs on network

00:14:37,279 --> 00:14:41,199
switches

00:14:38,480 --> 00:14:41,199
so from this

00:14:41,839 --> 00:14:45,600
let's see how this is going to work so

00:14:44,079 --> 00:14:48,000
we start with our base docker image

00:14:45,600 --> 00:14:50,480
which is stretch

00:14:48,000 --> 00:14:51,680
and we add a bunch of do features now i

00:14:50,480 --> 00:14:53,120
mentioned this previously

00:14:51,680 --> 00:14:54,959
let's take a closer look at what they

00:14:53,120 --> 00:14:56,720
look like so when you check out the

00:14:54,959 --> 00:14:58,160
source code

00:14:56,720 --> 00:15:01,120
you'll see the directory called common

00:14:58,160 --> 00:15:03,519
templates which has a dockerfile config

00:15:01,120 --> 00:15:05,360
and a dockerfile template both of these

00:15:03,519 --> 00:15:07,279
work together to create the dockerfile

00:15:05,360 --> 00:15:09,360
that ultimately creates the image

00:15:07,279 --> 00:15:12,320
one of them supplies some hints about

00:15:09,360 --> 00:15:14,079
what the container should be called

00:15:12,320 --> 00:15:15,600
how it should be run it can give some

00:15:14,079 --> 00:15:18,160
hints about mounting directories for

00:15:15,600 --> 00:15:20,560
example the debian package build

00:15:18,160 --> 00:15:22,160
container will advise it if you happen

00:15:20,560 --> 00:15:23,199
to be running it in an automated mode

00:15:22,160 --> 00:15:24,399
where it will just build out of the

00:15:23,199 --> 00:15:26,240
current directory

00:15:24,399 --> 00:15:28,079
to mount the directory above the current

00:15:26,240 --> 00:15:29,440
directory so that any devs

00:15:28,079 --> 00:15:31,120
that are created are not part of the

00:15:29,440 --> 00:15:32,399
container but are part of the host file

00:15:31,120 --> 00:15:34,560
system and don't vanish when the

00:15:32,399 --> 00:15:36,000
container does

00:15:34,560 --> 00:15:37,680
i wouldn't have been stupid enough to

00:15:36,000 --> 00:15:41,600
get burned on this the first time but it

00:15:37,680 --> 00:15:43,279
seems like a useful feature

00:15:41,600 --> 00:15:45,199
the next thing down there is the file

00:15:43,279 --> 00:15:47,199
system directory which is a one-to-one

00:15:45,199 --> 00:15:48,800
mapping of what will get copied into the

00:15:47,199 --> 00:15:50,800
container so it's very easy if you want

00:15:48,800 --> 00:15:52,560
to get a file to a particular location

00:15:50,800 --> 00:15:54,160
just specify the path under file system

00:15:52,560 --> 00:15:55,199
and do will put it there when it creates

00:15:54,160 --> 00:15:56,560
it

00:15:55,199 --> 00:15:58,880
a couple of things we have here under

00:15:56,560 --> 00:16:00,480
etsy

00:15:58,880 --> 00:16:02,079
custom login messages so you can be

00:16:00,480 --> 00:16:03,360
aware of what kind of

00:16:02,079 --> 00:16:06,639
container you're actually running when

00:16:03,360 --> 00:16:07,759
you log into it it modifies the bash rc

00:16:06,639 --> 00:16:10,240
to be able to set the temp

00:16:07,759 --> 00:16:11,519
the prompt so that when you're in a

00:16:10,240 --> 00:16:13,199
container you'll have an idea that

00:16:11,519 --> 00:16:14,880
you're actually in a container

00:16:13,199 --> 00:16:16,959
because it mounts the host file system

00:16:14,880 --> 00:16:18,480
it can get kind of confusing as to where

00:16:16,959 --> 00:16:20,800
you actually are because everything kind

00:16:18,480 --> 00:16:22,480
of looks the same

00:16:20,800 --> 00:16:24,079
further on down under user local bin

00:16:22,480 --> 00:16:24,800
we've got the container create user

00:16:24,079 --> 00:16:26,639
script which

00:16:24,800 --> 00:16:28,800
allows you to become the user in the

00:16:26,639 --> 00:16:29,360
container or if you're invoking it from

00:16:28,800 --> 00:16:30,959
outside

00:16:29,360 --> 00:16:32,959
run commands in the container like it's

00:16:30,959 --> 00:16:33,759
actually you there very handy if you

00:16:32,959 --> 00:16:36,399
need things

00:16:33,759 --> 00:16:38,880
you need access to things like config

00:16:36,399 --> 00:16:41,360
files or ssh keys

00:16:38,880 --> 00:16:42,959
etc and there's another script in there

00:16:41,360 --> 00:16:45,600
which i won't touch on too much

00:16:42,959 --> 00:16:46,639
called do build which is a default build

00:16:45,600 --> 00:16:48,399
script

00:16:46,639 --> 00:16:50,079
do will invoke this there's a command

00:16:48,399 --> 00:16:51,680
for do to invoke this

00:16:50,079 --> 00:16:53,440
and it will do whatever the thing needs

00:16:51,680 --> 00:16:55,279
to build so if you have a default

00:16:53,440 --> 00:16:56,320
install case and you hate typing you can

00:16:55,279 --> 00:16:58,399
have this script

00:16:56,320 --> 00:16:59,839
just build things the one for debian

00:16:58,399 --> 00:17:02,399
packaging does a

00:16:59,839 --> 00:17:03,759
an apt-get update upgrade installs all

00:17:02,399 --> 00:17:06,799
the dependencies

00:17:03,759 --> 00:17:10,079
runs the package build package and then

00:17:06,799 --> 00:17:10,799
quits so very easy it takes the three

00:17:10,079 --> 00:17:12,240
steps that

00:17:10,799 --> 00:17:14,480
debian's already got and turns them into

00:17:12,240 --> 00:17:14,480
one

00:17:14,640 --> 00:17:18,240
apart from that there's the install

00:17:16,559 --> 00:17:21,520
common config lib template

00:17:18,240 --> 00:17:23,039
this is common utility for copying files

00:17:21,520 --> 00:17:26,079
around setting up the container

00:17:23,039 --> 00:17:27,439
things like that again common to all do

00:17:26,079 --> 00:17:30,559
builds

00:17:27,439 --> 00:17:32,960
and two install config templates uh pre

00:17:30,559 --> 00:17:34,960
and post install pre is the first thing

00:17:32,960 --> 00:17:38,160
that runs in an unmodified container

00:17:34,960 --> 00:17:40,480
and post runs at the end of it

00:17:38,160 --> 00:17:42,400
so once that gets installed we move on

00:17:40,480 --> 00:17:44,240
to the particulars of what we're trying

00:17:42,400 --> 00:17:45,679
to build a container for in this case

00:17:44,240 --> 00:17:48,640
the oni build

00:17:45,679 --> 00:17:49,280
now i've mentioned previously debian

00:17:48,640 --> 00:17:50,640
package

00:17:49,280 --> 00:17:52,799
there's really not a whole lot that gets

00:17:50,640 --> 00:17:53,520
added there owning on the other hand is

00:17:52,799 --> 00:17:56,080
a little more

00:17:53,520 --> 00:17:57,039
interesting so we have the dockerfile

00:17:56,080 --> 00:17:58,720
config

00:17:57,039 --> 00:18:00,480
has different suggestions about mounting

00:17:58,720 --> 00:18:01,679
directories when it gets run by the do

00:18:00,480 --> 00:18:04,000
application

00:18:01,679 --> 00:18:05,440
a couple of other things there of

00:18:04,000 --> 00:18:06,160
interest here in the sources list

00:18:05,440 --> 00:18:08,160
there's a stretch

00:18:06,160 --> 00:18:10,000
back ports because the only build

00:18:08,160 --> 00:18:11,600
environment requires some packages from

00:18:10,000 --> 00:18:12,880
stretch back ports

00:18:11,600 --> 00:18:14,799
so that was sort of an interesting

00:18:12,880 --> 00:18:17,120
example of how you can enhance the

00:18:14,799 --> 00:18:19,120
container

00:18:17,120 --> 00:18:21,200
and then the bashrc just changes the

00:18:19,120 --> 00:18:22,880
prompt to be oney so it's clear that

00:18:21,200 --> 00:18:25,600
you're in that environment

00:18:22,880 --> 00:18:27,280
the default build script builds one of

00:18:25,600 --> 00:18:27,679
200 possible targets i'm not sure that

00:18:27,280 --> 00:18:30,559
it's

00:18:27,679 --> 00:18:32,960
entirely useful there but for

00:18:30,559 --> 00:18:35,200
consistency and the purposes of

00:18:32,960 --> 00:18:36,799
providing a way for a new user to just

00:18:35,200 --> 00:18:38,000
get something up and running quickly to

00:18:36,799 --> 00:18:40,240
get an understanding of things

00:18:38,000 --> 00:18:42,080
i thought it was useful and then there's

00:18:40,240 --> 00:18:43,679
the post install config template which

00:18:42,080 --> 00:18:45,919
is where things really get interesting

00:18:43,679 --> 00:18:48,400
because in this file apart from doing

00:18:45,919 --> 00:18:52,000
the regular install of packages and such

00:18:48,400 --> 00:18:53,679
it also has to pull down a couple of

00:18:52,000 --> 00:18:56,400
packages from github

00:18:53,679 --> 00:18:57,679
install them and one of them it has to

00:18:56,400 --> 00:19:00,400
actually build

00:18:57,679 --> 00:19:01,440
so to set up a more complex build

00:19:00,400 --> 00:19:05,120
environment

00:19:01,440 --> 00:19:07,280
this would be a good example of that now

00:19:05,120 --> 00:19:08,400
i had a demo all planned out but in

00:19:07,280 --> 00:19:10,480
looking at the

00:19:08,400 --> 00:19:11,840
amount of time i've got left i pretty

00:19:10,480 --> 00:19:13,679
much had to cut that

00:19:11,840 --> 00:19:15,280
however having demonstrated package

00:19:13,679 --> 00:19:17,840
build it pretty much follows the same

00:19:15,280 --> 00:19:17,840
concepts

00:19:19,520 --> 00:19:24,000
so in conclusion do i think is a great

00:19:22,160 --> 00:19:26,720
way to simplify building code that isn't

00:19:24,000 --> 00:19:29,679
debianized the build environment only

00:19:26,720 --> 00:19:31,120
has to be defined once

00:19:29,679 --> 00:19:33,039
like i said i'm currently working on

00:19:31,120 --> 00:19:34,480
getting due into debian so that

00:19:33,039 --> 00:19:35,679
everybody can get a hold of this and

00:19:34,480 --> 00:19:36,880
ideally

00:19:35,679 --> 00:19:38,720
you know maybe create some additional

00:19:36,880 --> 00:19:41,919
configurations for it to build for

00:19:38,720 --> 00:19:43,120
various sort open source projects uh

00:19:41,919 --> 00:19:45,039
you know we'll see how that goes maybe

00:19:43,120 --> 00:19:46,720
it takes off maybe it doesn't but it's

00:19:45,039 --> 00:19:49,440
never going anywhere unless it's

00:19:46,720 --> 00:19:50,880
completely available to everybody do is

00:19:49,440 --> 00:19:52,559
written in bash

00:19:50,880 --> 00:19:54,400
so it's really easy to modify and

00:19:52,559 --> 00:19:56,080
understand i wanted a low bar to entry

00:19:54,400 --> 00:19:58,000
for this project

00:19:56,080 --> 00:19:59,919
so people who are trying to set up build

00:19:58,000 --> 00:20:01,440
environments or just use it

00:19:59,919 --> 00:20:02,960
could do so with a minimal amount of

00:20:01,440 --> 00:20:04,840
difficulty i know we're not all

00:20:02,960 --> 00:20:07,120
proficient in perl or

00:20:04,840 --> 00:20:08,720
python but i'm sure all of us speak at

00:20:07,120 --> 00:20:11,440
least some level of tourist

00:20:08,720 --> 00:20:13,120
bash where the commands we're typing

00:20:11,440 --> 00:20:15,120
look something like the commands do is

00:20:13,120 --> 00:20:16,480
actually running

00:20:15,120 --> 00:20:17,760
and i would say if you're working on a

00:20:16,480 --> 00:20:19,120
project that has a complex build

00:20:17,760 --> 00:20:20,480
environment i think duke can

00:20:19,120 --> 00:20:22,080
dramatically simplify

00:20:20,480 --> 00:20:24,080
deploying that environment and helping

00:20:22,080 --> 00:20:27,360
other people working on the project

00:20:24,080 --> 00:20:27,360
get their environment set up

00:20:28,960 --> 00:20:36,960
so i'll open this up for any questions

00:20:32,159 --> 00:20:36,960
and say thank you everybody

00:20:37,200 --> 00:20:40,880
all right thanks for the talk alex uh

00:20:39,200 --> 00:20:42,480
very interesting we don't have

00:20:40,880 --> 00:20:44,400
a little bit short on time so we're

00:20:42,480 --> 00:20:45,760
going to have two questions

00:20:44,400 --> 00:20:47,919
but if people have more questions they

00:20:45,760 --> 00:20:50,559
can ask another pad and you'll be

00:20:47,919 --> 00:20:51,679
so the first one is uh when will it be

00:20:50,559 --> 00:20:53,919
beeping

00:20:51,679 --> 00:20:55,520
uh so hopefully in the near future um

00:20:53,919 --> 00:20:57,760
garrett and i are working on it

00:20:55,520 --> 00:20:59,760
uh so hopefully within a couple of weeks

00:20:57,760 --> 00:21:01,360
or so i got delayed with a massive

00:20:59,760 --> 00:21:02,720
project at work but now i've got more

00:21:01,360 --> 00:21:05,679
time to sink into this so i'm hoping

00:21:02,720 --> 00:21:05,679
it'll pan out pretty well

00:21:07,039 --> 00:21:10,080
and i see there was a second question

00:21:08,559 --> 00:21:14,320
here uh within

00:21:10,080 --> 00:21:16,480
etherpad so it's available

00:21:14,320 --> 00:21:18,000
uh so coming up soon um there's a

00:21:16,480 --> 00:21:18,720
question about comparison comparing it

00:21:18,000 --> 00:21:20,720
with uh

00:21:18,720 --> 00:21:22,480
s build the scope of do is a little bit

00:21:20,720 --> 00:21:23,679
bigger than s build although it emulates

00:21:22,480 --> 00:21:25,679
some of the functionality

00:21:23,679 --> 00:21:27,520
um but i had to head to comparison would

00:21:25,679 --> 00:21:28,559
be a good idea to distinguish the

00:21:27,520 --> 00:21:29,760
differences

00:21:28,559 --> 00:21:31,679
um can you build for different

00:21:29,760 --> 00:21:33,280
architectures uh yes there's a feature

00:21:31,679 --> 00:21:34,320
in there if you download a

00:21:33,280 --> 00:21:36,640
container based on a different

00:21:34,320 --> 00:21:38,000
architecture it will use keemu to run it

00:21:36,640 --> 00:21:39,840
so you build an emulation that's not a

00:21:38,000 --> 00:21:41,120
true cross compile but if you need

00:21:39,840 --> 00:21:43,840
something quick

00:21:41,120 --> 00:21:45,679
that should work and is it available for

00:21:43,840 --> 00:21:46,240
other architectures right now it's got a

00:21:45,679 --> 00:21:48,080
bunch of

00:21:46,240 --> 00:21:49,440
uh stuff around package install an app

00:21:48,080 --> 00:21:50,480
that's sort of hard-coded for debian

00:21:49,440 --> 00:21:51,520
distributions

00:21:50,480 --> 00:21:55,039
but there's nothing in there that would

00:21:51,520 --> 00:21:57,039
prevent it apart from time and effort

00:21:55,039 --> 00:21:58,880
well thanks a lot sadly that's all the

00:21:57,039 --> 00:22:00,799
time we have but

00:21:58,880 --> 00:22:02,240
more questions i'm sure they can reach

00:22:00,799 --> 00:22:10,240
you absolutely

00:22:02,240 --> 00:22:10,240

YouTube URL: https://www.youtube.com/watch?v=O41s5WHjrtk


