Title: Rust BoF
Publication date: 2020-10-23
Playlist: DebConf 20
Description: 
	by Wookey

At: DebConf20
https://debconf20.debconf.org/talks/102-rust-bof/

This BoF is a chance for anyone interested in rust on Debian and packaging rust software to talk about their interests and issues. In case you don't already know, Rust is an efficient new language with some very nice features for security and parallelism https://www.rust-lang.org/ As it grows in popularity more software is written in it, which means there is a demand for it in distributions.

Do you have particular rust software you would like to package?

One subject we hope to cover is the problem that the current mapping of rust crates to packages produces a lot of small binary packages that then get stuck in the NEW queue. This is unsatisfactory for everyone: FTPmasters, rust packagers and users. Getting the right people in a (virtual) room might help us work out what to do about it.

https://wiki.debian.org/Teams/RustPackaging
https://wiki.debian.org/Teams/RustPackaging/Policy

Room: Ad-hoc sessions
Scheduled start: 2020-08-26 14:00:00
Captions: 
	00:00:05,040 --> 00:00:09,280
chairman

00:00:06,720 --> 00:00:10,719
i guess we should start with a quick who

00:00:09,280 --> 00:00:14,160
people are

00:00:10,719 --> 00:00:15,599
and what their interest is uh and then

00:00:14,160 --> 00:00:17,520
we have a couple of things we definitely

00:00:15,599 --> 00:00:21,119
want to talk about

00:00:17,520 --> 00:00:23,600
um to do with the

00:00:21,119 --> 00:00:24,480
cargo to package mapping and new cues

00:00:23,600 --> 00:00:26,960
and things

00:00:24,480 --> 00:00:29,359
and static linking in general and

00:00:26,960 --> 00:00:33,039
anything else anyone is interested in

00:00:29,359 --> 00:00:33,039
so let's start

00:00:33,600 --> 00:00:36,640
who wants to go first

00:00:38,079 --> 00:00:43,360
i'll just ask silwal

00:00:42,160 --> 00:00:46,399
i know you know what's going on yeah

00:00:43,360 --> 00:00:49,440
yeah hi everybody um

00:00:46,399 --> 00:00:52,719
yeah i stumbled upon the um

00:00:49,440 --> 00:00:55,520
rust um ecosystem around five years ago

00:00:52,719 --> 00:00:57,120
and um i had been using debian for a

00:00:55,520 --> 00:01:00,079
very long time and

00:00:57,120 --> 00:01:00,800
thought it might make sense to start

00:01:00,079 --> 00:01:04,080
working on

00:01:00,800 --> 00:01:06,640
on supporting the rust ecosystem

00:01:04,080 --> 00:01:08,240
within debian so i took my chance and

00:01:06,640 --> 00:01:10,479
and started um

00:01:08,240 --> 00:01:13,119
i'm currently a dependent maintainer in

00:01:10,479 --> 00:01:18,159
the process

00:01:13,119 --> 00:01:21,439
of application for developer

00:01:18,159 --> 00:01:25,040
um yeah that's it basically i have um

00:01:21,439 --> 00:01:28,799
hardware software design degree

00:01:25,040 --> 00:01:31,920
master's degree i finished about

00:01:28,799 --> 00:01:33,520
uh 11 years ago okay do you have a real

00:01:31,920 --> 00:01:36,560
name you're prepared to

00:01:33,520 --> 00:01:39,600
uh yes no no

00:01:36,560 --> 00:01:40,320
my name is wolfgang but i usually go by

00:01:39,600 --> 00:01:43,280
silverland

00:01:40,320 --> 00:01:43,280
okay it is right

00:01:44,079 --> 00:01:47,840
okay uh who else have we got

00:01:52,840 --> 00:01:55,840
reinhardt

00:02:06,840 --> 00:02:13,440
muted

00:02:08,959 --> 00:02:13,440
still can't hear you oh right

00:02:18,319 --> 00:02:28,080
no never mind

00:02:23,280 --> 00:02:28,080
uh face hi all right friend

00:02:31,360 --> 00:02:35,920
hey hey yeah

00:02:34,720 --> 00:02:38,160
do you want to say what your area of

00:02:35,920 --> 00:02:40,400
interest is ah

00:02:38,160 --> 00:02:40,400
sure

00:02:46,239 --> 00:02:49,680
i seem to have muted myself again by

00:02:47,840 --> 00:02:52,879
accident um i'm

00:02:49,680 --> 00:02:54,720
visiting from uh from geeks i

00:02:52,879 --> 00:02:56,640
ended up doing a lot of packaging of

00:02:54,720 --> 00:02:57,120
rust packages there mostly so that we

00:02:56,640 --> 00:03:00,080
could get

00:02:57,120 --> 00:03:00,080
firefox working

00:03:03,599 --> 00:03:12,080
oh and yeah don't push that button

00:03:07,680 --> 00:03:16,000
yeah i seem to have we can hear you now

00:03:12,080 --> 00:03:18,000
okay um yeah so since then we've been

00:03:16,000 --> 00:03:19,280
packaging more more and more rest apps

00:03:18,000 --> 00:03:21,280
and trying to figure out a good way to

00:03:19,280 --> 00:03:23,360
actually

00:03:21,280 --> 00:03:24,720
make them useful not just test if they

00:03:23,360 --> 00:03:27,360
build and then

00:03:24,720 --> 00:03:27,360
ignore them

00:03:28,159 --> 00:03:33,840
okay who else

00:03:35,200 --> 00:03:38,720
uh so i think i should have started on

00:03:37,200 --> 00:03:41,840
my mic issues um

00:03:38,720 --> 00:03:45,120
i am reinhardt i've been active

00:03:41,840 --> 00:03:46,879
for a couple of years um in multimedia

00:03:45,120 --> 00:03:48,159
team then moved on to the goaling team

00:03:46,879 --> 00:03:49,920
where i'm

00:03:48,159 --> 00:03:51,440
working on a couple of container related

00:03:49,920 --> 00:03:55,760
packages i

00:03:51,440 --> 00:03:55,760
joined this both mostly of intel

00:03:58,840 --> 00:04:02,080
because

00:04:00,000 --> 00:04:04,319
the static linking issues we are having

00:04:02,080 --> 00:04:06,239
that issue in the go community

00:04:04,319 --> 00:04:08,879
as well as in the russ community we

00:04:06,239 --> 00:04:11,120
wanted to join this box to see what kind

00:04:08,879 --> 00:04:13,840
of solutions you have you seem to have

00:04:11,120 --> 00:04:15,040
quite a bit of pre-work on that thing

00:04:13,840 --> 00:04:16,959
and it seems to be

00:04:15,040 --> 00:04:18,079
a much more general issue than just the

00:04:16,959 --> 00:04:20,400
go and the

00:04:18,079 --> 00:04:21,519
rough community and i'm wondering uh

00:04:20,400 --> 00:04:24,160
what can we do

00:04:21,519 --> 00:04:29,840
to solve that for all kinds of languages

00:04:24,160 --> 00:04:29,840
that prefer static thinking

00:04:32,160 --> 00:04:39,120
bastian hi i'm bastian uh

00:04:35,600 --> 00:04:42,560
i'm here for the invitation of rookie

00:04:39,120 --> 00:04:47,680
for the ftp team

00:04:42,560 --> 00:04:47,680
okay ariel

00:04:54,800 --> 00:04:57,840
can you hear us

00:04:59,840 --> 00:05:11,840
we can't hear you

00:05:14,240 --> 00:05:21,199
no never mind

00:05:18,720 --> 00:05:21,199
anthony

00:05:21,919 --> 00:05:28,560
uh hi um my name is anthony and i've

00:05:26,080 --> 00:05:31,759
been a dd since 1997

00:05:28,560 --> 00:05:33,759
and i have uh i i

00:05:31,759 --> 00:05:35,600
i'm here for the same reason as

00:05:33,759 --> 00:05:38,400
reinhardt uh to discuss

00:05:35,600 --> 00:05:39,120
the the static linking issue with the go

00:05:38,400 --> 00:05:41,120
team

00:05:39,120 --> 00:05:42,880
um and so yeah i think i'll keep it

00:05:41,120 --> 00:05:46,400
short and and

00:05:42,880 --> 00:05:51,120
sure it's good okay and one

00:05:46,400 --> 00:05:54,320
secret what was it fellow debbie knight

00:05:51,120 --> 00:05:54,320
who hasn't said their jitsy name

00:05:57,360 --> 00:06:00,160
do you know who you are

00:06:02,800 --> 00:06:09,600
oh well right uh so

00:06:06,240 --> 00:06:10,639
um we have i don't know what's the best

00:06:09,600 --> 00:06:14,960
thing to do about this

00:06:10,639 --> 00:06:16,560
uh i like to say so we have this

00:06:14,960 --> 00:06:18,560
issue the bastion do you want to say

00:06:16,560 --> 00:06:20,479
kind of what the ftp masters

00:06:18,560 --> 00:06:22,000
view of the it seems like there are

00:06:20,479 --> 00:06:23,520
quite a lot of rust packages i don't

00:06:22,000 --> 00:06:24,319
know how long people have been uploading

00:06:23,520 --> 00:06:26,080
for

00:06:24,319 --> 00:06:27,680
is it like four years worth or something

00:06:26,080 --> 00:06:29,840
is it longer than that

00:06:27,680 --> 00:06:31,840
um but we have got some that are stuck

00:06:29,840 --> 00:06:33,840
and seems to be a general feeling that

00:06:31,840 --> 00:06:35,120
the ftp masters have got fed up and

00:06:33,840 --> 00:06:36,880
aren't processing anything now i don't

00:06:35,120 --> 00:06:40,720
know if that's really fair

00:06:36,880 --> 00:06:40,720
um and we need to change something

00:06:41,199 --> 00:06:49,840
is that there are

00:06:44,400 --> 00:06:49,840
a couple of problems um

00:06:52,000 --> 00:06:55,120
where to begin uh

00:07:00,000 --> 00:07:07,520
i think the whole thing started with um

00:07:03,039 --> 00:07:10,560
a buck report against prepro

00:07:07,520 --> 00:07:11,440
there is a package which have uh which

00:07:10,560 --> 00:07:15,400
got a

00:07:11,440 --> 00:07:18,319
provides line of over 250

00:07:15,400 --> 00:07:19,840
56k which is larger than the package

00:07:18,319 --> 00:07:25,759
itself

00:07:19,840 --> 00:07:25,759
right about what what started at all

00:07:26,639 --> 00:07:29,759
then

00:07:27,520 --> 00:07:33,840
[Music]

00:07:29,759 --> 00:07:38,319
it looks like every upload of

00:07:33,840 --> 00:07:43,280
a rust package is showing up in you

00:07:38,319 --> 00:07:46,720
because it adds some new binary package

00:07:43,280 --> 00:07:47,520
which is actually empty yeah i guess

00:07:46,720 --> 00:07:49,759
they don't all

00:07:47,520 --> 00:07:51,360
do that but as you say a large a

00:07:49,759 --> 00:07:53,280
fraction i don't know what the actual

00:07:51,360 --> 00:07:56,479
numbers are

00:07:53,280 --> 00:07:57,280
but clearly they change often every time

00:07:56,479 --> 00:08:00,639
the new version

00:07:57,280 --> 00:08:04,080
it's got new binary it's a

00:08:00,639 --> 00:08:07,440
it's a feeling and it really happens

00:08:04,080 --> 00:08:10,960
way too much because um

00:08:07,440 --> 00:08:13,280
they are small they don't do much

00:08:10,960 --> 00:08:14,960
yes entirely mechanical artifacts to

00:08:13,280 --> 00:08:15,840
generate so my main question actually is

00:08:14,960 --> 00:08:18,560
can you remind us

00:08:15,840 --> 00:08:18,960
why do we do new for binary packages

00:08:18,560 --> 00:08:20,319
because

00:08:18,960 --> 00:08:22,000
especially in this kind of mechanical

00:08:20,319 --> 00:08:23,360
case it seems to be entirely pointless

00:08:22,000 --> 00:08:27,360
and just annoys everyone

00:08:23,360 --> 00:08:30,160
uh what are we actually achieving

00:08:27,360 --> 00:08:32,159
because the ftp team is not only

00:08:30,160 --> 00:08:35,760
responsible for

00:08:32,159 --> 00:08:38,479
license compliance but also for

00:08:35,760 --> 00:08:38,479
the overall

00:08:39,039 --> 00:08:46,320
archive contents name spacing

00:08:42,320 --> 00:08:46,320
and so on so

00:08:46,480 --> 00:08:55,839
we look at every new binary package

00:08:49,839 --> 00:08:55,839
if it is actually usable

00:08:56,320 --> 00:09:01,360
okay um but i mean so is there

00:08:59,760 --> 00:09:03,279
is there any i guess this has been

00:09:01,360 --> 00:09:06,320
discussed before but

00:09:03,279 --> 00:09:08,000
could we have a mechanism for just going

00:09:06,320 --> 00:09:09,680
something's going through new because of

00:09:08,000 --> 00:09:12,320
binary packages just

00:09:09,680 --> 00:09:13,120
make work and maybe we thought of doing

00:09:12,320 --> 00:09:16,160
that

00:09:13,120 --> 00:09:19,839
um there might be one but

00:09:16,160 --> 00:09:20,880
uh we come to the decision that the rust

00:09:19,839 --> 00:09:24,000
team will not

00:09:20,880 --> 00:09:24,560
get that permission at least in the

00:09:24,000 --> 00:09:28,080
current

00:09:24,560 --> 00:09:30,560
uh state right it would be for things

00:09:28,080 --> 00:09:33,440
like the kernel

00:09:30,560 --> 00:09:35,200
okay because i mean yeah i think it's

00:09:33,440 --> 00:09:37,600
probably a general case that there's

00:09:35,200 --> 00:09:39,040
other reasons whether the the new

00:09:37,600 --> 00:09:42,480
binaries are pretty

00:09:39,040 --> 00:09:43,839
are just artifacts and you know it seems

00:09:42,480 --> 00:09:44,880
like that isn't a particularly good use

00:09:43,839 --> 00:09:47,839
of people's time

00:09:44,880 --> 00:09:49,519
but yeah okay if you like i can i can

00:09:47,839 --> 00:09:52,880
describe the

00:09:49,519 --> 00:09:56,560
technical background a little bit

00:09:52,880 --> 00:09:58,800
on how this works may i

00:09:56,560 --> 00:09:58,800
uh

00:10:00,240 --> 00:10:06,240
say something else um you all you

00:10:03,440 --> 00:10:06,720
uh also showed up on the release teams

00:10:06,240 --> 00:10:10,800
rather

00:10:06,720 --> 00:10:14,880
now um

00:10:10,800 --> 00:10:14,880
someone from the release team

00:10:15,760 --> 00:10:19,839
thought about just removing all of rust

00:10:19,440 --> 00:10:23,120
from

00:10:19,839 --> 00:10:26,320
testing and let it trickle in

00:10:23,120 --> 00:10:29,440
bit by bit because

00:10:26,320 --> 00:10:30,640
he was not really successful into

00:10:29,440 --> 00:10:33,760
getting

00:10:30,640 --> 00:10:34,800
stuff updated because of the

00:10:33,760 --> 00:10:38,640
intertangled

00:10:34,800 --> 00:10:41,920
dependencies yeah we have

00:10:38,640 --> 00:10:43,760
the auto removal of the 60 days in place

00:10:41,920 --> 00:10:47,279
since some time and

00:10:43,760 --> 00:10:47,920
things have definitely become easier to

00:10:47,279 --> 00:10:50,240
trickle

00:10:47,920 --> 00:10:50,240
through

00:10:53,200 --> 00:10:58,240
but yeah maybe this would be an option

00:10:55,519 --> 00:11:01,440
as well i think it doesn't really

00:10:58,240 --> 00:11:03,440
matter which which way we choose so

00:11:01,440 --> 00:11:05,120
the release team want to just

00:11:03,440 --> 00:11:08,240
effectively sort of have a reset

00:11:05,120 --> 00:11:12,079
is that the thinking they thought about

00:11:08,240 --> 00:11:16,480
it right because um yeah because

00:11:12,079 --> 00:11:16,480
that tooling wasn't able to cope

00:11:17,200 --> 00:11:24,399
the problem of the release team is

00:11:21,040 --> 00:11:29,600
that they look at source packages

00:11:24,399 --> 00:11:31,360
and where you try to avoid

00:11:29,600 --> 00:11:34,240
dependency cycles between binary

00:11:31,360 --> 00:11:37,200
packages you create binary

00:11:34,240 --> 00:11:39,440
dependent cycles between source packages

00:11:37,200 --> 00:11:39,440
so

00:11:39,519 --> 00:11:46,720
the tooling needs to handle

00:11:42,640 --> 00:11:50,800
all the cycle in one step

00:11:46,720 --> 00:11:54,240
and it can really do that automatically

00:11:50,800 --> 00:11:55,600
in all cases yeah

00:11:54,240 --> 00:11:56,959
so my understanding this isn't very good

00:11:55,600 --> 00:11:58,399
and still wall should explain some

00:11:56,959 --> 00:12:00,079
things to me but i'll just i'll ask

00:11:58,399 --> 00:12:01,600
naive questions because that's probably

00:12:00,079 --> 00:12:04,240
helpful

00:12:01,600 --> 00:12:04,800
so obviously this this kind of mapping

00:12:04,240 --> 00:12:07,360
as

00:12:04,800 --> 00:12:08,560
the cargo binary packages are really

00:12:07,360 --> 00:12:10,800
source packages

00:12:08,560 --> 00:12:13,519
in order to emulate what cargo does kind

00:12:10,800 --> 00:12:15,440
of thing in a debian package context

00:12:13,519 --> 00:12:16,639
um so that's a bit weird but it's a bit

00:12:15,440 --> 00:12:21,200
of a hack to deal with

00:12:16,639 --> 00:12:24,160
the way cargo works um and maybe one day

00:12:21,200 --> 00:12:25,680
you know rust does have dynamic linking

00:12:24,160 --> 00:12:28,399
and we could make it like a sensible

00:12:25,680 --> 00:12:30,639
language except that it's not stable yet

00:12:28,399 --> 00:12:32,560
so we can't really use that

00:12:30,639 --> 00:12:34,800
and i know armed people are pushing

00:12:32,560 --> 00:12:36,800
upstream to go we need a stable abr you

00:12:34,800 --> 00:12:38,959
idiots please can we have one

00:12:36,800 --> 00:12:40,240
so probably that will improve over time

00:12:38,959 --> 00:12:41,760
i think unlike some other languages

00:12:40,240 --> 00:12:43,360
which is just like go i don't think he's

00:12:41,760 --> 00:12:44,959
ever going to do that

00:12:43,360 --> 00:12:46,959
um so that doesn't really make this

00:12:44,959 --> 00:12:49,120
general problem go away but i guess the

00:12:46,959 --> 00:12:50,880
go people must have a different

00:12:49,120 --> 00:12:52,560
mapping system because their modules a

00:12:50,880 --> 00:12:54,000
bit different and haven't got this crazy

00:12:52,560 --> 00:12:57,519
explosion of

00:12:54,000 --> 00:13:00,639
um provides and packing

00:12:57,519 --> 00:13:00,639
and binary packages

00:13:01,040 --> 00:13:04,959
sorry there's a really good question but

00:13:02,639 --> 00:13:09,120
is it all that's correct right

00:13:04,959 --> 00:13:12,079
yeah that explosion is caused because

00:13:09,120 --> 00:13:12,720
um the cargo stuff creates a binary

00:13:12,079 --> 00:13:15,839
package

00:13:12,720 --> 00:13:20,639
per feature yeah and you have a

00:13:15,839 --> 00:13:23,600
feature creep um

00:13:20,639 --> 00:13:25,360
i think the only solution i see is you

00:13:23,600 --> 00:13:30,079
stop doing that

00:13:25,360 --> 00:13:33,360
and break cycles on the source packages

00:13:30,079 --> 00:13:34,560
yeah so of course the cycles part um

00:13:33,360 --> 00:13:36,639
i've seen the people talking about we

00:13:34,560 --> 00:13:40,560
have to break cycles and you go uh

00:13:36,639 --> 00:13:42,320
why oh so it's still can you explain why

00:13:40,560 --> 00:13:45,040
why we have this particular mechanism

00:13:42,320 --> 00:13:47,120
rather than something more conventional

00:13:45,040 --> 00:13:48,639
otherwise you wouldn't even have the

00:13:47,120 --> 00:13:51,760
problem you

00:13:48,639 --> 00:13:54,000
could just remove all

00:13:51,760 --> 00:13:58,000
that all the packages for the features

00:13:54,000 --> 00:13:58,000
because it would just work but

00:13:59,199 --> 00:14:05,600
that people told me that

00:14:02,480 --> 00:14:10,079
then you have cycles and

00:14:05,600 --> 00:14:10,720
um the upstream uses features to break

00:14:10,079 --> 00:14:14,160
cycles

00:14:10,720 --> 00:14:17,600
into small pieces so yeah i have a

00:14:14,160 --> 00:14:20,639
cycle between a and b a a b and c so i

00:14:17,600 --> 00:14:24,000
create a feature without a without b

00:14:20,639 --> 00:14:26,079
without c so i don't have a cycle okay

00:14:24,000 --> 00:14:28,800
so it's a little bit like a sort of a

00:14:26,079 --> 00:14:33,279
build profile in debian speak maybe

00:14:28,800 --> 00:14:34,800
or um or a sub package kind of you know

00:14:33,279 --> 00:14:36,240
the the part of the functionality that i

00:14:34,800 --> 00:14:37,839
depend on as opposed to the whole

00:14:36,240 --> 00:14:39,839
package

00:14:37,839 --> 00:14:41,519
which is nice and obviously preserving

00:14:39,839 --> 00:14:43,600
that and mapping it into

00:14:41,519 --> 00:14:45,120
the package world is kind of neat

00:14:43,600 --> 00:14:46,959
because it means it just work cargo

00:14:45,120 --> 00:14:50,320
works just like cargo works

00:14:46,959 --> 00:14:51,760
but you know that's not necessarily

00:14:50,320 --> 00:14:53,440
the best thing for us to achieve and as

00:14:51,760 --> 00:14:55,760
you say it has this rather unfortunate

00:14:53,440 --> 00:15:00,560
side effect on the archive

00:14:55,760 --> 00:15:02,240
i was hoping dkg would turn up

00:15:00,560 --> 00:15:03,760
as he's obviously looked at this but

00:15:02,240 --> 00:15:06,160
never mind i guess it's very early in

00:15:03,760 --> 00:15:06,160
america

00:15:07,040 --> 00:15:10,160
because it's because there's a question

00:15:08,399 --> 00:15:13,360
of how much

00:15:10,160 --> 00:15:16,880
bigger all of this stuff is

00:15:13,360 --> 00:15:18,320
um obviously at some point it's too much

00:15:16,880 --> 00:15:21,199
it's a little bit hard to say how much

00:15:18,320 --> 00:15:21,199
is too much isn't it

00:15:22,480 --> 00:15:26,639
i guess if you lot i've said it's too

00:15:23,920 --> 00:15:29,920
much ultimately we're stuck until

00:15:26,639 --> 00:15:29,920
we can persuade you otherwise

00:15:33,040 --> 00:15:40,800
uh yeah so walt did you have anything to

00:15:37,120 --> 00:15:44,560
respond um

00:15:40,800 --> 00:15:48,079
yeah i'm regarding the cycles um

00:15:44,560 --> 00:15:51,199
they are uh definitely in in

00:15:48,079 --> 00:15:54,720
place in the upstream project

00:15:51,199 --> 00:15:57,839
sometimes for example um

00:15:54,720 --> 00:16:02,079
it's it's a dependency

00:15:57,839 --> 00:16:06,160
used for building the the tests or

00:16:02,079 --> 00:16:06,160
for for running the tests or something

00:16:06,839 --> 00:16:12,639
um

00:16:08,240 --> 00:16:16,240
we have been discussing um

00:16:12,639 --> 00:16:16,240
maybe we could

00:16:16,720 --> 00:16:23,680
add some kind of

00:16:20,000 --> 00:16:24,320
method collapsing all um or many

00:16:23,680 --> 00:16:29,759
features

00:16:24,320 --> 00:16:33,360
of a cargo crate into

00:16:29,759 --> 00:16:36,639
a single binary feature package

00:16:33,360 --> 00:16:40,880
so we would for example um

00:16:36,639 --> 00:16:43,920
the websis package is the one that

00:16:40,880 --> 00:16:47,120
landed up with uh two long

00:16:43,920 --> 00:16:50,079
provides line so we

00:16:47,120 --> 00:16:52,079
would have and entering our

00:16:50,079 --> 00:16:54,160
configuration that says okay collapse

00:16:52,079 --> 00:16:57,759
all these features into

00:16:54,160 --> 00:17:02,800
one binary package instead of

00:16:57,759 --> 00:17:02,800
these many and um or

00:17:04,240 --> 00:17:07,679
in in this case they ended up in a

00:17:06,559 --> 00:17:11,679
provides but it

00:17:07,679 --> 00:17:15,760
would uh work the same for for um binary

00:17:11,679 --> 00:17:18,799
packages uh but it's somewhat a

00:17:15,760 --> 00:17:19,360
dirty heck and nobody has gotten around

00:17:18,799 --> 00:17:21,360
to

00:17:19,360 --> 00:17:24,240
finally uh implement the proof of

00:17:21,360 --> 00:17:24,240
concept yet

00:17:24,480 --> 00:17:27,919
do so we actually have two things that

00:17:25,839 --> 00:17:29,760
are exploding the number of packages and

00:17:27,919 --> 00:17:30,640
dependencies right there's there's the

00:17:29,760 --> 00:17:33,919
versioning

00:17:30,640 --> 00:17:34,480
and the features obviously they multiply

00:17:33,919 --> 00:17:36,640
each other

00:17:34,480 --> 00:17:38,640
so is the versioning there because

00:17:36,640 --> 00:17:41,760
upstream effectively expects to be able

00:17:38,640 --> 00:17:44,000
to use two different versions of things

00:17:41,760 --> 00:17:45,919
yeah we can't just pick a version like

00:17:44,000 --> 00:17:47,520
we can you know for c libraries we try

00:17:45,919 --> 00:17:48,640
very hard not to have

00:17:47,520 --> 00:17:51,919
more than a couple of versions of

00:17:48,640 --> 00:17:55,440
something yeah in in the rest world it's

00:17:51,919 --> 00:17:58,480
um let's say it's not

00:17:55,440 --> 00:18:01,039
not very common but

00:17:58,480 --> 00:18:01,600
it happens that you have two different

00:18:01,039 --> 00:18:06,000
versions

00:18:01,600 --> 00:18:06,000
of a crate in your dependency tree

00:18:06,480 --> 00:18:13,520
so rust is able to resolve

00:18:10,400 --> 00:18:15,600
multiple versions of the same name

00:18:13,520 --> 00:18:19,440
or or what will happen if you actually

00:18:15,600 --> 00:18:22,640
do that and try to build it

00:18:19,440 --> 00:18:25,840
um if if you it

00:18:22,640 --> 00:18:28,240
it usually happens somewhere down in the

00:18:25,840 --> 00:18:31,280
tree so for example you have

00:18:28,240 --> 00:18:34,080
a crate that you depend on and

00:18:31,280 --> 00:18:35,840
uh this crate has a dependency to

00:18:34,080 --> 00:18:38,480
another crate

00:18:35,840 --> 00:18:40,880
the crate this is um the name for

00:18:38,480 --> 00:18:43,200
library in in rust

00:18:40,880 --> 00:18:45,120
and then you have a second dependency

00:18:43,200 --> 00:18:46,080
which depends on a different version of

00:18:45,120 --> 00:18:49,280
that crate

00:18:46,080 --> 00:18:53,280
then both are built and

00:18:49,280 --> 00:18:57,840
included into the static binary

00:18:53,280 --> 00:18:57,840
that is created by rust

00:18:58,559 --> 00:19:05,960
and that all works and gets resolved

00:19:01,760 --> 00:19:08,960
i think there was an example in uh yeah

00:19:05,960 --> 00:19:08,960
00:19:09,440 --> 00:19:13,120
asking that d package could do

00:19:13,600 --> 00:19:19,120
dependencies between versions

00:19:17,280 --> 00:19:20,880
uh because that's effectively something

00:19:19,120 --> 00:19:24,400
that cargo

00:19:20,880 --> 00:19:27,919
does so we can't map exactly

00:19:24,400 --> 00:19:30,320
and then when you get served a tree of

00:19:27,919 --> 00:19:33,200
dependencies you can end up with

00:19:30,320 --> 00:19:33,679
three different versions of something uh

00:19:33,200 --> 00:19:37,760
yeah

00:19:33,679 --> 00:19:40,480
yeah it's a penalty tree um

00:19:37,760 --> 00:19:42,160
we we usually try to either um get

00:19:40,480 --> 00:19:45,440
upstream to use the latest

00:19:42,160 --> 00:19:46,000
version where it is usually it happens

00:19:45,440 --> 00:19:49,679
during

00:19:46,000 --> 00:19:52,799
uh updates of of uh libraries that are

00:19:49,679 --> 00:19:56,080
in a central place in the ecosystem so

00:19:52,799 --> 00:19:58,320
we had that with the rent create

00:19:56,080 --> 00:20:00,080
the random number generator the

00:19:58,320 --> 00:20:01,360
javascript people do this all the time

00:20:00,080 --> 00:20:02,799
and think it's good

00:20:01,360 --> 00:20:04,400
right but obviously it's terrible and

00:20:02,799 --> 00:20:05,600
wrong um

00:20:04,400 --> 00:20:07,919
i wasn't quite sure whether this is i

00:20:05,600 --> 00:20:09,440
think that's a feature by rust people

00:20:07,919 --> 00:20:10,720
um which we really are going to have to

00:20:09,440 --> 00:20:11,840
support because that's how the echo

00:20:10,720 --> 00:20:13,760
system works

00:20:11,840 --> 00:20:15,280
or if it's something where actually we

00:20:13,760 --> 00:20:18,320
can normally

00:20:15,280 --> 00:20:19,679
get a sensible you know one or two

00:20:18,320 --> 00:20:20,880
versions of something which we can do

00:20:19,679 --> 00:20:22,240
with

00:20:20,880 --> 00:20:24,000
you know we've been doing in debian

00:20:22,240 --> 00:20:25,760
since forever we just have to

00:20:24,000 --> 00:20:27,760
name packages properly so most of the

00:20:25,760 --> 00:20:29,360
time you just say the package

00:20:27,760 --> 00:20:31,039
and if you want to support more than one

00:20:29,360 --> 00:20:33,280
you have to change the things the

00:20:31,039 --> 00:20:36,240
problem is that that's manual work

00:20:33,280 --> 00:20:37,760
you know and with big library trees that

00:20:36,240 --> 00:20:40,960
gets to be

00:20:37,760 --> 00:20:41,440
you know maintaining that is a lot more

00:20:40,960 --> 00:20:43,679
work

00:20:41,440 --> 00:20:46,159
than just having auto magic translation

00:20:43,679 --> 00:20:48,880
stuff which okay generates reams of

00:20:46,159 --> 00:20:50,720
pointless packages but it does just

00:20:48,880 --> 00:20:51,840
translate and only the computers have to

00:20:50,720 --> 00:20:53,440
worry about it

00:20:51,840 --> 00:20:55,280
and i think this is the trade-off that

00:20:53,440 --> 00:20:56,640
seems to be the argument yeah that there

00:20:55,280 --> 00:20:59,039
aren't that many people in the rust team

00:20:56,640 --> 00:21:00,960
and we don't really want to

00:20:59,039 --> 00:21:03,679
do this kind of manual care of

00:21:00,960 --> 00:21:06,799
individual packages

00:21:03,679 --> 00:21:08,640
uh to to compress features into you know

00:21:06,799 --> 00:21:10,559
beyond what cargo just did

00:21:08,640 --> 00:21:12,960
and what the automatic translation gives

00:21:10,559 --> 00:21:18,240
us which works

00:21:12,960 --> 00:21:18,240
um but you know isn't very debiany

00:21:18,320 --> 00:21:23,120
and his annoying ftp masters it's never

00:21:20,720 --> 00:21:23,120
a good thing

00:21:23,760 --> 00:21:26,880
uh so yeah i i don't know the answers to

00:21:26,159 --> 00:21:28,640
this

00:21:26,880 --> 00:21:30,640
um i'm just trying to understand it does

00:21:28,640 --> 00:21:33,120
anyone else have

00:21:30,640 --> 00:21:34,159
who hasn't spoken want to say either

00:21:33,120 --> 00:21:36,240
what they're interested in

00:21:34,159 --> 00:21:38,559
or have opinions on what we might do

00:21:36,240 --> 00:21:38,559
about

00:21:39,760 --> 00:21:45,840
effectively changing things

00:21:47,840 --> 00:21:53,600
so for me i would like to hear

00:21:51,600 --> 00:21:55,440
how what is your thinking what is your

00:21:53,600 --> 00:21:58,480
tooling around

00:21:55,440 --> 00:21:59,919
rebuilding packages in case of well

00:21:58,480 --> 00:22:01,520
there's a new upstream version you want

00:21:59,919 --> 00:22:03,679
to see whether it breaks all the

00:22:01,520 --> 00:22:05,200
packages or there's a security update

00:22:03,679 --> 00:22:08,240
and that requires

00:22:05,200 --> 00:22:11,440
identifying and actually rebuilding um

00:22:08,240 --> 00:22:13,600
whole subset of the archive that is

00:22:11,440 --> 00:22:15,200
the most pressing questions from the

00:22:13,600 --> 00:22:17,440
release team and security team to the

00:22:15,200 --> 00:22:19,679
golden community and i'm wondering

00:22:17,440 --> 00:22:23,280
what are you doing in the rough

00:22:19,679 --> 00:22:23,280
community to address this issue

00:22:25,120 --> 00:22:30,080
yeah i'm i must admit i'm i i

00:22:28,159 --> 00:22:32,799
came to the rust team when most of the

00:22:30,080 --> 00:22:33,120
things were defined and and already set

00:22:32,799 --> 00:22:37,360
i

00:22:33,120 --> 00:22:40,640
just um submitted a few patches to um

00:22:37,360 --> 00:22:44,720
to that cargo um so

00:22:40,640 --> 00:22:47,840
how we handle this is we

00:22:44,720 --> 00:22:51,280
have this depth cargo tool it

00:22:47,840 --> 00:22:54,880
takes a look at the cargo

00:22:51,280 --> 00:22:58,880
configuration file the cargo.tml file

00:22:54,880 --> 00:23:02,880
and places

00:22:58,880 --> 00:23:06,559
um yeah let's say it places the

00:23:02,880 --> 00:23:09,600
debian package sources into a subfolder

00:23:06,559 --> 00:23:12,720
which we can then use to build uh

00:23:09,600 --> 00:23:14,559
the package but we we upload this was a

00:23:12,720 --> 00:23:18,240
package of course

00:23:14,559 --> 00:23:21,600
um this tool also adds

00:23:18,240 --> 00:23:23,760
some um i

00:23:21,600 --> 00:23:24,640
would need to look it up but it at some

00:23:23,760 --> 00:23:28,480
fields to the

00:23:24,640 --> 00:23:29,360
um to the control file i think it was

00:23:28,480 --> 00:23:33,120
something like

00:23:29,360 --> 00:23:34,000
xcargo built with no no i don't remember

00:23:33,120 --> 00:23:36,480
exactly but

00:23:34,000 --> 00:23:38,320
it's built using is the standard thing

00:23:36,480 --> 00:23:41,440
do we use that or do we have our own

00:23:38,320 --> 00:23:43,679
um yeah we use that as well

00:23:41,440 --> 00:23:44,559
but i think there is something else and

00:23:43,679 --> 00:23:48,480
this uh

00:23:44,559 --> 00:23:51,039
so for for um

00:23:48,480 --> 00:23:52,799
for for cargo or for for rust packages

00:23:51,039 --> 00:23:56,400
in debian we um

00:23:52,799 --> 00:23:57,200
usually have the the binary packages

00:23:56,400 --> 00:24:00,640
with which

00:23:57,200 --> 00:24:04,480
um actually contain the source and these

00:24:00,640 --> 00:24:08,000
extra binary feature packages which are

00:24:04,480 --> 00:24:10,880
meter packages that just point to which

00:24:08,000 --> 00:24:11,520
features are available and require an

00:24:10,880 --> 00:24:15,600
extra

00:24:11,520 --> 00:24:19,520
extra dependency and

00:24:15,600 --> 00:24:23,360
in the end we don't have to rebuild each

00:24:19,520 --> 00:24:24,080
lip in the in the tree but we just

00:24:23,360 --> 00:24:27,279
rebuilt

00:24:24,080 --> 00:24:30,559
the packages containing

00:24:27,279 --> 00:24:33,760
real execute tables so the

00:24:30,559 --> 00:24:35,679
leaf packages so to speak but someone

00:24:33,760 --> 00:24:37,919
written a tool to examine

00:24:35,679 --> 00:24:39,200
the stuff in the archive when we know

00:24:37,919 --> 00:24:40,559
there's an update

00:24:39,200 --> 00:24:42,960
i mean i think that's what reinhard was

00:24:40,559 --> 00:24:45,840
asking about what what mechanism are we

00:24:42,960 --> 00:24:50,400
using to actually

00:24:45,840 --> 00:24:53,440
generate the uh rebuilds

00:24:50,400 --> 00:24:56,720
send in sending as

00:24:53,440 --> 00:25:00,080
far as i know not but

00:24:56,720 --> 00:25:01,840
i might miss something here so you mean

00:25:00,080 --> 00:25:04,880
maybe nobody's looking after it

00:25:01,840 --> 00:25:04,880
what did the go people do

00:25:05,200 --> 00:25:11,360
i'm not aware of a structured approach

00:25:09,200 --> 00:25:13,120
so claimants and i have been thinking

00:25:11,360 --> 00:25:16,320
yesterday about

00:25:13,120 --> 00:25:18,400
maybe we can use um i mean

00:25:16,320 --> 00:25:20,320
the ftp teams has asked us to stop using

00:25:18,400 --> 00:25:23,440
build using so we are looking at

00:25:20,320 --> 00:25:26,799
adopting one um that is x

00:25:23,440 --> 00:25:28,799
cargo field that the rust team

00:25:26,799 --> 00:25:31,200
is proposing to identify okay what

00:25:28,799 --> 00:25:32,640
binary package need to be rebuilt and

00:25:31,200 --> 00:25:34,480
claimers and i were thinking about a

00:25:32,640 --> 00:25:37,120
tool that

00:25:34,480 --> 00:25:37,600
would then submit these bin in muse i

00:25:37,120 --> 00:25:39,919
was

00:25:37,600 --> 00:25:42,320
thinking well look if we needed to do a

00:25:39,919 --> 00:25:44,320
full dependency rebuild then it makes

00:25:42,320 --> 00:25:46,240
things more complicated because now you

00:25:44,320 --> 00:25:46,880
need to think about in what order do you

00:25:46,240 --> 00:25:49,200
submit the

00:25:46,880 --> 00:25:49,919
spin and then use um another challenge

00:25:49,200 --> 00:25:52,720
was

00:25:49,919 --> 00:25:53,279
uh you can't be in nmu arc all packages

00:25:52,720 --> 00:25:56,559
so

00:25:53,279 --> 00:25:58,880
we need to come up with a mechanism to

00:25:56,559 --> 00:25:59,840
do sourcefuls reuploads that don't have

00:25:58,880 --> 00:26:01,360
any change

00:25:59,840 --> 00:26:03,200
um i find quite interesting that you

00:26:01,360 --> 00:26:04,880
point out well we don't actually need to

00:26:03,200 --> 00:26:07,919
do full archive rebuilds

00:26:04,880 --> 00:26:11,200
and we can just build the

00:26:07,919 --> 00:26:13,360
leaf packages in an arbitrary order that

00:26:11,200 --> 00:26:15,120
is kind of surprising to me and i need

00:26:13,360 --> 00:26:18,159
to think more about this um

00:26:15,120 --> 00:26:21,039
bastian do you have any thoughts or

00:26:18,159 --> 00:26:21,039
opinions on this

00:26:22,240 --> 00:26:27,200
no i don't i know the haskell people are

00:26:25,840 --> 00:26:28,559
really organized about this and have

00:26:27,200 --> 00:26:30,080
been for a long time because i think

00:26:28,559 --> 00:26:31,039
they were the first people to really

00:26:30,080 --> 00:26:34,000
have this problem

00:26:31,039 --> 00:26:35,919
at scale and they built themselves some

00:26:34,000 --> 00:26:39,360
kind of system

00:26:35,919 --> 00:26:42,880
um which seems to work

00:26:39,360 --> 00:26:47,279
maybe we should all copy their stuff

00:26:42,880 --> 00:26:50,880
haskell is a little bit

00:26:47,279 --> 00:26:52,799
a different problem because

00:26:50,880 --> 00:26:54,159
they have to rebuild all the library

00:26:52,799 --> 00:26:57,840
packages which

00:26:54,159 --> 00:26:57,840
go and rust don't need to

00:26:58,480 --> 00:27:04,799
okay they uh have to rebuild the

00:27:01,520 --> 00:27:05,760
whole dependency train um starting at

00:27:04,799 --> 00:27:08,720
the bottom and

00:27:05,760 --> 00:27:10,080
starting at the bottom at the compiler

00:27:08,720 --> 00:27:11,679
right

00:27:10,080 --> 00:27:13,840
okay every time what there's a new pilot

00:27:11,679 --> 00:27:16,240
version or something yes

00:27:13,840 --> 00:27:19,440
right okay that's that's it okay and

00:27:16,240 --> 00:27:19,440
this is a slightly different problem

00:27:19,919 --> 00:27:25,200
and which appears to vary by language

00:27:21,679 --> 00:27:25,200
exactly what the constraints are

00:27:25,520 --> 00:27:34,240
i am not aware of a

00:27:28,960 --> 00:27:36,570
universal um

00:27:34,240 --> 00:27:39,200
the solution for that because uh

00:27:36,570 --> 00:27:42,320
[Music]

00:27:39,200 --> 00:27:44,880
we don't uh usually do static linking in

00:27:42,320 --> 00:27:46,480
the traditional languages so we don't

00:27:44,880 --> 00:27:48,480
actually have that problem

00:27:46,480 --> 00:27:50,080
no exactly i mean debian's sort of

00:27:48,480 --> 00:27:52,480
fundamental design a lot of

00:27:50,080 --> 00:27:53,679
it is based on the kind of the sea view

00:27:52,480 --> 00:27:55,360
of the world and then

00:27:53,679 --> 00:27:56,640
you know dynamic linking is the right

00:27:55,360 --> 00:27:58,880
answer that's what we should be doing

00:27:56,640 --> 00:28:01,039
which is why all this static stuff

00:27:58,880 --> 00:28:03,919
sort of doesn't it's a bit square pegs

00:28:01,039 --> 00:28:05,279
and round holes kind of thing

00:28:03,919 --> 00:28:07,039
but unfortunately the world seems to

00:28:05,279 --> 00:28:07,600
like it rather a lot and i'm not sure we

00:28:07,039 --> 00:28:09,120
can

00:28:07,600 --> 00:28:11,760
persuade all these upstreams to stop

00:28:09,120 --> 00:28:15,360
doing it um

00:28:11,760 --> 00:28:16,960
so we may have to adjust some larger

00:28:15,360 --> 00:28:19,520
things to to accommodate

00:28:16,960 --> 00:28:21,039
all this staticness better is that it's

00:28:19,520 --> 00:28:23,120
less of a problem in red hat world

00:28:21,039 --> 00:28:24,640
because they already rebuild everything

00:28:23,120 --> 00:28:26,240
a lot anyway or they rebuild all

00:28:24,640 --> 00:28:27,679
dependencies when they upload new things

00:28:26,240 --> 00:28:29,600
anyway

00:28:27,679 --> 00:28:32,080
and part of our design a lot of it comes

00:28:29,600 --> 00:28:34,240
back to 20 years ago when we are we are

00:28:32,080 --> 00:28:36,080
terribly sure to build the resource

00:28:34,240 --> 00:28:37,679
so we designed things so that we don't

00:28:36,080 --> 00:28:39,600
need to rebuild things which was good

00:28:37,679 --> 00:28:43,120
and efficient and lovely

00:28:39,600 --> 00:28:46,159
but perhaps that's less true than it was

00:28:43,120 --> 00:28:49,919
um how do you think

00:28:46,159 --> 00:28:53,279
uh could uh security work

00:28:49,919 --> 00:28:56,159
the security part actually work if

00:28:53,279 --> 00:28:56,799
you say you have three versions of a

00:28:56,159 --> 00:29:00,000
crate

00:28:56,799 --> 00:29:03,039
in the archive and only one

00:29:00,000 --> 00:29:06,240
actually supported what

00:29:03,039 --> 00:29:07,600
how would security work yeah

00:29:06,240 --> 00:29:09,679
i guess that's a question for the

00:29:07,600 --> 00:29:10,480
ecosystem and what the rust people

00:29:09,679 --> 00:29:11,919
expect to happen

00:29:10,480 --> 00:29:13,840
they arrest people especially claim

00:29:11,919 --> 00:29:16,320
security is good so uh

00:29:13,840 --> 00:29:17,760
if if their other mechanisms are making

00:29:16,320 --> 00:29:19,039
it terrible we can beat them over the

00:29:17,760 --> 00:29:21,840
head with it and say

00:29:19,039 --> 00:29:22,960
this doesn't make any sense usually if

00:29:21,840 --> 00:29:25,919
you submit

00:29:22,960 --> 00:29:28,000
a merge request for updating a

00:29:25,919 --> 00:29:31,039
dependency

00:29:28,000 --> 00:29:34,880
most of the ecosystem responds

00:29:31,039 --> 00:29:37,600
positive and and quickly to it

00:29:34,880 --> 00:29:39,760
so so we should generally be able to use

00:29:37,600 --> 00:29:41,360
a current version for everything and not

00:29:39,760 --> 00:29:44,559
have to be supporting

00:29:41,360 --> 00:29:45,360
yes yes at least that's the goal i think

00:29:44,559 --> 00:29:48,640
we had some

00:29:45,360 --> 00:29:53,039
lips that had massive api changes uh

00:29:48,640 --> 00:29:55,039
between versions but the rust ecosystem

00:29:53,039 --> 00:29:56,320
typically follows the december

00:29:55,039 --> 00:29:59,360
specification

00:29:56,320 --> 00:30:01,600
quite um tightly

00:29:59,360 --> 00:30:02,720
so uh this is visible in the version

00:30:01,600 --> 00:30:03,919
numbers

00:30:02,720 --> 00:30:05,200
i mean that happens in the rest of the

00:30:03,919 --> 00:30:07,440
world too and it's you know it's a

00:30:05,200 --> 00:30:08,880
problem like qt four to five and things

00:30:07,440 --> 00:30:12,880
which is you know

00:30:08,880 --> 00:30:14,880
painful tastic but you know we we manage

00:30:12,880 --> 00:30:16,720
uh so you know i don't think we can say

00:30:14,880 --> 00:30:19,919
that that's a reason

00:30:16,720 --> 00:30:20,840
for not being able to to do normal

00:30:19,919 --> 00:30:23,840
things

00:30:20,840 --> 00:30:26,399
um do the go why do the go people

00:30:23,840 --> 00:30:27,760
not have this problem of of enormous

00:30:26,399 --> 00:30:29,200
numbers of dependencies because you've

00:30:27,760 --> 00:30:30,480
got the same basic mechanism of

00:30:29,200 --> 00:30:32,240
basically putting

00:30:30,480 --> 00:30:34,799
binary packages which are really source

00:30:32,240 --> 00:30:37,360
packages so that the go module system

00:30:34,799 --> 00:30:40,399
can build things right

00:30:37,360 --> 00:30:40,399
they don't

00:30:40,799 --> 00:30:44,640
handle something like features they

00:30:43,200 --> 00:30:47,679
don't handle

00:30:44,640 --> 00:30:50,399
uh version dependencies they just have

00:30:47,679 --> 00:30:50,960
usually just have one version all right

00:30:50,399 --> 00:30:54,159
and

00:30:50,960 --> 00:30:57,679
if it doesn't work then screw it

00:30:54,159 --> 00:30:59,840
okay which is well conventional

00:30:57,679 --> 00:31:02,000
there are it is more conventional so

00:30:59,840 --> 00:31:02,559
you're right um there are some cases

00:31:02,000 --> 00:31:05,200
like the

00:31:02,559 --> 00:31:06,960
recent protobuf bindings where we do

00:31:05,200 --> 00:31:09,519
have several versions and

00:31:06,960 --> 00:31:11,519
we do actually a very similar approach

00:31:09,519 --> 00:31:12,320
to what we do for traditional packages

00:31:11,519 --> 00:31:15,360
like uh

00:31:12,320 --> 00:31:17,679
qt we upload the source

00:31:15,360 --> 00:31:19,600
into different source package so there's

00:31:17,679 --> 00:31:21,279
a protobuf package for the old api and

00:31:19,600 --> 00:31:22,880
for the new api and they have different

00:31:21,279 --> 00:31:23,679
names for source packages and binary

00:31:22,880 --> 00:31:26,720
packages

00:31:23,679 --> 00:31:28,159
and we tack along and do it like

00:31:26,720 --> 00:31:31,039
other languages do it as well but in

00:31:28,159 --> 00:31:34,159
general that's the end is right

00:31:31,039 --> 00:31:36,159
okay so i guess the question is is does

00:31:34,159 --> 00:31:38,399
is there really a good reason why rust

00:31:36,159 --> 00:31:39,679
can't do something more like that

00:31:38,399 --> 00:31:43,039
i mean yeah we've come up with this

00:31:39,679 --> 00:31:46,159
scheme but it's getting pushed back

00:31:43,039 --> 00:31:46,880
um and whilst it's you know i think it's

00:31:46,159 --> 00:31:48,720
easy to

00:31:46,880 --> 00:31:49,919
put to automate it's that's the nice

00:31:48,720 --> 00:31:51,279
feature right it means you can take

00:31:49,919 --> 00:31:53,760
whatever upstream did

00:31:51,279 --> 00:31:54,799
and just reflect it in debian's

00:31:53,760 --> 00:31:56,000
mechanisms

00:31:54,799 --> 00:31:57,440
but the problem is that we have this

00:31:56,000 --> 00:32:01,200
kind of combinatorial explosion

00:31:57,440 --> 00:32:03,919
associated with that um

00:32:01,200 --> 00:32:05,279
and you know do we really need it well i

00:32:03,919 --> 00:32:06,559
zoom in this is unfortunately not here

00:32:05,279 --> 00:32:08,559
he seemed to be the person arguing

00:32:06,559 --> 00:32:10,559
loudest in bug reports to say

00:32:08,559 --> 00:32:15,039
yes we're not changing it it's a good

00:32:10,559 --> 00:32:18,399
system leave us alone

00:32:15,039 --> 00:32:19,519
yeah his arguments also go into the

00:32:18,399 --> 00:32:22,880
direction that

00:32:19,519 --> 00:32:24,000
he considers uh the new queue for binary

00:32:22,880 --> 00:32:28,159
packages to be

00:32:24,000 --> 00:32:30,559
uh unnecessary i'm inclined to agree

00:32:28,159 --> 00:32:32,159
with that but i guess if the ftp masters

00:32:30,559 --> 00:32:34,399
are all of one mind on that

00:32:32,159 --> 00:32:36,159
we're kind of stuck with it for now uh

00:32:34,399 --> 00:32:36,480
bastian do would it be fair to say that

00:32:36,159 --> 00:32:39,360
that

00:32:36,480 --> 00:32:39,679
you you are uh a fair representation of

00:32:39,360 --> 00:32:41,279
what

00:32:39,679 --> 00:32:43,840
ftp masters in general think is there

00:32:41,279 --> 00:32:43,840
any disagreement

00:32:45,519 --> 00:32:48,960
i think i got a

00:32:51,120 --> 00:32:57,840
good knowledge what they usually want

00:32:55,679 --> 00:32:57,840
and

00:33:01,200 --> 00:33:04,640
okay i guess i still don't understand

00:33:03,840 --> 00:33:08,240
why

00:33:04,640 --> 00:33:11,440
we want to keep the new review of

00:33:08,240 --> 00:33:13,440
auto generate for metadata packages

00:33:11,440 --> 00:33:15,200
just i don't quite see what we're

00:33:13,440 --> 00:33:18,640
achieving uh because

00:33:15,200 --> 00:33:24,559
um uh

00:33:18,640 --> 00:33:27,919
because no one actually proposed a

00:33:24,559 --> 00:33:31,360
an algorithm to decide cat

00:33:27,919 --> 00:33:34,720
made this binary package

00:33:31,360 --> 00:33:35,760
added to the source package is this

00:33:34,720 --> 00:33:37,519
allowed or

00:33:35,760 --> 00:33:39,840
right yeah what's the definition of

00:33:37,519 --> 00:33:42,480
something so trivial small

00:33:39,840 --> 00:33:43,679
known understood whatever that it could

00:33:42,480 --> 00:33:46,080
skip the queue

00:33:43,679 --> 00:33:47,600
yes yeah it's like i mean there was

00:33:46,080 --> 00:33:50,799
obviously a big difference between

00:33:47,600 --> 00:33:52,240
adding a whole new thing in the kind of

00:33:50,799 --> 00:33:54,000
convention and a big package

00:33:52,240 --> 00:33:55,919
which is splitting out a big chunk or

00:33:54,000 --> 00:33:57,200
whatever um

00:33:55,919 --> 00:33:59,679
because a lot of the time it's just a

00:33:57,200 --> 00:34:04,080
different split of the same source

00:33:59,679 --> 00:34:04,080
i guess in more you know normal packages

00:34:04,840 --> 00:34:10,240
um obviously

00:34:06,799 --> 00:34:12,399
potentially with extra binaries um

00:34:10,240 --> 00:34:13,520
and licensing issues or namespace

00:34:12,399 --> 00:34:14,879
problems

00:34:13,520 --> 00:34:16,159
i mean i think the namespace i guess

00:34:14,879 --> 00:34:18,639
isn't really a problem here because it's

00:34:16,159 --> 00:34:21,359
all liberous dash whatever

00:34:18,639 --> 00:34:22,960
so we've kind of got a namespace to play

00:34:21,359 --> 00:34:24,079
in

00:34:22,960 --> 00:34:26,560
which it seems to me isn't going to

00:34:24,079 --> 00:34:30,560
cause problems

00:34:26,560 --> 00:34:32,879
uh bastion if i may ask a question is

00:34:30,560 --> 00:34:35,280
there anything that you can imagine that

00:34:32,879 --> 00:34:35,919
we could do from the packaging side as

00:34:35,280 --> 00:34:38,639
rust and

00:34:35,919 --> 00:34:40,639
golden packages to make reviewing these

00:34:38,639 --> 00:34:42,800
kind of packages easier is there some

00:34:40,639 --> 00:34:43,679
metadata or is there some pattern or

00:34:42,800 --> 00:34:46,960
some some

00:34:43,679 --> 00:34:49,520
strategy that we could do to to

00:34:46,960 --> 00:34:53,520
to allow you to fast track these kind of

00:34:49,520 --> 00:34:53,520
packages to reduce the latency here

00:34:54,879 --> 00:35:00,560
no not right now because the review is

00:34:57,839 --> 00:35:00,560
not the problem

00:35:01,599 --> 00:35:06,000
the review itself is not a problem the

00:35:03,520 --> 00:35:09,200
problem is that uh

00:35:06,000 --> 00:35:12,400
um we don't want the stuff

00:35:09,200 --> 00:35:14,800
in this state

00:35:12,400 --> 00:35:16,240
because it explodes yeah you don't like

00:35:14,800 --> 00:35:18,400
the mechanism so you're now

00:35:16,240 --> 00:35:20,079
reluctant to add more of it it was all

00:35:18,400 --> 00:35:23,839
right when there's only a bit

00:35:20,079 --> 00:35:25,599
yes right okay

00:35:23,839 --> 00:35:27,920
well i guess that's fairly clear it does

00:35:25,599 --> 00:35:29,359
seem like we might have to

00:35:27,920 --> 00:35:31,839
uh i mean the problem is finding

00:35:29,359 --> 00:35:33,119
somebody if if you know

00:35:31,839 --> 00:35:35,680
people like zooming they're just going

00:35:33,119 --> 00:35:37,599
to go nope i'm not changing it

00:35:35,680 --> 00:35:39,599
we have to find someone who's prepared

00:35:37,599 --> 00:35:42,320
to do some work

00:35:39,599 --> 00:35:43,280
uh um i don't mind having a look but i'm

00:35:42,320 --> 00:35:45,040
a bit new to all this

00:35:43,280 --> 00:35:47,520
so i'm not really going to do a good job

00:35:45,040 --> 00:35:49,119
and already have far too many hats

00:35:47,520 --> 00:35:50,880
uh that's the usual problem but you know

00:35:49,119 --> 00:35:52,079
i i think it does seem like we're kind

00:35:50,880 --> 00:35:53,839
of getting to a point

00:35:52,079 --> 00:35:56,240
where we're stuck unless we change

00:35:53,839 --> 00:35:56,240
something

00:35:56,320 --> 00:35:59,359
um i must admit i'm really new to this

00:35:58,800 --> 00:36:01,280
but

00:35:59,359 --> 00:36:02,960
uh from what i'm hearing i'm think

00:36:01,280 --> 00:36:06,000
perhaps there is a way to

00:36:02,960 --> 00:36:08,240
uh rewrite or maybe fork i mean not for

00:36:06,000 --> 00:36:10,640
to do some kind of tooling with uh cargo

00:36:08,240 --> 00:36:12,960
so it has like two modes like one is

00:36:10,640 --> 00:36:13,839
what has it has been doing another way

00:36:12,960 --> 00:36:16,960
is

00:36:13,839 --> 00:36:19,520
likes to somehow make it automated

00:36:16,960 --> 00:36:20,640
but not split off into new packages for

00:36:19,520 --> 00:36:24,400
each new feature

00:36:20,640 --> 00:36:27,280
so maybe that's something to consider um

00:36:24,400 --> 00:36:28,320
and has it been been done like uh the

00:36:27,280 --> 00:36:30,960
discussion with uh

00:36:28,320 --> 00:36:31,760
cargo upstream to see if that's uh a

00:36:30,960 --> 00:36:35,119
possible

00:36:31,760 --> 00:36:37,200
maybe it's like a compact mode to

00:36:35,119 --> 00:36:38,800
keep all new features in one package

00:36:37,200 --> 00:36:42,400
that kind of thing

00:36:38,800 --> 00:36:45,520
i'd maybe i should explain how this

00:36:42,400 --> 00:36:49,680
uh mechanism works so um

00:36:45,520 --> 00:36:52,720
we have uh features in in cargo

00:36:49,680 --> 00:36:53,280
and you can add features that either

00:36:52,720 --> 00:36:56,320
don't

00:36:53,280 --> 00:37:00,240
or that do require extra

00:36:56,320 --> 00:37:03,440
library grades uh sdr dependency

00:37:00,240 --> 00:37:06,880
and the mechanism works in that way when

00:37:03,440 --> 00:37:06,880
the feature is

00:37:07,280 --> 00:37:11,200
when the feature does not require an

00:37:08,800 --> 00:37:13,040
extra dependency then it is added into

00:37:11,200 --> 00:37:15,040
the provides line

00:37:13,040 --> 00:37:16,560
and when it does require an extra

00:37:15,040 --> 00:37:18,640
dependency a

00:37:16,560 --> 00:37:19,839
separate binary package is created for

00:37:18,640 --> 00:37:23,680
it

00:37:19,839 --> 00:37:27,359
and uh this has the dependency to the

00:37:23,680 --> 00:37:27,359
extra library that is required

00:37:29,440 --> 00:37:37,119
okay so yeah it actually

00:37:33,599 --> 00:37:38,880
works quite well um apart from

00:37:37,119 --> 00:37:40,160
these issues with the long provides

00:37:38,880 --> 00:37:42,400
lines and such

00:37:40,160 --> 00:37:42,400
things

00:37:44,320 --> 00:37:50,800
the problem is so we had upstreams

00:37:47,520 --> 00:37:52,320
upstream sources that yeah added an

00:37:50,800 --> 00:37:54,000
extra dependency to

00:37:52,320 --> 00:37:55,359
to this feature because they switched

00:37:54,000 --> 00:37:57,599
from one

00:37:55,359 --> 00:37:59,119
uh library to a different library that

00:37:57,599 --> 00:38:02,800
they used and then

00:37:59,119 --> 00:38:05,200
boom we had a new um

00:38:02,800 --> 00:38:06,320
binary package edit that had been in the

00:38:05,200 --> 00:38:11,119
provides line before

00:38:06,320 --> 00:38:11,119
and now it needs to go through new again

00:38:11,200 --> 00:38:14,480
so i guess a bit of analysis of the

00:38:13,280 --> 00:38:17,680
whole

00:38:14,480 --> 00:38:19,119
tree and just how many of these feature

00:38:17,680 --> 00:38:22,560
things

00:38:19,119 --> 00:38:25,680
are well are exist um

00:38:22,560 --> 00:38:27,359
and how many dependency cycles we've got

00:38:25,680 --> 00:38:28,480
and stuff which is an area i know quite

00:38:27,359 --> 00:38:29,200
a lot about having done a lot of

00:38:28,480 --> 00:38:32,480
bootstrapping

00:38:29,200 --> 00:38:33,839
so i suppose a bit of analysis on you

00:38:32,480 --> 00:38:36,640
know to what degree

00:38:33,839 --> 00:38:39,440
could we compress features into packages

00:38:36,640 --> 00:38:42,720
without actually causing any extra

00:38:39,440 --> 00:38:44,880
work um

00:38:42,720 --> 00:38:47,119
i don't know maybe it's not at all maybe

00:38:44,880 --> 00:38:48,400
it's quite a lot

00:38:47,119 --> 00:38:50,480
yeah i'm kind of wondering whether and

00:38:48,400 --> 00:38:52,400
do we need to version everything

00:38:50,480 --> 00:38:53,839
you know if in fact you could do a load

00:38:52,400 --> 00:38:56,960
of packages which are just

00:38:53,839 --> 00:38:58,400
the package and we only version things

00:38:56,960 --> 00:39:01,839
when we need to

00:38:58,400 --> 00:39:01,839
because more than one is required

00:39:03,599 --> 00:39:07,200
i don't know if there's uh you know

00:39:05,920 --> 00:39:09,440
that's manual work

00:39:07,200 --> 00:39:11,119
but we probably only have to do it once

00:39:09,440 --> 00:39:12,640
except when

00:39:11,119 --> 00:39:14,560
for some reason two versions of

00:39:12,640 --> 00:39:16,880
something become important down the tree

00:39:14,560 --> 00:39:18,480
i don't know i guess all these packages

00:39:16,880 --> 00:39:21,520
are tiny

00:39:18,480 --> 00:39:22,880
so it's easy to end up using a lot of

00:39:21,520 --> 00:39:25,040
different

00:39:22,880 --> 00:39:26,960
bits and you probably never know whether

00:39:25,040 --> 00:39:28,240
someone actually needs a different

00:39:26,960 --> 00:39:31,599
version of something or just happens to

00:39:28,240 --> 00:39:34,560
have a different version in their list

00:39:31,599 --> 00:39:34,560
this is always a problem

00:39:35,119 --> 00:39:40,160
but you know other languages manage and

00:39:38,720 --> 00:39:43,040
although as part of the reason debian is

00:39:40,160 --> 00:39:44,800
often a bit slow is this sort of

00:39:43,040 --> 00:39:47,680
what upstreams would view as pointless

00:39:44,800 --> 00:39:49,119
make work that distros do

00:39:47,680 --> 00:39:51,359
but sometimes that's because they don't

00:39:49,119 --> 00:39:53,920
understand and sometimes they've kind of

00:39:51,359 --> 00:39:53,920
got a point

00:39:54,079 --> 00:39:57,119
uh oh well uh i guess we're getting

00:39:55,599 --> 00:39:57,680
another five minutes is there anything

00:39:57,119 --> 00:40:00,640
else

00:39:57,680 --> 00:40:00,640
we should discuss

00:40:01,040 --> 00:40:06,800
um just last point to the previous

00:40:04,079 --> 00:40:08,640
discussion um we the go team has been

00:40:06,800 --> 00:40:10,640
doing a lot of manual work

00:40:08,640 --> 00:40:12,160
and maybe that's why we didn't run into

00:40:10,640 --> 00:40:14,000
this probe and we have been lucky that

00:40:12,160 --> 00:40:17,200
uh usually the latest version

00:40:14,000 --> 00:40:18,960
is compatible with everything uh so

00:40:17,200 --> 00:40:20,560
yeah hard problem but we but i'll leave

00:40:18,960 --> 00:40:22,960
it at that and we can go on to the next

00:40:20,560 --> 00:40:22,960
topic

00:40:26,640 --> 00:40:30,880
is there anything else otherwise you

00:40:28,160 --> 00:40:30,880
carry on on this

00:40:31,119 --> 00:40:39,839
anyone hasn't spoken and wishes to say

00:40:33,520 --> 00:40:39,839
what they're interested in

00:40:43,440 --> 00:40:50,000
go ahead hello can you hear me

00:40:46,800 --> 00:40:51,920
now yes yeah okay i'm danielle uh i

00:40:50,000 --> 00:40:55,040
started using rust

00:40:51,920 --> 00:40:58,240
two years ago sporadically

00:40:55,040 --> 00:41:01,440
i just changed a job where i

00:40:58,240 --> 00:41:05,359
will have the opportunity to use it

00:41:01,440 --> 00:41:08,960
daily i just want to

00:41:05,359 --> 00:41:12,240
help the team i have to refresh my

00:41:08,960 --> 00:41:12,960
what i have look at the last year about

00:41:12,240 --> 00:41:16,880
packaging

00:41:12,960 --> 00:41:20,079
rust but i am here to help

00:41:16,880 --> 00:41:22,000
so i not so experienced in packaging

00:41:20,079 --> 00:41:26,400
rust application but

00:41:22,000 --> 00:41:26,400
i can volunteer i will have more time

00:41:26,560 --> 00:41:32,319
so okay cool thank you

00:41:30,800 --> 00:41:34,079
it sounds like we could do i don't know

00:41:32,319 --> 00:41:35,119
so what to what degree are we horribly

00:41:34,079 --> 00:41:37,119
undemand

00:41:35,119 --> 00:41:40,000
and there's nothing like enough people i

00:41:37,119 --> 00:41:40,000
guess that's normal

00:41:40,640 --> 00:41:44,000
sorry i was just wondering to what

00:41:43,040 --> 00:41:47,839
degree

00:41:44,000 --> 00:41:50,000
there's a shortage of people

00:41:47,839 --> 00:41:50,000
do

00:41:51,280 --> 00:41:57,599
currently many people have

00:41:54,560 --> 00:42:00,839
given up packaging again because

00:41:57,599 --> 00:42:03,839
of the whole issue we have we had some

00:42:00,839 --> 00:42:06,079
motivated contributors that

00:42:03,839 --> 00:42:08,880
reduced their work to down to nearly

00:42:06,079 --> 00:42:11,520
zero so i'm i'm

00:42:08,880 --> 00:42:13,440
i would be really happy if we could um

00:42:11,520 --> 00:42:16,319
find a solution that works for

00:42:13,440 --> 00:42:17,359
for both sides that's what i mean i

00:42:16,319 --> 00:42:19,200
think we probably

00:42:17,359 --> 00:42:22,400
need to try and change something because

00:42:19,200 --> 00:42:24,319
as you say we're demotivating

00:42:22,400 --> 00:42:26,240
of course we always need people but

00:42:24,319 --> 00:42:29,520
currently we we can't give

00:42:26,240 --> 00:42:31,760
them any real work to do

00:42:29,520 --> 00:42:33,760
i would like to point out a very similar

00:42:31,760 --> 00:42:34,880
picture is also in the golang community

00:42:33,760 --> 00:42:38,160
um

00:42:34,880 --> 00:42:40,720
people working on core infrastructures

00:42:38,160 --> 00:42:43,520
topics such as the gold and gap helper

00:42:40,720 --> 00:42:46,079
and the security people are really hard

00:42:43,520 --> 00:42:46,079
to come by

00:42:53,520 --> 00:42:58,839
maybe some words that were written in

00:42:57,040 --> 00:43:02,319
the chat by

00:42:58,839 --> 00:43:05,599
kpcyrd who is watching the stream

00:43:02,319 --> 00:43:06,480
uh they said the removal of all packages

00:43:05,599 --> 00:43:09,119
in testing was

00:43:06,480 --> 00:43:12,160
requested by me the reason it was

00:43:09,119 --> 00:43:14,480
necessary was new

00:43:12,160 --> 00:43:16,079
uh the second comment is the uh

00:43:14,480 --> 00:43:19,599
regarding the security

00:43:16,079 --> 00:43:21,839
um maintenance the info which version

00:43:19,599 --> 00:43:24,079
was used to build a given binary can be

00:43:21,839 --> 00:43:27,040
looked up from the build info files not

00:43:24,079 --> 00:43:29,359
ideal but at least something

00:43:27,040 --> 00:43:30,240
right yeah so that it's in the stream as

00:43:29,359 --> 00:43:32,400
well

00:43:30,240 --> 00:43:34,319
i think there was some discussion about

00:43:32,400 --> 00:43:37,280
whether we should be using build info

00:43:34,319 --> 00:43:38,640
or built using or some other mechanism

00:43:37,280 --> 00:43:40,480
for this kind of

00:43:38,640 --> 00:43:42,079
tracking of what stuff was actually

00:43:40,480 --> 00:43:45,040
built with

00:43:42,079 --> 00:43:46,240
um right well i guess our time's up

00:43:45,040 --> 00:43:49,440
thank you everybody

00:43:46,240 --> 00:43:52,800
um i think that was useful uh

00:43:49,440 --> 00:43:52,800
if not necessarily particularly

00:43:52,839 --> 00:43:58,560
encouraging

00:43:55,040 --> 00:43:59,200
one last thing we uh have uh an irc

00:43:58,560 --> 00:44:02,400
meeting

00:43:59,200 --> 00:44:05,680
later i think in uh

00:44:02,400 --> 00:44:06,560
three or four hours uh maybe whoever is

00:44:05,680 --> 00:44:10,960
interested

00:44:06,560 --> 00:44:14,400
in the topic might want to join

00:44:10,960 --> 00:44:18,960
yes good point on the debian debian

00:44:14,400 --> 00:44:18,960
rust channel right exactly yeah

00:44:19,040 --> 00:44:25,839
so well thank you all

00:44:23,040 --> 00:44:26,560
um we should probably do this again

00:44:25,839 --> 00:44:27,760
because

00:44:26,560 --> 00:44:29,760
clearly some of these problems are not

00:44:27,760 --> 00:44:33,280
going away

00:44:29,760 --> 00:44:36,720
and i think more into team

00:44:33,280 --> 00:44:37,839
action will probably help us solve the

00:44:36,720 --> 00:44:39,920
general case

00:44:37,839 --> 00:44:41,359
it's one thing debian's good at we're

00:44:39,920 --> 00:44:42,560
not very fast but we are quite good at

00:44:41,359 --> 00:44:45,599
solving the general case

00:44:42,560 --> 00:44:48,640
eventually um so

00:44:45,599 --> 00:44:52,880
i'll do what i can to to help out

00:44:48,640 --> 00:44:55,040
um i hope this was useful cheers

00:44:52,880 --> 00:44:56,560
oh cheers thank you thanks bastian for

00:44:55,040 --> 00:45:04,319
turning up

00:44:56,560 --> 00:45:06,400
yeah thanks thank you bye

00:45:04,319 --> 00:45:06,400

YouTube URL: https://www.youtube.com/watch?v=pMXzr0O7HYw


