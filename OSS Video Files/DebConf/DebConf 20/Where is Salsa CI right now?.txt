Title: Where is Salsa CI right now?
Publication date: 2020-10-23
Playlist: DebConf 20
Description: 
	by IÃ±aki Malerba
by Joaquin de Andres

At: DebConf20
https://debconf20.debconf.org/talks/47-where-is-salsa-ci-right-now/

Introduction on what is and how Salsa CI can ease your work.

The Salsa CI pipeline was created 2 years ago, since then the adoption has 
grown a lot. Did Salsa CI make things better? Does it help anyone? We will 
show you an analisys of the impact and how the project has grown.

Room: Talks
Scheduled start: 2020-08-24 12:00:00
Captions: 
	00:00:05,920 --> 00:00:08,800
hello

00:00:06,399 --> 00:00:10,480
thanks for joining my name is inyaki i'm

00:00:08,800 --> 00:00:13,920
here with joaquin we're both

00:00:10,480 --> 00:00:15,759
members of the salsa ci team

00:00:13,920 --> 00:00:17,279
we would like to start with a short

00:00:15,759 --> 00:00:22,000
introduction

00:00:17,279 --> 00:00:25,439
review about what ci and gitlab ci are

00:00:22,000 --> 00:00:27,439
so what is ci

00:00:25,439 --> 00:00:28,800
a short definition would be that

00:00:27,439 --> 00:00:31,279
continuous integration

00:00:28,800 --> 00:00:32,000
is the practice of building and testing

00:00:31,279 --> 00:00:34,399
each change

00:00:32,000 --> 00:00:35,760
as early as possible this means that

00:00:34,399 --> 00:00:39,360
every time that you push

00:00:35,760 --> 00:00:42,399
some changes to your git repository

00:00:39,360 --> 00:00:44,000
a set of predefined scripts build and

00:00:42,399 --> 00:00:46,800
test your changes and you get

00:00:44,000 --> 00:00:48,640
quick fix but feedback about what you

00:00:46,800 --> 00:00:51,920
just pushed

00:00:48,640 --> 00:00:55,280
this is a nice diagram that get loves

00:00:51,920 --> 00:00:55,920
gitlab published about the normal

00:00:55,280 --> 00:00:59,520
workflow

00:00:55,920 --> 00:01:02,079
you have a good tree you branch

00:00:59,520 --> 00:01:03,280
from the main branch when you want to

00:01:02,079 --> 00:01:06,240
introduce a change

00:01:03,280 --> 00:01:08,080
you push your changes and when gitlab

00:01:06,240 --> 00:01:11,840
receives your changes it runs

00:01:08,080 --> 00:01:13,119
this ci that you defined in this case

00:01:11,840 --> 00:01:15,759
well you can see the

00:01:13,119 --> 00:01:17,280
red x something went wrong so you get

00:01:15,759 --> 00:01:20,640
feedback about

00:01:17,280 --> 00:01:24,159
the test that failed or whatever failed

00:01:20,640 --> 00:01:25,280
so you go back push the changes to fix

00:01:24,159 --> 00:01:28,159
that problem

00:01:25,280 --> 00:01:28,720
cia is green you get your magic quest

00:01:28,159 --> 00:01:32,720
reviewed

00:01:28,720 --> 00:01:35,280
and later on it gets murdered

00:01:32,720 --> 00:01:37,119
so what are the goals what's the

00:01:35,280 --> 00:01:40,320
intention of having ci

00:01:37,119 --> 00:01:42,399
on your project well the main

00:01:40,320 --> 00:01:44,159
goal is to detect problems before

00:01:42,399 --> 00:01:45,920
packages are released

00:01:44,159 --> 00:01:47,280
this may also means that in deviant for

00:01:45,920 --> 00:01:50,720
example uh

00:01:47,280 --> 00:01:53,439
having feedback before releasing

00:01:50,720 --> 00:01:55,119
and publishing to the archive your

00:01:53,439 --> 00:01:57,200
different packages

00:01:55,119 --> 00:01:58,960
instead of having to wait until the fci

00:01:57,200 --> 00:01:59,520
gives you the result if something went

00:01:58,960 --> 00:02:01,840
wrong

00:01:59,520 --> 00:02:02,799
you can get quick feedback and more

00:02:01,840 --> 00:02:06,840
trust about

00:02:02,799 --> 00:02:09,599
what you just pushed of course

00:02:06,840 --> 00:02:10,879
um build and test on reproducible

00:02:09,599 --> 00:02:13,920
environments

00:02:10,879 --> 00:02:16,560
uh we are our the pipeline

00:02:13,920 --> 00:02:18,239
builds and tests always on the same

00:02:16,560 --> 00:02:20,720
reproducible environment

00:02:18,239 --> 00:02:23,040
shared by everybody every contributor so

00:02:20,720 --> 00:02:23,520
every change is tested and built on the

00:02:23,040 --> 00:02:26,400
same

00:02:23,520 --> 00:02:28,480
environment but this is not the only

00:02:26,400 --> 00:02:32,080
things that ci can help you with

00:02:28,480 --> 00:02:34,080
for example avoid repetitive tasks

00:02:32,080 --> 00:02:36,400
running the same scripts over and over

00:02:34,080 --> 00:02:38,879
it's of course error prone

00:02:36,400 --> 00:02:39,440
building and testing takes time so

00:02:38,879 --> 00:02:41,440
sometimes

00:02:39,440 --> 00:02:43,040
we don't run some checks that we think

00:02:41,440 --> 00:02:46,160
they shouldn't be affected

00:02:43,040 --> 00:02:49,200
uh usually that's not true we

00:02:46,160 --> 00:02:51,040
skip some tests because we think that

00:02:49,200 --> 00:02:53,840
would take time and we know

00:02:51,040 --> 00:02:54,800
it's not going to fail and in the end it

00:02:53,840 --> 00:02:57,840
bites us

00:02:54,800 --> 00:02:59,840
later it also

00:02:57,840 --> 00:03:01,680
it's easier to attract new contributors

00:02:59,840 --> 00:03:02,159
because well it reduces the learning

00:03:01,680 --> 00:03:05,519
curve

00:03:02,159 --> 00:03:07,680
for packaging you can see

00:03:05,519 --> 00:03:10,000
on the repository how the package is

00:03:07,680 --> 00:03:12,959
filled and how the package is tested

00:03:10,000 --> 00:03:14,400
so you can learn how the maintainers of

00:03:12,959 --> 00:03:18,480
this package

00:03:14,400 --> 00:03:21,519
do all these tasks um it's

00:03:18,480 --> 00:03:22,720
well it's easier to review contributions

00:03:21,519 --> 00:03:24,720
because if you trust

00:03:22,720 --> 00:03:25,920
enough your pipeline you can focus on

00:03:24,720 --> 00:03:28,560
what really matters

00:03:25,920 --> 00:03:29,599
that is the changes and the code instead

00:03:28,560 --> 00:03:32,080
of having to

00:03:29,599 --> 00:03:33,519
take care of paying and attention if

00:03:32,080 --> 00:03:36,720
something else broke

00:03:33,519 --> 00:03:40,159
because of this new change

00:03:36,720 --> 00:03:42,560
also um all forks run the same ci

00:03:40,159 --> 00:03:44,159
so people trying to contribute to your

00:03:42,560 --> 00:03:46,560
project don't need to

00:03:44,159 --> 00:03:47,200
set up an testing environment on their

00:03:46,560 --> 00:03:50,799
local

00:03:47,200 --> 00:03:52,000
computers as every project forked on

00:03:50,799 --> 00:03:56,080
gitlab

00:03:52,000 --> 00:04:00,959
will allow them to reproduce the process

00:03:56,080 --> 00:04:03,599
so what is salsa ci what do we do

00:04:00,959 --> 00:04:05,920
debian in case you don't know uses a

00:04:03,599 --> 00:04:07,360
subhosted instance of gitlab that we

00:04:05,920 --> 00:04:10,000
call salsa

00:04:07,360 --> 00:04:10,560
gitlab ci uses yaml files on the

00:04:10,000 --> 00:04:12,840
projects

00:04:10,560 --> 00:04:15,360
to configure what ci does on your

00:04:12,840 --> 00:04:17,519
project

00:04:15,360 --> 00:04:19,359
on any push through the repository

00:04:17,519 --> 00:04:21,600
gitlab will look for the yaml

00:04:19,359 --> 00:04:23,360
and start jobs according to the content

00:04:21,600 --> 00:04:25,759
of the file

00:04:23,360 --> 00:04:26,720
as this file this yaml file is on the

00:04:25,759 --> 00:04:28,800
repository

00:04:26,720 --> 00:04:30,400
means that it's version controlled and

00:04:28,800 --> 00:04:31,199
each branch or commit can have a

00:04:30,400 --> 00:04:34,400
different

00:04:31,199 --> 00:04:38,560
definition of what ci does

00:04:34,400 --> 00:04:39,600
so we developed and maintain a recipe

00:04:38,560 --> 00:04:43,840
for building

00:04:39,600 --> 00:04:43,840
and testing deviant packages

00:04:44,240 --> 00:04:47,919
it runs on salsa share infrastructure

00:04:47,040 --> 00:04:50,960
and it looks

00:04:47,919 --> 00:04:50,960
something like this

00:04:51,280 --> 00:04:56,880
here you can see this is a

00:04:54,639 --> 00:04:57,759
normal pipeline the default pipeline

00:04:56,880 --> 00:05:01,759
that you would get

00:04:57,759 --> 00:05:02,720
by using our recipe it has two stages on

00:05:01,759 --> 00:05:05,840
the first stage

00:05:02,720 --> 00:05:06,400
the there are the build jobs we build

00:05:05,840 --> 00:05:08,880
both

00:05:06,400 --> 00:05:10,160
the binary package and the source only

00:05:08,880 --> 00:05:13,440
version

00:05:10,160 --> 00:05:14,639
if both builds succeed we move on to the

00:05:13,440 --> 00:05:17,840
test stage

00:05:14,639 --> 00:05:21,280
where we run all different kind of

00:05:17,840 --> 00:05:24,240
tools for example auto package test

00:05:21,280 --> 00:05:27,039
that is what devci does and runs the

00:05:24,240 --> 00:05:30,080
tests of your packages

00:05:27,039 --> 00:05:33,840
blhc build log hardener check

00:05:30,080 --> 00:05:37,360
lin tian view parts reprotest and

00:05:33,840 --> 00:05:39,919
building your package for all or

00:05:37,360 --> 00:05:40,400
for all and any if applicable if your

00:05:39,919 --> 00:05:43,440
package

00:05:40,400 --> 00:05:45,600
is for all or any uh

00:05:43,440 --> 00:05:46,479
there are other jobs that are disabled

00:05:45,600 --> 00:05:49,600
by default

00:05:46,479 --> 00:05:52,720
like aptly that allows you to publish

00:05:49,600 --> 00:05:56,080
your devs in case

00:05:52,720 --> 00:05:59,120
you needed to test those changes on a

00:05:56,080 --> 00:06:01,280
dependent package or something like that

00:05:59,120 --> 00:06:02,479
it's of course not intended to be used

00:06:01,280 --> 00:06:07,680
as a repository

00:06:02,479 --> 00:06:12,400
but only for testing purposes and

00:06:07,680 --> 00:06:16,319
rc check for example is a script that

00:06:12,400 --> 00:06:20,080
checks if there are still open erc bags

00:06:16,319 --> 00:06:22,960
not being addressed on your changes and

00:06:20,080 --> 00:06:23,919
check missing break replaces is a script

00:06:22,960 --> 00:06:27,280
that

00:06:23,919 --> 00:06:29,680
checks the producer's binary if it has

00:06:27,280 --> 00:06:31,039
any conflicting files against packages

00:06:29,680 --> 00:06:35,039
that are not declared

00:06:31,039 --> 00:06:37,840
with breaks and replaces all these jobs

00:06:35,039 --> 00:06:39,600
all the builds the tests the the ones

00:06:37,840 --> 00:06:40,639
enabled by default and the ones not

00:06:39,600 --> 00:06:43,840
enabled are

00:06:40,639 --> 00:06:46,319
customizable customizable

00:06:43,840 --> 00:06:48,639
um that means that you can change

00:06:46,319 --> 00:06:49,440
paramet you can change or add parameters

00:06:48,639 --> 00:06:52,479
if you need them

00:06:49,440 --> 00:06:54,960
you can disable them you can

00:06:52,479 --> 00:06:56,960
let them fail like you know your package

00:06:54,960 --> 00:07:00,479
is not reproducible you can

00:06:56,960 --> 00:07:03,599
make it you can keep the job running

00:07:00,479 --> 00:07:06,400
until so you know you have to fix it but

00:07:03,599 --> 00:07:08,400
you can make it if it fails not fail the

00:07:06,400 --> 00:07:11,759
whole pipeline

00:07:08,400 --> 00:07:13,840
this whole set of builds and tests takes

00:07:11,759 --> 00:07:16,080
no longer than seven or eight minutes

00:07:13,840 --> 00:07:18,800
for a regular python package so it's

00:07:16,080 --> 00:07:18,800
really fast

00:07:24,240 --> 00:07:27,360
so we started this because we thought

00:07:26,800 --> 00:07:30,319
that

00:07:27,360 --> 00:07:32,720
was something that will help the area

00:07:30,319 --> 00:07:35,759
numbers are the only way to know

00:07:32,720 --> 00:07:36,880
the project has grown in usage since the

00:07:35,759 --> 00:07:38,880
first commit

00:07:36,880 --> 00:07:41,919
after it until the project got some

00:07:38,880 --> 00:07:44,000
solidity the adoption was low

00:07:41,919 --> 00:07:45,280
it's nice to see how the differential

00:07:44,000 --> 00:07:47,120
efforts of the team

00:07:45,280 --> 00:07:48,400
and the maturity of the projects helped

00:07:47,120 --> 00:07:50,720
with the adoption

00:07:48,400 --> 00:07:53,120
as the first news some more projects

00:07:50,720 --> 00:07:55,759
started to use salsa ci

00:07:53,120 --> 00:07:57,599
after the first public email to the list

00:07:55,759 --> 00:08:00,960
a good number of projects adopted

00:07:57,599 --> 00:08:03,039
as a change in the drawing rate

00:08:00,960 --> 00:08:04,319
tina nina give the first talk about

00:08:03,039 --> 00:08:07,440
salsa ci

00:08:04,319 --> 00:08:09,280
on many webcam hammer convincing

00:08:07,440 --> 00:08:11,680
some developers to have the projects

00:08:09,280 --> 00:08:14,639
getting and slogged on the adoption

00:08:11,680 --> 00:08:15,520
but freely after the talk in last death

00:08:14,639 --> 00:08:17,520
demconf

00:08:15,520 --> 00:08:19,039
the amount of projects used in cersei

00:08:17,520 --> 00:08:21,680
grow faster

00:08:19,039 --> 00:08:23,440
the rolling rate changes changes

00:08:21,680 --> 00:08:27,599
changing almost to the

00:08:23,440 --> 00:08:32,800
double and that lead us to have today

00:08:27,599 --> 00:08:35,120
almost 4100 projects used in salsa ci

00:08:32,800 --> 00:08:37,519
as highlights we can see where some

00:08:35,120 --> 00:08:40,080
developers decided to use surface rci

00:08:37,519 --> 00:08:40,640
on all their projects and where some

00:08:40,080 --> 00:08:43,680
teams

00:08:40,640 --> 00:08:46,880
did that too this was a problem

00:08:43,680 --> 00:08:50,959
because the trigger of more than one

00:08:46,880 --> 00:08:52,240
1000 pipelines overloaded the salsa

00:08:50,959 --> 00:08:54,560
servers

00:08:52,240 --> 00:08:56,560
so if you intend to do that please

00:08:54,560 --> 00:09:00,160
disable the pipeline for that commit

00:08:56,560 --> 00:09:04,000
i will show you how to do it later

00:09:00,160 --> 00:09:06,959
so in percentages right now almost 20

00:09:04,000 --> 00:09:08,959
of the projects on salsa use some kind

00:09:06,959 --> 00:09:12,160
of ci and of those

00:09:08,959 --> 00:09:15,040
more than 70 percent use salsa ci

00:09:12,160 --> 00:09:15,680
and that shows that it's a generic

00:09:15,040 --> 00:09:18,880
solution

00:09:15,680 --> 00:09:22,399
for most of the projects and that's

00:09:18,880 --> 00:09:25,680
that was what we look for

00:09:22,399 --> 00:09:29,120
it was possible because we have a team

00:09:25,680 --> 00:09:32,560
right now the project has

00:09:29,120 --> 00:09:33,200
35 contributors the growth is overall

00:09:32,560 --> 00:09:37,440
constant

00:09:33,200 --> 00:09:39,120
and we hope it continues that way

00:09:37,440 --> 00:09:40,959
with more contributors the amount of

00:09:39,120 --> 00:09:44,320
contribution grows as well

00:09:40,959 --> 00:09:47,519
and it's nice to see that we work better

00:09:44,320 --> 00:09:47,519
when we are together

00:09:49,760 --> 00:09:55,760
and how to use a ci by default gitlab

00:09:53,279 --> 00:09:58,000
has a ca path set to a configuration

00:09:55,760 --> 00:10:00,160
file on the root of the project

00:09:58,000 --> 00:10:01,920
this doesn't work on most of the

00:10:00,160 --> 00:10:02,800
packages because the root of the

00:10:01,920 --> 00:10:05,200
repository

00:10:02,800 --> 00:10:06,560
belongs to upstream and the definition

00:10:05,200 --> 00:10:08,560
will collide

00:10:06,560 --> 00:10:10,560
there are many ways to use the pipeline

00:10:08,560 --> 00:10:13,600
definition you can find out that

00:10:10,560 --> 00:10:14,880
on the project readme we are going to

00:10:13,600 --> 00:10:17,279
cover

00:10:14,880 --> 00:10:19,440
here the most flexible way which allows

00:10:17,279 --> 00:10:22,720
customization

00:10:19,440 --> 00:10:23,839
one way is to set the question ca path

00:10:22,720 --> 00:10:26,079
to this

00:10:23,839 --> 00:10:27,600
this will use directly the definition by

00:10:26,079 --> 00:10:31,360
celsaceae team

00:10:27,600 --> 00:10:34,880
but is not going to allow the project to

00:10:31,360 --> 00:10:38,000
customize the pipeline so the

00:10:34,880 --> 00:10:40,000
questions miserable way is to set the

00:10:38,000 --> 00:10:41,680
custom city path to a local file with

00:10:40,000 --> 00:10:44,800
the include

00:10:41,680 --> 00:10:48,000
and then in the same file you can have

00:10:44,800 --> 00:10:52,320
the variables to customize the pipeline

00:10:48,000 --> 00:10:55,279
you can find each variable explained

00:10:52,320 --> 00:10:55,279
in the ready

00:10:55,920 --> 00:11:00,160
as i said before when adding ci to a set

00:10:59,440 --> 00:11:01,760
of projects

00:11:00,160 --> 00:11:03,440
it's important to not overload the

00:11:01,760 --> 00:11:07,360
system so

00:11:03,440 --> 00:11:09,600
be nice to the system creating pipelines

00:11:07,360 --> 00:11:12,079
to hundreds of projects at the same time

00:11:09,600 --> 00:11:14,480
can cause troubles

00:11:12,079 --> 00:11:16,800
there are two different ways to avoid

00:11:14,480 --> 00:11:16,800
this

00:11:17,440 --> 00:11:26,800
make the push with the option ci skip

00:11:21,200 --> 00:11:28,880
or add ci skip on the commit messages

00:11:26,800 --> 00:11:30,560
also if you are thinking on do some

00:11:28,880 --> 00:11:34,240
automatization

00:11:30,560 --> 00:11:34,959
use tuko this is a tool we wrote some

00:11:34,240 --> 00:11:37,200
time ago

00:11:34,959 --> 00:11:38,640
to automatically save the configuration

00:11:37,200 --> 00:11:40,720
it needs some log

00:11:38,640 --> 00:11:42,560
but if you are going to write some

00:11:40,720 --> 00:11:44,720
script for this first take a look

00:11:42,560 --> 00:11:44,720
at

00:11:45,839 --> 00:11:49,600
so now we're going to go with a quick

00:11:48,640 --> 00:11:52,240
demo

00:11:49,600 --> 00:11:54,079
the idea is to show how easy is to set

00:11:52,240 --> 00:11:57,440
up the salsa ci pipeline

00:11:54,079 --> 00:12:00,160
on a regular package for that i got

00:11:57,440 --> 00:12:01,120
a random package that had the activity a

00:12:00,160 --> 00:12:04,000
short time ago

00:12:01,120 --> 00:12:04,480
and had no pipeline so the first thing

00:12:04,000 --> 00:12:08,320
to do

00:12:04,480 --> 00:12:11,360
is go to settings ci cd and configure

00:12:08,320 --> 00:12:14,320
the custom ci path for this project

00:12:11,360 --> 00:12:15,120
under general pipelines you have custom

00:12:14,320 --> 00:12:17,040
ci

00:12:15,120 --> 00:12:19,600
configuration path we're going to use

00:12:17,040 --> 00:12:24,320
debian salsa ci the diamo

00:12:19,600 --> 00:12:28,000
you scroll and press save changes

00:12:24,320 --> 00:12:30,480
so now this project has this custom path

00:12:28,000 --> 00:12:31,440
for the ci definition that means that

00:12:30,480 --> 00:12:34,880
any branch

00:12:31,440 --> 00:12:37,680
is going to look for that file to

00:12:34,880 --> 00:12:38,240
get the ci configuration the next thing

00:12:37,680 --> 00:12:41,360
to do

00:12:38,240 --> 00:12:42,240
is to add our configuration to the that

00:12:41,360 --> 00:12:46,720
file

00:12:42,240 --> 00:12:49,839
i'm gonna use the id for everything

00:12:46,720 --> 00:12:53,279
so you can see what

00:12:49,839 --> 00:12:56,240
am i doing which is pretty easy

00:12:53,279 --> 00:12:58,000
so new file i'm gonna use the same

00:12:56,240 --> 00:13:01,279
debian salsa ci the jambo

00:12:58,000 --> 00:13:03,839
and on the content i'm gonna use what's

00:13:01,279 --> 00:13:04,480
on the readme of our project so you can

00:13:03,839 --> 00:13:07,519
check

00:13:04,480 --> 00:13:07,920
basic use this is the basic include that

00:13:07,519 --> 00:13:11,600
was

00:13:07,920 --> 00:13:13,519
mentioned previously on the slides so

00:13:11,600 --> 00:13:15,920
that's all you need to put we are going

00:13:13,519 --> 00:13:17,200
to commit this i'm working on a fork i'm

00:13:15,920 --> 00:13:22,160
just

00:13:17,200 --> 00:13:22,160
commit this to master to show you

00:13:22,560 --> 00:13:26,639
so the file is already repository if we

00:13:25,200 --> 00:13:29,519
go to ci cd

00:13:26,639 --> 00:13:31,279
pipelines we are going to see that we

00:13:29,519 --> 00:13:33,920
have a pipeline for this change

00:13:31,279 --> 00:13:35,200
and that's all if we click here we're

00:13:33,920 --> 00:13:38,480
gonna see that the job

00:13:35,200 --> 00:13:38,959
started to build it's found spawn the

00:13:38,480 --> 00:13:41,360
build

00:13:38,959 --> 00:13:43,199
and build source if you click any of

00:13:41,360 --> 00:13:46,320
those

00:13:43,199 --> 00:13:48,000
you can get that the jobs are starting

00:13:46,320 --> 00:13:51,040
to run

00:13:48,000 --> 00:13:53,199
thanks to this being

00:13:51,040 --> 00:13:54,800
recording i'm gonna fast forward here to

00:13:53,199 --> 00:13:57,440
show you the result in

00:13:54,800 --> 00:13:57,440
a few minutes

00:13:58,959 --> 00:14:02,240
so a few minutes have gone by you can

00:14:01,920 --> 00:14:05,360
see

00:14:02,240 --> 00:14:07,680
the pipeline passed it took 7 minutes

00:14:05,360 --> 00:14:10,800
and 59 seconds

00:14:07,680 --> 00:14:12,399
and all the jobs passed

00:14:10,800 --> 00:14:13,839
we're gonna take a look at the build for

00:14:12,399 --> 00:14:17,279
example

00:14:13,839 --> 00:14:19,600
if you see

00:14:17,279 --> 00:14:20,560
uh you can check all the logs of the

00:14:19,600 --> 00:14:23,839
build

00:14:20,560 --> 00:14:25,519
you can see the artifacts of the build

00:14:23,839 --> 00:14:26,000
for example you can take a look at the

00:14:25,519 --> 00:14:28,560
depth

00:14:26,000 --> 00:14:30,959
generated and all the files generated

00:14:28,560 --> 00:14:34,639
under here

00:14:30,959 --> 00:14:35,360
all the dabs the you have an output log

00:14:34,639 --> 00:14:37,680
which is the

00:14:35,360 --> 00:14:38,720
detail the cut of all the logs on the

00:14:37,680 --> 00:14:41,839
job

00:14:38,720 --> 00:14:44,000
and all the files generated you can also

00:14:41,839 --> 00:14:46,560
see for example in the tests

00:14:44,000 --> 00:14:47,680
for example let's see lindian produces a

00:14:46,560 --> 00:14:50,880
nice

00:14:47,680 --> 00:14:54,000
html output of the results if you go to

00:14:50,880 --> 00:14:58,320
the artifact as well

00:14:54,000 --> 00:15:01,279
you go here

00:14:58,320 --> 00:15:04,480
you can see the linten html of output

00:15:01,279 --> 00:15:04,480
for the job you just run

00:15:05,519 --> 00:15:12,880
so that's it um

00:15:09,360 --> 00:15:15,519
the ideal workflow is you

00:15:12,880 --> 00:15:16,959
propose this change in america request

00:15:15,519 --> 00:15:19,279
the pipeline is gonna run

00:15:16,959 --> 00:15:21,040
even if the project doesn't have a

00:15:19,279 --> 00:15:24,880
previous pipeline and once

00:15:21,040 --> 00:15:28,320
it passed you can add it to your project

00:15:24,880 --> 00:15:32,079
so contributing

00:15:28,320 --> 00:15:34,959
for us uh contributing not only means

00:15:32,079 --> 00:15:36,320
uh committing to the project but also

00:15:34,959 --> 00:15:39,519
using it

00:15:36,320 --> 00:15:41,759
so we use the gitlab issue tracker

00:15:39,519 --> 00:15:43,120
we have uh this tracker on the issue

00:15:41,759 --> 00:15:45,120
tracker on the project

00:15:43,120 --> 00:15:46,880
where you can submit all your problems

00:15:45,120 --> 00:15:49,759
or your proposals

00:15:46,880 --> 00:15:51,040
we accept merge requests we accept use

00:15:49,759 --> 00:15:54,160
new use cases

00:15:51,040 --> 00:15:56,399
we do we try to work on this um

00:15:54,160 --> 00:15:57,920
you will see that the small issues are

00:15:56,399 --> 00:15:59,759
going to get fixed sooner that's

00:15:57,920 --> 00:16:01,680
normal of course but if you want to

00:15:59,759 --> 00:16:04,240
collaborate on the project

00:16:01,680 --> 00:16:05,120
uh you can take a look at all at all the

00:16:04,240 --> 00:16:08,240
open issues

00:16:05,120 --> 00:16:10,320
on the gitlab page

00:16:08,240 --> 00:16:12,000
we are going to have a sprint tomorrow

00:16:10,320 --> 00:16:13,839
so if you feel like joining us

00:16:12,000 --> 00:16:16,399
checking what we are doing we are going

00:16:13,839 --> 00:16:19,920
to be on irc we are at

00:16:16,399 --> 00:16:23,360
salsa ci on the oftc and the

00:16:19,920 --> 00:16:28,079
irc server and

00:16:23,360 --> 00:16:28,079
that's it that's the channel name

00:16:28,240 --> 00:16:34,399
so thank you very much for joining

00:16:31,519 --> 00:16:35,839
for listening and for staying uh again

00:16:34,399 --> 00:16:38,880
i'm

00:16:35,839 --> 00:16:40,000
with me is joaquin and we are on salsa

00:16:38,880 --> 00:16:42,000
ci team

00:16:40,000 --> 00:16:43,360
now if you have any questions we'll try

00:16:42,000 --> 00:16:45,600
to answer

00:16:43,360 --> 00:16:45,600
thanks

00:16:47,360 --> 00:16:56,320
there is a way to stop building db

00:16:51,759 --> 00:16:56,320
gyms only on salsa via configuration

00:16:56,639 --> 00:17:00,399
well we previously replied the other

00:16:59,839 --> 00:17:03,199
questions

00:17:00,399 --> 00:17:04,480
in took place links and stuff so if you

00:17:03,199 --> 00:17:07,439
if you want to go over those

00:17:04,480 --> 00:17:08,000
as well we can uh read them or reply

00:17:07,439 --> 00:17:11,199
them

00:17:08,000 --> 00:17:11,919
here in in the stream um currently well

00:17:11,199 --> 00:17:14,799
that's uh

00:17:11,919 --> 00:17:15,439
two different things on one side the

00:17:14,799 --> 00:17:18,799
artifact

00:17:15,439 --> 00:17:19,839
size is limited by salsa not by dci

00:17:18,799 --> 00:17:23,520
itself it's a

00:17:19,839 --> 00:17:26,400
limitation the imposed on the system

00:17:23,520 --> 00:17:27,679
to take care of i mean to protect the

00:17:26,400 --> 00:17:30,880
infrastructure and

00:17:27,679 --> 00:17:32,960
from abuse so that's uh

00:17:30,880 --> 00:17:34,160
that's not we are not able to increase

00:17:32,960 --> 00:17:36,000
that size

00:17:34,160 --> 00:17:37,840
uh we know there are some packages that

00:17:36,000 --> 00:17:41,280
even without the bug symbols

00:17:37,840 --> 00:17:43,919
and they're the results uh are

00:17:41,280 --> 00:17:45,120
bigger in size than that so that's a

00:17:43,919 --> 00:17:48,320
known issue

00:17:45,120 --> 00:17:51,440
and on the other hand the debug symbol

00:17:48,320 --> 00:17:52,640
question itself as far as i know there's

00:17:51,440 --> 00:17:55,760
a way to disable

00:17:52,640 --> 00:17:58,960
that on debian builder

00:17:55,760 --> 00:18:02,240
systems it's

00:17:58,960 --> 00:18:03,200
oh there's a way to add the flag that is

00:18:02,240 --> 00:18:06,400
uh

00:18:03,200 --> 00:18:10,000
in that build options you can say no

00:18:06,400 --> 00:18:11,120
ddbs um and that if you define that on

00:18:10,000 --> 00:18:14,480
the variables on the job

00:18:11,120 --> 00:18:17,679
that will get to the builder so our

00:18:14,480 --> 00:18:19,760
scripts um pass all the dev

00:18:17,679 --> 00:18:22,080
variables to the build environment so

00:18:19,760 --> 00:18:25,120
it's possible to set up things as

00:18:22,080 --> 00:18:26,480
as configuration on the builds so the

00:18:25,120 --> 00:18:30,640
short question would be yes it's

00:18:26,480 --> 00:18:30,640
possible to disable the bug symbols

00:18:34,880 --> 00:18:41,440
okay so i will read

00:18:38,400 --> 00:18:43,440
even the answer once so why

00:18:41,440 --> 00:18:44,640
how does reprotest differ from

00:18:43,440 --> 00:18:47,840
replacement bills

00:18:44,640 --> 00:18:50,080
sometimes triple test fails while

00:18:47,840 --> 00:18:53,440
reproducible builds is happy

00:18:50,080 --> 00:18:56,320
yes the the short answer is because

00:18:53,440 --> 00:18:56,799
the representative team is not using a

00:18:56,320 --> 00:18:59,840
rep

00:18:56,799 --> 00:19:03,679
repo test for testing so

00:18:59,840 --> 00:19:03,679
it is going to differ

00:19:05,600 --> 00:19:09,360
we we discussed about this with the

00:19:08,160 --> 00:19:11,360
reproducible

00:19:09,360 --> 00:19:13,039
builds team and they are using a

00:19:11,360 --> 00:19:14,880
different tool for this

00:19:13,039 --> 00:19:16,559
they they developed we are using rapid

00:19:14,880 --> 00:19:19,039
tests because they developed this

00:19:16,559 --> 00:19:20,720
this tool it works pretty well but in

00:19:19,039 --> 00:19:23,039
some some cases

00:19:20,720 --> 00:19:24,640
the results differ from what they are

00:19:23,039 --> 00:19:27,760
doing there isn't some scripts to

00:19:24,640 --> 00:19:30,880
customize the environment instead

00:19:27,760 --> 00:19:33,200
so yeah it's that's known that it's

00:19:30,880 --> 00:19:34,559
not exactly the same tests that it's

00:19:33,200 --> 00:19:37,679
running on

00:19:34,559 --> 00:19:37,679
on reproducible builds

00:19:37,840 --> 00:19:46,080
okay um let's go with another one

00:19:42,720 --> 00:19:52,240
does the ci support bills other than

00:19:46,080 --> 00:19:56,480
x86 jet

00:19:52,240 --> 00:20:00,160
um yes and no we've been making

00:19:56,480 --> 00:20:03,520
some tests we were able to set up an

00:20:00,160 --> 00:20:05,440
arm 64 runner which we

00:20:03,520 --> 00:20:07,039
built the images for and we run the

00:20:05,440 --> 00:20:09,679
building for

00:20:07,039 --> 00:20:11,280
the idea was to have a different point

00:20:09,679 --> 00:20:14,720
included on the tests

00:20:11,280 --> 00:20:17,000
the arm build but the problem is that

00:20:14,720 --> 00:20:20,720
shared runners are only x

00:20:17,000 --> 00:20:23,679
66 architecture so

00:20:20,720 --> 00:20:24,240
that would mean to other each one should

00:20:23,679 --> 00:20:25,919
add

00:20:24,240 --> 00:20:27,280
manually the runner to the project

00:20:25,919 --> 00:20:31,520
there's no way to set up

00:20:27,280 --> 00:20:33,600
non-official runners shared for everyone

00:20:31,520 --> 00:20:34,640
so basically that basically that's the

00:20:33,600 --> 00:20:38,559
problem if we

00:20:34,640 --> 00:20:40,159
could set shared runners for everyone

00:20:38,559 --> 00:20:40,880
and available for early for everyone to

00:20:40,159 --> 00:20:44,320
use

00:20:40,880 --> 00:20:48,000
on irm 64. that would be nice to have

00:20:44,320 --> 00:20:51,200
and we could build and test on

00:20:48,000 --> 00:20:51,200
those architectures as well

00:20:52,080 --> 00:20:55,679
good

00:20:53,420 --> 00:20:58,000
[Music]

00:20:55,679 --> 00:20:59,039
how do you change to a black theme in

00:20:58,000 --> 00:21:02,159
the salsa ci

00:20:59,039 --> 00:21:04,720
interface yeah that was the first

00:21:02,159 --> 00:21:06,400
reply there it's a firefox extension

00:21:04,720 --> 00:21:09,600
called stylus and there are some

00:21:06,400 --> 00:21:12,559
css um customized for

00:21:09,600 --> 00:21:13,440
different pages and it detects your

00:21:12,559 --> 00:21:16,400
domain name

00:21:13,440 --> 00:21:17,760
and it changes the style injects css for

00:21:16,400 --> 00:21:19,039
that

00:21:17,760 --> 00:21:21,360
there's a link there on the author

00:21:19,039 --> 00:21:21,360
button

00:21:24,640 --> 00:21:27,760
ok we have another one the mobian

00:21:26,799 --> 00:21:31,840
project needs

00:21:27,760 --> 00:21:34,480
arm 64 runners i have been giving

00:21:31,840 --> 00:21:36,640
some arm 64 servers and start adding

00:21:34,480 --> 00:21:38,720
them as team only runners

00:21:36,640 --> 00:21:44,960
is there a path to have them officially

00:21:38,720 --> 00:21:46,880
support by salsa ci team

00:21:44,960 --> 00:21:48,559
well that's more than a question for

00:21:46,880 --> 00:21:52,640
salsa admins we are just

00:21:48,559 --> 00:21:56,240
um it's also cia team we don't we have a

00:21:52,640 --> 00:21:59,760
no we don't control anything on salsa

00:21:56,240 --> 00:22:01,760
instance so should be

00:21:59,760 --> 00:22:03,360
i mean it's technically possible but

00:22:01,760 --> 00:22:05,600
it's uh something that we have to

00:22:03,360 --> 00:22:08,240
discuss with uh salsa admins

00:22:05,600 --> 00:22:09,760
that will be again the bible the

00:22:08,240 --> 00:22:13,679
pipeline has been

00:22:09,760 --> 00:22:17,440
tested on unarmed so it's possible

00:22:13,679 --> 00:22:18,080
from the cia side but we need the

00:22:17,440 --> 00:22:21,760
runners

00:22:18,080 --> 00:22:21,760
insults to to do it

00:22:25,600 --> 00:22:28,559
okay um

00:22:28,640 --> 00:22:33,120
there is another one having the

00:22:30,159 --> 00:22:34,960
artifacts on the dvl output

00:22:33,120 --> 00:22:38,240
seems to require more clicks than

00:22:34,960 --> 00:22:41,919
necessary can it be removed

00:22:38,240 --> 00:22:45,679
yes i imagine it is it can be done

00:22:41,919 --> 00:22:48,559
uh please add an issue um

00:22:45,679 --> 00:22:49,600
with this concern and we can check on

00:22:48,559 --> 00:22:52,000
that

00:22:49,600 --> 00:22:53,360
yeah the only thing is that we cannot

00:22:52,000 --> 00:22:55,919
leave stuff on the root

00:22:53,360 --> 00:22:56,400
directory of the package because uh on

00:22:55,919 --> 00:22:59,760
this

00:22:56,400 --> 00:23:02,240
next stage on tests for example if

00:22:59,760 --> 00:23:03,760
the build i mean if the package differs

00:23:02,240 --> 00:23:05,679
from the target set

00:23:03,760 --> 00:23:08,000
it's gonna generate problems so that's

00:23:05,679 --> 00:23:10,000
why it's inside of debian folder

00:23:08,000 --> 00:23:11,919
and we created a new folder which is

00:23:10,000 --> 00:23:12,559
output because it sometimes we have

00:23:11,919 --> 00:23:14,320
several

00:23:12,559 --> 00:23:17,440
different artifacts just to group them

00:23:14,320 --> 00:23:20,840
on a single place it's the folder but

00:23:17,440 --> 00:23:23,840
yeah it's a valid concern we can work on

00:23:20,840 --> 00:23:23,840
that

00:23:25,120 --> 00:23:28,320
okay um

00:23:28,480 --> 00:23:34,240
are there plans to run ci on platforms

00:23:31,520 --> 00:23:36,080
different from docker i have a prototype

00:23:34,240 --> 00:23:39,280
of a systemd

00:23:36,080 --> 00:23:39,280
n spawn runner

00:23:40,400 --> 00:23:46,720
um yeah we well again

00:23:44,159 --> 00:23:48,000
it's the same reply as with the arm

00:23:46,720 --> 00:23:50,480
questions

00:23:48,000 --> 00:23:52,480
we depend on the shared infrastructure

00:23:50,480 --> 00:23:55,600
all shared runners

00:23:52,480 --> 00:23:56,799
run on a docker machine which means that

00:23:55,600 --> 00:23:59,279
it spawns a vm

00:23:56,799 --> 00:24:01,360
on a cloud provider installs docker in

00:23:59,279 --> 00:24:04,320
there and runs the job inside of docker

00:24:01,360 --> 00:24:06,159
instead of a vm so

00:24:04,320 --> 00:24:08,000
it depends on on the runners if we the

00:24:06,159 --> 00:24:08,559
gitlab supports other kind of runners

00:24:08,000 --> 00:24:12,159
like

00:24:08,559 --> 00:24:14,960
bear shell or ssh i don't know if ssh is

00:24:12,159 --> 00:24:17,039
still supported but you should have it

00:24:14,960 --> 00:24:19,919
you could set up

00:24:17,039 --> 00:24:20,640
just running on local on a vm that's

00:24:19,919 --> 00:24:24,159
possible

00:24:20,640 --> 00:24:25,760
but again it's not controlled by us but

00:24:24,159 --> 00:24:27,600
we have currently it's docker machine

00:24:25,760 --> 00:24:30,159
and we are using that for to build

00:24:27,600 --> 00:24:31,039
but everything all these jobs run on the

00:24:30,159 --> 00:24:33,840
same

00:24:31,039 --> 00:24:33,840
virtualization

00:24:36,240 --> 00:24:41,600
good here is another one i am adding

00:24:39,679 --> 00:24:44,799
debian salsa ci jammer

00:24:41,600 --> 00:24:47,360
automatically to deviant packages how

00:24:44,799 --> 00:24:50,000
can i ensure that the proper settings

00:24:47,360 --> 00:24:51,360
to process also ci will process this

00:24:50,000 --> 00:24:54,960
live

00:24:51,360 --> 00:24:55,679
now pardon this file if i understood

00:24:54,960 --> 00:24:59,039
correctly

00:24:55,679 --> 00:25:02,320
i need to set this in the repository

00:24:59,039 --> 00:25:06,880
is there any easy way to sit this for

00:25:02,320 --> 00:25:06,880
all packages of the team automatically

00:25:08,960 --> 00:25:15,039
yes there is a tool

00:25:12,000 --> 00:25:15,760
we made last that conf that is called

00:25:15,039 --> 00:25:19,120
tuko

00:25:15,760 --> 00:25:22,159
you can use it to do some scripting

00:25:19,120 --> 00:25:23,279
uh but please stay take care as we said

00:25:22,159 --> 00:25:25,679
in the

00:25:23,279 --> 00:25:28,799
in the slides take care of the system

00:25:25,679 --> 00:25:33,360
the adding the option to

00:25:28,799 --> 00:25:36,559
to not run the pipeline for that commit

00:25:33,360 --> 00:25:38,240
but uh well as uh i said to go it's uh

00:25:36,559 --> 00:25:40,400
the main issue with that would be that

00:25:38,240 --> 00:25:43,039
to go it's currently

00:25:40,400 --> 00:25:45,120
running on one project at a time it's

00:25:43,039 --> 00:25:47,360
not it doesn't have the feature to

00:25:45,120 --> 00:25:49,039
run on a group for example which is a

00:25:47,360 --> 00:25:50,559
nice feature that we wanted to introduce

00:25:49,039 --> 00:25:51,120
before but we couldn't we didn't have

00:25:50,559 --> 00:25:54,080
time

00:25:51,120 --> 00:25:54,400
so if anyone's gonna script anything to

00:25:54,080 --> 00:25:56,320
add

00:25:54,400 --> 00:25:57,840
more than one package it would be nice

00:25:56,320 --> 00:26:01,919
to take a look at the tool and

00:25:57,840 --> 00:26:04,559
maybe send a merch request for that so

00:26:01,919 --> 00:26:05,200
you can you can make a bash script using

00:26:04,559 --> 00:26:11,840
the

00:26:05,200 --> 00:26:11,840
tool for all your projects

00:26:15,919 --> 00:26:25,840
okay so let's see if there are some

00:26:18,880 --> 00:26:25,840
questions in irc

00:26:33,200 --> 00:26:36,799
okay so currently these are all the

00:26:36,080 --> 00:26:39,840
questions

00:26:36,799 --> 00:26:43,360
would you like to add something else

00:26:39,840 --> 00:26:43,360
in yaki and joaquin

00:26:46,080 --> 00:26:52,159
no i think we are we are good if there

00:26:49,360 --> 00:26:55,200
is not more questions

00:26:52,159 --> 00:26:59,120
just to close um well remind

00:26:55,200 --> 00:27:03,440
we are in salsa ci on oftc and irc

00:26:59,120 --> 00:27:06,799
salsa ci without the dash

00:27:03,440 --> 00:27:08,960
we track our issues on the each

00:27:06,799 --> 00:27:10,720
gitlab issue tracker so if you have any

00:27:08,960 --> 00:27:11,919
concern we don't have a main list or

00:27:10,720 --> 00:27:14,080
whatsoever so

00:27:11,919 --> 00:27:16,080
we do most of our communications over

00:27:14,080 --> 00:27:18,480
there so if you have any doubt or

00:27:16,080 --> 00:27:20,720
question or feature proposal feel free

00:27:18,480 --> 00:27:24,159
to open an issue in there we'll try to

00:27:20,720 --> 00:27:27,200
to reply and um

00:27:24,159 --> 00:27:27,760
that's it thanks all for using salsa and

00:27:27,200 --> 00:27:30,080
we hope

00:27:27,760 --> 00:27:31,919
we get even more traction now and more

00:27:30,080 --> 00:27:34,880
users

00:27:31,919 --> 00:27:37,520
okay we have another question is there a

00:27:34,880 --> 00:27:39,760
way to publish a single package archive

00:27:37,520 --> 00:27:42,320
with packages from multiple gitlab

00:27:39,760 --> 00:27:42,320
projects

00:27:43,360 --> 00:27:51,440
um no i mean not with salsa ci and it's

00:27:47,520 --> 00:27:53,520
not recommended salsa admins are have

00:27:51,440 --> 00:27:55,279
stated on several locations that they

00:27:53,520 --> 00:27:56,159
don't want salsa to be used as a

00:27:55,279 --> 00:27:59,600
repository

00:27:56,159 --> 00:28:01,039
for production things and so we are

00:27:59,600 --> 00:28:04,960
respecting that

00:28:01,039 --> 00:28:08,000
we only provide an aptly job which does

00:28:04,960 --> 00:28:10,000
this publishing of that single

00:28:08,000 --> 00:28:11,760
project and all the depths generated on

00:28:10,000 --> 00:28:13,520
the project but it's only for

00:28:11,760 --> 00:28:15,520
testing purposes if you have more than

00:28:13,520 --> 00:28:17,120
one project that depends

00:28:15,520 --> 00:28:19,039
on the other and you don't want to wait

00:28:17,120 --> 00:28:22,640
until released

00:28:19,039 --> 00:28:25,120
that that job is for that but

00:28:22,640 --> 00:28:27,520
officially we should we you shouldn't

00:28:25,120 --> 00:28:29,360
use salsa as a repository for

00:28:27,520 --> 00:28:31,840
an apt-active repository for your

00:28:29,360 --> 00:28:31,840
package

00:28:32,880 --> 00:28:38,880
okay and also we have a

00:28:36,960 --> 00:28:44,640
comment thanks a lot for all your work

00:28:38,880 --> 00:28:45,120
from andrea stiller thanks to everyone

00:28:44,640 --> 00:28:47,820
for

00:28:45,120 --> 00:28:50,869
coming and the questions

00:28:47,820 --> 00:28:50,869
[Music]

00:28:51,440 --> 00:29:03,679
so let me see if we have more questions

00:28:59,840 --> 00:29:06,880
okay so that is all thanks a lot

00:29:03,679 --> 00:29:10,640
uh in yaki and joaquin it was

00:29:06,880 --> 00:29:22,240
a nice talk thanks enjoy.com

00:29:10,640 --> 00:29:22,240

YouTube URL: https://www.youtube.com/watch?v=r3QGINyBZG0


