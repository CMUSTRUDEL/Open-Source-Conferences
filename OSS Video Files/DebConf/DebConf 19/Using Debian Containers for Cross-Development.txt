Title: Using Debian Containers for Cross-Development
Publication date: 2019-08-05
Playlist: DebConf 19
Description: 
	by Matheus Castello

At: DebConf19
https://debconf19.debconf.org/talks/139-using-debian-containers-for-cross-development/

Containers are getting a more and more popular way to distribute and run applications on servers, and its use is beginning to gain ground among embedded systems. In this talk we will discuss, in practice with development boards, the challenges of cross-development for embedded systems and how Debian containers can be a powerful option to help.

Room: MiniauditÃ³rio
Scheduled start: 2019-07-21 17:00:00
Captions: 
	00:00:04,920 --> 00:00:12,190
all right I lost and possibly the bass

00:00:08,140 --> 00:00:15,129
talk for today in this venue is Matthias

00:00:12,190 --> 00:00:17,080
Costello from toradex I'm talking about

00:00:15,129 --> 00:00:19,050
using Debian containers for cross

00:00:17,080 --> 00:00:23,289
development with some real live action

00:00:19,050 --> 00:00:28,300
we look forward thank you thank you for

00:00:23,289 --> 00:00:30,160
attending we will talk about using the

00:00:28,300 --> 00:00:33,910
other containers for across the veldt I

00:00:30,160 --> 00:00:37,300
will talk about some challenges we have

00:00:33,910 --> 00:00:40,390
to cross compile a native code for

00:00:37,300 --> 00:00:42,969
embedded systems right

00:00:40,390 --> 00:00:45,100
I am shows some solutions that are

00:00:42,969 --> 00:00:50,649
already have to solve this challenge

00:00:45,100 --> 00:00:54,420
okay and you see Devon containers at the

00:00:50,649 --> 00:00:58,840
end for solve this challenge - right

00:00:54,420 --> 00:01:03,609
so I am mattis Costello I have 28 years

00:00:58,840 --> 00:01:06,700
old not in appearance right but but I

00:01:03,609 --> 00:01:11,140
have documents to prove it if you have

00:01:06,700 --> 00:01:14,020
to if you can't see and I am better soft

00:01:11,140 --> 00:01:16,450
engineer Android X here in Brazil work

00:01:14,020 --> 00:01:20,890
with a marketing team technical

00:01:16,450 --> 00:01:24,850
marketing here in Brazil and my in my

00:01:20,890 --> 00:01:27,670
spare time when I'm not working within

00:01:24,850 --> 00:01:31,030
that assistance I'm working within bad

00:01:27,670 --> 00:01:34,420
assistantship with contributing with

00:01:31,030 --> 00:01:38,920
open source projects and make these our

00:01:34,420 --> 00:01:43,229
lectures right so this is who I am and I

00:01:38,920 --> 00:01:51,520
have to know about you - who here our

00:01:43,229 --> 00:01:54,820
desktop developers right systems

00:01:51,520 --> 00:01:59,280
developers oh I have a good number it's

00:01:54,820 --> 00:02:02,469
a good I can go fast some points ok so

00:01:59,280 --> 00:02:06,850
go forward and we talk about development

00:02:02,469 --> 00:02:09,190
challenge for embedded device so let's

00:02:06,850 --> 00:02:16,629
get started with example and the hello

00:02:09,190 --> 00:02:19,930
world example right I have hot simple

00:02:16,629 --> 00:02:24,969
very simple hell over the sample here

00:02:19,930 --> 00:02:28,269
let's get it's the simple print with

00:02:24,969 --> 00:02:32,079
hello right so in your development

00:02:28,269 --> 00:02:38,859
machine we can easily compile this

00:02:32,079 --> 00:02:42,549
hello dot C right and run right no

00:02:38,859 --> 00:02:47,499
problem here I have to on development

00:02:42,549 --> 00:02:56,219
board right that's running and is based

00:02:47,499 --> 00:02:56,219
in arm the else is a bit let's get

00:02:59,699 --> 00:03:02,699
changed

00:03:07,470 --> 00:03:10,460
okay

00:03:12,520 --> 00:03:18,880
so we have a development board here

00:03:15,220 --> 00:03:24,310
ruling arm v7 processor right

00:03:18,880 --> 00:03:29,490
it's or the embedded device so if I get

00:03:24,310 --> 00:03:29,490
that program here and copy this

00:03:53,959 --> 00:03:56,799
right

00:03:57,480 --> 00:04:04,799
and try to run this a large company this

00:04:01,260 --> 00:04:07,290
is not run because I'm compile T's for

00:04:04,799 --> 00:04:11,819
my architecture for my notebook right

00:04:07,290 --> 00:04:13,409
is as if we check the file type from my

00:04:11,819 --> 00:04:19,500
hello binary

00:04:13,409 --> 00:04:24,240
he is a psycho table from x86

00:04:19,500 --> 00:04:29,070
architecture right so this is one

00:04:24,240 --> 00:04:31,830
challenge we have for develop cross

00:04:29,070 --> 00:04:34,800
develop for embedded device generally we

00:04:31,830 --> 00:04:38,190
have a computer that have a different

00:04:34,800 --> 00:04:41,400
architecture the architect phone or

00:04:38,190 --> 00:04:45,090
embedded the device so we need some

00:04:41,400 --> 00:04:47,220
problems some compiler that runs in war

00:04:45,090 --> 00:04:50,130
our chapter on war development

00:04:47,220 --> 00:04:53,669
architecture and you generate a binary

00:04:50,130 --> 00:04:58,919
code with instructions that we run in or

00:04:53,669 --> 00:05:02,310
target device right so how we can solve

00:04:58,919 --> 00:05:04,680
this we have to be no choose package

00:05:02,310 --> 00:05:07,740
right the peanut respect you have out to

00:05:04,680 --> 00:05:12,389
chain tick a new compiler in linkers and

00:05:07,740 --> 00:05:15,210
if we install the be no chose only to be

00:05:12,389 --> 00:05:17,970
neutrals with all these others names

00:05:15,210 --> 00:05:20,250
they install the compilers and

00:05:17,970 --> 00:05:24,479
linkers for their catcher from my host

00:05:20,250 --> 00:05:27,900
but we can stop be no chose for others

00:05:24,479 --> 00:05:30,750
architectures to here we are used in you

00:05:27,900 --> 00:05:35,090
choose armed Linux it will be harder

00:05:30,750 --> 00:05:40,700
floating it's a writing installed here

00:05:35,090 --> 00:05:40,700
so I can cross compile this

00:05:46,279 --> 00:05:54,469
right and we feel check this now we have

00:05:50,419 --> 00:06:08,959
a binary with the ARM architecture right

00:05:54,469 --> 00:06:12,889
and with lucky we can run

00:06:08,959 --> 00:06:14,659
now multiprocessor knows who the type of

00:06:12,889 --> 00:06:19,309
instructions that we have in this binary

00:06:14,659 --> 00:06:20,029
and tickity processor can run this by

00:06:19,309 --> 00:06:23,599
now right

00:06:20,029 --> 00:06:27,409
we have to hello that conf running or

00:06:23,599 --> 00:06:30,739
embedded device so province of it we

00:06:27,409 --> 00:06:33,669
have some guys some compiler that cross

00:06:30,739 --> 00:06:37,239
compiled code for me and generates arm

00:06:33,669 --> 00:06:40,729
v7 codes that roams in my target device

00:06:37,239 --> 00:06:44,809
but a hellward is a very simple program

00:06:40,729 --> 00:06:51,159
right let's try an example that use a

00:06:44,809 --> 00:06:51,159
library and here we have the hello blink

00:06:53,799 --> 00:07:00,769
hello blink the hello blink used Lib

00:06:56,329 --> 00:07:04,009
GPIO T Liberty so we have some

00:07:00,769 --> 00:07:09,909
instructions and some functions that

00:07:04,009 --> 00:07:13,879
request GPIO banks GPIO pins and

00:07:09,909 --> 00:07:17,119
requests before all to put and I hear

00:07:13,879 --> 00:07:22,459
the doing a while that is changing the

00:07:17,119 --> 00:07:29,269
logic value of my GPIO adds between one

00:07:22,459 --> 00:07:31,879
on one second right okay let's try

00:07:29,269 --> 00:07:39,039
compile this now we have on cross

00:07:31,879 --> 00:07:39,039
compile let's let's generate the blink

00:07:40,629 --> 00:07:51,199
and the OT compiler that will link with

00:07:46,699 --> 00:07:56,199
the GPIO T oh we don't have to delve or

00:07:51,199 --> 00:07:56,199
package for this guy okay let's stop it

00:07:57,889 --> 00:08:11,990
eld deaf okay stalling stole it

00:08:05,569 --> 00:08:15,590
let's not find a while when I installed

00:08:11,990 --> 00:08:18,919
this package to leave you there we are

00:08:15,590 --> 00:08:21,830
stalling again on package that is rooms

00:08:18,919 --> 00:08:27,949
nor development architecture so I'm

00:08:21,830 --> 00:08:32,630
style Lib GPIO D for x86 architecture

00:08:27,949 --> 00:08:33,740
I need the arm charge the object for

00:08:32,630 --> 00:08:37,729
this guy

00:08:33,740 --> 00:08:43,640
Ford cross-compile compiling link with

00:08:37,729 --> 00:08:46,430
this charity object so we have this guy

00:08:43,640 --> 00:08:50,420
the Debian package add architecture for

00:08:46,430 --> 00:08:54,019
our target architecture so I am now

00:08:50,420 --> 00:08:58,300
ready I'm already done this in my

00:08:54,019 --> 00:09:03,949
computer and we can install now libres

00:08:58,300 --> 00:09:07,930
with this parameter and we will install

00:09:03,949 --> 00:09:17,050
the Libby Pio d40 architectural for

00:09:07,930 --> 00:09:17,050
target device right so install Bo

00:09:27,920 --> 00:09:35,540
okay now it's alright we can compile

00:09:33,739 --> 00:09:40,549
cross compile and Link with the shared

00:09:35,540 --> 00:09:47,540
object forearm and with lucky this will

00:09:40,549 --> 00:09:48,889
run in or embed device let's let's copy

00:09:47,540 --> 00:09:58,239
this guy

00:09:48,889 --> 00:09:58,239
oh why I lost the connection

00:10:04,050 --> 00:10:16,839
okay so let's run this guy here oh right

00:10:14,350 --> 00:10:21,730
we stole it TT delivery and charity

00:10:16,839 --> 00:10:28,199
object in my computer right how we can

00:10:21,730 --> 00:10:33,910
solve this well I can copy the user lead

00:10:28,199 --> 00:10:36,910
arm here here we have to share it

00:10:33,910 --> 00:10:39,610
objects for the GPIO D we can copy these

00:10:36,910 --> 00:10:44,740
guys from my target device but this is

00:10:39,610 --> 00:10:47,519
not a smart way to do it okay so we have

00:10:44,740 --> 00:10:50,230
other solutions more smart to do it

00:10:47,519 --> 00:10:52,209
think about on on the project that we

00:10:50,230 --> 00:10:57,370
have a lot of dependence is a lot of

00:10:52,209 --> 00:10:59,920
carat objects this will end in a

00:10:57,370 --> 00:11:02,709
dependence health right and you have to

00:10:59,920 --> 00:11:05,319
make it some script to cope it is from

00:11:02,709 --> 00:11:09,459
to a host frontier or target device and

00:11:05,319 --> 00:11:11,889
it is not a smart way to do it so we

00:11:09,459 --> 00:11:15,720
have author solutions for do that one of

00:11:11,889 --> 00:11:20,769
this is the Yocto project octo a beaut

00:11:15,720 --> 00:11:23,170
your own linux distro and we have some

00:11:20,769 --> 00:11:25,569
layers that good Lutheran colonel the

00:11:23,170 --> 00:11:27,670
board sports packages these layers are

00:11:25,569 --> 00:11:29,649
provided by the vendor of the your

00:11:27,670 --> 00:11:33,389
hardware you don't have to care about

00:11:29,649 --> 00:11:37,750
this but the user space is only its own

00:11:33,389 --> 00:11:41,889
layer that we have to work with the the

00:11:37,750 --> 00:11:44,589
packages we need deliveries and

00:11:41,889 --> 00:11:47,920
everything we need to run or application

00:11:44,589 --> 00:11:50,920
the octo is based in resides we have to

00:11:47,920 --> 00:11:53,589
write this resides to configure out

00:11:50,920 --> 00:11:58,870
needs you need you will know you need

00:11:53,589 --> 00:12:01,600
for your application right and the pro

00:11:58,870 --> 00:12:06,160
is you have a distro optimize it for

00:12:01,600 --> 00:12:10,149
your hardware but the weak point is at a

00:12:06,160 --> 00:12:15,100
learning curve you have a high learning

00:12:10,149 --> 00:12:19,690
curve to make these configurations this

00:12:15,100 --> 00:12:22,720
types with the Yocto project right order

00:12:19,690 --> 00:12:25,750
solution is the change route solution

00:12:22,720 --> 00:12:29,380
solution that you can create compiled

00:12:25,750 --> 00:12:32,470
copy and configure sis route using T

00:12:29,380 --> 00:12:36,090
changes right you can use a radio ARM

00:12:32,470 --> 00:12:43,630
architecture this will a space right I

00:12:36,090 --> 00:12:50,560
have one here I have an urban base and

00:12:43,630 --> 00:12:54,640
that I am Becky so here I have two huge

00:12:50,560 --> 00:13:00,280
file assistant from a Debian based image

00:12:54,640 --> 00:13:03,880
right that that image is from our ms-64

00:13:00,280 --> 00:13:11,920
architecture our v8 architecture so I

00:13:03,880 --> 00:13:16,120
can run this the route here passing this

00:13:11,920 --> 00:13:19,360
root file system and we have a dist true

00:13:16,120 --> 00:13:26,740
running for order architecture here if

00:13:19,360 --> 00:13:31,330
we were in work whoa possible because t

00:13:26,740 --> 00:13:35,680
chemo right we have to chemo org

00:13:31,330 --> 00:13:39,070
64 for arm steady running inside this

00:13:35,680 --> 00:13:41,410
change with so the chemo is translating

00:13:39,070 --> 00:13:48,850
out instructions from the arm

00:13:41,410 --> 00:13:54,010
architectural form or six 686 x86

00:13:48,850 --> 00:13:57,960
architect so here in this hood file

00:13:54,010 --> 00:14:01,000
system we can run out or they have been

00:13:57,960 --> 00:14:07,860
comments like app updates are installed

00:14:01,000 --> 00:14:11,800
and everything that is not working

00:14:07,860 --> 00:14:18,540
I'm not goodbye and make these symbolic

00:14:11,800 --> 00:14:19,710
links for my local cone but no problem

00:14:18,540 --> 00:14:21,870
so

00:14:19,710 --> 00:14:24,750
we change which we can configure

00:14:21,870 --> 00:14:27,839
configured all that things install the

00:14:24,750 --> 00:14:31,710
compilers install deliveries that will

00:14:27,839 --> 00:14:36,060
install it for the ARM architecture so

00:14:31,710 --> 00:14:38,850
we can use the GCC since root argument

00:14:36,060 --> 00:14:40,730
and pass this folder for a GCC to

00:14:38,850 --> 00:14:44,250
compile and cross compile or

00:14:40,730 --> 00:14:50,399
applications using the root file system

00:14:44,250 --> 00:14:53,490
that we configure in one weak point is

00:14:50,399 --> 00:14:56,899
it is not so easy deploy in document and

00:14:53,490 --> 00:15:00,839
duplicate this we have to write your own

00:14:56,899 --> 00:15:04,529
resides or or one scripts to make this

00:15:00,839 --> 00:15:08,970
sort of deploy document duplicate the

00:15:04,529 --> 00:15:12,750
guys will make work with raspberry pi

00:15:08,970 --> 00:15:16,350
use this a lot cuz is very easy we have

00:15:12,750 --> 00:15:19,050
outer system running in an SD card so we

00:15:16,350 --> 00:15:22,320
can get the SD card put in your computer

00:15:19,050 --> 00:15:26,220
and change route to a root filesystem of

00:15:22,320 --> 00:15:32,100
the SD card so is a easy way to do it

00:15:26,220 --> 00:15:34,980
right and the other solution is using

00:15:32,100 --> 00:15:37,800
docker for packages elite independence

00:15:34,980 --> 00:15:40,500
of all the dependences of your software

00:15:37,800 --> 00:15:43,830
of your application this is the pro

00:15:40,500 --> 00:15:46,320
point of the Dockers containers is easy

00:15:43,830 --> 00:15:49,110
to deploy document and duplicate think

00:15:46,320 --> 00:15:51,690
dude think it we don't have with the

00:15:49,110 --> 00:15:54,870
change route right it's a standard way

00:15:51,690 --> 00:15:58,440
to do these things with the docker

00:15:54,870 --> 00:16:04,110
containers right so what is a container

00:15:58,440 --> 00:16:08,250
now we have a ship that is at the kernel

00:16:04,110 --> 00:16:11,579
right all these packages all these

00:16:08,250 --> 00:16:14,430
containers are software packages is

00:16:11,579 --> 00:16:19,589
related from each order but we have a

00:16:14,430 --> 00:16:22,829
shared care right this is the definition

00:16:19,589 --> 00:16:25,320
from docker website a package of

00:16:22,829 --> 00:16:28,290
software into a standard way units for

00:16:25,320 --> 00:16:32,880
development shipment and deployment

00:16:28,290 --> 00:16:33,510
right this this is what image the docker

00:16:32,880 --> 00:16:35,610
webs

00:16:33,510 --> 00:16:38,910
we have today Linux and windows

00:16:35,610 --> 00:16:42,120
containers that can be deployed in other

00:16:38,910 --> 00:16:46,670
centers and cloud but this is changed

00:16:42,120 --> 00:16:46,670
today and marketed we are saying

00:16:46,730 --> 00:16:52,980
developers making this container is

00:16:49,950 --> 00:16:59,850
deploying these containers up edge with

00:16:52,980 --> 00:17:03,930
in embedded devices right here are a bit

00:16:59,850 --> 00:17:06,650
of the differences between a container

00:17:03,930 --> 00:17:11,250
application in a virtual machine right

00:17:06,650 --> 00:17:14,310
in a container we have all the user

00:17:11,250 --> 00:17:17,459
space right is easily eight hour each

00:17:14,310 --> 00:17:20,490
process each packaging is isolated from

00:17:17,459 --> 00:17:25,680
each other we can run the Debian 8 that

00:17:20,490 --> 00:17:30,840
in nine eleven ten in each container of

00:17:25,680 --> 00:17:35,160
of this and they share the kernel right

00:17:30,840 --> 00:17:40,230
in our virtual machine for do this we

00:17:35,160 --> 00:17:43,170
have to virtualize out the sink to user

00:17:40,230 --> 00:17:46,650
space and kernel space and out the the

00:17:43,170 --> 00:17:50,040
infrastructure okay so you

00:17:46,650 --> 00:17:54,620
we can run a dev and Tina Devon eggs and

00:17:50,040 --> 00:18:00,020
a Debian nine but all is virtualized

00:17:54,620 --> 00:18:05,990
and the kernel to is virtualized right

00:18:00,020 --> 00:18:10,800
so the container is allies way to do a

00:18:05,990 --> 00:18:17,130
virtualization not realize it but I can

00:18:10,800 --> 00:18:21,540
say this because we are running in user

00:18:17,130 --> 00:18:22,680
space is a process process that you are

00:18:21,540 --> 00:18:24,690
running in cgroups

00:18:22,680 --> 00:18:27,530
right and the is relates from which

00:18:24,690 --> 00:18:31,920
water but we are using to the same care

00:18:27,530 --> 00:18:35,760
and we have to take care about it if we

00:18:31,920 --> 00:18:38,730
are accessing for example to hardware

00:18:35,760 --> 00:18:41,850
from from one container this is not

00:18:38,730 --> 00:18:43,830
easily at for the waters okay so we can

00:18:41,850 --> 00:18:46,620
crash the kernel if T you crash the

00:18:43,830 --> 00:18:52,499
camera you will crash how the orders

00:18:46,620 --> 00:18:55,289
containers - right and here only for our

00:18:52,499 --> 00:18:59,220
curiosity is the way the Microsoft to

00:18:55,289 --> 00:19:02,789
run Linux containers the windows don't

00:18:59,220 --> 00:19:06,360
have kernel Linux yet they are launching

00:19:02,789 --> 00:19:10,529
a new version with something to solve

00:19:06,360 --> 00:19:12,419
this but what we have they have to

00:19:10,529 --> 00:19:15,809
utilize a Linux kernel and out

00:19:12,419 --> 00:19:18,570
containers room inside these a Linux

00:19:15,809 --> 00:19:21,259
kind of virtualize it this is the smart

00:19:18,570 --> 00:19:27,049
way to do it but it's a waterway that

00:19:21,259 --> 00:19:30,419
they virtualized auditing not only to

00:19:27,049 --> 00:19:33,779
the container not not only the kernel

00:19:30,419 --> 00:19:36,149
but the container and channel is inside

00:19:33,779 --> 00:19:36,480
are virtualized it's like a virtual

00:19:36,149 --> 00:19:40,440
machine

00:19:36,480 --> 00:19:47,129
it's not changed so we're in Windows we

00:19:40,440 --> 00:19:49,799
lost this last way to deploy a container

00:19:47,129 --> 00:19:53,450
right it's not a smart way to not the

00:19:49,799 --> 00:19:59,220
best way to use containers with Windows

00:19:53,450 --> 00:20:04,619
okay so let's do the same examples we do

00:19:59,220 --> 00:20:08,940
pro cross development with or native

00:20:04,619 --> 00:20:13,950
cross touching but now with containers

00:20:08,940 --> 00:20:18,960
right first we need a reside the docker

00:20:13,950 --> 00:20:23,369
file that will save what he have to be

00:20:18,960 --> 00:20:26,549
done for my application so 40 hello

00:20:23,369 --> 00:20:29,820
example the hello world example we have

00:20:26,549 --> 00:20:39,509
this docker fire it's okay for this

00:20:29,820 --> 00:20:44,549
thing all right okay so here I have the

00:20:39,509 --> 00:20:46,619
talker file 42 hello example and Here I

00:20:44,549 --> 00:20:49,649
am running two stages

00:20:46,619 --> 00:20:54,289
I mean running a multi-stage docker file

00:20:49,649 --> 00:20:58,320
right the first stage I call it a spute

00:20:54,289 --> 00:20:59,840
right and I am this is cool about the

00:20:58,320 --> 00:21:05,450
docker

00:20:59,840 --> 00:21:09,980
Tanner's I can we can use other image as

00:21:05,450 --> 00:21:15,610
base so I'm using my image here to be no

00:21:09,980 --> 00:21:19,490
choose that in that is described here so

00:21:15,610 --> 00:21:22,940
here I have an image from their been

00:21:19,490 --> 00:21:28,039
bustling right from the Army the seven

00:21:22,940 --> 00:21:31,970
architecture and I am running this

00:21:28,039 --> 00:21:35,899
comment will run a comment the apt-get

00:21:31,970 --> 00:21:41,029
blah blah blah without packages that I

00:21:35,899 --> 00:21:46,299
need to compile stuff in my container

00:21:41,029 --> 00:21:50,539
right so I made one generic container

00:21:46,299 --> 00:21:54,049
basis and that mean bustling arm v7

00:21:50,539 --> 00:21:57,649
architecture with our deputies for to

00:21:54,049 --> 00:22:01,580
chain and I can use in all my projects

00:21:57,649 --> 00:22:08,899
that I need to make native compiles for

00:22:01,580 --> 00:22:12,760
our v7 right so here I'm copying the

00:22:08,899 --> 00:22:12,760
hello dot C sirs

00:22:19,810 --> 00:22:34,180
can you please repeat the question no

00:22:28,510 --> 00:22:37,360
problem I'm lost now which architecture

00:22:34,180 --> 00:22:41,110
is this docker container an icon on your

00:22:37,360 --> 00:22:43,780
host architecture so Intel or arm and if

00:22:41,110 --> 00:22:47,820
you're on arm then how do you run

00:22:43,780 --> 00:22:52,720
container on ARM architecture on Intel

00:22:47,820 --> 00:22:54,960
Here I am using the image as base okay

00:22:52,720 --> 00:23:01,650
this image is for the ARM architecture

00:22:54,960 --> 00:23:05,860
right it's beaut are you run in my

00:23:01,650 --> 00:23:08,320
development might not boot did that

00:23:05,860 --> 00:23:13,320
design tell architecture wait oh you

00:23:08,320 --> 00:23:23,350
will get it will reach this step right

00:23:13,320 --> 00:23:27,100
more for it ok so we have our arm v7

00:23:23,350 --> 00:23:29,820
base image right that we will install

00:23:27,100 --> 00:23:34,480
all the the packages for to chain and

00:23:29,820 --> 00:23:38,350
here I'm using this basic image right

00:23:34,480 --> 00:23:44,430
for compile my problem

00:23:38,350 --> 00:23:49,270
so I'm coping t hello dot C source from

00:23:44,430 --> 00:23:52,720
the folder from my sirs and copying to

00:23:49,270 --> 00:23:57,280
my container right this is what copy do

00:23:52,720 --> 00:24:01,210
and I'm running tick you know compiler

00:23:57,280 --> 00:24:03,850
generating code generating tiptip binary

00:24:01,210 --> 00:24:08,560
from tamiya hello dot C this is the

00:24:03,850 --> 00:24:12,580
first stage ok here I'm only describing

00:24:08,560 --> 00:24:19,060
what docker you do ain't beaut stage

00:24:12,580 --> 00:24:21,640
right now we have the second stage from

00:24:19,060 --> 00:24:24,670
from our taka file with mood stage the

00:24:21,640 --> 00:24:29,110
last stage is a stage that the image

00:24:24,670 --> 00:24:31,710
will be built right so in my second

00:24:29,110 --> 00:24:33,440
stage I'm using our debian Buster's link

00:24:31,710 --> 00:24:36,590
240 are

00:24:33,440 --> 00:24:38,049
seven architecture as deploy but here

00:24:36,590 --> 00:24:41,059
I'm coping

00:24:38,049 --> 00:24:43,490
only the hello generated program

00:24:41,059 --> 00:24:46,789
generated from the order stage from the

00:24:43,490 --> 00:24:50,840
beauty station right that's what I seen

00:24:46,789 --> 00:24:56,509
here from the beaut stage right from the

00:24:50,840 --> 00:25:01,759
boot stage to my target right and I'm a

00:24:56,509 --> 00:25:04,159
running comment hello to run this comedy

00:25:01,759 --> 00:25:10,120
inside container right here I'm already

00:25:04,159 --> 00:25:16,039
scribing this now I can build this guy

00:25:10,120 --> 00:25:18,740
that calm so we need to talk a run time

00:25:16,039 --> 00:25:22,909
running right I have here to talk a run

00:25:18,740 --> 00:25:26,929
time running and I will dock her Butte

00:25:22,909 --> 00:25:30,830
fire darker file here I'm paste a

00:25:26,929 --> 00:25:32,269
passing the tea folder that we use as a

00:25:30,830 --> 00:25:33,100
reference for the talker wrong time

00:25:32,269 --> 00:25:38,720
right

00:25:33,100 --> 00:25:46,960
this is this folder temp that cough and

00:25:38,720 --> 00:25:52,929
I will pass up think to name this guy

00:25:46,960 --> 00:26:00,950
that's right I'm already done this and

00:25:52,929 --> 00:26:04,360
docker Butte works in layers so for my

00:26:00,950 --> 00:26:08,269
image we have a lot of layers with all

00:26:04,360 --> 00:26:13,370
steps of we of the dockerfile described

00:26:08,269 --> 00:26:16,039
right so for deploy is we we can make

00:26:13,370 --> 00:26:18,559
only two Delta only two divs from the

00:26:16,039 --> 00:26:24,129
layers and only download the different

00:26:18,559 --> 00:26:28,730
layers for entire English right okay

00:26:24,129 --> 00:26:33,049
successfully now we can oh no first we

00:26:28,730 --> 00:26:39,799
have to push this so I will push this

00:26:33,049 --> 00:26:44,120
for my my computer to docker hub right I

00:26:39,799 --> 00:26:48,080
mean pushing this image docker hub cloud

00:26:44,120 --> 00:26:49,039
so I can boom the image in my embedded

00:26:48,080 --> 00:26:56,860
device right

00:26:49,039 --> 00:27:02,450
ah I'm forgetting one thing when I beaut

00:26:56,860 --> 00:27:07,789
when we do this did Walker wrong time

00:27:02,450 --> 00:27:14,779
you run these comments right we compile

00:27:07,789 --> 00:27:21,770
or problem right in rv7 likely change

00:27:14,779 --> 00:27:28,909
route do using Tiki moon we have to we

00:27:21,770 --> 00:27:33,559
have this service appears this guy will

00:27:28,909 --> 00:27:38,179
run you translate the instructions right

00:27:33,559 --> 00:27:43,460
from from TR me for my my computer using

00:27:38,179 --> 00:27:49,100
key mu is that problem right so this we

00:27:43,460 --> 00:27:54,380
will run a way like we do with the

00:27:49,100 --> 00:27:57,860
change right so T at the end we have

00:27:54,380 --> 00:28:04,340
here - hello for the arm v7 architecture

00:27:57,860 --> 00:28:06,830
right that's that's it okay now in or

00:28:04,340 --> 00:28:12,710
embedded device here in your in that

00:28:06,830 --> 00:28:18,200
embedded device we have talker we have

00:28:12,710 --> 00:28:21,919
talking room time to write right so we

00:28:18,200 --> 00:28:33,799
can move this image in your embedded

00:28:21,919 --> 00:28:35,840
device that comes downloading images up

00:28:33,799 --> 00:28:40,010
to date though no changes from my image

00:28:35,840 --> 00:28:45,169
so now we can run Oh

00:28:40,010 --> 00:28:49,399
let's let's see one tiki-taka image that

00:28:45,169 --> 00:28:54,169
I have installed here I have did this

00:28:49,399 --> 00:28:57,100
image here that have this amount of

00:28:54,169 --> 00:28:59,880
storage right span

00:28:57,100 --> 00:29:10,270
if we have here in our development

00:28:59,880 --> 00:29:14,230
computer I will grab this it's the same

00:29:10,270 --> 00:29:17,410
image right same amount of office

00:29:14,230 --> 00:29:24,370
storage but what what I can what I have

00:29:17,410 --> 00:29:26,530
to show is this one guy whoa for any

00:29:24,370 --> 00:29:29,800
better device to to deploy this one is

00:29:26,530 --> 00:29:37,540
better device there's a lot of office

00:29:29,800 --> 00:29:40,320
storage so this is this is a good is

00:29:37,540 --> 00:29:45,100
that good cause to run the moved stage

00:29:40,320 --> 00:29:50,050
docker viewed right we don't need all

00:29:45,100 --> 00:29:53,820
this stuff here only we only need the

00:29:50,050 --> 00:30:01,080
program and the room to program right

00:29:53,820 --> 00:30:04,090
okay ah let's run this Crocker run I

00:30:01,080 --> 00:30:06,070
will paste these argument to remove the

00:30:04,090 --> 00:30:12,520
container at the end of the running

00:30:06,070 --> 00:30:20,860
right and this will be interactive so we

00:30:12,520 --> 00:30:24,760
can see the output with lucky ok so we

00:30:20,860 --> 00:30:27,420
are learning or hello dot C program in

00:30:24,760 --> 00:30:31,450
your container inside our embedded

00:30:27,420 --> 00:30:36,990
device right in ARM architecture here is

00:30:31,450 --> 00:30:36,990
not native but here right

00:30:39,830 --> 00:30:48,610
so we do we do all the stuff we have to

00:30:44,750 --> 00:30:48,610
talk afire with the describe of

00:30:57,370 --> 00:31:01,240
forgive me I'm just a little bit

00:30:58,570 --> 00:31:02,800
confused about how Kimmy works because I

00:31:01,240 --> 00:31:05,770
know that Kim you can emulate other

00:31:02,800 --> 00:31:07,330
architectures so you're running out

00:31:05,770 --> 00:31:09,190
darker usually when you have a talker

00:31:07,330 --> 00:31:13,990
the darker will use your own kernel and

00:31:09,190 --> 00:31:16,240
in this case the Kim you will have a

00:31:13,990 --> 00:31:18,940
kernel from itself that it's going to

00:31:16,240 --> 00:31:22,690
use to run the docker or no they are

00:31:18,940 --> 00:31:24,660
using a techie mu static ET k mu user is

00:31:22,690 --> 00:31:28,990
that okay so the community will only

00:31:24,660 --> 00:31:33,610
translate the user space to your own

00:31:28,990 --> 00:31:38,220
kernel yeah virtualize it with this with

00:31:33,610 --> 00:31:41,110
this service being format do it for us

00:31:38,220 --> 00:31:46,000
because for example we have two hell

00:31:41,110 --> 00:31:50,950
over here hello is compiling forearm

00:31:46,000 --> 00:32:03,750
right yes I can is a critic because

00:31:50,950 --> 00:32:03,750
they've been formed yeah this serves

00:32:04,260 --> 00:32:12,190
this service here get the hitter from

00:32:09,550 --> 00:32:15,430
the binary right and get the type of the

00:32:12,190 --> 00:32:18,490
architecture inspire and goals and Coast

00:32:15,430 --> 00:32:21,010
ttk move and make the calls inside to

00:32:18,490 --> 00:32:27,780
Kim right so it they translate and run

00:32:21,010 --> 00:32:30,130
you know in my heart attack okay I

00:32:27,780 --> 00:32:32,950
understood but I'm a little bit confused

00:32:30,130 --> 00:32:37,330
how come you can translate user space

00:32:32,950 --> 00:32:41,170
and calls the kernel space from arm 64

00:32:37,330 --> 00:32:42,970
it's then x86 and that just works

00:32:41,170 --> 00:32:44,380
I and I don't know I'm just a bit

00:32:42,970 --> 00:32:46,930
confused on how that yeah yeah that's

00:32:44,380 --> 00:32:49,480
alright I got the image I don't know I

00:32:46,930 --> 00:32:52,660
don't know over a response with the

00:32:49,480 --> 00:32:57,820
technical part of this but it became mu

00:32:52,660 --> 00:33:00,360
user static the rooms this dis

00:32:57,820 --> 00:33:00,360
translation

00:33:01,220 --> 00:33:12,770
I believe too right so we have the

00:33:08,510 --> 00:33:16,400
dockerfile with the describe of our of

00:33:12,770 --> 00:33:20,180
our comments right what we will have the

00:33:16,400 --> 00:33:23,990
needs for the or application so this we

00:33:20,180 --> 00:33:27,620
will build build an image a docker image

00:33:23,990 --> 00:33:31,180
which were Debian container and we look

00:33:27,620 --> 00:33:35,630
push this to to docker hub or order

00:33:31,180 --> 00:33:40,610
clothed with the docker registry ok so

00:33:35,630 --> 00:33:43,670
we can attend put this image on our

00:33:40,610 --> 00:33:46,640
target device and your own this in your

00:33:43,670 --> 00:33:50,420
target device right let's do it

00:33:46,640 --> 00:33:54,290
blink example to only only for for the

00:33:50,420 --> 00:33:58,970
frontal to see our LED blinking ah

00:33:54,290 --> 00:34:03,170
and the docker file is a bit more with

00:33:58,970 --> 00:34:05,300
with more steps here we have the same

00:34:03,170 --> 00:34:12,250
concept of the of the order of docker

00:34:05,300 --> 00:34:16,490
file right we have a boot stage right

00:34:12,250 --> 00:34:19,610
but here we are installing the lips that

00:34:16,490 --> 00:34:22,340
we need right we are using the be new

00:34:19,610 --> 00:34:25,970
choose Devin or that I described in

00:34:22,340 --> 00:34:29,060
order to occupy an order docker image

00:34:25,970 --> 00:34:33,140
right and I am strolling here to leave

00:34:29,060 --> 00:34:37,280
GPIO D and Libby GPIO D deaf readers I'm

00:34:33,140 --> 00:34:41,780
copying teasers right and compiling and

00:34:37,280 --> 00:34:45,440
linking with Libby IOT and again we have

00:34:41,780 --> 00:34:49,220
this stage of deploy here you deploy we

00:34:45,440 --> 00:34:53,540
already have to blink link it we don't

00:34:49,220 --> 00:34:58,430
need to leave GPU d that we only install

00:34:53,540 --> 00:35:04,360
the shared objects package right so i

00:34:58,430 --> 00:35:10,790
copy the binary and at least we will

00:35:04,360 --> 00:35:20,210
tell me we will run the blink so first

00:35:10,790 --> 00:35:24,560
we have to view it dockerfile blink from

00:35:20,210 --> 00:35:31,340
this folder heifer hands and deck as

00:35:24,560 --> 00:35:35,630
Mateus Costello hopes that come click ok

00:35:31,340 --> 00:35:36,530
it's already compiled - you can see the

00:35:35,630 --> 00:35:40,850
layers here

00:35:36,530 --> 00:35:46,640
no no difference from the layers we can

00:35:40,850 --> 00:35:51,920
now push the image just Costello that

00:35:46,640 --> 00:35:54,020
Kampf blink put the docker hub go check

00:35:51,920 --> 00:36:00,770
into layers no no difference for the

00:35:54,020 --> 00:36:02,920
layers and now we can deploy it on the

00:36:00,770 --> 00:36:02,920
device

00:36:07,710 --> 00:36:15,750
it's not different from the delayers

00:36:11,400 --> 00:36:26,780
okay team is up to date and now we will

00:36:15,750 --> 00:36:26,780
run this image I've gone Oh

00:36:31,100 --> 00:36:40,080
only two hello that Kampf output wha why

00:36:37,160 --> 00:36:43,590
we have here TT code

00:36:40,080 --> 00:36:48,180
- hello that conf the access to we are

00:36:43,590 --> 00:36:50,340
acces to harbor so I can have to tell to

00:36:48,180 --> 00:36:53,820
dock around time to that container

00:36:50,340 --> 00:37:02,700
that's continued access to harbor so I

00:36:53,820 --> 00:37:10,490
have to talk a run remove it interactive

00:37:02,700 --> 00:37:17,900
and pass this one brief legit okay

00:37:10,490 --> 00:37:17,900
are you type this from here

00:37:24,450 --> 00:37:27,650
it's not a good idea

00:37:29,600 --> 00:37:44,060
you did hear doctor run our m.i.t I have

00:37:39,950 --> 00:37:50,510
to tell talker that this container will

00:37:44,060 --> 00:37:54,040
run brief legit comments right so and we

00:37:50,510 --> 00:38:06,590
have to tell him to access the harbor to

00:37:54,040 --> 00:38:10,820
delete gpio D use this this guy's the

00:38:06,590 --> 00:38:15,260
Triple D use these device guys to access

00:38:10,820 --> 00:38:19,790
the GPO use right so we have to tell the

00:38:15,260 --> 00:38:23,360
docker that their volume is share it

00:38:19,790 --> 00:38:28,100
between the container and the host

00:38:23,360 --> 00:38:30,470
device right with this argument volume

00:38:28,100 --> 00:38:35,660
we are mounting to dev share it between

00:38:30,470 --> 00:38:41,980
the container and my host from the

00:38:35,660 --> 00:38:41,980
target device right and the docker image

00:38:45,960 --> 00:39:06,349
okay so with lucky we can run this oh

00:38:59,059 --> 00:39:06,349
you are working here it's blinking oh

00:39:08,640 --> 00:39:12,270
[Applause]

00:39:11,059 --> 00:39:15,510
right

00:39:12,270 --> 00:39:18,720
so this is a kind of thing we have to

00:39:15,510 --> 00:39:25,050
take care about cause we are a sexing

00:39:18,720 --> 00:39:27,569
uh a device that is a that is mounted

00:39:25,050 --> 00:39:31,230
from our Colonel for cheryl/carol so we

00:39:27,569 --> 00:39:33,180
can do something if we are accessing

00:39:31,230 --> 00:39:35,420
other things from the or can we can

00:39:33,180 --> 00:39:38,579
crash the colonel and crash our orders

00:39:35,420 --> 00:39:47,309
containers that were that we are running

00:39:38,579 --> 00:39:51,359
in or target device right so this is it

00:39:47,309 --> 00:39:53,579
and one weak point that we can see from

00:39:51,359 --> 00:39:55,650
the docker images for embedded device it

00:39:53,579 --> 00:39:59,609
increases storage memory space because

00:39:55,650 --> 00:40:02,460
we have all the root filesystem from my

00:39:59,609 --> 00:40:05,849
device that is running to talker runtime

00:40:02,460 --> 00:40:10,500
and we have to the container root

00:40:05,849 --> 00:40:14,460
filesystem from our Debian's containers

00:40:10,500 --> 00:40:18,319
right so we have to think about this

00:40:14,460 --> 00:40:24,059
storage memory that we are spending if

00:40:18,319 --> 00:40:27,349
okay that's it this is very simple

00:40:24,059 --> 00:40:31,170
examples but I on I mean using

00:40:27,349 --> 00:40:32,910
containers to build QT applications that

00:40:31,170 --> 00:40:37,339
they have a lot of dependence is a lot

00:40:32,910 --> 00:40:40,349
of shared objects G streamers Wayland

00:40:37,339 --> 00:40:44,839
gtk and donut core this is awesome art

00:40:40,349 --> 00:40:50,099
some projects that we already built

00:40:44,839 --> 00:40:55,680
cross-compile from for our arm device

00:40:50,099 --> 00:40:56,880
with using containers so it's it if you

00:40:55,680 --> 00:40:59,200
have some question

00:40:56,880 --> 00:41:13,130
so the

00:40:59,200 --> 00:41:16,460
thank you what is the size of the docker

00:41:13,130 --> 00:41:21,430
run time in the target platform docker

00:41:16,460 --> 00:41:26,360
platform is a good question I I not know

00:41:21,430 --> 00:41:28,820
precisely but we need a Linux micro

00:41:26,360 --> 00:41:31,730
platform right which are root for the

00:41:28,820 --> 00:41:36,110
system with a Lipsy and everything for

00:41:31,730 --> 00:41:40,970
ruining your docker run time all this

00:41:36,110 --> 00:41:41,680
image they talk a runtime like the

00:41:40,970 --> 00:41:44,630
docker

00:41:41,680 --> 00:41:47,300
yeah I don't know the size of the dock

00:41:44,630 --> 00:41:54,370
around time I know the size of this

00:41:47,300 --> 00:41:59,240
image is is more or less 600 megabytes

00:41:54,370 --> 00:42:03,500
600 with docker yeah with all the file

00:41:59,240 --> 00:42:06,200
system with if you have an image with

00:42:03,500 --> 00:42:08,360
token from which size is that and if you

00:42:06,200 --> 00:42:11,660
take dr. out of the image how much is

00:42:08,360 --> 00:42:14,330
the size of the image the image the

00:42:11,660 --> 00:42:18,190
image we can see here it's not the

00:42:14,330 --> 00:42:25,540
docker image the runtime at the target

00:42:18,190 --> 00:42:28,700
the memory space that uses okay

00:42:25,540 --> 00:42:30,980
basically the question is how how BIG's

00:42:28,700 --> 00:42:32,870
spies are you using on your embedded

00:42:30,980 --> 00:42:34,850
devices to have everything that is

00:42:32,870 --> 00:42:37,280
needed to this docker so docker run time

00:42:34,850 --> 00:42:39,830
or management all the libraries that are

00:42:37,280 --> 00:42:44,390
used by docker all those layers that are

00:42:39,830 --> 00:42:47,450
translating those cost instructions to

00:42:44,390 --> 00:42:50,090
to guess instruction and so on and so on

00:42:47,450 --> 00:42:54,670
so how much do you additionally using on

00:42:50,090 --> 00:42:59,680
embedded device right more or less 200

00:42:54,670 --> 00:42:59,680
r66 rounded megabytes right

00:43:08,789 --> 00:43:12,450
there are more questions

00:43:16,430 --> 00:43:20,000
right alright thank you very much and

00:43:18,860 --> 00:43:26,000
that concludes the first day

00:43:20,000 --> 00:43:26,000

YouTube URL: https://www.youtube.com/watch?v=Q7RBjS9zkyU


