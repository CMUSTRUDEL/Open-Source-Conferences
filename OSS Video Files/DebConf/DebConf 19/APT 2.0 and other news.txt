Title: APT 2.0 and other news
Publication date: 2019-08-07
Playlist: DebConf 19
Description: 
	by Julian Andres Klode

At: DebConf19
https://debconf19.debconf.org/talks/79-apt-20-and-other-news/

There are a lot of new things in APT to discover. This talk will showcase new features and improvements in apt 1.9, what my vision for apt 2.0 looks like, and what we still need to do.

I'll also discuss some changes to python-apt that will allow us to write faster python-apt applications, and showcase some noteworthy changes in other related packages such as dpkg and unattended-upgrades.

Room: AuditÃ³rio
Scheduled start: 2019-07-22 14:00:00
Captions: 
	00:00:04,540 --> 00:00:12,779
okay everybody now we have Julian and

00:00:09,639 --> 00:00:16,150
place khludov who will talk about about

00:00:12,779 --> 00:00:18,449
appetit 2.0 and other news in case you

00:00:16,150 --> 00:00:23,260
don't have mood today yet that's fine

00:00:18,449 --> 00:00:24,070
occasion thank you very much hello sorry

00:00:23,260 --> 00:00:31,300
I was a bit late

00:00:24,070 --> 00:00:33,190
I miss mix up the time a bit so I wanted

00:00:31,300 --> 00:00:35,800
to talk about about what happened

00:00:33,190 --> 00:00:40,390
recently and a planned and like be

00:00:35,800 --> 00:00:43,659
packaged and stuff so one thing I really

00:00:40,390 --> 00:00:47,100
like is code cleanup so in experimental

00:00:43,659 --> 00:00:50,379
we had an API break and I removed like

00:00:47,100 --> 00:00:57,280
3400 lines of C++ code it's just like

00:00:50,379 --> 00:00:59,739
all the deprecated API and then I fixed

00:00:57,280 --> 00:01:02,109
all the reverse dependencies which was a

00:00:59,739 --> 00:01:06,460
bit annoying but well if you break it

00:01:02,109 --> 00:01:09,340
you have to fix it right and we also

00:01:06,460 --> 00:01:12,610
cleaned up all the includes that

00:01:09,340 --> 00:01:14,550
included other includes so some stuff

00:01:12,610 --> 00:01:19,150
broke because it included a file

00:01:14,550 --> 00:01:21,400
implicitly by another header and now it

00:01:19,150 --> 00:01:25,050
had to know you had to add the header as

00:01:21,400 --> 00:01:28,930
well which was a bit annoying because

00:01:25,050 --> 00:01:30,430
you don't expect it to break because you

00:01:28,930 --> 00:01:32,500
don't see deprecation warnings in the

00:01:30,430 --> 00:01:35,680
build locks for the old package and then

00:01:32,500 --> 00:01:40,450
it breaks and you just like think oh no

00:01:35,680 --> 00:01:43,390
and I also removed the internal copy of

00:01:40,450 --> 00:01:45,520
try hash if you don't know what triage

00:01:43,390 --> 00:01:47,530
is I will have a talk on first day about

00:01:45,520 --> 00:01:51,100
it

00:01:47,530 --> 00:01:56,400
it's basically perfect hash function

00:01:51,100 --> 00:01:56,400
generator more in the talk on Thursday

00:01:56,430 --> 00:02:05,710
so another new thing I was working on

00:02:00,370 --> 00:02:09,160
was the winter trusty ESM

00:02:05,710 --> 00:02:13,590
one part of it it was the never pinning

00:02:09,160 --> 00:02:16,570
so in trustee in ESM we wanted to have

00:02:13,590 --> 00:02:18,730
publicly available this folder but

00:02:16,570 --> 00:02:21,250
require authentication for the pool so

00:02:18,730 --> 00:02:23,530
you can see which updates are available

00:02:21,250 --> 00:02:29,170
but you can't install them until unless

00:02:23,530 --> 00:02:33,310
you have bought the ESM package and one

00:02:29,170 --> 00:02:35,860
thing one idea was to let's to add VSM

00:02:33,310 --> 00:02:37,240
repository with a negative pin so

00:02:35,860 --> 00:02:40,150
there's a tool that adds the

00:02:37,240 --> 00:02:42,730
repositories and it would just install a

00:02:40,150 --> 00:02:44,830
preferences file where it pins the open

00:02:42,730 --> 00:02:49,480
to ESM origin to minus one something

00:02:44,830 --> 00:02:51,790
like that but this has a few problems so

00:02:49,480 --> 00:02:55,240
if you specify on the command line minus

00:02:51,790 --> 00:02:58,030
t trustee it would still install all the

00:02:55,240 --> 00:03:00,490
would try to install the ESM updates as

00:02:58,030 --> 00:03:03,790
well because it also has the codename

00:03:00,490 --> 00:03:06,459
trustee and if you added a pin in your

00:03:03,790 --> 00:03:09,269
preferences file like you can release

00:03:06,459 --> 00:03:12,130
trustee to one hundred for some reason

00:03:09,269 --> 00:03:14,620
this would also potentially override

00:03:12,130 --> 00:03:16,600
your pin depending on the order in which

00:03:14,620 --> 00:03:20,890
your pins are listed and the Preferences

00:03:16,600 --> 00:03:21,430
file so the solution via is fairly

00:03:20,890 --> 00:03:24,130
simple

00:03:21,430 --> 00:03:26,590
which just introduced a new pin I call

00:03:24,130 --> 00:03:29,769
it never so you can write pin priority

00:03:26,590 --> 00:03:32,200
colon space never in your preferences

00:03:29,769 --> 00:03:36,360
file and that pin just overrides any

00:03:32,200 --> 00:03:40,720
other pin regardless of the order so now

00:03:36,360 --> 00:03:45,630
you can disable a repository but by

00:03:40,720 --> 00:03:49,959
specifying write pin never and no other

00:03:45,630 --> 00:03:53,380
pinning would override it which might

00:03:49,959 --> 00:03:56,560
also have other applications for example

00:03:53,380 --> 00:03:58,269
in understand it upgrades there's a

00:03:56,560 --> 00:04:00,459
couldn't there's a lot of logic

00:03:58,269 --> 00:04:02,470
currently to install only security

00:04:00,459 --> 00:04:05,730
updates and filter out non security

00:04:02,470 --> 00:04:08,140
updates so it goes through the cache and

00:04:05,730 --> 00:04:09,870
changes the versions of the packages so

00:04:08,140 --> 00:04:13,510
it only installed security updates

00:04:09,870 --> 00:04:16,900
that's a bit slow and it's maybe not

00:04:13,510 --> 00:04:18,739
entirely the best idea and you could

00:04:16,900 --> 00:04:23,000
potentially break stuff

00:04:18,739 --> 00:04:27,289
that so one solution might be to just

00:04:23,000 --> 00:04:31,220
modify unattended upgrades to pin away

00:04:27,289 --> 00:04:33,410
the the origins it does not want so any

00:04:31,220 --> 00:04:35,569
non security repository would just be

00:04:33,410 --> 00:04:37,400
pimped in ever and then app would

00:04:35,569 --> 00:04:41,120
automatically not install updates from

00:04:37,400 --> 00:04:42,620
there and that would make things a lot

00:04:41,120 --> 00:04:44,740
easier than unattended upgrades and

00:04:42,620 --> 00:04:47,900
probably remove a lot of code there and

00:04:44,740 --> 00:04:49,550
vastly simplify and improve the

00:04:47,900 --> 00:04:53,240
performance and probably hit the safety

00:04:49,550 --> 00:04:55,580
of the whole thing but we haven't tried

00:04:53,240 --> 00:05:01,220
it yet and I have to see how it works

00:04:55,580 --> 00:05:04,880
out another thing that's been happening

00:05:01,220 --> 00:05:06,620
was locking fixes so last year we

00:05:04,880 --> 00:05:10,880
introduced front-end locking for deep

00:05:06,620 --> 00:05:14,180
package so the front-end locking was

00:05:10,880 --> 00:05:16,729
another lock editor defect because with

00:05:14,180 --> 00:05:18,770
the normal lock the front end starts it

00:05:16,729 --> 00:05:20,270
acquires the lock and every time it has

00:05:18,770 --> 00:05:22,490
to run the deep packaged binary it has

00:05:20,270 --> 00:05:25,460
to release this lock because the package

00:05:22,490 --> 00:05:29,030
requires the lock itself and the

00:05:25,460 --> 00:05:31,610
front-end lock is basically similar but

00:05:29,030 --> 00:05:33,169
instead of releasing it you just tell D

00:05:31,610 --> 00:05:35,690
package that you own the lock and it's

00:05:33,169 --> 00:05:37,430
okay not to require it so you can keep

00:05:35,690 --> 00:05:41,120
the lock the entire time your front end

00:05:37,430 --> 00:05:42,949
runs which means that it prevents on out

00:05:41,120 --> 00:05:45,590
the front end from using the race

00:05:42,949 --> 00:05:48,650
condition in the normal lock to run D

00:05:45,590 --> 00:05:51,199
package on its own at the same time as

00:05:48,650 --> 00:05:53,300
you are running calculations or

00:05:51,199 --> 00:05:59,150
something and you're not running the

00:05:53,300 --> 00:06:00,830
package and that had a few rays can do

00:05:59,150 --> 00:06:03,139
that where a few issues with that

00:06:00,830 --> 00:06:05,270
because like we got abdomen in Ubuntu

00:06:03,139 --> 00:06:09,620
and it waits for the lock file when it

00:06:05,270 --> 00:06:11,360
has a transit transaction pending so it

00:06:09,620 --> 00:06:14,060
would wait for the lock file you would

00:06:11,360 --> 00:06:16,460
have this in this window between where

00:06:14,060 --> 00:06:18,849
your deep packet invocation ends and you

00:06:16,460 --> 00:06:21,349
reacquire the lock in the front end or

00:06:18,849 --> 00:06:23,599
where the other window where you release

00:06:21,349 --> 00:06:27,320
the lock and then you're on D package

00:06:23,599 --> 00:06:30,260
and then abdomen might come in and say

00:06:27,320 --> 00:06:33,980
hey I snatched this lock

00:06:30,260 --> 00:06:35,590
and yeah then your front end might just

00:06:33,980 --> 00:06:40,610
break in the middle of an installation

00:06:35,590 --> 00:06:45,140
which was really annoying another few

00:06:40,610 --> 00:06:49,820
issues we had fixed was in - app mostly

00:06:45,140 --> 00:06:55,550
like when when we downloaded depth files

00:06:49,820 --> 00:06:59,600
we never released the lock even after we

00:06:55,550 --> 00:07:02,270
were done installing them first of all

00:06:59,600 --> 00:07:04,370
we didn't actually acquire the lock or

00:07:02,270 --> 00:07:06,950
like keep the lock the entire time and I

00:07:04,370 --> 00:07:12,110
fixed that and then I broke it and now

00:07:06,950 --> 00:07:14,390
it never released the lock and yeah

00:07:12,110 --> 00:07:16,880
that's obviously a bad idea because if

00:07:14,390 --> 00:07:18,890
you want to run if you want to run deep

00:07:16,880 --> 00:07:21,080
package or something else afterwards and

00:07:18,890 --> 00:07:22,040
you don't release the lock it just

00:07:21,080 --> 00:07:27,050
doesn't work correctly

00:07:22,040 --> 00:07:30,740
and another stupid problem was like in

00:07:27,050 --> 00:07:33,290
Python apt when we closed the cache or

00:07:30,740 --> 00:07:35,690
when it went out of scope we had an app

00:07:33,290 --> 00:07:37,910
package cache object and went out of

00:07:35,690 --> 00:07:40,040
scope it would automatically release or

00:07:37,910 --> 00:07:42,740
like decrement the lock counter for the

00:07:40,040 --> 00:07:44,360
D package lock it that's totally

00:07:42,740 --> 00:07:46,730
unexpected because it doesn't acquire

00:07:44,360 --> 00:07:48,830
the D package lock when you create the

00:07:46,730 --> 00:07:51,530
object so you could say you could write

00:07:48,830 --> 00:07:53,240
a code that says acquire the lock then

00:07:51,530 --> 00:07:54,770
open a cache object then you delete the

00:07:53,240 --> 00:07:58,820
cache object and your lock is gone

00:07:54,770 --> 00:08:00,770
without you having released it and this

00:07:58,820 --> 00:08:03,860
was really breaking a talented upgrades

00:08:00,770 --> 00:08:06,170
because it opens and closes the cache a

00:08:03,860 --> 00:08:09,290
lot of times because it calculates

00:08:06,170 --> 00:08:11,720
minimal upgrade sets because it wants to

00:08:09,290 --> 00:08:14,000
avoid having to wait a long time at

00:08:11,720 --> 00:08:18,430
shutdown it calculates a minimal set it

00:08:14,000 --> 00:08:20,570
can execute in one transaction and

00:08:18,430 --> 00:08:22,700
afterwards it has to reopen the cache

00:08:20,570 --> 00:08:25,040
and rebuild it with the new updated D

00:08:22,700 --> 00:08:26,870
package status and every time it did

00:08:25,040 --> 00:08:29,480
that it basically got screwed by this

00:08:26,870 --> 00:08:33,110
buck because the lock was released when

00:08:29,480 --> 00:08:36,160
it shouldn't have been and now that's

00:08:33,110 --> 00:08:40,060
fixed we see a lot of less crashes and

00:08:36,160 --> 00:08:40,060
we're really happy about this

00:08:42,000 --> 00:08:46,570
another thing that was happening

00:08:44,710 --> 00:08:49,330
recently was that people were saying oh

00:08:46,570 --> 00:08:51,040
we're installing updates and we're now

00:08:49,330 --> 00:08:53,980
running a reboot at the same time and

00:08:51,040 --> 00:08:58,510
now other our packaging our package

00:08:53,980 --> 00:09:00,040
manager is broken so yeah I mean if you

00:08:58,510 --> 00:09:02,920
reboot while you insulin packages that's

00:09:00,040 --> 00:09:06,970
going to happen so I introduced an

00:09:02,920 --> 00:09:09,340
inhibitor and app 1.8 when one

00:09:06,970 --> 00:09:13,060
so system II inhibitor can prevent you

00:09:09,340 --> 00:09:15,190
from rebooting or shutting down your

00:09:13,060 --> 00:09:18,250
system you can also prevent you from

00:09:15,190 --> 00:09:19,900
sleeping having the system sleep or you

00:09:18,250 --> 00:09:23,080
can delay these actions as well in this

00:09:19,900 --> 00:09:25,150
case it's a Plock inhibitor it prevents

00:09:23,080 --> 00:09:28,560
you from shutting down or rebooting the

00:09:25,150 --> 00:09:32,140
system while it's installing packages

00:09:28,560 --> 00:09:34,330
but this is slightly incomplete the

00:09:32,140 --> 00:09:37,030
support for this and in system D because

00:09:34,330 --> 00:09:39,760
it only works for the systemctl command

00:09:37,030 --> 00:09:42,520
and the GUI it does not work if you're

00:09:39,760 --> 00:09:47,170
on sudo reboot because sudo reboot will

00:09:42,520 --> 00:09:48,940
then just ignore inhibitors but I think

00:09:47,170 --> 00:09:53,020
there are plans to fix this in system D

00:09:48,940 --> 00:09:54,250
in the issue that's linked there but

00:09:53,020 --> 00:09:56,800
it's a link but you can find it on

00:09:54,250 --> 00:09:59,320
github if you look we look for it I

00:09:56,800 --> 00:10:01,300
think the idea is to have reboot wait

00:09:59,320 --> 00:10:03,580
until the inhibitor is law is released

00:10:01,300 --> 00:10:08,050
and then continue even if it's a block

00:10:03,580 --> 00:10:11,770
inhibitor not a delay inhibitor and that

00:10:08,050 --> 00:10:13,210
will fix the problem for everyone so you

00:10:11,770 --> 00:10:15,880
if you have two administrators on a

00:10:13,210 --> 00:10:17,820
server and one runs at this upgrade and

00:10:15,880 --> 00:10:21,010
the other runs reboot at the same time

00:10:17,820 --> 00:10:23,560
the reboot would wait until the desire

00:10:21,010 --> 00:10:28,950
is complete which I think will make

00:10:23,560 --> 00:10:28,950
people happy and prevent broken systems

00:10:30,360 --> 00:10:40,000
yeah you might have noticed it if you

00:10:35,680 --> 00:10:43,330
run Buster or she has testing your

00:10:40,000 --> 00:10:45,130
sources list file it broke when Buster

00:10:43,330 --> 00:10:48,610
was released

00:10:45,130 --> 00:10:53,110
that was not entirely optimal I'm sorry

00:10:48,610 --> 00:10:55,150
that so what did we want to do with that

00:10:53,110 --> 00:10:58,660
we want to improve security

00:10:55,150 --> 00:10:59,920
like people could have and then in the

00:10:58,660 --> 00:11:02,380
middle attack that could have given you

00:10:59,920 --> 00:11:04,560
a stable update a stable repository when

00:11:02,380 --> 00:11:06,580
you were asking for stable security and

00:11:04,560 --> 00:11:13,390
revenge you from getting security

00:11:06,580 --> 00:11:16,180
updates this way and we also wanted to

00:11:13,390 --> 00:11:18,790
enhance pinning safety rights like a

00:11:16,180 --> 00:11:21,280
minor concern because if you specify if

00:11:18,790 --> 00:11:23,380
you pin packages like you say you pin by

00:11:21,280 --> 00:11:24,700
code name but in your source list value

00:11:23,380 --> 00:11:25,870
right testing and then the code name

00:11:24,700 --> 00:11:28,750
changes you're pinning would no longer

00:11:25,870 --> 00:11:31,390
work because it's now a different code

00:11:28,750 --> 00:11:33,250
name so if you have pasture if you have

00:11:31,390 --> 00:11:35,170
bus if you pin packages when Buster -

00:11:33,250 --> 00:11:37,900
919 you're perfect in your preferences

00:11:35,170 --> 00:11:39,190
file and you have testing and your

00:11:37,900 --> 00:11:42,160
source list file and testing becomes

00:11:39,190 --> 00:11:44,740
bullseye and obviously the pin is being

00:11:42,160 --> 00:11:48,970
ignored because in no longer applies to

00:11:44,740 --> 00:11:54,850
testing but it's now stable we could all

00:11:48,970 --> 00:11:57,730
right so that's suboptimal so I have a

00:11:54,850 --> 00:11:59,880
few ideas that could potentially help

00:11:57,730 --> 00:12:03,570
with these issues as well but are less

00:11:59,880 --> 00:12:06,580
invasive than the release info changes

00:12:03,570 --> 00:12:07,960
so for security we already have a

00:12:06,580 --> 00:12:10,000
warning of the distribution in the

00:12:07,960 --> 00:12:12,180
repository does not match the one we

00:12:10,000 --> 00:12:15,190
have configured in the sauce list file

00:12:12,180 --> 00:12:17,470
this did not really work for security

00:12:15,190 --> 00:12:20,650
very well because security had the same

00:12:17,470 --> 00:12:23,200
code name is stable but that was changed

00:12:20,650 --> 00:12:27,520
recently because now - security instead

00:12:23,200 --> 00:12:29,140
of slash updates so we could make that

00:12:27,520 --> 00:12:32,440
an error and prevent most of these

00:12:29,140 --> 00:12:34,750
problems and for pinning I was thinking

00:12:32,440 --> 00:12:39,370
maybe we can check if the pin matches

00:12:34,750 --> 00:12:41,050
entries and sauces list files but if it

00:12:39,370 --> 00:12:42,550
matches the file and it's pinning my

00:12:41,050 --> 00:12:46,930
code name and you have specified the

00:12:42,550 --> 00:12:49,450
sauce list entry by the suit name then

00:12:46,930 --> 00:12:52,630
we could say warning you have specified

00:12:49,450 --> 00:12:55,420
testing for the pin but Buster's in your

00:12:52,630 --> 00:12:57,610
sauce list file or full-size in your

00:12:55,420 --> 00:12:58,390
sauce list file then you could fix it

00:12:57,610 --> 00:13:01,830
and we

00:12:58,390 --> 00:13:07,900
prevent you from writing pins that break

00:13:01,830 --> 00:13:10,660
once and you say releases out but this

00:13:07,900 --> 00:13:12,340
is still being discussed so I got an

00:13:10,660 --> 00:13:15,790
email but I haven't read it yet because

00:13:12,340 --> 00:13:19,870
I had written the talk so we need to see

00:13:15,790 --> 00:13:24,070
what if this is okay if there are things

00:13:19,870 --> 00:13:26,290
missing and I'm sure we'll figure out a

00:13:24,070 --> 00:13:30,000
solution that's less in that's less

00:13:26,290 --> 00:13:30,000
problematic with the next stable release

00:13:30,840 --> 00:13:38,530
okay so now the news from D package in

00:13:34,090 --> 00:13:41,230
this case trigger loops we've seen a lot

00:13:38,530 --> 00:13:43,960
of trigger loops in Ubuntu upgrades but

00:13:41,230 --> 00:13:49,930
they were also I think a few and various

00:13:43,960 --> 00:13:51,070
Debian upgrading tool tests so you were

00:13:49,930 --> 00:13:53,110
in the middle of an upgrade and then

00:13:51,070 --> 00:13:58,330
would say Oh triggers looping aborting

00:13:53,110 --> 00:14:02,080
and this was really annoying and since

00:13:58,330 --> 00:14:03,970
the package 1.9 18.7 I think most of

00:14:02,080 --> 00:14:05,950
that should be fixed so triggers should

00:14:03,970 --> 00:14:10,210
no longer be looping in the bottom your

00:14:05,950 --> 00:14:13,930
upgrades rootless bills are possible now

00:14:10,210 --> 00:14:16,270
there's the new rules require root field

00:14:13,930 --> 00:14:20,620
and Debian control you can set to no and

00:14:16,270 --> 00:14:22,660
then it builds without root and starts

00:14:20,620 --> 00:14:28,720
up Damon learn the new system D

00:14:22,660 --> 00:14:31,270
readiness protocol sure thing is nice D

00:14:28,720 --> 00:14:36,130
package perl modules are in CPAN now or

00:14:31,270 --> 00:14:41,080
Sipan there's some improvements for

00:14:36,130 --> 00:14:44,290
cross compilation support and finally a

00:14:41,080 --> 00:14:47,500
warning if you're using the D package

00:14:44,290 --> 00:14:50,740
database that is to the database to be

00:14:47,500 --> 00:14:52,440
considered private so if you use it you

00:14:50,740 --> 00:14:55,120
will break eventually

00:14:52,440 --> 00:14:58,180
one thing that's being blocked that's

00:14:55,120 --> 00:15:02,530
blocking this is one thing that's

00:14:58,180 --> 00:15:03,820
blocking various improvements because we

00:15:02,530 --> 00:15:06,250
have a lot of packages that will break

00:15:03,820 --> 00:15:09,400
for example if we add the meta data

00:15:06,250 --> 00:15:10,660
tracking for install files so currently

00:15:09,400 --> 00:15:12,100
we just have a list of the installed

00:15:10,660 --> 00:15:14,589
files and maybe we have left

00:15:12,100 --> 00:15:17,560
five some file but the plan is to have

00:15:14,589 --> 00:15:19,779
like a full tree of install files for

00:15:17,560 --> 00:15:22,110
each package and register hash terms and

00:15:19,779 --> 00:15:24,220
like extended attributes and stuff and

00:15:22,110 --> 00:15:25,690
that's being blocked because it will

00:15:24,220 --> 00:15:27,759
change the database layout and that's

00:15:25,690 --> 00:15:29,560
breaking a lot of packages right now so

00:15:27,759 --> 00:15:32,800
we really need to fix those packages so

00:15:29,560 --> 00:15:35,560
we can move forward with new features

00:15:32,800 --> 00:15:42,910
for deep package that need database

00:15:35,560 --> 00:15:47,560
layout changes so let's talk a bit about

00:15:42,910 --> 00:15:49,870
app - what do we want like what would we

00:15:47,560 --> 00:15:54,759
want in a major release what are our

00:15:49,870 --> 00:15:58,180
feature wish list basically so one thing

00:15:54,759 --> 00:16:03,339
I always want is patterns so we can say

00:15:58,180 --> 00:16:06,220
like purge all config files I could like

00:16:03,339 --> 00:16:08,529
search by description search by version

00:16:06,220 --> 00:16:11,410
or search by search package sauce

00:16:08,529 --> 00:16:14,560
package that would be really nice

00:16:11,410 --> 00:16:17,230
because it enables you to like do a lot

00:16:14,560 --> 00:16:19,360
of more complex app installs or removals

00:16:17,230 --> 00:16:21,790
on the command line without having to

00:16:19,360 --> 00:16:24,819
like app lists or like app search or

00:16:21,790 --> 00:16:26,470
deep package L something and then pipe

00:16:24,819 --> 00:16:32,199
it through various stuff and then X

00:16:26,470 --> 00:16:34,389
actually - apt and of course if we have

00:16:32,199 --> 00:16:37,120
patterns we can also pin by pattern so

00:16:34,389 --> 00:16:40,240
you could like pin packages that start

00:16:37,120 --> 00:16:41,949
with an A and with a Z and like have

00:16:40,240 --> 00:16:45,160
version that starts with one or

00:16:41,949 --> 00:16:50,139
something like that you could do all

00:16:45,160 --> 00:16:51,779
kinds of weird pinning with that yeah I

00:16:50,139 --> 00:16:54,519
started working on that by

00:16:51,779 --> 00:16:56,980
reconstructing the syntax tree that T -

00:16:54,519 --> 00:17:01,449
it has I haven't I haven't finished it

00:16:56,980 --> 00:17:03,790
yet but I hope I can still finish it and

00:17:01,449 --> 00:17:05,530
implement it probably not all of the

00:17:03,790 --> 00:17:08,370
features because some of it requires its

00:17:05,530 --> 00:17:11,140
avian database or something like that so

00:17:08,370 --> 00:17:13,329
maybe we should be extensible so you can

00:17:11,140 --> 00:17:16,569
like have aptitude install a plugin that

00:17:13,329 --> 00:17:22,919
adds like saved in database lookups or

00:17:16,569 --> 00:17:28,089
other features to this it would be nice

00:17:22,919 --> 00:17:30,970
another thing is pinning and upgrading

00:17:28,089 --> 00:17:32,530
my sauce package like if we get patterns

00:17:30,970 --> 00:17:34,419
we would already get pinning it

00:17:32,530 --> 00:17:38,860
upgrading my sauce package it might be a

00:17:34,419 --> 00:17:40,630
bit slow so I would like to introduce I

00:17:38,860 --> 00:17:42,549
would like to modify apps cache so you

00:17:40,630 --> 00:17:45,280
can audit you can look at binary

00:17:42,549 --> 00:17:48,160
packages by the sauce package and then

00:17:45,280 --> 00:17:51,730
it would be fast and then you can easily

00:17:48,160 --> 00:17:54,669
pin packages by sauce packages or you

00:17:51,730 --> 00:17:56,740
could potentially also say upgrade

00:17:54,669 --> 00:17:59,049
should always come should always be the

00:17:56,740 --> 00:18:02,020
same version for all packages in the

00:17:59,049 --> 00:18:03,789
sauce package so like it won't upgrade

00:18:02,020 --> 00:18:06,190
your pack the architecture all package

00:18:03,789 --> 00:18:10,659
if your architecture any package is not

00:18:06,190 --> 00:18:11,850
ready yet it's not built yet and that I

00:18:10,659 --> 00:18:14,980
think would be useful it's a feature

00:18:11,850 --> 00:18:16,690
people really want I think a lot of

00:18:14,980 --> 00:18:19,270
places because it makes upgrading easier

00:18:16,690 --> 00:18:22,650
if all versions of the binaries in the

00:18:19,270 --> 00:18:22,650
sauce package are the same version

00:18:23,970 --> 00:18:31,870
finally a better solver I'm sure some of

00:18:29,650 --> 00:18:35,260
you know that I started working on a

00:18:31,870 --> 00:18:40,360
solver last year in summer it was a few

00:18:35,260 --> 00:18:45,429
nights it was called Carl l kind of lost

00:18:40,360 --> 00:18:47,620
interest and one one difficulty was to

00:18:45,429 --> 00:18:49,630
preserve some creaminess aspects like if

00:18:47,620 --> 00:18:54,280
you have a package that depends on A or

00:18:49,630 --> 00:18:56,230
B you want it to install a unless B is

00:18:54,280 --> 00:18:58,450
already installed that's a bit hard if

00:18:56,230 --> 00:19:01,720
you have really optimizing solver that

00:18:58,450 --> 00:19:05,020
works globally so that's something that

00:19:01,720 --> 00:19:07,240
has to be worked on final thing was

00:19:05,020 --> 00:19:10,090
mandatory in release files I recently

00:19:07,240 --> 00:19:11,710
proposed that but there are some open

00:19:10,090 --> 00:19:13,630
questions like what do we do about

00:19:11,710 --> 00:19:20,080
unsigned repositories do we still care

00:19:13,630 --> 00:19:23,260
about them and what should we make

00:19:20,080 --> 00:19:27,190
signatures require signatures for all

00:19:23,260 --> 00:19:29,169
non real sorry if we make the mandatory

00:19:27,190 --> 00:19:32,559
we would also require signatures for all

00:19:29,169 --> 00:19:33,940
non release files which improves things

00:19:32,559 --> 00:19:37,150
because we no longer need to guess which

00:19:33,940 --> 00:19:38,559
files exist and I'm a bit concerned

00:19:37,150 --> 00:19:40,240
about box that we have in the current

00:19:38,559 --> 00:19:44,020
side two unsigned fallback because it's

00:19:40,240 --> 00:19:46,179
like code split across parts and if

00:19:44,020 --> 00:19:48,520
there's a back we could potentially like

00:19:46,179 --> 00:19:51,280
end up treating a signed repository or

00:19:48,520 --> 00:19:52,540
an unsigned repository assigned or

00:19:51,280 --> 00:19:55,080
something like that

00:19:52,540 --> 00:19:59,820
but not show you how to proceed because

00:19:55,080 --> 00:20:01,270
it breaks a lot of things probably and

00:19:59,820 --> 00:20:04,080
that's it

00:20:01,270 --> 00:20:04,080
any questions

00:20:05,890 --> 00:20:13,769
[Applause]

00:20:15,610 --> 00:20:21,909
there is a question or maybe a boo oh

00:20:24,220 --> 00:20:29,149
it's a bit more like and I want a pony

00:20:26,890 --> 00:20:30,590
wishlist kind of thing but something

00:20:29,149 --> 00:20:33,350
that I'm jealous of when I use Fedora

00:20:30,590 --> 00:20:35,299
from time to time is that you can save

00:20:33,350 --> 00:20:36,980
for example give me the package that

00:20:35,299 --> 00:20:40,940
provides me with this PC file or this

00:20:36,980 --> 00:20:42,409
gstreamer yeah codec thing which you can

00:20:40,940 --> 00:20:43,880
also do with package get in Debian and

00:20:42,409 --> 00:20:48,169
stuff as well but I mean it's kind of

00:20:43,880 --> 00:20:49,909
hackish so basically my pony is come can

00:20:48,169 --> 00:20:51,860
that be on an apt wishlist I don't

00:20:49,909 --> 00:20:54,620
expect you to work I want a reasonable

00:20:51,860 --> 00:20:57,440
feature to even ask for yeah I want to

00:20:54,620 --> 00:20:59,179
move that from package get chapped so we

00:20:57,440 --> 00:21:02,539
can easily query for code eggs and

00:20:59,179 --> 00:21:09,980
package graphics often like anything we

00:21:02,539 --> 00:21:12,190
have an app stream other questions or

00:21:09,980 --> 00:21:12,190
comments

00:21:20,680 --> 00:21:27,410
this is a request a app file for

00:21:25,010 --> 00:21:30,110
searching through the entire archive

00:21:27,410 --> 00:21:33,320
when they're looking for some obscure

00:21:30,110 --> 00:21:37,840
binary would be really useful if it was

00:21:33,320 --> 00:21:41,180
apps base file so it's more of a request

00:21:37,840 --> 00:21:45,080
to add that feature and maybe an RPM or

00:21:41,180 --> 00:21:46,700
an RF read the manual question is on app

00:21:45,080 --> 00:21:50,390
search at some point you know it's

00:21:46,700 --> 00:21:52,160
multi-line output now is there just a

00:21:50,390 --> 00:21:57,260
simple way they have it still be single

00:21:52,160 --> 00:22:00,500
line output in that I think there's an

00:21:57,260 --> 00:22:04,370
option for the single line output but I

00:22:00,500 --> 00:22:12,520
don't know it so you probably want to

00:22:04,370 --> 00:22:15,350
read like app that conf man page sorry I

00:22:12,520 --> 00:22:17,360
think we should close because we're

00:22:15,350 --> 00:22:19,220
slightly over time thank you again

00:22:17,360 --> 00:22:21,240
Julian thank you for your work and thank

00:22:19,220 --> 00:22:23,170
you everybody for coming

00:22:21,240 --> 00:22:26,299
[Applause]

00:22:23,170 --> 00:22:26,299

YouTube URL: https://www.youtube.com/watch?v=1gwzfPPbXZA


