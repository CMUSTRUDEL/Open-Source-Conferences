Title: InterIMAP — The case for local IMAP servers and fast bidirectional synchronization
Publication date: 2019-08-07
Playlist: DebConf 19
Description: 
	by Guilhem Moulin

At: DebConf19
https://debconf19.debconf.org/talks/78-interimap-the-case-for-local-imap-servers-and-fast-bidirectional-synchronization/

It is common to find local `sendmail(1)`-compatible Mail Transport Agent on workstations, usually configured as nullmailer (relay-only) to a remote submission agent.  However finding a local IMAP server seems less common.  Instead a typical desktop Mail User Agent implements the full mail stack, from storage to rendering/edition, via custom caching, threading, searching, and notification mechanisms.

I will argue for local IMAP servers in order to reduce latency and enable offline mode with _thin clients_: such a client conforms to the UNIX philosophy as it takes care of rendering and nothing else, and relies on the underlying IMAP server for [searches](https://tools.ietf.org/html/rfc3501#section-6.4.4 "The IMAP SEARCH Command"), [sorting/threading](https://tools.ietf.org/html/rfc5256 "The IMAP SORT and THREAD Extensions"), [notification](https://tools.ietf.org/html/rfc5465 "The IMAP NOTIFY Extension") as well as storage (including caching). Such solution is fully compositional as it relies on documented protocols (namely [IMAP4rev1 and its extensions](https://tools.ietf.org/html/rfc3501 "IMAP4rev1")) for the gluing part.

That leaves the problem of synchronization between multiple devices (and/or IMAP accounts), in arbitrary topologies.  There again IMAP comes to the rescue with its [QRESYNC extension](https://tools.ietf.org/html/rfc7162 "The IMAP CONDSTORE and QRESYNC Extensions"), which enables stateful and efficient bi-directional synchronization between two IMAP4rev1 servers. I will briefly present such a synchronization program, [InterIMAP](https://tracker.debian.org/pkg/interimap "InterIMAP"), and show a few benchmark metrics to justify its presence in the ecosystem and compare with so-called “full” synchronization solutions.

Room: Miniauditório
Scheduled start: 2019-07-22 14:00:00
Captions: 
	00:00:04,580 --> 00:00:10,309
next speaker is Jerome and he's speaking

00:00:07,880 --> 00:00:11,870
about inter IMAP the case for local IMAP

00:00:10,309 --> 00:00:12,889
service and fast bi-directional

00:00:11,870 --> 00:00:15,860
synchronization

00:00:12,889 --> 00:00:18,020
thank you very much below thanks yeah so

00:00:15,860 --> 00:00:21,590
today I would like to talk about mail so

00:00:18,020 --> 00:00:25,300
now I know that like everyone has their

00:00:21,590 --> 00:00:25,300
own may workflow and it tend to be very

00:00:25,360 --> 00:00:31,760
like Oh communicate about it and so am I

00:00:29,150 --> 00:00:34,100
so I don't like I don't want this talk

00:00:31,760 --> 00:00:36,199
to be to become like a flame or

00:00:34,100 --> 00:00:38,030
something but I found a bit of things in

00:00:36,199 --> 00:00:41,020
my quest for mail workflow and I would

00:00:38,030 --> 00:00:41,020
like to share it with you

00:00:41,110 --> 00:00:45,500
so they'll bunch of ways you can access

00:00:43,579 --> 00:00:48,500
your mail storage so the simplest way of

00:00:45,500 --> 00:00:51,140
course is to use web mail through your

00:00:48,500 --> 00:00:52,700
favorite web browser it's very easy you

00:00:51,140 --> 00:00:54,920
have nothing to install beside the web

00:00:52,700 --> 00:00:58,370
browser itself and the configuration is

00:00:54,920 --> 00:01:00,680
often handled by the webmail provider so

00:00:58,370 --> 00:01:04,909
you don't need to it's shared across all

00:01:00,680 --> 00:01:06,530
your devices and super easy on the other

00:01:04,909 --> 00:01:07,909
hand Latin seek and your problems you

00:01:06,530 --> 00:01:10,999
have a slow internet connection of

00:01:07,909 --> 00:01:12,649
course and the offline access is also a

00:01:10,999 --> 00:01:20,479
problem so you cannot access it from

00:01:12,649 --> 00:01:22,729
your connection so well people who want

00:01:20,479 --> 00:01:25,639
to have like your site improve their

00:01:22,729 --> 00:01:27,859
email workflow productivity tend to use

00:01:25,639 --> 00:01:31,039
a local on a client instead like

00:01:27,859 --> 00:01:34,999
Thunderbird or something like this so a

00:01:31,039 --> 00:01:36,920
pro here is that configuration and

00:01:34,999 --> 00:01:39,020
environment can be like it's more

00:01:36,920 --> 00:01:43,009
flexible you can find you need to you

00:01:39,020 --> 00:01:44,990
for your needs and also if you have like

00:01:43,009 --> 00:01:46,819
a work account and a personal account

00:01:44,990 --> 00:01:49,609
you can use the same client for both of

00:01:46,819 --> 00:01:51,619
them that's kind of convenient on the

00:01:49,609 --> 00:01:53,959
other hand latency is still a problem at

00:01:51,619 --> 00:01:57,169
least unless the client has some kind of

00:01:53,959 --> 00:02:00,289
fancy caching mechanism in place and

00:01:57,169 --> 00:02:02,529
again the offline access is still a

00:02:00,289 --> 00:02:02,529
problem

00:02:03,039 --> 00:02:07,430
ok so personally I want or fan access to

00:02:06,109 --> 00:02:11,420
my

00:02:07,430 --> 00:02:13,970
- my males and I also want to make to be

00:02:11,420 --> 00:02:16,810
on the drive itself for the offline

00:02:13,970 --> 00:02:19,250
access and also for reducing the latency

00:02:16,810 --> 00:02:21,020
so a common solution for that which is

00:02:19,250 --> 00:02:22,610
quite popular is to use IMAP to mail

00:02:21,020 --> 00:02:26,120
your second edition something like often

00:02:22,610 --> 00:02:29,120
IMAP and where you like every single

00:02:26,120 --> 00:02:32,150
mail on the remote IMAP server is

00:02:29,120 --> 00:02:36,140
synchronize locally on major storage and

00:02:32,150 --> 00:02:40,330
you can point your mail clients to this

00:02:36,140 --> 00:02:42,290
mega storage and well it provides

00:02:40,330 --> 00:02:44,990
offline access of course because the

00:02:42,290 --> 00:02:45,890
major on the drive the latency is it's

00:02:44,990 --> 00:02:48,709
pretty fast

00:02:45,890 --> 00:02:52,459
that's great on the other hand

00:02:48,709 --> 00:02:59,209
unfortunately it does not scale really

00:02:52,459 --> 00:03:02,420
and it kind of strange the network in in

00:02:59,209 --> 00:03:04,580
a fairly bad way so one thing I should

00:03:02,420 --> 00:03:07,010
say is that if I want if I'm going to

00:03:04,580 --> 00:03:09,890
synchronize my mails I want to do it

00:03:07,010 --> 00:03:12,440
quite often so that when you send me an

00:03:09,890 --> 00:03:14,570
email and it's being delivered to my lab

00:03:12,440 --> 00:03:17,150
and my mail provider I want to be able

00:03:14,570 --> 00:03:21,500
to almost immediately access it from my

00:03:17,150 --> 00:03:25,190
computer so like I want to do it often

00:03:21,500 --> 00:03:27,080
and between the things I normally don't

00:03:25,190 --> 00:03:28,550
get if I'm gonna sink every couple of

00:03:27,080 --> 00:03:30,530
minutes I don't normally don't get one

00:03:28,550 --> 00:03:32,870
thousand miles between those two between

00:03:30,530 --> 00:03:34,760
those few minutes so ideally the

00:03:32,870 --> 00:03:36,230
synchronization should be quite fast and

00:03:34,760 --> 00:03:38,420
quite smooth but it's really not the

00:03:36,230 --> 00:03:42,230
case with often a lab setting and this

00:03:38,420 --> 00:03:45,790
is like a simple benchmark I have like

00:03:42,230 --> 00:03:49,519
less than 100 mailboxes about 700 K and

00:03:45,790 --> 00:03:51,049
it's they're all in sync so like it's

00:03:49,519 --> 00:03:53,049
really a dry run there is nothing to do

00:03:51,049 --> 00:04:00,019
and nothing to download just checking

00:03:53,049 --> 00:04:02,239
and well yet there is over 35 Meg's of

00:04:00,019 --> 00:04:06,920
Anna traffic if you are lucky enough to

00:04:02,239 --> 00:04:08,900
have an observer that has support for

00:04:06,920 --> 00:04:11,830
compression you can break that down to

00:04:08,900 --> 00:04:11,830
about five Meg's

00:04:12,430 --> 00:04:18,400
but even five Meg's together with a

00:04:15,730 --> 00:04:20,079
running time of over one minute that's

00:04:18,400 --> 00:04:21,880
not something I can afford if I'm on the

00:04:20,079 --> 00:04:27,669
slow slow connection like you know

00:04:21,880 --> 00:04:29,320
trying or something like this and so

00:04:27,669 --> 00:04:31,120
okay why why does it scale

00:04:29,320 --> 00:04:33,160
so one thing we observe is that when we

00:04:31,120 --> 00:04:35,050
open the mailbox like in a media format

00:04:33,160 --> 00:04:37,240
the first thing it travels this

00:04:35,050 --> 00:04:41,289
directory to like to see if there are

00:04:37,240 --> 00:04:44,169
any new like files because the nails are

00:04:41,289 --> 00:04:46,960
stored as individual files and this is

00:04:44,169 --> 00:04:48,370
this tends to be pretty slow and the

00:04:46,960 --> 00:04:51,250
solution I would like to propose here is

00:04:48,370 --> 00:04:54,580
to install a local IMAP server like

00:04:51,250 --> 00:04:57,940
dovecot between the mail client and the

00:04:54,580 --> 00:05:02,139
mail storage and let that an observer

00:04:57,940 --> 00:05:04,810
manage the cash so you never access the

00:05:02,139 --> 00:05:07,590
main storage media or whatever directly

00:05:04,810 --> 00:05:14,620
you only do it through the owner plans

00:05:07,590 --> 00:05:17,650
and so in fact I have a dovecote

00:05:14,620 --> 00:05:20,590
installation on my laptop here at Def

00:05:17,650 --> 00:05:22,840
Con and well one can one could argue

00:05:20,590 --> 00:05:26,590
that this is a bit overkill to have an

00:05:22,840 --> 00:05:29,979
app installation on own like single user

00:05:26,590 --> 00:05:32,940
a laptop but I would say that Deb young

00:05:29,979 --> 00:05:36,280
by default comes with an MTA in the

00:05:32,940 --> 00:05:41,889
mailer mode and it's really no different

00:05:36,280 --> 00:05:44,380
than that and I would also say that this

00:05:41,889 --> 00:05:46,060
kind of like abstracting the mail

00:05:44,380 --> 00:05:51,940
storage over really fills the UNIX

00:05:46,060 --> 00:05:54,010
philosophy because you like the only job

00:05:51,940 --> 00:05:56,710
of the mail client becomes two rounded

00:05:54,010 --> 00:05:59,199
nails everything else like the like to

00:05:56,710 --> 00:06:02,380
search the caching logic the sorting of

00:05:59,199 --> 00:06:05,710
threading whatever is is done by the

00:06:02,380 --> 00:06:07,630
IMAP server and writing mail is done by

00:06:05,710 --> 00:06:11,020
your favorite editor and sending the

00:06:07,630 --> 00:06:17,710
mail is done by san mail or by SMTP or

00:06:11,020 --> 00:06:20,260
something and so actually a neat thing

00:06:17,710 --> 00:06:22,570
is that okay I have dog got install I

00:06:20,260 --> 00:06:24,039
don't even need to have the dovecot

00:06:22,570 --> 00:06:24,780
process on the other hand is not even

00:06:24,039 --> 00:06:27,900
installed

00:06:24,780 --> 00:06:32,280
not even running so I use UNIX

00:06:27,900 --> 00:06:40,950
permissions and UNIX domain circuits to

00:06:32,280 --> 00:06:44,580
connect between the between whoops

00:06:40,950 --> 00:06:48,570
between the storage and between the mail

00:06:44,580 --> 00:06:50,580
client and I'm observer but it's

00:06:48,570 --> 00:06:52,260
completely isolated from the network so

00:06:50,580 --> 00:06:53,730
there is nothing bound to other any or

00:06:52,260 --> 00:06:58,260
anything like this not even to the

00:06:53,730 --> 00:06:59,760
loopback interface anyway so in a

00:06:58,260 --> 00:07:01,410
picture what I would like to suggest is

00:06:59,760 --> 00:07:02,940
to move from the left hand side into the

00:07:01,410 --> 00:07:05,310
right hand side so in the left hand side

00:07:02,940 --> 00:07:06,810
you have like two mail clients you like

00:07:05,310 --> 00:07:08,610
milestone the world wherever and then

00:07:06,810 --> 00:07:11,760
the test status bar that reads the

00:07:08,610 --> 00:07:14,130
number of unread mails and they are both

00:07:11,760 --> 00:07:15,840
pointing they are both reading what you

00:07:14,130 --> 00:07:17,370
have in your mail your storage and then

00:07:15,840 --> 00:07:23,100
you have some synchronization solution

00:07:17,370 --> 00:07:26,610
like offline and map and what I would

00:07:23,100 --> 00:07:28,620
like to move to into like teaching the

00:07:26,610 --> 00:07:32,010
Anna protocol for the status bar and the

00:07:28,620 --> 00:07:33,690
mail client and then use a

00:07:32,010 --> 00:07:35,910
bi-directional IMAP synchronization

00:07:33,690 --> 00:07:38,880
instead of melia to one absurd condition

00:07:35,910 --> 00:07:43,350
there and the the mail storage itself is

00:07:38,880 --> 00:07:44,640
abstracted over and you don't access it

00:07:43,350 --> 00:07:51,450
directly you only see it through the

00:07:44,640 --> 00:07:54,530
onions so quit match Park with not so we

00:07:51,450 --> 00:07:59,669
should test benchmark like 50km ails

00:07:54,530 --> 00:08:01,860
mailbox about two hundred Meg's and I

00:07:59,669 --> 00:08:04,590
try to open the mailbox and do some

00:08:01,860 --> 00:08:07,140
searches first we made here and media

00:08:04,590 --> 00:08:10,110
with a header cache on and then with I'm

00:08:07,140 --> 00:08:12,090
not so there is a bit of overhead so the

00:08:10,110 --> 00:08:15,120
second lookup is a lot faster than the

00:08:12,090 --> 00:08:18,710
first one because thanks to caching so

00:08:15,120 --> 00:08:21,870
caching either by Matt or by dovecot

00:08:18,710 --> 00:08:24,240
dovecot is slightly slower except for

00:08:21,870 --> 00:08:28,310
the research by message ID

00:08:24,240 --> 00:08:30,720
I guess because Matt does not index that

00:08:28,310 --> 00:08:34,530
well I would say the overhead is still

00:08:30,720 --> 00:08:36,950
okay and I mean not is not really the

00:08:34,530 --> 00:08:39,470
most clever underground areas so when

00:08:36,950 --> 00:08:41,210
open the mailbox if you have 50 kms on

00:08:39,470 --> 00:08:42,650
that mailbox it's gonna download all the

00:08:41,210 --> 00:08:44,210
headers for all the mail in the mailbox

00:08:42,650 --> 00:08:45,890
while of course you only need what's

00:08:44,210 --> 00:08:48,470
going to be shown on screen so it could

00:08:45,890 --> 00:08:53,420
have a lot clever more clever logic and

00:08:48,470 --> 00:08:55,700
if you are using the protocol via netcat

00:08:53,420 --> 00:08:57,860
or anything you can have like much

00:08:55,700 --> 00:09:00,500
faster lookup so there is some room so

00:08:57,860 --> 00:09:01,700
improving the the overhead is still okay

00:09:00,500 --> 00:09:03,410
I would say and if you have a smaller

00:09:01,700 --> 00:09:06,230
mailbox it's really become very

00:09:03,410 --> 00:09:08,390
negligible on the other hand the IMAP

00:09:06,230 --> 00:09:09,440
signal protocol is really not quite

00:09:08,390 --> 00:09:12,440
optimized for bi-directional

00:09:09,440 --> 00:09:14,870
synchronization so the only way like the

00:09:12,440 --> 00:09:18,440
only pure unlap way of having binational

00:09:14,870 --> 00:09:21,200
synchronization is okay you select two

00:09:18,440 --> 00:09:23,570
mailboxes and you list all the Mail's

00:09:21,200 --> 00:09:28,760
together with the flags locally remotely

00:09:23,570 --> 00:09:31,670
you compare them and and and then you

00:09:28,760 --> 00:09:33,650
think you guys any difference so it's

00:09:31,670 --> 00:09:35,840
very slow and this is this is not

00:09:33,650 --> 00:09:38,570
current it does not solve the network

00:09:35,840 --> 00:09:41,180
access issue that I shown before

00:09:38,570 --> 00:09:45,200
and fortunately for us there is this

00:09:41,180 --> 00:09:46,240
very neat extension that was there's an

00:09:45,200 --> 00:09:50,080
RFC

00:09:46,240 --> 00:09:52,370
published in 2014 called queue quick

00:09:50,080 --> 00:09:54,290
mailbox resynchronization and

00:09:52,370 --> 00:09:56,770
essentially what these does that each

00:09:54,290 --> 00:10:00,730
mailbox is associated with

00:09:56,770 --> 00:10:04,510
ever-increasing 63 bits mode sequence

00:10:00,730 --> 00:10:07,370
and that increases whenever you have

00:10:04,510 --> 00:10:12,550
like whenever you have changes so like a

00:10:07,370 --> 00:10:15,470
new mail flag updates deletion whatever

00:10:12,550 --> 00:10:18,680
and the highest mode sequence of a

00:10:15,470 --> 00:10:20,630
mailbox is given up on select and it's

00:10:18,680 --> 00:10:22,880
available at constant time so that means

00:10:20,630 --> 00:10:25,040
this is really cool because that means

00:10:22,880 --> 00:10:29,300
for to see if your mailbox has any

00:10:25,040 --> 00:10:31,880
change at all instead of instead of like

00:10:29,300 --> 00:10:33,290
downloading the flags and a unique

00:10:31,880 --> 00:10:36,530
identifier of all your mails

00:10:33,290 --> 00:10:38,480
it's a one things one thing and it's

00:10:36,530 --> 00:10:40,220
given in constant time it becomes linear

00:10:38,480 --> 00:10:42,890
in the most mailboxes and instead of

00:10:40,220 --> 00:10:44,450
being in now in a number of mails and of

00:10:42,890 --> 00:10:46,550
course you have where more males than

00:10:44,450 --> 00:10:49,030
you have the mailboxes and this is where

00:10:46,550 --> 00:10:51,760
interim of interest

00:10:49,030 --> 00:10:53,650
so in turn map is the solution that at

00:10:51,760 --> 00:10:56,350
least is my solution like this offline

00:10:53,650 --> 00:11:00,250
IMAP replacement for servers that do

00:10:56,350 --> 00:11:02,470
support Curie sync and the the the

00:11:00,250 --> 00:11:05,580
benchmark is really quite spectacular so

00:11:02,470 --> 00:11:09,040
again like less than 100 my mailboxes

00:11:05,580 --> 00:11:12,550
700k mails the running time is brought

00:11:09,040 --> 00:11:15,070
from over one minute to under one second

00:11:12,550 --> 00:11:18,520
and remember the remotes IMAP traffic

00:11:15,070 --> 00:11:21,220
the we receive there was thirty five

00:11:18,520 --> 00:11:22,510
Meg's now it's brought to about 10k and

00:11:21,220 --> 00:11:25,510
if you compress that you can bring that

00:11:22,510 --> 00:11:31,390
you can divide that by four again and in

00:11:25,510 --> 00:11:34,510
fact it's it's so fast that I mean now

00:11:31,390 --> 00:11:36,010
unlike the previous matrix the TCP and

00:11:34,510 --> 00:11:38,190
SSL overhead as well as the

00:11:36,010 --> 00:11:42,760
authentication becomes quite significant

00:11:38,190 --> 00:11:44,080
because well you're gonna connect to the

00:11:42,760 --> 00:11:46,270
remote IMAP server so you're going to

00:11:44,080 --> 00:11:49,240
have a tcp 3 on track and then SSL

00:11:46,270 --> 00:11:51,190
handshake and then you're going to

00:11:49,240 --> 00:11:54,010
authenticate to an observer all this

00:11:51,190 --> 00:11:57,430
pretty slow and also for compression of

00:11:54,010 --> 00:11:59,830
course if you like the more data you

00:11:57,430 --> 00:12:01,720
have the more deflate algorithm will be

00:11:59,830 --> 00:12:02,440
clever because you can reuse the

00:12:01,720 --> 00:12:05,560
previous

00:12:02,440 --> 00:12:06,910
dictionary it had so it makes quite it

00:12:05,560 --> 00:12:12,130
makes a lot of sense to have like a

00:12:06,910 --> 00:12:16,900
demon mode and so this does work so you

00:12:12,130 --> 00:12:19,930
can you can sorry like this watch that -

00:12:16,900 --> 00:12:23,710
- protocol 5 it means like you pull the

00:12:19,930 --> 00:12:24,580
server every 5 seconds which maybe is

00:12:23,710 --> 00:12:26,560
were killed I don't know

00:12:24,580 --> 00:12:27,880
but so every 5 seconds you query the

00:12:26,560 --> 00:12:31,030
server said you haven't changed you

00:12:27,880 --> 00:12:32,710
haven't changed and so on and but you

00:12:31,030 --> 00:12:35,050
could keep the connection open so yeah

00:12:32,710 --> 00:12:38,910
there is a you like there's no overhead

00:12:35,050 --> 00:12:41,110
anymore for the TCP and SSL overhead and

00:12:38,910 --> 00:12:42,760
authentication also and the deflate

00:12:41,110 --> 00:12:45,640
compression dictionary can be shared

00:12:42,760 --> 00:12:46,540
across all the calls so i synchronize

00:12:45,640 --> 00:12:48,460
every 5 seconds

00:12:46,540 --> 00:12:51,940
I killed the process of the flowers to

00:12:48,460 --> 00:12:54,370
measure the network traffic and well it

00:12:51,940 --> 00:12:56,830
was less than one one one of

00:12:54,370 --> 00:13:00,710
synchronization with a final map so I

00:12:56,830 --> 00:13:03,890
sent I received about 20k

00:13:00,710 --> 00:13:06,680
twenty-five bit late and fell 13

00:13:03,890 --> 00:13:08,390
megabytes with compresses very well and

00:13:06,680 --> 00:13:12,290
the reason why it compresses very well

00:13:08,390 --> 00:13:13,580
is because well like all these accesses

00:13:12,290 --> 00:13:14,630
are the signs like it's like every five

00:13:13,580 --> 00:13:16,220
seconds do you have any change do you

00:13:14,630 --> 00:13:18,410
have any chance and it's most of the

00:13:16,220 --> 00:13:19,250
times and response so it compresses very

00:13:18,410 --> 00:13:22,130
well

00:13:19,250 --> 00:13:25,400
so although like for in five hours I had

00:13:22,130 --> 00:13:28,640
like I liked over I had less than one

00:13:25,400 --> 00:13:29,990
leg which is quite rate if you are in a

00:13:28,640 --> 00:13:33,200
slow connection in the trying something

00:13:29,990 --> 00:13:35,480
and we can even do better with some

00:13:33,200 --> 00:13:38,270
other extension called notify

00:13:35,480 --> 00:13:41,750
it's a bit like idling for multiple

00:13:38,270 --> 00:13:43,250
mailboxes unfortunately I found that the

00:13:41,750 --> 00:13:45,800
dovecot implementation of this extension

00:13:43,250 --> 00:13:47,980
is a bit buggy so the entire map

00:13:45,800 --> 00:13:52,340
implementation is also a bit clunky

00:13:47,980 --> 00:13:54,290
anyway it has a bunch of well I'm just

00:13:52,340 --> 00:13:57,140
playing some feature here it has support

00:13:54,290 --> 00:13:59,180
for I need circuits and also you can use

00:13:57,140 --> 00:14:00,920
if you want if you don't want to use SSL

00:13:59,180 --> 00:14:02,990
for transport you want to use this sh or

00:14:00,920 --> 00:14:06,440
something like this this also works via

00:14:02,990 --> 00:14:08,030
pipes or a name socket bells it has as I

00:14:06,440 --> 00:14:10,970
said support for the IMAP confess it

00:14:08,030 --> 00:14:13,940
extension which is really great for demo

00:14:10,970 --> 00:14:16,370
mode and a bunch of other exemptions I'm

00:14:13,940 --> 00:14:19,520
going to go through one thing which is a

00:14:16,370 --> 00:14:21,260
bit anecdotic all is the native socks5

00:14:19,520 --> 00:14:23,180
support so you don't need if you want to

00:14:21,260 --> 00:14:27,620
access your mail via at all you don't

00:14:23,180 --> 00:14:29,090
need this LD preload hack and also it

00:14:27,620 --> 00:14:31,220
can be used to synchronize multiple

00:14:29,090 --> 00:14:33,850
mailboxes multiple accounts like your

00:14:31,220 --> 00:14:36,260
work account and your personal account

00:14:33,850 --> 00:14:40,400
onto to default nine spaces on the same

00:14:36,260 --> 00:14:43,070
local IMAP server that you can read

00:14:40,400 --> 00:14:45,230
using the same very same not it's

00:14:43,070 --> 00:14:48,110
licensed under the GPL 3 and now further

00:14:45,230 --> 00:14:49,550
like I've been not so shiny things there

00:14:48,110 --> 00:14:52,280
is no easy way to migrate

00:14:49,550 --> 00:14:54,500
if you have an existing mail dear to Ana

00:14:52,280 --> 00:14:56,180
pair you cannot migrate that easily to

00:14:54,500 --> 00:14:59,630
entire map you need to redownload

00:14:56,180 --> 00:15:02,090
everything because internet needs to

00:14:59,630 --> 00:15:03,800
know i mean to have this unique

00:15:02,090 --> 00:15:08,970
identifier association so it keeps track

00:15:03,800 --> 00:15:11,280
of it in its database and if you

00:15:08,970 --> 00:15:12,570
I mean yeah it needs to work read the

00:15:11,280 --> 00:15:14,520
database that the people I do database

00:15:12,570 --> 00:15:16,410
you need to like wipe one hand and reach

00:15:14,520 --> 00:15:18,780
no reason and everything it's a one of

00:15:16,410 --> 00:15:20,490
things it should be fine

00:15:18,780 --> 00:15:21,930
it's still mostly a personal project at

00:15:20,490 --> 00:15:25,410
this point so it doesn't have the

00:15:21,930 --> 00:15:27,510
momentum and like the community that ran

00:15:25,410 --> 00:15:30,920
and weapons don't have and I would also

00:15:27,510 --> 00:15:34,020
say it's mostly a plea for the well like

00:15:30,920 --> 00:15:37,650
maybe there are maintained

00:15:34,020 --> 00:15:39,630
Damian maintainer for a map service so

00:15:37,650 --> 00:15:43,050
the dovecot config is a bit overkill so

00:15:39,630 --> 00:15:45,570
for an MTA you have that conf come

00:15:43,050 --> 00:15:47,340
templates a depth of dialogue that ask

00:15:45,570 --> 00:15:49,410
you if you want a normal alike or an X

00:15:47,340 --> 00:15:50,850
like and so on and I think you'll be

00:15:49,410 --> 00:15:53,790
cool to have something like that for a

00:15:50,850 --> 00:15:56,160
nap photo of code I mean where you

00:15:53,790 --> 00:15:58,050
actually have because I won't have got

00:15:56,160 --> 00:16:00,090
on my laptop but like it's the

00:15:58,050 --> 00:16:03,350
configuration that comes by default is

00:16:00,090 --> 00:16:06,360
way too overkill for for the laptop and

00:16:03,350 --> 00:16:08,820
it's in Debian since Buster up to

00:16:06,360 --> 00:16:10,410
install into a map and can likely have

00:16:08,820 --> 00:16:13,500
some man page and some pigmentation in

00:16:10,410 --> 00:16:18,630
Isreal and without said on that's all I

00:16:13,500 --> 00:16:21,020
had to say thank you should have any

00:16:18,630 --> 00:16:21,020
questions

00:16:25,920 --> 00:16:33,480
since you are a an upstream right yes

00:16:29,580 --> 00:16:37,200
this software just wanted to say I think

00:16:33,480 --> 00:16:39,470
you are aware of J map which is JSON

00:16:37,200 --> 00:16:43,080
you've played before I'm up with lots of

00:16:39,470 --> 00:16:45,570
yes design basically yes it would be

00:16:43,080 --> 00:16:47,490
really cool if you at some point when it

00:16:45,570 --> 00:16:49,260
stabilizes if you are the support for

00:16:47,490 --> 00:16:53,100
that one so that you could actually

00:16:49,260 --> 00:16:54,750
proxy old clients not support in what

00:16:53,100 --> 00:16:57,060
most clients are not support and J map

00:16:54,750 --> 00:16:58,590
yet so as you could proxy them basically

00:16:57,060 --> 00:17:00,870
throw this thing and also synchronize

00:16:58,590 --> 00:17:02,580
things locally it would be able to talk

00:17:00,870 --> 00:17:05,250
to Jayma like fast mail whatever

00:17:02,580 --> 00:17:08,459
supports it now yeah so you could use so

00:17:05,250 --> 00:17:13,680
it's not supported right now I don't

00:17:08,459 --> 00:17:17,040
so yeah I follow quite closely the IMAP

00:17:13,680 --> 00:17:20,370
working group at the IETF and yeah it's

00:17:17,040 --> 00:17:23,010
I don't see any blocker for that it does

00:17:20,370 --> 00:17:25,410
not happen yet but mostly a matter of

00:17:23,010 --> 00:17:26,910
changing parser really and then yeah you

00:17:25,410 --> 00:17:28,650
could have your local dovecot

00:17:26,910 --> 00:17:31,860
installation and then this

00:17:28,650 --> 00:17:33,180
synchronization would happen okay thank

00:17:31,860 --> 00:17:35,510
you those cuts in relation would act as

00:17:33,180 --> 00:17:38,910
some kind of caching proxy so to say

00:17:35,510 --> 00:17:41,490
except that it's a perfect meal of your

00:17:38,910 --> 00:17:43,110
local storage of your remote storage but

00:17:41,490 --> 00:17:45,180
it's you mostly use it as a caching

00:17:43,110 --> 00:17:47,090
proxy to benefit from the features that

00:17:45,180 --> 00:17:49,770
are not available remotely or vice versa

00:17:47,090 --> 00:17:51,060
so yeah that's that's a I didn't I

00:17:49,770 --> 00:17:54,230
hadn't thought about this use case but

00:17:51,060 --> 00:17:54,230
that sounds that figure to me

00:18:00,310 --> 00:18:05,830
so um I'm not really an IMAP expert but

00:18:03,700 --> 00:18:08,680
something people are always asking me is

00:18:05,830 --> 00:18:12,250
how do I sink my not much state between

00:18:08,680 --> 00:18:14,800
machines and that basically has some

00:18:12,250 --> 00:18:17,320
extra metadata and I don't know how well

00:18:14,800 --> 00:18:20,380
that fits into various IMAP extensions

00:18:17,320 --> 00:18:22,240
but tags basically on messages is

00:18:20,380 --> 00:18:31,960
people's main concern tags

00:18:22,240 --> 00:18:34,090
yes yes an arbitrary string it doesn't

00:18:31,960 --> 00:18:36,460
start with a backslash so it's I mean

00:18:34,090 --> 00:18:38,140
you can have anything there and this is

00:18:36,460 --> 00:18:40,330
attached to a single mail and you also

00:18:38,140 --> 00:18:42,610
have some extension called metadata we

00:18:40,330 --> 00:18:47,400
can attached you can attach some some

00:18:42,610 --> 00:18:50,400
data to mailbox right so he wrote or

00:18:47,400 --> 00:18:50,400
implementation-dependent

00:18:59,190 --> 00:19:07,570
yes so then you have a local map from

00:19:03,970 --> 00:19:10,030
your string like work whatever France

00:19:07,570 --> 00:19:12,310
something to some predefined keywords

00:19:10,030 --> 00:19:14,590
like ABCD efg I don't know how are

00:19:12,310 --> 00:19:17,740
they're called but this is I mean that's

00:19:14,590 --> 00:19:29,050
not about found about fault really it's

00:19:17,740 --> 00:19:30,610
it's part of the okay so this is above

00:19:29,050 --> 00:19:34,960
in the clients which don't support

00:19:30,610 --> 00:19:36,520
arbitrary Cubist's okay so he was okay

00:19:34,960 --> 00:19:39,490
so that was my question you support

00:19:36,520 --> 00:19:43,450
syncing keywords yes and so maybe some

00:19:39,490 --> 00:19:45,400
enthusiastic person could glue not much

00:19:43,450 --> 00:19:46,990
support in there it basically would need

00:19:45,400 --> 00:19:49,060
which I think would be an interesting

00:19:46,990 --> 00:19:52,000
thing anyway would be a not much

00:19:49,060 --> 00:19:53,950
supporting back-end for example for for

00:19:52,000 --> 00:19:54,640
Dethklok I mean I don't have to do it

00:19:53,950 --> 00:20:00,190
myself

00:19:54,640 --> 00:20:03,130
yeah so if it shouldn't be specific to

00:20:00,190 --> 00:20:06,690
the earth god of course it oh well but

00:20:03,130 --> 00:20:06,690
that would be great yes

00:20:11,390 --> 00:20:17,360
heimo we are out of time thank you very

00:20:15,150 --> 00:20:17,360

YouTube URL: https://www.youtube.com/watch?v=R3xmrAMyFQI


