Title: OpenStack Cluster Installer (OCI): the Debian way to install OpenStack
Publication date: 2019-08-08
Playlist: DebConf 19
Description: 
	by Thomas Goirand

At: DebConf19
https://debconf19.debconf.org/talks/12-openstack-cluster-installer-oci-the-debian-way-to-install-openstack/

After 4 releases of Debian with OpenStack, we now have Buster that is shipped with the first OpenStack installer. This installer has been written from scratch, and represent 1 year of development. It was very shortly presented last year in Debconf Taiwan. As it is now production ready, this is now time to show the world how it works.

This presentation will go over details of how to use OCI, and how it can be used to deploy OpenStack under Debian.

Details about OCI can be read over here: https://salsa.debian.org/openstack-team/debian/openstack-cluster-installer

Room: MiniauditÃ³rio
Scheduled start: 2019-07-22 17:00:00
Captions: 
	00:00:04,620 --> 00:00:09,059
welcome to the last session of today

00:00:06,690 --> 00:00:11,670
we're listening to Thomas better known

00:00:09,059 --> 00:00:29,810
as zigu for the Debian way to install

00:00:11,670 --> 00:00:32,520
OpenStack so I like to have an energetic

00:00:29,810 --> 00:00:34,079
presentation we feel free to stop me

00:00:32,520 --> 00:00:36,809
when everyone when you have a question

00:00:34,079 --> 00:00:39,539
when there's something you don't get I'm

00:00:36,809 --> 00:00:42,199
43 I'm a DD since 2010 I've been

00:00:39,539 --> 00:00:45,449
maintaining you've been stuck since 2011

00:00:42,199 --> 00:00:50,120
I've been working on hosting industry

00:00:45,449 --> 00:00:53,280
since the beginning of my career and I'm

00:00:50,120 --> 00:00:57,089
working for open alpha maniac which is

00:00:53,280 --> 00:00:59,819
the platinum sponsor for Deb Kampf which

00:00:57,089 --> 00:01:01,710
by the way I did not ask for so we use

00:00:59,819 --> 00:01:06,590
Debian everywhere on all of our servers

00:01:01,710 --> 00:01:10,619
and my bus just did it by himself so I I

00:01:06,590 --> 00:01:18,950
have as a mission to build a big cloud

00:01:10,619 --> 00:01:21,869
for off alpha man yak back in Taiwan I

00:01:18,950 --> 00:01:30,270
explained to everyone my feelings about

00:01:21,869 --> 00:01:33,600
the public cloud to me public cloud is a

00:01:30,270 --> 00:01:36,960
very important thing for everyone that

00:01:33,600 --> 00:01:42,600
needs to put some workload on technical

00:01:36,960 --> 00:01:47,159
piece and we shall not fight it we

00:01:42,600 --> 00:01:48,780
should embrace it and make that we

00:01:47,159 --> 00:01:51,000
should must let people understand that

00:01:48,780 --> 00:01:53,460
it's very important that they use free

00:01:51,000 --> 00:01:58,079
software from the cloud including in the

00:01:53,460 --> 00:02:00,210
underlying infrastructure and it's my

00:01:58,079 --> 00:02:02,060
strong feeling that OpenStack is best

00:02:00,210 --> 00:02:04,220
fit for the job

00:02:02,060 --> 00:02:08,140
that I hope that the VN is the best

00:02:04,220 --> 00:02:11,030
place to run OpenStack so to make it

00:02:08,140 --> 00:02:20,319
easier for people to use OpenStack out

00:02:11,030 --> 00:02:23,330
on Debian okay so just before that IBM

00:02:20,319 --> 00:02:24,830
apparently bought Red Hots

00:02:23,330 --> 00:02:26,630
because they do believe in the

00:02:24,830 --> 00:02:30,739
technology for public cloud and they

00:02:26,630 --> 00:02:34,519
intend to fight on the market for public

00:02:30,739 --> 00:02:41,750
cloud together with AWS Azure and Google

00:02:34,519 --> 00:02:45,470
App Engine so my my current my goal

00:02:41,750 --> 00:02:47,660
which is to make OpenStack easier to use

00:02:45,470 --> 00:02:50,569
not only for me but for everyone that is

00:02:47,660 --> 00:02:53,420
a Debian user so the first step was to

00:02:50,569 --> 00:02:56,560
write debconf amperes so that you can

00:02:53,420 --> 00:03:01,840
ASSU OpenStack manually on your server

00:02:56,560 --> 00:03:04,130
over the Sprint of last year I

00:03:01,840 --> 00:03:06,980
contributed to the puppet OpenStack

00:03:04,130 --> 00:03:09,859
project upstream so that it would also

00:03:06,980 --> 00:03:11,900
work for Debian and the final step was

00:03:09,859 --> 00:03:15,350
to glue it all depended upon packages

00:03:11,900 --> 00:03:20,060
and abet and to write a full cluster

00:03:15,350 --> 00:03:22,489
installer so it started because I tried

00:03:20,060 --> 00:03:27,970
the internal software of my company and

00:03:22,489 --> 00:03:27,970
it didn't really work out for me it was

00:03:29,079 --> 00:03:36,440
kind of a bit annoying with VLAN setup

00:03:34,280 --> 00:03:38,389
and such a thing so I tried three times

00:03:36,440 --> 00:03:41,150
three times I went to data center and I

00:03:38,389 --> 00:03:43,010
couldn't make it work and then I got

00:03:41,150 --> 00:03:47,450
tired of it and in two days I was able

00:03:43,010 --> 00:03:50,800
to write a very small piece of well you

00:03:47,450 --> 00:03:52,780
see I that does the bare metal setup

00:03:50,800 --> 00:03:58,030
in fact in studying OpenStack on the

00:03:52,780 --> 00:04:02,190
hard drive isn't very hard that'sthat's

00:03:58,030 --> 00:04:06,460
not the hard part of the things before I

00:04:02,190 --> 00:04:10,390
wrote things by myself we investigated

00:04:06,460 --> 00:04:14,170
other bare-metal software such as mass

00:04:10,390 --> 00:04:16,090
for man cobbler or ironic and finally I

00:04:14,170 --> 00:04:22,300
decided that none were fitted for the

00:04:16,090 --> 00:04:30,760
job so we still use for man but for non

00:04:22,300 --> 00:04:34,330
OpenStack things so OC is contains reuse

00:04:30,760 --> 00:04:37,840
some technologies such as a lamp stack a

00:04:34,330 --> 00:04:41,440
petty FTP server and the DHCP server so

00:04:37,840 --> 00:04:48,510
the process is that you boot up your

00:04:41,440 --> 00:04:53,050
physical machines over PXE and DHCP and

00:04:48,510 --> 00:04:57,060
it fetches squashy face image over HTTP

00:04:53,050 --> 00:04:59,590
so therefore we see I also contains the

00:04:57,060 --> 00:05:08,350
master node also contains an Apache

00:04:59,590 --> 00:05:12,810
server and the image calls CIA and tell

00:05:08,350 --> 00:05:16,180
it that it's tarin hardware discovery so

00:05:12,810 --> 00:05:19,110
instead of having many many sites I will

00:05:16,180 --> 00:05:19,110
just show you how it works

00:05:23,180 --> 00:05:33,770
so what you see here is a server which

00:05:28,970 --> 00:05:36,530
has 256 gig of ram and I want terabyte

00:05:33,770 --> 00:05:39,110
drive I use it from my development

00:05:36,530 --> 00:05:42,140
though it's exactly it works exactly the

00:05:39,110 --> 00:05:46,250
same as if you were running with real

00:05:42,140 --> 00:05:52,010
hardware so if I do

00:05:46,250 --> 00:05:54,590
OC ie CLI machine list you see okay I

00:05:52,010 --> 00:06:00,890
can try I can try but then you won't see

00:05:54,590 --> 00:06:04,130
all the lines so what what you see on on

00:06:00,890 --> 00:06:08,450
the left here are the serial numbers of

00:06:04,130 --> 00:06:10,190
the machines and to make it more fun I'm

00:06:08,450 --> 00:06:15,400
going to completely destroy this that

00:06:10,190 --> 00:06:15,400
that cluster okay

00:06:18,710 --> 00:06:23,199
so that completely destroys with the

00:06:21,530 --> 00:06:27,460
visions that are running on the cluster

00:06:23,199 --> 00:06:35,090
as you can see nothing is running there

00:06:27,460 --> 00:06:43,330
by the way this machine has some network

00:06:35,090 --> 00:06:46,389
set up let me show you so come in front

00:06:43,330 --> 00:06:50,090
you are at the very end of the room I

00:06:46,389 --> 00:06:53,210
can make it a little bit bigger so as

00:06:50,090 --> 00:06:57,400
you can see there are four bridges each

00:06:53,210 --> 00:07:03,110
of them with some eyepiece if i do BR

00:06:57,400 --> 00:07:05,570
show so you can see that all of these

00:07:03,110 --> 00:07:08,000
bridges are connected to many visual

00:07:05,570 --> 00:07:09,979
interfaces so these are connected to the

00:07:08,000 --> 00:07:14,020
interfaces or the VMS that i'm going to

00:07:09,979 --> 00:07:14,020
start right now so

00:07:23,620 --> 00:07:30,550
what you see here is that it's good it's

00:07:25,810 --> 00:07:33,970
called being a cuckoo image of a node

00:07:30,550 --> 00:07:36,550
that has of a CI and when it and then

00:07:33,970 --> 00:07:40,660
some empty hard drives so we start from

00:07:36,550 --> 00:07:45,540
scratch with no services sold now that

00:07:40,660 --> 00:07:45,540
his has started the the THC machine

00:07:45,750 --> 00:07:50,790
discreetly string to SSH it and to

00:07:48,190 --> 00:07:50,790
configure it

00:07:54,270 --> 00:08:11,400
so it installs Apache a bit creating the

00:07:59,580 --> 00:08:15,210
database grant the password DB sync okay

00:08:11,400 --> 00:08:17,849
and I know it's cooling the root CA

00:08:15,210 --> 00:08:21,569
generator so it has created a PKA for

00:08:17,849 --> 00:08:24,720
OpenStack and now it's starting the

00:08:21,569 --> 00:08:27,169
viens and not that's where becomes

00:08:24,720 --> 00:08:33,169
interesting

00:08:27,169 --> 00:08:33,169
so one first vm is starting

00:08:34,760 --> 00:08:39,849
going eventually to get the HCP

00:08:47,010 --> 00:08:51,230
you children stuck there normally

00:09:03,090 --> 00:09:06,920
what that one has failed it seems

00:09:09,570 --> 00:09:12,620
let's see another one

00:09:13,580 --> 00:09:18,339
well that's one is still getting be a

00:09:15,920 --> 00:09:18,339
cheapy

00:09:49,030 --> 00:09:51,720
all right

00:10:01,120 --> 00:10:09,370
so what'd you get later on is that we

00:10:04,569 --> 00:10:12,189
see I see la is a bunch of comments for

00:10:09,370 --> 00:10:14,800
the machines so you can show them add

00:10:12,189 --> 00:10:23,499
them remove them destroy them reboot

00:10:14,800 --> 00:10:26,759
them on on the APM a so and show you the

00:10:23,499 --> 00:10:26,759
script I use on my

00:10:28,140 --> 00:10:30,829
chick

00:10:35,790 --> 00:10:44,820
so this is what what I I start after the

00:10:40,860 --> 00:10:48,270
VMS are started so it says that the IPMI

00:10:44,820 --> 00:10:52,020
port username and password then create

00:10:48,270 --> 00:10:54,750
some networks at them to to the cluster

00:10:52,020 --> 00:10:58,170
which is called D and then add the

00:10:54,750 --> 00:11:02,010
machines with their rule 2 to the

00:10:58,170 --> 00:11:03,660
cluster getting out of luck today and

00:11:02,010 --> 00:11:07,730
they don't want to do that I don't

00:11:03,660 --> 00:11:07,730
really understand why it's the effect

00:11:07,880 --> 00:11:10,880
nevermind

00:11:29,140 --> 00:11:33,850
to hear that that's a real really

00:11:31,660 --> 00:11:36,550
cluster so I understand it maybe a bit

00:11:33,850 --> 00:11:38,769
more but here you see all the machines

00:11:36,550 --> 00:11:42,190
which have their names automatically

00:11:38,769 --> 00:11:45,420
populated okay I can show you one

00:11:42,190 --> 00:11:45,420
machine on it

00:11:51,580 --> 00:11:58,810
so as you can see you can see it's a

00:11:55,410 --> 00:12:03,339
eyepiece in the dresser that's all of

00:11:58,810 --> 00:12:05,950
that is detected automatically when when

00:12:03,339 --> 00:12:08,640
the live image starts okay let's go back

00:12:05,950 --> 00:12:08,640
to the presentation

00:12:19,660 --> 00:12:29,920
so why am I using life-image for doing

00:12:23,440 --> 00:12:32,800
the hydro discovery in a lot of project

00:12:29,920 --> 00:12:35,110
I saw I saw others using a huge inter

00:12:32,800 --> 00:12:38,650
defile the problem is that this doesn't

00:12:35,110 --> 00:12:43,180
scale and one should avoid as much as

00:12:38,650 --> 00:12:47,010
possible using PXE which is UDP this

00:12:43,180 --> 00:12:52,350
probably this may not work when you have

00:12:47,010 --> 00:12:56,860
when you are over large distance like

00:12:52,350 --> 00:13:00,010
mark Tony about Matt's to me about a few

00:12:56,860 --> 00:13:03,700
days ago this also doesn't scale if you

00:13:00,010 --> 00:13:06,100
thought you were PhD that is HUGE you

00:13:03,700 --> 00:13:10,140
will get get in trouble when there is

00:13:06,100 --> 00:13:13,210
too many nodes watching at the same time

00:13:10,140 --> 00:13:17,170
the the live images are so easy to

00:13:13,210 --> 00:13:20,400
customize adding a package is just one

00:13:17,170 --> 00:13:20,400
one more line yes

00:13:25,010 --> 00:13:31,310
thank you I really interactive highly

00:13:28,040 --> 00:13:33,290
thought you say that it's a problem

00:13:31,310 --> 00:13:37,100
loading in authorities that are large or

00:13:33,290 --> 00:13:39,949
UDP that's true however you can use L

00:13:37,100 --> 00:13:42,490
pixie and then L picks Linux it's in

00:13:39,949 --> 00:13:46,070
this Linux package and then it fetches

00:13:42,490 --> 00:13:55,940
kernel and in authority over HTTP right

00:13:46,070 --> 00:14:00,800
and the other advantage is that you

00:13:55,940 --> 00:14:04,430
don't get into once you booted the live

00:14:00,800 --> 00:14:09,350
image you really get a full system where

00:14:04,430 --> 00:14:13,370
you can up get something to some

00:14:09,350 --> 00:14:18,769
gymnastic so typically I just boot up

00:14:13,370 --> 00:14:20,630
hardware SSH into it setup ipmi for

00:14:18,769 --> 00:14:26,209
example if it's Dell then I use the I

00:14:20,630 --> 00:14:28,790
drag shell tool if it has a rate card I

00:14:26,209 --> 00:14:31,010
use mega T because we do have some of

00:14:28,790 --> 00:14:35,779
these nasty and on free stuff in our

00:14:31,010 --> 00:14:37,639
company so it's it's very nice to be

00:14:35,779 --> 00:14:43,790
able to assess to the system before it

00:14:37,639 --> 00:14:46,699
gets installed so the hardware discovery

00:14:43,790 --> 00:14:50,870
I so many many implementation lots of

00:14:46,699 --> 00:14:52,699
them being over engineered I tried to

00:14:50,870 --> 00:14:55,550
make it super easy super simple to

00:14:52,699 --> 00:14:59,810
understand it's on least 63 lines of

00:14:55,550 --> 00:15:05,589
script life last time I checked if you

00:14:59,810 --> 00:15:10,610
compare that to something like ironic

00:15:05,589 --> 00:15:14,350
it's like 15,000 lines of Python scripts

00:15:10,610 --> 00:15:17,240
that they have and I've done it in 63

00:15:14,350 --> 00:15:21,040
doesn't mean that mine is so much better

00:15:17,240 --> 00:15:21,040
but it's enough for the job

00:15:21,910 --> 00:15:28,710
so I reused lots of tools like LS

00:15:26,569 --> 00:15:32,220
hardware and search

00:15:28,710 --> 00:15:36,030
to do that and it just produces a Jason

00:15:32,220 --> 00:15:41,310
that I just curl to chew ACI itself and

00:15:36,030 --> 00:15:45,150
that's enough so I get a full report of

00:15:41,310 --> 00:15:47,190
the memory configuration cellular system

00:15:45,150 --> 00:15:51,480
serial hard drive size

00:15:47,190 --> 00:15:56,490
NIC speed-dials preemie versions so I

00:15:51,480 --> 00:16:00,060
also have the LED video output LED see

00:15:56,490 --> 00:16:02,490
the client so that I can know which on

00:16:00,060 --> 00:16:09,450
which switch and which spots will change

00:16:02,490 --> 00:16:13,080
it's connected okay so I see I also

00:16:09,450 --> 00:16:16,830
contains in the live image installer so

00:16:13,080 --> 00:16:21,780
that installer is made of small shell

00:16:16,830 --> 00:16:23,550
script again which I have been using for

00:16:21,780 --> 00:16:30,510
producing the OpenStack official image

00:16:23,550 --> 00:16:34,170
for Debian since Jesse so it uses very

00:16:30,510 --> 00:16:37,080
common to slag parted grab AP calc just

00:16:34,170 --> 00:16:41,730
nothing like it's not rocket science

00:16:37,080 --> 00:16:51,150
it's quite easy to install bare metal

00:16:41,730 --> 00:16:55,260
system and it just does the job a bit

00:16:51,150 --> 00:16:58,020
more than just installing the TV on on

00:16:55,260 --> 00:17:00,000
your bare metal systems it's going also

00:16:58,020 --> 00:17:03,709
to prepare things for the next stage

00:17:00,000 --> 00:17:07,260
which is telling OpenStack so it has

00:17:03,709 --> 00:17:11,870
OpenStack Debian image has a hook script

00:17:07,260 --> 00:17:16,560
which is used by OCI to pre setup the

00:17:11,870 --> 00:17:18,780
certificate for pets as you may know the

00:17:16,560 --> 00:17:20,820
puppet master is authenticated on the

00:17:18,780 --> 00:17:24,510
client and the client the puppet master

00:17:20,820 --> 00:17:26,550
and everything is over SSL but you need

00:17:24,510 --> 00:17:29,040
to prepare the certificates to do that

00:17:26,550 --> 00:17:32,630
and all CI does it

00:17:29,040 --> 00:17:36,060
there's also an internal tki for

00:17:32,630 --> 00:17:38,460
OpenStack itself because

00:17:36,060 --> 00:17:41,130
even though you may want some real

00:17:38,460 --> 00:17:45,330
certificates to provide the api to your

00:17:41,130 --> 00:17:51,690
OpenStack users you also need an

00:17:45,330 --> 00:17:54,420
internal root CA to exchange data

00:17:51,690 --> 00:18:01,050
between your nodes which does not

00:17:54,420 --> 00:18:05,280
necessarily use real certificates for

00:18:01,050 --> 00:18:10,230
our example when you reach the OpenStack

00:18:05,280 --> 00:18:12,540
API through you reach HC proxy which we

00:18:10,230 --> 00:18:18,170
encrypts everything to every node so

00:18:12,540 --> 00:18:18,170
that checking that root certificate

00:18:20,960 --> 00:18:27,060
while doing the installation there's all

00:18:24,750 --> 00:18:30,720
sorts of tiny tweaks that are made as as

00:18:27,060 --> 00:18:33,680
well like say serial console if you use

00:18:30,720 --> 00:18:36,600
that through a PMI this type of things

00:18:33,680 --> 00:18:39,180
so the goal is that you just press one

00:18:36,600 --> 00:18:44,730
button and then it slows fully or your

00:18:39,180 --> 00:18:52,620
bare metal machines including sale BIOS

00:18:44,730 --> 00:18:54,540
options monitoring all of it on top of

00:18:52,620 --> 00:18:57,330
that so I first thought that I would

00:18:54,540 --> 00:19:01,200
just do an openstack installer and I

00:18:57,330 --> 00:19:05,510
quickly realized that networking also

00:19:01,200 --> 00:19:10,320
needs some management through through DB

00:19:05,510 --> 00:19:13,620
and then there's kind of network manager

00:19:10,320 --> 00:19:16,500
that that is included in English I so

00:19:13,620 --> 00:19:19,290
you may define your management network

00:19:16,500 --> 00:19:27,450
the network that is going to use 4 VX

00:19:19,290 --> 00:19:31,770
LAN between your VMs and during the

00:19:27,450 --> 00:19:34,050
installation the OpenStack Debian

00:19:31,770 --> 00:19:38,040
Majerus is now capable also of setting

00:19:34,050 --> 00:19:40,750
up bonding VLAN and bridges

00:19:38,040 --> 00:19:43,780
sometimes visible times paranoid for

00:19:40,750 --> 00:19:45,640
example say Felicity will have the

00:19:43,780 --> 00:19:48,430
crystal Network and the player network

00:19:45,640 --> 00:19:51,430
that we that potentially depending on

00:19:48,430 --> 00:20:05,380
how you choose to configure things each

00:19:51,430 --> 00:20:08,290
of them will use LACP and VLAN and once

00:20:05,380 --> 00:20:11,680
we've set up all of these on the network

00:20:08,290 --> 00:20:13,810
nodes we need this information to be

00:20:11,680 --> 00:20:19,930
able to for the next stage so OpenStack

00:20:13,810 --> 00:20:20,080
and all the components so and there we

00:20:19,930 --> 00:20:23,500
are

00:20:20,080 --> 00:20:30,640
so after rebooting the machine once it's

00:20:23,500 --> 00:20:35,460
set up we have one big puppet manifest

00:20:30,640 --> 00:20:35,460
per type of role that is included in OCI

00:20:36,690 --> 00:20:42,640
it reduces Alderton stack the pipette

00:20:40,900 --> 00:20:48,790
OpenStack modules that you've seen

00:20:42,640 --> 00:20:54,120
upstream plus a bit more like chrony

00:20:48,790 --> 00:20:57,760
each a proxy caressing the official

00:20:54,120 --> 00:21:01,090
Apaches galera rabbitmq so most of the

00:20:57,760 --> 00:21:04,210
puppet module that I've chosen I did

00:21:01,090 --> 00:21:06,670
that carefully most of the time using

00:21:04,210 --> 00:21:09,310
the puppet labs module to make sure that

00:21:06,670 --> 00:21:13,870
they were correctly maintained

00:21:09,310 --> 00:21:15,940
and absolutely 100% of all of that I

00:21:13,870 --> 00:21:19,720
packaged it and pushed it to Debian

00:21:15,940 --> 00:21:24,750
because I want to be able to be frozen

00:21:19,720 --> 00:21:27,580
into one version and she'd that up to

00:21:24,750 --> 00:21:36,250
keep that in maintaining they'd be on

00:21:27,580 --> 00:21:38,590
for a cycle of the stable reason so is

00:21:36,250 --> 00:21:42,670
theirs here some people who don't know

00:21:38,590 --> 00:21:48,580
what e NZ is and you raise your hand

00:21:42,670 --> 00:21:52,300
okay so in puppets

00:21:48,580 --> 00:21:56,770
there is the external load classifier

00:21:52,300 --> 00:22:00,250
so normally puppets sends some

00:21:56,770 --> 00:22:03,160
information to the slave nodes to tell

00:22:00,250 --> 00:22:06,940
them how to configure them themselves

00:22:03,160 --> 00:22:10,120
and you have the option to write your

00:22:06,940 --> 00:22:14,380
own external node classifier which means

00:22:10,120 --> 00:22:17,370
that you take the charge of selling

00:22:14,380 --> 00:22:22,840
which puppet class will be called and

00:22:17,370 --> 00:22:25,210
with what parameters so CIA has Dax and

00:22:22,840 --> 00:22:29,290
this is an example that I took for a

00:22:25,210 --> 00:22:33,160
compute node so as you can see all the

00:22:29,290 --> 00:22:35,140
the passwords are sent to the node which

00:22:33,160 --> 00:22:37,780
isn't a problem by itself because as I

00:22:35,140 --> 00:22:39,330
said earlier it's it's sent over HTTPS

00:22:37,780 --> 00:22:43,390
and nodes are authenticated

00:22:39,330 --> 00:22:47,710
so these generated passwords are stored

00:22:43,390 --> 00:22:49,510
in C is DB so you'd better protect that

00:22:47,710 --> 00:22:52,630
machine and make sure that nobody steals

00:22:49,510 --> 00:22:57,610
password there which should be fine so

00:22:52,630 --> 00:23:01,419
when when I set up a cloud

00:22:57,610 --> 00:23:05,440
the hosts themselves don't have internet

00:23:01,419 --> 00:23:07,119
access at all so so it's okay to do that

00:23:05,440 --> 00:23:09,639
so that's the other reason why I

00:23:07,119 --> 00:23:12,399
insisted in packaging everything because

00:23:09,639 --> 00:23:14,200
I want to be able to have only a Debian

00:23:12,399 --> 00:23:16,690
repository so that I can set up my

00:23:14,200 --> 00:23:18,850
cluster no access to the forge new

00:23:16,690 --> 00:23:25,830
access to github or whatever this would

00:23:18,850 --> 00:23:25,830
require less security in my network so

00:23:29,129 --> 00:23:37,539
or all of the cluster state is stored in

00:23:33,489 --> 00:23:39,129
in in the DBE of a CI including hostname

00:23:37,539 --> 00:23:44,369
network configuration rules and

00:23:39,129 --> 00:23:46,629
passwords and it also knows some

00:23:44,369 --> 00:23:51,509
configuration so configuration of the

00:23:46,629 --> 00:23:55,840
cluster as a whole or individual hosts

00:23:51,509 --> 00:23:58,090
and based on this configuration then the

00:23:55,840 --> 00:24:06,580
main puppet manifest will take some

00:23:58,090 --> 00:24:09,159
decisions so I try to make things the

00:24:06,580 --> 00:24:11,799
less invasive possible so that you can

00:24:09,159 --> 00:24:15,909
continue to to configure your purpose

00:24:11,799 --> 00:24:20,049
the way you're used to for example in an

00:24:15,909 --> 00:24:25,210
alpha mannequin generally we use don't

00:24:20,049 --> 00:24:30,580
ask me why we use send mail and so I've

00:24:25,210 --> 00:24:33,850
just added the send mail puppet module

00:24:30,580 --> 00:24:36,700
that we use internally and and SSH and

00:24:33,850 --> 00:24:39,690
that's not a problem because OCI does

00:24:36,700 --> 00:24:43,299
not touch at all the the standard puppet

00:24:39,690 --> 00:24:46,619
configuration on top of that you can

00:24:43,299 --> 00:24:50,230
also customize what she sent by the ANC

00:24:46,619 --> 00:24:52,389
through some Yemen dropping files that

00:24:50,230 --> 00:24:54,720
you can put payroll and per cluster and

00:24:52,389 --> 00:24:54,720
per house

00:24:55,470 --> 00:25:03,330
so this there's also the possibility to

00:25:00,570 --> 00:25:07,320
add your own shell scripts as hoops

00:25:03,330 --> 00:25:12,600
to add some package lists you can also

00:25:07,320 --> 00:25:13,770
describe some you can add some files

00:25:12,600 --> 00:25:15,780
that are going to be a little

00:25:13,770 --> 00:25:26,250
automatically added to the hosts to

00:25:15,780 --> 00:25:29,160
install so why did they do that that

00:25:26,250 --> 00:25:32,880
work of packaging all the modules so

00:25:29,160 --> 00:25:35,400
because the beyond is the Debian is a

00:25:32,880 --> 00:25:37,500
trusted source so that you won't be able

00:25:35,400 --> 00:25:39,690
you won't have to use it a batch file

00:25:37,500 --> 00:25:42,330
that is going to download from where

00:25:39,690 --> 00:25:47,220
everyone get help that you have no

00:25:42,330 --> 00:25:50,070
control of it helps me also to track

00:25:47,220 --> 00:25:54,090
patches so there's a few patches that I

00:25:50,070 --> 00:25:56,400
had some difficulties to submit upstream

00:25:54,090 --> 00:25:58,680
so as you know we had the Debian

00:25:56,400 --> 00:26:01,470
packages are a good way to to track

00:25:58,680 --> 00:26:05,910
packages and it's easier to freezing

00:26:01,470 --> 00:26:08,010
time if you if you use our 10k for

00:26:05,910 --> 00:26:09,540
example it's going to download whenever

00:26:08,010 --> 00:26:11,580
is the latest version that's probably

00:26:09,540 --> 00:26:13,070
not what you want you don't want to have

00:26:11,580 --> 00:26:17,160
a server that just explodes because

00:26:13,070 --> 00:26:20,580
upstream means the change on his puppet

00:26:17,160 --> 00:26:22,380
module and finally of course not for

00:26:20,580 --> 00:26:26,130
security because you don't want to

00:26:22,380 --> 00:26:28,410
access that you don't want your host or

00:26:26,130 --> 00:26:34,320
even your puppet master to access to the

00:26:28,410 --> 00:26:39,450
outside there's a bit of work that is

00:26:34,320 --> 00:26:43,530
also done on the SSH key so when when

00:26:39,450 --> 00:26:48,960
you first provision your puppet master

00:26:43,530 --> 00:26:52,860
server with a CI you it it generates by

00:26:48,960 --> 00:26:54,990
himself this is HD that it needs to SSH

00:26:52,860 --> 00:26:58,600
into the host when they are in the live

00:26:54,990 --> 00:27:01,000
environment you can also add some more

00:26:58,600 --> 00:27:04,539
SSH keys there so that you can SSH

00:27:01,000 --> 00:27:06,760
yourself and what we do whether for

00:27:04,539 --> 00:27:11,230
magic is that on top of that once the

00:27:06,760 --> 00:27:13,299
servers are set up in life and then we

00:27:11,230 --> 00:27:20,799
have some puppet scripts that maintain

00:27:13,299 --> 00:27:24,160
the SSH keys and features the open stack

00:27:20,799 --> 00:27:29,400
that we see I can do so he can learn all

00:27:24,160 --> 00:27:29,400
of that all of these OpenStack services

00:27:32,610 --> 00:27:40,140
all of them are are set up in the hive

00:27:35,950 --> 00:27:45,610
immunity manner so basically you have

00:27:40,140 --> 00:27:49,809
color sink where that maintains a an IP

00:27:45,610 --> 00:27:51,130
address that can moves on into the one

00:27:49,809 --> 00:27:54,159
of the controllers that you have set up

00:27:51,130 --> 00:27:57,490
so most of the time you would set up at

00:27:54,159 --> 00:28:01,750
least three controllers that were the

00:27:57,490 --> 00:28:05,950
OpenStack API will run so that IP

00:28:01,750 --> 00:28:09,490
address can be just like on the slash 24

00:28:05,950 --> 00:28:12,039
Network but what we do in our magic is

00:28:09,490 --> 00:28:15,370
that we advertise that IP address will

00:28:12,039 --> 00:28:22,030
be GP so OCI doesn't do that for you but

00:28:15,370 --> 00:28:25,000
we store the configuration of cobia

00:28:22,030 --> 00:28:27,250
inside the pipette node and so a

00:28:25,000 --> 00:28:32,789
provisioning time it confit Koga is

00:28:27,250 --> 00:28:32,789
already configured as it should and then

00:28:32,909 --> 00:28:40,150
so chorusing keeps one of the node is

00:28:37,510 --> 00:28:42,820
that IP address on the local look back

00:28:40,150 --> 00:28:48,549
and then is advertised through bgp

00:28:42,820 --> 00:28:50,409
and therefore we have the api IP IP that

00:28:48,549 --> 00:28:52,090
moves from one node to another different

00:28:50,409 --> 00:28:54,120
depending if they are all available or

00:28:52,090 --> 00:28:54,120
not

00:28:59,730 --> 00:29:06,259
so

00:29:02,000 --> 00:29:10,100
I tried to write things as modular as

00:29:06,259 --> 00:29:12,470
possible so that it's possible to design

00:29:10,100 --> 00:29:16,519
a cluster the way you want and not the

00:29:12,470 --> 00:29:18,559
way somebody imposed it on you so you

00:29:16,519 --> 00:29:22,090
can use self which you don't have to you

00:29:18,559 --> 00:29:25,220
can use Swift but you don't have to and

00:29:22,090 --> 00:29:27,620
nearly everything is like that so if you

00:29:25,220 --> 00:29:33,110
have self then you can decide to use it

00:29:27,620 --> 00:29:35,000
for your virtual machine in so that they

00:29:33,110 --> 00:29:37,730
would be stored on self instead of the

00:29:35,000 --> 00:29:40,100
volume Nova instances which enables you

00:29:37,730 --> 00:29:45,230
to live migrate them without having to

00:29:40,100 --> 00:29:47,720
live migrate the block storage if you

00:29:45,230 --> 00:29:49,909
have some self OSD nodes then cinder

00:29:47,720 --> 00:29:53,570
volume will be installed on each compute

00:29:49,909 --> 00:29:56,720
nodes so why on each computes because

00:29:53,570 --> 00:29:59,480
this way the number of cinder volume

00:29:56,720 --> 00:30:02,779
will grow at the same time as your cloud

00:29:59,480 --> 00:30:04,360
which is convenient but it could have

00:30:02,779 --> 00:30:07,090
been somewhere else too so I'll just

00:30:04,360 --> 00:30:11,809
found it well sensitive to do this way

00:30:07,090 --> 00:30:15,529
if you have safe or Swift then Glantz

00:30:11,809 --> 00:30:18,139
will be using one of these gateways one

00:30:15,529 --> 00:30:22,700
of these backends if you have some

00:30:18,139 --> 00:30:26,570
volume nodes then Swift API cinder API

00:30:22,700 --> 00:30:28,960
will be set up on your controllers you

00:30:26,570 --> 00:30:31,759
also have the choice to use separate

00:30:28,960 --> 00:30:35,779
separated machines for your gallery

00:30:31,759 --> 00:30:39,019
cluster otherwise they will be put on

00:30:35,779 --> 00:30:41,690
new controllers another thing so you can

00:30:39,019 --> 00:30:43,929
decide to have separated self monitor

00:30:41,690 --> 00:30:46,250
nodes that will also run the manager

00:30:43,929 --> 00:30:52,740
otherwise they will be set up on your

00:30:46,250 --> 00:30:55,540
controllers and finally if you have

00:30:52,740 --> 00:31:02,920
then this means that I see I will set up

00:30:55,540 --> 00:31:10,930
for you the fulton telemetry is salah

00:31:02,920 --> 00:31:13,600
meter panco alarming and cloud cheesy so

00:31:10,930 --> 00:31:19,540
that you can have rating on the usage

00:31:13,600 --> 00:31:23,770
offshore cloud so as much as I could I

00:31:19,540 --> 00:31:27,940
tried to write things easy and to hack

00:31:23,770 --> 00:31:32,140
and debug so it's probably easier to do

00:31:27,940 --> 00:31:36,790
that when there is not 80 engineers

00:31:32,140 --> 00:31:38,770
working on Tripoli like at a Red Hat and

00:31:36,790 --> 00:31:43,270
I think that's about it for the

00:31:38,770 --> 00:31:45,220
presentation so like to first thank my

00:31:43,270 --> 00:31:48,250
employer in from a yard for give me

00:31:45,220 --> 00:31:50,680
giving me the opportunity to write all

00:31:48,250 --> 00:31:53,830
have all of that in free software and

00:31:50,680 --> 00:31:55,660
push everything to Debian

00:31:53,830 --> 00:31:57,640
I'd like to thanks old OpenStack

00:31:55,660 --> 00:31:59,740
contributors and especially the people

00:31:57,640 --> 00:32:03,130
from the bet OpenStack that helped me to

00:31:59,740 --> 00:32:05,730
make it work for the beyond and thanks

00:32:03,130 --> 00:32:15,880
for you for attending my story thank you

00:32:05,730 --> 00:32:18,880
so time for our questions I don't know

00:32:15,880 --> 00:32:21,250
if I have yeah just 15 minutes so while

00:32:18,880 --> 00:32:25,140
I'm taking questions I will try to make

00:32:21,250 --> 00:32:25,140
that that thing work

00:32:28,540 --> 00:32:33,410
how do you handle different OpenStack

00:32:31,160 --> 00:32:35,630
releases they are released in a 6 month

00:32:33,410 --> 00:32:38,090
schedule and you said you have the

00:32:35,630 --> 00:32:40,870
packages in Debian can you install

00:32:38,090 --> 00:32:47,570
different versions how does that work

00:32:40,870 --> 00:32:50,180
so I'm packaging all of them together

00:32:47,570 --> 00:32:54,230
with red can you raise your hand

00:32:50,180 --> 00:32:57,170
yes you can so together with a few

00:32:54,230 --> 00:33:02,030
contributors it means that they are

00:32:57,170 --> 00:33:04,340
available on Debian really named the

00:33:02,030 --> 00:33:07,100
shop and Socrates named Debian donate

00:33:04,340 --> 00:33:11,780
for example stretch - rocky the Debian

00:33:07,100 --> 00:33:14,650
not net or burster - stein dot DB n dot

00:33:11,780 --> 00:33:17,750
net so this is word to consume them

00:33:14,650 --> 00:33:21,740
unfortunately I have no space to store

00:33:17,750 --> 00:33:24,350
them inside the the Debian archive

00:33:21,740 --> 00:33:27,500
namespace because as you said it's every

00:33:24,350 --> 00:33:30,980
six months while we have cycles of two

00:33:27,500 --> 00:33:33,590
years and a half so that's the way you

00:33:30,980 --> 00:33:36,080
would do you would consume the

00:33:33,590 --> 00:33:40,070
backboards so let's say you start from

00:33:36,080 --> 00:33:43,460
now then you can set up Buster which has

00:33:40,070 --> 00:33:45,560
rocky in it and then you can upgrade to

00:33:43,460 --> 00:33:48,440
shine through the back part and then you

00:33:45,560 --> 00:33:55,250
will in two months from there from now

00:33:48,440 --> 00:33:57,910
you will be able to great to Train does

00:33:55,250 --> 00:33:57,910
that answer your question

00:33:59,270 --> 00:34:11,000
okay hey I didn't see where it was so

00:34:07,530 --> 00:34:11,000
anyone who has another question

00:34:14,380 --> 00:34:18,520
so what I don't understand is that I

00:34:16,390 --> 00:34:22,740
showed the exact same thing to you go

00:34:18,520 --> 00:34:22,740
yesterday and work perfectly right

00:34:37,310 --> 00:34:45,970
any other question we checked IRC this

00:34:42,200 --> 00:34:45,970
time and no questions there is

00:34:49,159 --> 00:34:56,329
so I I tried to make it work what's

00:34:51,980 --> 00:34:58,940
right I've investigated hurting or

00:34:56,329 --> 00:35:01,720
cloudian it to use something that is

00:34:58,940 --> 00:35:07,400
already being developed and if you did

00:35:01,720 --> 00:35:09,549
why that didn't fit your purpose

00:35:07,400 --> 00:35:12,680
yeah and Curtin

00:35:09,549 --> 00:35:20,589
so I do maintain jobs in it for

00:35:12,680 --> 00:35:23,299
OpenStack images okay so you're using

00:35:20,589 --> 00:35:27,759
we're using it for damages for the

00:35:23,299 --> 00:35:27,759
domestic images okay

00:35:38,990 --> 00:35:46,270
oh it's working wonderful so you see

00:35:42,440 --> 00:35:46,270
it's booting a live image

00:35:52,490 --> 00:35:56,450
so oh it's in the bottom of the screen

00:35:55,040 --> 00:35:58,400
the screen is this one oh you saw it

00:35:56,450 --> 00:36:01,670
here you saw this question of s image

00:35:58,400 --> 00:36:02,570
downloaded over HTTP as you saw it's

00:36:01,670 --> 00:36:07,849
very fast

00:36:02,570 --> 00:36:15,609
I was continuing to boot so I internally

00:36:07,849 --> 00:36:19,190
I use IPM i sim from open ipmi to fake

00:36:15,609 --> 00:36:24,280
IPMI usage okay so now that the first

00:36:19,190 --> 00:36:29,450
machine is booted it appears here you

00:36:24,280 --> 00:36:33,710
working I have no idea why didn't work

00:36:29,450 --> 00:36:36,830
the first time so now you see them

00:36:33,710 --> 00:36:40,369
booting one by one so I did a of like a

00:36:36,830 --> 00:36:46,660
few seconds between the boots of every

00:36:40,369 --> 00:36:49,070
VMs so you see there DHCP address here

00:36:46,660 --> 00:36:51,349
amount of memory they are currently

00:36:49,070 --> 00:36:53,119
running the mail life and that's the

00:36:51,349 --> 00:37:04,630
serial number I will use to interact

00:36:53,119 --> 00:37:04,630
with every machines so as I said earlier

00:37:09,310 --> 00:37:18,260
that's the script I normally just run at

00:37:13,910 --> 00:37:20,390
once okay so let's run it it's creating

00:37:18,260 --> 00:37:26,360
the cluster at the network and machines

00:37:20,390 --> 00:37:30,410
to them okay now we see a machine list

00:37:26,360 --> 00:37:33,830
and now you you see demo they so the

00:37:30,410 --> 00:37:36,890
host names have been calculated so

00:37:33,830 --> 00:37:41,350
that's just the name role and number and

00:37:36,890 --> 00:37:41,350
then whatever domain name that you want

00:37:43,510 --> 00:37:55,420
so i can see i see li machine show and

00:37:48,500 --> 00:38:05,120
i'll take this machine so that c4 okay i

00:37:55,420 --> 00:38:07,930
if i want i can do a machine set I'll

00:38:05,120 --> 00:38:13,190
take that compute one which is G - okay

00:38:07,930 --> 00:38:13,730
and so this this batch competition and

00:38:13,190 --> 00:38:20,540
all of that

00:38:13,730 --> 00:38:22,280
okay so yourself if I will know that one

00:38:20,540 --> 00:38:25,640
I don't want to tell yourself I wanted

00:38:22,280 --> 00:38:27,200
to use the local hard drive okay that

00:38:25,640 --> 00:38:31,370
that's just an example then you can also

00:38:27,200 --> 00:38:34,430
setup software raid so we did that

00:38:31,370 --> 00:38:37,100
because we had a few machines where we

00:38:34,430 --> 00:38:43,670
couldn't do we didn't have right for the

00:38:37,100 --> 00:38:49,600
system now if I want to steal a machine

00:38:43,670 --> 00:38:49,600
I just to OS install

00:38:54,280 --> 00:39:00,580
on let's say we'll take we're going to

00:38:58,690 --> 00:39:05,890
set up the safe cluster okay so

00:39:00,580 --> 00:39:07,870
installed c4 normally it's it's huge

00:39:05,890 --> 00:39:12,690
cellular numbers of machines okay it's

00:39:07,870 --> 00:39:12,690
not not c4 like that c5

00:39:16,330 --> 00:39:19,230
c6

00:39:23,700 --> 00:39:29,640
we do machinist now you can see you hear

00:39:26,970 --> 00:39:31,830
that they are installing of course

00:39:29,640 --> 00:39:35,540
because they are installing the West but

00:39:31,830 --> 00:39:44,880
they still not running yet on it so

00:39:35,540 --> 00:39:49,560
because I have I can do machine install

00:39:44,880 --> 00:39:55,680
log of c-4 for example and that's just

00:39:49,560 --> 00:39:57,860
boring the bootstrap akina's will ssh to

00:39:55,680 --> 00:39:57,860
it

00:40:01,369 --> 00:40:04,539
oh why

00:40:07,219 --> 00:40:12,009
yes I'm being City

00:40:22,759 --> 00:40:26,269
can reach log

00:40:26,750 --> 00:40:31,250
[Applause]

00:40:28,670 --> 00:40:32,900
we're going to eventually take some time

00:40:31,250 --> 00:40:39,710
to do that so you can ask for more

00:40:32,900 --> 00:40:42,170
questions if you want anyone yeah so I

00:40:39,710 --> 00:40:45,049
just one thing so I here I've showed you

00:40:42,170 --> 00:40:47,510
OpenStack I've also created the rule

00:40:45,049 --> 00:40:49,819
that is called DEP mirror so you can

00:40:47,510 --> 00:40:54,619
just say oh I want to dip your neuron

00:40:49,819 --> 00:40:56,839
good here thoughts you you ever have any

00:40:54,619 --> 00:40:58,190
like problems where the script would be

00:40:56,839 --> 00:41:00,680
although I'd prepare our cluster node

00:40:58,190 --> 00:41:04,010
like let's say you had a you know C for

00:41:00,680 --> 00:41:05,690
for one of your stuff notes went away

00:41:04,010 --> 00:41:07,760
the node C for went away

00:41:05,690 --> 00:41:09,250
do you have accommodations for that or

00:41:07,760 --> 00:41:13,190
is that something you're interested in

00:41:09,250 --> 00:41:15,500
so what CI does it is helping you to do

00:41:13,190 --> 00:41:18,769
the setup okay provides you with a set

00:41:15,500 --> 00:41:22,190
of puppet suites with char stand-up as

00:41:18,769 --> 00:41:24,710
in like from upstream it doesn't provide

00:41:22,190 --> 00:41:27,019
you with monitoring and maintenance

00:41:24,710 --> 00:41:30,109
that's not because you have a tool to do

00:41:27,019 --> 00:41:31,970
to ease your destination that you can be

00:41:30,109 --> 00:41:33,589
brainless you just must know how it

00:41:31,970 --> 00:41:37,730
works and how to fix things if they

00:41:33,589 --> 00:41:40,069
occur does the e NC hold idea though cuz

00:41:37,730 --> 00:41:43,369
you come back and say reinstall c4 is

00:41:40,069 --> 00:41:44,990
that something you're reinstalling C for

00:41:43,369 --> 00:41:48,200
now could you come back here or later

00:41:44,990 --> 00:41:50,660
and run the same command what didn't

00:41:48,200 --> 00:41:56,509
work previously on when I first demoed

00:41:50,660 --> 00:41:58,720
it was a the PhD set up somehow didn't

00:41:56,509 --> 00:41:58,720
work

00:42:00,820 --> 00:42:03,540
thank you

00:42:31,070 --> 00:42:37,760
with its nearly finished okay so now

00:42:35,690 --> 00:42:46,880
it's adding burster styrene which is the

00:42:37,760 --> 00:42:48,830
report the backport repository it's

00:42:46,880 --> 00:42:51,710
possible to install whatever flavor you

00:42:48,830 --> 00:42:56,000
want so like if you want stretch with

00:42:51,710 --> 00:42:57,890
Rocky Buster without any backward

00:42:56,000 --> 00:43:01,190
repositories she's just brain buster

00:42:57,890 --> 00:43:04,880
that works as well or buster pre-press

00:43:01,190 --> 00:43:10,930
style that works with the Steinbeck

00:43:04,880 --> 00:43:15,710
ports that works too so now if I redo

00:43:10,930 --> 00:43:26,600
okay so now we can see that c4 and c6

00:43:15,710 --> 00:43:30,520
are are currently rebooting I can so two

00:43:26,600 --> 00:43:30,520
three four it's going to be five

00:43:32,500 --> 00:43:38,040
you see that one is clearly meeting for

00:43:35,680 --> 00:43:38,040
the first time

00:43:40,880 --> 00:43:49,030
now it's doing a cool thing to tell OCI

00:43:45,170 --> 00:43:49,030
that it's trans finished booting

00:43:51,609 --> 00:43:55,200
I can sit up

00:44:01,730 --> 00:44:08,660
the other nodes now so you got to know

00:44:06,230 --> 00:44:11,270
that you got into the safe manager first

00:44:08,660 --> 00:44:20,570
and Seth no way sneeze then the

00:44:11,270 --> 00:44:23,990
controllers then everything else so now

00:44:20,570 --> 00:44:25,880
in fact a puppet has started and you see

00:44:23,990 --> 00:44:32,900
it's already installing things like

00:44:25,880 --> 00:44:37,070
crony safe and other things so if I go

00:44:32,900 --> 00:44:40,940
here I say we see I machine list then is

00:44:37,070 --> 00:44:44,960
telling that the server is installed and

00:44:40,940 --> 00:44:46,010
prepared is running and I think we're

00:44:44,960 --> 00:44:48,560
out of time

00:44:46,010 --> 00:44:50,740
maybe another question if not then

00:44:48,560 --> 00:44:54,730
that's it

00:44:50,740 --> 00:44:54,730
all right thank you very much

00:44:56,830 --> 00:45:01,739

YouTube URL: https://www.youtube.com/watch?v=VqSGNTSHwMQ


