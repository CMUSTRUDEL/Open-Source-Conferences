Title: Essential Ingredients For Debian System Images In Minutes With Debos
Publication date: 2019-08-08
Playlist: DebConf 19
Description: 
	by Andrej Shadura

At: DebConf19
https://debconf19.debconf.org/talks/55-essential-ingredients-for-debian-system-images-in-minutes-with-debos/

Debian System Images are usually generated by custom scripts around debootstrap. In this talk I shall present a Debian tool (`debos`) that helps creating customized Debian System images for different environments.

`debos` has been created having embedded systems in mind. Images are customized via YAML description file, often called `recipe`. `debos` parses `debos recipes` to generate custom Debian images. `debos` is not only suitable for embedded images, but it can be used in other environments such creating VM images, cloud images, …

`debos` is core component of several Debian derivatives CI loop. It also does not require sysadmin capabilities.

Room: Auditório
Scheduled start: 2019-07-22 16:00:00
Captions: 
	00:00:05,380 --> 00:00:10,520
hello everybody so welcome to another

00:00:08,510 --> 00:00:14,360
talk from that call

00:00:10,520 --> 00:00:16,940
so Andrea Duda will present building

00:00:14,360 --> 00:00:20,870
Debian season images in minutes with Deb

00:00:16,940 --> 00:00:28,030
OS which is a presentation from Andrew

00:00:20,870 --> 00:00:30,500
and Ana and thank you yeah so yeah

00:00:28,030 --> 00:00:31,930
welcome to this talk about building

00:00:30,500 --> 00:00:35,570
images with the boss

00:00:31,930 --> 00:00:37,100
yeah the the second name of Anna also

00:00:35,570 --> 00:00:40,940
Devon developers on this slide because

00:00:37,100 --> 00:00:45,640
it was it is heavily based on on the

00:00:40,940 --> 00:00:45,640
presentation she did oh what's that

00:00:46,600 --> 00:00:52,970
yeah she did at ELC last year when she

00:00:51,920 --> 00:00:55,760
worked for collabora

00:00:52,970 --> 00:01:00,890
and specifically she worked on the Bois

00:00:55,760 --> 00:01:04,729
de boys yeah so this talk has some

00:01:00,890 --> 00:01:07,280
updates on basically since then and what

00:01:04,729 --> 00:01:20,329
basically she contributed a lot to this

00:01:07,280 --> 00:01:27,469
talk so it's slow right so let's say you

00:01:20,329 --> 00:01:29,749
want an image of a of a Devon system why

00:01:27,469 --> 00:01:33,100
you would you would need this what's

00:01:29,749 --> 00:01:33,100
going on it's switching back and forth

00:01:34,299 --> 00:01:44,599
right so the right so you want an image

00:01:41,990 --> 00:01:46,009
of a Devon system why you would need

00:01:44,599 --> 00:01:48,829
this is a long question

00:01:46,009 --> 00:01:52,669
and Rico Boyer answered this question

00:01:48,829 --> 00:01:55,909
really well in his DEFCON 15 talk where

00:01:52,669 --> 00:02:00,229
he made an overview of different image

00:01:55,909 --> 00:02:02,450
building tools for Debian but basically

00:02:00,229 --> 00:02:05,020
short version is that people want to be

00:02:02,450 --> 00:02:07,489
able to deploy the operating system fast

00:02:05,020 --> 00:02:11,780
in this case Devon based operating

00:02:07,489 --> 00:02:13,430
system or Debian and if you use definite

00:02:11,780 --> 00:02:15,980
Staller with which you obviously can

00:02:13,430 --> 00:02:18,330
produce images and you can script it

00:02:15,980 --> 00:02:21,599
with proceed and all that

00:02:18,330 --> 00:02:23,640
according to Rico it takes about 14

00:02:21,599 --> 00:02:27,989
minutes to install Debian from scratch

00:02:23,640 --> 00:02:30,810
and this process it's not necessarily

00:02:27,989 --> 00:02:33,689
reproducible because it depends on lots

00:02:30,810 --> 00:02:35,640
of things like well if you install in

00:02:33,689 --> 00:02:37,799
using that ins it depends on your

00:02:35,640 --> 00:02:41,310
network connection or it depends on your

00:02:37,799 --> 00:02:44,810
installation media and all that so it's

00:02:41,310 --> 00:02:50,060
not necessarily the producible and then

00:02:44,810 --> 00:02:53,370
if you have a ready image pre-built

00:02:50,060 --> 00:02:56,159
coping it to an SD card or something it

00:02:53,370 --> 00:02:58,700
makes it a matter of seconds especially

00:02:56,159 --> 00:03:01,670
if you use beam up tube and not DD

00:02:58,700 --> 00:03:03,870
beam up to is a very cool thing which

00:03:01,670 --> 00:03:07,680
which actually writes only parts of

00:03:03,870 --> 00:03:11,549
image which are necessary and doesn't

00:03:07,680 --> 00:03:17,099
write all the emptiness which DD doesn't

00:03:11,549 --> 00:03:20,159
know how to do so whoa how are you use

00:03:17,099 --> 00:03:23,430
case some interesting glitches I haven't

00:03:20,159 --> 00:03:28,220
seen this before so yeah so how we use

00:03:23,430 --> 00:03:32,760
case for building images is a purchase

00:03:28,220 --> 00:03:36,299
it's a double derivative what's wrong I

00:03:32,760 --> 00:03:40,370
don't know I haven't used this PDF

00:03:36,299 --> 00:03:45,449
present at all for a while and it's just

00:03:40,370 --> 00:03:48,180
yeah so a purchase a is a debit

00:03:45,449 --> 00:03:50,750
derivative for using automotive industry

00:03:48,180 --> 00:03:54,359
so basically originated was intended for

00:03:50,750 --> 00:03:58,410
intend my system in cars like navigation

00:03:54,359 --> 00:04:01,799
and radio all that these days is small

00:03:58,410 --> 00:04:04,220
for embedded uses inside the car but

00:04:01,799 --> 00:04:09,449
still the purpose is more like the same

00:04:04,220 --> 00:04:11,790
a purchased Argos a lot of devices run

00:04:09,449 --> 00:04:16,829
in different platforms most notably its

00:04:11,790 --> 00:04:20,579
arm 64 and HF but there are also boards

00:04:16,829 --> 00:04:22,770
with mg 64 compatible processors so

00:04:20,579 --> 00:04:27,270
we've got lots of images for different

00:04:22,770 --> 00:04:29,650
devices you want to build and also there

00:04:27,270 --> 00:04:31,419
are only 64 based images which

00:04:29,650 --> 00:04:34,270
users normally run in virtual machines

00:04:31,419 --> 00:04:36,790
like VirtualBox which come with also

00:04:34,270 --> 00:04:39,910
sophisticate basically there's an IDE

00:04:36,790 --> 00:04:43,630
all tools they need to develop

00:04:39,910 --> 00:04:47,080
applications for practice and our

00:04:43,630 --> 00:04:53,050
original approach to building images was

00:04:47,080 --> 00:04:55,780
to use linear image tools they had a lot

00:04:53,050 --> 00:04:58,240
of downsides most important of them was

00:04:55,780 --> 00:05:02,320
they were really complex written mostly

00:04:58,240 --> 00:05:05,860
in bash they were difficult to debug and

00:05:02,320 --> 00:05:10,690
they relied on kernel mechanisms like

00:05:05,860 --> 00:05:13,840
loop devices which as it turned out they

00:05:10,690 --> 00:05:18,070
were not very not always reliable and we

00:05:13,840 --> 00:05:20,440
often had a issues that loop devices

00:05:18,070 --> 00:05:22,840
would not amount properly and it would

00:05:20,440 --> 00:05:24,849
be all only sold by completely reboot in

00:05:22,840 --> 00:05:28,930
the work and which Diamond image was

00:05:24,849 --> 00:05:31,270
built so we were like lots of people on

00:05:28,930 --> 00:05:35,770
this project were frustrated with with

00:05:31,270 --> 00:05:38,530
that process and at some point a new

00:05:35,770 --> 00:05:42,060
tool was created mostly developed by

00:05:38,530 --> 00:05:45,310
short Siemens another Debian developer

00:05:42,060 --> 00:05:47,650
so because we were basically looking for

00:05:45,310 --> 00:05:50,260
tools to replace what we were using

00:05:47,650 --> 00:05:54,550
before and none of that talented

00:05:50,260 --> 00:05:57,010
alternative did what we wanted to do or

00:05:54,550 --> 00:05:58,750
what short in this case wanted to do so

00:05:57,010 --> 00:06:04,500
there was the empty bootstrap already

00:05:58,750 --> 00:06:09,520
duplicated by that point vm z b vm gb

00:06:04,500 --> 00:06:13,360
which lasts vissaeus was developing back

00:06:09,520 --> 00:06:16,050
then but it was it was not yet ready for

00:06:13,360 --> 00:06:19,510
use for general use at that point

00:06:16,050 --> 00:06:22,570
obviously Phi but Phi bit too complex

00:06:19,510 --> 00:06:24,729
and I I don't remember exactly why it

00:06:22,570 --> 00:06:29,530
was not taken but I guess the complexity

00:06:24,729 --> 00:06:32,680
was a bit one of the reasons so short

00:06:29,530 --> 00:06:38,680
has developed this tool which is modular

00:06:32,680 --> 00:06:42,760
and it's basically it creates the image

00:06:38,680 --> 00:06:43,749
by executing a sequence of simple

00:06:42,760 --> 00:06:46,809
Atomics

00:06:43,749 --> 00:06:50,259
not atomic but like basically atomic for

00:06:46,809 --> 00:06:54,909
the purpose of this tool it does need

00:06:50,259 --> 00:06:57,610
root usually you basically what's wrong

00:06:54,909 --> 00:07:01,539
with this rendering you don't need root

00:06:57,610 --> 00:07:04,239
you basically you want to have KVM are

00:07:01,539 --> 00:07:06,459
available for your user but you don't

00:07:04,239 --> 00:07:13,419
need to have proper root privileges but

00:07:06,459 --> 00:07:16,300
also this can be worked around right it

00:07:13,419 --> 00:07:22,179
is designed to be easy to integrate with

00:07:16,300 --> 00:07:25,259
CIS systems and the recipe is a llamó

00:07:22,179 --> 00:07:27,639
file which is pre processed through the

00:07:25,259 --> 00:07:30,459
devil's the boss is written and go and

00:07:27,639 --> 00:07:35,110
basically it is the text template an

00:07:30,459 --> 00:07:38,079
engine of go and obviously it it is made

00:07:35,110 --> 00:07:40,419
primarily for Debian but if you want to

00:07:38,079 --> 00:07:48,639
run it on non Debian systems you can run

00:07:40,419 --> 00:07:51,699
it in docker so it supports basically

00:07:48,639 --> 00:07:56,499
any architecture supported by Debian and

00:07:51,699 --> 00:07:58,779
qmo and well if that is the tested it

00:07:56,499 --> 00:08:00,610
and run it on a bunch of different

00:07:58,779 --> 00:08:03,509
architectures you can see them on the

00:08:00,610 --> 00:08:05,619
slide no need to read basically but the

00:08:03,509 --> 00:08:11,319
interesting thing about how it works

00:08:05,619 --> 00:08:15,819
internally is that it uses a library

00:08:11,319 --> 00:08:20,379
called fake machine which sets up a VM

00:08:15,819 --> 00:08:25,389
of virtual machine using the slash user

00:08:20,379 --> 00:08:27,639
from the whole system it and then inside

00:08:25,389 --> 00:08:31,139
of that virtual machine we already have

00:08:27,639 --> 00:08:33,430
root so we can do funny things like

00:08:31,139 --> 00:08:37,870
crazy loop devices and all that without

00:08:33,430 --> 00:08:41,860
having root outside it also uses key mo

00:08:37,870 --> 00:08:47,769
and user mode to do devil's trap and all

00:08:41,860 --> 00:08:50,500
and all of those things inside of the

00:08:47,769 --> 00:08:55,149
virtual machine for to run for for

00:08:50,500 --> 00:08:56,630
foreign architectures binaries and this

00:08:55,149 --> 00:08:59,840
is basically what it what makes

00:08:56,630 --> 00:09:02,030
different from other tools because well

00:08:59,840 --> 00:09:03,350
like compared to linear image tools for

00:09:02,030 --> 00:09:06,110
example it doesn't depend on the whole

00:09:03,350 --> 00:09:08,630
systems kernel features like loop

00:09:06,110 --> 00:09:10,730
devices because it it runs its own

00:09:08,630 --> 00:09:12,920
kernel inside of the virtual machine so

00:09:10,730 --> 00:09:14,690
even if it crashes at some point for

00:09:12,920 --> 00:09:18,500
example we can just tear it down and

00:09:14,690 --> 00:09:20,600
start it from scratch and so we're not

00:09:18,500 --> 00:09:23,680
touching those delicate bits of the

00:09:20,600 --> 00:09:26,420
hosts kernel

00:09:23,680 --> 00:09:29,990
well divorce is not a build system and

00:09:26,420 --> 00:09:31,580
it's not a replacement for for a dip in

00:09:29,990 --> 00:09:33,230
installer so you're not supposed to you

00:09:31,580 --> 00:09:35,060
really use it to just install Debian

00:09:33,230 --> 00:09:37,640
from scratch even though you can but

00:09:35,060 --> 00:09:45,440
it's not supposed to replace it at any

00:09:37,640 --> 00:09:49,040
point so in a parities in a purchase we

00:09:45,440 --> 00:09:53,960
use the voice in a way that we run it as

00:09:49,040 --> 00:09:57,620
a part of a nightly build process we get

00:09:53,960 --> 00:09:59,150
current binaries current versions of the

00:09:57,620 --> 00:10:05,090
packages we have in a purchase which is

00:09:59,150 --> 00:10:08,450
which is basically so there's a Jenkins

00:10:05,090 --> 00:10:11,810
instance which runs the boys and mas and

00:10:08,450 --> 00:10:15,950
generates all of the target images we

00:10:11,810 --> 00:10:19,010
want SDK images and also there are

00:10:15,950 --> 00:10:21,290
special jobs to generate docker images

00:10:19,010 --> 00:10:25,850
which used later to generate proper

00:10:21,290 --> 00:10:28,460
images so we actually use the boys or we

00:10:25,850 --> 00:10:29,870
cannot so people using Debian invoker

00:10:28,460 --> 00:10:32,150
for example they can just pull official

00:10:29,870 --> 00:10:35,530
Debian images from the docker registry

00:10:32,150 --> 00:10:37,820
in our case we have our own registry and

00:10:35,530 --> 00:10:39,860
the image into a folder we create them

00:10:37,820 --> 00:10:41,990
also with the boys because the boys has

00:10:39,860 --> 00:10:43,430
those you can run the bootstrap and all

00:10:41,990 --> 00:10:45,890
of those other tools you can create

00:10:43,430 --> 00:10:49,460
exactly what we want we create the root

00:10:45,890 --> 00:10:53,510
filesystem A+ to the Devon or to docker

00:10:49,460 --> 00:10:58,640
registry and we use it later to build

00:10:53,510 --> 00:11:01,010
images of their places itself but ok it

00:10:58,640 --> 00:11:03,980
may look or sound a bit confusing

00:11:01,010 --> 00:11:07,880
because lots of stuff in the short of

00:11:03,980 --> 00:11:10,070
slides now examples will make it more

00:11:07,880 --> 00:11:10,690
clear but oh yeah before before the

00:11:10,070 --> 00:11:13,790
examples and

00:11:10,690 --> 00:11:16,070
example of using colonel CI exactly

00:11:13,790 --> 00:11:20,480
using debo SS Colonel CAI project which

00:11:16,070 --> 00:11:25,490
is a colonel testing infrastructure it

00:11:20,480 --> 00:11:29,630
builds a bunch of branches of the Linux

00:11:25,490 --> 00:11:31,160
kernel upstream builds them for it

00:11:29,630 --> 00:11:34,519
builds kernels targeting different

00:11:31,160 --> 00:11:37,250
devices and runs the colonel on the

00:11:34,519 --> 00:11:39,769
devices inverter and up on the boat it

00:11:37,250 --> 00:11:43,519
runs a set of tests so that we can

00:11:39,769 --> 00:11:46,339
detect failures or regressions very

00:11:43,519 --> 00:11:49,310
early so images Rose file systems for

00:11:46,339 --> 00:11:53,120
for for Colonel CI are all sub built

00:11:49,310 --> 00:11:56,450
using the OS and there's also some more

00:11:53,120 --> 00:12:01,430
projects using the voice already

00:11:56,450 --> 00:12:03,500
so now examples recipes look like that

00:12:01,430 --> 00:12:07,850
basically so you define the architecture

00:12:03,500 --> 00:12:10,130
and you specify a list of actions one of

00:12:07,850 --> 00:12:13,760
them is for example DuBose drop pack and

00:12:10,130 --> 00:12:17,329
this I will go into that a bit a bit

00:12:13,760 --> 00:12:22,790
more further so when you run the voice

00:12:17,329 --> 00:12:25,010
it as you can see it it runs DuBose drop

00:12:22,790 --> 00:12:27,470
in this case and creates a root

00:12:25,010 --> 00:12:29,060
filesystem there's only basically if you

00:12:27,470 --> 00:12:30,440
go back you see this only basically two

00:12:29,060 --> 00:12:33,610
actions it would stop and park

00:12:30,440 --> 00:12:36,140
so we create a root of s Taobao and

00:12:33,610 --> 00:12:38,329
that's what's happening so everything

00:12:36,140 --> 00:12:40,190
after running the boys blah blah it is

00:12:38,329 --> 00:12:47,149
happening inside of the virtual machine

00:12:40,190 --> 00:12:49,399
which fake machine creates so those

00:12:47,149 --> 00:12:55,690
recipes they can be parameterized so you

00:12:49,399 --> 00:12:58,040
can use the goals templates and

00:12:55,690 --> 00:13:01,250
variables inside of this Yama file and

00:12:58,040 --> 00:13:03,850
you can pass the values for those

00:13:01,250 --> 00:13:05,120
variables on the common line of the boys

00:13:03,850 --> 00:13:07,010
like that

00:13:05,120 --> 00:13:10,699
for example so you can build use the

00:13:07,010 --> 00:13:12,740
same recipe to build different images of

00:13:10,699 --> 00:13:16,060
different religions of Debian of

00:13:12,740 --> 00:13:18,980
different architectures like that so

00:13:16,060 --> 00:13:23,149
this is an example of how to use the

00:13:18,980 --> 00:13:24,160
parameter C we you can't really don't

00:13:23,149 --> 00:13:27,230
have to declare

00:13:24,160 --> 00:13:28,820
the parameters on the top of the file

00:13:27,230 --> 00:13:32,600
but if you want to provide saying

00:13:28,820 --> 00:13:34,839
defaults you can do it like that and

00:13:32,600 --> 00:13:36,740
then you can just use them it's the the

00:13:34,839 --> 00:13:41,360
templating language is very similar to

00:13:36,740 --> 00:13:42,770
ginger to the Ruby on Rails simple

00:13:41,360 --> 00:13:46,040
template language I think it's called

00:13:42,770 --> 00:13:48,380
liquid but this is a specific version

00:13:46,040 --> 00:13:50,420
used by go it's slightly more simplistic

00:13:48,380 --> 00:13:52,970
than ginger - it doesn't have as many

00:13:50,420 --> 00:13:55,040
features but it allows some really cool

00:13:52,970 --> 00:13:58,490
things like you know formats in the

00:13:55,040 --> 00:14:03,890
image name or like providing default

00:13:58,490 --> 00:14:07,130
values you can have conditional orbits

00:14:03,890 --> 00:14:12,920
which only get run for specific types of

00:14:07,130 --> 00:14:16,190
images for example like in this case you

00:14:12,920 --> 00:14:18,920
can basically the a thing is the

00:14:16,190 --> 00:14:22,190
pre-processing happens before the UML

00:14:18,920 --> 00:14:25,430
file is passed you the you don't have to

00:14:22,190 --> 00:14:28,010
follow the strict general rules what

00:14:25,430 --> 00:14:30,980
before in this file so it has to

00:14:28,010 --> 00:14:33,680
generate after the pre-processing has to

00:14:30,980 --> 00:14:37,050
be a valid Yunel file but basically you

00:14:33,680 --> 00:14:38,470
can embed any of the templates in

00:14:37,050 --> 00:14:43,760
[Music]

00:14:38,470 --> 00:14:49,670
instructions in it eat so in the boys

00:14:43,760 --> 00:14:53,000
are currently 12 different actions so we

00:14:49,670 --> 00:14:58,520
used two of actions in the the example I

00:14:53,000 --> 00:15:00,830
had we had before so depose drop in case

00:14:58,520 --> 00:15:02,959
someone doesn't know what it is it's a

00:15:00,830 --> 00:15:06,170
tool which there was a talk by Hideki

00:15:02,959 --> 00:15:10,820
Aman a couple of hours ago but to which

00:15:06,170 --> 00:15:13,850
creates a truth booth file system of

00:15:10,820 --> 00:15:15,560
Debian given the number a list of

00:15:13,850 --> 00:15:17,750
packages basically downloads the base

00:15:15,560 --> 00:15:20,120
system and any package she wants on top

00:15:17,750 --> 00:15:23,510
of it extracts them without actually

00:15:20,120 --> 00:15:28,670
having the package or apt inside of the

00:15:23,510 --> 00:15:30,500
root file of this shot and you can also

00:15:28,670 --> 00:15:32,150
obviously run it on on the bench system

00:15:30,500 --> 00:15:35,839
because doesn't require the package or

00:15:32,150 --> 00:15:37,040
aft so the boys can run the demo stuff

00:15:35,839 --> 00:15:41,090
too

00:15:37,040 --> 00:15:42,980
don't listen what's happening so it can

00:15:41,090 --> 00:15:47,120
run demos job to generate the root

00:15:42,980 --> 00:15:50,030
filesystem afterwards when after the

00:15:47,120 --> 00:15:53,930
word inside of the image you can use a

00:15:50,030 --> 00:15:59,240
faction to install set of packages on

00:15:53,930 --> 00:16:01,640
top of what you have just created so we

00:15:59,240 --> 00:16:03,350
can ask up to not install recommended

00:16:01,640 --> 00:16:13,640
packages only install what you actually

00:16:03,350 --> 00:16:17,240
request so you can you can have it like

00:16:13,640 --> 00:16:22,570
that so you create first create a routes

00:16:17,240 --> 00:16:24,890
file system or in this case stretch the

00:16:22,570 --> 00:16:27,860
included three components main country

00:16:24,890 --> 00:16:30,380
but not free and only install the basic

00:16:27,860 --> 00:16:33,530
minimal set of packages and then you add

00:16:30,380 --> 00:16:38,360
like firmware and the sudo and all that

00:16:33,530 --> 00:16:42,110
on top of us it's very simple recipe you

00:16:38,360 --> 00:16:44,600
can download random files from Internet

00:16:42,110 --> 00:16:48,050
during the build process you can also

00:16:44,600 --> 00:16:49,880
ask the boys to unpack it unpacking

00:16:48,050 --> 00:16:52,340
doesn't actually install file anywhere

00:16:49,880 --> 00:16:55,630
inside the the image just in the parks

00:16:52,340 --> 00:16:59,180
it to the working directory of dev OS

00:16:55,630 --> 00:17:02,390
and then use an overlay action you can

00:16:59,180 --> 00:17:04,850
actually pull that file somewhere or the

00:17:02,390 --> 00:17:08,540
directory somewhere inside the image so

00:17:04,850 --> 00:17:11,150
if you look at this example you see

00:17:08,540 --> 00:17:13,310
there's a parameter called name so

00:17:11,150 --> 00:17:15,920
everything everything you download it's

00:17:13,310 --> 00:17:17,780
given a name and you can reuse the same

00:17:15,920 --> 00:17:21,500
to reference what's been downloaded in

00:17:17,780 --> 00:17:23,510
the overlay action so it just basically

00:17:21,500 --> 00:17:25,490
copies what have we have previously

00:17:23,510 --> 00:17:27,350
downloaded into the destination

00:17:25,490 --> 00:17:31,520
directory or to the root of the

00:17:27,350 --> 00:17:35,030
filesystem like that basically you can

00:17:31,520 --> 00:17:39,260
have bunch of files here come in with

00:17:35,030 --> 00:17:43,090
your recipe and they will be put inside

00:17:39,260 --> 00:17:46,190
of the image so you see we've downloaded

00:17:43,090 --> 00:17:47,600
firmware we've unpacked it and we also

00:17:46,190 --> 00:17:50,750
have a directory called otherwise auto

00:17:47,600 --> 00:17:50,929
again and there's something we also want

00:17:50,750 --> 00:17:53,269
to

00:17:50,929 --> 00:17:54,649
put into the image and it goes there you

00:17:53,269 --> 00:17:59,659
don't have to specify the name or

00:17:54,649 --> 00:18:03,970
something right so you can also run

00:17:59,659 --> 00:18:09,529
arbitrary commands inside of the of the

00:18:03,970 --> 00:18:10,129
file system a building it's as simple as

00:18:09,529 --> 00:18:12,919
that

00:18:10,129 --> 00:18:15,639
basically there are a number of number

00:18:12,919 --> 00:18:18,769
of April variables you can use with that

00:18:15,639 --> 00:18:23,269
it looks like that so you can copy files

00:18:18,769 --> 00:18:26,059
from from the directory where the recipe

00:18:23,269 --> 00:18:29,090
is located inside inside of the image

00:18:26,059 --> 00:18:30,710
and we can run depict the package and

00:18:29,090 --> 00:18:32,419
you know you can run basically any

00:18:30,710 --> 00:18:37,490
comments you like instead of truth or

00:18:32,419 --> 00:18:44,269
outside of it basically another example

00:18:37,490 --> 00:18:51,440
setting hostname and inside of it of the

00:18:44,269 --> 00:18:54,610
image more more actions to set up images

00:18:51,440 --> 00:18:58,610
even image partitions and file systems

00:18:54,610 --> 00:19:00,350
this is one of the things where lindero

00:18:58,610 --> 00:19:03,200
image tool didn't work well for us

00:19:00,350 --> 00:19:08,389
because if they would use all of devices

00:19:03,200 --> 00:19:10,999
for this purpose and after we've built a

00:19:08,389 --> 00:19:13,159
dozen of images something would get

00:19:10,999 --> 00:19:14,600
stuck in the Linux kernel and loop

00:19:13,159 --> 00:19:16,549
devices would not get an amount it and

00:19:14,600 --> 00:19:18,110
we will have really strange errors in

00:19:16,549 --> 00:19:19,809
this case none of that is happening

00:19:18,110 --> 00:19:22,549
because it's all in the virtual machine

00:19:19,809 --> 00:19:24,080
after we've created the image and we've

00:19:22,549 --> 00:19:28,159
partition it and created all four

00:19:24,080 --> 00:19:30,169
systems we've done and we destroy the

00:19:28,159 --> 00:19:32,809
virtual machine and none of the states

00:19:30,169 --> 00:19:37,700
is preserved only the image is what what

00:19:32,809 --> 00:19:39,980
what we have as the outcome so dev

00:19:37,700 --> 00:19:44,450
always works around the issues with loop

00:19:39,980 --> 00:19:49,039
devices very nicely and that's an

00:19:44,450 --> 00:19:51,230
example we basically create number of

00:19:49,039 --> 00:19:55,700
partitions and we tell the boys where to

00:19:51,230 --> 00:19:58,850
mount them and and which means you don't

00:19:55,700 --> 00:20:01,249
have to manually split stuff into

00:19:58,850 --> 00:20:03,320
partitions you just specify it in the in

00:20:01,249 --> 00:20:04,870
the recipe and you just install files

00:20:03,320 --> 00:20:05,800
where we like and they were

00:20:04,870 --> 00:20:07,510
be automatically placed in the

00:20:05,800 --> 00:20:14,050
partitions because they actually mounted

00:20:07,510 --> 00:20:18,309
inside of the virtual machine there's

00:20:14,050 --> 00:20:22,780
another example made by Anna which is a

00:20:18,309 --> 00:20:24,940
bootable image for Raspberry Pi third

00:20:22,780 --> 00:20:32,980
version B B+

00:20:24,940 --> 00:20:35,320
you can see it on her github and Deborah

00:20:32,980 --> 00:20:38,020
was is being developed basically driven

00:20:35,320 --> 00:20:40,210
by the needs of of the project no less

00:20:38,020 --> 00:20:42,670
and like this project another project

00:20:40,210 --> 00:20:48,130
where we use the voice so there's no

00:20:42,670 --> 00:20:50,890
specific road roadmap plan we just as we

00:20:48,130 --> 00:20:54,340
have the need to implement some action

00:20:50,890 --> 00:20:58,050
of some new feature we just do it so

00:20:54,340 --> 00:21:01,780
obviously we accept can contribute to

00:20:58,050 --> 00:21:03,280
contribution so if if you use SS and it

00:21:01,780 --> 00:21:06,490
doesn't work for you the way you would

00:21:03,280 --> 00:21:08,470
like to and you have a patch your what

00:21:06,490 --> 00:21:11,170
could help also there's a to-do file

00:21:08,470 --> 00:21:13,179
where we maintain lists of things which

00:21:11,170 --> 00:21:14,650
we would actually love to have in the

00:21:13,179 --> 00:21:23,740
voice ourselves but we don't have enough

00:21:14,650 --> 00:21:25,390
time so we welcome contributions in it

00:21:23,740 --> 00:21:29,440
be coded documentation or anything

00:21:25,390 --> 00:21:34,330
literally so if you want to know more

00:21:29,440 --> 00:21:38,020
there is a bit of documentation publish

00:21:34,330 --> 00:21:41,650
at go doc the code itself is at github

00:21:38,020 --> 00:21:45,330
to go device and though also there's a

00:21:41,650 --> 00:21:50,100
bunch of examples of how to use it also

00:21:45,330 --> 00:21:54,460
at github in its separate repository so

00:21:50,100 --> 00:21:56,050
you can have a look and well ask me or

00:21:54,460 --> 00:22:00,640
other people who worked with the BOE s

00:21:56,050 --> 00:22:03,100
if you've got any questions so thank you

00:22:00,640 --> 00:22:04,690
for listening I'm sorry for bit of

00:22:03,100 --> 00:22:11,100
technical stuff I had with the

00:22:04,690 --> 00:22:11,100
presentation so any questions

00:22:22,770 --> 00:22:30,090
hi recently enough I've stepped into an

00:22:26,850 --> 00:22:32,960
alternative implementation of the

00:22:30,090 --> 00:22:41,220
bootstrap which is called mm depth drop

00:22:32,960 --> 00:22:46,650
if I remember correctly it it's it uses

00:22:41,220 --> 00:22:49,740
apt internally it's more able to resolve

00:22:46,650 --> 00:22:54,570
complex dependencies and it's generally

00:22:49,740 --> 00:22:58,980
faster even less Universal my question

00:22:54,570 --> 00:23:03,179
is can we replace the implementation of

00:22:58,980 --> 00:23:06,480
the bootstrap for Turbo S and use mm

00:23:03,179 --> 00:23:10,650
depth drop and perhaps is it supported

00:23:06,480 --> 00:23:14,580
now well is not supported at this moment

00:23:10,650 --> 00:23:17,550
but does mmm wait wait stay the

00:23:14,580 --> 00:23:19,860
microphone it does mmm DuBose job have

00:23:17,550 --> 00:23:21,570
has the same have the same common line

00:23:19,860 --> 00:23:22,020
interface as the bootstrap are you

00:23:21,570 --> 00:23:25,130
different

00:23:22,020 --> 00:23:30,540
well from a user's point of view it's

00:23:25,130 --> 00:23:33,720
mostly the same as I can remember but I

00:23:30,540 --> 00:23:36,480
am not sure whether it's drop-in

00:23:33,720 --> 00:23:39,990
replacement especially when it comes to

00:23:36,480 --> 00:23:44,460
some exotic options that I don't use

00:23:39,990 --> 00:23:47,070
daily well obviously if someone writes a

00:23:44,460 --> 00:23:49,140
patch to support an omnibus job but I

00:23:47,070 --> 00:23:52,500
think we should be fine with exception

00:23:49,140 --> 00:23:56,400
it just Depot stop is it works it does

00:23:52,500 --> 00:23:59,880
what we want from it so we didn't look

00:23:56,400 --> 00:24:05,250
for alternatives really well yeah I mean

00:23:59,880 --> 00:24:08,130
you if if you prefer mandibles drop we

00:24:05,250 --> 00:24:11,270
submit the patch and we'll have a look

00:24:08,130 --> 00:24:11,270
thank you

00:24:17,320 --> 00:24:26,930
from table slope point of view it's

00:24:21,620 --> 00:24:30,920
faster than the the last release stretch

00:24:26,930 --> 00:24:35,950
so freeze try to the newest tables rough

00:24:30,920 --> 00:24:41,270
and freeze the difference between devil

00:24:35,950 --> 00:24:48,650
mmm there was depth and demo strap

00:24:41,270 --> 00:24:54,710
I want to know that difference mmm they

00:24:48,650 --> 00:25:01,070
will trap also says its first but I'm

00:24:54,710 --> 00:25:04,100
not sure how fast it is so some some

00:25:01,070 --> 00:25:07,930
weeks ago I did tests with newer version

00:25:04,100 --> 00:25:12,050
of the bootstrap and mm strap and mm

00:25:07,930 --> 00:25:15,590
depth strap is a little bit faster maybe

00:25:12,050 --> 00:25:19,700
it's a factor of 1.8 but in absolute

00:25:15,590 --> 00:25:21,770
numbers it's like 15 seconds or like 20

00:25:19,700 --> 00:25:24,860
seconds to 50 seconds right

00:25:21,770 --> 00:25:29,690
so it's not that much currently yeah I

00:25:24,860 --> 00:25:33,440
mean just as a command one question you

00:25:29,690 --> 00:25:36,410
said you can build images just in a few

00:25:33,440 --> 00:25:40,250
minutes and it's very fast do you have

00:25:36,410 --> 00:25:44,300
any numbers for certain images you build

00:25:40,250 --> 00:25:46,340
I don't have numbers right now I can

00:25:44,300 --> 00:25:49,010
look up after the presentation we just

00:25:46,340 --> 00:25:51,260
go to the Jenkins I see how long does it

00:25:49,010 --> 00:25:58,100
really take to build an image so then in

00:25:51,260 --> 00:26:01,040
it so you said this be map tool makes

00:25:58,100 --> 00:26:05,120
things much fun it's a different issue

00:26:01,040 --> 00:26:09,200
so beam up to is the tool which puts an

00:26:05,120 --> 00:26:11,330
image on on to the actual device so I

00:26:09,200 --> 00:26:14,600
mean it was just meant well an example

00:26:11,330 --> 00:26:17,030
compared to it was a reason why people

00:26:14,600 --> 00:26:20,060
would like to build images so I mean

00:26:17,030 --> 00:26:21,790
because they're like some people might

00:26:20,060 --> 00:26:24,860
say why not just use a Debian installer

00:26:21,790 --> 00:26:26,930
to create images yeah sure we can build

00:26:24,860 --> 00:26:27,770
images without Minnesota all each time

00:26:26,930 --> 00:26:32,270
but it they

00:26:27,770 --> 00:26:33,470
at least 14 minutes according to Rico to

00:26:32,270 --> 00:26:36,320
create an image using they've been

00:26:33,470 --> 00:26:38,240
installer and when and you need to do

00:26:36,320 --> 00:26:40,340
this like a lot of times basically from

00:26:38,240 --> 00:26:43,040
scratch if you you want to install it on

00:26:40,340 --> 00:26:44,330
on a new device yeah wait this way you

00:26:43,040 --> 00:26:46,820
did just once

00:26:44,330 --> 00:26:50,720
it creates an image and you just write

00:26:46,820 --> 00:26:54,080
it with three maps all like so there's

00:26:50,720 --> 00:26:56,510
this beta of B map tool can be used for

00:26:54,080 --> 00:27:00,020
every other tool that obviously it was

00:26:56,510 --> 00:27:01,160
it was not something as a benefit of the

00:27:00,020 --> 00:27:03,980
boys even though the browser supports

00:27:01,160 --> 00:27:06,500
supposed to be map but it was just like

00:27:03,980 --> 00:27:08,240
why people would like to have images

00:27:06,500 --> 00:27:10,550
because some other people might say okay

00:27:08,240 --> 00:27:12,800
I I never used an image in my life I

00:27:10,550 --> 00:27:15,710
just run them installed each time I want

00:27:12,800 --> 00:27:19,100
to deploy a new device yeah which is a

00:27:15,710 --> 00:27:21,530
reasonable way to do it but like don't

00:27:19,100 --> 00:27:25,580
well it's not the best for lots of

00:27:21,530 --> 00:27:27,980
purposes one additional question you had

00:27:25,580 --> 00:27:31,100
for example when you are using this app

00:27:27,980 --> 00:27:33,740
action you can say if the recommend

00:27:31,100 --> 00:27:37,520
packages will be installed or not yeah

00:27:33,740 --> 00:27:40,400
are there more options or is recommend

00:27:37,520 --> 00:27:44,060
for the apt action the only one that's

00:27:40,400 --> 00:27:47,840
implemented and how easy is to extend if

00:27:44,060 --> 00:27:52,610
I want to add other options to the apt

00:27:47,840 --> 00:27:55,850
action well it is to extend its well I'm

00:27:52,610 --> 00:27:57,740
not really a goal developer I've never

00:27:55,850 --> 00:27:59,600
written a single line of go code except

00:27:57,740 --> 00:28:01,940
like cup fixing basically a couple of

00:27:59,600 --> 00:28:05,480
things it looks Li really readable in so

00:28:01,940 --> 00:28:09,170
I have to know go to extend it and not

00:28:05,480 --> 00:28:12,610
only with some llaman things yeah I mean

00:28:09,170 --> 00:28:15,290
I I don't quite remember those maybe

00:28:12,610 --> 00:28:17,390
maybe I well I haven't looked at the man

00:28:15,290 --> 00:28:20,570
page for a long time but maybe there is

00:28:17,390 --> 00:28:24,620
some way to add extra options I don't

00:28:20,570 --> 00:28:28,010
remember really but I to be honest I

00:28:24,620 --> 00:28:32,060
only once had a need to extend those

00:28:28,010 --> 00:28:35,780
actions basically so it's general

00:28:32,060 --> 00:28:37,070
purpose enough at the moment to the I

00:28:35,780 --> 00:28:39,140
mean it implements most of the things

00:28:37,070 --> 00:28:40,510
you might need basically at the oddest

00:28:39,140 --> 00:28:43,910
time

00:28:40,510 --> 00:28:46,340
so the well but it's it's easy the

00:28:43,910 --> 00:28:48,320
extent because like as I said it is go

00:28:46,340 --> 00:28:50,390
but it's written there's not not much

00:28:48,320 --> 00:28:52,220
basically there so it's like it's like

00:28:50,390 --> 00:28:55,160
each action is in its own file and it's

00:28:52,220 --> 00:28:58,040
quite readable so we just a matter of

00:28:55,160 --> 00:28:59,540
like 15 minutes maybe if if you want to

00:28:58,040 --> 00:29:02,780
add something it's like not not

00:28:59,540 --> 00:29:05,990
difficult okay but but I have to know go

00:29:02,780 --> 00:29:10,520
and yeah I think compared to other tools

00:29:05,990 --> 00:29:13,520
that are just waiting and bash its then

00:29:10,520 --> 00:29:17,930
it may be easier to extend those tools

00:29:13,520 --> 00:29:20,750
because it's only bash instead of well

00:29:17,930 --> 00:29:23,390
your mileage may vary but my experience

00:29:20,750 --> 00:29:26,060
is that tools written in a brush of that

00:29:23,390 --> 00:29:29,090
complexity they become unmaintainable

00:29:26,060 --> 00:29:30,800
and if like my experience with learner

00:29:29,090 --> 00:29:34,840
image tools I needed to fix a small

00:29:30,800 --> 00:29:38,840
issue with them and I am Not sure I have

00:29:34,840 --> 00:29:42,530
fixed that issue because it was so many

00:29:38,840 --> 00:29:44,330
layers of Bosh basically they had some

00:29:42,530 --> 00:29:50,180
sort of inheritance done in bash like

00:29:44,330 --> 00:29:52,790
and it like so it then the fact that was

00:29:50,180 --> 00:29:56,600
written in bash didn't make it easier to

00:29:52,790 --> 00:30:00,350
do but on the contrary it was much more

00:29:56,600 --> 00:30:05,540
difficult to modify compared to this

00:30:00,350 --> 00:30:07,850
because this is a not as well go is for

00:30:05,540 --> 00:30:09,620
scripts it's maybe not the best language

00:30:07,850 --> 00:30:11,570
but for something bigger it's much

00:30:09,620 --> 00:30:18,500
easier to read than if you wrote the

00:30:11,570 --> 00:30:22,040
same thing in bash okay one more

00:30:18,500 --> 00:30:26,020
question if you have a custom Debian

00:30:22,040 --> 00:30:31,340
based repository a custom debian

00:30:26,020 --> 00:30:35,180
derivative system how is it is it easy

00:30:31,340 --> 00:30:39,680
to use Deborah's for that kind of system

00:30:35,180 --> 00:30:42,390
that is it will be another set of jpg

00:30:39,680 --> 00:30:46,210
case another

00:30:42,390 --> 00:30:49,600
their boots drop initial script yeah

00:30:46,210 --> 00:30:51,669
that's exactly what we do with the

00:30:49,600 --> 00:30:54,070
purchase because this tool was primarily

00:30:51,669 --> 00:30:57,970
developed when we wanted to build system

00:30:54,070 --> 00:30:59,590
images for purchase so yeah we we have

00:30:57,970 --> 00:31:02,950
different set of packages different PGP

00:30:59,590 --> 00:31:04,990
keys different everything and so this

00:31:02,950 --> 00:31:08,650
tool was developed with that in mind so

00:31:04,990 --> 00:31:10,390
you can specify different well different

00:31:08,650 --> 00:31:11,799
location of a keyring different location

00:31:10,390 --> 00:31:14,710
of other things different set of

00:31:11,799 --> 00:31:16,419
repositories and you can even ask it to

00:31:14,710 --> 00:31:18,280
not verify PGP keys if you really want

00:31:16,419 --> 00:31:24,010
to but like it's not really good ideas

00:31:18,280 --> 00:31:26,770
you know so so yeah that was the the

00:31:24,010 --> 00:31:31,540
design decision to support that from the

00:31:26,770 --> 00:31:34,950
very beginning so yes you can use it

00:31:31,540 --> 00:31:34,950
with the very riveters of debian

00:31:42,800 --> 00:31:52,220
I what happens if the action breaks what

00:31:48,350 --> 00:31:55,720
you mean brakes fail well then build

00:31:52,220 --> 00:31:58,820
process is going to fail unless you've

00:31:55,720 --> 00:32:01,280
you've developed a way to you know work

00:31:58,820 --> 00:32:05,530
it around but like yeah if the action

00:32:01,280 --> 00:32:09,350
fails it fails and we cannot continue

00:32:05,530 --> 00:32:13,100
well if you have integrated the boys and

00:32:09,350 --> 00:32:15,500
your continuous integration system you

00:32:13,100 --> 00:32:17,510
must logically want it to fail if it

00:32:15,500 --> 00:32:24,250
fails and it because there's something

00:32:17,510 --> 00:32:27,640
for other people fix so arguably I don't

00:32:24,250 --> 00:32:30,950
think I don't know why you would want to

00:32:27,640 --> 00:32:33,250
somehow prevent it from happening okay

00:32:30,950 --> 00:32:33,250
thank you

00:32:47,090 --> 00:32:52,759
okay if there are no more questions then

00:32:49,669 --> 00:32:54,040
I guess we can wrap it up regarde oh

00:32:52,759 --> 00:33:00,619
thank you

00:32:54,040 --> 00:33:00,619

YouTube URL: https://www.youtube.com/watch?v=Cn3F-kPD4x4


