Title: Crossbuilding bootstrapping BOF
Publication date: 2017-11-28
Playlist: DebConf 12
Description: 
	by Wookey

At: DebConf12
https://debconf12.debconf.org/
Room: Aula Magna
Scheduled start: 2012-07-10 11:00:00
Captions: 
	00:00:00,000 --> 00:00:13,070
unruhe question I guess no there's

00:00:09,599 --> 00:00:16,049
either incomprehensible or very clear

00:00:13,070 --> 00:00:19,070
they will be yes I'll stick it on my

00:00:16,049 --> 00:00:19,070
website in a minute

00:00:24,350 --> 00:00:27,990
yes so there should be there should have

00:00:26,730 --> 00:00:30,539
been a link in there somewhere

00:00:27,990 --> 00:00:33,450
you mean the scripts for doing the

00:00:30,539 --> 00:00:35,570
bootstrap analysis stuff I would hope

00:00:33,450 --> 00:00:38,640
there was one in there somewhere

00:00:35,570 --> 00:00:38,640
[Music]

00:00:38,760 --> 00:00:44,329
I think the first slide actually had

00:00:44,719 --> 00:00:52,770
there is a git repo and there's a readme

00:00:51,449 --> 00:00:55,050
in there if you just type what the

00:00:52,770 --> 00:00:58,280
readme says stuff works and you are this

00:00:55,050 --> 00:00:58,280
is cool I see how this goes

00:01:10,830 --> 00:01:13,670
so

00:01:15,500 --> 00:01:20,140
does anyone who comes write that down

00:01:17,480 --> 00:01:20,140
got it good

00:01:26,310 --> 00:01:31,369
yeah it's nobody good is it it's been

00:01:57,350 --> 00:02:01,040
so it seems pointless waiting for 15

00:01:59,630 --> 00:02:04,280
minutes for the next thing you two start

00:02:01,040 --> 00:02:10,509
so I guess we have part two which

00:02:04,280 --> 00:02:10,509
probably needs a gobby session

00:02:25,870 --> 00:02:28,900
[Music]

00:03:09,970 --> 00:03:12,570
right

00:03:26,120 --> 00:03:31,730
how do I change the name of a gobby

00:03:27,800 --> 00:03:35,900
document woogie

00:03:31,730 --> 00:03:38,569
and I are see people as asking if there

00:03:35,900 --> 00:03:41,840
is a kind of guide for test your

00:03:38,569 --> 00:03:45,110
practice cross building a guide so

00:03:41,840 --> 00:03:53,959
there's there's a link on the last page

00:03:45,110 --> 00:04:03,850
of the PDF which has the basically the

00:03:53,959 --> 00:04:03,850
place yeah

00:04:23,639 --> 00:04:28,590
yes if you want to find out about the

00:04:25,650 --> 00:04:29,819
cross building stuff that URL is what I

00:04:28,590 --> 00:04:33,210
think it was the top of the document

00:04:29,819 --> 00:04:36,180
tree so there's a link there to doing

00:04:33,210 --> 00:04:39,150
multi arch cross building which will be

00:04:36,180 --> 00:04:49,259
probably the best place to start and

00:04:39,150 --> 00:04:57,840
I'll add a link to this right okay so I

00:04:49,259 --> 00:05:00,199
just give it a name so this will be just

00:04:57,840 --> 00:05:00,199
building

00:05:06,530 --> 00:05:10,120
still says new document

00:05:18,669 --> 00:05:22,520
okay I didn't see that let's drag it out

00:05:20,919 --> 00:05:25,730
there okay

00:05:22,520 --> 00:05:25,730
[Music]

00:05:58,470 --> 00:06:07,940
okay you are okay right that will be

00:06:05,160 --> 00:06:07,940
useful actually yeah

00:06:13,090 --> 00:06:20,770
right so there's a gobby document there

00:06:21,070 --> 00:06:28,150
no see he's put a new document in oh

00:06:23,930 --> 00:06:28,150
well we'll do it that way then

00:06:41,340 --> 00:06:50,390
so a typical running a buff in a room

00:06:43,260 --> 00:06:50,390
like this it doesn't really work right

00:06:53,870 --> 00:07:02,010
okay so this document contains a list of

00:06:58,550 --> 00:07:04,830
seven issues which I think we're all

00:07:02,010 --> 00:07:07,380
mentioned in the previous talk if I went

00:07:04,830 --> 00:07:10,650
away with any sort of answers or

00:07:07,380 --> 00:07:12,750
opinions on them that will be helpful so

00:07:10,650 --> 00:07:15,870
running for an arch binaries during

00:07:12,750 --> 00:07:18,420
install of library packages does

00:07:15,870 --> 00:07:24,950
everyone agree that just saying or true

00:07:18,420 --> 00:07:30,750
everywhere is okay I didn't do that

00:07:24,950 --> 00:07:34,980
somebody else is highlighting oh no it's

00:07:30,750 --> 00:07:36,960
just somebody's color isn't it yeah it

00:07:34,980 --> 00:07:43,200
says running foreign Arch binaries

00:07:36,960 --> 00:07:45,750
during install so this is Lib G Lib that

00:07:43,200 --> 00:07:49,440
runs whatever the hell it is it runs and

00:07:45,750 --> 00:07:53,070
I put the examples in here yes so G Lib

00:07:49,440 --> 00:07:59,130
compile schemas and gtk query in modules

00:07:53,070 --> 00:08:03,810
- and all this Lib GV c5 I don't know

00:07:59,130 --> 00:08:05,100
what any of these things do but when

00:08:03,810 --> 00:08:08,310
we're crossing I'm pretty sure we don't

00:08:05,100 --> 00:08:14,040
care and running those binaries won't

00:08:08,310 --> 00:08:15,780
help if you have Q installed it'll just

00:08:14,040 --> 00:08:19,380
do something which is probably the right

00:08:15,780 --> 00:08:21,170
thing you might use the wrong files I

00:08:19,380 --> 00:08:23,040
[Music]

00:08:21,170 --> 00:08:26,810
don't suppose the maintained as these

00:08:23,040 --> 00:08:31,250
packages are here no of course not

00:08:26,810 --> 00:08:33,930
so so you don't have anything to say I

00:08:31,250 --> 00:08:35,490
think we should just say make them

00:08:33,930 --> 00:08:36,720
effectively if you just say or true then

00:08:35,490 --> 00:08:41,000
it becomes a warning you still get it

00:08:36,720 --> 00:08:41,000
printed out as I couldn't find file blah

00:08:46,630 --> 00:08:51,230
the the only problems we had were

00:08:49,670 --> 00:08:54,440
returned to this for them Debian crush

00:08:51,230 --> 00:08:57,350
was that sometimes in these packages

00:08:54,440 --> 00:09:00,710
we'll put a dummy file or they'll put a

00:08:57,350 --> 00:09:02,210
a placeholder in in the way and then

00:09:00,710 --> 00:09:04,730
when he trying to install the package it

00:09:02,210 --> 00:09:07,730
was cross built it won't overwrite it so

00:09:04,730 --> 00:09:09,440
what you won't actually get the cash and

00:09:07,730 --> 00:09:11,450
you have to rerun the thing on device

00:09:09,440 --> 00:09:13,220
you have to invent a way of regenerating

00:09:11,450 --> 00:09:17,690
this data which should have come from

00:09:13,220 --> 00:09:20,900
build time it was moved out of the post

00:09:17,690 --> 00:09:23,120
inst into the build structure seven

00:09:20,900 --> 00:09:24,590
years ago and there was some confusion

00:09:23,120 --> 00:09:26,990
with a lot of the I think it's mainly

00:09:24,590 --> 00:09:28,610
the no maintainer z' there was some

00:09:26,990 --> 00:09:30,890
confusion about exactly why that was

00:09:28,610 --> 00:09:33,470
done with the idea that was because of

00:09:30,890 --> 00:09:36,260
some kind of cross billing issues okay

00:09:33,470 --> 00:09:38,390
so we need to redirect around that loop

00:09:36,260 --> 00:09:41,000
again and try and work out go back to

00:09:38,390 --> 00:09:43,820
the history why was that changed made in

00:09:41,000 --> 00:09:45,770
the first place was it for their reasons

00:09:43,820 --> 00:09:48,860
or for ours was it a mistake on our part

00:09:45,770 --> 00:09:50,870
and can we undo it please okay so you

00:09:48,860 --> 00:09:52,430
mean say we did have these things taken

00:09:50,870 --> 00:09:53,960
out and done at build time and now

00:09:52,430 --> 00:09:55,550
they've been put back into the run time

00:09:53,960 --> 00:09:57,500
install I said I seem to remember that

00:09:55,550 --> 00:09:59,330
when we were doing this though there was

00:09:57,500 --> 00:10:02,660
a mix between packages that did this

00:09:59,330 --> 00:10:04,490
work in the post inst and packages that

00:10:02,660 --> 00:10:08,090
were starting to do it in the build

00:10:04,490 --> 00:10:09,590
system okay and obviously for cross

00:10:08,090 --> 00:10:12,110
building purposes the posted it's the

00:10:09,590 --> 00:10:15,410
right place to do it right whether there

00:10:12,110 --> 00:10:17,150
was some kind of sequencing problem

00:10:15,410 --> 00:10:18,950
there and whether D package triggers

00:10:17,150 --> 00:10:20,450
could have fixed that weren't available

00:10:18,950 --> 00:10:22,520
at the time and therefore they did it

00:10:20,450 --> 00:10:24,020
another way during the build we've got

00:10:22,520 --> 00:10:26,120
to go through that with the relevant

00:10:24,020 --> 00:10:27,890
maintainer making those were the issues

00:10:26,120 --> 00:10:35,540
that we found at the time there any

00:10:27,890 --> 00:10:37,340
known people here so um I guess we'll

00:10:35,540 --> 00:10:43,810
send patches in that say all true for

00:10:37,340 --> 00:10:43,810
now and see if anyone complains so

00:10:48,580 --> 00:10:52,680
yes so I mean you could be a bit

00:10:50,950 --> 00:10:55,269
cleverer than or true which is what this

00:10:52,680 --> 00:10:58,450
so you could check whether you are cross

00:10:55,269 --> 00:11:00,519
installing and now I don't think the

00:10:58,450 --> 00:11:02,560
posting is going to have Deb build arch

00:11:00,519 --> 00:11:04,209
available unless it runs deep package

00:11:02,560 --> 00:11:05,649
architecture to get it and I'm not sure

00:11:04,209 --> 00:11:09,990
the postings can rely on the brokerage

00:11:05,649 --> 00:11:09,990
architecture being present can it Steve

00:11:10,380 --> 00:11:18,970
sorry Oh cuz it'll still run the wrong

00:11:16,029 --> 00:11:20,170
birch was in the post inst you you're

00:11:18,970 --> 00:11:21,940
not gonna have any clue as to what

00:11:20,170 --> 00:11:27,820
architecture you were built on which is

00:11:21,940 --> 00:11:31,149
what matters here there's an installing

00:11:27,820 --> 00:11:33,399
package not know what architecture it is

00:11:31,149 --> 00:11:34,600
ou know when you're installing it you

00:11:33,399 --> 00:11:36,700
know which architecture you're

00:11:34,600 --> 00:11:38,350
installing on yeah yes

00:11:36,700 --> 00:11:39,610
does the package not know D package

00:11:38,350 --> 00:11:41,740
knows what architecture is billing for

00:11:39,610 --> 00:11:46,290
and it knows whether it's foreign or not

00:11:41,740 --> 00:11:49,060
sorry yep I'm looking at the other way

00:11:46,290 --> 00:11:51,010
so yeah I'm sure we so we can always run

00:11:49,060 --> 00:11:57,040
D package - - print architecture and

00:11:51,010 --> 00:11:58,750
we'll get to know what native is so I

00:11:57,040 --> 00:11:59,920
don't know we could try a fancy test but

00:11:58,750 --> 00:12:03,910
I'm not sure if that will just go wrong

00:11:59,920 --> 00:12:08,560
as often as the existing thing giving

00:12:03,910 --> 00:12:14,920
Steve microphone come on sake placer I

00:12:08,560 --> 00:12:16,180
know you'll have things to say so one of

00:12:14,920 --> 00:12:17,980
the considerations there is when you're

00:12:16,180 --> 00:12:19,600
talking about the post tense doing

00:12:17,980 --> 00:12:21,910
things that you you don't care about

00:12:19,600 --> 00:12:23,890
when your cross building the distinction

00:12:21,910 --> 00:12:26,290
there is not whether it's a native

00:12:23,890 --> 00:12:27,820
architecture package or a foreign

00:12:26,290 --> 00:12:29,320
architecture package the actual

00:12:27,820 --> 00:12:31,800
distinction is whether you're installing

00:12:29,320 --> 00:12:34,990
it because you want to use it as a

00:12:31,800 --> 00:12:36,610
runtime library or as a build dependency

00:12:34,990 --> 00:12:39,550
and that's where it gets tricky because

00:12:36,610 --> 00:12:42,010
if I'm cross installing I 386 versions

00:12:39,550 --> 00:12:45,579
of these libraries I expect the posts as

00:12:42,010 --> 00:12:49,779
to to run and mate and if it fails it

00:12:45,579 --> 00:12:52,089
makes a difference yes oh good point I'm

00:12:49,779 --> 00:12:54,640
not sure that that I I see a perfect

00:12:52,089 --> 00:12:56,589
solution to all of this anywhere because

00:12:54,640 --> 00:12:59,199
we certainly don't have any way to

00:12:56,589 --> 00:13:00,460
express the idea of I'm installing this

00:12:59,199 --> 00:13:03,430
because it's across the

00:13:00,460 --> 00:13:06,100
and I guess we could encode some

00:13:03,430 --> 00:13:07,810
conventions and have those populate the

00:13:06,100 --> 00:13:12,250
environment or whatever that's right you

00:13:07,810 --> 00:13:17,350
can say if I'm cross installing and it

00:13:12,250 --> 00:13:19,300
failed then that's not a failure not so

00:13:17,350 --> 00:13:22,420
that if you're installing a 3d6

00:13:19,300 --> 00:13:25,060
on amd64 it's a cross install yeah if it

00:13:22,420 --> 00:13:29,100
fails that's actually a bug not

00:13:25,060 --> 00:13:32,470
something that should be ignored indeed

00:13:29,100 --> 00:13:34,450
it would be a compromise because it will

00:13:32,470 --> 00:13:35,980
usually work right and that'll be and

00:13:34,450 --> 00:13:37,510
you'd still see the warning right but

00:13:35,980 --> 00:13:39,250
yeah it wouldn't actually cause the

00:13:37,510 --> 00:13:41,920
package install to fail and do all the

00:13:39,250 --> 00:13:43,630
right right so I guess as far as

00:13:41,920 --> 00:13:45,580
compromises go the current one you're

00:13:43,630 --> 00:13:47,980
going with is as good as anything else

00:13:45,580 --> 00:13:49,360
as far as I'm concerned if we're going

00:13:47,980 --> 00:13:51,370
to do something different we should

00:13:49,360 --> 00:13:53,620
figure out exactly what the semantics

00:13:51,370 --> 00:13:55,690
are to do it right and so we actually

00:13:53,620 --> 00:13:58,990
have some capability of saying ignore

00:13:55,690 --> 00:14:02,640
this failure when cross installing and

00:13:58,990 --> 00:14:05,470
otherwise known now actually you could

00:14:02,640 --> 00:14:06,970
encode this logic in your cross build

00:14:05,470 --> 00:14:09,250
environment and have a deep packet

00:14:06,970 --> 00:14:10,960
divert lying and wait on the file system

00:14:09,250 --> 00:14:12,910
if you know you're going to be doing

00:14:10,960 --> 00:14:15,340
this and you could just have this this

00:14:12,910 --> 00:14:17,950
pre divert the script have it replaced

00:14:15,340 --> 00:14:20,170
by a symlink to been Drew and then the

00:14:17,950 --> 00:14:21,910
post in succeeds but that's a you know

00:14:20,170 --> 00:14:24,070
we want to kind of get away from

00:14:21,910 --> 00:14:30,400
encoding all that logic in our our cross

00:14:24,070 --> 00:14:31,480
build environments mm-hmm I think Steve

00:14:30,400 --> 00:14:33,550
is a question for you as much as

00:14:31,480 --> 00:14:36,280
anything else when we're doing this in

00:14:33,550 --> 00:14:39,430
the post is is there a way of working

00:14:36,280 --> 00:14:41,470
out the compiled binary the elf binary

00:14:39,430 --> 00:14:43,510
we're trying to run it's something we

00:14:41,470 --> 00:14:46,600
can safely run because of the self the

00:14:43,510 --> 00:14:50,410
setup recurrently got so that if you're

00:14:46,600 --> 00:14:53,200
on i2 8 6 and the the script wants to

00:14:50,410 --> 00:14:55,360
call a binary that we know is a indie 64

00:14:53,200 --> 00:14:58,870
we know that's probably under certain

00:14:55,360 --> 00:15:00,940
weight or that would be okay but if we

00:14:58,870 --> 00:15:05,340
could determine from even something like

00:15:00,940 --> 00:15:08,260
Lib magic that the file is some can do

00:15:05,340 --> 00:15:10,420
is run a ball tool which would say yeah

00:15:08,260 --> 00:15:13,420
I'm this is i386 an NB 64 that's

00:15:10,420 --> 00:15:16,750
runnable we expect that to work and

00:15:13,420 --> 00:15:20,230
mmm no however I just had a great idea

00:15:16,750 --> 00:15:24,390
for an evil hack which is qmu works by

00:15:20,230 --> 00:15:27,010
installing a info mandala logic for

00:15:24,390 --> 00:15:29,920
telling in in proc you tell the colonel

00:15:27,010 --> 00:15:32,530
how to run this elf binary you could

00:15:29,920 --> 00:15:34,630
tell the colonel that the way you run

00:15:32,530 --> 00:15:42,460
all elf binaries of this architecture is

00:15:34,630 --> 00:15:44,290
by passing them to bidden true can we

00:15:42,460 --> 00:15:45,520
can we temporarily install a bin format

00:15:44,290 --> 00:15:49,900
handler and then take it away again

00:15:45,520 --> 00:15:54,400
yes that's quite scary isn't it a little

00:15:49,900 --> 00:15:56,970
bit scratch box it's not completely

00:15:54,400 --> 00:16:01,870
crazy that's an interesting idea

00:15:56,970 --> 00:16:04,930
somebody write that down okay I guess

00:16:01,870 --> 00:16:07,930
that's enough for that for now sure our

00:16:04,930 --> 00:16:12,010
path should we ever need it is it

00:16:07,930 --> 00:16:13,270
important other things it seems to me

00:16:12,010 --> 00:16:14,590
that anything anything we're in the

00:16:13,270 --> 00:16:15,850
build we have to take the our path out

00:16:14,590 --> 00:16:21,970
again is just because we built it wrong

00:16:15,850 --> 00:16:27,460
in the first place isn't it and it will

00:16:21,970 --> 00:16:30,010
be hard to fix yeah repeating for the

00:16:27,460 --> 00:16:31,660
benefit of the video sometimes that is a

00:16:30,010 --> 00:16:33,970
pretty fundamental bug in the upstream

00:16:31,660 --> 00:16:37,240
build system and maintain errs are using

00:16:33,970 --> 00:16:40,800
chirp FD because they can't figure out a

00:16:37,240 --> 00:16:44,620
saner way to do it in polynomial time

00:16:40,800 --> 00:16:45,790
okay so it seems to me that bin utils

00:16:44,620 --> 00:16:47,860
ought to be able to help with this

00:16:45,790 --> 00:16:50,110
because it knows about all the object

00:16:47,860 --> 00:16:53,770
format so I know how hard it is to make

00:16:50,110 --> 00:16:56,260
a sure path that would deal with foreign

00:16:53,770 --> 00:17:00,100
binaries properly using binutils multi

00:16:56,260 --> 00:17:02,530
arch style stuff or whether in fact just

00:17:00,100 --> 00:17:03,820
not bothering again is ever really a

00:17:02,530 --> 00:17:05,770
problem when cross building

00:17:03,820 --> 00:17:07,360
I guess you end up with binaries that

00:17:05,770 --> 00:17:14,290
might have our paths in you didn't want

00:17:07,360 --> 00:17:16,690
and that's probably bad so if anyone

00:17:14,290 --> 00:17:18,880
wants to have a look at how difficult

00:17:16,690 --> 00:17:19,960
that is because I mean it's it's just a

00:17:18,880 --> 00:17:21,460
little thing in the header isn't there's

00:17:19,960 --> 00:17:23,410
a few bytes in the header it's just that

00:17:21,460 --> 00:17:25,060
you need to know whether it's big-endian

00:17:23,410 --> 00:17:26,079
or little-endian and how many bytes

00:17:25,060 --> 00:17:28,809
things are encoded

00:17:26,079 --> 00:17:30,450
in order to fiddle with it so maybe we

00:17:28,809 --> 00:17:33,820
could just make sure path a bit smarter

00:17:30,450 --> 00:17:36,580
and it would just need to use lib PFD or

00:17:33,820 --> 00:17:41,019
something to be able to do the right

00:17:36,580 --> 00:17:43,840
thing where is it art all in fact so

00:17:41,019 --> 00:17:46,659
minor thing wookie can you increase the

00:17:43,840 --> 00:17:51,659
font size and basically make more of the

00:17:46,659 --> 00:17:51,659
pad visible No

00:18:01,649 --> 00:18:11,399
left that one that that one right edit

00:18:22,289 --> 00:18:33,539
your eggs enough that adequate thank you

00:18:30,269 --> 00:18:33,539
good point

00:18:40,300 --> 00:18:51,320
we get rid of that as well whoa whoa

00:18:44,590 --> 00:18:52,360
it's enormous no that's much better

00:18:51,320 --> 00:18:56,690
you're right

00:18:52,360 --> 00:18:58,840
so I can see him from here okay so I

00:18:56,690 --> 00:19:02,810
think that's enough of a churro path and

00:18:58,840 --> 00:19:03,950
multi arching pearl so I had it so one

00:19:02,810 --> 00:19:05,600
of the reasons I think I forgot to

00:19:03,950 --> 00:19:06,920
mention it's one of the reasons loads

00:19:05,600 --> 00:19:09,260
and loads of bill dependencies don't

00:19:06,920 --> 00:19:11,240
install is because something depends on

00:19:09,260 --> 00:19:14,270
Perl or Python and currently neither

00:19:11,240 --> 00:19:15,890
those are probably multi arched so if

00:19:14,270 --> 00:19:17,030
you don't get your dependencies and

00:19:15,890 --> 00:19:20,500
there's an awful lot of things that use

00:19:17,030 --> 00:19:22,990
something pearly or something Python e

00:19:20,500 --> 00:19:29,420
Perl actually seems to be quite simple

00:19:22,990 --> 00:19:33,080
there is one Perl library some packages

00:19:29,420 --> 00:19:35,690
do link against it so if you have a C

00:19:33,080 --> 00:19:38,990
API to Perl it links directly against

00:19:35,690 --> 00:19:42,560
that library so we need to be able to

00:19:38,990 --> 00:19:43,820
have that multi arched but I think we

00:19:42,560 --> 00:19:45,680
just have to make so at the moment

00:19:43,820 --> 00:19:47,150
there's a lip Perl package right which

00:19:45,680 --> 00:19:49,250
doesn't contain the library you just

00:19:47,150 --> 00:19:51,380
contains some Docs and there's a Perl

00:19:49,250 --> 00:19:54,110
package pill base which contains the

00:19:51,380 --> 00:19:56,950
library and everything else anyway okay

00:19:54,110 --> 00:20:00,830
I don't know why that is

00:19:56,950 --> 00:20:02,510
does anyone here know why that is I mean

00:20:00,830 --> 00:20:04,820
it's possibly because if you had a

00:20:02,510 --> 00:20:05,960
separate library and pearl base you'd

00:20:04,820 --> 00:20:07,400
have to be really careful when I'm

00:20:05,960 --> 00:20:09,350
grading them to make sure you did them

00:20:07,400 --> 00:20:11,000
both together because you're using Perl

00:20:09,350 --> 00:20:14,180
during the upgrade and everything would

00:20:11,000 --> 00:20:16,910
blow up I don't I'm assuming we have

00:20:14,180 --> 00:20:18,140
mechanisms for that stuff but in fact I

00:20:16,910 --> 00:20:21,020
think all we have to do is make the

00:20:18,140 --> 00:20:23,540
library in a multi arch path inside Perl

00:20:21,020 --> 00:20:28,940
base exactly as it is now declare it

00:20:23,540 --> 00:20:31,090
allowed and we're done does anyone

00:20:28,940 --> 00:20:31,090
disagree

00:20:32,460 --> 00:20:36,660
that make sense to you Steve

00:20:43,020 --> 00:20:47,260
yeah I'm sorry I'd missed the first bit

00:20:45,730 --> 00:20:48,730
of what you were saying so I remember

00:20:47,260 --> 00:20:50,980
exactly what the details are of how

00:20:48,730 --> 00:20:53,470
Pearl is put together because I think at

00:20:50,980 --> 00:20:56,230
one point the lip pearl library package

00:20:53,470 --> 00:20:58,240
was a virtual package on some

00:20:56,230 --> 00:20:59,350
architectures and a real package on well

00:20:58,240 --> 00:21:00,880
not a virtual package but a dummy

00:20:59,350 --> 00:21:03,160
package on some architectures and a real

00:21:00,880 --> 00:21:05,590
package on others I was just looking now

00:21:03,160 --> 00:21:07,390
on I see how that on amd64 it's a dummy

00:21:05,590 --> 00:21:09,340
package and I don't know why that is

00:21:07,390 --> 00:21:10,750
because there's a Perl API package as

00:21:09,340 --> 00:21:18,820
well which I guess is the one you depend

00:21:10,750 --> 00:21:20,080
on to get the right version right so

00:21:18,820 --> 00:21:22,720
Steve McIntyre is saying that it was a

00:21:20,080 --> 00:21:24,160
it's a real package in i386 in a dummy

00:21:22,720 --> 00:21:26,650
package of name DCC for which i seem to

00:21:24,160 --> 00:21:35,920
remember being the opposite because what

00:21:26,650 --> 00:21:43,150
I remember is so I wanted to pick one

00:21:35,920 --> 00:21:45,670
noodle said if you actually look at the

00:21:43,150 --> 00:21:48,790
description of blood pearl on an AMD 64

00:21:45,670 --> 00:21:50,080
box it says that it's shared pearl

00:21:48,790 --> 00:21:52,270
library for architectures where the

00:21:50,080 --> 00:21:54,970
pearl binary is that statically linked

00:21:52,270 --> 00:21:56,710
to Lib pearl which is only i386 so it's

00:21:54,970 --> 00:22:01,870
a dummy package everywhere except i386

00:21:56,710 --> 00:22:08,830
okay yeah the point 4 3 8 6 being static

00:22:01,870 --> 00:22:10,780
I think was to do with F Pig does that

00:22:08,830 --> 00:22:14,560
make our lives harder in terms of just

00:22:10,780 --> 00:22:16,210
saying pearl is multi arch allowed and

00:22:14,560 --> 00:22:21,070
we could we could make Lib pearl multi

00:22:16,210 --> 00:22:22,840
arch same I guess does that mean we have

00:22:21,070 --> 00:22:25,210
a problem if you have little pearl base

00:22:22,840 --> 00:22:29,260
that has got the foreign library and

00:22:25,210 --> 00:22:32,290
then Lib pearl i386 it's in a different

00:22:29,260 --> 00:22:35,050
package I guess we'll have to sit down

00:22:32,290 --> 00:22:36,490
and have a think fortunately there's any

00:22:35,050 --> 00:22:40,810
pearl core people here there's only

00:22:36,490 --> 00:22:42,340
pearl module people but it looks

00:22:40,810 --> 00:22:44,880
tractable to me and I think we should

00:22:42,340 --> 00:22:44,880
just try it

00:22:46,030 --> 00:23:00,050
Python is harder doko has been looking

00:22:49,430 --> 00:23:01,670
at that doc oh I'll just saying Python

00:23:00,050 --> 00:23:03,500
multi arching you've been having a look

00:23:01,670 --> 00:23:13,760
what where are we at what do we need to

00:23:03,500 --> 00:23:16,850
do what's left how hard is it ok but do

00:23:13,760 --> 00:23:21,640
do you know what needs doing or you're

00:23:16,850 --> 00:23:24,860
not sure yet well the thing is that

00:23:21,640 --> 00:23:27,830
upstream is not cost billable at all so

00:23:24,860 --> 00:23:29,510
you have to get cost built upon upstream

00:23:27,830 --> 00:23:32,180
first and then you can think about well

00:23:29,510 --> 00:23:34,100
making it multi arch already so that we

00:23:32,180 --> 00:23:36,020
can install the parts separately is is

00:23:34,100 --> 00:23:37,700
technically a separate problem from can

00:23:36,020 --> 00:23:39,340
we cross build the package itself right

00:23:37,700 --> 00:23:41,420
and we'd like to do both of these things

00:23:39,340 --> 00:23:43,580
but for everything else to be

00:23:41,420 --> 00:23:48,020
installable where I just need the multi

00:23:43,580 --> 00:23:49,760
arch stuff in the packaging yeah but it

00:23:48,020 --> 00:23:52,910
needs to be done it's being done but

00:23:49,760 --> 00:24:01,730
it's not yet ready okay so I thought

00:23:52,910 --> 00:24:02,870
Python already cross built ok so do I

00:24:01,730 --> 00:24:05,870
just leave that to you and it will

00:24:02,870 --> 00:24:12,620
happen one day do you have any idea when

00:24:05,870 --> 00:24:14,870
one day is after deb Kampf he said

00:24:12,620 --> 00:24:16,880
so both Python and Perl are both quite

00:24:14,870 --> 00:24:19,940
big blockers in terms of being able to

00:24:16,880 --> 00:24:24,170
install cross dependencies so I'm quite

00:24:19,940 --> 00:24:26,780
keen to fix those kind of next really

00:24:24,170 --> 00:24:29,630
yeah of course going back to pearl the

00:24:26,780 --> 00:24:32,180
issue is if you want to cross build lots

00:24:29,630 --> 00:24:34,910
of your perl modules then you don't just

00:24:32,180 --> 00:24:39,410
need a multi arched pearl you need Perl

00:24:34,910 --> 00:24:42,020
with the architecture definitions in the

00:24:39,410 --> 00:24:43,370
essentially the site config already set

00:24:42,020 --> 00:24:44,870
up for each of it before the

00:24:43,370 --> 00:24:48,440
architectures your cross building for

00:24:44,870 --> 00:24:50,390
okay so the kind of pearl config type

00:24:48,440 --> 00:24:52,130
yeah essentially which the build

00:24:50,390 --> 00:24:55,430
presumably generates and we don't

00:24:52,130 --> 00:24:57,620
currently put in a dev package ish I

00:24:55,430 --> 00:24:58,950
mean it basically defines it as you

00:24:57,620 --> 00:25:02,310
build it natively

00:24:58,950 --> 00:25:05,280
so what we had for an initial pearl cost

00:25:02,310 --> 00:25:07,260
build was we just ended up with a config

00:25:05,280 --> 00:25:11,460
for each architecture would end up being

00:25:07,260 --> 00:25:13,710
installed pearl cross building Questions

00:25:11,460 --> 00:25:15,660
so there's there's basically creating a

00:25:13,710 --> 00:25:17,970
config for each architecture kind of

00:25:15,660 --> 00:25:20,280
manually and then saying right that's

00:25:17,970 --> 00:25:22,830
how you cross build pearl so don't run

00:25:20,280 --> 00:25:24,210
all the gubbins it normally runs which

00:25:22,830 --> 00:25:27,720
he tries to do on a native machine with

00:25:24,210 --> 00:25:29,940
an ssh connection here's the answers

00:25:27,720 --> 00:25:31,350
just use that and that works you just

00:25:29,940 --> 00:25:33,780
have to maintain it for each new

00:25:31,350 --> 00:25:35,730
architecture but someone how upstream

00:25:33,780 --> 00:25:37,470
has kind of auto conk for all the

00:25:35,730 --> 00:25:39,420
innards of pearl to make it cross build

00:25:37,470 --> 00:25:41,580
properly and sent it to the pearl list

00:25:39,420 --> 00:25:43,200
about a year two years ago and was

00:25:41,580 --> 00:25:44,640
roundly ignored nobody said it sausage

00:25:43,200 --> 00:25:47,780
they didn't say no they didn't say yes

00:25:44,640 --> 00:25:49,530
they didn't say anything so there's a

00:25:47,780 --> 00:25:51,150
pending question of whether we should

00:25:49,530 --> 00:25:53,580
just say do you guys want to do this so

00:25:51,150 --> 00:25:56,040
that it just works forevermore I don't

00:25:53,580 --> 00:25:57,810
care it's it's been on my to-do list for

00:25:56,040 --> 00:26:00,150
well as you know for months and months

00:25:57,810 --> 00:26:02,340
to go and talk to the pearl folks about

00:26:00,150 --> 00:26:06,510
the cross build stuff that we did have

00:26:02,340 --> 00:26:09,630
working but that was against Pearl 5:12

00:26:06,510 --> 00:26:13,710
and the world changes totally with every

00:26:09,630 --> 00:26:17,610
pearl release that the patch Steve's

00:26:13,710 --> 00:26:20,330
done is Patrick Madeira it's been

00:26:17,610 --> 00:26:22,890
updating it for 5.14 so I think we have

00:26:20,330 --> 00:26:26,040
without too much work a build that will

00:26:22,890 --> 00:26:28,380
work for now it will be nice if upstream

00:26:26,040 --> 00:26:29,970
wire to fix this properly but I think

00:26:28,380 --> 00:26:31,260
the that being able to install

00:26:29,970 --> 00:26:34,710
everything else that depends on it part

00:26:31,260 --> 00:26:38,250
is a lot more important well but I guess

00:26:34,710 --> 00:26:39,540
we need both ultimately that's what's

00:26:38,250 --> 00:26:42,980
really holding up everything else to

00:26:39,540 --> 00:26:42,980
find out whether they even build or not

00:26:44,630 --> 00:26:52,350
so you're saying we need the modules

00:26:47,780 --> 00:26:56,160
part so this does that mean we need a we

00:26:52,350 --> 00:27:00,000
need a pill - dev that contains you know

00:26:56,160 --> 00:27:01,920
arch config for each yes essentially if

00:27:00,000 --> 00:27:04,620
you want to be able to build to cross

00:27:01,920 --> 00:27:06,600
build any of your perl modules then you

00:27:04,620 --> 00:27:08,760
need that okay so this comes back to a

00:27:06,600 --> 00:27:10,380
more general question of we've got lots

00:27:08,760 --> 00:27:12,590
of things which have some kind of arch

00:27:10,380 --> 00:27:14,809
specific how I built myself config

00:27:12,590 --> 00:27:17,690
all those config scripts that armed

00:27:14,809 --> 00:27:19,879
currently package config and Perl and

00:27:17,690 --> 00:27:24,080
Apache has its own weird crazy

00:27:19,879 --> 00:27:26,539
which is even crazier and and should we

00:27:24,080 --> 00:27:28,789
stick all of that in some kind of cross

00:27:26,539 --> 00:27:30,379
support package so you just install all

00:27:28,789 --> 00:27:32,360
of it for all the architectures that we

00:27:30,379 --> 00:27:35,749
support in a big bucket so we know where

00:27:32,360 --> 00:27:39,350
to look or do we have lots of tiny

00:27:35,749 --> 00:27:40,549
packages containing cross configs not

00:27:39,350 --> 00:27:41,389
quite sure what to do without in from

00:27:40,549 --> 00:27:42,889
and the most at the moment we're

00:27:41,389 --> 00:27:44,929
collecting all the auto comp information

00:27:42,889 --> 00:27:47,059
in so deep package cross and maybe we

00:27:44,929 --> 00:27:50,119
should rename it to be called cross

00:27:47,059 --> 00:27:52,179
support or something that sounds

00:27:50,119 --> 00:27:56,059
reasonable but cross support -

00:27:52,179 --> 00:28:00,769
architecture or something and then the

00:27:56,059 --> 00:28:02,600
question is how would that collect build

00:28:00,769 --> 00:28:03,769
config from a whole part of other

00:28:02,600 --> 00:28:04,789
packages really just maintain it

00:28:03,769 --> 00:28:06,320
manually but that doesn't seem very

00:28:04,789 --> 00:28:08,570
likely to stay working for very long

00:28:06,320 --> 00:28:10,190
does it I guess that's what we're doing

00:28:08,570 --> 00:28:11,960
for auto comm stuff yeah exactly

00:28:10,190 --> 00:28:14,619
somebody has to do it so pulling it

00:28:11,960 --> 00:28:20,600
together into one central place maybe

00:28:14,619 --> 00:28:22,480
okay maybe that's not crazy talk what

00:28:20,600 --> 00:28:28,059
else is on this list

00:28:22,480 --> 00:28:33,769
Python doctor who's gonna fix it yeah

00:28:28,059 --> 00:28:35,419
yeah so all these config files so most

00:28:33,769 --> 00:28:39,529
of these are nearly architecture

00:28:35,419 --> 00:28:41,090
independent until you multi Arts the

00:28:39,529 --> 00:28:42,740
package at which point the lib path

00:28:41,090 --> 00:28:46,580
gains an architecture dependent bit

00:28:42,740 --> 00:28:48,320
annoyingly and the dash C Flags option

00:28:46,580 --> 00:28:52,399
is often architecture dependent because

00:28:48,320 --> 00:28:58,340
it says with - SSE or something which I

00:28:52,399 --> 00:29:03,159
assume that depends on your arch so yeah

00:28:58,340 --> 00:29:08,509
I guess we either stick something in our

00:29:03,159 --> 00:29:11,240
support package or try and make people

00:29:08,509 --> 00:29:12,799
use package config does anyone I I guess

00:29:11,240 --> 00:29:14,600
you haven't actually tried this with any

00:29:12,799 --> 00:29:16,580
upstream saying can we just use package

00:29:14,600 --> 00:29:18,710
config please I have no idea whether

00:29:16,580 --> 00:29:19,879
it's likely to be there's a reasons

00:29:18,710 --> 00:29:21,619
they're avoiding it because they're kind

00:29:19,879 --> 00:29:24,649
of core packages and they don't want to

00:29:21,619 --> 00:29:25,110
depend on package config no we had some

00:29:24,649 --> 00:29:29,190
success

00:29:25,110 --> 00:29:32,400
but think it was Coburn and orbit when

00:29:29,190 --> 00:29:34,590
we were doing this and we went upstream

00:29:32,400 --> 00:29:36,240
and they just said oh we forgot to take

00:29:34,590 --> 00:29:38,220
that out we don't want to use it anymore

00:29:36,240 --> 00:29:39,600
how do we use package config instead

00:29:38,220 --> 00:29:42,690
please okay so a lot of this probably

00:29:39,600 --> 00:29:45,080
just old and nobody's seen a need to

00:29:42,690 --> 00:29:50,790
change it

00:29:45,080 --> 00:29:54,150
okay so TCL is a bit different from the

00:29:50,790 --> 00:30:00,870
others because the scripts lives in user

00:29:54,150 --> 00:30:04,590
Lib version TCL rather than user bin so

00:30:00,870 --> 00:30:06,210
I don't know whether we can just multi

00:30:04,590 --> 00:30:08,130
watch the scripts and have the different

00:30:06,210 --> 00:30:09,030
have the version for that architecture

00:30:08,130 --> 00:30:10,470
so that's the other thing you could do

00:30:09,030 --> 00:30:13,770
with these is you could install each one

00:30:10,470 --> 00:30:15,419
and use a Lib much foo instead and then

00:30:13,770 --> 00:30:17,910
just keep them exactly as they are and

00:30:15,419 --> 00:30:19,140
make sure the build can find them right

00:30:17,910 --> 00:30:21,650
I mean a lot of the problems were trying

00:30:19,140 --> 00:30:23,850
to get rid of any of these per library

00:30:21,650 --> 00:30:26,280
config scripts that are running around

00:30:23,850 --> 00:30:27,750
right now is it's not so much persuading

00:30:26,280 --> 00:30:31,490
upstream that they should use package

00:30:27,750 --> 00:30:34,320
config instead a lot of it is to do with

00:30:31,490 --> 00:30:36,960
these are now interfaces that are

00:30:34,320 --> 00:30:39,360
exposed to the software that builds on

00:30:36,960 --> 00:30:41,790
them yeah and there's gonna be a long

00:30:39,360 --> 00:30:45,809
transition period if if we're saying we

00:30:41,790 --> 00:30:47,940
have to fix these upstream now the idea

00:30:45,809 --> 00:30:51,600
of moving the tools into an architecture

00:30:47,940 --> 00:30:53,940
qualified path and just using a path

00:30:51,600 --> 00:30:56,250
setting in the build as is one

00:30:53,940 --> 00:30:59,490
possibility that that's the transition

00:30:56,250 --> 00:31:02,700
we could do relatively quickly just

00:30:59,490 --> 00:31:05,340
within Debian because you have to poke

00:31:02,700 --> 00:31:08,700
the related set of packages to to export

00:31:05,340 --> 00:31:09,840
the right path I'm in the environment so

00:31:08,700 --> 00:31:11,400
yes you mean anything that builds

00:31:09,840 --> 00:31:14,820
against one of these libraries generally

00:31:11,400 --> 00:31:18,110
uses config dash dash C flags to make

00:31:14,820 --> 00:31:20,460
sure it's built with the same C flags

00:31:18,110 --> 00:31:23,309
yeah I haven't got statistics on just

00:31:20,460 --> 00:31:27,900
how many uses there are of these things

00:31:23,309 --> 00:31:31,950
I haven't seen huge numbers but as you

00:31:27,900 --> 00:31:39,419
say it is an interface okay

00:31:31,950 --> 00:31:41,730
and it is it is possible to make some of

00:31:39,419 --> 00:31:43,620
the old convict strips just to be a an

00:31:41,730 --> 00:31:47,159
empty wrapper around Derrida package

00:31:43,620 --> 00:31:59,789
convict all so the the upstream package

00:31:47,159 --> 00:32:01,799
could provide the PC data like over

00:31:59,789 --> 00:32:08,909
there yeah you can work around some of

00:32:01,799 --> 00:32:13,620
those we need more mics it'll be a lot

00:32:08,909 --> 00:32:15,539
quicker well you will get more problems

00:32:13,620 --> 00:32:17,519
than yourself it's better to fix it

00:32:15,539 --> 00:32:20,760
properly with package config files to

00:32:17,519 --> 00:32:24,740
begin with without wrapper scripts

00:32:20,760 --> 00:32:24,740
because it's gonna introduce more bugs

00:32:29,389 --> 00:32:33,750
the main problem with trying to turn the

00:32:32,309 --> 00:32:36,720
script into a wrapper script around

00:32:33,750 --> 00:32:38,370
package config and the reason I haven't

00:32:36,720 --> 00:32:40,260
actually gone out and done this for

00:32:38,370 --> 00:32:45,019
instance for free type which I maintain

00:32:40,260 --> 00:32:48,120
is that you don't get the triplet logic

00:32:45,019 --> 00:32:50,039
so if you actually have to get the PC

00:32:48,120 --> 00:32:52,080
file which is architecture-specific and

00:32:50,039 --> 00:32:53,850
you're not using the package config

00:32:52,080 --> 00:32:55,860
wrapper that has the triplet qualifier

00:32:53,850 --> 00:32:57,840
which auto companies to work out which

00:32:55,860 --> 00:32:59,220
version to call and so we don't have any

00:32:57,840 --> 00:33:01,470
interfaces to do that so that's why I've

00:32:59,220 --> 00:33:03,830
not done this the right the right answer

00:33:01,470 --> 00:33:06,269
is going to require some auto conferee

00:33:03,830 --> 00:33:07,769
fixing in the build system of the

00:33:06,269 --> 00:33:09,240
reverse dependencies so you might as

00:33:07,769 --> 00:33:12,139
well just have them all use package

00:33:09,240 --> 00:33:12,139
config directly anyway

00:33:17,650 --> 00:33:25,520
right well so we got here earlier so

00:33:20,210 --> 00:33:28,130
package config so triplet foo so I think

00:33:25,520 --> 00:33:31,450
this general concept is useful to call

00:33:28,130 --> 00:33:35,060
anything architectures specific as

00:33:31,450 --> 00:33:37,460
triplet thing which we can probably do

00:33:35,060 --> 00:33:39,200
in quite a lot of places also come

00:33:37,460 --> 00:33:42,620
already understands that so it's

00:33:39,200 --> 00:33:44,090
convenient to use that mechanism we've

00:33:42,620 --> 00:33:46,940
done it for package configured it works

00:33:44,090 --> 00:33:49,490
so there's there's package config cross

00:33:46,940 --> 00:33:52,190
wrapper is one file and all it does is

00:33:49,490 --> 00:33:55,310
sets the path according to the triplet

00:33:52,190 --> 00:33:58,930
name you called it with and then does

00:33:55,310 --> 00:34:04,790
its normal thing and that works fine

00:33:58,930 --> 00:34:06,680
so you need a package for each

00:34:04,790 --> 00:34:13,640
architecture which just contains the

00:34:06,680 --> 00:34:15,110
link which is kind of sucky you can we

00:34:13,640 --> 00:34:16,940
could just put them all in in cross

00:34:15,110 --> 00:34:20,810
support and have loads of links but the

00:34:16,940 --> 00:34:22,310
problem is that then we have then we

00:34:20,810 --> 00:34:24,080
have the link with no package config

00:34:22,310 --> 00:34:26,330
behind it maybe and I don't know whether

00:34:24,080 --> 00:34:29,140
if Auto can't for checks that it's

00:34:26,330 --> 00:34:31,669
working I guess that won't matter that

00:34:29,140 --> 00:34:33,710
it's kind of nice if we could just ship

00:34:31,669 --> 00:34:35,690
the whole caboodle rather than have

00:34:33,710 --> 00:34:38,810
hundreds of tiny packages containing

00:34:35,690 --> 00:34:39,800
links for not just package config but a

00:34:38,810 --> 00:34:43,160
whole lot of other things as well

00:34:39,800 --> 00:34:47,179
potentially at the moment the the D

00:34:43,160 --> 00:34:49,520
package cross cross config files it just

00:34:47,179 --> 00:34:51,350
it does just lump everything onto your

00:34:49,520 --> 00:34:53,419
system so you installed it back across

00:34:51,350 --> 00:34:56,300
and suddenly your system knows how what

00:34:53,419 --> 00:34:59,930
the Indian s is of spark 32 and all this

00:34:56,300 --> 00:35:01,520
kind of stuff because that's not a

00:34:59,930 --> 00:35:03,260
problem for Auto Kampf because of the

00:35:01,520 --> 00:35:04,970
way those files get used but it does

00:35:03,260 --> 00:35:08,360
mean that we've already got a mechanism

00:35:04,970 --> 00:35:09,890
to spit those out into individual binary

00:35:08,360 --> 00:35:11,630
packages and then you've got packages

00:35:09,890 --> 00:35:13,940
that aren't just same links they have

00:35:11,630 --> 00:35:16,250
got useful data in them I say mean mean

00:35:13,940 --> 00:35:18,470
if we split Deepak you spit them there

00:35:16,250 --> 00:35:20,420
then you've got somewhere up into there

00:35:18,470 --> 00:35:22,310
and everything else support to small to

00:35:20,420 --> 00:35:23,930
put yeah maybe that would make more

00:35:22,310 --> 00:35:26,210
sense

00:35:23,930 --> 00:35:30,120
[Music]

00:35:26,210 --> 00:35:34,250
so at the moment there is a package

00:35:30,120 --> 00:35:38,100
conflict cross package which generates

00:35:34,250 --> 00:35:40,710
13 tiny packages that's what I bunty's

00:35:38,100 --> 00:35:49,850
done that's actually comes out of the

00:35:40,710 --> 00:35:51,390
tool chain base foo package and I'm

00:35:49,850 --> 00:35:52,920
increasingly coming around to the idea

00:35:51,390 --> 00:35:54,390
that I think I want to multi art support

00:35:52,920 --> 00:35:57,380
packages to dump a load of stuff in

00:35:54,390 --> 00:36:01,800
Syria across support packages to dump

00:35:57,380 --> 00:36:05,420
things into yeah and this object

00:36:01,800 --> 00:36:07,470
introspection thing which is awkward

00:36:05,420 --> 00:36:10,410
there's a wiki page that I should have

00:36:07,470 --> 00:36:21,750
put the link in to which is here

00:36:10,410 --> 00:36:23,640
somewhere here we are yes magic so I

00:36:21,750 --> 00:36:25,920
still haven't found anyone to explain to

00:36:23,640 --> 00:36:27,830
me exactly how this works and what it's

00:36:25,920 --> 00:36:31,380
used for

00:36:27,830 --> 00:36:33,360
but this is a reasonable description so

00:36:31,380 --> 00:36:37,530
anything you any binary you build that

00:36:33,360 --> 00:36:39,390
uses G object library can be scanned to

00:36:37,530 --> 00:36:41,610
find which the objects it used and

00:36:39,390 --> 00:36:44,340
because the objects know about I don't

00:36:41,610 --> 00:36:46,680
know what it is they do you can generate

00:36:44,340 --> 00:36:49,530
an API from that that's my understanding

00:36:46,680 --> 00:36:52,620
and quite a lot of the genome stuff uses

00:36:49,530 --> 00:36:54,120
that and it all makes sense because you

00:36:52,620 --> 00:36:55,860
build things and then you build the API

00:36:54,120 --> 00:36:58,200
from it and the docs from it and

00:36:55,860 --> 00:37:01,890
everything and it all matches up so you

00:36:58,200 --> 00:37:08,400
can't screw it up it's just not cross

00:37:01,890 --> 00:37:14,610
friendly so someone should get really

00:37:08,400 --> 00:37:15,690
enthused and make it work I don't have

00:37:14,610 --> 00:37:17,310
anything useful to say about at the

00:37:15,690 --> 00:37:20,820
moment at the moment we've been able to

00:37:17,310 --> 00:37:22,110
just not run it and four core packages

00:37:20,820 --> 00:37:25,200
that seems to work okay but I bet you

00:37:22,110 --> 00:37:28,490
can't build gnome without at least some

00:37:25,200 --> 00:37:28,490
object introspection working

00:37:29,720 --> 00:37:34,730
anyone have any

00:37:32,360 --> 00:37:38,600
opinions suggestions people we should

00:37:34,730 --> 00:37:43,340
hassle light oh no no okay

00:37:38,600 --> 00:37:44,780
we don't know it's not critical right

00:37:43,340 --> 00:37:47,270
now we're trying to bootstrap core

00:37:44,780 --> 00:37:49,550
systems you can kind of ignore this if

00:37:47,270 --> 00:37:52,460
you want to cross build stuff with

00:37:49,550 --> 00:37:54,190
desktop packages in you start to care

00:37:52,460 --> 00:37:59,990
about this

00:37:54,190 --> 00:38:03,150
that was my list of issues

00:37:59,990 --> 00:38:03,150
[Music]

00:38:03,460 --> 00:38:09,110
there's the QEMU problem I suppose so

00:38:07,760 --> 00:38:12,410
quite a lot of this you can gloss over

00:38:09,110 --> 00:38:14,450
by just installing QEMU I don't know

00:38:12,410 --> 00:38:16,280
whether it so now your binders will run

00:38:14,450 --> 00:38:22,910
but they might still run on the wrong

00:38:16,280 --> 00:38:26,090
files but it lets you get further it's

00:38:22,910 --> 00:38:29,000
not much use for new arch bootstraps

00:38:26,090 --> 00:38:31,450
where Combe you doesn't exist which is

00:38:29,000 --> 00:38:35,390
currently what I actually care about so

00:38:31,450 --> 00:38:37,250
I'm mostly avoiding it but it I guess

00:38:35,390 --> 00:38:39,230
one of the things I'd like to do and the

00:38:37,250 --> 00:38:40,700
rebuild D was have it running building

00:38:39,230 --> 00:38:41,900
everything with queuing without just to

00:38:40,700 --> 00:38:43,250
see how much difference it made but

00:38:41,900 --> 00:38:45,190
unfortunately that was all good to

00:38:43,250 --> 00:38:49,490
configure because rebuild is a bit thick

00:38:45,190 --> 00:38:50,960
so I haven't yet if anyone is enthused

00:38:49,490 --> 00:38:54,920
to try that that would also be very

00:38:50,960 --> 00:38:57,440
interesting I'm pretty sure that the the

00:38:54,920 --> 00:39:00,350
config scripts and the cache in scripts

00:38:57,440 --> 00:39:02,000
they look for things in Nam tupolev

00:39:00,350 --> 00:39:04,550
based paths and they will just you they

00:39:02,000 --> 00:39:07,850
will just use whatever they find in so

00:39:04,550 --> 00:39:10,430
the quite easily pick up the wrong yes

00:39:07,850 --> 00:39:13,220
but like to get them wrong Arkenstone

00:39:10,430 --> 00:39:14,570
stuff so but that's a quite an easy

00:39:13,220 --> 00:39:17,600
check because you can just do it emptied

00:39:14,570 --> 00:39:19,220
MD for checksum compared to the original

00:39:17,600 --> 00:39:20,720
architecture of the content of the file

00:39:19,220 --> 00:39:26,270
and you should find one of those

00:39:20,720 --> 00:39:27,850
actually are I to eight six copies okay

00:39:26,270 --> 00:39:30,350
okay so that's the other thing which is

00:39:27,850 --> 00:39:34,040
definitely of interests and needs doing

00:39:30,350 --> 00:39:36,230
is tools to check so it could be linty

00:39:34,040 --> 00:39:39,680
and checks or some other tool to

00:39:36,230 --> 00:39:40,940
actually look at the output package so I

00:39:39,680 --> 00:39:42,680
mean I've got a part of cross built

00:39:40,940 --> 00:39:44,080
binaries which currently aren't exposed

00:39:42,680 --> 00:39:46,140
on the net but they could be very easily

00:39:44,080 --> 00:39:47,670
and just come

00:39:46,140 --> 00:39:49,230
pairing the differences between the

00:39:47,670 --> 00:39:50,940
cross bill package in the normal package

00:39:49,230 --> 00:39:52,500
you know how many files are missing how

00:39:50,940 --> 00:39:54,599
many files the wrong architecture and

00:39:52,500 --> 00:39:58,680
then look at the binaries themselves and

00:39:54,599 --> 00:40:00,240
say do I have the same elf header parts

00:39:58,680 --> 00:40:03,539
does it look like it might be the same

00:40:00,240 --> 00:40:05,519
thing I think if we had those QA tests

00:40:03,539 --> 00:40:08,539
would be a lot more convinced that what

00:40:05,519 --> 00:40:11,849
we were building was actually useful I

00:40:08,539 --> 00:40:13,890
have done any work at all on that I'd

00:40:11,849 --> 00:40:15,799
love somebody to if we could just knock

00:40:13,890 --> 00:40:18,619
up a few tests it'll be really useful

00:40:15,799 --> 00:40:21,390
and then we could start running them

00:40:18,619 --> 00:40:24,359
so that's will be fun to play with this

00:40:21,390 --> 00:40:28,920
week maybe does anyone have anything

00:40:24,359 --> 00:40:30,720
else they've thought of noticed I guess

00:40:28,920 --> 00:40:33,440
I could show you the webpage bit just

00:40:30,720 --> 00:40:33,440
because it's quite pretty

00:40:42,229 --> 00:40:47,539
no a lot of these

00:40:54,090 --> 00:40:57,290
- again

00:41:04,390 --> 00:41:17,390
so yes this is the output you get for

00:41:08,840 --> 00:41:21,010
that's unstable lots of packages what

00:41:17,390 --> 00:41:25,280
architecture it built for and when and

00:41:21,010 --> 00:41:26,330
what went wrong so as you can see we

00:41:25,280 --> 00:41:29,000
have a lot of build that fails

00:41:26,330 --> 00:41:31,330
especially here and you can just click

00:41:29,000 --> 00:41:33,800
on the log to see what bath'd

00:41:31,330 --> 00:41:37,040
if your window is the right size you'll

00:41:33,800 --> 00:41:40,280
be able to actually see it let's try

00:41:37,040 --> 00:41:44,900
that yeah so generally right down the

00:41:40,280 --> 00:41:47,840
bottom it says depends on bin utils but

00:41:44,900 --> 00:41:48,800
it's not going to be installed it sounds

00:41:47,840 --> 00:41:51,580
like something that ought to be working

00:41:48,800 --> 00:41:55,220
doesn't it I know what went wrong there

00:41:51,580 --> 00:41:56,870
so this is net it's now very easy to see

00:41:55,220 --> 00:42:00,320
whether your package cross builds or not

00:41:56,870 --> 00:42:04,010
go and check if it doesn't see if you

00:42:00,320 --> 00:42:05,450
can help it in the case where it's a

00:42:04,010 --> 00:42:06,860
build dependency problem there's not

00:42:05,450 --> 00:42:08,750
much you as the package manager can do

00:42:06,860 --> 00:42:14,300
but if it started to build and failed

00:42:08,750 --> 00:42:15,980
and then you can fix that and we love

00:42:14,300 --> 00:42:23,060
more people to be doing this because

00:42:15,980 --> 00:42:24,950
whilst it runs along it's quite slow is

00:42:23,060 --> 00:42:27,710
there any way you can pass those logs

00:42:24,950 --> 00:42:29,150
and actually get a listing of the ones

00:42:27,710 --> 00:42:31,250
that being blamed for being an

00:42:29,150 --> 00:42:32,540
installable yes there's all sorts of

00:42:31,250 --> 00:42:35,000
things you could do with that log pile

00:42:32,540 --> 00:42:37,040
and generate much more exciting webpage

00:42:35,000 --> 00:42:39,140
so I mean 9 my error message is on the

00:42:37,040 --> 00:42:41,270
end a bit low-tech at the moment it's so

00:42:39,140 --> 00:42:46,580
I've got I've got some nice orc scripts

00:42:41,270 --> 00:42:48,380
which suck out the some things it

00:42:46,580 --> 00:42:50,270
recognizes you know unable to determine

00:42:48,380 --> 00:42:51,860
build status probably failed that

00:42:50,270 --> 00:42:53,540
usually means something like didn't

00:42:51,860 --> 00:42:56,080
actually download any sources it hardly

00:42:53,540 --> 00:42:58,640
started but a lot of the time you've got

00:42:56,080 --> 00:43:00,380
failed build depths or met fences but

00:42:58,640 --> 00:43:03,440
doesn't it doesn't list here which

00:43:00,380 --> 00:43:06,440
packages it was and a bit more grip edge

00:43:03,440 --> 00:43:10,070
could work that out so it started off as

00:43:06,440 --> 00:43:11,360
as some orc and this page is actually

00:43:10,070 --> 00:43:13,100
now generated by a Perl script which

00:43:11,360 --> 00:43:14,119
isn't quite as disgusting and in fact

00:43:13,100 --> 00:43:15,319
that the grep

00:43:14,119 --> 00:43:19,249
it should just go into the Perl script

00:43:15,319 --> 00:43:20,900
and be one thing so yeah that's in the X

00:43:19,249 --> 00:43:22,220
builder package if you wish to download

00:43:20,900 --> 00:43:22,670
it and make it less crap that will be

00:43:22,220 --> 00:43:25,730
great

00:43:22,670 --> 00:43:26,990
especially cuz you can write Perl so

00:43:25,730 --> 00:43:28,609
yeah there's there's that we could also

00:43:26,990 --> 00:43:30,109
what would actually nice was historical

00:43:28,609 --> 00:43:32,930
statistics so then you can find out the

00:43:30,109 --> 00:43:34,700
state of the last time things were built

00:43:32,930 --> 00:43:37,069
so the moment if there's a successful

00:43:34,700 --> 00:43:39,200
build it goes into Reb repro and it

00:43:37,069 --> 00:43:41,480
never tries again so we don't get to

00:43:39,200 --> 00:43:44,420
find out if in fact we broke it later at

00:43:41,480 --> 00:43:47,059
the moment but that's like Debian you

00:43:44,420 --> 00:43:51,140
know as long as we built it once that

00:43:47,059 --> 00:43:52,190
counts until there's a new version of

00:43:51,140 --> 00:43:56,329
the source and then we check we can

00:43:52,190 --> 00:43:58,369
still build that so yeah it will be nice

00:43:56,329 --> 00:44:00,109
if we had you know today this many

00:43:58,369 --> 00:44:02,329
packages built and yesterday many and

00:44:00,109 --> 00:44:05,329
last week just so we could see whether

00:44:02,329 --> 00:44:08,720
we were going up down so yeah there's a

00:44:05,329 --> 00:44:10,400
lot of statistics we could do I ideally

00:44:08,720 --> 00:44:11,869
I was originally I thought if I used to

00:44:10,400 --> 00:44:13,579
build the infrastructure then we could

00:44:11,869 --> 00:44:14,779
use the PG status stuff that we use the

00:44:13,579 --> 00:44:15,319
existing building thing and that would

00:44:14,779 --> 00:44:20,539
be great

00:44:15,319 --> 00:44:22,640
but that is dependent on the build D

00:44:20,539 --> 00:44:24,259
database format it's quite totally tied

00:44:22,640 --> 00:44:26,779
to it so unless you're actually using

00:44:24,259 --> 00:44:29,109
our crazy build these stuff you can't

00:44:26,779 --> 00:44:31,339
use PG status which is annoying so

00:44:29,109 --> 00:44:34,989
because I picked a much simpler build D

00:44:31,339 --> 00:44:38,589
I had to write my own crappy interface

00:44:34,989 --> 00:44:41,569
so yeah and you room for improvement oh

00:44:38,589 --> 00:44:44,359
well I think you're probably all bored

00:44:41,569 --> 00:44:52,290
now um so we should stop unless anyone

00:44:44,359 --> 00:44:56,280
has anything else to ask about okay

00:44:52,290 --> 00:44:58,200
we're done thank you very much sorry ten

00:44:56,280 --> 00:45:02,940
minutes yeah I know but we're finished

00:44:58,200 --> 00:45:05,250
it's like there's no point sitting here

00:45:02,940 --> 00:45:06,540
unless anyone actually has pressing

00:45:05,250 --> 00:45:09,050
issues to deal with we can all go and

00:45:06,540 --> 00:45:09,050
drink coffee

00:45:09,630 --> 00:45:14,820

YouTube URL: https://www.youtube.com/watch?v=kEDc1UvekU4


