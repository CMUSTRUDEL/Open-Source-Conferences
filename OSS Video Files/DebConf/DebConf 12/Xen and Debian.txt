Title: Xen and Debian
Publication date: 2017-11-28
Playlist: DebConf 12
Description: 
	by Ian Campbell

At: DebConf12
https://debconf12.debconf.org/
Room: Aula Magna
Scheduled start: 2012-07-12 15:00:00
Captions: 
	00:00:00,359 --> 00:00:03,929
thanks all for coming especially if

00:00:02,790 --> 00:00:06,240
you're not just sheltering from the rain

00:00:03,929 --> 00:00:07,610
I think it stopped and now is your

00:00:06,240 --> 00:00:11,700
chance

00:00:07,610 --> 00:00:15,630
alright so I need to talk about Zen and

00:00:11,700 --> 00:00:16,770
its relationship with Debian before we

00:00:15,630 --> 00:00:18,960
get into that I thought maybe I'll just

00:00:16,770 --> 00:00:20,880
give a brief history of Zen and sort of

00:00:18,960 --> 00:00:23,939
talk about its architecture and define

00:00:20,880 --> 00:00:30,060
some of the terminology that i'm going

00:00:23,939 --> 00:00:31,859
to be using so then span out of the xeno

00:00:30,060 --> 00:00:33,410
service project which was a research

00:00:31,859 --> 00:00:36,719
project at the University of Cambridge

00:00:33,410 --> 00:00:40,110
and an attorney not to read off the

00:00:36,719 --> 00:00:41,520
slide but this is this is from there the

00:00:40,110 --> 00:00:43,110
research project web page so the xeno

00:00:41,520 --> 00:00:44,879
server project is building a public

00:00:43,110 --> 00:00:46,530
infrastructure for wide area distributed

00:00:44,879 --> 00:00:48,239
computing we envision a world in which

00:00:46,530 --> 00:00:50,100
Xena server execution platforms will be

00:00:48,239 --> 00:00:51,210
scattered across the globe and available

00:00:50,100 --> 00:00:54,140
for any member of the public to submit

00:00:51,210 --> 00:00:54,140
code for execution

00:01:16,720 --> 00:01:21,250
right and so it was spun out into a

00:01:18,310 --> 00:01:25,360
separate project version one point nor

00:01:21,250 --> 00:01:27,280
was in late 2003 they weren't fairly

00:01:25,360 --> 00:01:29,440
quickly to talk nor a bit sort of major

00:01:27,280 --> 00:01:31,170
a architecting and then again another

00:01:29,440 --> 00:01:35,110
major a architecting we had version 3

00:01:31,170 --> 00:01:36,370
towards the end of 2005 and that's the

00:01:35,110 --> 00:01:37,960
architecture which we still used today

00:01:36,370 --> 00:01:39,910
we've we've gone past four but annoyed

00:01:37,960 --> 00:01:42,820
but the compatibility and the

00:01:39,910 --> 00:01:45,490
architecture remain the same currently

00:01:42,820 --> 00:01:50,110
we're at Xen 4.1 and we're currently

00:01:45,490 --> 00:01:53,800
frozen for 4.2 so some basics and

00:01:50,110 --> 00:01:55,510
concepts Xen is essentially what we call

00:01:53,800 --> 00:01:58,780
a type 1 hypervisor means it runs

00:01:55,510 --> 00:02:00,490
directly on the hardware as opposed to a

00:01:58,780 --> 00:02:03,760
type 2 hypervisor which would run in a

00:02:00,490 --> 00:02:04,960
host operating system now there's a

00:02:03,760 --> 00:02:08,530
little bit of a twist with Xen it's not

00:02:04,960 --> 00:02:10,179
quite exactly a type one because rather

00:02:08,530 --> 00:02:11,800
than having all the device drivers and

00:02:10,179 --> 00:02:13,570
what-have-you in the hypervisor itself

00:02:11,800 --> 00:02:16,870
what we do is we have one or more

00:02:13,570 --> 00:02:19,300
privileged domains which are able to see

00:02:16,870 --> 00:02:21,700
the hardware and so you run your drivers

00:02:19,300 --> 00:02:24,310
in those and they and use those provide

00:02:21,700 --> 00:02:27,880
services to actual guest VMs so

00:02:24,310 --> 00:02:29,650
typically in a nor Zen system you have

00:02:27,880 --> 00:02:32,140
one such privilege domain which we call

00:02:29,650 --> 00:02:33,670
domain zero or Dom zero and this is the

00:02:32,140 --> 00:02:35,590
first domain which is loaded on boo and

00:02:33,670 --> 00:02:38,530
it contains you know your NIC drivers

00:02:35,590 --> 00:02:40,840
and your storage drivers and tool stacks

00:02:38,530 --> 00:02:45,850
and host console access and things like

00:02:40,840 --> 00:02:47,350
that obviously as well as the control

00:02:45,850 --> 00:02:49,420
domains we have you know your actual

00:02:47,350 --> 00:02:51,610
guests which is where your your

00:02:49,420 --> 00:02:55,239
customers or users can run their

00:02:51,610 --> 00:02:56,500
workloads and things but one of the

00:02:55,239 --> 00:02:57,730
interesting things about the Sens

00:02:56,500 --> 00:03:00,010
architecture is that you can actually

00:02:57,730 --> 00:03:02,500
split up this privilege domain and you

00:03:00,010 --> 00:03:03,910
can take services out of it into a

00:03:02,500 --> 00:03:05,590
variety of different types of service

00:03:03,910 --> 00:03:08,070
domains drive domains subdomains they're

00:03:05,590 --> 00:03:10,480
all terms will come across in a bit

00:03:08,070 --> 00:03:11,830
which kind of lets CD privileged those

00:03:10,480 --> 00:03:14,800
down to their minimum privilege level

00:03:11,830 --> 00:03:16,690
and it gives you you know good

00:03:14,800 --> 00:03:19,410
properties for robustness and isolation

00:03:16,690 --> 00:03:19,410
and security

00:03:22,190 --> 00:03:32,310
breathing how's that yeah so that's

00:03:29,400 --> 00:03:34,560
that's that so guest domains so there's

00:03:32,310 --> 00:03:36,120
basically two forms of guest domain the

00:03:34,560 --> 00:03:37,530
first of which and the most

00:03:36,120 --> 00:03:40,920
long-standing is a paravirtualized

00:03:37,530 --> 00:03:44,190
domain or a PV domain these have been

00:03:40,920 --> 00:03:46,410
around that slides will go on horribly

00:03:44,190 --> 00:03:48,210
strange isn't it

00:03:46,410 --> 00:03:51,060
these have been around since basically

00:03:48,210 --> 00:03:52,650
since the very early days and the key

00:03:51,060 --> 00:03:54,690
thing about a personalized domain is

00:03:52,650 --> 00:03:56,940
that the guest knows that it's running

00:03:54,690 --> 00:03:58,350
virtualized and it will rather than

00:03:56,940 --> 00:04:00,120
doing things directly with the hardware

00:03:58,350 --> 00:04:01,290
it'll it'll make hyper calls to the

00:04:00,120 --> 00:04:04,320
hypervisor and do things in a

00:04:01,290 --> 00:04:06,500
virtualization friendly way which means

00:04:04,320 --> 00:04:08,910
that they can be you know pretty fast

00:04:06,500 --> 00:04:10,320
the disadvantage is though that you have

00:04:08,910 --> 00:04:12,240
to modify the guest kernel and that's a

00:04:10,320 --> 00:04:13,380
lot of work and means that you have lots

00:04:12,240 --> 00:04:18,060
of patches to get upstream and that's

00:04:13,380 --> 00:04:20,670
something we'll talk about later so APB

00:04:18,060 --> 00:04:23,670
domain has access only to

00:04:20,670 --> 00:04:25,440
paravirtualized devices and how they

00:04:23,670 --> 00:04:26,910
work is you have a front-end in the

00:04:25,440 --> 00:04:28,710
guests and a back-end in the control

00:04:26,910 --> 00:04:31,860
domain and they communicate with shared

00:04:28,710 --> 00:04:34,080
memory there's a PD block protocol and

00:04:31,860 --> 00:04:35,390
pretty Network protocol and so data gets

00:04:34,080 --> 00:04:37,620
transferred to the back-end which then

00:04:35,390 --> 00:04:40,140
bridges it to a real NIC or writes it to

00:04:37,620 --> 00:04:45,860
an l vm volume or you know does the

00:04:40,140 --> 00:04:48,110
appropriate back-end e type thing so we

00:04:45,860 --> 00:04:50,130
talked a little bit about driver domains

00:04:48,110 --> 00:04:51,600
so as I said earlier you can take

00:04:50,130 --> 00:04:52,560
functionality out of dom 0 and put it

00:04:51,600 --> 00:04:54,540
into their own domain and one of the

00:04:52,560 --> 00:04:56,910
sort of easiest things you can do is to

00:04:54,540 --> 00:04:59,970
take drivers out of domain 0 and put

00:04:56,910 --> 00:05:01,169
them into their own domain so you might

00:04:59,970 --> 00:05:03,419
take your disk or your network and put

00:05:01,169 --> 00:05:04,950
them in that in a domain and then the

00:05:03,419 --> 00:05:09,960
guest instead of talking to the main 0

00:05:04,950 --> 00:05:11,720
it talks to this drive domain so you

00:05:09,960 --> 00:05:14,310
know that's this good security isolation

00:05:11,720 --> 00:05:17,520
all that kind of good stuff there it

00:05:14,310 --> 00:05:18,419
means that maybe if you know the Droid

00:05:17,520 --> 00:05:21,270
main doesn't have run the same kernel

00:05:18,419 --> 00:05:23,130
even as dom 0 so maybe if you like the

00:05:21,270 --> 00:05:24,840
bsd PF firewall and you want to run that

00:05:23,130 --> 00:05:28,320
instead but you want to keep Tom zero as

00:05:24,840 --> 00:05:29,640
Linux then you have that option maybe

00:05:28,320 --> 00:05:31,560
you've got a bit of a shun key driver

00:05:29,640 --> 00:05:32,820
from some vendor and you know it crashes

00:05:31,560 --> 00:05:34,689
a lot so you can put that in his own

00:05:32,820 --> 00:05:36,549
domain and you can restart that without

00:05:34,689 --> 00:05:40,449
- take the whole host down which a

00:05:36,549 --> 00:05:42,549
pretty good thing so the other forum

00:05:40,449 --> 00:05:45,479
guest domain is an HTM domain the

00:05:42,549 --> 00:05:48,489
hardware virtual machine and these use

00:05:45,479 --> 00:05:51,939
hardware virtualization extensions which

00:05:48,489 --> 00:05:53,409
privatize means don't require to provide

00:05:51,939 --> 00:05:55,449
a complete PC emulation type

00:05:53,409 --> 00:05:56,589
virtualization so the guest or operating

00:05:55,449 --> 00:06:00,009
system thinks it's running on a normal

00:05:56,589 --> 00:06:03,610
PC there is emulation here so it is

00:06:00,009 --> 00:06:05,379
Slava you know mainly IO is pretty slow

00:06:03,610 --> 00:06:08,169
but the advantage is that you don't need

00:06:05,379 --> 00:06:10,019
any special knowledge in the guest

00:06:08,169 --> 00:06:14,739
Colonel it doesn't really need any

00:06:10,019 --> 00:06:16,509
special code so for purposes of i/o

00:06:14,739 --> 00:06:17,649
emulation when when the guest tries to

00:06:16,509 --> 00:06:20,289
do some IO we trap that in the

00:06:17,649 --> 00:06:22,059
hypervisor and we shuffle that off to or

00:06:20,289 --> 00:06:24,909
call the device model so the device

00:06:22,059 --> 00:06:27,039
model is a process per guest domain /

00:06:24,909 --> 00:06:29,589
hvm guesstimate which runs in your

00:06:27,039 --> 00:06:30,999
control stack I mean it's a qmu based if

00:06:29,589 --> 00:06:32,769
they see qmu with all the cpu emulation

00:06:30,999 --> 00:06:37,269
stuff ripped out and so it just emulates

00:06:32,769 --> 00:06:39,209
Nicks and PCI bus is and storage

00:06:37,269 --> 00:06:41,399
controllers and what-have-you but

00:06:39,209 --> 00:06:43,779
there's a another opportunity for

00:06:41,399 --> 00:06:45,189
disaggregating here so that's what you

00:06:43,779 --> 00:06:47,229
can actually do is you can take that

00:06:45,189 --> 00:06:49,209
device model and you can link it against

00:06:47,229 --> 00:06:51,939
I think mini Oz which is a little

00:06:49,209 --> 00:06:54,699
monolithic kernel that runs directly as

00:06:51,939 --> 00:06:57,849
a PV guest on the hypervisor and you can

00:06:54,699 --> 00:06:59,469
have one of those per domain which takes

00:06:57,849 --> 00:07:03,309
all that emulation code you know which

00:06:59,469 --> 00:07:05,999
is notoriously tricky in it prone to

00:07:03,309 --> 00:07:08,649
bugs and you can stick that into a

00:07:05,999 --> 00:07:12,059
domain which is only privileged to do

00:07:08,649 --> 00:07:14,379
things against its partner guest domain

00:07:12,059 --> 00:07:18,789
so you know that encapsulates that

00:07:14,379 --> 00:07:21,429
privilege out of your main tool stack so

00:07:18,789 --> 00:07:23,169
I said there was two kinds of domain it

00:07:21,429 --> 00:07:26,050
was a bit of a lie there's actually a

00:07:23,169 --> 00:07:28,029
sort of a spectrum and one of the things

00:07:26,050 --> 00:07:30,039
that you have is PV on hvm so that's

00:07:28,029 --> 00:07:32,979
taking a standard ACM guest and giving

00:07:30,039 --> 00:07:36,069
it the ability to use several PV

00:07:32,979 --> 00:07:37,749
interfaces this has you know it kind of

00:07:36,069 --> 00:07:38,919
makes a match of the advantages of both

00:07:37,749 --> 00:07:42,219
the other types you have the same

00:07:38,919 --> 00:07:44,919
install experiences native with pieces

00:07:42,219 --> 00:07:47,769
like hardware but I mean the main thing

00:07:44,919 --> 00:07:48,550
you know if you're not going to do any

00:07:47,769 --> 00:07:49,960
other pvt or

00:07:48,550 --> 00:07:51,880
um guess the thing you really should do

00:07:49,960 --> 00:07:55,000
is device drivers for your neck in your

00:07:51,880 --> 00:07:56,680
desk we're talking you know gigabits a

00:07:55,000 --> 00:07:58,840
second sort of megabits a second on your

00:07:56,680 --> 00:08:01,750
on your neck if you use PV Ralph and

00:07:58,840 --> 00:08:04,720
emulated there are some other ones you

00:08:01,750 --> 00:08:07,210
can have PD interrupts interrupts design

00:08:04,720 --> 00:08:10,720
to avoid exist back to the hypervisor

00:08:07,210 --> 00:08:12,460
you'll to do vo eyes PB spin locks means

00:08:10,720 --> 00:08:14,530
you're not spinning waiting for another

00:08:12,460 --> 00:08:16,810
CPU which isn't even running you know

00:08:14,530 --> 00:08:19,830
you can actually sleep instead

00:08:16,810 --> 00:08:23,620
and so the PB on um give you a bit of an

00:08:19,830 --> 00:08:26,680
interesting trade-off between on the

00:08:23,620 --> 00:08:29,260
spectrum between pv h vm interesting one

00:08:26,680 --> 00:08:31,240
of those is the memory so on pv you

00:08:29,260 --> 00:08:32,620
would do one of the main things that you

00:08:31,240 --> 00:08:36,570
do to paralyze guess is it drives the

00:08:32,620 --> 00:08:38,320
page tables directly now that means that

00:08:36,570 --> 00:08:40,350
patient a lot dates are relatively

00:08:38,320 --> 00:08:42,880
expensive but things like TLB misses are

00:08:40,350 --> 00:08:45,280
native performance whereas if you've got

00:08:42,880 --> 00:08:46,900
nested paging which is a1 HTM you have

00:08:45,280 --> 00:08:49,210
the hardware did you know provide the

00:08:46,900 --> 00:08:51,580
illusion of a second level of page

00:08:49,210 --> 00:08:53,680
tables then patient what dates are

00:08:51,580 --> 00:08:55,930
actually cheap but TLB miss is very

00:08:53,680 --> 00:08:57,640
expensive because for every level of the

00:08:55,930 --> 00:09:00,490
guest page table you have to walk

00:08:57,640 --> 00:09:02,440
another page table in the in the second

00:09:00,490 --> 00:09:04,060
level paging so a TLB miss could be like

00:09:02,440 --> 00:09:10,570
24 memory accesses instead of four or

00:09:04,060 --> 00:09:13,390
something something stupid okay so I

00:09:10,570 --> 00:09:16,630
mentioned the four PV you need to modify

00:09:13,390 --> 00:09:19,450
the the guest kernel so originally what

00:09:16,630 --> 00:09:22,120
we had was the classic Zeena Linux port

00:09:19,450 --> 00:09:25,110
which was a very heavily modified Linux

00:09:22,120 --> 00:09:27,130
kernel but basically you rip out the mm

00:09:25,110 --> 00:09:29,410
subsystem and you replace it with fiber

00:09:27,130 --> 00:09:32,680
calls but that gave you a compile time

00:09:29,410 --> 00:09:35,620
choice for a kernel to either run on Zen

00:09:32,680 --> 00:09:37,090
or run on bare metal you know which is

00:09:35,620 --> 00:09:38,920
which is all fine but for distros it's

00:09:37,090 --> 00:09:40,120
not great you have to have two kernel

00:09:38,920 --> 00:09:42,850
packages you have two special flavors

00:09:40,120 --> 00:09:45,040
you know extra QA you have extra testing

00:09:42,850 --> 00:09:45,900
and just confusing for your users

00:09:45,040 --> 00:09:50,320
because they need to figure out which

00:09:45,900 --> 00:09:54,360
kernel they want to do also when someone

00:09:50,320 --> 00:09:54,360
tried to upstream this to Linux kernel

00:09:55,140 --> 00:10:01,540
quite rightly I think so later on sort

00:09:59,560 --> 00:10:03,950
around 2006

00:10:01,540 --> 00:10:06,320
came up with this idea fo what's now

00:10:03,950 --> 00:10:09,590
called pervert ops and the idea here is

00:10:06,320 --> 00:10:10,640
that you take sort of many abstractions

00:10:09,590 --> 00:10:12,620
that already exist inside the kernel

00:10:10,640 --> 00:10:15,170
added some new ones in order to allow

00:10:12,620 --> 00:10:19,130
boot time selection of either to run PV

00:10:15,170 --> 00:10:21,590
or native so these are hooks in the

00:10:19,130 --> 00:10:22,940
existing API is for you know interrupt

00:10:21,590 --> 00:10:24,230
handling and so we plug in there's an

00:10:22,940 --> 00:10:26,660
interrupt handler boot time instead of

00:10:24,230 --> 00:10:29,000
the apec interrupt handler and we

00:10:26,660 --> 00:10:31,310
invented up once for doing MMU updates

00:10:29,000 --> 00:10:35,780
via piper calls instead and they they

00:10:31,310 --> 00:10:37,330
can get swapped out at boot time and one

00:10:35,780 --> 00:10:39,740
of the goals was that it wouldn't

00:10:37,330 --> 00:10:41,810
perform any worse on native when running

00:10:39,740 --> 00:10:43,610
with this configuration option turned on

00:10:41,810 --> 00:10:46,810
so there's some quite clever patching

00:10:43,610 --> 00:10:49,790
stuff in the kernel we're hot paths

00:10:46,810 --> 00:10:51,590
taken you know basically it's a it's an

00:10:49,790 --> 00:10:54,350
intervention via a function pointer so

00:10:51,590 --> 00:10:56,090
there's a hot path like that then

00:10:54,350 --> 00:10:58,850
there's actually the kernel will patch

00:10:56,090 --> 00:11:00,380
into the 5 or 9 bytes you know the

00:10:58,850 --> 00:11:01,580
actual instruction that does it and

00:11:00,380 --> 00:11:04,310
therefore avoid a lot of this and

00:11:01,580 --> 00:11:07,370
there's some incredibly complicated

00:11:04,310 --> 00:11:08,450
macros which avoid you know GCC spilling

00:11:07,370 --> 00:11:11,210
registers and clobbering things that you

00:11:08,450 --> 00:11:13,970
don't want it to but yeah I mean the

00:11:11,210 --> 00:11:15,380
goal of running that the node

00:11:13,970 --> 00:11:20,210
performance loss on bare metal then it

00:11:15,380 --> 00:11:20,770
is pretty much there so pv pv ops pair

00:11:20,210 --> 00:11:24,260
adopts

00:11:20,770 --> 00:11:27,770
dom you that work started around 2 6 22

00:11:24,260 --> 00:11:31,460
a 32-bit to 6 24 that kind of came

00:11:27,770 --> 00:11:34,790
usable 27w support was completed you

00:11:31,460 --> 00:11:38,020
know added 64-bit and then three orders

00:11:34,790 --> 00:11:40,130
when we eventually got dom0 upstream

00:11:38,020 --> 00:11:41,540
there are some other operating systems

00:11:40,130 --> 00:11:42,920
that have been paravirtualized net bsd

00:11:41,540 --> 00:11:45,710
and freebsd are the big two that are

00:11:42,920 --> 00:11:49,540
still going today but there's also I

00:11:45,710 --> 00:11:51,590
think a hurt board to to Zen which I

00:11:49,540 --> 00:11:53,960
mean one of the sort of side effects of

00:11:51,590 --> 00:11:56,540
the the PV device stuff is that you

00:11:53,960 --> 00:11:57,560
don't you need drivers feel you know

00:11:56,540 --> 00:11:59,840
unique one set of drivers for your

00:11:57,560 --> 00:12:02,180
guests so you're not forever porting

00:11:59,840 --> 00:12:04,940
drivers to the herd you know run Linux

00:12:02,180 --> 00:12:07,090
dom0 and hurt dummy units it's kind of

00:12:04,940 --> 00:12:07,090
cool

00:12:08,810 --> 00:12:13,620
all right so that's kind of what Zen is

00:12:11,490 --> 00:12:16,470
I'm hopefully to find some terminology

00:12:13,620 --> 00:12:18,750
that you need so let's talk about how

00:12:16,470 --> 00:12:20,520
debian in Zen fit together and you know

00:12:18,750 --> 00:12:22,560
they've been up to

00:12:20,520 --> 00:12:23,550
so Zen arrived in Debian pretty early in

00:12:22,560 --> 00:12:26,220
his life

00:12:23,550 --> 00:12:27,930
Adam Heath packaged well the earliest I

00:12:26,220 --> 00:12:30,540
could find was one or two in the in the

00:12:27,930 --> 00:12:33,300
changelog in March 2004 which is not

00:12:30,540 --> 00:12:34,290
long after the one don't release I think

00:12:33,300 --> 00:12:37,500
that he actually had versions available

00:12:34,290 --> 00:12:40,680
quite a bit before that really was when

00:12:37,500 --> 00:12:43,560
version 3 julienned as you uploaded that

00:12:40,680 --> 00:12:46,320
in 2006 and H was the first release you

00:12:43,560 --> 00:12:49,260
know that really contains n support Dom

00:12:46,320 --> 00:12:52,200
zero and Dom you Guido and Bastion have

00:12:49,260 --> 00:12:58,890
been maintainer since then and mainly

00:12:52,200 --> 00:13:01,020
its best in these days right so Damian's

00:12:58,890 --> 00:13:02,340
guest so in edge we had a special kernel

00:13:01,020 --> 00:13:04,860
flavor which had these inner Linux

00:13:02,340 --> 00:13:05,400
patches applied so this means you have

00:13:04,860 --> 00:13:07,800
Linux image

00:13:05,400 --> 00:13:12,300
well kernel image back then with over

00:13:07,800 --> 00:13:14,580
there's n suffix installation I mean

00:13:12,300 --> 00:13:15,990
really a virtual machine root filesystem

00:13:14,580 --> 00:13:18,500
is a lot like it's your root so you

00:13:15,990 --> 00:13:20,370
would you know you'd use the bootstrap

00:13:18,500 --> 00:13:22,380
unlike at root you do have to set up

00:13:20,370 --> 00:13:24,030
fstab and you have to set up consoles

00:13:22,380 --> 00:13:25,320
and networking so it was a little bit

00:13:24,030 --> 00:13:27,960
more to do than that

00:13:25,320 --> 00:13:30,720
so somebody I don't know who wrote

00:13:27,960 --> 00:13:32,100
dentals which is a bunch of scripts to

00:13:30,720 --> 00:13:34,710
help manage this you know they want

00:13:32,100 --> 00:13:36,630
bootstrap they tailor the resulting file

00:13:34,710 --> 00:13:39,660
system they help manage your LVM volumes

00:13:36,630 --> 00:13:42,360
they output the necessary config file

00:13:39,660 --> 00:13:44,100
and that's yeah people still use that

00:13:42,360 --> 00:13:47,850
today it's a really useful quick way to

00:13:44,100 --> 00:13:50,130
deploy a Zen guest then Lenny we got our

00:13:47,850 --> 00:13:51,870
first paradox for i386 so only had a to

00:13:50,130 --> 00:13:55,950
626 kernel

00:13:51,870 --> 00:13:58,130
so the 686 m kernel flavor then was

00:13:55,950 --> 00:14:01,560
enabled for Zen support out of the box

00:13:58,130 --> 00:14:03,420
because 612 it didn't arrive until 627

00:14:01,560 --> 00:14:08,490
so then he still had a classic scene on

00:14:03,420 --> 00:14:10,290
Linux flavor which for mb 64 but because

00:14:08,490 --> 00:14:12,450
the standard kernel is now supported Zen

00:14:10,290 --> 00:14:14,400
I mean we could use Debbie install that

00:14:12,450 --> 00:14:16,800
to the store guests which kind of gives

00:14:14,400 --> 00:14:18,060
you this sort of the same experience

00:14:16,800 --> 00:14:18,870
you'd get on native and you can proceed

00:14:18,060 --> 00:14:21,720
and you could

00:14:18,870 --> 00:14:23,550
set things up the way you like though

00:14:21,720 --> 00:14:26,240
obviously to be strapped and dentals was

00:14:23,550 --> 00:14:28,950
still available

00:14:26,240 --> 00:14:31,290
squeeze we got part of our ops the

00:14:28,950 --> 00:14:35,610
squeeze was extensive I think so paradox

00:14:31,290 --> 00:14:37,860
for both the a music store and i386 we

00:14:35,610 --> 00:14:39,240
did some more work on di so you can it's

00:14:37,860 --> 00:14:41,100
all both ready to bit and six to a bit

00:14:39,240 --> 00:14:45,030
yeah they're netboot two images and the

00:14:41,100 --> 00:14:47,310
multi arch DVD images support it now

00:14:45,030 --> 00:14:48,930
sports then so if you're you're offline

00:14:47,310 --> 00:14:53,100
and you want to install Zen then you can

00:14:48,930 --> 00:14:55,260
do it from one of those and you know

00:14:53,100 --> 00:14:56,310
install in the normal way and again the

00:14:55,260 --> 00:15:01,800
bootstrap and Zen tools are still

00:14:56,310 --> 00:15:03,000
available so far easier 3d to curl it's

00:15:01,800 --> 00:15:05,190
a newer more feature full power mode

00:15:03,000 --> 00:15:06,510
optical basically but the only other

00:15:05,190 --> 00:15:07,680
interesting thing was someone noticed

00:15:06,510 --> 00:15:11,780
the blu-ray didn't have any Zen support

00:15:07,680 --> 00:15:15,510
on it so we added that alright so

00:15:11,780 --> 00:15:18,330
there's a host I mean so dom0 is really

00:15:15,510 --> 00:15:19,980
just kind of a special Dom you so

00:15:18,330 --> 00:15:21,930
there's a little bit of extra code it's

00:15:19,980 --> 00:15:24,510
basically it lagged about released

00:15:21,930 --> 00:15:27,210
behind so we had a Z no Linux flavor at

00:15:24,510 --> 00:15:30,000
edge as I mentioned and Lenny we still

00:15:27,210 --> 00:15:32,010
had a Xena Linux flavor for for dom0

00:15:30,000 --> 00:15:33,570
usage there's special flavor then is

00:15:32,010 --> 00:15:34,620
squeeze we switch to a paradox but on a

00:15:33,570 --> 00:15:36,660
mainline pair of eye drops for the

00:15:34,620 --> 00:15:39,780
kernel flavor and finally I'm wheezy we

00:15:36,660 --> 00:15:42,360
have no more kernel flavors and the main

00:15:39,780 --> 00:15:45,350
standard currently I mean kennel

00:15:42,360 --> 00:15:47,760
packages are where Zen support is at

00:15:45,350 --> 00:15:49,710
because three or two spools dom0 out of

00:15:47,760 --> 00:15:56,400
the box and that was was quite an

00:15:49,710 --> 00:15:57,170
achievement for us okay so where are we

00:15:56,400 --> 00:15:59,280
now

00:15:57,170 --> 00:16:03,210
we've we spoke a little bit about wheezy

00:15:59,280 --> 00:16:04,650
in the past section but for wheezy it

00:16:03,210 --> 00:16:06,060
seems pretty certain now that we're

00:16:04,650 --> 00:16:07,920
frozen we're gonna be shipping Xen 4.1

00:16:06,060 --> 00:16:10,680
which is the current upstream stable

00:16:07,920 --> 00:16:13,890
release as I say there's no more Zen

00:16:10,680 --> 00:16:16,170
flavors we're using the PG ops code you

00:16:13,890 --> 00:16:18,450
know throughout that's really good they

00:16:16,170 --> 00:16:22,590
mean I mean that means is do much less

00:16:18,450 --> 00:16:24,000
overhead for the kernel team to to keep

00:16:22,590 --> 00:16:25,560
that stuff it means I just fix a bug

00:16:24,000 --> 00:16:27,030
upstream and I see see it to the stable

00:16:25,560 --> 00:16:29,340
kernel maintain O's and then you know

00:16:27,030 --> 00:16:31,820
patches flow and eventually Debian guess

00:16:29,340 --> 00:16:33,470
the fix which is really nice

00:16:31,820 --> 00:16:37,130
so one other big thing that's changed in

00:16:33,470 --> 00:16:39,110
wheezy reship xep zappy tool stack now

00:16:37,130 --> 00:16:40,790
as part of wheezy and if you weren't in

00:16:39,110 --> 00:16:42,110
Tamar's talk earlier you're probably

00:16:40,790 --> 00:16:45,080
asking yourself what does all this mean

00:16:42,110 --> 00:16:50,600
well is three and four letter acronyms

00:16:45,080 --> 00:16:54,740
so xcp is an appliance virtualization

00:16:50,600 --> 00:16:57,710
solution which it ships basically as a

00:16:54,740 --> 00:16:59,750
santos derived installation ISO and you

00:16:57,710 --> 00:17:02,780
know you bung it into your machine and

00:16:59,750 --> 00:17:05,329
you hit go and it chugs away and that

00:17:02,780 --> 00:17:07,280
the other side comes a host capable of

00:17:05,329 --> 00:17:11,270
running virtualization and it's it's

00:17:07,280 --> 00:17:12,560
based on CentOS and maybe I'm preaching

00:17:11,270 --> 00:17:14,810
to the choir but I think we all know

00:17:12,560 --> 00:17:17,060
that CentOS isn't as good as Debian and

00:17:14,810 --> 00:17:22,280
so you know that's not really great is

00:17:17,060 --> 00:17:25,310
it so product Chronos some guys at

00:17:22,280 --> 00:17:27,680
Citrix decided that they wanted to split

00:17:25,310 --> 00:17:31,700
out the tool stack used by xep and sort

00:17:27,680 --> 00:17:34,460
of disentangle it from its xcp roots and

00:17:31,700 --> 00:17:36,350
it's centos roots and make that into

00:17:34,460 --> 00:17:38,480
something that as a project could be

00:17:36,350 --> 00:17:40,160
shaped the package by any distro and

00:17:38,480 --> 00:17:43,730
included and they they initially did

00:17:40,160 --> 00:17:46,070
that work targeting debian we're all big

00:17:43,730 --> 00:17:48,290
fans of debian at the Zenda dog and sir

00:17:46,070 --> 00:17:50,030
and so the goal was to have the ability

00:17:48,290 --> 00:17:53,120
to have to get install like CP zappy on

00:17:50,030 --> 00:17:54,740
wheezy and turn wheezy into you know

00:17:53,120 --> 00:17:56,810
like an XP host but it's running debian

00:17:54,740 --> 00:18:00,920
or not CentOS and I mean that's pretty

00:17:56,810 --> 00:18:03,620
much there and then that works today so

00:18:00,920 --> 00:18:05,570
I guess I should pick up a mic McClurg

00:18:03,620 --> 00:18:07,940
Thomas Gurion and Rajesh Raj sheriff who

00:18:05,570 --> 00:18:10,820
did a lot of the work on this John loved

00:18:07,940 --> 00:18:14,150
them as well now you might be asking

00:18:10,820 --> 00:18:16,610
yourself well why would we want this so

00:18:14,150 --> 00:18:19,160
zappy which is the tools back in

00:18:16,610 --> 00:18:21,050
question it supports a xml RPC interface

00:18:19,160 --> 00:18:23,750
quite a rich or powerful management

00:18:21,050 --> 00:18:25,670
interface for Zen hosts and it was

00:18:23,750 --> 00:18:27,530
designed to be pretty programmable and

00:18:25,670 --> 00:18:31,360
there's bindings for lots of languages

00:18:27,530 --> 00:18:33,410
and that API is the preferred API for

00:18:31,360 --> 00:18:36,380
various cloud management stacks

00:18:33,410 --> 00:18:40,910
OpenStack cloud stack open nebula I

00:18:36,380 --> 00:18:43,790
think uses it and so I mean there are

00:18:40,910 --> 00:18:44,429
other cloud management layers you know

00:18:43,790 --> 00:18:45,779
you

00:18:44,429 --> 00:18:48,720
back in Eddie Ledo which I think doesn't

00:18:45,779 --> 00:18:52,049
use his interface that goes at the lower

00:18:48,720 --> 00:18:54,210
level interfaces but that there's plenty

00:18:52,049 --> 00:18:56,789
of tall stacks there that use this

00:18:54,210 --> 00:18:58,529
interface and so by supporting this in

00:18:56,789 --> 00:19:03,690
Debian it means that you know not only

00:18:58,529 --> 00:19:06,149
condemn EMBA a good zen hosting platform

00:19:03,690 --> 00:19:07,409
actually it turns it into a really

00:19:06,149 --> 00:19:09,960
useful thing for your cloud

00:19:07,409 --> 00:19:12,480
infrastructure and building completely

00:19:09,960 --> 00:19:15,230
free that infrastructure I think is you

00:19:12,480 --> 00:19:15,230
know something to strive for

00:19:17,070 --> 00:19:22,440
so the future that's kind of where we

00:19:20,159 --> 00:19:24,600
are today what's happening you know as

00:19:22,440 --> 00:19:27,179
we as we freeze and freeze and freeze

00:19:24,600 --> 00:19:29,570
some more for Weezie and then what's

00:19:27,179 --> 00:19:32,850
gonna happen in the next release I

00:19:29,570 --> 00:19:35,940
provide wise continuing to track

00:19:32,850 --> 00:19:37,200
upstream releases and Sid the the

00:19:35,940 --> 00:19:41,249
packaged end product on Ali off has

00:19:37,200 --> 00:19:42,450
order to you know snapshots in it don't

00:19:41,249 --> 00:19:46,740
think they've been uploaded even to

00:19:42,450 --> 00:19:48,119
experimental going forward we upstream

00:19:46,740 --> 00:19:50,129
we're just starting to think about the

00:19:48,119 --> 00:19:52,100
Zen for the three release there's a it

00:19:50,129 --> 00:19:55,340
can be a Zen summit in late August

00:19:52,100 --> 00:19:57,539
co-located with Linux : and LPC and

00:19:55,340 --> 00:19:59,009
kernel summit and everyone's kind of

00:19:57,539 --> 00:19:59,999
descending on San Diego and in late

00:19:59,009 --> 00:20:02,610
August so if you're there and you're

00:19:59,999 --> 00:20:05,190
interested in Zen then you know you

00:20:02,610 --> 00:20:06,960
should come along one of the things

00:20:05,190 --> 00:20:08,460
that's happening sort of from four to

00:20:06,960 --> 00:20:12,749
two onwards upstream is the transition

00:20:08,460 --> 00:20:13,919
from the old nd tool stack which is well

00:20:12,749 --> 00:20:16,950
as frankly it's not maintainable mess

00:20:13,919 --> 00:20:18,480
and almost go near it so we've been

00:20:16,950 --> 00:20:23,779
working on a replacement tool stack for

00:20:18,480 --> 00:20:26,429
that sort of nice clean architecture to

00:20:23,779 --> 00:20:28,169
well so that we can maintain it if you

00:20:26,429 --> 00:20:30,360
look in the Debian bug tracker you'll

00:20:28,169 --> 00:20:31,889
find that there are tons of bugs against

00:20:30,360 --> 00:20:32,929
there are these nd bugs and there's sort

00:20:31,889 --> 00:20:35,129
of know where to send them because

00:20:32,929 --> 00:20:35,970
nobody wants to maintain it upstream or

00:20:35,129 --> 00:20:37,919
in Debian sir

00:20:35,970 --> 00:20:40,610
hopefully by having something that's

00:20:37,919 --> 00:20:42,629
maintainable as that full stack will

00:20:40,610 --> 00:20:46,710
hope those allow their source of bare

00:20:42,629 --> 00:20:48,690
patches to get fixed yeah in the future

00:20:46,710 --> 00:20:51,600
better documentation it's always

00:20:48,690 --> 00:20:53,909
something that everyone wants and very

00:20:51,600 --> 00:20:55,500
rarely do you get there's a pretty good

00:20:53,909 --> 00:20:58,740
wiki page on Debian

00:20:55,500 --> 00:21:00,000
the Zen wiki has a category of Debian

00:20:58,740 --> 00:21:01,590
related stuff you know how to install

00:21:00,000 --> 00:21:03,660
host how to stall the guest of this type

00:21:01,590 --> 00:21:06,870
at it how to do this how to do that and

00:21:03,660 --> 00:21:08,640
upstream have regular document days so

00:21:06,870 --> 00:21:13,440
that's the last Monday of every month we

00:21:08,640 --> 00:21:15,660
all down tools on our compilers and edit

00:21:13,440 --> 00:21:16,290
wiki's for a day and make a lot of

00:21:15,660 --> 00:21:21,360
progress that way

00:21:16,290 --> 00:21:24,270
surprising kernels so I mean all that

00:21:21,360 --> 00:21:25,350
really to say about kernels upstream we

00:21:24,270 --> 00:21:26,520
get a lot spore from upstream now so

00:21:25,350 --> 00:21:28,830
there's not really anything special and

00:21:26,520 --> 00:21:31,470
no special flavors and less work for

00:21:28,830 --> 00:21:34,170
everybody there are some other kernels

00:21:31,470 --> 00:21:38,730
in Debian that I think have PV support

00:21:34,170 --> 00:21:40,680
and fairly short k4e BSD does and so I

00:21:38,730 --> 00:21:42,780
mean if there's anybody who's interested

00:21:40,680 --> 00:21:43,980
in that or the herd you know making that

00:21:42,780 --> 00:21:46,470
stuff work well in Debian that's

00:21:43,980 --> 00:21:55,350
something I'd be really keen to talk to

00:21:46,470 --> 00:21:56,150
you about they'll be really cool so

00:21:55,350 --> 00:21:58,920
zappy

00:21:56,150 --> 00:22:02,700
so the xep zappy thing i mean that works

00:21:58,920 --> 00:22:05,690
today it's quite a new project it you

00:22:02,700 --> 00:22:09,480
know it's I'm winding it from its

00:22:05,690 --> 00:22:10,740
history is still ongoing I think

00:22:09,480 --> 00:22:14,040
everybody would encourage you to try it

00:22:10,740 --> 00:22:16,140
and report bugs usual way report bug or

00:22:14,040 --> 00:22:17,880
packages interval and a layoff there's

00:22:16,140 --> 00:22:19,050
also there's an upstream wiki page I'm

00:22:17,880 --> 00:22:22,610
sort of the the sorts of information

00:22:19,050 --> 00:22:24,750
that is useful in these kind of bugs

00:22:22,610 --> 00:22:28,470
going forward there's there's more work

00:22:24,750 --> 00:22:29,970
I think to be done to separate exactly a

00:22:28,470 --> 00:22:31,260
little bit more from xep and integrated

00:22:29,970 --> 00:22:33,120
a bit better with Debian I believe there

00:22:31,260 --> 00:22:37,170
are some limitations of the current

00:22:33,120 --> 00:22:38,610
thing so that you know there's plenty of

00:22:37,170 --> 00:22:39,780
work to go on there and I bet time I

00:22:38,610 --> 00:22:42,350
would love if you were to come and talk

00:22:39,780 --> 00:22:47,820
to him and offer to help out and

00:22:42,350 --> 00:22:49,650
what-have-you it's a guest support so

00:22:47,820 --> 00:22:52,410
something I personally want to work on

00:22:49,650 --> 00:22:53,640
is integrating PVAc m-sport into the

00:22:52,410 --> 00:22:57,600
Installer

00:22:53,640 --> 00:22:59,190
so with squeezed and wheezy you can you

00:22:57,600 --> 00:23:00,420
can do it installs nation guest from the

00:22:59,190 --> 00:23:02,250
usual media and then you can kind of

00:23:00,420 --> 00:23:04,830
mess around and install special kernels

00:23:02,250 --> 00:23:07,020
and tweak stuff a bit and

00:23:04,830 --> 00:23:08,580
get yourself a PV hvm you know on reboot

00:23:07,020 --> 00:23:10,320
it's all made quite easily you know we

00:23:08,580 --> 00:23:11,700
default to using UID based mounting and

00:23:10,320 --> 00:23:14,100
things so the fact that you device names

00:23:11,700 --> 00:23:16,710
changed under your feet doesn't cause as

00:23:14,100 --> 00:23:19,350
much troll as you might imagine if I

00:23:16,710 --> 00:23:21,660
think this by coincidence works with the

00:23:19,350 --> 00:23:23,270
weazy namely 64 today it's just kind of

00:23:21,660 --> 00:23:26,970
a side effect if the pervert ops thing

00:23:23,270 --> 00:23:28,800
it just needs sort of tidying up and the

00:23:26,970 --> 00:23:32,100
rough edges filing off and made yeah

00:23:28,800 --> 00:23:34,170
very automatic and I wanted a you know

00:23:32,100 --> 00:23:36,930
as I say there's trade-offs between PV

00:23:34,170 --> 00:23:38,160
and P V hvm so depending on your

00:23:36,930 --> 00:23:39,750
workload you might want one you might

00:23:38,160 --> 00:23:43,850
want the other and we should try and

00:23:39,750 --> 00:23:45,930
make both available to our users I think

00:23:43,850 --> 00:23:47,490
this is another interesting thing coming

00:23:45,930 --> 00:23:51,330
in the pipeline from upstream is what we

00:23:47,490 --> 00:23:54,150
call hybrid guests so if I describe pv h

00:23:51,330 --> 00:23:55,980
vm is adding pv features to h vm guests

00:23:54,150 --> 00:23:57,630
then hybrid is kind of coming at it from

00:23:55,980 --> 00:23:59,910
the other end it's to take a pv guest

00:23:57,630 --> 00:24:03,000
and enable the use of more hardware

00:23:59,910 --> 00:24:05,790
features to come again to get a good mix

00:24:03,000 --> 00:24:07,230
of you know the best of both worlds the

00:24:05,790 --> 00:24:08,430
reason this is interesting compared with

00:24:07,230 --> 00:24:09,600
pv h vm is it means you take you

00:24:08,430 --> 00:24:10,740
completely out of the picture and you

00:24:09,600 --> 00:24:13,290
take emulation completely out of the

00:24:10,740 --> 00:24:16,290
picture and you know that's removing a

00:24:13,290 --> 00:24:18,390
whole lot of code which is always good

00:24:16,290 --> 00:24:21,120
there's been some initial prototypes for

00:24:18,390 --> 00:24:23,610
running hybrid as both dom0 and dom you

00:24:21,120 --> 00:24:26,160
I expect that would land in for a 3 e

00:24:23,610 --> 00:24:32,460
which ought to mean it to be ready in

00:24:26,160 --> 00:24:36,330
time for wheezy plus one such a

00:24:32,460 --> 00:24:37,860
segregation there's a lot of room for

00:24:36,330 --> 00:24:39,210
determine essentially Deming there's

00:24:37,860 --> 00:24:40,110
none of this today so you know there's

00:24:39,210 --> 00:24:44,340
always room for improvement

00:24:40,110 --> 00:24:46,350
I think it really easy one would be a to

00:24:44,340 --> 00:24:48,810
make it much more much easier to do a

00:24:46,350 --> 00:24:50,010
network drive to mate with Debian you

00:24:48,810 --> 00:24:52,440
know if you could install a Debian VM

00:24:50,010 --> 00:24:54,330
you could have to get installed gen

00:24:52,440 --> 00:24:56,250
network back-end or something and you

00:24:54,330 --> 00:24:58,380
know settle around a little bit inside

00:24:56,250 --> 00:25:00,420
your time zero to to make it you start

00:24:58,380 --> 00:25:02,640
that instead of I thought be zero and

00:25:00,420 --> 00:25:05,940
you know that's kind of it and it's

00:25:02,640 --> 00:25:07,230
there yeah a bit of a harder problem if

00:25:05,940 --> 00:25:09,210
you're talking about storage obviously

00:25:07,230 --> 00:25:11,280
booting from a thing that you want to

00:25:09,210 --> 00:25:14,580
actually show off later on into a driver

00:25:11,280 --> 00:25:17,340
main is pretty tricky getting Indian but

00:25:14,580 --> 00:25:18,470
by no means impossible and you know

00:25:17,340 --> 00:25:21,230
these things generally

00:25:18,470 --> 00:25:23,539
run from RAM for the most part so we

00:25:21,230 --> 00:25:25,669
have any random force generators maybe

00:25:23,539 --> 00:25:28,100
that's an interesting Avenue way to

00:25:25,669 --> 00:25:30,230
approach that in the future more

00:25:28,100 --> 00:25:32,500
difficult roblem is the mini us based

00:25:30,230 --> 00:25:35,090
stuff domains so many oasiz this

00:25:32,500 --> 00:25:37,880
monolithic single application kernel

00:25:35,090 --> 00:25:39,289
that we use it's it's minyak splits new

00:25:37,880 --> 00:25:41,450
layer plus the application get a link to

00:25:39,289 --> 00:25:46,070
one one blob and run in a single address

00:25:41,450 --> 00:25:47,510
base kernel mode thing doesn't really

00:25:46,070 --> 00:25:51,830
fit into the sort of the usual district

00:25:47,510 --> 00:25:53,570
model so I don't really know how to

00:25:51,830 --> 00:25:56,179
approach this anyone has any good ideas

00:25:53,570 --> 00:25:56,960
and you know admit maybe multi arch you

00:25:56,179 --> 00:25:59,630
know we talked about partial

00:25:56,960 --> 00:26:01,400
architectures you'd be talking about you

00:25:59,630 --> 00:26:04,070
know maybe what you might call the Pico

00:26:01,400 --> 00:26:06,860
port half-a-dozen libraries able to link

00:26:04,070 --> 00:26:09,110
um you against you know just a cross

00:26:06,860 --> 00:26:12,289
Billy Gunn away maybe I don't know it's

00:26:09,110 --> 00:26:14,090
yeah if you have any smart or coding

00:26:12,289 --> 00:26:18,620
ideas about that then I'm very much all

00:26:14,090 --> 00:26:21,650
is okay the only thing we've got coming

00:26:18,620 --> 00:26:24,620
upstream as we have a ongoing new port

00:26:21,650 --> 00:26:27,289
to the arm so the new there have been

00:26:24,620 --> 00:26:29,539
arm PV ports in the past but here we're

00:26:27,289 --> 00:26:30,950
targeting the new virtualization

00:26:29,539 --> 00:26:34,340
extensions which are live announced for

00:26:30,950 --> 00:26:35,659
the v7 architecture and going forward

00:26:34,340 --> 00:26:39,260
the v8 stuff the Steve was talking about

00:26:35,659 --> 00:26:41,120
yesterday so currently I don't think you

00:26:39,260 --> 00:26:43,010
can buy one of these I've had some leads

00:26:41,120 --> 00:26:44,120
this weekend this week about maybe

00:26:43,010 --> 00:26:45,380
places where I could find one but

00:26:44,120 --> 00:26:47,679
currently we're targeting the fast mile

00:26:45,380 --> 00:26:50,840
emulator which Steve demoed yesterday

00:26:47,679 --> 00:26:54,679
the v7 fast model is actually pretty

00:26:50,840 --> 00:26:55,909
fast and quite usable but Avinu

00:26:54,679 --> 00:26:59,419
eventually we're gonna be to targeting

00:26:55,909 --> 00:27:00,890
the cortex a15 so because these

00:26:59,419 --> 00:27:02,630
processors have virtualization from the

00:27:00,890 --> 00:27:05,510
beginning we're kind of going directly

00:27:02,630 --> 00:27:08,870
to the hybrid star thing one of the big

00:27:05,510 --> 00:27:11,000
problems getting the Zen code into the

00:27:08,870 --> 00:27:12,230
no substrate kernel was the MMU stuff so

00:27:11,000 --> 00:27:15,470
the fact that we've got nested paging

00:27:12,230 --> 00:27:16,700
available in the processor from day one

00:27:15,470 --> 00:27:21,080
means he kind of skipped that whole

00:27:16,700 --> 00:27:22,429
whole section it was luck either way

00:27:21,080 --> 00:27:24,919
when we started doing this Linux was

00:27:22,429 --> 00:27:26,690
just barely busy discovering that really

00:27:24,919 --> 00:27:29,120
all these multiple kernel images were a

00:27:26,690 --> 00:27:31,549
pain and so they you know they be moving

00:27:29,120 --> 00:27:32,720
to vice tree and we we forget that you

00:27:31,549 --> 00:27:34,880
know we ought to learn a lesson from

00:27:32,720 --> 00:27:37,730
that and try and get things right right

00:27:34,880 --> 00:27:39,980
from the beginning so just before I was

00:27:37,730 --> 00:27:42,799
coming away we booted our first guest

00:27:39,980 --> 00:27:46,399
from a PV disk to a console which was

00:27:42,799 --> 00:27:48,200
you know quite exciting there's this

00:27:46,399 --> 00:27:51,890
still wants to do it still wants to

00:27:48,200 --> 00:27:53,720
clean up and what-have-you but I kind of

00:27:51,890 --> 00:27:55,850
hope we can get this done off stream and

00:27:53,720 --> 00:27:58,520
in time to hit we z plus one

00:27:55,850 --> 00:27:59,870
you know Debian's a long history of good

00:27:58,520 --> 00:28:03,049
arm ports and it's got a long history of

00:27:59,870 --> 00:28:05,570
you know good supporters in so it seems

00:28:03,049 --> 00:28:07,640
like a bit of a no-brainer to me i think

00:28:05,570 --> 00:28:09,830
in the short term mostly that's gonna be

00:28:07,640 --> 00:28:12,740
upstream work is Ndebele will be the

00:28:09,830 --> 00:28:14,059
place to go more you know come and speak

00:28:12,740 --> 00:28:16,640
lee later i'm particularly trusted if

00:28:14,059 --> 00:28:18,980
anyone knows much about ufi in that sort

00:28:16,640 --> 00:28:19,970
of thing arm and what's going on there

00:28:18,980 --> 00:28:25,820
and how we're gonna boot these things

00:28:19,970 --> 00:28:28,309
and good stuff yeah so hopefully you've

00:28:25,820 --> 00:28:29,870
seen you know that debian has been an

00:28:28,309 --> 00:28:31,190
excellent distribution if you're

00:28:29,870 --> 00:28:33,049
interested in zen it's been more than is

00:28:31,190 --> 00:28:35,360
consistent in terms of sports both again

00:28:33,049 --> 00:28:38,539
over the years and it's had a pretty

00:28:35,360 --> 00:28:39,649
good story but also i think there's a

00:28:38,539 --> 00:28:43,309
there's a good opportunity for us here

00:28:39,649 --> 00:28:44,510
to become you know really a leading

00:28:43,309 --> 00:28:47,570
cloud infrastructure operating system

00:28:44,510 --> 00:28:49,399
you know there's there's a whole where

00:28:47,570 --> 00:28:53,030
that debian could feel really well and

00:28:49,399 --> 00:28:55,250
it's yeah demi was really good in the

00:28:53,030 --> 00:28:56,360
data center and there's no reason why it

00:28:55,250 --> 00:28:59,149
couldn't be an excellent choice for the

00:28:56,360 --> 00:29:00,950
cloud as well but plenty of other

00:28:59,149 --> 00:29:03,049
interesting stuff if there's any any

00:29:00,950 --> 00:29:06,559
other projects i talked about i'm more

00:29:03,049 --> 00:29:07,970
than happy to actually recall yeah so

00:29:06,559 --> 00:29:11,899
that's it here's some places where

00:29:07,970 --> 00:29:13,850
people hang out and sort of in debian

00:29:11,899 --> 00:29:15,169
and zen land where you know you want to

00:29:13,850 --> 00:29:17,750
come for a chat or ask questions or

00:29:15,169 --> 00:29:19,700
whatever you can either do that now or

00:29:17,750 --> 00:29:24,620
you can come find us in any of those

00:29:19,700 --> 00:29:27,140
places so any questions hello we have

00:29:24,620 --> 00:29:29,659
one question from i receive

00:29:27,140 --> 00:29:32,120
have you used the zen rims availability

00:29:29,659 --> 00:29:36,020
system recently and if you think it

00:29:32,120 --> 00:29:37,970
could be supported in witness one so for

00:29:36,020 --> 00:29:43,240
those don't know Remus is a high

00:29:37,970 --> 00:29:45,320
availability project based on zen from

00:29:43,240 --> 00:29:47,659
université British Columbia couple guys

00:29:45,320 --> 00:29:51,200
there and it's basically it's it's

00:29:47,659 --> 00:29:53,179
rolling checkpoints checkpoint so you

00:29:51,200 --> 00:29:55,070
you're doing continuous live migration

00:29:53,179 --> 00:29:58,820
of the guests to a remote site and you

00:29:55,070 --> 00:30:00,700
you fence the externally visible i/o so

00:29:58,820 --> 00:30:02,990
you don't you don't commit discs or

00:30:00,700 --> 00:30:06,649
transmit network packets until the the

00:30:02,990 --> 00:30:08,450
checkpoint has been acknowledged so if

00:30:06,649 --> 00:30:11,120
your site goes down then the other site

00:30:08,450 --> 00:30:12,740
can come up and so the question is I've

00:30:11,120 --> 00:30:15,260
already used it the answer is I think

00:30:12,740 --> 00:30:17,049
I've run it once when we integrated the

00:30:15,260 --> 00:30:19,570
patches for it into the new tool stack

00:30:17,049 --> 00:30:22,399
at the moment I think I would say it's

00:30:19,570 --> 00:30:24,169
sort of proof of concept in the new tool

00:30:22,399 --> 00:30:27,649
stack it's been well supported in Zen D

00:30:24,169 --> 00:30:29,210
for for quite a while it's not in itself

00:30:27,649 --> 00:30:33,590
a complete solution you need to build a

00:30:29,210 --> 00:30:36,590
sort of an H a failover an election

00:30:33,590 --> 00:30:37,940
system around it to actually do the

00:30:36,590 --> 00:30:39,590
actual failover in a safe way you know

00:30:37,940 --> 00:30:40,850
you need to make sure that you've you

00:30:39,590 --> 00:30:41,630
really have died at the source before

00:30:40,850 --> 00:30:43,520
you start doing stuff for the

00:30:41,630 --> 00:30:50,179
destination but yeah I mean I think we z

00:30:43,520 --> 00:30:52,330
plus 1 would be eminently doable anybody

00:30:50,179 --> 00:30:52,330
else

00:30:56,510 --> 00:31:05,740
another nice a another question from

00:31:03,620 --> 00:31:09,230
diamond keeper

00:31:05,740 --> 00:31:11,240
with Zen 4.2 raising and thoughts than

00:31:09,230 --> 00:31:13,850
the seizing was the future of the nappy

00:31:11,240 --> 00:31:15,429
is their Excel transition plan in the

00:31:13,850 --> 00:31:18,530
world

00:31:15,429 --> 00:31:24,200
what's the feature of what sorry then D

00:31:18,530 --> 00:31:25,370
DC's nd so Zen D I mean it's effectively

00:31:24,200 --> 00:31:28,070
I maintained if someone wanted to step

00:31:25,370 --> 00:31:30,260
up and maintain it then you know I guess

00:31:28,070 --> 00:31:32,450
we'd be happy for this too so it's it's

00:31:30,260 --> 00:31:35,480
truly horrible internally it's kind of

00:31:32,450 --> 00:31:38,150
been started off as a twisted thing that

00:31:35,480 --> 00:31:39,799
you've got untwist off' I'd it got then

00:31:38,150 --> 00:31:41,360
it got this xml-rpc thing and it kind of

00:31:39,799 --> 00:31:43,730
got half turned inside out and then that

00:31:41,360 --> 00:31:44,720
guy wandered off and so maintenance wise

00:31:43,730 --> 00:31:48,410
it's not ideal

00:31:44,720 --> 00:31:50,750
so 4.2 so Excel is a command-line

00:31:48,410 --> 00:31:52,850
compatible replacement for the X M so if

00:31:50,750 --> 00:31:54,559
you have a script that says X M create

00:31:52,850 --> 00:31:56,000
or whatever then you should be able to

00:31:54,559 --> 00:31:58,280
write an excel create and we've

00:31:56,000 --> 00:32:01,059
considered a bug if you couldn't so it

00:31:58,280 --> 00:32:04,370
should be fairly easy to sorry

00:32:01,059 --> 00:32:06,410
almost yeah it's so nearly there but

00:32:04,370 --> 00:32:08,990
more of this in my talk about

00:32:06,410 --> 00:32:09,549
compatibility nightmares which will be

00:32:08,990 --> 00:32:11,690
up next

00:32:09,549 --> 00:32:17,210
yes so we in has got some stuff to say

00:32:11,690 --> 00:32:18,590
about this later so there is so there is

00:32:17,210 --> 00:32:20,720
an initial version of excel gonna be in

00:32:18,590 --> 00:32:21,950
wheezy which doesn't quite meet these

00:32:20,720 --> 00:32:23,270
goals and it's not yet the default

00:32:21,950 --> 00:32:25,160
upstream and it's not yet the default in

00:32:23,270 --> 00:32:28,700
the packaging but you can switch to it

00:32:25,160 --> 00:32:30,919
and use it and it's maybe it's 80%

00:32:28,700 --> 00:32:33,080
compatible rather than the 90 odd we're

00:32:30,919 --> 00:32:36,590
aiming for but I would think that

00:32:33,080 --> 00:32:37,940
upstream for 4 to 3 will you know sort

00:32:36,590 --> 00:32:40,490
of competed that transition so the

00:32:37,940 --> 00:32:44,570
question that was relayed from ASC was

00:32:40,490 --> 00:32:49,610
actually about Zen API not Cindy it's an

00:32:44,570 --> 00:32:54,140
API yeah ok so Zen D supported an

00:32:49,610 --> 00:32:56,870
initial version of the API interface but

00:32:54,140 --> 00:32:58,580
never particularly well and it's not

00:32:56,870 --> 00:33:00,530
really been maintained for several years

00:32:58,580 --> 00:33:03,049
sappy on the other hand has been you

00:33:00,530 --> 00:33:06,110
know that is the maintained supported

00:33:03,049 --> 00:33:07,159
useful way to get a gen API remote

00:33:06,110 --> 00:33:08,570
protocol

00:33:07,159 --> 00:33:09,690
so basically Zen D is sort of like an or

00:33:08,570 --> 00:33:12,450
point something version

00:33:09,690 --> 00:33:19,559
zapping these days is the is the 2.3

00:33:12,450 --> 00:33:22,860
dull thing so if you said Excel is

00:33:19,559 --> 00:33:27,299
almost compatible whose XM so it should

00:33:22,860 --> 00:33:30,840
be what's not there so the big thing

00:33:27,299 --> 00:33:34,110
that's missing deliberately is support

00:33:30,840 --> 00:33:35,490
for Zen DS managed domains so there's nd

00:33:34,110 --> 00:33:36,750
kind of supported to I 2 ways of

00:33:35,490 --> 00:33:38,070
creating a domain there was this idea of

00:33:36,750 --> 00:33:39,539
XM create where you just give it a

00:33:38,070 --> 00:33:40,830
config file and this thing comes into

00:33:39,539 --> 00:33:42,720
being and when you destroy it it's gone

00:33:40,830 --> 00:33:44,759
and it's kind of ephemeral you keep its

00:33:42,720 --> 00:33:46,740
disks but it also had this idea of XM

00:33:44,759 --> 00:33:48,600
knew where you kind of introduced the

00:33:46,740 --> 00:33:53,129
domain and then has a life cycle and you

00:33:48,600 --> 00:33:54,269
can start stop and so that's gone there

00:33:53,129 --> 00:33:56,460
are other ways of doing this there's

00:33:54,269 --> 00:33:58,080
exactly an init script the runs that

00:33:56,460 --> 00:34:00,000
sort of does like a pretty good effort

00:33:58,080 --> 00:34:02,009
you know the starting domains the start

00:34:00,000 --> 00:34:04,620
of day which is for some people that's

00:34:02,009 --> 00:34:06,509
all way one that at manage domains zappy

00:34:04,620 --> 00:34:08,250
is really the excellent option for that

00:34:06,509 --> 00:34:10,740
if you want that kind of functionality I

00:34:08,250 --> 00:34:12,810
recommend that if you're so inclined

00:34:10,740 --> 00:34:14,550
then libvirt and the associated tools do

00:34:12,810 --> 00:34:17,399
a similar thing and they they support

00:34:14,550 --> 00:34:19,560
sin so the Verdes red hats

00:34:17,399 --> 00:34:22,560
will there be wrappers that when you

00:34:19,560 --> 00:34:24,869
when we use XM then it equals x instead

00:34:22,560 --> 00:34:27,179
that would be a very good way to keep so

00:34:24,869 --> 00:34:28,889
I think Madison made a wrapper now in

00:34:27,179 --> 00:34:30,750
wheezy I think it's just called Zen

00:34:28,889 --> 00:34:32,099
rather than X mrxl that we'll call the

00:34:30,750 --> 00:34:34,589
appropriate tool stack at the

00:34:32,099 --> 00:34:36,000
appropriate time and you can kind of

00:34:34,589 --> 00:34:37,770
configure that under etc default Zen

00:34:36,000 --> 00:34:41,159
which which tool stack you want to use

00:34:37,770 --> 00:34:42,929
and you know in queasy plus one I should

00:34:41,159 --> 00:34:45,560
imagine the default backing up that

00:34:42,929 --> 00:34:48,179
script would turn to exile from XM and

00:34:45,560 --> 00:34:51,659
yeah with x and e will eventually die

00:34:48,179 --> 00:34:52,319
and be removed upstream you could also

00:34:51,659 --> 00:34:57,690
make a symlink

00:34:52,319 --> 00:34:59,670
or run said on your script oh so you

00:34:57,690 --> 00:35:01,950
just touched upon libvirt but didn't

00:34:59,670 --> 00:35:04,200
really mention on the rest of the talk I

00:35:01,950 --> 00:35:05,880
realized that as I said it yeah is that

00:35:04,200 --> 00:35:08,010
because that's a red hot thing and more

00:35:05,880 --> 00:35:10,319
tied to KVM or is there any commitment

00:35:08,010 --> 00:35:11,849
from Sam to actually be involved in

00:35:10,319 --> 00:35:13,950
making sure that vert works well with

00:35:11,849 --> 00:35:16,950
Sam so one of the big upstream

00:35:13,950 --> 00:35:19,099
contributors are Sue's a new though and

00:35:16,950 --> 00:35:21,359
they have a bunch of guys working on a

00:35:19,099 --> 00:35:23,660
an excel back end for libvirt

00:35:21,359 --> 00:35:25,710
so one thing I didn't mention is that X

00:35:23,660 --> 00:35:26,700
it's kind of a tall stack but there's

00:35:25,710 --> 00:35:28,470
that there's a single deliver Excel

00:35:26,700 --> 00:35:30,360
which is a library for writing tall

00:35:28,470 --> 00:35:32,670
stacks and so we're intention is that

00:35:30,360 --> 00:35:34,500
SAPI will use it and Excel will use it

00:35:32,670 --> 00:35:35,970
and levert will use it as their kind of

00:35:34,500 --> 00:35:37,560
back-end because at the moment with

00:35:35,970 --> 00:35:39,090
zappy there's a bunch of duplicated code

00:35:37,560 --> 00:35:40,830
for building a domain and migrating in

00:35:39,090 --> 00:35:42,840
domain and this you know that's that

00:35:40,830 --> 00:35:44,130
should be the same stuff so that's the

00:35:42,840 --> 00:35:45,210
target there is for live excel for me

00:35:44,130 --> 00:35:47,040
and this is something you'll be talking

00:35:45,210 --> 00:35:48,690
about in his talk later it's kind of

00:35:47,040 --> 00:35:49,500
that interface was that what he was

00:35:48,690 --> 00:35:54,320
going to say or do you have another

00:35:49,500 --> 00:35:58,920
point one of the things we'd be doing in

00:35:54,320 --> 00:36:00,780
4.27 4.2 is making some significant

00:35:58,920 --> 00:36:03,900
improvements to the infrastructure in

00:36:00,780 --> 00:36:06,570
that lib Excel library with the view of

00:36:03,900 --> 00:36:09,810
Lib that as one of the main consumers of

00:36:06,570 --> 00:36:11,430
that so certainly an upstream I think

00:36:09,810 --> 00:36:13,140
it's fair to say that upstream and much

00:36:11,430 --> 00:36:16,800
upstream generally much key nor libvirt

00:36:13,140 --> 00:36:18,330
than debian is we see it as a you know

00:36:16,800 --> 00:36:19,920
certainly another way that people can

00:36:18,330 --> 00:36:24,150
use then and we have no intention of

00:36:19,920 --> 00:36:26,730
deprecating it or anything yeah so I

00:36:24,150 --> 00:36:28,860
mean so Olympic Sailing in the fall of

00:36:26,730 --> 00:36:31,410
to release we're committing to keeping

00:36:28,860 --> 00:36:32,970
that API stable so almost precisely so

00:36:31,410 --> 00:36:34,980
that people like lipfird can continue to

00:36:32,970 --> 00:36:36,300
consume it as time goes on and as Ian

00:36:34,980 --> 00:36:38,940
says there's a whole bunch of history of

00:36:36,300 --> 00:36:41,370
Excel to do event-driven tool stacks

00:36:38,940 --> 00:36:43,590
which I mean if you look at the live

00:36:41,370 --> 00:36:45,300
vert event driving thing in the excel

00:36:43,590 --> 00:36:47,850
it's it's you know they're designed to

00:36:45,300 --> 00:36:51,180
fit together in a couple of thin shim

00:36:47,850 --> 00:36:55,310
functions any other questions it looks

00:36:51,180 --> 00:36:55,310
like we have only a couple more minutes

00:36:58,549 --> 00:37:03,040
nope right well thanks very much thank

00:37:02,640 --> 00:37:07,780
you

00:37:03,040 --> 00:37:07,780

YouTube URL: https://www.youtube.com/watch?v=C2232jTmRzE


