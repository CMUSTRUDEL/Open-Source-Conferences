Title: AArch64 planning
Publication date: 2017-11-28
Playlist: DebConf 12
Description: 
	by Steve McIntyre

At: DebConf12
https://debconf12.debconf.org/
Room: Aula Magna
Scheduled start: 2012-07-10 17:00:00
Captions: 
	00:00:00,560 --> 00:00:08,160
hi everybody this is Steve McIntyre

00:00:04,259 --> 00:00:18,420
talking about um sorry hey arch 64

00:00:08,160 --> 00:00:24,590
planning hey folks so you may remember

00:00:18,420 --> 00:00:27,539
me from such previous talks as again

00:00:24,590 --> 00:00:29,519
this is probably going to be a similar

00:00:27,539 --> 00:00:35,010
kind of mix I do have a number of slides

00:00:29,519 --> 00:00:36,239
here about a out 64 the point of this is

00:00:35,010 --> 00:00:39,510
I don't want to just be telling

00:00:36,239 --> 00:00:40,980
everybody about that I want to I wanted

00:00:39,510 --> 00:00:48,899
to get started planning on what we're

00:00:40,980 --> 00:00:53,370
going to do about bootstrapping it um

00:00:48,899 --> 00:00:55,110
have called this a arch 64 as an arm

00:00:53,370 --> 00:00:57,030
employee presenting something with arm

00:00:55,110 --> 00:00:59,100
content I've been told I have to do that

00:00:57,030 --> 00:01:00,899
all the names have been suggested that

00:00:59,100 --> 00:01:10,549
I'm not going to not going to mention by

00:01:00,899 --> 00:01:12,990
name other people may do maybe so agenda

00:01:10,549 --> 00:01:15,689
I'm going to give a quick summary of arm

00:01:12,990 --> 00:01:18,689
v8 and bits and pieces the roadman of

00:01:15,689 --> 00:01:23,670
the arm roadmap around it then I have a

00:01:18,689 --> 00:01:27,090
demo I have a fast model form arm on my

00:01:23,670 --> 00:01:30,869
laptop so I can show you an emulated a

00:01:27,090 --> 00:01:33,090
out 64 system at least and then we can

00:01:30,869 --> 00:01:35,100
talk about bootstrapping again as always

00:01:33,090 --> 00:01:42,840
there's a gobby page please somebody

00:01:35,100 --> 00:01:47,610
take notes so this is one of the slides

00:01:42,840 --> 00:01:51,930
that was given to me by or the arm v8

00:01:47,610 --> 00:01:53,670
team to describe what on v8 is I hope

00:01:51,930 --> 00:01:58,560
you can read that that's probably a bit

00:01:53,670 --> 00:02:05,130
small basically showing the family from

00:01:58,560 --> 00:02:07,259
on v5 v6 v7 and v8 essentially what it

00:02:05,130 --> 00:02:10,560
shows the most important thing is it

00:02:07,259 --> 00:02:13,680
does everything in 32-bit land just like

00:02:10,560 --> 00:02:16,739
v7 there are obviously 64-bit

00:02:13,680 --> 00:02:19,769
v8 features it also adds some extra

00:02:16,739 --> 00:02:25,579
features which are common to both 32 and

00:02:19,769 --> 00:02:25,579
64-bit in v8 I'll mention some of those

00:02:26,719 --> 00:02:36,329
it is the first 64-bit arm CPU not

00:02:34,620 --> 00:02:43,549
really Open Office is being rubbish

00:02:36,329 --> 00:02:47,069
sorry so it runs both the old and and

00:02:43,549 --> 00:02:51,450
new instruction sets so any pre-existing

00:02:47,069 --> 00:02:54,750
a ouch 32 we can which is arms name now

00:02:51,450 --> 00:02:57,109
for 32-bit arm instructions it will run

00:02:54,750 --> 00:03:03,239
both arm and thumb instruction sets

00:02:57,109 --> 00:03:05,099
exactly like v7 it should be reasonably

00:03:03,239 --> 00:03:06,209
quick I don't know of any exact

00:03:05,099 --> 00:03:08,010
benchmarks people have done and

00:03:06,209 --> 00:03:11,010
obviously we don't have real hardware to

00:03:08,010 --> 00:03:14,489
be able to claim performance for expect

00:03:11,010 --> 00:03:17,159
your own v7 code to work fine and then

00:03:14,489 --> 00:03:22,790
there is the new 64-bit arm instruction

00:03:17,159 --> 00:03:30,840
set it will continue to run VFP v3 so in

00:03:22,790 --> 00:03:33,750
wait foot wait for Mike so it runs

00:03:30,840 --> 00:03:41,519
32-bit just user mode stuff for

00:03:33,750 --> 00:03:42,930
including kernel so it should run that's

00:03:41,519 --> 00:03:45,419
a good question I don't know okay

00:03:42,930 --> 00:03:46,859
actually oh it does yes there's another

00:03:45,419 --> 00:03:49,139
guy here who knows more about it than I

00:03:46,859 --> 00:03:51,389
do it so you can run a 32-bit kernel if

00:03:49,139 --> 00:03:53,879
you yeah of course you'll need the all

00:03:51,389 --> 00:03:55,439
the support stuff you know for the

00:03:53,879 --> 00:04:00,569
actual hardware but yes it will run

00:03:55,439 --> 00:04:05,989
32-bit kernel - okay thanks so what keys

00:04:00,569 --> 00:04:05,989
you want Mike run run

00:04:07,259 --> 00:04:11,189
VFP v3 is the existing vector

00:04:09,900 --> 00:04:14,669
floating-point unit which is

00:04:11,189 --> 00:04:18,209
standardized in arm v7 there is going to

00:04:14,669 --> 00:04:21,180
be a v4 vector floating-point unit in on

00:04:18,209 --> 00:04:24,750
v8 it is backwards compatible it's just

00:04:21,180 --> 00:04:27,010
bigger and better so it's possible to

00:04:24,750 --> 00:04:28,780
build v8 with

00:04:27,010 --> 00:04:32,650
user support for the instruction set or

00:04:28,780 --> 00:04:35,890
with kernel support so the idea is that

00:04:32,650 --> 00:04:36,970
for now you will always have both but at

00:04:35,890 --> 00:04:38,680
some point in the future they might

00:04:36,970 --> 00:04:40,270
start producing hardware that hasn't got

00:04:38,680 --> 00:04:41,250
the kernels book you really don't need

00:04:40,270 --> 00:04:45,820
anymore

00:04:41,250 --> 00:04:48,670
okay the other things in there is the

00:04:45,820 --> 00:04:51,280
neon simply engine is also going to be

00:04:48,670 --> 00:04:53,290
in v8 I believe and I hope that is going

00:04:51,280 --> 00:04:55,030
to be a requirement for it unlike being

00:04:53,290 --> 00:04:58,960
optional in the past which is caused us

00:04:55,030 --> 00:05:00,790
great from doing software just I rat a

00:04:58,960 --> 00:05:03,340
meal about half an hour ago that says

00:05:00,790 --> 00:05:06,430
that that the kernel mentiras will not

00:05:03,340 --> 00:05:09,070
actually accept hardware support for ve8

00:05:06,430 --> 00:05:11,290
in the 32-bit arm namespace so I

00:05:09,070 --> 00:05:12,760
probably won't be able to run the 32-bit

00:05:11,290 --> 00:05:14,230
kernel on the purity because they won't

00:05:12,760 --> 00:05:17,680
add the hardware support for 32-bit

00:05:14,230 --> 00:05:20,860
kernels so 32-bit compatibility it

00:05:17,680 --> 00:05:22,600
supports every existing v7 feature that

00:05:20,860 --> 00:05:23,140
anyone is going is ever going to care

00:05:22,600 --> 00:05:25,450
about

00:05:23,140 --> 00:05:27,100
I believe it does all of it I'm not

00:05:25,450 --> 00:05:29,800
aware of anything that's missing so that

00:05:27,100 --> 00:05:33,010
includes again the sim D the Neon engine

00:05:29,800 --> 00:05:35,130
it includes the on proprietary security

00:05:33,010 --> 00:05:37,360
extensions which are known as trust zone

00:05:35,130 --> 00:05:39,760
it's a it will support the

00:05:37,360 --> 00:05:42,720
virtualization an LPA II that have just

00:05:39,760 --> 00:05:45,160
gone into the a the cortex a15 as well

00:05:42,720 --> 00:05:48,280
so you will be able to do virtualization

00:05:45,160 --> 00:05:51,070
on v8 that means you'll be able to have

00:05:48,280 --> 00:05:56,740
a 64-bit kernel with a mix of 32 and

00:05:51,070 --> 00:05:57,910
64-bit guests it's fully supported the a

00:05:56,740 --> 00:06:01,540
out 64 Iser

00:05:57,910 --> 00:06:04,210
is designed to feel similar to a arch 32

00:06:01,540 --> 00:06:06,370
oh it can't be identical for obvious

00:06:04,210 --> 00:06:10,690
reasons but it will be it's in it the

00:06:06,370 --> 00:06:13,540
feel of it is apparently okay it will be

00:06:10,690 --> 00:06:15,760
fixed length 32-bit instructions there

00:06:13,540 --> 00:06:18,730
will not that there is no plan that I'm

00:06:15,760 --> 00:06:21,460
aware of to do anything like thumb on a

00:06:18,730 --> 00:06:23,950
out 64 I mean obviously if you want to

00:06:21,460 --> 00:06:25,870
run from you can continue to do it so

00:06:23,950 --> 00:06:28,630
why would you bother you can always go

00:06:25,870 --> 00:06:31,210
back to a arch 32 either if you're even

00:06:28,630 --> 00:06:34,740
firm if if you need to

00:06:31,210 --> 00:06:38,350
one thing that is obviously different is

00:06:34,740 --> 00:06:39,980
rather than the existing 60 16 registers

00:06:38,350 --> 00:06:42,590
that you have access to

00:06:39,980 --> 00:06:45,650
there's five bits of register space now

00:06:42,590 --> 00:06:49,220
so that will be 31 general-purpose

00:06:45,650 --> 00:06:50,690
registers they're all 64 bit stack

00:06:49,220 --> 00:06:53,600
pointer program counter or not

00:06:50,690 --> 00:06:56,930
general-purpose the will beef in most

00:06:53,600 --> 00:06:58,880
modes a dedicated zero register which a

00:06:56,930 --> 00:07:04,460
lot of people have been crying out for

00:06:58,880 --> 00:07:08,030
I'm told so more new features much

00:07:04,460 --> 00:07:10,310
improved sim D so instead of the quite

00:07:08,030 --> 00:07:13,100
limited set of registers they get that

00:07:10,310 --> 00:07:16,310
you're gonna get more of them whereas

00:07:13,100 --> 00:07:17,960
previously if you use neon you were very

00:07:16,310 --> 00:07:20,870
limited in terms of what floating-point

00:07:17,960 --> 00:07:22,220
mode it's supported I think it was

00:07:20,870 --> 00:07:24,410
single position instead of double

00:07:22,220 --> 00:07:28,960
position precision I'm not exactly clear

00:07:24,410 --> 00:07:28,960
on all the details the new ones better

00:07:29,080 --> 00:07:35,000
and even more important possibly for

00:07:32,750 --> 00:07:39,250
people who care about these things there

00:07:35,000 --> 00:07:42,830
are new locking instructions ready for

00:07:39,250 --> 00:07:45,530
designed specifically to match the C++

00:07:42,830 --> 00:07:49,610
and C Atomics which are in the latest

00:07:45,530 --> 00:07:52,940
standards arm years ago was not

00:07:49,610 --> 00:07:54,950
wonderful for providing Atomics these

00:07:52,940 --> 00:07:56,720
days it's very very important that these

00:07:54,950 --> 00:08:02,210
work well so they've been designed in

00:07:56,720 --> 00:08:06,430
from the word go now because v8 has

00:08:02,210 --> 00:08:06,430
happened doesn't mean v7 stops here

00:08:07,300 --> 00:08:13,550
there was still a continuing roadmap we

00:08:10,430 --> 00:08:18,200
mean we've seen cortex a8 cortex a9 a 15

00:08:13,550 --> 00:08:20,380
a 7 a is coming there were other members

00:08:18,200 --> 00:08:22,520
in the family still yet to be announced

00:08:20,380 --> 00:08:24,350
which I'm not going to do because I'm

00:08:22,520 --> 00:08:27,560
not going to steal any thunder for

00:08:24,350 --> 00:08:30,290
marketing because I'm not that brave a

00:08:27,560 --> 00:08:32,570
v8 is still under development the

00:08:30,290 --> 00:08:37,280
architecture was announced externally to

00:08:32,570 --> 00:08:39,770
arm q4 last year working with a load of

00:08:37,280 --> 00:08:41,210
partners right now people who all

00:08:39,770 --> 00:08:45,590
developing hardware to go with this

00:08:41,210 --> 00:08:48,260
obviously the remaining specs are

00:08:45,590 --> 00:08:51,320
expected to be released second half of

00:08:48,260 --> 00:08:54,370
2012 I don't know exactly when the plans

00:08:51,320 --> 00:08:57,080
are soonish

00:08:54,370 --> 00:08:59,410
no one's committed to it exactly yet but

00:08:57,080 --> 00:09:03,100
everything should be at their soon and

00:08:59,410 --> 00:09:04,250
expect to see Hardware sometime in 2013

00:09:03,100 --> 00:09:06,410
again

00:09:04,250 --> 00:09:07,910
this actually I we honor honestly can't

00:09:06,410 --> 00:09:11,360
tell you when it is because it will all

00:09:07,910 --> 00:09:13,010
depend on the specific silicon partners

00:09:11,360 --> 00:09:17,680
as to when people actually get things

00:09:13,010 --> 00:09:19,520
out on the market it'll be sometime 2013

00:09:17,680 --> 00:09:21,170
for further information

00:09:19,520 --> 00:09:23,810
if you really want to know more about

00:09:21,170 --> 00:09:26,600
this follow the link on comm slash

00:09:23,810 --> 00:09:28,460
architecture there is more information

00:09:26,600 --> 00:09:32,750
than most people will ever want to know

00:09:28,460 --> 00:09:35,150
about the new New York attacher go have

00:09:32,750 --> 00:09:37,910
a look if you want if you you can ask me

00:09:35,150 --> 00:09:39,740
if you'd like but I'm a software guy not

00:09:37,910 --> 00:09:45,500
a CPU designer so I'm not the white

00:09:39,740 --> 00:09:50,180
person to four wheel detail so I have a

00:09:45,500 --> 00:09:53,660
demo one of the things that arm tends to

00:09:50,180 --> 00:09:57,890
do for design it for new CPUs is we have

00:09:53,660 --> 00:10:03,080
what's called a fast model now fast is a

00:09:57,890 --> 00:10:07,250
relative term it's much faster than any

00:10:03,080 --> 00:10:09,620
models that we've had in the past for

00:10:07,250 --> 00:10:11,360
the sake of not keeping you guys out

00:10:09,620 --> 00:10:13,910
here for 20 minutes waiting for it to

00:10:11,360 --> 00:10:17,029
boot I booted the this earlier here's

00:10:13,910 --> 00:10:20,980
one I made earlier should I say but if

00:10:17,029 --> 00:10:20,980
we switch over we should see

00:10:22,530 --> 00:10:25,650
[Music]

00:10:26,490 --> 00:10:38,820
I have the boot messages the forum a

00:10:35,940 --> 00:10:42,000
fast model you can see it's a standard

00:10:38,820 --> 00:10:44,820
looking Linux kernel the model is giving

00:10:42,000 --> 00:10:46,529
it a gig of ram this comes up really

00:10:44,820 --> 00:10:49,230
really slowly when it starts hence why

00:10:46,529 --> 00:10:51,750
I've already done all this

00:10:49,230 --> 00:10:55,170
there's loads of details about it this

00:10:51,750 --> 00:10:58,260
particular kernel kernel 3.4 compiled by

00:10:55,170 --> 00:11:02,420
Jonathan Austin Garen software

00:10:58,260 --> 00:11:05,190
department in arm this is an SMP model

00:11:02,420 --> 00:11:07,740
which isn't very fast 400 berger mips

00:11:05,190 --> 00:11:16,170
again it's a model it the hardware will

00:11:07,740 --> 00:11:19,620
be much faster and just to show I mean

00:11:16,170 --> 00:11:22,230
we even have this particular model this

00:11:19,620 --> 00:11:24,930
file system includes we have an SSH

00:11:22,230 --> 00:11:27,180
server drop bear it includes Apache it

00:11:24,930 --> 00:11:29,970
includes post squares we have people who

00:11:27,180 --> 00:11:31,380
have already been doing port work to

00:11:29,970 --> 00:11:36,510
make sure that's that a lot of this

00:11:31,380 --> 00:11:39,170
stuff works on a out 64 some patches who

00:11:36,510 --> 00:11:43,610
have gone out not as many as we'd like

00:11:39,170 --> 00:11:43,610
that's going to be improving soon I hope

00:11:44,089 --> 00:11:52,740
so that is the serial console if I move

00:11:49,200 --> 00:11:56,339
that out the way and behind it you

00:11:52,740 --> 00:11:59,880
should see this is Anna Bunty based

00:11:56,339 --> 00:12:01,950
system most of the patches we're going

00:11:59,880 --> 00:12:11,240
to do a bunch you and debian at the time

00:12:01,950 --> 00:12:11,240
but I can log in without caps lock oh no

00:12:20,930 --> 00:12:30,450
right no that's not white let me go and

00:12:26,460 --> 00:12:36,030
talk to the other one yay four demos

00:12:30,450 --> 00:12:38,600
aren't they wonderful just for

00:12:36,030 --> 00:12:38,600
information

00:12:52,559 --> 00:13:01,209
you'll see in a moment it takes a short

00:12:55,689 --> 00:13:03,789
again it's not rapid yet you'll see at

00:13:01,209 --> 00:13:06,089
the moment look you know it's a real

00:13:03,789 --> 00:13:06,089
port

00:13:13,480 --> 00:13:17,850
no it doesn't have a current D package

00:13:24,920 --> 00:13:29,509
and the want le carré apologies the

00:13:27,709 --> 00:13:31,160
worsen will miss and clearly the actor

00:13:29,509 --> 00:13:32,569
where I was running has cleaned up after

00:13:31,160 --> 00:13:34,519
itself I was even going to demonstrate

00:13:32,569 --> 00:13:38,049
deep package installing something you've

00:13:34,519 --> 00:13:38,049
all seen that before trust me it works

00:13:45,069 --> 00:14:03,889
sorry logs it's again it's totally

00:13:59,809 --> 00:14:06,139
emulated it is not designed for absolute

00:14:03,889 --> 00:14:08,049
performance yet it's something that the

00:14:06,139 --> 00:14:15,980
team and I are working on all the time

00:14:08,049 --> 00:14:17,480
what I can do is do that this will take

00:14:15,980 --> 00:14:27,169
a while so I'm going to come back to

00:14:17,480 --> 00:14:31,040
this later are we going to get our hands

00:14:27,169 --> 00:14:34,329
on this fast model at any times it is

00:14:31,040 --> 00:14:37,040
available at the moment for licensing

00:14:34,329 --> 00:14:39,799
people are working on improving that as

00:14:37,040 --> 00:14:47,239
we speak I can't give you full details

00:14:39,799 --> 00:14:49,610
just yet watch this space so that is

00:14:47,239 --> 00:14:51,619
starting X on this virtual frame buffer

00:14:49,610 --> 00:14:54,160
I will come back to it in a in a bit

00:14:51,619 --> 00:14:54,160
shortly

00:14:59,050 --> 00:15:05,330
so terms of bootstrapping the toolchain

00:15:03,320 --> 00:15:07,310
already works people have been doing a

00:15:05,330 --> 00:15:09,500
lot of cross building the till chain

00:15:07,310 --> 00:15:10,910
does run natively as well believe me you

00:15:09,500 --> 00:15:13,010
do not want to be running a native

00:15:10,910 --> 00:15:16,670
compilation on this model you know

00:15:13,010 --> 00:15:19,130
life's too short the point of the model

00:15:16,670 --> 00:15:23,120
is of course to be able to validate

00:15:19,130 --> 00:15:27,250
things at the moment it does work the

00:15:23,120 --> 00:15:29,720
kernel port has been done inside arm

00:15:27,250 --> 00:15:32,540
those of you who watched the kernel

00:15:29,720 --> 00:15:36,200
mailing list will have noticed literally

00:15:32,540 --> 00:15:38,900
last Friday the initial implementation

00:15:36,200 --> 00:15:42,260
stuff was posted to the kernel mailing

00:15:38,900 --> 00:15:44,210
list Catalan and well and a bunch of

00:15:42,260 --> 00:15:46,310
other people have been doing lots and

00:15:44,210 --> 00:15:49,940
lots of work to get this as a new port

00:15:46,310 --> 00:15:52,160
the plan isn't is it will not end up

00:15:49,940 --> 00:15:55,040
being combined with the existing our

00:15:52,160 --> 00:15:58,430
charm it's going to be arch a arch 64

00:15:55,040 --> 00:16:00,080
that's a controversial decision to be

00:15:58,430 --> 00:16:01,610
honest like anything in the kernel if

00:16:00,080 --> 00:16:04,190
you when you first turn up with a big

00:16:01,610 --> 00:16:06,440
set of patches some people want to merge

00:16:04,190 --> 00:16:09,860
32 and 64 what like has happened for

00:16:06,440 --> 00:16:15,770
other architectures for us this is such

00:16:09,860 --> 00:16:17,240
a different CPU that that the what the

00:16:15,770 --> 00:16:19,940
arm folks would like to do is to keep

00:16:17,240 --> 00:16:21,530
them separate we'll see how it goes but

00:16:19,940 --> 00:16:23,870
basically the kernel work is is

00:16:21,530 --> 00:16:27,440
happening right now

00:16:23,870 --> 00:16:29,390
bootstrapping userland again cross

00:16:27,440 --> 00:16:31,310
builder based system we're testing using

00:16:29,390 --> 00:16:33,880
models for now there was a small team in

00:16:31,310 --> 00:16:37,310
arm who've been working on this already

00:16:33,880 --> 00:16:42,200
clearly distro folks are going to be

00:16:37,310 --> 00:16:42,560
doing it next one of my jobs in Lenoir

00:16:42,200 --> 00:16:44,450
Oh

00:16:42,560 --> 00:16:49,100
is going to be to help support the

00:16:44,450 --> 00:16:51,950
distros we're looking at supplying to

00:16:49,100 --> 00:16:52,670
anyone who's interested a basic root

00:16:51,950 --> 00:16:56,510
filesystem

00:16:52,670 --> 00:16:58,280
using open embedded and the point of

00:16:56,510 --> 00:16:59,810
that of that root filesystem will be

00:16:58,280 --> 00:17:01,280
that you will be able to chew root in it

00:16:59,810 --> 00:17:03,410
you'll be able to do whatever else you

00:17:01,280 --> 00:17:07,240
need use the tools over to help

00:17:03,410 --> 00:17:10,070
bootstrap the beginning of any distro

00:17:07,240 --> 00:17:12,790
obviously the tool chain is is out

00:17:10,070 --> 00:17:12,790
though already

00:17:13,100 --> 00:17:18,410
it's up streaming GCC people are working

00:17:16,400 --> 00:17:20,900
on back porting to GCC for seven I'm

00:17:18,410 --> 00:17:22,220
getting ahead of myself here the other

00:17:20,900 --> 00:17:23,750
thing that's going to happen inland ro

00:17:22,220 --> 00:17:26,209
is we're going to be setting up a bug

00:17:23,750 --> 00:17:29,240
tracker for the distros to share the on

00:17:26,209 --> 00:17:30,890
v8 work so when people do come up with

00:17:29,240 --> 00:17:32,750
patches they need to go upstream we

00:17:30,890 --> 00:17:35,060
don't need to have all of the distros

00:17:32,750 --> 00:17:38,690
all doing the work you know it will be

00:17:35,060 --> 00:17:42,500
nice if we work together the enterprise

00:17:38,690 --> 00:17:44,840
Destro's have are so enterprise Destro's

00:17:42,500 --> 00:17:48,620
have been starting work already the arm

00:17:44,840 --> 00:17:50,090
server market is potentially very

00:17:48,620 --> 00:17:53,210
lucrative all that's what they're all

00:17:50,090 --> 00:17:59,390
hoping v8 is going to be a large part of

00:17:53,210 --> 00:18:01,520
that so for AR 64 in debian the plan is

00:17:59,390 --> 00:18:02,750
will be cross bootstrapping because of

00:18:01,520 --> 00:18:07,640
course that's what you need to do for

00:18:02,750 --> 00:18:09,740
any brand new architecture switch to

00:18:07,640 --> 00:18:11,450
real hardware as soon as we can

00:18:09,740 --> 00:18:14,120
there will be hardware available

00:18:11,450 --> 00:18:15,260
sometime next year and of course I'm

00:18:14,120 --> 00:18:18,080
going to be pushing to get hold of some

00:18:15,260 --> 00:18:20,630
from tufa debian as much as we can we'll

00:18:18,080 --> 00:18:23,630
see how well it works if we can get into

00:18:20,630 --> 00:18:25,130
debian ports not too long after that if

00:18:23,630 --> 00:18:27,470
because we can use the models before

00:18:25,130 --> 00:18:29,390
then for a verification it shouldn't be

00:18:27,470 --> 00:18:32,330
too difficult to get a basic setup

00:18:29,390 --> 00:18:34,880
working and really really it would be

00:18:32,330 --> 00:18:36,530
nice if we get it too easy plus one yes

00:18:34,880 --> 00:18:37,940
I realized that not that longer way

00:18:36,530 --> 00:18:43,090
we're putting on a freeze in two years

00:18:37,940 --> 00:18:43,090
it should be doable he wants to help

00:18:43,240 --> 00:18:48,310
yeah

00:18:44,510 --> 00:18:52,340
Oh only two of you Oh three four whoo

00:18:48,310 --> 00:18:53,870
right if basically if you're interested

00:18:52,340 --> 00:18:55,400
of course I'm not taking names got

00:18:53,870 --> 00:18:57,230
anything stupid like that

00:18:55,400 --> 00:19:00,470
join us and Debian armed that's where

00:18:57,230 --> 00:19:02,870
this is gonna start happening soon as I

00:19:00,470 --> 00:19:04,250
said there were more details coming that

00:19:02,870 --> 00:19:06,800
I can't tell you about yet because I

00:19:04,250 --> 00:19:10,880
don't know all of them I'm hoping we

00:19:06,800 --> 00:19:13,850
should get some well some extra things

00:19:10,880 --> 00:19:15,380
going soon so again thanks arm the

00:19:13,850 --> 00:19:18,980
narwhal community who've all who have

00:19:15,380 --> 00:19:20,390
already been involved in this so the

00:19:18,980 --> 00:19:22,490
most useful thing everyone can do right

00:19:20,390 --> 00:19:25,680
now is make your multi arch build

00:19:22,490 --> 00:19:27,690
dependencies work yes

00:19:25,680 --> 00:19:29,250
you do for easily nothing to do with out

00:19:27,690 --> 00:19:33,240
if we don't know anything just make it

00:19:29,250 --> 00:19:36,090
work oh and make your packages cross

00:19:33,240 --> 00:19:38,250
build well the tool chain will do most

00:19:36,090 --> 00:19:40,680
of it for you if you if your packages

00:19:38,250 --> 00:19:42,750
are already working in multi arch and

00:19:40,680 --> 00:19:49,860
cost building most of this will just

00:19:42,750 --> 00:19:54,170
work we hope how far has it gone regard

00:19:49,860 --> 00:19:58,850
in Debian porting sorry how far has gone

00:19:54,170 --> 00:20:01,890
has it gone regarding the important um

00:19:58,850 --> 00:20:04,260
we already have as I said the in the

00:20:01,890 --> 00:20:06,450
internal team they've been doing and to

00:20:04,260 --> 00:20:09,030
be honest and a bum to natty port the

00:20:06,450 --> 00:20:11,370
vast majority of the work is clearly a

00:20:09,030 --> 00:20:13,280
portable straight to Debian I mean even

00:20:11,370 --> 00:20:16,320
to the level that the initial tool chain

00:20:13,280 --> 00:20:19,200
releases or multi Arch by default that

00:20:16,320 --> 00:20:23,010
kind of thing I don't know how far it's

00:20:19,200 --> 00:20:25,290
going to work so I mean the images you

00:20:23,010 --> 00:20:26,960
boot it is basically it's a bun to but

00:20:25,290 --> 00:20:28,550
that's more or less the same at the base

00:20:26,960 --> 00:20:31,830
it all works

00:20:28,550 --> 00:20:34,500
only 10% of the patching needed for that

00:20:31,830 --> 00:20:36,900
was actually a arch 64 specific very

00:20:34,500 --> 00:20:39,210
little change needed to be made because

00:20:36,900 --> 00:20:40,770
mostly it doesn't matter 90 percent of

00:20:39,210 --> 00:20:52,290
those packages work Ross building

00:20:40,770 --> 00:20:59,040
patches sorry yep and so the set number

00:20:52,290 --> 00:21:02,370
of packages built 64 is a hundred and

00:20:59,040 --> 00:21:05,100
thirty I think it's basically enough to

00:21:02,370 --> 00:21:13,590
do bootstrap with Apache and lamp a

00:21:05,100 --> 00:21:15,600
MySQL proxy yeah you might be 170 or

00:21:13,590 --> 00:21:19,700
something yeah it wasn't yes basically

00:21:15,600 --> 00:21:21,929
we have the base system plus a few bits

00:21:19,700 --> 00:21:23,760
one of the things that people wanted to

00:21:21,929 --> 00:21:26,340
demonstrate was a lamp stack obviously

00:21:23,760 --> 00:21:28,559
people who are going to want a 64 bit

00:21:26,340 --> 00:21:31,710
arm system in a server will probably

00:21:28,559 --> 00:21:33,780
want lump stack who'da thought and then

00:21:31,710 --> 00:21:39,340
we can see their neon

00:21:33,780 --> 00:21:44,910
be filed b-but neon as far as I know

00:21:39,340 --> 00:21:44,910
will be required for obviate yes I

00:21:47,610 --> 00:21:52,390
already answered mark Ross on IRC but

00:21:50,230 --> 00:21:55,480
yeah I guess it's good for the room to

00:21:52,390 --> 00:21:57,520
the plan because it is default for v8

00:21:55,480 --> 00:21:59,380
will actually be to have neon on by

00:21:57,520 --> 00:22:01,990
default in the Debian and Ubuntu tool

00:21:59,380 --> 00:22:11,560
chains so no need for people to flip the

00:22:01,990 --> 00:22:12,880
switch themselves so yes so although all

00:22:11,560 --> 00:22:15,100
that porting works been done the only

00:22:12,880 --> 00:22:16,360
problem is that arm legal won't let that

00:22:15,100 --> 00:22:18,640
people have done the works and then

00:22:16,360 --> 00:22:20,790
either patch is in so we mostly have to

00:22:18,640 --> 00:22:23,820
do all again which is a bit tedious but

00:22:20,790 --> 00:22:28,840
and well it sucks

00:22:23,820 --> 00:22:33,300
someone give us a menu please this works

00:22:28,840 --> 00:22:33,300
better on a bigger screen of course

00:22:42,220 --> 00:22:50,240
what we what we have running here is a

00:22:45,650 --> 00:22:54,529
32-bit ARM HF installation

00:22:50,240 --> 00:23:00,620
it's an xfce build this is an example of

00:22:54,529 --> 00:23:02,510
specifically to show existing v7 32-bit

00:23:00,620 --> 00:23:04,640
builds do not need any tweak any tweaks

00:23:02,510 --> 00:23:07,640
at all the file system that we have here

00:23:04,640 --> 00:23:09,830
was built at 64 and literally we just on

00:23:07,640 --> 00:23:17,720
tar the 32-bit she wrote into it and it

00:23:09,830 --> 00:23:19,220
just works xfce whatwhat's the shortcut

00:23:17,720 --> 00:23:34,330
keys to bring up a menu or anything

00:23:19,220 --> 00:23:34,330
anyone alt f2 and then type

00:23:38,720 --> 00:23:43,180
yeah I know demos wonderful

00:23:46,730 --> 00:23:52,210
sorry Adam yep

00:24:00,320 --> 00:24:04,240
ah it is though

00:24:07,240 --> 00:24:24,000
terminal right I'll come back to it what

00:24:21,309 --> 00:24:24,000
I can demonstrate

00:24:32,559 --> 00:24:40,970
is it is running a lamp stack while it's

00:24:38,660 --> 00:24:44,000
waiting doing emulated things in X which

00:24:40,970 --> 00:24:49,490
is never going to be fast I hope you can

00:24:44,000 --> 00:24:51,140
all see that we have a out 64 and it

00:24:49,490 --> 00:24:52,690
tells you all of that information of

00:24:51,140 --> 00:24:56,929
phpinfo

00:24:52,690 --> 00:24:58,730
it has PHP myadmin installed and a whole

00:24:56,929 --> 00:25:00,140
bunch of other stuff they take bloody

00:24:58,730 --> 00:25:02,390
ages especially when you're trying to

00:25:00,140 --> 00:25:11,090
get it to do stuff in X this hopefully

00:25:02,390 --> 00:25:12,380
is a know something helpful yeah and now

00:25:11,090 --> 00:25:14,890
it's just come up and in the terminal

00:25:12,380 --> 00:25:14,890
hopefully

00:25:24,470 --> 00:25:32,659
oh now talk amongst yourselves for

00:25:31,159 --> 00:25:35,860
twenty minutes and we'll get a Firefox

00:25:32,659 --> 00:25:38,600
surely well that's well that's loading

00:25:35,860 --> 00:25:41,570
due to the all the coolness of multi

00:25:38,600 --> 00:25:43,549
arch we can run 32-bit things and 64-bit

00:25:41,570 --> 00:25:46,940
things together hell yes absolutely and

00:25:43,549 --> 00:25:49,610
what that means is open JDK 32-bit

00:25:46,940 --> 00:25:52,909
should work out of the box yeah and if

00:25:49,610 --> 00:25:58,419
someone was interested in making an

00:25:52,909 --> 00:26:02,860
optimized ard for ya version of open JDK

00:25:58,419 --> 00:26:02,860
that might be nice yeah absolutely

00:26:03,370 --> 00:26:07,429
this is exactly that one of the reasons

00:26:06,049 --> 00:26:09,500
what I think my arm was was very

00:26:07,429 --> 00:26:12,350
interested in Debian and Ubuntu is multi

00:26:09,500 --> 00:26:23,419
arch makes using the 32 and 64-bit mix

00:26:12,350 --> 00:26:28,789
so much easier I don't want to start

00:26:23,419 --> 00:26:30,409
type Firefox again this is why I started

00:26:28,789 --> 00:26:32,809
the model earlier it takes it does take

00:26:30,409 --> 00:26:34,970
10 minutes or so to boot and starting up

00:26:32,809 --> 00:26:37,340
a Firefox takes about the same length of

00:26:34,970 --> 00:26:39,530
time again I would love to show you

00:26:37,340 --> 00:26:43,039
Firefox looking at a web page locally

00:26:39,530 --> 00:26:44,900
we'll get there hopefully of course we

00:26:43,039 --> 00:26:47,690
haven't got so got so follow up the

00:26:44,900 --> 00:26:50,059
stack in in bootstrapping a out 64 to

00:26:47,690 --> 00:26:51,740
get to Firefox that's way way out to

00:26:50,059 --> 00:26:55,700
scope at this point and of course

00:26:51,740 --> 00:26:57,559
equally Firefox shouldn't need 64-bit

00:26:55,700 --> 00:26:59,419
well it depends it might run a bit

00:26:57,559 --> 00:27:03,230
longer where this memory leaks if it's

00:26:59,419 --> 00:27:05,000
64 bit and set of 32 who knows but the

00:27:03,230 --> 00:27:07,610
things that people care about so far for

00:27:05,000 --> 00:27:16,130
64-bit our server tasks not desktop

00:27:07,610 --> 00:27:17,630
tasks anything else oh come on please

00:27:16,130 --> 00:27:20,900
you've got to carry on talking's and so

00:27:17,630 --> 00:27:22,669
so we say we see Firefox to heart well

00:27:20,900 --> 00:27:27,860
again this is still one model running

00:27:22,669 --> 00:27:29,780
all of it no I want you know make pains

00:27:27,860 --> 00:27:33,230
to point that out

00:27:29,780 --> 00:27:37,250
this is emulating of v8 doing everything

00:27:33,230 --> 00:27:39,770
so you mentioned at the end of 2000

00:27:37,250 --> 00:27:41,990
13 I think for actual hardware yes I

00:27:39,770 --> 00:27:43,460
mean you want to ship this is a daily

00:27:41,990 --> 00:27:46,220
part of wheezy plus one which is going

00:27:43,460 --> 00:27:49,430
to free sort of first half of 2014

00:27:46,220 --> 00:27:50,840
yep realistically how quickly are we as

00:27:49,430 --> 00:27:53,320
developers going to be able to get our

00:27:50,840 --> 00:27:58,730
hands on something we can play with I

00:27:53,320 --> 00:28:01,610
wish I knew you might like to point out

00:27:58,730 --> 00:28:04,130
to arm that if they want us to ship them

00:28:01,610 --> 00:28:07,640
to be able to play oh absolutely

00:28:04,130 --> 00:28:10,190
it's um FPGAs that people have already

00:28:07,640 --> 00:28:11,960
announced which which are much closer

00:28:10,190 --> 00:28:12,320
for modeling than the software will ever

00:28:11,960 --> 00:28:16,310
be

00:28:12,320 --> 00:28:18,290
but if anything is slower as soon as we

00:28:16,310 --> 00:28:20,090
get hardware available people there is

00:28:18,290 --> 00:28:22,510
or so many people bottlenecks and

00:28:20,090 --> 00:28:25,580
queuing up to want to get hold of some

00:28:22,510 --> 00:28:27,830
and of course again it's not down to arm

00:28:25,580 --> 00:28:29,570
to produce them this is it's the

00:28:27,830 --> 00:28:31,910
wonderful thing of working for a chip

00:28:29,570 --> 00:28:36,440
for a CPU designer rather than the cpu

00:28:31,910 --> 00:28:38,390
producer is we're going to need you know

00:28:36,440 --> 00:28:40,520
all of the usual arm silicon partner

00:28:38,390 --> 00:28:42,440
suspects are probably going to end up

00:28:40,520 --> 00:28:43,940
doing v8 and we're going to have to wait

00:28:42,440 --> 00:28:47,390
for the first versions of those to come

00:28:43,940 --> 00:28:48,800
out we will be pushing hard to get stuff

00:28:47,390 --> 00:28:51,820
out into the community as soon as

00:28:48,800 --> 00:28:56,450
possible because a it matters Oh

00:28:51,820 --> 00:28:58,850
Firefox getting their next ppm yeah want

00:28:56,450 --> 00:29:01,160
you to ask a few things yeah the first

00:28:58,850 --> 00:29:05,510
thing so you showing that the first

00:29:01,160 --> 00:29:09,440
model what about supports for QM oh good

00:29:05,510 --> 00:29:13,820
question arm and QM you have an

00:29:09,440 --> 00:29:16,640
interesting relationship on tip are not

00:29:13,820 --> 00:29:19,040
very happy about releasing enough

00:29:16,640 --> 00:29:23,420
information directly or especially not

00:29:19,040 --> 00:29:26,180
working on QM you the information that

00:29:23,420 --> 00:29:29,750
is necessary to do QM you will be out

00:29:26,180 --> 00:29:31,370
soon I am told and there are a whole

00:29:29,750 --> 00:29:32,060
bunch of people who are queuing up to

00:29:31,370 --> 00:29:35,540
work on it

00:29:32,060 --> 00:29:37,990
the Lenovo tool chain folks also want

00:29:35,540 --> 00:29:41,450
the QM you as well because it helps them

00:29:37,990 --> 00:29:43,420
so I would expect as soon as the specs

00:29:41,450 --> 00:29:46,090
come out it won't take long

00:29:43,420 --> 00:29:49,820
that's the best I can say at this point

00:29:46,090 --> 00:29:51,149
okay and you also mentioned that most

00:29:49,820 --> 00:29:56,070
people don't need the

00:29:51,149 --> 00:29:58,229
the 64-bit so what would they be

00:29:56,070 --> 00:30:00,659
installing would they be installing

00:29:58,229 --> 00:30:02,729
32-bit arm and then just install

00:30:00,659 --> 00:30:04,499
additional packages I'm just wondering

00:30:02,729 --> 00:30:08,909
do we need something in Indian state you

00:30:04,499 --> 00:30:10,469
need Debian installer spot well most

00:30:08,909 --> 00:30:14,129
people aren't going to need 64-bit

00:30:10,469 --> 00:30:17,190
desktop stuff I mean it'll work

00:30:14,129 --> 00:30:19,739
oh yay here we go this is the same PHP

00:30:17,190 --> 00:30:24,649
info page but running locally inside the

00:30:19,739 --> 00:30:24,649
model and look it does work I could even

00:30:29,389 --> 00:30:36,119
maybe it's talks to me

00:30:31,739 --> 00:30:37,200
it'll take a short while we're expecting

00:30:36,119 --> 00:30:40,799
that people are going to want that for

00:30:37,200 --> 00:30:48,080
servers for desktops it's gonna take a

00:30:40,799 --> 00:30:48,080
while so Neil had a question

00:30:57,590 --> 00:31:03,840
it's a question from Bernard link on IRC

00:31:01,170 --> 00:31:06,870
what's the user space memory layout is

00:31:03,840 --> 00:31:08,670
there any chance of the stuffing out the

00:31:06,870 --> 00:31:12,650
first four gig of virtual memory to make

00:31:08,670 --> 00:31:12,650
sure all 32 bit assumptions are cached

00:31:12,980 --> 00:31:20,760
maybe that's it that's a question I

00:31:19,170 --> 00:31:26,100
honestly can't can't help with I don't

00:31:20,760 --> 00:31:27,750
know and yet he's default over other

00:31:26,100 --> 00:31:29,460
stuff you know it's a default Apache

00:31:27,750 --> 00:31:38,250
install on here with some things

00:31:29,460 --> 00:31:39,710
installed that's probably gonna take a

00:31:38,250 --> 00:31:54,240
while

00:31:39,710 --> 00:31:55,980
especially when I typo it yeah there's

00:31:54,240 --> 00:31:58,110
going to be a lot more to technical

00:31:55,980 --> 00:32:05,360
information coming out in the next few

00:31:58,110 --> 00:32:07,680
months we'll see I mean as it is

00:32:05,360 --> 00:32:10,470
definitely what the plan will be for

00:32:07,680 --> 00:32:12,180
Debian work is we I expect as soon as we

00:32:10,470 --> 00:32:15,780
get hardware we're going to be running a

00:32:12,180 --> 00:32:19,200
base of arm HF you know a base system

00:32:15,780 --> 00:32:21,030
and obviously 64-bit kernel 32-bit

00:32:19,200 --> 00:32:25,200
userland and then we can have cheer outs

00:32:21,030 --> 00:32:27,360
for sit for actually building as did the

00:32:25,200 --> 00:32:29,610
DSA folks keep on pointing out we did

00:32:27,360 --> 00:32:32,880
this the wrong way with arm HF and we

00:32:29,610 --> 00:32:34,860
had an arm a Jeff base system with the

00:32:32,880 --> 00:32:38,220
cheer outs and that then meant that we

00:32:34,860 --> 00:32:41,690
ended up having to running unstable on

00:32:38,220 --> 00:32:50,310
the DSA box is not a fun experience and

00:32:41,690 --> 00:32:53,030
they don't like it go on you can

00:32:50,310 --> 00:32:55,920
actually see up top here although he

00:32:53,030 --> 00:32:58,770
there is a number which is a count of

00:32:55,920 --> 00:33:01,650
total instructions run so far and that

00:32:58,770 --> 00:33:06,090
is well into 1.4 billion at this point

00:33:01,650 --> 00:33:10,050
it's the suggestion is from the folks

00:33:06,090 --> 00:33:10,710
who know that on a reasonable size only

00:33:10,050 --> 00:33:12,540
00:33:10,710 --> 00:33:14,640
you should expect to see Quillin

00:33:12,540 --> 00:33:15,930
performance in the model on the order of

00:33:14,640 --> 00:33:19,050
10 to 20 megahertz

00:33:15,930 --> 00:33:21,000
it depends hugely on exactly what

00:33:19,050 --> 00:33:23,790
hardware you're running and what tasks

00:33:21,000 --> 00:33:26,070
you're doing so it's not something you

00:33:23,790 --> 00:33:27,920
want to be doing a native compiled on no

00:33:26,070 --> 00:33:31,680
way no how

00:33:27,920 --> 00:33:35,370
look we have phpMyAdmin so look we have

00:33:31,680 --> 00:33:36,750
PHP we have my C we have there yes there

00:33:35,370 --> 00:33:38,460
was a my sequel on here there's a post

00:33:36,750 --> 00:33:45,530
quiz on here it all works for a lamp

00:33:38,460 --> 00:33:45,530
stack do we have any other questions

00:33:47,060 --> 00:33:55,260
silence dissent so well I hope you

00:33:52,110 --> 00:33:58,200
enjoyed this and the demo worked almost

00:33:55,260 --> 00:34:00,900
as well as I hoped hey demos we all know

00:33:58,200 --> 00:34:03,330
how that goes thank you all for coming

00:34:00,900 --> 00:34:05,130
as I said there is scope for a lot of

00:34:03,330 --> 00:34:07,370
people to get involved doing cool stuff

00:34:05,130 --> 00:34:09,630
on an architect you bring up

00:34:07,370 --> 00:34:11,100
Konstantinos will agree I'm sure B Dell

00:34:09,630 --> 00:34:13,770
and other folks who do not arch bring

00:34:11,100 --> 00:34:15,750
bring ups will say yeah it's a lovely

00:34:13,770 --> 00:34:17,970
cool thing to do it could be very

00:34:15,750 --> 00:34:21,300
frustrating although reward rewarding

00:34:17,970 --> 00:34:24,460
when it all works so please join in find

00:34:21,300 --> 00:34:30,789
us on Debian on thank you

00:34:24,460 --> 00:34:30,789

YouTube URL: https://www.youtube.com/watch?v=If_bk9S3nN0


