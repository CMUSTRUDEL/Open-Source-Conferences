Title: Linux Capabilities
Publication date: 2017-11-28
Playlist: DebConf 12
Description: 
	by Luciano Bello

At: DebConf12
https://debconf12.debconf.org/
Room: Roberto TerÃ¡n
Scheduled start: 2012-07-10 17:00:00
Captions: 
	00:00:01,070 --> 00:00:11,519
so yes just began so we just began okay

00:00:08,540 --> 00:00:13,200
I'm extremely surprised of the amount of

00:00:11,519 --> 00:00:19,619
people I mean it's not only the weather

00:00:13,200 --> 00:00:22,320
it's the title this talk was for Debian

00:00:19,619 --> 00:00:23,490
day and I was extremely surprised for

00:00:22,320 --> 00:00:26,160
the amount of people there too

00:00:23,490 --> 00:00:28,560
but this is gonna be the advanced

00:00:26,160 --> 00:00:34,920
version because come on your Debian

00:00:28,560 --> 00:00:37,559
developers so yeah so just you know how

00:00:34,920 --> 00:00:42,750
many of you know something about

00:00:37,559 --> 00:00:44,940
capabilities and from that amount

00:00:42,750 --> 00:00:49,110
how many of you it's only a rough idea

00:00:44,940 --> 00:00:53,760
but not the results that's right that

00:00:49,110 --> 00:00:56,309
talk is for you uh-huh

00:00:53,760 --> 00:01:01,160
okay so that is somebody who has no idea

00:00:56,309 --> 00:01:07,830
about colleges okay great great awesome

00:01:01,160 --> 00:01:09,479
so let's let's try to to go there so you

00:01:07,830 --> 00:01:12,720
know the problem that we have in unix

00:01:09,479 --> 00:01:18,810
systems so otherwise you are root you

00:01:12,720 --> 00:01:22,950
are God you are full power or you are a

00:01:18,810 --> 00:01:26,310
simple user without any power at all so

00:01:22,950 --> 00:01:30,090
this is the typical route non-rush

00:01:26,310 --> 00:01:35,400
problem so linux capability wants to

00:01:30,090 --> 00:01:39,420
tackle this this come of issues and we

00:01:35,400 --> 00:01:42,299
have some solutions for that one is one

00:01:39,420 --> 00:01:47,250
is the bit sweet how do you pronounce

00:01:42,299 --> 00:01:53,930
that in English I said sweet you said su

00:01:47,250 --> 00:01:53,930
ID okay su ID and the other one is surah

00:01:54,229 --> 00:02:00,360
so I hope that Paul that many of you are

00:01:57,360 --> 00:02:02,520
familiar with those concepts so now we

00:02:00,360 --> 00:02:06,140
are talking about capabilities so this

00:02:02,520 --> 00:02:10,780
these two approaches are a way to give a

00:02:06,140 --> 00:02:13,990
full power to a task

00:02:10,780 --> 00:02:17,560
- a process to abuse but only for a

00:02:13,990 --> 00:02:23,620
temporal moment for some time of limited

00:02:17,560 --> 00:02:26,290
scope but we would like to - - to be

00:02:23,620 --> 00:02:34,780
more precise than that so let's go to

00:02:26,290 --> 00:02:37,590
the example of ping so so many of you

00:02:34,780 --> 00:02:42,180
probably know that being is with a bit

00:02:37,590 --> 00:02:42,180
su ID yes

00:02:49,750 --> 00:02:57,690
so it's not working and it's not working

00:02:52,180 --> 00:03:01,630
because ping requests open a raw socket

00:02:57,690 --> 00:03:04,330
says that and only only only root can

00:03:01,630 --> 00:03:08,500
open a raw socket in the same way that

00:03:04,330 --> 00:03:12,520
only root can open a port under the 1024

00:03:08,500 --> 00:03:14,800
and bacchanal things so we need to give

00:03:12,520 --> 00:03:17,410
you we need to give to ping the

00:03:14,800 --> 00:03:19,650
capability of open a raw socket but only

00:03:17,410 --> 00:03:19,650
that

00:03:26,099 --> 00:03:32,930
I think is disability

00:03:29,760 --> 00:03:32,930
let me check here

00:03:38,520 --> 00:03:41,090
yes

00:03:52,940 --> 00:03:57,920
see so this version of ping which is the

00:03:55,640 --> 00:04:05,300
same one but without the bits with the

00:03:57,920 --> 00:04:08,900
BTS UID and can make the task without

00:04:05,300 --> 00:04:14,180
this bit because as has the capability

00:04:08,900 --> 00:04:17,660
of open this rogue port so this is the

00:04:14,180 --> 00:04:28,280
classical basic example so hands up if

00:04:17,660 --> 00:04:30,620
you get it let's continue yes wake up

00:04:28,280 --> 00:04:32,600
abilities important because tries to

00:04:30,620 --> 00:04:34,310
make something about the minimum at the

00:04:32,600 --> 00:04:36,530
minimum privilege which is not the case

00:04:34,310 --> 00:04:42,350
with the other with the pseudo or reader

00:04:36,530 --> 00:04:43,970
with the su ID so this this concept of

00:04:42,350 --> 00:04:49,760
capabilities have been in the kernel

00:04:43,970 --> 00:04:52,670
since 2.2 which was quite time along but

00:04:49,760 --> 00:04:58,820
it has the current form that is useful

00:04:52,670 --> 00:05:04,070
sang-ho since 2 624 and request extended

00:04:58,820 --> 00:05:08,750
file attributes so doesn't work on NFS

00:05:04,070 --> 00:05:13,550
under common things and the two basic

00:05:08,750 --> 00:05:16,870
comments are dead cup and set cup so

00:05:13,550 --> 00:05:22,160
these two comments are in this package

00:05:16,870 --> 00:05:24,830
comes with some other nice tools get

00:05:22,160 --> 00:05:27,470
pickups it's a way to know which is the

00:05:24,830 --> 00:05:37,000
capability of one process running so let

00:05:27,470 --> 00:05:37,000
me show you so let's run in here

00:05:47,590 --> 00:05:57,880
yep so this process is running with this

00:05:50,080 --> 00:06:02,400
capability this is the way that you use

00:05:57,880 --> 00:06:05,620
setup so you need of course a capability

00:06:02,400 --> 00:06:09,090
from the sets of capabilities that you

00:06:05,620 --> 00:06:13,960
can find that set in the man page

00:06:09,090 --> 00:06:19,900
capabilities it's like 35 different

00:06:13,960 --> 00:06:22,470
capabilities let's make a rough so for

00:06:19,900 --> 00:06:28,000
example this one can change the owner of

00:06:22,470 --> 00:06:32,830
control something it's not too worried

00:06:28,000 --> 00:06:38,050
isn't it yes Joan you can kill any

00:06:32,830 --> 00:06:41,200
process with this one yes you can open a

00:06:38,050 --> 00:06:47,310
road circuit you can this one can allows

00:06:41,200 --> 00:06:49,510
you to bind a port less than 1024 of

00:06:47,310 --> 00:06:54,640
course there is a capability for set

00:06:49,510 --> 00:06:57,660
capabilities so you put the capability

00:06:54,640 --> 00:07:02,350
to put an operator and you you put a set

00:06:57,660 --> 00:07:04,930
this that's it it works like yeah I

00:07:02,350 --> 00:07:07,210
think this is the next slide so let's

00:07:04,930 --> 00:07:10,479
let's let's work on that after that and

00:07:07,210 --> 00:07:13,780
of course the file and there's the

00:07:10,479 --> 00:07:17,970
package lip cup in GU tools which

00:07:13,780 --> 00:07:20,680
include other tools net cap list the

00:07:17,970 --> 00:07:24,010
capabilities of the demons running in

00:07:20,680 --> 00:07:26,560
ports file cup it's for files and PS

00:07:24,010 --> 00:07:29,979
cups is an extended version of get baked

00:07:26,560 --> 00:07:33,940
ups so this is the example just for

00:07:29,979 --> 00:07:37,960
documentation so this looks like a way

00:07:33,940 --> 00:07:42,100
to avoid bit OSU ID we have many of

00:07:37,960 --> 00:07:47,070
those we have a list of those indeed the

00:07:42,100 --> 00:07:47,070
list is collected by the security group

00:07:47,310 --> 00:07:57,909
Debian security that Sweden yep it's a

00:07:54,700 --> 00:08:04,720
extremely huge list is extremely

00:07:57,909 --> 00:08:13,440
outdated let me check how many of those

00:08:04,720 --> 00:08:21,669
refers to root yes like 300 of those are

00:08:13,440 --> 00:08:24,550
su ID of root yes in Lenin because this

00:08:21,669 --> 00:08:30,729
is pasted on Lanie that's a bit a bit

00:08:24,550 --> 00:08:35,050
just a bit off so that he is only four

00:08:30,729 --> 00:08:36,459
for su ID for per root otherwise we

00:08:35,050 --> 00:08:37,870
don't need these kind of things we don't

00:08:36,459 --> 00:08:40,030
need ability because we are not running

00:08:37,870 --> 00:08:44,980
with any capabilities so for example a

00:08:40,030 --> 00:08:48,220
UNIX eh p w VD used to run with bit su

00:08:44,980 --> 00:08:48,970
ID but not anymore so that that's fixed

00:08:48,220 --> 00:08:52,540
somehow

00:08:48,970 --> 00:09:00,400
and a funny other thing it's that could

00:08:52,540 --> 00:09:01,170
be useful for other tools and so let me

00:09:00,400 --> 00:09:04,089
show you

00:09:01,170 --> 00:09:06,430
Wireshark so you're familiar with were

00:09:04,089 --> 00:09:09,339
shocked I love this program and it's

00:09:06,430 --> 00:09:10,630
useful for a sniff the network but if

00:09:09,339 --> 00:09:16,209
you're running as a simple use that you

00:09:10,630 --> 00:09:23,400
can't sniff in any any interface if you

00:09:16,209 --> 00:09:23,400
bring we're shack as fruit you can so

00:09:23,550 --> 00:09:30,940
that's right but you have a warning

00:09:28,480 --> 00:09:34,120
saying please don't run this program as

00:09:30,940 --> 00:09:37,110
root so it's yeah you know it's not that

00:09:34,120 --> 00:09:46,920
useful if you can't run wash a cockroach

00:09:37,110 --> 00:09:49,839
so a way to fix this is with this common

00:09:46,920 --> 00:09:52,660
so I'm extending this this binary

00:09:49,839 --> 00:09:55,930
dump cap which is the process in charge

00:09:52,660 --> 00:10:02,589
of doing the actual sniffing with the

00:09:55,930 --> 00:10:05,980
capability of sniff and in this case I

00:10:02,589 --> 00:10:09,370
can sniff as a simple user without all

00:10:05,980 --> 00:10:10,690
the problems that I have I mean worship

00:10:09,370 --> 00:10:12,700
needs to parse a lot of things

00:10:10,690 --> 00:10:16,210
that's the typical of buffer overflow

00:10:12,700 --> 00:10:19,840
problems so I I can I can be safe

00:10:16,210 --> 00:10:24,160
somehow if if I run in this way instead

00:10:19,840 --> 00:10:27,130
of route so probably you are all away if

00:10:24,160 --> 00:10:35,980
said if I said that this is a better way

00:10:27,130 --> 00:10:38,320
to run wash against their fruit so the

00:10:35,980 --> 00:10:42,910
same case for tcpdump which is of course

00:10:38,320 --> 00:10:46,270
another sniffer we can we can run these

00:10:42,910 --> 00:10:52,600
capabilities for NTP date but somebody

00:10:46,270 --> 00:10:53,110
says me that this problem okay never

00:10:52,600 --> 00:10:56,020
mind yeah

00:10:53,110 --> 00:10:57,820
so as you can see we can run all these

00:10:56,020 --> 00:10:59,290
problems with these capabilities for

00:10:57,820 --> 00:11:02,590
example sis module which allows you to

00:10:59,290 --> 00:11:06,790
to load the model to a kernel for that

00:11:02,590 --> 00:11:08,680
winery and in that case something nice

00:11:06,790 --> 00:11:14,400
happens for example in the case of the

00:11:08,680 --> 00:11:14,400
ping if I if I run the

00:11:23,030 --> 00:11:30,470
yes if I put the this capability to the

00:11:26,450 --> 00:11:40,490
actual ping which has debit su ID I get

00:11:30,470 --> 00:11:42,800
a message in the kernel that I get this

00:11:40,490 --> 00:11:46,910
message in the kernel so the kernel

00:11:42,800 --> 00:11:48,770
notice that this this program has the

00:11:46,910 --> 00:11:50,390
ability to run with all the capabilities

00:11:48,770 --> 00:11:53,210
and only with this capability and select

00:11:50,390 --> 00:11:56,180
with the minimum privilege so it's it's

00:11:53,210 --> 00:11:58,820
great so in the same way you can you can

00:11:56,180 --> 00:12:01,550
run this these binaries with the

00:11:58,820 --> 00:12:03,950
capability of one run as root with all

00:12:01,550 --> 00:12:11,600
the capabilities will run as root but

00:12:03,950 --> 00:12:15,770
only with few capabilities yes so if now

00:12:11,600 --> 00:12:18,740
you need to be be careful which with who

00:12:15,770 --> 00:12:21,350
can run this program so of course if I

00:12:18,740 --> 00:12:23,300
modify my were shocked everybody in my

00:12:21,350 --> 00:12:25,780
computer can run were shacking it the

00:12:23,300 --> 00:12:29,990
network so you need to be you need to be

00:12:25,780 --> 00:12:33,770
warned about that so this thing about

00:12:29,990 --> 00:12:35,839
the flag sets so sure that many of you

00:12:33,770 --> 00:12:38,510
are familiar with this concept but in

00:12:35,839 --> 00:12:41,930
the permanence that you have the the

00:12:38,510 --> 00:12:44,060
capability that is in the toolbox and in

00:12:41,930 --> 00:12:46,400
the effective set it's the character you

00:12:44,060 --> 00:12:48,620
have in your hand so you can you can

00:12:46,400 --> 00:12:51,290
drop a capability from your hand to the

00:12:48,620 --> 00:12:53,000
toolbox if you drop the cavity from the

00:12:51,290 --> 00:12:56,510
toolbox you can access that capability

00:12:53,000 --> 00:12:58,640
anymore and if you drop from your hand

00:12:56,510 --> 00:13:00,580
you can tap a get it again from their

00:12:58,640 --> 00:13:02,870
toolbox so it's a way to drop

00:13:00,580 --> 00:13:05,870
intermediate things and you a way to

00:13:02,870 --> 00:13:08,780
disable temporary capabilities in the

00:13:05,870 --> 00:13:14,050
case of the the last one it's a it's a

00:13:08,780 --> 00:13:16,070
wage it's a yeah I mean yeah it's the

00:13:14,050 --> 00:13:19,310
it's the motive capability that you

00:13:16,070 --> 00:13:21,710
allowed to for the ASEC Cisco the fork

00:13:19,310 --> 00:13:23,390
is not included here because the fork is

00:13:21,710 --> 00:13:25,040
a copy of the memory so the for gonna

00:13:23,390 --> 00:13:27,339
get the same amount of capabilities that

00:13:25,040 --> 00:13:27,339
the father

00:13:29,270 --> 00:13:38,750
so there's another lovely package call

00:13:34,940 --> 00:13:41,750
it lip pump cap which is a capability

00:13:38,750 --> 00:13:43,850
module for for pump this is the way to

00:13:41,750 --> 00:13:47,060
use it in this scenario I would like to

00:13:43,850 --> 00:13:49,070
keep a user call it semi route the

00:13:47,060 --> 00:13:55,399
capability of remove any file in my

00:13:49,070 --> 00:13:58,580
system without check the permissions so

00:13:55,399 --> 00:14:01,310
I need to to keep that capability to the

00:13:58,580 --> 00:14:05,420
user that going to put the that

00:14:01,310 --> 00:14:07,730
capability in the P in the tool box

00:14:05,420 --> 00:14:10,060
and in this case for example it's not in

00:14:07,730 --> 00:14:15,260
the tool box otherwise anybody can run

00:14:10,060 --> 00:14:18,740
any rearm armed with any without any

00:14:15,260 --> 00:14:24,410
check this capability disable the duct

00:14:18,740 --> 00:14:31,399
check so I should be careful not put ap

00:14:24,410 --> 00:14:33,709
here so when our m-met semi route all

00:14:31,399 --> 00:14:36,279
the capacities are there and then semi

00:14:33,709 --> 00:14:39,560
route can remove any file in the system

00:14:36,279 --> 00:14:45,350
yes and only works for a ram of course

00:14:39,560 --> 00:14:48,110
not for unlink are the kind of things I

00:14:45,350 --> 00:14:57,140
have a demo of this but let me show you

00:14:48,110 --> 00:14:59,510
something I closed it yes okay so it's

00:14:57,140 --> 00:15:07,190
not working now because it's a release

00:14:59,510 --> 00:15:08,420
critical well so please close it so

00:15:07,190 --> 00:15:10,880
let's talk a bit about process

00:15:08,420 --> 00:15:15,320
capability so that there is a way to rob

00:15:10,880 --> 00:15:19,370
this capabilities and I made a wonderful

00:15:15,320 --> 00:15:21,649
example in C which is extremely long so

00:15:19,370 --> 00:15:24,860
I made the same version in Python which

00:15:21,649 --> 00:15:27,290
is seven lines so I will show you the

00:15:24,860 --> 00:15:30,610
seven last version it's a web server

00:15:27,290 --> 00:15:36,740
which runs in the 80 port

00:15:30,610 --> 00:15:40,720
let me show you so this a lip cup ng has

00:15:36,740 --> 00:15:40,720
binding for Python so that's why

00:15:44,720 --> 00:15:53,339
and the the the basic part of the server

00:15:48,689 --> 00:15:56,519
is not this one it's just this one so

00:15:53,339 --> 00:16:05,069
I'm City Handler and open a port here

00:15:56,519 --> 00:16:16,529
and then I'm looping yes so of course if

00:16:05,069 --> 00:16:25,680
I run in light like that everything was

00:16:16,529 --> 00:16:29,399
nice but remember net cup which is the

00:16:25,680 --> 00:16:32,430
version that checks the in this case

00:16:29,399 --> 00:16:39,420
this HTTP server runs with full

00:16:32,430 --> 00:16:44,279
coverlets yes so let's modify this let's

00:16:39,420 --> 00:16:49,889
include cup ng and let's drop all the

00:16:44,279 --> 00:16:53,000
capabilities except this one cup net

00:16:49,889 --> 00:16:53,000
bind service

00:17:00,070 --> 00:17:06,699
so is somebody exploit this process the

00:17:04,959 --> 00:17:10,959
the only ability that they have is all

00:17:06,699 --> 00:17:16,630
just bind a port funded under the

00:17:10,959 --> 00:17:21,610
thousand 24 so that's right of course

00:17:16,630 --> 00:17:23,350
there is some drawbacks so maybe the

00:17:21,610 --> 00:17:27,220
question here should be why we don't

00:17:23,350 --> 00:17:28,510
support this more out of the box I'm

00:17:27,220 --> 00:17:30,760
probably the answer is because the

00:17:28,510 --> 00:17:33,010
normal tools doesn't support X

00:17:30,760 --> 00:17:36,790
attributes extend the attributes like

00:17:33,010 --> 00:17:38,799
move CP it or especially these start

00:17:36,790 --> 00:17:41,490
over right I have no idea what's that

00:17:38,799 --> 00:17:47,679
for but yeah that doesn't support

00:17:41,490 --> 00:17:50,559
actuator M Sahel

00:17:47,679 --> 00:17:53,350
it's a bit something a bit not too

00:17:50,559 --> 00:17:55,059
explored so that's great that you are

00:17:53,350 --> 00:17:57,730
here because now you can explore more

00:17:55,059 --> 00:17:59,200
about this the just avail or the day

00:17:57,730 --> 00:18:01,270
before look ask me how to include

00:17:59,200 --> 00:18:07,409
capabilities in his packages so that's

00:18:01,270 --> 00:18:11,440
great but there is bigger problems in

00:18:07,409 --> 00:18:13,659
even more so the dependence that in some

00:18:11,440 --> 00:18:15,990
situations give a capability to a user

00:18:13,659 --> 00:18:15,990
yes

00:18:23,950 --> 00:18:29,299
okay so I don't understand why is it

00:18:26,840 --> 00:18:31,880
necessarily the tools support this kind

00:18:29,299 --> 00:18:32,600
of capabilities because this is managed

00:18:31,880 --> 00:18:35,990
by the kernel

00:18:32,600 --> 00:18:37,190
what yes but the file

00:18:35,990 --> 00:18:39,200
they have the file capability are

00:18:37,190 --> 00:18:42,140
supported by the filesystem and for

00:18:39,200 --> 00:18:43,940
example each time that I up raid my were

00:18:42,140 --> 00:18:47,360
shocked I need to set the capability

00:18:43,940 --> 00:18:49,549
again because I lose they know it so

00:18:47,360 --> 00:18:51,620
okay so it would not it would not be a

00:18:49,549 --> 00:18:53,950
security all it would just be losing the

00:18:51,620 --> 00:18:57,890
cupboard possibility to use the tools

00:18:53,950 --> 00:19:01,220
capabilities yes yes it's not how

00:18:57,890 --> 00:19:06,770
inconvenient and we are an operating

00:19:01,220 --> 00:19:08,929
system so we want to be convenient so in

00:19:06,770 --> 00:19:12,260
some scenarios some capabilities can be

00:19:08,929 --> 00:19:14,539
route equivalent especially in scenarios

00:19:12,260 --> 00:19:16,520
where the retry code execution is it's

00:19:14,539 --> 00:19:20,240
possible for example if you have the

00:19:16,520 --> 00:19:23,210
capability to to override duck if you if

00:19:20,240 --> 00:19:24,950
you ignore the duck checks of course you

00:19:23,210 --> 00:19:29,270
can check the you can change their

00:19:24,950 --> 00:19:30,650
password and get route easily and if you

00:19:29,270 --> 00:19:33,640
have the possibility to change the

00:19:30,650 --> 00:19:36,650
permission of a file you can change the

00:19:33,640 --> 00:19:40,669
the owner of etc password and you get

00:19:36,650 --> 00:19:42,530
access easily and the same applies to a

00:19:40,669 --> 00:19:44,659
shadow in this case for example you can

00:19:42,530 --> 00:19:46,490
only read but you can make a brain boat

00:19:44,659 --> 00:19:49,669
attack or something and you get rich

00:19:46,490 --> 00:19:51,100
easily many many many many many others

00:19:49,669 --> 00:19:54,230
countries

00:19:51,100 --> 00:19:56,750
this one is fancy so in this case if you

00:19:54,230 --> 00:19:59,659
have kill and buying service you can

00:19:56,750 --> 00:20:01,429
just change a service and steal

00:19:59,659 --> 00:20:05,419
credentials for example that's a nice

00:20:01,429 --> 00:20:08,450
one so you can imagine all a lot of we

00:20:05,419 --> 00:20:12,770
are scenarios where one capability gives

00:20:08,450 --> 00:20:15,200
you root access so even if you don't

00:20:12,770 --> 00:20:18,230
have any capability the fact that you're

00:20:15,200 --> 00:20:20,210
running with root it's a it can can

00:20:18,230 --> 00:20:22,280
allows you to to to to do something for

00:20:20,210 --> 00:20:25,429
example if you only have root you can

00:20:22,280 --> 00:20:28,220
write on the Crone hourly your script

00:20:25,429 --> 00:20:30,679
and eventually cron runs with truth with

00:20:28,220 --> 00:20:33,470
the all the capabilities and the binary

00:20:30,679 --> 00:20:35,200
will be executed did you get that last

00:20:33,470 --> 00:20:41,260
example yes / yes

00:20:35,200 --> 00:20:43,570
- that is that is a even worse a

00:20:41,260 --> 00:20:47,169
scenario where include capability can

00:20:43,570 --> 00:20:55,120
open new holes so there is the fancy

00:20:47,169 --> 00:20:59,700
fancy fancy document that me this

00:20:55,120 --> 00:21:07,149
document is called exploiting abilities

00:20:59,700 --> 00:21:09,279
so in this case the mount just yeah it's

00:21:07,149 --> 00:21:10,779
not prepared to run without the

00:21:09,279 --> 00:21:15,820
capability but it's prepared to run as

00:21:10,779 --> 00:21:19,750
root there is some attack where you can

00:21:15,820 --> 00:21:23,019
manipulate the empty empty tap temp so

00:21:19,750 --> 00:21:26,139
it's an insecure temp file in etcetera

00:21:23,019 --> 00:21:28,809
and yeah of course mode is already fixed

00:21:26,139 --> 00:21:31,750
but if your application is somehow not

00:21:28,809 --> 00:21:34,659
prepared for for capabilities nothing

00:21:31,750 --> 00:21:42,929
our trap abilities you make open hole

00:21:34,659 --> 00:21:42,929
there so be careful so yes

00:21:46,380 --> 00:21:55,289
I think something that may illustrate

00:21:50,490 --> 00:21:59,429
these mason Wars and the cure is that we

00:21:55,289 --> 00:22:03,210
well we developers we should all know to

00:21:59,429 --> 00:22:05,460
fear as UID binaries and aha and the

00:22:03,210 --> 00:22:09,630
thing is you did this check and you have

00:22:05,460 --> 00:22:12,690
you found 300 but when you do an LS or a

00:22:09,630 --> 00:22:15,210
simple check on the file system files

00:22:12,690 --> 00:22:16,950
with capabilities do not show so you see

00:22:15,210 --> 00:22:21,000
you think yourself you think you have a

00:22:16,950 --> 00:22:22,950
system with no strange permissions and I

00:22:21,000 --> 00:22:26,730
think that's also an important point yes

00:22:22,950 --> 00:22:28,740
so they let me let me transform that in

00:22:26,730 --> 00:22:30,870
a scenario so you can you can build a

00:22:28,740 --> 00:22:33,030
backdoor with capabilities and nobody

00:22:30,870 --> 00:22:34,710
will notice so I think that's that's a

00:22:33,030 --> 00:22:39,150
lack of tools

00:22:34,710 --> 00:22:42,900
so I mentioned somewhere here but yeah

00:22:39,150 --> 00:22:45,780
here so somehow there is a lack of tools

00:22:42,900 --> 00:22:49,260
so a rootkit scanner should include this

00:22:45,780 --> 00:22:53,159
come of check somehow yeah but even I

00:22:49,260 --> 00:22:58,679
mean when you didn't LS on has been root

00:22:53,159 --> 00:23:01,169
it was shown in red because LSA looks at

00:22:58,679 --> 00:23:03,990
that so it's not even a specific

00:23:01,169 --> 00:23:07,380
security scanning tool just the most

00:23:03,990 --> 00:23:20,100
everyday a command you've run yes we are

00:23:07,380 --> 00:23:22,559
aware of your su ID yes yes sir so the

00:23:20,100 --> 00:23:26,520
the second point is this thing that

00:23:22,559 --> 00:23:29,820
could be useful for not for not such a

00:23:26,520 --> 00:23:31,559
user ID programs the word shack example

00:23:29,820 --> 00:23:36,480
is I think it's a good example I have

00:23:31,559 --> 00:23:39,230
some other examples so I make this I ran

00:23:36,480 --> 00:23:43,440
this common PS

00:23:39,230 --> 00:23:48,960
yes captain what yes let me put this

00:23:43,440 --> 00:23:51,120
bigger so as you can see there are some

00:23:48,960 --> 00:23:54,320
some of them which are running with

00:23:51,120 --> 00:23:58,080
capabilities for example Bluetooth T and

00:23:54,320 --> 00:24:04,740
genome curing them on so I asked myself

00:23:58,080 --> 00:24:08,570
ok how they make it so I download the

00:24:04,740 --> 00:24:08,570
source Thank You Debian

00:24:21,850 --> 00:24:27,299
yes in the post installed a understand

00:24:24,999 --> 00:24:38,590
if it's clear enough to read it I can

00:24:27,299 --> 00:24:41,830
it's better no it's not bad okay and so

00:24:38,590 --> 00:24:44,080
this this guy has ran setcap after

00:24:41,830 --> 00:24:47,320
install the thing properly is not the

00:24:44,080 --> 00:24:48,340
most elegant way we have tools to set

00:24:47,320 --> 00:24:51,789
permissions

00:24:48,340 --> 00:25:00,639
maybe we should extend those tools you

00:24:51,789 --> 00:25:07,179
know support this if something funny

00:25:00,639 --> 00:25:12,909
maybe Fedora 15 release without any bit

00:25:07,179 --> 00:25:15,909
s UID and that was like three years ago

00:25:12,909 --> 00:25:19,330
one year ago so somehow they afraid

00:25:15,909 --> 00:25:22,419
those beat I don't know I think it's a

00:25:19,330 --> 00:25:25,929
common feeling afraid these bits on the

00:25:22,419 --> 00:25:28,539
other hand they they they they usually

00:25:25,929 --> 00:25:32,619
be in binaries that have been in system

00:25:28,539 --> 00:25:35,349
forever like thing so nobody should be

00:25:32,619 --> 00:25:40,840
afraid of that but yeah they decide to

00:25:35,349 --> 00:25:44,049
remove every bit security in favor 15

00:25:40,840 --> 00:25:51,279
and we want to is planning to do the

00:25:44,049 --> 00:25:54,519
same and I'm not really sure maybe it's

00:25:51,279 --> 00:25:59,769
not worthy I don't know it's it's a lot

00:25:54,519 --> 00:26:04,809
of work and maybe DDD maybe the profit

00:25:59,769 --> 00:26:08,859
is maybe there is no profit Fedora

00:26:04,809 --> 00:26:12,759
already has a C Linux support right and

00:26:08,859 --> 00:26:20,679
so how would how would this tight C

00:26:12,759 --> 00:26:25,060
Linux yeah I don't know the the I think

00:26:20,679 --> 00:26:27,149
that they try to go to similar problems

00:26:25,060 --> 00:26:30,849
[Music]

00:26:27,149 --> 00:26:33,759
but yes I told you use sa Linux and it's

00:26:30,849 --> 00:26:35,390
extremely complex and maybe this is is

00:26:33,759 --> 00:26:39,350
it's a way in the middle

00:26:35,390 --> 00:26:43,280
not that complex but I have no idea how

00:26:39,350 --> 00:26:46,460
they integrate both so you started out

00:26:43,280 --> 00:26:50,270
with pingas the first example for how to

00:26:46,460 --> 00:26:52,820
use capabilities and ping per default is

00:26:50,270 --> 00:26:57,290
set used at the IP route so everyone is

00:26:52,820 --> 00:27:00,620
able to use it kept up with turning on

00:26:57,290 --> 00:27:04,160
the capability you won't need to set you

00:27:00,620 --> 00:27:06,890
at the route anymore but you also bring

00:27:04,160 --> 00:27:10,490
up examples like TCP dump and mount

00:27:06,890 --> 00:27:13,190
which do not set you at erode by setting

00:27:10,490 --> 00:27:17,330
the capability everyone would be able to

00:27:13,190 --> 00:27:20,180
use it with its extent if they if they

00:27:17,330 --> 00:27:22,340
if they can execute it they will

00:27:20,180 --> 00:27:30,040
exercise the capability so you need to

00:27:22,340 --> 00:27:30,040
remove the execution for everyone ok ok

00:27:31,720 --> 00:27:37,400
so this this point of capabilities are

00:27:34,730 --> 00:27:39,980
hard to understand I think it's

00:27:37,400 --> 00:27:45,290
something it's not that hard but as a

00:27:39,980 --> 00:27:48,020
Linux so maybe it's but but yes I was

00:27:45,290 --> 00:27:49,730
thinking here should I defend capability

00:27:48,020 --> 00:27:54,790
I don't feel an expert in capabilities

00:27:49,730 --> 00:27:57,970
and I give me this talk somehow so yeah

00:27:54,790 --> 00:28:02,660
yeah I'm not sure if it's the path to go

00:27:57,970 --> 00:28:07,130
going out there I can give you another

00:28:02,660 --> 00:28:09,950
microphone I was thinking maybe one of

00:28:07,130 --> 00:28:12,230
the reasons that if Fedora was able to

00:28:09,950 --> 00:28:15,130
implement this and they want to earn

00:28:12,230 --> 00:28:17,780
their way to is precisely because they

00:28:15,130 --> 00:28:20,900
support very much more conservative

00:28:17,780 --> 00:28:23,560
setups I mean they can say well we will

00:28:20,900 --> 00:28:28,100
install with extended for we will not

00:28:23,560 --> 00:28:30,620
run on NFS because a very small fraction

00:28:28,100 --> 00:28:32,990
of their user base here uses it mm-hmm

00:28:30,620 --> 00:28:36,250
I don't say that the majority of Debian

00:28:32,990 --> 00:28:40,060
installs run on an NFS but we do have a

00:28:36,250 --> 00:28:42,590
every time something is bound to break a

00:28:40,060 --> 00:28:43,670
little minority of the systems we have a

00:28:42,590 --> 00:28:48,010
flame work yeah

00:28:43,670 --> 00:28:55,480
recently we had this one about run

00:28:48,010 --> 00:29:00,250
I totally agree yes and then we have two

00:28:55,480 --> 00:29:01,560
of those I mean microphones no better

00:29:00,250 --> 00:29:04,630
person

00:29:01,560 --> 00:29:06,310
do you know anything about the technical

00:29:04,630 --> 00:29:09,190
details how one tree is going to

00:29:06,310 --> 00:29:14,500
implement this do they put the capital

00:29:09,190 --> 00:29:17,350
it is into the theta torque it's a list

00:29:14,500 --> 00:29:20,860
of they they want to remove the bit

00:29:17,350 --> 00:29:23,650
about if you install a package yes I

00:29:20,860 --> 00:29:26,560
suppose they will set the capabilities

00:29:23,650 --> 00:29:29,320
on the filesystem and some automatic way

00:29:26,560 --> 00:29:30,970
yes you don't have to do it manually yes

00:29:29,320 --> 00:29:34,150
I have no idea about the details yeah

00:29:30,970 --> 00:29:35,620
because I said as far if I understood

00:29:34,150 --> 00:29:39,130
you correctly it would be possible to

00:29:35,620 --> 00:29:42,070
have the pro ping for example pset UID

00:29:39,130 --> 00:29:44,530
and automatically set the capabilities

00:29:42,070 --> 00:29:47,080
and do the right thing if you have

00:29:44,530 --> 00:29:49,390
extended attributes and just skip the

00:29:47,080 --> 00:29:51,670
attributes and still do this thing it

00:29:49,390 --> 00:29:53,800
does today if you don't have extended

00:29:51,670 --> 00:29:55,660
attributes exactly if you have both the

00:29:53,800 --> 00:29:59,560
kernel selects the less privileged one

00:29:55,660 --> 00:30:01,480
yes yeah yes they maybe have the tools

00:29:59,560 --> 00:30:03,790
that we like to another to have to

00:30:01,480 --> 00:30:07,750
support better this extended rivet in

00:30:03,790 --> 00:30:10,840
positional and Acoma things just as a

00:30:07,750 --> 00:30:13,330
remark I think it's in my opinion it

00:30:10,840 --> 00:30:15,850
sounds quite worth play because it's a

00:30:13,330 --> 00:30:17,530
security improvement and it's kind of an

00:30:15,850 --> 00:30:20,350
easier one than all the other

00:30:17,530 --> 00:30:23,740
alternatives like running a full se

00:30:20,350 --> 00:30:26,020
Linux system or up-armored but on the

00:30:23,740 --> 00:30:28,840
other hand what scares me a bit is that

00:30:26,020 --> 00:30:31,360
capabilities seem to be a lot of a mess

00:30:28,840 --> 00:30:33,670
I mean you showed it there are silly

00:30:31,360 --> 00:30:38,440
capabilities that are route equivalent

00:30:33,670 --> 00:30:41,740
and there was think a few months ago lwn

00:30:38,440 --> 00:30:44,500
article about this to the discussing

00:30:41,740 --> 00:30:46,450
this mess so I think maybe we should

00:30:44,500 --> 00:30:50,110
also wait if the mess gets cleaned up

00:30:46,450 --> 00:30:54,160
first yes but but but meanwhile I

00:30:50,110 --> 00:30:59,540
suggest that that have better tools for

00:30:54,160 --> 00:31:06,770
that yes okay

00:30:59,540 --> 00:31:10,550
yes you're not so there could you use it

00:31:06,770 --> 00:31:14,240
in the context of say like a demon where

00:31:10,550 --> 00:31:18,350
you want to prevent it from writing to

00:31:14,240 --> 00:31:21,650
temp as an example so any program can

00:31:18,350 --> 00:31:26,030
write to temp now you can you reduce its

00:31:21,650 --> 00:31:28,520
privilege you know normal privilege that

00:31:26,030 --> 00:31:30,710
any process would have can you eliminate

00:31:28,520 --> 00:31:33,890
no no we are talking about fruit

00:31:30,710 --> 00:31:36,710
capabilities just rootkit yes yes this

00:31:33,890 --> 00:31:40,670
is this is thirty five things that truth

00:31:36,710 --> 00:31:51,050
can do and we somehow we split it and we

00:31:40,670 --> 00:31:55,580
can give those yes so we we left a lot

00:31:51,050 --> 00:31:59,720
of links here lucky enough our Penta now

00:31:55,580 --> 00:32:04,700
support slides attached so you can

00:31:59,720 --> 00:32:07,970
download those from Penta especially

00:32:04,700 --> 00:32:11,960
well this document is the the best carry

00:32:07,970 --> 00:32:17,300
one but yes the other one are nice too

00:32:11,960 --> 00:32:20,120
so if you so any of you have any more

00:32:17,300 --> 00:32:22,070
comments I hope that you can learn

00:32:20,120 --> 00:32:26,180
something new today

00:32:22,070 --> 00:32:30,080
just one yes sure okay FreeBSD not that

00:32:26,180 --> 00:32:33,140
I care but if we do it in Debian it

00:32:30,080 --> 00:32:35,960
should somehow work there too yes does

00:32:33,140 --> 00:32:39,500
it probably not they call it Linux

00:32:35,960 --> 00:32:41,870
capabilities I don't know no but they

00:32:39,500 --> 00:32:44,540
they have something very similar I mean

00:32:41,870 --> 00:32:47,180
a basically Linda's capabilities were

00:32:44,540 --> 00:32:49,490
copied over at least I first knew them

00:32:47,180 --> 00:32:52,850
in open beer zip but a bit sure that

00:32:49,490 --> 00:32:55,880
hard doesn't they they have some time of

00:32:52,850 --> 00:32:59,990
project to - no no but but hard has a

00:32:55,880 --> 00:33:03,050
herd of demons okay no but okay FreeBSD

00:32:59,990 --> 00:33:05,870
a will support I don't know if it's the

00:33:03,050 --> 00:33:09,640
same set or the same nomenclature but

00:33:05,870 --> 00:33:09,640
they do have capabilities

00:33:09,870 --> 00:33:15,130
my buddies honest question I mean this

00:33:12,460 --> 00:33:20,500
tool improvements should include somehow

00:33:15,130 --> 00:33:27,270
yet time maybe is it possible to do a CH

00:33:20,500 --> 00:33:27,270
UID with is there so NC r-- truth

00:33:35,620 --> 00:33:46,059
Thank You Joey good at or Rhonda

00:33:42,929 --> 00:33:54,520
basically anything that root can do was

00:33:46,059 --> 00:33:58,240
divided in a set of more things but 35

00:33:54,520 --> 00:34:02,140
groups of a is actions

00:33:58,240 --> 00:34:04,809
so whatever a root can do that a regular

00:34:02,140 --> 00:34:07,510
user can not do is in one of those sets

00:34:04,809 --> 00:34:09,669
that's why for example I mean it could

00:34:07,510 --> 00:34:12,820
sound a contra intuitive that he's

00:34:09,669 --> 00:34:14,830
presenting capabilities as a way to not

00:34:12,820 --> 00:34:21,879
require root but one of the capabilities

00:34:14,830 --> 00:34:33,250
is becoming a becoming root so well

00:34:21,879 --> 00:34:35,740
that's the reason yes yes no I mean it

00:34:33,250 --> 00:34:40,210
would set you ID'd you can just set UID

00:34:35,740 --> 00:34:41,770
0 and your root I mean so I wish I was

00:34:40,210 --> 00:34:47,109
trying to illustrate the example that

00:34:41,770 --> 00:34:49,179
whenever says if you give this

00:34:47,109 --> 00:34:53,320
capability to a process the process can

00:34:49,179 --> 00:34:59,680
set set UID 0 and his root with all the

00:34:53,320 --> 00:35:05,200
capabilities yep yes Rhonda if you want

00:34:59,680 --> 00:35:07,510
I mean was a question I see about how is

00:35:05,200 --> 00:35:25,230
the user space memory layout is there

00:35:07,510 --> 00:35:28,630
any chance I was like any other comment

00:35:25,230 --> 00:35:29,970
so again I hope that you you could learn

00:35:28,630 --> 00:35:34,470
something new today

00:35:29,970 --> 00:35:34,470

YouTube URL: https://www.youtube.com/watch?v=YFgkNq4Mc6w


